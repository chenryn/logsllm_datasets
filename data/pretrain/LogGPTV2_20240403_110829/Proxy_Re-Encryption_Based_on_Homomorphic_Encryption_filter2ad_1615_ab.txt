t2 ← t2 ∗ m mod K
t1 ← t1 − t2∗K k−1
j+1
p
)
p
k!
m ← t1
return m mod Kn
p
9:
10:
11:
◃ m = mj−1
◃ t2 = m(m − 1)...(m − k + 2)
j
p
mod K
j
p
◃ t1 = t1 − Ci
k Kk−1
p
the decryption of the cipher-text c into m such as
m = F(cKs).K
(7)
If we consider two plain-texts m1 and m2, the additive homomor-
phic property of the Damgard-Jurik cryptosystem allows linear
operations on encrypted data, ensuring that
mod Kn
p
−1
s
E[m1, r1]E[m2, r2] = E[m1 + m2, r1r2]
(8)
(9)
E[m1, r1]m2 = E[m1m2, r
]
m2
1
2.2 Computing the difference in-between
encrypted data
Let us consider a user-server relationship where the server has
two cipher-texts EKp[a, r] and EKp[b, r] encrypted by the user and
where a and b are two integers we want to compute their difference
d = a − b from their encrypted versions. The solution we propose
assumes that both cipher-texts are encrypted with the same random
value r. Under this constraint, one can directly derive the difference
d from EKp[a, r] and EKp[b, r] by taking advantage of the iterative
function F(.) of Damgard-Jurik cryptosystem and the simplification
assumption of д, i.e. д = 1 + Kp, as follows
D(a, b) = De(EKp[a, r], EKp[b, r])
d =
d = F(EKp[a, r]EKp[b, r]−1 mod Kn+1
p
p mod Kn+1
d =
F(дar K n
−K n
) mod Kn
p
p д−br
F(дa−b mod Kn+1
p
) mod Kn
p
p
) mod Kn
p
F((1 + Kp)a−b mod Kn+1
a − b mod Kn
p
p
) mod Kn
p
d =
d =
d =
(10)
where D and De denote the two functions that allows computing
the difference d in the clear and Damgard-Jurik encrypted domain,
respectively. Notice that knowing the difference d between a and
b gives no clues about the values of a and b, respectively. We will
come back on this point in Section 5.
2.3 Secure combined linear congruential
generator
As stated above, our HPRE scheme requires the cloud to securely
generate a Damgard-Jurik encrypted random sequence of integers.
The generator we propose to secure is CLCG [25] (Combined Linear
Congruential Generator). This one is given by the sum of two linear
congruential generators. A linear congruential generator (LCG) is
based on congruence and one linear functions
Xn+1 = aXn + c mod m
(11)
where: Xn is the nth random integer value of the LCG sequence; a
is a multiplier; c is an increment; m is the modulo; and, X0 the initial
term, also called the seed or the secret LCG key. The generation
of a CLCG random sequence results from the combination of two
LCG sequences generated such as
Zn+1 = Xn+1 + Yn+1 mod m = ax Xn + cx + ayYn + cy mod m
(12)
where Zn is the nth random integer value of the CLCG sequence;
ax and ay are CLCG multipliers; cx and cy are CLCG increments;
m is the modulo; X0 and Y0 are the two CLCG initial terms, one
needs to know so as to re-generate the two random sequences Xi
and Yi, respectively. Notice that the security of CLCG stands on the
seeds X0 and Y0. The knowledge of the parameters (ax , ay), (cx , cy)
and m does not endanger its security [17]. Under the constraint
m in (11) equals the user Damgard-Jurik public key Kp, the CLCG
implementation in the Damgard-Jurik encrypted domain so as to
generate an encrypted pseudo random sequence of integers (i.e.
{E[Zn, rn]}n=0...N−1) is such as:
E[Zn+1, rZ,n+1] = E[Xn+1, rX,n+1]E[Yn+1, rY ,n+1]
where
E[Xn+1, rX,n+1] = E[Xn, rX,n]aX E[cX , rcX ]
X,nrcX ]
= E[aX Xn + cX , r
aX
(13)
(14)
aY
E[Yn+1, rY ,n+1] = E[Yn, rY ,n]aY E[cY , rcY ]
Y ,nrcY ]
= E[aY Yn + cY , r
(15)
Notice, the fact that m = Kp makes the period of the CLCG very
≃
long. In the case Kp coded on 1024 bits, the CLCG period is
22047 [18]. If the increment as well as all terms of the sequence are
encrypted (including the CLCG seeds) that is not the case of the
multipliers (aX , aY ) (due to (14) and (15)). However, this does not
reduce the security of our system as the parameters (aX , aY ) are
not supposed to be secret [17]. It is important to notice that, in
our SCLCG, a recursive relation exists between the random inte-
gers rZ,n which ensure the semantic security of the Damgard-Jurik
(Kp−1)2
2
1563.2 Secure data exchange between users
Let us thus consider that Alice (the delegator) wants to share with
Bob (the delegate) a set of data she is the owner of. These data could
be a set of integer values like for instance a gray-scale image I, the
N pixels of which I = {Ii}i =0...N−1 are encoded on b bits. As said,
it is assumed that Alice has already outsourced an image into the
cloud by Damgard-Jurik encrypting its pixels independently with
her public key Kp1, such as (see Data outsourcing step in Fig. 2)
i = EKp1[Ii , ri]
I e
(17)
where ri is the random value associated to the ith pixel Ii of I, I e
is
i
the encrypted version of Ii. As we will see in the sequel, our HPRE
procedure imposes a constraint on the way Alice generates the
random values {ri}i =0..N−1. These ones should satisfy (16), and for
one file Alice stores into the cloud she has to memorize the first
random values rcX , rcY and r0 she used to encrypt the first image
0 = EKp1[I0, r0]. In order to share an encrypted image with
pixel: I e
Bob, the public Damgard-Jurik encryption key of whom is Kp2, we
propose the following HPRE procedure (see Fig. 2):
(2) Secret random sequence generation- Alice encrypts(X0, Y0)
(1) User agreement data exchange- In this step, Bob and
Alice securely agree on the CLCG parameters for the ex-
change: the secret keys (X0, Y0), the multipliers (aX , aY ) and
the increments (cX , cY ). This step can be conducted using
for instance the Diffie-Hellman key exchange protocol [11].
and (cX , cY ) with her public key Kp1 and sends them to the
cloud. Notice that Z0 is encrypted with the same random
integer r0 = rZ,0 = rX,0rY ,0. For the sake of simplicity, in
the sequel, we denote rZ,i = rX,irY ,i by ri. Based on these
pieces of information, the cloud generates the secret random
sequence with (16) Z e = {Z e
i
= EKp1[Zi , ri]}i =0..N−1.
(3) Data encryption for the delegator- This procedure relies
on different stages: i) the computation of differences between
the encrypted data of Alice (I e) and the secret random se-
quence (Z e); ii) the encryption of these differences with the
public key of Bob Kp2.
(a) Difference computation: as Z e
i are encrypted with
the same public key Kp1 and the same random values ri,
the cloud computes their differences Di (see Section 2.2)
i and I e
Di
Di
=
= D(Zi, Ii) = De(EKp1[Zi, ri], EKp1[Ii, ri])
Zi − Ii mod Kp1
(18)
(b) Data encryption for the delegator: The encryption of D =
{Di} with the public key of Bob followed by the removal
of the added "noise" is possible only if the constraint Di
mod Kp1 = Di mod Kp2, or equivalently 0 < Di <
min(Kp1, Kp2), is verified. This constraint is however hard
to satisfy because of the SCLCG output amplitude which
cannot be controlled simply. To overcome this issue, our
HPRE includes a "noise refreshment procedure" applied
before the encryption of D (see Fig. 2).
• Noise refreshment:
To refresh the noise, Bob first generates on his side the
sequence {Zi}i =0..N−1 using a CLCG parameterized as
the SCLGC of the cloud. He also produces a second noise
Figure 1: General framework for data sharing through
public-cloud
cryptosystem. Derived from (14) and (15), this one is such as:
rZ,n+1 = rX,n+1rY ,n+1
= r
aY
Y ,nrcY
aX
X,nrcX r
(16)
where rcX and rcY denote the random variables used to encrypt
the increments. This recursive relationship will be considered in
Section 2.2 so as to allow data exchange between two different
users.
3 HOMOMORPHIC BASED PROXY
RE-ENCRYPTION SCHEME (HPRE)
In the following, we first refine our data exchange framework and
its basic security assumptions before presenting our HPRE scheme.
3.1 Data exchange scenario in outsourced
environment
Fig. 1 illustrates the general data exchange framework we consider
where a data owner (the delegator) has a priori stored his data into
a public cloud in an asymmetrically encrypted form; data he wants
to share with another user (the delegate). We further assume a
semi-honest cloud server: it honestly stores data uploaded by the
users without disclosing them and responds to their requests; it
is however curious and may try to infer information about users’
data.
As stated previously, our objective is to allow users to share
some data under the constraint the delegator does not have to
download his data, re-encrypt them with the public key of the
delegate and upload them into the cloud. We further want the data
to exchange to be conducted by the cloud (proxy), without giving it
the delegator private key, as well as with very few communications
in-between the delegator, the proxy and the delegate. In our idea, if
one user wants to share data with several users at once, all of them
will have to agree on a single secret with the delegator. One last
assumption is that all communications are protected with the help
of the Damgard-Jurik cryptosystem. Eavesdroppers cannot infer
messages being transmitted.
157Figure 2: Main steps of our HPRE for an image sharing
{βi}i =0..N−1 such as:
2b − 1 < βi < min(Kp1, Kp2)
Figure 3: Samples of face database
As depicted above, this system allows the data exchange between
Alice and Bob, without extra-communication between the cloud
and Alice, and the downloading of data by Bob.
At the end of this procedure, Bob possesses on the cloud the
image of Alice encrypted with his own public key. In order to give
to Bob the possibility to share this image with another user, without
having to download the image and Damgard-Jurik re-encrypts it
with a specific random values (i.e. satisfying (16) as when Alice up-
loaded her image into the cloud), the cloud has to choose r′′
in (21)
equals to 1. Bob will then get access to EKp2[Ii , r′
i] where r′
i
i has
been generated by Bob. Since our scheme is based on homormophic
encryption, the data can be by next processed by the cloud without
endangering data confidentiality.
i]}i =0...N−1 and
i is a random
(c) On its side, in order to remove the random sequence
(19)
where b is the number of bits on which is encoded one
image pixel value. Under such a constraint, we ensure: βi
mod Kp1 = βi mod Kp2 and βi − Ii mod Kp1 = βi − Ii
mod Kp2. Then Bob sends to the cloud
{EKp2[βi , r′
{αi = βi − Zi mod Kp1}i =0..N−1. Where r′
value defined by Bob.
{Zi}i =0...N−1, the cloud computes
Gi = αi + Di mod Kp1 = βi − Ii mod Kp1
(20)
Then it encrypts {Gi}i =0..N−1 with the public key of Bob
(21)
Finally, in order to remove the noise βi from the data of
Bob, the server computes
] = EKp2[βi , r
EKp2[Ii , r
′′
i ] = EKp2[βi − Ii , r
′
i]EKp2[βi − Ii , r
i ]−1
′′
{EKp2[Gi , r
′′