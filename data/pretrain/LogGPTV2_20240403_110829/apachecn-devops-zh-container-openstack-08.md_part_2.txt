14.  安装完成后，`murano-engine`向 API 服务发送关于完成的响应
15.  `murano-api`服务然后将环境标记为部署在数据库中
# Murano DevStack 安装
我们现在将看到如何使用 DevStack 安装 Murano 的开发设置。
1.  如果需要，为开发栈创建根目录:
```
        $ sudo mkdir -p /opt/stack
        $ sudo chown $USER /opt/stack  
```
2.  克隆开发栈存储库:
```
        $ git clone https://git.openstack.org/openstack-dev/devstack 
        /opt/stack/devstack
```
3.  现在创建一个最小的`local.conf`来运行开发栈设置:
```
        $ cat > /opt/stack/devstack/local.conf << END
        [[local|localrc]]
        HOST_IP=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print
        $2}' | cut -f1  -d'/')
        DATABASE_PASSWORD=password
        RABBIT_PASSWORD=password
        SERVICE_TOKEN=password
        SERVICE_PASSWORD=password
        ADMIN_PASSWORD=password
        enable_plugin murano git://git.openstack.org/openstack/murano
        END 
```
4.  现在运行 DevStack:
```
        $ cd /opt/stack/devstack
        $ ./stack.sh  
```
现在应该安装 Murano 了。要验证安装，请运行以下命令:
```
$ sudo systemctl status devstack@murano-*
 devstack@murano-engine.service - Devstack devstack@murano-
engine.service
 Loaded: loaded (/etc/systemd/system/devstack@murano-
engine.service; enabled; vendor preset: enabled)
 Active: active (running) since Thu 2017-11-02 04:32:28 EDT; 2 
weeks 5 days ago
 Main PID: 30790 (murano-engine)
 CGroup: /system.slice/system-devstack.slice/devstack@murano-
engine.service
 ├─30790 /usr/bin/python /usr/local/bin/murano-engine --
config-file /etc/murano/murano.conf
 ├─31016 /usr/bin/python /usr/local/bin/murano-engine --
config-file /etc/murano/murano.conf
 ├─31017 /usr/bin/python /usr/local/bin/murano-engine --
config-file /etc/murano/murano.conf
 ├─31018 /usr/bin/python /usr/local/bin/murano-engine --
config-file /etc/murano/murano.conf
 └─31019 /usr/bin/python /usr/local/bin/murano-engine --
config-file /etc/murano/murano.conf
 devstack@murano-api.service - Devstack devstack@murano-api.service
 Loaded: loaded (/etc/systemd/system/devstack@murano-api.service; 
enabled; vendor preset: enabled)
 Active: active (running) since Thu 2017-11-02 04:32:26 EDT; 2 
weeks 5 days ago
 Main PID: 30031 (uwsgi)
 Status: "uWSGI is ready"
 CGroup: /system.slice/system-devstack.slice/devstack@murano-
api.service
 ├─30031 /usr/local/bin/uwsgi --ini /etc/murano/murano-api-
uwsgi.ini
 ├─30034 /usr/local/bin/uwsgi --ini /etc/murano/murano-api-
uwsgi.ini
 └─30035 /usr/local/bin/uwsgi --ini /etc/murano/murano-api-
uwsgi.ini
```
您可以看到`murano-api`和`murano-engine`服务都已启动并运行。
# 部署容器化应用
在前一节中，您学习了如何使用 DevStack 安装 Murano。现在我们将看到如何使用 Murano 在 OpenStack 上安装应用。由于 Murano 提供了易于浏览的动态用户界面，我们将使用 Horizon 中的应用目录选项卡来运行我们的应用。
在这个例子中，我们将在 Docker 中安装一个 NGINX 容器化的应用。我们需要以下软件包来运行此应用:
*   Docker 接口库:这个库定义了构建 Docker 应用的框架。它提供了由 Docker 支持的所有应用和托管服务所使用的数据结构和公共接口。
*   这是一个常规的 Docker 主机应用。所有容器应用都在一个专用的虚拟机运行映像中运行，该映像由 Docker 和`murano-agent`构建。
*   Kubernetes Pod:这个应用为使用 Kubernetes 运行容器化应用提供了一个基础设施。Kubernetes 安装在 OpenStack 虚拟机上。这对于 Docker 独立主机应用是可选的。
*   Nginx 应用:Nginx 是一个网络服务器应用，将使用 Docker 独立主机或 Kubernetes Pod 应用运行。
All the container applications for Murano can be found at [https://github.com/openstack/k8s-docker-suite-app-murano](https://github.com/openstack/k8s-docker-suite-app-murano).
现在让我们开始使用 Murano 仪表板来运行我们的容器应用。通过输入您的凭据登录您的地平线仪表板:
1.  从[https://github.com/openstack/k8s-docker-suite-app-murano](https://github.com/openstack/k8s-docker-suite-app-murano)下载软件包
2.  为前面列出的每个应用创建一个`.zip`档案
3.  现在导航到仪表板上的应用目录|管理|包
4.  点击导入包
选择文件作为包源，并浏览以上传应用的 ZIP 文件。用每个应用的必要详细信息填写用户界面表单，然后单击“单击”完成包的上传。您现在可以通过导航到应用目录|浏览|浏览本地来浏览可用的应用。您将看到这样的页面:
![](img/00025.jpeg)
5.  按照[https://github . com/open stack/k8s-docker-suite-app-murano/tree/master/DockerStandaloneHost/elements](https://github.com/openstack/k8s-docker-suite-app-murano/tree/master/DockerStandaloneHost/elements)提供的步骤构建虚拟机映像
6.  标记村野要使用的映像。导航到应用目录|管理|标记映像，单击标记映像，并完全按照以下屏幕截图中提供的内容填写详细信息:
![](img/00026.jpeg)
7.  通过单击快速部署来部署应用
您可以在下面的截图中看到，我们有两个容器主机选项可供选择:Kubernetes Pod 和 Docker 独立主机。我们将选择后者作为选项:
![](img/00027.jpeg)
8.  填写要为运行我们的应用而创建的虚拟机的详细信息，如下所示:
![](img/00028.jpeg)
9.  单击创建为我们的部署创建环境
您将被自动重定向到应用目录|应用|环境中新创建的环境。
10.  单击部署环境开始安装您的应用和所需的必要基础架构。
您将看到以下屏幕截图，显示它已开始创建 Docker 将在其上运行的虚拟机:
![](img/00029.jpeg)
成功完成上述部署后，您将能够看到将创建一个新的虚拟机，如下图所示，并且您的 Nginx 应用在虚拟机内部的 Docker 容器中运行:
![](img/00030.jpeg)
您可以登录虚拟机并访问 Nginx 应用。我们现在已经成功地在 OpenStack 上安装了一个容器化的 Nginx 应用。
# 摘要
在本章中，您详细了解了 Murano，它是 OpenStack 的应用目录服务。我们研究了 Murano 的不同概念。然后，你还了解了 Murano 的组件和架构。本章还详细概述了用户请求使用 Murano 部署应用的工作流程。然后我们看到了如何使用 DevStack 安装 Murano 的开发设置，并且我们做了一个使用 Murano 仪表板创建环境、向其中添加应用以及部署环境的实践。
在下一章中，您将了解 Kolla，它为 OpenStack 服务的部署提供了生产就绪容器和工具。