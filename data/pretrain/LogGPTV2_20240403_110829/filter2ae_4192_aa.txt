本文翻译自：
## 前言
根据HackerOne的Hacktivity 版块（版块内有大量已公开/未公开的安全报告） 可以清楚地看到 **子域名劫持报告** 所占的份额。
自从[Detectify 关于子域名劫持的精彩的系列报告](https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/)以来，bug悬赏行业发现有关子域名劫持的报告迅速激增。子域名劫持的大概意思是，主站指向了一个已停用的子域名，而攻击者通过在第三方服务商注册，从而在子域名上提供危险的内容
。作为黑客和安全分析师，我每天都会处理这类问题。 我今天的目标是撰写一份指南，包含理解，查找，利用和报告子域错误配置。
本文假设读者对[域名系统](https://en.wikipedia.org/wiki/Domain_Name_System) （Domain Name
System, DNS）有基本的了解，并知道如何设置子域(Subdomain)。
> 译注：本文中“子域”与“子域名”同义。
## 子域名劫持简介
如果你之前从未听说过子域名劫持或希望再听一遍，我已经设计了一个示例场景来帮助理解基础知识。 _对于这种情况_
，让我们假设`example.com`是测试目标，运行`example.com`的团队对此有一个bug悬赏计划。
在枚举属于example.com的所有子域时（我们将在稍后探讨如何枚举）黑客偶然发现了`subdomain.example.com`
，一个指向GitHub页面的子域名。 我们可以通过查看子域名的DNS记录来确定这一点; 在此示例中，
`subdomain.example.com`具有多个A记录，指向GitHub的[自定义页面的专用IP地址](https://help.github.com/articles/quick-start-setting-up-a-custom-domain/) 。
    $ host subdomain.example.com
    subdomain.example.com has address 192.30.252.153
    subdomain.example.com has address 192.30.252.154
    $ whois 192.30.252.153 | grep "OrgName"
    OrgName: GitHub, Inc.
导航到`subdomain.example.com` ，我们会发现以下404错误页面。
黑客大多会从这一点开始入手。 此404页面表示顶级目录下没有提供任何内容，我们应该尝试将此子域加到我们的个人GitHub仓库。
请注意，这并不表示可以在所有应用上进行劫持。 某些应用会同时检查HTTP和HTTPS响应，而某些应用程序可能根本不受劫持攻击。
将子域添加到我们的GitHub项目后，可以在别人的网址`subdomain.example.com`
看到我们的GitHub仓库的内容——这说明我们已成功声明了这个二级域名。 出于演示目的，主页现在显示一张青蛙的图片。青蛙找虫(bug)。
## 二阶子域名劫持
二阶子域名劫持，我喜欢称之为“ 坏链劫持 ”。这个易受攻击的子域可以不属于目标，但是能够往目标的网站上提供内容。
具体一点的说，目标页面上所导入的多项资源，比如一连串的JavaScript脚本，其中就有一个来自已经被黑客劫持的子域。最终导致储存型跨站点脚本攻击，因为攻击者可以在目标页面上加载任意代码并使其在客户端执行。
我在本指南中专门列出此问题，是为了突出这样一个事实：作为黑客，我不会把自己束缚在目标主机的子域上。我会通过检查源代码并扩展活动范围到目标所依赖的所有主机上来寻找可被劫持的子域。
这也是为什么说，当你劫持一个子域名时，绝对值得投入时间去查看是否有其他页面从你的子域导入资源。
## 子域枚举和发现
我们已经概述了在错误配置的子域上提供内容会产生什么样的后果，下一步是掌握查找易受攻击的子域所需的各种技术，技巧和工具。
在深入学习之前，我们必须首先区分爬虫爬取和暴力枚举。这两个过程都可以帮助你发现子域，但可能会有不同的结果。
爬虫爬取是一种被动侦察技术，使用外部的第三方服务和来源来收集属于特定主机的子域。 某些服务（例如DNS
Dumpster和VirusTotal）可以检索过去已被爬取的子域，这可以让你不花费太多精力就能快速地收集和分类那些爬取结果。
`DNS Dumpster上属于reddit.com子域的结果。`
可供爬取的不只有索引页面，还要记住检查目标的GIT仓库，内容安全策略头部信息，源代码，问题跟踪器等等。来源列表是无穷无尽的，我不断去发现能增加爬取结果的新方法。
你会发现使用的技巧越奇特，就越有可能找到别人没有发现的东西。因此，要开动脑筋去创新，并在实践中检验你的想法，以此去刷各家的漏洞悬赏榜。
Ahmed Aboul-Ela的[Sublist3r](https://github.com/aboul3la/Sublist3r)可以说是我能想到的最简单的子域利用工具。
这个轻量级Python脚本从众多搜索引擎，SSL证书以及DNS Dumpster这样的网站上收集子域。安装过程非常简单：
    $ git clone https://github.com/aboul3la/Sublist3r.git
    $ cd Sublist3r
    $ sudo pip install -r requirements.txt
当暴力检索子域时，黑客会遍历一个词表，并根据响应确定主机是否可连接。 请注意，这点非常重要：始终检查目标是否启用了通配符。否则最终会出现大量误报。
通配符意味着所有子域都会返回一个会导致结果出现偏差的响应。应对的方法就是你可以通过向目标请求一个很可能尚未设置的看似随机的主机名来轻松检测通配符是否启用。
    $ host randomifje8z193hf8jafvh7g4q79gh274.example.com
为了在暴力枚举子域名的同时获得最佳结果，我建议你创建自己的个人词汇表，其中包含你过去遇到过的或通常与你感兴趣的服务相关联的词汇。例如，我经常寻找包含关键字“jira”和“git”的主机，因为我发现易受攻击的Atlassian
Jira和GIT实例比较常见。
如果你计划暴力枚举子域名，我强烈建议你查看[Jason
Haddix的词表](https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056) 。
Jason不厌其烦地将各个子域发现工具的列表合并到了一个列表。
## 指纹
要想在查找子域时获得更多的结果，无论是爬取还是暴力枚举，都可以使用称为指纹识别的技术。
指纹识别允许你为目标创建自定义词表，从而揭示通用词表不能发现的属于目标的信息资产。
## 著名的工具
子域名劫持有各种各样的工具。 本节会介绍一些前文没提到的著名工具。
### Altdns
想递归暴力枚举子域？来看看Shubham Shah的[Altdns脚本](https://github.com/infosec-au/altdns)。
在通过Altdns对目标进行指纹识别后运行自定义词表可能会非常有益。 我喜欢使用Altdns生成词表，然后运行其他工具。
### Commonspeak
另一个由Shubham提供的工具， [Commonspeak](https://github.com/pentester-io/commonspeak)是一个使用Google的BigQuery生成词表的工具。 效果是生成反映当前趋势的词表。在科技日新月异的时代，这一点尤为重要。
如果你想更好地了解此工具的工作原理以及从哪里收集关键字， 请务必阅读 。
### SubFinder
[SubFinder](https://github.com/subfinder/subfinder)是一款将爬取和暴力枚举结合在一起的工具。
我自己使用SubFinder而不是Sublist3r作为我的通用子域发现工具。
为了获得更好的结果，请提供给SubFinder用于查找子域的各种服务的API密钥。
### Massdns
[Massdns](https://github.com/blechschmidt/massdns)是一个超快的子域枚举工具。
如果其他工具耗时一刻钟完成任务，Massdns可以在一分钟内完成。 请注意，如果你打算运行Massdns，请确保为其提供有效解析器列表。
请阅读 ，测试解析器，看看哪些返回最佳结果。
如果你不更新你的解析器列表，你最终会得到很多误报。
    $ ./scripts/subbrute.py lists/names.txt example.com | ./bin/massdns -r lists/resolvers.txt -t A -o S -w results.txt
## 自动化你的工作流程
在寻找子域名劫持时，自动化是关键。 顶级BUG赏金猎人不断监测目标的变化，并不断关注他们可以找到的每个子域。 对于本指南，我认为没有必要专注于监控的搭建。