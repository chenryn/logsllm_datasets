-   已安装 `kmod`{.literal} 软件包。
-   确定 denylist 中的内核模块对您当前系统配置并不重要。
:::
::: orderedlist
**步骤**
1.  选择您要放入 denylist 中的内核模块：
    ``` literallayout
    $ lsmod
    Module                  Size  Used by
    fuse                  126976  3
    xt_CHECKSUM            16384  1
    ipt_MASQUERADE         16384  1
    uinput                 20480  1
    xt_conntrack           16384  1
    …​
    ```
    `lsmod`{.literal} 命令显示载入到当前运行的内核的模块列表。
    ::: itemizedlist
    -   或者，找到您要防止载入的未加载内核模块。
        所有内核模块都位于
        `/lib/modules//kernel//`{.literal}
        目录中。
    :::
2.  为 denylist 创建配置文件：
    ``` literallayout
    # vim /etc/modprobe.d/blacklist.conf
    	# Blacklists 
    	blacklist 
    	install  /bin/false
    	# Blacklists 
    	blacklist 
    	install  /bin/false
    	# Blacklists 
    	blacklist 
    	install  /bin/false
    	…​
    ```
    示例中显示了由 `vim`{.literal} 编辑器编辑的
    `blacklist.conf`{.literal} 文件的内容。`blacklist`{.literal}
    行确定在引导过程中不会自动载入相关内核模块。但是，`blacklist`{.literal}
    命令不会阻止将模块作为不在 denylist
    中的另一个内核模块的依赖项加载。因此，`install`{.literal} 行会导致
    `/bin/false`{.literal} 运行而不是安装模块。
    以 hash 符号开头的行是注释以便更易读。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    :::
3.  在重新构建前，为当前初始 ramdisk 镜像创建备份副本：
    ``` literallayout
    # cp /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).bak.$(date +%m-%d-%H%M%S).img
    ```
    如果新版本出现意外问题，以上命令会创建一个备份 `initramfs`{.literal}
    镜像。
    ::: itemizedlist
    -   另外，还可创建其它初始 ramdisk
        镜像的备份副本，该副本与您要将内核模块放入 denylist
        中的内核版本对应：
        ``` literallayout
        # cp /boot/initramfs-.img /boot/initramfs-.img.bak.$(date +%m-%d-%H%M%S)
        ```
    :::
4.  根据更改生成新的初始 ramdisk 镜像：
    ``` literallayout
    # dracut -f -v
    ```
    ::: itemizedlist
    -   如果您要为当前引导的不同内核版本构建初始 ramdisk
        镜像，请指定目标 `initramfs`{.literal} 和内核版本：
        ``` literallayout
        # dracut -f -v /boot/initramfs-.img 
        ```
    :::
5.  重启系统：
    ``` literallayout
    $ reboot
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
此流程中描述的更改将在重启后[**生效并保留**]{.strong}。如果您将关键内核模块错误地放入
denylist 中，您会遇到不稳定的情况或系统无法正常工作。
:::
::: itemizedlist
**其他资源**
-   [如何阻止内核模块自动加载？](https://access.redhat.com/solutions/41278){.link}
-   `dracut(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#proc_compiling-custom-kernel-modules_managing-kernel-modules}编译自定义内核模块 {.title}
:::
您可以根据硬件和软件级别的各种配置根据需要构建抽样内核模块。
::: itemizedlist
**先决条件**
-   已安装 `kernel-devel`{.literal}、`gcc`{.literal} 和
    `elfutils-libelf-devel`{.literal} 软件包。
-   有 root 权限。
-   您创建了 `/root/testmodule/`{.literal}
    目录，供您编译自定义内核模块。
:::
::: orderedlist
**步骤**
1.  使用以下内容创建 `/root/testmodule/test.c`{.literal} 文件：
    ``` literallayout
    #include 
    #include 
    int init_module(void)
        { printk("Hello World\n This is a test\n"); return 0; }
    void cleanup_module(void)
        { printk("Good Bye World"); }
    ```
    `test.c`{.literal}
    文件是一个源文件，它为内核模块提供主要功能。文件已创建在专用的
    `/root/testmodule/`{.literal}
    目录中，用于组织目的。在模块编译后，`/root/testmodule/`{.literal}
    目录将包含多个文件。
    `test.c`{.literal} 文件包括来自系统库：
    ::: itemizedlist
    -   在示例代码中，`printk()`{.literal} 函数需要
        `linux/kernel.h`{.literal} 头文件。
    -   `linux/module.h`{.literal} 文件包含函数声明和宏定义，可在使用 C
        编程语言编写的多个源文件之间共享。
        接下来遵循 `init_module()`{.literal} 和
        `cleanup_module()`{.literal} 启用和结束内核日志记录函数
        `printk()`{.literal}，它将打印文本。
    :::
2.  使用以下内容创建 `/root/testmodule/Makefile`{.literal} 文件：
    ``` literallayout
    obj-m := test.o
    ```
    Makefile 包含编译器必须专门生成名为 `test.o`{.literal}
    的对象文件的指令。`obj-m`{.literal} 指令指定生成的
    `test.ko`{.literal}
    文件将作为可加载的内核模块进行编译。或者，`obj-y`{.literal}
    指令将指示构建 `test.ko`{.literal} 作为内置内核模块。
3.  编译内核模块：
:::
``` literallayout
# make -C /lib/modules/$(uname -r)/build M=/root/testmodule modules
make: Entering directory '/usr/src/kernels/5.14.0-1.3.1.el9.x86_64'
CC [M] /root/testmodule/test.o
MODPOST /root/testmodule/Module.symvers
ERROR: modpost: missing MODULE_LICENSE() in /root/testmodule/test.o
make[1]: * [scripts/Makefile.modpost:150: /root/testmodule/Module.symvers] Error 1
make[1]: * Deleting file '/root/testmodule/Module.symvers'
make: * [Makefile:1776: modules] Error 2
make: Leaving directory '/usr/src/kernels/5.14.0-1.3.1.el9.x86_64'
```
\+
编译器为每个源文件(`test.c`{.literal})创建一个对象文件(`test.o`{.literal})，然后再将它们链接到最终内核模块(`test.ko`{.literal})中。
\+ 在成功编译后，`/root/testmodule/`{.literal}
包含与编译的自定义内核模块相关的其他文件。已编译的模块本身由
`test.ko`{.literal} 文件表示。
::: orderedlist
**验证**
1.  可选：检查 `/root/testmodule/`{.literal} 目录的内容：
    ``` literallayout
    ls -l /root/testmodule/
    total 452
    -rw-r—​r--. 1 root root     16 Jul 12 10:16 Makefile
    -rw-r—​r--. 1 root root     32 Jul 12 10:16 modules.order
    -rw-r—​r--. 1 root root      0 Jul 12 10:16 Module.symvers
    -rw-r—​r--. 1 root root    197 Jul 12 10:15 test.c
    -rw-r—​r--. 1 root root 219736 Jul 12 10:16 test.ko
    -rw-r—​r--. 1 root root    826 Jul 12 10:16 test.mod.c
    -rw-r—​r--. 1 root root 113760 Jul 12 10:16 test.mod.o
    -rw-r—​r--. 1 root root 107424 Jul 12 10:16 test.o
    ```
2.  将内核模块复制到 `/lib/modules/$(uname -r)/`{.literal} 目录中：
    ``` literallayout
    # cp /root/testmodule/test.ko /lib/modules/$(uname -r)/
    ```
3.  更新模块依赖项列表：
    ``` literallayout
    # depmod -a
    ```
4.  载入内核模块：
:::
``` literallayout
# modprobe -v test
insmod /lib/modules/5.14.0-1.el9.x86_64/test.ko
```
::: orderedlist
1.  验证内核模块是否已成功载入：
    ``` literallayout
    # lsmod | grep test
    test                   16384  0
    ```
2.  从内核环缓冲中读取最新信息：
    ``` literallayout
    # dmesg
    …​
    [74422.545004] Hello World
                    This is a test
    ```
:::
::: itemizedlist
**其他资源**
-   [管理内核模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#managing-kernel-modules_managing-monitoring-and-updating-the-kernel){.link}
:::
:::
:::
[]{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel}第 4 章 为安全引导签名内核模块 {.title}
:::
您可以使用签名的内核模块来提高系统安全性。以下小节介绍了如何在启用了安全引导机制的基于
UEFI 的构建系统中，在 RHEL 9
中使用自签名的内核模块。这些部分还提供了将您的公钥导入到要部署内核模块的目标系统中的可用选项概述。
如果启用了安全引导机制，则必须使用私钥签名 UEFI
操作系统引导装载程序、Red Hat Enterprise Linux
内核和所有内核模块，并使用对应的公钥进行身份验证。如果未签名和验证，则不允许系统完成引导过程。
RHEL 9 发行版包括：
::: itemizedlist
-   签名的引导装载程序
-   签名的内核
-   签名的内核模块
:::
此外，签名的第一阶段引导装载程序和签名的内核包括嵌入的红帽公钥。这些签名的可执行二进制文件和嵌入式密钥可让
RHEL 9 在支持 UEFI 安全引导的系统上使用 UEFI 固件提供的 Microsoft UEFI
安全引导认证认证机构密钥安装、启动并运行。请注意，并非所有基于 UEFI
的系统都包括对安全引导的支持。
::: title
**先决条件**
:::
要能够为外部构建的内核模块签名，请在构建系统上安装下表中列出的实用程序。
::: table
[]{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#idm140150704086288}
**表 4.1. 所需工具**
::: table-contents
  工具                    由软件包提供               用于       目的
  ----------------------- -------------------------- ---------- ----------------------------------------
  `openssl`{.literal}     `openssl`{.literal}        构建系统   生成公共和专用 X.509 密钥对
  `sign-file`{.literal}   `kernel-devel`{.literal}   构建系统   用来使用私钥为内核模块签名的可执行文件
  `mokutil`{.literal}     `mokutil`{.literal}        目标系统   用于手动注册公钥的可选工具
  `keyctl`{.literal}      `keyutils`{.literal}       目标系统   用于在系统密钥环中显示公钥的可选工具
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
构建系统（构建和签署内核模块）不需要启用 UEFI 安全引导，甚至不需要是基于
UEFI 的系统。
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#ref_requirements-for-authenticating-kernel-modules-with-x-509-keys_signing-kernel-modules-for-secure-boot}使用 X.509 密钥验证内核模块的要求 {.title}