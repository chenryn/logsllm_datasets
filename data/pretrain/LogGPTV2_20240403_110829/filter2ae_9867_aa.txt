Author: **xd0ol1 (知道创宇404实验室)**
前文回顾：
  * [WinDbg 漏洞分析调试（一）](http://paper.seebug.org/179/)
  * [WinDbg 漏洞分析调试（二）](http://paper.seebug.org/182/)
### 0x00 引子
本文将通过一个经典的IE漏洞来继续学习WinDbg相关的分析调试，错误之处还望各位大牛加以斧正:P
### 0x01 概述
我们要用到的是CVE-2014-6332这个漏洞，前辈们已经有过精彩的分析了，对应文章在参考部分有给出。此漏洞最值得借鉴的是其中所涉及的利用方式，上两篇分析的CVE-2012-1876需要绕过ASLR、DEP等保护手段来执行ROP＋shellcode，而CVE-2014-6332则是借助RW
primitives＋GodMode的方式来实现漏洞的利用。不好说这两种思路孰优孰劣，应该是各有千秋的，绕过保护措施可能会复杂些，因而现今的exploit更多会先获取RW
primitives，之后corrupt有关数据结构来实现代码的执行。
该漏洞在当时还是比较严重的，几乎所有Windows版本中的IE都受到了影响，它是由于VBScript引擎在重新分配数组储存空间时的错误引起的，具体来说是oleaut32模块SafeArrayRedim函数中的整数溢出错误。当然，微软目前已经放弃了VBScript，但我们学习的目的在于举一隅以三隅反，因此理解其原理还是很有必要的。
此处的分析环境为Win7 x86 - IE 8.0.7601.17514。
### 0x02 RW primitives
我们先来看下如何通过此漏洞来获取RW primitives，即corrupt后的SAFEARRAY结构，这里注意下，RW(Read/Write)
primitives指的是exploit中那些用于实现内存读写的对象或函数。分析所用的PoC代码如下：
``` code html  CVE-2014-6332 PoC.
    我们知道在VBScript中，数组是以SAFEARRAY结构来保存的，其定义如下：
0:013> dt ole32!tagSAFEARRAY +0x000 cDims : Uint2B +0x002 fFeatures : Uint2B
+0x004 cbElements : Uint4B +0x008 cLocks : Uint4B +0x00c pvData : Ptr32 Void
+0x010 rgsabound : [1] tagSAFEARRAYBOUND 0:013> dt ole32!tagSAFEARRAYBOUND
+0x000 cElements : Uint4B +0x004 lLbound : Int4B
    其中cDims表示数组的维数，每个维度都对应一个SAFEARRAYBOUND结构，包含有此维度的大小和起始索引，同时，cbElements表示每个元素的大小，这些元素保存在pvData地址处。而对于fFeatures表示的含义，可参考此[说明](https://msdn.microsoft.com/en-us/library/windows/desktop/ms221482(v=vs.85).aspx)。
    此外，可以通过IDA得到如下的SafeArrayRedim函数定义：
    ```c
    HRESULT __stdcall SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew);
我们在IE中打开上述PoC文件，并用WinDbg附加相应进程，然后执行如下操作：
    0:013> bp OLEAUT32!SafeArrayRedim
    0:013> g
    Breakpoint 3 hit
    eax=023dcfa8 ebx=002c2a10 ecx=0006fa58 edx=0000400c esi=0006fa58 edi=00000000
    eip=75aeec2c esp=023dcf94 ebp=023dcfb0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    OLEAUT32!SafeArrayRedim:
    75aeec2c 8bff            mov     edi,edi
    0:005> kb 3
    ChildEBP RetAddr  Args to Child              
    023dcf90 728c58da 002c2a10 023dcfa8 0006f438 OLEAUT32!SafeArrayRedim
    023dcfb0 728c5887 00000001 00000001 0006fa58 vbscript!RedimPreserveArray+0x81
    023dd0ac 728b4ff6 023dd214 8f64c1b9 00000000 vbscript!CScriptRuntime::RunNoEH+0x1466
    0:005> dd 002c2a10 L6
    002c2a10  08800001 00000010 00000000 00234298
    002c2a20  00000004 00000000
    0:005> dd 023dcfa8 L2
    023dcfa8  08421421 00000000
    0:005> dd 00234298 L10
    00234298  00000002 00000000 00000001 00000000
    002342a8  00000002 00000000 00000002 00000000
    002342b8  00000002 00000000 00000004 00000000
    002342c8  00000002 00000000 00000008 00000000
可以看到，最初定义的数组维度为1，共有0x04个Variant型元素，且每个元素占0x10字节。这里特别强调下Variant结构，它在后续会经常用到，其定义如下：
 图0
Variant结构的定义
保存浮点数时会同时使用Data High和Data Low字段，而如果只保存整型或指针则仅需Data
High字段，Type字段的定义可参考[这里](https://msdn.microsoft.com/en-us/library/3kfz157h\(v=vs.84\).aspx)，在本文中涉及到的类型如下：
 图1 Type字段的定义
接着脚本借助redim来重新分配数组空间，对应元素个数为0x08421420+1=0x08421421，即0x08421421*0x10=0x84214210字节空间，很显然这个分配操作会失败，毕竟32位进程的用户态空间最大也只到0x7fffffff，但由于存在如下语句，脚本将会继续执行：
``` code html On Error Resume Next
    当跳出SafeArrayRedim函数后，我们再看下此时SAFEARRAY结构中的内容：
0:005> dd 002c2a10 L6 002c2a10 08800001 00000010 00000000 00234298 002c2a20
08421421 00000000
    即数组的起始地址仍为0x00234298，但索引范围变成了0~0x08421420，这正是我们要用到的corrupt后的SAFEARRAY结构，通过它可以获取RW primitives功能。如下给出了漏洞的具体成因：
0:005> uf OLEAUT32!SafeArrayRedim OLEAUT32!SafeArrayRedim: 75aeec2c 8bff mov
edi,edi 75aeec2e 55 push ebp 75aeec2f 8bec mov ebp,esp 75aeec31 83ec18 sub
esp,18h 75aeec34 53 push ebx 75aeec35 56 push esi 75aeec36 8b7508 mov
esi,dword ptr [ebp+8] 75aeec39 57 push edi 75aeec3a 33ff xor edi,edi 75aeec3c
3bf7 cmp esi,edi 75aeec3e 0f843f030000 je OLEAUT32!SafeArrayRedim+0x1d2
(75aeef83)
OLEAUT32!SafeArrayRedim+0x18: 75aeec44 397d0c cmp dword ptr [ebp+0Ch],edi
75aeec47 0f8436030000 je OLEAUT32!SafeArrayRedim+0x1d2 (75aeef83)
OLEAUT32!SafeArrayRedim+0x21: 75aeec4d 0fb74e02 movzx ecx,word ptr [esi+2]
75aeec51 8bc1 mov eax,ecx 75aeec53 2500200000 and eax,2000h 75aeec58 8945f4
mov dword ptr [ebp-0Ch],eax 75aeec5b 66393e cmp word ptr [esi],di 75aeec5e
0f841f030000 je OLEAUT32!SafeArrayRedim+0x1d2 (75aeef83)
OLEAUT32!SafeArrayRedim+0x38: 75aeec64 397e08 cmp dword ptr [esi+8],edi
75aeec67 0f870c030000 ja OLEAUT32!SafeArrayRedim+0x1cb (75aeef79)
OLEAUT32!SafeArrayRedim+0x41: 75aeec6d f6c110 test cl,10h 75aeec70
0f8503030000 jne OLEAUT32!SafeArrayRedim+0x1cb (75aeef79)
OLEAUT32!SafeArrayRedim+0x4a: 75aeec76 8d45f0 lea eax,[ebp-10h] 75aeec79 50
push eax 75aeec7a 897d08 mov dword ptr [ebp+8],edi 75aeec7d 897df0 mov dword
ptr [ebp-10h],edi 75aeec80 e8f15dfeff call OLEAUT32!GetMalloc (75ad4a76)
75aeec85 8bd8 mov ebx,eax 75aeec87 3bdf cmp ebx,edi 75aeec89 0f85d5020000 jne
OLEAUT32!SafeArrayRedim+0x5f (75aeef64)
OLEAUT32!SafeArrayRedim+0x65: 75aeec8f 56 push esi ;SAFEARRAY结构的指针 75aeec90
e868f0ffff call OLEAUT32!SafeArraySize (75aedcfd) ;获取已分配的数组空间大小 75aeec95
8945fc mov dword ptr [ebp-4],eax ;保存已分配空间大小值0x00000040 75aeec98 3bc7 cmp
eax,edi 75aeec9a 7409 je OLEAUT32!SafeArrayRedim+0x7b (75aeeca5)
OLEAUT32!SafeArrayRedim+0x72: 75aeec9c 397e0c cmp dword ptr [esi+0Ch],edi
75aeec9f 0f84de020000 je OLEAUT32!SafeArrayRedim+0x1d2 (75aeef83)
OLEAUT32!SafeArrayRedim+0x7b: 75aeeca5 8b450c mov eax,dword ptr [ebp+0Ch]
75aeeca8 8b08 mov ecx,dword ptr [eax] 75aeecaa 8b5e10 mov ebx,dword ptr
[esi+10h] ;备份rgsabound中的cElements值0x00000004 75aeecad 8b7e14 mov edi,dword ptr
[esi+14h] ;备份rgsabound中的lLbound 75aeecb0 894e10 mov dword ptr [esi+10h],ecx
;修改rgsabound中的cElements为0x08421421 75aeecb3 8b4004 mov eax,dword ptr [eax+4]
75aeecb6 56 push esi ;SAFEARRAY结构的指针 75aeecb7 895de8 mov dword ptr
[ebp-18h],ebx 75aeecba 897dec mov dword ptr [ebp-14h],edi 75aeecbd 894614 mov
dword ptr [esi+14h],eax ;修改rgsabound中的lLbound 75aeecc0 e838f0ffff call
OLEAUT32!SafeArraySize (75aedcfd) ;获取待分配的数组空间大小 75aeecc5 8945f8 mov dword ptr
[ebp-8],eax ;保存待分配空间大小值0x84214210 75aeecc8 83f8ff cmp eax,0FFFFFFFFh 75aeeccb
0f8490910100 je OLEAUT32!SafeArrayRedim+0xa3 (75b07e61)
OLEAUT32!SafeArrayRedim+0xb3: 75aeecd1 8bd8 mov ebx,eax 75aeecd3 2b5dfc sub
ebx,dword ptr [ebp-4] ;待分配大小减去已分配大小，等于0x842141d0 75aeecd6 0f84a8000000 je
OLEAUT32!SafeArrayRedim+0x1c7 (75aeed84)
OLEAUT32!SafeArrayRedim+0xbe: 75aeecdc 8b7df0 mov edi,dword ptr [ebp-10h]
75aeecdf 85db test ebx,ebx 75aeece1 7d45 jge OLEAUT32!SafeArrayRedim+0x110
(75aeed28) ;将0x842141d0当作负数，整数溢出
OLEAUT32!SafeArrayRedim+0xc5: 75aeece3 b9200f0000 mov ecx,0F20h 75aeece8
66854e02 test word ptr [esi+2],cx 75aeecec 743a je
OLEAUT32!SafeArrayRedim+0x110 (75aeed28)
OLEAUT32!SafeArrayRedim+0xd0: 75aeecee 837df400 cmp dword ptr [ebp-0Ch],0
75aeecf2 0f8579910100 jne OLEAUT32!SafeArrayRedim+0xd6 (75b07e71)
OLEAUT32!SafeArrayRedim+0xe0: 75aeecf8 8b07 mov eax,dword ptr [edi] 75aeecfa
895d0c mov dword ptr [ebp+0Ch],ebx 75aeecfd f75d0c neg dword ptr [ebp+0Ch]
75aeed00 ff750c push dword ptr [ebp+0Ch] 75aeed03 57 push edi 75aeed04 ff500c
call dword ptr [eax+0Ch] ;ole32!CRetailMalloc_Alloc，分配空间失败 75aeed07 894508 mov
dword ptr [ebp+8],eax 75aeed0a 85c0 test eax,eax 75aeed0c 0f845d020000 je
OLEAUT32!SafeArrayRedim+0x19d (75aeef6f)
......
OLEAUT32!SafeArrayRedim+0x1b8: 75aeed75 837d0800 cmp dword ptr [ebp+8],0
75aeed79 7409 je OLEAUT32!SafeArrayRedim+0x1c7 (75aeed84)
OLEAUT32!SafeArrayRedim+0x1be: 75aeed7b ff7508 push dword ptr [ebp+8] 75aeed7e
8b07 mov eax,dword ptr [edi] 75aeed80 57 push edi 75aeed81 ff5014 call dword
ptr [eax+14h] ;ole32!CRetailMalloc_Free
OLEAUT32!SafeArrayRedim+0x1c7: 75aeed84 8bc3 mov eax,ebx
OLEAUT32!SafeArrayRedim+0x1d7: 75aeed86 5f pop edi 75aeed87 5e pop esi
75aeed88 5b pop ebx 75aeed89 c9 leave 75aeed8a c20800 ret 8
......
OLEAUT32!SafeArrayRedim+0x19d: 75aeef6f bb0e000780 mov ebx,8007000Eh 75aeef74
e9fcfdffff jmp OLEAUT32!SafeArrayRedim+0x1b8 (75aeed75)
......
    我们知道SafeArrayRedim函数的第一个入参为SAFEARRAY结构的指针，其中包含已分配数组的SAFEARRAYBOUND信息，第二个入参为待分配数组的SAFEARRAYBOUND信息。在获取完已分配数组的大小后，程序根据待分配数组的SAFEARRAYBOUND信息来修改SAFEARRAY指针指向的原SAFEARRAYBOUND信息，即其中的cElements和lLbound，以此来获取待分配数组的大小。但由于之后jge指令将新增空间大小0x842141d0当成了负数，即整数溢出，导致程序进入错误的处理分支，新空间会分配失败，但函数在返回前并没有将原先备份的SAFEARRAYBOUND信息替换回去，从而分配的数组空间没变cElements值却改变了，因此corrupt后的SAFEARRAY结构可被用于内存的越界访问。
    ### 0x03 GodMode
    接着我们来讨论如何在当前的IE环境中开启VBScript的GodMode，用到的代码如下：
    ```html
正常情况打开这个html文件是无法弹出记事本的，因为IE会禁止运行那些可能危害系统的脚本，它会通过vbscript!COleScript::InSafeMode函数来对SafeMode标志进行检查，此标志的默认值为0x0e。我们重新打开上述文件并在WinDbg中进行如下操作：
    0:012> bu vbscript!COleScript::InSafeMode
    0:012> g
    Breakpoint 0 hit
    eax=76140782 ebx=00000000 ecx=0002bdd0 edx=76130000 esi=0002f558 edi=00000000
    eip=6f35ce4d esp=0244d400 ebp=0244d488 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    vbscript!COleScript::InSafeMode:
    6f35ce4d f781740100000b000000 test dword ptr [ecx+174h],0Bh ds:0023:0002bf44=0000000e