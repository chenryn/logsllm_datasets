### Persistent and Pipelined Requests for Selected Web Services in JUN10

In the context of JUN10, Figure 7 illustrates the percentage of persistent and pipelined requests and bytes for selected web services. Notably, two of the services have almost no pipelined requests. The Content Delivery Networks (CDNs) Akamai and LimeLight also exhibit significant differences in the fractions of persistent requests and volume.

### Impact on Different Content Types

The variations in web services also translate into differences when examining the results by Content-Type. Similar to YouTube, MegaVideo, and MyVideo, flash-video (video/flv) has less than 1% of pipelined requests and bytes. Conversely, application/rar shows the highest amounts of both pipelined requests and bytes, primarily delivered by RapidShare.

### Factors Affecting Persistence and Pipelining

The limited impact of browsers on persistence and pipelining can be attributed to two trends in web content delivery:
1. **Distributed Content Delivery Infrastructures**: These can prevent persistent requests.
2. **Service-Supplied Code Execution**: More web services rely on code executed in the browser, such as AJAX-based clients [9], which issue HTTP requests instead of the browser. For example, in all traces except JUN10, the fraction of persistent bytes for YouTube never exceeded 4%, but it is 47% for JUN10. This change is likely due to prolonged server restructuring after Google's acquisition of YouTube in 2006, as evidenced by the emergence and disappearance of the googlevideo.com domain. Additionally, Facebook, which heavily uses AJAX, shows a high fraction (15%) of pipelined requests, indicating that these requests are not solely issued by Opera browsers.

### Content Type Analysis

Next, we focus on the HTTP Content-Type header. In Figure 8, we plot the fraction of HTTP bytes where the Content-Type header and libmagic disagree. We normalize the MIME type strings by removing leading x- and perform a string comparison. Up to 36% of HTTP volume exhibits mismatches. The most common case, accounting for up to 27%, is when the Content-Type header uses a generic type (e.g., application/octet-stream or text/plain), but libmagic yields a known type. We label this class of mismatches as Gen::NonGen. The opposite case (NonGen::Gen), where the Content-Type specifies a type but libmagic fails to detect one, is the second most common, with 4.6–6.6% of HTTP bytes falling into this category.

### Detailed Mismatch Analysis

When investigating the largest class, Gen::NonGen, in more detail, we find that RAR-archives are responsible for around 50% of these mismatches (Figure 9). Additionally, 50–74% of all bytes with a Content-Type header of text/plain are used as a generic type, i.e., libmagic indicates a non-text type. In such cases, one would incorrectly infer a significantly higher fraction of text/plain than is actually the case.

We excluded cases of mismatches where the Content-Type header specified JavaScript or CSS and libmagic yielded another text type (e.g., C-code), as these types are inherently hard for libmagic to classify correctly. Up to 4.1% of bytes fall into this category.

An analysis relying solely on the Content-Type header would thus be unable to classify up to 27% of HTTP bytes, as the Content-Type header is generic. It would also overestimate the amount of text/plain content due to its frequent use as a generic type. Up to an additional 10% of HTTP bytes show other disagreements, making detailed classification challenging.

### Content Length Analysis

The Content-Length header is commonly used to analyze the size of HTTP transfers [4]. However, this can lead to errors if the header size does not accurately reflect the downloaded volume, e.g., due to software bugs or interrupted downloads. In this section, we quantify the extent of the overall error and characterize its variance over time using the HTTP14d and HTTP12d traces.

We find that the Content-Length headers overestimate the actually downloaded volume by a factor of 3.65 for HTTP14d and a factor of 127 for HTTP12d. A closer examination of HTTP12d reveals that a single user downloading two large files from a single host with a misconfigured download manager is the culprit. This download manager opened over 400,000 connections for each file, requesting large, overlapping byte ranges but aborting each download after receiving enough data to cover the whole file. The requested download volume sums up to over 4 PB, an overestimation by a factor of more than 60,000. After removing these two files, the overestimation factor for HTTP12d drops to 3.82. A similar case in HTTP14d, though to a lesser extent, reduces the overestimation factor from 3.65 to 3.28 after removing the corresponding file.

This highlights how much the overestimation factor depends on events of limited duration. Figure 10 plots the overestimation factor for 60-minute bins, showing that the overestimation factor is generally between 2.2 (2.4 for HTTP12d) and 5 for each 60-minute bin. However, spikes exceeding these baselines by several orders of magnitude are observed, particularly in HTTP12d, where the overestimation factor rises to 500 to 2000 for several hours.

### Conclusion

In this paper, we identify and investigate three potential pitfalls in HTTP traffic analysis: the accuracy of information in Content-Length and Content-Type headers, and the amount of persistent and pipelined traffic. Our results indicate a significant overestimation, at least 3.2 times, when relying on the HTTP Content-Length header for volume inference. For accurate volume accounting, complete processing of the data after the HTTP response header is required to detect transfer abortions, erroneous HTTP servers, and misconfigured download managers. The mismatch between Content-Type header and libmagic content types amounts to 35% of the HTTP volume. Relying on the Content-Type header for content classification can lead to a significant amount of unclassified content and, to a lesser degree, misclassification. Finally, analyzing only the first packet of a connection discards 60% of the total HTTP requests and 30% of the HTTP volume. Simplifying the analysis by capturing just enough bytes per packet to include HTTP headers leads to another risk: 4% of the requests are pipelined and transmitted together with the previous request in a single packet.

### Future Work

As future work, we plan to further analyze the use of pipelining and persistence by different web services and applications, especially with respect to application design and content delivery.

### Acknowledgements

This work was partly supported by a fellowship within the post-doctoral program of the German Academic Exchange Service (DAAD).

### References

1. Ager, B., Schneider, F., Kim, J., Feldmann, A.: Revisiting cacheability in times of user-generated content. In: Proc. of IEEE Global Internet Symposium (2010)
2. Callahan, T., Allman, M., Paxson, V.: A Longitudinal View of HTTP Traffic. In: Krishnamurthy, A., Plattner, B. (eds.) PAM 2010. LNCS, vol. 6032, pp. 222–231. Springer, Heidelberg (2010)
3. Doverspike, R., Gerber, A.: Traffic Types and Growth in Backbone Networks. Tech. rep. In: Proc. of OFC/NFOEC (invited paper) (March 2011)
4. Erman, J., Gerber, A., Hajiaghayi, M.T., Pei, D., Spatscheck, O.: Network-aware forward caching. In: Proc. International World Wide Web Conference, WWW (2009)
5. Labovitz, C., Iekel-Johnson, S., McPherson, D., Oberheide, J., Jahanian, F.: Internet inter-domain traffic. In: Proc. ACM SIGCOMM Conference (2010)
6. Maier, G., Feldmann, A., Paxson, V., Allman, M.: On dominant characteristics of residential broadband internet traffic. In: Proc. Internet Measurement Conf., IMC (2009)
7. Maier, G., Sommer, R., Dreger, H., Feldmann, A., Paxson, V., Schneider, F.: Enriching network security analysis with time travel. In: Proc. ACM SIGCOMM Conference (2008)
8. Paxson, V.: Bro: A system for detecting network intruders in real-time. Computer Networks Journal 31, 23–24, 2435–2463 (1999), Bro homepage: http://www.bro-ids.org
9. Schneider, F., Agarwal, S., Alpcan, T., Feldmann, A.: The New Web: Characterizing AJAX Traffic. In: Claypool, M., Uhlig, S. (eds.) PAM 2008. LNCS, vol. 4979, pp. 31–40. Springer, Heidelberg (2008)
10. Schneider, F., Feldmann, A., Krishnamurthy, B., Willinger, W.: Understanding online social network usage from a network perspective. In: Proc. Internet Measurement Conf., IMC (2009)