e
r
a
h
S
d
p
a
R
i
o
t
.
d
e
d
a
o
p
U
l
e
t
a
d
p
U
n
W
i
e
b
u
t
u
o
Y
Fig. 7. Percentage of persistent/pipelined request/bytes for selected web services for JUN10
yet the other two have almost no pipelined requests at all. The two CDNs (Akamai and
LimeLight) also exhibit largely different fractions for persistent requests and volume.
The effects of different web services also translates into differences when examining
the results by Content-Type. Similarly to YouTube, MegaVideo, and MyVideo, ﬂash-
video (video/flv) has less than 1 % pipelined requests and bytes. On the other hand,
application/rar has the largest amounts of both pipelined requests and bytes, being
mostly delivered by RapidShare.
The limited impact of browsers on persistence and pipelining can be explained by two
trends in web content delivery. First, distributed content delivery infrastructures can pre-
vent persistent requests. Second, more and more web services rely on service-supplied
code to be executed in the browsers, such as AJAX-based clients [9], which issue the
HTTP requests instead of the browser. For example, in all traces except JUN10 the frac-
tion of persistent bytes for YouTube never exceeded 4 % and but is at 47 % for JUN10.
A likely explanation for this change is prolonged server restructuring after Google’s
acquisition of YouTube in 2006: Over all the traces we observe the googlevideo.com
domain emerge and vanish again. Evidence for the second explanation can be seen from
the high fraction (15 %) of pipelined request in Facebook, which heavily uses AJAX,
as it is unlikely that all these requests are issued only from Opera browsers.
4 Content Type
We next turn our focus to HTTP’s Content-Type header. In Figure 8 we plot the fraction
of HTTP bytes for which the Content-Type header and an analysis by libmagic disagree.
We normalize the mime type strings by removing leading x- but otherwise perform a
string comparison between the header and libmagic’s results. We ﬁnd that up to 36 % of
HTTP volume exhibits mismatches. The most common case with up to 27 % is when the
Content-Type header uses a generic type (e.g., application/octet-stream or text/plain5)
but libmagic yields a known type. We label this class of mismatches Gen::NonGen. The
opposite case (NonGen::Gen, in which the Content-Type speciﬁes a type but libmagic
fails to detect one is the second most common one. We observe that 4.6–6.6 % of HTTP
5 We only count text/plain as generic if the Content-Type header speciﬁes text/plain and libmagic
yields a non-text type.
Pitfalls in HTTP Trafﬁc Measurements and Analysis
249
t
y
r
o
g
e
a
C
h
c
t
a
m
s
M
i
r
e
p
s
e
t
y
B
]
c
i
f
f
a
r
t
l
a
o
t
t
f
o
%
[
35
30
25
20
15
10
5
0
SEP08
AUG09
JUN10
APR09
MAR10
OTHER
Image
multipart/
form−data
Media
Text
NonGen::Gen
Gen::NonGen
t
y
r
o
g
e
a
C
h
c
t
a
m
s
M
i
r
e
p
s
e
t
y
B
]
c
i
f
f
a
r
t
n
e
G
−
n
o
N
:
:
n
e
G
f
o
%
[
100
80
60
40
20
0
SEP08
AUG09
JUN10
APR09
MAR10
OTHER
audio/mpeg
audio/mp4
app../ms−cab
app../ms−gen..
video/asf
app../zip
video/mp4
app../dosexec
video/msvideo
video/flv
app../rar
Fig. 8. Mismatches between Content-Type and
libmagic as fraction of HTTP volume
Fig. 9. Generic Content-Type but speciﬁc lib-
magic type: breakdown by libmagic class
bytes fall into this class. While some of the types are not supported by libmagic, e. g.,
Google safe browsing chunks, others include audio or video formats that should be
supported by libmagic. It is hard to exactly assess whether libmagic or the Content-Type
header are “correct” in such cases. In the Text, Media, and Image classes the Content-
Type header agreed on the general category of the type (e.g., image) but disagreed on
the actual ﬁle format (JPEG vs. PNG). While libmagic should be accurate for image
data, other media (audio, video) is harder to assess, given that there is a plethora of
different container-types and codecs often with similar names.
When we investigate the largest class, Gen::NonGen, in more detail, we ﬁnd that (in
terms of bytes) RAR-archives are responsible for around 50 % of these mismatches,
see Figure 9. In addition, we ﬁnd that 50–74 % of all bytes with Content-Type header
of text/plain are used as a generic type, i.e., libmagic indicates a non-text type (not
plotted). In such cases, one would incorrectly infer a signiﬁcantly higher fraction of
text/plain than is actually the case.
We note that we excluded cases of mismatches for which the Content-Type header
speciﬁed Javascript or CSS and libmagic yielded another text type (e.g., C-code). Such
types are inherently hard for libmagic to classify correctly since the syntax of these
languages is similar to C. Up to 4.1 % of bytes fall into this category.
An analysis relying on the Content-Type header alone would thus be unable to clas-
sify up to 27 % of HTTP bytes, since the Content-Type header is generic and the analysis
would also over estimate the amount of text/plain content due to the frequent use of this
type as a generic type. Up to an additional 10 % of HTTP bytes further show other dis-
agreements. While it might be possible to roughly classify some of these (e.g., as video
content), a more detailed breakdown (e.g., what kind of video) appears challenging.
5 Content Length
The Content-Length header is commonly used to analyze the size of HTTP transfers [4].
Unfortunately, this can lead to errors if the header size does not accurately reﬂect
the downloaded volume, e. g., due to software bugs or interrupted downloads. In this
section, we quantify the extent of the overall error and characterize its variance over
time. We choose the HTTP14d and HTTP12d traces for this analysis to show the time-
dependent behavior.
We ﬁnd that the Content-Length headers over-estimate the actually downloaded vol-
ume by a factor of 3.65 for HTTP14d and a factor of 127 for HTTP12d. A closer
250
F. Schneider et al.
HTTP12d, stddev =  300
HTTP14d, stddev =  6.5
r
o
t
c
a
f
n
o
i
t
a
m
i
t
s
e
−
r
e
v
O
0
0
5
0
0
1
0
2
5
2
Wed
Thu
Fri
Sat
Sun Mon
Tue Wed
Thu
Fri
Sat
Sun Mon
Tue Wed
Day of week
Fig. 10. Over-estimation factor of the Content-Length header (60 min bins, logarithmic y-axis)
examination of HTTP12d shows that a single user downloading two large ﬁles from a
single host with a badly (mis-)conﬁgured download manager is the culprit. This down-
load manager opened over 400,000 connections for each of these ﬁles to parallelize the
download and requested large, overlapping byte ranges. However, the download man-
ager aborts each download after receiving enough data to cover the whole ﬁle. Overall,
the requested download volume from Content-Length headers sums up to over 4 PB, an
over-estimation by a factor of more than 60,000. After removing these two ﬁles from
the data set the over-estimation factor for HTTP12d drops to 3.82. We observe a similar
case in HTTP14d, though to a far lesser extent and involving only a single ﬁle. After
removing the corresponding ﬁle, the over-estimation factor reduces from 3.65 to 3.28
for HTTP14d.
This highlights how much the over-estimation factor depends on events of limited
duration. This leads us to further investigate this volatility over time. Figure 10 plots
the over-estimation factor for 60 minute bins. We align our traces by day of week. In
general, the over-estimation factor is between 2.2 (2.4 for HTTP12d) and 5 for each
60 minute bin. However, we observe spikes exceeding these baselines by several orders
of magnitude. Furthermore, we see the mis-conﬁgured download manager in HTTP12d
that causes the over-estimation factor to rise to 500 to 2000 for several hours.
We note that based on these 60 minute time bins, the standard deviation for both
traces exceeds the average by far. Moreover, there is no apparent weekly or daily pat-
tern. Accurate HTTP object size measurement therefore requires to parse the whole
HTTP stream.
6 Conclusion
In this paper we identify and investigate three potential pitfalls in HTTP trafﬁc analysis.
We study the accuracy of information in Content-Length and Content-Type headers, as
well as the amount of persistent and pipelined trafﬁc.
Our results indicate a signiﬁcant over-estimation, at least 3.2 times, when relying on
the HTTP Content-Length header for volume inference. For accurate volume account-
ing, complete processing of the data after the HTTP response header is required to
detect transfer abortions, erroneous HTTP servers, and misconﬁgured download man-
agers. The mismatch between Content-Type header and libmagic content types amounts
Pitfalls in HTTP Trafﬁc Measurements and Analysis
251
to 35 % of the HTTP volume. Relying on the Content-Type header for content classiﬁ-
cation can lead to a signiﬁcant amount of unclassiﬁed content due to a generic Content-
Type, and to a lesser degree in misclassiﬁcation of the content. Finally, only analyzing
the ﬁrst packet of a connection discards 60 % of the total HTTP requests and 30 % of the
HTTP volume. Simplifying the analysis by capturing just enough bytes per packet to
include HTTP headers leads to another risk: We ﬁnd 4 % of the requests to be pipelined
and transmitted together with the previous request in a single packet.
As future work, we plan to further analyze the use of pipelining and persistence by
different web services and applications, especially with respect to application design
and content delivery.
Acknowledgements. This work was partly supported by a fellowship within the post-
doctoral program of the German Academic Exchange Service (DAAD).
References
1. Ager, B., Schneider, F., Kim, J., Feldmann, A.: Revisiting cacheability in times of user gen-
erated content. In: Proc. of IEEE Global Internet Symposium (2010)
2. Callahan, T., Allman, M., Paxson, V.: A Longitudinal View of HTTP Trafﬁc. In: Krishna-
murthy, A., Plattner, B. (eds.) PAM 2010. LNCS, vol. 6032, pp. 222–231. Springer, Heidel-
berg (2010)
3. Doverspike, R., Gerber, A.: Trafﬁc Types and Growth in Backbone Networks. Tech. rep. In:
Proc. of OFC/NFOEC (invited paper) (March 2011)
4. Erman, J., Gerber, A., Hajiaghayi, M.T., Pei, D., Spatscheck, O.: Network-aware forward
caching. In: Proc. International World Wide Web Conference, WWW (2009)
5. Labovitz, C., Iekel-Johnson, S., McPherson, D., Oberheide, J., Jahanian, F.: Internet inter-
domain trafﬁc. In: Proc. ACM SIGCOMM Conference (2010)
6. Maier, G., Feldmann, A., Paxson, V., Allman, M.: On dominant characteristics of residential
broadband internet trafﬁc. In: Proc. Internet Measurement Conf., IMC (2009)
7. Maier, G., Sommer, R., Dreger, H., Feldmann, A., Paxson, V., Schneider, F.: Enriching net-
work security analysis with time travel. In: Proc. ACM SIGCOMM Conference (2008)
8. Paxson, V.: Bro: A system for detecting network intruders in real-time. Computer Networks
Journal 31, 23–24, 2435–2463 (1999), Bro homepage: http://www.bro-ids.org
9. Schneider, F., Agarwal, S., Alpcan, T., Feldmann, A.: The New Web: Characterizing AJAX
Trafﬁc. In: Claypool, M., Uhlig, S. (eds.) PAM 2008. LNCS, vol. 4979, pp. 31–40. Springer,
Heidelberg (2008)
10. Schneider, F., Feldmann, A., Krishnamurthy, B., Willinger, W.: Understanding online so-
cial network usage from a network perspective. In: Proc. Internet Measurement Conf., IMC
(2009)