        - system:bootstrappers
        - system:nodes
```
在前面的示例中，您需要粘贴在创建 workers CloudFormation 栈时获得的`NodeInstanceRole`输出的值。创建此文件后，您现在可以使用`kubectl apply`命令将其应用到您的 EKS 集群，然后通过运行`kubectl get nodes --watch`等待您的工作节点加入集群:
```
> kubectl apply -f aws-auth-cm.yaml
configmap "aws-auth" created
> kubectl get nodes --watch
NAME                                          STATUS     ROLES    AGE   VERSION
ip-172-31-15-111.us-west-2.compute.internal   NotReady      20s   v1.10.3
ip-172-31-28-179.us-west-2.compute.internal   NotReady      16s   v1.10.3
ip-172-31-38-41.us-west-2.compute.internal    NotReady      13s   v1.10.3
ip-172-31-15-111.us-west-2.compute.internal   NotReady      23s   v1.10.3
ip-172-31-28-179.us-west-2.compute.internal   NotReady      22s   v1.10.3
ip-172-31-38-41.us-west-2.compute.internal    NotReady      22s   v1.10.3
ip-172-31-15-111.us-west-2.compute.internal   Ready         33s   v1.10.3
ip-172-31-28-179.us-west-2.compute.internal   Ready         32s   v1.10.3
ip-172-31-38-41.us-west-2.compute.internal    Ready         32s   v1.10.3
```
一旦您的所有工作人员的状态为`Ready`，您就已经成功地将您的工作人员节点加入到您的 EKS 集群中。
# 部署 Kubernetes 仪表板
设置 EKS 集群的最后一步是将 Kubernetes 仪表板部署到集群中。Kubernetes 仪表板是一个强大而全面的基于网络的管理界面，用于管理和监控您的集群和容器应用，并作为基于容器的应用部署在 Kubernetes 集群的`kube-system`命名空间内。仪表板由许多组件组成，我在此不再赘述，但您可以在[https://github.com/kubernetes/dashboard](https://github.com/kubernetes/dashboard)了解更多关于仪表板的信息。
为了部署仪表板，我们将首先创建一个名为`todobackend-aws/eks/dashboard`的文件夹，并继续下载和应用组成仪表板的各种组件到该文件夹:
```
> curl -fs -O https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
> curl -fs -O https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/heapster.yaml
> curl -fs -O https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/influxdb.yaml
> curl -fs -O https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/rbac/heapster-rbac.yaml > kubectl apply -f kubernetes-dashboard.yaml
secret "kubernetes-dashboard-certs" created
serviceaccount "kubernetes-dashboard" created
role.rbac.authorization.k8s.io "kubernetes-dashboard-minimal" created
rolebinding.rbac.authorization.k8s.io "kubernetes-dashboard-minimal" created
deployment.apps "kubernetes-dashboard" created
service "kubernetes-dashboard" created
> kubectl apply -f heapster.yaml serviceaccount "heapster" createddeployment.extensions "heapster" createdservice "heapster" created
> kubectl apply -f influxdb.yaml
deployment.extensions "monitoring-influxdb" created
service "monitoring-influxdb" created
> kubectl apply -f heapster-rbac.yaml clusterrolebinding.rbac.authorization.k8s.io "heapster" created
```
然后，您需要创建一个名为`eks-admin.yaml`的文件，该文件创建具有完全集群管理员权限的服务帐户和集群角色绑定:
```
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eks-admin
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: eks-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: eks-admin
  namespace: kube-system
```
创建此文件后，您需要将其应用于您的 EKS 集群:
```
> kubectl apply -f eks-admin.yaml
serviceaccount "eks-admin" created
clusterrolebinding.rbac.authorization.k8s.io "eks-admin" created
```
有了`eks-admin`服务帐户，您可以通过运行以下命令来检索该帐户的认证令牌:
```
> kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')
Name: eks-admin-token-24kh4
Namespace: kube-system
Labels: 
Annotations: kubernetes.io/service-account.name=eks-admin
              kubernetes.io/service-account.uid=6d8ba3f6-8dba-11e8-b132-02b2aa7ab028
Type: kubernetes.io/service-account-token
Data
====
namespace: 11 bytes
token: eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJla3MtYWRtaW4tdG9rZW4tMjRraDQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZWtzLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNmQ4YmEzZjYtOGRiYS0xMWU4LWIxMzItMDJiMmFhN2FiMDI4Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmVrcy1hZG1pbiJ9.h7hchmhGUZKjdnZRk4U1RZVS7P1tvp3TAyo10TnYI_3AOhA75gC6BlQz4yZSC72fq2rqvKzUvBqosqKmJcEKI_d6Wb8UTfFKZPFiC_USlDpnEp2e8Q9jJYHPKPYEIl9dkyd1Po6er5k6hAzY1O1Dx0RFdfTaxUhfb3zfvEN-X56M34B_Gn3FPWHIVYEwHCGcSXVhplVMMXvjfpQ-0b_1La8fb31JcnD48UolkJ1Z_DH3zsVjIR9BfcuPRoooHYQb4blgAJ4XtQYQans07bKD9lmfnQvNpaCdXV_lGOx_I5vEbc8CQKTBdJkCXaWEiwahsfwQrYtfoBlIdO5IvzZ5mg
ca.crt: 1025 bytes
```
前面示例中的关键信息是令牌值，当您连接到仪表板时，需要复制并粘贴令牌值。要连接到仪表板，您需要启动 kubectl 代理，该代理提供对 Kubernetes API 的 HTTP 访问:
```
> kubectl proxy Starting to serve on 127.0.0.1:8001
```
如果您现在浏览至`http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/`，系统将提示您登录仪表板，您需要在其中粘贴之前为`eks-admin`服务帐户检索到的令牌:
![](img/8315bcd4-56a5-44a0-b7a5-52bee1895ec2.png)
Signing in to the Kubernetes dashboard
登录后，如果您将命名空间更改为 **kube-system** 并选择**工作负载** | **部署**，您可能会看到一个错误，指示无法找到**监控-influxdb** 部署的映像:
![](img/c029f6d5-044b-49cc-99ad-afb86d5b0fbd.png)
Kubernetes dashboard deployment failure
如果是这种情况，您需要更新之前下载的`todobackend-aws/eks/dashboard/influxdb.yml`文件以引用`k8s.gcr.io/heapster-influxdb-amd64:v1.3.3`(这是一个已知问题(`https://github.com/kubernetes/heapster/issues/2059`))，在您阅读本章时可能存在也可能不存在):
```
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 name: monitoring-influxdb
 namespace: kube-system
spec:
 replicas: 1
 template:
 metadata:
 labels:
 task: monitoring
 k8s-app: influxdb
 spec:
 containers:
 - name: influxdb
 image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
...
...
```
如果您现在通过运行`kubectl apply -f influxdb.yml`重新应用文件，仪表板现在应该显示所有服务按预期运行。
# 将示例应用部署到 EKS
现在，我们的 EKS 集群和工作节点已经就位，并且我们已经确认可以部署到该集群，现在是时候将 todobackend 应用部署到 EKS 了。当您在 Kubernetes 中定义在本地运行应用所需的各种资源时，您已经完成了大部分艰苦的工作，所需要做的就是调整一些外部资源，例如负载平衡器和数据库服务的持久卷，以使用 AWS 本机服务。
现在，您需要执行以下配置任务:
*   使用 AWS 弹性块存储(EBS)配置对持久卷的支持
*   配置对 AWS 弹性负载平衡器的支持
*   部署示例应用
# 使用 AWS EBS 配置对持久卷的支持
在本章的前面，我们讨论了持久卷声明和存储类的概念，它们允许您从应用中抽象出存储基础架构的细节。我们了解到，在使用 Docker Desktop 时，提供了一个默认存储类，该类将自动创建 hostPath 类型的持久卷，这些卷可在`~/.docker/Volumes`从您的本地操作系统访问，这使得在将 Docker Desktop 与 Kubernetes 一起使用时，可以轻松调配、管理和维护持久卷。
使用 EKS 时，需要了解的是，与 Docker Desktop 不同，默认情况下，不会为您创建任何存储类。如果要支持持久卷声明，这要求您至少创建一个存储类，在大多数使用情况下，您通常会定义一个默认存储类，为集群提供标准的默认存储介质和卷类型。当使用 EKS 时，这些存储类的一个很好的候选是弹性块存储(EBS)，它提供了一个标准的集成机制来支持在集群中作为工作节点运行的 EC2 实例的基于块的卷存储。Kubernetes 支持名为`AWSElasticBlockStore`的卷类型，允许您从工作节点访问和装载 EBS 卷，还支持名为`aws-ebs`的存储资源调配程序，该程序提供 EBS 卷的动态资源调配和管理。
通过开箱即用的对 AWS EBS 的本机支持，创建一个将自动调配 EBS 存储的默认存储类非常容易，我们将在名为`todobackend-aws/eks/gp2-storage-class.yaml`的文件中定义该存储类:
```
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: gp2
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
reclaimPolicy: Delete
mountOptions:
  - debug
```
我们将创建一个名为`gp2`的存储类，顾名思义，它将使用`kubernetes.io/aws-ebs`存储资源调配器从 AWS 调配类型为`gp2`或固态硬盘的 EBS 存储。`parameters`部分控制该存储选择，根据存储类型，可能有其他可用的配置选项，您可以在[https://kubernetes . io/docs/concepts/storage-class/# AWS](https://kubernetes.io/docs/concepts/storage/storage-classes/#aws)上了解更多。`reclaimPolicy`的值可以是`Retain`或`Delete`，它控制每当从 Kubernetes 中删除与存储类相关联的持久卷声明时，存储资源调配者是否应该保留或删除相关联的 EBS 卷。对于生产用例，您通常会将其设置为`Retain`，但是对于非生产环境，您可能希望将其设置为`Delete`的默认回收策略，以避免您不得不手动清理不再被您的集群使用的 EBS 卷。
现在，让我们在 EKS 集群中创建这个存储类，然后我们可以将新的存储类配置为集群的默认存储类:
```
> kubectl get sc
No resources found.
> kubectl apply -f eks/gp2-storage-class.yaml
storageclass.storage.k8s.io "gp2" created
> kubectl patch storageclass gp2 \
 -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}' storageclass.storage.k8s.io "gp2" patched
> kubectl describe sc/gp2 Name: gp2
IsDefaultClass: Yes
Annotations: ...
Provisioner: kubernetes.io/aws-ebs
Parameters: type=gp2
AllowVolumeExpansion: 
MountOptions:
  debug
ReclaimPolicy: Delete