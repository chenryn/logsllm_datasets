Remove-WmiObject
Remove-CimSession
WMI 和 CIM 的 cmdlet 也提供了类似的功能。然而,CIM cmdlet 引入了 PowerShell V3,并通过[WMI
cmdlets](http://blogs.msdn.com/b/powershell/archive/2012/08/24/introduction-to-cim-cmdlets.aspx) 提供了一些额外的灵活性。使用 CIM cmdlet 的最大优点是它们工作在 WinRM 和 DCOM
协议之上。WMI cmdlet 只工作在 DCOM 协议之上。但是并不是所有的系统都将安装 PowerShell v3+。PowerShell v2
是默认安装在 Windows 7 上的。因此,它被攻击者视为最小公共程序。
wmic.exe
wmic.exe 是一个与 WMI 进行交互的强大的命令行实用工具。它拥有大量的 WMI
对象的方便记忆的默认别名,但你还可以执行更为复杂的查询。wmic.exe 还可以执行 WMI 方法,攻击者经常用来通过调用 Win32_Process 的
Create 方法来进行横向运动。Wmic.exe 的局限性之一是不能接受调用嵌入的 WMI 对象的方法。在 PowerShell 不可用的情况下,使用
wmic.exe 足够用于执行系统侦察和基本方法的调用。
wbemtest.exe
wbemtest.exe 是一个功能强大的带有图形界面的 WMI 诊断工具。它能够枚举对象实例、执行查询、注册事件、修改 WMI
对象和类,并且可以在本地或远程去调用方法。它的接口对大多数用户来说不是特别友好,但从攻击者的角度来看,在其他工具不可用时,它完全可以作为替代选项 ——
例如,如果应用程序白名单机制阻止了 wmic.exe 和 powershell.exe,那么 wbemtest.exe 将是一个带有一个不太理想的 UI
(如图 3 所示)但是功能却很强大的实用工具。
图 3 wbemtest的图形接口
WMI Explorer
WMI Explorer 是一个很好的 WMI 类发现工具。它提供了一个优雅的 GUI (图 4 所示),你可以使用分层次的方式探索 WMI
存储库。它也能够连接到远程的 WMI 存储库,并执行查询。对安全研究人员寻找可用于攻击或防御的 WMI 类来说,像这样的 WMI 类发现工具是非常有价值的。
图 4 WMI Explorer
CIM Studio
CIM Studio 是 Microsoft 遗留的一个免费工具,你可以方便地浏览 WMI 存储库。像 WMI Explorer
一样,此工具也可以很好的进行 WMI 类发现。
Windows 脚本宿主(WSH)语言
Microsoft 提供了两个 WSH 脚本语言,VBScript 和 JScript。尽管它们比较过时,也算不上高雅的编程语言,但是说到与 WMI
进行交互时,它们的确都是功能强大的脚本语言。事实上,使用 VBScript 和 JScript 编写的利用 WMI 作为主要的 C&C
机制的后门已经出现了。此外,如后面将要解释的,它们是唯一支持 ActiveScriptEventConsumer
事件消费者组件的语言,该组件对于攻击者和防御者来说都是一个非常有价值的 WMI 组件。最后,从攻击的角度来看, VBScript 和 JScript
是在未安装 PowerShell 的老版本的 Windows 系统上的最小公共程序。
C/C++ 调用 IWbem* COM API
如果你需要使用非托管语言如 C 或 C++ 与 WMI 进行交互,你将需要使用[ WMI 的 COM
API](https://msdn.microsoft.com/en-us/library/aa389276\(v=vs.85\).aspx)。逆向工程师将需要非常熟悉此接口以及每一个 COM Guid 才能充分理解与 WMI
交互的恶意软件。
.NET System.Management 类
.NET 类库在 System.Management 命名空间中提供了几个与 WMI 相关的类,可以相对简单的使用如 C#、VB.Net 和 F#
语言编写与 WMI 交互的程序。在后续的示例中,这些类将用于在 PowerShell 代码中补充现有的 WMI/CIM cmdlet。
winrm.exe
winrm.exe 可以在运行 WinRM 服务的本地和远程计算机上进行枚举 WMI 对象实例、调用方法,并创建和删除对象实例。也可以用 winrm.exe
来配置 WinRM 设置。  
下面的示例显示了 winrm.exe 可用于执行命令、枚举对象的多个实例,并检索单个对象实例:
    winrm invoke Create wmicimv2/Win32_Process @{CommandLine="notepad.exe";CurrentDirectory="C:"}
    winrm enumerate http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Process
    winrm get http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_OperatingSystem
Linux版本的 wmic 和 wmis-pth
wmic 是一个简单的 Linux 命令行实用工具,用于执行 WMI 查询。wmis 是 Win32_Process 类的 Create
方法的远程调用命令行包装程序,并且支持使用 NTLM 哈希进行连接远程计算机,因此, wmis 已经被渗透测试人员大量使用。
**0x06 远程使用 WMI**
虽然可以与本地的 WMI 进行交互,但是通过网络才能显示出 WMI 的真实能量。目前,由于 DCOM 和 WinRM
这两个协议的存在,将使得远程对象的查询,事件注册, WMI 类方法的执行,以及类的创建都能够被支持。
这些协议看起来非常有利于攻击者,因为大多数组织机构和安全供应商一般不审查这些恶意活动所传输的内容。攻击者需要有效的利用远程 WMI
则需要有特权用户的凭据。在 Linux 平台中的 wmis-pth 实用工具,则需要的是受害者的用户的哈希。
分布式组件对象模型 (DCOM)
从 DCOM 出现以来它一直是 WMI 所使用的默认协议,通过 TCP 的 135 端口建立初始连接。后续的数据交换则使用随机选定的 TCP 端口。可以通过
dcomcnfg.exe 并最终修改下面的注册表项来配置此端口的范围:
HKEY_LOCAL_MACHINESoftwareMicrosoftRpcInternet –Ports (REG_MULTI_SZ)
在 PowerShell 中内置的所有 WMI cmdlets 都是使用 DCOM 进行通信的。
Windows 远程管理 (WinRM)
最近, WinRM 取代了 DCOM 并成为 Windows 推荐的远程管理协议。WinRM 的构建基于 Web 服务管理 (WSMan) 规范 ——
一种基于 SOAP 的设备管理协议。此外,PowerShell 的远程传输协议也是基于 WinRM 规范的,同时 PowerShell 提供了极其强大的
Windows 企业级的远程管理。WinRM 也支持 WMI,以及通过网络执行 CIM 操作。
默认情况下,WinRM 服务监听的 TCP 端口是 5985 (HTTP),并且在默认情况下是加密的。还可以配置证书使其支持 HTTPS ,此时监听的
TCP 端口为 5986。
WinRM 的设置很容易配置,可以使用 GPO , winrm.exe ,或 PowerShell 中的 WSMan PSDrive 来配置,如下所示:
PowerShell 提供了一个 cmdlet 可以很方便的验证 WinRM 服务是否正在侦听 —— Test-WSMan。如果 Test-WSMan
返回了结果,则表明该系统的 WinRM 服务正处于监听状态。
为了与系统的 WMI 进行交互以便运行 WinRM 服务,唯一支持远程 WMI 交互的内置工具是 winrm.exe 和 PowerShell 的 CIM
cmdlet。此外,对于没有运行 WinRM 服务的系统还可以使用 CIM cmdlet 来配置使用 DCOM 。
**0x07 WMI 事件**
从攻击者或防御者的角度来看, WMI 最强大的功能之一就是对 WMI 事件的异步响应的能力。除了少数例外,WMI
事件几乎可以用于对操作系统的任何事件作出响应。例如,WMI 事件可能用于触发一个进程创建的事件。这种机制可随后被用作在任何 Windows
操作系统上执行命令行审计。
有两类 WMI 事件 —— 它们都运行在本地的单个进程和 WMI 永久事件订阅的上下文中。本地事件可以维持宿主进程的生存期,尽管 WMI 永久事件订阅存储在
WMI 存储库中,但是作为 SYSTEM 权限运行后依旧可以在重新启动之后继续持续运行。
事件触发条件
要安装一个永久事件订阅,下面三件事情是必须要做的:
1.事件筛选器 —— 筛选出感兴趣的事件  
2.事件消费者 —— 要在事件被触发时执行的操作  
3.消费者绑定筛选器 — — 将筛选器绑定到消费者的注册机制
事件筛选器
事件筛选器描述了感兴趣的事件并且执行了 WQL
事件查询。一旦系统管理员配置了筛选器,他们就可以使用它在创建新的事件时接收到通知。举一个例子,事件筛选器可能用于描述以下一些事件:
    创建一个具有特定名称的进程
    将 DLL 加载到进程中
    创建具有特定 ID 的事件日志
    插入可移动媒体
    用户注销
    创建、修改、删除任何文件或目录
事件筛选器都被存储为一个 ROOTsubscription:__EventFilter 对象的实例。事件筛选器查询支持以下类型的事件:
内部事件
内部事件表示的是创建、修改和删除任何 WMI 类,对象或命名空间的事件。它们也可被用于计时器或 WMI 方法执行的警报。以下内部事件采用了系统类
(以两个下划线开头的那些) 的形式,并存在于每一个 WMI 命名空间:
    __NamespaceOperationEvent
    __NamespaceModificationEvent
    __NamespaceDeletionEvent
    __NamespaceCreationEvent
    __ClassOperationEvent
    __ClassDeletionEvent
    __ClassModificationEvent
    __ClassCreationEvent
    __InstanceOperationEvent
    __InstanceCreationEvent
    __MethodInvocationEvent
    __InstanceModificationEvent
    __InstanceDeletionEvent
    __TimerEvent
这些事件的作用非常强大,因为它们可以被用于在操作系统中几乎任何可以想见的事件的触发器。例如,如果触发了一个基于交互式登录的事件则可以形成下面的内部事件查询:
此查询被转换为创建一个登录类型为 2 (交互式)的 Win32_LogonSession 类的一个实例。
由于触发的内部事件有一定的频率,所以必须在 WQL 查询语句的 WITHIN
子句中指定事件轮询间隔。这就是说,它有时可能错过事件。例如,如果事件查询的形式目的是创建 WMI 类的实例,如果该实例的创建和销毁 (如常见的一些进程 ——
Win32_Process 实例) 在轮询间隔内,那么则会错过这一事件。创建内部 WMI 查询时,必须考虑这种可能出现的情况。
SELECT * FROM __InstanceCreationEvent WITHIN 15 WHERE TargetInstance ISA
'Win32_LogonSession' AND TargetInstance.LogonType = 2
外部事件
外部事件解决了和内部事件有关的潜在的轮询问题,因为它们在事件发生时立刻被触发。然而美中不足的是在 WMI
中并没有太多的外部事件,不过,所有已经存在的外部事件的作用很强大,性能也很高。下面的外部事件对于攻击者和防御者来说可能是有用的:
    ROOTCIMV2:Win32_ComputerShutdownEvent
    ROOTCIMV2:Win32_IP4RouteTableEvent
    ROOTCIMV2:Win32_ProcessStartTrace
    ROOTCIMV2:Win32_ModuleLoadTrace