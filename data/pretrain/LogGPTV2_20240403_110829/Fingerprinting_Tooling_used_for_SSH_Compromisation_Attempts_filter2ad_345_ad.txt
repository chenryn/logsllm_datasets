### Password Randomization and Clustering in SSH Brute Force Attacks

#### Introduction
In the context of a specific cluster, 564 different hosts exhibit a diverse array of password lists. This phenomenon is attributed to the attackers' use of random or pseudo-randomly generated passwords, combined with 22 fixed credential tuples. Each generated password is 10 characters long, consisting of letters and numbers.

#### Key Observations
- **Limited Credential Usage**: 80% (463 out of 564 IPs) of the hosts use fewer than 60 unique login credentials.
- **Low Overlap Between Passwords**: Out of 10,318 login credentials, 6,592 are used by only one IP address, indicating a high degree of randomization.
- **Jaccard Index**: The mean Jaccard index of 0.4 for the credential lists used in the cluster further confirms the randomization.

#### Implications for Detection
- **Challenges for Clustering Algorithms**: Randomized credentials make it difficult for password-based clustering algorithms to detect similarly acting groups.
- **Brute Forcers**: Similarly, brute forcers relying on extensive lists of candidate credentials will face challenges due to the dilution of common credentials.
- **Fingerprint-Based Clustering**: A fingerprint-based approach, such as clustering based on SSH banners and key exchange algorithms, can effectively identify these relationships.

#### Cluster Analysis
The following table summarizes the clusters, their characteristics, and the tools associated with them:

| Banner Type          | Kex Cluster        | IP Count | # Cred. Lists | High Credential / Tool Correlation | Popular Tool       | Diverse Credential Lists |
|----------------------|--------------------|----------|---------------|------------------------------------|--------------------|--------------------------|
| SSH-2.0-OpenSSH_7.4p1 | Raspbian-10+deb9u3 | 6        | 684           | 9                                  | -                  | 6                        |
| SSH-2.0-OpenSSH_7.4p1 | Raspbian-10+deb9u4 | 7        | 1138          | 5                                  | -                  | 7                        |
| SSH-2.0-libssh2_1.8.1_DEV | -              | 8        | 85            | 7                                  | -                  | 8                        |
| SSH-2.0-libssh2_1.7.0 | -                  | 4        | 6473          | 2688                               | -                  | 4                        |
| SSH-2.0-Go           | -                  | 5        | 86805         | 635                                | -                  | 5                        |
| SSH-2.0-libssh-0.6.3  | -                  | 1        | 564           | 557                                | -                  | 1                        |
| -                    | -                  | 2        | 208           | 111                                | -                  | 2                        |
| -                    | -                  | 3        | 4479          | 4438                               | -                  | 3                        |

#### Conclusion
This study demonstrates that clustering based on SSH banners and key exchange algorithms can identify different types of clusters, including those using extensive password lists or random passwords. While password-based solutions may struggle with highly randomized credentials, a combination of fingerprint-based and password-based approaches can provide more comprehensive and complementary findings.

### Future Work
The research presented here was conducted from a cyber threat intelligence perspective, aiming to augment the methods for fingerprinting adversarial tooling and gaining insights into attacker behavior. Future work should evaluate the efficacy of this method for active threat detection and prevention within intrusion detection systems.

### References
[1] Aris Adamantiadis, Andreas Schneider, Nick Zitzmann, Norbert Kiesel, and Jean-Philippe Garcia Ballester. libssh. https://www.libssh.org/.

[2] Timothy Barron and Nick Nikiforakis. Picky attackers: Quantifying the role of system properties on intruder behavior. In Annual Computer Security Applications Conference, 2017.

[3] David J. Bianco. The pyramid of pain, 2013.

[4] Zakir Durumeric, Zane Ma, Drew Springall, Richard Barnes, Nick Sullivan, Elie Bursztein, Michael Bailey, J. Alex Halderman, and Vern Paxson. The security impact of HTTPS interception. In The Network and Distributed System Security Symposium, 2017.

[5] Vincent Ghiette, Norbert Blenn, and Christian Doerr. Remote identification of port scan toolchains. In IFIP International Conference on New Technologies, Mobility and Security, 2016.

[6] Vincent Ghiette and Christian Doerr. How media reports trigger copycats: An analysis of the brewing of the largest packet storm to date. In ACM SIGCOMM Workshop on Traffic Measurements for Cybersecurity (WTMC), 2018.

[7] Laurens Hellemons, Luuk Hendriks, Rick Hofstede, Anna Sperotto, Ramin Sadre, and Aiko Pras. Sshcure: a flow-based SSH intrusion detection system. In Conference on Autonomous Infrastructure, Management and Security, 2012.

[8] Marc Heuse, David Maciejak, and Jan Dlabal. Hydra. https://github.com/vanhauser-thc/thc-hydra.

[9] Martin Husák, Milan Čermák, Tomáš Jirsík, and Pavel Čeleda. HTTPS traffic analysis and client identification using passive SSL/TLS fingerprinting. The European Association for Signal Processing Journal on Information Security, 2016.

[10] Mobin Javed and Vern Paxson. Detecting stealthy, distributed SSH brute-forcing. In ACM Special Interest Group on Security, Audit and Control Conference on Computer & Communications Security, 2013.

[11] Maciej Korczyński and Andrzej Duda. Markov chain fingerprinting to classify encrypted traffic. In IEEE International Conference on Computer Communications, 2014.

[12] Gordon Lyon and Fotios Chantzis. Ncrack. https://nmap.org/ncrack/.

[13] Joe Mondloch. Medusa. http://foofus.net/goons/jmk/medusa/medusa.html.

[14] Maryam M Najafabadi, Taghi M Khoshgoftaar, Clifford Kemp, Naeem Seliya, and Richard Zuech. Machine learning for detecting brute force attacks at the network level. In International Conference on Bioinformatics and Bioengineering, 2014.

[15] Vincent Nicomette, Mohamed Kaâniche, Eric Alata, and Matthieu Herrb. Set-up and deployment of a high-interaction honeypot: experiment and lessons learned. Journal in Computer Virology, 2011.

[16] Daniel Ramsbrock, Robin Berthier, and Michel Cukier. Profiling attacker behavior following SSH compromises. In IEEE/IFIP International Conference on Dependable Systems and Networks, 2007.

[17] Daniel Stenberg, Marc Hörsken, Viktor Szakats, and Will Cosgrove. libssh2. https://www.libssh2.org/.

[18] Qixiang Sun, Daniel R Simon, Yi-Min Wang, Wilf Russell, Venkata N Padmanabhan, and Lili Qiu. Statistical identification of encrypted web browsing traffic. In IEEE Symposium on Security and Privacy, 2002.

[19] Alexander Vetterl and Richard Clayton. Bitter harvest: Systematically fingerprinting low- and medium-interaction honeypots at internet scale. In USENIX Workshop on Offensive Technologies, 2018.

[20] T. Ylonen and C. Lonvick. The secure shell (SSH) transport layer protocol. Technical report, Internet Engineering Task Force, 2006.