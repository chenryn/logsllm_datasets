本文是[《Hooking Linux Kernel Functions, Part 2: How to Hook Functions with
Ftrace》](https://www.apriorit.com/dev-blog/546-hooking-linux-functions-2)的翻译文章
# 前言
Ftrace是一个用于跟踪Linux内核函数的Linux内核框架。
但是，当我们尝试启用系统活动监控以阻止可疑进程时，我们的团队设法找到了一种使用ftrace的新方法。
事实证明，ftrace允许你从可加载的GPL模块安装钩子而无需重建内核。 此方法适用于x86_64体系结构的Linux内核版本3.19和更高版本。
这是我们关于Hooking Linux内核函数调用的三部分系列的第二部分。 在本文中，我们将解释如何使用ftrace来hook
Linux内核中的关键函数调用。
你可以阅读本系列的[第一部分](https://xz.aliyun.com/t/2947)，以了解有关可用于完成此任务的其他方法的更多信息。
# 一种新方法：使用ftrace进行Linux内核hooking
什么是ftrace？ 基本上，ftrace是一个用于在函数级别跟踪内核的框架。 该框架自2008年以来一直在开发中，具有相当令人印象深刻的函数集。
使用ftrace跟踪内核函数时，通常可以获得哪些数据？ Linux ftrace显示调用图，跟踪函数调用的频率和长度，按模板过滤特定函数等。
在本文的下面，可以找到对官方文档和资源的引用，你可以使用它们来了解有关ftrace函数的更多信息。
ftrace的实现基于编译器选项-pg和-mfentry。 这些内核选项在每个函数的开头插入一个特殊跟踪函数的调用 —— mcount()或
**fentry** ()。 在用户程序中，分析器使用此编译器功能来跟踪所有函数的调用。 但是，在内核中，这些函数用于实现ftrace框架。
当然，从每个函数调用ftrace都是非常昂贵的。这就是为什么有一种针对流行架构的优化——动态ftrace。如果没有使用ftrace，它几乎不会影响系统，因为内核知道调用mcount()或
**fentry**
()的位置，并在早期阶段将机器码替换为nop(一个不执行任何操作的特定指令)。当Linux内核跟踪打开时，ftrace调用会被添加到必要的函数中。
# 必要函数说明
下面的结构可以用来描述每个钩子函数:
    /**
     * struct ftrace_hook describes the hooked function
     *
     * @name: the name of the hooked function
     *
     * @function: the address of the wrapper function that will be called instead
     * of the hooked function
     *
     * @original: a pointer to the place where the address 
     * of the hooked function should be stored, filled out during installation
     * of the hook
     *
     * @address: the address of the hooked function, filled out during installation 
     * of the hook
     *
     * @ops: ftrace service information, initialized by zeros;
     * initialization is finished during installation of the hook
     */
    struct ftrace_hook {
            const char *name;
            void *function;
            void *original;
            unsigned long address;
            struct ftrace_ops ops;
    };
用户只需要填写三个字段:name、function和original。其余字段被认为是实现细节。你可以把所有Hook函数的描述放在一起，并使用宏使代码更紧凑:
    #define HOOK(_name, _function, _original) \
            { \
                .name = (_name), \
                .function = (_function), \
                .original = (_original), \
            }
    static struct ftrace_hook hooked_functions[] = {
            HOOK("sys_clone", fh_sys_clone, &real_sys_clone),
            HOOK("sys_execve", fh_sys_execve, &real_sys_execve),
    };
下面是钩子函数包装的结构：
    /*
     * It’s a pointer to the original system call handler execve().
     * It can be called from the wrapper. It’s extremely important to keep the function signature
     * without any changes: the order, types of arguments, returned value,
     * and ABI specifier (pay attention to “asmlinkage”).
     */
    static asmlinkage long (*real_sys_execve)(const char __user *filename,
                    const char __user *const __user *argv,
                    const char __user *const __user *envp);
    /*
     * This function will be called instead of the hooked one. Its arguments are
     * the arguments of the original function. Its return value will be passed on to 
     * the calling function. This function can execute arbitrary code before, after,
     * or instead of the original function.
     */
    static asmlinkage long fh_sys_execve (const char __user *filename,
                    const char __user *const __user *argv,
                    const char __user *const __user *envp)
    {
            long ret;
            pr_debug("execve() called: filename=%p argv=%p envp=%p\n",
                    filename, argv, envp);
            ret = real_sys_execve(filename, argv, envp);
            pr_debug("execve() returns: %ld\n", ret);
            return ret;
    }
现在，钩子函数有最少的额外代码。唯一需要特别注意的是函数签名。它们必须完全相同;否则，参数就会被错误地传递，一切都会出错。不过，对于hooking系统调用来说，这并不重要，因为它们的处理程序非常稳定，而且出于性能原因，系统调用ABI和函数调用ABI在寄存器中使用相同的参数布局。但是，如果要hook其他函数，请记住内核没有稳定的接口。
# 初始化ftrace
我们的第一步是查找和保存钩子函数地址。你可能知道，在使用ftrace时，Linux内核跟踪可以通过函数名执行。但是，我们仍然需要知道原始函数的地址才能调用它。
您可以使用kallsyms（所有内核符号的列表）来获取所需函数的地址。 此列表不仅包括为模块导出的符号，实际上还包括所有的符号。
获取钩子函数地址的过程如下所示：
    static int resolve_hook_address (struct ftrace_hook *hook)
            hook->address = kallsyms_lookup_name(hook->name);
            if (!hook->address) {
                    pr_debug("unresolved symbol: %s\n", hook->name);
                    return -ENOENT;
            }
            *((unsigned long*) hook->original) = hook->address;
            return 0;
    }
接下来，我们需要初始化ftrace_ops结构。 这里我们有一个必要的字段func，指向回调。 但是，需要一些关键flags：
    int fh_install_hook (struct ftrace_hook *hook)
            int err;