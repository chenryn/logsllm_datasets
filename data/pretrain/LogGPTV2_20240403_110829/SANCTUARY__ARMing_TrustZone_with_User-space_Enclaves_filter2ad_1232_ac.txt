table, and are described in detail in Section V-E.
SANCTUARY Usage. The high-level SANCTUARY life cycle
works as follows: when a LA wants to execute sensitive code
in form of an SA inside a SANCTUARY Instance, the LA
requests execution of its bundled SA from the KM 1 . The KM
initiates the setup of the SANCTUARY Instance by loading the
SANCTUARY binaries (SL and SA). Next, the KM removes one
CPU core from the LOS and hands over control to the STA 2
to perform all security-related steps, such as the veriﬁcation of
the SA 3 . After successfully setting up of the SANCTUARY
Component
World
Added LOC Modiﬁed LOC
Kernel Module
Zircon Micro Kernel
OP-TEE
Static Trusted App
normal
normal
secure
secure
ARM Trusted Firmware
secure
Proxy TA
Sealing TA
secure
secure
713
166
56
472
92
287
406
-
45
2
-
-
-
-
Table I: Modiﬁcations for Sanctuary Components.
Instance, the KM triggers the SANCTUARY boot 4 . When the
boot process is ﬁnished the SA can execute the sensitive code,
and communicate with its LA as well as with the TAs in the
secure world 5 .
In the following, we explain each component of SANCTUARY
and its life cycle in detail.
A. Legacy OS
With SANCTUARY, the resource management remains in the
LOS. We implement the required functionalities in a custom
loadable kernel module (KM). The KM manages all resources
needed for a SANCTUARY Instance. It is able to remove a
core from the LOS and also to hand the core back to the LOS
after a SANCTUARY Instance ﬁnished execution. Since we use
Linux as the LOS in our prototype, we utilize the Linux CPU
hotplug mechanism [11] for that purpose. Furthermore, the
KM dynamically allocates memory for SANCTUARY Instances
and their associated communication channels from SA to LA
and from SA to TAs. Before a SANCTUARY Instance can be
6
Core 1Normal WorldSecure WorldSanctuarySanctuary Library (SL)Sanctuary App (SA)Normal WorldSecure WorldLinux (LOS)Legacy App (LA)TrustedApp (TA)OP-TEEStatic TrustedApp (STA)Core 0Kernel Module (KM)ARM TrustedFirmware (TF)15TrustedApp (TA)TZC-4002Normal World Memory (NWM)Sanctuary Memory (Sanct-M)Secure World Memory (SWM)MemoryPermissionsCoreIDModeNWMNS-SMSanct-MSWM0NormalRWRW--0SecureRWRWRWRW1Normal-RWRW-Non-secure Shared Memory (NS-SM)3EL3EL1EL04started, the KM has to load the SANCTUARY binaries (SL
and SA) into RAM which will be exclusively assigned to the
SANCTUARY core afterwards. The OP-TEE driver facilitates
the communication between LOS and OP-TEE.
B. Security Services
We keep the traditional structure of the secure world: Trusted
Apps run on SEL0 (secure-world user space), while OP-TEE
runs on SEL1 (secure-world kernel space). The TAs offer rele-
vant security services. In our proof-of-concept implementation,
we implemented a Proxy TA and a Sealing TA. The Proxy TA
is used to establish a secure communication channel from an
SA to remote servers. All data sent through the Proxy TA is
authenticated with the platform key and bound to the identity
of sender SA, i.e., the Proxy TA provides remote attestation.
The Sealing TA provides sealing functionality which allows to
bind data to a speciﬁc SA and to store it permanently on the
device. For each SA an individual key is used.
A Static Trusted App (STA) represents a kernel module in OP-
TEE. In our prototype, the STA veriﬁes the SL using a pre-
conﬁgured signature, sets up the SANCTUARY Instances, and
tears them down. Moreover, the STA provides functionalities to
TAs which can be used to, e.g., ﬁnd out which SA is currently
running in a SANCTUARY Instance, or to compute a hash over
an SA binary.
All aforementioned security services rely on the Trusted
Firmware (TF) as a trust anchor which is responsible for con-
text switches between normal and secure world and low-level
platform services. In our prototype, the TF was extended to
verify several security-relevant steps during the SANCTUARY
life cycle which is explained in detail in Section V-E.
C. Sanctuary
We implemented isolated code execution in SANCTUARY
by running SANCTUARY Instances in the normal world on
dedicated CPU cores. This isolates SANCTUARY Instances
from untrusted LOS and TAs running on the remaining cores.
A SANCTUARY Instance consists of two parts: the SL and an
SA. The SL provides basic process and memory management
functionalities for running an SA. In our implementation, we
chose the Zircon micro kernel [24] as SL due to its small
size (approx. 1MB) and versatility. After Zircon boots,
it
prepares the environment for the SA by conﬁguring the CPU
core, setting up the memory mappings and a basic execution
environment. Then, the SA is started as a normal-world user
process by the Zircon micro kernel. During execution, an SA
can communicate with its corresponding LA and also with TAs
in the secure world to utilize their provided security services
(e.g., sealing or remote attestation). To achieve this, we extend
the Zircon micro kernel with new system calls.
As required by SANCTUARY, the STA prevents simultaneous
execution of SAs in one SANCTUARY Instance because this
could lead to sensitive information leakage between SAs.
D. Memory Isolation Unit
In addition to isolating SANCTUARY execution through ded-
icated CPU cores, we protect SANCTUARY memory against
normal-world accesses from other cores by leveraging the
ARM TrustZone Address Space Controller (TZASC). As de-
scribed in Section II, its recent implementation, the ARM
TZC-400, allows setting memory-access permissions based
on bus master IDs. Traditionally on ARMv8 architectures,
all cores already have uniquely-assigned multi-processor-IDs
(MPID register [3]). For all transactions sent to the system bus,
multi-processor IDs are then translated to bus master IDs by a
dedicated labeling component. Currently, as on the HiKey960
development board, transactions from all cores are labeled with
the same bus master ID. For Sanctuary, only the mapping
policy needs to be changed such that the bus transactions of
cores are labeled with unique bus master IDs. No hardware
modiﬁcations have to be made to the processor-core. We
implemented the modiﬁed labeling ID-mapping policy using
the ARM Fast Models virtualization tools. From software,
we can now conﬁgure the TZC-400 such that memory re-
gions can be exclusively assigned to single cores by ﬁltering
the bus transactions for the buster master ID labels. Details
on how the TZC-400 needs to be conﬁgured are given in
Section V-E.The performance overhead for conﬁguring the
TZC-400 is negligible compared to the rest of the Sanctuary
startup, it only consists of a few register writes. It is important
to mention that the assignment of bus master ID labels to
transactions is already performed on all transactions by default.
We only enforce the labeling of unique IDs. This means on
the hardware level, SANCTUARY produces zero performance
overhead. Therefore, evaluation on a Hikey 960 board gives
realistic performance measurements.
If not enough unused bus master IDs are available to
distinguish all core transactions, only a subset of the cores
can run Sanctuary instances. This does not limit the general
applicability of Sanctuary as long as at least two free bus
master IDs are present.
On systems with the TZC-400, no additional hardware com-
ponents are needed to implement SANCTUARY. Some device
vendors already license the TZASC IP from ARM since it pro-
vides an industry-ready solution (e.g. Samsung on the Exynos
chips [13]). Unfortunately, public information regarding the
deployment of the TZC-400 on current platforms is limited.
E. Execution Life Cycle
In our prototype, a typical SANCTUARY life cycle consists
of four phases: (a) Sanctuary Setup, (b) Sanctuary Boot, (c)
SA Execution, and (d) Sanctuary Teardown, which we will
explain in the following. In our prototype, we assume that a
signature of the SL binary is already stored in the secure world.
However, integrity and authenticity of the SL can generally
also be established through certiﬁcates. Remote attestation of
the SA can be achieved by leveraging the Proxy TA. However,
alternative schemes, like Intel EPID, could be implemented as
well. The implementation details of such a scheme are out
of scope for this paper, thus, we refer the reader to Intel’s
documentation for a possible outline [36].
Sanctuary Setup. The SANCTUARY setup phase is performed
by the KM in the normal world and the STA in the secure
world. The KM manages system resources, whereas the STA
performs all security relevant steps. The setup of a SANCTU-
ARY Instance is triggered by the LA that requests execution of
its sensitive code in the corresponding SA. Subsequently, the
SL and SA binaries are loaded from the ﬁle system and handed
over to the KM using procfs. The SL binary can also be loaded
only once during system boot and remain in memory until
the system is shut down. We implemented the binary loading
7
Figure 5: Region ID Access Register.
secure read access permissions (nsaid_rd_en). Every bit is
associated with one bus master ID. This means, if e.g. bit
0 and bit 16 of REGION_ID_ACCESS_1 are set to 1 and
all other bits to 0, only the bus master with the associated
ID 0 is allowed to perform write or read access on region
1. In our scenario,
the SANCTUARY memory is assigned
to the SANCTUARY core by setting REGION_ID_ACCESS_1
to the value 0x800080. Then, non-secure access is only
allowed for the core with ID 7, which is the SANCTUARY
core in our example. For the memory regions that cover all
of the normal-world memory except the non-secure shared
memory, the bits are set to 0x7F007F in the corresponding
REGION_ID_ACCESS registers. Thus, permission to access
the normal-world memory is granted to all cores except the
SANCTUARY core. This is crucial for implementing two-way
isolation. The region covering the non-secure shared memory
is conﬁgured with the value 0xFF00FF since the cores
running the normal world and also the SANCTUARY core need
access to it. As a last step, the regions covering the secure-
world memory are conﬁgured with the bit value 0x0 such that
no core can perform a non-secure access on the memory.
The resulting memory permissions are listed in Figure 3 for
the different memory regions, core IDs, and execution modes.
In the following veriﬁcation step, the STA veriﬁes the SL
binary using the stored digital signature. For this purpose, the
STA uses the RSASSA-PKCS1-v1_5 scheme together with
SHA-256 which are provided by OP-TEE. After successful
veriﬁcation, the ARM TF is informed that the SANCTUARY is
locked, veriﬁed, and ready to be booted.
Sanctuary Boot. After successful SANCTUARY setup, the KM
calls the TF to boot the SANCTUARY core. Before starting
the core, the TF checks that the SANCTUARY Instance was
correctly locked and veriﬁed. After receiving the boot signal,
the SANCTUARY core ﬁrst executes the TF in EL3. During
initialization of the TF, exception handlers needed for calling
the TF from the SL are set up. The TF needs to be callable from
the SL to shut the SANCTUARY core down in the teardown
phase. After TF initialization, the core switches to EL1 and
jumps to the entry point of the SL. We slightly modiﬁed the
Zircon boot sequence to prevent information leakage from the
SANCTUARY Instance We slightly modiﬁed the Zircon boot
sequence to prevent information leakage from the SANCTU-
ARY Instance by excluding all SANCTUARY memory from
being cached in the shared L2 cache. Moreover, the external
interrupts are conﬁgured using the core’s CPU interface of the
General Interrupt Controller (GIC) which cannot be accessed
by other cores. This blocks external interrupts triggered by
other cores, while allowing to receive interrupts requested by
the SANCTUARY core, e.g. timer interrupts.
SA execution. While executing sensitive code, the SA may
establish communication channels. The SA is able to commu-
Figure 4: Memory layout after setting up a SANCTUARY. As
before, Core 0 is responsible for initializing and managing the
Sanctuary App, which runs on Core 1 (omitted for clarity).
in the normal world since OP-TEE cannot directly access
the ﬁle system. The KM reserves additional memory for the
SANCTUARY Instance which is used for memory allocations
during SA run time. We call this memory area Sanctuary Data.
Additional memory is reserved for the SANCTUARY Instance’s
communication channels. The communication between the LA
and its SA is performed over non-secure (i.e. accessible by
untrusted software) shared memory. In contrast, secure shared
memory is used for communication between SA and TAs. The
ﬁnal memory layout after the setup is depicted in Figure 4.
After loading the binaries, the KM selects a CPU core to run
the SANCTUARY Instance. The KM always selects the CPU
core with the least load. Next, the Linux hotplug mechanism
is used to shut down the selected core. If successful, the
KM calls the STA and provides the ID of the selected core
as an argument. This call traps into monitor mode where
the TF checks that the selected core is indeed shut down
before performing a world switch and handing over control
to the STA. The STA then locks the SANCTUARY memory by
conﬁguring the TZC-400.
We assume that unique IDs 0-7 are assigned in hardware to
8 CPU cores, and that the selected SANCTUARY core has the
ID 7. Moreover, for the sake of simplicity, we assume that
no other bus master than the CPU needs access to memory.
Then, one of the up to 9 memory regions the TZC-400
can separate is conﬁgured to exactly cover the contiguous
memory area in which the SL and SA binaries, the Sanctuary
Data and the secure shared memory resides. We assume
that region 1 is used for that purpose. The lowest address
covered by region 1 is set using the REGION_BASE_LOW_1
and REGION_BASE_HIGH_1 registers. The highest address
covered is set using the REGION_TOP_LOW_1 and RE-
GION_TOP_HIGH_1 registers. Subsequently, the conﬁgured
memory region 1 is solely assigned to the SANCTUARY core
using the REGION_ID_ACCESS_1 register. The bit assign-
ments of the region ID access register is shown in Figure 5.
The upper 16 bits of the register deﬁne the non-secure write
access permissions (nsaid_wr_en), the lower 16 bits the non-
8
Linux (LOS)UnprotectedMemoryLegacyApps (LAs)Non-secure Shared MemorySecure SharedMemorySanctuary MemorySanctuary Library (SL)Sanctuary App (SA)Sanctuary DataOP-TEEProtectedMemoryTrustedApps (TAs)ARM TFTZC-400Normal WorldSecure WorldLinuxLegacy App (LA)OP-TEEStatic TrustedApp (STA)Core 0Kernel Module (KM)ARM TrustedFirmware (TF)TrustedApp (TA)Load BinariesLock SanctuaryVerify Sanctuary Library3116150nsaid_wr_ennsaid_rd_enBit 16 assoc. with ID = 0…Bit 31 assoc. with ID = 15Bit 0 assoc. with ID = 0…Bit 15 assoc. with ID = 15nicate with its corresponding LA over the non-secure shared
memory and with vendor TAs over the secure shared memory
through OP-TEE. All data sent over the non-secure shared
memory is accessible to the normal world, and hence, it is not
part of the SANCTUARY memory partition. Communication
is facilitated by the KM of the LOS in the normal world
and by custom Zircon system calls on the SANCTUARY side.
When the SA requires security services from vendor TAs, it
communicates with the TA over the secure shared memory
channel. On the secure-world side,
this communication is
facilitated by the STA. Since all data shared between the SA
and a TA is sensitive, this data is solely exchanged over secure