>>> parse("hello", "hello world")
>>> parse("hello", "hello")
>>>
如果你编写的解析规则，没有为字段定义字段名，也就是匿名字段， Result 将是一个 类似 list 的
实例，演示如下：
>>> profile = parse("I am {}, {} years old, {}", "I am Jack, 27 years old, male")
>>> profile
>>> profile[0]
'Jack'
>>> profile[1]
'27'
>>> profile[2]
'male'
而如果你编写的解析规则，为字段定义了字段名， Result 将是一个 类似 字典 的实例，演示如下：
>>> profile = parse("I am {name}, {age} years old, {gender}", "I am Jack, 27 years o
ld, male")
>>> profile
>>> profile['name']
'Jack'
>>> profile['age']
'27'
>>> profile['gender']
'male'
3. 重复利用 pattern
和使用 re 一样，parse 同样支持 pattern 复用。
>>> from parse import compile
>>>
>>> pattern = compile("I am {}, {} years old, {}")
>>> pattern.parse("I am Jack, 27 years old, male")
>>>
>>> pattern.parse("I am Tom, 26 years old, male")
4. 类型转化
从上面的例子中，你应该能注意到，parse 在获取年龄的时候，变成了一个 "27" ，这是一个字符
串，有没有一种办法，可以在提取的时候就按照我们的类型进行转换呢？
你可以这样写。
>>> from parse import parse
>>> profile = parse("I am {name}, {age:d} years old, {gender}", "I am Jack, 27 years
old, male")
>>> profile
>>> type(profile["age"])
除了将其转为 整型，还有其他格式吗？
内置的格式还有很多，比如
匹配时间
>>> parse('Meet at {:tg}', 'Meet at 1/2/2011 11:00 PM')
更多类型请参考官方文档：
Type Characters Matched Output
l Letters (ASCII) str
w Letters, numbers and underscore str
W Not letters, numbers and underscore str
s Whitespace str
S Non-whitespace str
d Digits (effectively integer numbers) int
D Non-digit str
n Numbers with thousands separators (, or .) int
% Percentage (converted to value/100.0) float
f Fixed-point numbers float
F Decimal numbers Decimal
Floating-point numbers with exponent e.g. 1.1e-10, NAN (all case
e float
insensitive)
g General number format (either d, f or e) float
b Binary numbers int
o Octal numbers int
x Hexadecimal numbers (lower and upper case) int
ISO 8601 format date/time e.g. 1972-01-20T10:21:36Z (“T” and “Z”
ti datetime
optional)
te RFC2822 e-mail format date/time e.g. Mon, 20 Jan 1972 10:21:36 +1000 datetime
tg Global (day/month) format date/time e.g. 20/1/1972 10:21:36 AM +1:00 datetime
ta US (month/day) format date/time e.g. 1/20/1972 10:21:36 PM +10:30 datetime
tc ctime() format date/time e.g. Sun Sep 16 01:03:52 1973 datetime
th HTTP log format date/time e.g. 21/Nov/2011:00:07:11 +0000 datetime
ts Linux system log format date/time e.g. Nov 9 03:37:44 datetime
tt Time e.g. 10:21:36 PM -5:30 time
5. 提取时去除空格
去除两边空格
>>> parse('hello {} , hello python', 'hello world , hello python')
>>>
>>>
>>> parse('hello {:^} , hello python', 'hello world , hello python')
去除左边空格
>>> parse('hello {:>} , hello python', 'hello world , hello python')
去除右边空格
>>> parse('hello {:
6. 大小写敏感开关
Parse 默认是大小写不敏感的，你写 hello 和 HELLO 是一样的。
如果你需要区分大小写，那可以加个参数，演示如下：
>>> parse('SPAM', 'spam')
>>> parse('SPAM', 'spam') is None
False
>>> parse('SPAM', 'spam', case_sensitive=True) is None
True
7. 匹配字符数
精确匹配：指定最大字符数
>>> parse('{:.2}{:.2}', 'hello') # 
>>>
>>> parse('{:.2}{:.2}', 'hell') # 
模糊匹配：指定最小字符数
>>> parse('{:.2}{:2}', 'hello')
>>>
>>> parse('{:2}{:2}', 'hello')
若要在精准/模糊匹配的模式下，再进行格式转换，可以这样写
>>> parse('{:2}{:2}', '1024')
>>>
>>>
>>> parse('{:2d}{:2d}', '1024')
8. 三个重要属性
Parse 里有三个非常重要的属性
fixed：利用位置提取的匿名字段的元组
named：存放有命名的字段的字典
spans：存放匹配到字段的位置
下面这段代码，带你了解他们之间有什么不同
>>> profile = parse("I am {name}, {age:d} years old, {}", "I am Jack, 27 years old,
male")
>>> profile.fixed
('male',)
>>> profile.named
{'age': 27, 'name': 'Jack'}
>>> profile.spans
{0: (25, 29), 'age': (11, 13), 'name': (5, 9)}
>>>
9. 自定义类型的转换
匹配到的字符串，会做为参数传入对应的函数
比如我们之前讲过的，将字符串转整型
>>> parse("I am {:d}", "I am 27")
>>> type(_[0])
>>>
其等价于
>>> def myint(string):
... return int(string)
...
>>>
>>>
>>> parse("I am {:myint}", "I am 27", dict(myint=myint))
>>> type(_[0])
>>>
利用它，我们可以定制很多的功能，比如我想把匹配的字符串弄成全大写
>>> def shouty(string):
... return string.upper()
...
>>> parse('{:shouty} world', 'hello world', dict(shouty=shouty))
>>>
10 总结一下
parse 库在字符串解析处理场景中提供的便利，肉眼可见，上手简单。
在一些简单的场景中，使用 parse 可比使用 re 去写正则开发效率不知道高几个 level，用它写出来
的代码富有美感，可读性高，后期维护起代码来一点压力也没有，推荐你使用。
7.5 一行代码让代码运行速度提高100倍
python一直被病垢运行速度太慢，但是实际上python的执行效率并不慢，慢的是python用的解释器
Cpython运行效率太差。
“一行代码让python的运行速度提高100倍”这绝不是哗众取宠的论调。
我们来看一下这个最简单的例子，从1一直累加到1亿。
最原始的代码：
import time
def foo(x,y):
tt = time.time()
s = 0
for i in range(x,y):
s += i
print('Time used: {} sec'.format(time.time()-tt))
return s
print(foo(1,100000000))
结果：
Time used: 6.779874801635742 sec
4999999950000000
我们来加一行代码，再看看结果：
from numba import jit
import time
@jit
def foo(x,y):
tt = time.time()
s = 0
for i in range(x,y):
s += i
print('Time used: {} sec'.format(time.time()-tt))
return s
print(foo(1,100000000))
结果：
Time used: 0.04680037498474121 sec
4999999950000000
是不是快了100多倍呢？
那么下面就分享一下“为啥numba库的jit模块那么牛掰？”
NumPy的创始人Travis Oliphant在离开Enthought之后，创建了CONTINUUM，致力于将Python大数
据处理方面的应用。最近推出的Numba项目能够将处理NumPy数组的Python函数JIT编译为机器码
执行，从而上百倍的提高程序的运算速度。
Numba项目的主页上有Linux下的详细安装步骤。编译LLVM需要花一些时间。Windows用户可以从
Unofficial Windows Binaries for Python Extension Packages下载安装LLVMPy、meta和numba等几个
扩展库。
下面我们看一个例子：
import numba as nb
from numba import jit
@jit('f8(f8[:])')
def sum1d(array):
s = 0.0
n = array.shape[0]
for i in range(n):
s += array[i]
return s
import numpy as np
array = np.random.random(10000)
%timeit sum1d(array)
%timeit np.sum(array)
%timeit sum(array)
10000 loops, best of 3: 38.9 us per loop
10000 loops, best of 3: 32.3 us per loop
100 loops, best of 3: 12.4 ms per loop
numba中提供了一些修饰器，它们可以将其修饰的函数JIT编译成机器码函数，并返回一个可在
Python中调用机器码的包装对象。为了能将Python函数编译成能高速执行的机器码，我们需要告诉
JIT编译器函数的各个参数和返回值的类型。我们可以通过多种方式指定类型信息，在上面的例子
中，类型信息由一个字符串’f8(f8[:])’指定。其中’f8’表示8个字节双精度浮点数，括号前面的’f8’表示
返回值类型，括号里的表示参数类型，’[:]’表示一维数组。因此整个类型字符串表示sum1d()是一个
参数为双精度浮点数的一维数组，返回值是一个双精度浮点数。需要注意的是，JIT所产生的函数
只能对指定的类型的参数进行运算：
print sum1d(np.ones(10, dtype=np.int32))
print sum1d(np.ones(10, dtype=np.float32))
print sum1d(np.ones(10, dtype=np.float64))
1.2095376009e-312
1.46201599944e+185
10.0
如果希望JIT能针对所有类型的参数进行运算，可以使用autojit：
from numba import autojit
@autojit
def sum1d2(array):
s = 0.0
n = array.shape[0]
for i in range(n):
s += array[i]
return s
%timeit sum1d2(array)
print sum1d2(np.ones(10, dtype=np.int32))
print sum1d2(np.ones(10, dtype=np.float32))
print sum1d2(np.ones(10, dtype=np.float64))
10000 loops, best of 3: 143 us per loop
10.0
10.0
10.0
autoit虽然可以根据参数类型动态地产生机器码函数，但是由于它需要每次检查参数类型，因此计
算速度也有所降低。numba的用法很简单，基本上就是用jit和autojit这两个修饰器，和一些类型对
象。下面的程序列出numba所支持的所有类型：
print [obj for obj in nb.__dict__.values() if isinstance(obj, nb.minivect.minitypes.
Type)]
[size_t, Py_uintptr_t, uint16, complex128, float, complex256, void, int , long doubl
e,
unsigned PY_LONG_LONG, uint32, complex256, complex64, object_, npy_intp, const char
*,
double, unsigned short, float, object_, float, uint64, uint32, uint8, complex128, ui
nt16,
int, int , uint8, complex64, int8, uint64, double, long double, int32, double, long
double,
char, long, unsigned char, PY_LONG_LONG, int64, int16, unsigned long, int8, int16, i
nt32,
unsigned int, short, int64, Py_ssize_t]
工作原理
numba的通过meta模块解析Python函数的ast语法树，对各个变量添加相应的类型信息。然后调用
llvmpy生成机器码，最后再生成机器码的Python调用接口。
meta模块
通过研究numba的工作原理，我们可以找到许多有用的工具。例如meta模块可在程序源码、ast语
法树以及Python二进制码之间进行相互转换。下面看一个例子：
def add2(a, b):
return a + b
decompile_func能将函数的代码对象反编译成ast语法树，而str_ast能直观地显示ast语法树，使用这
两个工具学习Python的ast语法树是很有帮助的。
from meta.decompiler import decompile_func
from meta.asttools import str_ast
print str_ast(decompile_func(add2))
FunctionDef(args=arguments(args=[Name(ctx=Param(),
id='a'),
Name(ctx=Param(),
id='b')],
defaults=[],
kwarg=None,
vararg=None),
body=[Return(value=BinOp(left=Name(ctx=Load(),
id='a'),
op=Add(),
right=Name(ctx=Load(),
id='b')))],
decorator_list=[],
name='add2')
而python_source可以将ast语法树转换为Python源代码：
from meta.asttools import python_source
python_source(decompile_func(add2))
def add2(a, b):
return (a + b)
decompile_pyc将上述二者结合起来，它能将Python编译之后的pyc或者pyo文件反编译成源代码。
下面我们先写一个tmp.py文件，然后通过py_compile将其编译成tmp.pyc。
with open("tmp.py", "w") as f:
f.write("""