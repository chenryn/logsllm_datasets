++ auth required pam_listfile.so item=user sense=allow file=/etc/sshdusers onerr=succeed
```
```
echo "kevin" >/etc/sshdusers
```
注：此处如果 root 也使用 ssh 远程连接，也会受到 pam_listfile.so 限制的。
### pam_limits.so
pam_limits.so 模块的主要功能是限制用户会话过程中对各种系统资源的使用情况。缺省情况下该模块的配置文件是 `/etc/security/limits.conf` 。而该配置文件的基本格式实际上是由 4 个字段组成的表，其中具体限制的内容包括：
```
Domain            type            item                                     value
用户名 / 组名       软 / 硬限制     core——core 文件大小 (KB)                    具体值
                                data——最大数据大小 (KB)
                                fsize——最大文件大小 (KB)
                                memlock——最大可用内存空间 (KB)
                                nofile——最大可以打开的文件数量
                                rss——最大可驻留空间 (KB)
                                stack——最大堆栈空间 (KB)
                                cpu——最大 CPU 使用时间（MIN）
                                nproc——最大运行进程数
                                as——地址空间限制
                                maxlogins——用户可以登录到系统最多次数
                                locks——最大锁定文件数目
```
需要注意的是，如果没有任何限制可以使用 "-" 号，并且针对用户限制的优先级一般要比针对组限制的优先级更高。
使用 pam_limits.so 模块的最常见的场景是在运行 Oracle 数据库的 RHEL 服务器中，因为一般 Oracle 数据库在安装之前，按照其官方文档的说明需要先对某些用户（Oracle）使用系统资源的情况进行限制。所以我们总是能够在 Oracle 数据库服务器的 `/etc/security/limits.conf` 文件中看到类似这样的配置：
```
vim /etc/security/limits.conf
.......
oracle           soft    nproc   2047
oracle           hard    nproc   16384
oracle           soft    nofile  1024
oracle           hard    nofile  65536
```
结合上面的配置文件说明，可知 Oracle 数据库需要对 Oracle 用户使用资源的情况进行一些限制，包括： oracle 用户最大能开启的进程数不超过 16384，最大能打开的文件数不超过 65536。
顺便提一下，针对 nofile，这个只是基于用户层面的限制和调整方法。基于系统层面的限制和调整方法是修改 / etc/sysctl.conf 文件，直接改 fs.file-max 参数，调整之后 sysctl -p 生效。
**示例 : 限制用户 bobo 登录到 SSH 服务器时的最大连接数（防止同一个用户开启过多的登录进程）**
/etc/pam.d/system-auth 中，默认就会通过 pam_limits.so 限制用户最多使用多少系统资源
```
cat /etc/pam.d/system-auth|grep limits.so
session     required      pam_limits.so
```
因此只需要在 `/etc/security/limits.conf` 文件中增加一行对 bobo 用户产生的连接数进行限定：
```diff
vim /etc/security/limits.conf
++ bobo             hard    maxlogins       2
```
### pam_rootok.so
一般情况下，pam_rootok.so 模块的主要作用是使 uid 为 0 的用户，即 root 用户能够直接通过认证而不用输入密码。pam_rootok.so 模块的一个典型应用是插入到一些应用程序的认证配置文件中，当 root 用户执行这些命令的时候可以不用输入口令而直接通过认证。比如说 "su" 命令，为什么当以 root 用户执行 "su" 切换到普通用户身份的时候是不需要输入任何口令而可以直接切换过去？
查看一下 `/etc/pam.d/su` 文件的内容
```
cat /etc/pam.d/su
auth        sufficient  pam_rootok.so
```
而如果将该行配置注释掉的情况下，就会发现即便以 root 用户切换普通用户的时候仍然要求输入口令。
另外一种方法，只需要将上述的 "sufficient" 改成 "required" 即可。因为这样，pam_rootok.so 模块的验证通过就成为了必要条件之一。
pam_rootok.so 模块的另外一个应用是在 chfn 命令中。Chfn 命令用于改变 `/etc/passwd` 中的用户的说明字段。当以 root 身份执行 chfn 命令修改用户信息的时候是不用输入密码的。但是以普通用户身份执行 chfn 则需要输入密码之后才能改变自己的用户说明。这实际上也是因为在 `/etc/pam.d/chfn` 配置文件中的第一行调用了 pam_rootok.so 的结果。
不过这里即便将该配置中的第一行注释掉，root 用户通过 chfn 修改自己信息的时候仍然不需要使用密码。所以恐怕效果不是很明显。究其原因主要是很多 PAM 模块对 root 用户是不会产生限制的。
可以在 `/etc/pam.d/su` 文件里设置禁止用户使用 su 命令
```bash
vim /etc/pam.d/su
auth sufficient pam_rootok.so
#auth required pam_wheel.so use_uid
```
以上两行是默认状态（即开启第一行，注释第二行），这种状态下是允许所有用户间使用 su 命令进行切换的！（或者两行都注释也是运行所有用户都能使用 su 命令，但 root 下使用 su 切换到其他普通用户需要输入密码；如果第一行不注释，则 root 使用 su 切换普通用户就不需要输入密码）
如果开启第二行，表示只有 root 用户和 wheel 组内的用户才可以使用 su 命令。
如果注释第一行，开启第二行，表示只有 wheel 组内的用户才能使用 su 命令，root 用户也被禁用 su 命令。
### pam_userdb.so
pam_userdb.so 模块的主要作用是通过一个轻量级的 Berkeley 数据库来保存用户和口令信息。这样用户认证将通过该数据库进行，而不是传统的 `/etc/passwd` 和 `/etc/shadow` 或者其它的一些基于 LDAP 或者 NIS 等类型的网络认证。所以存在于 Berkeley 数据库中的用户也称为虚拟用户。
pam_userdb.so 模块的一个典型用途就是结合 vsftpd 配置基于虚拟用户访问的 FTP 服务器。
相对于本地用户以及匿名用户来说，虚拟用户只是相对于 FTP 服务器而言才有用的用户，这些用户被严格地限定在 pam_userdb 数据库当中。所以虚拟用户只能访问 FTP 服务器所提供的资源，因而可以大大提高系统安全性。另外相对于匿名用户而言，虚拟用户必须通过用户名和密码才能够访问 FTP 的资源。这样也提高了对 FTP 用户下载的可管理性。
基于虚拟用户实现的 vsftpd 的原理基本上是这样一个过程：先定义一些专门针对 FTP 的虚拟用户，然后将用户信息加入到系统自带的数据库中（但不是 passwd）从而生成一个访问 FTP 的虚拟用户列表，这里使用的数据库是 db4 也就是 Berkeley DB。然后可以通过使用 pam_userdb.so 模块来调用该数据库存储用户信息以及实现 FTP 用户认证。当然同时也可以在系统中通过对配置文件的定义和划分来实现对不同虚拟用户不同类型的访问控制。
### pam_cracklib.so
pam_cracklib.so 是一个常用并且非常重要的 PAM 模块。该模块主要的作用是对用户密码的强健性进行检测。即检查和限制用户自定义密码的长度、复杂度和历史等。如不满足上述强度的密码将拒绝用户使用。pam_cracklib.so 比较重要和难于理解的是它的一些参数和计数方法，其常用参数包括：
```
debug：    将调试信息写入日志；
type=xxx： 当添加 / 修改密码时，系统给出的缺省提示符是 "New UNIX password:" 以及 "Retype UNIX password:"，而使用该参数可以自定义输入密码的提示符，比如指定 type=your own word；
retry=N：  定义登录 / 修改密码失败时，可以重试的次数；
Difok=N：  定义新密码中必须至少有几个字符要与旧密码不同。但是如果新密码中有 1/2 以上的字符与旧密码不同时，该新密码将被接受；
minlen=N： 定义用户密码的最小长度；
dcredit=N：定义用户密码中必须至少包含多少个数字；
ucredit=N：定义用户密码中必须至少包含多少个大写字母；
lcredit=N：定义用户密码中必须至少包含多少个小些字母；
ocredit=N：定义用户密码中必须至少包含多少个特殊字符（除数字、字母之外）；
注意
当 N>0 时，N 代表新密码中最多可以有 N 个指定的字符
当 N<0 时，N 代表新密码中最少可以有 N 个指定的字符
```
### pam_pwhistroy.so
pam_pwhistory.so 模块也是一个常用模块，一般辅助 pam_cracklib.so，pam_tally.so 以及 pam_unix.so 等模块来加强用户使用密码的安全度。不过 pam_pwhistory.so 模块起的是另一类的作用，即专门为用户建立一个密码历史档案，防止用户在一定时间内使用已经用过的密码。
`/etc/pam.d/system-auth` 下的配置针对的是普通用户，在 root 用户下是无效的
当需要限定用户在 90 天之内不能重复使用以前曾经使用过的 10 个密码，那么具体操作方法是去修改 `/etc/pam.d/system-auth` 文件，在 password 接口处增加：
```
password  required  pam_cracklib.so  retry=3  password  required  pam_pwhistory.so enforce_for_root remember=10
```
此时用户使用过的密码将会记录到 `/etc/security/opasswd` 文件中。但是 pam_pwhistory.so 并没有什么选项可以限定密码在多少天之内无法被重复使用，
所以上述的 90 天是无法配置的。一个简单的解决方法就是当 90 天左右的时候，手动清空一次 opasswd 文件即可。
当然，如果要实现同样的功能除了 pam_pwhistory.so 模块之外还有其它的办法。比较常用的是 pam_unix.so 模块。
具体方法是修改 `/etc/pam.d/system-auth` 文件，给 pam_unix.so 模块里加上 remember=10 这个选项，修改之后的配置文件为：
```diff
vim /etc/pam.d/system-auth
++ password required pam_unix.so md5 remember=10 use_authtok
```
不过此时 `/etc/security/opasswd` 文件因为记录了 N 个使用过的密码，所以安全性就十分关键了，所以要确保该文件只能被 root 用户读取和编辑：
---
## PAM身份验证安全配置实例
### 用户设置的密码不能与过去3次内的密码重复
修改 `/etc/pam.d/system-auth`, 增加 pam_unix.so 的参数，如下：
```
vim /etc/pam.d/system-auth
......
password    sufficient    pam_unix.so md5 shadow nullok try_first_pass use_authtok remember=3
```
### 用户设置的密码必须至少包含5个数字和3个特殊符号
修改 `/etc/pam.d/system-auth`，在 password 使用 pam_cracklib.so 设置的最后附加 dcredit=-5 ocredit=-3
```
vim /etc/pam.d/system-auth
......
password    requisite     pam_cracklib.so try_first_pass retry=3 dcredit=-5 ocredit=-3
```
### 限制kevin用户最多同时登陆4个
这需要 pam_limits.so 模块。由于 `/etc/pam.d/system-auth` 中，默认就会通过 pam_limits.so 限制用户最多使用多少系统资源.
```
cat /etc/pam.d/system-auth|grep limits.so
session     required      pam_limits.so
```
因此只需要在 `/etc/security/limits.conf` 中加入以下内容:
```