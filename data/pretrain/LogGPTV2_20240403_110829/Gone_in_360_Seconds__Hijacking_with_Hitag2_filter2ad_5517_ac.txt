∀i ∈ [0,31] .
Finally, the adversary can compute the secret key as fol-
lows
ki = a32+i
k16+i = a48+i ⊕ nRi
∀i ∈ [0,15]
∀i ∈ [0,31] .
4 Hitag2 weaknesses
This section describes three weaknesses in the design of
Hitag2. The ﬁrst one is a protocol ﬂaw while the last two
concern the cipher’s design. These weaknesses will later
be exploited in Section 5.
4.1 Arbitrary length keystream oracle
This weakness describes that without knowledge of the
secret key, but by having only one authentication at-
tempt, it is possible to gather an arbitrary length of key-
stream bits from the transponder. Section 3.3 describes
the reader commands that can modify or halt a Hitag2
transponder. As mentioned in Deﬁnition 3.1 it is pos-
sible to extend the length of such a command with a
multiple of ﬁve bits. A 10-bit command can have an op-
tional number of redundancy messages r so that the total
bit count of the message is 10 + 5r bits. Due to power
and memory constraints, Hitag2 seems to be designed
o
o


o
o




















































to communicate without a send/receive buffer. There-
fore, all cipher operations are performed directly at ar-
rival or transmission of bits. Experiments show that a
Hitag2 transponder successfully accepts encrypted com-
mands from the reader which are sent with 1000 redund-
ancy messages. The size of such a command consists of
10 + 5 × 1000 = 5010 bits.
Since there is no challenge from the transponder it
is possible to replay any valid {nR}{aR} pair to the
transponder to achieve a successful authentication. After
receiving aT , the internal state of the transponder is ini-
tialized and waits for an encrypted command from the
reader as deﬁned in Figure 9. Without knowledge of the
keystream bits b96b97 . . . and onwards, all possible com-
binations need to be evaluated. A command consist of
at least 10 bits, therefore there are 210 possibilities. Each
command requires a 3-bit parameter containing the block
number. Both read and read receive a 32-bit response,
while the write and halt have a different response length.
Hence, when searching for 10-bit encrypted commands
that get a 32-bit response there are exactly 16 out of the
210 values that match. On average the ﬁrst read com-
mand is found after 32 attempts, the complement of this
read and its parameters are a linear difference and there-
fore take only 15 attempts more.
cmd(11,0,0) ⊕ b96 . . . b105
−−−−−−−−−−−−−−−−−−−→
id ⊕ b106 . . . b137
←−−−−−−−−−−−−−−−−−−−
Figure 13: Read id without redundancy messages
One of the 16 guesses represents the encrypted bits of
the read command on the ﬁrst memory block. This block
contains the id which is known plaintext since it is trans-
mitted in the clear during the authentication. Therefore,
there is a guess such that the communicated bits are equal
to the messages in Figure 13.
With the correct guess, 40 keystream bits can be re-
covered. This keystream is then used to encrypt a slightly
modiﬁed read command on block 0 with six redundancy
messages, as explained in Section 3.3. The transpon-
der responds with the next 32-bit of keystream which
are used to encrypt the identiﬁer as shown in Figure
14. Hence the next 30 keystream bits were retrieved us-
ing previously recovered keystream and by extending the
read command.
This operation can be repeated many times. For ex-
ample, using the recovered keystream bits b96 . . .b167 it
is possible to construct a 70-bit read command with 12
redundancy messages etc. In practice it takes less than 30
seconds to recover 2048 bits of contiguous keystream.
cmd(11,6,0) ⊕ b96 . . . b135
−−−−−−−−−−−−−−−−−−−→
id ⊕ b136 . . . b167
←−−−−−−−−−−−−−−−−−−−
Figure 14: Read id using 6 redundancy messages
4.2 Dependencies between sessions
Section 3.6 shows that at cipher state a 79 the cipher is
fully initialized and from there on the cipher only pro-
duces keystream. This shows that the 48-bit internal state
of the cipher is randomized by a reader nonce nR of only
32 bits. Consequently, at state a 79, only LFSR bits 16
to 47 are affected by the reader nonce. Therefore LFSR
bits 0 to 15 remain constant throughout different session
which gives a strong dependency between them. These
16 session persistent bits correspond to bits k0 . . . k15 of
the secret key.
4.3 Low degree determination of the ﬁlter
function
The ﬁlter function f : F48
2 → F2 consists of three build-
ing blocks fa, fb and fc arranged in a two layer structure,
see Figure 11. Due to this particular structure, input bits
a34 . . . a47 only affect the rightmost input bit of fc. Fur-
thermore, simple inspection of fc shows that in 8 out of
32 conﬁgurations of the input bits, the rightmost input
bit has no inﬂuence on the output of fc. In those cases
the output of fc is determined by its 4-leftmost input bits.
Furthermore, this means that with probability 1/4 the ﬁl-
ter function f is determined by the 34-leftmost bits of
the internal state. The following theorem states this pre-
cisely.
Theorem 4.1. Let X be a uniformly distributed variable
over F34
2 . Then
P[∀Y,Y ′ ∈ F14
2 : f (XY ) = f (XY ′)] = 1/4.
Proof. By inspection.
Deﬁnition 4.2. The function that checks for this property
P : F48
2 → F2 is deﬁned by
P(x0 . . . x47) = (0x84D7)i
where
i = fa(x2x3x5x6) fb(x8x12x14x15)
fb(x17x21x23x26) fb(x28x29x31x33).
Because P(x0 . . . x47) only depends on x0 . . . x33 we shall
overload notation and see P(·) as a function F34
2 → F2,
writing P(x0 . . .x47) as P(x0 . . . x33014).
8
5 Attacks
This section describes three attacks against Hitag2. The
ﬁrst attack is straightforward and grants an adversary
read and write access to the memory of the transponder.
The cryptanalysis described in the second attack recovers
the secret key after brieﬂy communicating with the car
and the transponder. This attack uses a general technique
that can be applied to other LFSR-like stream ciphers.
The third attack describes a custom cryptanalysis of the
Hitag2 cipher. It only requires a few authentication at-
tempts from the car and allows an adversary to recover
the secret key with a computational complexity of 235 op-
erations. The last two attacks allow a trade-off between
time/memory/data and time/traces respectively. For the
sake of simplicity we describe these attacks with con-
crete values that are either optimal or what we consider
‘sensible’ in view of currently available hardware.
5.1 Malleability attack
This attack exploits the arbitrary length keystream or-
acle weakness described in Section 4.1, and the fact that
during the authentication algorithm the transponder does
not provide any challenge to the reader. This notorious
weaknesses allow an adversary to ﬁrst acquire keystream
and then use it to read or write any block on the card with
constant communication and computational complexity.
After the recovery of the keystream bits b96 . . .b137 as
shown in Figure 13 an adversary can dump the complete
memory of the transponder which includes its password.
Recovery of the keystream and creating a memory dump
from the transponder takes in total less than one second
and requires only to be in proximity distance of the vic-
tim. This shows a similar scenario to [22] where Garcia
et al. show how to wirelessly pickpocket a MIFARE
Classic card from the victim.
The memory blocks where the cryptographic key is
stored have an extra optional protection mechanism.
There is a one time programable conﬁguration bit which
determines whether these blocks are readable or not.
If the reader tries to read a protected block, then the
transponder does not respond. In that case the adversary
can still use the attacks presented in Section 5.2 and Sec-
tion 5.3. If the transponder is not correctly conﬁgured,
it enables an adversary to read all necessary data to start
the car.
5.2 Time/memory tradeoff attack
This attack is very general and it can be applied to any
LFSR-based stream cipher as long as enough contigu-
ous keystream is available. This is in fact the case with
Hitag2 due to the weakness described in Section 4.1. It
9
sucn(s) =
(di · si) .
47
Mi=0
extends the methods of similar time/memory tradeoffs
articles published over the last decades [3, 6, 7, 11, 25,
38]. This attack requires communication with the reader
and the transponder. The next proposition introduces a
small trick that makes it possible to quickly perform n
cipher steps at once. Intuitively, this proposition states
that the linear difference between a state s and its n-th
successor is a combination of the linear differences gen-
erated by each bit. This will be later used in the attack.
Proposition 5.1. Let s be an LFSR state and n ∈ N. Fur-
thermore, let di = sucn(2i) i.e., the LFSR state that res-
ults from running the cipher n steps from the state 2i.
Then
To perform the attack the adversary A proceeds as fol-
lows:
is an LFSR state and ks ∈ F48
1. Only once, A builds a table containing 237 entries.
Each entry in the table is of the form hks,si where
s ∈ F48
2 are 48 bits
2
of keystream produced by the cipher when running
from s. Starting from some state where s 6= 0,
the adversary generates 48 bits of keystream and
stores it. Then it uses Theorem 5.1 to quickly
jump n = 211 cipher states to the next entry in the
table. This reduces the computational complexity
of building the table from 248 to 48 × 237 = 242.5
cipher ticks. Moreover, in order to improve lookup
time the table is sorted on ks and divided into
224 sub-tables encoded in the directory structure
like /ks_byte1/ks_byte2/ks_byte3.bin
where each ks_byte3.bin ﬁle has only 8 KB.
The total size of this table amounts 1.2 TB.
2. A emulates a transponder and runs an authentication
attempt with the target car. Following the authen-
tication protocol, the car answers with a message
{nR}{aR}.
3. Next, the attacker wirelessly replays this message
to the legitimate transponder and uses the weakness
described in Section 4.1 to obtain 256 bytes of key-
stream ks0 . . . ks2048. Note that this might be done
while the key is in the victim’s bag or pocket.
4. The adversary sets i = 0.
5. Then it looks up (in logarithmic time) the keystream
ksi . . . ksi+47 in the table from step 1.
6. If the keystream is not in the table then it increments
i and goes back to step 5. If there is a match, then
the corresponding state is a candidate internal state.
A uses the rest of the keystream to conﬁrm is this is
the internal state of the cipher.
7. Finally, the adversary uses Theorem 3.7 to rollback
the cipher state and recover the secret key.
Complexity and time.
In step 1 the adversary needs to
pre-compute a 1.2 TB table which requires 242.5 cipher
ticks, which is equal to 237 encryptions. During gener-
ation, each entry is stored directly in the corresponding
.bin ﬁle as mentioned before. Each of these 8 KB ﬁles
also needs to be sorted but it only takes a few minutes
to sort them all. Computing and sorting the whole table
takes less than one day on a standard laptop. Steps 2-3
take about 30 seconds to gather the 256 bytes of key-
stream from the transponder. Steps 4-6 require (in worst
case) 2000 table lookups which take less than 30 seconds
on a standard laptop. This adds to a total of one minute
to execute the attack from begin to end.
5.3 Cryptanalytic attack
A combination of the weaknesses described in Section
4.2 and 4.3 enable an attacker to recover the secret key
after gathering a few authentication attempts from a car.
In case that identiﬁer white-listing is used as a second-
ary security measure, which is in fact the case for all the
cars we tested, the adversary ﬁrst needs to obtain a valid
transponder id, see Section 7.5.
The intuition behind the attack is simple. Suppose that
an adversary has a guess for the ﬁrst 34 bits of the key.
One out of four traces is expected to have the property
from Theorem 4.1 which enables the adversary to per-
form a test on the ﬁrst bit of {aR}. The dependencies
between sessions described in Section 4.2 allow the at-
tacker to perform this test many times decreasing drastic-
ally the amount of candidate (partial) keys. If an attacker
gathers 136 traces this allows her (on average) to perform
136/4 = 34 bit tests, i.e. just as much as key bits were
guessed. For the small amount of candidate keys that
pass these tests (typically 2 or 3), the adversary performs
an exhaustive search for the remaining 14 bits of the key.
A precise description of this attack follows.
1. The attacker uses a transponder emulator (like the
Proxmark III) to initiate 136 authentication attempts
with the car using a ﬁxed transponder id.
In this
way the attacker gathers 136 traces of the form
{nR}{aR}. Next the attacker starts searching for
the secret key. For this we split the key k in three
parts k = ~kˆk~k where ~k = k0 . . . k15, ˆk = k16 . . . k33, and
~k = k34 . . . k47.
2. for each ~k = k0 . . . k15 ∈ F16
2
table T~k containing entries
the attacker builds a
hy ⊕ b0 . . . b17,b32, ~kyi
for all y ∈ F18
2 such that P( ~ky014) = 1. Note that the
expected size of this table is 218 × 1/4 = 216 which
easily ﬁts in memory.
3. For each ˆk = k16 . . . k33 ∈ F18
2