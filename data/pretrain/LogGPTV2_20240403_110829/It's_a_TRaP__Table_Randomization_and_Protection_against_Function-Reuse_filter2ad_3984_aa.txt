title:It's a TRaP: Table Randomization and Protection against Function-Reuse
Attacks
author:Stephen J. Crane and
Stijn Volckaert and
Felix Schuster and
Christopher Liebchen and
Per Larsen and
Lucas Davi and
Ahmad-Reza Sadeghi and
Thorsten Holz and
Bjorn De Sutter and
Michael Franz
It’s a TRaP: Table Randomization and Protection
against Function-Reuse Attacks
Stephen Crane∗, Stijn Volckaert†, Felix Schuster‡, Christopher Liebchen§, Per Larsen∗,
Lucas Davi§, Ahmad-Reza Sadeghi§, Thorsten Holz‡, Bjorn De Sutter†, Michael Franz∗
∗University of California, Irvine
†Universiteit Gent, Belgium
‡HGI, Ruhr-Universität Bochum, Germany
§CASED, Technische Universität Darmstadt, Germany
ABSTRACT
Code-reuse attacks continue to evolve and remain a severe
threat to modern software. Recent research has proposed
a variety of defenses with diﬀering security, eﬃciency, and
practicality characteristics. Whereas the majority of these
solutions focus on speciﬁc code-reuse attack variants such as
return-oriented programming (ROP), other attack variants
that reuse whole functions, such as the classic return-into-libc,
have received much less attention. Mitigating function-level
code reuse is highly challenging because one needs to distin-
guish a legitimate call to a function from an illegitimate one.
In fact, the recent counterfeit object-oriented programming
(COOP) attack demonstrated that the majority of code-reuse
defenses can be bypassed by reusing dynamically bound func-
tions, i.e., functions that are accessed through global oﬀset
tables and virtual function tables, respectively.
In this paper, we ﬁrst signiﬁcantly improve and simplify
the COOP attack. Based on a strong adversarial model, we
then present the design and implementation of a compre-
hensive code-reuse defense which is resilient against reuse of
dynamically-bound functions. In particular, we introduce
two novel defense techniques: (i) a practical technique to
randomize the layout of tables containing code pointers re-
silient to memory disclosure and (ii) booby trap insertion
to mitigate the threat of brute-force attacks iterating over
the randomized tables. Booby traps serve the dual purpose
of preventing fault-analysis side channels and ensuring that
each table has suﬃciently many possible permutations. Our
detailed evaluation demonstrates that our approach is secure,
eﬀective, and practical. We prevent realistic, COOP-style
attacks against the Chromium web browser and report an av-
erage overhead of 1.1% on the SPEC CPU2006 benchmarks.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—In-
vasive Software; D.3.4 [Programming Languages]: Pro-
cessors—Compilers, Code generation
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813682.
General Terms
Security; Languages; Performance
Keywords
Code reuse; Exploits; Mitigations; COOP; C++; Compilers;
Diversity; Randomization
1. MOTIVATION
Memory corruption vulnerabilities due to incorrect mem-
ory management have plagued software written in low-level
languages for more than three decades. Many defenses have
been proposed in the literature, but few meet the require-
ments for industry adoption [37]. Data Execution Prevention
(DEP) is one of the few successful defenses that has seen
widespread adoption. As a result, adversaries quickly shifted
from injecting malicious code to reusing legitimate code.
Code-reuse attacks, such as return-into-libc (RILC) [26] or
return-oriented programming (ROP) [29], are far harder to
mitigate with reasonable cost, and remain an active research
topic.
One eﬀective and eﬃcient line of defense relies on random-
ization. The widespread address space layout randomization
(ASLR) technique, for instance, randomizes the base ad-
dresses of various memory regions. However, adversaries
can often exploit a memory corruption vulnerability to dis-
close the code layout, and rewrite the code-reuse payload
accordingly. Initially, the problem seemed to be the coarse-
grained nature of ASLR. This motivated many ﬁner-grained
code randomization schemes (systematized by Larsen et al.
[22]). However, Snow et al. [35] demonstrated just-in-time
code reuse (JIT-ROP) that exploits memory disclosure and
malicious scripting to read the randomized code layout and
construct a compatible code-reuse payload on the ﬂy. Just-in-
time code reuse can be countered by preventing the adversary
from directly reading the code layout [3, 17]. However, pre-
venting reading of code pages with execute-only memory is
insuﬃcient, because the adversary can disclose the code lay-
out indirectly by reading code pointers on data pages. Crane
et al. [11] presented Readactor, a security framework against
all types of JIT-ROP attacks. Their solution allows for hiding
code pointers and just-in-time compiled code from adver-
saries. However, very recently Schuster et al. [31] describe a
new type of attack called counterfeit object-oriented program-
ming (COOP), which reuses whole functions by abusing the
C++ virtual dispatch mechanism. Targets of C++ virtual
function calls and calls to dynamically linked functions are
243looked up in various tables; they are thus also referred to as
dynamically-bound functions.
At a high level, COOP attacks are conceptually similar to
return-into-libc (RILC) attacks, but reuse virtual functions
rather than functions from procedure linkage tables. These
function reuse attacks remain unaﬀected by sophisticated
JIT-ROP defenses such as Readactor [11] because these de-
fenses do not introduce randomness into the various dynamic
dispatch mechanisms found in today’s software. Moreover,
function reuse attacks are particularly hard to mitigate be-
cause legitimate function calls are hard to distinguish from
malicious ones.
Goals and contributions: Although many exploit mit-
igations can be bypassed [6, 30, 31, 35], more advanced
defense techniques are set to enter practice in the near future.
Prominent examples of these security enhancing mechanisms
are control-ﬂow integrity [1], code-pointer integrity [21], and
ﬁne-grained code randomization [22]. While these defenses
raise the bar to exploitation relative to current countermea-
sures, they diﬀer with respect to performance, practicality,
and security. Moreover, the COOP attack bypasses all pub-
lished binary-only control-ﬂow integrity (CFI) systems. In
light of this attack and since software diversity is known to
be eﬃcient [14, 19], practical, and comprehensive [11], the
goal of this paper is to tackle the gaps in existing random-
ization approaches by preventing function reuse attacks such
as COOP and RILC. Speciﬁcally, we extend state-of-the-art
code randomization defenses by (i) permuting tables contain-
ing code pointers while preserving program semantics, (ii)
inserting booby traps into these tables to mitigate probing
attacks, and (iii) transforming tables so we can use execute-
only page permissions to prevent memory disclosure. Our
main contributions are:
• Resilience to Function-Reuse Attacks We present
Readactor++, the ﬁrst probabilistic defense against
function reuse attacks such as COOP and RILC that
are not mitigated by existing code randomization tech-
niques. We designed our defense under the challenging
and realistic assumption that an adversary can read
and write arbitrary memory.
• Novel Techniques We introduce compile-time and
load-time transformations that work in concert to trans-
form and randomize virtual function tables and dy-
namic linker tables.
• Realistic and Extensive evaluation We provide a
full-ﬂedged prototype of Readactor++ that protects
applications against function reuse attacks and present
the result of our detailed evaluation. We report an
additional average overhead of 1.1% on the compute-
intensive SPEC CPU2006 benchmarks over existing
execute-only systems. We also show that Readactor++
scales to programs as complex as Google’s popular
Chromium web browser.
2. TECHNICAL BACKGROUND
To provide the necessary background for the subsequent
discussion, we brieﬂy review the relevant implementation
aspects of function dispatch and oﬀensive techniques that
reuse whole functions.
2.1 Virtual Function Calls
Object-oriented languages such as C++ and Objective-C
support polymorphism; the target of a function call depends
on the type of the object that is used to make the call. C++
supports object orientation based on classes, which are simply
user-deﬁned data types with ﬁelds and functions (also called
methods). Classes can be extended through inheritance of
methods and ﬁelds. In contrast to many modern languages,
C++ supports multiple inheritance.
The C++ compiler generates diﬀerent call mechanisms for
invoking a receiving object’s method depending on whether
the callee is a virtual function. A subclass can override func-
tions marked as virtual in its base class(es). Non-virtual calls
are simply compiled to a static, direct call to the correspond-
ing function. For virtual function calls however, the exact
callee depends on the type of the object that receives the
call at runtime. Therefore, at virtual function call sites, the
program ﬁrst retrieves a pointer to a virtual function table
(vtable) from the receiver object and then indexes into this
table to retrieve a function pointer to the correct callee. As
explained in Section 2.3, adversaries abuse indirect calls to
virtual functions by corrupting objects to point to a vtable
of their choice, thus controlling the call destination.
2.2 Dynamic Linking
Dynamic linking allows programmers to group functions
and classes with related functionality into a single module.
Programs can share dynamically linked modules, which sim-
pliﬁes maintenance and reduces code duplication both on
disk and in memory.
Symbols are the basic building blocks of dynamic linking.
Each module deﬁnes a set of symbols that it exposes to other
modules through a symbol table. These symbols typically
correspond to exported functions and variables. A module
can refer indirectly to symbols which are not deﬁned within
the module itself. Symbol addresses in the table are resolved
at run time by the dynamic linker. Many binary ﬁle formats
support lazy binding. With lazy binding, the addresses of
external symbols are resolved when they are ﬁrst used. Lazy
binding can improve the startup time of some applications,
which is why some binary formats enable it by default.
The tables that support dynamic linking are an ideal target
for attackers. Computed symbol addresses for instance are
usually kept in tables in writable (and readable) memory.
Furthermore, to support lazy binding, the meta-data nec-
essary to resolve a speciﬁc symbol’s address is also kept in
readable memory at all times. These sources of information
can be of use in an information leakage attack.
In ELF binaries, several speciﬁc dynamic linking tables are
prone to information leakage. Attackers can collect function
addresses from the Global Oﬀset Table (GOT). The GOT
stores the addresses of global and static elements of the
program, including the addresses of all imported functions
for use in the Procedure Linkage Table (PLT). The PLT
on the other hand contains a set of trampolines that each
correspond to a code pointer in the GOT. An attacker can
infer the layout of both the GOT and the PLT tables from
the relocation, symbol and string tables in the binary.
2.3 Exploitation and Code Reuse
Memory corruption is a well-known way to exploit vul-
nerabilities in programs written in unsafe languages [37].
A buﬀer overﬂow is a type of spatial memory corruption
whereas use-after-free is a type of temporal memory corrup-
tion. Adversaries use memory corruption to inject code or
244data, to read memory contents, and to hijack the execution
by overwriting control-ﬂow data.
Because DEP prevents code injection in most programs,
code-reuse attacks are most common. Initially, adversaries
reused code from linked libraries such as libc [26]. Therefore,
this class of attacks is called return-into-libc (RILC), even
when the reused functions are from another library. The
simplest RILC attack uses memory corruption to (i) prepare
for a function call by writing the arguments on the stack
and (ii) redirect the control ﬂow to a dynamically linked
function such as system() in libc. In case the adversary
wants to perform more than one call to a library function,
the stack needs to be prepared for the next call. To do so,
adversaries reuse short instruction sequences inside functions,
called gadgets. Attacks that chain together gadgets whose
last instruction is a return (or another free branch [7, 8]) are
now known as ROP attacks [29].
Conventional ROP attacks are stack-oriented because they
require the return instruction to read the next gadget address
from the corrupted stack [29]. Since stack-based vulnera-
bilities are rare, attackers shifted to heap-oriented ROP.
However, these attacks require a heap-based vulnerability
along with a stack pivot sequence which sets the stack pointer
to the start of the injected return-oriented payload on the
heap. The former is typically achieved by vtable hijacking
attacks [28]. As described above, a vtable holds pointers
to virtual functions. While the function pointers are stored
in read-only memory, the vtable pointer itself is stored in
writable memory. Hence, an adversary can inject a mali-
cious vtable, overwrite the original vtable pointer, write the
return-oriented payload, and wait until the next indirect call
dereferences the vtable pointer to invoke a virtual function.
The correct virtual function is not called, due to the vtable
pointer overwrite, but instead the code referenced by the
previously injected malicious vtable is executed. In many
exploits, the ﬁrst invoked sequence is the aforementioned
stack pivot, which sets the stack pointer to the start of the
injected return-oriented payload.
The more recent COOP code-reuse technique described by
Schuster et al. [31] starts by hijacking the control ﬂow, as
in other code-reuse attacks. Instead of directing the control
ﬂow to a chain of ROP gadgets, COOP attacks invoke a
sequence of virtual function calls on a set of counterfeit C++
objects. This carefully crafted exploit payload is injected
in bulk into a memory region that the attacker can access.
Notice that constructing this payload requires knowledge of
the exact layout of the relevant objects and vtables.
Whereas ROP relies on return instructions to transfer
control from one gadget to another, COOP uses a so-called
main loop gadget (or ML-G), which is deﬁned as follows: “A
virtual function that iterates over a container [...] of pointers
to C++ objects and invokes a virtual function on each of these
objects” [31]. In addition, there are certain platform-speciﬁc
requirements that a virtual function must meet in order to