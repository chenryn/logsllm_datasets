# 前言
本文是Asia Blackhat 17年上一篇译文，链接：[Dig Into the Attack Surface of PDF and Gain 100+
CVEs in 1 Year](https://www.blackhat.com/docs/asia-17/materials/asia-17-Liu-Dig-Into-The-Attack-Surface-Of-PDF-And-Gain-100-CVEs-In-1-Year-wp.pdf "Dig
Into the Attack Surface of PDF and Gain 100+ CVEs in 1 Year")  
文中以PDF的漏洞挖掘为基础，提供了漏洞挖掘中作者所总结的一些思路。比如：如何去寻找目标的攻击面。译者觉得如何寻找攻击面，怎么提高fuzz效率这些点，对自己很有启发，所以索性将整个文章翻译，与大家分享。
# 摘要
可移植文档格式（a.k.a.
PDF）是世界上使用最广泛的文件格式之一，这种复杂的文件格式也暴露了一个巨大的潜在攻击面，这对我们来说非常重要。在去年，通过深入挖掘PDF的攻击面并高效地fuzz很流行的PDF阅读器。作者在世界上最流行的PDF阅读器中发现了近150个漏洞，包括Adobe
Acrobat and Reader，Foxit Reader，Google Chrome，Windows PDF Library， OS X
Preview 和 Adobe Digital Editions。 供应商修复了100多个漏洞并为它们分配了CVE编号。  
以下部分总结了本文：
  * 简介
  * 攻击面
  * 测试用例
  * fuzzing 技巧
  * 结果
  * 参考文献
# 1.简介
自Adobe于1993年发布完整的PDF规范以来，PDF已成为世界上更安全可靠的信息交换的标准[1]。但是，这种复杂的文件格式也会暴露出一个巨大的潜在攻击面，这对我们来说非常重要。有一些关于PDF安全性的研究，其中一些列出如下：
  * Nicolas Grégoire: Dumb fuzzing XSLT engines in a smart way [2]
  * Zero Day Initiative: Abusing Adobe Reader’s JavaScript APIs [3]
  * Sebastian Apelt: Abusing the Reader’s embedded XFA engine for reliable Exploitation [4]
但是，这些研究中的每一项仅涵盖PDF的单个攻击面。更重要的是，从未提及基本但最常用的PDF特性，如图像和字体。由于PDF是一种复杂的格式，因此可以在这里完成大量工作。通过深入研究PDF的攻击面，我在各种PDF阅读器中发现了近150个漏洞。我的工作主要集中在Adobe
Acrobat and Reader上，并且在这个产品中发现了大多数漏洞。但是，这并不意味着这个产品比其他PDF阅读器更容易受到攻击。
# 2.攻击面
如果你想知道攻击面是什么，首先要问自己的问题是如何找到攻击面。 在这里，我总结了四种可能的方法来找到攻击面。
## 2.1 标准文档
PDF的ISO标准是ISO 32000-1：2008 [5]，文档的副本可以从Adobe的网站[1]免费下载。
该文档有756页，几乎描述了可移植文档格式本身的所有内容。 但是，本文档中未详细描述某些功能，例如JavaScript，XFA（XML Forms
Architecture），FormCalc等。  
以下是一些有用的参考资料：
  * JavaScript for Acrobat API Reference [6]
  * XML Forms Architecture (XFA) Specification [7]
  * FormCalc User Reference [8]
此外，PDF支持嵌入外部文件，如字体（TrueType，Type0，Type1，Type3等），图像（Jpeg2000，Jpeg，Png，Bmp，Tiff，Gif，Jbig2等），XML（XSLT等）。
本文不讨论这些文件的标准文档。
## 2.2 安全公告
密切关注安全公告是观察安全趋势状态的好方法。 最重要的是，我们可以知道哪个组件存在缺陷。 以下是值得一读的公告：
  * Zero Day Initiative’s Advisory [9]
  * Chromium Issue Tracker [10]
  * Adobe Security Bulletins and Advisories [11]
## 2.3 安装文件
对于闭源软件，查找攻击面的一种好方法是调查安装目录下的文件，尤其是可执行文件。 为了弄清楚特定可执行文件的功能，我们可以关注以下信息。
  * 文件名
  * 属性
  * 内部字符串，包括ASCII和Unicode字符串
  * 功能名称，包括内部符号和导出功能
  * 版权信息  
例如，通过分析文件的属性，我们可以得出结论，Adobe Reader安装目录中的文件JP2KLib.dll负责解析JPEG2000图像。
下图显示了该文件的属性页：  
下图显示了部分文件在Adobe Acrobat and Reader的安装目录中的角色：  
## 2.4 开源项目
找到攻击面的另一种方法是调查类似的开源项目。 PDFium是一个著名的开源PDF渲染引擎，它基于Foxit
Reader的技术，由Chromium的开发人员维护。  
事实上，通过比较PDFium的源代码和Foxit Reader的反汇编代码，我们可以在PDFium和Foxit Reader之间找到许多类似的代码。  
我们可以通过分析PDFium的源代码来尝试找到攻击面。 但对于PDFium，另一种方法是分析libFuzzer组件。 目前，PDFium在“testing
/ libfuzzer”目录中有19个官方fuzzer[12]。 下图显示了这些fuzzer的详细信息：  
# 3.测试用例
测试用例或种子文件在fuzz过程中起着重要作用。 对于传统的基于突变的模糊测试器，更多测试用例意味着更多可能的代码覆盖率，这最终意味着更多可能的崩溃。
要收集更多测试用例，在大多数情况下编写爬虫是一个可选项，但有一些替代方法。 在这里，我总结了两种可能的方法来收集测试用例。
## 3.1 基于代码覆盖测试用例的模糊器
American fuzzy lop（a.k.a AFL）和libFuzzer是两个着名的基于代码覆盖的模糊器。 对于AFL
fuzzer，单个和小型测试用例足以驱动模糊测试过程。
对于libFuzzer，它通常使用一组最小化的测试用例作为输入数据，但即使没有任何初始测试用例，它仍然可以工作。  
这两个模糊器的共同特点是它们将生成大量测试用例以获得更高的代码覆盖率。 那么为什么不重用AFL或libFuzzer生成的测试用例呢？
为了实现这一目标，我们必须使用AFL或libFuzzer来模糊开源库或类似的库。 下图显示了此方法的过程:  
## 3.2 开源项目的测试套件
收集测试用例的另一种方法是重用开源项目的测试套件。 一般来说，流行的开源项目还维护着一个包含大量有效和无效文件的测试套件存储库。
某些测试用例可能会直接崩溃旧版本的二进制文件。 使用测试套件作为模糊器的种子文件是个好主意。 对于不常用的文件格式，甚至很难从搜索引擎中抓取一些。