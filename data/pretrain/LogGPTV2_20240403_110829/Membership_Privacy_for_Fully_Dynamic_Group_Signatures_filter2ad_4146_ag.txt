2 ) = e(w1, gγ
2 , gβ
2 ).
We have shown that |Pr[S2] − Pr[S1]| ≤ AdvddhA (λ).
GAME3: Choose u∗ ←$ {1, . . . , u} and abort if info
∗
τ is not the output of the u∗-th call to the
UpdateGroup oracle.
Because of the changes made by the previous game we know that the adversary can only use
epoch information outputted by this oracle. Thus, we have Pr[S2] = u · Pr[S3].
GAME4: We
but
∗
τ , m∗, Σ∗) = accept. Informally, we exclude the case that the adversary creates a
GS.Vf(gpk, info
new user from outside the group, i.e. a new SPS-EQ signature.
abort
case
in
=
∗
τ , reg, m∗, Σ∗)
GS.Trace(gpk, tsk, info
⊥
We will show that any adversary A returns a forgery for which we abort, can be used to break
the existential unforgeability of the SPS-EQ signature scheme. The reduction R algorithm on input
of the public key pkSPS performs as follows. It ﬁrst sets infou∗ = (pkSPS, SignDS(skDS, pkSPS), Active).
For every active user i is this epoch, Active contains a tuple (Enc(pki
SPS is a
signature generated for R by the signing oracle on input SFPK.ChgPK(pki
SFPK, ki). It then runs the
system for A according to description.
∗
∗
∗
After some interactions, the adversary returns (m∗, Σ∗ = (pk
SFPK, σ∗
SFPK), info
τ =
∗
∗
SPS, σ∗
(pk
)). Note that because of the changes in the previous games, we know that pk
SPS =
pkSPS, i.e. the forgery is created for a epoch that uses our challenged SPS-EQ public key to certify
members. Finally, the reduction R returns (pk
∗
SFPK, σ∗
SPS) as a valid forgery. It is easy to see that this
is a valid solution. Note that since opening failed, this means that the trusted authority extracted
witness w = (pkSFPK, r∗, 1G1 , 1G2) and pkSFPK is not a public key of any honest user. Moreover, since
∗
SFPK]R it follows that this is in fact a valid forgery.
pkSFPK is canonical representative of [pk
We conclude that |Pr[S4] − Pr[S3]| ≤ Adv(cid:96),euf-cma
SPS), where σi
SPS, Π∗
Enc, ki), σi
DS, Active
SFPK, Sig
∗
SPS-EQ,A(λ).
24
Finally, we will show hat any adversary A that has non-negligible advantage in winning trace-
ability experiment in GAME4 can be used by a reduction algorithm R to break the existential
unforgeability of the SFPK scheme for a public key pkSFPK.
The reduction simulator works as follows. It generates all values according to description but
for i ←$
[n] the reduction answers the i-th queries of the adversary to AddU by setting upk[] =
(pkSFPK, pkEnc) for some (skEnc, pkEnc) ←$ KeyGenEnc(1λ). The reduction aborts if at some point the
adversary asks for the group secret key of this member.
Then it returns ⊥ if for all tuples (E, σSPS) in Active the decryption k ←$ Dec(E, skEnc) fails. R chooses
random coins r ←$ coin, randomizes the ﬂexible public key pk
SFPK ←$ SFPK.ChgPK(pkSFPK, r) and
(cid:48)
SPS ←$ SPS.ChgRep(pkSPS, pkSFPK, σSPS, r · k−1). It then creates a proof ΠSFPK for the
the signature σ(cid:48)
statement:
To answer signing queries Sign(i, m, τ ) for this member, the reduction parses infoτ = (pkSPS,·, Active).
x = { ∃pkSFPK,r,w1,w2 SFPK.ChgPK(pkSFPK, r) = pk
SFPK ∧
(cid:48)
pkSFPK is a canonical representative ∨
e(w1, K2) = e(w2, g2) }
SPS||ΠSFPK), r),
∗
DS, Active
using witness w = (pkSFPK, r, 1G1, 1G2 ). It then uses its own signing oracle O2((m||τ||pk
SFPK||σ(cid:48)
(cid:48)
(cid:48)
SFPK, σ(cid:48)
receiving signature SigSFPK. Finally, it outputs Σ = (pk
SPS, ΠSFPK, SigSFPK). Note that since
values required to perform the above computations are known to R, it can eﬃciently compute valid
group signatures for this member.
Finally, A outputs a valid group signature (m∗, Σ∗ = (pk
∗
∗
∗
SPS, Π∗
SFPK, σ∗
SFPK), info
SFPK, Sig
τ =
)) and the reduction algorithm outputs ((m∗||τ∗||pk
SFPK||σ∗
SPS||Π∗
∗
∗
∗
SPS, σ∗
SFPK), Sig
(pk
SFPK)
∗
SFPK and pkSFPK are in the same equiva-
as a valid SFPK forgery. Note that this is only true if pk
∗
lence class. By the changes made in the previous games we know that pk
SFPK is in a relation with
a public key of an honest user and with probability 1/n we guessed the correct member for which
∗
Trace(m∗, Σ∗, info
τ ) = i and we have set his public key to pkSFPK. Note that also in such a case
we do not have to worry about a corruption query for this member, since the forgery must be for
non-corrupted users. We conclude that since m∗ was never queried previously, the reduction also
never used the preﬁx m∗ in its oracle queries.
In the end we have:
Pr[S0] ≤ u ·(cid:16)
n · Adveuf−cma
A,SFPK (λ) + Adv(cid:96),euf-cma
SPS-EQ,A(λ)
(cid:17)
+ Adveuf−cma
A,DS
(λ) + AdvddhA (λ).
Theorem 4 (Anonymity). Our group signature construction is anonymous if the decisional
Diﬃe-Hellman assumption holds in G2, the SPS-EQ signature scheme perfectly adapts signatures,
the SFPK scheme is adaptively class-hiding with key corruption and strongly existential unforgeable,
the proof system used by signers is witness-indistinguishable and the proof system used by the tracing
authority is zero-knowledge.
Proof. We will use the game base approach. Let us denote by Si the event that the adversary wins
the anonymity experiment in GAMEi. Moreover, let n be the number of queries to the AddU oracle
∗
∗
∗
2, m∗) be the query made to the Challb oracle, which
made by the adversary and let (info
τ , uid
1, uid
∗
outputs Σ∗ = (pk
SFPK, σ∗
GAME0: The original experiment.
SPS, Π∗
∗
SFPK).
SFPK, Sig
25
GAME1: We abort in case the witness extracted inside the Trace oracle (by the GS.Trace algorithm)
is (·,·, w1, w2) such that w1 (cid:54)= 1G1 and w2 (cid:54)= 1G1 .
This change only decreases the adversary’s advantage by a negligible fraction. We will show that
we can use A to break the decisional Diﬃe-Hellman assumption in G2. Let (gα
2 ) be an instance
of this problem. We set K2 = gα
2 . Since we always have that e(w1, K2) = e(w2, g2), which follows
from the fact that the tracing authority can extract such a witness and implies that w2 = (w1)α.
Thus, we can return e(w2, gβ
2 ) = e(w1, gγ
2 ).
2 , gβ
2 , gγ
We have shown that |Pr[S1] − Pr[S0]| ≤ AdvddhA (λ).
GAME2: We now simulate the proof generated in GS.Trace by the tracing authority.
Obviously, we only lower the advantage of the adversary by a negligible fraction because of the
zero-knowledge property of this proof. Thus, we have |Pr[S2] − Pr[S1]| ≤ AdvzkA,ΠGS.Judge
GAME3: We now replace the way the proof Π∗
SFPK is computed. Instead of using witness w =
SFPK = SFPK.ChgPK(pkSFPK, pk) we use the witness w = (·,·, w1, wk
∗
(pkSFPK, r, 1G1, 1G2 ), where pk
1 )
for some w1 ←$ G1, k such that K2 = gk
2 and K2 is part of param.
(λ).
Note that until now we did not exclude the case that the adversary somehow randomizes the
challenged signature Σ∗ and queries it to the Trace oracle. This could be e.g. possible if the used
SFPK signatures would not be strongly existential unforgeable. Thus, we have to show that we can
still execute the Trace oracle as in an original execution. Fortunately, Π∗
SFPK is the only proof in the
system with this trapdoor witness (all other cases were excluded in GAME1) and if we extract this
value in the Trace oracle, we can return the correct identity. Note that in GAME2 we simulate the
proof created by the tracing authority, so we can create a valid proof without the correct values. It
follow that by witness-indistinguishability we have that |Pr[S3] − Pr[S2]| ≤ AdvwiA,ΠPPE
GAME4: We now change the way we compute σ∗
∗
change representation of an old signature, we compute the SPS-EQ signature directly on pk
SFPK.
SPS . Instead of using the SPS.ChgRep algorithm to
(λ).
Since the SPS-EQ signature scheme perfectly adapts signatures, we have Pr[S4] = Pr[S3]
GAME5: Given the experiments bit b, we choose index i ←$ [n] and abort if uidb does not correspond
to the user created in the i-th query of the adversary to AddU.
We have Pr[S4] = n · Pr[S5].
GAME6: Let pkSFPK be the SFPK public key of the user chosen in the previous game. We now
∗
instead of using pkSFPK to create pk
SFPK, we use a fresh key generated using KeyGenSFPK.
We will now show that any adversary A that can distinguish those games, can be used to brake
the weak class-hiding of the SFPK scheme. We will show how to build a reduction R that does
SFPK be the inputs given to R by the challenger in
(cid:48)
this. Let (sk0
SFPK) and pk
the adaptive class-hiding experiment. The reduction then sets pk0
SFPK as the i-th honest user SFPK
public key. All other key material for those users is constructed as described in the scheme. Now in
∗
∗
∗
2, m∗) to the Challb oracle, the reduction:
1, uid
τ , uid
order to answer the query (info
SFPK), (sk1
SFPK, pk0
SFPK, pk1
26
(cid:48)
∗
– sets pk
SFPK = pk
SFPK,
– computes σ∗
– computes Π∗
– asks its signing oracle for Sig
∗
and returns Σ∗ = (pk
SFPK, σ∗
SFPK it can
easily answer all corruption queries made by A. In the end A outputs a bit b, which is also returned
by R.
SPS as in GAME4,
SFPK as in GAME3,
SFPK under message m∗||τ∗||pk
SFPK||σ∗
∗
∗
SPS, Π∗
SFPK, Sig
SPS||Π∗
∗
SFPK). Note that since it knows sk0
SFPK,
SFPK and sk1
A,SFPK(λ).
SPS, Π(cid:48)
SFPK, Sig
∗
(cid:48)
SFPK) of the signature Σ∗ = (pk
SFPK, σ∗
It follow that we have |Pr[S6] − Pr[S5]| ≤ Advadaptc-h
We now argue that the only way the adversary A can break anonymity is by somehow creating
(cid:48)
a randomization Σ(cid:48) = (pk
SFPK, σ(cid:48)
SFPK,
∗
SFPK) and use Σ(cid:48) in a query to the Trace oracle. Since in GAME6 we changed the public key
Sig