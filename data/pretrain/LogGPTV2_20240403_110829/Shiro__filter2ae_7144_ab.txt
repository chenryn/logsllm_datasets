说实话，关于这个洞，我当时思考的修复方式是，好像只能是去屏蔽%3b这个字符了，感觉真的很无奈。
diff:[https://github.com/apache/shiro/compare/shiro-root-1.5.3…shiro-root-1.6.0](https://github.com/apache/shiro/compare/shiro-root-1.5.3...shiro-root-1.6.0)
发现确实新增[InvalidRequestFilter.java](https://github.com/apache/shiro/compare/shiro-root-1.5.3...shiro-root-1.6.0#diff-bd4bf9dfa4cc7521c708850ac5d397fee22b021ea09a3a91f7ce1587abc287d7)，但是具体作用不知道在哪里起的，
然后在这个文件被调用:
[support/spring/src/main/java/org/apache/shiro/spring/web/ShiroFilterFactoryBean.java](https://github.com/apache/shiro/compare/shiro-root-1.5.3...shiro-root-1.6.0#diff-c2ca6676fe2316741dba8f6005b165ad79d7c12d7e2d31f0c8883a55a03d77ff)
这个文件新增了一个`/**`匹配没有设置filter类型，用于解决失配的时候还是可以调用默认的过滤器
然后输入特殊字符的时候，过滤器会进行过滤，关于是如何进行过滤的，值得详细写一篇文章，这里我们只要知道它的修复方式，是做了特殊字符，存在就抛出400就行了。
`return !this.containsSemicolon(uri) && !this.containsBackslash(uri) &&
!this.containsNonAsciiCharacters(uri);`
## 0x6 CVE-2020-17510
###  0x6.1 漏洞简介
影响版本: shiro
                org.apache.shiro
                shiro-web
                1.6.0
                org.apache.shiro
                shiro-spring
                1.6.0
这个漏洞我建议spring-boot用2.4.5的，这个版本默认会开启全路径匹配模式。
> 当Spring
> Boot版本在小于等于2.3.0.RELEASE的情况下，`alwaysUseFullPath`为默认值false，这会使得其获取ServletPath，所以在路由匹配时相当于会进行路径标准化包括对`%2e`解码以及处理跨目录，这可能导致身份验证绕过。而反过来由于高版本将`alwaysUseFullPath`自动配置成了true从而开启全路径，又可能导致一些安全问题
###  0x7.3 漏洞演示
通杀版本:`/hello/%20`
高版本默认支持:`/hello/%2e/` 或者 `/hello/%2e`
其实这个洞，基于之前的%3B实现绕过的思路，其实很容易想到去Fuzz下的，看看除了%3B是不是还有其他字符可以在Shiro中造成失配，而Spring-boot可以正常匹配的，都不用去分析具体代码的，就可以拿到的一个ByPass。
但是这两种绕过方式其实非常不同的，出现在了两个不同地方的错误处理方式。
###  0x7.4 漏洞分析
**第一种绕过方式分析:**
断点打在`org.apache.shiro.web.util.WebUtils#getPathWithinApplication`
这里处理结果和前面一样，解码了所以变成了空格。
跟进这里看匹配，
很明显，这里和上次分析结果是一样的，最终还是因为`*`返回了false，否则True。
那么为什么会这样呢？ 那为什么`/hello/aa`这样就不行呢?
其实就是`StringUtils.tokenizeToStringArray`没有正确分割字符串导致的？ %20
应该是被当做空字符了，导致分割的数组长度=1，就会进入那个return false.
所以这里成功Bypass了Shiro的检测，最后让我们来看下Spring-boot是怎么处理的
断点:`org.springframework.web.servlet.DispatcherServlet#doDispatch`
逐步跟到:`org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#lookupHandlerMethod`
这里是根据`lookpath`进行匹配，没有直接被找到
下面进入用`RequestMapping`注册的列表来匹配:
这里继续进入匹配:
最终这个`org.springframework.util.AntPathMatcher#doMatch`进行了解析，和之前算法差不多，但是
`this.tokenizePath(path)`返回的结果是2包括%20,所以可以匹配成功,最终解析到了`/hello/{index}`
**第二种绕过方式分析:**
这个其实在分析cve-2020-13933的时候,我就考虑过这种方式去绕过(部分原理相同，利用默认去掉`/`造成的失配)，然后当时实践了，由于采取了低版本的spring-boot，默认没开启全路径匹配模式，导致我当时没成功。
首先说一下网上有些文章，分析的时候不够全面，但是又概括性总结了原因，有一定的误导，这里我列出我的debug结果
`/hello/%2e`->request.getServletPath()->`/hello/`
`/hello/%2e/`->request.getServletPath()->urldecode->`/helo/`
`/hello/%2e%2e` ->request.getServletPath() -> urldecode->`/`
也就是说，request.getServletPath()针对`%2e`会先解码，然后对此进行处理。
所以洞出现的问题是:
request.getServletPath()
处理这种URL时候会返回`/hello/`,然后shiro默认会去掉最后`/`,然后再进行匹配,导致了绕过。
###  0x7.5 漏洞修复
diff:[https://github.com/apache/shiro/compare/shiro-root-1.7.0…shiro-root-1.7.1](https://github.com/apache/shiro/compare/shiro-root-1.7.0...shiro-root-1.7.1)
这个处理就可以避免空白字符没被正确分割出来的问题,解决了第一种绕过问题。
然后可以看到这里为了避免`%2e`,这里首先去掉了之前shiro-682,为了修补末尾`/`绕过问题，做的一个去掉默认路径`/`的操作。
然后后面写了个if/else的判断
先不去掉`/`来做匹配，如果匹配失败，在考虑去掉`/`,这样考虑是基于以前的问题和现在的问题共同考虑
首先以前是 `/hello`被`/hello/`实现了绕过,那么在做匹配的时候，那么第一次匹配失败，然后进入了第二个去掉`/`匹配成功
现在是`/hello/*`被先`/hello/`默认去掉`/`->`/hello`实现了绕过，那么在做匹配的时候，第一次先保留`/hello/`可以成功被`/hello/*`匹配。
## 0x8 总结
漏洞的最基本原理，通俗来说就是，一个原始恶意构造地URL
，首先要绕过Shiro的判断，然后被Spring解析到最终的函数，也就是Shiro解析URL和Spring解析URL的差异性。然后多次Bypass都是针对实现解析的环节存在一些问题导致。
行文颇长，若有不当之处，多多包涵。
## 0x9 参考链接
[Spring源码分析之WebMVC](https://www.jianshu.com/p/1136212b9197)
[Spring Boot中关于%2e的Trick](http://rui0.cn/archives/1643)