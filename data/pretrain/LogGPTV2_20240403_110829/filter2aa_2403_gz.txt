应用程序。详细介绍请参见本书的 78.3 节。 
POPA（M）：从数据栈中读取（恢复）（R|E）DI、（R|E）SI、（R|E）BP、（R|E）BX、（R|E）DX、（R|E）
CX、（R|E）AX 寄存器的值。 
POPCNT：它的名称是“population count”的缩写。该指令一般翻译为“位 1 计数”。既是说，它负责
统计有多少个“为 1 的位”。它的英文外号称为“hamming weight”和“NSA 指令”。这种外号来自于下述
轶闻（Bruce Schneier《Applied Cryptography：Protocols，Algorithms，and Source Code in C》1994.）： 
更多信息请参阅参考资料［Sch94］。 
POPF：从数据栈中读取标识位，即恢复 EFLAGS 寄存器。 
① http://www.cs.cmu.edu/~ralf/files.html。 
② 编译器内部函数指 compiler intrinsic，本书有详细介绍。它属于编译器有关的内部函数，基本不会被常规库函数调用。编译
器为其生成特定的机械码，并非直接调用它的函数。内部函数常用于实现与特定 CPU 有关的伪函数。_debugbreak 的介绍请参
见 http://msdn.microsoft.com/en-us/library/f408b4et.aspx。 
③ 请参见 http://msdn.microsoft.com/en-us/library/windows/desktop/ms679297%28v=vs.85%29.aspx。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
926 
逆向工程权威指南（下册） 
PUSHA（M）：把（R|E）AX、（R|E）CX、（R|E）DX、（R|E）BX、（R|E）BP、（R|E）SI、（R|E）DI
寄存器的值，依次保存在数据栈里。 
PUSHF：把标识位保存到数据栈里，即存储 EFLAGS 寄存器的值。 
RCL（M）：带进位的循环左移指令，通过 CF 标识位实现。 
RCR（M）：带进位的循环右移指令，通过 CF 标识位实现。 
ROL/ROR（M）：循环左/右移。 
几乎所有的 CPU 都有这些循环位移指令。但是 C/C++语言里没有相应的操作指令，所以它们的编译器
不会生成这些指令。 
为了便于编程人员使用这些指令，至少 MSVC 提供了相应的伪函数（complier intrinsics）_rotl() 和_rotr()，
可直接翻译这些指令。详情请参见：http://msdn.microsoft.com/en-us/library/5cc576c4.aspx。 
SAL：算术左移指令，等同于逻辑左移 SHL 指令。 
SAR：算术右移指令。 
本指令通常用于对带符号数减半的运算中，因而在每次右移时，它保持最高位（符号位）不变，并把
最低位右移至 CF 中。 
SETcc op：在条件表达式 cc 为真的情况下，将目标操作数设置为 1；否则设置目标操作数为 0。这里
的目标操作数指向一个字节寄存器（也就是８位寄存器）或内存中的一个字节。状态码后缀（cc）指代条
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 A  x86 
927 
件表达式，可参见附录 A.6.2 的有关介绍。 
STC（M）：设置 CF 标识位的指令。 
STD（M）：设置 DF 标识位的指令。编译器不会生成这种指令，因此十分罕见。我们可以在 Windows
的内核文件 ntoskrnl.exe 中找到这条指令，也可以在手写的内存复制的汇编代码里看到它。 
STI（M）：设置 IF 标识位的指令。 
SYSCALL：（AMD）系统调用指令（参见本书第 66 章）。 
SYSENTER：（Intel）系统调用指令（参见本书第 66 章）。 
UD2（M）：未定义的指令，会产生异常信息，多用于软件测试。 
A.6.4  FPU 指令 
FPU 指令有很多带有“-R”或“-P”后缀的派生指令。带有 R 后缀的指令，其操作数的排列顺序与常
规指令相反。带有 P 后缀的指令，在运行计算功能后，会从栈里抛出一个数据；而带有 PP 后缀的指令则
最后抛出两个数据。P/PP 后缀的指令可在计算后释放栈里存储的计算因子。 
FABS：计算 ST（0）绝对值的指令。ST(0)=fabs(ST(0))。 
FADD op：单因子加法运算指令。ST(0)=op+ST(0)。 
FADD ST（0），ST（i）：加法运算指令。ST(0)=ST(0)+ST(i)。 
FADDP ST（1）：相当于 ST(1)＝ST(0)+ST(1)；pop。求和之后，再从数据栈里抛出 1 个因子。即，使
用计算求得的“和”替换计算因子。 
FCHS：求负运算指令。ST(0)= −1xST(0) 
FCOM：比较 ST（0）和 ST（1）。 
FCOM op：比较 ST（0）和 op。 
FCOMP：比较 ST（0）和 ST（1）；然后执行 1 次出栈操作。 
FCOMPP：比较 ST（0）和 ST（1）；然后执行 2 次出栈操作。 
FDIVR op：ST(0)=op/ST(0)。 
FDIVR ST（i），ST（j）：ST(i)=ST(j)/ST(i)。 
FDIVRP op：ST(0)=op/ST(0)，然后执行 1 次出栈操作。 
FDIVRPP ST（i），ST（j）：ST(i)=ST(j)/ST(i)，然后执行 2 次出栈操作。 
FDIV op：ST(0)=ST(0)/op。 
FDIV ST（i），ST（j）：ST(i)=ST(i)/ST(j)。 
FDIVP：ST(1)=ST(0)/ST(1)，然后执行 1 次出栈操作。即，被除数替换为商。 
FILD op：将整数转化为长精度数据，并存入 ST（0）的指令。 
FIST op：将 st（0）以整数保存到 op。 
FISTP op：将 st（0）以整数保存到 op，再从栈里抛出 ST（0）。 
FLD1：把 1 推送入栈。 
FLDCW op：从 16 位的操作数 op 里提取 FPU 控制字（参见附录 A.3）。 
FLDZ：把 0 推送入栈。 
FLD op：把 op 推送入栈。 
FMUL op：ST(0)＝ST(0)*op。 
FMUL ST（i），ST（j）：ST(i)=ST(i)*ST(j)。 
FMULP op：ST(0)＝ST(0)*op；然后执行 1 次出栈操作。 
FMULP ST（i），ST（j）：ST(i)=ST(i)*ST(j)；然后执行 1 次出栈操作。 
FSINCOS：一次计算 Sine 和 Cosine 结果的指令。 
调用指令时，ST（0）存储着角度参数 tmp。ST(0)=sin(tmp)；PUSH ST(0)（即 ST1 存储 Sin 值）；之后
异步社区会员 dearfuture(15918834820) 专享 尊重版权
928 
逆向工程权威指南（下册） 
再计算 ST(0)=cos(tmp)。 
FSQRT：
(0)
(0)
ST
ST
=
。 
FSTCW op：检查尚未处理的、未被屏蔽的浮点异常，再将 FPU 的控制字（参见附录 A.3）保存到 op。 
FNSTCW op：将 FPU 的控制字（参见附录 A.3）直接保存到 op。 
FSTSW op：检查尚未处理的、未被屏蔽的浮点异常，再将 FPU 的状态字（参见附录 A.3）保存到 op。 
FNSTSW op：将状态字（参见附录 A.3）直接保存到 op。 
FST op：保存实数 ST(0) 到 op。 
FSTP op：将 ST(0) 复制给 op，然后执行 1 次出栈操作（ST(0)）。 
FSUBR op：ST(0)=op−ST(0)。 
FSUBR ST（0），ST（i）：ST(0)=ST(i)−ST(0)。 
FSUBRP：ST(1)=ST(0)−ST(1)，然后执行 1 次出栈操作。即被减数替换为差。 
FSUB op：ST(0)=ST(0)−op。 
FSUB ST（0），ST（i）：ST(0)=ST(0)−ST(i)。 
FUSBP ST（1）：ST(1)=ST(1)−ST(0)。 
FUCOM ST（i）：比较 ST（0）和 ST（i）。 
FUCOM：比较 ST（0）和 ST（1）。 
FUCOMP：比较 ST（0）和 ST（1），然后执行 1 次出栈操作。 
FUCOMPP：比较 ST（0）和 ST（1），然后从栈里抛出 2 个数据。 
上述两个指令与 FCOM 的功能相似，但是它们在处理 QNaN 型数据时不会报错，仅在处理 SNaN 时进
行异常汇报。 
FXCH ST（i）：交换 ST（0）和 ST（i）的数据。 
FXCH：交换 ST（0）和 ST（1）的数据。 
A.6.5  可屏显的汇编指令（32 位） 
在构建 Shellcode 时（参见本书第 82 章），可能会用到下面这个速查表。 
ASCII 字符 
16 进制码 
x86 指令 
0 
30 
XOR 
1 
31 
XOR 
2 
32 
XOR 
3 
33 
XOR 
4 
34 
XOR 
5 
35 
XOR 
7 
37 
AAA 
8 
38 
CMP 
9 
39 
CMP 
: 
3A 
CMP 
; 
3B 
CMP 
< 
3C 
CMP 
= 
3D 
CMP 
? 
3F 
AAS 
@ 
40 
INC 
A 
41 
INC 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 A  x86 
929 
续表 
ASCII 字符 
16 进制码 
x86 指令 
B 
42 
INC 
C 
43 
INC 
D 
44 
INC 
E 
45 
INC 
F 
46 
INC 
G 
47 
INC 
H 
48 
DEC 
I 
49 
DEC 
J 
4A 
DEC 
K 
4B 
DEC 
L 
4C 
DEC 
M 
4D 
DEC 
N 
4E 
DEC 
O 
4F 
DEC 
P 
50 
PUSH 
Q 
51 
PUSH 
R 
52 
PUSH 
S 
53 
PUSH 
T 
54 
PUSH 
U 
55 
PUSH 
V 
56 
PUSH 
W 
57 
PUSH 
X 
58 
POP 
Y 
59 
POP 
Z 
5A 
POP 
[ 
5B 
POP 
\ 
5C 
POP 
] 
5D 
POP 
^ 
5E 
POP 
_ 
5F 
POP 
` 
60 
PUSHA 
a 
61 
POPA 
f 
66 
32 位运行模式下，把操作数切换为 16 位 
g 
67 
32 位运行模式下，把操作数切换为 16 位 
h 
68 
PUSH 
i 
69 
IMUL 
j 
6a 
PUSH 
k 
6b 
IMUL 
p 
70 
JO 
q 
71 
JNO 
r 
72 
JB 
s 
73 
JAE 
t 
74 
JE 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
930 
逆向工程权威指南（下册） 
续表 
ASCII 字符 
16 进制码 
x86 指令 
u 
75 
JNE 
v 
76 
JBE 
w 
77 
JA 
x 
78 
JS 
y 
79 
JNS 