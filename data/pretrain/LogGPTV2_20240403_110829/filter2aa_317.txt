### Goto Payload for Windows: DLL Injection and Railgun Overview

#### Payload Characteristics
- **Type**: Compiled C, DLL
- **Injection Method**: Typically injected into the memory of a target process.
- **Features**:
  - Enhanced CMD shell.
  - Provides basic post-exploitation API.
  - Often runs with SYSTEM privileges.
  - Can be migrated to a user's process.

#### Railgun Extension
- **Overview**: Railgun is an extension to the Meterpreter STDAPI that allows arbitrary loading of DLLs.
- **Key Features**:
  - Dynamic access to the entire Windows API on the system.
  - Ability to impersonate users by calling APIs from user processes.
  - Enables a wide range of functionalities, limited only by the Windows API.

#### Historical Timeline
- **June 2010**: Railgun submitted to Metasploit by Patrick HVE.
- **September 2010**: 64-bit support added by Stephen Fewer.
- **February 2011**: Chao-mu takes over Railgun support and resumes new feature work.
- **Fall 2011**: Chao-mu disappears.
- **August 2012**: YOU start contributing to Railgun.
- **December 2012**: Mayans predict Railgun-related Apocalypse (humorous note).

#### Core Functions
- **LoadLibrary**: Opens a handle to the DLL.
- **GetProcAddress**: Maps a function pointer to the specified function.
- **Memread and Memwrite**: Functions for manipulating memory space.

#### Code Structure
- **Location**: Ruby code lives in `lib/rex/post/meterpreter/extensions/stdapi/railgun`.
- **Usage**:
  - User/module writer defines the DLL and the needed functions.
  - Functions are then available as methods.
  - Can define at runtime or use definition files.

#### Example Definitions
```ruby
def self.create_dll(dll_path = 'advapi32')
  dll = DLL.new(dll_path, ApiConstants.manager)
  dll.add_function('CredEnumerateA', 'BOOL', [
    ['PCHAR', 'Filter', 'in'],
    ['DWORD', 'Flags', 'in'],
    ['PDWORD', 'Count', 'out'],
    ['PBLOB', 'Credentials', 'out']
  ])
end
```
- **Function Components**:
  1. Function Name
  2. Function Return Type
  3. Array of Parameters
     - Param type
     - Param Name
     - IN/OUT/INOUT Parameter

#### Handling Windows Constants
- **Defined in**: `api_constants.rb` in the railgun folder.
- **Usage**:
  - Easy to add new constants as needed.
  - Pass constants as Fixnum or Bignum.
  - String representation of constants can also be passed.

#### Example Usage
```ruby
ms_enhanced_prov = "Microsoft Enhanced Cryptographic Provider v1.0"
prov_rsa_full = 1
crypt_verify_context = 0xF0000000
alg_md5 = 32771
alg_rc4 = 26625

advapi32 = client.railgun.advapi32
acquirecontext = advapi32.CryptAcquireContextW(4, nil, ms_enhanced_prov, prov_rsa_full, crypt_verify_context)
createhash = advapi32.CryptCreateHash(acquirecontext['phProv'], alg_md5, 0, 0, 4)
```

#### Error Handling
- **Return Values**:
  - The function returns a hash.
  - Hash always contains `GetLastError`.
  - Returns 0 if there was no error.
  - Otherwise, contains the Windows system error code encountered.
  - Error codes can be looked up at [MSDN](http://msdn.microsoft.com/en-us/library/windows/desktop/ms681381(v=vs.85).aspx).

#### Complex Structures
- **Handling**:
  - Pointers and handles are treated as DWORDs.
  - If it can be treated as a number, it’s a DWORD.
  - Otherwise, it’s a PBLOB.
  - For unsupported types, add support manually.

#### Real-World Applications
- **Examples**:
  - Decrypt stored SmartFTP passwords.
  - Enumerate and decrypt stored RDP passwords.
  - Scan for wireless APs.
  - Enumerate domain controllers on the victim’s network.

#### Conclusion
- **Summary**: Railgun provides powerful and flexible access to the Windows API, enabling a wide range of post-exploitation activities without increasing the payload size.
- **Next Steps**: Let’s see it in action.