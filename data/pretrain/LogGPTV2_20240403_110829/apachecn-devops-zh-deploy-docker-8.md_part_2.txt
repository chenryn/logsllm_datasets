│       ├── files
│       │   ├── conntrack.conf
│       │   ├── file-descriptor-increase.conf
│       │   ├── socket-buffers.conf
│       │   └── ulimit-open-files-increase.conf
│       └── tasks
│           └── main.yml
└── swarm_node.yml
```
大部分文件就绪后，我们现在终于可以进入主配置文件了- `roles/swarm_mode/tasks/main.yml`。在其中，我们将使用 Ansible 的模块和 DSL 逐一安排我们的配置步骤，以便:
*   `apt-get dist-upgrade`形象为安全
*   对机器配置文件进行各种改进，以便作为 Docker 主机更好地运行
*   安装 Docker
为了简化对以下 Ansible 配置代码的理解，最好也记住这个结构，因为它是我们将要使用的每个独立步骤的基础，并且在您看了几次之后非常容易理解:
```
- name: A descriptive step name that shows in output
 module_name:
 module_arg1: arg_value
 module_arg2: arg2_value
 module_array_arg3:
 - arg3_item1
 ...
 ...
```
You can find all module documentation we use in the playbook below at the main Ansible website ([https://docs.ansible.com/ansible/latest/list_of_all_modules.html](https://docs.ansible.com/ansible/latest/list_of_all_modules.html)). We will avoid getting too deep in module documentation here due to the sheer volume of information that will generally be a distraction to the purpose of this section.
You can also find module-specific documentation that we used here too:
- [https://docs.ansible.com/ansible/latest/apt_module.html](https://docs.ansible.com/ansible/latest/apt_module.html)
- [https://docs.ansible.com/ansible/latest/copy_module.html](https://docs.ansible.com/ansible/latest/copy_module.html)
- [https://docs.ansible.com/ansible/latest/lineinfile_module.html](https://docs.ansible.com/ansible/latest/lineinfile_module.html)
- [https://docs.ansible.com/ansible/latest/command_module.html](https://docs.ansible.com/ansible/latest/command_module.html)
- [https://docs.ansible.com/ansible/latest/apt_key_module.html](https://docs.ansible.com/ansible/latest/apt_key_module.html)
- [https://docs.ansible.com/ansible/latest/apt_repository_module.html](https://docs.ansible.com/ansible/latest/apt_repository_module.html) 
让我们看看主安装剧本(`roles/swarm_mode/tasks/main.yml`)应该是什么样子:
```
---
- name: Dist-upgrading the image
 apt:
 upgrade: dist
 force: yes
 update_cache: yes
 cache_valid_time: 3600
- name: Fixing ulimit through limits.d
 copy:
 src: "{{ item }}.conf"
 dest: /etc/security/limits.d/90-{{ item }}.conf
 with_items:
 - ulimit-open-files-increase
- name: Fixing ulimits through pam_limits
 lineinfile:
 dest: /etc/pam.d/common-session
 state: present
 line: "session required pam_limits.so"
- name: Ensuring server-like kernel settings are set
 copy:
 src: "{{ item }}.conf"
 dest: /etc/sysctl.d/10-{{ item }}.conf
 with_items:
 - socket-buffers
 - file-descriptor-increase
 - conntrack
# Bug: https://github.com/systemd/systemd/issues/1113
- name: Working around netfilter loading order
 lineinfile:
 dest: /etc/modules
 state: present
 line: "{{ item }}"
 with_items:
 - nf_conntrack_ipv4
 - nf_conntrack_ipv6
- name: Increasing max connection buckets
 command: echo '131072' > /sys/module/nf_conntrack/parameters/hashsize
# Install Docker
- name: Fetching Docker's GPG key
 apt_key:
 keyserver: hkp://pool.sks-keyservers.net
 id: 58118E89F3A912897C070ADBF76221572C52609D
- name: Adding Docker apt repository
 apt_repository:
 repo: 'deb https://apt.dockerproject.org/repo {{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }} main'
 state: present
- name: Installing Docker
 apt:
 name: docker-engine
 state: installed
 update_cache: yes
 cache_valid_time: 3600
```
WARNING! This configuration has *no* hardening for the image to be comfortably placed on the internet live so use care and add whatever securing steps and tooling you require into this playbook before doing your real deployment. At the absolute least I would suggest installing the `fail2ban` package but you may have alternative strategies (e.g. seccomp, grsecurity, AppArmor, etc).
在这个文件中，我们通过使用一些核心 Ansible 模块和我们之前创建的配置文件，按顺序一个接一个地将机器从基础配置到完全能够运行 Docker 容器的系统。有一点可能不是很明显，那就是我们使用了`{{ ansible_distribution | lower }}`类型的变量，但是在这些变量中，我们使用了关于我们正在运行的系统的 ansi ble facts(https://docs . ansi ble . com/ansi ble/latest/playbooks _ variables . html)并通过 Ninja2 `lower()`过滤器传递它们，以确保变量是小写的。通过为存储库端点这样做，我们可以在几乎任何基于 deb 的服务器目标上使用相同的配置，而不会有太多麻烦，因为变量将被替换为适当的值。
此时，我们需要做的唯一一件事就是将我们的服务器 IP/DNS 添加到`hosts`文件中，并用`ansible-playbook  swarm_node.yml`运行剧本。但是由于我们想在亚马逊基础设施上运行这个，我们将在这里停下来，看看我们如何采取这些配置步骤，并从它们创建一个**亚马逊机器映像** ( **AMI** )在其上我们可以启动任意数量的**弹性计算云** ( **EC2** )实例，这些实例是相同的并且已经被完全配置。
# 亚马逊网络服务设置
为了继续我们的亚马逊机器映像(AMI)构建部分，我们不能没有一个工作的 AWS 帐户和一个相关的 API 密钥，所以我们将首先这样做，然后继续进一步。为了避免歧义，请注意，几乎所有的 AWS 服务都需要花钱才能使用，并且您对应用编程接口的使用可能会为您带来费用，即使是您可能不容易预料到的事情(即带宽使用、AMI 快照存储等)，因此请相应地使用它。
AWS is a massively complex piece of machinery, exponentially more than Ansible, and covering everything that you might need to know about it is impossible to do within the scope of this book. But we will try here to provide you with enough relevant instructions for you to have a place to start from. If you decide you want to learn more about AWS, their documentation is generally pretty great and you can find it at [https://aws.amazon.com/documentation/](https://aws.amazon.com/documentation/).
# 创建帐户
虽然这个过程非常简单，但它已经以非常重要的方式改变了几次，所以在这里详细说明整个过程，而没有办法更新它，最终会对您不利，所以要创建帐户，我将引导您到包含如何操作的最新信息的链接，即[https://AWS . Amazon . com/premium support/knowledge-center/create-and-activate-AWS-account/](https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/)。一般来说，流程在[https://aws.amazon.com/](https://aws.amazon.com/)开始，您可以点击屏幕右上角的黄色“注册”或“创建 AWS 帐户”按钮，并按照说明进行操作:
![](img/ba741a7d-9ba5-44c8-81ab-39f166142b2a.png)
# 获取应用编程接口密钥
创建 AWS 帐户后，我们现在需要获取 API 密钥，以便通过我们想要使用的各种工具来访问和使用我们的资源:
1.  通过转到`https://.signin.aws.amazon.com/console`登录到您的控制台。请注意，如果在注册帐户时没有创建用户，您可能需要首先以根帐户身份登录(登录按钮下方的蓝色小链接，如下图所示):
![](img/e647ee3d-b822-41f8-ac38-cc6d47fc735b.png)
2.  导航至位于[https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/)的 IAM 页面，点击屏幕左侧的用户链接。
3.  单击添加用户开始用户创建过程。
![](img/a9a05e9a-effc-4d22-aadc-f38fe919310f.png)
CAUTION! Make sure that the Programmatic access checkbox is ticked, or else your AWS API keys will not work for our examples.
4.  对于权限，我们将授予该用户完全管理员访问权限。对于生产服务，您将希望将其限制在所需的访问级别:
![](img/37d4b7e7-4f0d-4714-ad38-a0f712635762.png)
5.  遵循向导的其余部分，记录密钥标识和密钥秘密，因为这些将是您用于 AWS 的 API 凭据:
![](img/097f8cab-2eb9-4f41-8ac8-47d3cb00a7cb.png)
# 使用应用编程接口密钥
为了以最简单的方式使用 API 键，您可以导出 shell 中的变量，这些变量将被工具获取；但是，您需要在使用自动气象站应用接口的每个终端上这样做:
```
$ export AWS_ACCESS_KEY_ID="AKIABCDEFABCDEF"
$ export AWS_SECRET_ACCESS_KEY="123456789ABCDEF123456789ABCDEF"
$ export AWS_REGION="us-west-1"
```
或者，如果你安装了`awscli`工具(`sudo apt-get install awscli`)，你可以直接运行`aws configure`:
```
$ aws configure
AWS Access Key ID [None]: AKIABCDEFABCEF
AWS Secret Access Key [None]: 123456789ABCDEF123456789ABCDEF
Default region name [None]: us-west-1
Default output format [None]: json
```
还有许多其他方法可以通过配置文件等设置您的凭据，但这实际上完全取决于您预期的使用情况。有关这些选项的更多信息，您可以参考[https://docs . AWS . Amazon . com/CLI/latest/user guide/CLI-chap-入门. html](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html) 上的官方文档。
因此，有了可供命令行界面使用的密钥和配置，我们现在可以使用 Packer 构建定制的 AMI 映像了。
# 哈希公司包装商
正如我们之前所暗示的，如果我们每次都必须在添加到集群或云基础架构的新机器上运行 CM 脚本，那么我们的 CM 脚本就不是那么理想了。虽然我们可以做到这一点，但我们真的不应该这样做，因为在一个完美的世界中，集群节点应该是一个灵活的组，它可以根据使用情况生成和删除实例，用户干预最少，因此即使在最小的集群规模下，要求手动设置每台新机器也是站不住脚的。通过创建 AMI 映像，我们可以在制作映像时用 Ansible 预烘焙一次模板化的基本系统映像。通过这样做，我们可以用这个相同的映像启动任何新的机器，并且我们与正在运行的系统的交互将保持在最低限度，因为理想情况下一切都已经配置好了。
为了制作这些机器映像，HashiCorp Packer([https://www.packer.io/](https://www.packer.io/))允许我们通过应用我们选择的 CM 工具(Ansible)的预配运行并为任何大型云提供商输出一个现成的映像来完成这一任务。通过这样做，您可以将集群节点(或任何其他服务器配置)的所需状态永久保存在映像中，对于集群的任何节点添加需求，您需要做的就是基于相同的 Packer 映像生成更多的虚拟机实例。
# 装置
由于 Packer 是用 Go 编程语言编写的，要安装 Packer，只需要从他们位于[https://www.packer.io/downloads.html](https://www.packer.io/downloads.html)的网站下载二进制文件。为了快速安装，您通常可以执行如下操作:
```
$ # Get the archive
$ wget -q --show-progress https://releases.hashicorp.com/packer/1.1.1/packer_.zip
packer_.zip 100%[==============================================>] 15.80M 316KB/s in 40s
$ # Extract our binary
$ unzip packer_.zip
Archive: packer_.zip
 inflating: packer
$ # Place the binary somewhere in your path
$ sudo mv packer /usr/local/bin/
$ packer --version
1.1.1
```
CAUTION! Packer binaries only provide TLS authentication for their runner without any form of signature checking, so the assurance that the program was published by HashiCorp itself is orders of magnitude lower than a GPG-signed `apt` repository that Docker uses; so, exercise extra care when getting it this way or build it from source ([https://github.com/hashicorp/packer](https://github.com/hashicorp/packer)).
# 使用
使用 Packer 实际上相对容易，因为在大多数情况下，您只需要 Ansible 设置代码和一个相对较小的`packer.json`文件。将此内容添加到前面章节中我们的 Ansible 部署配置中的`packer.json`中: