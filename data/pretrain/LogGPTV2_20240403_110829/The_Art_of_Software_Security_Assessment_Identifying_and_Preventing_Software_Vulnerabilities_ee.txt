Replay Messages 
When you examine packet dumps, replaying certain messages with small changes to 
see how the other side responds can prove helpful. This method can give you insight 
on what certain fields in the packet represent, how error messages are conveyed, and 
what certain error codes mean. It's especially useful when the same protocol errors 
happen later when you replay other messagesa good way to test previous deductions 
and see whether you were right. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
935 
Reverse-Engineering the Application 
Reverse-engineering is both a science and an art, and it's a subject that could easily 
take an entire book to cover. Reverse-engineering isn't covered in depth in this 
chapter; instead, it's mentioned as a technique that can be used on clients and 
servers to gain an in-depth understanding of how a protocol works. The following 
sections introduce the first steps to take to understand a protocol. 
Use Symbols 
If you can get access to binary code with symbols, by all means, use it! Function 
names and variable names can provide invaluable information as to what a protocol 
does. Using these symbols can help isolate the code you need to concentrate on 
because functions dealing with messages are aptly named. Some programs you audit 
might have additional files containing symbols and debugging information (such as 
PDB, Program Debug Database, files for Windows executables). These files are a big 
help if you can get your hands on them. For instance, you might be doing auditing for 
a company that refuses to give you its source code but might be open to disclosing 
debugging builds or PDB files. 
Note 
Microsoft makes PDB symbol packages available at http://msdl.microsoft.com/, and 
these timesavers are invaluable tools for gaining insight into Microsoft programs. If 
getting source code isn't an option, it's recommended that you negotiate with 
whoever you're doing code auditing for to get debug symbols. 
Examine Strings in the Binary 
Sometimes binaries don't contain symbols, but they contain strings indicating 
function names, especially when debugging information has been compiled into the 
production binary. It's not uncommon to see code constructs such as the following: 
#define DEBUG1(x)    if(debug) printf(x) 
int parse_message(int sock) 
{ 
    DEBUG1("Entering parse_message\n"); 
    ... process message ... 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
936 
Although debugging is turned off for the production release, the strings appear in the 
binary, so you can see the function names with debugging messages in them. 
Strings also come in useful when you're looking for certain strings that appear in the 
protocol or errors that appear in the protocols or logs. For example, you send a 
message that disconnects but leaves a log message such as "[fatal]: malformed 
packet received from 192.168.1.1: invalid packet length." This string tells you that 
the length field (wherever it appears in the packet) is invalid, and you also have a 
string to search for. By searching through the binary for "invalid packet length" or 
similar, you might be able to locate the function that's processing the packet length 
and, therefore, discover where in the binary to start auditing. 
Examine Special Values 
As well as helpful strings in the executable, you might find unique binary values in the 
protocol that can be used to locate code for processing certain messages. These 
values are commonly found when you're dealing with file formats because they 
contain "signature" values to identify the file type at the beginning of the file (and 
possibly in other parts of the file). Although unique signatures are a less common 
practice in protocols sent over the network (as they're often unnecessary), there 
might be tag values or something similar in the protocol that have values unlikely to 
appear naturally in a binary. "Appearing naturally" means that if you search the 
binary for that value (using an IDA text search on the disassembly), it's unlikely to 
occur in unrelated parts of the program. For example, the value 0x0C would occur 
often in a binary, usually as an offset into a structure. Frequent occurrence makes it 
a poor unique value to search for in the binary. A more unusual value, such as 0x8053, 
would be a better search choice, as it's unlikely that structures have members at this 
offset (because the structures would have to be large and because the value is odd, 
so aligned pointer, integer, and word values don't appear at unaligned memory 
offsets). 
Debug 
Debugging messages were mentioned in the section on examining strings, and you 
saw an example of debugging messages appearing in the compiled code. This means 
you can turn on debugging and automatically receive all debugging output. Usually, 
vendors have a command-line option to turn on debugging, but they might remove it 
for the production release. However, if you cross-reference a debugging string such 
as "Entering parse_message," you see a memory reference to where the debug 
variable resides in memory. So you can just change it to nonzero at runtime and 
receive all the debugging messages you need. 
Find Communication Primitives 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
937 
When all else fails, you can revert to finding entry points you know about; protocol 
software has to send and receive data at some point. For protocols that operate over 
TCP, entry points might include read(), recv(), recvmsg(), and WSArecv(). UDP 
protocols might also use recvfrom() and WSArecvfrom(). Locating where these 
functions are used points you to where data is read in from the network. Sometimes 
this method is an easy route to identifying where data is being processed. 
Unfortunately, it might take some tracing back through several functions, as many 
applications make wrappers to communication primitives and use them indirectly (by 
having the communication primitives in the form of class methods). Still, in these 
cases, you can break on one of the aforementioned functions at runtime and let it 
return a few times to see where processing is taking place. 
Use Library Tracing 
Another technique that can aid in figuring out what a program is doing is using system 
tools to trace the application's library calls or system resource accesses. These tools 
include TRuss for Solaris, ltrace for Linux, ktrace for BSD, and Filemon/Regmon for 
Windows (www.sysinternals.com/). This technique is best used with the other 
techniques described. 
Match Data Types with the Protocol 
After you're more familiar with a protocol, you start to get a sense of where things 
could go wrong. Don't worry if this doesn't happen right away; the more experience 
you get, the more you develop a feel for potential problem areas. One way to identify 
potential problem areas is to analyze the structure of untrusted data processed by a 
server or client application, and then match elements of those structures with 
vulnerability classes covered in this book, as explained in the following sections. 
Binary Protocols 
Binary protocols express protocol messages in a structural format that's not readable 
by humans. Text data can be included in parts of the protocol, but you also find 
elements in nontext formats, such as integers or Booleans. Domain Name System 
(DNS) is one example of a binary protocol; it uses bit fields to represent status 
information, two-byte integer fields to represent lengths and other data (such as IDs), 
and counted text fields to represent domain labels. 
Binary protocols transmit data in a form that's immediately recognizable by the 
languages that implement servers and clients. Therefore, they are more susceptible 
to boundary condition vulnerabilities when dealing with those data types. Specifically, 
when dealing with integers, a lot of the typing issues discussed in Chapter 6(? [????.]), 
"C Language Issues," are relevant. For this reason, the following sections summarize 
integer-related vulnerabilities that commonly occur in binary protocols. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
938 
Integer Overflows and 32-Bit Length Values 
Integer overflows often occur when 32-bit length variables are used in protocols to 
dynamically allocate space for user-supplied data. This vulnerability usually results in 
heap corruption, allowing a remote attacker to crash the application performing the 
parsing or, in many cases, exploit the bug to run arbitrary code. This code shows a 
basic example of an integer overflow when reading a text string: 
char *read_string(int sock) 
{ 
   char *string; 
   size_t length; 
   if(read(sock, (void *)&length, sizeof(length)) != 
           sizeof(length)) 
       return NULL; 
   length = ntohl(length); 
   string = (char *)calloc(length+1, sizeof(char)); 
   if(string == NULL) 
       return NULL; 
   if(read_bytes(sock, string, length)  sizeof(struct tlv); ){ 
        if(read_tlv(sock, &tlv) type = read_short(sock); 
    hdr->operation = read_short(sock); 
    hdr->id = read_long(sock); 
    hdr->length = read_long(sock); 
    return 0; 
} 
int read_packet(int sock) 
{ 
    struct pkthdr header; 
    char data[MAX_PACKET_SIZE]; 
    if(read_header(sock, &header)  MAX_PACKET_SIZE) 
        return 1; 
    if(read_bytes(sock, data, hdr.length  PACKET_HDR_SIZE) < 0) 
        return 1; 
    ... process data ... 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
941 
This code assumes that hdr.length is at least PACKET_HDR_SIZE (12) bytes long, but 
this is never verified. Therefore, the read_bytes() size parameter can be underflowed 
if hdr.length is less than 12, resulting in a stack overflow. 
Small Data Types 
The issues with length specifiers smaller than 32 bits (8- or 16-bit lengths) are a bit 
different from issues with large 32-bit sizes. First, sign-extension issues are more 
relevant because programs often natively use 32-bit variables, even when dealing 
with smaller data types. These sign-extension issues can result in memory corruption 
or possibly denial-of-service conditions. Listing 16-1 shows a simple example of DNS 
server code. 
Listing 16-1. Name Validation Denial of Service 
.text:0101D791 
.text:0101D791                 push    ebx 
.text:0101D792                 push    esi 
.text:0101D793                 mov     esi, [esp+arg_0] 
.text:0101D797                 xor     ebx, ebx 
.text:0101D799                 movzx   edx, byte ptr [esi] 
.text:0101D79C                 lea     eax, [esi+2] 
.text:0101D79F                 mov     ecx, eax 
.text:0101D7A1                 add     ecx, edx 
.text:0101D7A3 
.text:0101D7A3 loc_101D7A3:                           ; CODE XREF: 
Name_ValidateCountName(x)+21 
.text:0101D7A3                 cmp     eax, ecx 
.text:0101D7A5                 jnb     short loc_101D7B6 
.text:0101D7A7                 movsx   edx, byte ptr [eax] 
.text:0101D7AA                 inc     eax 
.text:0101D7AB                 test    edx, edx 
.text:0101D7AD                 jz      short loc_101D7B4 
.text:0101D7AF                 add     eax, edx 
.text:0101D7B1                 inc     ebx 
.text:0101D7B2                 jmp     short loc_101D7A3 
This piece of assembly code contains a sign-extension problem (which is bolded). It 
roughly translates to this C code: 
int Name_ValidateCountName(char *name) 
{ 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
942 
    char *ptr = name + 2; 
    unsigned int length = *(unsigned char *)name; 
    for(ptr = name + 2, end = ptr + length; ptr < end; ) 
    { 
        int string_length = *ptr++; 
        if(!domain_length) 
            break; 
        ptr += domain_length; 
     } 
     ... 
} 
This code loops through a series of counted strings until it reaches the end of the data 
region. Because the pointer is pointing to a signed character type, it's sign-extended 
when it's stored as an integer. Therefore, you can jump backward to data appearing 
earlier in the buffer and create a situation that causes an infinite loop. You could also 
jump to data in random memory contents situated before the beginning of the buffer 
with undefined results. 
Note 
In fact, the length parameter at the beginning of the function isn't validated against 
anything. So based on this code, you should be able to indicate that the size of the 
record being processed is larger than it really is; therefore, you can process memory 
contents past the end of the buffer. 
Text-Based Protocols 
Text-based protocols tend to have different classes of vulnerabilities than binary 
protocols. Most vulnerabilities in binary protocol implementations result from type 
conversions and arithmetic boundary conditions. Text-based protocols, on the other 
hand, tend to contain vulnerabilities related more to text processingstandard buffer 
overflows, pointer arithmetic errors, off-by-one errors, and so forth. 
Note 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
943 
One exception is text-based protocols specifying lengths in text that are converted to 
integers, such as the Content-Length HTTP header discussed in "Posting Data(? 
[????.])" later in this chapter. 
Buffer Overflows 
Because text-based protocols primarily manipulate strings, they are more vulnerable 
to simpler types of buffer overflows than to type conversion errors. Text-based 
protocol vulnerabilities include buffer overflows resulting from unsafe use of string 
functions (discussed in Chapter 9(? [????.]), "Strings and Metacharacters"), as shown 
in this simple example: 
int smtp_respond(int fd, int code, char *fmt, ...) 
{ 
    char buf[1024]; 
    va_list ap; 
    sprintf(buf, "%d ", code); 
    va_start(ap, fmt); 
    vsprintf(buf+strlen(buf), fmt, ap); 
    va_end(ap); 
    return write(fd, buf, strlen(buf)); 
} 
int smtp_docommand(int fd) 
{ 
    char *host, *line; 
    char commandline[1024]; 
    if(read_line(fd, commandline, sizeof(commandline)-1) < 0) 
        return -1; 
    if(getcommand(commandline, &line) < 0) 
        return -1; 
    switch(smtpcommand) 
    { 
        case EHLO: 
        case HELO: 