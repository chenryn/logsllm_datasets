ADOT is an open-source distribution downstream of OpenTelemetry. With ADOT, you can collect
metadata from your AWS resources and managed services to correlate application performance
data with underlying infrastructure data, reducing the mean time to problem resolution.
1166
©© 22002233,, AAmmaazzoonn WWeebb SSeerrvviicceess,, IInncc.. oorr iittss aaffffiilliiaatteess.. AAllll rriigghhttss rreesseerrvveedd..
Observability for containers
To add Observability to containers, customers are using one of two options:
Option 1 Option 2
Microservice
container
In-process Out-of-process
(SDK) (sidecar proxy)
Microservice
container
Proxy
Option 1 is to use an in-process SDK and add
code that is embedded with the application. Java
Scala
This method is also referred to as agentless.
Node.js
Python
Languages
C++
Django
.NET
• SDK maintenance
GO
• Application code changes
• Retrofitting
• Unknown dependencies MySQL (hosted + Amazon Relational
Database Service (Amazon RDS))
Aurora
Microsoft SQL Server
PostgreSQL (hosted and Amazon RDS)
This option tends to be more heavyweight
Databases Redis
and requires application code changes and
InfluxDB
retrofitting. It’s language-dependent, so you RabbitMQ
MongoDB
would need to ensure the language you choose
Amazon DynamoDB
is supported. Plus, the resources used need to
Cassandra
support this style of instrumentation.
17
© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.
Decouple operational
logic and SDKs Amazon ECS task / Kubernetes Pod
Port Port
External traffic 8080 8081
Proxy Microservice container
Option 2 is to use an out-of-process method also known as a sidecar. A sidecar runs as a
separate proxy container that manages all the communication outside of the microservice
container. The sidecar method allows for decoupling of the operational logic and the SDKs.
Benefits of the sidecar pattern is that it provides a straightforward way to implement logging,
tracing, and metrics without having to retrofit code or apply an SDK. They are language-
independent and can be used as a method to capture telemetry data for applications
and services where you might not have access to instrument the programming code.
But sidecars can be difficult to scale, which is why we recommend AWS App Mesh for service-
level communications. AWS App Mesh is a service mesh that provides a dedicated infrastructure
layer for your applications. It allows you to transparently add capabilities like Observability,
traffic management, and security, without adding them to your own code.
Observability for AWS Lambda
AWS Lambda is a serverless, ADOT Lambda layers provide a plug-and-play user
event-driven compute service that experience by automatically instrumenting a Lambda
lets you run code for virtually any function. In this method, OpenTelemetry is packaged
type of application or backend service together with an out-of-the-box configuration
without provisioning or managing for AWS Lambda in an easy-to-set-up layer. Users
servers. Observability for AWS Lambda can enable and disable OpenTelemetry for their
is instrumented via ADOT. AWS Lambda function without changing code.
ADOT is provided as an AWS Lambda
layer, which is an archive containing
additional code such as libraries,
dependencies, or even custom
runtimes. Using layers can make
it faster to deploy applications.
1188
©© 22002233,, AAmmaazzoonn WWeebb SSeerrvviicceess,, IInncc.. oorr iittss aaffffiilliiaatteess.. AAllll rriigghhttss rreesseerrvveedd..
The four golden signals
We’ve talked about instrumentation of containers and AWS Lambda.
Now let’s transition to what signals in information we need to include
in our Observability solution.
The four golden signals are key metrics used to monitor the health of
a service and the underlying systems. We will explain what they are,
and how they can help you improve service performance.
Latency is the time it takes a system to respond to a request. Both
successful and failed requests have latency and it’s vital to differentiate
between the latency of both. For example, an HTTP 500 error triggered
because of a connection loss to the database might be served very quickly.
Latency However, since HTTP 500 is an error indicating a failed request,
factoring it into the overall latency will lead to misleading calculations.
Alternatively, a slow error can be worse as it factors in even more latency.
Therefore, instead of filtering out errors altogether, keep track of the error
latency. Define a target for a good latency rate and monitor the latency
of successful requests against failed ones to track the system’s health.
Traffic is the measure of how much your service is in demand among
users. How this is determined varies depending on the type of business
you have. For a web service, traffic measurement are generally described
in HTTP requests per second, while in a storage system, traffic might
Traffic be described in transactions per second or retrievals per second.
By monitoring user interaction and traffic, engineers can usually figure
out users’ experience with the service and how it’s affected by shifts in
the service’s demand.
111999
©©© 222000222333,,, AAAmmmaaazzzooonnn WWWeeebbb SSSeeerrrvvviiiccceeesss,,, IIInnnccc... ooorrr iiitttsss aaaffffffiiillliiiaaattteeesss... AAAllllll rrriiiggghhhtttsss rrreeessseeerrrvvveeeddd...
Error is the rate of requests that fail in any of the following ways:
Explicitly For example, HTTP 500
internal server error
Errors
Implicitly For example, HTTP 200 success response
coupled with inaccurate content
By policy For example, as your response time is
set to one second, any request that takes
over one second is considered an error
Engineers can monitor all errors across the system and at individual
service levels to define which errors are critical and which are less severe.
By identifying that, they determine the health of their system from the
user’s perspective and can take rapid action to fix frequent errors.
Saturation refers to the overall capacity of the service or how “full” the
service is at a given time. It signifies how much memory or CPU resources
your system is utilizing. Many systems start underperforming before they
reach 100 percent utilization. Therefore, setting a utilization target is
Saturation critical as it will help ensure service performance and availability for users.
An increase in latency is often a leading indicator of saturation. Measuring
your 99th percentile response time over a small time period can provide
an early indicator of saturation. For example, a 99th percentile latency
of 60 milliseconds indicates that there's a 60-millisecond delay for every
one in 100 requests.
20
© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.
Dashboards and visualizations
This is a great spot to briefly touch on the concept of dashboards. A simple definition:
A dashboard is a visual display of all of your data. While it can be used in all kinds of
different ways, its primary intention is to present information—such as KPIs—at a
glance. A good practice for dashboards is to ensure these can be defined using
Configuration as Code (CaC).
2211
©© 22002233,, AAmmaazzoonn WWeebb SSeerrvviicceess,, IInncc.. oorr iittss aaffffiilliiaatteess.. AAllll rriigghhttss rreesseerrvveedd..
Codifying dashboards
In the below diagram, you’ll see AWS CloudFormation—an Infrastructure as Code (IaC) service
that allows you to easily model, provision, and manage AWS and third-party resources—on the
left-hand side of the screen, which produces the dashboard on the right. Defining configuration in
AWS CloudFormation or Terraform lets you codify dashboards for consistency across environments.
CloudFormation snippet
BasicDashboard:
Type: AWS::CloudWatch::Dashboard
Properties:
DashboardName: MyDashboard
DashboardBody:
...
"CPUUtilization","InstanceId”…
Visualizations
Visuals are persuasive
and convey important
information quickly.
Use visualizations
to highlight trends,
patterns, and anomalies.
In this example, the eye
is drawn to the orange dot
on the left-hand portion
of the map, which allows
an operator to quickly
focus on an area that
needs attention.
22
© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.
Alerts
The reality is that no matter how good a
dashboard or a visualization is, no engineer
is going to spend all their time staring at it.
This is why you need alerts. Alerts draw your
attention to something you need to look at
—but with the caveat that alerts need to
Visibility into the pipeline be meaningful and actionable, otherwise
engineers will get alert fatigue and may
ignore them (one of our anti-patterns
Observability of your Continuous Integration/
for Observability).
Continuous Delivery (CI/CD) pipeline and your
application stack is critical, as it gives you
important early insights into bottlenecks in your
pipeline, application performance issues, runtime
application errors, test results, system errors,
security vulnerabilities, and many more. Issues
when caught at earlier stages of development
are easier and cheaper to fix. With visibility into
the pipeline, you get the following benefits:
Know the performance of pipelines— Alert on significant events
you can’t improve what you can’t measure
Identify bottlenecks like long-running test, Alerts don’t always have to be about negative
out of memory errors, and long-running impacts. Alerts should also include business
database (DB) queries milestones such as meeting revenue targets or
launch of a new promotion. Setting up these
Visibility into compile time and runtime errors types of alerts adds important contextual
information that can help your organization
Value stream mapping—with visibility into
make better business decisions.
your pipeline, you can identify inefficiencies
in the system, bottlenecks, track stories in
the pipeline, team capacity, and many more
23
© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.
Observability of
third-party services Remediation
With modern applications being hybrid and Ultimately, Observability is supposed to
distributed, it is important to get visibility into help you remediate faster, and auto-remediation
third-party services such as email, payments, is the ultimate capability for SRE/Ops engineers.
location services, delivery services, and others A simple example of auto-remediation is auto-
to get a complete picture as you are debugging scaling. For example, when an Amazon Elastic
your application. Compute Cloud (Amazon EC2) health check fails,
if the Amazon EC2 instance is part of an auto-
A good example would be debugging a failed
scaling group, the auto-scaling replaces the
order. Was it due to a third-party payment
instance without impacting end-user experience.
gateway error? An issue with availability?
An order confirmation email failure? Without
proper visibility into third-party systems, it’s
almost impossible to debug and get to the root
cause of an issue.
AIOps and auto-remediation
No cloud-native Observability solution is complete without artificial intelligence for IT operations (AIOps).
No human can realistically be expected to make sense of the massive amounts of data that streaming
in—the sheer volume and disparate types of information makes it impossible.
This is where AIOps comes in.
AIOps takes all that data and automatically correlates it for you to help improve the signal-to-noise ratio,
surfacing those data points and alerts to which you really need to pay attention. AIOps is a relatively new
area of Observability that is beginning to expand into auto-remediation to not only detect issues, but to
also automate the remediation of those issues.
2244
©© 22002233,, AAmmaazzoonn WWeebb SSeerrvviicceess,, IInncc.. oorr iittss aaffffiilliiaatteess.. AAllll rriigghhttss rreesseerrvveedd..
Key takeaways for Observability
To sum up what we have discussed so far:
The components of MELT The four golden signals
—metrics, events, logs, and traces—and how and how to use these to inform
these make up the data types for Observability service performance improvements
The importance of Observability Leverage advanced capabilities in AIOps
to improve mean time to resolution, improve and how to use these to inform
system performance, and optimize for cost service performance improvements
The needs of different personas
and how Observability helps provide specific
information for each role
The importance of standardization
using tools such as AWS Distro for
OpenTelemetry (ADOT) and auto-
instrumentation for containers
and AWS Lambda functions
25
© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.
Tools for building cloud-native
In this section, we’ll look at some of the best-fit tools you could use to achieve the outcomes discussed in
the previous section. At AWS, we’ve long been believers in enabling builders to use the right tool for the
job—and when you build with AWS, you’re provided with choice. You can build using the native services
AWS provides or use AWS Marketplace to acquire third-party software offered by AWS Partners to take
away the heavy lifting and allow your development teams to focus on delivering value to customers.
Let’s take a deeper look at two key components at this stage of your cloud-native journey: an artifact
repository to store and use approved software versions, consistent environments in which to effectively
experiment, build, and test, and observability throughout the entire process.
Adding development capabilities with AWS Marketplace
Find, try, and acquire tools across the DevOps landscape for building cloud-native applications
Plan Build Test Secure Release Operate
Amazon Amazon
Kinesis CloudWatch
Amazon
EventBridge
Amazon
EKS
Amazon
DynamoDB
AWS CodeCommit
AWS
AWS Device CodeDeploy
Farm
AWS Cloud9 CodeCatalyst AWS
Lambd
a
Sample AWS and AWS Marketplace solutions
3,000+ vendors | 13,000+ products
AWS Marketplace is a cloud marketplace that makes it easy to find, try, and acquire the tools you need
to build cloud-native. More than 13,000 products from over 3,000 Independent Software Vendors are
listed in AWS Marketplace—many of which you can try for free and, if you decide to use, will be billed
through your AWS account.
222666
©©© 222000222333,,, AAAmmmaaazzzooonnn WWWeeebbb SSSeeerrrvvviiiccceeesss,,, IIInnnccc... ooorrr iiitttsss aaaffffffiiillliiiaaattteeesss... AAAllllll rrriiiggghhhtttsss rrreeessseeerrrvvveeeddd...
For our example architecture, we’ll use Trend Micro
for Security Observability, Sumo Logic for end-to-end
Observability of the application, and ADOT to help with
standardization. Let’s take a high-level look at the
first two services and how they integrate.
Instances / Amazon EC2
Workload
security
Git
repository CI/CD
Serverless/AWS Lambda/AWS Fargate/Containers
Template Scanner Application
𝒇(𝑥) 𝒇(𝑥)
security
Build Storage / Amazon S3
File storage
scanning
gnikrowteN
IDE – Plugin Registries / Containers
VSCode
Container
security
Open-source Template Scanner
security by Snyk through the APIs
Network security SIEM
Security logs and misconfigurations
from Cloud One sent to SIEM
Ticket system for DevOps teams
• 600+ built-in checks
Conformity • Multi-cloud visibility
• Compliance
• Real-time monitoring
Trend Micro Cloud One can protect web applications and APIs regardless
of what programming environment you are running on, what cloud
strategy is used, or what architecture was employed. Furthermore,
Trend Micro designed the product to handle a very broad array of threat
Try it in AWS Marketplace›
vectors such as malicious content, OWASP top 10, bot attacks, as well as
Start a hands-on lab ›
business logic events. Trend Micro even embedded a scripting engine to
extend the platform to cover advanced use cases.
Sumo Logic unifies visibility across key AWS services such as Amazon
Elastic Kubernetes Service (Amazon EKS), AWS Lambda, Amazon Elastic
Container Service (Amazon ECS), Amazon Relational Database Service
Try it in AWS Marketplace› (Amazon RDS), Amazon ElastiCache, Amazon API Gateway, and Amazon
Start a hands-on lab › DynamoDB. With Sumo Logic, you can easily navigate from overview
dashboards into account, AWS Region, Availability Zone, or service-
specific views. Intuitive navigation ensures teams can quickly resolve
issues, minimize downtime, and improve performance.
27
© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.
Observability architecture
Below, you’ll find a high-level architecture using Trend Micro and Sumo Logic products that