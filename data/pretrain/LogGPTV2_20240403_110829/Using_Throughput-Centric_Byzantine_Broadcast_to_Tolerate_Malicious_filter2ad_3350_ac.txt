this, this section focuses on intuitions. We do not aim to
cover all possibilities, nor to rigorously argue for correctness
here. Later, Section V presents the complete pseudo-code of
OVERLAYBB, based on which Section VII provides formal
proof for correctness and analysis of the TTB ratio R. Such
an end-to-end proof is the only way to ultimately verify the
protocol’s correctness.
This section considers a multi-hop topology, but to help
understanding, we still assume the simple permissioned setting
with n nodes. Section V later generalizes to the PoS setting.
A. Avoid Relaying Unlimited Number of Objects
Chan et al.’s protocol [6] serves as a starting point of our
design. When used in multi-hop topologies, their protocol
relies on the implicit assumption that a node has sufﬁcient
bandwidth to relay all possible multicast messages. This
section ﬁrst shows that such an assumption can prevent the
protocol from guaranteeing agreement in practice, namely,
when B (cid:54)= ∞. We then propose a simple solution to ﬁx this
problem. Section IV-B and IV-C later propose more techniques
to improve R, to eventually get OVERLAYBB.
Chan et al.’s protocol in multi-hop overlay. In a multi-hop
topology, each node in Chan et al.’s protocol simultaneously
plays two roles: First, a node is either a committee member or
a non-committee member. Second, a node is always a relaying
node in the overlay for the purpose of multicast, and it needs
to relay all multicast messages. Now a malicious broadcaster
can generate many objects, all with valid signatures from itself.
The malicious committee members can add further signatures
to these objects, and then multicast all these objects. Since
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
41266
there can be unlimited number of such objects, eventually
honest nodes will not have sufﬁcient bandwidth to relay
all multicast messages. Some message x hence will not be
properly propagated to all nodes (in time). It is possible that
none of the other objects are eventually accepted by any honest
nodes, while the object in x is eventually accepted by some
honest nodes. Since the propagation of x was not properly
done, the object in x may not be accepted by other honest
nodes, which then violates agreement/correctness.
To gain deeper insight, it helps to see why this problem does
not exist when the protocol runs over a clique. In a clique, a
node only plays a single role of either a committee member or
a non-committee member. While a node also needs to forward
messages there, a node always ﬁrst accepts an object before
it forwards the object. Throughout the execution, each node
accepts at most 2 objects, and hence sends/forwards at most 2
messages. This is regardless of how many objects are injected
by the malicious nodes. Now with multi-hop propagation, upon
receiving a certain object x, a relaying node B cannot tell
whether x will be accepted (despite B knowing an upper
bound d on the diameter of the network).5
Our observation. Our solution to the above problem will
be based on the following observation: When a node in the
overlay network relays an object, while it cannot predict
whether the object will be eventually accepted, the node can
nevertheless determine how “promising” it is for the object
to be accepted. Deﬁne a push to be the event of a node
sending/forwarding/relaying a certain object x, together with y
signatures on x, in a certain round t. Intuitively, smaller t and
larger y make it more likely for x to be later accepted. More
precisely, we assign each push a score of 2dy−t to summarize
how promising it is, based on the following intuition: Roughly
speaking, each signature gives the object an extra “lifespan”
of 2d rounds, and an object will be accepted as long as it
is received during its lifespan. The score 2dy − t is then the
residual “lifespan” when the push is done in round t. We call
a push with a higher score as a more promising push.
Now consider any node B, and all
the pushes that B
has ever done. Conceptually, if all the other pushes in the
network are triggered either directly or indirectly by B’s
pushes, then we will have the following nice property: If an
object contained in a more promising push is eventually not
accepted, then no objects contained in less promising pushes
will ever be accepted. Similarly, two objects contained in two
pushes with the same score must have the same outcome:
They are either both accepted or both rejected. (Our proofs
later will formalize these properties, and also fully capture the
interactions among pushes done by different nodes.)
Our solution. With the above observation, let us proceed with
the design of OVERLAYBB. There may be many objects that
5The crux here is that B does not know whether x can reach all nodes in
time. One naive idea is for B to refuse relaying x when the “residual lifespan”
of x is less than d rounds. This does not work because other honest nodes will
do so as well, which in turn means that B needs to see a “residual lifespan”
of at least 2d rounds. This argument keeps going on without converging, from
requiring 2d to 3d, 4d, and so on.
a node B needs to forward in a certain round t. In our design,
node B simply chooses the 2 objects whose corresponding
pushes would be the most promising, and forwards those
2 objects (effectively “materializing” those 2 pushes). Tie-
breaking can be done arbitrarily. Note that since t is ﬁxed
here, those will simply be the 2 objects with the most number
of signatures. (We nevertheless introduced the score of 2dy−t,
to facilitate later discussion.) If needed, to save storage space,
B can further discard all objects other than those 2 objects.
Some intuitions. Section VII will give formal correctness
proofs, but we provide some quick intuitions here. First, for-
warding 2 objects (instead of one) is necessary for correctness.
For example, consider the case where there would have been
2 objects eventually accepted, if every node had materialized
all possible pushes. Then forwarding only 1 object in each
round would lead to a wrong result. Second, forwarding 2
objects in each round is also sufﬁcient for correctness. Namely,
not “materializing” the other less promising pushes will not
cause any problem: If at least one of these two objects are not
eventually accepted, then those less promising pushes would
not contribute to the acceptance of any additional objects
anyway. If both objects are accepted, recall from Section III-A
that we no longer care about other objects, since we already
have a conﬂict.
B. Fragmentation, Delay, and Compensation
Avoid forwarding in every round. The design in Sec-
tion IV-A requires a node to forward 2 objects potentially in
every round. For example, this may happen when a malicious
broadcaster injects 2 objects in each round, with objects in
later rounds being more promising. To further improve R, we
want to avoid forwarding objects in every round. We achieve
this by using two phases. The ﬁrst phase uses the design
in Section IV-A to broadcast the hash of the object, where
a node forwards up to 2 hashes in every round (regardless
of how many hashes the adversary injects). At the end of
the ﬁrst phase, the honest nodes will all agree on a certain
hash. The second phase uses the design in Section IV-A again
to broadcast the object itself. We will focus on improving
the second phase, since the bandwidth bottleneck will be in
the second phase. Given the agreed-upon hash, in the second
phase, each node now only needs to forward (once) a single
object that matches the hash, in one single round. We call that
single round as the “busy” round. Of course, each node may
still have many signatures (for the object) to forward. But we
leave that to Section IV-C.
Naive parallelism fails. We have explained that among the
2dm rounds in the second phase, each node has only one
“busy” round. Given this, a naive attempt to improve R is
to use simple parallelism. Namely, we break the l-size object
into 2dm fragments, build a Merkle tree with all the fragments
being the leaves, and add the Merkle proof to each fragment.
The ﬁrst phase will now broadcast the Merkle root. The second
phase would then conceptually run 2dm parallel instances
of the protocol in Section IV-A, with one instance for each
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
51267
Fig. 1: Naive parallelism fails.
fragment. This seems to enable each node to fully utilize all
the bandwidth in the 2dm rounds, with one “busy” round from
each instance. Unfortunately, a malicious broadcaster controls
which round will be “busy” in each instance. It can thus align
all the “busy” rounds in all the instances, so that they all occur
at exactly the same time (Figure 1). This defeats this naive
design, regardless of how we arrange the 2dm instances.
Delay and compensation. Given that the adversary can choose
the “busy” round for each node, we might just as well start
all the parallel instances at the same time. Our ﬁrst idea is
that if on any node A, the “busy” rounds of two instances
collide in round t, then A will send the fragment x1 in the
ﬁrst instance in round t, and delay the sending of the fragment
x2 in the second instance to round t + 1. When a neighbor B
processes x2, B should compensate, and process x2 as if x2
were received one round earlier. Intuitively, A is essentially
telling B that because A was busy sending x1 to B in round
t, the fragment x2 is late by one round and is only sent in
round t + 1. Since B sees that A indeed sent x1 in round t,
B should be willing to compensate.
If the overlay topology were a line topology, the above idea
would work. In a more general topology, however, things get
complicated. For example in Figure 2, node C1 sends x1 to A
in round t− 1, while C2 sends x1 and x2 to A in round t and
t + 1, respectively. Then A will send x1 to B in round t, and
x2 to B in round t + 2. Despite all nodes being honest in this
example, B sees a one-round “gap” between A’s forwarding of
x1 and forwarding of x2. Generalizing this example can make
this “gap” contain many rounds. In such a case, B cannot be
sure how much it should compensate — in fact, since A could
be maliciously and intentionally add the “gap”, B cannot even
decide whether to compensate at all.
A classic result and its intuition. Before presenting our solu-
tion, we revisit a classic result [29] on competing propagations
in networks. Let x1 through xs be the total s fragments of the
object. Let us focus on the instance for xs, while assuming
for now that all other instances already work. (Section IV-C
will show that the last instance is the key.) The propagation
of xs may get delayed due to competing fragments in other
instances.
The classic result in [29] tells us that xs can be delayed
by at most s − 1 rounds. In particular, this is not d × (s − 1)
rounds, and is regardless of how the nodes prioritize different
fragments during propagation. The intuition behind this result
is also important. The intuition is that if xs is delayed at
node A for y rounds, then A must have been busy sending
some other y fragments. Once A forwards those y fragments
before xs, downstream nodes will have y fewer remaining
opportunities to delay xs.
Fig. 2: B sees a gap (i.e., round t+1) between A’s forwardings.
.
2d
Our solution. Guided by the above intuition, OVERLAYBB
does not have each node individually determine the amount of
compensation. Instead, we use a ﬁxed amount of compensation
together with a forerunner rule during forwarding. Speciﬁ-
cally, OVERLAYBB gives a ﬁxed compensation of s−1 rounds
for xs: Whenever any node B is about to send xs in round t,
node B decides whether to accepted xs, as if xs were about to
be sent in round t− (s− 1). (If t− (s− 1) < 0, we view it as
0.) For example, if B is a committee member, then B checks
whether the number of signatures on xs is at least t−(s−1)
Next, OVERLAYBB requires nodes to follow a simple
forerunner rule during forwarding: Before a node sends xs, it
is required to have already sent all the other s − 1 fragments.
(Those s − 1 fragments can be sent in any ordering and in
any rounds, potentially with “gaps” among such forwardings.)
By the earlier intuition, doing so ensures that when xs is
sent and when the compensation of s − 1 is applied, all the
possible delays for xs have already occurred, and there will be
no further delays for xs during propagation. Note that since
an honest node needs to forward all fragments anyway, the
restriction from the forerunner rule has no negative effects on
honest nodes. If a malicious node sends xs to an honest node
A, without having sent all the other fragments in previous
rounds, then A simply ignores this message.
Quick summary. Section VII will give security analysis for
the above design. As a quick summary, the classic result from
[29] suggests that compensation of s−1 rounds will always be
sufﬁcient. The intuition behind this classic result, together with
our forerunner rule, roughly suggests that if xs has already
experienced a delay of s − 1 round by the time that a node
B sends xs, then xs will not experience further delays in
downstream honest nodes. This ultimately implies that the key
invariant from the Dolev-Strong protocol [8] still holds: When
a node accepts xs, it knows that it can make all other nodes
accept xs within a 2d rounds.
C. Forwarding Signatures and Combining the Two Phases
Forwarding signatures. Section IV-B ignored the overhead
of sending the signatures. To minimize such overhead, OVER-
LAYBB only uses signatures on the last fragment xs. The
other fragments do not carry signatures, and there is no notion
of acceptance for each such fragment individually. The entire
object (i.e., all its s fragments) is accepted iff xs is accepted.
To intuitively see why this works, note that by our forerunner
rule, if xs is accepted, then the node must have previously
sent (and hence seen) all the other s − 1 fragments. Thus if a
node accepts xs, it must be able to reconstruct the object from
all the fragments. Furthermore, if all the honest nodes agree
on whether xs is accepted, they must also have agreement
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
61268
adversary aligns busy roundsbroadcastinstancebusy round𝐶𝐶1𝐶𝐶2𝐴𝐴𝐵𝐵𝐶𝐶1𝐶𝐶2𝐴𝐴𝐵𝐵𝐶𝐶1𝐶𝐶2𝐴𝐴𝐵𝐵𝐶𝐶1𝐶𝐶2𝐴𝐴𝐵𝐵𝑥𝑥1𝑥𝑥1𝑥𝑥1𝑥𝑥2𝑥𝑥2round 𝑡𝑡−1round 𝑡𝑡round 𝑡𝑡+1round 𝑡𝑡+2on whether the object is accepted. As a further optimization,
since xs is the only fragment carrying signatures, we want to
make xs as small as possible. To do so, the broadcaster simply
chooses a random nonce as xs, and the object is now split into
only s − 1 fragments.
Running the two phases in parallel. The design in Sec-
tion IV-B requires two sequential phases: the ﬁrst phase for
the Merkle root and the second phase for the object itself. To
further improve performance, we next explain how to run these
two phases in parallel, using the following two modiﬁcations.
First, a node in the second phase needs to determine whether
a fragment is a leave of the Merkle tree with root r, where
r is agreed upon at the end of the ﬁrst phase. When the two
phases run in parallel, such determination cannot be easily
made anymore. But recall from Section IV-A that every node
A assigns a score to every push that it has ever done. Such a
score captures how promising the push is. Now with the two
phases running concurrently, in the (concurrent) second phase,
node A simply uses the Merkle root rA contained in its most
promising push done so far in the ﬁrst phase, as its current
guess for r. Our later proof will show that using such a guess
sufﬁces to ensure the correctness of the protocol.
Second, let tA be the round during which A is about to
send the last fragment xs in the second phase. Previously in
Section IV-B, A would decide whether to accept xs based on
the value of tA. Now that the two phases run in parallel, we
root be the
need to adjust this part as well. Speciﬁcally, let tA
round during which A accepts r in the ﬁrst phase, and deﬁne
root +s−1). When deciding whether to accept
tA
frag = max(tA, tA
xs, node A will make the decision as if xs were sent in round
frag (instead of in round tA). The exact reasoning behind this
tA
frag term is slightly complex. For the lack of space, instead of