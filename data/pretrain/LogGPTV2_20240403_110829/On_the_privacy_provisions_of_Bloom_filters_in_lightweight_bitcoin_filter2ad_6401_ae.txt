### Table 5: Measuring |B1 ∩ B2| in Experiments 1, 2, and 3

| Data Point | Value |
|------------|-------|
| 0.1        |       |
| 0.5        |       |
| 0.05       |       |
| 0.1        |       |
| 0.5        |       |
| 0          |       |
| 0          |       |
| 0          |       |
| 0.13       |       |
| 11.27      |       |
| 4.21       |       |
| 18.06      |       |
| 523.20     |       |
| 7.37       |       |
| 30.01      |       |
| 753.41     |       |

**Table 5:** Measuring the intersection size |B1 ∩ B2| in Experiments 1, 2, and 3 using filters for different SPV clients with respect to a target false positive rate (Pt). Each data point is averaged over 10 independent runs.

### Observations

**Observation 1:**
The number of elements inserted into a Bloom filter significantly affects its false positive rate. This is particularly true when the filter size is modest (e.g., < 500). To achieve the target false positive rate (Pf(m) = Pt), the number of elements inserted should match the filter's size.

**Observation 2:**
Acquiring multiple Bloom filters from an SPV client can substantially reduce privacy. Therefore, constructing multiple Bloom filters per SPV client should be avoided. If multiple filters are necessary, they should be constructed with different initial seeds and contain different elements to minimize the advantage gained by an adversary who acquires two or more filters.

**Observation 3:**
SPV clients should maintain state information about their outsourced Bloom filters (e.g., on persistent storage) to avoid the need to re-compute a filter containing the same elements with different parameters.

**Observation 4:**
Inserting both the public key and the public key hash (the address) in the Bloom filter provides a sufficient distinguisher for an adversary to guess whether an address is a true positive. For the most common transaction type, Pubkey Hash (P2PKH), inserting the hash of the public key is sufficient. However, for other transaction types, it may be beneficial to store the public key in the Bloom filter. In such cases, the client should insert either the Bitcoin address or its corresponding public key (but not both) in the same Bloom filter. Experimental results show that for almost 99% of all addresses in the network, it suffices to insert either the public key or the public key hash within the same Bloom filter to receive all relevant transactions destined for the address.

### Our Solution

Based on the observations, we propose the following solution:

1. **Initial Setup:**
   - During the first setup, each SPV client generates N Bitcoin addresses and embeds them in a Bloom filter with M = m = N.
   - The Bloom filter is constructed with a realistic target false positive rate (Pt), which, combined with N and M, results in a target privacy level (cf. Equation 3).
   - Since M = m, the Bloom filter's false positive rate matches Pt (cf. Section 4).
   - Only the address is inserted into each filter.

2. **Address Management:**
   - If the user does not use all N addresses, some will remain unrevealed in the wallet.
   - When users run out of addresses, they repeat the setup process, creating an additional set of N addresses and embedding them in a new Bloom filter with a new initial seed, M = m = N, and the previously chosen Pt.
   - The advantage of an adversary capturing one or more Bloom filters from the same SPV client is negligible since these filters do not have any common elements.

3. **State Maintenance:**
   - SPV clients must keep state information about each Bloom filter to avoid re-computation if the client restarts.
   - The required storage overhead is minimal: 4 bytes for the number of addresses, 8 bytes for the target false positive rate, 8 bytes for the seed value, 2 bytes for the BloomUpdate flag, and 2 bytes per address for pointers.
   - For N = 100, the total storage per Bloom filter is 220 bytes, which is easily tolerable in existing SPV client implementations.

4. **Integration and Overhead:**
   - Our solution can be directly integrated into existing SPV clients with minor modifications.
   - The only overhead is the pre-generation of N Bitcoin addresses at setup and the storage space for each generated Bloom filter.

### Additional Considerations

- **Side-Channel Information:**
  - Our analysis and solution do not address the case where an adversary can link addresses using side-channel information from the Bitcoin blockchain, such as filtering false positives by date or clustering Bitcoin addresses based on user behavior.
  - Our proposed solution can be used in conjunction with existing solutions to prevent such linking.

- **False Positive Rate:**
  - An adversary with access to the Bitcoin blockchain can observe that recently used addresses by an SPV client match the Bloom filter, reducing the privacy of newly used addresses.
  - In our solution, Pt defines the minimum anonymity set size of each address.

- **Alternative Approach:**
  - Embedding existing Bitcoin addresses that do not belong to the node in each Bloom filter is an alternative, but it also results in an anonymity set defined by Pt and incurs computational overhead.

### Conclusion

Our results show that Bloom filters in existing SPV client implementations can lead to significant privacy leakage, especially for users with a modest number of Bitcoin addresses. We propose a lightweight solution that enhances privacy and can be integrated into existing SPV client implementations with minimal modifications.

### References

[1] Core Development Status Report # 1 - Bitcoin, Available from https://bitcoinfoundation.org/2012/11/01/core-development-status-report-1/.

[2] BitcoinJ, Available from http://bitcoinj.github.io/.

[3] BitcoinJ limitations, Available from http://bitcoinj.github.io/limitations.

[4] TOR project. Available from: https://www.torproject.org/.

[5] Bitcoin Gateway, A Peer-to-peer Bitcoin Vault and Payment Network, 2011. Available from http://arimaa.com/bitcoin/.

[6] Bitcoin: Tempering the Digital Ring of Gyges or Implausible Pecuniary Privacy, 2011. Available from http://ssrn.com/abstract=1937769 or doi: 10.2139/ssrn.1937769.

[7] Bitcoin Blockchain parser, 2013. Available from: https://github.com/znort987/blockparser.

[8] Bitcoin Wallet, Android, 2014. Available from: https://play.google.com/store/apps/details?id=de.schildbach.wallet.

[9] BitcoinJ, privacy assumptions, 2014. Available from: https://github.com/bitcoinj/bitcoinj/blob/ee2a91010e5cf66299684160d6a48a108ff2299b/core/src/main/java/com/google/bitcoin/core/PeerGroup.java#L250.

[10] Elli Androulaki and Ghassan Karame. Hiding transaction amounts and balances in bitcoin. In Proceedings of International Conference on Trust & Trustworthy Computing (TRUST), 2014.

[11] Elli Androulaki, Ghassan Karame, and Srdjan Capkun. Evaluating user privacy in bitcoin. 2013. http://eprint.iacr.org/2012/596.pdf.

[12] S. Barber, X. Boyen, E. Shi, and E. Uzun. Bitter to Better - How to Make Bitcoin a Better Currency. In Proceedings of Financial Cryptography and Data Security, 2012.

[13] Giuseppe Bianchi, Lorenzo Bracciale, and Pierpaolo Loreti. Better than nothing privacy with bloom filters: To what extent? In Privacy in Statistical Databases, pages 348–363. Springer, 2012.

[14] Burton H Bloom. Space/time trade-offs in hash coding with allowable errors. Communications of the ACM, 13(7):422–426, 1970.