title:Understanding the Security of ARM Debugging Features
author:Zhenyu Ning and
Fengwei Zhang
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Understanding the Security of ARM Debugging
Features
Zhenyu Ning and Fengwei Zhang
COMPASS Lab, Department of Computer Science
Wayne State University
{zhenyu.ning, fengwei}@wayne.edu
Abstract—Processors nowadays are consistently equipped with
debugging features to facilitate the program analysis. Speciﬁcally,
the ARM debugging architecture involves a series of CoreSight
components and debug registers to aid the system debugging,
and a group of debug authentication signals are designed to
restrict the usage of these components and registers. Meantime,
the security of the debugging features is under-examined since
it normally requires physical access to use these features in the
traditional debugging model. However, ARM introduces a new
debugging model that requires no physical access since ARMv7,
which exacerbates our concern on the security of the debugging
features. In this paper, we perform a comprehensive security
analysis of the ARM debugging features, and summarize the
security and vulnerability implications. To understand the impact
of the implications, we also investigate a series of ARM-based
platforms in different product domains (i.e., development boards,
IoT devices, cloud servers, and mobile devices). We consider the
analysis and investigation expose a new attacking surface that
universally exists in ARM-based platforms. To verify our con-
cern, we further craft NAILGUN attack, which obtains sensitive
information (e.g., AES encryption key and ﬁngerprint image) and
achieves arbitrary payload execution in a high-privilege mode
from a low-privilege mode via misusing the debugging features.
This attack does not rely on software bugs, and our experiments
show that almost all the platforms we investigated are vulnerable
to the attack. The potential mitigations are discussed from
different perspectives in the ARM ecosystem.
I. INTRODUCTION
Most of the processors today utilize a debugging architec-
ture to facilitate the on-chip debugging. For example, the x86
architecture provides six debug registers to support hardware
breakpoints and debug exceptions [32], and the Intel Processor
Trace [33] is a hardware-assisted debugging feature that gar-
ners attention in recent research [65], [73]. The processors with
ARM architecture have both debug and non-debug states, and
a group of debug registers is designed to support the self-host
debugging and external debugging [4], [5]. Meanwhile, ARM
also introduces hardware components, such as the Embedded
Trace Macrocell [9] and Embedded Cross Trigger [8],
to
support various hardware-assisted debugging purposes.
Correspondingly, the hardware vendors expose the afore-
mentioned debugging features to an external debugger via on-
chip debugging ports. One of the most well-known debugging
port is the Joint Test Action Group (JTAG) port deﬁned by
IEEE Standard 1149.1 [31], which is designed to support
communication between a debugging target and an external
debugging tool. With the JTAG port and external debugging
Traditional Debugging Model
Inter-processor Debugging Model
A System on Chip
A System on Chip
Processor
(Target)
Processor
(Target)
Processor
(Host)
Processor
(Target)
Debug Access Port
JTAG 
connection
An Off-Chip Debugger
(Host)
Memory-mapped 
Interface
Debug Access Port
Figure 1: Debug Models in ARM Architecture.
tools (e.g., Intel System Debugger [34], ARM DS-5 [7], and
OpenOCD [53]), developers are able to access the memory
and registers of the target efﬁciently and conveniently.
To authorize external debugging tools in different us-
age scenarios, ARM designs several authentication signals.
Speciﬁcally, four debug authentication signals control whether
the non-invasive debugging or invasive debugging (see Sec-
tion II-B) is prohibited when the target processor is in non-
secure or secure state. For example, once the secure invasive
debugging signal
is disabled via the debug authentication
interface, the external debugging tool will not be able to halt
a processor running in the secure state for debugging purpose.
In this management mechanism, the current privilege mode of
the external debugger is ignored.
Although the debugging architecture and authentication
signals have been presented for years, the security of them
is under-examined by the community since it normally re-
quires physical access to use these features in the traditional
debugging model. However, ARM introduces a new debugging
model that requires no physical access since ARMv7 [4]. As
shown in the left side of Figure 1, in the traditional debugging
model, an off-chip debugger connects to an on-chip Debug
Access Port (DAP) via the JTAG interface, and the DAP
further helps the debugger to debug the on-chip processors.
In this model, the off-chip debugger is the debug host, and
the on-chip processors are the debug target. The right side
of Figure 1 presents the new debugging model introduced
since ARMv7. In this model, a memory-mapped interface is
used to map the debug registers into the memory so that the
on-chip processor can also access the DAP. Consequently,
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:59)(cid:73)(cid:70)(cid:79)(cid:90)(cid:86)(cid:1)(cid:47)(cid:74)(cid:79)(cid:72)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:23)(cid:18)
(cid:23)(cid:17)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
an on-chip processor can act as a debug host and debug
another processor (the debug target) on the same chip; we
refer to this debugging model as the inter-processor debugging
model. Nevertheless, ARM does not provide an upgrade on
the privilege management mechanism for the new debugging
model, and still uses the legacy debug authentication signals
in the inter-processor debugging model, which exacerbates our
concern on the security of the debugging features.
In this paper, we dig into the ARM debugging architecture
to acquire a comprehensive understanding of the debugging
features, and summarize the security implications. We note that
the debug authentication signals only take the privilege mode
of the debug target into account and ignore the privilege mode
of the debug host. It works well in the traditional debugging
model since the debug host is an off-chip debugger in this
model, and the privilege mode of the debug host is not relevant
to the debug target. However, in the inter-processor debugging
model, the debug host and debug target locate at the same
chip and share the same resource (e.g., memory and registers),
and reusing the same debug authentication mechanism leads to
the privilege escalation via misusing the debugging features.
With help of another processor, a low-privilege processor can
obtain arbitrary access to the high-privilege resource such as
code, memory, and registers. Note that the low-privilege in
this paper mainly refers to the kernel-level privilege, while the
high-privilege refers to the secure privilege levels provided by
TrustZone [12] and the hypervisor-level privilege.
This privilege escalation depends on the debug authenti-
cation signals. However, ARM does not provide a standard
mechanism to control these authentication signals, and the
management of these signals highly depends on the System-
on-Chip (SoC) manufacturers. Thus, we further conduct an ex-
tensive survey on the debug authentication signals in different
ARM-based platforms. Speciﬁcally, we investigate the default
status and the management mechanism of these signals on the
devices powered by various SoC manufacturers, and the target
devices cover four product domains including development
boards, Internet of Things (IoT) devices, commercial cloud
platforms, and mobile devices.
In our investigation, we ﬁnd that the debug authentication
signals are fully or partially enabled on the investigated
platforms. Meantime, the management mechanism of these
signals is either undocumented or not fully functional. Based
on this result, we craft a novel attack scenario, which we
call NAILGUN1. NAILGUN works on a processor running in
a low-privilege mode and accesses the high-privilege con-
tent of the system without restriction via the aforementioned
new debugging model. Speciﬁcally, with NAILGUN, the low-
privilege processor can trace the high-privilege execution and
even execute arbitrary payload at a high-privilege mode. To
demonstrate our attack, we implement NAILGUN on commer-
cial devices with different SoCs and architectures, and the
experiment results show that NAILGUN is able to break the
privilege isolation enforced by the ARM architecture. Our
1Nailgun is a tool that drives nails through the wall—breaking the isolation
experiment on Huawei Mate 7 also shows that NAILGUN
can leak the ﬁngerprint image stored in TrustZone from the
commercial mobile phones. In addition, we present potential
countermeasures to our attack in different perspectives of the
ARM ecosystem. Note that the debug authentication signals
cannot be simply disabled to avoid the attack, and we will
discuss this in Section VI.
Our ﬁndings have been reported to the related hardware
manufacturers including IoT device vendors such as Raspberry
PI Foundation [58], commercial cloud providers such as
miniNode [47], Packet [55], Scaleway [63], and mobile device
vendors such as Motorola [49], Samsung [60], Huawei [27],
Xiaomi [72]. Meanwhile, SoC manufacturers are notiﬁed by
their customers (e.g., the mobile device vendors) and working
with us for a practical solution. We have also notiﬁed ARM
about the security implications.
The hardware debugging features have been deployed to the
modern processors for years, and not enough attention is paid
to the security of these features since they require physical
access in most cases. However, it turns out to be vulnerable in
our analysis when the multiple-processor systems and inter-
processor debugging model are involved. We consider this
as a typical example in which the deployment of new and
advanced systems impacts the security of a legacy mechanism.
The intention of this paper is to rethink the security design of
the debugging features and motivate the researchers/developers
to draw more attention to the “known-safe” or “assumed-safe”
components in the existing systems.
We consider the contributions of our work as follows:
• We dig into the ARM debugging architecture to acquire a
comprehensive understanding of the debugging features,
and summarize the vulnerability implications. To our best
knowledge, this is the ﬁrst security study on the ARM
debugging architecture.
• We investigate a series of ARM-based platforms in differ-
ent product domains to examine their security in regard
to the debugging architecture. The result shows that most
of these platforms are vulnerable.
• We expose a potential attack surface that universally
exists in ARM-based devices. It is not related to the
software bugs, but only relies on the ARM debugging
architecture.
• We implement NAILGUN attack and demonstrate the
feasibility of the attack on different ARM architectures
and platforms including 64-bit ARMv8 Juno Board, 32-
bit ARMv8 Raspberry PI 3 Module B+, and ARMv7
Huawei Mate 7. To extend the breadth of the attack,
we design different attacking scenarios based on both
non-invasive and invasive debugging features. With the
experiments, we show that NAILGUN can lead to arbitrary
payload execution in a high-privilege mode and leak sen-
sitive information from Trusted Execution Environments
(TEEs) in commercial mobile phones.
• We propose the countermeasures to our attacks from
different perspectives in the ARM ecosystem.
(cid:23)(cid:17)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
ARM
1
SoC
Manufacturer
2
3
OEM
End User
ARM licenses technology (e.g., ARMv8 architecture and Cortex 
processor) to the SoC Manufacturers (e.g., Qualcomm).
and modify the processor state via the Debug Access Port
(DAP). In the monitor-debug mode, the processor takes a
debug exception instead of halting when the debug events
occur. A special piece of software, known as a monitor, can
take control and alter the process state accordingly.
The SoC Manufacturers develop chips (e.g., Snapdragon SoCs) for the 
OEMs (e.g., Samsung and Google).
C. ARM Debug Authentication Signals
1
2
3
The OEMs produce devices (e.g., Galaxy S and Pixel) for the End 
Users.
Figure 2: Relationships in the ARM Ecosystem.
The rest of the paper is organized as follows. First, we
describe the background in Section II. Next,
the security
implications of the debugging architecture are discussed in
Section III. Then, we present our investigation of the debug
authentication signals on real devices in Section IV. Based
on the implications and the investigation, we demonstrate
NAILGUN attack in Section V and discuss the countermeasures
in Section VI. Finally, Section VII concludes the paper.
II. BACKGROUND
A. ARM, SoC Manufacturer, and OEM
Figure 2 shows the relationship among the roles in the ARM
ecosystem. ARM designs SoC infrastructures and processor
architectures as well as implementing processors like the
Cortex series. With the design and licenses from ARM, the
SoC manufacturers, such as Qualcomm, develop chips (e.g.,
Snapdragon series) that integrate ARM’s processor or some
self-designed processors following ARM’s architecture. The
OEMs (e.g., Samsung and Google) acquire these chips from
the SoC manufacturers, and produce devices such as PC and
smartphone for end users.
Note that
the roles in the ecosystem may overlap. For
example, ARM develops its own SoC like the Juno boards,
and Samsung also plays a role of the SoC manufacturer and
develops the Exynos SoCs.
B. ARM Debugging Architecture
The ARM architecture deﬁnes both invasive and non-
invasive debugging features [4], [5]. The invasive debugging is
deﬁned as a debug process where a processor can be controlled
and observed, whereas the non-invasive debugging involves
observation only without the control. The debugging features
such as breakpoint and software stepping belong to the inva-
sive debugging since they are used to halt the processor and
modify its state, while the debugging features such as tracing
(via the Embedded Trace Macrocell) and monitoring (via the
Performance Monitor Unit) are non-invasive debugging.
The invasive debugging can be performed in two different
modes: the halting-debug mode and the monitor-debug mode.
In the halting-debug mode, the processor halts and enters the
debug state when a debug event (e.g., a hardware breakpoint)
occurs. In the debug state, the processor stops executing the
instruction indicated by the program counter, and a debugger,
either an on-chip component such as another processor or an
off-chip component such as a JTAG debugger, can examine
ARM deﬁnes four signals for external debug authentication,
i.e., DBGEN, NIDEN, SPIDEN, and SPNIDEN. The DBGEN
signal controls whether the non-secure invasive debug is
allowed in the system. While the signals DBGEN or NIDEN is
high, the non-secure non-invasive debug is enabled. Similarly,
the SPIDEN signal and SPNIDEN signal are used to control
the secure invasive debug and secure non-invasive debug,
respectively. Note that these signals consider only the privilege
mode of the debug target, and the privilege mode of the debug
host is left out.
In the ARM Ecosystem, ARM only designs these signals
but speciﬁes no standard to control these signals. Typically, the
SoC manufacturers are responsible for designing a mechanism
to manage these signals, but
the management mechanism
in different SoCs may vary. The OEMs are in charge of
employing the management mechanisms to conﬁgure (i.e.,
disable/enable) the authentication signals in their production
devices.
D. ARM CoreSight Architecture
The ARM CoreSight architecture [6] provides solutions for
debugging and tracing of complex SoCs, and ARM designs a
series of hardware components under the CoreSight architec-
ture. In this paper, we mainly use the CoreSight Embedded
Trace Macrocell and the CoreSight Embedded Cross Trigger.
The Embedded Trace Macrocell (ETM) [9] is a non-
invasive debugging component that enables the developer to
trace instruction and data by monitoring instruction and data
buses with a low-performance impact. To avoid the heavy
performance impact, the functionality of the ETM on different
ARM processors varies.
The Embedded Cross Trigger (ECT) [8] consists of Cross
Trigger Interface (CTI) and Cross Trigger Matrix (CTM). It
enables the CoreSight components to broadcast events between
each other. The CTI collects and maps the trigger requests, and
broadcasts them to other interfaces on the ECT subsystem.
The CTM connects to at least two CTIs and other CTMs to
distribute the trigger events among them.
E. ARM Security Extension
The ARM Security Extension [12], known as TrustZone
technology, allows the processor to run in the secure and non-
secure states. The memory is also divided into secure and
non-secure regions so that the secure memory region is only
accessible to the processors running in the secure state.
In ARMv8 architecture [5], the privilege of a processor
depends on its current Exception Level (EL). EL0 is normally
used for user-level applications while EL1 is designed for the
kernel, and EL2 is reserved for the hypervisor. EL3 acts as
(cid:23)(cid:17)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
a gatekeeper between the secure and non-secure states, and
owns the highest privilege in the system. The switch between
the secure and non-secure states occurs only in EL3.
III. SECURITY IMPLICATIONS OF THE DEBUGGING
ARCHITECTURE
As mentioned in Section II-B, non-invasive debugging and
invasive debugging are available in ARM architecture. In
this section, we carefully investigate the non-invasive and
invasive debugging mechanisms documented in the Technique
Reference Manuals (TRM) [4], [5], and reveal the vulnerability
and security implications indicated by the manual. Note that
we assume the required debug authentication signals are
enabled in this section, and this assumption is proved to
be reasonable and practical in the following Section IV.
A. Non-invasive Debugging
The non-invasive debugging does not allow to halt a pro-
cessor and introspect the state of the processor. Instead, non-
invasive features such as the Performance Monitor Unit (PMU)
and Embedded Trace Macrocell (ETM) are used to count the
processor events and trace the execution, respectively.
In the ARMv8 architecture, the PMU is controlled by a
group of registers that are accessible in non-secure EL1.
However, we ﬁnd that ARM allows the PMU to monitor the
events ﬁred in EL2 even when the NIDEN signal is disabled 2.
Furthermore, the PMU can monitor the events ﬁred in the
secure state including EL3 with the SPNIDEN signal enabled.
In other words, an application with non-secure EL1 privilege
is able to monitor the events ﬁred in EL2 and the secure
state with help of the debug authentication signals. The TPM
bit of the MDCR register is introduced in ARMv8 to restrict
the access to the PMU registers in low ELs. However, this
restriction is only applied to the system register interface but
not the memory-mapped interface [5].
The ETM traces the instructions and data streams of a target
processor with a group of conﬁguration registers. Similar to the
PMU, the ETM is able to trace the execution of the non-secure
state (including EL2) and the secure state with the NIDEN and