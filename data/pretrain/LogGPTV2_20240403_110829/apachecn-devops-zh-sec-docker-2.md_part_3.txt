该映像现已准备好供我们组织中的其他用户使用。由于该映像位于我们的可信注册表中，因此我们可以控制客户端对该映像的访问。这可能意味着我们的客户将需要我们的证书和密钥，以便能够推送和提取此映像，以及我们在上一节中讨论的组织设置中设置的权限。
```
$ docker pull /mysql
```
然后，我们可以运行映像，如果需要的话进行更改，并根据需要将新创建的映像推回到可信的注册服务器。
# Docker 登记处
如果你想完全靠自己，Docker 注册表是一个开放源码选项。如果你完全不想插手，你可以一直使用 Docker Hub，并依赖公共和私有存储库，这将使你在 Docker Hub 上运行一笔费用。这可以本地托管在您选择的服务器或云服务上。
## 安装
Docker 注册表的安装非常简单，因为它运行在 Docker 容器中。这允许您几乎在任何地方运行它，在您自己的服务器环境或云环境中的虚拟机上。使用的典型端口是端口`5000`，但您可以根据自己的需要进行更改:
```
$ docker run -d -p 5000:5000 --restart=always  --name registry registry:2.2
```
您将从上面注意到的其他项目之一是，我们正在指定要使用的版本，而不是将其留空并提取最新版本。这是因为在撰写本书时，该注册表标签的最新版本仍然是 0.9.1 版。现在，虽然这可能适合一些人，但是版本 2 足够稳定，可以考虑并运行您的生产环境。我们还引入了`--restart=always`标志，因为在容器发生一些事情的情况下，它将重新启动，并可用于提供或接受映像。
运行上述命令后，您将在运行该命令的 Docker 主机的 IP 地址上拥有一个正在运行的容器注册表，以及您在上述`docker run`命令中使用的端口选择。
现在是时候把一些图片放到你的新注册表上了。我们需要的第一件事是一个映像来推送到注册表，我们可以通过两种方式做到这一点。我们可以基于我们已经创建的 Docker 文件构建映像，或者我们可以从另一个注册表中下拉映像，在我们的例子中，我们将使用 Docker Hub，然后将该映像推送到我们的新注册表服务器。首先，我们需要选择一个映像，再次，我们将默认回`mysql`映像，因为这是一个更受欢迎的映像，大多数人可能会在他们的环境中使用一段时间。
```
$ docker pull mysql
Using default tag: latest
latest: Pulling from library/mysql
1565e86129b8: Pull complete
a604b236bcde: Pull complete
2a1fefc8d587: Pull complete
f9519f46a2bf: Pull complete
b03fa53728a0: Pull complete
ac2f3cdeb1c6: Pull complete
b61ef27b0115: Pull complete
9ff29f750be3: Pull complete
ece4ebeae179: Pull complete
95255626f143: Pull complete
0c7947afc43f: Pull complete
b3a598670425: Pull complete
e287fa347325: Pull complete
40f595e5339f: Pull complete
0ab12a4dd3c8: Pull complete
89fa423a616b: Pull complete
Digest: sha256:72e383e001789562e943bee14728e3a93f2c3823182d14e3e01b3fd877976265
Status: Downloaded newer image for mysql:latest
```
接下来，您需要标记映像，以便它现在指向您的新注册表，这样您就可以将它推到新位置:
```
$ docker tag mysql :5000/mysql
```
让我们分解上面的命令。我们正在做的是将`:5000/mysql`的标签应用到我们从 Docker Hub 中提取的`mysql`映像。现在``片段将被运行注册表容器的 Docker 主机的 IP 地址所替换。这也可以是一个域名，只要该域名指向 Docker 主机上运行的正确 IP。我们还需要为我们的注册服务器指定端口号，在我们的例子中，我们把它留在了端口`5000`，所以我们在标签中包含:`5000`。然后，我们要在命令的最后给它同样的`mysql`。我们现在准备将此映像推送到我们的新注册表中。
```
$ docker push :5000/mysql
```
推送后，您现在可以从另一台配置了 Docker 并可以访问注册表服务器的机器上将其拉下。
```
$ docker pull :5000/mysql
```
我们在这里看到的是默认设置，虽然如果您想使用防火墙等来保护环境甚至内部 IP 地址的安全，它可能会起作用，但您可能仍然想将安全性提升到下一个级别，这就是我们将在下一节中看到的内容。我们怎样才能让这个更安全？
## 配置和安全性
是时候用一些额外的功能来收紧我们的运行注册表了。第一种方法是使用顶级域名系统运行你的注册表。使用 TLS，您可以将证书应用到系统中，这样从系统中提取证书的人就可以知道它就是您所说的那个人，因为他们知道某个人没有组成服务器，或者正在通过向您提供受损的映像来进行中间人攻击。
要做到这一点，我们将需要重做我们在上一节中运行的 Docker `run`命令。这将假设您已经完成了从企业环境中获取证书和密钥的一些过程，或者您已经使用另一个软件对证书和密钥进行了自我签名。
我们的新命令如下所示:
```
$ docker run -d -p 5000:5000 --restart=always --name registry \
 -e REGISTRY_HTTP_TLS_CERTIFICATE=server.crt \
 -e REGISTRY_HTTP_TLS_KEY=server.key \
 -v / \ 
 registry:2.2.0
```
您需要在证书所在的目录中，或者在上面的命令中指定证书的完整路径。同样，我们保留了`5000`的标准端口，以及注册表的名称。你也可以把它改成更适合你的东西。为了这本书，我们会让它与官方文档中的内容保持一致，以防你在那里寻找更多的参考。接下来，我们给`run`命令增加两行:
```
 -e REGISTRY_HTTP_TLS_CERTIFICATE=server.crt \
 -e REGISTRY_HTTP_TLS_KEY=server.key \
```
这将允许您指定将要使用的证书和密钥文件。这两个文件需要在运行 run 命令的同一个目录中，因为环境变量会在运行时查找它们。现在，如果您愿意，您还可以在 run 命令中添加一个卷开关，使它更加干净，并将证书和密钥放在该文件夹中，并以这种方式运行注册表服务器。
另一种帮助提高安全性的方法是在注册服务器上设置用户名和密码。这将有助于当用户想要推或拉一个项目，因为他们将需要用户名和密码信息。这个问题的关键是你必须结合使用 TLS 和这个方法。这种用户名和密码方法不是一个独立的选项。
首先，您需要创建一个密码文件，将在您的`run`命令中使用:
```
$ docker run --entrypoint htpasswd registry:2.2.0 -bn   > htpasswd
```
现在，理解这里发生的事情可能有点令人困惑，所以在跳到`run`命令之前，让我们先弄清楚这一点。首先，我们发出`run`命令。这个命令将运行`registry:2.2.0`容器，它的入口点指定意味着运行`htpasswd`命令以及`-bn`开关，这将以加密的方式将`username`和`password` 注入到一个名为`htpasswd` 的文件中，您将在注册服务器上使用该文件进行身份验证。`-b`表示以批处理模式运行，而`-n`表示显示结果，`>`表示将这些项目放入文件中，而不是放入实际的输出屏幕中。
现在，在我们新增强的、完全安全的注册表 Docker `run`命令上:
```
$ docker run -d -p 5000:5000 --restart=always --name registry \
 -e "REGISTRY_AUTH=htpasswd" \
 -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Name" \
 -e REGISTRY_AUTH_HTPASSWD_PATH=htpasswd \
 -e REGISTRY_HTTP_TLS_CERTIFICATE=server.crt \
 -e REGISTRY_HTTP_TLS_KEY=server.key \
 registry:2.20
```
同样，这是一个很大的消化，但让我们走一遍。我们之前在中看到过其中的一些台词:
```
 -e REGISTRY_HTTP_TLS_CERTIFICATE=server.crt \
 -e REGISTRY_HTTP_TLS_KEY=server.key \
```
新的是:
```
 -e "REGISTRY_AUTH=htpasswd" \
 -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Name" \
 -e REGISTRY_AUTH_HTPASSWD_PATH=htpasswd \
```
第一个告诉注册服务器使用`htpasswd`作为其验证客户端的方法。第二个给你的注册表一个名字，你可以自行更改。最后一个告诉注册服务器用于`htpasswd`认证的文件的位置。同样，您将需要使用卷并将`htpasswd`文件放入容器中自己的卷中，以便以后更容易更新。执行 Docker `run`命令时，您还需要记住`htpasswd`文件需要与证书和密钥文件放在同一个目录中。
# 总结
在本章中，我们已经了解了如何使用 Docker 内容信任的组件对您的映像进行签名，以及如何使用 Docker 内容信任和第三方实用程序(以 YubiKeys 的形式)进行硬件签名。我们还看了 Docker Subscription，您可以利用它来帮助设置安全的 Docker 环境，以及 Docker 本身支持的环境。然后，我们将 DTR 视为一个解决方案，您可以使用它来存储您的 Docker 映像。最后，我们看了 Docker 注册表，这是一个自我托管的注册表，您可以使用它来存储和管理您的映像。本章应该有助于为您提供足够的配置项目，以帮助您做出正确的决定，在哪里存储您的映像。
在下一章中，我们将研究如何保护/强化 Linux 内核。因为内核是用来运行所有容器的，所以以适当的方式保护它以帮助缓解任何安全相关问题是很重要的。我们将介绍一些可用于实现这一目标的强化指南。