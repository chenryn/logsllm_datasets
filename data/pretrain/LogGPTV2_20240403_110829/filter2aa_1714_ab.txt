### 漏洞利用概述

在漏洞利用过程中，通过将指向shellcode的指针填充到缓冲区中，可以覆盖SfnINOUTNCCALCSIZE的返回地址，并劫持程序执行流。此外，该漏洞会生成由攻击者控制的lParam结构的异步复制。

### CVE-2018-8589及其开发框架

CVE-2018-8589是一个更大的开发框架的一部分，具有以下功能：
- **杀毒软件逃逸**：利用trampolines绕过emet.dll检测。
- **可靠的漏洞利用选择**：根据目标环境选择最合适的漏洞利用方式。
- **DKOM（Direct Kernel Object Manipulation）**：用于安装rootkit。

#### 框架目的
1. **杀毒软件逃逸**
   - 如果系统中不存在emet.dll，漏洞利用程序将使用trampolines来执行所有功能。
   - 在系统库的文本部分搜索模式，并构建虚假堆栈以执行函数。
     ```assembly
     /* build fake stack */
     push    ebp
     mov     ebp, esp
     push    offset gadget_ret
     push    ebp
     mov     ebp, esp
     ...
     /* push args */
     ...
     /* push return address */
     push    offset trampilne_prolog
     /* jump to function */
     jmp     eax
     ```

2. **可靠性**
   - 为确保多次触发漏洞利用时不会导致蓝屏（BSOD），需要适当的互斥机制。
   - 使用CreateMutex()可能会引起怀疑，因此需谨慎处理。
   - 内存块的存在意味着漏洞正在运行，创建互斥体是必要的。

3. **多漏洞支持**
   - 该框架可以嵌入或从远程资源接收多个漏洞利用程序。
   - 执行Windows操作系统版本检查以确定目标版本是否支持特定漏洞。
   - 尝试不同的漏洞利用方法，直到找到合适的。
   - 每个漏洞利用都提供了可执行内核shellcode的接口。
   - 目前已观察到4种不同的漏洞，但可能最多有10种。

### 漏洞军械库
- **CVE-2018-8589**
- **CVE-2015-2360**
- **CVE-2018-8611**
- **CVE-2019-0797**

### 案例研究：CVE-2018-8611

#### 漏洞细节
- **受影响的操作系统**：
  - Windows 10 (build 15063, 14393, 10586, 10240)
  - Windows 8.1
  - Windows 8
  - Windows 7
- **新的漏洞利用**：
  - Windows 10 (build 17133, 16299)
  - 允许在Chrome和Edge中的沙箱逃逸，因为系统调用过滤技术不适用于ntoskrnl.exe系统调用。

#### KTM (Kernel Transaction Manager) 概述
- **KTM对象**：
  - **事务管理器对象**：处理事务客户端和资源管理器之间的通信。
  - **事务对象**：数据操作的集合。
  - **资源管理器对象**：管理可由事务处理操作更新的数据资源。
  - **登记对象**：资源管理器和事务之间的关联。

#### 漏洞利用步骤
1. 创建命名管道并打开进行读写。
2. 创建一组新的对象（事务管理器对象、资源管理器对象、事务对象）。
3. 创建多个线程并将它们绑定到单个CPU核心：
   - 线程1：循环调用NtQueryInformationResourceManager。
   - 线程2：尝试执行一次NtRecoverResourceManager。
4. 第三个线程执行NtQueryInformationThread以使用NtRecoverResourceManager获取最后一个线程系统调用。
5. 成功执行NtRecoverResourceManager意味着发生竞争条件。
6. 在先前创建的命名管道上执行WriteFile将导致内存损坏。

#### 漏洞修复
- Microsoft通过以下更改修复了漏洞：
  - 检查登记状态是否已删除。
  - 检查ResourceManager是否处于联机状态且被添加。

#### 利用技巧
- 控制登记对象后，可以通过修改调度程序对象来构建SemaphoreObject。
- 修改_KMUTANT对象：
  ```c
  mutex->Header.Type = SemaphoreObject;
  mutex->Header.SignalState = 1;
  mutex->OwnerThread = Leaked_KTHREAD;
  mutex->ApcDisable = 0;
  mutex->MutantListEntry = Fake_LIST;
  mutex->Header.WaitListHead.Flink = ...
  ```
- 使用WaitType = 3传递给KiTryUnwaitThread，设置Leaked_KTHREAD + 0x1EB + 0x40为0。

### 结论
- **零日漏洞**：精心设计的漏洞能够绕过缓解措施，但安全厂商也在不断改进。
- **竞争条件漏洞**：越来越多的竞争条件漏洞出现，静态分析和模糊测试工具的作用显著。
- **Win32k锁定和系统调用过滤**：这些措施有效，但攻击者转向利用ntoskrnl中的错误。
- **新技术**：使用调度程序对象和PreviousMode揭示了一种新的利用技术。

### 作者
- **Anton Ivanov** (@antonivanovm), Kaspersky Lab
- **Boris Larin** (@oct0xor), Kaspersky Lab

如有任何问题，请随时提问。