## Bug Report

### Input Code
```javascript
function delay(time) {
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve(), time);
  });
}

[1000, 2000, 3000, 4000].forEach(async (time) => {
  await delay(time);
  console.log(time);
});

console.log([100000]);
```

### Expected Behavior
The expected output should be:
```
Array [100000]    // at 0s
1000              // at 1s
2000              // at 2s
3000              // at 3s
4000              // at 4s
```
This is the behavior observed in the latest version of Chrome.

### Current Behavior
The actual output is:
```
Array [100000]    // at 0s
Array [100000]    // at 1s
1000
Array [100000]    // at 2s
1000
2000
Array [100000]    // at 3s
1000
2000
3000
Array [100000]    // at 4s
1000
2000
3000
4000
```

### Analysis
The issue seems to be related to the use of `forEach` with `async/await`. The `forEach` method does not wait for the asynchronous operations to complete before moving on to the next iteration. This results in the `console.log([100000])` statement being executed immediately, and the `delay` function's `console.log` statements are interleaved with the repeated `console.log([100000])`.

### Suggested Fix
To achieve the expected behavior, you can use a `for...of` loop instead of `forEach` to ensure that each asynchronous operation completes before moving to the next one:

```javascript
function delay(time) {
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve(), time);
  });
}

const times = [1000, 2000, 3000, 4000];

(async () => {
  for (const time of times) {
    await delay(time);
    console.log(time);
  }
  console.log([100000]);
})();
```

This will ensure that the `console.log([100000])` statement is executed only after all the delays have completed, resulting in the expected output.