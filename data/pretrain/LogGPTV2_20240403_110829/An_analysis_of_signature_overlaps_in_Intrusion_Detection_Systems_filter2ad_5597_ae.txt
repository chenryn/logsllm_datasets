alert tcp $EXTERNAL NET any ->
$HTTP SERVERS $HTTP PORTS
(msg:”WEB-IIS cmd.exe access”;
ﬂow:to server,established; uricontent:”cmd.exe”; nocase;
classtype:web-application-attack; sid:1002; rev:7;)
Figure 7. Snort signature 1002 from Snort 2.4.5
To summarize, we have identiﬁed four signatures S1002,
S1537, S1455, and S882 such that S1537 ⊂ S1455 ⊂ S882
and S1002 ∩ S1537. So, if we provide Snort 2.4.5 (using its
default conﬁguration) with a trafﬁc trace that satisﬁes both
the constraints of S1002 and S1537, then Snort will have to
decide to send three of four possible messages (using the
default conﬁguration): there is a possible evasion attack.
We conducted an experiment and, given the speciﬁcs of
those two signatures, we created a trafﬁc trace that does
satisfy these constraints. We observed that if the trafﬁc trace
contains the proper TCP handshake on port 80 followed
by a packet (also in the same TCP session) that contains
/scripts/..%c0%af../winnt/system32/cmd.e
xe?/c+dir+c:\+type+%22/calendar_admin.pl
%22, Snort only provides IDS events for S1537, S1455 and
S882, and no IDS event for S1002 (log limit of three). In
this particular case, Snort 2.4.5 does not log speciﬁcally
the IDS event for S1002 because,
in the default Snort
conﬁguration,
the IDS events are ordered in the event
queue, before being logged, using the length of the string in
their content plug-ins (i.e., the IDS event corresponding
to a signature with a longer string in their content
plug-ins is ordered ﬁrst). Thus, since S1002 has the shortest
string in its content plug-in, its corresponding IDS event
is not logged.
One question remains: Does this constitute a real attack
or is it a synthetic attack? In this case, it is a real attack.
We carefully selected the string above so that it exploits
vulnerability BID 1806 against Microsoft IIS Server version
4.0 and 5.0 on Windows 2000, i.e., an attack that should be
detected by S1002 but not by the other three signatures.
This vulnerability allows an attacker to execute commands
on the target system. Here the string we seleted allows the
attacker to use the command cmd to execute the command
dir on the drive c:\ and execute the command type to
type the string calendar_admin.pl, which is used as a
decoy to hide the dir command.
We actually tested this attack against a vulnerable Win-
dows 2000: it works; and Snort did not log the IDS event
for S1002, which is the intent of the attack.
We acknowledge that this vulnerability is old and that
it is probably not existent today. However, this example is
easy to understand and clearly shows how someone can take
advantage of overlapping signatures in an IDS signature
database, even using newer Snort versions such as Snort
2.4.5, to hide its real intention (i.e., evasion attack).
C. Discussion
Regardless of whether Snort developers intended to have
signature overlaps or not, we believe it is important when
dealing with large signature databases such as Snort (3 500
to 15 000 signatures), to quantify signature overlaps (since
signatures could be added by many different developers) and
to understand their implications on the accuracy of the IDS
(e.g., potential evasion attacks).
The equality between signatures identiﬁed in the result
section has limited impacts on the accuracy of the IDS. Such
equalities can lead to a misunderstanding of the situation
(i.e., direction of the attack) by the network administrator
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
118or could mislead the network administrator (e.g., which IDS
event really corresponds to the attack?) when the signatures
are orthogonal, which is the case for Snort 2.4.5 (Figure 4).
Signature inclusions, such as those identiﬁed in the result
section and the one presented in Section II, have a more im-
portant impact when the inclusion chain contains orthogonal
signatures.
In any case, these equalities and inclusions make it easier
for an attacker to exploit the log limit. In the case of Snort
2.4.5, we argued that the attacker only has to identify one
orthogonal signature (triggering order also matters) with the
ﬁrst signature of an inclusion chain of three to be able
to prevent the network administrator from getting the IDS
events targeted by the attack. We showed on an example
that this can actually be done, and we showed that we were
able to use an inclusion chain of three to create a real and
successful attack against a real target system.
In the light of our results, we argue that studying the
signature intersection could reveal exploitable situations in
the newer versions of Snort. Furthermore the intersection
analysis would help us to answer the following question:
Which value of the (log limit) conﬁguration parameter
should be used? In the case of Snort, given its current
design, with one conﬁguration value for all the signatures,
the only safe solution would be to select the maximum (to be
identiﬁed) number of intersecting signatures for the database
it is using. However, as we demonstrated in Section III, in-
creasing the log limit only leads to more effective squealing
attacks and performance issues.
Consequently, we believe that more work needs to be
done in signature overlap analysis to quantify and address
this problem, which will be part of our future work. An
alternative could be to revisit the signature database that
shows inclusions, equalities and intersections to limit their
number.
VII. RELATED WORK
It is now well accepted in the network security commu-
nity that four complementary techniques can be used to
evaluate IDS technologies: using network trafﬁc collected
from an emulated network [9]–[12] (that mimics a real
network) or a real network, using trafﬁc captured from a
Honeypot [13] (i.e., a vulnerable computer on the network
that attracts attackers and records typical attack attempts),
using Vulnerability Exploitation Programs (VEPs)12 [2,14]–
[16], and using an IDS Stimulator [3,6]. Although these four
techniques could be used to successfully identify detection
problems in the IDS engine or in the IDS signature database,
none of these techniques is adequate for analyzing the
signature overlapping problem of an IDS signature database.
At best, as we did in [3], they can incidentally reveal some
12A VEP is an attack program (often available on the Internet) that
exploits a vulnerability on a computer system.
inclusion, equality or intersection, but such results will not
be obtained in a systematic way.
A dedicated technique such as the one we propose in
this paper is therefore necessary to quantify the signature
overlapping problem in a systematic way. Thus, our au-
tomaton and set theory approach and supporting tool differs
from previous veriﬁcation techniques in a number of ways
by allowing the analysis of all signatures for overlapping
problems. Note that the work presented in this paper is the
full paper version of our IDS-SSA approach and results, pre-
sented as an extended abstract at the 2009 Recent Advance
in Intrusion Detection [17]. To the best of our knowledge,
this was the ﬁrst time such an approach was proposed for
IDS signatures and that a systematic quantitative analysis
was attempted and reported in the literature. The authors
of [18] published in 2010 a very similar approach, i.e.,
proposed to transform signatures into FSA. (Note that they
did not seem to be aware of our previous work [17]).
However,
their goal was to develop a method to better
manage the signature database (e.g., identify inconsistencies
and duplications) and help with the signature writing process
(e.g., identify whether or not there is already a signature
for this attack in the signature database), as opposed to our
work, which is focused on the security implications (e.g.,
squealing attacks, evasion attacks) of signature overlaps. One
may argue that removing duplications and inconsistencies to
maintain a more coherent and consistent set of signatures
would equally contribute to removing those overlapping
signatures. We disagree. Duplications and inconsistencies
(i.e., when there are already other signatures that detect the
same attack) are sub-problems of the overlapping signatures
problem. Signatures can overlap, not because of duplications
or inconsistencies, but because they are too loosely speciﬁed
(i.e., they trigger on packets they should not trigger on). For
instance, most of the signatures in Table I are related to very
different attacks, and are therefore required in the signature
database (no duplications nor inconsistencies), but because
they are too loosely speciﬁed they intersect and this can be
exploited.
VIII. CONCLUSION
In this paper, we presented an approach to systemati-
cally quantify the signature overlapping problem, an area
where very little systematic theoretical and empirical work
exists. We deﬁned the signature overlapping problem as the
equality, inclusion or intersection of the sets of packets that
trigger different signatures in an IDS signature database.
We strongly believe that deﬁning a systematic approach like
ours, to complement the other IDS veriﬁcation and validation
approaches, is a necessary ﬁrst step to improve IDS signature
speciﬁcations.
Our approach consists in transforming IDS signatures
into sets and ﬁnite state automata. This allows us to use
set theory and automaton theory operators to systematically
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
119identify signature overlaps. We built a tool infrastructure to
support our approach and, as a ﬁrst step, analyzed equalities
and inclusions of signatures to systematically check whether
several IDS signature databases contain such overlaps.
We showed that our approach and tool would likely apply,
with minor modiﬁcations, to a large family of signature-
based network IDSs. In our case study, we restricted our
analysis to one widely-used IDS, namely Snort (and evalu-
ated different versions of Snort).
We were able to automatically analyze several Snort
signature database versions between versions 1.8.6 and 2.4.5
(though we only report on these two versions since they are
representative of all our observations). We showed that even
if the number of signatures in Snort 2.4.5 has considerably
increased from Snort 1.8.6, there is a small reduction in the
number of overlapping signatures. We demonstrated that a
high log limit value could lead to more effective squealing
attacks and performance issues. We showed that overlapping
signatures could prevent Snort 1.8.6 from detecting attacks.
We also showed that
these overlapping
signatures can be used to derive a real successful attack that
is not detected by the IDS. To the best of our knowledge, this
is the ﬁrst time such an attack has been documented, and also
thanks to our systematic approach, this is the ﬁrst time such
quantitative analysis is reported in the literature. Moreover,
using our systematic approach, we were able to perform
both quantitative and qualitative analysis of this problem in
Snort, thus providing evidence of the effectiveness of our
automaton and set theory approach. We showed that our
qualitative analysis could lead to improvements to the Snort
signature database.
in Snort 2.4.5,
Future work will focus on the signature intersection anal-
ysis, which we showed to be very computationally intensive.
We will also look into ﬁnding a way to discriminate between
intentional and unintentional overlaps. For instance, there
is often a generic signature for an attack, and signatures
for speciﬁc instances of that attack (i.e., intentional overlap)
that provide more information to the network administrator.
Moreover, we will explore the ideas of using the IDS-SSA
on other IDSs (e.g., Bro) since there is no reason to believe
that other (signature-based) IDSs would be exempted from
the signature overlapping problem. Finally, we propose to
compare the space covered by signatures from these IDSs
that identify the same attacks. For instance, we propose to
explore the possibility of comparing signatures from Snort
and Bro.
REFERENCES
[1] G. Vigna and R. A. Kemmerer, “NetSTAT: A Network-Based
Intrusion Detection Approach,” in Proceedings of the Annual
Computer Security Applications Conference (ACSAC), 1998,
pp. 25–34.
[2] F. Massicotte, F. Gagnon, Y. Labiche, M. Couture, and
L. Briand, “Automatic Evaluation of Intrusion Detection
Systems,” in Proceedings of the Annual Computer Security
Applications Conference (ACSAC), 2006, pp. 361–370.
[3] F. Massicotte and Y. Labiche, “Speciﬁcation-Based Testing of
Intrusion Detection Engines using Logical Expression Testing
Criteria,” in Proceedings of the International Conference on
Quality Software (QSIC), 2010.
[4] J. Beale, A. Baker, and J. Esler, Snort IDS and IPS toolkit,
B. Caswell, Ed. Syngress Publishing, 2007.
[5] S. Patton, W. Yurcik, and D. Doss, “An Achilles’ Heel in
Signature-Based IDS: Squealing False Positives in Snort,”
in Proceedings of Recent Advances in Intrusion Detection
(RAID), 2001.
[6] D. Mutz, G. Vigna, and R. A. Kemmerer, “An Experience
Developing an IDS Stimulator for the Black-Box Testing
of Network Intrusion Detection Systems,” in Proceedings
of the Annual Computer Security Applications Conference
(ACSAC), 2003, pp. 374–383.
[7] J. E. Hopcroft, R. Motwani, and J. D. Ullman, Introduction to
Automata Theory, Languages, and Computation (3rd Edition).
Boston, MA, USA: Addison-Wesley Longman Publishing
Co., Inc., 2006.
[8] V. Paxson, “Bro: A System for Detecting Network Intruders
in Real-Time,” Computer Networks, vol. 31, no. 23–24, pp.
2435–2463, 1999.
[9] J. Aussibal, P. Borgnat, Y. Labit, G. Dewaele, N. Larrieu,
L. Gallon, P. Owezarski, P. Abry, and K. Boudaoud, “Base
de traces d’anomalies l´egitimes et ill´egitimes,” in Proceedings
of the Conference on Security in Network Architectures and
Information Systems (SAR-SSI), 2007.
[10] R. Lippmann, D. Fried, I. Graf, J. Haines, K. Kendall, D. Mc-
Clung, D. Weber, S. Webster, D. Wyschogrod, R. Cunning-
ham, and M. Zissman, “Evaluating Intrusion Detection Sys-
tems: The 1998 DARPA Off-line Intrusion Detection Evalua-
tion,” in Proceedings of the DARPA Information Survivability
Conference and Exposition (DISCEX), 2000.
[11] R. Lippmann, J. W. Haines, D. J. Fried, J. Korba, and K. Das,
“The 1999 DARPA Off-line Intrusion Detection Evaluation,”
Computer Networks, vol. 34, no. 4, pp. 579–595, 2000.
[12] D. Moore, C. Shannon, D. J. Brown, G. M. Voelker, and
S. Savage, “Inferring Internet Denial-of-Service Activity,”
ACM Transactions on Computer Systems, vol. 24, no. 2, pp.
115–139, 2006.
[13] J. Zhou, A. J. Carlson, and M. Bishop, “Verify Results of Net-
work Intrusion Alerts Using Lightweight Protocol Analysis.”
in Proceedings of the Annual Computer Security Applications
Conference (ACSAC), 2005, pp. 117–126.
[14] H. Debar and B. Morin, “Evaluation of the Diagnostic Ca-
pabilities of Commercial Intrusion Detection Systems,” in
Proceedings of the Recent Advances in Intrusion Detection
(RAID), 2002.
[15] L. M. Rossey, R. K. Cunningham, D. J. Fried, J. C. Rabek,
R. P. Lippmann, J. W. Haines, and M. A. Zissman, “LAR-
IAT: Lincoln Adaptable Real-time Information Assurance
Testbed,” IEEE Aerospace Conference Proceedings, 2002.
[16] G. Vigna, W. Robertson, and D. Balzarotti, “Testing Network-
Based Intrusion Detection Signatures using Mutant Exploits,”
in Proceedings of the ACM Conference on Computer and
Communications Security (CCS), 2004, pp. 21–30.
[17] F. Massicotte, “Packet Space Analysis of Intrusion Detec-
tion Signatures,” in Proceedings of the Recent Advances in
Intrusion Detection Poster Session (RAID), 2009.
[18] N. Stakhanova and A. A. Ghorbani, “Managing intrusion
detection rule sets,” in Proceedings of the Third European
Workshop on System Security, ser. EUROSEC ’10. New
York, NY, USA: ACM, 2010, pp. 29–35. [Online]. Available:
http://doi.acm.org/10.1145/1752046.1752051
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
120