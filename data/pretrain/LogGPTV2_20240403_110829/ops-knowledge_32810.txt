User:  How to automatically configure Apache web server on multiple servers using Ansible?
Assistant: 1. Write an Ansible playbook First, you need to write an Ansible playbook to automatically configure the Apache web server on multiple servers. Here is a simple example: ``` --- - name: Configure Apache Web Server hosts: web_servers become: true tasks: - name: Install Apache apt: name: apache2 state: present - name: Start Apache service: name: apache2 state: started ``` In this playbook, the hostgroup defined by "web_servers" will be used as the target host to automatically configure the Apache web server. This group will be defined later in the host inventory. The playbook first installs Apache2 and then starts the Apache2 service. 2. Write a host inventory Next, you need to write a host inventory to specify on which servers Ansible should configure the Apache web server. Here is an example of a simple host manifest: ``` [web_servers] server1 ansible_host=192.168.1.100 server2 ansible_host=192.168.1.101 ``` In this host manifest, a server named "web_servers" is defined using "[web_servers]" A group with two servers: "server1" and "server2". Each server needs to be assigned a host alias using the server's IP address or DNS name. In this example, use the "ansible_host" option to specify an IP address for each server. 3. Run the Ansible playbook Now you are ready to run the Ansible playbook to automatically configure the Apache web server on multiple servers. Run the following command: ``` ansible-playbook apache.yml -i inventory.ini ``` In this command, specify the name of the playbook to run as "apache.yml" and the location of the host inventory file as "inventory. ini". Ansible will automatically connect to each server, install the Apache package and start the Apache service. Once complete, check each server to make sure Apache is successfully installed and running. That's it for using Ansible to automatically configure Apache web server on multiple servers.