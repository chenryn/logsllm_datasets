title:Source-level IP packet bursts: causes and effects
author:Hao Jiang and
Constantinos Dovrolis
Source-Level IP Packet Bursts: Causes and Effects∗
Hao Jiang
College of Computing
Georgia Institute of Technology
PI:EMAIL
ABSTRACT
By source-level IP packet burst, we mean several IP packets
sent back-to-back from the source of a ﬂow. We ﬁrst iden-
tify several causes of source-level bursts, including TCP’s
slow start, idle restart, window advancement after loss re-
covery, and segmentation of application messages into multi-
ple UDP packets. We then show that the presence of packet
bursts in individual ﬂows can have a major impact on ag-
gregate traﬃc. In particular, such bursts create scaling in
a range of timescales which corresponds to the burst dura-
tion. Uniform “spreading” of bursts in the time axis reduces
the scaling exponent in short timescales (up to 100-200ms)
to almost zero, meaning that the aggregate traﬃc becomes
practically uncorrelated in that range. This result provides
a plausible explanation for the scaling behavior of Inter-
net traﬃc in short timescales. We also show that removing
packet bursts from individual ﬂows reduces signiﬁcantly the
tail of the aggregate marginal distribution, and it improves
queueing performance, especially in moderate utilizations
(50-85%).
Categories and Subject Descriptors: C.2.3 [Network
Operations]: Traﬃc modeling and analysis
General Terms: Measurement, Performance
Keywords: scaling, network traﬃc, TCP, packet disper-
sion, packet trains, capacity estimation, correlation struc-
ture
1.
INTRODUCTION
By source-level IP packet burst, we mean several IP pack-
ets sent back-to-back, i.e., at the maximum possible rate,
from the source of a ﬂow. Source-level bursts introduce
strong correlations in the packet interarrivals of individual
ﬂows. Which protocol mechanisms create such bursts? Over
∗
This work was supported by the “Scientiﬁc Discovery
through Advanced Computing” (SciDAC) program of DOE
(DE-FC02-01ER25467), and by an equipment donation from
Intel Corporation.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’03, October 27–29, 2003, Miami Beach, Florida, USA.
Copyright 2003 ACM 1-58113-773-7/03/0010 ...$5.00.
Constantinos Dovrolis
College of Computing
Georgia Institute of Technology
PI:EMAIL
which timescales do the corresponding correlations extend?
Signiﬁcant research eﬀorts have focused recently on the cor-
relation structure, or scaling behavior, of aggregate IP traﬃc
in short timescales, typically up to a few hundreds of mil-
liseconds [1, 2, 3, 4]. Is the short time scaling behavior of
aggregate traﬃc related to the presence of packet bursts in
individual ﬂows? How will the correlation structure of ag-
gregate traﬃc change if ﬂows do not include such bursts?
In terms of network performance, how will the queueing de-
lays decrease if we remove bursts from individual ﬂows, and
in what load conditions is such a decrease most important?
These are some of the questions that we investigate in this
paper.
Background on scaling. The key tool that we rely on is
the wavelet-based multiresolution analysis developed in [5]
and implemented in [6]. This statistical tool allows us to
observe the scaling behavior of a traﬃc process over a certain
range of timescales. Consider a reference timescale T0, and
let Tj=2j T0 for j=1,2,. . . be increasingly coarser timescales.
These timescales, or simply scales, partition a traﬃc trace
in consecutive and non-overlapping time intervals. If tj
i is
the i’th time interval at scale j>0, then tj
i consists of the
intervals tj−1
i be the amount of traﬃc in
2i + X j−1
i , with X j
tj
2i+1. The Haar wavelet coeﬃcients
i} at scale j are deﬁned as
{dj
−j/2
i = X j−1
2i+1. Let X j
and tj−1
2i
(1)
dj
i = 2
(X j−1
2i − X j−1
2i+1)
for i = 1, . . . Nj , where Nj is the number of wavelet coeﬃ-
cients at scale j. The energy function E j is deﬁned as
Ej = E[(dj
i )
2
] ≈ i(dj
i )2
Nj
(2)
An energy plot, such as Figure 1, shows the logarithm of
the energy E j as a function of the scale j. The magnitude
of E j increases with the variability of the traﬃc process
X j−1 at scale j-1. What is more important is the scaling
behavior of the process, i.e., the variation of E j with j. For
an exactly self-similar process, such as fractional Brownian
motion (fBm) with Hurst parameter H (0.5<H<1), it can
be shown that E j=E 02j(2H−1), and so the energy plot is a
straight line with positive slope 2H-1. The slope of an en-
ergy plot is referred to as scaling exponent and is denoted
by α. For fBm, α=2H-1 is constant across all timescales,
and so the process is said to show global scaling.
To illustrate the detection of scaling in a traﬃc process,
Figure 1 shows the energy plots for three synthetic traces,
all of which have the same mean packet interarrival (50ms).
)
y
g
r
e
n
E
(
2
g
o
l
4
3
2
1
0
−1
−2
−3
0
0.1 
0.4 
1.6 
6.4 
25.6 
102.4  (sec) 
Exponential source,
Pareto source, α=0.57 (3,12)                   
Exponential/Periodic source
2
4
6
8
10
12
j = log
(scale)
2
Figure 1: Energy plot examples.
At the top of the graph we show the timescale Tj that corre-
sponds to scale j at the x-axis (T0=25ms). The ﬁrst trace is
a Poisson process. The signature of uncorrelated exponen-
tial interarrivals in the energy plot is a horizontal straight
line (α=0). The second trace is again a renewal process,
but this time the interarrivals follow the Pareto distribu-
tion with shape parameter β=1.5. The inﬁnite variance of
the interarrivals creates global scaling. The signature of
such global scaling in the energy plot is a straight line seg-
ment with positive slope (α=2-β) across all timescales. The
third trace is again based on exponential interarrivals, but
this time we introduce a strong periodicity at the 400ms
timescale. Speciﬁcally, after each exponential interarrival
we generate, with probability 0.75, another packet 400ms
later (scale 4). This periodicity causes a “dip” in the energy
plot at the 800ms timescale (scale 5). This is because a pe-
riodicity reduces the variability of the traﬃc process at the
corresponding timescale. Note that the dip appears at scale
5, instead of 4, because the energy at scale j depends on the
traﬃc process variations in scale j-1.
In practice, network traﬃc can show diﬀerent scaling be-
havior across diﬀerent timescales. If the slope of the energy
plot is (roughly) constant over a range of timescales j to
j + k, we say that the traﬃc process exhibits local scaling in
the timescales Tj to Tj+k. This paper focuses on the scaling
behavior of IP traﬃc in short timescales, typically extending
up to a few hundreds of milliseconds.
Related work. Our work is mostly related to previous re-
search on the scaling behavior of Internet traﬃc in short
timescales. One of the ﬁrst papers that reported scaling in
short timescales at WAN traces was [7]. In [1, 8], Feldmann
et al. used the wavelet-based multiresolution analysis tech-
nique of [5] to detect and characterize the scaling behavior
of Internet traﬃc. The authors showed that scaling in short
timescales is related to the TCP closed-loop ﬂow control,
and the cutoﬀ between “short” and “long” timescales is,
roughly, the RTT of the TCP transfers. Additionally, [1]
provided empirical evidence that WAN traﬃc can be mod-
eled using a multifractal model, similar to that developed
in [2]. More recent work, however, argues that the traﬃc
at a tier-1 ISP is well-modeled as monofractal, rather than
multifractal [3].
[9] showed that IP layer scaling does not depend on the
TCP ﬂow arrival process. In a follow-up work, [4] showed
that the the correlation structure of aggregate traﬃc in
short timescales can be captured by a Poisson cluster pro-
cess in which the packet interarrivals within individual clus-
ters follow an overdispersed Gamma distribution. [3] intro-
duced the concept of “dense ﬂows” (i.e., ﬂows with bursts of
densely clustered packets), and showed that it is this kind
of ﬂows that create scaling in short timescales. [10] showed
that scaling in ﬁne timescales can have a signiﬁcant impact
on queueing performance, especially in moderate utiliza-
tions, while scaling in coarser timescales is more important
in heavy utilizations. Our main result, connecting scaling
in short timescales with packet bursts from individual ﬂows,
is in agreement with the results of [3, 9, 4, 10], providing a
more speciﬁc explanation for the nature and causes of scal-
ing behavior in aggregate traﬃc.
The traces that we used in this study are publicly avail-
able at the NLANR-MOAT site [11]. Each trace lasts for
90 seconds. The traces that we include in this paper come
from OC-12 links at the Merit (MRA) and Indiana Uni-
versity (IND) Internet2 GigaPOPs. The rest of this paper
is structured as follows. §2 gives several causes of source-
level bursts in IP traﬃc. §3 shows that packet bursts create
scaling in a range of timescales which corresponds to the
§4 investigates the eﬀect of bursts from
burst duration.
individual ﬂows on aggregate traﬃc in terms of scaling in
short timescales, marginal distribution, and queueing per-
formance. The Appendix describes a passive capacity esti-
mation methodology, which is required for the detection of
packet bursts from individual ﬂows at a trace.
2. CAUSES OF SOURCE-LEVEL BURSTS
We have analyzed dozens of traces, attempting to identify
the most common causes of source-level bursts. Figure 2
shows nine such causes, one for UDP and eight for TCP
ﬂows. Unfortunately, our analysis is not automated, and
so we cannot make quantitative statements regarding the
relative frequency of each cause. We believe, however, that
Figure 2 shows most, or all, major causes.
UDP message segmentation. When a UDP-based appli-
cation sends a message that is larger than the path’s MTU,
the message is segmented by the application into multiple
UDP packets, and/or it is fragmented by the operating sys-
tem into multiple IP packets. The example shown in Fig-
ure 2 is from a UDP video ﬂow which sends six packets every
40ms.
Slow start. Slow start increases the congestion window by
one MSS for every new ACK. This rapid increase can double
the burst length in each RTT. In the example shown, the
receiver does not use Delayed-ACKs, and so the bursts are
one third longer than normally.
Loss recovery with Fast Retransmit. The recovery of
a lost segment through Fast Retransmit can ﬁll in a “hole”
in the receiving sliding window, and so it can cause a rapid
advancement of the ACK number. The sender can then send
up to CW/2 bytes back-to-back, where CW is the congestion
window before the loss. Note that the connection of our
example did not do Fast Recovery, as new segments were
not sent in response to duplicate ACKs that followed the
retransmission, due to congestion window constraints.1
Unused congestion window increases. Sometimes, mostly
with applications that initially exchange control messages
(such as scp), the congestion window increases with every
ACK, but without being used by the sender. Then, when
1Fast Recovery can reduce the burst size after a retransmis-
sion, if new segments can be sent in response to duplicate
ACKs.
UDP message segmentation
Slow start
Loss recovery with fast retransmission
UDP packet
Data packet
ACK packet
Data packet
ACK packet
r
e
b
m
u
n
e
c
n
e
u
q
e
S
SYN
r
e
b
m
u
n
e
c
n
e
u
q
e
S
Fast retransmission
0.18
0.2
0.22
18.2 18.3 18.4 18.5 18.6 18.7 18.8 18.9
Time (second)
19
19.1 19.2 19.3
5.8
5.9
6
6.1
Time (second)
6.2
6.3
0.06
0.08
0.1
0.12
0.14
Time (second)
0.16
Unused congestion window increases
ACK compression
Cumulative or lossed ACKs
Data packet
ACK packet
Data packet
ACK packet
Data packet
ACK packet
SYN
TCP control segments
r
e
b
m
u
n
e
c
n
e
u
q
e
S
r
e
b
m
u
n
e
c
n
e
u
q
e
S
Compressed ACKs
Ack for 6 MSS packets
0.4
0.6
0.8
1
Time (second)
1.2
1.4
1.6
0
0.6
0.8
1
1.2
Time (second)
1.4
1.6
1.8
18.6
18.65
18.7
18.75
Time (second)
18.8
18.85
Idle restart timer bug
Bursty application
ACK reordering
Data packet
ACK packet
Data packet
ACK packet
Data packet
ACK packet
r
e
b
m
u
n
e
c
n
e
u
q
e
S
r
e
b
m
u
n
e
c
n
e
u
q