# 利用Windows 10 PagedPool off-by-one溢出(WCTF 2018)
##### 译文声明
本文是翻译文章，文章原作者 j00ru，文章来源：j00ru.vexillium.org
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
在7月6-8日的周末，我们的CTF团队-[Dragon
Sector](http://dragonsector.pl/)-参加了在北京举行的一场名为WCTF的邀请赛。 其他参与者是来自世界各地的顶级团队(e.g.
Shellphish, ESPR, LC↯BC or Tokyo Westerns)，
比赛的奖金总额达到了惊人的10万美元。这个CTF的一个特殊的规则是这些挑战是由团队自己而不是组织者准备的。
10个队伍每一队都要求提供两个题目，其中一个要求必须在Windows上运行。允许远程帮助，评分系统提供了一、二、三血加分奖励。在挑战比赛完成之后随之而来的是下一环节，陪审团和参与者在舞台上展示自己的题目时会获得额外的分数。
经过两天的竞争，我们作为CTF的亚军，完成了6/18项挑战任务， 排在冠军Tokyo Westerns (7/18)后面。
我对上述结果的贡献是通过[Eat, Sleep, Pwn,
Repeat](https://twitter.com/EatSleepPwnRpt)拿到“Searchme” 这一题的flag。它涉及利用Windows
10 64位中加载的易受攻击的内核驱动程序造成的PagedPool分配的off-by-one缓冲区溢出。
在CTF之后不久，原作者（@_niklasb）发布了驱动程序的源代码和相应的漏洞（github源码[niklasb/elgoog](https://github.com/niklasb/elgoog/)
、Twitter
上[讨论](https://twitter.com/_niklasb/status/1015889867811770368)），这表示我解法的一部分是非预期的。Niklas
使用off-by-one 来破坏分配元数据并且执行一些 _pool feng-shui_
去得到覆盖的pool块。另一方面，我在没有触及任何pool元数据的情况下，通过 _data-only_ 的攻击实现了类似的结果，这使得整个利用过程更加简单。
我鼓励您仔细分析Niklas的漏洞，如果您对我的方法感兴趣，请继续跟着做。
如果你想直接跳到exploit代码，
在这儿[GitHub](https://gist.github.com/j00ru/2347cf937366e61598d1140c31262b18) 。
## 初步观察
作为任务的一部分，我们提供了一个64位的Windows内核驱动程序，名为 searchme.sys 14kB的大小,有如下描述：
>  3389 flag is here: c:flag.txt, User:ctf, password:ctf
当我通过RDP连接到远程主机时，我可以作为一个常规的“ctf”用户登录。 searchme.sys
驱动程序被加载到系统中，想要在磁盘上拿到C:flag.txt 文件。但是正如预期那样，这个账户不能安全的读取：
在这一点上，很明显，挑战的目标是在searchme.sys中利用内核模式的漏洞，将权限提升到管理员或系统权限，然后从受保护的文件中读取flag。
当我在IDA Pro中加载这个模块时，我很快就发现它在设备DeviceSearchme 下注册了一个设备，并使用缓冲的[Buffered
I/O](https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/using-buffered-i-o) 通信方案操作四个IOCTLs ：
  * `0x222000` – allocates an empty object from PagedPool, saves it in a global array and returns its address to the caller（从PagedPool分配一个空对象，将其保存到全局数组中，并将其地址返回给调用者）
  * 0x222004 – frees a previously allocated object（释放先前分配的对象）
  * `0x222008` – adds a pair of `(char[16], uint32)` to an existing object（将一对（char 16，uint32）添加到现有对象中）
  * `0x22200C` – transforms an existing object of type-0 to type-1 in a one-way, irreversible manner.(以一种单向的、不可逆转的方式将type-0的现有对象转换为type-1)。
由于IOCTLs 和 and #2 是不重要的，该漏洞肯定隐藏在#3或#4的实现中。
我简单地对在驱动程序中找到的整个代码进行了逆向工程（在Redford和impr的帮助下），以掌握它的功能，重命名符号并修复数据类型。
很明显，驱动程序维护了一个哈希映射，将文本字符串与数值列表相关联，而某种类型的二进制数据结构涉及到type-1对象，但是我仍然没有完全理解代码的基本目的(后来证明是
[binary interpolative
code](https://link.springer.com/article/10.1023/A:1013002601898)
).我也没有发现任何明显的利用点，但我注意到两种可疑的行为：
  1. 在处理0x222008时，驱动程序不允许在与字符串标记关联的整数列表中重复。然而，它只检查了新添加的值，而不是在列表后面的那个。 比如：[1，2，2]列表由于相同的连续数而不被允许，但是[2，1，2]可以很好地创建。 考虑到这个列表是在稍后被另一个IOCTL处理的时候排序的，这似乎特别奇怪，这可能会使重复检测的整个点失效。
  2. 在0x22200C处理器调用的嵌套函数中，找到了以下代码结构：
    if (*cur_buf > buf_end) {
      return 1;
    }
​ 假设buf_end是有效缓冲区之外的最小地址,这可能表示一个off-by-one
error，否则比较应该使用>=操作符。因为比较应该另外使用>＝运算符。由于遵循上面讨论的线索可能会耗费大量时间，所以我决定尝试一个更简单的路线，看看我是否能通过愚蠢的Fuzzing来触发任何崩溃。
这将允许我从一个已知的坏状态开始我的分析，而不是在一开始就花费时间搜索内存损坏原函数。
## Fuzzing 驱动程序
在fuzzing的环境下，驱动程序的通信接口被限制为4个简单的操作这个是很方便的，在开发阶段，我围绕`deviceIoControl`创建了几个包装函数，这些函数后来在实际的EXP中被重用。
fuzzer的核心非常简单-它以随机的方式无限地调用一个IOCTLs，但是格式化正确的输入参数(`token=["aa","bb"]`,
`value=[0..9]`). 在为searchme.sys启用[Special Pool](https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/special-pool)并启动fuzzer之后，只需几秒钟就可以在WinDbg中看到以下崩溃：
    DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION (d6)
    N bytes of memory was allocated and more than N bytes are being referenced.
    This cannot be protected by try-except.
    When possible, the guilty driver's name (Unicode string) is printed on
    the bugcheck screen and saved in KiBugCheckDriver.
    Arguments:
    Arg1: ffffd9009c68b000, memory referenced
    Arg2: 0000000000000000, value 0 = read operation, 1 = write operation
    Arg3: fffff8026b482628, if non-zero, the address which referenced memory.
    Arg4: 0000000000000000, (reserved)
    [...]
    TRAP_FRAME:  ffff820b43580360 -- (.trap 0xffff820b43580360)
    NOTE: The trap frame does not contain all registers.
    Some register values may be zeroed or incorrect.
    rax=ffffd9009c68b000 rbx=0000000000000000 rcx=00000000fffffffe
    rdx=0000000000000001 rsi=0000000000000000 rdi=0000000000000000
    rip=fffff8026b482628 rsp=ffff820b435804f8 rbp=0000000000000000
     r8=ffffd9009c68b000  r9=0000000000000000 r10=00007ffffffeffff
    r11=ffff820b435804f0 r12=0000000000000000 r13=0000000000000000
    r14=0000000000000000 r15=0000000000000000
    iopl=0         nv up ei pl zr na po nc
    searchme+0x2628:
    fffff802`6b482628 0fbe00          movsx   eax,byte ptr [rax] ds:ffffd900`9c68b000=??
崩溃发生在searchme+0x2628处，处在一个位写入函数—同样具有可以的*cur_buf > buf_end 比较语句。进一步的分析和实验 (e.g.
fuzzing 没有Special Pool的环境) 证实了溢出确实被限制为一个字节 。
就在那时，我灵机一动—-不久之前我看到过类似的代码！在快速的检查之后，结果证明是真的。“searchme” 任务实际上是几个月前从
[34C3](https://archive.aachen.ccc.de/34c3ctf.ccc.ac/) 中对
[elgoog2](https://archive.aachen.ccc.de/34c3ctf.ccc.ac/uploads/elgoog2-5eae901f059d56b3a8415043a0c17956.tar.gz)
修改和重新编译的版本。这个发现的直接好处是“elgoog”任务附带了调试符号，包括结构定义、函数名等等。
在做了更多的调查之后，我发现了[这条推文](https://twitter.com/_niklasb/status/947179509287194624)，它导致了这篇简短的[write-up](https://github.com/niklasb/34c3ctf-sols/tree/master/elgoog)，以及来自shiki7的来自Tea Deliverers的
[exploit](https://gist.github.com/marche147/6e7bb92d376a0f209b1b301aff418e88)
。 “SearchMe”中修补了非计划中的类型混淆bug，因此旧的exploit不再有效，但它仍然提供了一些有价值的见解。
此外，Niklas对Point(1)中的池缓冲区溢出的描述加强了我的信念，即这是要在这里利用的预期的bug。
因此，接下来的一两个小时，我把符号从“elgoog”移到我的“SearchMe”IDA数据库。
## 控制溢出
通过查看fuzzer发送的一系列命令来触发崩溃，我了解到溢出确实是由“compressing”
(IOCTL0x22200C)造成的，该对象包含一个带有重复条目的标记。由于我只能在分配的缓冲区之外写入一个字节，因此很可能需要仔细控制它的值。即使在调试符号的帮助下，我仍然不确定代码构造了什么数据结构，因此—如何精确地控制其内容。
为了避免浪费时间对算法进行深入研究，我无耻地复制了插值函数的大小和写插值函数
(及其依赖项)从十六进制反编译器到VisualStudio，并编写了一个简单的蛮力程序，测试各种随机输入列表的溢出字节。该工具的要点归结为以下几点：
    // Fill input_buffer with random numbers and sort it.
    memset(output_buffer, 0xaa, sizeof(output_buffer));
    char *buf = output_buffer;
    write_interpolative(&buf, input_buffer, 1, ARRAYSIZE(input_buffer) - 1);
    size_t calculated = (interpolative_size(input_buffer, 1, ARRAYSIZE(input_buffer) - 1) + 7) / 8;
    ptrdiff_t written = buf - output_buffer - 1;
    if (written > 0 && calculated > 0 && written > calculated) {