          *((_DWORD *)pbrush + 7) = a6 | 0x20003;
        [...]
      }
_构造函数分配并初始化 BRUSH 对象_
在这里需要留意 `BRUSH` 对象 `+0x10` 字节偏移的成员域赋值为 `0xD` 数值，该成员用于描述当前笔刷 `BRUSH` 对象的样式，数值
`0xD` 表示这是一个图案笔刷。该成员在后续的分析中将会涉及。
在构造函数 `BRUSHMEMOBJ::BRUSHMEMOBJ` 返回后，函数 `GreCreatePatternBrushInternal`
将刚才新创建的 `BRUSH` 对象的句柄成员的值作为返回值返回，该句柄值最终将返回到用户进程的调用函数中。
* * *
###### psoTarget
漏洞验证代码调用函数 `PolyPatBlt` 时，在内核中的函数 `GrePolyPatBltInternal` 调用期间，函数获取参数 `a1`
指向的目标设备上下文 `XDCOBJ` 对象中存储的设备相关位图的表面 `SURFACE` 对象，并将该对象的地址作为参数传入
`GrePatBltLockedDC` 函数调用。该参数将逐级向下传递，其成员对象 `SURFOBJ so` 的地址将成为
`EngRealizeBrush` 函数调用的参数 `psoTarget` 的值。
      pSurfDst = *(struct SURFACE **)(*(_DWORD *)a1 + 0x1F8);
      while ( 1 )
      {
        [...]
        if ( !ERECTL::bEmpty((ERECTL *)&v22) )
        {
          [...]
          if ( pSurfDst )
            v34 = GrePatBltLockedDC(a1, (struct EXFORMOBJ *)&v26, (struct ERECTL *)&v22, v36, pSurfDst, a6, a7, a8, a9);
        }
        [...]
      }
_函数 GrePolyPatBltInternal 获取目标 DC 对象的 SURFACE 成员_
在验证代码中我们使用的是当前桌面的设备上下文 `DC` 对象，该 `DC` 对象所关联的位图表面 `SURFACE` 对象的成员域
`iBitmapFormat` 与当前显示器设置的颜色配置有关，现代计算机默认设置都是 32 位真彩色，所以对应的 `iBitmapFormat`
成员域的值即为 `32BPP` 的枚举值。我们可以通过以下系统设置来改变该成员域的值：
_设置显示器颜色的系统设置_
* * *
###### psoPattern
与此同时，在函数 `bGetRealizedBrush` 执行期间，函数获取目标笔刷 `BRUSH` 对象的 `+0x14`
字节偏移的成员域的值，即在前期阶段分配并初始化笔刷 `BRUSH` 对象时创建的图案位图对象克隆的句柄，函数将该句柄值传入
`SURFREF::vAltLock` 函数调用以获取该位图 `SURFACE` 对象引用。
    93650a5e 8b4714          mov     eax,dword ptr [edi+14h]
    93650a61 8945e8          mov     dword ptr [ebp-18h],eax
    93650a64 8b4330          mov     eax,dword ptr [ebx+30h]
    93650a67 8975ec          mov     dword ptr [ebp-14h],esi
    93650a6a a801            test    al,1
    93650a6c 7439            je      win32k!bGetRealizedBrush+0x57f (93650aa7)
    93650aa7 a806            test    al,6
    93650aa9 7407            je      win32k!bGetRealizedBrush+0x58a (93650ab2)
    93650ab2 ff75e8          push    dword ptr [ebp-18h]
    93650ab5 8d4df0          lea     ecx,[ebp-10h]
    93650ab8 e8c5caffff      call    win32k!SURFREF::vAltLock (9364d582)
_函数 bGetRealizedBrush 获取图案位图对象克隆的 SURFACE 对象引用_
接下来函数获取该 `SURFACE` 对象的成员对象 `SURFOBJ so` 的地址，并作为第 3 个参数 `psoPattern` 的值传入
`EngRealizeBrush` 函数调用。
    93650abd 8b75f0          mov     esi,dword ptr [ebp-10h]
    93650ac0 85f6            test    esi,esi
    [...]
    93650c06 8b4df0          mov     ecx,dword ptr [ebp-10h]
    93650c09 83c110          add     ecx,10h
    93650c0c eb0f            jmp     win32k!bGetRealizedBrush+0x6f5 (93650c1d)
    93650c1d 8b4334          mov     eax,dword ptr [ebx+34h]
    93650c20 85c0            test    eax,eax
    93650c22 7403            je      win32k!bGetRealizedBrush+0x6ff (93650c27)
    93650c24 83c010          add     eax,10h
    93650c27 ff75dc          push    dword ptr [ebp-24h]
    93650c2a 56              push    esi
    93650c2b ff75e4          push    dword ptr [ebp-1Ch]
    93650c2e 51              push    ecx
    93650c2f 50              push    eax
    93650c30 53              push    ebx
    93650c31 ff5510          call    dword ptr [ebp+10h]
_图案位图对象的 SURFOBJ 成员地址被作为 psoPattern 参数_
这样一来，参数 `psoPattern` 指向的 `SURFOBJ` 对象成员域 `sizlBitmap`
存储的值就与在用户进程创建笔刷对象时传入参数的图案位图高度和宽度数值一致。
* * *
**psoMask**
函数 `EngRealizeBrush` 的参数 `psoMask` 指向的 `SURFOBJ` 对象表示笔刷的透明掩码。笔刷使用的透明掩码是每像素 1
位的位图，并与图案位图的像素点个数相同。掩码位为 `0` 表示像素是笔刷的背景像素。
在函数 `bGetRealizedBrush` 中，只有判断目标笔刷 `BRUSH` 对象 `+0x10` 字节偏移成员域的值小于 `6` 时，才会将传给
`EngRealizeBrush` 函数调用的参数 `psoMask` 指定为与 `psoPattern` 相同的 `SURFOBJ`
对象；否则，该参数将始终为空，即不使用笔刷透明掩码。
      v8 = *((_DWORD *)pBrush + 4);
      if ( v8 >= 6 )
      {
        [...]
        goto LABEL_95;
      }
      SURFREF::vLockAll((SURFREF *)&v75, *((struct HSURF__ **)a2 + v8 + 0xE9));
      v9 = v75;
      if ( v75 )
      {
        v72 = (struct _SURFOBJ *)(v75 + 0x10);
        [...]
        goto LABEL_124;
      }
_函数 bGetRealizedBrush 有条件地指定 psoMask 参数_
前面的分析已经提到，当前的 `BRUSH` 对象在初始化时 `0x10` 字节偏移的成员域被赋值为 `0xD` 数值，表示这是一个图案笔刷；在
`bGetRealizedBrush` 函数调用时，观测到该成员域的值未曾被修改：
    win32k!bGetRealizedBrush+0x6c:
    93650594 83f806          cmp     eax,6
    kd> r eax
    eax=0000000d
_BRUSH+0x10 字节偏移的成员域仍为 0xD 数值_
这样一来，笔刷透明掩码参数 `psoMask` 将始终指向空值，那么在函数 `EngRealizeBrush` 中其将不会影响变量
`ulSizeTotal` 的值。
* * *
**触发漏洞**
根据以上分析得出的结论，参数 `psoTarget` 指向的 `SURFOBJ` 对象的成员域 `iBitmapFormat`
值由当前系统显示器颜色设置决定，默认为 `32BPP` 格式枚举值；参数 `psoPattern` 指向的 `SURFOBJ` 对象的成员域
`sizlBitmap`
值由验证代码创建笔刷对象时传入参数的图案位图的高度宽度数值决定。因此，适当控制验证代码中传入参数的数值，将会满足漏洞关键变量发生整数向上溢出的条件。
根据结论获得以下公式：
    BufferBytes = ((sizlPat_cx * 32) >> 3) * sizlPat_cy + 0x44 + 0x40;
如同初始验证代码传入的那样，当宽度值为 `0x10` 而高度值为 `0x100` 时，得到分配内存大小为 `0x4084` 字节，这与前面观测到的数据一致。
当前已知，变量 `ulSizeTotal` 是 32 位的无符号整数。当对无符号整数运用加法、乘法等可以增大数值的运算时，如果运算的结果超出 32 位整数的
`0xFFFFFFFF` 边界值，那么高位将会丢失，仅留下运算结果的最低 32 位数值存储在目标寄存器中。则根据以上运算公式，要满足
`BufferBytes` 数值溢出的条件，另外由于分配的内存大小需要大于 `0` 字节，则需满足以下不等式：
    sizlPat_cx * sizlPat_cy > 0x3FFFFFE0;
不等式满足时，`BufferBytes` 数值将恰好发生整数溢出，满足 `BufferBytes > 0x(1)0000 0000`
条件。修改验证代码中创建位图传入参数的高度和宽度数值以满足前述不等式：
    hbmp = CreateBitmap(0x36D, 0x12AE8F, 1, 1, NULL);
_修改创建位图传入参数的高度和宽度数值_
验证代码适当增大位图的宽度和高度，将传入参数的宽度和高度值指定为 `0x36D` 和 `0x12AE8F` 数值，使溢出后的缓冲区分配大小成为 `0x10`
字节。缓冲区分配成功后，函数 `EngRealizeBrush` 对位于缓冲区头部的 `ENGBRUSH`
对象的成员域进行初始化赋值。可以观测到赋值前后内存块数据的区别：
    kd> dc fe7c87e0
    fe7c87e0  46030001 72626547 00000000 00000000  ...FGebr........
    fe7c87f0  00000000 00000000 46050003 6b687355  ...........FUshk
    fe7c8800  fd6f6298 00000000 fe803b08 40000008  .bo......;.....@
    fe7c8810  00000039 0000020a 00000000 00000000  9...............
    fe7c8820  46140005 38616c47 010804e1 00000001  ...FGla8........
    fe7c8830  80000000 00000000 00000202 00000000  ................
    fe7c8840  0000053e 00000000 00000000 00000000  >...............
    fe7c8850  00000000 00000000 00000000 00000000  ................
    [...]
    kd> dc fe7c87e0
    fe7c87e0  46030001 72626547 00000000 00000010  ...FGebr........
    fe7c87f0  00000000 00000000 0000036d 0000036d  ........m...m...
    fe7c8800  0012ae8f 00000db4 fe7c8828 40000008  ........(.|....@
    fe7c8810  00000039 0000020a 00000000 00000000  9...............
    fe7c8820  46140005 00000006 010804e1 00000001  ...F............
    fe7c8830  80000000 00000000 00000202 00000000  ................
    fe7c8840  0000053e 00000000 00000000 00000000  >...............
    fe7c8850  00000000 00000000 00000000 00000000  ................
_下一内存块被覆盖前后数据对比_
初始化赋值操作将当前 `ENGBRUSH` 所在内存块的下一内存块 `POOL_HEADER` 头部结构破坏。接下来函数调用
`SURFMEMOBJ::bCreateDIB` 并传入前面分配的缓冲区 `+0x40` 字节偏移地址作为独立的位图像素数据区域参数 `pvBitsIn`
来创建新的设备无关位图对象。新创建的设备无关位图对象的像素位数格式与参数 `psoTarget` 指向的目标位图表面 `SURFOBJ` 对象的成员域
`iBitmapFormat` 一致。
      *(_DWORD *)(pengbrush + 4) = ulSizeSet;
      *(_DWORD *)(pengbrush + 0x1C) = cjScanPat;
      *(_DWORD *)(pengbrush + 0x10) = cxPatRealized;
      cxPat = cxPatRealized;
      if ( bsoMaskNull )
        cxPat = sizlPat_cx;
      cyPat = sizlPat_cy;
      *(_DWORD *)(pengbrush + 0x14) = cxPat;
      *(_DWORD *)(pengbrush + 0x18) = cyPat;
      *(_DWORD *)(pengbrush + 0x20) = pengbrush + 0x40;
      iFormat = (int)psoPattern;
      *(_DWORD *)(pengbrush + 0x3C) = psoPattern;
      dbmi_cy = cyPat;
      dbmi_iFormat = iFormat;
      v47 = 0;
      v48 = 1;