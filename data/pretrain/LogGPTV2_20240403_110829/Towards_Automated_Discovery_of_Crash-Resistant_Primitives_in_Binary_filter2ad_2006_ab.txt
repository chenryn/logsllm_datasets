advanced defenses are Code-Pointer Integrity (CPI) [28] and
any Control Flow Integrity (CFI) solution relying on a shadow
stack [14], [17] to protect backwards edges. Armed with crash
resistance, an attacker can locate the hidden region of CPI (both
the sparse region and the hash-table based implementation [22])
and modify the metadata of any pointer. This means that the
main assumption of CPI, namely that the pointer metadata
of any code pointer cannot be modiﬁed by an attacker and
thus any use of crafted pointers is prevented, no longer holds
true. A similar attack is possible for shadow stack-based CFI
solutions. These solutions hide the location of the shadow stack
from the attacker by using, for example, a dedicated register
or thread local storage. If an attacker can ﬁnd the stack via
crash-resistant probing, she can modify the information stored
there.
The same holds true for implementations that instead of using
a dedicated shadow stack rely on separating safe and unsafe
stacks. The SafeStack [28] implementation by CPI, which is
now included in LLVM, provides such a feature and uses the
native stack only for statically proven safe variables. This means
An important type of defense that can hamper the success
of memory probing is runtime re-randomization [9], [12].
191
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:22 UTC from IEEE Xplore.  Restrictions apply. 
Employing runtime re-randomization can substantially decrease
the success probability of either the scanning itself or the
following attack step. Due to the “moving target”, it is harder
for an attacker to locate the code she needs and at the same
time abuse it within the time constraints given by the defense.
However, crash-resistant primitives that allow invalid executions
to be recovered can also weaken the security guarantees of
these defenses: given enough tries, such schemes can likely be
bypassed due to the chance of using the right randomization
in the attack attempt.
C. Threat Model
In the following section, we introduce several techniques to
detect crash-resistant code within a given binary executable.
Several conditions must hold for these code snippets to be
useful for an attacker. To this end, we assume the following
threat model in the rest of this paper, which is realistic and
matches the capabilities of a real-world attacker. Further, it
is consistent with recent research [15], [16], [18], [33], [40],
[42]:
• Arbitrary read/write primitive: The attacker can read
from and write to arbitrary memory locations.
• Information leak: An information leak allows the adver-
sary to infer the location of data protected via some kind
of randomization scheme such as ASLR. For example, the
adversary can locate the base address of module locations,
but she cannot access reference-less memory locations.
• Computational capabilities: The attacker can perform
computations during the attack. This can be some form
of scripting environment on the client side or a server ac-
cepting multiple connections. The latter allows an attacker
to query the state of the server with one connection and
act on this information with another one.
• Writable ⊕ Executable memory: Memory pages are
marked as either executable or writable, but not both at
the same time.
• State-of-the-art defenses: The target application employs
some kind of state-of-the-art defense to thwart code-reuse
attacks. This can be either an information hiding scheme
such as a shadow stack-based CFI approach, or some kind
of defense to prevent control-ﬂow hijacking attacks such
as CPI.
• Hard crash policy: The application does not automat-
ically restart after a crash. This includes automatically
restarting a crashed worker process or a user opening a
website again.
III. HIGH-LEVEL OVERVIEW
In code-reuse attacks, the exploitation procedure of memory
corruption vulnerabilities can be subdivided into three phases.
Initially, the attacker leverages a memory corruption vulner-
ability to establish a read/write primitive. Depending on the
kind of vulnerability, an attacker may be able to read some
out-of-bounds bytes in order to disclose some information
about the address space layout, or leverage some other kind of
information leak. In the second phase, the attacker prepares the
payload, for instance, by relocating a static ROP chain [38], the
counterfeit objects of the COOP attack [40], or by compiling
a JIT-ROP chain [42]. Meanwhile, it may be necessary for
the attacker to also bypass code-reuse defenses such as ﬁne-
grained randomization [11], [26], [46], shadow stack-based CFI
solutions [14], [17], CPI [28], and other information hiding-
based approaches [9], [18], [31]. Finally, the attacker hijacks
the control ﬂow by overwriting code pointers or other sensitive
pointers. In practice, it may be necessary to carry out (parts of)
the sequence multiple times in order to bypass multi-process
sandboxing schemes or to escalate the privileges of the user.
We assume that a defense relying on information hiding, for
example one of those discussed in Section II-B, is employed
by the target application. Thus an attacker needs to leverage a
crash-resistant primitive in the second attack phase with the
help of the following steps (Figure 1):
1) Overwrite a value in memory: the attacker uses a memory
corruption primitive to prepare the memory for the next
step, usually overwriting pointers to data which are then
probed later; modifying data can cause usually benign
functions to exhibit unintended/malicious behavior.
2) Trigger execution of probing: the attacker forces the
program to execute the probing primitive. This is trivial via
a control-ﬂow hijacking attack, but we focus on locating
primitives legitimately accessible to the attacker, e.g.,
functions in a scripting environment.
3) Infer the state of the probed location: ﬁnally, the attacker
requires an indication whether or not the probing attempt
succeeded. In the easiest case, this is directly inferred
from a return value or similar information, but usually
the attacker needs to infer the state indirectly, e.g., via
memory changes or execution timings.
These steps can be repeated several times to probe other
memory locations until enough information about the memory
layout is known to the attacker.
In the remainder of this section, we describe our classiﬁca-
tion of crash-resistant primitives and outline how we locate
additional candidates in a (semi-)automated way for each type.
Note that we do not cover functionality intended for querying
the memory layout of a process, such as the /proc ﬁle system
under Linux or functions like VirtualQuery or IsBadReadPtr
on Windows.
(returns EFAULT if address not valid)
recv (fd, A, ...)
step 2: 
make program use the pointer
in crash tolerant function
A
step 1: 
change pointer in memory
step 3: 
check for success of
the probe operation
Figure 1: Attacker’s procedure to probe memory without crashing
192
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:22 UTC from IEEE Xplore.  Restrictions apply. 
A. Syscalls and OS API Functions
Modern operating systems allow for the quasi-parallel
execution of different, isolated user space processes. This also
means that a fault in a single program must not cause another
independent program or the whole system to fail. This is
achieved by handling errors, e.g., invalid memory accesses, on
a per-program basis. However, once a program needs to pass
data to the operating system, any error in this data (or often in
the case of a memory error, in the location of this data) can
potentially impede the stability of the whole system. As such,
whenever data is passed from user space to kernel space, the
OS must perform strict error checking.
To allow an application to react to an error in its data,
a failure state is usually returned. If this event is properly
handled, the application can resume execution. However, in
the case of a scanning attempt, this property can leak valuable
information to the attacker. If she is able to inﬂuence the data
in a way that causes a failure state to be reported for invalid
addresses and success for valid ones, she is able to probe the
address space and uncover hidden memory regions. The actual
implementation of such a primitive is heavily OS dependent,
however it is applicable to any program allowing manipulation
of input data and inferring the error state afterwards.
On Windows systems, the OS exposes a set of system
API functions which are then translated to system calls
after preprocessing in user space. The result is an often
heavily abstracted interface to the underlying syscalls. This is
problematic in the context of memory probing, because any
access to the supplied memory region can lead to a fault in
user space, preventing the OS from gracefully reporting the
error state to the program. In contrast to this, programs running
on Linux are free to access syscalls directly or with minimal
abstraction. While both system operate on a similar principle—
a speciﬁed interface is provided for the user programs—we had
to account for the differences and chose to develop different
techniques for the Windows system API and Linux syscalls.
1) Linux syscall interface: The Linux kernel exposes a set
of well documented syscalls to the user space. These are used
to perform kernel-level functionalities from user space, such as
ﬁle- or network-related operations, and memory management.
In case an error occurs during a syscall, the kernel returns -1
to the user process to indicate that something went wrong and
assigns the appropriate error code to the errno variable in user
space.
Several syscalls require the application to provide pointers to
memory in user space such that the kernel can read data from or
write data to that area. In case the address is invalid, the kernel
sets the errno variable to EFAULT [5], which indicates that
the memory location is not accessible. EFAULT is a common
error code that many popular system calls use. Examples
include connect, read, write, epoll_wait, recvfrom, open,
and many others. If an attacker has control over the memory
address of the relevant syscall parameter, she can potentially
probe the address space for accessible memory areas without
crashing the application.
For instance, many servers contain a main loop like this:
1
2
3
4
5
6
7
8
while ( true ) { // server loop
...
if ( read (fd , buf , MAX_BUF_LEN ) < 0) {
terminate_connection (fd , " read failed ");
continue ;
}
...
}
Listing 1: Server loop with error handling
An attacker who is able to control the buf pointer can provide
any address and discover whether or not it is valid. Note that
the server will not crash.
2) Windows API:
The detection of crash-resistant candidates can be automated
as follows. Because of their relevance for crash-resistant
probing candidates, we maintain a list of all syscalls that
may return EFAULT and monitor their occurrence during an
instrumented, automated execution. We use taint analysis to
identify which parameters can be inﬂuenced by an attacker
and execute unit tests to analyze which syscalls can potentially
be executed during a run of the application. As a result, we
obtain a list of potential candidates.
In contrast
to Linux, user-mode
applications on Windows exclusively utilize the API
provided by the operating system [39]. As a result, Windows
never exposes the system calls directly to the application.
Nevertheless, the same method outlined above can be applied:
if an API function accepts a pointer as an argument and an
attacker can control this pointer, she can point it to arbitrary
memory addresses and observe the return value or side effects
to infer the resulting state. An example for this concept is the
API function VirtualQuery, it is used to obtain information
on the state of a memory address. If an attacker is able to
control the argument ptr and knows the location of mem info,
she can probe any page for its state and permissions:
1
2
3
4
5
void * ptr = NULL ;
PMEMORY_BASIC_INFORMATION mem_info = malloc ( sizeof (
MEMORY_BASIC_INFORMATION ));
...
VirtualQuery ( ptr , mem_info , sizeof (
MEMORY_BASIC_INFORMATION ));
...
Listing 2: Example for VirtualQuery API call on Windows
While VirtualQuery is trivially able to serve as a memory
oracle,
the functions targeted by our framework do not
explicitly state their crash-resistant nature in the documentation.
Therefore we need to locate them ourselves using the following
steps. First, we reduce the set of all available Windows API
functions to only those functions with crash-resistant properties.
For this we apply a basic form of fuzzing to the Windows
API functions. In the second step, we attempt to ﬁnd code
paths to these crash-resistant API functions by harvesting API
calls, tracing instructions, and ﬁltering the results via custom
analysis scripts. Third, we classify the pointer arguments of the
crash-resistant API functions to ﬁgure out if we can actually
control the pointer on the execution path: only if an attacker-
controllable pointer is found, we can construct a corresponding
crash-resistant primitive.
193
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:22 UTC from IEEE Xplore.  Restrictions apply. 
B. Exception Handlers
Another feature of common operating systems and pro-
gramming languages is allowing a program to recover from
an exception. These exceptions can range from a software
generated exception to hardware faults. For our purposes, the
possibility of handling an invalid memory access and resuming
execution afterwards is especially critical. Low-level languages
like C/C++ allow a programmer to explicitly add constructs
to catch faults and tell the operating system how to resolve
them. Essentially the operating system or language runtime
provides information about the fault to a speciﬁc subroutine
in the program which then can choose from a set of options.
Commonly these options include simply ignoring the ex-
ception, executing the next instruction as if nothing happened,
resuming execution at a different location instead, or passing
the exception along to another handler. In the latter case, if
the exception is not handled by the program, the OS will
usually terminate the program. A crash-resistant primitive using
exception handling requires the program to dereference an
attacker controlled pointer inside a code block that is covered
by an exception handler. After a probing attempt, the result
must be visible to the attacker, either explicitly by a return value
or similar values, or implicitly with the help of side channels
(e.g., timing). In addition, the exception handler must allow
memory faults to be handled, which can be excluded using the
information provided for each fault to ﬁlter out unsupported
exceptions.
Under Linux, exception handling is implemented as signal
handling. A signal is a software interrupt that can be handled
by a process in three ways: (i) it can be ignored, (ii) it can be
caught by a signal handler, or (iii) the signal’s default action
can be performed [6]. For example, the default action of the
signal SIGSEGV (i.e., segmentation fault or access violation) is
the termination of the process.
In contrast, Windows utilizes two techniques for exception
handling, Structured Exception Handling (SEH) [36], [39]
and its extension Vectored Exception Handling (VEH) [37].
While SEH-based exception handlers operate locally on a
guarded function, VEH-based exception handlers can be
used globally within the process. The following example
shows a SEH-guarded block with its corresponding ﬁl-
ter:
1
2