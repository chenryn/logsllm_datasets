ResolveSecurityToken(kId)
Microsoft terminology
Signature verification
Authentication of signing party
• Method A supports a key identifier type that is not supported by 
Method B
• Both methods support same key identifier types, but in different 
order
• Methods check for different subsets of keys within the  
section
Possible scenarios for different key resolution
• Used in Web Services
• Eg: Exchange server
Windows Communication Foundation (WCF)
• Used in claim-aware applications
• Eg: MVC application authenticating users with ADFS or Azure Active Directory
Windows Identity Foundation (WIF)
• Uses custom configuration such as a custom resolver or custom certificate store
• Eg: SharePoint
Windows Identity Foundation (WIF) + Custom configuration
Examples of affected frameworks
Windows Communication 
Foundation (WCF)
This Photo by Unknown Author is licensed under CC BY
Windows Communication Foundation
• Framework for building service-oriented applications (SOA).
• Interaction between WCF endpoint and client is done using a SOAP 
envelopes (simple XML documents).
• WCF includes predefined bindings for most common 
communication protocols such as SOAP over HTTP, SOAP over TCP, 
and SOAP over Message Queues, etc.
• Two types:
•
Claim-aware services
•
Non Claim-aware services 
// System.IdentityModel.Tokens.SamlAssertion
SecurityKeyIdentifier keyIdentifier = signedXml.Signature.KeyIdentifier;
this.verificationKey = SamlSerializer.ResolveSecurityKey(keyIdentifier, outOfBandTokenResolver);
if (this.verificationKey == null) throw ...
this.signature = signedXml;
this.signingToken = SamlSerializer.ResolveSecurityToken(keyIdentifier, outOfBandTokenResolver);
Windows Communication Foundation (WCF)
Same  element is processed twice
// System.IdentityModel.Tokens.SamlSerializer
internal static SecurityKey ResolveSecurityKey(SecurityKeyIdentifier ski, SecurityTokenResolver
tokenResolver)
{
if (ski == null) throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("ski");
if (tokenResolver != null) {
for (int i = 0; i  element, try ALL resolvers, until one is successful
// System.ServiceModel.Security.AggregateSecurityHeaderTokenResolver
bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key) {
...
resolved = this.tokenResolver.TryResolveSecurityKey(keyIdentifierClause, false, out key);
if (!resolved)
resolved = base.TryResolveSecurityKeyCore(keyIdentifierClause, out key);
if (!resolved)
resolved = SecurityUtils.TryCreateKeyFromIntrinsicKeyClause(keyIdentifierClause, this, out key);
For a successful attack we need a first  key that cannot be resolved in  1 or 2, 
but can be resolved in 3.
Any Intrinsic keys such a BinarySecret or RSA key identifiers will meet this requirement
Security Key resolution – Depth First
Remember, one key at a time!
1
2
3
// System.ServiceModel.Security.AggregateSecurityHeaderTokenResolver
override bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token) {
bool resolved = false;
token = null;
resolved = this.tokenResolver.TryResolveToken(keyIdentifier, false, false, out token);
if (!resolved) resolved = base.TryResolveTokenCore(keyIdentifier, out token);
if (!resolved) {
for (int i = 0; i  
elements, until one is successful
For a successful attack we need a first  key that cannot be resolved by first resolver
Dupe Key Confusion
ResolveSecurityKey(KeyInfo)
ResolveSecurityToken(KeyInfo)
Symmetric Key
Expected X509 Cert
Signature verification
Authentication of signing party
1. Re-Sign SAML assertion with attacker’s own symmetric key 
2. Send symmetric key as first element in 
3. Send original trusted certificate as second element in 
Dupe Key Confusion
rV4k60..Oww==
MIIDBTCCAe2gAw….rzCf6zzzWh
Injected Key
Original Cert
Demo
Exchange Account Takeover
Windows Identity 
Foundation (WIF)
This Photo by Unknown Author is licensed under CC BY
WIF in a Nutshell
• WIF 4.5 is a framework for building identity-aware applications.
• Applications can use WIF to process tokens issued from STSs (eg: AD 
FS, Azure AD, ACS,...) and make identity-based decisions
Security Token 
Service
Application
WIF
Auth 
Token
User Identity
Key and Token resolutions
• Key resolution is only attempted with first Key Identifier!
• Security Token resolution is attempted for all Key Identifiers
foreach (SecurityKeyIdentifierClause securityKeyIdentifierClause in keyIdentifier) {
…
}
if (!_signingTokenResolver.TryResolveSecurityKey(_signedXml.Signature.KeyIdentifier[0], out key)) {
...
}
Key and Token resolutions
• Uses System.IdentityModel.Tokens.IssuerTokenResolver
• Secure resolver: It handles key and security token resolution in the same way
• Falls back to X509CertificateStoreTokenResolver in case of a miss
• ResolveSecurityKey() supports EncryptedKeyIdentifierClause
• ResolveToken() only knows about resolving X509 certificates
Attack limitations
• Symmetric key is decrypted using Private key from certificate stored in specific 
storage
• By default this storage is LocalMachine/Trusted People
• Attacker needs to obtain public key of such certificate
• Perhaps used for server SSL?
Dupe Key Confusion
ResolveSecurityKey(KeyInfo)
ResolveSecurityToken(KeyInfo)
1. Re-Sign SAML assertion with attacker’s own symmetric key
2. Encrypt symmetric key using public key from server certificate
3. Send send encrypted symmetric key as first element in 
4. Send original trusted certificate as second element in 
Symmetric Key
Expected X509 Cert
Signature verification
Authentication of signing party
….
e++….
MIIDBTCCAe...f6zzzWh
Dupe Key Confusion
Injected Key
Original Cert
SharePoint Server (WIF)
This Photo by Unknown Author is licensed under CC BY
SharePoint (WIF + Custom resolver)
• SharePoint uses WIF to process tokens and create user identities
• However, it uses a custom security token resolver:
• Microsoft.SharePoint.IdentityModel.SPIssuerTokenResolver
• Key resolution supports Intrinsic keys (eg: RSA Key, BinarySecret, …)
• Token resolution does not know how to resolve Intrinsic keys
Dupe Key Confusion
ResolveSecurityKey(KeyInfo)
ResolveSecurityToken(KeyInfo)
1. Re-Sign SAML assertion with attacker’s own private RSA key 
2. Send attacker’s RSA public key as first element in 
3. Send original trusted certificate as second element in 
RSA Key
Expected X509 Cert
Signature verification
Authentication of signing party
Dupe Key Confusion
irXhaxafoUZ...77kw==
AQAB
MIIDBTCCAe2...zzWh
Injected Key
Original Cert
SharePoint Authentication Flow
User Agent
Sharepoint STS
Sharepoint
Send IdP Token
Respond with FedAuth cookie
Request Session Token
Respond with Session token
Validate token (SP issuer resolver)
Validate token 
(WIF token resolver)
Cache Session Token
1
2
3
4
5
6
7
• Issuer: IdP
• Victim UPN
SharePoint Attack Flow
User Agent
Sharepoint
Send Malicious Token to 
WS
Invalid FedAuth cookie
Poison Session Token Cache
Validate token (SP issuer resolver)
Authenticate with attacker account
Send original FedAuth cookie to authenticate as victim
Issued by SharePoint so no STS 
exchange is needed
Gets a valid FedAuth cookie
Original FedAuth cookie now 
points to poisoned Session 
Token
1
2
3
4
• Issuer: SharePoint
• Victim UPN
• Attacker cache key
Demo
Privilege escalation on  SharePoint server
Burp Plugin
This Photo by Unknown Author is licensed under CC BY
Conclusions & Takeaways
This Photo by Unknown Author is licensed under CC BY
Conclusions
• Even if protocols are considered secure, the devil is in the 
implementations
• Processing same data with inconsistent code may lead to 
vulnerabilities
• Here be dragons:
•
Research focused on .NET, similar flaws can exist in other languages
•
Even in .NET, XML Signature is used in other potentially insecure places
• Patch ASAP :)
Questions?
This Photo by Unknown Author is licensed under CC BY
@Pwntester
@OlekMirosh