# Security Token Resolution and Key Confusion in .NET Frameworks

## Introduction
This document discusses the `ResolveSecurityToken` function, Microsoft terminology, signature verification, and authentication of the signing party. It also explores different key resolution scenarios and their potential vulnerabilities in various .NET frameworks.

## Key Resolution Scenarios
### Method A vs. Method B
- **Method A** supports a key identifier type that is not supported by **Method B**.
- Both methods support the same key identifier types but in different orders.
- Methods check for different subsets of keys within the section.

### Possible Scenarios for Different Key Resolutions
- **Web Services**: Used in applications like Exchange Server and Windows Communication Foundation (WCF).
- **Claim-aware Applications**: Used in MVC applications that authenticate users with ADFS or Azure Active Directory.
- **Custom Configurations**: Used in SharePoint, which uses custom resolvers or custom certificate stores.

## Affected Frameworks
### Windows Communication Foundation (WCF)
- **Framework Overview**: WCF is used for building service-oriented applications (SOA). Interaction between WCF endpoints and clients is done using SOAP envelopes (simple XML documents).
- **Predefined Bindings**: WCF includes predefined bindings for common communication protocols such as SOAP over HTTP, SOAP over TCP, and SOAP over Message Queues.
- **Types of Services**:
  - Claim-aware services
  - Non-claim-aware services

### Code Example
```csharp
// System.IdentityModel.Tokens.SamlAssertion
SecurityKeyIdentifier keyIdentifier = signedXml.Signature.KeyIdentifier;
this.verificationKey = SamlSerializer.ResolveSecurityKey(keyIdentifier, outOfBandTokenResolver);
if (this.verificationKey == null) throw ...
this.signature = signedXml;
this.signingToken = SamlSerializer.ResolveSecurityToken(keyIdentifier, outOfBandTokenResolver);
```

### Key and Token Resolution
- **Key Resolution**: Only attempted with the first key identifier.
- **Token Resolution**: Attempted for all key identifiers.
- **Secure Resolver**: Uses `System.IdentityModel.Tokens.IssuerTokenResolver` and falls back to `X509CertificateStoreTokenResolver` if needed.
- **Supports**: EncryptedKeyIdentifierClause for `ResolveSecurityKey()` and X509 certificates for `ResolveToken()`.

## Vulnerabilities and Attack Vectors
### Dupe Key Confusion
- **Attack Flow**:
  1. Re-sign SAML assertion with the attacker's own symmetric key.
  2. Send the symmetric key as the first element in the key info.
  3. Send the original trusted certificate as the second element in the key info.

### Code Example
```csharp
// System.ServiceModel.Security.AggregateSecurityHeaderTokenResolver
bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key) {
    resolved = this.tokenResolver.TryResolveSecurityKey(keyIdentifierClause, false, out key);
    if (!resolved)
        resolved = base.TryResolveSecurityKeyCore(keyIdentifierClause, out key);
    if (!resolved)
        resolved = SecurityUtils.TryCreateKeyFromIntrinsicKeyClause(keyIdentifierClause, this, out key);
}
```

### Attack Limitations
- **Symmetric Key Decryption**: Uses the private key from a certificate stored in a specific storage (e.g., LocalMachine/Trusted People).
- **Public Key Requirement**: The attacker needs the public key of the server certificate, possibly used for SSL.

### SharePoint (WIF + Custom Resolver)
- **Overview**: SharePoint uses WIF to process tokens and create user identities but employs a custom security token resolver (`Microsoft.SharePoint.IdentityModel.SPIssuerTokenResolver`).
- **Key Resolution**: Supports intrinsic keys (e.g., RSA Key, BinarySecret).
- **Token Resolution**: Does not resolve intrinsic keys.

### Attack Flow
- **Re-Sign SAML Assertion**: With the attacker's own private RSA key.
- **Send RSA Public Key**: As the first element in the key info.
- **Send Original Certificate**: As the second element in the key info.

### SharePoint Authentication Flow
1. User Agent sends IdP token to SharePoint STS.
2. SharePoint responds with a FedAuth cookie.
3. User Agent requests a session token.
4. SharePoint responds with a session token.
5. Validate token using SP issuer resolver.
6. Validate token using WIF token resolver.
7. Cache the session token.

### SharePoint Attack Flow
1. User Agent sends a malicious token to the WS.
2. Invalid FedAuth cookie is generated.
3. Poison the session token cache.
4. Authenticate with the attacker's account.
5. Send the original FedAuth cookie to authenticate as the victim.
6. Get a valid FedAuth cookie.
7. Original FedAuth cookie now points to the poisoned session token.

## Conclusions
- **Implementation Flaws**: Even secure protocols can be vulnerable due to implementation issues.
- **Inconsistent Data Processing**: Inconsistent code can lead to vulnerabilities.
- **Research Focus**: While this research focuses on .NET, similar flaws may exist in other languages.
- **Patch Recommendations**: Patch as soon as possible to mitigate risks.

## Questions?
Feel free to ask any questions.

---

**Images**:
- This Photo by Unknown Author is licensed under CC BY

**Presenters**:
- @Pwntester
- @OlekMirosh