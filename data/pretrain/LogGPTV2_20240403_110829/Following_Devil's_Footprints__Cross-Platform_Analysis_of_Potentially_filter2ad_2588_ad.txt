available on iOS. These APIs (for preparing for the call) are
often within the same category and therefore replacing them
365365
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
invariants
…
iOS adwo
…
"http://apiconfig.adwo.com/adwo/i”
…
"&brand=%@“
"&userid=%@“
CTTelephonyNetworkInfo:subscriberCellularProvider
ASIdentifierManager:advertisingIdentifier
NSURLConnection:initWithRequest:delegate:startImmediately:
NSURLConnection:scheduleInRunLoop:forMode:
…
Android adwo
…
…
"http://apiconfig.adwo.com/adwo/a"
…
"&brand=“
"&userid=“
ConnectivityManager.getActiveNetworkInfo()
NetworkInfo.getTypeName()
TelephonyManager.getDeviceId()
TelephonyManager.getSimSerialNumber()
TelephonyManager.getLine1Number()
URL.openConnection()
HttpURLConnection.setDoOutput()
HttpURLConnection.setConnectTimeout()
HttpURLConnection.setReadTimeout()
HttpURLConnection.setRequestMethod()
HttpURLConnection.getOutputStream()
HttpURLConnection.connect()
HttpURLConnection.getInputStream()
…
Fig. 8: The APIs used by the same behavior are quite diverse in two platforms. If category is used instead of a concrete API, the two
behavior sequences can be mapped.
with a single category hides the diversity of such a preparation
step across different platforms.
Speciﬁcally, in our research, we deﬁne a behavior as a
sequence of API categories discovered from a program’s CFG,
together with the occurrences of the invariants (i.e., the constant
strings) used for mapping libraries cross platforms. In Figure 8,
the behaviors within the Android and iOS libraries are described
as such sequences (illustrated in the ﬁgure). To compare the
behaviors between 46 matched PhaLib pairs, we ﬁrst created a
dictionary that maps 21 Android framework classes and 39 iOS
framework classes (i.e., schemes), including over 500 APIs on
to 19 categories1. To map an Android class to a cat-
each side,
egory, we leveraged the permissions used by APIs in the class.
Speciﬁcally, such permissions were automatically discovered
using PScout [28] and then manually inspected before placing
the class requiring them into a speciﬁc category. For example,
a class asking for android.permission.SEND_SMS and
android.permission.READ_SMS are put in the category
“SMS”. On the iOS side, since there is no such API-permission
mapping, we had to manually ﬁnd out each API’s semantics
to determine its afﬁliation with a speciﬁc category. Note that
Android developers may use Intents instead of framework
APIs to perform some operations: for example, they may run
“content://com.android.contacts” to read contacts. Therefore,
we also included 14 similar Intents in the dictionary. On top of
the dictionary, we further implemented an automatic analysis
tool called BehaviorFinder, which starts from the methods
not called by any other methods inside a library (e.g., entry
point, event handlers) and conducts a standard static inter-
procedural analysis [29] to generate the invariant-API-category
(IAC) sequences within both Android packages and iOS apps.
For this purpose, we ran SmartDroid [26] to build the cross-
procedure CFG for the Android package and construct the
CFG over the classes identiﬁed within an iOS app based
on capstone [23]. Along the CFGs, invariants and APIs are
automatically discovered and translated using the dictionary,
until IAC sequences are fully constructed.
Given the behaviors (the IAC sequences) from an Android
PhaLib and its iOS counterpart, BehaviorFinder further carries
1We plan to release the dictionary at www.appomicsec.com.
out a pair-wise comparison between the sequences from the two
platforms. Whenever the two sequences are found to share a
common subsequence at least 80% of either sequence in length,
we consider that these two sequences are matched and the
behaviors they represent are shared across the two libraries over
different platforms. To understand the accuracy of this approach,
we randomly selected 90 mapped IAC pairs in our research and
manually inspected the corresponding code on both platforms
to ﬁnd out whether they really describe the same behaviors.
This validation process shows that the FDR introduced by
our approach is only 3.3%. Running BehaviorFinder on the
PhaLab pairs discovered, we successfully extracted 9,259 IAC
sequences from 46 iOS libraries and 16,762 from 46 Android
libraries, and identiﬁed 2,891 common behaviors.
The last step of the analysis is to ﬁnd out whether a common
behavior is indeed potentially harmful. To this end, we ran
a script to remove the behavior’s IAC from all the packages
within the same cluster and then submitted the placeholder app
of this cluster (i.e., the fake app that integrates the packages
within the cluster; see Section III-B) to VirusTotal. When the
scan report comes back, our approach inspects the number of
scanners (in VirusTotal) ﬂag the placeholder app as potentially
harmful: if some scanners before removing the IAC, marks
the placeholder as potentially harmful but stops doing so after
the IAC sequence is gone, we have reason to believe that the
sequence is considered to be part of the signatures used by
those scanners2. This indicates that indeed the sequence is part
of potentially-harmful activities. In our research, our approach
recovered 838 such conﬁrmed harmful behaviors out of the
2,891 common behaviors across Android and iOS PhaLibs.
IV. FINDINGS AND MEASUREMENT
In this section, we report the discoveries made by running our
cross-platform methodology over 1.3 million Android apps and
140,000 iOS apps. Our research brought to light a large number
of PhaLibs, both on Android and on iOS, and their signiﬁcant
impacts. Also highlighted in our study is the observation that
repackaging third-party libraries likely already becomes an
2Note that the placeholder is a fake app and all the packages it includes
have been modiﬁed when extracted from their host apps, and therefore, the
scanners ﬂagging the app are certainly not using checksums.
366366
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
Market
Google Play
Asia Market
Other Markets
# PhaLibs # of total apps studied # Infected apps
27353 (6.84%)
67108 (8.39%)
3847 (3.85%)
400000
800000
100000
77
113
25
TABLE II: PhaLibs in Android markets
important avenue for propagating mobile PHAs. Further we
revealed the correlations between Android and iOS PhaLibs.
A. Settings
Apps. We collected 1.3 millions Android apps from over 30
markets (Google Play and other markets in America, Europe
and Asia), and 96,579 iOS apps from the ofﬁcial Apple Store
and 45,966 apps from third-party markets (2 American, 3 Asian
and 2 European markets, as illustrated in Table II & III). One
of these third-party markets install Apple apps to un-jailbroken
devices and others serving jailbroken devices. From the third-
party stores, we randomly selected apps to download, while
from the ofﬁcial stores (i.e., Google Play and Apple Store),
we ﬁrst picked up the most popular apps in each category (top
500 for Google Play and top 100 for Apple Store) and then
randomly chose the targets from the rest. Also, we removed
duplicated apps according to their MD5.
Computing environment. Three powerful servers were used
to analyze all the apps. One has 20 cores at 2.4GHz CPU,
128GB memory and 56TB hard drivers. The other two servers
each have 12 cores at 2.1Hz CPU, 64GB memory and 20TB
hard drivers. The operating systems are Red Hat Linux.
Validation. All the ﬁndings made by our methodology were
thoroughly validated to ensure their accuracy. Speciﬁcally,
100 randomly sampled clusters from the total 763 clusters
(for Android library discovery) were analyzed manually: from
each sampled cluster, 10 packages were randomly picked out
to determine whether they include similar methods, provide
similar services and should be considered as the variations of
the same library. Further, from all the libraries mapped across
the platforms, we randomly selected 50 pairs (an Android
package and an iOS app found to contain related methods)
and again manually analyzed their code to determine whether
indeed they are different versions of the same library (for
the iOS app, the library it integrates). Finally, we randomly
sampled 90 pairs of IAC sequences matched between Android
and iOS PhaLibs to ﬁnd out whether they are related to the
same activities (e.g., read contacts and send them out) and
whether there is any reason to believe that the behavior is
potentially harmful.
This validation process shows that both the library clustering
and cross-platform library mapping are highly accurate: we
did not ﬁnd any false positive. On the other hand, the behavior
paired across the platforms did cause some mismatches,
introducing a FDR below 3.3%. In other words, the vast
majority of the matching we found are correct.
B. Landscape
PhaLibs on Android. From the 1.3 millions Android apps in
our dataset, we found 763 libraries with totally 4,912 variations
(different ofﬁcial versions, third-party customizations, etc.).
Running VirusTotal [30] on these libraries (Section III-B), we
discovered that 1008 variations of 117 libraries are potentially
harmful (ﬂagged by at least two scanners in VirusTotal).
Figure 9 illustrates the distribution of PhaLibs over the number
of scanners. As we can see from the ﬁgure, 386 variations of
32 libraries were alarmed by at least 10 out of the 54 scanners.
77 of the 117 libraries were downloaded from Google Play.
By comparison, third-party markets are more susceptible to
PhaLibs, in general, about 7.88% of their apps infected with
these libraries.
To understand the impacts of the PhaLibs discovered, for
each library, we added together the total installs of each Google-
Play app that integrates it. Figure 10 illustrates the distribution
of the numbers of PhaLibs over the sum of the installs from
all the apps using them. The ﬁgure shows that some PhaLibs
(e.g., jirbo) have been installed over 279 million times, and
altogether, each PhaLib has 11 million installs on average.
This indicates that the impacts of such libraries are indeed
signiﬁcant.
PhaLibs on iOS. We found that among all 1008 variations of
117 PhaLibs, 46 PhaLibs were mapped to their counterparts
integrated within iOS apps. Among them, 23 PhaLibs (706
variations) were shown to have potentially harmful behaviors
related to their Android versions. Compared with Android, the
total number of PhaLibs on iOS is relatively low, which is
understandable due to the fact that our study focuses on the iOS
libraries with Android versions. Still, such iOS PhaLibs have
a signiﬁcant impact, affecting over 6,842 iOS apps, and also
2,844 of them show up on the Apple App Store. Even with its
rigorous vetting protection, the apps integrating those libraries
still fall through the cracks. As an example, an ad library adwo
we found has infected at least 61 apps on the Apple Store,
performing harmful activities such as taking pictures, recording
audio and uploading the recordings and the user’s contacts and
precise locations to a remote server. Also we found that some
versions of a library contain potentially harmful behaviors while
others do not (details are illustrated in appendix: Table VIII
for Android and Table VII for iOS). On iOS, this raises the
concern that potentially a new version of a library may not
receive a full security inspection if its old version (without
harmful behaviors) passed the vetting process before.
its apps without
We also found 19 PhaLibs in third-party app stores, both
Android and iOS. Table III elaborates our ﬁndings. Particularly,
16 PhaLibs infecting 2,985 apps were discovered on the
91 market [31], a Chinese Apple app market that enables
the iPhone users to install
jailbreaking
their devices (possibly through enterprise certiﬁcates or other
techniques [32]). The harmful behaviors of these libraries
include collecting accurate location data, voice recording, etc.
Also, our study reveals 18 PhaLibs in jailbreak app stores,
which perform such activities as uploading installed application
list, install application with private APIs, and taking photos.
Just as expected, more PhaLibs are on the third-party stores
than the ofﬁcial Apple Store.
367367
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
s
e
i
r
a
r
b
i
l
f
o
m
u
S
110
100
90
80
70
60
50
40
30
20
10
0
s
b
i
L
a
h
P
s
o
r
e
b
m
u
N
30
25
20
15
10
5
0
27
16
18
6
4
4
2
s
p
p
a
f
o
m
u
S
9000
8000
7000
6000
5000
4000
3000
2000
1000
0
2
3
4
5
6
7
8
9 10 11 12 13 14 15 16 17 18 19 20
1k
10k
100k
1,000k
10,000k
100,000k 200,000k
Numbers of warning scanners
Fig. 9: Distribution of PhaLibs over the
number of scanners.
Sum of installs on Google Play
Fig. 10: Distribution of PhaLibs over the
sum of installs from all the apps using them.
0.5k
0
1k
1
5k
5
10k
10
50k
50
100k
100
500k 1,000k 5,000k 10,000k
500
1,000 5,000 10,000
Number of installs
Fig. 11: Distribution of apps over their total
installs.
Among all 23 iOS PhaLibs, 15 of them are ad libraries while
the other 8 are toolkits, such as umpay, lotuseed and mobclick.
Some of them are available on the public repositories, such as
GitHub and Google Code. Using their names and some invariant
strings within the libraries, we searched Google and found 6 of
them are publicly available, while the other 17 PhaLibs are not
online. Among these PhaLibs could be those distributed in the
underground community. Also, some of these libraries have
both their ofﬁcial versions and third-party customized versions.
Later we show that this could be indicative of the presence of
library repackaging attacks (Section IV and Section IV-D).
Infected apps. As mentioned earlier, our study shows that
27,353 apps (6.84%) in Google Play and 70,955 apps (7.88%)
in third-party markets are infected through libraries. Table II
shows the detailed ﬁndings. As we can see from the table, the
Asia markets are more likely to host infected apps. On the
other hand, still many PHAs are on the Google Play store.
Of particular interest here is that compared with what are
reported by the prior research, which discovers that 7% of the
apps on the Play store are PHAs, apparently, PhaLibs could
be behind most of these suspicious apps. This indicates that
libraries could be an important (and also largely overlooked)
channel for disseminating potentially harmful code. Further we
analyzed the popularity of these PHAs. Figure 11 shows the
distribution of those apps over their total installs. About 4,123
have been installed over 50,000 times each. Among them are