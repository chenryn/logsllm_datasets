### Availability and APIs on iOS

These APIs, which are used for preparing a call, often fall within the same category. Therefore, replacing them with a single category can obscure the diversity of such preparation steps across different platforms.

### IEEE Xplore Licensing Information
- **Authorized Use:** Limited to IEEE Xplore.
- **Download Date:** March 18, 2021
- **Time:** 12:16:50 UTC
- **Restrictions:** Apply as per IEEE Xplore guidelines.

### Invariants and API Examples

#### iOS
- **API URL:** "http://apiconfig.adwo.com/adwo/i"
- **Parameters:**
  - `&brand=%@`
  - `&userid=%@`
- **APIs:**
  - `CTTelephonyNetworkInfo:subscriberCellularProvider`
  - `ASIdentifierManager:advertisingIdentifier`
  - `NSURLConnection:initWithRequest:delegate:startImmediately:`
  - `NSURLConnection:scheduleInRunLoop:forMode:`

#### Android
- **API URL:** "http://apiconfig.adwo.com/adwo/a"
- **Parameters:**
  - `&brand=`
  - `&userid=`
- **APIs:**
  - `ConnectivityManager.getActiveNetworkInfo()`
  - `NetworkInfo.getTypeName()`
  - `TelephonyManager.getDeviceId()`
  - `TelephonyManager.getSimSerialNumber()`
  - `TelephonyManager.getLine1Number()`
  - `URL.openConnection()`
  - `HttpURLConnection.setDoOutput()`
  - `HttpURLConnection.setConnectTimeout()`
  - `HttpURLConnection.setReadTimeout()`
  - `HttpURLConnection.setRequestMethod()`
  - `HttpURLConnection.getOutputStream()`
  - `HttpURLConnection.connect()`
  - `HttpURLConnection.getInputStream()`

### Figure 8: API Diversity Across Platforms
The APIs used for the same behavior vary significantly between the two platforms. If a single category is used instead of specific APIs, the diversity in the preparation step across different platforms is hidden.

### Behavior Definition and Analysis

In our research, we define a behavior as a sequence of API categories discovered from a program's Control Flow Graph (CFG), along with the occurrences of invariants (constant strings) used for cross-platform library mapping. Figure 8 illustrates these behaviors in both Android and iOS libraries.

To compare behaviors between 46 matched PhaLib pairs, we created a dictionary that maps:
- 21 Android framework classes
- 39 iOS framework classes
- Over 500 APIs into 19 categories

#### Mapping Process
- **Android:** We used permissions associated with APIs, discovered using PScout [28], and manually inspected them to place classes into specific categories.
- **iOS:** Since there is no direct API-permission mapping, we manually determined each API's semantics to categorize it.

We also included 14 similar Intents in the dictionary to account for operations performed by Android developers using Intents instead of framework APIs.

### BehaviorFinder Tool

We developed an automatic analysis tool called BehaviorFinder, which:
1. Starts from methods not called by any other methods inside a library (e.g., entry points, event handlers).
2. Conducts static inter-procedural analysis [29] to generate invariant-API-category (IAC) sequences for both Android packages and iOS apps.
3. Uses SmartDroid [26] to build the cross-procedure CFG for Android and constructs the CFG for iOS based on Capstone [23].

### Pairwise Comparison and Validation

BehaviorFinder performs pairwise comparisons of IAC sequences from Android and iOS. If two sequences share a common subsequence of at least 80% of either sequence's length, they are considered matched, indicating shared behaviors across platforms.

To validate this approach, we randomly selected 90 mapped IAC pairs and manually inspected the corresponding code. The false discovery rate (FDR) was found to be only 3.3%.

### Harmful Behavior Identification

To determine if a common behavior is potentially harmful, we:
1. Removed the behaviorâ€™s IAC from all packages within the same cluster.
2. Submitted the placeholder app (a fake app integrating the packages) to VirusTotal.
3. Inspected the number of scanners flagging the placeholder as potentially harmful before and after removing the IAC.

If some scanners flagged the placeholder as harmful but stopped doing so after the IAC was removed, the sequence is likely part of the signatures used by those scanners. Our approach recovered 838 confirmed harmful behaviors out of 2,891 common behaviors.

### Findings and Measurement

#### Settings
- **Apps Collected:**
  - 1.3 million Android apps from over 30 markets.
  - 96,579 iOS apps from the Apple Store and 45,966 apps from third-party markets.
- **Computing Environment:**
  - Three servers with varying configurations running Red Hat Linux.
- **Validation:**
  - Manual inspection of 100 randomly sampled clusters and 50 library pairs.
  - FDR below 3.3% for behavior pairing.

#### Landscape
- **PhaLibs on Android:**
  - 763 libraries with 4,912 variations.
  - 1,008 variations of 117 libraries flagged as potentially harmful.
  - 77 of the 117 libraries downloaded from Google Play.
  - Third-party markets more susceptible, with 7.88% of their apps infected.

- **PhaLibs on iOS:**
  - 46 PhaLibs mapped to iOS counterparts.
  - 23 PhaLibs (706 variations) showed potentially harmful behaviors.
  - 6,842 iOS apps affected, including 2,844 on the Apple App Store.
  - Example: adwo library infected 61 apps on the Apple Store, performing harmful activities like taking pictures, recording audio, and uploading data to a remote server.

- **Third-Party Stores:**
  - 19 PhaLibs in third-party stores, affecting 2,985 apps.
  - 91 market (Chinese Apple app market) enabled iPhone users to install apps without jailbreaking.
  - Jailbreak app stores hosted 18 PhaLibs, performing activities like uploading installed application lists and taking photos.

- **Infected Apps:**
  - 27,353 apps (6.84%) in Google Play and 70,955 apps (7.88%) in third-party markets infected through libraries.
  - Asia markets more likely to host infected apps.
  - 4,123 PHAs installed over 50,000 times each.

This detailed analysis highlights the significant impact of PhaLibs and the need for robust security measures to detect and mitigate these threats.