existing apps. For this purpose, we installed 50 popular apps on
a Nexus 5. After running Monkey across these apps with 100,000
random events, we found no runtime error caused by NaviGuard
reported in the system log, indicating that the security controls put
in place will not disrupt these apps’ normal operations.
5 LESSON LEARNT
The root cause of XAWI is the capability to cross-WebView com-
munication, particularly navigating another WebView to a given
domain from the web. This capability, however, is critical for the
integrated service, which is supposed to directly link web content
to the most suitable platform (app) to present it. Actually, today’s
content providers are increasingly utilizing deep linking techniques
to indicate to the browser or WebView not only a specific app but
also its component for handling the specific content (e.g., video,
image, links, etc.) on their web pages. Such cross-WebView content
distribution is not a capability that can be curtailed, even given the
security implications we discovered.
Indeed, not only Android but also iOS is aggressively using this
capability. Actually, the scheme channel was even less protected on
iOS until recently, when research shows that URL schemes can be
hijacked by a malicious local app (installed on the target device) that
steals sensitive user information, such as secret tokens from another
app [39]. As a result, since iOS 9, any scheme invocation across
apps needs the user’s approval, which is clearly less convenient
than Apple hopes. More recently, Apple is pushing a new deep
linking mechanism called universal links on iOS 9 and later [11].
This mechanism binds an app to a link, with a certificate-based
verification. Through the link, one can directly trigger another app’s
component (e.g., WebView) and pass parameters (e.g., URL) without
asking the user. As a result, this new mechanism, once being widely
deployed, could also bring in cross-WebView infections, though
more studies are certainly needed to better understand its security
risk.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA840A key lesson learnt from our study is that a smooth cross-WebView
channel can also become a path for infection transmission. Safe-
guards should be in place on the path during the design and im-
plementation of such a communication mechanism. For example,
it would not be excessive for the app receiving navigation request
to check the security risk of the domain it is about to move into,
should the app decide not to confine its WebView within a white-list
of domains (for the purposes like user retention). Techniques for
protecting web surfing, such as use of blacklists like Google Safe
Browsing, could be necessary, if they are made more efficient and
more suitable for working on the IPC level. Also, isolation should be
applied to protect the WebView with critical capabilities, together
with quarantine of the untrusted domain within the WebView that
cannot communicate with other activities except those provided by
the app that initiates the navigation request. Also, it is important
to provide guidance and SDKs to the app developer for putting
security checks at the right program locations, as well as develop
program testing techniques for systematically detecting the lapses
in an app’s domain control. Further, incentives should also be given
by the content provider to developers for better protecting their
apps, through, for example, only linking the web content to the
apps of good security quality. On the OS front, at least the URLs
passed between the apps could be inspected to identify known
malicious domains or anomalies.
6 RELATED WORKS
Attacks on WebView. WebView is a component vulnerable to var-
ious attacks. Previous studies show that untrusted web contents can
leverage JS interfaces to connect to a smartphone’s local resources
such as GPS locations [25] and file system [10, 25]. In the meantime,
an attack app could also inject malicious JavaScript code into the
web contents, sniff and hijack user events [25]. These vulnerabil-
ities are found to be pervasive [28] and are not fixed timely [35].
However, none of these prior studies looked into possibility of
cross-WebView, multi-app attacks and security implications of un-
privileged WebView (those without any JS interface and call-back
capability), which have first been investigated in our research.
Security risks in URL schemes. URL-scheme IPC is known to
be vulnerable to hijacking attacks, particularly on iOS and OS
X, in which a malicious app claims the scheme used by popu-
lar apps to steal the Intents sent to them or impersonate those
apps [39]. Scheme-based web-to-app attack is also found to be pos-
sible on iOS, with a remote cross-site request forgery reported in
a prior study [38]. On Android, as mentioned earlier, Opera and
Chrome are found to expose their private functionalities to Web-
View [37]. Most related to our research is the finding that Samsung’s
UniversalMDMClient can be launched through a URL, asking the
user whether she wants to install an update[27]. On the other hand,
never before has any systematic effort been made to understand the
security implication of cross-WebView navigation, a functionality
considered to be legitimate and necessary. Our studies reveal the se-
rious security risks involved in this communication, which enables
a remote adversary to attack the mobile users in a way that cannot
be imagined before, including remote app infections, persistent
app control and multi-app colluding attacks. Our findings point to
the fundamental design weakness in URL scheme management on
Android and new attack surface it exposes to the remote adversary.
Mobile Phishing. GUI-related Phishing has long been studied [17]
and recently mobile Phishing has also been intensively investi-
gated [5–7, 19, 21, 31]. Particularly, prior research investigates the
vulnerable links between mobile apps and web sites [19], task hi-
jacking [31] that enables a malicious app to implement UI spoof-
ing, by manipulating system back stacks or a benign app’s task
stack, side-channel based identification of attack opportunities [7],
and other kinds of Phishing activities, such as SMiShing and Vish-
ing [33]. However, none of these studies investigate the risk of a
fully remote, multi-app Phishing attack, which our study found
is completely feasible. This surprising RDP attack turns out to be
extremely powerful, outclassing all existing defense (Section 3.2)
and being recognized by the industry to be a realistic threat.
7 CONCLUSION
In this paper, we report our finding of a fundamental design chal-
lenge in cross-WebView navigation, a much-needed capability for
integrating the services from different apps. Our study reveals a
new XAWI weakness overlooked by the prior research, through
which a remote adversary can acquire persistent, stealthy control
on multiple apps, as soon as his web content is triggered by Chrome.
We demonstrate that a series of multi-app, colluding attacks can be
launched to perform highly realistic remote Phishing attacks and
escalate the remote adversary’s privileges. Also such vulnerable
apps are found to be pervasive, at least 7.4% among popular apps,
including Facebook, Google Drive, Twitter, TripAdvisor, etc. To
protect Android users, we developed a new technique to automat-
ically control cross-WebView communication. Most importantly,
our study brings to light the contention between the strong de-
mand for convenient web-to-app linking and the security need for
controlling the channels for such communication. We show that
existing protection on the channels has not been well thought-out
and often can be easily bypassed. Further effort is required to better
understand the problem and find the solution that closes the attack
avenues without undermining the utility of the channels.
8 ACKNOWLEDGMENTS
PKU authors (contact: Xinhui Han) were supported in part by
NSFC 61402125 and National Key Research and Development Pro-
gram of China (Grant No.2016YFB0801302). IU authors (contact:
XiaoFeng Wang) were supported in part by NSF CNS-1223477,
1223495, 1527141, 1618493, ARO W911NF1610127 and Samsung
Gift fund. IIE authors (contact: Kai Chen) were supported in part
by NSFC U1536106 and 61728209, National Key Research and De-
velopment Program of China (Grant No.2016QY04W0805), Youth
Innovation Promotion Association CAS, and strategic priority re-
search program of CAS (XDA06010701).
A MORE ATTACK CASES
Device state detecting and tampering. We also discovered in
our research that from Baidu mobile assistant, an app store app
among the most popular Chinese apps (with over 100 million users),
a remote XAWI adversary can acquire the capabilities to monitor
the user’s interactions with her device, identify other apps on the
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA841infected device and even perform an unauthorized app install. Re-
lated functionalities are provided by the Baidu app to its WebView
through JavaScript interfaces, including the readings of the device’s
gyroscope, the loudness of the voice perceived by the device’s mi-
crophone, the existence of a package and installation of an app from
the SD card. However, direct navigation from Baidu’s appstore page
to a malicious website is unlikely, since its WebView does not pro-
vide a URL bar and other assistance for browsing unrelated sites.
Further, there is protection in place that whenever the WebView
leaves a domain under Baidu’s control, part of JavaScript interfaces’
functionalities are disabled.
In our research, again we use Chrome as the entry point for the
attack. The attack content inside Chrome’s WebView generates an
Intent scheme (with the package name of the Baidu app) to trig-
ger the Baidu activity UrlHandlerActivity, which has registered
an Intent filter for the scheme http://*/.*/api/calendar (specified
in its data field). The activity responds to the attack URL http:
//attack.com/new/api/calendar, silently navigating the WebView to
attack.com. Under the domain, though part of the Javascript inter-
faces functionalities are stopped, we found that still important capa-
bilities are exposed. Particularly, the JS interfaces downloadApp and
getAppInfo are open to the untrusted domain. So the adversary can
find out what app has been installed through querying getAppInfo
or download app packages through downloadApp. Also interest-
ingly, our research shows that Baidu utilizes the WebView callback
shouldOverrideUrlLoading but fails to protect it. The callback
operates on the URLs in the form of appclient:download..., which
leads to the download of a file from a specific web location, and
appclient:intent intent://..., which creates a deep link for invoking
an activity.
We further come up with a new technique to bypass Baidu’s
domain protection. A problem with Baidu’s JavasScript interfaces
is that some of the JS interfaces it gives to WebView allow callbacks:
e.g., downloadApp(String url, String callback). Here the
callback is a piece of JavaScript code to be executed after completion
of the function call, in an asynchronous way. This creates a race
condition that enables a Time of Check and Time of Use (TOCTOU)
attack. Specifically, the attack web content can invoke such an
interface, supplying it with JavaScript code as the callback. In the
meantime, the content also initiates a navigation to a Baidu domain.
The trick here is that once the navigation is complete, even though
the adversary loses the control of the WebView, he can regain it
when the JS code in the callback is injected back to the current
domain, which now is an authorized domain with full JavaScript
interfaces capabilities. We successfully executed the attack in our
study (also see our demo [1]).
Once the JavaScript interfaces are open, the malicious script
can further access user information on the device. We found that
through the JavaScript interfaces, the adversary can change the
user’s calendar, add reminders, collect the readings from its gy-
roscope and the real-time loudness of the voice when the user is
speaking to her phone (which can be a potential side channel), get
the user’s login state and account information, and even automat-
ically install an app through installApp (when the auto-install
setting in the app is turned on). All these attacks can happen in a
stealthy way, when the infected WebView is running in the back-
ground. We reported the vulnerability to Baidu and helped them
fixed it.
B FIGURES AND TABLES
SecureIntentHandlerActivity is an Activity provided by Face-
book Messenger. As illustrated in (Figure 9), this Activity is pro-
tected by a permission FB_APP_COMMUNICATION, a signature one
only given to Facebook’s products. The Activity also registers an
Intent Filter to receive Intents with scheme fb-messenger-secure://.
Once receiving an Intent with such scheme (see example in fig-
ure 9), Faceboook Messenger will send out a message without user
consent.
Activity
SecureIntentHandlerActivity " android : permission =" com
. facebook . permission . prod . FB_APP_COMMUNICATION ">
Scheme used to send ‘‘content’’ to ‘‘userid’’
s =1& m=content
Figure 9: An activity from Facebook Messenger and an ex-
ploiting scheme
Activity UrlInterpreterActivity in Twitter registers an In-
tent filter to handle URL as illustrated in Figure 10. Upon receiving a
related URL, the Activity can launch another Activity and navigate
the latter’s WebView to a Phishing page. To trigger the WebView
without showing a system dialog, our attack sends an explicit Intent
scheme to Twitter.
Activity
UrlInterpreterActivity ">
Handled URL
Figure 10: An activity from Twitter and the scheme to trigger
it
Table 1 lists several vulnerable apps detected by our tool ViewFinder.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA842Package
com.google.android.apps.docs
com.evernote
vStudio.Android.Camera360
com.tripadvisor.tripadvisor
com.roidapp.photogrid
com.pinterest
com.picsart.studio
com.kakao.talk
com.imo.android.imoim
com.hola.launcher
com.gau.go.launcherex
com.cyworld.camera
com.commsource.beautyplus
com.alibaba.aliexpresshd
cn.wps.moffice_eng
com.zeroteam.zerolauncher
com.rhmsoft.fm
com.nhn.android.search
com.mobisystems.office
com.melodis.midomiMusicIdentifier.freemium
com.ksmobile.launcher
com.intsig.camscanner
com.indeed.android.jobsearch
com.halo.wifikey.wifilocating
com.gau.go.launcherex.gowidget.weatherwidget
com.cootek.smartinputv5
com.cardinalblue.piccollage.google
com.audible.application
com.amazon.mShop.android.shopping
co.vine.android
com.yelp.android