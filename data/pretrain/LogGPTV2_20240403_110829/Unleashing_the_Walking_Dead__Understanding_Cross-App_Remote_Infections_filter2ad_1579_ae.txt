To evaluate the compatibility of NaviGuard with existing applications, we installed 50 popular apps on a Nexus 5. After subjecting these apps to 100,000 random events using Monkey, no runtime errors caused by NaviGuard were reported in the system log. This indicates that the security measures implemented do not interfere with the normal operation of these applications.

### Lessons Learned
The root cause of Cross-WebView Attack (XAWI) lies in the capability for WebViews to communicate and navigate between each other, especially when one WebView is directed to a specific domain from the web. This functionality is essential for integrated services, which aim to link web content directly to the most suitable platform or app for its presentation. Modern content providers increasingly use deep linking techniques to direct browsers or WebViews to specific app components, such as video, image, or link handlers, on their web pages. Despite the security risks, this cross-WebView content distribution cannot be easily restricted due to its importance.

Both Android and iOS platforms heavily utilize this capability. Until recently, URL schemes on iOS were even less protected, with research showing that malicious local apps could hijack URL schemes and steal sensitive user information, such as secret tokens, from other apps. Consequently, starting with iOS 9, any scheme invocation across apps requires user approval, although this introduces inconvenience. More recently, Apple introduced a new deep linking mechanism called universal links, which binds an app to a link using certificate-based verification. This allows direct triggering of another app's component (e.g., WebView) and passing parameters (e.g., URLs) without user consent. While this mechanism enhances convenience, it also poses potential security risks, particularly in cross-WebView infections, necessitating further studies to fully understand its implications.

A key takeaway from our study is that a smooth cross-WebView channel can also serve as a pathway for infection transmission. It is crucial to implement safeguards during the design and implementation of such communication mechanisms. For example, apps receiving navigation requests should check the security risk of the domain they are about to access, especially if the WebView is not confined to a whitelist of trusted domains. Techniques like Google Safe Browsing, which protect web surfing, could be adapted for more efficient and IPC-level protection. Additionally, isolation and quarantine measures should be applied to protect WebViews with critical capabilities, preventing untrusted domains within the WebView from communicating with other activities except those provided by the initiating app. Providing guidance and SDKs to developers for implementing security checks at appropriate program locations, along with developing testing techniques to detect lapses in domain control, is also essential. Content providers should incentivize developers to enhance app security, for instance, by only linking web content to apps with good security quality. On the OS front, inspecting URLs passed between apps to identify known malicious domains or anomalies could further mitigate risks.

### Related Work
**Attacks on WebView:**
WebViews are vulnerable to various attacks. Previous studies have shown that untrusted web content can exploit JavaScript (JS) interfaces to access a smartphone's local resources, such as GPS locations and file systems. Malicious apps can also inject JS code into web content to sniff and hijack user events. These vulnerabilities are widespread and often not promptly addressed. However, none of these prior studies explored the possibility of cross-WebView, multi-app attacks or the security implications of unprivileged WebViews (those without JS interfaces and callback capabilities), which our research investigates for the first time.

**Security Risks in URL Schemes:**
URL-scheme IPC is known to be vulnerable to hijacking attacks, particularly on iOS and macOS, where malicious apps can claim the schemes used by popular apps to steal Intents or impersonate them. Scheme-based web-to-app attacks are also possible on iOS, with remote cross-site request forgery reported in previous studies. On Android, Opera and Chrome have been found to expose their private functionalities to WebViews. Most relevant to our research is the finding that Samsung’s UniversalMDMClient can be launched through a URL, prompting the user to install an update. Our studies reveal the serious security risks involved in cross-WebView navigation, enabling remote adversaries to launch multi-app colluding attacks, persistent app control, and remote app infections. This highlights a fundamental design weakness in URL scheme management on Android and exposes new attack surfaces to remote adversaries.

**Mobile Phishing:**
GUI-related phishing has been extensively studied, and mobile phishing has gained significant attention. Prior research has investigated the vulnerable links between mobile apps and websites, task hijacking, side-channel-based identification of attack opportunities, and other phishing activities like SMiShing and Vishing. However, none of these studies have examined the risk of fully remote, multi-app phishing attacks, which our study finds to be feasible. This powerful Remote Device Phishing (RDP) attack outclasses existing defenses and is recognized as a realistic threat by the industry.

### Conclusion
In this paper, we report a fundamental design challenge in cross-WebView navigation, a necessary feature for integrating services from different apps. Our study reveals a new XAWI weakness, through which a remote adversary can gain persistent, stealthy control over multiple apps once their web content is triggered by Chrome. We demonstrate that a series of multi-app, colluding attacks can be launched to perform highly realistic remote phishing attacks and escalate the adversary’s privileges. At least 7.4% of popular apps, including Facebook, Google Drive, Twitter, and TripAdvisor, are found to be vulnerable. To protect Android users, we developed a new technique to automatically control cross-WebView communication. Our study highlights the tension between the demand for convenient web-to-app linking and the need for secure communication channels. We show that current protections are often inadequate and can be easily bypassed. Further efforts are required to better understand the problem and find solutions that close attack avenues without compromising the utility of these channels.

### Acknowledgments
PKU authors (contact: Xinhui Han) were supported in part by NSFC 61402125 and the National Key Research and Development Program of China (Grant No. 2016YFB0801302). IU authors (contact: XiaoFeng Wang) were supported in part by NSF CNS-1223477, 1223495, 1527141, 1618493, ARO W911NF1610127, and Samsung Gift Fund. IIE authors (contact: Kai Chen) were supported in part by NSFC U1536106 and 61728209, the National Key Research and Development Program of China (Grant No. 2016QY04W0805), the Youth Innovation Promotion Association CAS, and the Strategic Priority Research Program of CAS (XDA06010701).

### Additional Attack Cases
**Device State Detection and Tampering:**
Our research also uncovered that from Baidu Mobile Assistant, a popular Chinese app store with over 100 million users, a remote XAWI adversary can monitor the user's interactions with their device, identify other apps, and even perform unauthorized app installations. The Baidu app provides related functionalities to its WebView through JavaScript interfaces, including reading the device's gyroscope, microphone loudness, package existence, and app installation from the SD card. However, direct navigation from Baidu’s appstore page to a malicious website is unlikely, as its WebView does not provide a URL bar or other browsing assistance. Additionally, there are protections in place that disable some JavaScript interface functionalities when the WebView leaves a Baidu-controlled domain.

In our research, we used Chrome as the entry point for the attack. The attack content inside Chrome’s WebView generates an Intent scheme (with the package name of the Baidu app) to trigger the Baidu activity `UrlHandlerActivity`, which has registered an Intent filter for the scheme `http://*/.*/api/calendar`. The activity responds to the attack URL `http://attack.com/new/api/calendar`, silently navigating the WebView to `attack.com`. Although some JavaScript interface functionalities are disabled under this domain, important capabilities remain exposed. Specifically, the `downloadApp` and `getAppInfo` JS interfaces are accessible to the untrusted domain, allowing the adversary to query installed apps or download app packages.

We also discovered a method to bypass Baidu’s domain protection. A flaw in Baidu’s JavaScript interfaces is that some allow callbacks, such as `downloadApp(String url, String callback)`. This creates a race condition enabling a Time of Check and Time of Use (TOCTOU) attack. The attack web content can invoke such an interface, supplying JavaScript code as the callback. Simultaneously, it initiates a navigation to a Baidu domain. Once the navigation is complete, the adversary can regain control when the JS code in the callback is injected back into the current, now authorized, domain with full JavaScript interface capabilities. We successfully executed this attack in our study (see our demo [1]).

Once the JavaScript interfaces are open, the malicious script can access user information, change the user’s calendar, add reminders, collect gyroscope readings, and real-time voice loudness, get login state and account information, and even automatically install an app through `installApp` (if the auto-install setting is enabled). These attacks can occur stealthily, with the infected WebView running in the background. We reported this vulnerability to Baidu and assisted in its resolution.

### Figures and Tables
**SecureIntentHandlerActivity:**
`SecureIntentHandlerActivity` is an Activity provided by Facebook Messenger, protected by the signature permission `FB_APP_COMMUNICATION`, which is only given to Facebook’s products. The Activity registers an Intent Filter to receive Intents with the scheme `fb-messenger-secure://`. Upon receiving such an Intent, Facebook Messenger sends a message without user consent.

**UrlInterpreterActivity:**
`UrlInterpreterActivity` in Twitter registers an Intent filter to handle URLs. Upon receiving a related URL, the Activity can launch another Activity and navigate its WebView to a phishing page. To trigger the WebView without showing a system dialog, our attack sends an explicit Intent scheme to Twitter.

**Table 1: Vulnerable Apps Detected by ViewFinder**

| Package Name                          |
|---------------------------------------|
| com.google.android.apps.docs          |
| com.evernote                          |
| vStudio.Android.Camera360             |
| com.tripadvisor.tripadvisor           |
| com.roidapp.photogrid                 |
| com.pinterest                         |
| com.picsart.studio                    |
| com.kakao.talk                        |
| com.imo.android.imoim                 |
| com.hola.launcher                      |
| com.gau.go.launcherex                 |
| com.cyworld.camera                    |
| com.commsource.beautyplus             |
| com.alibaba.aliexpresshd              |
| cn.wps.moffice_eng                     |
| com.zeroteam.zerolauncher             |
| com.rhmsoft.fm                        |
| com.nhn.android.search                |
| com.mobisystems.office                |
| com.melodis.midomiMusicIdentifier.freemium |
| com.ksmobile.launcher                  |
| com.intsig.camscanner                 |
| com.indeed.android.jobsearch          |
| com.halo.wifikey.wifilocating         |
| com.gau.go.launcherex.gowidget.weatherwidget |
| com.cootek.smartinputv5               |
| com.cardinalblue.piccollage.google    |
| com.audible.application               |
| com.amazon.mShop.android.shopping     |
| co.vine.android                       |
| com.yelp.android                      |