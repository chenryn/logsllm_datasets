}
return result;
}
 各変数を参照するたびにNULLチェックが必要
 个々の四则演算の度にオーバフローチェックが必要
 プリミティブな演算を関数呼び出しで実现せざるを得ない
15 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
データ形式に起因する非效率さ (1/2)
▌行形式(Row-oriented)データ ▌列形式(Column-oriented)データ
× 参照されない値も含む 〇 参照される列のみをロードできる
× データアクセスに复数回のメモリ参照 〇 O(1)でデータを参照できる
〇 PostgreSQLにおける标准のデータ构造 × データ形式の変换が必要
GPU
GPU
a b c d e f
b e
core
core
GPU
b e
core
GPU
a b c d e f GPU
core b e
core
GPU
b e
GPU core
a b d e f
core GPU
b e
core
GPU
b e
GPU
core
a b c d e f
core
 通常のSQLワークロード程度の负荷では、さすがにデータ形式変换のコストを
正当化できないが、高度なアルゴリズム処理となると话は変わってくる。
16 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
データ形式に起因する非效率さ (2/2)
▌ランダムメモリアクセス (random memory access)
 メモリトランザクション回数が増える一方、メモリバスの使用率は决して高くない。
32bit x 1 = 32bit: 256bit幅の
GPU cores
メモリトランザクションのうち、
32bitだけが有效なデータ
(バス使用率: 12.5%)
32bit 32bit 32bit 32bit 32bit 32bit
メモリトランザクション幅: 256bit
▌コアレスメモリアクセス (coalesced memory access)
 最小限のメモリトランザクションで、メモリバスの使用率を最大化する事ができる。
GPU cores
32bit x 8 = 256bit: 256bit幅の
メモリトランザクションのうち、
256bit全てが有效なデータ
(バス使用率: 100%)
32bit 32bit 32bit 32bit 32bit 32bit 32bit 32bit
メモリトランザクション幅: 256bit
17 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
行列表现としての二次元配列
Array-Matrix
𝑎 ⋯ 𝑑
1 1 非NULL固定长の二次元配列を “行列” と见なす
⋮ ⋱ ⋮ 4列N行行列
𝑎 ⋯ 𝑑
𝑁 𝑁
ArrayType header a a a b b b c c c d d d
1 2 … N 1 2 … N 1 2 … N 1 2 … N
▌datatype[] array_matrix(variadic datatype[])
 入力データを蓄积し二次元配列として出力する集约関数
 datatypeはint2, int4, int8, float4 および float8 のどれか。
 この二次元配列はNULLを含んでいてはならない。
▌SETOF record matrix_unnest(datatype[])
 m列n行の二次元配列を、m列から成るn个のレコードへと展开する関数。
▌课题
 可変长データを扱う事ができない。
 PostgreSQLの可変长データの制约により、最大でも1GBになってしまう。
18 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
PL/CUDA関数の呼び出し例
SELECT row_number() OVER (), SQLによる后処理
float4_as_int4(R.key_id) key_id, (JOIN, Window関数)
R.score
FROM matrix_unnest(
2つのMatrix-like Arrayを
(SELECT my_plcuda_function(A.matrix, 引数に持つ
B.matrix) PL/CUDA関数の呼出し
FROM (SELECT cbind(array_matrix(id),
array_matrix(x, y, z)) matrix
FROM normal_table
Matrix-like Arrayを
WHERE tag LIKE ‘%abc%’) A,
N个のレコードに再展开
(SELECT matrix
FROM matrix_table) B
)
) AS R(key_id real, score real)
Matrix-like Arrayの生成、
ORDER BY score DESC または构筑済みのものをロード
LIMIT 1000;
19 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
Case Study
创薬における类似度サーチ
20 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
背景 – 病気と候补化合物の関系
ターゲットたんぱく质に “active” である化合物の探索
ターゲットの病気
関连するたんぱく质
active
inactive active
(毒性あり)
化合物 (= 医薬品の候补)
学术论文
21 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
k-NN法による类似化合物サーチ (1/2)
ターゲットたんぱく质
学术论文等から
“似た特性の化合物”は
ターゲットたんぱく质に
“active”である可能性も高いはず。
“active” である化合物
をピックアップ
类似度による
サーチ
クエリ化合物群 データベース化合物群
(Q; ~1000件程度) (D; ~1000万件程度)
22 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
k-NN法による类似化合物サーチ (2/2)
类似度 = 距离の定义
化合物のデータ构造
ID NAME Fingerprint (1024bit)
1 CHEMBL153534 000000000001000000100000000000000100000000000001000000...
2 CHEMBL405398 000000000000000100100000000000000000000000000000100000...
3 CHEMBL503634 000001000000000000000000001000000100000000000000000000...
: : :
Tanimoto Indexによる类似度の定义：
𝑆𝑖𝑚𝑖𝑙𝑎𝑟𝑖𝑡𝑦 𝐴, 𝐵 = 𝐴 ∩ 𝐵 𝐴 ∪ 𝐵
𝐹𝑃 𝐹𝑃 𝐹𝑃 𝐹𝑃
23 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
必要な计算量
Q: クエリ化合物群
d 𝑄,𝑑 : Q~d间の距离 计算量の目安:
𝑖 i
(~1000件程度)
𝑂 𝑄 × 𝐷 + 𝑂 𝐷 × 𝑄𝑙𝑜𝑔𝑄
(距离计算) (ソート+平均値)
上位3件の平均
𝑑 ∈ 𝐷
𝑖
上位3件の平均
d 𝑄,𝑑 : Q~d 间の距离
𝑗 j データベース化合物群
𝑑 ∈ 𝐷
𝑗
(D; 10M件程度)
24 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
PL/CUDA関数の実装 (1/3)
Step-1
Step-2
全てのQ×Dの论理的な组み合わせを、
各GPUコアがQ化合物群とd化合物间の
复数のパーティションに分割。これらを
类似度スコアを算出。
GPUの実行ユニットであるSMMに割り当て。
L1キャッシュと同等のレイテンシでアクセス
可能な “共有メモリ” にこれを格纳
25 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
PL/CUDA関数の実装 (2/3)
Step-3
类似度スコアによる Bitonic-Sorting を実行。
ある d 化合物に対する q 化合物が、类似度
Step-5
の顺に并ぶことになる。
类似度上位k件による平均値を
算出し、结果バッファに格纳。
Step-4
Q化合物群のサイズが共有メモリよりも巨大な场合、
Step-2以降を缲り返し。
26 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
PL/CUDA関数の実装 (3/3)
real[] -- ID+Similarity of D化合物 (2xN)
knn_gpu_similarity(int k, -- k-value
int[] Q, -- ID+Fingerprint of Q化合物 (33xM)
int[] D); -- ID+Fingerprint of D化合物 (33xN)
CREATE OR REPLACE FUNCTION j = i % part_sz; /* index within partition */
knn_gpu_similarity(int, -- k-value dindex = part_nums * get_global_index()
int[], -- ID+bitmap of Q + (i / part_sz);
int[]) -- ID+bitmap of D qindex = loop * (part_sz - k) + (j - k);
RETURNS float4[] -- result: ID+similarity if (dindex < ARRAY_MATRIX_HEIGHT(D) &&
AS $$ qindex < ARRAY_MATRIX_HEIGHT(Q)) {
#plcuda_decl values[i] = knn_similarity_compute(D, dindex,
: Q, qindex);
#plcuda_begin }
#plcuda_kernel_blocksz ¥ }
knn_gpu_similarity_main_block_size __syncthreads();
#plcuda_num_threads ¥
knn_gpu_similarity_main_num_threads /* 2. sorting by the similarity for each partition */
#plcuda_shmem_blocksz 8192 knn_similarity_sorting(values, part_sz, part_nums);
cl_int k = arg1.value; __syncthreads();
MatrixType *Q = (MatrixType *) arg2.value; :
MatrixType *D = (MatrixType *) arg3.value; }
MatrixType *R = (MatrixType *) results; #plcuda_end
: #plcuda_sanity_check knn_gpu_similarity_sanity_check
for (loop=0; loop < nloops; loop++) #plcuda_working_bufsz 0
{ #plcuda_results_bufsz knn_gpu_similarity_results_bufsz
/* 1. calculation of the similarity */ $$ LANGUAGE 'plcuda';
for (i = get_local_id();
i < part_sz * part_nums;
i += get_local_size()) {
27 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
PL/CUDA関数の呼出し
PREPARE knn_sim_rand_10m_gpu_v2(int) -- arg1:@k-value
AS
SQLによる后処理
SELECT row_number() OVER (),
• 他のテーブルとJOINして化合物ID化合物名を変换
fp.name, • window関数による类似度顺位の计算
similarity
Q行列/D行列を引数にとる
FROM (SELECT float4_as_int4(key_id) key_id, similarity PL/CUDA関数の呼出し。
FROM matrix_unnest(
(SELECT rbind( knn_gpu_similarity($1,Q.matrix,
D.matrix))
FROM (SELECT cbind(array_matrix(id),
array_matrix(bitmap)) matrix
FROM finger_print_query) Q,
PL/CUDA関数の返り値である
3xNのArray-Matrixを展开し、
(SELECT matrix
通常の3列N行のレコードへ変换
FROM finger_print_10m_matrix) D
)
) AS sim(key_id real, similarity real)
ORDER BY similarity DESC) sim, テーブルから読み出したレコードを
finger_print_10m fp Array-Matrixに変换
WHERE fp.id = sim.key_id （または、事前にビルド）
LIMIT 1000;
28 PGconf.ASIA - PL/CUDA / Fusion of HPC Grade Power with In-Database Analytics The PG-Strom Project
パフォーマンス
k-NN法による类似化合物サーチ応答时间 (k=3, D=10M)
3500
3034.94
3000
]
c
e
s
[ 2500
)
er
me
t
it
Te 2000
b
e x150 times
ss
ni 1503.31
r
oe 1500 faster!
pw
so
e
L
R
* 1000
y(
r
e
u
Q 500
295.95
145.29