·Chunk Type：Chunk的类型，固定四个字节：0x00100102。
·Chunk Size：Chunk的大小，固定四个字节。
·Line Number：对应于AndroidManifest中的行号，四个字节。
·Unknown：未知领域，四个字节。
·Namespace Uri：这个标签用到的命名空间的URI，比如用到了android这个前缀，那么就需要用http://schemas.android.com/apk/res/android这个URI去获取，四个字节。
·Name：标签名称（在字符串中的索引值），四个字节。
·Flags：标签的类型，四个字节，比如是开始标签还是结束标签等。
·Attribute Count：标签包含的属性个数，四个字节。
·Class Atrribute：标签包含的类属性，四个字节。
·Atrributes：属性内容，每个属性算是一个Entry，Entry是大小为5的字节数组[Namespace，URI，Name，ValueString，Data]，在解析的时候需要注意第四个值，要做一次处理：需要右移24位。所以这个字段的大小是：“属性个数×5×4个字节”。
解析属性代码如下：
可以看到，第四个值需要额外的处理一下，就是需要右移24位。解析完属性之后，可以得到一个标签的名称、属性名称、属性值：
看解析的结果：
标签manifest包含的属性如下：
这里有几个问题需要解释一下：
1）为什么看到的是三个属性，但是解析打印的结果是5个？
因为系统在编译apk的时候，会添加两个属性：platformBuildVersionCode和platform-BuildVersionName。
这是发布的设备版本号和版本名称：
这个是解析之后的结果。
2）当没有android这样的前缀时，NamespaceUri是null。
3）当dataType不同，对应的data值也不同，如下所示：
这个方法就是用来转义的，后面在解析resource.arsc的时候也会用到这个方法。
4）每个属性理论上都会含有一个NamespaceUri，这也决定了属性的前缀Prefix默认都是Android，但是有时候会自定义一个控件，这时候就需要导入NamespaceUri和Prefix了。所以一个XML中可能会有多个Namespace，每个属性都会包含NamespaceUri。
到这里就算解析完大部分的工作了，至于EndTagChunk，与StartTagChunk非常类似，这里就不再详解了，下面代码也加了解释：
在解析的时候，需要做一个循环操作：
因为Android中在解析XML的时候提供了很多种方式，但是这里没有用任何一种方式，而是用纯代码编写的，所以用一个循环来遍历解析Tag。其实这种方式类似于用SAX解析XML，这时候本节开头提到的Flag字段就大有用途了。这里还做了一个工作就是将解析之后的XML格式化一下，如下所示：
难度不大，这里也就不继续解释了。有一个地方需要优化，就是可以利用LineNumber属性来精确到格式化后文件的行数，不过这个工作量有点大，这里就不做了。有兴趣的同学可以考虑一下，格式化完之后的结果如下：
这里就把之前的16进制的内容解析出来了。
还有一个问题，就是看到还有很多@7F070001这类的东西，这其实是资源Id，这需要解析完resource.arsc文件之后，才能对应上这个资源，参见下一章。
当发现可以解析AndroidManifest文件了，那么同样也可以解析其他的XML文件：
这时解析其他XML时报错了，定位代码发现是在解析String Chunk的地方报错了，修改如下：
因为其他的XML中的字符串格式和AndroidManifest.xml中的不一样，所以这里需要单独解析一下：
修改之后就可以了。
在反编译的时候，有时候只想反编译AndroidManifest内容，所以ApkTool工具就有点繁琐了，不过网上有个已经写好了的工具AXMLPrinter.jar，这个工具很好用：
将xxx.xml解析之后输出到demo.xml中即可。
提示：AXMLPrinter.jar工具下载地址：
http://download.csdn.net/detail/jiangwei0910410003/9415323
源代码下载地址：
http://download.csdn.net/detail/jiangwei0910410003/9415342
AXMLPrinter.jar工具项目见图5-7。
从项目结构可以发现，它用的是Android中自带的Pull解析XML的，主函数是：
图5-7 AXMLPrinter项目
到这里还需要告诉大家一件事，对上面的解析工作有一个更简单的方法，那就是aapt命令。关于这个aapt是干什么的，网上有很多资料，其实就是将Android中的资源文件打包成resource.arsc即可，参见图5-8。
图5-8 aapt工具
类型为res/animator、res/anim、res/color、res/drawable（非Bitmap文件，即非.png、.9.png、.jpg、.gif文件）、res/layout、res/menu、res/values和res/xml的资源文件均会从文本格式的XML文件编译成二进制格式的XML文件。
要从文本格式编译成二进制格式的原因如下：
·二进制格式的XML文件占用空间更小。这是由于所有XML元素的标签、属性名称、属性值和内容所涉及的字符串都会被统一收集到一个字符串资源池中去，并且会去重。有了这个字符串资源池，原来使用字符串的地方就会被替换成一个索引到字符串资源池的整数值，从而可以减少文件的大小。
·二进制格式的XML文件解析速度更快。这是由于二进制格式的XML元素里面不再包含有字符串值，因此就避免了进行字符串解析，从而提高速度。
将XML资源文件从文本格式编译成二进制格式，解决了空间占用以及解析效率的问题，但是对于Android资源管理框架来说，这只是完成了其中的一部分工作。Android资源管理框架的另外一个重要任务就是要根据资源ID来快速找到对应的资源。
那么下面用aapt命令查看一下。aapt命令在AndroidSdk目录中，如图5-9所示。
图5-9 aapt命令的目录
看到路径了：Android SDK目录/build-tools/下，这个目录下全是Android中构建apk的所有工具，再看一下这些工具的用途，参见图5-10。
说明如下：
·aapt.exe生成R.java类文件。
·aidl.exe把.aidl转成.java文件（如果没有aidl，则跳过这一步）。
·javac.exe编译.java类文件生成class文件。
图5-10 构建apk的工具
·dx.bat命令行脚本生成classes.dex文件。
·aapt.exe生成资源包文件（包括res、assets、androidmanifest.xml等）。
·apkbuilder.bat生成未签名的apk安装文件。
·arsigner.exe对未签名的包进行apk签名。
原来可以不借助任何IDE工具也是可以打出一个apk包的。
继续看aapt命令的用法：
将输入的结果定向到demo.txt中，如图5-11所示。
图5-11 aapt命令输出结果
看到解析出来的内容就是上面解析的AndroidManifest.xml内容，所以这也是一个解析方法。当然aapt命令是系统提供给一个很好的工具，可以在反编译的过程中借助这个工具。这里记得有一个aapt命令就好了，它的用途还有很多，可以单独编译成一个resource.arsc文件来，后面会用到这个命令。
提示：项目下载地址：https://github.com/fourbrother/parse_androidxml
5.3 本章小结
本章主要介绍Android编译之后的AndroidManifest.xml文件格式。可以使用网上的一个小工具AXMLPrinter。但这里我也写了一个工具解析。那么本章内容仅仅是为了解析AndroidManifest吗？肯定不是，写本章内容是为后面介绍反编译apk做准备，其实现在有很多人都发现了，在使用apktool来反编译apk的时候经常报出一些异常信息，其实那就是加固的人用来对抗apktool工具的，导致反编译失败。所以有必要了解apktool的源码和解析原理，这样才能遇到反编译失败时，能定位到问题，修复apktool工具即可。
apktool的工具解析原理其实就是解析AndroidManifest.xml、resource.arsc、classes.dex这三个文件。还有其他的布局、资源xml等，那么针对这几个问题，本章专门解析XML文件的格式，后面章节还会继续解析resource.arsc和classes.dex文件的格式。
第6章 resource.arsc文件格式解析
前一章介绍了如何解析AndroidManifest文件格式，本章介绍resource.arsc文件格式解析。resource.arsc格式解析很重要，现在很多应用为了缩减应用包的大小开始对资源进行混淆，就用到这个文件格式；应用安全防护中可以通过对资源混淆来做到安全应用，也用到这个文件格式。本章将从资源文件id格式开始，详细解析资源文件的数据结构头、字符串、正文等。
6.1 Android中资源文件id格式
在使用apktool工具进行反编译的时候，会发现有一个文件res/values/public.xml，如图6-1所示。
图6-1 public.xml文件
查看一下public.xml文件内容，如图6-2所示。
可以看到，这个文件保存了apk中所有id类型和对应的id值。这里面的每个条目内容都包括如下内容：
·type：类型名
·name：资源名
·id：资源的id
类型包括如下几种：drawable、menu、layout、string、attr、color、style等，所以会在反编译之后的文件夹中看到这几个类型的文件。
上面介绍了如何使用apktool查看资源文件的内容，下面介绍如何来解析resource.arsc文件。
解压一个apk得到对应的resource.arsc文件。按照惯例，每个文件的格式描述都是有对应的数据结构。resource也不例外：frameworks\base\include\androidfw\ResourceTypes.h，这就是resource中定义的所有数据结构。下面用一张图详细表示出resources.arsc文件格式，如图6-3所示。
图6-2 public.xml文件
图6-3 resources.arsc文件格式（见书后彩图）
6.2 数据结构定义
资源文件的项目如图6-4所示。
图6-4 资源文件的数据结构
可见到这里定义了很多的数据结构，下面分别介绍。
6.2.1 头部信息
Resources.arsc文件格式是由一系列的chunk构成，每一个chunk均包含如下结构的ResChunk_header，用来描述这个chunk的基本信息：
参数说明：
·type：当前chunk的类型。
·headerSize：当前chunk的头部大小。
·size：当前chunk的大小。
6.2.2 资源索引表的头部信息
Resources.arsc文件的第一个结构是资源索引表头部，其结构描述了Resources.arsc文件的大小和资源包数量：
参数说明：
·header：就是标准的Chunk头部信息格式。
·packageCount：被编译的资源包的个数。
6.2.3 资源项的值字符串资源池
紧跟着资源索引表头部的是资源项的值字符串资源池，这个字符串资源池包含了所有在资源包里面定义的资源项的值字符串，字符串资源池头部的结构如下：
参数说明：
·header：标准的Chunk头部信息结构。
·stringCount：字符串的个数。