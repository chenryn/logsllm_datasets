### 优化后的文本

#### .reloc
```c
filePtr = fopen("dummy.txt", "wb");
```

#### Process
- **文件操作**:
  - `Process (dummy.txt)`
  - `WriteFile(filePtr, mimikatz, ... )`
  - `WriteFile(filePtr, "AAAAAA...")`

#### API调用
- `ntdll!ZwCreateThreadEx`
- `ntdll!RtlCreateProcessParametersEx`

#### 文件内容
- `dummy.txt`:
  - `"AAAAAAAAAAAAA"`

#### PEB
- 日期: April 21, 2021
- 编号: 32
- 攻击者: Attacker
- `ntdll!ZwCreateProcessEx(section)`

#### PE Header
- `.text`
- `.data`
- `.idata`
- `.reloc`

#### 重复代码
```c
filePtr = fopen("dummy.txt", "wb");
Process(dummy.txt)
WriteFile(filePtr, mimikatz, ...)
WriteFile(filePtr, "AAAAAA...")
ntdll!ZwCreateThreadEx
ntdll!RtlCreateProcessParametersEx
```

#### 文件内容
- `dummy.txt`:
  - `"AAAAAAAAAAAAA"`

#### 攻击技巧
- **通过此技巧**:
  - AV/EDR 总是扫描错误的文件（而不是实际运行的进程）
  - `miniHerpaderping$`
  - 项目地址: [https://github.com/aaaddress1/PR0CESS](https://github.com/aaaddress1/PR0CESS)
  - 日期: April 21, 2021
  - 编号: 33, 34

- **伪装为 mspaint.exe**
  - 日期: April 21, 2021

#### 进程克隆
- **问题首次提出**:
  - 在 BlackHat Europe 2017 上，Tal Liberman 提出 "Lost in Transaction: Process Doppelgänging"
- **后续变种**:
  - Osiris 银行木马
  - Herpaderping (jxy__s)
  - Process Ghosting (GabrielLandau)
- **防御措施**:
  - 2021 年，Defender 通过 Minifilter 拦截了此类攻击
  - 找到一种方法来控制文件数据而不实际写入？

#### 文件操作
```c
WriteFile(filePtr, mimikatz, ...)
```

- `dummy.txt`:
  - `"AAAAAAAAAAAAA"`

#### 无文件攻击
- **是否真的需要文件来运行进程？**
  - 日期: April 21, 2021
  - 编号: 37

- **攻击者**:
  ```c
  filePtr = fopen("dummy.txt", "wb");
  FileDispositionInfo.DeleteFile = TRUE;
  ```
  - 备注: 实际中，`fopen()` 应该替换为 `CreateFile()`
  - 日期: April 21, 2021
  - 编号: 38

- **结果**:
  - 我们确实将恶意负载写入 NTFS 文件，但 Defender 无法访问或扫描，直到我们关闭文件。
  - 日期: April 21, 2021
  - 编号: 39

- **攻击者**:
  ```c
  ntdll!ZwCreateProcessEx(section)
  filePtr = fopen("dummy.txt", "wb");
  Process(dummy.txt)
  WriteFile(filePtr, mimikatz, ...)
  ntdll!ZwClose(filePtr)
  FileDispositionInfo.DeleteFile = TRUE;
  ```

- **文件消失**:
  - 临时文件在关闭后消失
  - 日期: April 21, 2021
  - 编号: 40, 41

- **通过此技巧**:
  - AV/EDR 总是扫描不存在的文件
  - `miniGhosting$`
  - 项目地址: [https://github.com/aaaddress1/PR0CESS](https://github.com/aaaddress1/PR0CESS)
  - 日期: April 21, 2021
  - 编号: 43

- **名称？不，它是无文件的:)**
  - 日期: April 21, 2021

#### 进程幽灵
- **滥用临时文件**:
  - 运行幽灵进程
  - Gabriel Landau 的文章: "What you need to know about Process Ghosting, a new executable image tampering attack"
  - 完全绕过 Defender 和其他基于 Minifilter 的防御
  - 新想法: 不使用自定义启动器，像幽灵一样运行自己？

#### 任意删除
- **可以删除所有文件，甚至是正在运行的进程**
  - 日期: April 21, 2021

#### NTFS 流
- **标记为 Web**
  - 日期: April 21, 2021
  - 编号: 46

- **恶意软件**
  - 日期: April 21, 2021
  - 编号: 47, 48

- **将恶意软件写入无辜文件的任意流，并作为单个进程运行**
  - 即使进程仍在运行，也可以删除它
  - 日期: April 21, 2021

#### 强制删除
- **Windows 不允许删除正在运行的进程文件**
- **Jonas Lyk 发现的巧妙技巧**:
  1. 使用 DELETE 标志打开文件
  2. 将 EXE 数据从主流迁移到另一个流
  3. 现在可以删除它
  - 日期: April 21, 2021
  - 编号: 49, 50

- **攻击者**:
  - **恶意软件投放与运行**:
    - `Malware.exe::$DATA && 1337 bytes`
  - 日期: April 21, 2021
  - 编号: 51

- **攻击者**:
  ```c
  filePtr = CreateFile("malware.exe", DELETE);
  FILE_RENAME_INFORMATION.FileName = ":dummy";
  ntdll!ZwClose(filePtr);
  kernel32!DeleteFile("malware.exe");
  ```

  - `Malware.exe::$DATA && 0 bytes`
  - `:dummy:$DATA && 1337 bytes`
  - 日期: April 21, 2021
  - 编号: 52, 53

- **填充签名 EXE 的有效载荷**:
  - 在 AV/EDR 定期扫描时，总是从主流获取 EXE 数据
  - 演示: [https://github.com/aaaddress1/Skrull](https://github.com/aaaddress1/Skrull)
  - 日期: April 21, 2021
  - 编号: 56

#### Skrull: 反复制恶意软件启动器
- **反复制恶意软件启动器**:
  - 通过进程幽灵方法运行恶意软件
  - DRM: 启动器不能在不同环境中复制
  - 易于攻击者持久运行恶意软件并规避 AV/EDR
  - 获取受害者环境的独特特征
  - 使用这些特征重新组装 EXE 文件
  - 当复制时，EXE 文件会自然损坏
  - 日期: April 21, 2021
  - 编号: 57, 58, 59, 60

- **Skrull: 恶意软件 DRM**:
  - 演示: [https://github.com/aaaddress1/Skrull](https://github.com/aaaddress1/Skrull)

#### 结论
- **进程幽灵**:
  - 攻击者可以滥用临时文件创建不会被 AV/EDR 实时扫描的进程
- **文件取消链接**:
  - 通过迁移 NTFS 流之间的数据删除正在运行的程序
- **DRM**:
  - 恶意软件在提交给 AV/EDR 之前重建自身，以抵抗研究人员的后续分析
- **恶意软件定时和实时扫描**:
  - 不应假设所有运行中的进程都必须有 NTFS 上的 EXE 文件
  - 不仅要扫描 NTFS 上的文件，还要扫描运行中的进程，以防止无文件和 DRM 攻击

© 2021