User: 请提供一个Python脚本，定时检查服务器目录下的文件是否存在修改并发送邮件告警。
Assistant: 以下是一个示例脚本：

```python
import os
import time
from datetime import datetime
import smtplib
from email.mime.text import MIMEText

# 邮件配置
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
SMTP_USERNAME = 'your_email@gmail.com'
SMTP_PASSWORD = 'your_email_password'
ALERT_EMAIL = 'alert_email@example.com'

# 监控配置
INTERVAL = 60  # 监控间隔，单位：秒
WATCH_DIR = '/path/to/watch/dir'  # 监控的目录
WATCH_PATTERN = '*.log'  # 监控的文件类型

# 记录文件状态的字典，key为文件名，value为最后修改时间戳
file_stats = {}


def send_alert_email(filename, last_mod_time):
    """发送告警邮件"""
    subject = f'File modification alert: {filename}'
    message = f'The file "{filename}" has been modified at {datetime.fromtimestamp(last_mod_time)}.'
    msg = MIMEText(message)
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = ALERT_EMAIL

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)


while True:
    # 遍历目标目录下的文件，检查是否有修改
    for filename in os.listdir(WATCH_DIR):
        if filename.endswith(WATCH_PATTERN):
            filepath = os.path.join(WATCH_DIR, filename)
            last_mod_time = os.path.getmtime(filepath)
            if filename in file_stats and file_stats[filename] != last_mod_time:
                send_alert_email(filename, last_mod_time)
            file_stats[filename] = last_mod_time

    time.sleep(INTERVAL)
```

这个脚本会每隔一定时间（由`INTERVAL`变量控制）遍历目标目录下的文件，检查文件是否有修改。如果某个文件的最后修改时间与上次检查时的时间不同，脚本就会发送告警邮件到预设的邮箱。脚本使用`os.path.getmtime`获取文件的最后修改时间。为了节省资源，脚本只会检查`WATCH_PATTERN`所指定的文件类型。