User: How to implement digital signature verification in HTTP requests? Please provide implementation and sample code.
Assistant: Digital signature is a digital certificate technology used to verify the integrity and authentication of messages. In HTTP requests, digital signatures can be used to verify the origin and integrity of requests, preventing requests from being tampered with or impersonated. The following is a simple digital signature verification scheme and sample code: 1. Obtain request parameters and sort them lexicographically. 2. Use the HMAC-SHA256 algorithm to encrypt the parameters and keys to obtain a signature. 3. Add the signature to the request header or parameters. 4. The receiver obtains the request parameters and signature, and generates the signature in the same way. 5. Compare the received signature with the self-generated signature, and if they are consistent, the verification is passed. Sample code: # Client code import hashlib import hmac import requests # Request parameter params = { 'name': 'Alice', 'age': '20', 'timestamp': '1538476400' # Current second-level timestamp} # Key secret = 'my-secret-key' # Sort and concatenate according to lexicographical order sorted_params = sorted(params.items(), key=lambda x: x[0]) # Use HMAC-SHA256 algorithm to generate signature message = ' &'.join([f"{p[0]}={p[1]}" for p in sorted_params]).encode() signature = hmac.new(secret.encode(), message, hashlib.sha256) .hexdigest() # Add signature to request header headers = { 'X-Signature': signature } # Send GET request response = requests.get('http://example.com/api', params=params, headers=headers ) # receiver code import hashlib import hmac # request parameter params = { 'name': 'Alice', 'age': '20', 'timestamp': '1538476400' } # key secret = 'my-secret-key ' # Sort and concatenate parameters according to lexicographical order sorted_params = sorted(params.items(), key=lambda x: x[0]) # Use HMAC-SHA256 algorithm to generate signature message = '&'.join([f"{p [0]}={p[1]}" for p in sorted_params]).encode() signature = hmac.new(secret.encode(), message, hashlib.sha256).hexdigest() # Compare the received Signature and self-generated signature if signature == request.headers.get('X-Signature'): print('Signature verification succeeded.') else: print('Signature verification failed.')