### Performance Comparison of Bemts and Breadth-First Search

Bemts (Best-Effort Minimization of Transform Search) significantly outperforms breadth-first search in terms of efficiency. Specifically, when \( d = 1 \), Bemts reduces the number of transformations needed by approximately 75% or more compared to breadth-first search. For \( d = 2 \), the reduction is around 45% or more. The only exception for \( d = 1 \) is when \( T = TLIP \). This is because TLIP is designed to include only those transforms that yield the highest probability \( P(\pi_r = t(\sigma_r)) \) and are selected in decreasing order of this value (see Appendix A).

For \( d = 3 \) and \( T = TLI \), the advantages of Bemts diminish, which we conjecture is due to insufficient training data for such a large transform search tree. However, for \( T = TLIP \), Bemts continues to offer improvements of over 50% through \( d = 4 \).

While it might be argued that breadth-first search could still be practical for the trees considered in Figure 5, the one-time computational cost of Bemts is offset by the significant cost savings it provides per account attacked. Bemts also allows for early short-circuiting of tree searches. For example, with \( T = TLI \) and \( d = 2 \), 80% of accounts that can be broken using Bemts will be broken within the first 620 elements, or after searching only about 0.2% of the tree. In contrast, breadth-first search would need to explore approximately 110,000 elements (about 40% of the tree) to break the same fraction of accounts. This cost savings is particularly important for online attacks where the number of password guesses is limited.

### Implications for Offline Attacks

In the context of offline attacks, where an adversary has access to files encrypted under an old password \( \sigma_k \) and aims to find the new password \( \pi_k \), the average runtimes to break \( \pi_k \) using the trees \( T \) considered in Figure 5 are shown in Figure 6. The runtimes for different types of nodes in \( T \) vary: skipped nodes cost only the time to discard them, failed nodes cost the time to attempt the last transform, and viable nodes cost the time to apply the last transform and hash the resulting password.

The key takeaway from Figure 6 is that even the most expensive cracking effort (with \( T = TLI \) and \( d = 3 \)) required an average of less than 3 seconds per password. Combined with the success rate \( P(\pi_r \in T(\sigma_r)) \) for this configuration (as shown in Figure 5), we conclude that, on average, roughly 41% of passwords can be broken from an old password in under 3 seconds.

### Implications for Online Attacks

For online attacks, where the attacker must submit guesses to a server, the relevant measure is the fraction of accounts that can be broken in the initial several viable guesses. Using \( TLIP \) with \( d = 1 \), an average of 17% of accounts can be broken in under five online password guesses. Figure 7 provides a more detailed view, showing the average fraction of passwords cracked for a given number of viable guesses. For instance, Figure 7(d) indicates that 13% of accounts can be broken in 5 online guesses, and 18% in 10 guesses.

### Password Strength versus Susceptibility to Transform-Based Search

It is often assumed that the new passwords most susceptible to transform-based search are those that are inherently weak. While this intuition holds true for the weakest passwords, the relationship between password strength and susceptibility is not monotonic. As shown in Figure 8, the first quintile (weakest passwords) has the highest fraction of accounts broken. Surprisingly, the second quintile shows the lowest susceptibility, with an increase in the third through fifth quintiles. This suggests that users who invest more mental effort in choosing a strong password may be less likely to create a completely new password after expiration, thus increasing their susceptibility to transform-based search.

### Accounts with a History of Transform Use

Finally, we focus on accounts that have a history of using transforms to generate new passwords. If past use of transforms strongly predicts future use, an adversary with knowledge of these patterns can exploit them. Additional tests are needed to validate this hypothesis and understand its implications for password security.