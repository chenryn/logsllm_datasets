### Corrupted Seller

For the proof of Theorem 1 in the case of a corrupted Seller, we employ the hybrid argument technique to demonstrate indistinguishability through a sequence of security games. The primary challenge in this corruption scenario is that the simulator must provide input to \( \text{FL}_{\text{icfe}} \) on behalf of the corrupted Seller without knowledge of the witness \( x \). The simulator only learns the encrypted witness \( z \) and the commitment to the key \( c \) in the first round. We leverage the observability feature of the programmable random oracle \( H \) at this stage.

We need to distinguish two cases based on how the environment creates the commitment \( c \):

1. **\( c \) is constructed correctly by querying \( H \)**: In this case, we use the observability feature of \( H \) to obtain the key \( k \). This allows the simulator to decrypt \( z \) and provide the witness \( x \) as input to \( \text{FL}_{\text{icfe}} \). The environment can only distinguish between the two executions if it finds a collision in \( H \). However, based on the binding property of the commitment scheme, this happens with negligible probability.
   
2. **\( c \) is constructed incorrectly**: In this case, \( H \) was not queried before, so the simulator cannot take advantage of the observability feature. However, the environment must provide correct opening values \( k \) and \( d \) in the third round, which it can only guess with a probability of \( \frac{1}{2^\mu} \). This is negligible for large \( \mu \).

Finally, the simulator must simulate the interactive dispute resolution procedure.

### Corrupted Buyer

The main challenge in simulating a corrupted Buyer is that the simulator needs to create an encrypted witness \( z^* \) in the first round and present an encryption key in the third round such that the decryption of \( z^* \) equals the correct witness \( x \), which is known to the simulator only after the third round. To achieve indistinguishability, we use the programming feature of \( H \). The encrypted witness \( z^* \) is chosen randomly by the simulator. Based on the IND-CPA security of the encryption scheme, the environment cannot distinguish between the encrypted witness \( z \) created by the honest Seller and \( z^* \).

After the correct witness \( x \) is revealed in the third round, the simulator programs \( H \) such that the decryption of \( z^* \) equals \( x \).

Even though the honest Seller provides a correct witness \( x \), a corrupted Buyer may initiate the dispute resolution procedure. Therefore, the simulator needs to simulate the interaction, keeping track of the challenge limit parameter to ensure that the corrupted Buyer does not pose more challenges than allowed. Moreover, the honest Seller is always able to create valid responses, and the simulator has enough information to simulate the same behavior.

### Two Corrupted Parties

In the case of two corrupted parties, the OptiSwap protocol does not provide any guarantees. Specifically, termination is not guaranteed, and coins may be locked forever. However, the simulation in this corruption scenario must be shown to allow composability.

The simulation combines the single corruption cases and is mostly straightforward. One difference is the possibility that money is blocked in the judge smart contract. To achieve the same behavior in the simulation, we use the blocking feature of the ledger functionality \( L \). This feature allows the simulator to block the unfreezing of coins on behalf of a corrupted party, resulting in the money being locked forever.

### Conclusion and Future Work

We presented OptiSwap, a smart contract-based two-party protocol for realizing a fair exchange of digital commodities against money. Compared to existing fair exchange protocols, we significantly improved the execution of the optimistic case, where both parties behave honestly. We integrated an interactive dispute handling mechanism in OptiSwap, which is only run in the pessimistic case. This allows us to have almost no overhead in communication complexity in the optimistic case.

Furthermore, OptiSwap includes a protection mechanism against grieving attacks, where the attacker tries to harm the honest party by forcing them to pay fees. The protection is based on transaction fees paid by both parties, ensuring the honest party is reimbursed at the end of the protocol execution. We provide a reference implementation of our judge smart contract for Ethereum and estimated gas costs for both the optimistic and pessimistic cases.

**Future Work**: The execution costs in the optimistic mode strongly depend on the deployment costs of the judge smart contract. By allowing repeated exchanges over one contract, the costs for a single execution might be significantly reduced. An interesting research question is the analysis of minimal bounds on communication and computation complexity, which could show how far our construction can be further improved.

### Acknowledgments

This work was partly funded by the iBlockchain project (grant nr. 16KIS0902) funded by the German Federal Ministry of Education and Research (BMBF), by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) - SFB 1119 - 236615297, and by the German Federal Ministry of Education and Research and the Hessen State Ministry for Higher Education, Research, and the Arts within their joint support of the National Research Center for Applied Cybersecurity ATHENE.

### References

1. Ethereum average gas price chart. https://etherscan.io/chart/gasprice. (Accessed on 09/19/2019).
2. Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz Mazurek. Secure multiparty computations on Bitcoin. In 2014 IEEE Symposium on Security and Privacy, pages 443-458. IEEE Computer Society Press, May 2014.
3. N. Asokan, Victor Shoup, and Michael Waidner. Optimistic fair exchange of digital signatures (extended abstract). In Kaisa Nyberg, editor, EUROCRYPT'98, volume 1403 of LNCS, pages 591-606. Springer, Heidelberg, May / June 1998.
4. Christian Badertscher, Ueli Maurer, Daniel Tschudi, and Vassilis Zikas. Bitcoin as a transaction ledger: A composable treatment. LNCS, pages 324-356. Springer, Heidelberg, 2017.
5. Iddo Bentov and Ranjit Kumaresan. How to use Bitcoin to design fair protocols. In Juan A. Garay and Rosario Gennaro, editors, CRYPTO 2014, Part II, volume 8617 of LNCS, pages 421-439. Springer, Heidelberg, August 2014.
6. Bitcoin Wiki. Zero knowledge contingent payment. https://en.bitcoin.it/wiki/. (Accessed on 09/19/2019).
7. Christian Cachin and Jan Camenisch. Optimistic fair secure computation. In Mihir Bellare, editor, CRYPTO 2000, volume 1880 of LNCS, pages 93-111. Springer, Heidelberg, August 2000.
8. Jan Camenisch, Manu Drijvers, Tommaso Gagliardoni, Anja Lehmann, and Gregory Neven. The wonderful world of global random oracles. LNCS, pages 280-312. Springer, Heidelberg, 2018.
9. Matteo Campanelli, Rosario Gennaro, Steven Goldfeder, and Luca Nizzardo. Zero-knowledge contingent payments revisited: Attacks and payments for services. In ACM CCS 17, pages 229-243. ACM Press, 2017.
10. Ran Canetti. Universally composable security: A new paradigm for cryptographic protocols. In 42nd FOCS, pages 136-145. IEEE Computer Society Press, October 2001.
11. Ran Canetti, Yevgeniy Dodis, Rafael Pass, and Shabsi Walash. Universally composable security with global setup. In Salil P. Vadhan, editor, TCC 2007, volume 4392 of LNCS, pages 61-85. Springer, Heidelberg, February 2007.
12. Ran Canetti and Marc Fischlin. Universally composable commitments. In Joe Kilian, editor, CRYPTO 2001, volume 2139 of LNCS, pages 19-40. Springer, Heidelberg, August 2001.
13. Ran Canetti, Abhishek Jain, and Alessandra Scafuro. Practical UC security with a global random oracle. In Gail-Joon Ahn, Moti Yung, and Ninghui Li, editors, ACM CCS 14, pages 597-608. ACM Press, November 2014.
14. Stefan Dziembowski, Lisa Eckey, and Sebastian Faust. FairSwap: How to fairly exchange digital goods. In ACM CCS 18, pages 967-984. ACM Press, 2018.
15. Stefan Dziembowski, Lisa Eckey, Sebastian Faust, and Daniel Malinowski. PERUN: Virtual payment channels over cryptographic currencies. Cryptology ePrint Archive, Report 2017/635, 2017. http://eprint.iacr.org/2017/635.
16. Oded Goldreich. Foundations of Cryptography: Basic Applications, volume 2. Cambridge University Press, Cambridge, UK, 2004.
17. Oded Goldreich, Silvio Micali, and Avi Wigderson. How to play any mental game or A completeness theorem for protocols with honest majority. In Alfred Aho, editor, 19th ACM STOC, pages 218-229. ACM Press, May 1987.
18. Mathias Hall-Andersen. Fastswap: Concretely efficient contingent payments for complex predicates. IACR Cryptology ePrint Archive, 2019:1296, 2019.
19. Harry A. Kalodner, Steven Goldfeder, Xiaoqi Chen, S. Matthew Weinberg, and Edward W. Felten. Arbitrum: Scalable, private smart contracts. In William Enck and Adrienne Porter Felt, editors, 27th USENIX Security Symposium, USENIX Security 2018, Baltimore, MD, USA, August 15-17, 2018, pages 1353-1370. USENIX Association, 2018.
20. Jonathan Katz, Ueli Maurer, Björn Tackmann, and Vassilis Zikas. Universally composable synchronous computation. In Amit Sahai, editor, TCC 2013, volume 7785 of LNCS, pages 477-498. Springer, Heidelberg, March 2013.
21. Aggelos Kiayias, Hong-Sheng Zhou, and Vassilis Zikas. Fair and robust multi-party computation using a global transaction ledger. In Marc Fischlin and Jean-Sébastien Coron, editors, EUROCRYPT 2016, Part II, volume 9666 of LNCS, pages 705-734. Springer, Heidelberg, May 2016.
22. Ranjit Kumaresan and Iddo Bentov. Amortizing secure computation with penalties. In Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors, ACM CCS 16, pages 418-429. ACM Press, October 2016.
23. Ranjit Kumaresan, Vinod Vaikuntanathan, and Prashant Nalini Vasudevan. Improvements to secure computation with penalties. In Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors, ACM CCS 16, pages 406-417. ACM Press, October 2016.
24. Alptekin Küpçü and Anna Lysyanskaya. Usable optimistic fair exchange. In Josef Pieprzyk, editor, CT-RSA 2010, volume 5985 of LNCS, pages 252-267. Springer, Heidelberg, March 2010.
25. Henning Pagnia and Felix C Gärtner. On the impossibility of fair exchange without a trusted third party. Technical report, Technical Report TUD-BS-1999-02, Darmstadt University of Technology, 1999.
26. Jason Teutsch and Christian Reitwießner. A scalable verification solution for blockchains. CoRR, abs/1908.04756, 2019.
27. Eric Wagner, Achim Völker, Frederik Fuhrmann, Roman Matzutt, and Klaus Wehrle. Dispute resolution for smart contract-based two-party protocols. In IEEE International Conference on Blockchain and Cryptocurrency, ICBC 2019, Seoul, Korea (South), May 14-17, 2019, pages 422-430. IEEE, 2019.
28. Andrew Chi-Chih Yao. How to generate and exchange secrets (extended abstract). In 27th FOCS, pages 162-167. IEEE Computer Society Press, October 1986.

### Universal Composability Framework

The universal composability (UC) framework, introduced by Canetti [10], allows the representation of any arbitrary cryptographic protocol and the analysis of its security. It aims to provide a systematic way to describe protocols and an intuitive way to create definitions of security. To simplify the security analysis, the UC framework allows analyzing the security of a protocol in isolation and preserves the security under composition through a special composition operation called the universal composition operation. This ensures that the security of a protocol can be considered in isolation while still holding in any arbitrary context. Hence, the UC framework offers a way to model cryptographic protocols in complex environments like modern communication networks. Additionally, the universal composition operation allows building complex protocols from cryptographic building blocks and proving their security based on the security of these building blocks.

**Protocols**: A protocol consists of several computer programs executed by communicating computational entities called parties. Along with the parties, the model of protocol execution includes an environment and an adversary that can control a subset of the parties and the communication network. The environment freely chooses inputs for the protocol parties and the adversary and collects all outputs. The output of a protocol execution consists of all the outputs obtained from the parties and the adversary.

A protocol is said to evaluate an arbitrary function \( f \). An ideal functionality for \( f \) is a computing element that receives all inputs from the parties, computes \( f \), and returns the outputs to each party. It can be considered an incorruptible trusted party that evaluates \( f \). The adversary is restricted in communicating with the ideal functionality via the corrupted parties and the specified interface of the ideal functionality.

A protocol \( \pi \) is said to UC-realize an ideal functionality for a function \( f \) if for any adversary \( A \), there exists an "ideal adversary" \( \text{Sim} \) such that no environment \( Z \) can distinguish with non-negligible probability whether it is interacting with \( \pi \) and \( A \) or with \( \text{Sim} \) and the ideal functionality for \( f \).

**Composition**: Once it is shown that a protocol \( \pi \) UC-realizes an ideal functionality \( F \), this protocol can be used within more complex protocols. Consider a protocol \( \rho \) that makes subroutine calls to multiple instances of an ideal functionality \( F \). In this case, \( \rho \) is called an \( F \)-hybrid protocol, and \( F \) is called a hybrid functionality. The protocol \( \rho_{F \rightarrow \pi} \) specifies the protocol \( \rho \) where each call to an instance of the ideal functionality \( F \) is replaced by a call to an instance of the protocol \( \pi \), and each output of an instance of \( \pi \) is treated as an output of an instance of \( F \). Assuming \( \pi \) UC-realizes \( F \) and the protocol \( \rho \) UC-realizes an ideal functionality \( F' \), the universal composition theorem can be used to prove that the protocol \( \rho_{F \rightarrow \pi} \) also UC-realizes \( F' \).

Two major implications of the composition theorem are modularity and stronger security. The composition theorem allows splitting a complex task into small protocols. The security of these protocols can be shown in isolation and then composed together later. Moreover, a protocol that UC-realizes an ideal functionality \( F \) can be inserted into any context that makes calls to this ideal functionality, allowing the protocol to be used in any arbitrary context not known during the design process.

**Ideal and Real World Execution**: The security of a protocol is defined by comparing the protocol execution with an execution of an ideal protocol. The ideal protocol consists of an ideal functionality and so-called dummy parties. The dummy parties replace the main parties of the real protocol within the ideal protocol by simply forwarding inputs to the ideal functionality and outputs from the ideal functionality. The ideal protocol for an ideal functionality \( F \) is denoted by \( \text{IDEAL}_F \). In contrast, the real protocol is denoted by \( \text{REAL}_F \).

On the one hand, the execution of the real protocol is done within the so-called real world. It consists of the real protocol \( \text{REAL}_F \) with its participating parties, an adversary \( A \), and an environment \( Z \). The adversary can corrupt parties and hence all internal states and actions are controlled by \( A \). On the other hand, the execution of the ideal protocol \( \text{IDEAL}_F \) is done within the ideal world. It consists of \( \text{IDEAL}_F \) along with the dummy parties, an ideal world adversary \( \text{Sim} \) (called the simulator), and an environment \( Z \). Within the ideal world, the simulator may interact with the ideal functionality via the interface of the ideal functionality. In both worlds, the environment provides inputs to the parties and the adversary. It collects outputs from the parties and the adversary with the goal of distinguishing between the interaction with the real protocol and the ideal protocol. Hence, the environment acts as a distinguishing entity with the goal of telling apart whether or not it is interacting with the real protocol.

In both worlds, it is possible to include hybrid functionalities. We provide several of them for the modeling of our construction in Appendix B.

**Generalized Universal Composability Framework**: The basic UC framework does not allow the setup of a component that may be accessed by multiple protocol instances. Each protocol instance has its own hybrid functionality instances with which the protocol may interact. When considering hash functions as objects that should be captured by the model, this situation seems unrealistic. For example, one concrete hash function, such as keccak256, is used by multiple parties in multiple different protocol instances. Therefore, Canetti et al. [11] introduced the generalized UC (GUC) framework, which allows modeling shared ideal functionalities, also called global functionalities, that can be accessed by all protocol instances.

**Security Notion**: Informally, a protocol is said to be at least as secure as an ideal functionality if there exists no environment that can tell apart whether it is interacting with the real world or with the ideal world.

Considering a protocol \( \Pi \) which has access to one or more hybrid functionalities \( G_1, \ldots, G_n \). The output of the environment \( Z \) after the interaction with protocol \( \Pi \) and an adversary \( A \) on input \( 1^\kappa \) and \( x \in \{0, 1\}^* \) is denoted by:
\[ \text{REAL}_{G_1, \ldots, G_n}^{\Pi, A, Z}(\kappa, x). \]

In the ideal world, the protocol is replaced by an ideal protocol consisting of an ideal functionality \( F \) and dummy parties. In addition, the ideal protocol may have access to one or more hybrid functionalities \( G_1, \ldots, G_n \). The output of the environment \( Z \) after interacting with the ideal protocol and simulator \( \text{Sim} \) on input \( 1^\kappa \) and \( x \in \{0, 1\}^* \) is denoted by:
\[ \text{IDEAL}_{F, G_1, \ldots, G_n}^{\text{Sim}, Z}(\kappa, x). \]

Using these two random variables, the security of a protocol \( \Pi \) is defined as follows:

**Definition 1 (GUC security of protocol \( \Pi \))**: Let \( \kappa \in \mathbb{N} \) be a security parameter and \( \Pi \) be a protocol in a hybrid world with hybrid functionalities \( G_1, \ldots, G_n \). \( \Pi \) is said to GUC-realize an ideal functionality \( F \) in the hybrid world if for every probabilistic polynomial time (ppt) adversary \( A \) attacking \( \Pi \), there exists a ppt algorithm \( \text{Sim} \) such that the following holds for all ppt environments \( Z \) and for all \( x \in \{0, 1\}^* \):
\[ \text{IDEAL}_{F, G_1, \ldots, G_n}^{\text{Sim}, Z}(\kappa, x) \approx_c \text{REAL}_{G_1, \ldots, G_n}^{\Pi, A, Z}(\kappa, x). \]

### Model Components

To analyze the security of a protocol, an underlying model must be defined. This section presents the model components, and our construction is based on these model components. A formal description of OptiSwap is given in Appendix C.

To simplify the presentation and reading of the model and the protocol, the explicit mention of session identifiers and sub-session identifiers, typically denoted by \( \text{sid} \) and \( \text{ssid} \), is omitted. Instead, the contract identifier \( \text{id} \) is used to distinguish different sessions. In reality, each protocol instance uses its own smart contract instance lying on the blockchain, and hence the smart contract address can be used to identify a protocol session.

**Synchronous Communication**: A common and often used abstraction of the communication model within networks is that of synchronous communication. Formally, this can be modeled using the ideal functionality \( \text{FSYN} \) given in [10] or using a global clock functionality [20, 21, 4]. We abstract the communication by a synchronous communication model using the following assumptions. The protocol is executed in rounds where all parties are aware of the current round. In each round, each party receives all messages that were sent to them in the previous round. The communication itself is instantaneous, such that messages are sent within one round and received within the next round.

**Global Random Oracle**: Random oracles are widely used in cryptographic security proofs to model idealized hash functions. A random oracle provides, on a query value \( q \), a completely random response value \( r \) unless the value \( q \) was queried before. In this case, the random oracle returns the same value. Despite the fact that it is not proven that there exists a practical hash function that behaves like a random oracle, they are a useful tool in cryptographic proofs.