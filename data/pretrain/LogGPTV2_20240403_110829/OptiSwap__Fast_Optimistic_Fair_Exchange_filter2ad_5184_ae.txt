Corrupted Seller. For the proof of Theorem 1 in case of a corrupted Seller, we make use
of the hybrid argument technique and show indistinguishability by a sequence of security
games. The main challenge in this corruption scenario is that the simulator has to provide
input to FL
icfe on behalf of the corrupted Seller without knowing the witness x. The simulator
only learns the encrypted witness z and the commitment to the key c in the rst round. We
use the observability feature of the programmable random oracle H at this point. We need
to distinguish two cases of how the environment creates the commitment c:
 c is constructed correctly by querying H: in this case, we use the observability feature of
H to obtain the key k. This allows the simulator to decrypt z and provide the witness
icfe. Only if the environment nds a collision of H, he can distinguish
x as input to FL
between the two executions. However, based on the binding property of the commitment
scheme, this happens only with negligible probability.
 c is constructed incorrectly: in this case H was not queried before, so the simulator
cannot take advantage of the observability feature. However, the environment has to
provide correct opening values k and d in round 3 of the protocol, which he can only
guess with probability 1
2µ . This is negligible for large µ.
Finally, the simulator has to simulate the interactive dispute resolution procedure.
Corrupted Buyer. The main challenge of the simulation in case of a corrupted Buyer is that
the simulator needs to create an encrypted witness z∗ in the rst round and to present an
encryption key in the third round such that the decryption of z∗ equals the correct witness
x which is known to the simulator only after round 3. To achieve indistinguishability, we
make use of the programming feature of H. The encrypted witness z∗ is chosen randomly by
the simulator. Based on the IND-CPA-security of the encryption scheme, the environment
cannot distinguish between the encrypted witness z created by the honest Seller and z∗.
After the correct witness x is revealed in the third round, the simulator programs H such
that the decryption of the z∗ equals x.
Although the honest Seller provides a correct witness x, a corrupted Buyer may start
the dispute resolution procedure. Therefore, the simulator needs to simulate the interaction.
He keeps track of the challenge limit parameter to ensure that the corrupted Buyer may not
pose more challenges than allowed. Moreover, the honest Seller is always able to create valid
responses and the simulator has enough information to simulate the same behavior.
Two corrupted parties. In case of two corrupted parties, the OptiSwap protocol does not
provide any guarantees. In particular, termination is not given and coins may be locked
forever. However, the simulation in this corruption scenario need to be shown in order to
allow composability.
21
The simulation is a combination of the single corruption cases and in most aspects
straightforward. One dierence is the possibility that money is blocked in the judge smart
contract. To achieve the same behavior in the simulation, we make use of the blocking feature
of the ledger functionality L. This feature allows the simulator to block an unfreezing of coin
on behalf of a corrupted party. The result is that the money is locked forever.
6 Conclusion and Future Work
We presented OptiSwap, a smart contract based two-party protocol for realizing a fair ex-
change for digital commodity against money. In comparison to already existing fair exchange
protocols, we signicantly improved the execution of the optimistic case in which both par-
ties behave honestly. We integrated an interactive dispute handling in OptiSwap that is
only run in the pessimistic case. This allows us to have almost no overhead in communication
complexity in the optimistic case.
Furthermore, OptiSwap contains a protection mechanism against so-called grieving at-
tacks, where the attacker tries to harm the honest party by forcing him to pay fees. The
protection is based on transaction fees paid by both parties such that the honest party is
reimbursed at the end of the protocol execution. We provide a reference implementation
of our judge smart contract for Ethereum. Based on that, we estimated gas costs for the
optimistic and pessimistic case.
Future work. The execution costs in the optimistic mode strongly depend on the deployment
costs of the judge smart contract. By allowing repeated exchanges over one contract, the
costs for a single execution might be signicantly reduced. An interesting research question
is the analysis of minimal bounds on communication and computation complexity. Results
can show how far further our construction might be improved.
7 Acknowledgments
This work was partly funded by the iBlockchain project (grant nr. 16KIS0902) funded by the
German Federal Ministry of Education and Research (BMBF), by the Deutsche Forschungs-
gemeinschaft (DFG, German Research Foundation)  SFB 1119  236615297, and by the
German Federal Ministry of Education and Research and the Hessen State Ministry for
Higher Education, Research and the Arts within their joint support of the National Re-
search Center for Applied Cybersecurity ATHENE.
22
References
1. Ethereum average gas price chart.
https://etherscan.io/chart/gasprice.
(Accessed on
09/19/2019).
2. Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz Mazurek. Secure
multiparty computations on bitcoin. In 2014 IEEE Symposium on Security and Privacy, pages
443458. IEEE Computer Society Press, May 2014.
3. N. Asokan, Victor Shoup, and Michael Waidner. Optimistic fair exchange of digital signatures
(extended abstract). In Kaisa Nyberg, editor, EUROCRYPT'98, volume 1403 of LNCS, pages
591606. Springer, Heidelberg, May / June 1998.
4. Christian Badertscher, Ueli Maurer, Daniel Tschudi, and Vassilis Zikas. Bitcoin as a transaction
ledger: A composable treatment. LNCS, pages 324356. Springer, Heidelberg, 2017.
5. Iddo Bentov and Ranjit Kumaresan. How to use bitcoin to design fair protocols. In Juan A.
Garay and Rosario Gennaro, editors, CRYPTO 2014, Part II, volume 8617 of LNCS, pages
421439. Springer, Heidelberg, August 2014.
6. Bitcoin Wiki. Zero knowledge contingent payment. https://en.bitcoin.it/wiki/. (Accessed on
09/19/2019).
7. Christian Cachin and Jan Camenisch. Optimistic fair secure computation. In Mihir Bellare,
editor, CRYPTO 2000, volume 1880 of LNCS, pages 93111. Springer, Heidelberg, August 2000.
8. Jan Camenisch, Manu Drijvers, Tommaso Gagliardoni, Anja Lehmann, and Gregory Neven.
The wonderful world of global random oracles. LNCS, pages 280312. Springer, Heidelberg,
2018.
9. Matteo Campanelli, Rosario Gennaro, Steven Goldfeder, and Luca Nizzardo. Zero-knowledge
In ACM CCS 17, pages
contingent payments revisited: Attacks and payments for services.
229243. ACM Press, 2017.
10. Ran Canetti. Universally composable security: A new paradigm for cryptographic protocols.
In 42nd FOCS, pages 136145. IEEE Computer Society Press, October 2001.
11. Ran Canetti, Yevgeniy Dodis, Rafael Pass, and Shabsi Walsh. Universally composable security
with global setup. In Salil P. Vadhan, editor, TCC 2007, volume 4392 of LNCS, pages 6185.
Springer, Heidelberg, February 2007.
12. Ran Canetti and Marc Fischlin. Universally composable commitments. In Joe Kilian, editor,
CRYPTO 2001, volume 2139 of LNCS, pages 1940. Springer, Heidelberg, August 2001.
13. Ran Canetti, Abhishek Jain, and Alessandra Scafuro. Practical UC security with a global
random oracle. In Gail-Joon Ahn, Moti Yung, and Ninghui Li, editors, ACM CCS 14, pages
597608. ACM Press, November 2014.
14. Stefan Dziembowski, Lisa Eckey, and Sebastian Faust. FairSwap: How to fairly exchange digital
goods. In ACM CCS 18, pages 967984. ACM Press, 2018.
15. Stefan Dziembowski, Lisa Eckey, Sebastian Faust, and Daniel Malinowski. PERUN: Virtual
payment channels over cryptographic currencies. Cryptology ePrint Archive, Report 2017/635,
2017. http://eprint.iacr.org/2017/635.
16. Oded Goldreich. Foundations of Cryptography: Basic Applications, volume 2. Cambridge Uni-
versity Press, Cambridge, UK, 2004.
17. Oded Goldreich, Silvio Micali, and Avi Wigderson. How to play any mental game or A com-
pleteness theorem for protocols with honest majority. In Alfred Aho, editor, 19th ACM STOC,
pages 218229. ACM Press, May 1987.
18. Mathias Hall-Andersen. Fastswap: Concretely ecient contingent payments for complex pred-
icates. IACR Cryptology ePrint Archive, 2019:1296, 2019.
19. Harry A. Kalodner, Steven Goldfeder, Xiaoqi Chen, S. Matthew Weinberg, and Edward W.
In William Enck and Adrienne Porter
Felten. Arbitrum: Scalable, private smart contracts.
Felt, editors, 27th USENIX Security Symposium, USENIX Security 2018, Baltimore, MD, USA,
August 15-17, 2018, pages 13531370. USENIX Association, 2018.
20. Jonathan Katz, Ueli Maurer, Björn Tackmann, and Vassilis Zikas. Universally composable
In Amit Sahai, editor, TCC 2013, volume 7785 of LNCS, pages
synchronous computation.
477498. Springer, Heidelberg, March 2013.
21. Aggelos Kiayias, Hong-Sheng Zhou, and Vassilis Zikas. Fair and robust multi-party compu-
tation using a global transaction ledger. In Marc Fischlin and Jean-Sébastien Coron, editors,
EUROCRYPT 2016, Part II, volume 9666 of LNCS, pages 705734. Springer, Heidelberg, May
2016.
23
22. Ranjit Kumaresan and Iddo Bentov. Amortizing secure computation with penalties. In Edgar R.
Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors,
ACM CCS 16, pages 418429. ACM Press, October 2016.
23. Ranjit Kumaresan, Vinod Vaikuntanathan, and Prashant Nalini Vasudevan.
Improvements
to secure computation with penalties. In Edgar R. Weippl, Stefan Katzenbeisser, Christopher
Kruegel, Andrew C. Myers, and Shai Halevi, editors, ACM CCS 16, pages 406417. ACM Press,
October 2016.
24. Alptekin Küpçü and Anna Lysyanskaya. Usable optimistic fair exchange. In Josef Pieprzyk,
editor, CT-RSA 2010, volume 5985 of LNCS, pages 252267. Springer, Heidelberg, March 2010.
25. Henning Pagnia and Felix C Gärtner. On the impossibility of fair exchange without a trusted
third party. Technical report, Technical Report TUD-BS-1999-02, Darmstadt University of
Technology, 1999.
26. Jason Teutsch and Christian Reitwieÿner. A scalable verication solution for blockchains.
CoRR, abs/1908.04756, 2019.
27. Eric Wagner, Achim Völker, Frederik Fuhrmann, Roman Matzutt, and Klaus Wehrle. Dispute
resolution for smart contract-based two-party protocols. In IEEE International Conference on
Blockchain and Cryptocurrency, ICBC 2019, Seoul, Korea (South), May 14-17, 2019, pages
422430. IEEE, 2019.
28. Andrew Chi-Chih Yao. How to generate and exchange secrets (extended abstract). In 27th
FOCS, pages 162167. IEEE Computer Society Press, October 1986.
24
A Universal Composability Framework
The universal composability (UC) framework, introduced by Canetti [10], allows to repre-
sent any arbitrary cryptographic protocol and to analyze its security. It aims at providing a
systematic way to describe protocols and an intuitive way to create denitions of security. In
order to simplify the security analysis, the UC framework allows analyzing the security of a
protocol in isolation and preserves the security under composition by means of a special com-
position operation. This operation is called the universal composition operation. It follows
that the security of a protocol can be considered in isolation while the security properties
still hold in any arbitrary context. Hence, the UC framework oers a way to model crypto-
graphic protocols in complex environments like modern communication networks. Moreover,
the universal composition operation allows to build complex protocols out of cryptographic
building blocks and proves its security based on the security of the building blocks.
Protocols. A protocol consists of several computer programs that are executed by commu-
nicating computational entities called parties. Along with the parties, the model of protocol
execution comprises an environment and an adversary that can control a subset of the par-
ties as well as the communication network. The environment freely chooses inputs for the
protocol parties as well as for the adversary and obtains all outputs. The output of a protocol
execution consists of all the outputs obtained from the parties as well as the output of the
adversary.
A protocol is said to evaluate an arbitrary function f . An ideal functionality for f is a
computing element that receives all inputs from the parties, computes f , and returns the
outputs to each party. It can be considered as an incorruptible trusted party that evaluates f .
The adversary is restricted in communicating with the ideal functionality via the corrupted
parties and the specied interface of the ideal functionality.
A protocol π is said to UC-realize an ideal functionality for a function f if for any adver-
sary A there exists an ideal adversary Sim such that no environment Z can distinguish
with non-negligible probability whether it is interacting with π and A or with Sim and the
ideal functionality for f .
Composition. As soon as it is shown that a protocol π UC-realizes an ideal functionality F,
this protocol can be used within more complex protocols. Therefore, lets consider a protocol
ρ that makes subroutine calls to multiple instances of an ideal functionality F. In this case,
ρ is called a F -hybrid protocol and F is called an hybrid functionality. The protocol ρF→π
species the protocol ρ where each call to an instance of the ideal functionality F is replaced
by a call to an instance of the protocol π and each output of an instance of π is treated as
an output of an instance of F. Depending on the fact that π UC-realizes F and assuming
the protocol ρ UC-realizes an ideal functionality F(cid:48), the universal composition theorem can
be used to prove that the protocol ρF→π also UC-realizes F(cid:48).
Two major implications of the composition theorem are modularity and stronger security.
The composition theorem allows to split a complex task into small protocols. The security
of these protocols can be shown in isolation and the protocols can be composed together
later on. Moreover, a protocol that UC-realizes an ideal functionality F can be inserted into
any context that makes calls to this ideal functionality. This way, the protocol can be used
in any arbitrary context not known during the design process of the protocol.
Ideal and real world execution. The security of a protocol is dened by comparing the
protocol execution with an execution of an ideal protocol. The ideal protocol consists of
an ideal functionality and so-called dummy parties. The dummy parties replace the main
parties of the real protocol within the ideal protocol by simply forwarding inputs to the
ideal functionality and outputs from the ideal functionality. The ideal protocol for an ideal
functionality F is denoted by IDEALF . In contrast, the real protocol is denoted by REALF .
25
On the one hand, the execution of the real protocol is done within the so-called real
world. It consists of the real protocol REALF with its participating parties, an adversary
A, and an environment Z. The adversary can corrupt parties and hence all internal states
and actions are controlled by A. On the other hand, the execution of the ideal protocol
IDEALF is done within the ideal world. It consists of IDEALF along with the dummy
parties, an ideal world adversary Sim, which is called simulator, and an environment Z.
Within the ideal world, the simulator may interact with the ideal functionality via the
interface of the ideal functionality. In both worlds, the environment provides inputs to the
parties and the adversary. It collects outputs from the parties and the adversary with the
goal to distinguish between the interaction with the real protocol and the ideal protocol.
Hence, the environment acts as a distinguishing entity with the goal to tell apart whether
or not it is interacting with the real protocol.
In both worlds, it is possible to include hybrid functionalities. We provide several of them
for the modeling of our construction in Appendix B.
Generalized universal composability framework. The basic UC framework does not allow the
setup of a component that may be accessed by multiple protocol instances. Within the UC
framework, each protocol instance has its own hybrid functionality instances with which the
protocol may interact. When considering hash functions as objects that should be captured
by the model, this situation seems to be not realistic. One concrete hash function, e.g.,
keccak256, is used by multiple parties in multiple dierent protocol instances. Therefore,
Canetti et al. [11] introduced the generalized UC (GUC) framework. It allows to model
shared ideal functionalities, also called global functionalities, which can be accessed by all
protocol instances.
Security notion. Informally, a protocol is said to be at least as secure as an ideal functionality
if there exists no environment that can tell apart whether it is interacting with the real world
or with the ideal world.
Considering a protocol Π which has access to one or more hybrid functionalities G1, . . . ,Gn.
The output of the environment Z after the interaction with protocol Π and an adversary A
on input 1κ and x ∈ {0, 1}∗ is denoted by
REAL
G1,...,Gn
Π,A,Z (κ, x).
In the ideal world the protocol is replaced by an ideal protocol consisting of an ideal func-
tionality F and dummy parties. In addition, the ideal protocol may have access to one or
more hybrid functionalities G1, . . . ,Gn. The output of the environment Z after interacting
with the ideal protocol and simulator Sim on input 1κ and x ∈ {0, 1}∗ is denoted by
IDEAL
F ,G1,...,Gn
Sim,Z
(κ, x).
Using these two random variables, the security of a protocol Π is dened as follows:
Denition 1 (GUC security of protocol Π). Let κ ∈ N be a security parameter and
Π be a protocol in a hybrid world with hybrid functionalities G1, . . . ,Gn. Π is said to GUC-
realize an ideal functionality F in the hybrid world if for every probabilistic polynomial time
(ppt) adversary A attacking Π there exists a ppt algorithm Sim such that the following holds
for all ppt environments Z and for all x ∈ {0, 1}∗:
IDEAL
F ,G1,...,Gn
Sim,Z
(κ, x) ≈c REAL
G1,...,Gn
Π,A,Z (κ, x).
B Model Components
To analyze the security of a protocol, an underlying model must be dened. This section
presents the model components. Moreover, our construction is based on these model com-
ponents. A formal description of OptiSwap is given in Appendix C.
26
To simplify the presentation and reading of the model and the protocol, the explicit
mention of session identiers and sub-session identiers, which are typically denoted by
sid and ssid, is omitted. Instead, the contract identier id is used to distinguish dierent
sessions. In reality, each protocol instance uses its own smart contract instance lying on the
blockchain and hence the smart contract address may be used to identify a protocol session.
Synchronous Communication. A common and often used abstraction of the communi-
cation model within networks is that of synchronous communication. Formally, this can be
modeled using the ideal functionality FSYN given in [10] or using a global clock functional-
ity [20, 21, 4]. We abstract the communication by a synchronous communication model using
the following assumptions. The protocol is executed in rounds where all parties are aware of
the current round. In each round each party receives all messages that were sent to them in
the previous round. The communication itself is instantaneous such that messages are sent
within one round and received within the next round.
Global Random Oracle. Random oracles are widely used in cryptographic security proofs
to model idealized hash functions. A random oracle provides on a query value q a completely
random response value r unless the value q was queried before. In this case, the random oracle
returns the same value. Despite it is not proven that there exists a practical hash function