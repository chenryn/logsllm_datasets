A more robust deobfuscation technique should rely on other
invariant transformations such as the hierarchical structure of
the classes and packages. Many methods of the Data Layer
library are stubs, therefore using features of the method body
will not improve the accuracy drastically. Additionally, one
could obfuscate those features (e.g., using reﬂection together
with string encryption) introducing false negatives.
72    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
In our case, we have successfully leveraged system types
to disambiguate methods with the same signature. We chose
to only use system types as they are less prone to obfuscation
than other data types and have helped reducing the number of
false positives. One could take into account the threat model,
and chose to use a more coarse type of signatures when certain
traits (e.g., reﬂection) appear in the app.
Branching. Another potential source of false negative data
ﬂows stems from the backward analysis, in the context ex-
traction. WearFlow stops the backtracking when encounters a
deﬁnition of a channel, but this deﬁnition could be part of the
branch of a conditional statement. Depending on the scope of
the variable, the channel could be deﬁned in another method
or even another component. Finally, if the string analysis is
unable to calculate the value of a key or path (e.g., when there
are multiples values due to branching) we use a wildcard
value, i.e.: we match any string. This means that the matching
step will overestimate the potential ﬂows between the entry
and the exit point.
Dataset. Our dataset is limited to 3,111 APKs and 220 pack-
age names after considering different APK versions. There
are more than 220 apps available for Wear OS, however, iden-
tifying them is a challenging task. Google Play does not offer
an exhaustive list of apps with Wear OS components, nor it is
always featured in the description of the app. This restriction
limits our ability to query Wear OS apps in Google Play. Fur-
thermore, datasets like Androzoo do not provide information
about whether a app has wearable components or not. Thus,
we need to download apps as the rate limit allows. Given the
low density of these kind of apps in the overall set of Android
apps, the amount of apps that can be obtained this way is very
limited.
Model Accuracy. The precision of the analysis also de-
pends on the accuracy of the Data Layer model. The Data
Layer model used by WearFlow replicates the Data Layer
model, as described in Google’s Wear OS documentation. If
the Data Layer APIs were to transfer data trough undocu-
mented components of the OS or even through the cloud (e.g.,
via backups), WearFlow would not detect such ﬂows. Also,
our model is based on Wear OS versions 1 and 2. Wear OS
under active development. Thus, any new APIs introduced in
future versions will need to be modeled.
8 Related Work
Mobile-Wear communication can be seen as a kind of inter-
app communication where one of the apps is being executed
in a wearable device. Several works have focused on app col-
lusion detection [4, 5, 18, 23, 26, 34]. These works model ICC
methods to identify sensitive data ﬂows between applications
running on the same device. WearFlow complements these,
extending the analysis of these apps into the Mobile-Wear
ecosystem, increasing the overall coverage of these solutions
to all current app interactions in the Android-Wear OS ecosys-
tem. One may argue that these tools could be extended to
cover for Wear OS interactions. As an example, works such
as DialDroid [6] uses entry and exit points to match ICC com-
munication between mobile apps. In our case, we consider
wearable APIs as sources and sinks, which could be easily
replicated in DialDroid. However, These APIs aggregate mul-
tiple data into a single API call, and we need to match data
types on the sender and receiver side, which would lead to
inaccuracies in DialDroid and many other tools [11].
ApkCombiner [20] combines two apps into one allowing
to run taint tracking on a single app. This approach does not
allow us to reason about individual items aggregated into a
single API call.
There has been a recent interest of the community in ex-
panding the scope of data tracking to more platforms outside
the Android ecosystem. Zou et al. [35] studied the interac-
tion of mobile apps, IoT devices and clouds on smart homes
using a combination of trafﬁc collection and static analysis.
They discoverd several new vulnerabilities and attacks against
smart home platforms. Berkay et al proposed a taint track-
ing system for IoT devices [7]. WearFlow could have been
implemented following the same approach (analysing WiFi
and Bluetooth communications between Android and Wear
OS). This would have required us to reverse the different
communication protocols and data exchanged in both wire-
less protocols. Our approach is simpler, and doesn’t require
additional hardware to execute.
9 Conclusion
In this work, we have presented WearFlow, a static analysis
tool that systematically detects the exﬁltration of sensitive
data across the Mobile-Wear Android ecosystem. WearFlow
augments the capabilities of previous works on taint tracking,
expanding the scope of the security analysis from mobile
apps to smartwatches. We addressed the challenge of enabling
inter-device analysis by modeling Google Play Services, a
proprietary library. Our analysis framework can deal with
trivial obfuscation and most of the non-trivial obfuscation
techniques commonly used in the wild.
We have created WearBench, the ﬁrst benchmark for ana-
lyzing inter-device data leakage in Wear OS. Our evaluation
shows the effectiveness of WearFlow over other approaches.
We also analyze apps in Google Play. Our results show that
our system scales and can uncover privacy violations on pop-
ular apps, including one with over 10 million downloads. As
a future work, we want to extend our deobfuscation phase to
cover additional forms of obfuscation (e.g., the two — out of
seven — non-trivial obfuscations we discuss), and extend the
scope of our analysis to the entire Google Play app market.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    73
10 Acknowledgements
This research has been partially sponsored by the Engineering
and Physical Sciences Research Council (EPSRC) and the
UK government as part of the Centre for Doctoral Training
in Cyber Security at Royal Holloway, University of London
(EP/P009301/1).
References
[1] Kevin Allix, Tegawendé F. Bissyandé, Jacques Klein,
and Yves Le Traon. Androzoo: Collecting millions of
android apps for the research community. In Proceed-
ings of the 13th International Conference on Mining
Software Repositories, MSR ’16, page 468–471, New
York, NY, USA, 2016. Association for Computing Ma-
chinery.
[2] Steven Arzt, Siegfried Rasthofer, and Eric Bodden. Susi:
A tool for the fully automated classiﬁcation and cate-
gorization of android sources and sinks. University of
Darmstadt, Tech. Rep. TUDCS-2013, 114:108, 2013.
[3] Steven Arzt, Siegfried Rasthofer, Christian Fritz,
Eric Bodden, Alexandre Bartel, Jacques Klein, Yves
Le Traon, Damien Octeau, and Patrick McDaniel. Flow-
droid: Precise context, ﬂow, ﬁeld, object-sensitive and
lifecycle-aware taint analysis for android apps. In Acm
Sigplan Notices, volume 49, pages 259–269. ACM,
2014.
[4] Hamid Bagheri, Alireza Sadeghi, Joshua Garcia, and
Sam Malek. Covert: Compositional analysis of android
IEEE transactions on
inter-app permission leakage.
Software Engineering, 41(9):866–886, 2015.
[5] Shweta Bhandari, Wafa Ben Jaballah, Vineeta Jain, Vijay
Laxmi, Akka Zemmari, Manoj Singh Gaur, Mohamed
Mosbah, and Mauro Conti. Android inter-app commu-
nication threats and detection techniques. Computers
Security, 70:392–421, 2017.
[6] Amiangshu Bosu, Fang Liu, Danfeng Daphne Yao, and
Gang Wang. Collusive data leak and more: Large-
scale threat analysis of inter-app communications. In
Proceedings of the 2017 ACM on Asia Conference on
Computer and Communications Security, pages 71–85.
ACM, 2017.
[8] Jagmohan Chauhan, Suranga Seneviratne, Mohamed Ali
Kaafar, Anirban Mahanti, and Aruna Seneviratne. Char-
acterization of early smartwatch apps. In 2016 IEEE
International Conference on Pervasive Computing and
Communication Workshops (PerCom Workshops), pages
1–6. IEEE, 2016.
[9] Xingmin Cui, Jingxuan Wang, Lucas CK Hui, Zhong-
wei Xie, Tian Zeng, and Siu-Ming Yiu. Wechecker:
efﬁcient and precise detection of privilege escalation
vulnerabilities in android apps. In Proceedings of the
8th ACM Conference on Security & Privacy in Wireless
and Mobile Networks, pages 1–12, 2015.
[10] Quang Do, Ben Martini, and Kim-Kwang Raymond
Choo. Is the data on your wearable device secure? an
android wear smartwatch case study. Software: Practice
and Experience, 47(3):391–403, 2017.
[11] Karim O Elish, Danfeng Yao, and Barbara G Ryder. On
the need of precise inter-app icc classiﬁcation for de-
tecting android malware collusions. In Proceedings of
IEEE mobile security technologies (MoST), in conjunc-
tion with the IEEE symposium on security and privacy,
2015.
[12] HP Fortify.
Internet of things security study: smart-
watches.
Accessed March 2020, 2015.
https:
//www.ftc.gov/system/files/documentspublic_
comments/2015/10/00050-98093.pdf.
[13] Julien Gamba, Mohammed Rashed, Abbas Razagh-
panah, Juan Tapiador, and Narseo Vallina-Rodriguez.
An analysis of pre-installed android software. arXiv
preprint arXiv:1905.02713, 2019.
[14] Gartner. Gartner says global end-user spending on
wearable devices to total $52 billion in 2020. Ac-
cessed March 2020, 10 2019. https://perma.cc/
MR8J-PUUK.
[15] Michael I Gordon, Deokhwan Kim, Jeff H Perkins,
Limei Gilham, Nguyen Nguyen, and Martin C Rinard.
Information ﬂow analysis of android applications in
droidsafe. In NDSS, volume 15, page 110, 2015.
[16] Rohit Goyal, Nicola Dragoni, and Angelo Spognardi.
Mind the tracker you wear: a security analysis of wear-
able health trackers. In Proceedings of the 31st Annual
ACM Symposium on Applied Computing, pages 131–
136, 2016.
[7] Z Berkay Celik, Leonardo Babun, Amit Kumar Sikder,
Hidayet Aksu, Gang Tan, Patrick McDaniel, and A Sel-
cuk Uluagac. Sensitive information tracking in com-
In 27th {USENIX} Security Symposium,
modity iot.
pages 1687–1704, 2018.
[17] Mahmoud Hammad, Joshua Garcia, and Sam Malek.
A large-scale empirical study on the effects of code
obfuscations on android apps and anti-malware products.
In Proceedings of the 40th International Conference on
Software Engineering, pages 421–431, 2018.
74    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[18] William Klieber, Lori Flynn, Amar Bhosale, Limin Jia,
and Lujo Bauer. Android taint ﬂow analysis for app
sets. In Proceedings of the 3rd ACM SIGPLAN Interna-
tional Workshop on the State of the Art in Java Program
Analysis, pages 1–6, 2014.
[27] Roman Schlegel, Kehuan Zhang, Xiao-yong Zhou,
Mehool Intwala, Apu Kapadia, and XiaoFeng Wang.
Soundcomber: A stealthy and context-aware sound tro-
jan for smartphones. In NDSS, volume 11, pages 17–33,
2011.
[19] Ding Li, Yingjun Lyu, Mian Wan, and William GJ Hal-
fond. String analysis for java and android applications.
In Proceedings of the 2015 10th Joint Meeting on Foun-
dations of Software Engineering, pages 661–672. ACM,
2015.
[28] Mingshen Sun, Tao Wei, and John CS Lui. Taintart: A
practical multi-level information-ﬂow tracking system
for android runtime. In Proceedings of the 2016 ACM
SIGSAC Conference on Computer and Communications
Security, pages 331–342, 2016.
[20] Li Li, Alexandre Bartel, Tegawendé F Bissyandé,
Jacques Klein, and Yves Le Traon. Apkcombiner: Com-
bining multiple android apps to support inter-app anal-
ysis. In IFIP International Information Security and
Privacy Conference, pages 513–527. Springer, 2015.
[29] Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie
Hendren, Patrick Lam, and Vijay Sundaresan. Soot:
A java bytecode optimization framework. In CASCON
First Decade High Impact Papers, pages 214–224. IBM
Corp., 2010.
[21] Li Li, Alexandre Bartel, Tegawendé F Bissyandé,
Jacques Klein, Yves Le Traon, Steven Arzt, Siegfried
Rasthofer, Eric Bodden, Damien Octeau, and Patrick
McDaniel. Iccta: Detecting inter-component privacy
leaks in android apps. In 2015 IEEE/ACM 37th IEEE
International Conference on Software Engineering, vol-
ume 1, pages 280–291. IEEE, 2015.
[22] Li Li, Tegawendé F Bissyandé, Damien Octeau, and
Jacques Klein. Droidra: Taming reﬂection to support
whole-program analysis of android apps. In Proceedings
of the 25th International Symposium on Software Testing
and Analysis, pages 318–329, 2016.
[23] Fang Liu, Haipeng Cai, Gang Wang, Danfeng Yao,
Karim O Elish, and Barbara G Ryder. Mr-droid: A scal-
able and prioritized analysis of inter-app communication
risks. In 2017 IEEE Security and Privacy Workshops
(SPW), pages 189–198. IEEE, 2017.
[24] Felix Pauck, Eric Bodden, and Heike Wehrheim. Do
android taint analysis tools keep their promises? In
Proceedings of the 2018 26th ACM Joint Meeting on
European Software Engineering Conference and Sympo-
sium on the Foundations of Software Engineering, pages
331–341, 2018.
[30] He Wang, Ted Tsung-Te Lai, and Romit Roy Choudhury.
Mole: Motion leaks through smartwatch sensors. In Pro-
ceedings of the 21st Annual International Conference
on Mobile Computing and Networking, pages 155–166,
2015.
[31] Fengguo Wei, Xingwei Lin, Xinming Ou, Ting Chen,
and Xiaosong Zhang.
Jn-saf: Precise and efﬁcient
ndk/jni-aware inter-language static analysis framework
for security vetting of android applications with native
code. In Proceedings of the 2018 ACM SIGSAC Confer-
ence on Computer and Communications Security, pages
1137–1150, 2018.
[32] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. Aman-
droid: A precise and general inter-component data ﬂow
analysis framework for security vetting of android apps.
In Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security, pages 1329–
1341. ACM, 2014.
[33] Lili Wei, Yepang Liu, and Shing-Chi Cheung. Tam-
ing android fragmentation: Characterizing and detecting
compatibility issues for android apps. In Proceedings
of the 31st IEEE/ACM International Conference on Au-
tomated Software Engineering, pages 226–237, 2016.
[25] Lina Qiu, Yingying Wang, and Julia Rubin. Analyzing
the analyzers: Flowdroid/iccta, amandroid, and droid-
safe. In Proceedings of the 27th ACM SIGSOFT Inter-
national Symposium on Software Testing and Analysis,
pages 176–186, 2018.
[34] Mengwei Xu, Yun Ma, Xuanzhe Liu, Felix Xiaozhu Lin,
and Yunxin Liu. Appholmes: Detecting and character-
izing app collusion among third-party android markets.
In Proceedings of the 26th International Conference on
World Wide Web, pages 143–152, 2017.
[26] Tristan Ravitch, E Rogan Creswick, Aaron Tomb, Adam
Foltzer, Trevor Elliott, and Ledah Casburn. Multi-app
security analysis with fuse: Statically detecting android
app collusion. In Proceedings of the 4th Program Pro-
tection and Reverse Engineering Workshop, pages 1–10,
2014.
[35] Wei Zhou, Yan Jia, Yao Yao, Lipeng Zhu, Le Guan,
Yuhang Mao, Peng Liu, and Yuqing Zhang. Discovering
and understanding the security hazards in the interac-
tions between iot devices, mobile apps, and clouds on
In 28th {USENIX} Security
smart home platforms.
Symposium, pages 1133–1150, 2019.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    75