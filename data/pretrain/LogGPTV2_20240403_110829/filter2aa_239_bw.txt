进行一定的搜索，以便以后检索这一项。显然这会降低性能，如果在排序时许多键都有相
同的索引，这类冲突就更可能出现。根据Microsoft的算法的工作方式，当计算出来的散列
代码值平均分布在int.MinValue和int.MaxValue之间时，这种风险会降低到最小。
除了实现GetHashCode（）方法之外，键类型还必须实现IEquatable.Equals（）方
法，或重写Object类的Equals（）方法。因为不同的键对象可能返回相同的散列代码，所
以字典使用Equals（）方法来比较键。字典检查两个键A和B是否相等，并调用
A.Equals（B）方法。这表示必须确保下述条件总是成立：
如果A.Equals（B）方法返回true，则A.GetHashCode（）和B.GetHashCode（）方法
必须总是返回相同的散列代码。
这似乎有点奇怪，但它非常重要。如果设计出某种重写这些方法的方式，使上面的条
件并不总是成立，那么把这个类的实例用作键的字典就不能正常工作，而是会发生有趣的
事情。例如，把一个对象放在字典中后，就再也检索不到它，或者试图检索某项，却返回
了错误的项。
 注意： 
如果为Equals（）方法提供了重写版本，但没有提供
GetHashCode（）方法的重写版本，C#编译器就会显示一个编译警告。
对于System.Object，这个条件为true，因为Equals（）方法只是比较引用，
GetHashCode（）方法实际上返回一个仅基于对象地址的散列代码。这说明，如果散列表
基于一个键，而该键没有重写这些方法，这个散列表就能正常工作。但是，这么做的问题
是，只有对象完全相同，键才被认为是相等的。也就是说，把一个对象放在字典中时，必
须将它与该键的引用关联起来。也不能在以后用相同的值实例化另一个键对象。如果没有
重写Equals（）方法和GetHashCode（）方法，在字典中使用类型时就不太方便。
另外，System.String实现了IEquatable接口，并重载了GetHashCode（）方法。
Equals（）方法提供了值的比较，GetHashCode（）方法根据字符串的值返回一个散列代
码。因此，在字典中把字符串用作键非常方便。
数字类型（如Int32）也实现IEquatable接口，并重载GetHashCode（）方法。但是这
些类型返回的散列代码只映射到值上。如果希望用作键的数字本身没有分布在可能的整数
值范围内，把整数用作键就不能满足键值的平均分布规则，于是不能获得最佳的性能。
Int32并不适合在字典中使用。
如果需要使用的键类型没有实现IEquatable接口，并根据存储在字典中的键值重载
GetHashCode（）方法，就可以创建一个实现IEqualityComparer接口的比较器。
IEquality-Comparer接口定义了GetHashCode（）和Equals（）方法，并将传递的对象
作为参数，因此可以提供与对象类型不同的实现方式。Dictionary构造函
数的一个重载版本允许传递一个实现了IEqualityComparer 接口的对象。如果把这个对
象赋予字典，该类就用于生成散列代码并比较键。
11.8.3 字典示例
字典示例程序建立了一个员工字典。该字典用EmployeeId对象来索引，存储在字典中
的每个数据项都是一个Employee对象，该对象存储员工的详细数据。
实现EmployeeId结构是为了定义在字典中使用的键，该结构的成员是表示员工的一个
前缀字符和一个数字。这两个变量都是只读的，只能在构造函数中初始化。字典中的键不
应改变，这是必须保证的。在构造函数中填充字段。重载ToString（）方法是为了获得员
工ID的字符串表示。与键类型的要求一样，EmployeeId结构也要实现IEquatable接口，并
重载GetHashCode（）方法（代码文件DictionarySample/EmployeeId.cs）。
    public class EmployeeIdException : Exception
    {
      public EmployeeIdException(string message) : base(message) { }
    }
    public struct EmployeeId : IEquatable
    {
      private readonly char _prefix;
      private readonly int _number;
      public EmployeeId(string id)
      {
        Contract.Requires(id ! = null);
        _prefix = (id.ToUpper())[0];
        int numLength = id.Length - 1;
        try
        {
          _number = int.Parse(id.Substring(1, numLength > 6 ? 6 : numLength));
        }
        catch (FormatException)
        {
          throw new EmployeeIdException("Invalid EmployeeId format");
        }
      }
      public override string ToString() => _prefix.ToString() + $"{number,6:00000
0}";
      public override int GetHashCode() => (number ^ number 
        (prefix == other? .prefix && number == other? .number);
      public override bool Equals(object obj) => Equals((EmployeeId)obj);
      public static bool operator ==(EmployeeId left, EmployeeId right) =>
        left.Equals(right);
      public static bool operator ! =(EmployeeId left, EmployeeId right) =>
        !(left == right);
    }
由IEquatable接口定义的Equals（）方法比较两个EmployeeId对象的值，如果这两
个值相同，它就返回true。除了实现IEquatable接口中的Equals（）方法之外，还可以
重写Object类中的Equals（）方法。
    public bool Equals(EmployeeId other) =>
      (prefix == other.prefix && number == other.number);
由于数字是可变的，因此员工可以取1～190 000的一个值。这并没有填满整数取值范
围。GetHashCode（）方法使用的算法将数字向左移动16位，再与原来的数字进行异或操
作，最后将结果乘以十六进制数15051505。散列代码在整数取值区域上的分布相当均匀：
    public override int GetHashCode() => (number ^ number  $"{id.ToString()}: {name, -20} {salary
:C}";
    }
在示例应用程序的Main（）方法中，创建一个新的Dictionary实例，
其中键是EmployeeId类型，值是Employee类型。构造函数指定了31个元素的容量。注意容
量一般是素数。但如果指定了一个不是素数的值，也不需要担心。Dictionary类会使用传递给构造函数的整数后面紧接着的一个素数来指定容量。创建员工对
象和ID后，就使用新的字典初始化语法把它们添加到新建的字典中。当然，也可以调用
字典的Add（）方法添加对象（代码文件DictionarySample/Program.cs）：
    public static void Main()
    {
      var employees = new Dictionary(31);
      var idTony = new EmployeeId("C3755");
      var tony = new Employee(idTony, "Tony Stewart", 379025.00m);
      var idCarl = new EmployeeId("F3547");
      var carl = new Employee(idCarl, "Carl Edwards", 403466.00m);
      var idKevin = new EmployeeId("C3386");
      var kevin = new Employee(idKevin, "Kevin Harwick", 415261.00m);
      var idMatt = new EmployeeId("F3323");
      var matt = new Employee(idMatt, "Matt Kenseth", 1589390.00m);
      var idBrad = new EmployeeId("D3234");
      var brad = new Employee(idBrad, "Brad Keselowski", 322295.00m);
      var employees = new Dictionary(31)
      {
        [idTony] = tony,
        [idCarl] = carl,
        [idKevin] = kevin,
        [idMatt] = matt,
        [idBrad] = brad
      };
      foreach (var employee in employees.Values)
      {
        WriteLine(employee);
      }
将数据项添加到字典中后，在while循环中读取字典中的员工。让用户输入一个员工
号，把该号码存储在变量userInput中。用户输入X即可退出应用程序。如果输入的键在字
典中，就使用Dictionary类的TryGetValue（）方法检查它。如果找到了该
键，TryGetValue（）方法就返回true；否则返回false。如果找到了与键关联的值，该值就
存储在employee变量中，并把该值写入控制台。
 注意： 
也可以使用Dictionary类的索引器替代
TryGetValue（）方法，来访问存储在字典中的值。但是，如果没有找到键，索引器会
抛出一个KeyNotFound-Exception类型的异常。
    while (true)
    {
      Write("Enter employee id (X to exit)> ");
      var userInput =ReadLine();
      userInput = userInput.ToUpper();
      if (userInput == "X") break;
      EmployeeId id;
      try
      {
        id = new EmployeeId(userInput);
        Employee employee;
        if (! employees.TryGetValue(id, out employee))
        {
          WriteLine($"Employee with id {id} does not exist");
        }
        else
        {
          WriteLine(employee);
        }
      }
      catch (EmployeeIdException ex)
      {
        WriteLine(ex.Message);
      }
    }
运行应用程序，得到如下输出：
    Enter employee id (X to exit)> C3386
    C003386: Kevin Harwick       $415,261.00
    Enter employee id (X to exit)> F3547
    F003547: Carl Edwards        $403,466.00
    Enter employee id (X to exit)> X
    Press any key to continue . . .
11.8.4 Lookup类
Dictionary类支持每个键关联一个值。Lookup类非
常类似于Dictionary类，但把键映射到一个值集合上。这个类在程序集
System.Core中实现，用System.Linq名称空间定义。
Lookup类不能像一般的字典那样创建，而必须调用ToLookup（）
方法，该方法返回一个Lookup对象。ToLookup（）方法是一个扩展方
法，它可以用于实现IEnumerable接口的所有类。在下面的例子中，填充了一个Racer
对象列表。因为List类实现了IEnumerable接口，所以可以在赛车手列表上调用
ToLookup（）方法。这个方法需要一个Func类型的委托，Func类型定义了键的选择器。这里使用lambda表达式r => r.Country，根据国家来选择赛
车手。foreach循环只使用索引器访问来自澳大利亚的赛车手（代码文件
LookupSample/Program.cs）。
    var racers = new List();
    racers.Add(new Racer("Jacques", "Villeneuve", "Canada", 11));
    racers.Add(new Racer("Alan", "Jones", "Australia", 12));
    racers.Add(new Racer("Jackie", "Stewart", "United Kingdom", 27));
    racers.Add(new Racer("James", "Hunt", "United Kingdom", 10));
    racers.Add(new Racer("Jack", "Brabham", "Australia", 14));
    var lookupRacers = racers.ToLookup(r => r.Country);
    foreach (Racer r in lookupRacers["Australia"])
    {
      WriteLine(r);
    }
  注意： 扩展方法详见第13章，lambda表达式参见第9章。
结果显示了来自澳大利亚的赛车手：
    Alan Jones
    Jack Brabham
11.8.5 有序字典
SortedDictionary是一个二叉搜索树，其中的元素根据键来排序。该键
类型必须实现IComparable接口。如果键的类型不能排序，则还可以创建一个实现
了IComparer 接口的比较器，将比较器用作有序字典的构造函数的一个参数。
SortedDictionary和SortedList的功能类似。但因为
SortedList实现为一个基于数组的列表，而SortedDictionary
类实现为一个字典，所以它们有不同的特征。
● SortedList使用的内存比SortedDictionary少。
● SortedDictionary的元素插入和删除操作比较快。
● 在用已排好序的数据填充集合时，若不需要修改容量，SortedList就
比较快。
  注意： SortedList使用的内存比SortedDictionary少，但SortedDictionary在插入
和删除未排序的数据时比较快。
11.9 集
包含不重复元素的集合称为“集（set）”。.NET 
Framework包含两个集（HashSet
和SortedSet），它们都实现ISet接口。HashSet集包含不重复元素的无序列
表，SortedSet集包含不重复元素的有序列表。
ISet接口提供的方法可以创建合集、交集，或者给出一个集是另一个集的超集或
子集的信息。
在下面的示例代码中，创建了3个字符串类型的新集，并用一级方程式汽车填充它
们。HashSet集实现ICollection接口。但是在该类中，Add（）方法是显式实现
的，还提供了另一个Add（）方法。Add（）方法的区别是返回类型，它返回一个布尔
值，说明是否添加了元素。如果该元素已经在集中，就不添加它，并返回false（代码文件
SetSample/Program.cs）。
    var companyTeams = new HashSet()
    { "Ferrari", "McLaren", "Mercedes" };
    var traditionalTeams = new HashSet() { "Ferrari", "McLaren" };
    var privateTeams = new HashSet()
    { "Red Bull", "Toro Rosso", "Force India", "Sauber" };
    if (privateTeams.Add("Williams"))
    {
      WriteLine("Williams added");
    }
    if (! companyTeams.Add("McLaren"))
    {
      WriteLine("McLaren was already in this set");
    }
两个Add（）方法的输出写到控制台上：
    Williams added
    McLaren was already in this set
IsSubsetOf（）和IsSupersetOf（）方法比较集和实现了IEnumerable接口的集合，
并返回一个布尔结果。这里，IsSubsetOf（）方法验证traditionalTeams集合中的每个元素
是否都包含在companyTeams集合方法中，IsSupersetOf（）方法验证traditionalTeams集合
是否有companyTeams集合没有的额外元素。
    if (traditionalTeams.IsSubsetOf(companyTeams))
    {
      WriteLine("traditionalTeams is subset of companyTeams");
    }
    if (companyTeams.IsSupersetOf(traditionalTeams))
    {
      WriteLine("companyTeams is a superset of traditionalTeams");
    }
这个验证的结果如下：
    traditionalTeams is a subset of companyTeams
    companyTeams is a superset of traditionalTeams
Williams也是一个传统队，因此这个队添加到traditionalTeams集合中：
    traditionalTeams.Add("Williams");
    if (privateTeams.Overlaps(traditionalTeams))
    {
      WriteLine("At least one team is the same with traditional and private teams
");
    }
因为有一个重叠，所以结果如下：
    At least one team is the same with traditional and private teams.
调用UnionWith（）方法，把引用新SortedSet的变量allTeams填充为
companyTeams、privateTeams和traditionalTeams的合集：
    var allTeams = new SortedSet(companyTeams);
    allTeams.UnionWith(privateTeams);
    allTeams.UnionWith(traditionalTeams);
    WriteLine();
    WriteLine("all teams");
    foreach (var team in allTeams)
    {
      WriteLine(team);
    }
这里返回所有队，但每个队都只列出一次，因为集只包含唯一值。因为容器是
SortedSet，所以结果是有序的：