        records = await context.SaveChangesAsync();
        }
        WriteLine($"{records} record updated");
      }
      WriteLine();
    }
38.2.6 删除记录
最后，清理数据库，删除所有记录。为此，可以检索所有记录，并调用Remove或
RemoveRange方法，把上下文中对象的状态设置为删除。现在调用SaveChangesAsync方
法，从数据库中删除记录，并为每一个对象调用SQL Delete语句（代码文件BooksSample /
Program. cs）：
    private async Task DeleteBooksAsync()
    {
      using (var context = new BooksContext())
      {
        var books = context.Books;
        context.Books.RemoveRange(books);
        int records = await context.SaveChangesAsync();
        WriteLine($"{records} records deleted");
      }
      WriteLine();
    }
  注意： 对象-关系映射工具，如Entity Framework，并不适用于所有场景。使
用示例代码删除所有对象不那么高效。使用单个SQL语句可以删除所有记录，而不是为
每一记录使用一个语句。具体操作参见第37章。
了解了如何添加、查询、更新和删除记录，本章后面将介绍后台的功能，讨论使用
Entity Framework的高级场景。
38.3 使用依赖注入
Entity 
Framework 
Core 
1.0内置了对依赖注入的支持。它不是定义连接并利用
DbContext派生类来使用SQL Server，而是使用依赖注入框架来注入连接和SQL Server选
项。
为了看到其操作，前面的示例用BooksSampleWithDI示例项目进行修改。
这个示例使用以下依赖项和名称空间：
依赖项
    NETStandard.Library
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.SqlServer
    Microsoft.Framework.DependencyInjection
名称空间
    Microsoft.EntityFrameworkCore
    System.Linq
    System.Threading.Tasks
    static System.Console
BooksContext类现在看起来要简单许多，只是定义Books属性（代码文件
BooksSampleWithDI/BooksContext.cs）：
    public class BooksContext: DbContext
    {
    public Books Context(DbContextOptions options)
      : base(options)
    {
    }
      public DbSet Books { get; set; }
    }
BooksService是利用BooksContext的新类。在这里，BooksContext通过构造函数注入功
能来注入。方法AddBooksAsync和ReadBooks非常类似于前面的示例，但是它们使用
BooksService类的上下文成员，而不是创建一个新的上下文（代码文件
BooksSampleWithDI / BooksService.cs）：
      public class BooksService
      {
        private readonly BooksContext _booksContext;
        public BooksService(BooksContext context)
        {
          _booksContext = context;
        }
        public async Task AddBooksAsync()
        {
          var b1 = new Book
          {
          Title = "Professional C# 5 and .NET 4.5.1",
          Publisher = "Wrox Press"
          };
          var b2 = new Book
          {
          Title = "Professional C# 2012 and .NET 4.5",
          Publisher = "Wrox Press"
          };
          var b3 = new Book
          {
          Title = "JavaScript for Kids",
          Publisher = "Wrox Press"
          };
          var b4 = new Book
          {
          Title = "Web Design with HTML and CSS",
          Publisher = "For Dummies"
          };
          _booksContext.AddRange(b1, b2, b3, b4);
          int records = await _booksContext.SaveChangesAsync();
          WriteLine($"{records} records added");
        }
        public void ReadBooks()
        {
          var books = _booksContext.Books;
          foreach (var b in books)
          {
          WriteLine($"{b.Title} {b.Publisher}");
          }
          WriteLine();
        }
      }
依赖注入框架的容器在InitializeServices方法中初始化。这里创建了ServiceCollection
实例，在这个集合中添加BooksService类，并进行短暂的生命周期管理。这样，每次请求
这个服务时，就实例化ServiceCollection。为了注册Entity Framework和SQL Server，可以
使用扩展方法AddEntityFramework、AddSqlServer和AddDbContext。AddDbContext方法需
要一个Action委托作为参数，来接收DbContextOptionsBuilder参数。有了这个选项参数，
上下文可以使用UseSqlServer扩展方法来配置。这类似于前面示例中用Entity Framework注
册SQL Server的功能（代码文件BooksSampleWithDI /Program.cs）：
    private void InitializeServices()
    {
      const string ConnectionString =
        @"server=(localdb)\MSSQLLocalDb; database=Books; trusted_connection=true"
;
      var services = new ServiceCollection();
      services.AddTransient();
      services.AddEntityFramework()
        .AddSqlServer()
        .AddDbContext(options =>
        options.UseSqlServer(ConnectionString));
      Container = services.BuildServiceProvider();
    }
    public IServiceProvider Container { get; private set; }
服务的初始化以及使用BooksService在Main（）方法中完成。通过调用
IServiceProvider的GetService（）方法检索BooksService （代码文件BooksSampleWithDI /
Program. cs）：
    static void Main()
    {
      var p = new Program();
      p.InitializeServices();
      var service = p.Container.GetService();
      service.AddBooksAsync().Wait();
      service.ReadBooks();
    }
运行应用程序时，可以看到，在Books数据库中添加和读取记录。
  注意： 依赖注入和Microsoft.Framework.DependencyInjection包的信息详见第
31章，其操作参见第40章和第41章。
38.4 创建模型
本章的第一个例子映射到一个表。第二个例子展示了如何创建表之间的关系。本节不
是使用SQL DDL语句（或通过设计器）创建数据库，而是使用C#代码来创建数据库。
示例应用程序MenusSample利用以下依赖项和名称空间：
依赖项
    NETStandard.Library
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.SqlServer
名称空间
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.ChangeTracking
    System
    System.Collections.Generic
    System.ComponentModel.DataAnnotations
    System.ComponentModel.DataAnnotations.Schema
    System.Linq
    System.Threading
    System.Threading.Tasks
    static System.Console
38.4.1 创建关系
下面开始创建模型。示例项目使用MenuCard和Menu类型定义了一对多关系。
MenuCard包含Menu对象的列表。这个关系由List类型的Menu属性定义（代码文件
MenusSample/MenuCard.cs）：
    public class MenuCard
    {
      public int MenuCardId { get; set; }
      public string Title { get; set; }
      public List Menus { get; } = new List();
      public override string ToString() => Title;
    }
也可以在另一个方向上访问关系，Menu可以使用MenuCard属性访问MenuCard。指定
MenuCardId属性来定义一个外键关系（代码文件MenusSample / Menu.cs）：
    public class Menu
    {
      public int MenuId { get; set; }
      public string Text { get; set; }
      public decimal Price { get; set; }
      public int MenuCardId { get; set; }
      public MenuCard MenuCard { get; set; }
      public override string ToString() => Text;
    }
到数据库的映射是通过MenusContext类实现的。这个类的定义类似于前面的上下文类
型；它只包含两个属性，映射两个对象类型：Menus和MenuCards属性（代码文件
MenusSamples/Menus-Context.cs）：
    public class MenusContext: DbContext
    {
      private const string ConnectionString = @"server=(localdb)\MSSQLLocalDb; " 
+
        "Database=MenuCards; Trusted_Connection=True";
      public DbSet Menus { get; set; }
      public DbSet MenuCards { get; set; }
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilde
r)
      {
        base.OnConfiguring(optionsBuilder);
        optionsBuilder.UseSqlServer(ConnectionString);
      }
    }
38.4.2 用.NET CLI迁移
为了使用C#代码自动创建数据库，可以使用包dotnet-ef工具扩展.NET CLI工具。这个
包包含为迁移创建C#代码的命令。安装NuGet包dotnet-ef，会使命令可用。安装它时，要
在项目配置文件中从工具部分引用这个包（代码文件MenusSample / project. json）：
    "tools": {
      "Microsoft.EntityFramework Core.tools":{
      "Version":"1.0.0-＊",
      "imports":"Portable-net452+Win81"
      }
    }
通过ef命令，它提供了命令database、dbcontext和migrations。database命令用于把数据
库升级到特定的迁移状态。dbcontext命令列出项目中所有的DbContext派生类型
（dbcontext list），它从数据库中创建上下文和实体（dbcontext scaffold）。migrations命
令允许创建和删除迁移，创建一个SQL脚本，用所有的迁移数据创建数据库。如果生产数
据库只能使用SQL代码从SQL管理器中创建和修改，就可以把生成的脚本提交到SQL管理
器。
为了创建一个初始迁移，从代码中创建数据库，可以在开发命令提示符中调用下面的
命令。这个命令会创建一个名为InitMenuCards的迁移：
    >dotnet ef migrations add InitMenuCards
migrations add命令使用反射访问DbContext派生类，接着访问引用的模型类型。根据
这些信息，它创建了两个类，来创建和更新数据库。通过Menu、MenuCard和
MenusContext类，创建两个类MenusContextModelSnapshot和InitMenuCards。命令成功
后，这两个类型在Migrations文件夹中。
MenusContextModelSnapshot类包含建立数据库的模型的当前状态：
    [DbContext(typeof(MenusContext))]
    partial class MenusContextModelSnapshot: ModelSnapshot
    {
      protected override void BuildModel(ModelBuilder modelBuilder)
      {
        modelBuilder
        .HasAnnotation("ProductVersion", "7.0.0-rc1-16348")
        .HasAnnotation("SqlServer:ValueGenerationStrategy",
          SqlServerValueGenerationStrategy.IdentityColumn);
        modelBuilder.Entity("MenusSample.Menu", b =>
        {
          b.Property("MenuId")
          .ValueGeneratedOnAdd();
          b.Property("MenuCardId");
          b.Property("Price");
          b.Property("Text");
          b.HasKey("MenuId");
        });
        modelBuilder.Entity("MenusSample.MenuCard", b =>
        {
          b.Property("MenuCardId")
          .ValueGeneratedOnAdd();
          b.Property("Title");
          b.HasKey("MenuCardId");
        });
        modelBuilder.Entity("MenusSample.Menu", b =>
        {
          b.HasOne("MenusSample.MenuCard")
          .WithMany()
          .HasForeignKey("MenuCardId");
        });
      }
    }
InitMenuCards类定义了Up和Down方法。Up方法列出了创建MenuCard和Menu表所需
的所有操作，包括主键、列和关系。Down方法删除两个表：
        public partial class InitMenuCards: Migration
        {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
          migrationBuilder.CreateTable(
            name: "MenuCard",
            columns: table => new
            {
              MenuCardId = table.Column(nullable: false)
                .Annotation("SqlServer:ValueGenerationStrategy",
                SqlServerValueGenerationStrategy.IdentityColumn),
              Title = table.Column(nullable: true)
            },
            constraints: table =>
            {
              table.PrimaryKey("PK_MenuCard", x => x.MenuCardId);
            });
          migrationBuilder.CreateTable(
            name: "Menu",
            columns: table => new
            {
              MenuId = table.Column(nullable: false)
                .Annotation("SqlServer:ValueGenerationStrategy",
                SqlServerValueGenerationStrategy.IdentityColumn),
              MenuCardId = table.Column(nullable: false),
              Price = table.Column(nullable: false),
              Text = table.Column(nullable: true)
            },
            constraints: table =>
            {
              table.PrimaryKey("PK_Menu", x => x.MenuId);
              table.ForeignKey(