>>> f = make()
>>> dis.dis(f)
3 0 LOAD_GLOBAL 0 (print)
2 LOAD_DEREF 0 (x)
4 CALL_FUNCTION 1
6 RETURN_VALUE
自由变量
我们将闭包所引⽤环境变量称为⾃由变量（free variable）。在创建函数对象时，它被保存
到 __closure__ 属性。
def make():
x = [1, 2]
print(hex(id(x)))
return lambda: print(x)
>>> f = make()
0x10eeae108
>>> f.__closure__
(,)
>>> f()
[1, 2]
!157
学习笔记 . 第三版
所引⽤⾃由变量名，可通过代码对象属性获取。
>>> f.__code__.co_freevars # 所引⽤用外部⾃自由变量量名列列表。
('x',)
>>> make.__code__.co_cellvars # 被闭包函数引⽤用的变量量名列列表。
('x',)
⾃由变量保存在函数对象⾥，那多次调⽤是否被覆盖？⾃然不会，因为所返回函数对象也
是每次新建。要知道，创建闭包等于 “新建函数对象，附加⾃由变量”。
def make(x):
return lambda: print(x)
>>> a = make([1, 2])
>>> b = make(100)
>>> a is b # 每次返回新的函数对象实例例。
False
>>> a.__closure__ # ⾃自由变量量保存在各⾃自独⽴立的函数实例例。
(,)
>>> b.__closure__
(,)
多个函数可共享同⼀⾃由变量。
def queue():
data = []
push = lambda x: data.append(x)
pop = lambda: data.pop(0) if data else None
return push, pop
>>> push, pop = queue()
>>> push.__closure__
(,) # 共享⾃自由变量量。
!158
学习笔记 . 第三版
>>> pop.__closure__
(,)
>>> for i in range(10, 13):
push(i)
>>> while True:
x = pop()
if not x: break
print(x)
10
11
12
闭包让函数持有状态，可部分实现 class 功能。但应局限于特定⼩范围，避免隐式状态依赖对代
码测试、阅读和维护造成⿇烦。
自引用
在函数内引⽤⾃⼰，也可构成闭包。
原因很简单，def 创建函数对象，然后将其与函数名字关联。也就是说，该函数实例也属
当前环境变量，⾃然可作为⾃由变量。
def make(x):
def test():
test.x = x # 引⽤用⾃自⼰己。
print(test.x) # 引⽤用的是当前函数实例例，其效果类似 this。
return test
>>> a, b = make(1234), make([1, 2])
>>> a.__closure__
(, # ⾃自由变量量列列表中包含⾃自⼰己。
)
!159
学习笔记 . 第三版
>>> b.__closure__
(,
)
在函数内引⽤⾃⼰时，从 DEREF 载⼊。⾃然是专属实例，⽆须担⼼数据共享。
>>> dis.dis(a)
3 0 LOAD_DEREF 1 (x)
2 LOAD_DEREF 0 (test)
4 STORE_ATTR 0 (x)
4 6 LOAD_GLOBAL 1 (print)
8 LOAD_DEREF 0 (test)
10 LOAD_ATTR 0 (x)
12 CALL_FUNCTION 1
14 POP_TOP
16 LOAD_CONST 0 (None)
18 RETURN_VALUE
>>> a()
1234
>>> b()
[1, 2]
延迟绑定
闭包只是绑定⾃由变量（⾮引⽤⽬标），并不会⽴即计算其引⽤内容。只有当闭包函数执
⾏时，才与所引⽤⽬标对象交互。如此，就有所谓延迟绑定（late binding）现象。
def make(n):
x = []
for i in range(n):
x.append(lambda: print(i))
return x
>>> a, b, c = make(3)
!160
学习笔记 . 第三版
>>> a(), b(), c()
2
2
2
>>> a.__closure__
(,)
>>> b.__closure__
(,)
>>> c.__closure__
(,)
输出结果不是 0, 1, 2 ？
整理⼀下执⾏次序：
1. make 创建并返回 3 个闭包函数，引⽤同⼀⾃由变量 i。
2. make 执⾏结束，i 等于 2。
3. 执⾏闭包函数，引⽤并输出 i 的值，⾃然都是 2。
就这么简单？
从 __closure__ 看，函数并不直接存储⾃由变量，⽽是 cell 包装对象，以此间接引⽤⽬标。每个
⾃由变量都被打包成⼀个 cell。循环期间虽然也和 i ⼀样引⽤不同整数对象，但这对尚未执⾏的
闭包函数没有影响。循环结束，cell 引⽤⽬标确定下来，这才是闭包函数执⾏时输出结果。
按其他语⾔经验，解决延迟绑定问题，要么⽴即复制，要么引⽤不同⾃由变量。但改成复
制后，结果并不如⼈意。
def make(n):
x = []
for i in range(n):
c = i # 复制对象？其实并不不是，这是个坑。
x.append(lambda: print(c))
return x
>>> a, b, c = make(3)
!161
学习笔记 . 第三版
>>> a(), b(), c()
2
2
2
未能得到预期结果。原因并不复杂，变量 c 的作⽤域是 make 函数，⽽⾮ for 语句。也就是说，
不管执⾏多少次循环，也仅有⼀个 c 存在。如此，闭包函数依然绑定同⼀⾃由变量，这与复制⽬
标对象⽆关。
这是不同语⾔作⽤域规则不同⽽导致的经验错误。
>>> a.__closure__
(,) # 仍是同⼀一对象。
>>> b.__closure__
(,)
>>> c.__closure__
(,)
顺着这个思路，我们可换个坚决不共享的变量来，⽐如默认值。
def make(n):
x = []
for i in range(n):
x.append(lambda o = i: print(o))
return x
>>> a, b, c = make(3)
>>> a(), b(), c()
0
1
2
问题解决了。因为匿名函数参数 o 是私有变量，设置默认值时，复制当前 i 引⽤。虽然只有⼀个
变量 i，但循环过程中，它指向不同整数对象。所以，复制的引⽤也就不同。
最重要的是，这样⼀来，就没有闭包了。^_^
!162
学习笔记 . 第三版
>>> a.__closure__
>>> b.__closure__
>>> c.__closure__
>>> make.__code__.co_cellvars
()
优缺点
闭包的缺点可能和优点⼀样明显。
具备封装特征，可实现隐式上下⽂状态，并减少参数。在设计上，可部分替代全局变量，
或将执⾏环境与调⽤接⼜分离。
⾸要缺点，对⾃由变量隐式依赖，会提升代码复杂度，直接影响测试和维护。其次，⾃由
变量⽣命周期的提升，会提⾼内存占⽤。
应控制隐式依赖的范围和规模，能省则省。
!163
学习笔记 . 第三版
6. 调用
在前⽂不同章节⾥，多次提及字节码解释执⾏。那么当函数被调⽤时，具体情形如何？
整个系统核⼼是称为解释器（interpreter）的组件。这东西从代码看很是疯狂，重度肥胖
函数，外加超⼤循环。让我们抛开技术名词，⽤个例⼦来说明其中的关系。
假设解释器是台 ATM 取款机。当储户发出 “取款” 指令（字节码），机器触发预置功能列
表中与之对应的操作，以银⾏卡为参数，检查并修改账户数据，然后出钞。所谓指令不过
是内部某个功能的 “名字” ⽽已，仅作为选择条件，并不参与机器执⾏。
字节码 interpreter
code
evalcode
loop
状态
func
{
LOAD : C API
堆栈帧 STORE: C API
frame }
在解释器内部，每条字节码指令对应⼀个完全由 C 实现的逻辑。
解释器运⾏在系统线程上，那如何处理内部系统代码和⽤户代码数据？从反汇编结果看，
就算字节码指令被解释为内部调⽤，可依然有参数和返回值需要存储。
继续以上⾯例⼦解释，这⾥实际有两个存储空间，机器内部（系统栈）和储户钱包（⽤户
栈）。取款时，银⾏卡从钱包传递到机器，最后连同钞票放回钱包。在操作完成后，机器
准备下次交易，本次数据可被清除。与⽤户相关数据都在钱包内。所以说，系统栈⽤于机
器执⾏，⽤户栈才是⽤户代码专⽤。
当函数被调⽤时，会专门为其分配⽤户栈内存。除⽤来存储变量外，还包括字节码参数和
返回值所需。对系统指令来说，这⾥只能存放⽤户指令数据。如此，两⽅各有所属，确保
数据互不影响。
def add(a, b):
!164
学习笔记 . 第三版
c = a + b
return c
>>> dis.dis(add)
2 0 LOAD_FAST 0 (a) # 从 FAST 读取参数 a，压⼊入⽤用户栈。
2 LOAD_FAST 1 (b) # 从 FAST 读取参数 b，压⼊入⽤用户栈。
4 BINARY_ADD # 系统指令从⽤用户栈读取操作数，执⾏行行加法操作。
6 STORE_FAST 2 (c) # 将结果写回 FAST。
3 8 LOAD_FAST 2 (c)
10 RETURN_VALUE
interpreter
C API
BINARY_ADD
User Stack
STORE_FAST
System Stack
最后，编译器没有函数内联（inline），没有深度优化。即便是空函数，依旧⽣成字节码
指令，需要解释器执⾏。
解释器命令⾏参数 -O 和 -OO，并⾮编译指令优化开关，⽽是为了移除调试代码和帮助⽂档。
>>> code ="""
def test(): pass
test()
"""
>>> dis.dis(compile(code, "", "exec", optimize = 2)) # 启⽤用 -OO 优化⽅方式。
2 0 LOAD_CONST 0 ()
2 LOAD_CONST 1 ('test')
4 MAKE_FUNCTION 0 # 创建函数。
6 STORE_NAME 0 (test)
3 8 LOAD_NAME 0 (test)
10 CALL_FUNCTION 0 # 调⽤用函数。
12 POP_TOP
14 LOAD_CONST 2 (None)
!165
学习笔记 . 第三版
16 RETURN_VALUE
调用堆栈
我们通常将进程内存分作堆（heap）和栈（stack）两类。堆可⾃由申请，通过指针存储⾃
由数据。⽽栈则⽤于指令执⾏，与线程相绑定。函数调⽤和执⾏都依赖线程栈存储上下⽂
和执⾏状态。
在函数 A 内调⽤函数 B，须确保 B 结束后能回转到 A，继续执⾏后续指令。这就要求将 A
后续指令地址预先存储起来，调⽤堆栈（call stack）基本⽤途就在如此。
除返回地址外，还需为函数提供参数、局部变量存储空间。依不同调⽤约定，甚⾄要为被
调⽤函数提供参数和返回值内存。显然，在线程栈这块内存⾥，每个被调⽤函数都划有⼀
块保留地，我们将其称作栈帧（stack frame）。
参数、变量存储 字节码指令执行内存
Frame FAST, DEREF STACK
localplus SP: stacktop
BP: valuestack
基于栈式虚拟机（Stack-based VM）设计的字节码指令集，没有寄存器相关概念，内部使⽤变量
实现类似 SP、BP、PC/IP 寄存器功能。
因解释执⾏缘故，字节码指令数据使⽤独⽴的⽤户栈空间。且与系统栈连续内存不同，⽤
户栈帧由独⽴对象实现，以链表形式构成完整调⽤堆栈。好处是不受系统栈⼤⼩制约，缺