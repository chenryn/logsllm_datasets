Intel SGX design therefore includes a trusted Quoting En-
clave (QE) [2,10] to validate local attestation reports, and
sign them with an asymmetric private key. The resulting
Figure 6: SGX Quoting Enclave for remote attestation.
signed attestation report, or quote, can now be veriﬁed by
a remote party via the corresponding public key.
Intel imposes itself as a trusted third party in the at-
testation process. To address privacy concerns, QE im-
plements Intel’s Enhanced Privacy Identiﬁer (EPID) [34]
group signature scheme. An EPID group covers millions
of CPUs of the same type (e.g., core i3, i5, i7) and security
version number. In fully anonymous mode, the cryptosys-
tem ensures that remote parties can verify quotes from
genuine SGX-enabled platforms, without being able to
track individual CPUs within a group or recognize pre-
viously veriﬁed platforms. In pseudonymous mode, on
the other hand, remote veriﬁers can link different quotes
from the same platform.
Figure 6 outlines the complete SGX remote attestation
procedure. In an initial platform conﬁguration phase A ,
Intel deploys a dedicated Provisioning Enclave (PE) to
request an EPID private key, from here on referred to as
the platform attestation key, from the remote Intel Provi-
sioning Service. Upon receiving the attestation key, PE
derives an author-based provisioning seal key in order
to securely store B the long-term attestation key on un-
trusted storage. For a successful enclave attestation, the
remote veriﬁer issues 1 a challenge, and the enclave ex-
ecutes 2 the ereport instruction to bind the challenge
to its identity. The untrusted application context now for-
wards 3 the local attestation report to QE, which derives
4 its report key to validate the report’s integrity. Next,
QE derives the provisioning seal key to decrypt 5 the
platform attestation key received from system software.
QE signs 6 the local attestation report to convert it into a
quote. Upon receiving the attestation response, the remote
veriﬁer ﬁnally submits 7 the quote to Intel’s Attestation
Service for veriﬁcation using the EPID group public key.
Attack and Exploitation. Remote attestation, as im-
plemented by the SGX Quoting Enclave4, relies on two
pillars. First, QE relies on the infallibility of SGX’s lo-
cal attestation mechanism. An attacker getting hold of
QE’s report key can make QE sign arbitrary enclave mea-
surements, effectively turning QE into a signing oracle.
4 libsgx_qe.signed.so from Intel SGX Linux SDK v2.0 with
product ID 0x01 and security version number 0x05.
USENIX Association
27th USENIX Security Symposium    1003
Second, QE relies on SGX’s sealing mechanism to se-
curely store the asymmetric attestation key. Should the
platform provisioning seal key leak, an attacker can get
hold of the long-term attestation key and directly sign
rogue enclave reports herself. We exploited both options
to show how Foreshadow can adaptively dismantle differ-
ent SGX primitives.
As with the LE attack, illustrated in Fig. 5, both our QE
key extraction exploits target the sgx_get_key trusted
runtime function. We again constructed a carefully crafted
page fault state machine to deterministically preempt the
QE execution between the egetkey invocation and the
key buffer being overwritten. As with the LE exploit, our
ﬁnal attack does not rely on advanced single-stepping or
eldu prefetching techniques, and achieves a 100% suc-
cess rate in practice. That is, our exploit reliably extracts
the full 128-bit report and provisioning seal keys from a
single QE run suffering 14 page faults in total.
We validated the correctness of the extracted keys by
fabricating bogus local attestation reports, using a previ-
ously extracted QE report key, and successfully ordering
the genuine Intel QE to sign them. Alternatively, we cre-
ated a rogue quoting service that uses the leaked platform
provisioning seal key to get hold of the long-term attesta-
tion key for signing. This allows an attacker to fabricate
arbitrary remote attestation responses directly, without
even executing QE on the victim platform.
Impact. The ability to spoof remote attestation re-
sponses has profound consequences. Attestation is typ-
ically the ﬁrst step to establish a secure communication
channel, e.g., via an authenticated Difﬁe-Hellman key
exchange [2]. Using our rogue quoting service, a network-
level adversary (e.g., the untrusted host application) can
trivially establish a man-in-the-middle position to read
plus modify all trafﬁc between a victim enclave and a
remote party. All remotely provisioned secrets can now
be intercepted, without even executing the victim enclave
or requiring detailed knowledge of its internals — effec-
tively rendering SGX-based DRM or privacy-preserving
analytics [44, 50] applications useless. Apart from such
conﬁdentiality concerns, adversaries can furthermore fab-
ricate arbitrary remote SGX computation results. This
observation rules out transparent, integrity-only enclaved
execution paradigms [56], and directly threatens an emerg-
ing ecosystem of untrusted cloud environments [4] and
innovative blockchain technologies [25].
Intel’s EPID [34] group signature scheme implemented
by QE makes matters even worse. That is, in fully anony-
mous mode, obtaining a single EPID private key sufﬁces
to forge signatures for the entire group containing mil-
lions of SGX-capable Intel CPUs. Alarmingly, this allows
us to use the platform attestation key extracted from our
lab machine to forge anonymous attestations for enclaves
running on remote platforms we don’t even have code
execution on. This does fortunately not hold for the ofﬁ-
cially recommended [34] pseudonymous mode, however,
as remote stakeholders would recognize our fabricated
quotes as coming from a different platform.
6 Discussion and Mitigations
Impact of Our Findings. Concurrent research on tran-
sient execution attacks [15, 24, 36, 40, 42] revealed funda-
mental ﬂaws in the way current CPUs implement specula-
tive out-of-order execution. So far, the focus of these at-
tacks has been on breaching traditional kernel-level mem-
ory isolation barriers from an unprivileged user space
process. Our work shows, however, that Meltdown-type
CPU vulnerabilities also apply to non-hierarchical intra-
address space isolation, as provided by modern Intel x86
SGX technology. This ﬁnding has profound consequences
for the development of adequate defenses. The widely-
deployed software-only KAISER [19] defense falls short
of protecting enclave programs against Foreshadow adver-
saries. Indeed, page table isolation mitigations are ruled
out, for SGX explicitly distrusts the operating system
kernel, and enclaves live within the address space of an
untrusted host process.
We want to emphasize that Foreshadow exploits a mi-
croarchitectural implementation bug, and does not in any
way undermine the architectural design of Intel SGX
and TEEs in general. We strongly believe that the non-
hierarchical protection model supported by these archi-
tectures is still as valuable as it was before. An impor-
tant lesson from the recent wave of transient execution
attacks including Spectre, Meltdown, and Foreshadow,
however, is that current processors exceed our levels
of understanding [3, 47]. We therefore want to urge
the research community to develop alternative hardware-
software co-designs [11, 14], as well as inspectable open-
source [47, 48] TEEs in the hopes of making future vul-
nerabilities easier to identify, mitigate, and recover from.
Mitigation Strategies. State-of-the-art enclave side-
channel hardening techniques [8, 9, 18, 52–54] offer little
protection only and cannot address the root causes of
the Foreshadow attack. These defenses commonly rely
on hardware transactional memory (TSX) support to de-
tect suspicious page fault and interrupt rates in enclave
mode, which only marginally increases the bar for Fore-
shadow attackers. First, not all SGX-capable processors
are also shipped with TSX extensions, ruling out TSX-
based hardening techniques for Intel’s critical Launch and
Quoting Enclaves. Second, since the egetkey instruction
is not allowed within a TSX transaction [27], adversaries
can always interrupt a victim enclave unnoticed after key
1004    27th USENIX Security Symposium
USENIX Association
derivation to leak secrets (similar to Fig. 5). Furthermore,
while the high interrupt rates generated by SGX-Step
would be easily recognized, stealthy exploits can limit
the number of enclave preemptions, or HyperThreading-
based Foreshadow variants can be executed concurrently
from another logical core. Finally, we showed how to
abuse SGX’s eldu instruction to extract enclaved mem-
ory secrets without even executing the victim enclave,
effectively rendering any software-only defense strategy
inherently insufﬁcient.
Only Intel is placed in a unique position to patch
hardware-level CPU vulnerabilities. They recently an-
nounced “silicon-based changes to future products that
will directly address the Spectre and Meltdown threats in
hardware [. . . ] later this year.” [37] Likewise, we expect
Foreshadow to be directly addressed with silicon-based
changes in future Intel processors. The SGX design [2]
includes a notion of TCB recovery by including the CPU
security version number in all measurements (Section 2.1).
As such, future microcode updates could in principle miti-
gate Foreshadow on existing SGX-capable processors. In
this respect, beta microcode updates [32] have recently
been distributed to mitigate Spectre, but, at the time of
this writing, no microcode patches have been released
addressing Meltdown nor Foreshadow. Given the fun-
damental nature of out-of-order CPU pipeline optimiza-
tions, we expect it may not be feasible to directly address
the Foreshadow/Meltdown access control race condition
in microcode. Alternatively, based on our ﬁndings (see
Appendix A) that Foreshadow requires enclave data to
reside in the L1 cache, we envisage a hardware-software
co-design mitigation strategy. Foreshadow-resistant en-
claves should be guaranteed that (i) both logical cores
in a HyperThreading setting execute within the same en-
clave [8,18,54], and (ii) the L1 cache is ﬂushed upon each
enclave exiting event [11].
7 Related Work
Several recent studies investigate attack surface for SGX
enclaves. Existing attacks either exploit low-level mem-
ory safety vulnerabilities [38, 59], or abuse application-
speciﬁc information leakage from side-channels. Impor-
tantly, in contrast to Foreshadow, all known attacks explic-
itly fall out-of-scope of Intel SGX’s threat model [28, 33],
and can be effectively avoided by rewriting the victim
enclave’s code to exclude such vulnerabilities.
Conventional microarchitectural side-channels [16] are,
however, considerably ampliﬁed in the context of SGX’s
strengthened attacker model. This point has been repeat-
edly demonstrated in the form of a steady stream of high-
resolution PRIME+PROBE CPU cache [6,12,17,23,46,51]
and branch prediction [13, 39] attacks against SGX en-
claves. The additional capabilities of a root-level attacker
have furthermore been leveraged to construct instruction-
granular enclave interrupt primitives [57], and to exploit
side-channel leakage from x86 memory paging [58, 60]
and segmentation [22]. Unexpected side-channels can
also arise at the application level. We for example re-
cently reported [30] a side-channel vulnerability in auto-
generated edger8r code of the ofﬁcial Intel SGX SDK.
Concurrent research [7, 49] has demonstrated proof-of-
concept Spectre-type speculation attacks against specially
crafted SGX enclaves. Both attacks rely on executing
vulnerable code within the victim enclave. Our attack, in
contrast, does not require any speciﬁc code in the victim
enclave, and can even extract memory contents without
ever executing the victim enclave. While existing work
shows vulnerable gadgets exist in the SGX SDK [7], such
Spectre-type attack surface can be mitigated by patching
the SDK. Recent Intel microcode updates furthermore ad-
dress Spectre-type attacks against SGX enclaves directly
at the hardware level, by cleansing the CPU’s branch
target buffer on every enclave entry/exit [7].
8 Conclusion
We presented Foreshadow, an efﬁcient transient execu-
tion attack that completely compromises the conﬁden-
tiality guarantees pursued by contemporary Intel SGX
technology. We contributed practical attacks against In-
tel’s trusted architectural enclaves, essentially dismantling
SGX’s local and remote attestation guarantees as well.
While, in the absence of a microcode patch, current
SGX versions cannot maintain their hardware-level se-
curity guarantees, Foreshadow does assuredly not under-
mine the non-hierarchical protection model pursued by
trusted execution environments, such as Intel SGX.
Acknowledgments. This research was partially supported
by the Research Fund KU Leuven, the Technion Hiroshi Fuji-
wara cyber security research center, the Israel cyber bureau,
by NSF awards #1514261 and #1652259, the ﬁnancial as-
sistance award 70NANB15H328 from the U.S. Department of
Commerce, National Institute of Standards and Technology, the
2017-2018 Rothschild Postdoctoral Fellowship, and the Defense
Advanced Research Project Agency (DARPA) under Contract
#FA8650-16-C-7622. Jo Van Bulck and Raoul Strackx are sup-
ported by a grant of the Research Foundation - Flanders (FWO).
References
[1] ALVES, T., AND FELTON, D. Trustzone: Integrated hardware
and software security. ARM white paper 3, 4 (2004), 18–24.
[2] ANATI, I., GUERON, S., JOHNSON, S., AND SCARLATA, V.
Innovative technology for CPU based attestation and sealing. In
Proceedings of the 2nd International Workshop on Hardware and
Architectural Support for Security and Privacy (2013), ACM.
USENIX Association
27th USENIX Security Symposium    1005
[3] BAUMANN, A. Hardware is the new software. In Proceedings
of the 16th Workshop on Hot Topics in Operating Systems (2017),
ACM, pp. 132–137.
[4] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding applica-
tions from an untrusted cloud with Haven. In USENIX Symposium
on Operating Systems Design and Implementation (2014).
[5] BRASSER, F., CAPKUN, S., DMITRIENKO, A., FRASSETTO, T.,
KOSTIAINEN, K., MÜLLER, U., AND SADEGHI, A.-R. Dr. sgx:
Hardening sgx enclaves against cache attacks with data location
randomization. arXiv preprint arXiv:1709.09917 (2017).
[6] BRASSER, F., MÜLLER, U., DMITRIENKO, A., KOSTIAINEN,
K., CAPKUN, S., AND SADEGHI, A.-R. Software grand exposure:
SGX cache attacks are practical. In 11th USENIX Workshop on
Offensive Technologies (2017), WOOT ’17, USENIX Association.
[19] GRUSS, D., LIPP, M., SCHWARZ, M., FELLNER, R., MAURICE,
C., AND MANGARD, S. Kaslr is dead: long live kaslr. In Interna-
tional Symposium on Engineering Secure Software and Systems
(2017), Springer, pp. 161–176.
[20] GRUSS, D., MAURICE, C., FOGH, A., LIPP, M., AND MAN-
GARD, S. Prefetch side-channel attacks: Bypassing smap and
kernel aslr. In Proceedings of the 2016 ACM Conference on Com-
puter and communications security (2016), ACM, pp. 368–379.
[21] GUERON, S. A memory encryption engine suitable for general
purpose processors. IACR Cryptology ePrint Archive (2016), 204.
[22] GYSELINCK, J., VAN BULCK, J., PIESSENS, F., AND STRACKX,
R. Off-limits: Abusing legacy x86 memory segmentation to spy on
enclaved execution. In Publication at the 2018 International Sym-
posium on Engineering Secure Software and Systems (ESSoS’18)
(June 2018), LNCS, Springer. (in print).
[7] CHEN, G., CHEN, S., XIAO, Y., ZHANG, Y., LIN, Z., AND LAI,
T. H. Sgxpectre attacks: Leaking enclave secrets via speculative
execution. arXiv preprint arXiv:1802.09085 (2018).
[23] HÄHNEL, M., CUI, W., AND PEINADO, M. High-resolution side
channels for untrusted operating systems. In 2017 USENIX Annual
Technical Conference (2017), ATC ’17, USENIX Association.
[8] CHEN, G., WANG, W., CHEN, T., CHEN, S., ZHANG, Y., WANG,
X., LAI, T.-H., AND LIN, D. Racing in hyperspace: Closing
hyper-threading side channels on sgx with contrived data races.
In Proceedings of the IEEE Symposium on Security and Privacy
(2018), IEEE.
[9] CHEN, S., ZHANG, X., REITER, M. K., AND ZHANG, Y. Detect-
ing privileged side-channel attacks in shielded execution with déjà
vu. In Proceedings of the 2017 Asia Conference on Computer and
Communications Security (2017), Asia CCS ’17, ACM, pp. 7–18.
[10] COSTAN, V., AND DEVADAS, S. Intel SGX explained. Cryptol-
ogy ePrint Archive, Report 2016/086, 2016.
[11] COSTAN, V., LEBEDEV, I., AND DEVADAS, S. Sanctum: Mini-
mal hardware extensions for strong software isolation. In Proceed-
ings of the 25th USENIX Security Symposium (2016), USENIX
Association.
[12] DALL, F., DE MICHELI, G., EISENBARTH, T., GENKIN, D.,
HENINGER, N., MOGHIMI, A., AND YAROM, Y. Cachequote:
Efﬁciently recovering long-term secrets of sgx epid via cache
IACR Transactions on Cryptographic Hardware and
attacks.
Embedded Systems 2018, 2 (2018), 171–191.