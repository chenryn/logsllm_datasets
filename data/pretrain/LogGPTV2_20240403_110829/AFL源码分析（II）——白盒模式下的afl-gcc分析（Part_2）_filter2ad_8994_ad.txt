此函数主要负责记录命中桩代码的次数并计算其覆盖区域。
    __afl_store:
      /* Calculate and store hit for the code location specified in ecx. There
         is a double-XOR way of doing this without tainting another register,
         and we use it on 64-bit systems; but it's slower for 32-bit ones. */
    #ifndef COVERAGE_ONLY
      movl __afl_prev_loc, %edi
      xorl %ecx, %edi
      shrl $1, %ecx
      movl %ecx, __afl_prev_loc
    #else
      movl %ecx, %edi
    #endif /* ^!COVERAGE_ONLY */
    #ifdef SKIP_COUNTS
      orb  $1, (%edx, %edi, 1)
    #else
      incb (%edx, %edi, 1)
    #endif /* ^SKIP_COUNTS */
此处代码不再使用两次异或进行赋值，因为在32位下，异或的速度要慢于直接赋值。因此此处逻辑变为：
  1. 当`COVERAGE_ONLY`标志未被设置： 
    1. 将`__afl_prev_loc(旧值)`的值存入`EDI`寄存器中。
    2. 将`EDI ^ 随机数(ECX)`即`__afl_prev_loc(旧值) ^ 随机数(ECX)`的值存入`EDI`寄存器中。
    3. 将`ECX(随机数)`中的值逻辑右移1位并存入`ECX`。
    4. 将`ECX(右移过的随机数)`存入`__afl_prev_loc`中。
  2. 若`COVERAGE_ONLY`标志被设置，直接将`ECX(随机数)`中的值存入`EDI`寄存器中。
  3. 当`SKIP_COUNTS`标志被设置，将`[EDX + EDI * 1]`的值与1进行或操作并将结果存回原处。
  4. 当`SKIP_COUNTS`标志未被设置，将`[EDX + EDI * 1]`的值增加1。
####  `__afl_return`函数
此函数主要负责AFL插入的桩代码返回。
    __afl_return:
      addb $127, %al
      sahf
      ret
与64位版本的`__afl_return`函数完全相同。
####  `__afl_setup`函数
此函数主要用于分配共享内存。
    __afl_setup:
      /* Do not retry setup if we had previous failures. */
      cmpb $0, __afl_setup_failure
      jne  __afl_return
      /* Map SHM, jumping to __afl_setup_abort if something goes wrong.
         We do not save FPU/MMX/SSE registers here, but hopefully, nobody
         will notice this early in the game. */
      pushl %eax
      pushl %ecx
      pushl $.AFL_SHM_ENV
      call  getenv
      addl  $4, %esp
      testl %eax, %eax
      je    __afl_setup_abort
      pushl %eax
      call  atoi
      addl  $4, %esp
      pushl $0          /* shmat flags    */
      pushl $0          /* requested addr */
      pushl %eax        /* SHM ID         */
      call  shmat
      addl  $12, %esp
      cmpl $-1, %eax
      je   __afl_setup_abort
      /* Store the address of the SHM region. */
      movl %eax, __afl_area_ptr
      movl %eax, %edx
      popl %ecx
      popl %eax
此处与64位代码不同，我们不再进行文件全局指针的检查并在此函数就进行共享内存的分配工作，不再经过`__afl_setup_first`函数。
  1. 检查`AFL`初始化失败计数器`__afl_setup_failure`的值是否为0，若不为0，则跳转进入`__afl_return`函数。
  2. 保存`EAX`和`ECX`的值，将它们依次入栈。 
    * 此处我们没有保存`FPU/MMX/SSE`寄存器，但是在期望状态下，此时这三类寄存器应当未被改变。 
      * `FPU`: 8个80位浮点寄存器（数据），16位状态寄存器，16位控制寄存器，16为标识寄存器。
      * `MMX`: 将8个FPU寄存器重命名为8个64位`MMX`寄存器，即`mm0`到`mm7`。[号称多媒体处理技术]
      * `SSE`: 8个128位寄存器（从`xmm0`到`xmm7`），`MXSCR`寄存器，`EFLAGS`寄存器，专有指令。（复杂浮点运算）
  3. 调用`getenv("SHM_ENV_VAR")`获取共享内存标识符，若返回空，则跳入`__afl_setup_abort`函数。
  4. 否则，将共享内存标识符入栈，并调用`atoi`将其转换为数字。
  5. 调用`shmat(EAX,0,0)`，即调用`shmat(atoi(getenv("SHM_ENV_VAR")),0,0)`来连接共享内存标识符所示的共享内存，连接成功后把共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问。
  6. 检查`shmat()`的返回值是否为`-1`，若为`-1`则表示共享内存分配失败，跳入`__afl_setup_abort`函数。
  7. 将附加好的共享内存地址存入`EDX`寄存器以及`__afl_area_ptr`中
  8. 从栈中恢复`EAX`和`ECX`的值。
####  `__afl_forkserver`函数
此函数主要用于栈内存对齐以及向状态管道写入四字节以告知父进程已经准备好了。
    __afl_forkserver:
      /* Enter the fork server mode to avoid the overhead of execve() calls. */
      pushl %eax
      pushl %ecx
      pushl %edx
      /* Phone home and tell the parent that we're OK. (Note that signals with
         no SA_RESTART will mess it up). If this fails, assume that the fd is
         closed because we were execve()d from an instrumented binary, or because 
         the parent doesn't want to use the fork server. */
      pushl $4          /* length    */
      pushl $__afl_temp /* data      */
      pushl $" STRINGIFY((FORKSRV_FD + 1)) "  /* file desc */
      call  write
      addl  $12, %esp
      cmpl  $4, %eax
      jne   __afl_fork_resume
  1. 保存`EAX`、`ECX`和`EDX`的值，将它们依次入栈。
  2. 调用`write(STRINGIFY((FORKSRV_FD + 1)),__afl_temp,4)`，即`write(199,__afl_temp,4)`，用以将四字节任意数据发送至状态管道，以告知父进程，此时本进程处于就绪状态。
  3. 检查实际写入字节数是否为4字节，若不为四字节，则跳转至`__afl_fork_resume`函数。
####  `__afl_fork_wait_loop`函数
此函数为AFL的桩代码主逻辑，且桩代码将在此处循环。
    __afl_fork_wait_loop:
      /* Wait for parent by reading from the pipe. Abort if read fails. */
      pushl $4          /* length    */
      pushl $__afl_temp /* data      */
      pushl $" STRINGIFY(FORKSRV_FD) "        /* file desc */
      call  read
      addl  $12, %esp
      cmpl  $4, %eax
      jne   __afl_die
      /* Once woken up, create a clone of our process. This is an excellent use
         case for syscall(__NR_clone, 0, CLONE_PARENT), but glibc boneheadedly
         caches getpid() results and offers no way to update the value, breaking
         abort(), raise(), and a bunch of other things :-( */
      call fork
      cmpl $0, %eax
      jl   __afl_die
      je   __afl_fork_resume
      /* In parent process: write PID to pipe, then wait for child. */
      movl  %eax, __afl_fork_pid
      pushl $4              /* length    */
      pushl $__afl_fork_pid /* data      */
      pushl $" STRINGIFY((FORKSRV_FD + 1)) "      /* file desc */
      call  write
      addl  $12, %esp
      pushl $0             /* no flags  */
      pushl $__afl_temp    /* status    */
      pushl __afl_fork_pid /* PID       */
      call  waitpid
      addl  $12, %esp
      cmpl  $0, %eax
      jle   __afl_die
      /* Relay wait status to pipe, then loop back. */
      pushl $4          /* length    */
      pushl $__afl_temp /* data      */
      pushl $" STRINGIFY((FORKSRV_FD + 1)) "  /* file desc */
      call  write
      addl  $12, %esp
      jmp __afl_fork_wait_loop
此函数除了因为函数调用约定导致的变化外，与64位`__afl_fork_wait_loop`函数逻辑相同，此处不再赘述。
####  `__afl_fork_resume`函数
此函数用于恢复关闭两个状态管道并恢复现场。
    __afl_fork_resume:
      /* In child process: close fds, resume execution. */
      pushl $" STRINGIFY(FORKSRV_FD) "
      call  close
      pushl $" STRINGIFY((FORKSRV_FD + 1)) "
      call  close
      addl  $8, %esp
      popl %edx
      popl %ecx
      popl %eax
      jmp  __afl_store
  1. 调用`close(STRINGIFY(FORKSRV_FD))`和`close(STRINGIFY(FORKSRV_FD + 1))`，即调用`close(198)`和`close(199)`，关闭两个状态管道。
  2. 从栈中恢复`EDX`、`ECX`、`EAX`的寄存器值。(在`__afl_forkserver`函数中被保存)
  3. 跳转`__afl_store`函数。
####  `__afl_die`函数
    __afl_die:
      xorl %eax, %eax
      call _exit
调用`exit(0)`退出。
####  `__afl_setup_abort`函数
    __afl_setup_abort:
      /* Record setup failure so that we don't keep calling
         shmget() / shmat() over and over again. */
      incb __afl_setup_failure
      popl %ecx
      popl %eax
      jmp __afl_return
  1. 将`AFL`初始化失败计数器`__afl_setup_failure`加1。
  2. 从栈中恢复`ECX`、`EAX`的寄存器值。(在`__afl_setup`函数中被保存)
  3. 跳转`__afl_return`函数。
###  `main_payload_32`代码总结
`main_payload_32`代码与64位代码相比，除了有部分因为调用约定导致的变化外，就是把桩代码初始化的过程完全移到了`__afl_setup`函数中，删除了`__afl_setup_first`函数。核心代码与逻辑并无区别。
###  `afl-as`中的`add_instrumentation`函数收尾
现在我们把目光移回`afl-as`中的`add_instrumentation`函数，在完成主代码插桩后，还有最后一点代码：
    if (ins_lines)
      fputs(use_64bit ? main_payload_64 : main_payload_32, outf);
    if (input_file) fclose(inf);
    fclose(outf);
    if (!be_quiet) {
      if (!ins_lines) WARNF("No instrumentation targets found%s.",
                            pass_thru ? " (pass-thru mode)" : "");
      else OKF("Instrumented %u locations (%s-bit, %s mode, ratio %u%%).",
                ins_lines, use_64bit ? "64" : "32",
                getenv("AFL_HARDEN") ? "hardened" : 
                (sanitizer ? "ASAN/MSAN" : "non-hardened"),
                inst_ratio);
    }
  1. 主代码插桩结束后，检查待插桩文件的文件描述符是否已被关闭，若未被关闭，调用`fclose`进行关闭。
  2. 调用`fclose`关闭已插桩文件。
  3. 若`be_quiet`标志被设置，则输出插桩详情，包括忽略了哪些代码，插入的桩代码数等等
  4. 返回主函数
###  `afl-as`主函数收尾
`afl-as`中主函数在`add_instrumentation`函数返回后也还有最后一点代码：
    if (!just_version) add_instrumentation();
    if (!(pid = fork())) {
      execvp(as_params[0], (char**)as_params);
      FATAL("Oops, failed to execute '%s' - check your PATH", as_params[0]);
    }
    if (pid `进行最终可执行文件的生成。
  2. 若`fork`返回值为负数，引发致命错误`"fork() failed"`，`afl-as`退出。
  3. 使用`waitpid`阻塞主进程，等待子进程将可执行文件的生成过程运行结束，若返回值小于等于0，引发致命错误`"waitpid() failed"`，`afl-as`退出。
  4. 若`"AFL_KEEP_ASSEMBLY"`环境变量不存在，将插桩后的汇编文件删除。
  5. `afl-as`退出。
## 0x03 关于__afl_store函数的进一步解释
> 此部分引用zoniony师傅在AFL源码分析笔记(一)中的表述。
`__afl_store`函数的内部是用来记录程序执行路径的，那么如何判断这条路径（代码）执行过，后面还要根据这些记录对后面变异有帮助。既要节约空间又要有效率，那单链表之类的肯定不能用，AFL用的是二元`tuple`(跳转的源地址和目标地址)来记录分支信息。
例如：
> A->B->C->D->A-B
可以用`[A,B] [B,C] [C,D]
[D,A]`四个二元组表示，只需要记录跳转的源地址和目标地址。并且`[A,B]`执行了两次，其余执行了一次，这里用`hash`映射在一张`map`中。具体流程如下：
  1. 为当前分支分配一个随机数$X_1$。
  2. 此时内存中保存了上一个分支的随机数$X_2$，那么$X_1 \otimes X_2$就代表这个二元`tuple`的索引。那么`share_mem[`$X_1 \otimes X_2$`]++`就代表记录了此路径。
  3. 但是考虑一种特殊情况`A->B->A`，此时，运算出的结果将为零。因此为了避免这个错误，需要在记录此路径后将此路径的随机数右移一位后再记录。即计算$X_1^{\prime} = X_1 >> 1$，然后记$X_1^{\prime}$为当前分支的随机数。
## 0x04 编译实例
接下来使用
    CC=/home/error404/AFL/afl-gcc ./configure --disable-shared
    make clean all
进行编译，可以看到`afl-gcc`确实被执行了，并且编译出的程序存在`AFL`桩代码
**PS：为了方便调试，我的`afl-gcc`添加了一些打印参数的语句，使用官方仓库时的回显可能与此处不同。**
## 0x04 后记
虽然网上有很多关于`AFL`源码的分析，但是绝大多数文章都是抽取了部分代码进行分析的，本文则逐行对源码进行了分析，下一篇文章将针对`afl-fuzz`源码做分析。
## 0x05 参考资料
[【原】AFL源码分析笔记(一) – zoniony](https://xz.aliyun.com/t/4628#toc-10)