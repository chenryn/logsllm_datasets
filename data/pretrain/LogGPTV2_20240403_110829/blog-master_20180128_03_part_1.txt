## [转] java - 过滤ASCII码中的不可见字符, ASCII三部分, 各控制字符详解    
### 作者              
digoal              
### 日期              
2018-01-28              
### 标签              
PostgreSQL , java , Greenplum , 0x00 , 空字符 , NUL , 数据清洗 , 规则 , 过滤 , 非法字符              
----              
## 背景           
## 原文    
http://www.codeweblog.com/sqlserve%E5%88%B0pg%E8%BF%81%E7%A7%BB%E9%94%99%E8%AF%AF-%E6%97%A0%E6%95%88%E7%9A%84%E7%BC%96%E7%A0%81%E5%BA%8F%E5%88%97-utf8-0x00/      
今天产品部同事报告了一个BUG，经过调试发现，由于用户输入的字符串中，包含字符0x1E, 也就是”记录分隔符”(Record Separator, Notepad++ 显示为[RS])，导致JavaScript XML解析遭遇错误。于是就想在字符串中过滤掉这些没多大用途的字符，同时又要保留部分常用的字符，例如换行，回车和水平制表符。于是写了下面一个 PHP 函数：    
```    
/**    
* 清理字符串中的部分不可见控制字符    
*    
* @param string $string 待处理字符串    
* @return string 处理后的字符串    
* @author fising(at)qq.com    
*/    
public static function clearInvisibleCharacter($string = '')    
{    
/* 排除 tab, \n, \r 三个字符 */    
$do_not_searches = array(chr(9), chr(10), chr(13));    
/* 需清理的字符列表 */    
$searches = array();    
for ($i = 0; $i  0) {    
char[] contentCharArr = content.toCharArray();    
for (int i = 0; i  回车    
CR回车的原意是让打印头回到左边界，并没有移动到下一行。    
随着时间流逝，后来人把CR的意思弄成了Enter键，用于示意输入完毕。在数据以屏幕显示的情况下，人们在Enter的同时，也希望把光标移动到下一行。因此C语言和Unix操作系统，重新定义了LF的意思，使其表示为移动到下一行。当输入CR去存储数据的时候，软件也常常隐式地将其转换为LF。    
14 – SO – Shift Out 不用切换    
15 – SI – Shift In    
启用切换    
早在1960s年代，定义ASCII字符集的人，就已经懂得了，设计字符集不单单可以用于英文字符集，也要能应用于外文字符集，是很重要的。    
定义Shift In 和Shift Out的含义，即考虑到了此点。    
最开始，其意为在西里尔语和拉丁语之间切换。西里尔ASCII定义中，KOI-7用到了Shift字符。拉丁语用Shift去改变打印机的字体。在此种用途中，SO用于产生双倍宽度的字符，而用SI打印压缩的字体。    
16 – DLE – Data Link Escape 数据链路转义    
有时候，我们需要在正在进行的通信过程中去发送一些控制字符。但是，总有一些情况下，这些控制字符却被看成了普通的数据流，而没有起到对应的控制效果。而ASCII标准中，定义DLE来解决这类问题。    
如果数据流中检测到了DLE，数据接收端则对其后面接下来的数据流中的字符，另作处理。而关于具体如何处理这些字符，ASCII规范中则没有具体定义，而只是弄了个DLE去打断正常数据的处理，告诉接下来的数据，要特殊对待。根据Modem中的Hayes通信协议DLE定义为“无声+++无声”。以我的观点，这样可能会更好：如果Hayes协议没有把DLE处理为嵌入通讯的无声状态，那样就符合现存的标准了。然而Hayes的开发者却觉得+++用的频率要远高于原始的DLE，所以才这么定义了。    
17 – DC1 – Device Control 1 / XON – Transmission on    
这个ASCII控制字符尽管原先定义为DC1，    
但是现在常表示为XON，用于串行通信中的软件流控制。其主要作用为，在通信被控制码XOFF中断之后，重新开始信息传输。用过串行终端的人应该还记得，当有时候数据出错了，按Ctrl+Q（等价于XON）有时候可以起到重新传输的效果。这是因为，此Ctrl+Q键盘序列实际上就是产生XON控制码，其可以将那些由于终端或者主机方面，由于偶尔出现的错误的XOFF控制码而中断的通信解锁，使其正常通信。    
18 – DC2 – Device Control 2    
19 – DC3 – Device Control 3 / XOFF – Transmission off 传输中断    
20 – DC4 – Device Control 4    
21 – NAK – Negative AcKnowledgment 负面响应-> 无响应, 非正常响应    
22 – SYN – SYNchronous idle    
23 – ETB – End of Transmission Block 块传输中止    
24 – CAN – CANcel 取消    