## 转载：Java - 过滤ASCII码中的不可见字符，详解ASCII控制字符
### 作者
digoal
### 发布日期
2018-01-28
### 标签
PostgreSQL, Java, Greenplum, 0x00, 空字符, NUL, 数据清洗, 规则, 过滤, 非法字符

---

## 背景
参见原文: [SQL Server到PG迁移数据错误 - 无效的编码序列 - UTF8 - 0x00](http://www.codeweblog.com/sqlserve%E5%88%B0pg%E8%BF%81%E7%A7%BB%E9%94%99%E8%AF%AF-%E6%97%A0%E6%95%88%E7%9A%84%E7%BC%96%E7%A0%81%E5%BA%8F%E5%88%97-utf8-0x00/)

今天产品部同事报告了一个BUG。经过调试发现，由于用户输入的字符串中包含字符0x1E（即“记录分隔符”，在Notepad++中显示为[RS]），导致JavaScript XML解析出错。因此，我们决定在字符串中过滤掉这些不常用的字符，同时保留一些常用字符，如换行、回车和水平制表符。以下是用PHP编写的示例函数：

```php
/**
 * 清理字符串中的部分不可见控制字符
 *
 * @param string $string 待处理字符串
 * @return string 处理后的字符串
 * @author fising(at)qq.com
 */
public static function clearInvisibleCharacter($string = '')
{
    /* 排除 tab, \n, \r 三个字符 */
    $do_not_searches = array(chr(9), chr(10), chr(13));
    /* 需清理的字符列表 */
    $searches = array();
    for ($i = 0; $i < 32; $i++) {
        if (!in_array(chr($i), $do_not_searches)) {
            $searches[] = chr($i);
        }
    }
    return str_replace($searches, '', $string);
}
```

以下是使用Java实现相同功能的方法：

```java
public static String removeInvisibleChars(String content) {
    char[] contentCharArr = content.toCharArray();
    StringBuilder result = new StringBuilder(content.length());
    for (int i = 0; i < contentCharArr.length; i++) {
        int asciiCode = (int) contentCharArr[i];
        if (asciiCode > 31 || asciiCode == 9 || asciiCode == 10 || asciiCode == 13) {
            result.append(contentCharArr[i]);
        }
    }
    return result.toString();
}
```

## ASCII控制字符详解
### 回车(CR)
CR原意是让打印头回到左边界，并没有移动到下一行。随着时间的发展，人们逐渐将CR理解为Enter键，用于表示输入完毕。在屏幕显示的情况下，人们希望在按下Enter的同时光标也移动到下一行。因此，C语言和Unix操作系统重新定义了LF，使其表示移动到下一行。当存储CR时，软件通常会将其隐式转换为LF。

### 其他ASCII控制字符
- **SO (Shift Out)**: 切换到另一种字符集。
- **SI (Shift In)**: 切换回默认字符集。
- **DLE (Data Link Escape)**: 在通信过程中发送控制字符时使用，以避免被误认为普通数据流。
- **DC1 (Device Control 1 / XON)**: 用于串行通信中的软件流控制，恢复因XOFF中断的数据传输。
- **DC2 (Device Control 2)**
- **DC3 (Device Control 3 / XOFF)**: 暂停数据传输。
- **DC4 (Device Control 4)**
- **NAK (Negative Acknowledgment)**: 表示接收方未正确收到数据。
- **SYN (Synchronous Idle)**: 同步空闲信号。
- **ETB (End of Transmission Block)**: 块传输结束。
- **CAN (Cancel)**: 取消当前操作。

以上是对ASCII控制字符的一些基本介绍。在实际应用中，合理地处理这些字符对于保证数据的一致性和可靠性非常重要。