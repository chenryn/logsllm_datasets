We also note that a solution that simply requires users to
sign Git metadata has serious limitations (as described in
Sec. 5.2).
Unlike many systems where equivocation is likely
to be noticed immediately by participants, Git’s use of
branches hides different views of the repository from de-
velopers. In many development environments, develop-
ers only have copies of branches that they are working
on stored locally on their system, which makes it easy
for a malicious repository to equivocate and show differ-
ent views to different developers.
In Git, a branch is represented by a file that contains
the SHA1 checksum of a commit object (under benign
circumstances, this object is the latest commit on that
branch). We will refer to such files as branch refer-
ences. All the branch references are stored in the di-
rectory .git/refs/heads/, with the name of the
branch as the filename. For example, a branch “hotfix” is
represented by the file .git/refs/heads/hotfix.
We discovered that it is straightforward for an at-
tacker to manipulate information about branches by sim-
ply changing contents in a reference file to point to any
382  25th USENIX Security Symposium 
USENIX Association
4
other commit object. Modifying the branch reference can
be easily performed with a text editor and requires no so-
phistication. Specifically, we show three approaches to
achieve this, all of them being captured by our adversar-
ial model. First, an attacker who has compromised a Git
repository and has write access to it, can directly mod-
ify the metadata files. Second, an attacker can perform
an MITM attack by temporarily redirecting a victim’s
traffic to a fake repository serving tampered metadata,
and then reestablishing traffic so the victim propagates
the vulnerable changes to the genuine repository (in Ap-
pendix A, we describe a proof-of-concept attack against
GitHub based on this approach). Third, a malicious de-
veloper can take advantage of the fact that Git metadata
is synchronized between local and remote repositories.
The developer manipulates the Git metadata in her local
repository, which is then propagated to the (main) remote
repository.
It is also possible to extend these attacks for Git tags.
Although a Git tag is technically a Git tag object that
can be signed the same way as a commit object, an at-
tacker can target the reference pointing to a tag. Tag ref-
erences are stored in the directory .git/refs/tags/
and work similarly to branch references, in that they are
primarily a file containing the SHA1 of a Git tag object
that points to a Git commit object. Although Git tags
are conceptually different — they only represent a fixed
point (e.g., a major release version) in the projects his-
tory — they can be exploited in the same way, because
Git has no mechanism to protect either branch or tag ref-
erences.
We have validated the attacks against a standard Git
server and also the GitHub, GitLab and other popular Git
hosting services.
Based on their effect on the state of the repository, we
identify three types of metadata manipulation attacks:
• Teleport Attacks: These attacks modify a Git refer-
ence so that it points to an arbitrary object, different
from the one originally intended. The reference can
be a branch reference or a tag reference.
• Rollback Attacks: These attacks modify a Git
branch reference so that it points to an older com-
mit object from the same branch, thus providing
clients with a view in which one or more of the lat-
est branch commits are missing.
• Deletion Attacks: These attacks remove branch or
tag references, which in turns leads to the complete
removal of an entire branch, or removal of an entire
release referred to by a tag.
We use the following setup to present the details of
these attacks. A Git server is hosting the main repository
and several developers who have their own local reposi-
tories have permission to fetch/push from/to any branch
of the main repository, including the master branch. For
commit objects, we use a naming convention that cap-
tures the temporal ordering of the commits. For example,
if a repository has commits C0, C1, C2, this means that
they were committed in the order C0, C1, C2.
4.1 Teleport attacks
We identified two teleport attacks: branch teleport and
tag teleport attacks.
Branch Teleport Attacks. These attacks modify the
branch reference so that it points to an arbitrary commit
object on a different branch. Although we illustrate the
attacks for the master branch, they are applicable to any
branch, since none of the branch reference metadata is
protected.
Fig. 1(a) shows the initial state of the main Git repos-
itory, which contains two branches, “master” and “fea-
ture.” The local repository of developer 1 is in the same
state as shown in Fig. 1(a). The “feature” branch im-
plements a new feature and contains one commit, C2.
The code in C2 corresponds to an unstable, potentially-
vulnerable version that needs to be tested more thor-
oughly before being integrated into the master branch.
Commit C1 is the head of the master branch. This
means that the file .git/refs/heads/master con-
tains the SHA1 hash of the C1 commit object.
After developer 2 pulls from the master branch of the
main repository (Fig. 1(b)), the attacker changes the mas-
ter branch to point to commit C2 (Fig. 1(c). The at-
tacker does this by simply changing the contents of the
file .git/refs/heads/master to the SHA1 hash
of the C2 commit. Any developer who clones the repos-
itory or fetches from the master branch at this point in
time will be provided with the incorrect repository state,
as shown in Fig. 1(c). For example, developer 2, who
committed C3 into his local repository (Fig. 1(d)), now
wants to push this change to the main repository. De-
veloper 2 is notified that there were changes on the mas-
ter branch since his last fetch, and needs to pull these
changes. As a result, a merge commit C4 occurs be-
tween C3 and C2 in the local repository of developer 2,
as shown in Fig. 1(e). The main repository looks like
Fig 1(e) after developer 2 pushes his changes. If devel-
oper 1 then pulls changes from the main repository, all
three repositories will appear like Fig 1(e).
Normally, the master branch should contain software
that was thoroughly tested and properly audited. How-
ever, in this incorrect history, the master branch incorpo-
rates commit C2, which was in a experimental feature
branch and may contain bugs. The attacker tricked a
developer into performing an action that was never in-
USENIX Association  
25th USENIX Security Symposium  383
5
Figure 1: The Branch Teleport attack
tended, and none of the two developers are aware that
the attack took place.
Tag Teleport Attacks. These attacks modify a tag ref-
erence so that it points to an arbitrary tag object. Sur-
prisingly, a tag reference can also be made to point to a
commit object, and Git commands will still work.
One can verify whether a tag is both signed and a valid
tag object by using the git tag --verify com-
mand. However, if an attacker were to modify a tag ref-
erence to point to an older tag (e.g., if the tag for release
1.1 is replaced by the tag for the vulnerable release 1.0),
the verification command is successful.
Modifying tag metadata could be especially impactful
for automated systems that rely on tags to build/test and
release versions of software [36, 20, 10, 12]. Further-
more, package managers such as Python’s pip, Ruby’s
RubyGEMS, and Node’s NPM, among many others sup-
port the installation of software from public Git reposi-
tories and tags. Finally, Git submodules are also vulner-
able, as they automatically track a tag (or branch). If a
build dependency is included in a project as a part of the
submodule, a package might be vulnerable via an under-
lying library.
4.2 Rollback attacks
These attacks modify a Git branch reference so that it
points to an older commit object from the same branch.
This gives clients a view in which one or more of the lat-
est branch commits are missing. The attacker can cause
commits to be missing on a permanent or on a temporary
basis.
Figure 2: The Branch Roll-
back attack
Figure 3: The Global Roll-
back attack
4.2.1 Permanent rollback attacks
Based on the nature of the commits removed, we sep-
arate permanent rollback attacks in two groups: Branch
Rollback attacks and Global Rollback attacks.
Branch Rollback Attacks. Consider the repository
shown in Fig. 2(a), in which the order of the commits
is C0, C1, C2, C3. Commits C0 and C3 are in the
master branch, and commits C1 and C2 are security
patches in a “patch” branch. The attacker rolls back
the patch branch by making the head of such branch
point to commit C1, as shown in Fig. 2(b). This can
be done by simply replacing the contents of the file
.git/refs/heads/patch with the SHA1 hash of
the C1 commit. As a result, all developers that pull from
the main repository after this attack will see the state
shown in Fig. 2(c), in which commit C2 (that contains
a security patch) has been omitted.
Note that the attack can also be used to omit commits
on any branch, including commits in the master branch.
Global Rollback Attacks. As opposed to a Branch Roll-
back attack, which removes commits that happened prior
to one that remains visible, in a Global Rollback attack,
no commits remain visible after the commits that are re-
moved. In other words, the attacker removes one or more
commits that were added last to the repository.
Consider the initial state of a Git repository as illus-
trated in Fig. 3(a), in which C2 is a commit that fixes
a security bug and has been merged into the master
384  25th USENIX Security Symposium 
USENIX Association
6
4. D2 tries to push changes to the main repository. This
time, the attacker presents C1 to D2 (these are the
changes that were withheld in step 2). Thus, D2 has
to first pull changes before pushing.
5. D2 pulls changes from the main repository, and this
results in a merge commit C3 between C1 and C2.
As part of the merge, the developer has to solve any
merge conflicts that appear from the code duplication
between C1 and C2.
In this case, D2 re-did a lot of D1’s work because
D1’s commit C1 was withheld by the attacker. Note that
unlike a Global Rollback attack, in which commits are
removed permanently from the repository, in the Effort
Duplication attack commits are just removed temporar-
ily. This is a more subtle attack, since the final state of
the repository is the same for both the benign and at-
tack cases. The effect of applying commits C1 and C2
in Fig. 4(a) on the files in the repository is the same as
applying commits C1, C2, C3 in Fig. 4(b). However, D2
unknowingly (and unnecessarily) duplicated D1’s coding
effort, which may have negative economic consequences.
Adding to this, an attacker can slow down developers
of a specific project (e.g., a competitor’s project) by de-
livering previously-withheld changes to them when they
will cause merge conflicts and hamper their development
progress.
4.3 Reference deletion attacks
Since the branch metadata is not protected, the at-
tacker can hide an entire branch from the repository by
removing a branch reference. Similarly, since the tag
metadata is not protected, the attacker can remove a tag
reference in order to hide a release from the repository
history.
When an attacker performs a reference deletion attack,
only the users who previously held a copy of the refer-
ence will be able to know of its existence. If this is not the
case, a developer would be oblivious of the fact that other
developers have worked on the deleted branch (similar to
a fork attack), or be tricked into retrieving another ver-
sion if the target tag is not available. Furthermore, some
projects track work in progress by tying branch names
to numbers in their issue tracker [9], so two developers
could be tricked into working on the same issue by hid-
ing a branch (similar to an effort duplication attack).
4.4 Summary of attacks
Metadata manipulation attacks may lead to inconsis-
tent and incorrect views of the repository and also to cor-
ruption and loss of data. Ultimately, this will lead to
merge conflicts, omission of bug fixes, merging exper-
imental code into a production branch, or withholding
changes from certain users before a release. All of these
are problems that can impact the security and stability of
Figure 4: The Effort Duplication attack
branch. The file .git/refs/heads/master con-
tains the SHA1 hash of the C3 commit object.
By simply changing the contents of
the file
.git/refs/heads/master to the SHA1 hash of
the C1 commit, the attacker forges a state in which the
repository contains the history of commits depicted in
Fig. 3(b). This effectively removes commits C2 and
C3 from the project’s history, and a developer who now
clones the project will get a history of commits as shown
in Fig. 3(c). This incorrect history does not contain the
commit C2 that fixed the security bug.
Note that the Global Rollback attack removed the lat-
est two commits from the repository. This is different
than the effect of a Branch Rollback attack which re-
moves one or more commits that happened before a com-
mit that remains visible.
4.2.2 Temporary rollback attacks
Effort Duplication Attacks. The Effort Duplication
attack is a variation of the Global Rollback attack, in
which the attacker temporarily removes commits from
the repository. This might cause developers to unknow-
ingly duplicate coding efforts that exist in the removed
commits.
Consider a main Git repository with just a master
branch which contains only one commit C0. Two devel-
opers D1 and D2 have pulled from the main repository,
so their local repositories also contain C0. After the fol-
lowing sequence of actions by D1 and D2, the repository
should look as shown in Fig. 4(a):
1. D1 commits C1 to her local repository & pushes to
the main repository.
2. D2 pulls from the main repository.
3. D2 commits C2 to her local repository & pushes to
the main repository.
However, when D2 pulls in step 2, the attacker can
temporarily withhold commit C1, keeping D2 unaware
of the changes in C1. As a result, D2 works on changes
that already exist in C1. The following attack scenario
results in a repository shown in Fig. 4(b):
1. D1 commits C1 to her local repository & pushes to
the main repository.
2. D2 pulls from the main repository, but the attacker
withholds C1. Thus, D2 thinks there are no changes.
3. D2 makes changes on top of C0 and commits these
changes in her local repository as commit C2. C2
duplicates (some or all of) D1’s coding effort in C1.
7
USENIX Association  
25th USENIX Security Symposium  385
the system as a whole. Table 1 summarizes the attacks
impact.
Attack
Branch Teleport
Branch Rollback
Global Rollback
Effort Duplication
Tag Rollback
Impact
Buggy code inclusion
Critical code omission
Critical code omission
Coding effort duplicated
Older version retrieved
Table 1: Impact of metadata manipulation attacks.
5 Defense framework
5.1 Design goals for a defense scheme
We designed our defense scheme against metadata ma-
nipulation attacks with the following goals in mind:
Design Goal 1 (DG1): Achieve the security goals stated
in Sec. 3.1. That is, prevent modification of commit-
ted data, ensure a consistent repository state, and ensure
repository state freshness.
Design Goal 2 (DG2): Preserve (as much as possible)
current workflows and actions that are commonly used
by developers, in order to facilitate a seamless adoption.
Design Goal 3 (DG3): Maintain compatibility with ex-
isting Git implementations. For example, Git has limited
functionality when dealing with concurrency issues in a
multi-user setting: it only allows atomic push of multiple
branches and tags after version 2.4. Following Git’s de-
sign philosophy, backwards compatibility is paramount;
a server running the latest Git version (i.e., 2.9.0) can be
cloned by a client with version 1.7.
5.2 Why binding references with Git ob-
jects is not enough
Adding reference information (i.e., branch and tag
names) inside the commit object might seem like a suf-
ficient defense against metadata manipulation attacks.
This would bind a commit to a reference and prevent an
attacker from claiming that a commit object referred to
in a reference belongs somewhere else.
Unfortunately,
this simple approach has important
drawbacks. It does not meet our DG1 because it does
not defend against rollback and effort duplication at-
tacks. Furthermore, adding new reference information
in a commit object requires updating an existing commit
object. When this happens, the SHA-1 hash of the com-
mit object will change, and the change will propagate to
all new objects in the history. In other words, when a new
branch is created and bound to a commit far earlier in the
history, all commit objects need to be rewritten and, thus,
sent back to the remote repository, which could add sub-
stantial computational and network overhead.
5.3 Our defense scheme
The fundamental cause of metadata manipulation at-
tacks is that the server can respond to users’ fetches
with an incorrect state and history of the main reposi-
tory that they cannot verify. For example, the server can
falsely claim that a branch points to a commit that was
never on that branch or to a commit that was the location
of that branch in an earlier version. Or, the server can
falsely claim that the reference of a tag object points to
an older tag.
In order to stop the server from falsely claiming an
incorrect state of the repository, we propose that every
Git user must include additional information vouching
for their perceived repository state during a push or a
fetch operation. To achieve this, we include two pieces
of additional information on the repository:
• First, upon every push, users must append a push
entry to a Reference State Log (RSL) (Sec. 5.3.1).
By validating new entries in this log with each push
and fetch operation, we can prevent teleport, perma-
nent rollback, and deletion attacks.
• Second, when a Git user performs a fetch operation
and receives a new version of files from the repos-
itory, the user places a random value into a fetch
nonce bag (Sec. 5.3.2). If the Git user does not re-
ceive file updates when fetching, the user replaces
her value in the bag with a new one. The bag serves
to protect against temporary rollback attacks.
During our descriptions, we assume that a trusted key-
chain is distributed among all developers along with the
RSL. There are tools available to automate this pro-
cess [24, 5], and the RSL itself can also be used to dis-
tribute trust (we elaborate more on this in Sec 6.1).
5.3.1 The Reference State Log (RSL)
For a developer to prevent the server from equivocat-
ing on the location of the references, the developer will
sign a push entry, vouching for the location of the ref-
erences at the time of a push. To do this, she must exe-
cute the Secure push procedure, which has the following
steps:
First,
the remote RSL is retrieved, validated, and
checked for the presence of new push entries (lines 3-