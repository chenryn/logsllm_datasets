要在缓存中创建存储的`XSS 525600`分钟（最大数量），应在上传`web.config`文件后发送以下请求：
    PUT /testwebconfig/userfiles/web.config HTTP/1.1
    Host: victim.com
    Http_Timeout: 525600
    Content-Length: 25
提取内容：
    http://victim.com/testwebconfig/userfiles/web.config
删除内容：
    DELETE /testwebconfig/userfiles/web.config HTTP/1.1
    Host: victim.com
为了使用相同的名称创建多个XSSd payload，可以将其他参数添加到URL。 例如：
    Web.config/payload1
    Or
    Web.config\payload1
    And
    Web.config?payload2
##### 2.3.2 使用Discovery Request Handler处理程序
`System.Web.Services.Discovery`命名空间中的`DiscoveryRequestHandler`类可用于提供XML文件（实际使用中的.disco文件）。
这可能会被利用来从XML响应中执行JavaScript代码。
如果可以上传`web.config`文件，那么我们也可以上传包含带`JavaScript`代码的XML的`test.config`文件。
以下`web.config`显示了一个示例，`test.config`文件将用作XML文件：
`test.config`文件如下；
我们应该注意`DynamicDiscoveryDocument`类型的XML文件不能用于XSS，因为它将用于搜索当前目录以发现现有Web服务。
### 3 预防技术
第一道防线是使用白名单方法验证文件名，扩展名和内容。 这可以通过仅允许文件扩展名并检查文件内容以确保它们使用有效格式来完成。
另一个建议是将文件保存在Web目录之外或数据库中。 如今更安全的方式是将上传的文件存储在云中，例如在`Amazon
S3`中。我们必须确保访问控制检查是合适且有效的，并且实现不会导致其他安全问题，例如不安全的对象引用或路径操作。
使用适当的HTTP标头还可以防止跨站点内容劫持攻击。
以下建议也可以通过上传web.config文件来加剧攻击：
  * 使用预编译的应用程序会使脚本小子攻击您的应用程序变得更加困难
  * 确保Web应用程序中的现有文件没有写入权限，包括web.config文件，尤其是在上传目录之外
  * 监控网站上任何动态文件的创建，以检测潜在的攻击
如果我们无权访问代码，无法更改文件权限或无法更改应用程序的工作方式，那么仍可以在应用程序路径或网站根目录中使用web.config文件来缓解可能发生的某些攻击，并通过上传web.config文件：
如果可能，请确保禁用虚拟目录中的web.config文件。
这可以通过更改`applicationHost.config`文件中的allowSubDirConfig属性来完成，该文件通常位于`C:\Windows\System32\inetsrv\Config\`
不应该被子目录中的其他`web.config`文件更改的敏感web.config元素也应该受到保护。
这可以使用web.config文件中的`allowOverride`属性或锁定功能来完成。
以下`web.config`文件显示了一个示例，可以在父目录中使用该示例来锁定在此研究中的某些威胁部分：
### 4 后台工作
本节基本涵盖了我在研究过程中所做的工作，虽然这可能是这篇文章中最无聊的部分，但我认为对于想要继续这项研究的人来说这可能是有用的。
当`web.config`可以位于`IIS`应用程序的根目录中时，查找如何运行代码和命令是最简单的部分，因为我可以使用记录的`web.config`功能和我之前的研究。
但是，在子文件夹中上传`web.config`文件时探索新方法需要更多的探索工作。
#### 4.1 需求与资源
除了时间之外，我研究的主要资源是`ASP.NET Framework`源代码，`Visual Studio，Sysinternals Process
Monitor，dnSpy，Telerik JustDecompile，IIS Web`服务器，Kali Linux以及Google搜索。
我使用`Kali Linux`主要是为了拥有一个简单的未经身份验证的SMB共享，我可以进行读/写操作。 最终为我提供SMB
v3支持的`/etc/samba/smb.conf`文件是：
    [global]
    #workgroup = WORKGROUP
    #server string = Samba Server XYZ
    #netbios name = someRandomUbuntu
    #security = user
    map to guest = Bad User
    #dns proxy = no
    log file = /var/log/samba/%m
    log level = 1
    server min protocol = SMB3
    client min protocol = SMB3
    client max protocol = SMB3
    [Public]
    path = /tmp/smbshare/
    writable = yes
    guest ok = yes
    read only = no
    browsable = yes
    create mode = 0777
    directory mode = 0777
    # force user = nobody
#### 4.2 编译器选项
在设置编译器选项时，我们基本上将参数传递给通过@字符传递的文件中的编译器（csc.exe，vbc.exe或jsc.exe）。
虽然命令注入会立刻产生在我们的脑海中，但它是无效的，我无法使用它运行另一个命令。
有两种可能导致命令执行的途径比我在本研究中发现的更容易：
编译特定文件时的代码执行  
查找可以依次运行代码或命令的参数  
。 -analyzer选项对于C＃编译器来说非常有前景，但是.NET执行的csc.exe文件中缺少它。
#### 4.3 探索新的处理程序
正如在本文中可以看到的那样，识别可以在`web.config`文件中处理的所有HTTP处理程序非常重要。
这是通过搜索实现IHttpHandler，IHttpHandlerFactory和IHttpHandlerFactory2的类来完成的。
以下是在浏览器中轻松查看它们的方法：
[https://referencesource.microsoft.com/#System.Web/IHttpHandler.cs,62c4e10ee7e6cd36,referen](https://referencesource.microsoft.com/#System.Web/IHttpHandler.cs,62c4e10ee7e6cd36,references)[ces](https://referencesource.microsoft.com/#System.Web/IHttpHandler.cs,62c4e10ee7e6cd36,references)
应该注意的是，有时新的处理程序也可以从实现中派生出来。并且只需要很少的更改。
ASP.NET使用文件扩展名来检测其类型，如果无法获得Web服务所需的正确类型，则需要将新扩展名添加到buildProviders元素中。
但是，buildProviders元素只能由应用程序设置，否则会显示以下错误：
    The element 'buildProviders' cannot be defined below the application level.
此保护已在.NET
Framework中的CompilationSection.cs的PostDeserialize()方法中编码，而不是在machine.config文件中：
有一些方法可以使用预定义的扩展在IIS上执行命令，但本研究的重点是使用可能允许上载的新扩展。
可以在`ASP.NET`配置文件夹中的主`web.config`中看到预定义的buildProviders列表（例如C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config)）。
#### 4.4 临时编译的文件
临时文件和编译文件通常会复制到`.NET Framework`中的临时目录中，例如：
    C:\Windows\Microsoft.NET\Framework64\[version]\Temporary ASP.NET Files\[appname]\[hash]\[hash]
其中一些文件将立即被删除，我监视它们的最简单方法是删除我的应用程序使用的临时目录上的所有用户的删除权限。 当不再需要时，可以轻松恢复。
我们可以在那里创建文件，我们应该能够替换该应用程序的现有文件以在理论上执行服务器上的代码。
在实践中，所有这些文件在其名称中使用随机值，并且需要使用例如要分析文件名来窃取它们。 我还没有研究`.NET
Framework`何时创建新的DLL文件，但理论上应该可以重写这些现有的DLL文件来接管应用程序中现有.NET文件。
### 参考
[1] 
[2] 
[3] 
[4] 
[5] 
[6] 
[7] 
[8] 
[9] 
[10] 
[11] [https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228167(v=vs.100)](https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228167\(v=vs.100))
    本文为翻译文章，来自：https://soroush.secproject.com/blog/2019/08/uploading-web-config-for-fun-and-profit-2/