0x40000000
The section can be read.
The first value, 0x00000020 (IMAGE_SCN_CNT_CODE), states that the section 
contains executable code. The second value, 0x20000000 (IMAGE_SCN_MEM 
_EXECUTE), states that the section can be executed as code. Lastly, the third 
value, 0x40000000 (IMAGE_SCN_MEM_READ), allows the section to be read. 
Therefore, adding all these together provides the value 0x60000020. If 
you’re adding a new section, keep in mind that you’ll need to update all 
these properties with their appropriate values.
This wraps up our discussion of the PE file data structure. It was a brief 
overview, we know. Each section could be its own chapter. However, it should 
be enough to allow you to use Go as a means to navigate arbitrary data struc-
tures. The PE data structure is quite involved and it’s well worth the time and 
effort necessary to become familiar with all of its components.
Additional Exercises
Take the knowledge you just learned about the PE file data structure and 
expand upon it. Here are some additional ideas that will help reinforce 
your understanding, while also providing a chance to explore more of the 
Go PE package: 
•
Obtain various Windows binaries and use a hex editor and a debugger to 
explore the various offset values. Identify how various binaries are differ-
ent, such as their number of sections. Use the parser that you built in this 
chapter to both explore and verify your manual observations.
•
Explore new areas of the PE file structure, such as the EAT and IAT. 
Now, rebuild the parser to support DLL navigation. 
•
Add a new section to an existing PE file to include your shiny new shell-
code. Update the entire section to include the appropriate number of 
sections, entry point, and raw and virtual values. Do this all over again, 
but this time, instead of adding a new section, use an existing section 
and create a code cave.
•
One topic that we didn’t discuss was how to handle PE files that have 
been code packed, either with common packers, such as UPX, or more 
obscure packers. Find a binary that has been packed, identify how it 
was packed and what packer was used, and then research the appropri-
ate technique to unpack the code.
290   Chapter 12
Using C with Go
Another method of accessing the Windows API is to leverage C. By directly 
using C, you could take advantage of an existing library that is available 
only in C, create a DLL (which we can’t do using Go alone), or simply call 
the Windows API. In this section, we’ll first install and configure a C tool-
chain that is compatible with Go. We will then look at examples of how to 
use C code in Go programs and how to include Go code in C programs.
Installing a C Windows Toolchain
To compile programs that contain a combination of Go and C, you’ll need 
a suitable C toolchain that can be used to build portions of C code. On 
Linux and macOS, you can install the GNU Compiler Collection (GCC) by 
using a package manager. On Windows, installing and configuring a tool-
chain is a bit more involved and can lead to frustration if you’re not familiar 
with the many options available. The best option we found is to use MSYS2, 
which packages MinGW-w64, a project created to support the GCC tool-
chain on Windows. Download and install this from https://www.msys2.org/ 
and follow the instructions on that page to install your C toolchain. Also, 
remember to add the compiler to your PATH variable.
Creating a Message Box Using C and the Windows API
Now that we have a C toolchain configured and installed, let’s look at a simple  
Go program that leverages embedded C code. Listing 12-24 contains C that 
uses the Windows API to create a message box, which gives us a visual dis-
play of the Windows API in use.
package main
u /*
#include 
#include 
v void box()
{
    MessageBox(0, "Is Go the best?", "C GO GO", 0x00000004L);
}
*/
w import "C"
func main() {
    x C.box()
}
Listing 12-24: Go using C (/ch-12/messagebox /main.go)
Windows System Interaction and Analysis   291
C code can be provided through external file include statements u. It 
can also be embedded directly in a Go file. Here we are using both methods. 
To embed C code into a Go file, we use a comment, inside of which we 
define a function that will create a MessageBox v. Go supports comments 
for many compile-time options, including compiling C code. Immediately 
after the closing comment tag, we use import "C" to tell the Go compiler to 
use CGO, a package that allows the Go compiler to link native C code at 
build time w. Within the Go code, we can now call functions defined in C, 
and we call the C.box() function, which executes the function defined in the 
body of our C code x. 
Build the sample code by using go build. When executed, you should 
get a message box.
N O T E 
Though the CGO package is extremely convenient, allowing you to call C libraries from 
Go code as well as call Go libraries from C code, using it gets rid of Go’s memory man-
ager and garbage disposal. If you want to reap the benefits of Go’s memory manager, 
you should allocate memory within Go and then pass it to C. Otherwise, Go’s memory 
manager won’t know about allocations you’ve made using the C memory manager, and 
those allocations won’t be freed unless you call C’s native free() method. Not freeing the 
memory correctly can have adverse effects on your Go code. Finally, just like opening file 
handles in Go, use defer within your Go function to ensure that any C memory that Go 
references is garbage collected.
Building Go into C
Just as we can embed C code into Go programs, we can embed Go code 
into C programs. This is useful because, as of this writing, the Go compiler 
can’t build our programs into DLLs. That means we can’t build utilities 
such as reflective DLL injection payloads (like the one we created earlier 
in this chapter) with Go alone.
However, we can build our Go code into a C archive file, and then use 
C to build the archive file into a DLL. In this section, we’ll build a DLL by 
converting our Go code into a C archive file. Then we’ll convert that DLL 
into shellcode by using existing tools, so we can inject and execute it in 
memory. Let’s start with the Go code (Listing 12-25), saved in a file called 
main.go. 
package main
u import "C" 
import "fmt"
v //export Start
w func Start() {
    fmt.Println("YO FROM GO")
}
x func main() {
}
Listing 12-25: The Go payload (/ch-12/dllshellcode /main.go) 
292   Chapter 12
We import C to include CGO into our build u. Next, we use a comment 
to tell Go that we want to export a function in our C archive v. Finally, we 
define the function we want to convert into C w. The main() function x can 
remain empty.
To build the C archive, execute the following command:
> go build -buildmode=c-archive
We should now have two files, an archive file called dllshellcode.a and an 
associated header file called dllshellcode.h. We can’t use these quite yet. We 
have to build a shim in C and force the compiler to include dllshellcode.a. 
One elegant solution is to use a function table. Create a file that contains 
the code in Listing 12-26. Call this file scratch.c.
#include "dllshellcode.h"
void (*table[1]) = {Start};
Listing 12-26: A function table saved in the scratch.c file (/ch-12/dllshellcode/scratch.c)
We can now use GCC to build the scratch.c C file into a DLL by using 
the following command:
> gcc -shared -pthread -o x.dll scratch.c dllshellcode.a -lWinMM -lntdll -lWS2_32
To convert our DLL into shellcode, we’ll use sRDI (https://github.com 
/monoxgas/sRDI/), an excellent utility that has a ton of functionality. To 
begin, download the repo by using Git on Windows and, optionally, a 
GNU/Linux machine, as you may find GNU/Linux to be a more readily 
available Python 3 environment. You’ll need Python 3 for this exercise, so 
install it if it’s not already installed. 
From the sRDI directory, execute a python3 shell. Use the following code 
to generate a hash of the exported function: 
>>> from ShellCodeRDI import *
>>> HashFunctionName('Start')
1168596138
The sRDI tools will use the hash to identify a function from the shell-
code we’ll generate later.
Next, we’ll leverage PowerShell utilities to generate and execute shell-
code. For convenience, we will use some utilities from PowerSploit (https://
github.com/PowerShellMafia/PowerSploit/), which is a suite of PowerShell utili-
ties we can leverage to inject shellcode. You can download this using Git. 
From the PowerSploit\CodeExecution directory, launch a new PowerShell shell:
c:\tools\PowerSploit\CodeExecution> powershell.exe -exec bypass
Windows PowerShell
Copyright (C) 2016 Microsoft Corporation. All rights reserved.
Windows System Interaction and Analysis   293
Now import two PowerShell modules from PowerSploit and sRDI:
PS C:\tools\PowerSploit\CodeExecution> Import-Module .\Invoke-Shellcode.ps1
PS C:\tools\PowerSploit\CodeExecution> cd ..\..\sRDI
PS C:\tools\sRDI> cd .\PowerShell\
PS C:\tools\sRDI\PowerShell> Import-Module .\ConvertTo-Shellcode.ps1
With both modules imported, we can use ConvertTo-Shellcode from sRDI 
to generate shellcode from the DLL, and then pass this into Invoke-Shellcode 
from PowerSploit to demonstrate the injection. Once this executes, you 
should observe your Go code executing:
PS C:\tools\sRDI\PowerShell> Invoke-Shellcode -Shellcode (ConvertTo-Shellcode 
-File C:\Users\tom\Downloads\x.dll -FunctionHash 1168596138)
Injecting shellcode into the running PowerShell process!
Do you wish to carry out your evil plans?
[Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"): Y
YO FROM GO
The message YO FROM Go indicates that we have successfully launched our 
Go payload from within a C binary that was converted into shellcode. This 
unlocks a whole host of possibilities.
Summary
That was quite a lot to discuss, and yet it just scratches the surface. We 
started the chapter with a brief discussion about navigating the Windows 
API documentation so you’d be familiar with reconciling Windows objects 
to usable Go objects: these include functions, parameters, data types, and 
return values. Next, we discussed the use of uintptr and unsafe.Pointer to 
perform disparate type conversions necessary when interacting with the 
Go syscall package, along with the potential pitfalls to avoid. We then tied 
everything together with a demonstration of process injection, which used 
various Go system calls to interact with Windows process internals. 
From there, we discussed the PE file format structure, and then built a 
parser to navigate the different file structures. We demonstrated various Go 
objects that make navigating the binary PE file a bit more convenient and 
finished up with notable offsets that may be interesting when backdooring 
a PE file. 
Lastly, you built a toolchain to interoperate with Go and native C code. 
We briefly discussed the CGO package while focusing on creating C code 
examples and exploring novel tools for creating native Go DLLs.
Take this chapter and expand on what you’ve learned. We urge you 
to continuously build, break, and research the many attack disciplines. 
The Windows attack surface is constantly evolving, and having the right 
knowledge and tooling will only help to make the adversarial journey 
more attainable. 
The word steganography is a combination 
of the Greek words steganos, which means 
to cover, conceal, or protect, and graphien, 
which means to write. In security, steganography 
refers to techniques and procedures used to obfuscate 
(or hide) data by implanting it within other data, such 
as an image, so it can be extracted at a future point in time. As part of the 
security community, you’ll explore this practice on a routine basis by hiding 
payloads that you’ll recover after they are delivered to the target. 
In this chapter, you’ll implant data within a Portable Network Graphics 
(PNG) image. You’ll first explore the PNG format and learn how to read PNG 
data. You’ll then implant your own data into the existing image. Finally, you’ll 
explore XOR, a method for encrypting and decrypting your implanted data. 
13
H IDING DATA W I T H 
S T EG A NOG R A PH Y
296   Chapter 13
Exploring the PNG Format
Let’s start by reviewing the PNG specification, which will help you under-
stand the PNG image format and how to implant data into a file. You can 
find its technical specification at http://www.libpng.org/pub/png/spec/1.2 
/PNG-Structure.html. It provides details about the byte format of a binary 
PNG image file, which is made up of repetitive byte chunks. 
Open a PNG file within a hex editor and navigate through each of the 
relevant byte chunk components to see what each does. We’re using the 
native hexdump hex editor on Linux, but any hex editor should work. You 
can find the sample image that we’ll open at https://github.com/blackhat-go/
bhg/blob /master/ch-13/imgInject/images/battlecat.png; however, all valid PNG 
images will follow the same format. 
The Header
The first 8 bytes of the image file, 89 50 4e 47 0d 0a 1a 0a, highlighted in 
Figure 13-1, are called the header.
Figure 13-1: The PNG file’s header
The second, third, and fourth hex values literally read PNG when con-
verted to ASCII. The arbitrary trailing bytes consist of both DOS and Unix 
Carriage-Return Line Feed (CRLF). This specific header sequence, referred 
to as a file’s magic bytes, will be identical in every valid PNG file. The variations 
in content occur in the remaining chunks, as you’ll soon see. 
As we work through this spec, let’s start to build a representation of 
the PNG format in Go. It’ll help us expedite our end goal of embedding 
payloads. Since the header is 8 bytes long, it can be packed into a uint64 
data type, so let’s go ahead and build a struct called Header that will hold 
the value (Listing 13-1). (All the code listings at the root location of / exist 
under the provided github repo https://github.com/blackhat-go/bhg/.)
//Header holds the first UINT64 (Magic Bytes)
type Header struct {
    Header uint64 
}
Listing 13-1: Header struct definition (/ch-13 /imgInject/pnglib/commands.go)
Hiding Data with Steganography   297
The Chunk Sequence
The remainder of the PNG file, shown in Figure 13-2, is composed of repeat-
ing byte chunks that follow this pattern: SIZE (4 bytes), TYPE (4 bytes), DATA 
(any number of bytes), and CRC (4 bytes). 
Figure 13-2: The pattern of the chunks used for the remainder of the image data
Reviewing the hex dump in further detail, you can see that the first 
chunk—the SIZE chunk—consists of bytes 0x00 0x00 0x00 0x0d. This chunk 
defines the length of the DATA chunk that’ll follow. The hexadecimal conver-
sion to ASCII is 13—so this chunk dictates that the DATA chunk will consist 
of 13 bytes. The TYPE chunk’s bytes, 0x49 0x48 0x44 0x52, convert to an ASCII 
value of IHDR in this case. The PNG spec defines various valid types. Some 
of these types, such as IHDR, are used to define image metadata or signal the 
end of an image data stream. Other types, specifically the IDAT type, contain 
the actual image bytes.
Next is the DATA chunk, whose length is defined by the SIZE chunk. Finally, 
the CRC chunk concludes the overall chunk segment. It consists of a CRC-32 
checksum of the combined TYPE and DATA bytes. This particular CRC chunk’s 
bytes are 0x9a 0x76 0x82 0x70. This format repeats itself throughout the entire 
image file until you reach an End of File (EOF) state, indicated by the chunk 
of type IEND. 
Just as you did with the Header struct in Listing 13-1, build a struct to 
hold the values of a single chunk, as defined in Listing 13-2.
//Chunk represents a data byte chunk segment
type Chunk struct {
    Size uint32 
    Type uint32
    Data []byte
    CRC  uint32
} 
Listing 13-2: Chunk struct definition (/ch-13/imgInject /pnglib/commands.go)
298   Chapter 13
Reading Image Byte Data 
The Go language handles binary data reads and writes with relative ease, 
thanks in part to the binary package (which you may remember from 
Chapter 6), but before you can parse PNG data, you’ll need to open a file 
for reading. Let’s create a PreProcessImage() function that will consume a file 
handle of type *os.File and return a type of *bytes.Reader (Listing 13-3). 
//PreProcessImage reads to buffer from file handle
func PreProcessImage(dat *os.File) (*bytes.Reader, error) {
    u stats, err := dat.Stat()
    if err != nil {
        return nil, err
    }
    v var size = stats.Size()
    b := make([]byte, size)
    w bufR := bufio.NewReader(dat)
    _, err = bufR.Read(b)
    bReader := bytes.NewReader(b)
    return bReader, err
}
Listing 13-3: The PreProcessImage() function definition (/ch-13/imgInject/utils/reader.go)
The function opens a file object in order to obtain a FileInfo structure u 
used to grab size information v. Immediately following are a couple of 
lines of code used to instantiate a Reader instance via bufio.NewReader() and 
then a *bytes.Reader instance via a call to bytes.NewReader() w. The func-
tion returns a *bytes.Reader, which positions you to start using the binary 
package to read byte data. You’ll first read the header data and then read 
the chunk sequence.
Reading the Header Data
To validate that the file is actually a PNG file, use the first 8 bytes, which 
define a PNG file, to build the validate() method (Listing 13-4).
func (mc *MetaChunk) validate(b *bytes.Reader) {
    var header Header
    if err := binary.Read(b, binary.BigEndian, &header.Header)u; err != nil {
        log.Fatal(err)
    }
    bArr := make([]byte, 8)
    binary.BigEndian.PutUint64(bArr, header.Header)v
    if string(bArr[1:4])w != "PNG" {
        log.Fatal("Provided file is not a valid PNG format")
Hiding Data with Steganography   299
    } else {
        fmt.Println("Valid PNG so let us continue!")