title:Spectrum Protection from Micro-transmissions Using Distributed Spectrum
Patrolling
author:Mallesham Dasari and
Muhammad Bershgal Atique and
Arani Bhattacharya and
Samir R. Das
Spectrum Protection
from Micro-transmissions Using
Distributed Spectrum Patrolling
Mallesham Dasari(B), Muhammad Bershgal Atique, Arani Bhattacharya,
and Samir R. Das
Stony Brook University, Stony Brook, USA
PI:EMAIL
Abstract. RF spectrum is a limited natural resource under a signif-
icant demand and thus must be eﬀectively monitored and protected.
Recently, there has been a signiﬁcant interest in the use of inexpensive
commodity-grade spectrum sensors for large-scale RF spectrum moni-
toring. The spectrum sensors are attached to compute devices for signal
processing computation and also network and storage support. However,
these compute devices have limited computation power that impacts
the sensing performance adversely. Thus, the parameter choices for the
best performance must be done carefully taking the hardware limitations
into account. In this paper, we demonstrate this using a benchmark-
ing study, where we consider the detection an unauthorized transmit-
ter that transmits intermittently only for very small durations (micro-
transmissions). We characterize the impact of device hardware and crit-
ical sensing parameters such as sampling rate, integration size and fre-
quency resolution in detecting such transmissions. We ﬁnd that in our
setup we cannot detect more than 45% of such micro-transmissions on
these inexpensive spectrum sensors even with the best possible param-
eter setting. We explore use of multiple sensors and sensor fusion as an
eﬀective means to counter this problem.
Keywords: Distributed spectrum monitoring ·
Transmission detection
1 Introduction
RF spectrum is a natural resource that is in limited supply but is neverthe-
less in great demand due to the exponentiating increase of mobile network use.
Naturally, just like any such resource the spectrum must be protected against
unauthorized use. This issue has recently been exacerbated by the increasing
aﬀordability of software-deﬁned radio technologies making RF transmissions of
arbitrary waveforms in arbitrary spectrum bands practical.
One way to protect spectrum is via large-scale spectrum monitoring. Vari-
ous spectrum monitoring eﬀorts have been underway for many years (e.g., [13–
15]). One issue in such eﬀorts is that lab-grade spectrum sensors are large and
c(cid:2) Springer Nature Switzerland AG 2019
D. Choﬀnes and M. Barcellos (Eds.): PAM 2019, LNCS 11419, pp. 244–257, 2019.
https://doi.org/10.1007/978-3-030-15986-3_16
Spectrum Protection from Micro-transmissions
245
expensive both to procure and operate. This issue has recently been addressed
by promoting the use of small and inexpensive spectrum sensors that can
potentially be crowdsourced, e.g., SpecSense [8], Electrosense [30] and other
projects [6,19,32]. This enables much wider deployment in practical settings.
Some of these works [8,30] use inexpensive software-deﬁned radios (such as
RTL-SDR which costs ≈$20 [27]) and inexpensive compute devices (such as
the RaspberryPi which costs ≈$40 [25]) attached to these spectrum sensors
to enable compute, storage and network capability. ElectroSense has already
deployed using these inexpensive spectrum sensors1 to successfully monitor wide-
area spectrum [26].
However, one major concern here is that these inexpensive spectrum sensors
are too resource limited and may not be able to perform resource intensive spec-
trum sensing and detection tasks, e.g., Fast Fourier Transform (FFT) computa-
tion and signal detection algorithms [7]. Several sensor related parameters (such
as sampling rate, FFT size) and device related parameters (CPU and memory)
aﬀect the signal detection performance. A natural question here is to ask how
much of these parameters impact the transmitter detection performance given
the fact that there are diverse heterogeneous sensors with diverse capabilities.
Understanding the impact of these parameters is crucial to design and deploy
this class of spectrum sensors.
To address this question, we consider detecting an intermittent transmitter
as an example problem and characterize the impact of these parameters on
detection performance. In our setup, the transmitter here generates a tone of
certain duration (e.g., 1 µs) periodically. Detecting such ‘micro-transmissions’ on
these inexpensive devices is hard because we cannot use the optimal parameters
that are used in general, due to poor compute capabilities. To quantify this,
we use detection ratio as a metric to evaluate the system. Detection ratio is
the percentage of transmissions detected by the sensor. We characterize the
detection ratio for four diﬀerent parameters: (1) sampling rate, (2) integration
size, (3) FFT size, and (4) device hardware. Our goal is to understand how each
of these parameters on the inexpensive compute devices aﬀect the detection of
micro-transmissions.
Our key ﬁnding is that the inexpensive sensors perform very poorly (<45%
accuracy) in detecting micro-transmissions on Odroid-C2 board [24] using
USRP-B210 [1] and RTL-SDR [27] sensors. In particular, the detection ratio
drops by almost 90% for an intermittent transmitter when the transmission
duration drops from 1 s to 1 µs (Sect. 2.3). This is because the limited capabil-
ities of the compute devices lead to dropping of samples while computing FFT
and power spectral density (PSD). We also observe that increasing sampling
rate from 1 Msps to 32 Msps leads to a drop in the detection ratio by 85% and
decreasing it from 1 Msps to 512 Ksps drops by 30%. This performance impact
is due to buﬀer overﬂow at the higher sampling rate or insuﬃcient number of
samples at lower sampling rate.
1 We use the term spectrum sensor as sensor and compute device together.
246
M. Dasari et al.
Fig. 1. Architecture of distributed spectrum patrolling. The sensors and attached com-
pute devices are inexpensive and thus suitable for crowd sourcing, but are performance
limited.
We also ﬁnd that the detection ratio is greatly impacted by device hard-
ware. For example, on Odroid-C2 the detection ratio is 70% and 30% less rela-
tive to a desktop PC during local and remote detection, respectively (Sect. 3.2).
The detection performance can also be impacted by the received power which
depends on sensor location, channel conditions as well as the Tx power. To
model this behavior at diﬀerent received power levels, we vary the Tx gain.
As expected, the detection ratio reduces signiﬁcantly on reducing the gain of
transmitter (Sect. 3.3). Finally to tackle the above challenges in using low-cost
spectrum sensors, we deploy multiple sensors in a given location. We show that
using multiple sensors and sensor fusion the detection performance improves
signiﬁcantly (Sect. 4.2).
2 Distributed Spectrum Patrolling
2.1 Background
The increasing cost of spectrum has made it necessary to monitor its usage
and detect illegal spectrum transmissions. Crowdsourcing approaches have been
proposed in the past to deploy distributed spectrum sensors at a large-scale.
However, that necessitates use of inexpensive sensors. To perform large-scale
spectrum monitoring, the most commonly proposed technique is to deploy a dis-
tributed set of inexpensive sensors (see in Fig. 1). For example, SpecSense [8]
and ElectroSense [30] are two successful, well-known examples of distributed
spectrum monitoring. Each such spectrum sensor consists of a low-cost embed-
ded compute platform device such as a RaspberryPi or Odroid-C2 connected
to an RF front end such as RTL-SDR or USRP. Each sensor scans the diﬀer-
ent frequency bands and transfers the sampled IQ data to compute device over
Spectrum Protection from Micro-transmissions
247
Table 1. Spectrum sensor and compute conﬁgurations used in our experiments.
Parameters
RTL SDR USRP B210 Parameters
Desktop Odroid C2 RPi3 RPi1
Sampling rate (Msps)
2.5
Spectrum (MHz-GHz)
24-1.7
Bits/sample
8
Interface (USB version) 2
Cost (≈$)
20
62
50-6
12
2/3
1200
Max clock (GHz) 3.35
1.5
1.2
0.7
CPU cores
Memory (GB)
Interface
Cost (≈$)
4
8
2/3
1000
4
2
2
40
4
1
2
40
1
0.5
2
20
USB interface.2 The compute device either runs signal detection algorithms on
the data locally or sends the data to a remote server for processing. We refer to
these two conﬁgurations as local and remote processing respectively. A number
of such spectrum patrolling systems have been proposed and deployed [8,18,30].
A key design challenge for these distributed sensing systems is to decide the
type of compute device, the sensor and the associated parameters to use. Devices
with better compute power and spectrum sensors with higher sampling rates pro-
vide much higher accuracy, but also cost more. The higher sampling rate also
increases the network bandwidth requirement which is challenging in a wireless
environment. While various deployments use diﬀerent compute devices and sen-
sors, the performance impact of diﬀerent device choices is not well understood.
To address this question, we systematically benchmark the performance of mul-
tiple sensor and compute device parameters in the context of a speciﬁc spectrum
patrolling problem where an intermittent transmitter needs to be detected.
2.2 Measurement Setup
Our measurement setup includes the type of spectrum sensors used, the compute
devices attached with the sensors, and the data collection process. Each of these
are explained below.
Spectrum Sensors: Commodity spectrum sensors vary widely in terms of cost,
performance, and the maximum frequency that they can scan. We experiment
with two types of sensors—a higher performing but relatively expensive sensor,
USRP-B210 ($1200) [1], and popular, inexpensive sensor, RTL-SDR ($20) [27].
The RTL-SDR has a maximum sampling rate of 2.5 Msps while the maximum of
the USRP-B210 is 62 Msps. The number of bits per sample is 8 for RTL and 12
for USRP. More bits means better accuracy because of lower quantization noise.
The sensor capabilities are summarized in Table 1.
Compute Devices: This device is essentially a small form factor single board