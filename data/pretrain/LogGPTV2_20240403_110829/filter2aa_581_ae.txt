Decentralized governance: Most of the sOa deployments follow the concept of centralized 
governance. the design time governance and the runtime governance are managed and 
enforced centrally. the design time governance will look into the aspects such as whether 
the services passed all the unit tests, integration tests, and coding conventions, secured with 
accepted security policies and many more, before promoting from the developer phase to the 
Qa (quality assurance) phase. In a similar way, one can enforce more appropriate checklists 
to be evaluated before the services are promoted from Qa to staging and from staging to 
production. the runtime governance will worry about enforcing authentication policies, 
access control policies, and throttling policies in the runtime. With the microservices-based 
architecture, each service is designed with its own autonomy and highly decoupled from 
each other. the team behind each microservice can follow their own standards, tools, and 
protocols. this makes a decentralized governance model more meaningful for microservices 
architecture.
Decentralized data management: In a monolithic application, all the components in it talk 
to a single database. With the microservices design, where each distinguished functional 
component is developed into a microservice, based on their business capabilities, will have its 
own database—so each such service can scale end to end without having any dependency 
on other microservices. this approach can easily add overhead in distributed transaction 
management, as data resides in multiple heterogeneous database management systems.
Infrastructure automation: Continuous deployment and continuous delivery are two essential 
ingredients in infrastructure automation. Continuous deployment extends continuous delivery 
and results in every build that passes automated test gates being deployed into production, 
while with continuous delivery, the decision to deploy into the production setup is taken 
based on the business need.43 Netflix, one of the pioneers in apIs and microservices, follows 
the former approach, the continuous deployment. With the continuous deployment, the new 
features need not be sitting on a shelf. Once they have gone through and passed all the 
43 Deploying the Netflix API, http://techblog.netflix.com/2013/08/deploying- 
netflix-api.html
Chapter 1  apIs rule!
31
tests, they are ready to be deployed in production. this also avoids deploying a large set 
of new features at one go, hence doing minimal changes to the current setup and the user 
experience. Infrastructure automation does not have a considerable difference between 
monolithic applications and microservices. Once the infrastructure is ready, it can be used 
across all the microservices.
Design for failure: the microservices-based approach is a highly distributed setup. In a 
distributed setup, failures are inevitable. No single component can guarantee 100% uptime. 
any service call may fail due to various reasons: the transport channel between the services 
could be down, the server instance which hosts the service may be down, or even the service 
itself may be down. this is an extra overhead on microservices, compared to monolithic 
applications. each microservice should be designed in a way to handle and tolerate these 
failures. In the entire microservices architecture, the failure of one service should ideally have 
zero or minimal impact on the rest of the running services. Netflix developed a set of tools 
called simian army,44 based on the success of its Chaos Monkey, to simulate failure situations 
under a controlled environment to make sure the system can gracefully recover.
Evolutionary design: the microservices architecture inherently supports the evolutionary 
design. unlike in monolithic applications, with microservices the cost of upgrading or 
replacing an individual component is extremely low, since they’ve been designed to function 
independently or in a loosely coupled manner.
Netflix is one of the pioneers in microservices adoption. Not just Netflix, General 
Electric (GE), Hewlett-Packard (HP), Equinox Inc, PayPal, Capital One Financial Corp, 
Goldman Sachs Group Inc, Airbnb, Medallia, Square, Xoom Corp, and many more 
are early adopters of microservices.45 Even though microservices became a buzzword 
quite recently, some of the design principles brought forward by the microservices 
architecture were there for some time. It’s widely believed that Google, Facebook, and 
Amazon were using microservices internally for several years—when you do a Google 
search, it calls out roughly 70 microservices before returning back the results.
Just like in the case of API vs. service, the differentiator between an API and a 
microservice also relies on the audience. APIs are known to be public facing, while 
microservices are used internally. Netflix, for example, has hundreds of microservices, 
44 The Netflix Simian Army, http://techblog.netflix.com/2011/07/netflix-simian-army.html
45 Innovate or Die: The Rise of Microservices, http://blogs.wsj.com/cio/2015/10/05/
innovate-or-die-the-rise-of-microservices/
Chapter 1  apIs rule!
32
but none of them are exposed outside. The Netflix API still acts as their public-facing 
interface, and there is a one-to-many relationship between the Netflix API and its 
microservices. In other words, one API could talk to multiple microservices to cater a 
request generated by one of the devices supported by Netflix. Microservices have not 
substituted APIs—rather they work together.
 Summary
• 
The API adoption has grown rapidly in the last few years, and almost 
all the cloud service providers today expose public managed APIs.
• 
In contrast to naked APIs, the managed APIs are secured, throttled, 
versioned, and monitored.
• 
An API store (or a developer portal), API publisher, and API gateway 
are the three key ingredients in building an API management 
solution.
• 
Lifecycle management is a key differentiator between a naked API 
and a managed API. A managed API has a lifecycle from its creation 
to its retirement. A typical API lifecycle might flow through Created, 
Published, Deprecated, and Retired stages.
• 
Microservices have not substituted APIs—rather they work together.
Chapter 1  apIs rule!
33
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_2
CHAPTER 2
Designing Security 
for APIs
Just a few days after everyone celebrated Thanksgiving Day in 2013, someone who fooled 
the Target defense system installed a malware in its security and payment system. It was 
the peak time in business for any retailer in the United States. While the customers were 
busy in getting ready for Christmas, the malware which was sitting in the Target payment 
system silently captured all the credit card information from the cashier’s terminal and 
stored them in a server, which was under the control of the attacker. Forty million credit 
card numbers were stolen in this way from 1797 Target stores around the country.1 It was 
a huge breach of trust and credibility from the retailer, and in March 2015 a federal judge 
in St. Paul, Minnesota, approved a $10 million offer by Target to settle the lawsuit against 
the data breach.2
Not just Target or the retail industry but as a whole, the cybercrime has gained a 
lot of momentum in the last few years. Figure 2-1 shows the annual number of data 
breaches and exposed records in the United States from 2005 to 2018. The attack on Dyn 
DNS in 2016 was one of the largest DDoS (distributed denial of service) attacks that took 
many large Internet services down for several hours. Then in February 2018, the largest 
recorded DDoS attack happened against GitHub. More than 1.35 terabits per second of 
traffic hit the developer platform GitHub all at once.3
1 Target Credit Card Hack, http://money.cnn.com/2013/12/22/news/companies/
target-credit-card-hack/
2 Target Data Hack Settlement, http://money.cnn.com/2015/03/19/technology/security/
target-data-hack-settlement/
3 GitHub Survived the Biggest DDoS Attack Ever Recorded, www.wired.com/story/
github-ddos-memcached/
34
Identity Theft Resource Center4 defines a data breach as the loss of information 
from computers or storage media that could potentially lead to identity theft, including 
social security numbers, bank account details, driving license numbers, and medical 
information. The most worrisome fact is that, according to an article5 by The Economist 
magazine, the average time between an attacker breaching a network and its owner 
noticing the intrusion is 205 days.
 Trinity of Trouble
Connectivity, extensibility, and complexity are the three trends behind the rise of data 
breaches around the globe in the last few years. Gary McGraw in his book, Software 
Security,6 identifies these three trends as the trinity of trouble.
Figure 2-1. Annual number of data breaches and exposed records in the United 
States from 2005 to 2018 (in millions), Statistica, 2019
4 Identity Theft Resource Center, www.idtheftcenter.org/
5 The cost of immaturity, www.economist.com/news/business/21677639-business-protecting-
against-computer-hacking-booming-cost-immaturity
6 Gary McGraw, Software Security: Building Security In, Addison-Wesley Publisher
Chapter 2  Designing seCurity for apis
35
APIs play a major role in connectivity. As we discussed in detail, in Chapter 1, we live 
in a world today where almost everything is connected with each other. Connectivity 
exposes many paths of exploitation for attackers, which never existed before. Login to 
Yelp, Foursquare, Instagram, and many more via Facebook means an attacker only needs 
to worry about compromising one’s Facebook account to get access to his/her all other 
connected accounts.
FACEBOOK DATA BREACH ~ SEPTEMBER 2018
in september 2018, facebook team figured out an attack,7 which put the personal information 
of more than 50 million facebook users at risk. the attackers exploited multiple issues on 
facebook code base around the View as feature and got hold of oauth 2.0 access tokens that 
belong to more than 50 million users. access token is some kind of a temporary token or a 
key, which one can use to access a resource on behalf of someone else. say, for example, if i 
want to share my photos uploaded to instagram on my facebook wall, i would give an access 
token corresponding to my facebook wall, which i obtained from facebook, to instagram. now, 
at each time when i upload a photo to instagram, it can use the access token to access my 
facebook account and publish the same on my facebook wall using the facebook api. even 
though instagram can post photos on my facebook wall using the provided access token, 
it cannot do anything else other than that. for example, it cannot see my friend list, cannot 
delete my wall posts, or read my messages. also, this is usually what happens when you log in 
to a third-party application via facebook; you simply share an access token corresponding to 
your facebook account with the third-party web application, so the third-party web application 
can use the access token to access the facebook api to know more about you.
In a connected enterprise, not just the applications developed with modern, 
bleeding edge technology get connected but also the legacy systems. These legacy 
systems may not support latest security protocols, even Transport Layer Security (TLS) 
for securing data in transit. Also, the libraries used in those systems could have many 
well-known security vulnerabilities, which are not fixed due to the complexities in 
upgrading to the latest versions. All in all, a connected system, not planned/designed 
quite well, could easily become a security graveyard.
7 What Went Wrong?, https://medium.facilelogin.com/what-went-wrong-d09b0dc24de4
Chapter 2  Designing seCurity for apis
36
Most of the enterprise software are developed today with great extensibility. 
Extensibility over modification is a well-known design philosophy in the software 
industry. It talks about building software to evolve with new requirements, without 
changing or modifying the current source code, but having the ability to plug in new 
software components to the current system. Google Chrome extensions and Firefox 
add-ons all follow this concept. The Firefox add-on, Modify Headers, lets you add, 
modify, and filter the HTTP request headers sent to web servers. Another Firefox add- 
on, SSO Tracer, lets you track all the message flows between identity providers and 
service providers (web applications), via the browser. None of these are harmful—but, 
then again, if an attacker can fool you to install a malware as a browser plugin, it could 
easily bypass all your browser-level security protections, even the TLS, to get hold of 
your Facebook, Google, Amazon, or any other web site credentials. It’s not just about 
an attacker installing a plugin into the user’s browser, but also when there are many 
extensions installed in your browser, each one of them expands the attack surface. 
Attackers need not write new plugins; rather they can exploit security vulnerability in an 
already installed plugin.
THE STORY OF MAT HONAN
it was a day in august 2012. Mat honan, a reporter for Wired magazine, san francisco, 
returned home and was playing with his little daughter.8 he had no clue what was going 
to happen next. suddenly his iphone was powered down. he was expecting a call—so 
he plugged it into a wall power socket and rebooted back. What he witnessed next blew 
him away. instead of the iphone home screen with all the apps, it asked for him to set up 
a new phone with a big apple logo and a welcome screen. honan thought his iphone was 
misbehaving—but was not that worried since he backed up daily to the iCloud. restoring 
everything from iCloud could simply fix this, he thought. honan tried to log in to iCloud. tried 
once—failed. tried again—failed. again—failed. thought he was excited. tried once again for 
the last time, and failed. now he knew something weird has happened. his last hope was his 
MacBook. thought at least he could restore everything from the local backup. Booted up the 
MacBook and found nothing in it—and it prompted him to enter a four-digit passcode that he 
has never set up before.
8 How Apple and Amazon Security Flaws Led to My Epic Hacking, www.wired.com/2012/08/
apple-amazon-mat-honan-hacking
Chapter 2  Designing seCurity for apis
37
honan called apple tech support to reclaim his iCloud account. then he learned he has called 
apple, 30 minutes before, to reset his iCloud password. the only information required at that 
time to reset an iCloud account was the billing address and the last four digits of the credit 
card. the billing address was readily available under the whois internet domain record honan 
had for his personal web site. the attacker was good enough to get the last four digits of 
honan’s credit card by talking to amazon helpdesk; he already had honan’s email address and 
the full mailing address—those were more than enough for a social engineering attack.
honan lost almost everything. the attacker was still desperate—next he broke into honan’s 
gmail account. then from there to his twitter account. one by one—honan’s connected 
identity falls into the hands of the attacker.
The complexity of the source code or the system design is another well-known 
source of security vulnerabilities. According to a research, after some point, the number 
of defects in an application goes up as the square of the number of the lines of code.9 
At the time of this writing, the complete Google codebase to run all its Internet services 
was around 2 billion lines of code, while Microsoft Windows operating system had 
around 50 million lines of code.10 As the number of lines of code goes high, the number 
of tests around the code should grow as well, to make sure that none of the existing 
functionalities are broken and the new code works in the expected way. At Nike, 1.5 
million lines of test code is run against 400,000 lines of code.11
 Design Challenges
Security isn’t an afterthought. It has to be an integral part of any development project 
and also for APIs. It starts with requirements gathering and proceeds through the design, 
development, testing, deployment, and monitoring phases. Security brings a plethora 
of challenges into the system design. It’s hard to build a 100% secured system. The 
only thing you can do is to make the attacker’s job harder. This is in fact the philosophy 
followed while designing cryptographic algorithms. The following discusses some of the 
key challenges in a security design.
9 Encapsulation and Optimal Module Size, www.catb.org/esr/writings/taoup/html/ 
ch04s01.html
10 Google Is 2 Billion Lines of Code, www.catb.org/esr/writings/taoup/html/ch04s01.html
11 Nike’s Journey to Microservices, www.youtube.com/watch?v=h30ViSEZzW0
Chapter 2  Designing seCurity for apis
38
MD5
MD512 algorithm (an algorithm for message hashing), which was designed in 1992, was 
accepted to be a strong hashing algorithm. one of key attributes of a hashing algorithm is, 
given the text, the hash corresponding to that text can be generated, but, given a hash, the text 
corresponding to the hash cannot be derived. in other words, hashes are not reversible. if the 
text can be derived from a given hash, then that hashing algorithm is broken.
the other key attribute of a hashing algorithm is that it should be collision-free. in other words, 
any two distinct text messages must not result in the same hash. the MD5 design preserved 
both of these two properties at the time of its design. With the available computational power, 
it was hard to break MD5 in the early 1990s. as the computational power increased and it was 
made available to many people via cloud-based infrastructure as a service (iaas) providers, 
like amazon, MD5 was proven to be insecure. on March 1, 2005, arjen Lenstra, Xiaoyun Wang, 
and Benne de Weger demonstrated that MD5 is susceptible to hash collisions.13
 User Experience
The most challenging thing in any security design is to find and maintain the right 
balance between security and the user comfort. Say you have the most complex 
password policy ever, which can never be broken by any brute-force attack. A password 
has to have more than 20 characters, with mandatory uppercase and lowercase letters, 
numbers, and special characters. Who on Earth is going to remember their passwords? 
Either you’ll write it on a piece of paper and keep it in your wallet, or you’ll add it as 
a note in your mobile device. Either way, you lose the ultimate objective of the strong 
password policy. Why would someone carry out a brute-force attack when the password 
is written down and kept in a wallet? The principle of psychological acceptability, 
discussed later in this chapter, states that security mechanisms should not make the 
resource more difficult to access than if the security mechanisms were not present. 
We have few good examples from the recent past, where user experience drastically 
improved while keeping security intact. Today, with the latest Apple Watch, you can 
unlock your MacBook, without retyping the password. Also the face recognition 
12 RFC 6156: The MD5 Message-Digest Algorithm, https://tools.ietf.org/html/rfc1321
13 Colliding X.509 Certificates, http://eprint.iacr.org/2005/067.pdf
Chapter 2  Designing seCurity for apis
39
technology introduced in the latest iPhones lets you unlock the phone, just by looking at 
it. You never even notice that the phone was locked.
It is essential that the human interface be designed for ease of use, so that 
users routinely and automatically apply the protection mechanisms cor-
rectly. Also, to the extent that the user's mental image of his protection goals 
matches the mechanisms he must use, mistakes will be minimized. If he 
must translate his image of his protection needs into a radically different 
specification language, he will make errors.
—Jerome Saltzer and Michael Schroeder
 Performance
Performance is another key criterion. What is the cost of the overhead you add to your 
business operations to protect them from intruders? Say you have an API secured with 
a key, and each API call must be digitally signed. If the key is compromised, an attacker 
can use it to access the API. How do you minimize the impact? You can make the key 
valid only for a very short period; so, whatever the attacker can do with the stolen key 
is limited to its lifetime. What kind of impact will this have on legitimate day-to-day 
business operations? Each client application should first check the validity period of 
the key (before doing the API call) and, if it has expired, make a call to the authorization 
server (the issuer of the key) to generate a new key. If you make the lifetime too short, 
then almost for each API call, there will be a call to the authorization server to generate 
a new key. That kills performance—but drastically reduces the impact of an intruder 
getting access to the API key.
The use of TLS for transport-level security is another good example. We will be 
discussing TLS in Appendix C, in detail. TLS provides protection for data in transit. 
When you pass your login credentials to Amazon or eBay, those are passed over a 
secured communication channel, or HTTP over TLS, which is in fact the HTTPS. No one 
in the middle will be able to see the data passed from your browser to the web server 
(assuming there is no room for a man-in-the-middle attack). But this comes at a cost. 
TLS adds more overhead over the plain HTTP communication channel, which would 
simply slow down things a bit. For the exact same reason, some enterprises follow the 
strategy where all of the communication channels open to the public are over HTTPS, 
while the communication between internal servers are over plain HTTP. They make sure 
Chapter 2  Designing seCurity for apis
40