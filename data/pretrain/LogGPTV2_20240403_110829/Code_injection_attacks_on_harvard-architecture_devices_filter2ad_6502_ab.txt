actions. Therefore, our requirement (in terms of instruc-
tions present in the attacked node) is much less stringent.
Furthermore, in our scheme, the injected code is persistent.
5. ATTACK OVERVIEW
This section describes the code injection attack. We ﬁrst
describe our system assumptions and present the concept
of a meta-gadget, a key component of our attack. We then
provide an overview of the proposed attack. Implementation
details are presented in the next section.
5.1 System assumptions
Throughout this paper, we make the following assump-
tions:
• The WSN under attack is composed of Micaz nodes [7].
• All nodes are identical and run the same code.
• The attacker knows the program memory content 1.
• Each node is running the same version of TinyOS and
no changes were performed in the OS libraries.
• Each node is conﬁgured with a bootloader.
• Running code has at least one exploitable buﬀer over-
ﬂow vulnerability.
5.2 Meta-gadgets
As discussed in Section 3, it is very diﬃcult for a remote
attacker to directly inject a piece of code on a Harvard-based
sensor. However, as described in [23], an attacker can exploit
a program vulnerability to execute a gadget, i.e. a sequence
of instructions already in program memory that terminates
1It has, for example, captured a node and analysed its binary
code.
with a ret. Provided that it injects the right parameters
into the stack, this attack can be quite harmful. The set of
instructions that an attacker can execute is limited to the
gadgets present in program memory.
In order to execute
more elaborate actions, an attacker can chain several gadgets
to create what we refer to as meta-gadget in the rest of this
paper.
In [23], the authors show that, on a regular computer, an
attacker controlling the stack can chain gadgets to undertake
any arbitrary computation. This is the foundation of what
is called return-oriented programming. On a sensor, the ap-
plication program is much smaller and is usually limited to
a few kilobytes.
It is therefore questionable whether this
result holds. However, our attack does not require a Turing
complete set of gadgets. In fact, as shown in the rest of this
section, we do not directly use this technique to execute ma-
licious code as in [23]. Instead, we use meta-gadgets to inject
malicious code into the sensor. The malicious code, once in-
event message t∗
Receive.receive(message t∗ bufPtr, void∗ payload,
uint8 t len){
// BUFF LEN is deﬁned somewhere else as 4
uint8 t tmp buﬀ[BUFF LEN];
rcm = (radio count msg t∗)payload;
// copy the content in a buﬀer for further processing
for (i=0;ibuﬀ len; i++){
tmp buﬀ[i]=rcm−>buﬀ[i]; // vulnerability
}
return bufPtr;
}
(a) Sample buﬀer management vulnerability.
// Address of gadget 1
uint8 t payload[ ]={
0x00,0x01,0x02,0x03, // padding
0x58,0x2b,
ADDR L,ADDR H, // address to write
0x00,
DATA,
0x00,0x00,0x00,
0x85,0x01,
0x3a,0x07,
0x00,0x00
};
// Padding
// data to write
// padding
// address of gadget 2
// address of gadget 3
// Soft reboot address
(b) Payload of the injection packet.
Memory
address
0x10FF
...
0x1062
0x1061
0x1060
0x105F
0x105E
0x105D
0x105C
0x105B
Usage
End Mem
...
other
other
@retH
@retL
tmpbuﬀ[3]
tmpbuﬀ[2]
tmpbuﬀ[1]
tmpbuﬀ[0]
normal
value
value after
overﬂow
...
0xXX
0xXX
0x38
0x22
0
0
0
0
...
ADDRH
ADDRL
0x2b
0x58
0x03
0x02
0x01
0x00
(c) Buﬀer overﬂow with a packet containing the bytes
shown in Figure 2(b).
Figure 2: Vulnerability exploitation.
jected, is then executed as a “regular” program. Therefore,
as shown below, the requirement on the present code is less
stringent. Only a limited set of gadgets is necessary.
5.3
Incremental attack description
The ultimate goal of our attack is to remotely inject a
piece of (malicious) code into a sensor’s ﬂash memory. We
ﬁrst describe the attack by assuming that the attacker can
send very large packets. We then explain how this injection
can be performed with very small packets. This section pro-
vides a high-level description. The details are presented in
Section 6.
5.3.1
Injecting code into a Harvard-based sensor
without packet size limitation
As discussed previously, most sensors contain bootloader
code used to install a given image into program memory
(see Section 2.3). It uses a function that copies a page from
data memory to program memory. One solution could be
to invoke this function with the appropriate arguments to
copy the injected code into program memory. However, the
bootloader code is deeply inlined. It is therefore impossible
to invoke the desired function alone.
We therefore designed a “Reprogramming” meta-gadget,
composed of a chain of gadgets. Each gadget uses a sequence
of instructions from bootloader code and several variables
that are popped from the stack. To become operational,
this meta-gadget must be used together with a specially-
crafted stack, referred to as the fake stack in the rest of this
section. This fake stack contains the gadget variables (such
as ADDRM ; the address in the program memory where to
copy the code), addresses of gadgets and code to be injected
into the node. Details of this meta-gadget and the required
stack are provided later in Section 6.
5.3.2
Injecting code into a Harvard-based sensor with
small packets
The attack assumes that the adversary can inject arbitrar-
ily large data into the sensor data memory. However, since
the maximum packet size is 28 bytes, the previous attack
is impractical. To overcome this limitation, we inject the
fake stack into the unused part of data memory (see Fig-
ure 1(b)) byte-by-byte and then invoke the Reprogramming
meta-gadget, described in the previous section, to copy the
malware in program memory.
In order to achieve this goal, we designed an “Injection”
meta-gadget that injects one byte from the stack to a given
address in data memory. This Injection meta-gadget is de-
scribed in Section 6.3.
The overview of the attack is as follows:
1. The attacker builds the fake stack containing the ma-
licious code to be injected into data memory.
2. It then sends to the node a specially-crafted packet
that overwrites the return address saved on the stack
with the address of the Injection meta-gadget. This
meta-gadget copies the ﬁrst byte of the fake stack (that
was injected into the stack) to a given address A (also
retrieved from the stack) in data memory. The meta-
gadget ends with a ret instruction, which fetches the
return address from the fake stack. This value is set
to 0. As a result, the sensor reboots and returns to a
“clean state”.
3. The attacker then sends a second specially-crafted pa-
cket that injects the second byte of the fake stack at
address A + 1 and reboots the sensor.
4. Steps 2 and 3 are repeated as necessary. After n pack-
ets, where n is the size of the fake stack, the whole
fake stack is injected into the sensor data memory at
address A.
5. The attacker then sends another specially-crafted pa-
cket to invoke the Reprogramming meta-gadget. This
meta-gadget copies the malware (contained into the in-
jected fake stack) into program memory and executes
it, as described in Section 5.3.1.
5.3.3 Memory persistence across reboots
Once a buﬀer overﬂow occurs, it is diﬃcult [12], and some-
times impossible, to restore consistent state and program
ﬂow. Inconsistent state can have disastrous eﬀects on the
node.
In order to re-establish consistent state, we reboot
the attacked sensor after each attack. We perform a “soft-
ware reboot” by simply returning to the reboot vector (at
address 0x0). During a software reboot, the init functions
inserted by the compiler/libc initializes the variables in data
section. It also initializes the BSS section to zero. All other
memory areas (in SRAM) are not modiﬁed. For example,
the whole memory area (marked as “unused” in Figure 1(b)),
which is located above the BSS section and below the max
value of the stack pointer, is unaﬀected by reboots and the
running application.
This memory zone is therefore the perfect place to inject
hidden data. We use it to store the fake stack byte-by-
byte. This technique of recovering bytes across reboots is
somewhat similar to the attack on disk encryption, presented
in [13], which recovers the data in a laptop’s memory after
a reboot. However, one major diﬀerence is that, in our case,
the memory is kept powered and, therefore, no bits are lost.
6.
IMPLEMENTATION DETAILS
This section illustrates the injection attack by a simple
example. We assume that the node is running a program
that has a vulnerability in its packet reception routine as
shown in Figure 2(a). The attacker’s goal is to exploit this
vulnerability to inject malicious code.
This section starts by explaining how the vulnerability is
exploited. We then describe the implementation of the In-
jection and Reprogramming meta-gadgets that are needed
for this attack. We detail the structure of the required fake
stack, and how it is injected byte-by-byte into data memory
with the Injection meta-gadget. Finally, we explain how the
Reprogramming meta-gadget uses the fake stack to repro-
gram the sensor with the injected malware.
6.1 Buffer overﬂow exploitation
The ﬁrst step is to exploit a vulnerability in order to take
control of the program ﬂow. In our experimental example,
we use standard buﬀer overﬂow. We assume that the sensor
is using a packet reception function that has a vulnerabil-
ity (see Figure 2(a)). This function copies into the array
tmp_buff of size BUFF_LEN, rcm->buffer_len bytes of ar-
ray rcm->buff, which is one of the function parameters. If
rcm->buffer_len is set to a value larger than BUFF_LEN, a
instr
Vulnerable function
stack/buﬀer
payload
. . .
GL
GH
control ﬂow redirection
ret
. . .
comments
1st gadget address
o
o
Ideal Gadget: pop address, data to registers, stores data
pop r30 AddrL
pop r31 AddrH
pop r18 Data
st Z,r18
Byte to inject
write byte to memory
Injection Addr.
ret
0x00
0x00
reboot
(a) Ideal Injection meta-gadget.
Vulnerable function
instr.
address
5e6:
instr
. . .
5e7:
ret
stack/buﬀer
injected
. . .
0x58
0x2b
control ﬂow redirection
Gadget 1: load address and data to registers
2b58:
2b59:
2b60:
2b61:
2b62:
2b63:
2b64:
2b65:
pop r25
pop r24
pop r19
pop r18
pop r0
out 0x3f, r0
pop r0
pop r1
AddrL
AddrH
0
Data
0
0
0
0x85
0x01
comments
next gadget
Injection Addr.
Byte to inject
o
o
o
o
o
2b66:
reti
next gadget
control ﬂow redirection
Gadget 2: move address from reg r24:25 to r30:31 ( Z )
185 :
186:
movw r30, r24
std Z+10, r22
187:
ret
0x3a
0x07
control ﬂow redirection
Gadget 3: write data to memory, and reboot
73a:
st Z, r18
next gadget
write byte
memory
to
soft reboot
73b:
ret
0x00
0x00
(b) Real Injection meta-gadget.
Figure 3: Injection meta-gadget.
buﬀer overﬂow occurs 2. This vulnerability can be exploited
to inject data into the stack and execute a gadget as illus-
trated below. During a normal call of the receive function,
the stack layout is displayed in Figure 2(c) and is used as
follows:
• Before the function receive is invoked the stack pointer
is at address 0x1060.
• When the function is invoked the call instruction stores
the address of the following instruction (i.e. the in-
struction following the call instruction) into the stack.
2This hypothetical vulnerability is a quite plausible ﬂaw –
some have been recently found and ﬁxed in TinyOS see [5]
In this example we refer to this address as @ret (@retH
and @retL being respectively the MSB and the LSB
bytes).
• Once the call instruction is executed, the program
counter is set to the beginning of the called function,
i.e., the receive function. This function is then in-
voked. It possibly saves, in its preamble, the registers
on the stack (omitted here for clarity), and allocates
its local variables on the stack, i.e. the 4 bytes of the