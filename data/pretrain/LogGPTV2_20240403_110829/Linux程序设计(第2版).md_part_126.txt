660
Linux程序设计
为了让大家对表单有一个完整的认识，我们把HTML示例中的METHOD类型改为GET.它
就是我们的cgi3.html文件。如果现在再提交我们的表单，数据传递给cgi2.sh的方式就与刚才稍
有不同了，我们现在看到的画面如图20-6所示。
Netscapc
GoCom
GTEOLE
Help
3
N
Baci
Reload
Hom
Netscepe
Priot
Secunty
BockmatsLocaonttp：/Localhst/ogi-bin/cg2.sh7naar'sR
Ht/ogi-bia/cg12a
*127.0.0.1
阁20-6
表单信息的编码工作还是照常进行，但CONTENT_LENGTH环境变量不再出现了、这个信
息现在出现在QUERY_STRING变量里，不再出现在标准输人上。“METHOD=GET”处理起来
比较容易，但“METHOD=POST”适用于除简单表单以外的所有情况。
20.3.4使用扩展URL的CGI程序
在转向对传递给CGI程序的数据进行解码操作之前，我们先来看看向CGI程序发送数据的其
他办法一—把信息追加在URL地址的后面。服务器程序分离出URL地址的前半部分（即问号“？”
前面的部分），把它用做将被调用的CGI程序的名字：而URL地址的后半部分将整个地用做该程
序的一个参数，就好象它是从表单提交来的一样。
动手试试：一个查询字符串
加入jaVa编程群：524621833
---
## Page 679
第20章因特网程序设计11：CG1
661
再次调用cgi2.sh，但这次要使用如下所示的URL地址：
http: //1ocalhost /cgi-bin/cgi2 sh7Andrew+Stones=10
CGI程序这次看到的表单数据如图20-7所示。
Netscepe
FlleEdtViewGoCommunicao
Help
N
Back
FardReload
Home
SearchNetscape
Prini
Security
BookarksLocalonttp//loeahest/cgi-bin/cg2sh7andrewarsRela
APEXOE-C/13
/ogi-i/epil.sa
odremfstanese10
图20-7
这种向CGI程序传递信息的办法经常用在这样的情况里：服务器已经生成了客户正在浏览的
HTML页面，但又想在页面里额外添加一些编码数据。需要用户身份验证的Web主页就是一个这
样的例子。因为对某个页面的每次请求在服务器看来都是没有前后联系的，所以，在理论上，
用户每访问一个页面就需要输人一次他们的口令字。而实际上可以让用户去访问一个特殊的
URL地址，这个URL地址里已经把用户名/口令字或者一个身份验证密钥编码在其中了。
假设有这样一位用户，他的名字是Jenny Stone，口令字是secret（从她选的口令字上看，她
可不够职明..。她想去访问一个在线报纸的天气预报主页，而主页要求她先注册后访问。这个
主页不是向她是示一个需要填写姓名和口令字的表单，而是让她输人一个特殊的URL地址，地
址的格式是下面这个样子的：
http://ww.paper.con/cgi-bin/access?usersJenny+Stones4passwd=gecret&page=weather
虽然这看起来有些麻烦，但她可以把它保存为一个浏览器书签或快捷键，再想访问这个
加入jaVa编程群：524621833
---
## Page 680
662Linux程序设计
URL地址时只要选一下就行了。以后再访问这个主页时就不必勿次都要重新输人用户名和口令
字了。而JennyStone也不必记住或写下自已以前访问各种在线服务时给出的用户名和口令字了
这个办法的缺点是口令字是以纯文本形式保存的、而这并不是一个保存或在网上传递用户
名和口令字的好方法。在实际成用中，入们经常使用一种名为“cookie”的功能来把某个用户的
访问权利保存在一个站点里，这就使用户不必记忆白已的口令字。可这个方法也有缺点，部就
是cookie是由浏览器保存在本地机器上的。因此，即使你在自已家里上网注册并在自家的PC上
保存了一个cookie，这对你上班时使用另外一台PC去访问那个站点也不会有什么帮助。我们不
会在这一章里继续对cookie进行讨论了。
20.3.5对表单数据进行解码
现在我们已经知道怎样才能获得表单返回的数据、下一步就需要把它解码为更适合实际
处理使用的格式。这个问题涉及的方面有很多，但只要你解决过一次，就可以把这个解码软件
一直重复性地用下去了。在因特网上已经有许多能够完成表单数据解码工作的现成程序了，用
来编写它们的语言包括Tel、Perl、C和C++等许多种。它们有些是公共城软件，另外一些则有限
制性相对强一些的许可证问题。
但大家不必为此担心，因为我们将用自已的程序来完成表单数据的解码工作。其实这也并
不复杂，只要把编码操作反过来就可以达到目的。我们已经知道表单数据的编码规则，把它反
过来就是解码的规赔，所以我们只要写出一个能够实现解码规则的软件不就行了吗。先给我们
这第一次尝试起个名字，就叫它decode1.c好了。为了使事情简单化，需要给表单数据里我们能
够处理的参数个数和参数名、值各自的长度加上一些硬性的限制。
动手试试：一个用C语言编写的CGI解码程序
1)在套路化的头文件和常数定义之后，我们定义了一个数据结构name_value_st，它的作用
是保存输人城的名字和与之对应的值，每个输人域都对应着一个这样的数据结构。接下来是我
们将要用到的各种函数的框架定义。
include 
#include 
finclude 
define FIELD_LEN 250 /* bov Long each same or value can bo */
chaz value[FIELD_LEN • 1] :
char name[FIELD_LEN + 1];
anTes"aueu
nate_value name_val_pairs [NV_PAIRSi :
static int get_input (void);
static char x2c(char *what);
static void wnescape_url (char *ur21:;
2）主函数main本身做的事情并不多。它先调用get_input函数对表单的编码数据进行处理、
加入jaVa编程群：524621833
---
## Page 681
第20章因特网程序设计11：CGI
663
把处理结果保存到name_val_pairs结构里去。然后把以“Content-type”和·个空白行开始的解
码数据发送回客户。如下所示：
int main(int argc. char *argv[])
int nv_entry_number = 0;
if (1get_input())(
exit (EXIT_PAILURE) :
printf(-Content-type: text/plain\r\n*);
printf(\r\n):
printf(*Information decoded was:-\r\n\rn*):
while|nane_val_pairs[nv_entry_nunber].name[0]!=\0′}(
printf(*Name=Bs, Value=ks\r\n*,
name_val_pairs [nv_entry_nunber] .name,
nv_entry_number++;
name_va1_pairs [nv_entry_nunber] . value) :
printf（"\r\n];
1
exit(EXIT_SUCCESS);
/
3）下面是get_input函数的定义，这个函数的功能就像它名字说的那样是“取得输人”。我们
先要把请求类型是POST还是GET确定下来，然后再把数据拷贝到一个名为ip（data的数据块里去。
如下所示：
static int get_input (void)
int nv_entry_number ± 0;
char *ip_data =0;
int got_data = 0;
int ip_length = 0:
char tnp_buffer[(FIBLD_LEN * 2)+ 2];
int tnp_offset = 0;
int chars_processed = 0:
char *tmp_char,ptr:
if（tsp_char_ptr）（
tap_chax_ptr = getenv *REgUEST_METHOD*1 :
if(strcmp（tap_char_ptr,*posr*）a 0）(
if （tmp_char_ptr}(
tap_char_ptr  get env(*CONTENT_LENGTH*) ;
ip_length s atoi(tep_char_ptr):
ip_data =nallociip_length·1):
if(fread(ip_data,1. ip_length,
:/*allow for NULL character */
send_error(*Bad read from stdin');
stdin)!s ip_length){
return(0) ;
ip_data[ip_length] =*\C′;
got_data = 1;
if（tnp_char_ptr）（
tnp_char_ptr =_ getenv(*REQUEST_METHoD*):
if（stronpigetenv（*REQUEST_METHOD*）GET1==0）(
tnp_char_ptr =getenv(*QUERY_STRING*):
if{tmp_char_ptr}{
p_length = strlen(tep_char_ptr);
ip_data=malloc(ip_length1)/a11ow for NULL character */
strcpy(ip_data, getenv(*QUERY_STRING*)):
ip_data[ip_length]\0';
加入java编程群：524621833
---
## Page 682
664
Linux程序设计
got_data = 1;
if(!got data)(
send_error(*No data received*):
return(0) ;
if (ip..length < 01{
send_error(*Input length not 0*):
: (0) uzn19 4
4）进行到这，我们就已经把编了码的数据保存在ip_data里了。接下来要把HTML提交数据
里的NAME和VALUE成双成双地提取出来，对每对数据项分别进行解码。我们知道“&”字符
是用来分隔--对一对的“NAME=VALUE”组合的，所以我们就要从出现“&”字符的位置把它
们分断，再把结果依次传递到load_nv_pair函数去分别进行解码。
memset(name_val_pairs, *\0*, sizeof (name_val_pairs)):
while (chars_proccssed <e ip_length b& nv_entry_number < NV_PAiRS)(
tmp_char_ptr = ip_data;
/* copy a single nane=value pair to a Cmp buffer */
vhile (*tnp_char_ptr &&
tmp_offset <FI8LD_1.EN)(
*tmp_char_ptr
!='&'&&
tnp_char_ptr++:
tmp_offset++;
chars_processed++;
tmp_butfer[tmp_offset] <*`0′
/* decode and load the pair *
load_nv_pair (tap_buffer, nv_entry_nunber) ;
/* move on to the next namevvalue pair */
tmp_char_ptr++:
nv_entry_number++ 
return(1);
5)大家应该注意到我们把所有错误都传递到那个名为send_error的函数去了，它将向客户发
回一个错误信息字符串。这个函数没有多复杂，下面就是它的定义：
static void send_error(char *error_text)
printf(*Content-type: text/plain\r\n"1;
printf(*Woops:- es\r\n*, error_text);
printt("\r\n*);
6)实际解码工作是由函数load_nv_pair负责的，我们在getinput函数里调用的就是它。它先
把每对“NAME=VALUE”组合进一步分新为NAME和VALUE两个部分，把它们分别放到我们
数据结构的不同单元里去；然后调用另一个名为unescape_url的函数继续解码。
/*Assumes nane_val_pairs array is currently full of NULL cbaracters */
static void load_nv_pair(char *tup_buffer, int nv_entry)
加入java编程群：524621833
---
## Page 683
第20章因特网程序设计I1：CGI
665
int chars_processed = 0;
char *src_char_ptr;
/*get the part before the 's'sign *,
dest_char_ptr = nane_val_pairs [nv_entry′ .name:
src_char_ptr = tmp_buffer;
whilef*src_char_ptr &&
*src_char_ptr I
chars_prccessed < FIELD_LEN) {
if （*src_char_ptr =
xd"xeus"sap, (.+.
chars_processed++;
src_char_ptr++;
).a,dxes.} 3T
/skip the ‘=character */
/* get the part after the s' sign. */
sre_char_ptr++;
dest_char_ptr = nane_val_pairs[nv_entry] .value;
while(*src_char_ptr &&
chars_processed = 0;
*src_chax_ptr !'=
chars_processed < FIELD_LEN1 {
dest_char_Dtr++;
src_char_ptr++;
chars_processed++:
2
/Now need to decode exx characters from the two fields */
unescape_ur1 (name_val_pairs{nv_entry) .name) ;
unescape_url(nane_val_pairs(nv_entry].value);
1
7）unescape_url函数再调用函数x2c把（不是字母或数字的）特殊字符从其%HH表示方式解
码为文本字符。如下所示：
/* this routine borrowed from the exanples that come with the NcSA server */
static void unescape_url(char *url)
:A'x qut
for