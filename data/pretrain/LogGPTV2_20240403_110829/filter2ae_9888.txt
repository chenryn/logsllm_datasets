**作者：1mperio@云鼎实验室**

**原文链接：**

北京时间2月26日凌晨3点，SaltStack官方发布了一份高危漏洞风险通告，涉及CVE-2021-25281、CVE-2021-25282和CVE-2021-25283。此前，云鼎实验室的安全研究员1mperio已于2020年11月16日发现并报告了这些漏洞。

在对CVE-2020-17490和CVE-2020-16846进行分析时，研究人员发现CVE-2020-17490的补丁并未完全修复问题，导致wheel_async模块仍然存在未授权访问的风险，可以调用wheel模块中的方法。基于此，进一步分析SaltStack的wheel模块，最终发现了配置模块中的模板注入漏洞，可实现未授权远程代码执行。

## 引言

SaltStack是VMware子公司开发的一款运维管理工具，支持数万台服务器的管理和配置。其主要功能包括配置文件管理和远程命令执行，具有易用性和强大功能，在GitHub上获得了11.4k星标。

SaltStack完全使用Python编写，采用C/S架构。其中，Server端被称为Master，Client端被称为Minion。一个Master可以向多个Minion下发配置文件并远程执行命令。SaltStack由多个程序组成，主要包括salt、salt-master、salt-minion和salt-api等。salt-master监听4505和4506端口，分别用于消息发布和监控数据接收。

salt程序可以调用大量函数，并可以指定minion或一组minion作为目标。salt-api通过cherrypy或tornado提供REST接口，默认使用cherrypy。本文将重点讨论salt-master和salt-api。

文中指定代码位置采用以下约定：`FileLocation:Classname.method()` 或 `FileLocation:Method()`

## CVE-2021-25281 未授权访问

通过对CVE-2020-25592的补丁进行分析，发现该补丁通过调用认证模块对SSH方法进行权限认证。然而，在`salt/salt/netapi/init.py:NetapiClient.run()` 方法中，通过getattr动态调用NetapiClient类中的方法，并将args和kwargs作为参数传入。可调用的方法包括：

1. local
2. local_async
3. local_batch
4. local_subset
5. runner
6. runner_async
7. ssh
8. wheel
9. wheel_async

经过分析，发现`wheel_async`方法存在未授权调用的问题，而其他方法（除SSH外）均生成一个job到zeromq，后续再进行消费者认证。`wheel_async`异步调用wheel包中的方法。

调用链如下：
```
salt/salt/netapi/init.py:NetapiClient.run() ⇒
salt/salt/netapi/init.py:NetapiClient.wheel_async() ⇒
salt/salt/wheel/init.py:WheelClient.cmd_async() ⇒
salt/salt/client/mixins.py:AsyncClientMixin.asynchronous()
```

目标函数为`self._proc_function`，low参数为POST可控参数，fun参数值在`salt/salt/wheel/init.py:WheelClient.cmd_async()` 方法中通过low参数的fun键获取。通过`salt/salt/client/mixins.py:AsyncClientMixin._proc_function()` 函数调用`salt/salt/client/mixins.py:SyncClientMixin.low()`，并通过该函数使用args参数和kwargs参数动态调用wheel包中的方法。

可调用的方法如下：
- config.apply
- config.update_config
- config.values
- error.error
- file_roots.find
- file_roots.list_env
- file_roots.list_roots
- file_roots.read
- file_roots.write
- key.accept
- key.accept_dict
- key.delete
- key.delete_dict
- key.finger
- key.finger_master
- key.gen
- key.gen_accept
- key.gen_keys
- key.gen_signature
- key.get_key
- key.print
- key.list
- key.list_all
- key.master_key_str
- key.name_match
- key.reject
- key.reject_dict
- minions.connected
- pillar_roots.find
- pillar_roots.list_env
- pillar_roots.list_roots
- pillar_roots.read
- pillar_roots.write

## CVE-2021-25282 有限制任意文件写漏洞

`salt/salt/wheel/pillar_roots.py:write()` 方法存在任意文件写入漏洞，但需要`opts["pillar_roots"]` 中的路径存在。由于是异步调用，返回的是jid和tag，通过jid和tag查询任务执行结果时需要认证。

## CVE-2021-25283 模板注入漏洞

通过`--log-level=debug` 参数开启调试模式，定位到master自动加载逻辑。从`salt/salt/master.py:Maintenance.run()` 可以看出，每个`self.loop_interval` 循环一次，loop_interval在配置文件中可配置，默认为60秒。通过调试发现，在`salt.daemons.masterapi.clean_old_jobs` 中读取minion配置文件。

调用栈如下：
```
salt/salt/daemons/masterapi.py:clean_old_jobs() ⇒
salt/salt/minion.py:MasterMinion.init() ⇒
salt/salt/config/init.py:minion_config()
```

在`salt/salt/minion.py:MasterMinion.init()` 中，自动加载grains相关参数，grains用于收集各个minion中的系统信息。在加载配置文件时，调用了`apply_sdb()` 方法解析配置中以`sdb://` 开头的字符串。

调用链如下：
```
salt/salt/config/init.py:apply_sdb() ⇒
salt/salt/utils/sdb.py:sdb_get()
```

在`sdb_get()` 函数中，对于`sdb://aaaa/bbbb` 字符串，SaltStack将在配置文件中查找`aaaa` 配置项，并读取其中的`driver` 字段赋值给`fun` 变量，`bbbb` 赋值给`query` 参数。最后通过`LazyLoader` 动态调用`fun` 变量对应的方法，`LazyLoader` 将加载`salt.sdb` 包下的所有文件，并调用其中的`get` 方法。

最终定位到`salt/salt/sdb/rest.py` 文件中的`query()` 方法。在这里，`key` 为上述字符串中`bbbb` 的值，并且还接受形如`bbbb?ccc=ddd` 的参数，并通过`**key_vars` 传递到`compile_template` 方法中。

这里的渲染使用Jinja模板引擎，已知Jinja存在模板注入风险。如果模板可控且没有过滤，则可以执行任意代码。传入的参数是`profile[key]['url']`，即配置文件中`aaaa` 配置项中`bbbb` 字典的`url` 值。

调用链如下：
```
salt/salt/template.py:compile_template() ⇒
salt/salt/utils/templates.py:JINJA() ⇒
salt/salt/utils/templates.py:wrap_tmpl_func() ⇒
salt/salt/utils/templates.py:render_jinja_tmpl()
```

最终调用`render_jinja_tmpl` 中的`template.render()` 方法，在此处渲染模板，未对传入参数进行过滤，从而可以进行模板注入。

虽然自动加载逻辑未加载master的配置文件，但在某个方法中调用了`master_config` 方法，`master_config` 和`minion_config` 一样都调用了`apply_sdb()` 方法，从而实现了未授权RCE。

## 修复建议

1. 尽快更新官方补丁。
2. 如果未使用`wheel_async` 模块，可以在`salt/netapi/init.py` 中将其入口删除。

## 拓展链接

CVE-2020-17490和CVE-2020-16846详情请见：
[漏洞分析｜SaltStack未授权访问及命令执行漏洞分析（CVE-2020-16846/25592）](http://mp.weixin.qq.com/s?__biz=MzU3ODAyMjg4OQ==&mid=2247486196&idx=1&sn=f846c7e5b9894101812441092d5e5a97&chksm=fd7af672ca0d7f64ab00792129a1a65b36c2a14372b0868e226b1da150298d1ed961c7cbae09&scene=21#wechat_redirect)