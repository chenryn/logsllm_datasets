selected for recovery for each recovery point inside the sporadic operations (chapter 8). 
7.5  Recovery Actions Evaluation Metrics 
As  far  as  businesses  are  concerned,  the  time  elapsed  during  the  recovery  process  for  their 
systems  may  directly  affect  their  commercial  interest  (S.  Yi,  et  al.,  2011).  For  example,  the 
77 
downtime  of  an  e-commerce  website  due  to  error  recovery  may  result  in  loss  of  tens  of 
thousands  of  dollars.  So  Recovery  Time  (RT)  is  first  of  the  metrics  that  we  use  to  evaluate 
recovery  actions  (M.  Fu,  et  al.,  2015;  M.  Fu,  et  al.,  2016).  Businesses  often  operate  with  a 
specific  Recovery  Time  Objective  (RTO)  (T.  Wood,  et  al.,  2010)  in  mind.  Modern  cloud 
services  are  often  charged  on  a  “per-use”  basis,  hence  another  factor  cloud  consumers  care 
about  is  how  much  money  is  spent  on  running  operations  on  the  cloud  systems.  In  the  cloud 
context, recovery actions such as launching a new instance will incur additional monetary cost 
(AWS,  2016).  We  define such  monetary  cost  as  recovery  cost.  Hence,  Recovery  Cost  (RC)  is 
another  metric  used for  evaluating  recovery  actions  (M.  Fu,  et  al.,  2015;  M.  Fu,  et  al.,  2016). 
Cloud systems can be messed up largely due to inappropriate recovery actions performed on the 
system  (A.  C.  Huang  and  A.  Fox,  2005).  In  other  words,  some  recovery  actions  can  have 
negative  impact  on  the  cloud  system.  It  was  mentioned  that  a  recovery  service  must  have  a 
minimal  consequence  on  the  performance  of  each  application  (T.  Wood,  et  al.,  2010).  Hence, 
reducing  the  recovery’s  negative  performance  impact  on  the  system  is  imperative.  Therefore 
Recovery Impact (RI) is also a metric for evaluating recovery actions (M. Fu, et al., 2015; M. 
Fu,  et  al.,  2016). These  three  metrics  are  utilised  by  POD-Recovery  to  evaluate  the  generated 
applicable recovery actions for each recovery point inside a sporadic operation on cloud, and the 
definitions of the three utilised recovery evaluation metrics are shown in Table 8 (M. Fu, et al., 
2015; M. Fu, et al., 2016). 
Table 8.  Recovery Evaluation Metrics 
Metrics 
Definition 
Recovery Time (RT) 
Recovery Cost (RC) 
Recovery Impact  (RI) 
The time for a step in a sporadic operation to recover 
from an error state to a correct state 
All  monetory  cost  incurred  by  all  the  cloud  API 
functions included in the recovery action 
The negative performance impact of recovery on the 
cloud  system  being  operated  on  during  the  time 
period of doing recovery 
1) Recovery Time (RT). For normal activities (such as application workflow) on cloud system, 
recovery time is defined as the time for a system to recovery from a failure to an agreed service 
level (T. Wood, et al., 2010). Sporadic operation recovery time is different from normal activity 
recovery time. In the context of sporadic operations, recovery time’s definition has two aspects: 
1)  the  time  for  the  full  system  (during  sporadic  operation)  to  return  from  failure  to  the 
potentially degraded SLA/capacity; and 2) the time for the operation returning from a failure (or 
erroneous state) to an accepted state (could be early captured consistent state, or future expected 
state or even a "safe" state to proceed further). When we measure the recovery time for sporadic 
78 
operations,  we actually  measure  the  execution  time  of the  recovery  actions  which  consist  of  a 
set of relevant cloud APIs (M. Fu, et al., 2015; M. Fu, et al., 2016). 
2) Recovery Cost (RC). It means the money charged by AWS during recovery for cloud APIs 
(e.g. RunInstances) which composite the recovery action. We can get this information from the 
pricing  policies  in  AWS  website  (AWS,  2016).  Actions  such  as  “RunInstances”  will  cause 
additional monetary cost. Actions such as “ModifyInstanceType” may also introduce additional 
monetary cost. By summing up the money spent by each cloud API in the recovery action, we 
can obtain the monetary cost of that recovery action (M. Fu, et al., 2015; M. Fu, et al., 2016). 
3)  Recovery  Impact  (RI).  It  means  the  negative  impact  caused  by  the  recovery  actions  on  the 
cloud  system  during  the  recovery  period.  Recovery  impact  comes  from  three  aspects:  1) 
recovery actions will have a delay on the original completion time of the operation. 2) Certain 
recovery actions (e.g. terminating instances) will impose a decrease on the capacity/SLA level 
of  the  system.  3)  Sometimes,  the  false  positives  of  error  detection  will  trigger  the  recovery 
which is actually unexpected, and such case might mess up the cloud system as well (M. Fu, et 
al., 2015; M. Fu, et al., 2016). Sporadic operations on cloud are performed from the perspective 
of cloud consumers, and for cloud consumers the most important thing is to make sure that their 
cloud systems and applications are able to gain enough satisfaction about user experience from 
the end system users. Good user experience largely depends on the system performance of the 
cloud  applications.  In  other  words,  system  end  users  have  high  expectation  on  system 
performance  of  cloud  applications.  Conducting  sporadic  operations  on  the  cloud  system  is 
totally  transparent  to  the  end  users,  so  the  system  end  users  are  unaware  about  the  system 
performance change during the execution of cloud sporadic operations. Even during the period 
of performing recovery for cloud sporadic operations, the cloud system is still in service and the 
end users also expect the cloud system to provide good system performance. From system users’ 
perspective, when it comes to discussing over system performance, they are mostly concerned 
with  the  system’s  average  response  time  for  the  user  requests.  Hence,  we  use  the  system’s 
average  response  time  to  user  requests  during  the  recovery  period  to  measure  the  recovery 
impact on the cloud system being operated on (M. Fu, et al., 2015; M. Fu, et al., 2016). 
The  acceptable  recovery  actions  will  be  selected  by  using  the  recovery  evaluation  metrics  of 
Recovery  Time  (RT),  Recovery  Cost  (RC)  and  Recovery  Impact  (RI).  We  illustrate  how they 
can be measured (M. Fu, et al., 2015; M. Fu, et al., 2016).  
The calculation of Recovery Time is through summing up the execution time of each cloud API 
that is composing the recovery action (M. Fu, et al., 2015; M. Fu, et al., 2016). Recovery actions 
consist  of  a  limited  number  of  cloud  APIs  provided  by  cloud  platform  and  we  obtain  the 
79 
execution  time  of  each  cloud  API  by  empirical study  on  these  APIs  (Q.  Lu,  et al.,  2013).  For 
example, the execution time of the API “UpdateAutoScalingGroup” is about 3 seconds, and the 
execution  time  of  the  API  “RunInstanes”  is  about  60  seconds.  In  POD-Recovery  there  is  a 
mapping list between cloud APIs and their execution time. 
The calculation of Monetary Cost is done by summing up the monetary cost of each cloud API 
that  composes the  recovery  action (M.  Fu,  et  al.,  2015; M.  Fu, et  al.,  2016).  For example, the 
API of “RunInstances” will cost $0.0031 if it is launching a t1.micro typed instance. Some APIs 
have  parameters  and  these  parameters  might  influence  the  monetary  cost.  For  example,  if  we 
launch  two  t1.micro  typed  instances  by  calling  “RunInstances”  API,  the  monetary  cost  will 
become $0.0062. The monetary cost of each cloud API is obtained from the pricing list defined 
by  cloud  platform  (AWS,  2016).  In  POD-Recovery  there is  a  mapping  list  of  cloud  APIs  and 
their monetary costs. 
Fig. 22.  Recovery Action Impact Analysis. 
80 
The calculation of recovery impact during recovery is illustrated in Fig. 22 (M. Fu, et al., 2015; 
M. Fu, et al., 2016). We use the average response time of system workload requests to represent 
the  system  capacity  because  response  time  is  a  big  concern  to  system  users.  Suppose  an 
operation consists of five steps and during each step there is corresponding response time. Due 
to the variability nature of cloud systems, we typically observe varying response time for each 
step, however to simplify things, we simply take the average response time value for each step 
for the purpose of summing up performance impact. 
Fig. 22(a) shows the response time trajectory of a successful operation where there is no error 
occurring  or  recovery  triggered  (M.  Fu,  et  al.,  2015;  M.  Fu,  et  al.,  2016).  The  operation  is 
assumed  to  consist  of  five  steps  (step  1  to  step  5),  and  during  each  step  there  is  relevant 
response  time.  We  define Sn  (1  <=  n <= 5)  as  the  area  of the  shape  which  is formed  by  each 
step’s response trajectory and the step’s execution time. The overall area S (S = S1 + S2 + S3 + 
S4 + S5) represents the impact of the successful operation on the cloud system. 
Fig. 22(b) shows the response time trajectory of an erroneous operation where the error occurs 
in step 2 and the recovery action is taken for step 2 (M. Fu, et al., 2015; M. Fu, et al., 2016). The 
error in step 2 makes the response time of step 2 another value (area to be S2’), and the recovery 
action  (Recovery  2’)  introduces  additional  response  time  trajectory  (area  to  be  SR2)  over  the 
original one. Hence, the overall impact of this erroneous operation with recovery is S’ which is 
equal to S1 + S2’ + SR2 + S3 + S4 + S5. The impact of the recovery action is calculated to be S’ - 
S, which is equal to (S2’ - S2) + SR2.   
Fig. 22(c) shows the response time trajectory of a successful operation where there is no error in 
step  2  but  error  detection  service  wrongly  reports  the  error  and  triggers  the  recovery  (false 
positive) (M. Fu, et al., 2015; M. Fu, et al., 2016). The overall impact of the operation in this 
case is computed to be S’’, which is equal to S1 + S2 + SR2’ + S3 + S4 + S5, and the impact of the 
recovery action in this case is calculated to be S’’ - S, which equals to SR2’. If the probability of 
false positive in error detection is denoted by Pr(fp), then the true positive rate denoted by Pr(tp) 
is equal to 1 - Pr(fp). Then the overall impact of recovery is calculated to be (1 - Pr(fp)) × ( (S2’ 
- S2) + SR2) + Pr(fp) × SR2’, which is equal to (1 - Pr(fp)) × (S2’ - S2) + (1 - Pr(fp)) × SR2 + 
Pr(fp) × SR2’. For the error in a certain step, no matter what recovery action is taken, the impact 
of  the  error  itself  keeps  the  same.  Hence,  S2’  -  S2  will  be  the  same  value  for  the  same  step. 
Hence,  the  relative  impact  of  recovery  action  can  be  further  denoted  by  (1  -  Pr(fp))  ×  SR2  + 
Pr(fp) × SR2’. Suppose the recovery action is comprised of n cloud APIs, then both SR2 and SR2’ 
are equal to ∑Wi × Ti, where 1 ≤ i ≤ n and Wi is the response time during the execution of the ith 
cloud  API    and  Ti  is  the  execution  time  of  ith  cloud  API.  Hence,  the  recovery  impact  will  be 
calculated as below: 
81 
I (Impact) = (1 - Pr(fp)) × (∑Wi × Ti) + Pr(fp) × (∑Wi × Ti) 
The above formula is equal to ∑Wi × Ti, where 1 ≤ i ≤ n. This formula of calculating recovery 
impact can be further represented as below: 
I (Impact) = W × T 
In this formula, W denotes the vector of the system response time during each of the cloud APIs 
and T denotes the vector of the execution time of each of the cloud APIs (M. Fu, et al., 2015; M. 
Fu, et al., 2016). Hence, the impact is equal to the cross-product of the vectors W and T. 
System response time (Wi) depends on the application running in the cloud, and hence in order 
to obtain system response time we need to have the application’s specification and features (M. 
Fu,  et  al.,  2015;  M.  Fu,  et  al.,  2016).  We  use  a  typical  cloud  benchmarking  application  to 
represent the real cloud application. The benchmarking application is TPC-W (TPC-W, 2016), 
and it is a three-tier e-commerce website which is widely used to benchmark the performance of 
datacentres (T. Wang, et al., 2014). We use its workload generator to generate read requests and 
observe the average response time of those requests. The obtained response time represents the 
capacity of the cloud system during the operation or recovery and we use this capacity value to 
measure the impact of recovery on the cloud system. 
The way of obtaining the response time (Wi) during each cloud API is based on the model of the 
relationship between system workload and average response time of system requests (M. Fu, et 
al.,  2015;  M.  Fu,  et  al.,  2016).  The  “workload-response  time”  model  is  obtained  by  our 
empirical  study  and  it  is  shown  in  Figure  23  (blue  curve)  (M.  Fu,  et  al.,  2015;  M.  Fu,  et  al., 
2016).  First  we  determine  the  system  workload  threshold  (the  maximum  number  of 
simultaneous requests  allowed  per  second  per VM)  and  then  we acquire the  average  response 
time  for  all  the  possible  workloads  that  are  within  the  workload  threshold.  The  workload 
threshold is determined by looking for the extent of workload to which the system will be able 
to handle all the requests without abandoning any of them. Through our experiment, we find out 
the workload threshold to be 360 simultaneous requests per second per VM in the cloud (M. Fu, 
et  al.,  2015;  M.  Fu,  et  al.,  2016).  This  is  reasonable  given  the  fact  that  the  buffer  size  of  the 
Tomcat service which hosts TPC-W is limited (2048 bytes) and the queue size of Tomcat is by 
default  100.  Theoretically,  if  the  Tomcat  server  could  process  each  simultaneous  request 
without  any  delay  even  if  there  are  a  large  number  of  simultaneous  requests,  the  workload 
threshold should be infinite. However, it is impossible that the tomcat server in an instance can 
process large number of simultaneous requests without any delay. Hence, the queue in Tomcat 
is necessary and when there are a large number of simultaneous requests, some requests stay in 
the  queue  provided  by  Tomcat  while  other  requests  are  processed  by  Tomcat  service.  That’s 
82 
also  why  the  maximum  number  of  allowed  simultaneous  is  usually  larger  than  the  queue  size 
(100). According to our experimental settings, we found that the allowed maximum number of 
simultaneous requests on each instance is 360 (M. Fu, et al., 2015; M. Fu, et al., 2016). Actually, 
after load balancing the cloud system’s usual workload is within 50 simultaneous requests per 
second per VM if there is no error occurring and recovery. If errors occur and recovery is being 
performed,  the  system’s  workload  might  go  beyond  50  simultaneous  requests  per  second  per 
VM  during  the  recovery  depending  on  how  many  in-service  VMs  are  terminated  and  not  in 
service  during  certain  steps  of  the  recovery  process.  If  the  workload  goes  beyond  50 
simultaneous  requests  per second  per VM  during  recovery,  we  also need  to  know  the  average 
response time of these requests in order to calculate the recovery impact.  Hence, in the model 
we allow the maximum workload to be 360 simultaneous requests per second per VM and this 
will benefit the calculation of recovery impact during recovery (M. Fu, et al., 2015; M. Fu, et al., 
2016). 
Fig. 23.  Workload-Response Time Model. 
The original model (Fig. 23, blue curve) can be represented as a linear regression model (M. Fu, 
et  al.,  2015;  M.  Fu,  et  al.,  2016).  Linear  regression  can  not  only  reduce  the  noise  of  average 
response time for some workloads, but also provide us with a linear model with which we can 
calculate the response time based on the known workload as the input (M. Fu, et al., 2015; M. 
Fu,  et  al.,  2016).  The  red  line  (in  Fig.  23)  is  the  linear  regression  of  the  original  workload-
response time model (M. Fu, et al., 2015; M. Fu, et al., 2016). We obtain this model by using 
Matlab regression library (MathWorks, 2016). It is represented by the below equation:  
w = 0.1497 × r + 0.483225 
83 
In this equation, w is the response time and r is the workload (number of simultaneous requests 
per second per VM).  
To evaluate the performance of the linear regression, we compute the mean squared error and 
the squared correlation coefficient value. The former is 0.584893 and the latter is 0.99804. Now, 
we can use this linear model to compute the average response time for a certain workload that 
does not exceed the workload threshold (M. Fu, et al., 2015; M. Fu, et al., 2016).  
The  execution  time  (Ti)  of  each  cloud  API  is  obtained  by  our  empirical  study  (Q.  Lu,  et  al., 
2013).  We  obtained  the execution  time  for  all  the  cloud  APIs  that  could  be  used  by  recovery. 
For example, the execution time of the cloud API of “TerminateInstances” is about 30 seconds. 
To calculate the impact of a recovery action on the cloud system, we need to know what cloud 
APIs are included in the recovery action, and we also need to know the initial workload of the 
system  as  well  as  the  initial  number  of  VMs  before  the  recovery  starts  to  execute  and  this 
information is passed to the recovery service by the error detection service (M. Fu, et al., 2015; 
M.  Fu,  et  al.,  2016).  The  algorithm  of  calculating  the  impact  value  of  a  recovery  action  is 
described  as  follows:  Step  1)  Use  the  inputs  of  initial  workload  and  initial  VM  number  to 
calculate the vector W for the list of APIs composing the recovery action; Step 2) Determine the 
vector  T  for  the  list  of  APIs  in  the  recovery  action;  Step  3)  Compute  the  impact  value  by 
figuring out the cross-product of the two vectors of W and T, and return the result (M. Fu, et al., 
2015; M.  Fu,  et  al.,  2016).  We  use an  example  to  explain  the calculation.  Suppose  we have a 
recovery action consisting of two cloud APIs: 1) deregister two instances from ELB (API1) and 
2) register two new instances with ELB (API2). Suppose the initial workload is 20 requests per 
second  per  VM  and  the  initial  VM  number  is  10.  Hence,  based  on  the  “Workload-Response 
Time” model, before the recovery starts the system average response time is 3.5 seconds (W1 = 
3.5s). After executing the API1, the workload becomes 25 (20 × 10 / (10 - 2)) and the response 
time becomes 4.2 seconds (W2 = 4.2s). API1’s execution time is 3 seconds (T1 = 3s) and API2’s 
execution time is 3 seconds (T2 = 3s). The recovery impact is calculated to be 23.1s2 (W1 × T1 + 
W2 × T2). 
7.6  Recovery Action Candidates List 
After  calculating  the  values  for  each  of  the  three  metrics  for  each  applicable  recovery  action 
generated,  we  can  obtain  a  list  of  applicable  recovery  action  candidates  where  each  recovery 
action is associated with three quantified recovery evaluation metrics: recovery time, recovery 
impact  and  recovery  monetary  cost.  These  recovery  action  candidates  are  stored  in  an  in-
memory table before the selection and optimization mechanisms are applied on them to select 
84 
the acceptable recovery actions. In other words, they serve as the inputs for the recovery actions 
selection and optimization algorithms (M. Fu, et al., 2015; M. Fu, et al., 2016). 
7.7  Acceptable Recovery Actions Selection 
We  propose  two  selection  and  optimization  mechanisms  for  selecting  the  acceptable  recovery 
actions: 1) Pareto set search based selection algorithm (M. Fu, et al., 2015; M. Fu, et al., 2016) 
and 2) User constraints based selection algorithm (M. Fu, et al., 2016). 
7.7.1  Pareto Set Search Based Recovery Action Selection 
Given a set of recovery actions, A = {Ai} and |A| = n, operators must make a decision on which 
recovery  action  should  be selected.  From  the  above  presentation,  we  know that each recovery 
action must be associated with three metrics, the time Ti, the cost Ci, and the impact Ii, which 
are known beforehand. With respect to the three metrics, we should resort to Pareto optimality if 
there  is  no  utility  function  that  syntheses  three  objective  into  a  single  objective.  Several 
techniques  are  available  to  find  an  exact  Pareto  optimum,  such  as  weighted-sum  method,  ε-
constraints  method,  and  programming  methods  (J.  Branke,  et  al.,  2008).  However,  we  do  not 
luxuriously assume that users can always provide extra information like weights or constraints, 
and  it  is  trivial  to  satisfy  just  the  constraints  by  a  simple  search  algorithm  even  if  users  can 
provide them. As we know from the literature, the time complexity of finding all strong Pareto 
optima, i.e. the Pareto set, is O(n2) in general. The Pareto set is {A*|{Ai|Ti < T*, Ci < C*,  Ii < I*} 
= Ø} (M. Fu, et al., 2015; M. Fu, et al., 2016). Thus, when n is not too big, it is affordable to 
find  the  Pareto  set.  After  we  have  the  Pareto  set,  whatever  users’  additional  constraints  and 
requirements over the metrics are, we can always find one optimal solution from the Pareto set, 
the size of which is usually smaller than n. In below Fig. 24, we show an O(n2) algorithm to find 
the Pareto set (M. Fu, et al., 2015; M. Fu, et al., 2016). Specifically, the symbol of “≤TCI” in 
the algorithm  means that the values of the  recovery evaluation metrics from a recovery action 
are all smaller than or equal to those of the other action. There could be more than one action 
returned  by  the  algorithm.  The  recovery  framework  can  further  select  the  action  with  least 
recovery  time  or  least  recovery  monetary  cost  or  least  recovery  impact  from  the  recovery 
actions list, depending on the business-specified importance of the metrics (M. Fu, et al., 2015; 
M. Fu, et al., 2016). 
85 
Fig. 24.  Pareto Set Search Based Selection Algorithm. 
7.7.2  User Constraints Based Recovery Action Selection 
Having  obtained  a  list  of  applicable  recovery  actions  with  their  evaluation  metrics  calculated, 
we  need  to  select  an  acceptable  recovery  action  from  them.  The  method  of  the  acceptable 
recovery  action  selection  here  is  a  multi-dimensional  optimization  problem  (J.  Branke,  et  al., 
2008).  The  bound  values  of  the  dimensions  used  in  this  method  are  also  known  as  the 
constraints (J. Branke, et al., 2008). Hence, the proposed algorithm of selecting the acceptable 
recovery  action  is  a  multi-dimensional  selection  method  with  constraint  programming 
techniques.  First,  we  need  a  selection  rule  or  objective  which  is  provided  by  cloud  operators. 
The  selection  rule  could  be  stated  in  a  format  that  the  value  of  each  of  the  three  metrics 
(Recovery Time, Recovery Cost and Recovery Impact) should be within a predefined objective 
or  constraint  (M.  Fu,  et  al.,  2016).  This  rule  also  forms  the  recovery  requirements  for  the 
business. Hence, there are three constraints for the recovery selection method and the recovery 
action selected must be able to satisfy all of them. One thing to note here is that the acceptable 
recovery  action  selected  is  the  one  that  can  satisfy  all  the  three  constraints,  and  it  may  not 
necessarily be the optimal one among all the recovery actions candidates. During the search for 
the acceptable recovery action, once a recovery action that can fulfil all the three constraints is 
found, it is selected as the objective recovery action. The main reason for this is that the primary 
goal of the operational recovery for cloud is focused on satisfying all the three constraints. The 
benefit  of  selecting  an  acceptable  recovery  action  rather  than  the  optimal  one  is  that  it  can 
achieve  a  better  time  complexity  goal  by  reducing  the  time  spent  in  searching  for  the  desired 
recovery  action.  We  denote  the  constraint  on  Recovery  Time  to  be  Consrt,  the  constraint  on 
Recovery  Cost  to  be  Consrc,  and  the  constraint  on  Recovery  Impact  to  be  Consri.  Hence,  the 
acceptable  recovery  actions  will  be  those  whose  recovery  time  is  within  Consrt  and  whose 
86 
recovery  cost  is  within  Consrc  and  whose  recovery  impact  is  within  Consri.  It  is  possible  that 