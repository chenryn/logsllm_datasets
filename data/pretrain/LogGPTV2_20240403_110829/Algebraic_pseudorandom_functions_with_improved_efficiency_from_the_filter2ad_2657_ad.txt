with Lemma 8, which shows that the function F with pa-
rameter (cid:96) is a secure PRF whenever the (cid:96)-DDH assumption
holds.
6. VERIFIABLE RANDOM FUNCTIONS
Verifable Random Functions, introduced by Micali, Ra-
bin, and Vadhan [26] are PRFs where the party holding the
secret key can produce a non-interactive proof that the PRF
was evaluated correctly. The proof should not interfere with
the pseudorandom properties of the PRF.
We give two VRF constructions from the augmented cas-
cade. In this section, for a parameter (cid:96), we use the Dodis-
Yampolskiy small-domain VRF to construct VRFs for a do-
main of size (cid:96)n for constant n. Security is based on the
n(cid:96)-BDH assumption in bilinear groups. In comparison, the
core Dodis-Yampolskiy construction requires the (cid:96)n-BDH
assumption for a VRF on a domain of size (cid:96)n.
In Section 7 we construct a VRF for a domain of size 2m
for arbitrary m from the O(m)-BDH assumption. Our con-
struction makes use of admissible hash functions introduced
in [9].
Hohenberger and Waters [22] recently constructed an ele-
gant large domain VRF from the Naor-Reingold PRF for do-
main of size 2m for arbitrary m. Security against a Q-query
adversary relies on the O(mQ)-BDHE assumption, where
t-BDHE is an assumption of the same ﬂavor as the t-BDH
assumption. While the eﬃciency of our VRF is worse than
that of Hohenberger and Waters, the required complexity as-
sumption is weaker: O(m) vs. O(mQ). The proof techiques
for the two constructions are quite diﬀerent. Hohenberger
and Waters use the pile-up approach of Waters [30] while
we use admissible hash functions [9].
Other VRFs include Abdalla et al. [1] who give a con-
struction using the m-wBDH assumption in blinear groups
for a domain of size 2m. The construction is limited to poly-
nomial size domains since security degrades exponentially
in m. Early VRFs outputting one bit were given by Lysyan-
skaya [25] and Dodis [17] based on stronger assumptions.
6.1 Deﬁnition of VRFs
A VRF is an eﬃciently computable function F : K× X →
Y equipped with three algorithms:
• Gen(1λ) outputs a pair of keys (pk, sk) for a security
• Prove(sk, x) computes(cid:0)F (sk, x), π(sk, x)(cid:1), where π(sk, x)
parameter λ.
is a proof of correctness.
• Verify(pk, x, y, π) veriﬁes that y = F (sk, x) using the
proof π.
Security for a VRF is deﬁned using two experiments be-
tween a challenger and an adversary A. For b ∈ {0, 1}, the
challenger in Expb works as follows:
The challenger chooses a random key (pk, sk) ← Gen(1λ).
The adversary (adaptively) sends queries x1, . . . , xq
in X to the challenger who responds with F (sk, xi)
and proof π(sk, xi) for i = 1, . . . , q.
The adversary issues a special challenge query x∗. If
b = 0, the challenger responds with F (sk, x∗). If b = 1,
the challenger chooses random y ∈ Y and responds
with y.
Eventually the adversary outputs a bit b(cid:48) ∈ {0, 1}.
For b ∈ {0, 1} let Wb be the probability that A outputs 1 in
Expb. Deﬁne
VRFadv[A, F ] := |W0 − W1|
Deﬁnition 6. A VRF is said to be secure if it satisﬁes the
following properties.
1. Pseudorandomness: For every eﬃcient adversary
A, VRFadv[A, F ] is a negligible function.
2. Veriﬁability: For (y, π) ← Prove(sk, x),
Verify(pk, x, y, π) = 1.
3. Uniqueness: no values of (pk, x, y1, y2, π1, π2) satisfy
Verifypk(x, y1, π1) = Verifypk(x, y2, π2) = 1 for y1 (cid:54)= y2.
6.2 Building a VRF using augmented cascade
We construct a secure VRF with domain of size (cid:96)n using
the n(cid:96)-BDH assumption and the augmented cascade. Eval-
uating the VRF takes n multiplications and one exponenti-
ation. Our VRF is built from the augmented cascade using
the Dodis-Yampolskiy VRF as the underlying function. The
Dodis-Yampolskiy VRF uses pairings and outputs elements
in GT while its key uses elemets in G. We therefore need to
slightly tweak the augmented cascade to compensate for the
diﬀerence between GT and G, but this is easily done. The
resulting VRF is deﬁned as follows:
Algorithm Gen(1λ): Fix a group G of prime order p with
a bilinear pairing. Choose random generators g, u ∈ G and
random values s1, s2, . . . , sn ∈ Zp. Set ti := gsi for i =
1, . . . , n and output the keys
pk = (g, u, t1, . . . , tn),
sk = (g, u, s1, . . . , sn).
137Function F : (G2 × Zn
x = (x1, . . . , xn) output
F (sk, x) := e( g[1/(cid:81)n
i=1(xi+si)], u) .
(cid:89)
p ) × [(cid:96)]n → GT. On input sk and
of the VRF as follows: First, B constructs the polynomials
Algorithm Verify(pk, x, y, π): First verify that the proof π
contains legal encodings of elements in G. Next, check that
h = gp(x) =
Algorithm Prove(sk, x): This algorithm outputs F (sk, x)
along with a proof π as follows: for i = 1 to n, compute
πi = g[1/(cid:81)i
j=1(xj +sj )] ∈ G
and output the proof
π := (π1, π2, . . . , πn) ∈ Gn .
e(πi, gxi ti) = e(πi−1, g)
for i = 1, . . . , n,
where π0 := g. Finally, check that e(πn, u) = y, where y is
the output of the VRF. Verify returns 1 iﬀ all the checks are
satisﬁed.
6.3 Proof of VRF security
Theorem 9. Suppose the n(cid:96)-BDH assumption holds in a
bilinear group G (of order p). For n = O(1) and (cid:96) =
poly(λ), the VRF deﬁned in section 6.2 is secure.
Proof. Veriﬁability of the VRF is straightforward. Unique-
ness follows from the group structure: for any input there
is only one group element in G that is a valid output, and
moreover, it is not possible (even for an unbounded adver-
sary) to devise a valid proof for another element. It remains
to prove pseudorandomness.
i ), for randomly chosen b∗
Intuition. Given a n(cid:96)-BDH instance, enumerate all possible
inputs for each of the n input blocks. Consider a n × (cid:96)
matrix where the (i, j)th entry corresponds to the monomial
(x + j − b∗
i . Any query from the
adversary can be seen as a path through the matrix that
visits exactly one cell in each column (corresponding to each
input block). Set up the generator in the simulation (by
multiplying out all the monomials described above), with
n special cells, referred to as “mines” (which are used to
construct the secret keys), such that any query that does not
visit all the mines can be answered. To do this, place place
i )th cell. With a probability of (cid:96)−n, the
the mines in the (i, b∗
aversary’s challenge query will visit exactly each and every
mine, and distinguishing this from random is equivalent to
solving n(cid:96)-BDH.
We formalize this intuition below and in Section 7 extend
this idea, with error-correcting codes, to construct a VRF
with a large domain.
For the sake of contradiction, assume there exists an ad-
versary A for which VRFadv[A, F ] is non-negligible. We con-
struct an algorithm B that breaks the n(cid:96)-BDH assumption
in G with non-negligible advantage.
, y) ∈
Input: Algorithm B is given a tuple (g, u, gx, . . . , gxn(cid:96)
(G)n(cid:96)+2 × GT and is to determine if y is e(g, u)1/x or drawn
randomly from GT.
Key generation: In this step, the algorithm B chooses a
n) R← [(cid:96)]n and constructs an instance
random b∗ = (b∗
1, . . . , b∗
n(cid:89)
i=1
(z + a − b
∗
i ) and p(z) = z
−1
pi(z)
a∈[(cid:96)]
pi(z) =
in Zp[z]. Since the product (cid:81)n
n(cid:96)−1(cid:88)
p(z) =
i=1 pi(z) is over all possible
inputs a ∈ [(cid:96)] the product is divisible by zn and therefore
p(z) is in Zp[z]. Write
cj · zj
j=0
for some cj in Zp. B then constructs the generator h as:
(cid:16)
g(xj )cj(cid:17)
n(cid:96)−1(cid:89)
(cid:18)(cid:16)
i cj(cid:19)
g(xj )(cid:17)cj−1−b∗
n(cid:96)(cid:89)
j=0
Next, B constructs the public key values
ti = h(x−b∗
i ) = gp(x)(x−b∗
i ) =
for i = 1, . . . , n and sends A the public key
j=1
pk = (h, u, t1, . . . , tn).
The secret key values s1, . . . , sn corresponding to this public
key (and are unknown to B) are:
si = x − b
∗
i
for i = 1, . . . , n.
Responding to Oracle Queries: Without loss of general-
ity, assume A never repeats a query. Consider the ith query
n ) ∈ [(cid:96)]n. Every j
(1 ≤ i < (cid:96)n) on message b(i) = (b(i)
such that b(i)
i contributes a factor z to the denominator
in the deﬁnition of F . As long as b(i) (cid:54)= b∗, B successfully
answers the query, as follows.
1 , . . . , b(i)
j = b∗
Construct n polynomials, p(i,1) through p(i,n) as
n(cid:96)−2(cid:88)
k=0
(cid:105)
(cid:105)
(cid:104)(cid:81)j
(cid:104)(cid:81)n
p(i,j)(z) =
(z + b(i)
p(z)
1)··· (z + b(i)
j − b∗
j )
=
dj,kzk
for some constants dj,k ∈ Zp, j = 1, . . . , n. To compute
proofs, B computes:
1 − b∗
(cid:16)
g(xj )(cid:17)dj,k
n(cid:96)−2(cid:89)
k=0
πj =
= h1/
k=1(x+b
(i)
k −b∗
k)
for j = 1, . . . , n and sets π = (π1, . . . , πn). Finally B com-
putes the function on the query,
F (sk, b(i)) = e(πn, u) = e(h1/
k=1(sk+b
(i)
k )
, u).
In the unlikely event that b(i) = b∗ algorithm B aborts
B answers the query with F (sk, b(i)) and π.
the simulation and outputs ⊥.
Challenge: Eventually, A outputs a message ˆb on which
If ˆb (cid:54)= b∗, then B aborts and
it wants to be challenged.
outputs ⊥. If ˆb = b∗, B proceeds as follows.
e(h, u)1/[(cid:81)n
Since A is a VRF adversary, it can distinguish between
and a random element
in GT with VRFadv[A, F ]. Now, recall that:
i )] = e(h, u)1/xn
i=1(si+b∗
n(cid:96)−1(cid:88)
i=0
p(z) =
cizi.
138Because p(z) is divisible by zn−1 but not divisible by zn:
n(cid:96)−n−1(cid:88)
j=0
ρjzj,
(cid:17)
for some ρ (cid:54)= 0 and coeﬃcients ρi. Now, using the challenge