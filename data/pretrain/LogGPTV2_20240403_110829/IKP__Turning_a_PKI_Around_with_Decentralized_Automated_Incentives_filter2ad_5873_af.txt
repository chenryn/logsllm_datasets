as the price divided by the warranty. We note that this is an
upper-bound for the actual risk that the CAs face.
Figure 6 shows the CDF for the cost, warranty, and cal-
culated risk of each of these certiﬁcates. Of the certiﬁcates
we examined, the prices ranged from $7 (Starﬁeld’s Standard
SSL) to $1999 (Symantec’s Secure Site Wildcard), and the
warranty amounts ranged from $10k to $10M. Some of these
warranties, however, had caveats; for example, IdenTrust, who
offers a $10M warranty, stipulates that each transaction is
covered to a maximum of $100k and each relying party is
covered to a maximum of $250k. As shown in Table VII, the
risk for each certiﬁcate varied widely, ranging from around
0.001% up to almost 8.5%.
To set sample RP values, we can conservatively estimate
the risk of a CA to be 10%; thus the affected domain payout
could be 10 times the RP cost. Using the median cost of a
certiﬁcate as a reference, we can estimate that a standard RP
F
D
C
1
0.8
0.6
0.4
0.2
0
0
1
0.8
0.6
0.4
0.2
F
D
C
0
104
1
0.8
0.6
0.4
0.2
F
D
C
0
10-6
500
1000
Cost (USD)
1500
2000
(a) Distribution of 1-year certiﬁcate costs.
105
Warranty (USD)
106
107
(b) Distribution of certiﬁcate warranty amounts.
10-5
10-4
Risk
10-3
10-2
10-1
(c) Distribution of calculated risk amounts.
Fig. 6. Empirical CDFs of certiﬁcate costs, warranties, and assessed risks
from the most popular CAs [10].
RISK UPPER-BOUNDS INFERRED FROM CA CERTIFICATE AND WARRANTY
AMOUNTS (IN US DOLLARS) FROM CA WEBSITES.
TABLE VII
Certiﬁcate
Cost
Warranty
Risk
CA
Highest-Risk
DomainSSL
GlobalSign [5] Wildcard
GlobalSign
StartCom [9, 71] Ext. Validation
Org. Validation
StartCom
Wildcard
Entrust [7]
. . .
. . .
Commercial SSL
Certum [3]
Standard SSL
Starﬁeld [8]
EV SSL
Comodo [4]
IdenTrust [6]
Multi Domain SSL
IdenTrust
Standard SSL
Lowest-Risk
$849
$249
$199
$119
$699
. . .
$25
$7
$99
$299
$99
$10, 000
$10, 000
$10, 000
$10, 000
$100, 000
. . .
$222, 000
$100, 000
$1, 750, 000
$10, 000, 000
$10, 000, 000
8.49e−2
2.49e−2
1.99e−2
1.19e−2
6.99e−3
. . .
1.13e−4
7.00e−5
5.66e−5
2.99e−5
9.90e−6
will cost ρ = $299, and thus a = $2990. Similarly, we can use
the risk to estimate that 10% of RPs may be terminated early,
and thus set the minimum termination payout as τ = $29.90.
We can estimate the reporting fee to be a small but non-trivial
amount, such as m = $5. Given these values, we can see
that the constraints from Section VI are easily satisﬁable, for
422
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
example, ρ = $299, a = $2990, t = $150, and δ = $100.
X. DISCUSSION
In this section, we discuss the insights, various limitations
and proposed future work of IKP.
Blockchain Weaknesses. Blockchains have several weak-
nesses which have been demonstrated in practice. For example,
mining pools controlled a majority of hashing power in the
network before [22], allowing double-spending attacks and
suppression of selected transactions. Section XI describes
attacks that can be mounted with less than half of the network’s
hashrate. Moreover, there may be bugs in the IKP contract
which could result in exploits such as the one that plagued
the DAO in Ethereum [24], and check and reaction contracts
may have bugs as well. Learning to write secure contracts is
difﬁcult [29], but we can build on existing work such as smart
contract formalization [45] to make IKP more robust.
Compelled Certiﬁcates. In this work, we did not explicitly
attempt to defend against nation-states who can compel CAs
to issue unauthorized certiﬁcates, as they are irrational adver-
saries with an effectively unlimited budget. However, client-
side extensions (described below) can prevent MitM attacks
even by such adversaries and record the certiﬁcate for out-of-
band responses.
Deployment Beneﬁts. While detectors and miners can ben-
eﬁt ﬁnancially in IKP, domains, CAs, and clients can also
beneﬁt from deploying IKP. Beyond RP payouts, domains
can be quickly alerted to CA misbehavior because of detec-
tor payouts. IKP also protects against misbehavior by both
internal and external CAs, and thus allows domains to have
greater conﬁdence in their CAs, particularly those with good
proven reputations. CAs in IKP proﬁt from good behavior,
and selling RPs provides a value-added service by which
CAs can compete with free certiﬁcate services such as Let’s
Encrypt [34]. Moreover, CAs can use IKP to prove a history
of good behavior, attracting more business.
Protecting Clients. In this paper, we described ways to
compensate domains affected by potential MitM attacks, but
even with RP-based payouts, clients have no protection from
the use of unauthorized certiﬁcates. To protect clients, we
can extend the IKP authority to record each unauthorized
certiﬁcate. A browser extension can then check this data during
the TLS handshake or maintain a local copy of unauthorized
certiﬁcates and reject any certiﬁcate that IKP has conﬁrmed to
be unauthorized. A browser extension could even contribute
to this certiﬁcate blacklist, checking certiﬁcates the client sees
against the relevant domain’s DCP and reporting the certiﬁcate
if the it violates the DCP.
In our Ethereum instantiation, the ﬁrst browser extension
could be implemented using events, which leverage the logging
functionality of the Ethereum virtual machine. Events cause
a logging opcode to execute in the Ethereum VM, storing
information in the receipt of the transaction that generated the
event [87]. Event information is not accessible to contracts,
but rather is designed for use in applications that can access
the blockchain history. A third-party service or the clients
themselves could then store the blockchain history to maintain
the certiﬁcate blacklist.
The second browser extension could be implemented by
sending certiﬁcates to the relevant domain’s check contract.
Because these checks do not modify any state, they do not cost
any gas to execute, and can even be run locally. The certiﬁcates
also do not need to be checked synchronously. If an unau-
thorized certiﬁcate is discovered, the browser extension could
automatically carry out the pre-report and reporting steps.
This automated reporting mechanism provides an incentive for
clients to deploy IKP and further deters CA misbehavior by
increasing the chance that an unauthorized certiﬁcate will be
quickly detected.
Future Work. We next plan to explore the following improve-
ments to IKP. First, we plan to further investigate possible
designs for check and reaction contracts, such as how a system
such as Town Crier [88] could be used to allow these contracts
to interface with real-world data. We also plan to implement
our browser extensions described above. Finally, we plan to
leverage work in mechanism design [16, 73] to formally verify
the incentive structure of IKP.
XI. RELATED WORK
In this section, we discuss work related to IKP. In particular,
we cover four main areas:
log-based PKIs enhancements,
alternatives to CA-based PKIs, incentives on blockchains, and
insurance schemes.
A. Log-Based PKI Enhancements
Log-based PKI enhancements provide an alternate approach
to deterring CA misbehavior. They leverage high-availability
servers called public logs that maintain append-only databases
of certiﬁcates issued by CAs. Logs maintain Merkle hash
trees [63], which allow a log to provide efﬁcient proofs that a
certiﬁcate is present in the log and that no previously recorded
certiﬁcates have been tampered with or deleted [28, 54]. These
proofs are sent to a client along with a domain’s certiﬁcate
to show that a log has recorded the certiﬁcate, ensuring that
an adversary attempting to use an unauthorized certiﬁcate has
exposed it to the public. Monitors can then watch logs for
suspicious certiﬁcates and report any instances of suspected
misbehavior.
The core idea of log-based PKI enhancements is that by en-
suring certiﬁcates are publicized, misbehavior can be quickly
detected, thus deterring CAs from issuing unauthorized cer-
tiﬁcates. Such exposure can also help detect unauthorized
certiﬁcates issued by accident [80]. Most log-based PKI en-
hancements rely on the domain to take action against unautho-
rized certiﬁcates [54], since only the domains themselves know
which certiﬁcates are authorized. Other approaches require the
domain to publicize policies used to determine which of its
certiﬁcates are authorized [44, 84].
Certiﬁcate Transparency (CT) [54] was the ﬁrst to propose
the use of public logs in their current form, though earlier
proposals such as Sovereign Keys [33] used similar entities.
However, CT provides no support for revocation, nor does it
423
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
provide any information as to whether the logged certiﬁcates
are authorized. Revocation Transparency [53] and CIRT [78]
both provide mechanisms to enable revocation checking in
public logs. AKI [44] embeds policies into certiﬁcates that
enable recovery from private key loss or compromise, and
uses a checks-and-balances system among clients, domains,
CAs, logs, and validators (who monitor logs) to detect and
report misbehavior. ARPKI [17] presents a formally-veriﬁed
extension of AKI that provides stronger security guarantees.
PoliCert [84] separates policies from certiﬁcates and supports
multiple certiﬁcates per domain, hierarchical policies that
apply to all subdomain certiﬁcates, and domain-speciﬁed error
handling. While the idea of policies inspired DCPs in IKP,
no log-based PKI enhancement offers incentives for correct
behavior or automatic responses to misbehavior.
B. Alternatives to CA-based PKIs
Some previous approaches have also sought to diminish or
eliminate the role of CAs by providing authenticity through
other sources. For example, DANE [41] allows domains to
place public keys or certiﬁcates in DNSSEC [13], but does
not preclude CAs. Additionally,
the security of DNSSEC
inherently relies on a PKI of its own roots at ICANN,
which is a single point of failure for the system and has not
been widely deployed. Public key pinning schemes such as
Chrome’s HTTPS pin [48], HPKP [35], or TACK [58] store
information about a domain’s public key at the client browser.
Perspectives [86] and Convergence [57] leverage the public
keys observed by notary servers throughout the Internet to
detect MitM attacks. However, in both of these approaches,
it is difﬁcult to determine whether a domain has legitimately
changed its key or if a MitM attack is taking place, since the
domain does not provide any other information such as a DCP
to characterize its certiﬁcates.
Other work has sought to move PKI functionality onto
the blockchain. For example, Blockstack [11] (formerly One-
Name) leverages the Bitcoin blockchain to provide a name
registration service that also allows entities to bind public keys
to their names. However, Blockstack uses its own namespace
and a pricing rule based on the name length and the presence
of nonalphabetic characters, and does not attempt to secure
names that exist
in today’s DNS. Certcoin [38] leverages
Namecoin [68] to implement a blockchain-based PKI, stor-
ing identity information in a Merkle hash tree and using
the Kademlia DHT [61] for fast lookup. However, Certcoin
does not protect existing names, and does not provide any
recoverability for identities that are falsely claimed on the
blockchain. EthIKS [20] does not implement a PKI on its own,
but rather uses the Ethereum blockchain to audit a centralized
key server for CONIKS [62]. However, neither EthIKS nor
CONIKS provides any means for responding to equivocation
or other misbehavior by key servers.
C. Blockchain-based Incentives
Most previous studies of incentives in blockchains have
been concerned with the incentives of mining. The miner’s
dilemma [36], for example, analyzes the mining pools’ game-
theoretic incentives to inﬁltrate and attack one another. The
selﬁsh mining attack [37] shows that mining in the Bitcoin
network is not incentive compatible. Subsequent work further
improves on the strategy [79] and demonstrates that composing
with network attacks such as the eclipse attack [40] can
increase the revenue of selﬁsh mining with less than half of
the network hashing power [70]. These works are orthogonal
to IKP, focusing on the incentives of blockchain consensus
rather than of applications built on the blockchain.
Other work has examined incentives that can be built on
top of the blockchain. For example, Andrychowicz et al.