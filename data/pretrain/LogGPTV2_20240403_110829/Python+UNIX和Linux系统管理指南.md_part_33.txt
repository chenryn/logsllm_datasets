整合Zenoss的企业级SNMP
228
howtos/send-events/。
>>>serv.sendEvent(evt)
>>> serv = ServerProxy('http://admin:zenoss@MYHoST:8080/zport/dmd/ZenEventManager')
>>> from xmlrpclib import ServerProxy
>>>d=find('build.zenoss.loc')
>>>evt={'device':'mydevice',
[zenos@zenoss$]
['etho'
MYSUMMARY&severity=4&eclass=EVENTCLASS&eventClassKey=EVENTCLASSKEY
第7章
print d.id, d.getManageIp()
'eth1"
'10'
'sito'
'vmnet1',
www.TopSage.com
'vmnet8']
X
PDG
---
## Page 243
是否闻到了厨房里传来的香气？这难道不是一份操作系统什锦吗？
的相关内容。
的形式出现，
成为适合各种操作系统的强大工具的。最后，介绍一个全新的操作系统，它以数据中心
绍，但是我们会演示Python作为一种通用的跨平台脚本语言是如何工作的，以及是如何
由于本章是对许多不同操作系统的混合，这里没有时间对其中任何一个进行深人的介
进行比较时，Ruby与Python相比尚存在不足。
自身具有许多Python的优秀特点。但是作为系统管理语言，在对标准库及语言的成熟度
来，因为Python提供了更多可读性强的优秀代码。Ruby也是一个很有吸引力的语言，其
许多复杂的系统管理工具，例如动画制作、数据中心，都正在从Perl转换到Python上
备，以及较好的可读性，使其成为系统管理中的重量级角色。
进行比较，再到对配置文件进行解析等系统管理员想要做的任何事情。Python的成熟完
东西。在Python的强大标准库中有一个模块，可以处理从对目录打包，到对文件或目录
个成熟的标准库，该库包括了一名在多操作系统环境下工作的系统管理员所需要的任何
幸运的是，Python再次站出来伸出了援手（希望你注意到这个趋势）。Python提供了一
景暗淡，但是对于许多人来说，仍然需要了解。
间可以决定哪些操作系统会被长久地使用。像AIX和HP-UX这样的专有操作系统似乎前
要了解所有的操作系统，从Linux到OS X，再到FreeBSD，都需要掌握。应该说只有时
系统的选择经常会超出你的处置能力。如今，若想成为一名非常高效的系统管理员，需
作为一名系统管理员往往意味着经常会遇到麻烦。一些规则、既定计划，甚至是对操作
引言
一些人将这一新平台称为云计算。我们还将讨论由Amazon和Google所提供
vww.TopSage.com
操作系统什锦
第8章
---
## Page 244
#!/usr/bin/env python
使用platform模块的简单方式是创建一个工具，输出与系统相关的所有可用的信息。参
platform（平台）模块可以利用。让我们看看使用platform模块的要点。
Python中找到相应的处理工具。对于如何判断自己代码运行在什么平台这一问题，有
设桥梁。最简单也是最有效的方法之一是写一个条件语句对操作系统、平台以及代码版
补不同版本的*nix之间差异的方法是编写跨平台工具和库，以此在不同操作系统之间架
见例8-1。
在*nix操作系统之间存在一些重要的差异，
Python中跨平台的UNIX编辑
这是脚本在OSX Leopard10.5.2上的输出结果：
platform.python_compiler(),
platform.processor()
profile = [
import platform
例8-1：使用platform模块输出系统报告.
本进行检查。
230
for item in profile:
platform.version(),
latform.node(),
latform.architecture(),
 print item
latform.dist(),
Darwin-9.2.0-i386-32bit
[ngift@Macintosh-6][H:10879][J:0]% python cross_platform.py
1386
Macintosh-6.local
386
'10.5.2',("',*', "),‘i386')
1.第8章
www.TopSage.com
，但是与差异相比则有更多的共同点。一种弥
---
## Page 245
#!/usr/bin/envpython
def linuxType(self):
Fingerprints the following Operating Systems:
import platform
例8-2：采集操作系统类型信息
了采集：Mac OS X、Ubuntu、Red Hat/Cent OS、FreeBSD以及Sun OS。参见例8-2。
模块，该模块会对平台及版本信息进行采集。这个示例对以下操作系统的相关信息进行
这让我们知道了可以收集的信息类型。接下来写了一个跨平台代码来创建一个fingerprint
Sunos
FreeBSD
Red Hat/Cent OS
Ubuntu
Mac OSX
def
elif platform.uname()[1] == self.ubu:
else:
elif attr s "unknown_linux":
elif attr：
root:xnu-1228.3.13~1/RELEASE_I386
Darwin Kernel Version 9.2.0:
2.5.1
GCC 4.0.1 (Apple Inc. build 5465)
raise AttributeError, attr
return "FreeBSD"
 return "osx"
('Darwin',
return "unknown"
return"Sunos"
return self.ubu
return
"redhat
=="sun":
'Macintosh-6.local',
_(self, attr):
Tue Feb 5 16:13:22 PST 2008;
www.TopSage.com
'9.2.0',
'Darwin Kernel Version 9.2.0:
操作系统什锦丨231
---
## Page 246
232
一种能够管理各种各样*nix主机的方式是联合使用ssh密钥，加载NFS的通用共享源
台系统管理
使用SSH密钥，挂载NFS的源目录和使用Python实现跨平
一的结果。
写通过ssh密钥进行网络管理的脚本中。代码可以同时在多个平台上运行，却可以得到统
如果匹配了哪一个，则运行适合该平台的代码。使用跨平台API最切实的好处体现在编
块，我们就可以编写跨平台代码了，我们可以针对操作系统的类型在字典中进行查询，
命令的输出不是非常吸引人，但是它确实为我们提供了强有力的帮助。有了这一简单模
FreeBSD:
Solaris 10 or SunOS:
Ubuntu:
Red Hat:
下面看一下在各种不同平台下运行时的输出。
if
def fingerprint():
def queryos(self):
# python fingerprint.py
bash-3.oo# python fingerprint.py
root@ubuntu:/# python fingerprint.py
fingerprint()
print type.queryoS()
FreeBSD
[root@localhost]/# python fingerprint.py
elif platform.system() == self.fbsd:
elif platform.system() == self.sun:
if platform.system() == "Darwin":
Sunos
redhat
elif
else:
return self.sun
return self.osx
 return self.unknown_linux
name_
return self.fbsd
第8章
_main_":
www.TopSage.com
8
---
## Page 247
现。在版本控制系统中，通过ssh发送命令给远端主机，告诉其升级本地svn库的全部代
单的方法是使用autofs，然后创建一个符号链接。此外，还可以通过版本控制系统来实
例8-4：分发ssh密钥
第二步：SCP公钥到主机，并创建一个名为authorized_keys的文件。参见例8-4。
Enter passphrase (empty for no passphrase):
[ngift@Macintosh-6][H:11026][J:0]% ssh-keygen -t rsa
例8-3：创建一个ssh公钥
注意：针对下面的示例需要指出的一点是，出于演示的需要，这里会为根用户创建ssh密钥，但
询相关操作系统文档或对ssh使用man命令来查看详细内容。参见例8-3。
第一步：在你管理的主机系统上创建ssh公钥。注意，这可能会根据平台有所变化。请查
讲述。
目录，以及跨平台的Python代码。我们将这一过程细分为若干步骤，便于更为清晰地
第三步：挂载通用NFS源目录，该目录中包含需要用客户端来运行的模块。通常最简
Connection to 10.0.1.51 closed.
[ngift@Macintosh-6][H:11027][J:0]%
id_leop_lap.pub
[ngift@Macintosh-6][H:11026][J:0]% scp id_leop_lap.pub PI:EMAIL:~/.ssh/
6c:2f:6e:f6:b7:b8:4d:17:05:99:67:26:1c:b9:74:11 root@1ocalhost.1ocaldomain
Your public key has been saved in /root/.ssh/id_rsa.pub.
Your identification has been saved in /root/.ssh/id_rsa
Enter file
[ngift@Macintosh-6][H:11028][J:0]% ssh PI:EMAIL
root@localhost]~/.ssh#exit
total8
root@localhost]~/.ssh#1l
ast login: Sun Mar 2 06:26:10 2008
PI:EMAIL's password:
PI:EMAIL's password:
[ngift@Macintosh-6][H:11026][]:0]%
"-I--I-MI
100%403
脚本。
是为了获得更好的安全性最好创建一个具有使用sudo命令权限的普通用户账号来运行这个
1 root root
0.4KB/s
t2044
00:00
Ssh
www.TopSage.com
(/root/.ssh/id_rsa):
PI:EMAIL
操作系统什锦丨233
PDG
---
## Page 248
1n-s/net/nas/python/src/src
#1/usr/bin/env python
例8-5：简单的基于ssh的分发器
uname命令。
以如此简单地实现这么强大的功能而感到惊喜的。在例8-5中，我们运行了一个简单的
让我们从建立最简单的基于ssh的分发系统示例开始。如果之前从没有做过，你会对可
NFS的src目录，或是实现版本控制的src目录，这一任务会变得非常简单。不失一般性，
第四步：写一个分发器，以在网络中各台主机上运行代码。有了ssh密钥和通用的加载
样操作：
码。接下来脚本就可以运行最新的模块了。例如，在一个Red Hatbased系统中，可以这
像下面这样改动脚本：
个健壮的命令行接口（CLI）。因为没有它，我们每次想要做些不同的事情时，都需要
码复制到每一台计算机上。当然，有了分发脚本后，最迫切需要的就是针对该工具的一
述。这些主机是我们分发命令的对象，会通过命令临时在远程计算机创建src目录并将代
我们编写了一个更准确的操作系统fingerprint（指纹）脚本来取得对主机的更准确的描
执行过程如下所示：
在5个混合了CentOS 5、FreeBSD 7、Ubuntu 7.1和Solaris 10的IP地址上运行这个脚本,
"10.0.1.50",
machines = ["10.0.1.40",
A ssh based command dispatch system
234
特目
importsubprocess
subprocess.call("ssh root@%s %s" % (machine, cmd), shell=True)
cmd = "mkdir /src"
cmd = "python /src/fingerprint.py"
FreeBSD
Linux
Linux
Linux
[ngift@Macintosh-6][H:11088][J:0]% python dispatch.py
”第8章
www.TopSage.com
O
---
## Page 249
参见例8-6。
这看起来与创建一个基本的配置文件解析语法有些不一样，主机占一节，命令占一节。
使用，因为我们不得不通过编辑脚本来适应需求的变化。我们需要一个更好的工具，现
这一结果要归功于fingerprint.py模块。当然，新的分发代码段需要经过大量修改才能
现在看一下新的输出结果：
我们将在运行fingerprint.py脚本之后进行修改，但是先看一下这个新的cmd：
需要在独立的线程池中执行分发，这样进程不会被阻塞。
IP地址读取config文件，执行命令；我们需要带选项的CLI接口来向主机发送命令：我们
代码块需要等待每一命令的返回响应。必要条件：我们需要一个命令行工具，可以根据
命令;我们不得不在所有的机器上运行相同的命令列表，不能挑选或进行选择;被分发的
题：主机列表是硬编码到脚本中的;发出的命令是硬编码到脚本中的；一次仅能执行一个
让我们创建一个之前使用的工具的问题列表，然后列出修复这些问题的必要条件。问
在一个简单的基于ssh的分发系统中使用ssh密钥是非常有效的，但是很难扩展或复用。
创建一个跨平台的系统管理工具
在就来创建一个吧。
redhat
[ngift@Macintosh-6][H:11107][J:0]# python dispatch.py
cmd ="python /src/fingerprint.py"
"10.0.1.51",
machines = ["10.0.1.40",
A ssh based command dispatch system
#!/usr/bin/env python
(ani=raus autyoe m/is/:to1 Ad-suzadaut, ds,)res'ssodqns
FreeBSD
Sunos
redhat
ubuntu
10.0.1.60"
"10.0.1.50",
import subprocess
oreven:
subprocess.call("ssh root@%s %s" % (machine, cmd), shell=True)
www.TopSage.com
操作系统什锦”235
---
## Page 250
236
果查看命令的输出结果，可以比较一下是否与下面相同：
这段代码使用起来很方便。我们可以强行指定一个命令和主机列表，然后立即执行。如
for ip in ips:
#For every ip address, run all commands
ips, cmds = readconfig()
return ips,cmds
cmds.append(cmd[1])
A ssh based command dispatch system
import subprocess