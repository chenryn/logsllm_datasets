several work that characterize the workload of the Internet and the
services based on it [4, 14, 39, 48, 55, 56]. In 1997, Arlitt et al.
provided an extensive study of the web workload characteristics
using data sets obtained from 6 websites and identified 10 invari-
ant characteristics of the workload. The authors revisited the study
in 2007 [55] to find that the invariants still hold. A similar study
was performed by Mahanti et al. in [39]. In both the studies, the
workload was predominantly Web traffic. However, in recent times,
with applications such as streaming, online gaming, social media
and software downloads that use the Internet, the Internet traffic has
become highly diversified [14, 48, 49, 56]. CDNs like Akamai, serve
multiple traffic classes from their servers [50] and each traffic class
is shown to have unique access patterns and content properties. The
caching properties of each traffic class was captured with a succinct
representation of Footprint Descriptor and the caching properties of
a traffic mix is obtained using the Footprint Descriptor calculus [50].
Considering the vast diversity in the Internet traffic and given that
a production cache serves various time-varying mixes of the traffic
classes, the flexibility that TRAGEN provides in generating synthetic
traces for any prescribed traffic mix is essential.
Stack distance distribution. Stack distance or reuse distance as a
metric has been a useful tool to capture the temporal locality and
the cache properties for CPU caches and web caches [8]. The stack
distance distribution of a trace can be used to compute the rHRC
of an LRU cache for the trace. Over time, several methods have
been proposed to speed up the computation of the stack distance
distribution [3, 54]. However, the metric can only provide the rHRC
of the trace. We introduce the byte-weighted footprint descriptor that
extends the footprint descriptor to capture the bHRC of the trace.
The Independent Reference Model (IRM). The IRM model has
been widely used to describe the request process in several appli-
cations. The IRM model assumes that each request references an
object and the reference is independent of prior requests. Further,
each object is assigned a popularity that fits a zipfian distribution
[10, 24, 40]. Under this model, there exists considerable work that
quantifies the expected hit rates the requests would incur [13, 21].
However, it is well known that real traffic does not follow IRM
that completely ignores temporal locality [23, 35, 53] and thus re-
searchers have proposed statistical models such as shot noise model
[35], markovian arrival process [11]. But they are not known to
be accurate and it is also not known if they capture the expected
HRCs accurately. Hence, we rely on a more robust model of foot-
print descriptors that capture caching properties without making any
statistical assumptions and is now used in industry.
7 Conclusion
We design and implement TRAGEN, the first tool to produce
synthetic traces that are similar to original production traces in terms
of hit rates and eviction ages. TRAGEN supports user-specified
traffic mixes that allow developers and researchers to generate a
wide range of realistic workloads for cache simulations.
TRAGEN is available to the public and comes with footprint
descriptor models of major traffic classes from a large production
CDN. This allows users to generate realistic synthetic traces that
accurately represent the immense variety of content access patterns
on the internet. Further, we provide the tools for users to generate
footprint descriptor traffic models from their own original traces.
This allows researchers and developers to use TRAGEN for simu-
lations in their own caching application domains. Thus, TRAGEN
provides a platform for industry and academia to publish traffic
models (FDs and bFDs) from their own caching systems, allowing
other researchers and system designers to compute similar synthetic
traces, while preserving the privacy of the original production traces.
TRAGEN is guaranteed to produce synthetic traces that have
similar caching behavior to the original traces for the set of caching
policies that we could theoretically or empirically validate. Providing
strict guarantees for a broader set of caching policies is future work.
8 Acknowledgements
We would like to thank our anonymous reviewers for their valu-
able feedback. We would like to thank our shepherd Paul Barford
for his insightful comments that improved the quality of the paper
immensely. We also thank Aditya Sundarrajan for his help in the
initial phases of the project. This work was supported in part by NSF
grants CNS-1763617 and CNS-1901137.
References
[1] D. Achlioptas, M. Chrobak, and J. Noga. Competitive analysis of randomized
paging algorithms. In European Symposium on Algorithms, pages 419–430.
377
TRAGEN: A Synthetic Trace Generator for Realistic Cache Simulations
IMC ’21, November 2–4, 2021, Virtual Event, USA
[2] J. Alghazo, A. Akaaboune, and N. Botros. Sf-lru cache replacement algorithm. In
Records of the 2004 International Workshop on Memory Technology, Design and
Testing, 2004., pages 19–24. IEEE, 2004.
[3] G. Almási, C. Ca¸scaval, and D. A. Padua. Calculating stack distances efficiently.
In Proceedings of the 2002 workshop on Memory system performance, pages
37–43, 2002.
[4] P. Barford, A. Bestavros, A. Bradley, and M. Crovella. Changes in web client ac-
cess patterns: Characteristics and caching implications. World Wide Web, 2(1):15–
28, 1999.
[5] P. Barford and M. Crovella. Generating representative web workloads for network
and server performance evaluation. In Proceedings of the 1998 ACM SIGMETRICS
joint international conference on Measurement and modeling of computer systems,
pages 151–160, 1998.
[6] D. S. Berger, B. Berg, T. Zhu, S. Sen, and M. Harchol-Balter. Robinhood: Tail
latency aware caching–dynamic reallocation from cache-rich to cache-poor. In
13th {USENIX} Symposium on Operating Systems Design and Implementation
({OSDI} 18), pages 195–212, 2018.
[7] D. S. Berger, R. K. Sitaraman, and M. Harchol-Balter. Adaptsize: Orchestrating
the hot object memory cache in a content delivery network. In 14th {USENIX}
Symposium on Networked Systems Design and Implementation ({NSDI} 17),
pages 483–498, 2017.
[8] K. Beyls and E. D’Hollander. Reuse distance as a metric for cache behavior. In
Proceedings of the IASTED Conference on Parallel and Distributed Computing
and systems, volume 14, pages 350–360. Citeseer, 2001.
[9] J. Boyar, M. R. Ehmsen, and K. S. Larsen. Theoretical evidence for the supe-
riority of lru-2 over lru for the paging problem. In International Workshop on
Approximation and Online Algorithms, pages 95–107. Springer, 2006.
[10] L. Breslau, P. Cao, L. Fan, G. Phillips, and S. Shenker. Web caching and zipf-like
distributions: Evidence and implications. In IEEE INFOCOM’99. Conference on
Computer Communications. Proceedings. Eighteenth Annual Joint Conference of
the IEEE Computer and Communications Societies. The Future is Now (Cat. No.
99CH36320), volume 1, pages 126–134. IEEE, 1999.
[11] P. Buchholz, P. Kemper, and J. Kriege. Multi-class markovian arrival processes
and their parameter fitting. Performance Evaluation, 67(11):1092–1106, 2010.
[12] M. Busari and C. Williamson. Prowgen: a synthetic workload generation tool for
simulation evaluation of web proxy caches. Computer Networks, 38(6):779–794,
2002.
[13] H. Che, Y. Tung, and Z. Wang. Hierarchical web caching systems: Modeling, de-
sign and experimental results. IEEE journal on Selected Areas in Communications,
20(7):1305–1314, 2002.
[14] X. Cheng, C. Dale, and J. Liu. Understanding the characteristics of internet short
video sharing: Youtube as a case study. arXiv preprint arXiv:0707.3670, 2007.
[15] D. Comer. Ubiquitous b-tree. ACM Computing Surveys (CSUR), 11(2):121–137,
epubli, 2012.
[26] R. Hassan, A. Harris, N. Topham, and A. Efthymiou. Synthetic trace-driven
In 21st International Conference on Advanced
simulation of cache memory.
Information Networking and Applications Workshops (AINAW’07), volume 1,
pages 764–771. IEEE, 2007.
[27] Q. Huang, K. Birman, R. Van Renesse, W. Lloyd, S. Kumar, and H. C. Li. An
analysis of facebook photo caching. In Proceedings of the Twenty-Fourth ACM
Symposium on Operating Systems Principles, pages 167–181, 2013.
1979.
[16] F. J. Corbato. A paging experiment with the multics system. Technical report,
MASSACHUSETTS INST OF TECH CAMBRIDGE PROJECT MAC, 1968.
[17] T. S. P. E. Corporation. Specweb96 benchmark. https://www.spec.org/web96/.
[18] M. Curiel and A. Pont. Workload generators for web-based systems: Characteris-
tics, current status, and challenges. IEEE Communications Surveys & Tutorials,
20(2):1526–1546, 2018.
[19] A. Dan and D. Towsley. An approximate analysis of the lru and fifo buffer
replacement schemes. In Proceedings of the 1990 ACM SIGMETRICS conference
on Measurement and modeling of computer systems, pages 143–152, 1990.
[20] O. Eytan, D. Harnik, E. Ofer, R. Friedman, and R. Kat. It’s time to revisit {LRU}
vs.{FIFO}. In 12th {USENIX} Workshop on Hot Topics in Storage and File
Systems (HotStorage 20), 2020.
[21] R. Fagin and T. G. Price. Efficient calculation of expected miss ratios in the
independent reference model. SIAM Journal on Computing, 7(3):288–297, 1978.
[22] B. Fan, H. Lim, D. G. Andersen, and M. Kaminsky. Small cache, big effect:
Provable load balancing for randomly partitioned cluster services. In Proceedings
of the 2nd ACM Symposium on Cloud Computing, pages 1–12, 2011.
[23] M. Garetto, E. Leonardi, and S. Traverso. Efficient analysis of caching strate-
gies under dynamic content popularity. In 2015 IEEE conference on computer
communications (INFOCOM), pages 2263–2271. IEEE, 2015.
[24] P. Gill, M. Arlitt, Z. Li, and A. Mahanti. Youtube traffic characterization: A view
from the edge. In Proceedings of the 7th ACM SIGCOMM Conference on Internet
Measurement, IMC ’07, page 15–28, New York, NY, USA, 2007. Association for
Computing Machinery.
[25] D. Grund. Static Cache Analysis for Real-Time Systems: LRU, FIFO, PLRU.
[28] S. Jiang and X. Zhang. Lirs: An efficient low inter-reference recency set re-
placement policy to improve buffer cache performance. ACM SIGMETRICS
Performance Evaluation Review, 30(1):31–42, 2002.
[29] T. Johnson, D. Shasha, et al. 2q: a low overhead high performance bu er manage-
ment replacement algorithm. In Proceedings of the 20th International Conference
on Very Large Data Bases, pages 439–450. Citeseer, 1994.
[30] K. Kant, V. Tewari, and R. K. Iyer. Geist: a generator for e-commerce & internet
server traffic. In ISPASS, pages 49–56, 2001.
[31] R. Karedla, J. S. Love, and B. G. Wherry. Caching strategies to improve disk
system performance. Computer, 27(3):38–46, 1994.
[32] K. V. Katsaros, G. Xylomenos, and G. C. Polyzos. Globetraff: a traffic workload
generator for the performance evaluation of future internet architectures. In 2012
5th International Conference on New Technologies, Mobility and Security (NTMS),
pages 1–5. IEEE, 2012.
[33] W. King. Analysis of paging algorithms. In Proc. IFIP 1971 Congress, Ljubljana,
pages 485–490. North-Holland, 1972.
[34] V. Kirilin, A. Sundarrajan, S. Gorinsky, and R. K. Sitaraman. Rl-cache: Learning-
based cache admission for content delivery. IEEE Journal on Selected Areas in
Communications, 38(10):2372–2385, 2020.
[35] E. Leonardi and G. L. Torrisi. Least recently used caches under the shot noise
model. In 2015 IEEE Conference on Computer Communications (INFOCOM),
pages 2281–2289. IEEE, 2015.
[36] Q. Li, X. Liao, H. Jin, L. Lin, X. Xie, and Q. Yao. Cost-effective hybrid replace-
ment strategy for ssd in web cache. In 2015 IEEE International Conference on
Computer and Information Technology; Ubiquitous Computing and Communica-
tions; Dependable, Autonomic and Secure Computing; Pervasive Intelligence and
Computing, pages 1286–1294, 2015.
[37] T. Lykouris and S. Vassilvtiskii. Competitive caching with machine learned advice.
In International Conference on Machine Learning, pages 3296–3305. PMLR,
2018.
[38] B. M. Maggs and R. K. Sitaraman. Algorithmic nuggets in content delivery. ACM
SIGCOMM Computer Communication Review, 45(3):52–66, 2015.
[39] A. Mahanti, C. Williamson, and D. Eager. Web proxy workload characterization.
Progress Report, Computer Sciences Dept, Univ. of Saskatchewan, 1999.
[40] A. Mahanti, C. Williamson, and D. Eager. Traffic analysis of a web proxy caching
hierarchy. IEEE Network, 14(3):16–23, 2000.
[41] R. L. Mattson, J. Gecsei, D. R. Slutz, and I. L. Traiger. Evaluation techniques for
storage hierarchies. IBM Systems journal, 9(2):78–117, 1970.
[42] N. Megiddo and D. S. Modha. Arc: A self-tuning, low overhead replacement
cache. In Fast, volume 3, pages 115–130, 2003.
[43] D. Mosberger and T. Jin. httperf—a tool for measuring web server performance.
ACM SIGMETRICS Performance Evaluation Review, 26(3):31–37, 1998.
[44] A. Narayanan, S. Verma, E. Ramadan, P. Babaie, and Z.-L. Zhang. Deepcache: A
deep learning based framework for content caching. In Proceedings of the 2018
Workshop on Network Meets AI & ML, pages 48–53, 2018.
[45] K. Psounis, A. Zhu, B. Prabhakar, and R. Motwani. Modeling correlations in web
traces and implications for designing replacement policies. Computer Networks,
45(4):379–398, 2004.
[46] D. reason and J. Reineke. Toward precise plru cache analysis. In 10th Interna-
tional Workshop on Worst-Case Execution Time Analysis (WCET 2010). Schloss
Dagstuhl-Leibniz Center for Computer Science, 2010.
[47] A. Rousskov and D. Wessels. High-performance benchmarking with web poly-
graph. Software: Practice and Experience, 34(2):187–211, 2004.
[48] M. Z. Shafiq, A. R. Khakpour, and A. X. Liu. Characterizing caching workload of
a large commercial content delivery network. In IEEE INFOCOM 2016-The 35th
Annual IEEE International Conference on Computer Communications, pages 1–9.
IEEE, 2016.
[49] J. Summers, T. Brecht, D. Eager, and A. Gutarin. Characterizing the workload
of a netflix streaming video server. In 2016 IEEE International Symposium on
Workload Characterization (IISWC), pages 1–12. IEEE, 2016.
[50] A. Sundarrajan, M. Feng, M. Kasbekar, and R. K. Sitaraman. Footprint descriptors:
Theory and practice of cache provisioning in a global cdn. In Proceedings of
the 13th International Conference on emerging Networking EXperiments and
Technologies, pages 55–67, 2017.
[51] A. Sundarrajan, M. Kasbekar, R. K. Sitaraman, and S. Shukla. Midgress-aware
traffic provisioning for content delivery. In USENIX Annual Technical Conference
(USENIX ATC 20), pages 543–557. USENIX Association, 2020.
[52] W. Tang, Y. Fu, L. Cherkasova, and A. Vahdat. Medisyn: A synthetic streaming
In Proceedings of the 13th international
media service workload generator.
workshop on Network and operating systems support for digital audio and video,
pages 12–21, 2003.
[53] S. Traverso, M. Ahmed, M. Garetto, P. Giaccone, E. Leonardi, and S. Niccolini.
Unravelling the impact of temporal and geographical locality in content caching
systems. IEEE Transactions on Multimedia, 17(10):1839–1854, 2015.
[54] C. A. Waldspurger, N. Park, A. Garthwaite, and I. Ahmad. Efficient {MRC}
construction with {SHARDS}.
In 13th {USENIX} Conference on File and
Storage Technologies ({FAST} 15), pages 95–110, 2015.
378
IMC ’21, November 2–4, 2021, Virtual Event, USA
Anirudh Sabnis and Ramesh K. Sitaraman
[57] Q. Yang, H. H. Zhang, and T. Li. Mining web logs for prediction models in
www caching and prefetching. In Proceedings of the seventh ACM SIGKDD
international conference on Knowledge discovery and data mining, pages 473–
478, 2001.
[58] J. Yiu. The Definitive Guide to ARM® Cortex®-M0 and Cortex-M0+ Processors.
Academic Press, 2015.
[55] A. Williams, M. Arlitt, C. Williamson, and K. Barker. Web workload characteri-
zation: Ten years later. Web content delivery, pages 3–21, 2005.
[56] J. Yang, Y. Yue, and K. Rashmi. A large scale analysis of hundreds of in-memory
cache clusters at twitter. In 14th {USENIX} Symposium on Operating Systems
Design and Implementation ({OSDI} 20), pages 191–208, 2020.
379