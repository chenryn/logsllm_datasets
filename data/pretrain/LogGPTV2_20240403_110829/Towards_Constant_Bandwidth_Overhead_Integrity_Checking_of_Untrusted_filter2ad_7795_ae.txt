7. Experiments
8. Conclusion
We present some experimental evidence to support the
theoretical claims on the adaptive tree-log algorithm.
In
the experiments, a 4-ary tree of height 9 was used; the data
value/hash block size was 64 bytes and the time stamp size
was 32 bits. ω was set at 10%. The benchmarks are syn-
thetic and give the access patterns of stores and loads. The
size of the working set, the amount of data accessed by the
benchmarks, is about 214 bytes. (C
(nlh) was about
buffer
We have introduced an adaptive tree-log scheme as a
general-purpose integrity checker. We have provided a the-
oretical foundation for the checker and the methodology
that can be used to provide the guarantees and the asymp-
totic behavior of the checker’s performance. The adaptive
tree-log algorithm can be implemented anywhere hash trees
are currently being used to check the integrity of untrusted
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
data. The application can experience a signiﬁcant beneﬁt if
programs can perform sequences of data operations before
performing a critical operation.
References
[1] M. Blum, W. S. Evans, P. Gemmell, S. Kannan, and M. Naor.
In Algorithmica,
Checking the Correctness of Memories.
volume 12, pages 225–244, 1994.
[2] D. Clarke, S. Devadas, M. van Dijk, B. Gassend, and G. E.
Suh. Incremental Multiset Hash Functions and Their Appli-
cation to Memory Integrity Checking. In Advances in Cryp-
tology - Asiacrypt 2003 Proceedings, volume 2894 of LNCS,
pages 188–207. Springer-Verlag, November 2003.
[3] D. Clarke, G. E. Suh, B. Gassend, A. Sudan, M. van Dijk,
and S. Devadas. Towards Constant Bandwidth Overhead In-
tegrity Checking of Untrusted Data.
In MIT CSAIL CSG
Technical Memo 480, November 2004.
[4] B. Gassend, G. E. Suh, D. Clarke, M. van Dijk, and S. De-
vadas. Caches and Merkle Trees for Efﬁcient Memory In-
tegrity Veriﬁcation. In Proceedings of Ninth International
Symposium on High Performance Computer Architecture,
pages 295–306, February 2003.
[5] O. Goldreich and R. Ostrovsky. Software Protection and
Journal of the ACM,
Simulation on Oblivious RAMs.
43(3):431–473, 1996.
[6] E. Hall and C. S. Jutla. Parallelizable Authentication Trees.
In Cryptology ePrint Archive, December 2002.
[7] J. L. Hennessy and D. A. Patterson. Computer Organization
and Design. Morgan Kaufmann Publishers, Inc., 1997.
[8] D. Lie.
Architectural Support
for Copy and Tamper-
Resistant Software. PhD thesis, Stanford University, De-
cember 2003.
[9] R. C. Merkle. Secrecy, Authentication, and Public Key Sys-
tems. PhD thesis, Stanford University, June 1979.
[10] G. E. Suh, D. Clarke, B. Gassend, M. van Dijk, and
S. Devadas. AEGIS: Architecture for Tamper-Evident and
In Proceedings of the 17th
Tamper-Resistant Processing.
Int’l Conference on Supercomputing, pages 160–171, June
2003.
[11] G. E. Suh, D. Clarke, B. Gassend, M. van Dijk, and S. De-
vadas. Efﬁcient Memory Integrity Veriﬁcation and Encryp-
tion for Secure Processors. In Proceedings of the 36th
Int’l
Symposium on Microarchitecture, pages 339–350, Decem-
ber 2003.
[12] J. Yang, Y. Zhang, and L. Gao. Fast Secure Processor for In-
hibiting Software Piracy and Tampering. In Proceedings of
the 36th
Int’l Symposium on Microarchitecture, pages 351–
360, December 2003.
A. Proof of Tree-Log Checker
In this appendix, we prove the security of the tree-log
checker in Section 5. We refer to a multiset as a ﬁnite un-
ordered group of elements where an element can occur as
a member more than once. Recall from Section 3 that we
say that RAM behaves like valid RAM if the data value that
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
the checker reads from a particular address is the same data
value that the checker most recently wrote to that address.
The simpliﬁed deﬁnition of valid RAM in Section 3 does
not specify what happens in the log-hash scheme (cf. Sec-
tion 4.2) if a store or load operation is done on an address
that has not been added to the RAM. For clarity, if log-
hash-store or log-hash-load is called on an address before
log-hash-add is called to add the address to the log-hash
scheme, then the RAM has not behaved like valid RAM.
We ﬁrst prove the security of the log-hash scheme in Sec-
tion 4.2.
Lemma A.1 Denote the addresses on which log-hash-add
has been called on as the multiset, M
lh-add is
a set (log-hash-add has been called exactly once on each
address), the log-hash-check operation returns true if and
only if the untrusted RAM has behaved like valid RAM and
the log-hash-check operation has read exactly the set of
addresses in M
lh-add. If M
lh-add.
Proof Let W be the multiset of triples written to memory
and let R be the multiset of triples read from memory. That
is, W hashes to WRITEHASH and R hashes to READHASH.
If the untrusted RAM has behaved like valid RAM and
the log-hash-check operation has read exactly the set of
addresses in M
lh-add, it is easy to verify that the log-hash-
check operation returns true. Suppose the RAM does not
behave like valid RAM (i.e., the data value that the checker
reads from an address is not the same data value that the
checker had most recently written to that address). We will
prove that W (cid:4)= R.
Consider the put and take operations that occur on an
address as occurring on a timeline. To avoid confusion with
the values of TIMER, we express this timeline in terms of
processor cycles. Let x1 be the cycle of the ﬁrst incorrect
take operation. Suppose the checker reads the pair (v1, t1)
from address a at x1. If there does not exist a cycle at which
the checker writes the pair (v1, t1) to address a, then W (cid:4)=
R and we are done.
Suppose there is a cycle x2 when the checker ﬁrst writes
(v1, t1) to address a. Because of line 3 in the take opera-
tion, the values of time stamps of all of the writes to a after
x1 are strictly greater than t1. Because the time stamps at
x1 and x2 are the same and since put operations and take
operations do not occur on the same cycle, x2 occurs before
x1 (x2  x3.
Because the read at cycle x1 is the ﬁrst incorrect read, the
read at cycle x3 is a correct read. So the read at x3 reads the
same pair that was written at x2. Again, because of line 3
in the take operation, the values of time stamps of all the
writes to a after x3 are strictly greater than t1. Therefore,
(v1, t1) cannot be written after x3. Because x2 is the ﬁrst
cycle on which (v1, t1) is written to a, (v1, t1) cannot be
written before x2. Because M
lh-add is a set, two writes to
an address always have a read from that address between
them. Because x3 is the ﬁrst read from a after x2, and two
writes to an address always have a read from that address
between them, (v1, t1) cannot be written between x2 and
x3. Therefore, the pair (v1, t1) is written only once, but it is
read at x1 and x3. Therefore, W (cid:4)= R.
Suppose the log-hash-check operation has not read ex-
actly the set of the addresses in M
lh-add. Then, there is a
triple in W that is not in R, or a triple in R that is not in W .
Therefore, W (cid:4)= R.
W (cid:4)= R implies that WRITEHASH is not equal to READ-
the log-hash-check operation fails, or that a
HASH i.e.
collision has been found in the multiset hash function. (cid:1)
We now prove the security of the tree-log scheme in Sec-
tion 5.
Theorem A.2 The untrusted RAM has behaved like valid
RAM if and only if the tree-log integrity checks (using the
hash tree and the tree-log-check operation) return true.
Proof The validity condition, that if the RAM has behaved
like RAM, then the tree-log integrity checks return true, is
easy to verify. We present an argument for the safety con-
dition: if the tree-log integrity checks return true, then the
RAM has behaved like valid RAM.
First we show that M
We assume that the bookkeeping data structures (cf. Sec-
tion 5.2) are not protected. The adversary can tamper with
the data structures, data values and time stamps at will. We
will assume that all of the hash tree integrity checks and
tree-log-check integrity checks return true. We will prove
that an adversary is unable to affect the validity of the RAM.
lh-add, the multiset of addresses
on which log-hash-add has been called, is a set. Sup-
pose tree-log-moveToLogHash is called on an address
that has already been added to the log-hash scheme. When
the checker ﬁrst called tree-log-moveToLogHash on the
address in the tree to add it to the log-hash scheme, hash-
tree-updateParent(a, NULL) was called to update, in the
tree, the parent node of the address with a value that the ad-
dress can never have. If the checker subsequently calls the
tree-log-moveToLogHash operation on the address again
during the same check period, the operation ﬁrst checks the
integrity of the old value of the node and its siblings in the
hash tree. The hash tree integrity check will not pass. Thus,
we infer that if all of the integrity checks pass, then M
is a set and the results of Lemma A.1 apply.
lh-add
the bookkeeping data structures, then either the tree-log-
check operation would not read exactly the set of address
in M
lh-add, or a hash tree store or load operation would be
performed on an address that is in the log-hash scheme, or a
log-hash store or load operation would be performed on an
address that is in the hash tree. Suppose that the tree-log-
check operation does not read exactly the set of addresses
in M
lh-add. This means that the log-hash-check operation
does not read exactly the set of addresses in M
lh-add. By
Lemma A.1, the tree-log-check operation will not pass.
Suppose that a hash tree store or load operation is per-
formed on an address that is in the log-hash scheme. Be-
cause the NULL value was recorded in the address’s parent
in the tree when the address was ﬁrst moved to the log-hash
scheme and because hash-tree-store and hash-tree-load
each check the integrity of the data value read from the
RAM (recall that hash-tree-store checks the integrity of
the old value of node and its siblings before updating the
node), the hash tree integrity will not pass. Suppose that a
log-hash store or load operation is performed on an address
that is in the hash tree. log-hash-store or log-hash-load
is then called on the address before log-hash-add is called
to add the address to the log-hash scheme. By Lemma A.1,
the tree-log-check operation will not pass. Thus, if the ad-
versary tampers with the bookkeeping data structures, the
checker will detect the tampering.
Finally, we show that the adversary cannot tamper with
the data values (or time stamps) without the checker de-
tecting the tampering. Suppose the adversary tampers with
the data value of an address that is protected by the tree.
tree-log-moveToLogHash, tree-log-store and tree-log-
load each check the integrity of the data value read from the
untrusted RAM. If the data value is tampered with, the hash
tree integrity check will not pass. Suppose the adversary
tampers with the data value (or time stamp) of an address
that is protected by the log-hash scheme. By Lemma A.1,
the tree-log-check operation will not pass. Thus, if the ad-
versary tampers with the data values (or time stamps), the
checker will detect the tampering.
Thus, if all of the hash tree integrity checks and tree-
log-check integrity checks return true, then the RAM has
behaved like valid RAM. This concludes the proof of The-
orem A.2.(cid:1)
The proof demonstrates that, with regards to security, the
bookkeeping data structures do not have to be protected.
B. Worst-case Costs of tree-log-check and
tree-log-bkoff, with caching
We now show that the adversary cannot tamper with
the bookkeeping data structures without the checker de-
tecting the tampering.
If the adversary did tamper with
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
In this appendix, we give the worst-case costs of
(nlh) for the adaptive checker in
the case that the FSM uses a cache (cf. Section 6.4). For
(nlh) and C
bkoff
C
tl-chk
Table 2. Worst-case Costs of tree-log-check and tree-log-bkoff, with caching, when a range is used for
bookkeeping (cf. Section 5.2). In the table, bt is the number of bits in a time stamp, bb is the number
of bits in a data value/hash block, h is the height of the hash tree (the length of the path from the root
to the leaf in the tree) and C is the number of blocks that can be stored in the cache.
C
C
(nlh)
2Chbb + nlh((bb + bt) + 2(h − 1)bb)
tl-chk
(nlh)
bkoff
C
tl-chk
(nlh) + 2Chbb + Chbb
on the current program access patterns. Then, the hash tree
simulator could also be dropped. (If the hash tree simula-
tor is not used, the checker will not be able to synchronize
the cache if it backs off, but, in practice, the performance
of the tree after it has moved all of the addresses back into
the tree should soon be about the same with the unsynchro-
nized cache as with a synchronized cache.) Areas of fu-
ture research are to investigate heuristics for the various es-
timations, as well as more sophisticated tree-log strategies
(cf. Section 6.3), that would work well in practice in differ-
ent system implementations.
this analysis, we assume a range is used for bookkeeping
(cf. Section 5.2). Table 2 summarizes the costs.
The worst-case bandwidth consumption of the tree-log-
check operation is 2Chbb + nlh((bb + bt) + 2(h − 1)bb),
where 2Chbb is the cost of evicting dirty tree nodes that
are in the cache and updating them in the tree in RAM, and
nlh((bb + bt) + 2(h − 1)bb) is the cost of reading the
addresses in the log-hash scheme and moving them to the
tree.
tl-chk
bkoff
tl-chk
The worst-case bandwidth consumption of the tree-log-
(nlh) + 2Chbb + Chbb, where
bkoff operation is C
(nlh) is the worst-case cost of the tree-log-check
C
operation and 2Chbb + Chbb = 3Chbb is the cost of syn-
(nlh) covers the cost
chronizing the cache (Csync). C
of the backing off in both the case where the cache is unsyn-
chronized and all of the addresses are in the tree, and in the
case the cache is unsynchronized and some of the addresses
are in the log-hash scheme.
These bounds on the worst-case costs are actually the
costs of the operations if the cache is not used for the op-
erations. The checker could simulate the operation using
the tree-log simulator to determine the actual costs when
caching is used when the operation is called. If this cost
is less than the bound, caching is used for the operation;
otherwise caching is not used for the operation.
C. Tradeoffs
In this appendix, we discuss some of the tradeoffs a sys-
tem designer may consider making, particularly with re-
gards to the cache simulators in Section 6.4. The simulators
are being used to help guarantee the worst-case bound when
the FSM uses a cache. Though they are small, they do con-
sume extra space overhead. Firstly, if the bound was guar-
anteed on bandwidth consumption, instead of bandwidth
overhead, the base simulator could be dropped. Secondly, if
the strictness of the bound is relaxed, we could have conser-
vative estimates for the various tree-log operations. Then,
the tree-log simulator could be dropped. Finally, we could
have an estimate on the hash tree cost, using information on
its cost when all of the data is in the tree and information
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE