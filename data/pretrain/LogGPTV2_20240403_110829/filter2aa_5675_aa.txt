# XML 学习笔记
---
## 概述
XML 用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML 文档结构包括 XML 声明、DTD 文档类型定义（可选）、文档元素。
XML 无所不在.
```xml
]>
  Tove
  Jani
  Reminder
  Don't forget me this weekend!
```
---
### 用途
XML 应用于 Web 开发的许多方面，常用于简化数据的存储和共享。
**XML 把数据从 HTML 分离**
如果你需要在 HTML 文档中显示动态数据，那么每当数据改变时将花费大量的时间来编辑 HTML。
通过 XML，数据能够存储在独立的 XML 文件中。这样你就可以专注于使用 HTML/CSS 进行显示和布局，并确保修改底层数据不再需要对 HTML 进行任何的改变。
通过使用几行 JavaScript 代码，你就可以读取一个外部 XML 文件，并更新你的网页的数据内容。
**XML 简化数据共享**
在真实的世界中，计算机系统和数据使用不兼容的格式来存储数据。
XML 数据以纯文本格式进行存储，因此提供了一种独立于软件和硬件的数据存储方法。
这让创建不同应用程序可以共享的数据变得更加容易。
**XML 简化数据传输**
对开发人员来说，其中一项最费时的挑战一直是在互联网上的不兼容系统之间交换数据。
由于可以通过各种不兼容的应用程序来读取数据，以 XML 交换数据降低了这种复杂性。
**XML 简化平台变更**
升级到新的系统（硬件或软件平台），总是非常费时的。必须转换大量的数据，不兼容的数据经常会丢失。
XML 数据以文本格式存储。这使得 XML 在不损失数据的情况下，更容易扩展或升级到新的操作系统、新的应用程序或新的浏览器。
**XML 使你的数据更有用**
不同的应用程序都能够访问你的数据，不仅仅在 HTML 页中，也可以从 XML 数据源中进行访问。
通过 XML，你的数据可供各种阅读设备使用（掌上计算机、语音设备、新闻阅读器等），还可以供盲人或其他残障人士使用。
**XML 用于创建新的互联网语言**
很多新的互联网语言是通过 XML 创建的。
这里有一些实例：
- XHTML
- 用于描述可用的 Web 服务 的 WSDL
- 作为手持设备的标记语言的 WAP 和 WML
- 用于新闻 feed 的 RSS 语言
- 描述资本和本体的 RDF 和 OWL
- 用于描述针针对 Web 的多媒体 的 SMIL
---
### XML 和 HTML 之间的差异
XML 和 HTML 为不同的目的而设计：
- XML 被设计用来传输和存储数据，其焦点是数据的内容。
- HTML 被设计用来显示数据，其焦点是数据的外观。
XML 不会做任何事情
- HTML 旨在显示信息，而 XML 旨在传输信息,XML 不会做任何事情.
通过 XML 你可以发明自己的标签
- 这是因为 XML 语言没有预定义的标签。
- HTML 中使用的标签都是预定义的。HTML 文档只能使用在 HTML 标准中定义过的标签（如 ``、`` 等等）。
- XML 允许创作者定义自己的标签和自己的文档结构。
XML 不是对 HTML 的替代
- XML 是对 HTML 的补充。
- XML 不会替代 HTML，理解这一点很重要。在大多数 Web 应用程序中，XML 用于传输数据，而 HTML 用于格式化并显示数据。
---
## 语法
XML 的语法规则很简单，且很有逻辑。这些规则很容易学习，也很容易使用。
**XML 文档必须有根元素**
XML 必须包含根元素，它是所有其他元素的父元素，比如以下实例中 root 就是根元素：
```xml
    .....
```
以下实例中 note 是根元素：
```xml
  Tove
  Jani
  Reminder
  Don't forget me this weekend!
```
**XML 声明**
XML 声明文件的可选部分，如果存在需要放在文档的第一行，如下所示：
```xml
```
以上实例包含 XML 版本（
UTF-8 也是 HTML5, CSS, JavaScript, PHP, 和 SQL 的默认编码。
如果以类似 `` 声明的是文档定义类型（DTD：Document Type Definition），DTD 是可选的。
**所有的 XML 元素都必须有一个关闭标签**
在 HTML 中，某些元素不必有一个关闭标签：
```xml
This is a paragraph.
```
在 XML 中，省略关闭标签是非法的。所有元素都必须有关闭标签：
```xml
This is a paragraph.
```
注释：从上面的实例中，你也许已经注意到 XML 声明没有关闭标签。这不是错误。声明不是 XML 文档本身的一部分，它没有关闭标签。
**XML 标签对大小写敏感**
XML 标签对大小写敏感。标签 `` 与标签 `` 是不同的。
必须使用相同的大小写来编写打开标签和关闭标签：
```xml
这是错误的
这是正确的
```
注释：打开标签和关闭标签通常被称为开始标签和结束标签。不论你喜欢哪种术语，它们的概念都是相同的。
**XML 必须正确嵌套**
在 HTML 中，常会看到没有正确嵌套的元素：
```xml
This text is bold and italic
```
在 XML 中，所有元素都必须彼此正确地嵌套：
```xml
This text is bold and italic
```
在上面的实例中，正确嵌套的意思是：由于 `` 元素是在 `` 元素内打开的，那么它必须在 `` 元素内关闭。
**XML 属性值必须加引号**
与 HTML 类似，XML 元素也可拥有属性（名称/值的对）。
在 XML 中，XML 的属性值必须加引号。
请研究下面的两个 XML 文档。 第一个是错误的，第二个是正确的：
```xml
Tove
Jani
```
```xml
Tove
Jani
```
在第一个文档中的错误是，note 元素中的 date 属性没有加引号。
**实体引用**
在 XML 中，一些字符拥有特殊的意义。
如果你把字符 "if salary 
```
为了避免这个错误，请用实体引用来代替 "if salary &lt; 1000 then
```
在 XML 中，有 5 个预定义的实体引用：
| 实体符号   | 字符   | 含义    |
| - | - | - |
| &lt; 	    |  	| greater than |
| &amp; 	| & 	| ampersand |
| &apos; 	| ' 	| apostrophe |
| &quot; 	| " 	| quotation mark |
注释：在 XML 中，只有字符 "
```
**在 XML 中，空格会被保留**
HTML 会把多个连续的空格字符裁减（合并）为一个：
HTML:
```html
Hello           Tove
```
输出结果:
```html
Hello Tove
```
在 XML 中，文档中的空格不会被删减。
**XML 以 LF 存储换行**
在 Windows 应用程序中，换行通常以一对字符来存储：回车符（CR）和换行符（LF）。
在 Unix 和 Mac OSX 中，使用 LF 来存储新行。
在旧的 Mac 系统中，使用 CR 来存储新行。
XML 以 LF 存储换行。
---
## 树结构
XML 文档形成了一种树结构，它从"根部"开始，然后扩展到"枝叶"。
```xml
Tove
Jani
Reminder
Don't forget me this weekend!
```
第一行是 XML 声明。它定义 XML 的版本（1.0）和所使用的编码（UTF-8 : 万国码, 可显示各种语言）。
下一行描述文档的根元素（像在说："本文档是一个便签"）：
```xml
```
接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）：
```xml
Tove
Jani
Reminder
Don't forget me this weekend!
```
最后一行定义根元素的结尾：
```xml
```
你可以假设，从这个实例中，XML 文档包含了一张 Jani 写给 Tove 的便签。
XML 文档必须包含根元素。该元素是所有其他元素的父元素。
XML 文档中的元素形成了一棵文档树。这棵树从根部开始，并扩展到树的最底端。
所有的元素都可以有子元素：
```
.....
```
父、子以及同胞等术语用于描述元素之间的关系。父元素拥有子元素。相同层级上的子元素成为同胞（兄弟或姐妹）。
所有的元素都可以有文本内容和属性（类似 HTML 中）。
例如:
```xml
        Everyday Italian
        Giada De Laurentiis
        2005