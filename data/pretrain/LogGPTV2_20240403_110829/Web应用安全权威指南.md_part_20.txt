    WHERE name LIKE \'%#%%\' ESCAPE \'#\'
    虽然转义通配符与 SQL
    注入漏洞并无直接关联，但却是正确处理所必需的步骤。
    转义通配符的 PHP 函数示例如下所示。它适用于 PostgreSQL 和
    MySQL。前提为 PHP 的内部字符编码设置无误。
    ``` 代码无行号
    function escape_wildcard($s) {
      return mb_ereg_replace('([_%#])', '#\1', $s);
    }
    ```
    其他数据库引擎中需要转义的字符则略有不同，如下表所示。
    **表 4-10 需要转义的通配符**
      --------------- --------------- ------------------
      数据库          转义对象字符    补充说明
      MySQL           \\\_ %           
      PostgreSQL      \\\_ %           
      Oracle          \\\_ % \\\_ %   全角字符也需转义
      MS SQL Server   \\\_ % \[       见 ※1
      IBM DB2         \\\_ % \\\_ %   全角字符也需转义
      --------------- --------------- ------------------
    ^※1 MS\ SQL\ Server\ 中能够使用\ \[a-z\]\ 这种类似于正则表达式的通配符。\[a-z\]\ 匹配\ 1\ 个小写字母。因此，要查询\ \[\ 本身就必须将\ \[\ 转义。参考：^
    调查时上述数据库的版本如下。
    **表 4-11 调查时使用的数据库版本**
      --------------- -------------------- -----------------------------------------------------------------------------------------------------------------------
      数据库          版本                 参考网页
      MySQL           5.5                  
      PostgreSQL      9.0.2                
      Oracle ※2       11g                  
      MS SQL Server   SQL Server 2008 R2   
      IBM DB2         9.7                  
      --------------- -------------------- -----------------------------------------------------------------------------------------------------------------------
    ^※2 Oracle\ 11g\ 的参考网页中没有提及全角通配符，但根据实际操作我们发现，全角通配符也需要进行转义。（使用\ Oracle\ Database\ 11g\ Enterprise\ Edition\ Release\ 11.1.0.6.0\ 验证）^
-   **使用占位符的各种处理**
    在实际的 Web 应用开发中遇到条件复杂的 SQL
    语句时，很多人可能都会萌发用拼接字符串的方式来组装 SQL
    语句的想法，因为他们觉得使用占位符无法写出复杂的 SQL
    语句。鉴于这种情况，接下来我们就向大家介绍一下各种复杂情况下使用占位符来调用
    SQL 语句的例子。
    -   **查询条件发生动态变化**
        Web 应用的查询页面中有时会提供多个查询条件，在这样的页面中，SQL
        语句只在有输入内容的文本框中组装，所以 SQL
        语句就会根据用户的输入情况而发生变化。
        这种情况下，可以使用字符串动态拼接含有占位符 `?` 的 SQL
        语句，等到调用 SQL
        语句时才绑定参数。示例脚本如下。在这段脚本中，PHP 变量 `$title`
        和 `$price` 分别为书名和价格上限的页面输入值。
        ``` 代码无行号
        // 基底 SQL 语句
        $sql = 'SELECT id, title, author, publisher, date, price FROM books';
        if ($title !== '') { // 添加 title 查询条件（LIKE）
          $conditions[] = "title LIKE ? ESCAPE '#'";
          $ph_type[] = 'text';
          $ph_value[] = escape_wildcard($title);
        }
        if ($price !== '') { // 添加 price 查询条件（大小比较）
          $conditions[] = "price  0) { // 存在 WHERE 语句时
          $sql .= ' WHERE ' . implode(' AND ', $conditions);
        }
        $stmt = $mdb2->prepare($sql, $ph_type); // 准备 SQL 语句
        $rs = $stmt->execute($ph_value);  // 执行变量绑定和查询操作
        ```
        虽然本例中指定的查询条件最多只有 2
        个，但更复杂的查询条件语句也能够通过同样的方法使用占位符拼接而成。
    -   **各种列的排序**
        为了方便用户浏览列表，有时需要将 SQL
        语句的查询结果根据用户指定的列进行排序。SQL 中能够使用 ORDER BY
        语句指定列并进行排序，但编程时稍有疏忽就会引入安全隐患。比如，假设脚本中有如下
        SQL 语句，其中，指定列名的 `$row`
        通过查询字符串等外部途径传入。如果指定 `row=author`
        ，就会按照作者名进行排序。
        ``` 代码无行号
        SELECT * FROM books ORDER BM $row
        ```
        而如果 `$row` 被指定为如下值，就形成了 SQL 注入攻击。
        ``` 代码无行号
        cast((select id||':'||pwd FROM users limit 1) as integer)
        ```
        此时展开后的 SQL 语句如下所示。
            SELECT * FROM books ORDER BM cast((select id||':'||pwd FROM users limit 1) as integer)
        **执行结果**
        ``` 代码无行号
        ERROR: integer 类型的输入语法无效 : "yamada:pass1"
        ```
        另外，还可以在 ORDER BY 语句后插入分号并追加其他 SQL
        语句（UPDATE 等）。
        下面就让我们来看一下该问题的防范策略，即检验排序列名的有效性的方法。
        假设在以下脚本中，由查询字符串 `sort` 来指定进行排序的列。数组
        `$sort_columns` 为允许指定的排序列名。这里使用 `array_search`
        函数检查外界传入的列名是否合法，合法的情况下才能够在 SQL
        语句后面加上 ORDER BY 语句。
        ``` 代码无行号
        $sort_columns = array('id', 'author', 'title', 'price');
        $sort_key = $_GET['sort'];
        if (array_search($sort_key, $sort_columns) !== false) {
          $sql .= ' ORDER BM ' . $sort_key;
        }
        ```
-   **SQL 注入的辅助性对策**
    通过上面的讲述我们知道了防范 SQL
    注入攻击的根本性对策为使用占位符。而这里我们将向大家介绍一些能够配合占位符一起实施的辅助性对策。所谓辅助性对策，是指当根本性对策的实施有疏漏，或者中间件存在漏洞时，能够减轻攻击造成的损害的对策。
    > -   不显示详细的错误消息
    >
    > -   检验输入值的有效性
    >
    > -   设置数据库权限
    -   **不显示详细的错误消息**
        之前我们提到过利用错误消息来实施 SQL
        注入攻击，从而成功窥探数据库中信息的例子。其中，特别是在显示为
        SQL 错误的情况下，SQL
        注入漏洞会更容易暴露给外界。因此，通过避免显示详细的错误消息，就能够在存在
        SQL 注入漏洞的情况下，使攻击难度加大。
        PHP 中关闭详细的错误消息的显示，只需在 php.ini 中做如下设置。
        ``` 代码无行号
        display_errors = Off
        ```
    -   **检验输入值的有效性**
        正如 4.2
        节所述，依据应用程序的规格校验输入值，有时能够达到抵挡外部攻击的效果。例如，邮编输入框仅能输入数字、用户名输入框仅能输入字母和数字等，进行输入校验后，即使忘了利用占位符，也不会使
        SQL 注入攻击得逞。
        但是，仅依靠输入校验是无法杜绝 SQL
        注入攻击的。因为像地址输入框或评论输入框等地方就不限制输入字符的种类。因此，对抗
        SQL 注入攻击还是要使用占位符。
    -   **设置数据库权限**
        将 Web 应用数据库的用户访问权限设置为所需的最低限度后，万一遭受
        SQL 注入攻击，也能将受损降到最低。
        例如，仅显示商品信息的应用就不需要用户对商品数据表进行书写操作。这种情况下，仅开放商品数据表的读取权限给数据库用户，而不授予其书写权限，就能防止商品信息被篡改。
        此外，针对在"其他攻击"中提到的通过 SQL
        读取文件这一攻击类型，也需要设置数据库管理员权限。将数据库用户的权限设为所需的最低限度，即使应用中有
        SQL 注入漏洞，也能将受害程度降到最低。
[24]{.注释编号下} 静态占位符在 ISO 或 JIS
中，也被称为预处理语句（Prepared Statement）。
[25]{.注释编号下} 详情可参考 
[26]{.注释编号下} MySQL 中可以不写 ESCAPE 语句而使用 \\
来转义字符。但由于 SQL 标准规格（ISO 及 JIS）中规定没有 ESCAPE
语句时就认为没有定义转义字符，因此，按照这一标准，始终使用 ESCAPE
语句来定义转义字符更为保险。
#### **总结**
本节讲解了 SQL 注入漏洞的相关知识。SQL
注入漏洞能导致数据库内的所有信息被泄漏或篡改，从而造成极大的影响。因此，应用开发者在编程时一定要时刻警惕
SQL 注入漏洞。
防范 SQL 注入的最佳方法为使用静态占位符调用 SQL 语句。由于即使是动态的
SQL
语句也能够设法使用静态占位符来实现，因此，建议开发者们在应用中全部使用静态占位符。
#### **继续深入学习**
关于以下这些本书未涉及的内容，读者们可以参考独立行政法人信息处理推进机构（IPA）发表的《安全调用
SQL 的方法》\[5\]。
-   应进行转义的字符详情
-   字符编码的影响
而不同数据库引擎的攻击方法的示例，在金床所著的《Web 应用安全》\[2\] 或
Justin Clarke 所著的《SQL 注入攻击与防御》\[1\] 中有详细说明。
此外，当攻击者无法利用错误消息或 UNION SELECT 窃取内部信息时，还可以使用
SQL 盲注攻击（Blind SQL
Injection）的手段达到窃取信息的目的，详情见佐名木智贵所著的《Web
编程安全性技巧》\[3\] 或《SQL 注入攻击与防御》\[1\]。
#### **参考：无法使用占位符时的对策**
虽然本书始终推荐使用占位符来应对 SQL
注入，但是，在一个既有的应用中，如果将实现方针全部改为使用占位符的话，修改成本将非常巨大。
这种情况下，为了解决 SQL 注入漏洞，可以沿用字符串拼接 SQL
语句的方法，并将重点注目于字面量的正确处理上。具体来说应实施以下两点。
-   将字符串字面量中有特殊意义的字符和符号进行转义
-   确保数值字面量中不被混入数值以外的字符
有些调用 SQL 的程序库中提供了 `quote` 方法来转义 SQL
中的字符串字面量，它能够根据数据库的种类和设置等自行调整转义的字符。
数值字面量的情况下一般只需将值转换（Cast）为数值型即可，但是，像位数很多的十进制数等在一些编程语言中就没有对应的类型，这时就不能使用类型转换，而应使用正则表达式来检验数值。
详情请参考独立行政法人信息处理推进机构（IPA）发表的《安全调用 SQL
的方法》\[5\]。
#### **参考：Perl+MySQL 的安全连接方法**
Perl 和 MySQL 的组合有着很高的人气。但由于 Perl 的标准库中的 SQL 连接库
DBI/DBD 连接 MySQL
时默认使用动态占位符，因此，要想改为使用静态占位符的话，就需要修改如下设置（阴影部分）。
    my $db = DBI->connect('DBI:mysql:books:localhost;
    mysql_server_prepare=1
    ;mysql_enable_utf8=1', 'username', 'password')  || die
    $DBI::errstr;
#### **参考：PHP+PDO+MySQL 的安全连接方法**
在使用 PHP 的开发中，连接 MySQL 数据库通常会采用 PDO（PHP Data
Objects）。PDO 因处理速度快而备受欢迎，但使用时需注意防范 SQL 注入漏洞。
PDO 没有提供指定连接数据库时的字符编码的方法，只能通过指定 MySQL
的配置文件的方式来指定字符编码，如下所示。下面的代码中还设置了使用静态占位符。
``` 代码无行号
$dbh = new PDO('mysql:host=localhost;dbname=wasbook', 'username', 'password', array(
    PDO::MMSQL_ATTR_READ_DEFAULT_FILE => '/etc/mysql/my.cnf',
    PDO::MMSQL_ATTR_READ_DEFAULT_GROUP => 'client',
    PDO::ATTR_EMULATE_PREPARES => false,
  ));
```