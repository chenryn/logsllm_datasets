## 一、XXE 概述

在介绍 XXE（XML External Entity Injection）之前，我们先简要了解一下普通的 XML 注入。尽管普通 XML 注入的利用面相对狭窄，主要表现为逻辑漏洞，但其存在仍需引起重视。例如，如果系统允许插入任意 XML 代码，攻击者可能会尝试更广泛的注入方法，如 XXE。

**XXE (XML 外部实体注入)** 是一种安全漏洞，通过这种漏洞，攻击者可以注入外部实体并在解析时被应用程序处理。本文重点在于强调外部实体的作用，提醒读者集中关注这一方面，而非其他可能混淆视听的 XML 特性。一旦成功注入并解析外部实体，攻击者的攻击范围将大大扩展，这正是 XXE 相较于普通 XML 注入更为危险的原因所在。

## 二、背景知识简介

XML 作为一种流行的标记语言，在1990年代后期首次标准化，并广泛应用于各类软件项目中，包括配置文件、文档格式（如OOXML, ODF, PDF等）、图像格式（SVG, EXIF头部）以及网络协议（WebDAV, CalDAV, XMLRPC, SOAP, XMPP, SAML, XACML等）。由于其应用范围极其广泛，任何与之相关的安全问题都可能导致严重的后果。

在处理外部实体的过程中，XML 解析器能够根据 URL 中指定的不同方案（协议）来访问多种网络服务和协议（DNS, FTP, HTTP, SMB 等）。虽然外部实体对于动态引用资源非常有用，使得对引用资源所做的任何更改都会自动更新到文档中，但在不当处理这些实体时也可能引发一系列安全威胁。这些威胁包括泄露本地系统文件（可能含有敏感信息如密码和个人数据）、利用网络访问功能操控内部应用等。结合其他实现缺陷，这类攻击甚至可能导致客户端内存损坏、任意代码执行或服务中断等问题。

## 三、基础知识

XML 文档遵循一定的格式规范，该规范由 DTD (Document Type Definition) 控制。一个简单的 DTD 示例如下：

```xml
<!DOCTYPE message [
    <!ELEMENT message (#PCDATA)>
]>
```

上述 DTD 定义了 XML 的根元素 `message` 及其内容类型。除了定义元素外，还可以在 DTD 中声明实体（类似于变量），以便在 XML 内容中使用。

### 实体分类

- **内部实体 vs. 外部实体**：内部实体是在 DTD 文件内直接定义的；而外部实体则指向外部资源。
- **通用实体 vs. 参数实体**：
  - 通用实体通过 `&实体名;` 引用，在 DTD 中定义并在 XML 文档中使用。
  - 参数实体以 `%实体名;` 形式在 DTD 内部引用，主要用于 DTD 文件自身。

参数实体在盲注型 XXE 攻击中扮演着关键角色。

## 四、潜在攻击手段

### 实验一：有回显读取本地敏感文件 (Normal XXE)

当目标服务器接收并解析带有回显功能的 XML 输入时，可以通过构造特定的 XML 和 DTD 文件来读取服务器上的敏感文件。然而，某些特殊字符可能导致解析错误，此时可采用 CDATA 区块包裹敏感数据以避免此类问题。

### 实验二：无回显读取本地敏感文件 (Blind Out-of-Band XXE)

针对没有直接输出响应的情况，可通过构建外部实体触发服务器向攻击者控制下的地址发送请求，从而间接获取敏感信息。此方法要求攻击者精心设计 DTD 文件及相应负载，确保能有效绕过防护机制达成目的。