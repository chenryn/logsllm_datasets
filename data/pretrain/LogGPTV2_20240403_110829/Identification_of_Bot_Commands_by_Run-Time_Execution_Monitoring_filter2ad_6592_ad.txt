with botmasters for at least several hours [10]. During this
time, the bots should not be allowed to infect a network of
hosts. Even though honeypots are an essential decoy system,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:26 UTC from IEEE Xplore.  Restrictions apply. 
Application
Description
Bot Command
Internet Explorer
Downloading a ﬁle
Clicking other links in the browser
Winscp
Outlook Express
Notepad
PuTTy
Downloading a ﬁle
Connecting the server
Sending email
Executing notepad.exe on a local host
Connecting a FTP server
Downloading a ﬁle from a FTP server
Running ‘ping’ command
download
visit
download
connect
email
execute
connect
download
synﬂood
Table IV
Correlation
(ρ)
Probability
(θ1 (%))
0.7713
0.0225
0.8727
0.8957
0.2529
0.8185
0.5564
0.6573
0.3692
97.49
14.28
99.97
89.57
51.92
90.98
66.99
92.35
52.87
CACT Length Matching
(k)
9
52
13
5
25
6
6
9
7
Yes
No
Yes
No
No
No
No
No
No
RESULTS ON NON-MALICIOUS APPLICATIONS. THE BOT COMMANDS IN THIS TABLE COMPARABLY CORRESPOND TO THE ACTIVITIES OF THE BENIGN
APPLICATIONS.
it is dangerous to let bots communicate through a honey-
wall [16], which only limits rates of communication. Since
bots do not produce much trafﬁc, and stealthily communicate
with a botmaster, an intelligent system is required to control
bot behavior while communicating. This can be achieved
by BotTee through recognizing individual bot behaviors. By
controlling speciﬁc bot actions, we can securely monitor bot
behaviors as long as needed. The hooking technique allows
potentially malicious bot commands to be replaced by more
benign actions, or to be thwarted.
it
Due to the overhead of hooking,
is not practical
to intercept all API calls at runtime. The above results
demonstrate that the set of calls in ComAPI is sufﬁcient to
recognize individual bot behaviors, with little performance
degradation. Through considering the arguments of API
calls, BotTee can be advanced to control current active bots
with high accuracy of the behavior identiﬁcation. In addition,
by using a compact ﬁnite state automaton approach [19], we
can make BotTee more practical and robust against severe
obfuscation. By using such an approach, without making
semantic templates, BotTee can identify individual actions
through dynamic speciﬁcation.
V. RELATED WORK
Many network-based botnet detection schemes have been
proposed in recent years. Felix [1], Evan [7] and Moheeb [2]
investigated botnet dynamics. Felix [1] suggested a method
to mitigate DDoS attacks from botnet by shutting down a
centralized C&C server. Moheeb [2] thoroughly examined
botnet behaviors by tracking IRC botnets through IRC
protocol and DNS tracking techniques. All the above works
employed honeypots to collect bot binaries that inﬁltrate
active botnets on the Internet. In addition, David [5] studied
global diurnal behaviors of botnets through a DNS sinkhol-
ing technique. Guofei proposed three schemes to observe
network-level botnet behaviors for the detection of C&C
channels: BotHunter [20], BotSniffer [6] and BotMiner [21].
Rishi [8] proposed a signature-based IRC botnet detection
system by identifying IRC bot nickname patterns and IRC
NICK messages which have a possibility to come from
a bot. An anomaly-based botnet detection algorithm [22]
329
was presented by combining IRC statistics and TCP work
weight. In addition, a machine learning based botnet de-
tection utilizes some general network-level trafﬁc features
of chat-like protocols like IRC. Except for BotMiner [21],
most works have focused on IRC-based botnet. By contrast,
BotTee deals with characteristics of bots and botnets at the
host-level. It is independent of the network protocol used,
or the employment of encryption, and is not speciﬁc to one
bot family.
Several techniques have been presented for host-based bot
detection by using Detours [12]. The research of application
behaviors through system calls has been of interest for
years [23]–[25]. Botswat [9] is a host-based behavioral bot
detection system based on the Detours. It also analyzes the
behavior of installed bots to distinguish malicious bots from
benign processes by checking whether actions of bots are
remotely initiated or not. Botswat investigated the number of
distinct system calls invoked during a successful execution
of bots, through source code inspection. BotTracer [10] is
another host-based bot detection method that uses known
bot characteristics: automatic startup, C&C channel estab-
lishment, and some speciﬁc attacks (information disper-
sion/harvesting). It uses system level activities to detect
bots through only a few system calls related to disk access
and process memory, which is not enough to recognize
speciﬁc bot system-level activities. Additionally, BotTracer
heuristically identiﬁes the point of DDoS if the bot tries
to connect another server to reply with a result. However,
this situation can frequently happen in a botnet, such as the
‘server’ command, the ‘scan’ command, and the ‘download’
command, etc, as shown in Table I. By comparison, BotTee
can point out the victims targeted by a current bot through
the identiﬁcation of bot commands. Lorenzo and et. al
proposed a layered architecture for the detection of malicious
behaviors [26]. They made a hierarchical behavior graph
through tainting analysis in data control ﬂow. They identi-
ﬁed several malicious behaviors globally, such as proxying,
keystroke logging, data leaking, and downloading. However,
our approach recognizes more speciﬁc bot behaviors, includ-
ing all common network threats, such as DoS, spam, click
fraud, proxy, scan, etc. In addition, our approach is simpler
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:26 UTC from IEEE Xplore.  Restrictions apply. 
[9] E. Stinson and J. C. Mitchell, “Characterizing Bots’ Remote
Control Behavior,” in International Conference on Detection
of Intrusions & Malware, and Vulnerability Assessment, 2007.
[10] L. Liu, S. Chen, G. Yan, and Z. Zhang, “BotTracer:
Execution-based Bot-like Malware Detection,” in 11th Infor-
mation Security Conference, 2008.
[11] Q. Zhang, “Polymorphic and Metamorphic Malware Detec-
tion,” Ph.D. dissertation, North Carolina State University,
2008.
[12] “Hooking,” http://en.wikipedia.org/wiki/Hooking.
[13] K. Jain and R. Sekar, “User-level infrastructure for system
call
interposition: A platform for intrusion detection and
conﬁnement,” in Network and Distributed Systems Security
Symposium, 2000.
[14] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein,
Introduction to Algorithms, second edition. MIT Press and
McGraw-Hill, 350-355. ISBN 0-262-53196-8, 2001.
[15] U. Bayer, C. Kruegel, and E. Kirda, “TTAnalyze: A tool for
analyzing malware,” in 15th European Institute for Computer
Antivirus Research Annual Conference, 2006.
[16] “The Honeynet Project,” http://www.honeynet.org/.
[17] “Obtaining Accurate Timestamps under Windows XP,”
http://www.lochan.org/2005/keith-cl/useful/win32time.html.
[18] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft, A. C.
Snoeren, G. M. Voelker, and S. Savage, “Scalability, ﬁdelity,
and containment in the potemkin virtual honeyfarm,” SIGOPS
Oper. Syst. Rev., vol. 39, no. 5, pp. 148–162, 2005.
[19] R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni, “A Fast
Automaton-based Method for Detecting Anomalous Program
Behaviors,” in IEEE Symposium on Security and Privacy,
2001.
[20] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee,
“BotHunter: Detecting Malware Infection Through IDS-
Driven Dialog Correlation,” in 16th USENIX Security Sym-
posium, 2007.
[21] G. Gu, R. Perdisci, J. Zhang, and W. Lee, “BotMiner:
Clustering Analysis of Network Trafﬁc for Protocol- and
Structure-Independent Botnet Detection,” in 17th USENIX
Security Symposium, 2008.
[22] J. R. Binkley and S. Singh, “An algorithm for anomaly-based
botnet detection,” in 2nd conference on Steps to Reducing
Unwanted Trafﬁc on the Internet.
USENIX Association,
2006.
[23] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and
R. E. Bryant, “Semantics-Aware Malware Detection,” in IEEE
Symposium on Security and Privacy, 2005.
[24] D. Wagner and R. Dean, “Intrusion Detection via Static
Analysis,” in IEEE Symposium on Security and Privacy, 2001.
[25] Q. Zhang and D. S. Reeves, “MetaAware: Identifying Meta-
morphic Malware,” in 23rd Annual Computer Security Appli-
cations Conference, 2007.
[26] L. Martignoni, E. Stinson, M. Fredrikson, S. Jha, and J. C.
Mitchell, “A layered architecture for detecting malicious
behaviors,” in 11th international symposium on Recent Ad-
vances in Intrusion Detection, 2008.
and more efﬁcient than taint analysis.
VI. CONCLUSION
in real
This paper proposes a method for identifying the high-
level commands being executed by a bot,
time.
Such a capability is useful for analysis of bot activities,
intended victims, and control structure. The method is based
on hooking of selected system calls, and comparison of the
resulting traces with a previously-captured set of bot com-
mand templates. The comparison itself involves computation
of a least common call trace subsequence, and correlation
of call trace timing.
This method was implemented in a system called BotTee.
BotTee was evaluated in a private network with actual
bot instances. Under these conditions, BotTee successfully
identiﬁed important bot commands from system call traces.
This held true even for commands executed by bots from
other bot families, and not represented during construction
of the command templates. BotTee is therefore useful for
analysis of bot instances not yet seen. With proper thresh-
old selection, BotTee does not mis-identify commands. In
addition, BotTee is relatively robust to call injection attacks.
BotTee does not rely upon analysis of network trafﬁc and
is independent of the control protocol used. This approach
may be combined with methods that examine network trafﬁc,
for better performance than each alone can achieve. Further,
logging and inspection of the arguments of captured system
calls can shed further light on the attacker’s intentions.
REFERENCES
[1] F. C. Freiling, T. Holz, and G. Wicherski, “Botnet Tracking:
Exploring a Root-Cause Methodology to Prevent Distributed
Denial-of-Service Attacks,” in 10th European Symposium on
Research in Computer Security, 2005.
[2] M. A. Rajab, J. Zarfoss, F. Monrose, and A. Terzis, “A Multi-
faceted Approach to Understanding the Botnet Phenomenon,”
in 6th ACM SIGCOMM conference on Internet measurement.
ACM, 2006.
[3] P. Barford and V. Yegneswaran, “An Inside Look at Botnets,”
in Special Workshop on Malware Detection, Advances in
Information Security, 2006.
[4] M. A. Rajab, J. Zarfoss, F. Monrose, and A. Terzis, “My
Botnet is Bigger than Yours (Maybe, Better than Yours): why
size estimates remain challenging,” in First Workshop on Hot
Topics in Understanding Botnets, 2007.
[5] D. Dagon, C. Zou, and W. Lee, “Modeling Botnet Propagation
Using Time Zones,” in Network and Distributed System
Security Symposium. The Internet Society, 2006.
[6] G. Gu, J. Zhang, and W. Lee, “BotSniffer: Detecting Botnet
Command and Control Channels in Network Trafﬁc,” in 15th
Annual Network and Distributed System Security Symposium,
2008.
[7] E. Cooke, F. Jahanian, and D. McPherson, “The Zombie
Roundup: Understanding, Detecting, and Disrupting Botnets,”
in the Steps to Reducing Unwanted Trafﬁc on the Internet
Workshop. USENIX Association, 2005.
[8] J. Goebel, “Rishi: Identify Bot Contaminated Hosts by IRC
Nickname Evaluation,” in First Workshop on Hot Topics in
Understanding Botnets. USENIX Association, 2007.
330
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:26 UTC from IEEE Xplore.  Restrictions apply.