21. Eb
23a. LK ← HMAC(DHKey, Na,20(cid:107)Nb,20(cid:107)btlk(cid:107)A(cid:107)B)
Phase 4: Link Key Calculation
23b. LK ← HMAC(DHKey, Na,20(cid:107)Nb,20(cid:107)btlk(cid:107)A(cid:107)B)
Fig. 3. Passkey Entry. Phase 0 takes place before execution of the protocol;
A, B, IOcapA, and IOcapB are distributed amongst the devices during
this phase. Phase 2, steps 6-8, are version dependent as labeled (for initiator-
generated passkey, responder-generated passkey, and user-generated passkey),
all other steps are version independent.
Phase 2: Authentication Stage 1.: Phase 2 handles authen-
tication through the passkey and has three versions.
• Initiator-Generated Passkey Entry (PE-IG). The initiating
device randomly samples the passkey r, transmits it to the
user, and the user transmits it to the responding device.
• Responder-Generated Passkey Entry (PE-RG). The re-
sponding device randomly samples the passkey r, trans-
mits it to the user, and the user transmits it to the initiating
device.
• User-Generated Passkey Entry (PE-UG). The user ran-
5
domly samples the passkey r then sends it to both the
initiating and responding devices.
The devices then proceed to authenticate knowledge of r one
bit at a time, for 20 bits of r in sequence. The HMAC Vfy
algorithm outputs a veriﬁcation bit, v ∈ {0, 1}. If v1 = 0 or
v2 = 0, the protocol is aborted.
Phase 3: Authentication Stage 2.: This phase completes
entity authentication, binding commitment of the user authen-
ticated passkey to the Phase 1 knowledge shared key, DHKey.
Phase 4: Link Key Calculation.: The purpose of this phase
is the calculation of the link key, LK, and completion of this
phase concludes Passkey Entry.
III. CYBORG SECURITY MODEL
In this section we present the CYBORG security model
as a synthesis of past security models addressing both cyborg-
type protocols [14], [18], [23] and AKEs in general [7], [13],
[26], [29].
There are two main methods of identifying communicating
sessions within a model: matching conversations (as introduced
in [7]) and session identiﬁers. While matching conversations
capture the concept of agreement over the entirety of the com-
munication transcript, session identiﬁers usually only cover a
partial transcript. Due to the usual lightweight nature of cyborg
protocols (e.g. in that no certiﬁcates are not used) as well as
the potential for lightweight cryptographic algorithms used on
the subsequent channel (as appropriate for IoT use), detecting
any adversarial interference is especially important. Thus, a
variant of matching conversations is appropriate to this model.
However, this is problematic when investigating cyborg
protocols, since messages sent over the UtD channel do not
present an obvious method for inclusion in device transcripts.
Therefore, we present a hybridization of matching conversa-
tions and session identiﬁers, termed session identiﬁers with
user, a CYBORG analogue of matching conversations. We
extract relevant messages sent over both UtD and DtD channels
that match between devices.
We extend standard device-device partnering with user-
device partnering. Both forms of partnering play a key role
in the construction of the various freshness deﬁnitions (Deﬁ-
nitions III.8 and III.10 to III.11), which we leverage to describe
the varying attack scenarios an adversary may mount.
A. Participant Model
1) Sessions: We deﬁne a session to be a single instance
of a protocol and write πA
to refer to the s-th session for
participant A where A ∈ ID ∪ {U}. Let ID be the set of all
s
possible device identities and U be the identity of the user. We
only allow one user identity in keeping with reasons discussed
in Section III-A3 and [23]. We set no limit on the number of
sessions a single participant can have running at any one time
with any other participant.
2) Devices: We utilize session oracles to capture the partic-
ipation of a device A ∈ ID in a speciﬁc session, and describe
the internal state of A as a tuple of the following values:
vice A’s role.
state information.
• skey ∈ K∪{⊥}. This variable holds device A’s completed
session key for the session where K is the associated
keyspace.
• state ∈ {0, 1}∗ ∪ {⊥}. This variable holds other secret
• role ∈ {initiator, responder,⊥}. This variable holds de-
• pid ∈ ID \{A}. This variable holds the identiﬁer for the
• sidu ∈ {0, 1}∗ ∪ {⊥}. This variable holds the current
• δ ∈ {accept, reject,∗}. This variable holds the speciﬁc
result of the session either acceptance, rejection, or no
decision, respectively.
session identiﬁer.
partner device.
At the creation of the s-th session for device A, the ses-
s is initiated to (skey, state, role, pid, sidu, δ) =
sion oracle πA
(⊥,⊥,⊥,⊥,⊥,∗). For session acceptance, we require the
following:
δ = accept ⇐⇒ skey (cid:54)= ⊥ .
3) Users: The user in the CYBORG protocol is assumed
to be honest, whereby honest means that the user executes its
function exactly as described by the protocol speciﬁcation, and
is modeled via session oracles, where each session oracle πU
j
maintains the following state:
• Two device-session pair identiﬁers device1 = (A, s) and
device2 = (B, t), where A, B ∈ ID and A (cid:54)= B.
4) Partnering: Session identiﬁers with user follow the
concept of matching conversations, albeit with transcripts
requiring only information that both devices hold.
Deﬁnition III.1 (Session Identiﬁers with User). Let
two
t , execute an authenticated key
session oracles, πA
exchange protocol, Π, mediated by a user session oracle,
j and let the following tuple of messages be the ordered
πU
s over the course
transcript of all messages sent/received by πA
of Π:
s and πB
(msg1, . . . , msgn) ,
where msgk, is the k-th message sent/received in sequential
order. Then we deﬁne the session identiﬁer, denoted sidu, as
the following subsequence of (msg1, . . . , msgn) pre-appended
by an optional msg0:
for 1 ≤ k ≤ n, we append msgk to πA
criteria are met:
s .sidu if any of the below
s to πB
t , or
1) msgk is sent by πA
2) msgk is received by πA
3) msgk is sent by πA
4) msgk is received by πA
s to πU
s from πB
j and πU
s from πU
t , or
j sends msgk to πB
t
j and πU
j
, or
received msgk
from πB
t
, or
5) msgk is received by πA
s from πU
j and πU
j sends msgk to
πB
t
.
Information exchanged prior to protocol execution for use
within may optionally be pre-appended to sidu as a ﬁxed msg0.
6
Remark. The above deﬁnition follows closely to matching
conversations, with two alterations: 1) we remove information
sent between one device and the user which cannot be expected
to be held by the other device, and 2) we allow additional infor-
mation from prior to the protocol run. The second case captures
pre-shared data that is common in user-mediated protocols,
such as Input/Output capabilities (IOcap) in Bluetooth. While
traditional network protocols such as TLS share capabilities
during the protocol run, such as available ciphersuites, such
mutually held data may be deﬁned externally to the protocol
in the lightweight user-mediated setting.
Deﬁnition III.2. We say that a session identiﬁer πA
s .sidu with
length l ≥ 1 is a preﬁx of πB
s .sidu
match and are in the same order as the ﬁrst l messages in
t .sidu.
πB
Deﬁnition III.3 (Matching Sessions). We say that a device, A,
at session s has matching session identiﬁers with device B at
session t if
t .sidu if all values in πA
t .sidu where A receives the last message(s),
• πA
s .sidu = πB
or
• πB
t .sidu is a preﬁx of πA
message(s).
s .sidu where A sends the last
This is a variant of the standard asymmetric deﬁnition for
(preﬁx) matching session identiﬁers because we must account
for the instance where a device sends the last message and
accepts, but the adversary deletes this message en route to its
intended recipient.
Deﬁnition III.4 (Device-Device Partnering). We say sessions
are partnered if πA
t .pid = A,
s and πB
πA
s .role (cid:54)= πB
t
t .role, and A and B have matching session
πA
identiﬁers.
Deﬁnition III.5 (User-Device Partnering). If πU
(A, s) or πU
are partnered.
j .device2 = (A, s), then we say that πU
j .device1 =
j and πA
s
s .pid = B, πB
User sessions are opaque to device sessions. Consequently,
if the user is partnered with two device sessions, we assume
that the device sessions always send messages to the correct
partnered user session. We also require that a device session
cannot be partnered with more than one user session, as can
be expected in normal user interactions during device pairing.
In the case of devices executing concurrent sessions, the user
can still distinguish sessions since we assume that ephemeral
passkeys will be used.
B. Adversarial Model
1) Communication Channels.: In this section we look to
explicitly deﬁne the capabilities of an adversary in regards
to messages sent over the two communication channels used:
device-to-device (DtD) and user-to-device (UtD).
Deﬁnition III.6 (Device-to-Device Channel). An adversary
may read, replay, delete, or modify any message sent between
device oracles πA
Deﬁnition III.7 (User-to-Device Channel, Without Eavesdrop-
ping). An adversary may replay or delete any message sent
between a device oracle πA
j , but may not
t and we call this the DtD channel.
s and user oracle πU
s , πB
7
modify, to include the intended destination, create, nor read
any message. We call this the UtD channel (UtD).
Our deﬁnition for the DtD channel allows the adversary full
control over communications sent between devices. However,
we do restrict the adversary’s capability to affect communi-
cations over the UtD channel. We disallow read, modify, and
create capabilities under normal operation, and restrict these to
cases of device or user compromise, modeled via adversarial
access or queries. Ultimately the difference inherent to how
users interact with devices over the UtD channel necessitates
stronger attack capabilities not privy to the typical active
attacker when compared to the DtD channel. Lastly, we note
that allowing eavesdropping over the UtD channel is often
protocol dependent as some protocols require secrecy on that
channel (e.g. in Passkey Entry or ATM pin codes), while others
do not (e.g. Bluetooth Numeric Comparison).
2) Adversarial Queries.: We now present a list of queries
for the adversary to use when interacting with Passkey Entry
participants.
• SendDevice(πA
s , msg). The adversary can use this query
to send a message msg to the given session oracle. The
session oracle will then act on msg as the protocol spec-
iﬁes and any response will be returned to the adversary.
If msg = (start, B) for B ∈ ID, a non-protocol speciﬁc
special initiation message, is the ﬁrst message the given
session oracle has received then it will set role = initiator
and pid = B and output the ﬁrst protocol message. This
allows the adversary to initiate a protocol run between two
identities. Else, if the ﬁrst message a device session oracle
receives does not consist of the non-protocol speciﬁc
special initiation message and comes from B ∈ ID, then
the oracle sets pid = B, role = responder, and executes
the protocol as intended in the role of the responder.
• SendUser(πU
s , πB
j , msg). The adversary can use this query to
send a message msg to the given user session oracle
then act on msg as the
j . The session oracle will
πU
protocol speciﬁes and any response will be returned to
t )) for A, B ∈ ID,
the adversary. If msg = (start, (πA
a non-protocol speciﬁc special initiation message, is the
ﬁrst message the given session oracle has received, then
U ﬁrst checks if πA
t were ever part of a received
msg = (start,·) message for any session πU
j(cid:48). If so, the
session outputs ⊥. Else, the session sets device1 = (A, s)
and device2 = (B, t). Else, if the ﬁrst message received
by πU
j does not consist of such a start message, the session
oracle outputs ⊥. The session oracle will then execute the
protocol in the role of the user as intended with the given
device identities.
• StateReveal(πA
s ). The adversary may use this query to
s or πB
obtain access to the session state information state.
• KeyReveal(πA
• ShowUser(πA
obtain access to the session key skey.
s ). The adversary may use this query to
s ). This query outputs ⊥. After this query,
the adversary can modify or create any UtD message sent
from the given device to the user within πA
s .
• ControlUser(πU
j , A). This query outputs ⊥. After this
the adversary can modify or create any UtD
query,
message sent from the user U to the device A of the
current session.
• Test(πA
s ). This query may only be asked once throughout
s .δ (cid:54)= accept, this query returns ⊥. Else,
s .skey if b = 1
the game. If πA
it samples b $← {0, 1}, and sets k ← πA
and k $← {0, 1}λ otherwise. The query outputs kb.
These queries were developed to model compromise of a
device or a user in keeping with modeling real-world attacks.
The SendDevice, StateReveal, Corrupt, KeyReveal and Test
queries are typical variants used to model
the adversary’s
ability to control the experiment and compromise a device’s
internals via side-channel or malware. SendUser is needed to
allow the adversary to initialize user session oracles and also
to give him the ability to send messages to the user as desired.
The two queries, ShowUser and ControlUser, are included to