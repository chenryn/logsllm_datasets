title:Joe-E: A Security-Oriented Subset of Java
author:Adrian Mettler and
David A. Wagner and
Tyler Close
Joe-E: A Security-Oriented Subset of Java
Adrian Mettler
David Wagner
University of California, Berkeley
{amettler, daw}@cs.berkeley.edu
Tyler Close
waterken.org
PI:EMAIL
Abstract
We present Joe-E, a language designed to support the
development of secure software systems. Joe-E is a subset
of Java that makes it easier to architect and implement pro-
grams with strong security properties that can be checked
during a security review.
It enables programmers to ap-
ply the principle of least privilege to their programs; imple-
ment application-speciﬁc reference monitors that cannot be
bypassed; introduce and use domain-speciﬁc security ab-
stractions; safely execute and interact with untrusted code;
and build secure, extensible systems. Joe-E demonstrates
how it is possible to achieve the strong security properties
of an object-capability language while retaining the fea-
tures and feel of a mainstream object-oriented language.
Additionally, we present ways in which Java’s static type
safety complements object-capability analysis and permits
additional security properties to be veriﬁed statically, com-
pared with previous object-capability languages which rely
on runtime checks. In this paper, we describe the design
and implementation of Joe-E and its advantages for secu-
rity and auditability over standard Java. We demonstrate
how Joe-E can be used to develop systems with novel secu-
rity properties that would be difﬁcult or impossible to en-
sure otherwise, including a web application platform that
provides transparent, transactional object persistence and
can safely host multiple mutually-distrustful applications in
a single JVM.
1
Introduction
This paper describes the design and implementation of
a programming language, called Joe-E, which supports de-
velopment of secure systems. Joe-E improves upon today’s
languages in two important dimensions. First, Joe-E makes
software more robust by reducing the number and impact
of inadvertent bugs and security vulnerabilities in benign
software. Second, Joe-E provides ﬂexible mechanisms to
reduce a program’s vulnerability to software components
and allow the safe usage of untrusted code. Both charac-
teristics help to make code more amenable to code review
and security audits, an important property when we place
trust in computer systems’ correct operation and attack re-
silience. In particular, Joe-E supports construction of sys-
tems following a “secure by design” approach, where se-
curity is designed in from the start, as well as “design for
review”, where the code is architected and written specif-
ically to make it as easy as possible for code reviewers to
verify that the application meets its security goals.
Joe-E is based upon the Java programming language.
We show that a relatively small number of simple restric-
tions sufﬁce to deﬁne a subset of Java that provides the se-
curity properties of an object-capability language. (In an
object-capability language, all program state is contained in
objects that cannot be read or written without a reference,
which serves as an unforgeable capability. All external re-
sources are also represented as objects. Objects encapsulate
their internal state, providing reference holders access only
through prescribed interfaces.)
A major contribution of our work is that we bring the
security beneﬁts of object-capability systems to a popular
language. Additionally, we show how Java’s static type sys-
tem can be used to simplify the assurance of security prop-
erties statically, as opposed to via runtime checks used by
the dynamically-typed object-capability languages found in
prior work.
Memory-safe languages like Java make it much easier
to design robust systems and reason about their security
properties than non-memory-safe languages, but in Java it
is still difﬁcult to reason about higher-level security proper-
ties, particularly when composing code with varying levels
of trust or when auditing the security of a program. With
Joe-E we are able to support richer ways of combining code
entrusted to varying degrees while reviewably maintaining
security properties.
Providing secure encapsulation. Consider Fig. 1, which
illustrates how one might build an append-only log facility.
Provided that the rest of the program is written in Joe-E,
a code reviewer can be conﬁdent that log entries can only
be added, and cannot be modiﬁed or removed. This review
public final class Log {
private final StringBuilder content;
public Log() {
content = new StringBuilder();
}
public void write(String s) {
content.append(s);
}
}
Figure 1. An append-only logging facility.
is practical because it requires only inspection of the Log
class, and does not require review of any other code. Con-
sequently, verifying this property requires only local rea-
soning about the logging code.
Perhaps surprisingly, Java does not support this kind of
local reasoning. Because Java allows the deﬁnition of na-
tive methods which can have arbitrary behavior and violate
Java’s safety properties, all bets are off unless one is sure
that the program does not use any such methods. Even if
the program uses no native methods, the append-only prop-
erty of the above code is not guaranteed. Java’s reﬂection
framework includes the ability to ignore the visibility spec-
iﬁer on a ﬁeld, which would allow a reference-holder of
the Log object to retrieve the StringBuilder contained
within as if its ﬁeld were declared to be public. This would
violate the append-only property, as it would then be possi-
ble to perform arbitrary operations on the StringBuilder.
While we might intuitively expect that the rest of the pro-
gram would be unlikely to exploit these weaknesses, we
would have to read all of the code of the entire application
to be sure.
Joe-E removes these and other encapsulation-breaking
features from Java in order to support building and reason-
ing about secure systems. This makes building sound, self-
contained application reference monitors possible. Because
these reference monitors are written as part of the appli-
cation software itself, this provides a powerful mechanism
for enforcing security policies: the programmer has the full
power of the Joe-E programming language for expressing
these security properties, and does not need to learn a new
security speciﬁcation language to specify them. We antic-
ipate that this will aid developers in implementing custom
security abstractions.
Capabilities and least privilege.
In the example above,
only the parts of the program that have access to an instance
of the log object will be able to add log entries; the rest of
the program will be unable to affect that log instance. In
particular, a reference to a Log object is a capability to ap-
pend entries to that log. We can control which parts of the
program receive the power to append to the log by control-
ling who receives a reference to the log object. The rules for
propagation of these capabilities are exactly the rules for
propagation of references in a type-safe language, which
should already be familiar to the programmer; we expect
this will make it easier for programmers to reason about ca-
pability propagation.
For instance, we might have an application where it is
critical that every incoming network request be logged. We
could provide the component that dispatches incoming re-
quests a capability to the log, so it can log every incoming
request. By examining the dispatcher component, we can
verify that every incoming request is logged using only lo-
cal reasoning. If required, we could also verify that no other
log entries are added, by checking that no other component
can receive a reference to the log.
Capabilities also support least privilege. Code can only
write to the log if it has a capability to the log object. Code
that is not explicitly passed this capability has no access to
it, which means that by default the overwhelming majority
of code is veriﬁably incapable of writing to the log. Our
experience is that this encourages a style of programming
where only the code that legitimately needs the power to
append to the log receives a capability to do so.
Analysis of who has access to an object and the principle
of least privilege are both subverted when capabilities are
stored in global variables and thus are potentially readable
by any part of the program. Once an object is globally avail-
able, it is no longer possible to limit the scope of analysis:
access to the object is a privilege that cannot be withheld
from any code in the program. Joe-E avoids these problems
by verifying that the global scope contains no capabilities,
only immutable data.
The Java standard library also provides a large number
of capabilities to all Java code, for example, the ability to
write to any ﬁle that the JVM has access to. In the context
of our example, this would include the ﬁle where the log is
ultimately output. For this reason, Joe-E allows access to
only a safe subset of the standard Java libraries.
Untrusted code and extensibility.
Joe-E also allows ap-
plications to safely execute and interact with untrusted code.
This safety is a result of the fact that Joe-E objects spring
to life with no capabilities other than the ones passed to
them when they were constructed. They can only acquire
additional capabilities that they are explicitly passed. As a
result, Joe-E is well suited to execution of untrusted code,
since untrusted code written in Joe-E cannot harm anyone if
it is not passed any dangerous capabilities. Partially trusted
code can be granted only capabilities appropriate to its func-
tion and the level of trust placed in it.
This aspect of Joe-E provides support for secure exten-
sibility. For instance, consider a graphics viewer program
public interface Decoder extends Immutable {
public final class Currency { }
/** Returns a bitmap; retval[x][y][c] is the value
at position (x,y) of color channel c. */
public final class Purse {
byte[][][] decode(byte[] imagedata);
}
private final Currency currency;
private long balance;
Figure 2. An untrusted image decoder might
implement this interface.
that can be extended with plugins for various ﬁle formats.
We’d like to be able to download a plugin that interprets new
image ﬁles, without exposing ourselves to attack from ma-
licious code. We want to ensure that the worst a malicious
plugin could do is incorrectly decode an image, but for in-
stance it must not be able to send network packets, write to
the ﬁlesystem, or interfere with decoding of other images.
In Joe-E, we could enforce this by requiring plugins to
be written in Joe-E and to implement the interface in Fig. 2.
For instance, a JPEG decoder could implement this inter-
face, interpreting the data passed to it as a JPEG image and
converting the result to a bitmap to be displayed. If the plu-
gin is only invoked through this interface, Joe-E guarantees
the following remarkable security property: multiple invo-
cations of this method will be independent, and no state can
be retained or leaked from invocation to invocation. This
ensures both conﬁdentiality (because information about a
conﬁdential image cannot leak into other images, even if
the plugin is buggy) as well as integrity (even if the plugin
contains bugs that can be exploited, say, by a maliciously
constructed image, these exploits cannot interfere with the
decoding of other images or otherwise harm the rest of the
system, except by decoding the malicious image to an un-
expected bitmap).
The Immutable interface, deﬁned by the Joe-E library,
is treated specially by the language:
the Joe-E veriﬁer
checks that every object implementing this interface will
be (deeply) immutable, and raises a compile-time error if
this cannot be automatically veriﬁed. Since the Decoder
interface extends Immutable, decoding plugins will neces-
sarily be stateless. Also, because only byte arrays can ﬂow
across this interface, it is easy to verify (thanks to the static
type system) that plugins will never receive a capability that
allows them to interact with any other system component.
Reviewable, rich behavioral properties.
Joe-E can be
used to enforce rich, application-speciﬁc behavioral secu-
rity properties. Fig. 3 deﬁnes a currency system. If used,
for instance, in an online game, it would be easy to ver-
ify that trades between players cannot generate money from
nothing. A Currency object provides the power to mint
new money in the corresponding currency; it is impossible
to do so without a reference to this object. A Purse can be
/** Create a new purse with newly minted money,
given the Currency capability. */
public Purse(Currency currency, long balance) {
this.currency = currency;
this.balance = balance;
}
/** Create an empty purse with the same currency
as an existing purse. */
public Purse(Purse p) {
currency = p.currency; balance = 0;
}
/** Transfer money into this purse from another. */
public void takeFrom(Purse src, long amount) {
if (currency != src.currency
|| amount  src.balance
|| amount + balance < 0) {
throw new IllegalArgumentException();
}
src.balance -= amount;
balance += amount;
}
public long getBalance() {
return balance;
}
}
Figure 3. A secure abstraction that supports
ﬂexible use of currencies.
used to hold and transfer money in a particular currency, but
does not grant the power to mint new money.
Note that this API is general enough to support multi-
ple currencies, and can easily be audited for correctness,
even in the presence of multiple mutually-distrusting and
potentially malicious clients.
In particular, to verify that
the currency API cannot be abused, one only need exam-
ine the code of the Currency and Purse classes—nothing
more. From this code we can deduce, for instance, that it
is only possible to create money in a currency if one has a
reference to the corresponding Currency object. This kind
of local reasoning is made possible because Joe-E enforces
encapsulation boundaries that follow the program’s lexical
scoping structure.
Joe-E enables us to concentrate trust in a small, com-
prehensively reviewable portion of the code, which serves
as the trusted computing base (TCB) for a speciﬁc secu-
rity property. Here the Purse only needs to be trusted to
correctly enforce the security properties associated with the
currency, and not for other purposes. This pattern encour-
ages architecting a program so that for each desired secu-
rity property, we can identify a small TCB for that property.
Such a software architecture can, in turn, signiﬁcantly re-
duce the cost of verifying security properties of the applica-
tion.
This paper.
In the rest of this paper, we describe the goals
we had for the Joe-E language (§ 2), the design of the lan-
guage to meet these goals (§ 3–4), patterns that can be used
in reasoning about security of Joe-E applications (§ 5), and
our implementation of the Joe-E language and runtime (§ 6).
Finally, we evaluate the degree to which Joe-E has met our
goals by discussing our experience with the Waterken server
and how it makes use of Joe-E to host mutually-distrustful
web applications (§ 7).
2 Goals and Overview
We have three primary design goals for the Joe-E lan-
guage. First, we want Joe-E to be usable by programmers.
Second, we want Joe-E to support construction of secure
systems. Third, we want to make it easier to verify that the
resulting systems meet their security requirements, and ease
the task of security code reviews. We elaborate on these
goals below, and sketch Joe-E’s approach to each of those
goals.
2.1 Ease of use
To minimize barriers to adoption of Joe-E and reduce the
learning curve for new Joe-E programmers, the language
should be as familiar as possible for programmers. Joe-
E should minimize as much as possible the requirement to
learn new concepts or idiosyncratic syntax. To address this
goal, the Joe-E programming language is based upon Java
(§ 3.1).
Also, as much as possible, Joe-E programmers should be
able to use existing development tools, build on existing li-
braries, and integrate with legacy systems. We partially sup-
port this goal by designing Joe-E as a subset of Java (§ 3.1)
and exposing a capability-secure subset of the Java class li-
braries (§ 4.2).
Joe-E should support construction of new modules, writ-
ten from scratch with security and Joe-E in mind. To receive
the full beneﬁts of Joe-E, software must be structured in a
way that is compatible with good capability design princi-
ples. We do not aim to add security to existing Java code.
Legacy Java code will most likely not be valid Joe-E, and
even if it were, legacy code often fails to be structured in a
way that respects capability principles. It is explicitly not
a goal of this work to make it easy to transform arbitrary
existing Java code into Joe-E; Joe-E is intended for newly
written code.
While existing Java code may not transform easily to
Joe-E, Java code can easily make use of modules written in
Joe-E. For example, an existing Java application may add
support for plugins implemented in Joe-E, thereby limiting