(*Rouselakis Waters CP-ABE construction with k = 4*)
maps G1 * G1 ->GT.
ﬁxed vars [u, h, w, v, alpha].
unﬁxed vars [r, r1, r2, r3, r4].
(*public key*)
trusted polys [F1 = u, F2 = h, F3 = w, F4 = v] in G1.
trusted polys [F5 = alpha] in GT.
Zp vars [a1, a2, a3, a4]. (*attributes*)
(*Secret key*)
untrusted polys [F6 = alpha + w*r, F7 = r] in G1.
untrusted polys [F8 = (u*a1 + h)*r1 - v*r, F9 = r1] in G1.
untrusted polys [F9 = (u*a2 + h)*r2 - v*r, F10 = r2] in G1.
untrusted polys [F10 = (u*a3 + h)*r3 - v*r, F11 = r3] in G1.
untrusted polys [F12 = (u*a4 + h)*r4 - v*r, F13 = r4] in G1.
Figure 13:
Input ﬁle for RW13 CP-ABE scheme.
B.4 Rouselakis-Waters CP-ABE Scheme
In this section, we recall Rouselakis-Waters CP-ABE scheme [44]. The setup and key generation algorithms
of the scheme proceeds as follows.
Setup(1λ): The algorithm picks a random generator g ← G1, samples u, h, w, v, α ← Zp and sets U =
gu, H = gh, W = gw, V = gv. It outputs public parameters pp = (g, U, H, W, V, e(g, g)α) and msk = α.
KeyGen(msk, S = {a1, a2, . . . , ak} ⊆ Zp): Initially, the key generation algorithm picks k + 1 random
exponents r, r1, r2, . . . , rk ← Zp. Then it computes K0 = gα · W r, K1 = gr, and for every i ∈ [k] it computes
Ki,2 = gri and Ki,3 = (U ai H)riV −r. The secret key output is sk = (S, K0, K1,{Ki,2, Ki,3}∀i ∈ [k]).
The input ﬁle for Rouselakis-Waters CP-ABE scheme [44] when the number of attributes is ﬁxed to be
4 is presented in Figure 13. The output by the tool is presented in Figure 15.
26
Output of the tool for Waters09 IBE
F1 = b in G1
F2 = a1 in G1
F3 = a2 in G1
F5 = a2*b in G1
F6 = v + a1*v1 in G1
F7 = v + a2*v2 in G1
F9 = b*v + a2*b*v2 in G1
F12 = h in G1
F13 = a1*alpha*b in GT
F15 = -1*alpha + z1 + r1*v1 + r2*v1 in G1
F17 = z2 + r1*v2 + r2*v2 in G1
F18 = -1*b*z2 in G1
F21 = h*r1 + id*r1*u + r1*tag*w in G1
F24 = id in GT
F25 = tag in GT
F28 = a1*id in G1
F29 = a1*tag in G1
F27 = b*tag in G1
F31 = a2*tag in G1
F34 = a2*b*id in G1
F32 = a1*b*id in G1
F35 = a2*b*tag in G1
F20 = r1 in G1
F0 = 1 in GT
F11 = u in G1
F0 = 1 in G1
F4 = a1*b in G1
F8 = b*v + a1*b*v1 in G1
F10 = w in G1
F14 = a1*alpha + r1*v + r2*v in G1
F16 = -1*b*z1 in G1
F19 = b*r2 in G1
F22 = id in G1
F26 = b*id in G1
F30 = a2*id in G1
F33 = a1*b*tag in G1
F36 = id*v + a1*id*v1 in G1
F38 = id*v + a2*id*v2 in G1
F40 = b*id*v + a1*b*id*v1 in G1
F42 = b*id*v + a2*b*id*v2 in G1
F44 = id*w in G1
F48 = h*id in G1
F23 = tag in G1
F37 = tag*v + a1*tag*v1 in G1
F39 = tag*v + a2*tag*v2 in G1
F41 = b*tag*v + a1*b*tag*v1 in G1
F43 = b*tag*v + a2*b*tag*v2 in G1
F45 = tag*w in G1
F49 = h*tag in G1
F46 = id*u in G1
F50 = a1*alpha*b*id in GT
F47 = tag*u in G1
F51 = a1*alpha*b*tag in GT
Processing untrusted polynomial F16 = -1*b*z1 by rule2
Processing untrusted polynomial F18 = -1*b*z2 by rule2
Processing untrusted polynomial F19 = b*r2 by rule2
Rule not applied
Rule not applied
Rule not applied
Processing untrusted polynomial F20 = r1 by rule2
F20 moved to trusted set and r1 moved to ﬁxed set by rule 2
Processing untrusted polynomial F14 = a1*alpha + r1*v + r2*v by rule2
Processing untrusted polynomial F16 = -1*b*z1 by rule2
Processing untrusted polynomial F18 = -1*b*z2 by rule2
Processing untrusted polynomial F19 = b*r2 by rule2
Rule not applied
Rule not applied
Rule not applied
Rule not applied
Processing untrusted polynomial F21 by rule1
Naive PPE e(F21,F0) = e(F12,F20) * e(F20,F45) * e(F20,F46)
Optimized PPE e(F21,F0) = e(F12*F45*F46,F20)
F21 moved to trusted set by rule 1
Processing untrusted polynomial F14 = a1*alpha + r1*v + r2*v by rule2
Processing untrusted polynomial F16 = -1*b*z1 by rule2
Processing untrusted polynomial F18 = -1*b*z2 by rule2
Processing untrusted polynomial F19 = b*r2 by rule2
Rule not applied
Rule not applied
Rule not applied
Rule not applied
Execution time : 2.644071s
Untrusted set : F14, F15, F16, F17, F18, F19
PPEs : e(F21,F0) = e(F12*F45*F46,F20)
Output : Unknown
Figure 14: Output of the tool for Waters09 IBE scheme.
27
Output of the tool for RW13 CP-ABE
F1 = u in G1
F2 = h in G1
F3 = w in G1
F4 = v in G1
F6 = alpha + r*w in G1
F7 = r in G1
F9 = r1 in G1
F10 = h*r2 - r*v + a2*r2*u in G1
F11 = r2 in G1
F13 = r3 in G1
F14 = h*r4 - r*v + a4*r4*u in G1
F15 = r4 in G1
F18 = a3 in G1
F22 = a3 in GT
F19 = a4 in G1
F23 = a4 in GT
F0 = 1 in GT
F0 = 1 in G1
F5 = alpha in GT
F8 = h*r1 - r*v + a1*r1*u in G1
F12 = h*r3 - r*v + a3*r3*u in G1
F16 = a1 in G1
F20 = a1 in GT
F24 = a1*u in G1
F28 = a1*h in G1
F32 = a1*w in G1
F36 = a1*v in G1
F40 = a1*alpha in GT
F17 = a2 in G1
F21 = a2 in GT
F25 = a2*u in G1
F29 = a2*h in G1
F33 = a2*w in G1
F37 = a2*v in G1
F41 = a2*alpha in GT
F42 = a3*alpha in GT
F43 = a4*alpha in GT
F26 = a3*u in G1
F30 = a3*h in G1
F34 = a3*w in G1
F38 = a3*v in G1
F27 = a4*u in G1
F31 = a4*h in G1
F35 = a4*w in G1
F39 = a4*v in G1
Rule not applied
Processing untrusted polynomial F6 = alpha + r*w by rule2.
Processing untrusted polynomial F7 = r by rule2
F7 moved to trusted set and r moved to ﬁxed set by rule 2
Processing untrusted polynomial F8 = h*r1 - r*v + a1*r1*u by rule2
Processing untrusted polynomial F9 = r1 by rule2
F9 moved to trusted set and r1 moved to ﬁxed set by rule 2
Processing untrusted polynomial F10 = h*r2 - r*v + a2*r2*u by rule2
Processing untrusted polynomial F11 = r2 by rule2
F11 moved to trusted set and r2 moved to ﬁxed set by rule 2
Processing untrusted polynomial F12 = h*r3 - r*v + a3*r3*u by rule2
Processing untrusted polynomial F13 = r3 by rule2
F13 moved to trusted set and r3 moved to ﬁxed set by rule 2
Processing untrusted polynomial F14 = h*r4 - r*v + a4*r4*u by rule2
Processing untrusted polynomial F15 = r4 by rule2
F15 moved to trusted set and r4 moved to ﬁxed set by rule 2
Rule not applied
Rule not applied
Rule not applied
Rule not applied
Processing untrusted polynomial F6 by rule1
Naive PPE e(F6,F0) = F5 * e(F3,F7)
Optimized PPE e(F6,F0) = F5*e(F3,F7)
F6 moved to trusted set by rule 1
Processing untrusted polynomial F8 by rule1
Naive PPE e(F8,F0) = e(F2,F9) * (e(F4,F7))ˆ-1 * e(F9,F24)
Optimized PPE e(F8,F0) = (e(F4,F7))ˆ-1*e(F2*F24,F9)
F8 moved to trusted set by rule 1
Processing untrusted polynomial F10 by rule1
Naive PPE e(F10,F0) = e(F2,F11) * (e(F4,F7))ˆ-1 * e(F11,F25)
Optimized PPE e(F10,F0) = (e(F4,F7))ˆ-1*e(F2*F25,F11)
F10 moved to trusted set by rule 1
Processing untrusted polynomial F12 by rule1
Naive PPE e(F12,F0) = e(F2,F13) * (e(F4,F7))ˆ-1 * e(F13,F26)
Optimized PPE e(F12,F0) = (e(F4,F7))ˆ-1*e(F2*F26,F13)
F12 moved to trusted set by rule 1
Processing untrusted polynomial F14 by rule1
Naive PPE e(F14,F0) = e(F2,F15) * (e(F4,F7))ˆ-1 * e(F15,F27)
Optimized PPE e(F14,F0) = (e(F4,F7))ˆ-1*e(F2*F27,F15)
F14 moved to trusted set by rule 1
Execution time : 12.837395s
PPEs : e(F14,F0) = (e(F4,F7))ˆ-1*e(F2*F27,F15), e(F12,F0) = (e(F4,F7))ˆ-1*e(F2*F26,F13), e(F10,F0) = (e(F4,F7))ˆ-
1*e(F2*F25,F11), e(F8,F0) = (e(F4,F7))ˆ-1*e(F2*F24,F9), e(F6,F0) = F5*e(F3,F7)
Ouptut : PPE Testable :)
Figure 15: Output of the tool for RW13 CP-ABE scheme.
28