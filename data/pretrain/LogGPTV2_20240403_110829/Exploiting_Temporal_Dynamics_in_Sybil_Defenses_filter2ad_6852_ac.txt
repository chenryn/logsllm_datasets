This attack allows an adversary to insert an unbounded
number of identities at a particular instant in time. Thus,
the consequences of our attack are devastating – in its cur-
rent form, SybilLimit fails to provide any defense against
Sybil attacks. We note that the counter elevation attack
model is consistent with the SybilLimit threat model, and
considers attack edges to be static.
We explain our attack using the following series of obser-
vations.
1) The SybilLimit balance condition is designed to prevent
malicious tails in the network (i.e., tails where the ter-
minal node is Sybil/malicious) from validating an un-
bounded number of Sybil identities (by claiming to have
those identities be registered with itself). However, ob-
serve that in the re-registration attack, when an adver-
sary revokes its Sybil identities and inserts new ones, the
tails registering those Sybil identities are actually honest.
2) If the adversary is able to register its Sybil identities at a
suﬃcient number (O(n)) of honest tails, then it can ma-
nipulate the balance condition by (a) registering its Sybil
identities at honest tails, (b) getting its Sybil identities
validated by honest nodes, thus increasing the counter
values corresponding to the balance condition for its tails,
and (c) repeating the previous steps. In other words, if
the adversary has enough attack edges (O(n/wr)) to reg-
ister its Sybil identities at a threshold number of hon-
est tails, then the adversary can uniformly increase the
counter values corresponding to honest tails. We note
that the required number of attack edges are several or-
ders of magnitude lower than the bound of O(n/w) attack
edges that SybilLimit claims to tolerate.
3) The above observations imply that an adversary with suf-
ﬁcient attack edges (O(n/wr)) can increase the counter
values for honest tails (used by other nodes to check the
balance condition). As the counter values corresponding
to honest tails grow, an adversary can proportionally in-
crease the number of Sybil identities that are validated
by malicious tails, thus bypassing the balance condition
and breaking the guarantees oﬀered by SybilLimit.
In
this way, the adversary can insert an unbounded number
of Sybil identities.
Induced social churn attack: Finally, we discuss another
attack on SybilLimit that leverages churn in both the Sybil
and honest regions. Recall that the balance condition in
SybilLimit aims to limit the number of malicious identities
than can be validated by a malicious tail. However, a strate-
gic adversary can exploit protocol mechanisms to induce ar-
tiﬁcial churn in the social topology. The adversary can in-
troduce new edges incident to intermediate nodes that are
part of escaping random walks, random walks that start at
an honest node and end in the Sybil region. This attack in-
duces a change in the permutation tables of malicious users
that are part of escaping random walks, resulting in the re-
placement of one malicious tail with another malicious tail.
We note that churn in the honest region can also result in
this behavior.
How does a change in the tails impact the balance condi-
tion? This behavior has not been speciﬁed in the SybilLimit
protocol. Since the new tail has not participated in validat-
ing any identities, a natural interpretation would be to reset
the counter value corresponding to the new tail to zero. This
809Figure 2: Counter value distribution corresponding to the SybilLimit balance condition (left), and the resulting
Sybil identities that can be validated by an adversary (right), for varying attack rounds, using the Facebook
interaction topology. We can see that over time, the attacker can increase the entire distribution of counter
values, rendering the balance condition useless, and breaking SybilLimit security guarantees.
behavior allows the adversary to validate additional Sybil
identities via the new malicious tails. When counter values
corresponding to these tails reaches a bound enforced by the
balance condition, the adversary can repeat the attack.
4.3 Attack Demonstration
Here, we experimentally demonstrate the feasibility of our
counter elevation attacks. Our goal is to show that an ad-
versary can insert an unbounded number of Sybil identities
in the SybilLimit protocol, breaking its security guarantees.
For our evaluation, we consider a real-world Facebook inter-
action graph from the New Orleans regional network [28].
The dataset comprises of 46,952 nodes (users) connected by
876,993 edges.
We setup an initial conﬁguration of the system by having
1000 honest users invoke the SybilLimit veriﬁcation proce-
dure to validate themselves to a veriﬁer node. This helps
initialize the counter values corresponding to the tails of the
veriﬁer node. Next, we considered 10 random nodes in the
system to be malicious (representing a very low malicious
node fraction of 0.0002 in the system, with only 80 attack
edges), who perform the counter elevation attack described
above. In each attack round, all of the attack edges are used
to insert new Sybil identities, and these Sybil identities get
validated by the honest veriﬁer using the SybilLimit veriﬁca-
tion procedure. The results of the experiment are depicted
in Figure 2, which shows the distribution of counter values
corresponding to the tails of the veriﬁer (left), and the re-
sulting number of Sybil identities that can be validated by
an adversary (right). As we expected, over time, the adver-
sary is able to increase the counter values associated with
the tails of the honest veriﬁer, thus manipulating the ﬂoat-
ing bar corresponding to the SybilLimit balance condition.
This validates our insight that the SybilLimit balance con-
dition can be circumvented by an adversary, allowing it to
register an unbounded number of Sybil identities at an in-
stant in time (and breaking security guarantees oﬀered by
Theorem 3 in [35]).
5. EXPLOITING TEMPORAL DYNAMICS
IN PERSEA, SYBILINFER, AND SYBIL-
RANK
In this section, we present temporal attacks against Sybil-
Infer, SybilRank and Persea. Our attacks rely on the insight
that attack edges can change over time, even though the to-
tal number of attack edges remain ﬁxed (at any time). We
ﬁnd that system designers have failed to consider such tem-
poral dynamics in system design, leading to serious security
vulnerabilities.
5.1 SybilInfer
SybilInfer [8] is a centralized algorithm for labeling nodes
in a social network as honest users or Sybils controlled by
an adversary. SybilInfer observes that a large Sybil attack
results in the Sybil identities being separable from the honest
identities via the minimum-quotient cut in the social graph,
and directly aims to estimate the minimum-quotient cut.
Towards this end, SybilInfer ﬁrst constructs a probabilistic
model of honest social networks based by performing special
random walks over the social graph. The algorithm then
leverages knowledge of a known honest user (trust seed) and
uses Bayesian inference on the generated probabilistic model
to output the set of detected Sybil identities (if any).
5.1.1 Temporal Attacks on SybilInfer
Next, we present a temporal attack against SybilInfer that
exploits churn in attack edges to enhance connectivity be-
tween Sybil identities and the location of the trust seed over
time. Let us suppose that an adversary has several Sybils
and attack edges inserted in the system at time t. SybilIn-
fer would detect some Sybil identities and block the detected
Sybils. In the next timestamp t + 1, the attacker could ad-
just its attack strategy to 1) preserve the survived attack
edges, i.e., attack edges connected to Sybil identities that
were not detected by SybilInfer, and 2) replace the detected
attack edges with new attack edges that are closer to the
trust seed. Observe that the total number of attack edges
remains bounded in our attack model.
In our temporal attack, we aim to replace detected attack
edges with new attack edges that connect to new benign
nodes that the adversary is not already connected to. Con-
necting to new benign users has the advantage of moving
the Sybil identities closer to the trust seed over time.
Therefore, our temporal attack lowers the probability that
Sybils will be detected in timestamp t + 1. As time evolves,
Sybil identities become harder to be detected since the at-
tack edges are moving closer to the trust seed and the sur-
vived Sybils are becoming stronger. Figure 3 depicts our ex-
perimental results, using a synthetic social network topology
generated based on the Preferential Attachment model [5]
(we use synthetic topologies for our SybilInfer experiments
810Figure 3: SybilInfer detection performance degrades with time under our attack edge churn model (δ = 0.5).
(a) is for the scale-free data and (b) is the ratio of the distance between trust seed and Sybils identities, and
the distance between trust seed and other benign identities.
since it is diﬃcult to scale the protocol to real-world datasets).
The synthetic graph contains 1,000 benign nodes, 1,000 Sybil
nodes, and 100 attack edges. We can see that SybilInfer
detection performance degrades with time, validating our
attack.
To shed insight behind the success of this attack, we eval-
uate the distance between the trust seed and the Sybil iden-
tities at each timestamp. Here, we utilize inverse of the
aﬃnity between two nodes to evaluate their distance. To
normalize the distance, we further utilize the ratio of the
average distance between the trust seed and the Sybils and
the average distance between the trust seed and the benign
identities as our distance metric, where
distance(t) =
E(dist(T rust node, Sybil))
E(dist(T rust node, Honest))
(1)
and the dist(a, b) represents the inverse of the aﬃnity be-
tween a and b, and the aﬃnity is computed by random walk
with restart method as in [25]. We can see that the suc-
cess of our temporal attack is correlated with lower distance
ratio.
5.2 SybilRank
SybilRank [7] is a centralized Sybil defense mechanism
which is also based on the assumption that the Sybils have
limited social connections to real users, i.e., the number of
attack edges is bounded. The key insight is that it is easy
for a short random walk starting from a set of honest users
to quickly reach other honest users. On the other hand,
it is relatively hard for these random walks to enter into
the Sybil region because of a bound on the number of at-
tack edges. Speciﬁcally, SybilRank performs a random walk
starting from a set of honest users, i.e. a set of trust seeds,
using power iterations. The length of the random walk is on
the order of log(|V |), i.e. the graph mixing time. When the
random walk terminates, honest users tend to have a larger
degree-normalized landing probability than Sybil identities.
Intuitively, SybilRank can be viewed as a mechanism that
distribute trust scores via random walks starting from a set
of trust seeds. This trust can only ﬂow into the Sybil re-
gion via the limited number of attack edges. Thus, if we
terminate the random walk early before it reaches station-
ary distribution (length less than the mixing time), honest
users will have higher degree-normalized trust scores than
Sybil identities. These trust scores can be used to produce
a ranking list of each node.
5.2.1 Temporal Attacks on SybilRank
Similar to our attack on SybilInfer, we propose a temporal
attack on SybilRank that (a) exploits dynamic nature of the
connectivity between the benign region and the Sybil region,
and (b) knowledge or inference of the honest trust seeds.
If the attacker already knows the identities of the hon-
est trust seeds, then under the dynamic attack edge model
(Section 3), the attacker can choose to preserve the attack
edges that are close to the trust seeds, and replace the attack
edges that are not. Thus, over time, the attacker can alter
the location of its attack edges to move them closer to the
honest trust seeds. Hence, the total trust that ﬂows into the
Sybil region from the trust seeds will be signiﬁcantly larger
than the theoretical anticipation.
Even in the absence of any prior knowledge about the
trust seeds, an adversary can infer the identities of the trust
seeds by using the Sybil defense mechanism as an oracle, as
demonstrated in our experiments on SybilInfer.
5.3 Persea
Persea is a Sybil-resilient social DHT system [4]. The
Persea DHT uses a circular identiﬁer (ID) space, and hier-
archically distributes the ID space among a set of bootstrap
nodes in the network, by assigning each node its own ID
chunk/region. Each bootstrap node in turn can invite other
peers (based on trust relationships) and assigns them a node
ID, and a subset of its own ID chunk/region. This process
continues to form a bootstrap tree, that helps assign node
identiﬁers in a Sybil resilient fashion. Persea ensures that
a bound on the number of attack edges is translated into a
bound on the size of the ID space controlled by an adversary.
Furthermore, Persea replicates (key, value) pairs over mul-
tiple ID locations that are evenly spaced over the circular
ID space. Therefore, even if ID location is occupied by the
malicious Sybils, redundant lookup operations can be used
to retrieve the desired (key, value) pair from other honest
ID regions.
5.3.1 Temporal Attacks on Persea
We present a novel attack against Persea that exploits
churn in attack edges. Under our dynamic attack edge model
(Section 3), the attacker can change attack edges over time.
Speciﬁcally, for each timestamp t + 1, the attacker could re-
place a fraction p of its existing attack edges in the previous
timestamp t with new attack edges. Note that at any instant
of time, the total number of attack edges remains bounded.
2468100.10.150.20.250.30.350.4TimestampError rate  False Negative RateFalse Positive Rate2468101.522.533.5TimestampDistance Ratio811raised by one. After y receives the communication, he/she
needs to make a decision to mark this communication as
wanted or unwanted. Previous adjustment of L is undone
after y makes the decision. If y marks the communication
as unwanted, the balance B of (x, y) is lowered by one (from
the sender’s perspective). If a sender x wants to communi-
cate with a non-friend user z, Ostra ﬁnds a path from x to
z. Then, the bounds and balance of all edges along the path
will be adjusted accordingly.
To ensure legitimate users always able to communicate,
credit balances in Ostra decay towards 0 at a constant rate
d with 0 < d < 1. Furthermore, if a user ﬁnds he/she has too
much credit on all his/her links, he/she can forgive a small
amount of debt from one of his/her friends. To mitigate
communication failures, Ostra uses a timeout T and reset