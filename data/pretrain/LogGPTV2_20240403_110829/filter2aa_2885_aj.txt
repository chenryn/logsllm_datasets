method 
returns 
another 
interface 
named 
com.android.modem.service.ISdlogService. 
Method 
calls 
made 
to 
com.android.modem.service.ISdlogService 
interface 
will 
be 
delivered 
to 
the 
com.android.modem.service.SdlogService 
class. 
The 
com.android.modem.service.ISdlogService interface contains a large number of methods for 
controlling the operation of the modem logging capability. In regard to making the device write the modem 
logs to the SD card, the following methods on the com.android.modem.service.ISdlogService 
interface are called in the following order: configSdlog(), enableLog(), and startLog(). At this point, 
the device will start writing the modem logs to a base directory with a path of /sdcard/sd_logs. Any app 
on the device that has permission to access the SD card, can process and parse the compressed qmdl files 
for the user’s telephony data. This binary file can be viewed in Qualcomm eXtensible Diagnostic Monitor 
Professional (QXDM Pro) or the binary qmdl file can be parsed directly for the user’s text messages and 
call data. Below are byte sequences in PDU format for a sent text message and a received text message, as 
well as a placed and received call. The PoC source code to enable the modem logs is provided in Appendix 
H. The PoC code needs to be coded into an Android app and executed on the ZTE device with an active 
Subscriber Identity Module (SIM) card. The examples below show the hexdump output of a binary qmdl 
file from ZTE where the text message PDUs and call data have been identified. 
Sent text message to the phone number 7035758208 with a message of “Test. Can you text me back?”  
00e89b60  e0 00 01 09 05 00 07 63  33 59 01 30 00 06 00 07  |.......c3Y.0....| 
00e89b70  91 31 21 13 94 18 f0 24  01 01 0a 81 07 53 57 28  |.1!....$....E..!| 
00e89b80  80 00 00 1b d4 f2 9c ee  02 0d c3 6e 50 fe 5d 07  |`..........nP.].| 
00e89b90  d1 cb 78 3a a8 5d 06 89  c3 e3 f5 0f 33 6a 7e 92  |..x:.]......3j~.| 
The PDU starts at the address 0x00e89b6f with a single byte with hex value of 0x07 and ends at 
0x00e89b90 with the end of the message body. The text message body is in 7-bit packed encoding and the 
destination number is in decimal semi-octets. The number of the sender starts at address 0x00e89b7c and 
ends at 0x00e89b80 and is in reverse order (i.e., 07 becomes 70). The text message body starts at address 
0x00e89b80 and ends at 0x00e89b90. The message “Test. Can you text me back?” converts to 
d4f29cee020dc36e50fe5d07d1cb783aa85d0689c3e3f50f in 7-bit packed encoding. 
Received text message from the phone number 7035758208 with a message of “Sucka”  
019928b0  29 00 09 01 25 01 e0 07  91 21 04 44 29 61 f6 00  |)...%....!.D)a..| 
019928c0  19 04 0b 91 71 30 75 85  02 f8 00 00 81 30 11 51  |....Q.x......0.Q| 
019928d0  40 34 69 06 d3 fa 78 1d  06 01 00 1b 22 7e 79 00  |@4i...x....."~y.| 
The PDU starts at the address 0x019928b7 with a single byte with hex value of 0x07 and ends at 
0x019928d8 with the end of the message body. The text message body is in 7-bit packed encoding and the 
sending number is in decimal semi-octets. The number of the sender starts at address 0x019928c4 and ends 
at 0x019928c8. The text message body starts at address 0x019928d4 and ends at 0x019928d8. The message 
“Sucka” converts to d3fa781d06 in 7-bit packed encoding. The text message also contains a timestamp 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
where that starts at 0x019928c0c and ends at 0x019928d0. This hex value of 813011514034 converts to 
3:04:43pm on March 11, 2018. 
Received call from the phone number 7034227613 
03d3eda0  10 00 7a 01 7a 01 c1 12  17 27 37 f5 c9 6a e0 00  |..z.z....'7..j..| 
03d3edb0  03 00 00 00 00 11 00 00  00 07 00 00 00 01 00 00  |................| 
03d3edc0  00 00 00 00 00 37 30 33  34 32 32 37 36 31 33 66  |.....7034227613f| 
03d3edd0  50 11 00 00 f0 af 68 00  90 98 00 00 80 48 69 00  |P.....h......Hi.| 
03d3ede0  d0 b6 e5 ff 00 00 00 00  40 86 02 00 10 f9 ff ff  |........@.......| 
Placed call to the United Airlines reservation number of 18008648331  
03334a20  80 a0 70 c5 c9 6a e0 00  03 38 00 00 00 11 00 00  |..p..j...8......| 
03334a30  00 06 00 00 00 01 00 00  00 00 00 00 00 31 38 30  |.............180| 
03334a40  30 38 36 34 38 33 33 31  00 00 54 0e 60 34 c6 1b  |08648331..T.`4..| 
03334a50  00 00 03 00 50 89 00 80  00 00 00 00 00 00 00 00  |....P...........| 
03334a60  d0 06 7f 02 00 00 00 00  00 00 00 00 30 0d 28 0a  |............0.(.| 
10.2 ZTE – Obtaining the Logcat Log Vulnerability Details 
The logcat logs consist of four different log buffers: system, main, radio, and events. The logcat log is a 
shared resource where any process on the device can write a message to the log. The logcat log is generally 
for debugging purposes. An app can read only from the logcat logs that the app itself has written unless it 
has requested and been granted the READ_LOGS permission by the Android OS. The Android OS and apps 
can write sensitive data to the logs, so the capability to read from the system-wide logcat log was taken 
away from third-party apps in Android 4.1. The logcat logs tend to contain email addresses, telephone 
numbers, GPS coordinates, unique device identifiers, and arbitrary messages written by any process on the 
device. A non-exhaustive list of concrete logcat log messages is provided in Appendix B. Using this 
vulnerability, a third-party app can leverage another app to write the system-wide logcat logs to the SD 
card. App developers may write sensitive data to the logcat log while under the impression that their 
messages will be private and unobtainable. Information disclosure from the logcat log can be damaging 
depending on the nature of the data written to the log. Appendix B contains a username and password pair 
being written to the log in a US Fortune 500 bank’s Android app. 
This vulnerability is present in the same app (com.android.modem.service) that allows the modem log 
to be written to the SD card. A third-party app can use the ModemService to activate the logcat logs being 
written to the SD card. As mentioned previously, the ModemService provides access to five different 
services through interfaces to these services. The com.android.modem.service.IAssistantService 
service interface allows any app on the device to programmatically enable the writing of the logcat logs to 
the SD card. The writing of the logcat logs are inactive by default, although simply enabling their logging 
to the SD card can be performed by an app with zero permissions. As mentioned with the modem logs, an 
app that wants to read from the log files on the SD card, will need to request the READ_EXTERNAL_STORAGE 
permission. 
The 
IAssistantService 
service 
interface 
is 
obtained 
by 
calling 
the 
getAssistantInterface() method on the 
IModemService interface. Method calls to the 
IAssistantService 
service 
interface 
will 
be 
delivered 
to 
the 
com.android.modem.service.AssistantService 
class. 
The 
methods 
exported 
by 
the 
IAssistantService service interface mostly cover logging functions. To enable the logcat logs being 
written to the SD card, the following two methods need to be called on the IAssistantService service 
interface: enableDeamonProcess(boolean) and enableAdbLog(Boolean), where both Boolean values as 
parameters to the methods have a value of true. Proof of Concept code is provided in Appendix I. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Once the logcat logs have been activated, they will get written, by default, to the 
/sdcard/sd_logs/AdbLog/logcat directory. Within this directory, there are four files matching the 
names of the different log buffers: logcat_events.txt, logcat_main.txt, logcat_radio.txt, and 
logcat_system.txt. These log files are in plaintext and can be parsed for known-formats of log messages 
that contain sensitive data. Since these logs are written by default to a directory within the 
/sdcard/sd_logs directory. The same method as previously, leveraging the deleteAllLog() method 
from the ISdlogService method, provides a way of deleting the log files periodically 
11. Making Devices Inoperable 
We found two interesting cases where the sending of a single intent message can render an Android device 
inoperable in the general case. The two devices are the MXQ Android 4.4.2 TV Box and the ZTE Zmax 
Champ sold by Total Wireless.  
11.1 MXQ TV Box – Making Devices Inoperable 
The MXQ TV Box has added in a broadcast receiver application component in the core Android package 
(i.e., android). This is part of the Android framework that runs in the system_server process. The MXQ 
TV Box device has a build fingerprint of MBX/m201_N/m201_N:4.4.2/KOT49H/20160106:user/test-
keys. Any app on the device can send an intent to an exported broadcast receiver application component 
that will make the device inoperable. After the device wouldn’t boot properly, we performed a factory reset 
of the device in recovery mode, and the device would still not boot properly. This leads us to believe that 
the system partition was modified as a result of the actions taken by the broadcast receiver that received an 
intent. Specifically, the package name of the app is android (versionCode=19, versionName=4.4.2-
20170213), 
and 
it 
contains 
an 
exported 
broadcast 
receiver 
named 
com.android.server.SystemRestoreReceiver. 
Below 
is 
the 
declaration 
of 
the 
SystemRestoreReceiver app component in the app’s AndroidManifest.xml file. 
Internally, the SystemRestoreReceiver app component, after receiving a broadcast intent addressed to it, 
calls the androidos.RecoverySystem.rebootRestoreSystem(android.content.Context) method. 
This is a custom method that was added into the android.os.RecoverySystem AOSP class. This custom 
method writes a value of --restore_system\n--locale= to the /cache/recovery/command 
file and boots into recovery mode. It appears that when booting into recovery mode, possibly the system 
partition gets formatted or modified, which would explain the device not booting. We did not examine the 
recovery partition to examine what actually occurs, but we did verify that the device is not functional after 
the SystemRestoreReceiver component executes. Below is the source code to send the broadcast intent 
that will make the device not boot properly. We believe that the user can recover the device by flashing 
clean firmware images to the SD card and flashing them in recovery mode. We have not tried this method, 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
but generally Android TV boxes allow the owner of the device to flash firmware images that are present on 
the SD card. 
Intent intent = new Intent(); 
intent.setClassName("android", "com.android.server.SystemRestoreReceiver"); 
sendBroadcast(intent); 
11.2 ZTE Zmax Champ – Making Devices Inoperable 
We purchased a Total Wireless ZTE Zmax Champ device from Best Buy. This device contains an pre-
installed app with a package name of com.android.zte.hiddenmenu. This ZTE device has a build 
fingerprint of ZTE/Z917VL/fortune:6.0.1/MMB29M/20170327.120922:user/release-keys. Any app 
co-located on the ZTE Zmax Champ device can make the device generally unusable by sending a single 
broadcast intent with a specific action string. Once this is received, the phone will continually enter recovery 
mode and continually crash. We are not exactly sure why this occurs, but we have destroyed two phones 
using it. The phone will boot into recovery mode, try to perform a factory reset, fail, reboot, and then 
continually repeat all of the previous steps in a never-ending cycle. The device comes with a pre-installed 
app with a package name of com.android.zte.hiddenmenu (versionCode=23, versionName=6.0.1). 
This app executes as the system user and is a privileged platform app. In the app’s AndroidManifest.xml 
file, a broadcast receiver named com.android.zte.hiddenmenu.CommandReceiver is declared that 
statically registers to receive broadcast intents with an action of android.intent.action.FD_RESET. 
Sending a broadcast intent with this action will cause the device to enter recovery mode and crash. The 
code to send the broadcast intent is provided below. 
sendBroadcast(new Intent("android.intent.action.FD_RESET")); 
The CommandReceiver broadcast receiver component is exported and accessible to any app co-located on 
the 
device. 
Once 
the 
component 
receives 
a 
broadcast 
intent 
with 
an 
action 
of 
android.intent.action.FD_RESET, the component internally sends a broadcast intent with an action of 
android.intent.action.MASTER_CLEAR_DATA_CARRIER. 
The 
com.android.server.MasterClearReceiver class (running in the system_server process) dynamically 
registers 
a 
broadcast 
receiver 
to 
receive 
broadcast 
intents 
with 
an 
action 
of 
android.intent.action.MASTER_CLEAR_DATA_CARRIER. Once this action string is received by the 
broadcast 
receiver 
it 
will 
call 
the 
android.os.RecoverySystem.rebootWipeUserDataAndCarrier(android.content.Context, 
boolean, java.lang.String) method. This method will write a string value of the contents, shown 
below, to a file with a file path of /cache/recovery/command and then boot into recovery mode. 
--shutdown_after 
--wipe_carrier 
--reason= 
--locale= 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
The phone boots into recovery mode and then starts to perform a factory reset and quickly fails and repeats 
the process. We are unable to tell exactly why the fault is occurring since we do not have access to the 
recovery logs. It could be that the command written to the /cache/recovery/command file is malformed 
and causes a crash when in recovery mode and the command in the file keeps being read in and processed, 
causing another fault, where this cycle continues forever. When the device is continually crashing, we were 
unable to boot into an alternate mode (e.g., system or 
bootloader). The --wipe_carrier command is not in 
AOSP code, and this command would have to be 
handled in recovery mode. The standard commands 
that are accepted in the /cache/recovery/command 
file are provided here in Google’s AOSP source 
code 36 . Our hypothesis is that --wipe_carrier 
command or a different command causes the fault in 
recovery mode and this process repeats and always 
hits the same fault. 
12. Taking Screenshots using system_server 
Certain Android devices will take a screenshot and 
write it to the SD card when a broadcast intent with a 
specific action string is sent. On the vulnerable 
devices, the system_server process dynamically 
registers a broadcast receiver with a specific action 