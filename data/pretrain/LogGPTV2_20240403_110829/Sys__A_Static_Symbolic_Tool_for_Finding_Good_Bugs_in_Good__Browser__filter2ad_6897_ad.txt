locations that a symbolic pointer or a symbolic array index
could refer to).
Sys runs the checker symbolically on each path ﬂagged
by the static pass. The start of each checked path is a stack
allocation s that is potentially used uninitialized. The checker
associates each bit in s with a shadow bit sb and initially sets
each shadow bit sb to 1 (uninit). At each store, it writes all
associated shadow bits sb to 0 (not-uninit). Finally, at the
206    29th USENIX Security Symposium
USENIX Association
end of the ﬁrst block in which s is read, the checker runs the
following snippet with s as uninitVar; it will emit an error
if any bit in sb is set:
uninitCheck uninitVar uninitType = do
 0);
ASSERT(num >= j);
for (int i = 0; i aec = WebRtcAec_CreateAec(aecpc->instance_count);
131 if (!aecpc->aec) {
132
WebRtcAec_Free(aecpc);
The Aec constructor is deﬁned with C++ 11’s default key-
word. This compiler-generated constructor (not shown) does
not initialize the far_pre_buf ﬁeld of the aecpc object; in-
stead, Chrome relies on code to call WebRtcAec_Init to ini-
tialize the object. Unfortunately, when the allocation func-
tion (WebRtcAec_CreateAec) returns null, this ﬁeld remains
uninitialized and is used by WebRtcAec_Free.
USENIX Association
29th USENIX Security Symposium    207
Checking checkers: checkers have errors, just like the code
they check. Errors that lead to false negatives are especially
pernicious because they are silent. For example, this unini-
tialized memory bug from Firefox’s Prio library for privacy-
preserving data aggregation [83] should have been caught by
Firefox’s regular Clang checks:6
/* third_party/prio/prio/serial.c */
116 static SECStatus
117 serial_read_mp_array(msgpack_unpacker* upk, ...,
118
119 {
120
const mp_int* max)
SECStatus rv = SECSuccess;
P_CHECKCB(upk != NULL);
121
125
···
···
140 cleanup:
141
msgpack_unpacked res;
msgpack_unpacked_destroy(&res);
Here, P_CHECKCB checks that upk is null and, if so, goes to
cleanup. cleanup uses the msg_unpacked_destroy func-
tion to free ﬁelds of res—but res hasn’t been declared on
this path, let alone initialized. Given that this bug was serious
enough to lead to a bounty and CVE, missing it may also be a
serious bug in itself. Running multiple tools is a way to ﬁnd
such mistakes, but similar tools can have similar mistakes.
Since Sys is very different from most industry tools, it should
be better able to expose their false negatives (and vice versa).
In practice, browser developers really do update their check-
ing tools in response to bug reports. After looking an NSS bug
Sys found [12] (and an audit of NSS for more occurrences of
the bug), a triage developer said “at the very minimum, the
problem in PRZoneCalloc should be found by something. If
not, we have static analysis problems.” They changed their
Coverity conﬁguration so that it would ﬁnd the missed bug.
5.2 Heap out-of-bounds
After uninitialized memory bugs, stack and heap buffer over-
ﬂows may be the second most widely-checked defect in the
codebases we examine. Overﬂow checking is popular because
overﬂows are the most common way for attackers to hijack
control ﬂow—stack buffer overﬂows are used to overwrite
return addresses, while heap buffer overﬂows are used to over-
write function pointers and virtual table pointers [64, 139].
This checker (Figure 8) discovered 21 out-of-bounds bugs,
including a group of 13 in Chrome’s SQLite with a bounty and
a CVE. It also discovered a CVE in Firefox. Our guess for why
Sys found so many errors is because this check requires both
complicated reasoning (hard for static) and edge case values to
trigger problems with bit-widths and integer wrapping (hard
for static, dynamic, and humans). Since Section 2 already
described this checker, we now mention one difference in
how it makes up fake state, and then discuss results.
6The Prio author runs his own Clang scans that also missed the bug [58].
All other checkers use Sys’s default strategy of allowing
unknown integer values to be anything, but this checker makes
one change to reduce false positives. Many system compo-
nents we check have an internal security model where values
from outside (e.g., user SQL) need to be checked, but data
internal to the browser is trusted. The checker approximates
this split by assuming that any value coming from inside a
data structure has already been checked to be “small.” It as-
sumes all other values can be anything. Without this trick, the
checker was unusable; with it, the results were clean and seri-
ous. This example shows the power of extensions. Because
they are ﬂexible, we can use them to implement programmatic
annotators: rather than manually, laboriously marking each
ﬁeld as safe, we use a few lines of code to mark them all.
Section 2 presented the most serious bug this checker found.
As a twist on Section 5.1, where we discussed using Sys to
improve other tools (and vice versa), Sys discovered—from
ﬁrst principles—a pattern that much simpler tools can express
and check. One of these bugs is in Chrome’s LibDRM, an
interface for communicating with GPUs [6]:
/* third_party/libdrm/src/xf86drmMode.c */
(cid:44)→
1252 new->items = drmMalloc(old->size_items *
···
1257 memcpy(new->items, old->items, old->size_items *
sizeof(*new->items));
(cid:44)→
sizeof(*new->items));
This code looks ﬁne at ﬁrst glance: both the memcpy size and
the allocation size of new->items are exactly the same. But
drmMalloc takes a 32-bit int input, while memcpy takes a
64-bit size_t. For realistic values, size_items can be large
enough to wrap a 32-bit integer but not a 64-bit integer: the
size passed to drmMalloc will wrap around to a small value
and become the target of huge overﬂow when memcpy copies
the unwrapped number of bytes. We found three separate
instances of malloc routines designed to take ints (or i32s
on x86-64) used with memory operations designed to take
size_ts (or i64s on x86-64). Using these bugs as examples,
a simple static checker should be able to ﬁnd this pattern, too.
In response to our reports, the LibDRM team is ﬁxing
their allocation routine to take a size_t [6]; the main SQLite
author patched their code to “use 64-bit allocation routines
wherever possible,” according to his commit message [1]; and
a security lead at Firefox asked for an audit of the allocation
routines in NSPR and NSS [68, 69], network runtime and
TLS code that uses small mallocs [12].
5.3 Concrete out-of-bounds
This section focuses on a specialty of static checkers and
even compilers: stack and heap out-of-bounds bugs caused
by indices that are always concretely out-of-bounds. There
should be almost none left in the code we check. Surprisingly,
out of the four reports we’ve examined so far, Sys found three
conﬁrmed bugs (with one false positive), including a bountied
bug (Figure 9) in Chrome’s audio muxer. According to the bug
208    29th USENIX Security Symposium
USENIX Association
System
Chrome
Firefox
FreeBSD
Total
True
19
16
0
21
False
3
6
0
7
Unknown
2
3
1
4
Figure 8: True bugs and false positives for the out-of-bounds checker. We
have reported all true bugs and they have been conﬁrmed by at least a triage
developer. We run on O1 for this one checker, since duplicate reports from
inlining make production builds overwhelming.
report, fuzzers missed one of the bugs because the incorrect
access was still within the bounds of the object [16].
Static extension: tags three actions:
1. Concrete phi nodes (e.g., phi i32 [5, %label]), which
choose between values ﬂowing into a basic block, and are one
way of loading constants into operands [95].
2. Compiler-generated undef constants [96], used to denote
undeﬁned values (e.g., the result of an undeﬁned operation).
Since undef is a value that allows any bit-pattern, using it as
an index may overﬂow.
3. Any getelementptr, LLVM’s offset calculation instruc-
tion [94], with a concrete index.
For efﬁciency, the static pass does a simple analysis to de-
termine which constant values tagged by the ﬁrst two cases
could reach the third (array index), and passes this informa-
tion to the symbolic checker. The static pass currently ignores
indices into: parent class objects, since these objects may have
a different layout than child object; dynamically-sized struct
ﬁelds (i.e., in C++ accesses off the end of arrays of size [1
x type] in structs); single-index out-of-bounds (because of
C++ iterators); and union types. We tried to write a simple
checker, but a smarter checker will likely yield more results.
Symbolic checker: determines that the out-of-bounds index-
ing is possible. Since we are checking a purely concrete prop-
erty, and in contrast to the other checkers, this symbolic pass
just uses Sys to prune false paths.
5.4 Unvalidated user data
Many symbolic tools can’t handle operating systems code,