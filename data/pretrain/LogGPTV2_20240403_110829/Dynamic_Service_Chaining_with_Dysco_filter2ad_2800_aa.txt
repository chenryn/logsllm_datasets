# Dynamic Service Chaining with Dysco

**Authors:**
- Pamela Zave, AT&T Labs–Research, PI:EMAIL
- Ronaldo A. Ferreira, UFMS, PI:EMAIL
- Xuan Kelvin Zou, Google, PI:EMAIL
- Masaharu Morimoto, NEC Corporation of America, PI:EMAIL
- Jennifer Rexford, Princeton University, PI:EMAIL

## Abstract
Middleboxes play a critical role in enhancing network security and performance, but their effectiveness depends on directing the right traffic through the appropriate middleboxes at the right time. Current traffic-steering techniques often rely on a central controller to install fine-grained forwarding rules in network elements. This approach, however, comes with several drawbacks, including a large number of rules, a single point of failure, challenges in ensuring session affinity, and difficulties with middleboxes that modify packet headers. We propose that a session-level protocol is a superior alternative for traffic steering, as it naturally supports host mobility and multihoming while enabling new capabilities such as dynamic service chaining. Our Dysco protocol steers TCP session packets through a service chain and can dynamically reconfigure the chain during an ongoing session. Dysco requires no changes to end-host or middlebox applications, host TCP stacks, or IP routing. Through formal verification using Spin and experiments with our Linux-based prototype, we demonstrate that Dysco is provably correct, highly scalable, and capable of reconfiguring service chains across a variety of middleboxes.

## CCS Concepts
- **Networks**: Network protocols, Middle boxes / network appliances, Session protocols, Network components

## Keywords
Session Protocol, NFV, Verification, Spin

## 1. Introduction
In the early days of the Internet, end-hosts were stationary devices, each with a single network interface, communicating directly with other such devices. Today, most end-hosts are mobile, many are multihomed, and traffic often passes through chains of middleboxes like firewalls, network address translators, and load balancers. In this paper, we argue that the "new normal" of middleboxes necessitates a re-examination of existing approaches, similar to what has been done for mobility [49].

Most current research proposals for middlebox insertion or "service chaining" use a logically centralized controller to install fine-grained forwarding rules in network elements to direct traffic through the correct sequence of middleboxes [1, 9, 10, 18, 19, 36, 37, 50]. The numerous weaknesses of these solutions stem from their reliance on forwarding rules for traffic steering:
- They require real-time responses from the central controller to handle frequent events, such as link failures, traffic fluctuations, and the addition of new middlebox instances.
- They need network state that scales with the number of policies, the complexity of traffic classification, the length of service chains, and the number of instances per middlebox type.
- Updates to rules due to changes in policy, topology, or load may alter the paths of ongoing sessions, which must traverse the same middleboxes ("session affinity").
- Fine-grained routing is inherently intra-domain, making it difficult to outsource middleboxes to the cloud [40] or other third-party providers [45], as the controller cannot manage the entire path.
- Some middleboxes modify the "five-tuple" of packets in unpredictable ways, causing forwarding rules to fail to match packets after they pass through the middlebox.
- Some middleboxes classify packets to determine the next middlebox, but forwarding by network elements does not allow them to select the service chain for outgoing packets.
- Adding middleboxes to secure sessions (e.g., TLS) is challenging without cooperation from end-hosts to exchange decryption and reencryption information [25].
- Multihomed hosts spread traffic over multiple administrative domains, requiring coordination between seemingly independent paths to ensure all data in a TCP session is seen by necessary middleboxes (e.g., for parental controls [38]).

While some of these issues can be mitigated, the added complexity only partially addresses the problems and leaves others unaddressed. The primary contribution of this paper is a detailed exploration of the idea that session protocols might be a better mechanism for service chaining. By session protocol, we mean any end-to-end protocol that establishes and controls communication between end-hosts. The key advantages of this approach are:
- Many requirements for service chaining, such as session affinity, handling modified five-tuples, selective control by middleboxes, and convergence, apply to individual sessions. A session protocol operates on individual sessions rather than aggregates, and can work end-to-end or separately in each domain.
- In line with the end-to-end argument, all key functions of a session protocol are performed by hosts—whether end-hosts or middlebox hosts. Compared to the session state already present in these hosts, service chaining requires minimal additional state, providing inherent scalability, relieving pressure on controller capacity, and eliminating the need for network state for service chaining.

In response to the challenges of fine-grained forwarding, emerging industry solutions are replacing it with encapsulation, allowing forwarding through the service chain based solely on destination addresses [6, 16, 26]. While this is a step in the right direction, these solutions are still intra-domain and sometimes proprietary. We are interested in service chaining that can work across domains and be easily integrated into existing deployments. Session protocols already provide effective and efficient support for mobility [3, 4, 24, 29, 30, 34, 41] and multihoming [17, 31], and we extend this exploration to middleboxes.

The flexibility of signaling in a session protocol suggests that using it for service chaining could offer new opportunities for optimization and network management. This is indeed the case. We introduce a session protocol that supports dynamic reconfiguration, allowing the middleboxes in a service chain to change mid-session. Dynamic reconfiguration can be useful in various scenarios:
- After directing a request to a backend server, a load balancer could remove itself from the path, reducing the risk of failure and eliminating the need for custom optimizations like direct server return [33].
- A Web proxy cache, ad-inserting proxy, or intrusion detection system could remove itself once its work for a session is complete.
- Ongoing sessions could be redirected through compression middleboxes [13] or packet scrubbers for further analysis when suspicious traffic is detected.
- When the network is congested, ongoing video sessions could be redirected through compression middleboxes.
- An overloaded or maintenance-bound middlebox could be replaced with another of the same type [11, 39].
- When an end-host moves to a new location, a middlebox could be temporarily added to buffer and redirect traffic from the old location, and old middleboxes in the service chain could be replaced with new ones closer to the new location.

Removing a middlebox entirely from the path, rather than bypassing the application, improves performance and reliability while conserving resources for sessions that actually need them.

In this paper, we describe the Dysco session protocol for service chaining with dynamic reconfiguration. Dysco is an extension to TCP, requiring no modifications to end-host or middlebox applications, host TCP stacks, or IP routing. Since service chains do not need to span the entire TCP session, Dysco can be incrementally deployed and used across untrusted domains with conventional security techniques. We focused on TCP due to its dominance, although the Dysco approach does not interfere with forwarding, allowing existing solutions to continue steering all traffic through essential middleboxes like firewalls while coexisting with Dysco for more demanding TCP service chaining.

In addition to the design, implementation, and measurement of a Dysco prototype, this paper makes the following contributions:
- **Highly Distributed Control**: Service chaining and dynamic reconfiguration can be performed under the control of middlebox hosts, avoiding controller bottlenecks and enabling autonomous operation.
- **Generalized Dynamic Reconfiguration**: Dysco supports dynamic reconfiguration even if a middlebox being deleted has modified the TCP session or changed the size of a byte stream. Packet buffering is only needed in cases like server migration.
- **Protocol Verification**: We designed and verified the protocol using the model-checker Spin [15], providing clear evidence of its correctness.
- **Transparent Support for Middleboxes**: Our prototype includes a Linux kernel module that intercepts packets in the network device, working with unmodified applications and a wide range of middleboxes. The module supports Linux namespaces, making it suitable for virtualized environments (e.g., Docker [7]) and experimentation with Mininet [23].

## 2. Dysco Architecture
In Dysco, agents running on hosts establish, reconfigure, and tear down service chains, relying only on high-level policies and basic IP routing. This section introduces the Dysco architecture and provides an overview of the protocol; Section 3 expands on how Dysco can reconfigure an existing service chain.

### 2.1 Basic Service Chaining
The fundamental concept in Dysco is that a service chain for a TCP session is a chain of middleboxes and subsessions, each connecting an end-host and a middlebox or two middleboxes. The service chain is set up when the TCP session is established. The service chain may have the same endpoints as the TCP session, as shown in Figure 1. Each subsession is identified by a five-tuple, just like the TCP session. Unmodified end-host applications and middleboxes see packets with the original header of the TCP session, making Dysco compatible with existing application-layer protocols. Congestion control and retransmission are performed end-to-end (see Figure 2). Dysco agents rewrite packet headers for transmission so that packets traveling between hosts have the subsession five-tuple in their headers, allowing normal forwarding to steer packets through the service chain without increasing packet size.

**Establishment of the Service Chain:**
The establishment of the service chain in Figure 1 begins when the Dysco agent at host A intercepts the outbound SYN packet. If the SYN packet matches a policy predicate, the agent retrieves an address list for the service chain, such as [B, C]. The agent then allocates local TCP ports for the subsession with the next middlebox. It rewrites the packet header with its own address as the source IP address, the address of the next specified middlebox as the destination IP address, and the new allocated TCP ports as the source and destination TCP ports. The agent adds the original five-tuple of the session header and the address list [B, C, D] to the payload of the SYN packet. It creates dictionary entries to map the original session to the new subsession and vice versa, and transmits the modified SYN packet.

When the Dysco agent at host B receives the SYN packet from the network, it checks if the payload carries an address list. If it does, the agent removes the address list from the payload (storing it), rewrites the packet header with the session information stored in the payload, and creates dictionary entries to map the subsession to the session and vice versa. The agent then delivers the packet to the middlebox application.