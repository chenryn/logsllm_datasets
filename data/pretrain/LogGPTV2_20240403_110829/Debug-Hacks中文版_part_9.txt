:
www.TopSage.com
t
B
moy
nov
push
leave
100
call
0
0
-0x4(%ebp),%edx
&edx, -0x4(*%ebp)
0x8048458 
0x804848d 
%eax,0x8(%ebp)
0x804978c,seax
0x8(%ebp) ,%eax
$0x10,%esp
gesp,%ebp
%ebp
-0x8(%ebp),%eax
%eax,-0x8(%ebp)
$0x10,%esp
0x8(ebp)
$0xc,&esp
edx,-0x4(%ebp)
eax, -0x8 (%ebp)
$0x0,&edx
0x8(%ebp)
HACK#9 调试时必需的栈知识 1 55 
?
?
?
③④66
57
---
## Page 74
58
通过栈上保存的返回地址信息，可以获得与GDB 的backtrace 结果相同的调用跟踪
图2-13栈的显示结果
照阅读。
实际的栈的显示结果如图 2-13 所示。为说明相应的部分在图中加入了注释，请对
接下来查看栈的内容。具体操作如下，从表示栈顶的 SP 开始显示适当的大小。
0xbfd89aa8:
Oxbfd89a88:
以通过程序计数器（PC）获得，在 x86 处理器上为 eip 寄存器。FP 是 ebp 寄存器。
的栈的示意图对照一下。首先获取当前的执行位置和FP（帧指针)。当前执行位置可
下面来手动执行一下与 GDB 的 backtrace 相同的操作，将栈上保存的信息与图 2-12
下面在第 2 次调用 sum_til_MAX()时中断执行程序。正好与图 2-12 的(c)的状态一致。
调试器的backtrace
56
Oxbfd89a98:
Oxbfd89a78:
0xbfd89a68:
Oxbfd89a58:
Oxbfd89a48:
Oxbfd89a38:
(gdb) x/40w $sp
(gdb) i r eip ebp
#l 0x08048484 in sum_till_MAX (n=l) at sum.c:19
#0 sum_till_MAX (n=2) at sum.c:18 
(gdb)bt
第2章调试前的必知必会
Oxbfd89a28
0x804846f
0x00000000
www.TopSage.com
θxbfd89a28
0x804846f 
Ox00000000
栈顺A
栈顿B
栈帧C
---
## Page 75
现在选择的帧为#0，查看该帧内的自动变量sum，其值为4。
用frame命令查看现在选择的帧。
以下状态。
GDB提供了操作栈帧的命令，这里介绍该命令的使用例。假设GDB中进程停止在
使用GDB操作栈帧
backtrace无法正确显示”和“HACK#28数组非法访问导致内存破坏”。
信息被破坏，就无法使用调试器跟踪调用过程。关于栈破坏，请参见“HACK#27
看到这里应该明白，对于调试器来说，栈上的数据是极其重要的信息。万一栈上的
图2-14通过栈信息得到的调用跟踪情况
信息（图2-14)。
$1=4
(gdb)p sum
#0sum_til_MAX(n=4)at sum.c:18
#40x0804854binmain（argc=1,argv=0xbfb92454）at sum.c:34
品
(gdb)frame
#10x08048484 in sum_till_MAX(n=3)at sum.c:19
#0sum_til_MAX（n=4)at sum.c:18
（gdb）bt
0x08048484 in sum_till_MAX（n=1)at sum.c:19
20x08048484insum_till_MAX（n=2)atsum.c:19
的栈使用量来计算帧的位置的。
但是即使如此，GDB也能正确理解帧，这是因为GDB是根据记录在调试信息中
件。在这种情况下，图2-12的栈示意图中的FP和上层FP信息不会被记录在栈上。
编译时为gcc指定-fomit-frame-pointer选项，即可生成不使用帧指针的二进制文
if (n/maps 的信息。
像，可以执行以下命令。执行该命令后，GDB 就会显示与被调试的进程相对应的
下面查看该进程的内存映射（memory map）。要查看 GDB attach了的进程的内存映
这正是将 sum_till_MAX()的参数 n PUSH 到栈顶端的命令。现在查看一下栈指针
发生了 segmentation fault。查看程序计数器（PC）即可看到程序执行位置。
（SP）的位置。
Mapped adress spaces:
exe = '/home/toyo/work/test/sum'
cwd = '/home/toyo/work/test'
cmdline = '/home/toyo/work/test/sum
process 11545
(gdb) i proc mapping
$1 = (void *) 0xbf06dffc 
(gdb)p $sp
θx884847c : pushl 0x8(%ebp)
(gdb) x/i $pc 
0x0804847c in sum_till_MAX (n=209442) at sum.c:19
Program received signal SIGSEGV, Segmentation fault.
Starting program: /home/toyo/work/test/sum
$ gdb ./sum
6
(gdb) r
0xb7fb1000 0xb7fcd000
exb7fb0000 oxb7fb1000
0xb7fae000 0xb7fb0000
0xb7f9d000 0@xb7fa0000
0xb7f9b000
0xb7f9a000 0xb7f9b000
0xb7e57000
Oxb7e56000 0xb7e57000
0x8049000 0x804a000
0x8048000 0x8049000
Start Addr End Addr
0xb7f9d000
0xb7f9a000
www.TopSage.com
0x1c000
0×1000
0x2000
0x3000
0x2000
0x1000
0x143000
0x1000
0x1000
0x1000
Size
 sum += sum_til_MAX(n);
oxb7fb0000
9xb7fae000
0xb7f9d000
0x144000
0x143000
0xb7e56000
offset
HACK#9调试时必需的栈知识丨59
/lib/ld-2.7.so
[vdso] 
/ib/libc-2.7.so
/lib/libc-2.7.so
/ib/libc-2.7.so
/home/toyo/work/test/sum
/home/toyo/work/test/sum
objfile
61
---
## Page 78
62
此外还介绍了GDB 中可以使用的操作栈顿的命令，并举例说明了栈溢出。本hack
本 hack 说明了栈的基本原理，以及调试器的 backtrace 功能是如何利用栈信息的。
可以证明，计算结果是正确的。
它计算的是0到1048576的正数之和，与以下计算等价。
将该值增大到 10 倍，再次执行示例程序，就不会发生 segmentation fault而正常结束了。
总结
笔者的环境中，
许可范围，因而发生了栈溢出。
函数调用都会生成栈帧，随之消耗栈空间。这里由于栈空间的消耗量超出了进程的
该示例程序默认情况下会递归调用 sum_till_MAX()一百万次以上。如前所述，每次
也就是说，发生了栈溢出。
才看到的栈指针的值却是 θxbf06dffc，超出了栈的范围。访问地址超出了栈的范围，
请注意最后一行的[stack]。它表示栈空间，栈空间的顶端是 0xbf06e000。然而，刚
60 |第2章调试前的必知必会
= 549756338176
=1048577 * 524288
(1 + 1048576) *(1048576 / 2)
sum(0..1048576) = 549756338176
$ ./sum
$ ulimit -Ss 81920
8192
$ ulimit -s
(gdb) info files
储）时无法使用。分析 core dump 时可以利用以下命令获得相同信息。
使用该命令时，GDB 会打开/proc//maps，因此在分析 core dump（内核转
(gdb) info target
或者
0xbf06e000 0xbf86e000
0xb7fcd000 0xb7fcf000
，进程允许的栈大小为8MB。
www.TopSage.com
0x800000
0x2000
0xbf800000
0x1b000
[stack] 
/lib/ld-2.7.s0
---
## Page 79
为例，说明使用GDB 查看函数参数的方法。
能与故障有关的函数的参数，以缩小有问题的函数的范围。本 hack 以下面的程序
解决故障的线索。然而实际上，找不到出错位置的情况十分普遍。此时可以检查可
以该值为参数调用其他函数的情况即如此。这种情况下，找出程序出错的位置才是
真正原因有可能在显示错误信息之前很远的地方。例如，某个函数计算出错误的值，
进行字符串查找就能确定显示该信息的源代码位置，相对比较容易。但是，故障的
程序异常结束、与预期行为不一致，这是十分常见的故障。有错误信息的话，只需
函数参数与调试
#10
HACK
● AMD64 Application Binary Interface
参考文献
个线程的栈大小限制。设计应用程序时一定要注意栈的使用量。
程编程时，各个线程使用的栈的总和不能超过进程许可的栈大小，同时还要注意各
void func(int a, long b, short c, char d, long long e, float f, double g, int *h, float
#include 
#include 
float v2 = 0.01;
int vl = 1;
htt:/www.x86-64.org/documentation/abi.pdf
°++5)
情况,[HACK#12]介绍的是使用C++的情况。这几个 hack 所用的编译器都是 GCC
架构上使用C语言的情况。后面的[HACK#11]介绍的是i386架构上使用C语言的
参数传递方法根据架构、语言、编译器的不同而有所不同。本hack介绍的是x86_64
讲述在x86_64架构上参数是如何传递给被调用的函数的。
函数调用时的参数传递方法（x86_64篇）
1
HACK#10 函数调用时的参数传递方法(x86_64 篇) 1  61 
www.TopSage.com
一安部东洋
64
---
## Page 80
如果在构建时不指定-g选项，即无法使用调试信息的情况下，就会像下面这样只显
用的函数func（）开头设置断点，即可像下面这样显示参数。
最简单的确认方法就是使用GDB。带着-g选项构建上述示例程序，用GDB在被调
通过GDB 确认
在笔者的环境下，
62|第2章调试前的必知必会
示暂停的地址，
Breakp0int1,0x0000000040047cin func（)
(gdb)run
Breakpoint1at0x40047c
(gdb)b func
10
h=0x600990,i=0x600994,j=0x4006a3“string")at func_call.c:10
Breakpoint1,func（a=100,b=35000,c=5,d=65A'，e=123456789,f=3.1400001,g=299792458，
(gdb)run
Breakpoint 1at 0x4004a0:file func_call.c,line 10.
(gdb)bfunc
h:0x600990,i:0x600994,j:0x4006a3
f:3.140e+00,g:2.998e+08
a:100,b:35000,c:5,d:A,e:123456789
int main（void)
*i，char*j)
return EXIT_SUCCESS;
func(100,3500L，5,'A'，123456789LL，3.14,2.99792458e8,&1,&v2,“string");
printf("a:%d, b:%ld, c:%d, d:%c, e:%lld\n"
"f:%.3e，g:%.3e\nh：p,i:%p， j:%p\n"， a, b, c, d,e，f，g，h, i， j）;
printf("a:%d, b:%ld, c:d， d:%c,e:%lld\n"
，而不会显示参数的值。这种情况下获取参数的方法如下所示。
，该程序的执行结果如下所示。
www.TopSage.com