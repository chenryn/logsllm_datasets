above pass, V outputs 1.
Input: t = (t1, . . . , t(cid:4))
Output: q()
1) Computing vector T = (W1(t), . . . , WN (t)):
i ) for i = 1, . . . , (cid:8).
i , . . . , td
i , t1
• Compute (t0
• Initialize vector T0 = (1).
• For i = 1, . . . , (cid:8):
i · Ti−1, . . . , td
i · Ti−1), where “ · ” here is scalar
Ti = (t0
multiplication between a number and a vector and “,” means
concatenation. Set T = T(cid:4).
• q|L = FFT(IFFT(T, H), L)
2) Computing q|L:
3) Outputting evaluations indexed by Iq:
Fig. 3: Arithmetic circuit C computing evaluations of q(x) at
κ points in L indexed by I.
of A, for every pp ← zkVPD.KeyGen(1λ), the following
probability is negl(λ):
⎤
⎡
∗
, t) A(1λ, pp),
); 1) ← (cid:3)A(), zkVPD.Verify(com
∗
, π
(com
∗
((y
∗
)(cid:4)(t, pp),
(f, rf ) ← E(1λ, pp) :
com
∗ (cid:5)= zkVPD.Commit(f, rf , pp) ∨ f (t) (cid:5)= y
∗
⎢⎢⎢⎣
Pr
⎥⎥⎥⎦
Our zkVPD protocol is a proof of knowledge in the random
oracle model because of the extractability of Merkle tree,
as proven in [15], [66]. Informally speaking, given the root
and sufﬁciently many authentication paths, there exists a PPT
extractor that reconstructs the leaves with high probability.
Additionally, in our protocol the leaves are RS encoding of
the witness, which can be efﬁciently decoded by the extractor.
We give a proof similar to [15], [66] below.
Proof. Suppose the Merkle tree in our protocol is based on a
random oracle R : {0, 1}2λ → {0, 1}λ. We could construct
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
874
sim(x) ∈ RS[L,|H| + κ + 1]. Evaluate l
(cid:3)
• com S1(1λ, pp): Pick a random polynomial l
• S2(t, pp):
1) Given oracle access to μ = f (t), send it to V∗
2) Evaluate T = (W1(t), . . . , WN (t)). Find the unique univariate polynomial q(x) : F → F such that q|H = T .
3) Pick a degree 2|H| + κ − 1 polynomial ssim(x) randomly. Send V Ssim =
4) Receive α ∈ F from V.
5) Let LDT.S be the simulator the LDT protocol described in Section II-D. Given the random challenges I of V∗
|H|·ai
|H|·(αl(cid:3)
(x) ∈ RS[L,|H| − 1]. For each point ai in I, compute hi such that p
∗
Interpolate hi to get polynomial hsim and sends roothsim ← MT.Commit((hsim|U) to V∗
sim|U and output rootl(cid:3)
(cid:3)
(ai) =
(cid:2)
p
∗
sim
.
a∈H ssim(a) and rootssim MT.Commit(ssim|U).
, call LDT.S to generate
sim(ai)·q(ai)+ssim(ai))−(αμ+Ssim)−|H|·ZH(ai)hi
.
MT.Commit(l
sim|U).
(cid:3)
6) Call LDT.S to simulate the view of the low degree test LDT.SV∗
7) For each index i ∈ I, let ai be the corresponding point in U. P opens (l
) MT.Open(i, ssim|U).
MT.Open(i, hsim|U) and (ssim(ai), π
8) Wait V∗
, where circuit C computes the evaluations of q|U and outputs the elements q(ai) for i ∈ I.
9) Run (cid:3)GKR.P, GKR.V(cid:4)(C, t) with V∗
10) Wait V∗
to validate the points.
sim|U), (hi, π
(cid:3)
for validation.
MT.Open(i, l
(cid:3)
sim(ai), π
hsim
i
ssim
i
sim
)
)
.
.
l(cid:3)
i
Fig. 4: Simulator S of the zkVPD protocol.
a polynomial extractor E with the same random type of A
working as follows:
Simulate AR, and let q1, q2,··· , qt be the queries made by
A to R in the order they are made where duplicates omitted.
Deﬁne qi ∈ R(qj) if the ﬁrst λ bits or the last λ bits of qi
is R(qj). If there exist some i (cid:5)= j, R(qi) = R(qj), or some
i ≤ j qi ∈ R(qj), E aborts and outputs a random string as
(f, rf ).
E constructs an acyclic directed graph G according to the
query set Q = {q1, q2,··· , qt}. There is an edge from qi to
qj in G if and only if qi ∈ R(qj). The outdegree of each
node is at most 2. When A generates rootl(cid:3)
in step 2 of
Protocol 3, if rootl(cid:3) does not equal R(q) for some q ∈ Q,
E aborts and outputs a random string as (f, rf ), otherwise we
suppose R(qr) = rootl(cid:3). If a veriﬁcation path of π
∗ is not
valid, E aborts and outputs a random string as (f, rf ).
Since E knows the correct depth of the Merkle tree, it
could read off all leaf strings with this depth from the binary
tree rooted at qr. If there exists missing leaf, E aborts and
outputs a random string as (f, rf ), otherwise, it concatenates
(cid:4)|H
these leaf strings as w
using an efﬁcient Reed–Solomon decoding algorithm (such as
Berlekamp–Welch). E could easily output (f, rf ) according to
w.
the
(cid:3)A(), zkVPD.Verify(com
)(cid:4)(t, pp)
∗
the
∗, next
event com
we show Pr[E1 ∧ E2] ≤ negl(λ).
The probability that E aborts before constructing the graph
G is negl(λ) because of the collision-resistant property of the
random oracle. If some node on a veriﬁcation path(possibly
∗ does not lie in the graph G,
including the root) of the proof π
A has to guess the value to construct a valid veriﬁcation path,
which propability is also negl(λ) since R is noninvertible.
Additionally, if one leaf of the tree is missing, then V will be
convinced with probability negl(λ) once it queries this leaf.
And the probability this leaf is not be queried by V is at most
(1 − 1|U| )κ = negl(λ) as κ = O(λ).
); 1)
denote
∗ (cid:5)= zkVPD.Commit(f, rf , pp) ∨ f (t) (cid:5)= y
(cid:4)|U, and decodes w = l
∗
and E2
Let E1
denote
event
= l
((y
, π
∗
(cid:4)
∗
If E does not abort, it could always extract some (f, rf )
= zkVPD.Commit(f, rf , pp). In this case, V
satisfying com
accepts the statement with probability negl(λ) if f (t) (cid:5)= y
∗
according to the soundness of zkVPD.
Therefore, Pr[E1 ∧ E2] = Pr[E1 ∧ E2|E aborts] +
Pr[E1 ∧ E2|E does not abort] ≤ Pr[E1|E aborts] + Pr[E1 ∧
E2|E does not abort] ≤ negl(λ) + negl(λ) = negl(λ)
APPENDIX E
PROOF OF THEOREM 3
Proof. Completeness. It follows the completeness of Proto-
col 3 and the completeness of the GKR protocol in [70].
Soundness. It follows the soundness of Protocol 3 and the
soundness of the GKR protocol with masking polynomials as
proven in [32], [70]. The proof of knowledge property follows
the knowledge soundness of our zkVPD protocol. In particular,
the witness can be extracted using the extractor presented in
Appendix D. More formally speaking, our construction is an
interactive oracle proof (IOP) as deﬁned in [15]. Applying the
transformation from IOP to an argument system using Merkle
tree preserves the proof of knowledge property. Our underlying
IOP is proof of knowledge as the proofs are RS codes and the
witness can be efﬁciently extracted through decoding.
Zero knowledge. The simulator is given in Figure 5. V∗ can
behave arbitrarily in Step 3, 4(b), 4(e), 4(f) and 6. We include
these steps as place holders to compare to Protocol 5.
To prove zero-knowledge, Step 1, 2, 4(d) and 5 of both
worlds are indistinguishable because of the zero knowledge
property of the zkVPD protocol in Protocol 3. As the com-
mitments and proofs are simulated in step 2 and 4(d) by Svpd
without knowing the polynomials, Step 4(c) of both worlds are
indistinguishable as shown in [70, Theorem 3]. Step 4(a) in
both worlds are indistinguishable as δ are randomly selected
in both worlds.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
875
Protocol 5 (Our Zero Knowledge Argument). Let λ be the security parameter, F be a prime ﬁeld. Let C : Fn → F be a layered arithmetic
circuit over F with D layers, input x and witness w such that |x| + |w| ≤ n and 1 = C(x; w).
• G(1λ): set pp as pp ← zkVPD.KeyGen(1λ).
• (cid:3)P(pp, w),V(pp)(cid:4)(in):
1) P selects a random bivariate polynomial RD. P commits to the witness of C by sending comD
zkVPD.Commit( ˙VD, pp) to V,
where ˙VD is deﬁned by Equation 3.
2) P randomly selects polynomials Ri : F2 → F and δi : F2si+1+1 → F for i = 0, . . . , D − 1. P commits to these polynomials by
sending comi,1 ← zkVPD.Commit(Ri, pp) and comi,2 ← zkVPD.Commit(δi, pp) to V. P also reveals R0 to V, as V0 is deﬁned
by out and is known to V.
3) V evaluates ˙V0(u(0)) and ˙V0(v(0)) for randomly chosen u(0), v(0) ∈ Fs0.
4) For i = 0, . . . , D − 1:
(cid:2)
Fsi+1 , gi ∈ F selected randomly by V.
x,y∈{0,1}si+1 ,z∈{0,1} δi(x, y, z) to V.
a) P sends Hi =
b) V picks αi, βi, γi randomly in F.
c) V and P execute a sumcheck protocol on Equation 4. At the end of the sumcheck, V receives a claim of f
d) P opens Ri(u(i), gi), Ri(v(i), gi) and δi(u(i+1), v(i+1), gi) using zkVPD.Open. P sends ˙V0(u(i+1)) and ˙V0(v(i+1)) to V.
e) V validates Ri(u(i), gi), Ri(v(i), gi) and δi(u(i+1), v(i+1), gi) using zkVPD.Verify. If any of them outputs 0, abort and output
f) V checks the claim of f
˙V0(u(i+1)) and ˙V0(v(i+1)). If it fails, output 0.
5) P runs (y1, π1)
6) V runs Verify(π1, y1, comD, u(D), pp) and Verify(π2, y2, comD, v(D), pp) and output 0 if either check fails. Otherwise, V checks
zkVPD.Open( ˙VD, v(D), pp) and sends y1, π1, y2, π2 to V.
(cid:3)
i using Ri(u(i), gi), Ri(v(i), gi), δi(u(i+1), v(i+1), gi),
i at point u(i+1), v(i+1) ∈
(cid:3)
zkVPD.Open( ˙VD, u(D), pp), (y2, π2)
˙VD(u(D)) = y1 and ˙VD(v(D)) = y2, and rejects if either fails. If all checks above pass, V output 1.
0.
.
Let λ be the security parameter, F be a prime ﬁeld. Let C : Fn → F be a layered arithmetic circuit over F with D layers, input x and
witness w such that |x| + |w| ≤ n and out = C(x; w). We construct the simulator S given the circuit C, the output out and input size n.
Let Svpd, Svpd,Ri and Svpd,δi be simulators of zkVPD for the witness and masking polynomials. Let Ssc be the simulator of the sumcheck
protocol on Equation 4, given by [70, Theorem 3].
• G(1λ): set pp as pp
• (S(pp, C, out, 1n),V∗
1) S invokes Svpd to generate com Svpd(1λ, pp) and sends com to V∗
2) S randomly selects polynomials Rsim,i : F2 → F and δsim,i : F2si+1+1 → F for i = 0, . . . , D−1 that have the same monomials as Ri
and δi in step 2 of Protocol 5. S invokes Svpd,Ri and Svpd,δi to generate comi,1 ← Svpd,Ri (1λ, ppRi ) and comi,2 ← Svpd,δi (1λ, ppδi )
and send them to V∗
, where ppRi and ppδi are corresponding public parameters. S also reveals Rsim,0 to V, as V0 is deﬁned by out
and is known to V∗
.
3) Wait V∗
4) For i = 0, . . . , D − 1:
(cid:2)
to evaluate ˙V0(u(0)) and ˙V0(v(0)) for randomly chosen u(0), v(0) ∈ Fs0.
zkVPD.KeyGen(1λ).
(C, pp)):
x,y∈{0,1}si+1 ,z∈{0,1} δsim,i(x, y, z) to V∗
at point u(i+1), v(i+1) ∈ Fsi+1 , gi ∈ F selected by V∗
at point u(i+1), v(i+1), gi and send them to V∗
a) S sends Hi =
b) Receive αi, βi, γi from V∗
c) S simulates the sumcheck protocol on Equation 4 using Ssc. At the end of the sumcheck, S receives queries of δsim,i and Rsim,i
. S randomly computes ˙Vi+1(u(i+1)), ˙Vi+1(v(i+1)) satisfying Equation 4
d) S computes Rsim,i(u(i), gi), Rsim,i(v(i), gi) and δsim,i(u(i+1), v(i+1), gi) and invokes Svpd,Ri and Svpd,δi to generate the proofs
e) Wait for V∗
f) Wait for V∗
to validate Rsim,i(u(i), gi), Rsim,i(v(i), gi) and δsim,i(u(i+1), v(i+1), gi).
to check the last claim of the sumcheck about f
(cid:3)
i using Rsim,i(u(i), gi), Rsim,i(v(i), gi), δsim,i(u(i+1), v(i+1), gi),
the values of ˙VD(u(D)) and ˙VD(v(D)), where u(D) ∈ Fn and v(D) ∈ Fn are
˙VD(u(D)) to Svpd and invokes S2 of Svpd in Figure 4 to simulate this process. Do the same process
5) In last part of the protocol, S needs to prove to V∗
˙Vi+1(u(i+1)) and ˙Vi+1(v(i+1)).
of these evaluations.
.
chosen by V∗
again for v(D),
. S gives u(D),
˙VD(v(D)).
.
.
6) Wait for V to run zkVPD.Verify to validate the value of ˙VD(u(D)) and ˙VD(v(D)).
Fig. 5: Simulator S of Virgo.
876
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply.