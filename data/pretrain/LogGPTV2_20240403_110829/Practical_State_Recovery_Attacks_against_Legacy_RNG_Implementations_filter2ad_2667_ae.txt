is not the default configuration for FortiOS. Our scans therefore
identified only those devices that were misconfigured. A correct
(and default) configuration prevents our scanning but does not
mitigate the vulnerability. The total population of vulnerable hosts
is therefore likely significantly higher than the population visible
to our scan. A well-equipped adversary could have constructed a
larger database of ETags. This technique can also be used for other
manufacturers, a number of whom also insert a model-firmware
identifier in header.
5.2 IKEv2
We used UDP scans on port 500 to initiate IKEv2 handshakes for
the full IPv4 space. However, the metadata available in IKEv2 con-
nections is more limited than for HTTPS.
HTTPS Admin Panel. Of the 23,554 HTTPS hosts in the previous
section against which state recovery from the TLS nonce on port
443 was successful, 152 responded to IKEv2 handshake requests
on port 500. Of these hosts, 135 always returned a single, identical,
static common nonce and key exchange for every connection. These
devices were located within the Chinanet AS and their SSL/TLS
certificates suggested a variety of Fortinet model numbers. From
the remaining 17 hosts whose nonces and key exchanges were
generated on new connections, our key recovery attack succeeded
against 7.
Cipher support. We sent handshake requests with cipher propos-
als that were supported in FortiOS v4, listed in Table 7 in Appen-
dix B. We received 7,743,876 responses.
Nonce size. FortiOS v4’s IKEv2 implementation uses 128-bit nonces.
From our successful IKEv2 handshakes above, 50,285 had 128-bit
nonces. We attempted state and key recovery from our handshakes
with all of these hosts, and were able to successfully recover the
Diffie-Hellman shared secret in the handshake we negotiated for
7 hosts using the key recovery attack we describe above. This in-
cluded 4 hosts that weren’t seen in the population of vulnerable
HTTPS hosts. We hypothesize that most of the publicly visible
IKEv2 responders with 128-bit nonces are not vulnerable Fortigate
products, and that most VPNs are configured as site-to-site tunnels
that would not be visible in our scans.
Limitations. The number of IKE responses we receive should be
treated as a lower bound, since many VPNs are configured as site-
to-site tunnels, or filter based on source IP and are invisible to scans
from unknown hosts.
6 RELATED WORK
Cryptanalysis of RNG designs. There is a long history of crypt-
analysis of practical pseudorandom number generator designs in
the literature. Kelsey, Schneier, Wagner, and Hall [41] enumerate
classes of attacks on PRNGs, and note several design flaws and
Figure 5: Brute force work for TLS state recovery. The av-
erage number of timestamp guesses required for each host
was 222.9 with a standard deviation of 223.1.
for 2,265 (97%) of these. 1,535 of these hosts presented non-default
HTTPS certificates. State recovery was successful for every device
matching the ETag for our hardware device.
RSA public keys. Fortigate devices were already known to gen-
erate RSA moduli that share common factors [32, 34]. We ran a
batch GCD computation against the HTTPS certificate RSA public
keys from fingerprinted Fortigate devices together with identi-
fied Fortigate public keys from historical scans obtained from the
authors of [32]. This gave us prime factors for 3,163 keys from
our scan. However, the X9.31 state recovery attack described in
Section 4.4.1, conducted with the certificate timestamps, was not
successful against the most significant bits of the prime factors.
None of the hosts with factored keys matched the HTTP or IKE fin-
gerprints, suggesting that certificates were generated by a software
Figure 6: Initial timestamp offset. The average offset be-
tween the timestamp encoded in the TLS server random (at
1s resolution) and the timestamp used to seed the first PRG
block for our successful state recovery trials (at µs resolu-
tion) was 510µs.
vulnerabilities against PRNG designs, including the key compro-
mise vulnerability in X9.17/X9.31 RNG that we consider in this
paper. Gutterman, Pinkas, and Reinman [30] analyzed the Linux
random number generator in 2006, and Dorrendorf, Gutterman,
and Pinkas [22] analyzed the Windows random number generator
in 2009. Dodis et al. [20] defined a notion of recovery from state
compromise for a PRNG, showed that the Linux random number
generator did not satisfy this definition, and showed that there
were inputs that would cause it to fail to recover from state compro-
mise and would mislead the entropy estimation function. Michaelis,
Meyer, and Schwenk [46] analyzed Java random number genera-
tion implementations and noted several vulnerabilities, including a
vulnerability in Android.
Green [29] notes the dangers of using X9.31. He additionally high-
lights the danger and usage of a global X9.31 key for the RNG in an
early draft of AACS, the digital rights management specification
for HD-DVD and Bluray distributions.
Random number generation failures. Multiple types of random
number generation failures have been observed in the wild.
One category of RNG failures appears to be due to failure to prop-
erly seed a random number generator before use, or seeding with
poor-quality inputs. Famously, between 2006 and 2008, the De-
bian OpenSSL random number generator incorporated almost no
entropy into its state. [58] In 2012, Heninger et al. discovered a boot-
time failure of the Linux random number generator to properly
incorporate entropy sources on embedded and headless systems;
this flaw resulted in them being able to compute RSA private keys
for 0.5% of TLS hosts and DSA private keys for 1.06% of SSH hosts
in 2012 [34]. Lenstra et al. [44] performed a similar study of public
keys collected from the internet in 2012, and were able to compute
RSA private keys for 0.3% of HTTPS hosts and a pair of PGP users.
In 2016, Hastings, Fried, and Heninger [33] performed a follow-up
study that found low to nonexistent software patching rates for
systems affected by the 2012 RNG flaws. Bernstein et al. [10] were
able to factor 184 keys from a sample of approximately 2 million
smartcard-generated RSA keys from the Taiwanese “Citizen Digital
Certificate" smartcard ID system. They hypothesized that the fail-
ures were due to a flawed hardware random number generator on
some smartcards combined with a failure to whiten raw hardware
RNG outputs. Kadianakis et al. [38] performed a similar analysis on
the 3.7 million RSA public keys of Tor relays, finding 10 relays with
shared RSA moduli and 3,557 relays with shared prime factors.
Other types of system failures can result in repeated states or out-
puts in RNG implementations. Ristenpart and Yilek [53] show that
virtual machine snapshots can result in cryptographic failure due
to implementation flaws in random number generators. A 2013
vulnerability in the Android SecureRandom resulted in a number
of Bitcoins stolen from Android-based wallets due to repeated DSA
signature nonces [42].
Intentional RNG backdoors. A further category of failures are
due to intentionally weakened designs. Young and Yung [59] in-
troduced the concept of kleptography, the design of cryptographic
schemes with hidden backdoors. They later described a scheme
for introducing such a backdoor into discrete log-based cryptosys-
tems [60].
In a 2013 article published on the Snowden leaks, the NY Times
and Pro Publica pointed to the NIST-standardized Dual EC DRBG
as a cryptographic standard that had been subverted by the NSA as
part of a general program to influence standardization processes,
although the original source document naming Dual EC has not
been published. In the wake of these accusations, NIST removed
support for the Dual EC DRBG algorithm from its standards. How-
ever, this was not the first time that the possibility of a backdoor in
the Dual EC DRBG had been raised. In 2006, Brown [13] noted that
the indistinguishability proof for the NIST-standardized Dual EC
DRBG relies on a random Q parameter. Shumow and Ferguson [55]
noted that the design of the Dual_EC DRBG admits a kleptographic
backdoor. By generating parameters such that there exists an inte-
ger d where dQ = P, the kleptographer can recover the state of the
DRBG by observing 32 consecutive bytes of output. Checkoway et
al. [16] analyze how an unknown attacker inserted code into Ju-
niper ScreenOS to exploit the presence of the backdoor in the Dual
EC DRBG that would allow passive decryption of IPsec connec-
tions. Dodis et al. [19] formally model backdoored random number
generators, design backdoored PRNGs with strong indistinguisha-
bility properties, and evaluate countermeasures against backdoors.
Degabriele et al. [18] build on this by giving efficient constructions
such PRNGs and bounding the duration of the compromise in terms
of the state-size of the PRNG.
7 DISCUSSION
NSA decryption capabilities. Classified NSA documents leaked
by Edward Snowden and published by Der Spiegel [61] suggest that
the NSA has passive decryption capabilities against some fraction
of IPsec, TLS, and SSH traffic. Proposed explanations for these ca-
pabilities include the NSA performing 768-bit and 1024-bit discrete
log precomputations for widely used Diffie-Hellman primes [6]
(Boudot [12] points out that a 768-bit discrete log precomputation
may have been feasible for the NSA as early as the year 2000), back-
doored random number generation standards such as the Dual EC
DRBG [15, 16], and software exploits and malware (“implants”).
We suspect the reality is a combination of these techniques cus-
tomized to vendors’ vulnerabilities. Our paper explores another
feasibly exploitable cryptographic vulnerability that may explain
some decryption capabilities.
While a compromised random number generator design would
seem like an appealing avenue to inject or discover vulnerabilities
in cryptographic implementations, the Dual EC DRBG just does
not seem to have been implemented widely enough to explain
decryption capabilities in more than a small handful of products.
(The exceptions we are aware of are the RSA BSAFE library, and
Juniper ScreenOS.) By contrast, the X9.17/X9.31 PRG has been
ubiquitous for decades.
Ease of exploitation. We note that our attacks in this paper against
the X9.31 PRG were significantly less computationally expensive to
carry out than many of the attacks against Dual EC in TLS measured
by Checkoway et al. [16]. This is because the most efficient attacks
against Dual EC require 32 bytes of raw PRG output, and the effort
required to exploit the backdoor grows exponentially as the amount
of raw PRG output available to the attacker decreases. In contrast,
because successive timestamps do not have very much entropy, an
efficient attack against the X9.31 PRG with AES for the block cipher
that uniquely recovers the state would be possible with 20 bytes or
even fewer of raw output. Checkoway et al. [16] note that when
Juniper replaced the X9.31 PRG with Dual EC in their ScreenOS
implementation, they increased the length of the nonces used in the
IKE handshake from 20 bytes to 32 bytes, thus permitting efficient
passive exploitation of the Dual EC backdoor. Efficient Dual EC
exploitation would not have been possible without this increase.
NOBUS and symmetric backdoors. As we note in the introduc-
tion, the vulnerability we exploit in the X9.17/X9.31 PRG is by
definition not a “NOBUS” backdoor because it is symmetric, and
is thus both detectable and exploitable by any party who can gain
access to a static key used by some device for the PRG through
reverse-engineering or physical access. This is in contrast to the
case of the Dual EC PRG, where only the party who generated
the elliptic curve points used as parameters for the PRG knows
whether they contain a backdoor. However, an implementation of
the X9.17/X9.31 PRG that uses a vulnerable static key could still
increase the cost of exploitation to a chosen level of difficulty by
increasing the granularity of the timestamps. The Fortinet systems
we analyzed used gettimeofday which typically has at most µs
resolution. An implementation using RDTSC to obtain nanosecond
granularity instead, would likely have put the attack outside easy
reach of modest attackers.
Failure of the standardization process. The failure of the NIST
and FIPS standardization process to protect against a long-known
vulnerability in an approved random number generator is surpris-
ing. The observation that the seed key must remain secret in the
X9.17/X9.31 design was first noted almost two decades ago, and yet
none of the descriptions of the algorithm we could find mentioned
the importance of generating an unpredictable key. The security
policies documenting a known vulnerability should have been de-
tected by the testing labs; the fact that they were not illustrates
systemic issues with lab-based validation. NIST mentioned con-
flict of interest issues (the testing labs are paid by the vendors),
lab personnel skill, and workload in personal communication to
us. To address these issues, NIST is transitioning to an automated
validation program [49].
Eliminating obsolete cryptography. John Kelsey, one of the au-
thors of [41], told us in personal communication that removing
X9.17 key generation and FIPS 186’s RNGs from the standards that
ultimately became NIST SP 800-90A was one of the first things he
did when joining NIST, and that he was surprised to learn in 2016
that implementations using both remained in the field.
Removing obsolete cryptographic algorithms from standards and
implementations is difficult in practice. The MD5 and SHA1 hash
functions, RC4 stream cipher, and RSA PKCS#1v1.5 encryption
padding remained in use for decades after they were known to be
cryptographically flawed. For vendors, removing algorithms breaks
backwards compatibility and many devices have long lifespans.
Kelsey pointed to the difficulty of eliminating obsolete cryptography
as a contributing factor to the vulnerability; we hypothesize that
once the X9.31 PRG was en route to deprecation, there was little
incentive for NIST to update the standard, but vendors continued to
implement the algorithm as standardized for many years because
of the long, slow deprecation process. Standards such as FIPS may
also increase the cost of updating cryptography by necessitating
expensive new product certification.
Concerns about other PRG designs. In positive news, the re-
maining approved PRG designs in NIST SP 800-90A appear to be
based on sounder footing, both in practice and in theory. However,
this analysis assumes that implementations are sound. Cipher-based
PRGs appear specifically vulnerable to state recovery attacks when
the cipher key is obtained by an attacker. This raises the possibil-
ity that a careless or malicious implementation of a modern PRG
such as NIST’s CTR_DRBG [8] could be implemented in such a
way that the key is not routinely updated, which might allow state
recovery attacks. These attacks are problematic, as an observer
without knowledge of the key would see output that is statistically
indistinguishable from a correct implementation [36]. Moreover,
such vulnerabilities might not be visible in test modes due to im-
plementation differences [45].
ACKNOWLEDGEMENTS
We thank David McGrew and Dario Ciccarone for helpful discus-
sions and research into Cisco’s product lines, and Steve Checkoway
for reverse-engineering the Juniper ScreenOS implementation of
the X9.31 PRG. This work was supported by the National Science
Foundation under grants CNS-1651344, CNS-1505799, CNS-1408734,
CNS-1010928, CNS-1228443, CNS-1653110 and EFMA-1441209; the
Mozilla Foundation; and a gift from Cisco. We are grateful to Cisco
for donating the Cisco UCS servers we used for the computational
experiments.
REFERENCES
[1] [n. d.]. Cryptographic Algorithm Validation Program - RNG Validation
List. https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/
validation/validation-list/rng.
[2] [n. d.]. FIPS 140-2 SECURITY POLICY FOR: INZERO GATEWAY. www.kmip.
me/www3.cryptsoft.com/fips140/unpdf/140sp1841-1.html.
[3] IDC Corporation. [n. d.]. Worldwide Security Appliance Market Off to a Healthy
Start in 2016, Continuing Its Streak of Eleven Consecutive Quarters of Growth,
According to IDC. https://www.idc.com/getdoc.jsp?containerId=prUS41490016
https://cve.mitre.org/cgi-bin/
[4] MITRE Corporation. [n. d.]. CVE-2016-1909.
[5] MITRE Corporation. [n. d.]. CVE-2016-8492.
https://cve.mitre.org/cgi-bin/
cvename.cgi?name=CVE-2016-1909
cvename.cgi?name=CVE-2016-8492
[6] David Adrian, Karthikeyan Bhargavan, Zakir Durumeric, Pierrick Gaudry,
Matthew Green, J. Alex Halderman, Nadia Heninger, Drew Springall, Emmanuel
Thomé, Luke Valenta, Benjamin VanderSloot, Eric Wustrow, Santiago Zanella-
Béguelin, and Paul Zimmermann. 2015. Imperfect Forward Secrecy: How Diffie-