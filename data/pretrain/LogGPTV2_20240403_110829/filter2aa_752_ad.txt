值退出程序。函数调用不会返回。*/ 
void print_usage (FILE* stream, int exit_code) 
{ 
fprintf (stream, “Usage: %s options [ inputfile ... ]\n”, program_name); 
fprintf (stream, 
“   -h --help Display this usage information.\n” 
“   -o --output filename Write output to file.\n” 
“   -v --verbose Print verbose messages.\n”); 
exit (exit_code); 
} 
/* 程序主入口点。ARGC 包含了参数列表中元素的数量；ARGV 是指向这些参数的指针数组。*/ 
int main (int argc, char* argv[]) 
{ 
int next_option; 
/* 包含所有有效短选项字母的字符串。*/ 
const char* const short_options = “ho:v”; 
/* 描述了长选项的 struct option 数组。*/ 
const struct option long_options[] = { 
{ “help”, 0, NULL, ‘h’ }, 
{ “output”, 1, NULL, ‘o’ }, 
{ “verbose”, 0, NULL, ‘v’ }, 
{ NULL, 0, NULL, 0 } /* 数组末要求这样一个元素。*/ 
}; 
/* 用于接受程序输出的文件名，如果为 NULL 则表示标准输出。*/ 
const char* output_filename = NULL; 
/* 是否显示冗余信息？*/ 
int verbose = 0; 
www.AdvancedLinuxProgramming.com 
18
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
/* 记住程序的名字，可以用于输出的信息。名称保存在 argv[0]中。*/ 
program_name = argv[0]; 
do { 
next_option = getopt_long (argc, argv, short_options, 
long_options, NULL); 
switch (next_option) 
{ 
case ‘h’: /* -h 或 --help */ 
/* 用户要求查看使用帮助。输出到标准输出，退出程序并返回 0（正常结束）。*/ 
print_usage (stdout, 0); 
case ‘o’: /* -o 或 --output */ 
/* 此函数接受一个参数，表示输出文件名。*/ 
output_filename = optarg; 
break; 
case ‘v’: /* -v 或 --verbose */ 
verbose = 1; 
break; 
case ‘?’: /* The user specified an invalid option. */ 
/* 向标准错误输出帮助信息，结束程序并返回 1（表示非正常退出）。*/ 
print_usage (stderr, 1); 
case -1: /* 结束处理选项的过程。*/ 
break; 
default: /* 别的什么：非预料中的。*/ 
abort (); 
} 
} 
while (next_option != -1); 
/* 选项处理完毕。OPTIND 指向第一个非选项参数。 
    出于演示目的，如果指定了冗余输出选项，则输出这些参数。*/ 
if (verbose) { 
int i; 
for (i = optind; i  output_file.txt 2>&1 
% program 2>&1 | filter 
这里，2>&1 的语法表示文件描述符 2（stderr）应并入文件描述符 1（stdout）。注意，
2>&1 这个语法必须出现在文件重定向之前（如第一个例子所示）或者管道重定向之前（如
第二个例子所示）。 
需要注意的是，stdout 是经过缓冲处理的。写入 stdout 的数据不会立刻被写入终端（或
其它设备，如果程序输出被重定向）除非缓冲区满、程序正常退出或 stdout 被关闭。你可
以这样显式地刷新输出流： 
fflush (stdout); 
与stdout不同的是，stderr没有经过缓冲处理；输出到stderr的数据会直接被发送到终端。
1
这可能导致令人惊奇的结果。例如下面这个程序，运行时并不会每一秒钟输出一个句点，
而是会在缓冲被填满的时候一起输出一堆。 
while (1) { 
printf (“.”); 
sleep (1); 
} 
在这个循环中句点则会每秒钟输出一个。 
while (1) { 
fprintf (stderr, “.”); 
sleep (1); 
} 
www.AdvancedLinuxProgramming.com 
20
1 在C++中，cout和cerr之间也有这样的区别。注意endl操作符除了输出换行符，还会执行刷新操作；
如果你不希望执行刷新操作（例如出于运行效率的考虑）则应该使用常量’\n’表示换行。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
2.1.5 程序退出代码 
当一个程序结束的时候，它会通过一个退出代码表示自己的运行结果。退出代码是一个
小整数值。一般的习惯是，返回 0 表示正常，而非 0 表示错误的出现。一些程序通过不同的
非 0 值表示不同的错误情况。 
在许多 shell 中，可以通过特殊环境变量$?得到最近执行的一个程序的退出代码。下面
这个例子中，ls 命令被执行了两次，每次执行完毕之后我们都输出了命令的退出代码。第一
次调用中，ls 成功执行且返回 0。第二此运行的时候 ls 在运行中出现了错误（因为在命令行
中指定的文件不存在），并因此返回了非 0 值作为退出代码。 
% ls / 
bin   coda  etc    lib           misc  nfs   proc  sbin  usr 
boot  dev   home   lost+found   mnt   opt   root  tmp   var 
% echo $? 
0 
$ ls bogusfile 
ls: bogusfile: No such file or directory 
% echo $? 
1 
C 或 C++程序通过从 main 函数返回来指定程序的退出代码。还可以通过其它的方法指
定程序的退出代码，且特殊的退出代码被分配用于标识特殊的程序退出原因（被信号终止等）
我们将在第三章中对这些情况进行深入的讨论。 
2.1.6 环境 
GNU/Linux 为每个运行程序提供了一个环境（environment）。环境是一组“键－值”对
的集合。环境变量名和它们的值都是字符串。环境变量名通常由大写字母组成。 
你可能已经对一些常见的环境变量有所熟悉。例如： 
· USER 包含了你的用户名。 
· HOME 包含了你的个人目录（home directory）的位置。 
· PATH 包含了一些文件夹路径，之间由冒号进行分隔。Linux 系统在这些文件夹中
搜索可执行程序。 
· DISPLAY 包含了 X 窗口服务器的名称和显示器编号。这里指定的 X 服务器和显示
器编号将是基于 X 的图形程序运行时将会出现的地方。 
Shell 和其它所有程序一样，都有一个环境。Shell 提供了直接查看和修改环境的方法。
可以使用 printenv 程序输出完整的当前环境。不同的 shell 程序通过不同的内建语法使用环
境变量的值；以下示例使用的是 Bourne 式的 shell。 
· Shell 会自动为每个检测到的环境变量设置一个 Shell 变量，因此你可以通过$变量
名的语法访问环境变量。例如： 
%echo $USR 
samuel 
% echo $HOME 
/home/samuel 
· 可以通过 export 命令将一个 shell 变量加入环境中。例如，可以这样设置环境变
www.AdvancedLinuxProgramming.com 
21
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
量 EDITOR 的值： 
% EDITOR=emacs 
% export EDITOR 
或 
% export EDITOR=emacs 
程序中可以使用中提供的 getenv 函数访问环境变量。这个函数接受一个包含
变量名的字符串作为参数，并返回包含了相应的环境变量值的字符串。如果参数中指定的环
境变量不存在，getenv 将返回 NULL。而 setenv 和 unsetenv 函数则分别可用于设置和清除
环境变量。 
列举所有环境变量需要一点技巧。你需要通过访问一个叫做 environ 的全局变量来列举
所有环境变量。这个变量是由 GNU C 库定义的。它是一个 char **类型的变量，包含了一个
以 NULL 指针结束的字符串数组。每个字符串都包含了一个环境变量。这个环境变量被表
示为“变量=值”的形式。 
请看下面的例子。列表 2.3 中的程序通过一个循环遍历整个 environ 数组并输出所有环
境变量。 
代码列表 2.3 （print-env.c）输出运行环境 
#include  
/* ENVIRON 变量包含了整个环境。*/ 
extern char** environ; 
int main () 
{ 
  char** var; 
  for (var = environ; *var != NULL; ++var) 
    printf (“%s\n”, *var); 
  return 0; 
} 
不要直接修改 environ 变量；如果需要修改环境变量，则应通过 setenv 和 unsetenv 函
数完成。 
通常，当启动一个新程序的时候，这个程序会从调用者那里继承一份运行环境（在交互
运行的情况下，通常调用者是 shell 程序）。因此，你从 shell 中运行的程序可以使用你通过
shell 设置的环境变量。 
环境变量常被用于向程序提供配置信息。假设你正在写一个程序，它需要连接到一台
Internet 服务器并获取一些信息。程序可以利用命令行参数获取服务器地址。但是，如果用
户不会需要经常改变服务器地址，那么你可以选择将服务器地址存储在一个特殊的环境变量
中（譬如 SERVER_NAME）。如果这个环境变量不存在则使用一个默认值。这个程序的部