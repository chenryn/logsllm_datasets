• The best possible performance beneﬁt of ICN-NR over EDGE
(across all metrics) by setting the above parameters to be favor-
able to ICN-NR is only 17%.
NR over EDGE are Zipf α and spatial skew.
Figure 10: Bridging the performance gap between the best scenario
for ICN-NR and EDGE via simple extensions to EDGE. We also
show the baseline from Section 4 and a hypothetical inﬁnite cache
setting.
• Simple extensions to EDGE such as putting all the cache at the
edge and enabling local scoped cooperation can reduce even
this best case performance gap to 6%.
• Doubling the edge cache sizes can in fact make EDGE better
than ICN-NR.
Implications:
In summary, these observations imply that we can
match the best-case quantitative performance of ICN, and avoid
most of the deployment headaches, merely by increasing the size
of the edge caches or enabling simple cooperative strategies.
6.
INCREMENTALLY DEPLOYABLE ICN
Our quantitative results showed that most of the beneﬁts of
caching can be achieved through edge caching. In this section, we
show that the qualitative advantages of ICN (i.e., security, mobility,
and ad hoc mode) are also achievable in an end-to-end fashion (see
Table 1). Here, we outline one possible design of an incrementally
deployable ICN or idICN, where caching as well as the qualita-
tive aspects of ICN are implemented at the edge of the network.
Note that our goal here is not to reinvent CDNs. Rather, we want
a design that is architecturally simpler than today’s CDNs and yet
more incrementally deployable than clean-slate ICN designs. To
this end, we deliberately choose a path that requires only moderate
re-engineering and uses tools that are already available.
-5 0 5 10 15 20 0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6Performance gain of ICN-NRover EDGE (%)Zipf αDelayCongestionOrigin Server Load-5 0 5 10 15 20 1e-05 0.0001 0.001 0.01 0.1 1 10 100Performance gain of ICN-NRover EDGE (%)Individual cache sizes as percentage of total objectsDelayCongestionOrigin Server Load 0 5 10 15 20 0 0.2 0.4 0.6 0.8 1Performance gain of ICN-NRover EDGE (%)Spatial skewDelayCongestionOrigin Server Load 0 5 10 15 20 25BaselineAlpha*Skew*Budget-Dist.*Node-Budget*Performance gain of ICN-NRover EDGE (%) LatencyCongestionOrigin-Load-5 0 5 10 15 20Baseline2-LevelsCoop2-Levels-CoopNormNorm-CoopDouble-Budget-CoopSection-4Inf-BudgetPerformance gain of best scenario forICN-NR over variations of EDGE (%) LatencyCongestionOrigin-Load154Our goal in designing idICN is to place the most crucial aspects
of ICN functionality within reach of practical deployments. To-
wards this end, we build upon HTTP, as it already provides a fetch-
by-name primitive (as opposed to IPs fetch-by-hostname). HTTP,
however, comes with a host-centric naming (DNS) and security
model (HTTPS), and requires explicit conﬁguration of proxies. We
remedy the former by using a self-certifying approach to naming,
and the latter by using an existing protocol (WPAD) as a mech-
anism to automatically conﬁgure end-hosts to use a nearby edge
proxy. Furthermore, we also show how ad hoc data sharing and
mobility can be practically achieved in idICN.
We show that the qualitative properties from Table 1 can be
achieved via purely end-to-end mechanisms and building on com-
modity technologies that already exist in the content distribu-
tion/HTTP world. We do not claim that idICN is the only feasible
design, or an optimal one, and we intentionally leave open choices
regarding speciﬁc algorithms or implementations to the end appli-
cations and administrative domains (ADs).
Figure 11 shows a high-level view of the idICN operation. First,
clients automatically discover the location of the HTTP proxy con-
ﬁguration ﬁle as we will see in Section 6.2 (step 1). With the client
conﬁgured to use the proxy, the client’s HTTP requests are explic-
itly directed through the proxy cache (without even requiring the
client to perform a name lookup or a per-request connection setup)
(step 2). The cache responds immediately if it has a fresh copy of
the requested object (step 7); otherwise, it queries the name resolu-
tion system (step 3). Using the information from the resolvers, the
proxy sends a request towards the origin server (or replicas) (step
4). If the reverse proxy (deployed by the content provider) does not
already have a fresh copy of the object, it routes the request to the
origin server and receives the content (step 5). The reverse proxy
adds relevant metadata (e.g., to provide content-oriented security)
to the HTTP response and sends it to the proxy (step 6). The proxy
authenticates the content using enclosed digital signatures (see Sec-
tion 6.1) and serves the content to the client (step 7).
To advertise new content, origin servers publish the names of
newly generated contents through the reverse proxy (step P1),
which, in turn, registers the names with the idICN name resolu-
tion system (step P2) as well as DNS (for backward compatibility).
Reverse proxies also generate signatures and a list of policies and
mirrors, cache them, and include them in the HTTP header of their
responses. Finally, thanks to the properties of the idICN names (as
we will discuss shortly), presenting content along with its signature
is sufﬁcient to update the idICN name resolution system. We en-
vision a system similar to SFR [51] to implement name resolution
and registration in idICN—the speciﬁc realization is orthogonal to
our goal of achieving the beneﬁts of ICN.
Even though the full beneﬁts of idICN are only available to con-
tent providers and to clients located in ADs that fully adopt idICN,
there are three key advantages regarding its deployment: (1) idICN
leaves the current infrastructure intact, operating in parallel during
the transition to idICN, (2) clients in ADs that support idICN can
still retrieve content from providers that do not support idICN, and
(3) clients in ADs that do not support idICN can retrieve content
from providers that do support idICN.
6.1 Content-Oriented Security
Most
some form of
ICN designs adopt
self-certifying
names [17], where names embed the relevant cryptographic in-
formation such as public keys or their cryptographic hashes. By
signing the content, the principal responsible for the content (i.e.,
the owner of the relevant public key) can prove that the content is
associated with the name. Thus, this model of security is com-
Figure 11: A high-level view of the idICN operation. The sequence
of steps per request depends on whether the proxy has the requested
content. If it does, only steps 1, 2, and 7 are performed; otherwise,
steps 1 through 7 are taken. In the latter case, if the reverse proxy
has the content, step 5 is skipped. In parallel, the origin server
publishes newly generated contents (steps P1 and P2).
pletely data-oriented; the client can verify its provenance (e.g.,
[17, 30, 42, 51]) irrespective of who provided the data (e.g., CDN,
local cache, or a stranger on the bus). This is in contrast to the cur-
rent security model that tries to secure the data path or end hosts,
and to retrieve the content from a trusted party.
The ICN approach decouples delivery from security and sepa-
rates trust management and veriﬁcation. It is solely up to clients
to decide which data sources they are going to trust (and how they
such make trust determinations). We believe that this change in
security models is important and long overdue, having been ﬁrst
proposed almost a decade ago [30, 51].
Content-oriented security can be provided via:
(1) extending
HTTP to negotiate and serve required metadata (keys, signa-
tures, etc.), and (2) standardizing a self-certifying naming scheme.
The Metalink HTTP extension [8], S-HTTP [36] (competing with
HTTPS at the time), and HTTPi [40] (an improvement over S-
HTTP to support today’s common use cases) show how to possibly
extend HTTP for this purpose. Moreover, the widespread use of
self-certifying names in peer-to-peer networks (e.g., the use of con-
tent hashes as names in the Magnet URI scheme [31]) shows that
self-certifying names, albeit for static content, are commonplace.
idICN adopts a DONA-style self-certifying ﬂat naming scheme and
the Metalink description format (see [28]). We discuss both next.
Self-certifying names: Our naming scheme must be backwards
compatible with DNS, yet offer the ICN security model. Follow-
ing the lead of numerous existing proposals [44,50,51], we achieve
this using an idICN proxy name resolver under idicn.org with
names of the form name.idicn.org where name is a self-
certifying name. We use names of the form name=L.P where
P is a cryptographic hash of the publisher’s public key and L is a
content label assigned to the content by P.6
Client browsers issue content requests as they do today: by re-
questing an “address”, which in this case is a URI encoded as
L.P.idicn.org. For content to be reachable via DNS, it must
be registered in the new .idicn.org domain. We rely upon a
consortium of entities to host idICN resolvers (e.g., Google, Ya-
hoo!, Microsoft, Akamai, and Verisign). Because the total traf-
ﬁc these resolvers would see is far below what these companies
handle for their normal web services today, we think this is a rea-
6Backward compatibility with DNS does come at a price. Labels
in a domain name are restricted to 63 characters; we cannot support
hashing algorithms with digests > 63 characters (e.g., SHA-512).
Name Resolution System Proxy Reverse Proxy 1. Automatic configuration 2. Content request by name Origin Server 3. Name resolution P1. Publish  New content P2. Register new names 7. Response  4. Content request by address 6 Response along with metadata 5. Routing the request and receiving the response 155sonable assumption. These resolvers need only check for crypto-
graphic correctness (rather than rely on any other form of trust); the
.idicn.org namespace will provide a public API allowing any-
one who can sign with P’s private key (or produce an authorizing
signature from P) to register names of the form L.P.idicn.org.
To resolve a request for a particular name, the name resolution sys-
tem ﬁrst looks for exact matches on L.P and, failing that, looks for
a match for P. Moreover, the entries can point to other resolvers that
can provide more ﬁne-grained resolution (e.g., the basic resolver
might only have an entry for P, which then points to a resolver that
has entries for individual L.P names).
Metadata using metalink/HTTP:
In practice, we also need to
provide relevant metadata along with the content; e.g., locations of
replicas or working copies, cryptographic hashes, and digital sig-
natures. To this end, we leverage the Metalink standard [8], which
is an XML-based download description format that provides the
metadata of the named content.7 Metalink-enabled HTTP clients
and proxies understand the relevant HTTP headers (e.g., to verify
the authenticity and integrity of the data, discover faster mirrors,
etc.), while legacy clients simply ignore them.
Together, our naming scheme and metadata embedding enable
the new data-oriented security model. We note that the client or the
proxy should authenticate the content; the latter would put trust on
proxies, while the former would require software changes, requir-
ing incremental deployment.
6.2 Automatic Proxy Conﬁguration
Since idICN is based on HTTP and uses its support for proxies,
now we describe how hosts can automatically discover and connect
to a nearby HTTP proxy without requiring any manual setup. Be-
cause content delivery primitives are baked into the basic ICN ar-
chitecture, there is no need for transparent caching or other “hacks”
that make the network brittle. Moreover, when used in the “broad-
cast” mode, ICN designs can be realized in ad hoc environments
without any explicit management. Fortunately, there are widely
available techniques to address both concerns. idICN provides au-
tomatic proxy conﬁguration via built-in support in browsers and
the OS [14, 33] and relies on Zero Conﬁguration Networking (Ze-
roconf) [53], which enables content sharing in a network with no
infrastructure for address assignment and name resolution.
Client proxy conﬁguration:
Hosts in idICN use the Web
Proxy Autodiscovery Protocol (WPAD) [14] to locate a URL
of a Proxy Auto-Conﬁg (PAC) ﬁle [33]. To support WPAD,
networks need to conﬁgure their DHCP or DNS servers to
announce the PAC ﬁle location. Once the PAC ﬁle is lo-
cated and fetched, the browser invokes the JavaScript function
FindProxyForURL(url, host) contained in the ﬁle to de-
termine the proxy to use for a given URL. WPAD and PAC are
widely supported by all major operating systems and browsers [4]
and are extensively used in enterprise networks.
Content sharing in ad hoc mode: For completeness, we also
discuss content sharing without any infrastructure for network con-
ﬁguration and name resolution. We do note that the techniques
required to enable ad hoc operation of idICN are optional and or-
thogonal to the rest of our design.
To support the ad hoc mode, idICN relies on two aspects of Zero-
conf: (1) IP address assignment without obtaining outside informa-
tion (e.g., from a DHCP server) [10, 45], and (2) distributed name
publishing and resolution over multicast using the familiar DNS
interface in the absence of a centralized DNS server (mDNS) [11].
7E.g., see http://releases.ubuntu.com/releases/
12.10/ubuntu-12.10-desktop-amd64.metalink.
Support for IP link-local conﬁguration and mDNS is readily built
in Linux distributions through Avahi8, in OS X and in iOS through
Bonjour9; and several open-source cross-platform implementations
are also available. We note that support for Zeroconf does not re-
quire any changes to the networking devices (e.g., wireless routers)
as long as they are not ﬁltering local multicast trafﬁc.
To show the feasibility of sharing cached content in a network
with limited local connectivity, we prototyped a simple HTTP
proxy (350 lines of Python code) to expose Chrome browser’s
cache over the network when the IP address is link-local. Con-
sumers do not need to do anything to access available content as
long as they have a Zeroconf stack and use mDNS as a fallback
name resolution mechanism. Only users who wish to share their
browser cache need to deploy our prototype. The proxy publishes
an alias for the machine for each domain name with content in the
cache, and serves content out of the Chrome cache if requested.
As an example, consider a case where Alice and Bob are con-
nected to the same network, and Alice has a cached copy of CNN
headlines while Bob is looking for it. Upon acquiring a link-local
IP address, Alice’s ad hoc proxy publishes domain name cnn.com
over mDNS. Bob enters cnn.com to fetch the CNN headlines and
his browser initiates a DNS lookup for cnn.com. Without a con-
ﬁgured DNS server to contact, Bob’s name switching service sends
an mDNS query for cnn.com, which resolves to Alice’s machine
address. Bob’s browser now initiates an HTTP connection to Al-
ice’s ad hoc proxy to request cnn.com (via an HTTP GET) that
the proxy serves out of Alice’s browser cache. A limitation of this
scheme, due to its reliance on DNS, is that if different machines
have content for the same domain, only one of them will be able
to publish it. Deployment of the ﬂat names (L.P.idicn.org),
however, addresses this issue.10
6.3 Mobility Support
To support mobility over HTTP, idICN requires applications to,
ﬁrst, incorporate session management (e.g., via HTTP cookies for
stateful, or byte ranges for stateless, communications) and, second,
update their location using dynamic DNS. With session manage-
ment, applications can seamlessly work upon reconnection. This
form of session management is quite common over HTTP (e.g.,
sessions spanning several days) and may even be a good substrate
for DTN applications. With dynamic DNS updates, mobile servers
must announce their locations. Upon loss of connectivity (e.g., be-
cause of moving the client, the server, or both), the application at-
tempts to re-establish the communication. If the server has moved,
the client’s name lookup resolves to the server’s new IP address.
6.4 Summary
We have outlined a dirty-slate, incrementally deployable design
called idICN, which uses edge caching to gain most of the caching
beneﬁts of ICN, and end-to-end mechanisms to get the key qualita-
tive properties of ICN. The design mainly utilizes previously stan-
dardized and widely used techniques from the past decade, requir-
ing small changes to hosts or their protocols. We believe this is a
key strength of idICN, as it signiﬁcantly enhances its deployability.
idICN does, however, involve three changes to the Internet: (1)
infrastructure deployment by ADs, which we expect to be a small
barrier given the eagerness of ISPs to enter the CDN arena; (2)
caching behavior, which can be realized on an AD-by-AD basis and
need not be subject to global standards; and (3) actions by content
providers to publish content within idICN, but allowing providers
8http://www.avahi.org/
9http://www.apple.com/support/bonjour/
10Here, documents would be published over mDNS.