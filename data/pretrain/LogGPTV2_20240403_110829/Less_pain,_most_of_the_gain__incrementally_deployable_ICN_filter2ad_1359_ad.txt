### Performance Comparison of ICN-NR and EDGE

- **Performance Gap**: The maximum performance benefit of ICN-NR over EDGE, across all metrics, is only 17% when parameters are set to favor ICN-NR. The key parameters influencing this gap are Zipf α and spatial skew.
- **Bridging the Gap**: Simple extensions to EDGE, such as placing all cache at the edge and enabling local scoped cooperation, can reduce this best-case performance gap to 6%. Doubling the edge cache sizes can even make EDGE outperform ICN-NR.

**Implications**:
- These observations suggest that by increasing the size of edge caches or implementing simple cooperative strategies, we can match the best-case quantitative performance of ICN while avoiding most deployment challenges.

### Incrementally Deployable ICN (idICN)

#### Key Findings
- Our quantitative results indicate that most of the benefits of caching can be achieved through edge caching. In this section, we demonstrate that the qualitative advantages of ICN (security, mobility, and ad hoc mode) can also be realized in an end-to-end fashion (see Table 1).
- We propose a design for incrementally deployable ICN (idICN), where caching and other qualitative aspects of ICN are implemented at the network edge. This design aims to be architecturally simpler than current CDNs and more incrementally deployable than clean-slate ICN designs.

#### Design Goals
- **Practical Deployment**: idICN is designed to place the most crucial aspects of ICN functionality within reach of practical deployments. It builds upon HTTP, which already provides a fetch-by-name primitive.
- **Security Model**: HTTP uses a host-centric naming (DNS) and security model (HTTPS). We address this by using a self-certifying approach to naming and leveraging WPAD for automatic proxy configuration.
- **Ad Hoc Data Sharing and Mobility**: idICN supports ad hoc data sharing and mobility, making it suitable for various deployment scenarios.

#### High-Level Operation (Figure 11)
1. **Automatic Configuration**: Clients automatically discover the location of the HTTP proxy configuration file.
2. **Content Request**: Configured clients direct their HTTP requests through the proxy cache.
3. **Cache Response**: If the cache has a fresh copy, it responds immediately. Otherwise, it queries the name resolution system.
4. **Request Forwarding**: The proxy sends a request to the origin server or replicas.
5. **Content Retrieval**: If the reverse proxy does not have a fresh copy, it routes the request to the origin server.
6. **Metadata Addition**: The reverse proxy adds relevant metadata (e.g., digital signatures) to the HTTP response and sends it to the proxy.
7. **Content Delivery**: The proxy authenticates the content and serves it to the client.

#### Content-Oriented Security
- **Self-Certifying Names**: idICN adopts a DONA-style self-certifying flat naming scheme, ensuring backward compatibility with DNS. Names are of the form `name=L.P`, where `P` is a cryptographic hash of the publisher’s public key and `L` is a content label.
- **Metadata Embedding**: Metalink/HTTP is used to provide relevant metadata, such as locations of replicas, cryptographic hashes, and digital signatures. This enables a data-oriented security model where clients can verify the provenance of the content.

#### Automatic Proxy Configuration
- **WPAD and PAC**: idICN uses the Web Proxy Autodiscovery Protocol (WPAD) and Proxy Auto-Configuration (PAC) files to enable hosts to automatically discover and connect to a nearby HTTP proxy.
- **Zeroconf Support**: For ad hoc mode, idICN relies on Zero Configuration Networking (Zeroconf) for IP address assignment and distributed name publishing and resolution over multicast (mDNS).

#### Mobility Support
- **Session Management**: Applications must incorporate session management (e.g., via HTTP cookies or byte ranges) to support seamless reconnection.
- **Dynamic DNS Updates**: Mobile servers use dynamic DNS to announce their locations, allowing clients to resolve to the new IP address upon reconnection.

#### Summary
- **Dirty-Slate Design**: idICN is a dirty-slate, incrementally deployable design that leverages edge caching and end-to-end mechanisms to achieve the key qualitative properties of ICN.
- **Utilization of Existing Technologies**: The design primarily uses previously standardized and widely adopted techniques, requiring minimal changes to hosts or protocols.
- **Deployment Changes**:
  1. **Infrastructure Deployment**: ADs need to deploy infrastructure, but this is expected to be a small barrier given ISPs' interest in entering the CDN market.
  2. **Caching Behavior**: Caching behavior can be implemented on an AD-by-AD basis without the need for global standards.
  3. **Content Publishing**: Content providers need to publish content within idICN, but they retain control over their actions.

This design significantly enhances the deployability of ICN, making it a practical and incremental solution for modern networks.