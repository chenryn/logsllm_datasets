Loopback
15
LAN WAN
755
63
Table 2: Time of the Oblivious Comparison Protocol
Finally, correctness and security proof of the overall protocol when
OOPE is instantiated with mOPE3 is similar to the case of mOPE2.
Due to space constraint, we deal with OPE based on an efficiently
searchable encrypted data structure [27] in Appendix D.
8 IMPLEMENTATION
We have implemented our scheme using SCAPI (Secure Compu-
tation API)[17]. SCAPI is an open-source Java library for imple-
menting secure two-party and multiparty computation protocols.
It provides a reliable, efficient, and highly flexible cryptographic
infrastructure. It also provides many optimizations of GC such as
OT extensions, free-XOR, garbled row reduction [17]. Furthermore,
there is a built-in communication layer that provides communica-
tion services for any interactive cryptographic protocol.
8.1 Parameters
For Ahe, we implemented Paillier Encryption [36]. The first para-
meter is the security parameter (i.e. bit length of the public key) of
Paillier’s scheme (e.g., 2048 or 4096). The other parameters of the
OOPE protocol are the length of the inputs (e.g., 32, 64, 128, 256
bits integer), the length of the order log2 M - with M the maximal
order - (e.g., 32, 64, 128 bits), and the size of the OPE tree (e.g., 103,
104, 105, 106 entries).
8.2 Paillier Encryption
Paillier’s scheme requires to choose two large prime numbers P and
N 2 such that
2, then N divides e.
2. To decrypt a ciphertext
and
Q of equal length and to compute a modulus N= PQ and the private
key λ= lcm(P− 1, Q− 1). Then select a random д∈ Z∗
if e is the smallest integer with дe = 1 mod N
The public key is(д, N). To encrypt a plaintext m select a random
r∈ Z∗
N and compute c← дmr N mod N
c compute m← L(cλ mod N
2)⋅ µ mod N , where L(u)= u−1
2))−1 mod N .
µ=(L(дλ mod N
We implemented our scheme with д= 1+ N . This transforms
2= 1+ mN mod N
(1+ N)m mod N
2 to a multiplication, since
2. Moreover, we precomputed
µ, used Chinese remaindering for decryption and pre-generated
randomness for encryption and homomorphic plaintext random-
ization (Protocol of Figure 6). As a result, encryption, decryption
and homomorphic addition take 52µs, 12ms and 67µs when the key
length is 2048 bits.
the modular exponentiation дm mod N
N
8.3 Evaluation
Recall that the execution of the range query itself does not depend
on OOPE. To evaluate the performance of our scheme we, therefore,
focus on answering the following questions:
● What time does the OOPE take to encode a DA’s input?
● How does the network communication influence the pro-
tocol?
Figure 14: Encryption time: WAN’s time is divided by 10.
● What is the average generation time and the storage cost of
the OPE-tree?
The overall time for executing a DA’s range query consists of the
time to encode the query values (using parallel calls to OOPE),
plus the time to send the query to the database and the time (few
milliseconds) to actually run the query on the database and the
time to send back the result to the DA.
Experimental Setup. We chose 2048 bits as the bitlength of the
public key for Paillier’s scheme and ran experiments via loopback
address, LAN and WAN. For LAN, we used 3 machines with Intel(R)
Xeon(R) CPU E7-4880 v2 at 2.50GHz: 4 CPUs and 8 GB RAM, 4
CPUs and 4 GB RAM, 2 CPUs and 2 GB RAM. For the loopback,
we used the first LAN machine with 4 CPUs and 8 GB RAM. For
WAN, we used three machines on amazon web services (Intel(R)
Xeon(R) CPU E5-2686 v4 @ 2.30GHz 2.30GHz - 244 GB RAM -
64-bit Windows) distributed in three regions (Northern California,
Frankfurt, Tokyo). We generated the OPE-tree with random inputs,
balanced it and encrypted the plaintexts with Paillier encryption.
For the DA, we generated 100 random inputs. Then we executed the
OOPE protocol 100 times and computed the average time spent in
Protocols 5 and 6, in the GC step, in Paillier’s decryption. The above
optimization (Section 5.4) is not part of the following evaluation.
Encryption Cost. Figure 14 shows the average cost (y-axis)
needed to encrypt a value with the OOPE protocol for OPE-tree with
size (x-axis) between 100 and 1,000,000. Overall, the cost for OOPE
goes up as the size of the OPE-tree increases. This is because the
depth of the tree increases with its size. Hence, this implies larger
number of oblivious comparisons for larger trees. The average
encryption time of OOPE for a database with one million entries
is about 0.3 s via loopback (1.3 s via LAN, 15.6 s via WAN). This
cost corresponds to the cost of comparison multiply by the number
of comparisons (e.g., 20 for 1000000 entries) which can be reduces
by the optimization of Section 5.4. The inherent sub-protocol for
oblivious comparison does not depend on the OPE-tree size but on
the input length and the security parameter log2 N . The time for
comparison is illustrated in Table 2. Via loopback the comparison
costs about 15 ms which is dominated by the time (about 12 ms to
the DO) to decrypt⎜x+ r⨆︁ in Step 4 of Protocol 6. The remaining 3
ms are due to the garbled circuit execution, since the overhead due
to network communication is negligible. Via LAN the comparison
costs about 63 ms where the computation is still dominated by
the 12 ms for decryption. However, the network traffic causes an
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
Anselme Tueno and Florian Kerschbaum
(a) Average generation time
(b) Storage cost for log2 N = 2048
Figure 15: OPE-tree costs
overhead of about 49 ms. Via WAN the time is dominated by the
network round-trip time which is about 200 ms resulting in 755 ms
for the oblivious comparison.
OPE-tree costs. The time to generate the OPE-tree also in-
creases with the number of entries in the database and it is domin-
ated by the time needed to encrypt the input data with Paillier’s
scheme. However, the above optimizations (i.e. choice of д= 1+ N
and pre-generated randomness) enable a fast generation of the
OPE-tree. Figure 15a illustrates the generation time on the y-axis
for OPE-tree with size between 100 and 1,000,000 on the x-axis.
For 1 million entries, the generation costs on average only about
4.5 seconds. The storage cost of the tree depends on log2 N , the
bit length of the order and the tree size. Since Paillier ciphertexts
are twice longer than log2 N , each OPE ciphertext∐︀⎜x⨆︁, ỹ︀ needs
2⋅log2 N+log2 M bits storage. This is illustrated in Figure 15b, with
the x-axis representing the tree size. The scheme needs 492.1 MB
to store 1 million OPE ciphertexts, when the security parameter is
2048 and the order is 32-bit long.
Comparison to [23]. Ishai et al. [23] evaluated their scheme on
a machine with 8GB of RAM and 4 cores of an Intel i7-2600K 3.4GHz
CPU. Our loopback experiment was done on a machine with 8 GB of
RAM and 4 cores of an Intel(R) Xeon(R) CPU E7-4880 v2 at 2.50GHz.
In their experiment, Ishai et al. [23] used a database with 10 million
entries and performed ranges queries with result set size of 1000,
10000, 50000, 100000, 250000, 500000, 750000, and 1 million records.
Then they performed the same experiment on plaintext data using
MySQL and computed the overhead of their scheme. For result
sets of 1000 and 1 million, their overhead against plaintext MySQL
is≈100 and≈10 seconds, respectively. They attribute the reduced
overhead to the fact their construction has additional fixed cost time
that dominates small queries. As illustrated in Figure 2, our scheme
adds to MySQL only the overhead for computing the OPE encodings
of the query endpoints, which does not depend on the size of the
result set. For a database with 107 entries our overhead is only
about 360 milliseconds, i.e., the time for one oblivious comparison
(15 ms) multiplies by the depth of the OPE-tree (log2(107)= 24).
9 CONCLUSION
Since OPE schemes are limited to the use case to one server and one
client, we introduced a novel notion of oblivious OPE (OOPE) as an
equivalent of a public-key OPE. Then we presented a protocol for
OOPE that combines deterministic OPE schemes based on binary
tree search with Paillier’s HE scheme and GC. We also applied
our technique to the case where the underlying OPE scheme is
probabilistic. Finally, we implemented our scheme with SCAPI
and an optimized Paillier’s scheme and showed that it achieves
acceptable performance for interactive use.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers for
their valuable comments and helpful suggestions. This work was
supported by the EC within the H2020 under grant agreement
644579 (ESCUDO-CLOUD).
REFERENCES
[1] Rakesh Agrawal, Jerry Kiernan, Ramakrishnan Srikant, and Yirong Xu. 2004.
Order Preserving Encryption for Numeric Data. In SIGMOD. ACM, New York,
NY, USA, 563–574.
[2] Ghous Amjad, Seny Kamara, and Tarik Moataz. 2019. Breach-Resistant Structured
Encryption. PoPETs 2019, 1 (2019), 245–265.
[3] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2013.
More Efficient Oblivious Transfer and Extensions for Faster Secure Computation.
In CCS ’13. ACM, New York, NY, USA, 535–548.
[4] Mikhail J. Atallah, Marina Bykova, Jiangtao Li, Keith B. Frikken, and Mercan
Topkara. 2004. Private collaborative forecasting and benchmarking. In WPES.
103–114.
[5] Mikhail J. Atallah, Hicham G. Elmongui, Vinayak Deshpande, and Leroy B.
[9] Octavian Catrina and Florian Kerschbaum. 2008. Fostering the Uptake of Secure
[6] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Phillip Rogaway. 2013.
[10] Nathan Chenette, Kevin Lewi, Stephen A. Weis, and David J. Wu. 2016. Practical
Schwarz. 2003. Secure Supply-Chain Protocols. In CEC ’03. 293–302.
Efficient Garbling from a Fixed-Key Blockcipher. In SP ’13. 478–492.
[7] Alexandra Boldyreva, Nathan Chenette, Younho Lee, and Adam O’Neill. 2009.
Order-Preserving Symmetric Encryption. In EUROCRYPT ’09. Springer-Verlag,
Berlin, Heidelberg, 224–241.
[8] Alexandra Boldyreva, Nathan Chenette, and Adam O’Neill. 2011. Order-
preserving Encryption Revisited: Improved Security Analysis and Alternative
Solutions. In CRYPTO’11. Springer-Verlag, Berlin, Heidelberg, 578–595.
Multiparty Computation in E-Commerce. In ARES ’08. 693–700.
Order-Revealing Encryption with Limited Leakage. In FSE ’16. 474–493.
[11] Ronald Cramer, Ivan Damgård, and Jesper Buus Nielsen. 2015. Secure Multiparty
Computation and Secret Sharing. Cambridge University Press, New York, NY,
USA.
[12] Reza Curtmola, Juan Garay, Seny Kamara, and Rafail Ostrovsky. 2006. Searchable
Symmetric Encryption: Improved Definitions and Efficient Constructions. In CCS
’06. 79–88.
[13] Ivan Damgård, Martin Geisler, and Mikkel Krøigaard. 2007. Efficient and Secure
Comparison for On-Line Auctions. In ACISP. 416–430.
[14] Ivan Damgård and Rune Thorbek. 2008. Efficient Conversion of Secret-shared
Values Between Different Fields. IACR Cryptology ePrint Archive 2008 (2008),
221.
[15] Wenliang Du and Mikhail J. Atallah. 2001. Privacy-Preserving Cooperative
Scientific Computations. In CSFW ’01. IEEE Computer Society, Washington, DC,
USA, 273–.
[16] Betül Durak, Thomas DuBuisson, and David Cash. 2016. What Else is Revealed
by Order-Revealing Encryption? Technical Report 786. IACR Cryptology ePrint
Archive.
[17] Yael Ejgenberg, Moriya Farbstein, Meital Levy, and Yehuda Lindell. 2012. SCAPI:
The Secure Computation Application Programming Interface. IACR Cryptology
ePrint Archive 2012 (2012), 629.
[18] Craig Gentry. 2009. Fully Homomorphic Encryption Using Ideal Lattices. In
STOC ’09. ACM, New York, NY, USA, 169–178.
Cambridge University Press, New York, NY, USA.
[19] Oded Goldreich. 2004. Foundations of Cryptography: Volume 2, Basic Applications.
[20] Paul Grubbs, Kevin Sekniqi, Vincent Bindschaedler, Muhammad Naveed, and
Thomas Ristenpart. 2016. Leakage-Abuse Attacks against Order-Revealing Encryp-
tion. Technical Report 895. IACR Cryptology ePrint Archive.
Efficient Secure Computation of Order-Preserving Encryption
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
[25] Florian Kerschbaum. 2015. Frequency-Hiding Order-Preserving Encryption. In
[26] Florian Kerschbaum and Axel Schröpfer. 2014. Optimal Average-Complexity
[27] Florian Kerschbaum and Anselme Tueno. 2019. An Efficiently Searchable En-
[21] P. Grubbs, K. Sekniqi, V. Bindschaedler, M. Naveed, and T. Ristenpart. 2017.
Leakage-Abuse Attacks against Order-Revealing Encryption. In SP ’17. 655–672.
[22] Florian Hahn and Florian Kerschbaum. 2014. Searchable Encryption with Secure
and Efficient Updates. In CCS ’14. 310–320.
[23] Yuval Ishai, Eyal Kushilevitz, Steve Lu, and Rafail Ostrovsky. 2016. Private Large-
Scale Databases with Distributed Searchable Symmetric Encryption. In CT-RSA
(Lecture Notes in Computer Science), Vol. 9610. Springer, 90–107.
[24] Florian Kerschbaum. 2012. Privacy-Preserving Computation - (Position Paper).
In APF ’12. 41–54.
CCS ’15. ACM, New York, NY, USA, 656–667.
Ideal-Security Order-Preserving Encryption. In SIGSAC ’14. 275–286.
crypted Data Structure for Range Queries. In ESORICS ’19. 344–364.
[28] Vladimir Kolesnikov, Ahmad-Reza Sadeghi, and Thomas Schneider. 2009. Im-
proved Garbled Circuit Building Blocks and Applications to Auctions and Com-
puting Minima. In CANS ’09. 1–20.
Free XOR Gates and Applications. In ICALP ’08. 486–498.
tions, Applications, and Lower Bounds. In CCS ’16. 1167–1178.
of Cryptology 15, 3 (2002), 177–206.
Two-Party Computation. J. Cryptol. 22, 2 (April 2009), 161–188.
[33] Yehuda Lindell and Benny Pinkas. 2009. Secure Multiparty Computation for
Privacy-Preserving Data Mining. The Journal of Privacy and Confidentiality 2009,
1 (2009), 59–98.
[34] Charalampos Mavroforakis, Nathan Chenette, Adam O’Neill, George Kollios, and
Ran Canetti. 2015. Modular Order-Preserving Encryption, Revisited. In SIGMOD
’15. 763–777.
Inference
Attacks on Property-Preserving Encrypted Databases. In CCS ’15. ACM, New
York, NY, USA, 644–655.
[36] Pascal Paillier. 1999. Public-key Cryptosystems Based on Composite Degree
[31] Yehuda Lindell and Benny Pinkas. 2002. Privacy Preserving Data Mining. Journal
[32] Yehuda Lindell and Benny Pinkas. 2009. A Proof of Security of Yao’s Protocol for
[30] Kevin Lewi and David J. Wu. 2016. Order-Revealing Encryption: New Construc-
[29] Vladimir Kolesnikov and Thomas Schneider. 2008. Improved Garbled Circuit:
[35] Muhammad Naveed, Seny Kamara, and Charles V. Wright. 2015.
[37] Rishabh Poddar, Tobias Boelter, and Raluca Ada Popa. 2016. Arx: A Strongly
Residuosity Classes. In EUROCRYPT’99. Springer-Verlag, Berlin, Heidelberg.
Encrypted Database System. IACR Cryptology ePrint Archive 2016 (2016).
[38] Raluca Ada Popa, Frank H. Li, and Nickolai Zeldovich. 2013. An Ideal-Security
Protocol for Order-Preserving Encoding. In SP ’13. IEEE Computer Society, Wash-
ington, DC, USA, 463–477.
[39] Raluca Ada Popa, Catherine M. S. Redfield, Nickolai Zeldovich, and Hari Bal-
akrishnan. 2011. CryptDB: Protecting Confidentiality with Encrypted Query
Processing. In SOSP ’11. ACM, New York, NY, USA, 85–100.
[40] Pille Pullonen, Dan Bogdanov, and Thomas Schneider. 2012. The design and
implementation of a two-party protocol suite for SHAREMIND 3. Technical Report.
CYBERNETICA Institute of Information Security.
[41] Daniel S. Roche, Daniel Apon, Seung Geol Choi, and Arkady Yerukhimovich.
[44] Anselme Tueno, Yordan Boev, and Florian Kerschbaum. 2019. Non-Interactive
2016. POPE: Partial Order Preserving Encoding. In CCS ’16. 1131–1142.
[42] Fabian Taigel, Anselme K. Tueno, and Richard Pibernik. 2018. Privacy-preserving
condition-based forecasting using machine learning. Journal of Business Econom-
ics (05 Jan 2018).
[43] Isamu Teranishi, Moti Yung, and Tal Malkin. 2014. Order-preserving encryption
secure beyond one-wayness. In ASIACRYPT ’14.
Private Decision Tree Evaluation. CoRR abs/1909.08362 (2019).
[45] Anselme Tueno, Florian Kerschbaum, and Stefan Katzenbeisser. 2019. Private
Evaluation of Decision Trees using Sublinear Cost. PoPETs 2019, 1 (2019), 266–286.
https://doi.org/10.2478/popets-2019-0015
[46] Anselme Tueno, Florian Kerschbaum, Stefan Katzenbeisser, Yordan Boev, and
Mubashir Qureshi. 2020. Secure Computation of the kth-Ranked Element in a
Star Network. In Financial Cryptography and Data Security (FC).
Computer Society, Washington, DC, USA, 160–164.
[47] Andrew C. Yao. 1982. Protocols for Secure Computations. In SFCS ’82. IEEE
[48] Samee Zahur, Mike Rosulek, and David Evans. 2015. Two Halves Make a Whole -
Reducing Data Transfer in Garbled Circuits Using Half Gates (EUROCRYPT’15).
A COMPLEXITY ANALYSIS
This section presents the complexity analysis of our OOPE scheme.
We focus on the main scheme as described in Section 5.3. The
analysis for the extensions in Section 7 and Appendix D is similar.
Let λ be the security parameter, κ be the bitlength of an asymmetric
ciphertext, l be the bitlength of each plaintext and d be the depth
of the OPE-tree.
A.1 Computation Complexity
The CSP performs one asymmetric operation per comparison res-
A.2 Communication Complexity
For each comparison, the CSP sends one asymmetric ciphertext to
ulting in a total𝒪(d) asymmetric operations.
The DO performs one asymmetric operation and𝒪(l) symmet-
ric operations per comparison resulting in a total𝒪(d) asymmetric
operations and𝒪(dl) symmetric operations.
The DA performs𝒪(l) symmetric operations per comparison
resulting in a total of𝒪(dl) symmetric operations.
the DO and one random l-bit integer to the DA resulting in κ+ l
bits. In total the CSP sends(κ+ l)d bits.
● its cost in the OT extension protocol which is lλ [3] for the
● the cost for sending the GC which is the number of cipher-
● the cost for sending the garbled input of the generator which