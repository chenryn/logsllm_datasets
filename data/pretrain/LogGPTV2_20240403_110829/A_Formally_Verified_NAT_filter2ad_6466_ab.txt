at least to automatically help the NF developer formulate them.
switch(p) { case packet(port): return port != 9; }
}
@*/
fixpoint bool packet_constraints_fp(packet p) {
1 /*@
2
3
4
5
6
7 static bool packet_constraints(struct packet* p) {
8
9 }
return p->port != 9;
Figure 2: An invariant preserved by the loop in Fig. 1 is that
∀packet p ∈ rinд r , packet_constraints (p) == true.
Target properties. Vigor proves that this NF never crashes (an
example of a low-level property) and that it never yields a packet
with target port 9 (an example of a semantic property). For the
latter, the gist of the proof is to show that the code never pushes
onto the ring packets with target port 9, and that the ring never
alters the stored packets; these two properties imply that a popped
packet can never have target port 9. There are three steps:
3
Step 1: Function contracts & proofs. For each method of a
libVig data type1, the libVig developer writes a contract, i.e., a
formal specification of what the method guarantees; she also writes
a formal proof that the implementation of that method satisfies the
contract. This is a significant undertaking, but can be amortized
across the potentially many NFs that will use the same data type.
Fig. 3 shows the contract (ll.2-6) and the implementation of the
ring_pop_front function, which removes the packet at the front of
the ring2. The contract says that this function will not damage the
ring, will remove the packet at the front of the ring, and will honor
certain constraints that hold for all packets in the ring (l.6), as long as
the ring was in a good state and honored these constraints before the
function was called (l.2). In the contract, packet_constraints_fp is
an abstract function, i.e., the contract says that ring_pop_front will
honor any packet constraints as long as these hold before it is called.
The NF developer can provide desired constraints when using libVig;
in this example, the provided constraint (Fig. 2) conveniently serves
as a loop invariant too. §5.1.2 has the details on libVig contracts.
lst != nil &*& packetp(p, _); @*/
packetp(p, head(lst)) &*&
true == packet_constraints_fp(head(lst)); @*/
1 void ring_pop_front(struct ring* r, struct packet* p)
2 /*@ requires ringp(r, ?packet_constraints_fp, ?lst, ?cap) &*&
3
4 /*@ ensures ringp(r, packet_constraints_fp, tail(lst), cap) &*&
5
6
7 {
8
9
10
11
12
13
14
15
16
17
18
19 }
//@ extract_first(r);
struct packet* src_pkt = r->array + r->begin;
p->port = src_pkt->port;
r->len = r->len - 1;
r->begin = r->begin + 1;
if (r->cap begin) {
r->begin = 0;
//@ stitch_with_empty_overflow(r);
//@ stitch_with_empty(r);
} else {
}
Figure
ring_pop_front() and its formal contract.
from the
Excerpt
3:
implementation
of
Step 2: Exhaustive symbolic execution. (a) Vigor replaces all
function calls that access state or interact with the network with
calls to a symbolic model. For example, the symbolic model for
ring_pop_front (model (a) in Fig. 4) returns a packet with fully
symbolic content (i.e., a packet whose content could be anything
whatsoever) constrained via packet_constraints to have its target
port different from 9. Despite its simplicity, this model captures all
the behavior of ring_pop_front that matters in our context, namely
that it never yields a packet with target port 9. (b) Once all func-
tion calls have been replaced with calls to symbolic models, Vigor
symbolically executes the resulting code. Even though Vigor is sym-
bolically executing real C code, this step terminates quite quickly,
1We use the terms “data structure” and “data type” interchangeably, with the under-
standing that the data structure state is encapsulated behind a well-defined interface.
2This implementation is only an illustrative example. In a our verified NAT, and in
most real implementations, we would not copy packets field by field (Fig. 3, l.10) but
rather return a pointer to the packet.
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
A. Zaostrovnykh, S. Pirelli, L. Pedrosa, K. Argyraki, and G. Candea
because the models are stateless and with few branching points
(like the one in Fig. 4), and the loop annotations help prevent un-
necessary unrolling. This exhaustive symbolic execution has two
outcomes, both assuming the symbolic model is valid: First, it proves
that the target low-level property (i.e., that the NF cannot crash for
any input) holds. Second, it produces all the feasible function-call
sequences that could result from running the code, along with the
constraints on program state that hold after each call. Fig. 5 shows
one such call sequence that results when the ring is full. For details
on exhaustive symbolic execution, see §5.2.1.
Model (a)
1 void ring_pop_front(struct ring* r, struct packet* p) {
2
3
4 }
FILL_SYMBOLIC(p, sizeof(struct packet), "popped_packet");
ASSUME(packet_constraints(p));
Model (b)
1 void ring_pop_front(struct ring* r, struct packet* p) {
2
3
4 }
FILL_SYMBOLIC(p, sizeof(struct packet), "popped_packet");
// No constraint on the packet's target port.
Model (c)
1 void ring_pop_front(struct ring* r, struct packet* p) {
2
3 }
p->port = 0;
Figure 4: Symbolic models of ring_pop_front.
Step 3: Lazy model validation. (a) For each function call that
accesses state, in each feasible call sequence, Vigor verifies that the
symbolic model used to produce the speculative verification via
symbolic execution in Step 2 was, in retrospect, valid for that call.
This validity means that the output of the model is a superset (in the
sense of constrained symbolic state) of the output that the actual
implementation could produce. For example, consider the call to
ring_pop_front (Fig. 5, l.13): Vigor extracts the constraints on sym-
bolic program state that held right after the model was symbolically
executed in Step 2; inserts, right after the call, an assertion for these
so-called path constraints (l.16); and asks a proof checker to verify
that this assertion is compatible with ring_pop_front’s contract
(details in §5.2.3). The proof checker concludes that it is, and in
particular that the output of the model (a packet whose target port
can be anything but 9) is a superset of the output specified by the
function’s contract, hence also of the function’s implementation
(since Step 1 proved that the implementation satisfies the contract).
(b) Vigor verifies that, after every packet send(), not shown in Fig. 5,
the target semantic property holds, i.e., the output packet does not
have target port 9. More details appear in §5.2.2.
Invalid models. An invalid model will cause either Step 2 or
Step 3 to fail, but it will never lead to an incorrect proof. For example,
model (b) in Fig. 4 is too abstract for our purpose: it returns a
packet whose content could be anything at all, including having a
target port 9. This is an “over-approximate” model in verification
speak. If Vigor uses this model in Step 2, then Step 3b fails: since
the model can return packets with target port 9, Vigor cannot
verify for all call sequences that the output packet does not have
1 struct ring* arg1;
2 struct packet arg2;
3
4 loop_invariant_produce(&(arg1));
5 //@ open loop_invariant(_);
6 bool ret1 = ring_full(arg1);
7 //@ assume(ret1 == true);
8 bool ret2 = ring_empty(arg1);
9 //@ assume(ret2 == false);
10 bool ret3 = can_send();
11 //@ assume(ret3 == true);
12 //@ close packetp(&(arg2), packet((&(arg2))->port));
13 ring_pop_front(arg1, &(arg2));
14 //@ open packetp(&(arg2), _);
15
16 //@ assert(arg2.port != 9);
Figure 5: Example function-call sequence that results from
Step 2, annotated by Vigor with an assertion of a path con-
straint (l.16).
target port 9. Conversely, model (c) in Fig. 4 is too specific for our
purpose: it always returns a packet with target port 0, i.e., it is
an “under-approximate” model. If Vigor uses this model in Step
2, then Step 3a fails: Recall that, for each call, Vigor obtains the
path constraints that held right after the model was symbolically
executed in Step 2, and inserts, right after the call, an assertion
for these path constraints. With this model, the assertion would
be //@ assert(arg2.port == 0). The proof checker cannot confirm
that this assertion is always true, because ring_pop_front’s contract
(Fig. 3, ll.4–6) specifies a wider range for arg2.port than 0.
This section illustrated how Vigor stitches symbolic execution
with proof verification via the function-call sequences. There are a
couple other steps involved in the proof (omitted here for clarity)
that we describe fully in §5.
4 PROVEN PROPERTIES
We verified our NAT (which we call VigNAT) using the approach
outlined in §3. We now describe the specific properties we verify.
4.1 Semantic Properties
We proved that VigNAT correctly implements the semantics spec-
ified in the Traditional NAT RFC [53]. For this, we wrote a NAT
specification that formalizes our interpretation of the RFC, and
which we believe to be consistent with typical NAT implementa-
tions. The specification [58] has 300 lines of separation logic [51]
and took 3 person-days to complete.
We started from formally describing NAT behavior as shown in
Fig. 6, in terms of the effect that a packet arrival has on abstract
state (flow_table). There are three static configuration parameters:
the capacity of the flow table (CAP), the flow timeout (Texp), and the
IP address of the external interface (EXT_IP). The F (P ) function ex-
tracts from the flow table the packet flow ID, based on its source and
destination IP addresses and ports. With every packet arrival (l.1),
the NAT finds and removes expired flows (l.2), updates the flow
table according to the received packet (l.3), then potentially rewrites
the packet and forwards it (l.4). To update the flow table, the NAT
4
A Formally Verified NAT
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
1 Packet P arrives at time t → P is accepted
→ expire_flows(t )
→ update_flow(P, t )
→ forward(P )
6 expire_flows(t ) := ∀G ∈ flow_table
s.t. G.timestamp + Texp <= t :
remove G from flow_table
10 update_flow(P, t ) := if (F (P ) ∈ f low _table) {
2
3
4
5
7
8
9
11
12
13
14
15
16
17
18
19
20 forward(P ) :=
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
∀G ∈ flow_table s.t. F (P ) = G :
set G.timestamp = t
} else {
if (P .iface = internal) {
if (size(flow_table) < CAP) {
insert F (P ) in flow_table
}
}
}
if (F (P ) ∈ flow_table) {
if (P .iface = internal) {
→ S.data = P .data
→ S.iface = external
→ S.dst_ip = P .dst_ip