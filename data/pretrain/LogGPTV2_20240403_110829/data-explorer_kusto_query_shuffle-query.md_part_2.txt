The following query uses `hint.shufflekey = key`. The query above is equivalent to this query.
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where StartTime > datetime(2007-01-01 00:00:00.0000000)
| join kind = inner hint.shufflekey = EpisodeId hint.shufflekey = EventId (StormEvents | where DamageCrops > 62000000) on EpisodeId, EventId
```
**Output**
|Count|
|---|
|14|
### Shuffle the data with multiple keys
In some cases, the `hint.strategy=shuffle` will be ignored, and the query won't run in shuffle strategy. For example, in the following example, the join has summarize on its left side, so using `hint.strategy=shuffle` won't apply shuffle strategy to the query:
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where StartTime > datetime(2007-01-01 00:00:00.0000000)
| summarize count() by EpisodeId, EventId
| join kind = inner hint.strategy=shuffle (StormEvents | where DamageCrops > 62000000) on EpisodeId, EventId
```
**Output**
|EpisodeId|EventId|...|EpisodeId1|EventId1|...|
|--|--|--|--|--|--|
|1030 |4407 |...| 1030 |4407|...|
|1030 |13721 |...| 1030 |13721|...|
|2477 |12530 |...| 2477 |12530|...|
|2103 |10237 |...| 2103 |10237|...|
|2103| 10239| ...| 2103 |10239|...|
|...|...|...|...|...|...|
To overcome this issue and run in shuffle strategy, choose the key that is common for the `summarize` and `join` operations. In this case, this key is `EpisodeId`. Use the hint `hint.shufflekey` to specify the shuffle key on the `join` to `hint.shufflekey = EpisodeId`:
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where StartTime > datetime(2007-01-01 00:00:00.0000000)
| summarize count() by EpisodeId, EventId
| join kind = inner hint.shufflekey=EpisodeId (StormEvents | where DamageCrops > 62000000) on EpisodeId, EventId
```
**Output**
|EpisodeId|EventId|...|EpisodeId1|EventId1|...|
|--|--|--|--|--|--|
|1030 |4407| ...| 1030 |4407| ...|
|1030 |13721| ...| 1030 |13721| ...|
|2477 |12530| ...| 2477 |12530| ...|
|2103 |10237| ...| 2103 |10237| ...|
|2103 |10239| ...| 2103 |10239| ...|
|...|...|...|...|...|...|
### Use summarize with shuffle to improve performance
In this example, using the `summarize` operator with `shuffle` strategy improves performance. The source table has 150M records and the cardinality of the group by key is 10M, which is spread over 10 cluster nodes.
Using `summarize` operator without `shuffle` strategy, the query ends after 1:08 and the memory usage peak is ~3 GB:
```kusto
orders
| summarize arg_max(o_orderdate, o_totalprice) by o_custkey 
| where o_totalprice < 1000
| count
```
**Output**
|Count|
|---|
|1086|
While using `shuffle` strategy with `summarize`, the query ends after ~7 seconds and the memory usage peak is 0.43 GB:
```kusto
orders
| summarize hint.strategy = shuffle arg_max(o_orderdate, o_totalprice) by o_custkey 
| where o_totalprice < 1000
| count
```
**Output**
|Count|
|---|
|1086|
The following example demonstrates performance on a cluster that has two cluster nodes, with a table that has 60M records, where the cardinality of the group by key is 2M.
Running the query without `hint.num_partitions` will use only two partitions (as cluster nodes number) and the following query will take ~1:10 mins:
```kusto
lineitem 
| summarize hint.strategy = shuffle dcount(l_comment), dcount(l_shipdate) by l_partkey 
| consume
```
If setting the partitions number to 10, the query will end after 23 seconds:
```kusto
lineitem 
| summarize hint.strategy = shuffle hint.num_partitions = 10 dcount(l_comment), dcount(l_shipdate) by l_partkey 
| consume
```
## Use join with shuffle to improve performance
The following example shows how using `shuffle` strategy with the `join` operator improves performance.
The examples were sampled on a cluster with 10 nodes where the data is spread over all these nodes.
The query's left-side source table has 15M records where the cardinality of the `join` key is ~14M. The query's right-side source has 150M records and the cardinality of the `join` key is 10M. The query ends after ~28 seconds and the memory usage peak is 1.43 GB:
```kusto
customer
| join
    orders
on $left.c_custkey == $right.o_custkey
| summarize sum(c_acctbal) by c_nationkey
```
When using `shuffle` strategy with a `join` operator, the query ends after ~4 seconds and the memory usage peak is 0.3 GB:
```kusto
customer
| join
    hint.strategy = shuffle orders
on $left.c_custkey == $right.o_custkey
| summarize sum(c_acctbal) by c_nationkey
```
In another example, we try the same queries on a larger dataset with the following conditions:
* Left-side source of the `join` is 150M and the cardinality of the key is 148M.
* Right-side source of the `join` is 1.5B, and the cardinality of the key is ~100M.
The query with just the `join` operator hits limits and times-out after 4 mins. However, when using `shuffle` strategy with the `join` operator, the query ends after ~34 seconds and the memory usage peak is 1.23 GB.
The following example shows the improvement on a cluster that has two cluster nodes, with a table of 60M records, where the cardinality of the `join` key is 2M.
Running the query without `hint.num_partitions` will use only two partitions (as cluster nodes number) and the following query will take ~1:10 mins:
```kusto
lineitem
| summarize dcount(l_comment), dcount(l_shipdate) by l_partkey
| join
    hint.shufflekey = l_partkey   part
on $left.l_partkey == $right.p_partkey
| consume
```
When setting the partitions number to 10, the query will end after 23 seconds:
```kusto
lineitem
| summarize dcount(l_comment), dcount(l_shipdate) by l_partkey
| join
    hint.shufflekey = l_partkey  hint.num_partitions = 10    part
on $left.l_partkey == $right.p_partkey
| consume
```