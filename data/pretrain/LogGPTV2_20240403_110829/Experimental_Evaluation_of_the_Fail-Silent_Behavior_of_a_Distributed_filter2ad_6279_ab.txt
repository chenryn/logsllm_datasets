306 
(no error or overwritten error); (ii) the experiment duration 
has been too short in order for the error to declare (the error 
is  latent).  To  increase  the confidence in  our experimental 
results,  we have tried  experiment durations longer than  20 
s and observed that it does not change the faults manifesta- 
tions. We consider in the following that no error stays latent 
after every experiment. 
(a) No ohscrvaiiim 
(latent  or nvcrwriwn error) 
(h) Failurc of EDMs 
to dckcl an error 
(c)  lustilied crror detections 
(d) Ovcrscnsiwc  rcactiun 
of  an EDM 
Figure 1 .  Fault manifestations 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:05 UTC from IEEE Xplore.  Restrictions apply. 
The  combination  of  the  two  classes  of  manifestations 
Sdet and Sfat[ are depicted by  labels (a) to (d) in  figure  1. 
We call error detections of the set sJuSl = Sdet n Sfazl jus- 
tified error  detections.  The set  of  experiments  Sdet\Sfail 
indicates an  interesting  scenario:  an  "oversensitive"  EDM 
may detect an error that does not result  in  a system failure. 
This can occur for instance when an EDM detects an error in 
an area that is never accessed by  the system (except by  the 
EDM itself).  Although  there is  no danger for system mal- 
function in this situation, it can positively bias the efficiency 
of  some EDMs  (see  [18] and  5  4.3).  Note  that  detecting 
oversensitive reactions  requires it  to be  known  whether  an 
injection leads to a system failure.  It thus requires that the 
system execution is not stopped after an error detection to be 
able to observe the application results.  To compute the per- 
centage of  first  detections and the  latency  of EDMs  (ยง 4.3 
and 4.4),  in  order to  avoid  positively  biased  measures  for 
oversensitive EDMs, the measures were  obtained by  using 
only justified error detections. 
3.3. Fault injector 
The implementation of the fault injector highly relies on 
the Pentium debugging features. We use the Pentium ability 
to raise an exception (debug exception) when  a given loca- 
tion is accessed. Fault injection proceeds in three steps: 
1.  Selection  of  the fault  injection  time:  the  time  of  the 
fault injection is selected at random, and a timer is pro- 
grammed to perform the actual injection. 
2.  Fault injection:  memory is modified  to actually  inject 
the fault.  The physical address where the  fault should 
be injected is selected at random. One bit at the selected 
address  is  inverted.  One  of  the  Pentium  breakpoint- 
address register is set so that a debug exception is raised 
when this address is accessed. 
3.  Fault  activation:  the  activation  of  a fault is  detected 
thanks to the triggering of a debug exception. 
Steps 1 and 2 are retried (and the effects of non-activated 
faults  are  undone)  until  a  fault  is  activated.  We  consider 
that  a  fault  is  not  activated  if  more than  10 seconds  have 
elapsed since the fault injection. The delay of  10 s has been 
selected because it is much larger than the period of all tasks 
executed in  the  system.  Informations concerning the costs 
of fault injection and activation can be found in  [5]. 
Figure 2 depicts the environment into which the fault in- 
jection campaigns have been conducted. The system is made 
of a set of five computers connected by ATM and Ethernet. 
Four  target  computers  (left  of  the  figure) execute  applica- 
tions that exchange messages through ATM.  Faults are in- 
jected in the run-time support of one target computer (in the 
memory areas depicted as shaded boxes in Fig 2). The host 
computer (right of the figure) collects the results of fault in- 
jections. 
A  fault injection campaign consists in a sequence of ex- 
periments.  During  each  experiment,  a  workload  applica- 
Figure 2. Experimental setup 
tion  (see  3.4) is  started.  The application  results are regu- 
larly  transmitted  to the host computer through the Ethernet. 
Faults are  injected  until  a fault is  activated.  Subsequently, 
when an error is detected, the concerned computer is stopped 
(except when we are interested in justified error detections - 
ยง 4.3,  4.4, and 4.6 -in  which  case the execution continues). 
Then, in all cases, after a time  interval of  20 seconds rela- 
tive to the fault activation time, the results of the experiment 
are sent to the  host computer.  The computers  of the target 
system are then rebooted for the next experiment. 
3.4. Workload 
The workload is a distributed object tracking application. 
Its purpose is for slave mobile objects to  follow the move- 
ments  of  a  master  mobile  object.  Sensors,  located  in  one 
of  the  computers,  give  the  current  position  of  all  objects, 
and actuators, located in the same computer, command their 
movements (in this study, sensors and actuators are emulated 
in  software).  The sensors are sampled  periodically  with  a 
period  of 250ms. The computation of the trajectory  of the 
slave objects is achieved by  a task with a period  of 250ms, 
which  is  distributed  on  the  four  HADES computers,  each 
computer managing a static set of N / 4  objects.  Two small 
tasks,  independent  of  the  object  tracking  application,  and 
aiming  at  testing  the  correctness of  synchronization, com- 
plete the workload.  An  interesting aspect of this workload 
application is that it covers a large percentage of the HADES 
functionalities.  In  addition, its correctness in  the  time  and 
value domains can be easily checked since the application is 
deterministic. 
4. Results of the experiments 
The EDMs  introduced  in  Section 2.2 are  evaluated  ac- 
cording to different metrics: coverage of fail-silence (3 4. I), 
percentage  of  first  detections (5  4.3),  latency  (5  4.4),  and 
overlap with  other mechanisms  (5  4.6).  In  addition,  para- 
graph 4.2 analyses the fail-silence violations. 
307 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:05 UTC from IEEE Xplore.  Restrictions apply. 
4.1. Coverage of the fail-silence assumption 
The fail-silence coverage is evaluated by  injecting faults 
in the run-time support memory image, and observing their 
consequences on  the workload  application of 5  3.4. Due to 
the presence  of hard real-time constraints,  the  applications 
results are characterized not only by  their value but also by 
the  time  when  they  are produced.  An  activated  fault  can 
have the following manifestations on the workload applica- 
tion output : 
Crash 
Crash  of  at  least one  computer, the  others re- 
turning correct results in the time and value do- 
mains 
Wval-Ctim  Wrong values for at least one computer, correct 
timing for all computers 
Cval-Wtim  Correct  values  for  non-crashed  computers, 
wrong timing for at least one computer 
Wval-Wtim  Wrong  values for at least one computer, wrong 
Cval-Ctim 
timing for at least one computer 
Correct results (in the time and value domains) 
for all computers 
the  fault  has  propagated). 
The first four classes of fault manifestations given above 
can  further  be  subdivided depending on  whether  or  not  a 
computer  different  from  the  one  where  the  fault  was  in- 
jected  has  failed  (i.e. 
In  the 
following,  we  call  the  resulting  classes  of  manifestations 
Crash-NP,  Crash-P,  Wval-Wtim-NP,  Wval-Wtim-P,  Wval- 
Ctim-NP,  Wval-Ctim-P,  Cval-Wtim-NP,  Cval-Wtim-P  and 
Cval-Ctim (NP stands for NoPropug, P  stands for Propug). 
A computer is fail-silent if the application results are cor- 
rect  in  the  time  and  value domain  (category Cval-Ctim) or 
the  computer  crashes  without propagating  the error to  an- 
other computer (category Crash-NP). To compute the cover- 
age, we consider the set of activated errors Sact: 
Table  2  depicts  the  observed  fault  manifestations,  fail- 
silence coverage and corresponding confidence interval for 
two configurations of HADES: (a) without EDMs (i.e.  with 
only the CPU EDMs and kernel panics, that cannot be turned 
off); (b) with all the EDMs of 3 2.2. 
In  a system  without  error detection,  19.4% of  the faults 
caused  fail-silent  violations,  which  shows  that  without 
EDMs,  the  fail-silence coverage  is  modest.  However,  the 
fail-silence  coverage  is  higher  than  in  systems  using  pro- 
For  instance,  the  study 
described  in  [I21 reports  that  45.6% of  faults  caused  fail- 
silence  violations  for  a  processor  without  error  detection 
(280). 
' cessors  without  error  detection. 
When all EDMs are used, 99. I % of activated faults result 
in a fail-silent behavior. 99.1 % is undeniably below the cov- 
erage obtained in  systems with  hardware  support for fault- 
tolerance. Nevertheless, the EDMs embedded in HADES are 
Fault manifestation 
Injected faults (iVjnj) 
Activated  Faults (Nact) 
Cval-Ctim 
Crash-NP 
Wval-Ctim-NP 
Cval- Wtim-NP 
Wval-Wtim-NP 
Crash-P 
Wval-Ctim-P 
Cval-Wtim-P 
Wval-Wtim-P 
Coverage of fail-silence 
Confidence interval 
(confidence level of 95%) 
(a) No EDM 
39025 
3152 
1839 
703 
10 
22 
1 
102 
127 
295 
53 
(58.34%) 
(22.30%) 
(0.32%) 
(0.70%) 
(0.03%) 
(3.24%) 
(4.03%) 
(9.36%) 
(1.68%) 
80.65% 
[79.49%,8 I .79%] 
(b) All EDMs 
29591 
3012 
(37.25%) 
(61.82%) 
(0.07%) 
(0%) 
(0%) 
(0.73%) 
(0.13%) 
(0%) 
(0%) 
1122 
1862 
2 
0 
0 
22 
4 
0 
0 
99.07% 
[98.80%,99.33%1 
Table 2. Fail-silence coverage 
rather efficient, since they divide the number of fail-silence 
violations by  a factor 22. 
4.2. Analysis of fail-silence violations 
This paragraph examines  in more details the fault injec- 
tions that led to fail-silence violations.  Note that due to the 
number  of  injected faults and the fail-silence coverage, the 
number of fail-silence violations  is very  small (28).  Thus, 
the confidence interval of the figures given in this paragraph 
is rather large and as a consequence all figures given in the 
paragraph should be looked at with precautions. 
Consequences  of  fail-silence  violations  on applications. 
For 26 out of 28 fail-silence violations (92 % of fail-silence 
violations),  there  are fault propagations  across  computers. 
However,  for  22  of  these  cases  (78  %  of  fail-silence  vi- 
olations),  fault  propagations  only  provoke  computer stops 
without the production of incorrect results at the application 
level. For a lot of applications, such a failure mode does not 
lead to catastrophic consequences. 
Number of errors responsible 
of fail-silence violations 
(35 %) 
IO 
13  (45 %) 
Memory region 
Run-time support code 
Run-time support data 
Run-time support stacks 
Micro-kernel code 
Micro-kernel data 
Unknown memory region 
308 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:05 UTC from IEEE Xplore.  Restrictions apply. 
(a) Percentage of first detections 
(b) Percentage of first detectlons I SJust 
Figure 3. Percentage of first detections of the EDMs 