$$ language sql strict;    
```  
```  
postgres=# select gen_id('1900-01-01', '2017-10-16') from generate_series(1,10);  
       gen_id         
--------------------  
 25614020061108330X  
 49507919010403271X  
 96764619970119860X  
 915005193407306113  
 551360192005045415  
 430005192611170108  
 299138191310237806  
 95149919670723980X  
 542053198501097403  
 482334198309182411  
(10 rows)  
```  
## 建模  
建模是指根据业务需求，设计表、函数、视图等。  
建模完成后，需要创建对象。  
## 构建测试数据  
根据业务提供的数据限定条件，构建测试数据。  
那么用户需要提供什么呢？  
用户除了提供结构，还需要提供数据的layout，这些LAYOUT用于帮助构建真实的测试数据。  
那么layout包含什么呢？实际上就包含了统计信息中要的东西。  
[《PostgreSQL 统计信息pg_statistic格式及导入导出dump_stat - 兼容Oracle》](../201710/20171030_02.md)    
```  
postgres=# \d pg_stats       
                     View "pg_catalog.pg_stats"      
         Column         |   Type   | Collation | Nullable | Default       
------------------------+----------+-----------+----------+---------      
 schemaname             | name     |           |          |   -- 对象所属的schema    
 tablename              | name     |           |          |   -- 对象名    
 attname                | name     |           |          |   -- 列名    
 inherited              | boolean  |           |          |   -- 是否为继承表的统计信息（false时表示当前表的统计信息，true时表示包含所有继承表的统计信息）    
 null_frac              | real     |           |          |   -- 该列空值比例    
 avg_width              | integer  |           |          |   -- 该列平均长度    
 n_distinct             | real     |           |          |   -- 该列唯一值个数（-1表示唯一，小于1表示占比，大于等于1表示实际的唯一值个数）    
 most_common_vals       | anyarray |           |          |   -- 该列高频词    
 most_common_freqs      | real[]   |           |          |   -- 该列高频词对应的出现频率    
 histogram_bounds       | anyarray |           |          |   -- 该列柱状图（表示隔出的每个BUCKET的记录数均等）    
 correlation            | real     |           |          |   -- 该列存储相关性（-1到1的区间），绝对值越小，存储越离散。小于0表示反向相关，大于0表示正向相关    
 most_common_elems      | anyarray |           |          |   -- 该列为多值类型（数组）时，多值元素的高频词    
 most_common_elem_freqs | real[]   |           |          |   -- 多值元素高频词的出现频率    
 elem_count_histogram   | real[]   |           |          |   -- 多值元素的柱状图中，每个区间的非空唯一元素个数    
```  
例子  
```  
create table a   -- 总共N条记录  
(  
  id int primary key,  -- 唯一值  
  c1 int,              -- 取值范围，有多少唯一值，有多少空值，相关性，有哪些高频词  
  c2 text,             -- 取值范围，有多少唯一值，有多少空值，相关性，平均长度，有哪些高频词  
  c3 timestamp         -- .......  
);  
```  
## 高吞吐构建测试数据的方法  
### 想不想体验一下？1000万行/s的构建速度。  
[《HTAP数据库 PostgreSQL 场景与性能测试之 42 - (OLTP+OLAP) unlogged table 不含索引多表批量写入》](../201711/20171107_43.md)    
[《PostgreSQL 批量导入性能 (采用dblink 异步调用)》](../201804/20180427_03.md)    
里面涉及的技术包括：  
1、继承表  
方便管理多个同类结构的表。  
2、do language  
可以写比较复杂的逻辑，例如创建一堆表。  
3、pgbench  
压测工具  
4、UDF schemaless  
通过UDF构建动态SQL，批量写入到多表。  
更多例子，参考下面的文章。  
## 参考  
[《PostgreSQL 11 preview - pgbench 变量、函数扩展 - 暨pgbench 自定义 benchmark讲解》](../201711/20171119_01.md)    
[《PostgreSQL Oracle 兼容性 之 - 数据采样与脱敏》](../201706/20170602_02.md)    
[《PostgreSQL 巧妙的数据采样方法》](../201609/20160929_01.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 43 - (OLTP+OLAP) unlogged table 含索引多表批量写入》](../201711/20171107_44.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 42 - (OLTP+OLAP) unlogged table 不含索引多表批量写入》](../201711/20171107_43.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 41 - (OLTP+OLAP) 含索引多表批量写入》](../201711/20171107_42.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 40 - (OLTP+OLAP) 不含索引多表批量写入》](../201711/20171107_41.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 39 - (OLTP+OLAP) 含索引多表单点写入》](../201711/20171107_40.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 38 - (OLTP+OLAP) 不含索引多表单点写入》](../201711/20171107_39.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 37 - (OLTP+OLAP) 含索引单表批量写入》](../201711/20171107_38.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 36 - (OLTP+OLAP) 不含索引单表批量写入》](../201711/20171107_37.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 35 - (OLTP+OLAP) 含索引单表单点写入》](../201711/20171107_36.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 34 - (OLTP+OLAP) 不含索引单表单点写入》](../201711/20171107_35.md)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")