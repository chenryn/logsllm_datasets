%H 小时（24小时时钟），'00'至'23'
%I 小时（12小时时钟），'01'至'12'
%M 分，'00'至'59'
%S 秒，'00'至'59'
%p 'AM'或'PM'
%% 就是'%'字符
向strftime()传入一个定制的格式字符串，其中包含格式化指定（以及任何需要
的斜线、冒号等），strftime()将返回一个格式化的字符串，表示datetime对象的信息。
在交互式环境中输入以下代码：
>>> oct21st = datetime.datetime(2015, 10, 21, 16, 29, 0)
>>> oct21st.strftime('%Y/%m/%d %H:%M:%S')
'2015/10/21 16:29:00'
>>> oct21st.strftime('%I:%M %p')
'04:29 PM'
>>> oct21st.strftime("%B of '%y")
"October of '15"
这里，我们有一个datetime对象，表示2015年10月21日下午4点29分，保
第15章 保持时间、计划任务和启动程序
存在oct21st中。向strftime()传入定制的格式字符串'%Y/%m/%d %H:%M:%S，返回
一个字符串，包含以斜杠分隔的 2015、10 和 21，以冒号分隔的 16、29 和 00。传
入'%I:%M% p'则返回'04:29 PM'，传入"%B of '%y"则返回"October of '15"。请注意，
strftime()不是以datetime.datetime开始。
15.4.4 将字符串转换成 datetime对象
如果有一个字符串的日期信息，如'2015/10/21 16:29:00'或'October 21, 2015'，需
要将它转换为datetime对象，就用datetime.datetime.strftime()函数。strptime()函数与
strftime()方法相反。定制的格式字符串使用相同的指令，像 strftime()一样。必须将
格式字符串传入 strptime()，这样它就知道如何解析和理解日期字符串（strptime()
函数名中p表示解析，parse）。
在交互式环境中输入以下代码：
 >>> datetime.datetime.strptime('October 21, 2015', '%B %d, %Y')
datetime.datetime(2015, 10, 21, 0, 0)
>>> datetime.datetime.strptime('2015/10/21 16:29:00', '%Y/%m/%d %H:%M:%S')
datetime.datetime(2015, 10, 21, 16, 29)
>>> datetime.datetime.strptime("October of '15", "%B of '%y")
datetime.datetime(2015, 10, 1, 0, 0)
>>> datetime.datetime.strptime("November of '63", "%B of '%y")
datetime.datetime(2063, 11, 1, 0, 0)
要从字符串'October 21, 2015'取得一个datetime对象，将'October 21, 2015'作为
第一个参数传递给strptime()，并将对应于'October 21, 2015' 的定制格式字符串作为
第二个参数。带有日期信息的字符串必须准确匹配定制的格式字符串，否则Python
将抛出ValueError异常。
15.5 回顾 Python 的时间函数
在Python中，日期和时间可能涉及好几种不同的数据类型和函数。下面回顾了
表示时间的3种不同类型的值：
 Unix纪元时间戳（time模块中使用）是一个浮点值或整型值，表示自1970年
1月1日午夜0点（UTC）以来的秒数。
 datetime对象（属于datetime模块）包含一些整型值，保存在year、month、day、
hour、minute和second等属性中。
 timedelta对象（属于datetime模块）表示的一段时间，而不是一个特定的时刻。
下面回顾了时间函数及其参数和返回值：
 time.time()函数返回一个浮点值，表示当前时刻的Unix纪元时间戳。
 time.sleep(seconds)函数让程序暂停seconds参数指定的秒数。
 datetime.datetime(year, month, day, hour, minute, second)函数返回参数指定的时
Python编程快速上手——让繁琐工作自动化
刻的datetime对象。如果没有提供hour、minute或second参数，它们默认为0。
 datetime.datetime.now()函数返回当前时刻的datetime对象。
 datetime.datetime.fromtimestamp(epoch)函数返回 epoch 时间戳参数表示的时刻
的datetime对象。
 datetime.timedelta(weeks, days, hours, minutes, seconds, milliseconds, microseconds)函
数返回一个表示一段时间的timedelta对象。该函数的关键字参数都是可选的，
不包括month或year。
 total_seconds()方法用于timedelta对象，返回timedelta对象表示的秒数。
 strftime(format)方法返回一个字符串，用 format 字符串中的定制格式来表示
datetime对象表示的时间。详细格式参见表15-1。
 datetime.datetime.strptime(time_string, format)函数返回一个datetime对象，它的
时刻由time_string指定，利用format字符串参数来解析。详细格式参见表15-1。
15.6 多线程
为了引入多线程的概念，让我们来看一个例子。假设你想安排一些代码，在一
段延迟后或在特定时间运行。可以在程序启动时添加如下代码：
import time, datetime
startTime = datetime.datetime(2029, 10, 31, 0, 0, 0)
while datetime.datetime.now() >> print('Cats', 'Dogs', 'Frogs', sep=' & ')
Cats & Dogs & Frogs
Python编程快速上手——让繁琐工作自动化
该print()调用有3个常规参数：'Cats'、 'Dogs'和'Frogs'，以及一个关键字参数：sep=
' & '。常规参数可以作为一个列表，传递给threading.Thread()中的args关键字参数。关
键字参数可以作为一个字典，传递给threading.Thread()中的kwargs关键字参数。
在交互式环境中输入以下代码：
>>> import threading
>>> threadObj = threading.Thread(target=print, args=['Cats', 'Dogs', 'Frogs'],
kwargs={'sep': ' & '})
>>> threadObj.start()
Cats & Dogs & Frogs
为了确保参数'Cats'、'Dogs'和'Frogs'传递给新线程中的print()，我们将args=['Cats',
'Dogs', 'Frogs']传入threading.Thread()。为了确保关键字参数sep=' & '传递给新线程
中的print()，我们将kwargs={'sep': '& '}传入threading.Thread()。
threadObj.start()调用将创建一个新线程来调用 print()函数，它会传入'Cats'、
'Dogs'和'Frogs'作为参数，以及' & '作为sep关键字参数。
下面创建新线程调用print()的方法是不正确的：
threadObj = threading.Thread(target=print('Cats', 'Dogs', 'Frogs', sep=' & '))
这行代码最终会调用print()函数，将它的返回值（print()的返回值总是无）作为
target关键字参数。它没有传递print()函数本身。如果要向新线程中的函数传递参数，
就使用threading.Thread()函数的args和kwargs关键字参数。
15.6.2 并发问题
可以轻松地创建多个新线程，让它们同时运行。但多线程也可能会导致所谓的
并发问题。如果这些线程同时读写变量，导致互相干扰，就会发生并发问题。并发
问题可能很难一致地重现，所以难以调试。
多线程编程本身就是一个广泛的主题，超出了本书的范围。必须记住的是：为了避
免并发问题，绝不让多个线程读取或写入相同的变量。当创建一个新的Thread对象时，
要确保其目标函数只使用该函数中的局部变量。这将避免程序中难以调试的并发问题。
注意 在http://nostarch.com/automatestuff/，有关于多线程编程的初学者教程。
15.7 项目：多线程 XKCD 下载程序
在第11章，你编写了一个程序，从XKCD网站下载所有的XKCD漫画。这是
一个单线程程序：它一次下载一幅漫画。程序运行的大部分时间，都用于建立网络
连接来开始下载，以及将下载的图像写入硬盘。如果你有宽带因特网连接，单线程
程序并没有充分利用可用的带宽。
第15章 保持时间、计划任务和启动程序
多线程程序中有一些线程在下载漫画，同时另一些线程在建立连接，或将漫画图
像文件写入硬盘。它更有效地使用Internet连接，更迅速地下载这些漫画。打开一个新
的文件编辑器窗口，并保存为multidownloadXkcd.py。你将修改这个程序，添加多线程。
经过全面修改的源代码可从http://nostarch.com/automatestuff/下载。
第 1步：修改程序以使用函数
该程序大部分是来自第 11 章的相同下载代码，所以我会跳过 Requests 和
BeautifulSoup 代码的解释。需要完成的主要变更是导入 threading 模块，并定义
downloadXkcd()函数，该函数接受开始和结束的漫画编号作为参数。
例如，调用 downloadXkcd(140，280)将循环执行下载代码，下载漫画 http://xkcd.
com/140、http://xkcd.com/141、http://xkcd.com/142等，直到http://xkcd.com/279。你
创建的每个线程都会调用downloadXkcd()，并传入不同范围的漫画进行下载。
将下面的代码添加到multidownloadXkcd.py程序中：
#! python3
# multidownloadXkcd.py - Downloads XKCD comics using multiple threads.
import requests, os, bs4, threading
 os.makedirs('xkcd', exist_ok=True) # store comics in ./xkcd
 def downloadXkcd(startComic, endComic):
 for urlNumber in range(startComic, endComic):
# Download the page.
print('Downloading page http://xkcd.com/%s...' % (urlNumber))
 res = requests.get('http://xkcd.com/%s' % (urlNumber))
res.raise_for_status()
 soup = bs4.BeautifulSoup(res.text)
# Find the URL of the comic image.
 comicElem = soup.select('#comic img')
if comicElem == []:
print('Could not find comic image.')
else:
 comicUrl = comicElem[0].get('src')
# Download the image.
print('Downloading image %s...' % (comicUrl))
 res = requests.get(comicUrl)
res.raise_for_status()
# Save the image to ./xkcd.
imageFile = open(os.path.join('xkcd', os.path.basename(comicUrl)), 'wb')
for chunk in res.iter_content(100000):
imageFile.write(chunk)
imageFile.close()
# TODO: Create and start the Thread objects.
# TODO: Wait for all threads to end.
导入需要的模块后，行创建了一个目录来保存漫画，并开始定义downloadxkcd()。
循环遍历指定范围中的所有编号，并下载每个页面。用Beautiful Soup查看每一
Python编程快速上手——让繁琐工作自动化
页的HTML，找到漫画图像。如果页面上没有的漫画图像，就打印一条消息。
否则，取得图片的URL，并下载图像。最后，将图像保存到我们创建的目录中。
第 2步：创建并启动线程
既然已经定义 downloadXkcd()，我们将创建多个线程，每个线程调用
downloadXkcd()，从 XKCD 网站下载不同范围的漫画。将下面的代码添加到
multidownloadXkcd.py中，放在downloadXkcd()函数定义之后：
#! python3
# multidownloadXkcd.py - Downloads XKCD comics using multiple threads.
--snip--