the introduced network delay and the performance impact when
TF-BIV is integrated in the cloud-based cryptographic service. The
evaluation was conducted on a Dell Optiplex 9020 PC with Intel
i7-4770 CPU (3.4GHZ) and 16GB RAM. The host runs the Linux OS
(kernel v3.13) with QEMU v1.7.1, while the guest VM is assigned
with 4 vCPUs and 4GB RAM, and the guest OS is Linux kernel
v3.13.7.
Startup: We used Bootchart [32], a tool for performance analysis
of Linux booting process, to analyze the performance overhead
introduced by TF-BIV on the startup. With Bootchart, we mea-
sured the startup time of the VM OS with TF-BIV deployed, and
compared it with that on the native host. We have performed the
measurement for 10 times. The average overhead is 1.49%, which
is mainly introduced by the additional integrity verification.
SPECINT Benchmark: SPECINT 2006, comprising of a set of per-
formance benchmarks, is used to evaluate the influence on the vir-
tualized VM. We created an S-process which issues a cryptographic
service request every 5 seconds and measured the SPECINT 2006
scores. We compared the results on three scenarios: native Linux,
with TF-BIV being active and with TF-BIV being active to monitor
S-process. As illustrated in Figure 4, the impact on the evaluated
Figure 4: SPECINT 2006 perf. overhead.
Figure 6: 99th Percentile of HTTPS latency.
HTTPS Throughput and Latency: We have integrated TF-BIV
with the cloud-based cryptographic service for process-level autho-
rization, and evaluated the performance overhead by constructing
an HTTPS service which requests the cloud-based cryptographic
service for RSA-2048 decryption. In details, the RSA-2048 decryp-
tion was deployed on a separated host and provided service through
HTTPS connections. We ran the Apache in the monitored VM,
which requests cryptographic service for HTTPS. Therefore, httpd
is the S-process in our experiment. We also used the Apache bench-
mark to evaluate the throughput and latency of HTTPS service.
For each evaluation, the client constructed 10,000 HTTPS requests
for a 4KB web page at different concurrency levels. As shown in
Figure 5, the maximum decrease in throughput is 8.3% and the
largest latency is 5.7%, which occurs at the largest concurrency
level (i.e., 128). This is because the network card emulator needs
to process more connections and packets (i.e., finding the process
corresponding to the packets, and obtaining the IP address and port
for the packets) when the concurrency level increases.
9 RELATED WORK
Various in-kernel solutions have been proposed to protect the in-
tegrity of user space programs. Integrity Measurement Architecture
(IMA) [65] and the extension PRIMA [45], deployed in the Linux
kernel, measure all binaries at load-time based on TPM, but fail to
provide the run-time integrity protection.
Hypervisor, as layer between hardware and the OS, has been
leveraged in many solutions. Patagonix [54] and HIMA [5] aim
to safeguard the guest VM, but lack flexibility, because all the
binaries running in the VM need to be protected. AppSec [59],
AppShield [19] and InkTag [36] protect both the integrity and con-
fidentiality of the sensitive applications even if the guest VM OS
is untrusted. However, they require modification to the protected
applications. Moreover, various schemes (e.g., HyperCheck [81],
HyperSentry [6]) have been proposed to protect the hypervisor
itself.
Many hardware features (e.g., Intel SGX [42], AMD SEV [48],
ARM TrustZone [3]) have been proposed to provide the isolation
for the sensitive applications [4, 8, 68]. However, these solutions [4,
8, 68] require the substantial re-engineering effort.
The adversary may hijack the control flow without injecting
or modifying the binaries [10, 11, 14, 63, 70, 77]. For these attacks,
various protections [21, 28, 38, 52, 67, 74] are proposed, which may
Figure 5: Speed of HTTPS service.
performance is less than 3.6%, which can be attributed to 1) identi-
fication and integrity verification of S-processes, and 2) capturing
and filtering the network connection in network card emulation.
Network Performance: We adopts iPerf [43], an active measure-
ment tool of network bandwidth, to evaluate the influence on the
network introduced by TF-BIV application. In the evaluation, we
used the VM with TF-BIV deployed as the client and server re-
spectively, while the other peer was a host with Intel i5-4590 CPU
(3.3GHZ) and 16GB RAM. We evaluated the overhead in the full-
duplex (i.e., Dual Testing) and half-duplex (i.e., Tradeoff Testing)
scenarios. As shown in Table 2, the bandwidth decreases by 3.81%
when the VM (monitored by TF-BIV) works as the server in the
dual testing. The reason is that TF-BIV needs to process more con-
nections when the VM works as the server and needs to filter more
packets in the dual testing as both the client and server send packets.
Table 2: Bandwidth evaluation.
Testing Mode
Native
C 920.67MB/s
Dual
S
632.11MB/s
Testing
Tradeoff C 819.78MB/s
1089MB/s
Testing
S
TF-BIV
894.00MB/s
608.00MB/s
810.56MB/s
1086MB/s
C: VM with TF-BIV as the client, S: VM with TF-BIV as the server.
0102030405060Normalized OverheadNativeTF-BIVTF-BIV with cryptographic service02284566849121140136815961248163264128Completed Request per SecondNumber of Concurrenct HTTPS RequestsNativeTF-BIV with cryptographic service0200400600800100012001400124816326412899%Percentile of Latency (ms)Number of Concurrent HTTPS RequestsNativeTF-BIV with cryptographic servicebe integrated with TF-BIV. Heisenbyte [74] utilizes Intel EPT for
garbling the code right after it is read, to prevent code reuse attacks.
PITTYAPT [28] uses the Intel PT [42] to enforce path-sensitive CFI.
KVM-PT [67] extends PITTYAPT to the virtualized environment.
µCFI [38] guarantees only one valid target for each invocation of
an indirect control-flow transfer based on the points-to analysis
on control data with the collected constraining data, to reduce the
illegal jumps possibility.
Data-oriented attack manipulates the target data directly [17, 37],
or constructs malicious sequences of instructions by tampering with
multiple chosen data [39, 44], which alters the program’s benign
behavior without being detected or prevented by the mechanisms
of CFI. Various data-oriented attacks have been proposed for the
real-world software, such as Chrome [46, 64], Linux Kernel [26],
ProFTPd [39] and Nginx [56]. As systematically analyzed in [18],
the generic memory corruption defenses [27, 49, 57, 71], and the
special defenses [12, 16, 26, 58, 66, 72] may be used to construct the
three-level defense for the general/dedicated data-oriented attacks
by avoiding exploitation of memory errors, increasing the difficulty
for guessing memory layout or preventing the use of corrupted
data. These schemes may be integrated with TF-BIV, to strengthen
sensitive applications.
10 CONCLUSION
In this paper, we provide TF-BIV, a binary integrity verification
scheme for the cloud environment, which achieves isolation, trans-
parency, TOCTTOU consistency and fine-grained verification si-
multaneously. TF-BIV leverages hardware virtualization to achieve
transparent and fine-grained verification, and adopts the semantic
information obtained through VMI to accelerate the identification
of S-process and integrity verification. TF-BIV registers VM exit
events based on the hardware features (i.e., CR3-load exit, MTF,
and EPT volition) to transparently capture the creation of process,
identify all the dependent code of S-processes and continuously
perform the integrity verification for S-processes. Moreover, TF-BIV
can be easily integrated with real-world applications that need pro-
tection. To demonstrate this, We integrate TF-BIV with a real open
source cloud-based cryptographic service. The evaluation demon-
strates that the performance overhead introduced by TF-BIV is
modest – we observed less than 3.6% overhead in CPU benchmark-
ing, about 3.81% network overhead, and about 8.3% degradation of
the throughput in cloud-based cryptographic service.
ACKNOWLEDGMENT
This work is supported partially by 973 Program of China (Grant
No. 2014CB340603), Informatization Project of Chinese Academy of
Sciences (Grant No. XXH13507-01), Cyber Security Program of Na-
tional Key RD Plan of China (Grant No. 2017YFB0802100), National
Natural Science Foundation of China (Grant No. 61772518), National
Science Foundation (Grant CNS-1422206 and DGE-1565570), and
National Security Agency (NSA) Science of Security (SoS) initiative.
REFERENCES
[1] Amazon. 2018. AMAZON AWS CloudHSM. Retrieved May 27, 2019 from https:
[2] Amazon. 2018. AMAZON AWS Key Management Service KMS. Retrieved May 27,
//amazonaws-china.com/cloudhsm/
2019 from https://amazonaws-china.com/kms/
[3] ARM 2009. ARM security technology: Building a secure system using TrustZone
technology. ARM.
[4] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, André Martin,
Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’Keeffe, Mark Still-
well, David Goltzsche, David M. Eyers, Rüdiger Kapitza, Peter R. Pietzuch, and
Christof Fetzer. 2016. SCONE: Secure Linux Containers with Intel SGX. In 12th
USENIX Symposium on Operating Systems Design and Implementation, OSDI 2016,
Savannah, GA, USA, November 2-4, 2016. 689–703.
[5] Ahmed M. Azab, Peng Ning, Emre Can Sezer, and Xiaolan Zhang. 2009. HIMA:
A Hypervisor-Based Integrity Measurement Agent. In Twenty-Fifth Annual Com-
puter Security Applications Conference, ACSAC 2009, Honolulu, Hawaii, USA, 7-11
December 2009. 461–470.
[6] Ahmed M. Azab, Peng Ning, Zhi Wang, Xuxian Jiang, Xiaolan Zhang, and
Nathan C. Skalsky. 2010. HyperSentry: enabling stealthy in-context measurement
of hypervisor integrity. In Proceedings of the 17th ACM Conference on Computer
and Communications Security, CCS 2010, Chicago, Illinois, USA, October 4-8, 2010.
38–49.
[7] Sina Bahram, Xuxian Jiang, Zhi Wang, Mike Grace, Jinku Li, Deepa Srinivasan,
Junghwan Rhee, and Dongyan Xu. 2010. DKSM: Subverting Virtual Machine
Introspection for Fun and Profit. In 29th IEEE Symposium on Reliable Distributed
Systems (SRDS 2010), New Delhi, Punjab, India, October 31 - November 3, 2010.
82–91.
[8] Andrew Baumann, Marcus Peinado, and Galen C. Hunt. 2015. Shielding Appli-
cations from an Untrusted Cloud with Haven. ACM Trans. Comput. Syst. 33, 3
(2015), 8:1–8:26.
[9] Sebastian Biedermann, Stefan Katzenbeisser, and Jakub Szefer. 2014. Leveraging
Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Ap-
plications. In 6th USENIX Workshop on Hot Topics in Cloud Computing, HotCloud
’14, Philadelphia, PA, USA, June 17-18, 2014.
[10] Bruno Bierbaumer, Julian Kirsch, Thomas Kittel, Aurélien Francillon, and Aposto-
lis Zarras. 2018. Smashing the Stack Protector for Fun and Profit. In ICT Systems
Security and Privacy Protection - 33rd IFIP TC 11 International Conference, SEC
2018, Held at the 24th IFIP World Computer Congress, WCC 2018, Poznan, Poland,
September 18-20, 2018, Proceedings. 293–306.
[11] Tyler K. Bletsch, Xuxian Jiang, Vincent W. Freeh, and Zhenkai Liang. 2011. Jump-
oriented programming: a new class of code-reuse attack. In Proceedings of the
6th ACM Symposium on Information, Computer and Communications Security,
ASIACCS 2011, Hong Kong, China, March 22-24, 2011. 30–40.
[12] Miguel Castro, Manuel Costa, and Tim Harris. 2006. Securing Software by
Enforcing Data-flow Integrity. In 7th Symposium on Operating Systems Design
and Implementation (OSDI ’06), November 6-8, Seattle, WA, USA. 147–160.
[13] Rahul Chatterjee, Joseph Bonneau, Ari Juels, and Thomas Ristenpart. 2015.
Cracking-Resistant Password Vaults Using Natural Language Encoders. In 2015
IEEE Symposium on Security and Privacy, SP 2015, San Jose, CA, USA, May 17-21,
2015. 481–498.
[14] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi,
Hovav Shacham, and Marcel Winandy. 2010. Return-oriented programming
without returns. In Proceedings of the 17th ACM Conference on Computer and
Communications Security, CCS 2010, Chicago, Illinois, USA, October 4-8, 2010.
559–572.
[15] Ping Chen, Dongyan Xu, and Bing Mao. 2012. CloudER: a framework for au-
tomatic software vulnerability location and patching in the cloud. In 7th ACM
Symposium on Information, Compuer and Communications Security, ASIACCS ’12,
Seoul, Korea, May 2-4, 2012. 50.
[16] Quan Chen, Ahmed M. Azab, Guruprasad Ganesh, and Peng Ning. 2017.
PrivWatcher: Non-bypassable Monitoring and Protection of Process Creden-
tials from Memory Corruption Attacks. In Proceedings of the 2017 ACM on Asia
Conference on Computer and Communications Security, AsiaCCS 2017, Abu Dhabi,
United Arab Emirates, April 2-6, 2017. 167–178.
[17] Shuo Chen, Jun Xu, and Emre Can Sezer. 2005. Non-Control-Data Attacks Are
Realistic Threats. In Proceedings of the 14th USENIX Security Symposium, Baltimore,
MD, USA, July 31 - August 5, 2005.
[18] Long Cheng, Hans Liljestrand, Thomas Nyman, Yu Tsung Lee, Danfeng Yao,
Trent Jaeger, and N. Asokan. 2019. Exploitation Techniques and Defenses for
Data-Oriented Attacks. CoRR (2019).
[19] Yueqiang Cheng, Xuhua Ding, and Robert H. Deng. 2015. Efficient Virtualization-
Based Application Protection Against Untrusted Operating System. In Proceedings
of the 10th ACM Symposium on Information, Computer and Communications
Security, ASIA CCS ’15, Singapore, April 14-17, 2015. 345–356.
[20] Alibaba Cloud. 2019. Aliyun cryption service. Retrieved May 27, 2019 from
https://www.aliyun.com/product/kms
[21] Crispan Cowan. 1998. StackGuard: Automatic Adaptive Detection and Prevention
of Buffer-Overflow Attacks. In Proceedings of the 7th USENIX Security Symposium,
San Antonio, TX, USA, January 26-29, 1998.
[22] Crispin Cowan, Matt Barringer, Steve Beattie, Greg Kroah-Hartman, Michael
Frantzen, and Jamie Lokier. 2001. FormatGuard: Automatic Protection From
printf Format String Vulnerabilities. In 10th USENIX Security Symposium, August
13-17, 2001, Washington, D.C., USA.
[24] CVE20190247
2019.
Common Vulnerabilities