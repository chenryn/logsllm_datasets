 * Maximum size of a btree index entry, including its tuple header.  
 *  
 * We actually need to be able to fit three items on every page,  
 * so restrict any one item to 1/3 the per-page available space.  
 */  
#define BTMaxItemSize(page) \  
        MAXALIGN_DOWN((PageGetPageSize(page) - \  
                                   MAXALIGN(SizeOfPageHeaderData + 3*sizeof(ItemIdData)) - \  
                                   MAXALIGN(sizeof(BTPageOpaqueData))) / 3)  
```  
如何查看类型的默认存储格式？  
```  
digoal=> select typname,typstorage from pg_type order by typname;  
p : plain  
m : main  
e : external  
x : extended  
```  
如何修改类型的存储格式？  
```  
alter table tbl_article alter column {$column_name} set storage { PLAIN | MAIN | EXTERNAL | EXTENDED } ;  
```  
## TOAST表的好处  
1\. UPDATE一个普通表时，当该表的TOAST表存储的数据没有修改时，TOAST表不需要更新。  
2\. 由于TOAST在物理存储上和普通表分开，所以当SELECT时没有查询被TOAST的列数据时，不需要把这些TOAST的PAGE加载到内存，从而加快了检索速度并且节约了使用空间。  
3\. 在排序时，由于TOAST和普通表存储分开，当针对非TOAST字段排序时大大提高了排序速度。  
使用TOAST存储格式注意事项：  
1\. 当变长字段上需要使用索引时，权衡CPU和存储的开销，考虑是否需要压缩或非压缩存储。（压缩节约磁盘空间，但是带来CPU的开销）  
2\. 对于经常要查询或UPDATE的变长字段，如果字段长度不是太大，可以考虑使用MAIN存储。  
3\. 在超长字段，或者将来会插入超长值的字段上建索引的话需要注意，因为索引最大不能超过三分之一的PAGE，所以超长字段上可能建索引不成功，或者有索引的情况下，超长字段插入值将不成功。解决办法一般可以使用MD5值来建，当然看你的需求了。  
## 小结  
1\. 哪些tuple会触发TOAST？  
当行的长度超过TOAST_TUPLE_THRESHOLD时，会调用toast_insert_or_update，即触发TOAST。(TOAST_TUPLE_THRESHOLD的计算方法参考本文末尾)  
见源码：  
src/backend/access/heap/heapam.c  
```  
/*  
 * Subroutine for heap_insert(). Prepares a tuple for insertion. This sets the  
 * tuple header fields, assigns an OID, and toasts the tuple if necessary.  
 * Returns a toasted version of the tuple if it was toasted, or the original  
 * tuple if not. Note that in any case, the header fields are also set in  
 * the original tuple.  
 */  
static HeapTuple  
heap_prepare_insert(Relation relation, HeapTuple tup, TransactionId xid,  
                                        CommandId cid, int options)  
{  
....  
        else if (HeapTupleHasExternal(tup) || tup->t_len > TOAST_TUPLE_THRESHOLD)  
                return toast_insert_or_update(relation, tup, NULL, options);    
....  
}  
...........................................  
HTSU_Result  
heap_update(Relation relation, ItemPointer otid, HeapTuple newtup,  
                        CommandId cid, Snapshot crosscheck, bool wait,  
                        HeapUpdateFailureData *hufd, LockTupleMode *lockmode)  
{  
......  
                need_toast = (HeapTupleHasExternal(&oldtup) ||  
                                          HeapTupleHasExternal(newtup) ||  
                                          newtup->t_len > TOAST_TUPLE_THRESHOLD);  
......  
}  
```  
2\. 哪些字段的内容会存储到TOAST，生成TOAST的规则。  
这个其实就是toast_insert_or_update函数的处理逻辑：  
src/backend/access/heap/tuptoaster.c  
```  
        /* ----------  
         * Compress and/or save external until data fits into target length  
         *  
         *      1: Inline compress attributes with attstorage 'x', and store very  
         *         large attributes with attstorage 'x' or 'e' external immediately  
         *      2: Store attributes with attstorage 'x' or 'e' external  
         *      3: Inline compress attributes with attstorage 'm'  
         *      4: Store attributes with attstorage 'm' external  
         * ----------  
         */  
        /* compute header overhead --- this should match heap_form_tuple() */  
        hoff = offsetof(HeapTupleHeaderData, t_bits);  
        if (has_nulls)  
                hoff += BITMAPLEN(numAttrs);  
        if (newtup->t_data->t_infomask & HEAP_HASOID)  
                hoff += sizeof(Oid);  
        hoff = MAXALIGN(hoff);  
        /* now convert to a limit on the tuple data size */  
        maxDataLen = TOAST_TUPLE_TARGET - hoff;  
```  
第一步，依字段顺序压缩存储属性为x(extended)的字段直到TUPLE长度maxDataLen，则直接将该字段切到TOAST。  
（如果循环结束前TUPLE长度maxDataLen，依字段顺序将属性为x,e还未切入TOAST的字段切入TOAST直到TUPLE长度maxDataLen，压缩属性为m(main)的字段。  
（如果循环结束前TUPLE长度maxDataLen，依字段顺序将属性为m(main)的字段切入TOAST直到TUPLE长度<=maxDataLen。  
（如果循环结束前TUPLE长度<=maxDataLen，则有可能某些属性为m的字段依旧保留在HEAP TUPLE中，跳出循环）  
3\. 字段存储到TOAST后，在HEAP TUPLE中存储什么，如何指向TOAST？  
切入TOAST的字段在HEAP TUPLE中会存储一个类似指针的结构，结构如下：  
```  
struct varatt_external  
{  
    int32        va_rawsize;        /* Original data size (includes header) */  
    int32        va_extsize;        /* External saved size (doesn't) */  
    Oid            va_valueid;        /* Unique ID of value within TOAST table */  
    Oid            va_toastrelid;    /* RelID of TOAST table containing it */  
};  
```  
本文使用到的函数：  
```  
                                   List of functions  
   Schema   |          Name          | Result data type | Argument data types |  Type    
------------+------------------------+------------------+---------------------+--------  
 pg_catalog | pg_column_size         | integer          | "any"               | normal  
 pg_catalog | pg_database_size       | bigint           | name                | normal  
 pg_catalog | pg_database_size       | bigint           | oid                 | normal  
 pg_catalog | pg_indexes_size        | bigint           | regclass            | normal  
 pg_catalog | pg_relation_size       | bigint           | regclass            | normal  
 pg_catalog | pg_relation_size       | bigint           | regclass, text      | normal  
 pg_catalog | pg_size_pretty         | text             | bigint              | normal  
 pg_catalog | pg_table_size          | bigint           | regclass            | normal  
 pg_catalog | pg_tablespace_size     | bigint           | name                | normal  
 pg_catalog | pg_tablespace_size     | bigint           | oid                 | normal  
 pg_catalog | pg_total_relation_size | bigint           | regclass            | normal  
(11 rows)  
```  
## 参考  
1\. postgres.h  
```  
/*  
 * struct varatt_external is a "TOAST pointer", that is, the information  
 * needed to fetch a stored-out-of-line Datum.    The data is compressed  
 * if and only if va_extsize < va_rawsize - VARHDRSZ.  This struct must not  
 * contain any padding, because we sometimes compare pointers using memcmp.  
 *  
 * Note that this information is stored unaligned within actual tuples, so  
 * you need to memcpy from the tuple into a local struct variable before  
 * you can look at these fields!  (The reason we use memcmp is to avoid  
 * having to do that just to detect equality of two TOAST pointers...)  
 */  
struct varatt_external  
{  
    int32        va_rawsize;        /* Original data size (includes header) */  
    int32        va_extsize;        /* External saved size (doesn't) */  
    Oid            va_valueid;        /* Unique ID of value within TOAST table */  
    Oid            va_toastrelid;    /* RelID of TOAST table containing it */  
};  
/*  
 * These structs describe the header of a varlena object that may have been  
 * TOASTed.  Generally, don't reference these structs directly, but use the  
 * macros below.  
 *  
 * We use separate structs for the aligned and unaligned cases because the  
 * compiler might otherwise think it could generate code that assumes  
 * alignment while touching fields of a 1-byte-header varlena.  
 */  
typedef union  
{  
    struct                        /* Normal varlena (4-byte length) */  
    {  
        uint32        va_header;  
        char        va_data[1];  
    }            va_4byte;  
    struct                        /* Compressed-in-line format */  
    {  
        uint32        va_header;  
        uint32        va_rawsize; /* Original data size (excludes header) */  
        char        va_data[1]; /* Compressed data */  
    }            va_compressed;  
} varattrib_4b;  
typedef struct  
{  
    uint8        va_header;  
    char        va_data[1];        /* Data begins here */  
} varattrib_1b;  
typedef struct  
{  
    uint8        va_header;        /* Always 0x80 or 0x01 */  
    uint8        va_len_1be;        /* Physical length of datum */  
    char        va_data[1];        /* Data (for now always a TOAST pointer) */  
} varattrib_1b_e;  
/*  
 * Bit layouts for varlena headers on big-endian machines:  
 *  
 * 00xxxxxx 4-byte length word, aligned, uncompressed data (up to 1G)  
 * 01xxxxxx 4-byte length word, aligned, *compressed* data (up to 1G)  
 * 10000000 1-byte length word, unaligned, TOAST pointer  
 * 1xxxxxxx 1-byte length word, unaligned, uncompressed data (up to 126b)  
 *  
 * Bit layouts for varlena headers on little-endian machines:  
 *  
 * xxxxxx00 4-byte length word, aligned, uncompressed data (up to 1G)  
 * xxxxxx10 4-byte length word, aligned, *compressed* data (up to 1G)  
 * 00000001 1-byte length word, unaligned, TOAST pointer  
 * xxxxxxx1 1-byte length word, unaligned, uncompressed data (up to 126b)  
 *  
 * The "xxx" bits are the length field (which includes itself in all cases).  
 * In the big-endian case we mask to extract the length, in the little-endian  
 * case we shift.  Note that in both cases the flag bits are in the physically  
 * first byte.    Also, it is not possible for a 1-byte length word to be zero;  
 * this lets us disambiguate alignment padding bytes from the start of an  
 * unaligned datum.  (We now *require* pad bytes to be filled with zero!)  
 */  
```  
2\. tuptoaster.h  