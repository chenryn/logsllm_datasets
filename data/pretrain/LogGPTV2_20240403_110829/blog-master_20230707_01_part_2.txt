- https://postgresql-anonymizer.readthedocs.io/en/latest/  
- [《PostgreSQL 敏感信息遮掩插件 anon (Anonymizer) - security label provider - anon》](../201911/20191115_03.md)    
- [《Anonymization & Data Masking for PostgreSQL - 自动脱敏控制 - oracle data vault - postgresql-anonymizer》](../201908/20190817_03.md)    
`git clone --depth 1 https://gitlab.com/dalibo/postgresql_anonymizer/ ` 
security label的实现逻辑如下:    
![pic](20230707_01_pic_001.jpg)  
security label的实现核心是通过钩子加入一些执行代码, 例如将原始值进行修改, 限制权限等.     
以anon插件为例.  
使用`_PG_init`注册了几个钩子函数, 在parser analyze产生raw query tree后植入代码逻辑. 在ProcessUtility (也就是ddl, dcl等语句)后执行代码逻辑.   
```  
/*  
 * Register the extension and declare its GUC variables  
 */  
void  
_PG_init(void)  
{  
...  
  /* Install the hooks */  
  prev_post_parse_analyze_hook = post_parse_analyze_hook;  
  post_parse_analyze_hook = pa_post_parse_analyze_hook;  
  prev_ProcessUtility_hook = ProcessUtility_hook;  
  ProcessUtility_hook = pa_ProcessUtility_hook;  
/* Hook for plugins to get control at end of parse analysis */  
typedef void (*post_parse_analyze_hook_type) (ParseState *pstate,  
                                                                                          Query *query,  
                                                                                          JumbleState *jstate);  
/* Hook for plugins to get control in ProcessUtility() */  
typedef void (*ProcessUtility_hook_type) (PlannedStmt *pstmt,  
                                                                                  const char *queryString,  
                                                                                  bool readOnlyTree,  
                                                                                  ProcessUtilityContext context,  
                                                                                  ParamListInfo params,  
                                                                                  QueryEnvironment *queryEnv,  
                                                                                  DestReceiver *dest, QueryCompletion *qc);  
```  
anon pa_post_parse_analyze_hook钩子的逻辑:    
```  
/*  
 * Post-parse-analysis hook: mask query  
 * https://github.com/taminomara/psql-hooks/blob/master/Detailed.md#post_parse_analyze_hook  
 */  
static void  
#if PG_VERSION_NUM >= 140000  
pa_post_parse_analyze_hook(ParseState *pstate, Query *query, JumbleState *jstate)  
#else  
pa_post_parse_analyze_hook(ParseState *pstate, Query *query)  
#endif  
{  
  char * policy = NULL;  
  if (prev_post_parse_analyze_hook)  
    #if PG_VERSION_NUM >= 140000  
    prev_post_parse_analyze_hook(pstate, query, jstate);  
    #else  
    prev_post_parse_analyze_hook(pstate, query);  
    #endif  
  if (!IsTransactionState()) return;  
  if (!guc_anon_transparent_dynamic_masking) return;  
  policy = pa_get_masking_policy(GetUserId());  
  if (policy)  
    pa_rewrite(query,policy);  
  return;  
}  
```  
PostgreSQL 中post_parse_analyze_hook 钩子的植入部位:    
```  
/*  
 * parse_analyze_fixedparams  
 *              Analyze a raw parse tree and transform it to Query form.  
 *  
 * Optionally, information about $n parameter types can be supplied.  
 * References to $n indexes not defined by paramTypes[] are disallowed.  
 *  
 * The result is a Query node.  Optimizable statements require considerable  
 * transformation, while utility-type statements are simply hung off  
 * a dummy CMD_UTILITY Query node.  
 */  
Query *  
parse_analyze_fixedparams(RawStmt *parseTree, const char *sourceText,  
                                                  const Oid *paramTypes, int numParams,  
                                                  QueryEnvironment *queryEnv)  
{  
.......  
        if (post_parse_analyze_hook)  
                (*post_parse_analyze_hook) (pstate, query, jstate);  
......  
}  
```  
## security label provider: sepgsql  
https://www.postgresql.org/docs/16/sepgsql.html  
因为sepgsql这个provider用到了selinux, 所以我这里摘录了selinux的一篇比较通熟易懂的文章: https://zhuanlan.zhihu.com/p/165974960  
### 一、前言  
安全增强型 Linux（Security-Enhanced Linux）简称 SELinux，它是一个 Linux 内核模块，也是 Linux 的一个安全子系统。  
SELinux 主要由美国国家安全局开发。2.6 及以上版本的 Linux 内核都已经集成了 SELinux 模块。  
SELinux 的结构及配置非常复杂，而且有大量概念性的东西，要学精难度较大。很多 Linux 系统管理员嫌麻烦都把 SELinux 关闭了。  
如果可以熟练掌握 SELinux 并正确运用，我觉得整个系统基本上可以到达"坚不可摧"的地步了（请永远记住没有绝对的安全）。  
掌握 SELinux 的基本概念以及简单的配置方法是每个 Linux 系统管理员的必修课。  
本文均在 CentOS 7.4.1708 系统中操作。  
本文纯属个人学习经验分享交流，出错再所难免，仅供参考！如果发现错误的地方，可以的话麻烦指点下，特别感谢！  
### 二、SELinux 的作用及权限管理机制  
2.1 SELinux 的作用  
SELinux 主要作用就是最大限度地减小系统中服务进程可访问的资源（最小权限原则）。  
设想一下，如果一个以 root 身份运行的网络服务存在 0day 漏洞，黑客就可以利用这个漏洞，以 root 的身份在您的服务器上为所欲为了。是不是很可怕？  
SELinux 就是来解决这个问题的。  
2.2 DAC  
在没有使用 SELinux 的操作系统中，决定一个资源是否能被访问的因素是：某个资源是否拥有对应用户的权限（读、写、执行）。  
只要访问这个资源的进程符合以上的条件就可以被访问。  
而最致命问题是，root 用户不受任何管制，系统上任何资源都可以无限制地访问。  
这种权限管理机制的主体是用户，也称为自主访问控制（DAC）。  
2.3 MAC  
在使用了 SELinux 的操作系统中，决定一个资源是否能被访问的因素除了上述因素之外，还需要判断每一类进程是否拥有对某一类资源的访问权限。  
这样一来，即使进程是以 root 身份运行的，也需要判断这个进程的类型以及允许访问的资源类型才能决定是否允许访问某个资源。进程的活动空间也可以被压缩到最小。  
即使是以 root 身份运行的服务进程，一般也只能访问到它所需要的资源。即使程序出了漏洞，影响范围也只有在其允许访问的资源范围内。安全性大大增加。  
这种权限管理机制的主体是进程，也称为强制访问控制（MAC）。  
而 MAC 又细分为了两种方式，一种叫类别安全（MCS）模式，另一种叫多级安全（MLS）模式。  
下文中的操作均为 MCS 模式。  
2.4 DAC 和 MAC 的对比  
在 DAC 模式下，只要相应目录有相应用户的权限，就可以被访问。而在 MAC 模式下，还要受进程允许访问目录范围的限制。  
### 三、SELinux 基本概念  
3.1 主体（Subject）  
可以完全等同于进程。  
注：为了方便理解，如无特别说明，以下均把进程视为主体。  
3.2 对象（Object）  
被主体访问的资源。可以是文件、目录、端口、设备等。  
注：为了方便理解，如无特别说明，以下均把文件或者目录视为对象。  
3.3 政策和规则（Policy & Rule）  
系统中通常有大量的文件和进程，为了节省时间和开销，通常我们只是选择性地对某些进程进行管制。  
而哪些进程需要管制、要怎么管制是由政策决定的。  
一套政策里面有多个规则。部分规则可以按照需求启用或禁用（以下把该类型的规则称为布尔型规则）。  
规则是模块化、可扩展的。在安装新的应用程序时，应用程序可通过添加新的模块来添加规则。用户也可以手动地增减规则。  
在 CentOS 7 系统中，有三套政策，分别是：  
1. targeted：对大部分网络服务进程进行管制。这是系统默认使用的政策（下文均使用此政策）。  
2. minimum：以 targeted 为基础，仅对选定的网络服务进程进行管制。一般不用。  
3. mls：多级安全保护。对所有的进程进行管制。这是最严格的政策，配置难度非常大。一般不用，除非对安全性有极高的要求。  
政策可以在 `/etc/selinux/config` 中设定。  
3.4 安全上下文（Security Context）  
安全上下文是 SELinux 的核心。  
安全上下文我自己把它分为“进程安全上下文”和“文件安全上下文”。  
一个“进程安全上下文”一般对应多个“文件安全上下文”。  
只有两者的安全上下文对应上了，进程才能访问文件。它们的对应关系由政策中的规则决定。  
文件安全上下文由文件创建的位置和创建文件的进程所决定。而且系统有一套默认值，用户也可以对默认值进行设定。  
需要注意的是，单纯的移动文件操作并不会改变文件的安全上下文。  
安全上下文的结构及含义  
安全上下文有四个字段，分别用冒号隔开。形如：`system_u:object_r:admin_home_t:s0`。  
3.5 SELinux 的工作模式  
SELinux 有三种工作模式，分别是：  
1. enforcing：强制模式。违反 SELinux 规则的行为将被阻止并记录到日志中。  