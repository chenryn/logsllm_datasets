```
(注：Host 头一般用来区分1 个 ip 上配置了两个 virtual host name 的情形）  
如果 10.12.198.196 上的 nginx.conf 配置了代理转发如 proxy_pass，则会将此请求包转发给真正 www.qq.com 的服务器。接着从其获取请求返回内容，再转发给 客户端。此时 www.qq.com 的服务器会认为请求来自于 10.12.198.196，当然也可以在 代理中设置请求头 `proxy_set_header  X-Real-IP  $remote_addr;`  这样 qq 服务器通过请求头可以知道真正的请求来自哪里。此时 qq 服务器配置文件可能需要改下 LogFormat（X-Real-IP），才能在 log 文件中打印真正的客户端 ip。  
正向代理 是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端，客户端必须要进行一些特别的设置才能使用正向代理。  
注意：nginx 作为 web server 时当然是可以处理 ssl 的，但作为 正向proxy 则是不行的。因为 nginx 不支持 CONNECT，收到客户端发来的 "CONNECT /:443 HTTP/1.1" 后会报一个包含 `client sent invalid request while reading client request line` 的错误。因为 CONNECT 是正向代理的特性，据说也没有计划支持。  
nginx 当正向代理的时候，通过代理访问https的网站会失败，而失败的原因是客户端同nginx代理服务器之间建立连接失败，并非nginx不能将https的请求转发出去。因此要解决的问题就是客户端如何同nginx代理服务器之间建立起连接，有了这个思路之后，就可以很简单的解决问题。我们可以配置两个SERVER 端口节点，一个处理HTTP转发，另一个处理HTTPS转发，而客户端都通过HTTP来访问代理，通过访问代理不同的端口，来区分HTTP和HTTPS请求。  
我们可以自己用 ngx-lua 实现一个正向代理服务器，在 lua 代码中获取原始请求（可以修改一些参数/headers）并转发，假设目标站点有waf，绕过率只有10万分之一，那么可以让lua 逻辑中判断返回码是否是某个特定返回码，如果是则重放请求，直到返回码非特定响应码，这时候才把返回页面给到请求方，这样用浏览器挂这个ngx-lua 代码就能自动实现暴力绕waf。为了使ngx-lua 代理支持https，客户端可以将https 请求当作http 请求来发送，但附带一个头task_scheme：https，这样ngx-lua 在代码逻辑中取到scheme 为 task_scheme，即可知道这是https 请求。  
对于 nat 作用 的路由器来说，原始数据包的目的ip 不是路由器，但它重写了数据包的源ip 为路由器的出口ip，在目标主机回包后重写目的ip 为 路由器下联的内网机器ip。注意除非NAT路由器管理者预先设置了规则，否则从外部网络主动建立的连接，送来的数据包将不能到达正确的目的内网ip地址。  
对于代理机器来说，原始数据包的目的ip 就是代理机器，不过因为它的配置文件设置了转发规则，故可以重新发起源ip 为自身，目的ip 为 dns 解析到的目标主机ip的请求包（这就是为什么客户端配置了代理，则客户端上配置的host文件不生效的原因，因为最终请求的目的主机ip 由代理机器经过dns解析获得；当然如果是本地的代理比如127.0.0.1:8080，还是会先看本地host文件而生效）。收到目标主机回包后，代理机器重新发起源ip 为自身，目标ip 为配置了代理的请求客户端ip的请求包。  
`curl -i "http://www.qq.com/index.html" -x "59.37.96.63:80"` 在 63 机器没有配置代理转发规则时，是一个简便设置访问域名www.qq.com 具体某个host的命令。  
另一方面，waf 在拦截恶意扫描请求时，获取到的 ip（通过解开四层tcp/ip包获取到src ip） 可能是代理机器的ip 或者 路由器出口网关的 ip，特别是网关ip，如果直接进行打击，可能会伤及无辜，即同在一个局域网出口下联的机器都会被限制访问。  
### nginx 反向代理服务器的配置：
```
upstream test.net {
ip_hash; # 默认为轮询，还有 ip_hash, fair, url_hash 等策略
# 注：当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。
server 192.168.10.13:80;
server 192.168.10.14:80  down;
server 192.168.10.15:8009  max_fails=3  fail_timeout=20s;
server 192.168.10.16:8080;
}
server {
  location / {
    proxy_pass  http://test.net;
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
  }
}
```
`X-Forwarded-For: client1, proxy1, proxy2`  
其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边(client1)是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3(proxy3可能是请求的终点)  
$http_x_forwarded_for 是Nginx上一跳的请求中的X-Forwarded-For 内容，$remote_addr 是Nginx 上一跳的ip， 
而 $proxy_add_x_forwarded_for=$http_x_forwarded_for,$remote_addr  
假设现在有两个代理，第一个代理发出的请求中 上一跳 X-Forwarded-For 为空，而$remote_addr 为 client_ip ，故 X-Forwarded-For 头为 client_ip；  
第二个代理发出的请求中，X-Forwarded-For 为 client_ip，而$remote_addr 为proxy1，故 X-Forwarded-For : client1, proxy1  
如果用户在发起请求时设置了 X-Forwarded-For 头的值，则第一跳时X-Forwarded-For 不为空，即 现在情况是 X-Forwarded-For : user-set, client1, proxy1  
故后端逻辑取真实用户ip 时 需要看经过多少层代理，只经过一层取从右到左倒数第一个ip，经过两层则是倒数第二个。  
我们这里只测试两层，实际链路为：  
10.100.11.25(client)->10.200.21.34(Proxy)->10.200.21.33(Proxy)->10.200.21.32(Web Server)  
Curl 命令：  
curl http://10.200.21.34:88/test.php -H 'X-Forwarded-For: unkonw,  1.1.1.1' -H 'X-Real-IP: 2.2.2.2'  
两层代理的情况下结果为：  
[HTTP_X_FORWARDED_FOR] => unkonw,  1.1.1.1, 10.100.11.25, 10.200.21.34  
[REMOTE_ADDR] => 10.200.21.33 // php $_SERVER['REMOTE_ADDR']  ||  apache中的cgi中getenv['REMOTE_ADDR']  
[HTTP_X_REAL_IP] => 10.200.21.34  
upstream是Nginx的HTTP Upstream 模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。在上面的设定中，通过upstream指令指定了一个负载均衡器的名称test.net。这个名称可以任意指定，在后面需要用到的地方直接调用即可。  
假设现在我们访问的是 192.168.10.12:80，实际上它会将http请求包转发给其他可以获取内容的某台机器上。  
反向代理正好相反，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。
注意：nginx 作为代理转发数据包时可能会对请求头做一些修改，比如 修改 Host，增加 proxy_set_header 增加的一些头，忽略值为空串的头，忽略下划线 '&#95;' 开头的头，`Connection: close` 。   
### 识别代理服务器
识别一个IP是不是代理IP，常见的是如下四种：  
1. 反向探测技术：扫描IP是不是开通了80、8080等代理服务器经常开通的端口，显然一个普通的用户IP不太可能开通如上的端口。
2. HTTP头部的X_Forwarded_For：开通了HTTP代理的IP可以通过此法来识别是不是代理IP；如果带有XFF信息，该IP是代理IP无疑。
3. Keep-alive报文：如果带有Proxy-Connection的Keep-alive报文，该IP毫无疑问是代理IP。
4. 查看IP上端口：如果一个IP有的端口大于10000，那么该IP大多也存在问题，普通的家庭IP开这么大的端口几乎是不可能的。
## Reference
[C++ Web Programming](https://www.tutorialspoint.com/cplusplus/cpp_web_programming.htm)