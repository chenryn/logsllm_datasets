# 浅析MT19937伪随机数生成算法
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 引言
近年来MT19937在各大CTF赛事中出现的频率越来越高，本文主要讨论CTF中的常见的MT相关问题，并利用几道典型的赛题进行实战分析，尤其是今年二月份pwnhub的一道零解题(详见扩展题型)。感谢zzh师傅的细心指点，赛后才勉强解出了这道CoinFlip2。
## 前置知识
MT19937是一种周期很长的的伪随机数生成算法，可以快速的产生高质量的伪随机数，主要分为三部分。
如果读者对该算法不了解，可以先参考[wiki](https://zh.wikipedia.org/zh-cn/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95)
1.利用seed初始化624的状态  
2.对状态进行旋转  
3.根据状态提取伪随机数
32位的MT19937的python代码如下：
    def _int32(x):
        return int(0xFFFFFFFF & x)
    class MT19937:
        # 根据seed初始化624的state
        def __init__(self, seed):
            self.mt = [0] * 624
            self.mt[0] = seed
            self.mti = 0
            for i in range(1, 624):
                self.mt[i] = _int32(1812433253 * (self.mt[i - 1] ^ self.mt[i - 1] >> 30) + i)
        # 提取伪随机数
        def extract_number(self):
            if self.mti == 0:
                self.twist()
            y = self.mt[self.mti]
            y = y ^ y >> 11
            y = y ^ y > 18
            self.mti = (self.mti + 1) % 624
            return _int32(y)
        # 对状态进行旋转
        def twist(self):
            for i in range(0, 624):
                y = _int32((self.mt[i] & 0x80000000) + (self.mt[(i + 1) % 624] & 0x7fffffff))
                self.mt[i] = (y >> 1) ^ self.mt[(i + 397) % 624]
                if y % 2 != 0:
                    self.mt[i] = self.mt[i] ^ 0x9908b0df
python中内置的Random类就是采用了MT19937算法，getrandbits(32)方法可以获得一个32位随机数
## 题型1 逆向 extract_number
首先分析extract_number函数，可以发现输出的伪随机数是对state[i]进行了异或，位运算后的结果。
逐步分析extract_number
    y = y ^ (y >> 18)
我们可以发现这一步的运算对操作数y的高18位并没有产生影响，也就是说运算结束后`y1 = y ^ ( y>>
18)`，得到`y1`高18位其实就是`y`的高18位，那么我们就可以得到`y>>18`的高36位，进而得到`y1`的高36位，也就是说我们可以在有限步内，获得`y`的所有信息，即我们可以根据`y1`逆向`y`。代码如下：
    o = 2080737669
    y = o^o>>18
    # 控制位移的次数
    for i in range(32//18):
        y = y^(y>>18)
    print(y==o)
我们可以发现逆向的过程和正向的过程惊人的相似，不得不感叹数学的奇妙。
继续分析
    y = y ^ y > shift
        return tmp
    # right shift with mask inverse
    def inverse_right_mask(res, shift, mask, bits=32):
        tmp = res
        for i in range(bits // shift):
            tmp = res ^ tmp >> shift & mask
        return tmp
    # left shift inverse
    def inverse_left(res, shift, bits=32):
        tmp = res
        for i in range(bits // shift):
            tmp = res ^ tmp > 11
        y = y ^ y > 18
        return y&0xffffffff
    def recover(y):
        y = inverse_right(y,18)
        y = inverse_left_mask(y,15,4022730752)
        y = inverse_left_mask(y,7,2636928640)
        y = inverse_right(y,11)
        return y&0xffffffff
    y = extract_number(o)
    print(recover(y) == o)
上述讨论的部分是，基于对extract_number函数的观察得到的逆向方法，除此之外我们还可以从extract_number的运算本质上进行逆向。
设state[i]的二进制表示形式为：
输出的随机数二进制形式为：
而z和x具有如下线性关系：
也就是说
其中X,Z是GF(2)上的1 x 32的向量，T是GF(2)上的 32 x
32的矩阵。我们只需要在GF(2)上求解X即可。已知Z，如果T也已知，可以快速的求解出X。那么如何计算T呢？
实际上我们可以采用黑盒测试的方法，猜解T。例如当X为(1,0,0,0,…..0)时，经过T得到的Z其实就是T中第一行。采用这种类似选择明文攻击的方法，我们可以得到T矩阵的每一行，进而还原T。最后再利用T和Z得到原始的X。代码如下：
    # sagemath 9.0
    from sage.all import *
    from random import Random
    def buildT():
        rng = Random()
        T = matrix(GF(2),32,32)
        for i in range(32):
            s = [0]*624
            # 构造特殊的state
            s[0] = 1>i*l
            tmp = m & mask
            m = m^tmp>>l&val
            res += tmp
            i += 1
        return res
    def invert_left(m,l,val):
        length = 32
        mx = 0xffffffff
        i,res = 0,0
        while i*l >(length-l)&mx)> 1) ^ self.mt[(i + 397) % 624]
                if y % 2 != 0:
                    self.mt[i] = self.mt[i] ^ 0x9908b0df
考虑下面的例子：
    1. 11100110110101000100101111000001 // state[i]
    2. 10101110111101011001001001011111 // state[i + 1]
    3. 11101010010001001010000001001001 // state[i + 397]
    // y = state[i] & 0x80000000 | state[i + 1] & 0x7fffffff
    4. 10101110111101011001001001011111 // y
    5. 01010111011110101100100100101111 // next = y >>> 1
    6. 11001110011100100111100111110000 // next ^= 0x9908b0df 
    0x9908b0df => 10011001000010001011000011011111
    7. 00100100001101101101100110111001 // next ^= state[i + 397]
我们知道生成新的state[i]只与原来的state[i],state[i+1],state[i+397]有关。第7步是必须进行的一步(异或的次序不影响结果，所以异或state[i+397]可以看成最后一步),第6步是根据第4步结果的奇偶性确定的,不一定有第6步,但是因为第7步是第5步或者第6步异或state[i+397]的结果,我们可以考察新生成的state[i]异或state[i+397]的结果，来判断是否进行了第六步的操作。
由于0x9908b0df =>
10011001000010001011000011011111​,而第5步的最高位必定是0,但是如果执行了第6步那么执行后的结果首位则会变成1,于是我们可以根据第7步逆向出的结果的首位判断是否进行了第6步.进而推出第5步,第5步的后31位包含了state[i]的第1位和state[i+1]的第2位至第31位,根据第6步是否进行可以得到state[i+1]的最后1位,所以根据现在的state[i]和以前的state[i+397],可以获得原来state[i]的1位信息和state[i+1]的31位信息,要获得state[i]剩下的31位信息,需要对现在的state[i-1]进行同样的运算.当需要计算第一位state时,剩下的state都已经恢复了,可以利用恢复了的最后一位state获得还未恢复的state[0]的后31位,非常巧妙!
实现代码如下：
    def backtrace(cur):
        high = 0x80000000
        low = 0x7fffffff
        mask = 0x9908b0df
        state = cur
        for i in range(623,-1,-1):
            tmp = state[i]^state[(i+397)%624]
            # recover Y,tmp = Y
            if tmp & high == high:
                tmp ^= mask
                tmp > shift
        return tmp
    # right shift with mask inverse
    def inverse_right_values(res,shift,mask,bits=32):
        tmp = res
        for i in range(bits//shift):
            tmp = res ^ tmp>>shift & mask
        return tmp