这个列表面向自己管理的桌面环境。
• 使用testing版，实际上，它是自动滚动发布的，由Debian档案库的QA质量架构来管理，比如：Debian持续集
成、只上传源代码实践和库转换跟踪。在testing版中的软件包被更新得足够频繁来提供全部最新的特性。
• 在源列表里面设置testing版相应的代码名为套件名（在bookworm-作为-stable版的发布周期时，是”trixie”）。
• 大概在主版本发布一个月后，仅仅在你自己评估了形势后，才手动更新源文件里的这个代码名到新的版本号。对于
这个更新，Debian用户和开发者邮件列表也是好的信息来源。
使用unstable版是不推荐的。unstable版对开发者调试软件包合适，但对普通的桌面使用而言，会有使你暴露
在不必要的风险中的倾向。尽管Debian系统的unstable版在大多数时候看起来都非常稳定，但会有一些软件包问
题，并且它们中的一部分是不容易解决的。
这里有一些基本预防措施意见，确保简单快速地从Debian软件包的bug中恢复。
• 通过将Debian系统的stable版安装到另一个分区，可以使系统能够进行双启动
• 制作安装CD便于用于救援启动
• 考虑安装apt-listbugs，这可以在升级之前检查DebianBug跟踪系统（BTS）的信息
• 对软件包系统的基础设施有足够的了解来解决问题
小心
如果你无法做到这些预防措施中的任何一个，那你可能还没做好使用testing和unstable版的准备。
2.1.5 Debian 档案库基础
提示
Debian档案库官方政策的定义参见Debian政策文档，第2章——Debian档案库。
让我们从系统用户的角度来看看Debian档案库。
对于系统用户，是使用APT系统来访问Debian档案库。
APT系统定义它的数据源作为源列表，在sources.list(5)里面描述。
对于使用典型的HTTP访问的bookworm系统，单行格式的源列表如下：
Debian参考手册 39/233
deb http://deb.debian.org/debian/ bookworm main non-free-firmware contrib non-free
deb-src http://deb.debian.org/debian/ bookworm main non-free-firmware contrib non-free
deb http://security.debian.org/debian-security bookworm-security main non-free-firmware ←-
contrib non-free
deb-src http://security.debian.org/debian-security bookworm-security main non-free-firmware ←-
contrib non-free
可替代的，相等的使用deb822格式的源列表如下：
Types: deb deb-src
URIs: http://deb.debian.org/debian/
Suites: bookworm
Components: main non-free-firmware contrib non-free
Types: deb deb-src
URIs: http://security.debian.org/debian-security/
Suites: bookworm-security
Components: main non-free-firmware contrib non-free
源文件的关键点如下。
• 单行格式
– 它的定义文件在”/etc/apt/sources.list”文件和”/etc/apt/sources.list.d/*.list”文件里面。
– 每一行定义了APT系统的数据源。
–“deb”的那行定义了二进制软件包。
–“deb-src”的那行定义了源代码软件包。
– 第一个参数是Debian档案库的根URL。
– 第二个参数是发行版名称，可以使用套件名或代号。
– 第三个和之后的参数是Debian档案库的有效档案库范围名称。
• Deb822格式
– 它的定义文件在”/etc/apt/sources.list.d/*.source”文件里。
– 由空格隔开的每个多行块，定义了APT系统的数据源。
– ”Types:”章节定义列表类型，即”deb”和”deb-src”。
– ”URIs:”章节定义Debian档案库URI的根地址。
– ”Suites:”章节定义了发行版名称列表，名称可以使用套件名或代号。
– ”Components:”章节定义Debian档案库中有效档案库名称列表。
如果只是用aptitude，它不访问源代码相关的元数据，“deb-src”定义可以安全地省略。这可以加速档案库元数
据的更新。
TheURLcanbe”https://”,”http://”,”ftp://”,”file://”,….
”#”开头的行是注释，被忽略。
这里，我倾向于使用代号“bookworm”或”trixie”来代替套件名“stable”或”testing”，以避免下一个stable
版本发布时出现意外。
提示
如果在上述的例子中，使用了“sid”代替“bookworm” ，那么源列表中用于安全更新的“deb:
http://security.debian.org/ …” 这 行 或 它 的 deb822 等 价 内 容 就 不 需 要 了。 因 为 没 有 用 于
“sid”（unstable）的安全更新的档案库。
Debian参考手册 40/233
档案库URL 套件名（代号） 目的
http://deb.debian.org/debian/ stable(bookworm) stable(bookworm)release版本
http://deb.debian.org/debian/ testing(trixie) testing(trixie)release版本
http://deb.debian.org/debian/ unstable(sid) unstable(sid)release版本
experimentalpre-release版本（可选，只适
http://deb.debian.org/debian/ experimental
用于开发者）
stable-proposed-updates 用于下一个稳定版(bookworm)点版本（小
http://deb.debian.org/debian/
(bookworm-proposed-updates版) 本）发布的更新（可选）
用于稳定版（bookworm）的垃圾邮件过滤
http://deb.debian.org/debian/ stable-updates(bookworm-updates)
器、IM客户端等的兼容更新
stable-backports 用于稳定版（bookworm）的较新的向后移
http://deb.debian.org/debian/
(bookworm-backports) 植的软件包（可选）
http://security.debian.org/debian- stable-security 用于稳定版(bookworm)发布的安全更新
security/ (bookworm-security) （重要）
http://security.debian.org/debian- testing-security 用于测试版发布的安全更新（这个没有安
security/ (trixie-security) 全团队的积极支持）
Table2.2: Debian档案库站点列表
在bookworm发布后，下面是配置文件所使用的Debian档案库站点的URL和套件名或代号的列表。
小心
Onlypurestablereleasewithsecurityupdatesprovidesthebeststability. Runningmostlystablerelease
mixed with some packages from testing or unstable release is riskier than running pure unstable
release for library version mismatch etc. If you really need the latest version of some programs under
stable release, please use packages from stable-updates and backports (see 第 2.7.4 节) services.
Theseservicesmustbeusedwithextracare.
小心
在”deb” 行中，你只需列出 stable，testing 或者 unstable 套件中的一个即可，如果你在”deb” 行中
混合了stable，testing和unstable套件，APT程序的执行速度将会变慢并且只有最新的档案库是有
用的。只有在”/etc/apt/preferences”文件带有明确目标的时候，混合的列表才是有意义的。（查看第
2.7.7 节）。
提示
对于使用stable套件的Debian系统而言，在源列表中包含带有“http://security.debian.org/”的内容
是不错的主意。它会启用安全更新。
注意
Debian 安全团体将会修正 stable 档案库的安全缺陷。这些行为是十分严格可靠的。testing 档案库中的缺陷，
不一定会被 Debian 测试安全团体修正。由于一些原因，这些行为相对 stable 档案库没有那么严格,您可能需要
等待已修正的unstable软件包移植到testing。unstable档案库的缺陷，交由各个维护者修改。经常维护的
unstable 软件包通常处于相当好的状况，因为它利用了上流最新的安全修正。有关 Debian 怎样处理安全缺陷，
请参见Debian安全常问问题。
上述软件包的数量是amd64架构的。main区域提供Debian系统（参见第 2.1.6 节）。
通过把你的浏览器指向档案库URL，这些URL在dists或pool之后是各不相同的，Debian档案库能够被有规划的
组织。
发行版可以用套件或代号来指定。发行版在许多文档中也被当做是套件的同义词。套件和代号的关系总结如下。
Debian参考手册 41/233
区域 软件包数量 软件包组件标准
遵从Debian自由软件指导方针（DFSG），并且不依赖于
main 69790
non-free
不符合Debian自由软件指导方针（DFSG），正常的系统安装过
non-free-firmware 39
程中必需要用到的固件
contrib 361 遵从Debian自由软件指导方针（DFSG），但依赖于non-free
不遵从Debian自由软件指导方针（DFSG），并且不在
non-free 951
non-free-firmware
Table2.3: Debian归档区域（area）列表
时间 suite=stable suite=testing suite=unstable
在bookworm发布后 codename=bookworm codename=trixie codename=sid
在trixie发布后 codename=trixie codename=forky codename=sid
Table2.4: 套件和代号的关系
代号的历史参见DebianFAQ:6.2.1以前用过哪些代号名？
在较严格的Debian档案术语，“部分section”这一词特指按应用领域来分类的软件包类别。（但是，主要部分(”main
section”)这一词有时会用来描述Debian档案区中，名为”main主要”的区域。）
Debian开发者（DD）每次上传软件包到unstable档案库（通过incoming处理），都必须确保上传的软件包与最新
的unstable档案库中的最新软件包兼容。
如果DD故意打破重要的库升级等的这种兼容性，这通常会在Debian开发者邮件列表等进行公告。
在Debian档案库维护脚本将软件包从unstable档案库移动到testing档案库前，档案库维护脚本不仅检查时间
（约10天）和软件包的RCbug报告的状态，还尝试确保它们可以和最新的testing档案库中的软件兼容。这个过程
使得 testing档案库非常正确可用。
通过由发布团队领导的逐步冻结档案库的过程，并进行一些手动干预，使testing档案库完全一致，无缺陷。然后，
将旧的testing档案库的代码名称分配给新的stable档案库，并为新的testing档案库创建新的代码名称。新的
testing档案库最初的内容和新发布的stable档案库的内容完全相同。
unstable和testing档案库都可能会遭受由以下几个因素导致的临时的小故障。
• 损坏的软件包被上传到档案库（多见于unstable）
• 延迟接受新的软件包到档案库（多见于unstable)
• 档案库时间同步问题（testing和unstable）
• 手动干预档案库，例如移除软件包（多见于testing）等。
因此，如果你决定使用这些档案库，你应该能够修复或忍受这些类型的小故障。
小心
在新的 stable 版本发布后的几个月，大多数桌面用户应该使用带有安全更新的 stable 档案库，即使他
们通常使用unstable或testing档案库。在这个过渡期中，unstable和testing档案库不适合大多
数人。你使用unstable档案库的系统是很难保持良好的工作状态的，因为它会遭受核心软件包的大量升
级狂潮。testing档案库不大有用，因为它包含有和没有安全支持的stable档案库相同的内容（Debian
testing安全公告2008-12）。一个月左右的时间后，如果你仔细点的话，unstable档案库或许可以使用。
提示
跟踪testing档案库时，由一个已移除的软件包引起的问题通常可以安装unstable档案库中相同的软件包（已
修复bug)来解决。
Debian参考手册 42/233
档案库的定义参见Debian政策文档。
• 部分
• ”优先级”
• ”基本系统”
• ”极重要的软件包”
2.1.6 Debian 是 100% 的自由软件
Debian是100%的自由软件，因为：
• Debian默认只安装自由软件，这尊重了用户的自由。
• Debian在main中只提供自由软件。
• Debian建议只运行来自main的自由软件。
• 在main中的软件包，没有依赖或推荐在non-free或non-free-firmware或contrib中的软件包。
有人想知道下列的两个事实是否互相矛盾。
•“Debian将始终是100%的自由软件”。（Debian社群契约中的第一条）
• Debian服务器上有一些non-free-firmware、non-free和contrib软件包。
因为下列原因，这并不矛盾。
• Debian系统具有100%的自由，并且它的软件包位于Debian服务器的main区域。
• Debian系统之外的软件包位于Debian服务器的non-free、non-free-firmware和contrib区域。