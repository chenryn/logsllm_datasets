attributes for each activity in our system. 4 SYSTEM DESIGN
3.2.1 Web Service Composition
In this section, we describe our system architecture for
Web service composition is the creation of a Web Pro- designing, simulating, and creating Web service pro-
cessfromindividualWebservices. Webprocessesfacili- cesses (see Figure 1).
tateexpandingtheutilityofWebservices. Webservice A Web Process Designer Tool (WPDT) is used to
composition can be either static or dynamic. In static composeprocessesandstorethedesignsinarepository.
composition, the services are predetermined during the These Web process models are transformed automati-
design of the Web process. In a dynamic composition, callytoJSIMsimulationmodelsusingtheinbuiltSimu-
the Web service to be used for an activity is decided lation Model Generator. Simulation is done to evaluate
at run-time by, for example, the process enactment en- the performance of the process. The simulation model
gine. Dynamiccompositioninvolvesrun-timesearching can be modified to answer “what-if” questions about
of registries to find services. the process. The Web process may also be enacted on
Web service composition can be represented as a a test basis, to evaluate the performance of its Web
workflow graph with activities (services) and transi- services. Based on the results of the simulation and
tion links (control and data). In composing Web ser- test enactment, we may adapt the process to meet our
vices to form processes, data links and control links needs.
Chandrasekaran, Silver, Miller, Cardoso, and Sheth
Figure 1: System Architecture
4.1 WPDT - Web Process Design 4.2 Web Process Enactment
Web process enactment is similar to a workflow enact-
Aspartofourwork,wehavedevelopedtheWPDT,for ment,thedifferencebeingthecomponentsofaworkflow
composing Web services into Web processes (see Fig- are activities while the components of a Web process
ure 2). WPDT is a process-design tool, that allows are Web services. Web services differ from workflow
static composition of Web services to build Web pro- activities in their distribution, autonomy and hetero-
cesses. WPDT stores Web processes as WSFL specifi- geneity. Substantial research on workflow enactment,
cations. has been done in the LSDIS Lab at the University of
Georgia (Sheth et al. 1996; Miller, Palaniswami et al.
We will briefly explain how WPDT is used to design
1998, Kochut et al. 1999). Based on our work, we put
Web processes. A Web process, similar to a workflow,
forward two approaches for enacting Web processes: a
is represented as a digraph with source, sink, activi-
centralized approach and a distributed approach.
ties (Web services) and transition links. In WPDT, we
have three kinds of nodes, namely, source node, sink The centralized approach is based on a client/server
node and activity node. Users need to provide the in- architecture. Itusesacontroller,whichcontrolstheex-
formation about the Web services implementing each ecution of the Web process and serves as the client re-
activity. ThisincludestheWSDLfilelocationandQoS questing service from the Web services. The controller
information. The data flow (DataLink) between the invokesaWebservice,getstheresults,basedonthere-
activities is represented as green transition links (not sultsandtheWebprocessdesignspecification,thecon-
in picture). The black transition links represents both troller then invokes the next appropriate Web service.
data flow and control flow (DataLink / ControlLink) This controller-based approach is the easiest means of
between the activities as shown in Figure 2. enacting Web processes.
The distributed approach for a Web process enact-
WPDT stores its Web process designs (XML based
ment is more complex. In a distributed approach there
WSFL specifications) in a Db4XML repository (Sipani
isnocontroller,andWebservicesareexpectedtoshare
et al. 2002), which is an XML database, developed
theexecutioncontextoftheprocess,sothatdistributed
at the University of Georgia. Since Db4XML supports
execution is possible with the collaboration of other
XQuery (XML Query Language), users can compose
Web services. This sharing of the context can be
a Web process and efficiently query the design using
achieved dynamically by peer-to-peer communication
the XQuery language. Efficient querying of these Web
between Web service hosts (Benatallah et al. 2002), or
process designs is desired when one needs to extract
using agent based solutions (Stormer 2001).
information about a design.
We have implemented the centralized technique in
To test a process, we need to enact it. In the next our system with a controller executing the composed
section, we discuss enactment strategies that can be Web process. In our implementation, a Perl controller
employed to invoke a Web process and our system im- module, manages the entire Web process execution.
plementation. This Perl enactment code is generated from the WSFL
Chandrasekaran, Silver, Miller, Cardoso, and Sheth
Figure 2: Web Process Design using WPDT
specification of the Web process. Perl was selected be- T(s) = S(s) + M(s) + Q(s)
cause its easy to use SOAP modules help in quickly
scripting the process description from the WSFL spec- Our enactment system uses the centralized approach
ification. andisthereforecontrollerbased, allowingustodoper-
During the test enactment of a Web process, we in- formance evaluation by instrumentation on the con-
strument our controller module to determine the em- troller side. We determined the total invocation time
pirical data associated with the test. This includes for each Web service and then calculated the time for
measuring the total time taken for each Web service each of the components that make up total invocation
invocation. This enables us to analyze individual Web time. Message delay time was calculated by invoking
serviceperformanceandanalyzethedistributionofser- a ping function for each Web service. XML messages
vice times associated with its execution. were sent and received, but the Web service performed
no work. Service time was calculated by running tests
against the Web service in an environment where the
5 PERFORMANCE EVALUATION
load and queuing delay for the service were controlled.
The queue time was determined by running the test in
Performance evaluation of Web services can help im-
anenvironmentwheretheWebservicewasloadedwith
plementers understand the behavior of the activities in
requests. Figure3shows theaverage time taken by the
a composed process. Since the performance of a single
primary Web services in our test enactment.
Webservicehasthepotentialtoaffecttheperformance
of an entire Web process, it is wise to evaluate the per- PerformanceevaluationcanhelpinadaptingtheWeb
formanceofthecriticalserviceswithinaprocessbefore process based on the Quality of Service requirements.
enactment. Figure 3 shows the distribution of the overall time for
one of our tests. In Figure 3, the ReleaseOrder Web
The time taken by a single Web service depends on
Service time (S), Message delay time (M) and Queue service has a high queuing time. This may indicate
time (Q). Service time is the amount of time that the thatthesystemhostingtheserviceisnotabletohandle
Web service takes to perform its task. Message de- theload. ReplacingtheReleaseOrder Webservicewith
lay time is determined by the size of the message be- another service may improve the quality of service for
the Web process.
ing transmitted/returned and the load on the network
through which the message is being sent. Queue time TheperformanceevaluationofWebservicesneedsto
isthedelaycausedbytheloadonthesystemwherethe be done in a controlled manner. This requires that one
Webserviceisdeployed. TheTotal invocation time (T) beabletocontroltheloadonthesystemduringtesting.
for Web service s is given in the formula below: The distribution and autonomy of Web services makes
Chandrasekaran, Silver, Miller, Cardoso, and Sheth
Figure 3: Timing Results for the Book Purchasing Web Process
meeting this requirement difficult. Using simulation to • SourceNodes: Generateentitiesusinganinter-ar-
predict the performance of a Web process is therefore rival time produced by a random variate.
very useful.
• Server Nodes: Provide service to entities using a
servicetimeproducedbyarandomvariate. Servers
6 SIMULATION may have one or several service units.
Simulation helps in determining how composed Web • Facility Nodes: Behave like a server node but also
services will perform when they are deployed and may provide a queue for waiting entities.
alsouncoverstructuralerrorsinthedesign. Simulation
serves as an important step in designing efficient pro- • Sink Nodes: Consume entities and capture statis-
cesses. The WPDT process designer is integrated with tical information about the entities.
theJSIMsimulationsystem. WPDTislinkedtoaJSIM
• Transports: Edges that connects two nodes.
Model Generator to generate JSIM simulation model
from the WSFL process model. Currently JSIM simu-
• SimObjects: Instances of simulation entities.
lates the controller based enactment of Web processes
(see Figure 4). Simulation of distributed enactment is
Messages sent to or received from Web services are
underway. As both WSFL process model and JSIM modeled as SimObjects. The Web services in the pro-
simulationmodelarerepresentedasdigraphs, mapping cess are modeled as Facility or Server nodes, and
fromtheWSFLmodeltotheJSIMModelisstraightfor-
the communication channels between Web services are
ward. Controllinksintheprocessmodelmaptotrans- modeled as Transports.
ports in the JSIM simulation model. Activities in the
The primary enhancements, conditional routing and
processmodelmaptofacilitiesinthesimulationmodel.
AND splits, to support the simulation of Web services
Thinkingforamomentintheotherdirection,onecould
are discussed briefly.
use WFSL like specifications as a basis for developing
XML standards for specifying simulation models.
6.1.1 Conditional Routing
In prior versions of JSIM, an entity leaving a node
6.1 JSIM Simulation
would probabilistically choose an out edge to transport
ThelatestversionofJSIM,aJava-basedsimulationand it to the next node. JSIM has been enhanced to allow
animation environment (Nair et al. 1996; Miller et al. an out edge to be selected based on the values of sim-
1997), contains several features that support the sim- ulation entity attributes. The model developer is given
ulation of Web processes. JSIM simulation models are the option to add additional attributes to instances of
constructed using the following basic components: the SimObject class and out edge selection criteria to
Chandrasekaran, Silver, Miller, Cardoso, and Sheth
instances of the Transport class. The selection criteria 7.1 Types of Web Services
are specified as Java condition expressions.
ManytypesofWebservicescanbeusefulinsimulation.
AND Splits allow an entity to choose more than one We discuss three types below.
outedgetotransportit. Whenanentityencountersan
AND Split, the entity is cloned and each copy of the
7.1.1 Whole Models as Web Services
entity exits the node on a different out edge. Each of
the copies of the entity continues to traverse the graph Prehaps the most useful is to make complete simula-
until they encounter a node containing an AND Join. tion models available as Web services. Certain sites
Each copy of the entity will wait at this node until all develop an expertise with certain types of simulation
other copies arrive. Once all of the copies arrive, they (e.g., a highway traffic simulation or weather simula-
arejoinedbyrule-basedmergingoftheattributevalues tion) and if one wishes to perform such a simulation,
of the copy entity with the attribute values of the orig- they could simply send a SOAP message to the appro-
inalentityandplacingresultsintotheattributesofthe priate site which characterizes the scenario they wish
original entity. The copies are then removed from the tostudy. ThemodelWebservicecouldchargeonaper
model, andtheoriginalentitymaycontinuetotraverse use basis or lease out its service.
the graph.
The time for the original entity to be transported 7.1.2 Environmental Components as Web Ser-
fromthenodewiththeAND Split tothenodewiththe vices
AND Join is considered to be the greatest amount of
Drillingdownabit,asimulationmayuseseveralmajor
time that it takes any of the copies to be transported
components such as Databases, Spreadsheets, Knowl-
between the nodes.
edge Bases, Visualization Tools, OLAP Tools, Data
When simulating Web processes, the JSIM model Mining Tools, Scenario Managers, Optimizers and An-
takes as input the distribution functions characterizing imators. Components with infrequent interation are
the Web services. The service time distribution func- the best candidates to be separated out as Web ser-
tions of the Web services, are used to generate service vices. Theservicemaybeprovidedbyathirdparty,but
times for characterizing the facility/server nodes in the might well be provided within the same organization.
JSIM model specification. These distribution functions The Web service paradigm would be followed for the
canbecomputedbyperformanceevaluationtestsasex- purposesofstandardization,interoperability,maintain-
plained earlier or obtained from the service providers. abilityandflexibility(e.g.,ifthecompany’sdatabaseis
replaced, solongastherelevantWebserviceisredevel-
oped,noneofthesimulationmodelsusingthedatabase
need to be changed).
7 BUILDING SIMULATION ENVIRON-
MENTS OUT OF WEB SERVICES • The first three components/resources (Databases,
Spreadsheets and Knowledge Bases) are mainly
data/information/knowledge sources and sinks