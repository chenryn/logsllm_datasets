(cid:5) ≥ T . Then,
We deﬁne T to be the time when P r[S(T ) ≥ ˆn] = 1
∆
(cid:5)
P r[D(T
2, and let T
) ≥ ˆn]
) < ˆn],
) ≥ ˆn],
(cid:5)
(cid:5)
(cid:5)
(cid:5)
(cid:5)
(cid:5)
) (cid:6)∈ I|S(T
(cid:5)
) (cid:6)∈ I|S(T
(cid:5)
) (cid:6)∈ I|S(T
(cid:5)
) (cid:6)∈ I|S(T
(cid:5)
) (cid:6)∈ I] = P r[D(T
+ P r[D(T
≥ P r[D(T
≥ 1
2 P r[D(T
(1 − P r[D(T
1
2
=
(cid:5)
) ≥ ˆn]P r[S(T
) < ˆn]P r[S(T
) ≥ ˆn]P r[S(T
) ≥ ˆn],
(cid:5)
(cid:5)
) ≥ ˆn]).
) ∈ I|S(T
From the proof of Theorem 1, we know
P r[D(T
(cid:5)
) ∈ I|S(T
Therefore, P r[D(T
.
(cid:5)
(cid:5)
πˆn/2
(1 − p∆(cid:5)
) ≥ ˆn] ≤ p∆(cid:5)
) (cid:6)∈ I] ≥ 1
2
(cid:5)) (cid:6)∈ I] ≥ 1
4 .
2k . Therefore, P r[t < T|S(t) ≥ kˆn] ≤ 1
2k .
πˆn/2
).
Substituting ˆn = 8p2
π , we get P r[D(T
Now, note that P r[S(T ) ≥ kˆn] ≤ 1
Then,
∆
P r[D(t) (cid:6)∈ I|S(t) ≥ kˆn] = P r[D(t) (cid:6)∈ I|t ≥ T ]P r[t ≥ T|S(t) ≥ kˆn]
+ P r[D(t) (cid:6)∈ I|t < T ]P r[t < T|S(t) ≥ kˆn]
≥ P r[D(t) (cid:6)∈ I|t ≥ T ]P r[t ≥ T|S(t) ≥ kˆn]
≥ 1
4
(cid:2)
(cid:1)
1 − 1
.
(cid:3)
2k
1 − 1
Therefore, P r[D(t) ∈ I|S(t) ≥ kˆn] < 1 − 1
4
To bound this by the given conﬁdence level, we need to take m such obser-
vations of kˆn packets in the union of the streams, so that:
2k
(cid:4)
.
(cid:2)(cid:2)m ≤ δ.
(cid:2)(cid:2)m ≤ δ.
(cid:1)
1 − 1
(cid:1)
4
1 − 1
4
(cid:1)
1 − 1
(cid:1)
2k
3
4
Setting k = 2,
Since
1
log( 16
13) < 7
2, we set m ≥ 7
2log 1
δ .
(cid:3)
m ≥ log 1
log
δ
16
13
(cid:4) .
(cid:4)(cid:5)
270
Avrim Blum, Dawn Song, and Shobha Venkataraman
Likewise, we have the analogues of Theorem 2 and Theorem 3 for the general
model. We omit their proofs, since they are very similar to the proofs of Theo-
rem 2 and Theorem 3.
Theorem 5. Assuming that normal streams behave as sequences of Poisson pro-
cesses, the algorithm Detect-Attacks will have a probability at most δ of a
false positive over all pairs of streams it examines, if, for the ith pair of streams,
it observes 7
intervals of n packets each, where n = 16p2
π .
2 log i(i+1)
δ
∆
Theorem 6. Assuming that normal streams behave as sequences of Poisson pro-
cesses, then if p∆ is unknown, we can use repeated-doubling and incur an extra
O(log log p∆) factor in the number of packets over that in Theorem 5, to achieve
false-positive probability δ.
5 Chaﬀ: Detection and Hardness Result
All the results in Section 4 rely on the attacker streams obeying two assumptions
in Section 3 – in a pair of attacker streams, every packet sent on the ﬁrst stream
arrives on the second stream, and any packet that arrives on the second stream
arrives from the ﬁrst stream. In this section, we examine the consequences of
relaxing these assumptions.
Notice that only the packets that must reach the target need to obey these
two assumptions. However, the attacker could insert some superﬂuous packets
into either of the two streams, that do not need to reach the target, and therefore,
do not have to obey the assumptions. Such extraneous packets are called chaﬀ.
By introducing chaﬀ into the streams, the attacker would try to ensure that the
number of packets observed in his two streams appear less correlated, and thus
reduce the chances of being detected.
Donoho et al. [4] also examine the consequences of the addition of chaﬀ to
attack streams. They show that under the assumption that the chaﬀ in the
streams is generated by a Poisson process that is independent of the non-chaﬀ
packets in the stepping-stone streams, it is possible to detect correlation between
stepping-stone pairs, as long as the streams have suﬃcient packets. However, an
attacker may not wish to generate chaﬀ as a Poisson process. In this section,
we assume that a clever attacker will want to optimize his use of chaﬀ, instead
of adding it randomly to the streams. In Section 5.1 we explain how to detect
stepping stones using our algorithm when the attacker uses a limited amount of
chaﬀ (Theorem 7). In Section 5.2 we describe how an attacker could use chaﬀ to
make a pair of stepping-stone streams mimic two independent Poisson processes,
and thus ensure that the pair of streams are not correlated. We then give upper
bounds on the minimum chaﬀ the attacker needs to do this (Theorems 8 and 9).
5.1 Algorithm for Detection with Chaﬀ
Recall that our algorithm Detect-Attacks is based on the observation that,
with high probability, two independent Poisson processes will diﬀer by any ﬁxed
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
271
distance given suﬃcient time. An attacker can, therefore, evade detection with
our algorithm by introducing a suﬃcient diﬀerence between the streams all the
time. Speciﬁcally, our algorithm checks if the two streams have a diﬀerence that
is greater than p∆ packets every time there are 8p2
π packets in the union of the
streams. To evade our algorithm as it stands (in Fig. 1), all that the attacker
might need to do is to send one packet of chaﬀ on the faster stream.
∆
Algorithm. We now modify Detect-Attacks slightly, to detect stepping-
stone attacks under a limited amount of chaﬀ. Instead of waiting for a diﬀerence
of p∆ packets between the two streams, we could wait for a diﬀerence of 2p∆
packets. The independent Poisson processes would eventually get a diﬀerence
of 2p∆, but now, the attacker would need to send at least p∆ packets in chaﬀ
in order to evade detection. He could get away with exactly p∆ packets if he
sends all of the chaﬀ packets in the same time interval, on the same stream.
However, as long as he sends less than p∆ packets of chaﬀ in every time interval,
the monitor will ﬂag his streams as stepping stones2. The complete algorithm is
shown in Fig. 3.
Detect-Attacks-Chaff (δ, p∆)
Set m = log 1
For m iterations
δ , n =
32p2
∆
π .
Observe n packets on S1 ∪ S2.
Compute d = N1 − N2. If d ≥ 2p∆ return Normal.
return Attack.
Fig. 3. Algorithm for stepping-stone detection with with less than p∆ packets of chaﬀ
every
packets
32p2
∆
π
∆
Analysis. We now show that Detect-Attacks-Chaff will correctly identify
stepping stones with chaﬀ, as long as the attacker sends no more than p∆ packets
of chaﬀ for every 32p2
π packets. Further, any given non-attacking pair of streams
will have no more than a δ chance of being called a stepping stone.
Theorem 7. Under the assumption that normal streams behave as Poisson pro-
cesses, and the attacker sends less than p∆ packets of chaﬀ every 32p2
packets,
the algorithm Detect-Attacks-Chaff will have a false positive rate of utmost
δ, if we observe log 1
Proof. Let 0 ≤ N 1(w) − N 2(w) ≤ p∆ at total packet count w. Then, after n
further packet arrivals, we want to bound the probability that the diﬀerence is
still within [0, p∆], for a normal pair. Let Z = N 1(w + n) − N 2(w + n).
2 We choose to wait for a diﬀerence of 2p∆ packets here, because it is the integral
multiple of p∆ that maximizes the rate at which the attacker may send chaﬀ. We
could replace it with the non-integral multiple of p∆ that maximizes the rate at
which the attacker must send chaﬀ, but we omit the details here.
δ intervals of 32p2
packets each.
π
∆
π
∆
272
Avrim Blum, Dawn Song, and Shobha Venkataraman
As in the proof of Theorem 1, for any x, we have:
P r[Z = x] <
1(cid:5)
πn/2
.
Therefore, over an interval of size 2p∆, we have:
P r[0 ≤ Z < 2p∆] <
2p∆(cid:5)
πn/2
.
(cid:3)
Substituting n =
To ensure that this is bounded by the given conﬁdence level, we take m such
, we get P r[0 ≤ Z < 2p∆] < 1
2 .
32p2
∆
π
(cid:4)m ≤ δ, which gives m ≥ log 1
δ intervals of n packets.
observations of n time steps, so that
Therefore, a normal pair will diﬀer by at least 2p∆ with probability at least
1 − δ, in log 1
On the other hand, for an attack pair with no chaﬀ, we know that N 1(w) −
N 2(w) ≤ p∆. When the attacker can add less than p∆ packets of chaﬀ in 32p2
packets, N 1(w + n) − N 2(w + n) < 2p∆, and thus, diﬀerence in packet count an
(cid:4)(cid:5)
attack pair cannot exceed 2p∆ in n packets.
δ .
1
2
π
∆
∆
∆
π
Note that Theorem 7 is the analogue of Theorem 1 when the chaﬀ rate is
bounded as described above. The analogues to the other theorems in Section 4
can be obtained in a similar manner.
Obviously, the attacker can evade detection by sending more than p∆ packets
of chaﬀ for every 32p2
packets. Further, if we count in pre-speciﬁed intervals,
the attacker would only need to send p∆ packets of chaﬀ in one of the intervals,
since the algorithm only checks if the streams diﬀer by the speciﬁed bound in
any of the intervals.
We could address the second problem by sampling random intervals, and
checking if the diﬀerence Z in those intervals is at least 2p∆. We could also
modify our algorithm to check if the diﬀerence Z stays outside 2p∆ for at least
a fourth of the intervals, and analyze the resulting probabilities with Chernoﬀ
32p∆ fraction
bounds. To defeat this, the attacker would have to send at least
the total packets on the union (p∆ packets of chaﬀ every 32p2
packets) in an
independent interval, so that every (suﬃciently long) interval is unsuspicious.
However, if the attacker just chooses to send a lot of chaﬀ packets on his
stepping-stone streams, then he will be able to evade the algorithm we proposed.
This type of evasion is, to some extent, inherent in the problem, not just the
detection strategy we propose. In the next section, we show how an attacker could
successfully mimic two independent streams, so that no algorithm could detect
the attacker. We also give upper bounds on the minimum chaﬀ the attacker
needs to add to his streams, so that his attack streams are completely masked
as independent processes.
π
π
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
273
5.2 Hardness Result for Detection with Chaﬀ
If an attacker is able to send a lot of chaﬀ, he can in eﬀect ride his communication
on the backs of two truly independent Poisson processes. In this section, we
analyze how much chaﬀ this would require. This gives limitations on what we
could hope to detect if we do not make additional assumptions on the attacker.
Speciﬁcally, in order to simulate two independent Poisson processes exactly,
the attacker could ﬁrst generate two independent Poisson processes, and then
send packets on his streams to match them. He needs to send chaﬀ packets
on one of the streams, when the constraints on the other stream do not allow
the non-chaﬀ packet to be forwarded to/from it. In this way, he can mimic
the processes exactly, and pair of streams will not appear to be a stepping-
stone pair, to any monitor watching it. Note that even if the inter-packet delays
were actively manipulated by the monitor, the attacker can still mimic two
independent Poisson processes, and therefore, by our deﬁnition, will be able
to evade detection.
Let λ1 be the rate of the ﬁrst Poisson process, and λ2 be the rate of the second
Poisson process. In our analysis, we assume λ1 = λ2 = λ (cid:8) 1
∆. If λ1 (cid:8) λ2, or