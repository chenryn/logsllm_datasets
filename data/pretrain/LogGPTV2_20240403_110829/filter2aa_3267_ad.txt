Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!43!
!
Analysing and Controlling the Overflow. 
Now it’s time to analyse how the overflow can be controlled. To better understand this, we need to 
have a look at the addEdgeToGet function, which copies the points to the newly allocated memory. 
In the beginning, the addEdgeToGet assigns the r11 and r10 register to the values of the current 
point.y [r9+4] and the previous point.y [r8+4]. 
Later, a check is performed, which checks whether the previous point.y is less than [r9+0c], which in 
this case was 0x1f0; If so, the current point will be copied to our buffer, if not, the current point to 
be skipped. It was noticed also that the point.y value was shifted left by a nibble, i.e. if the previous 
point.y = 0x20, the value will be 0x200. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!44!
!
Now that we have the primitives of how we can control the overflow, we need to find out how the 
values 0x1 and 0xFFFFFFFF will be copied across. In the first check, the function will subtract the 
previous point.y at r10 from the current point.y at ebp. If the results were unsigned, it will copy the 
value 0xFFFFFFFF to offset 0x28 of our buffer pointed to by rdx. The assumption here, is that this 
function checks the direction of which the current point.y is to the previous point.y. 
In the second check, the same is done for point.x. The previous point.x at r8 is subtracted from the 
current point.x at ebx and if the results are unsigned, the function will copy 0x1 to offset 0x24 of our 
buffer pointed to by r15. This makes sense since it corresponds with the previous check copying to 
offset 0x28, as well as the fact that we want to only overflow the sizlBitmap structure. With point 
structures that are of size 0x30 bytes, also it copied the value 1 to the hdev member of the object 
pointed to by [r15+0x24]. 
Calculating the number of points to overflow the buffer to reach the sizLBitmap member, was easy 
and the way it was enforced by the exploit code was simply changing the value of the previous point.y 
to a larger value that would fail the main check discussed previously, and thus, the points will not be 
copied, looking at the code snippet from the exploit. 
This is how the initial points array was initialized, notice the value of points[2].y is set to 20 that is 
0x14 in hex, which is less than 0x1f and will thus copy the subsequent point to our allocated buffer. 
static POINT points[0x3fe01]; 
for (int l = 0; l  0x1F && points[2].y != 0x5a1f) { 
points[2].y = 0x5a1f; 
} 
if (!PolylineTo(hMemDC, points, 0x3FE01)) { 
fprintf(stderr, "[!] PolylineTo() Failed: %x\r\n", 
GetLastError()); 
}} 
This will effectively control the overflow as such that the function will overflow the buffer until the 
next adjacent bitmap object sizlBitmap member with 0x1 and 0xFFFFFFFF, effectively expanding this 
bitmap object, allowing us to read/write past the original bounds of the bitmap object. 
If everything is working as planned, we should be able to read 0x1000 bytes from memory. Below 
there is the bitmap object before and after the overflow, the header, sizLBitmap and hdev members 
were overflowed. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!46!
!
Abusing Bitmap GDI Objects 
The way to figure out which bitmap object was the extended, is by iteratively, calling GetBitmapBits 
with size larger than the original values on each bitmap from our kernel pool spray; if it succeeds, then 
this bitmap was the one that was overflowed, making it the manager bitmap and the next one in the 
bitmap array will be the worker bitmap. 
for (int k=0; k  0x150) 
{ 
hManager = bitmaps[k]; 
hWorker = bitmaps[k+1]; 
break 
} 
} 
The hManager will be the handle to the extended Manager bitmap object with relative memory 
read/write to the adjacent Worker bitmap object hWorker. Overwriting the Worker Bitmap’s 
pvScan0 with any address will allow read/write from that location in memory, gaining arbitrary 
read/write. 
A leaked Pool address that was part of the Region object adjacent to the Manager bitmap will be used 
to calculate the offset to the Pool page start, and by abusing the arbitrary kernel memory read/write, 
the overwritten headers of the Region and Bitmap objects that have been overwritten due to the 
overflow.  
The way to calculate the address of the overflowed region object is by nulling the lowest byte of the 
leaked address, which will give us the address of the beginning of the current page, subtract the second 
lowest byte by 0x10, effectively subtraction 0x1000 from the beginning of the current page that will 
result in the start address of the previous page. 
addr1[0x0] = 0; 
int u = addr1[0x1]; 
u = u - 0x10; 
addr1[1] = u; 
Next, the address to the overflowed Bitmap object is calculated, remember that the region object is 
of size 0xbc0, so setting the lowest byte of the address retrieved at the last step to 0xc0, and adding 
0xb to the second lowest byte, will result in the header address of the overflown bitmap object. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!47!
!
addr1[0] = 0xc0; 
int y = addr1[1]; 
y = y + 0xb; 
addr1[1] = y; 
Then, SetBitmapBits is used by the manager bitmap object to overwrite the pvScan0 member of the 
worker bitmap object with the address of the region header. Then the worker bitmap object is used 
with SetBitmapBits to set that data pointed to by this address to the header data read in the first step; 
the same is done for the overflowed bitmap object header. 
void SetAddress(BYTE* address) { 
for (int i = 0; i bitmap.bitsperpixel) 
x = x / 2^3 
y = x * bitmap.height 
result = y + 0x44 
Then value of result is added to 0x40 and passed as the size parameter to the allocation function. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!52!
!
Since the values of bitmap.width and bitmap.height can be controlled, it’s just a matter of finding the 
right combination, which would result in an overflow. The value we are aiming to get after the overflow 
is 0x10 (explained later). 
For an overflown integer to be of that value the results of the calculations in reality must be equal to 
0x100000010. 
0x100000010 – 0x44 – 0x40 = 0xFFFFFF8C 
A factor of an integer is used to find which two numbers, when multiplied together will result in that 
integer. 
One of the factors of 0xFFFFFF8C are 0x8c (140) and 0x30678337 (0x1d41d41) 
The value of the bitmap.width after the calculation should be 0x8c, (0x8c * 0x8)/0x20 = 0x23 
Using the following bitmap as the pattern brush source, we would overflow the value when its added 
to 0x40 and 0x44 to result in 0x10 allocation. 
HBITMAP bitmap = CreateBitmap(0x23, 0x1d41d41, 1, 1, NULL); 
After the allocation, the function would try to write to certain offsets of the allocated object, as shown 
below. If the allocation is below 0x30 bytes in size the write to [esi+0x3C] would result in an out-of-
bounds OOB write to that location. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!53!
!
Stars Alignment 
Remember the 0x10 value? The reason for choosing that specific value is for stars aligning, the object 
of choice to be overflown would be a bitmap object, to overwrite its height member, and gain a relative 
memory read/write primitive. 
The 32-bit _SURFOBJ has the height member at offset 0x14: 
Allocated object size (0x10) + Bitmap _POOL_HEADER size(0x8) + 
_BASE_OBJECT size (0x10)  + _SURFOBJ->height (0x14) = OOB write offset 
(0x3C) 
Precisely overwriting the height member of the adjacent bitmap object. To be completely honest, I 
did not just calculate the offsets and was done. It took a great amount of time, pain and trial and error 
to get this value so I was basically guessing when the stars aligned for me. Then it was time to check 
if this was actually happening in a debugger. 
By the end of the first section of the calculations, it can be seen that the value that would be passed 
to the calculation block is 0xFFFFFFD0 at ebx. 
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!54!
!
Moving to the allocation section, in the beginning the value 0xFFFFFFD0 is added to 0x40 resulting in 
0x10 in eax. 
Since at the end of the function, the allocated object is freed, the object needs to be allocated at the 
end of the memory page. The difference this time is that it should be directly followed by the bitmap 
object, so that we can overflow the Bitmap object height and extend its size to gain relative memory 
read/write.  
!
Demystifying Kernel Exploitation by 
Abusing GDI Objects 2017-07-18!
!
! !
!
pg.!55!
!
At this point we have three choices, that we can go with: 