# Raising the Bar: Evaluating Origin-wide Security Manifests

**Authors:**
- Steven Van Acker
- Daniel Hausknecht
- Andrei Sabelfeld

**Affiliation:**
Chalmers University of Technology, Gothenburg, Sweden

## Abstract
Defending a web application from attackers requires the correct configuration of several web security mechanisms for each and every web page in that application. This process can be challenging and may result in gaps in the defense if some pages are overlooked. In this work, we provide the first evaluation of the standard draft for an origin-wide security configuration mechanism called the "origin manifest." This mechanism raises the security level of an entire web origin at once while still allowing the specification of web security policies at the web page level. We create prototype implementations of the origin manifest mechanism for both the client-side and server-side, and provide security officers with an automated origin manifest learner and generator to aid them with the configuration of their web origins. To resolve potential collisions of policies defined by the web origin with those defined by web pages, we formalize the comparison and combination of web security policies and integrate it into our prototype implementation. We evaluate the feasibility of the origin manifest mechanism through a longitudinal study of popular websites to determine whether origin manifest files are stable enough to not require frequent reconfiguration, and perform performance measurements on the Alexa top 10,000 to determine the network traffic overhead. Our results show that the origin manifest mechanism can effectively raise the security level of a web origin while slightly improving network performance.

**ACM Reference Format:**
Steven Van Acker, Daniel Hausknecht, and Andrei Sabelfeld. 2018. Raising the Bar: Evaluating Origin-wide Security Manifests. In Proceedings of 2018 Annual Computer Security Applications Conference (ACSAC '18). ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3274694.3274701

## 1 Introduction
Todayâ€™s web connects billions of people across the planet through interactive and increasingly powerful web applications. These applications are a complex mix of components on both the server and client sides. Unfortunately, current security mechanisms are spread across these different components, leading to inconsistencies. Previous work [2, 17, 31, 39, 42] shows that it is difficult to securely configure and use these mechanisms.

Web application security policies are typically transmitted through HTTP headers from the server to the client. While most web security mechanisms operate at the level of a single web page, some, like HSTS [18] and HPKP [12], operate at the level of an entire web origin. The web origin, or simply origin, defined as a combination of the scheme, hostname, and port, serves as the de facto security boundary in web security. Misconfigurations at the level of a single web page can break the operation of an entire origin. Therefore, it is valuable to define the scope of a security policy at the origin level and meaningfully combine it with application-specific policies for enforcement on the client side.

These considerations have prompted the web security community to propose a draft for a security manifest [16, 41] to allow the definition of security policies at the origin level. The goal is to provide a backward-compatible origin-wide mechanism, so that security officers can harden web application security without imposing the burden of a new mechanism on developers.

To illustrate the need for the origin manifest, consider a web application where developers set a Content Security Policy (CSP) [34] for every web page but miss configuring CSP for a custom 404 error page. If this page has a vulnerability, it puts the entire web application at risk. This scenario is realistic [13, 19, 26], and not limited to error pages or CSP. For web pages where security mechanisms are left unconfigured, this motivates a fallback policy: a default setting for a security policy.

Let us extend this example with additional web applications hosted under the same web origin. The same-origin policy (SOP) specifies that access between web origins is not allowed by default. In our extended example, the web applications are under the same origin, and a vulnerability in one application can potentially put the others at risk since SOP does not protect in this case. To raise the bar for attackers, the origin manifest provides a baseline policy for an entire origin: a minimum origin-wide security setting that cannot be overridden, only reinforced.

Note that the baseline policy cannot currently be implemented by simply centralizing web security policies through, for example, the central web server configuration [28]. In such a setup, when the central configuration for a web security header conflicts with one set by the web application, one header must be prioritized over the other. The baseline policy combines both configurations so that the result is at least as strong as each configuration.

An implementation of the origin manifest mechanism has been initiated for the Chrome browser [40]. However, there are open questions [38] about the potential usefulness of the mechanism. The following research questions are critical to determining whether the origin manifest mechanism will succeed:
- How to combine origin-wide and application-specific policies?
- How to aid developers in configuring origin manifests?
- What is the expected lifespan of an origin manifest?
- Does the mechanism degrade performance, or can it improve it?

This paper seeks to answer these research questions.

Security improvements through origin-wide baseline policies are promising, but the draft lacks details on how to resolve situations where policies defined by the origin collide with policies defined by web pages. Consider a situation where both the origin and web page define different Strict-Transport-Security policies. The problem is that Strict-Transport-Security does not allow multiple policy definitions for the same page, a situation the origin manifest mechanism should specify how to resolve. To address this, we determined the need to compare the security level of security policies, as well as the need to combine security policies into their least upper bound and greatest lower bound. We formalize the comparison and combination of security policies as an extension of the origin manifest mechanism and create an implementation for practical evaluation. During implementation, we also realized that baseline policies do not work well for certain security policies, such as security flags for web cookies, necessitating the introduction of augmentonly policies.

In real-world deployments, the security officers responsible for a web origin are not necessarily the developers of the web applications hosted under that origin. Therefore, origin security officers do not always have full control over the configurations of the web applications. Fortunately, the origin manifest does not require this level of control to take effect, and web applications can remain untouched. Nevertheless, a practical challenge is to define suitable origin-wide security policies with a certain level of desired security without breaking web applications hosted under the origin. A good starting point is to identify and merge all policies deployed under an origin to create an origin manifest that covers the policies of each web application. To support origin security officers in this non-trivial task, we implemented a tool that can learn the deployed security configurations of web applications under an origin. The tool utilizes the policy combinator functions to generate an origin manifest that is in accordance with all observed web application policies. Origin security officers can then refine this generated origin manifest according to their requirements.

A stable origin manifest would reduce the workload on origin security officers, but it requires data on how frequently HTTP headers tend to change in real-world web applications. To this end, we conducted a longitudinal empirical study over 100 days to analyze the popularity, size, and stability of HTTP headers. We used the origin manifest learner and generator to derive origin manifests for each visited origin to get a first insight into the practical composition of origin manifests over a longer period. One of our results is an average origin manifest stability of around 18 days.

The origin manifest draft claims that HTTP headers are often repeated and can occupy multiple KiB per request, an overhead that can be reduced by sending the respective headers as part of the origin-wide configuration. Cross-Origin Resource Sharing (CORS) preflights, which query the server for permission to use certain resources from different web origins, can be cached per web origin to reduce network traffic. Though intuitively plausible, both claims benefit from empirical evidence and practical evaluation. To this end, we first implemented a prototype for the origin manifest mechanism using proxies. We then used the prototype in a large-scale empirical study to visit the Alexa top 10,000 and analyze the network traffic without and retrofitted with origin manifests. Our results show a slight reduction in network traffic when using origin manifests.

Our contributions include:
- Extensions to the proposed origin manifest draft:
  - A formal description of security policy comparison and combination functions.
  - Introduction of a new augmentonly directive.
- An automated origin manifest learner and generator.
- Evaluation with empirical evidence for:
  - The feasibility of the origin manifest mechanism through a longitudinal study of the popularity, size, and stability of observed HTTP headers in the real world.
  - The origin manifest mechanism's network traffic overhead, by measuring and studying the network traffic while visiting the Alexa top 10,000 retrofitted with origin manifests.

The rest of this paper is structured as follows: Section 2 describes the web security mechanisms covered by the origin manifest mechanism. Section 3 outlines the design of the origin manifest mechanism. Section 4 formalizes comparisons and combinators for security policies. Section 5 provides details of our prototypes that implement the origin manifest mechanism. Section 6 deals with the evaluation of our prototypes. We provide a general discussion in Section 7, list related work in Section 8, and conclude in Section 9.

## 2 Background
Browsers implement certain security-relevant mechanisms that can be configured by servers via HTTP headers. The values of these headers represent a security policy enforced by browsers. In this section, we briefly explain the security mechanisms that can be configured with an origin manifest.

### Set-Cookie
The Set-Cookie HTTP header allows the setting of web cookies [3]. Cookies can be configured with additional attributes such as `httpOnly`, which makes the cookie inaccessible from JavaScript, and `secure`, which disallows the transmission of the cookie over an insecure connection. These attributes form a policy, specifying how cookies should be handled by browsers.

### Content-Security-Policy (CSP)
A CSP whitelists which content is allowed to be loaded into a web page. It defines various directives for different content types such as scripts, images, sub-frames, or the base-uri configuration. The directives whitelist the respectively allowed content. We use CSP level 3 as specified in [34].

### Cross-Origin Resource Sharing (CORS)
By default, the same-origin policy does not permit accessing cross-origin resources. CORS [36] allows web developers to explicitly allow a different origin to access resources in their own origin. Under certain conditions, e.g., when a request would have a side-effect on the remote side, browsers will perform an upfront preflight request to query whether the actual request will be permitted. In contrast to other security mechanisms, CORS access decisions are communicated through sets of HTTP headers. The composition of the different CORS headers forms a CORS policy. All CORS response header names follow the pattern `Access-Control-*`.

### X-Content-Type-Options
Some browsers implement content-type sniffing as a mechanism to verify if the expected content-type of a loaded resource matches the content-type of the actually loaded content. The HTTP response header `X-Content-Type-Options: nosniff` disables this behavior.

### X-XSS-Protection
Most browsers implement some form of cross-site scripting (XSS) protection, although no standard exists. The `X-XSS-Protection` header can configure this feature. For instance, `X-XSS-Protection: 1; mode=block` will enable XSS protection and block the loading of the web page if an XSS attack is detected.

### Timing-Allow-Origin
Web browsers provide an API for accessing detailed timing information about resource loading. Cross-origin access to this information can be controlled through the `Timing-Allow-Origin` HTTP header [35]. By default, cross-origin access is denied. This header allows defining a whitelist of permitted origins.

### Strict-Transport-Security (HSTS)
The HTTP header `Strict-Transport-Security` (HSTS) [18] is a mechanism to configure user agents to only attempt to connect to a website over secure HTTPS connections. This policy can be refined through parameters to limit the policy lifetime (`max-age`) or to extend the effects of the policy to subdomains (`includeSubDomains`).

### Public-Key-Pins (HPKP)
The HTTP header `Public-Key-Pins` (HPKP) [12] allows defining a whitelist of public key fingerprints of certificates used for secure connections. If an origin's certificate does not match any of the whitelisted fingerprints for that origin, the connection fails. HPKP policies have a lifetime as specified via the `max-age` directive and can be extended to sub-domains through the `includeSubDomains` directive. Note that this header is deprecated for the Chrome browser [8].

### X-Frame-Options
The HTTP header `X-Frame-Options` [29] determines whether the response can be embedded in a sub-frame on a web page. It accepts three values: `DENY` disallows all embedding, `SAMEORIGIN` allows embedding in a web page from the same origin, and `ALLOW-FROM <uri>` allows embedding in a web page from the specified origin. Because this mechanism is not standardized, some directives such as `ALLOW-FROM` are not supported by all browsers. This is why we do not consider `ALLOW-FROM` in our work. In practice, CSP's `frame-ancestors` directive is meant to obsolete the use of this header [33].

## 3 Mechanism Design
The standard draft [41] and its explainer document [16] define the basic origin policy mechanism. We take it as the basis for our work but differ in some parts, for example, by adding the `augmentonly` section. In this section, we describe the extended origin manifest mechanism.

### 3.1 Overview
The origin manifest mechanism allows configuring an entire origin. The origin provides this configuration as a manifest file under a well-known location under the origin, according to the concept of Well-Known URIs defined in RFC 5785 [25]. Browsers fetch this manifest file to apply the configurations to every HTTP response from that origin. To this end, all resource requests to the same origin are put on hold until the respective file is downloaded to take effect from the first request on. The manifest file is cached to avoid re-fetching on every resource load. Browsers store at most a single origin manifest per origin. A version identifier, communicated via the `Sec-Origin-Manifest` HTTP header, is used to distinguish manifest versions.

### 3.2 Configuration Structure
An origin manifest is a file in JSON format that contains up to five different sections: `baseline`, `fallback`, `augmentonly`, `cors-preflight`, and `unsafe-cors-preflight-with-credentials`. An example manifest file is shown in Listing 1.

```json
{
    "baseline": {
        "Strict-Transport-Security": "max-age=42"
    },
    "fallback": {
        "Content-Security-Policy": "default-src 'none'",
        "X-Frame-Options": "SAMEORIGIN"
    },
    "augmentonly": {
        "Set-Cookie": "secure"
    }
}
```

This structure allows for the definition of a baseline policy that applies to the entire origin, a fallback policy for unconfigured pages, and an `augmentonly` section for policies that can only be added, not overridden.