title:Raising the Bar: Evaluating Origin-wide Security Manifests
author:Steven Van Acker and
Daniel Hausknecht and
Andrei Sabelfeld
Raising the Bar: Evaluating Origin-wide Security Manifests
Chalmers University of Technology
Chalmers University of Technology
Steven Van Acker
Gothenburg, Sweden
Daniel Hausknecht
Gothenburg, Sweden
Andrei Sabelfeld
Chalmers University of Technology
Gothenburg, Sweden
ABSTRACT
Defending a web application from attackers requires the correct
conguration of several web security mechanisms for each and
every web page in that web application. This conguration process
can be dicult and result in gaps in the defense against web attack-
ers because some web pages may be overlooked. In this work we
provide a rst evaluation of the standard draft for an origin-wide
security conguration mechanism called the “origin manifest”. The
mechanism raises the security level of an entire web origin at once
while still allowing the specication of web security policies at
the web page level. We create prototype implementations of the
origin manifest mechanism for both the client-side and server-side,
and provide security ocers with an automated origin manifest
learner and generator to aid them with the conguration of their
web origins. To resolve potential collisions of policies dened by
the web origin with policies dened by web pages we formalize the
comparison and combination of web security policies and integrate
it into our prototype implementation. We evaluate the feasibility
of the origin manifest mechanism with a longitudinal study of pop-
ular websites to determine whether origin manifest les are stable
enough to not require frequent reconguration, and perform per-
formance measurements on the Alexa top 10,000 to determine the
network trac overhead. Our results show that the origin manifest
mechanism can eectively raise the security level of a web origin
while slightly improving network performance.
ACM Reference Format:
Steven Van Acker, Daniel Hausknecht, and Andrei Sabelfeld. 2018. Raising
the Bar: Evaluating Origin-wide Security Manifests. In Proceedings of 2018
Annual Computer Security Applications Conference (ACSAC ’18). ACM, New
York, NY, USA, 13 pages. https://doi.org/10.1145/3274694.3274701
1 INTRODUCTION
Today’s web connects billions of people across the planet through
interactive and increasingly powerful web applications. These web
applications are a complicated mix of components on both server-
and client-side. Unfortunately, current security mechanisms are
spread across the dierent components, opening up for inconsis-
tencies. Previous work [2, 17, 31, 39, 42] shows that it is hard to
securely congure and use these mechanisms.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specic permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274701
342
Web application security policies are typically transmitted through
HTTP headers from the server to the client. While most web secu-
rity mechanisms operate at the level of a single web page, some,
like HSTS [18] and HPKP [12], operate at the level of an entire web
origin. The web origin, or simply origin, dened as a combination
of the scheme, hostname and port, serves as the de facto security
boundary in web security. Security mechanisms, if miscongured
at the level for a single web page, may break the operation of an
entire origin. For these reasons, it is valuable to dene the scope of
a security policy at the origin level and meaningfully combine it
with application-specic policies for enforcement on the client side.
These considerations have prompted the web security community
to propose a draft to specify a security manifest [16, 41] to allow
denition of security policies at the origin level. The goal it to pro-
vide a backward-compatible origin-wide mechanism, so that security
ocers can harden web application security without imposing the
burden of a new mechanism on developers.
To illustrate the need for the origin manifest, consider a web
application for which the developers set a Content Security Policy
(CSP) [34] for every web page, while missing to congure CSP for
their custom 404 error page. If this page has a vulnerability, it puts
the entire web application at risk. This scenario is realistic [13,
19, 26], while not limited to error pages or CSP. For web pages
where security mechanisms are left uncongured, this motivates a
fallback policy: a default setting for a security policy.
Let us extend this example scenario with additional web appli-
cations hosted under the same web origin. The same-origin policy
(SOP) species that access between web origins is not allowed by
default. In our extended example the web applications are under
the same origin and a vulnerability in one application can poten-
tially put the others at risk since SOP as a security boundary does
not protect in this case. To raise the bar for attackers, origin man-
ifest provides a baseline policy for an entire origin: a minimum
origin-wide security setting which can not be overridden, only
reinforced.
Note that the baseline policy can not currently be implemented
by simply centralizing web security policies through e.g. the central
web server conguration [28]. In such a setup, when the central
conguration for a web security header is in conict with one set
by the web application, one header must be prioritized over the
other. The baseline policy combines both congurations so that the
result is at least as strong as each conguration.
An implementation of the origin manifest mechanism has been
initiated for the Chrome browser [40]. At the same time, there are
open questions [38] about the potential usefulness of the mecha-
nism. The following research questions are critical to determine
whether the origin manifest mechanism is going to make it or break
it: How to combine origin-wide and application-specic policies?
How to aid developers in conguring origin manifests? What is the
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
Steven Van Acker, Daniel Hausknecht, and Andrei Sabelfeld
expected lifespan of an origin manifest? Does the mechanism de-
grade performance or, on the contrary, can improve it? This paper
seeks to answer these research questions.
Security improvements through origin-wide baseline policies are
promising but the draft lacks details on how to resolve situations
in which policies dened by the origin collide with policies dened
by web pages. Consider a situation in which both origin and web
page dene dierent Strict-Transport-Security policies. The
problem is that Strict-Transport-Security does not allow mul-
tiple policy denitions for the same page, a situation the origin
manifest mechanism should specify how to resolve. To this end
we determined the need to compare the security level of security
policies, as well as the need to combine security policies into their
least upper bound and greatest lower bound. We formalize the com-
parison and combination of security policies as an extension of
the origin manifest mechanism and create an implementation for
practical evaluation. During implementation, we also realized that
baseline policies do not work well for certain security policies, such
as security ags for web cookies, necessitating the introduction of
augmentonly policies.
In real world deployments the security ocers responsible for a
web origin are not necessarily the developers of the web applica-
tions hosted under that origin. Therefore origin security ocers
do not always have full control over the congurations of the web
applications. Fortunately, origin manifest does not require this level
of control to take eect and web applications can stay untouched.
Nevertheless, a practical challenge is to dene suitable origin-wide
security policies with a certain level of desired security but without
breaking web applications hosted under the origin. A good starting
point is to identify and merge all policies deployed under an ori-
gin to create an origin manifest which covers the policies of each
web application. To support origin security ocers in this non-
trivial task we implemented a tool which can learn the deployed
security congurations of web applications under an origin. The
tool utilizes the policy combinator functions to generate an origin
manifest which is in accordance with all observed web applica-
tion policies. Origin security ocers can then rene this generated
origin manifest according to their requirements.
A stable origin manifest would reduce the workload on origin se-
curity ocers, but requires data on how frequently HTTP headers
tend to change in real-world web applications. To this end we con-
ducted an longitudinal empirical study over 100 days to analyze the
popularity, size and stability of HTTP headers. We used the origin
manifest learner and generator to derive origin manifests for each
visited origin to get a rst insight into the practical composition of
origin manifests over a longer period of time. One of our results is
an average origin manifest stability of around 18 days.
The origin manifest draft claims that HTTP headers are often
repeated and can occupy multiple KiB per request, an overhead
which can be reduced by sending the respective headers as part
of the origin-wide conguration. Cross Origin Resources Sharing
(CORS) preights, which query the server for permission to use
certain resources from dierent web origins, can be cached per
web origin to reduce network trac. Though intuitively this might
seem plausible we feel that both claims can benet from empirical
evidence and practical evaluation. To this end we rst implemented
a prototype for the origin manifest mechanism using proxies. We
then used the prototype in a large-scale empirical study to visit the
Alexa top 10,000 and to analyze the network trac without and
retrotted with origin manifest. Our results show that there is a
slight reduction of network trac when using origin manifests.
contributions include:
Addressing the above-mentioned research questions our main
• Extensions to the proposed origin manifest draft:
– A formal description of security policy comparison and
combination functions
– Introduction of a new augmentonly directive
• Automated origin manifest learner and generator1
• Evaluation with empirical evidence for:
– the feasibility of the origin manifest mechanism in the
form of a longitudinal study of the popularity, size and
stability of observed HTTP headers in the real world
– the origin manifest mechanism’s network trac overhead,
by measuring and studying the network trac while visit-
ing the Alexa top 10,000 retrotted with origin manifests
The rest of this paper is structured as follows: Section 2 describes
the web security mechanisms which the origin manifest mecha-
nism covers. Section 3 outlines the design of the origin manifest
mechanism. Section 4 formalizes comparisons and combinators for
security policies. Section 5 provides details of our prototypes that
implement the origin manifest mechanism. Section 6 deals with the
evaluation of our prototypes. We provide a general discussion in
Section 7, list related work in Section 8 and conclude in Section 9.
2 BACKGROUND
Browsers implement certain security-relevant mechanisms which
can be congured by servers via HTTP headers. The values of the
respective headers therefore represent a security policy enforced by
browsers. In this section we briey explain the security mechanisms
that can be congured with an origin manifest.
Set-Cookie. The Set-Cookie HTTP header allows the setting
of web cookies [3]. Cookies can be congured with additional
attributes such as httpOnly which makes the cookie inaccessible
from JavaScript, and secure which disallows the transmission of
the cookie over an insecure connection. These attributes form a
policy, specifying how cookies should be handled by browsers.
Content-Security-Policy (CSP). A CSP whitelists which content
is allowed to be loaded into a web page. To this end CSP denes
various directives for dierent content types such as scripts or
images but also for sub-frames or the base-uri conguration. The
directives whitelist the respectively allowed content. We use CSP
level 3 as specied in [34].
Cross-Origin Resource Sharing (CORS). By default the same-origin
policy does not permit accessing cross-origin resources. CORS [36]
allows web developers to explicitly allow a dierent origin from
accessing resources in their own origin. Under certain conditions,
e.g. when a request would have a side-eect on the remote side,
browsers will perform an upfront preight request to query whether
the actual request will be permitted. In contrast to other security
mechanisms, CORS access decisions are communicated through
1Our implementations available online on http://www.cse.chalmers.se/research/group/
security/originmanifest
343
Raising the Bar: Evaluating Origin-wide Security Manifests
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
sets of HTTP headers. The composition of the dierent CORS head-
ers forms a CORS policy. All CORS response header names follow
the pattern ’Access-Control-*’.
X-Content-Type-Options. Some browsers implement content-type
sning as a mechanism to verify if the expected content-type of
a loaded resource matches the content-type of the actually loaded
content. The HTTP response header X-Content-Type-Options:
nosniff disables this behavior.
X-XSS-Protection. Most browsers implement some form of cross-
site scripting (XSS) protection, although no standard exists. The
X-XSS-Protection header can congure this feature. For instance,
X-XSS-Protection: 1; mode=block will enable XSS protection
and will block the loading of the web page if an XSS attack is
detected.
Timing-Allow-Origin. Web browsers provide an API for access-
ing detailed timing information about resource loading. Cross-
origin access to this information can be controlled through the
Timing-Allow-Origin HTTP header [35]. By default cross-origin
access is denied. This header allows to dene a whitelist of permit-
ted origins.
Strict-Transport-Security. The HTTP header Strict Transport Se-
curity (HSTS) [18] is a mechanism to congure user agents to only
attempt to connect to a web site over secure HTTPS connections.
This policy can be rened through parameters to limit the policy
lifetime (max-age) or to extend the eects of the policy to subdo-
mains (includeSubDomains).
Public-Key-Pins. The HTTP header Public-Key-Pins (HPKP) [12]
allows to dene a whitelist of public key ngerprints of certi-
cates used for secure connections. If an origin’s certicate does
not match any of the whitelisted ngerprints for that origin, the
connection fails. HPKP policies have a lifetime as specied via the
max-age directive and can be extended to sub-domains through the
includeSubDomains directive. Note that this header is deprecated
for the Chrome browser [8].
X-Frame-Options. The HTTP header X-Frame-Options [29] de-
termines whether the response can be embedded in a sub-frame on
a web page. It accepts three values: DENY disallows all embedding,
SAMEORIGIN allows embedding in a web page from the same origin,
and ALLOW-FROM  allows embedding in a web page from
the specied origin. Because this mechanism is not standardized,
some directives such as e.g. ALLOW-FROM are not supported by all
browsers. This is why we do not consider ALLOW-FROM in our work.
In practice, CSP’s frame-ancestors directive is meant to obsolete
the use of this header [33].
3 MECHANISM DESIGN
The standard draft [41] and its explainer document [16] dene the
basic origin policy mechanism. We take it as the basis for our work
but dier in some parts, for example, by adding the augmentonly
section. In this section we describe the extended origin manifest
mechanism.
3.1 Overview
The origin manifest mechanism allows conguring an entire origin.
The origin provides this conguration as a manifest le under a
well-known location under the origin, according to the concept of
344
Well-Known URIs dened in RFC 5785 [25]. Browsers fetch this
manifest le to apply the congurations to every HTTP response
from that origin. To this end, all resource requests to the same
origin are put on hold until the respective le is downloaded in
order to take eect from the rst request on. The manifest le is
cached to avoid re-fetching on every resource load. Browsers store
at most a single origin manifest per origin. A version identier,
communicated via the Sec-Origin-Manifest HTTP header, is
used to distinguish manifest versions.
3.2 Conguration structure
An origin manifest is a le in JSON format which contains up to ve
dierent sections: baseline, fallback, augmentonly, cors-preflight
and unsafe-cors-preflight-with-credentials. An example
manifest le is shown in Listing 1.
{
  baseline  : {
  Strict - Transport - Security  :  max - age =42  ,
},
  fallback  : {
  Content - Security - Policy  :   default - src  none    ,
 X - Frame - Options  :   SAMEORIGIN  
},
  augmentonly  : {
  Set - Cookie  :   secure  
},