AWS servers in the US and start three current connections via three
mobile phones, plotting the allocated bandwidth by the primary
cell to the three phones in Figure 21(a). We see that the PBE-CC
flows quickly converge to the fair-share of the bottleneck band-
width. Jain’s fairness index [24] is 99.97 and 98.73% with two and
three concurrent flows (100% is ideal), respectively. Since we cannot
prevent all associated users from using the cellular network, we
observe light background traffic generated by a unknown user, in
this experiment. The PBE-CC flow also reacts quickly, fairly sharing
the bandwidth with background users.
6.4.2 RTT fairness. We investigate whether PBE-CC can guarantee
a fair-share of wireless link capacity between multiple flows with
(a) The first connection.
(b) The second connection.
Figure 20: The oneway delay and throughput achieved by
eight congestion control algorithms for two concurrent con-
nections between one device and two remote servers.
experiment using different congestion control algorithms.
We plot each algorithm’s throughput and delay in Figure 18,
from which, we see that only PBE-CC can simultaneously achieve
high throughput and low latency. The average throughput of PBE-
CC is 57 Mbit/s, comparable with CUBIC at 58 Mbit/s, and Verus
at 56 Mbit/s, but slightly smaller than BBR at 62 Mbit/s. But the
average and 95th percentile delay of PBE-CC is 61 ms and 71 ms,
much smaller than BBR at 147 ms and 227 ms, CUBIC at 252 ms and
416 ms, and Verus at 263 ms and 403 ms. To further demonstrate
PBE-CC’s and BBR’s reactions to competing traffic, we also plot the
throughput (averaged over every 200 millisecond interval) and the
delay of all received packets, in Figure 19, where the shaded areas
represent the time periods when the concurrent competing traffic
generated by the MIX3 is present. We see that PBE-CC accurately
tracks the entrance of the competitor and lowers its sending rate
promptly, resulting in nearly no packet queuing. PBE-CC immedi-
ately grabs the idle bandwidth when the competing traffic finishes
its flow, maximizing the achieved throughput. In contrast, BBR
cannot timely detects the decreasing capacity caused by competing
traffic, resulting significantly enlarged delay.
Single device multiple connections. In this section, we eval-
6.3.4
uate how PBE-CC performs in the scenario where one device si-
multaneously starts multiple connections with different remote
servers. Specifically, we let the MIX3 start two concurrent flows
with two AWS servers, each running for 40 seconds. We repeat the
experiments using different congestion control algorithms, and plot
each algorithm’s throughput and delay in Figure 20. We see that
PBE-CC achieves high throughput and low delay for both flows.
The average throughput is 26 Mbit/s and 28 Mbit/s, and the median
11
3060120240480One way delay (ms)020406080Throughput (Mbit/s)VerusVivacePCCPBEBBRCopaSproutCUBIC3060120240480Oneway delay (ms)01020304050Throughput (Mbit/s)BBRVerusCUBICPBEVivacePCCSproutCopa3060120240480Oneway delay (ms)01020304050Throughput (Mbit/s)PBECUBICVerusSproutBBRCopaPCCVivaceSIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Yaxiong Xie, Fan Yi, Kyle Jamieson
(a) Three PBE-CC flows with
similar RTTs.
Figure 21: The allocated PRBs (averaged over 50 subframes) by the primary cell to three mobile phones, when these three
mobile phones starts three PBE-CC flows with three AWS servers in US (a); three PBE-CC flows with two AWS servers in US
and one AWS server in Singapore (b); two PBE-CC flows with one BBR flow (c); two PBE-CC flows with one CUBIC flow (d).
(c) Two PBE-CC flows coexist
with one BBR flow.
(b) Three PBE-CC flows with
significant RTT differences.
(d) Two PBE-CC flows coexist
with one CUBIC flow.
significant differences in propagation delay. We use three mobile
phones to build concurrent connections with three AWS servers:
one in Singapore (average RTT of 297 ms) and two in the US (aver-
age RTTs of 52 ms and 64 ms). We plot the the primary cell allocated
PRBs for these connections in Figure 21(b). We see that the all three
PBE-CC flows with significant propagation delay differences obtain
similar allocated bandwidths. Jain’s fairness indices are 99.74% and
99.45% with two and three concurrent flows, respectively.
6.4.3 TCP friendliness. A common requirement from new conges-
tion control schemes is the capability of fairly sharing the available
bandwidth with existing congestion control algorithms like BBR
and CUBIC. We investigate the performance of PBE-CC in two cases:
two PBE-CC flows coexisting with one BBR flow, and two PBE-CC
flows coexisting with one CUBIC flow. Figures 21(c) and 21(d) depict
allocated PRBs for three connections in these cases, showing that
PBE-CC shares bottleneck bandwidth equally with both CUBIC
and BBR flows. Jain’s fairness index is 99.96% and 98.52% with two
and three concurrent flows in Figure 21(c), and 99.95% and 98.34%
with two and three flows in Figure 21(d). The base station fairness
policy prevents one user from grabbing all the bandwidth. Though
CUBIC and BBR may aggressively increase their sending rate, the
base station limits the total bandwidth they can obtain and forces
them to share with other concurrent flows.
7 DISCUSSION
Power consumption. In the connected state, a mobile device must
keep its radio on and decodes the control channel to check whether
the base station has data for it or not in each subframe. Therefore,
PBE-CC does not turn the radio of mobile device on for any extra
time than necessary currently and thus introduces no additional
power costs. The small computational overhead PBE-CC introduces
is that the mobile device may need to decode control messages that
are not transmitted to it. But, the number of extra control messages
inside each subframe the device needs to decode is very small, since
our experimental results shows that there are less than 4 control
messages inside more than 95% subframes. Furthermore, the control
messages are very short (less than 70 bits), so that decoding one
message only involves small extra computational overhead.
Packet buffering. PBE-CC works at or very close to the Kleinrock
TCP operating point [26, 27], which minimizes buffering, minimiz-
ing the delay. In practice, it could be beneficial to buffer some bytes
12
in the base station, which slightly increases delay but helps to im-
mediately utilize increases in connection throughput, before the
sender modulates its sending rate (congestion control has at least a
round trip time delay). In the future, we plan to extend PBE-CC to
enable the sender/app to adaptively adjust the buffering inside the
network, trading off increased delay for increased throughput.
Fairness policy. Currently, PBE-CC fairly shares idle bandwidth
among all active users in the connection start state. In the future,
PBE-CC can be modified to incorporate other fairness policies, e.g.,
active users with lower physical data rate grab larger bandwidth.
PBE-CC’s control algorithm adapts to an arbitrary fairness policy,
achieving equilibrium in the steady state.
Misreported congestion feedback. PBE-CC relies on the mobile
user to report the estimated capacity back to the server so it is
possible that a malicious user may report a data rate higher than
the network can support, triggering overwhelming number of data
being injected into the network, causing catastrophic impact. In
future work, PBE-CC can be extended to detect such malicious
users via implementing a server side BBR-like throughput esti-
mator, which estimates the currently achieved throughput purely
with timestamps of packets being sent and acknowledged, without
any involvement of the mobile user. By comparing the achieved
throughput and capacity reported by the user, PBE-CC identifies
any user who consistently reports a rate higher than the achievable
throughput as a malicious user.
8 CONCLUSION
PBE-CC is the first end-to-end congestion control algorithm to
seamlessly integrate mobile client-side wireless physical layer ca-
pacity measurement into its design, which is crucial for the multi-
cell design of 4G and 5G wireless networks. Our rigorous per-
formance evaluation featuring multi-locations, mobility, varying
background traffic levels, and varying RTTs shows that PBE-CC
outperforms many leading congestion control algorithms in both
latency and throughput. PBE-CC is also immediately deployable,
with modifications required solely to content servers and mobile
clients. This work does not raise any ethical issues.
ACKNOWLEDGEMENTS
We thank the anonymous SIGCOMM reviewers and our shepherd
for their valuable feedback that has improved the quality of this
paper. This work was supported by NSF grant CNS-1617161.
0102030405060Time (s)020406080100Resource blocksSamsung S8Redmi 8S8Background user'straffic0102030405060Time (s)020406080100Resource blocksRTT 52 msRTT 297 msRTT 64 ms0102030405060Time (s)020406080100Resource blocksPBE flow 1BBR flowPBE flow 20102030405060Time (s)020406080100Resource blocksPBE flow 1CUBIC flowPBE flow 2Congestion Control via Endpoint-Centric, Physical-Layer Bandwidth Measurements
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
REFERENCES
[1] 3GPP. 5G specifications. [3gpp.org].
[2] 3GPP. LTE Release 10. [3gpp.org].
[3] 3GPP. TS36.212: Evolved Universal Terrestrial Radio Access
(E-UTRA); Multiplexing and channel coding.
[4] 3GPP. TS36.213: Evolved Universal Terrestrial Radio Access
(E-UTRA); Physical layer procedures.
[5] T. Anderson, A. Collins, A. Krishnamurthy, J. Zahorjan. PCP:
Efficient endpoint congestion control. USENIX NSDI, 2006.
[6] V. Arun, H. Balakrishnan. Copa: Practical delay-based
congestion control for the internet. USENIX NSDI, 2018.
[7] A. Balasingam, M. Bansal, R. Misra, K. Nagaraj, R. Tandra,
S. Katti, A. Schulman. Detecting if LTE is the bottleneck with
bursttracker. ACM MobiCom, 2019.
[8] L. S. Brakmo, S. W. O’Malley, L. L. Peterson. TCP vegas: New
techniques for congestion detection and avoidance. ACM
SIGCOMM, 1994.
[9] N. Bui, J. Widmer. OWL: A reliable online watcher for LTE
control channel measurements. ACM AllThingsCellular, 2016.
[10] N. Cardwell, Y. Cheng, C. S. Gunn, S. H. Yeganeh, V. Jacobson.
BBR: Congestion-based congestion control. ACM Queue,
14(5), 2016.
[11] M. Dong, Q. Li, D. Zarchy, P. B. Godfrey, M. Schapira. PCC:
Re-architecting congestion control for consistent high
performance. USENIX NSDI, 2015.
[12] M. Dong, T. Meng, D. Zarchy, E. Arslan, Y. Gilad, B. Godfrey,
M. Schapira. PCC Vivace: Online-learning congestion control.
USENIX NSDI, 2018.
[13] Ettus. USRP B210. [ettus.com].
[14] Ettus. USRP X310. [ettus.com].
[15] S. Floyd, T. Henderson. RFC2582: The NewReno modification
to TCP’s fast recovery algorithm. RFC Editor, 1999.
[16] I. Gomez-Miguelez, A. Garcia-Saavedra, P. D. Sutton,
P. Serrano, C. Cano, D. J. Leith. srsLTE: An open-source
platform for LTE evolution and experimentation. ACM
WiNTECH, 2016.
[17] P. Goyal, A. Agarwal, R. Netravali, M. Alizadeh,
H. Balakrishnan. ABC: A simple explicit congestion control
protocol for wireless networks. USENIX NSDI, 2019.
[18] P. Goyal, M. Alizadeh, H. Balakrishnan. Rethinking
congestion control for cellular networks. ACM HotNets, 2017.
[19] S. Ha, I. Rhee, L. Xu. CUBIC: A new tcp-friendly high-speed
tcp variant. SIGOPS Oper. Syst. Rev., 42(5), 2008.
[20] M. Hock, R. Bless, M. Zitterbart. Experimental evaluation of
BBR congestion control. IEEE ICNP, 2017.
[21] J. Huang, F. Qian, Y. Guo, Y. Zhou, Q. Xu, Z. M. Mao, S. Sen,
O. Spatscheck. An in-depth study of LTE: Effect of network
protocol and application behavior on performance. ACM
SIGCOMM, 2013.
[22] IETF. IETF Mobile Throughput Guidance (MTG) . [ietf.org].
[23] V. Jacobson. Congestion avoidance and control. ACM
SIGCOMM, 1988.
[24] R. Jain. The art of computer systems performance analysis:
techniques for experimental design, measurement, simulation,
and modeling. John Wiley & Sons, 1990.
[25] D. Katabi, M. Handley, C. Rohrs. Congestion control for high
i
bandwidth-delay product networks. ACM SIGCOMM, 2002.
[26] L. Klein-rock. Power and deterministic rules of thumb for
probabilistic problems in computer communications. IEEE
ICC, 1979.
[27] L. Kleinrock. On flow control in computer networks. IEEE
ICC, 1978.
[28] S. Kumar, E. Hamed, D. Katabi, L. Erran Li. LTE radio
analytics made easy and accessible. ACM SIGCOMM, 2014.
[29] H. Lee, J. Flinn, B. Tonshal. RAVEN: Improving interactive
latency for the connected car. ACM MobiCom, 2018.
[30] W. K. Leong, Z. Wang, B. Leong. TCP congestion control
beyond bandwidth-delay product for mobile cellular
networks. ACM CoNEXT, 2017.
[31] Y. Li, C. Peng, Z. Yuan, J. Li, H. Deng, T. Wang. Mobileinsight:
Extracting and analyzing cellular network information on
smartphones. ACM MobiCom, 2016.
[32] F. Lu, H. Du, A. Jain, G. M. Voelker, A. C. Snoeren, A. Terzis.
CQIC: Revisiting cross-layer congestion control for cellular
networks. ACM HotMobile, 2015.
[33] S. Ma, J. Jiang, W. Wang, B. Li. Fairness of congestion-based
congestion control: Experimental evaluation and analysis.
arXiv:1706.09115, 2017.
[34] J. Padhye, V. Firoiu, D. Towsley, J. Kurose. Modeling tcp
throughput: A simple model and its empirical validation.
ACM SIGCOMM, 1988.
[35] S. Park, J. Lee, J. Kim, J. Lee, S. Ha, K. Lee. ExLL: An
extremely low-latency congestion control for mobile cellular
networks. ACM CoNEXT, 2018.
[36] Qualcomm qxdm tool. qualcomm.com.
[37] D. Scholz, B. Jaeger, L. Schwaighofer, D. Raumer, F. Geyer,
G. Carle. Towards a deeper understanding of TCP BBR
congestion control. IEEE IFIP Networking, 2018.
[38] A. Sivaraman, K. Winstein, P. Thaker, H. Balakrishnan. An
experimental study of the learnability of congestion control.
ACM SIGCOMM, 2014.
[39] K. Tan, J. Song, Q. Zhang, M. Sridharan. A compound TCP
approach for high-speed and long distance networks. IEEE
INFOCOM, 2006.
[40] R. Ware, M. K. Mukerjee, S. Seshan, J. Sherry. Modeling
BBR’s interactions with loss-based congestion control. ACM
IMC, 2019.
[41] D. X. Wei, C. Jin, S. H. Low, S. Hegde. FAST TCP: Motivation,
architecture, algorithms, performance. IEEE/ACM
Transactions on Networking, 2006.
[42] K. Winstein, H. Balakrishnan. TCP Ex Machina:
Computer-generated congestion control. ACM SIGCOMM,
2013.
[43] K. Winstein, A. Sivaraman, H. Balakrishnan. Stochastic
forecasts achieve high throughput and low delay over cellular
networks. USENIX NSDI, 2013.
[44] D. Wischik, C. Raiciu, A. Greenhalgh, M. Handley. Design,
implementation and evaluation of congestion control for
Multipath TCP. USENIX NSDI, 2011.
[45] X. Xie, X. Zhang, S. Kumar, L. E. Li. piStream: Physical layer
informed adaptive video streaming over LTE. ACM MobiCom,
2015.
[46] X. Xie, X. Zhang, S. Zhu. Accelerating mobile web loading
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Yaxiong Xie, Fan Yi, Kyle Jamieson
using cellular link information. ACM MobiSys, 2017.
[47] Q. Xu, S. Mehrotra, Z. Mao, J. Li. PROTEUS: Network
performance forecast for real-time, interactive mobile
applications. ACM MobiSys, 2013.
[48] F. Y. Yan, J. Ma, G. D. Hill, D. Raghavan, R. S. Wahby, P. Levis,
K. Winstein. Pantheon: The training ground for internet
congestion-control research. USENIX ATC, 2018.
[49] Y. Zaki, T. Pötsch, J. Chen, L. Subramanian, C. Görg. Adaptive
congestion control for unpredictable cellular networks. ACM
SIGCOMM, 2015.
ii