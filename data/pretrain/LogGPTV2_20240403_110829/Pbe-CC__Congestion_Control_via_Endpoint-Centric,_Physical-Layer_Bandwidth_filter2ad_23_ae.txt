### Bandwidth Allocation and Fairness in PBE-CC

#### Bandwidth Allocation
We initiated three concurrent connections via three mobile phones to AWS servers in the US. The allocated bandwidth by the primary cell to these three phones is illustrated in Figure 21(a). The PBE-CC flows rapidly converge to a fair share of the bottleneck bandwidth. Jain's fairness index [24] for two and three concurrent flows is 99.97% and 98.73%, respectively (100% being ideal). Despite our efforts, some background traffic from an unknown user was observed, which PBE-CC quickly and fairly shared with.

#### Round-Trip Time (RTT) Fairness
To investigate whether PBE-CC can ensure a fair share of wireless link capacity among multiple flows with varying RTTs, we conducted an experiment using different congestion control algorithms. The throughput and delay for two concurrent connections between one device and two remote servers are shown in Figure 20. PBE-CC achieved an average throughput of 57 Mbit/s, comparable to CUBIC (58 Mbit/s) and Verus (56 Mbit/s), but slightly lower than BBR (62 Mbit/s). However, PBE-CC's average and 95th percentile delay (61 ms and 71 ms) were significantly lower than BBR (147 ms and 227 ms), CUBIC (252 ms and 416 ms), and Verus (263 ms and 403 ms).

To further illustrate PBE-CC's and BBR's reactions to competing traffic, we plotted the throughput (averaged over every 200 milliseconds) and the delay of all received packets in Figure 19. The shaded areas represent periods when concurrent competing traffic from MIX3 was present. PBE-CC accurately detected the entrance of competitors and promptly reduced its sending rate, resulting in minimal packet queuing. When the competing traffic ceased, PBE-CC immediately seized the idle bandwidth, maximizing throughput. In contrast, BBR failed to timely detect the decreasing capacity, leading to significant delays.

#### Single Device Multiple Connections
We evaluated PBE-CC's performance when one device simultaneously starts multiple connections with different remote servers. Specifically, we initiated two concurrent flows from MIX3 to two AWS servers, each running for 40 seconds. The results, shown in Figure 20, indicate that PBE-CC achieved high throughput and low delay for both flows, with average throughputs of 26 Mbit/s and 28 Mbit/s.

#### RTT Differences
We used three mobile phones to establish concurrent connections with three AWS servers: one in Singapore (average RTT of 297 ms) and two in the US (average RTTs of 52 ms and 64 ms). The primary cell's allocated PRBs for these connections are depicted in Figure 21(b). Despite significant RTT differences, all three PBE-CC flows obtained similar bandwidth allocations. Jain's fairness indices were 99.74% and 99.45% for two and three concurrent flows, respectively.

#### TCP Friendliness
PBE-CC must fairly share available bandwidth with existing congestion control algorithms like BBR and CUBIC. We examined two scenarios: two PBE-CC flows coexisting with one BBR flow, and two PBE-CC flows coexisting with one CUBIC flow. Figures 21(c) and 21(d) show the allocated PRBs for these cases, indicating that PBE-CC equally shares bottleneck bandwidth with both CUBIC and BBR. Jain's fairness indices were 99.96% and 98.52% for two and three concurrent flows in Figure 21(c), and 99.95% and 98.34% in Figure 21(d). The base station's fairness policy prevents any single user from monopolizing the bandwidth, even if CUBIC and BBR aggressively increase their sending rates.

### Discussion

#### Power Consumption
In the connected state, a mobile device must keep its radio on and decode the control channel to check for data from the base station in each subframe. PBE-CC does not turn the radio on for any extra time, thus incurring no additional power costs. The small computational overhead involves decoding a few extra control messages, but our experimental results show that there are fewer than four control messages in over 95% of subframes, and each message is less than 70 bits long, resulting in minimal additional computational overhead.

#### Packet Buffering
PBE-CC operates at or near the Kleinrock TCP operating point [26, 27], minimizing buffering and delay. Some buffering in the base station can help immediately utilize increases in connection throughput before the sender adjusts its sending rate, though this slightly increases delay. Future work will extend PBE-CC to adaptively adjust buffering within the network, trading off increased delay for higher throughput.

#### Fairness Policy
Currently, PBE-CC fairly shares idle bandwidth among all active users. Future modifications could incorporate other fairness policies, such as giving more bandwidth to users with lower physical data rates. PBE-CC's control algorithm can adapt to any fairness policy, achieving equilibrium in the steady state.

#### Misreported Congestion Feedback
PBE-CC relies on mobile users to report estimated capacity back to the server. A malicious user might report a higher data rate, causing network congestion. Future work will include a server-side BBR-like throughput estimator to detect such malicious users by comparing reported and actual throughput.

### Conclusion
PBE-CC is the first end-to-end congestion control algorithm to integrate mobile client-side wireless physical layer capacity measurement, crucial for 4G and 5G networks. Our rigorous evaluation across multi-locations, mobility, varying background traffic, and RTTs shows that PBE-CC outperforms leading congestion control algorithms in latency and throughput. PBE-CC is immediately deployable, requiring modifications only to content servers and mobile clients, and raises no ethical issues.

### Acknowledgements
We thank the anonymous SIGCOMM reviewers and our shepherd for their valuable feedback. This work was supported by NSF grant CNS-1617161.

### References
[1] 3GPP. 5G specifications. [3gpp.org].
[2] 3GPP. LTE Release 10. [3gpp.org].
[3] 3GPP. TS36.212: Evolved Universal Terrestrial Radio Access (E-UTRA); Multiplexing and channel coding.
[4] 3GPP. TS36.213: Evolved Universal Terrestrial Radio Access (E-UTRA); Physical layer procedures.
[5] T. Anderson, A. Collins, A. Krishnamurthy, J. Zahorjan. PCP: Efficient endpoint congestion control. USENIX NSDI, 2006.
[6] V. Arun, H. Balakrishnan. Copa: Practical delay-based congestion control for the internet. USENIX NSDI, 2018.
[7] A. Balasingam, M. Bansal, R. Misra, K. Nagaraj, R. Tandra, S. Katti, A. Schulman. Detecting if LTE is the bottleneck with bursttracker. ACM MobiCom, 2019.
[8] L. S. Brakmo, S. W. O’Malley, L. L. Peterson. TCP vegas: New techniques for congestion detection and avoidance. ACM SIGCOMM, 1994.
[9] N. Bui, J. Widmer. OWL: A reliable online watcher for LTE control channel measurements. ACM AllThingsCellular, 2016.
[10] N. Cardwell, Y. Cheng, C. S. Gunn, S. H. Yeganeh, V. Jacobson. BBR: Congestion-based congestion control. ACM Queue, 14(5), 2016.
[11] M. Dong, Q. Li, D. Zarchy, P. B. Godfrey, M. Schapira. PCC: Re-architecting congestion control for consistent high performance. USENIX NSDI, 2015.
[12] M. Dong, T. Meng, D. Zarchy, E. Arslan, Y. Gilad, B. Godfrey, M. Schapira. PCC Vivace: Online-learning congestion control. USENIX NSDI, 2018.
[13] Ettus. USRP B210. [ettus.com].
[14] Ettus. USRP X310. [ettus.com].
[15] S. Floyd, T. Henderson. RFC2582: The NewReno modification to TCP’s fast recovery algorithm. RFC Editor, 1999.
[16] I. Gomez-Miguelez, A. Garcia-Saavedra, P. D. Sutton, P. Serrano, C. Cano, D. J. Leith. srsLTE: An open-source platform for LTE evolution and experimentation. ACM WiNTECH, 2016.
[17] P. Goyal, A. Agarwal, R. Netravali, M. Alizadeh, H. Balakrishnan. ABC: A simple explicit congestion control protocol for wireless networks. USENIX NSDI, 2019.
[18] P. Goyal, M. Alizadeh, H. Balakrishnan. Rethinking congestion control for cellular networks. ACM HotNets, 2017.
[19] S. Ha, I. Rhee, L. Xu. CUBIC: A new tcp-friendly high-speed tcp variant. SIGOPS Oper. Syst. Rev., 42(5), 2008.
[20] M. Hock, R. Bless, M. Zitterbart. Experimental evaluation of BBR congestion control. IEEE ICNP, 2017.
[21] J. Huang, F. Qian, Y. Guo, Y. Zhou, Q. Xu, Z. M. Mao, S. Sen, O. Spatscheck. An in-depth study of LTE: Effect of network protocol and application behavior on performance. ACM SIGCOMM, 2013.
[22] IETF. IETF Mobile Throughput Guidance (MTG). [ietf.org].
[23] V. Jacobson. Congestion avoidance and control. ACM SIGCOMM, 1988.
[24] R. Jain. The art of computer systems performance analysis: techniques for experimental design, measurement, simulation, and modeling. John Wiley & Sons, 1990.
[25] D. Katabi, M. Handley, C. Rohrs. Congestion control for high bandwidth-delay product networks. ACM SIGCOMM, 2002.
[26] L. Kleinrock. Power and deterministic rules of thumb for probabilistic problems in computer communications. IEEE ICC, 1979.
[27] L. Kleinrock. On flow control in computer networks. IEEE ICC, 1978.
[28] S. Kumar, E. Hamed, D. Katabi, L. Erran Li. LTE radio analytics made easy and accessible. ACM SIGCOMM, 2014.
[29] H. Lee, J. Flinn, B. Tonshal. RAVEN: Improving interactive latency for the connected car. ACM MobiCom, 2018.
[30] W. K. Leong, Z. Wang, B. Leong. TCP congestion control beyond bandwidth-delay product for mobile cellular networks. ACM CoNEXT, 2017.
[31] Y. Li, C. Peng, Z. Yuan, J. Li, H. Deng, T. Wang. Mobileinsight: Extracting and analyzing cellular network information on smartphones. ACM MobiCom, 2016.
[32] F. Lu, H. Du, A. Jain, G. M. Voelker, A. C. Snoeren, A. Terzis. CQIC: Revisiting cross-layer congestion control for cellular networks. ACM HotMobile, 2015.
[33] S. Ma, J. Jiang, W. Wang, B. Li. Fairness of congestion-based congestion control: Experimental evaluation and analysis. arXiv:1706.09115, 2017.
[34] J. Padhye, V. Firoiu, D. Towsley, J. Kurose. Modeling tcp throughput: A simple model and its empirical validation. ACM SIGCOMM, 1988.
[35] S. Park, J. Lee, J. Kim, J. Lee, S. Ha, K. Lee. ExLL: An extremely low-latency congestion control for mobile cellular networks. ACM CoNEXT, 2018.
[36] Qualcomm qxdm tool. qualcomm.com.
[37] D. Scholz, B. Jaeger, L. Schwaighofer, D. Raumer, F. Geyer, G. Carle. Towards a deeper understanding of TCP BBR congestion control. IEEE IFIP Networking, 2018.
[38] A. Sivaraman, K. Winstein, P. Thaker, H. Balakrishnan. An experimental study of the learnability of congestion control. ACM SIGCOMM, 2014.
[39] K. Tan, J. Song, Q. Zhang, M. Sridharan. A compound TCP approach for high-speed and long distance networks. IEEE INFOCOM, 2006.
[40] R. Ware, M. K. Mukerjee, S. Seshan, J. Sherry. Modeling BBR’s interactions with loss-based congestion control. ACM IMC, 2019.
[41] D. X. Wei, C. Jin, S. H. Low, S. Hegde. FAST TCP: Motivation, architecture, algorithms, performance. IEEE/ACM Transactions on Networking, 2006.
[42] K. Winstein, H. Balakrishnan. TCP Ex Machina: Computer-generated congestion control. ACM SIGCOMM, 2013.
[43] K. Winstein, A. Sivaraman, H. Balakrishnan. Stochastic forecasts achieve high throughput and low delay over cellular networks. USENIX NSDI, 2013.
[44] D. Wischik, C. Raiciu, A. Greenhalgh, M. Handley. Design, implementation and evaluation of congestion control for Multipath TCP. USENIX NSDI, 2011.
[45] X. Xie, X. Zhang, S. Kumar, L. E. Li. piStream: Physical layer informed adaptive video streaming over LTE. ACM MobiCom, 2015.
[46] X. Xie, X. Zhang, S. Zhu. Accelerating mobile web loading using cellular link information. ACM MobiSys, 2017.
[47] Q. Xu, S. Mehrotra, Z. Mao, J. Li. PROTEUS: Network performance forecast for real-time, interactive mobile applications. ACM MobiSys, 2013.
[48] F. Y. Yan, J. Ma, G. D. Hill, D. Raghavan, R. S. Wahby, P. Levis, K. Winstein. Pantheon: The training ground for internet congestion-control research. USENIX ATC, 2018.
[49] Y. Zaki, T. Pötsch, J. Chen, L. Subramanian, C. Görg. Adaptive congestion control for unpredictable cellular networks. ACM SIGCOMM, 2015.