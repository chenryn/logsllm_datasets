title:Don't throw me away: Threats Caused by the Abandoned Internet Resources
Used by Android Apps
author:Elkana Pariwono and
Daiki Chiba and
Mitsuaki Akiyama and
Tatsuya Mori
Don’t throw me away: Threats Caused by the Abandoned
Internet Resources Used by Android Apps
Elkana Pariwono
Daiki Chiba
Waseda University
NTT Secure Platform Laboratories
Tokyo, Japan
PI:EMAIL
Tokyo, Japan
PI:EMAIL
Mitsuaki Akiyama
NTT Secure Platform Laboratories
Tokyo, Japan
PI:EMAIL
Tatsuya Mori
Waseda University
Tokyo, Japan
PI:EMAIL
ABSTRACT
This study aims to understand the threats caused by abandoned
Internet resources used by Android apps. By abandoned, we mean
Internet resources that support apps that were published and are
still available on the mobile app marketplace, but have not been
maintained and hence are at risk for abuse by an outsider. Inter-
net resources include domain names and hard-coded IP addresses,
which could be used for nefarious purposes, e.g., stealing sensitive
private information, scamming and phishing, click fraud, and inject-
ing malware distribution URL. As a result of the analysis of 1.1 M
Android apps published in the official marketplace, we uncovered
3,628 of abandoned Internet resources associated with 7,331 avail-
able mobile apps. These resources are subject to hijack by outsiders.
Of these apps, 13 apps have been installed more than a million of
times, a measure of the breadth of the threat. Based on the find-
ings of empirical experiments, we discuss potential threats caused
by abandoned Internet resources and propose countermeasures
against these threats.
CCS CONCEPTS
• Security and privacy → Mobile platform security;
KEYWORDS
Android Security; Mobile Apps Measurement; Mobile computing
security
ACM Reference Format:
Elkana Pariwono, Daiki Chiba, Mitsuaki Akiyama, and Tatsuya Mori. 2018.
Don’t throw me away: Threats Caused by the Abandoned Internet Resources
Used by Android Apps. In ASIA CCS ’18: 2018 ACM Asia Conference on
Computer and Communications Security, June 4–8, 2018, Incheon, Republic of
Korea. ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3196494.
3196554
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/3196494.3196554
1 INTRODUCTION
Access to the Internet enables mobile applications (apps) to offer
various rich features such as voice recognition, real-time cryptocur-
rency chart fetching, and personalized weather forecasts notifica-
tions. The working principle behind these features is that huge and
complex computational task/data can be stored on the server-side
rather than inside each mobile device. This transfer of service/-
data to the network enables the mobile apps to be light-weight
while keeping the rich functionalities because the developers can
make use such services/data via API. Moreover, the transfer of ser-
vice/data eases the development of Internet-connected mobile apps.
Consequently, it is common for mobile apps to require Internet
permission. All these services that support mobile apps run on top
of Internet resources (e.g., domain name, public IP address, or cloud
server).
The problem that we addressed in our study is related to Internet
resources used by a mobile app that may be abandoned and there-
fore at risk for attack even though the app is still available on a
mobile app marketplace. In the following, we present how Internet
resources are abandoned. For instance, to keep Internet resources
such as domain name and server in the cloud running, developers
need to pay and maintain the resources. However, once an app is
published, the developer does not tend to maintain it. This appears
to be a common trend in mobile app development. Derr et al. [23]
conducted a survey on the developers of Android mobile apps and
found that 78% (158 out of 203) of developers do not regularly up-
date their published app. Moreover, 66% of the developers are not
full time developers. These statistics imply that the lack of cost and
maintenance is likely to happen on the published apps; hence, the
Internet resource used by the apps will also suffer from the lack of
maintenance. Such resources will be automatically released after
several periods of time and the change of resource ownership could
happen, i.e., the resources are abandoned.
As we will discuss in Section 7, the problem of generic abandoned
Internet resources has been studied by researchers [27, 30, 33]. Al-
though these previous studies have addressed the threats of aban-
doned Internet resources, no such study has been conducted on
mobile apps and their users, who are the potential victims of hi-
jacked resources. In addition, the impact of a change in ownership
of an Internet resource depends on by whom and how the resource
Session 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea147was used. Thus, the existence of abandoned Internet resources used
by mobile apps raises a new security problem to be addressed.
In order to shed light on the problem, we conducted a large-scale
empirical study to understand the potential threats of abandoned
Internet resources used by mobile apps. By searching through hun-
dreds of thousands of Android apps, we were able to confirm the
existence of these resources inside the code. To understand how
Internet resources are being used, we took samples of some of the
resources, acquired the resources and collected incoming data from
users who had apps that made use of the resources. We discovered
that even though a resource has been abandoned and the app is no
longer updated, there is still a lot of traffic from mobile users. Fi-
nally, we analyzed the threats and present generic attacker models
that could be used to exploit this vulnerability.
The contributions of this work can be summarized as follows:
• We highlight a new security problem related to abandoned
Internet resources from the perspective of a mobile platform
and its users. We identify all possible types of abandoned
Internet resources that might exist inside mobile apps.
• Our large-scale empirical study revealed that the threat
caused by abandoned Internet resources used by mobile app
is real and pervasive. We found 3,628 abandoned Internet
resources, which are used by 7,331 apps in our measurement
study. Among them are 13 apps with 1,000,000+ installations.
Our study further revealed that abandoned resources used
by third party library had the most widespread impact.
• Our measurement study of these resources revealed several
abandoned resources that receive a lot of traffic from Android
users and even cross platform users such as iPhone users.
In addition, we observed personally identifiable information
such as user device ID, and geolocation, which could be used
to track the owner of the device.
• As previous studies have noted, the root of the problem is the
change in ownership of services that are caused by mobile
apps. We discussed possible mitigations of this problem for
mobile apps stakeholders.
Roadmap. Section 2 provides background information on the types
of abandoned Internet resources. Section 3 describes the method-
ologies that we used for our measurement and analysis. In Section 4
and 5, we present our findings through large-scale measurement
and several case studies that demonstrate the threats, respectively.
Section 6 provides a discussion of the limitation of our approach,
possible countermeasures against the attack, and the ethical con-
siderations. Section 7 summarizes the related work, and Section 8
concludes the paper with a summary.
2 BACKGROUND
2.1 Internet-assisted Apps
To provide rich features, mobile apps make use of services that
reside on the Internet. Figure 1 illustrates how a mobile app is sup-
ported by Internet resources. The app is a news app that gets cur-
rency exchange information from a public web service (currency.
example.org). It also fetches advertisement through ad library
(adserver.example.com). From the perspective of the ownership/-
types of the service, we can divide the services into two categories
as shown in Figure 2; i.e., the private service managed by an app
Figure 1: An Example of an Internet-assisted App.
Figure 2: Possible Owners/Types of the Internet Resources.
Left: Resource Owner is an App Developer (Private Service),
Middle: Resource Owner is a Developer of the Third-Party
Library (Public Service), Right: Resource is Owned by a
Third-Party Provider (Public Service).
developer (first party) and public service managed by third-party
providers.
A Private service is usually offered as a backend service to sup-
port the main function of the app. App developers create, manage,
and own the service/resources. Running such a service on top of a
cloud server is a common approach as it is usually easier to have
scalability. Also, developers do not need to maintain physical hard-
ware. For the ease of changes, contacting the server using a domain
name is common practice. The developer can change the IP address
of the server without having to update the source code.
In contrast, a public service is created, managed, and owned by
third-party providers. To access the public service, it may require
app developers to include their library (e.g., Facebook Android
SDK [8] and ad library); the library will then handle communica-
tions with the server. Some other type of public services can be
used directly with HTTP calls and authentication key. Typically,
the service is a REST API service that communicates with the apps
by using HTTP or HTTPS for more secure data transportation. The
type of service used by mobile apps is not limited to API server.
Certain type of apps named Mobile web apps load the content of
specific websites into the app by using WebView. Thus the service
can also be in the form of a website and that can also be divided
within the public service category.
getAds();adserver.example.comgetContent();http://api.xyz.exampletoday's	rate	1€	=	$1,3220Third	partylibRe-register192.0.2.100currency.example.org Session 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea148Hardcoded IP Addresses in Cloud. It is also common for mobile
apps to connect to a service using an IP address. We illustrate such
an example with Listing 1. For the price of losing flexibility with
a change in server address, the app will run faster, since there is
no need to resolve the domain name into the IP address. As in the
case of dangling records, a cloud IP address can be obtained by an
attacker once it is released.
Listing 1: Example of Hardcoded IP Address in Android
Code.
public static String _activity_create(boolean p6){
String v0_1 = new anywheresoftware.b4a.samples.httputils2.httpjob();
v0_1._download("http://54.214.241.xxx/fugleshow.db");
}
2.3 Widespread Impact
As shown in Figure 2, there are three types of owners of Internet
resources that support mobile apps. Depending on the resource
owner, the effect of a hijack could vary:
Private Service. The same developer that developed the mobile
app manages the resource. Hijacking the resource will affect those
apps developed by the developer which is connected to this resource.
The worst case scenario would be if the developer developed a lot
of apps that are connected to this private service. A developer could
also have a domain with subdomains as the backend service for
each type of app created. The attacker only needs to obtain this
domain to take control of all the apps including those connected to
the subdomains.
Third-Party Library. A third-party library uses resources in the
Internet to support its functionality. The library might be used
by a lot of different apps. This means that if an attacker obtains
the Internet resource, then all apps that use the library can be
attacked. An example of this kind of resource is the advertising
library. Usually, to insert an advertisement in the app, the developer
includes the advertisement library, which manages the process for
contacting an Internet server to retrieve the ad. If an attacker gets
hold of the server by re-registering the domain or obtaining the
server IP address, then the attacker can take control of all apps that
use this library.
Third-Party Service. Mobile apps could also consume a publicly
open service that is managed by another developer. This could be a
service created solely to support specific features of mobile apps
(e.g., push notification server and mobile analytics service). It could
also be in the form of a general service such as a generic website that
contains relevant information or feature (URL shortening website,
RSS Feeds of news website, etc.). The owner might not know the
service is used by a mobile app. This kind of service is also subject
to abandonment [30]. When the owner of the service abandons
the service, the mobile app developer who is still interested in
maintaining the app has to switch to another service with the same
features or information. A third-party service differs from a third-
party library in the sense that developers do not have to include
any library in their apps.
3 METHODOLOGY
So far we have discussed the kind of abandoned Internet resources
that might be used by mobile apps, our next step is confirming
Figure 3: Hijacking Internet Resource Used by Mobile Apps.
2.2 Hijack-able Internet Resource Used by
Mobile App
A domain name associated with a mobile app could expire if the
owner does not renew it. Once it expires, the change in domain
name ownership may occur and a new owner assumes control of all
operations performed by the mobile app through the server using
that domain name. Figure 3 illustrates how an adversary can get
her/his hand on the abandoned Internet resource. The developer of
the app might realize that some of the app features do not work as
intended because the Internet resource that supports their functions
is no longer alive. While developers may decide to fix the problem,
Mutchler et al. reported in [32] that a majority of mobile developers
do not maintain their apps once published. This means that many
of the apps with expired domains will likely remain unfixed. The
following are three types of resources found inside Android apps
that can be taken over by the attacker:
Expired Domain. When a domain expires and the owner of the do-
main fails to renew it, another person could re-register the domain.
As discussed in many previous studies, the purpose of re-registering
are sometimes related to malicious activity. In this research, we
focus exclusively on expired domains used by mobile apps and the
potential threat to mobile users.
Parked Domain. An expired domain name might end up as a
parked domain, which is an active domain that is available for pur-
chase and may be used in the meantime by the parking domain
service for pay-per-click advertisement. If the domain was previ-
ously used by mobile apps, there may be a lot of traffic coming to
the domain that will raise its price. While these types of domains
are expensive, there still exists the possibility of hijacking a mobile
app service through a domain purchase.
Dangling Records (Dare). Liu et al. [30] are the first to introduce
the term, which refers to domains that are still valid but associated
with resources that are no longer alive and can be obtained by other
persons. One type of Dare is the IP address in Cloud Dare. The
domain name points to an IP address on a cloud (e.g., Amazon EC2
and Microsoft Azure). Once a pre-owned IP address is released,
another person can obtain the IP address and abuse the domain. In
practice, the cloud server is an ideal option for running a backend
service, especially for a startup company. The developer can grad-
ually increase the server resource once the app gains popularity.
However, if the business does not do well, the leased cloud server
is the first to be abandoned as it costs more and has a shorter lease
term than the domain.
 Session 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea149Figure 4: Methodology Overview.
the existence of abandoned Internet resources associated with mo-
bile apps by conducting a measurement study. An overview of our
methodology is provided in Figure 4. From this study, we attempted
to understand the security implications of abandoned Internet re-
sources.
3.1 Dataset
Because the main cause of abandoned Internet resources is lack
of maintenance, it is likely that we will find abandoned Internet
resources by analyzing apps that have not been updated for a while.
To this end, we used the Playdrone dataset published by Viennot et
al. [37]. They collected over 1,100,000 of free Android apps from
Google Play in 2014 and later published the apps for use in the
research community. Since the dataset is a snapshot of Google Play
in 2014, the most recent apps in the dataset are at least three years
old when we conducted our study.
Using this dataset, we first selected all the apps that had Internet
permission. As our interest was to demonstrate the real threat of
abandoned Internet resource used by mobile app, we only included
apps that were still available on Google Play in our analysis. We
searched the package name of application in Google play to see if it
were available, reviewed the web page, and eliminated the apps that
were no longer available in Google Play. We also confirmed that
the app in our dataset was the same as the one currently published
in Google Play by comparing the published date and version code.
We did this check to ensure that the apps have not been updated
since 2014. The published date was available in the web page, while
the version code was obtained utilizing API calls to Google Play,
leveraging the Python library provided in [2]. We also collected the
name of the app developer.
Of the 811,679 APKs in our dataset which were still available,
in Google Play, 585,089 APKs require Internet permission. The
version code analysis resulted to 180,865 of the APKs that did not
give information about version code, meanwhile 292,788 APKs had
different version code with APKs in our dataset. Technically, when
a developer updates an app, they have to update the version code,
upload the APK to Google Play, and the last update date will be
updated automatically. However, we found 7,595 apps that had same