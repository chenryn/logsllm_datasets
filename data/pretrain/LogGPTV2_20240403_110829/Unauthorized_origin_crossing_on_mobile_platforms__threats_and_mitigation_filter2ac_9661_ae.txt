### Origin-Based Protection and Its Implementation

To ensure that only the Dropbox app can invoke specific schemes, our reference monitor restricts the origin of these invocations. This effectively prevents attacks from malicious web pages (e.g., through Facebook or Google Plus apps). For the attack using the Yelp app (as described in Section 3.3.2), the issue arises because the Facebook app cannot distinguish whether the message originates from Yelp or a malicious website accessed by the Yelp app's WebView. With Morbs, the true origin is revealed, allowing Facebook to block the attack. Note that these fixes were not implemented on iOS.

#### Mediating Issues in Web-Accessing Utility Classes

For the WebView callback within the Facebook app (Section 3.4.1), the callback should only respond if the URL is from a domain under Facebookâ€™s control. By specifying "https://*.facebook.com" as the whitelist for the UIWebViewDelegate class, Morbs ensures that events from "attacker.com" are ignored, while those from "facebook.com" are handled. Similarly, for the HttpClient class (Section 3.4.2), setting "https://*.dropbox.com" as the legitimate origin in the Dropbox app prevents the adversary from stealing the authentication header via non-dropbox.com URLs, even after crossing origins through the next-intent channel.

### Performance Evaluation

We evaluated Morbs on a Nexus 4 development phone, comparing its overhead with the overall delay experienced without it. We used Java API `nanoTime` to measure timing at a precision of 1 nanosecond, repeating each operation 10 times to get the average execution time. The operations included setting policies and checking policy compliance, with the latter being the focus.

#### Performance of Morbs Operations

On Android with Morbs, we tested the `setOriginPolicy` API, which took an average of 0.354 ms. Compliance checks, which involve searching the policy database, took an average of 0.219 ms. The impact of Morbs on intent, scheme, and utility class communications was negligible, below 1%.

#### Impacts on Mobile Communications

The one-time cost of setting policies is minimal, and policies declared in manifest files do not affect app operations. For intent communication, the average delay was 42.142 ms for the same app and 46.267 ms for different apps, with Morbs adding an average 0.219 ms, resulting in a 0.5% impact. For scheme messages, the impact was 0.3%. For web-related operations, the delays were 225.035 ms for HttpClient and 692.955 ms for WebView, making the 0.219 ms Morbs check unnoticeable.

### Compatibility and Developer Effort

Morbs aims to maintain compatibility and minimize developer effort. We tested top 20 free apps from Google Play, finding no behavioral deviations with or without Morbs. Developers only need to specify whitelists through provided interfaces, such as the `setOriginPolicy` API, simplifying the process compared to case-by-case fixes.

#### Comparison of Current Fixes and Morbs Fixes

| Problem | Fix w/o Morbs | Fix w/ Morbs |
|---------|---------------|--------------|
| Next-Intent (Section 3.2.1) | Change architecture of the Dropbox and Facebook apps | No modification |
| Fbconnect (Section 3.3.1) | Deprecate fbconnect feature (several months) | Add recipient whitelist header in HTTP response |
| Dropbox SDK (Section 3.3.2) | Change both Dropbox apps and SDKs | Specify sender whitelist in .plist file |
| Yelp (Section 3.3.2) | Unknown | No modification |
| Callback Exploit (Section 3.4.1) | Unknown | Specify sender whitelist in WebViewClient |
| HttpClient Exploit (Section 3.4.2) | Add code to check URL origin in Dropbox app | Specify recipient whitelist in HttpClient |

### Related Work

Origin-based protection is fundamental in web browsers, enforced through the same-origin policy (SOP) to prevent unauthorized access. Our research extends this concept to mobile applications, addressing vulnerabilities and providing a consistent method for setting and enforcing origin-based security policies.