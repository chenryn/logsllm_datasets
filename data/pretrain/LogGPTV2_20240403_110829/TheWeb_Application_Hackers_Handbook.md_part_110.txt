8, 244, 504–511 blacklist-based, 451–452 output validation, 493–495
anti-CSRF tokens, 508–509, IE, 479–481 preventing, 492–496
516–517 web browsers, 479–481 refl ected XSS compared to,
XSS defeating, 510–511 HTML tag pairs, 422 439–440
authentication, 507–508 IE fi lter, 479–481 search function, 439
fl aws JavaScript, 436–438 uploaded fi les testing,
exploiting, 506–507 non-HTTP services, 562–563 484–487
preventing, 508–510 NULL bytes, 460 vulnerabilities
real-world, 505 POST request changed to GET identifying, 451–452
hacker’s methodology, 820 request, 474–475 low-risk, 451
session management, 251 prevalence, 432 varieties, 433–442
cross-site scripting (XSS), 8 preventing, 492–498 XSS Shell, 566
attack payloads, 443–447 real-world, 442–443 cryptographic algorithms, 687
autocomplete, 446 refl ected, 434–438 CSRF. See cross-site request
escalating client-side, 447 Apache, 442 forgery
bbiinnddeexx..iinndddd 885599 88//1199//22001111 1122::0011::3355 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 860
860 Index n D–D
CSS. See Cascading Style Sheets data harvesting, 572 information_schema,
Curl, 788 basic approach, 584–586 309–310
custom development, web Burp Intruder, 598–600 MS-SQL
applications, 10 causes, 583–584 attackers, 326–327
custom encoding, path traversal JAttack, 585–586 automated exploitation, 330
vulnerabilities, 377–378 uses, 584 batch queries, 317
customized automation data stores. Seealso Extensible default lockdown, 326–327
barriers to, 602–612 Markup Language; error messages, 334–338
Burp Intruder, 590–602 Lightweight Directory out-of-band channels, 317
data harvesting attack, Access Protocol; Structured syntax, 332–334
598–600 Query Language WAITFOR command, 322–323
enumerating identifi ers accessing, 288–289 Oracle
attack, 594–597 NoSQL, 342–343 attackers, 327
fuzzing attack, 600–602 privilege level, 287 11g, 318
CAPTCHA puzzles, 610–612 web applications relying on, error messages, 334–338
attackers, 610–611 287 out-of-band channels,
automatically solving, data transmission. Seealso user 317–318
611–612 input syntax, 332–334
humans solving, 612 back-end components, 357 time delays, 323–324
data harvesting, 572 browser extensions UNION operator, 307–308
basic approach, 584–586 intercepting, 135–139 searchable and sortable,
Burp Intruder, 598–600 obstacles, 138–139 321–322
causes, 583–584 serialized data, 136–138 stored procedures, 339
JAttack, 585–586 client-side, 118–127 Davtest, 680
uses, 584 ASP.NET ViewState, DBA. See database administrator
effi ciency, 571 124–127 debuggers
enumerating identifi ers, for developers, 118 browser extensions attaching,
572–583 hacker’s methodology, 801 151–152
basic approach, 574 hidden HTML forms, 118–120 error messages, 425–426,
Burp Intruder, 594–597 HTTP cookies, 121 618–619
detecting hits, 574–576 opaque data, 123–124 common, 619
examples, 573 Referrer header, 122 hacker’s methodology,
HTTP status code, 574 security, 154–156 application mapping, 798
JAttack, 577–583 URL parameters, 121–122 hacker’s methodology, browser
Location header, 575 lazy load approach, 626 extensions, 803–804
response body, 575 opaque, 123–124 Java, 151–152
response length, 574–575 attackers, 124 messages
scripting, 576–577 database administrator (DBA), application logic fl aws,
Set-Cookie header, 575 325–326 424–426
time delays, 575–576 TheDatabaseHacker’sHandbook, verbose, 425
fuzzing, 572–573 326 Silverlight, 152
Burp Intruder, 600–602 databases web server, 671–672
JAttack, 588–590 access declarative access controls,
ASP.NET API methods, 721 282–283
objective, 586–587
Java API methods, 714–715 decompiling
strings, 587
Perl language API methods, browser extensions, 139–150
session-handling mechanisms,
737–738 bytecode, 139–141
602–609
code components bytecode obfuscation,
standalone vulnerability
dangerous, 742 144–146
scanners, 780–781
SQL injection, 741–742 Java applets example, 146–150
uses, 572–573
error messages, 619–622 JavaScript manipulating
Cygwin environment, 577
encryption oracle, 620–622 original bytecode, 144
information disclosure, source code, 142–144
D 619–620 hacker’s methodology, browser
DAC. See discretionary access XSS in, 620 extensions, 802–803
control escalation attacks, Jad, Java, 148–150
data capture. See cross-domain 319, 325–328 decryption algorithms, 650
data capture fi ngerprinting, 303–304 default content
bbiinnddeexx..iinndddd 886600 88//1199//22001111 1122::0011::3355 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 861
Index n E–E 861
hacker’s methodology, document object model (DOM), ECMAScript for XML (E4X), 463
application mapping, 797 61 JavaScript hijacking, 523–524
web server, 671–677 hacker’s methodology, 849–850 edit parameter, 107
hacker’s methodology, 847 JavaScript, 440 Edwards, Dean, 471
default credentials, web server, JavaScript API methods, 740 EJB. See Enterprise Java Bean
670–671 web functionality, 62 electronic cookbook ciphers
hacker’s methodology, 846 XSS, 440–442 (ECB ciphers), 224–226
default lockdown, MS-SQL delivering, 448–449 e-mail
databases, 326–327 fi nding and exploiting, account activation URLs, 184
defense in depth 487–491 credentials sent in, 184
SQL injection, 342 input validation, 497 forged, 448
tiered architectures, 656 output validation, 497–498 header injection, 398–399
web server software, 696–697 preventing, 496–498 stored XSS testing, 483–484
defense mechanisms. Seealso refl ected XSS converted to, as username, 167, 196
security 472–473 encoding
access steps, 441 Apache chunked overfl ow, 688
authentication, 18–19 DocumentRoot directive, 683 attackers and, 66–67
control, 20–21 DOM. See document object Base64, 69
session management, 19–20 model ASP.NET ViewState,
attackers, 30–35 domain restriction cookies, 125–126
administrator alerting, 33–34 245–247 custom, path traversal
audit log maintenance, 31–32 DOMTracer, 488 vulnerabilities, 377–378
errors, 30–31 dot character, script code hex, 69–70
reacting to, 34–35 bypassing fi lters alternatives HTML, 68–69
elements, 17–18 to, 466 developer mistakes, 494–495
input, 21–29 “dot-dot-slash” sequence, script code bypassing fi lters,
approaches to, 23–25 369. Seealso path traversal 468
user access, 18–21 vulnerabilities Unicode, 67–68
defensive fi lters, refl ected XSS, Dowd, Mark, 634 Burp Intruder, 375
455–456 downloading URL, 67
DELETE method, 679 bytecode, 140 SQL injection, 300–301
DELETE statements, 297–298 encrypting tokens, 231–232 truncating, 378
deliberate backdoor scripts, drop-down menus, web server software, 689–694
660–661 authentication, 193 encrypting
developers DSer, Burp Suite, 136–137 .NET, 686
application logic fl aws, 429–430 Dump Servlet, Jetty, 672 “remember me” function, 177
client-side data transmission, dynamic code execution tokens, 223–233
118 ASP.NET API methods, 722 attackers, 232–233
HTML encoding mistakes, Java API methods, 715 Burp Intruder bit fl ipper,
494–495 OS command injection, 362 228–231
web applications security, 3 CBC, 227–233
vulnerabilities, 366–367
digest authentication, 50–51 downloading, 231–232
Perl language API methods,
directory listings, web servers, ECB ciphers, 224–226
738
677–679 “reveal” encryption oracle,
PHP API methods, 730–731
Allaire JRun, 690–691 232
dynamically constructed strings,
directory names, 105 encryption oracle
466
disabled elements application logic fl aws, 407–408
attackers, 132–133 “remember me” function, 407
E
HTML forms, 131–133 database error messages,
discount cheating, application E4X. See ECMAScript for XML 620–622
logic fl aws, 418, 429 Eagle, Chris, 634 “reveal,” encrypting tokens,
discretionary access control eavesdroppers 232
(DAC), 282 authentication, 169 Enterprise Java Bean (EJB), 53
disjunctive queries fi lters, 350 session tokens, 234 enterprise resource planning
LDAP injection, 351 eBay, 505 software (ERP), 4
.dll fi les, 141 ECB ciphers. See electronic enumerating identifi ers, 572–583
DNS rebinding, 563–564 cookbook ciphers basic approach, 574
DOCTYPE element, 384–385 Echo Mirage, 139 Burp Intruder, 594–597
bbiinnddeexx..iinndddd 886611 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 862
862 Index n F–F
detecting hits, 574–576 unhandled, 30–31 attribute names, 461
examples, 573 escaping attribute values, 462
hacker’s methodology, application logic fl aws, 419–420 character sets, 464–465
application mapping, with backslash character, 419 tag brackets, 462–464
797–798 JavaScript, script code tag name, 460–461
HTTP status code, 574 bypassing fi lters, 465–466 input, path traversal
JAttack, 577–583 XSS, 420 vulnerabilities, 374–377
Location header, 575 Etag string, 128–129 LDAP, 350
response body, 575 eval function, 362, 722 Oracle PL/SQL Exclusion List
response length, 574–575 script code bypassing fi lters bypassing, 692–694
scripting, 576–577 alternatives to, 466 refl ected XSS
Set-Cookie header, 575 event handlers defensive, 455–456
time delays, 575–576 HTML5, 458 sanitizing, 468–471
ERP. See enterprise resource script code in HTML with, signature-based, 456–457
planning software 457–458 sanitizing, refl ected XSS,
error messages Expires header, 42 468–471
Apache, 628 Extensible Markup Language script code bypassing, 465–468
ASP.NET, 628 (XML), 56. Seealso Simple dot character alternatives,
database, 619–622 Object Access Protocol; XML 466
encryption oracle, 620–622 Path Language dynamically constructed
information disclosure, E4X, 463 strings, 466
619–620 injection, 383–390 encoding, 468
databases, XSS in, 620 XXE, 384–386, 841 eval function alternatives,
debugger, 425–426, 618–619 interpreting, 387 466
common, 619 XSS exploits JavaScript escaping, 465–466
dynamically generated, 434 JavaScript in, 478–479 multiple technique
engineering informative, sending cross-domain, combination, 466–467
624–625 477–478 VBScript, 467
exploiting, 615–625 Extract Grep function, 598 VBScript and JavaScript,
generic, 628 467–468
IE, 622 simple match conditions, 350
F
information disclosure, SQL injection bypassing,
615–625 fail-open login function, 185–186, 311–313
generic, 628 194 XSS
Java, 628 failure messages, verbose, anti-, 452, 748
keywords, 622 166–169 blacklist-based, 451–452
Microsoft IIS, 628 fi le extensions, 102–105 IE, 479–481
MS-SQL databases, 334–338 fi le inclusion web browsers, 479–481
MySQL, 334–338 hacker’s methodology, 835–836 fi nancial services
ODBC, 624 local, 382 application logic fl aws, 412–416
Oracle databases, 334–338 remote, 381–382 ASPs, 658
public information, 623 fl aw testing, 383 fi ngerprinting databases, SQL
published content, 625 static resources, 382 injection, 303–304
script, 616–617 vulnerabilities, 381–383 Firebug, 785
search engines, 623 fi nding, 382–383 Firefox, 459
server, 619–622 PHP, 381–382 browser extensions, 750
SOAP injection, 388 fi le path manipulation, 368–383. cross-domain data capture, 521
source code, 623 Seealso path traversal Firesheep tool, 234
SQL injection, 334–338 vulnerabilities hacker’s toolkit, 749–750
stack traces, 617–618 fi lters Referrer header, 239
UNION operator, 306 blocked characters, 311–312 Firesheep tool, Firefox, 234
VBScript, 616 conjunctive queries, 350 fi rewalls, 12
verbose, 30–31, 624 LDAP injection, 352–353 alerts, 33
errors disjunctive queries, 350 WAFs, NULL bytes, 460
conditional, SQL injection, LDAP injection, 351 fi rst-order XSS. See refl ected XSS
320–322 exploiting defective, 313 500 Internal Server
defense mechanisms handling HTML bypassing, 459–465 Error, 49
attackers and, 30–31 attribute delimiters, 461–462 brute-force techniques, 85
bbiinnddeexx..iinndddd 886622 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 863
Index n G–H 863
503 Service Unavailable, fuzzing, 572–573 authentication
49 Burp Intruder, 600–602 application logic fl aws,
Flash, 134–135 hacker’s methodology, 811–813
bytecode, 141 parameter, 824–827 credentials, autogenerated,
/crossdomain.xml, 525–526 integrated testing suites, 809–810
LSOs, 553 762–763 credentials, unsafe
same-origin policy, 525–526 JAttack, 588–590 distribution, 810–811
serialized data, 137–138 objective, 586–587 credentials, unsafe
font-family property, 518–519 strings, 587 transmission, 810
forced browsing, application impersonation, 808–809
logic fl aws, 411 G insecure web storage, 811
forgotten password, 584 password guessing, 807
general headers, 45
attackers using, 14 password quality, 806
generic error messages, 628
format string vulnerabilities password recovery, 807–808
GET method, 42
attackers, 644 “remember me” functions,
purpose, 264
causes, 643 808
GET request, 40
detecting, 644 understanding, 805
XSS converting, 474–475
hacker’s methodology, 838 username enumeration,
getCurrentUserRoles
source code, 710 806–807
method, 261
forms username uniqueness, 809
GIFAR fi les, 485–486
HTML, 58–59 vulnerability exploitation for
Google, 89
authentication, 160–161 unauthorized access,
Omitted Results, 90
client-side control of user 813
querying, 90
input with, 127–133 back-end request injection, 841
Google Translate (GT), 530–531
client-side data transmission browser extensions, 802–804
GrayHatHacking (Eagle & Harris
with hidden, 118–120 ActiveX controls, 804
& Harper & Ness), 634
disabled elements, 131–133 debugger, 803–804
GT. See Google Translate
intercepting proxy decompiling, 802–803
modifying hidden, buffer overfl ow, 837–838
119–120 H client-side
length limits, 128–129 hacker’s methodology data transmission, 801
script-based validation, access controls user input, 801–802
129–131 insecure access, 823 cookie scope, 820–821
web functionality, 58–60 limited access, 822–823 CSRF, 820
400 Bad Request, 48 multiple accounts, 822 DOM, 849–850
brute-force techniques, 84 requirements, 821 fi le inclusion, 835–836
401 Unauthorized, 48 analysis format string vulnerabilities,
brute-force techniques, 84–85 attack surface mapping, 800 838
403 Forbidden, 49 data entry points, 799 fuzzing parameters, 824–827
brute-force techniques, 84–85 functionality, 798–799 guidelines, 793–794
404 Not Found, 49 technologies, 799–800 HTTP header injection, 830
405 Method Not Allowed, 49 application logic fl aws information leakage, 852
413 Request Entity Too attack surface, 842 input-based vulnerabilities,
Large, 49 incomplete input, 843 824–836
414 Request URI Too Long, multistage functions, function-specifi c, 836–841
49 842–843 integer vulnerabilities, 838
framebusting, UI redress transaction logic, 844 LDAP injection, 839–840
attacks, 514–515 trust relationships, 844 local privacy attacks, 850–851
function callbacks, JavaScript application mapping, 795–798 miscellaneous checks, 849–852
hijacking, 520 debug parameters, 798 native software bugs, 837–838
functional paths, web default content, 797 open redirection
application pages versus, enumerating identifi ers, vulnerabilities, 830–831
93–96 797–798 OS command injection,
functionality. See web hidden content, 796–797 832–833
functionality public information resources, path traversal vulnerabilities,
function-specifi c input 796 833–835
vulnerabilities, hacker’s of tokens to sessions, 818 refl ected XSS, 829–830
methodology, 836–841 visible content, 795–796 same-origin policy, 851–852
bbiinnddeexx..iinndddd 886633 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 864
864 Index n H–H
script injection, 835 hidden content HTTP response splitting,
session management discovering, 80–93 534–535
token insecure transmission, brute-force techniques, 81–85 input validation, 536
817 inference from published preventing, 536
token system log disclosure, content, 85–89 HTTP parameter injection (HPI),
817–818 Nikto, 93 390