package installer pops up a dialog for the user to con-
ﬁrm. The dialog itself is an activity (namely uninstaller
activity) from the system package installer and is pushed
in the back stack of whoever is making the request (e.g.
s4 in Figure 7). No app can be uninstalled without user
conﬁrmation on the uninstaller activity.
Attack Method: The attacker can prevent app un-
installation by restricting user access to the uninstaller
activity when it shows up on screen. In this attack, once
the uninstaller is found to be in the foreground, a mali-
cious activity is immediately pushed on top of the unin-
staller activity in the same back stack, such that the unin-
staller is “blocked” and becomes inaccessible to the user.
Figure 7 shows the state transition diagram of this at-
tack targeting Settings app. Similar methods can be eas-
ily adopted to block app un-installation from the launcher
or the anti-virus apps (e.g. when malware is detected).
In s1, a task with only one root activity (“mal-
root”) from the malware is waiting in the background,
USENIX Association  
24th USENIX Security Symposium  953
9
S1 
S2 
S3 
Foreground 
setting 
mal-root 
uninstaller 
Foreground 
setting-sub 
setting 
mal-root 
Malware Task 
Malware Task 
Background 
mal-root 
Malware Task 
computer, and uninstall the malware from adb. However,
in order to use adb, the user needs to ﬁrst enable USB de-
bugging in the Settings. The malware can block it in the
Settings using similar technique and prevent the use of
adb, as long as the USB debugging is not enabled before
the attack (which is the case for most normal users).
S5 
Foreground 
mal-blocker 
uninstaller 
setting-sub 
setting 
mal-root 
S4 
Foreground 
uninstaller 
setting-sub 
setting 
mal-root 
Malware Task 
Malware Task 
Figure 7: Tasks state transition diagram of application unin-
stall prevention attack.
with its taskAffinity set
to the Settings app
(com.android.settings). The HST occurs in s1 → s2, trig-
gered when the user opens up the Settings from the home
screen (we skip Launcher task in the ﬁgure). In s2, in-
stead of hosting the newly-created “setting” activity in a
new task, “setting” activity is pushed on top of the mal-
ware’s back stack because the it is started by the launcher
with a NEW_TASK ﬂag. As a result, upon start-up, the
privileged Settings app is unwittingly “sitting” on a task
owned by the malware. This is similar to HST#4 in Ta-
ble 3.
The user then goes through a few more sub-setting
menus to ﬁnd the app (as shown in s3) and clicks
the uninstall button, after which the uninstaller activity
shows up for user conﬁrmation (as shown in s4). Once
this happens, a malicious activity namely “mal-blocker”
is immediately (even without user awareness of the unin-
staller dialog) launched by a malicious background ser-
vice, which keeps monitoring the foreground activity.
The “mal-blocker” activity, started by a NEW_TASK
ﬂagged intent and with the same task afﬁnity as the Set-
tings app, is thus pushed in the same task, and effectively
blocks the uninstaller as shown in s5. The “mal-blocker”
activity has its “back” button disabled, such that the user
has no way to access the uninstaller activity right below
it in the back stack whatsoever, and thus cannot conﬁrm
the app uninstalling operation.
In fact,
that
triggers s5 → s6:
the “back” button of “mal-blocker” is
not only disabled, but
is also augmented with a
invoking (call
new event
startActivity()) the “mal-root” activity with an
intent having CLEAR_TOP ﬂag set, which results in the
killing of the uninstaller and Settings activities in the
task.
Preventing Un-installation from adb: An advanced
user may resort to Android Debug Bridge (adb), a client-
server program used to connect Android devices from a
5.2.2 Ransomware
Ransomware blackmails people for money in exchange
of their data, and it has recently hit Android in a large
scale [5]. The attackers may use UI hijacking to imple-
ment ransomware.
The malicious background service mentioned above
takes the following two responsibilities and is difﬁcult
to be completely stopped. (1) Assure the malicious root
activity (“mal-root”) is alive:
it re-creates a new root
activity once the activity is found to be destroyed; and
(2) monitor the foreground activity: if the target activity
shows up, it immediately starts “mal-blocker” to block
user access to the target activity, as we have seen in
s4 → s5. To prevent itself from being killed, the ser-
vice registers itself in the system alarm service, who ﬁres
a pending intent in every given ﬁxed time interval, re-
launching the service if it is found to be killed.
By this mean, the ransomware is able to restrict user
access to any target apps of attacker’s choice, and can po-
tentially render the Android device completely useless.
5.3 Breaching UI Conﬁdentiality
The attack method in Section 5.2 can also be deployed
to devise a new spyware, namely “TaskSpy” capable of
monitoring the activities within any tasks in the newest
Android 5.0.x systems (API 21), without requiring any
permissions.
In Android, the system regards the owner of the root
activity in a back stack to be the owner of the correspond-
ing task. Android 5.0 allows an app to get the informa-
tion of the caller app’s own tasks (including the activities
in the tasks) without requiring any permission. It means
that, if a spyware can “own” the tasks of all the apps
it intends to spy on, it is able to get the information of
these tasks that in fact contain the victim apps’ activi-
ties. Task hijacking is especially useful to “TaskSpy” in
this case. In other words, “TaskSpy” can use the HST
presented in Section 5.2 to “own” the tasks of any victim
apps and thus stealthily spy on their activities without us-
ing any permission. Chen et. al. have achieved the same
goal in their work [8] by monitoring and interpreting the
shared VM information via public side channels. Com-
pared with their attack, task hijacking can do this in a
more direct and reliable way on Android 5.0.x.
954  24th USENIX Security Symposium 
USENIX Association
10
Vul.
app
Atk
#
Vul. conditions
Send implicit intent for
exported activities
Send implicit intent for
exported activities and use
intent ﬂag NEW_TASK
Contains public exported
V
S
I
II
II
III
activity and
lauchMode=“singleTask”
Contains public exported
activity and
allowTaskReparenting=“true”
Tol. %
of vul.
93.9
14.4
% of
vul.
93.9
65.5
14.2
1.4
Number of Vul. Victim Apps
Number of Vul. Service Apps
Comm
Social
Finance
Shopping
Bussiness
Medical
Media
Tools
Comm
Product
Photo
Social
0
100
(a)
200
300
0
100
200
300
(b)
Figure 8: (a) Breakdown of vulnerable victim apps in security-
sensitive app categories.
(b) Breakdown of vulnerable “ser-
vice” apps in the most widely useful app categories.
Table 4: Percentage of vulnerable victim apps (V) and “ser-
vice” apps (S) to the “back hijacking” phishing attacks respec-
tively, among 10,985 most popular Google Play apps.
6 Evaluation
We ﬁrst seek to understand the extent of vulnerable sys-
tems and apps to the attacks we have presented in Sec-
tion 5. By doing large-scale app analysis across various
markets, we then provide the current use status of the task
control knobs in real implementations. Base on our in-
sights from the result, we provide mitigation suggestions
to defend against task hijacking threats in Section 7.
6.1 Vulnerability Analysis
Vulnerable Android Versions: We say an Android ver-
sion is vulnerable to a particular attack if a malware can
successfully launch the attack to a victim app on the sys-
tem. Since the unique multitasking is part of Android de-
sign and most features have been introduced early in An-
droid’s evolution, we ﬁnd that recent Android versions,
including 3.x, 4.x and 5.0.x, are vulnerable to all our
presented attacks, except the “TaskSpy” attack. As dis-
cussed in Section 5.3, “TaskSpy” relies on speciﬁc APIs
introduced from API 21, and therefore, only affects the
newest Android 5.0.x systems.
Apps Vulnerable to Task Hijacking Attacks: As sum-
merized in Table 1, all the apps installed on a vulnerable
Android system (including the privileged system apps)
are vulnerable to all the attacks presented in this paper,
except the “Back Hijacking” phishing attacks, which re-
quire certain prerequisites for an app to be vulnerable.
Despite the prerequisites, the “Back Hijacking” phishing
attacks are extremely stealthy, can be easily crafted and
can cause serious consequnces. We try to further under-
stand the scale of apps vulnerable to the “Back Hijack-
ing” phishing attack by analyzing the most popular apps
in Google Play.
Apps Vulnerable to “Back Hijacking”: In a phishing
attack, the attacker would be likely to target the most
popular and valuable apps. Therefore, we focus our vul-
nerability analysis on the most popular 10,985 apps from
Google Play, i.e., apps with over 1 million installs.
We indicate a vulnerable app in the phishing attacks
to be of either one or both of the following two types:
(1) victim app - the target victim app of the phishing
attack (e.g.
the bank app); and (2) “service” app - the
benign app that provides publicly exported activities and
is exploitable by the attacker to conduct user phishing
on the victim apps (e.g.
the benign video player). We
do static analysis on the apps. Speciﬁcally, we perform
inter-procedural analysis to identify all implicit intents
(without permissions guarded) and the associated ﬂags,
and conduct manifest scan to ﬁnd all activity attributes
and public exported activities (excluding the main activ-
ities which are always exported). Table 4 lists the vul-
nerability conditions, and shows the percentages of both
vulnerable victim apps and “service”apps to each and all
the attack methods respectively.
As can be seen, 93.9% of the most popular apps in
Google Play are vulnerable. This is partially because
most apps would send out implicit intents (without per-
missions guided), which could potentially invoke a mal-
ware activity as in attack I. By taking a closer look at the
results, among these apps, a majority (65% of apps) are
vulnerable to attack II, i.e., they are vulnerable to phish-
ing attack even if users launch trusted benign “service”
apps from these apps. Moreover, 14.36% “service” apps
can be exploited to “help” attack the apps who invoke
these “service” apps, even if the apps being attacked may
not be vulnerable by themselves.
The consequence and severity of a phishing attack de-
pend on the content and sensitivity of the stolen informa-
tion. To have a rough idea of the potential consequences
caused by the “Back Hijacking” phishing attacks, we se-
lectively show in Figure 8(a) the population of vulner-
able victim apps in a few security-sensitive app cate-
gories. Noticeably, We observe that a signiﬁcant num-
ber of security-sensitive apps are vulnerable, including
the ﬁnancial apps like banking and credit card payment
(e.g., Citibank, Chase, Google Wallet), the most popu-
lar communication and social media apps (e.g. Google
Hangouts, facebook), and shopping apps from the ma-
USENIX Association  
24th USENIX Security Symposium  955
11
Activity Attribute
allowTaskReparenting=“true”
launchMode=“singleTask”
launchMode= other non-default modes
taskAfﬁnity= own pck. name
taskAfﬁnity= other
excludeFromRecents=“true”
alwaysRetainTaskState=“true”
% of
Apps
0.80
24.63
24.75
2.36
1.60
12.45
2.03
Intent Flag
NEW_TASK
CLEAR_TOP
EXCLUDE_FROM_RECENTS
Events
onBackPressed()
TaskStackBuilder
startActivities()
% of
Apps
79.42
37.59
10.08
62.00
7.27
5.47
Task Afﬁnity
com.android.settings
com.android.camera
com.android.update
com.tencent.mm
com.gau.go.launcherex
com.fractalist
com.android.activity
com.xiaomi.payment
# of
Apps
492
325
279
273
237
194
158
147
Table 5: Percentage of 6.8 million market apps that use each of the “security-
sensitive ” task control knobs.
Table 6: Top package names speciﬁed as
the task afﬁnity by other apps
jor electronic commerce companies (e.g. Ebay, Amazon
Shopping), etc. Similarly, in Figure 8(b), we show the
statistics of a few app categories in which the vulnerable
“service” apps and their functionality are most widely
used, including the most famous photo editing tools, doc-
ument editors, and ﬁle sharing services, etc.
6.2 Market-scale Study on the Use of Task
Control Knobs
Due to the task hijacking threats, we have a pressing
need for a defense strategy that can mitigate these threats
while minimizing the side effects on Android multitask-
ing features. To this end, it is important to ﬁrst under-
stand the current status about the use of Android mul-
titasking features in real implementation, especially the
use of “security-sensitive” task control knobs.
We analyzed 6.8 million Android apps from a vari-
ety of markets including Google Play and other 12 popu-
lar third-party app markets worldwide (e.g., from China).
The analysis does not include duplicated apps (apps with
same package name, public key certiﬁcate and app ver-
sion number) distributed across multiple markets.
Table 5 shows the percentage of apps that use each of