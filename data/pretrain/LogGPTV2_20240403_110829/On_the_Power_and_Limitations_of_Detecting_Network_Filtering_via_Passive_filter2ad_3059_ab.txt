also for speciﬁcally detecting policy-based TCP port 445 ﬁltering.
General Coverage: A natural ﬁrst question is whether we in fact observe traﬃc
in our darknet from a broad spectrum of Internet endpoints. To quantify the
fraction of the Internet that transmits traﬃc to our darknet we use routing tables
from Route Views at the beginning of our darknet collection (January 13, 2011)
to determine that 2.43B addresses are routed. The set of /24 networks we receive
traﬃc from corresponds to 2.40B IP addresses when taking into account routed
preﬁx size—or, 98.8 % of the routed IP addresses. Some of this traﬃc is no doubt
spoofed, so we compute the number of addresses belonging to /24s that send
at least ﬁve scanning or backscatter packets1. We ﬁnd 1.85B such addresses—
or, 76.1 % of the routed IP addresses. This analysis leads us to conclude that
background radiation—and the lack thereof—arrives at our darknet from a broad
spectrum of the Internet and therefore is a potential source of information about
policy-based ﬁltering in the Internet.
Conﬁcker Coverage: While the amount and breadth of background radiation
oﬀers hope that we can broadly detect ﬁltering policy, Conﬁcker is an imperfect
marker. As we note above, Conﬁcker-infected endpoints are known to inhabit
1.6M of 4.1M/24 address blocks we observe sending traﬃc to our darknet. This
partially stems from the error in Conﬁcker that prevents it from scanning three-
quarters of the network. While the footprint of the marker scopes the amount of
the network we can assess, we are unaware of any other technique that achieves
this level of coverage. While not ideal, we believe even an imperfect marker can
provide a better understanding than we have today.
Conﬁcker Behavior: Another preliminary question we must tackle pertains to
the behavior of Conﬁcker. Before we can infer that we are missing some marker
traﬃc, we must have an expectation about how much such traﬃc we should
observe. In order to remain undetected, Conﬁcker infectees only scan after ﬁve
minutes of keyboard inactivity on a given host [7]. Further, Conﬁcker has four
scanning modes—a number of them localized in scope. Finally, an infected host
obviously cannot scan when the host is powered oﬀ. Given these constraints, we
cannot simply compute an expectation based on a model of each host scanning
continually and uniformly.
We can determine a rough idea of whether we should expect to observe traf-
ﬁc from each infectee, as follows. We know that, when scanning, each infected
machine pauses between 100 ms and 2 s between probes [7]. Given that we
observe nearly 84M IP addresses, we would expect to observe one out of every
52 probes—or, one probe every 104 s if we assume the slowest scanning rate.
1 Five is a somewhat arbitrary choice that weeds out /24 address blocks that send
exceedingly little traﬃc for illustrative purposes.
170
M. Sargent et al.
Or, if we are to observe 10 probes from a given infected machine on each /8 we
monitor, the host would have to scan for 86 min over the course of the week—
or less than 1 % of the week. Therefore, our ﬁrst order assumption—which we
revisit in Sect. 5—is that we should observe Conﬁcker activity from all infected
hosts.
5 Validation
While the cursory analysis in Sect. 4 suggests inferring policy-based ﬁltering
of TCP port 445 should be possible given both the proliferation of Conﬁcker
and our broad vantage point, this section tests our assumptions and frames the
conﬁdence we can gain from the results. We note that given the breadth with
which we aim to develop understanding, we have no ground truth. Therefore, we
cannot absolutely prove our inferences correct, but aim to illustrate that they
are likely to be so.
An Anecdote: Comcast provides a list of ports that are subject to policy ﬁlter-
ing for its residential customers—including TCP/445 [9]. In our darknet data we
ﬁnd nearly 3M packets from Comcast’s 76.102.0.0/15 address block. As expected,
we ﬁnd no TCP/445 traﬃc even though our list indicates 81 Conﬁcker-infected
hosts within the given address block. While this is an obviously anecdotal case,
it is illustrative of our goal to detect policy from the absence of speciﬁc traﬃc
from given address blocks.
Conﬁcker Sending Behavior: The preliminary analysis in Sect. 4 suggests our
darknet is big enough to observe all Conﬁcker-infected hosts scanning with high
probability based on what we know about Conﬁcker’s behavior. To check this we
consider all Conﬁcker infectees from /24 address blocks where we observe some
traﬃc to TCP port 445. In this case, we do not believe there is a general policy
against TCP/445 traﬃc at the /24 level. However, we ﬁnd TCP/445 traﬃc from
only 51 % of the infected hosts across these cases. Our data does not shed light on
why we do not observe 49 % of the Conﬁcker hosts. The reasons could be many,
including policy at ﬁner granularity than a /24 (even to the host granularity),
reactive ﬁltering in response to scanning and removal of Conﬁcker from the
machine. We combat this situation by requiring multiple Conﬁcker infectees per
address block to overcome the seeming failure of some Conﬁcker hosts to send
scanning traﬃc.
Active Measurement: As part of its suite of active measurements, Netalyzr
[12] attempts to establish a TCP/445 connection to a known server. We have
obtained the Netalyzr test results starting one month before and ending one
month after our darknet data collection. We ﬁnd 1,555 hosts in the Netalyzr data
that are also infected with Conﬁcker. We therefore can evaluate our technique
using the Netalyzr results as ground truth. First, we ﬁnd 176 hosts (11 %) where
Netalyzr is run multiple times and shows inconsistent results. This shows that
ﬁltering policy and end-host behavior are not consistent across two months and
therefore that the Netalyzr data is at best an approximation of ground truth
On the Power and Limitations of Detecting Network Filtering
171
with respect to the darknet data. For another 647 hosts, Netalyzr concludes a
port-based ﬁlter is in place. The darknet data agrees with this assessment in
97 % of the cases. In the 3 % of the cases where Netalyzr concludes port ﬁltering,
we ﬁnd a minimum of 17 TCP/445 packets from each host, with a median of
1,369 TCP/445 packets—and therefore we conclude that no ﬁlter is in place.
We believe the likely cause for this is a policy change. Finally, Netalyzr ﬁnds
732 hosts to be unﬁltered. However, we only observe 279 (38 %) send traﬃc to
our darknet, seemingly leaving our method with a large error. However, we note
that the analysis in the last paragraph shows that we can only expect traﬃc
from roughly half the infected Conﬁcker hosts. Applying that expectation, the
accuracy of the inference from the darknet data increases to 76 %. As we note
previously, the error can come from myriad places. Further, we show below that
using multiple infected hosts can increase our conﬁdence in our inferences.
Broad Comparison: Finally, we again compare our darknet observations with
Netalyzr’s results, but instead of using single IP addresses we will now aggre-
gate results across /24 address block, routed block (determined from Route
Views) and autonomous system. This allows us to bring multiple infected hosts
to bear on our inference, but at the expense of possibly observing multiple policy
domains.
y
c
a
r
u
c
c
A
1
0.8
0.6
0.4
0.2
0
/24
Routed Prefix
AS
200
150
250
50
100
Number of infected hosts
Fig. 2. Accuracy of the three methods when varying the number of infected hosts
required before making comparisons with Netalyzr.
Figure 2 shows the accuracy of our inference with respect to the Netalyzr
results as a function of the number of Conﬁcker infected hosts for the given
aggregate block.2 This plot ﬁrst illustrates that regardless of level of aggregation
the accuracy roughly levels oﬀ once a handful of Conﬁcker infectees are present
within the block. Second, the tighter we scope the block the better the accuracy,
with /24 blocks showing the best accuracy, followed by routed blocks and then
2 There are more Conﬁcker infected hosts in some of the routed blocks and ASes,
however, we truncate the plot at 255 for comparison with /24 blocks.
172
M. Sargent et al.
autonomous systems. We believe this is because as we increase the aggregation
the instances of multiple policy domains also increases. Therefore, trying to treat
the entire block the same leads to incorrect inferences.
We ﬁnd that approximately half the hosts that contact the Conﬁcker com-
mand and control structure ultimately show up in our darknet data. We see
this manifests in the accuracy rate in Fig. 2. Requiring ﬁve infected hosts per
/24 should mean one of the Conﬁcker infectees sends traﬃc with a 96 % likeli-
hood. When applying this threshold and comparing with the Netalyzr results we
ﬁnd an accuracy of 80 %. In approximately 6 % of the cases Netalyzr determines
the network is ﬁltering traﬃc while we observe Conﬁcker from the given /24 in
our darknet data. Finally, in 14 % of the cases Netalyzr is able to establish a
TCP/445 connection while we ﬁnd no Conﬁcker in our darknet collection and
hence infer the given /24 is ﬁltering TCP/445. While the reason for this discrep-
ancy is not clear, we note that it will cause an over-estimate of the amount of
ﬁltering in the network.
Summary: As we show in this section, looking for the curious absence of traﬃc
to understand ﬁne-grain network ﬁltering policy is not a clean process. We clearly
need to understand the signal we expect to ﬁnd. However, our conclusion is that,
while this process is not perfect, we can use it to gain an approximate under-
standing of policy ﬁltering in the network. Finally, while active measurements
may be more precise, they are much more diﬃcult to obtain on a large scale basis
and therefore we are trading absolute precision for breadth of understanding.
6 Data Analysis
After establishing the promise of our methodology in Sects. 4 and 5, we now
return to our high-level goal from Sect. 1 to understand network ﬁltering of
TCP port 445 traﬃc using Conﬁcker as a marker.
6.1
/24-Based Policy
As we develop above, we believe Conﬁcker is a marker that will illuminate net-
work ﬁltering policy for the broad regions of the network where it is known to
exist—even if the marker is less than ideal in some situations. As a starting
point, we aggregate and label traﬃc based on the source /24 address block, our
expectations of Conﬁcker, and the traﬃc that arrives in our darknet.
First, as we sketch in Sect. 4, we do not expect Conﬁcker from roughly 60 %
of the /24 blocks observed at our darknet monitors. For roughly 0.2 % of the
/24 blocks from which we do not expect Conﬁcker traﬃc we do in fact observe
Likely Conﬁcker at our darknet. This shows that the list of Conﬁcker-infected
hosts is comprehensive and not missing a signiﬁcant portion of hosts infected
with the malware. We do not further consider address blocks where we do not
expect Conﬁcker as we can infer nothing from its absence in these cases.
This leaves us with Conﬁcker infectees in roughly 40 % of the /24 address
blocks in our darknet data. We now need a process to label each /24 address
On the Power and Limitations of Detecting Network Filtering
173
block by its ﬁltering policy. Given our validation work in Sect. 5, we proceed in
two steps. First, when we observe Conﬁcker traﬃc from a /24 block we determine
there is no general TCP/445 ﬁltering. Second, we know we cannot expect Con-
ﬁcker from all infectees, and so the absence of the marker does not necessarily
indicate a network ﬁlter. Rather, we determine a /24 block is ﬁltering TCP/445
when (i) we ﬁnd no TCP/445 traﬃc in our darknet data and (ii) the /24 block
has at least ﬁve infectees. As we develop in Sect. 5 the second criteria gives us
at least 96 % conﬁdence that Conﬁcker should arrive and therefore when it does
not we infer a policy-based ﬁlter.
We ﬁnd 434K (27 %) of the 1.6M/24 blocks with Conﬁcker infectees are not
imposing TCP/445 ﬁltering on their traﬃc. Meanwhile, we infer that 448K/24
blocks (28 %) ﬁlter TCP/445 traﬃc. That is, we are able to conﬁdently char-
acterize the ﬁltering policy of 882K /24 networks—or 9.3 % of all the routed
address space. This is, by far, a larger portion than previous methodologies can
claim—e.g., Netalyzr runs from the month surrounding our data collection cover
23K/24 networks. Our analysis leaves 747K/24 blocks (45 %) from which we do
not observe TCP/445 traﬃc but which do not contain ﬁve infectees. These are
cases where we have an indication of possible ﬁltering, but cannot develop high
conﬁdence in this determination.
6.2 Routed Preﬁx-Based Policy
We next turn to a larger aggregation of address blocks to better understand
ﬁltering policy at a coarser granularity. We leverage routed preﬁxes as found in
Route Views at the time of our darknet data collection for this analysis. Our
general method to infer whether ﬁltering happens for an entire preﬁx is to look
for consistent behavior from the /24 blocks within the preﬁx. Since we tackle
/24 address blocks above, in this section we only study the 140 K routed preﬁxes
that are at least a /23 (out of 254 K total routed preﬁxes).
Of the 140 K preﬁxes we consider, we ﬁnd no Conﬁcker infectees and no
TCP/445 traﬃc for 61 K of the preﬁxes. We cannot further study these pre-
ﬁxes as we have no expectation of TCP/445 traﬃc and therefore the absence of
such traﬃc does not inform our assessment of ﬁltering. This leaves roughly 79 K
preﬁxes on which we have some expectation of observing TCP/445 traﬃc. We
summarize our results in Table 2.
First, when each /24 block containing at least one Conﬁcker infectee within
the routed preﬁx produces TCP/445 traﬃc we conclude the network applies
no general TCP/445 ﬁltering. Table 2 shows 13 % of the preﬁxes do not ﬁlter
TCP/445. Similarly, when we observe no TCP/445 traﬃc for each /24 block
containing at least one infectee across a preﬁx with at least ﬁve total infectees
we conclude ﬁltering is in place for the entire preﬁx. We ﬁnd preﬁx-wide ﬁltering
in 35 % of the preﬁxes. We also ﬁnd cases where no TCP/445 traﬃc arrives
at our darknet, but the routed preﬁx contains fewer than ﬁve infectees. We
cannot conﬁdently determine that these preﬁxes ﬁlter TCP/445—even if the
data suggests this may be the case. We denote these cases “low signal” in the
table and ﬁnd 28 % of the preﬁxes fall into this category.
174
M. Sargent et al.
Table 2. Labels assigned to routed preﬁxes /23 or larger based on their component
/24s.
Classiﬁcation
No Filtering
Filtering
Multiple Policies
Amount Percentage
10,084
27,351
14,536