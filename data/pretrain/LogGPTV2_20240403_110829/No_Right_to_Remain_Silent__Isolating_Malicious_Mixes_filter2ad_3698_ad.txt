DegG (M2) = 2 ≥ 2 = thresh and detection
of M2 as a malicious mix.
Figure 4: An illustration of how virtually removing mixes
from G can expose malicious mixes. Algorithm 2 refers to
the graph in 4b as G1, since it is the same graph G as in 4a
but without M1 and without M1’s neighbors.
tion technique in Algorithm 1. The algorithm takes as input
graph G = (V,E), where an edge (Mi,Mj) ∈ E represents the
disconnected link between Mi and Mj. The algorithm starts
by invoking the SIMPLEMALICIOUSFILTERING procedure
(described in Section 5.1) on the graph G (line 12). Next,
the algorithm invokes the VIRTUALPAIRREMOVAL proce-
dure on G to virtually remove a pair of mixes from G (line
14). Following observation 1, at least one malicious mix was
virtually removed, thus the virtual threshold thresh(cid:48) value
is decreased by 1 (line 15). We use the thresh(cid:48) variable to
keep track of the virtually removed malicious mixes and the
global thresh value is decreased only when a malicious mix
was actually detected (line 4), and the rest only change the
virtual threshold thresh(cid:48). After that, the algorithm invokes
the procedure SIMPLEMALICIOUSFILTERING again on the
updated G graph, i.e., without the pair of mixes that were vir-
tually removed by the VIRTUALPAIRREMOVAL procedure.
The algorithm repeats lines 14-16 as long as there are edges
in G. For an illustration why the T hresholdDetection algo-
rithm is better than the original simple malicious mix ﬁltering
see Figure 4.
We next improve upon the detection of malicious mixes
by the T hresholdDetection algorithm, while still never re-
moving honest mixes. Our improvement is based on Ob-
servation 2 below; but before presenting it, we need some
preliminaries.
We ﬁrst deﬁne a simple notion which can be applied to any
undirected graph. Speciﬁcally, let G0 = (V 0,E0) be an arbi-
trary undirected graph. A sequence {G j}µ
j=0 of subgraphs of
G0 is a removal sequence of length µ ≥ 1 of G0, if for every
j : µ ≥ j ≥ 1, G j = G j−1 − v j. Namely, G j is the same as
G j−1, except for removal of some node v j ∈ G j−1, and of all
edges connected to v j. A removal sequence is legitimate if
every removed node v j has at least one edge.
Let us deﬁne the graph Gi to be the resulting graph after
removing from G the node Mi together with all its neighbors,
denoted as N(Mi).
for every Mi ∈ G s.t. DegG(Mi) ≥ thresh(cid:48) do
Mi is malicious (remove from G,G,M).
thresh ← thresh− 1
thresh(cid:48) ← thresh(cid:48) − 1
Algorithm 1 T hresholdDetection(G = (V,E))
1: procedure SIMPLEMALICIOUSFILTERING(G,thresh(cid:48))
2:
3:
4:
5:
6:
7: procedure VIRTUALPAIRREMOVAL(G)
8:
9:
Pick an edge (Mi,Mj) ∈ E.
Remove mixes Mi,Mj from G.
10:
11: thresh(cid:48) ← thresh.
12: Invoke SIMPLEMALICIOUSFILTERING(G).
13: while E (cid:54)= ∅ do
14:
15:
16:
Invoke VIRTUALPAIRREMOVAL(G).
thresh(cid:48) ← thresh(cid:48) − 1.
Invoke SIMPLEMALICIOUSFILTERING(G).
Observation 2. If Gi has a legitimate removal sequence of
length µi, then there are at least µi malicious nodes in Gi.
We use Observation 2 to identify malicious mixes, using
the following claim.
Claim 1. Every node Mi that satisﬁes DegG(Mi) > nm − µi
is a malicious node.
Proof. Assume to the contrary, that there exists a mix Mi
such that DegG(Mi) > nm − µi but Mi is an honest mix.
Since there are nm malicious mixes in M, and µi of them
are not neighbors of Mi, then the maximum number of ma-
licious mixes that can be also neighbors of Mi is nm − µi,
since Mi is honest. But if DegG(Mi) > nm − µi, then at least
one of the neighbors of Mi is also honest, which contradicts
the assumption that honest links never fail. Therefore, if
DegG(Mi) > nm − µi then Mi must be a malicious mix.
For example, see Figure 4b which depicts the graph G1.
By observing G1, we know that at least one of the mixes
M2,M3 are malicious (since they share an edge), therefore,
µi ≥ 1 since we successfully identiﬁed a malicious mix
which is not in {M1 ∪ N(M1)}. Alternatively, the same ar-
gument can be made regarding M2 and M4 instead of the
pair M2 and M3. Since after removing M2,M4 from G1 there
are no edges left in G1, then µ1 = 1.
Algorithm 2 presents the Community Detection algorithm,
which leverages Claim 1 to detect malicious mixes. An il-
lustration of the operation of this algorithm is demonstrated
in Figure 5.
Notice that the algorithm only examines nodes with a de-
gree larger than 1 (line 3). The reason is that if DegG(Mi) = 0
then Mi did not perform an active attack yet, thus it cannot
be detected, and if DegG(Mi) = 1 then Mi cannot be classi-
ﬁed based on its neighbors. Therefore, an execution of the
1850    28th USENIX Security Symposium
USENIX Association
Focusing on M2
Focusing on M6
M1
M2
M3
M4
M9
M8
M7
M6
M5
M1
M2
M3
M4
M9
M8
M7
M6
M5
M1
M2
M3
M4
Focusing on M1
Detected
M1
M9
M8
M7
M6
M5
M9
M8
M7
M6
M5
M2
M3
M4
Detected
M2
Detected
M3
M4
M9
M8
M7
M6
M5
(a)
∀Mi : DegG (Mi)  1 = nm − µ2,
and therefore M2 is detected as
malicious. In the second scenario,
µ2 = 2 (e.g., if M1 and M6 are
removed ﬁrst), thus
DegG (M2) = 2 ≤ 2 = nm − µ2,
and therefore M2 is not detected
as malicious (yet). A similar
situation occurs with M3 when
observing G3.
(c) When we observe G6, two
malicious mixes can be identiﬁed,
thus µ6 = 2. As a result, since
DegG (M6) = 2 ≤ 2 = nm − µ6,
M6 is not classiﬁed as malicious
(nor should it be). Note that even
if M3 was removed in (b), then
DegG (M6) = 1 and therefore the
algorithm cannot classify it based
on its neighbors. The same
explanations apply to the rest of
the honest mixes.
(e) If M2 and M3 were not detected as
malicious as explained in (b), then after
the removal of M1 in (c) they will be
detected, because the removal of M1
causes nm = 4 → nm = 3. Since the
algorithm runs in a loop, when the
algorithm will re-check G2, it will
discover that µ2 = 2 and thus
DegG (M2) = 2 > 1 = nm − µ1, which
results in removal of M2. The same
goes for M3. After the removal of
M1,M2 and M3, the algorithm cannot
classify M4 as malicious based on its
neighbors, since M4 only dropped one
link. However, the algorithm has the
option to aggressively remove both
M4,M5.
Figure 5: A demonstration how Miranda’s community detection can signiﬁcantly improve the detection of malicious mixes
using an example graph G and thresh = nm + 1.
m ← nm
for each Mi ∈ V s.t. DegG(Mi) > 1 do
Algorithm 2 CommunityDetection(G = (V,E))
1: n(cid:48)
2: while E (cid:54)= ∅ do
3:
4:
5:
6:
7:
8:
9:
10:
11:
Construct Gi = (Vi,Ei) from G.
µi ← 0
while Ei (cid:54)= ∅ do
Invoke VIRTUALPAIRREMOVAL(Gi).
µi ← µi + 1
if DegG(Mi) > n(cid:48)
m − µi then
m ← n(cid:48)
Mi is malicious (remove from G,G,M).
nm ← nm − 1, n(cid:48)
m − 1
removal variations, but this is a time-consuming option in
large graphs. A more sophisticated picking strategy might
yield better results; however, when we experimented with
some possible strategies, we did not notice a signiﬁcant im-
provement over the random picking strategy.
The techniques discussed in this section provide Miranda
a signiﬁcant advantage, since malicious mixes can be de-
tected even if they do not pass thresh. Merely the threat
of such techniques is signiﬁcant in deterring active attacks.
In Section 7.4 we analyze the security of the mechanisms
discussed here and evaluate them empirically.
In [34] we
present alternative scheme for community detection based
on random walks.
12:
13:
14:
if E (cid:54)= ∅ then
Invoke VIRTUALPAIRREMOVAL(G).
m ← n(cid:48)
n(cid:48)
m − 1
7 Analysis of Active Attacks
CommunityDetection might not be able to detect all mali-
cious mixes that exposed themselves, e.g., mixes with a de-
gree that equals to 1. If desired, there is always the oppor-
tunity to execute the aggressive pair removal technique af-
ter the CommunityDetection algorithm to potentially remove
more malicious mixes (with price of possible removal of an
honest mix). Also, randomly picking a pair of mixes that
share an edge in G might not always be the optimal strat-
egy. In small graphs, the algorithm can exhaust all possible
In this section, we analyze the impact of active attacks in
the presence of Miranda. We ﬁrst analyze Miranda against
traditional and non-traditional active attacks, including at-
tacks designed to abuse the protocol to increase the chances
of clients choosing fully malicious cascades. We continue by
examining the security of loop messages and conclude this
section by evaluating how community detection strengthens
Miranda.
USENIX Association
28th USENIX Security Symposium    1851
7.1 Resisting Active Attacks
As discussed in Section 4, a malicious mix that drops a
packet sent from a preceding mix or destined to a subse-
quent mix, loses at least one link; in some cases, the ma-
licious mix gets completely excluded. Hence, the adversary
quickly loses its attacking capabilities, before any signiﬁcant
impact is introduced. However, the adversary might try other
approaches in order to link the communicating users or gain
advantage in the network, as we now discuss.
A malicious ﬁrst mix can refuse clients’ packets; however,
such attack is imprudent, since clients can migrate to other
cascades. Furthermore, clients can force the malicious mix
to relay their packets, using a witness. Similarly, it is inef-
fective for the last mix of a cascade to drop all packets it re-
ceives, since clients learn through isolation that the dropped
loop packets successfully arrived at the last mix. Although
clients cannot prove the mix maliciousness, they avoid fu-
ture cascades containing the malicious mix, including fully
malicious cascades.
Instead of directly dropping packets, adversaries can cause
a packet to be dropped by delaying the packet. However,
such attack is also detected.
Claim 2. A malicious mix that delays a packet, is either ex-
pelled from the system or loses a link.
Argument. When an honest mix receives a delayed packet,
it drops it. However, the honest mix still sends a receipt
back for that packet. If the malicious mix acknowledges the
receipt, the malicious mix is exposed when the client per-
forms the isolation process: the client can obtain a signed
receipt proving that the malicious mix received the packet
on time, and also the acknowledged receipt from the honest
mix that dropped the delayed packet. The latter contains the
round number when the packet was dropped, which proves
the malicious mix delayed the packet and therefore should
be excluded. Otherwise, if the malicious mix refuses to sign
the receipt, the honest mix disconnects from the malicious
mix.
Injecting malformed packets. Notice how the honest mix
that dropped the delayed message still sends back a receipt