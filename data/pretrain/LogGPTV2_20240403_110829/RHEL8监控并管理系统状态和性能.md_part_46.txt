# []{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html#file-system-parameters_configuring-an-operating-system-to-optimize-memory-access}文件系统参数 {.title}
:::
文件系统参数列在 `/proc/sys/fs`{.literal}
目录中。以下是可用文件系统参数：
::: variablelist
[`aio-max-nr`{.literal}]{.term}
:   定义所有活跃的异步输入/输出上下文中允许的最大事件数。默认值为
    `65536`{.literal}，修改这个值不会预先分配或调整任何内核数据结构的大小。
[`file-max`{.literal}]{.term}
:   确定整个系统处理的最大文件数。Red Hat Enterprise Linux 8
    中的默认值为
    `8192`{.literal}，或者内核启动时可用的内存页面中的一个，以更长者为准。
    增加这个值可解决缺少可用文件 handle 导致的错误。
:::
::: itemizedlist
**其它资源**
-   `sysctl(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html#kernel-parameters_configuring-an-operating-system-to-optimize-memory-access}内核参数 {.title}
:::
内核参数的默认值位于 `/proc/sys/kernel/`{.literal}
目录中。这些值会在启动时由内核计算，具体取决于可用的系统资源。
以下是用来为 `msg* 和 shm*`{.literal} ``{=html} System V
IPC(sys`vipc`{.literal})系统调用设置限制的可用内核参数：
::: variablelist
[`msgmax`{.literal}]{.term}
:   定义消息队列中任何单个消息允许的最大允许大小，以字节为单位。这个值不能超过队列的大小(`msgmnb`{.literal})。使用
    `sysctl msgmax`{.literal} 命令确定系统上当前的 `msgmax`{.literal}
    值。
[`msgmnb`{.literal}]{.term}
:   定义单个消息队列的最大字节大小。使用 `sysctl msgmnb`{.literal}
    命令确定系统上当前的 `msgmnb`{.literal} 值。
[`msgmni`{.literal}]{.term}
:   定义消息队列标识符的最大数量，以及队列的最大数量。使用
    `sysctl msgmni`{.literal} 命令确定系统上当前的 `msgmni`{.literal}
    值。
[`shmall`{.literal}]{.term}
:   定义一次系统上可以使用的共享内存页面总量。例如：AMD64 和 Intel 64
    构架中的页面是 `4096`{.literal} 字节。使用 `sysctl shmall`{.literal}
    命令确定系统上当前的 `shmall`{.literal} 值。
[`shmmax`{.literal}]{.term}
:   定义内核允许的单个共享内存段的最大字节大小。使用
    `sysctl shmmax`{.literal} 命令确定系统上当前的 `shmmax`{.literal}
    值。
[`shmmni`{.literal}]{.term}
:   定义系统范围的最大共享内存片段数。所有系统中的默认值为
    `4096`{.literal}。
:::
::: itemizedlist
**其它资源**
-   `sysvipc(7)`{.literal} 和 `sysctl(8)man`{.literal} page
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-memory-access_monitoring-and-managing-system-status-and-performance.html#setting-memory-related-kernel-parameters_configuring-an-operating-system-to-optimize-memory-access}设置内存相关内核参数 {.title}
:::
临时设置参数对于确定参数对系统的影响很有用。当您确定参数值具有所需的效果时，您可以永久设置
参数。
这个步骤描述了如何临时和永久设置与内存相关的内核参数。
::: itemizedlist
**流程**
-   要临时设置与内存相关的内核参数，请编辑 `/proc`{.literal}
    文件系统中的相应文件。
    例如，要临时将 `vm.overcommit_memory`{.literal} 参数设置为
    [*1*]{.emphasis} ：
    ``` screen
    # echo 1 > /proc/sys/vm/overcommit_memory
    # sysctl -w vm.overcommit_memory=1
    ```
-   要永久设置与内存相关的内核参数，请使用 `sysctl`{.literal} 工具。
    例如，要将 `vm.overcommit_memory`{.literal} 参数永久设置为
    [*1*]{.emphasis} ：
    ::: itemizedlist
    -   在 `/etc/sysctl.conf`{.literal} 文件中添加以下内容：
        ``` screen
        vm.overcommit_memory=1
        ```
    -   从 `/etc/sysctl.conf`{.literal} 文件中重新载入
        `sysctl`{.literal} 设置：
        ``` screen
        # sysctl -p
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   `sysctl(8)`{.literal} man page
:::
:::
:::
[]{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#configuring-huge-pages_monitoring-and-managing-system-status-and-performance}第 36 章 配置巨页 {.title}
:::
物理内存在固定大小的块（称为页面）中进行管理。在 Red Hat Enterprise
Linux 8 支持的 x86_64 构架中，内存页面的默认大小为
`4 KB`{.literal}。此默认页面大小已证明适合通用操作系统，如支持多种不同工作负载的
Red Hat Enterprise Linux。
然而，在某些情况下，特定应用程序可能会因使用更大的页面大小而受益。例如，处理数百兆字节甚至几十兆字节（甚至几十
GB）的大型且相对固定的数据集的应用在使用 `4 KB`{.literal}
时性能问题可能会有问题。此类数据集可能需要大量的 `4 KB`{.literal}
页面，这可能会导致操作系统和 CPU 的开销。
这部分提供有关 Red Hat Enterprise Linux 8
中的巨页以及如何配置它们的信息。
::: section
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#available-hugepage-features_configuring-huge-pages}可用的巨页功能 {.title}
:::
使用 Red Hat Enterprise Linux 8
时，您可以将巨页用于处理大数据集的应用程序，并改进此类应用程序的性能。
以下是 Red Hat Enterprise Linux 8 支持的巨页方法：
::: variablelist
[`HugeTLB 页`{.literal}]{.term}
:   HugeTLB 页面也称为静态巨页。保留 HugeTLB 页面的方法有两种：
    ::: itemizedlist
    -   在引导时：它增加了成功的可能性，因为内存还没有明显碎片化。但是，在
        NUMA 计算机上，页面数会自动分割在 NUMA
        节点之间。有关在引导时影响 HugeTLB 页面行为
        [的参数的更多信息，请参阅在引导时保留 HugeTLB
        页面的参数以及如何使用这些参数在引导时](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-huge-pages_monitoring-and-managing-system-status-and-performance#parameters-for-reserving-hugetlb-pages-at-boot-time_configuring-huge-pages){.link}
        配置 HugeTLB 页面，请参阅在引导时 [配置 HugeTLB
        页面。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-huge-pages_monitoring-and-managing-system-status-and-performance#configuring-hugetlb-at-boot-time_configuring-huge-pages){.link}
    -   运行时：它允许您为每个 NUMA
        节点保留巨页。如果在引导过程中尽快执行运行时保留，则内存碎片的可能性会降低。有关在引导时影响
        HugeTLB 页面行为 [的参数的更多信息，请参阅在运行时保留 HugeTLB
        页面的参数以及如何使用](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-huge-pages_monitoring-and-managing-system-status-and-performance#parameters-for-reserving-hugetlb-pages-at-run-time_configuring-huge-pages){.link}
        这些参数在引导时配置 HugeTLB 页面，请参阅在运行时 [配置 HugeTLB
        页面。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-huge-pages_monitoring-and-managing-system-status-and-performance#configuring-hugetlb-at-run-time_configuring-huge-pages){.link}
    :::
[`Transparent HugePages(THP)`{.literal}]{.term}
:   使用 THP
    时，内核会自动为进程分配巨页，因此不需要手动保留静态大页面。以下是
    THP 中的两种操作模式：
    ::: itemizedlist
    -   `系统范围`{.literal}
        ：在这里，内核会尝试在可能分配大页面时为进程分配大页面，该进程正在使用很大的连续虚拟内存区域。
    -   `每个进程`{.literal} ：这里，内核仅将大页面分配给您可以使用
        `madvise`{.literal}（）系统调用指定的各个进程的内存区域。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        THP 功能只支持 `2 MB`{.literal} 页面。
        :::
        有关启用和禁用 THP 的详情，请参考 [启用透明大页并 禁用透明大
        页](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-huge-pages_monitoring-and-managing-system-status-and-performance#enabling-transparent-hugepages_configuring-huge-pages){.link}。
    :::
:::
:::
::: section
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#parameters-for-reserving-hugetlb-pages-at-boot-time_configuring-huge-pages}在引导时保留 HugeTLB 页面的参数 {.title}
:::
在引导时，使用以下参数来影响 HugeTLB 页面行为：
::: table
[]{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#idm139675497750240}
**表 36.1. 用于在引导时配置 HugeTLB 页面的参数**
::: table-contents
+----------------------+----------------------+----------------------+
| 参数                 | Description          | 默认值               |
+:=====================+:=====================+:=====================+
| `                    | 定                   | 默认值为             |
| hugepages`{.literal} | 义在启动时在内核中配 | `0`{.literal}。      |
|                      | 置的持久大页面数量。 |                      |
|                      |                      | 要在引               |
|                      | 在 NUMA              | 导时更新这个值，请在 |
|                      | 系统                 | `/proc/sys/vm/nr_    |
|                      | 中，定义了此参数的巨 | hugepages`{.literal} |
|                      | 页在节点间平均分配。 | 文                   |
|                      |                      | 件中更改此参数的值。 |
|                      | 您可以通过更改       |                      |
|                      | `/                   |                      |
|                      | sys/devices/system/n |                      |
|                      | ode/node_id/hugepage |                      |
|                      | s/hugepages-size/nr_ |                      |
|                      | hugepages`{.literal} |                      |
|                      | 文件                 |                      |
|                      | 中的节点值，在运行时 |                      |
|                      | 为特定节点分配巨页。 |                      |
+----------------------+----------------------+----------------------+
| `h                   | 定                   | 有效值为             |
| ugepagesz`{.literal} | 义在启动时在内核中配 | `2 MB`{.literal} 和  |
|                      | 置的持久大页面大小。 | `1 GB`               |
|                      |                      | {.literal}。默认值为 |
|                      |                      | `2 MB`{.literal}。   |
+----------------------+----------------------+----------------------+
| `default_h           | 定义在启             | 有效值为             |
| ugepagesz`{.literal} | 动时在内核中配置的持 | `2 MB`{.literal} 和  |
|                      | 久性巨页的默认大小。 | `1 GB`               |
|                      |                      | {.literal}。默认值为 |
|                      |                      | `2 MB`{.literal}。   |
+----------------------+----------------------+----------------------+
:::
:::
:::
::: section
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#configuring-hugetlb-at-boot-time_configuring-huge-pages}在引导时配置 HugeTLB {.title}
:::
HugeTLB 子系统支持的页面大小取决于架构。x86_64 架构支持 `2 MB`{.literal}
的大页面和 `1 GB 千`{.literal} 兆页。
这个步骤描述了如何在引导时保留 `1 GB`{.literal} 页面。
::: orderedlist
**流程**
1.  通过以 root 用户身份将以下行附加到 `/etc/default/grub`{.literal}
    文件中的内核命令行选项，为 `1 GB`{.literal} 页面创建一个 HugeTLB
    池：
    ``` screen
    default_hugepagesz=1G hugepagesz=1G
    ```
2.  使用编辑的默认文件重新生成 `GRUB2`{.literal} 配置：
    ::: orderedlist
    1.  如果您的系统使用 BIOS 固件，请执行以下命令：
        ``` screen
        # grub2-mkconfig -o /boot/grub2/grub.cfg
        ```
    2.  如果您的系统使用 UEFI 框架，请执行以下命令：
        ``` screen
        # grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg
        ```
    :::
3.  在 `/usr/lib/systemd/system/`{.literal} 目录中创建一个名为
    `hugetlb-gigantic-pages.service`{.literal}
    的新文件，并添加以下内容：
    ``` screen
    [Unit]
    Description=HugeTLB Gigantic Pages Reservation
    DefaultDependencies=no
    Before=dev-hugepages.mount
    ConditionPathExists=/sys/devices/system/node
    ConditionKernelCommandLine=hugepagesz=1G
    [Service]
    Type=oneshot
    RemainAfterExit=yes
    ExecStart=/usr/lib/systemd/hugetlb-reserve-pages.sh
    [Install]