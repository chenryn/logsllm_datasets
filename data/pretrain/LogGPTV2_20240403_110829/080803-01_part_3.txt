● 使用Python实现微服务
希望当读到本章结尾时，你能深入了解微服务的构建，并明白微服务是什么，以
及如何使用Python。
1.1 SOA 的起源
关于微服务有很多种定义，并没有一个官方标准。在试着解释微服务时，人们通
常会提到面向服务架构(Service-Oriented Architecture，SOA)。
SOA早于微服务，其核心原则是将应用组织成一个独立的功能单元，可远程访问
并单独进行操作和更新。
——Wikipedia
上述定义中的每个单元都是一个独立服务，它实现业务的一个方面，并通过接口
提供功能。
虽然SOA清楚地指出服务应当是独立的进程，但并未强制使用哪种协议进行交
互，对如何部署和编排应用还是相当模糊的。
在少数专家于2009年发布的SOA宣言(http://www.soa-manifesto.org)中，甚至没有
提及服务是否通过网络进行交互。
SOA服务可在同一个机器上使用套接字(socket)通过IPC(Inter-Process Communication，
进程间通信)方式来交互，如使用共享内存、间接消息队列或远程过程调用(Remote
Procedure Call，RPC)。选项非常广泛，只要没有在单个进程中运行所有应用，SOA就
可以是任何东西。
常见的说法是，过年几年开始涌现的微服务是SOA的一种特定实现方式。它们实
现了SOA的一些目标，也就是用独立组件来构建应用，组件之间进行着交互。
如果想给出微服务的完整定义，最好先分析一下大多数软件是如何设计架构的。
1.2 单体架构
让我们先通过一个非常简单的例子来介绍传统的单体应用：一个酒店预订网站。
除了静态的HTML内容，网站有一个预订功能，可让全球任何城市的用户通过网
站预订酒店。用户可搜索酒店，然后用信用卡付款。
2
第1章 理解微服务
当用户搜索酒店网站时，应用将执行以下操作：
(1) 针对酒店数据库执行一些SQL查询。
(2) 给合作伙伴的服务发送HTTP请求，将更多酒店添加到列表中。
(3) 使用HTML模板引擎生成HTML结果页面。
一旦用户找到满意的酒店并单击“预订”，应用将执行以下步骤：
(1) 如有必要，在数据库中创建客户，然后进行身份验证。
(2) 通过与银行网络服务交互来完成付款。
(3) 按法律要求，应用需要将支付详情保存到数据库。
(4) 使用PDF生成器生成收据。
(5) 用电子邮件服务向用户发送一份用于确认的电子邮件。
(6) 用电子邮件服务将预订电子邮件转发给第三方酒店。
(7) 在数据库中添加用于追踪订单的条目。
上面是一个简化的过程，但紧贴实用。
应用和数据库的交互包括酒店信息、预订信息、支付信息和用户信息等。它还与
外部服务进行交互来发送邮件，完成支付，从合作伙伴获取更多酒店。
在经典的LAMP(Linux-Apache-MySQL-Perl/PHP/Python)架构中，每个传入的请求
都会在数据库生成关联的SQL查询，以及少量对外部服务的网络请求，然后服务器使
用模板引擎生成HTML响应。
图1-1描述了这种中心化架构。
邮件服务
预订应用
银行
第三方酒店
用户
酒店
数据库
支付
预订
图1-1 中心化架构
3
Python微服务开发
这是一个典型的单体应用，它有很多显而易见的好处。
最大的好处是整个应用程序在一个代码库中，这样开始项目编码就变得十分简单。
很容易构建良好的测试覆盖率，还可在一个代码库内以干净和结构化的方式组织代码。
将所有数据存储到单一数据库中也简化了应用的开发。可调整数据模型以及代码查询
它的方式。
部署也很容易：可给代码库打标签，构建应用包，然后运行它。如果需要扩大规
模，可运行多个预订应用的实例，并使用复制机制建立多个数据库。
如果应用一直都很小，这种模型将非常好用，对于单个团队来说，维护也很容易。
但项目通常都会增长，都比最初计划的要大。在一个代码库中维护整个应用会遇
到很多棘手的问题。例如，如果要进行一次大范围的彻底修改，如更改银行服务或数
据库层，则整个应用会陷入不稳定状态。这些改变在项目生命周期中是个较大的问题，
只有通过大量的额外测试才能部署一个新版本。一个项目的生命周期中，这样的改变
难免发生。
由于系统的不同部分要求不同的正常运行时间和稳定性，因此一些小变化也会产
生附带破坏。例如创建PDF出错而导致服务器崩溃，会将付款和预订流程置于风险中，
很明显这是存在问题的。
失控性增长是另一个问题，应用迅速添加了很多新特性，不断有开发者离开或加
入项目，代码结构变得混乱不堪，测试速度越来越慢。通常，这种增长的最终结果是
一个难以维护的意大利面条式的代码库，每次当开发者重构数据模型时，“长毛”的数
据库都需要一个复杂的数据迁移计划。
大型软件项目通常需要经历数年时间才能走向成熟，此后，会慢慢地变得难以理
解和陷入混乱，最终很难进行维护。这不是因为开发者水平糟糕导致的，而是因为复
杂度在增加，很少有人完全理解他们所做的每一个小改动会产生的影响，他们只试图
在代码库的某个角落孤立地工作。当从1万英尺的高空鸟瞰项目时，看到的只有混乱。
这些都是我们亲身经历过的。
过程是很痛苦的，一个项目开始时，开发者梦想能用最新的架构来构建应用。但
紧接着，他们通常会再次陷入同样的困局——熟悉的场景再次上演。
下面总结一下单体应用的优缺点：
● 用单体模式开始一个项目是容易的，可能还是最好的方法。
● 中心化的数据库简化了数据的设计和组织。
● 部署应用较简单。
● 对代码的任何改动会影响原本不相关的功能。对某部分的错误修改可能导致
整个应用的崩溃。
4
第1章 理解微服务
● 扩展应用的解决方案存在限制：可部署多个实例，但若其中一个特定功能占
用了所有资源，则会影响整个应用。
● 随着代码库的增长，很难保证代码的干净和可控性。
当然也有一些办法可避免上述问题。
常见的解决方案是将应用拆分为不同的部分，而最后生成的代码仍将在单个进程
中运行。开发人员通过使用外部库或框架来重构应用从而做到这一点。这些工具可以
是内部的，或来自开源软件(Open Source Software，OSS)社区。
如果使用诸如Flask的框架在Python中构建Web应用，可将焦点放在业务逻辑上。
最吸引人的地方是能把自己的代码外部化，变成Flask的扩展和较小的Python包。将
代码拆分是控制应用程序增长的好方法。
“小而美”
——UNIX哲学
例如，可使用 Reportlab 和一些模板，将酒店预订应用中的 PDF 生成器拆分成
Python包。
这个软件包可在其他一些应用中重用，甚至可发布到Python包索引(PyPI)中。
但你构建的依然是一个单体应用，很多问题依然存在。例如无法按照不同的部分
扩展，缺陷依赖会导致任何间接错误。
还会因为构建时使用了依赖而遇到新挑战。其中一个问题是依赖地狱，如果应用
的一部分使用了某个工具库，但PDF生成器只能用这个工具库的特定版本，最终将不
得不使用一些怪异的解决方案来处理，甚至在分支上定制开发一个修复。
当然本节中描述的所有问题都不可能在项目的第一天出现，而是随着时间推移慢
慢堆积起来。
下面看看如果使用微服务来构建相同的应用，会是什么样的。
1.3 微服务架构
如果使用微服务构建相同功能的应用，就可用拆分出的多个组件来管理代码，每
个组件运行在独立的线程中。我们不需要使用单一应用负责所有事项，而是如图 1-2
所示拆分成多个微服务。
5
Python微服务开发
身份验证
令牌
酒店
数据库
数据库
查找
预订UI
第三方
酒店
PDF报表
用户
用户
预订 支付 数据库
电子邮件
支付
数预 据订 数据库
银行
库
图1-2 拆分成多个微服务
图中显示的组件数量较多，但不必望而生畏。在单体应用中，内部交互只对内部
的某个部分可见。我们已经转移了一些复杂性，最终得到7个独立组件：
(1) 预订UI：一个前端服务，用来生成Web UI界面，会与其他所有微服务发生
交互。
(2) “PDF 报表”服务：一个非常简单的服务，通过给定的模板和数据把收据或
者任何文档创建成PDF。
(3) 查找：一个可根据城市名查询酒店列表的服务，这个服务有自己的数据库。
(4) 支付：一个和第三方银行服务交互的服务，管理记账数据库。支付成功时会
发送电子邮件。
(5) 预订：存储预订信息，并生成PDF。
(6) 用户：存储用户信息，通过电子邮件和用户交互。
(7) 身份验证：一个基于OAuth2来返回身份验证令牌的服务，每个微服务都可在
请求其他服务时用它进行身份验证。
这些微服务，连同诸如电子邮件的外部服务，将提供和单体应用相同的功能集。
这个架构中的每个组件都使用HTTP协议进行通信，通过REST风格的Web接口提供
服务。
由于每个微服务都在内部处理自己的数据结构，所以不需要中心化的数据库，使
6
第1章 理解微服务
用和语言无关的格式(如JSON)输入和输出数据。可使用任何程序语言都能生成和使用
的XML或YAML格式，最后通过HTTP请求和响应进行传输。
“预订UI”服务有些不同，因为它主要用来生成UI页面。依赖于UI使用的前端框
架，“预订UI”服务输出的可能是混合的HTML和JSON；如果使用基于静态JavaScript
的客户端工具直接在浏览器中生成界面，甚至可以是普通JSON。
除了这个特殊的UI情形，使用微服务架构设计的Web应用由多个使用HTTP进
行交互的微服务组成。
这种场景下，微服务是聚焦于特定任务的逻辑单元。这里尝试给出一个完整定义：
微服务是一个轻量级应用，它通过定义良好的契约提供一组有限的功能。它
是具有单一责任的组件，可独立开发和部署。
此定义没有提及HTTP或JSON，因为也可以考虑一个基于UDP来交换二进制数
据的微服务。
但在本书的案例中，所有微服务都是使用HTTP协议的简单Web应用，都使用和
生成JSON(UI情形除外)。
1.4 微服务的益处
虽然微服务架构看起来比单体架构复杂得多，但其益处颇多：
● 分离团队的关注点
● 处理更小的项目
● 更多的扩展和部署选项
下面将详细讨论这些内容。
1.4.1 分离团队的关注点
首先，每个微服务可由一个团队独立开发。例如，构建“预订”服务可以是一个
完整项目。只要有一个良好的HTTP API说明文档，负责开发的团队可使用任何编程
语言和数据库。
其次，这意味着应用的演进比单体架构更容易控制。例如，如果支付系统更改其
与银行的交互，则影响范围只限于该服务内部，其余应用将保持稳定，甚至完全不受
影响。
这种松耦合极大地提高了整个项目的开发速度，从服务层面讲，这是一种类似于
7
Python微服务开发
“单一职责原则”的哲学逻辑。
单一职责原则由Robert Martin定义，一个类应该只有一个令其改变的原因。换句
话说，每个类应该提供单一的、定义良好的功能。在微服务层面，每个微服务都应该
聚焦在单个角色上。
1.4.2 更小的项目
第二个益处是降低了项目的复杂度。例如向应用添加一个“PDF报表”功能时，
即便代码很干净，仍会让代码库变得更大，更复杂，有时还会更慢。而在单独应用中
构建该功能可避免此问题，因为可更容易地使用任何工具来编程。可频繁地重构它，
缩短发布周期，聚焦在最重要的事项上。应用的增长尽在掌控中。