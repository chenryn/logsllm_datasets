these techniques, showing how you can exploit different kinds of behavior within
an application to perform unauthorized actions and access protected data.
Common Vulnerabilities
Access controls can be divided into three broad categories: vertical, horizontal,
and context-dependent.
Vertical access controls allow different types of users to access different parts
of the application’s functionality. In the simplest case, this typically involves a
division between ordinary users and administrators. In more complex cases,
vertical access controls may involve fi ne-grained user roles granting access to
specifi c functions, with each user being allocated to a single role, or a combina-
tion of different roles.
Horizontal access controls allow users to access a certain subset of a wider
range of resources of the same type. For example, a web mail application may
allow you to read your e-mail but no one else’s, an online bank may let you
transfer money out of your account only, and a workfl ow application may allow
you to update tasks assigned to you but only read tasks assigned to other people.
Context-dependent access controls ensure that users’ access is restricted to
what is permitted given the current application state. For example, if a user is
following multiple stages within a process, context-dependent access controls
may prevent the user from accessing stages out of the prescribed order.
In many cases, vertical and horizontal access controls are intertwined. For
example, an enterprise resource planning application may allow each accounts
payable clerk to pay invoices for a specifi c organizational unit and no other. The
accounts payable manager, on the other hand, may be allowed to pay invoices
for any unit. Similarly, clerks may be able to pay invoices for small amounts,
but larger invoices must be paid by the manager. The fi nance director may be
able to view invoice payments and receipts for every organizational unit in the
company but may not be permitted to pay any invoices.
Access controls are broken if any user can access functionality or resources for
which he or she is not authorized. There are three main types of attacks against
access controls, corresponding to the three categories of controls:
n Vertical privilege escalation occurs when a user can perform functions
that his assigned role does not permit him to. For example, if an ordinary
user can perform administrative functions, or a clerk can pay invoices of
any size, access controls are broken.
cc0088..iinndddd 225588 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 259
Chapter 8 n Attacking Access Controls 259
n Horizontal privilege escalation occurs when a user can view or modify
resources to which he is not entitled. For example, if you can use a web
mail application to read other people’s e-mail, or if a payment clerk can
process invoices for an organizational unit other than his own, access
controls are broken.
n Business logic exploitation occurs when a user can exploit a fl aw in the
application’s state machine to gain access to a key resource. For example,
a user may be able to bypass the payment step in a shopping checkout
sequence.
It is common to fi nd cases where vulnerability in the application’s horizontal
separation of privileges can lead immediately to a vertical escalation attack. For
example, if a user fi nds a way to set a different user’s password, the user can
attack an administrative account and take control of the application.
In the cases described so far, broken access controls enable users who have
authenticated themselves to the application in a particular user context to per-
form actions or access data for which that context does not authorize them.
However, in the most serious cases of broken access control, it may be possible
for completely unauthorized users to gain access to functionality or data that
is intended to be accessed only by privileged authenticated users.
Completely Unprotected Functionality
In many cases of broken access controls, sensitive functionality and resources
can be accessed by anyone who knows the relevant URL. For example, with
many applications, anyone who visits a specifi c URL can make full use of its
administrative functions:
https://wahh-app.com/admin/
In this situation, the application typically enforces access control only to the
following extent: users who have logged in as administrators see a link to this
URL on their user interface, and other users do not. This cosmetic difference
is the only mechanism in place to “protect” the sensitive functionality from
unauthorized use.
Sometimes, the URL that grants access to powerful functions may be less
easy to guess, and may even be quite cryptic:
https://wahh-app.com/menus/secure/ff457/DoAdminMenu2.jsp
Here, access to administrative functions is protected by the assumption that
an attacker will not know or discover this URL. The application is harder for
an outsider to compromise, because he is less likely to guess the URL by which
he can do so.
cc0088..iinndddd 225599 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 260
260 Chapter 8 n Attacking Access Controls
COMMON MYTH
“No low-privileged users will know that URL. We don’t reference it anywhere
within the application.”
The absence of any genuine access control still constitutes a serious vulner-
ability, regardless of how easy it would be to guess the URL. URLs do not have
the status of secrets, either within the application itself or in the hands of
its users. They are displayed on-screen, and they appear in browser histories
and the logs of web servers and proxy servers. Users may write them down,
bookmark them, or e-mail them. They are not usually changed periodically, as
passwords should be. When users change job roles, and their access to admin-
istrative functionality needs to be withdrawn, there is no way to delete their
knowledge of a particular URL.
In some applications where sensitive functionality is hidden behind URLs
that are not easy to guess, an attacker may often be able to identify these via
close inspection of client-side code. Many applications use JavaScript to build
the user interface dynamically within the client. This typically works by setting
various fl ags regarding the user’s status and then adding individual elements
to the UI on the basis of these:
var isAdmin = false;
...
if (isAdmin)
{
adminMenu.addItem(“/menus/secure/ff457/addNewPortalUser2.jsp”,
“create a new user”);
}
Here, an attacker can simply review the JavaScript to identify URLs for
administrative functionality and attempt to access these. In other cases, HTML
comments may contain references to or clues about URLs that are not linked
from on-screen content. Chapter 4 discusses the various techniques by which
an attacker can gather information about hidden content within the application.
Direct Access to Methods
A specifi c case of unprotected functionality can arise when applications expose
URLs or parameters that are actually remote invocations of API methods, normally
those exposed by a Java interface. This often occurs when server-side code is
moved to a browser extension component and method stubs are created so that
the code can still call the server-side methods it requires to function. Outside
of this situation, some instances of direct access to methods can be identifi ed
where URLs or parameters use the standard Java naming conventions, such as
getBalance and isExpired.
cc0088..iinndddd 226600 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 261
Chapter 8 n Attacking Access Controls 261
In principle, requests specifying a server-side API to be executed need be
no less secure than those specifying a server-side script or other resource. In
practice, however, this type of mechanism frequently contains vulnerabilities.
Often, the client interacts directly with server-side API methods and bypasses
the application’s normal controls over access or unexpected input vectors. There
is also a chance that other functionality exists that can be invoked in this way
and is not protected by any controls, on the assumption that it could never be
directly invoked by web application clients. Often, there is a need to provide
users with access to certain specifi c methods, but they are instead given access
to all methods. This is either because the developer is not fully aware of which
subset of methods to proxy and provides access to all methods, or because the API
used to map them to the HTTP server provides access to all methods by default.
The following example shows the getCurrentUserRoles method being invoked
from within the interface securityCheck:
http://wahh-app.com/public/securityCheck/getCurrentUserRoles
In this example, in addition to testing the access controls over the getCur-
rentUserRoles method, you should check for the existence of other similarly
named methods such as getAllUserRoles, getAllRoles, getAllUsers, and
getCurrentUserPermissions. Further considerations specifi c to the testing of
direct access to methods are described later in this chapter.
Identifi er-Based Functions
When a function of an application is used to gain access to a specifi c resource,
it is common to see an identifi er for the requested resource being passed to the
server in a request parameter, within either the URL query string or the body
of a POST request. For example, an application may use the following URL to
display a specifi c document belonging to a particular user:
https://wahh-app.com/ViewDocument.php?docid=1280149120
When the user who owns the document is logged in, a link to this URL is
displayed on the user’s My Documents page. Other users do not see the link.
However, if access controls are broken, any user who requests the relevant URL
may be able to view the document in exactly the same way as the authorized user.
TIP This type of vulnerability often arises when the main application inter-
faces with an external system or back-end component. It can be diffi cult to
share a session-based security model between different systems that may be
based on diverse technologies. Faced with this problem, developers frequently
take a shortcut and move away from that model, using client-submitted
parameters to make access control decisions.
cc0088..iinndddd 226611 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 262
262 Chapter 8 n Attacking Access Controls
In this example, an attacker seeking to gain unauthorized access needs to
know not only the name of the application page (ViewDocument.php) but also
the identifi er of the document he wants to view. Sometimes, resource identi-
fi ers are generated in a highly unpredictable manner; for example, they may
be randomly chosen GUIDs. In other cases, they may be easily guessed; for
example, they may be sequentially generated numbers. However, the applica-
tion is vulnerable in both cases. As described previously, URLs do not have the
status of secrets, and the same applies to resource identifi ers. Often, an attacker
who wants to discover the identifi ers of other users’ resources can fi nd some
location within the application that discloses these, such as access logs. Even
where an application’s resource identifi ers cannot be easily guessed, the appli-
cation is still vulnerable if it fails to properly control access to those resources.
In cases where the identifi ers are easily predicted, the problem is even more
serious and more easily exploited.
TIP Application logs are often a gold mine of information. They may contain
numerous items of data that can be used as identifi ers to probe functionality
that is accessed in this way. Identifi ers commonly found within application
logs include usernames, user ID numbers, account numbers, document IDs,
user groups and roles, and e-mail addresses.
NOTE In addition to being used as references to data-based resources within
the application, this kind of identifi er is often used to refer to functions of the
application itself. As you saw in Chapter 4, an application may deliver differ-
ent functions via a single page, which accepts a function name or identifi er as
a parameter. Again in this situation, access controls may run no deeper than
the presence or absence of specifi c URLs within the interfaces of different
types of users. If an attacker can determine the identifi er for a sensitive func-
tion, he may be able to access it in the same way as a more privileged user.
Multistage Functions
Many kinds of functions within an application are implemented across several
stages, involving multiple requests being sent from the client to the server. For
example, a function to add a new user may involve choosing this option from
a user maintenance menu, selecting the department and user role from drop-
down lists, and then entering the new username, initial password, and other
information.
It is common to encounter applications in which efforts have been made to
protect this kind of sensitive functionality from unauthorized access but where
the access controls employed are broken because of fl awed assumptions about
how the functionality will be used.
cc0088..iinndddd 226622 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 263
Chapter 8 n Attacking Access Controls 263
In the previous example, when a user attempts to load the user maintenance
menu and chooses the option to add a new user, the application may verify
that the user has the required privileges and block access if the user does not.
However, if an attacker proceeds directly to the stage of specifying the user’s
department and other details, there may be no effective access control. The
developers unconsciously assumed that any user who reaches the later stages
of the process must have the relevant privileges because this was verifi ed at
the earlier stages. The result is that any user of the application can add a new
administrative user account and thereby take full control of the application, gain-
ing access to many other functions whose access control is intrinsically robust.
The authors have encountered this type of vulnerability even in the most
security-critical web applications — those deployed by online banks. Making a
funds transfer in a banking application typically involves multiple stages, partly
to prevent users from accidentally making mistakes when requesting a transfer.
This multistage process involves capturing different items of data from the user
at each stage. This data is checked thoroughly when fi rst submitted and then
usually is passed to each subsequent stage, using hidden fi elds in HTML form.
However, if the application does not revalidate all this data at the fi nal stage,
an attacker can potentially bypass the server’s checks. For example, the appli-
cation might verify that the source account selected for the transfer belongs to
the current user and then ask for details about the destination account and the
amount of the transfer. If a user intercepts the fi nal POST request of this process
and modifi es the source account number, she can execute a horizontal privilege
escalation and transfer funds out of an account belonging to a different user.
Static Files
In the majority of cases, users gain access to protected functionality and resources
by issuing requests to dynamic pages that execute on the server. It is the responsi-
bility of each such page to perform suitable access control checks and confi rm that
the user has the relevant privileges to perform the action he or she is attempting.
However, in some cases, requests for protected resources are made directly to
the static resources themselves, which are located within the server’s web root.
For example, an online publisher may allow users to browse its book catalog
and purchase ebooks for download. Once payment has been made, the user is
directed to a download URL like the following:
https://wahh-books.com/download/9780636628104.pdf
Because this is a completely static resource, if it is hosted on a traditional web
server, its contents are simply returned directly by the server, and no application-
level code is executed. Hence, the resource cannot implement any logic to verify
cc0088..iinndddd 226633 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 264
264 Chapter 8 n Attacking Access Controls
that the requesting user has the required privileges. When static resources are
accessed in this way, it is highly likely that no effective access controls are pro-
tecting them and that anyone who knows the URL naming scheme can exploit
this to access any resources he wants. In the present case, the document name
looks suspiciously like an ISBN, which would enable an attacker to quickly
download every ebook produced by the publisher!
Certain types of functionality are particularly prone to this kind of prob-
lem, including fi nancial websites providing access to static documents about
companies such as annual reports, software vendors that provide downloadable
binaries, and administrative functionality that provides access to static log fi les
and other sensitive data collected within the application.
Platform Misconfi guration
Some applications use controls at the web server or application platform layer
to control access. Typically, access to specifi ed URL paths is restricted based on
the user’s role within the application. For example, access to the /admin path
may be denied to users who are not in the Administrators group. In principle,
this is an entirely legitimate means of controlling access. However, mistakes
made in the confi guration of the platform-level controls can often allow unau-
thorized access to occur.
The platform-level confi guration normally takes the form of rules that are
akin to fi rewall policy rules, which allow or deny access based on the following:
n HTTP request method
n URL path
n User role
As described in Chapter 3, the original purpose of the GET method is of retriev-
ing information, and the purpose of the POST method is performing actions that
change the application’s data or state.
If care is not taken to devise rules that accurately allow access based on the
correct HTTP methods and URL paths, this may lead to unauthorized access.
For example, if an administrative function to create a new user uses the POST
method, the platform may have a deny rule that disallows the POST method
and allows all other methods. However, if the application-level code does not
verify that all requests for this function are in fact using the POST method, an
attacker may be able to circumvent the control by submitting the same request
using the GET method. Since most application-level APIs for retrieving request
parameters are agnostic as to the request method, the attacker can simply sup-
ply the required parameters within the URL query string of the GET request to
make unauthorized use of the function.
cc0088..iinndddd 226644 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 265
Chapter 8 n Attacking Access Controls 265
What is more surprising, on the face of it, is that applications can still be
vulnerable even if the platform-level rule denies access to both the GET and
POST methods. This happens because requests using other HTTP methods may
ultimately be handled by the same application code that handles GET and POST
requests. One example of this is the HEAD method. According to specifi cations,
servers should respond to a HEAD request with the same headers they would use
to respond to the corresponding GET request, but with no message body. Hence,
most platforms correctly service HEAD requests by executing the corresponding
GET handler and just return the HTTP headers that are generated. GET requests
can often be used to perform sensitive actions, either because the application
itself uses GET requests for this purpose (contrary to specifi cations) or because
it does not verify that the POST method is being used. If an attacker can use a
HEAD request to add an administrative user account, he or she can live without
receiving any message body in the response.
In some cases, platforms handle requests that use unrecognized HTTP methods