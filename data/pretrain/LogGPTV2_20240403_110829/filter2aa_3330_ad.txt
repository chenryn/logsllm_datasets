                }
            }
        }
        // Using the proxy trick, anything extending serializable and 
invocation handler is tainted.
        for (ClassReference.Handle clazz : classMap.keySet()) {
            if (Boolean.TRUE.equals(serializableDecider.apply(clazz))
                    && inheritanceMap.isSubclassOf(clazz, new 
ClassReference.Handle("java/lang/reflect/InvocationHandler"))) {
                MethodReference.Handle method = new 
MethodReference.Handle(
                        clazz, "invoke", "
(Ljava/lang/Object;Ljava/lang/reflect/Method;
[Ljava/lang/Object;)Ljava/lang/Object;");
                addDiscoveredSource(new Source(method, 0));
            }
        }
        // hashCode() or equals() are accessible entry points using 
standard tricks of putting those objects
        // into a HashMap.
        for (MethodReference.Handle method : methodMap.keySet()) {
            if 
(Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference())
)) {
                if (method.getName().equals("hashCode") && 
method.getDesc().equals("()I")) {
                    addDiscoveredSource(new Source(method, 0));
                }
                if (method.getName().equals("equals") && 
method.getDesc().equals("(Ljava/lang/Object;)Z")) {
GadgetChainDiscovery
接下来就是最重要的⽣成利⽤链的部分了，这部分整合了上⾯所有的信息，会遍历全部的
source，并在callgraph.dat中递归查找所有可以继续传递污点参数的⼦⽅法调⽤，直⾄遇到sink
标记的⽅法，看看discover即可，带了备注
                    addDiscoveredSource(new Source(method, 0));
                    addDiscoveredSource(new Source(method, 1));
                }
            }
        }
        // Using a comparator proxy, we can jump into the call() / 
doCall() method of any groovy Closure and all the
        // args are tainted.
        // 
https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/p
ayloads/Groovy1.java
        for (MethodReference.Handle method : methodMap.keySet()) {
            if 
(Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference())
)
                    && 
inheritanceMap.isSubclassOf(method.getClassReference(), new 
ClassReference.Handle("groovy/lang/Closure"))
                    && (method.getName().equals("call") || 
method.getName().equals("doCall"))) {
                addDiscoveredSource(new Source(method, 0));
                Type[] methodArgs = 
Type.getArgumentTypes(method.getDesc());
                for (int i = 0; i  methodMap = 
DataLoader.loadMethods();
        InheritanceMap inheritanceMap = InheritanceMap.load();
        //得到⽅法的所有⼦类⽅法实现
        Map> 
methodImplMap = InheritanceDeriver.getAllMethodImplementations(
                inheritanceMap, methodMap);
        final ImplementationFinder implementationFinder = 
config.getImplementationFinder(
                methodMap, methodImplMap, inheritanceMap);
        //写⼊⽂件
        try (Writer writer = 
Files.newBufferedWriter(Paths.get("methodimpl.dat"))) {
            for (Map.Entry> entry : methodImplMap.entrySet()) {
 writer.write(entry.getKey().getClassReference().getName());
                writer.write("\t");
                writer.write(entry.getKey().getName());
                writer.write("\t");
                writer.write(entry.getKey().getDesc());
                writer.write("\n");
                for (MethodReference.Handle method : entry.getValue()) {
                    writer.write("\t");
                    writer.write(method.getClassReference().getName());
                    writer.write("\t");
                    writer.write(method.getName());
                    writer.write("\t");
                    writer.write(method.getDesc());
                    writer.write("\n");
                }
            }
        }
        //⽅法调⽤map，key为⽗⽅法，value为⼦⽅法与⽗⽅法参数传递关系
        Map> graphCallMap = new 
HashMap<>();
        for (GraphCall graphCall : 
DataLoader.loadData(Paths.get("callgraph.dat"), new GraphCall.Factory())) 
{
            MethodReference.Handle caller = graphCall.getCallerMethod();
            if (!graphCallMap.containsKey(caller)) {
                Set graphCalls = new HashSet<>();
                graphCalls.add(graphCall);
                graphCallMap.put(caller, graphCalls);
            } else {
                graphCallMap.get(caller).add(graphCall);
            }
        }
        //exploredMethods保存在调⽤链从查找过程中已经访问过的⽅法节点，
methodsToExplore保存调⽤链
        Set exploredMethods = new HashSet<>();
        LinkedList methodsToExplore = new LinkedList<>();
        for (Source source : DataLoader.loadData(Paths.get("sources.dat"), 
new Source.Factory())) {
            GadgetChainLink srcLink = new 
GadgetChainLink(source.getSourceMethod(), source.getTaintedArgIndex());
            if (exploredMethods.contains(srcLink)) {
                continue;
            }
            methodsToExplore.add(new GadgetChain(Arrays.asList(srcLink)));
            exploredMethods.add(srcLink);
        }
        long iteration = 0;
        Set discoveredGadgets = new HashSet<>();
        //使⽤⼴度优先搜索所有从source到sink的调⽤链
        while (methodsToExplore.size() > 0) {
            if ((iteration % 1000) == 0) {
                LOGGER.info("Iteration " + iteration + ", Search space: " 
+ methodsToExplore.size());
            }
            iteration += 1;
            GadgetChain chain = methodsToExplore.pop();
            GadgetChainLink lastLink = 
chain.links.get(chain.links.size()-1);
            //获取当前节点⽅法所有⼦⽅法与当前节点⽅法参数传递关系
            Set methodCalls = 
graphCallMap.get(lastLink.method);
            if (methodCalls != null) {
                for (GraphCall graphCall : methodCalls) {
                    //如果当前节点⽅法的污染参数与当前⼦⽅法受⽗⽅法参数影响的Index
不⼀致则跳过
                    if (graphCall.getCallerArgIndex() != 
lastLink.taintedArgIndex) {
                        continue;
                    }
                    Set allImpls = 
implementationFinder.getImplementations(graphCall.getTargetMethod());
                    for (MethodReference.Handle methodImpl : allImpls) {
                        GadgetChainLink newLink = new 
GadgetChainLink(methodImpl, graphCall.getTargetArgIndex());
                        //如果新⽅法已近被访问过了，则跳过,这⾥能减少开销。但是这⼀
步跳过会使其他链/分⽀链经过此节点时，由于已经此节点被访问过了，链会在这⾥断掉。那么如果这
个条件去掉就能实现找到所有链了吗？这⾥去掉会遇到环状问题，造成路径⽆限增加
                        if (exploredMethods.contains(newLink)) {
                            continue;
                        }
                        //新节点与之前的链组成新链
                        GadgetChain newChain = new GadgetChain(chain, 
newLink);
                        //如果到达了sink，则加⼊discoveredGadgets
                        if (isSink(methodImpl, 
graphCall.getTargetArgIndex(), inheritanceMap)) {
                            discoveredGadgets.add(newChain);
                        } else {
                            methodsToExplore.add(newChain);
                            exploredMethods.add(newLink);
                        }
到这⾥GI的关键逻辑也⾛完了难点部分也结束了
题外话
关于dup指令
这⾥我⾮常好奇java虚拟机⾥的dup指令的作⽤，看官⽅描述是复制栈顶数值并将复制值压⼊
栈顶，很懵逼，但看了脚本之家的例⼦后就完全明⽩了
对于类
                    }
                }
            }
        }
        try (OutputStream outputStream = 
Files.newOutputStream(Paths.get("gadget-chains.txt"));
             Writer writer = new OutputStreamWriter(outputStream, 
StandardCharsets.UTF_8)) {
            for (GadgetChain chain : discoveredGadgets) {
                printGadgetChain(writer, chain);
            }
        }
        System.out.println(Paths.get("gadget-chains.txt"));
        LOGGER.info("Found {} gadget chains.", discoveredGadgets.size());
    }
得到字节码如下
1. 其中new指令在java堆上为Exception对象分配内存空间，并将地址压⼊操作数栈顶；
2. 然后dup指令为复制操作数栈顶值，并将其压⼊栈顶，也就是说此时操作数栈上有连续相
同的两个对象地址；
3. invokespecial指令调⽤实例初始化⽅法 :()V，注意这个⽅法是⼀个实例⽅法，所以需要从
操作数栈顶弹出⼀个this引⽤，也就是说这⼀步会弹出⼀个之前⼊栈的对象地址；
4. athrow指令从操作数栈顶取出⼀个引⽤类型的值，并抛出；
5. 最后由return指令结束⽅法
从上⾯的五个步骤中可以看出，需要从栈顶弹出两个实例对象的引⽤，这就是为什么会在new
指令下⾯有⼀个dup指令
关于CC
public class ExceptionTest{
  void cantBeZero(int i) throws Exception{
    throw new Exception();
  }
}
0: iload_1
1: ifne     12
4: new      #2         
// class java/lang/Exception
7: dup
8: invokespecial #3         
// Method java/lang/Exception."":()V
11: athrow
12: return
在简单了解完逻辑之后，打算试⼀试扫描cc组件，但是没有出现任何的结果，于是就做了
⼀些简单的修改，在 gadgetinspector.GadgetChainDiscovery#isSink 我增加了⼀条规
则直接将 org.apache.commons.collections.Transformer#transform  作为 sink 
但是之后发现⽐如像AnnotationInvocationHandler这样的链，由于LazyMap在之前可能被添加到
exploredMethods当中，导致利⽤链断了，后⾯⾃⼰尝试了下修复bug通过设置记录最⼤重复分
⽀，但是发现重复利⽤链太多了，还是顶哦，还好发现了某个⼤师傅的宝藏仓库，⾥⾯对重
复以及重复链做了聚合优化
https://github.com/5wimming/gadgetinspector/blob/main/src/main/java/gadgetinspector/GadgetChain
Discovery.java
if 
(method.getClassReference().getName().equals("org/apache/commons/collectio
ns/Transformer")
    && method.getName().equals("transform")) {
  return true;
}
看了思路后尝试⾃⼰修改，最终出来的结果这样看起来更直观666
之后还有其他问题⽐如像cc当中的有PriorityQueue的链⼦，由于下⾯这串代码也会受影响
暂时的解决⽅案就是注释掉这⼀⾏来获得所有利⽤链，但是就是太慢了，⽽且⼈⼯审计⼯作
量更⼤
总之GI真的太笨重了，这⾥主要是学习原理也不想深⼊改bug了
参考⽂章
https://xz.aliyun.com/t/7058
 //如果当前节点⽅法的污染参数与当前⼦⽅法受⽗⽅法参数影响的Index不⼀致则跳过
if (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex ) {
    continue;
}
https://cloud.tencent.com/developer/article/1633445
https://www.cnblogs.com/tr1ple/p/12800859.html
https://www.jianshu.com/p/dfdfdb455d8c
https://xz.aliyun.com/t/7058
https://paper.seebug.org/1034/