environment that can distinguish between real and ideal settings.
The IITM model is a universal composability model that consists
of a general computational model and provides several composition
theorems. The general computational model is defined by systems
of interactive Turing machines. An interactive Turing machine (or
a machine) is defined as a probabilistic polynomial-time Turing
machine with named bidirectional tapes. In a system of IITMs of
′
the form T M = M1|...|Mk|!M
j are ma-
chines and ! indicates that an unbounded number of fresh copies
of machines may be generated in a run of T M. A machine M1 can
′
be triggered by another machine M
1 receives a message on a
tape that connects them. Two systems Y and Z are called indistin-
guishable, i.e., Y ≡ Z, if the difference between the probability that
Y outputs 1 on a special tape and the probability that Z outputs 1
is negligible. There are three different types of systems in the IITM
model: i) real and ideal protocols/functionalities; ii) adversaries and
simulators; iii) and environments. The real and ideal protocols and
the environmental systems have input/output (I/O) and network
interfaces or tapes, while the adversarial systems have only net-
work tapes. We say that the environmental and adversarial systems
are responsive if they immediately respond to so-called restricting
messages on the network. Restricting messages are represented in
the form (Respond, id, m), where id and m are random bit strings.
They are used for enforcing a natural execution of a protocol by
preventing the adversary from disrupting or interfering with the
protocol execution. In general, restricting messages improves the
expressivity of universal composability models.
′
k, where Mi and M
1|...|!M
Kusters’s composition theorem of a fixed number of protocol
systems is one of the theorems provided by the IITM model. We
first recall the definition of simulation-based security in universal
composability before presenting the theorem.
Definition 1 (Strong simulatability) [21]. Let P and F be protocol
systems with similar I/O interface, i.e., the real and ideal protocol,
respectively. Then, P realizes F (P ≤ F) if there exists an adversarial
system S (an ideal adversary or a simulator) such that P and S|F
have similar external interfaces and for all environmental systems E,
441ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Sani, et al.
connecting to the external interface of P (and thus, S|F), it holds true
that E|P ≡ E|S|F.
Kusters’s composition theorem handles the concurrent composi-
tion of a fixed number of protocol systems is presented below.
Theorem 1 [21]. Let P1, ..., Py , F1, ..., Fy be protocol systems such
that P1, ..., Py and F1, ..., Fy only connect with each other via their I/O
interfaces and Pj ≤ Fj , for j ∈ {1, ..., y}. Then, P1|...|Py ≤ F1|...|Fy.
More complex systems can be constructed by combining other
composition theorems of the IITM model in [21, 22].
3 EXTENDED COMPOSITION THEOREM,
NOTION OF RELAY RESILIENCE, AND
THREAT MODEL
In this section, we extend the notions of simulation-based security,
state and provide proof of our extended composition theorem, and
provide a threat model.
3.1 Extended Notions of Simulation-Based
Security
We extend the definition of strong simulatability. To do this, we
equip the real and ideal protocols/functionalities with a sequence
of cryptographic operations such that an operation always depends
on the preceding one, i.e., the operation relies on the preceding
operation, to prevent bypass of cryptographic operations and sup-
port relay resilience. A sequence of operations c is of the form
c = {c1, c2, ..., cn−1, cn}, where c1, c2, cn−1, and cn are crypto-
graphic operations and c1 is the first operation of c and preceding
operation of c2 and cn is the last operation of c. In c, a cryptographic
operation, say ci, can be executed by using all outputs from ci−1 as
input. In this case, we say that (i) ci relies on ci−1, i.e., ci(ci−1) and
(ii) ci−1 is excecuted before ci. To ensure that ci−1 is executed first,
ci requires unique outputs from ci−1 execution. If the order of the
execution between ci−1 and ci is changed, ci cannot be successfully
executed as the inputs required for its execution are incomplete.
Definition 2 (Extended strong simulatability). Let P and F be
a real protocol and an ideal protocol, respectively, with the same I/O
interface. Let c be a sequence of cryptographic operations of P and
F. Then, P[c] ≤R F[c] iff every operation ci in c always rely on the
preceding operation ci−1, and there exists S such that the systems P[c]
and S|F[c] have the same external interface and for all environmental
systems E, connecting only to the external interface of P[c] and S|F[c],
it holds true that E|P[c] ≡ E|S|F[c], where the adversary in E|P[c] is
subsumed by E.
3.2 Extended Composition Theorem
Our extended composition theorem handles the concurrent com-
position of a fixed number of protocol systems with a sequence of
cryptographic operations that rely on one another.
Theorem 2. Let P1, P2, F1, F2 be protocol systems with a sequence c
of cryptographic operations c1, c2, and c3 such that P1 and P2 as well
as F1 and F2 only connect with each other via their I/O interfaces and
for every k, Pk[c] ≤R Fk[c], iff Pk[ci(ci−1)] ≤R Fk[ci(ci−1)], where
i ∈ {1, 2, 3}. Then, P1[c3(c2(c1))]|P2[c3(c2(c1))] ≤R F1[c3(c2(c1))]|
F2[c3(c2(c1))], for k ∈ 1, 2.
Proof Sketch: We prove the theorem for k = 2 and i = {1, 2, 3}.
Let S = S1|S2. Since P1[c] ≤R F1[c] and P2[c] ≤R F2[c], we
have E|P1[c3(c2(c1))] ≡ E|S1|F1[c3(c2(c1))], and E|P2[c3(c2(c1))] ≡
E|S2|F2[c3(c2(c1))]. Based on our definition of extended notions of
simulation-based security, we now obtain
E|P2[c3(c2(c1))]|P1[c3(c2(c1))] ≡
E|S2|F2[c3(c2(c1))]|S1|F1[c3(c2(c1))]
≡ E|S|F1[c3(c2(c1))]|F2[c3(c2(c1))]
(Definition of S)
3.3 Notion of Relay Resilience
Relay resilience is motivated by cryptographic protocols such as
Megamos Crypto that despite negotiating an output remain vul-
nerable to attacks. Although we expect the protocol negotiation
to be correct and hold unconditionally as its session is complete,
design and implementation errors may break it. For instance, PRF
does not offer resilience to relay attacks on Megamos Crypto but
still support the negotiation of an output. An implementation of
Megamos Crypto in which an initiator, say device IDA, accepts a
random number would also fail to mitigate relay attacks. Note that
the term “session” refers to communications between two users.
Relay security complements the correctness of a negotiation: A
protocol is relay secure when two users always negotiate a shared
secret session key based on their attributes and knowledge of the
computation time of cryptographic operations and a cryptographic
timestamp, which securely proves that a cryptographic proof was
computed at a specific time. Hence, relay security concerns con-
ditions in which one device can protect the other device, even if
the latter supports insecure usage of cryptography. However, we
have to assume that some of the mechanisms of the protocol, e.g.,
encryption and PRF, are strong. Our relay resilience definition is
parameterized by attributes of users, sequence of cryptographic
operations, and cryptographic timestamp from which we expect
relay protection.
Definition 3 (Relay resilience). Let s be a session between users
IDA and IDB with a set of attributes attA and attB, respectively. Let
c be a sequence of cryptographic operations in s using attA and attB
to establish a cryptographic timestamp ctimestamp. Then, s is relay
resilient iff s(ctimestamp) is valid for s(attA.attB .c).
A relay attack means that a session is weaker than the prescribed
one. Agreement on the users’ attributes and knowledge of the
cryptographic operations and cryptographic timestamps is essential
for relay protection. We have relay protection if the agreement
succeeds. Note that only sessions with two users, i.e., initiator and
responder, get relay protection guarantees. The users’ attributes
for relay protection play a role similar to mutual authentication,
while the knowledge of the computation time of cryptographic
operations and cryptographic timestamps play a key derivation
role. These show that relay protection should depend on inputs to
the negotiation and the negotiation itself.
3.4 Threat Model
In this paper, we use the Dolev-Yao attacker model [13] as our threat
model. In the Dolev-Yao attacker model, an adversary may be an
442Crypto-Chain: A Relay Resilience Framework for Smart Vehicles
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
outsider or a legitimate device. The adversary can eavesdrop, forge,
and relay messages. The adversary in the real world cannot guess
and calculate secret values, secret keys, and pointers to the secret
keys.
4 CRYPTO-CHAIN
In this section, we present our relay resilience framework, Crypto-
Chain, which consists of FCC and FMK D as mentioned in the intro-
duction. In Crypto-Chain, FCC is used for cryptographic operations
while FMK D is used for mutual authentication and key derivation
between two users in smart vehicles.
4.1 Ideal Crypto-chain Functionality for
Cryptographic Primitives
Our ideal crypto-chain functionality FCC supports cryptographic
primitives such as our DMA and KKE for enabling relay resilience
in smart vehicles. DMA is similar to authentication, except that it
provides dynamic multi-factor authentication, where authentica-
tion is performed on a per-session basis such that only the identity
of a user always remains the same and other features of the user
change. The existing ECDH key exchange is similar to KKE, except
that KKE provides a key exchange with authentication. In DMA,
every key derivation user in smart vehicles verifies the identity and
other attributes of its key derivation partner and then uses KKE
to generate authenticated preshared key before deriving a shared
secret session key. Note that the ECDH key exchange is used as
an underlying cryptographic primitive in FCC to support key ex-
change. A real-world protocol P can use FCC for its cryptographic
operations c. Then, we can show that P using FCC[c] realizes some
ideal key derivation functionality F, i.e., P|FCC[c] ≤R F. Once
P|FCC[c] ≤R F is proven using the extended composition theorem
(cf. Section 3), FCC can be replaced with its realization PCC (see
below), where all the ideal operations provided by FCC are replaced
by the corresponding real operations. On a high level, the main
guarantees provided by FCC are as follows: i) for dynamic mutual
multi-factor authentication, FCC guarantees that only honest users
can be authenticated and on a per-session basis; ii) for key exchange,
FCC guarantees that only honest and authenticated users can ex-
change preshared keys; and iii) for key derivation, FCC guarantees
that only honest and authenticated owners of a preshared key can
get access to the shared secret session keys derived from it.
Formally, FCC is a machine with n I/O tapes and a network
tape, where the I/O tapes represent different roles in a real-world
protocol while the network tape is used for communicating with the
adversary. In every run of a system that uses FCC for cryptographic
operations, only one instance of FCC will always be available to
handle all requests for relay resilience support. A user of FCC in
smart vehicles is identified by a tuple (ID, sid, l), where ID is the
user identity, sid is a session identifier, and l is the role/tape which
connects the user to FCC, ID, and sid, which is chosen and managed
by real-world protocols. (ID, sid) are used for prefixing all messages
on the I/O tapes so that every user that sent/receives a message
can be identified by FCC. We say that a message m is a restricting
message when the message (Respond, restricted, m) is sent on the
network to ensure that the adversary always responds to all requests
and cannot interfere with the run of FCC.
We parameterize FCC with an ECDH domain parameters
EDPGen(1η) algorithm and a timestamp function f that takes a
message m and outputs a timestamp f (m) = t. We require that
f is efficiently computable and provides a regular timestamp for
timing executions of cryptographic operations as well as sending,
receiving and transmitting messages. EDPGen(1η) is used to gener-
ate the ECDH domain parameters, where η is a security parameter.
The algorithm takes η as input and efficiently computes and re-
turns (p, a, b, G, n, h), where p is a prime modulus, a and b are curve
parameters, G is a general point, n is the order of G, and h is a
co-factor. Private keys and other secret keys derived from the pri-
vate keys in FCC are modelled in such a way that users do not
get the actual secret keys but rather get pointers to such keys to
provide extra protection to the keys. Note that before a message is
used with a pointer, the pointer is replaced by the key it refers to.
FCC maintains the actual values of all secret keys and the pointers
that point to these keys, ephemeral random values, cryptographic
proofs, and cryptographic timestamps in a database that is created
by a smart vehicle trusted entity (ST E). It also uses the database to
prevent any collision (i.e., if a new unknown private key is provided,
then it does not already exist in the database) or guessing (i.e., if
a new known private key is provided, then it already exists in the
database). We assume that FCC synchronizes its clock with that of
the ST E’s database using a clock discipline algorithm [29], which
corrects and updates clock time for timestamp accuracy. We note
that: (I) As the clock synchronization can be carried out prior to
a protocol activation, this makes it difficult for an attacker to by-
pass the clock synchronization component. (II) The clock discipline
algorithm is supported by Network Time Protocol (NTP), which
uses an authentication mechanism to prevent manipulations by the
attacker.
FCC executes EDPGen(1η) upon its first activation and store
the generated domain parameters (p, a, b, G, n, h). Furthermore,
we expect FCC to receive users’ identities (Users, IDs). When the
activation is complete, FCC either returns control to the adversary
if the first message/response was received on a network tape
or continues to process the original message that activated it
if the first message/response was received on the I/O tape. The
cryptographic commands that FCC provides to a key derivation
′) on
initiator (ID, sid, l) and a key derivation responder (ID
their respective I/O interfaces are as follows: (I) Generate a fresh
ephemeral random value (GetRV), which is provided to both
′) and returns (RV, r , t) to the user at the
(ID, sid, l) and (ID
end of its execution, where r is an ephemeral random value and t
is timestamp of computing r. (II) Generate a fresh ephemeral
private and compute its corresponding ephemeral public
key (CompEPuK, r , t), which is provided to both (ID, sid, l) and
′) and returns (EPuK, ptri , Q) to the user at the end of its
(ID
execution, where the pointer ptri points to an ephemeral private
key d and Q = d.G is the corresponding ephemeral public key of d.
′),
(III) Generate a fresh preshared key (GenPSK, ptri , r , Q, r
, Q
′) and returns
which is provided to both (ID, sid, l) and (ID
(PSKPointer, ptrii) to the user at the end of its execution, where
′),
the pointer ptrii points to a new preshared key k = Fη(H((d.Q
′
, r))) and k is computed using SHA-256 hash algorithm H(.) and
(r
, sid
, sid