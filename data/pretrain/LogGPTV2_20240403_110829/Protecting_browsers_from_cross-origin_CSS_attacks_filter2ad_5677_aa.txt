title:Protecting browsers from cross-origin CSS attacks
author:Lin-Shung Huang and
Zack Weinberg and
Chris Evans and
Collin Jackson
Protecting Browsers from Cross-Origin CSS Attacks
Lin-Shung Huang
Carnegie Mellon University
PI:EMAIL
Chris Evans
Google
PI:EMAIL
ABSTRACT
Cross-origin CSS attacks use style sheet import to steal
conﬁdential information from a victim website, hijacking a
user’s existing authenticated session; existing XSS defenses
are ineﬀective. We show how to conduct these attacks with
any browser, even if JavaScript is disabled, and propose
a client-side defense with little or no impact on the vast
majority of web sites. We have implemented and deployed
defenses in Firefox, Google Chrome, and Safari. Our defense
proposal has also been adopted by Opera.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms
Security
Keywords
CSS, Content Type, Same-Origin Policy
1.
INTRODUCTION
The World Wide Web was originally envisioned [5] as a
means to collate a wide variety of human-readable, static doc-
uments, present them via a uniﬁed interface, and facilitate
browsing through them by searching or via inter-document
references. It has grown into a versatile platform for all kinds
of computing tasks, progressively gaining support for data
entry, client-side scripting, and application-speciﬁc network
dialogues. Web-hosted applications have supplanted tradit-
ional desktop applications for almost everything that requires
network communication, and are becoming competitive in
other areas.
The same-origin policy [23] is the basic principle used to se-
cure Web applications from each other. An HTML document
can include many sorts of content—including images, scripts,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
Zack Weinberg
Carnegie Mellon University
PI:EMAIL
Collin Jackson
Carnegie Mellon University
PI:EMAIL
videos, and other documents—from any site. However, the
document’s scripts may not directly examine content loaded
from other sites. This policy applies even within what ap-
pears to the user to be one uniﬁed page; for instance, a script
can only inspect the content of a nested document if it came
from the same origin as the script itself. Cross-origin content
inclusion allows sites to share popular script libraries and
store large, rarely-changing content on servers dedicated to
that purpose, while preventing malicious sites from reading
content that should be visible only to the user.
Cascading style sheets (CSS) are another type of content
that a document may include; they deﬁne appearance, just
as HTML deﬁnes content and JavaScript deﬁnes behavior.
CSS is a relative late-comer to the Web; although the need
for a style sheet language was recognized as early as 1993,
the ﬁrst speciﬁcation of CSS dates to 1996, and the earliest
browser to implement enough of CSS to be generally useful
was Internet Explorer 6.0, in 2001. [20]
To allow future extensibility, the CSS speciﬁcation man-
dates error-tolerant parsing. Browsers skip over CSS direc-
tives they cannot interpret, while continuing to honor what
they do understand. [26] These rules allow web designers to
build sites that take advantage of the very latest CSS fea-
tures but “degrade gracefully”and remain usable with older
browsers. Unfortunately, error-tolerant parsing can ﬁnd valid
CSS constructs in an input stream that was not intended to
be CSS at all; for instance, in an HTML document.
This leads to a security hole, ﬁrst described (to our knowl-
edge) in 2002 [13] and rediscovered at least twice since then
[11, 22]. If a malicious site can inject chosen strings into a
target webpage (whose structure, but not speciﬁc contents,
are known) and then load that page as a style sheet, it can
extract information from the page by examining what the
CSS parser makes of this “sheet.” The attack works even if
the target page cannot be retrieved without presenting login
credentials, because the browser will present any credentials
(e.g. HTTP cookies) it has stored for the target server when
it does the load. To date, all published attacks of this type
have required JavaScript, and most have been speciﬁc to
Internet Explorer.
In this paper, we present a general form of this attack
that can be made to work in any browser that supports CSS,
even if JavaScript is disabled or unsupported. We do not
consider this vulnerability to be merely a bug in the CSS
speciﬁcation, but rather a general problem with allowing an
including page to override the content type of a cross-origin
resource: browsers should obtain independent conﬁrmation
that an included resource is appropriate in context before
619handling it. For CSS, we propose and implement stricter
content handling rules that completely block the attack, as
long as the targeted web site does not make certain errors
(discussed in Section 4.4). Our proposal has no negative side
eﬀects for most websites, and has been adopted by Firefox,
Google Chrome, Safari, and Opera.
Organization.
The rest of this paper is organized as follows. Section 2
presents a threat model for cross-origin CSS attacks. Sec-
tion 3 describes the attack in detail. Section 4 proposes and
evaluates defenses. Section 5 surveys related work. Section 6
concludes.
2. THREAT MODEL
The threat model for cross-origin CSS attacks is a web
attacker [16], a malicious principal who owns a domain name
and operates a web server. The web attacker’s goal is to
steal data from another web site (the target) that should
only be revealed to a particular user (the victim) and not to
the attacker.
Attacker Abilities.
The web attacker can send and receive arbitrary network
traﬃc, but only from its own servers. It cannot modify or
eavesdrop on the victim’s network traﬃc to other sites, nor
can it generate “spoofed” packets that purport to be from
some other site. The web attacker cannot install malicious
software on the victim’s computer; otherwise, it could replace
the browser and bypass any browser-based defenses.
Target Behavior.
The web attacker can inject strings into the target site,
even into pages that it cannot retrieve, but its injections
must pass server-side cross-site scripting (XSS) ﬁlters such as
HTML Puriﬁer [30]. We do not assume that arbitrary string
injection is required, since such targets would be vulnerable
to conventional XSS attacks already. Opportunities to inject
strings into the target are not unusual in practice: reﬂection
of URL parameters, intra-site messaging, or even non-web
channels [6].
Victim Behavior.
The web attacker can entice the victim into visiting its
site, for instance by sending bulk email to encourage visitors,
or by manipulating an advertisement network. We do not
assume that the victim discloses any sensitive information
while on the attacker’s site; merely rendering the attacker’s
web content is suﬃcient.
3. CROSS-ORIGIN CSS ATTACKS
In this section, we present cross-origin CSS attacks in
detail. First, we describe aspects of browser behavior that,
together, make these attacks possible. Second, we lay out
the steps of an attack on a hypothetical website. Third,
we discuss constraints on practical executions of the attack.
Finally, we demonstrate that the attack can be carried out
against several popular web applications.
3.1 Browser Behavior
Cross-origin CSS attacks are possible because of existing
browser behaviors, reasonable taken in isolation, but with
Session Authentication
unexpected interactions: session authentication, cross-origin
content inclusion, and error-tolerant style sheet parsing.
3.1.1
Web applications that handle sensitive data typically use
client-side state to manage a distinct “session” for each visitor.
The most common technique uses HTTP cookies [18, 2] to
deﬁne a session; HTTP authentication [10] is also viable, but
less popular since it gives the application less control over
user experience. Either way, once a user has logged into
a web application, their browser will transmit a credential
with every HTTP request to that server, allowing the server
to identify the session and reply with HTML documents
containing conﬁdential information intended only for that
user. A request for the same URL without the credential
produces an HTTP error, or a generic document with no
conﬁdential information.
3.1.2 Cross-Origin Content Inclusion
As discussed in Section 1, browsers permit web pages to
include resources (images, scripts, style sheets, etc.) from
any origin, not just from the server hosting the page itself.
Requests for cross-origin resources transmit any credentials
(cookies or HTTP authentication tokens) associated with the
site that hosts the resource, not credentials associated with
the site whose page made the reference. Thus, a conﬁdential
resource from one site can be included into a page that could
not read it directly. There it will be visible to the user, but
not to scripts running in the page.
3.1.3 Error-Tolerant Style Sheet Parsing
CSS syntax has much more in common with JavaScript
than with HTML. HTML uses angle brackets to delimit
tags that must nest; text outside tags is mostly unparsed.
CSS and JavaScript both use curly braces to enclose blocks;
inside or outside a block, the input text must follow a formal
grammar. However, CSS’s error handling is entirely diﬀerent
from JavaScript’s.
When browsers encounter syntax errors in CSS, they dis-
card the current syntactic construct, skip ahead until what
appears to be the beginning of the next one, then start pars-
ing again. The CSS speciﬁcation [26] deﬁnes precisely how
this must be done, so that browsers will behave predictably
when they see new CSS features they do not understand.
When skipping ahead, the browser uses only a few simple
grammar rules:
• Even while skipping, parentheses, square brackets, and
curly braces must be properly balanced and nested.
• Depending on where the syntax error occurred, the
next syntactic construct might begin after the next
semicolon, after going up one brace level, or after the
next brace-enclosed block.
• /* ... */ is a comment to be ignored, as in JavaScript.
However, unlike JavaScript, // does not indicate the
beginning of a single-line comment.
• Single- and double-quoted strings also work much as in
JavaScript; backslash escapes are a little diﬀerent, but
this doesn’t matter for our purposes. Internet Explorer
permits strings to extend past a line break, but in all
other browsers this is a syntax error.
620HTML document; secret
data is highlighted.
Attacker injects CSS leader
and trailer around secret.
CSS parser skips most of
the document, loads secret
as a valid style rule.
Figure 1: Example of a Cross-Origin CSS Attack
• The end of a style sheet closes all open constructs
without error.
The left angle bracket, , can appear within CSS selectors.)
Thus, a CSS parser encountering an HTML document will go
into skip-ahead mode on the very ﬁrst tag in the document,
and will probably stay there until the end of the ﬁle.
3.2 Attack Steps
In a cross-origin CSS attack, the attacker injects strings
into the target document that bracket the data to be stolen.
Then it entices the victim into visiting a malicious page
under its own control. The malicious page imports the
target document as if it were a style sheet, and can extract
conﬁdential information from the parsed style rules, even
without JavaScript. Figure 1 illustrates the anatomy of the
attack. (The text in Figure 1 has been word-wrapped for
readability; if line breaks were present in between the injected
blocks, the attack would be limited to Internet Explorer as
discussed in Section 3.3.3.)
3.2.1 CSS String Injection
One might expect that an HTML document, when parsed
as a style sheet, would produce nothing but syntax errors.
However, because of the predictable error recovery rules
described in Section 3.1.3, it is possible to inject strings into a
document that will cause the CSS parser to come out of error
recovery mode at a predictable point, consume some chunk
of the document as a valid rule, and then return to skipping.
The attacker has many options for injecting text into a web
page, even one it cannot see without authentication. Our
demonstration attacks in Section 3.4 use intra-site private
messages or junk email sent to the victim.
In the example in Figure 1, the attacker has arranged to
insert two strings into the document:
• {}#f{font-family:' before the secret
• ';} after the secret
The target site happens to have wrapped each of these in an
HTML , which does not hinder the attack in any way.
The opening string has three components: The attacker can
safely assume that the CSS parser is in error recovery mode,
looking for a brace-enclosed block, when it encounters the
two-character synchronization sequence {}. This sequence
will take the CSS parser out of error recovery, unless there is
something before the injection point that must be balanced—
an unclosed string or CSS comment, or an unmatched { [
or (.
If the attacker can predict what comes before the
injection point, it can tailor the synchronization sequence
to match. The next component, #f{font-family: is the
beginning of a valid CSS style rule, declaring the font family
for an element in the attacker’s document (with ID f). The
font-family property takes a string constant as its value;
thus the ﬁnal component is a single quote character, '. The
CSS parser will absorb whatever follows as a string, as long
as it contains neither line breaks nor another single quote.
The closing string simply ends the CSS string constant with
another quote mark, and then closes the style rule with