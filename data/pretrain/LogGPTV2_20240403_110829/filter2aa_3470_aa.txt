Mouse Jiggler Offense & Defense
Dr. Phil
@ppolstra
Why this talk?
● Mouse jigglers now standard for LEOs
● Full disk encryption is worthless if logged in
● Building your own jiggler can be fun
What is a mouse jiggler?
● Used to keep computer awake & unlocked
● Can be used as a prank
● Types
– Software
● Not what this talk is about
– Hardware
● The one to be worried about
Detecting a Mouse Jiggler
● Known VID/PID (0x0E90)/(0x0028 or 0x0045) 
● Behavior
● USB device class
Detection via known VID/PID
● Single manufacturer of jigglers used today
● Detection is:
– Quick
– Easy
– Definite
Introduction to udev rules
● Determine what happens when new devices 
attached
● Set of matching conditions
● Any scripts launched must be short
Udev rules for known VID/PID
Contents of /etc/udev/rules.d/10-jiggler.rules
ACTION=="add", ATTRS{idVendor}=="0e90", 
RUN+="/etc/udev/scripts/lockscreen.sh"
Don't forget to run sudo service udev restart!
Detection based on behavior
● Jigglers make periodic small mouse movements
– Prank version=machine unusable (short period)
– Forensic version has much longer period
● Periodic mouse commands can be detected
– No clicks, only movement (normally in 1 axis only)
– Normally a 2-button mouse
● Benign defenses should be applied immediately
– Takes a few minutes for this detection
Udev rules for behavior detection
Contents of /etc/udev/rules.d/10-jiggler2.rules
ACTION=="add", RUN+="/etc/udev/scripts/jiggler-
detect.sh ${BUSNUM} ${DEVNUM}&"
Don't forget to run sudo service udev restart!
Detection script for behavior
● Use usbhid-dump to dump HID reports
● Must be run with root privileges
● Relies on no-click behavior (among other 
things)
Jiggler-detect.sh
#!/bin/bash
# Mouse jiggler detector
# Usage: jigggler-detect.sh  
#
# Created by Dr. Phil Polstra for DEFCON 24
usage () {
   echo "Usage: $0  "
   echo "This script will attempt to detect a mouse"
   echo "jiggler based on behavior."
   exit 1
}
if [ $# -lt 2 ]; then
   usage
fi
# mouse jigglers are normally 2-button mice 
# w/3-byte reports
# use usbhid-dump to intercept reports and 
# check for 3 bytes
# and no mouse clicks in two minutes
# first check for the small report
deviceAddress=$(printf "%03d:%03d" $1 $2)
shortReport=$(timeout 1s usbhid-dump -a 
$deviceAddress -es \
             | egrep "^ 00 00 00$" )
Jiggler-detect.sh (contd)
if [ ! -z "$shortReport" ]; then
   echo "Found a possible mouse jiggler!"
   # collect reports for 2 minutes
   declare -a mouseReports;  declare -a notNullReports
   mouseReports=($(timeout 2m usbhid-dump -a $deviceAddress -es \
          | egrep -v "^$deviceAddress" | egrep -v "^Terminated"))
   # now check for clicks and small movement
   count=0; notNullCount=0
   while [ "x${mouseReports[count]}" != "x" ]
   do
      # if there was a single mouse click it is not a jiggler
      if [ "x${mouseReports[count]}" != "x00" ]; then
         echo "Not a jiggler after all" ; exit 0
      fi
      if [ "${mouseReports[count+1]}" != "00" ] || \
         [ "${mouseReports[count+2]}" != "00" ]; then
         notNullReports[notNullCount]="${mouseReports[count]}:"
         notNullReports[notNullCount]+="${mouseReports[count+1]}:"
         notNullReports[notNullCount]+="${mouseReports[count+2]}"
         echo ${notNullReports[notNullCount]}
         notNullCount=$(( $notNullCount + 1 ))
      fi
      count=$(( $count + 3 ))
   done
 echo "Found $notNullCount non-null mouse 
reports"
   # create a unique array
   declare -a uniqueReports
   uniqueReports=$(echo "${notNullReports[@]}" | \
               tr ' ' '\n' | sort -u | tr '\n' ' ')
   echo ${uniqueReports[@]}
   # if any of these are exactly the same this is a 
jiggler
   if [ ${#uniqueReports[@]} -ne $notNullCount ]; 
then
      echo "We have a jiggler!"
      exit 2
   fi
Jiggler-detect.sh (contd)
else
   # check for the fancier MJ-3 which has
   # a 5-button 3-axis mouse and not a lot of noise
   shortReport=$(timeout 1m \
                 usbhid-dump -a $deviceAddress -es \
                 | egrep "^ 00 ([0-9A-F]{2} ){2}[0-9A-F]{2}$" )
   if [ ! -z "$shortReport" ]; then
      echo "Found possible MJ-3"
      declare -a mouseReports
      # we need to collect reports a bit longer since 
      # this one is not as chatty
      mouseReports=($(timeout 4m \
              usbhid-dump -a $deviceAddress -es \
              | egrep -v "^$deviceAddress" | \
               egrep -v "^Terminated"))
      count=0
while [ "x${mouseReports[count]}" != "x" ]
      do
         # if there was a single mouse click it is not a jiggler
         if [ "x${mouseReports[count]}" != "x00" ]; then
            echo "Not a jiggler after all"
            exit 0
         fi
         count=$(( $count + 4 ))
      done
      # if we made it this far this is definitely a jiggler
      echo "Fancy mouse jiggler found"
   else
      echo "No mouse jigglers here"
      exit 0
   fi
fi
Detection based on device class
● Fires whenever possible jiggler inserted
● Should be benign
● Good idea even if other rules in place
Udev rules for USB class
Contents of /etc/udev/rules.d/10-jiggler3.rules
ACTION=="add", SUBSYSTEM==”hid", 
RUN+="/etc/udev/scripts/lockscreen.sh"
Don't forget to run sudo service udev restart!
Defensive scripts
● Choose level of paranoia
– Just lock screen
– Encrypt some files
– Start a secure wipe
– Physical destruction
Locking screen from a script
● Gnome
– Get session ID from /bin/loginctl list-sessions
– /bin/loginctl lock-session  
● KDE & LXDE
– /bin/su  -c “DISPLAY=:0 
/usr/bin/xscreensaver-command -activate” 
● Others: su  -c “DISPLAY=:0 
/etc/udev/scripts/lockscreen.sh
!/bin/bash
user='phil' # your user here
# for Gnome
sessionid=`/bin/loginctl list-sessions | grep ${user} | awk '{print $1}'`
/bin/loginctl lock-session ${sessionid}
# for KDE and LXDE
#/bin/su ${user} -c "DISPLAY=:0 xscreensaver-command -activate"
#other systems generally
#  /bin/su ${user} -c "DISPLAY=:0  -activate"
Encrypting sensitve files
● GPG 
● OpenSSL
● Bcrypt and ccrypt
● Random encryption keys
– Generating
– (somewhat) securely storing
GPG script
#!/bin/bash
usage () {
   echo "Usage: $0 "
   exit 1
}
if [ $# -lt 1 ]; then
   usage
fi
for filename in $1/* 
do
   # don't encrypt twice
   basefile=$(basename $filename)
   extension="${basefile##*.}"
   if [ "$extension" != "gpg" ]; then
      echo "password" | \
      gpg --passphrase-fd 0 --symmetric \
      $filename && rm -f $filename
   fi
done
OpenSSL script
#!/bin/bash
usage () {
   echo "Usage: $0 "
   exit 1
}
if [ $# -lt 1 ]; then
   usage
fi
for filename in $1/* 