### Mouse Jiggler Offense & Defense
**Dr. Phil Polstra**

#### Why This Talk?
- **Prevalence**: Mouse jigglers are now standard for Law Enforcement Officers (LEOs).
- **Security Concerns**: Full disk encryption is ineffective if the system is logged in.
- **DIY Fun**: Building your own mouse jiggler can be an engaging project.

#### What is a Mouse Jiggler?
- **Function**: Keeps a computer awake and unlocked.
- **Uses**:
  - Prank: Can make a machine unusable for a short period.
  - Forensic: Used to keep a system active for longer periods.
- **Types**:
  - **Software**: Not the focus of this talk.
  - **Hardware**: The primary concern.

#### Detecting a Mouse Jiggler
- **Known VID/PID**:
  - Vendor ID (VID): `0x0E90`
  - Product ID (PID): `0x0028` or `0x0045`
- **Behavior**:
  - Periodic small mouse movements.
  - No clicks, only movement (typically in one axis).
  - Usually a 2-button mouse.
- **USB Device Class**:
  - Detection based on known VID/PID is quick, easy, and definitive.

#### Introduction to udev Rules
- **Function**: Determine actions when new devices are attached.
- **Components**:
  - Matching conditions.
  - Short scripts that can be launched.

#### udev Rules for Known VID/PID
- **Configuration**:
  ```bash
  ACTION=="add", ATTRS{idVendor}=="0e90", RUN+="/etc/udev/scripts/lockscreen.sh"
  ```
- **Activation**:
  - Run `sudo service udev restart` to apply changes.

#### Detection Based on Behavior
- **Characteristics**:
  - Prank version: Makes the machine unusable for a short period.
  - Forensic version: Longer period of small movements.
  - Periodic mouse commands with no clicks.
- **Detection**:
  - Takes a few minutes to identify.
  - Benign defenses should be applied immediately.

#### udev Rules for Behavior Detection
- **Configuration**:
  ```bash
  ACTION=="add", RUN+="/etc/udev/scripts/jiggler-detect.sh ${BUSNUM} ${DEVNUM}&"
  ```
- **Activation**:
  - Run `sudo service udev restart` to apply changes.

#### Detection Script for Behavior
- **Tool**: `usbhid-dump` to dump HID reports.
- **Requirements**:
  - Root privileges.
  - Relies on no-click behavior and other factors.

##### Jiggler-detect.sh
```bash
#!/bin/bash
# Mouse jiggler detector
# Usage: jigggler-detect.sh <busnum> <devnum>
# Created by Dr. Phil Polstra for DEFCON 24

usage () {
   echo "Usage: $0 <busnum> <devnum>"
   echo "This script will attempt to detect a mouse jiggler based on behavior."
   exit 1
}

if [ $# -lt 2 ]; then
   usage
fi

deviceAddress=$(printf "%03d:%03d" $1 $2)
shortReport=$(timeout 1s usbhid-dump -a $deviceAddress -es | egrep "^ 00 00 00$")

if [ ! -z "$shortReport" ]; then
   echo "Found a possible mouse jiggler!"
   declare -a mouseReports; declare -a notNullReports
   mouseReports=($(timeout 2m usbhid-dump -a $deviceAddress -es | egrep -v "^$deviceAddress" | egrep -v "^Terminated"))
   count=0; notNullCount=0
   while [ "x${mouseReports[count]}" != "x" ]
   do
      if [ "x${mouseReports[count]}" != "x00" ]; then
         echo "Not a jiggler after all" ; exit 0
      fi
      if [ "${mouseReports[count+1]}" != "00" ] || [ "${mouseReports[count+2]}" != "00" ]; then
         notNullReports[notNullCount]="${mouseReports[count]}:${mouseReports[count+1]}:${mouseReports[count+2]}"
         echo ${notNullReports[notNullCount]}
         notNullCount=$(( $notNullCount + 1 ))
      fi
      count=$(( $count + 3 ))
   done
   echo "Found $notNullCount non-null mouse reports"
   uniqueReports=$(echo "${notNullReports[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
   if [ ${#uniqueReports[@]} -ne $notNullCount ]; then
      echo "We have a jiggler!"
      exit 2
   fi
else
   shortReport=$(timeout 1m usbhid-dump -a $deviceAddress -es | egrep "^ 00 ([0-9A-F]{2} ){2}[0-9A-F]{2}$")
   if [ ! -z "$shortReport" ]; then
      echo "Found possible MJ-3"
      declare -a mouseReports
      mouseReports=($(timeout 4m usbhid-dump -a $deviceAddress -es | egrep -v "^$deviceAddress" | egrep -v "^Terminated"))
      count=0
      while [ "x${mouseReports[count]}" != "x" ]
      do
         if [ "x${mouseReports[count]}" != "x00" ]; then
            echo "Not a jiggler after all" ; exit 0
         fi
         count=$(( $count + 4 ))
      done
      echo "Fancy mouse jiggler found"
   else
      echo "No mouse jigglers here"
      exit 0
   fi
fi
```

#### Detection Based on Device Class
- **Function**: Fires whenever a possible jiggler is inserted.
- **Configuration**:
  ```bash
  ACTION=="add", SUBSYSTEM=="hid", RUN+="/etc/udev/scripts/lockscreen.sh"
  ```
- **Activation**:
  - Run `sudo service udev restart` to apply changes.

#### Defensive Scripts
- **Paranoia Levels**:
  - Lock the screen.
  - Encrypt sensitive files.
  - Start a secure wipe.
  - Physical destruction.

##### Locking Screen from a Script
- **Gnome**:
  ```bash
  #!/bin/bash
  user='phil' # your user here
  sessionid=$(loginctl list-sessions | grep $user | awk '{print $1}')
  loginctl lock-session $sessionid
  ```
- **KDE & LXDE**:
  ```bash
  #!/bin/bash
  user='phil' # your user here
  su $user -c "DISPLAY=:0 xscreensaver-command -activate"
  ```
- **Other Systems**:
  ```bash
  #!/bin/bash
  user='phil' # your user here
  su $user -c "DISPLAY=:0 /etc/udev/scripts/lockscreen.sh"
  ```

#### Encrypting Sensitive Files
- **Tools**:
  - GPG
  - OpenSSL
  - Bcrypt and ccrypt
- **Random Encryption Keys**:
  - Generating and securely storing keys.

##### GPG Script
```bash
#!/bin/bash
usage () {
   echo "Usage: $0 <directory>"
   exit 1
}
if [ $# -lt 1 ]; then
   usage
fi

for filename in $1/*
do
   basefile=$(basename $filename)
   extension="${basefile##*.}"
   if [ "$extension" != "gpg" ]; then
      echo "password" | gpg --passphrase-fd 0 --symmetric $filename && rm -f $filename
   fi
done
```

##### OpenSSL Script
```bash
#!/bin/bash
usage () {
   echo "Usage: $0 <directory>"
   exit 1
}
if [ $# -lt 1 ]; then
   usage
fi

for filename in $1/*
do
   basefile=$(basename $filename)
   extension="${basefile##*.}"
   if [ "$extension" != "enc" ]; then
      openssl enc -aes-256-cbc -in $filename -out $filename.enc -pass pass:password && rm -f $filename
   fi
done
```

This revised text is more structured, clear, and professional, making it easier to follow and understand.