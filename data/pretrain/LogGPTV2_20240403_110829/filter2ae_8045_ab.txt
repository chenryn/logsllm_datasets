"竟然成功免杀了？"，变量$b带着痴呆的表情说到。  
之后我们再次使用D盾进行查杀————成功免杀：  
之后再次使用安全狗查杀————成功免杀  
至此，成功免杀D盾、安全狗、护卫神，那么来看看可用性：  
#### 数组交集
在做免杀研究是，发现我们可以通过数组的交集来获得我们想要的值，之后将其利用到木马程序的构造当中，例如：  
至于设计原理上面的注释中想必已经说得很是详细了，这里就不再一一复述了，下面我们使用D盾进行查杀看看——免杀  
之后使用安全狗查杀看看————成功免杀  
之后使用护卫神查杀看看————成功免杀  
至此，D盾、安全狗、护卫神成功免杀，下面试试可用性：  
#### 回调函数
array_map() 回调函数会返回用户自定义函数作用后的数组。array_map() 函数具体使用方法和参数说明如下：  
在这里我们可以先定义一个函数test，其中第一个参数$a用作回调函数名称，第二个参数$b用作回调函数的参数，之后将其传递给array_map()函数进行执行，之后我们在外部调用test函数，同时传入我们的回调函数名称和回调函数的参数：  
之后使用D盾进行查杀————成功免杀  
之后使用安全狗查杀————成功免杀  
之后使用护卫神查杀————成功免杀  
至此，成功免杀D盾、安全狗、护卫神，之后我们使用菜刀连接试试看是否可以正常使用：  
### 免杀实战—大马免杀
#### 加密&混淆
在免杀处理的众多方法中，加密免杀算是一种常用的技巧，常见的加密方式有rot13、base64加解密，下面我们使用base64来进行免杀研究，首先我们需要一个shell.php的PHP大马：  
之后我们需要使用encode.php对上面的大马程序进行一次base64加密处理，encode.php代码如下：  
之后我们在浏览器中访问encode.php即可实现对shell.php大马程序的加密处理：  
PS:因为木马程序源代码中含有很多敏感的操作，而且有很多容易被查杀到的关键词，所以后续的免杀都是在加密处理的基础上进行的分析与研究  
之后我们使用D盾先来一波查杀看看：  
从上面的查杀结果可以看到这里威胁级别为"5"，而且报"加密后门"的警告，这里应该是D盾检测到了关键字"base64_decode"，所以我们这里需要做一个简单的混淆处理：  
通过以上处理之后发现处理后的木马程序躲避了D盾的查杀，但是被安全狗检测到了：  
经过分析发现被查杀的原因是eval函数执行了一个解密后的内容，为了躲避查杀，这里可以通过将解密后的内容赋值给一个变量，之后通过使用反引号拼接变量然后再让eval去执行的方式躲避查杀，具体实现如下所示：  
可以发现成功免杀，之后我们再使用D盾进行一次查杀操作，发现依旧成功免杀（毕竟大马程序的复杂度增加了）：  
之后我们再使用护卫神进行一次查杀：  
至此该木马成功免杀D盾、安全狗、护卫神，同时我们需要检测一下免杀之后的可用性：  
可以正常使用：  
#### Create_function免杀
在免杀的过程中，发现了一个PHP的内置函数Create_function，它主要用于创建一个函数，这里可以使用它来进行免杀，但是由于D盾、安全狗有关键词查杀所以这里需要对Create_function进行一个拆分处理，同时需要加入混淆处理，最后木马程序重构结果如下所示：  
之后使用D盾进行查杀————成功免杀！  
之后使用安全狗查杀————成功免杀  
之后使用护卫神进行查杀————成功免杀  
至此，安全狗、护卫神、D盾成功免杀，之后我们试试可用性：  
可以正常使用~  
#### 可变变量
可变变量是PHP中一种较为独特的变量，它可以动态的改变一个变量的名称，这种特性可以用于木马免杀中。首先可以定义一个变量$do并为其赋值为todo,之后将加密处理过后的木马内容赋值给可变变量$$do,最后在调用eval函数执行时将执行对象定义为$todo即可，具体实现如下所示：  
之后使用D盾进行查杀————成功免杀  
之后使用安全狗查杀————成功免杀  
之后使用护卫神查杀————成功免杀  
至此，成功免杀D盾、安全狗、护卫神，之后我们试试可用性：  
### 总结
免杀与查杀在一次又一次的攻防较量中不断的进步，而我们在使用现有的webshell时也需要留意该webshell的可信程度，有些webshell留有后门，至少笔者分析的N多个大马时发现加密的木马文件几乎都有相关的后门。所以在免杀研究时还是自我设计木马程序为好，一些大马文件的功能不外乎由编程语言的功能函数来实现外加各种加密解密、编码/解码方法等。当然，随着木马查杀库的更新我们也需要研究更多的木马查杀方法与木马查杀机制的缺陷，促进攻防两端的进步。