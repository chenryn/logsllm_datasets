      __extension__ unsigned long long int rsp;
      __extension__ unsigned long long int ss;
      __extension__ unsigned long long int fs_base;
      __extension__ unsigned long long int gs_base;
      __extension__ unsigned long long int ds;
      __extension__ unsigned long long int es;
      __extension__ unsigned long long int fs;
      __extension__ unsigned long long int gs;
    };
配合ptrace可以直接按照以上结构体读写寄存器，所以一次读写至少是所有通用寄存器。根据结构体排序定义了如下数据结构体来记录寄存器信息：
    /*utils.h*/
    enum reg{
        en_rax, en_rbx, en_rcx, en_rdx,
        en_rdi, en_rsi, en_rbp, en_rsp,
        en_r8,  en_r9,  en_r10, en_r11,
        en_r12, en_r13, en_r14, en_r15,
        en_rip, en_rflags,    en_cs,
        en_orig_rax, en_fs_base,
        en_gs_base,
        en_fs, en_gs, en_ss, en_ds, en_es
    };
    struct reg_descriptor {
        enum reg r;
        char *name;
    };
    /*utils.c*/
    const size_t n_regs = 27;
    const struct reg_descriptor g_register_descriptors[] = {
        { en_r15, "r15" },
        { en_r14, "r14" },
        { en_r13, "r13" },
        { en_r12, "r12" },
        { en_rbp, "rbp" },
        { en_rbx, "rbx" },
        { en_r11, "r11" },
        { en_r10, "r10" },
        { en_r9, "r9" },
        { en_r8, "r8" },
        { en_rax, "rax" },
        { en_rcx, "rcx" },
        { en_rdx, "rdx" },
        { en_rsi, "rsi" },
        { en_rdi, "rdi" },
        { en_orig_rax, "orig_rax" },
        { en_rip, "rip" },
        { en_cs, "cs" },
        { en_rflags, "eflags" },
        { en_rsp, "rsp" },
        { en_ss, "ss" },
        { en_fs_base, "fs_base" },
        { en_gs_base, "gs_base" },
        { en_ds, "ds" },
        { en_es, "es" },
        { en_fs, "fs" },
        { en_gs, "gs" }
    };
因为只能一次读写所有寄存器，因此要读写某个寄存器时先用ptrace把所有的读取出来在通过寄存器表查找 **g_register_descriptors**
，并且因为寄存器表和`struct user_regs_struct`结构体排序一致可以直接用表中的偏移读写结构体：
    void set_register_value(pid_t pid, enum reg r, uint64_t value){
        struct user_regs_struct regs;
        int reg_descriptor_idx;
        ptrace(PTRACE_GETREGS, pid, NULL, &regs);
        /*locate reg_r`s index in user_regs_struct struct*/
        reg_descriptor_idx = -1;
        for(int i = 0; i r*/
    }
#### 读写内存
读写内存和寄存器很类似，但使用ptrace一次性只能读写8字节(64位)：`ptrace(PTRACE_PEEKDATA, dbg->d_pid,
address, NULL)`需要提供子进程的虚拟内存地址(address)
    uint64_t dbg_read_memory(Debugger *dbg, uint64_t address){
        return ptrace(PTRACE_PEEKDATA, dbg->d_pid, address, NULL);
    }
    void dbg_write_memory(Debugger *dbg, uint64_t address, uint64_t value){
        ptrace(PTRACE_POKEDATA, dbg->d_pid, address, value);
    }
### 断点
断点其实有两种：硬断点和软断点。其中硬断点涉及到CPU架构数量有限比如x86结构提供4个硬件断点(断点寄存器)，但可以检测读写执行三种情况。而软断点通过在指定位置插入
**断点指令**
，然后程序运行到此处执行断点指令让debugger获取`SIGTRAP`信号并停止运行，因此软断点可以有无数个；这里主要实现软断点，如x86的断点指令为`int
3`(机器码 0xcc)，需要考虑断点插入，断点记录，触发断点后如何继续运行等
使用如下结构体存储断点信息：
    /**
     * breakpoints utils
    */
    typedef struct Breakpoint{
        int b_pid;
        unsigned long b_addr;           //map key
        int b_enabled;
        unsigned char b_saved_data;     //需要保存插入0xcc位置的数据
        UT_hash_handle hh;
    }Breakpoint;
借助[uthash](\[troydhanson/uthash: C macros for hash tables and more
\(github.com\)\]\(https://github.com/troydhanson/uthash\))开源项目实现一个hash表来记录断点信息，只需在结构体中包含
**UT_hash_handle** 成员即可；其提供宏HASH_FIND_PTR：
    #define HASH_FIND_PTR(head,findptr,out) HASH_FIND(hh,head,findptr,sizeof(void *),out)
可以通过结构体中的 **b_addr** 作为key，其表头在初始化`Debugger`结构体时设置为NULL即可：
    Debugger dbg;
    dbg.d_brks = NULL;       /* important! initialize to NULL related to breakpoints` map*/
然后实现两个断点函数：brk_enable，brk_disable；分别进行插入断点和去除断点：
    #include "utils.h"
    void brk_enable(Breakpoint *bp){
        unsigned long data = ptrace(PTRACE_PEEKDATA, bp->b_pid, bp->b_addr, 0);
        bp->b_saved_data = data & 0xff;     //save LSB
        data = ((data & ~0xff) | INT3);
        ptrace(PTRACE_POKEDATA, bp->b_pid, bp->b_addr, data);
        bp->b_enabled = 1;
    }
    void brk_disable(Breakpoint *bp){
        unsigned long data = ptrace(PTRACE_PEEKDATA, bp->b_pid, bp->b_addr, 0);
        data = ((data & ~0xff) | bp->b_saved_data);
        ptrace(PTRACE_POKEDATA, bp->b_pid, bp->b_addr, data);
        bp->b_enabled = 0;
    }
### 单步
单步运行时除了普通指令，需要考虑是否跳过函数调用( **call** )也就是需要 **步过**
的情况，还有如果当前为断点处单步时需要格外的断点处理。基于`ptrace(PTRACE_SINGLESTEP,
...)`单步步入时需要考虑两种情况，涉及断点；其他非断点情况直接`PTRACE_SINGLESTEP`单步运行即可
  * pc刚好触发一个断点，即执行了`0xcc`
  * pc即将触发一个断点
使用如下函数处理单步命令：
    /*we can show UI here*/
    void dbg_step_in(Debugger *dbg){
        uint64_t possible_pc = get_pc(dbg) - 1;    /*if this is breakpoint int 3 executed*/
        Breakpoint *bp = NULL;
        HASH_FIND_PTR(dbg->d_brks, &possible_pc, bp);
        if(bp != NULL && bp->b_enabled){
            /*step over breakpoint*/
            brk_disable(bp);
            set_pc(dbg, possible_pc);
            ptrace(PTRACE_SINGLESTEP, dbg->d_pid, NULL, NULL);
            wait_for_signal(dbg);
            brk_enable(bp);
        }else{
            ptrace(PTRACE_SINGLESTEP, dbg->d_pid, NULL, NULL);
            wait_for_signal(dbg);
        }
        show_UI(dbg);
    }
但是后来发现一个bug：当断点设置在一个单机器码的指令处时(如 push rbp
0x55)，以上逻辑会陷入死循环，因为每次单步时都会检测`pc-1`是否为断点；所以得想办法面对单机器码断点的情况避免该逻辑，不可能把所有单机器码指令全列出来然后比对，所以这里使用反编译引擎
**capstone**
。如果pc-1是个断点那么先判断pc-1处的指令长度是否为1，如果是那么设置一个静态flag表示已经步过一个单机器码的断点下一次单步时不再考虑pc-1：
    /**
     * This function invoked in situation:
     * 1.PTRACE_SINGLESTEP the current instruction which maybe inserted a breakpoint OR maybe not
     * 2.already triggered a breakpoint(0xcc) PTRACE_SINGLESTEP the broken instruction
     * we can show UI here
    */
    void dbg_step_in(Debugger *dbg){
        static bool one_machine_code_flag = false;
        uint64_t possible_pc, data;
        Breakpoint *bp = NULL;
        csh handle = 0;
        cs_insn* insn;
        size_t count;
        int child_status;
        if(!one_machine_code_flag){
            possible_pc = get_pc(dbg) - 1;          /*if this is breakpoint int 3 executed*/
            HASH_FIND_PTR(dbg->d_brks, &possible_pc, bp);
            if(bp != NULL && bp->b_enabled){
                brk_disable(bp);
                /*check for single machine code instruction*/
                data = ptrace(PTRACE_PEEKDATA, dbg->d_pid, possible_pc, NULL);  
                if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
                    printf("[error]: Failed to initialize capstone engine!\n");
                    exit(-1);
                }
                cs_disasm(handle, (unsigned char*)&data, 8, 0x1000, 1, &insn);
                if(insn->size == 1){
                    one_machine_code_flag = true;
                }else{
                    one_machine_code_flag = false;
                }
                set_pc(dbg, possible_pc);
                ptrace(PTRACE_SINGLESTEP, dbg->d_pid, NULL, NULL);
                wait_for_signal(dbg);
                brk_enable(bp);
            }else{
                /*if we are here then this`s caused by PTRACE_SINGLESTEP and maybe we going to trigger a breakpoint or maybe not*/
                possible_pc += 1;
                one_machine_code_flag = false;
                HASH_FIND_PTR(dbg->d_brks, &possible_pc, bp);
                if(bp != NULL && bp->b_enabled){
                    brk_disable(bp);
                    ptrace(PTRACE_SINGLESTEP, dbg->d_pid, NULL, NULL);
                    wait_for_signal(dbg);
                    brk_enable(bp);
                }else{
                    ptrace(PTRACE_SINGLESTEP, dbg->d_pid, NULL, NULL);
                    wait_for_signal(dbg);
                }   
            }
        }else{
            /*the previous instruction is a single machine code instruction and breakpoint*/
            possible_pc = get_pc(dbg);      /*check current pc*/
            one_machine_code_flag = false;
            HASH_FIND_PTR(dbg->d_brks, &possible_pc, bp);
            if(bp != NULL && bp->b_enabled){
                brk_disable(bp);
                ptrace(PTRACE_SINGLESTEP, dbg->d_pid, NULL, NULL);