 public | test_pg_part_orig_1  | table | postgres | 35 MB      | 
 public | test_pg_part_orig_10 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_11 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_12 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_13 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_14 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_15 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_16 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_17 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_18 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_19 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_2  | table | postgres | 35 MB      | 
 public | test_pg_part_orig_20 | table | postgres | 35 MB      | 
 public | test_pg_part_orig_3  | table | postgres | 35 MB      | 
 public | test_pg_part_orig_4  | table | postgres | 35 MB      | 
 public | test_pg_part_orig_5  | table | postgres | 35 MB      | 
 public | test_pg_part_orig_6  | table | postgres | 35 MB      | 
 public | test_pg_part_orig_7  | table | postgres | 35 MB      | 
 public | test_pg_part_orig_8  | table | postgres | 35 MB      | 
 public | test_pg_part_orig_9  | table | postgres | 35 MB      | 
(21 rows)
postgres=# select count(*) from test_pg_part_orig;
  count   
----------
 20000000
(1 row)
Time: 1907.163 ms
只需要输入分区键值即可选择正确的分区表
```
pg_pathman分区表  
```
postgres=# insert into test_hash_pathman select generate_series(1,20000000);
INSERT 0 20000000
Time: 64193.880 ms
postgres=# select count(*) from test_hash_pathman;
  count   
----------
 20000000
(1 row)
Time: 1913.448 ms
```
2\. 查询  
传统分区表  
```
$ vi test1.sql
\set id random(1,20000000)
select * from test_pg_part_orig where id=:id and mod(id,20)=mod(:id,20); 
$ pgbench -M prepared -n -r -P 1 -f ./test1.sql -c 64 -j 64 -T 120
tps = 72817.370007 (including connections establishing)
tps = 72820.055756 (excluding connections establishing)
```
pg_pathman分区表  
```
$ vi test2.sql
\set id random(1,20000000)
select * from test_hash_pathman where id=:id;
$ pgbench -M simple -n -r -P 1 -f ./test2.sql -c 64 -j 64 -T 120
tps = 436483.383155 (including connections establishing)
tps = 436500.556155 (excluding connections establishing)
目前pg_pathman使用prepared statement会导致大量的LWLOCK，需要优化，所以这里先使用了simple query  
已提issue
```
3\. 更新  
传统分区表  
```
$ vi test1.sql
\set id random(1,20000000)
update test_pg_part_orig set info='test' where id=:id and mod(id,20)=mod(:id,20);
$ pgbench -M prepared -n -r -P 1 -f ./test1.sql -c 64 -j 64 -T 120
tps = 54515.549230 (including connections establishing)
tps = 54517.624457 (excluding connections establishing)
```
pg_pathman分区表  
```
$ vi test2.sql
\set id random(1,20000000)
update test_pg_part_pathman set info='test' where id=:id;
$ pgbench -M simple -n -r -P 1 -f ./test2.sql -c 64 -j 64 -T 120
tps = 223477.184306 (including connections establishing)
tps = 223484.907151 (excluding connections establishing)
```
性能测试数据对比如图  
![pic3](20161024_01_pic_003.png)    
### 4. pg_pathman哈希分区表，对子查询的功效
对于哈希分区，pg_pathman支持对子查询的分区过滤。  
例子  
```
/* create table we're going to partition */
CREATE TABLE partitioned_table(id INT NOT NULL, payload REAL);
/* insert some data */
INSERT INTO partitioned_table
SELECT generate_series(1, 1000), random();
/* perform partitioning */
SELECT create_hash_partitions('partitioned_table', 'id', 100);
/* create ordinary table */
CREATE TABLE some_table AS SELECT generate_series(1, 100) AS VAL;
select set_enable_parent('partitioned_table', false);
```
RuntimeAppend节点介入，只扫描需要扫描的分区  
```
postgres=# EXPLAIN (COSTS OFF, ANALYZE) SELECT * FROM partitioned_table
WHERE id = (SELECT * FROM some_table LIMIT 1);
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Custom Scan (RuntimeAppend) (actual time=0.051..0.053 rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual time=0.017..0.017 rows=1 loops=1)
           ->  Seq Scan on some_table (actual time=0.015..0.015 rows=1 loops=1)
   ->  Seq Scan on partitioned_table_70 (actual time=0.013..0.014 rows=1 loops=1)
         Filter: (id = $0)
         Rows Removed by Filter: 9
 Planning time: 5.336 ms
 Execution time: 0.128 ms
(9 rows)
postgres=# EXPLAIN (COSTS OFF, ANALYZE) SELECT * FROM partitioned_table
WHERE id = any (SELECT * FROM some_table limit 10);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Nested Loop (actual time=0.053..0.199 rows=10 loops=1)
   ->  HashAggregate (actual time=0.024..0.028 rows=10 loops=1)
         Group Key: some_table.val
         ->  Limit (actual time=0.012..0.014 rows=10 loops=1)
               ->  Seq Scan on some_table (actual time=0.010..0.011 rows=10 loops=1)
   ->  Custom Scan (RuntimeAppend) (actual time=0.007..0.010 rows=1 loops=10)
         ->  Seq Scan on partitioned_table_88 (actual time=0.006..0.009 rows=16 loops=2)
         ->  Seq Scan on partitioned_table_72 (actual time=0.008..0.010 rows=13 loops=1)
         ->  Seq Scan on partitioned_table_70 (actual time=0.002..0.003 rows=10 loops=1)
         ->  Seq Scan on partitioned_table_26 (actual time=0.006..0.007 rows=9 loops=1)
         ->  Seq Scan on partitioned_table_27 (actual time=0.007..0.009 rows=20 loops=1)
         ->  Seq Scan on partitioned_table_83 (actual time=0.008..0.010 rows=9 loops=1)
         ->  Seq Scan on partitioned_table_63 (actual time=0.005..0.006 rows=9 loops=1)
         ->  Seq Scan on partitioned_table_34 (actual time=0.006..0.006 rows=9 loops=1)
         ->  Seq Scan on partitioned_table_23 (actual time=0.005..0.006 rows=9 loops=1)
 Planning time: 1.068 ms
 Execution time: 0.264 ms
(17 rows)
```
## 六、sharding based on pg_pathman
未完待续  
## 小结
1\. 如果在建初始分区时，需要设置分区表的表空间，可以设置会话或事务的参数  
```
set local default_tablespace='tbs1';
```
2\. disable_pathman_for函数没有可逆操作，请慎用。  
3\. 不建议关闭pg_pathman.enable  
4\. 不建议开启自动扩展范围分区，一个错误的分区值可能导致创建很多分区。  
5\. 推荐使用set_enable_parent禁用主表。  
6\. 由于pg_pathman使用了custom scan接口，所以只支持9.5以及以上版本。  
7\. 传统哈希分区需要输入分区键值的约束条件，才能正确选择分区。pg_pathman只要输入键值即可。  
8\. 目前使用prepared statement会造成性能下降，跟踪到与LWLOCK有关，并不是不支持过滤分区造成的，已发ISSUE，将来可能会解决。  
when use simple query:  
```
	    50236.00  5.2% AllocSetAlloc                 /home/digoal/pgsql9.6/bin/postgres    
            38826.00  4.0% SearchCatCache                /home/digoal/pgsql9.6/bin/postgres    
            24134.00  2.5% hash_search_with_hash_value   /home/digoal/pgsql9.6/bin/postgres    
            22720.00  2.3% base_yyparse                  /home/digoal/pgsql9.6/bin/postgres    
            13425.00  1.4% palloc                        /home/digoal/pgsql9.6/bin/postgres    
            12965.00  1.3% expression_tree_walker        /home/digoal/pgsql9.6/bin/postgres    
            11487.00  1.2% _bt_compare                   /home/digoal/pgsql9.6/bin/postgres    
            11087.00  1.1% MemoryContextAllocZeroAligned /home/digoal/pgsql9.6/bin/postgres    
            10703.00  1.1% GetSnapshotData               /home/digoal/pgsql9.6/bin/postgres    
             9870.00  1.0% _int_malloc                   /lib64/libc-2.12.so                     
             9842.00  1.0% LWLockAcquire                 /home/digoal/pgsql9.6/bin/postgres
```
when use prepared query:    
```
            26913.00  6.4% hash_search_with_hash_value /home/digoal/pgsql9.6/bin/postgres
            21941.00  5.2% _spin_lock                  [kernel.kallsyms]                   
            12531.00  3.0% LWLockAcquire               /home/digoal/pgsql9.6/bin/postgres
             8658.00  2.0% schedule                    [kernel.kallsyms]                   
             8232.00  1.9% LWLockRelease               /home/digoal/pgsql9.6/bin/postgres
             8072.00  1.9% AllocSetAlloc               /home/digoal/pgsql9.6/bin/postgres
             7650.00  1.8% LockReleaseAll              /home/digoal/pgsql9.6/bin/postgres
             7222.00  1.7% SearchCatCache              /home/digoal/pgsql9.6/bin/postgres
             6795.00  1.6% reschedule_interrupt        [kernel.kallsyms]                   
             5482.00  1.3% LWLockWaitListLock          /home/digoal/pgsql9.6/bin/postgres
             5413.00  1.3% _bt_compare                 /home/digoal/pgsql9.6/bin/postgres
             5085.00  1.2% GetSnapshotData             /home/digoal/pgsql9.6/bin/postgres
             4519.00  1.1% LockAcquireExtended         /home/digoal/pgsql9.6/bin/postgres
             4509.00  1.1% try_atomic_semop            [kernel.kallsyms]                   
             4420.00  1.0% tick_nohz_stop_sched_tick   [kernel.kallsyms]                   
             4222.00  1.0% ktime_get                   [kernel.kallsyms]
```
explain 不能显示是否过滤分区，使用explain analyze    
```
postgres=# prepare p1 (int) as select * from test_hash_pathman where id=$1;
PREPARE
postgres=# explain execute p1(1);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Append  (cost=0.42..2.44 rows=1 width=44)
   ->  Index Scan using test_hash_pathman_10_pkey on test_hash_pathman_10  (cost=0.42..2.44 rows=1 width=44)
         Index Cond: (id = 1)
(3 rows)
第六次
postgres=# explain execute p1(1);
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (RuntimeAppend)  (cost=0.42..2.44 rows=1 width=44)
   ->  Index Scan using test_hash_pathman_0_pkey on test_hash_pathman_0 test_hash_pathman  (cost=0.42..2.44 rows=1 width=44)
         Index Cond: (id = $1)
   ->  Index Scan using test_hash_pathman_1_pkey on test_hash_pathman_1 test_hash_pathman  (cost=0.42..2.44 rows=1 width=44)
         Index Cond: (id = $1)
   ->  Index Scan using test_hash_pathman_2_pkey on test_hash_pathman_2 test_hash_pathman  (cost=0.42..2.44 rows=1 width=44)
         Index Cond: (id = $1)
.....
   ->  Index Scan using test_hash_pathman_18_pkey on test_hash_pathman_18 test_hash_pathman  (cost=0.42..2.44 rows=1 width=44)
         Index Cond: (id = $1)
   ->  Index Scan using test_hash_pathman_19_pkey on test_hash_pathman_19 test_hash_pathman  (cost=0.42..2.44 rows=1 width=44)
         Index Cond: (id = $1)
(41 rows)
但是实际上选择了分区，使用explain analyze可察觉  
postgres=# explain analyze execute p1(1);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (RuntimeAppend)  (cost=0.42..2.44 rows=1 width=44) (actual time=0.061..0.062 rows=1 loops=1)
   ->  Index Scan using test_hash_pathman_10_pkey on test_hash_pathman_10  (cost=0.42..2.44 rows=1 width=44) (actual time=0.034..0.034 rows=1 loops=1)
         Index Cond: (id = $1)
 Execution time: 0.077 ms
(4 rows)
```
## 参考
1\. http://akorotkov.github.io/blog/2016/06/15/pg_pathman-runtime-append/  
2\. https://wiki.postgresql.org/wiki/CustomScanAPI  
3\. https://github.com/postgrespro/pg_pathman  
4\. https://www.postgresql.org/docs/9.6/static/postgres-fdw.html  
5\. \sf 查看管理函数的内容  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")