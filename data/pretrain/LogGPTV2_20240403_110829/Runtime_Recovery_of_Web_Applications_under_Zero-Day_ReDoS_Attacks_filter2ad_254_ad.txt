Node.js [23], a popular web framework used by many web ser-
vices. HAProxy has a customizable module for HTTP request
handling that allows developers to add custom functionalities.
We customize this module to copy each web request, as well
as the corresponding server IP that handles the request, to
the detection module of REGEXNET. The detection module
is implemented in Python. It buffers web requests received
from HAProxy in a queue, and performs classiﬁcation on
each request. It uses PyTorch [26] to run the DNN model for
classiﬁcation, and the model is periodically updated by the
training module. When a request is classiﬁed as malicious,
it signals the migrator module, which stops the request on
the corresponding web server, and migrates the request to
a sandbox. The collector is implemented in C++. It tracks
the response time of each web request and reports them to
the training module. The training module is implemented in
Python based on PyTorch. It trains the DNN model based on
the collected data.
The conﬁguration of the DNN model is as follows. The
model takes a web request as input, which is represented as
a sequence of characters. The embedding layer maps each
character to a 32-dimension vector. The conv1d layer maps
32 channels from the embedding layer to 16 channels, with
kernel size 64 and stride 32. The conv1d layer is followed by
a tanh activation layer, and then the output is fed into a 3-level
SPP layer. The SPP layer pools the feature maps with varied
sizes to a ﬁxed size. Finally, the last output of the SPP layer
is reduced to two dimensions by a fully-connected layer, and
a log softmax layer is applied to generate the label.
V. EVALUATION METHODOLOGIES
In this section, we describe our evaluation methodologies.
A. Experimental Setup and Evaluation Metrics
Setup. The experiments are conducted on AWS. The baseline
setup runs a web service on an AWS c5n.4xlarge instance,
which is equipped with 16 vCPUs (3.0 GHz Intel Xeon
Platinum processor) and 43 GB memory. We use Express-
Cart [27], a popular open-source e-commerce web application
built with Node.js, to run the web service. We insert vulnerable
modules into ExpressCart so that it can be attacked. We use
HAProxy [22] for the load balancer and Redis [28] for the
database. The clients generate a mix of normal and malicious
web requests from different IP source addresses. Next, we
introduce the setup with REGEXNET. REGEXNET adds the
collector and the migrator to the instance that runs the web
service and allocates one vCPU as a sandbox to handle ma-
licious requests. REGEXNET runs the detection module in an
additional p3.2xlarge instance, equipped with 8 vCPUs (Intel
Xeon E5-2686 v4 processor), 61 GB memory and an NVIDIA
GPU (Tesla V100). The adaptive attacks are generated by a
c5n.18xlarge instance with 72 vCPUs (3.0 GHz Intel Xeon
Platinum processor with AVX-512) and 192 GB memory.
Evaluation metrics. In the experiments, we vary the following
parameters: the rate of malicious requests, the size of mali-
cious requests and the type of ReDoS attacks. We use the
following metrics to evaluate the performance of the system.
• Throughput. This is the number of normal requests per
minute (RPM) the system can process.
• Latency. This is the average time handling normal requests.
• Recovery time. This is the time the system takes to recover
from a ReDoS attack.
B. Network Trafﬁcs Used in the Evaluation
In this part, we ﬁrst ﬁnd modules in Node.js that are
vulnerable to ReDoS attacks. Speciﬁcally, we search the
Common Vulnerabilities and Exposures (CVE) database [29]
and academic papers [5] to ﬁnd existing vulnerable regular
expressions as shown in Table I. Among them, the vulnera-
bility in ua-parser-js is exponential, and those in other
modules are polynomial.
Next, we describe the benign and attack network trafﬁcs
targeting those modules used in the evaluation. The benign
trafﬁc is generated by Apache HTTP server benchmarking
tool ab [30] with 32 concurrent connections. Note that the
generated benign requests have relevant headers that trigger
the tested modules. Then, we describe how we generate attack
trafﬁcs for the tested modules. We generate two types of attack
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1581
GET http://www.foo.com/
User-Agent: ipaosvWipvWipvWipvWipvWipvWipvWipvWipvWipv
WipvWipvWipvWipvWipvWipvWipvWipvWipvWipvWipvWipvWipv
WipvWipvWipvWipvWipaIccvipaIc
(a) A malicious web request for ua-parser-js, which is generated by ReScue.
GET http://www.foo.com/
If-None-Match: x (30000 spaces) x
(b) A malicious web request for fresh, which is manually crafted.
Fig. 4. Examples of malicious web requests.
GET http://www.foo.com/
If-None-Match:
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
(30000 spaces)
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
(a) A malicious web request. The consecutive spaces trigger the vulnerability.
GET http://www.foo.com/
If-None-Match:
1D9xx52xxx9x5x9x25x0xxexOrxO622D350x2U5xxx5g8Gx2x
exnfxx759xr0x9x25ex02j22x25360X920e99x22xbrO2150518
(30000 spaces)
x2x2x22x2r5Sx0Zx0x0vOS1Oxxxxxx20xr6x2x2xF9xSx1SD
0Fe29xI29I9x7IIxx1xxi1e9D0xxx15x0x55xx3xf5rcho2x2cxx
(b) A malicious web request generated by adversarial learning. The consecutive
spaces trigger the vulnerability, but the characters before and after the spaces
bypass the DNN model.
Fig. 5. An example of an adaptive attack targeted at the fresh module. The
vulnerable regular expression is shown in Table I. REGEXNET can quickly
recover the web service from adaptive attacks as shown in Fig. 7.
trafﬁc: normal, untargeted with random contents, and adaptive
with carefully-crafted contents targeting our learning model.
1) Normal Attacks with Random Exploit Contents: We ﬁrst
describe how we generate a large number of normal exploits,
i.e., those with fairly random contents targeting each vulnera-
ble regular expression. First, we rely on an automated exploit
generation tool, ReScue [13], to generate a series of exploits.
Fig. 4(a) shows an example exploit for ua-parser-js .
Second, if ReScue fails to generate exploits for some regular
expressions, we manually analyze the regular expression, ﬁnd
a pattern for exploits, and generate a series of exploits. fresh
is such an example. The pattern for its exploits is “(random
string) + (a random number of spaces) + (random string)”.
Fig. 4(b) shows an example exploit for fresh.
Based on our experience, ReScue is only able to generate
attacks for ua-parser-js and marked, because the min-
imum sizes of their exploits to consume signiﬁcant CPU time
are hundreds of bytes. Except this, ReScue fails to generate
exploits for useragent of which the minimum size of
exploits is 1 KB. For other vulnerable modules, which require
tens of thousands of bytes, ReScue does not ﬁnish in ﬁve days,
and we use manually crafted exploits instead.
2) Adaptive Attacks with Carefully-crafted Exploits: We
now describe how we generate adaptive attacks with carefully-
crafted exploits. Because REGEXNET adopts a machine learn-
ing model, i.e., a DNN, previous research [20], [31], [19] in
adversarial machine learning teaches us that one can generate
adversarial examples to evade the learning model and bypass
the recovery system. The method is similar to gradient de-
scent, while we update the input data instead of the model
parameters. To handle discrete values like characters in web
requests, we use the method proposed in [31]. The basic idea
is to compute the gradients of the embedded vectors of the
input data and ﬁnd the closest embedded vector in the opposite
direction of the gradients for each vector.
In our experiments, we consider the DNN model as a
whitebox—which is a strong threat model, because the adopted
DNN is usually a blackbox to the adversary in practice—
and then generate adversarial requests for a vulnerable regular
expression. Note that
the original attack may change any
characters in a sample, which may alter the malice of the
request. Therefore, we add additional constraints to ensure that
the key exploit triggering the vulnerable regular expression
remains the same during adversarial sample generation, and
the web request is still legitimate in terms of the format.
Fig. 5 shows an example of an adaptive attack targeted
at the vulnerability of the fresh module. The vulnerable
regular expression is shown in Table I, which can be triggered
by consecutive spaces as part of a web request shown in
Fig. 5(a). We assume that an adversary can obtain the trained
DNN model and generate an adversarial input following prior
work [31]—the generated input, as shown in Fig. 5(b), still
preserve its malice, i.e., consecutive spaces, but has crafted
characters before and after the spaces to evade the model.
VI. EVALUATION
In this section, we evaluate REGEXNET with a wide variety
of real-world ReDoS attacks. Our evaluation aims to answer
the following research questions (RQs).
• RQ1: How resilient is REGEXNET against various ReDoS
attacks, e.g., different vulnerable regular expressions, re-
ﬂected vs. stored, and normal vs. adaptive?
• RQ2: How fast is REGEXNET in recovering web service
under ReDoS attacks? How effective is REGEXNET’s online
feedback loop in dealing with zero-day ReDoS attacks?
• RQ3: How does REGEXNET compare with state-of-the-art
reactive defense, namely Rampart [11]?
• RQ4: How effective is REGEXNET under different malicious
loads and message sizes?
• RQ5: What is the accuracy of REGEXNET’s DNN model
especially with an imbalanced or polluted training set?
A. RQ1: Resilience against Various ReDoS attacks
In this research question, we evaluate the resiliency of
REGEXNET against various ReDoS attacks from three aspects:
(i) vulnerabilities in different vulnerable regular expressions,
(ii) different vulnerability types, i.e., reﬂected vs. stored, and
(iii) adaptive attacks that generate adversarial samples to
bypass a trained DNN model.
Resiliency under attacks on vulnerabilities in different
regular expressions. Fig. 6 shows the system performance
under ReDoS attacks on different vulnerabilities. Particularly,
Fig. 6(a) shows the throughput and Fig. 6(b) shows the
latency. In this experiment, we set the malicious load to be
60 RPM, and the maximum message size to be tens of KB
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1582
(a) Throughput vs. vulnerable modules.
(b) Latency vs. vulnerable modules.
Fig. 6. System performance under ReDoS attacks on different vulnerable modules. REGEXNET is resilient to different ReDoS attack types.
Fig. 8. CDF of latency for generating adversarial attacks.
Fig. 7. System performance under an adaptive attack. REGEXNET updates
its model online for adversarial examples, and is resilient to adaptive attacks.
for polynomial vulnerable modules and hundreds of bytes
for exponential vulnerable modules. The adversary exploits
different vulnerabilities in Table I, and we measure the system
performance under these attacks. As we can see from the
ﬁgure, the adversary can effectively reduce the throughput and
increase the latency of the web service by exploiting these
vulnerabilities. REGEXNET is able to successfully handle all
these attacks on different vulnerabilities.
Resiliency under attacks on different types. Fig. 6 also
shows the performance of REGEXNET under different attack
types, i.e., reﬂected vs. stored. Note that although some mod-
ules are not designed to ﬁlter stored contents, e.g., charset,
as their purpose is to inspect HTTP headers, we still apply
them to the stored contents for demonstration and experimental
purposes. Although the attack strategy differs in terms of
reﬂected and stored attacks,
the resiliency of REGEXNET
against these two attacks is similar—particularly, REGEXNET
can learn the patterns of all ReDoS attacks and recover the
performance of the web service, making the web service still
usable to its normal clients.
Resiliency under adaptive attacks in whitebox setting. We
evaluate the resiliency of REGEXNET under adaptive attacks.
The methodology is as follows. The adversary ﬁrst launches a
zero-day attack against a vulnerable module, namely fresh,
generates an adversarial payload under a whitebox setting,
and then launches the second attack immediately once the
adversarial payload is available. The malicious load is 60
RPM. The maximum message size is 32 KB (including 30
KB spaces and 2 KB random strings), and the adversary uses
a reﬂected attack.
Fig. 7 shows the system performance under such an adaptive
attack—REGEXNET can quickly recover the web service.
Speciﬁcally, at the time 7 seconds, the adversary launches the
attack, making the throughput drop to almost 0. REGEXNET
quickly collects the malicious requests to train its model,
enabling it
to recognize the following malicious requests
and migrates them to sandboxes. The throughput is quickly
recovered within a few seconds. Next, at time 10 seconds,
the adversary starts to generate an adaptive attack using a
whitebox, gradient-based approach, and successfully creates
one at time 92 seconds. This adversarial example brings the
throughput down to almost 0 again, but REGEXNET quickly
recovers the web service and restores the system to the original
throughput within 5 seconds at the time of around 97 seconds.
We continue this game between the adversary and
REGEXNET for 100 independent rounds, and show the cu-
mulative (CDF) of the latency for generating adaptive attacks
in Fig. 8. An adversary can only successfully generate an
adaptive attack in 60% cases with an average latency of 56
seconds. The adversary fails to generate any adaptive attacks
for the rest 40% cases after a 120-second timeout—this is why
Fig. 8 is capped at 60%.
It is worth noting that the whitebox assumption of an adver-
sary, i.e., the adversary knows every detail of our DNN model,
is unrealistic. In practice, the adversary cannot calculate the
gradients so easily as the adversary has to probe REGEXNET
and build her own surrogate model, which takes an even longer
time, to create one adversarial example. The experiment shows
an ideal, upper-bound case for an adaptive attacker.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1583
freshcharsetua-parser-jscontentforwardedmobile-detectplatformuserageenttough-cookiemomentuglify-jsmsmarkedVulnerable Module0k20k40k60kThroughput (RPM)Reflected with RegexNetReflected with baselineStored with RegexNetStored with baselinefreshcharsetua-parser-jscontentforwardedmobile-detectplatformuserageenttough-cookiemomentuglify-jsmsmarkedVulnerable Module101102103104Latency (ms)Reflected with RegexNetReflected with baselineStored with RegexNetStored with baseline020406080100Time (s)0k20k40k60kThroughput (RPM)FirstattackGenerate adversarialattackAdaptiveattack0306090120Latency (s)0%20%40%60%80%100%CumulativeProbability (%)Failed to generateadaptive attacks(a) Without REGEXNET.
(b) With REGEXNET and ofﬂine
training.
(c) With REGEXNET and online
training.
Fig. 9. System performance under three ReDoS attacks over time. With a
combination of ofﬂine and online training, REGEXNET reacts to attacks in
sub-minute.
(d) With REGEXNET and both of-
ﬂine and online training.