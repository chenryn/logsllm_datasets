title:Updates from the Internet Backbone: An RPKI/RTR Router Implementation,
Measurements, and Analysis
author:Matthias W&quot;ahlisch and
Fabian Holler and
Thomas C. Schmidt and
Jochen H. Schiller
Updates from the Internet Backbone:
An RPKI/RTR Router Implementation, Measurements, and Analysis
Matthias W¨ahlisch
Freie Universit¨at Berlin
Berlin, Germany
PI:EMAIL
Fabian Holler, Thomas C. Schmidt
HAW Hamburg
Hamburg, Germany
PI:EMAIL, PI:EMAIL
PI:EMAIL
Jochen H. Schiller
Freie Universit¨at Berlin
Berlin, Germany
Abstract
A fundamental change in the Internet backbone routing
started in January 2011: The Resource Public Key Infras-
tructure (RPKI) has ofﬁcially been deployed by the Regional
Internet Registries. It leverages the validation of BGP preﬁx
updates based on cryptographically veriﬁed data and may
lead to secure inter-domain routing at last. In this talk, we
present RTRlib, a highly efﬁcient reference C implementa-
tion of the RPKI router part. We deploy RTRlib and conduct
a long-term measurement using live BGP streams to evalu-
ate the current impact of RPKI-based preﬁx origin valida-
tion on BGP routers. We observe that most of the invalid
preﬁxes are most likely the result of misconﬁguration. RTR-
lib is the only openly available tool for monitoring RPKI
validation activities in real-time. We measure a relatively
small overhead of origin validation on commodity hardware
(5% more RAM than required for full BGP table support,
0.41% load in case of ⇡ 92,000 preﬁx updates per minute).
1. Introduction
The Internet backbone is based on the Border Gateway
Protocol (BGP). BGP announces IP preﬁxes to enable inter-
domain routing between so called Autonomous Systems
(ASes). One major problem of BGP is its lack of veriﬁable
information exchange. Several prominent incidents high-
lighted the consequences [6, 1]: An AS incorrectly claims
to own an IP preﬁx and thereby redirects trafﬁc, which not
only may lead to trafﬁc interruption, but can be used to in-
tercept and tap data streams. Only recently, countermea-
sures have been deployed in the form of the Resource Public
Key Infrastructure (RPKI) [4] and related protocols. A suc-
cessfully deployed RPKI origin validation would have im-
mediately disclosed the preﬁx hijacks referenced above—a
rigorous route rejection of the invalid updates would have
prevented the incidents entirely.
The RPKI stores cryptographically provable mappings
of IP preﬁxes to ASes that are legitimate to originate these
1
preﬁxes. The corresponding attestation objects are called
Route Origin Authorization (ROA). To prevent BGP routers
from cryptographically load, external cache servers veriﬁes
ROAs and transmit only valid ROA data to the BGP router
using the RPKI/RTR protocol [2]. In combination with an
origin validation scheme for IP preﬁxes [5], a router is able
to verify the correctness the announced origin AS. Accord-
ing to the validation outcome, a BGP preﬁx update may be
valid, invalid, or not found in the RPKI.
In this talk, we analyze the impact of preﬁx origin val-
idation on BGP routers and the potential consequences for
the current BGP-based route propagation. We introduce the
RTRlib, a real-time compliant, highly efﬁcient implemen-
tation to secure inter-domain routing at BGP peers. This
open-source software is a reference implementation of the
latest IETF protocol standards to perform preﬁx origin val-
idation, and written in C. It features a ﬂexible architecture
and can be used to extend existing BGP daemons at real
routers but also to implement new monitoring and analysis
tools in the context of RPKI/BGP research.
Based on live BGP update streams representing more
than 100 peering neighbors, we present a long-term mea-
surement highlighting two months which veriﬁes 420 mil-
lion IP preﬁx updates against the available ROA data. We
observed that most of the invalid preﬁx announcements are
most likely due to misconﬁguration of the attestation ob-
jects. Our observations do not suggest to apply strict rejec-
tion of invalid preﬁx updates at the moment. Furthermore,
we found single events initiating a signiﬁcant amount of val-
idations.
We extract the key lessons learned from the data ob-
served during our measurement period and derive advice
for ISPs on future operational use of the RPKI. We system-
atically explore the overhead of preﬁx origin validation at
commodity router hardware. Enabling RPKI will require
⇡ 5% more RAM compared to the storage of the global
BGP routing table. The CPU load depends insigniﬁcantly
on the RPKI-deployment state.
The remainder of this abstract is structured as follows.
In § 2, we present the architecture of the RTRlib as well
as a performance overview and our insights from live BGP
updates. We conclude in § 3.
2. RTRlib – A C Library for RPKI/RTR
Router Support
To extend routing by an RPKI-based preﬁx origin veriﬁ-
cation, the RPKI/RTR protocol needs to be implemented on
routers. RTRlib is the ﬁrst full-ﬂedged open-source C im-
plementation that is suitable for testing purposes as well as
production use. We assembled the required functions as an
external independent library, which simpliﬁes code reuse.
Existing BGP daemons can be extended by simply integrat-
ing the RTRlib or parts of it. The same code base may also
be used to build tools for researchers or ISPs (e.g., to mon-
itor the RPKI). The software follows the design principles
of broad system integration, interoperability, extensibility,
and efﬁciency. RTRlib is licensed under GNU LGPL and
available at http://rpki.realmv6.org.
Architecture The software architecture includes dif-
ferent layers to simplify the extension or an exchange of
individual parts. The lowest layer of the architecture is built
by the transport sockets. They allow for the implementation
of different transport channels that provide a common inter-
face to exchange PDUs with the cache (i.e., the RPKI/RTR
server). The current version of the library supports unpro-
tected TCP and SSH. On top of the transport layer, the
RTR socket uses a transport socket for RTR-speciﬁc data
exchange with the RPKI/RTR server. The RTR socket im-
plements the RPKI/RTR protocol, i.e., fetches validation
records and stores them in a preﬁx table data structure.
The preﬁx validation table stores validated preﬁx origin
data. This abstract data structure provides a common inter-
face to add and delete entries as well as to verify a speciﬁc
preﬁx. Its implementation is crucial as the data structure
stores all preﬁxes received from the cache servers (i.e., low
memory overhead required) and is responsible to perform
preﬁx lookup for the BGP updates (i.e., ﬁnd validated IP
preﬁxes very fast). Our library implements a Longest Pre-
ﬁx First Search Tree (LPFST) [8], but can be extended to
other data structures. Internally, the RTRlib uses two sep-
arate preﬁx validation tables, one for IPv4 records and one
for IPv6 records. This makes tree operations (insert, delete,
ﬁnd) more efﬁcient as the height per tree is lower in contrast
to a combined IPv4/v6 tree.
On top of the modular architecture, the RTR connection
manager maintains the connection to multiple RTR servers.
This includes failover mechanisms. It represents the main
interface for users of the library.
Performance Overview We measure the runtime per-
formance and the scaling behaviour based on (1) experi-
ments and (2) live BGP streams to quantify the overhead
Figure 1. Memory consumption of RTRlib
introduced by RPKI-based preﬁx origin validation at BGP
routers. The measurement node consists of commodity
hardware with a dual-core AMD Opteron 280 processor
(2.4 GHz) and 8 GB RAM. The operating system was
Linux, kernel 2.6.32-33.
The memory consumption of the library mainly depends
on the number of preﬁxes inserted into the preﬁx valida-
tion table. Considering a 64 bit architecture with 8 bytes
per pointer, a single record within the preﬁx validation table
consumes 78 bytes in our implementation of the LPFST. To
measure the memory required on a real system, we added
randomly generated preﬁxes to the preﬁx validation table.
The overall memory consumption scales linearly for dif-
ferent table sizes as expected (cf., Fig. 1). ROAs for all
⇡ 400,000 active IP preﬁxes included in current BGP rout-
ing tables would result in additional ⇡ 30 MB of RAM for
an RPKI/RTR-enabled router. Thus a full RPKI validation
table would lead to a 5% increase of RAM [3].
The processing overhead of RPKI/RTR on the router is
dominated by the complexity that results from update and
lookup operations on the data structure holding the valid
ROA information. Update operations on the preﬁx valida-
tion table are triggered by new, modiﬁed, or deleted ROAs,
whereas lookups follow BGP updates. The asymptotical
complexity of the LPFST is O(n · log(n)) with n entries.
1 million entries can be imported in ⇡ 4 seconds, which
allows for a fast creation of the preﬁx validation table and
prompt start of origin veriﬁcation after a reboot. We also an-
alyzed the CPU overhead depending on different potential
states of RPKI deployment by randomly generating 100,000
different ROA data. The performance evaluation is based
on a predeﬁned ratio of validation state of 0%, 25%, 50%,
75%, and 100%. For each combination of all possbile vali-
dation outcomes (e.g., 25%valid, 50% invalid, and 25% not
found), we measured dependency on the input set below
one clock tick. For current deployment, this is negligible.
However, we argue that even a slight dependency may be
misused by an attacer, e.g., to perform a complexity attack.
2
0,0500,0k1,0M1,5M2,0M050100150~400k prefixes: ~30 MBNumerically (78 Bytes/entry)Required Memory [MB]Entries in Prefix Validation Table [#]Measuredments indicate that most storms of valid/invalid preﬁxes are
due to a high frequency of BGP updates and not based on
changes of the preﬁx/RPKI data.
3 Conclusion and Outlook
This talk presented a ﬁrst practical exploration of the Re-
source Public Key Infrastructure (RPKI) recently released
by the IETF. In an evolutionary approach, RPKI allows for
authenticating preﬁx-to-AS mappings in BGP route adver-
tisements without altering the Internet backbone routing.
We introduced the ﬁrst full-ﬂedged RPKI/RTR router im-
plementation in C that is available for public download.
Our performance analysis revealed its readiness not only
for research and monitoring, but also for production-type
services. The second part of our work was dedicated to a
long-term measurement and analysis of real-world Route
Origin Authorization (ROA) management and the valida-
tion of preﬁxes in real-time BGP streams. We monitored an
emerging deployment of operators and increased quality of
RPKI data.
Currently we work on establishing an online monitoring
service that displays the status of RPKI preﬁx validation in
near real-time. We will extend our analysis about the vul-
nerability of an RPKI-enabled router and conduct detailed
study of the identiﬁcation of preﬁx hijacks [7].
Acknowledgements We would like to thank the SIDR
community and Olaf Maennel for very valuable discussions.
This work is supported by the German BMBF within the
project Peeroskop.
References
[1] M. A. Brown. Pakistan hijacks YouTube – Renesys Blog,
February 2008.
[2] R. Bush and R. Austein. The RPKI/Router Protocol. Internet-
Draft – work in progress 26, IETF, February 2012.
BGP: Frequently Asked Questions.
[3] Cisco.
http:
//www.cisco.com/image/gif/paws/5816/
bgpfaq_5816.pdf, 2012.
[4] M. Lepinski and S. Kent. An Infrastructure to Support Secure
Internet Routing. RFC 6480, IETF, February 2012.
[5] P. Mohapatra, J. Scudder, D. Ward, R. Bush, and R. Austein.
Internet-Draft – work in
BGP Preﬁx Origin Validation.
progress 10, IETF, October 2012.
[6] D. M. Slane, C. Bartholomew, et al. 2010 Report to Congress.
Annual report, U.S.–China Economic and Security Review
Commission, November 2010.
[7] M. W¨ahlisch, O. Maennel, and T. C. Schmidt. Towards De-
tecting BGP Route Hijacking using the RPKI. In Proc. of ACM
SIGCOMM, Poster Session, pages 103–104, New York, Au-
gust 2012. ACM.
[8] L.-C. Wuu, T.-J. Liu, and K.-M. Chen. A longest preﬁx ﬁrst
search tree for IP lookup. Computer Networks, 51(12):3354–
3367, August 2007.
Figure 2. Characteristic CPU load Jan. 5, 2012
RPKI in the Wild To evaluate the behaviour of an
RPKI/RTR-enabled router under real conditions, we extend
our setup. The measurement node maintains a connection to
(1) an ofﬁcially deployed RTR cache server and (2) BGP-
mon. BGPmon provides a live BGP stream of nine direct
and three indirect peerings. The indirect peering includes
updates from more than 100 peers. We measure the CPU
load and record the IP preﬁx, mask length, and AS path as
well as the validated ROA data if the preﬁx is included in
the RPKI. We consider the months January and May 2012.
On average we received ⇡ 6 million preﬁx updates per
day. The CPU load corresponds to the number of preﬁx val-
idations (i.e., the BGP update rate). Figure 2 visualizes both
measurements per minute for January 5, 2012. All other
days show the same qualitative behaviour. During the mea-
surement period, we observed a maximum of 92,549 preﬁx
announcements per minute and a maximum CPU load of
0.41%. The average CPU load per day was 0.02% with a
standard deviation of 0.04%.
Most of the announced IP preﬁxes are stable in the sense
that they remain visible over a longer period of time. They
are advertised continuously. To prevent preﬁx hijacking,
each RPKI-enabled BGP router must process any single
preﬁx advertisement and verify the origin AS against the
currently valid ROA data. However, not all valid preﬁxes
initiate a change in the Routing Information Base (RIB). In
particular, preﬁx updates that are already part of the RIB
need not to be evaluated again if received in a short period
of time. Caching might be used to optimize access time, for
example. From this perspective we quantify the difference
between the information a router sees in the updates and the
new information a router learns. On average, the number
of successful preﬁx origin validations is lager than the in-
valid preﬁxes. In contrast to January, the amount of valids
increased and the number of invalids decreased in May. We
observed 71,619 valid preﬁx updates (and 3598 unique pre-
ﬁxes) on average in January, and a mean of 131,764 preﬁx
updates (and 5047 unique preﬁxes) in May. Our measure-
3
00:0004:0008:0012:0016:0020:0024:000,00,10,20,30,020,0k40,0k60,0k BGP Prefix Updates [#]Time [hh:mm]CPU Usage [%]