# Title: Updates from the Internet Backbone: An RPKI/RTR Router Implementation, Measurements, and Analysis

## Authors
- Matthias Wählisch, Freie Universität Berlin, Berlin, Germany
- Fabian Holler, HAW Hamburg, Hamburg, Germany
- Thomas C. Schmidt, HAW Hamburg, Hamburg, Germany
- Jochen H. Schiller, Freie Universität Berlin, Berlin, Germany

## Abstract
In January 2011, a fundamental change in the Internet backbone routing began with the official deployment of the Resource Public Key Infrastructure (RPKI) by the Regional Internet Registries. This infrastructure enables the validation of BGP prefix updates using cryptographically verified data, potentially leading to secure inter-domain routing. In this paper, we present RTRlib, a highly efficient reference C implementation of the RPKI router part. We deploy RTRlib and conduct long-term measurements using live BGP streams to evaluate the current impact of RPKI-based prefix origin validation on BGP routers. Our observations indicate that most invalid prefixes are likely due to misconfiguration. RTRlib is the only openly available tool for real-time monitoring of RPKI validation activities. We measure a relatively small overhead of origin validation on commodity hardware (5% more RAM than required for full BGP table support, 0.41% load in case of approximately 92,000 prefix updates per minute).

## 1. Introduction
The Internet backbone relies on the Border Gateway Protocol (BGP), which announces IP prefixes to enable inter-domain routing between Autonomous Systems (ASes). A major issue with BGP is its lack of verifiable information exchange. Several high-profile incidents have highlighted the consequences, such as an AS incorrectly claiming ownership of an IP prefix, leading to traffic redirection and potential interception of data streams. Recently, countermeasures like the Resource Public Key Infrastructure (RPKI) and related protocols have been deployed. A successfully deployed RPKI origin validation would immediately disclose such prefix hijacks, and a rigorous route rejection of invalid updates could prevent these incidents entirely.

The RPKI stores cryptographically provable mappings of IP prefixes to ASes that are legitimate to originate these prefixes. The corresponding attestation objects are called Route Origin Authorizations (ROAs). To prevent BGP routers from being overloaded with cryptographic tasks, external cache servers verify ROAs and transmit only valid ROA data to the BGP router using the RPKI/RTR protocol. In combination with an origin validation scheme for IP prefixes, a router can verify the correctness of the announced origin AS. Based on the validation outcome, a BGP prefix update may be valid, invalid, or not found in the RPKI.

In this paper, we analyze the impact of prefix origin validation on BGP routers and the potential consequences for current BGP-based route propagation. We introduce RTRlib, a real-time compliant, highly efficient implementation for securing inter-domain routing at BGP peers. This open-source software is a reference implementation of the latest IETF protocol standards for performing prefix origin validation and is written in C. It features a flexible architecture and can be used to extend existing BGP daemons at real routers or to implement new monitoring and analysis tools in the context of RPKI/BGP research.

Based on live BGP update streams representing more than 100 peering neighbors, we present a long-term measurement covering two months, during which we verified 420 million IP prefix updates against available ROA data. Most of the invalid prefix announcements were likely due to misconfiguration of the attestation objects. Our observations do not suggest applying strict rejection of invalid prefix updates at this time. Additionally, we observed single events initiating a significant number of validations.

We extract key lessons learned from the data observed during our measurement period and provide advice for ISPs on future operational use of the RPKI. We systematically explore the overhead of prefix origin validation on commodity router hardware. Enabling RPKI will require approximately 5% more RAM compared to storing the global BGP routing table. The CPU load is minimally affected by the RPKI deployment state.

The remainder of this paper is structured as follows:
- In §2, we present the architecture of RTRlib, performance overview, and insights from live BGP updates.
- In §3, we conclude with a summary and future outlook.

## 2. RTRlib – A C Library for RPKI/RTR Router Support
To extend routing with RPKI-based prefix origin verification, the RPKI/RTR protocol needs to be implemented on routers. RTRlib is the first full-fledged open-source C implementation suitable for both testing and production use. We assembled the required functions into an external independent library, simplifying code reuse. Existing BGP daemons can be extended by integrating RTRlib or parts of it. The same code base can also be used to build tools for researchers or ISPs (e.g., to monitor the RPKI). The software follows design principles of broad system integration, interoperability, extensibility, and efficiency. RTRlib is licensed under GNU LGPL and is available at http://rpki.realmv6.org.

### Architecture
The software architecture includes different layers to simplify extension or exchange of individual parts. The lowest layer consists of transport sockets, allowing the implementation of various transport channels with a common interface for exchanging PDUs with the cache (i.e., the RPKI/RTR server). The current version supports unprotected TCP and SSH. On top of the transport layer, the RTR socket uses a transport socket for RTR-specific data exchange with the RPKI/RTR server. The RTR socket implements the RPKI/RTR protocol, fetching validation records and storing them in a prefix table data structure.

The prefix validation table stores validated prefix origin data. This abstract data structure provides a common interface to add and delete entries and to verify specific prefixes. Its implementation is crucial as it stores all prefixes received from the cache servers and is responsible for performing prefix lookups for BGP updates. Our library implements a Longest Prefix First Search Tree (LPFST), but can be extended to other data structures. Internally, RTRlib uses two separate prefix validation tables, one for IPv4 records and one for IPv6 records, making tree operations (insert, delete, find) more efficient.

On top of the modular architecture, the RTR connection manager maintains connections to multiple RTR servers, including failover mechanisms. It represents the main interface for users of the library.

### Performance Overview
We measure the runtime performance and scaling behavior based on experiments and live BGP streams to quantify the overhead introduced by RPKI-based prefix origin validation at BGP routers. The measurement node consists of commodity hardware with a dual-core AMD Opteron 280 processor (2.4 GHz) and 8 GB RAM, running Linux kernel 2.6.32-33.

The memory consumption of the library mainly depends on the number of prefixes inserted into the prefix validation table. In our implementation of the LPFST, a single record consumes 78 bytes. To measure the memory required on a real system, we added randomly generated prefixes to the prefix validation table. The overall memory consumption scales linearly for different table sizes. ROAs for all approximately 400,000 active IP prefixes included in current BGP routing tables would result in an additional 30 MB of RAM for an RPKI/RTR-enabled router, leading to a 5% increase in RAM.

The processing overhead of RPKI/RTR on the router is dominated by the complexity of update and lookup operations on the data structure holding valid ROA information. Update operations on the prefix validation table are triggered by new, modified, or deleted ROAs, whereas lookups follow BGP updates. The asymptotic complexity of the LPFST is O(n · log(n)) with n entries. One million entries can be imported in approximately 4 seconds, allowing for a fast creation of the prefix validation table and prompt start of origin verification after a reboot. We also analyzed the CPU overhead depending on different potential states of RPKI deployment by randomly generating 100,000 different ROA data. The performance evaluation is based on predefined ratios of validation states (0%, 25%, 50%, 75%, and 100%). For each combination of all possible validation outcomes, we measured the dependency on the input set below one clock tick. For current deployment, this is negligible. However, even a slight dependency may be exploited by an attacker, e.g., to perform a complexity attack.

## 3. Conclusion and Outlook
This paper presents a practical exploration of the Resource Public Key Infrastructure (RPKI) recently released by the IETF. In an evolutionary approach, RPKI allows authenticating prefix-to-AS mappings in BGP route advertisements without altering the Internet backbone routing. We introduced the first full-fledged RPKI/RTR router implementation in C, available for public download. Our performance analysis revealed its readiness for research, monitoring, and production-type services. The second part of our work focused on long-term measurement and analysis of real-world Route Origin Authorization (ROA) management and the validation of prefixes in real-time BGP streams. We monitored an emerging deployment of operators and increased quality of RPKI data.

Currently, we are working on establishing an online monitoring service that displays the status of RPKI prefix validation in near real-time. We will extend our analysis of the vulnerability of an RPKI-enabled router and conduct a detailed study of the identification of prefix hijacks.

## Acknowledgements
We thank the SIDR community and Olaf Maennel for valuable discussions. This work is supported by the German BMBF within the project Peeroskop.

## References
[1] M. A. Brown. Pakistan hijacks YouTube – Renesys Blog, February 2008.
[2] R. Bush and R. Austein. The RPKI/Router Protocol. Internet-Draft – work in progress 26, IETF, February 2012.
[3] Cisco. BGP: Frequently Asked Questions. http://www.cisco.com/image/gif/paws/5816/bgpfaq_5816.pdf, 2012.
[4] M. Lepinski and S. Kent. An Infrastructure to Support Secure Internet Routing. RFC 6480, IETF, February 2012.
[5] P. Mohapatra, J. Scudder, D. Ward, R. Bush, and R. Austein. BGP Prefix Origin Validation. Internet-Draft – work in progress 10, IETF, October 2012.
[6] D. M. Slane, C. Bartholomew, et al. 2010 Report to Congress. Annual report, U.S.–China Economic and Security Review Commission, November 2010.
[7] M. Wählisch, O. Maennel, and T. C. Schmidt. Towards Detecting BGP Route Hijacking using the RPKI. In Proc. of ACM SIGCOMM, Poster Session, pages 103–104, New York, August 2012. ACM.
[8] L.-C. Wuu, T.-J. Liu, and K.-M. Chen. A longest prefix first search tree for IP lookup. Computer Networks, 51(12):3354–3367, August 2007.