# "FIRST-TRY" DNS CACHE POISONING WITH IPv4 AND IPv6 FRAGMENTATION

## Abstract
This document discusses a novel method to poison the cache of DNS resolvers without requiring a man-in-the-middle (MITM) attack. The approach leverages both IPv4 and IPv6 fragmentation, reducing the number of iterations from hundreds to potentially just one. This technique bypasses all current recommendations for mitigating such attacks.

## Authors
- **Travis (Travco) Palmer**
  - Security Research Engineer, Cisco Systems
  - Offensive Security Certified Professional & Expert (OSCP & OSCE)
  - Not a DNS/DNSSEC expert
- **Brian Somers**
  - Principal Engineer, Cisco Systems
  - Former FreeBSD & OpenBSD developer

## Responsible Disclosure
Our team discovered this attack during a focused penetration testing engagement. We responsibly disclosed it to Cisco Umbrella, who is in the process of notifying other DNS operators before DEF CON.

## Table of Contents
1. Introduction
2. Background on DNS
3. Fragmentation Attacks
4. IPID Inference
5. The Attack (agnostic to IPv4 and IPv6)
6. Mitigations

## 1. Introduction
If the timing of a DNS request can be predicted, the reply only needs to be well-structured and have a valid ID. In 2008, Dan Kaminsky demonstrated that 16 bits of entropy are insufficient to prevent cache poisoning, especially when performed off-path (source ports are predictable).

## 2. Background on DNS
### Ideal Poisoning Scenario
In an ideal scenario, the attacker can predict the DNS ID sequence and send a crafted response to the resolver, which will then cache the malicious data.

### DNS Primer
- **Dan Kaminsky's 2008 Presentation**: "It’s The End Of The Cache As We Know It" at Black Hat.
- **DNSSEC**: DNS Security Extensions add cryptographic key-based signing to DNS zones, ensuring data origin authentication and integrity. However, DNSSEC does not mitigate all types of attacks, particularly those involving fragmentation.

### DNSSEC Overview
- **Data Origin Authentication**: Verifies that the data received actually came from the zone it should have come from.
- **Data Integrity**: Ensures that data cannot be modified in transit since records are signed by the zone owner with the zone's private key.

## 3. Fragmentation Attacks
### Why DNS Fragmentation?
- **Fragmentation**: If a DNS response is too large, it must be fragmented at the IP layer.
- **Entropy Reduction**: The DNS identifier and UDP port number are early in the IP payload. For the second fragment, the only entropy is the IP identifier (IPID) in the header.
- **IPv4 IPID**: A significant portion of nameservers use a single global counter for IPID, making it predictable.

### Fragmentation Considered Poisonous
- **Origin of Work**: "Fragmentation Considered Poisonous" by Amir Herzberg and Haya Shulman, published in 2012.
- **IPID Predictability**: The IPID for IPv4 is 16 bits, and many nameservers use a predictable global counter.

## 4. IPID Inference
### IPID Prediction
- **Predictable IPID**: By observing the IPID values, an attacker can predict the next value, reducing the entropy needed to craft a successful attack.

## 5. The Attack (Agnostic to IPv4 and IPv6)
### Attack Process
1. **Target Identification**: Identify the target DNS resolver.
2. **Timing Prediction**: Predict the timing of the DNS request.
3. **Craft Response**: Craft a DNS response with the correct DNS ID and IPID.
4. **Send Fragments**: Send the first fragment with the DNS ID and UDP port, followed by the second fragment with the predicted IPID.
5. **Cache Poisoning**: The resolver caches the malicious response.

### Example Scenario
- **Target**: Resolver at v.x.y.z
- **Puppet**: Attacker-controlled server
- **Internet**: Network path
- **Cache**: DNS resolver cache

### Steps
1. **Initial Setup**: Set up the puppet and target.
2. **Send First Fragment**: Send the first fragment with the correct DNS ID and UDP port.
3. **Send Second Fragment**: Send the second fragment with the predicted IPID.
4. **Repeat if Necessary**: Repeat the process if the first attempt fails, ensuring the response is not cached.

## 6. Mitigations
### Recommendations
- **Randomize IPID**: Ensure that IPIDs are randomized across different sessions.
- **Use DNSSEC**: Implement DNSSEC to provide data origin authentication and integrity.
- **Monitor and Detect**: Regularly monitor DNS traffic and detect any unusual patterns or anomalies.

By following these recommendations, DNS operators can significantly reduce the risk of cache poisoning attacks through fragmentation.

---

**© 2018 Cisco and/or its affiliates. All rights reserved. Cisco Public**