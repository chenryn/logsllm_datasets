Chapter 7
BRINGING SEMANTIC SECURITY TO
SEMANTIC WEB SERVICES
Authors: Richard S. Patterson1, John A. Miller1, Jorge Cardoso2, Mike
Davis3
1University of Georgia, 2University of Madeir, 3U.S. Department of Veterans Affairs& Chair
HL7 Security Committee
Abstract: Semantic Web services begin to emerge as the next evolution of the Service
Oriented Architecture. It is become clear that authorization is going to be one
of the biggest challenges. The typical obstacles which most areas of Semantic
Web services have had to overcome are what parts of a Web services need
semantic information, how best to use the semantics, and agreeing on
standards. However, for authorization there are the fine grained security
implications as well. For instance, how much authorization information is
necessary to aid in Semantic Discovery of Web services? Is the authorization
information opening any new security holes? We will examine a framework
for expressing the proper authorization information in order to aid in the
Semantic Discovery of Web services in which the requesting service most
likely has the authority to invoke.
Key words: Web Services Discovery, Authorization, Semantic Matching of Web Services,
Ontology-based matching of Authorization, Web Service Authorization
Discovery, Semantic Web Services
1. INTRODUCTION
1.1 The Semantic Web
Currently, the World Wide Web is primarily composed of documents
written in HTML (Hyper Text Markup Language), a language that is useful
for visual presentation. HTML is a set of “markup” symbols contained in a
Web page intended for display on a Web browser. Most of the information
2 Chapter 7
on the Web is designed only for human consumption. Humans can read Web
pages and understand them, but their inherent meaning is not shown in a way
that allows their interpretation by computers.
The information on the Web can be defined in such a way that it can
be used by computers not only for display purposes, but also for
interoperability and integration between systems and applications. One way
to enable machine-to-machine exchange and automated processing is to
provide the information in such a way that computers can understand it. This
is precisely the objective of the semantic Web – to make possible the
processing of Web information by computers. “The Semantic Web is not a
separate Web but an extension of the current one, in which information is
given well-defined meaning, better enabling computers and people to work
in cooperation.” (Berners-Lee, Hendler et al. 2001). The next generation of
the Web will combine existing Web technologies with knowledge
representation formalisms (Grau 2004).
Currently the Web is under evolution and different approaches are
being sought in order to come up with the solutions to add semantics to Web
resources. To give meaning to resources and links, new standards and
languages are being investigated and developed. The rules and descriptive
information made available by these languages allow the type of resources
on the Web and the relationships between resources to be characterized
individually and precisely.
To give meaning to Web resource and links, the research community
has developed semantic standards such as the Resource Description
Framework (RDF) (RDF 2002) and the Web Ontology Language (OWL)
(OWL 2004). RDF and OWL standards enable the Web to be a global
infrastructure for sharing both documents and data, which make searching
and reusing information easier and more reliable as well. RDF is a standard
for creating descriptions of information, especially information available on
the World Wide Web. What XML is for syntax, RDF is for semantics. The
latter provides a clear set of rules for providing simple descriptive
information. OWL is an extension of RDF and provides a language for
defining structured Web-based ontologies which allows a richer integration
and interoperability of data among communities and domains.
1.2 Semantic Web Services
Many believe that a new Web will emerge in the next few years,
based on the large-scale research and development ongoing on the semantic
Web and Web services. The intersection of these two, semantic Web
services, may prove to be even more significant. Academia has mainly
approached this area from the Semantic Web side, while industry is
beginning to consider its importance from the Web services side (Cardoso,
7. Bringing Semantic Security to Semantic Web Services 3
Miller et al. 2005). Semantic Web services are the result of the evolution of
the syntactic definition of Web services and the semantic Web as shown in
Figure 1.
Figure 1 The nature of semantic Web services
Several approaches have been developed to bring semantics to Web
services, including WSDL-S (Akkiraju, Farrell et al. 2006), OWL-S (Martin,
Paolucci et al. 2004; OWL-S 2004), and WSMO (WSMO 2004; Feier,
Roman et al. 2005). The work presented in this chapter uses the first
approach, WSDL-S. This approach to creating semantic Web services
consists in mapping concepts in a Web service description (WSDL
specification) to ontological concepts and it is described into more detail in
the next section.
1.3 Semantically Annotated Web services: WSDL-S
One solution to create semantic Web services is by mapping concepts
in a Web service description to ontological concepts. Using this approach,
users can explicitly define the semantics of a Web service for a given
domain. With the help of ontologies, the semantics or the meaning of service
data and functionality can be explained. As a result, integration can be
accomplished in an automated way and with a higher degree of success.
WSDL-S (Patil, Oundhakar et al. 2004; Rajasekaran, Miller et al.
2004) establishes mapping between WSDL descriptions and ontological
concepts. The idea of establishing mappings between service, task, or
activity descriptions and ontological concepts was first presented in
(Cardoso and Sheth 2003). Figure 2 illustrates METEOR-S WSDL-S
Annotator tool (Patil, Oundhakar et al. 2004) and the mapping that have
been established between WSDL descriptions and ontological concepts.
4 Chapter 7
Figure 2 Annotating Web services with ontological concepts
Based on the analysis of WSDL descriptions, three types of elements can
have their semantics increased by annotating them with ontological
concepts: operations, messages, preconditions and effects. All the elements
are explicitly declared in a WSDL description.
• Operations. Each WSDL description may have a number of operations
with different functionalities. For example, a WSDL description can
have operations for both booking and canceling flight tickets. In order to
add semantics, the operations must be mapped to ontological concepts to
describe their functionality.
• Message. Message parts, which are input and output parameters of
operations, are defined in WSDL using the XML Schema. Ontologies –
which are more expressive than the XML Schema – can be used to
annotate WSDL message parts. Using ontologies not only brings user
requirements and service advertisements to a common conceptual space,
but also helps to use and apply reasoning mechanisms.
• Preconditions and effects. Each WSDL operation may have a number
of preconditions and effects. The preconditions are usually logical
conditions, which must be evaluated to true in order to execute a specific
operation. Effects are changes in the world that occur after the execution
of an operation. After annotating services’ operations, inputs and
outputs, preconditions and effects can also be annotated. The semantic
annotation of preconditions and effects is important for Web services,
since it is possible for a number of operations to have the same
functionality, as well as the same inputs and outputs, but different
effects.
7. Bringing Semantic Security to Semantic Web Services 5
Figure 3 WSDL example
The WSDL-S specification indicates that the Web service supplies
two operations: ‘RegisterStudent’ and ‘StudentInformation’. The first
operation has an input named ‘student’, semantically described by the
ontological concept “sm:StudentInfo”, and an output named ‘ID’,
semantically described by the concept “sm:StudentID”. The operation
‘RegisterStudent’ is semantically annotated with the ontological concept
“sm:RegisterStudent”. The second operation, ‘StudentInformation’, uses
similar ontological concepts to annotate the input, output, and action. The
ontological concepts are expressed in the ontology
6 Chapter 7
http://dme.uma.pt/jcardoso/StudentMng.owl#, which is specified using OWL
(OWL 2004).
To create, represent, and manipulate WSDL-S documents, WSDL4J
(http://sourceforge.net/projects/wsdl4j/) can be used. WSDL4J provides
JAVA API’s for WSDL parsing and generation. WSDL4J supports
extensibility elements providing an easy mechanism to add new extensions.
This allows WSDL to represent a specific technology under various
elements defined by WSDL.
2. WEB SERVICES SECURITY BACKGROUND
Web services can be used to expose inter-organizational components
such as business critical data, business processes and internal workflows
[Shivaram, 2003]. Organizations may expose some of these components in
order to capitalize on the cost savings and reduced complexity that Web
services can add to there SOA. Because the SOA is more dynamic, loosely
defined, and ubiquitous, new security measures are needed to protect key
business information. There are currently standards proposed or accepted
regarding authentication, encryption, and identity management. These areas
of Web service security use a combination of tried-and-true technologies
such as keys, username token, and RSA encryption, along with newer
technologies such as XML signature [XML-Signature, 2002] and SAML
(Security Assertion Markup Language) [SAML 2.0, 2005].
In securing Web services, there are five fundamental areas to consider;
Message Level Protection, Message Privacy, Parameter Checking,
Authentication, and Authorization. When examining these areas it is
important to stay within the context of Web services and not network
security in general. This is because network security is at a different layer
of the ISO model; Web service security is at the application layer. As we
discuss these areas of security, observe the following. Some of solutions use
the same or similar technologies to achieve vigilance. Not all of the
technologies used were developed for Web services and may have been
around for many years. Which of these areas could benefit from semantics?
Four of the five areas have been addressed; however, authorization has not.
Authorization aided by Semantics is not only important in Web services, but
the Semantic Web as well.
As Web services continue to evolve into Semantic Web services for
automated discovery and execution of business processes [Verma, 2005],
two questions become more prevalent. From the Service Providers
perspective, how much information should be shared with an entity to which
there is no previous relationship. From the Requesters perspective, how
7. Bringing Semantic Security to Semantic Web Services 7
does the Requester know if they will have access to the information and
resources they discover through automated discovery?
We will begin our discussion by reviewing the technologies currently in
place to secure Web services. The following section take a look at an
approach which uses semantics, along with current technologies, to aid
Providers and Requesters in answering the questions posed above.
2.1 Message Privacy
Message privacy deals with the confidentiality of a message. Here
unauthorized entities should not be able to access the information within the
message. It is important to remember here that a part of this information is
the XML Signature and Token, found in the message header, which can be
seen in Figure 4. To ensure confidentiality an encryption scheme must be
implemented.
Figure 4 Soap Message in transit
Since Web services can be chained together to form complex services,
traditional point-to-point encryption schemes, such as SSL, do not suffice.
Point-to-point schemes work at the Network layer of the ISO model.
Therefore, once the message has been received by an entity it is decrypted in
its entirety. This entity may be an intermediary and not the provider of the
service, Figure 4. Furthermore, a message may cross multiple trust domains
due to routing caused by elaborate messaging communications [Web
Services Architecture, 2004]. What is needed is an end-to-end encryption
scheme.
The XML Encryption standard provides the necessary framework for
accomplishing this task. XML Encryption allows for the encryption of any
combination of the message body, header, attachments, and sub-structures
[XML-Encryption, 2002].
When a message or part of a message is encrypted, the encryption
information can be made available in the message header. This information
is useful for complex services since each Web service in the chain will need
to know how to decrypt the section of the message relevant to their service.
This information should not be the actual key to decrypt the message.
8 Chapter 7
An example will clarify. When a requester encrypts a message body
and XML Signature information in the header, it may then specify in the
header that it has used the providing service’s public key. A public key
allows for the encryption of data but only the private key may decrypt the
data. Once the provider receives the message it sees that the message has
been encrypted using its public key. The provider then decrypts the message
using its private key.
XML Encryption allows multiple different keys to be used with in a
message to encrypt different sections, elements, of the message. Each
encrypted section is referenced in the message header and mapped to the key
information if provided. This provides end-to-end encryption through
intermediaries which may also be accessing the parts of the message.
Table 1 - XML Algorithms
Purpose Algorithm Specified as
Digest SHA1 Required
Digest SHA256 Recommended
Signature DSAwithSHA1 (DSS) Required
Signature RSAwithSHA1 Recommended
Canonicalizat Canonical XML (omits Required
ion comments)
Canonicalizat XML with Comments Recommended
ion
Transform XPath Recommended
Transform Enveloped Signature Required
Table 1 above provides an overview of the algorithms specified in the
XML-Signature and XML-Encryption standards. Required algorithms are
the minimal to comply with the standard; while recommended is just that,
recommended.
2.2 Message Level Protection
Message Level Protection has to do with message integrity. This means
being able to detect when a SOAP message (message) has been modified
from its original state and the ability to guarantee that the contents have not
been modified [Web Services Architecture, 2004]. This is done by creating
a message digest.
7. Bringing Semantic Security to Semantic Web Services 9
A message digest is an encoded message, a cryptographic checksum of
an octet stream [WS-Security, 2002], which is created using an algorithm.
The SHA-1 algorithm [NIST, 1993], in Table 1, is required in the XML
Signature specification. The only parameter is the element to be signed.
The provider of the Web service receives the message, the digest, and is told
which algorithm has been used to create the digest. Using this information,
the service provider is able to recreate the digest and compare it to the digest
which it received from the requester.
When a message is passed from a Requester Web service to a provider
Web service, the message body should be digitally signed using the XML
Signature specification. There are several Token options for signing a
message. These options fall under one of two categories; they can either be
endorsed or unendorsed. An endorsed token is one which the claims of the
Token can be validated by a trusted authority. An example of this kind of
Token is a X.509 certificate. An unendorsed Token is one which the claims
may not be validated by a trusted authority. However, there is such a thing
as a proof-of–possession unendorsed Token. An example of this is a
username-password Token.
When signing a message, the signature parameters consist of a security
token and the message digest. It is worth noting that the second parameter
can be an XPath node-set. The output is the message signature which will
appear in the message header. Figure 2 [WS-Security, 2002] shows the key
or token used to sign the message (1), the message digest (2), the signature
value (3), and the unencrypted message body (4).
The provider service must have a way to verify the contents of the
message. In order to do so the provider must have the message, the digest,
determine the algorithm used to create the digest, and access the key or
token. Security elements in the header of the message contain information
on the algorithm and Token. The provider can use this information to
compare the digest to the message. Any changes, even the addition of one
white space to the original message can be detected. This clearly solves the
problem of Message Level Protection.
2.3 Message Validity
Message Validity is ensuring that the contents of a message are
appropriate to the service and that they are well formed. Checking the
contents of a message can be subdivided into two categories, verifying data
types and checking for malicious code. Verifying that the data types passed
to an operation are those which the services are expecting is straight forward.
Checking for malicious code within the message is not so straight forward.
10 Chapter 7
Figure 5 Soap Message with XML-Signature
Malicious code within a message can appear as part of the XML
message or as parameters to be passed to operations. XML viruses and
XML worms are commonly passed within the contents of any XML
document or message [Lilly, 2002]. Because these are common in the Web
environment there is software available to safely scan XML to determine if it