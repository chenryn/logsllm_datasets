# 6.5 设置PATH环境变量
当你在shell命令行界面中输入一个外部命令时（参见第5章），shell必须搜索系统来找到对应的程序。`PATH`环境变量定义了用于进行命令和程序查找的目录。在本书所用的Ubuntu系统中，`PATH`环境变量的内容如下：

```bash
$ echo $PATH
/sbin:/bin:/usr/games:/usr/local/games:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
```

输出中显示了8个可供shell用来查找命令和程序的目录。`PATH`中的目录使用冒号分隔。

如果命令或程序的位置没有包含在`PATH`变量中，那么如果不使用绝对路径的话，shell是无法找到的。如果shell找不到指定的命令或程序，它会产生一个错误信息：

```bash
$ myprog
-bash: myprog: command not found
```

问题是，应用程序放置可执行文件的目录常常不在`PATH`环境变量所包含的目录中。解决的办法是保证`PATH`环境变量包含了所有存放应用程序的目录。

你可以将新的搜索目录添加到现有的`PATH`环境变量中，而无需从头定义。`PATH`中各个目录之间用冒号分隔。你只需引用原来的`PATH`值，然后再给这个字符串添加新目录即可。可以参考下面的例子：

```bash
$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games

$ PATH=$PATH:/home/christine/Scripts

$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/christine/Scripts
```

将目录加到`PATH`环境变量之后，你现在就可以在虚拟目录结构中的任何位置执行程序。

```bash
$ cd /etc
$ myprog
The factorial of 5 is 120
```

**窍门**：如果希望子shell也能找到你的程序的位置，一定要记得把修改后的`PATH`环境变量导出：

程序员通常会将单点符也加入`PATH`环境变量。该单点符代表当前目录（参见第3章）。

```bash
$ PATH=$PATH:.
$ cd /home/christine/old_Scripts
$ myprog
The factorial of 6 is 720
```

对`PATH`变量的修改只能持续到退出或重启系统。这种效果并不能一直持续。在下一节中，你会学到如何永久保持环境变量的修改效果。

# 6.6 定位系统环境变量
环境变量在Linux系统中的用途很多。你现在已经知道如何修改系统环境变量，也知道了如何创建自己的环境变量。接下来的问题是怎样让环境变量的作用持久化。

在你登录Linux系统启动一个bash shell时，默认情况下bash会在几个文件中查找命令。这些文件叫作启动文件或环境文件。bash检查的启动文件取决于你启动bash shell的方式。启动bash shell有三种方式：
- 登录时作为默认登录shell
- 作为非登录shell的交互式shell
- 作为运行脚本的非交互shell

下面几节介绍了bash shell在不同方式下的启动文件。

### 6.6.1 登录shell
当你登录Linux系统时，bash shell会作为登录shell启动。登录shell会从以下五个不同的启动文件里读取命令：
- `/etc/profile`
- `~/.bash_profile`
- `~/.bashrc`
- `~/.bash_login`
- `~/.profile`

`/etc/profile`文件是系统上默认的bash shell的主启动文件。系统上的每个用户登录时都会执行这个启动文件。

**说明**：有些Linux发行版使用了可插拔认证模块（Pluggable Authentication Modules, PAM）。在这种情况下，PAM文件会在bash shell启动之前处理，这些文件中可能会包含环境变量。PAM文件包括`/etc/environment`文件和`~/.pam_environment`文件。更多关于PAM的信息可以在[http://linux-pam.org](http://linux-pam.org)中找到。

另外四个启动文件是针对用户的，可根据个人需求定制。我们来仔细看一下各个文件。

#### 1. `/etc/profile` 文件
`/etc/profile`文件是bash shell默认的主启动文件。只要你登录了Linux系统，bash就会执行`/etc/profile`启动文件中的命令。不同的Linux发行版在这个文件里放了不同的命令。在本书所用的Ubuntu Linux系统上，它看起来是这样的：

```bash
/etc/profile: system-wide .profile file for the Bourne shell (sh(1))
and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).

if [ "$PS1" ]; then
  if [ "$BASH" ] && [ "$BASH" != "/bin/sh" ]; then
    # The file bash.bashrc already sets the default PS1.
    PS1='\h:\w\$ '
  fi
  if [ -f /etc/bash.bashrc ]; then
    . /etc/bash.bashrc
  fi
fi

if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
  unset -f pathmunge
fi
```

这个文件中的大部分命令和语法会在第12章及后续章节中具体讲解。每个发行版的`/etc/profile`文件都有不同的设置和命令。例如，在上面所示的Ubuntu发行版的`/etc/profile`文件中，涉及了一个叫作`/etc/bash.bashrc`的文件。这个文件包含了系统环境变量。

但是，在下面显示的CentOS发行版的`/etc/profile`文件中，并没有出现这个文件。另外要注意的是，该发行版的`/etc/profile`文件还在内部导出了一些系统环境变量。

```bash
cat /etc/profile
# System wide environment and startup programs, for login setup
# Functions and aliases go in /etc/bashrc
# It's NOT a good idea to change this file unless you know what you
# are doing. It's much better to create a custom.sh shell script in
# /etc/profile.d/ to make custom changes to your environment, as this
# will prevent the need for merging in future updates.

pathmunge () {
  case ":${PATH}:" in
    *":$1:"*)
      ;;
    *)
      if [ "$2" = "after" ]; then
        PATH=$PATH:$1
      else
        PATH=$1:$PATH
      fi
  esac
}

if [ -x /usr/bin/id ]; then
  if [ -z "$EUID" ]; then
    # ksh workaround
    EUID=`id -u`
    UID=`id -ru`
  fi
  USER="`id -un`"
  LOGNAME=$USER
  MAIL="/var/spool/mail/$USER"
fi

if [ "$EUID" = "0" ]; then
  pathmunge /sbin
  pathmunge /usr/local/sbin
  pathmunge /usr/sbin
else
  pathmunge /usr/local/sbin after
  pathmunge /usr/sbin after
  pathmunge /sbin after
fi

HOSTNAME=`/bin/hostname 2>/dev/null`
if [ -z "$HISTCONTROL" ]; then
  HISTSIZE=1000
  export HISTCONTROL=ignoreboth
else
  export HISTCONTROL=ignoredups
fi
export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL

# By default, we want umask to get set. This sets it for login shell
umask 022

for i in /etc/profile.d/*.sh; do
  if [ -r $i ]; then
    . $i
  fi
done
unset i
unset -f pathmunge
```

这两个发行版的`/etc/profile`文件都用到了同一个特性：`for`语句。它用来迭代`/etc/profile.d`目录下的所有文件。（该语句会在第13章中详述。）这为Linux系统提供了一个放置特定应用程序启动文件的地方，当用户登录时，shell会执行这些文件。在本书所用的Ubuntu Linux系统中，`/etc/profile.d`目录下包含以下文件：

```bash
ls -l /etc/profile.d
total 12
-rw-r--r-- 1 root root 40 Apr 15 06:26 appmenu-gtk-3.0.sh
-rw-r--r-- 1 root root 663 Apr 7 10:10 bash_completion.sh
-rw-r--r-- 1 root root 1947 Nov 22 2013 vte.sh
```

在CentOS系统中，`/etc/profile.d`目录下的文件更多：

```bash
ls -l /etc/profile.d
total 80
-rw-r--r--. 1 root root 1127 Mar 5 07:17 colorls.csh
-rw-r--r--. 1 root root 1143 Mar 5 07:17 colorls.sh
-rw-r--r--. 1 root root 92 Nov 22 2013 cvs.csh
-rw-r--r--. 1 root root 78 Nov 22 2013 cvs.sh
-rw-r--r--. 1 root root 192 Feb 24 09:24 glib2.csh
-rw-r--r--. 1 root root 192 Feb 24 09:24 glib2.sh
-rwxr-xr-x. 1 root root 58 Nov 22 2013 gnome-ssh-askpass.csh
-rwxr-xr-x. 1 root root 70 Nov 22 2013 gnome-ssh-askpass.sh
-rwxr-xr-x. 1 root root 373 Sep 23 2009 kde.csh
-rwxr-xr-x. 1 root root 288 Sep 23 2009 kde.sh
-rw-r--r--. 1 root root 2706 Feb 20 05:44 lang.csh
-rw-r--r--. 1 root root 288 Sep 23 2009 less.csh
-rw-r--r--. 1 root root 108 Feb 7 2007 less.sh
-rw-r--r--. 1 root root 912 Sep 23 2011 qt.sh
-rw-r--r--. 1 root root 97 Apr 5 2012 vim.csh
-rw-r--r--. 1 root root 269 Apr 5 2012 vim.sh
-rw-r--r--. 1 root root 169 May 20 2009 which2.sh
```

不难发现，有些文件与系统中的特定应用有关。大部分应用都会创建两个启动文件：一个供bash shell使用（使用`.sh`扩展名），一个供c shell使用（使用`.csh`扩展名）。

`lang.csh`和`lang.sh`文件会尝试去判定系统上所采用的默认语言字符集，然后设置对应的`LANG`环境变量。

#### 2. `$HOME` 目录下的启动文件
剩下的启动文件都起着同一个作用：提供一个用户专属的启动文件来定义该用户所用到的环境变量。大多数Linux发行版只用这四个启动文件中的一到两个：
- `~/.bash_profile`
- `~/.bashrc`
- `~/.bash_login`
- `~/.profile`

这些文件的具体内容和用途将在后续章节中详细介绍。