L
R
U
f
t
o
e
g
a
n
e
c
r
e
P
45
40
35
30
25
20
15
10
5
0
0
5
25
Number of active days in Nov 2006
10
15
20
30
Figure 4: Active period of URLs sent from at least 20 ASes.
net signatures is signiﬁcantly reduced. Later, these domain-speciﬁc
signatures can be further merged to produce domain-agnostic sig-
natures (see Section 4.2).
3.2 URL Group Selection
After preprocessing, each email might be associated with mul-
tiple groups, as the email may contain multiple URLs pertaining
to different domains. A key question is, which group best charac-
terizes an underlying spam campaign? To address this issue, Au-
toRE explores the bursty property of botnet email trafﬁc. At every
iteration, the Group selector greedily selects the URL group that
exhibits the strongest temporal correlation across a large set of dis-
tributed senders. To quantify the degree of sending time correla-
tion, for every URL group, AutoRE constructs a discrete time sig-
nal S, which represents the number of distinct source IP addresses
that were active during a time window w. The value of the signal
at the n-th window, denoted by Si(n), is deﬁned as the total num-
ber of IP addresses that sent at least one URL in group i in that
window. Intuitively, sharp signal spikes indicate strong correlation,
meaning a large number of IP addresses all sent URLs targeting a
common domain within a short duration. With this signal represen-
tation, we can compute a global ranking of all the URL groups at
each iteration by selecting signals with large spikes. In this paper,
for simplicity, at every iteration we favor the URL group with the
narrowest signal width (breaking tie with the highest peak value).
tures are required to meet the previously deﬁned signature criteria:
“distributed", “bursty", and “speciﬁc".
The “distributed" property is quantiﬁed using the total number of
Autonomous Systems (ASes) spanned by the source IP addresses.
Here, we choose the number of participating ASes rather than the
number of IPs as it is possible for a large company to own a set
of email servers with different IP addresses. In this paper, we pri-
marily focus on detecting large botnets and conservatively require
a signature to be associated with at least 20 ASes. This parameter
is discussed later in Section 8.
We quantify the “bursty" feature using the inferred duration of
a botnet spam campaign. In this paper, we enforce that the set of
matching URLs should be sent within 5 days. As shown in Fig-
ure 4, the majority of URLs groups were sent within 5 days. No-
tice that this step does not discard URL groups even if their send-
ing times are wide spread (>5 days). This is because that each
group could potentially correspond to different spam campaigns,
with each being individually bursty. Our iterative approach can
clearly separate these campaigns and output different signatures.
The “speciﬁc" feature is quantiﬁed using an information entropy
metric pertaining to the probability of a random URL string match-
ing the signature. In the complete URL case, each signature, by
deﬁnition, satisﬁes the "speciﬁc" property since it is a complete
string and can not be more speciﬁc. For polymorphic URLs, we
further discuss this metric in Section 4.3.
When AutoRE successfully derives a URL signature (satisfying
all the three quality criteria), it outputs it as a spam signature. This
signature characterizes the set of matching emails as botnet-based
spam and the originating mail servers as botnet hosts. Note that if
these spam emails contain additional URLs from multiple domains,
those URLs will be removed from the remaining groups before the
Group selector proceeds to select the next candidate group.
Using these three features, generating complete URL based sig-
natures is straightforward: AutoRE considers every distinct URL
in the group to determine whether it satisﬁes these properties, and
then removes the matching URLs from the current group. The re-
maining URLs are further processed to generate regular expression
based signatures.
3.3 Signature Generation and Botnet Identiﬁ-
cation
4. AUTOMATIC URL REGULAR EXPRES-
SION GENERATION
Given a set of URLs pertaining to the same domain, the RegEx
generator returns two types of signatures: complete URL based sig-
natures and regular expression signatures. Complete URL based
signatures are geared towards detecting spam emails that contain
an identical URL string. Regular expression signatures are more
generic and powerful, as they can be used to detect spam emails
that contain polymorphic URLs. In both cases, the generated signa-
In this section, we present a detailed view of the module in Au-
toRE that generates regular expression signatures. The input to the
module is a set of polymorphic URLs from the same Web domain.
The signature generation process involves constructing a keyword-
based signature tree, generating candidate regular expressions, and
ﬁnally evaluating the quality of the generated expressions (signa-
tures) to ensure they are speciﬁc enough.
4.1 Signature Tree Construction
Our method begins by determining a candidate set of substrings
from the pool of all frequent substrings; the candidate set serves
as a basis for regular expression generation. We leverage the well-
known sufﬁx-array algorithm [1] to efﬁciently derive all possible
substrings and their frequencies. To ensure that a keyword is not
too general, we only consider substrings of length at least two.
The key question now is, what combinations of frequent sub-
strings constitute a signature? At a high level, our idea is to start
with the most frequent substring that is both bursty and distributed
(based on the thresholds introduced earlier). We then incremen-
tally expand the signature by including more substrings so as to
obtain a more speciﬁc signature. To this end, AutoRE constructs
a keyword-based signature tree where each node corresponds to a
substring, with the root of the tree set to the domain name. The set
of substrings in the path from the root to a leaf node deﬁnes a key-
word based signature, each associated with one botnet-based spam
campaign.
Initially, there is only the root node corresponding to the domain
string with all the URLs in the group associated to it. Given a parent
node, AutoRE looks for the most frequent substring; if combining
this substring with the set of substrings along the path from the
root satisﬁes the preset AS and sending time constraints, AutoRE
creates a new child node. Consequently, all matching URLs will be
associated with this new node. We repeat this process on the same
parent node using the remaining URLs and popular substrings until
there is no such substring to continue. We then iteratively proceed
to the child nodes and repeat the process.
Figure 5 shows an example signature tree constructed using a
set of 9 URLs 3, all associated with the domain deaseda.info.
Notice that we have two signatures corresponding to nodes N3 and
N4, each deﬁning a botnet spam campaign.
There are two reasons for a tree to generate multiple signatures:
(1) they correspond to different campaigns, hence different signa-
tures, and (2) multiple signatures map to one campaign, but each of
them occurs with enough signiﬁcance to be recognized as different
ones.
4.2 Regular Expression Generation
Given the keyword-based signatures, we now proceed to derive
regular expressions based on them. There are two major steps in-
volved: detailing and generalization. Detailing returns a domain-
speciﬁc regular expression using a keyword-based signature as in-
put. This step encodes richer information regarding the locations
of the keywords, the string length, and the string character ranges
into the target regular expression. In fact, this step is important to
signiﬁcantly increase the quality of URL signatures from the per-
spective of reducing false positive rates. Generalization returns a
more general domain-agnostic regular expression by merging very
similar domain-speciﬁc regular expressions. As we will show in
Section 6.1.4, this step is helpful to increase the coverage of botnet
spam detection.
The detailing process assigns the derived frequent keywords as
ﬁxed anchor points, and then applies a set of predeﬁned rules to
generate regular expressions for the substring segments between
anchor points. The ﬁnal regular expression is the concatenation
of the anchored keywords and segment-based regular expressions.
Each regular expression for a substring segment has the format
C{l1, l2} (in Perl Compatible Regular Expression notation), where
C is the character set, and l1 and l2 are the minimum and maxi-
3We used these 9 URLs for illustration purposes only. In practice,
the number of URLs that match a signature could be much larger.
mum substring lengths. Without loss of generality, we include all
frequently used character sets (e.g., [0-9], [a-zA-Z]) and special
characters (e.g., ’.’, ’@’) according to the URL standard [3]. The
bounds on the substring length are derived using the input URLs.
Notice that the resulting regular expressions are domain-speciﬁc.
Figure 5 shows two example signatures.
The generalization process takes domain-speciﬁc regular expres-
sions and further groups them. The rationale behind this is that we
found scenarios where spammers sign up for many domains, some-
times with one IP address hosting more than 100 domains. If one
domain gets blacklisted, spammers can quickly switch to another.
Although domains are different, interestingly, the URL structures
of these domains are still quite similar, maybe because they use a
ﬁxed set of tools to set up web servers and send out emails. There-
fore, if two regular expressions differ only in the domain name and
substring lengths, we merge them by discarding domains, and tak-
ing the lower bound (upper bound) as the new minimum (maxi-
mum) substring length. In the ﬁrst example, shown in Figure 6,
generalization preserves the keyword /n/?167& and the charac-
ter set [a-zA-Z], but discards domains and adjusts the substring
segment lengths to {9,27}.
4.3 Signature Quality Evaluation
The generalization process may produce overly general signa-
tures. AutoRE quantitatively measures the quality of a signature
and discards signatures that are too general.
Our metric, deﬁned as entropy reduction, leverages information
theory to quantify the probability of a random string matching a
signature. Given a regular expression e, let Be(u) and B(u) de-
note the expected number of bits used to encode a random string
u with and without the signature respectively. The entropy reduc-
tion d(e) is deﬁned as the difference between Be(u) and B(u),
i.e., d(e) = B(u)− Be(u). The entropy reduction d(e) reﬂects on
the probability of an arbitrary string with expected length allowed
by e and matching e, but not encoded using e. We can write this
probability as
P (e) =
2Be(u)
2B(u)
=
1
2B(u)−Be(u)
=
1
2d(e)
Given a regular expression e, its entropy reduction d(e) depends
on the cardinality of its character set and the expected string length.
Intuitively, a more speciﬁc signature e requires fewer bits to en-
code a matching string, and therefore d(e) tends to be larger. In
our framework, AutoRE discards all signatures whose entropy re-
ductions are smaller than a preset threshold (set to 90 in our experi-
ments; viewed another way, this means the probability of a random
1
290 ). For example, based on our
string matching a signature is
metric, a signature AB[1-8]{1,1} is much more speciﬁc than
[A-Z0-9]{3,3} even though they are of the same length.
5. DATASETS AND RESULTS
Our study is based on randomly sampled Hotmail email mes-
sages, excluding those that originated from blacklisted IPs, such as
the ones published by Spamhaus [22]. In particular, the dataset was
collected in November 2006, June 2007, and July 2007, with a to-
tal of 5,382,460 sampled emails (sampling rate 1:25000). All the
email messages in our sample were pre-classiﬁed as either spam or
non-spam by a human user. However, in our experiments, we ig-
nored these classiﬁcation labels while using the AutoRE framework
to generate a list of botnet URL signatures and the corresponding
botnet IP addresses. These labels were used later to evaluate the
false positive rate of results obtained using AutoRE.
u1:  http://deaseda.info/ ego/zoom.html?QjQRP_xbZf.cVQXjbY,hVX
u2: http:// deaseda.info/ ego/zoom.html? giAfS.cVQXjbY,hVX
u3: http://deaseda.info/ ego/zoom.html? RQbWfeVYZfWifSd.cVQXjbY,hVX
u4: http://deaseda.info/ ego/zoom.html? UbSjWcjHC.cVQXjbY,hVX
u5: http://deaseda.info/ ego/zoom.html? VPS_eYVNfS.cVQXjbY,hVX
u6: http://deaseda.info/ ego/zoom.html? QNVRcjgVNSbgfSR.XRW,hVX
u7: http://deaseda.info/ ego/zoom.html? afRZXQ.XRW,hVX
u8: http://deaseda.info/ ego/zoom.html? YcGGA.XRW,hVX
u9: http://deaseda.info/ ego/zoom.html? aeSfLWVYgRIBH.XRW,hVX
U3 = {u6, u7, …, u9}
U4 = {u1, u2, …, u5}
N
1
deaseda.info
U1 = {u1, u2, …, u9}
N
2
/ego/zoom.html?
U 2 = {u1, u2, …, u9}
N
.xrw,hvx
3
N
4
.cvqxjby,hvx
Figure 5: Example input URLs and the keyword-based signature tree constructed by AutoRE.
/ego/zoom.html?*{5,16}.xrw,hvx
/ego/zoom.html?*{5,16}.cvqxjby,hvx
http://www.mezir.com/n/?167&[a-zA-Z]{9,25}
http://www.aferol.com/n/?167&[a-zA-Z]{10,27}
http://www.bedremf.com/n/?167&[a-zA-Z]{10,19}
http://www.mokver.www/n/?167&[a-zA-Z]{11,23}
http://arfasel.infoh/hums/jasmine.html?*{5,15}.[a-zA-Z]{3,7},hvx
http://apowefe.info/hums/jasmine.html?*{4,16}.[a-zA-Z]{3,7},hvx
http://carvalert.info/hums/jasmine.html?*{5,18}.[a-zA-Z]{3,7},hvx
http://*/n/?167&[a-zA-Z]{9,27}
http://*/hums/jasmine.html?*{4,18}.[a-zA-Z]{3,7},hvx
Figure 6: Generalization: Merging domain-speciﬁc regular expressions into domain-agnostic regular expressions.
Using the three months input data, AutoRE identiﬁed a total of
7,721 botnet-based spam campaigns. These campaigns together
include 580,466 spam messages, sent from 340,050 distinct botnet
host IP addresses spanning 5,916 ASes. Table 1 shows the statis-
tics for the different months. We use CU to represent the set of
complete URL based signatures and RE to denote the set of reg-
ular expression signatures. From the table, we observe that the
majority (70.3-79.6%) of these campaigns belong to the CU cate-
gory. About 20.4-29.7% of the campaigns have adopted polymor-
phic URLs. Comparing results across three months, we can clearly
see a steady upward trend in the number of the identiﬁed campaigns
– we see a 100% increase in the number of campaigns identiﬁed in
July 2007 when compared to the number in Nov 2006. Conse-
quently, the spam volume increased signiﬁcantly by around 50%
from Nov 2006 to June/July 2007. Interestingly, the total number
of botnet IPs per month does not increase proportionally, suggest-
ing that each botnet host is used more aggressively now.
The distribution of botnet size in terms of the number of unique
IP addresses participating in a campaign is shown in Figure 7(a).
We did not see any substantial difference in the shape of the distri-
bution for the various months. Most botnets have tens to hundreds
of IP addresses, with the largest having 1384 IPs. Since our iden-
tiﬁcation used only sampled emails, the reported botnet sizes are
expected to be much smaller than the actual sizes.
For the RE category, recall that AutoRE merges domain-speciﬁc
regular expressions into domain-agnostic regular expressions. As
shown in Figure 7(b), this step reduced the number of regular ex-
pressions by 4 to 19 times.
In particular, for the month of July
2007, this grouping merged 717 regular expressions to 39. From
these results, we hypothesize that spammers very likely used a lim-
ited number of automatic spam generation programs for generating
polymorphic URLs.
We further use the generated signatures to examine how many of
our sampled emails were sent from botnet hosts. As shown in Fig-
ure 7 (c), around 16-18% of spam emails match the derived URL
signatures. Note that the spam campaigns we captured are more
likely large ones, which have a higher probability of being sampled
initially and subsequently being identiﬁed by AutoRE. Hence, we
expect this 16-18% to be the lower bound on the botnet spam emails
received. In the two next sections, we focus on evaluating our re-
Source
Sampled
Emails
(w/o label)
Verification: group correctness (Section VI.C)
Sampled 
Emails 
(with  label)
•Similarity of 
destination website
AutoRE
Botnets and 
their IPs
URL 
signatures
IP quality study (Section VI.B)
Signature quality study (Section VI.A)
Mail 
server log
•Bad sending history
•Total spam volume
Sampled 
Emails 
(with  label)
•False positive rate
•Ability to detect future spam
•Comparison to frequent keyword
•Effect of domain generalization
Figure 8: Overview of experiments and evaluation.
sults (URL signatures and botnet IP addresses) and also analyze the
botnet distribution and sending patterns.
6. BOTNET VALIDATION
Ideally, the AutoRE identiﬁcation results should be validated by
comparing them against known URL signatures and botnet host
identities. However, in the absence of such information, our vali-
dation is based on the following three methods (Figure 8 illustrates
the overall evaluation setup):
We ﬁrst study the quality of the extracted URL signatures. We
used the human classiﬁed labels to compute the spam detection
false positive rate. To better understand the effectiveness of using
signatures for future spam detection, we performed cross-month
evaluation by applying signatures generated in a previous month
to emails received in a later month. Our experiments also demon-
strated the importance of having regular expression signatures.
Second, we examined whether the identiﬁed botnet hosts were
indeed spamming servers – to this end, we used the Hotmail server
log that records the sending history of all email servers that com-
municate with Hotmail over time. This log includes the email vol-
ume and the spam ratio 4 of each server on a daily basis. In this
paper, we use these statistics to evaluate the identiﬁed botnet hosts.
4The spam ratio was computed using the existing spam ﬁltering
system conﬁgured by Hotmail. The current ﬁlter leverages both
email content and email server sending history for spam detection.
Month
Num. of spam campaigns
Num. of ASes
Num. of botnet IPs
Num. of spam emails
Total botnet IPs
Nov 2006
June 2007
July 2007
CU
1,229
3,176
88,243
118,613
RE
519
1,398
23,316
26,897
CU
1835
4,495
113,794
208,048
RE
591
1,906
19,798
26,637
CU
2826
4,141
85,036
159,494
RE
721
1,841
29,463
40,777
100,293
131,234
113,294