### Key Management and Encryption Service Security

#### Key-Handle Mapping
The handle-to-key map remains constant. We do not model key deletion operations, as their inclusion does not affect the proof rationale but adds unnecessary complexity to the invariants.

#### KMS Oracles
The KMS oracles are defined as follows:
```plaintext
type KMS_Oracles = {
  proc newOp(badOp: bool) : (Option[OpId], Option[OpSk])
  proc requestAuthorization(request: Request, opid: OpId) : Option[Authorization]
  proc newHst() : HstId
  proc installInitialTrust(hstid: HstId, tk: Token) : bool
  proc installUpdatedTrust(hstid: HstId, tk: Token) : bool
  proc newHSM() : HId
  proc newToken(hid: HId, new: Trust) : Option[Token]
  proc updateTokenTrust(hid: HId, newTrust: Trust, auth: Authorizations, tk: Token) : Option[Token]
  proc addTokenKey(hid: HId, hdl: Handle, tk: Token) : Option[Token]
}
```
**Figure 7. KMS TkManage and TkNewKey Operations**

#### TkReveal Operation
The `TkReveal` operation is a modeling artifact used to make explicit that any cryptographic API will contain a procedure to recover keys within tokens for providing cryptographic services. This serves two purposes:
1. To define what correctness of an API means.
2. To obtain keys managed by the API in security games, which may involve giving keys to the adversary to model security breaches or using them to construct challenges.

**Relation to the DMP**
In Figure 7, we show the EasyCrypt declarations for `TkNewKey` (addTokenKey) and `TkManage` (other proc declarations) for the DMP. `addTokenKey` takes the identity of the HSM to add a key to the token.

**Token Management (TkManage)**
- Procedures to create new genuine operators (both honest and dishonest).
- Procedures to create genuine hosts and HSMs.
- `requestAuthorization` models actions of honest operators signing attestation requests for genuine entity identities.
- Two procedures for hosts: installing initial trust and updating installed trust.
- `newToken` and `updateTokenTrust` model actions of HSMs when creating empty tokens or updating trusts based on authorizations issued by operators.

**Model Assumptions**
- The states of genuine HSMs, operators, and hosts are disjoint.
- Communication between entities must be explicitly performed using this API.

**TkReveal in AWS KMS**
In our model, `TkReveal` is the operation that asks a genuine HSM to unwrap a domain token and return the key for a specific handle. Note that `TkReveal` is not an actual operation in the DMP; it is only used as part of the proof.

**Correctness**
A natural requirement for key management APIs is reliable storage of secret keys, subject to API-specific restrictions. We introduce a predicate `valid` over traces of calls to `TkManage` and `TkNewKey`, which indicates whether a reveal operation should successfully return a key. In the AWS KMS model, `valid` requires that the command is placed on a genuine HSM and the trust of the domain token is installed in a genuine host.

**Defining Security of Encryption Services**
Key management APIs like the DMP are used to build cryptographic services. We follow the Universal Composability (UC) approach to formalize this notion, focusing on a service that provides authenticated encryption on client-chosen payloads.

**Ideal Functionality**
- **External Interface**: Accessible to an arbitrary environment \( Z \).
- **Adversarial Interface**: Captures the influence of a malicious insider adversary \( A \).

**Execution Control**
- The execution is controlled by \( Z \), which may interact with the outward-facing encryption service interface or pass control to \( A \).
- The goal of \( Z \) is to distinguish the real-world encryption service from an ideal authenticated encryption functionality.
- \( A \) is an insider colluding with \( Z \) to achieve this goal.

**AEAD Functionality**
- For each key handle \( \text{hdl} \), calls to `Enc(hdl, msg, ad)` return encryptions of a fixed constant instead of `msg`.
- `Dec(hdl, cph, ad)` returns the original `msg` if and only if `cph` was previously given to \( Z \) as the result of a call to `Enc(hdl, msg, ad)`.

**Real-World and Ideal-World Experiments**
- **Functionality**: Tracks a list of corrupted key handles and a list of key handles used in encryption and decryption.
- **Real World**:
  - `New(hdl)`: Passes control to \( A \), indicating that \( Z \) requested the generation of a new domain key.
  - `Enc(hdl, msg, ad)`: Passes control to \( A \). If `valid(trace, tk, hdl, cmd)` holds and the key with `hdl` has not been corrupted by \( A \), the functionality computes `sk ← TkReveal(tk, hdl, cmd)` and `cph ← E(sk, msg, ad)`, returning the result to \( Z \). Otherwise, an error symbol is returned.
  - `Dec(hdl, cph, ad)`: Passes control to \( A \). If `valid(trace, tk, hdl, cmd)` holds and the key with `hdl` has not been corrupted by \( A \), the functionality computes `sk ← TkReveal(tk, hdl, cmd)` and `msg ← D(sk, cph, ad)`, returning the result to \( Z \). Otherwise, an error symbol is returned.

- **Ideal World**:
  - The interface offered to \( Z \) behaves identically to the real world, with the following exceptions:
    - No change in `New(hdl)`.
    - `Enc(hdl, msg, ad)`: Passes control to \( A \). If `valid(trace, tk, hdl, cmd)` holds, the functionality updates the table \( T \) with the tuple \((hdl, cph, ad)\) to `msg`.

This structured approach ensures that the text is clear, coherent, and professional, making it easier to understand the key concepts and details.