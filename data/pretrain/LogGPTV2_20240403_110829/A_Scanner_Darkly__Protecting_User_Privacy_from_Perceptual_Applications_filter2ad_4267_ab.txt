Inform the user. To help the user balance utility and
privacy, our system includes a trusted DARKLY console. For
applications that operate solely on opaque references, this
window is blank. For applications that use declassiﬁers to
access certain input features, it shows to the user the outputs
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:08 UTC from IEEE Xplore.  Restrictions apply. 
of the privacy transforms being used by the application at
any point in time (Section VIII).
The DARKLY console window also contains a privacy dial
that goes from 0 to 11. By adjusting the dial, the user can
increase or decrease the degree of privacy transformation.
the setting of 0, DARKLY provides signiﬁcant
Even at
privacy protection;
in particular, applications are always
blocked from directly accessing raw image data.
Be ﬂexible. In rare cases, applications may need to execute
arbitrary code on raw inputs. For example, one of our
benchmark applications runs the eigenface algorithm [26]
to match a face against a database (see Section VI-F).
For such applications, DARKLY provides a special ibc
language inspired by GNU bc [1]. Applications can supply
arbitrary ibc programs which DARKLY executes internally.
These programs are almost pure computations and have no
access to the network, system calls, or even system time
(Section VI-F). Furthermore, DARKLY restricts their output
to 32 bits, thus blocking high-bandwidth covert channels.
VI. IMPLEMENTATION
The prototype implementation of DARKLY consists of
approximately 10,000 lines of C/C++ code, not counting the
ported ibc compiler and VM.
A. OpenCV
OpenCV provides C, C++, and Python interfaces [20]
on Windows, Linux, MacOS, iOS and Android. OpenCV
is also the default vision library of the Robot Operating
System (ROS), a popular platform that runs on 27 robots
ranging from the large Willow Garage PR2 to the small
iRobot Create or Lego NXT. OpenCV supports diverse input
sensors including webcams, Kinects and smart cameras like
VC nano 3D1 or PicSight Smart GigE.2
The OpenCV API has more than 500 functions that
applications—ranging from interactive art to robotics—use
for image-processing and analysis tasks. Our prototype cur-
rently supports 145 of these functions (see Section IX for
a survey of OpenCV usage in existing applications). Our
design exploits both the richness of this API and the fact
that individual OpenCV functions encapsulate the minutiae
of image processing, relieving applications of the need to
access raw image data and helping DARKLY interpose pri-
vacy protection in a natural way. That said, the architecture
of DARKLY is not speciﬁc to OpenCV and can be applied
to any perceptual platform with a sufﬁciently rich API.
OpenCV comprises several components: libcxcore imple-
ments internal data structures, drawing functions, clustering
algorithms, etc.; libcv – image processing and computer
vision tasks such as image transformations, ﬁlters, motion
analysis, feature detection, camera calibration, and object
1http://www.vision-components.com/en/products/smart-cameras/
vc-nano-3d/
2http://www.leutron.com/cameras/smart-gige-cameras/
detection; libhighgui – functions for creating user interfaces;
libml – machine learning algorithms; libcvaux – auxiliary
algorithms such as principal component analysis, hidden
markov models, view morphing, etc.
OpenCV deﬁnes data structures for image data (IplImage,
CvMat, CvMatND, etc.), helper data structures (CvPoint,
CvRect, CvScalar, etc.), and dynamic data structures (CvSeq,
CvSet, CvTree, CvGraph, etc.). OpenCV also provides
functions for creating, manipulating, and destroying these
objects. For example, cvLoadImage creates an IplImage
structure and ﬁlls it with the image’s pixels and meta-data,
while cvQueryFrame fetches a frame from a camera or video
ﬁle and creates an IplImage structure with the frame’s pixels.
The OpenCV API thus helps developers to program their
applications at a higher level. For example, the following 8
lines of C code invert the image and display it to the user
until she hits a key:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
IplImage* img = 0;
// load an image
img=cvLoadImage(argv[1]);
// create a window
cvNamedWindow("mainWin", CV_WINDOW_AUTOSIZE);
cvMoveWindow("mainWin", 100, 100);
// invert the image
cvNot(img, img);
// show the image
cvShowImage("mainWin", img );
// wait for a key
cvWaitKey(0);
// release the image
cvReleaseImage(&img );
OpenCV permits only one process at a time to access the
camera, thus DARKLY does not allow concurrent execution
of multiple applications.
B. Opaque references
To block direct access to raw images, DARKLY replaces
pointers to image data with opaque references that cannot
be dereferenced by applications. Applications can still pass
them as arguments into OpenCV functions, which derefer-
ence them internally and access the data.
To distinguish opaque references and real pointers,
DARKLY exploits the fact that the lower part of the address
space is typically reserved for the OS code, and therefore
all valid pointers must be greater than a certain value. For
example, in standard 32-bit Linux binaries, all valid stack
and heap addresses are higher than 0x804800. The values
of all opaque references are below this address.
DARKLY cannot simply return an opaque reference in lieu
of a pointer to an OpenCV object. Some existing, benign
applications do dereference pointers, but only read the meta-
data stored in the object, not the image data. For example,
consider this fragment of an existing application:
surfer = cvLoadImage("surfer.jpg",
CV_LOAD_IMAGE_COLOR);
...
size = cvGetSize(surfer);
353
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:08 UTC from IEEE Xplore.  Restrictions apply. 
/* create an empty image, same size, depth and
mprotect(page, getpagesize(), PROT_WRITE|
result = cvCreateImage(size, surfer->depth, surfer
vptr[vt_index] = (int)our_func;
channels of others */
->nChannels);
PROT_READ))
}
Here, surfer is an instance of IplImage whose meta-data
includes the number of channels and the depth of the image.
Even though this code does not access the pixel values,
it would crash if DARKLY returned an opaque reference
instead of the expected pointer to an IplImage object.
DARKLY exploits the fact that most OpenCV data struc-
tures for images and video include a separate pointer to the
actual pixel data. For example, IplImage’s data pointer is
stored in the imageData ﬁeld; CvMat’s data pointer is in
the data ﬁeld. For these objects, DARKLY creates a copy of
the data structure, ﬁlls the meta-data, but puts the opaque
reference in place of the data pointer. Existing applications
can thus run without any modiﬁcations as long as they do
not dereference the pointer to the pixels.
C. Interposition
To support unmodiﬁed applications, DARKLY must in-
terpose on their calls to the OpenCV library. All of the
applications we tested use the dynamically linked version
of OpenCV. We implemented DARKLY’s interposition layer
as a dynamically loaded library and set the LD PRELOAD
shell variable to instruct Linux’s dynamic linker to load it
before OpenCV. The functions in the interposition library
have the same names as the OpenCV functions, thus the
linker redirects OpenCV calls made by the application.
This approach works for C functions, but there are several
complications when interposing on C++ functions. First, the
types of the arguments to DARKLY’s wrapper functions must
be exactly the same as those of their OpenCV counterparts
because the C++ compiler creates new mangled symbols
based on both the function name and argument types.
The second, more challenging issue is C++ virtual func-
tions. Because their bindings are resolved at runtime, they
are not exported as symbols for the linker to link against.
Instead, their addresses are stored in per-object vtables. To
interpose on calls to a virtual function, DARKLY overrides
the constructor of the class deﬁning the function. The new
constructor overwrites the appropriate entries in the vtables
of newly created objects with pointers to DARKLY wrappers
instead of the genuine OpenCV functions. The formats of
objects and vtables are compiler-dependent: for example,
GCC stores the vtable address in the object’s ﬁrst 4 bytes.
Our code for hooking vtables is as follows:3
extern "C" void patch_vtable(void *obj, int
vt_index, void *our_func) {
int* vptr = *(int**)obj;
// align to page size:
void* page = (void*)(int(vptr) & ˜(getpagesize()
-1));
// make the page with the vtable writable
The vt index parameter speciﬁes the index of the vtable
entry to be hooked. GCC creates vtable entries in the order
of the virtual function declarations in the class source ﬁle.
Dispatching OpenCV functions. For each call made by an
application to an OpenCV function, the interposition library
must decide whether to execute it within the application or
forward it to the trusted DARKLY server running as a sepa-
rate “user” on the same device (only this server has access
to camera inputs). To complicate matters, certain OpenCV
functions accept variable-type arguments, e.g., cvNot accepts
either IplImage, or CvMat. OpenCV detects the actual type
at runtime by looking at the object’s header.
After intercepting a call
to an OpenCV function,
the
interposition library determines the type of each argument
and checks whether it contains an opaque reference (the
actual check depends on the object’s type). If there is at
least one argument with an opaque reference, executing
the function requires access to the image. The interposition
library marshals the local arguments and opaque references,
and forwards the call to DARKLY for execution.
If none of the arguments contain an opaque reference,
the function does not access the image and the interposition
library simply calls the function in the local OpenCV library.
D. Privacy transforms
For
to image
that need access
to detect motion,
fea-
applications
tures—for example,
track certain ob-
jects, etc.—DARKLY provides declassiﬁer functions. Our
prototype includes the following declassiﬁers: cvMoments
returns moments, cvFindContours – contours, cvGoodFea-
turesToTrack – sets of corner points, cvCalcHist – pixel
histograms, cvHaarDetectObjects – bounding rectangles for
objects detected using a particular model (DARKLY restricts
applications to predeﬁned models shipped with OpenCV),
cvMatchTemplate – a map of comparison results between
the input image and a template, cvGetImageContent – image
contents (transformed to protect privacy).
Declassiﬁer
cvMoments
cvFindContours
cvGoodFeaturesToTrack
cvCalcHist
cvHaarDetectObjects
cvMatchTemplate
cvGetImageContent
Privacy transform
Sketching
Sketching
Increasing feature threshold
Sketching
Generalization
Thresholding match values
Thresholding binary image
3Cf. http://www.yosefk.com/blog/machine-code-monkey-patching.html
TRANSFORMS USED FOR EACH DARKLY DECLASSIFIER.
Table I
354
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:08 UTC from IEEE Xplore.  Restrictions apply. 
Declassiﬁers apply an appropriate privacy transform (see
Section VII) to the input, as shown in Table I. For example,
cvGetImageContent returns a thresholded binary represen-
tation of the actual image. Furthermore, these outputs are
displayed on the DARKLY console to inform the user.
E. Trusted services
Trusted services in DARKLY enable the application to
send data to the user without actually “seeing” it.
Trusted display. The trusted display serves a dual purpose:
(1) an application can use it to show images to which it
does not have direct access, and (2) it shows to the user
the privacy-transformed features and objects released to the
application by declassiﬁers (see Section VIII).
We assume that the OS blocks the application from read-
ing the contents of the trusted display via “print screen” and
similar system calls. These contents may also be observed
and recaptured by the device’s own camera. We treat this
like any other sensitive item in the camera’s ﬁeld of vision
(e.g., contents of an unrelated computer monitor).
To enable applications to display images without access
interpose on HighGUI,
to their contents, DARKLY must
OpenCV’s user interface (UI) component [13]. HighGUI is
not as extensive as some other UI libraries such as Qt, but
the general principles of our design are applicable to any UI
library as long as it is part of the trusted code base. Among
other things, HighGUI supports the creation and destruction
of windows via its CvNamedWindow and CvDestroyWindow
functions. Applications can also use cvWaitKey to receive
keys pressed by the user, cvSetMouseCallback to set custom
callback functions for mouse events, and cvCreateTrackbar
to create sliders and set custom handlers.
The interposition library forwards calls to any of these
functions to DARKLY. For functions like CvNamedWindow,
DARKLY simply calls the corresponding OpenCV func-
tion, but for the callback-setting functions such as cvSet-
MouseCallback and cvCreateTrackbar, DARKLY replaces
the application-deﬁned callback with its own function. When
the DARKLY callback is activated by a mouse or tracker
event, it forwards these events to the interposition library,
which in turns invokes the application-deﬁned callback.
User input may be privacy-sensitive. For example, our
benchmark OCR application recognizes characters drawn by
the user using the mouse cursor. DARKLY replaces the actual
mouse coordinates with opaque references before they are
passed to the application-deﬁned callback.
HighGUI event handling is usually synchronous:
the
application calls cvWaitKey, which processes pending
mouse and tracker events and checks if any key has
been pressed. This presents a technical challenge because
most application-deﬁned callbacks invoke multiple OpenCV
drawing functions. If callback interposition is implemented
synchronously, i.e., if the DARKLY callback handler for-
wards the event to the application-deﬁned callback and waits
for it to ﬁnish, the overhead of interposition (about 9%
per each call forwarded over an interprocess socket, in our
experiments) increases linearly with the number of OpenCV
functions invoked from the application-deﬁned callback. In
practice, this causes the OpenCV event buffer to overﬂow
and start dropping events.
Instead, our callback handler runs in a separate thread
in the DARKLY server. The interposed callbacks forward
GUI events asynchronously to a thread in the interposition
library, which then invokes the application-deﬁned callbacks.
Because most OpenCV functions are not thread-safe, we
serialize access with a lock in the interposition library.
void on_mouse( int event, int x, int y, int flags,
void* param ) {
...
cvCircle(imagen, cvPoint(x,y), r, CV_RGB(red,
green,blue), -1, 4, 0);
// Get clean copy of image
screenBuffer=cvCloneImage(imagen);
cvShowImage( "Demo", screenBuffer );
...
}
}
int main(int argc, char** argv ) {
...
cvSetMouseCallback("Demo",&on_mouse, 0 );
for (;;) { ... c = cvWaitKey(10); ... } }
Listing 2. Sample callback code.
Trusted storage. To store images and video without ac-
cessing their contents, applications can invoke cvSaveImage
or cvCreateVideoWriter. The interposition library forwards
these calls to DARKLY, which redirects them to system-
conﬁgured ﬁles that are owned and accessible only by the
user who is running DARKLY. Dropbox or Google Drive can
be mounted as (user-controlled) remote ﬁle systems.
With this design, an application cannot store data into its
own ﬁles, while standard OS ﬁle permissions block it from
reading the user’s ﬁles.
F. Support for application-provided code
Even though the OpenCV API is very rich, some ap-
plications may need to run their own computations on
raw images rather than chain together existing OpenCV
functions. DARKLY provides a special-purpose language that
application developers can use for custom image-processing
programs. DARKLY executes these programs inside the
library on the true image data (as opposed to privacy-
preserving representations returned by the declassiﬁers), but
treats them as untrusted, potentially malicious code. Isolating
arbitrary untrusted programs is difﬁcult, but our design takes
advantage of the fact that, in our case, these domain-speciﬁc
programs deal solely with image processing.
The DARKLY language for application-supplied untrusted
computations is called ibc. It is based on the GNU bc
language [1]. We chose bc for our prototype because it (1)
355
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:08 UTC from IEEE Xplore.  Restrictions apply. 
supports arbitrary numerical computations but has no OS
interface, (2) there is an existing open-source implementa-
tion, and (3) its C-like syntax is familiar to developers. ibc
programs cannot access DARKLY’s or OpenCV’s internal
state, and can only read or write through the DARKLY
functions described below. They do not have access to the
network or system timers, minimizing the risk of covert
channels, and are allowed to return a single 32-bit value.4
ibc compiler. The GNU bc compiler takes a source ﬁle
as input, generates bytecode, and executes it in a bytecode
VM. DARKLY cannot pay the cost of bytecode generation
every time an application executes the same program (for
example, for each frame in a video). Therefore, we separated
the bytecode generator and the VM.
DARKLY adds a bcCompile function to the OpenCV API.
It takes as input a string with ibc source code and returns a
string with compiled bytecode. DARKLY also adds a cvExe-
cuteUntrustedCode function, which takes a bytecode string
and pointers to OpenCV objects, executes the bytecode on
these objects, and returns a 32-bit value to the application.
The latter required a VM modiﬁcation because GNU bc
does not allow the main program to return a value.
To support computations on images and matrices,
DARKLY adds iimport and iexport functions. iimport takes
the id of an OpenCV object (i.e., the order in which it was
passed to cvExecuteUntrustedCode), x and y coordinates,
and the byte number, and returns the value of the requested
byte of the pixel at the x/y position in the image. Similarly,
iexport lets an ibc program to set pixel values.
Using custom ibc programs. To illustrate how to write
custom image-processing code in ibc, we modiﬁed an
existing application that inverts an image by subtracting each
pixel value from 255 (this can be done by calling OpenCV’s
cvNot function, but this application does not use it):
img = cvLoadImage(argv[1], 1);
data = (uchar *)img->imageData;
// invert the image
for(i=0;iheight;i++)
for(j=0;jwidth;j++)
for(k=0;kheight, img->width);
4The current DARKLY prototype allows an application to gain more
information by invoking ibc programs multiple times, but it is easy to
restrict the number of invocations if needed.
bc_bytecode = bcCompile(bc_invert_code);
ret = cvExecuteUntrustedCode(bc_bytecode, img, 0,
0);
Listing 4. Using ibc code for inverting an image.
The iimport/iexport interface can also be used to access
any 1-, 2- or 3-D array. For example, we took an existing
face recognition application (see Section IX) and wrote
an ibc program to ﬁnd the closest match between the
input face’s eigen-decomposition coefﬁcients computed by
cvEigenDecomposite and a dataset of faces. Running this
program inside DARKLY allows the application to determine
whether a match exists without access to the actual eigen-
decomposition of the input face. The code is shown below.
int findNearestNeighbor( const Eigenface& data,
float * projectedTestFace ) {
double leastDistSq = 999999999; //DBL_MAX;
int iNearest = 0;
for( int iTrain = 0; iTrain data.
fl[iTrain * data.nEigens + i];
distSq += d_i * d_i / data.eigenValMat
->data.fl[i]; }
if( distSq < leastDistSq ) {
leastDistSq = distSq;
iNearest = iTrain; } }
return iNearest;
}
cvEigenDecomposite(image,
data.nEigens,
&(*( data.eigenVectVec.begin())),
0, 0, data.pAvgTrainImg,
projectedTestFace);