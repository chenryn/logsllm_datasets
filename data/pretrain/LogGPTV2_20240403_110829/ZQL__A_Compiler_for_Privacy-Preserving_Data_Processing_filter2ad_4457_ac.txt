|
sample | random | div
|
*G |=G| expG
|
ˆe : G∗ ˆG → GT
|
extend | ﬁnalize
|
keygen | sign | verify
|
| mapP | mapV
foldP | foldV
|
::= . . .
num | x opening | x rand
|
eltG | x ox commitment
|
hash
|
tagi | ski | vki
|
Figure 3: ZQL internal constructs
Expressions
static assertion
Operators
constants
exponents (mod q)
group operations
EC bilinear form
cryptographic hash
plain signatures
translated iterators
Types
exponents (mod q)
group elements
cryptographic hash
plain signatures
enables us to reason about code in a simple, domain-
speciﬁc language. To this end, Figure 3 supplements
the source language of Figure 2 with the types and op-
erators for expressing cryptographic operations. Expres-
sions are extended with assert, used in the shared trans-
lation to embed proof obligations. As an invariant, all
asserted equations ϕ must hold at runtime. We have
types and operations for integers modulo q (Fq, written
num), for group elements (eltG), and for bitstrings, and
more speciﬁc sub-types to keep track of their usage. For
instance, hash is the sub-type of bitstrings representing
cryptographic hashes, and xopening is a sub-type of num
tracking openings generated for the secret value x. In our
presentation, we use standard abbreviated forms for their
operations; for instance we often omit group parameters,
writing gx for expG g x.
Setup and Key Generation The abstract setup S pro-
duces global parameters χ supplied by our cryptographic
runtimes, including q, the prime order of G, ˆG, and GT ;
and independent, random generators g, h, (Ri)i=0..n, S,
Z in G; and ˆg in ˆG. Its ﬁxed code is provided by our
cryptographic libraries.
We use DLT ⊆ 0..(cid:29) − 1 to denote the subset of data
sources that sign lookup table. The key generation
Ki is deﬁned as keygen χ when τi is a scalar or a ta-
ble (i /∈ DLT ), and as the CL-key generation let sk =
sample() in sk, ( ˆg)sk when τi is a lookup table (i ∈ DLT ).
The data source code Di is explained below, as we dis-
cuss these two representations.
Shared Translation We extend the source query with
openings and commitments, but not yet with the corre-
sponding proof randomness and responses.
The main difﬁculty of the translation is to select cryp-
tographic mechanisms, and notably intermediate com-
mitments, to run the private computation: for every pri-
vate sub-expression, our compiled protocol may rely on
zero, one, or more Pedersen openings and commitments,
and it may allocate some proof randomness or not.
In this presentation, for simplicity, we give a formal
translation that assumes that all source private integer
variables are handled uniformally, with a commitment in
the same group, sharing the same bases, and (later) with
a proof randomness for the secret and for its opening.
Figure 4 and 5 show how we translate types and expres-
sions, respectively, in this special case. We discuss our
general, more efﬁcient compilation scheme below.
A source expression is public in a typing environment
when all its free variables have public types. The trans-
lation leaves public types (1) and expressions (3) un-
changed. The translation of a private integer expression
is a triple of an integer for the source value, its opening,
and its commitment, with the types given on line (2).
Fresh commitments Our compilation rules may require
openings and commitments on their arguments, and may
not produce openings and commitments on their re-
sults. Our compiler attempts to minimize those cases.
Nonetheless, assuming for instance that we need a com-
mitment for z, we produce it on demand, using the ex-
pression abbreviation Commit z below
Commit z (cid:25)=
let oz : z opening = sample() in
let Cz : zoz commitment = gz∗G hoz in
assert Cz = gz∗G hoz;
z,oz,Cz
The translation is compositional, as can be seen on
lines (4,5,6) in the ﬁgure. For instance, we translate let
expressions by translating their two sub-expressions, and
we translate source maps to maps that operate on their
translated arguments.
The translation assumes prior rewriting of the source
query into simpler sub-expressions. For instance, to
compile the discriminant query of §2, we ﬁrst introduce
intermediate variables for the private product and the de-
classiﬁcation, rewriting expression ↓ (z∗z−4∗x∗y) into
ed (cid:25)= let p = z∗ z in let d = p− 4∗ x∗ y in ↓ d.
As a sanity check, our translation preserves typing, in
an environment extended with the constants used in our
cryptographic libraries; variants of this lemma with more
precise reﬁnement types for the prover and veriﬁer trans-
lation can be used to verify their privacy and integrity.
Lemma 1 (Typing the shared translation) Let Γ0 (cid:25)=
g,h,Z,R0, . . .R n,S : eltG, ˆg, (pki)i∈DLT : elt ˆG. If Γ (cid:22) e : ρ,
then Γ0, [[Γ]] (cid:22) [[Γ (cid:22) e]] : [[ρ]].
Next, we explain and illustrate the base cases of the
shared translation on private expressions.
USENIX Association  
22nd USENIX Security Symposium  169
7
[[x : τ{ϕ}]] = x : τ{ϕ} when τ is public;
otherwise:
[[x : int{ϕ}]] = x : int{ϕ},
ox : x opening,
Cx : x ox commitment
(1)
(2)
[[ρ table]] = [[ρ]] table,s : tag
[[ρ lookuptable]] = (ρ,σ ) table
σ = e : num,v : num,A : eltG
[[ε]] = ε
[[x : τ{ϕ},ρ]] = [[x : τ{ϕ}]], [[ρ]]
Figure 4: Shared translation of types and environments
Expressions afﬁne in private variables are translated
by supplementing the expression with a linear expres-
sion on openings and an homomorphic product of com-
mitments (7); we easily check that the resulting triple
(z,oz,Cz) is such that Cz = gz ∗G hoz. Note that the public
constant a0 is not included in the opening computation.
Expressions polynomial in private variables are trans-
lated using an auxiliary representation equation for every
product of private expressions, depending on the avail-
ability of openings and commitments—see translation
rule (8). To illustrate afﬁne and quadratic expressions,
let us translate the discriminant query θ → ↓ (ed) where
the source environment θ = x : int pub,y : int,z : int spec-
iﬁes that x is public, whereas y and z are private. By
deﬁnition, the translated environment [[θ ]] is
x : int pub,
y : int,oy : y opening,Cy : y oy commitment,
z : int,oz : z opening,Cz : z oz commitment
and, from the translation invariant, we already know that
Cy =G gyhoy and Cz =G gzhoz. Applying rules (4), (8), (7),
and (10) and inlining the deﬁnition of Commit we arrive
at the shared translation
let p, op , Cp =
let p = z∗z in
let o(cid:26) = oz∗ z in
assert 1 = (Cz)z∗G g−p∗G h−o(cid:26);
let op = sample() in
let Cp = gp∗G hop in
assert Cp = gp∗G hop;
(p, op, Cp)
let d, od , Cd =
(E1)
(E2)
)
(p− 4∗ x∗ y), (op− 4∗ x∗ oy), (Cp ∗C−4∗x
y
↓ d
and we easily check that Cd is a commitment to z2 − 4xy
with opening op−4x∗oy. The code of the shared transla-
tion makes explicit the two representation equations for
the private multiplication, presented more abstractly at
the beginning of §5. Anticipating on the next stages of
(3)
(4)
(5)
(6)
(9)
[[Γ (cid:23) e]] = e when e is public
[[Γ (cid:23) x]] = [[Γ(x)]]
otherwise
[[Γ (cid:23) let ρ = e in e0]] =
[[Γ (cid:23) map (ρ → e) T ]] =
let [[ρ]] = [[Γ (cid:23) e]] in [[Γ,ρ (cid:23) e0]]
map ([[ρ]] → [[Γ,ρ (cid:23) e]]) [[Γ (cid:23) T ]]
where Γ(T ) = ρ table and Γ,ρ (cid:23) e : ρ(cid:26)
[[Γ (cid:23) fold (a : τ,ρ → e) a T ]] =
[[Γ (cid:23) a]] [[Γ (cid:23) T ]]
i=1 ai ∗ xi,
G,i=1(Cxi )ai
fold ([[a : τ,ρ]] → [[Γ,a : τ,ρ (cid:23) e]])
where Γ(T ) = ρ table and Γ,a : τ,ρ (cid:23) e : τ
[[Γ (cid:23) a0 + ∑n
(7)
i=1 ai ∗ xi]] =
a0 + ∑n
∑n
i=1 ai ∗ oxi,
ga0 ∗G ∏n
when the ai are public and the xi private
[[Γ (cid:23) x∗ y]] =
let p : int = x∗ y in
let o(cid:26) : num = ox∗ y in
assert 1 = (Cx)y∗G g−p∗G h−o(cid:26);
Commit p
when x and y private
(8)
[[Γ (cid:23) lookup x0 Ti]] =
eg−ph−o(cid:26)
let x1, . . . ,x n,e,v,A = lookup x0 Ti in
let d,od,Cd = Commit (random()) in
let p = d ∗ e in
let o(cid:26) = od ∗ e in
assert 1 =G Cd
let A(cid:26) = A∗ h−d in
assert ˆe(Z, ˆg) ˆe(1/A(cid:26),pki) =GT
(∏n
i=0 ˆe(Ri, ˆg)xi ) ˆe(A(cid:26), ˆg)e
ˆe(S, ˆg)v ˆe(h, ˆg)p ˆe(h,pki)d
Commit x1, . . . ,Commit xn
where Γ(Ti) = (xi : int)i∈0..n−1 lookuptable
[[Γ (cid:23)↓ x]] = ↓ x when x private
(10)
Figure 5: Shared translation of typed source expressions
the translation, the prover will compute Cp, pass it to the
veriﬁer, and extend its challenge computation with equa-
tion E2, whereas the veriﬁer will receive some Cp and
use it to check this equation. Note that the cryptographic
overhead depends on the target level of privacy: given
instead a source environment θ declaring that x is also
private, the same discriminant expression would involve
representation proofs for two private products.
Private lookups are translated using proofs of knowl-
edge of signatures. To enable this, data sources extend
input tables T : ρ lookuptable, where ρ is of the form
x0 : int, . . . ,x n : int, into tables T(cid:26) : (ρ,σ )table with a CL
signature at the end of each row, as follows:
8
170  22nd USENIX Security Symposium 
USENIX Association
Di (cid:31)= χ,sk,T → map (x0 . . . xn →
xiSvZ−1)
1
sk+e in
let e = random() in
let v = random() in
let A = (∏n
G,i=0 Ri
x0, . . ., xn, e, v, A)
T
Although this pre-processing may be expensive for large
tables, it can be amortized over many queries.
A lookup within a source query, such as the one from
the blur query of §2, is translated to a proof of posses-
sion of a CL signature. For instance, let us translate the
expression lookup c F in environment
ρ = F : (city : int,country : int) lookuptable,c : int.
The environment is ﬁrst translated to
[[ρ]] = (city : int,country : int,σ )table,
c : int,oc : c opening,Cc : c oc commitment
The lookup itself is translated (using rule 9) to
[[Γ (cid:27) lookup c F]]=
let country, e,v,A = lookup c Fin
let d, od, Cd = Commit(random()) in
let p, o(cid:26) = d ∗ e, od ∗ e in
eg−ph−o(cid:26);
assert 1 =G Cd
let A(cid:26) = A∗ h−d in
assert ˆe(Z, ˆg)· ˆe(1/A(cid:26),pki) =GT
ˆe(R0, ˆg)c · ˆe(R1, ˆg)country·
ˆe(A(cid:26), ˆg)e · ˆe(S, ˆg)v · ˆe(h, ˆg)p · ˆe(h,pki)d ;
Commit country
This code ﬁrst looks for a signed tuple (city,country,
e,v,A) in F such that c = city and retrieves the remaining
elements; it then proves knowledge of this tuple, without
revealing which tuple is used in the proof, by blinding
the element A of the signature. (Note that this proof in-
ternally relies on a proof of multiplication.)
Iterators and Committed Tables ZQL supports tables
with mixed public and private columns, as well as itera-
tors map and fold. To enable processing on their private