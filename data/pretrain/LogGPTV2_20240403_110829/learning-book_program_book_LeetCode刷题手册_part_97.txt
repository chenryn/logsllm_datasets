单调递减的栈即可。
代码
package leetcode
---
## Page 978
* Definition for singly-linked list.
 type ListNode struct {
valint
Next *ListNode
//解法一单调栈
func nextLargerNodes(head *ListNode) []int {
res, indexes, nums := make([]int, 0), make([]int, 0), make([]int, 0)
p := head
for p != nil {
nums = append(nums, p.va1)
p = p.Next
for i := 0; i  0 && nums[indexes[len(indexes)-1]]0{
switch s[i]{
case '(':
counter++
res += "("
case ')':
counter--
res += ")"
---
## Page 983
return res
1025.DivisorGame
题目
Alice and Bob take turns playing a game, with Alice starting first.
Initially, there is a number N on the chalkboard. On each player's turn, that player makes a move
consisting of:
●Choosing any x with 0 < x < N and N % x == 0.
●Replacing the number N on the chalkboard with N - x.
Also, if a player cannot make a move, they lose the game.
Return True if and only if Alice wins the game, assuming both players play optimally
Example 1:
Input: 2
output: true
Explanation: Alice chooses 1, and Bob has no more moves.
Example 2:
Input: 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1l, and Alice has no more moves.
Note:
1. 1 <= N <= 1000
题目大意
爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。最初，黑板上有一个数字N。在每个玩家
的回合，玩家需要执行以下操作：
·选出任—x，满足 0<×<N且 N % ×== 0。
·用N-X替换黑板上的数字N。
如果玩家无法执行这些操作，就会输掉游戏。只有在爱丽丝在游戏中取得胜利时才返回True，否则返
回false。假设两个玩家都以最佳状态参与游戏。
解题思路
---
## Page 984
·两人相互玩一个游戏，游戏初始有一个数N，开始游戏的时候，任一方选择一个数×，满足0<×
<N并且N%X==0的条件，然后N-X为下一轮开始的数。此轮结束，该另外一个人继续选
择数字，两人相互轮流选择。直到某一方再也没法选择数字的时候，输掉游戏。问如果你先手开始
游戏，给出N的时候，能否直到这局你是否会必胜或者必输？
·这一题当N=1的时候，那一轮的人必输。因为没法找到一个数字能满足0<X<N并且N%
x==0的条件了。必胜策略就是把对方逼至N=1的情况。题目中假设了对手也是一个很有头
脑的人。初始如果N为偶数，我就选择×=1，对手拿到的数字就是奇数。只要最终能让对手拿到
奇数，他就会输。初始如果N为奇数，N=1的时候直接输了，N为其他奇数的时候，我们也只
能选择一个奇数x，（因为N%x==0，N为奇数，×一定不会是偶数，因为偶数就能被2整除
了），对手由于是一个很有头脑的人，当我们选完N-×是偶数的时候，他就选择1，那么轮到我们
拿到的数字又是奇数。对手只要一直保证我们拿到奇数，最终肯定会逼着我们拿到1，最终他就会
获得胜利。所以经过分析可得，初始数字如果是偶数，有必胜策略，如果初始数字是奇数，有必输
的策略。
代码
package leetcode
func divisorGame(N int) bool{
return N%2 == 0
1026.MaximumDifferenceBetweenNodeand
Ancestor
题目
Given the root of a binary tree, find the maximum value v for which there exists different
nodes A and B where V = IA.val - B.vall and A is an ancestor of B.
(A nodle A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor
of B.)
Example 1:
---
## Page 985
8
10
6
14
3
Input: [8,3, 10,1,6,nu11, 14,nu11 , nu11 , 4, 7,13]
output: 7
Explanation:
We have various ancestor-node differences, some of which are given below :
S = 1∈ - 81
|3 - 7 1 = 4
18 - 11 = 7
|10 - 131 = 3
Among al1 possible differences, the maximum value of 7 is obtained by |8 - 1l
= 7 .
Note:
1. The number of nodes in the tree is between 2 and 5000.
2. Each node will have value between 0 and 1oooo0.
题目大意
给定二叉树的根节点root，找出存在于不同节点A和B之间的最大值V，其中V=|A.val-B.vall，且
A是B的祖先。
（如果A的任何子节点之一为B，或者A的任何子节点是B的祖先，那么我们认为A
是B的祖先）
提示：
●树中的节点数在2到5000之间。
·每个节点的值介于0到100000之间。
---
## Page 986
解题思路
·给出一颗树，要求找出祖先和孩子的最大差值。
·DPS深搜即可。每个节点和其所有孩子的最大值来自于3个值，节点本身，递归遍历左子树的最
归遍历左子树的最小值，递归遍历右子树的最小值。依次求出自身节点和其所有孩子节点的最大差
值，深搜的过程中动态维护最大差值即可。
代码
func maxAncestorDiff(root *TreeNode) int {
res := 0
dfsAncestorDiff(root, &res)
return res
func dfsAncestorDiff(root *TreeNode, res *int) (int, int) {
if root == nil {
return -1, -1
F
1eftMax, leftMin := dfsAncestorDiff(root.Left, res)
if leftMax == -1 && 1eftMin == -1 {
1eftMax = root.Va1
1eftmin = root.Val
rightMax, rightMin := dfsAncestorDiff(root.Right, res)
if rightMax == -1 && rightMin == -1 {
rightMax = root.va1
rightMin = root.Va1
res = max(αres, max(abs(root.val-min(leftMin, rightMin)), abs(root.Val-
max(1eftMax, rightMax))))
return max(leftMax, max(rightMax, root.val)), min(leftmin, min(rightmin,
root.va1))
1o28.RecoveraTreeFromPreorderTraversal
题目
We run a preorder depth first search on the root of a binary tree.
At each node in this traversal, we output D dashes (where D is the depth of this node), then we
output the value of this node. (lf the depth of a node is D, the depth of its immediate child is D+1.
The depth of the root node is 0.)
If a node has only one child, that child is guaranteed to be the left child.
---
## Page 987
Example 1:
2
5
3
4
6
7
Input: "12--3--4-5--6--7"
Output: [1,2, 5 , 3, 4 , 6, 7]
Example 2:
---
## Page 988
2
5
3
6
D
Input: "12--3---4-5-6---7"
Output: [1,2,5,3,nu11,6,nu11,4,nu11,7]
Example 3:
---
## Page 989
401
349
88
90
Input: "1-401--349---90--88"
Output: [1,401,nu11,349, 88,90]
Note:
● The number of nodes in the original tree is between 1 and 1000
●Each node will have a value between 1 and 10^9
题目大意
我们从二叉树的根节点root开始进行深度优先搜索。
在遍历中的每个节点处，我们输出D条短划线（其中D是该节点的深度），然后输出该节点的值。
（如果节点的深度为D，则其直接子节点的深度为D+1。根节点的深度为0）。如果节点只有一个子
节点，那么保证该子节点为左子节点。给出遍历输出S，还原树并返回其根节点root。
提示：
·原始树中的节点数介于1和1000之间。
·每个节点的值介于1和10A9之间。
---
## Page 990
解题思路
给出一个字符串，字符串是一个树的先根遍历的结果，其中破折号的个数代表层数。请根据这个字
符串生成对应的树。
·这一题解题思路比较明确，用DFS就可以解题。边深搜字符串，边根据破折号的个数判断当前节
点是否属于本层。如果不属于本层，回溯到之前的根节点，添加叶子节点以后再继续深搜。需要注
意的是每次深搜时，扫描字符串的index需要一直保留，回溯也需要用到这个index。
代码
package leetcode
import (
"strconv"
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func recoverFromPreorder(S string) *TreeNode{
if len(s) == 0 {
return &TreeNode{}
root, index, level := &TreeNode{}, 0,0
cur := root