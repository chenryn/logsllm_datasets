REGEXP
REGEXP
元素
sbop
dogs'R
REGEXP'ABC
'ABC'
a
'bs
REGEXP
REGEXP
REGEXP
REGEXP
是二进制串，那么 REGEXP会按二进制串对字符串进行比较。如果操作
COLLATE latinl_bin
'c.*a.*d
'dogs
计算结果就为NULL。
，下面两个表达式是等价的：
，只适用于单字节字符集。
非特殊字符将与自身匹配
把括号中的模式元素当作一个元素来对待
匹配模式元素e的n次到n次出现
匹配模式元素e的0次到n次出现
匹配模式元素e的n次或更多次出现
匹配模式元素e的m次出现
匹配模式元素el或e2
匹配模板元素e的0次或1次出现
匹配模式元素e的1次或更多次出现
匹配模式元素e的0次或更多次出现
匹配没有出现在方括号内的任何一个字符
匹配方括号内的任何一个字符
匹配任何单个的字符，包括换行符
匹配字符串的结尾
匹配字符串的开头
只要能在字符串表达式str里找到匹配模式
含义
1111
11111
1001
11110
0
0
---
## Page 587
配模式里使用这几个字符，则必须双写反斜线字符（即把它们分别写成“\\n”
对于正则表达式字符串里的转义序列，MySQL 使用了与C 语言类似的语法。例如，
单词，在其前面和后面都不能是单词字符。
可被认为是alnum 字符类里的所有字符或下划线字符。对于由一个或多个单词字符构成的
在字符类里，特殊标记[：:]分别用于匹配单词边界的开始和结尾。单词字符通常
“\n”
在书写引用了这些名字的字符类表达式里，
“\\t”
a,c'REGEXP
a0c'
ac!
abc'
可以使月
此外，还有几个特殊的正则表达式POSIX字符类构造（用于处理排序序列）和多个等效分类
如果想把字符
'bin' REGEXP b[aeiou]nS
“a”到“2”的小写字符，而[0-9]将匹配任何一个十进制数字。
短划线的两端是该字符区间的第一个字符和最后一个字符。例如，[a-z]将匹配任何一个从
wo1f359
wolf359
[..]和[^...]构造用来设定字符类。在字符类里，可以用短划线（-）来设定字符区间，
abc'
“_”放到一个字符类里，
wo1f359"
bxn'
abcde'REGEXP
abcde'
few words'REGEXP
REGEXP
REGEXP
REGEXP
REGEXP
用，如下表所示。
REGEXP ^b[aeiou]ns
[:xdigit:]
[:upper:]
[:space:]
[:punct:]
[:print:]
[:lower:]
[:graph:]
[:digit:]
[:cntrl:]
[:blank:]
[:alpha:]
[:alnum:]
REGEXP'eS'
“\\\”）。语法分析器在对查询语句进行分析时会去掉一个反斜线字符；在模
“\t”
REGEXP
REGEXP
REGEXP
REGEXP
[[:digit:][:punct:]]"
“]”放到一个字符类里，
'[[:space:]]
分类
[[:digit:][:punct:]]
'[[:space:]]
a.*es"
“\\”会分别解释为换行符、制表符和反斜线字符（\）。如果需要在匹
'[0-9]+[a-z]+
[0-9a-z]+
~ob[aeiou]+sts'
[[::]]
：它就必须是该字符类的第一个或者最后一个字符。
它就必须是该字符类的第一个字符。
一定要记录包含足够的方括号。
十六进制数字（0-9，a-f，A-F）
大写字母字符
空格、制表符、换行符或回车符
标点符号字符
图形或空格字符
小写字母字符
十进制数字（0-9）
控制字符
空白符（空格或制表符）
字母字符
字母和数字字符
形字符 (非空白字符)
含义
1
/
↑
↓
已
0
1
0
工
1
0
人
C.1操作符
。如果想把字
如果想把字名
567
符
符
---
## Page 588
C.2.1比较函数
下面两行都是合法的：
数 mysql_real_connect()时带上 CLIENT_IGNORE_SPACE 选项。
行为。例如，在启动 mysql时，可以带上--ignore-space 选项；在C语言程序里，可以在调用函
种做法的副作用是所有的函数名都会被视为保留字。某些程序可以通过其他方式选择性地允许这种
间不允许出现空格；否则，会出现错误：
C.2
568
大部分情况下，可以用逗号来分隔某个函数的多个输人参数。函数参数的前后也允许出现空格。
这些函数用于对多个值进行比较。
如果启用了SQL模式IGNORE_SPACE，服务器会允许在内建函数的名字后面出现空格，但是这
调用函数可以进行计算，并返回值。默认情况下，在调用函数时函数名与紧随其后的左括号之
FIELD(argO,argl,arg2,...)
ELT（n,strl,str2,...)
下面将具体介绍每个函数的语法格式。
EXTRACT(YEAR FROM2018-01-01)
TRIM(FROMx'）
有些函数使用的是另一种语法格式，如函数TRIM（）或EXTRACT（）：
CONCAT('abc'
CONCAT('abc','def')
ERROR 1630 (42000):FUNCTION NOW doeS not exist
mySql> SELECT NOW();
12013-01-0815:34:46
NOW()
str RLIKE pattern
FIELD('d','a','b',c)
FIELD（'b','a',b','c)
比较。函数FIELD（)和 ELT()之间为互补关系。
进行字符串比较；如果所有的参数都是数值，则进行数值比较；其他情况进行双精度浮点
开始）。如果没能找到匹配或者 argO为NULL，则返回0。如果所有的参数都是字符串，则
在参数列表argl,arg2，...里找到与arg0相匹配的那个参数并返回该参数的索引（从1
ELT(FIELD(b','a',b',c）,'a',b','c')
FIELD（)之间为互补关系。
个字符串为 NULL或不存在，则返回NULL。第一个字符串的索引为1。函数ELT（)和
此函数的返回值是字符串列表 strl,str2,...里的第n个字符串。如果n为 NULL、第n
ELT(6,'a
ELT(3,*a,'b',c',d,'e')
函数
RLIKE和NOT RLIKE 分别等同于 REGEXP 和NOT REGEXP。
Str NOT RLIKE pattern
式匹配进行过程中，会继续解释剩下的转义序列。
附录C操作符与函数参考
b'
'def')
C'
e
→x
↓
↑
0
2
'b'
NULL
---
## Page 589
LEAST（exprl,expr2,..)
ISNULL(expr)
INTERVAL(n,nl,n2,...)
IFNULL(exprl, expr2)
 IF(expr1, expr2, expr3)
 GREATEST(exprl, expr2,...)
返回最小参数。其中的“最小”是按与GREATEST（）函数相同的规则定义的。
ISNULL(1)
若表达式expr的值为NULL，则返回1；否则，返回0。
INTERVAL(7,1,3,5,7,9)
格递增（即n10,'nonzero','zero')
IF(1,'true','false')
GREATEST(BINARY*A','b'，C')
GREATEST('A'
GREATEST(1,3,5)
■只要有一个参数为NULL，结果就为NULL。
返回最大参数。其中的“最大”是根据以下规则定义的。
FIELD（ELT(2,'a,'b','c'）,'a',b','c')
贸
按整数方式进行比较。
FIELD(NULL,a',b',*c')
[SNULL(0)
(NULL,
串方式进行比较。
将按浮点数方式进行比较。
'true','false'
"true',
"b'，'c")
'false')
，则返回 expr2；否则，返回 expr1。IFNULL（）函数将根据
+
↑