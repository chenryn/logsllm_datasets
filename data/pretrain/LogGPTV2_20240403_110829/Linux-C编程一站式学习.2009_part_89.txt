十
7
7
7
2
7
2
2
2
7
也称为Latin-1,
5
5
5
2
6
5
3
2
6
20
2
亿
x06660
妃妃
2
29
28
其中包含欧洲各国语言中
D
双双
24
729
---
## Page 730
附录A.字符编码
全国嵌入式人才培训基地
起始页
 2. Unicode和UTF-8
---
## Page 731
具体来说，UTF-8编码有以下几种格式：
组织也在着手制定这样的编码，称为Unicode，
2. Unicode和UTF-8 请点评
有以下性质：
UNIX之父Ken Thompson提出的UTF-8编码很好地解决了这些问题，现在得到广泛应用。UTF-8具
储
言中0字节表示字符串结尾，
称为Surrogate Pair。无论是UTF-32还是UTF-16都有一个更严重的问题是和C语言不兼容，
示BMP中的字符，但BMP中有一些扩展字符，
一种比较节省存储空间的办法是用两个字节表示一个字符，
都集中在BMP,
有了字符编码，
标准文档，所以UCS编码和Unicode码是相同的。
00000000~U-0000FFFD），称为BMP（Basic Multilingual Plane）或Plane O，为了向后兼容，
所以一个平面由216个字符组成。
示231个字符。如果两个字符编码的高位相同，只有低16位不同，则它们属于一个平面（Plane）
了ISO 10646标准，也称为UCS（Universal Character Set）。UCS编码的长度是31位，可以表
为了统一全世界各国语言文字和专业领域符号（例如数学符号、乐谱符号）的编码，ISO制定
一个字符了
常用U+xxxx这种形式表示，
上一页
·OxFE和OxFF这两个字节在UTF-8编码中不会出现。
·UTF-8编码最长6个字节，BMP字符的UTF-8编码最长三个字节。
·UCS定义的所有231个字符都可以用UTF-8编码表示出来。
，其中有很多0字节并不表示字符串结尾，
·编码为U+0000~U+007F的字符只占一个字节，就是0x00~0x7F，和ASCII码兼容。
是0x80~0xBF，见下面的详细说明。
以判断后面有多少个字节也属于当前字符的编码。后面每个字节的取值范围都
用于表示非ASCI码字符的多字节序列中，
是0，因此非ASCII码字符的表示中不会出现ASCII码字节（也就不会出现O字节）。
编码大于U+007F的字符用2~6个字节表示，
最直接的想法就是用四个字节表示一
 高位的两个字节通常是0，
另一个问题就是这样的编码在计算机中怎么表示。现在已经不可能用一个字节表示
 其中x是十六进制数字。在ISO制定UCS的同时,
，目前常用的大部分字符都位于第一个平面（编码范围是U-
2. Unicode和UTF-8
全国嵌入式人才培训基地
附录 A.字符编码
 如果只用ASClI码或Latin-1，高位的三个字节都是0。
，这就乱套了。
，可以用两个这样的扩展字符表示其它平面的字符
，第一个字节的取值范围是OxCO~0xFD，根据它可
，后来两家联手制定统一的编码，但各自发布各自的
，每个字节的最高位都是1,
一个字符，
 称为UCS-2或UTF-16，
 这种表示方法称为UCS-4或UTF-
一点，
如果字符串用UTF-32
 而ASCI码的最高位都
另-
这样只能表
一个由厂商联合
而BMP的编码
在C语
下二！
存
其
---
## Page 732
节来编码。
0xA9）
例如U+00A9（@字符）的二进制是10101001，编码成UTF-8是1100001010101001（0xC2
位，后面字节中的x是UCS编码的低位。
是UCS编码。UTF-8规定承载的UCS编码以大端表示，
的UCS编码，
U-04000000 - U-7FFFFFFF: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
U-00200000 - U-03FFFFFF:
U-00010000-U-001FFFFF:
U-00000800 - U-0000FFFF:
U-00000080 - U-000007FF:
U-00000000 - U-0000007F: 0xxxxxxx
1. ASCII码
上面的格式中标为x的位就是UCS编码,
于误码同步，
当前字符的编码。后面每个字节的最高两位都是10，
个字节也属于当前字符编码，
一个字节要么最高位是O（ASCII字节）
一页
，但不能编码成111000001000001010101001，UTF-8规定每个字符只能用尽可能少的字
UTF-8就像一列火车，
 例如在网络传输过程中丢失了几个字节，
结果顶多丢掉一两个字符,
 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
 1110xxxx 10xxxxxx 10xxxxxx
110xxxxx 10xxxxxx
 例如111110xx，
第-
全国嵌入式人才培训基地
 最后一种6字节的格式中x位有31个，
一个字节是车头，后面每个字节是车厢，其中承载的货物
，要么最高两位都是1,
起始页
上一级
最高位之后还有四个1，
，也就是说第一个字节中的x是UCS编码的高
很容易判断当前字符是不完整的，也很容
 可以和第一个字节区分开。这样的设计有利
而不会导致后面的编码解释全部混乱了
，最高位之后1的个数决定后面有多
表示后面有四个字节也属
3. 在Linux C编程中使
 可以表示31位 
用Unicode和UTF-8
---
## Page 733
源文件是以UTF-8编码存储的：
3.在LinuxC编程中使用Unicode和UTF-8请点评
其中八进制的344 375240（十六进制e4 bd a0）就是“你"的UTF-8编码，八进制的345 245
中，可以通过1ocale命令查看：
目前各种Linux发行版都支持UTF-8编码，当前系统的语言和字符编码设置保存在一些环境变量
上一页
C
6818888 
0000060240345245275
275
0000040
0000020
000000０
int main(void)
#include 
LC_ALL=
5
LC
LC
LC
LC
LC
LC
LC_TIME=
5
LANG=
S
od -tc nihao.c
 locale
PAPER=
return 0;
printf("你好\n");
"en_US.UTF-8"
P
u
en
'en_US.UTF-8"
US.UTF-8"
n
3.在LinuxC编程中使用Unicode和UTF-8
/n
Multibyte Character
n
了
n
in
L
全国嵌入式人才培训基地
附录A.字符编码
5
In
a
"你好\n"这个字符串就成了这样一串字
心
in
u
一个汉字占3个字节，这种字符
r
e
七
N
T.
344
u
o
o
下一
---
## Page 734
考这篇文章。
关于Unicode和UTF-8本节只介绍了最基本的概念，部分内容出自[Unicode FAQ]，读者可进一步参
部计算时通常以宽字符编码，如果要存盘或者输出给别的程序，或者通过网络发给别的程序，
字节字符必须以UTF-8编码,
码为0的字符才结束，
printr的gls转换说明表示把后面的参数按宽字符串解释，
 00 7d 59 00 00 0a 0000 00 00 00 00 00，用od命令查看目标文件应该能找到这些字节。
2. Unicode和UTF-8
的编码，所以在程序开头需要调用setlocale获取当前系统的编码设置，如果当前系统是UTF-
码0x00004f600x0000597d0x000000a0x00000000保存在目标文件中，
宽字符串"你好\n"在源代码中当然还是存成UTF-8编码的，但编译器会把它变成4个UCS编
字符常量或宽字符串，例如定义wchar_tc=L'你'；，变量c的值就是汉字"你"的31位UCS编码，
（Wide Character）类型wchar_t和一些库函数。在字符常量或字符串字面值前面加一个L就表示宽
字的工作是由终端的驱动程序做的。
的UTF-8编码复制到目标文件中，libc只是当作以0结尾的字符串原封不动地write给内核，识别汉
序，识别汉字的工作既不是由C编译器做的也不是由libc做的,
的驱动程序不能识别UTF-8编码（比如一般的字符终端）就打印不出汉字。也就是说,
前终端的设备文件。如果当前终端的驱动程序能够识别UTF-8编码就能打印出汉字，如果当前终
在
多字节编码。
面的程序：
里存的是什么，求出来的是字节数7。为了在程序中操作Unicode字符，
符串"你好\n"中有几个汉字或字符，
是仅有这种程度的汉字支持是不够的，
一页
语言中称为多字节字符（
SS
int main(void)
#include
gcc hihao.c
printf("%ls"，L"你好\n");
if (!setlocale(LC_CTYPE,".
，但是要write到终端仍然需要以多字节编码输出，
return l; 
 也可以使用其它的多字节编码，在运行时根据环境变量确定当前系统
，用strlen就不灵了
，有时候我们需要在C程序中操作字符串里的字符，
起始页
上一级
"")).
：运行这个程序相当于把这一串字节
，不是见到O字节就结束，而是见到UCS编
因为strlen只看结尾的0字节而不管字符
 C编译器原封不动地把源文件中
附录 B. GNU Free Documentation
License Version 1.3, 3 November
，事实上，
 这样终端驱动程序才能识
，按小端存储就是604f 00
，C语言定义了宽字符
，C标准并没有规定
，程序在做
 像这种程
比如求
734
2008
下-
则采
瑞
内
显
---
## Page 735
全国嵌入式人才培训基地
---
## Page 736
Sussman和Julie Sussman. 2.
[SICP] Structure and Interpretation of Computer Programs. Harold Abelson、 Gerald Jay 
Sethi和Jeffrey D. Ullman. 2.
[Dragon Book] Compilers: Principles, Techniques, & Tools. Alfred V. Aho、Monica S. Lam、Ravi
Vranesic. 2. 
[C99] ISO/EC 9899: Programming Languages - C. 2.
[UNIX编程艺术] The Art of UNIX Programming. Eric Raymond.
[Standard C Library] The Standard C Library. P. J. Plauger.
[Standard C] Standard C: A Reference. P. J. Plauger和Jim Brodie.
[K&R] The C Programming Language. Brian W. Kernighan和Dennis M. Ritchie. 2.
[GroudUp] Programming from the Ground Up: An Introduction to Programming using Linux
[ThinkCpp] How To Think Like A Computer Scientist: Learning with C++. Allen B. Downey.
参考书目 请点评
Hopcroft、Rajeev Motwani和Jeffrey D. Ullman. 2.
上一页
全国嵌入式人才培训基地
参考书目
736
下二！
---
## Page 737
[ULK] Understanding the Linux Kernel. 3. Daniel P. Bovet和Marco Cesati.
A. Rago.
[APUE2e] Advanced Programming in the UNIX Environment. 2. W. Richard Stevens和Stephen
[具体数学] Concrete Mathematics. 2. Ronald L. Graham、Donald E. Knuth和Oren Patashnik.
[BeganFORTRAN] The New C: It All Began with FORTRAN(http://www.ddji.com/cpp/184401313).
[SmashStack] Smashing The Stack For Fun And Profit,网上到处都可 以搜到这篇文章. Aleph One.
[GNUmake] 3. Managing Projects with GNU make. Robert Mecklenburg.
Detmer.
[x86Assembly] Introduction to 80x86 Assembly Language and Computer Architecture. Richard C.
Rene Rideau.
[AssemblyHOWTO] Linux Assembly HOWTO(http://tldp.org/HOWTO/Assembly-HOWTO/很不
[算法+数据结构=程序] Algorithms+ Data Structures= Programs. Niklaus Wirth.
[OOSC] Object-Oriented Software Construction. Bertrand Meyer.
[编程珠玑] Programming Pearls. 2. Jon Bentley.
Rivest和Clifford Stein.
Pesch和Stan Shebs.
[GDB] Debugging with GDB: The GNU Source-Level Debugger. 9. Richard Stallman、Roland 
Randy Meyers.
[TAOCP] The Art of Computer Programming. Donald E. Knuth.
Anniversary Edition.
3
---
## Page 738
2008
License Version 1.3, 3 November
附录 B. GNU Free Documentation
Kuhn.
[Unicode FAQ] UTF-8 and Unicode FAQ, http://www.cl.cam.ac.uk/~mgk25/unicode.html. Markus 
Stevens、Bill Fenner和Andrew M. Rudoff.
[UNPv13e] UNIX Network Programming, Volume 1: The Sockets Networking APl. 3. W. Richard 
[TCPIP] TCP/IP Ilustrated, Volume 1: The Protocols. W. Richard Stevens.
上一页
全国嵌入式人才培训基地
起始页
738
下一页
索引
---
## Page 739
水平制表符，Horizontal Tab,继续Hello World
9's 
4GL,
山
符号
索引遣点评
换行符，
垂
回
号号
5GI
3GL,
1-bit Full Adder,为仕么计算机用二进制计数
号号
8
%
#
#
-notation，算法的时间复杂度分析
线
2's Complement,2's Complement表示法
楼
)括号，Parenthesis,表达式
号
直制表符，Vertical Tab，继续Hello World
括号，
下划线，
页符，Form Feed,继续Hello World
括
S
车，
GL， 5th Generation Programming Language, 型
台
线，
括
Complement, 1's Complement表示法
线，Slash,继续Hello World
，Asterisk, 继续Hello World
号
台
，Shebang,执行脚本 
号，Double Quote, 继续Hello World
号，
，Period,复合类型与结构体
 Question Mark, 继续Hello World
Colon,goto语句和标号
Ampersand,布尔代数
 Pound Sign， Number Sign or Hash Sign, 数学函数
Exclamation Mark,布尔代数
 Carriage Return, 继续Hello World
Alert or Bell, 继续Hello World 
4th（
3rd (
H
，Brace or Curly Brace,第一个程序
Backslash,继续Hello World
Bracket,数组的基本概念
Semicolon，第一个程月
 Single Quote or Apostrophe, 继续Hello World
，Line Feed, 继续Hello World 
，Underscore,变量 
数学函数
全国嵌入式人才培训基地
索引
程序和编程语
言
2
---