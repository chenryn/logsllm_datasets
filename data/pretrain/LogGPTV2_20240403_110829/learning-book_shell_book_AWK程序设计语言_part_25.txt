eat ("else")
++u (） s ）u u (）
stat ()
nt--; gen(")")
function whilestat()(
（）u（（）e（）（。（）xdx））ub（））e（m）
nt++; stat(); nt--; gen("}")
function simplestat(
lhs) ( # ident = expr |name(exprlist)
1hs = ident()
if (tok == "="){
eat ("=")
（（)dxasu）ubtsse。uxnax
---
## Page 156
第六章小型语言
148
}else return lhs
√
function exprlist(
n,e）{# expr，expr，...
e = expr()
#has to be at least one
for （n = 1; tok == ",";n++） {
advance ()
"expr()
return e
function expr(e) {
rel |rel relop rel
e = rel()
while (tok ~ /=|>/) {
op= tok
advance()
e = sprintf("eval(\"&s\", &s, &s)", op， e， rel())
return e
151
function rel(op, e){
term |term [+-] term
e = term()
while (tok ==
tok
op = tok
advance ()
sprintf("eval(\"s\", s, s)",op, e, term())
}
return e
function term(op, e){
fact |fact [*/] fact
e = fact()
）（。==x011/==x011￥==x0）M
op = tok
advance()
e = sprintf("eval(\"s\",&s， s）",op， e， fact（）)
}
return e
---
## Page 157
第六章小型语言
149
function fact(e){
（expr)|$fact|ident|number
if (tok == "("){
（（）ea(）dx=(））e
return "("e ")"
}else if （tok == "$"）{
eat("s")
}else if (tok ~/^[A-Za-z][A-Za-z0-9]*/){
return ident()
}（/(+[6-0]|[6-0]\+[6-0])-/x0）s{
e = tok
advance()
}else
function ident(id,e){
# name | name[expr] | name(exprlist)
if (Imatch(tok, /^[A-Za-z_1[A-Za=z_0-9]*/))
error("unexpected " tok " at line " NR)
id = tok
advance ()
if （tok =="["）{
#array
([。)e()dx= (1。）ea
}else if (tok == "("){# function call
eat("(")
if (tok 1= ")"）{
e = exprlist()
eat(")")
}else eat(")")
return id "(" e ")"
 calls are statements
}else
return id
variable
152
---
## Page 158
第六章小型语言
150
6.7小结
构造小型语言通常是一件非常多产的编程工作，如果词法和语法分析可以通过字段分割与正则表达
式来完成，那么使用awk就很方便，符号表可以用关联数组来存放，模式-动作结构与面向模式的编程
语言非常般配
通常来说，如果缺乏经验，那么为新领域的新语言作设计决策是一件很固难的工作，不过，利用awk
很容易就可以构造出语言原型并加以试验，在投入大量的精力与财力进行正式开发之前，原型可以帮助
人们发现原有设计的问题，并加以修改，一旦创建成功，把原型转化成产品的过程就相对来说比较直接，
转化过程可以用编译器构造工具（比如lex和yacc）来完成，或者是编译型编程语言，比如C.
参考资料
汇编程序与解释程序来源于Jon Bentley和John Dallen，当时是为了教授软件工程专业课而
升发了这两个程序，其体描述载于“Exercises in software design”，IEEE Transactions on Softuware
Engineering,1987 年.
关于排版制图语言grap的相关信息可以在JonBentley和BrianKernighan写的一篇文章中我
到，文章登在Communications ofthe ACM，1986年8月，这期发行还刊登了Bentley写的一篇文章，
题目是“Little Languages”，登在Programming Pearls 栏目.
更多的关于如何构造递下降翻译器的讨论，可以参考Compilers:Principles,Techniques,and
Tools (Aho,Sethi 和 Ullman 著,Addison-Wesley 1986 年出版)的第2章.
---
## Page 159
第七章算法实验
153
一般而言，理解事物如何工作的最好方式就是自己动手做一些小实验，算法学习就是一个典型的例
子：编写实际代码有助于并清楚那些客易被伪码掩盖的问题，不仅如此，最终得到的程序是可运行的，通
过观察运行结果，就可以知道算法的的正确性，而这是伪码所无法办到的
Awk很适合做这种测试工作.如果某个程序使用awk编写，那我们就可以把精力集中在算法上，而
不是语言本身，如果某个算法最终要应用到某个大型程序中，那么先让算法能够单独地运行起来可能会
更有效率，当需要为某个算法进行调试，测试与性能评价时，通常需要构造一些脚手架程序，在这一方面，
awk是一款优秀的脚手架构造工具，它并不关心算法本身是用什么语言实现的.
这一章讨论算法实验，前半章描述三种排序算法，这三种算法常常是算法课首先要介绍的内容，载们
将使用awk程序对这些算法进行测试，性能度量和剖析，后半章展示几种拓扑排序算法，实现Unix的
文件更新实用程序make.
7.1排序
这一小节讨论三种著名并且很有用的算法：插入排序，快速排序，以及堆排序，插入排序非常简单，
但是只有在元素很少的情况下效率才足够高；快速接序是最好的通用排序算法之一：堆接序可以保证即
使在最坏的情况下，也可以拥有较高的效率，我们对每一种算法都进行介绍，并加以实现，然后再用测试
例程对它们进行测试，最后评价性能.
插入排序
基本概念.插入排序的过程类似于给一堆卡片排序：每次从卡片堆里拿出一张，把它插入到手上拿
着的牌的合适位置①
实现.下面的代码使用括入排序对数组A[1]..,A[n]进行升序排列.第一个动作把输入数据读取154
到一个数组中，END动作调用函数isOrt对数组进行排序，最后输出排序结果：
# insertion sort
(A[NR]= $0}
END ( isort (A, NR)
for (i = 1; i  1 && A[j-1] > A[]; j--） {
#swap A[j-1]and A[j]
t = A[j-1]; A[j-1] = A[j]; A[j] = t
）
is0rt函数内的外层循环在每次选代丹始时，数组A的元素1至元素i-1就已经处于有序状态.内层
循环每次选代都把当前处于第i个位置上的元素向前移动，跳过所有比它大的元素，当外层循环结束时，
所有的n个元素都处于有序状态
数值或字符串都可以用这个程序进行排序，但是当输入数据同时含有数值与字符串时，就要小心一
点—由于强制类型转换，比较结果可能会让读者感到惊讶
如果数组A含有以下8个整数：
81635247
那么梅序的过程如下所示：
81 6 35 2 4 7
1 86 3524 7
16 83 524 7
1 36 8|5 2 4 7
1 3568|2 4 7
1 235684 7
1 2 3 456 8|7
1 2 34 56 7 8
竖线符把数组的已排序部分和未排序部分分开.
测试.应该如何测试isort？我们可以每次输入一点数据，并查看排序结果，当然，这样做并没有错，
可是对于任意规模的程序来说，这种方法不能做到详尽的测试，第二种方案是自动生成大量的随机数集
合，把这些集合作为isort的输入数据，这的确是一个不错的办法，但是还可以做得更好：为了测试程
序的薄弱环节，我们还需要构造一些特殊的测试用例，用来测试边界与异常情况，对排序来说，典型的边155
界与异常情况包括：
序列长度为0
序列长度为1
序列包含n个随机数
序列包含n个已排序的数
序列包含n个逆序排列的数
序列包含n个相网的数
---
## Page 161
第七章算法实验
153
本章的目标之一是展示如何使用awk来帮助测试和评价程序，为了说明，我们现在要对排序例程的
测试与运行结果评价过程进行自动化.
主要有两种办法来实现测试与评价过程的自动化，每一种都有它各自的优点，第一种称为“批处理
模式：编写一个程序来运行事先计划好的测试集，并运用上面提到排序算法，下面的程序可以生成测试
数据并检查测试结果，除了isort，还有其他几个函数，它们用来生成不同类型的数组，以及检查排序后
的数组是否是有序的.
#batch test of sorting routines
BEGIN{
print "
0 elements"
isort(A,0):check(A, 0)
print "
1 element"
genid(A, 1); isort(A, 1); check(A, 1)
n = 10
print "
" n " random integers"
genrand(A, n); isort(A, n); check(A, n)
print "
"n " sorted integers"
gensort(A, n) ; isort(A, n) ; check(A, n)
print "
"n " reverse-sorted integers"
genrev(A, n); isort(A, n) ; check(A, n)
print "
"n " identical integers"
genid(A, n) ; isort(A, n) ; check(A, n)
function isort(A,n,
i,j,t){
for (i = 2; i  1 & A[j-1] > A[j]; j--) {
swap A[j-1] and A[j]
t = A[j-1]; A[j-1] = A[j]; A[j] = t
{
156
# test-generation and sorting routines..
function check(A,n,
i){
---
## Page 162
第七章算法实验
154
for (i = 1; i  A[i+1])
printf("array is not sorted, element &d\n", i)
function genrand(A,n, i) ( # put n random integers in A
for (i = 1; i <= n; i++)
A[i] = int(n*rand())
function gensort(A,n, i) ( # put n sorted integers in A
for (i = 1; i <= n; i++)
A[i] = i
）
function genrev(A,n,i) { # put n reverse-sorted integers
for(i = 1; i <= n; i++)#in A
A[i] = n+1-i
for (i = 1; i <= n; i++)
A[i]  = 1
第二种方法相对来说没那么方便，但很适合用awk来处理，基本思想是构建一个柜架程序，利用该
柜架可以很容易以交互性的方式来完成测试，交互式方案是批处理模式的一个很好的补充，特别是当待
测试的算法没有排序那么客易理解时，交互式处理模式在调试程序时也很方便.
特别地，我们将要设计的程序，在效果上等价于一个专门用于构造测试数据与操作的微型编程语言，
因为语言并不需要做太多的工作，也不必处理大量用户的情况，所以不用设计得多么复杂，如果必要的
话，我们甚至可以丢掉写了一半的代码，重新开始，我们的语言提供了自动生成数组的功能，如果再继续
往下看的话，就会发现它还可以指定待运用的排序算法，我们省略了梅序和数据生成子程序，它们和前一
个示例相月.
程序的基本组织是一系列的正则表达式，它们负责扫描输入数据，判断数据类型和使用的排序算法，
如果某个输入数据不与任何一个模式相匹配，程序就会输出一条错误消息，并演示正确的使用方法，如果
仅仅说明输入数据有错，可能没多大帮助.
157
#interactive test framework for sort routines
/[0-9]+.*rand/ {n = $1; genrand(A, n);dump(A, n); next }
/[0-9]+.*id/{n = $1; genid(A, n); dump(A, n);next }
/[0-9]+.*sort/ {n = $1; gensort（A, n); dump(A, n); next }
---
## Page 163
第七章算法实验
155
/^[0-9]+.*rev/{n =$1; genrev(A, n); dump(A,n); next }
/^data/{# use data right from this line
for (i = 2; i <= NF; i++)
A[i-1] = $i
n = NF - 1
next
/q.*sort/ { qsort(A, 1, n); check(A, n); dump(A, n); next }
/h.*sort/ {hsort(A, n); check(A, n); dump(A, n); next }
/i.*sort/ { isort(A, n); check(A, n); dump(A, n); next }
/./( print "data ...|N[rand|id|sort|rev]; [qhi]sort"}
function dump(A, n)(# print A[1]..A[n]
for (i = 1; i <= n; i++)
printf(" s", A[i])
printf ("\n")
# test-generation and sorting routines ...
正则表达式提供了一种非常宽松的输入语法：比如说，只要任何一个短语和“quicksort”稍微有点接近，
就选择快速排序算法，载们也可以直接手工输入数据，而不是自动生成，这个功能允许我们既可以基于文
本，也可以基于数字对算法进行测试.为了说明，上面程序的一个输出是：
10 random
9846724040
isort