described in Chapter 23. However, which of these Task objects should you
return as the result of the method?
Click here to view code image
private Task doFirstLongRunningOperation()
{
    Task first = Task.Run(() => { /* code for first operation */ });
    Task second = Task.Run(() => { /* code for second operation */
});
    return ...; // Do you return first or second?
}
If the method returns first, the await operator in the slowMethod will wait
only for that Task to complete and not for second. Similar logic applies if the
method returns second. The solution is to define the
doFirstLongRunningOperation method with async and await each of the
Tasks, as shown here:
Click here to view code image
private async Task doFirstLongRunningOperation()
{
    Task first = Task.Run(() => { /* code for first operation */ });
    Task second = Task.Run(() => { /* code for second operation */
});
    await first;
    await second;
}
Remember that when the compiler encounters the await operator, it
generates code that waits for the item specified by the argument to complete,
together with a continuation that runs the statements that follow. You can
think of the value returned by the async method as a reference to the Task
that runs this continuation (this description is not completely accurate, but it
Download from finelybook PI:EMAIL
832
is a good enough model for the purposes of this chapter). So, the
doFirstLongRunningOperation method creates and starts the tasks first and
second running in parallel, the compiler reformats the await statements into
code that waits for first to complete followed by a continuation that waits for
second to finish, and the async modifier causes the compiler to return a
reference to this continuation. Notice that because the compiler now
determines the return value of the method, you no longer specify a return
value yourself (in fact, if you try to return a value, in this case, your code will
not compile).
Note If you don’t include an await statement in an async method, the
method is simply a reference to a Task that performs the code in the
body of the method. As a result, when you invoke the method, it does
not actually run asynchronously. In this case, the compiler will warn
you with the message, “This async method lacks await operators and
will run synchronously.”
Tip You can use the async modifier to prefix a delegate, making it
possible to create delegates that incorporate asynchronous processing by
using the await operator.
In the following exercise, you will work with the GraphDemo application
from Chapter 23 and modify it to generate the data for the graph by using an
asynchronous method.
Modify the GraphDemo application to use an asynchronous method
1. Using Microsoft Visual Studio 2017, open the GraphDemo solution,
which is located in the  \Microsoft Press\VCSBS\Chapter
24\GraphDemo folder in your Documents folder.
Download from finelybook PI:EMAIL
833
2. In Solution Explorer, expand the MainPage.xaml node and open the
MainPage.xaml.cs file in the Code and Text Editor window.
3. In the MainPage class, locate the plotButton_Click method.
The code in this method looks like this:
Click here to view code image
private void plotButton_Click(object sender, RoutedEventArgs e)
{
    try
    {
        Random rand = new Random();
        redValue = (byte)rand.Next(0xFF);
        greenValue = (byte)rand.Next(0xFF);
        blueValue = (byte)rand.Next(0xFF);
        tokenSource = new CancellationTokenSource();
        CancellationToken token = tokenSource.Token;
        int dataSize = bytesPerPixel * pixelWidth * pixelHeight;
        byte[] data = new byte[dataSize];
        Stopwatch watch = Stopwatch.StartNew();
        try
        {
            generateGraphData(data, 0, pixelWidth / 2, token);
            duration.Text = $"Duration (ms):
{watch.ElapsedMilliseconds}";
        }
        catch (OperationCanceledException oce)
        {
            duration.Text = oce.Message;
        }
        duration.Text = $"Duration (ms):
{watch.ElapsedMilliseconds}";
        WriteableBitmap graphBitmap = new
WriteableBitmap(pixelWidth, pixelHeight);
        using (Stream pixelStream =
graphBitmap.PixelBuffer.AsStream())
        {
            pixelStream.Seek(0, SeekOrigin.Begin);
            pixelStream.Write(data, 0, data.Length);
            graphBitmap.Invalidate();
            graphImage.Source = graphBitmap;
        }
    }
Download from finelybook PI:EMAIL
834
    catch (Exception ex)
    {
        MessageDialog msg = new MessageDialog("Exception",
ex.Message);
        msg.ShowAsync();
    }
}
This is a simplified version of the application from the previous chapter.
It invokes the generateGraphData method directly from the user
interface thread and does not use Task objects to generate the data for
the graph in parallel.
Note If you reduced the size of the pixelWidth and pixelHeight
fields in the exercises in Chapter 23 to save memory, do so again
in this version before proceeding with the next step.
4. On the Debug menu, click Start Without Debugging.
5. In the GraphDemo window, click Plot Graph. While the data is being
generated, try to click Cancel.
Notice that the user interface is completely unresponsive as the graph is
being generated and displayed. This is because the plotButton_Click
method performs all its work synchronously, including the generation of
the data for the graph.
6. Close the GraphDemo application and return to Visual Studio.
7. In the Code and Text Editor window displaying the MainPage class,
above the generateGraphData method, add a new private method called
generateGraphDataAsync.
This method should take the same list of parameters as the
generateGraphData method, but it should return a Task object rather
than a void. The method should also be marked with async, and it should
look like this:
Download from finelybook PI:EMAIL
835
Click here to view code image
private async Task generateGraphDataAsync(byte[] data,
  int partitionStart, int partitionEnd,
  CancellationToken token)
{
}
Note It is recommended practice to name asynchronous methods
with the Async suffix.
8. In the generateGraphDataAsync method, add the statements shown here
in bold.
Click here to view code image
private async Task generateGraphDataAsync(byte[] data, int
partitionStart, int partitionEnd, CancellationToken token)
{
    Task task = Task.Run(() =>
            generateGraphData(data, partitionStart,
partitionEnd, token));
            await task;
}
This code creates a Task object that runs the generateGraphData
method and uses the await operator to wait for the Task to complete.
The task generated by the compiler as a result of the await operator is
the value returned from the method.
9. Return to the plotButton_Click method and change the definition of this
method to include the async modifier, as shown in bold in the following
code:
Click here to view code image
private async void plotButton_Click(object sender,
RoutedEventArgs e)
{
  ...
}
Download from finelybook PI:EMAIL
836
10. In the inner try block in the plotButton_Click method, modify the
statement that generates the data for the graph to call the
generateGraphDataAsync method asynchronously, as shown here in
bold:
Click here to view code image
try
{
    await generateGraphDataAsync(data, 0, pixelWidth / 2,
token);
    duration.Text = $"Duration (ms):
{watch.ElapsedMilliseconds}");
}
...
11. On the Debug menu, click Start Without Debugging.
12. In the GraphDemo window, click Plot Graph and verify that the
application generates the graph correctly.
13. Click Plot Graph, and then, while the data is being generated, click
Cancel.
This time, the user interface should be responsive. Only part of the
graph should be generated.
Download from finelybook PI:EMAIL
837
14. Close the GraphDemo application and return to Visual Studio.
Defining asynchronous methods that return values
So far, all the examples you have seen use a Task object to perform a piece of
work that does not return a value. However, you also use tasks to run
methods that calculate a result. To do this, you use the generic
Task class, where the type parameter, TResult, specifies the type of
the result.
You create and start a Task object in a similar way as for an
ordinary Task. The primary difference is that the code you execute should
return a value. For example, the method named calculateValue shown in the
code example that follows generates an integer result. To invoke this method
by using a task, you create and run a Task object. You obtain the value
returned by the method by querying the Result property of the Task
object. If the task has not finished running the method and the result is not yet
Download from finelybook PI:EMAIL
838
available, the Result property blocks the caller. This means that you don’t
have to perform any synchronization yourself, and you know that when the
Result property returns a value, the task has completed its work.
Click here to view code image
Task calculateValueTask = Task.Run(() => calculateValue(...));
...
int calculatedData = calculateValueTask.Result; // Block until
calculateValueTask completes
...
private int calculateValue(...)
{
    int someValue;
    // Perform calculation and populate someValue
    ...
    return someValue;
}
The generic Task type is also the basis of the mechanism for
defining asynchronous methods that return values. In previous examples, you
saw that you implement asynchronous void methods by returning a Task. If
an asynchronous method actually generates a result, it should return a
Task, as shown in the following example, which creates an
asynchronous version of the calculateValue method:
Click here to view code image
private async Task calculateValueAsync(...)
{
    // Invoke calculateValue using a Task
    Task generateResultTask = Task.Run(() =>
calculateValue(...));
    await generateResultTask;
    return generateResultTask.Result;
}
This method looks slightly confusing since the return type is specified as
Task, but the return statement actually returns an int. Remember that
when you define an async method, the compiler performs some refactoring of
your code, and it essentially returns a reference to Task that runs the
continuation for the statement return generateResultTask.Result;. The type of
the expression returned by this continuation is int, so the return type of the
method is Task.
To invoke an asynchronous method that returns a value, use the await
Download from finelybook PI:EMAIL
839
operator, like this:
Click here to view code image
int result = await calculateValueAsync(...);
The await operator extracts the value from the Task returned by the
calculateValueAsync method, and in this case assigns it to the result variable.
Asynchronous method gotchas
The async and await operators have been known to cause confusion amongst
programmers. It is important to understand that:
Marking a method as async does not mean that it runs asynchronously.
It means that the method can contain statements that may run
asynchronously.
The await operator indicates that a method should be run by a separate
task, and the calling code is suspended until the method call completes.
The thread used by the calling code is released and can be reused. This
is important if the thread is the user interface thread, as it enables the
user interface to remain responsive.
The await operator is not the same as using the Wait method of a task.
The Wait method always blocks the current thread and does not allow
it to be reused until the task completes.
By default, the code that resumes execution after an await operator
attempts to obtain the original thread that was used to invoke the
asynchronous method call. If this thread is busy, the code will be
blocked. You can use the ConfigureAwait(false) method to specify that
the code can be resumed on any available thread and reduce the
chances of blocking. This is especially useful for web applications and
services that may need to handle many thousands of concurrent
requests.
You shouldn’t use ConfigureAwait(false) if the code that runs after an
await operator must execute on the original thread. In the example
discussed earlier, adding ConfigureAwait(false) to each awaited
operation will result in the likelihood that the continuations the
compiler generates will run on separate threads. This includes the
Download from finelybook PI:EMAIL
840
continuation that attempts to set the Text property for message, causing
the exception “The application called an interface that was marshaled
for a different thread” again.
Click here to view code image
private async void slowMethod()
{
    await doFirstLongRunningOperation().ConfigureAwait(false);
    await doSecondLongRunningOperation().ConfigureAwait(false);
    await doThirdLongRunningOperation().ConfigureAwait(false);
    message.Text = "Processing Complete";
}
Careless use of asynchronous methods that return results and that run
on the user interface thread can generate deadlocks, causing the
application to freeze. Consider the following example:
Click here to view code image
private async void myMethod()
{
    var data = generateResult();
    ...
    message.Text = $"result: {data.Result}";
}
private async Task generateResult()
{
    string result;
    ...
    result = ...
    return result;
}
In this code, the generateResult method returns a string value. However,
the myMethod method does not actually start the task that runs the
generateResult method until it attempts to access the data.Result
property; data is a reference to the task, and if the Result property is not
available because the task has not been run, then accessing this property
will block the current thread until the generateResult method completes.
Furthermore, the task used to run the generateResult method attempts to
resume the thread on which it was invoked when the method completes
(the user interface thread), but this thread is now blocked. The result is
that the myMethod method cannot finish until the generateResult method
completes, and the generateResult method cannot finish until the
Download from finelybook PI:EMAIL
841
myMethod method completes.
The solution to this problem is to await the task that runs the
generateResult method. You can do this as follows:
Click here to view code image
private async void myMethod()
{
    var data = generateResult();
    ...
    message.Text = $"result: {await data}";
}
Asynchronous methods and the Windows Runtime APIs
The designers of Windows 8 and later versions wanted to ensure that
applications were as responsive as possible, so they made the decision when
they implemented WinRT that any operation that might take more than 50
milliseconds to perform should be available only through an asynchronous
API. You might have noticed one or two instances of this approach already in
this book. For example, to display a message to a user, you can use a
MessageDialog object. However, when you display this message, you must
use the ShowAsync method, like this:
Click here to view code image
using Windows.UI.Popups;
...
MessageDialog dlg = new MessageDialog("Message to user");
await dlg.ShowAsync();
The MessageDialog object displays the message and waits for the user to
click the Close button that appears as part of this dialog box. Any form of
user interaction might take an indeterminate length of time (the user might
have gone for lunch before clicking Close), and it is often important not to
block the application or prevent it from performing other operations (such as
responding to events) while the dialog box is displayed. The MessageDialog
class does not provide a synchronous version of the ShowAsync method, but
if you need to display a dialog box synchronously, you can simply call
dlg.ShowAsync() without the await operator.
Another common example of asynchronous processing concerns the
Download from finelybook PI:EMAIL
842
FileOpenPicker class, which you saw in Chapter 5, “Using compound
assignment and iteration statements.” The FileOpenPicker class displays a
list of files from which the user can select. As with the MessageDialog class,
the user might take a considerable time browsing and selecting files, so this
operation should not block the application. The following example shows
how to use the FileOpenPicker class to display the files in the user’s
Documents folder and wait while the user selects a single file from this list:
Click here to view code image
using Windows.Storage;
using Windows.Storage.Pickers;
...
FileOpenPicker fp = new FileOpenPicker();
fp.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;
fp.ViewMode = PickerViewMode.List;
fp.FileTypeFilter.Add("*");
StorageFile file = await fp.PickSingleFileAsync();
The key statement is the line that calls the PickSingleFileAsync method.
This is the method that displays the list of files and allows the user to
navigate around the file system and select a file. (The FileOpenPicker class
also provides the PickMultipleFilesAsync method by which a user can select
more than one file.) The value returned by this method is
Task, and the await operator extracts the StorageFile object
from this result. The StorageFile class provides an abstraction of a file held
on hard disk, and by using this class, you can open a file and read from it or
write to it.
Note Strictly speaking, the PickSingleFileAsync method returns an
object of type IAsyncOperation. WinRT uses its own
abstraction of asynchronous operations and maps .NET Framework
Task objects to this abstraction; the Task class implements the
IAsyncOperation interface. If you are programming in C#, your code is
not affected by this transformation, and you can simply use Task objects
without concerning yourself with how they get mapped to WinRT
asynchronous operations.
Download from finelybook PI:EMAIL
843
File input/output (I/O) is another source of potentially slow operations,
and the StorageFile class implements a raft of asynchronous methods by
which these operations can be performed without impacting the
responsiveness of an application. For example, in Chapter 5, after the user
selects a file using a FileOpenPicker object, the code then opens this file for
reading, asynchronously:
Click here to view code image
StorageFile file = await fp.PickSingleFileAsync();
...
var fileStream = await file.OpenAsync(FileAccessMode.Read);
One final example that is directly applicable to the exercises you have
seen in this and the previous chapter concerns writing to a stream. You might
have noticed that although the time reported to generate the data for the graph
is a few seconds, it can take up to twice that amount of time before the graph
actually appears. This happens because of the way the data is written to the
bitmap. The bitmap renders data held in a buffer as part of the
WriteableBitmap object, and the AsStream extension method provides a
Stream interface to this buffer. The data is written to the buffer via this
stream by using the Write method, like this:
Click here to view code image
...
Stream pixelStream = graphBitmap.PixelBuffer.AsStream();
pixelStream.Seek(0, SeekOrigin.Begin);
pixelStream.Write(data, 0, data.Length);
...
Unless you have reduced the value of the pixelWidth and pixelHeight
fields to save memory, the volume of data written to the buffer is just over
570 MB (15,000 * 10,000 * 4 bytes), so this Write operation can take a few
seconds. To improve response time, you can perform this operation
asynchronously by using the WriteAsync method:
Click here to view code image
await pixelStream.WriteAsync(data, 0, data.Length);
In summary, when you build applications for Windows, you should seek
to exploit asynchronicity wherever possible.
Download from finelybook PI:EMAIL
844