title:ATTAIN: An Attack Injection Framework for Software-Defined Networking
author:Benjamin E. Ujcich and
Uttam Thakore and
William H. Sanders
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
ATTAIN: An Attack Injection Framework for
Software-Deﬁned Networking
Benjamin E. Ujcich∗†, Uttam Thakore∗‡, and William H. Sanders∗†
∗Information Trust Institute, †Department of Electrical and Computer Engineering, ‡Department of Computer Science
University of Illinois at Urbana–Champaign
Email: {ujcich2, thakore1, whs}@illinois.edu
Urbana, Illinois USA
Abstract—Software-deﬁned networking (SDN) has recently
attracted interest as a way to provide cyber resiliency because
of its programmable and logically centralized nature. However,
the security of the SDN architecture itself against malicious
attacks is not well understood and must be ensured in order
to provide cyber resiliency to systems that use SDNs. In this
paper, we present ATTAIN, an attack injection framework for
OpenFlow-based SDN architectures. First, we deﬁne an attack
model that relates system components to an attacker’s capability
to inﬂuence control plane behavior. Second, we deﬁne an attack
language for writing control plane attacks that can be used to
evaluate SDN implementations. Third, we describe an attack
injector architecture that actuates attacks in networks. Finally,
we evaluate our framework with an enterprise network case study
by writing and running attacks with popular SDN controllers.
I. INTRODUCTION
Software-deﬁned networking (SDN) has seen widespread
use in settings such as research networks, enterprise networks
and data center and cloud networks, among others [1]. SDN
decouples control protocol messages that represent how the
end host trafﬁc should be forwarded (i.e., the control plane)
from the end host trafﬁc itself (i.e., the data plane), and it
centralizes forwarding decisions through programmable con-
trollers for network service and application integration [1].
Such ﬂexibility opens up new opportunities for enabling
network-wide cyber resiliency, but the greater role of software
creates new challenges [2]. SDN controllers are now full-
featured distributed network operating systems [3], and their
implementation complexity may present security risks and vul-
nerabilities if the veriﬁcation of software becomes intractable.
We note several security and dependability observations
about OpenFlow-based SDN architectures. First, changes to
or queries about a network’s current state1 predominantly
depend on the OpenFlow control protocol, which makes
control protocol messages likely targets for attackers who
wish to disrupt network behavior and operations. Second, the
OpenFlow speciﬁcation largely leaves open the question of
how controllers ought to use control protocol messages [4],
which may allow attackers to take advantage of subtle con-
troller and switch implementation differences to effect their
attacks. Third, practitioners looking to implement SDN in their
networks may be hesitant to adopt it without understanding
1State is broadly deﬁned here to include the network’s forwarding behavior,
topological connectivity, and conﬁguration.
and rigorously testing SDN software, given that it introduces
potential new risks. Clearly, there is a need to systematically
compare and test SDN implementations prior to production
deployment to understand how implementations respond to
control protocol attacks [5].
Motivated by those observations and challenges, we intro-
duce ATTAIN, a framework for ATTAck Injection in Software-
Deﬁned Networks. We draw upon practices in fault-tolerant
computing to test control plane attacks in SDN implementa-
tions. We extend prior work on fault injection to include as-
sumptions about an attacker’s capabilities. We further propose
a language for describing systematic control plane attacks. Our
goal is to allow practitioners to write modular and reusable
control plane attack descriptions that they can subsequently
run in a testing environment to collect security and perfor-
mance metrics across implementations.
We present the framework’s components and illustrate its
use on a small-scale enterprise network case study. Speciﬁ-
cally, we evaluate the Floodlight, POX, and Ryu SDN con-
trollers by measuring security and performance metrics while
the system is under attack by our attack injector in order
to show how such attacks manifest
themselves differently
based on controller implementation. Our results uncovered
the ability to degrade data plane service and increase control
plane trafﬁc by suppressing ﬂow modiﬁcation requests, as
well as the ability to cause unauthorized increased access to
protected hosts and denial of service against legitimate trafﬁc
by interrupting control plane connections. We found that even
attacks on basic high-level network service abstractions, such
as learning switches, manifest themselves differently based
on the SDN controller implementation, further motivating the
need for a standardized and consistent way to evaluate the
security of SDN architecture implementations.
The contributions of our paper include:
• an attack model for representing an attacker’s presumed
capabilities to disrupt the SDN control plane,
• an attack language for describing control plane attacks
such that practitioners can write reusable test descriptions
for cross-implementation testing and comparison,
• an attack injector architecture for orchestrating and mon-
itoring attacks within an SDN implementation, and
• a case study in which we implement ﬂow modiﬁcation
suppression and connection interruption attacks and eval-
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.59
567
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
Network 
applications 
Network 
applications 
APPLICATION PLANE 
CONTROL PLANE 
Northbound API 
Northbound API 
t b o u n d /
E a s
t b o u n d   A P I
s
W e
Controller 
Eastbound/ 
Westbound API 
Controller 
Controller 
Southbound API 
Southbound API 
Switches 
Switches 
DATA PLANE 
End hosts 
End hosts 
Practitioner 
(e.g., system administrator, developer, operator) 
System 
model 
Attacker 
capabilities 
Attack 
descriptions 
Network 
infrastructure 
Results 
Log files, 
analysis algorithms, 
etc. 
constrains 
Attack 
Model 
Attack 
Language 
    … 
implemented by 
Attack 
Injector 
ATTAIN Framework 
Fig. 1. Logical diagram of SDN architecture.
Fig. 2. High-level system diagram of ATTAIN framework.
uate representative performance and security metrics of
the Floodlight, POX, and Ryu SDN controllers.
II. BACKGROUND
Understanding SDN security requires the analysis of the ar-
chitectural differences between SDN and traditional networks.
We provide the context of the SDN architecture design, note
its inherent security challenges, and explain why we chose to
use attack injection in testing security properties.
A. SDN Architecture
1) Information ﬂow: Figure 1 shows the essential SDN
architecture [1]. Network applications set the network’s de-
sired behavior and communicate their requests to controllers
through the northbound API. Controllers translate policy and
behavior intents into low-level commands via the southbound
API where the switches drive the forwarding behavior.
End hosts communicate via switches. Controllers use the
southbound API to query the switches about network topol-
ogy, end host
information, and trafﬁc statistics associated
with instantiated forwarding rules. Network applications can
proactively query the controllers for network information via
the northbound API. Distributed controllers can communicate
among themselves through an eastbound-westbound API [1].
2) Planes: The SDN architecture is separated into three
logical planes. The application plane uses the network’s
current state to drive decisions, to decide on and enforce
network policy, or both. The control plane centralizes network
behavior logic in one or more controllers and provides basic
networking services such as topology information and end host
tracking [6]. The data plane forwards trafﬁc among end hosts
according to the forwarding rules set by the control protocol in
the control plane. These rules may be represented in hardware
(e.g., TCAM) or in software (e.g., OVS [7]).
3) OpenFlow: The OpenFlow protocol [4], [8] acts as
a standardized southbound API protocol among controllers
and switches. The protocol speciﬁcation deﬁnes how switches
should behave in response to protocol messages, but it leaves
much of the controller speciﬁcations up to a software devel-
oper, with exceptions for protocol handshaking, conﬁguration
setup, and liveness.
4) Architecture security: Kreutz et al. [2] note seven attack
vectors that affect the dependability and security of SDN archi-
tectures: forged or fake trafﬁc ﬂows; compromised switches;
machines running controllers; lack of diagnostics and forensics
understanding; control plane communications; controllers; and
trust among network applications and controllers. The last
three are systemic and unique to SDNs.
Attacks such as ARP spooﬁng that may inﬂuence behavior
in a particular way on a traditional network may manifest
themselves differently in SDN architectures based on the
controller implementation. For instance, Link Layer Discovery
Protocol (LLDP) messages can be used to fabricate fake links
to manipulate the controller into believing that such links exist,
thus causing black hole routing [9].
B. Fault and Attack Injection
Fault and attack injectors intentionally introduce faults into
systems for testing and later validation. While they cannot
prove a system’s correctness, they are capable of determining
the set of outputs produced when the software is functioning
under unique or unusual conditions [10]. Thus, one goal in at-
tack injection is to uncover the set of outputs—the observable
behavior of the network at a given time—that manifest when
the system is under attack.
III. THE ATTAIN FRAMEWORK
To provide attack injection in the SDN context, we introduce
the ATTAIN framework, consisting of an attack model, an
attack language, and an attack injector. Figure 2 shows the
outline of our approach. A practitioner provides models,
attacks, and the network infrastructure, and receives results for
later analysis and system evaluation. (For further information
on any framework component details not mentioned in this
paper, we refer the reader to [11].) The three components are
described in the next three section as follows.
568
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
1) Attack Model (Section IV): We deﬁne an attack model
for relating system components to an attacker’s presumed
capabilities to disrupt the control plane state.
2) Attack Language (Section V): We deﬁne an attack lan-
guage for writing control plane attacks, subject to the attack
model. We model attacks in stages, which we call attack states,
and represent the attack graphically. Each state consists of a
set of rules governing conditions under which actions are taken
in an attack. We designed the language for expressiveness in
representing and composing diverse attacker actions and for
extensibility so that attack descriptions can be reused, shared,
or extended across multiple implementations.
3) Attack Injector (Section VI): We implement the attack
model and attack language using an attack injector. The attack
injector interposes OpenFlow control protocol messages in the
network’s control plane to effect attacks and allow practi-
tioners to understand how such attacks manifest in controller,
switch, and end host behavior. We incorporate monitors in our
injector to record relevant control and data plane events.
IV. ATTACK MODEL
Modeling an attacker’s presumed capabilities is a necessary
prerequisite for deﬁning attacks. We deﬁne a system model for
understanding SDN’s interrelated components, a threat model
for scoping the vulnerabilities considered, and an attacker
capabilities model for constraining the attacker’s potential
capabilities based on user-speciﬁed assumptions.
A. System Model
The system model encapsulates the assumptions about an
SDN-enabled local area network (LAN) utilizing the Open-
Flow protocol. Our system model consists of controllers,
switches, end hosts, the data plane, and the control plane.
1) Controllers: The set of controllers, denoted by C =
{c1, c2, . . . cm}, set the forwarding behavior of the network or
query for information about the network’s current forwarding,
topological, or conﬁguration state. We assume that a functional
SDN network has at least one controller; that is, |C| ≥ 1.
2) Switches: The set of switches, denoted by S =
{s1, s2, . . . sk}, forward data plane trafﬁc;
the rules that
specify the forwarding behavior are determined by the net-
work’s controllers. We assume that a functional SDN network
has at least one switch; that is, |S| ≥ 1. Each switch si
contains a set of ports, which are interfaces used to send or
receive trafﬁc. The set of ports Pi in switch si is denoted by
Pi = {pi1 , pi2 , . . . pij
3) End hosts: The set of end hosts, denoted by H =
{h1, h2, . . . hn}, connect to the network’s edge; by this def-
inition, end hosts include workstations, servers, and gateway
interfaces to routers. We assume that a functional SDN net-
work has at least two end hosts; that is, |H| ≥ 2.
}.
4) Data plane: We model the data plane graphically to
represent topological connectivity. The data plane graph, ND,
is deﬁned as ND = (VND , END , AND
). VND is the set of
vertices in ND that includes all of the network’s switches and
= S ∪ H. END is the set of edges in ND
end hosts; VND
(p21 , p13 )
s1
s2
(p13 , p21
)
(NULL, p12 )
(p11 , NULL)
(NULL, p22
)
(NULL, p11
)
(p12 , NULL)
(p22 , NULL)
h1
h2
h3
Fig. 3. Example of a data plane graph ND with three hosts, h1, h2, h3,
and two switches, s1, s2. Vertices represent switches and end hosts; edges