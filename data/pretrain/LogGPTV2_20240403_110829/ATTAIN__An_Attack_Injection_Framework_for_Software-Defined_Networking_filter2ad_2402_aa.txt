# ATTAIN: An Attack Injection Framework for Software-Defined Networking

## Authors
Benjamin E. Ujcich, Uttam Thakore, and William H. Sanders

## Affiliations
- **Information Trust Institute**
- **Department of Electrical and Computer Engineering**
- **Department of Computer Science**
- **University of Illinois at Urbanaâ€“Champaign**

## Contact
Email: {ujcich2, thakore1, whs}@illinois.edu  
Location: Urbana, Illinois, USA

## Abstract
Software-Defined Networking (SDN) has gained significant interest due to its programmable and logically centralized nature, which can enhance cyber resiliency. However, the security of SDN architectures against malicious attacks is not well understood and must be ensured for robust systems. This paper introduces ATTAIN, an attack injection framework for OpenFlow-based SDN architectures. We define an attack model that maps system components to an attacker's capabilities, an attack language for writing control plane attacks, and an attack injector architecture to execute these attacks. We evaluate our framework using an enterprise network case study with popular SDN controllers.

## 1. Introduction
Software-Defined Networking (SDN) has been widely adopted in various settings, including research networks, enterprise networks, and data centers [1]. SDN decouples control protocol messages, which dictate how end-host traffic should be forwarded (the control plane), from the actual end-host traffic (the data plane). It centralizes forwarding decisions through programmable controllers, enabling better integration of network services and applications [1].

This flexibility opens new opportunities for network-wide cyber resiliency but also introduces new challenges. SDN controllers are now complex distributed network operating systems [3], and their implementation complexity may introduce security risks if software verification becomes infeasible.

We observe several security and dependability issues in OpenFlow-based SDN architectures:
1. Changes or queries about the network's state primarily rely on the OpenFlow control protocol, making these messages prime targets for attackers.
2. The OpenFlow specification leaves much open to interpretation regarding how controllers should use control protocol messages, allowing attackers to exploit subtle differences in controller and switch implementations.
3. Practitioners may hesitate to adopt SDN without a thorough understanding and rigorous testing of the associated risks. Systematic comparison and testing of SDN implementations are essential to understand their response to control protocol attacks [5].

Motivated by these observations, we introduce ATTAIN, a framework for ATTAck Injection in Software-Defined Networks. We draw on fault-tolerant computing practices to test control plane attacks in SDN implementations. We extend prior work on fault injection to include assumptions about an attacker's capabilities and propose a language for describing systematic control plane attacks. Our goal is to enable practitioners to write modular and reusable attack descriptions that can be run in a testing environment to collect security and performance metrics across different implementations.

We present the framework's components and demonstrate its use in a small-scale enterprise network case study. Specifically, we evaluate the Floodlight, POX, and Ryu SDN controllers by measuring security and performance metrics under attack conditions. Our results show that attacks can degrade data plane service, increase control plane traffic, and cause unauthorized access and denial of service. Even attacks on basic high-level network service abstractions, such as learning switches, manifest differently based on the SDN controller implementation, underscoring the need for a standardized and consistent evaluation method.

The contributions of our paper include:
- An attack model representing an attacker's presumed capabilities to disrupt the SDN control plane.
- An attack language for describing control plane attacks, enabling reusable test descriptions for cross-implementation testing and comparison.
- An attack injector architecture for orchestrating and monitoring attacks within an SDN implementation.
- A case study evaluating flow modification suppression and connection interruption attacks, and measuring representative performance and security metrics for the Floodlight, POX, and Ryu SDN controllers.

## 2. Background
Understanding SDN security requires analyzing the architectural differences between SDN and traditional networks. We provide context on the SDN architecture design, highlight inherent security challenges, and explain why we chose to use attack injection for testing security properties.

### 2.1. SDN Architecture
#### 2.1.1. Information Flow
Figure 1 illustrates the essential SDN architecture [1]. Network applications set the desired behavior and communicate requests to controllers via the northbound API. Controllers translate policy and behavior intents into low-level commands via the southbound API, where switches drive the forwarding behavior. End hosts communicate via switches. Controllers use the southbound API to query switches about network topology, end host information, and traffic statistics. Network applications can proactively query controllers for network information via the northbound API. Distributed controllers can communicate among themselves through an eastbound-westbound API [1].

#### 2.1.2. Planes
The SDN architecture is divided into three logical planes:
- **Application Plane**: Uses the network's current state to drive decisions and enforce network policies.
- **Control Plane**: Centralizes network behavior logic in one or more controllers, providing basic networking services like topology information and end host tracking [6].
- **Data Plane**: Forwards traffic among end hosts according to rules set by the control protocol. These rules can be implemented in hardware (e.g., TCAM) or software (e.g., OVS [7]).

#### 2.1.3. OpenFlow
The OpenFlow protocol [4, 8] serves as a standardized southbound API between controllers and switches. It defines switch behavior in response to protocol messages but leaves many controller specifications to software developers, except for protocol handshaking, configuration setup, and liveness.

#### 2.1.4. Architecture Security
Kreutz et al. [2] identify seven attack vectors affecting SDN dependability and security: forged or fake traffic flows, compromised switches, compromised machines running controllers, lack of diagnostics and forensics, control plane communications, controllers, and trust among network applications and controllers. The last three are unique to SDNs.

Attacks like ARP spoofing, which affect traditional networks, may manifest differently in SDN architectures based on the controller implementation. For example, Link Layer Discovery Protocol (LLDP) messages can be used to fabricate fake links, causing black hole routing [9].

### 2.2. Fault and Attack Injection
Fault and attack injectors intentionally introduce faults into systems for testing and validation. While they cannot prove a system's correctness, they can determine the set of outputs produced under unique or unusual conditions [10]. The goal of attack injection is to uncover the observable behavior of the network when under attack.

## 3. The ATTAIN Framework
To provide attack injection in the SDN context, we introduce the ATTAIN framework, consisting of an attack model, an attack language, and an attack injector. Figure 2 outlines our approach. A practitioner provides models, attacks, and the network infrastructure, and receives results for analysis and system evaluation. (For more details, see [11].)

### 3.1. Attack Model (Section 4)
We define an attack model to relate system components to an attacker's presumed capabilities to disrupt the control plane state.

### 3.2. Attack Language (Section 5)
We define an attack language for writing control plane attacks, subject to the attack model. Attacks are modeled in stages, called attack states, and represented graphically. Each state consists of rules governing conditions under which actions are taken. The language is designed for expressiveness and extensibility, allowing attack descriptions to be reused, shared, or extended across multiple implementations.

### 3.3. Attack Injector (Section 6)
We implement the attack model and attack language using an attack injector. The injector interposes OpenFlow control protocol messages in the network's control plane to effect attacks and allow practitioners to understand how such attacks manifest in controller, switch, and end host behavior. Monitors are incorporated to record relevant control and data plane events.

## 4. Attack Model
Modeling an attacker's presumed capabilities is essential for defining attacks. We define a system model for understanding SDN components, a threat model for scoping vulnerabilities, and an attacker capabilities model for constraining potential capabilities based on user-specified assumptions.

### 4.1. System Model
The system model encapsulates assumptions about an SDN-enabled local area network (LAN) using the OpenFlow protocol. It includes controllers, switches, end hosts, the data plane, and the control plane.

#### 4.1.1. Controllers
The set of controllers, denoted by \( C = \{c_1, c_2, \ldots, c_m\} \), sets the forwarding behavior of the network or queries for information about the network's current state. We assume a functional SDN network has at least one controller (\( |C| \geq 1 \)).

#### 4.1.2. Switches
The set of switches, denoted by \( S = \{s_1, s_2, \ldots, s_k\} \), forwards data plane traffic. The forwarding rules are determined by the controllers. We assume a functional SDN network has at least one switch (\( |S| \geq 1 \)). Each switch \( s_i \) contains a set of ports, \( P_i = \{p_{i1}, p_{i2}, \ldots, p_{ij}\} \), used to send or receive traffic.

#### 4.1.3. End Hosts
The set of end hosts, denoted by \( H = \{h_1, h_2, \ldots, h_n\} \), connects to the network's edge. End hosts include workstations, servers, and gateway interfaces to routers. We assume a functional SDN network has at least two end hosts (\( |H| \geq 2 \)).

#### 4.1.4. Data Plane
We model the data plane graphically to represent topological connectivity. The data plane graph, \( N_D \), is defined as \( N_D = (V_{ND}, E_{ND}, A_{ND}) \). \( V_{ND} \) is the set of vertices, including all switches and end hosts (\( V_{ND} = S \cup H \)). \( E_{ND} \) is the set of edges, and \( A_{ND} \) represents the attributes of the edges.

Figure 3 shows an example of a data plane graph \( N_D \) with three hosts and two switches. Vertices represent switches and end hosts, and edges represent connections between them.

```plaintext
Example of a data plane graph ND with three hosts, h1, h2, h3, and two switches, s1, s2.
Vertices represent switches and end hosts; edges represent connections.
```

This structured and detailed presentation ensures clarity, coherence, and professionalism in the text.