updated as part of the context switch and is always used for
the scheduled user space process. Furthermore, by reusing
the SDID of the OS, also shared memory between user space
processes can easily be implemented without security impact.
Interestingly, SCATTERCACHE fully preserves the capa-
bility of the OS to share read-only pages (i.e., libraries) also
across security domains as no cache lines will be shared. In
contrast, real shared memory has to always be accessed via
the same SDID in all processes to ensure data consistency.
In general, with SCATTERCACHE, as long as the respective
cache lines have not been ﬂushed to RAM, data always needs
to be accessed with the same SDID the data has been written
with to ensure correctness. This is also true for the OS, which
has to ensure that no dirty cache lines reside in the cache, e.g.,
when a page gets assigned to a new security domain.
A case which has to be explicitly considered by the OS is
copying data from user space to kernel space and vice versa.
The OS can access the user space via the direct-physical map
or via the page tables of the process. Thus, the OS has to
select the correct SDID for the PTE used when copying data.
Similarly, if the OS sets up page tables, it has to use the same
SDID as the MMU uses for resolving page tables.
4 Security Evaluation
SCATTERCACHE is a novel cache design to efﬁciently thwart
cache-based side-channel attacks. In the following, we inves-
tigate the security of SCATTERCACHE in terms of state-of-
the-art side-channel attacks using both theoretical analysis
and simulation-based results. In particular, we elaborate on
the complexity of building the eviction sets and explore the
necessary changes to the standard PRIME+PROBE technique
to make it viable on the SCATTERCACHE architecture.
4.1 Applicability of Cache Attacks
While certain types of cache attacks, such as FLUSH+FLUSH,
FLUSH+RELOAD and EVICT+RELOAD, require a particular
cache line to be shared, attacks such as PRIME+PROBE have
less stringent constraints and only rely on the cache being
a shared resource. As sharing a cache line is the result of
shared memory, we analyze the applicability of cache attacks
on SCATTERCACHE with regard to whether the underlying
memory is shared between attacker and victim or not.
Shared, read-only memory. Read-only memory is fre-
quently shared among different processes, e.g., in case of
shared code libraries. SCATTERCACHE prevents cache at-
tacks involving shared read-only memory by introducing se-
curity domains. In particular, SCATTERCACHE maintains a
separate copy of shared read-only memory in cache for each
security domain, i.e., the cache lines belonging to the same
shared memory region are not being shared in cache across
security domains anymore. As a result, reloading data into or
ﬂushing data out of the cache does not provide any informa-
tion on another security domain’s accesses to the respective
shared memory region. Note, however, that the cache itself is
shared, leaving attacks such as PRIME+PROBE still feasible.
Shared, writable memory. Exchanging data between pro-
cesses requires shared, writable memory. To ensure cache
coherency, writing shared memory regions must always use
the same cache line and hence the same security domain
for that particular memory region—even for different pro-
cesses. While attacks on these shared memory regions in-
volving flush instructions can easily be mitigated by mak-
ing these instructions privileged, EVICT+RELOAD remains
feasible. Still, SCATTERCACHE signiﬁcantly hampers the
construction of targeted eviction sets by skewing, i.e., individ-
ually addressing, the cache ways. Moreover, its susceptibility
to EVICT+RELOAD attacks is constrained to the processes
sharing the respective memory region. Nevertheless, SCAT-
TERCACHE requires writable shared memory to be used only
as an interface for data transfer rather than sensitive computa-
tions. In addition, PRIME+PROBE attacks are still possible.
682    28th USENIX Security Symposium
USENIX Association
Unshared memory. Unshared memory regions never
share the same cache line, hence making attacks such as
FLUSH+FLUSH, FLUSH+RELOAD and EVICT+RELOAD in-
feasible. However, as the cache component itself is shared,
cache attacks such as PRIME+PROBE remain possible.
As our analysis shows, SCATTERCACHE prevents a wide
range of cache attacks that exploit the sharing of cache lines
across security boundaries. While PRIME+PROBE attacks
cannot be entirely prevented as long as the cache itself is
shared, SCATTERCACHE vastly increases their complexity
in all aspects. The pseudorandom cache-set composition in
SCATTERCACHE prevents attackers from learning concrete
cache sets from memory addresses and vice versa. Even if
attackers are able to proﬁle information about the mapping of
memory addresses to cache-sets in their own security domain,
it does not allow them infer the mapping of cache-sets to mem-
ory addresses in other security domains. To gain information
about memory being accessed in another security domain, an
attacker needs to proﬁle the mapping of the attacker’s address
space to cache lines that are being used by the victim when
accessing the memory locations of interest. The effectiveness
of PRIME+PROBE attacks thus heavily relies on the complex-
ity of such a proﬁling phase. We elaborate on the complexity
of building eviction sets in Section 4.3.
4.2 Other Microarchitectural Attacks
Many other microarchitectural attacks are not fully miti-
gated but hindered by SCATTERCACHE. For instance, Melt-
down [43] and Spectre [38] attacks cannot use the cache
efﬁciently anymore but must resort to other covert channels.
Also, DRAM row buffer attacks and Rowhammer attacks are
negatively affected as they require to bypass the cache and
reach DRAM. While these attacks are already becoming more
difﬁcult due to closed row policies in modern processors [24],
we propose to make ﬂush instructions privileged, removing
the most widely used cache bypass. Cache eviction gets much
more difﬁcult with SCATTERCACHE and additionally, spu-
rious cache misses will open DRAM rows during eviction.
These spurious DRAM row accesses make the row hit side
channel impractical and introduce a signiﬁcant amount of
noise on the row conﬂict side channel. Hence, while these
attacks are not directly in the scope of this paper, SCATTER-
CACHE arguably has a negative effect on them.
4.3 Complexity of Building Eviction Sets
Cache skewing signiﬁcantly increases the number of different
cache sets available in cache. However, many of these cache
sets will overlap partially, i.e., in 1 ≤ i < nways ways. The
complexity of building eviction sets for EVICT+RELOAD
and PRIME+PROBE in SCATTERCACHE thus depends on the
overlap of cache sets.
4.3.1 Full Cache-Set Collisions
The pseudorandom assembly of cache sets in SCATTER-
CACHE results in 2bindices·nways different compositions. For
a given target address, this results in a probability of
2−bindices·nways of ﬁnding another address that maps exactly to
the same cache lines in its assigned cache set. While dealing
with this complexity alone can be considered impractical in a
real-world scenario, note that it will commonly even exceed
the number of physical addresses available in current systems,
rendering full cache-set collisions completely infeasible. A
4-way cache, for example, with bindices = 12 index bits yields
248 different cache sets, which already exceeds the address
space of state-of-the-art systems.
4.3.2 Partial Cache-Set Collisions
While full cache-set collisions are impractical, partial colli-
sions of cache sets frequently occur in skewed caches such
as SCATTERCACHE. If the cache sets of two addresses over-
lap, two cache sets will most likely have a single cache line
in common. For this reason, we analyze the complexity of
eviction for single-way collisions in more detail.
Randomized Single-Set Eviction. Without knowledge of
the concrete mapping from memory addresses to cache sets,
the trivial approach of eviction is to access arbitrary mem-
ory locations, which will result in accesses to pseudoran-
dom cache sets in SCATTERCACHE. To elaborate on the
performance of this approach, we consider a cache with
nlines = 2bindices cache lines per way and investigate the evic-
tion probability for a single cache way, which contains a
speciﬁc cache line to be evicted. Given that SCATTERCACHE
uses a random (re-)placement policy, the probabilities of each
cache way are independent, meaning that each way has the
same probability of being chosen. Subsequently, the attack
complexity on the full SCATTERCACHE increases linearly
with the number of cache ways, i.e., the attack gets harder.
The probability of an arbitrary memory accesses to a certain
cache way hitting a speciﬁc cache line is p = n−1
lines. Perform-
ing naccesses independent accesses to this cache way increases
the odds of eviction to a certain conﬁdence level α.
α = 1− (1− n−1
lines)naccesses
Equivalently, to reach a certain conﬁdence α in evicting the
speciﬁc cache line, attackers have to perform
E(naccesses) =
log(1− α)
log(1− n−1
lines)
independent accesses to this cache way, which amounts to
their attack complexity. Hence, to evict a certain cache set
from an 8-way SCATTERCACHE with 211 lines per way with
α = 99% conﬁdence, the estimated attack complexity using
this approach is naccesses · nways ≈ 216 independent accesses.
Randomized Multi-Set Eviction. Interestingly, eviction
of multiple cache sets using arbitrary memory accesses has
USENIX Association
28th USENIX Security Symposium    683
4 ways
8 ways
16 ways
20 ways
4 ways
8 ways
16 ways
20 ways
1
0.75
0.5
0.25
y
t
i
l
i
b
a
b
o
r
P
0
100
200
300
400
Eviction Set Size
Figure 5: Eviction probability depending on the size of the
eviction set and the number of ways.
similar complexity. In this regard, the coupon collector’s prob-
lem gives us a tool to estimate the number of accesses an at-
tacker has to perform to a speciﬁc cache way to evict a certain
percentage of cache lines in the respective way. In more detail,
the coupon collector’s problem provides the expected number
of accesses naccesses required to a speciﬁc cache way such that
nhit out of all nlines cache lines in the respective way are hit.
E(naccesses) = nlines · (Hnlines − Hnlines−hhit )
Hereby, Hn denotes the n-th Harmonic number, which can be
approximated using the natural logarithm. This approxima-
tion allows to determine the number of cache lines nhit that
are expected to be hit in a certain cache way when naccesses
random accesses to the speciﬁc way are performed.
− naccesses
nlines )
E(nhit ) = nlines · (1− e
(1)
Using nhit, we can estimate the number of independent ac-
cesses to be performed to a speciﬁc cache way such that a
portion β of the respective cache way is evicted.
E(naccesses) = −nlines · ln(1− β)
For the same 8-way SCATTERCACHE with 211 lines per way
as before, we therefore require roughly 216 independent ac-
cesses to evict β = 99% of the cache.
Proﬁled Eviction for PRIME+PROBE. As shown, rely-
ing on random eviction to perform cache-based attacks in-
volves signiﬁcant effort and yields an overapproximation of
the eviction set. Moreover, while random eviction is suitable
for attacks such as EVICT+RELOAD, in PRIME+PROBE set-
tings random eviction fails to provide information related to
the concrete memory location that is being used by a victim.
To overcome these issues, attackers may proﬁle a system to
construct eviction sets for speciﬁc memory addresses of the
victim, i.e., they try to ﬁnd a set of addresses that map to cache
sets that partially overlap with the cache set corresponding
to the victim address. Eventually, such sets could be used to
speed up eviction and to detect accesses to speciﬁc memory
locations. In the following, we analyze the complexity of ﬁnd-
ing these eviction sets. In more detail, we perform analysis
w.r.t. eviction addresses whose cache sets overlap with the
cache set of a victim address in a single cache way only.
s
e
s
s
e
c
c
A
m
i
t
c
i
V
109
108
107
106
0.25
0.5
0.75
1
1.5
2
Cache Size [MB]
Figure 6: Number of required accesses to the target address
to construct a set large enough to achieve 99 % eviction
rate when no shared memory is available (cache line size:
32 bytes).
To construct a suitable eviction set for PRIME+PROBE, the
attacker needs to provoke the victim process to perform the
access of interest. In particular, the attacker tests a candidate
address for cache-set collisions by accessing it (prime), wait-
ing for the victim to access the memory location of interest,
and then measuring the time when accessing the candidate
address again (probe). In such a proﬁling procedure, after the
ﬁrst attempt, we have to assume that the cache line belonging
to the victim access already resides in the cache. As a result,
attackers need to evict a victim’s cache line in their prime step.
Hereby, hitting the right cache way and index have probability
−1 and 2−bindices, respectively. To be able to detect a col-
nways
lision during the probe step, the victim access must then fall
into the same cache way as the candidate address, which has
−1. In total, the expected number of memory
a chance of nways
accesses required to construct an eviction set of t colliding
addresses hence is
E(naccesses) = nways
2 · 2bindices ·t.
The number of memory addresses t needs to be chosen accord-
ing to the desired eviction probability for the victim address
with the given set. When the eviction set consists of addresses
that collide in the cache with the victim in exactly one way
each, the probability of evicting the victim with an eviction
set of size t is
p(Eviction) = 1−
(cid:18)
1− 1
nways
(cid:19) t
nways
.
Figure 5 depicts this probability for the size of the eviction set
and different numbers of cache ways. For an 8-way SCATTER-
CACHE with 211 cache lines per way, roughly 275 addresses
with single-way cache collisions are needed to evict the re-
spective cache set with 99% probability. Constructing this
eviction set, in the best case, requires proﬁling of approx-
imately 82 · 211 · 275 ≈ 225 (33.5 million) victim accesses.
Figure 6 shows the respective number of PRIME+PROBE
experiments needed to generate sets with 99% eviction prob-
ability for different cache conﬁgurations. We were able to
empirically conﬁrm these numbers within a noise-free stan-
dalone simulation of SCATTERCACHE.
684    28th USENIX Security Symposium
USENIX Association
For comparison, to generate an eviction set on a commodity
cache, e.g., recent Intel processors, for a speciﬁc victim mem-
ory access, an attacker needs fewer than 103 observations
of that access in a completely noise-free attacker-controlled
scenario. Hence, our cache increases the complexity for the
attacker by factor 325000. In a real-world scenario the com-
plexity is even higher.
Proﬁled Eviction for EVICT+RELOAD. For shared mem-
ory, such as in EVICT+RELOAD, the construction of eviction
sets, however, becomes easier, as shared memory allows the
attacker to simply access the victim address. Hence, to build
a suitable eviction set, the attacker ﬁrst primes the victim ad-
dress, then accesses a candidate address, and ﬁnally probes
the victim address. In case a speciﬁc candidate address col-
lides with the victim address in the cache way the victim
access falls into , the attacker can observe this collision with
−1. As a result, the expected number
probability p = nways
of memory accesses required to build an eviction set of t
colliding addresses for EVICT+RELOAD is
E(naccesses) = nways · 2bindices ·t.
For an 8-way SCATTERCACHE with 211 lines per way, con-
structing an EVICT+RELOAD eviction set of 275 addresses
(i.e., 99% eviction probability) requires proﬁling with roughly
8 · 211 · 275 = 222 memory addresses. Note, however, that
EVICT+RELOAD only applies to writable shared memory as
used for Inter Process Communication (IPC), whereas SCAT-
TERCACHE effectively prevents EVICT+RELOAD on shared
read-only memory by using different cache-set compositions
in each security domain. Moreover, eviction sets for both
PRIME+PROBE and EVICT+RELOAD must be freshly cre-
ated whenever the key or the SDID changes.
4.4 Complexity of PRIME+PROBE
As demonstrated, SCATTERCACHE strongly increases the
complexity of building the necessary sets of addresses for
PRIME+PROBE. However, the actual attacks utilizing these
sets are also made more complex by SCATTERCACHE.
In this section, we make the strong assumption that an
attacker has successfully proﬁled the victim process such that
they have found addresses which collide with the victim’s
target addresses in exactly 1 way each, have no collisions
with each other outside of these and are sorted into subsets
corresponding to the cache line they collide in.