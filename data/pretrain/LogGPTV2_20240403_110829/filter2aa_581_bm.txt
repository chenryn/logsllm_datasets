### Endpoint of the AM, Passing the Access Token and SP Handle

1. The request must be digitally signed using the corresponding access token secret.
2. The Authorization Manager (AM) first validates the request, then evaluates the policies set by the user or resource owner, and finally sends the decision to the Service Provider (SP).
3. If the decision is a Deny, the location of the terms is returned to the SP, which then returns this location to the consumer with a 403 HTTP status code.

### Consumer Requesting Terms and Proving Legitimacy

4. The consumer requests the terms by communicating with the terms endpoint hosted in the AM. This request includes the consumer key, signed with the consumer secret.
5. Upon receiving the terms, the consumer evaluates them and sends additional information to the AM to prove its legitimacy. This request also includes the consumer key and is signed with the consumer secret.
6. The AM evaluates the additional information and claims provided by the consumer. If these meet the required criteria, the AM creates an agreement resource and sends the location of the agreement resource to the consumer.
7. If user consent is required, the AM must send the agreement for the user’s approval before providing the location of the agreement resource.
8. Once the consumer receives the location of the agreement resource, it can access the corresponding endpoint hosted in the AM to retrieve the agreement resource and check its status.

### Consumer Accessing Protected Resource with Valid OAuth Credentials

9. After approval by the authorization manager, the consumer can access the protected resource at the SP with its access token and the corresponding secret key:
   - The consumer attempts to access the protected resource at the SP, signing the request with the access token secret.
   - The SP communicates with the AM to obtain the secret key corresponding to the consumer’s access token. If needed, the SP can store this key locally.
   - The SP validates the signature of the request using the access token secret.
   - If the signature is valid, the SP communicates with the policy decision endpoint of the AM, passing the access token and SP handle, and signs the request with the corresponding access token secret.
   - The AM first validates the request, then evaluates the corresponding policies set by the user or resource owner, and finally sends the decision to the SP.
   - If the decision is an Allow, the SP returns the requested resource to the consumer.
   - The SP can cache the decision from the AM. Subsequent calls by the same consumer for the resource can utilize the cache instead of going to the AM.

### UMA and OAuth Evolution

Over the years, ProtectServe evolved into UMA. Initially, ProtectServe used OAuth 1.0 to protect its APIs. UMA transitioned from OAuth 1.0 to OAuth WRAP and then to OAuth 2.0. The UMA specification, developed under the Kantara Initiative over nearly three years, was submitted to the IETF OAuth working group on July 9, 2011, as a draft recommendation for a user-managed data access protocol.

### UMA 1.0 Architecture

The UMA architecture consists of five main components:
- **Resource Owner** (analogous to the user in ProtectServe)
- **Resource Server** (analogous to the service provider in ProtectServe)
- **Authorization Server** (analogous to the authorization manager in ProtectServe)
- **Client** (analogous to the consumer in ProtectServe)
- **Requesting Party**

These components interact during the three phases defined in the UMA core specification.

### UMA 1.0 Phases

#### Phase 1: Protecting a Resource
- The resource owner initiates this phase by introducing the resource servers associated with them to a centralized authorization server.
- The client initiates the second phase when it wants to access a protected resource. The client communicates with the authorization server to obtain the necessary authorization level to access the protected resource hosted in the resource server.
- In the third phase, the client directly accesses the protected resource.

#### Example: Protecting Distributed Resources
- Suppose a user has photos on Flickr, a calendar on Google, and a friend list on Facebook. To protect these resources, the user introduces the centralized authorization server to each resource server (Flickr, Google, and Facebook).
- The resource owner logs into each resource server and provides the authorization server configuration endpoint. The authorization server must provide its configuration data in JSON format.

Example Configuration Data:
```json
{
   "version":"1.0",
   "issuer":"https://auth.server.com",
   "pat_profiles_supported":["bearer"],
   "aat_profiles_supported":["bearer"],
   "rpt_profiles_supported":["bearer"],
   "pat_grant_types_supported":["authorization_code"],
   "aat_grant_types_supported":["authorization_code"],
   "claim_profiles_supported":["openid"],
   "dynamic_client_endpoint":"https://auth.server.com/dyn_client_reg_uri",
   "token_endpoint":"https://auth.server.com/token_uri",
   "user_endpoint":"https://auth.server.com/user_uri",
   "resource_set_registration_endpoint":"https://auth.server.com/rs/rsrc_uri",
   "introspection_endpoint":"https://auth.server.com/rs/status_uri",
   "permission_registration_endpoint":"https://auth.server.com/perm_uri",
   "rpt_endpoint":"https://auth.server.com/rpt",
   "authorization_request_endpoint":"https://auth.server.com/authorize"
}
```

#### Client Registration
- The resource server registers at the authorization server via the dynamic client registration endpoint.
- The client registration endpoint can be secured with OAuth, HTTP Basic authentication, Mutual TLS, or other security protocols.
- A sample JSON message for client registration:
```http
POST /register HTTP/1.1
Content-Type: application/json
Accept: application/json
Host: authz.server.com

{
    "redirect_uris":["https://client.org/callback","https://client.org/callback2"],
    "token_endpoint_auth_method":"client_secret_basic",
    "grant_types": ["authorization_code", "implicit"],
    "response_types": ["code", "token"]
}
```
- A successful client registration results in a JSON response including the client identifier and secret:
```http
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
   "client_id":"iuyiSgfgfhffgfh",
   "client_secret": "hkjhkiiu89hknhkjhuyjhk",
   "client_id_issued_at":2343276600,
   "client_secret_expires_at":2503286900,
   "redirect_uris":["https://client.org/callback","https://client.org/callback2"],
   "grant_types": "authorization_code",
   "token_endpoint_auth_method": "client_secret_basic"
}
```

#### Obtaining a Protection API Token (PAT)
- The resource server obtains a PAT to access the Protection API exposed by the authorization server.
- The PAT is issued per resource server, per resource owner.
- The authorization server configuration file declares the types of PATs it supports and the method to obtain them.

Example Authorization Code Grant Request for PAT:
```http
GET /authorize?response_type=code
   &client_id=dsdasDdsdsdsdsdas
   &state=xyz
   &redirect_uri=https://flickr.com/callback
   &scope=http://docs.kantarainitiative.org/uma/scopes/prot.json
HTTP/1.1 Host: auth.server.com
```

#### Registering a Resource Set
- The resource server uses the PAT to register a set of resources that need protection via the Resource Set Registration API.

#### Phase 2: Getting Authorization
- The client tries to access a resource hosted in the resource server and gets an HTTP 403 status code.
- The resource server includes the endpoint (as_uri) of the corresponding authorization server where the client can obtain a Requesting Party Token (RPT).

Example 403 Response:
```http
HTTP/1.1 403 Forbidden
WWW-Authenticate: UMA realm="my-realm",
                      host_id="photos.flickr.com",
                      as_uri=https://auth.server.com
```

#### Obtaining an Authorization API Token (AAT)
- The client must have an AAT to talk to the RPT endpoint of the authorization server.
- The client can use the OAuth Dynamic Client Registration API or any other preferred method to register.
- The client initiates the OAuth authorization code grant type flow to obtain an AAT.

Example Authorization Code Grant Request for AAT:
```http
GET /authorize?response_type=code
   &client_id=dsdasDdsdsdsdsdas
   &state=xyz
   &redirect_uri=https://flickr.com/callback
   &scope=http://docs.kantarainitiative.org/uma/scopes/authz.json
HTTP/1.1 Host: auth.server.com
```

#### Obtaining an RPT
- The client authenticates with the AAT to get the RPT from the authorization server’s RPT endpoint.

Example RPT Request:
```http
POST /rpt HTTP/1.1
Host: as.example.com
Authorization: Bearer GghgjhsuyuE8heweds
```

Example RPT Response:
```http
HTTP/1.1 201 Created
Content-Type: application/json

{
     "rpt": "dsdsJKhkiuiuoiwewjewkej"
}
```

#### Introspection and Permission Registration
- The resource server extracts the RPT from the resource request and uses the Introspection API to validate the RPT and check permissions.
- If the RPT lacks sufficient permissions, the resource server registers the required permissions via the Client Requested Permission Registration API.

Example Permission Registration Request:
```http
POST /perm_uri HTTP/1.1
Content-Type: application/json
Host: auth.server.com

{
    "resource_set_id": "1122wqwq23398100",
    "scopes": [
        "http://photoz.flickr.com/dev/actions/view"
    ]
}
```

This structured and detailed explanation should help in understanding the UMA and OAuth processes more clearly.