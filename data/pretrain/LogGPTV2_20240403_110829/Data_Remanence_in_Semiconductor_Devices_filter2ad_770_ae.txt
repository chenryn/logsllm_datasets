Select gate (source)
Word line 1
Word line 2
Word line 3
Word line 4
Select gate (drain)
Figure 13: NAND flash memory structure 
6.4. Data Remanence in EEPROM/Flash 
Memory 
The  number  of  write  cycles  possible  with  EEPROM 
technology  is  limited  because  the  floating  gate  slowly 
accumulates electrons, causing a gradual increase in the 
storage  transistor’s  threshold  voltage  which  manifests 
(in its most observable form) as increased programming 
time  and,  eventually,  an  inability  to  erase  the  cell.  
Although EEPROM/flash cells can typically endure 1M 
or  more  write/erase  cycles,  the  presence  of  slight 
defects in the tunnelling oxide (leading to leakage and 
eventual  breakdown  during  the  tunnelling  process) 
reduces the effective life of the entire collection of cells 
to  10–100k  write/erase  cycles. 
  This  problem  is 
significantly reduced in flash memory cells, where the 
main  failure  mode  appears  to  be  negative  charge 
trapping (that is, the trapping of holes in the gate oxide) 
which  inhibits  further  CHE  injection  and  tunnelling, 
changing  the  write  and  erase  times  of  the  cell  and 
shifting its threshold voltage [61][62].  The amount of 
trapped  charge  can  be  determined  by  measuring  the 
gate-induced  drain  leakage  (GIDL)  current  of  the  cell 
[63],  or its effects  can be  observed more  indirectly by 
measuring  the  threshold  voltage  of  the  cell.    In  older 
devices  which  tied  the  reference  voltage  used  to  read 
the  cell  to  the  device  supply  voltage  it  was  often 
possible to do this (and perform other interesting tricks 
such  as  making  a  programmed  cell  appear  erased  and 
vice  versa)  by  varying  the  device  supply  voltage,  but 
with  newer  devices  it’s  necessary  to  change  the 
parameters  of  the  reference  cells  used  in  the  read 
process, either by re-wiring portions of the cell circuitry 
or  by  using  undocumented  test  modes  built  into  the 
device by manufacturers. 
A  less  common  failure  mode  which  occurs  with  the 
very  thin  tunnel  oxides  used  in  flash  memory  is  one 
where unselected erased cells adjacent to selected cells 
gain charge when the selected cell is written (known as 
a  programming  disturb)  due  to  the  gate  of  the 
unselected  transistor  being  stressed  by  the  voltage 
applied  to  the  common  data  line  shared  with  the 
selected  transistor.    There  are  various  subfamilies  of 
programming  disturbs  including  bitline  (also  called 
drain-)  and  word  line  (also  called  gate-)  disturbs,  in 
which  bias  on  the  common  bit  or  word  line  causes 
charge to be injected from the substrate into the floating 
gate of an unselected cell [64][65].  This isn’t enough to 
change the cell threshold sufficiently to upset a normal 
read  operation,  but  should  be  detectable  using  the 
specialised techniques described above.  There is also a 
type  of  disturb  which  can  occur  when  extensive  read 
cycles are performed, with this type of disturb holes are 
generated  in  the  substrate  via  impact  ionisation  and 
injected into the floating gate, causing a loss of charge.  
This appears to only affect so-called fast-programming 
cells [66] (which erase and program a lot quicker than 
typical  cells)  and  isn’t  useful  in  determining  the  cell 
contents  since  it  requires  knowledge  of  the  cell’s  pre-
stress  characteristics  to  provide  a  baseline  to  compare 
the post-stress performance to. 
In  terms  of  long-term  retention  issues,  there  is  a 
phenomenon  called  field-assisted  electron  emission  in 
which  electrons  in  the  floating  gate  migrate  to  the 
interface  with  the  underlying  oxide  and  from  there 
tunnel into the substrate, causing a net charge loss.  The 
opposite  occurs  with  erased  cells,  in  which  electron 
injection takes place [67].  Finally, just as with DRAM 
cells,  EEPROM/flash  cells  are  also  affected  by  ionic 
contamination  since  the  negatively-charged  floating 
gate  attracts  positive  ions  which  induce  charge  loss, 
although  the  effect  is  generally  too  miniscule  to  be 
measurable. 
The  means  of  detecting  these  effects  is  as  for  RAM 
cells  and  MOSFET  devices  in  general,  for  example 
measuring the change in cell threshold, gate voltage, or 
observing  other  phenomena  which  can  be  used  to 
characterise  the  cell’s  operation.    The  changes  are 
particularly apparent in virgin and freshly-programmed 
cells, where the first set of  write/erase cycles causes a 
(comparatively)  large  shift  in  the  cell  thresholds,  after 
which  changes  are  much  more  gradual  [52][65]  (as 
usual,  this  is  device-dependant,  for  example  the  high 
injection  MOS  or  HIMOS  cell  exhibits  somewhat 
different  behaviour  than  FLOTOX  and  ETOX  cells 
[68]).    Because  of  this  it’s  possible  to  differentiate 
between 
never-
programmed  cells,  particularly  if  the  cells  have  only 
been programmed and erased once, since the virgin cell 
characteristics  will  differ 
the  erased  cell 
programmed-and-erased 
from 
and 
can 
also 
have 
threshold  shift  when  a  virgin  cell 
characteristics.  Another phenomenon which helps with 
this  is  overerasing, in  which an  erase  cycle  applied  to 
an already-erased cell leaves the floating gate positively 
charged,  thus  turning  the  memory  transistor  into  a 
depletion-mode transistor.  To avoid this problem, some 
devices first program all cells before erasing them (for 
example  Intel’s original ETOX-based devices did this, 
programming the  cells to 0s before erasing them to 1s 
[54]), although the problem is more generally solved by 
redesigning  the  cell  to  avoid  excessive  overerasing, 
however  even  with  this  protection  there’s  still  a 
noticeable 
is 
programmed and erased. 
EEPROM/flash  memory 
its 
characteristics  altered  through  hot  carriers  which  are 
generated by band-to-band tunnelling and accelerated in 
the MOSFET’s depletion region, resulting in changes in 
the  threshold  voltages  of  erased  cells.    As  with  other 
factors which affect  EEPROM/flash  cells,  the  changes 
are  particularly  apparent  in  fresh  cells  but  tend  to 
become  less  noticeable  after  around  10  program/erase 
cycles [61]. 
Finally, as with SLS features in RAM, EEPROM/flash 
memory often contains built-in features which allow the 
recovery  of  data  long  after  it  should  have,  in  theory, 
been deleted.  The mapping out of failing sectors which 
parallels  the  sector  sparing  used  in  disk  drives  has 
already been mentioned, there also exist device-specific 
peculiarities such as the fact that data can be recovered 
from  the  temporary  buffers  used  in  the  program-
without-erase  mode  employed  in  some  high-density 
flash memories, allowing recovery of both the new data 
which  was  written  and  the  original  data  in  the  sector 
being written to [60]. 
Working at a slightly higher level than the device itself 
are  various  filesystem-level  wear-levelling  techniques 
which  are  used  to  decrease  the  number  of  erase 
operations which are necessary to update data, and the 
number  of  writes  to  a  single  segment  of  flash  [69].  
Flash  file  systems  are  generally  log-structured  file 
systems which write changed data to a new location in 
memory  and  garbage-collect  leftover  data  in  the 
background  or  as  needed,  with the  exact  details  being 
determined  by  a  cleaning  policy  which  determines 
which memory segments to clean, when to clean them, 
and where to write changed data [70][71][72].  Because 
of this type of operation it’s not possible to cycle fresh 
cells to reduce remanence effects without bypassing the 
filesystem,  in  fact  the  operation  of  the  wear-levelling 
system  acts  to  create  a  worst-case  situation  in  which 
data is always written to fresh cells.  Trying to burn in 
an area of storage by creating a file and overwriting it 
10-100 times will result in that many copies of the data 
being written to different storage locations, followed by 
storage 
since  pseudorandom 
the actual data being written to yet another fresh storage 
location.  Even writing enough data to cycle through all 
storage  locations  (which  may  be  unnecessarily  painful 
when the goal is to secure a 1 kB data area on a device 
containing  256 MB  of  non-critical  data)  may  not  be 
sufficient, 
location 
selection techniques can result in some locations being 
overwritten  many  times  and  others  being  overwritten 
only a handful of times. 
There is no  general solution to this problem, since the 
goal  of  wear-levelling  is  the  exact  opposite  of  the 
(controlled)  wearing  which 
to  avoid 
remanence  problems. 
  Some  possible  application-
specific  solutions  could  include  using  direct  access  to 
memory  cells  if  available,  or  using  knowledge  of  the 
particular device- or filesystem’s cleaning policy to try 
and  negate  it  and  provide  the  required  controlled 
wearing.    Since  this  involves  bypassing  the  primary 
intended  function  of  the  filesystem,  it’s  a  somewhat 
risky and tricky move. 
is  needed 
the  continuing 
7. Conclusion 
Although the wide variety of devices and technologies 
in  use,  and 
introduction  of  new 
technologies not explicitly addressed in this work, make 
providing specific guidelines impossible, the following 
general design rules should help in making it harder to 
recover data from semiconductor memory and devices: 
 Don’t  store  cryptovariables  for  long  time 
periods in RAM.  Move them to new locations 
from  time  to  time  and  zeroise  the  original 
storage, or flip the bits if that’s feasible. 
 Cycle EEPROM/flash cells 10-100 times with 
random data before writing anything sensitive 
to  them  to  eliminate  any  noticeable  effects 
arising from the use of fresh cells (but see also 
the  point  further  down  about  over-intelligent 
non-volatile storage systems). 
reuses 
constantly, 
 Don’t  assume  that  a  key  held  in  RAM  in  a 
piece  of  crypto  hardware  such  as  an  RSA 
same 
accelerator,  which 
cryptovariable(s) 
been 
destroyed  when  the  RAM  has  been  cleared.  
Hot-carrier and electromigration effects in the 
crypto  circuitry  could  retain  an  afterimage  of 
the key long after the original has leaked away 
into the substrate. 
the 
has 
 As a corollary, try and design devices such as 
RSA  accelerators  which  will 
reuse  a 
cryptovariable  over  and  over  again  in  such  a 
way  that  they  avoid  repeatedly  running  the 
same signals over dedicated data lines. 
 Remember  that  some  non-volatile  memory 
devices  are  a  little  too  intelligent,  and  may 
leave  copies  of  sensitive  data  in  mapped-out 
memory blocks after the active copy has been 
erased.    Devices  and/or  filesystems  which 
implement  wear-levelling  techniques  are  also 
problematic  since  there’s  no  way  to  know 
where your data is really going unless you can 
access the device at a very low level. 
Finally,  however, 
the  best  defence  against  data 
remanence  problems  in  semiconductor  memory  is,  as 
with  the  related  problem  of  data  stored  on  magnetic 
media,  the  fact  that  ever-shrinking  device  dimensions 
(DRAM  density  is  increasing  by  50%  per  year  [73]), 
and  the  use  of  novel  techniques  such  as  multilevel 
storage (which is being used in flash memory and may 
eventually make an appearance in DRAM as well [74]) 
is  making  it  more  and  more  difficult  to  recover  data 
from  devices.    As  the  1996  paper  suggested  for 
magnetic  media,  the  easiest  way  to  make  the  task  of 
recovering  data  difficult is to  use  the  newest,  highest-
density (and by extension most exotic) storage devices 
available. 
Acknowledgements 
The author would like to thank Steve Weingart and the 
referees for their feedback and comments on this paper 
and  Dr.Veng-cheong  Lo  for  permission  to  reproduce 
the electromigration images. 
References 
[1]  “Introductory Semiconductor Device Physics”, Greg 
Parker, Prentice Hall, 1994. 
[2]  “Fundamentals of Modern VLSI Devices”, Yuan Taur 
and Tak Ning, Cambridge University Press, 1998. 
[3]  “Semiconductor Memories: Technology, Testing, and 
Reliability”, Ashok Sharma, IEEE Press, 1997. 
[4]  “DRAM Variable Retention Time”, P.Restle, J.Park, and 
B.Lloyd, International Electron Devices Meeting 
(IEDM’92) Technical Digest, December 1992, p.807. 
[5]  “A Numerical Analysis of the Storage Times of 
Dynamic Random-Access Memory Cells Incorporating 
Ultrathin Dielectrics”, Alex Romanenko and W.Milton 
Gosney, IEEE Transactions on Electron Devices, 
Vol.45, No.1 (January 1998), p.218. 
[6]  “Advanced Cell Structures for Dynamic RAMs”, Nicky 
Lu, IEEE Circuits and Devices Magazine, Vol.5, No.1 
(January 1989), p.27. 
[7]  “DRAM Technology Perspective for Gigabit Era”, 
Kinam Kim, Chang-Gyu Hwang, and Jong Gil Lee, 
IEEE Transactions on Electron Devices, Vol.45, No.3 
(March 1998), p.598. 
[8]  “Electromigration for Designers: An Introduction for the 
Non-Specialist”, J.Lloyd, 
http://www.simplex.com/udsm/whitepaper
s/electromigration1/index.html. 
Kash, and David Vallett, Proceedings of the IEEE, 
Vol.88, No.9 (September 2000), p.1440. 