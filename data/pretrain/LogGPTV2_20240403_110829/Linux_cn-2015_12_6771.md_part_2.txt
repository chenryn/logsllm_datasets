**技巧** 缓存通常会被保存到磁盘上，但你可以用 [tmpfs](https://www.kernel.org/doc/Documentation/filesystems/tmpfs.txt) 将缓存放在内存中来提高性能。
为 WordPress 配置 NGINX 很容易。仅需四步，其详细的描述在指定的技巧中：
1. 添加永久链接的支持 - 让 NGINX 支持永久链接。此步消除了对 **.htaccess** 配置文件的依赖，这是 Apache 特有的。参见 技巧 4。
2. 配置缓存 - 选择一个缓存工具并安装好它。可选择的有 FastCGI cache，W3 Total Cache, WP Super Cache, Hyper Cache, 和 Quick Cache。请看技巧 5、 6 和 7。
3. 落实安全防范措施 - 在 NGINX 上采用对 WordPress 最佳安全的做法。参见 技巧 8。
4. 配置 WordPress 多站点 - 如果你使用 WordPress 多站点，在 NGINX 下配置子目录，子域，或多域名架构。见 技巧9。
### 技巧 4. 让 NGINX 支持永久链接
许多 WordPress 网站依赖于 **.htaccess** 文件，此文件为 WordPress 的多个功能所需要，包括永久链接支持、插件和文件缓存。NGINX 不支持 **.htaccess** 文件。幸运的是，你可以使用 NGINX 的简单而全面的配置文件来实现大部分相同的功能。
你可以在你的主 [server](http://nginx.org/en/docs/http/ngx_http_core_module.html#server) 块下添加下面的 location 块中为使用 NGINX 的 WordPress 启用 [永久链接](http://codex.wordpress.org/Using_Permalinks)。（此 location 块在其它代码示例中也会被包括）。
**try\_files** 指令告诉 NGINX 检查请求的 URL 在文档根目录（**/var/www/example.com/htdocs**）下是作为文件(**$uri**)还是目录(**$uri/**) 存在的。如果都不是，NGINX 将重定向到 **/index.php**，并传递查询字符串参数作为参数。
```
server {
    server_name example.com www.example.com;
    root /var/www/example.com/htdocs;
    index index.php;
    access_log /var/log/nginx/example.com.access.log;
    error_log  /var/log/nginx/example.com.error.log;
    location / {
        try_files $uri $uri/ /index.php?$args;
    }
}
```
### 技巧 5. 在 NGINX 中配置 FastCGI
NGINX 可以缓存来自 FastCGI 应用程序的响应，如 PHP 响应。此方法可提供最佳的性能。
对于开源的 NGINX，编译入第三方模块 [ngx\_cache\_purge](https://github.com/FRiCKLE/ngx_cache_purge) 可以提供缓存清除能力，配置代码如下所示。NGINX Plus 已经包含了它自己实现此代码。
当使用 FastCGI 时，我们建议你安装 [NGINX 辅助插件](https://wordpress.org/plugins/nginx-helper/) 并使用下面的配置文件，尤其是要注意 **fastcgi\_cache\_key** 的使用和包括 **fastcgi\_cache\_purge** 的 location 块。当页面发布或有改变时，有新评论被发布时，该插件会自动清除你的缓存，你也可以从 WordPress 管理控制台手动清除。
NGINX 的辅助插件还可以在你网页的底部添加一个简短的 HTML 代码，以确认缓存是否正常并显示一些统计数据。（你也可以使用 [$upstream*cache*status](http://nginx.org/en/docs/http/ngx_http_upstream_module.html#variables) 确认缓存功能是否正常。）
```
fastcgi_cache_path /var/run/nginx-cache levels=1:2       
               keys_zone=WORDPRESS:100m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";
server {
    server_name example.com www.example.com;
    root /var/www/example.com/htdocs;
    index index.php;
    access_log /var/log/nginx/example.com.access.log;
    error_log  /var/log/nginx/example.com.error.log;
    set $skip_cache 0;
    ### POST 请求和带有查询参数的网址应该交给 PHP
    if ($request_method = POST) {
        set $skip_cache 1;
    }   
    if ($query_string != "") {
        set $skip_cache 1;
    }   
    ### 以下 uris 中包含的部分不缓存
    if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php
                         |sitemap(_index)?.xml") {
        set $skip_cache 1;
    }   
    ### 不要为登录用户或最近的评论者进行缓存
    if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass
        |wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
    }
    location / {
        try_files $uri $uri/ /index.php?$args;
    }    
    location ~ \.php$ {
        try_files $uri /index.php;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;
        fastcgi_cache WORDPRESS;
        fastcgi_cache_valid  60m;
    }
    location ~ /purge(/.*) {
        fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";
    }   
    location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png
                      |ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
        access_log off; 
        log_not_found off;
        expires max;
    }
    location = /robots.txt {
        access_log off;
        log_not_found off;
    }
    location ~ /\. {
        deny  all; 
        access_log off;
        log_not_found off;
    }
}
```
### 技巧 6. 为 NGINX 配置 W3\_Total\_Cache
[W3 Total Cache](https://wordpress.org/plugins/w3-total-cache/), 是 [W3-Edge](http://www.w3-edge.com/) 的 Frederick Townes 出品的， 是一个支持 NGINX 的 WordPress 缓存框架。其有众多选项配置，可以替代 FastCGI 缓存。
这个缓存插件提供了各种缓存配置，还包括数据库和对象的缓存，最小化 HTML、CSS 和 JavaScript，并可选与流行的 CDN 整合。
这个插件会通过写入一个位于你的域的根目录的 NGINX 配置文件来控制 NGINX。
```
server {
    server_name example.com www.example.com;
    root /var/www/example.com/htdocs;
    index index.php;
    access_log /var/log/nginx/example.com.access.log;
    error_log  /var/log/nginx/example.com.error.log;
    include /path/to/wordpress/installation/nginx.conf;
    location / {
        try_files $uri $uri/ /index.php?$args;
    }
    location ~ \.php$ {
        try_files $uri =404;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
    }
}
```
### 技巧 7. 为 NGINX 配置 WP Super Cache
[WP Super Cache](https://wordpress.org/plugins/wp-super-cache/) 是由 Donncha O Caoimh 开发的, 他是 [Automattic](http://automattic.com/) 的一个 WordPress 开发者, 这是一个 WordPress 缓存引擎，它可以将 WordPress 的动态页面转变成静态 HTML 文件，以使 NGINX 可以很快的提供服务。它是第一个 WordPress 缓存插件，和其它的相比，它更专注于某一特定的领域。
配置 NGINX 使用 WP Super Cache 可以根据你的喜好而进行不同的配置。以下是一个示例配置。
在下面的配置中，带有名为 supercache 的 location 块是 WP Super Cache 特有的部分。 WordPress 规则的其余代码用于不缓存已登录用户的信息，不缓存 POST 请求，并对静态资源设置过期首部，再加上标准的 PHP 处理；这部分可以根据你的需求进行定制。
```
server {
    server_name example.com www.example.com;
    root /var/www/example.com/htdocs;
    index index.php;
    access_log /var/log/nginx/example.com.access.log;
    error_log  /var/log/nginx/example.com.error.log debug;
    set $cache_uri $request_uri;
    ### POST 请求和带有查询字符串的网址应该交给 PHP
    if ($request_method = POST) {
        set $cache_uri 'null cache';
    }  
    if ($query_string != "") {
        set $cache_uri 'null cache';
    }   
    ### 以下 uris 中包含的部分不缓存
    if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php
                          |wp-.*.php|/feed/|index.php|wp-comments-popup.php
                          |wp-links-opml.php|wp-locations.php |sitemap(_index)?.xml
                          |[a-z0-9_-]+-sitemap([0-9]+)?.xml)") {
        set $cache_uri 'null cache';
    }  