tion is then used to allow variable input lengths. As such, in
order to generate a DFG wherein the construction is apparent,
we need it to incorporate several iterations, and perform inlin-
ing of F. The former is problematic (as per the stream cipher
example), and so is the latter in case F performs some kind
of input validation, for e.g. checking for NULL pointers.
4 Solution overview
Cryptographic primitives are essentially a set of arithmetic
and logical operations representing an input/output relation.
This structural relationship between operations and data can
be expressed as a DFG. Since all particular algorithms will
be structurally similar to the general primitive deﬁning their
taxonomical class, the problem of identifying an unknown
algorithm assumed to belong to a well-deﬁned taxonomical
class can be formulated as a DFG subgraph isomorphism prob-
lem. However, due to slight differences in implementation
and compiler peculiarities, DFG representations of semanti-
cally identical algorithms may differ and such representations
require normalization before they can be subjected to iso-
morphism analysis. Lestringant et al. [43] demonstrated that,
by repeatedly applying a set of rewrite rules to the DFG, a
normalized version is obtained, wherein many of these varia-
tions are removed. Although no guarantee can be given that
equivalent semantics will always map to the same DFG, the
result is ‘good enough’ to serve as a data structure for the
purpose.
The identiﬁcation procedure consists of three stages. A
diagram of the procedure is given in Figure 2. First, given the
entry point of a function, we start executing it symbolically.
A DFG is constructed during the execution, where each in-
struction adds a set of nodes and edges to the graph. In case
a conditional instruction is encountered, the execution path
belonging to the condition evaluating to true, false, or both
paths are explored. In the latter case, the partially constructed
DFG is duplicated and the construction continues indepen-
dently for both execution paths. Hence, the ﬁnal result of the
DFG construction phase is, in fact, a set of DFGs describing
the input/output relation corresponding to the execution path
taken. Section 5 describes the construction phase in detail.
Second, once a DFG is fully constructed, we enter the purg-
ing phase. This phase is responsible for removing nodes from
the graph that represent neither an output, nor a value used in
the computation of any output. As such, the graph is reduced
to a form in which it only represents the input/output rela-
tion, free from operations introduced due to register spilling
and other possible implementation, compiler, and architecture-
speciﬁc operations that are irrelevant to the function’s seman-
tics. Section 7 describes the purging phase in detail.
Last, with the ﬁnalized DFG at our disposal, we enter the
pattern-matching phase, where we search for subgraphs in
the DFG that are isomorphic to the graph signature of a given
cryptographic primitive. If such a subgraph is identiﬁed, we
conclude that the primitive is indeed present in the instruc-
tions from which the DFG was generated. We use Ullmann’s
subgraph isomorphism algorithm for searching the DFG. Sec-
tion 8 describes the pattern-matching phase in detail.
5 Data Flow Graph construction
The approach of constructing the DFG from assembly instruc-
tions builds upon that of [43]. This section summarizes their
approach, and indicates where ours departs from it.
Suppose we have a sequence of assembly instructions. We
construct its corresponding DFG, G = (V,E), by converting
each instruction i into a set of operations Oi, which can po-
tentially be empty (e.g., a NOP or branch), or contain multiple
operations (e.g., a complex instruction). We distinguish three
cases based on input type, as follows:
Immediate We create a vertex representing a constant value
in G. It is linked by an edge to Oi.
Register
In case an instruction takes a register as an input
operand, we create an edge between the last value written to
that register and Oi. In practice, this means we maintain an
array containing, for each register, a reference to the vertex in
G corresponding to that value.
Memory For operands that load or store from/to memory,
we create LOAD and STORE operations. Both operations take
a memory address vertex as input. Like any other vertex,
the address can be a constant, or a more complex symbolic
expression.
558    30th USENIX Security Symposium
USENIX Association
Underdetermined condition
DFG
Purge
Canonical DFG
Function entry point
Execute symbolically/
Generate DFGs
DFG
Purge
Canonical DFG
Signature
Signature
DFG
Purge
Canonical DFG
Figure 2: Diagram of primitive identiﬁcation process
Subgraph
Isomorphism
Subgraph
Isomorphism
Subgraph
Isomorphism
Classiﬁcation result
Classiﬁcation result
Classiﬁcation result
Ideally, we would like all code fragments within a semantic
equivalence class to map to the same DFG, and have the end
result represent the semantics only, free from architecture and
compiler-speciﬁc traits. The approach followed by [43] is to
take the generated DFG, and repeatedly apply normalization
rewrite rules until a ﬁxed-point is reached. This is where
our approach deviates from theirs, as we apply normalization
as well, but continuously during graph construction. This
enhances performance, which we argue below in Section 5.1,
and allows us to efﬁciently keep track of the conditions that
apply during symbolic execution (Section 6).
1(cid:13) Speciﬁcation
2(cid:13) Normalization
3(cid:13) Query existence
Processor module
Broker
DFG
5(cid:13) Node reference
4(cid:13) Node reference
Figure 3: Flow of the graph-node creation process
A diagram of the graph-node creation process is given in
Figure 3. More concretely: there is a processor module, writ-
ten for a speciﬁc architecture that translates each instruction
into graph nodes. The processor module cannot autonomously
create new graph nodes. Instead, it must interact with the bro-
ker. The broker is responsible for the application of normal-
ization rewrite rules and is processor-architecture agnostic.
The processor module provides a speciﬁcation of the desired
node to the broker, which in turn applies normalization rewrite
rules to the speciﬁcation. As such, the result either matches
the speciﬁcation exactly, or a different one that is semantically
equivalent. After normalization, the broker queries the DFG
for whether a node conforming to the normalized speciﬁcation
already exists. If it does, a reference to it is returned, rather
than a new node being created. Consequently, there cannot
exist two distinct nodes in a graph conforming to the same
speciﬁcation, or equivalent under normalization. We prove
this property in Lemma 1.
Lemma 1. Let G = (V,E) be a DFG, and h denote the nor-
malization transform, for which holds: (1) h(h(x)) = h(x) for
all x ∈ U (universe). Consider arbitrary arithmetic/logical
operation op(v1,v2), where v1,v2 ∈ V .
A broker request for op preserves the following properties:
(i) For all v ∈ V , v = h(v), i.e. all nodes in G are normalized.
(ii) For all v1,v2 ∈ V , h(v1) = h(v2) =⇒ v1 = v2, i.e. all
nodes in G belong to a unique equivalence class under the
normalization function.
Proof. Assume (i) and (ii) hold for V . We deﬁne q =
h(op(v1,v2)) and distinguish two cases.
If q ∈ V , then G is not modiﬁed and (i) and (ii) are trivially
preserved. If q(cid:54)∈V , then V(cid:48) =V ∪{q}. By applying (1), we get
h(q) = q, and thus (i) holds for {q}. Since (i) already holds for
V , (i) also holds for V(cid:48). Furthermore, suppose that there exists
p ∈ V , for which h(p) = h(q). By (i), we get h(p) = p, and
hence p = h(q). By deﬁnition, q = h(op(v1,v2)) and hence
p = h(h(op(v1,v2))). By (1), we get p = h(op(v1,v2)) and
thus p = q. This contradicts q (cid:54)∈ V , and hence no p ∈ V exists
such that h(p) = h(q). Therefore, (ii) holds for V(cid:48).
Since (i) and (ii) trivially hold for the base case, i.e., an
empty graph G, where V = ∅, and the above shows preserva-
tion during the step case, the properties hold for any G.
At this point, we are ready to describe the normalization
rewrite rules; they include operation simpliﬁcation, common-
subexpression elimination, and subsequent memory access.
Operation simpliﬁcation Suppose that we encounter an
arithmetic/logic operation for which all input parameters are
constants. Then, the operation can be replaced by its result.
4
12
+
16
Likewise, in case an element is the identity element for the
operation it serves as an input to, the operation has no effect
and can be removed. In case an element is the zero element,
the operation can be replaced by zero.
Common subexpression elimination Often within a code
fragment, the same value is re-computed several times. This
is especially true when the instruction set allows for express-
ing complex operands, for e.g. supporting offsets and shifts.
Lemma 1 states that broker requests for nodes belonging to a
certain equivalence class all result in references to the same
graph node. Hence, common-subexpression elimination is
already achieved by the design of the node-creation process.
USENIX Association
30th USENIX Security Symposium    559
R2
2
R2
2
SP
} is the operator. In
case either v1 or v2 is non-constant, c need not be underdeter-
mined, as predicate P may sufﬁciently restrict v0 or v1 so that
560    30th USENIX Security Symposium
USENIX Association
c is determined. In case c is underdetermined, both execution
paths are possible, and we are forced to choose which one to
follow. Alternatively, we may follow both paths, by duplicat-
ing state S, and subsequently assigning each execution path
to one of the instances. This way, the resulting ﬁnal graph
construction consists of several DFGs; each one representing
a different execution path. We refer to this practice as forking
state S. Forking at the occurrence of every underdetermined
condition maximizes code coverage. However, it is infeasible
due to the state explosion problem. Therefore, we should de-
vise a balanced strategy for when to apply it – as elaborated
below.
6.1 Path Oracle
de,i :=
6.1.1 Path Oracle Policy
The goal of the policy described below is, for some number
n, to obtain a DFG consisting of exactly n iterations of a
primitive with variable input length. The target primitive can
subsequently be identiﬁed by searching for exactly n iterations
in the resulting DFG.
We deﬁne de,i ∈ {TAKE_TRUE, TAKE_FALSE, TAKE_BOTH}
as the path oracle’s decision for the ith query for the condi-
tional instruction found at execution address e. The policy for
the path oracle is deﬁned as follows:
de,0 := TAKE_BOTH
de,i :=
(cid:26) TAKE_TRUE
iff Be[0] = true,(cid:27) ∀i ∈ [1,n− 1]
(cid:26) TAKE_FALSE iff Be[0] = true,(cid:27) ∀i ∈ [n,∞]
TAKE_FALSE iff Be[0] = false
TAKE_TRUE
iff Be[0] = false
We justify the choice of policy by means of an example.
Suppose that we encounter an underdetermined condition
c at address e. We do not know which of the two possible
execution paths leads to a cryptographic primitive (if any).
Hence, for i = 0, i.e., the ﬁrst occurrence, we fork the state
and explore both. Suppose that, at a later point during the
graph construction, one instance visits address e again, hence
i = 1, and ﬁnds itself with another underdetermined condition
c(cid:48). Since, at this point, P incorporates c (or ¬c), the outcome
of c can be evaluated. As c(cid:48) is underdetermined, c (cid:54)= c(cid:48) is
guaranteed.