title:pwdArmor: Protecting Conventional Password-Based Authentications
author:Timothy W. van der Horst and
Kent E. Seamons
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
pwdArmor: Protecting Conventional Password-based Authentications∗
Timothy W. van der Horst and Kent E. Seamons
Internet Security Research Lab
Brigham Young University
{timv, seamons}@cs.byu.edu
Abstract
pwdArmor is a framework for fortifying conventional
password-based authentications. Many password protocols
are performed within an encrypted tunnel (e.g., TLS) to pre-
vent the exposure of the password itself, or of material for
an ofﬂine password guessing attack. Failure to establish,
or to correctly verify, this tunnel completely invalidates its
protections. The rampant success of phishing demonstrates
the risk of relying solely on the user to ensure that a tunnel
is established with the correct entity.
pwdArmor wraps around existing password protocols.
It thwarts passive attacks and improves detection, by both
users and servers, of man-in-the middle attacks. If a user is
tricked into authenticating to an attacker, instead of the real
server, the user’s password is never disclosed. Although
pwdArmor does not require an encrypted tunnel, it gains
added protection from active attack if one is employed; even
if the tunnel is established with an attacker and not the real
server. These assurances signiﬁcantly reduce the effective-
ness of password phishing. Wrapping a protocol with pwd-
Armor requires no modiﬁcation to the underlying protocol
or to its existing database of password veriﬁers.
1
Introduction
In the typical password-based login (e.g., HTML form,
SSH “keyboard-interactive”) the user’s plaintext password
is sent to the server, which uses it to compute a veriﬁer. This
veriﬁer is then compared to the copy of the veriﬁer stored by
the server and, if they match, the authentication succeeds. It
is customary to establish a server-authenticated, encrypted
tunnel (e.g., TLS with a server certiﬁcate, SSH transport
layer) to prevent passive observation of the plaintext pass-
word as it is sent to the server and to protect the resulting
session from eavesdroppers and hijackers.
∗This research was supported by funding from the National Science
Foundation under grant no. CCR-0325951, prime cooperative agreement
no. IIS-0331707, and The Regents of the University of California.
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.46
DOI 10.1109/ACSAC.2008.46
443
443
There are several methods that attackers use to circum-
vent this encrypted tunnel. The simplest is to not create it
and hope that the user does not notice. This is the bread-
and-butter of phishers around the globe1. A web page is
made to appear exactly like the “real” server, but it is not
sent over HTTPS so the server is never authenticated to the
client (as it usually would have been). An attempt to “login”
to the fake site discloses the user’s password to the phisher.
A variation on this attack, hereafter referred to as the
certiﬁcate trick, involves tricking a user into accepting the
wrong certiﬁcate for the real server. There are two main
avenues to mount this attack. First, the attacker sends the
phishing page over HTTPS2 using a valid certiﬁcate issued
to the phishing site, not the real site. As the certiﬁcate is
valid for this site, no warnings are issued by the browser.
Second, the attacker creates a self-signed certiﬁcate and as-
sumes the user will ignore all browser warnings and accept
this certiﬁcate as if it were from the real server3.
SSH demonstrates the useful practice of reusing existing
password veriﬁers; it can rely on user account information
that is created and managed externally. As SSH relies on
a server-authenticated, encrypted tunnel, the attacker must
trick the user into accepting her public key in lieu of the real
server’s key in order to perform the certiﬁcate trick. If suc-
cessful, the attacker learns the user’s password. SSH uses
a key continuity approach that informs users if the server’s
public key has changed since their last login.
In the context of their veriﬁers, password authentication
mechanisms fall into two categories: password-equivalent
and password-dependent. In a password-equivalent proto-
col (e.g., HTTP Digest authentication [11], Kerberos, EKE
[7]) the server’s password veriﬁer is, for all intents and pur-
poses, equivalent to the user’s password.
In a password-
dependent protocol (e.g., HTTP Basic authentication [11],
1The Anti-Phishing Working Group (APWG) reports that 99.23% of
phishing occurs over plain HTTP [4].
2APWG estimates that 0.28% of phishing occurs over HTTPS [4].
3These attacks are not limited to phishers. Cain and Able [8] is a pop-
ular tool that uses ARP poisoning to force all local network trafﬁc to ﬂow
through the tool. It also provides an automated TLS man-in-the-middle
attack using a self-signed certiﬁcate.
S/Key [14], SRP [30]) the veriﬁer cannot be used directly
to impersonate the client, as it is dependent on the plaintext
password, but it can be useful to an ofﬂine guessing attack.
We believe that password-equivalent veriﬁers have an in-
herent risk (especially from malicious insiders) that can and
should be avoided, particularly when many of these veriﬁers
can readily be used in a password-dependent fashion.
Password-authenticated key exchange (PAKE) protocols
(e.g., EKE, SRP), do not require encrypted channels to pro-
tect the password and have the added beneﬁt of establish-
ing a mutually-authenticated session key that can be used to
protect a subsequent session. Unlike conventional protocols
within encrypted tunnels, these protocols cannot readily use
existing password veriﬁers in a password-dependent man-
ner (see Section 2.3). Also, current PAKE protocols do not
provide privacy protection to the user’s identity.
Our Contributions
pwdArmor is a framework for lever-
aging conventional password protocols, and existing pass-
word veriﬁer databases, to create PAKE protocols. Un-
like other PAKE protocols, pwdArmor is neither password-
equivalent nor password-dependent, rather it preserves this
characteristic from its underlying password protocol. Also,
pwdArmor can provide privacy protection to the user’s iden-
tity, with or without an external encrypted tunnel.
pwdArmor treats the server authentication of an en-
crypted tunnel as an added bonus rather than a critical hinge
of its security. Even if a user is tricked into performing
the protocol directly with an attacker, the user’s password is
never exposed.
As a proof of concept, we used pwdArmor to wrap HTTP
Basic authentication and the One-Time Password (OTP)
protocol [15] (a derivative of S/Key). The client-side is re-
alized as an extension to Firefox and also as a signed applet.
The server-side is implemented as Servlet Filter in Tomcat.
Although some veriﬁer databases contain essentially a
password-dependent veriﬁer (e.g., hash of the password),
the selected conventional password protocol may use it as
a password-equivalent veriﬁer (e.g., HTTP Digest authenti-
cation, MS-CHAPv2 [31]). Using pwdArmor, and a differ-
ent conventional password protocol, these veriﬁer databases
can be leveraged in a more secure, password-dependent
manner, potentially eliminating the need for the original
password-equivalent protocol. We demonstrate this by re-
placing HTTP Digest authentication with pwdArmor and
HTTP Basic authentication.
Paper Outline Section 2 lays the foundation for pwd-
Armor. Section 3 presents the pwdArmor framework. Sec-
tion 4 analyzes its security. Section 5 considers deployment
issues. Section 6 discusses the prototype implementation.
Section 7 examines related work. Section 8 contains con-
clusions and future work.
444444
2 Foundation
In this paper, user (U) and host (H) desire to mutually
authenticate and optionally establish a key that will provide
forward secrecy. We assume that U has a password pwdU
and that H stores a veriﬁer pwdver
and associated informa-
U = V erif ier(pwdU, α). α contains
tion α, such that pwdver
the additional information (e.g., salt, realm, index), if any,
required to create the veriﬁer from the password.
U
2.1 Threat Model
This section speciﬁes the threat model used to compare
existing conventional password protocols and pwdArmor.
This model deﬁnes the likely deployment scenarios, the
common methods of attack, and the attackers.
Target Scenarios We target
two common scenarios,
which, based on the properties of their communications
channels, are categorized as follows:
Sclear An unsecured channel (e.g., HTTP) is used for all
communications.
Stunnel A server-authenticated, encrypted tunnel (e.g.,
HTTPS, SSH) is used for all communications.
A third scenario, which adds server authentication to
Sclear, is the least likely to be used in practice and will not
be speciﬁcally addressed in this paper due to lack of space.
Attacks Password protocols are designed such that pwdU
is required to impersonate U to H. Obtaining pwdU consti-
tutes a PWD break. As the number of potential passwords
is relatively small (especially when compared to the size
of keys typically used in cryptographic protocols), an at-
tacker’s ability to correctly guess the password is of partic-
ular concern. There are two approaches to password guess-
ing: online and ofﬂine.
Online guessing attacks repeatedly invoke the protocol
with H while varying the password. The best protection
an online password protocol can provide is to ensure that
attackers cannot obtain an advantage against the protocol
greater than online guessing.
Ofﬂine guessing attacks are more efﬁcient than online at-
tacks, but they require veriﬁcation material (i.e., the result
of a known deterministic function of the password) to de-
termine if a guess is correct. Obtaining this material consti-
tutes a LEAK break, which is a step towards a PWD break.
In practice, many organizations consider it acceptable that
an attacker cannot compromise a protocol (e.g., Kerberos)
with an advantage greater than ofﬂine-guessing.
In these
situations, services often dictate the minimum strength of
user passwords.
If the attacker can insert herself between U and H she can
become a man-in-the-middle (MITM). By simply relaying
the authentication protocol’s messages between the two un-
suspecting parties, she can, after the authentication is com-
plete, hijack U’s session with H. This constitutes a MITM
break, which enables the attacker to impersonate U without
a PWD break. In practice, there are three common meth-
ods to perform this attack: 1) Routing-MITM, an attacker
controls a router between U and H or has tricked trafﬁc
to route through her (e.g., ARP poisoning); 2) Pharming-
MITM, DNS is poisoned so that lookups return a network
address controlled by the attacker; and 3) Phishing-MITM,
U is tricked into connecting to the attacker in lieu of the
legitimate host (e.g., clicks a link in a phishing email).
Attackers Two attackers are considered in this model.
Eve (E) is a passive eavesdropper whose goals are PWD
and LEAK breaks. Mallory (M) is an active attacker whose
goals are PWD, LEAK, and MITM breaks. E is limited
to observing the normal interactions between U and H. M
can observe, inject, modify, delay, destroy, and replay mes-
sages as well as create multiple concurrent sessions with
any other party.
2.2 Conventional Password Protocols
Conventional password protocols consist of these logical
message elements:
U
H
U
and α)
IDU−−→ (Lookup pwdver
[C]←−− [Optionally generate challenge]
RU−−→ (Derive RU from pwdU [and C, if present])
[RH]←−− [Optionally generate its own auth response]
In the ﬁrst round, U discloses her identiﬁer IDU and H
responds with an optional challenge C, which may be de-
pendent on IDU. U then sends her authentication response
RU, to which H can optionally respond with its own authen-
tication response RH. If C and RH are not required, then the
protocol can be condensed into a single message with two
logical message elements: U → H : IDU, RU.
RU enables U to demonstrate knowledge of pwdU to H.
Based on the characteristics of RU (and assuming the ab-
sence of an encrypted tunnel to protect it) we classify pass-
word protocols as follows:
Type-0 RU is always the same and therefore replayable. A
challenge by the server is typically not required. Ex-
amples include responses that contain the password it-
self (e.g., HTML forms, SSH “keyboard-interactive”).
Type-1 RU is not replayable, but it can be used to mount
an ofﬂine password guessing attack. A challenge by
the server is required to construct RU. Examples in-
clude conventional challenge/response protocols (e.g.,
HTTP Digest authentication) and some one-time pass-
word protocols (e.g., OTP [15]).
Type-2 RU is not replayable and it does not contain mate-
rial for an ofﬂine password guessing attack. Speciﬁ-
cally, although RU may contain some form of the pass-
word it also involves a large, unobservable, session-
speciﬁc secret that signiﬁcantly complicates an ofﬂine
attack as password guesses must also correctly guess
the value of the session secret. Examples include
PAKE protocols like SRP and SPEKE [16].
U
An orthogonal characteristic to this classiﬁcation is
whether or not pwdver
is equivalent to pwdU (i.e., password-
dependent vs. password-equivalent)4. Another orthogonal
characteristic is whether or not IDU is required to gener-
ate C. For example, in HTTP Digest authentication the
challenge (a server-generated nonce) is independent of IDU