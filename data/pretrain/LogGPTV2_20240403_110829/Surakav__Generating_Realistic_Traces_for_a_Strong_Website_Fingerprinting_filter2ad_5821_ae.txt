7.63
DF
TPR
96.24
43.00
15.21
39.40
8.14
FPR
0.54
4.66
1.17
5.81
2.70
Tik-Tok
TPR
96.68
42.63
12.99
39.68
6.28
FPR
0.70
3.02
0.53
4.41
1.04
a Round-Robin fashion as prior works do [5], [18], [41]. Data
collection lasted for over two months.
4) Ethical Considerations: Since large-scale data collec-
tion may have some impact on the Tor network, we try to
mitigate the adverse effects on the Tor network. Firstly, the
bridge we run is private, and we do not accept any connections
from real users. Secondly, we only add dummy packets and
time delays between our own clients and the bridge, so the
other entities in the network remain unaffected. We also limit
the number of clients in parallel (10 in our setting) to minimize
the burden on Tor and the web servers.
We use the command line to directly drive the Tor Browsers,
so none of those visits come from real users. We only keep
the minimal information (i.e., the timestamp and size of each
packet) that is necessary for our experiments.
B. Defense Performance
We ﬁrst present the performance of four state-of-the-art
attacks in the open-world scenario. For each dataset, we
perform 10-fold cross validation.
1) Defense Conﬁguration: For Tamaraw, we set ρc =
14 ms, ρs = 4 ms, and L = 100, as suggested by the original
paper [13]. 3 For FRONT [9], we set Nc = Ns = 6000,
Wmin = 1 s, and Wmax = 14 s. We slightly increase the
strength and overhead of FRONT to make a better comparison
with Surakav. For Surakav, we present two different settings,
denoted as Surakav-light (δ = 0.6) and Surakav-heavy (δ =
0.4). The parameter ρ is ﬁxed at 100 ms by default.
2) Overhead Metrics: Following the methodology of pre-
vious works [2], [9], [10], [13], we evaluate the overhead
of defense by data overhead and time overhead. The data
overhead is measured as the total number of dummy packets
divided by the total number of real packets over the whole
dataset. The time overhead is measured as the total extra time
divided by the total loading time in the undefended case over
the whole dataset.
3) Attack Results: Table III shows the results. When there
is no defense applied, two deep learning attacks, DF and
Tik-Tok, achieve over 96% TPR at a low level of FPR (<
0.7%). kFP and CUMUL achieve a 74% TPR. kFP has the
lowest FPR (0.18%) among all the attacks due to its k-Nearest
Neighbor mechanism. The results indicate, as seen in previous
3ρc and ρs are adjusted since the payload size is 750 bytes in the original
paper while the payload size in our case is 514 bytes (a Tor cell size).
F
D
C
E
1
0.8
0.6
0.4
0.2
0
Undefended
FRONT
Tamaraw
Surakav-light
Surakav-heavy
0.8
1.2
1.6
2
2.4
2.8
3.2
3.6
Information Leakage (Bit)
Fig. 7: Empirical Cumulative Distribution Function (ECDF) of
top 100 informative features for each dataset. Surakav leaks
the least amount of information.
work, that WF attacks are highly effective when no defense is
implemented, even in a large open-world scenario.
FRONT is highly effective against kFP and CUMUL. With
97% data overhead, the TPR of kFP is reduced to less than
1%. The FPR of CUMUL is increased to 10%. However, DF
and Tik-Tok still achieve 43% TPR with an FPR at 3-5%. By
contrast, Surakav-light, with 42% less data overhead and 16%
more time overhead, achieves a slightly better protection rate
against the strongest attacks. It reduces the TPR of both DF
and Tik-Tok to 40% and further increases the FPR of both
attacks by 1%.
In the strong defense category, Tamaraw can degrade the
performance of kFP and CUMUL close to random guessing.
DF achieves the highest TPR (15%) at a 1% FPR among all the
attacks. However, Tamaraw also requires the highest overhead
in both data (121%) and time (26%) among all the defenses.
In comparison, Surakav-heavy incurs 40% less data overhead
and 9% less time overhead than Tamaraw, but offers an even
stronger protection rate. The TPR of DF is sharply reduced
from 96% to only 8% with a 3% FPR. The TPR of Tik-Tok
is only 6%. For kFP and CUMUL, they perform as poorly as
against Tamaraw. If we compare Surakav-heavy with FRONT,
they have similar overhead in total. However, the TPRs of the
strongest attacks (DF and Tik-Tok) are both further reduced
by more than 35%.
4) Information Leakage Analysis: We have shown that
Surakav can effectively defend against modern WF attacks. In
this section, we show that Surakav is also the most effective
defense from the perspective of information leakage. We make
use of the WeFDE framework [44] to conduct an information
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:20 UTC from IEEE Xplore.  Restrictions apply. 
1566
TABLE IV: Defense performance against kFP attack under
the one-page setting. Surakav-heavy outperforms all the other
defenses. All values are in percentages.
Defense
None
FRONT [9]
Tamaraw [13]
Surakav-light
Surakav-heavy
Overhead
Data
Time
0
97
121
55
81
0
0
26
16
17
TPR
98.29 ± 1.91
85.20 ± 6.83
87.07 ± 5.12
86.11 ± 7.27
82.77 ± 7.27
FPR
1.48 ± 1.63
14.41 ± 7.07
13.24 ± 5.05
12.88 ± 5.90
19.43 ± 7.35
)
%
(
t
s
o
C
n
o
i
t
u
b
i
r
t
s
i
D
10
8
6
4
2
0
10
0.64M
1.28M
2.56M
5.12M
50
30
90
Update Frequency (days)
70
110
leakage analysis for each defense. The idea of WeFDE is
to estimate the amount of information learnt from a speciﬁc
feature f about a webpage w by computing the mutual
information of w and f. Following their methodology, we
compute the information leakage for all the features used in
the WF literature (in total 3043 features). We exclude all
the redundant features that share the same information with
any other features. Then we pick the top non-redundant 100
features that leak the most bits of information. The results are
shown in Figure 7.
As a baseline,
informative feature leaks 2.85
bits of information on the undefended dataset. Tamaraw and
FRONT leak at most 1.78 bits and 1.83 bits of information.
Surakav leaks the least information, that is, 1.65 bits in the
lightweight setting and 1.59 bits in the heavyweight setting,
respectively. We ﬁnd that the median leakage for Surakav-
heavy is only 1.09 bits. The median leakage for Surakav-
light and FRONT is both 1.22 bits. Surprisingly, the median
leakage for Tamaraw is the highest among all the defenses
(1.41 bits). This matches our above analysis that Surakav-
heavy is stronger than Tamaraw.
the most
Surakav successfully reduces the information leakage by
sending data at random time gaps so that little information is
leaked by the timings. Most of its information leakage comes
from the burst sizes, which is controlled by δ.
5) One-page Setting Analysis: Wang suggested that de-
fenses should be evaluated under a harder setting where the
attacker only monitors a single webpage [31]. In such a
one-page setting, all the defenses were shown to be more
vulnerable to the kFP attack than expected. To show the
effectiveness of our defense, we conduct the same analysis on
our datasets. For each dataset, we repeatedly label instances
from one monitored page as positive and the rest (including
non-monitored instances) as negative and perform the binary
classiﬁcation with kFP. Then we compute the mean and the
standard deviation of TPR and FPR over all the webpages (in
total 100 pages). Table IV shows the results.
On the undefended dataset, kFP achieves over 98% TPR
with only 1.5% FPR on average, showing it is highly effective
in identifying single pages. Tamaraw does not outperform
FRONT, even though it
incurs much more overhead both
in data and time than FRONT. This is because the padding
mechanism of Tamaraw fails to group negative instances and
positive instances into the same anonymity sets [31]. FRONT
performs slightly better than Surakav-light by further reducing
Fig. 8: The distribution cost for updating the generator under
different update frequencies. The percentage is calculated over
the current bandwidth consumed by directory servers. Each
line represents a different number of users (in millions).
TPR by 1% and increasing FPR by 1.5%. However, as we have
shown before, FRONT incurs 42% more data overhead than
Surakav-light. Surakav-heavy is the most effective defense. At
a similar level of overhead as FRONT, Surakav-heavy further
reduces kFP’s TPR by 15% (98% → 83%) while increasing
kFP’s FPR by 18% (1.5% → 19.5%).
C. Training and Distribution Cost Analysis
Since Surakav requires a generator to launch the defense,
besides the data and time overhead incurred during the de-
fense, we also need to consider the training and distribution
cost of the generator. As a reference, it takes 6 hours to train
the GAN on a GeForce RTX 2080 Ti with 100,000 instances.
The training set is around 78 MB. The training process took
on average 39% GPU and 1.9 GB out of 11.6 GB memory.
We tested the CPU and memory usage of trace generation on
a MacBook Pro (Intel i9 2.4 GHz, 2019). We sampled one
million traces from the generator and found that it took 5 ms
to generate one trace, using 2.5 ms CPU time and 95 KB RAM
on average. This should be affordable for a normal client.
We propose that Tor directory servers help train and dis-
tribute the generator since they are semi-trusted entities in the
Tor network. The clients will retrieve the model parameters
at Tor startup and update the model from time to time. We
estimate the distribution cost as follows.
To reduce the cost of distributing the generator, we