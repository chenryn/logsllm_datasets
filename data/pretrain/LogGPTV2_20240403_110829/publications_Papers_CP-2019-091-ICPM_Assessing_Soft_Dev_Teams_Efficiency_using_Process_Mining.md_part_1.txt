Assessing Software Development Teams’ Efficiency
using Process Mining
Joa˜o Caldeira Jorge Cardoso
Fernando Brito e Abreu CISUC, Dept. of Informatics Engineering
Jose´ Reis University of Coimbra, Portugal
ISTAR-IUL Huawei Munich Research Center, Germany
Instituto Universita´rio de Lisboa (ISCTE-IUL) PI:EMAIL
Lisboa, Portugal
{jcppc, fba, jvprs}@iscte-iul.pt
Abstract—Context. Improving the efficiency and effectiveness I. INTRODUCTION
ofsoftwaredevelopmentprojectsimpliesunderstandingtheirac-
Inaccurate planning and/or project plan deviations cause
tualprocess.Giventhesamerequirementsspecification,different
substantial financial losses on software development projects
software development teams may follow different strategies and
that may lead to inappropriate use of tools or non-optimized [1]. Further, constant inaccuracies and losses may degrade the
allocation of effort on spurious activities, non-aligned with the reputation of development teams as they become perceived as
desiredgoals.However,duetoitsintangibility,theactualprocess non-compliant to organizational plans and budget forecasts.
followed by each developer or team is often a black box.
Criticalsuccessfactorshavealwaysbeenattheforefrontof
Objective. The overall goal of this study is to improve the
the research related with software development projects [2]–
knowledge on how to measure efficiency in development teams
where a great deal of variability may exist due to the human- [5]. The existence of a vast literature about this topic, either
factor. The main focus is on the discovery of the underlying about successes [1] or failures [6], [7], reveals the concerns
processesandcomparethemintermsofefficiencyandeffective- and doubts that still haunt software development practitioners
ness. By doing so, we expect to reveal potentially hidden costs
regardingtheefficiencyandeffectivenessoftheirownprojects.
and risks, so that corrective actions may take place on a timely
It is frequently suggested that software projects can be
manner during the software project life cycle.
Method. Several independent teams of Java programmers, assessedacrossfourperspectives:quality,scope,timeandcost
using the Eclipse IDE, were assigned the same software quality [2], which are related with the planning and execution of the
task, related to code smells detection for identifying refactoring project’s main activities. Each perspective has its own critical
opportunities and the quality of the outcomes were assessed by
success and failure factors, that can be grouped into five dif-
independent experts. The events corresponding to the activity of
ferent dimensions: organizational, people, process, technical,
each team upon the IDE, while performing the given task, were
captured. Then, we used process mining techniques to discover and project [3]. In this paper, we will be mainly concerned
developmentprocessmodels,evaluatetheirqualityandcompare with the effect of the human factor in process variability.
variants against a reference model used as ”best practice”. To start a software development project from scratch is
Results.Teamswhoseprocessmodelwaslesscomplex,hadthe
a complex activity on its own [8], specially in the absence
best outcomes and vice-versa. Comparing less complex process
of a formalized process or methodology [9] that acts as a
variantswiththe”bestpractice”process,showedthattheywere
alsotheoneswithlessdifferencesinthecontrol-flowperspective, referential. Evidences found suggest that in addition to the
based on activities frequencies. We have also determined which initialprojectplanning,thewaypeopleareorganized,thetools
teams were most efficient through process analysis. theyuseandtheprocessestheyfollowarekeyfeaturesforthe
Conclusions. We confirmed that, even for a well-defined soft-
success or failure of any software project [9]. As for software
ware development task, there may be a great deal of process
development, although prescribed process models may exist,
variability due to the human factor. We were able to identify
when developers were more or less focused in the essential tasks projects often do not comply with them, both because each
theywererequiredtoperform.Lessfocusedteamshadthemore developer or team usually has some freedom to interpret the
complex process models, due to the spurious / non-essential process and because its compliance is not verified on the run,
actions that were carried out. In other words, they were less
sinceitismainlyintangible.Asaresult,ithasbeennotedthat
efficient. Experts’ opinion confirmed that those teams also were
process executions (i.e. projects) often deviate from what was
less effective in their expected delivery. We therefore concluded
that a self-awareness of the performed process rendered by our planned [10]. In this paper we bring further evidence that the
approach, may be used to identify corrective actions that will human factor is a very important source of process variability
improve process efficiency (less wasted effort) and may yield to and the latter will have an impact on process efficiency and
better deliverables, i.e. improved process effectiveness.
effectiveness.
To understand how the process was actually performed
by its practitioners, we used process mining techniques. Our
approach, initially proposed in [11], captures events due to consist of improving some performance indicators, such as
practitioners activities executed in the IDE, as well as records time,risksandcostsassociatedtoaspecificprocess,orsimply
which artifacts were used and when, plus additional details to maximize a service level. Actions may be the redesign of
on the ecosystem of components supporting the process. This a specific project, adjust a current process or, if there is a
new perspective on software development analytics, that uses fluctuation in case volume, one may want to include more
process mining, allows the discovery of the actual processes resources.
practitioners are following, as well as deviations from those Our short-term goal, whose fulfillment we will describe
they were supposed to comply to, without the complexity in this paper, was to assess teams’ efficiency by mining the
and workload of collecting and merging information from software development process flow and variability that occurs
different information systems, such as, source code systems, due to the human factor. Our medium-term goal is to provide
configuration management repositories or bug tracking tools. operationalsupporttosoftwaredevelopers,systematicallyand
As we will show later in this article, we were able to identify continuously using current event data to recommend the best
themostandlessefficientteams,andtheonesthatdriftedless activity, adequate resource or action to execute now or in the
from the same process when executed by an expert. future.Inbothcaseswewilltakeasinputtheeventsemerging
This paper is organized as follows: on section II we intro- from using the IDE. Those events convey a spaghetti-like
ducesoftwaredevelopmentanalyticschallengesandintroduce process [15] mainly because there is a very large number of
process mining as a natural option to mine software process possible commands/tasks to execute within any IDE that will
events’ logs; on section III we present the research questions, grow exponentially with the number of installed plugins and,
describe the experiment setup and the methods used for data as a consequence, so grows the potential complexity of any
analysis; next, on section IV, we present the results, elaborate mined process.
on the main findings and identify threats to validity; finally,
C. Related Work
in section V, we draw the main conclusions and outline the
future work. This work is in the crossroads of software development
practices and process mining techniques. Much have been
II. CONTEXT
said in literature about software development processes [16],
A. Software Development and the IDE [17] and process mining separately [18]. However, elaborat-
ing about works combining these two disciplines requires a
Nowadays, most software practitioners develop their work
careful approach, mainly because their intersection is vague
upon an IDE (Integrated Development Environment), such
as Eclipse, IntelliJ IDEA, Netbeans or Visual in some cases and not fully explained in others. Going back
Studio Code. To a greater or lesser extent, those IDEs almost a decade, [12] have mined software repositories to
extract knowledge about the underlying software processes,
support different software development life cycle activities,
and[19],[20]havelearnedaboutuserbehaviorfromsoftware
such as requirements elicitation, producing analysis and de-
at runtime. Recently, [21] was able to extract events from
sign models, programming, testing, configuration manage-
Eclipse and have discovered, using a process mining tool,
ment, dependencies management or continuous integration.
In this paper we will consider Eclipse, which owes its basic developers’ workflows. Some statistics were computed
based on the activities executed and artifacts edited. In [22],
wide adoption to the vast plethora of plugins available in
its marketplace. Eclipse distributions are customized for the authors have extracted development activities from non-
instrumented applications and used machine learning algo-
specificusers/purposes,suchasformodellers,programmers,
rithms to infer a set of basic development tasks, but no
testers, integrators or language engineers. Herein, we will
process mining techniques were used to discover any pattern
consider the standard distribution, which is particularly suited
of application usage. [23] used a semi-automatic approach for
to programmers.
analyzing a large dataset of IDE interactions by using cluster
An IDE, in addition to the artifacts it handles, contains
analysis[23]toextractusagesmells.Morerecently,[24]used
metadata about the developers’ activities that may reveal the
process mining to gain knowledge on software in operation
reasons why some individuals and teams are more efficient
by analyzing the hierarchical events produced by application
than others. Moreover, it may have hidden in its usage, parts
calls(eg: execution of methods within classes) at runtime. The
of the logic why some projects are successful and others fail.
studies mentioned above, extracted data from several different
Those development activities can be identified by mining the
sources and have used a multitude of statistics methods,
largeamountofeventscreatedduringtheexecutionoftheIDE
machine learning and process mining techniques. However,
core components and the installed plugins.
to the best of our knowledge, none of these works combine
B. Process Mining Within the IDE data from the IDE utilization with process mining methods
Process Mining is now a mature discipline with validated with the aim of measuring individuals or teams efficiency.
techniques producing accurate outcomes on several business Even in the case of [21], where the approach is similar to
domains[12],[13].Aprocessminingproject,ifbestpractices ours, nothing was done related to conformance checking on
are followed [14], should use goals and event logs as inputs, theprocessesfollowedbydevelopers,astherewasnoexisting
and produces actions to implement as outputs. The goals may referencemodeltocomparewith.Ourworkintroducesavalid
approach for this purpose, and bring a new perspective to environment, and later, all received a unique username/key
software development analytics by filling this gap. pair as credentials. This method was useful to unlock all the
pluginfeaturesandallowedustoidentifyeachsubjectandthe
III. EXPERIMENT
corresponding team.
We analyzed several teams performing independently the 3) Collected Data: A sample event instance collected with
same well-defined task on software quality assurance. To our plugin is represented in listing 1 in JSON format. The
blockadditionalconfoundingfactorsinouranalysis,allteams field tags are self explanatory.
had similar backgrounds and performed the same task upon
the same software system. To provide authenticity, the task {
"team" : "T-01",
targeted a real-world (large) open-source Java system, the "session" : "a5d63j-jdi3-ikd912",
"timestamp_begin" : "2018-05-07 16:53:52.144",
Jasml (Java Assembling Language)1. "timestamp_end" : "2018-05-07 16:54:04.468",
"fullname" : "Ana Sample",
To understand what happened in each team, we mined the "username" : "ana",
"workspacename" : "Workspace1",
corresponding process model based on its events (process "projectname" : "/jgrapht-core",
"filename" : "/jgrapht-core/AncestorTest.java",
discoveryphase).Then,wecomparedeachdiscoveredprocess "extension" : "java",
"categoryName": "Eclipse Editor",
withareferencemodel(processconformancecheckingphase),
"commandName": "File Editing",
to assess the overall similarities and processes’ quality. "categoryID": "org.eclipse.ui.internal.EditorReference",
"commandID": "iscte.plugin.eclipse.commands.file.edit",
"platform_branch": "Eclipse Oxygen",
A. Research Questions "platform_version": "4.7.3.M20180330-0640",
"java": "1.8.0_171-b11",
....
The following research questions emerged from our previ- }
ously stated research goals:
Listing 1: Sample Eclipse Event Instance
RQ1) To what extent can process mining discover accurate
models representing developers’ behavior? 4) Data Storage: Collected data was stored locally in a
RQ2) Can we assess the efficiency of software development CSV file. Whenever Internet connection was available, the
teams by using process mining techniques ? same data was stored in the cloud5. This storage replica-
RQ3) The assessment of teams’ proficiency, performed by a tion allowed offline and online collection. The final dataset,
process expert, is reflected in the quality of the produced combining the two different sources, was then loaded into
models? a MySQL database table where the username and event