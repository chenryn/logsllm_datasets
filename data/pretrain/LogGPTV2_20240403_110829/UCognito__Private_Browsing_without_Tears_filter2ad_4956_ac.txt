### AOT Translation and Caching in PNaCl

PNaCl (Portable Native Client) enhances the loading time of applications by caching the translation of portable bitcode files at `/PnaclTranslationCache`. This caching mechanism, as described in [36], speeds up the execution of PNaCl applications. However, these caches persist even in private browsing modes such as Incognito and Guest, which can be exploited for web tracking.

For example, a developer can embed a PNaCl application on their website that sends a message to the server when it starts running in the user's browser. By measuring the interval between the HTTP request and the receipt of the message from the PNaCl application, the developer can infer whether the user is a returning visitor. If the interval is short, it suggests that the PNaCl application was loaded from the cache, indicating a returning visitor. For instance, the loading time for a PNaCl app without a cache is approximately 3 seconds, while with a cache, it is around 0.1 seconds.

### Nvidia’s OpenGL Cache

Similar to PNaCl, Nvidia’s OpenGL shader disk cache stores compiled shaders on the system disk to avoid recompilation, thereby saving time. On Linux systems, this cache is typically stored at `~/.nv/GLCache/`. Like the PNaCl cache, this data persists across different browsing modes, including Incognito and Guest. This persistence can be used to infer which websites a user has visited, especially those with rich WebGL content.

A simple inference attack can be based on the size of the WebGL cache. Websites with more complex WebGL content tend to generate larger cache sizes. For example, visiting a lightweight WebGL demo might increase the cache size by 52,911 bytes, while a heavyweight demo might increase it by 176,777 bytes. By measuring the increase in cache size, one can infer the richness of the WebGL content on the visited webpage. This inference is reasonable because websites with rich WebGL content are often gaming or video-oriented, suggesting that the user may have played a web game during their browsing session.

### Unit and Regression Testing with UVERIFIER

UVERIFIER, like other dynamic testing tools, requires external triggering of privacy-related features. Integrating UVERIFIER into unit and regression testing procedures can help maximize code coverage and eliminate unintentional privacy violations. Browser developers and add-on developers can use UVERIFIER to test privacy-related features, ensuring that the codebase is robust against potential privacy breaches.

Cautious users with stable browsing habits can also employ UVERIFIER to check for privacy violations in their normal browsing and add-on usage patterns.

### UCOGNITO: A New Framework for Private Browsing

Designing and implementing private browsing modes can be challenging, as discussed in §2 and §3. To address these challenges, we propose UCOGNITO, a framework that fundamentally changes the approach to private browsing.

#### Overview

UCOGNITO decouples the implementation of private mode from the browser's codebase. Instead of treating private mode as a browser-specific feature, UCOGNITO considers it as a customizable overlay that provides the intended privacy goals when applied to any browser. At runtime, the browser remains agnostic to the mode it is running in, using the same code and logic for both private and public modes. This approach makes private mode a concrete and separate module, simplifying testing and configuration.

#### Architecture

**Filesystem Sandboxing:**
UCOGNITO uses filesystem sandboxing to create an isolated environment for private browsing sessions. The browser interacts with a sandboxed filesystem, giving the impression that it is interacting with the actual filesystem. This design ensures that all traces generated during the session are collected and retained within the sandbox.

**Policy System:**
The policy system in UCOGNITO operates at two key points:
- **Session Start:** Only persistent data explicitly given "read" access are copied into the filesystem sandbox.
- **Session End:** Traces collected in the sandbox are conditionally written back to the filesystem if they have "write" access. Data not written back are discarded as the sandbox exists only in memory.

#### Challenges and Solutions

**Heterogeneity in Interpretation:**
UCOGNITO addresses the heterogeneity in how different browser vendors and users interpret private mode by employing a flexible policy system. Each file in the filesystem is associated with two policies:
- **Allow/Deny Write Access:** Determines if persistent data can be stored during a private session.
- **Allow/Deny Read Access:** Determines if persistent data can be used during a private session.

**Stealthiness and Freshness:**
To ensure stealthiness and freshness, the policy system follows a "whitelist" approach:
- **Default Isolation:** Without any specified policy, complete isolation (denying all read/write accesses) is assumed.
- **Conservativeness:** Persistent data not explicitly agreed upon by the user should not be left or shared.

This ensures users have full control over the types of persistent data used and stored in private mode.

**Indistinguishability:**
UCOGNITO increases the indistinguishability between private and public modes by mitigating attacks that exploit differences in browser implementations. For example, the hyperlink attack, which relies on browsers not rendering visited links in purple in private mode, is effectively mitigated by UCOGNITO.

#### Sandboxing Layer

To isolate the traces of a private browsing session, UCOGNITO applies a filesystem sandbox to commercially off-the-shelf web browsers. The sandbox intercepts system calls and redirects file paths to a contained location. For example, a path like `/home/user/.config/*` is redirected to `/tmp/ucognito-PID/home/user/.config/*`.

**System Call Hooking:**
UCOGNITO uses seccomp-bpf for system call hooking, intercepting file-related system calls and rewriting path arguments. Additionally, hooks are placed on the `bind` system call to handle Unix Sockets, ensuring that file paths are correctly redirected.

#### Policy System

UCOGNITO provides a policy system to support configurable private modes. The types of policies include:
- **CLEAN:** Creates an empty file to prevent copying from the original profile.
- **COPY:** Copies a file or sub-directory from the original profile to the private profile.
- **WRITE:** Allows data to be written back to the original profile after the session closes.

These policies determine which files are loaded into the profile and what data are committed back. Policies are defined in INI-style files, with sections for `copy`, `clean`, and `write`.

**Example: Chrome’s Private Browsing**
- **Incognito Mode:** Google Chrome is allowed to read browsing history, autofill data, download entries, per-site preferences, custom SSL certificates, bookmarks, and extension storage. The policy file lists the files for each access and specifies which data should be written back.
- **Guest Mode:** The policy is simpler, allowing access only to the certificate store `cert9.db`. The home directory is marked as `CLEAN`, and `cert9.db` is included in both `COPY` and `WRITE` sections.

These examples demonstrate the flexibility of UCOGNITO in supporting different private modes and allowing users to customize their privacy settings.

#### Implementation

UCOGNITO was implemented on the Linux operating system, specifically Ubuntu 14.04 LTS with Linux Kernel 3.13.0. The implementation includes a sandbox, policy system, and additional UI layer, totaling 564 lines of code.

**Sandboxing Layer:**
The sandboxing layer uses the MBox filesystem sandbox mechanism, hooking file-related system calls and rewriting path arguments. System call hooking is done with seccomp-bpf, intercepting 50 system calls related to file paths.

**Policy Configuration:**
Policies are defined in INI-style files, with sections for `copy`, `clean`, and `write`. These files specify which files and directories are included, cleaned, or written back, providing a flexible and customizable approach to private browsing.

By integrating these components, UCOGNITO provides a robust and flexible framework for private browsing, addressing the challenges and requirements of modern web security.