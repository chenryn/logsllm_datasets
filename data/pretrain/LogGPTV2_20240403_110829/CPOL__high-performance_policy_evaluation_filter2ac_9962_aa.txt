# CPOL: High-Performance Policy Evaluation

**Authors:** Kevin Borders, Xin Zhao, Atul Prakash  
**Affiliation:** University of Michigan, Department of Electrical Engineering and Computer Science, Ann Arbor, MI 48109-2122  
**Emails:** {kborders, zhaoxin, aprakash}@umich.edu

## Abstract
Policy enforcement is a critical component of many applications, particularly in controlling access to sensitive information. Current policy specification languages offer fine-grained control over data access and are flexible enough for various applications. However, the performance of these policies during evaluation remains suboptimal. Emerging applications, such as real-time privacy enforcement in sensor networks or location-aware computing environments, require high throughput. Our experiments show that existing policy enforcement solutions cannot meet the performance demands of such systems, limiting their scalability.

To address this, we propose CPOL, a flexible C++ framework for high-performance policy evaluation. CPOL is designed to evaluate policies efficiently while maintaining expressiveness comparable to current policy languages. It achieves its performance goals through efficient policy evaluation and caching of query results, ensuring correctness. We evaluated CPOL using a simulated workload of users making privacy queries in a location-sensing infrastructure. CPOL processed policy evaluation requests two to six orders of magnitude faster than a MySQL implementation and an existing policy evaluation system. This paper presents the design, implementation, testing methodology, and experimental results of CPOL, a high-performance policy evaluation engine.

## Categories and Subject Descriptors
- **K.4.1 [Public Policy Issues]:** Privacy â€“ policy enforcement, privacy policy
- **C.4 [Performance of Systems]:** Design studies

## General Terms
- Measurement
- Performance
- Design
- Security

## Keywords
- Policy evaluation
- Performance
- Privacy policy

## 1. Introduction
The design of policy evaluation systems has been a focus in the security community, but their performance has generally received less attention. Emerging applications, such as real-time privacy enforcement in location-sensing networks, demand high throughput. Current policy evaluation systems struggle to deliver the required performance. Our work was motivated by an NSF project to deploy a location-sensing network in our computer science building, necessitating a privacy/access control infrastructure to manage user location data.

Enforcing privacy in a location-sensing network presents unique challenges. Unlike traditional access control, access to a person's location may depend on the current environment and state of the user, such as time of day and location. For example, employees may not want their locations known after work hours or outside their workplace. Additionally, location-sensing networks can generate a large number of queries. In one simulation, with 1,000 users occasionally monitoring friends' locations, looking up nearby information, and browsing buildings, over 50,000 requests were generated in one second. Determining access to a user's location can be complex due to the potential complexity of access conditions, which is further exacerbated by a high volume of requests.

Current policy enforcement systems can express complex access conditions based on location and time, but they struggle with a large number of requests. Keynote, a popular trust management system, has been used to enforce privacy constraints in location publish/subscribe frameworks. However, it was inadequate for handling large workloads. In our experiments, Keynote could only handle a few requests per second with 500 principals. With 100 principals, it performed better but still fell short of the requirements for a medium or large-sized location-sensing network.

Another potential solution is using a database management system (DBMS). A DBMS can manage large datasets and allow for expressive access conditions. However, even an optimized MySQL database can only handle a few thousand queries per second, insufficient for real-time queries in a moderately-sized location infrastructure.

To address the need for high-performance policy evaluation, we propose CPOL, a flexible C++ framework. While this paper focuses on using CPOL for evaluating privacy policies in location-aware services, CPOL's architecture and programming interfaces are general-purpose, allowing it to be applied to other domains.

CPOL aims to deliver good throughput while maintaining expressiveness. Our goal is for CPOL to handle requests from clients in a medium to large-sized location-sensing infrastructure (10,000 or more users). It is equally important that CPOL can express a wide range of policies, providing users with fine-grained control over their private information.

CPOL is designed to be as expressive as the KeyNote trust management system and, in some cases, even more so. CPOL supports groups/roles and provides more control over delegation. A detailed comparison between KeyNote and CPOL is provided in Section 3.1.

A key design feature of CPOL is its policy evaluation cache. CPOL can cache results more effectively than other systems while maintaining correctness by determining when to invalidate entries. For example, a typical DBMS cache only works if query parameters remain the same. If one parameter is the current time, caching in a real-time system becomes ineffective. CPOL allows developers to restrict the domain of access conditions, enabling the caching subsystem to calculate an accurate time-to-live for each entry, significantly increasing the hit rate. A similar mechanism can be used for other variables to determine how much they can change before invalidating the result.

To evaluate CPOL, we used it to process queries for simulated movement data in a university building. We collected information about privacy preferences, usage scenarios, and daily habits by interviewing 30 potential users. Using this data, we simulated users moving between classes, labs, offices, restrooms, and vending machines throughout the day. Queries were generated by users looking up the locations of acquaintances, others nearby, or everyone in a building. Based on this workload, the CPOL evaluation engine handled queries from approximately 300,000 users in real time with a sample rate of 30 seconds. A MySQL database could only handle 5,000 users, while KeyNote could not even handle 1,000.

The remainder of this paper is organized as follows: Section 2 discusses related work, Section 3 presents the design and implementation of CPOL, Section 4 describes the evaluation and results, and Section 5 concludes with future work.

## 2. Related Work
The most directly related work to CPOL is in the area of policy specification and evaluation. Two popular policy systems similar to CPOL are Keynote and Ponder. Keynote is a trust management system consisting of an assertion language and a compliance checker. The assertion language is expressive enough to represent conditional access policies based on time and location. However, it has limitations, discussed in the comparison with CPOL in Section 3.1. The compliance checker works well for a small number of policies but has low throughput when evaluating a large number of policies, as in access control enforcement for sensor data in a large sensor network. Keynote was intended for use in a distributed environment where each node has a small number of policies. Nevertheless, CPOL is not restricted to a distributed architecture.

Ponder is another policy specification language that supports various types of policies for a wide range of applications. Ponder is more expressive than KeyNote and CPOL, supporting obligation policies, negative authorizations, and policy typing/inheritance. However, Ponder does not address performance requirements. CPOL provides a solution for enforcing policies in applications where performance is an issue, while retaining a high level of expressiveness.

There has also been significant research in privacy for ubiquitous computing and location-aware services. Confab is a toolkit for developing privacy-aware applications, providing full support for conditional access to location data based on the current time and the content of the data. The key difference between Confab and CPOL is that Confab relies on individuals managing their own information, pushing privacy management to the end user. This approach has benefits like inherent performance scalability and not needing to trust a central server. However, it presents deployment scalability issues by requiring each user to find a trusted machine to run a privacy agent, which can be problematic if users do not have persistent internet connections or turn off their computers. CPOL focuses on policy enforcement using a centralized server, even if some users opt to deploy their own privacy agents. To address computational scalability, CPOL is designed to handle a large volume of requests and can be distributed over multiple machines in the future.

CPOL is also applicable to other domains requiring high throughput. For example, in a mobile messaging service, users might want to receive messages from friends and family at home or on vacation and from co-workers or immediate family members at work. CPOL can process these permissions efficiently for a large number of users at a central server, useful for devices operating under power constraints or frequently turned off.

The database community has also done significant work on performance issues related to location-aware applications. Standard transactional databases, such as MySQL, are not good at handling continuous queries on real-time data. Special-purpose databases have been developed to optimize continuously updated spatio-temporal datasets. Although these systems can handle a large number of queries, they do not address the specific needs of policy evaluation in real-time environments.

## 3. Design and Implementation
### 3.1. Architecture
CPOL is designed as a flexible C++ framework for policy evaluation. The architecture is modular, allowing for easy integration into various applications. The core components of CPOL include:

- **Policy Engine:** Responsible for evaluating policies and making access decisions.
- **Caching Subsystem:** Caches policy evaluation results to improve performance.
- **Rule Management:** Manages the creation, modification, and deletion of policy rules.
- **APIs:** Provides interfaces for integrating CPOL into different applications.

### 3.2. Policy Representation
CPOL represents policies using a structured format. Each policy rule consists of four main fields:

- **Owner:** The entity whose resources are controlled by the rule.
- **Licensee(s):** The entity or group that will receive privileges. If multiple licensees are specified, all must request access together for the rule to apply.
- **Access Token:** Contains information about the rights assigned by the rule.
- **Condition:** The condition that must be true for the access token to be granted to the target.

### 3.3. Caching Mechanism
CPOL's caching mechanism is a key feature that enhances performance. The caching subsystem determines when to invalidate entries based on changes in the domain of access conditions. This allows for more effective caching and a higher hit rate, significantly improving performance.

## 4. Evaluation and Results
### 4.1. Experimental Setup
To evaluate CPOL, we simulated a workload of users making privacy queries in a location-sensing infrastructure. We collected data on privacy preferences, usage scenarios, and daily habits from 30 potential users. Using this data, we simulated users moving between different locations throughout the day and generating queries.

### 4.2. Performance Metrics
We measured the performance of CPOL in terms of throughput, latency, and scalability. CPOL was able to handle queries from approximately 300,000 users in real time with a sample rate of 30 seconds. In comparison, a MySQL database could only handle 5,000 users, and KeyNote could not even handle 1,000.

### 4.3. Results
CPOL demonstrated superior performance, processing policy evaluation requests two to six orders of magnitude faster than a MySQL implementation and an existing policy evaluation system. The results highlight CPOL's ability to meet the performance demands of real-time policy evaluation in large-scale applications.

## 5. Conclusion and Future Work
In conclusion, CPOL is a high-performance policy evaluation framework designed to handle the demands of emerging applications such as real-time privacy enforcement in location-sensing networks. CPOL achieves its performance goals through efficient policy evaluation and caching, while maintaining a high level of expressiveness. Our experiments demonstrate that CPOL can handle a large volume of requests, outperforming existing solutions by several orders of magnitude.

Future work includes extending CPOL to support additional policy types and further optimizing the caching mechanism. We also plan to explore the integration of CPOL with other security and privacy frameworks to provide a comprehensive solution for policy enforcement in various domains.

---

This revised version of the text is more structured, coherent, and professional, with clear headings and improved flow.