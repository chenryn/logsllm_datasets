title:CPOL: high-performance policy evaluation
author:Kevin Borders and
Xin Zhao and
Atul Prakash
CPOL: High-Performance Policy Evaluation 
Kevin Borders, Xin Zhao, Atul Prakash 
University of Michigan 
Department of Electrical Engineering and Computer Science  
Ann Arbor, MI 48109-2122 
{kborders, zhaoxin, aprakash}@umich.edu 
ABSTRACT 
Policy  enforcement  is  an  integral  part  of  many  applications.  
Policies are often used to control access to sensitive information. 
Current  policy  specification  languages  give  users  fine-grained 
control over when and how information can be accessed, and are 
flexible enough to be used in a variety of applications. Evaluation 
of  these  policies,  however,  is  not  optimized  for  performance. 
Emerging applications, such as real-time enforcement of privacy 
policies  in  a  sensor  network  or  location-aware  computing 
environment,  require  high  throughput.  Our  experiments  indicate 
that current policy enforcement solutions are unable to deliver the 
level  of  performance  needed  for  such  systems,  and  limit  their 
overall  scalability.  To  deal  with  the  need  for  high-throughput 
evaluation,  we  propose  CPOL,  a  flexible  C++  framework  for 
policy  evaluation.  CPOL  is  designed  to  evaluate  policies  as 
efficiently as possible, and still maintain a level of expressiveness 
comparable  to  current  policy  languages.  CPOL  achieves  its 
performance goals by efficiently evaluating policies and caching 
query  results  (while  still  preserving  correctness).  To  evaluate 
CPOL,  we  ran  a  simulated  workload  of  users  making  privacy 
queries  in  a  location-sensing  infrastructure.  CPOL  was  able  to 
handle policy evaluation requests two to six orders of magnitude 
faster  than  a  MySql  implementation  and  an  existing  policy 
evaluation system. We present the design and implementation of 
CPOL, a high-performance policy evaluation engine, along with 
our testing methodology and experimental results.  
Categories and Subject Descriptors 
K.4.1  [Public  Policy  Issues]:  Privacy  –  policy  enforcement, 
privacy policy; C.4 [Performance of Systems] – design studies. 
General Terms 
Measurement, Performance, Design, Security. 
Keywords 
Policy evaluation, performance, privacy policy. 
1.  INTRODUCTION 
Design  of  policy  evaluation  systems  has  been  a  focus  of  the 
security  community  [1,  4,  2].  However,  performance  of  such 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
CCS’05, November 7–10, 2005, Alexandria, Virginia, USA. 
Copyright 2005 ACM 1-59593-226-7/05/0011...$5.00. 
systems has generally not received much attention. Applications 
are emerging, such as privacy enforcement for real-time location-
tracking  infrastructure,  where  performance  is  an  issue.  Current 
policy  evaluation  systems  are  unable  to  deliver  the  needed 
throughput for these applications. In fact, our work was motivated 
by  an  NSF  infrastructure  project  to  deploy  a  location  sensing 
network  in  our  computer  science  building  and  the  need  for  a 
privacy/access  control  infrastructure  to  allow  only  authorized 
access to users’ location data. 
location 
information  may  depend  on 
Enforcing  privacy  in  a  location  sensing  network  presents 
unique  challenges.  Unlike  traditional  access  control,  access  to  a 
person’s 
the  current 
environment and state of the user, such as the time of day and the 
user’s  location.  For  example,  employees  may  not  want  their 
locations to be known after work hours or when they are outside 
of  their  workplace.  In  addition,  location  sensing  networks  have 
the  potential  to  receive  a  large  number  of  queries depending on 
the number of users. In one of our simulations, with one thousand 
users occasionally monitoring the locations of friends, looking up 
information about others nearby, and browsing buildings to look 
for empty labs, conference rooms, or places to study, over 50,000 
requests  were  generated  in  one  second.  Determining  whether  or 
not to grant access to a user’s location alone can be complicated 
due  to  the  potential  complexity  of  access  conditions.  This 
problem is exacerbated even further by having a large volume of 
requests. 
in  a 
Current  policy  enforcement  systems  are  able  to  express 
complex access conditions based on a user’s location and time of 
day, but are unable to handle a large number of requests that are 
likely to be seen in a real location sensing network. Keynote is a 
popular trust management system that has been used in the past to 
enforce  privacy  constraints 
location  publish/subscribe 
framework  [11].  The  current 
implementation  of  Keynote, 
however,  was  not  adequate  to  handle  large  workloads.  In  our 
experiments  with  the  system  (described  in  Section  4.1),  it  was 
only able to handle a few requests per second with 500 principals 
in the system. With only 100 principals, KeyNote was able to do a 
lot  better,  but  this  number  falls  far  short  of  what  would  be 
required for a medium or large-sized location sensing network. 
Another potential solution for enforcing privacy policies is to 
use  a  database  management  system  (DBMS).  A  DBMS  already 
has the power to manage large datasets, and is flexible enough to 
allow for expressive access conditions. Restrictions based on the 
time of day and a user’s current location can be placed in policy 
table  entries  and  evaluated  at  query 
time  using  Boolean 
‘WHERE’ clauses. Despite being fairly straightforward to set up 
and use, the maximum throughput of a dedicated and optimized 
MySql database [10] is only a few thousand queries per second, 
which is not enough to handle real-time queries for a moderately-
sized location infrastructure.  
To address the need for a high-performance policy evaluation 
system, we propose CPOL, a flexible C++ framework for policy 
management. In this paper, we focus on using CPOL to evaluate 
privacy  policies  for  location-aware  services.  However,  CPOL’s 
architecture  and  programming  interfaces  are  general-purpose, 
allowing it to be applied to other domains. Examples of how to do 
this are given throughout the paper. 
The main goal of CPOL is to deliver good throughput with a 
strong emphasis on maintaining expressiveness. Our objective is 
for CPOL to be able to handle requests from clients in a medium 
to  large-sized  location  sensing  infrastructure  (10,000  or  more 
users). It is equally important, however, that it can express a wide 
range  of  policies  so  that  users  are  able  to  have  fine-grained 
control over their private information.  
CPOL is designed to be comparable in expressiveness to the 
KeyNote  trust  management  system  [1].  In  some  cases,  CPOL 
ends  up  being  even  more  expressive  than  KeyNote.  CPOL  has 
support  for  groups/roles  and  provides  more  control  over 
delegation. A more detailed discussion of the differences between 
KeyNote and CPOL can be found in section 3.1. 
that  enhances 
One  key  design  feature  of  CPOL 
its 
performance is a policy evaluation cache. CPOL can cache results 
more  effectively  than  other  systems,  while  still  maintaining 
correctness, because it is better at determining when to invalidate 
entries. A typical DBMS cache, for example, only works if query 
parameters stay exactly the same between requests. If one of the 
query parameters is the current time, then caching in a real-time 
system  becomes  completely  ineffective.  Using  CPOL,  however, 
the  application  developer  can  restrict  the  domain  of  access 
conditions. This helps because a single policy can be forced to use 
a  limited  set  of  time  intervals,  which  allows  the  caching 
subsystem  to  calculate  an  accurate  time-to-live  for  each  entry, 
significantly increasing the hit rate. A similar mechanism can be 
used  with  conditions  on  other  variables  to  calculate  how  much 
they can change before invalidating the result.  
To evaluate CPOL, we used it to process queries for simulated 
movement data in a university building. We collected information 
about  privacy  preferences,  usage  scenarios,  and  daily  habits  by 
interviewing  thirty  potential  users.  Using  that  information,  we 
simulated users going to and from class, labs, offices, restrooms, 
and vending machines throughout the day. Queries on the system 
were  generated  by  users 
locations  of 
acquaintances, others nearby, or everyone in a building. Based on 
this  workload,  the  CPOL  evaluation  engine  was  able  to  handle 
queries  from  approximately  300,000  users  in  real  time  with  a 
sample  rate  of  30  seconds.  A  MySql  database  was  only  able  to 
handle 5,000 users, while KeyNote could not even handle 1000. 
looking  up 
The remainder of this paper is laid out as follows: section 2 
discusses  related  work,  section  3  presents  the  design  and 
implementation of CPOL, section 4 describes the evaluation and 
results, and section 5 wraps up with a conclusion and future work. 
2.  RELATED WORK 
The  work  most  directly  related  to  CPOL  is  in  the  area  of 
policy specification and evaluation. Two popular policy systems 
that are similar to CPOL are Keynote and Ponder [1, 4]. Keynote 
is  a  trust  management  system  that  consists  of  an  assertion 
language  and  a  compliance  checker.  The  assertion  language  is 
expressive enough to represent conditional access policies based 
on  time  and  location.  It  does  have  a  few  limitations,  however, 
which are discussed later in the comparison with CPOL (Section 
the 
3.1).  The  compliance  checker  works  well  for  checking  a  small 
number of policies, but was found to have low throughput when 
evaluating  a  large  number  of  policies,  as  can  be  the  case  with 
access  control  enforcement  for  sensor  data  in  a  large  sensor 
network.  To  be  fair  to  Keynote,  it  was  intended  for  use  in  a 
distributed environment where each node only has a small number 
of  policies.  Nevertheless,  CPOL  is  not  restricted  to  use  in  a 
distributed architecture. 
Ponder is another policy specification language that supports 
many different types of policies for wide variety of applications. 
The Ponder language is more expressive than KeyNote and CPOL 
in several ways. It supports obligation policies as well as negative 
authorizations  and  policy  typing/inheritance.  Although  Ponder 
can  express  a  wide  range  of  policies,  it  does  not  address 
performance  requirements.  CPOL  provides  a  solution  for 
enforcing policies in applications where performance is an issue, 
while still retaining a high level of expressiveness. 
is  not 
Confab 
the  only  system 
includes  handling 
There has also been significant research in the field of privacy 
for ubiquitous computing and location aware services. A general 
toolkit  called  Confab  is  available  for  developing  privacy-aware 
applications  [7].  Confab  provides  full  support  for  conditional 
access to location data based on the current time and the content 
of the data. The key difference between Confab and CPOL is that 
Confab  relies  on  individuals  in  the  system  to  manage  their own 
information.  This 
location  requests  and 
enforcing  privacy  policies  locally.  In  Confab,  policy  evaluation 
overhead  is  not  much  of  an  issue,  and  is  not  discussed  in  [7] 
because a single machine only has to handle requests for one user. 
that  pushes  privacy 
management to the end user; Spreitzer and Theimer take the same 
approach  in  their  system  [13]  This  architecture  does  have  its 
benefits, such as inherent performance scalability and not having 
to  trust  a  central  server  to  properly  protect  one’s  privacy. 
However,  it  presents  a  deployment  scalability  problem  by 
requiring each individual user to find a trusted machine on which 
to  run  a  privacy  agent.  This  can  be  particularly  problematic  if 
many of the users do not have persistent internet connections at 
home, or turn their computers off when not in use. CPOL instead 
focuses on the problem of policy enforcement using a centralized 
server, even if some of the users in the system opt to deploy their 
own  privacy  agents.  To  address  computational  scalability 
concerns, CPOL is designed is designed to handle a large volume 
of  requests,  and  is  designed  in  such  a  way  that  it  could  be 
distributed over multiple machines in the future. 
CPOL  is  also  applicable  to  other  domains  requiring  high 
throughput.  Consider  a  situation  where  users  of  a  mobile 
messaging  service  want  to  only  receive  messages  from  friends 
and family when at home or on vacation, and from co-workers or 
immediate  family  members  when  at  work.  Using  CPOL,  these 
permissions  may  be  processed  efficiently  for  a  large  number  of 
users  by  the  service  provider  at  a  central  server.  This  can  be 
useful if devices operate under power constraints or are frequently 
turned off.  
The  database  community  has  also  done  significant  work  on 
performance  issues  related  to  location-aware  applications  [9,  6, 
14]. Standard transactional databases, such as MySql [10], are not 
very  good  at  handling  continuous  queries  on  real-time  data.  To 
deal  with  this  problem,  special-purpose  databases  have  been 
developed  that  are  optimized  for  continuously  updated  spatio-
temporal  datasets  [9,  6,  14].  Although these systems are able to 
handle  a  very  large  number  of  queries,  they  do  not  address  the 
The owner is the entity whose resources are controlled by this rule. 
CPOL Access Rule Fields 
Owner:   
Licensee(s):   The licensee is the entity or group that will receive privileges. If multiple licensees 
Access token:  The access token contains information about the rights assigned by this rule. 
Condition: 
are specified, then all licensees must request access together for the rule to apply. 
CPOL  verifies  that  the  condition  is  true  before  granting  the  access  token  to  the 
target. 
Figure 1.  A CPOL access rule has four fields: a rule owner, rule target, access token, and condition.  
Rules govern access to all entities in the system. 