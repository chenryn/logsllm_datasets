assembly code takes 12,031 instructions.
Level of effort. The overall level of effort for the model
design, speciÔ¨Åcations of the veriÔ¨Åed reÔ¨Ånements, proofs, and
WK implementation was 4.5 person-years, of which 2.5
person-years were required for the sound WK design and
implementation.
Model reusability. Reuse of the model components can save
substantial level of effort for future I/O separation designs. For
example, the abstract model can be proÔ¨Åtably reused for other
secure systems, since its separation properties are general; see
Section VIII-A. This would save over a person-year worth of
effort. Both the abstract and concrete model speciÔ¨Åcations can
be reused for the GSK design (see Figure 5) saving about
2 person-years or about half of the overall effort. Finally,
improved proof structure could also lead to decreased level
of effort; e.g., caching and reuse of proof results, reuse of the
many lemmas that are common to different proofs.
IV. I/O SEPARATION MODEL
We describe our labeled-transition-based abstract I/O sepa-
ration model and deÔ¨Åne the security properties of I/O separa-
tion. Detailed deÔ¨Ånitions are in Appendix A.
A. Abstract Model State
We list key I/O components then describe abstract state.
Overview of Devices, Drivers, and I/O Objects. Device
drivers are arbitrary programs that run on CPUs and read-
/write devices. Devices include peripherals as well as I/O
bus controllers routing I/O transfers between devices and
CPUs/memory. These components can access each other via
different types of I/O communications; e.g., CPUs read and
write devices via Memory-Mapped I/O (MMIO) or Port I/O
(PIO) devices, read and write memory via Direct Memory
Access (DMA), and request CPUs‚Äô attention via interrupts.
Device drivers interact with devices via I/O objects, which
comprise Data Objects (DOs) and Descriptor Objects both
of which can be read/written by drivers and devices. Data
objects store devices‚Äô input and output data; e.g., device
status registers, data buffers in drivers and devices. Descriptor
objects deÔ¨Åne device functions, such as transfers to be issued,
power management, performance management, and are further
partitioned into function and transfer descriptors. Function de-
scriptors (FDs) deÔ¨Åne conÔ¨Ågurations of device functions other
than I/O transfers; e.g., frame buffer format registers in GPUs
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:26 UTC from IEEE Xplore.  Restrictions apply. 
576
deÔ¨Åne the data format of pixels, and power control registers
are used to conÔ¨Ågure power of certain GPU components and/or
display components. Transfer descriptors (TDs) deÔ¨Åne direct
I/O transfers to be issued by devices. A TD contains a list of
entries, each comprising a pointer to an I/O object, requested
access modes, and new values to write. These TDs encode
separation policies and thus require special attention.
Each internal I/O object is owned by a device or a driver,
while the external I/O objects are not owned by any devices
or drivers. I/O object ownership is deÔ¨Åned by I/O kernels and
isolated applications at initialization time. For example, I/O
kernels may isolate external I/O objects (e.g., interface data
structures for protected USB devices) from drivers to authorize
driver access to these objects.
Each device owns a hardcoded TD, which deÔ¨Ånes local
transfers issued to the device‚Äôs own internal objects, based on
the device‚Äôs hardware/Ô¨Årmware implementation. For example,
a GPU‚Äôs hardcoded TD deÔ¨Ånes read transfers to TDs of
frame-buffer base registers to enable the GPU to poll their
conÔ¨Ågurations. Hardcoded TDs are read only by their con-
taining device and do not deÔ¨Åne read transfers to themselves.
However, they deÔ¨Åne either read or write transfers to other
TDs. This enables a device to perform arbitrary transfers
via these TDs. Finally, hardcoded TDs cannot be written as
they are immutable between (trusted) re-Ô¨Çashing operations of
device Ô¨Årmware.
Devices, drivers, and objects can be inactive or active.
Inactive devices and drivers cannot perform any I/O transfer.
Active devices and drivers can issue I/O transfers. Active
objects are the ones accessible by active devices and drivers.
State DeÔ¨Ånition. The abstract system state encompasses I/O
device and driver states that are relevant to I/O separation.
To facilitate speciÔ¨Åcation of access-control (authorization)
policies, the model consists of subjects and objects and a set of
partitions containing devices, drivers, and I/O objects. The set
of subjects comprises Drivers and Devices. All subjects have
unique (e.g., non-reusable) names. Each driver is associated
with a partition ID (i.e., the partition holding the driver) and
a set of objects IDs, owned by the driver. Each device is
associated with an ID of the hardcoded TD it owns. Objects
comprise I/O objects TDs, FDs, and DOs, as introduced above.
Objects are also associated with partition IDs. FDs and DOs
have string values. Each TD‚Äôs value is a list of tuples of a
pointer to an object, requested access modes, and new values
to write. Partitions have unique names. A special NULL I/O
partition includes all
inactive subjects and objects. Active
subjects and objects can only be in non-NULL partitions.
B. State Transitions
A state transition occurs when an I/O operation modiÔ¨Åes a
system state. Operations in I/O systems are categorized into
four groups: I/O transfers, partition creations and destructions,
subjects/objects activations, and subjects/objects deactivations.
Each operation is deÔ¨Åned as a Dafny method and includes
authorization decisions of the abstract I/O separation model.














	

	










	

	







	

	




	







	


 


Fig. 6. Device transfers authorized by TDs.
*
TDi
TDh
TDj
device i‚Äôs 
direct write 
to TDh
*
TDi
*
TDh
TDj
device h‚Äôs 
direct write 
to TDj
*
TDi
TDh
*
*
TDj
reachable via writes 
write transfer
Unauthorize write transfer
Fig. 7. Computing transitive closure of TD state
1) I/O transfers and their authorization: Drivers and de-
vices perform different
types of transfers to I/O objects.
Drivers issue arbitrary transfers to any I/O object except to
devices‚Äô hardcoded TDs. Devices can read only their own
hardcoded TDs but not those of other devices. A device can
issue a transfer to an I/O object if and only if the transfer is
deÔ¨Åned by the device‚Äôs hardcoded TD or by a TD that can
be read by the device via its hardcoded TD. For example, the
device of Figure 6(a) can issue a read/write transfer to the I/O
object 2 because (1) the device can read its hardcoded TD, (2)
hardcoded TD deÔ¨Ånes a read (R) transfer to TD1 and thus the
device can read TD1, and (3) TD1 deÔ¨Ånes a read/write (R/W)
transfer to the I/O object 2. However, the device cannot issue
transfers to the I/O object 3 since they are not deÔ¨Åned by any
TD that can be read by the device. The device can do so only
after a driver modiÔ¨Åes TD1; see Figure 6(b).
For these I/O transfers, the kernel needs to check that the
subjects and objects of the transfers are in the same partition.
However, this check alone is insufÔ¨Åcient to prevent cross-
partition indirect transfers; see Figure 2 (b). To do so, writes
to TDs require a more complex check, which we detail next.
Example Transitive Closure of Active TDs. Writes to active
TDs enable indirect transfers by devices. For example, in the
Indirect Transfer 1 of Figure 2(b), malicious driver i writes to
TDi of device i, and hence conÔ¨Ågures device i to write the
TDh of device h, which causes h to perform a direct write
to target device j. Here, device i performs an indirect I/O
transfer to device j via device h, which acts as a surrogate
for device i and accesses I/O objects of device j on behalf
of device i. To accommodate hardware that cannot mediate
I/O transfer between h and i (e.g., device P2P transfers), the
kernel needs to prevent driver i from writing TDi with values
that may enable unauthorized future indirect write transfers.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:26 UTC from IEEE Xplore.  Restrictions apply. 
577
The solution is to Ô¨Årst compute a transitive closure of the
state of all active TDs when TDi is written by driver i, and
then check that the transitive closure does not include cross-
partition accesses. Figure 7 builds on the example of Indirect
Transfer 1 of Figure 2(b) to illustate how the transitive closure
computation reveals the unauthorized write indirect transfer to
the TDj of device j. Each box represents a state of all active
TDs (denoted as TD state), the leftmost one being the current
state containing all the active TDs when i has written to TDi.
TDs with an * are updated and different from the initial state.
The computation starts from the leftmost state and discovers
that driver i‚Äôs write to TDi has created a write transfer from
device i to TDh, indicated by the arrow from TDi to TDh. The
algorithm then generates a new TD state, as illustrated by the
second box, after allowing i to write to TDh. This write creates
a write transfer from h to TDj, which is cross-partition and
marked in red. At this point, our algorithm has not determined
this transfer is cross-partition. In the next step, the algorithm
analyzes this new TD state and discovers that it enables device
h to write TDj, and generates the third TD state by allowing
h to write TDj. Now, the algorithm examines the write issued
and determines that this is an unauthorized indirect transfer.
At this point, the kernel knows that i‚Äôs write to TDi shouldn‚Äôt
be allowed. The transitive closure computation aims to include
all reachable TD states from the initial state, until a Ô¨Åxed point
is reached or an unauthorized access is found. In this example,
the transitive closure computation includes the three TD states
shown. More details are in Appendix A-D.
2) Partition creation/destruction: A new I/O partition with
ID new pid can be created as long as new pid has not been
used before. A partition with ID pid can be destroyed if no
subject or object exists in that partition, to ensure that no
objects have dangling references to non-existent partition IDs.
3) Object activation/deactivation: Inactive subjects and ex-
ternal objects can be activated into an existing partition. To
ensure no data leaks or accidental references to data occur in
the old partition, the kernel clears the data contained in those
objects, except when it is a device‚Äôs (immutable) hardcoded
TD, as we assume the Ô¨Årmware is trusted. If the threat model
considers device Ô¨Årmware to be malicious, the veriÔ¨Åed correct
Ô¨Årmware can be locally re-Ô¨Çashed and/or remotely attested.
Active subject and external objects can be deactivated by
setting their partition ID to be NULL. The kernel needs to
ensure that no active device can issue transfers to the item
to be deactivated by computing and checking the transitive
closure of the TD state in the current system state. This check
is necessary; otherwise, after a deactivate operation, active
devices can issue transfers to inactive objects, and further issue
cross-partition transfers after these objects are reactivated into
new partitions. For example, consider the case where partition
1 contains device i and driver h, in which device i‚Äôs TD deÔ¨Ånes
a transfer to an object of driver h. After driver h is deactivated
and reactivated into another partition 2, device i can issue
cross-partition transfers to driver h and break I/O separation.
Merely clearing all objects of driver h does not remove the
insecure transfer, and hence cannot prevent this attack. That
is, the check of deactivate operations ensures that the lifetime
of conÔ¨Åguration of transfers to an object must be strictly less
than the lifetime of the object in a partition.
C. Soundness
We deÔ¨Åne the following two isolation properties, over the
execution traces of the abstract I/O separation model.
(SP1) No I/O transfer crosses a partition;
(SP2) Only hardcoded TDs can be reused in a new active
partition.
These two security properties are sufÔ¨Åcient for I/O separation
in practice, because each I/O object always belongs to one
partition at any time. If an I/O object is in one partition,
subjects in other partitions cannot access the object, by
property SP1. Further, when objects are moved into a new
partition (i.e., by object deactivation and reactivation), they
may be accessed by all subjects of the new partition, but
not by the old ones. The subjects in this new partition also
cannot read any value written by any subjects of the old
partition. To do otherwise, violates SP2: either TDs are reused
or the new partition is the NULL partition. In the later case,
subjects cannot issue transfers, and consequently cannot read
objects. The reuse of hardcoded TDs between partitions is
secure because hardcoded TDs are immutable between any
two trusted device re-Ô¨Çashings.
We prove that our abstract I/O separation model is sound
with respect to the above mentioned security properties.
Corollary 1 (Soundness of abstract model). The abstract I/O
separation model satisÔ¨Åes SP1 and SP2.
Next, we explain how to prove the soundness theorem in
Dafny. First, we identify state invariants, which deÔ¨Åne the
security guarantees of abstract model states (Appendix A-C).
These state invariants are preserved by all state transitions. We
show one example invariant below.
(SI1) For any TD state of a transitive closure in a system
state k, if a TD can be read by an active device, then objects
referenced in that TD (i) must be in the same partition as the
TD, and (ii) must not be hardcoded TDs.
Invariant SI1(i) implies that a device must be in the same
partition as the objects to which the device can issue direct
or indirect transfers; i.e., no cross-partition access is possible.
This is because devices are always in the same partition as
their hardcoded TDs and TDs are objects themselves. Thus,
if invariant SI1(i) holds, an active device must be in the
same partition as all the TDs and other objects to which the
device can issue direct or indirect transfers (via TDs). SI1(ii)
together with the fact that hardcoded TDs cannot be accessed
by drivers, reÔ¨Çects the invariant that hardcoded TDs are local
to devices and are immutable between Ô¨Årmware re-Ô¨Çashings.
Then, we deÔ¨Åne transition constraints (aka., transition prop-
erty), a set of properties for every possible state transition.
Each transition constraint speciÔ¨Åes properties of the starting
state, resulting state, and the operation. Below, we illustrate
the constraint used to prove SP2. Appendix A-C contains all
the transition constraints.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:26 UTC from IEEE Xplore.  Restrictions apply. 
578
with non-NULL partition IDs.
(TC1) Only hardcoded TDs can be reused in a new partition
The general properties for a transition from state k to k(cid:2)
that we prove are: (1) If k is secure (i.e., satisÔ¨Åes all the state
invariants), then k(cid:2) is also secure; and (2) k and k(cid:2) satisfy
all the transition constraints (e.g., TC1); and (3) if an I/O
transfer operation is allowed by the kernel, then the subjects
in that operation must be in the same partition as the objects
accessed by that operation. Property (3) can be derived from
the combination of the state invariant (SI1), which ensures
only same-partition transfers from device reads and writes are
allowed by the TD states, and the semantics of driver reads
and writes, which check the partition IDs of objects being
accessed. We then show that the initial state is secure and use
the above one-step lemmas and inductively show that both the
state invariants and transition constraints hold on all traces.
Theorem 1 (State Invariants).
If state kn is the resulting state
after a sequence of n transitions from state k0 and k0 satisÔ¨Åes
all state invariants, then kn also satisÔ¨Åes all state invariants.
Proof Sketch. Proof by induction over n. In the base case,