title:Clickjacking: Attacks and Defenses
author:Lin-Shung Huang and
Alexander Moshchuk and
Helen J. Wang and
Stuart Schecter and
Collin Jackson
Clickjacking: Attacks and Defenses
Lin-Shung Huang
Carnegie Mellon University
PI:EMAIL
Alex Moshchuk
Microsoft Research
PI:EMAIL
Helen J. Wang
Microsoft Research
PI:EMAIL
Stuart Schechter
Microsoft Research
PI:EMAIL
Collin Jackson
Carnegie Mellon University
PI:EMAIL
Abstract
Clickjacking attacks are an emerging threat on the web.
In this paper, we design new clickjacking attack variants
using existing techniques and demonstrate that existing
clickjacking defenses are insufﬁcient. Our attacks show
that clickjacking can cause severe damages, including
compromising a user’s private webcam, email or other
private data, and web surﬁng anonymity.
We observe the root cause of clickjacking is that an
attacker application presents a sensitive UI element of a
target application out of context to a user (such as hiding
the sensitive UI by making it transparent), and hence the
user is tricked to act out of context. To address this root
cause, we propose a new defense, InContext, in which
web sites (or applications) mark UI elements that are sen-
sitive, and browsers (or OSes) enforce context integrity
of user actions on these sensitive UI elements, ensuring
that a user sees everything she should see before her ac-
tion and that the timing of the action corresponds to her
intent.
Introduction
We have conducted user studies on Amazon Mechani-
cal Turk with 2064 participants to evaluate the effective-
ness of our attacks and our defense. We show that our at-
tacks have success rates ranging from 43% to 98%, and
our InContext defense can be very effective against the
clickjacking attacks in which the use of clickjacking is
more effective than social engineering.
1
When multiple applications or web sites (or OS princi-
pals [44] in general) share a graphical display, they are
subject to clickjacking [13] (also known as UI redress-
ing [28, 49]) attacks: one principal may trick the user
into interacting with (e.g., clicking, touching, or voice
controlling) UI elements of another principal, triggering
actions not intended by the user. For example, in Like-
jacking attacks [46], an attacker web page tricks users
into clicking on a Facebook “Like” button by transpar-
ently overlaying it on top of an innocuous UI element,
such as a “claim your free iPad” button. Hence, when
the user “claims” a free iPad, a story appears in the user’s
Facebook friends’ news feed stating that she “likes” the
attacker web site. For ease of exposition, our description
will be in the context of web browsers. Nevertheless, the
concepts and techniques described are generally applica-
ble to all client operating systems where display is shared
by mutually distrusting principals.
Several clickjacking defenses have been proposed and
deployed for web browsers, but all have shortcomings.
Today’s most widely deployed defenses rely on frame-
busting [21, 37], which disallows a sensitive page from
being framed (i.e., embedded within another web page).
Unfortunately, framebusting is fundamentally incompat-
ible with embeddable third-party widgets, such as Face-
book Like buttons. Other existing defenses (discussed
in Section 3.2) suffer from poor usability, incompatibil-
ity with existing web sites, or failure to defend against
signiﬁcant attack vectors.
To demonstrate the insufﬁciency of state-of-the-art de-
fenses, we construct three new attack variants using ex-
isting clickjacking techniques. We designed the new at-
tack scenarios to be more damaging than the existing
clickjacking attacks in the face of current defenses. In
one scenario, the often-assumed web-surﬁng-anonymity
can be compromised. In another, a user’s private data and
emails can be stolen. Lastly, an attacker can spy on a user
through her webcam. We have conducted the ﬁrst click-
jacking effectiveness study through Amazon Mechanical
Turk and ﬁnd that the aforementioned attacks have suc-
cess rates of 98%, 47%, and 43%, respectively.
should support third-party widgets.
Learning from the lessons of existing defenses, we set
the following design goals for our clickjacking defense:
• Widget compatibility:
clickjacking protection
• Usability: users should not be prompted for their
• Backward compatibility:
the defense should not
break existing web sites (e.g., by disallowing exist-
actions.
ing functionality).
• Resiliency: our defense should address the root
cause of clickjacking and be resilient to new attack
vectors.
The root cause of clickjacking is that an attacker ap-
plication presents a sensitive UI element of a target ap-
plication out of context to a user and hence the user gets
tricked to act out of context. For example, in the afore-
mentioned Likejacking attack scenario, an attacker web
page presents a false visual context to the user by hiding
the sensitive “Like” button transparently on top of the
“claim your free iPad” button.
To address the root cause and achieve the above goals,
our defense, called InContext, lets web sites mark their
sensitive UI elements and then lets browsers enforce the
context integrity of user actions on the sensitive UI ele-
ments. The context of a user’s action consists of its visual
context and temporal context.
• Visual context is what a user should see right before
her sensitive action. To ensure visual context in-
tegrity, both the sensitive UI element and the pointer
feedback (such as cursors, touch feedback, or NUI
input feedback) need to be fully visible to a user. We
refer to the former as target display integrity and to
the latter as pointer integrity.
• Temporal context refers to the timing of a user ac-
tion. Temporal integrity ensures that a user action
at a particular time is intended by the user. For ex-
ample, an attack page can compromise temporal in-
tegrity by launching a bait-and-switch attack by ﬁrst
baiting the user with a “claim your free iPad” button
and then switching in a sensitive UI element right
before the anticipated time of user click.
We implemented a prototype of InContext on Internet
Explorer 9 and found that it is practical to use, adding at
most 30ms of delay for verifying a click. We evaluated
InContext through Amazon Mechanical Turk user stud-
ies, and our results show that InContext is very effective
against attacks in which the use of clickjacking is vital to
attack effectiveness.
2 Threat Model
The primary attacker against which InContext defends
is a clickjacking attacker. A clickjacking attacker has
all the capabilities of a web attacker [17]: (1) they own
a domain name and control content served from their
web servers, and (2) they can make a victim visit their
site, thereby rendering attacker’s content in the victim’s
browser. When a victim user visits the attacker’s page,
the page hides a sensitive UI element either visually or
temporally (see Section 3.1 for various techniques to
achieve this) and lure the user into performing unin-
tended UI actions on the sensitive element out of context.
We make no attempt to protect against social engineer-
ing attackers who can succeed in their attacks even when
the system is perfectly designed and built. For example,
a social engineering attacker can fool users into clicking
on a Facebook Like button by drawing misleading con-
tent, such as images from a charity site, around it. Even
though the Like button is not manipulated in any way,
a victim may misinterpret the button as “liking” charity
work rather “liking” the attacker web site, and the vic-
tim may have every intention to click on the button. In
contrast, a clickjacking attacker exploits a system’s in-
ability to maintain context integrity for users’ actions and
thereby can manipulate the sensitive element visually or
temporally to trick users.
3 Background and Related Work
In this section, we discuss known attacks and defenses
for clickjacking, and compare them to our contributions.
Below, we assume a victim user is visiting a clickjack-
ing attacker’s page, which embeds and manipulates the
target element residing on a different domain, such as
Facebook’s Like button or PayPal’s checkout dialog.
3.1 Existing clickjacking attacks
We classify existing attacks according to three ways of
forcing the user into issuing input commands out of con-
text: (1) compromising target display integrity, the guar-
antee that users can fully see and recognize the target el-
ement before an input action; (2) compromising pointer
integrity, the guarantee that users can rely on cursor
feedback to select locations for their input events; and
(3) compromising temporal integrity, the guarantee that
users have enough time to comprehend where they are
clicking.
3.1.1 Compromising target display integrity
Hiding the target element. Modern browsers support
HTML/CSS styling features that allow attackers to visu-
ally hide the target element but still route mouse events to
it. For example, an attacker can make the target element
transparent by wrapping it in a div container with a CSS
opacity value of zero; to entice a victim to click on it,
the attacker can draw a decoy under the target element
by using a lower CSS z-index [13]. Alternatively, the
attacker may completely cover the target element with an
opaque decoy, but make the decoy unclickable by setting
the CSS property pointer-events:none [4]. A vic-
tim’s click would then fall through the decoy and land on
the (invisible) target element.
Partial overlays. Sometimes, it is possible to visually
confuse a victim by obscuring only a part of the target
element [12, 41]. For example, attackers could over-
lay their own information on top of a PayPal checkout
iframe to cover the recipient and amount ﬁelds while
leaving the “Pay” button intact; the victim will thus have
2
incorrect context when clicking on “Pay”. This over-
laying can be done using CSS z-index or using Flash
Player objects that are made topmost with Window Mode
property [2] set to wmode=direct. Furthermore, a tar-
get element could be partially overlaid by an attacker’s
popup window [53].
Cropping. Alternatively, the attacker may crop the target
element to only show a piece of the target element, such
as the “Pay” button, by wrapping the target element in a
new iframe that uses carefully chosen negative CSS po-
sition offsets and the Pay button’s width and height [41].
An extreme variant of cropping is to create multiple 1x1
pixel containers of the target element and using single
pixels to draw arbitrary clickable art.
3.1.2 Compromising pointer integrity
Proper visual context requires not only the target ele-
ment, but also all pointer feedback to be fully visible
and authentic. Unfortunately, an attacker may violate
pointer integrity by displaying a fake cursor icon away
from the pointer, known as cursorjacking. This leads
victims to misinterpret a click’s target, since they will
have the wrong perception about the current cursor lo-
cation. Using the CSS cursor property, an attacker can
easily hide the default cursor and programmatically draw
a fake cursor elsewhere [20], or alternatively set a custom
mouse cursor icon to a deceptive image that has a cursor
icon shifted several pixels off the original position [7].
Another variant of cursor manipulation involves the
blinking cursor which indicates keyboard focus (e.g.,
when typing text into an input ﬁeld). Vulnerabilities
in major browsers have allowed attackers to manipulate
keyboard focus using strokejacking attacks [50, 52]. For
example, an attacker can embed the target element in a
hidden frame, while asking users to type some text into a
fake attacker-controlled input ﬁeld. As the victim is typ-
ing, the attacker can momentarily switch keyboard focus
to the target element. The blinking cursor confuses vic-
tims into thinking that they are typing text into the at-
tacker’s input ﬁeld, whereas they are actually interacting
with the target element.
3.1.3 Compromising temporal integrity
Attacks in the previous two sections manipulated visual
context to trick the user into sending input to the wrong
UI element. An orthogonal way of achieving the same
goal is to manipulate UI elements after the user has de-
cided to click, but before the actual click occurs. Humans
typically require a few hundred milliseconds to react to
visual changes [34, 54], and attackers can take advantage
of our slow reaction to launch timing attacks.
For example, an attacker could move the target ele-
ment (via CSS position properties) on top of a decoy
button shortly after the victim hovers the cursor over the
decoy, in anticipation of the click. To predict clicks more
effectively, the attacker could ask the victim to repeti-
tively click objects in a malicious game [1, 3, 54, 55]
or to double-click on a decoy button, moving the tar-
get element over the decoy immediately after the ﬁrst
click [16, 33].
3.1.4 Consequences
To date, there have been two kinds of widespread click-
jacking attacks in the wild: Tweetbomb [22] and Like-
jacking [46]. In both attacks, an attacker tricks victims
to click on Twitter Tweet or Facebook Like buttons us-
ing hiding techniques described in Section 3.1.1, causing
a link to the attacker’s site to be reposted to the victim’s
friends and thus propagating the link virally. These at-
tacks increase trafﬁc to the attacker’s site and harvest a
large number of unwitting friends or followers.
Many proof-of-concept clickjacking techniques have
also been published. Although the impact of these at-
tacks in the wild is unclear, they do demonstrate more
serious damages and motivate effective defenses. In one
case [38], attackers steal user’s private data by hijack-
ing a button on the approval pages of the OAuth [10]
protocol, which lets users share private resources such
as photos or contacts across web sites without handing
out credentials. Several attacks target the Flash Player
webcam settings dialogs (shown in Figure 1), allowing
rogue sites to access the victim’s webcam and spy on the
user [1, 3, 9]. Other POCs have forged votes in online
polls, committed click fraud [11], uploaded private ﬁles
via the HTML5 File API [19], stolen victims’ location in-
formation [54], and injected content across domains (in
an XSS spirit) by tricking the victim to perform a drag-
and-drop action [18, 40].
3.2 Existing anti-clickjacking defenses
Although the same-origin policy [35] is supposed to pro-
tect distrusting web sites from interfering with one an-
other, it fails to stop any of the clickjacking attacks we
described above. As a result, several anti-clickjacking
defenses have been proposed (many of such ideas were
suggested by Zalewski [51]), and some have been de-
ployed by browsers.
3.2.1 Protecting visual context
User Conﬁrmation. One straightforward mitigation for
preventing out-of-context clicks is to present a conﬁrma-
tion prompt to users when the target element has been
clicked. Facebook currently deploys this approach for
the Like button, asking for conﬁrmation whenever re-
quests come from blacklisted domains [47]. Unfortu-
nately, this approach degrades user experience, espe-
cially on single-click buttons, and it is also vulnerable to
double-click timing attacks of Section 3.1.3, which could
trick the victim to click through both the target element
3
or disallowing the target element
and a conﬁrmation popup.
UI Randomization. Another technique to protect the
target element is to randomize its UI layout [14]. For
example, PayPal could randomize the position of the Pay
button on its express checkout dialog to make it harder
for the attacker to cover it with a decoy button. This
is not robust, since the attacker may ask the victim to
keep clicking until successfully guessing the Pay button’s
location.
Opaque Overlay Policy. The Gazelle web browser [45]
forces all cross-origin frames to be rendered opaquely.
However, this approach removes all transparency from
all cross-origin elements, breaking benign sites.
Framebusting. A more effective defense is frame-
busting,
from
being rendered in iframes.
This can be done
either with JavaScript code in the target element
which makes sure it is the top-level document [37],
or with newly added browser support, using fea-
tures
and CSP’s
frame-ancestors [39]. A fundamental limitation of
framebusting is its incompatibility with target elements
that are intended to be framed by arbitrary third-party
sites, such as Facebook Like buttons.1
In addition,
previous research found JavaScript framebusting unreli-
able [37], and in Section 4.2, we will show attacks that
bypass framebusting protection on OAuth dialogs using
popup windows. Zalewski has also demonstrated how
to bypass framebusting by navigating browsing history
with JavaScript [55].
Visibility Detection on Click.
Instead of completely
disallowing framing, an alternative is to allow rendering
transparent frames, but block mouse clicks if the browser
detects that the clicked cross-origin frame is not fully vis-
ible. Adobe has added such protection to Flash Player’s
webcam access dialog in response to webcam clickjack-
ing attacks; however, their defense only protects that di-
alog and is not available for other web content.
called X-Frame-Options [21]
The ClearClick module of the Firefox extension No-
Script also uses this technique [23], comparing the
bitmap of the clicked object on a given web page to the
bitmap of that object rendered in isolation (e.g., without
transparency inherited from a malicious parent element).
Although ClearClick is reasonably effective at detect-
ing visual context compromises, its on-by-default nature
must assume that all cross-origin frames need clickjack-
ing protection, which results in false positives on some
sites. Due to these false positives, ClearClick prompts
users to conﬁrm their actions on suspected clickjacking
attacks, posing a usability burden. An extension called
1X-Frame-Options and frame-ancestors both allow specify-