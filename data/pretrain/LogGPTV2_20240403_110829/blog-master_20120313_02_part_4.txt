number of transactions actually processed: 965529  
tps = 5363.841108 (including connections establishing)  
tps = 5364.017826 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002461        \setrandom userid 4000001 8000000  
        0.553797        SELECT f_user_login_upd_1(:userid);  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 3  
number of threads: 3  
duration: 180 s  
number of transactions actually processed: 969904  
tps = 5388.302421 (including connections establishing)  
tps = 5388.476038 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002436        \setrandom userid 8000001 12000000  
        0.551348        SELECT f_user_login_upd_2(:userid);  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 3  
number of threads: 3  
duration: 180 s  
number of transactions actually processed: 990833  
tps = 5504.605729 (including connections establishing)  
tps = 5504.844893 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002448        \setrandom userid 12000001 16000000  
        0.539510        SELECT f_user_login_upd_3(:userid);  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 4  
number of threads: 4  
duration: 180 s  
number of transactions actually processed: 1316258  
tps = 7312.497604 (including connections establishing)  
tps = 7312.837009 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002405        \setrandom userid 16000001 20000000  
        0.541622        SELECT f_user_login_upd_4(:userid);  
```  
总计 :   
```  
QPS :   
158169.217446 ( select 89827.384547, insert 39394.952222, update 28946.880677 )  
158175.593994 ( select 89830.613295, insert 39397.035365, update 28947.945334 )  
```  
4\. 瓶颈分析与优化  
如果前面的拆库是纵向的拆的话, 那么接下来要提升性能就得横向的来拆了.  
例如 :   
select能力可以通过数据库流复制扩展, 9.2以后可以级联复制因此基本上可以做到不影响主库性能的情况下无限扩展.  
insert能力可以通过增加logdb服务器扩展, 无限扩展.  
update能力可以通过将表拆分到多个服务器上, 无限扩展.  
横向分库,需要考虑跨库事务的问题, 1.plproxy  
参考 :   
《A Smart PostgreSQL extension plproxy 2.2 practices》  
http://blog.163.com/digoal@126/blog/static/163877040201192535630895/  
## 【调优阶段12】  
本文的最后一个阶段, 由于服务器有限, 所以我这里测试的是一个节点的性能, 以前测试过plproxy, 性能是线性扩展的.  
因此测试一个节点基本上就可以推算出多节点的性能.  
1\. 压力测试  
```  
pgbench -M prepared -r -c 16 -f /home/postgres/test_zsplit/login_upd0.sql -j 16 -n -T 180 -h 172.16.3.150 -p 1921 -U digoal digoal >./log.login_upd0 &  
```  
2\. 测试结果  
```  
cat log.login_upd0  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 16  
duration: 180 s  
number of transactions actually processed: 6015759  
tps = 33416.574452 (including connections establishing)  
tps = 33419.030898 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002152        \setrandom userid 1 4000000  
        0.473792        SELECT f_user_login_upd_0(:userid);  
```  
因此5个节点的性能约等于 :   
```  
tps = 167082.872260 ( 33416.574452 * 5 ) (including connections establishing)  
tps = 167095.154490 ( 33419.030898 * 5 ) (excluding connections establishing)  
```  
3\. 瓶颈分析与优化  
同11阶段 :   
select能力可以通过数据库流复制扩展, 9.2以后可以级联复制因此基本上可以做到不影响主库性能的情况下无限扩展.  
insert能力可以通过增加logdb服务器扩展, 无限扩展.  
update能力可以通过将表拆分到多个服务器上, 无限扩展.  
横向分库,需要考虑跨库事务的问题, 1.plproxy  
## 【调优性能图表1】  
![pic](20120313_02_pic_001.jpg)  
## 【调优性能图表2】  
![pic](20120313_02_pic_002.jpg)  
## 【其他可优化点补充】  
1\. 批量提交,降低IO请求量, 并发请求很高的场景. 但是当并发场景这么高的时候已经可以考虑增加服务器分库了.  
相关参数  
```  
#commit_delay = 0  
#commit_siblings = 5  
```  
参考《Test PostgreSQL 9.1's group commit》  
http://blog.163.com/digoal@126/blog/static/1638770402011102214142132/  
2\. 连接池,如pgbouncer(适用于短连接, 大量空闲连接的情况.)  
3\. 绑定变量, 性能提升参考  
《how many performance decreased use dynamic SQL》  
http://blog.163.com/digoal@126/blog/static/1638770402011109103953350/  
4\. user_session中记录了用户的登陆统计信息和退出统计信息, 由于MVCC特性, 每次更新都会新产生一条tuple, 因此如果将登陆和退出的统计拆开,  就能减少新增的tuple的大小. 一定程度上提升性能.  
```  
user_session_login (userid, logintime, login_count)  
user_session_logout (userid, logouttime, online_interval)  
```  
5\. OS级别也有可以优化的地方, 比如文件系统的mount参数可以加上noatime.  
6\. 服务器硬件也有可以优化的地方, 比如numa.  
7\. PostgreSQL也还有可以微调的参数, 比如bgwriter_lru_maxpages和bgwriter_lru_multiplier它们的值也将影响数据库和文件系统交互的频率以及每次交互产生的io请求数.  
8\. 在做分表优化的时候, 本例使用的是按userid分段拆分成了5个表. 其实还可以按hash取模拆, 按时间段拆等等. 拆分的关键是尽量按照常用的条件字段进行拆分. 另外需要注意的是, 我这里没有提到PostgreSQL的partition table的实现, 而是直接使用应用端来识别数据在哪个分区. 原因是PostgreSQL的partition table需要通过rule或者触发器来实现, 大量的消耗数据库服务器的CPU, 不推荐使用. 性能下降和Oracle的比较可参考,  
  《execute plan difference between Oracle and PostgreSQL's partition table》  
  http://blog.163.com/digoal@126/blog/static/163877040201212432441676/  
  《Compare Oracle's & PostgreSQL's Partition Table write performance》  
  http://blog.163.com/digoal@126/blog/static/163877040201123084853271/  
  《PostgreSQL partition table's arithmetic tuning example》  
  http://blog.163.com/digoal@126/blog/static/1638770402011210114036419/  
## 【小结】  
1\. 诊断角度  
操作系统层面: 查看CPU, IO.  
数据库层面:   
查看pg_stat_statements  
```  
       Column        |       Type       | Modifiers   
---------------------+------------------+-----------  
 userid              | oid              |   
 dbid                | oid              |   
 query               | text             |   
 calls               | bigint           |   
 total_time          | double precision |   
 rows                | bigint           |   
 shared_blks_hit     | bigint           |   
 shared_blks_read    | bigint           |   
 shared_blks_written | bigint           |   
 local_blks_hit      | bigint           |   
 local_blks_read     | bigint           |   
 local_blks_written  | bigint           |   
 temp_blks_read      | bigint           |   
 temp_blks_written   | bigint           |   
```  
其他pg_stat性能视图  
日志中的long SQL,  
2\. 优化角度  
参数, SQL, 架构, 连接池, 表空间拆分, 存储cache, 分表, 分库  
## 【参考】  
1\.《PostgreSQL HOT STANDBY using Stream》  
http://blog.163.com/digoal@126/blog/static/16387704020110442050808/  
2\.《A Smart PostgreSQL extension plproxy 2.2 practices》  
http://blog.163.com/digoal@126/blog/static/163877040201192535630895/  
3\.《Test PostgreSQL 9.1's group commit》  
http://blog.163.com/digoal@126/blog/static/1638770402011102214142132/  
4\.《how many performance decreased use dynamic SQL》  
http://blog.163.com/digoal@126/blog/static/1638770402011109103953350/  
5\.《execute plan difference between Oracle and PostgreSQL's partition table》  
http://blog.163.com/digoal@126/blog/static/163877040201212432441676/  
6\.《Compare Oracle's & PostgreSQL's Partition Table write performance》  
http://blog.163.com/digoal@126/blog/static/163877040201123084853271/  
7\.《PostgreSQL partition table's arithmetic tuning example》  
http://blog.163.com/digoal@126/blog/static/1638770402011210114036419/  
8\.《Use pgbench test Your PostgreSQL DBSystem performace》  
http://blog.163.com/digoal@126/blog/static/163877040201151534631313/  
9\.《Use pg_test_fsync test which wal_sync_method is fastest in your filesystem》  
http://blog.163.com/digoal@126/blog/static/163877040201141795025354/  
10\.《a powerful upgrade from pgfincore 1.0》  
http://blog.163.com/digoal@126/blog/static/1638770402011630102117658/  
11\.《use posix_fadvise pre-cache frequency data》  
http://blog.163.com/digoal@126/blog/static/163877040201062944945126/  
12\.《TOAST table with pgfincore》  
http://blog.163.com/digoal@126/blog/static/16387704020120524144140/  
13\.《PostgreSQL and Oracle's async commit》  
http://blog.163.com/digoal@126/blog/static/16387704020121229223072/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")