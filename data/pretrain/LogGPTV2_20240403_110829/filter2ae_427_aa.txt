# 0．概述
本文将介绍一下Windows上的CFG防护技术。  
主要会讲一个 demo，自己动手写一个有CFG保护的程序，然后跟踪调试。  
接着会调试 CFG 在IE ， Edge上出现的情况。  
最后提一些曾经所使用的bypass方法。
# 1.CFG简介
微软在Windows10和Windows8.1Update3（2014年11月发布）系统中已经默认启用了一种新的机制- Control Flow Guard
（控制流防护）。  
这项技术通过在间接跳转前插入校验代码，检查目标地址的有效性，进而可以阻止执行流跳转到预期之外的地点， 最终及时并有效的进行异常处理，避免引发相关的安全问题。  
简单的说，就是在程序间接跳转之前，会判断这个将要跳转的地址是否是合法的。  
如下：  
① 没有CFG保护  
可以看到有段 call ecx 的间接调用，而ecx 中地址，由：  
mov eax , [ebp+var_8]  
mov ecx , [eax+edx]  
得： ecx = [ [ebp+var_8] + edx ]  
注：下面还有一个 call j_RTC_CheckEsp ，这个RTC_CheckEsp 函数是用来检查堆栈是否平衡的。简单的说，函数在调用之前会把 esp
保存在edi/esi 等寄存器中；当函数调用完之后，RTC_CheckEsp 会去检查这个时候的esp值与之前保存在edi/esi
中的值是否一致；不一致说明esp被改动了，堆栈上存在数据溢出，就会丢出一个错误。  
②启用 CFG 保护：  
这里的间接调用是最后一句 call [ebp+var_14] 。在这个调用之前，可以看到：  
mov ecx , [ebp+var_14]  
call ds: guard_check_icall_fptr  
这个里先把下面要调用的地址[ebp+var_14] 放到了 ecx 里面，然后去调用 guard_check_icall_fptr；而
guard_check_icall_fptr 就是CFG保护开启才有的保护函数；这个函数里面，将会去判断 ecx 这个地址里的调用函数是不是一个合法的函数。  
然后有 RTC_CheckEsp ，最后才是间接调用。
# 2.demo
## 2.1 环境&工具&源码
前面了解了CFG的大概情况，那么这里通过自己写一个简单的程序，进行调用调试分析。  
环境与工具：windows 10 pro , Visual Studio 2017 , windbg , IDA pro  
源码: [出自这里](http://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf "出自这里")
    typedef int(*fun_t)(int);
    int foo(int a)
    {
        printf("hellow world %d\n",a);
        return a;
    }
    class CTargetObject
    {
    public:
        fun_t fun;
    };
    int main()
    {
        int i = 0;
        CTargetObject *o_array = new CTargetObject[5];
        for (i = 0; i > 8 = 0x0000b613 //这里右移8位，就相当于取高3字节。
    edx = [ 0x00b80000 + 0x0000b613*4 ] = 0x10100444 
    所以：CFGbitmap = 0x10100444 ，也就是前面讲原理说到的值。
下面，来验证：  
    eax = ecx = 0x00b613a0   ->   eax  >> 3 = 0x0016c274 
    test cl ,0Fh    //   0xa0  &  0x0F  = 0  
    ZF = 0           // ZF 为0 ,jne不跳转，说明以0x0f对齐
    bt edx, eax 
    /*
    bt 指令把指定的位传送给CF标志寄存器，这里的意思就是把 edx 的某一位放到CF里，这个某一位由eax的值确定，那eax的值呢？就是 eax mod 0x20 的值。
    为什么是mod 0x20呢，这是根据目的操作数来确定的，也就是edx, edx 是32位寄存器，0x20 = 32 (d)。
    也就是说eax的值需要mod上对应的寄存器位数。且目的操作数只能是16/32位通用寄存器或存储单元
    为什么eax 右移3位，然后用bt 指令就能达到取最低字节的前5位 作为偏移值的效果呢？
    eax = 0x00b613a0   
    0000 0000 1011 0110 0001 0011 1010 0000
    eax >> 3  // 最低字节的最后8位移走3位 ，剩下5位
    0000 0000 0001 0110 1100 0010 0111 0100
    这剩下的5位，相当于二进制5个1： 11111  =  31 (十进制) ，就做到了 eax对 0x20 取模，模值就是偏移值。
    所以:
    shr eax, 3