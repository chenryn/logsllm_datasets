# Cross-Platform Analysis of Indirect File Leaks in Android and iOS Applications

## Presenter
Daoyuan Wu  
PhD Candidate at SMU  
HITCON Pacific’17

## Introduction
In an increasingly appified world, the security landscape for mobile applications differs significantly from that of traditional PCs. This presentation explores indirect file leaks (IFLs) in both Android and iOS applications, highlighting the unique challenges and vulnerabilities associated with each platform.

### Mobile Sandbox
- **Pic Source:** [hiqes.com/android-security-part-1/](http://hiqes.com/android-security-part-1/)
- **Threat Model:** The mobile threat model is distinct from that of PCs, necessitating a specialized approach to security.

## Direct File Leak
- **Case Study:** [CVE-2011-1717](https://tinyurl.com/CVE-2011-1717) for Skype
- **Reference:** SEAndroid paper in NDSS’13
- **Status:** This vulnerability was once exploitable but is no longer valid due to SEAndroid protections.
- **Example:**
  - `-rw-rw-rw- main.db`
  - `-rw-rw-rw- shared.xml`

### SEAndroid Protection
- **SEAndroid Status:** 
  ```bash
  $ getenforce
  Enforcing
  ```
- **Question:** How can private app files be stolen within the protection of SEAndroid?

## Indirect File Leak (IFL)
- **Remote Adversary** → **Deputy Component** → **Local Adversary**
- **SEAndroid Limitation:** Cannot check deputy components, which are allowed by SEAndroid.

### Exploitable Deputy Components
- **Content Provider**
- **Browsing Interface**
- **Command Interpreter**
- **Embedded App Server**

### Android Content Provider
- **System Providers:**
  - `content://sms/`
  - `content://call_log/`
  - `content://browser/bookmarks`
- **App-Specific Providers:**
  - `content://qq.profile/info`
  - `content://qq.friendlist/friendlist`

#### IFL via Content Provider
- **Data Flow:**
  - **Step 1:** Access data through the content provider.
  - **Step 2:** Exploit the content provider to leak data.

### Vulnerable Apps
- **Identified Vulnerabilities:** Over 60 CVEs
- **Report Repository:** [GitHub](https://github.com/daoyuan14/ContentProviderReports)

### Story Behind
- **Initial Discovery:**
  - **API Documentation:** Initial research began with reading API documentation.
  - **First PoC:** Tested on Mi Talk (米聊) in October 2011 (v2.1.280).
  - **Paper Submission:** Aimed to publish as the first reporter.

### Platform-Specific Issues
- **Android:**
  - **Exported by Default:** Before Android 4.2, content providers were exported by default.
- **iOS:**
  - **SOPf2 Vulnerability:** Prior to iOS 9, SOPf2 was broken.
  - **Reported to Apple:** January 2015 (CVE-2015-5921).
  - **Root Cause:** Legacy SOP did not adequately cover local schemes.

### FileCross Attacks
- **Auto-Download to SD Card:**
  - **Victim Browser:** Sensitive files are exposed via the browsing interface.
  - **Attack Sequence:**
    1. Attacker sends a crafted HTML file.
    2. Victim opens the file.
    3. Sensitive files are stolen.

### Detailed sopIFL PoC on Android
- **Vulnerable Browsers:** 64 out of 115 Android browser apps were identified as vulnerable.
- **Results and System:** Available at [Google Site](https://sites.google.com/site/androidfilecross)

### sopIFL on iOS
- **Case Studies:**
  - **Evernote (iOS):**
    1. Attacker sends a crafted HTML file via WeChat.
    2. Victim opens the file in Evernote.
    3. Cookie file is stolen.
  - **Mail.Ru (iOS):**
    1. Attacker sends an email with a crafted attachment.
    2. Victim opens the attachment.
    3. Database file is stolen.
  - **QQ (iOS):**
    1. Attacker sends a crafted HTML file in QQ’s chat box.
    2. Victim opens the file.
    3. Private database file is stolen.

### Tools for Accessing iOS App Files
- **libimobiledevice:**
  - **Website:** [libimobiledevice.org](http://www.libimobiledevice.org/)
  - **Cross-Platform:** Runs on Linux.
- **GUI Tools:**
  - iTools
  - iExplorer
  - iFunBox

### Obtaining File Paths
- **Challenges:**
  - **Random Directory Name:** Unlike Android, iOS app directories have random names.
  - **Probing Directory Name:** Requires root privilege on iOS.
- **Solution:**
  - **Import HTML File:** Use JavaScript to alert the document location.
  - **Methods:**
    - Import function in iTools.
    - Open-with feature on iOS.

### aimIFL
- **Definition:** IFL via executing unauthorized JavaScript directly on target files.
- **Types:**
  - **aimIFL-1:** Attack URL actively loads the target file.
  - **aimIFL-2:** Victim app loads the target file as a feature.

### cmdIFL and serverIFL
- **cmdIFL:**
  - **Description:** Exploit command interpreters to execute unauthorized commands.
- **serverIFL:**
  - **Description:** Send unauthorized file extraction requests to embedded app servers.
  - **Example: Vaulty (5M – 10M installs on Google Play)**
    - **Class:** `com.squidtooth.vault.data.Provider`
    - **HTTP Server:** Embedded and listens on port 1562.

### Android vs. iOS
- **Implications:**
  - **iOS SOP:** Opening untrusted files in their own app domain can lead to more pervasive sopIFL attacks.
  - **Randomized App Data Directory:** Makes aimIFL-1 attacks difficult on iOS.
  - **Strict App Review:** Prevents execution of bash commands, reducing cmdIFL attacks.
  - **Background Server Behavior:** Generally not allowed, reducing serverIFL attacks.

### Takeaway
- **IFL Model:** Understanding the different types of IFLs and their implications on Android and iOS.
- **Contact:**
  - **Twitter:** @dao0x
  - **Gmail:** daoyuan0x
  - **Website:** [daoyuan14.github.io](https://daoyuan14.github.io)

### References
1. D. Wu and R. Chang. "Indirect file leaks in mobile applications." In Proc. IEEE Mobile Security Technologies (MoST), 2015.
2. D. Wu and R. Chang. "Analyzing Android Browser Apps for file:// Vulnerabilities." In Proc. Springer Information Security Conference (ISC), 2014.