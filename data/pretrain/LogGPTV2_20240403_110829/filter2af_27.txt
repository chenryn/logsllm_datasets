### Device Guard与脚本环境的安全性探讨

Device Guard及其附带的开源脚本环境是防止攻击的有效组合。当脚本语言（如PowerShell和Windows Scripting Host）被锁定时，Device Guard将阻止执行未经签名的代码。如果需要在这种环境中运行未签名代码，研究旁路方法可能会有所帮助。此外，利用已签名或被允许的脚本或程序来执行未签名代码也可能提供绕过限制的方法。

#### 绕过约束语言模式（CLM）

在Device Guard环境中寻找绕过约束语言模式（CLM）的方法时，通过研究Microsoft签名的PowerShell模块来执行任意未签名代码是一种常见且有效的尝试。大多数Microsoft PowerShell模块都会被签名（按策略批准即隐式）。为了防止滥用已签名的PowerShell模块来绕过CLM，Microsoft添加了一项检查，确保一个模块只有在CLM中加载时才能执行导出的函数（[CVE-2017-8715](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8212)）。这意味着虽然可以根据策略对脚本进行签名并允许其执行，但该脚本只能执行被`Export-ModuleMember`导出的函数。这显著减少了已签名PowerShell模块的攻击面，因为非导出函数将受CLM约束，与未签名代码相同。

尽管这一措施减少了攻击面，但它并未完全消除隐患。例如，在分析Microsoft签名的PowerShell模块文件以查找允许执行未签名代码的函数时，会发现DSC模块中的“MSFT_ScriptResource.psm1”。此模块由Microsoft签名，并具有一个名为`Get-TargetResource`的函数，该函数有一个`GetScript`参数：

```powershell
function Get-TargetResource {
    param (
        [scriptblock]$GetScript
    )
    # 利用[ScriptBlock]::Create()命令创建新的scriptblock
    $scriptBlock = [ScriptBlock]::Create($GetScript)
    # 将psboundparameters参数传递给"ScriptExecutionHelper"函数
    ScriptExecutionHelper -ScriptBlock $scriptBlock -BoundParameters $PSBoundParameters
}
```

观察`ScriptExecutionHelper`函数，它所做的就是获取`psboundparameters`参数（包括新创建的`ScriptBlock`）并调用运算符（&）来执行它：

```powershell
function ScriptExecutionHelper {
    param (
        [scriptblock]$ScriptBlock,
        [hashtable]$BoundParameters
    )
    & $ScriptBlock @BoundParameters
}
```

由于上述内容都发生在Microsoft签名模块中，因此允许该模块以FullLanguage模式运行（即不对其施加任何限制）。要滥用此功能，只需利用`-GetScript`参数将恶意PowerShell代码传递给`Get-TargetResource`函数即可。但是，CVE-2017-8715 的`Export-ModuleMember`命令是否已禁止滥用此功能了呢？查看“MSFT_ScriptResource.psm1”中的导出函数，实际为我们导出的是可滥用函数`Get-TargetResource`：

```powershell
Export-ModuleMember -Function Get-TargetResource
```

为了测试这一点，我们可以添加一些任意C#代码（如计算4的平方根）到名为`$code`的PowerShell变量中：

```powershell
$code = @"
public class MathHelper {
    public static double SquareRoot(double x) {
        return Math.Sqrt(x);
    }
}
"@
```

执行此操作后，我们只需要导入“MSFT_ScriptResource”PowerShell模块，并使用`Add-Type -TypeDefinition $code`作为`-GetScript`参数来调用`Get-TargetResource`函数。执行此操作时，Microsoft签名的PowerShell模块将以FullLanguage模式加载（因为它是通过Device Guard签名和允许的），并且传递给`Get-TargetResource`函数的代码也将以FullLanguage模式执行：

```powershell
Import-Module MSFT_ScriptResource
Get-TargetResource -GetScript { Add-Type -TypeDefinition $code; [MathHelper]::SquareRoot(4) }
```

可以看到，我们在ConstrainedLanguage模式下运行，并且添加的4的平方根部分的代码失败了，因为这种调用方法被阻止了。然后将我们的恶意代码添加到`$code`变量中。所有这些代码都类似于“4的平方根”的代码。完成这些后，“MSFT_ScriptResource”模块将会被导入，并通过`-GetScript`参数将恶意代码传递给`Get-TargetResource`函数。之后，将执行`Add-Type`调用并执行恶意代码，从而绕过Device Guard上的CLM。

需要注意的是，启用ScriptBlock日志记录仍将捕获绕过CLM的尝试。这个漏洞是通过[CVE-2018-8212](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8212)修复的。如果您有兴趣，微软最近已将此类旁路添加到WDAC Application Security赏金计划中：[https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria](https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria)