`fd` 是一个很好的替代品（它的作者和 `bat` 的作者是同一个人）。它非常快而且对于我经常要搜索的命令非常好记。
几个上手的例子：
```
$ fd cli # 所有包含 "cli" 的文件名
$ fd -e md # 所有以 .md 作为扩展名的文件
$ fd cli -x wc -w # 搜索 "cli" 并且在每个搜索结果上运行 `wc -w`
```
![fd output](/data/attachment/album/201810/29/204700varcm94gce19m91g.png "Sample fd output")
* [安装指引](https://github.com/sharkdp/fd/)
### ncdu > du
对我来说，知道当前磁盘空间被什么占用了非常重要。我用过 Mac 上的 [DaisyDisk](https://daisydiskapp.com/)，但是我觉得那个程序产生结果有点慢。
`du -sh` 命令是我经常会运行的命令（`-sh` 是指结果以“汇总”和“人类可读”的方式显示），我经常会想要深入挖掘那些占用了大量磁盘空间的目录，看看到底是什么在占用空间。
`ncdu` 是一个非常棒的替代品。它提供了一个交互式的界面并且允许快速的扫描那些占用了大量磁盘空间的目录和文件，它又快又准。（尽管不管在哪个工具的情况下，扫描我的 home 目录都要很长时间，它有 550G）
一旦当我找到一个目录我想要“处理”一下（如删除，移动或压缩文件），我会使用 `cmd` + 点击 [iTerm2](https://www.iterm2.com/) 顶部的目录名字的方法在 Finder 中打开它。
![ncdu output](/data/attachment/album/201810/29/204701qk3aaia5w0z9505o.png "Sample ncdu output")
还有另外[一个叫 nnn 的替代选择](https://github.com/jarun/nnn)，它提供了一个更漂亮的界面，它也提供文件尺寸和使用情况，实际上它更像一个全功能的文件管理器。
我的 `du` 是如下的别名：
```
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"
```
选项说明：
* `--color dark` 使用颜色方案
* `-rr` 只读模式（防止误删和运行新的 shell 程序）
* `--exclude` 忽略不想操作的目录
* [安装指引](https://dev.yorhel.nl/ncdu)
### tldr > man
几乎所有的命令行工具都有一个相伴的手册，它可以被 `man ` 来调出，但是在 `man` 的输出里找到东西可有点让人困惑，而且在一个包含了所有的技术细节的输出里找东西也挺可怕的。
这就是 TL;DR 项目（LCTT 译注：英文里“文档太长，没空去读”的缩写）创建的初衷。这是一个由社区驱动的文档系统，而且可以用在命令行上。就我现在使用的经验，我还没碰到过一个命令没有它相应的文档，你[也可以做贡献](https://github.com/tldr-pages/tldr#contributing)。
![TLDR output for 'fd'](/data/attachment/album/201810/29/204703q98ze88c128p93ip.png "Sample tldr output for fd")
一个小技巧，我将 `tldr` 的别名链接到 `help`（这样输入会快一点……）
```
alias help='tldr'
```
* [安装指引](http://tldr-pages.github.io/)
### ack || ag > grep
`grep` 毫无疑问是一个强力的命令行工具，但是这些年来它已经被一些工具超越了，其中两个叫 `ack` 和 `ag`。
我个人对 `ack` 和 `ag` 都尝试过，而且没有非常明显的个人偏好，（也就是说它们都很棒，并且很相似）。我倾向于默认只使用 `ack`，因为这三个字符就在指尖，很好打。并且 `ack` 有大量的 `ack --bar` 参数可以使用！（你一定会体会到这一点。）
`ack` 和 `ag` 默认都使用正则表达式来搜索，这非常契合我的工作，我能使用类似于 `--js` 或 `--html` 这种标识指定文件类型搜索。（尽管 `ag` 比 `ack` 在文件类型过滤器里包括了更多的文件类型。）
两个工具都支持常见的 `grep` 选项，如 `-B` 和 `-A` 用于在搜索的上下文里指代“之前”和“之后”。
![ack in action](/data/attachment/album/201810/29/204704c433kka72aki0kk7.png "Sample ack output with grep args")
因为 `ack` 不支持 markdown（而我又恰好写了很多 markdown），我在我的 `~/.ackrc` 文件里加了以下定制语句：
```
--type-set=md=.md,.mkd,.markdown
--pager=less -FRX
```
* 安装指引：[ack](https://beyondgrep.com)，[ag](https://github.com/ggreer/the_silver_searcher)
* [关于 ack & ag 的更多信息](http://conqueringthecommandline.com/book/ack_ag)
### jq > grep 及其它
我是 [jq](https://stedolan.github.io/jq) 的忠实粉丝之一。当然一开始我也在它的语法里苦苦挣扎，好在我对查询语言还算有些使用心得，现在我对 `jq` 可以说是每天都要用。（不过从前我要么使用 `grep` 或者使用一个叫 [json](http://trentm.com/json/) 的工具，相比而言后者的功能就非常基础了。）
我甚至开始撰写一个 `jq` 的教程系列（有 2500 字并且还在增加），我还发布了一个[网页工具](https://jqterm.com)和一个 Mac 上的应用（这个还没有发布。）
`jq` 允许我传入一个 JSON 并且能非常简单的将其转变为一个使用 JSON 格式的结果，这正是我想要的。下面这个例子允许我用一个命令更新我的所有 node 依赖。（为了阅读方便，我将其分成为多行。）
```
$ npm i $(echo $(\
    npm outdated --json | \
    jq -r 'to_entries | .[] | "\(.key)@\(.value.latest)"' \
))
```
上面的命令将使用 npm 的 JSON 输出格式来列出所有过期的 node 依赖，然后将下面的源 JSON 转换为：
```
{
    "node-jq": {
        "current": "0.7.0",
        "wanted": "0.7.0",
        "latest": "1.2.0",
        "location": "node_modules/node-jq"
    },
        "uuid": {
        "current": "3.1.0",
        "wanted": "3.2.1",
        "latest": "3.2.1",
        "location": "node_modules/uuid"
    }
}
```
转换结果为：
```
node-jq@1.2.0
uuid@3.2.1
```
上面的结果会被作为 `npm install` 的输入，你瞧，我的升级就这样全部搞定了。（当然，这里有点小题大做了。）
### 很荣幸提及一些其它的工具
我也在开始尝试一些别的工具，但我还没有完全掌握它们。（除了 `ponysay`，当我打开一个新的终端会话时，它就会出现。）
* [ponysay](https://github.com/erkin/ponysay) > `cowsay`
* [csvkit](https://csvkit.readthedocs.io/en/1.0.3/) > `awk 及其它`
* [noti](https://github.com/variadico/noti) > `display notification`
* [entr](http://www.entrproject.org/) > `watch`
### 你有什么好点子吗？
上面是我的命令行清单。你的呢？你有没有试着去增强一些你每天都会用到的命令呢？请告诉我，我非常乐意知道。
---
via: 
作者：[Remy Sharp](https://remysharp.com) 选题：[lujun9972](https://github.com/lujun9972) 译者：[DavidChenLiang](https://github.com/DavidChenLiang) 校对：[pityonline](https://github.com/pityonline), [wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出