    ::: itemizedlist
    -   使用 XFS 文件系统的挂载点替换
        [*[file-system]{.replaceable}*]{.emphasis}。
    -   使用 `-D`{.literal} 选项，将
        [*[new-size]{.replaceable}*]{.emphasis}
        替换为在文件系统块数中指定的文件系统所需的新大小。
        要找出给定 XFS 文件系统的块大小（kB），请使用
        `xfs_info`{.literal} 工具：
        ``` screen
        # xfs_info block-device
        ...
        data     =              bsize=4096
        ...
        ```
    -   如果没有 `-D`{.literal} 选项，`xfs_growfs`{.literal}
        将文件系统增大到底层设备所支持的最大大小。
    :::
:::
::: itemizedlist
**其他资源**
-   `xfs_growfs(8)`{.literal} 手册页。
:::
:::
:::
[]{#configuring-xfs-error-behavior_managing-file-systems.html}
::: chapter
::: titlepage
# []{#configuring-xfs-error-behavior_managing-file-systems.html#configuring-xfs-error-behavior_managing-file-systems}第 26 章 配置 XFS 错误行为 {.title}
:::
您可以配置 XFS 文件系统在遇到不同的 I/O 错误时的行为方式。
::: section
::: titlepage
# []{#configuring-xfs-error-behavior_managing-file-systems.html#configurable-error-handling-in-xfs_configuring-xfs-error-behavior}XFS 中的可配置错误处理 {.title}
:::
当 I/O 操作期间发生错误时，XFS 文件系统以以下其中一种方式响应：
::: itemizedlist
-   XFS 重复重试 I/O 操作，直到操作成功或 XFS 达到设定的限制。
    限制是基于重试的最大次数或重试的最长时间。
-   XFS 认为错误是永久性的，并停止文件系统上的操作。
:::
您可以配置 XFS 如何对以下错误情况做出响应：
::: variablelist
[`EIO`{.literal}]{.term}
:   读取或写入时出错
[`ENOSPC`{.literal}]{.term}
:   该设备中没有剩余空间
[`ENODEV`{.literal}]{.term}
:   无法找到设备
:::
您可以设置重试的最大次数，以及 XFS
认为其是永久错误前的最长时间（以秒为单位）。XFS
在达到任合一个限制时停止重试操作。
您还可以配置 XFS，以便在卸载文件系统时，XFS
会立即取消重试，而不考虑任何其他配置。但此配置可让卸载操作成功，尽管存在持续的错误。
::: title
**默认行为**
:::
每个 XFS 错误情况的默认行为取决于错误上下文。`ENODEV`{.literal} 等 XFS
错误都被视为致命且不可恢复的，无论重试次数如何。其默认重试限制为 0。
:::
::: section
::: titlepage
# []{#configuring-xfs-error-behavior_managing-file-systems.html#configuration-files-for-specific-and-undefined-xfs-error-conditions_configuring-xfs-error-behavior}特定和未定义的 XFS 错误条件的配置文件 {.title}
:::
以下目录保存用来控制不同错误条件的 XFS 错误行为的配置文件：
::: variablelist
[`/sys/fs/xfs/device/error/metadata/EIO/`{.literal}]{.term}
:   对于 `EIO`{.literal} 错误情况
[`/sys/fs/xfs/device/error/metadata/ENODEV/`{.literal}]{.term}
:   对于 `ENODEV`{.literal} 错误情况
[`/sys/fs/xfs/device/error/metadata/ENOSPC/`{.literal}]{.term}
:   对于 `ENOSPC`{.literal} 错误情况
[`/sys/fs/xfs/device/error/default/`{.literal}]{.term}
:   所有其他未定义错误条件的通用配置
:::
每个目录包括以下配置文件来配置重试限制：
::: variablelist
[`max_retries`{.literal}]{.term}
:   控制 XFS 重试操作的次数上限。
[`retry_timeout_seconds`{.literal}]{.term}
:   指定 XFS 停止重试操作后的时间限值（以秒为单位）。
:::
:::
::: section
::: titlepage
# []{#configuring-xfs-error-behavior_managing-file-systems.html#setting-specific-and-undefined-xfs-error-conditions_configuring-xfs-error-behavior}为特定条件设置 XFS 行为 {.title}
:::
这个步骤配置了 XFS 如何响应特定的错误条件。
::: itemizedlist
**流程**
-   设置重试的最大重试次数、重试时间限制或两者：
    ::: itemizedlist
    -   要设置重试的最大次数，请将所需的次数写入 `max_retries`{.literal}
        文件：
        ``` screen
        # echo value > /sys/fs/xfs/device/error/metadata/condition/max_retries
        ```
    -   要设置时间限制，将所需的秒数写入
        `retry_timeout_seconds`{.literal} 文件：
        ``` screen
        # echo value > /sys/fs/xfs/device/error/metadata/condition/retry_timeout_second
        ```
    :::
    [*value*]{.emphasis} 是介于 -1 和 C
    带符号整数类型的最大可能值之间的数字。64 位 Linux 中是 2147483647。
    在这两个限制中，值 `-1`{.literal} 用于持续重试，`0`{.literal}
    用于立即停止。
    [*device*]{.emphasis} 是设备的名称，可以在 `/dev/`{.literal}
    目录中找到；例如，`sda`{.literal}.
:::
:::
::: section
::: titlepage
# []{#configuring-xfs-error-behavior_managing-file-systems.html#setting-undefined-xfs-error-conditions_configuring-xfs-error-behavior}为未定义条件设置 XFS 行为 {.title}
:::
此流程配置 XFS 如何对共享一个通用配置的所有未定义的错误情况做出响应。
::: itemizedlist
**流程**
-   设置重试的最大重试次数、重试时间限制或两者：
    ::: itemizedlist
    -   要设置重试的最大次数，请将所需的次数写入 `max_retries`{.literal}
        文件：
        ``` screen
        # echo value > /sys/fs/xfs/device/error/metadata/default/max_retries
        ```
    -   要设置时间限制，将所需的秒数写入
        `retry_timeout_seconds`{.literal} 文件：
        ``` screen
        # echo value > /sys/fs/xfs/device/error/metadata/default/retry_timeout_seconds
        ```
    :::
    [*value*]{.emphasis} 是介于 -1 和 C
    带符号整数类型的最大可能值之间的数字。64 位 Linux 中是 2147483647。
    在这两个限制中，值 `-1`{.literal} 用于持续重试，`0`{.literal}
    用于立即停止。
    [*device*]{.emphasis} 是设备的名称，可以在 `/dev/`{.literal}
    目录中找到；例如，`sda`{.literal}.
:::
:::
::: section
::: titlepage
# []{#configuring-xfs-error-behavior_managing-file-systems.html#setting-the-unmount-behavior_configuring-xfs-error-behavior}设置 XFS 卸载行为 {.title}
:::
这个流程配置 XFS 在卸载文件系统时如何对错误情况做出响应。
如果您在文件系统中设置 `fail_at_unmount`{.literal}
选项，它会在卸载过程中覆盖所有其他错误配置，并立即卸载文件系统，而不重试
I/O 操作。这允许卸载操作在出现持久错误时也可以成功。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
在卸载过程启动后，您不能更改 `fail_at_unmount`{.literal}
值，因为卸载过程会从相应文件系统的 `sysfs`{.literal}
接口删除配置文件。您必须在文件系统开始卸载前配置卸载行为。
:::
::: itemizedlist
**流程**
-   启用或禁用 `fail_at_unmount`{.literal} 选项：
    ::: itemizedlist
    -   要在文件系统卸载时取消重试所有操作，请启用这个选项：
        ``` screen
        # echo 1 > /sys/fs/xfs/device/error/fail_at_unmount
        ```
    -   要在文件系统卸载时遵守 `max_retries`{.literal} 和
        `retry_timeout_seconds`{.literal} 重试限制，请禁用这个选项：
        ``` screen
        # echo 0 > /sys/fs/xfs/device/error/fail_at_unmount
        ```
    :::
    [*device*]{.emphasis} 是设备的名称，可以在 `/dev/`{.literal}
    目录中找到；例如，`sda`{.literal}.
:::
:::
:::
[]{#checking-and-repairing-a-file-system__managing-file-systems.html}
::: chapter
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#checking-and-repairing-a-file-system__managing-file-systems}第 27 章 检查和修复文件系统 {.title}
:::
RHEL 提供可以检查和修复文件系统的文件系统管理工具。这些工具通常被称为
`fsck`{.literal} 工具，其中 `fsck`{.literal} 是
[*文件系统检查*]{.emphasis}
的缩写版本。在大多数情况下，这些工具会根据需要在系统引导期间自动运行，但也可以根据需要手动调用。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
文件系统检查程序只保证跨文件系统的元数据的一致性。它们不知道文件系统中所包含的实际数据，它们不是数据恢复工具。
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#file-system-checking-and-repair_checking-and-repairing-a-file-system}需要文件系统检查的场景 {.title}
:::
如果出现以下情况，可以使用相关的 `fsck`{.literal} 工具来检查您的系统：
::: itemizedlist
-   系统无法引导
-   特定磁盘上的文件损坏
-   由于不一致，文件系统关闭或变为只读
-   文件系统上的文件无法访问
:::
发生文件系统不一致的原因可能有多种，包括但不限于硬件错误、存储管理错误和软件
bug 。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
文件系统检查工具不能修复硬件问题。如果修复操作成功，文件系统必须是完全可读写的。如果文件系统因为硬件错误而损坏，则必须首先将该文件系统移至好的磁盘，例如，使用
`dd(8)`{.literal} 工具。
:::
对于日志文件系统，启动时通常需要的所有操作是重播日志（如果需要），此操作通常是一个短操作。
但是，如果发生文件系统不一致或损坏的情况，即使是对于日志记录文件系统，也必须使用文件系统检查程序来修复文件系统。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
通过将 `/etc/fstab`{.literal} 中的第 6 字段设为
`0`{.literal}，可以在引导时禁用文件系统检查。但是，红帽不建议这样做，除非您在启动时遇到
`fsck`{.literal} 问题，例如对于非常大的或远程文件系统。
:::
::: itemizedlist
**其他资源**
-   `fstab(5)`{.literal} 手册页。
-   `fsck(8)`{.literal} 手册页。
-   `dd(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#potential-side-effects-of-running-fsck_checking-and-repairing-a-file-system}运行 fsck 的潜在副作用 {.title}
:::
通常，运行文件系统检查和修复工具至少可以自动修复发现的一些不一致问题。在某些情况下可能会出现以下问题：
::: itemizedlist
-   如果无法修复，可以丢弃严重损坏的 inode 或目录。
-   可能会对文件系统进行大量更改。
:::
要确保不会永久地进行意外或不必要的更改，请确保遵循流程中概述的任何预防步骤。
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#error-handling-mechanisms-in-xfs_checking-and-repairing-a-file-system}XFS 中的错误处理机制 {.title}
:::
这部分论述了 XFS 如何处理文件系统中各种错误。
### []{#checking-and-repairing-a-file-system__managing-file-systems.html#_unclean_unmounts}未完全卸载
日志维护文件系统上发生的元数据变化的事务记录。
在系统崩溃、电源故障或其他未完全卸载的情况下，XFS 使用 journal （也称为
log ）来恢复文件系统。挂载 XFS 文件系统时，内核执行日志恢复。
### []{#checking-and-repairing-a-file-system__managing-file-systems.html#_corruption}损坏
在这种情况下，[*损坏*]{.emphasis}
意味着文件系统中出现以下情况引起的错误，例如：
::: itemizedlist
-   硬件故障