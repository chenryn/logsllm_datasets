# 二、容器和 DevOps
我们已经熟悉了许多帮助我们在应用交付的不同阶段自动化任务和管理配置的 DevOps 工具，但是随着应用变得更加微观和多样化，挑战仍然存在。在本章中，我们将在我们的工具带上添加另一把瑞士军刀，即 Container。在此过程中，我们将寻求获得以下技能:
*   容器概念和基础
*   运行 Docker 应用
*   使用`Dockerfile`构建 Docker 应用
*   用 Docker 编写编排多个容器
# 理解容器
容器的关键特征是隔离。在这一节中，我们将详细说明容器是如何实现它的，以及为什么它在软件开发生命周期中很重要，以帮助建立对这个强大工具的正确理解。
# 资源隔离
当应用启动时，它会消耗 CPU 时间，占用内存空间，链接到其依赖的库，并可能写入磁盘、传输数据包和访问其他设备。它使用的所有东西都是一种资源，由同一台主机上的所有程序共享。容器的思想是将资源和程序隔离到单独的盒子中。
您可能听说过准虚拟化、**虚拟机** ( **虚拟机**)、BSD 监狱和 Solaris 容器等术语，它们也可以隔离主机的资源。然而，由于它们的设计不同，它们从根本上是不同的，但提供了类似的隔离概念。例如，虚拟机的实施是为了使用虚拟机管理程序虚拟化硬件层。如果要在虚拟机上运行应用，必须先安装完整的操作系统。换句话说，资源在同一虚拟机管理程序上的客户操作系统之间是隔离的。相比之下，容器是建立在 Linux 原语之上的，这意味着它只能在具有这些功能的操作系统中运行。BSD 监狱和 Solaris 容器在其他操作系统上也以类似的方式工作。下图说明了容器和虚拟机的隔离关系。容器在操作系统层隔离应用，而基于虚拟机的隔离由操作系统实现。
![](img/00026.jpeg)
# Linux 容器概念
容器包含几个构建块，其中最重要的两个是**名称空间**和**组** ( **控制组**)。这两个都是 Linux 内核特性。名称空间提供了某些系统资源的逻辑分区，如挂载点(`mnt`)、进程标识(`PID`)、网络(net)等。为了解释隔离的概念，让我们看一些关于`pid`名字空间的简单例子。以下示例均来自 Ubuntu 16.04.2 和 util-linux 2.27.1。
当我们键入`ps axf`时，我们会看到一长串正在运行的进程:
```
$ ps axf
 PID TTY      STAT   TIME COMMAND
    2 ?        S      0:00 [kthreadd]
    3 ?        S      0:42  \_ [ksoftirqd/0]
    5 ?        S /dev/null`强调 CPU，用`top`监控它:
```
$ yes > /dev/null & top
$ PID USER  PR  NI    VIRT   RES   SHR S  %CPU %MEM    
TIME+ COMMAND
 3 root  20   0    6012   656   584 R 100.0  0.0  
  0:15.15 yes
 1 root  20   0    4508   708   632 S   0.0  0.0                   
  0:00.00 sh
 4 root  20   0   40388  3664  3204 R   0.0  0.1  
  0:00.00 top
```
我们的 CPU 负载达到了预期的 100%。现在让我们用中央处理器组来限制它。Cgroups 被组织为`/sys/fs/cgroup/`下的目录(首先切换到主机会话):
```
$ ls /sys/fs/cgroup
blkio        cpuset   memory            perf_event
cpu          devices  net_cls           pids
cpuacct      freezer  net_cls,net_prio  systemd
cpu,cpuacct  hugetlb  net_prio 
```
每个目录代表它们控制的资源。创建一个 cgroup 并使用它控制流程非常容易:只需在任意名称的资源类型下创建一个目录，并将您想要控制的流程 id 追加到`tasks`中。这里我们想限制`yes`进程的 CPU 使用，所以在`cpu`下创建一个新目录，找出`yes`进程的 PID:
```
$ ps x | grep yes
11809 pts/2    R     12:37 yes
$ mkdir /sys/fs/cgroup/cpu/box && \
 echo 11809 > /sys/fs/cgroup/cpu/box/tasks
```
我们刚刚将`yes`添加到新创建的 CPU 组`box`中，但是策略仍然未设置，进程仍然不受限制地运行。通过将所需的数字写入相应的文件来设置限制，并再次检查 CPU 使用情况:
```
$ echo 50000 > /sys/fs/cgroup/cpu/box/cpu.cfs_quota_us
$ PID USER  PR  NI    VIRT   RES   SHR S  %CPU %MEM    
 TIME+ COMMAND
    3 root  20   0    6012   656   584 R  50.2  0.0     
    0:32.05 yes
    1 root  20   0    4508  1700  1608 S   0.0  0.0  
    0:00.00 sh
    4 root  20   0   40388  3664  3204 R   0.0  0.1  
    0:00.00 top
```
中央处理器的使用大幅减少，这意味着我们的中央处理器节流工作。
这两个例子阐明了 Linux 容器如何隔离系统资源。通过在应用中设置更多的限制，我们肯定可以构建一个完全隔离的盒子，包括文件系统和网络，而无需在其中封装操作系统。
# 容器运输
为了部署应用，经常使用配置管理工具。诚然，在应用栈变得复杂和多样化之前，它的模块化和基于代码的配置设计可以很好地工作。维护大型配置清单库很复杂。当我们想要改变一个包时，我们将不得不处理系统和应用包之间纠缠和脆弱的依赖关系。一些应用在升级一个不相关的包后无意中崩溃并不少见。此外，升级配置管理工具本身也是一项具有挑战性的任务。
为了克服这个难题，引入了带有预烘焙虚拟机映像的不可变部署。也就是说，每当我们对系统或应用包有任何更新时，我们将根据更改构建完整的虚拟机映像，并相应地部署它。它解决了一定程度的包问题，因为我们现在能够为不能共享相同环境的应用定制运行时。然而，使用虚拟机映像进行不可变部署的成本很高。从另一个角度来看，为了隔离应用而不是资源不足而配置虚拟机会导致资源利用率低下，更不用说引导、分发和运行膨胀的虚拟机映像的开销了。如果我们想通过将虚拟机共享给多个应用来消除这种低效，我们很快就会意识到我们将会遇到进一步的麻烦，即资源管理。
容器，在这里，是一个拼图块，贴合部署需求。容器的清单可以在 VCS 内管理，并构建成 blob 映像；毫无疑问，映像也可以不变地部署。这使开发人员能够从实际资源中抽象出来，基础设施工程师可以从他们的依赖地狱中逃脱。此外，由于我们只需要打包应用本身及其相关库，因此它的映像大小会比虚拟机小得多。因此，分发容器映像比虚拟机更经济。此外，我们已经知道，在容器中运行一个进程基本上等同于在它的 Linux 主机上运行它，因此几乎不会产生开销。总而言之，容器是轻量级的、独立的、不可变的。这也为区分应用和基础架构之间的责任提供了清晰的边界。
# 容器入门
有很多成熟的容器引擎，比如 Docker([https://www.docker.com](https://www.docker.com))和 rkt([https://coreos.com/rkt](https://coreos.com/rkt))已经实现了用于生产用途的特性，所以你不需要从头开始构建一个。此外，**容器开放倡议**([https://www.opencontainers.org](https://www.opencontainers.org))一个由容器行业领袖组成的组织，已经制定了一些容器规范。这些标准的任何实现，无论底层平台如何，都应该具有与 OCI 旨在提供的相似的属性，具有跨各种操作系统的无缝容器体验。在本书中，我们将使用 Docker(社区版)容器引擎来构建我们的容器化应用。
# 为 Ubuntu 安装 Docker
Docker 需要 64 位版本的 Yakkety 16.10、Xenial 16.04LTS 和 Trusty 14.04LTS，可以用`apt-get install docker.io`安装 Docker，但通常比 Docker 官方库更新慢。以下是 Docker([https://docs . Docker . com/engine/installation/Linux/Docker-ce/Ubuntu/# install-Docker-ce](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-docker-ce))的安装步骤:
1.  确保你有允许`apt`存储库的包；如果没有，获取它们:
```
$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common 
```
2.  添加 Docker 的`gpg`键并验证其指纹是否匹配`9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88`:
```
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo apt-key fingerprint 0EBFCD88 
```
3.  设置`amd64`拱门的仓库:
```
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" 
```
4.  更新包索引并安装 Docker CE:
```
 $ sudo apt-get update 
 $ sudo apt-get install docker-ce
```
# 为 CentOS 安装 Docker
运行 Docker 需要 CentOS 7 64 位。同样，您可以通过`sudo yum install docker`从 CentOS 的存储库中获取 Docker 包。同样，Docker 官方指南([https://docs . Docker . com/engine/installation/Linux/Docker-ce/centos/# install-use-the-repository](https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-using-the-repository))的安装步骤如下:
1.  安装实用程序，使`yum`能够使用额外的存储库:
```
    $ sudo yum install -y yum-utils  
```
2.  设置 Docker 的存储库:
```
$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 
```
3.  更新存储库并验证指纹是否匹配:
`060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35`:
```
    $ sudo yum makecache fast   
```