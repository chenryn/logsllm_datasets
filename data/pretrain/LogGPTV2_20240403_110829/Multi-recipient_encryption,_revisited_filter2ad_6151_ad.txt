Return t
(e) if HL[Z, W, j] (cid:54)= ε:
Return HL[Z, W, j]
t ←R K
(f)
(g) HL[Z, W, j] ← t
(h) Return t
Figure 5: The code for adversary B, trying to break the SDH assumption
Proof. Throughout the proof we will denote by DH the
function G × G → G that maps pairs (gx, gy) to gxy for all
x, y ∈ Zp. The proof is in the random oracle model, i.e.,
hash function H is implemented as a random function.
Given ﬁxed k, n and an MR-KEM-IND adversary A for
these parameters, we build an SDH adversary B that re-
ceives a challenge (G, p, g, U = gu, V = gv) and has access
to oracles Ou(·,·) and Ov(·,·), as deﬁned in Deﬁnition 2,
and aims at computing DH (U, V ), by the help of A. The
description of B is given in Figure 5.
We argue that the environment that adversary B pro-
vides to A is (almost) indistinguishable from experiments
ExptMR-KEM-IND,b, b ∈ {0, 1}.
Indeed, it is readily veriﬁed
that the vector (cid:126)pk of public keys that A1 receives follows
the right (uniform) distribution (cf. lines (e) and (f) of B).
In addition, the vector (cid:126)K∗ of keys given in line (j) to A2 as a
result of the challenge encapsulation is completely random,
which is, due to the random oracle model, in agreement
with both experiments ExptMR-KEM-IND,b, assuming speciﬁc
hash queries are not submitted.
To ensure consistency, decapsulation and hash queries are
taken care of by accurately designed oracles: precisely, line (c)
of the H oracle ensures consistency between the hash func-
tion and the components of (cid:126)K∗; observe that a correspond-
ing condition in the D oracle is not required as challenge
ciphertexts may not be queried for decapsulation. Lines (d)
of D and (d) of H ensure consistency between the oracles for
queries not related to the challenge. Line (b) in the D oracle
and line (b) in the H oracle mark A1-queries related to the
(yet unknown) challenge ciphertext as bad; we show that
this happens only with negligible probability. Lines (e)–(h)
of D and (e)–(h) of H are standard for implementing con-
sistent random oracles. Note that line (c) of D is just a
rewriting of condition (b) in the D2 oracle of Figure 4.
Hash function queries related to challenge encapsulations
for honest keys are handled in line (a) of H. These queries
are of the form (DH(U, pki), pki, j). As mentioned above, if
no such hash query is submitted by A, its views in exper-
iments ExptMR-KEM-IND,0 and ExptMR-KEM-IND,1 are identical.
On the other hand, if A does make such a query, an event
we denote E, this allows the extraction of the SDH solution
guv by B, as implemented in line (a).
We continue with the analysis of B’s advantage, starting
with bounding the probabilities that ﬂags Bad1 and Bad2 are
set, and that event E occurs. Observe that the two ﬂags can
be set only in the ﬁrst phase of B’s simulation, and that the
corresponding conditions depend on A1 guessing the right
value of U before obtaining any information about it. Since
U is uniformly distributed, the probability that in any query
A1 ﬁnds the right value is 1/|G|. That is, the probabilities
of these ﬂags being set are bounded by
Pr[Bad1] ≤ qd1
p
and Pr[Bad2] ≤ qh1
p
.
HEK,A,k,n
As highlighted above, if the event E occurs, B solves the
SDH problem, i.e., Pr[E] = AdvSDHG,B .
Observe that B provides a perfect simulation of the ex-
, b ∈ {0, 1}, if the events Bad1,
periments ExptMR-KEM-IND,b
Bad2, and E do not occur. Denote by Sb the event that A2
outputs 1 at the end of ExptMR-KEM-IND,b
. The above allows
us to conclude
Pr[S0 | ¬E,¬Bad1,¬Bad2] = Pr[S1 | ¬E,¬Bad1,¬Bad2] ,
which implies
HEK,A,k,n
AdvMR-KEM-IND
HEK,A,k,n (λ) = |Pr[S0] − Pr[S1]|
≤ Pr[E] + Pr[Bad1] + Pr[Bad2] .
Combining this with the above established bounds on Pr[E],
Pr[Bad1], and Pr[Bad2], we have
AdvMR-KEM-IND
HEK,A,k,n (λ) ≤ AdvSDHG,B (λ) +
qd1
p
+
qh1
p
.
Remark 2. It is instructive to trace how the various com-
ponents of Construction 2 contribute to its security: Firstly,
236we exploit the power of the static Diﬃe-Hellman assumption,
as opposed to standard CDH, for getting rid of the KOSK re-
striction required in [5]; more precisely, in the proof of The-
orem 2 it is exactly the oracle from Deﬁnition 2 that allows
a consistent simulation of the challenge encryption and the
random oracle—even in the presence of maliciously chosen
public keys. Secondly, by incorporating the counter i into the
input of hash function H in the Encap routine we prevent the
second attack described in Section 3.2.2 from working: intu-
itively, if the same public key appears more than once in (cid:126)pk,
the diﬀerent values of i will ensure that all occurrences are
treated independently of each other.
Conclusion
We revisit the security notion for multi-recipient encryption
introduced in [5] and point out a number of subtle yet se-
rious technical ﬂaws. We propose a strengthened security
model that ﬁxes the identiﬁed issues and also avoids the un-
realistic knowledge-of-secret-key assumption. We proceed
by lifting the hybrid KEM/DEM construction methodology
for achieving public key encryption to the multi-recipient
setting and formally prove the soundness of this approach.
Finally, we propose a new multi-recipient KEM (and, hence,
a multi-recipient PKE scheme) that we prove secure under
the static Diﬃe-Hellman assumption, in the random ora-
cle model. We leave the construction of a standard model
multi-recipient PKE scheme that achieves the level of secu-
rity implied by our deﬁnitions for future work.
6. REFERENCES
[1] M. Abdalla, M. Bellare, and P. Rogaway. The oracle
Diﬃe-Hellman assumptions and an analysis of DHIES.
In D. Naccache, editor, CT-RSA 2001, volume 2020 of
LNCS, pages 143–158, San Francisco, CA, USA,
Apr. 8–12, 2001. Springer, Berlin, Germany.
[2] J. Baek, R. Safavi-Naini, and W. Susilo. Eﬃcient
multi-receiver identity-based encryption and its
application to broadcast encryption. In S. Vaudenay,
editor, PKC 2005, volume 3386 of LNCS, pages
380–397, Les Diablerets, Switzerland, Jan. 23–26,
2005. Springer, Berlin, Germany.
[3] M. Barbosa and P. Farshim. Eﬃcient identity-based
key encapsulation to multiple parties. In N. P. Smart,
editor, 10th IMA International Conference on
Cryptography and Coding, volume 3796 of LNCS,
pages 428–441, Cirencester, UK, Dec. 19–21, 2005.
Springer, Berlin, Germany.
[4] M. Bellare, A. Boldyreva, K. Kurosawa, and
J. Staddon. Multirecipient encryption schemes: How
to save on bandwidth and computation without
sacriﬁcing security. IEEE Transactions on Information
Theory, 53(11):3927–3943, 2007.
[5] M. Bellare, A. Boldyreva, and J. Staddon.
Randomness re-use in multi-recipient encryption
schemes. In Y. Desmedt, editor, PKC 2003, volume
2567 of LNCS, pages 85–99, Miami, USA, Jan. 6–8,
2003. Springer, Berlin, Germany.
[6] D. Boneh, C. Gentry, and B. Waters. Collusion
CA, USA, Aug. 14–18, 2005. Springer, Berlin,
Germany.
[7] S. Chatterjee and P. Sarkar. Multi-receiver
identity-based key encapsulation with shortened
ciphertext. In R. Barua and T. Lange, editors,
INDOCRYPT 2006, volume 4329 of LNCS, pages
394–408, Kolkata, India, Dec. 11–13, 2006. Springer,
Berlin, Germany.
[8] R. Cramer and V. Shoup. A practical public key
cryptosystem provably secure against adaptive chosen
ciphertext attack. In H. Krawczyk, editor,
CRYPTO’98, volume 1462 of LNCS, pages 13–25,
Santa Barbara, CA, USA, Aug. 23–27, 1998. Springer,
Berlin, Germany.
[9] R. Cramer and V. Shoup. Design and analysis of
practical public-key encryption schemes secure against
adaptive chosen ciphertext attack. SIAM J.
Computing, 33(1):167–226, 2003.
[10] C. Delerabl´ee. Identity-based broadcast encryption
with constant size ciphertexts and private keys. In
K. Kurosawa, editor, ASIACRYPT 2007, volume 4833
of LNCS, pages 200–215, Kuching, Malaysia, Dec. 2–6,
2007. Springer, Berlin, Germany.
[11] T. ElGamal. A public key cryptosystem and a
signature scheme based on discrete logarithms. In
G. R. Blakley and D. Chaum, editors, CRYPTO’84,
volume 196 of LNCS, pages 10–18, Santa Barbara, CA,
USA, Aug. 19–23, 1984. Springer, Berlin, Germany.
[12] A. Fiat and M. Naor. Broadcast encryption. In D. R.
Stinson, editor, CRYPTO’93, volume 773 of LNCS,
pages 480–491, Santa Barbara, CA, USA, Aug. 22–26,
1993. Springer, Berlin, Germany.
[13] K. Kurosawa. Multi-recipient public-key encryption
with shortened ciphertext. In D. Naccache and
P. Paillier, editors, PKC 2002, volume 2274 of LNCS,
pages 48–63, Paris, France, Feb. 12–14, 2002. Springer,
Berlin, Germany.
[14] D. Naor, M. Naor, and J. Lotspiech. Revocation and
tracing schemes for stateless receivers. In J. Kilian,
editor, CRYPTO 2001, volume 2139 of LNCS, pages
41–62, Santa Barbara, CA, USA, Aug. 19–23, 2001.
Springer, Berlin, Germany.
[15] N. P. Smart. Eﬃcient key encapsulation to multiple
parties. In C. Blundo and S. Cimato, editors, SCN 04,
volume 3352 of LNCS, pages 208–219, Amalﬁ, Italy,
Sept. 8–10, 2004. Springer, Berlin, Germany.
APPENDIX
Proof of Theorem 1
Proof. Fix k, n ∈ N and an eﬃcient adversary A against
E. The proof proceeds by a series of game hops. Let
G0 = ExptMR-PKE-IND,0
E,A,k,n
(1λ) G1 = ExptMR-PKE-IND,1
E,A,k,n
(1λ)
resistant broadcast encryption with short ciphertexts
and private keys. In V. Shoup, editor, CRYPTO 2005,
volume 3621 of LNCS, pages 258–275, Santa Barbara,
(see Figure 3).
Next, deﬁne two other games, H 0 and H 1. For b ∈ {0, 1},
game H b is equal to game Gb with the following exceptions:
237• in games Gb, the challenge ciphertext is created by
∗(cid:17)
(cid:16) (cid:126)pk
;
( (cid:126)c1, (cid:126)K 1) ←R M.Encap
(cid:126)c2 ←R D.DEM( (cid:126)K 1, (cid:126)mb);
(cid:126)c ← ((c1
j ))j∈[n].
j , c2
while in games H b the challenge ciphertext is created
by
∗
);
( (cid:126)c1, (cid:126)K 1) ←R M.Encap( (cid:126)pk
(cid:126)c2 ←R D.DEM( (cid:126)K 0, (cid:126)mb);
(cid:126)c ← ((c1
j ))j∈[n],
j , c2
(cid:40)
j ←R K, pk∗
K 0
j ← K 1
pk∗
K 0
j ,
j ∈ (cid:126)pk
j (cid:54)∈ (cid:126)pk
where the components of (cid:126)K 0 are deﬁned like this
for j ∈ [n].
• when handling decryption queries in games Gb, a DEM
key is computed from the ﬁrst component of the sub-
mitted ciphertext, and then used to decrypt the second
component according to the scheme’s speciﬁcations; in
games H b, the key vector (cid:126)K 0 will be used in decryp-
tion queries involving the challenge encapsulations (cid:126)c1.
That is, when the decryption oracle receives a query
(i, (ˆc1, ˆc2)) for which ∃j : pk∗
j , decryp-
tion of ˆc2 will be done using K 0
j . In all the other cases,
it proceeds normally, ﬁrst decapsulating ˆc1 to obtain a
DEM key, and then decrypting ˆc2 with it.
j = pki ∧ ˆc1 = c1
We can write
AdvMR-PKE-IND
E,A,k,n
(λ) =
(cid:12)(cid:12)(cid:12)Pr[G1 = 1] − Pr[G0 = 1]
(cid:12)(cid:12)(cid:12) ≤
(cid:12)(cid:12)(cid:12)Pr[G1 = 1] − Pr[H 1 = 1]
(cid:12)(cid:12)(cid:12) +
(cid:12)(cid:12)(cid:12)Pr[H 1 = 1] − Pr[H 0 = 1]
(cid:12)(cid:12)(cid:12) +
(cid:12)(cid:12)(cid:12)Pr[H 0 = 1] − Pr[G0 = 1]
(cid:12)(cid:12)(cid:12) .
Note that the diﬀerence between games G0 and H 0, and the
diﬀerence between games G1 and H 1, correspond to the dif-
ference between the KEM experiments ExptMR-KEM-IND,b
(1λ),
E,A,k,n
b ∈ {0, 1}. Hence, there exist KEM adversary B0 and B1
such that(cid:12)(cid:12)(cid:12)Pr[Gl = 1] − Pr[H l = 1]
(cid:12)(cid:12)(cid:12) ≤ AdvMR-KEM-IND
M,Bl,k,n
for l ∈ {0, 1}.
Furthermore, the only diﬀerence in games H 0 and H 1 is
in the challenge encryption: H 0 always encrypts (cid:126)m0 and
H 1 always encrypts (cid:126)m1. To analyze the distance between
these games, we proceed by a hybrid argument. Deﬁne a
game Ej for 0 ≤ j ≤ n such that E0 = H 1 and En = H 0:
if (cid:126)m is the vector that is encrypted, then mk = m0
k for all
1 ≤ k ≤ j and mk = m1
k for all j < k ≤ n. That is, in two
consecutive games, Ej−1 and Ej, the only diﬀerence is in
j of the challenge ciphertext: in Ej−1 it is
the component c2
the encryption of an element in (cid:126)m1 whereas in Ej it is the
encryption of an element in (cid:126)m0 of the same length.
It easily follows that there exist adversaries Cj for 1 ≤
j ≤ n, such that Cj interpolates between the games Ej−1
and Ej, and
(cid:12)(cid:12)(cid:12) .
(λ) =
(cid:12)(cid:12)(cid:12)Pr[Ej−1 = 1] − Pr[Ej = 1]
(cid:105) − Pr
(cid:105)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)Pr[Ej−1 = 1] − Pr[Ej = 1]
H 0 = 1
(cid:104)
(cid:12)(cid:12)(cid:12)
H 1 = 1
AdvIND-OT-CCA
D,Cj
(λ)
AdvIND-OT-CCA
D,Cj
Thus,
(cid:12)(cid:12)(cid:12)(cid:12)Pr
(cid:104)
n(cid:88)
n(cid:88)
j=1
=
=
j=1
Hence, there exist adversaries B and C such that1
(λ) +
AdvMR-PKE-IND
E,A,k,n
(λ) ≤ 2 · AdvMR-KEM-IND
n · AdvIND-OT-CCA
M,B,k,n
D,C
(λ) .
1B and C can be constructed by randomly picking and run-
ning an adversary from {Bb}b∈{0,1} and {Cj}j∈[n], respec-
tively, which will yield an advantage for B and C correspond-
ing to the average advantage of their underlying adversaries.
238