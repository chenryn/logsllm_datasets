a1[26] - a1[27] + a1[28] + a1[29] + a1[30] - a1[31] - a1[32] - a1[33] + 
a1[34] - a1[35] - a1[36] - a1[37] - a1[38] - a1[39] - a1[40] + a1[41])
v21 = a1[0] + a1[1] + a1[2] + a1[3] - a1[4] - a1[5] + a1[6] - a1[7] - 
a1[8] - a1[9] - a1[10] - a1[11] - a1[12] - a1[13] + a1[14] + a1[15] + 
a1[16] - a1[17] + a1[18] + a1[19] + a1[20]
solver.add(a2[19] == v21 + a1[21] - a1[22] + a1[23] + a1[24] - a1[25] + 
a1[26] + a1[27] - a1[28] + a1[29] + a1[30] + a1[31] + a1[32] + a1[33] - 
a1[34] + a1[35] - a1[36] - a1[37] - a1[38] + a1[39] + a1[40] - a1[41])
v22 = a1[0] + a1[1] - a1[2] - a1[3] - a1[4] + a1[5] - a1[6] + a1[7] - 
a1[8] - a1[9] + a1[10] + a1[11] - a1[12] - a1[13] + a1[14] - a1[15] - 
a1[16] + a1[17] - a1[18] - a1[19] + a1[20]
solver.add(a2[20] == v22 + a1[21] - a1[22] + a1[23] + a1[24] - a1[25] - 
a1[26] - a1[27] - a1[28] - a1[29] - a1[30] - a1[31] - a1[32] + a1[33] - 
a1[34] + a1[35] + a1[36] - a1[37] + a1[38] - a1[39] + a1[40] - a1[41])
v23 = a1[0] - a1[1] - a1[2] - a1[3] + a1[4] + a1[5] + a1[6] + a1[7] - 
a1[8] - a1[9] - a1[10] - a1[11] - a1[12] - a1[13] - a1[14] - a1[15] - 
a1[16] + a1[17] - a1[18] - a1[19] + a1[20]
solver.add(a2[21] == v23 - a1[21] + a1[22] + a1[23] + a1[24] - a1[25] - 
a1[26] + a1[27] - a1[28] - a1[29] - a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] - a1[35] - a1[36] + a1[37] - a1[38] - a1[39] - a1[40] + a1[41])
v24 = a1[0] + a1[1] + a1[2] + a1[3] + a1[4] + a1[5] + a1[6] + a1[7] - 
a1[8] + a1[9] - a1[10] + a1[11] - a1[12] + a1[13] + a1[14] + a1[15] - 
a1[16] + a1[17] + a1[18] - a1[19] - a1[20]
solver.add(a2[22] == v24 + a1[21] + a1[22] - a1[23] + a1[24] - a1[25] - 
a1[26] + a1[27] - a1[28] + a1[29] + a1[30] + a1[31] - a1[32] + a1[33] - 
a1[34] - a1[35] - a1[36] - a1[37] + a1[38] - a1[39] + a1[40] + a1[41])
v25 = a1[0] - a1[1] + a1[2] + a1[3] - a1[4] - a1[5] - a1[6] - a1[7] + 
a1[8] - a1[9] - a1[10] + a1[11] + a1[12] - a1[13] - a1[14] + a1[15] - 
a1[16] - a1[17] + a1[18] + a1[19] - a1[20]
solver.add(a2[23] == v25 - a1[21] + a1[22] - a1[23] + a1[24] + a1[25] - 
a1[26] + a1[27] - a1[28] + a1[29] + a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] - a1[35] - a1[36] - a1[37] + a1[38] - a1[39] - a1[40] - a1[41])
v26 = a1[0] + a1[1] - a1[2] + a1[3] + a1[4] - a1[5] + a1[6] + a1[7] - 
a1[8] + a1[9] + a1[10] - a1[11] - a1[12] - a1[13] - a1[14] + a1[15] + 
a1[16] + a1[17] - a1[18] + a1[19] + a1[20]
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
solver.add(a2[24] == v26 + a1[21] + a1[22] + a1[23] + a1[24] + a1[25] - 
a1[26] - a1[27] - a1[28] + a1[29] + a1[30] - a1[31] + a1[32] + a1[33] + 
a1[34] - a1[35] - a1[36] - a1[37] - a1[38] + a1[39] + a1[40] - a1[41])
v27 = a1[0] - a1[1] + a1[2] + a1[3] - a1[4] + a1[5] + a1[6] - a1[7] + 
a1[8] + a1[9] + a1[10] - a1[11] - a1[12] + a1[13] - a1[14] + a1[15] - 
a1[16] + a1[17] + a1[18] + a1[19] - a1[20]
solver.add(a2[25] == v27 - a1[21] + a1[22] + a1[23] - a1[24] - a1[25] + 
a1[26] - a1[27] + a1[28] - a1[29] + a1[30] - a1[31] - a1[32] + a1[33] - 
a1[34] - a1[35] - a1[36] - a1[37] + a1[38] - a1[39] + a1[40] + a1[41])
v28 = a1[0] + a1[1] + a1[2] + a1[3] + a1[4] - a1[5] - a1[6] + a1[7] - 
a1[8] - a1[9] - a1[10] - a1[11] + a1[12] - a1[13] + a1[14] - a1[15] + 
a1[16] - a1[17] + a1[18] - a1[19] - a1[20]
solver.add(a2[26] == v28 + a1[21] + a1[22] + a1[23] + a1[24] + a1[25] - 
a1[26] - a1[27] - a1[28] - a1[29] + a1[30] + a1[31] - a1[32] - a1[33] - 
a1[34] + a1[35] + a1[36] - a1[37] - a1[38] + a1[39] + a1[40] + a1[41])
v29 = a1[0] - a1[1] + a1[2] - a1[3] + a1[4] - a1[5] - a1[6] - a1[7] - 
a1[8] - a1[9] - a1[10] - a1[11] + a1[12] + a1[13] - a1[14] + a1[15] + 
a1[16] + a1[17] + a1[18] + a1[19] - a1[20]
solver.add(a2[27] == v29 - a1[21] - a1[22] - a1[23] + a1[24] + a1[25] + 
a1[26] - a1[27] + a1[28] + a1[29] + a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] + a1[35] - a1[36] - a1[37] - a1[38] - a1[39] - a1[40] - a1[41])
v30 = a1[0] - a1[1] + a1[2] + a1[3] + a1[4] - a1[5] + a1[6] + a1[7] - 
a1[8] - a1[9] + a1[10] + a1[11] - a1[12] + a1[13] - a1[14] + a1[15] - 
a1[16] + a1[17] + a1[18] + a1[19] - a1[20]
solver.add(a2[28] == v30 - a1[21] + a1[22] - a1[23] - a1[24] - a1[25] - 
a1[26] + a1[27] - a1[28] - a1[29] - a1[30] + a1[31] - a1[32] - a1[33] + 
a1[34] + a1[35] + a1[36] - a1[37] - a1[38] + a1[39] + a1[40] + a1[41])
v31 = a1[0] + a1[1] - a1[2] - a1[3] - a1[4] + a1[5] + a1[6] + a1[7] - 
a1[8] + a1[9] - a1[10] - a1[11] + a1[12] - a1[13] + a1[14] + a1[15] - 
a1[16] + a1[17] + a1[18] - a1[19] + a1[20]
solver.add(a2[29] == v31 + a1[21] + a1[22] + a1[23] - a1[24] + a1[25] + 
a1[26] - a1[27] + a1[28] + a1[29] + a1[30] + a1[31] + a1[32] - a1[33] - 
a1[34] + a1[35] + a1[36] - a1[37] + a1[38] + a1[39] - a1[40] + a1[41])
v32 = a1[0] + a1[1] + a1[2] + a1[3] - a1[4] - a1[5] - a1[6] - a1[7] + 
a1[8] + a1[9] - a1[10] - a1[11] - a1[12] + a1[13] - a1[14] - a1[15] + 
a1[16] - a1[17] - a1[18] - a1[19] + a1[20]
solver.add(a2[30] == v32 - a1[21] - a1[22] + a1[23] + a1[24] - a1[25] - 
a1[26] + a1[27] - a1[28] - a1[29] - a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] + a1[35] + a1[36] + a1[37] - a1[38] + a1[39] + a1[40] + a1[41])
v33 = a1[0] + a1[1] - a1[2] + a1[3] + a1[4] - a1[5] - a1[6] + a1[7] + 
a1[8] + a1[9] + a1[10] + a1[11] + a1[12] - a1[13] - a1[14] - a1[15] + 
a1[16] + a1[17] + a1[18] + a1[19] - a1[20]
solver.add(a2[31] == v33 + a1[21] - a1[22] + a1[23] - a1[24] - a1[25] + 
a1[26] + a1[27] - a1[28] + a1[29] - a1[30] - a1[31] - a1[32] + a1[33] - 
a1[34] + a1[35] - a1[36] + a1[37] - a1[38] + a1[39] - a1[40] - a1[41])
v34 = a1[0] - a1[1] + a1[2] + a1[3] - a1[4] + a1[5] + a1[6] + a1[7] + 
a1[8] - a1[9] + a1[10] + a1[11] - a1[12] + a1[13] + a1[14] - a1[15] + 
a1[16] - a1[17] + a1[18] + a1[19] + a1[20]
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
solver.add(a2[32] == v34 - a1[21] - a1[22] + a1[23] - a1[24] + a1[25] + 
a1[26] + a1[27] - a1[28] - a1[29] - a1[30] - a1[31] - a1[32] - a1[33] + 
a1[34] + a1[35] + a1[36] + a1[37] - a1[38] + a1[39] - a1[40] + a1[41])
v35 = a1[0] - a1[1] - a1[2] + a1[3] + a1[4] + a1[5] + a1[6] - a1[7] - 
a1[8] + a1[9] + a1[10] + a1[11] - a1[12] - a1[13] + a1[14] + a1[15] - 
a1[16] + a1[17] - a1[18] + a1[19] - a1[20]
solver.add(a2[33] == v35 + a1[21] + a1[22] + a1[23] - a1[24] - a1[25] + 
a1[26] + a1[27] - a1[28] + a1[29] - a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] - a1[35] + a1[36] - a1[37] + a1[38] - a1[39] - a1[40] - a1[41])
v36 = a1[0] + a1[1] - a1[2] + a1[3] - a1[4] - a1[5] - a1[6] + a1[7] + 
a1[8] + a1[9] + a1[10] + a1[11] - a1[12] - a1[13] - a1[14] + a1[15] - 
a1[16] + a1[17] - a1[18] + a1[19] - a1[20]
solver.add(a2[34] == v36 - a1[21] + a1[22] + a1[23] - a1[24] - a1[25] + 
a1[26] + a1[27] + a1[28] + a1[29] - a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] - a1[35] - a1[36] + a1[37] + a1[38] + a1[39] - a1[40] - a1[41])
v37 = a1[0] - a1[1] + a1[2] + a1[3] + a1[4] - a1[5] - a1[6] + a1[7] + 
a1[8] - a1[9] - a1[10] + a1[11] + a1[12] + a1[13] - a1[14] - a1[15] + 
a1[16] - a1[17] + a1[18] + a1[19] - a1[20]
solver.add(a2[35] == v37 - a1[21] - a1[22] + a1[23] + a1[24] - a1[25] - 
a1[26] + a1[27] + a1[28] - a1[29] - a1[30] + a1[31] + a1[32] - a1[33] + 
a1[34] + a1[35] + a1[36] + a1[37] + a1[38] + a1[39] - a1[40] - a1[41])
v38 = a1[0] + a1[1] + a1[2] - a1[3] - a1[4] - a1[5] - a1[6] + a1[7] + 
a1[8] + a1[9] - a1[10] + a1[11] + a1[12] - a1[13] + a1[14] + a1[15] + 
a1[16] + a1[17] + a1[18] + a1[19] + a1[20]
solver.add(a2[36] == v38 + a1[21] - a1[22] - a1[23] + a1[24] - a1[25] - 
a1[26] - a1[27] - a1[28] + a1[29] + a1[30] + a1[31] + a1[32] - a1[33] - 
a1[34] - a1[35] - a1[36] + a1[37] - a1[38] + a1[39] + a1[40] - a1[41])
v39 = a1[0] - a1[1] - a1[2] + a1[3] - a1[4] + a1[5] - a1[6] - a1[7] - 
a1[8] - a1[9] + a1[10] - a1[11] - a1[12] - a1[13] - a1[14] - a1[15] - 
a1[16] + a1[17] + a1[18] - a1[19] - a1[20]
solver.add(a2[37] == v39 - a1[21] + a1[22] - a1[23] + a1[24] - a1[25] - 
a1[26] + a1[27] - a1[28] - a1[29] + a1[30] + a1[31] - a1[32] + a1[33] - 
a1[34] + a1[35] - a1[36] - a1[37] + a1[38] - a1[39] - a1[40] - a1[41])
v40 = a1[0] + a1[1] + a1[2] + a1[3] - a1[4] + a1[5] + a1[6] + a1[7] - 
a1[8] - a1[9] - a1[10] + a1[11] + a1[12] + a1[13] - a1[14] - a1[15] - 
a1[16] - a1[17] - a1[18] - a1[19] + a1[20]
solver.add(a2[38] == v40 + a1[21] - a1[22] + a1[23] + a1[24] + a1[25] + 
a1[26] + a1[27] - a1[28] - a1[29] + a1[30] + a1[31] - a1[32] - a1[33] + 
a1[34] - a1[35] - a1[36] - a1[37] + a1[38] + a1[39] + a1[40] - a1[41])
v41 = a1[0] - a1[1] - a1[2] - a1[3] - a1[4] + a1[5] - a1[6] - a1[7] - 
a1[8] + a1[9] - a1[10] + a1[11] - a1[12] + a1[13] + a1[14] - a1[15] - 
a1[16] - a1[17] + a1[18] + a1[19] + a1[20]
solver.add(a2[39] == v41 + a1[21] + a1[22] - a1[23] + a1[24] + a1[25] + 
a1[26] + a1[27] + a1[28] - a1[29] + a1[30] + a1[31] + a1[32] + a1[33] + 
a1[34] - a1[35] - a1[36] + a1[37] + a1[38] + a1[39] - a1[40] + a1[41])
v42 = a1[0] - a1[1] - a1[2] - a1[3] + a1[4] + a1[5] + a1[6] - a1[7] + 
a1[8] + a1[9] - a1[10] + a1[11] - a1[12] - a1[13] - a1[14] + a1[15] + 
a1[16] + a1[17] + a1[18] + a1[19] + a1[20]
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
z3
guess_game
Status: solved
Tags: Misc
solver.add(a2[40] == v42 + a1[21] + a1[22] - a1[23] + a1[24] + a1[25] - 
a1[26] + a1[27] + a1[28] - a1[29] + a1[30] + a1[31] + a1[32] - a1[33] - 
a1[34] + a1[35] + a1[36] - a1[37] + a1[38] + a1[39] + a1[40] + a1[41])
v44 = a1[0] + a1[1] + a1[2] + a1[3] + a1[4] + a1[5] + a1[6] - a1[7] - 
a1[8] - a1[9] + a1[10] + a1[11] - a1[12] + a1[13] - a1[14] - a1[15] - 
a1[16] - a1[17] - a1[18] - a1[19] + a1[20]
solver.add(a2[41] == v44 - a1[21] + a1[22] - a1[23] - a1[24] + a1[25] + 
a1[26] + a1[27] + a1[28] - a1[29] - a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] - a1[35] - a1[36] - a1[37] - a1[38] - a1[39] - a1[40] + a1[41])
if solver.check() == sat:
    m = solver.model()
    s = []
    for i in range(42):
        s.append(m[a1[i]].as_long()^i)
    print(bytes(s))
print ''.join(map(lambda x: chr(((x > 3)) & 0xff), s))
96
97
98
99
100
101
102
103
104
105
106
107
import asyncio
import pickle
from struct import pack
def pack_length(obj):
    return pack('>I', obj)
async def start_client(host, port):
    reader, writer = await asyncio.open_connection(host, port)
    ticket = b'\x80\x03cguess_game\ngame\n}
(X\x0b\x00\x00\x00curr_ticketcguess_game.Ticket\nTicket\n)\x81}X\x06\x00\x
00\x00numberK\x01sbX\x0b\x00\x00\x00round_countK\x09X\t\x00\x00\x00win_cou
ntK\x09ubcguess_game.Ticket\nTicket\n)\x81}X\x06\x00\x00\x00numberK\x01sb.
'
    writer.write(pack_length(len(ticket)))
    writer.write(ticket)
    response = await reader.readline()
    print(response.decode())
    response = await reader.readline()
    print(response.decode())
loop = asyncio.get_event_loop()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
ticketgamewin_countpickle dumpsGamenewobj
modulenameguess_gamegame
protocol
Status: solved
Tags: Misc
tshark -r usbtraﬃc.pcapng -T ﬁelds -e usb.capdata > usb.dat 
loop.run_until_complete(start_client('47.111.59.243', 8051))
19
import struct
from PIL import Image
with open('usb.dat', 'r') as f:
    content = f.readlines()
cnt = 0
key_status = None
pics = dict()
res = []
for line in content:
    if len(line) == 128 + 1:
        line = line.strip().decode('hex')
        key_status = map(ord, line[:15])
    if len(line) > 7000:
        line = line.strip().decode('hex')
        type = ord(line[0])
        key_id = ord(line[1])
        has_more = ord(line[2])
        fill = ord(line[3])
        total_length = struct.unpack('H', line[4:6])[0]
        length = struct.unpack('H', line[6:8])[0]
        j = key_id / 5
        i = key_id % 5
        # print key_status[key_id], cnt, type, key_id, has_more, fill, 
total_length, length
        if not key_status[key_id]:
            pics[key_id] = '{}_{}.png'.format(key_id, cnt)
            with open('{}_{}.png'.format(key_id, cnt), 'wb') as f:
                f.write(line[8:8 + length])
        else:
            im = Image.open(pics[key_id])
            im = im.transpose(Image.FLIP_LEFT_RIGHT)
            res.append(im)
        cnt += 1
width, height = res[0].size
flag = Image.new(res[0].mode, (width * len(res), height))
for i, im in enumerate(res):
    flag.paste(im, box=(i * width, 0))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26