249 
以上是 Global.asax 和 Application_Error 方法中的代码示例。记录错误，然后重定向
用户。未验证的参数以请求路径的形式记录在这里。必须注意不要记录或显示来自任何外部
来源的未经验证的输入。'  ' ' 
 Web.config 具有可用于处理错误的自定义错误标记。这是最后调用的，如果调用了
Page_error 或 Application_error 并具有功能，则应首先执行该功能。如果前两种处理机
制没有重定向或清除(Response.Redirect 或 Server.ClearError）。这将被调用，您将被转
发到在 customErrors 部分的 web.config 中定义的页面，该页面的配置如下: 
示例： 
” defaultRedirect=””> 
” redirect=””
/> 
 “模式”属性值“开”表示启用自定义错误，“关”值表示禁用自定义错误。“mode”
属性也可以设置为“RemoteOnly”，它指定自定义错误只显示给远程客户端，而 ASP.NET
错误显示给来自本地主机的请求。如果未设置“模式”属性，则默认为“仅远程”。 
 出现错误时，如果响应的状态代码与错误元素之一相匹配，则相应的“重定向”值将
作为错误页返回。如果状态代码不匹配，将显示“默认重定向”属性的错误页面。如果没有
为“默认重定向”设置值，则返回一般的 IIS 错误页。 
为应用程序完成的客户错误部分的示例如下: 
250 
示例： 
4.4.2.3 Apache 中的错误处理 
在 Apache 中，如何向客户端返回错误消息有两种选择: 
1. 您可以将错误状态代码写入请求对象，并以您想要的方式编写响应，然后让您的处
理程序返回“完成”(这意味着 Apache 框架不允许任何进一步的处理程序/过滤器处理请求，
并将响应发送给客户端)。 
 2.  您的处理程序或过滤器代码可以返回预定义的值，这些值将告诉 Apache 框架您
的代码处理的结果(本质上是 HTTP 状态代码)。然后，您可以配置应该为每个错误代码返回
哪些错误页面。 
 为了集中所有的错误代码处理，选项 2 更有意义。要从处理程序中返回特定的预定义
值，请参考 Apache 文档中要使用的值列表，然后从处理程序函数中返回，如下例所示: 
 示例： 
static int my_handler(request_rec *r){ 
if ( problem_processing() ){ 
return HTTP_INTERNAL_SERVER_ERROR; 
} 
... continue processing request ... 
} 
251 
 在 httpd.conf 文件中，您可以使用“ErrorDocument”指令为每个错误代码指定应
该返回哪个页面。该指令的格式如下: 
错误记录  
... 其中 3 位代码是处理程序设置的 HTTP 响应代码，操作是要返回的本地或外部网址，
或 者 要 显 示 的 特 定 文 本 。 以 下 示 例 摘 自
Apache
错 误 文 档 文 档
(https://httpd.apache.org/docs/2.4/custom-error.html)，其中包含有关错误文档指令的
更多信息和选项: 
 示例： 
ErrorDocument 500 “Sorry, our script crashed. Oh dear” 
ErrorDocument 500 /cgi-bin/crash-recover 
ErrorDocument 500 http://error.example.com/server_error.html 
ErrorDocument 404 /errors/not_found.html 
ErrorDocument 401 /subscription/how_to_subscribe.html 
4.4.2.4 错误处理的领先实践 
可能引发异常的代码应该在 try 块中，处理异常的代码应该在 catch 块中。catch 块是
以关键字 catch 开始的一系列语句，后面是异常类型和要采取的操作。 
示例:Java try-catch 块: 
public class DoStuff { 
public static void Main() { 
try { 
StreamReader sr = File.OpenText(“stuff.txt”); 
252 
Console.WriteLine(“Reading line {0}”, sr.ReadLine()); 
} 
catch(MyClassExtendedFromException e) { 
Console.WriteLine(“An error occurred. Please leave to room”); 
logerror(“Error: “, e); 
} 
} 
} 
示例:.NET try-catch 块 
示例： 
public void run() { 
while (!stop) { 
try { 
// Perform work here 
} catch (Throwable t) { 
// Log the exception and continue 
WriteToUser(“An Error has occurred, put the kettle on”); 
logger.log(Level.SEVERE, “Unexception exception”, t); 
} 
} 
} 
C++ try-catch 块 
 示例： 
void perform_fn() { 
try { 
253 
// Perform work here 
} catch ( const MyClassExtendedFromStdException& e) { 
// Log the exception and continue 
WriteToUser(“An Error has occurred, put the kettle on”); 
logger.log(Level.SEVERE, “Unexception exception”, e); 
} 
} 
一般来说，在 Java 的情况下，最好的做法是捕获特定类型的异常，而不是使用基本的
catch(异常)或 catch(可抛出)语句。 
4.4.2.5 捕捉异常的顺序 
请记住，许多语言会尝试将抛出的异常与 catch 子句匹配，这意味着将抛出的异常与父
类匹配。还要记住，catch 子句是按照它们在页面上的编码顺序进行审计的。这可能会使您
处 于 对 某 种 类 型 的 异 常 可 能 永 远 无 法 正 确 处 理 的 情 况 ， 举 下 面 的 例 子 ， 其 中
“non_even_argument”是“std::invalid_argument”的子类: 
示例： 
class non_even_argument : public std::invalid_argument { 
public: 
explicit non_even_argument (const string& what_arg); 
}; 
void do_fn() 
{ 
try{ 
// Perform work that could throw 
} 
catch ( const std::invalid_argument& e ){ 
254 
// Perform generic invalid argument processing and return failure 
} 
catch ( const non_even_argument& e ){ 
// Perform specific processing to make argument even and continue processing 
} 
} 
这段代码的问题是，当抛出一个' non_even_argument '时，catch 分支处理' 
std::invalid_argument '将总是被执行，因为它是' non_even_argument '的父级，因此运
行时系统将认为它是匹配的(这也可能导致切片)。因此，您需要了解异常对象的层次结构，
并确保首先在代码中列出更具体异常的捕获。 
如果所讨论的语言有一个 finally 方法，就使用它。finally 方法保证总是被调用。finally
方法可用于释放引发异常的方法所参考的资源。这个很重要。例如，如果一个方法从一个连
接池中获得了一个数据库连接，并且发生了一个异常而没有最终得到连接，那么该连接对象
在一段时间内(直到超时)都不会返回到连接池中。这会导致 pool 枯竭。即使没有引发异常，
也会调用 finally()。 
 示例： 
void perform_fn() { 
try { 
// Perform work here 
} catch ( const MyClassExtendedFromStdException& e) { 
// Log the exception and continue 
WriteToUser(“An Error has occurred, put the kettle on”); 
logger.log(Level.SEVERE, “Unexception exception”, e); 
255 
} 
} 
一个 Java 例子，展示了 finally()被用来释放系统资源。 
4.4.2.6 释放资源和良好的内务管理 
RAII 是资源获取是初始化，这是一种说法，当您第一次创建一个类型的实例时，它应
该被完全设置(或尽可能地设置)，以便它处于良好的状态。RAII 的另一个优点是如何处理对
象，当不再需要对象实例时，当对象超出范围(C++)或当它的“使用”块完成时(C#“使用”
指令调用 Dispose 方法，或 Java 7 的“尝试使用资源”功能)，会自动返回它的资源 
 RAII 的优点是程序员(和库的用户)不需要显式删除对象，对象会自己移除，并且在移
除过程中自己(析构函数或 Dispose) 
 对于经典的 ASP 页面，建议将所有的清理都包含在一个函数中，并将其调用到错误处
理中“下一次出错时继续”后的语句。 
 事实证明，为一致的错误报告构建基础架构比错误处理更加困难。Struts 提供了
ActionMessages 和 ActionErrors 类，用于维护一个要报告的错误消息堆栈，它可以与类
似的 JSP 标签一起使用，向用户显示这些错误消息。 
 要以不同的方式(如错误、警告或信息)报告消息的不同严重性，需要执行以下任务: 
1.注册，在适当的严重性下实例化错误 
2. 识别这些信息，并以一致的方式显示它们。Struts ActionErrors 类使错误处理变得
非常简单: 
256 
 示例： 
ActionErrors errors = new ActionErrors() 
errors.add(“fatal”, new ActionError(“....”)); 
errors.add(“error”, new ActionError(“....”)); 
errors.add(“warning”, new ActionError(“....”)); 
errors.add(“information”, new ActionError(“....”)); 
saveErrors(request,errors); // Important to do this 
现在我们已经添加了错误，我们通过在 HTML 页面中使用标签来显示它们。 
4.4.3 参考 
对于经典的 ASP 页面，您需要进行一些 IIS 配置，请按照
http://support.microsoft.com/ kb/299981 了解更多信息。 
 有关 struts 中的默认 HTTP 错误页面处理，请参见
https://software-security.sans.org/博客/2010/08/11/安全性-错误配置-Java-webxml-
文件 
4.5 审计安全告警 
当出现问题时，您的代码和应用程序会有什么反应？许多公司为了防止攻击者进入他们
的网络遵循安全设计和编码原则，但是许却不考虑审计针对攻击者可能已经发现了漏洞或者
257 
已经利用它在公司防火墙内运行代码(即，内部网内)的安全警告。 
许多公司使用 SIEM 日志技术来监控网络和操作系统日志，以发现可疑活动的模式，本
节旨在进一步鼓励应用层和接口也这样做。 
4.5.1 描述 
本节集中讨论: 
1.  允许用户在系统受到攻击时做出反应的设计和代码。 
2. 允许应用程序在被违反时安全原则时进行标警报。 
 当一家公司实施安全的设计和编码时，它的目标是防止攻击者滥用软件和访问他们不
应该访问的信息。可以防止攻击者利用 SQL 注入、XSS、CSRF 等类型的漏洞攻击软件。然
而，当攻击者试图突破防御或防护被突破时，软件应该如何反应？ 
 对于要对安全问题发出警报的应用程序，它需要关注什么是“正常”以及什么构成安
全问题的上下文。这将根据应用程序及其运行的上下文而有所不同。一般来说，应用程序不
应该尝试记录发生的每一项，因为过多的记录会降低系统速度，填满磁盘或数据库空间，并
使过滤所有信息以发现安全问题变得非常困难。 
 与此同时，如果没有足够的信息被监控或记录，那么基于可用的信息很难进行安全警
报。为了实现这种平衡，应用程序可以使用自己的风险评分系统，在系统级别监控已经发现
的风险触发因素(即，无效输入、失败的密码等），并使用不同的日志记录模式。以正常使
用为例，在这种情况下，只记录关键项目。但是，如果认为安全风险增加，则可以记录主要
或高安全级别的项目并采取行动。这种较高的安全风险也可能会调用进一步的安全功能，如
258 
本节后面所述。 
 举个例子，在线表单(后认证)允许用户输入一年中的一个月。在这里，用户界面被设