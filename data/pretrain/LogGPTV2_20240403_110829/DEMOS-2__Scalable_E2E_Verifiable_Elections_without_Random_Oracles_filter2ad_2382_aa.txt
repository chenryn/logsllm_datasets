title:DEMOS-2: Scalable E2E Verifiable Elections without Random Oracles
author:Aggelos Kiayias and
Thomas Zacharias and
Bingsheng Zhang
DEMOS-2: Scalable E2E Veriﬁable Elections without
Random Oracles
Aggelos Kiayias∗†1, Thomas Zacharias†1, and Bingsheng Zhang‡†2
1Dept. of Informatics and Telecommunications, University of Athens, Greece
2Security Lancaster Research Centre, Lancaster University, UK
October 13, 2015
Abstract
Recently, Kiayias, Zacharias and Zhang proposed a new E2E veriﬁable e-voting
system called ‘DEMOS’ that for the ﬁrst time provides E2E veriﬁability without
relying on external sources of randomness or the random oracle model; the main
advantage of such system is in the fact that election auditors need only the elec-
tion transcript and the feedback from the voters to pronounce the election process
unequivocally valid. Unfortunately, DEMOS comes with a huge performance and
storage penalty for the election authority (EA) compared to other e-voting systems
such as Helios. The main reason is that due to the way the EA forms the proof of the
tally result, it is required to precompute a number of ciphertexts for each voter and
each possible choice of the voter. This approach clearly does not scale to elections
that have a complex ballot and voters have an exponential number of ways to vote
in the number of candidates. The performance penalty on the EA appears to be
intrinsic to the approach: voters cannot compute an enciphered ballot themselves
because there seems to be no way for them to prove that it is a valid ciphertext.
In contrast to the above, in this work, we construct a new e-voting system that
retains the strong E2E characteristics of DEMOS (but against computational ad-
versaries) while completely eliminating the performance and storage penalty of the
EA. We achieve this via a new cryptographic construction that has the EA produce
and prove, using voters’ coins, the security of a common reference string (CRS) that
voters subsequently can use to aﬃx non-interactive zero-knowledge (NIZK) proofs
to their ciphertexts. The EA itself uses the CRS to prove via a NIZK the tally
correctness at the end. Our construction has similar performance to Helios and
is practical. The privacy of our construction relies on the SXDH assumption over
bilinear groups via complexity leveraging.
1
Introduction
End-to-end (E2E) veriﬁability has been widely identiﬁed as a critical property for the
adoption of e-voting systems in real world election procedures (see e.g., [RG15] for
∗
†
Research was partly supported by ERC project CODAMODA.
Research was supported by project FINER, Greek Secretariat of Research and Technology funded
under action “ARISTEIA 1.”
‡
Research was performed while Zhang was a post-doc at National and Kapodistrian University of
Athens, Greece.
1
In an E2E veriﬁable election system, it is possible for
a recent high level account).
an auditor to verify the correctness of the election tally utilizing feedback from the
participants and examining the public election transcript. Naturally, E2E veriﬁability
should be achieved without violating the privacy of the voters and any other desirable
property of the election system.
Helios,
[Adi08], proposed by Adida,
is a widely used e-voting system that can
achieve E2E veriﬁability and privacy (assuming it is suitably instantiated, cf. [BCP+11,
BPW12]). To achieve veriﬁability, an important design element is the incorporation of
an “audit or cast” procedure in the voting booth application that prepares the encrypted
voter’s choice [Ben06]. This process enables the voter to challenge her device that assists
her in the preparation of her ballot. Once the voter is convinced that the device is not
cheating her she can submit the enciphered vote together with a cryptographic proof
(called a Non-interactive Zero-Knowledge proof or NIZK, cf. [BFM88, GS08]) that the
ciphertext properly encodes the voter’s choice. The inclusion of the NIZK is critical for
veriﬁability: without it, it is possible for a malicious client to violate the encoding of the
candidate choice and “stuﬀ” the virtual ballot box with additional votes for a certain
candidate of her choice (or in general invalidate the election tally).
In Helios, an auditor can verify the election tally by utilizing some feedback from
the voters (speciﬁcally hashes of submitted ciphertexts that are called “smart ballot
trackers”) and the election transcript. The auditor will verify that ciphertexts included
in the transcript match the hashes given by the voters and furthermore that all the
NIZK’s in the transcript are valid. If all appear to be in order the election tally can be
accepted to be correct.
The above argumentation has a caveat: the veriﬁcation of the NIZK’s relies on the
random oracle model (RO) [BR93] which basically posits that a given hash function is
a random function from the perspective of the adversary. It follows that the auditor
should believe the election tally as long as she believes the Election Authority (EA)
has no essential understanding of the hash function1 that gives her an advantage in
breaking soundness of the underlying NIZK’s. While it will be surprising to obtain a
soundness attack against SHA256 based NIZK such an attack cannot be ruled out as
forging SHA256-NIZK’s is not a problem that has been suﬃciently studied. Further, in
the case of e-voting, even a single bad NIZK on a single voter ciphertext would be enough
to completely corrupt the election tally and if e-voting is deployed in the large scale the
EA could be subverted by a truly mighty adversary (e.g., it is believed by many that
the US Government/NSA has an understanding of hash function vulnerabilities that
surpasses what is publicly known).
To resolve the above concern, a system called DEMOS was put forth in [KZZ15]
where it is possible to prove E2E veriﬁability in the “standard model”, which in the
terminology of that paper, means without access to an external source of randomness
or the random oracle model. The main idea is to remove the task of calculating the
encrypted vote from the voter client and have the EA precompute for each voter a
ciphertext for each potential voter choice. The voter then casts a vote by pointing to a
speciﬁc ciphertext and the EA terminates the procedure by proving all the encryptions
were done correctly (actually they use commitments instead of encryptions). The system
meets its objective as the EA is the sole entity that performs a Σ proof (cf. [CDS94])
with the veriﬁer’s challenge formed collectively by the voters who submit coins (that
may be biased) to the election transcript.
1The current Helios implementation uses the SHA256 hash function for implementing NIZKs.
2
At ﬁrst it may seem that this precomputation step is necessary to obtain this level of
strong E2E veriﬁability. The only way to avoid precomputation from the EA, is to have
the voter clients perform the encryption of the voters’ choices and in such case a proof
that the encryption is done correctly is needed. Such proof has to be non-interactive
since the auditor will be active only after the end of the election (and in fact there
may be many independent auditors that wish to check that the election was executed
properly). Unfortunately NIZK’s require either a “common reference string” (CRS) or
the RO. In the former case, the only entity to produce the CRS is the EA and because
the EA is malicious from the perspective of E2E veriﬁability, if she chooses the CRS, she
can choose it so that the NIZK is “simulatable” and hence she may be able to produce
valid looking NIZKs for an incorrect statement.
1.1 Our Results
We construct a new e-voting scheme that retains the strong E2E veriﬁability charac-
teristics of [KZZ15] (but against computational adversaries) while completely obviating
the need for a precomputation step by the EA. In the asymptotic sense our system has
the same characteristics as Helios (while entirely removing the reliance to the RO model
for security).
We achieve this via a new technique for proving the validity of ciphertexts that are
submitted by the voters during ballot casting. Our proof technique may have applica-
tions beyond the e-voting domain - more comments on this below.
As mentioned above, the way to remove the precomputation is to have the voter
clients produce the encrypted choices of the voter; the main technical challenge is how
to prove the validity of those ciphertexts. For simplicity let us assume for now that the
ciphertext ψ that is to be produced by each voter encrypts a plaintext in {0, 1}. Our
construction strategy is as follows.
We will use a type of NIZK where there are two possible ways to generate the
CRS, one that makes every NIZK perfectly sound and another that makes every NIZK
simulatable using the trapdoor information associated to the CRS. The EA will use this
dual mode CRS and will publish a CRS that is of the ﬁrst type, i.e., one that makes
all NIZK’s perfectly sound. This is reasonable in the sense that if the EA is honest,
NIZK statements produced by the voters over this CRS will be guaranteed to be valid.
However, a danger comes from the fact that nobody can distinguish such CRS from the
other type of CRS that is simulatable and will enable any collaborator of the EA to fake
a NIZK and stuﬀ the virtual ballot box with fake votes.
To mediate this problem we will have the EA prove that the CRS she publishes is
of the ﬁrst type following the same general Σ proof structure suggested in [KZZ15] (in
contrast to this latter paper though, the EA will be only proving her CRS is of the ﬁrst
type — not that the whole election tally is valid). Subsequently any other entity (such
as a voter or a trustee) can utilize the CRS of the EA (we call it the master CRS) to
produce a “second layer” CRS that she can use for proving a certain statement using
NIZK.
In more details our technique is as follows. The master CRS published by the EA
can be seen as a public-key of an additively homomorphic encryption scheme. When
the prover gets to know the statement to be shown, for instance when the voter wishes
to show that a ciphertext ψ is an encryption of {0, 1} she performs the following. She
creates two strings crs0, crs1 that are homomorphic ciphertexts based on the master
CRS of the EA. The crs0, crs1 strings also can be used as dual CRS’s and have the
3
property that if they are multiplied they provide an encryption of 1. The dual property
of crs0, crs1 is by design as follows: if crs0 is an encryption of 0 then one can produce
simulatable fake NIZK’s with respect to crs0 while if crs0 is an encryption of 1 then one
can produce only perfectly sound proofs with respect to crs0. The same properties hold
true for crs1.
The product of the two crs0, crs1 is denoted by crs0/1 and we call it the second layer
CRS. The prover will now show that crs0/1 is an encryption of 1 via a NIZK w.r.t. the
master CRS. Then, the prover will show ψ to be an encryption of 0 with respect to crs0
and an encryption of 1 with respect to crs1 via two independent NIZK’s on the individual
CRS’s. Observe that in order for the prover to accomplish this she will have to cheat in
one of these two proofs; this is possible due to the fact that she has chosen the strings
crs0, crs1 herself and she is only subject to the constraint that their product, crs0/1, is
an encryption of 1 (as she has to give a NIZK proof with respect to the master CRS
about this fact). This ﬂexibility enables her to choose crs0 or crs1 to be an encryption
of 0 and hence simulate one of the two proofs that show ψ to be an encryption of 0 or
an encryption 1 (she knows the plaintext inside ψ so she has to choose crs0 and crs1
accordingly).
Using the above strategy, all voters can provide ciphertexts and prove them to be
valid encodings of a candidate choice. It is easy to see that as long as the master CRS
is of the perfectly sound type, the proofs that crs0/1 is an encryption of 1 will be perfect
and hence the voters cannot stuﬀ invalid ciphertexts in the virtual ballot box. However,
as mentioned above, the EA might attempt to use a master CRS of the second type
(simulatable) and then collaborate with a voter to violate integrity. To prevent that we
require the EA to start a Σ proof showing that the master CRS is of the perfectly sound
type. As in [KZZ15] we collect coins from the voters to form a weak random source and
ﬁnally at the end have the EA publish together with the result the ﬁnal move of the Σ
protocol using the coins of the voters as the challenge. The auditor now is tasked with
checking all the NIZK’s w.r.t. the CRS’s generated by the voters as well as the NIZK’s
provided w.r.t. the master CRS. Finally, she is also tasked with checking the Σ proof
provided by the EA showing that the master CRS is of the perfectly sound type.
Given the above, one may wonder how we will be able to prove privacy. Naturally,
if we are to prove privacy, we should be able to construct a type of simulation argument
that enables us to plug in some instance of a hard problem into the honest voters’
ciphertexts. This requires faking at least one of the NIZK’s which by nature of perfect
soundness we will be unable to perform. To circumvent this we utilize complexity-
leveraging: in the privacy proof, our reduction will take super-polynomial time to ﬁnd
an execution of the adversary where the reduction can cheat the Σ protocol proof and
fake it so that the master CRS is of the second type (simulatable NIZK’s).
In this
execution our reduction will be able to fake all proofs and thus plug in any given hard
problem instance. While this cannot happen in the real world (as the EA needs to run in
real time so she is not expected to ﬁnd such an execution) our reduction will still yield an
algorithm that breaks a hard problem (it will be the symmetric external Diﬃe-Hellman
(SXDH) problem over bilinear groups). Assuming this problem is subexponentially hard
we get a contradiction and hence privacy holds.
Note that in our system we can have trustees participate (exactly as in the case of
Helios) and produce the master CRS on behalf of the EA; hence we can achieve the same
distribution of trust with respect to privacy as in the Helios system (this was left open in
[KZZ15]). An interesting side note is that our strategy above provides an eﬃcient way
to perform a Lapidot-Shamir [LS90] type of Σ protocol: the prover performs a Σ-proof
4
for the CRS that, by nature, does not have to depend on the statement to be shown
which can become known to the prover only in the third move of the protocol (where in
our case the prover will show using a NIZK). This proof technique can be generalized
and may have applications beyond e-voting.
1.2 Related Work
Our technique for structuring our proof argument is inspired by [GOS06] where corre-
lated random strings are chosen by the prover in such a way that a veriﬁer can check that
at least one of them will yield a perfectly sound proof but she cannot distinguish which
one. The prover then proceeds to issue NIZK’s for each random string thus ensuring
that one of them will be valid. Our NIZK proof is a modiﬁed and simpliﬁed version of
the NIZK given in [GS08].
In terms of modeling privacy and veriﬁability we follow previous works in the area
[KTV10, KTV11, BCP+11, BPW12, KZZ15] mostly using the latter reference as a basis
for our formulation. Importantly, due to the virtues of our construction, we can achieve a
stronger level of privacy compared to [KZZ15] that is in the simulation based sense, akin
to [BPW12], as opposed to the indistinguishability-type of privacy shown in [KZZ15].
We also argue that our deﬁnition captures a level of receipt-freeness in the sense of
[KZZ15]. On the other hand, we do not deal with coercion resistance; however techniques
such as those of [JCJ02] are in principle compatible with our approach and our system
may be augmented to incorporate them. We leave this for future work.
2 Preliminaries
2.1 Notations