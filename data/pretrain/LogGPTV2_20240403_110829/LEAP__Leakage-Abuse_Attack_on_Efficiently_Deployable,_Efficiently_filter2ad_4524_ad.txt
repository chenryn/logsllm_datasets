qit
wxi′
1
wxi′2
...
wxi′
t
ed2
ed1
Bi1,1 Bi1,2
Bi2,1 Bi2,2
...
...
Bit ,1 Bit ,2
· · ·
· · ·
· · ·
· · ·
· · ·
edn
Bi1,n
Bi2,n
...
Bit ,n
dy1
dy2
A′′
1,1 A′′
i′
i′
1,2
A′′
2,1 A′′
i′
i′
2,2
...
...
A′′
t ,1 A′′
i′
i′
t ,2
· · ·
dyn′
· · · A′′
i′
1,n′
· · · A′′
i′
2,n′
· · ·
...
· · · A′′
i′
t ,n′
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
(11)
(12)
(9)
(10)
).
, ...,wxi′
t
The rows in Br are arranged according to the order of (qi1 , ...,qit ),
while the rows in A′′
r are arranged according to the order of
(wxi′1
If any columnj of Br is unique among all columns of Br , then
columnj of B is unique among all columns of B. The same applies
r and A′′. Hence, for each columnj of Br whose
to the case of A′′
bit-string is unique among all columns of Br , if there exists a
columnj′ of A′′
r whose bit-string is the same as the bit-string of
columnj of Br , then we know that dyj′ is the plaintext of edj.
• Method 5. This method aims to find more column mappings. We
use a vector V Bj (resp. vector V Aj′) to record the column-sum
for each columnj of B (resp. columnj′ of A′′) in each iteration.
As the first step, V Bj (resp. V Aj′) records columnj-sum of B
(resp. columnj′-sum of A′′) as its first element, while the rest
of the elements are set to zero. Without loss of generality, let
{(qa1 ,wa′
t )} be the (q,w ) mapping set being found
during the current iteration. With {(qa1 ,wa′
t )}, we
set the entries of rowi of B to 0 for i ∈ {a1, ...,at}, and set
the entries of rowi′ of A′′ to 0 for i′ ∈ {a′
t}. We then re-
compute the column-sum of B (resp. A′′) for the columns that
have not been mapped, and add the computed column-sum to
the corresponding vector as its next element. For each distinct
vector V Bj of B, if these exists a vector V Aj′ of A′′ that equals
V Bj, we can conclude that the plaintext of edj is dj′. The above
procedure is performed in every iteration, until no more new
(q,w ) mappings are found.
1 ), .., (qat ,wa′
1, ...,a′
1 ), .., (qat ,wa′
4.3 Description of LEAP
LEAP is shown in Figure 1, where the Occurrence(C,M,M′,A′′,B)
algorithm, shown in Algorithm 1, serves as a subroutine of the
attack.
Step 0 initializes several variables that are used in the following
steps. In particular, Cnew is used to record newly found (ed,d )
mappings in Step 6, Step 7 and Step 8; Rnew is used to record
newly found (q,w ) mappings in Step 5. C is used to accumulate
(ed,d ) mappings, and R is used to accumulate (q,w ) mappings. Step
2 uses Method 1 as described in Section 4.2. Step 3 utilizes the
n × n ed-occurrence matrix M and the n′ × n′ d-occurrence matrix
M′ to find more (ed,d ) mappings based on Method 2. Step 5, Step
)}
Session 7D: Privacy for Distributed Data and Federated Learning CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea 2312Algorithm 1: Occurrence(C,M,M′,A′′,B)
Input: A known (ed,d ) mapping set C; an n × n ed-occurrence
matrix M and an n′ × n′ d-occurrence matrix M′,
where n′ < n; an m × n′ matrix A′′ and an m × n
matrix B.
Output: A set of (ed,d ) mappings;
1 Initialize a set S = {1} and a set C′ = ∅;
2 Set C′ = C;
3 while S (cid:44) ∅ do
Set S = ∅;
for each unmapped dyj′ for j′ ∈ [n′] do
j′ = cj, where c′
Set candidate ED be any unmapped edj for j ∈ [n]
satisfying c′
j′ is the columnj′-sum of
A′′ and cj is the columnj-sum of B;
for each edj in ED do
if Mj,k (cid:44) M′
for known mappings (edk ,dyk′ ) in C′ do
j′,k′ then
remove edj from ED;
end
end
end
if only one edj remains in ED then
add (edj ,dyj′ ) to S;
set C′ = C′ ∪ S.
4
5
6
7
8
9
10
11
12
13
14
15
end
16
17
18
19 end
20 return S;
end
6 and Step 7 are based on Method 3, Method 4, and Method 5
respectively.
We then give the description of Algorithm 1. The main idea is
to utilize known (ed,d ) mappings to find more (ed,d ) mappings.
It takes known (ed,d ) mappings as input. This algorithm is based
on Method 2, which is built on the following two observations (as
described in Section 4.2):
• If edk is the encrypted version of dyk′ and edj is the encrypted
version of dyj′ , then the equation Mj,k = M′
j′,k′ holds. However
Mj,k = M′
j′,k′ does not imply that edk is the encrypted version
of dyk′ and edj is the encrypted version of dyj′ .
• For a known (edk ,dyk′ ) mapping and a (unmapped) dyj′ , we
can obtain a new mapping (edj ,dyj′ ) if edj is the only candidate
satisfying (1) Mj,k = M′
j′ is the
columnj′-sum of A′′ and cj is the columnj-sum of B.
The first observation is utilized in Lines 7-13 in Algorithm 1 to filter
some edj from the candidate set. The second observation is utilized
in Lines 14-16 in Algorithm 1 to obtain the (edj ,dyj′ ) mapping.
4.4 Analysis of LEAP
Step 2 is the starting point of LEAP. The (ed,d ) mappings found
in this step serve as initial (ed,d ) mappings to bootstrap Step 3.
j′ = cj, where c′
j′,k′, and (2) c′
Step 3 aims to find more (ed,d ) mappings based on the n × n ed-
occurrence matrix M and the n′×n′ d-occurrence matrix M′, which
crucially relies on the (ed,d ) mappings found in Step 2. The more
(ed,d ) mappings are found in Step 2, the more (ed,d ) mappings
would be found in Step 3.
The task of Step 5 is to find (q,w ) mappings. This is the only
step that aims to recover (q,w ) mappings. The effectiveness of
this step depends strongly on the size of the (ed,d ) mapping set C
accumulated in Step 2 and Step 3, which is used to generate the
c ) from (B,A′′). If more
C-column-mapped submatrix pair (Bc ,A′′
(ed,d ) mappings are accumulated in C, Bc (resp. A′′
c ) is wider, and
the probability of finding unique rows in it becomes higher. Hence,
it is important to find as many (ed,d ) mappings as possible before
executing Step 5.
On the other hand, the (q,w ) mappings found in Step 5 are
utilized to find more (ed,d ) mappings in Step 6. Similarly, a larger
size of R leads to higher Br (resp. A′′
r ), and a higher probability of
finding unique columns in it.
Step 8 is similar to Step 3, which employs M and M′ to find more
(ed,d ) mappings. A larger size of C leads to more (ed,d ) mappings
to be found.
We define keyword recovery rate as the percentage of keywords
from W′ (where W′ = {wx1 , ...,wxm′} is as defined Section 4.1) that
have been mapped to the query tokens. In other words, keyword
recovery rate is the percentage of rows of A′′ that can be uniquely
mapped to the rows of B. We further define accuracy rate of recov-
ered keywords as the percentage of recovered keywords that are
correctly mapped to query tokens, and correct keyword recovery rate
as the percentage of keywords from W′ that have been accurately
mapped to the query tokens.
Similarly, we define document recovery rate as the percentage of
known documents which are mapped to their encrypted versions.
Document recovery rate is the percentage of columns of A′ that
can be uniquely mapped to the columns of B. We further define
accuracy rate of recovered document as the percentage of recovered
documents that are correctly mapped to encrypted documents,
and correct document recovery rate as the percentage of known
documents that have been accurately mapped to the encrypted
documents.
We take the following example to demonstrate the differences of
the above definitions. For a known document set with 100 keywords,
suppose there exists an attack that returns 80 (q,w ) mappings with
40 correct mappings. In this case, the keyword recovery rate is 80%,
the accuracy rate of recovered keywords is 50%, and the correct
keyword recovery rate is 40%. Intuitively, keyword recovery rate
alone cannot reflect the power of an attack, since the result may
contain false positives. With the accuracy rate of recovered key-
words, one can see how “good” the result is. The correct keyword
recovery rate reflects how effective of an attack. The same holds
for the case of document recovery.
5 EXPERIMENTS
Here we report the experimental results of LEAP, which is the first
attack that targets exact recovery of (q,w ) mappings and (ed,d )
mappings from partially-known documents and information leak-
age of EDESE schemes.
Session 7D: Privacy for Distributed Data and Federated Learning CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea 2313map = A′′.
map.
= 0 for i ∈ {m′ + 1, ...,m′′} and
map ,Bmap) to obtain a (ed,d ) mapping set S. Add S into C.
Input: An m′ × n′ document-keywrod matrix A′ and an m × n encrypted document-query token matrix B, where m′ < m and n′ < n.
Output: A set of (q,w ) mapping and a set of (ed,d ) mapping.
• Step 0 (Initialization): Initialize a counter ct = 1, four sets Cnew = ∅, Rnew = ∅, C = ∅, R = ∅, and two matrices Bmap and A′′
• Step 1 (Extend A′): Extend the m′ × n′ matrix A′ to an m × n′ matrix A′′ with the new entries A′′
i,j
j ∈ [n′]. Set Bmap = B and A′′
• Step 2 (Find (ed,d ) mappings): For each j ∈ [n], do: (1) Initialize a vector V Bj for columnj of B; (2) Compute columnj-sum as cj, and
set V Bj[1] = cj. Similarly, for each j′ ∈ [n′], do: (1) Initialize a vector V Aj′ for columnj′ of A′′; (2) Compute the columnj′-sum as
c′
j′. For each V Bj that is unique among {V Bj}j∈[n], if there exists a V Aj′ such that V Bj = V Aj′ (where j′ ∈ [n′]),
j′, set V Aj′[1] = c′
add (edj ,dyj′ ) into C.
• Step 3 (Find more (ed,d ) mappings): Compute the n × n ed-occurrence matrix M and the n′ × n′ d-occurrence matrix M′, run
Occurrence(C,M,M′, A′′
• Step 4: Set ct = ct + 1, and Rnew = Cnew = ∅.
• Step 5 (Find (q,w ) mappings): Generate C-column-mapped submatrix pair (Bc ,A′′
unique bit-string among all the rows, find rowi′ of A′′
Rnew and R respectively;
• Step 6 (Find more (ed,d ) mappings): Generate R-row-mapped submatrix pair (Br ,A′′
map ). For columnj of Br that
has unique bit-string among all the columns, find columnj′ of A′′
r that has the same bit-string as the columnj in Br . If found, add
(edj ,dyj′ ) into Cnew and C respectively;
• Step 7 (Find more (ed,d ) mappings): Set the entries of all the matched rows in B and A′′ to 0. For each columnj of B that hasn’t
been mapped, (re-)compute its columnj-sum as cj, and set V Bj[ct] = cj. Similarly, for each columnj′ of A′′ that hasn’t been mapped,
compute its columnj′-sum as c′
, if there exists a V Aj′ such that
V Bj = V Aj′ (where j′ ∈ S′
up are the index sets of the unmapped
columns in B and A′′ respectively;
map ,Bmap) to obtain a (ed,d ) mapping set S′. Add S′ into Cnew
• Step 8 (Find more (ed,d ) mappings): Run Occurrence(C,M,M′,A′′
and C respectively.
• Step 9: If (Rnew (cid:44) ∅ or Cnew (cid:44) ∅), execute Step 4; otherwise, execute Step 10.
• Step 10: Output R as the set of recovered (q,w ) mappings and C as the set of recovered (ed,d ) mappings.
map ). For rowi of Bc that has
c that has the same bit-string as the rowi of Bc. If found, add (qi ,wxi′ ) into
j′, set V Aj′[ct] = cj′. For each V Bj that is unique among {V Bj}j∈Sup
up), add (edj ,dyj′ ) into Cnew and C respectively, where Sup, S′
c ) from (Bmap ,A′′
r ) from (Bmap ,A′′
Figure 1: Description of LEAP
5.1 Setting
In our experiments, we use the Enron email database [13] as in
previous studies [5, 39, 44]. The database consists of 30,109 emails
of 150 employees from the Enron corporation, which were sent
between 2000-2002. We treat each email as a single document. The
document universe consists of all 30,109 emails. We adopt the same
method as in [5, 44] to extract keywords from the emails. In partic-
ular, all words are first processed according to the standard Porter
stemming algorithm [38] so as to generate a keyword set, and the
stop words (such as “a”, “the”, “to”, etc.) are removed from the key-
word set. Similar to [5, 44], in our experiments, we chose the top
5,000 most frequent keywords from the keyword set as the keyword
universe for each case in our experiments. For the case where the
number of keywords of the leaked documents is less than 5,000, we