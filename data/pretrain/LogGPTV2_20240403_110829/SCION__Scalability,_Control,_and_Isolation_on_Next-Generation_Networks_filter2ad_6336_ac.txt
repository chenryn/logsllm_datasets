received from neighbors, selects a subset of paths to be further
announced, and appends additional information to the selected
paths to form new path construction beacons. The additional
information added includes an ingress/egress interface pair per
path to specify how trafﬁc should enter and exit the local AD
along that path. Each ingress or egress interface corresponds
to a single neighboring AD to uniquely deﬁne the preceding
or following AD along with the TD scope (i.e., in which TD
can this link be used); this enables bi-directional forwarding.
Because the beacon timestamp T S and TD scope T D in G in
a path construction beacon are not changed by ADs, we focus
on p.
The remainder of this section details our path construction
protocol which supports peering links and ﬁne-grained rout-
ing based on ingress/egress points. Table I summarizes the
notation used in the following protocol description. We ﬁrst
specify the format of a path construction beacon, and then
walk through the path construction process using an example
topology.
217
A. Format of a Path Construction Beacon
Suppose ADi−1 passes a path construction beacon to its
neighbor ADi (e.g., a customer or a peer) along a path p.
Then, a link p ∈ p in the path construction beacon, which ADi
further announces along p, contains four ﬁelds Ip(i), Tp(i),
Op(i), and Σp(i) as detailed below. The path construction
beacons are TD-scoped and only propagated within the TD
from which they are originated.
1) Interface ﬁeld Ip(i): This ﬁeld contains the path re-
ceived from the previous hop, appended with the local link
(ingress/egress interface pair). That is:
Ip(i) = Ip(i − 1)||ingressp(i)||egressp(i)
(1)
where ingressp(i) and egressp(i) denote the interfaces that
connect ADi with the previous hop and the next hop during
path construction, respectively. We enforce that each ADi
labels its interfaces TD-speciﬁc, if ADi joins multiple TDs;
so that from an interface label ADi knows for which TD that
interface is used.
2) Timing ﬁeld Tp(i): The timing information for each link
contains an expiration time depending on the AD’s internal
policy. The introduction of link expiration time requires end-
point ADs to periodically select new, updated sets of paths,
thus achieving route freshness.
3) Opaque ﬁeld Op(i):
For packet forwarding, the opaque
ﬁeld will be embedded into data packets such that ADs on the
path can efﬁciently check (i) whether the incoming trafﬁc is
allowed and enters from the correct AD at the correct ingress
point, and (ii) the corresponding egress interface to the next-
hop AD. Hence, Op(i) contains the ingress/egress interfaces
at ADi for the announced path p, and a short crypotographic
Message Authentication Code (MAC) by which an AD can
verify if the opaque ﬁeld embedded in the data packet is
authentic. Speciﬁcally:
Op(i) =ingressp(i)kegressp(i)
MACKi(ingressp(i)kegressp(i)kOp(i − 1))
(2)
The MAC portion is computed using a secret key Ki known
only to ADi, and is essentially a data plane capability used
to remind ADi of its own decision that p is an approved
path when used to carry data packets. Note that since these
capability MACs are only veriﬁed by the issuing AD (ADi),
it requires no time synchronization with other ADs as long
as the time synchronization within the routers of each AD
are sufﬁcient to enforce its individual policy regarding route
announcement timeouts. An opaque ﬁeld Op(i) will only be
checked by the issuing ADi during forwarding, while its
semantics remain “opaque” to other transit and endpoint ADs.
Hence, an AD can put a wide range of information in the
opaque ﬁeld to support ﬂexible routing policies, as we discuss
in Section XI.
In addition to Op(i), ADi also includes in the path con-
struction beacon the opaque ﬁelds received from preceding
ADs in p, denoted by {Op(j)}j, where ADj is an ancestor
of ADi in p. In this way, an endpoint AD can receive all the
opaque ﬁelds by its upstream ADs, which can later be used
TABLE I
NOTATION.
AD cert
Sub-TD Cert
TD Core Cert
Signature
Notation
Certi∈T D
CertT D1⊆T D
CertT D→i
Signi(X)
Meaning
TD certiﬁes ADi is in TD
TD certiﬁes TD1 is its sub-TD
TD certiﬁes ADi is a TD Core AD
ADi signs X with private key K −1
i
for efﬁcient forwarding as we show in Section VIII.
An AD can use different secret keys for generating MACs
for different beacon timestamps T S. In practice, an AD
may employ a “grace period” within which an expired link
can still be used and the corresponding MAC is still valid.
Consequently, at any point of time, multiple usable timestamps
can co-exist thus requiring an AD to maintain a small key table
storing the concurrent secret keys for MAC generation. Upon
receiving a data packet, the AD will use the beacon timestamp
T S along with the default expiration time of the paths within
that AD to retrieve the key for MAC veriﬁcation. At any
point in time, numerous symmetric keys Kj corresponding
to different expiration times will be valid. Thus, routers will
need different keys for verifying the MAC of opaque ﬁelds,
depending on the expiration time which in turn can be derived
from the path timestamp T S which is included in the packet
header. The different keys Kj can be derived through the use
of a PRF F that is keyed with a secret key KAD known
by all routers in the AD and computed over a key index j:
Kj = FKAD (j). For the function F we suggest using AES
in ECB mode, assuming that the key size for keys Kj is at
most 128 bits. As a consequence, only the secret symmetric
key KAD needs to be distributed among all routers in the AD.
4) Signatures Σp(i). ADi signs its local link in p as follows:
Σp(i) = Certi∈T DkSigni(Ip(i)kTp(i)kOp(i)kΣp(i − 1)) (3)
where Certi∈T D is a membership certiﬁcate authenticating
ADi as a member of T D, and the AD number can be extracted
from this certiﬁcate. Note that the signatures are constructed
in an onion fashion, where each signature signs all previous
path information.
If ADi is in the TD Core, Σi also includes an additional
certiﬁcate CertT D→i signed by the TD authority authenticating
ADi as a TD Core AD:
Σp(i) =CertT D→ikCerti∈T Dk
Signi(Ip(i)kTp(i)kQp(i)kΣp(i − 1))
(4)
B. Supporting Peering Links
To identify shortcuts across peering links (as described
below), each pair of peering ADs (i, h) also exchanges a
peering certiﬁer Qi,h that ADi inserts to p with the following
218
UT C→A (omitting ΣT C )
Ip(T C) = φkφkT C(1)
Tp(T C)
Op(T C) = φkT C(1)kM AC
UA→C (omitting ΣA)
Ip(A) = Ip(T C)kA(1)kA(2), Tp(A)
Tp(A)
Op(A) = A(1)kA(2)kM AC
Op(T C)
TD Core (TC)
1
1
A
2
1
2
1
B
2
1
UC→E (omitting ΣC )
4
C
2
2
D
Ip(C) = Ip(A)kC(1)kC(4), Tp(C)
Tp(C)
Op(C) = C(1)kC(4)kM AC
1
E
3
1
F
3
1
G
Op(A), Op(T C)
QC,D as speciﬁed by Equation 5
Fig. 4. Path construction beacon format along path p = hT C, A, C, Ei. The
link between C and D is a peering link; other links are customer-provider
links. The symbol φ denotes an empty ﬁeld, and ADi(n) denotes the interface
labeled n of ADi (e.g., T C(1) represents the interface labeled 1 of the TC).
Furthermore, M AC refers to the MAC constructed per Equation 2.
ﬁelds:
Ii,h(i) = ingressi,h(i)kegressi,h(i)kT DhkAIDh,
Ti,h(i),
Oi,h(i) = ingressi,h(i)kegressi,h(i)k
MACKh(ingressi,h(i)kegressi,h(i)),
Σi,h(i) = Certi∈T DkSigni(Ii,h(i)kTi,h(i)kOi,h(i)kOp(i))
(5)
where ingressi,h(i) and egressi,h(i) denote the ingress and
egress interfaces of ADi for traversing this peering link along
path p; T Dh and AIDh denote the TD ID and AD number of
the peer ADh; and Th,i is the expiration time for that peering
link.
C. Path Construction Process
We detail the path construction process given the above
beacon format. Figure 4 provides a concrete example.
The TD Core periodically disseminates path construction
beacons to the immediate neighboring ADs, e.g., every 15
seconds. Note that there is no “previous hop” for the TD
Core for path construction beacon dissemination, the ingress
interface and previous-hop opaque ﬁeld are empty (as shown
by φ in Figure 4). As an intermediate AD receives paths from
its neighbors, it disseminates them to subsequent neighbors in
the same TD. Suppose an intermediate AD (ADi) receives
a set of paths from its upstream providers. It checks the
signatures on each of the paths, and discards any ill-formed
or unauthenticated paths with bad signatures.
For each downstream AD (ADj), the parent AD (ADi) then
chooses a (preferably maximally disjoint) path set of m paths
p1, . . . , pm, where m ≤ k. Each of these paths necessarily
originates from the TD Core and terminates at the parent
AD, ADi. For each path p, ADi considers the set of its
peering links that it will support for downstream customers
and attaches this information into the path. It then updates
Ip(i), Tp(i), and Op(i) per Equations 1 and 2, respectively.
This process continues until each AD has obtained a
set of paths originating from the TD Core and terminating
at
itself, where each link in the path is authenticated by
each ancestor AD. Each opaque ﬁeld essentially represents
a network capability given from an ancestor provider to a
customer; when these routes are used, the ancestor AD will
check the corresponding MAC to ensure that the provided path
corresponds to a path that it supports for that customer.
Once an endpoint AD receives the path construction beacon
from its providers, the endpoint AD selects up to k up-paths
and k down-paths, and signs the entire set of down-paths
and their authenticators, and uploads the down-paths to a
path lookup server provided by the trust domain to enable
reachability. To send a packet, the source AD queries the
path lookup server to ﬁnd the down-paths associated with the
destination AD and thus splice together an end-to-end route
to reach the destination. Sections VI and VII describe this
process.
VI. LOOKUP
SCION naturally enables the design of lookup protocols
with explicit scoped trust, in accordance with the same foun-
dational principles of the routing design. Trust information is
made explicit by allowing endhosts to scope name resolution,
i.e., to restrict the set of TDs responding to or involved in
the resolution process. As lookup protocols can be orthogonal
to the control-plane protocols addressed in this paper, in the
remainder of this section we only specify a basic lookup
mechanism for illustration purposes.
The SCION lookup process consists of two stages. i) An
Address Server translates a human-readable label and a TD
identiﬁer into one or more cryptographic endpoint identiﬁers
(EIDs) with their respective AD and TD memberships. Ad-
dress Servers can support queries on EIDs as well. ii) A Path
Server takes such AD and TD-membership information of an
endhost and returns the destination AD’s k down-paths. The
replies from Address Servers and Path Servers are signed by
the destination TD Core’s private key K −1
T DC to prevent attacks
akin to DNS poisoning.
We assume that knowing the identity of the TD Core implies
possession of the public key of that TD Core; this is similar
to the assumption of, e.g., browsers having ICANN’s root
public key for DNSSEC. Also, to certify the mapping between
the identiﬁer (human-readable label or EID) and the address,
each TD Core effectively maintains its own autonomous
endpoint identiﬁer space and signs a certiﬁcate authenticating
the correctness of the name lookup. Each self-certifying AD
identiﬁer (or AID), named using AIP [17], comes with a co-
signed certiﬁcate by the cores of TDs containing that AD,
attesting to the membership of the AID in each of its respective
TDs. Each AID:EID pair also contains a certiﬁcate signed by
the corresponding AID’s private key indicating that the EID
is part of that AID.
A. Address Resolution Service
Context-aware address resolution. As highlighted above,
to look up a path the source queries the local Address
219
Server with the destination identiﬁer. The destination identiﬁer
consists of a human-readable label, such as a DNS name,
and a TD identiﬁer, which defaults to that of the local TD.
The TD identiﬁer indicates the context (i.e., TD) in which
the label can be correctly interpreted. The Address Server
returns an identiﬁer indicating which AD(s) (or AIDs) serves
an endpoint associated with the label, along with which sub-
TD(s) contains the AID. Should the local Address Server not
contain the name, the server will query other TDs’ Address
Servers on the user’s behalf. Furthermore, the design settles
disputes by resolving non-TD speciﬁed addresses at the local
domain, where presumably an enforceable dispute resolution
process exists.
Namespace.
The namespace can be ﬂat or hierarchical.
For now, we assume that the service is structured similarly
to DNS: there is one canonical root server associated with
each trust domain, which can delegate the lookup to a number
of sub-servers in possible other sub TDs, until a query is
resolved. While SCION remains agnostic to the exact scheme
for human readable naming, the example of DNS provides the
most accessible example. Consider the domains ABC.us and
ABC.cn, residing within the US and CN TD, respectively. A
user within the US TD will query the local Address Server
and receive address information to ABC within the US TD.
Should the user in the US TD request ABC.cn (i.e., scoped
“cn”), the US Address Server queries the CN Address Server,
and returns this information to the user.
Address Server setup.
Every TD provides an Address
Server within its TD Core, accessible at a default address,
which will resolve the name locally if possible, or query the
appropriate external Address Server should the user specify a
different TD. To ensure that Address Servers store the latest
records, Address Servers should update their address database
whenever an endhost joins or leaves. The update information
can be provided by the endhost itself or the ADs involved. For
example, an endhost x moves from AD1 in T D1 to AD2 in
T D2 would trigger an address update event to add an entry
(AD2:EIDx)(AD2 ⊆ T D2) to the Address Server in T D2
and remove (AD1:EIDx)(AD1 ⊆ T D1) from T D1’s server
(or add a redirection pointer indicating that x is temporarily
move to AD2 such as the mobile IP solution).
Routing to Address Server.
The name resolution query
is routed using the TD identiﬁer. If the querying source is
contained in the targeted TD (T Dt), the source sends this
query directly to T Dt via one of its up-paths in this TD;
otherwise, the query is sent to the top-level TD, which then
resolves the query (possibly by querying sub-TDs or other
top-level TDs) and returns the response via the originating
up-path.
An example.
The name resolution service takes as an input
a human readable name: NE (e.g., “Ford”) and a TD Identiﬁer
C (e.g., “US”), and outputs a list of (self-certifying) AIDs
and endpoint identiﬁers (EID): each result is an AID:EID pair
constructed in a way similar to that of AIP [17]. Optionally
associated with each AID:EID pair is a hierarchical nesting
of trust domains (e.g., local, regional, and continental trust
domains) that can be used to delegate the reachability func-
tionality to sub-TDs. Speciﬁcally, a query on NE at TD C