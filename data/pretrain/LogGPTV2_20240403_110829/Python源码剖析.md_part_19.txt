第
CHAPTER
---
## Page 132
Python源码剖析
6.2
102
作，hash操作以及输出操作：
static void int print（Pyobject*object)
Pyobject* PyInt_Create(int value)
)PyIntobfect;
typedef struct tagPyIntobject
[PyIntobject]
JPyTypeCbject;
typedef struct tagPyTypeobject
typedlef
typedef
[PyTypeobject]
typedef struct tagPyobject
#aefine PyObiect_HEAD INiT(typePtr）
)Pyohiect;
define PyObject_HBAD
对象机制
PyIntobject的实现与CPython儿乎是一样的，不过没有复杂的对象缓冲机制：
但是对于类型对象，我们进行了大规模的删减。最终在类型对象中，只定义了加法操
PyObject_HEAD;
在SmallPython中，对象机制与CPython完全相同：
第6章
returml (Pyobject)object;
=
Pylntobject*
pyobject_HEAD;
HashFun hash;
AddFuni add;
PyObject_HEAb;
0,typePtr
object->refaount
struct tagPyTypeobfectttype
int
Long(*HashPun)(PyobjedE
Pyobject
一深度探索动态语言核心技术
最简单的Python模拟—
alue
AGdF
=new PyIritobject
(Pyobject
Small Python
object);
left,
Pyobject* right):
---
## Page 133
Object是一个变长对象，而SmallPython中只是一个简单的定长对象，因为Small Python
[Pystrobject]
的定位就是个演示的程序：
typedef struet tagPystrobject
PyTypeObject PyInt_Type=
static
PyObjeot PyStr_Create(const charvalue)
static
printf(edxn",intobject=>value);
PyIntobient*intobject=(PyIntobject*)object;
char valuet501:
int_add,
PyObject_HEAD_INIT(&PyType_Type)
xeturm
EyObject_HEAD;
int_print,
return
else
PyIntobiect*
object->hashvalue=-1:
object->length
"int"
Pyobject*
long int_hash(Pyobjedt·object)
exit（
(Long）(（PyIntCbject*）object)->value;
(Pyobject*)result;
result=(PyIntobject*)PyInt_Create(0):
leftInt=(PyIntObject*)left;
rightInt
=(value
(PyIntObject*)right;
NULL）O:strlem(value）;
Python源码剖析
Pyobject*right)
6.2
深度探索动态语言核心技术
对象机制
103
---
## Page 134
Python源码剖析
104
PyTypeohiect PyString_Type =
static Pyobject
statie
static void string_print(Pyobjectobjeet)
PyObjeetHEAD_INIT（&PyType_Type)
return
else
Pystringobject*leftStr=
第6章
if(result
return x;
register
printf("ss\n",strobject-
PyStringobject*strObject
return (PyobjecE)object:
memset(objeet
en
reglster
strcat(result->value,
exiE(1);
printE(we have no enough memoryl l*);
long string_hash(Eyobject*object)
X
strcpy(object->valiue,
(unsigned char
一深度探索动态语言核心技术
(Pyobject*)resulE;
最简单的Python模拟
（1000003-X）
xbuOT
-1)
XTON
string_add(Pyobject*lett,
len:
>value,0,50):
result
rightstr
char
*p++:
p:
rightStr->value);
value);
(PyStringobject*)PyStr_Create(NULL);
（PyStringobject*)left:
>value):
=(Pystringobject*)object;
Small Python
-1）
(PyStringobject*)object)
Pyobjectright)
---
## Page 135
就足够了：
而且，对于散列冲突的情况，map也没有办法解决，但是对于我们的Small Python，map
作都是基于这种映射关系的。在SmallPython中，我们基于C4+中的map来实现
PyDictobject对象在Pyhon运行时会维护变量名和变量值的映射关系，Python所有的动
static:void didt_print(Pyobject*object)
Pyobjeet*PyDict_GetItemPyObject*target
PyObject PyDiat_Create()
typedef struct
[PyDictobject]
PyDictobjeat;
/fundtion for Pybict_Type
nt
在Python的解释器工作时，还有一个非常重要的对象，PyDictobject对象。
renurn(eyobject*)obiect)
map dict;
PyObject_HEAD;
PyDict_SetItem(Fyobject*target,，Pyobject*key,
return it->second;
long KeyHashvalue=
object->tyDe=&PyDict_Type;
return 0;
(dictobject->dict)[keyashvalue)
PyDiutObjeat dictObjecE
long keyHashvalue
iE（it
string_hash
string_print.
return NULL;
"stx".
end)
Pyobject*s::iterator end =dict.end);
Pyobject*>::iterator
tagPyDictobjeot
(key->type)->hash(key):
（PyDictonject*)target)
(（PyDictobjeet*)target)->diet;
t==diat.find(keyHashvalue）
=value
Python源码剖析
Pyobject+key)
6.2对象机制
一深度探索动态语言核心技术
Pyobject*value)
105
---
## Page 136
106
6.3
ython源码剖析
错，我们叫这种动作为解释。无论如何，它至少要解析输入的语句，以判断这条语句到底
解析，没有抽象语法树的建立。但说SmalPython中有那么一点点编译的味道，其实也不
要的就是这个简单。
串查找加i.eise结构：
Python还不如回家卖红薯得了。
是要干什么，它是要上山打虎呢，还是要下河摸鱼？如果连这最基本的都做不到，Small
PyTypeobject PyDict_Type=
解释过程
第6章最简单的Python模拟—
说SmallPyhon中没有编译，对的，它根本就不会进行任何常规的编译动作，没有token
Smal Python中的对象机制的所有内容都在上边列出了，非常简单，对吧，这就对了，
然而SmalPyhon中的这种解释动作还是被简化到了极致，它实际上就是简单的字符
PyObject_HEAD_INIT(&PyType_Type),
printf("jn）;
forE
map::iterator it=（dictobjeot->dtct）-begin()
Value
=command.find(printy)string:npos)
value
it->fist):
it->second;
Small Python
0
end/=(dictobject->dict),end(:
---
## Page 137
状态。在CPyhon中，运行环境实际上也是这样一个机制。当需要访问变量时，就从这个
就是Small Pyhon中的执行环境，Small Python正是靠它来维护运行过程中的所有变量的
会得到字节码的编译结果。
Python中的解释过程。这个过程在CPyhon中是通过正常的编译过程来实现的，而且最后
以确定是否需要有一个额外的加法过程。根据这些解析的结果进行不同的动作，就是Small
现“print”，就是一个输出过程。在ExcuteAda中，还需要进行进一步地字符串搜索，
象
，其维护着SmallPyhon运行过程中，动态创建的变量的变量名和变量值的映射。这个
void ExcuteAdd(string& target, strings source)
在这里需要重点指出的是那个mLocalEnvironment，这是一个pybictobject对
通过字符事搜索，如果命令中出现“-”，就是一个赋值或加法过程：如果命令中出
else if((pos= source.fina(*+*)) = string:npos)
else if(source.find(") 1= stringt:npos)
if(lsBourceAllDigit(source))
string::size_type pos:
ExcuteAdd(target, ource);
string target = command.substr(0, pos);
(m_LocalEnvironment->type)->print(m_LocalEnvironment);
if(leftobject
Pyobject*
string
yobject
&&1eftobject->type=
Pyobject
mesultValue
rlghtobjeet):
rect
resultvalue
D
ByStr_Create(sourcesubstr(l,source.size/)-2).cst(m)
key
key
key
PyStr_Create（target.c_str(U);
PyStr
(leftobject->type)->add(leftobjeat,
TION
Pystr_Create(target.c_stx（)）
ByInit
Create(target.c_str())
rightobject->type)
Create(atoi(sourcec_str()));
Python源码剖析
6.3
深度探索动态语言核心技术
解释过程
107
---
## Page 138
Python源码剖析
6.4
108
真实而具体地看到这种机制。
机制正是CPython执行时的关键，在以后对Python字节码解释器的详细剖析中，我们将
constchar*
我们将变量名和变量值建立了联系，并存放到m_LocalEnvironment中。这种一进一出的
PyDictobject对象中查找变量的值。这一点在执行输出操作时可以看得很清楚：
交互式环境