# FIE on Firmware: Finding Vulnerabilities in Embedded Systems Using Symbolic Execution

**Authors:** Drew Davidson, Benjamin Moench, Somesh Jha, and Thomas Ristenpart  
**Affiliation:** University of Wisconsin—Madison  
**Proceedings:** 22nd USENIX Security Symposium, August 14–16, 2013, Washington, D.C., USA  
**ISBN:** 978-1-931971-03-4

## Abstract

Embedded systems increasingly rely on low-power microprocessors for security-critical applications, highlighting the need for tools to audit the security of the software (firmware) running on these devices. Despite firmware often being written in C, existing source-code analysis tools are not well-suited for this domain due to the specific architectural features of low-power platforms. We designed and implemented a new tool, FIE, which builds on the KLEE symbolic execution engine to detect bugs in firmware programs for the popular MSP430 family of microcontrollers. FIE incorporates new techniques for symbolic execution that enable it to verify security properties of simple firmware. We demonstrate FIE's utility by applying it to a corpus of 99 open-source firmware programs, using 13 different models of the MSP430. Our results show that FIE can verify memory safety for the majority of these programs and discovered 21 distinct bugs.

## 1. Introduction

Embedded microprocessors are ubiquitous, controlling critical, often Internet-connected physical infrastructure in consumer devices, automobiles, payment systems, and more. These systems typically combine a software-driven microprocessor with peripherals such as sensors and controllers. The software, known as firmware, is most often written in C. This exposes embedded systems to software vulnerabilities, and recent research has uncovered exploitable vulnerabilities in various deployed firmware programs [12, 18, 19, 21, 22, 24, 27]. These vulnerabilities were found using customized fuzz testing and manual reverse engineering, requiring significant time and expertise.

To improve firmware security, one approach is to use source-code analysis tools successful in traditional desktop and server settings. However, these tools are insufficient for analyzing firmware due to the wide range of architectures and unique characteristics of embedded systems, such as interrupt-driven control flow and continuous interaction with peripherals. This suggests the need for new analysis tools for this domain.

We address this need by building FIE, a system that uses symbolic execution to audit the security of firmware programs for the popular MSP430 family of 16-bit microcontrollers. We have used FIE to analyze 99 open-source firmware programs, supporting 13 different versions of the MSP430. Our analyses found 20 distinct memory-safety bugs and one peripheral-misuse bug.

## 2. Overview of Approach

FIE is based on the KLEE symbolic execution framework [10]. In addition to the engineering efforts required to make KLEE work for MSP430 firmware, we designed FIE to include features that make it effective for this domain. We developed a modular way to specify the memory layout of the targeted MSP430 variant, handle special memory locations related to peripherals, and manage interrupt handlers. This allows analysts to flexibly detail peripheral behavior. We provide a default specification that models worst-case behavior, enabling analysis without detailed knowledge of individual microcontrollers or peripheral components.

For small firmware programs, we aim to achieve complete analyses, checking all possible paths. However, deep or infinite loops can force the analysis to revisit previously analyzed states. To address this, we use state pruning, which detects and removes previously analyzed states. We also introduce memory smudging, which heuristically identifies loop counters and replaces them with unconstrained symbolic variables. While smudging can introduce false positives, our experiments show they are rare. Together, pruning and smudging significantly improve code coverage and support the analysis of simpler firmware programs.

## 3. Contributions

This paper makes the following contributions:
- **First Open-Source Tool for MSP430 Firmware Analysis:** We provide (to the best of our knowledge) the first open-source tool designed for automated security analysis of firmware for the widely used MSP430 microcontrollers.
- **Enhanced Symbolic Execution Techniques:** We explore the use of state pruning and memory smudging to enhance coverage and verify the absence of certain classes of bugs. FIE was able to verify memory safety for 53 open-source firmware programs.
- **Bug Discovery:** FIE found 21 distinct bugs in the firmware corpus, many of which appear to be exploitable memory-safety violations.

To perform these analyses at scale, we developed a system for managing FIE-powered analyses on Amazon EC2 [1]. The source code for FIE, the firmware corpus, and the EC2 virtual machine images and associated management scripts will be made publicly available from the first author’s website [http://pages.cs.wisc.edu/davidson/fie].

## 4. Outline

The remainder of this paper is structured as follows:
- **Section 2:** Background on embedded systems and the MSP430 family, description of the firmware corpus, and key challenges for symbolic execution.
- **Section 3:** High-level overview of how FIE works.
- **Section 4:** Detailed explanation of FIE's mechanisms.
- **Section 5:** Evaluation of FIE on the firmware corpus and discussion of the vulnerabilities found.
- **Section 6:** Limitations of FIE.
- **Section 7:** Related work.
- **Section 8:** Conclusion.

## 5. Background and Analysis Targets

### 5.1 MSP430 Microcontrollers

We chose Texas Instruments' (TI's) MSP430 family of microcontrollers as our analysis target due to its popularity. MSP430s are used in security-critical applications such as credit-card point-of-sale systems, smoke detectors, motion detectors, seismic sensors, and more [34]. Porting our approach to other similar low-power microprocessor families should be straightforward.

**Architecture and Memory Layouts:** MSP430s use a custom, but simple, RISC instruction set and have a von Neumann architecture with at least 16-bit addressing. There are over 500 different MSP430 microcontroller products, each with distinct memory layouts. For example, the MSP430G2x53 series consists of 5 different chips, with varying amounts of non-volatile flash memory and volatile random access memory.

**Hardware Peripherals:** MSP430 microcontrollers are used with both built-in and external hardware peripherals. Built-in peripherals include flash memory, timers, power management, and interfaces, while external peripherals (USB hardware, modems, sensors, etc.) must be connected via I/O pins. Accessing peripherals is done through memory-mapped I/O or special registers.

**Firmware Programming:** Most MSP430 programs are written in C using one of three compilers recommended by TI: IAR, CCS, and msp430-gcc. Each compiler provides extensions to C, but the syntax varies. We chose to base our tool on the msp430-gcc syntax due to its popularity, open-source nature, and straightforward extensions.

### 5.2 Firmware Corpus

MSP430s are used in a wide variety of security-critical applications, and the diversity of applications is reflected in the firmware programs. To have a concrete set of analysis targets and to inform the design of FIE, we gathered a corpus of 99 open-source MSP430 firmware programs.

**Cardreader:** The first firmware in our corpus is cardreader, a secure credit card reader designed for the MSP430g2553. It reads card data from a magnetic stripe reader, loads a stored cryptographic key from flash memory, and applies AES encryption before transmitting the result via UART. Cardreader is fully functional with 1,883 lines of C code and incorporates many MSP430 programming constructs that can challenge traditional symbolic-execution-based analysis.

**USB Drivers:** We also included two USB driver firmware programs, CDC Driver and HID Driver, from the TI-supplied USB developers package. These programs include a full USB code stack, with 7,453 and 7,448 lines of C code, respectively. They exercise the CDC and HID USB classes, representing different device types in the USB specification.

**Community Projects and GitHub:** To increase the size of our corpus, we searched for open-source projects on the TI MSP430 Community Projects website and GitHub. We manually crawled the website and downloaded 12 projects with Makefiles. On GitHub, we used the API to download 360 projects matching the keyword "msp430," of which we selected those with Makefiles.

## 6. Evaluation and Results

We evaluated FIE on the corpus of 99 open-source firmware programs, using 13 different versions of the MSP430. Our analyses found 20 distinct memory-safety bugs and one peripheral-misuse bug. FIE was able to verify memory safety for 53 of the 99 firmware programs, demonstrating its effectiveness in detecting and verifying security properties in real-world firmware.

## 7. Limitations and Future Work

While FIE shows promise, there are limitations to consider. State pruning and memory smudging, while effective, may not cover all edge cases. Additionally, FIE's current implementation is tailored for the MSP430 family, and extending it to other microcontroller families would require additional work. Future work could include further optimizations and broader support for different architectures.

## 8. Related Work

We discuss related work in the field of firmware analysis and symbolic execution, highlighting the unique contributions of FIE and how it addresses the specific challenges of embedded systems.

## 9. Conclusion

In conclusion, FIE is a powerful tool for analyzing the security of firmware programs for the MSP430 family of microcontrollers. By leveraging symbolic execution and introducing new techniques like state pruning and memory smudging, FIE can effectively detect and verify security properties in real-world firmware. The tool is open-source and available for public use, contributing to the broader goal of improving the security of embedded systems.