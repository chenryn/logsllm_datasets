### EXPOSE 指令
`EXPOSE`指令打开一个容器网口，用于容器与外界的通信。
`EXPOSE`指令的语法如下:
```
EXPOSE [/] [[/]...] 
```
这里，代码术语的含义如下:
*   ``:这是必须对外开放的网口。
*   ``:这是为特定传输协议(如 TCP 和 UDP)提供的可选字段。如果没有指定传输协议，则认为 TCP 是传输协议。
`EXPOSE`指令允许您在一行中指定多个端口。
以下是`Dockerfile`中`EXPOSE`指令的一个示例，该指令将`7373`端口号公开为`UDP`端口，将`8080`端口号公开为`TCP`端口。如前所述，如果未指定传输协议，则`TCP`传输被假定为传输协议:
```
EXPOSE 7373/udp 8080 
```
### LABEL 指令
`LABEL`指令使您能够将键值对作为元数据添加到 Docker 映像中。可以进一步利用这些元数据来提供有意义的 Docker 映像管理和编排。
`LABEL`指令的语法如下:
```
LABEL = = ... = 
```
`LABEL`指令可以有一个或多个键值对。虽然一个`Dockerfile`可以有多个`LABEL`指令，但是建议您使用一个带有多个键值对的`LABEL`指令。
这里有一个`LABEL`指令的例子:
```
LABEL version="2.0"  
      release-date="2016-08-05"  
```
前面的标签键非常简单，这可能会导致命名冲突。因此，Docker 建议使用名称空间来使用反向域符号来标记键。有一个名为**标签模式**的社区项目提供了共享的名称空间。共享名称空间充当映像创建者和工具构建者之间的粘合剂，以提供标准化的 Docker 映像管理和编排。以下是使用标签模式的`LABEL`指令示例:
```
LABEL org.label-schema.schema-version="1.0"  
      org.label-schema.version="2.0"  
      org.label-schema.description="Learning Docker Example"  
```
### 运行指令
`RUN`指令是构建过程中真正的主力，它可以运行任何命令。一般建议使用一条`RUN`指令执行多个命令。这减少了生成的 Docker 映像中的层，因为 Docker 系统固有地为每次在`Dockerfile`中调用指令创建一个层。
`RUN`指令有两种语法:
*   首先是外壳类型，如下所示:
```
      RUN  
```
这里，``是构建期间必须执行的 shell 命令。如果要使用这种语法，则总是使用`/bin/sh -c`执行命令。
*   第二种语法类型是`exec`或 JSON 数组，如下所示:
```
      RUN ["", "", ..., ""] 
```
这里，代码术语的含义如下:
*   ``:这是构建期间运行的可执行文件
*   `, ..., `:这些是可执行文件的变量个数(零或更多)
与第一种语法不同，这种类型不调用`/bin/sh -c`。因此，外壳处理的类型，如变量替换(`$USER`)和通配符替换(`*`、`?`)不会发生在此类型中。如果外壳处理对您来说至关重要，那么我们鼓励您使用外壳类型。但是，如果您仍然喜欢 exec (JSON 数组类型)类型，那么使用您喜欢的 shell 作为可执行文件，并提供命令作为参数。
举个例子`RUN ["bash", "-c", "rm", "-rf", "/tmp/abc"]`。
现在，让我们看几个`RUN`指令的例子。在第一个示例中，我们将使用`RUN`指令向目标映像文件系统中的`.bashrc`文件添加问候行，如下所示:
```
RUN echo "echo Welcome to Docker!" >> /root/.bashrc 
```
第二个例子是`Dockerfile`，它有在`Ubuntu 14.04`基础映像上制作`Apache2`应用映像的说明。以下步骤将逐行解释`Dockerfile`说明:
1.  我们将使用`ubuntu:14.04`作为基础映像，使用`FROM`指令构建一个映像，如下所示:
```
      ########################################### 
      # Dockerfile to build an Apache2 image 
      ########################################### 
      # Base image is Ubuntu 
      FROM ubuntu:14.04 
```
2.  使用`MAINTAINER`指令设置作者的详细信息，如下所示:
```
      # Author: Dr. Peter 
      MAINTAINER Dr. Peter  
```
3.  使用一条`RUN`指令，我们将同步`apt`资源库源列表，安装`apache2`包，然后清理检索到的文件，如下图所示:
```
      # Install apache2 package 
      RUN apt-get update && \ 
         apt-get install -y apache2 && \
         apt-get clean 
```
### CMD 指令
`CMD`指令可以运行任何命令(或应用)，类似于`RUN`指令。然而，这两者的主要区别在于执行的时间。通过`RUN`指令提供的命令在构建期间执行，而`CMD`指令指定的命令在从新创建的映像启动容器时执行。因此，`CMD`指令为此容器提供了默认执行。但是，它可以被`docker run`子命令参数覆盖。当应用终止时，容器也将与应用一起终止，反之亦然。
`CMD`指令有三种语法，如下所示:
*   第一种语法类型是 shell 类型，如下所示:
```
      CMD 
```
这里，``是 shell 命令，必须在容器启动期间执行。如果使用这种语法，那么命令总是使用`/bin/sh -c`执行。
*   第二种语法是 exec 或 JSON 数组，如下所示:
```
      CMD ["", "", ..., ""] 
```
这里，代码术语的含义如下:
*   第三种语法也是 exec 或 JSON 数组，类似于前面的类型。但是，这种类型用于设置`ENTRYPOINT`指令的默认参数，如下所示:
```
      CMD ["", ..., ""] 
```
这里，代码术语的含义如下:
`, ..., `:这些是`ENTRYPOINT`指令的变量个数(零或更多)，这将在下一节中解释。
在语法上，您可以在`Dockerfile`中添加多个`CMD`指令。但是，构建系统将忽略除最后一条指令之外的所有`CMD`指令。换句话说，在多个`CMD`指令的情况下，只有最后一个`CMD`指令有效。
这里，在这个例子中，让我们使用`Dockerfile`和`CMD`指令创建一个映像，用于提供默认执行，然后使用创建的映像启动一个容器。以下是`Dockerfile`用`CMD`指令给`echo`的一段文字:
```
######################################################## 
# Dockerfile to demonstrate the behavior of CMD 
######################################################## 
# Build from base image busybox:latest 
FROM busybox:latest 
# Author: Dr. Peter 
MAINTAINER Dr. Peter  
# Set command for CMD 
CMD ["echo", "Dockerfile CMD demo"] 
```
现在，让我们使用`docker build`子命令和`cmd-demo`作为映像名称来构建 Docker 映像。`docker build`系统将从当前目录(`.`)中存储的`Dockerfile`读取指令，并相应地制作映像，如下所示:
```
$ sudo docker build -t cmd-demo .
```
构建好映像后，我们可以使用`docker run`子命令启动容器，如下所示:
```
$ sudo docker run cmd-demo
Dockerfile CMD demo  
```
很酷，不是吗？我们已经给了我们的容器一个默认的执行，我们的容器忠实地响应了`Dockerfile CMD demo`。但是，通过将另一个命令作为参数传递给`docker run`子命令，可以轻松覆盖此默认执行，如下例所示:
```
$ sudo docker run cmd-demo echo Override CMD demo
Override CMD demo 
```
### ENTRYPOINT 指令
`ENTRYPOINT`指令将有助于在容器的整个生命周期中为运行应用(入口点)创建一个映像，该映像将从映像中分离出来。当入口点应用终止时，容器也将与应用一起终止，反之亦然。因此，`ENTRYPOINT`指令将使容器像可执行文件一样运行。在功能上，`ENTRYPOINT`类似于`CMD`指令，但两者之间的主要区别在于，入口点应用是使用`ENTRYPOINT`指令启动的，不能使用`docker run`子命令参数覆盖。但是，这些`docker run`子命令参数将作为附加参数传递给入口点应用。说到这里，Docker 提供了一种通过`docker run`子命令中的`--entrypoint`选项覆盖入口点应用的机制。`--entrypoint`选项只能接受单词作为参数，因此功能有限。
在语法上，`ENTRYPOINT`指令与`RUN`和`CMD`指令非常相似，它有两种语法，如下所示:
*   第一种语法是 shell 类型，如下所示:
```
      ENTRYPOINT  
```
这里，``是 shell 命令，在容器启动时执行。如果使用这种语法，那么命令总是使用`/bin/sh -c`执行。
*   第二种语法是 exec 或 JSON 数组，如下所示:
```