Here comes a technical challenge, which is to devise an efficient
way to apply features extracted from known security patches to
insecure code snippet discovery from Stack Overflow. We introduce
the process of discovering insecure code snippets by applying the
three features extracted in section 3 to each element (i.e., description,
comments, and code snippets) of a Stack Overflow post.
Analyzing descriptions and comments. When confirming
that the diffs of descriptions and comments are related to a secu-
rity patch, we can check whether security-related keywords (F2) are
included in the diffs. However, this simple method can yield many
false positives. For example, “fix” is one of the most frequently used
keywords in security patches, but it can also be used to explain a
non-security change (e.g., one of the commit messages from Redis2
is “Fix typos in comments and improve readability”).
Instead, we classified the selected keywords into three categories:
nouns, verbs, and modifiers. Thereafter, Dicos checks if a security-
related keyword pair is included within each sentence of the diffs
in post description or comments; here, a security-related keywords
pair is defined either (noun, verb) or (modifier, verb). In other words,
we determine that the keyword is matched only when the specific
target and the behavior of the target are both related to security.
Checking the existence of a security-related keyword pair is
conducted using a simple string inclusion operation. To prevent
matching failures caused by the difference between uppercase and
lowercase, Dicos replaces all characters in descriptions, comments,
and keywords to lowercase when performing string matching opera-
tions (the selected security-related keywords and their classification
are listed in Table 9 in Appendix B).
One consideration is that if the purpose of a specific post is to re-
solve a security issue, the description may contain security-related
keywords from the time the post was created, even though the
contained code snippet was safe. Therefore, Dicos only considers
cases where a security-related keyword pair is included only in
diffs: that is, if a security-related keyword pair exists in the post
description when the post originated, Dicos determines that this
post does not contain the security patch pattern. As a representative
example, we introduce post #441841523 (i.e., "How to avoid if/else
if chain when classifying a heading into 8 directions?").
Listing 3: Patch for the insecure code snippet in post #44184152.
1 Dir GetDirForAngle(int angle)
2 {
3
const Dir slices[] = { RIGHT, UP_RIGHT, UP, UP, UP_LEFT,
LEFT, LEFT, DOWN_LEFT, DOWN, DOWN, DOWN_RIGHT, RIGHT };
- return slices[(angle % 360) / 30];
+ return slices[(((angle % 360) + 360) % 360) / 30];
4
5
6 }
Listing 4: Added comments and descriptions in post #44184152.
• User’s comment: ...this wouldn't work for negative inputs because
angle % 360 returns a negative value when angle is negative.
• Answerer’s decription: Fixed math to handle negative angles...
2https://github.com/redis/redis
3https://stackoverflow.com/questions/44183771
CS1CS2CS3* CS = Code SnippetCode snippetsof a postCS1CS2CS3function1the rest of CS1function2the rest of CS2CS3Generating new code snippetsby extracting functionsOLDESTMax Sim.Pairing based on similarity scorefunction1the rest of CS1function2the rest of CS2CS3LATESTfunction2’the rest of CS1function1’the rest of CS2CS3199Dicos: Discovering Insecure Code Snippets from Stack Overflow Posts by Leveraging User Discussions
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
The original code snippet in the answer post was insecure because
the “angle % 360” could be negative (see Listing 3). The code snippet
was modified by a user’s comment, and the answerer included
details about the change in the description part (see Listing 4).
Dicos can identify that this is a security-related change by checking
whether a security-related keyword is included in the diffs of
descriptions: the verb “fix” and the modifier “negative” are included
in one sentence of the added description.
Analyzing code snippets. Dicos uses F1 and F3 (i.e., changes in
security-sensitive APIs and control flows) to analyze code snippets
in Stack Overflow posts; the selected APIs are listed in Table 7 (for
C/C++ posts) and Table 8 (for Android posts) in Appendix A.
To analyze changes in security-sensitive APIs (F1), Dicos con-
siders the diff of code snippet that extracted in subsection 4.1,
especially the deleted source code lines. If any delete code lines
contain a security-sensitive API, Dicos determines that the change
history of the post contains a security patch. As an example, we
introduce post #7000184 (i.e., “Display the binary representation of
a number in C?”) where F1 was detected.
+ char *pbuff = buff;
..
/* Special case for zero to ensure some output. */
if (val == 0) {
Listing 5: A patch snippet contained in post #700018.
1 static char *binrep (unsigned int val, char *buff, int sz) {
2
3
4
5
6
7
8
9
10
11 ..}
strcpy(buff, "0");
char *pbuff = buff;
*pbuff++ = ‘0’;
*pbuff = ‘\0’;
-
+
+
+
return buff;
The patch shown in Listing 5 was applied to prevent a possible
buffer overflow; as the strcpy function has been deleted in line #6,
Dicos can identify that the change is related to security.
Next, to analyze changes in control flows (F3), Dicos first extracts
control flows and all conditional statements from both the paired
code snippets (e.g., we can use the robust parser Joern [31] to extract
these pieces of information). Dicos then checks whether the diffs
of the code snippet contains a change in control flows or conditional
statements. Specifically, Dicos considers both (1) a change in the
direction of control flows (e.g., adding if statement) and (2) a change
in the conditions of each conditional statement even though the
direction of control flows remains unchanged (e.g., changing a
condition in an if statement). For example, we introduce post
#744822 (i.e., “How to compare ends of strings in C?”) where F3 was
detected5.
Listing 6: A patch snippet contained in post #744822.
1 int EndsWith (const char *str, const char *suffix) {
2
3
4
5
6 ..}
+ if (!str || !suffix)
+
size_t lenstr = strlen(str);
size_t lensuffix = strlen(suffix);
return 0;
By applying this patch (Listing 6), the answerer tried to prevent
possible errors by adding a null check for the str and suffix
4https://stackoverflow.com/questions/700018
5https://stackoverflow.com/questions/744822
variables. Dicos can determined that this change is a security patch
as the control flow was obviously changed.
4.3 Determining insecure code snippets
Dicos discovers insecure code snippets based on the analysis results
using the selected features (F1, F2 and F3) in subsection 4.2. For
more accurate detection, Dicos defines insecure posts as posts in
which two or more features appear simultaneously. This is because,
we confirmed that the post in which only one feature appeared,
especially for F1 and F3, is more likely to be modified to simply
change the functionalities, rather than resolving a security issue.
Finally, Dicos determines that the code snippet contained in the
discovered insecure posts is an insecure code snippet.
Unlike existing approaches, Dicos does not depend on a single
feature but uses a combination of effective features and does not
consider only specific security issues but can cover various security
issues by using multiple security-related keywords and security-
sensitive APIs along with considering a change in the control flows.
Furthermore, the design of Dicos is applicable to any programming
language, and all processes of Dicos can be conducted in an au-
tomated manner. Consequently, Dicos can discover insecure code
snippets with high accuracy compared to existing approaches (see
subsection 5.3).
5 EVALUATION
In this section, we evaluate Dicos. subsection 5.1 introduces the
collected dataset and the implementation of Dicos. subsection 5.2
investigates how accurately Dicos can discover insecure code snip-
pets in practice. We then compare Dicos with existing approaches [7,
23] in subsection 5.3, thereby demonstrating the effectiveness of
Dicos. subsection 5.4 examines the effectiveness of the techniques
utilized in Dicos, and subsection 5.5 measures the performance of
Dicos. We evaluated Dicos on a machine with Ubuntu 18.04.4 LTS,
an Intel i5-6600 CPU @ 3.30GHz, 24GB RAM, and a 1TB SSD.
5.1 Dataset and implementation
We first introduce the dataset collection methodology and the im-
plementation of Dicos.
Dataset. We preferentially evaluate Dicos using the C, C++,
and Android related posts, since the reuse of small pieces of code
is prevalent in the software [7, 11, 27, 28]. It should be noted that
the design of Dicos can be applied to any programming language.
We used the SOTorrent dataset [2] which is available at Google
BigQuery [19], as the SOTorrent dataset provides well-constructed
Stack Overflow posts. We utilized the latest released version, i.e.,
“2020-12-31” (4.4GB). We then extracted all Stack Overflow answer
posts tagged with C, C++, and Android, which contain at least
one code snippet, and extracted a total of 1,958,283 Stack Overflow
answer posts (i.e., 987,367 C/C++ and 970,916 Android posts). As
Dicos focuses on the change history of each post, every post should
contain at least one change history. Among all the posts collected,
668,520 (34%) satisfied this condition.
As a result, our dataset for the evaluation consisted of 668,520
posts, which contained an accumulation of 1,514,547 code snippets
(i.e., averaged two or three code snippets per a post).
200ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Implementation. Dicos comprises the following two modules:
a post collector and a post analyzer. The post collector collects Stack
Overflow posts and extracts the change history in descriptions,
comments, and code snippets for each post. In the code snippet
pairing process, we set the θ value as 0.3 (see subsection 4.1).
The post analyzer analyzes the collected posts based on the
selected features in section 3, and then discovers insecure code
snippets. When analyzing the code snippets provided in the form of
a C/C++ function, Dicos utilizes Ctags [6] and a Joern parser [31].
In particular, Dicos first extracts a function from the code snippets
with Ctags, and then generates a code property graph of the ex-
tracted function using the Joern parser, from which it can obtain the
control flows and contained conditional statements of the function.
For the code snippets provided in the form of a set of code lines,
Dicos identifies control flows and conditional statements based on
regular expressions, because Ctags and the Joern parser can only
be applied to a function unit. Unlike Ctags, which are applicable
to all languages, the Joern parser can only be applied in C/C++
languages. Therefore, we utilized the combination of Ctags and
regular expressions for analyzing Android code snippets.
Dicos is implemented on approximately 800 lines of Python code
excluding for the external libraries. The source code of Dicos is
available at https://github.com/hyunji-hong/DICOS-public.
5.2 Discovery accuracy of Dicos
To evaluate accuracy, we analyzed the insecure code snippet dis-
covery results of Dicos on real-world Stack Overflow posts.
Methodology. We applied Dicos to our dataset of 668,520 Stack
Overflow posts, and measured the accuracy of Dicos. Specifically,
we verified whether the insecure posts discovered by Dicos actually
contain insecure code snippets, and whether the posts that were de-
termined as secure by Dicos do not contain insecure code snippets.
To evaluate the accuracy of Dicos, we used the following seven
metrics: true positives (TP), false positives (FP), true negatives (TN),
false negatives (FN), precision(cid:0)
#TP + #FP + #TN + #FN(cid:1).
accuracy(cid:0)
#TP + #TN
#TP + #FP(cid:1), recall(cid:0)
#TP
#TP + #FN(cid:1), and
#TP
Accuracy measurement.
In our experiments, Dicos discov-
ered 12,458 insecure posts (a total of 14,719 insecure code snip-
pets) out of 668,520 collected posts; 8,941 insecure posts tagged
with C/C++, and the remaining 3,517 insecure posts tagged with
Android.
Among the 12,458 insecure posts, we observed that 788 inse-
cure posts contained all three selected features (F1, F2, and F3, see
section 3), and the remaining 11,670 insecure posts contained two
of the selected features. In fact, it is very challenging to verify all
discovery results manually. Instead, we initially selected the top
posts with the highest number of votes and measured the accuracy
of Dicos by analyzing the selected posts. This is because we deter-
mined that they had a greater impact on the software development;
such posts may obtain more users’ attention and are more likely to
spread to other software. In addition, we analyzed a group consists
of randomly selected insecure code snippets discovered by Dicos
to avoid giving a biased result in the number of votes. Finally, the
five groups selected for accuracy measurement are as follows.
Hyunji Hong, Seunghoon Woo, and Heejo Lee
Table 3: Accuracy measurement result of Dicos for C/C++
posts.
704
171
82
n/a n/a 151
n/a n/a 92
957
243
ID #Posts #TP #FP #TN #FN
731
27 n/a n/a
G1
200
29 n/a n/a
G2
100
18 n/a n/a
G3
49
200
G4
8
100
G5
Total 1,331
57
0.93
Precision
0.94
0.90
Accuracy
Recall
74
Table 4: Accuracy measurement result of Dicos for Android
posts.
53
175
80
n/a n/a 167
n/a n/a 93
260
308
ID #Posts #TP #FP #TN #FN
57
4
n/a n/a
G1
200
25 n/a n/a
G2
100
20 n/a n/a
G3
200
33
G4
100
7
G5
40
657
Total
0.86
Precision
0.89