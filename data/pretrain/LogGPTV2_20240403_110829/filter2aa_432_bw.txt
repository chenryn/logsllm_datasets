S:   >documentation
S:   has been included with this distribution. For documentation
S:   and information on Red Hat
S:   Linux, please visit the web site of Red
S:   Hat Software. The manual for Red Hat Linux is available here.
S:   
S:   
S:   You are free to use the image below on an Apache-powered web
S:   server.  Thanks for using Apache!
S:   
S:   
S:   
- 294 -
Linux网络编程
S:   
S:   You are free to use the image below on a Red Hat Linux-powered web
S:   server. Thanks for using Red Hat Linux!
S:   
S:   
S:   
S:  
S: 
Connection closed by foreign host.
[zixia@bbs zixia]$ _
我们这样使用的时候，记得在 GET 和 URL 中间一定要有空格，在 URL 和 HTTP/1.0
中间也要留有空格。而且最后一定要按两下回车，也就是要多出一个空行来。（这些都是
HTTP 协议所规定的格式）
注：上面的信息可能由于各种原因（比如你的机器的 WWW ROOT 目录不同）而不同，
但是取得页面的方法是一样的。
这个例子中，是我们自己连接的 Web 服务器（而不是 Web 浏览器），我们首先连接到
了 Web 服务器的 80 端口，然后发送一条请求某个页面的命令（ GET … ），并在后面附
上了协议的版本号（ HTTP/1.0 ）。然后服务器的应答发送给我们一条消息：200 OK。200
代表一切正常，没有发现错误。这条应答下面的信息是符合 RFC 822 的说明 MIME 的信息。
下面跟着一行空白，代表 HTTP 信息头结束，空白下面的就是你所请求的页面数据了。Web
服务器如果想发送一个图片，那么 MIME 的信息头可能是下面这样：
Content-Type: Image/GIF
通过这个方法，使用 MIME 类型可以允许通过 HTTP 协议传送不同的文件类型。
HTTP 浏览器可以同时支持其他协议，比如 FTP，GOPHER 等协议。但是在浏览器上
支持他们可能会使浏览器代码体积变的蠢笨。HTTP Proxy 可以解决这个问题。现在来说，
大多数使用者只是在通过 HTTP Proxy 传递 HTTP 中转指令（比如教育网内，出国要收费，
所以大多数时候人们都是通过 HTTP Proxy 来浏览国外的 Web 站点）。但是 Proxy 有另外一
个用处就是它可以帮助 Web 浏览器来传输 FTP，Gopher 站点，而浏览器并不用再去支持
FTP，Gopher 协议（图 14-2）。
这样，我们就可以使用浏览器来浏览一般情况下浏览器所不支持的协议站点。浏览器
所能够浏览的范围通过 Proxy 的支持变的更加宽广了。当然，这样的 Proxy 需要支持各种
各样的协议。
HTTP 的 Proxy 服务器还支持缓存。它的意思是如果你曾经通过 Proxy 传输过一个页
面（或是一个多媒体文件），则 Proxy 会将数据存放在它的缓存区中。当你以后在去取相同
的页面（或是多媒体文件）的时候，Proxy 服务器就会在它的缓存区中发现这个文件，可
以直接将缓存中的数据发送给你。这样就节省了在去其他服务器取页面（或多媒体文件）
的时间和带宽。
代理服务器还可以做访问限制。这点特性可以方便的控制一个局域网内部的访问范
围。比如一个学校内部通过一个 Proxy 上网，那么学校就可以设置 Proxy 不允许访问一些
第 14 章  www 上 http 协议
- 295 -
站点（比如HTTP://www.playboy.com ）。这样当一个浏览器向 Proxy 发送一个取得信息的
请求，Proxy 服务器可以自己做出判断，从而决定是否允许这个请求。
图 14-2  HTTP Proxy 服务器
14.2.4 HTTP –  HyperText Transfer Protocol 超文本传输协议
标准的 Web 传输协议是 HTTP 协议（HyperText Transfer Protocol）。它定义每一次交互
过程都是一个字符请求，然后紧跟着由 RFC 822 MIME 的应答。虽然使用 TCP 连接进行
传输数据非常常用，但是 HTTP 协议也可以使用 TCP 协议以外的连接。
HTTP 还在发展之中，现在正在使用的有好几种 HTTP 协议，而且还有其他的版本正
在开发之中。下面我们将要谈论的 HTTP 协议，是那些最基本的，并且已经基本决定下来
不再做变更的一些命令（需要注意的是各个版本之间可能会有一些很小的区别）。
HTTP 协议清楚的分为两部分：从浏览器向服务器发送的请求集合和服务器送往浏览
器的应答集合。下面我们分别讨论他们：
所有新版本的 HTTP 协议支持两种不同的请求格式：
简单请求方式和完全请求方式。
简单请求方式：它发送的请求数据的字符串只包含一个 GET 行，指明要取的页
面地址。没有注明 HTTP 协议的版本号。它所获得的服务器的回应数据只包含它所请求页
面的数据，没有任何 HTTP 信息头，也没有 MIME 信息。想对它进行测试的话，你可以试
试 telnet zixia.citf.net 80 然后输入 GET /index.html 但是并不在 GET 的末尾输入 HTTP 协议
的版本号。返回的页面将不包含任何的 HTTP 信息头和 MIME 信息说明，直接就是你所期
望的页面的数据。
完全请求方式：它在发送请求页面的 HTTP 信息的时候，在 GET 命令行的末尾
要添加上 HTTP 协议的版本号。请求信息可以包含很多行的数据，最后跟着的是一个空行，
代表 HTTP 请求数据头的结束。完全请求方式的第一行是包含命令的一行（这一行中的命
令以 ＂GET＂ 最常见，但是它也可以是其他命令），后面跟着你想得到的页面的地址，
最后是 HTTP 协议的版本号。在后面的行中是在 RFC 822 中定义过的其他信息。
虽然 HTTP 协议是由使用 WEB 而被设计出来的，但是现在它已经发展到了很多领域，
所以它在定义的时候就为将来的使用多定义了一些命令。在完全请求方式中，第一行的第
- 296 -
Linux网络编程
一个单词被称为＂方法＂（ Method 或 Command ），它用来定义对 Web 的访问方法。当
你需要获取一个页面的时候，你可以根据需要使用各种 HTTP 协议的＂方法＂。下面给出
几个＂方法＂的列表，注意他们是区分大小写的。
表 14-1  HTTP 方法
方法
方法的描述
GET
发出读取一个 Web 页面的请求
HEAD
发出读取一个 Web 页面头部的信息
PUT
发出存储一个 Web 页面信息的指令
POST
为一个已经被命名的文件添加信息
DELETE
删除一个 Web 页面
LINK
连接上两个存在的资源
UNLINK
将已经连上资源的连接终止
GET 方法
GET 方法向服务器发出获取一个页面的请求（或是将“ 页面” 换成“ 实体”，这样可
以代表更一般的情况），要得到经过 MIME 编码的数据。如过在 GET 命令后面加上一个
“ If-Modified-Since” 信息头，则服务器只发送在指定的日期后有改动过的数据。使用这种
机制，浏览器可以查询是否服务器上面存放的页面比自己的缓存区中存放的页面新，从而
决定是否去从新下载。
HEAD 方法
HEAD 方法只向服务器请求信息头，并不请求真正的数据。这个帮法可以帮助浏览器
得到页面的一些信息（比如最后更新日期），收集服务器页面上的索引，或者只是用来测
试是否存在这个页面。
PUT 方法
PUT 方法和 GET 方法正好相反，它不是读取一个页面，而是写入一个页面。这个方
法可以帮助你在远程机器上面建立页面。它的后面跟着真正的数据信息（允许进行 MIME
编码），而这些信息将被服务器写入磁盘（如果允许的话）。PUT 的 MIME 编码和 PUT 一
样。
POST 方法
POST 方法和 PUT 方法有些相仿。但是不同的是，POST 方法是将信息＂添加＂到以
有页面后（可以作为参数），而 PUT 是＂替换＂或＂新生成＂一个页面。将一条信息 POST
到新闻组或向 WEB 的讨论区添加一篇文章都是 POST 方法的例子。
DELETE 方法
也许你已经猜到了⋯ ⋯  DELETE 方法删除一个页面。像 PUT 一样，它需要身份认证
和服务器对这个身份的授权。使用这个命令要特别注意，没有任何迹象会告诉你 DELETE
操作成功。即使远程的 Web 服务器已经同意你进行 DELETE 操作，也不一定会成功。因
为文件可能拥有 Web 服务器无法删除的模式。
LINK 和 UNLINK方法
它们允许你在从一个页面连接到另外一个页面。
每一个请求都得到一个包含状态信息的回应，也许还有附加的信息。（比如：页面的
第 14 章  www 上 http 协议
- 297 -
全部或是它的一部分）状态信息可能是 200 代码（代表一切正常，未发生错误），或是其
他的错误代码（比如 304：未更改；400：无效请求；403：禁止访问）。
HTTP 的标准描述信息头和信息体的详细定义可以参考 RFC 822 MIME 信息。
14.3 Web编程
我们现在已经了解一个访问 WWW 的浏览器是如何于一个 Web 服务器进行交互的了。
那么我们就可以借助以前我们将的套接字编程，自己来写一个简单的 WWW 浏览器程序。
浏览器程序介绍：
使用方法：www_client Web_Server_Host
显示：它只能将 HTML 原码显示出来，所以实际上，它应该叫做 WWW 超文本
原码浏览器。
www_client.c 源码：
#include 
#include 
#include 
#include 
#include 
#include 
#include 
/* 建立一个 HTTP TCP 连接的辅助函数 */
int
htconnect (char *domain,int port )
  {  
int white_sock;
struct hostent * site;
struct sockaddr_in me;
site = gethostbyname(domain);
if (site==NULL)
{
return -2;
}
white_sock = socket (AF_INET, SOCK_STREAM, 0 ) ;
if (white_sockh_addr_list[0],site->h_length);
me.sin_family = AF_INET;
me.sin_port = htons(port);
return
(connect (white_sock,(struct sockaddr*)&me,sizeof(struct sockaddr))0)
{
printf(“%c”,bugs_bunny[0]);
}
close(black_sock);
  }
下面我们来编译这个程序：
root@bbs#gcc –o www_client www_client.c
root@bbs#_
我们来执行它：
root@bbs#www_client localhost
在我的 RedHat 6.0 的机器上，它将会连接到自己的 80 端口，而缺省的 RedHat 的 Web
页面是 Apache Web 服务器的测试页，在我的机器上面显示结果大致如下：
root@bbs# ./www_client localhost
HTTP/1.1 200 OK
Date:
Fri, 23 Jul 1999 20:22:56 GMT
Server: Apache/1.3.6 (UNIX)  (Red Hat/Linux) mod_perl/1.19
Last-Modified: Wed, 07 Apr 1999 21:17:54 GMT
ETag: "d5802-799-370bcb82"
Accept-Ranges: bytes
Content-Length: 1945
Connection: close
Content-Type: text/html
Test Page for Red Hat Linux’s Apache Installation
<BODY
BGCOLOR=”#FFFFFF”
TEXT=”#000000”
LINK=”#0000FF”