![批注 2020-03-16 164628](/assets/批注%202020-03-16%20164628.png)
#### 一个通过消息队列实现最终一致性的案例
反诈项目目前有两个网，一个是公安网，一个是反诈内网，这两个互相隔离的网络，要想进行数据交互，就必须通过数据摆渡服务器来进行，泉州这边基础设施比较完善，可以通过 Kafka 来进行数据摆渡，像别的地方比较落后的，基本上都是通过 FTP 服务器来进行。
这个需求是这样的，数据需要从反诈内网的一个系统发送到公安网的另外一个系统。为了达到两边数据的一致性，就必须引入一些机制来保障。
消息队列使用的是 Kafka。
首先要考虑生产者的消息可靠性投递：
1. 向 Kafka 发送数据要等待 Kafka 的 ack 确认，保证 Kafka 那边接收到
2. 发送数据的同时通过本地事务写消息表，后续发送失败会通过这个消息表不断重试，成功后再删除消息记录
Kafka 需要保证的是数据不丢失，由于 Kafka 是先写到缓存后面再统一刷盘，所以极端情况下像断电是有可能导致 broker 丢数据，使用 min.insync.replicas 来进一步降低丢数据的风险。
最后是消费者的可靠性消费：
1. 配置手动签收数据，避免数据落库前消费者出现什么错误丢数据
2. 做好重复消息消费幂等性处理，这点是通过使用数据库的唯一约束来保障的，一旦唯一 ID 重复，异常就能被捕获，如果传递过来的数据没有 ID，这边就能通过 预警时间 + 手机号 + 数据来源的方式来唯一生成一个ID
除了以上机制外，生产者那边也会定期发送反诈内网的那边的数据总量，接入到公安网这边的监控系统，公安网这边会定期巡检，如果发现两边数据量不一致，就需要让人工介入排查了
### SAGA
（消息驱动的本地事务序列）
通过将事务拆分为一系列正向原子操作T1 T2 ... TN
与一系列的补偿原子操作：C1 C2 ... CN
这些操作都必须保证是幂等的，当事务发生失败，可以采取两种策略：
1. 正向恢复 不断重试T 直至成功
2. 反向恢复 反向执行补偿操作 将数据恢复至原始状态
#### 使用SAGA维护一致性
![使用SAGA完成一个跨服务的订单创建](/assets/屏幕截图%202021-01-21%20111838.png)
每一步所产生的子事务都会被写入数据库，必须通过补偿事务的方式来进行回滚。这样的事务缺少隔离性
#### 协作模式
协同式：事务的决策和执行逻辑分布在每个参与方中
![协同式](/assets/屏幕截图%202021-01-21%20112848.png)
编排式：决策和执行逻辑集中在编排器类，由该中心指挥各个参与方
![中心编排](/assets/屏幕截图%202021-01-21%20141422.png)
为避免编排器类含有过多的业务逻辑，可通过设计只负责排序的编排器解决这个问题。
#### 实现隔离性
saga包含三种事务类型：
- 可补偿事务
- 关键性事务：执行成功，则saga将一直运行到完成
- 可重复事务
对策：
- 语义锁：通过对数据设置一个PENDING状态避免其他事务修改
- 交换式更新：类似于git版本管理，使用新增数据的方式撤销更新
- 悲观视图：对事务操作重排序，以降低脏读导致的风险
- 重读值：通过重读验证数据未被修改
- 版本文件：通过记录对数据执行的操作，以将不可交换的操作转换为可交换操作
- 业务风险评级：只在低风险业务应用saga
## LCN
### 原理
![2020311161130](/assets/2020311161130.png)
### 使用
- 启动tx-manager
#### 客户端
- 依赖
```xml
    com.codingapi.txlcn
    txlcn-tc
    5.0.2.RELEASE
    com.codingapi.txlcn
    txlcn-txmsg-netty
    5.0.2.RELEASE
```
- 配置
```java
@EnableDistributedTransaction
```
- 使用
发起者
```java
@LcnTransaction
@Transactional(rollbackFor = Exception.class)
public void consume(){
    jdbcTemplate.update("INSERT INTO tb_order VALUES(1,1,'test')");
    String result = producerRemote.home();
}
```
参与者
```java
@LcnTransaction
@Transactional(rollbackFor = Exception.class)
public String home() {
    jdbcTemplate.update("UPDATE stock SET stock = stock -1 WHERE product_id = 1");
    return name+port;
}
```
### 集群
- 启动多台tx-manager
- 发起者与参与者配置地址
```properties
tx-lcn.client.manager-address=127.0.0.1:8070,127.0.0.1:8071
```