 "&lt##Check Boxes##Check 1:C>\n"     //A checkbox field with a box title  
 "&ltCheck 2:C>>\n";                  //Last checkbox in group  
                                    //ushort* bitmask of checks
通过格式化对话框元素，每行一个元素，可以将每个字段说明符与它们在图 17-6 中对应的字段轻松地对应起来。你可能注意到，在图 17-6 中，所有文本和数字输入字段均以下拉列表的形式出现。为了帮助你节省时间，IDA 用最近输入的值（其类型与相关输入字段的类型相匹配）填写了每个列表。下面的插件代码可用于显示上面的示例对话框并处理任何结果：
void idaapi button_func(TView *fields[], int code) {  
   msg("The button was pressed!\n");  
}  
void idaapi run(int arg) {  
   char input[MAXSTR];  
   sval_t dec = 0;  
   uval_t hex = 0xdeadbeef;  
   ushort radio = 1;      //select button 1 initially  
   ushort checkmask = 3;  //select both checkboxes initially  
   qstrncpy(input, "initial value", sizeof(input));  
   if (AskUsingForm_c(dialog, input, &dec, &hex,  
                      button_func, &radio, &checkmask) == 1) {  
      msg("The input string was: %s\n", input);  
      msg("Decimal: %d, Hex %x\n", dec, hex);  
      msg("Radio button %d is selected\n", radio);  
      for (int n = 0; checkmask; n++) {  
         if (checkmask & 1) {  
            msg("Checkbox %d is checked\n", n);  
         }  
         checkmask >>= 1;  
      }  
   }  
}
注意，在处理单选按钮和复选框结果时，每组中的第一个按钮被视为“按钮 0”。
AskUsingForm_c
 函数有相当强大的功能，可用于为你的插件设计用户界面元素。这里的例子只是粗略介绍了这个函数的许多功能，kernwin.hpp文件详细介绍了更多其他功能。请参阅这个文件，了解有关 AskUsingForm_c
 函数及其功能的详细信息。
17.6.3 仅用于Windows的用户界面生成技巧
许多开发者一直在全力应付为插件创建用户界面的难题。针对IDA 的Windows GUI 版本（idag.exe ）的插件可以使用所有 Windows 图形API。Tenable Security 的mIDA2
 插件的作者设计了另一种方法，可用于创建mIDA插件使用的 MDI3
 客户窗口。为解决 mIDA开发者面临的挑战，IDA 支持论坛提供了一个超长的线程4
 。该线程还包含示例代码，说明他们的解决方案。
2. 参见http://cgi.tenablesecurity.com/tenable/mida.php
 。
3. Windows 多文档界面（MDI ）允许在一个容器窗口中包含多个子（客户）窗口。
4. 参见http://www.hex-rays.com/forum/viewtopic.php?f=8&t=1660&p=6752
 。
ida-x86emu5
 插件使用的用户界面与其他插件稍有不同。这个插件使用下面的 SDK 代码获得IDA 主窗口的一个句柄：
5. 参见http://www.idabook.com/ida-x86emu
 。
HWND mainWindow = (HWND)callui(ui_get_hwnd).vptr;
ida-x86emu 现在并没有整合到 IDA 工作区中，只是使用 IDA 主窗口作为父窗口。这个插件的所有对话框界面全都使用 Windows 资源编辑器生成，所有用户交互则通过直接调用 Windows API 函数来处理。使用图形对话框编辑器并直接调用本地 Windows API函数，可以实现最强大的用户界面生成功能，但这种方法非常复杂，而且需要使用者了解其他一些知识，如处理Windows消息以及使用低级的界面函数。
17.6.4 使用Qt 生成用户界面
IDA 6.0 中引入的 Qt 用户界面为插件开发者创建具有复杂用户界面、可用于所有IDA 平台的插件提供了机会。Hex-Rays 的Daniel Pistelli6
 在Hex-Rays 博客上的一篇文章中讨论了在插件中使用Qt 的一些要求。7
 在这一节中，我们将重申Daniel 提出的一些要点，并提供其他一些有用信息。
6. Daniel 负责Hex-Rays 将IDA 的GUI 迁移到Qt 的工作。
7. 参见http://www.hexblog.com/?p=250
 。
如果你希望在插件中利用Qt的任何功能，首先你必须正确配置Qt开发环境。IDA 6.1 附带有自己的Qt 4.7.2库8
 。Hex-Rays建立自己的Qt库时，它将该库包装在一个名为QT
 的C++ 命名空间中。要配置你的开发环境，请从Nokia 获取适当的Qt源代码。Windows 版本的idaq 使用Visual Studio 2008创建9
 ，Linux 和OS X版本的则使用g++ 创建。请从以下地址下载Windows版本的源代码：
8. IDA 6.0 使用Qt 4.6.3。
9. 因此，如果要在Windows 上创建Qt 相关的插件，你必须使用Visual Studio来创建你的插件。
ftp://ftp.qt.nokia.com/qt/source/qt-win-opensource-4.7.2-vs2008.exe
请从以下地址下载 Linux和OS X版本的源代码：
ftp://ftp.qt.nokia.com/qt/source/qt-everywhere-opensource-src-4.7.2.tar.gz  
请参阅Daniel 的博客文章了解用于配置源代码的特定命令。正确配置的关键在于使用以下命令行参数：
-qtnamespace QT
此参数将 Qt源代码包装在 QT
 命名空间中。要在 Windows 上创建任何Qt 相关插件，你需要将在插件中用到的每个 Qt 库的链接库（.lib 文件）。虽然 IDA 附带了大量Qt 动态链接库（参见 目录了解完整列表），但 SDK 附带的用于 Windows 的Qt 链接库的数量非常有限（主要包括QtCore4和QtGui），这些库可以在/lib/x86_win_qt目录中找到。如果你需要其他链接库，你需要链接到你自己从Qt源代码创建的库。在Linux和OS X上，你可以直接链接IDA附带的Qt库。在Linux 上，这些库位于 目录中，而在 OS X 上，它们位于/idaq.app/Contents/Frameworks 目录中。请注意，链接并非由 IDA 附带的 Qt库会降低插件的兼容性，除非你与插件一起发布这些库。
配置Qt插件项目时，请确保 qmake 项目文件包含以下项目配置指令：
QT_NAMESPACE = QT
IDA 定义了许多函数，以便于在SDK 中更安全地处理字符串。这些函数包括qstrlen
 和qsnprintf
 ，很长时间以来，它们一直是 SDK 的一部分。迁移到基于 Qt的GUI 后，使用这些函数可能会导致问题，因为 Qt 还定义了几个与 IDA 所提供的函数名称相同的函数。IDA 函数位于全局命名空间中，而 Qt函数则位于 QT
 命名空间中。通过明确引用全局命名空间，可以调用这些函数的IDA 版本，如下所示：
unsigned int len = ::qstrlen(myString);
如果你需要为你在插件中创建的任何部件提供一个父部件（parent widget），使用下面的语句将获得一个指向 idaq 的顶级应用程序窗口的指针：
QWidget *mainWindow = QApplication::activeWindow();
这个语句调用Qt QApplication
 类中的一个静态方法，并返回任何Qt应用程序中唯一的QApplication
 对象的部件指针。
有关如何配置插件以使用 Qt 的详细信息，请参阅 Daniel 的博客文章。此外，IDA SDK 附带的qwindow 插件样本也提供了一个使用 Qt的插件示例。具体而言，其中包含示例代码，它用于创建一个空部件（使用 create_tform
 ），使用回调以接收正显示表单的通知，获得指向新建表单的QWidget 指针，以及最终使用一个 Qt按钮对象填写该表单。将在第 23 章中讨论的 collabREate和ida-x86emu 插件也利用了 Qt GUI元素，以将这些插件用在所有 IDA 平台中。
17.7 脚本化插件
IDA 5.6引入了对脚本化加载器模块的支持。IDA 5.7则添加了对脚本化插件（scripted plug-in ）1
 和处理器模块的支持。虽然这样做不一定有助于开发出更加强大的插件，但它确实在一定程度上降低了插件开发者开发插件的难度，并且由于取消了复杂的构建流程，也缩短了开发周期。
1. 参见http://www.hexblog.com/?p=120
 。
尽管你可以使用 IDC 或Python 创建脚本化插件，但由于 Python 与IDA SDK 非常类似，使用Python 可能是你的最佳选择。鉴于此，Python 插件就与已编译的 C++ 插件一样强大了。
创建Python 插件的过程非常简单。你主要需要定义一个名为 PLUGIN_ENTRY
 的函数，该函数返回plugin_t
 （在模块 idaapi 中定义）的一个实例。plugin_t
 类包含反映SDK 的C++ plugin_t
 类成员的成员。代码清单 17-4 显示了一个简单的 Python 插件，该插件定义了一个名为idabook_plugin_t
 的类（继承自plugin_t
 ），初始化所有必需的成员，并定义实现插件行为的 init、term
 和run
 函数。
代码清单 17-4 一个小型Python 插件
 from idaapi import *  
 class idabook_plugin_t(plugin_t):  
    flags = 0  
    wanted_name = "IdaBook Python Plugin"  
    wanted_hotkey = "Alt-8"  
    comment = "IdaBook Python Plugin"  
    help = "Something helpful"  
    def init(self):  
      msg("IdaBook plugin init called.\n")  
      return PLUGIN_OK  
   def term(self):  
      msg("IdaBook plugin term called.\n")  
   def run(self, arg):  
      warning("IdaBook plugin run(%d) called.\n" % arg)  
   def PLUGIN_ENTRY():  
      return idabook_plugin_t() 
要安装插件，只需将脚本复制到/plugins 目录中即可。
以IDC 编写的同一插件如代码清单 17-5 所示。由于IDC 没有定义与插件有关的基类，因此我们需要创建一个类，以定义插件所需的所有元素，同时需要确保正确命名每个元素。
代码清单 17-5 一个小型IDC 插件
 #include   
 class idabook_plugin_t {  
   idabook_plugin_t() {  
      this.flags = 0;  
      this.wanted_name = "IdaBook IDC Plugin";  
      this.wanted_hotkey = "Alt-9";  
      this.comment = "IdaBook IDC Plugin";  
      this.help = "Something helpful";  
   }  
     init() {  
      Message("IdaBook plugin init called.\n");  
      return PLUGIN_OK;  
   }  
   term() {  
      Message("IdaBook plugin term called.\n");  
   }  
   run(arg) {  
      Warning("IdaBook plugin run(%d) called.\n", arg);  
   }  
}  
static PLUGIN_ENTRY() {  
   return idabook_plugin_t();
} 