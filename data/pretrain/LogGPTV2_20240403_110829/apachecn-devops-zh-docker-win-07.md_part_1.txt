# 七、使用 Docker Swarm 编排分布式解决方案
您可以在单台电脑上运行 Docker，这是我在本书中到目前为止所做的，这也是您在开发和基本测试环境中使用 Docker 的方式。在更高级的测试环境和生产环境中，单一服务器并不适合。为了实现高可用性并让您能够灵活地扩展解决方案，您需要多个服务器作为一个集群运行。Docker 平台内置了集群支持，您可以使用 Docker Swarm 模式将多个 Docker 主机连接在一起。
到目前为止，您所学到的所有概念(映像、容器、注册表、网络、卷和服务)仍然适用于集群模式。Docker Swarm 是一个编排层。它提供了与独立的 Docker 引擎相同的应用编程接口，并具有管理分布式计算各方面的附加功能。当您在集群模式下运行服务时，Docker 会确定在哪些主机上运行容器；它管理不同主机上的容器之间的安全通信，并监视主机。如果集群中的服务器出现故障，Docker 会安排它正在运行的容器在不同的主机上启动，以保持应用的服务级别。
自 2015 年发布 1.12 版本以来，Swarm 模式已在 Docker 中可用，并提供了经过生产强化的企业级服务编排。群中的所有通信都由相互的 TLS 保护，因此节点之间的网络流量总是加密的。您可以在集群中安全地存储应用机密，Docker 只将它们呈现给那些需要访问的容器。集群是可扩展的，因此您可以轻松添加节点以增加容量或删除节点以进行维护。Docker 还可以在 swarm 模式下运行自动滚动服务更新，因此您可以在零宕机的情况下升级应用。
在本章中，我将设置一个 Docker Swarm 并在多个节点上运行 NerdDinner。我将从创建单个服务开始，然后从一个合成文件开始部署整个栈。您将了解到:
*   创建群并管理节点
*   以集群模式创建和管理服务
*   在 Docker Swarm 中管理应用配置
*   向 DockerSwarm 部署栈
*   零停机时间部署更新
# 技术要求
您将需要在 Windows 10 更新 18.09 或 Windows Server 2019 上运行 Docker 来完成示例。本章代码可在[https://github . com/sixed/docker-on-window/tree/第二版/ch07](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch07) 获得
# 创建群并管理节点
Docker Swarm 模式使用经理-员工架构，为经理和员工提供高可用性。管理器面向管理员，您使用活动管理器来管理集群和集群上运行的资源。工作人员面向用户，他们为您的应用服务运行容器。
群管理器还可以为您的应用运行容器，这在管理人员-工作人员架构中是不常见的。管理一个小型集群的开销相对较低，因此如果您有 10 个节点，其中 3 个是管理器，管理器也可以运行一部分应用工作负载(但是在生产环境中，如果您在管理器上运行大量应用工作负载，您需要意识到让管理器缺乏计算的风险)。
您可以在同一个群集中混合使用 Windows 和 Linux 节点，这是管理混合工作负载的好方法。建议您让所有节点运行相同版本的 Docker，但它可以是 Docker CE 或 Docker Enterprise—Docker Swarm 功能内置于核心 Docker 引擎中。
Many enterprises running Docker in production have a swarm with Linux nodes as the managers, and a mixture of Windows and Linux nodes as the workers. That means you can run Windows and Linux apps in containers in a single cluster, using the least-cost option for the node operating system.
# 初始化群
蜂群几乎可以是任何大小。您可以在笔记本电脑上运行单节点集群来测试功能，并且可以扩展到数千个节点。首先用`docker swarm init`命令初始化集群:
```
> docker swarm init --listen-addr 192.168.2.214 --advertise-addr 192.168.2.214
Swarm initialized: current node (jea4p57ajjalioqokvmu82q6y) is now a manager.
To add a worker to this swarm, run the following command:
    docker swarm join --token SWMTKN-1-37p6ufk5jku6tndotqlcy1w54grx5tvxb3rxphj8xkdn9lbeml-3w7e8hxfzzpt2fbf340d8phia 192.168.2.214:2377
To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
```
这将创建一个具有单个节点的集群，即您运行命令的 Docker 引擎，该节点将成为集群管理器。我的机器有多个 IP 地址，所以我指定了`listen-addr`和`advertise-addr`选项，告诉 Docker 使用哪个网络接口进行集群通信。始终指定 IP 地址并为管理器节点使用静态地址是一种很好的做法。
You can keep your swarm secure using an internal private network for the swarm traffic, so that communication is not on the public network. You can even keep your managers off the public network completely. Only worker nodes with public-facing workloads need to be connected to the public network in addition to the internal network - and you can even avoid that if you're using a load-balancer as the public entrypoint to your infrastructure.
# 向群体中添加工人
`docker swarm init`的输出告诉你如何通过加入其他节点来扩大群体。节点只能属于一个群，要加入，需要使用加入令牌。如果网络遭到破坏，令牌会阻止流氓节点加入您的群，因此您需要将其视为安全的机密。节点可以作为工作人员或管理人员加入，每个节点都有不同的令牌。您可以使用`docker swarm join-token`命令查看和旋转令牌。
在运行相同版本 Docker 的第二台机器上，我可以运行`swarm join`命令加入群:
```
> docker swarm join `
   --token SWMTKN-1-37p6ufk5jku6tndotqlcy1w54grx5tvxb3rxphj8xkdn9lbeml-3w7e8hxfzzpt2fbf340d8phia `
   192.168.2.214:2377 
This node joined a swarm as a worker.
```
现在，我的 Docker 主机正在群集模式下运行，当我连接到管理器节点时，有更多的命令可供我使用。`docker node`命令管理群中的节点，所以我可以列出群中的所有节点，并通过`docker node ls`查看它们的当前状态:
```
> docker node ls
ID    HOSTNAME    STATUS   AVAILABILITY  MANAGER STATUS  ENGINE VERSION
h2ripnp8hvtydewpf5h62ja7u  win2019-02      Ready Active         18.09.2
jea4p57ajjalioqokvmu82q6y * win2019-dev-02 Ready Active Leader  18.09.2
```
`STATUS`值告诉你该节点在群中是否在线，`AVAILABILITY`值告诉你该节点是否能够运行容器。`MANAGER STATUS`字段有三个选项:
*   `Leader`:控制蜂群的主动管理者。
*   `Reachable`:备份管理器；如果现任领导人下台，它可以成为领导人。
*   `No value`:一个工作节点。
多个管理器支持高可用性。Docker Swarm 使用 Raft 协议来选举一个新的领导者，如果当前的领导者丢失了，那么有奇数个经理，你的 Swarm 可以在硬件故障中存活。对于生产，您应该有三个管理器节点，这是您所需要的，即使对于有数百个工作器节点的大型集群也是如此。
工作节点不会自动升级为管理人员，因此如果您的所有管理人员都丢失了，那么您将无法管理群。在这种情况下，工作节点上的容器继续运行，但是没有管理器来监视工作节点或您正在运行的服务。
# 提升和移除群节点
可以用`docker node promote`将工人节点做成经理，用`docker node demote`将经理节点做成工人；这些是您在管理器节点上运行的命令。
要离开群集，您需要在节点本身上运行`docker swarm leave`命令:
```
> docker swarm leave
Node left the swarm.
```
如果您有单节点集群，您可以使用相同的命令退出集群模式，但是您需要使用`--force`标志，因为这有效地将您从集群模式切换回单 Docker Engine 模式。
`docker swarm`和`docker node`命令管理群体。当您在集群模式下运行时，可以使用特定于集群的命令来管理容器工作负载。
You will see references to *Docker Swarm* and *swarm mode*. Technically, they are different things. Docker Swarm was an early orchestrator that was later built into the Docker Engine as swarm mode. The *classic* Docker Swarm only ran on Linux, so when you're talking about swarm with Windows nodes, it's always swarm mode—but it's usually called Docker Swarm.
# 在云端运行 DockerSwarm
Docker 有一组最少的基础设施需求，因此您可以轻松地在任何云中启动 Docker 主机或集群 Docker Swarm。要大规模运行 Windows 容器，您所需要的只是运行 Windows Server 虚拟机并在网络上连接它们的能力。
云是运行 Docker 的好地方，Docker 是迁移到云的好方法。Docker 为您提供了现代应用平台的力量，不受**平台即服务** ( **PaaS** )产品的限制。PaaS 选项通常有专有的部署系统，在您的代码中有专有的集成，开发人员体验不会使用相同的运行时。
Docker 允许您以可移植的方式打包您的应用并定义您的解决方案结构，该方式将在任何机器和任何云上以相同的方式运行。您可以使用基本的**基础设施即服务** ( **IaaS** )服务，所有云提供商都支持这些服务，并且在每个环境中都有一致的部署、管理和运行时体验。
The major clouds also provide managed container services, but these have centralized on Kubernetes—AKS on Azure, EKS on Amazon Web Services, and GKE on Google Cloud. At the time of writing, they're all 100% Linux offerings. Windows support for Kubernetes is being actively worked on, and the cloud services will begin to offer Windows once it's supported, but Kubernetes is a far more complex orchestrator than swarm, and I won't cover it here.
在云中部署 Docker Swarm 最简单的方法之一是使用 Terraform，这是一种强大的基础设施即代码技术，通常比云提供商自己的模板语言或脚本工具更容易使用。通过几十行配置，您可以为管理节点和工作节点定义虚拟机，以及网络设置、负载平衡器和您需要的任何其他服务。
# Docker 认证基础设施
Docker 使用 Terraform 为 **Docker 认证基础架构** ( **DCI** )提供动力，这是一个在主要云提供商和主要内部虚拟化工具上部署 Docker Enterprise 的单一工具。它使用每个提供商的相关服务来设置 Docker 企业平台的企业级部署，包括通用控制平面和 Docker 可信注册中心。
DCI 在 Docker 的一系列参考架构指南中有详细介绍，可在 **Docker 成功中心**([https://success.docker.com](https://success.docker.com))上获得。在该网站上添加书签是值得的——您还可以找到关于传统应用现代化的优秀指南，以及在容器中记录、监控、存储和联网的最佳实践文档。
# 以集群模式创建和管理服务
在前一章中，您看到了如何使用 Docker Compose 来组织分布式解决方案。在合成文件中，您将应用的各个部分定义为使用网络将它们连接在一起的服务。集群模式中使用了相同的 Docker Compose 文件格式和相同的服务概念。在集群模式下，组成服务的容器被称为**副本**。您使用 Docker 命令行在群上创建服务，群管理器创建在群节点上作为容器运行的副本。
我将通过创建服务来部署 NerdDinner 栈。所有服务都将在我的集群上的同一个 Docker 网络中运行。在集群模式下，Docker 有一种特殊类型的网络，称为**覆盖网络**。覆盖网络是跨越多个物理主机的虚拟网络，因此运行在一个群节点上的容器可以到达运行在另一个节点上的容器。服务发现的工作方式是一样的:容器通过服务名称相互访问，Docker 的 DNS 服务器将它们指向一个容器。
要创建覆盖网络，您需要指定要使用的驱动程序，并为网络命名。Docker CLI 返回新网络的标识，就像它返回其他资源一样:
```
> docker network create --driver overlay nd-swarm
206teuqo1v14m3o88p99jklrn
```
您可以列出网络，您将看到新网络使用覆盖驱动程序，并且范围是群，这意味着使用该网络的任何容器都可以相互通信，无论它们运行在哪个节点上:
```
> docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
osuduab0ge73        ingress             overlay             swarm
5176f181eee8        nat                 nat                 local
206teuqo1v14        nd-swarm            overlay             swarm
```
The output here also shows the default `nat` network, which has a local scope, so containers can only reach one another on the same host. There's another network created in swarm mode called `ingress`, which is the default network for services created with published ports.
我将把新网络用于 NerdDinner 服务，因为这将把我的应用与群中使用自己网络的其他应用隔离开来。在本章的后面，我将使用 Docker Compose 文件来部署整个解决方案，但是我将从使用`docker service create`命令手动创建服务开始，这样您就可以看到服务与容器有什么不同。这是如何在 Docker Swarm 中将 NATS 消息队列部署为服务:
```
docker service create `
 --network nd-swarm `
 --name message-queue `
 dockeronwindows/ch05-nats:2e 
```
除了映像名称之外，`docker service create`没有必需的选项，但是对于分布式应用，您需要指定以下内容:
*   `network`:连接到服务容器的 Docker 网络
*   `name`:用作其他组件的 DNS 条目的服务名
Docker supports different types of DNS resolution for containers. The default is Virtual IP `vip` mode, which you should use because it's the most performant. `vip` mode is only supported from Windows Server 2019, so for earlier versions you will see examples where the endpoint mode is set to `dnsrr`. That's DNS round-robin mode, which is less efficient and can cause issues when clients cache DNS responses, so avoid it, unless you have to work with containers on Windows Server 2016.
您可以从连接到集群管理器的 Docker 命令行界面运行`service create`命令。管理器查看群集中的所有节点，并确定哪些节点有能力运行副本，然后安排任务在节点上创建为容器。默认的副本级别是的*到*的*，所以这个命令只是创建了一个容器——但是它可以在群中的任何节点上运行。*