        }  
        else  
                enable_timeout_after(DEADLOCK_TIMEOUT, DeadlockTimeout);  
        /*  
         * If someone wakes us between LWLockRelease and PGSemaphoreLock,  
         * PGSemaphoreLock will not block.  The wakeup is "saved" by the semaphore  
         * implementation.  While this is normally good, there are cases where a  
         * saved wakeup might be leftover from a previous operation (for example,  
         * we aborted ProcWaitForSignal just before someone did ProcSendSignal).  
         * So, loop to wait again if the waitStatus shows we haven't been granted  
         * nor denied the lock yet.  
         *  
         * We pass interruptOK = true, which eliminates a window in which  
         * cancel/die interrupts would be held off undesirably.  This is a promise  
         * that we don't mind losing control to a cancel/die interrupt here.  We  
         * don't, because we have no shared-state-change work to do after being  
         * granted the lock (the grantor did it all).  We do have to worry about  
         * canceling the deadlock timeout and updating the locallock table, but if  
         * we lose control to an error, LockErrorCleanup will fix that up.  
         */  
        do  
        {  
                PGSemaphoreLock(&MyProc->sem, true);  
                /*  
                 * waitStatus could change from STATUS_WAITING to something else  
                 * asynchronously.  Read it just once per loop to prevent surprising  
                 * behavior (such as missing log messages).  
                 */  
                myWaitStatus = MyProc->waitStatus;  
                /*  
                 * If we are not deadlocked, but are waiting on an autovacuum-induced  
                 * task, send a signal to interrupt it.  
                 */  
                if (deadlock_state == DS_BLOCKED_BY_AUTOVACUUM && allow_autovacuum_cancel)  
                {  
                        PGPROC     *autovac = GetBlockingAutoVacuumPgproc();  
                        PGXACT     *autovac_pgxact = &ProcGlobal->allPgXact[autovac->pgprocno];  
                        LWLockAcquire(ProcArrayLock, LW_EXCLUSIVE);  
                        /*  
                         * Only do it if the worker is not working to protect against Xid  
                         * wraparound.  
                         */  
                        if ((autovac != NULL) &&  
                                (autovac_pgxact->vacuumFlags & PROC_IS_AUTOVACUUM) &&  
                                !(autovac_pgxact->vacuumFlags & PROC_VACUUM_FOR_WRAPAROUND))  
                        {  
                                int                     pid = autovac->pid;  
                                StringInfoData locktagbuf;  
                                StringInfoData logbuf;  /* errdetail for server log */  
                                initStringInfo(&locktagbuf);  
                                initStringInfo(&logbuf);  
                                DescribeLockTag(&locktagbuf, &lock->tag);  
                                appendStringInfo(&logbuf,  
                                                                 _("Process %d waits for %s on %s."),  
                                                                 MyProcPid,  
                                                          GetLockmodeName(lock->tag.locktag_lockmethodid,  
                                                                                          lockmode),  
                                                                 locktagbuf.data);  
                                /* release lock as quickly as possible */  
                                LWLockRelease(ProcArrayLock);  
                                ereport(LOG,  
                                          (errmsg("sending cancel to blocking autovacuum PID %d",  
                                                          pid),  
                                           errdetail_log("%s", logbuf.data)));  
                                pfree(logbuf.data);  
                                pfree(locktagbuf.data);  
                                /* send the autovacuum worker Back to Old Kent Road */  
                                if (kill(pid, SIGINT) tag.lock);  
                        modename = GetLockmodeName(locallock->tag.lock.locktag_lockmethodid,  
                                                                           lockmode);  
                        TimestampDifference(get_timeout_start_time(DEADLOCK_TIMEOUT),  
                                                                GetCurrentTimestamp(),  
                                                                &secs, &usecs);  
                        msecs = secs * 1000 + usecs / 1000;  
                        usecs = usecs % 1000;  
                        if (deadlock_state == DS_SOFT_DEADLOCK)  
                                ereport(LOG,  
                                                (errmsg("process %d avoided deadlock for %s on %s by rearranging queue order after %ld.%03d ms",  
                                                          MyProcPid, modename, buf.data, msecs, usecs)));  
                        else if (deadlock_state == DS_HARD_DEADLOCK)  
                        {  
                                /*  
                                 * This message is a bit redundant with the error that will be  
                                 * reported subsequently, but in some cases the error report  
                                 * might not make it to the log (eg, if it's caught by an  
                                 * exception handler), and we want to ensure all long-wait  
                                 * events get logged.  
                                 */  
                                ereport(LOG,  
                                                (errmsg("process %d detected deadlock while waiting for %s on %s after %ld.%03d ms",  
                                                          MyProcPid, modename, buf.data, msecs, usecs)));  
                        }  
                        if (myWaitStatus == STATUS_WAITING)  
                                ereport(LOG,  
                                                (errmsg("process %d still waiting for %s on %s after %ld.%03d ms",  
                                                          MyProcPid, modename, buf.data, msecs, usecs)));  
                        else if (myWaitStatus == STATUS_OK)  
                                ereport(LOG,  
                                        (errmsg("process %d acquired %s on %s after %ld.%03d ms",  
                                                        MyProcPid, modename, buf.data, msecs, usecs)));  
                        else  
                        {  
                                Assert(myWaitStatus == STATUS_ERROR);  
                                /*  
                                 * Currently, the deadlock checker always kicks its own  
                                 * process, which means that we'll only see STATUS_ERROR when  
                                 * deadlock_state == DS_HARD_DEADLOCK, and there's no need to  
                                 * print redundant messages.  But for completeness and  
                                 * future-proofing, print a message if it looks like someone  
                                 * else kicked us off the lock.  
                                 */  
                                if (deadlock_state != DS_HARD_DEADLOCK)  
                                        ereport(LOG,  
                                                        (errmsg("process %d failed to acquire %s on %s after %ld.%03d ms",  
                                                          MyProcPid, modename, buf.data, msecs, usecs)));  
                        }  
                        /*  
                         * At this point we might still need to wait for the lock. Reset  
                         * state so we don't print the above messages again.  
                         */  
                        deadlock_state = DS_NO_DEADLOCK;  
                        pfree(buf.data);  
                }  
        } while (myWaitStatus == STATUS_WAITING);  
        /*  
         * Disable the timers, if they are still running.  As in LockErrorCleanup,  
         * we must preserve the LOCK_TIMEOUT indicator flag: if a lock timeout has  
         * already caused QueryCancelPending to become set, we want the cancel to  
         * be reported as a lock timeout, not a user cancel.  
         */  
        if (LockTimeout > 0)  
        {  
                DisableTimeoutParams timeouts[2];  
                timeouts[0].id = DEADLOCK_TIMEOUT;  
                timeouts[0].keep_indicator = false;  
                timeouts[1].id = LOCK_TIMEOUT;  
                timeouts[1].keep_indicator = true;  
                disable_timeouts(timeouts, 2);  
        }  
        else  
                disable_timeout(DEADLOCK_TIMEOUT, false);  
        /*  
         * Re-acquire the lock table's partition lock.  We have to do this to hold  
         * off cancel/die interrupts before we can mess with lockAwaited (else we  
         * might have a missed or duplicated locallock update).  
         */  
        LWLockAcquire(partitionLock, LW_EXCLUSIVE);  
        /*  
         * We no longer want LockErrorCleanup to do anything.  
         */  
        lockAwaited = NULL;  
        /*  
         * If we got the lock, be sure to remember it in the locallock table.  
         */  
        if (MyProc->waitStatus == STATUS_OK)  
                GrantAwaitedLock();  
        /*  
         * We don't have to do anything else, because the awaker did all the  
         * necessary update of the lock table and MyProc.  
         */  
        return MyProc->waitStatus;  
}  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")