The untrusted parts of the applications are not shown in this
ﬁgure, but all interaction between the enclaves takes place via
untrusted channels. Therefore, the enclaves establish their own
secure channels between one another using attestation.
200
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:25 UTC from IEEE Xplore.  Restrictions apply. 
For outgoing migrations, it ensures that the remote Migration
Enclave attests with a trusted version of the Migration Enclave
code and can authenticate as belonging to the same cloud
provider. This ensures that enclaves can only be migrated to an
authorized destination machine, e.g. located within the same
data center. For incoming migrations, the Migration Enclave
ensures that the migration data is only sent to an enclave that
attests with exactly the same version as the source enclave
when sending the data. We now describe speciﬁcs of our local
and remote attestation.
The local attestation is kept simple as the Migration Library
locally attests to the Migration Enclave and in doing so creates
an encrypted channel to the Migration Enclave. Establishing
a secure channel is based on Difﬁe-Hellman key exchange
protocol. This channel is opened when the Migration Library
initializes itself and can be used over the lifetime of the
enclave to send and also to receive migrations. During the local
attestation, the Migration Enclave stores the MRENCLAVE
value of the calling enclave as it is contained in the REPORT
that the local enclave sends to the Migration Enclave during
the attestation. This MRENCLAVE value will then be used for
incoming and outgoing migrations to match the migration data
to the recipient. On an outgoing migration, the MRENCLAVE
value is appended to the migration data of the enclave before
sending it to the destination Migration Enclave and on an
incoming migration, the migration data is matched to the local
enclave that has the same MRENCLAVE value. If there is no
matching enclave running on the machine for an incoming
migration, the migration data will be stored until an enclave
with the matching MRENCLAVE value performs a local
attestation.
The remote attestation has more requirements to be checked
by the Migration Enclave. Here, the Migration Enclave is not
only interested in checking the actual MRENCLAVE value
of its peer but it also has to authenticate its peer. The ﬁrst
check is trivial as it is contained in the attestation report
structure that is used during the attestation. The Migration
Enclave simply checks this MRENCLAVE value and aborts
the attestation process if the peer enclave does not have the
same MRENCLAVE value as itself. After establishing the
secure channel via remote attestation, the Migration Enclaves
can perform the second check and authenticate each other.
Fig. 2. Migration protocol diagram
After initializing the Migration Library, a migration can be
requested by the application (e.g. once the application has been
notiﬁed that it will be migrated). The Migration Library on
the source machine contacts its local Migration Enclave, sets
up an encrypted channel based on local attestation, and sends
the data to migrate. This data includes the MSK, the current
counter values, and the address of the destination machine.
After receiving the migration data, the Migration Enclave on
the source machine contacts the remote Migration Enclave on
the destination machine and sets up an encrypted channel using
remote attestation. This remote attestation includes verifying
the integrity of the Migration Enclaves and checking whether
they belong to the same cloud provider. Next, the data is sent
to the Migration Enclave on the destination machine, where
it is forwarded to a local Migration Library in the destination
enclave. Either the local Migration Library has already been
started and is awaiting an incoming migration, or the Migration
Enclave stores the data temporarily until the Migration Library
contacts the Migration Enclave. After sending the migration
data to the correct Migration Library, the data is processed
and the Migration Library sends back a conﬁrmation of a
successful migration. This conﬁrmation is sent back to the
source machine, which can then safely delete the migration
data. If there is an error during the migration process, the
migration data remains in the Migration Enclave on the source
machine until
the error is resolved or another destination
machine is selected to complete the migration process.
VI. IMPLEMENTATION
B. Migration Library
We have implemented the Migration Library and the Mi-
gration Enclave and made these available as open source
software.6 Data center operators can also create and deploy
customized versions of the Migration Enclave in order to
provision their own policies and certiﬁcates. Similarly, enclave
providers can customize the migration library e.g. in order to
enforce migration policies.
A. Migration Enclave
As described in Section V-B, the Migration Enclave serves
as a central entity to handle all migrations of one machine.
6All software is available at: https://github.com/SGX-Cloud
The migration process has to be started from outside of the
enclave, i.e. from the untrusted part of the application. Listing
1 shows the functionality that the Migration Library provides
to this untrusted part which is the migration operation and one
initialization operation that must be performed every time the
enclave is loaded. We now describe the migratable sealing and
the migratable counter functionality, and then the persistent
data that is used in the initialization operation.
Sealing: The migratable version of the sealing functions
are straightforward to implement. Instead of using the built-
in sealing functions by Intel SGX, the library generates a
Migration Sealing Key (MSK) once for every enclave and
201
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:25 UTC from IEEE Xplore.  Restrictions apply. 
migration_init(p_data_buffer, init_state, ME_address);
migration_start(destination_address);
Listing 1. Migration Library interface for the untrusted part of the application
uses that for the sealing functions throughout all migrations.
When migrating, the key is transferred to the new Migration
Library where it can be used again. Without re-encryption,
the process of migrating the sealed data is constant-time for
transferring the key and then linear for transferring the actual
sealed data. This process is secure because the MSK is only
ever transferred to trusted Migration Enclaves and from there
to the exact same enclave that generated the key. Thus, the
MSK never leaves the trusted environment in an unencrypted
form. From the point of view of the enclave developer, instead
of using the standard sealing functions, he now has to use the
migratable sealing functions which are identical to the standard
functions in terms of parameters required and results returned.
Listing 2 shows these new migratable function parameters. If
a developer decides that some data should not be migratable
it is still possible to use the native SGX sealing functions to
store that data.
Monotonic counters: One approach to migrate a counter is
for the source enclave to transfer the current counter value to
the destination enclave and have the latter create a new counter
and increment it until the counter value reaches the trans-
ferred value. However, this will incur signiﬁcant performance
overhead because monotonic counter operations are usually
rate-limited. Instead, our implementation uses a counter offset,
which is initialized to zero. This offset is added to the current
counter value to compute the effective counter value. When
an enclave is started for the ﬁrst time, the counter offset is
initialized to zero and the current counter value always equals
the effective counter value until the enclave is migrated. On
migration, the effective counter value of the source enclave
is sent to the destination enclave where it is set as the new
counter offset. The current counter value on the destination
enclave is initialized to zero right after the incoming migration.
The counter offset remains unchanged between migrations and
is sealed and stored locally. This design optimizes performance
because the processing time of a counter during migration is
constant, regardless of the counter value.
If an enclave is malicious it can modify the offset values
in the library but we assume that
the enclave is trusted,
because a malicious enclave could simply lie about counter
values or ignore them even when using native SGX counters.
However, the system is potentially open to rollback attacks
where an attacker provides old offset values to the Migration
Library. To mitigate this rollback attack, when migrating
counters to a new destination machine, the used monotonic
counters are deleted on the source machine by calling the
sgx_destroy_monotonic_counter function. The pro-
cess does not proceed until it receives the SGX_SUCCESS
return code, which indicates that the counter has been suc-
cessfully deleted. Only then, the Migration Library sends the
effective counter values and the list of active counters in
sgx_seal_migratable_data(
additional_MACtext_length, p_additional_MACtext,
text2encrypt_length, p_text2encrypt,
sealed_data_size, p_sealed_data);
sgx_unseal_migratable_data(p_sealed_data,
p_additional_MACtext, p_additional_MACtext_length,
p_decrypted_text, p_decrypted_text_length);
sgx_create_migratable_counter(p_counter_id,
p_counter_value);
sgx_destroy_migratable_counter(counter_id);
sgx_increment_migratable_counter(counter_id,
p_counter_value);
sgx_read_migratable_counter(counter_id, p_counter_value);
Listing 2. Migration Library enclave interface for the application enclave
the migration data (see Table I) to the Migration Enclave.
This ensures that the monotonic counters cannot be used in
a rollback attack as Intel SGX ensures that deleted counters
cannot be accessed again. The migratable counter functions in
the library ensure that an error is properly thrown if a counter
does not exist, no matter what the value of the stored counter
offset.
As the Migration Library has to perform an extra addition
operation on all monotonic counter functions in order to
calculate the effective counter value, the Migration Library
provides wrapped functions of the standard monotonic counter
operations. In doing this, it assigns the monotonic counters
an internal counter id which can be used to access the
counter instead of requiring the Intel SGX UUID of the actual
monotonic counter. Using solely the counter id instead of the
Intel SGX UUIDs of the counters is not a security threat
as the Migration Library fully trusts the application enclave.
For the enclave developer that integrates the Migration Li-
brary this means that instead of storing the UUIDs of the
counters himself, he now only has to store the id that the
Migration Library assigned to the migratable counter. The
Migration Library will
then handle the internal access to
the Intel SGX counter and add the migratable offset before
returning the effective counter value to the application enclave.
Listing 2 shows the migratable versions of the monotonic
counter operations. Instead of the standard monotonic counter
functions that require a SGX monotonic counter structure to
be passed to the function, the migratable version only requires
a counter id that
is assigned and returned on creation of
the counter. This change from the UUID counter structure
to the counter id number is the only change in the function
parameters compared to the standard Intel SGX monotonic
counter functions. Note that the Migration Library does not
require its own monotonic counters and as such the application
enclave does not lose any monotonic counter capabilities by
utilizing the Migration Library. However, because it only
wraps the Intel SGX monotonic counters and does not replace
them internally, the Migration Library is still limited to the
same 256 monotonic counters that are the standard limit for
an Intel SGX enclave.
Persistent data: One downside of using an MSK and wrap-
ping the monotonic counters for the application enclave is
that the Migration Library has a need for persistent data that
202
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:25 UTC from IEEE Xplore.  Restrictions apply. 
DATASTRUCTURE OF THE MIGRATED DATA
TABLE I
Name
counters active
counter values
MSK
Type
bool[256]
uint32[256]
Description
Shows used counters
Used as next offset
128bit SGX key
Used by migratable seal
DATASTRUCTURE OF THE MIGRATION LIBRARY INTERNALS
TABLE II
Name
frozen
counters active
counter uuids
counter offsets
MSK
Type
uint8
bool[256]
Description
Freeze ﬂag for migration
Shows used counters
SGX counter[256]
UUIDs of the SGX counters
uint32[256]
128bit SGX key
Offsets of the counters
Used by migratable seal
is stored on the physical machine and then reloaded with
every enclave restart. This means that the Migration Library
needs to be initialized once for the lifetime of a migratable
enclave (for key generation) and then every time this enclave
is started (for reloading the key and counter offsets). We solve
this by handing the data in a sealed data blob over to the
untrusted part of the application to store it on the machine.
Whenever the enclave is started, the Migration Library has to
be initialized by the untrusted part of the application with this
sealed data buffer. Table II shows the data that is stored in
this initialization buffer. In addition to the MSK and counter
arrays, the buffer also stores a ﬂag that identiﬁes whether the
enclave has already been migrated. If this ﬂag is active on
initialization, the library will refuse to operate.
C. Virtualization and Intel Platform Services
Application enclaves need to contact Intel Platform Services
enclaves for various reasons. In particular, when performing
remote attestation the quote is signed by the Quoting Enclave,
which is part of Platform Services. Current SGX patches for
KVM modify the system such that enclaves can only run inside
VMs. The Platform Services, on the other hand, relies on a
particular piece of hardware connected to the PCI bus. In our
solution, this device is assigned to a management VM on each
host, which can then contains the Platform Services enclaves
and the Migration Enclave.
The SGX SDK uses Unix sockets to communicate between
application enclaves and Platform Services enclaves. Since
these are not directly accessible from outside the VM, we in-
troduce two proxies to enable this communication. One proxy
is in the management VM and listens on a TCP socket for
incoming connection to pass them on to the Platform Services
Unix socket. The other proxy is running in other VMs. It opens
the Unix socket for local enclaves to connect to and proxies
these connections to the TCP socket inside the management
VM. Original Unix communication is opened to eavesdropping
by the untrusted operating system, hence introducing two
proxies does not affect the security guarantees.
VII. EVALUATION
In this section, we describe the evaluation of our scheme in
terms of security, performance, and usability.
A. Security Evaluation
We evaluate the security of our solution in terms of the four
Security Requirements deﬁned in Section IV.
SGX guarantees: Our library and migration protocols provide
the same security guarantees as a stand-alone non-migratable
SGX enclave. Firstly, the migratable versions of the sealing
and monotonic counter operations provide the same security
as the standard functions. The migratable sealing is done with
the same encryption method as the standard sealing and the
MSK is itself sealed with the standard sealing functions. The
migratable counter operations are also implemented using the
standard monotonic counter functions from the Intel SDK, but
also add the counter offset to the active counter value before
returning. Secondly, all communication between enclaves is
encrypted with symmetric keys established through a Difﬁe-
Hellman key agreement protocol bound to the attestation
process. This ensures that the enclave’s migratable sealing key
is always protected and is only processed by the Migration
Enclaves, which are trusted. Thirdly, the Migration Enclave
on the destination machine uses local attestation to ensure that
only an enclave with the same identity as the source enclave
can receive the migrated data. This prevents an attacker from
setting up a malicious enclave to receive the migrated enclave
data.
the secret data), so it
The inclusion and use of our Migration Library does not
increase the attack surface for side-channel attacks against
the application enclave. The only migratable operation in-
volving secret data is the new migratable sealing function.
However, this function follows the same design as the standard
sgx_seal_data function (i.e. using the AES-NI hardware
instructions to encrypt
is no more