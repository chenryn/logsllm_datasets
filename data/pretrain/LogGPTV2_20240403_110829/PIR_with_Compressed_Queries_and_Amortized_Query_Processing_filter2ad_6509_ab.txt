the expected noise.
While plaintext multiplication yields a multiplica-
tive increase in the noise, the factor is always 1 (i.e., no noise growth)
in EXPAND because it is based on the number of non-zero coefﬁcients
in the plaintext [28, §6.2].
(cid:2)
have a high expansion factor, F, which is the size ratio between
a ciphertext and the largest plaintext that can be encrypted; for
recommended security parameters, F ≥ 6.4 [10, 28].
√
To improve network costs, Stern [72] describes a way to
represent the query using d d
n ciphertexts (instead of n) for any
positive integer d. Unfortunately, this increases the response size
exponentially from 1 to Fd−1 ciphertexts (Section 3.4 explains
this). If the goal is to minimize network costs, a value of d = 2
or 3 is optimal in XPIR for the databases that we evaluate (§7.1).
As a result, even with this technique, the query vector is made
up of hundreds or thousands of ciphertexts.
3.1 Compressing queries
At a high level, our goal is to realize the following picture:
the client sends one ciphertext containing an encryption of its
desired index i to the server, and the server inexpensively eval-
uates a function EXPAND that outputs n ciphertexts containing
an encryption of 0 or 1 (where the ith ciphertext encrypts 1 and
others encrypt 0). The server can then use these n ciphertexts as
a query and execute the protocol as before (Figure 1, Line 9).
A straw man approach to construct EXPAND is to create a
Boolean circuit that computes the following function: “if the
index encrypted by the client is i return 1, else return 0”. The
server then evaluates this circuit on the client’s ciphertext using
a fully homomorphic encryption (FHE) scheme (e.g., BV [22],
BGV [20], FV [40]) passing in values of i ∈ [0, n − 1] to obtain
the n ciphertexts. Unfortunately, this approach is impractical.
First, the client must send log(n) ciphertexts as the query (one
for each bit of its index since the server evaluates a Boolean
circuit). Second, the Boolean circuit is concretely large (thou-
sands of gates) and expensive to evaluate. Finally, the server
must evaluate this circuit for each of the n possible indices.
Instead, we propose a new algorithm to implement EXPAND.
It relies on FHE, but perhaps surprisingly, it does not require
encrypting each bit of the index individually, working with
Boolean gates, or performing any homomorphic multiplications.
This last point is critical for performance, since homomorphic
multiplications are expensive and require using larger secu-
rity parameters (Figure 2). We note that the cryptosystem used
by XPIR (BV [22]) is an FHE scheme, so we could imple-
ment EXPAND using that. However, we choose to implement all
of SealPIR using the SEAL homomorphic library [4]—based
on the Fan-Vercauteren (FV) [40] cryptosystem—instead. We
964
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:31:59 UTC from IEEE Xplore.  Restrictions apply. 
make this choice for pragmatic reasons: EXPAND requires the
implementation of a new homomorphic operation, and SEAL al-
ready implements many of the necessary building blocks. Below
we give some background on FV.
= Z
Fan-Vercauteren FHE cryptosystem (FV). In FV, plaintexts
are polynomials of degree at most N with integer coefﬁcients
modulo t. Speciﬁcally, the polynomials are from the quotient
[x]/(xN + 1), where N is a power of 2, and t is the
ring Rt
plaintext modulus that determines how much data can be packed
into a single FV plaintext. In Section 6 we discuss how regular
binary data, for example a movie, is encoded in an FV plaintext,
and what these polynomials actually look like in practice.
t
q
= Z
Ciphertexts in FV consist of two polynomials, each of which
[x]/(xN + 1). Here q is the coefﬁcient modulus
is in Rq
that affects how much noise a ciphertext can contain, and the
security of the cryptosystem. When a plaintext is encrypted, the
corresponding ciphertext contains noise. As operations such
as addition or multiplication are performed, the noise of the
output ciphertext grows based on the noise of the operands and
the operation being performed (Figure 2 gives the noise growth
of several operations). Once the noise passes a threshold, the
ciphertext cannot be decrypted. The noise growth of operations
depends heavily on t, so t should be kept small. However, lower
t means that more FV plaintexts are needed to represent the
binary data (movie, etc.). Larger q supports more noise, but
results in lower security [28]. The expansion factor is F =
2 log(q)/ log(t). We discuss concrete parameters in Section 7.
In addition to the standard operations of a cryptosystem (key
generation, encryption, decryption), FV also supports homo-
morphic addition, multiplication, and relinearization (which is
performed after multiplications to keep the number of polyno-
mials in the ciphertext at two); for our purposes we care about
the following operations.
• Addition: Given ciphertexts c1 and c2, which encrypt FV
plaintexts p1(x), p2(x), the operation c1 + c2 results in a
ciphertext that encrypts their sum, p1(x) + p2(x).
p1(x), and given a plaintext p2(x), the operation p2(x) · c
results in a ciphertext that encrypts p1(x) · p2(x).
• Plaintext multiplication: Given a ciphertext c that encrypts
• Substitution: Given a ciphertext c that encrypts plaintext
p(x) and an odd integer k, the operation Sub(c, k) returns
an encryption of p(xk). For instance if c encrypts p(x) =
7 + x2 + 2x3, then Sub(c, 3) returns an encryption of p(x3) =
7 + (x3)2 + 2(x3)3 = 7 + x6 + 2x9.
Our implementation of the substitution operation is based on
the plaintext slot permutation technique discussed by Gentry et
al. [44, §4.2]. Fortunately, substitution requires only a subset of
the operations needed by the arbitrary permutations that Gentry
et al. consider, so we can implement it very efﬁciently, as shown
in the last row of Figure 2. We give a detailed description of
substitution in Appendix A.1.
3.2 Encoding the index
A client who wishes to retrieve the ith element from the server’s
database using SealPIR generates an FV plaintext that encodes
this index. The client does so by representing i ∈ [0, n − 1] as
the monomial xi ∈ Rt. The client then encrypts this plaintext
to obtain query = Enc(xi), which is then sent to the server. We
later discuss how to handle larger databases for which the index
cannot be represented by a single FV plaintext (§3.5).
3.3 Expanding queries obliviously
To explain how the server expands query = Enc(xi) into a
vector of n ciphertexts where the ith ciphertext is Enc(1) and all
other are Enc(0), we ﬁrst give a description for n = 2.
query = Enc(xi), with i ∈ {0, 1} in this case (since n = 2) as
two ciphertexts c0 = query and c1 = query · x
the client’s desired index. The server ﬁrst expands query into
As discussed in the previous section, the server receives
−1:
c0 =
c1 =
Enc(1)
Enc(x)
Enc(xi · x
Enc(xi · x
−1) = Enc(x
−1) = Enc(1)
−1)
if i = 0
if i = 1
if i = 0
if i = 1
+ Sub(cj, N + 1) for j ∈ {0, 1}.
(cid:2)
The server computes c
j
Since operations in Rt are deﬁned modulo xN + 1, a substitution
with N + 1 transforms the plaintext encrypted by c0 and c1 from
p(x) to p(−x).2 Speciﬁcally, we have:
= cj
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
c
0
=
(cid:2)
c
1
=
Enc(1) + Enc(1) = Enc(2)
Enc(x) + Enc(−x) = Enc(0)
Enc(x
Enc(1) + Enc(1) = Enc(2)
−1) + Enc(−x
−1) = Enc(0)
if i = 0
if i = 1
if i = 0
if i = 1
Finally, assuming t is odd, we can compute the multiplicative
t, say α, encode it as the monomial α ∈ Rt,
inverse of 2 in Z
= α · c
(cid:2)
and compute oj
j. It is the case that o0 and o1 contain the
desired output of EXPAND: oi encrypts 1, and o1−i encrypts 0.
We can generalize this approach to any power of 2 as long
as n ≤ N. In cases where n is not a power of 2, we can run the
algorithm for the next power of 2, and take the ﬁrst n output
ciphertexts as the client’s query. Figure 3 gives the generalized
algorithm, and Figure 4 depicts an example for a database of 4
elements. We prove the correctness of EXPAND in Appendix A.2,
and bound its noise growth in Appendix A.3.
3.4 Reducing the cost of expansion
One issue with EXPAND is that despite each operation being
inexpensive (Figure 2), O(n) operations are needed to extract the
n-entry query vector. This is undesirable, since EXPAND could
end up being almost as expensive to the server as computing
the answer to a query (see Figure 1, Line 9). We show how to
reduce this cost by having the client send multiple ciphertexts.
Stern [72] proposes the following modiﬁcation to the protocol
in Figure 1. Instead of structuring the database DB as an n-entry
vector (where each entry is an element), the server structures
n matrix M: each cell in M is a
the database as a
different element in DB. The client sends 2 query vectors, vrow
n × √
√
2Observe that xN + 1 ≡ 0 (mod xN + 1) and xN+1 ≡ −x (mod xN + 1).
965
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:31:59 UTC from IEEE Xplore.  Restrictions apply. 
1: function EXPAND(query = Enc(xi))
2:
such that m ≥ n
(cid:3)
ﬁnd smallest m = 2
ciphertexts ← [ query ]
// each outer loop iteration doubles the number of ciphertexts,
// and only one ciphertext ever encrypts a non-zero polynomial
for j = 0 to (cid:2) − 1 do
for k = 0 to 2j − 1 do
c0 ← ciphertexts[k]
c1 ← c0 · x−2j
← c0 + Sub(c0, N/2j + 1)
c(cid:2)
k
k+2j ← c1 + Sub(c1, N/2j + 1)
c(cid:2)
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
ciphtertexts ← [c(cid:2)
0, . . . , c(cid:2)
2j+1−1
]
// ciphertext at position j encrypts m and all others encrypt 0
inverse ← m−1 (mod t)
for j = 0 to n − 1 do
oj ← ciphertexts[j] · inverse
return output ← [o0, . . . , on−1]
FIGURE 3—Procedure that expands a single ciphertext query that
encodes an index i into a vector of n ciphertexts, where the ith entry
is an encryption of 1, and all other entries are encryptions of 0. We
introduce a new group operation Sub (see text for details). Plaintexts
are in the polynomial quotient ring Zt[x]/(XN + 1). N ≥ n is a power
of 2, and n is the number of elements in the server’s database.
√
and vcol, each of size
n . The vector vrow has the encryption of
1 at position r, while vcol has the encryption of 1 at position c
(where M[r, c] is the client’s desired element). The server, upon
receiving vrow and vcol, computes the following matrix-vector
= M · vcol, where each multiplication is between
product: Ac
a plaintext and ciphertexts, and additions are on ciphertexts.
Observe that Ac is a vector containing the encryptions of the
entries in column c of M.
√
The server then performs a similar step using Ac and vrow.
There is, however, one technical challenge: each entry in Ac
is a ciphertext, so it is too big to ﬁt inside another ciphertext
(recall that the largest plaintext that can ﬁt in a ciphertext has
size |ciphertext|/F). To address this, the server splits elements
in Ac into F chunks, so Ac can be thought of as a
n by F
matrix. The server can now repeat the process as before on the
transpose of this matrix: it computes AT
c
of F ciphertexts, which it sends to the client. The client then
decrypts all F ciphertexts and combines the result to obtain
Enc(M[r, c]). The client can then decrypt Enc(M[r, c]) to obtain
M[r, c]—the desired element in DB. This scheme generalizes
√
by structuring the database as a d-dimensional hypercube and
having the client send d query vectors of size d
n. The server
then returns Fd−1 ciphertexts as the response.
· vrow, to yield a vector
We use the above scheme to reduce the computational cost of
EXPAND (in contrast, Stern and XPIR use the above technique to
reduce network costs by reducing the size of the query vector).
Instead of encoding one index, the client encodes d indices (on
different ciphertexts), one for each dimension of the database.
√
The server then calls EXPAND on each of the d ciphertexts, and
extracts a d
n-entry vector from each. The server uses the above
√
scheme with the extracted d vectors, which results in the CPU
costs of EXPAND being O(d d
n). Of course, this approach has
the downside that the PIR response gets larger because of the
x0  x1  x2  x3
0 0 1 0
initial plaintext (encodes index 2): x2
Expand (j = 0)
0 2 0 0
0 0 0 0
Expand (j = 1)
0 0 0 0
0 0 0 0
4 0 0 0
0 0 0 0
inverse
0 0 0 0
0 0 0 0
1 0 0 0
0 0 0 0
FIGURE 4—Example of EXPAND’s effect on the FV plaintexts during
each iteration of the outer loop. Each array represents the coefﬁcients
of the corresponding polynomial. Note that the server only sees the
ciphertexts (not depicted). This example assumes a database with 4
elements, and a query retrieving the third item.
cryptosystem’s expansion factor (F). Speciﬁcally, the network
cost is d ciphertexts to encode the indices, and Fd−1 ciphertexts