vulnerable because of a sign-extension issue. The fix for the sign-extension issue 
wasn't correct, and yet another vulnerability was published. The following examples 
take you through the timeline of this vulnerability. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
266 
Listing 6-8 contains the slightly edited vulnerable code from version 1 of the antisniff 
research release, in the raw_watchdns.c file in the watch_dns_ptr() function. 
Listing 6-8. Antisniff v1.0 Vulnerability 
  char *indx; 
  int count; 
  char nameStr[MAX_LEN]; //256 
... 
  memset(nameStr, '\0', sizeof(nameStr)); 
... 
  indx = (char *)(pkt + rr_offset); 
  count = (char)*indx; 
  while (count){ 
    (char *)indx++; 
    strncat(nameStr, (char *)indx, count); 
    indx += count; 
    count = (char)*indx; 
    strncat(nameStr, ".", 
            sizeof(nameStr)  strlen(nameStr)); 
  } 
  nameStr[strlen(nameStr)-1] = '\0'; 
Before you can understand this code, you need a bit of background. The purpose of 
the watch_dns_ptr() function is to extract the domain name from the packet and copy 
it into the nameStr string. The DNS domain names in DNS packets sort of resemble 
Pascal strings. Each label in the domain name is prefixed by a byte containing its 
length. The domain name ends when you reach a label of size 0. (The DNS 
compression scheme isn't relevant to this vulnerability.) Figure 6-8 shows what a 
DNS domain name looks like in a packet. There are three labelstest, jim, and comand 
a 0-length label specifying the end of the name. 
Figure 6-8. Sample DNS domain name 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
267 
The code starts by reading the first length byte from the packet and storing it in the 
integer count. This length byte is a signed character stored in an integer, so you 
should be able to put any value you like between -128 and 127 in count. Keep this in 
mind for later. 
The while() loop keeps reading in labels and calling strncat() on them to the nameStr 
string. The first vulnerability that was published is no length check in this loop. If you 
just provide a long enough domain name in the packet, it could write past the bounds 
of nameStr[]. Listing 6-9 shows how this issue was fixed in version 1.1 of the research 
version. 
Listing 6-9. Antisniff v1.1 Vulnerability 
  char *indx; 
  int count; 
  char nameStr[MAX_LEN]; //256 
... 
  memset(nameStr, '\0', sizeof(nameStr)); 
... 
  indx = (char *)(pkt + rr_offset); 
  count = (char)*indx; 
  while (count){ 
    if (strlen(nameStr) + count  1024){ 
        error("read_packet: length too large: %d\n", length); 
        return 1; 
    } 
    buffer = (char *)malloc(length+1); 
    if((n = read(sockfd, buffer, length) = &pvpbuf[pvpbsize - 5]) 
            { 
                usrerr("553 5.1.1 Address too long"); 
                if (strlen(addr) > MAXNAME) 
                    addr[MAXNAME] = '\0'; 
returnnull: 
                if (delimptr != NULL) 
                    *delimptr = p; 
                CurEnv->e_to = saveto; 
                return NULL; 
            } 
            /* squirrel it away */ 
            *q++ = c; 
         } 
         /* read a new input character */ 
         c = *p++; 
         .. 
         /* chew up special characters */ 
         *q = '\0'; 
         if (bslashmode) 
         { 
             bslashmode = false; 
             /* kludge \! for naive users */ 
             if (cmntcnt > 0) 
             { 
                 c = NOCHAR; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
274 
                 continue; 
             } 
             else if (c != '!' || state == QST) 
             { 
                 *q++ = '\\'; 
                 continue; 
             } 
        } 
        if (c == '\\') 
            bslashmode = true; 
    } 
The NOCHAR constant is defined as -1 and is meant to signify certain error conditions 
when characters are being processed. The p variable is processing a user-supplied 
address and exits the loop shown when a complete token has been read. There's a 
length check in the loop; however, it's examined only when two conditions are true: 
when c is not NOCHAR (that is, c != -1) and bslashmode is false. The problem is this line: 
c = *p++; 
Because of the sign extension of the character that p points to, users can specify the 
char 0xFF and have it extended to 0xFFFFFFFF, which is NOCHAR. If users supply a 
repeating pattern of 0x2F (backslash character) followed by 0xFF, the loop can run 
continuously without ever performing the length check at the top. This causes 
backslashes to be written continually into the destination buffer without checking 
whether enough room is left. Therefore, because of the character being 
sign-extended when stored in the variable c, an unexpected code path is triggered 
that results in a buffer overflow. 
This vulnerability also reinforces another principle stated at the beginning of this 
chapter. Implicit actions performed by the compiler are subtle, and when reviewing 
source code, you need to examine the implications of type conversions and anticipate 
how the program will deal with unexpected values (in this case, the NOCHAR value, 
which users can specify because of the sign extension). 
Sign extension seems as though it should be ubiquitous and mostly harmless in C 
code. However, programmers rarely intend for their smaller data types to be 
sign-extended when they are converted, and the presence of sign extension often 