However, in many real world deployments, pre-shared keys
are not as well secured as static keys and may be shared across
devices. As Noise Explorer does not consider the compromise
of a PSK alone, it cannot be used to explore PFS in this
scenario.
Noise Explorer uses a relatively weak form of message
agreement. The strongest claim it can verify is that if Bob re-
ceives a message, then at some point Alice sent that message
and intended to send it to Bob. This does not imply the ab-
sence of replay attacks (where Bob receives Alice’s message
more than once), nor does it imply that Alice sent the message
in the same session that Bob received it. Contrastingly, our
analysis covers these properties, which we discuss further in
Section 3.2.
Noise Explorer does not verify security properties in the
presence of compromised ephemeral keys. We explore this
scenario and provide a full set of results in Section 5 which
allow protocol designers to evaluate which handshakes are
best suited to scenarios where RNGs may be suspect.
Cryptographic Primitives: Unlike Tamarin, ProVerif does
not handle Associative-Commutative (AC) function symbols.
Consequently, Noise Explorer has a lower ﬁdelity model of
DH exponentiation than our own. In particular, Noise Explorer
does not consider ((ga)b)c equal to ((ga)c)b. In contrast, we
1862    29th USENIX Security Symposium
USENIX Association
Setting (Model)
Automated & machine-checked
Reduction to cryptographic deﬁnitions
Systematic wrt. atomic capabilities
Strongest threat model computation
Generates reference implementations
Intruder-chosen payloads
Compromise s/e/PSK
Dishonest generation s/e
Active attacker
Anonymous agreement
Identity hiding (anonymity)
PFS of keys/messages
8 handshakes
Dowling [16]
Computational
All Noise handshakes
Noise Explorer [20]
Symbolic
(ProVerif)
Our Work
Symbolic
(Tamarin)
/
/
/
/
†
/
/
/
/ ∗
/
/
/
/
Table 2: Not all formal analyses are equivalent. We compare our framework and tool with prior works in terms of modeling choices, threat
models, veriﬁcation tools, and analyzed goals. Legend: †: These implementations are automatically generated, but not formally veriﬁed to be
correct or secure. ∗: PFS results for PSK handshakes are incomplete. For “Compromise s/e/PSK”, we require results with and without the
corresponding compromise (see Section 3.3.1). “Dishonest generation of e/s” refers to our Dre/Drs intruder capabilities (see Section 3.3.1).
model DH exponentiation as an AC symbol and the preceding
equality holds in our model. Both Noise Explorer and Tamarin
model the possibility of small subgroup elements in X25519,
however, only Tamarin models the possibility of ‘equivalent’
public keys (which are bitwise distinct elements that behave
equivalently under exponentiation). The DH models used
by Tamarin and ProVerif are compared and discussed further
in [11].
2.3.2 fACCE Noise Analysis [16]
Recently [16] proposed a new computational model for an-
alyzing multi-stage channel establishment protocols which
is of independent interest. Their approach is more scalable
than previous computational models and allows the authors
to reuse proofs between related protocols in order to reduce
the manual burden on the (human) prover.
They demonstrate the ﬂexibility and efﬁcacy of their model
on the Noise protocol framework. As in our work they con-
sider ephemeral key reveals and extend the Noise security
claims. However, despite their improved model, analyzing
each handshake is still a manual effort that requires signiﬁ-
cant work. Consequently, they focus on a subset of the Noise
handshakes (8 of 59) and target strong security properties
which hold only for later handshake messages. Contrastingly,
we are able to cover the entire handshake space and explore
the weaker properties that early handshake messages enjoy.
3 Security Goals and Threat Models
We describe in this section our formal model of the Noise
Framework, including how we handle crucial questions such
as the encoding of roles and identities, as well as security
claims and attacker capabilities. Our descriptions here are
mostly semi-formal, due to space constraints. The full formal
deﬁnitions, theorems, and proofs are given in [17].
3.1 Protocol and Environment Description
Formal models of security protocols must make critical de-
cisions about how to encode abstract notions such as agents’
state, identity, and agents’ interactions with other protocol par-
ticipants. In this section, we explain our decisions, describe
our model’s behaviors, and justify our model’s effectiveness.
As Noise is a protocol framework designed to be used in
concert with a higher level application about whose behavior
we can make few assumptions, we shall keep our model as
general as possible and avoid artiﬁcially restricting handshake
behavior.
Agents and sessions: We describe the behavior of protocol
participants in terms of agents with local state that engage in
protocol sessions with each other. We allow for an unbounded
number of agents, engaging in an unbounded number of ses-
sions and allow each agent to engage in multiple concurrent
sessions, potentially playing multiple roles. In contrast, some
previous veriﬁcations of Noise [20,21] assumed that there are
only two ‘honest’ agents. Whilst this might be appropriate to
model a single client talking to a ﬁxed server, it does not cap-
ture more general deployments, with multiple clients, multiple
servers, or parties that act as both, as in P2P networks like
Bitcoin or Lightning. In general, we allow the adversary to
determine when entities are created, when they engage in ses-
sions, and with whom they communicate. In Section 3.3, we
will discuss explicit adversary actions, such as compromising
a party, creating a dishonest agent, etc.
Identities: Some formal models endow agents with unique
identiﬁers, which are used in the protocol or in the protocol’s
security claims. Although internally we use unique identi-
ﬁers to distinguish the local state of each agent, we do not
USENIX Association
29th USENIX Security Symposium    1863
otherwise use these artiﬁcial labels. Instead, agents represent
each other’s identities in terms of the keys used in each ses-
sion. This captures behavior in handshakes with long-lived
keys reused between sessions, as well as handshakes rely-
ing on PSKs for authentication or handshakes only providing
ephemeral keys. This ensures we do not impose any artiﬁcial
restrictions on applications using the Noise protocol frame-
work, which make their own decisions as to how agents are
identiﬁed.
The Noise framework does describe an explicit session
identiﬁer that is output to the application when a handshake
concludes, which we use to identify speciﬁc sessions. We do
not (a priori) assume that this identiﬁer is unique or that the
application keeps it secret. We will see how this conservative
decision allows us to ﬁnd a previously undocumented appli-
cation requirement in Section 5.5. Additionally, we treat the
identities of remote parties as a tuple of exchanged key mate-
rial, for example, the other entity’s public ephemeral, public
static, or pre-shared keys which have been exchanged. This
allows us to deﬁne a meaningful notion of identity even for
handshakes without any long term secrets, i.e., that provide
anonymous connections for one or more participants.
Pre-messages: In some handshakes, Noise supports pre-
distributed public keys or PSKs, which one or both partici-
pants may have access to. In practice, an application using the
Noise framework will describe how this information would
be transferred and authenticated. Consequently, we treat this
part of the framework abstractly and simply distinguish when
the provided information is authentic, or when the adversary
has tampered with it due to some compromise of the authen-
tication infrastructure. For example, an application using a
certiﬁcate-based system cannot distinguish between legiti-
mate certiﬁcates and those an adversary has generated after
compromising the CA. In a Trust on First Use model, this
would mean (correctly) trusting an honest key or incorrectly
trusting an adversary controlled key. We describe in Sec-
tion 3.3 how we can use these recorded labels, in conjunction
with our parameterized adversary, to capture the full spectrum
of authentication behavior.
PSK: Similarly, we support the Noise PSK modes, which
offer an alternative and complementary notion of a pre-
distributed token. Noise does not specify how PSKs should be
treated. For example, they could be uniquely issued to a spe-
ciﬁc pair of agents, thus authenticating each party to the other,
or to a group of entities and thus provide only authentication
to this group, which is weaker than pairwise authentication.
In protocols using dummy keys, like WireGuard [13], the
PSK may even be publicly known. We allow the adversary
to assign shared keys to any combination of agents it wishes,
which includes all of the previously described scenarios. This
includes shared keys that are intended to be secret, but to
which the adversary legitimately has access or shared keys
that the adversary can access through dishonest means such
as compromising an agent.
Payloads: As the Noise Framework allows an application to
transmit data alongside message payloads, we carefully model
this functionality to give the adversary the maximum possible
power. For example, when we later consider agreement proper-
ties, we allow the adversary to specify each message payload,
as well as the handshake’s prologue. This can be interpreted
as the adversary inﬂuencing or even dictating the application-
level protocol. However, when checking for the secrecy of a
given payload, we must model this one payload as a randomly
drawn value, as is customary in the symbolic model.
Transport mode: When a handshake ﬁnishes, the Noise
Framework describes a transport phase, where applications
can send or receive messages to or from the other party.
We treat these messages like the handshake payloads in
the previous paragraph, with the addition of an explicit
sequence number as described in the speciﬁcation. Although
in principle there can be many transport phase messages, and
applications are not required to alternate between sending
and receiving, we show that it sufﬁces to consider the
initial transport phase messages sent by each party, allowing
us to exclude further transport phase messages from our
model [17, page 34]. Intuitively, this is due to the fact that
key material remains unchanged.
Consequently, in the remainder of this paper, we consider
the worst case scenario for the application layer and make
minimal assumptions, letting the adversary choose payloads
except the ones for which secrecy should be proven. Our
model is also useful for future application designers wishing
to check the speciﬁc combination of their application with
a particular Noise handshake. We make it easy to plug a
Tamarin model of an application layer into our handshake
pattern models. One can thereby derive speciﬁc guarantees
about the composition of both protocols, which will be at least
as strong as the guarantees we discuss in this paper, as we
assume the worst case application layer in our work.
3.2 Security Claims
Noise allows the application layer to send payloads alongside
handshake messages, using the best available protection at
that stage of the protocol. Consequently, these payloads may
have weaker security guarantees than payloads sent later after
the handshake’s completion. The Noise speciﬁcation claims
informal security properties for each handshake message and
for the ﬁrst two payloads after the handshake’s completion.
We analyze the security of each potential payload (i.e.,
reasoning on a per message basis) but consider well-deﬁned
security claims based on a comprehensive set of threat models.
We now describe these security claims and describe the threat
models in the next section. Our claims can be parameterized
by a role (Initiator I or recipient R), and a payload position,
which indicates its location in the handshake.
Deﬁnition 2 (Claims). We consider the following claims:
1864    29th USENIX Security Symposium
USENIX Association
Secrecy of a particular payload at position i ∈ N, from the
perspective of a given role r.
Non-injective agreement from the perspective of a re-
cipient accepting a payload at position i ∈ N on the
payload content, its additional data, and the sets Ss,Sr
of (supposedly) exchanged keys identifying respectively
the sender and the recipient. Ss and Sr may contain PSK,
public ephemeral key, or/and public static keys. If the
claim is true, this means that if the recipient, identiﬁed by
Sr, accepts a payload from a peer he believes is identiﬁed
by Ss, it was at some point sent by a peer identiﬁed by
Ss with an intended recipient identiﬁed by Sr. However,
there is no injective correspondence between these
events, i.e., replay is possible.
Injective agreement additionally requires that any success-
fully received message must correspond to a unique
legitimate transmission, ruling out replay attacks.
Anonymity of a given role r with respect to its public static
key.
These claims have a standard formalization. Agreement
claims are written as in [22]. Anonymity claims are encoded
as observational equivalence, as is standard in the symbolic
model setting [1, 5]. Speciﬁcally, anonymity is falsiﬁed when
an adversary conforming to a given threat model can dis-
tinguish an agent using a public, static key gs known to the
adversary from an agent using a second public, static key
gs(cid:48)
also known to the adversary. When this happens, given a
list of ‘candidate’ public keys containing an agent’s key, the
adversary can recognize this agent.
Secrecy and agreement claims broadly correspond to the
families of informal security levels given in the Noise speciﬁ-
cation: source and destination properties. Anonymity claims
model a part of identity hiding properties, which are an in-
formal notion used in the Noise speciﬁcation that refers to
the identities not being deducible by the attacker. In conjunc-
tion with our threat models, explained in the next section,
we will later see that these claims encompass the informal
descriptions from the Noise protocol speciﬁcation and go
considerably further in many respects.
3.3 Security Properties
We evaluate claims with respect to a range of threat models,
which are modeled by describing the adversary’s capabili-
ties. A claim and a threat model together specify a security
property, which we can evaluate. In this section, we describe
the adversary’s possible capabilities, how we combine these
capabilities into threat models, and how we can concisely
summarize the resulting information.
To motivate our formulation, let us focus ﬁrst on secrecy
and agreement properties. These have the general form of
τ =⇒ C∨t , where τ represents a ‘trigger’ that occurs when-
ever the claim in question applies (e.g., upon reception of a
message for agreement claims), C describes the guarantees
active Active adversary
Re
Rre
Rs
Rrs
Rpsk
R<
e
R<
re
R<
s
R<
rs
R<
psk
Actor ephemeral key is revealed
Peer’s ephemeral key is revealed
Actor’s static key is revealed
Peer’s static key is revealed
The pre-shared key owned by the actor for this session is revealed
Actor’s ephemeral key is revealed before the claim
Peer’s ephemeral key is revealed before the claim
Actor’s static key is revealed before the claim
Peer’s static key is revealed before the claim
The pre-shared key owned by the actor for this session is revealed
before the claim
Dpki Dishonest pre-message PKI
Dre
Drs
Peer’s ephemeral key is dishonestly generated
Peer’s static key is dishonestly generated
Figure 3: Atomic Adversary Capabilities. We refer to the set of
capabilities as A.
expected to hold for that claim (e.g., secrecy of the exchanged
payload for a secrecy claim), and t describes a threat model,