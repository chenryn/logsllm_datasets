#### Zero or more Occurrences (\*)
The special character "\*" (star) matches zero or more occurrences of
the previous character. For example, the pattern '1\*' matches zero or
more '1\'.
> **For this example create the following log.txt file:**
\$ vi log.txt
log: Input Validated log:
log: testing resumed log:
log:output created
Suppose you would like to view only the lines that contain \"log:\"
followed by a message. The message might immediately follow the log: or
might have some spaces. You don\'t want to view the lines that contain
\"log:\" without anything.
> **Display all the lines that contain \"log:\" followed by one or more
> spaces followed by a character:**
\$ sed -n \'/log: \*./ p\' log.txt log: Input Validated
log: testing resumed
log:output created
Note: In the above example the dot at the end is necessary. If not
included, sed will also print all the lines containing \"log:\" only.
#### One or more Occurrence (\\+)
The special character "\\+" matches one or more occurrence of the
previous character. For example, a space before "\\+", i.e " \\+"
matches at least one or more space character.
Let us use the same log.txt as an example file.
> **Display all the lines that contain \"log:\" followed by one or more
> spaces:**
\$ sed -n \'/log: \\+/ p\' log.txt log: Input Validated
log: testing resumed
Note: In addition to not matching the \"log:\" only lines, the above
example also didn\'t match the line \"log:output created\", as there is
no space after \"log:\" in this line.
#### Zero or one Occurrence (\\?)
The special character "?" matches zero or one occurrences of the
previous character as shown below.
\$ sed -n \'/log: \\?/ p\' log.txt log: Input Validated
log:
log: testing resumed log:
log:output created
#### Escaping the Special Character (\\)
If you want to search for special characters (for example: \* , dot) in
the content you have to escape the special character in the regular
expression.
\$ sed -n \'/127\\.0\\.0\\.1/ p\' /etc/hosts
127.0.0.1 localhost.localdomain localhost
#### Character Class (\[0-9\])
The character class is nothing but a list of characters mentioned within
a square bracket; this is used to match only one out of several
characters.
> **Match any line that contains 2 or 3 or 4:**
\$ sed -n \'/\[234\]/ p\' employee.txt 102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
Within the square bracket, you can use a hyphen you can specify a range
of characters. For example, \[0123456789\] can be represented by
\[0-9\], and alphabetic ranges can be specified such as \[a-z\],\[A-Z\]
etc.
> **Match any line that contains 2 or 3 or 4 (alternate form):**
\$ sed -n \'/\[2-4\]/ p\' employee.txt 102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
## Additional Regular Expressions
#### OR Operation (\|)
The pipe character (\|) is used to specify that either of two whole
subexpressions could occur in a position. "subexpression1\|
subexpression2" matches either subexpression1 or subexpression2.
> **Print lines containing either 101 or 102:**
\$ sed -n \'/101\\\|102/ p\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT Manager
Please note that the \| symbol is escaped with a /.
> **Print lines that contain a character from 2 to 3 or that contain the
> string 105:**
\$ sed -n \'/\[2-3\]\\\|105/ p\' employee.txt 102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin 105,Jane Miller,Sales Manager
#### Exactly M Occurrences ({m})
A Regular expression followed by {m} matches exactly m occurrences of
the preceding expression.
For this example create the following numbers.txt file.
\$ vi numbers.txt 1
12
123
1234
12345
123456
> **Print lines that contain any digit (will print all lines):**
\$ sed -n \'/\[0-9\]/ p\' numbers.txt 1
12
123
1234
12345
123456
> **Print lines consisting of exactly 5 digits:**
\$ sed -n \'/\^\[0-9\]\\{5\\}\$/ p\' numbers.txt 12345
#### M to N Occurrences ({m,n})
A regular expression followed by {m,n} indicates that the preceding item
must match at least m times, but not more than n times. The values of m
and n must be non-negative and smaller than 255.
> **Print lines consisting of at least 3 but not more than 5 digits:**
\$ sed -n \'/\^\[0-9\]\\{3,5\\}\$/ p\' numbers.txt 123
1234
12345
A Regular expression followed by {m,} is a special case that matches m
or more occurrences of the preceding expression.
#### Word Boundary (\\b)
\\b is used to match a word boundary. \\b matches any character(s) at
the beginning (\\bxx) and/or end (xx\\b) of a word, thus \\bthe\\b will
find the but not they. \\bthe will find the or they.
Create the following sample file for testing.
\$ cat words.txt
word matching using: the word matching using: thethe word matching
using: they
> **Match lines containing the whole word \"the\":**
\$ sed -n \'/\\bthe\\b/ p\' words.txt word matching using: the
Please note that if you don\'t specify the \\b at the end, it will match
all lines.
> **Match lines containing words that start with "the":**
\$ sed -n \'/\\bthe/ p\' words.txt word matching using: the
word matching using: thethe word matching using: they
#### Back References (\\n)
Back references let you group expressions for further use.
> **Match only the line that has the word \"the\" repeated twice:**
\$ sed -n \'/\\(the\\)\\1/ p\' words.txt
Using the same logic, the regular expression \"\\(\[0-9\]\\)\\1\"
matches two digit number in which both the digits are same number---like
11,22,33
\...
## Sed Substitution Using Regular Expression
The following are few sed substitution examples that uses regular
expressions.
> **Replace the last two characters in every line of employee.txt with
> \",Not Defined\":**
\$ sed \'s/..\$/,Not Defined/\' employee.txt 101,John Doe,C**,Not
Defined**
> 102,Jason Smith,IT Manag**,Not Defined** 103,Raj Reddy,Sysadm**,Not
> Defined** 104,Anand Ram,Develop**,Not Defined** 105,Jane Miller,Sales
> Manag**,Not Defined**
>
> **Delete the rest of the line starting from "Manager":**
\$ sed \'s/Manager.\*//\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT 103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
105,Jane Miller,Sales
> **Delete all lines that start with \"#\" :**
sed -e \'s/#.\*// ; /\^\$/ d\' employee.txt
Create the following test.html for the next example:
\$ vi test.html
\\\Hello World!\\\
> **Strip all html tags from test.html:**
\$ sed -e \'s/\\]\*\>//g\' test.html Hello World!
> **Remove all comments and blank lines:**
sed -e \'s/#.\*//\' -e \'/\^\$/ d\' /etc/profile
> **Remove only the comments. Leave the blank lines:**
sed -e \'/\^#.\*/ d\' /etc/profile
You can convert DOS newlines (CR/LF) to Unix format Using sed. When you
copy the DOS file to Unix, you could find \\r\\n in the end of each
line.
> **Convert the DOS file format to Unix file format using sed:**
sed \'s/.\$//\' filename
# Chapter 4. Sed Execution
## Multiple Sed Commands in Command Line
As we showed in Chapter 1, there are several methods to execute multiple
sed commands from the command line.
#### Use multiple -e option in the command line
Use multiple sed commands using -e sed command line option as shown
below:
sed -e \'command1\' -e \'command2\' -e \'command3\'
> **Search for root, or nobody, or mail in the /etc/passwd file:**
sed -n -e \'/\^root/ p\' -e \'/\^nobody/ p\' -e \'/\^mail/ p\'
/etc/passwd
The above command should be executed in a single line as shown below.
sed -n -e \'/\^root/ p\' -e \'/\^nobody/ p\' -e \'/\^mail/ p\'
/etc/passwd
#### Break-up several sed commands using \\
When you have a very long command, such as when executing several sed
commands in the command line using -e, you can break it up using \\
sed -n -e \'/\^root/ p\' \\
-e \'/\^nobody/ p\' \\
-e \'/\^mail/ p\' \\
/etc/passwd
#### Group multiple commands using { }
When you have a lot of sed commands to be executed, you can group them
together using { } as shown below.
sed -n \'{
/\^root/ p
/\^nobody/ p
/\^mail/ p
}\' /etc/passwd
## Sed Script Files
If you want to reuse a set of sed commands, create a sed script file
with all the sed commands and execute it using -f command line option as
shown below.
First, create a file that contains all the sed commands as shown below.
You already know what these individual sed commands do, as we explained
it in the previous sections.
\$ vi mycommands.sed
s/\\(\[\^,\]\*\\),\\(\[\^,\]\*\\),\\(.\*\\).\*/\\2,\\1,\\3/g
s/\^.\*/\/
s/Developer/IT Manager/ s/Manager/Director/
Next, execute this sed command file on the input file.
\$ sed -f mycommands.sed employee.txt
\
\
\
\
\
## Sed Comments
Sed comments start with a #. We all understand that sed uses very
cryptic language. The sed commands that you write today might look
unfamiliar if you view them after a long time. So, it is recommended to
document what you mean inside the sed script file using sed comments, as
shown below.
\$ vi mycommands.sed
\# Swap field 1 (employee id) with field 2 (employee name)
s/\\(\[\^,\]\*\\),\\(\[\^,\]\*\\),\\(.\*\\).\*/\\2,\\1,\\3/g
\# Enclose the whole line within \ s/\^.\*/\/
\# Replace Developer with IT Manager s/Developer/IT Manager/
\# Replace Manager with Director s/Manager/Director/
Note: If the 1st 2 characters of the 1st line in the \*.sed script are
#n, sed will automatically use the -n (don\'t print the pattern buffer)
option.
## Sed as an Interpreter
Just as you write shell scripts and execute them from the command line
just by calling the file name, you can set up sed scripts for execution
from the command line, i.e. Sed can be involved as an interpreter. To do
this, add \"#!/bin/sed -f\" as the 1st line to your sed- script.sh file
as shown below.
\$ vi myscript.sed
#!/bin/sed -f
\# Swap field 1 (employee id) with field 2 (employee name)
s/\\(\[\^,\]\*\\),\\(\[\^,\]\*\\),\\(.\*\\).\*/\\2,\\1,\\3/g
\# Enclose the whole line within \ s/\^.\*/\/
\# Replace Developer with IT Manager
s/Developer/IT Manager/
\# Replace Manager with Director s/Manager/Director/
Now, execute the sed script directly by invoking it from the command
line.
chmod u+x myscript.sed
./myscript.sed employee.txt
You can also specify -n in the 1st line of the sed script to suppress
output.
\$ vi testscript.sed
#!/bin/sed -nf
/root/ p
/nobody/ p
Now, execute the above test script as shown below.
chmod u+x testscript.sed
./testscript.sed /etc/passwd
Just for testing purposes, remove the -n from the 1st line of
testscript.sed and execute it again to see how it works.
Important note: you must use -nf (and not -fn). If you specify -fn,
you\'ll get the following error message when you execute the sed script.
\$ ./testscript.sed /etc/passwd
/bin/sed: couldn\'t open file n: No such file or directory
## Modifying the Input File Directly
As you know already, sed doesn\'t modify the input files by default. Sed
writes the output to standard output. When you want to store that in a
file, you redirect it to a file (or use the w command.
Before we continue with this example, take a backup of employee.txt:
cp employee.txt employee.txt.orig
To make a modification directly on the input-file, you typically
redirect the output to a temporary file, and then rename the temporary
file to a new file.
sed \'s/John/Johnny/\' employee.txt \> new-employee.txt mv
new-employee.txt employee.txt
Instead, you can use the sed command line option -i, which lets sed
directly modify the input file.
> **Replace John with Johnny in the original employee.txt file itself:**
\$ sed -i \'s/John/Johnny/\' employee.txt
\$ cat employee.txt 101,Johnny Doe,CEO 102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
105,Jane Miller,Sales Manager
Again, please pay attention that **-i modifies the input-file**.
Probably you will want to do this sometimes, but be very careful. One
thing you can do to protect yourself is to add a file extension whenever
you use -i. Sed will make a backup of the original file before writing
the new content.
> **Replace John with Johnny in the original employee.txt file but save
> a backup copy:**
\$ sed -ibak \'s/John/Johnny/\' employee.txt
This takes the backup of the original file as shown below.
\$ cat employee.txtbak 101,John Doe,CEO
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer 105,Jane Miller,Sales Manager
The original input file was modified by the above sed command.
\$ cat employee.txt 101,Johnny Doe,CEO 102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
105,Jane Miller,Sales Manager
Instead of -i, you can also use the longer form, \--in-place. Both of
the following commands are the same.
sed -ibak \'s/John/Johnny/\' employee.txt
sed \--in-place=bak \'s/John/Johnny/\' employee.txt
Finally, restore the original employee.txt file, as we need that for the
rest of our examples:
cp employee.txt.orig employee.txt
# Chapter 5. Additional Sed Commands
## Append Line After (a command)
You can insert a new line after a specific location by using the sed
append command (a).
> **Syntax:**
\$ sed \'\[address\] a the-line-to-append\' input-file
> **Add a new record to the employee.txt file after line number:**
\$ sed \'2 a 203,Jack Johnson,Engineer\' employee.txt 101,John Doe,CEO
> 102,Jason Smith,IT Manager **203,Jack Johnson,Engineer** 103,Raj
> Reddy,Sysadmin 104,Anand Ram,Developer 105,Jane Miller,Sales Manager
>
> **Add a new record to the end of the employee.txt file:**
\$ sed \'\$ a 106,Jack Johnson,Engineer\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer 105,Jane Miller,Sales Manager **106,Jack