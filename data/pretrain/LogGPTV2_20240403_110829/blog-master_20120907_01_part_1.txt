## PostgreSQL general public partition table trigger  
### 作者                                                                                         
digoal                                                                                 
### 日期                                                                                                                                                     
2012-09-07                                                                               
### 标签                                                                                  
PostgreSQL , trigger , partition table   
----                                                                                                                                                  
## 背景                     
触发器在数据库中的使用非常广泛, 例如用来跟踪用户行为, 用户登录过滤(Oracle中), 数据复制, 数据分区等等.   
以前写过一些类似的应用场景案例分享, 感兴趣的朋友可以参考本文的末尾部分, 有相关的链接.   
特别是在数据分区应用场景中, PostgreSQL目前没有将分区这部分代码作为COMMAND来实现.   
因此DBA可能经常需要写繁琐的触发器, 例如昨天我们这边一位同事写的触发器, 我看了之后第一感觉就是太繁琐, 维护麻烦, 如下 :   
```  
CREATE OR REPLACE FUNCTION digoal.p_insert_info_trigger()  
 RETURNS trigger  
 LANGUAGE plpgsql  
AS $function$  
BEGIN  
IF ( NEW.createtime >= DATE '2012-09-01' AND NEW.createtime = DATE '2012-09-02' AND NEW.createtime = DATE '2015-06-19' AND NEW.createtime  create table rmt.tbl_login_log(id int primary key,info text,crt_time timestamp(6));  
```  
创建测试子表，子表的命名规则：前缀_后缀。  
```  
digoal=> create table tbl_login_log_201504 (like tbl_login_log including all) inherits (tbl_login_log);  
```  
在父表上创建触发器，创建触发器时指定2个参数，分别表示父表的表名，以及分区字段名。  
```  
digoal=> create trigger tg_tbl_login_log_insert before insert on rmt.tbl_login_log for each row execute procedure general_trg_insert('tbl_login_log','crt_time');  
```  
插入测试数据：  
```  
digoal=> insert into rmt.tbl_login_log values (1,E'I\'m digoal.zhou', now());  
NOTICE:  v_sql: insert into rmt.tbl_login_log_201504 select ('(1,"I''m digoal.zhou","2015-04-19 18:22:18.21593")'::rmt.tbl_login_log).*  
INSERT 0 0  
```  
查看子表是否有数据。  
注意检查逃逸字符是否正常，这个在写触发器函数的时候一定要注意。  
本例使用replace将单引号替换成两个单引号规避了这个问题。  
```  
digoal=> select tableoid::regclass,* from rmt.tbl_login_log;  
         tableoid         | id |      info       |         crt_time            
--------------------------+----+-----------------+---------------------------  
 rmt.tbl_login_log_201504 |  1 | I'm digoal.zhou | 2015-04-19 18:22:18.21593  
(1 row)  
```  
CPU单核插入速度 :   
```  
digoal=> insert into rmt.tbl_login_log select generate_series(2,100000),'digoal',now();  
INSERT 0 0  
Time: 19803.455 ms  
```  
直接插入子表的速度 :   
```  
digoal=> truncate rmt.tbl_login_log_201504 ;  
TRUNCATE TABLE  
Time: 30.486 ms  
digoal=> insert into rmt.tbl_login_log_201504 select generate_series(2,100000),'digoal',now();  
INSERT 0 99999  
Time: 431.048 ms  
```  
说明通用触发器比直接插入子表的速度下降45倍. 所以对于插入请求较多的表不适合使用.  
使用非通用触发器的性能测试如下 :   
触发器函数 :   
```  
CREATE OR REPLACE FUNCTION p_insert_info_trigger()  
 RETURNS trigger  
 LANGUAGE plpgsql  
AS $function$  
BEGIN  
IF ( NEW.crt_time >= DATE '2015-04-01' AND NEW.crt_time  drop trigger tg_tbl_login_log_insert on rmt.tbl_login_log;  
DROP TRIGGER  
Time: 0.937 ms  
```  
创建触发器 :   
```  
digoal=> create trigger tg_tbl_login_log_insert before insert on rmt.tbl_login_log for each row execute procedure p_insert_info_trigger();  
CREATE TRIGGER  
Time: 1.006 ms  
```  
删除表记录 :   
```  
digoal=> truncate rmt.tbl_login_log_201504 ;  
TRUNCATE TABLE  
Time: 22.200 ms  
```  
插入同样的数据 :   
```  
digoal=> insert into rmt.tbl_login_log select generate_series(2,100000),'digoal',now();  
INSERT 0 0  
Time: 2734.205 ms  
```  
结果使用非通用触发器的性能是通用触发器的7倍.   
通用触发器插入一个没有创建好子表的情况，将报错如下：  
```  
digoal=> insert into rmt.tbl_login_log values (1,E'I\'m digoal.zhou', '2012-01-01'::timestamp);  
ERROR:  relation "rmt.tbl_login_log_201201" does not exist  
LINE 1: insert into rmt.tbl_login_log_201201 select ('(1,"I''m digoa...  
                    ^  
QUERY:  insert into rmt.tbl_login_log_201201 select ('(1,"I''m digoal.zhou","2012-01-01 00:00:00")'::rmt.tbl_login_log).*  
CONTEXT:  PL/pgSQL function general_trg_insert() line 24 at EXECUTE statement  
Time: 0.849 ms  
```  
正因为是通用触发器，所以当然是为了通用而设计的，下面使用这个通用触发器再建立一个分区表的使用。  
表结构与前面一个不一样，分区字段也不一样，schema也不一样。看看能不能正常使用？  
```  
digoal=> create table rmt.tbl_logout_log  
(userid int primary key,   
firstname text,   
lastname text,   
age int,   
email text,   
ctime timestamp(6));  
```  