Nemu is a stand-alone detector with the built-in capability of processing net-
work traces both online and oﬄine (e.g., from PCAP traces) as well as raw
binary data to detect shellcode. Similarly to Libemu, the detection algorithm
of Nemu is implemented iteratively by applying pre-processing, emulation and
heuristic-based detection for each instruction. Also in this case, instruction de-
coding is handled by the libdasm disassembly library, while the emulation and
heuristic-based detection steps are the core of the tool implementation. We re-
ceive Nemu from the author in 2014. When carrying out our tests we notice
that the version of Nemu we received includes all the heuristics described in
Section 2, except the one for detecting WX instructions, but including the addi-
tional heuristics related to resolving Kernel32.dll address and SEH-based GetPC
code introduced in Gene [3]. The author conﬁrms our ﬁnding. In more detail, a
1 The authors plan to release all the implemented techniques as Metasploit plugins.
390
A. Abbasi et al.
GetPC code heuristic is ﬁrst used to determine the entry point of the shellcode.
During emulation, eight individual heuristics detect Kernel32.dll base address
resolution (seven targeting the Process Environment Block resolution method
and one targeting the Backward Searching resolution method) and one heuristic
detects self-modifying code using the Payload Read Threshold. Finally, a com-
bination of the Process memory scanning and SEH-based GetPC heuristics is
used after detection as a second-stage mechanism to reduce the amount of false
positives.
To verify our evasion techniques, we ﬁrst collect a set of samples that trig-
ger the detection of both Libemu and Nemu. For Libemu, we create a simple
shellcode consisting of GetPC instructions followed by a number of NOP in-
structions. For Nemu, we use eight shellcodes provided by the author as sanity
tests, each triggering one of the Kernel32.dll heuristics. In addition, we write a
simple self-modifying shellcode to trigger the Payload Read heuristic. To do this
we encode a plain shellcode by XORing it with a random key and prepending
a decoder which ﬁrst performs a GetPC and then extracts the encoded payload
on the stack and executes it. We then verify that both Libemu and Nemu can
detect the shellcodes we created.
3.1 Evasions Exploiting Implementation Limitations
Limitations of the Pre-processor Implementation
In most EBNIDSes, static analysis is applied in the pre-processing step to de-
termine which sequences of bytes should be emulated [2, 4, 8]. This makes these
EBNIDSes susceptible to anti-disassembly techniques aimed at preventing the
pre-processor to correctly decode the shellcode instructions.
For example, the EBNIDS presented in [8] proposes a hybrid approach which
ﬁrst uses static techniques to detect a form of GetPC code and then applies
two-way traversal and backward data-ﬂow analysis to pinpoint likely decryption
routines which are then passed on to an emulator. Based on this approach, dis-
assembly starts from the GetPC seeding instruction and, upon encountering an
instruction that could indicate conditional branching or memory-writing behav-
iors, backward data-ﬂow analysis is applied to obtain an instruction chain that
ﬁlls-in all required variables. Conditional branching, self-modifying code and in-
direct addressing (using runtime-generated values) can be used to prevent this
process to succeed.
Although the authors state that self-modifying code or indirect addressing is
unlikely to appear before the GetPC code (since this would require a base-address
for referencing) we argue that this is not the case. First, it is possible for an
attacker to construct the shellcode on the stack in a dynamic fashion, including
the GetPC code. Secondly, the attacker can avoid GetPC seeding instructions
altogether and construct the entire shellcode on the stack. This would require
a full emulation for detection, since it would be unfeasible to detect GetPC
seeding instructions contained in a self-modifying code statically, especially if
instructions are encoded using a randomized key. In the absence of the capacity
to detect seeding instructions, subsequent analysis will fail as well.
Emulation Based NIDS
391
Based on these observations, we create a shellcode encoder which consists of
XORing the shellcode with a random key and prepending a decoder armored
with anti-disassembly GetPC code. To build the anti-disassembly GetPC code
we adapt four existing techniques proposed by Branco et. al. [13] and Sikorski
et. al. [14] for preventing malware analysis:
1. Use of garbage bytes and opaque predicates: the insertion of garbage bytes af-
ter so-called opaque predicate instructions confuses some disassemblers into
taking the bytes immediately after such an instruction as the starting point
of a next instruction. Opaque predicates are logical tautologies or contradic-
tions which are constructed in such a way that this can not be easily deter-
mined without evaluating them. For example, (GetUserID() xor 0x0A0A)
is opaque for any instance evaluating it that does not know beforehand the
result of GetUserID(), while an attacker can construct this when targeting
user with id 0x0A0A speciﬁcally.
2. Flow redirection to the middle of an instruction: certain instructions are
crafted to contain other instructions in the middle of their opcodes. During
execution, the code ﬂow is redirected to the middle of instructions to execute
those “hidden” inside. This requires full emulation for proper disassembly.
3. Push/pop-math stack-constructed shellcode: instead of executing instructions
directly, the opcodes are XORed with a static value, pushed onto the stack
and control is transferred to the stack. This way, full emulation is required
to obtain the instructions.
4. Code transposition: a piece of code is split into separate parts and re-arranged
in a random order, tied together with several jumps. In addition, instead of
returning to the original destination of a call operation (a characteristic of
GetPC code), the destination pushed on the stack by the call operation is
modiﬁed by the appropriate oﬀset.
We evaluate these anti-disassembly techniques against Nemu and Libemu by
encoding our test shellcodes with the anti-disassembly encoder described above.
If the anti-disassembly encoder works, the pre-processor cannot correctly identify
the GetPC code and the shellcode analysis will stop without raising alerts.
Table 1. Anti-disassembly techniques detection rate
Garbage Byte Flow Redirect Push/Pop
Nemu 9/9
Libemu 0/1
9/9
1/1
Math
8/9
0/1
Code Trans-
position
8/9
1/1
Table 1 shows the results of the tests. While we could bypass Libemu using
Garbage bytes and Push/Pop math techniques, Nemu has better detection in
most cases with the only successful evasion technique being Code Transposition
and Push/pop math in one case. We believe this is due to the fact that Nemu
did not properly disassemble all the instructions of our armored decoder. This
392
A. Abbasi et al.
impacts the emulation of such instructions, eventually preventing the correct
execution of the decoding routine. As a result, the decoded shellcode cannot
be completely emulated and this causes the failure of heuristics requiring the
observation of a large number of instructions to trigger. However, we consider this
is an exceptional case, while in general we conclude that the evasion techniques
were ineﬀective against Nemu.
Limitations of the Emulator Implementation
Unsupported Instructions. Most EBNIDSes do not provide full emulation
capabilities and only emulate a subset of the full instruction set. For example, the
approaches presented by Polychronakis et. al. in [1, 9] use libdasm as disassembler
and implement a subset of the IA-32 instruction set, including most general
purpose instructions but no FPU, MMX or SSE instructions.
It is possible for an attacker to construct a shellcode which incorporates in-
structions not covered by the limited emulators, therefore causing emulation
to stop when such instructions are encountered, and therefore preventing the
heuristic-based detection. Additionally, it is possible to use the results of non-
emulated instructions as an integral part of a self-modifying routine.
In addition to emulating only a subset of the IA-32 instruction set, all emula-
tors provide only a subset of the complete system functionality, including syscall
emulation, virtual memory and the presence of process images. These limitations
in the implementation of system functionality emulation can be abused by an
attacker in order to thwart successful emulation and thus detection.
Based on these observations, we create a shellcode encoder which consists of
XORing the shellcode with a random key and prepending a decoder made with
instructions which are not supported by some types of emulators. In more detail,
we create ﬁve versions of the decoder, each using diﬀerent types of instructions:
1. FPU instructions (using FNSTENV).
2. FPU instructions (using FNSAVE).
3. MMX instructions.
4. SSE instructions.
5. Instructions considered obsolete or undocumented by some disassemblers
and emulators such as salc or xlatb instructions.
We evaluate these anti-disassembly techniques against Nemu and Libemu by
encoding our test shellcodes with the anti-disassembly encoder described above.
If the encoder works, the emulator cannot correctly execute the GetPC code and
the shellcode analysis will stop without raising alerts.
Table 2 summarizes the test results. With the only exception of the FNSTENV
FPU instruction, all other instruction sets prevented the emulator to successfully
emulate the decoder and detect the shellcodes.
Emulator Detection. Emulator detection refers to a class of techniques which
shellcodes can use to detect if they are run within an emulator. This approach
Emulation Based NIDS
393
relies on certain behavioral quirks present in all available emulators. A good
example of these quirks is the method proposed in [9], in which the emulator
initializes all its eight general purpose registers to hold the absolute address of
the ﬁst instruction of each execution chain. This introduces a detection vector,
since this situation is highly unlikely to arise in a real-world scenario. While set-
ting the stack pointer to point to the beginning of the shellcode most certainly
does not aﬀect its correct execution, shellcode could include emulation detection
tricks which check the stack data preceding the shellcode (using the ESP as the
base). The preceding data could be checked for valid stack frames or, better yet,
data known to reside on the stack of the vulnerable program. This can be done
through hardcoded addressing or through egg-hunting. The emulator would have
to construct a legitimate program stack and mirror the vulnerable program in
order to avoid being detected. A ﬁnal limitation is that in various exploitation
scenarios, including casual stack overﬂows, the EBP registers get overwritten
with the 4 bytes preceding the new instruction pointer, yet the emulator initial-
izes EBP to hold the shellcode base address. In this way an attacker could include
4 bytes crucial to successful execution of the shellcode before the new instruction
pointer which the emulator would not properly handle. Research about emulator
detection [15, 16] has shown that even mature, well-developed and maintained
system emulators often provide only a subset of the functionality of the emulated
platform or display behaviors that allow attackers to detect their presence. The
examples we provided in our paper are speciﬁc to the tested EBNIDS emulators
but the general principle remains: any diﬀerence of the emulated environment
with regard to the target environment oﬀers an attacker opportunities for eva-
sion. Since we are dealing with network-based IDS especially the context part
of the target environment will be infeasible and unscalable to completely mirror
by the emulator for scalability reasons.
We propose three techniques to detect that the shellcode is being executed
in Libemu or Nemu. In the case of Libemu all general purpose registers are ini-
tialized to the same value, something that virtually never occurs in a genuine
exploited process. In the case of Nemu all general purpose registers are initial-
ized to static values, even though the author mentions they are initialized to
the address of the execution trace [3]. Also, for Nemu the CPUID instruction
is decoded but not emulated. Usually, the CPUID instruction returns a CPU
vendor string in certain registers when called. Nemu does not set these regis-
ters, hence providing a reliable way for detection. The third technique against
all types of emulators is a timing attack. Since emulators perform slower than
the actual CPU they seek to emulate, we can measure the timing diﬀerence for
Table 2. Unsupported instructions evasion detection rate
FPU
STENV
FN-
Nemu 9/9
Libemu 1/1
FPU
SAVE
0/9
0/1
FN-
MMX
SSE
OBSOL
0/9
0/1
0/9
0/1
0/9
0/1
394
A. Abbasi et al.
Table 3. Diﬀerence in actual running time (in milliseconds) between Nemu, Libemu
and native CPU
Opaque instructions Intensive loop Integrated loop RDA
52.90
177.56
0.68
37.81
173.49
0.30
Nemu 6.80
Libemu 44.07
native 0.148
9.08
75.20
2.10
executing a series of instructions. We implement a timing attack using relative
performance (instead of absolute performance which is very hardware dependent
as well), executing two series of instructions (a NOP loop vs. a more intensive
arithmetic loop) and take their ratio as a measure. On emulated environments
the ratio will be far higher than on non-emulated environments. Table 3 shows
an example of the running time diﬀerence between Nemu, Libemu and a native