-   prune
-   remove
-   restart
-   restore
-   start
-   stop
-   sync
-   unmount
-   unpause
:::
[*pod*]{.emphasis} 事件类型报告以下状态：
::: itemizedlist
-   create
-   kill
-   pause
-   remove
-   start
-   stop
-   unpause
:::
[*镜像*]{.emphasis} 事件类型会报告以下状态：
::: itemizedlist
-   prune
-   push
-   pull
-   save
-   remove
-   tag
-   untag
:::
[*系统*]{.emphasis}类型报告以下状态：
::: itemizedlist
-   refresh
-   renumber
:::
[*卷*]{.emphasis}类型报告以下状态：
::: itemizedlist
-   create
-   prune
-   remove
:::
::: itemizedlist
**其它资源**
-   `man podman-events`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_monitoring-containers_building-running-and-managing-containers.html#proc_monitoring-podman-events_assembly_monitoring-containers}监控 Podman 事件 {.title}
:::
您可以监控并打印 Podman
中发生的事件。每个事件都包括一个时间戳、类型、状态、名称（如果适用）和镜像（如果适用）。
::: itemizedlist
**流程**
-   显示 Podman 事件：
    ::: itemizedlist
    -   要显示所有 Podman 事件，输入：
        ``` literallayout
        $ podman events
        2020-05-14 10:33:42.312377447 -0600 CST container create 34503c192940 (image=registry.access.redhat.com/ubi8/ubi:latest, name=keen_colden)
        2020-05-14 10:33:46.958768077 -0600 CST container init 34503c192940 (image=registry.access.redhat.com/ubi8/ubi:latest, name=keen_colden)
        2020-05-14 10:33:46.973661968 -0600 CST container start 34503c192940 (image=registry.access.redhat.com/ubi8/ubi:latest, name=keen_colden)
        2020-05-14 10:33:50.833761479 -0600 CST container stop 34503c192940 (image=registry.access.redhat.com/ubi8/ubi:latest, name=keen_colden)
        2020-05-14 10:33:51.047104966 -0600 CST container cleanup 34503c192940 (image=registry.access.redhat.com/ubi8/ubi:latest, name=keen_colden)
        ```
        要退出日志记录，请按 CTRL+c。
    -   要只显示 Podman 创建事件，请输入：
        ``` literallayout
        $ podman events --filter event=create
        2020-05-14 10:36:01.375685062 -0600 CST container create 20dc581f6fbf (image=registry.access.redhat.com/ubi8/ubi:latest)
        2019-03-02 10:36:08.561188337 -0600 CST container create 58e7e002344c (image=registry.access.redhat.com/ubi8/ubi-minimal:latest)
        2019-03-02 10:36:29.978806894 -0600 CST container create d81e30f1310f (image=registry.access.redhat.com/ubi8/ubi-init:latest)
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   `man podman-events`{.literal}
:::
:::
:::
[]{#assembly_using-the-container-tools-api_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_using-the-container-tools-api_building-running-and-managing-containers.html#assembly_using-the-container-tools-api_building-running-and-managing-containers}第 15 章 使用 container-tools API {.title}
:::
新的基于 Podman 2.0 API 的 REST 替换了使用 varlink 库的 Podman 的旧远程
API。新的 API 可以在根和无根环境中工作。
Podman v2.0 RESTful API 由 Libpod API 组成，为 Podman 和 Docker 兼容的
API 提供支持。借助这一新的 REST API，您可以从 cURL、Postman、Google
的高级 REST 客户端等平台调用 Podman。
::: section
::: titlepage
# []{#assembly_using-the-container-tools-api_building-running-and-managing-containers.html#proc_enabling-the-podman-api-using-systemd-in-root-mode_assembly_using-the-container-tools-api}在 root 模式中使用 systemd 启用 Podman API {.title}
:::
以下操作过程演示了如何进行以下操作：
::: orderedlist
1.  使用 systemd 激活 Podman API 套接字。
2.  使用 Podman 客户端执行基本命令。
:::
::: itemizedlist
**先决条件**
-   已安装 `podman-remote`{.literal} 软件包。
    ``` literallayout
    # yum install podman-remote
    ```
:::
::: orderedlist
**流程**
1.  立即启动该服务：
    ``` literallayout
    # systemctl enable --now podman.socket
    ```
2.  使用 `docker-podman`{.literal} 软件包启用到
    `var/lib/docker.sock`{.literal} 的链接：
    ``` literallayout
    # yum install podman-docker
    ```
:::
::: orderedlist
**验证步骤**
1.  显示 Podman 的系统信息：
    ``` screen
    # podman-remote info
    ```
2.  验证链接：
    ``` screen
    # ls -al /var/run/docker.sock
    lrwxrwxrwx. 1 root root 23 Nov  4 10:19 /var/run/docker.sock -> /run/podman/podman.sock
    ```
:::
::: itemizedlist
**其它资源**
-   [podman v2.0 RESTful
    API](http://docs.podman.io/en/latest/Reference.html){.link} -
    上游文档
-   [第一次查看 Podman 2.0
    API](http://crunchtools.com/a-first-look-at-the-podman-2-0-api/){.link} -
    文章
-   [Sneak peek：Podman 的新 REST
    API](https://www.redhat.com/sysadmin/podmans-new-rest-api){.link} -
    文章
:::
:::
::: section
::: titlepage
# []{#assembly_using-the-container-tools-api_building-running-and-managing-containers.html#proc_enabling-the-podman-api-using-systemd-in-rootless-mode_assembly_using-the-container-tools-api}在无根模式下使用 systemd 启用 Podman API {.title}
:::
此流程演示了如何使用 systemd 激活 Podman API 套接字和 podman API 服务。
::: itemizedlist
**先决条件**
-   已安装 `podman-remote`{.literal} 软件包。
    ``` literallayout
    # yum install podman-remote
    ```
:::
::: orderedlist
**流程**
1.  立即启用并启动该服务：
    ``` literallayout
    $ systemctl --user enable --now podman.socket
    ```
2.  可选。启用使用 Docker 与无根 Podman 套接字交互的程序：
    ``` screen
    $ export DOCKER_HOST=unix:///run/user//podman//podman.sock
    ```
:::
::: orderedlist
**验证步骤**
1.  检查套接字的状态：
    ``` literallayout
    $ systemctl --user status podman.socket
    ● podman.socket - Podman API Socket
     Loaded: loaded (/usr/lib/systemd/user/podman.socket; enabled; vendor preset: enabled)
    Active: active (listening) since Mon 2021-08-23 10:37:25 CEST; 9min ago
    Docs: man:podman-system-service(1)
    Listen: /run/user/1000/podman/podman.sock (Stream)
    CGroup: /user.slice/user-1000.slice/user@1000.service/podman.socket
    ```
    `podman.socket`{.literal} 处于活动状态，并在
    `/run/user//podman.podman.sock`{.literal} 上侦听，其中
    ` 是`{.literal} 用户的 ID。
2.  显示 Podman 的系统信息：
    ``` screen
    $ podman-remote info
    ```
:::
::: itemizedlist
**其它资源**
-   [podman v2.0 RESTful
    API](http://docs.podman.io/en/latest/Reference.html){.link} -
    上游文档
-   [第一次查看 Podman 2.0
    API](http://crunchtools.com/a-first-look-at-the-podman-2-0-api/){.link} -
    文章
-   [Sneak peek：Podman 的新 REST
    API](https://www.redhat.com/sysadmin/podmans-new-rest-api){.link} -
    文章
-   [使用 Python 和 Bash 探索 Podman RESTful
    API](https://www.redhat.com/sysadmin/podman-python-bash){.link} -
    文章
:::
:::
::: section
::: titlepage
# []{#assembly_using-the-container-tools-api_building-running-and-managing-containers.html#proc_running-the-podman-api-manually_assembly_using-the-container-tools-api}手动运行 Podman API {.title}
:::
此流程描述了如何运行 Podman API。这可用于调试 API 调用，特别是在使用
Docker 兼容性层时。
::: itemizedlist
**先决条件**
-   已安装 `podman-remote`{.literal} 软件包。
    ``` literallayout
    # yum install podman-remote
    ```
:::
::: orderedlist
**流程**
1.  为 REST API 运行服务：
    ``` literallayout
    # podman system service -t 0 --log-level=debug
    ```
    ::: itemizedlist
    -   0 表示没有超时。rootful 服务的默认端点为
        `unix:/run/podman/podman.sock`{.literal}。
    -   log `-level `{.literal}
        选项设定日志级别。标准日志记录级别为
        `debug`{.literal}、`info、war`{.literal}
        `n`{.literal}、`error`{.literal}、`fatal`{.literal} 和
        `panic`{.literal}。
    :::
2.  在另一个终端中，显示 Podman 的系统信息。`podman-remote`{.literal}
    命令与常规 `podman`{.literal} 命令不同，可通过 Podman 套接字通信：
    ``` screen
    # podman-remote info
    ```
3.  若要对 Podman API 进行故障排除并显示请求和响应，请使用
    `curl`{.literal} 逗号。以 JSON 格式在 Linux 服务器上获取有关 Podman
    安装的信息：
    ``` literallayout
    # curl -s --unix-socket /run/podman/podman.sock http://d/v1.0.0/libpod/info | jq
        {
      "host": {
        "arch": "amd64",
        "buildahVersion": "1.15.0",
        "cgroupVersion": "v1",
        "conmon": {
          "package": "conmon-2.0.18-1.module+el8.3.0+7084+c16098dd.x86_64",
          "path": "/usr/bin/conmon",
          "version": "conmon version 2.0.18, commit: 7fd3f71a218f8d3a7202e464252aeb1e942d17eb"
        },
        …
      "version": {
        "APIVersion": 1,
        "Version": "2.0.0",
        "GoVersion": "go1.14.2",
        "GitCommit": "",
        "BuiltTime": "Thu Jan  1 01:00:00 1970",
        "Built": 0,
        "OsArch": "linux/amd64"
      }
    }
    ```
    `jq`{.literal} 实用程序是命令行 JSON 处理器。
4.  拉取 `registry.access.redhat.com/ubi8/ubi`{.literal} 容器镜像：
    ``` literallayout
    # curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v1.0.0/images/create?fromImage=registry.access.redhat.com%2Fubi8%2Fubi'
    *   Trying /run/podman/podman.sock...
    * Connected to d (/run/podman/podman.sock) port 80 (#0)
    > POST /v1.0.0/images/create?fromImage=registry.access.redhat.com%2Fubi8%2Fubi HTTP/1.1
    > Host: d
    > User-Agent: curl/7.61.1
    > Accept: /
    >
     GET /v1.0.0/libpod/images/json HTTP/1.1 > Host: d > User-Agent: curl/7.61.1 > Accept: / > < HTTP/1.1 200 OK < Content-Type: application/json < Date: Tue, 20 Oct 2020 13:59:55 GMT < Transfer-Encoding: chunked < { [12498 bytes data] 100 12485 0 12485 0 0 2032k 0 --:--:-- --:--:-- --:--:-- 2438k * Connection #0 to host d left intact [ { "Id": "ecbc6f53bba0d1923ca9e92b3f747da8353a070fccbae93625bd8b47dbee772e", "RepoTags": [ "registry.access.redhat.com/ubi8/ubi:latest", "registry.redhat.io/ubi8/ubi:latest" ], "Created": "2020-09-01T19:44:12.470032Z", "Size": 210838671, "Labels": { "architecture": "x86_64", "build-date": "2020-09-01T19:43:46.041620", "com.redhat.build-host": "cpt-1008.osbs.prod.upshift.rdu2.redhat.com", ... "maintainer": "Red Hat, Inc.", "name": "ubi8", ... "summary": "Provides the latest release of Red Hat Universal Base Image 8.", "url": "https://access.redhat.com/containers//registry.access.redhat.com/ubi8/images/8.2-347",
          ...
        },
        "Names": [
          "registry.access.redhat.com/ubi8/ubi:latest",
          "registry.redhat.io/ubi8/ubi:latest"
        ],
        ...
        ]
      }
    ]
    ```
:::
::: itemizedlist
**其它资源**
-   [podman v2.0 RESTful
    API](http://docs.podman.io/en/latest/Reference.html){.link} -
    上游文档
-   [Sneak peek：Podman 的新 REST
    API](https://www.redhat.com/sysadmin/podmans-new-rest-api){.link} -
    文章
-   [使用 Python 和 Bash 探索 Podman RESTful
    API](https://www.redhat.com/sysadmin/podman-python-bash){.link} -
    文章
-   `podman-system-service`{.literal} man page
:::
:::
:::