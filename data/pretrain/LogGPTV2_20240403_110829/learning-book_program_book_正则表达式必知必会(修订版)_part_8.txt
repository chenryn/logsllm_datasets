2}将匹配一个或两个数字字符（用来匹配日子和月份）：\d{2，4}用来匹
配年份：[-\/]（请注意，这个\/其实是一个\和一个/）用来匹配日期值
里的分隔符-或/。我们总共匹配到了3个日期值，但2/2/2不在此列（因
为它的年份太短了）。
---
## Page 56
46第5章重复匹配
提示在这个例子里，我们使用了/的转又序列\/，这
在许多正则表达式实现里是不必要的，但有些正则表达
式分析器要求我们必须这样做，为避免不必要的麻烦，
在需要匹配/字符本身的时候，最好总是使用它的转义
序列。
注意，上面这个例子里的模式并不能检查日期值是否有效：诸如
54/67/9999之类的无效日期也能通过这一测试。它只能用来检查日期值的
格式是否正确（这一环节通常安排在日期值本身的有效性检查之前）
1.2或3.
我们曾经讲过，？匹配它之前一个字符（或字符集合）的零次
或一次出现。因此，从效果上看，？等价于（0，1）。
5.2.3匹配“至少重复多少次
{）语法的最后一种用法是给出一个最小的重复次数（但不必给出一
个最大值）。{）的这种用法与我们用来为重复匹配次数设定一个区间的（）
语法很相似，只是省略了最大值部分而已。比如说，{3，}表示至少重复
3次，与之等价的说法是“必须重复3次或更多次”。
我们来看一个综合了本章主要内容的例子。在这个例子里，我们
使用一个正则表达式把所有大于或等于$100美元的金额找出米：
文本
1001: $496.80
1002: $1290.69
1003:$26.43
1004: $613.42
1005: $7.61
1006: $414.90
1007: $25.00
---
## Page 57
5.3防止过度匹配
47
正则表达式
1d+: 1$1d(3, }1 . 1d(2)
结果
1001:$496.80
1002:$1290.69
1003:$26.43
1004:$613.42
1005: $7.61
1006:$414.90
1007: $25.00
分析
这个例子里的原始文本来自一份报表，它的第一列是定单号，第二
列是定单金额。我们构造的正则表达式首先使用了一个\d+：来匹配定单
号（这部分其实可以省略—我们可以只匹配金额部分而不是匹配包括定
单号在内的一整行）。模式\S\d(3，}1.\d(2}用来匹配金额部分：1s匹配
$、\d{3，）匹配至少3位数字（也就是所有大于或等于S100美元的金额）
\.匹配.、\d{2}匹配小数点后面的两位数字，整个模式从7条记录里正确
地匹配到了4条符合要求的记录。
?
提示在进行这种重复次数匹配的时候一定要小心。如果你遗
漏了花括号里的运号，，你的模式将变成（具体到这个例子）
精确匹配3位数字而不再是匹配至少3位数字。
5.3防止过度匹配
?只能匹配零个或一个字符，（n）和（m，n}也有一个重复次数的上限；
换句话说，这几种语法所定义的“重复次数”都是有限的。但本章介绍
的其他重复匹配语法在重复次数方面都没有上限值，而这样微有时会导
致过度匹配的现象。
到目前为止，我们选用的例子都不存在过度匹配的问题，但你迟早
会遇到类似于下面这个例子的情况。这个例子里的原始文本来自一个Web
页面，其中包含着两个HTML标签：而我们的任务是用一个正则表达
---
## Page 58
48
第5章重复匹配
式把那两个标签里的文本匹配出来（为了对这些文本进行替换或排版
等）。下面就是这个例子：
文本
This offer is not available to customers
1iving in AK and HI,
正则表达式
*
结果
This offer is not available to customers
living in AK and HI,
分析
匹配标签（大小写均可），匹配标签（也是大
小写均可）。但这个模式只找到了一个匹配而不是预期中的两个：第一个
标签之后、最后个标签之前的所有东西—AKandHI
被.*一网打尽。虽然没有漏掉我们想要匹配的文本，但问题是第2个
标签不明不白地“失踪”了。
行匹配时的行为模式是多多益善面不是适可面止的。它们会尽可能地从
一段文本的开头一直匹配到这段文本的末尾，而不是从这段文本的开头
匹配到碰到第一个匹配时为止。
符的“懒惰型”版本（“懒情”在这里的含义是匹配尽可能少的字符，与
“贪婪型”元字符的行为模式刚好相反）。懒情型元字符的写法很简单，
只要给贪婪型元字符加上一个?后缓即可，表5-1列出了几个常用的贪婪型
元字符和它们的懒情型版本。
表5-1常用的贪婪型元字符和它们的懒情型版本
贪梦型元字符
情型元字符
*？
+
+？
(n,)
{n,}?
---
## Page 59
5.4小结
49
*？是*的懒型版本：下面是使用*？来解决刚才那个例子的做法：
文本
This offer is not available to custoners
11ving 1n AK &nd HI,
正则表达式
, *?
结果
This offer is not available to custoners
1iving in AK and HI,
分析
问题得到了圆满解决。因为使用了懒悄的*？，第一个匹配将仅限于
AK，原始文本里的HI成为了第二个匹配。
注意这本爷里的大多数例子使用的都是“会婴型”元字符，
而我们这么做的出发点是为了让那些示例模式尽可能地简明
易懂。在实际工作中、请务必根据具体情况来选用贪婪型
或“情型”元字符。
5.4小结
正则表达式的真正威力体现在重复次数匹配方面。本章介绍了+（匹
配字符或字符集合的一次或多次重复出现）、*（匹配字符或字符集合的
零次或多次重复出现）、？（匹配字符或字符集合的零次或一次出现）等
几个元字符的用法。要想获得更精确的控制，你可以用（}语法来精确地
设定一个重复次数或是重复次数的最小值和最大值。元字符分“贪婪型”
和“懒悄型”两种：在需要防止过度匹配的场合下，请使用“懒悄型”
元字符来构造你的正则表达式。
---
## Page 60
第6章
位置匹配
到目前为止，你已经学习了许多元字符的用法。只要灵活运用这些
知识，你就可以对任意字符（或字符集合）及其各种组合和重复进行匹
配，那些字符（或字符集合）可以出现在原始文本里的任意位置。可是，
在某些场合，只需要对某段文本的特定位置进行匹配，这就引出了位置
匹配的概念，而这个概念正是本章的学习重点。
6.1边界
位置匹配用来解决在什么地方进行字符串匹配操作的问题。为了让大
家对位置匹配及其相关概念有一个直观的认识，我们先来看一个例子：
文本
The cat scattered his food all over the roon.
正则表达式
cat
结果
The cat scattered his food all over the room.
分析
模式cat把原始文本里的所有cat都找了出来，单词scattered里的那
个cat也不例外。但这一结果并不是我们所预期的，我们只想把单词cat
本身找出来。我们本想用这种办法把所有的cat替换为dog，但得到的结
果却是一个毫无实际意义的句子：
The dog sdogtered his food all over the room.
---
## Page 61
6.2单词边界51
能够正确解决这个问题的办法只有一个：使用边界限定符，也就是
在正则表达式里用一些特殊的元字符来表明我们想让匹配操作在什么位
置（或边界）发生。
6.2单词边界
第一种边界（也是最常用的边界）是由限定符\b指定的单词边界。
顾名思义，\b用来匹配一个单词的开始或结尾。
为了演示\b的用法，让我们回到刚才的例子再做一次尝试，但我们
这次将用上单词边界：
文本
The cat scattered his food al1 over the roon
正则表达式
Q114301
结果
The cat: scattered his food al1 over the roon.
分析
在原始文本里，单词cat的前后都有一个空格，而这将与模式\bcat\b
相匹配（空格是用来分隔单词的字符之一）。单词scattered中的字符序
列cat不能与这个模式相匹配，因为它的前一个字符是s、后一个字符是t
（这两个字符都不能与\b相匹配）。
实上，它不懂任何人类语言）、也不知道什么是单词边界，简
单地说，Vb匹配的是一个这样的位置，这个位置位于一个能够
用来构成单词的字符（字母、数字和下划线，也就是与\w相四
配的字符）和一个不能用来构成单词的字符（也就是与\W相医
配的字符）之间。
①b是英文boundary（边界）的首字母。—编者注
---
## Page 62
52
第6章位置匹配
这里要特别注意的是，如果你想匹配一个完整的单词，就必须在你
想要匹配的文本的前后都加上\b限定符。请看下面这个例子：
文本
The captain wore his cap and cape proudly as
he sat listening to the recap of how his
crew saved the men froa a capsized vesse1.
正则表达式
deoq1
结果
The captain wore his cap and cape proudly as
crew saved the men fron a capsized vessel.
he sat listening to the recap of how his
分析
模式\bcap将匹配以字符序列cap开头的任何一个单词。这里总共找
到了4个匹配，其中有3个是以字符序列cap开头的其他单词而不是单词
cap本身。
下面这个例子里的原始文本还是刚才那段文字，但在这次的正则表
达式里只有一个后缀的\b限定符：
文本
The captain wore his cap and cape proudly as
he sat listening to the recap of how his
crew saved the ren from a capsized vessel.
正则表达式
cap\b
结果
The captain wore his cap and cape proudly as
he sat listening to the recap of how his
creu saved the men fron a capsized vessel.
分析
模式cap\b将匹配以字符序列cap结束的任何一个单词。这里总共找到了2
个匹配，其中一个是以字符序列cap结束的其他单词而不是单词cap本身。
---
## Page 63
6.2单词边界5
53
如果你只想匹配单词cap本身，就必须使用\bcap\b做为模式，它才
是你需要的正确答案。
匹配到的字符串的长度是3个字符（c、a、t）、不是5个字符。
如果你想表明不匹配一个单词边界”，请使用\B。在下面的例子里，
我们将使用\B来查找其前后都有多余空格的连字符：
文本
Please enter the nine-digit id as it
appears on your color - coded pass-key
正则表达式
8-8
结果
Please enter the nine-digit id as it
appears on your color  coded pass-key
分析
\B-\B将匹配一个前后都不是单词边界的连字符。nine-digit和
pass-key中的连字符不能与之匹配，但color-coded中的连字符可以
与之匹配”
正如我们在第4章里见到的那样，同一个元字符的大写形式与它的小
写形式在功能上往往刚好相反。
正则表达式实现还支持另外两个元字符：\只匹配单词的结束，不过，虽然这两种元字符可以提供
粒度更细的控制，但支持它们的正则表达式引华却并不多见
（据笔者所知，cgrep程序是支持\的，但许多其他文本匹
配工具则不支持它们）
①即字母数字下划线之间，或者非字母数字下划线之间。—编者注
②因为空格和连字符都不是字母数字或下划线。—编者注
---
## Page 64
54第6章位置匹配