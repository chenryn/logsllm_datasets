![
](https://images.seebug.org/content/images/2018/12/e88813af-3e00-433d-93c1-2dfbe4f0ec69.jpg)
从下图所示的内存布局中可以看到bss区紧跟着固件的text和data段之后，因此只要我们找到bss区清零的函数，分析出清零函数的结束位置及后将其减去固件文件的大小即可获得固件的内存加载地址。
![
](https://images.seebug.org/content/images/2018/12/330e73a4-15c7-4267-8efa-5f0f17a27826.jpg)
接下来我们再看一下VxWorks中的 **userInit** 函数，从下图可以看到 **usrInit**
除了是系统引导后执行的第一个函数外，在这个函数中还会首先对bss区的数据进行清理。
![
](https://images.seebug.org/content/images/2018/12/be2ccd4d-837b-4603-87dd-35789c816068.jpg)
对 **usrInit** 这个函数进行查看后，可以发现其中有不少的bl跳转函数。根据 **usrInit**
的描述，第一个跳转的函数就是负责初始化BBS区的函数。
![
](https://images.seebug.org/content/images/2018/12/4b9be823-c80f-4804-9190-6a17de280ecd.jpg)
下图是BSS初始化函数的代码，结合PowerPC的寄存器用途可知r3和r4寄存器分别是函数 **sub_18D59C** 的两个参数。r3的值为
**0x339418** , r4的值为 **0x490D2C - 0x339418 = 0x157914** 相当于长度。因此我们可以得知
**0x339418** 就是bss区的起始地址， **0x490D2C** 就是bss区的结束地址。
![
](https://images.seebug.org/content/images/2018/12/40e96b46-88d2-4e05-ba0b-0d1ef81e38e6.jpg)
在得到bss区结束地址后，我们就可以进一步的计算出固件的加载地址，不过使用这个方法有一个前提条件就是提取出的固件文件本身是完整的，如果提取出的固件文件不完整这个方法则会失效。
![
](https://images.seebug.org/content/images/2018/12/5b3e0a92-ba9f-447d-a3c6-d22198961963.jpg)
上面介绍了三种比较常用的VxWorks固件加载地址分析方法，此外还有通过焊接UART接口查看系统引导过程的串口输出等各种其他非常规手段。在分析出固件加载地址后就可以使用新的加载地址重新加载固件进行分析了
下图是Windows下的IDA6.8中重新加载后固件的对比图，Mac下的IDA 在修复了加载地址后还是只能关联识别出很少的函数。
![
](https://images.seebug.org/content/images/2018/12/d5577f55-8f69-4fd2-9890-9d840bb19370.jpg)
### 3\. 利用符号表修复函数名
虽然IDA此时能够正确的识别函数及其调用关系，但依然无法自动识别出函数名，这对固件的分析工作造成了很大的阻碍。
此时可以查看固件在编译时是否编入了符号表，如固件编入了符号表那么我们就可以利用符号表中的内容来修复IDA中所显示的函数名。
通过使用binwalk可以帮助我们辅助分析VxWorks固件中是否编入了符号表，并识别出符号表在固件中的位置。如下图所示binwalk识别出的符号表地址在文件偏移
**0x301E74** 处。
![
](https://images.seebug.org/content/images/2018/12/fe25e304-82ef-4338-a9ef-b2c9df8aaab1.jpg)
如下图所示，VxWorks
5系列的符号表有他独特的格式，他以16个字节为一组数据，前4个字节是0x00，之后是符号名字符串所在的内存地址，后4个字节是符号所在的内存地址，最后4个字节是符号的类型，例如0x500为函数名。
![
](https://images.seebug.org/content/images/2018/12/7ec6d9f9-7393-4ee2-bd45-c13c46c8abcb.jpg)
基于符号表的特征，我们能够轻松的获取到固件中符号表的起始及结束位置。此时我们就可以使用IDA的api来修复函数名，使用加载地址0x00重新加载固件后使用如下图所示的Python脚本即可进行修复。
![
](https://images.seebug.org/content/images/2018/12/613e7443-9b62-4759-94d9-3b3a7fe09c80.jpg)
完成函数名修复后的IDA界面如下图所示，通过修复符号表IDA识别出了8000多个函数。至此VxWorks系统固件的预处理工作就全部完成了，现在我们就可以根据函数名来对一些关键服务的代码进行静态分析了。
![
](https://images.seebug.org/content/images/2018/12/7161c5d4-b9b7-4be5-86b3-ab93be723e1f.jpg)
### 4\. 固件分析
在完成上述的一些预处理工作后，一个固件分析的入手点就是查看例如 **loginUserAdd** 等关键函数的调用关系。如下图所示
**loginUserAdd** 函数的用途是在登录表中添加一个用户，这个账号可以用于登录例如telnet及ftp等服务。
![
](https://images.seebug.org/content/images/2018/12/24db80bb-7210-4040-8b30-a4a5dc63bd38.jpg)
通过分析 **loginUserAdd** 函数的调用，可以看到在 **usrAppInit** 等函数中均调用了 **loginUserAdd** 函数。
![
](https://images.seebug.org/content/images/2018/12/cc766dcb-66c2-402f-b1c0-9ea3ffa63764.jpg)
再进一步查看 **usrAppInit** 函数可以发现在这个函数中所添加的用户及密码哈希。此类方法也是发现后门账号的有效手段之一。
![
](https://images.seebug.org/content/images/2018/12/f0444e1e-443f-4867-9310-a52b07fcbdb0.jpg)
此外还可以关注某些服务的初始化函数，例如在 **usrNetAppInit** 函数中就可以发现许多网络服务的初始化函数调用。
![
](https://images.seebug.org/content/images/2018/12/6bf9d69a-53e0-4bb9-9d44-1ce9e5c7006c.jpg)
至此VxWorks固件分析的常用方法就介绍完毕了，通过使用类似的分析方法，我们也能够在基于VxWorks的其他嵌入式设备的固件中发现一些有趣的信息，下面是其中的两个例子。
![
](https://images.seebug.org/content/images/2018/12/4ad58c49-d9d1-4adf-b68e-7ef1c5941d99.jpg)
![
](https://images.seebug.org/content/images/2018/12/3ac28aa4-993e-44a2-a5d8-f236fd30703e.jpg)
### 5\. 引用
  * [测试附件下载地址](https://download.schneider-electric.com/files?p_enDocType=Firmware+-+Updates&p_File_Name=140NOE77101+For+Non+Unity+Users+V6.4.zip&p_Doc_Ref=140NOE77101+Exec+and+Release+Notes+For+Non+Unity+Users)
  * [Developing PowerPC Embedded Application Binary Interface (EABI) Compliant Programs](http://101.96.10.63/class.ece.iastate.edu/arun/CprE281_F05/lab/labw11a/Labw11a_Files/eabi_app.pdf)
  * [Reference Materials VxWorks for PowerPC](http://www.vxdev.com/docs/vx55man/vxworks/ppc/powerpc.html)
  * [usrConfig](http://www.vxdev.com/docs/vx55man/vxworks/ref/usrConfig.html)
  * [loginLib](http://www.vxdev.com/docs/vx55man/vxworks/ref/loginLib.html#loginUserAdd)
* * *