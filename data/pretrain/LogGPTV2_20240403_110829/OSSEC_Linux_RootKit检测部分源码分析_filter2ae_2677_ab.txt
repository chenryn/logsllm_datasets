先分配缓冲区域，
此处的一段代码的目的是跳过注释和空行，
下面开始读取文件中有效的部分，
接下来为了便于分析，还要去除空格和\t，
接下来是获取link，并对文档尾部的空格和\t进行清除，到这里还没有完全进入分析过程，一直在把读入的文件塑造成OSSEC规定的格式。
接下来是对内容的处理，
先去掉文件中的反斜杠，再分配空间装载文件和文件名，
这一部分把特征取出后合并，供下面使用，
这一部分就是根据取出的木马的特征来查找当前系统上是否存在相应木马文件，如果存在则要报告了，
这个部分的检查我们平时的生活中其实是常见的，比如安全卫士进行扫描时与这个就有相通之处。
**（2）rootkit感染的文件签名检测模块——check_rc_trojans.c**
这一部分的思想也非常简洁直接，
这里截取rootkit_trojans的一部分作为示例，
下面看这个c文件，与上一部分一样，这一部分也只有一个函数，思想上也相似，读取rootkit_trojans
文件中包含的已知被感染的木马文件的签名进行扫描来辨别异常；
函数的一开始，先定义了一些用到的变量，并针对不同的系统初始化好系统目录的变量，
下面进行的还是将
下面还是在初始化，
下面是正式检查，其实关键语句只有os_string那一句，用正则匹配去匹配特征值，如果发现则产生告警，
最后是结尾的一个报告，简单看下就好。
**(3）/dev检查模块——check_rc_dev.c**
这部分对应的主体源代码在rootcheck目录下的rc_check_dev.c中，其代码大体结构如下：
由于关于这部分的检测，思路非常清晰，我们可以从相关文件中读取相应的算法，直观上看，大部分内容都在讲未定义Win32的系统（本实验中指Linux），
**1）read_dev_file()函数**
我将一些关键语句的解释写在了注释里，
里面涉及到的数据结构和函数，按在函数中出现的先后顺序在此做介绍，
① lstat函数
需要包含的头文件： ，，
功 能: 获取一些文件相关的信息
用 法: int lstat(const char _path, struct stat_ buf);
参数：
path：文件路径名。
filedes：文件描述词。
buf：是以下结构体的指针
    struct stat {
        dev_t st_dev; /* 文件所在设备的标识 */
        ino_t st_ino; /* 文件结点号 */
        mode_t st_mode; /* 文件保护模式，后面会涉及 */
        nlink_t st_nlink; /* 硬连接数 */
        uid_t st_uid; /* 文件用户标识 */
        gid_t st_gid; /* 文件用户组标识 */
        dev_t st_rdev; /* 文件所表示的特殊设备文件的设备标识 */
        off_t st_size; /* 总大小，单位为字节*/
        blksize_t st_blksize; /* 文件系统的块大小 */
        blkcnt_t st_blocks; /* 分配给文件的块的数量，512字节为单元 */
        time_t st_atime; /* 最后访问时间 */
        time_t st_mtime; /* 最后修改时间 */
        time_t st_ctime; /* 最后状态改变时间 */
    };
返回值说明
成功执行时，返回0。失败返回-1，errno被设为以下的某个值
EBADF： 文件描述词无效
EFAULT： 地址空间不可访问
ELOOP： 遍历路径时遇到太多的符号连接
ENAMETOOLONG：文件路径名太长
ENOENT：路径名的部分组件不存在，或路径名是空字串
ENOMEM：内存不足
ENOTDIR：路径名的部分组件不是目录
②S_ISREG等几个常见的宏 struct stat
S_ISLNK(st_mode)：是否是一个连接.
S_ISREG(st_mode)：是否是一个常规文件.
S_ISDIR(st_mode)：是否是一个目录
S_ISCHR(st_mode)：是否是一个字符设备.
S_ISBLK(st_mode)：是否是一个块设备
S_ISFIFO(st_mode)：是否 是一个FIFO文件.
S_ISSOCK(st_mode)：是否是一个SOCKET文件
③st_mode 标志位
常见的标志
S_IFMT 0170000 文件类型的位遮罩
S_IFSOCK 0140000 socket
S_IFLNK 0120000 符号链接(symbolic link)
S_IFREG 0100000 一般文件
S_IFBLK 0060000 区块装置(block device)
S_IFDIR 0040000 目录
**2）read_dev_dir()函数**
这一部分主要是声明了一些常见的忽略的设备文件或者目录，可以理解为一个白名单，
向下走，这部分主要是针对最特殊的情况，就是给定的目录名非法、目录名无效或者目录打不开等异常情况，到现在还没有接触到这个函数的主体功能运转的部分，
这个大循环是这个函数真正的功能部分，其中对白名单的文件名不做处理，直接continue，检查下一个读取到的目录。检查目录不是真正目的，最终目的还是要去查找恶意文件。宏观上讲，检查文件的函数应该在检查目录的函数内被调用；微观上讲，这个函数运行到最后，发现这个目录名和任意一个正常的目录名都匹配不上，则要进如这个目录检查是否有恶意文件。
关闭句柄，返回，不再赘述。
**3）check_rc_dev()函数**
这是一个整体的函数，在里面调用了read_dev_dir()函数，
这部分的最后提一下，这部分从名字上听就是只针对Linux系统的，在文件里体现的也比较清楚了，如下
此处的#else #endif和开始的
对应起来。
**（4） 异常文件和权限检查模块——check_rc_sys.c**
这一模块涉及到的原理简单，但内容比较繁杂，涉及到不同的操作系统的文件系统，看起来有些凌乱，但内在的思想在总述部分中我们是介绍过了的，按着这个思想，不难理解繁杂的这一模块。
由root拥有的文件具有对他人的写许可非常危险，一旦写入了恶意代码，再被执行很有可能被恶意利用。rootkit为了检测这类文件，将扫描整个文件系统以查找异常文件和权限问题。
先看一下整体架构，
这个文件中又两个子函数来让check_rc_sys调用，我们顺序来看一下这个文件，
先是一些变量的初始化，具体的使用用到的时候再解释，
先进行了一次判断，
这里的思路是，如果一个文件从stat中没有显示，但在readdir中游戏西安市，可能是个内核级别的rootkit，
stat 函数获得一个与此命名文件有关的信息（到一个struct stat 类型的buf中）,
fstat 函数获得文件描述符 fd 打开文件的相关信息（到一个struct stat 类型的buf中）,
lstat 函数类似于 stat，但是当命名文件是一个符号连接时，lstat 获取该符号连接的有关信息，而不是由该符号连接引用文件的信息。
接着判断当前句柄是不是一个目录，如果是目录则调用下面的read_sys_dir函数，
接下来通过另一种方式读取文件大小，并与我们逐字节读取的做比较，
如果有差异，则可能是内核级别的rootkit，
简单介绍一下关于USB文件系统的知识，
usbfs生命周期在linux-2.6中加入，在linux-3.3移除,同时/proc/bus/usb移到/dev/bus/usb下，在系统启动后，可以查看/proc/bus/usb/devices文件，对文件内容进行分析（$cat
/proc/bus/usb/devices）。
接下来是我们的正式检查，
具体的语句在截图中都有注释，
另外的相关知识还有，
S_IRUSR | 所有者拥有读权限 | S_IXGRP | 群组拥有执行权限  
---|---|---|---  
S_IWUSR | 所有者拥有写权限 | S_IROTH | 其他用户拥有读权限  
S_IXUSR | 所有者拥有执行权限 | S_IWOTH | 其他用户拥有写权限  
S_IRGRP | 群组拥有读权限 | S_IXOTH | 其他用户拥有执行权限  
S_IWGRP | 群组拥有写权限 |  
C语言的stdio.h头文件中，定义了用于文件操作的结构体FILE。这样，我们通过fopen返回一个文件指针(指向FILE结构体的指针)来进行文件操作。可以在stdio.h(位于visual
studio安装目录下的include文件夹下)头文件中查看FILE结构体的定义，
    struct _iobuf {
        char *_ptr;
        int_cnt;
        char *_base;
        int_flag;
        int_file;
        int_charbuf;
        int_bufsiz;
        char *_tmpfname;
    };
    typedef struct _iobuf FILE;
接下来介绍read_sys_dir()函数，
先进行变量的初始化，
初步检查，并与白名单作比较，
**（5）隐藏进程检查模块——check_rc_pids.c**
展示一下这个文件的大体架构，
在正式介绍之前，先介绍一个从外部引用的子函数及一些先验知识，
其中，DIR结构体类似于FILE，是一个内部结构，以下几个函数用这个内部结构保存当前正在被读取的目录的有关信息，
    struct __dirstream  
    {  
        void *__fd;   
        char *__data;   
        int __entry_data;   
        char *__ptr;   
        int __entry_ptr;   
        size_t __allocation;   
        size_t __size;   
        __libc_lock_define (, __lock)   
    };    
    typedef struct __dirstream DIR;
函数 DIR _opendir(const char_ pathname)，即打开文件目录，返回的就是指向DIR结构体的指针，而该指针由以下几个函数使用:
    struct dirent *readdir(DIR *dp);   
    void rewinddir(DIR *dp);    