### Extended Capabilities of the Format

The capabilities of the format can be further extended. The Flash runtime supports bidirectional communication in accordance with the Same-Origin Policy (SOP). The embedded Flash inherits the origin of the PDF document, allowing it to request and read any document from the originating server. Unlike the XML method, there are no restrictions on the content that can be requested, making it the most versatile of the available communication methods. The primary drawback of this approach is a significant increase in file size. Even the compact Flash code in Listing 5 results in a 6 kB Flash file, suggesting that this method might be better suited for the content smuggling scenario in Section 2.3.2 rather than the syntax injection scenario.

### Cross-Origin Communication in Flash

Cross-origin communication in Flash adheres to the same-origin policy. However, this is not a strict restriction, as Flash also supports cross-origin communication via Cross-Origin Resource Sharing (CORS). Using CORS, a web server can relax the SOP to allow access to specified content. An attacker can set an allow-all cross-origin policy, as shown in Listing 6, to enable two-way communication.

#### Listing 4: PDF using XML for Communication
```pdf
%PDFâˆ’
1 0 obj>stream
xml = ' ]>&x;  ';
var doc = XMLData.parse(xml);
getURL('attacker.com/?secret=' + doc.saveXML());
endstream
trailer
/OpenAction
>>
>>
```

#### Listing 5: Flash Code for Communication
```actionscript
package {
    import flash.net.*;
    import flash.display.Sprite;

    public class Secret extends Sprite {
        var u: String;
        var r: URLRequest;
        var l: URLLoader;

        public function Secret() {
            u = 'vulnerable.com/secret';
            r = new URLRequest(u);
            l = new URLLoader(r);
            l.addEventListener('complete', function(): void {
                u = 'attacker.com/?' + r.data;
                r = new URLRequest(u);
                l = new URLLoader(r);
            });
        }
    }
}
```

#### Listing 6: Allow-All `crossdomain.xml`
```xml
<cross-domain-policy>
    <allow-access-from domain="*" />
</cross-domain-policy>
```

### Evaluation

This section details the evaluation performed to investigate the prevalence of the vulnerabilities discussed in Section 3. The evaluation covers various instances of affected components, such as browsers and PDF interpreters, content sanitization filters, and a study of the Alexa top 100 websites.

#### 4.1 Instances

To better understand how this problem manifests, we compare browser and reader instances. We evaluate all major browsers and two of the most common readers.

##### 4.1.1 Readers

Section 3 focuses on the Adobe PDF Reader as the attack surface due to its widespread use. For comparison, the Google Chrome built-in PDF reader was selected, as it is the default reader for Chrome users.

As mentioned in Section 2, the browser relies on the reader plugin to implement correct security measures to prevent cross-domain leakage. Unlike Adobe Reader, the Chrome built-in PDF reader refuses to render content served with an inappropriate MIME-type if the content is delivered across origins, effectively preventing the attacks described in Section 3. If Chrome is configured to use the Adobe Reader plugin, it will behave like other browsers and interpret the content as PDF.

##### 4.1.2 Browsers

The behavior of cross-domain embedding of PDF resources is studied in the major browsers: Firefox, Safari, Opera, Google Chrome, and Internet Explorer. The study shows that all major browsers are susceptible to the attacks outlined in Section 3, with some minor differences detailed below and summarized in Table 1.

| Browser      | Object | Embed | Adobe is Default |
|--------------|--------|-------|------------------|
| Firefox      | Yes    | Yes   | Yes              |
| Chrome       | Yes    | Yes   | No               |
| Safari       | Yes    | Yes   | Yes              |
| Opera        | Yes    | Yes   | Yes              |
| Internet Explorer | Yes  | Yes   | Yes              |

- **Firefox, Safari, and Opera**: These browsers are all susceptible to the attacks without any restrictions or modifications.
- **Google Chrome**: Chrome has built-in support for displaying PDF documents. The built-in PDF reader is used by default unless explicitly disabled by the user. Complex PDF documents that the built-in reader cannot handle will prompt the user to open them in Adobe Reader. As noted in Section 4.1.1, the built-in reader is not vulnerable to these attacks. Chrome is only susceptible when the Adobe Reader plugin is used.
- **Internet Explorer**: This browser is susceptible to the attacks but only supports embedding PDF documents using the `embed` tag. This is not a major obstacle, as the `embed` and `object` tags are interchangeable in this context.

#### 4.2 Alexa Top 100

We conducted two studies to evaluate the prevalence of the problem on popular sites, covering the Alexa top 100 websites. These sites are highly exposed to security threats due to their dominance on the web.

##### Syntax Injection

The study involved supplying the websites with a benign minimal PDF (Listing 2) and examining the corresponding responses. The sample contains essential keywords and tokens required for a syntax injection-based polyglot attack. If these tokens pass through unaltered, the website is considered vulnerable. The process was conducted manually, testing only publicly accessible input parameters that do not require authentication.

- **Conclusion**: Nine out of the hundred websites apply insufficient content filtering for the PDF format. Five of these were susceptible to PDF-based polyglot attacks, and four applied insufficient content filtering, but the input was reflected in a way that prevented exploitation.
- **XSS Vulnerability**: Three of the five vulnerable websites were also susceptible to traditional XSS attacks in the same input parameters. The remaining two websites, which were only vulnerable to polyglot attacks, employ proper measures to protect against XSS attacks but still fall short in defeating this new type of attack.

##### Content Smuggling

A smaller study was conducted targeting popular cloud storage services. This study involved uploading polyglot content and analyzing the origin under which it was served.

- **First Service**: Serves almost all uploaded content from a sandboxed origin, except for the user's avatar image, which is served under the sensitive origin. An attacker could upload a specially crafted avatar image that, when embedded as PDF on the attacker's website, can access and modify the victim's cloud storage.
- **Second Service**: Allows users to publish a public link to an HTML representation of the content, served under the sensitive origin. The content is processed to prevent malicious HTML generation but fails to consider other formats. A specially crafted file can result in valid PDF syntax, enabling the attacker to access and modify the victim's cloud storage.

We are currently advising both service providers to help mitigate these vulnerabilities.

### Mitigation

This section provides advice on various mitigation approaches for the affected components, both server-side and client-side. We offer a general mitigation approach and specific suggestions for affected components.

#### 5.1 General Approach

Preventing polyglots in the general case is complex, as one would need to consider all potentially malicious formats. Our approach does not aim to prevent polyglots but instead provides details about the context in which the content will be interpreted, allowing an informed decision on whether rendering the content constitutes a security risk.

The relationship between the web server and the browser is central in a web environment, but there is no common agreement on the type of content communicated between them. The web server sends a header representing its view on the content type, but the browser can ignore this and even be instructed to do so. The browser often knows the context in which the content will be rendered and the suitable types for these contexts. A natural defense technique is to send the expected types along with the request. The web server then compares the expected types to the assumed type and reacts accordingly. On the client side, the browser verifies that the type in the response matches any of the expected types, possibly alerting the user if there is a mismatch. This mutual agreement between client and server can help mitigate both syntax injection and content smuggling. This approach can be implemented in the web server itself, as opposed to a web application, since the web server makes the final decision on the supplied content-type.

The expected type is also useful for a web application that performs content filtering on the fly. At the point when the content is being requested, it only requires verification against the expected type. There are limitations to this technique, particularly if a context allows multiple types.