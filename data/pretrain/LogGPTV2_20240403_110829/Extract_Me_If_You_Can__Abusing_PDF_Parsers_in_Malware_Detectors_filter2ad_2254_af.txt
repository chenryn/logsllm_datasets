erence extractor can facilitate the identiﬁcation of the weakness
of other PDF parsers, there can never be any guarantee that an
improved parser faithfully follows the parsing logic of Adobe
Reader. Even if a perfect parser could be developed, this work
would have to be repeated for each version of Adobe Reader
given that they have unique parsing behaviors.
C. Deployment of Reference Extractor
Given that the improvement of existing parsers depends
on the existence of a reference extractor, it seems much more
straightforward to just use the reference extractor instead. Fig-
ure 5 demonstrates the third possibility for attack mitigation,
which deploys the reference JavaScript extractor along with a
JavaScript based classiﬁer in a real world scenario. Since the
reference extractor can only precisely mimic the behavior of
the version of Adobe Reader upon which it is based, it is best
suited for controlled, relatively homogeneous environments
(e.g., enterprises) in which the versions of Adobe Reader being
used are known.
To demonstrate that the use of the reference extractor can
improve the accuracy of existing JavaScript based classiﬁers,
we compared the performance of the original PJScan detector,
which uses libpdfjs as its extractor, against a modiﬁed version
which uses the reference JavaScript extractor.
Since the PJScan tool can only classify samples which
contain JavaScript we evaluated it against only the samples
for which any extractor was able to produce JavaScript. While
we cannot be certain that each of these samples actually
contains JavaScript, the detection improvement can still be
demonstrated. Since the reference extractor is also able to
identify which samples are malformed, we precluded those
samples in its evaluation, arguing that malformed ﬁles can be
blocked without adversely affecting the end-user.
Since PJScan utilizes a One-Class Support Vector Machine
which needs to be trained against a malicious set before any
samples can be classiﬁed, a two-fold cross-validation was
SuspiciousPDFsReferenceJSExtractorJSAWdHomogeneousEnvironmentperformed. Table VII shows the results of this evaluation, with
the number of samples in each set shown in parenthesis (for
the reference extractors these are the number of samples they
considered well-formed). As can be seen, we are able to greatly
improve PJScan’s ability to detect malicious PDFs by using the
reference extractors.
The obvious reason for this improvement is the fact that the
reference JavaScript extractors are able to extract JavaScript
from more of the malicious samples than libpdfjs. Of the 1453
malicious samples any tool reported as containing JavaScript,
libpdfjs is only able to produce 1021 extractions whereas
the version 9.5.0 and 11.0.08 reference extractors produce
extractions for 1429 and 1013 out of the 1441 and 1021
malicious ﬁles they identify as well-formed, respectively.
Additionally, since only the samples which can actually be
processed by each version of Adobe Reader are used to train
PJScan there is less noise in the training data and a better
model can be produced. For example, the versions of Adobe
Reader we used do not open samples containing many older
exploits which have been patched. By discarding these older
malformed samples using the reference extractors, the classiﬁer
can be trained against and evaluated against only newer
exploits, increasing its accuracy. This also appears to be why
the version 9.5.0 extractor has slightly better performance–
since we are able to ﬁlter out newer PDFs which cannot be
opened by this version there is more similarity between the
remaining malicious samples.
We then use our obfuscated samples to test the effective-
ness of PJScan plus the reference JavaScript extractors. Results
show that when PJScan is paired with the version 11.0.08
reference extractor it can now detect all the samples used in the
parser confusion attacks provided a PDF containing the same
malicious payload is used in the training set. When paired with
the version 9.5.0 reference extractor, PJScan can detect all of
these samples except those using the R6 security handler since
it is not supported by that version.
Table VIII shows the average runtime for each of the evalu-
ated JavaScript extractors for all of the samples obtained from
VirusTotal. As can be expected, the Adobe Reader tool pays a
signiﬁcant penalty for having to restore the virtual machine to
a clean state after every iteration. Note that the performance of
the reference extractor is comparable to MPScan even though
they do not appear to reset the system between samples [26].
The use of a reference monitor instead of dynamic hooking
would also require this system reset and is signiﬁcantly slower
than running a VM.
In a real world implementation of this system, certain
optimizations can be performed. For instance, by placing the
virtual machine on a RAM disk instead of on a hard drive, we
can save approximately 2 seconds on VM snapshot restoration.
Since the snapshot restoration can be performed after the
extraction, the latency for receiving a sample’s analysis can be
greatly reduced and a pipeline of analyzers could be produced
to mitigate the remaining overhead.
Adobe Reader. Additionally, since we cannot afford to process
any single sample indeﬁnitely we can fail to extract JavaScript
which delays its execution or which does not ﬁnish in the time
allotted. In practice, however, these issues do not appear to be
signiﬁcant in terms of malicious PDF detection. Of the 10
malicious ﬁles which the reference extractor did not extract
JavaScript from (out of 1453) one was malformed and the
remaining nine depended on user interaction. Fundamentally
these limitations are caused by the use of dynamic analysis,
but as our evaluation has shown static analysis also has its own
limitations.
Malware often uses “anti-VM” or “anti-sandbox” tech-
niques to avoid detection by electing to not exhibit malicious
behavior in virtual environments. Although we are unaware of
any such techniques used by malicious PDFs and think that
the limited amount of information about the system available
through the Adobe Reader JavaScript API would make them
difﬁcult to implement, we cannot claim that such checks are
impossible. For example, it might be possible for an advanced
attacker to test if the sandbox is disabled, which is required
for reference extractor to function. However, any such check
would have to depend on the execution of some JavaScript
which would be extracted and could be used to classify the
document as malicious or at least suspicious.
VIII. CONCLUSION
In this paper, we conducted a systematic study on a new
evasion technique called a PDF parser confusion attack, which
aims to confuse the PDF parsers in malware detectors in
order to evade detection. To enable a systematic study we
have developed a reference JavaScript extractor by directly
tapping into Adobe Reader and presented a mostly-automatic
technique for developing it. By delving into these discrepancies
between the reference extractor and the existing extractors we
have identiﬁed several new obfuscations and further quan-
tiﬁed their impact when used in parser confusion attacks
on JavaScript extractors and malware detectors. By combin-
ing several of these obfuscations, we produced a malicious
PDF which can successfully evade all the malware detectors
evaluated, including signature-based, structure/metadata-based,
and JavaScript-based detectors. To address parser confusion
attacks, we discuss several mitigation techniques. In particular,
we demonstrate that with our reference JavaScript extractor
the detection rate of an existing classiﬁer has increases sig-
niﬁcantly from 68% to 96% on our sample set and present a
possible deployment scenario for the reference extractor.
ACKNOWLEDGEMENT
We would like to thank anonymous reviewers and our
shepherd Dr. Guofei Gu for their insightful feedback. This
research was supported in part by National Science Foundation
Grant #1054605, Air Force Research Lab Grant #FA8750-13-
2-0115 and #FA8750-15-2-0106, and DARPA Grant #FA8750-
14-C-0118. Any opinions, ﬁndings, and conclusions in this
paper are those of the authors and do not necessarily reﬂect
the views of the funding agencies.
VII. LIMITATIONS
REFERENCES
The primary limitation of the reference extractor is its
ability to only extract code which is automatically executed by
[1]
“Adobe acrobat reader : Security vulnerabilities published in 2014,”
http://www.cvedetails.com/vulnerability-list/vendor id-53/product id-
497/year-2014/Adobe-Acrobat-Reader.html.
14
[26] X. Lu, J. Zhuge, R. Wang, Y. Cao, and Y. Chen, “De-obfuscation
and Detection of Malicious PDF Files with High Accuracy,” in 46th
Hawaii International Conference on System Sciences, HICSS 2013,
Wailea, HI, USA, January 7-10, 2013, 2013, pp. 4890–4899. [Online].
Available: http://dx.doi.org/10.1109/HICSS.2013.166
[27] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood, “Pin: Building customized
program analysis tools with dynamic instrumentation,” in Proceedings
of the 2005 ACM SIGPLAN Conference on Programming Language
Design and Implementation, 2005.
[28] D. Maiorca,
for Malicious PDF Files Detection,”
I. Corona, and G. Giacinto, “Looking at
the Bag
is Not Enough to Find the Bomb: An Evasion of Structural
in Proceedings
Methods
of
the 8th ACM SIGSAC Symposium on Information, Computer
and Communications Security, ser. ASIA CCS ’13. New York,
NY, USA: ACM, 2013, pp. 119–130.
[Online]. Available: http:
//doi.acm.org/10.1145/2484313.2484327
[29] D. Maiorca, G. Giacinto, and I. Corona, “A Pattern Recognition
System for Malicious PDF Files Detection,” in Proceedings of
the 8th International Conference on Machine Learning and Data
Mining in Pattern Recognition, ser. MLDM’12. Berlin, Heidelberg:
Springer-Verlag, 2012, pp. 510–524.
[Online]. Available: http:
//dx.doi.org/10.1007/978-3-642-31537-4 40
[30] P. Ratanaworabhan, B. Livshits, and B. Zorn, “Nozzle: A defense
against heap-spraying code injection attacks,” in Proceedings of the
Usenix Security Symposium. USENIX, 2009. [Online]. Available:
http://research.microsoft.com/apps/pubs/default.aspx?id=81085
[31] M. Z. Shaﬁq, S. A. Khayam, and M. Farooq, “Embedded malware de-
tection using markov n-grams,” in Proceedings of the 5th International
Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment, 2008.
[32] C. Smutz and A. Stavrou, “Malicious PDF Detection Using Metadata
the 28th Annual
and Structural Features,”
Computer Security Applications Conference, ser. ACSAC ’12. New
York, NY, USA: ACM, 2012, pp. 239–248.
[Online]. Available:
http://doi.acm.org/10.1145/2420950.2420987
in Proceedings of
[33] K. Snow, S. Krishnan, F. Monrose, and N. Provos, “Shellos:
Enabling fast detection and forensic analysis of code injection
attacks,” in USENIX Security Symposium, 2011. [Online]. Available:
http://static.usenix.org/events/sec11/tech/full papers/Snow.pdf
[34] Y. Song, M. E. Locasto, A. Stavrou, A. D. Keromytis, and S. J. Stolfo,
“On the infeasibility of modeling polymorphic shellcode,” in Proceed-
ings of the 14th ACM Conference on Computer and Communications
Security, 2007.
[35] D. Stevens, “PDF Tools,” http://blog.didierstevens.com/programs/pdf-
tools/.
[36] ——, “PDFiD On VirusTotal,” http://blog.didierstevens.com/2009/04/
21/pdﬁd-on-virustotal/.
[37] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and E. P. Markatos,
the detection of
for
“Combining static and dynamic analysis
malicious documents,” in Proceedings of
the Fourth European
Workshop on System Security, ser. EUROSEC ’11. New York,
NY, USA: ACM, 2011, pp. 4:1–4:6.
[Online]. Available: http:
//doi.acm.org/10.1145/1972551.1972555
[38] N. ˇSrndi´c and P. Laskov, “Detection of malicious PDF ﬁles based on
hierarchical document structure,” in In Proceedings of the Network and
Distributed System Security Symposium, NDSS 2013.
The Internet
Society, 2013.
[39] N.
ˇSrndic and P. Laskov, “Practical evasion of a learning-based
classiﬁer: A case study,” in Proceedings of the 2014 IEEE Symposium
on Security and Privacy, ser. SP ’14. Washington, DC, USA:
IEEE Computer Society, 2014, pp. 197–211. [Online]. Available:
http://dx.doi.org/10.1109/SP.2014.20
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
“Adobe acrobat reader : Security vulnerabilities published in 2015,”
http://www.cvedetails.com/vulnerability-list/vendor id-53/product id-
497/year-2015/Adobe-Acrobat-Reader.html.
“CVE-2013-3346 Adobe Reader ToolButton Use After Free,”
http://www.rapid7.com/db/modules/exploit/windows/browser/adobe
toolbutton.
“difﬂib – helpers for computing deltas,” https://docs.python.org/2/
library/difﬂib.html.
“Introducing adobe reader protected mode,” http://blogs.adobe.com/
security/2010/07/introducing-adobe-reader-protected-mode.html.
“jsunpack-n,” http://code.google.com/p/jsunpack-n/.
“libpdfjs,” http://sourceforge.net/projects/libpdfjs/.
“origami,” https://code.google.com/p/origami-pdf/.
“PDFrate A machine learning based classiﬁer operating on document
metadata and structure,” http://pdfrate.com/.
“Poppler,” http://poppler.freedesktop.org/.
“PyPDF2,” https://github.com/mstamy2/PyPDF2.
“Vulnerability Details : CVE-2013-3346,” http://www.cvedetails.com/
cve/2013-3346.
J. Berkenbilt, “QPDF: A Content-Preserving PDF Transformation Sys-
tem,” http://qpdf.sourceforge.net/.
[14] G. Delugr´e, “The undocumented password validation algorithm of
adobe reader x,” http://esec-lab.sogeti.com/post/The-undocumented-
password-validation-algorithm-of-Adobe-Reader-X.
[15] B. Dolan-Gavitt, T. Leek, J. Hodosh, and W. Lee, “Tappan zee (north)
bridge: mining memory accesses for introspection,” in Proceedings of
the 2013 ACM SIGSAC conference on Computer & communications
security. ACM, 2013, pp. 839–850.
[16] P. Fogla and W. Lee, “Evading network anomaly detection systems:
Formal reasoning and practical techniques,” in Proceedings of the 13th
ACM Conference on Computer and Communications Security, 2006.
[17] P. Fogla, M. Sharif, R. Perdisci, O. Kolesnikov, and W. Lee, “Poly-
morphic blending attacks,” in Proceedings of the 15th Conference on
USENIX Security Symposium - Volume 15, 2006.
[18] M. Garnaeva, V. Chebyshev, D. Makrushin, R. Unuchek,
and A.
http:
//securelist.com/analysis/kaspersky-security-bulletin/68010/kaspersky-
security-bulletin-2014-overall-statistics-for-2014/.
“Kaspersky
security
Ivanov,
bulletin
2014.”
[19] D. Goodin, “It’s ofﬁcial: Adobe reader is world’s most-exploited app,”
http://www.theregister.co.uk/2010/03/09/adobe reader attacks/, 2010.
[20] A. Henderson, A. Prakash, L. K. Yan, X. Hu, X. Wang, R. Zhou, and
H. Yin, “Make it work, make it right, make it fast: Building a platform-
neutral whole-system dynamic binary analysis platform,” in Proceedings
of the 2014 International Symposium on Software Testing and Analysis,
ser. ISSTA 2014. New York, NY, USA: ACM, 2014, pp. 248–258.
[Online]. Available: http://doi.acm.org/10.1145/2610384.2610407
[21] G. Hunt and D. Brubacher, “Detours: Binary interception of win32
functions,” in Third USENIX Windows NT Symposium. USENIX,
July 1999, p. 8. [Online]. Available: http://research.microsoft.com/
apps/pubs/default.aspx?id=68568
[22] S. Jana and V. Shmatikov, “Abusing ﬁle processing in malware
the 2012 IEEE
detectors for
Symposium on Security and Privacy, ser. SP ’12. Washington, DC,
USA: IEEE Computer Society, 2012, pp. 80–94. [Online]. Available:
http://dx.doi.org/10.1109/SP.2012.15
fun and proﬁt,” in Proceedings of
[23] P. Laskov and N. ˇSrndi´c, “Static Detection of Malicious JavaScript-
bearing PDF Documents,” in Proceedings of
the 27th Annual
Computer Security Applications Conference, ser. ACSAC ’11. New
York, NY, USA: ACM, 2011, pp. 373–382.
[Online]. Available:
http://doi.acm.org/10.1145/2076732.2076785
[24] M. Lee, “GNU PDF project leaves FSF High Priority Projects list; mis-
sion complete!” https://www.fsf.org/blogs/community/gnu-pdf-project-
leaves-high-priority-projects-list-mission-complete.
[25] D. Liu, H. Wang, and A. Stavrou, “Detecting Malicious Javascript
in PDF Through Document Instrumentation,” in Proceedings of the
2014 44th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks, ser. DSN ’14. Washington, DC, USA:
IEEE Computer Society, 2014, pp. 100–111. [Online]. Available:
http://dx.doi.org/10.1109/DSN.2014.92
15