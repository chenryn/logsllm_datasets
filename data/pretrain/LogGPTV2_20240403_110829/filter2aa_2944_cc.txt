A controller process running in a separate control plane 
namespace can register with the Kubernetes API to watch for new pods. When 
a new pod is created, the controller uses its private key to sign a short-lived 
JWT, which it then deploys to the new pod. The pod can then exchange the JWT 
for an access token or other long-lived credentials.
425
Managing service credentials
A production-quality implementation of this pattern is available, again for Hashicorp
Vault, as the Boostport Kubernetes-Vault integration project (https://github.com/
Boostport/kubernetes-vault). This controller can inject unique secrets into each pod,
allowing the pod to connect to Vault to retrieve its other secrets. Because the initial
secrets are unique to a pod, they can be restricted to allow only a single use, after
which the token becomes invalid. This ensures that the credential is valid for the
shortest possible time. If an attacker somehow managed to compromise the token
before the pod used it, then the pod will noisily fail to start up when it fails to connect
to Vault, providing a signal to security teams that something unusual has occurred.
11.5.4 Key derivation
A complementary approach to secure distribution of secrets is to reduce the number
of secrets your application needs in the first place. One way to achieve this is to derive
cryptographic keys for different purposes from a single master key, using a key deriva-
tion function (KDF). A KDF takes the master key and a context argument, which is typ-
ically a string, and returns one or more new keys as shown in figure 11.9. A different
context argument results in completely different keys and each key is indistinguish-
able from a completely random key to somebody who doesn’t know the master key,
making them suitable as strong cryptographic keys.
If you recall from chapter 9, macaroons work by treating the HMAC tag of an existing
token as a key when adding a new caveat. This works because HMAC is a secure pseudo-
random function, which means that its outputs appear completely random if you don’t
know the key. This is exactly what we need to build a KDF, and in fact HMAC is used as
the basis for a widely used KDF called HKDF (HMAC-based KDF, https://tools.ietf.org/
html/rfc5869). HKDF consists of two related functions:
 HKDF-Extract takes as input a high-entropy input that may not be suitable for
direct use as a cryptographic key and returns a HKDF master key. This function
KDF
Master key
"jwt-enc-key"
Context string
Derived key
A KDF uses a master
key and a context
string as inputs.
Different context
strings produce different
derived keys.
Figure 11.9
A key derivation 
function (KDF) takes a master key 
and context string as inputs and 
produces derived keys as outputs. 
You can derive an almost unlimited 
number of strong keys from a single 
high-entropy master key.
426
CHAPTER 11
Securing service-to-service APIs
is useful in some cryptographic protocols but can be skipped if you already have
a valid HMAC key. You won’t use HKDF-Extract in this book.
 HKDF-Expand takes the master key and a context and produces an output key of
any requested size.
DEFINITION
HKDF is a HMAC-based KDF based on an extract-and-expand
method. The expand function can be used on its own to generate keys from a
master HMAC key.
Listing 11.15 shows an implementation of HKDF-Expand using HMAC-SHA-256. To
generate the required amount of output key material, HKDF-Expand performs a
loop. Each iteration of the loop runs HMAC to produce a block of output key material
with the following inputs:
1
The HMAC tag from the last time through the loop unless this is the first loop.
2
The context string.
3
A block counter byte, which starts at 1 and is incremented each time.
With HMAC-SHA-256 each iteration of the loop generates 32 bytes of output key
material, so you’ll typically only need one or two loops to generate a big enough key for
most algorithms. Because the block counter is a single byte, and cannot be 0, you can
only loop a maximum of 255 times, which gives a maximum key size of 8,160 bytes.
Finally, the output key material is converted into a Key object using the javax.crypto
.spec.SecretKeySpec class. Create a new file named HKDF.java in the src/main/
java/com/manning/apisecurityinaction folder with the contents of the file.
TIP
If the master key lives in a HSM or KMS then it is much more efficient to
combine the inputs into a single byte array rather than making multiple calls
to the update() method.
package com.manning.apisecurityinaction;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.security.*;
import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.Objects.checkIndex;
public class HKDF {
    public static Key expand(Key masterKey, String context,
                             int outputKeySize, String algorithm)
            throws GeneralSecurityException {
        checkIndex(outputKeySize, 255*32);     
        var hmac = Mac.getInstance("HmacSHA256");    
        hmac.init(masterKey);                        
Listing 11.15
HKDF-Expand
Ensure the
caller didn’t
ask for too
much key
material.
Initialize the Mac 
with the master key.
427
Managing service credentials
        var output = new byte[outputKeySize];
        var block = new byte[0];
        for (int i = 0; i < outputKeySize; i += 32) {    
            hmac.update(block);    
            hmac.update(context.getBytes(UTF_8));     
            hmac.update((byte) ((i / 32) + 1));       
            block = hmac.doFinal();                      
            System.arraycopy(block, 0, output, i,        
                    Math.min(outputKeySize - i, 32));    
        }
        return new SecretKeySpec(output, algorithm);
    }
}
You can now use this to generate as many keys as you want from an initial HMAC key.
For example, you can open the Main.java file and replace the code that loads the AES
encryption key from the keystore with the following code that derives it from the
HMAC key instead as shown in the bold line here:
var macKey = keystore.getKey("hmac-key", "changeit".toCharArray());
var encKey = HKDF.expand(macKey, "token-encryption-key",
        32, "AES");
WARNING
A cryptographic key should be used for a single purpose. If you use
a HMAC key for key derivation, you should not use it to also sign messages.
You can use HKDF to derive a second HMAC key to use for signing.
You can generate almost any kind of symmetric key using this method, making sure
to use a distinct context string for each different key. Key pairs for public key cryp-
tography generally can’t be generated in this way, as the keys are required to have
some mathematical structure that is not present in a derived random key. However,
the Salty Coffee library used in chapter 6 contains methods for generating key pairs
for public key encryption and for digital signatures from a 32-byte seed, which can
be used as follows:
var seed = HKDF.expand(macKey, "nacl-signing-key-seed",    
        32, "NaCl");                                       
var keyPair = Crypto.seedSigningKeyPair(seed.getEncoded());     
CAUTION
The algorithms used by Salty Coffee, X25519 and Ed25519, are
designed to safely allow this. The same is not true of other algorithms.
Although generating a handful of keys from a master key may not seem like much of a
savings, the real value comes from the ability to generate keys programmatically that
are the same on all servers. For example, you can include the current date in the
context string and automatically derive a fresh encryption key each day without
needing to distribute a new key to every server. If you include the context string in the
Loop until the 
requested output size 
has been generated.
Include the
output block
of the last
loop in the
new HMAC.
Include the context string and 
the current block counter.
Copy the new HMAC 
tag to the next block 
of output.
Use HKDF to 
generate a seed.
Derive a signing
keypair from the seed.
428
CHAPTER 11
Securing service-to-service APIs
encrypted data, for example as the kid header in an encrypted JWT, then you can
quickly re-derive the same key whenever you need without storing previous keys.
11.6
Service API calls in response to user requests
When a service makes an API call to another service in response to a user request, but
uses its own credentials rather than the user’s, there is an opportunity for confused
deputy attacks like those discussed in chapter 9. Because service credentials are often
more privileged than normal users, an attacker may be able to trick the service to per-
forming malicious actions on their behalf.
 You can avoid confused deputy attacks in service-to-service calls that are carried
out in response to user requests by ensuring that access control decisions made in
backend services include the context of the original request. The simplest solution is
for frontend services to pass along the username or other identifier of the user that
Facebook CATs
As you might expect, Facebook needs to run many services in production with numer-
ous clients connecting to each service. At the huge scale they are running at, public
key cryptography is deemed too expensive, but they still want to use strong authen-
tication between clients and services. Every request and response between a client
and a service is authenticated with HMAC using a key that is unique to that client-
service pair. These signed HMAC tokens are known as Crypto Auth Tokens, or CATs,
and are a bit like signed JWTs. 
To avoid storing, distributing, and managing thousands of keys, Facebook uses key
derivation heavily. A central key distribution service stores a master key. Clients and
services authenticate to the key distribution service to get keys based on their
identity. The key for a service with the name “AuthService” is calculated using
KDF(masterKey, "AuthService"), while the key for a client named “Test” to talk to
the auth service is calculated as KDF(KDF(masterKey, "AuthService"), "Test").
This allows Facebook to quickly generate an almost unlimited number of client and
service keys from the single master key. You can read more about Facebook’s CATs
at https://eprint.iacr.org/2018/413.
Pop quiz
12 Which HKDF function is used to derive keys from a HMAC master key?
a
HKDF-Extract
b
HKDF-Expand
c
HKDF-Extrude
d
HKDF-Exhume
e
HKDF-Exfiltrate
The answer is at the end of the chapter.
429
Service API calls in response to user requests
made the original request. The backend service can then make an access control deci-
sion based on the identity of this user rather than solely on the identity of the calling
service. Service-to-service authentication is used to establish that the request comes
from a trusted source (the frontend service), and permission to perform the action is
determined based on the identity of the user indicated in the request.
TIP
As you’ll recall from chapter 9, capability-based security can be used to
systematically eliminate confused deputy attacks. If the authority to perform
an operation is encapsulated as a capability, this can be passed from the user
to all backend services involved in implementing that operation. The author-
ity to perform an operation comes from the capability rather than the identity
of the service making a request, so an attacker can’t request an operation they
don’t have a capability for.
11.6.1 The phantom token pattern
Although passing the username of the original user is simple and can avoid confused
deputy attacks, a compromised frontend service can easily impersonate any user by sim-
ply including their username in the request. An alternative would be to pass down the
token originally presented by the user, such as an OAuth2 access token or JWT. This
allows backend services to check that the token is valid, but it still has some drawbacks:
 If the access token requires introspection to check validity, then a network call
to the AS has to be performed at each microservice that is involved in process-
ing a request. This can add a lot of overhead and additional delays.
 On the other hand, backend microservices have no way of knowing if a long-
lived signed token such as a JWT has been revoked without performing an
introspection request.
 A compromised microservice can take the user’s token and use it to access other
services, effectively impersonating the user. If service calls cross trust boundaries,
Kubernetes critical API server vulnerability
In 2018, the Kubernetes project itself reported a critical vulnerability allowing this
kind of confused deputy attack (https://rancher.com/blog/2018/2018-12-04-k8s-
cve/). In the attack, a user made an initial request to the Kubernetes API server,
which authenticated the request and applied access control checks. It then made its
own connection to a backend service to fulfill the request. This API request to the
backend service used highly privileged Kubernetes service account credentials, pro-
viding administrator-level access to the entire cluster. The attacker could trick Kuber-
netes into leaving the connection open, allowing the attacker to send their own
commands to the backend service using the service account. The default configura-
tion permitted even unauthenticated users to exploit the vulnerability to execute any
commands on backend servers. To make matters worse, Kubernetes audit logging
filtered out all activity from system accounts so there was no trace that an attack had
taken place.
430
CHAPTER 11
Securing service-to-service APIs
such as when calls are made to external services, the risk of exposing the user’s
token increases.
The first two points can be addressed through an OAuth2 deployment pattern imple-
mented by some API gateways, shown in figure 11.10. In this pattern, users present
long-lived access tokens to the API gateway which performs a token introspection call
to the AS to ensure the token is valid and hasn’t been revoked. The API gateway then
takes the contents of the introspection response, perhaps augmented with additional
information about the user (such as roles or group memberships) and produces a
short-lived JWT signed with a key trusted by all the microservices behind the gateway.
The gateway then forwards the request to the target microservices, replacing the orig-
inal access token with this short-lived JWT. This is sometimes referred to as the phan-
tom token pattern. If a public key signature is used for the JWT then microservices can
validate the token but not create their own.
DEFINITION
In the phantom token pattern, a long-lived opaque access token is
validated and then replaced with a short-lived signed JWT at an API gateway.
Microservices behind the gateway can examine the JWT without needing to
perform an expensive introspection request.
API gateway
AS
Microservice
Microservice
Microservice
Access token
Introspect token
Signed JWT
The API gateway introspects
incoming access tokens
by calling the AS.
The gateway signs a short-lived
JWT with its own private key.
Backend microservices
validate the JWT rather
than calling the AS.
Figure 11.10
In the phantom token pattern, an API gateway introspects 
access tokens arriving from external clients. It then replaces the access 
token with a short-lived signed JWT containing the same information. 
Microservices can then examine the JWT without having to call the AS to 
introspect themselves.
431
Service API calls in response to user requests
The advantage of the phantom token pattern is that microservices behind the gateway
don’t need to perform token introspection calls themselves. Because the JWT is short-
lived, typically with an expiry time measured in seconds or minutes at most, there is
no need for those microservices to check for revocation. The API gateway can exam-
ine the request and reduce the scope and audience of the JWT, limiting the damage
that would be done if any backend microservice has been compromised. In principle,
if the gateway needs to call five different microservices to satisfy a request, it can create
five separate JWTs with scope and audience appropriate to each request. This ensures
the principle of least privilege is respected and reduces the risk if any one of those ser-
vices is compromised, but is rarely done due to the extra overhead of creating new
JWTs, especially if public key signatures are used.
TIP
A network roundtrip within the same datacenter takes a minimum of
0.5ms plus the processing time required by the AS (which may involve data-
base network requests). Verifying a public key signature varies from about
1/10th of this time (RSA-2048 using OpenSSL) to roughly 10 times as long
(ECDSA P-521 using Java’s SunEC provider). Verifying a signature also gen-
erally requires more CPU power than making a network call, which may
impact costs.
The phantom token pattern is a neat balance of the benefits and costs of opaque
access tokens compared to self-contained token formats like JWTs. Self-contained
tokens are scalable and avoid extra network roundtrips, but are hard to revoke, while
the opposite is true of opaque tokens.
PRINCIPLE
Prefer using opaque access tokens and token introspection when
tokens cross trust boundaries to ensure timely revocation. Use self-contained
short-lived tokens for service calls within a trust boundary, such as between
microservices.
11.6.2 OAuth2 token exchange
The token exchange extension of OAuth2 (https://www.rfc-editor.org/rfc/rfc8693.html)
provides a standard way for an API gateway or other client to exchange an access
token for a JWT or other security token. As well as allowing the client to request a new
token, the AS may also add an act claim to the resulting token that indicates that the
service client is acting on behalf of the user that is identified as the subject of the
token. A backend service can then identify both the service client and the user that
initiated the request originally from a single access token.
DEFINITION
Token exchange should primarily be used for delegation semantics,
in which one party acts on behalf of another but both are clearly identified. It
can also be used for impersonation, in which the backend service is unable to
tell that another party is impersonating the user. You should prefer delega-
tion whenever possible because impersonation leads to misleading audit logs
and loss of accountability.
432
CHAPTER 11
Securing service-to-service APIs
To request a token exchange, the client makes a HTTP POST request to the AS’s
token endpoint, just as for other authorization grants. The grant_type parameter is
set to urn:ietf:params:oauth:grant-type:token-exchange, and the client passes a
token representing the user’s initial authority as the subject_token parameter, with
a subject_token_type parameter describing the type of token (token exchange allows
a variety of tokens to be used, not just access tokens). The client authenticates to the
token endpoint using its own credentials and can provide several optional parameters
shown in table 11.4. The AS will make an authorization decision based on the sup-
plied information and the identity of the subject and the client and then either return
a new access token or reject the request.
TIP
Although token exchange is primarily intended for service clients, the
actor_token parameter can reference another user. For example, you can
use token exchange to allow administrators to access parts of other users’
accounts without giving them the user’s password. While this can be done, it
has obvious privacy implications for your users.
The requested_token_type attribute allows the client to request a specific type of
token in the response. The value urn:ietf:params:oauth:token-type:access_token
indicates that the client wants an access token, in whatever token format the AS pre-
fers, while urn:ietf:params:oauth:token-type:jwt can be used to request a JWT
specifically. There are other values defined in the specification, permitting the client
to ask for other security token types. In this way, OAuth2 token exchange can be seen
as a limited form of security token service.
DEFINITION
A security token service (STS) is a service that can translate security
tokens from one format to another based on security policies. An STS can be
used to bridge security systems that expect different token formats.
Table 11.4
Token exchange optional parameters
Parameter
Description
resource
The URI of the service that the client intends to access on the user’s 
behalf.
audience
The intended audience of the token. This is an alternative to the 
resource parameter where the identifier of the target service is 
not a URI.
scope
The desired scope of the new access token.
requested_token_type
The type of token the client wants to receive.