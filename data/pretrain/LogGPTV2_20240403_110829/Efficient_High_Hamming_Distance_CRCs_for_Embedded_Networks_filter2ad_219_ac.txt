### 6. Results

In this section, we present the results of the experiments described in Section 5. We evaluate the performance of the CRC algorithms in terms of execution time and memory requirements. Additionally, we analyze the relative error detection capabilities of the various algorithms. Since we have introduced new classes of CRC polynomials (CRC32sub8 and CRC32sub16), we also provide a list of "good" polynomials for these classes, considering different Hamming Distances and code word lengths.

#### 6.1 Performance

Figures 1 and 2 compare the computational speed of the four algorithms (Bit-shift, Virtual Table, Optimized Virtual Table, and Table Lookup) for CRC16, CRC32sub8, CRC24, CRC32sub16, and CRC32 on each microcontroller. The Worst Case Execution Time (WCET), Average Execution Time (AET), and Best Case Execution Time (BCET) are represented by the narrowing bars. Bars that do not narrow indicate implementations with fixed execution paths. Figures 3 and 4 compare the memory requirements for the same set of algorithms. As expected, there is a clear tradeoff between memory usage and execution speed: faster execution can be achieved at the expense of increased memory usage.

As anticipated, the performance of CRC16 and CRC32sub8 are roughly comparable, as are CRC24 and CRC32sub16.

#### 6.2 Error Detection Capability

When selecting an algorithm and generator polynomial for performance, it is crucial to consider the error detection capability of various design choices. To compare error detection capabilities, we computed the Hamming Distance (HD) bound for CRC32sub8, CRC24, and CRC32sub16 using the methods described in [14] (see Section 6.3 for a brief description). The results are shown in Table 4. For each class of polynomials, the table indicates the maximum code word length for which any polynomial of that class can achieve the stated HD. For example, a CRC16 polynomial can provide HD=8 for code words from 36 to 151 bits in length; beyond 151 bits, only HD=5 or less is possible. The bound for CRC32 is not shown because it is currently considered intractable. However, 32-bit polynomials are known to provide HD=6 up to almost 32K bits [5], making the tradeoff of using other polynomials relevant in terms of the maximum length at which HD=6 can be provided.

While CRC16 and CRC32sub8 have roughly equivalent computation and memory costs, CRC32sub8 provides significantly better error detection. For 2048-bit code words (a reasonable maximum size for embedded network messages), CRC32sub8 provides HD=6, while the best CRC16 polynomial provides only HD=4, an improvement of two additional bits of HD. All CRCs provide burst error detection up to the length of the Frame Check Sequence (FCS) regardless of the polynomial, so CRC32sub8 polynomials also offer superior burst error detection.

When comparing CRC24 and CRC32sub16, which have similar memory and performance costs, it is evident that CRC32sub16 has superior error performance. Additionally, CRC32sub8, which is faster to compute than CRC24, also has better error detection properties for code words longer than 151 bits. Both CRC32sub8 and CRC32sub16 provide burst error detection for all bursts up to 32 bits in width. Since a chosen CRC must provide a given HD for the entire range of possible messages, the choice of either CRC32sub8 or CRC32sub16 for appropriately sized code words would be an improvement in error detection over CRC24, with the same or better computational speed. Another benefit of adopting CRC32sub8 or CRC32sub16 to replace CRC24 is future extensibility. CRC24 can provide HD=6 for code words up to 2048 bits, which is required for most safety-critical applications. Any future expansion would require a CRC algorithm with HD=6 coverage beyond this length. CRC32sub8 can provide HD=6 for code words up to 4145 bits (more than double that of CRC24), and CRC32sub16 up to 8220 bits (more than four times that of CRC24).

#### 6.3 Good CRCksubr Polynomials

The optimal HD bound and optimum polynomials were obtained using the method described in [14], which we briefly outline here. For each HD, the entire space of polynomials meeting the CRCksubr criteria was evaluated to the longest data length where a polynomial of the given HD still exists. If there is only one polynomial that reaches this length, it is considered good. If there are multiple such polynomials, the one with the lowest Hamming weight (number of undetected errors at a given HD) is identified. All polynomials within 10% of this minimum are then searched to further identify which ones achieve a still higher HD for shorter message lengths, and the one that achieves that higher HD for the longest message length is considered the best. Other criteria are possible for selecting good polynomials, but this set of criteria provides a reasonable engineering tradeoff for typical embedded applications.

Table 4 shows the maximum code word length (data word + FCS) for which a given HD can be obtained for a given polynomial class. Table 5 lists the good polynomials for the CRC32sub8 polynomial class, and Table 6 lists the good polynomials for the CRC32sub16 polynomial class. Each polynomial is given as a numeric value (binary representation with implicit x32 term) and a polynomial representation. The third line of each entry contains a list of the degrees of the polynomial's factors, using the notation from [13]. Each good polynomial provides the stated HD (or better) for all code words less than or equal to the stated length. Although the bound for HD=6 is at code words of 4145 bits, a good polynomial for code words with a maximum length of 2048 bits is also provided, as it offers better error detection at short data lengths.

### 7. Correctness of the CRC Algorithm

One practical issue in implementing CRCs is ensuring the correct bit order of computation and placement of bits into the FCS to preserve burst error properties. While most network protocols handle this correctly, it is a tricky area that is not always implemented properly.

Suppose an application implements a standard that requires the data bits to be processed least significant bit (LSB) first, as in the CRC32 standard. Because the bit-reversal process is slow in most processors, implementers might instead develop an equivalent "right-shift" algorithm, as shown in Table 7. This algorithm uses the reversed CRC polynomial with an implicit x0 term. The reverse of the CCITT-16 polynomial is x16 + x11 + x4 + 1 and should be represented accordingly.

**Table 5. Good CRC32sub8 Polynomials**

| HD | Polynomial | Binary Representation | Factor Degrees |
|----|------------|-----------------------|----------------|
| 8  | x32 + x8 + x7 + x6 + x4 + x2 + x1 + x0 | 1000000001111011111 | [8, 7, 6, 4, 2, 1, 0] |

**Table 4. Hamming Distance and Maximum Code Word Length**

| Hamming Distance (bits) | CRC16 | CRC32sub8 | CRC24 | CRC32sub16 |
|-------------------------|--------|------------|--------|-------------|
| 7                       | 35     | 47         | -      | 62          |
| 6                       | 151    | 4145       | 2048   | 8046+       |
| 5                       | -      | -          | -      | -           |
| 4                       | -      | -          | -      | -           |
| 3                       | -      | -          | -      | -           |
| 2                       | -      | -          | -      | -           |
| 1                       | -      | -          | -      | -           |

This table shows the maximum code word length (data word + FCS) for which a given HD can be obtained for a given polynomial class.