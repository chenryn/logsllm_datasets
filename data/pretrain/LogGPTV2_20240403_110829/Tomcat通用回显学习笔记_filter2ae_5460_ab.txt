          - locked  (a sun.nio.ch.WindowsSelectorImpl)
          - locked  (a java.util.Collections$UnmodifiableSet)
          - locked  (a sun.nio.ch.Util$2)
          at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)
          at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:816)
          at java.lang.Thread.run(Thread.java:745)
* * *
###  获取Processor对象
  1. 进入线程`ClientPoller`之后，T基本类型变成了java.lang.Thread。反射获取其中`target`字段，该字段的类型是`Runnable`。
    //str = http-nio-8090-ClientPoller 进入下面 ps: i=14
    // java.lang.Thread
    f = t.getClass().getDeclaredField("target");
    f.setAccessible(true);
    // obj ->  NioEndpoint$Poller实例化对象
    Object obj = f.get(t);
    // NioEndpoint$Poller  implements Runnable
    if (!(obj instanceof Runnable)) {
    continue;
    }
  1. `NioEndpoint$Poller`是实现了Runnable接口
  1. 这里是一个匿名内部类（NioEndpoint$Poller）获取持有的外部类对象（NioEndpoint）的操作，参考补充小知识this$0。
    // this$0 是NioEndpoint对象
    f = obj.getClass().getDeclaredField("this$0");
    f.setAccessible(true);
  1. 获取到NioEndpoint对象之后，向上获取Handler对象。 NioEndpoint extends AbstractJsseEndpoint然而在AbstractJsseEndpoint中是没有Handler字段对象的， 但在其extends `AbstractEndpoint`中是存在AbstractEndpoint$Handler字段。
    // f.get(obj) --> org.apche.tomcat.util.net.NioEndpoint 对象
    obj = f.get(obj);
    // NioEndpoint extends AbstractJsseEndpoint --> extends AbstractEndpoint$Handler
    //  AbstractEndpoint$Handler 是一个接口，在org.apche.coyote.AbstractProtocol$ConnectionsHanhler实现
    try {
    f = obj.getClass().getDeclaredField("handler");
    } catch (NoSuchFieldException e) {
    f = obj.getClass().getSuperclass().getSuperclass().getDeclaredField("handler");
    }
    // obj -->  org.apche.coyote.AbstractProtocol$ConnectionsHanhler
    f.setAccessible(true);
    obj = f.get(obj);
  1. 在AbstractEndpoint$Handler是一个接口，其实现类`AbstractProtocol$ConnectionsHanhler`是所需要的Handler。ConnectionsHanhler中是包含`global`字段。
    // obj --> org.apche.coyote.AbstractProtocol$ConnectionsHanhler
    try {
    f = obj.getClass().getSuperclass().getDeclaredField("global");
    } catch (NoSuchFieldException e) {
    // obj --> AbstractProtocol$ConnectionsHanhler
    f = obj.getClass().getDeclaredField("global");
    }
  1. 获取到`RequestGroupInfo`对象，在`RequestGroupInfo`之中有包含`Processor`对象`list`。
    // obj --> org.apche.coyote.RequestGroupInfo
    f.setAccessible(true);
    obj = f.get(obj);
    f = obj.getClass().getDeclaredField("processors");
    f.setAccessible(true);
    // processors --> List
    java.util.List processors = (java.util.List) (f.get(obj));
  1. 获取到Processor对象之后，接着获取`Request`和`Response`，在然后就是一段读写操作。
                     // processors.size() == 1
                    for (int j = 0; j  返回这个字段在指定对象上所代表的字段的值。如果该值有一个原始类型，它将被自动包装在一个对象中。  
>  底层字段的值是按如下方式获得的。  
>  如果底层字段是一个静态字段，obj参数被忽略；它可能是空的。  
>
> 否则，底层字段是一个实例字段。如果指定的obj参数为空，该方法会抛出一个NullPointerException。如果指定的对象不是声明底层字段的类或接口的实例，该方法会抛出一个IllegalArgumentException。  
>
> 如果这个字段对象正在执行Java语言的访问控制，并且底层字段是不可访问的，该方法会抛出一个IllegalAccessException。如果底层字段是静态的，声明该字段的类将被初始化，如果它还没有被初始化。  
>  否则，该值将从底层实例或静态字段中检索出来。如果字段有一个原始类型，那么在返回之前，该值会被包裹在一个对象中，否则会原样返回。  
>  如果字段被隐藏在obj的类型中，那么字段的值将根据前面的规则获得。
大致作用就是返回该字段的实例对象，如果字段不是类和接口的实例就会报错。
* * *
###  this$0
this$0是指获取匿名内部类持有的外部类对象，大致意思如下，`ThirdInner`的外部this$0类对象是`Outer`。更多内容可以参考[获取Java匿名内部类持有的外部类对象](https://www.jianshu.com/p/9335c15c43cf)。
    public class Outer {//this$0
        public class FirstInner {//this$1
            public class SecondInner {//this$2
                public class ThirdInner {
                }
            }
        }
    }
* * *
## 参考
[https://lucifaer.com/2020/05/12/Tomcat通用回显学习/](https://lucifaer.com/2020/05/12/Tomcat%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E5%AD%A6%E4%B9%A0/)