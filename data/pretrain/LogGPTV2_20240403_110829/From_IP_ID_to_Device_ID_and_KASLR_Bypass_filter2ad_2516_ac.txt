4. The tracker then guesses 14 bits (β0 mod 214 - the
most signiﬁcant bit of β0 mod 215 cancels itself in
eq. (4)) of the counter that is used for these IP addresses,
calculates vectors D j ( j = 1, . . . ,J − 1), where D j =
(Vec(IPID j − (β0 + j) mod 215) ⊕ Vec(IPID0 − (β0)
mod 215))17,...,31, and performs a matrix-by-vector mul-
tiplication of Z and the vector (D0, . . . ,DJ−1).
For the correct value of β0 mod 214 this computation
results in a vector of 15(J − 1) bits, whose ﬁrst 30 bits
are K33, . . . ,K62 and the remaining bits are zero.
5. The attacker identiﬁes the right value of the counter by
comparing to zero the 15(J−1)−30 bits starting at po-
sition 31: if 15(J − 1)− 30 (cid:29) 14, this veriﬁcation sta-
tistically guarantees the correctness of the solution (up
to a ﬂipped most signiﬁcant bit in β0 mod 214, see the
extended paper.)
algorithm is calculated with β [ig]g, j = βg + j mod 215 (for
simplicity, in Windows 10 RedStone 5, we discard the most
signiﬁcant bit of the IP ID).
We focus in this phase on the ﬁrst class B network, b0,
with J destination IP addresses in it. Note that the offset that
is calculated in line 3 is the difference between the IPID and
the counter β [i0] prior to its increment.
The attack enumerates over the values of the β0 mod 215
counter. For each possible value it calculates the differences
between the observed J IPIDs and the corresponding values
of the counter, arriving at the offsets calculated in line 3. By
observing pairs of IPIDs, it is possible to identify the correct
value of β0 mod 215 as well as 30 bits of the key.
In more detail, for each possible value of β0 mod 215 the
attack calculates the difference
IPID j − (β0 + j mod 215) mod 215
which, for the right value of the counter should be equal to
the offset that is calculated in line 3. Namely to
Num(K1⊕ T (K,IP j||IPSRC||032)) mod 215
value
expressed
This
be
T (K,IP j||IPSRC||032))17,...,31.
eq. (3), this expression is simpliﬁed into:
can
as
Applying eq.
(K1 ⊕
(2) and
(K1⊕ T (K,IP j)⊕ T (K,032||IPSRC))17,...,31
.
The attack takes two different j values and computes the
XOR of the two corresponding such quantities. This results
in the following expression (where we denote by Vec a rep-
resentation of a number in [0,232) as a vector in GF(2)32):
(Vec(IPID j − (β0 + j) mod 215)⊕
Vec(IPID j(cid:48) − (β0 + j(cid:48)) mod 215))17,...,31 =
T (K,IP j ⊕ IP j(cid:48)
)17,...,31
This yields 15 linear equations (i = 17, . . . ,31) on K since
(from eq. (1)):
T (K,IP j ⊕ IP j(cid:48)
)i =
31(cid:77)
(IP j ⊕ IP j(cid:48)
)m · Ki+m
m=0
Since all IP j belong to the same class B network, IP j ⊕ IP j(cid:48)
always has 0 for its ﬁrst 16 bits, and therefore m can start at
1068    28th USENIX Security Symposium
USENIX Association
the value (β0 mod 214).
Overall this process reveals 30 bits of the key as well as
The attack takes 214 · (15(J − 1))2 bit operations (for enu-
meration over the possible key values and for the matrix-by-
vector and (15(J−1))2 memory bits (for Z). As explained in
Section 4.5, we set J = 6 and therefore this overhead is very
small.
The tracker obtains the (correct) value β0 mod 214, which
will be used in the next phase. While it is guaranteed that
the correct K and β0 mod 214 will be found, the algorithm
may emit additional candidates (with incorrect β0 mod 214).
The false positive probability of both phases of the attack is
analyzed in the extended paper.8
4.4 Extracting Bits of K - Phase 2
Given 30 bits of K (K33, . . . ,K62) and the value (β0
mod 214), recovered in Phase 1, the attack can be extended
to learn a total of up to 45 key bits (K18, . . . ,K62). This is
done in the following way. The offset for IPID0 computed in
line 3 of Algorithm 1 is:
Num(K1⊕ T (K,IP0)⊕ T (K,032||IPSRC)) mod 215 =
(IPID0 − β0) mod 215
The following equation follows from the previous one:
(K1⊕ T (K,032||IPSRC))17,...,31 = T (K,IP0)17,...,31⊕
Vec(IPID0 − β0 mod 215)17,...,31
The tracker looks at pairs of IP addresses in the remaining
B classes (b1, . . . ,bG), each pair in a different class B net-
work. Denote each such pair as (IPg,0,IPg,1), with the order
inside the pair conforming to the order of packet transmis-
sion, and the packets being transmitted in rapid succession.
Substituting the above into the deﬁnition of IPID yields:
Then this equation becomes
IPIDg, j = βg + j + Sg, j mod 215
Subtracting the IPIDs of the two consecutive packets in
the same B class (with j = 0 and j = 1) cancels the value of
the counter βg, and yields:
(IPIDg,1 − IPIDg,0) mod 215 = 1 + Sg,1 − Sg,0 mod 215
(5)
The left side of the equation is observed by the tracker.
The right side can be computed based on β0 mod 215 and
K17, . . . ,K62. The tracker already knows these values except
for K18, . . . ,K33, and therefore only needs to enumerate over
the 215 possible values of K18, . . . ,K32 and eliminate all val-
ues which do not agree with the equation. We discuss this
procedure in depth in the extended paper.
Attack summary:
1. The tracker needs to control additional G pairs of IPs
(each pair in its own class B network).
2. Given IP IDs for these pairs, the tracker enumerates
over additional 15 key bits, and then, for each pair of
IP addresses, calculates both sides of eq. (5) and com-
pares them. For this calculation the tracker can choose
K17 and the leftmost bit of β0 mod 215 arbitrarily, as
they will both cancel themselves.
3. In theory, each IP pair should yield a 215 elimination
power for identifying the right key, but see the extended
paper for a more accurate analysis.
4. In the calculation, the leading term (in terms of run
time) is computing T (K,I)17,...,31 (where |I| = 32),
which takes 14|I| bit operations, and is used twice.
Thus, the run-time is roughly 215 · 2· 14· 32 bit opera-
tions (there is no multiplication by G since the ﬁrst pair
is likely to eliminate almost all false guesses).
IPIDg, j = βg + j + Num( T (K,IP0)17,...,31
⊕ Vec(IPID0 − β0 mod 215)17,...,31
⊕ T (K,IPg, j)17,...,31 ) mod 215
Using the linearity of T , this is simpliﬁed into:
IPIDg, j = βg + j + Num ( T (K,IP0 ⊕ IPg, j)17,...,31 ⊕
Vec(IPID0 − β0 mod 215)17,...,31 ) mod 215
Let us use the notation
Sg, j = Num ( T (K,IP0 ⊕ IPg, j)17,...,31 ⊕
Vec(IPID0 − β0 mod 215)17,...,31 ) mod 215
8Note: Throughout the paper, we assume that rank(C) = 30. This re-
sults in a single key vector per guessed β0 mod 214. We discuss the con-
ditions on IP0, . . . ,IPJ−1 to meet this assumption in the extended paper. If
rank(ker(C)) > 0, then each guess of β0 mod 214 yields 2rank(ker(C)) possi-
ble keys. Thus small values of rank(ker(C)) are acceptable.
At the end of Phase 2, the tracker obtains:
• A partial key vector (or some candidates) K18, . . . ,K62
(45 bits), which is speciﬁc to the device since it was
set during kernel initialization, and does not depend on
IPSRC. These bits serve as a device ID.
• The value
(K1⊕ T (K,032||IPSRC))18,...,31 = T (K,IP0)18,...,31
⊕ Vec(IPID0 − β0 mod 214)18,...,31
This value allows the tracker to calculate (assuming
K18, . . . K62 are known) the value of the counter β [i]
mod 214 for any destination IP address whose IP ID is
known (provided the source IP is IPSRC).9
9This is useful for reconstructing the table β of counters – this table is
not correctly initialized (pre October 2018 Security Update), and therefore is
populated with kernel data that happens to be (in build 1803) data structures
containing kernel address pointers.
USENIX Association
28th USENIX Security Symposium    1069
4.5 Choosing Optimal G and J
For Windows, we assume budget-oriented constraints,
namely L available IP addresses and T CPU time per mea-
surement. We need to set the number J of IP addresses from
the same class B network to which the client is directed in
the ﬁrst set of measurements, and the number G of pairs of
IP addresses, each pair in the same class B network, used in
the second set of measurements.
Our goal is to optimize for minimum false positives. The
ﬁrst constraint can be expressed as J + 2G ≤ L. As for the
second constraint, the leading term of the time of the attack
run is α · (J!) (Appendix A.1.2), where α expresses the com-
puting platform’s strength. Therefore, we can approximate
the second constraint as α · (J!) ≤ T . Additionally, there
are inherent constraints: J − 1 ≥ 3 to let Phase 1 suggest a
single key candidate to Phase 2 (most of the time), and G ≥ 2
to let Phase 2 provide a single ﬁnal key (most of the time).
Given these constraints, we want to minimize the leading
term in false positives, 2· 2− G+J−1
(Appendix A.2), i.e. we
need to maximize G + J. Since we “pay” two IP addresses
for each increment of G and only one IP address for each
increment of J, we should make J as large as possible (as
long as G is valid), so the solution is:
2
J = min(max({J | αJ! ≤ T }),L− 4)
(As stated in Section 4.2, for L = 30, T = 1 sec., and
α = 0.001, the optimal combination is J = 6,G = 12.)
4.6 Practical Considerations
We discuss in Appendix A.1 different issues that appear
when deploying the attack. These issues include ways to
emit the needed trafﬁc from the browser, handling packet
loss and out-of-order packet transmission, handling interfer-
ing packets, and limiting the false-positive and false-negative
error probabilities.
The run time of the key extraction attack is less than a
second even on a very modest machine. The dwell time
(time duration in which the page needs to be loaded in the
browser) is 1-2 seconds for a WebSocket implementation. It
is possible to minimize the dwell time by moving to We-
bRTC (STUN).
Longevity: the device ID is valid until the machine restarts
(mere shutdown+start does not invalidate the device ID due
to Windows’ Fast Start feature). A typical user needs to
restart his/her Windows machine only for some Windows up-
dates, i.e. with a frequency of less than once per month.
The attack is scalable: with 41 bits, the probability of a
device to have a unique ID is very high, even for a billion
device population; false positives are also rare (2.1 × 10−6
– Table 3), and false negatives can be made negligible (Ap-
pendix A.1.4). From resource perspective, the attack uses a
ﬁxed number of servers, RAM/disk and (L = 30) IPs. The
required CPU power is linear in the number of devices mea-
sured per time unit, and in the Windows case is negligible.
Network consumption per test is also negligible (assuming
WebRTC/STUN implementation – 1.5KB at the IP layer.)
4.7 Attack Improvements and Variants
A fast-track identiﬁcation of already-seen keys can be ob-
tained in the following way: Once bits of a key K are ex-
tracted, they will be stored for comparison against future
connections. When a device is to be measured, the tracker
ﬁrst goes through all stored K bit strings, and tests the mea-
sured data for compatibility with each one of them. This
amounts to guessing the bits of β0 one by one, starting
from the least signiﬁcant, and eliminating via eq. (5), using
mod 2n where n is the number of β0 bits guessed so far. The
CPU work per key is thus almost negligible.
The original attack can also be sped up using incremental
evaluation. The details are in the extended paper.
4.8 Environment Factors
We demonstrate here that the tracking attack can be deployed
in almost every setting that can be reasonably expected.
HTTPS: In essence, there should be no problem in hav-
ing the snippet use WebSocket over HTTPS (wss:// URL
scheme) for TCP packets.
NAT: Typically NAT (Network Address Translator) de-
vices do not alter IP IDs, and thus do not affect the attack.
Transparent HTTP Proxy / Web Gateway: Such de-
vices may terminate the TCP connection and establish their
own connections (with IP ID from their own network stack)
and thus render our technique completely ineffective. How-
ever, typically these devices do not interfere with HTTPS
(TCP port 443) trafﬁc, and UDP trafﬁc, so these alternatives
can be used by the tracker.
Forward HTTP proxy: When a browser is conﬁgured to
use a forward proxy server, even HTTPS trafﬁc is routed to
it by the browser. However, it may still be the case that UDP
trafﬁc (which is not handled by HTTP forward proxies) can
be used by the technique.
Tor-based browsers and similar browsers: Browsers
that forward TCP trafﬁc to proxy servers (and disallow or
forward UDP requests) are incompatible with the tracking
technique as they do not expose IP header data generated on
the device. Since “Tor transports TCP streams, not IP pack-
ets”,10 this applies to all Tor-based products, such as the Tor
browser and Brave’s “Private Tabs with Tor” and therefore
they are not covered by our technique.
Windows Defender Application Guard (WDAG): This
new technology in Windows 10 enables the user to launch the
Edge browser in a virtual environment. While the device ID
10https://www.torproject.org/docs/faq.html.en#
RemotePhysicalDeviceFingerprinting
1070    28th USENIX Security Symposium
USENIX Association
in this virtual environment is independent of the device ID of
the main operating system, it is consistent among all WDAG
Edge instances. Furthermore, unlike the “main” Windows
device ID, the WDAG device ID does not change with oper-
ating system restart, hence the WDAG device ID lives longer
than the main Windows device ID. It should be noted that
WDAG is only available for Edge browser in Windows 10
Enterprise/Pro edition, and requires high-end hardware.
IP-Level VPN: We experimented with F-Secure Free-
Dome
(www.f-secure.com/en/web/home_global/
freedome) and PureVPN (www.purevpn.com/). Both
VPNs supported our technique.
IPv6 and IPsec: We do not know whether IPv6 or IPsec
packets use the same IP ID generation mechanism. This re-
quires further research.
Javascript disabled: Tracking can also work when
Javascript (or any client side scripting) is not available, e.g.
with the NoScript browser extension [20]. We discuss this in
the extended paper.
4.9 Possible Countermeasures
We list here some obvious ways of modifying Algorithm 1
and their impact:
• Increasing M (the size of the table of counters) – sur-
prisingly, this has very little effect on the basic tracking
technique, since no assumptions were made on M in the