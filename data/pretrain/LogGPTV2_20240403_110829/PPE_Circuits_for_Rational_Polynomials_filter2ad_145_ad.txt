Proof. The proof of this lemma appears in Appendix C.3.
3.2.4 Rule 3b: General move of a rational polynomial rk =
fk /hk with multiple non-InTrusted variables to the Trusted
set. In this section, we show describe a way to move a rational poly-
nomial not in Trusted to Trusted when the polynomial is allowed
to have non-InTrusted variables8 in the denominator. Given a PPE
problem Π = (G,n, m, r, u, α ,Trusted) and an index k ∈ [m], rule
3b can possibly be applied if k (cid:60) Trusted, the polynomial fk ∈ r
consists only of variables ui ∈ InTrusted, and hk contains one or
more non-InTrusted variables (these conditions are necessary, but
not sufficient). In Figure 6, we formally describe the Rule 3b. We
prove its correctness property in Lemma 3.4.
set of polynomials.
7Recall that InTrusted variables are the set of all variables used in the Trusted
8Recall that InTrusted variables are the set of all variables used in the Trusted
set of polynomials.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2744Description of Rule 2
Input: A PPE problem Π = (G, n, m, r, u, α , Trusted) and an integer k ∈ [1, m].
Output: Two PPE circuits IsIdentity, C and two circuit PPE problems Π′, Π′′, or the symbol ⊥ (meaning could not apply rule).
Steps of Rule2(Π, k ):
the pairing product term computing Si [j] in terms of formal variables R1, · · · , Rm.
(1) If k ∈ Trusted or αk = T or rk = fk /hk ∈ r has variables not in InTrusted, abort and output ⊥.
(2) Compute completion lists {s1, s2, sT } = CL(rTrusted). For any i ∈ I and j ≤ |si |, let si [j] = f i [j]/hi [j], Si [j] = дsi [j]
, and let Ui [j] be
αi
(3) For each i ∈ I, let Hi be a least common multiple of the polynomials {hi [j]}j∈|si |, and let the polynomial ˆfi [j] be such that ˆfi [j]/Hi ≡
(4) Let α = 3 − αk . Check if there exists an index i ∈ I and constant vectors a = (a1, · · · , a|sT | ), b = (b1, · · · , b|sα | ) and c = (c1, · · · , c|si | )
f i [j]/hi [j].
with entries in Zp s.t.
aj · sT [j] ≡
|sT |(cid:88)
j =1
|sα |(cid:88)
j =1
rk · (
bj · sα [j]) ≡ fk
hk
·(cid:18) |sα |(cid:88)
|si |(cid:88)
hk ≡
|sα |(cid:88)
j =1
j =1
j =1
cj · si [j] ≡
j =1
Hα
|sT |(cid:88)
(cid:19) ≡
bj · ˆfα [j]
|si |(cid:88)
cj · ˆfi [j]
|sT |(cid:88)
|sT |(cid:88)
j =1
j =1
Hi
hk · HT ≡
j =1
fk · HT · (
bj · ˆfα [j]) ≡ hk · Hα ·
aj · ˆfT [j]
cj · ˆfT [j]
aj · ˆfT [j]
HT
(5)
(6)
(7)
(8)
These equations can also be expressed as
(Computing coefficient vectors a, b, c reduces to checking if the polynomial 0 belongs to the span of all the polynomials in the left-hand
side and the right-hand side of the above equation.)
(5) If such (a, b, c) exist, then compute PPEs
|sα |(cid:89)
|si |(cid:89)
|sT |(cid:89)
A := (
Uα [j]bj = Iα ),
D := Ii =
Ui [j]cj
B :=
UT [j]aj =
j =1
where Iα is the identity element in group Gα .
• Compute Π′ = (G, n, m, r, u, α , Trusted ∪ {k }) and Π′′ = SubstituteZero(Π,(cid:80)|sα |
is described in Figure 3. Intuitively, SubstituteZero creates a new PPE problem instance by substituting(cid:80)|sα |
j =1
j =1
• If Π′′ = Π, then output ⊥. Otherwise, output the circuit IsIdentity
Trusted set of polynomials).
MakeCircuit(G, m, α , B) AND (NOT MakeCircuit(G, m, α , D )) and PPE problems Π′, Π′′.
j =1 bj · ˆfα [j]), where the SubstituteZero algorithm
j =1 bj · ˆfα [j] with 0 in the
:= MakeCircuit(G, m, α , A), the circuit C :=
(6) If such (a, b, c) do not exist, then output ⊥.
e (Rk,(cid:81)|sα |
e ((cid:81)|sα |
j =1 Uα [j]bj )
j =1 Uα [j]bj , Rk )
if αk = 1
if αk = 2
Figure 4: A more general procedure for moving certain rational polynomials rk = fk /hk with all InTrusted variables to Trusted
Lemma 3.4 (Correctness of Rule 3b). Let Π = (G, n, m, r, u,
search did not produce an output but does not prove that no such
α , Trusted) be a PPE problem instance as in Definition 2.1, j ∈ [n]
testing circuit for the input problem exists. We describe the algo-
and k ∈ [m]. Suppose ⊥(cid:44) (IsIdentity, C, Π′, Π′′) = Rule3b(Π, j, k ).
rithm QSearch in Figure 7. Later in Theorem 1, we prove that if
• If Π′′ (cid:44)⊥, for every pair of testing circuits C′ and C′′ for Π′
this algorithm produces a testing circuit as output, then that cir-
and Π′′ respectively, the PPE circuit
cuit is guaranteed to classify PPE challenges for this PPE problem
correctly.
Z := ((NOT IsIdentity) AND C AND C′
is a testing circuit for Π.
• If Π′′ =⊥, for every testing circuit C′ for Π′,
Z := ((NOT IsIdentity) AND C AND C
Theorem 1 (Correctness of the PPE Circuit Searching Al-
gorithm in Figure 7). Let Π = (G, n, m, r, u, α , Trusted) be a
PPE problem instance as in Definition 2.1. Let C = QSearch(Π). If
C (cid:44) unknown, then C is a PPE testing circuit for Π as in Definition 2.5,
and therefore Π is circuit testable.
) OR (IsIdentity AND C′′
′
)
)
is a testing circuit for Π.
Proof. The proof of this lemma appears in Appendix C.4.
3.3 Applying the Rules
We now describe how to combine Rules 1-3b into the main algo-
rithm that takes input a PPE problem and outputs a PPE circuit
or the special message unknown. Here unknown means that the
Proof. This follows the corresponding theorem in [47]. We
sketch how to prove this by induction on the number of untrusted
polynomials and the total number of monomials in all the poly-
nomials of f. The critical correctness arguments required have al-
ready been covered for each rule in Lemmas 3.1, 3.2, 3.3, 3.4. When
QSearch is invoked on Π with either zero untrusted polynomials or
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2745Description of Rule 3a
Input: A PPE problem Π = (G, n, m, r, u, α , Trusted) and integer k ∈ [m].
Output: Either two PPE circuits IsIdentity and C and two PPE problems Π′, Π′′, or ⊥ (meaning could not apply the rule).
Steps of Rule3a(Π, j, k ):
(1) Let the polynomial rk = fk /hk ∈ r. If k ∈ Trusted, then abort and output ⊥.
(2) If fk is of the form h′ · ud
+ h′′ and any of the following conditions do not hold, abort and output ⊥.
j
• j (cid:60) InTrusted,
• the polynomials h′, hk contains only variables in InTrusted, and
• the polynomial h′′ contains any variables other than uj , and
• the constant d ∈ Zp is relatively prime to p − 1,
the pairing product term computing Si [j] in terms of formal variables R1, · · · , Rm.
(3) Compute completion lists {s1, s2, sT } = CL(rTrusted). For any i ∈ I and j ≤ |si |, let si [j] = f i [j]/hi [j], Si [j] = дsi [j]
, and let Ui [j] be
αi
(4) For each i ∈ I, let Hi be a least common multiple of the polynomials {hi [j]}j∈|si |, and let the polynomial ˆfi [j] be such that ˆfi [j]/Hi ≡
j =1 aj · ˆfT [j]
j =1 bj · ˆfT [j].
(5) Check if there exists constant vectors a = (a1, a2, · · · , a|sT | ) and b = (b1, b2, · · · , b|sT | ) with elements in Zp such that h′ ≡(cid:80)|sT |
and hk ≡(cid:80)|sT |
j =1 aj · ˆfT [j] and hk · HT ≡(cid:80)|sT |
j =1 bj ·
These equations can be equivalently expressed as h′ · HT ≡(cid:80)|sT |
f i [j]/hi [j].
HT
,
ˆfT [j]
HT
(6) If such vector a exists, then
• Set PPE
|sT |(cid:89)
j =1
|sT |(cid:89)
j =1
A :=
UT [j]aj = IT ,
B :=
UT [j]bj = IT ,
where IT is the identity element of the group GT . Define IsIdentity := MakeCircuit(G, m, α , A), C := NOT MakeCircuit(G, m, α , B).
• Set PPE problem Π′ = (G, n, m, r, u, α , Trusted ∪ {k }) and Π′′ = SubstituteZero(Π, h′), where the function SubstituteZero is defined
in Figure 3. If Π′′ = Π, then output ⊥. Otherwise, output IsIdentity and Π′, Π′′.
(7) If such vector a does not exist, then output ⊥.
Figure 5: Procedure for moving a rational polynomial rk = fk /hk containing non-InTrusted variables only in fk to Trusted
Description of Rule 3b
Input: A PPE problem Π = (G, n, m, r, u, α , Trusted) and integer k ∈ [m].
Output: Either a PPE circuit IsIdentity and two PPE problems Π′, Π′′ or ⊥ (meaning could not apply the rule).
Steps of Rule3b(Π, j, k ):
(1) Let the polynomial rk = fk /hk ∈ r. If k ∈ Trusted, then abort and output ⊥.
(2) If hk is of the form h′ · ud
+ h′′ and any of the following conditions do not hold, abort and output ⊥.
j
• j (cid:60) InTrusted,
• the polynomials h′, fk contains only variables in InTrusted, and
• the polynomial h′′ contains any variables other than uj , and
• the constant d ∈ Zp is relatively prime to p − 1,
the pairing product term computing Si [j] in terms of formal variables R1, · · · , Rm.
f i [j]/hi [j].
(3) Compute completion lists {s1, s2, sT } = CL(rTrusted). For any i ∈ I and j ≤ |si |, let si [j] = f i [j]/hi [j], Si [j] = дsi [j]
, and let Ui [j] be
αi
(4) For each i ∈ I, let Hi be a least common multiple of the polynomials {hi [j]}j∈|si |, and let the polynomial ˆfi [j] be such that ˆfi [j]/Hi ≡
(5) Check if there exists constant vectors a = (a1, a2, · · · , a|sT | ) and b = (b1, b2, · · · , b|sT | ) with elements in Zp such that
j =1 aj · ˆfT [j], and fk · HT ≡(cid:80)|sT |
These equations can be equivalently expressed as h′ · HT ≡(cid:80)|sT |
|sT |(cid:89)
(6) If such vector a and b exists, then
j =1 bj · ˆfT [j].
aj · ˆfT [j]
bj · ˆfT [j]
• Set PPE
|sT |(cid:89)
|sT |(cid:88)
j =1
|sT |(cid:88)
j =1
fk ≡
h′ ≡
HT
,
.
HT
A :=
UT [j]aj = IT ,
B :=
UT [j]bj = IT ,
D := Rk = IT
j =1
j =1
where IT is the identity element of the group GT . Define IsIdentity = MakeCircuit(G, m, α , A), B′ = MakeCircuit(G, m, α , B) and
D′ = MakeCircuit(G, m, α , D ).
• Set PPE problem Π′ = (G, n, m, r, u, α , Trusted ∪ {k }) and Π′′ = SubstituteZero(Π, h′), where the function SubstituteZero is defined
in Figure 3. If Π′′ = Π, then output ⊥. Otherwise, output IsIdentity, C = (NOT B′) OR (B′ AND D′) and Π′, Π′′.
(7) If such vector a does not exist, then output ⊥.
Figure 6: Procedure for moving a rational polynomial rk = fk /hk containing non-InTrusted variables only in hk to Trusted
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2746zero total number of monomials, it outputs the always accepting cir-
cuit Cacc which is a valid testing circuit. Now suppose the QSearch
algorithm outputs a valid testing circuit or unknown on every prob-
lem Π′ which has at most α number of untrusted polynomials and
at most β total number of monomials in f. Suppose QSearch out-
puts a circuit C (cid:44) unknown on a problem Π with α + 1 untrusted
polynomials and at most β total number of monomials in r. It must
have invoked one of the 4 rules. By Lemmas 3.1, 3.2, 3.3, 3.4 and our
induction hypothesis, C is a valid testing circuit. Similarly, QSearch
outputs either a valid testing circuit or unknown when invoked on
a problem Π with at most α untrusted polynomials and β + 1 total
number of monomials in f. By induction, for any Π, if QSearch(Π)
does not output unknown, then it outputs a valid testing circuit for
Π.
2
2 · s
2
2
yz + 3z
3
y
3.4 Efficiency of QSearch
The asymptotic time complexity of the QSearch algorithm will be
exponential, although fortunately our experiments from Section 4
show that it is surprisingly fast in practice. Let us now analyze its
running time. A call to QSearch scans all the untrusted polynomials
to check if any rule is applicable and then calls QSearch recursively
at most two times.
) polynomial multiplications take O (m
Let us first compute the time taken to scan all the untrusted
polynomials and check if any rule is applicable. Let us denote the
size of a polynomial to be the total number of additions and mul-
tiplications involved in the normal form of the polynomial (e.g.,