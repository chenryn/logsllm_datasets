    }
    fn step(&mut self) -> std::io::Result {
        // let pos = self.f.stream_position()?;
        let instruction = Instruction::read(&mut self.f)?;
        /*
        if false {
            println!(
                "{:04X} | sp={:04} | flg={} | {:?}",
                pos, self.sp, self.flag, instruction,
            );
            for (idx, v) in self.registers.iter().enumerate() {
                if *v > 0 {
                    println!("{:?} -> {}", idx, v);
                }
            }
        }
        */
        use Instruction::*;
        match instruction {
            Nop => {}
            MovConst { reg, v } => self.registers[reg as usize] = v,
            MovReg { reg, reg2 } => self.registers[reg as usize] = self.registers[reg2 as usize],
            MathOp {
                reg_out,
                reg,
                op,
                reg2,
            } => {
                let r1 = self.registers[reg as usize];
                let r2 = self.registers[reg2 as usize];
                self.registers[reg_out as usize] = match op {
                    3 => r1 + r2,
                    4 => r1 - r2,
                    5 => r1 * r2,
                    6 => r1 / r2,
                    _ => unimplemented!(),
                };
            }
            PushReg(reg) => {
                self.stack[self.sp] = self.registers[reg as usize];
                self.sp += 1;
            }
            PopReg(reg) => {
                self.registers[reg as usize] = self.stack[self.sp - 1];
                self.sp -= 1;
            }
            PushConst(c) => {
                self.stack[self.sp] = c;
                self.sp += 1
            }
            JmpConst(c) => {
                self.f.seek(std::io::SeekFrom::Start(c as u64))?;
            }
            PopPc => {
                self.f
                    .seek(std::io::SeekFrom::Start(self.stack[self.sp - 1] as u64))?;
                self.sp -= 1;
            }
            Test { reg, op, reg2 } => {
                self.flag = match op {
                    0 => self.registers[reg as usize]  self.registers[reg as usize]  unimplemented!(),
                }
            }
            JmpCond(c) => {
                if !self.flag {
                    self.f.seek(std::io::SeekFrom::Start(c as u64))?;
                }
            }
            Call(v) => {
                self.stack[self.sp] = self.f.stream_position().unwrap() as u32;
                self.sp += 1;
                self.f.seek(std::io::SeekFrom::Start(v as u64))?;
            }
            Strlen => {
                self.registers[REG_RV as usize] = INPUT_DATA.len() as u32;
            }
            CharAt => {
                let arg2 = self.registers[REG_ARG1 as usize];
                self.registers[REG_RV as usize] = INPUT_DATA
                    .iter()
                    .nth(arg2 as usize)
                    .map(|v| *v as u32)
                    .unwrap_or(0_u32);
            }
            Print => {
                let stdout = std::io::stdout();
                let mut lock = stdout.lock();
                lock.write_all(&[self.registers[REG_ARG0 as usize] as u8])?;
                lock.flush()?;
            }
            Exit => {
                std::process::exit(0);
            }
        };
        Ok(())
    }
}
fn main() -> std::io::Result {
    if let Some(path) = std::env::args().nth(1) {
        let mut vm = Vm::new(path)?;
        loop {
            vm.step()?;
        }
    } else {
        println!("Missing ROM");
        Ok(())
    }
}
```
This looks like the implementation of a VM. Let's run it:
```console
┌──(user@kali)-[/media/…/google/18_Unknown_-_Master_Office/files/vm-cli]
└─$ cargo build
   Compiling vm v0.1.0 (/media/sf_CTFs/google/18_Unknown_-_Master_Office/files/vm)
   Compiling vm-cli v0.1.0 (/media/sf_CTFs/google/18_Unknown_-_Master_Office/files/vm-cli)
    Finished dev [unoptimized + debuginfo] target(s) in 16.26s
┌──(user@kali)-[/media/…/google/18_Unknown_-_Master_Office/files/vm-cli]
└─$ ./target/debug/vm-cli ../vm.rom
CTF{ThisIsAVeryLongFlagA^C
```
The program starts printing the flag, but gets slower and slower with each character printed. We'll have to understand the algorithm and try to optimize it. We'll do that by utilizing the disassembler logic within the cli we've received. So, in `main.rs`, we modify `step` to the following:
```rust
fn step(&mut self) -> std::io::Result {
  let pos = self.f.stream_position()?;
  let instruction = Instruction::read(&mut self.f)?;
  println!("0x{:03X}:\t{}", pos, instruction);
  Ok(())
}
```
We run the modified program and get the disassembly:
```console
┌──(user@kali)-[/media/…/google/18_Unknown_-_Master_Office/files/vm-cli]
└─$ ./target/debug/vm-cli ../vm.rom
0x000:  mov 'i', 0x00000000
0x006:  mov '\u{1}', 'i'
0x009:  call 0xBC
0x00E:  exit
0x00F:  ret
0x010:  push 'G'
0x012:  mov 'G', '\u{1}'
0x015:  mov 'i', 0x00000000
0x01B:  test 'G', 1, 'i'
0x01F:  jmpc 0x30
0x024:  mov 'i', 0x00000000
0x02A:  mov '\u{0}', 'i'
0x02D:  pop 'G'
0x02F:  ret
0x030:  mov 'i', 0x00000100
0x036:  test 'G', 0, 'i'
0x03A:  jmpc 0x45
0x03F:  mov '\u{0}', 'G'
0x042:  pop 'G'
0x044:  ret
0x045:  mov 'i', 0x00000100
0x04B:  'i' = alu('G', 4, 'i'
0x050:  mov '\u{1}', 'i'
0x053:  call 0x10
0x058:  pop 'G'
0x05A:  ret
0x05B:  pop 'G'
0x05D:  ret
0x05E:  push 'G'
0x060:  mov 'G', '\u{1}'
0x063:  mov 'i', 0x00000002
0x069:  test 'G', 1, 'i'
0x06D:  jmpc 0x7E
0x072:  mov 'i', 0x00000001
0x078:  mov '\u{0}', 'i'
0x07B:  pop 'G'
0x07D:  ret
0x07E:  mov 'i', 0x00000001
0x084:  'i' = alu('G', 4, 'i'
0x089:  mov '\u{1}', 'i'
0x08C:  call 0x5E
0x091:  mov 'x', '\u{0}'
0x094:  push 'x'
0x096:  mov 'i', 0x00000002
0x09C:  'i' = alu('G', 4, 'i'
0x0A1:  mov '\u{1}', 'i'
0x0A4:  call 0x5E
0x0A9:  pop 'x'
0x0AB:  mov 'y', '\u{0}'
0x0AE:  'i' = alu('x', 3, 'y'
0x0B3:  mov '\u{0}', 'i'
0x0B6:  pop 'G'
0x0B8:  ret
0x0B9:  pop 'G'
0x0BB:  ret
0x0BC:  push 'G'
0x0BE:  mov 'G', '\u{1}'
0x0C1:  mov '\u{1}', 'B'
0x0C4:  call Strlen
0x0C5:  test 'G', 0, '\u{0}'
0x0C9:  jmpc 0x12F
0x0CE:  mov '\u{1}', 'B'
0x0D1:  mov '\u{2}', 'G'
0x0D4:  call CharAt
0x0D5:  mov 'H', '\u{0}'
0x0D8:  push 'H'
0x0DA:  push 'H'
0x0DC:  mov 'i', 0x00000001
0x0E2:  'i' = alu('G', 3, 'i'
0x0E7:  mov '\u{1}', 'i'
0x0EA:  call 0x5E
0x0EF:  pop 'H'
0x0F1:  'i' = alu('G', 3, '\u{0}'
0x0F6:  'i' = alu('H', 3, 'i'
0x0FB:  mov '\u{1}', 'i'
0x0FE:  call 0x10
0x103:  pop 'H'
0x105:  mov 'H', '\u{0}'
0x108:  push 'H'
0x10A:  push 'H'
0x10C:  mov '\u{1}', 'H'
0x10F:  chall Print
0x110:  pop 'H'
0x112:  pop 'H'
0x114:  push 'H'
0x116:  push 'H'
0x118:  mov 'i', 0x00000001
0x11E:  'i' = alu('G', 3, 'i'
0x123:  mov '\u{1}', 'i'
0x126:  call 0xBC
0x12B:  pop 'H'
0x12D:  pop 'H'
0x12F:  pop 'G'
0x131:  ret
Error: Error { kind: UnexpectedEof, message: "failed to fill whole buffer" }
```
Now, the straightforward thing to do would be to reverse the disassembly and analyze the flow. We're going to take a shortcut and translate the disassembly to x64 syntax, then utilize Ghidra's decomplier to reconstruct the high-level functions.
Translating the disassembly is pretty straightforward, and without too much overhead we get the following code, saved to `vm.S`:
```assembly
#define REG_RV      rax // '\u{0}'
#define REG_ARG0    rdi // '\u{1}'
#define REG_ARG1    rsi // '\u{2}'
#define REG_G       rbx
#define REG_H       r10
#define REG_x       r11
#define REG_y       r12
#define REG_B       r13
#define REG_i       r14
#define REG_TMP     r15
.intel_syntax noprefix
.global run_vm
run_vm:
    mov REG_i, 0            # 0x000:  mov 'i', 0x00000000
    mov REG_ARG0, REG_i     # 0x006:  mov '\u{1}', 'i'
    call func_bc            # 0x009:  call 0xBC
                            # 0x00E:  exit
    ret                     # 0x00F:  ret
func_10:
    push  REG_G             # 0x010:  push 'G'
    mov REG_G, REG_ARG0     # 0x012:  mov 'G', '\u{1}'
    mov REG_i, 0            # 0x015:  mov 'i', 0x00000000
    cmp REG_G, REG_i        # 0x01B:  test 'G', 1, 'i'
    jg lab_30               # 0x01F:  jmpc 0x30
    mov REG_i, 0            # 0x024:  mov 'i', 0x00000000
    mov REG_RV, REG_i       # 0x02A:  mov '\u{0}', 'i'
    pop REG_G               # 0x02D:  pop 'G'
    ret                     # 0x02F:  ret
    lab_30:
        mov REG_i, 0x100    # 0x030:  mov 'i', 0x00000100
        cmp REG_G, REG_i    # 0x036:  test 'G', 0, 'i'
        jge lab_45          # 0x03A:  jmpc 0x45
        mov REG_RV, REG_G   # 0x03F:  mov '\u{0}', 'G'
        pop REG_G           # 0x042:  pop 'G'
        ret                 # 0x044:  ret
    lab_45:
        mov REG_i, 0x100    # 0x045:  mov 'i', 0x00000100