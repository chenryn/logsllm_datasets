controller. The picture highlights that C5, with 322, has the highest
number of interactions. Additionally, it shows the C4 leads the
group of interactions between dierent controllers (with 224 to C5),
followed by the interactions of C2 over C3 with 145.
Table 1 shows in further detail, how the interactions from the
previous diagram break down into attack points - Cy2Phy inter-
faces relations. I.e., In the relation C4 to C5, we see that the 224
interactions from picture 8 correspond to 7 attack points aecting
5 Cy2Phy interfaces. This kind of analysis helps us to conclude, for
example, that only two attack points from C3 might manipulate 9
Cy2Phy interfaces on C2.
Fig. 9 depicts the number of reached Cy2Phy interfaces per attack
point, and they are split among controllers, it varies from 7 to
587
Finding Dependencies between Cyber-Physical Domains
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
C3
C(cid:21)
Figure 9: Number of reached Cy2Phy interfaces per attack
point on each controller.
C(cid:25)
RIO6:1:O.0
RIO2:0:I.Data.21
Variables
Network
message
Attack points
Cy2Phy
interfaces
Figure 11: Hidden path between process 2 and process
6, from sensor ‘DI_P_207_RUN’ (attack point) to actuator
‘DO_P_601_START’(Cy2Phy interface).
Figure 10: Number of attack points that inuence a Cy2Phy
interface on each controller.
process exploits interactions (network connections) with other pro-
cesses to reach the target. In Fig. 11 process 2 (C2) reaches process
6 (C6) exploiting network connections through process 3 (C3).
101. The gure shows that the Level sensor 301 is the attack point
that can reach the most signicant number of Cy2Phy interfaces,
116 interactions. Also, the level sensors 101, 401, and the pumps
501 and 502 reach more than 70 Cy2Phy interfaces in dierent
controllers. We can conclude that an attacker might consider these
as possible targets. As a strategy to improve the security of this
plant, operators or security analysts might consider addressing the
security challenges in the components with the most signicant
values on this diagram.
Fig 10. describes the number of attack points that reach each
Cy2Phy interface. In this graph, two components bright (the motor
valve 101 and the pump 501) with more than 200 attack points. The
graph also shows that components such as pump 101, pump 102,
motor valves 301 to 304, should receive special attention because of
more than 100 attack points might compromise them. This analysis
helps operators to decide their defence strategies since it shows
which components have a broader attack surface, and they have
more chances of being attacked.
Additionally, we found hidden paths as depicted in Fig. 11, where
the interactions between two processes were unknown by the en-
gineers on the oor, but after the analysis, it shows how the source
588
5.2 Choosing suitable attack points
With the results in Fig. 9, the question that we like to answer is:
given that Cy2Phy interfaces are aected by a dierent num-
ber of aack points, what is the minimum number of aack
points that a malicious actor needs to compromise to manip-
ulate a particular Cy2Phy interface?
To answer such question, the attacker might use shortest path
distance as a measure for attack point selection. To do so, an attacker
can use a radial graph where he places the selected target at the
center of the plot, and locates all attack points in a radial distance
that represents the shortest path distance between the attack point
and the target, as shown in Fig. 12. This graph also shows relevant
information for the attacker such as whether attack points are
located in the same controller/process that the target (0-Hops) or
whether some network connections might be exploited to reach
the target (1-Hops, and 2-Hops).
Taking the component Pump101 as a target example, the at-
tacker uses the attack diagram to choose suitable attack points (see
Fig. 13a), the nearest points are RIO:0:I.Data.2 and RIO:0:I.Data.3 at
a distance of 7 from the target. Fig. 13b shows the resulting attack
trace using the two chosen attack points.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
John H. Castellanos, Martín Ochoa, and Jianying Zhou
Table 2: Predicted attack points to compromise Cy2Phy
interfaces. *It requires a network message from C1
{HMI_PLANT_AUTO}.
Controller
C2
C1
C4
C2
C4
C4
C6
C5
C6
C5
Cy2phy target
Pump205
Pump101
Dechlorination401
Pump206
Pump401
Pump403
Pump601
MotorValve504
Pump603
Pump501
#
2
2
1
2
2
2
2
2*
2
4*
Points to compromise
attack points
RIO2:0:I.Data.14; RIO2:0:I.Data.15
RIO1:0:I.Data.2; RIO1:0:I.Data.3
RIO4:0:I.Data.14
RIO2:0:I.Data.17; RIO2:0:I.Data.18
RIO4:0:I.Data.2; RIO4:0:I.Data.3
RIO4:0:I.Data.8; RIO4:0:I.Data.9
RIO6:0:I.Data.2; RIO6:0:I.Data.3
RIO5:0:I.Data.15; Network mes-
sage
RIO6:0:I.Data.8; RIO6:0:I.Data.9
RIO5:0:I.Data.2; VSD501:I.Active;
VSD502:I.Active; Network Mes-
sage
to the target. We set test scenarios per each target and establish
as attacker’s goal to change the target’s state, i.e. if the target is
Pump101, and before the attack Pump101’s state is OFF, attacker’s
goal is to change the target’s state to ON, only manipulating the
selected attack points. If the target’s state changes we consider the
attack as a successful attack. If after trying all selected attack point’s
combinations the target’s state does not change, we consider such
attack as a failed attack and conclude that such particular Cy2Phy
interface (the target) cannot be compromised from the chosen attack
points.
After running the experiments on the scenarios for the ten com-
ponents, we found that the 100% of selected targets were success-
fully attacked using the attack points described in the attack dia-
grams. The number of attack points depends on how a specic target
operates, for example, Pump205 operates with two signals (opera-
tion mode: auto/manual; action: open/close), that is the reason why
the attacker requires at least two attack points to compromise the
target successfully, and they are described by the nearest points in
the particular attack diagram. Another example is Pump501 which
is a pump with a variable speed drive, and it requires three signals
to operate, then the attacker chooses the nearest attack points from
the attack diagram to compromise the target.
6 DISCUSSION
We have explored a novel modelling paradigm that combines infor-
mation ow and graph analysis to improve the security of Cyber-
Physical systems, in particular in the context of Industrial Control
systems.
Our methodology can be implemented in operational complex
systems that are programmed using standard languages [11]. Nev-
ertheless, our approach is general enough so that it can be easily
adapted to other languages following the same principles described
in this work. As any white-box analysis method, we assume that
access to the controller’s source code is granted, otherwise to build
an accurate Data ow graph model of the control logic would be
challenging. As such, this is one of the limitations of our methodol-
ogy, since in practice gaining access to PLC logic might be dicult
in some contexts.
Figure 12: Results of shortest-path ordering for the target
Pump101. 0-Hops correspond to attack points in the same
target’s controller, while 1,2-Hops are attack points that
reach the target from other controllers using network mes-
sages.
RIO1:0:I.Data.3
RIO1:0:I.Data.2
K
Pump101
variables
constants
attack points
target
(a) Closest attack points to Pump101.
(b) Attack trace from chosen attack
points.
Figure 13: Attack traces deducted from shortest path analy-
sis for Pump101.
5.3 Testing attack points in a real scenario
Randomly, we chose the 30% of the Cy2Phy interface from SWaT
as targets. The selected targets are listed in Table 2. We create
attack diagrams per each target and select the nearest attack points
589
Finding Dependencies between Cyber-Physical Domains
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Table 3: Results of experimtents in SWaT.
Scenario
Process 1
Test
case
1
Process 2
Process 4
Process 5
Process 6
2
3
4
5
6
7
8
9
10
11
12
13
14
Target
Pump101
Pump205
Pump206
Dechlorination401
Pump401
Pump403
MotorValve504
MotorValve504
MotorValve504
Pump501
Pump501
Pump501
Pump601
Pump603
Goal
Change Pump101’s
state
Change Pump205’s
state
Change Pump206’s
state
Change UV Fil-
ter’s state
Change Pump401’s
state
Change Pump403’s
state
Change
torValve504’s
state
Mo-
Mo-
Change
torValve504’s
state
Mo-
Change
torValve504’s
state
Change Pump501’s
state
Change Pump501’s
state
Change Pump501’s
state
Change Pump601’s
state
Change Pump603’s
state
Attack conditions
Target
Chosen attack points
Initial state
Attack
Initial state
Consequence
Conclusion
RIO1:0:I.Data.2
RIO1:0:I.Data.3
RIO2:0:I.Data.14
RIO2:0:I.Data.15
RIO2:0:I.Data.17
RIO2:0:I.Data.18
RIO4:0:I.Data.14
RIO4:0:I.Data.2
RIO4:0:I.Data.3
RIO4:0:I.Data.8
RIO4:0:I.Data.9
RIO5:0:I.Data.15
RIO5:0:I.Data.14
RIO5:0:I.Data.14
RIO5:0:I.Data.2
VSD501:I.Active
VSD502:I.Active
RIO5:0:I.Data.2
VSD501:I.Active
VSD502:I.Active
RIO5:0:I.Data.2
VSD501:I.Active
VSD502:I.Active
RIO6:0:I.Data.2
RIO6:0:I.Data.3
RIO6:0:I.Data.8
RIO6:0:I.Data.9
1
0
1
0
1
0
1
1
1
1
1
1
0
0
1
0
0
1
0
0
1
0
0
1
0
1
0
0
1
0
1
0
1
0
0
0
0
0
0
1
1
0
1
0
0
1
1
0
0
0
0
1
0
1
OFF
OFF
OFF
ON
ON
ON
OFF
ON
ON
ON
OFF
OFF
OFF
OFF
OFF
OFF-Failed
OFF
ON
ON
ON
OFF
OFF
ON
ON
ON
OFF
ON
ON
Successful attack.
Successful attack.
Successful attack.
Successful attack.
Successful attack.
Successful attack.
False positive. This attack
point only controls the action
of closing the motorvalve.
Successful attack, even though
attack could not open the mo-
tor valve, it causes the motor-
valve to report a failed state
that requires to reset the pro-
cess.
Successful attack.
Failed attack.
Failed attack.
Successful attack.
Successful attack.
Successful attack.
Additionally, the results from the reachability algorithm are use-
ful from dierent perspectives. From an analyst’s point of view,
we can determine the attack points that have the most severe im-
pact in the system, where by impact we mean number of Cy2Phy
interfaces that are compromised, as shown in Fig. 9. Such results
are useful for defenders since as depicted in Fig. 10, they show the
Cy2Phy interfaces with the broadest attack surface (with the largest
number of attack points), and in the case of resource limitations
to implement security mechanisms, this analysis gives a good idea
of how to prioritise the security budget (for instance by using sen-
sor replication and majority voting or by implementing physical
invariants in the controller’s logic).
For security testing purposes, the designed attack diagrams can
be used to select multiple attack scenarios that combine a dierent
number of attack points for selected targets, reducing the search
space to those that have more chances of compromising a particular
target. One theoretical limitation of our analysis is that in principle
there could be false positives: that is, although the information ow
analysis indicates a dependency of a sink from a source, this could
not be exploitable in practice (similar to static analysis in language-
based security). Our evaluation in a realistic testbed shows that in
practice such false positives are rare, however, it would be necessary
to test our methodology on a broader range of realistic scenarios to
better understand its accuracy. This is in our plans for future work.
7 RELATED WORK
Bleikertz et al. in [3] perform isolation analysis automatically in
virtualised infrastructures. First, automatically their tool read the
conguration of virtualised environments, the tool can read cong-
uration les from the four most well-known virtualisation vendors.
Then, they build a graph where connections among components
are depicted and using colouring techniques in their tool diagnoses
isolation breaches. Our approach diers from authors’ in two main
aspects. First, the level of abstraction in their approach involves net-
work topologies, and general conguration of virtualised machines
to build the extracted graphs, while ours builds the graphs doing a
deeper inspection of the System Under Test (CPS) inside the control
programs. The second aspect is the type of analysis of the system
model. Our approach aims to nd dependencies between particular
components of the system, while authors’ pursues to nd isolated
parts of the system’s graph.
In[12], Kang et al. propose a model-based security assessment
of a Water Treatment Plant. They manually model the system and
its dynamic using Alloy, then using constraint-based analysis, they
590
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
John H. Castellanos, Martín Ochoa, and Jianying Zhou
detect attacks that can lead the system to an unsafe state. Authors
tested their ndings with the help of an expert operator using the
real testbed. Although both approaches share common aspects like
security testing in CPS using a model of the system under test,
both ideas dier in their methodologies. Our methodology auto-
matically infers a DFG model from the system’s control programs,
while Kang’s manually model the system as a Finite State Machine.
Additionally, via attack diagrams, we select suitable attack points
to perform experiments on particular targets.
There is a wealth of literature on language-based information
ow security analysis. Sabelfeld and Myers [21] present a survey
where they summarise the most relevant works in this eld. They
show how the usage data-ow and especially control-ow analy-
sis [4, 5, 9, 19] oer advantages over type-based analysis letting
establish security properties that enforce noninterference-based
condentiality and tracing more accurately global ows. However
to the best of our knowledge we are the rst to apply static analysis
to PLC code and reason about the security of CPS.
The security analysis in CPS has been studied for dierent appli-
cations [7], authors concluded that a framework is required where
interactions between cyber and physical domains can be extracted,
and study the impact of joined attacks.
Information ow for security analysis in CPS has been suggested
in the literature. For example, Rothstein et al. [18] propose the
use of the notion of integrity to verify the security of a CPS at
the design phase, and determine if security counter measurements
satisfy security properties of the system. Though our approach also
proposes information ow techniques for security analysis of CPS,
we aim to build a model of the system based on PLC code directly,
and not from manually specied models of a system.
Authors in [8] propose Orpheus, a methodology to detect data-
oriented attacks in CPS/IoT systems. It includes the dynamic anal-
ysis of control programs in run-time to detect consequences of
data-oriented attacks in highly interactive cyber-physical environ-
ments. Authors propose an event-based identication mechanism
that through a dependency analysis aims to detect inconsistent
state transitions in the system that can lead it to an undesirable
condition. Our work diers from [8] in the way how the depen-
dency analysis is performed. While they perform a dependency
analysis of events on a control ow graph abstraction of the control
programs, our approach aims to perform a data ow graph analysis
based on how the information ows inside control programs.
So in summary, to the best of our knowledge, we are the rst to
conduct an information ow analysis directly on the logic of nodes
of ICS in order to reason about the potential impact of an attack
propagation through the CPS control logic.
8 CONCLUSIONS AND FUTURE WORK
We showed how to model an ICS as a data-ow graph, highlighting
critical points such as attack points and cyber-to-physical interfaces.
Additionally, we proposed how to use a reachability analysis on the
graph representation of the ICS to nd which Cy2Phy interfaces
have the broadest attack surface. In the real scenario of an ICS with
limited resources to deploy security mechanisms, operators might
prioritise what countermeasures to take considering these results.
591
This analysis also shows which attack points aect the largest
number of Cy2Phy interfaces; in a real scenario where a malicious
actor can compromise only a limited number of attack points, the
attacker will prefer to choose those that can compromise the most
signicant number of interfaces.
We tested our approach in a water treatment testbed which has
a 6-stage process controlled by six-paired controllers with over
40,000 LOC. We modeled the system internal interactions as a data-
ow graph of 7,328 nodes. The reachability analysis on the testbed
discovered 2,095 dependencies from attack points to Cy2Phy in-
terfaces, and they correspond to 137 attack points and 48 Cy2Phy
interfaces.
As future work, we are exploring a mixed analysis of data-ow
graph and control-ow graph that let us systematically deduce
attack vectors in an ICS.
Moreover, we will consider the question of quantifying the im-
pact of an attack regarding the number of states an attacker might
force a given target to be in a selected attack vector.
REFERENCES
[1] The neo4j graph platform the #1 platform for connected data. https://neo4j.com/,
accessed: 2018-04-27
[2] Analysis of the Cyber Attack on the Ukrainian Power Grid Table of Contents. Tech.
rep. (2016), https://ics.sans.org/media/E-ISAC{_}SANS{_}Ukraine{_}DUC{_}5.pdf
[3] Bleikertz, S., Groß, T., Schunter, M., Eriksson, K.: Automated Information Flow
Analysis of Virtualized Infrastructures. In: Atluri, V., Diaz, C. (eds.) ESORICS
- European Symposium on Research in Computer Security. Lecture Notes in
Computer Science, vol. 6879, pp. 392–415. Springer Berlin Heidelberg, Berlin,
Heidelberg (2011)
[4] Bodei, C., Degano, P., Nielson, F., Nielson, H.R.: Static analysis for secrecy and non-
interference in networks of processes. In: International Conference on Parallel
Computing Technologies. pp. 27–41. Springer (2001)
[5] Bodei, C., Degano, P., Nielson, F., Nielson, H.R.: Static analysis of processes for
no read-up and no write-down. In: International Conference on Foundations of
Software Science and Computation Structure. pp. 120–134. Springer (1999)
[6] Cárdenas, A.A., Amin, S., Sastry, S.: Research Challenges for the Security of
Control Systems. In: USENIX - USENIX conference on Operating systems design
and implementation (2008)
[7] Chen, B., Schmittner, C., Ma, Z., Temple, W.G., Dong, X., Jones, D.L., Sanders,
W.H.: Security Analysis of Urban Railway Systems: The Need for a Cyber-Physical
Perspective. In: nternational Conference on Computer Safety, Reliability, and
Security. pp. 277–290 (2014)
[8] Cheng, L., Tian, K., Yao, D.: Orpheus : Enforcing Cyber-Physical Execution Se-
mantics to Defend Against Data-Oriented Attacks. In: ACSAC - Annual Computer
Security Applications Conference. pp. 315–326 (2017)
[9] Clark, D., Hankin, C., Hunt, S.: Information ow for algol-like languages. Com-
puter Languages, Systems & Structures 28(1), 3–28 (2002)
[10] iTrust, Center for Research in Cyber Security: Secure water treatment test-
bed. http://itrust.sutd.edu.sg/research/testbeds/secure-water-treatment-swat/,
accessed: 2018-04-20
[11] John, K.H., Tiegelkamp, M.: IEC 61131-3: programming industrial automation
systems: concepts and programming languages, requirements for programming
systems, decision-making aids. Springer Science & Business Media (2010)
[12] Kang, E., Adepu, S., Jackson, D., Mathur, A.P.: Model-based security analysis of
a water treatment system. In: SEsCPS - International Workshop on Software
Engineering for Smart Cyber-Physical Systems. pp. 22–28. ACM Press, New York,
New York, USA (2016)
[13] Krotol, M., Gollmann, D.: Industrial control systems security: What is happen-
ing? In: INDIN - IEEE International Conference on Industrial Informatics. pp.
670–675 (2013)
[14] Langner, R.: Stuxnet: Dissecting a cyberwarfare weapon. IEEE Security & Privacy
9(3), 49–51 (2011)
(2010)
[15] Lee, E.: CPS Foundations. DAC - Design Automation Conference pp. 737–742
[16] Lee, E.A., Seshia, S.A.: Introduction to Embedded Systems A Cyber-Physical
Systems Approach. MIT Press, second edn. (2017), http://leeseshia.org/
[17] Lee, R., Assante, M., Connway, T.: Ics cp/pe (cyber-to-physical or process eects)
case study paper–german steel mill cyber attack. Sans ICS (2014)
[18] Morris, E.R., Murguia, C.G., Ochoa, M.: Design-Time Quantication of Integrity
in Cyber-Physical-Systems. In: PLAS - Workshop on Programming Languages
Finding Dependencies between Cyber-Physical Domains
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Table 4: List of Cy2Phy interface grouped by 33 components.
Table 5: List of attack points grouped by 51 components.
W_AI_DPIT_301_DPRESS,
AI_LIT_301_LEVEL_HTY,
AI_LIT_101_LEVEL_HTY,
AI_FIT_201_FLOW_HTY,
Attack points
AI_LIT_101_LEVEL,
W_AI_LIT_101_LEVEL, W_AI_LIT_101_LEVEL_HTY
DI_MV_101_ZSC, DI_MV_101_ZSO
DI_P_101_AUTO, DI_P_101_FAULT, DI_P_101_RUN
DI_P_102_AUTO, DI_P_102_FAULT, DI_P_102_RUN
DI_WIFI_RIO_1
AI_AIT_201_COND, W_AI_AIT_201_COND
AI_FIT_201_FLOW,
W_AI_FIT_201_FLOW
DI_LS_201_LOW
DI_LS_202_LOW
DI_LS_203_LOW
DI_MV_201_ZSC, DI_MV_201_ZSO
AI_AIT_203_ORP, W_AI_AIT_203_ORP
AI_AIT_202_PH,
W_AI_AIT_202_PH_HTY
DI_P_201_AUTO, DI_P_201_FAULT, DI_P_201_RUN
DI_P_202_AUTO, DI_P_202_FAULT, DI_P_202_RUN
DI_P_203_AUTO, DI_P_203_FAULT, DI_P_203_RUN
DI_P_204_AUTO, DI_P_204_FAULT, DI_P_204_RUN
DI_P_205_AUTO, DI_P_205_FAULT, DI_P_205_RUN
DI_P_206_AUTO, DI_P_206_FAULT, DI_P_206_RUN
DI_P_207_AUTO, DI_P_207_FAULT, DI_P_207_RUN
DI_P_208_AUTO, DI_P_208_FAULT, DI_P_208_RUN
DI_WIFI_RIO_2
DI_DPSH_301_HIGH
AI_DPIT_301_DPRESS,
W_AI_DPIT_301_DPRESS_HTY
AI_LIT_301_LEVEL,
W_AI_LIT_301_LEVEL, W_AI_LIT_301_LEVEL_HTY
DI_MV_301_ZSC, DI_MV_301_ZSO
DI_MV_302_ZSC, DI_MV_302_ZSO
DI_MV_303_ZSC, DI_MV_303_ZSO
DI_MV_304_ZSC, DI_MV_304_ZSO
DI_P_301_AUTO, DI_P_301_FAULT, DI_P_301_RUN
DI_P_302_AUTO, DI_P_302_FAULT, DI_P_302_RUN
DI_WIFI_RIO_3
DI_UV_401_AUTO, DI_UV_401_FAULT, DI_UV_401_RUN
AI_LIT_401_LEVEL,
AI_LIT_401_LEVEL_HTY, W_AI_LIT_401_LEVEL_HTY
AI_AIT_402_ORP, W_AI_AIT_402_ORP
DI_P_401_AUTO, DI_P_401_FAULT, DI_P_401_RUN
DI_P_402_AUTO, DI_P_402_FAULT, DI_P_402_RUN
DI_P_403_AUTO, DI_P_403_FAULT, DI_P_403_RUN
DI_P_404_AUTO, DI_P_404_FAULT, DI_P_404_RUN
DI_WIFI_RIO_4
AI_AIT_503_COND,
W_AI_AIT_503_COND_HTY
AI_FIT_501_FLOW, W_AI_FIT_501_FLOW
DI_MV_501_ZSC, DI_MV_501_ZSO
DI_MV_502_ZSC, DI_MV_502_ZSO
DI_MV_503_ZSC, DI_MV_503_ZSO
DI_MV_504_ZSC, DI_MV_504_ZSO
AI_AIT_501_PH_HTY
DI_P_501_AUTO,
HMI_P501.Status
DI_P_502_AUTO,
HMI_P502.Status
DI_WIFI_RIO_5
DI_VSD_1_PB, P501_FB.Speed
DI_VSD_2_PB, P502_FB.Speed
DI_LS_601_HIGH, DI_LS_601_LOW
DI_LS_602_LOW
DI_P_601_AUTO, DI_P_601_FAULT, DI_P_601_RUN
DI_P_602_AUTO, DI_P_602_FAULT, DI_P_602_RUN
DI_P_603_AUTO, DI_P_603_FAULT, DI_P_603_RUN
DI_P_501_RUN,
DI_P_502_RUN,
W_AI_AIT_202_PH,
AI_LIT_401_LEVEL,
W_AI_AIT_503_COND,
HMI_P501.Fault,
HMI_P502.Fault,
Controller
C1
C2
C3
C4
C5
C6
Component
MotorValve101
MotorValve201
Pump101
Pump102
Pump201
Pump202
Pump203
Pump204
Pump205
Pump206
Pump207
Pump208
LedRed
MotorValve201
MotorValve301
MotorValve302
MotorValve303
MotorValve304
Pump301
Pump302
Pump401
Pump402
Pump403
Pump404
MotorValve501
MotorValve502
MotorValve503
MotorValve504
Pump501
Pump601
Pump602
Pump603
Dechlorination401
Cy2Phy interfaces
DO_MV_101_CLOSE, DO_MV_101_OPEN
DO_P_101_START
DO_P_102_START
DO_MV_201_CLOSE, DO_MV_201_OPEN
DO_P_201_START
DO_P_202_START
DO_P_203_START
DO_P_204_START
DO_P_205_START
DO_P_206_START
DO_P_207_START
DO_P_208_START
DO_LED_RED
HMI_MV201.Status
DO_MV_301_CLOSE, DO_MV_301_OPEN
DO_MV_302_CLOSE, DO_MV_302_OPEN
DO_MV_303_CLOSE, DO_MV_303_OPEN
DO_MV_304_CLOSE, DO_MV_304_OPEN
DO_P_301_START
DO_P_302_START
DO_UV_401_START
DO_P_401_START
DO_P_402_START
DO_P_403_START
DO_P_404_START
DO_MV_501_CLOSE, DO_MV_501_OPEN