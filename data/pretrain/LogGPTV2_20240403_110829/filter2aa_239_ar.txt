 40, width:
 20, height:
 40);
任何方法都可以使用命名的参数调用。只需要编写变量名，后跟一个冒号和所传递的
值。编译器会去掉变量名，创建一个方法调用，就像没有变量名一样——这在编译后的代
码中没有差别。
还可以用这种方式更改变量的顺序，编译器会重新安排，获得正确的顺序。其真正的
优势是下一节所示的可选参数。
6．可选参数
参数也可以是可选的。必须为可选参数提供默认值。可选参数还必须是方法定义的最
后的参数：
    public void TestMethod(int notOptionalNumber, int optionalNumber = 42)
    {
      WriteLine(optionalNumber + notOptionalNumber);
    }
这个方法可以使用一个或两个参数调用。传递一个参数，编译器就修改方法调用，给
第二个参数传递42。
    TestMethod(11);
    TestMethod(11, 22);
  注意： 因为编译器用可选参数改变方法，传递默认值，所以在程序集的新版
本中，默认值不应该改变。在新版本中修改默认值，如果调用程序在没有重新编译的
另一个程序集中，就会使用旧的默认值。这就是为什么应该只给可选参数提供永远不
会改变的值。如果默认值更改时，总是重新编译调用的方法，这就不是一个问题。
可以定义多个可选参数，如下所示：
    public 
void 
TestMethod(int 
n, 
int 
opt1 
=
11
, 
int 
opt2 
=
22
, 
int 
opt3 
=
33
)
    {
      WriteLine(n + opt1 + opt2 + opt3);
    }
这样，该方法就可以使用1、2、3或4个参数调用。下面代码中的第一行给可选参数指
定值11、22和33。第二行传递了前三个参数，最后一个参数的值是33：
    TestMethod(1);
    TestMethod(1, 2, 3);
通过多个可选参数，命名参数的特性就会发挥作用。使用命名参数，可以传递任何可
选参数，例如，下面的例子仅传递最后一个参数：
    TestMethod(1, opt3: 4);
  注意： 注意使用可选参数时的版本控制问题。一个问题是在新版本中改变默
认值；另一个问题是改变参数的数量。添加另一个可选参数看起来很容易，因为它是
可选的。然而，编译器更改调用代码，填充所有的参数，如果以后添加另一个参数，
早期编译的调用程序就会失败。
7．个数可变的参数
使用可选参数，可以定义数量可变的参数。然而，还有另一种语法允许传递数量可变
的参数——这个语法没有版本控制问题。
声明数组类型的参数（示例代码使用一个int数组），添加params关键字，就可以使用
任意数量的int参数调用该方法。
    public void AnyNumberOfArguments(params int[] data)
    {
      foreach (var x in data)
      {
        WriteLine(x);
      }
    }
  注意： 数组参见第7章。
AnyNumberOfArguments方法的参数类型是int[]，可以传递一个int数组，或因为
params关键字，可以传递一个或任何数量的int值：
    AnyNumberOfArguments(1);
    AnyNumberOfArguments(1, 3, 5, 7, 11, 13);
如果应该把不同类型的参数传递给方法，可以使用object数组：
    public void AnyNumberOfArguments(params object[]
 data)
    {
      // etc.
现在可以使用任何类型调用这个方法：
    AnyNumberOfArguments("text", 42);
如果params关键字与方法签名定义的多个参数一起使用，则params只能使用一次，而
且它必须是最后一个参数：
    WriteLine(string format, params object[] arg);
前面介绍了方法的许多方面，下面看看构造函数，这是一种特殊的方法。
3.3.4 构造函数
声明基本构造函数的语法就是声明一个与包含的类同名的方法，但该方法没有返回类
型：
    public class MyClass
    {
      public MyClass()
      {
      }
      // rest of class definition
没有必要给类提供构造函数，到目前为止本书的例子中没有提供这样的构造函数。一
般情况下，如果没有提供任何构造函数，编译器会在后台生成一个默认的构造函数。这是
一个非常基本的构造函数，它只能把所有的成员字段初始化为标准的默认值（例如，引用
类型为空引用，数值数据类型为0, bool为false）。这通常就足够了，否则就需要编写自己
的构造函数。
构造函数的重载遵循与其他方法相同的规则。换言之，可以为构造函数提供任意多的
重载，只要它们的签名有明显的区别即可：
      public MyClass()  // zeroparameter constructor
      {
        // construction code
      }
      public MyClass(int number)  // another overload
      {
        // construction code
      }
但是，如果提供了带参数的构造函数，编译器就不会自动提供默认的构造函数。只有
在没有定义任何构造函数时，编译器才会自动提供默认的构造函数。在下面的例子中，因
为定义了一个带单个参数的构造函数，编译器会假定这是可用的唯一构造函数，所以它不
会隐式地提供其他构造函数：
    public class MyNumber
    {
      private int _number;
      public MyNumber(int number)
      {
        _number = number;
      }
    }
如果试图使用无参数的构造函数实例化MyNumber对象，就会得到一个编译错误：
    var numb = new MyNumber();  // causes compilation error
注意，可以把构造函数定义为private或protected，这样不相关的类就不能访问它们：
    public class MyNumber
    {
      private int _number;
      private MyNumber(int number)  // another overload
      {
        _number = number;
      }
    }
这个例子没有为MyNumber定义任何公有的或受保护的构造函数。这就使MyNumber
不能使用new运算符在外部代码中实例化（但可以在MyNumber中编写一个公有静态属性
或方法，以实例化该类）。这在下面两种情况下是有用的：
● 类仅用作某些静态成员或属性的容器，因此永远不会实例化它。在这种情况下，可
以用static修饰符声明类。使用这个修饰符，类只能包含静态成员，不能实例化。
● 希望类仅通过调用某个静态成员函数来实例化（这就是所谓对象实例化的类工厂方
法）。单例模式的实现如下面的代码片段所示：
    public class Singleton
    {
      private static Singleton s_instance;
      private int _state;
      private Singleton(int state)
      {
        _state = state;
      }
      public static Singleton Instance
      {
        get { return s_instance ? ? (s_instance = new MySingleton(42); }
      }
    }
Singleton类包含一个私有构造函数，所以只能在类中实例化它本身。为了实例化它，
静态属性Instance返回字段s_instance。如果这个字段尚未初始化（null），就调用实例构
造函数，创建一个新的实例。为了检查null，使用合并操作符。如果这个操作符的左边是
null，就处理操作符的右边，调用实例构造函数。
  注意： 合并操作符参见第8章。
1．从构造函数中调用其他构造函数
有时，在一个类中有几个构造函数，以容纳某些可选参数，这些构造函数包含一些共
同的代码。例如，下面的情况：
    class Car
    {
      private string _description;
      private uint _nWheels;
      public Car(string description, uint nWheels)
      {
        _description = description;
        _nWheels = nWheels;
      }
      public Car(string description)
      {
        _description = description;
        _nWheels = 4;
      }
      // etc.
这两个构造函数初始化相同的字段，显然，最好把所有的代码放在一个地方。C#有
一个特殊的语法，称为构造函数初始化器，可以实现此目的：
    class Car
    {
      private string _description;
      private uint _nWheels;
      public Car(string description, uint nWheels)
      {
        _description = description;
        _nWheels = nWheels;
      }
      public Car(string description): this
(description, 4)
      {
      }
      // etc
这里，this关键字仅调用参数最匹配的那个构造函数。注意，构造函数初始化器在构
造函数的函数体之前执行。现在假定运行下面的代码：
    var myCar = new Car("Proton Persona");
在本例中，在带一个参数的构造函数的函数体执行之前，先执行带两个参数的构造函
数（但在本例中，因为在带一个参数的构造函数的函数体中没有代码，所以没有区别）。
C#构造函数初始化器可以包含对同一个类的另一个构造函数的调用（使用前面介绍
的语法），也可以包含对直接基类的构造函数的调用（使用相同的语法，但应使用base关
键字代替this）。初始化器中不能有多个调用。
2．静态构造函数
C#的一个新特征是也可以给类编写无参数的静态构造函数。这种构造函数只执行一
次，而前面的构造函数是实例构造函数，只要创建类的对象，就会执行它。
    class MyClass
    {
      static MyClass()
      {
        // initialization code
      }
      // rest of class definition
    }
编写静态构造函数的一个原因是，类有一些静态字段或属性，需要在第一次使用类之
前，从外部源中初始化这些静态字段和属性。
.NET运行库没有确保什么时候执行静态构造函数，所以不应把要求在某个特定时刻
（例如，加载程序集时）执行的代码放在静态构造函数中。也不能预计不同类的静态构造
函数按照什么顺序执行。但是，可以确保静态构造函数至多运行一次，即在代码引用类之
前调用它。在C#中，通常在第一次调用类的任何成员之前执行静态构造函数。
注意，静态构造函数没有访问修饰符，其他C#代码从来不显式调用它，但在加载类
时，总是由.NET运行库调用它，所以像public或private这样的访问修饰符就没有任何意
义。出于同样原因，静态构造函数不能带任何参数，一个类也只能有一个静态构造函数。
很显然，静态构造函数只能访问类的静态成员，不能访问类的实例成员。
无参数的实例构造函数与静态构造函数可以在同一个类中定义。尽管参数列表相同，
但这并不矛盾，因为在加载类时执行静态构造函数，而在创建实例时执行实例构造函数，
所以何时执行哪个构造函数不会有冲突。
如果多个类都有静态构造函数，先执行哪个静态构造函数就不确定。此时静态构造函
数中的代码不应依赖于其他静态构造函数的执行情况。另一方面，如果任何静态字段有默
认值，就在调用静态构造函数之前分配它们。
下面用一个例子来说明静态构造函数的用法。该例子的思想基于包含用户首选项的程
序（假定用户首选项存储在某个配置文件中）。为了简单起见，假定只有一个用户首选项
——BackColor，它表示要在应用程序中使用的背景色。因为这里不想编写从外部数据源
中读取数据的代码，所以假定该首选项在工作日的背景色是红色，在周末的背景色是绿
色。程序仅在控制台窗口中显示首选项——但这足以说明静态构造函数是如何工作的。
类UserPreferences用static修饰符声明，因此它不能实例化，只能包含静态成员。静态
构造函数根据星期几初始化BackColor属性（代码文件StaticConstructorSample 
/
UserPreferences.cs）：
    public static class UserPreferences
    {
      public static Color BackColor { get; }
      static UserPreferences()
      {
        DateTime now = DateTime.Now;
        if (now.DayOfWeek == DayOfWeek.Saturday
          || now.DayOfWeek == DayOfWeek.Sunday)
        {
        BackColor = Color.Green;
        }
        else
        {
        BackColor = Color.Red;
        }
      }
    }
这段代码使用了.NET Framework类库提供的System.DateTime结构。DateTime结构实
现了返回当前时间的静态属性Now, DayOfWeek属性是DateTime的实例属性，返回一个类
型DayOfWeek的枚举值。
Color定义为enum类型，包含几种颜色。enum类型详见“枚举”一节（代码文件
StaticConstructor-Sample/Enum.cs）:：
      public enum Color
      {
          White,
          Red,
          Green,
          Blue,
          Black
      }
Main方法调用WriteLine方法，把用户首选的背景色写到控制台（代码文件
StaticConstructorSample/Program.cs）：
    class Program
    {
      static void Main()
      {
        WriteLine(
        $"User-preferences: BackColor is: {UserPreferences.BackColor}");
      }
    }
编译并运行这段代码，会得到如下结果：
    User-preferences: BackColor is: Color Red
当然，如果在周末执行上述代码，颜色首选项就是Green。
3.3.5 只读成员
如果不希望在初始化后修改数据成员，就可以使用readonly关键字。下面详细描述只
读字段和只读属性。
3.3.6 只读字段
为了保证对象的字段不能改变，字段可以用readonly修饰符声明。带有readonly修饰符
的字段只能在构造函数中分配值。它与const修饰符不同。编译器通过const修饰符，用其
值取代了使用它的变量。编译器知道常量的值。只读字段在运行期间通过构造函数指定。
与常量字段相反，只读字段可以是实例成员。使用只读字段作为类成员时，需要把static
修饰符分配给该字段。