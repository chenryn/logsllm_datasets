the i. The logic can be used to prove the validity of judg-
ments of the form [ G : ev ]t (cid:22)  for a ﬁxed  or to synthe-
size  while performing the proof. Our logic deﬁnes a small
set of core rules which we then use to construct high-level
rules that can be elaborated into core logic derivations.
For rules that perform contextual reasoning, we make use
of the function spp([ G : ev ]) that computes the strongest
postcondition at position p by collecting all (in)equalities in
lets, random samplings, asserts, and guards on the path to p.
The formal deﬁnition of sp can be found in Section 4.3. We
now discuss the core rules given in Figure 5. The ﬁgure con-
tains rules for dealing with probability judgments, bridging
rules formalizing program transformations and equivalence
of distributions, and rules for case distinctions and reduc-
tions.
Probability judgment rules
The Sym rule swaps the two security experiments in a dis-
tinguishing probability. This rule is required since all other
rules only act on the ﬁrst security experiment. The Deq
rule formalizes that two identical games cannot be distin-
guished. The FalseEv rule formalizes that the probability
of the event false is 0 in all games G. The Refl rule formal-
izes reﬂexivity. It is usually used if the premise is a hardness
assumption that appears on the right-hand-side of the prob-
ability judgment to be proved. The Trans(SE(cid:48)) rule for-
malizes transitivity and is usually used in combination with
other rules to derive new rules. For example, it is possible
to derive inverses for all program transformation rules using
Trans. The side condition enforces that no uninstantiated
oracle or adversary symbols are introduced.
Program transformation rules
The Swap(p) rule swaps the command at positions p with
the following command. Note that we require premise and
conclusion to be well-formed, e.g., all variable occurences
must be bound and bound variables must be distinct. This
prevents Swap applications that lead to undeﬁned variable
occurences or change the semantics. The Add(p, c) rule
inserts the command c at position p. As for Swap, the
well-formenedness requirement is important since it prevents
overshadowing of existing deﬁnitions. Add can be used to-
gether with Trans and Sym to remove commands. The
Subst(p, e) rule performs contextual rewriting and replaces
e(cid:48) at position p by e if spp(SE) |= e =E e(cid:48) holds. The Subst
rule is used for many diﬀerent purposes in proofs. For exam-
ple, it is often required to rewrite expressions before applying
a cryptographic assumption, e.g., rewrite ga∗b∗x to (ga∗b)x.
Random sampling and branching rules
The Rnd(p, t(cid:48), C, C(cid:48)) rule formalizes optimistic sampling and
replaces a uniform sampling from t by a uniform sampling
from the distribution deﬁned by s ←$ t(cid:48); return C{s}. To
ensure that these distributions are equal, the rule checks
that C is bijective in the given context using the provided
inverse C(cid:48). The Except(p, b) rule adds the new excepted
value b to the random sampling at position p. The bound is
scaled by no if p is inside an oracle o. The CaseEv(c) rule
performs a case distinction on the condition c in the event
to bound both cases separately.
Reduction rules
The Abstract(G(cid:48), B, B) rule moves some parts of the orig-
In the arguments, G(cid:48) is a
inal game into a simulator B.
game, B is an adversary symbol occuring exactly once in G(cid:48),
and the simulator B = (Bcs, Bret) is a tuple of a sequence
of commands and a return-expression. The simulator B can
contain a hole to represent an input and oracle calls y ← o(e)
to oracles provided to B in G(cid:48). To apply the rule, the result
of instantiating B with B in G(cid:48) must be equal to G.
More formally, we deﬁne the (partial) function for adver-
sary instantiation as follows. If B is not eﬃcient or if any of
the following steps fail, then inst(G(cid:48), B, B) = ⊥. Otherwise,
let y, e,(cid:126)o, (cid:126)x, (cid:126)c, (cid:126)r such that
y ← B(e) with {oi(xi) = {ci; return ri}}k
i=1.
is the only call to B in G(cid:48). We denote the position of this
call with p. Then inst(G(cid:48), B, B) = G(cid:48){B(cid:48); let y = Bret{e}}p
where B(cid:48) is obtained from Bcs by plugging e into the hole
and inlining all oracle calls.
Since rules should only introduce instantiated oracle and
adversary symbols, the Abstract rule instantiates B with
B and the new oracle symbols in G(cid:48) with the polynomial
bounds fi. The bounds fi are computed by inspecting B,
e.g., if o1 is called twice in the main body and once in an
unbounded oracle o(cid:48), then f1 = 2 + no(cid:48) .
1160Probability judgment:
(cid:48)
Sym
][SE] (cid:22) 
[ SE
[ SE ][SE(cid:48)] (cid:22) 
Deq
Refl
[ SE ]t (cid:22) [ SE ]t
Program transformation:
[ SE ][SE] (cid:22) 0
(cid:48)
[ SE
Trans(SE(cid:48))
FalseEv
[ G : false ]t (cid:22) 0
t ∈ {succ, adv}
[ SE ][SE(cid:48)] (cid:22) 2
]t (cid:22) 1
[ SE ]t (cid:22) 1 + 2
asym(SE) = asym(SE(cid:48)) and
osym(SE) = osym(SE(cid:48))
(cid:48)
Swap(p)
[ SE{c
[ SE{c; c
Random sampling:
; c}p ]t (cid:22) 
(cid:48)}p ]t (cid:22) 
Add(p, c)
[ SE{c; c
[ SE{c
(cid:48)}p ]t (cid:22) 
(cid:48)}p ]t (cid:22) 
c sampling, let,
or guard(true)
Subst(p, e)
[ SE{e}p ]t (cid:22) 
[ SE{e
(cid:48)}p ]t (cid:22) 
spp(SE) |= e =E e(cid:48)
Rnd(p, t(cid:48), C, C(cid:48))
Except(p, b)
(cid:48)
; let r = C{s}}p ]t (cid:22) 
[ SE{s ←$ t
[ SE{r ←$ t}p ]t (cid:22) 
[ SE{r ←$ t \ b}p ]t (cid:22) 
[ SE{r ←$ t}p ]t (cid:22)  + s × 1/|t|
spp(SE) |= C(cid:48){C} =E 2
(cid:26) no if p in o
s =
1 otherwise
t ∈ {succ, adv}
Branching:
Reduction:
CaseEv(c)
[ G : ev ∧ c ]t (cid:22) 1
[ G : ev ∧ ¬c ]t (cid:22) 2
[ G : ev ]t (cid:22) 1 + 2
Abstract(G(cid:48), B, B)
(cid:48)
[ G
[B := B, no1 := f1, . . . , nok := fk] : ev ]t (cid:22) 
[ G : ev ]t (cid:22) 
G = inst(G(cid:48), B, B), asym(G(cid:48)) ⊆ asym(G) (cid:93) {B},
o1, . . . , ok oracles provided to B,
{o1, . . . , ok} ∩ osym(G) = ∅, and
fi bounds for oracle queries to oi in B
Figure 5: Core Rules. We require all security experiments in premises and conclusions to be well-formed.
4.2 Soundness of the core logic
In this section, we state and prove a soundness theorem
for the core logic. For the proof, remember that our side-
condition on rules ensures that all security experiments oc-
curing in a derivation are well-formed.
Theorem 1. Let ∆ denote a derivation of
P (cid:22) P
(cid:48)
in the core logic, then P (cid:22) P (cid:48) is valid.
i
Proof Sketch. We perform a proof by induction over
derivations. Let S denote an arbitrary P -setting. Let ∆i
denote derivations of Pi (cid:22) P (cid:48)
for i ∈ {1, . . . , k} and as-
sume ∆ is the result of applying one of the core rules to the
premises ∆i. We then know that the premises Pi (cid:22) P (cid:48)
i are
valid. For all rules except Trans and Abstract this im-
plies that conditions (1) and (2) also hold for P (cid:22) P (cid:48). We
proceed by performing a case distinction on the applied core
rule:
Sym, Deq, FalseEv, Refl: Immediately follows from the
Trans(SE(cid:48)): Conditions (1) and (2) for [SE]t (cid:22) 1 +2 are
implied by the side-condition of the rule. To see that
condition (3) holds, observe that the second premise
yields | PrS[ SE ] − PrS[ SE(cid:48) ]| ≤ 2.
deﬁnition of validity and probS.
Swap, Add: Well-formedness of the premise implies that
the distribution of the ﬁnal memory (except for unused
variables) coincides in both security experiments.
Subst: In the given context, evaluating e and e(cid:48) yields the
same result.
Rnd: The distribution of the ﬁnal memory is the same.
Note that the variable s must be fresh since the premise
is well-formed.
Except(p, b): The games diﬀer only if the value b is sam-
pled. The probability of sampling b is reﬂected in the
term 1/|t| × s.
CaseEv: Follows from the fact that PrS[ G : ev ] =
PrS[ G : ev ∧ c ] + PrS[ G : ev ∧ ¬c ].
Abstract(G(cid:48), B, B): The game G where B is inlined and
the game G(cid:48) where B is an instantiation argument are
equivalent.
4.3 Checking contextual equivalence
For most of the rules presented so far, it is obvious how to
implement proof checking if all rule arguments are explicitly
given. The only exceptions are the rules Subst and Rnd
that both require a precise deﬁnition of spp(SE) and algo-
rithms for checking the conditional equivalence Γ |= e =E e(cid:48).
To deﬁne sp, we use the function conseq that takes a com-
mand c and returns a formula that characterizes its eﬀect
1161on the state:
conseq(c) =
x (cid:54)= a
x = e
b
nquant(ev)
if c = x ←$ t \ a
if c = let x = e
if c = guard(b)
if c = assert(ev)
Here, nquant(ev) denotes the (in)equalities in ev that are not
below a quantiﬁer. To compute spp(G), we start with true
and for each command c on the path to p, we add the con-
junct conseq(c) to the current post-condition. We ignore all
oracle bodies unless p points into an oracle. If p points into
an oracle, the commands in the oracle body preceding p are
taken into account and all other oracle bodies are ignored.
Since we can always rewrite the strongest post-condition into
disjunctive normal form and check Γ |= e =E e(cid:48) for each dis-
junct separately, we assume w.l.o.g. that Γ is a conjunction
of equalities and inequalities.
We use the following algorithm to rewrite e and e(cid:48) into
a normal-form and then check for syntactic equality. The
algorithm combines separate algorithms for bitstrings, ﬁeld
expressions, and booleans that are applied bottom-up to val-
ues of the given types. In a ﬁrst step, we simplify and orient
the equalities in Γ and apply the resulting replacements to
e and e(cid:48). Afterwards, values of type Gi are rewritten as gf
i
by using the log function and translating multiplication, di-
vision, and pairing to the corresponding operations on the
exponents. Then we perform normalization bottom-up us-
ing the following approach:
• For bitstrings, we deal with ⊕ and 0 using the standard
approach of ﬂattening, sorting, ﬁltering out 0, and counting
occurences of expressions modulo 2.
• For values of type Fq, our algorithm computes a normal-
form of rational functions as used in computer algebra sys-
tems [29]. The algorithm represents ring expressions as poly-
nomials over expressions e with non-ﬁeld root symbols. It
represents ﬁeld expressions using a numerator polynomial f
and a denominator polynomial h such that gcd(f, h) = 1.
Since the algorithm is only valid for well-deﬁned expressions,
i=1 fi (cid:54)= 0 =⇒ h (cid:54)= 0 for all di-
visions by expressions h in e and e(cid:48). The subroutine uses gcd
j hj for some
c ∈ Q. Since we know hj (cid:54)= 0, this implies h (cid:54)= 0. Concretely,
the subroutine searches for i such that hj = gcd(h, fi) non-
trivial. If no such i exists, it fails. Otherwise it continues
with h := h/hj until eventually, h ∈ Q.
• For boolean values, we simplify equations by splitting
equalities on product types, applying log to transform equal-
ities on Gi into equalities on Fq, and exploit the group struc-
ture for both bitstrings and ﬁeld elements to obtain equa-
tions of the form e = 0. For ﬁeld elements, e must be equal
to f ∗ h−1 for normal-form ring expressions f and h. If e is
well-deﬁned, we further simplify f ∗ h−1 = 0 to f = 0 and
obtain a disjunction of inequalities fi = 0 after factoring
i fi. For the logical operators, we apply the usual
simpliﬁcation rules such as e ∧ e = e and e ∨ true = true.
• For if-then-else, we detect common contexts C in both
branches and simplify b?C{e} : C{e(cid:48)} to C{b?e : e(cid:48)}.
we use a subroutine to prove(cid:86)n
to ﬁnd divisors hj of the fi such that h = c∗(cid:81)
f into (cid:81)
Our implementation uses the Factory library packaged
with the computer algebra system Singular [22] to perform
the required computations on multivariate polynomials such
as gcd or factoring. In the future, we might investigate the
use of Groebner bases to check the satisﬁability of sets of