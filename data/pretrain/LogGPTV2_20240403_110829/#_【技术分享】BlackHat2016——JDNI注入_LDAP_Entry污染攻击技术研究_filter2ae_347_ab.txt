7u21后默认为true）。
由于运用难度大并且有很大的局限性，所以这里就不进行介绍了。
**  
**
**3.2.5 攻击过程**
****
配合Ref Payload的Demo，我们不难理解通过RMI进行JNDI注入的攻击流程：
（1） 首先攻击者将RMI绝对路径注入到lookup方法中。
（2） 受害者RMI服务器会请求攻击者事先搭建好的恶意RMI服务器
（3） 恶意服务器返回Payload（恶意远程对象）
（4） 恶意代码在受害者服务器执行。
值得注意的是，像InitialContext.rename()和InitialContext.lookupLink()方法也会受到影响，因为它们最终还是调用了lookup方法。
**3.2.6 Toplink/EclipseLink**
JPA（持久化技术）是ORM的统一标准，Toplink是JPA的一种实现，常用的hibernate也是。EclipseLink是以Toplink为基础的开源项目。来看看JNDI的真实场景：
在基础操作中处理POST请求的过程中，调用了callSessionBeanInternal，跟进这个方法：
Lookup传入的参数是可控的，通过http请求可以做到，标准的JNDI注入。攻击者可以利用JNDI注入漏洞来实现任意代码执行。
**3.2.7 与反序列化配合**
本质上原理相同，readObject方法中有可控的lookup参数。
比如Spring框架爆出的这个反序列化漏洞，执行过程如下：
org.springframework.transaction.jta.JtaTransactionManager.readObject()方法中调用了IntinailContext.lookup方法，调用过程如下：
l initUserTransactionAndTransactionManager()
l initUserTransactionAndTransactionManager()
l JndiTemplate.lookup()
l InitialContext.lookup()
InitialContext.lookup()这个方法中的传入参数”userTransactionName”是用户可控的，所以造成了JNDI注入。BlackHat上的议题中还提到了其他的例子，这里就不一一介绍了。
**  
**
**3.3 CORBA攻击向量**
CORBA的JNDI注入原理和RMI的差不多，但是有SecurityManager的限制，然而，议题的演讲者找到了一个绕过SecurityManager的方法，但是由于正在被修复中，所以在议题中并没有透漏这个方法。感兴趣的同学可以关注一下，在几个绕过中，已经有一个获得了CVE编号（CVE-2016-5018）。
**  
**
**3.4 LDAP攻击向量**
**  
**
**3.4.1 LDAP基础**
LDAP是轻量级目录访问协议，通过LDAP，用户可以连接，查询，更新远程服务器上的目录。
对象在LDAP上有两种存储方式：
（1） 利用Java序列化方式
（2） 利用JDNI的References对象引用
这两种方式都有可能造成命令执行。
**3.4.2 攻击流程**
****
1\. 攻击者提供一个LDAP的绝对路径URL注入到JNDI的lookup方法
2\. 受害者服务器连接到攻击者的恶意LDAP服务，并返回一个恶意的远程对象引用。
3\. 受害者服务器对JNDI远程对象引用Reference进行decode操作。
4\. 受害者服务器获取到了恶意的工厂对象。
5\. 受害者服务器实例化这个工厂对象。
6\. 工厂对象中的恶意代码被触发执行。
LDAP的情境下，对于lookup方法的注入和漏洞触发原理本质上和RMI的一致。
**3.4.3 LDAP实体投毒**
实际上，lookup方法恶意注入的场景是非常少见的。大部分的操作都是在对象层面的操作，比如增删改查等。
LDAP编程中，通常会使用search方法来查询一个目录对象，单纯的一个查询是无法做到命令执行的，但是议题作者发现，当returnObjFlag设置为true时，攻击者可以控制LDAP的返回并引发任意命令执行的漏洞。
**对象返回查询**
LDAP编程中使用
SearchControls对象作为参数来标识查询范围以及查询返回值的形式。这个对象中有个方法是setReturningObjFlag(boolean)，当设置为true时（默认为false），使用search方法查询后会返回一个对象结构。
当returnObjFlag设置为true时，查看源码，可以看到调用了decodeObject方法转化为对象。
Java对象表现协议
在RFC 2713中，详细的定义了不同的Java对象在LDAP目录系统中的表现和存储形式。
**1\. 序列化对象**
序列化对象在LDAP中的表示如下：
l javaClassName：类的全称
l javaClassNames：类定义所继承的父类，接口的名称集合
l javaCodebase：指向class定义的位置
l javaSerializedData：包含序列化之后的对象数据
**2\. Marshalled Objects**
和序列化对象差不多，但是会记录javaCodebase.
**3\. JNDI References**
引用类型对象包含了javaClassName,javaClassNames, javaCodebase。除此之外，还有：
l javaReferenceAddress：存储引用地址的列表。
l javaFactory：存储工厂类的类名全称。
**  
**
**攻击向量**
**1\. 反序列化**
当JNDI中对象的javaSerializedData不为空时，decodeObject方法就会对这个字段的内容进行反序列化（Obj.decodeObject(Attributesattrs)）：
这里javaCodebase可以指定远程的URL，黑客只需要在readObject方法中编写恶意代码就能执行，当然需要服务器端配置com.sun.jndi.object.trustURLCodebase=true
来避开JVM的安全管理器。
当LDAP服务器没有这种设置时，攻击者仍然可以使用一些存在于服务器端的有漏洞的类来执行代码。
LDAP投毒的代码如下，这里是指定了javaCodebase进行攻击：
**2\. JNDIReference**
LDAP中，也是由Naming Manager来处理引用类型的对象，并做实例化的。Naming
Manager会检查javaFactory和javaCodebase是否是存在的，如果存在，则从javaCodebase中获取javaFactory进行实例化。正如前面所说的，对于Naming
Manager，JVM的安全管理机制太过于宽松。因此，攻击者就可以通过控制这些属性来执行恶意代码。
下面的代码是Obj.decodeObject(Attributesattrs)中实例化Reference的代码：
这里的decodeReference方法中对Reference进行了组装：
可以看到这个代码和JNDI注入的代码是一致的。
攻击代码如下：
**3\. RemoteLocation**
javaRemoteLocation属性在RFC中是被废除的，但是JNDI还是能支持这个属性的处理。相关代码如下：
可以看到，当指定javaRemoteLocation时，JNDI会根据URL获取到对应的Reference，实例化之后就会触发漏洞代码，和RMI的情景如出一辙。
**  
**
**3.4.4 攻击场景**
在LDAP中修改对应的Java属性，当LDAP中查询后实例化查询结果时，就会触发漏洞。具体来讲，是LdapSearchEnumeration类对LDAP查询响应进行实例化，本质上还是通过注入外部的工厂类来污染Reference。
对攻击过程进行总结，大致是两个方向：
**1\. 针对LDAP条目**
（1） 攻击者污染一个LDAP条目，并且注入恶意的Java协议属性。
（2） 攻击者向LDAPserver发起一个查询（比如LDAP认证的时候）。
（3） 受害应用执行LDAP查询并获取受到污染的实体。
（4） 受害应用将条目转换为java对象。
（5） 受害应用从攻击者控制的服务器上获取恶意的工厂类。
（6） 受害应用在实例化工厂类的时候执行了恶意代码。
**2\. 针对LDAP响应**
（1） 攻击者强制受害应用发起一个LDAP查询（比如认证的时候），或者等待该应用发起一次LDAP查询。
（2） 应用发起一次LDAP查询，并获取一个条目
（3） 攻击者拦截并修改LDAP查询的响应，将恶意的Java协议属性注入到响应中。
（4） 受害应用对该响应进行实例化时触发恶意代码
**  
**
**3.4.5 返回对象的查询方式**
设置returnObjFlag为true的写法还是挺常见的，因为查询过后直接返回对象，操作起来非常方便。
**Spring Security案例**
Spring security是一个Java应用常见的认证和鉴别的框架。
这个库提供了一个查询指定用户名的方法：
FilterBasedLdapUserSearch.searchForUser(String username). 这个方法是Spring
Security获取正在认证的用户信息的。这个方法用到了SpringSecurityLdapTemplate类：
跟进这个方法：
继续跟进，可以看到查询的代码：
在buildControls中，可以看到设置了RETURN_OBJECT为true：
显然，这个漏洞是针对条目的一种形式，由于设置了查询结果返回为java对象，JNDI会自动将查询结果进行某种decode来转为Java对象，实例化过程中触发漏洞。通过修改java协议属性来复现：
1\. 首先写一个恶意的工厂类，在构造函数中执行恶意代码。
2\. 污染条目
重点是修改了javaFactory和javaCodebase，指向了我们的恶意工厂类。
3\. 触发search方法
只需要尝试登陆一下即可触发LDAP执行search操作，从而执行我们的恶意代码。
1\. 执行恶意代码。
Spring LDAP案例
还是同样的原因，这里只分析下源码：
受影响的是authenticate方法，调用了search方法，跟进之后发现也同样设置了returnObjFlag，利用思路和前面一致。
**（四）总结**
****
议题中介绍了两种新型的攻击方式——JNDI攻击和LDAP条目污染。两种方式都是非常高危的漏洞，并且可以执行任意的代码。
为了防范这两种类型的漏洞，可以做以下措施：
1\. 不要将不可信的数据传入InitialContext.lookup方法中。
如果必须这么做，那么要确保参数不是绝对路径的URL。
2\. 使用安全管理器时，需要仔细审计安全策略。
3\. 尽可能禁止远程的codebase