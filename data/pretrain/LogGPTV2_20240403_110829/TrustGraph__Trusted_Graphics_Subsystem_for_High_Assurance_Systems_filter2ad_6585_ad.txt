transfer sensitive data one bit (or a few bits) at a time. To
estimate the capacity of a graphics covert channel, we have
implemented a prototype covert channel on top of Trust-
Graph. As mentioned before, the applications can enumerate
all the windows on the display. Our covert channel uses
this fact to transfer data. At each time slot, if the number
of windows on the display is even, it conveys a “0” and
if it is odd it conveys a “1”. At each time slot, if the
sender wants to send a “1” and the number of windows
is even, it opens a small dummy window and does not do
so otherwise. The dual procedure is done for transferring
a “0”. We have measured the capacity of our channel by
transferring a 10MB ﬁle over the channel. The total transfer
time was about 10 minutes and 30 seconds which means
that the channel capacity is around 127,000 bits/sec. Given
that the window opening and closing activity of the system is
reasonable (not more that one window per second), the noise
level on such a channel is negligible; hence, the channel
capacity is equal to the bandwidth. The capacity measured
here is well beyond the acceptable rate. Similar channels
can be designed using the other resource creation/acquisition
methods. As another example, the sender can acquire the
window of the receiver at each time slot, releasing its access
to the window, thus sending one bit at a time.
To reduce the capacity of such covert channels, we use the
idea of fuzzy time[17]. A random delay of maximum 100 ms
262
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
is imposed on all of the resource creation and acquisition
methods in TrustGraph. The amount of delay is selected
using the Merssene-Twister random number generator[27].
After introducing this delay, we measured the new capacity
to be strictly less than 20 bits/sec. Note that the average
delay for each method is about 50 ms.
The elegance of this approach is that it does not introduce
any delay to the drawing operations. These operations are
performed by the application on an already acquired surface,
so they cannot leak information across different applications.
Hence, the random delay does not slow down the visual
effects or the graphics acceleration. For benign applications,
it just slows down the window opening by an average of a
few tens of milliseconds (depending on how many resources
are created) which is masked by the application starting
delay and is not even noticeable by the user.
VII. RELATED WORK
There have been a number of efforts in the literature for
building trusted MILS and MLS systems using virtualiza-
tion. IBM’s PR/SM [10] and VMM-based security kernel for
VAX architecture [21] describe two of the earlier attempts.
NSA’s NetTop [28] and MILS [6] and IBM’s sHype [33]
are three of the more recent VMM-based high assurance
systems. Karger [19] studies the requirements of the MLS
systems and discusses their implications on the design of
VMMs. Terra [16] and Secvisor [35] also build trusted
systems through virtualization. Using the fact that VMMs
reside in a lower layer than the guest operating system,
they provide code attestation and isolation for the virtual
machines. Walker et al. [39] use formal techniques to verify
the Linux security kernel.
Karger and Safford [20] describe the I/O virtualization
complexities and study the performance and security trade-
offs of different I/O models. AMD [4] and Intel [18] support
the Input Output Memory Management Unit (IOMMU)
approach for assigning I/O devices to virtual machines.
However, this approach is not suitable for graphics system
which is inherently shared between the virtual machines.
Woodward [42] describes the requirements for a trusted
graphics system for Compartmented Mode Workstation
(CMW), one of the early attempts to build a high assurance
MLS system. Epstein and Picciotto [14] study the security
problems of X.
There have been different efforts to build trusted X.
Epstein [13], [12], [11] and Woodward [42] describe differ-
ent trusted X implementations. Picciotto [31] presents two
approaches for implementing trusted cut and paste operation
in X. Another work by Picciotto and Epstein [32] surveys
the architectures and security policies implemented by the
trusted X implementations. Finally, the work by Feske and
Helmuth [15] is another recent effort on building secure
GUI.
A recent attempt for building trusted graphics is done
by adding security hooks to X (known as X Access Con-
trol Extension or XACE) and extending a two-level trust
hierarchy to it [40]. However, simply dividing clients to
“trusted” and “untrusted” is too coarse-grained. A more
ﬂexible policy model is implemented by extending the SE-
Linux policy [36] to X using XACE hooks [41]Nevertheless,
this implementation only mediates known channels under X
and does not provide any type of assurance [24]. Considering
the large size of X and the obsolete features in its code, it
is difﬁcult to provide assurance for SE-Linux-enabled X.
Moreover, none of the existing trusted graphics subsystems
provide capacity reduction for the graphics API covert
channels. Finally, Paget [30] describes how design ﬂaws in
the Win32 API can be exploited to escalate privilege.
VIII. CONCLUSION
We have described the design and implementation of
TrustGraph, a secure graphics subsystem for high assurance
systems. TrustGraph is designed based on a number of
fundamental security principles which we adhere to through-
out the implementation. Labeled resources, secure methods,
secure operations, and a secure window manager provide
complete mediation and compliance with the security policy
in the graphics subsystem. To adhere to the principle of
simplicity, we have used DirectFB instead of X for our
implementation which required modest amount of fresh code
and modiﬁcation.
We have performed different levels of evaluation to test
TrustGraph. Correct operation is veriﬁed through simple
functionality tests. Security mechanisms and label checking
are veriﬁed through a number of simple attacks designed
based on the threat model. Finally, detailed formal model
checking is done to verify the critical components of the
implementation: the label ﬂow and the window manager
operations. Throughout the different stages of veriﬁcation,
we have found and corrected a number of ﬂaw in the initial
implementation of TrustGraph.
We have also analyzed TrustGraph for the covert channels
through the graphics API, estimated the capacity of such
channels, and reduced their capacity using the idea of fuzzy
time.
TrustGraph can be used as the graphics subsystem in
machines with either a single trusted operating system or
multiple virtual machines running on top of a VMM. We
plan to release TrustGraph to be used as a secure graphics
subsystem in high assurance systems.
REFERENCES
[1] Directfb. http://www.directfb.org/.
[2] Mozilla directfb porting.
https://wiki.mozilla.org/Mobile/DFBPorting.
[3] Trusted computer system evaluation criteria. National Secu-
rity Institute, 1985. 5200.28-STD.
263
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
[4] Amd i/o virtualization technology (iommu) speciﬁcation. Ad-
vanced Micro Devices, 2006. publication no. 34434.
[18] J. Humphreys and T. Grieser. Mainstreaming server virtual-
ization: The intel approach. IDC, 2006.
[5] Common criteria security assurance requirements. Common
Criteria Recognition Arrangement, 2007. CCPART3V3.
[6] Jim Alves-Foss, Carol Taylor, and Paul Oman. A multi-
In
layered approach to security in high assurance systems.
HICSS ’04: Proceedings of
the 37th
Annual Hawaii International Conference on System Sciences
(HICSS’04) - Track 9, page 90302.2, Washington, DC, USA,
2004. IEEE Computer Society.
the Proceedings of
[7] Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand, Tim
Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, and Andrew
Warﬁeld. Xen and the art of virtualization.
In SOSP ’03:
Proceedings of the nineteenth ACM symposium on Operating
systems principles, pages 164–177, New York, NY, USA,
2003. ACM.
[8] D. Bell and L. LaPadula. Secure computer systems: Math-
ematical foundations. Technical Report MTR-2547, MITRE
Corp., 1973.
[9] Biba. Integrity considerations for secure computer systems.
MITRE Co., technical report ESD-TR 76-372, 1977.
[10] T. L. Borden, J. P. Hennessy, and J. W. Rymarczyk. Multiple
operating systems on one processor complex. IBM Syst. J.,
28(1):104–123, 1989.
[11] J. Epstein.
A high-performance hardware-based high-
assurance trusted windowing system. In NISSC’96: National
Information Systems Security Conference, 1996.
[12] J. Epstein.
Fifteen years after tx: A look back at high
assurance multi-level secure windowing. In ACSAC ’06: Pro-
ceedings of the 22nd Annual Computer Security Applications
Conference, pages 301–320, Washington, DC, USA, 2006.
IEEE Computer Society.
[13] J. Epstein, J. McHugh, R. Pascale, H. Orman, G. Benson,
C. Martin, A. Marmor-Squires, B. Danner, and M. Branstad.
A prototype b3 trusted x window system. Computer Se-
curity Applications Conference, 1991. Proceedings., Seventh
Annual, pages 44–55, Dec 1991.
[14] J. Epstein and J. Picciotto. Trusting x: Issues in building
trusted x window systems -or- what’s not trusted about x? In
Proceedings of the 14th Annual National Computer Security
Conference, October 1991.
[15] N. Feske and C. Helmuth. A nitpicker’s guide to a minimal-
complexity secure gui. In ACSAC ’05: Proceedings of the 21st
Annual Computer Security Applications Conference, pages
85–94, Washington, DC, USA, 2005. IEEE Computer Society.
[16] Tal Garﬁnkel, Ben Pfaff, Jim Chow, Mendel Rosenblum,
and Dan Boneh. Terra: a virtual machine-based platform
for trusted computing.
In Proceedings of the 19th ACM
Symposium on Operating Systems Principles (SOSP ’03),
pages 193–206, New York, NY, USA, 2003. ACM Press.
[17] W.-M. Hu. Reducing timing channels with fuzzy time.
Research in Security and Privacy, 1991. Proceedings of the
1991 IEEE Computer Society Symposium on, pages 8–20,
1991.
[19] Paul A. Karger. Multi-level security requirements for hy-
pervisors.
In ACSAC ’05: Proceedings of the 21st Annual
Computer Security Applications Conference, pages 267–275,
Washington, DC, USA, 2005. IEEE Computer Society.
[20] Paul A. Karger and David R. Safford. I/o for virtual machine
IEEE Security
monitors: Security and performance issues.
and Privacy, 6(5):16–23, 2008.
[21] Paul A. Karger, Mary Ellen Zurko, Douglas W. Bonin,
Andrew H. Mason, and Clifford E. Kahn. A retrospective
on the vax vmm security kernel.
IEEE Trans. Softw. Eng.,
17(11):1147–1165, 1991.
[22] M. Kaufmann and R. S. Boyer. The boyer-moore theorem
prover and its interactive enhancement. Computers and
Mathematics with Applications, 29(2):27–62, 1995.
[23] M. Kaufmann and J. S. Moore. ACL2, volume Version 3.4.
University of Texas at Austin, August 2008.
[24] D. Kilpatrick, W. Salamon, and C. Vance. Securing the
x window system with selinux. Technical report, National
Security Agency, March 2003.
[25] Avi Kivity, Yaniv Kamay, Dor Laor, Uri Lublin, and Anthony
Liguori. Kvm: the linux virtual machine monitor. In Ottawa
Linux Symposium, pages 225–230, July 2007.
[26] M. Manely. The x window system must die.
Articles, July 2000. Linux.com.
Featured
[27] M. Matsumoto and T. Nishimura. Mersenne twister: a 623-
dimensionally equidistributed uniform pseudo-random num-
ber generator. ACM Transactions on Modeling and Computer
Simulation, 8(3), 1998.
[28] R. Meushaw and D. Simard. Nettop: Commercial technology
in high assurance applications. National Security Agency Tech
Trend Notes, 9(4):3–10, Fall 2000.
[29] J. Millen. 20 years of covert channel modeling and analysis.
Security and Privacy, 1999. Proceedings of the 1999 IEEE
Symposium on, pages 113–114, 1999.
[30] C. Paget. Exploiting design ﬂaws in the win32 api for
privilege escalation, August 2002. web.archive.org.
[31] J. Picciotto. Towards trusted cut and paste in the x window
system. Computer Security Applications Conference, 1991.
Proceedings., Seventh Annual, pages 34–43, Dec 1991.
[32] J. Picciotto and J. Epstein. A comparison of trusted x
security policies, architectures, and interoperability. Computer
Security Applications Conference, 1992. Proceedings., Eighth
Annual, pages 142–152, Nov-4 Dec 1992.
[33] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez, S. Berger,
J.L. Grifﬁn, and L. Doorn. Building a mac-based security
architecture for the xen open-source hypervisor. Computer
Security Applications Conference, 21st Annual, pages 285–
295, 2005.
264
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
[34] Robert W. Scheiﬂer and Jim Gettys. The x window system.
ACM Trans. Graph., 5(2):79–109, April 1986.
[35] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: a
tiny hypervisor to provide lifetime kernel code integrity for
commodity oses.
In SOSP ’07: Proceedings of 21st ACM
SIGOPS symposium on Operating systems principles, pages
335–350, 2007.
[36] S. Smalley, C. Vance, and W. Salamon.
Implementing
selinux as a linux security module. Technical report, National
Securoty Agency, May 2002.
[37] Guy Steele. Common LISP : The Language (LISP Series).
Digital Press, June 1984.
[38] R. Scott Thompson. Quartz 2D Graphics for Mac OS X(R)
Developers. Addison-Wesley Professional, 2006.
[39] Bruce J. Walker, Richard A. Kemmerer, and Gerald J. Popek.
Speciﬁcation and veriﬁcation of the ucla unix security kernel.
Commun. ACM, 23(2):118–131, February 1980.
[40] E. Walsh. X access control extension speciﬁcation, 2006.
X.org Foundation.
[41] E. Walsh. Application of the ﬂask architecture to the x
window system server. In Proceedings of the 2007 SELinux
Symposium, 2007.
[42] J. P. L. Woodward. Security requirements for system high and
compartmented mode workstations. Technical Report MTR
9992, MITRE Corporation, November 1987.
APPENDIX
Some of the ACL2 models and theorems are shown in
table 1. The complete scripts are not presented for the
interest of space, but are similar to those shown in table
1.
Table I
TRUSTGRAPH LABEL FLOW SCRIPTS.
(defun get_win (win int_PL)
(if (dom int_PL (car win))
(list int_PL int_PL)
nil))
(defun dom (resa resb)
(if (AND (>= (car resa) (car resb))
(subset (cdr resb) (cdr resa)) ) T nil))
(defun set_win_label (win int_PL label)
(if (dom int_PL label) (list (car win) label) win))
(defthm no_leak (implies
(AND (consp win) (NOT (dom int_PL (car win))))
(= (get_win (set_win_label win int_PL label)
int_PL) nil)))
(defthm no_leak2
(implies
(AND (consp win) (consp surface)
(NOT (dom
(car (cdr (set_win_label win int_PL label)))
(car surface))))
(= (get_surface surface
(set_win_label win int_PL label)) nil)))
265
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply.