Agent Task 
Component
connection
Manager Task 
Component
Processor 
Component
MT
Proc
monitored
monitored
notifier
AW
SW
Ntfy
monitor
Alive-watch Connector
monitor
Status-watch Connector
subscriber
Notify Connector
Figure 3. MAMA notations. The graphical notation of 
components, ports, connectors and roles are taken 
from [21].
Figure  4  shows  a  centralized  management  architecture,
in MAMA notation, for the system of Figure 1. Manager1
is  introduced  here  as  the  central  manager  task.  The
application  tasks AppA and  AppB are also subscribers for
the notifications from Manager1, which control retargeting
of requests to the Servers.
procA:Proc
UserA:AT
proc1:Proc
AppA:AT
proc3:Proc
Server1:AT
(cid:127)
(cid:127)
graph follows [8]. The nodes of the fault propagation graph
are:
(cid:127)
leaf nodes representing either a task or a processor (a 
task node or a processor node).
AND-nodes corresponding to the entries in the FTLQN 
model, called entry nodes.
OR-nodes corresponding to the “services” in the 
FTLQN model that have alternative targets. They are 
called service nodes. Labels #1, #2, ... on the outgoing 
OR arcs define the preference order for the alternative 
targets (#1 first).
Figure  5  shows 
the  Fault  Propagation  Graph  G
corresponding to the layered model in Figure 1. Notice that
only  tasks  that  are  part  of  the  application  are  included  in
this  graph;  the  failures  of  management  or  agent  tasks  are
described  within 
the  Knowledge  Propagation  Graph
(described  later  in  Section  4),  although  they  also  have
effects within this Fault Propagation Graph.
userA
r
userB
UserA
eA
procA
UserB
eB
procB
AppA
serviceA
proc1
AppB
proc2
serviceB
#2
#1
eA-1
#2
#1
eB-1
eA-2
eB-2
c4:Ntfy
c2:AW
c3:AW
c6:AW
c5:AW
proc3
Server1
Server2
proc4
Manager1:MT
proc5:Proc
Figure 5. The fault propagation graph G corresponding 
to Figure 1.
c1:AW
c7:AW
c8:AW
c9:Ntfy
c10:AW
c12:AW
c11:AW
UserB:AT
procB:Proc
AppB:AT
proc2:Proc
Server2:AT
proc4:Proc
Figure 4. MAMA Model for a centralized management 
architecture. Manager1 is the central manager task. 
3.  Modeling Fault Propagation
The  operational  dependencies  among  the  entries  in  the
FTLQN  model  can  be  represented  by  an  AND-OR-like
graph,  known  as  a  fault  propagation  graph  [8].  The
transformation of  an  FTLQN  model  to  a  fault  propagation
Notations:
(cid:127)
(cid:127)
(cid:127)
)
′
L⊆
 denotes the set of leaf nodes in G on which 
(compliment of oc) represents failed status of com-
V denotes the set of nodes in G.
L denotes the set of leaf nodes in G.
L n(
the non-leaf node, n, depends on.
oc represents the working status of component c. 
oc
ponent c.
knowc,t is determined by a boolean expression that 
evaluates to TRUE if task t has knowledge about the 
operational state of a component c. The expression can 
be found (as described in Section 4) from the connec-
tivity information of the fault management architecture 
of the system.
t(s) denote the task that requires service s. 
(cid:127)
(cid:127)
(cid:127)
(cid:127)
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:19:50 UTC from IEEE Xplore.  Restrictions apply. 
(cid:127)
(cid:127)
Definition 1: In a fault propagation graph G, 
(cid:127)
An entry node is working if all its child nodes are 
working.
The root node is working if any of its child nodes is 
working.
A service node is working if any of its child nodes is 
working. A service node s that has M alternative target 
entries, e1, e2, ... eM  (ordered by their priorities 1, 2, 
...M) and which is required by an entry e of task t, 
selects a target ep for being operational if:
(cid:127) p = min{ j * 1(ej is operational) }, j = 1, 2, ...M where 
the indicator function 1(expression) is equal to one if 
the expression is true and zero otherwise, and 
(cid:127) the entry ep is operational and the task  t has the 
knowledge (using know function) about the state of all 
the components that make entry ep operational, and
(cid:127) if p > 1, then all the entries ej are failed for j < p and 
the task t knows (using know function) about each of 
the entry ej’s failure by knowing the state of the com-
ponents that contributed in ej’s failure.
Definition 2: Let us define a configuration C of the system
as: C = { n | 
 where node n represents an entry or a
service  node  that  is  working  as  per  Definition-1  and  is  in
use by the system }.
V∈
n
The  fault  propagation  graph  is  used  in  the  algorithm
described in Section 5, to determine the distinct operational
configurations of the system and their probabilities. 
Apart from the know function, and its effects, this is the
same  reconfiguration  algorithm  as  in  [8].  The  function
know incorporates possible coverage limitations created by
the  fault  management  architecture.  Its  computation  is
described in the Section 4.
4.  Modeling Knowledge Propagation
The  connectivity  between  a  point  of  failure  and  the
point  of  reconfiguration  can  be  analyzed  by  applying
minpath  algorithms  to  the  MAMA  model.  First,  the
MAMA  model  is  converted  to  a  flat  graph  called  the
Knowledge Propagation graph. There are four types of arcs
in the knowledge propagation graph K: {component, alive-
watch,  status-watch,  notify}.  Each  component  in  the
MAMA  model  leads  to  an  arc  of  type  component;  each
connector in the MAMA model leads to an arc of the same
type as the connector. A component or connector failure is
represented by an arc failure.
Let  us  denote  ivi  and  tvi  to  be  the  initial  and  terminal
vertices respectively of arc i.
The  steps  for  transformation  of  a  MAMA  model  to  a
Knowledge Propagation graph are:
For each component i in MAMA model, 
(cid:127)
(cid:127)
add a directed arc i = (ivi, tvi) to K.
the type of the arc i is set to component.
For  each  connector  c  between  two  components  i  and  j  in
the  MAMA  model,  where  i,  j  are  connected  to  roles
{monitored, monitor} of c (when c is of type alive-watch or
status-watch) or connected to roles {notifier, subscriber} of
c (when c is of type notify),
(cid:127)
(cid:127)
add a directed arc c to K such that ivc = tvi and tvc = ivi
the type of the arc c is set equal to the type of the con-
nector c. 
Figure  6  shows  the  knowledge  propagation  graph
corresponding to the MAMA model in Figure 4.
c4; ntfy
26
c9; ntfy
procA; cmpt
UserA; cmpt
proc1; cmpt
2
4
6
AppA; cmpt
8
proc3; cmpt
Server1; cmpt
10
12
1
3
5
7
9
11
t
p
m
c
;
1
r
e
g
a
n
a
M
25
c
1
;
a
w
c2; aw
c3; aw
w
5 ;  a
c
w
c 6 ; a
procB; cmpt
13
14
16
18
20
UserB;cmpt
proc2; cmpt
AppB; cmpt
proc4; cmpt
Server2; cmpt
22
24
15
17
w
w
c7; a
c 8; a
c10; aw
c11; aw
c12;aw
19
21
23
proc5;cmpt
27
28
Each edge is labelled by its name and type as name; type.
cmpt = component; ntfy = notify; 
aw = alive-watch; sw = status-watch
Figure 6. The Knowledge Propagation graph corre-
sponding to the MAMA model in Figure 4.
The knowledge propagation graph is used for computing
the function knowc,t (defined in Section 3) as:
m
)
∈
j
(
q = 1
oj
+
Pq
knowc,t =  
where m is the total number of
minpaths  (P1,  P2, 
...,  Pm)
from  tvc  to  tvt.  A  minpath  Pq
is  a  minimal  set  of  arcs  in
graph  K  such  that when  all  the  arcs  in  Pq  are operational,
then  vertices  tvc  and  tvt  are connected; vertices  tvc  and tvt
are disconnected for every proper subset of Pq. A minpath
Pq  from  tvc  to  tvt  is  obtained  from  K  when  c  represents  a
task or from the reduced graph [K - {arcs representing task
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:19:50 UTC from IEEE Xplore.  Restrictions apply. 
tj  (contained  in  processor  c)  in  K}]  when  c  represents  a
processor,  using  any  standard  minpaths  algorithm  (e.g.
[22]), taking into account that the first arc in the path must
be of type  alive-watch or status-watch and rest of the arcs
+ is
should be of type component, status-watch or notify. Pq
an augmented minpath obtained from Pq as:
(
∪
∈
Pq
tj
+ = 
Pq
Pq
∪
c is a task,
arc p p is processor of task tj
)
∪
pc
 if
(
∪
∈
Pq
arc p p is processor of task tj
)