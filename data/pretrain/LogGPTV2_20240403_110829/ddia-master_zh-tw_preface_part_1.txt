# 序言
如果近几年从业于软体工程，特别是伺服器端和后端系统开发，那么你很有可能已经被大量关于资料储存和处理的时髦词汇轰炸过了： NoSQL！大资料！Web-Scale！分片！最终一致性！ACID！CAP 定理！云服务！MapReduce！实时！
在最近十年中，我们看到了很多有趣的进展，关于资料库，分散式系统，以及在此基础上构建应用程式的方式。这些进展有著各种各样的驱动力：
* 谷歌、雅虎、亚马逊、脸书、领英、微软和推特等网际网路公司正在和巨大的流量 / 资料打交道，这迫使他们去创造能有效应对如此规模的新工具。
* 企业需要变得敏捷，需要低成本地检验假设，需要透过缩短开发周期和保持资料模型的灵活性，快速地响应新的市场洞察。
* 免费和开源软体变得非常成功，在许多环境中比商业软体和定制软体更受欢迎。
* 处理器主频几乎没有增长，但是多核处理器已经成为标配，网路也越来越快。这意味著并行化程度只增不减。
* 即使你在一个小团队中工作，现在也可以构建分布在多台计算机甚至多个地理区域的系统，这要归功于譬如亚马逊网路服务（AWS）等基础设施即服务（IaaS）概念的践行者。
* 许多服务都要求高可用，因停电或维护导致的服务不可用，变得越来越难以接受。
**资料密集型应用（data-intensive applications）** 正在透过使用这些技术进步来推动可能性的边界。一个应用被称为 **资料密集型** 的，如果 **资料是其主要挑战**（资料量，资料复杂度或资料变化速度）—— 与之相对的是 **计算密集型**，即处理器速度是其瓶颈。
帮助资料密集型应用储存和处理资料的工具与技术，正迅速地适应这些变化。新型资料库系统（“NoSQL”）已经备受关注，而讯息伫列，快取，搜寻索引，批处理和流处理框架以及相关技术也非常重要。很多应用组合使用这些工具与技术。
这些生意盎然的时髦词汇体现出人们对新的可能性的热情，这是一件好事。但是作为软体工程师和架构师，如果要开发优秀的应用，我们还需要对各种层出不穷的技术及其利弊权衡有精准的技术理解。为了获得这种洞察，我们需要深挖时髦词汇背后的内容。
幸运的是，在技术迅速变化的背后总是存在一些持续成立的原则，无论你使用了特定工具的哪个版本。如果你理解了这些原则，就可以领会这些工具的适用场景，如何充分利用它们，以及如何避免其中的陷阱。这正是本书的初衷。
本书的目标是帮助你在飞速变化的资料处理和资料储存技术大观园中找到方向。本书并不是某个特定工具的教程，也不是一本充满枯燥理论的教科书。相反，我们将看到一些成功资料系统的样例：许多流行应用每天都要在生产中满足可伸缩性、效能、以及可靠性的要求，而这些技术构成了这些应用的基础。
我们将深入这些系统的内部，理清它们的关键演算法，讨论背后的原则和它们必须做出的权衡。在这个过程中，我们将尝试寻找 **思考** 资料系统的有效方式 —— 不仅关于它们 **如何** 工作，还包括它们 **为什么** 以这种方式工作，以及哪些问题是我们需要问的。
阅读本书后，你能很好地决定哪种技术适合哪种用途，并了解如何将工具组合起来，为一个良好应用架构奠定基础。本书并不足以使你从头开始构建自己的资料库储存引擎，不过幸运的是这基本上很少有必要。你将获得对系统底层发生事情的敏锐直觉，这样你就有能力推理它们的行为，做出优秀的设计决策，并追踪任何可能出现的问题。
## 本书的目标读者
如果你开发的应用具有用于储存或处理资料的某种伺服器 / 后端系统，而且使用网路（例如，Web 应用、移动应用或连线到网际网路的感测器），那么本书就是为你准备的。
本书是为软体工程师，软体架构师，以及喜欢写程式码的技术经理准备的。如果你需要对所从事系统的架构做出决策 —— 例如你需要选择解决某个特定问题的工具，并找出如何最好地使用这些工具，那么这本书对你尤有价值。但即使你无法选择你的工具，本书仍将帮助你更好地了解所使用工具的长处和短处。
你应当具有一些开发 Web 应用或网路服务的经验，且应当熟悉关系型资料库和 SQL。任何你了解的非关系型资料库和其他与资料相关工具都会有所帮助，但不是必需的。对常见网路协议如 TCP 和 HTTP 的大概理解是有帮助的。程式语言或框架的选择对阅读本书没有任何不同影响。
如果以下任意一条对你为真，你会发现这本书很有价值：
* 你想了解如何使资料系统可伸缩，例如，支援拥有数百万使用者的 Web 或移动应用。
* 你需要提高应用程式的可用性（最大限度地减少停机时间），保持稳定执行。
* 你正在寻找使系统在长期执行过程易于维护的方法，即使系统规模增长，需求与技术也发生变化。
* 你对事物的运作方式有著天然的好奇心，并且希望知道一些主流网站和线上服务背后发生的事情。这本书打破了各种资料库和资料处理系统的内幕，探索这些系统设计中的智慧是非常有趣的。
有时在讨论可伸缩的资料系统时，人们会说：“你又不在谷歌或亚马逊，别操心可伸缩性了，直接上关系型资料库”。这个陈述有一定的道理：为了不必要的伸缩性而设计程式，不仅会浪费不必要的精力，并且可能会把你锁死在一个不灵活的设计中。实际上这是一种 “过早最佳化” 的形式。不过，选择合适的工具确实很重要，而不同的技术各有优缺点。我们将看到，关系资料库虽然很重要，但绝不是资料处理的终章。
## 本书涉及的领域