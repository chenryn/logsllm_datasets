techniques that ensure free-branch instructions never appear inside
any legitimate aligned instruction. This leaves the attacker with
the only option of exploiting existing ret and jmp*/call* in-
structions. To eliminate this possibility, we introduce a mechanism
that protects these potentially dangerous instructions by ensuring
that they can be executed only if the functions in which they reside
were executed from their entry points.
Consequently, an attacker can only execute entire functions from
the start to the end as opposed to running arbitrary code. This ef-
fectively de-generalizes the threat to a traditional return-to-lib(c)
attack, eliminating the advantages of achieving Turing complete-
ness without injecting any code in the target process.
Our approach uses a combination of techniques, namely align-
ment sleds, return address encryption, frame cookies and code rewrit-
ing. The rest of this section describes each technique in detail.
4.1 Free Branch Protection
The ﬁrst set of techniques aim to protect the aligned free-branch
instructions available in the binary. These include the actual ret
instructions at the end of each function and the jmp*/call* in-
structions that are sometimes present in the code.
Unfortunately, these instructions cannot be easily eliminated with-
out altering the application’s behavior. In addition, replacing them
with semantically equivalent pieces of code is likely not going to
solve the problem because the attacker could still use the replace-
ments to achieve the same functionality.
Therefore, we propose a simple solution inspired by existing
stack protection mechanisms (e.g., StackGuard [11]). The goal is
to instrument functions with short blocks of code to ensure that
aligned free-branch instructions can only be executed if the running
function has been entered from its proper entry point. In particu-
lar, we employ two complementary techniques: an efﬁcient return
address encryption to protect ret instructions, and a more sophis-
ticated cookie-based technique we additionally apply only to those
functions that contain jmp*/call* instructions. In Section 4.3,
we discuss the possibility that an attacker attempts to exploit these
protection blocks, and in Section 5.5 we show how we avoid this
threat in our prototype.
Finally, we prepend the code performing the checks with align-
ment sleds. Alignment sleds are special sequences of bytes by
which we enforce aligned execution of a set of critical instruc-
tions. In particular, we use this technique to prevent an attacker
from bypassing our free branch protection code by executing it in
an unaligned fashion.
4.1.1 Alignment Sleds
An alignment sled is a sufﬁciently-long sequence of bytes, en-
coding one or more instructions that have no effect on the status
of the execution. Its length is set to ensure that regardless of the
alignment prior to reaching the sled, the execution will eventually
land on the sled and execute it until the end. Even if an attacker
Figure 2: Application of an alignment sled to prevent executing
an unaligned ret (0xc3) instruction
jumps into the binary at an arbitrary point and executes a number
of unaligned instructions, when she reaches the sled, the execution
will be forced to realign with the actual code. Thus, it will never
reach any unintended opcode present in the instructions following
the sled.
The simplest way to implement an alignment sled is to use a
sequence of nop instructions (see Figure 2 for an example). The
number of nop instructions must be determined by taking into con-
sideration the maximum number of consecutive nop bytes (0x90)
that can tail a valid instruction. If we set the length to anything
less than that, an attacker could ﬁnd an unintended instruction that
encompasses the whole sled and any number of bytes from the fol-
lowing instruction, in which case the execution will continue in an
unaligned fashion. In the IA-32 architecture, the longest such se-
quence becomes possible when we have both an address displace-
ment and an immediate value entirely composed of 0x90 bytes [4],
which makes a total of 8 bytes. Additionally, we can have either a
ModR/M byte, a SIB byte or an opcode with the value 0x90 (but
only one of them at a time). As a result, we can safely set the
number of nop instructions in our sled to 9.
Note that the sled length calculation presented in this section is
an over-approximation: By also taking into account the bytes pre-
ceding the sled and which instructions they can possibly encode, it
is possible to automatically compute the required sled length case-
by-case.
Finally, we prepend the sled with a relative jump instruction to
skip over the sled bytes. Consequently, if the execution is already
aligned it will hit the jump and not incur the performance penalty
of executing the sequence of nop instructions.
4.1.2 Return Address Protection
This technique involves instrumenting entry points of the func-
tions that contain ret instructions with a short header that encrypts
the saved return address stored on the stack. Before ret instruc-
tions, we then insert a corresponding footer to restore the return
address to its original value. If an attacker jumps into a function
at an arbitrary position and eventually reaches our footer, the de-
cryption routine processes the unencrypted return address provided
by the attacker, computes an invalid value and the following ret
instruction attempts to transfer the execution ﬂow to an incorrect
address that the attacker cannot control. This technique is similar
to the random XOR canary implemented by StackGuard [11].
The encryption method we utilize is a simple exclusive-or of the
return address with a random key. Since this solution does not af-
fect the layout of the stack in any way, it does not require any fur-
ther modiﬁcations to the function code.
4.1.3 Frame Cookies
In order to prevent the attacker from using existing jmp*/call*
instructions, we need to adopt another protection mechanism. To
52ModR/M
Operand 1
Operand 2
0xc2
0xc3
0xca
0xcb
%eax, %ax, %al
%eax, %ax, %al
%ecx, %cx, %cl
%ecx, %cx, %cl
%edx, %dx, %dl
%ebx, %bx, %bl
%edx, %dx, %dl
%ebx, %bx, %bl
SIB
0xc2
0xc3
0xca
0xcb
Base
%edx
%ebx
%edx
%ebx
Scaled Index
%eax*8
%eax*8
%ecx*8
%ecx*8
Table 1: ModR/M and SIB values encoding ret opcodes
this end, we instrument entry points of the functions that contain
jmp*/call* instructions with an additional header to compute
and push a random cookie onto the stack. This cookie is an exclusive-
or of a random key generated at runtime and a per-function constant
generated at compile time. The constant is used for uniquely iden-
tifying the function and it does not need to be kept secret.
Then, we prepend all the jmp*/call* instructions with a val-
idation block which fetches the cookie, decrypts it, and compares
the result with the per-function constant. If the cookie is not found
or the values do not match, we invalidate the jump/call destination
causing the application to crash. Finally, in the function footer, we
insert a simple instruction to remove the cookie from the stack.
A signiﬁcant consequence of this technique is that it alters the
layout of the stack by storing an additional value. This requires us
to ﬁx the memory offsets of some of the instructions that access
the stack according to the location where we store the cookie (we
discuss the details of this issue in Section 5).
4.2 Code Rewriting
The second set of techniques we adopt in our approach focus on
removing any unaligned free-branch instructions.
In the IA-32 architecture, instructions consist of some or all of
the following ﬁelds: instruction preﬁxes, an opcode, a ModR/M
byte, a SIB (Scale-Index-Base) byte, an address displacement, and
ﬁnally, an immediate value. A ret instruction can be encoded with
any of the 0xc2, 0xc3, 0xca or 0xcb bytes, and, as such, can be
part of any of the instruction ﬁelds (excluding the preﬁxes). On the
other hand, jmp*/call* instructions are encoded by two-byte
opcodes: an 0xff followed by an ModR/M byte carrying certain
three-bit sequences. Hence, in addition to appearing inside a single
instruction, they can also be obtained by a combination of two bytes
coming from two consecutive instructions.
In this section, we discuss the various cases and describe the code
rewriting techniques we use to eliminate all unintended free-branch
opcodes.
4.2.1 Register Reallocation
The ModR/M and the SIB bytes are used for encoding the ad-
dressing mode and operands of an instruction. The use of certain
registers as operands cause either the ModR/M or the SIB byte to
be set to a value that corresponds to a ret opcode. The possi-
ble undesired encodings of these bytes are shown in Table 1. For
instance, an instruction that speciﬁes %eax as the source operand
and %ebx as the destination, such as movl %eax, %ebx, as-
signs the value 0xc3 to the ModR/M byte. Similarly, using %edx
as the base and (%ecx * 8) as the scaled index, the instruction
addl $0x2a,(%edx,%ecx,8) contains 0xca in its SIB byte.
In order to eliminate the unintended ret opcodes that result
from such circumstances, we must avoid all of the undesired reg-
ister pairings listed in Table 1. We achieve this by manipulating
the register allocation performed during compilation to ensure that
those pairs of registers never appear together in a generated instruc-
tion. When we detect such an instruction, we can perform the com-
piler’s register allocation stage again, this time enforcing a differ-
ent register assignment. As an alternative, we can perform a local
reallocation by temporarily swapping the contents of the original
operand with a new register, and then rewriting the instruction with
this new register as its operand. In this way, we can bring forth an
acceptable register pairing for the same instruction.
Instruction Transformations
Finally, in some cases, the ModR/M byte could be used to spec-
ify an opcode extension and a single register operand. Sometimes,
it is possible to rewrite these instructions using the same techniques
described above to replace the register operand with a different one.
However, ﬂoating point instructions can use implicit operands that
cannot be substituted with others (e.g, fld %st(2)). Since all
these instructions can have the ret opcode only in their second
byte, we instead prepend them with an alignment sled. This leaves
to the attacker only one byte (the opcode that speciﬁes the FPU in-
struction) before the unaligned ret, and it is therefore impossible
to use this byte to create any gadget.
4.2.2
ret bytes appear in opcodes encoding movnti (0x0f 0xc3)
and bswap (0x0f 0xc8+) in-
structions. In the ﬁrst case, movnti acts like a regular mov oper-
ation except that it uses a non-temporal hint to reduce cache pol-
lution. Thus, we can safely replace it with a regular mov without
any signiﬁcant consequence. For the second, the opcode is deter-
mined according to the operand register and can encode a ret byte
when certain registers are speciﬁed as the operand; therefore, as
described in the previous section, we can perform a register real-
location to choose a different operand and obtain a safe bswap
opcode.
4.2.3
Jump and call instructions may contain free-branch opcodes when
using immediate values to specify their destinations. For instance,
jmp .+0xc8 is encoded as “0xe9 0xc3 0x00 0x00 0x00”.
A free-branch opcode can appear at any of the four bytes con-
stituting the jump/call target. If the opcode is the least signiﬁcant
byte, it is sufﬁcient to append the forward jump/call with a single
nop instruction (or prepend it if it is a backwards jump/call) in or-
der to adjust the relative distance between the instruction and its
destination:
Jump Offset Adjustments
jmp .+0xc8 ⇒ jmp .+0xc9
nop
However, when the opcode is at a different byte position, the
number of nop instructions we need to insert increase drastically
(256 for the second, 64K for the third and 16M for the last byte).
Fortunately, it is highly uncommon to have a free-branch opcode
in one of the most signiﬁcant bytes. For example, a jump offset
encoded by “0x00 0x00 0xc3 0x00” indicates a 12MB for-
ward jump. Considering the fact that jump instructions are ordinar-
ily used for local control ﬂow transitions inside a function, a 12MB
offset would be infeasible in practice. Even if we were to come
across such an offset, it is still possible to relocate the functions or
code chunks addressed by the instruction to remove the opcodes.
4.2.4
Immediate and Displacement Reconstructions
Several arithmetic, logic and comparison operations can take im-
mediate values as an operand, which may contain free-branch in-
struction opcodes. We can remove these by substituting the instruc-
tion with a sequence of different instructions that construct the im-
mediate value in steps while carrying the same semantics. The fol-
53lowing examples demonstrate the reconstruction process, assuming
that %ebx is free or has been saved beforehand:
addl $0xc2, %eax ⇒ addl $0xc1, %eax
inc %eax
xorb $0xca, %al ⇒ movb $0xc9, %bl
incb %bl
xorb %bl, %al
Instructions that perform memory accesses can also contain free-
branch instruction opcodes in the displacement values they specify
(e.g., movb %al, -0x36(%ebp) represented as “0x88 0x45
0xca”). In such cases, we need to substitute the instruction with a
semantically equivalent instruction sequence that uses an adjusted
displacement value to avoid the undesired bytes. We achieve this by
setting the displacement to a safe value and then compensating for
our changes by temporarily adjusting the value in the base register.
For example, we can perform a reconstruction such as:
movb $0xal, -0x36(%ebp) ⇒ incl %ebp
movb %al, -0x37(%ebp)
decl %ebp
4.2.5 Inter-Instruction Barriers
Unintended jmp*/call* opcodes can result from the combi-
nation of two consecutive instructions. This happens when the last
byte of an instruction is 0xff and the ﬁrst byte of the following
instruction encodes a suitable opcode extension. We can remove
these unintended jmp*/call* opcodes by inserting a barrier be-
tween two such instructions, effectively separating them and de-
stroying the unintended opcode. For the barrier, the trivial choice
of a nop instruction is not suitable since an 0xff followed by a
0x90 still encodes an indirect call. Thus, we have to choose a safe
nop-like alternative, such as “movl %eax, %eax”.
4.3 Limitations of the Approach
By applying the techniques presented in this section, it is possi-
ble to remove all unaligned free-branch instructions from a binary,
and to protect the aligned ones from being misused by an attacker.
However, since our protection mechanism does not remove the free
branches, but prepends a short piece of code to protect them, the
result of the compilation will still contain some gadgets.
In fact, an attacker may skip the alignment sled by directly jump-
ing into the return address or indirect jump/call protection blocks.
This may result in executing a useful instruction sequence (intended
or unintended) which terminates at the free-branch instruction we
intend to protect.
However, since our approach only requires inserting two very
short pieces of code, the number of possible gadgets that can be
built is very limited and the gadget sizes are restricted to few in-
structions. By keeping this issue in mind, it is, therefore, possi-
ble to speciﬁcally craft the return address and indirect jump/call
protection blocks to make sure they do not contain any convenient
gadgets.
In particular, we discuss the techniques we used in our prototype
implementation and the number and type of gadgets that are left in
the applications compiled by our tool in Section 5.5.
5.
IMPLEMENTATION
Our implementation efforts primarily focus on creating a fully-
automated system that would not require any modiﬁcations to the
program’s source code or to the existing compilation tools. Un-
fortunately, system-wide libraries, which are the primary targets of
ROP attacks, often rely on hand-tuned assembly routines to per-
form low-level tasks. This makes a pure compiler-based solution
unable to intercept part of the ﬁnal code. Therefore, we imple-
mented our prototype in two separate components: an assembly
code pre-processor designed to work as a wrapper for the GNU
Assembler (gas), and a simple binary analyzer responsible
for gathering some information that is not available in the assem-
bly source code.
In this section, we describe G-Free, a prototype system we de-
veloped based on the techniques presented in Section 4, and we
discuss some of the issues we encountered while compiling glibc
using our prototype.
5.1 Assembly Code Pre-Processor & Binary
Analyzer
The assembly code pre-processor intercepts the assembly code
generated by cc1 (the GNU C compiler included in the GNU
Compiler Collection) or coming directly from an assembly
language source ﬁle. It then performs the required modiﬁcations to
remove all the possible gadgets, and ﬁnally passes the control to the
actual gas assembler. We must stress that in this implementation
we modify neither the compiler nor the assembler; both are com-
pletely oblivious to the existence of our pre-processing stage. We
only replace the gas executable with a small wrapper responsible
for invoking our pre-processor before executing the assembler.
Our system successfully handles assembly routines written using
non-standard programming practices. It supports position indepen-
dent code (PIC) and compiler optimizations, including all of the
GCC standard optimization levels (in fact, glibc does not com-
pile if GCC optimizations are disabled).
There is one signiﬁcant implication of directly working with as-
sembly code: Our pre-processor is not exposed to the numeric val-
ues of immediate operands and memory displacements since these
are often represented by symbolic values until linkage. Thus, it is
not possible for us to identify all of the instructions that contain un-
intended free-branch opcodes just by looking at the assembly code.
In order to address this issue, we use a two-step compilation ap-
proach. First, our system compiles a given program without doing
any modiﬁcations to the original code. During this compilation, our
pre-processor tags each of the instructions that contain immediate
values or displacements with unique symbols. This information is
then exported in the ﬁnal executable’s symbol table. In a second
step, we use a binary analyzer to read the symbol table of the exe-
cutable and check whether any of the instructions pointed to by our
tagged symbols needs to be rewritten because it contains unaligned
free-branch instructions. This analysis produces a log of the tags
corresponding to the instructions we need to modify. This log is