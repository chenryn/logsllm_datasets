ﬁngerprint’s attributes, countermeasures may generate
a combination of values that could not naturally appear
In such cases, we say that a browser
in the wild.
ﬁngerprint is inconsistent, or altered.
For example,
the information contained in the attribute user agent
(UA) reveals information about the user browser and
OS. The following UA, Mozilla/5.0 (X11; Linux
x86 64) AppleWebKit/537.36 (KHTML, like
USENIX Association
27th USENIX Security Symposium    137
Table 2: Altered attributes per countermeasure
Attribute
Languages HTTP
Encoding
Accept
User agents
Plugins
MimeTypes
Fonts JS
Screen
appName
Timezone
Language JS
Platform
Oscpu
hardwareConcurrency
media devices
Canvas block
Canvas blur
WebRTC
WebGL
Audio
BuildID
Battery
Sensors
FP-BLOCK
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
RAS
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
FIREFOX
BRAVE
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
version 57.0.2987.110;
AppleWebKit version 537.36;
Gecko) Chrome /57.0.2987.110 Safari/537.36,
reveals different information about the device:
• The browser family as well as its version: Chrome
• The browser engine used to display web pages:
• The OS family: Linux.
The OS and browser family, reﬂected by the UA,
are expected to be consistent with attributes, such as
navigator.platform, which represents the platform
on which the browser is running, namely Linux x86 64
on Linux, Win32 for Windows and MacIntel on macOS.
Beyond altering the raw value of ﬁngerprint attributes,
another source of inconsistency relates to the manipula-
tion of native JavaScript functions to fool the ﬁngerprint-
ing process. For example, one way to implement canvas
poisoners is to override the native function toDataURL,
used to generate a Base64 string representation of a can-
vas, which may however be detected by dumping the in-
ternal representation of the function.
Privacy Implications. Nikiforakis et al. [16] were the
ﬁrst to identify such consistency constraints and to create
a test suite to detect inconsistencies introduced by user
agent spoofers. They claimed that, due to the presence
of inconsistencies, browsers with user agent spoofers be-
come more distinguishable than browsers without. Thus,
the presence of a user agent spoofer may be used by
browser ﬁngerprinters to improve tracking accuracy.
In this paper, we go beyond the speciﬁc case of user
agent spoofers and study if we can detect a wider range of
state-of-the-art ﬁngerprinting countermeasures. More-
over, we also challenge the claim that being more dis-
tinguishable necessarily makes tracking more accurate.
This motivation is strengthened by recent ﬁndings from
inspecting the code of a commercial ﬁngerprinting script
used by AUGUR.1 We discovered that this script com-
putes an attribute called spoofed, which is the result
of multiple tests to evaluate the consistency between
the user agent, the platform, navigator.oscpu,
navigator.productSub, as well as the value returned
by eval.toString.length used to detect a browser.
Moreover, the code also tests for the presence of touch
support on devices that claim to be mobiles. Similar
tests are also present in the widely used open source li-
brary FINGERPRINTJS2 [21]. While we cannot know
the motivations of ﬁngerprinters when it comes to de-
tecting browsers with countermeasures—i.e., this could
be used to identify bots, to block fraudulent activities,
or to apply additional tracking heuristics—we argue that
countermeasures should avoid revealing their presence as
this can be used to better target the browser. Thus, we
consider it necessary to evaluate the privacy implications
of using ﬁngerprinting countermeasures.
3
Investigating Fingerprint Inconsistencies
Based on our study of existing browser ﬁngerprinting
countermeasures published in the literature, we orga-
nized our test suite to detect ﬁngerprint inconsistencies
along 4 distinct components. The list of components is
ordered by the increasing complexity required to detect
an inconsistency. In particular, the ﬁrst two components
aim at detecting inconsistencies at the OS and browser
levels, respectively. The third one focuses on detecting
inconsistencies at the device level. Finally, the fourth
component aims at revealing canvas poisoning tech-
niques. Each component focuses on detecting speciﬁc in-
consistencies that could be introduced by a countermea-
sure. While some of the tests we integrate, such as check-
ing the values of both user agents or browser features,
have already been proposed by Nikiforakis et al. [16], we
also propose new tests to strengthen our capacity to de-
tect inconsistencies. Figure 1 depicts the 4 components
of our inconsistency test suite.
3.1 Uncovering OS Inconsistencies
Although checking the browser’s identity is straightfor-
ward for a browser ﬁngerprinting algorithm, verifying
the host OS is more challenging because of the sandbox
mechanisms used by the script engines. In this section,
we present the heuristics applied to check a ﬁngerprinted
OS attribute.
138    27th USENIX Security Symposium
USENIX Association
Table 3: Mapping between common OS and platform
values
OS
Platforms
Linux i686, Linux x86 64
Linux
Windows 10 Win32, Win64
iOS
Android
macOS
FreeBSD
iPhone, iPad
Linux armv71, Linux i686
MacIntel
FreeBSD amd64, FreeBSD i386
Table 4: Mapping between OS and substrings in WebGL
renderer/vendor attributes for common OSes
Vendor
Renderer
OS
Figure 1: Overview of the inconsistency test suite
User Agent. We start by checking the user agent con-
sistency [16], as it is a key attribute to retrieve the OS
and browser of a user. The user agent is available
both from the client side, through the navigator object
(navigator.userAgent), and from the server side, as
an HTTP header (User-Agent). The ﬁrst heuristic we
apply checks the equality of these two values, as naive
browser ﬁngerprinting countermeasures, such as basic
user agent spoofers, tend to only alter the HTTP header.
The difference between the two user agent attributes re-
ﬂects a coarse-grained inconsistency that can be due to
the OS and/or the browser. While extracting the OS and
the browser substrings can help to reveal the source of the
inconsistency, the similarity of each substring does not
necessarily guarantee the OS and the browser values are
true, as both might be spoofed. Therefore, we extract and
store the OS, browser and version substrings as internal
variables OSref, browserRef, browserVersionRef
for further investigation.
Navigator platform.
The value of navigator.
platform reﬂects the platform on which the browser is
running. This attribute is expected to be consistent with
the variable OSref extracted in the ﬁrst step [16]. Never-
theless, consistent does not mean equal as, for example,
the user agent of a 32-bits Windows will contain the sub-
string WOW64, which stands for Windows on Windows 64-
bits, while the attribute navigator.platform will re-
port the value Win32. Table 3 therefore maps OSref and
possible values of navigator.platform for the most
commonly used OSes.
WebGL. WebGL is a JavaScript API that extends the
HTML 5 canvas API to render 3D objects from the
browser.
In particular, we propose a new test that
focuses on two WebGL attributes related to the OS:
Windows
macOS
Linux
Android
ANGLE
OpenGL, Iris
Mesa, Gallium
Adreno, Mali,
PowerVR
Microsoft, Google Inc
Intel, ATI
Intel, VMWare, X.Org
Qualcomm, ARM,
Imagination
Windows Phone Qualcomm, Adreno Microsoft
iOS
Apple, PowerVR
Apple, Imagination
Interestingly,
renderer and vendor. The ﬁrst attribute reports the
name of the GPU, for example ANGLE (VMware SVGA
3D Direct3D11 vs 4 0 ps 4 0).
the
substring VMware indicates that the browser is executed
in a virtual machine. Also, the ANGLE substring stands
for Almost Native Graphics Layer Engine, which has
been designed to bring OpenGL compatibility to Win-
dows devices. The second WebGL attribute (vendor) is
expected to provide the name of the GPU vendor, whose
value actually depends on the OS. On a mobile device,
the attribute vendor can report the string Qualcomm,
which corresponds to the vendor of the mobile chip,
while values like Microsoft are returned for Internet
Explorer on Windows, or Google Inc for a CHROME
browser running on a Windows machine. We therefore
summarize the mapping for the attributes renderer and
vendor in Table 4.
Browser plugins. Plugins are external components that
add new features to the browser. When querying for the
list of plugins via the navigator.plugins object, the
browser returns an array of plugins containing detailed
information, such as their ﬁlename and the associated ex-
tension, which reveals some indication of the OS. On
Windows, plugin ﬁle extensions are .dll, on macOS
they are .plugin or .bundle and for Linux based OS
extensions are .so. Thus, we propose a test that ensures
that OSref is consistent with its associated plugin ﬁle-
name extensions. Moreover, we also consider constraints
imposed by some systems, such as mobile browsers that
do not support plugins. Thus, reporting plugins on mo-
bile devices is also considered as an inconsistency.
Media queries. Media query is a feature included in
CSS 3 that applies different style properties depending
on speciﬁc conditions. The most common use case is
USENIX Association
27th USENIX Security Symposium    139
the implementation of responsive web design, which ad-
justs the stylesheet depending on the size of the device,
so that users have a different interface depending on
whether they are using a smartphone or a computer. In
this step, we consider a set of media queries provided
by the FIREFOX browser to adapt the content depending
on the value of desktop themes or Windows OS versions.
Indeed, it is possible to detect the Mac graphite theme us-
ing -moz-mac-graphite-theme media query [19]. It
is also possible to test speciﬁc themes present on Win-
dows by using -moz-windows-theme. However, in the
case of Windows, there is a more precise way to detect
its presence, and even its version. It is also possible to
use the -moz-os-version media query to detect if a
browser runs on Windows XP, Vista, 7, 8 or 10. Thus,
it is possible to detect some Mac users, as well as Win-
dows users, when they are using FIREFOX. Moreover,
since these media queries are only available from FIRE-
FOX, if one of the previous media queries is matched,
then it likely means that the real browser is FIREFOX.
Fonts. Saito et al. [17] demonstrated that fonts may be
dependent on the OS. Thus, if a user claims to be on a
given OS A, but do not list any font linked to this OS A
and, at the same time, displays many fonts from another
OS B, we may assume that OS A is not its real OS.
This ﬁrst component in FP-SCANNER aims to check
if the OS declared in the user agent is the device’s real
OS. In the next component, we extend our veriﬁcation
process by checking if the browser and the associated
version declared by the user agent have been altered.
3.2 Uncovering Browser Inconsistencies
This component requires the extraction of the variables
browserRef and browserVersionRef from the user
agent to further investigate their consistency.
Error
In JavaScript, Error objects are thrown when
a runtime error occurs. There exist 7 different types
of errors for client-side exceptions, which depend on
the problem that occurred. However, for a given er-
ror, such as a stack overﬂow, not all the browsers will
throw the same type of error. In the case of a stack over-
ﬂow, FIREFOX throws an InternalError and CHROME
throws a RangeError. Besides the type of errors, de-
pending on the browser, error instances may also con-
tain different properties. While two of them—message
and name—are standards, others such as description,
lineNumber or toSource are not supported by all
browsers. Even for properties such as message and
name, which are implemented in all major browsers, their
values may differ for a given error.
For example, executing null[0] on CHROME will gen-
erate the following error message ”Cannot read property
’0’ of null”, while FIREFOX generates ”null has no prop-
erties”, and SAFARI ”null is not an object (evaluating
’null[0]’)”.
Function’s internal representation.
It is possible to
obtain a string representation of any object or function
in JavaScript by using the toString method. How-
ever, such representations—e.g., eval.toString()—
may differ depending on the browser, with a length
that characterizes it. FIREFOX and SAFARI return the
same string, with a length of 37 characters, while on
CHROME it has a length of 33 characters, and 39 on
INTERNET EXPLORER. Thus, we are able to distin-
guish most major desktop browsers, except for FIRE-
FOX and SAFARI. Then, we consider the property
navigator.productSub, which returns the build num-
ber of the current browser. On SAFARI, CHROME and
OPERA, it always returns the string 20030107 and, com-
bined with eval.toString().length, it can therefore
be used to distinguish FIREFOX from SAFARI.
Navigator object. Navigator is a built-in object that
represents the state and the identity of the browser. Since
it characterizes the browser,
its prototype differs de-
pending not only on the browser’s family, but also the
browser’s version. These differences come from the
availability of some browser-speciﬁc features, but also
from two other reasons:
1. The order of navigator is not speciﬁed and differs
across browsers;
2. For a given feature, different browsers may name it
differently. For example, if we consider the feature
getUserMedia, it is available as mozGetUserMedia
on FIREFOX and webkitGetUserMedia on a
Webkit-based browser.
Moreover, as navigator properties play an important
role in browser ﬁngerprinting, our test suite detects if
they have been overridden by looking at their internal
string representation. In the case of a genuine ﬁngerprint
whose attributes have not been overridden in JavaScript,
it should contain the substring native code. However,
if a property has been overridden, it will return the code
of the overridden function.
Browser features. Browsers are complex software that
evolve at a fast pace by adding new features, some
being speciﬁc to a browser. By observing the avail-
ability of speciﬁc features, it is possible to detect if a
browser is the one it claims to be [16]. Since for a
given browser, features evolve depending on the version,
we can also check if the features available are consis-
tent with browserVersionRef. Otherwise, this may
indicate that the browser version displayed in the user
agent has been manipulated.
140    27th USENIX Security Symposium
USENIX Association
(a) Canvas ﬁngerprint with no countermeasure
(b) Canvas ﬁngerprint with a countermeasure
Figure 2: (a) a genuine canvas ﬁngerprint without any
countermeasures installed in the browser and (b) a can-
vas ﬁngerprint altered by the Canvas Defender counter-
measure that applies a uniform noise to all the pixels in
the canvas.
3.3 Uncovering Device Inconsistencies
This section aims at detecting if the device belongs to the
class of devices it claims to be—i.e., mobile or computer.
Browser events. Some events are unlikely to happen,
such as touch-related events (touchstart, touchmove)
on a desktop computer. On the opposite, mouse-related
events (onclick, onmousemove) may not happen on a
smartphone. Therefore, the availability of an event may
reveal the real nature of a device.
Browser sensors. Like events, some sensors may have
different outputs depending on the nature of devices. For
example, the accelerometer, which is generally assumed
to only be available on mobile devices, can be retrieved
from a browser without requesting any authorization.
The value of the acceleration will always slightly devi-
ate from 0 for a real mobile device, even when lying on
a table.