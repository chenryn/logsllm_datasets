## 实时数据交换平台 - BottledWater-pg with confluent        
### 作者                                   
digoal                                    
### 日期                                  
2016-12-05                                     
### 标签                                  
PostgreSQL , Bottled Water , Kafka , Confluent , IoT                                                                             
----                                  
## 背景           
想必大家都在图书馆借过书，小时候有好看的书也会在小伙伴之间传阅。   
借书和数据泵有点类似，一份数据通过数据泵实时的分享给订阅者。   
例如在IoT的场景中，有流式分析的需求，也有存储历史数据的需求，同时还有数据挖掘的需求，搜索引擎可能也需要同一份数据，还有一些业务可能也要用到同一份数据。   
但是如果把数据统统放到一个地方，这么多的业务，它们有的要求实时处理，有的要求批量处理，有的可能需要实时的更新数据，有的可能要对大数据进行分析。   
显然一个产品可能无法满足这么多的需求。   
就好比数据库就分了关系数据库，NOSQL，OLTP场景，OLAP场景一样。   也是因为一个产品无法满足所有的业务需求。    
在企业中通常是借助数据冗余来解决各类场景的需求。     
那么如何才能够更好的分享数据，保证数据的一致性，提高分享的实时性呢？   
## confluent platform
http://docs.confluent.io/3.1.0/platform.html    
![pic](20161205_02_pic_001.png)      
confluent 是一个实时的数据中转服务，来自各个平台的数据可以使用confluent进行流转，达到分享和交换数据的目的。    
例如来自物联网传感器的数据，来自数据库的数据，来自HTTP，移动APP的数据，来自应用日志的数据，来自一些事件触发的数据 等等。  
confluent需要依赖一些基本的组件，核心组件如kafka.    
用户可以自定义消息的生产者和消费者，在confluent提供的平台上交换数据。   
![pic](20161205_02_pic_002.png)   
![pic](20161205_02_pic_004.png)    
![pic](20161205_02_pic_005.jpg)  
## BottledWater-pg
![pic](20161205_02_pic_003.png)   
bottledwater-pg是confluent平台的一种消息生产者，针对PostgreSQL数据库，即将PostgreSQL数据库的数据写入confluent Kafka，从而实时的分享给消息订阅者。   
支持PostgreSQL 9.4以及以上版本，支持全量快照，以及持续的增量数据写入Kafka。   
bottledwater-pg使用PostgreSQL快照技术，可以读取一致性的快照写入Kafka。使用数据库logical decode技术，从PostgreSQL的WAL日志中，解析为ROW数据写入Kafka。    
在Kafka中，每个topic代表一张数据库的表。   
数据在使用decode从WAL取出后，写入Kafka之前，使用Avro将数据ROW打包成JSON, or Protobuf, or Thrift, or any number of formats，再写入Kafka。   
Avro支持的数据类型比较丰富，可以很好的支撑PostgreSQL丰富的数据类型。  
为什么使用Avro请参考  
http://radar.oreilly.com/2014/11/the-problem-of-managing-schemas.html   
## BottledWater-pg依赖环境  
BottledWater-pg是PG的一个插件，它的目的是解析WAL，同时使用Avro封装为json/Protobuf/Thrift/其他formats。  并写入Kafka。  
因此它依赖这些库或软件   
```
PostgreSQL 9.4+ development libraries (PGXS and libpq). (Homebrew: brew install postgresql; Ubuntu: sudo apt-get install postgresql-server-dev-9.5 libpq-dev)
libsnappy, a dependency of Avro. (Homebrew: brew install snappy; Ubuntu: sudo apt-get install libsnappy-dev)
avro-c (1.8.0 or later), the C implementation of Avro. (Homebrew: brew install avro-c; others: build from source)
Jansson, a JSON parser. (Homebrew: brew install jansson; Ubuntu: sudo apt-get install libjansson-dev)
libcurl, a HTTP client. (Homebrew: brew install curl; Ubuntu: sudo apt-get install libcurl4-openssl-dev)
librdkafka (0.9.1 or later), a Kafka client. (Ubuntu universe: sudo apt-get install librdkafka-dev, but see known gotchas; others: build from source)
```
## 部署BottledWater-pg
### gcc,cmake
最好部署较新版本的，否则可能会有编译问题。   
```
gcc 6.2.0
python 2.7.12
cmake 3.6.3
vi /etc/ld.so.conf
/home/digoal/gcc6.2.0/lib
/home/digoal/gcc6.2.0/lib64
/home/digoal/python2.7.12/lib
ldconfig
export LD_LIBRARY_PATH=/home/digoal/gcc6.2.0/lib:/home/digoal/gcc6.2.0/lib64:/home/digoal/python2.7.12/lib:$LD_LIBRARY_PATH
export PATH=/home/digoal/gcc6.2.0/bin:/home/digoal/python2.7.12/bin:/home/digoal/cmake3.6.3/bin:$PGHOME/bin:$PATH:.
```
### snappy
可选，一种比较高效的压缩和解压缩库。   
由于avro还支持xz，可不安装snappy    
```
/* 
snappy
http://google.github.io/snappy/
wget https://github.com/google/snappy/archive/1.1.3.tar.gz
tar -zxvf 1.1.3.tar.gz
cd snappy-1.1.3
yum install -y libtool gcc-c++
./autogen.sh
./configure --prefix=/home/digoal/snappy_home 
make
make install
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'
*/
```
### libjansson (libjansson >=2.3)
json parser，必须安装，建议测试时安装在默认目录，否则可能遇到编译问题，或者设置rpath。   
```
http://www.digip.org/jansson/
wget http://www.digip.org/jansson/releases/jansson-2.9.tar.bz2
tar -jxvf jansson-2.9.tar.bz2
cd jansson-2.9
./configure --prefix=/home/digoal/jansson
make
make install
   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the 'LD_RUN_PATH' environment variable
     during linking
   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to '/etc/ld.so.conf'
export PKG_CONFIG_PATH=/home/digoal/jansson/lib/pkgconfig:$PKG_CONFIG_PATH
pkg-config --cflags --libs jansson
-I/home/digoal/jansson/include  -L/home/digoal/jansson//home/digoal/jansson/lib -ljansson
```
建议测试时安装在默认路径中，如下。  
```
./configure 
make
make install
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
```
### liblzma
```
yum install -y xz-*
```
### boost
可以不装，如果你要安装Avro的doc时才需要安装boost。  
```
/*
boost
http://www.boost.org/
https://sourceforge.net/projects/boost/files/boost/1.62.0/
wget http://downloads.sourceforge.net/project/boost/boost/1.62.0/boost_1_62_0.tar.bz2?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost%2F1.62.0%2F&ts=1480929211&use_mirror=ncu
tar -jxvf boost_1_62_0.tar.bz2
cd boost_1_62_0/libs/regex/build
如果要使用静态库，请执行make -fgcc.mak
如果要使用静态库，请执行make -fgcc-shared.mak
ll gcc
drwxr-xr-x 2 digoal users 4.0K Dec  5 17:18 boost_regex-gcc-1_53
drwxr-xr-x 2 digoal users 4.0K Dec  5 17:17 boost_regex-gcc-1_53_shared
drwxr-xr-x 2 digoal users 4.0K Dec  5 17:19 boost_regex-gcc-d-1_53
drwxr-xr-x 2 digoal users 4.0K Dec  5 17:18 boost_regex-gcc-d-1_53_shared
-rw-r--r-- 1 digoal users 2.6M Dec  5 17:18 libboost_regex-gcc-1_53.a
-rwxr-xr-x 1 digoal users 1.3M Dec  5 17:17 libboost_regex-gcc-1_53.so
-rw-r--r-- 1 digoal users  17M Dec  5 17:19 libboost_regex-gcc-d-1_53.a
-rwxr-xr-x 1 digoal users 7.4M Dec  5 17:18 libboost_regex-gcc-d-1_53.so
libboost_regex-gcc-1_53.a , 这是release版的静态库
libboost_regex-gcc-1_53.so , 这是release版的动态库（共享库）
libboost_regex-gcc-d-1_53.a , 这是debug版的静态库
libboost_regex-gcc-d-1_53.so , 这里debug版的动态库（共享库）
*/
```
### avro (1.8.0 or later)
http://avro.apache.org/  
http://www.apache.org/dyn/closer.cgi/avro/  
```
wget http://mirrors.hust.edu.cn/apache/avro/avro-1.8.1/avro-src-1.8.1.tar.gz
tar -zxvf avro-src-1.8.1.tar.gz
cd avro-src-1.8.1/lang/c
mkdir build
cd build
/*
  cmake .. -DCMAKE_INSTALL_PREFIX=/home/digoal/avro -DCMAKE_BUILD_TYPE=Release -DSNAPPY_LIBRARIES=/home/digoal/snappy_home/lib -DSNAPPY_INCLUDE_DIR=/home/digoal/snappy_home/include 
*/