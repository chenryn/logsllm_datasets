returns the results,or an error on failure
$adminPort-"3500"；//Varnish服务器管理端口
1099511627776)
else
f
f
$socket = socket_create（AF_INET,
global $adminHost,$adminPort;
(@socket_connect($socket,$adminHost,
第1篇weo应用篇
Array("sec"
www.Linuxidc .com
"usec"
return round($bytes /1099511627776)."TB";
returm "Unable to connect:".socket_strerror(socket_last_error())，"\n"
return $data;
socket_close($socket);
$data.=$buffer;
socket_recv($socket，$buffer,65536，0);
socket_write($socket,
if (!$socket)
die("Unable to set socket timeout")
"127.0.0.1"；//Varnish服务器的IP地址
die（"Unable to open socket to".$server.":.$port."\n"）;
*5*
#这里清除/zm/a/目录下所有以字母d开头的缓存页面
"usec"
$command
(((=O
SOCK_STREAM,
"\n"）;
$adminPort)）{
SO_RCVTIMEO,Array("sec"=>“5"
（（d）uqooxd
SOL_SOCKET,
SO_SNDTIMEO
PDG
---
## Page 77
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
2>
 ouoa
else{
$stats =pollServer("stats");
echo "Statistics since last reset:;
echo "Unable to get stats, error was:\""，$stats;
//echo**
echo
echo ""
echo ""
unset($stats,
foreach ($statsArray
array_shift($statsArray):
else{
else if （$bytes>1024）{
else if （$bytes >1048576){
else if （Sbytes > 1073741824){
byteReduce($statistics["bytes
."headers,
body bytes"])
received"])
over
$statsArray =explode（"\n",$stats）;
stats=
used
"
www.Linuxidc.com
@$statistics[$statVal[1]] = $statVal[0];
@$statVal=explode（"|",
return $bytes.*B";
return round（$bytes/1024）."KB";
return round（$bytes/1048576)."MB";
return round($bytes/ 1073741824)."GB*;
.$atatistics["client requests received*]
round(($statistics["Cache hits"]/ $statistics["Client requests
$statistics["client conneccions
$statsArray,$stat,$statVal);
array();
byteReduce($statistics[*bytes allocated*])
100)
as $stat）
served（"
"gof requests served from cache";
"200"）{
{2,}/"
byteReduce(Sstatistics["Total header bytes"]
Sstat);
allocated"]
$stats)
$stats)
accepted"]
“usage)"；
."requests";
($statistics[*bytes
+$statistics["Tota]
“clients served
outof
"content）"
5
PDG
---
## Page 78
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
通过调整Proc文件系统达到优化Linux性能的目的。
的同时动态更新内核配置，而这些内核参数是通过LinuxProc文件系统存在的。因此，可以
2.6.1优化Linux内核参数
Varnish服务器进行性能优化，从而最大限度地发挥Varnish的性能优势。
很大关系。在安装配置完Varnish后，还必须从操作系统和Varnish配置参数两个方面对
2.6
不错的，命中率很高。
的HTTP头信息长度和缓存内容的正文长度。根据这个结果判断，Varnish的缓存效果还是很
统计结果类似于如下的一个输出：
58
口net.core.rmem_max：指定接收套接字缓冲区大小的最大值，单位是字节。
口net.ipv4.ip_local_port_range：用来指定外部连接的端口范围，默认是32768到61000，
上面每个参数的含义如下：
net.ipv4.tcp_syn_retries = 2
net.core.wmem_max=16777216
net.core.rmem_max=16777216
net.ipv4.ip_local_port_range = 1024 65536
以下参数是官方给出的一个配置：
内核参数是用户和系统内核之间交互的一个接口，通过这个接口，用户可以在系统运行
Varmish是否能稳定、快速地运行，与Linux本身的优化及Varnish自身参数的设置有
在这个输出中，清晰地列出了浏览器的请求总数、缓存命中率、缓存区中所有缓存内容
口
63543 clients served over 584435 reguests
Statistics since last reset:
将此PHP程序放到Varnish服务器上，即可统计出当前Varnish的命中率及缓存状态。
这里设置为1024到65536。
net
net
net
net
Varnish优化
.ipv4.tcp_syncookies =1
.ipv4.tcp_no_metrics_save=1
.ipv4.tcp_fin_timeout=30
98 of requests served from cache
.ipv4.tcp_
第篇
www.Linuxidc.com
WUDN用点
65536
---
## Page 79
inux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
有效的实现资源限制的方式。
实际的应用环境要比这种假设复杂得多。这时，ulimit就派上用场了。ulimit是一种简单并且
存资源就会受到巨大的挑战。如果没有内存方面的限制，势必造成系统资源利用的混乱。而
的情况下，这10个用户同时打开了500个文档，而每个文档的大小为10MB，这时系统的内
2.6.2优化系统资源
内存最大值。
示为TCPsocket预留的用于发送缓存的默认的内存值，max表示用于TCPsocket发送缓存的
的内存最大值。
表示为TCPsocket预留的用于接收缓存的默认的内存值，max表示用于TCPsocket接收缓存
假设有这样一种情况，一台Linux主机上同时登录了10个用户，在没有限制系统资源
口net.ipv4.tcp_syn_retries：此参数表示在内核放弃建立连接之前发送SYN包的数量。
口net.ipv4.tcp_synack_retries：这个参数用于设置内核放弃连接之前发送SYN+ACK包
口net.ipv4.tcp_max_orphans：表示系统中最多有多少TCP套接字不被关联到任何一个用
口net.core.netdev_max_backlog：该参数表示当在每个网络接口接收数据包的速率比内
口net.ipv4.tcp_fin_timeout：此参数用于减少处于FIN-WAIT-2连接状态的时间，使系统
对于tcp_wmem，min表示为TCPsocket预留的用于发送缓存的内存最小值，default表
[root@varnish-server -]#sysctl-p
将以上内容添加到/etc/sysctl.conf文件中，然后执行如下命令，使设置生效。
的数量。
长度为262144，以容纳更多的等待连接。
口net.ipv4.tcp_max_syn_backlog：表示SYN队列的长度，预设为1024，这里设置队列
对于tcp_rmem，min表示为TCPsocket预留的用于接收缓存的最小内存数量，default
区的，包含3个整数值，分别是min、default、max。
口net.ipv4.tcp_rmem：此参数与net.ipv4.tcp_wmem都是用来优化TCP接收/发送缓冲
口net.core.wmem_max：指定发送套接字缓冲区大小的最大值，单位是字节。
仅仅是为了防止简单的DoS攻击。此值不能太小。这里设置为262144。
户文件句柄上。如果超过这里设置的数字，连接就会复位并输出警告信息。这个限制
参数的功能有助于保护服务器免受SyncFlood攻击。默认值为0，这里设置为1。
核处理这些包的速率快时，允许发送到队列的数据包的最大数量。
fin包的超时时间。如果时间到了仍未收到对方的fin包就主动释放该会话。
ack确认包。net.ipv4.tcp_fin_timeout参数用来设置A进入FIN-WAIT-2状态等待对方
获得B的ack确认包后，A就进入FIN-WAIT-2状态等待B的fin包，然后给B发
可以处理更多的连接。此参数值为整数，单位为秒。
例如，在一个tcp会话过程中，在会话结束时，A首先向B发送一个fin包，在
www.Linuxidc.com
hish59
---
## Page 80
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
资源的永久限制。
以将ulimit命令添加到有登录shell的配置文件中，这样就实现了对shell启动进程所占用的
会话，并在会话终止时结束限制，而不影响与其他shell会话。对于永久限制，ulimit命令可
线程数和CPU时间等。同时，它还支持对硬资源和软资源的限制。
所能使用的最大虚拟内存、shell进程创建文件的大小、分配堆栈的最大值、单个用户的最大
存锁住的大小、常驻内存集的大小、进程数据块的大小、打开文件描述符的数量、shell进程
统资源的合理利用和分配。ulimit支持对以下内容进行限制：所创建的内核文件的大小、内
60
选项
ulimit有临时限制和永久限制两种实现方式。临时限制可以限制通过命令行登录的shell
-H
options中可设置的选项的含义以及简单示例如表2-7所示。
ulimit使用格式如下：
ulimit可以限制系统的各个方面，它通过限制shell启动进程所占用的资源，来完成对系
ulimit [options] [value]
不能超过硬资源限制
www.Linuxidc.com
进程最大可用的虚拟内存，以KB为单位
用户最大可用的进程数
最大的CPU占用时间，以秒为单位
线程栈大小，以KB为单位
管道缓冲区的大小，以KB为单位
可以打开最大文件描述符的数量
最大内存大小，以KB为单位
最大可加锁内存大小，以KB为单位
进程可以创建文件的最大值，以block为单位
进程最大的数据段的大小，以KB为单位
最大的core文件的大小，以block为单位
显示当前所有的资源限制
设置软资源限制，设置后可以增加，但是
设置硬资源限制，设置后不能增加
表2-7options中可设置的选项的含义及示例
限制最大可用的虚拟内存为200000KB
ulimit-v200000;
限制用户最多可以使用64个进程
ulimit -u 64;
对最大的CPU占用时间不进行限制
limit-t
限制线程栈的大小为512KB
ulimit - s 512;
限制管道缓冲区的大小为512KB
ulimit -p 512:
限制最大可以使用256个文件描述符
alimit-n 256:
对最大内存不进行限制
限制最大可加锁内存大小为32KB
ulimit-132;
限制进程可以创建的最大文件大小为2048blocks
ulimit-f2048;
对进程的数据段大小不进行限制
ulimit -d unlimited
对生成的core文件的大小不进行限制
alimit-cunlimited:
ulimit -a ;
限制软资源，32个文件描述符
ulimit -Sn 32 :
限制硬资源，线程栈大小为64KB
ulimit-Hs 64:
unlimited
示
PDG
---
## Page 81
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
varnishd的“-p”参数调用即可。
varnish官方文档。
很多，因此这里仅选取对Varnish性能影响比较大的几个参数进行介绍，更多介绍请查阅
中的所有参数。当然也可以通过这种方式更改相关参数，由于Varnish运行中用到的参数有
2.6.3优化Varnish参数
这里的参数设定值如下（此值不能一概而论，需要根据应用环境的不同，选择适合的值）。
对于这些优化参数，最好的方式是将它们加到Varnish的启动脚本中，然后通过
并发处理的能力。
口listen_depth：这个参数用于设置TCP连接队列的长度，将其设置得大一些可以提高
口lru_interval：这是个时间参数，表示在内存中如果某一个对象超过了此参数设定的时
listen_depth
lru interval
Varnish运行中还有以下两个参数：
口thread_pool_timeout：表示thread的超时过期时间。当thread数大于thread_pool
置为系统峰值的90%左右即可，设置过大会导致进程被挂起。
口thread_pool_max：表示所有pool对应的thread数总和的最大值。此值不能太大，设
就会将请求分配给空闲的thread来处理。
口thread_pool_min：用来设置每个pool的最小thread数。pool接收到可用的请求后，
口thread_pools：用来设置线程池的数量。
thread_pool_timeout
hread_pool_max
thread_pool_min
thread_pools
首先查看以下4个参数：
telnet到Varnish的3500管理端口，然后执行param.show命令即可看到Varnish运行
置多一些的pool，Varmish的并发处理能力会更强，但是也会消耗更多的CPU和内存。
为了保证这个限制永久生效，最好将ulimit设置放到Varmish的启动脚本中。
ulimit -HSc unlimited
ulimit -HSn 131072
在了解了ulimit的含义和用法以后，接下来就可以针对Varnish系统进行相关的设定。
是缓存系统的一个常用算法。合理地设置这个时间，可以提高系统的运行效率。
间后还没有被重用时，就把这个对象从LRU（LeastRecentlyUsed）队列中移除。这
被释放掉。
min设定值时，如果thread空闲超过thread_pool_timeout设定的时间，thread就会
www.Linuxidc.com
1024 [connections]
20 [seconds]
10 [seconds]
50
4[pools]
[threads]
，一般认为这个值和系统CPU的数目相同最好。设
---
## Page 82
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
变相实现了网页压缩。
Varmish本身并不提供压缩的功能，但是可以将要压缩的工作交给后端的服务器去完成，从而
器发送网页的大小，从而降低用户下载的时间，最大效率地利用带宽，提高网站的性能。
2.7.2
名下的/templets/default/images/logo.gif图片，而对找到匹配域名的请求执行lookup操作。
在，且referer标识不匹配下面域名列表中的任意一个，就将请求重定向到www.ixdba.net域
以获取信息来源，进而进行相应的处理。
上一个referer标识，用来告诉服务器请求是从哪个页面链接过来的服务器根据这个标识就可
其实，referer是httpheader的一部分，当浏览器向Web服务器发送请求的时候，一般会带
文件的vcl_recv函数内增加如下配置即可。
都可以很容易地实现图片防盗链功能。利用Varnish实现这个功能也非常简单，只需在配置
2.7.1
所以这里只给出相应模块的配置代码，并附上相关的说明。
介绍几个应用广泛、功能强大的应用实例。由于Varnish的配置格式在前面已经详细介绍过，
2.7
62第
这段配置的含义为：Varnish服务器对接收或发送的请求进行判断，如果referer标识存
网页压缩技术是一种最为简便的提高网络速度的方法。通过压缩技术，可以减少服务
在这段配置中，
图片防盗链功能对于大型网站的运维非常重要，各种Web服务器，如Apache和Nginx
Varnish可应用在多方面，并且随着版本的升级，其功能性应用也在不断增加，这里仅
首先在Varnish配置文件的“vcl_recv”函数中加入如下配置：
Varnish的常见应用实例
利用Varnish实现静态文件压缩处理
利用Varnish实现图片防盗链
第1篇weD应用
www.Linuxidc .com
，用了一个内置变量req.http.referer，防盗链就是通过referer来实现的。
if(req.url。"\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg）$"）{
if （req.http.Accept-Encoding){
req.http.referer
!(req.http.referer -"http://.*ixdba\.net
set reg.url ="/templets/default/images/logo.gif";
set req.http.host ="www.ixdba.net";
eq.http.referer
req.http.referer
return (lookup);
"http://.*google\.cn"