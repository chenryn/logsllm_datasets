copy buffer$return!used!max ≥ copy!used!max
copy buffer$return!used!min ≥ copy!used!min
cc2!used!max ≥ copy buffer$return!used!max
cc2!used!min ≤ copy buffer$return!used!min
cc2!alloc!max ≥ copy buffer$return!alloc!max
cc2!alloc!min ≥ copy buffer$return!alloc!min
counter
counter!max ≥ counter
counter
counter!min ≤ counter
!max ≥ counter!max + 1
!min ≤ counter!min + 1
!max
!min
(cid:1)
(cid:1)
(cid:1)
(cid:1)
Stmt.
6
6
10
10
10
10
18
18
18
18
10
10
10
10
8
8
8
8
Figure 3: Some constraints for the running example
the detector front-end is a CodeSurfer plug-in that uses CodeSurfer’s
GUI in order to display potential overruns. Information about po-
tential overruns is linked to CodeSurfer’s internal program repre-
sentation, so that the user can make use of CodeSurfer’s features,
such as slicing, in order to examine potential overruns.
3.2 Constraint Generation
Constraint generation in our tool is similar to the approach pro-
posed in BOON [30]. We also use points-to information returned
by CodeSurfer, thus allowing for more precise constraints. Each
pointer buf, to a character buffer, is modeled by four constraint
variables, namely, buf!alloc!max and buf!alloc!min, which
denote the maximum and minimum number of bytes allocated for
the buffer, and buf!used!max and buf!used!min, which denote
the maximum and minimum number of bytes used by the buffer.
Each integer variable i is modeled by constraint variables i!max
and i!min which represent the maximum and minimum value of i,
respectively. Program statements that operate on character buffers
or integer variables are modeled using linear constraints over con-
straint variables.
Our constraints model the program in a ﬂow- and context insensi-
tive manner, with the exception of library functions that manipulate
character buffers. A ﬂow-insensitive analysis ignores the order of
statements, and a context-insensitive analysis does not differenti-
ate between multiple call-sites to the same function. For a function
call to a library function that manipulates strings (e.g., strcpy or
strlen), we generate constraints that model the effect of the call;
for these functions, the constraint model is context-sensitive.
In
Section 5, we will show how we extended the model to make the
constraints context-sensitive for user deﬁned functions as well.
Constraints are generated using a single pass over the program’s
statements. There are four program statements that result in con-
straint generation: buffer declarations, assignments, function calls,
and return statements. A buffer declaration such as char buf[1024]
results in constraints that indicate that buf is of size 1024. A
statement that assigns into a character buffer (e.g., buf[i]=’c’)
results in constraints that reﬂect the effect of the assignment on
buf!used!max and buf!used!min. An assignment to an integer
i results in constraints on i!max and i!min.
As mentioned above, a function call to a library function that
manipulates string buffers is modeled by constraints that summa-
rize the effect of the call. For example, the strcpy statement at
line (18) in Figure 2 results in the following constraints:
copy!used!max ≥ buffer!used!max
copy!used!min ≤ buffer!used!min
For each user-deﬁned function foo, there are constraint variables
for foo’s formal parameters that are integers or strings. If foo re-
turns an integer or a string, then there are constraint variables (e.g.,
copy buffer$return!used!max) for the function’s return value.
A call to a user-deﬁned function is modeled with constraints for the
passing of actual parameters and the assignment of the function’s
return value.
As in BOON, constraints are associated with pointers to charac-
ter buffers rather than the character buffers themselves. This means
that some aliasing among character buffers is not modeled in the
constraints and false negatives may result. We chose to follow
BOON in this regard because we are interested in improving pre-
cision by using a context sensitive program analysis (Section 5).
Currently, context-sensitive pointer analysis does not scale well,
and using a context-insensitive pointer analysis would undermine
our aim of performing context-sensitive buffer overrun analysis.
However, we discovered that we could make use of pointer anal-
ysis to eliminate some false negatives. For instance, consider the
statement “strcpy(p->f, buf),” where p could point to a struc-
ture s. The constraints generated for this statement would relate
the constraint variables for s.f and buf. Moreover, we use the
results of pointer analysis to handle arbitrary levels of dereferenc-
ing. Constraint generation also makes use of pointer information
for integers.
(cid:1)
Figure 3 shows a few constraints for the program in Figure 2, and
the program statement that generated them. Most of the constraints
are self-explanatory, however a few comments are in order:
• Since we do not model control ﬂow, we ignore predicates during
constraint generation. Hence, in Figure 2, the predicate counter
< 10 in line (8) was ignored.
• The statement counter++ is particularly interesting when gener-
ating linear constraints. A linear constraint such as counter!max
≥ counter!max + 1 cannot be interpreted by a linear program
solver. Hence, we model this statement by treating it as a pair of
(cid:1).
statements: counter
= counter + 1; counter = counter
These two constraints capture the fact that counter has been incre-
mented by 1, and can be translated into constraints that are accept-
able to a linear program solver, although the resulting linear pro-
gram will be infeasible (Section 4).
• A program variable that acquires its value from the environment
or from user input in an unguarded manner is considered unsafe
– for instance, the statement getenv("PATH"), which returns the
search path, could return an arbitrarily long string. To reﬂect the
fact that the string can be arbitrarily long, we generate constraints
getenv$return!used!max ≥ ∞, getenv$return!used!min
≤ 0. Similarly, an integer variable i accepted as user input gives
rise to constraints i!max ≥ ∞ and i!min ≤ -∞
3.3 Taint Analysis
The linear constraints then pass through a taint analysis mod-
ule. The main goal of the taint analysis module is to make the
constraints amenable to the solvers presented in Section 4. These
solvers use linear programming, which can work only with ﬁnite
values, hence this requires us to remove variables that can obtain
inﬁnite values. Section 4 will also demonstrate the importance of
max variables having ﬁnite lower bounds and min variables having
ﬁnite upper bounds. Hence, taint analysis aims to:
• Identify and remove any variables that get an inﬁnite value: As
mentioned in section 3.2, some constraint variables var are associ-
ated with constraints of the form var ≥ ∞ or var ≤ -∞. Taint
analysis identiﬁes constraint variables that can directly or indirectly
be set to ±∞ and removes them from the set of constraints.
• Identify and remove any uninitialized constraint variables: The
system of constraints is examined to see if all max constraint vari-
ables have a ﬁnite lower bound, and all min constraint variables
have a ﬁnite upper bound; we refer to constraint variables that do
not satisfy this requirement as uninitialized. Constraint variables
may fail to satisfy the above requirement if either the program vari-
ables that they correspond to have not been initialized in the source
code, or program statements that affect the value of the program
variables have not been captured by the constraint generator. The
latter case may arise when the constraint generator does not have
a model for a library function that affects the value of the program
variable. It is important to realize that this analysis is not meant
to capture uninitialized program variables, but is meant to capture
uninitialized constraint variables.
In the constraints obtained by the program in Figure 2, no vari-
ables will be removed by the taint analysis module, assuming that
we modeled the library functions strlen, fgets and strcpy cor-
rectly. The taint analysis algorithm is presented in detail in [19].
3.4 Constraint Solving
The constraints that remain after taint analysis can be solved us-
ing linear programming. We have developed two solvers, both of
which use linear programming to obtain values for the constraint
variables. The goal of both solvers is the same, to obtain the best
possible estimate of the number of bytes used and allocated for each
buffer in any execution of the program. For a buffer pointed to by
buf, ﬁnding the number of bytes used corresponds to ﬁnding the
“tightest” possible range [buf!used!min..buf!used!max]. This
can be done by ﬁnding the lowest and highest values of the con-
straint variables buf!used!max and buf!used!min respectively
that satisfy all the constraints. Similarly, we can ﬁnd the “tight-
est” possible range for the number of bytes allocated for the buffer
by ﬁnding the lowest and the highest values of buf!alloc!max
and buf!alloc!min respectively. For the program in Figure 2,
the constraint variables take on the values shown in Figure 4. We
explain in detail in Section 4 how these values were obtained.
3.5 Detecting Overruns
Based on the values inferred by the solver, as well as the values
inferred by the taint analysis module, the detector decides whether
there was an overrun on each buffer. We use several heuristics to
give the best possible judgment. We shall explain some of these in
the context of the values from Figure 4.
• The solver found that the buffer pointed to by header has 2048
bytes allocated for it, but that its length could have been between
1 and 2048 bytes. This is a scenario where a buffer overrun can
never occur – and hence the buffer pointed to by header is ﬂagged
as “safe”. The same is true of the buffer pointed to by buf.
• The buffer pointed to by ptr was found to have between 1024
and 2048 bytes allocated, while between 1 and 2048 bytes could
have been used. Note that ptr is part of two assignment state-
ments. The assignment statement (6) could make ptr point to a
buffer as long as 2048 bytes, while the statement (9) could make
ptr point to a buffer as long as 1024 bytes. The ﬂow insensitivity
of the analysis means that we do not differentiate between these
program points, and hence can only infer that ptr was up to 2048
bytes long. In such a scenario, where the value of ptr!used!max
is bigger than ptr!alloc!min but smaller than (or equal to) the
value of ptr!alloc!max, we conservatively conclude that there
might have been an overrun. This can result in a false positive due
to the ﬂow insensitivity of the analysis.
• In cases such as for program variable copy where we observe
that copy!alloc!max is less than copy!used!max, we know that
there is a run of the program in which more bytes were written into
the buffer than it could possible hold, and we conclude that there
was an overrun on the buffer.
Variable
header!used
header!alloc
buf!used
buf!alloc
cc1!used
cc1!alloc
ptr!used
ptr!alloc
cc2!used
cc2!alloc
buffer!used
buffer!alloc
copy!used
copy!alloc
counter
min Value
1
2048
1
1024
1
0
1
1024
1
0
1
1024
1
0
0
max Value
2048
2048
1024
1024
2048
2047
2048
2048
2048
2047
2048
2048
2048
2047
∞
Figure 4: Values of some constraint variables
We have developed a GUI front end that enables the end-user to
“surf” the warnings – every warning is linked back to the source
code line that it refers to. Moreover, the user can exploit the pro-
gram slicing capabilities of CodeSurfer to verify real overruns.