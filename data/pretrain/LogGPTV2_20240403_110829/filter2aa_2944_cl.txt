To prevent replay attacks, the API needs to ensure that a request came from a legiti-
mate client and is fresh. Freshness ensures that the message is recent and hasn’t been
replayed and is critical to security when making access control decisions based on the
identity of the client. The process of identifying who an API server is talking to is
known as entity authentication.
DEFINITION
Entity authentication is the process of identifying who requested an
API operation to be performed. Although message authentication can confirm
who originally authored a request, entity authentication additionally requires
that the request is fresh and has not been replayed. The connection between
the two kinds of authentication can be summed up as: entity authentication =
message authentication + freshness.
In previous chapters, you’ve relied on TLS or authentication protocols such as OpenID
Connect (OIDC; see chapter 7) to ensure freshness, but end-to-end API requests need
to ensure this property for themselves. There are three general ways to ensure freshness:
 API requests can include timestamps that indicate when the request was gener-
ated. The API server can then reject requests that are too old. This is the weak-
est form of replay protection because an attacker can still replay requests until
they expire. It also requires the client and server to have access to accurate
clocks that cannot be influenced by an attacker.
 Requests can include a unique nonce (number-used-once). The server remem-
bers these nonces and rejects requests that attempt to reuse one that has
already been seen. To reduce the storage requirements on the server, this is
often combined with a timestamp, so that used nonces only have to be remem-
bered until the associated request expires. In some cases, you may be able to
use a monotonically increasing counter as the nonce, in which case the server only
needs to remember the highest value it has seen so far and reject requests that
use a smaller value. If multiple clients or servers share the same key, it can be
difficult to synchronize the counter between them all.
 The most secure method is to use a challenge-response protocol shown in figure 13.3,
in which the server generates a random challenge value (a nonce) and sends it
to the client. The client then includes the challenge value in the API request,
proving that the request was generated after the challenge. Although more
secure, this adds overhead because the client must talk to the server to obtain a
challenge before they can send any requests.
DEFINITION
A monotonically increasing counter is one that only ever increases
and never goes backward and can be used as a nonce to prevent replay of API
requests. In a challenge-response protocol, the server generates a random chal-
lenge that the client includes in a subsequent request to ensure freshness.
Both TLS and OIDC employ challenge-response protocols for authentication. For
example, in OIDC the client includes a random nonce in the authentication request
498
CHAPTER 13
Securing IoT APIs
and the identity provider includes the same nonce in the generated ID token to
ensure freshness. However, in both cases the challenge is only used to ensure fresh-
ness of an initial authentication request and then other methods are used from then
on. In TLS, the challenge response happens during the handshake, and afterward a
monotonically increasing sequence number is added to every message. If either side
sees the sequence number go backward, then they abort the connection and a new
handshake (and new challenge response) needs to be performed. This relies on the
fact that TLS is a stateful protocol between a single client and a single server, but this
can’t generally be guaranteed for an end-to-end security protocol where each API
request may go to a different server.
Attacks from delaying, reordering, or blocking messages
Replay attacks are not the only way that an attacker may interfere with API requests
and responses. They may also be able to block or delay messages from being
received, which can cause security issues in some cases, beyond simple denial of
service. For example, suppose a legitimate client sends an authenticated “unlock”
request to a door-lock device. If the request includes a unique nonce or other mech-
anism described in this section, then an attacker won’t be able to replay the request
Device
API
Initial request
Challenge
Response
The client’s initial request is
rejected by the API, which sends
a random challenge to the client.
The client repeats its request including
a response to the challenge.
The API can be sure that the
client’s new request must be
more recent than the challenge,
ensuring freshness.
Figure 13.3
A challenge-response protocol ensures that an API request is 
fresh and has not been replayed by an attacker. The client’s first API request 
is rejected, and the API generates a random challenge value that it sends to 
the client and stores locally. The client retries its request, including a response 
to the challenge. The server can then be sure that the request has been freshly 
generated by the genuine client and is not a replay attack.
499
End-to-end authentication
13.2.1 OSCORE
Object Security for Constrained RESTful Environments (OSCORE; https://tools.ietf
.org/html/rfc8613) is designed to be an end-to-end security protocol for API requests
in IoT environments. OSCORE is based on the use of pre-shared keys between the cli-
ent and server and makes use of CoAP (Constrained Application Protocol) and COSE
(CBOR Object Signing and Encryption) so that cryptographic algorithms and mes-
sage formats are suitable for constrained devices.
NOTE
OSCORE can be used either as an alternative to transport layer secu-
rity protocols such as DTLS or in addition to them. The two approaches are
complimentary, and the best security comes from combining both. OSCORE
doesn’t encrypt all parts of the messages being exchanged so TLS or DTLS
provides additional protection, while OSCORE ensures end-to-end security.
To use OSCORE, the client and server must maintain a collection of state, known as
the security context, for the duration of their interactions with each other. The secu-
rity context consists of three parts, shown in figure 13.4:
 A Common Context, which describes the cryptographic algorithms to be used and
contains a Master Secret (the PSK) and an optional Master Salt. These are used
to derive keys and nonces used to encrypt and authenticate messages, such as
the Common IV, described later in this section.
 A Sender Context, which contains a Sender ID, a Sender Key used to encrypt mes-
sages sent by this device, and a Sender Sequence Number. The sequence num-
ber is a nonce that starts at zero and is incremented every time the device sends
a message.
 A Recipient Context, which contains a Recipient ID, a Recipient Key, and a Replay
Window, which is used to detect replay of received messages. 
WARNING
Keys and nonces are derived deterministically in OSCORE, so if
the same security context is used more than once, then catastrophic nonce
reuse can occur. Devices must either reliably store the context state for the
later. However, they can prevent the original request being delivered immediately and
then send it to the device later, when the legitimate user has given up and walked
away. This is not a replay attack because the original request was never received by
the API; instead, the attacker has merely delayed the request and delivered it at a
later time than was intended. http://mng.bz/nzYK describes a variety of attacks
against CoAP that don’t directly violate the security properties of DTLS, TLS, or other
secure communication protocols. These examples illustrate the importance of good
threat modeling and carefully examining assumptions made in device communica-
tions. A variety of mitigations for CoAP are described in http://mng.bz/v9oM, includ-
ing a simple challenge-response “Echo” option that can be used to prevent delay
attacks, ensuring a stronger guarantee of freshness.
500
CHAPTER 13
Securing IoT APIs
life of the Master Key (including across device restarts) or else negotiate fresh
random parameters for each session.
DERIVING THE CONTEXT
The Sender ID and Recipient ID are short sequences of bytes and are typically only
allowed to be a few bytes long, so they can’t be globally unique names. Instead, they
Client
Server
Common context
Common context
Sender context
Sender context
Recipient context
Recipient context
The client and server begin with a shared
Master Key (PSK), Master Salt, and ID Context.
The Sender Context of the client
corresponds to the Recipient Context
on the server, and vice versa.
The server maintains a window of
recently used sequence numbers to
prevent replay of client requests.
Sender and recipient keys are
derived from the master keys
using HKDF key derivation.
Sequence #
Sender ID
Sender Key
Recipient ID
Recipient Key
Sequence #
Sender ID
Sender Key
Replay
Window
Recipient ID
Recipient Key
Common IV
ID Context
Master Key
Master Salt
Common IV
ID Context
Master Key
Master Salt
Figure 13.4
The OSCORE context is maintained by the client and server and consists of three 
parts: a common context contains a Master Key, Master Salt, and Common IV component. 
Sender and Recipient Contexts are derived from this common context and IDs for the sender 
and recipient. The context on the server mirrors that on the client, and vice versa.
501
End-to-end authentication
are used to distinguish the two parties involved in the communication. For example,
some OSCORE implementations use a single 0 byte for the client, and a single 1 byte
for the server. An optional ID Context string can be included in the Common Con-
text, which can be used to map the Sender and Recipient IDs to device identities, for
example in a lookup table.
 The Master Key and Master Salt are combined using the HKDF key derivation
function that you first used in chapter 11. Previously, you’ve only used the HKDF-
Expand function, but this combination is done using the HKDF-Extract method that
is intended for inputs that are not uniformly random. HKDF-Extract is shown in list-
ing 13.7 and is just a single application of HMAC using the Master Salt as the key and
the Master Key as the input. Open the HKDF.java file and add the extract method to
the existing code.
public static Key extract(byte[] salt, byte[] inputKeyMaterial)   
        throws GeneralSecurityException {
    var hmac = Mac.getInstance("HmacSHA256");
    if (salt == null) {                           
        salt = new byte[hmac.getMacLength()];     
    }                                             
    hmac.init(new SecretKeySpec(salt, "HmacSHA256"));           
    return new SecretKeySpec(hmac.doFinal(inputKeyMaterial),    
            "HmacSHA256");
}
The HKDF key for OSCORE can then be calculated from the Master Key and Master
Salt as follows:
var hkdfKey = HKDF.extract(masterSalt, masterKey);
The sender and recipient keys are then derived from this master HKDF key using the
HKDF-Expand function from chapter 10, as shown in listing 13.8. A context argument
is generated as a CBOR array, containing the following items in order:
 The Sender ID or Recipient ID, depending on which key is being derived.
 The ID Context parameter, if specified, or a zero-length byte array otherwise.
 The COSE algorithm identifier for the authenticated encryption algorithm
being used.
 The string “Key” encoded as a CBOR binary string in ASCII.
 The size of the key to be derived, in bytes.
This is then passed to the HKDF.expand() method to derive the key. Create a new file
named Oscore.java and copy the listing into it. You’ll need to add the following
imports at the top of the file:
Listing 13.7
HKDF-Extract
HKDF-Extract takes a random salt
value and the input key material.
If a salt is not 
provided, then an 
all-zero salt is used.
The result is the output of HMAC using the salt
as the key and the key material as the input.
502
CHAPTER 13
Securing IoT APIs
import COSE.*;
import com.upokecenter.cbor.CBORObject;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import java.nio.*;
import java.security.*;
private static Key deriveKey(Key hkdfKey, byte[] id,
    byte[] idContext, AlgorithmID coseAlgorithm)
        throws GeneralSecurityException {
    int keySizeBytes = coseAlgorithm.getKeySize() / 8;
    CBORObject context = CBORObject.NewArray();      
    context.Add(id);                                 
    context.Add(idContext);                          
    context.Add(coseAlgorithm.AsCBOR());             
    context.Add(CBORObject.FromObject("Key"));       
    context.Add(keySizeBytes);                       
    return HKDF.expand(hkdfKey, context.EncodeToBytes(),    
            keySizeBytes, "AES");                           
}
The Common IV is derived in almost the same way as the sender and recipient keys, as
shown in listing 13.9. The label “IV” is used instead of “Key,” and the length of the IV
or nonce used by the COSE authenticated encryption algorithm is used instead of the
key size. For example, the default algorithm is AES_CCM_16_64_128, which requires
a 13-byte nonce, so you would pass 13 as the ivLength argument. Because our HKDF
implementation returns a Key object, you can use the getEncoded() method to con-
vert that into the raw bytes needed for the Common IV. Add this method to the
Oscore class you just created.
private static byte[] deriveCommonIV(Key hkdfKey,
    byte[] idContext, AlgorithmID coseAlgorithm, int ivLength)
        throws GeneralSecurityException {
    CBORObject context = CBORObject.NewArray();
    context.Add(new byte[0]);
    context.Add(idContext);
    context.Add(coseAlgorithm.AsCBOR());
    context.Add(CBORObject.FromObject("IV"));    
    context.Add(ivLength);                       
    return HKDF.expand(hkdfKey, context.EncodeToBytes(),    
            ivLength, "dummy").getEncoded();                
}
Listing 13.10 shows an example of deriving the sender and recipient keys and
Common IV based on the test case from appendix C of the OSCORE specification
Listing 13.8
Deriving the sender and recipient keys
Listing 13.9
Deriving the Common IV
The context is a CBOR 
array containing the ID, 
ID context, algorithm 
identifier, and key size.
HKDF-Expand is used 
to derive the key 
from the master 
HKDF key.
Use the label "IV" 
and the length of 
the required nonce 
in bytes.
Use HKDF-Expand 
but return the raw 
bytes rather than 
a Key object.
503
End-to-end authentication
(https://tools.ietf.org/html/rfc8613#appendix-C.1.1). You can run the code to verify
that you get the same answers as the RFC. You can use org.apache.commons.codec
.binary.Hex to print the keys and IV in hexadecimal to check the test outputs.
WARNING
Don’t use this master key and master salt in a real application!
Fresh keys should be generated for each device.
public static void main(String... args) throws Exception {
    var algorithm = AlgorithmID.AES_CCM_16_64_128;         
    var masterKey = new byte[] {                               
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,    
            0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10     
    };                                                         
    var masterSalt = new byte[] {                              
            (byte) 0x9e, 0x7c, (byte) 0xa9, 0x22, 0x23, 0x78,  
            0x63, 0x40                                         
    };                                                         
    var hkdfKey = HKDF.extract(masterSalt, masterKey);    
    var senderId = new byte[0];                       
    var recipientId = new byte[] { 0x01 };            
    var senderKey = deriveKey(hkdfKey, senderId, null, algorithm);        
    var recipientKey = deriveKey(hkdfKey, recipientId, null, algorithm);  
    var commonIv = deriveCommonIV(hkdfKey, null, algorithm, 13);          
}
GENERATING NONCES
The Common IV is not used directly to encrypt data because it is a fixed value, so would
immediately result in nonce reuse vulnerabilities. Instead the nonce is derived from a
combination of the Common IV, the sequence number (called the Partial IV), and the
ID of the sender, as shown in listing 13.11. First the sequence number is checked to make
sure it fits in 5 bytes, and the Sender ID is checked to ensure it will fit in the remainder of
the IV. This puts significant constraints on the maximum size of the Sender ID. A packed
binary array is generated consisting of the following items, in order:
 The length of the Sender ID as a single byte
 The sender ID itself, left-padded with zero bytes until it is 6 bytes less than the
total IV length
 The sequence number encoded as a 5-byte big-endian integer
The resulting array is then combined with the Common IV using bitwise XOR, using
the following method:
private static byte[] xor(byte[] xs, byte[] ys) {
    for (int i = 0; i  (1L  idLen)                                      
        throw new IllegalArgumentException("ID is too large");  
    var buffer = ByteBuffer.allocate(ivLength).order(ByteOrder.BIG_ENDIAN);
    buffer.put((byte) id.length);              
    buffer.put(new byte[idLen - id.length]);   
    buffer.put(id);                            
    buffer.put((byte) ((sequenceNumber >>> 32) & 0xFF));    
    buffer.putInt((int) sequenceNumber);                    
    return xor(buffer.array(), commonIv);    
}
ENCRYPTING A MESSAGE
Once you’ve derived the per-message nonce, you can encrypt an OSCORE message, as
shown in listing 13.12, which is based on the example in section C.4 of the OSCORE
specification. OSCORE messages are encoded as COSE_Encrypt0 structures, in which
there is no explicit recipient information. The Partial IV and the Sender ID are
encoded into the message as unprotected headers, with the Sender ID using the stan-
dard COSE Key ID (KID) header. Although marked as unprotected, those values are
actually authenticated because OSCORE requires them to be included in a COSE
external additional authenticated data structure, which is a CBOR array with the follow-