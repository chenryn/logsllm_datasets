# 十五、答案
# 第一章
1.  正确答案是:4，5。
2.  对于信息技术来说，Docker 容器就像运输行业的容器一样。它定义了如何包装商品的标准。在这种情况下，商品是开发人员编写的应用。供应商(在这种情况下是开发人员)负责将货物包装到容器中，并确保一切都符合预期。一旦货物被包装成容器，就可以装运了。由于它是一个标准容器，托运人可以标准化他们的运输工具，如卡车、火车或轮船。托运人并不真正关心容器里有什么。此外，从一种运输方式到另一种运输方式(例如，火车到轮船)的装卸过程可以高度标准化。这大大提高了运输效率。与此类似的是一名 IT 运营工程师，他可以将开发人员构建的软件容器运送到生产系统，并以高度标准化的方式在那里运行，而无需担心容器中有什么。它会起作用的。
3.  容器成为游戏改变者的一些原因是:
    *   容器是独立的，因此如果它们在一个系统上运行，它们可以在容器可以运行的任何地方运行。
    *   容器在内部、云中以及混合环境中运行。这对于当今典型的企业来说非常重要，因为它允许从内部部署到云的平稳过渡。
    *   容器映像是由最了解的人——开发人员——构建或打包的。
    *   容器映像是不可变的，这对于良好的发布管理很重要。
    *   容器是基于封装(使用 Linux 命名空间和 cgroups)、机密、内容信任和映像漏洞扫描的安全软件供应链的推动者。
4.  容器可以在任何地方运行，因为:
    *   容器是独立的黑盒。它们不仅封装了一个应用，还封装了它的所有依赖项，例如库和框架、配置数据、证书等等。
    *   容器基于广泛接受的标准，如 OCI。
    *   TODO:添加更多原因。
5.  假的！容器对于现代应用以及容器化传统应用都是有用的。企业做后者的好处是巨大的。据报道，传统应用的维护成本节约了 50%或更多。此类遗留应用的新版本之间的时间间隔最多可缩短 90%。这些数字已经被真实的企业客户公开报道。
6.  50%或更多。
7.  容器基于 Linux 命名空间(网络、进程、用户等)和 cgroups(控制组)。
# 第二章
1.  `docker-machine`可以用来做以下事情:
    *   创建一个在不同环境中配置为 Docker 主机的虚拟机，例如 VirtualBox
    *   SSH 进入 Docker 主机
    *   为远程 Docker 主机的访问配置本地 Docker 命令行界面
    *   列出给定环境中的所有主机
    *   删除或销毁现有主机
2.  没错。Windows docker 在 Hyper-V 中创建了一个 Linux 虚拟机，然后在其上运行 Linux 容器。
3.  容器被最佳地用在 CI/CD 中，这完全是关于自动化。从构建容器映像、运送映像到最终从该映像运行容器的每一步，都是为了最大限度地提高工作效率而编写的理想脚本。有了它，就可以实现一个可重复和可审计的过程。
4.  Ubuntu 17.4 或更高版本、CentOS 7.x、Alpine 3.x、Debian、Suse Linux、RedHat Linux 等等。
5.  Windows 10 专业版或企业版，Windows Server 2016。
# 第三章
1.  容器的状态如下
2.  以下命令有助于我们了解主机上当前运行的是什么:
```
$ docker container ls
```
3.  以下命令用于列出所有容器的标识:
```
$ docker container ls -q
```
# 第四章
以下是这些问题的可能答案:
1.  Dockerfile：
```
FROM ubuntu:17.04
RUN apt-get update
RUN apt-get install -y ping
ENTRYPOINT ping
CMD 127.0.0.1
```
2.  要获得此结果，您可以执行以下步骤:
```
$ docker container run -it --name sample \
 alpine:latest /bin/sh
/ # apk update && \
 apk add -y curl && \
 rm -rf /var/cache/apk/*
/ # exit
$ docker container commit sample my-alpine:1.0
$ docker container rm sample
```
3.  作为示例，这里是 C 中的`Hello World`:
    1.  创建一个包含以下内容的文件`hello.c`:
```
#include 
int main()
{
   printf("Hello, World!");
   return 0;
}
```
```
FROM alpine:3.5 AS build
RUN apk update && \
    apk add --update alpine-sdk
RUN mkdir /app
WORKDIR /app
COPY hello.c /app
RUN mkdir bin
RUN gcc -Wall hello.c -o bin/hello 
FROM alpine:3.5
COPY --from=build /app/bin/hello /app/hello
CMD /app/hello
```
4.  Docker 映像的一些特征是:
    *   它是不可改变的
    *   它由不可变的层组成
    *   每一层仅包含相对于较低层而言已经改变的部分(增量)
    *   映像是文件和文件夹的(大)目标球
    *   映像是容器的模板
5.  选项 3 是正确的。首先，我们需要确保我们已经登录，然后我们标记映像，最后推送它。因为这是一个映像，我们使用的是`docker image ...`而不是`docker container ...`(如数字 4)。
# 第五章
使用卷的最简单方法是使用 Docker 工具箱，就像直接使用 Mac 的 Docker 或 Windows 的 Docker 一样，然后将卷存储在 Mac/Win 的 Docker 透明使用的(有些隐藏的)Linux 虚拟机中。
因此，我们建议如下:
```
$ docker-machine create --driver virtualbox volume-test
$ docker-machine ssh volume-test
```
现在您已经进入了名为`volume-test`的 Linux 虚拟机，您可以执行以下练习:
1.  要创建名为`volume`的，运行以下命令:
```
 $ docker volume create my-products
```
2.  执行以下命令:
```
$ docker container run -it --rm \
 -v my-products:/data:ro \
 alpine /bin/sh
```
3.  例如，要获取卷在主机上的路径，请使用以下命令:
```
$ docker volume inspect my-products | grep Mountpoint
```
(如果使用 docker-machine 和 VirtualBox)会导致:
```
"Mountpoint": "/mnt/sda1/var/lib/docker/volumes/my-products/_data"
```
现在执行以下命令:
```
$ sudo su
$ cd /mnt/sda1/var/lib/docker/volumes/my-products/_data
$ echo "Hello world" > sample.txt
$ exit
```
4.  执行以下命令:
```
$ docker run -it --rm -v my-products:/data:ro alpine /bin/sh
# / cd /data
# / cat sample.txt
```
在另一个终端中执行:
```
 $ docker run -it --rm -v my-products:/app-data alpine /bin/sh
 # / cd /app-data
 # / echo "Hello other container" > hello.txt
 # / exit
```
5.  执行如下命令:
```
$ docker container run -it --rm \
 -v $HOME/my-project:/app/data \
 alpine /bin/sh
```
6.  退出两个容器，然后回到主机上，执行以下命令:
```
$ docker volume prune
```
7.  运行以下命令:
```
$ docker system info | grep Version
```
应该会输出类似这样的内容:
```
Server Version: 17.09.1-ce
Kernel Version: 4.4.104-boot2docker
```
如果您一直在使用`docker-machine`在 VirtualBox 中创建和使用 Linux 虚拟机，请不要忘记在完成后进行清理:
```
$ docker-machine rm volume-test
```
# 第六章
1.  在一个由许多部分组成的系统中，至少一个部分的故障只是时间问题。为了避免出现这种情况时的任何停机时间，我们运行每个组件的多个实例。如果其中一个实例失败，还有其他实例可以满足请求。
2.  在分布式应用架构中，我们有许多活动部分。如果服务 A 需要访问服务 B 的实例，那么它不知道在哪里可以找到这样的实例。实例可以位于集群的任何随机节点上，它们甚至可以根据编排引擎的需要来来去去，因此我们不通过目标实例的 IP 地址和端口来识别目标实例，而是通过其名称和端口来识别。DNS 服务知道如何将服务名称解析为 IP 地址，因为它拥有集群中运行的所有服务实例的所有信息。
3.  断路器是一种机制，有助于避免由单个故障服务触发的分布式应用中的级联故障。断路器观察从一个服务到另一个服务的请求，并测量随时间推移的延迟以及请求失败或超时的次数。如果某个目标实例导致了太多的失败，那么对它的调用就会被拦截，并且错误代码会返回给调用者，如果可能的话，会立即给目标时间进行恢复，而调用者会立即知道它应该降级自己的服务，或者尝试使用目标服务的另一个实例。
4.  单块是由一个高度耦合的代码库组成的应用。如果对代码进行了更改，无论更改多小，都必须编译、打包和重新部署整个应用。由于整体只有很少的活动部件，因此在生产中很容易部署和监控。单片很难维护和扩展。分布式应用由许多松散耦合的服务组成。每项服务都源自其独立的源代码库。单个服务可以并且经常具有独立的生命周期。它们可以独立开发和修改。分布式应用更难管理和监控。
5.  当一个服务的当前运行版本(称为蓝色)被同一个服务的新版本(称为绿色)替换时，就会出现蓝绿色部署。更换过程没有任何停机时间，因为当蓝色版本仍在运行时，系统上安装了绿色版本的服务，一旦准备就绪，就需要对路由器的配置进行简单的更改，将流量引导至服务，这样流量就全部导向绿色而不是蓝色。
# 第七章
1.  三个核心元素是沙箱、端点和网络
2.  执行以下命令: