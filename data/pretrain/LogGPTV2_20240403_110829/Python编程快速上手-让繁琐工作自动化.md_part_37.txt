• 顺着网站的所有链接，备份整个网站。
• 拷贝一个论坛的所有信息。
• 复制一个在线商店中所有产品的目录。
requests 和 BeautifulSoup 模块很了不起，只要你能弄清楚需要传递给 requests.get()
的URL。但是，有时候这并不容易找到。或者，你希望编程浏览的网站可能要求你先
登录。selenium 模块将让你的程序具有执行这种复杂任务的能力。
第11章 从Web抓取信息 209
11.8 用 selenium 模块控制浏览器
selenium模块让Python直接控制浏览器，实际点击链接，填写登录信息，几乎
就像是有一个人类用户在与页面交互。与Requests和Beautiful Soup相比，Selenium
允许你用高级得多的方式与网页交互。但因为它启动了Web浏览器，假如你只是想
从网络上下载一些文件，会有点慢，并且难以在后台运行。
附录A有安装第三方模块的详细步骤。
11.8.1 启动selenium控制的浏览器
对于这些例子，你需要 FireFox 浏览器。它将成为你控制的浏览器。如果你还
没有FireFox，可以从http://getfirefox.com/免费下载它。
导入selenium的模块需要一点技巧。不是import selenium，而是要运行from selenium
import webdriver（为什么selenium模块要使用这种方式设置？答案超出了本书的范围）。
之后，你可以用selenium启动FireFox浏览器。在交互式环境中输入以下代码：
>>> from selenium import webdriver
>>> browser = webdriver.Firefox()
>>> type(browser)
>>> browser.get('http://inventwithpython.com')
你会注意到，当 webdriver.Firefox()被调用时，FireFox 浏览器启动了。对值
webdriver.Firefox()调用 type()，揭示它具有 WebDriver 数据类型。调用 browser.
get('http://inventwithpython.com')将浏览器指向 http://inventwithpython.com/。浏览器
应该看起来如图11-7所示。
图11-7 在IDLE中调用webdriver.Firefox()和get()后，FireFox浏览器出现了
210 Python编程快速上手——让繁琐工作自动化
11.8.2 在页面中寻找元素
WebDriver对象有好几种方法，用于在页面中寻找元素。它们被分成find_element_*和
find_elements_*方法。find_element_*方法返回一个 WebElement 对象，代表页面中
匹配查询的第一个元素。find_elements_*方法返回WebElement_*对象的列表，包含
页面中所有匹配的元素。
表 11-3 展示了 find_element_*和 find_elements_*方法的几个例子，它们在变量
browser中保存的WebDriver对象上调用。
表11-3 selenium的WebDriver方法，用于寻找元素
方法名 返回的WebElement对象/列表
browser.find_element_by_class_name(name) 使用CSS类name的元素
browser.find_elements_by_class_name(name)
browser.find_element_by_css_selector(selector) 匹配CSS selector的元素
browser.find_elements_by_css_selector(selector)
browser.find_element_by_id(id) 匹配id属性值的元素
browser.find_elements_by_id(id)
browser.find_element_by_link_text(text) 完全匹配提供的text的元素
browser.find_elements_by_link_text(text)
browser.find_element_by_partial_link_text(text) 包含提供的text的元素
browser.find_elements_by_partial_link_text(text)
browser.find_element_by_name(name) 匹配name属性值的元素
browser.find_elements_by_name(name)
browser.find_element_by_tag_name(name) 匹配标签name的元素
browser.find_elements_by_tag_name(name) (大小写无关，元素匹配'a'和'A')
除了*_by_tag_name()方法，所有方法的参数都是区分大小写的。如果页面上没
有元素匹配该方法要查找的元素，selenium模块就会抛出NoSuchElement异常。如
果你不希望这个异常让程序崩溃，就在代码中添加try和except语句。
一旦有了WebElement对象，就可以读取表11-4中的属性，或调用其中的方法，
了解它的更多功能。
表11-4 WebElement的属性和方法
属性或方法 描述
tag_name 标签名，例如 'a'表示元素
get_attribute(name) 该元素name属性的值
text 该元素内的文本，例如hello中的'hello'
clear() 对于文本字段或文本区域元素，清除其中输入的文本
is_displayed() 如果该元素可见，返回True，否则返回False
is_enabled() 对于输入元素，如果该元素启用，返回True，否则返回False
is_selected() 对于复选框或单选框元素，如果该元素被选中，选择True，否则返回False
location 一个字典，包含键'x'和'y'，表示该元素在页面上的位置
第11章 从Web抓取信息 211
例如，打开一个新的文件编辑器，输入以下程序：
from selenium import webdriver
browser = webdriver.Firefox()
browser.get('http://inventwithpython.com')
try:
elem = browser.find_element_by_class_name('bookcover')
print('Found  element with that class name!' % (elem.tag_name))
except:
print('Was not able to find an element with that name.')
这里我们打开 FireFox，让它指向一个 URL。在这个页面上，我们试图找到带
有类名'bookcover'的元素。如果找到这样的元素，我们就用tag_name属性将它的标
签名打印出来。如果没有找到这样的元素，就打印不同的信息。
这个程序的输出如下：
Found  element with that class name!
我们发现了一个元素带有类名'bookcover'，它的标签名是'img'。
11.8.3 点击页面
find_element_*和find_elements_*方法返回的WebElement 对象有一个click()方法，
模拟鼠标在该元素上点击。这个方法可以用于链接跳转，选择单选按钮，点击提交按钮，
或者触发该元素被鼠标点击时发生的任何事情。例如，在交互式环境中输入以下代码：
>>> from selenium import webdriver
>>> browser = webdriver.Firefox()
>>> browser.get('http://inventwithpython.com')
>>> linkElem = browser.find_element_by_link_text('Read It Online')
>>> type(linkElem)
>>> linkElem.click() # follows the "Read It Online" link
这段程序打开 FireFox，指向 http://inventwithpython.com/，取得元素的
WebElement对象，它的文本是“Read It Online”，然后模拟点击这个元素。就像你
自己点击这个链接一样，浏览器将跳转到这个链接。
11.8.4 填写并提交表单
向Web页面的文本字段发送击键，只要找到那个文本字段的或元
素，然后调用send_keys()方法。例如，在交互式环境中输入以下代码：
>>> from selenium import webdriver
>>> browser = webdriver.Firefox()
>>> browser.get('http://gmail.com')
>>> emailElem = browser.find_element_by_id('Email')
>>> emailElem.send_keys('PI:EMAIL')
>>> passwordElem = browser.find_element_by_id('Passwd')
>>> passwordElem.send_keys('12345')
>>> passwordElem.submit()
212 Python编程快速上手——让繁琐工作自动化
只要Gmail没有在本书出版后改变Username和Password文本字段的id，上面的
代码就会用提供的文本填写这些文本字段（你总是可以用浏览器的开发者工具验证
id）。在任何元素上调用submit()方法，都等同于点击该元素所在表单的Submit按钮（你
可以很容易地调用emailElem.submit()，代码所做的事情一样）。
11.8.5 发送特殊键
selenium 有一个模块，针对不能用字符串值输入的键盘击键。它的功能非常类
似于转义字符。这些值保存在selenium.webdriver.common.keys模块的属性中。由于
这个模块名非常长，所以在程序顶部运行from selenium.webdriver. common.keys import
Keys就比较容易。如果这么做，原来需要写from selenium. webdriver.common.keys的
地方，就只要写Keys。表11-5列出了常用的Keys变量。
表11-5 selenium.webdriver.common.keys模块中常用的变量
属性 含义
Keys.DOWN, Keys.UP, Keys.LEFT,Keys.RIGHT 键盘箭头键
Keys.ENTER, Keys.RETURN 回车和换行键
Keys.HOME, Keys.END, Home键、End键、PageUp键和Page Down键
Keys.PAGE_DOWN,Keys.PAGE_UP
Keys.ESCAPE, Keys.BACK_SPACE,Keys.DELETE Esc、Backspace和字母键
Keys.F1, Keys.F2, . . . , Keys.F12 键盘顶部的F 到F 键
1 12
Keys.TAB Tab键
例如，如果光标当前不在文本字段中，按下 home 和 end 键，将使浏览器滚动
到页面的顶部或底部。在交互式环境中输入以下代码，注意send_keys()调用是如何
滚动页面的：
>>> from selenium import webdriver
>>> from selenium.webdriver.common.keys import Keys
>>> browser = webdriver.Firefox()
>>> browser.get('http://nostarch.com')
>>> htmlElem = browser.find_element_by_tag_name('html')
>>> htmlElem.send_keys(Keys.END) # scrolls to bottom
>>> htmlElem.send_keys(Keys.HOME) # scrolls to top
标签是HTML文件中的基本标签：HTML文件的完整内容包含在
和标签之内。调用browser.find_element_by_tag_name('html')是像一般Web页
面发送按键的好地方。当你滚动到该页的底部，新的内容就会加载，这可能会有用。
11.8.6 点击浏览器按钮
利用以下的方法，selenium也可以模拟点击各种浏览器按钮：
browser.back()点击“返回”按钮。
第11章 从Web抓取信息 213
browser.forward()点击“前进”按钮。
browser.refresh()点击“刷新”按钮。
browser.quit()点击“关闭窗口”按钮。
11.8.7 关于selenium的更多信息
selenium 能做的事远远超出了这里描述的功能。它可以修改浏览器的 cookie，
截取页面快照，运行定制的JavaScript。要了解这些功能的更多信息，请参考文档：
http://selenium-python.readthedocs.org/。
11.9 小结
大多数无聊的任务并不限于操作你计算机中的文件。能够编程下载网页，可以
让你的程序扩展到因特网。requests模块让下载变得很简单，加上HTML的概念和选
择器的基本知识，你就可以利用BeautifulSoup模块，解析下载的网页。
但要全面自动化所有针对网页的任务，你需要利用 selenium 模块，直接控制
Web浏览器。selenium模块将允许你自动登录到网站，填写表单。因为Web浏览器是
在因特网上收发信息的最常见方式，所以这是程序员工具箱中一件了不起的工具。
11.10 习题
1．简单描述webbrowser、requests、BeautifulSoup和selenium模块之间的不同。
2．requests.get()返回哪种类型的对象？如何以字符串的方式访问下载的内容？
3．哪个Requests方法检查下载是否成功？
4．如何取得Requests响应的HTTP状态码？
5．如何将Requests响应保存到文件？
6．要打开浏览器的开发者工具，快捷键是什么？
7．在开发者工具中，如何查看页面上特定元素的HTML？
8．要找到id属性为main的元素，CSS选择器的字符串是什么？
9．要找到CSS类为highlight的元素，CSS选择器的字符串是什么？
10．要找到一个元素中所有的元素，CSS 选择器的字符串是什么？
11．要找到一个元素，它的 value 属性被设置为 favorite，CSS 选择器
的字符串是什么？
12．假定你有一个Beautiful Soup的Tag对象保存在变量spam中，针对的元素是
Hello world!。如何从这个Tag对象中取得字符串'Hello world!'？
13．如何将一个Beautiful Soup的Tag对象的所有属性保存到变量linkElem中？
214 Python编程快速上手——让繁琐工作自动化
14．运行import selenium没有效果。如何正确地导入selenium模块？
15．find_element_*和find_elements_*方法之间的区别是什么？
16．Selenium的WebElement对象有哪些方法来模拟鼠标点击和键盘击键？
17．你可以在Submit按钮的WebElement对象上调用send_keys(Keys.ENTER)，但
利用selenium，还有什么更容易的方法提交表单？
18．利用selenium如何模拟点击浏览器的“前进”、“返回”和“刷新”按钮？
11.11 实践项目
作为实践，编程完成下列任务。
11.11.1 命令行邮件程序
编写一个程序，通过命令行接受电子邮件地址和文本字符串。然后利用 selenium
登录到你的邮件账号，将该字符串作为邮件，发送到提供的地址（你也许希望为这
个程序建立一个独立的邮件账号）。
这是为程序添加通知功能的一种好方法。你也可以编写类似的程序，从
Facebook或Twitter账号发送消息。
11.11.2 图像网站下载
编写一个程序，访问图像共享网站，如Flickr或Imgur，查找一个类型的照片，
然后下载所有查询结果的图像。可以编写一个程序，访问任何具有查找功能的图像
网站。
11.11.3 2048
2048是一个简单的游戏，通过箭头向上、下、左、右移动滑块，让滑块合并。
实际上，你可以通过一遍一遍的重复“上、右、下、左”模式，获得相当高的分数。
编写一个程序，打开https://gabrielecirulli.github.io/2048/上的游戏，不断发送上、右、
下、左按键，自动玩游戏。
11.11.4 链接验证
编写一个程序，对给定的网页URL，下载该页面所有链接的页面。程序应该标
记出所有具有404“Not Found”状态码的页面，将它们作为坏链接输出。
第11章 从Web抓取信息 215
12
第 章
处理 Excel 电子表格
Excel是Windows环境下流行的、强大的电子表格应用。
openpyxl模块让Python程序能读取和修改Excel电子表格文