Author:剑残雪飘@深蓝攻防实验室
**itm4n** 在 **Background Intelligent Transfer Service** 中发现了 **任意文件移动**
漏洞，这里学习一下其中的思路。
## BITS
参考[链接](https://docs.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal)
> _程序员和系统管理员使用后台智能传输服务（BITS）从HTTP Web服务器和SMB文件共享下载文件或将文件上传到HTTP
> Web服务器和SMB文件共享。BITS将考虑传输成本以及网络使用情况，以便用户的前台工作影响尽可能小。即使重新启动后，BITS也可以处理网络中断，暂停并自动恢复传输。_
这个服务公开了几个COM对象，这些对象是“控件类”的不同迭代，并且还有一个“旧版控件类”。“旧版控件类”可以获取指向`IBackgroundCopyGroup`的指针，有两个未记录的方法`QueryNewJobInterface()`和`SetNotificationPointer()`。
如果用户调用`IBackgroundCopyGroup`接口的`CreateJob()`方法，就可以获得一个指向`IBackgroundCopyJob1`接口的指针，如果调用`QueryNewJobInterface()`方法，就可以获得一个指向新`IBackgroundCopyJob`接口的指针。
此调用是由服务处理的`without impersonation`，意味着用户可以在 `NT
AUTHORITY\SYSTEM`的context中获得一个指向`IBackgroundCopyJob`接口的指针
创建并将文件添加到队列后，将创建一个临时文件，服务完成文件写入后，通过`MoveFileEx()`重命名，漏洞点为用`QueryNewJobInterface()`返回的指针是`without
impersonation`，可以获取`NT AUTHORITY\SYSTEM`权限。
## BITS COM类如何工作？
后台智能传输服务公开了几个COM对象，可以使用[OleViewDotNet](https://github.com/tyranid/oleviewdotnet)列出这些[对象](https://github.com/tyranid/oleviewdotnet)
重点关注 **后台智能传输（BIT）控制类1.0** 和 **旧版BIT控制类**
及其主要接口，分别为`IBackgroundCopyManager`和`IBackgroundCopyMgr`。
### “new” BIT Control Class
BIT **控制类1.0的** 工作方式如下：
  1. 创建 **BIT控制类** （CLSID：`4991D34B-80A1-4291-83B6-3328366B9097`）的实例，需要一个指向`IBackgroundCopyQMgr`的指针，接口为`CoCreateInstance()`。
  2. 然后， **创建一个“作业”，** 并调用`IBackgroundCopyManager::CreateJob()`获取指向该`IBackgroundCopyJob`接口的指针。
  3. 然后，调用 **将文件添加** 到作业的`IBackgroundCopyJob::AddFile()`。这需要两个参数：URL和本地文件路径。该URL也可以是UNC路径。
  4. 最后，由于作业中创建 **一个`SUSPENDED`状态**，调用`IBackgroundCopyJob::Resume()`，并在工作的状态`TRANSFERRED`时调用`IBackgroundCopyJob::Complete()`。
    CoCreateInstance(CLSID_4991D34B-80A1-4291-83B6-3328366B9097)   -> IBackgroundCopyManager*
    |__ IBackgroundCopyManager::CreateJob()                        -> IBackgroundCopyJob*
        |__ IBackgroundCopyJob::AddFile(URL, LOCAL_FILE) 
        |__ IBackgroundCopyJob::Resume() 
        |__ IBackgroundCopyJob::Complete()
尽管BIT服务的运行方式为`NT AUTHORITY\SYSTEM`，但所有这些操作都是 **在模拟RPC客户端** 执行的 **，** 因此此处无法提权。
### _Legacy_ Control Class
在 **传统控制类** 的工作方式有些不同。在过程开始时需要一个额外的步骤。
  1. 创建 **传统BIT控制类** （CLSID：`69AD4AEE-51BE-439B-A92C-86AE490E8B30`）的实例，需要一个指向`IBackgroundCopyQMgr`的指针，接口为`CoCreateInstance()`。
  2. 然后， **创建** 调用`IBackgroundCopyQMgr::CreateGroup()`的组，获取指向该`IBackgroundCopyGroup`接口的指针
  3. 然后， **创建“作业”，** 并调用`IBackgroundCopyGroup::CreateJob()`以获取指向该`IBackgroundCopyJob1`接口的指针。
  4. 然后，将文件添加到“作业”中，该调用`IBackgroundCopyJob1::AddFiles()`将`FILESETINFO`结构作为参数。
  5. 最后，由于作业中创建 **一个`SUSPENDED`状态**，调用`IBackgroundCopyJob1::Resume()`，并在工作的状态`TRANSFERRED`时调用`IBackgroundCopyJob1::Complete()`。
    CoCreateInstance(CLSID_69AD4AEE-51BE-439B-A92C-86AE490E8B30)   -> IBackgroundCopyQMgr*
    |__ IBackgroundCopyQMgr::CreateGroup()                         -> IBackgroundCopyGroup*
        |__ IBackgroundCopyGroup::CreateJob()                      -> IBackgroundCopyJob1*
            |__ IBackgroundCopyJob1::AddFiles(FILESETINFO)
            |__ IBackgroundCopyJob1::Resume()
            |__ IBackgroundCopyJob1::Complete()
跟上面一样，尽管BIT服务运行为`NT AUTHORITY\SYSTEM`，但所有这些操作都是 **在模拟RPC客户端** 执行的，因此在这里也不能提权。
这两个COM类及其接口的用法在[MSDN](https://docs.microsoft.com/en-us/windows/win32/api/bits/nn-bits-ibackgroundcopymanager)有详细[记录](https://docs.microsoft.com/en-us/windows/win32/api/qmgr/nn-qmgr-ibackgroundcopyqmgr)。但是，在尝试了解`IBackgroundCopyGroup`接口如何工作时，注意到 **MSDN上列出**
的方法与其 **实际的Proxy定义** 有一些差异
`IBackgroundCopyGroup`接口的文档可[在此处获得](https://docs.microsoft.com/en-us/windows/win32/api/qmgr/nn-qmgr-ibackgroundcopygroup)。文档有 **13种方法** 。
但是，当使用OleViewDotNet查看此接口的代理定义时，我们可以看到它实际上有 **15个方法** 。
`Proc3`以`Proc15`匹配文档中的方法，但`Proc16`和`Proc17`不存在。
通过文档，我们知道相应的头文件是`Qmgr.h`。
看到两个未记录的方法：`QueryNewJobInterface()`和`SetNotificationPointer()`。
## 未公开的方法：“ QueryNewJobInterface（）”
参数结构
    virtual HRESULT STDMETHODCALLTYPE QueryNewJobInterface( 
                /* [in] */ __RPC__in REFIID iid,
                /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **pUnk) = 0;
打开`qmgr.dll`
首先，将输入`GUID`（接口ID）与硬编码值`37668d37-507e-4160-9316-26306d150b12`进行比较：如果不匹配，则该函数返回错误代码`0x80004001`
。否则，它将从调用函数`CJob::GetJobExternal()`。
硬编码的`GUID`值（`37668d37-507e-4160-9316-26306d150b12`）可以在`Bits.h`头文件中找到为`IID_IBackgroundCopyJob`
## 任意文件移动漏洞
在进一步进行分析之前，可以根据收集到的少量信息做出猜测。
  * 未记录方法的名称`QueryNewJobInterface()`。
  * 在 **传统** BIT控制类的`IBackgroundCopyGroup`接口中为exposed 。
  * 在`GUID`“新”的`IBackgroundCopyJob`接口为involved。
因此，可以假设此函数的目的是从 **Legacy Control Class** 获取指向 **“ new”**
`IBackgroundCopyJob`接口的指针。
  1. 创建指向 **Legacy Control Class** 的实例，获取一个指向`IBackgroundCopyQMgr`接口的指针
  2. 创建一个新组调用`IBackgroundCopyQMgr::CreateGroup()`，获取一个指向`IBackgroundCopyGroup`接口的指针
  3. 创建一个job，调用`IBackgroundCopyGroup::CreateJob()`，获取一个指向`IBackgroundCopyJob1`接口的指针
  4. 通过`IBackgroundCopyJob1::AddFiles()`添加文件
  5. 调用`IBackgroundCopyGroup::QueryNewJobInterface()`方法并获得指向未知接口的指针，假定它是一个`IBackgroundCopyJob`接口
  6. 通过调用`IBackgroundCopyJob`接口的`Resume()` 和 `Complete()`来恢复和完成job而不是`IBackgroundCopyJob1`接口
目标URL为`\\127.0.0.1\C$\Windows\System32\drivers\etc\hosts`。
使用Procmon分析了BIT服务
首先，可以看到该服务**在目标目录中创建了一个TMP文件。
调用该`Resume()`函数，该服务将开始读取目标文件`\\127.0.0.1\C$\Windows\System32\drivers\etc\hosts`并将其内容写入TMP文件，此时依然是
**impersonating the current user**
最后，将TMP文件重命名为`test.txt`，并且调用`MoveFileEx()`， **不再是当前用户** ，这意味着文件移动是在`NT
AUTHORITY\SYSTEM`的context中完成的
`SetRenameInformationFile`调用了win32的`MoveFileEx()`函数。
## 漏洞原理
`CreateJob()`方法在`IBackgroundCopyGroup`的`COldGroupInterface`类中实现
由于CFG的存在，看不出什么信息，这个方法调用`CreateJobInternal()`方法，`CreateJobInternal()`调用`CLockedJobWritePointer::ValidateAccess`
`CLockedJobWritePointer::ValidateAccess`调用了`CJob::CheckClientAccess`
`CheckClientAccess()`检查用户token并应用于当前线程的impersonation
这个执行流返回`CreateJobInternal`方法，并调用`CJob::GetOldJobExternal`返回`IBackgroundCopyJob1`类型的指针