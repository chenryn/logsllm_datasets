          System.out.println(0);
        } else {
          System.out.println(args[1].split(" ").length);
        }
        break;
      default:
        System.out.println("Sorry, you must be a premium member in order 
to run this command.");
    }
  }
那怎幺半呢其实这⾥还有⼀个⼩细节，对于log4j2的⽇志的实现来说其实是先将 ${xx} 当中的
内容做替换再按我们规定的输出格式输出(如果是你去实现这样的功能相信这是⽬前为⽌的最
优解)，具体代码这⾥就不展开了，接着说明
其实log4j2对⽇志输出中的 %d/%p 等其实是有⾃⼰的实现的，它有个注解⽐如下⾯这个是 %d
的他们都是有个注解 ConverterKeys ，因此我们可以看看这个有没有⼀些神奇的东西可以配
合我们完成
如何扫描并获取包下被指定注解的类
为了⽅便我这⾥直接⽤了reflections 框架（此框架依赖com.google.guava）
因此我们可以扫描指定包下的
得到如下结果
  org.reflections
  reflections
  0.9.11
  com.google.guava
  guava
  21.0
Reflections f = new Reflections("org.apache.logging.log4j.core");
Set> set = f.getTypesAnnotatedWith(ConverterKeys.class);
for (Class tmp:set){
  if (tmp.isInterface()){
    System.out.println("interface:"+tmp.getName());
  }else {
    System.out.println("class:"+tmp.getName());
  }
}
class:org.apache.logging.log4j.core.pattern.VariablesNotEmptyReplacementCo
nverter
class:org.apache.logging.log4j.core.pattern.UuidPatternConverter
class:org.apache.logging.log4j.core.pattern.LineLocationPatternConverter
class:org.apache.logging.log4j.core.pattern.HighlightConverter
class:org.apache.logging.log4j.core.pattern.LevelPatternConverter$SimpleLe
velPatternConverter
class:org.apache.logging.log4j.core.pattern.ThreadIdPatternConverter
class:org.apache.logging.log4j.core.pattern.IntegerPatternConverter
class:org.apache.logging.log4j.core.pattern.ClassNamePatternConverter
class:org.apache.logging.log4j.core.pattern.ProcessIdPatternConverter
class:org.apache.logging.log4j.core.pattern.MaxLengthConverter
class:org.apache.logging.log4j.core.pattern.LineSeparatorPatternConverter
class:org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Yel
low
class:org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Gre
en
class:org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter
class:org.apache.logging.log4j.core.pattern.MethodLocationPatternConverter
class:org.apache.logging.log4j.core.pattern.MessagePatternConverter
class:org.apache.logging.log4j.core.pattern.DatePatternConverter
class:org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Whi
te
class:org.apache.logging.log4j.core.pattern.EqualsIgnoreCaseReplacementCon
verter
class:org.apache.logging.log4j.core.pattern.NdcPatternConverter
class:org.apache.logging.log4j.core.pattern.SequenceNumberPatternConverter
class:org.apache.logging.log4j.core.pattern.RepeatPatternConverter
class:org.apache.logging.log4j.core.pattern.EncodingPatternConverter
class:org.apache.logging.log4j.core.pattern.MdcPatternConverter
class:org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Mag
enta
class:org.apache.logging.log4j.core.pattern.MessagePatternConverter$Simple
MessagePatternConverter
class:org.apache.logging.log4j.core.pattern.RegexReplacementConverter
class:org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Bla
ck
class:org.apache.logging.log4j.core.pattern.ThreadNamePatternConverter
class:org.apache.logging.log4j.core.pattern.NanoTimePatternConverter
class:org.apache.logging.log4j.core.pattern.RelativeTimePatternConverter
class:org.apache.logging.log4j.core.pattern.FileLocationPatternConverter
class:org.apache.logging.log4j.core.pattern.MessagePatternConverter$Render
ingPatternConverter
class:org.apache.logging.log4j.core.pattern.LevelPatternConverter
class:org.apache.logging.log4j.core.pattern.FileDatePatternConverter
class:org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Cya
n
class:org.apache.logging.log4j.core.pattern.EqualsReplacementConverter
选择合适的类完成challenge
这⾥引起我注意的有两个类，⼀个是和正则相关，⼀个是和重复相关的英⽂吸引了我
对应使⽤为
%replace{abc}{a}{d} => adc
%repeat{a}{3} => aaa
class:org.apache.logging.log4j.core.pattern.ThrowablePatternConverter
class:org.apache.logging.log4j.core.pattern.LoggerFqcnPatternConverter
class:org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConver
ter
class:org.apache.logging.log4j.core.pattern.ThreadPriorityPatternConverter
class:org.apache.logging.log4j.core.pattern.MessagePatternConverter$Format
tedMessagePatternConverter
class:org.apache.logging.log4j.core.pattern.MarkerSimpleNamePatternConvert
er
class:org.apache.logging.log4j.core.pattern.EndOfBatchPatternConverter
class:org.apache.logging.log4j.core.pattern.FullLocationPatternConverter
class:org.apache.logging.log4j.core.pattern.MapPatternConverter
class:org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Red
class:org.apache.logging.log4j.core.pattern.MarkerPatternConverter
class:org.apache.logging.log4j.core.pattern.LoggerPatternConverter
class:org.apache.logging.log4j.core.pattern.LevelPatternConverter$LevelMap
LevelPatternConverter
class:org.apache.logging.log4j.core.pattern.StyleConverter
class:org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Blu
e
class:org.apache.logging.log4j.core.pattern.RegexReplacementConverter
class:org.apache.logging.log4j.core.pattern.RepeatPatternConverter
分别看看RegexReplacementConverter
RepeatPatternConverter
结合这两个功能就能⼤胆猜想能否通过repeat构造超长字符串来消耗正则引擎的性能呢？答案
是否？其实代码⾥很清楚了，只有 RegexReplacementConverter 有
个 List formatters = parser.parse(options[0]); 这个parse
的操作并且这个0决定只能在第⼀位，第⼀位是什么就是要替换的类，⽽repeat⾥⾯显然没
有，因此这两个也不能嵌套去完成这个题⽬了
那么还有什么⽅式呢？那就是redos，我们只需要构造⼀个包含具有⾃我重复的重复性分组的
正则表达式即可，⽐如在Cookia师傅的博⽂当中找到的(毕竟我懒)
因此我们可以构造正则 ^.{x}(.).*$ ，其中x为数字，分别获取第⼀....n位对其进⾏重复之后
再在后⾯加上任意字符 x ，其实就是构造出 aaaaaaaax 的形式
但我发现在jdk8上能成功的redos却在打的时候没⽤？那个给的docker我也没法构建，后⾯发现
⾼版本jdk9+以后和jdk8上的有区别
可以看到RSPEC-2631中发现ReDoS 问题已在 Java 9 及更⾼版本中处理，但是功夫不负有⼼
⼈，又在stackoverflow的主题is-java-redos-vulnerable当中发现，明显可以看到这句话通过增
加 () 来增加复杂度，但是这次我在本地9-11版本(当然每个⼤版本我只有⼀个⼩版本的jre可能
不全⾯)都测试通过成功redos
但是在题⽬环境仍然是完成解析告诉我 Sensitive information detected in output. 
Censored for security reasons.
最后我决定再为它加点复杂度也就是在最后加⼀个 $ ，也就是 ((C+)+)+$
接下来就是写个脚本慢慢跑的问题，也是看⼼态和代理给不给⼒的问题
参考⽂章
https://blog.csdn.net/Q176782/article/details/78288734
http://cookia.cc/2017/09/13/redos/
https://www.cnblogs.com/ggband/p/11668879.html
https://rules.sonarsource.com/java/RSPEC-2631
https://stackoverflow.com/questions/53048859/is-java-redos-vulnerable