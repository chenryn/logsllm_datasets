 其实每次递归调用都在重复做同样一件事，就
 把每次循环的中间结果累积起来，
 没有任何变量的值发生过
，这种情况下递归程
，在整个递归调用
在这个例子中n的
每次循环要改变
子语句称为循环
就把子
5
下一页
---
## Page 98
2、编写程序数一下1到100的所有整数中出现多少次数字9。在写程序之前先把这些问题考虑清
1、用循环解决第3节“递归"的所有习题，体会递归和循环这两种不同的思路。
习题 请点评
能证明。许多世界难题都是这样的：描述无比简单，连小学生都能看懂，但证明却无比困难。
地检查控制表达式。至于这个循环有没有可能是死循环，这是著名的3x+1问题，
对某些正整数n是死循环呢？其实这个例子只是给读者提提兴趣，
于1了。读者可以再试几个数都是如此，
果n是奇数，
如果n为正整数，
掉就成了死循环。有的时候是不是死循环并不是那么一目了然：
写死循环（有的时候这是必要的），
如while (1)
递归函数如果写得不小心就会变成无穷递归，
来麻烦，
是一种Side Effect。第4 节“全局变量、
有Side Effect的，而C语言的函数可以有Side Effect，
函数式编程的"函数"类似于数学函数的概念，回顾一
Programming)
称为函数式编程（Functional Programming）
楚：
是：7、22、
一会儿变小，
（lnfiniteLoop）或者叫死循环。如果while语句的控制表达式永远为真就成了一个死循环，
哪
进
式
式
此
上一页
1．这个问题中的循环变量是什么？
3
里会读取它的值，
2.
行。所谓"一致的方式"是说应该有一套统一的规则，规定在一段代码中哪里会对某个变量赋值、
避免Side Effect，
不要以为"变量可以多次赋值"是天经地义的，有很多编程语言可以完全采用函数式编程的模
在第2节“iflelse语句"的习题1写过取一个整数的个位和十位的表达式，这两个表达式怎样用
这个问题中的累加器是什么？用加法还是用乘法累积？
但要记住，
到程序中？
while (n !=,
如果一
 就把n乘3加1。一般来说循环变量要么递增要么递减,
11、34、17、52、26、13、40、20、10、5、
 最终会不会变成1呢？可以找个数试试，例如一开始n等于7，
，给变量多次赋值时要格外小心，
这个循环能跳出来吗？循环体所做的事情是：如果n是偶数，
if (n%
 else {
比如在第2.4节“errno与perror函数"会讲到访问errno的规则。
 例如LISP、Haskell、Erlang等。用C语言编程主要还是采用Imperative的模
n=n＊3+1;
u
2
==0） {
2;
，在上面的例子中，
，但无论试多少个数也不能代替证明，
局部变量和作用域"指出,
同样道理，
上一级
 在代码中多次读写同一变量应该以一种一致的方
而后一种思路称为命令式编程（Imperative 
下第1节“数学函数"所讲的，
比如在一个函数中修改某个全局变量的值就
，循环如果写得不小心就会变成无限循环
16、8、4、2、
 同时提醒读者写循环时要有意识
全局变量被多次赋值会给调试
 但如果把n = n－1;这句漏
 每次循环后n的值依次
1。最后n确实等 
这个循环有没有可能
，就把n除以2，如
，目前世界上还无人
，数学函数是没
 例 
8
医
---
## Page 99
第6章循环语句
全国嵌入式人才培训基地
起始页
2. do/while语句
---
## Page 100
更易读。上面的factorial也可以改用do/while循环来写：
语句→do 语句 while (控制表达式);
do/while语句的语法是:
2. do/while语句 请点评
1. while语句
有意义一些，不过用i、j、k给循环变量起名是很常见的。
成i〈n就错了,
写循环一定要注意循环即将结束时控制表达式的临界条件是否准确，
的for循环都可以改写成while循环,
上一页
int factorial(int n)
，当i== n时跳出循环,
return result;
int
int result = l;
result = result * i;
1;
+ 1;
只不过有些情况下用do/while或for循环写起来更简便，代码
全国嵌入式人才培训基地
，最后的结果中就少乘了一个n。虽然变量名应该尽可能起得
全国嵌入式人才培训基地
第6章循环语句
2. do/while语句
起始页
上面的循环结束条件如果写
3. for语句
100
---
## Page 101
从这种等价形式来看，控制表达式1和3都可以为空,
如果不考虑循环体中包含continue语句的情况（稍后介绍continue语句），这个for循环等价于下
3. for语句请点评
产生同样的Side Effect，
区别就在于返回值不同。同理,
参数值（而不是参数值加1）
Operator）。如果把i++这个表达式看作一个函数调用，
++和--运算符也可以用在变量后面，
把++i这个表达式看作一个函数调用，
类似地，
其中++i这个表达式相当于i=i ＋1ll，++称为前缀自增运算符（Prefix Increment Operator）
上一节do/while循环的例子可以改写成for循环:
面的while循环:
for(控制表达式1;控制表达式2;控制表达式3)语句
生一
式。for语句的语法是：
前两节我们在while和do/while循环中使用循环变量，其实使用循环变量最常见的是for循环这种形
上一页
一个Side Effect，就是把变量i的值增加了1。
++
int factorial(int n)
while（控制表达式2）{
控制表达式1；
!
return result;
int result = 1;
int
，就是把变量i的值减了1。
 result = result * i;
..........
，此外也产生一个Side Effect，就是把变量i的值增加了1，
--i返回减1之后的值，
例如i++和i--
除了传入一个参数返回一个值（等于参数值加1）之外，还产
全国嵌入式人才培训基地
第6章循环语句
3. for语句
为了和前缀运算符区别，这两个运算符称为后
如果控制表达式2为空，则认为控制表达式2的
，但控制表达式2是必不可少的，
，而i--返回减1之前的值，
，传入一个参数返回一个值，返回值就等于
[K&R]
，但这两个表达式都
，例如for（;l;)
它和++i的
下一页
---
## Page 102
[9]这两种写法在语义上稍有区别，详见第2.1节“复合赋值运算符”。
很多原本是名词的都被当成动词用，字典都跟不上时代了，再比如transition也是如此。
[10] increment和decrement这两个词很有意思,
要加上选项-std=c99。这种语法也是从C++借鉴的，考虑到兼容性不建议使用这种写法。
2. do/while语句
用，在计算机术语中，
如果这样定义，那么变量i只是for循环中的局部变量而不是整个函数的局部变量，
量i可以只在for循环中定义：
C99规定了一种新的for循环语法，
if语句"讲过的语句块中的局部变量，
能再++了
再+b还是表达式，
入下一阶段语法解析，a是一个表达式，
个++运算符。
↑Token，
法解析阶段，
我们看一个有意思的问题：
用[K&R]的简洁风格。
中++、--运算符总是单独组成一
用++、--和其它表达式的组合使得代码非常简洁。为了让初学者循序渐进，在接下来的几章
使用
++运算
两个+号
int factorial(int n)
 a后面有两个以上的+号，
所以最终编译器会报错。
符要求操作数能做左值，
运算符会使程序更加简洁，
：再往后解析只剩一个+号了
而
号也是合
return result;
定会把两个+号当作一
？应该按第一种方式理解。编译的过程分为词法解析和语法解析两个阶段，
，它们当动词用应该理解为increase by one和decrease by one。现代英语中
法的Token（可以是自增运算符）
result
a+++++b这个表达式如何理解？应该理解成a+++++b还是a++
一个表达式而不跟其它表达式组合，从第11章排序与查找开始将采
，在控制表达式1的位置可以有变量定义。例如上例的循环变
，在循环结束后就不能再使用i这个变量了。这个程序用gcc编译
 a能做左值所以a++没问题，但表达式a++的值只能做右值，
 在C语言中-
 result 
，但也会影响程序的可读性,
全国嵌入式人才培训基地
，表达式++还是表达式，表达式再++还是表达式，表达式
一个Token。再往后解析仍然有两个以上的+号，
 是加法运算符。再往后解析是变量名b。词法解析之后进
起始页
上一级
，大多数字典都说它们是名词，但经常被当成动词
一个+号是合法的Token（可以是加法运算符或正
 根据最长匹配原则,
中的示例代码大量运
 4. break和continue语句
，编译器绝不会止步
，相当于第1节
所以又是-
，变量名a是
102
下三
在
不
页
词
---
## Page 103
变量i是不同的两个变量，其实在调用is_prime函数时主程序的局部变量i和参数n的值相等。
4. break和continue语句 请点评
在主程序中，从1到100依次检查每个数是不是素数，
如果全都不能整除就足以证明n是素数了，
等于n。注意检查临界条件：2应该是素数，如果n是2，则循环体一次也不执行，
不执行i++。
is_prime函数从2到n-1依次检查有没有能被n整除的数,
循环。例如下面的代码打印1到100之间的素数：
行continue语句之后测试控制表达式，
当前循环后又回到循环体的开头准备执行下一次循环。对于while循环和do/while循环，
以用来跳出循环体。
等于n，
上一页
例6.1.求1-100的素数
，在程序中也判定为素数。其实没有必要从2一直检查到n-1，只要从2检查到sqrt(n）
因此，
int main(void)
int is_prime(int n)
#include 
如果n不是素数,
 continue语句也会终止当前循环，
return 0;
else
(i == n)
，因此用continue语句。
 return 1;
printf("%d\n"，i);
return
则循环结束后i一定小于n,
(n %
4. break和continue语句
 如果值为真则继续执行下-
全国嵌入式人才培训基地
，请读者想一想为什么。
0;
 break;
第 6 章循环语句
continue;
i
如果不是素数，
，和break语句不同的是，continue语句终止
如果有就说明n不是素数，
，用来跳出switch语句块，这个语句也可
 如果n是素数,
一次循环；对于for循环，
并不直接跳出循环，而
 则循环结束后i一定
但i的初值就是2，
立刻跳出循环而
、执
执
103
下二
次
贝
---
## Page 104
3. for语句
两种形式就不等价了，想一想为什么不等价了？
1、求素数这个程序只是为了说明break和continue的用法才这么写的，其实完全可以不
习题请点评
2、
上一页
上一节讲过怎样把for循环改写成等价的while循环，但也提到如果循环体中有continue语句这
请读者修改一
-下控制流程，去掉break和continue而保持功能不变。
全国嵌入式人才培训基地
起始页
上一级
5.嵌套循环
下一页
---
## Page 105
现在内循环的循环变量就不能再用i了,
环。如果把那个函数的代码拿出来写就更清楚了：
5.嵌套循环 请点评
用循环也可以打印表格式的数据，
或switch，continue也只能终止最内层循环并回到该循环的开头。
用i代替。在有多层循环或switch嵌套的情况下，
上一节求素数的例子在循环中调用一个函数，
例6.3.打印小九九
例6.2.用嵌套循环求1-100的素数
int main(void)
#include 
int main(void)
#include 
return 0;
return 0;
for
比如打印小九九乘法表：
if (j == i)
i<=9; i++） {
，而是改用，原来程序中is_prime函数的参数n现在直接
全国嵌入式人才培训基地
printf("%d\n"，i);
^=
第6章循环语句
5.嵌套循环
 100; i++)
 j<=9;
，而那个函数里面又有一个循环，这其实是一种嵌套循
，break只能跳出最内层的循环 
 break;
j++）
：
， i*j);
105
下一页
---
## Page 106
如果用偶数做参数则打印错误提示。
如果调用diamond(5，‘+')则打印：
2、编写函数diamond打印一个菱形。
九九：
结果有一位数的有两位数的，
4. break和continue语句
齐
内循环每次打印一个数，
题请点评
了，
上面打印的小九九有一半数据是重复的，
，所以Tab字符称为制表符。
0
369
2２2
2
468
47
58
02468
48
L
２33
22
9
826
0
51
0
，数与数之间用两个空格隔开，
505
23
9
6
5.0
２58１4７
 这个表格很不整齐，
1
33
06284
22
如果调用diamond(3，
34
8
5２
604826
62
L
6
全国嵌入式人才培训基地
36
 因为8*9和9*8的结果一样。请修改程序打印这样的小
起始页
2
3
5
上一级
，如果把打印语句改为printf("%d\t"，i*j);就整
，外循环每次打印一行。结果如下: