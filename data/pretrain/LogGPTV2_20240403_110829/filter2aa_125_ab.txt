Internal Steps for a Syn Scan
21 Listener goes into loop polling pcap and IPC ﬁle descriptor.
22 Master sends Sender a "batch" workunit containing a
‘large’ unit of work to perform.
23 Sender creates a linked list of function pointers to loop on
and goes into a batch loop.
24 Master goes into loop reading Sender and Listener ﬁle
descriptors (mostly from the listener), recording information
that it was asked to record.
25 Sender ﬁnishes work loop, and sends a WORKDONE
message back to the Master.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Internal Steps for a Syn Scan
26 Master checks if it has more work, but does not so goes
into a scan timeout state.
27 Master goes into reporting state after timeout ﬁnishes,
perhaps recording information and displaying it.
28 Master tells Sender to QUIT.
29 Master tells Listener to QUIT.
30 Master awaits the 2 SIGCHLD signals, and itself exits.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
TCP Stream Stuff
Normal stacks are designed for situations where you know
all of the Source_IP,Source_port:Dest_IP,Dest_Port
combinations that you will want to use.
Unicornscan’s stack was designed for situations where you
know the Source_IP,Source_port side, but have a large list
of Dest_IP,Dest_Port possibilities.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
TCP Stream Stuff
This is because we don’t know who we are going to
connect to, or how many things we are going to connect to.
We don’t have a ﬁxed size table because we have _no_
idea how big its going to get
We should assume that O(log2N)’ish is better than O(1) if
we don’t have bounds (worst case)
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
State Table Math
Why?
We can only have O(1) if we know the size of our data set,
we do not. If we have ﬁxed sized tables, we need to guess
high, even though we generally wont ﬁll the table (we don’t
know our endpoints, once again)
Some Numbers for entire Internet on one port:
Table: 2 ˆ 32 * sizeof(key) = 4294967296 * 8 =
34,359,738,368 bytes
Or roughly 32GB
(that’s just for the index keys)
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
State Table Math
If that seems silly to you, understand that devices that do 3way
handshakes for every address and port (cellphone networks,
DDoS Protection, etc) are becoming more common. While we
will do a 3 way handshake, we will not actually transfer data on
every connection, we need to ﬁnd a middle ground.
We need to be able to withstand networks that have fake
3way handshakes and ones that do not.
We need an adaptable method that only uses memory
when it needs to, without throwing away performance.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
TCP State Tracking
We use a binary tree (red-black balancing) as a good
compromise, however this is easy to change inside the code,
and in the future possibly heuristic detection can switch from a
O(1) table to a binary tree on the ﬂy when it detects trouble.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
TCP State Tracking
Some numbers from an overloaded state table (average out of
10, input was mostly random)
objects from (rbtree.o chtbl.o) code were linked into test
harness for measurement
(rdtsc was inlined before and after calls to measured
functions)
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
TCP State Tracking
CPU:
Intel Celeron(R) M at 1.4 Ghz with 1M of L2 cache
and 32K of I/D L1 cache.
Compiler:
GNU gcc 3.3.4 (CFLAGS -O2) / Binutils 2.15.92.0.2
OS:
GNU/Linux 2.6.12
804a158:
0f 31
rdtsc
...
804a176:
e8 65 fa ff ff
call
8049be0 
...
804a158:
0f 31
rdtsc
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
TCP State Tracking
(65536 Items, in 73189 Slots CHT load factor of 1.12)
RB Tree insert: 2426
RB Tree search: 2068
CHT insert : 571
CHT search : 466
(65536 Items, in 4673 Slots CHT load factor of 14.02)
RB Tree insert: 2528
RB Tree search: 1950
CHT insert : 4267
CHT search : 3924
(65536 Items, in 313 Slots CHT load factor of 209.38)
RB Tree insert: 2577
Tree search: 1875
CHT insert :55294
CHT search :50769
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
TCP State Tracking - Future
Future improvements will likely include a hybrid MFU (not
MRU) table cache in front of the rbtree.
Why?
we need to avoid caching RST+ACK’s (most frequent
situation is a port to be closed, and we still need to report
this condition)
IPC is currently via Unix domain sockets or TCP sockets
(more transports can be added)
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
payloads.conf
/* pc anywhere */
udp 5632 -1 1 {
"NQ"
};
udp 5632 -1 1 {
"ST"
};
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
payloads.conf - Cont
/* Open Relay */
tcp 25 -1 1 {
"HELO FOO\r\n"
"Mail From: PI:EMAIL\r\n"
"Rcpt To: PI:EMAIL\r\n"
"Data\r\n"
"Subject: Testing for Open Relay\r\n"
"\r\n"
"This is only a test\r\n"
".\r\n"
"\r\n"
"\r\n"
};
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
HTTP HEAD Request Source
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
HTTP GET Request In Action
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
All Ports Open - Nmap
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
All Ports Open - Unicornscan
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Static Payload Example
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Static Payload Example - Cont
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Fireworks
1
TCP Connect Scan
2
If port 80 syn/ack’s, perform OS detection
3
3-way handshake completes
4
Unicornscan generates a metamorphic 1st stage encoder
before encoding the OS speciﬁc stage 1 exploit payload
5
Payload sent
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Fireworks - Cont
6
If successful
Truncate Apache error log
Create a socket
Connect back to a pre-arranged address
Tell the pre-arranged address what platform it is
Ask the pre-arranged address for OS speciﬁc stage 2
mmap a memory area that is writable and executable
read from the 2nd stage server while writing
then transfer control to the 2nd stage code
Will not write to the disk
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Recapitulation
What did I just see?
A new method for TCP state tracking (Scatter Connect)
Unicornscan is a distributed Stimulus/Response framework
(not a port scanner)
Or to quote Winhat:
If x=4 and y=8, then I just wasted your time because I rule!
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
The End
Thank you for your time.
For more information, see:
http://www.unicornscan.org
Or just write us:
Jack at dyadsecurity dot com
Robert at dyadsecurity dot com
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.