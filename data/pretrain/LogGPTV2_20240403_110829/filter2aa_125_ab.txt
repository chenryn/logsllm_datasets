# Internal Steps for a Syn Scan

1. The Listener enters a loop, polling the pcap and IPC file descriptors.
2. The Master sends a "batch" workunit to the Sender, containing a large unit of work.
3. The Sender creates a linked list of function pointers and enters a batch loop.
4. The Master reads the Sender and Listener file descriptors (primarily from the Listener), recording the requested information.
5. The Sender completes the work loop and sends a WORKDONE message back to the Master.
6. The Master checks if there is more work; if not, it enters a scan timeout state.
7. After the timeout, the Master transitions to a reporting state, potentially recording and displaying information.
8. The Master instructs the Sender to QUIT.
9. The Master instructs the Listener to QUIT.
10. The Master waits for two SIGCHLD signals before exiting.

## TCP Stream Stuff

Traditional network stacks are designed for scenarios where all Source_IP, Source_port, Dest_IP, and Dest_Port combinations are known. Unicornscan's stack, however, is designed for situations where only the Source_IP and Source_port are known, but there is a large list of possible Dest_IP and Dest_Port combinations.

### Why This Approach?

- **Unknown Connections**: We don't know in advance which and how many connections will be made.
- **Dynamic Memory Usage**: A fixed-size table is impractical because we have no idea how large it needs to be.
- **Performance Considerations**: Assuming O(log2N) performance is better than O(1) when bounds are unknown.

### State Table Math

- **O(1) vs. O(log2N)**: O(1) performance is only achievable if the size of the dataset is known. For dynamic and unpredictable datasets, a binary tree (e.g., red-black tree) is a better compromise.
- **Memory Requirements**: For the entire Internet on one port, a fixed-size table would require 32GB just for index keys, which is impractical.

### TCP State Tracking

- **Binary Tree (Red-Black Balancing)**: Used as a compromise between memory usage and performance. This can be changed in the code, and future enhancements may include heuristic detection to switch between O(1) tables and binary trees dynamically.
- **Performance Metrics**: Benchmarks show that the red-black tree performs well even under high load conditions.

### Future Improvements

- **Hybrid MFU Cache**: A hybrid Most Frequently Used (MFU) cache in front of the red-black tree to avoid caching RST+ACKs.
- **IPC Enhancements**: Current IPC is via Unix domain sockets or TCP sockets, with the potential for additional transports.

## Example Configurations

### payloads.conf
```conf
/* pc anywhere */
udp 5632 -1 1 {
    "NQ"
};
udp 5632 -1 1 {
    "ST"
};

/* Open Relay */
tcp 25 -1 1 {
    "HELO FOO\r\n"
    "Mail From: PI:EMAIL\r\n"
    "Rcpt To: PI:EMAIL\r\n"
    "Data\r\n"
    "Subject: Testing for Open Relay\r\n"
    "\r\n"
    "This is only a test\r\n"
    ".\r\n"
    "\r\n"
    "\r\n"
};
```

## Fireworks

1. **TCP Connect Scan**: Perform a TCP connect scan.
2. **OS Detection**: If port 80 responds with a SYN/ACK, perform OS detection.
3. **3-Way Handshake**: Complete the 3-way handshake.
4. **Payload Generation**: Generate a metamorphic first-stage encoder and encode the OS-specific stage 1 exploit payload.
5. **Payload Delivery**: Send the payload.
6. **Success Handling**:
   - Truncate the Apache error log.
   - Create a socket and connect back to a pre-arranged address.
   - Report the platform to the pre-arranged address.
   - Request OS-specific stage 2 from the pre-arranged address.
   - Map a writable and executable memory area.
   - Read from the second-stage server while writing.
   - Transfer control to the second-stage code without writing to the disk.

## Recapitulation

- **Scatter Connect**: A new method for TCP state tracking.
- **Unicornscan**: A distributed Stimulus/Response framework, not just a port scanner.
- **Quote**: "If x=4 and y=8, then I just wasted your time because I rule!"

## The End

Thank you for your time. For more information, visit [http://www.unicornscan.org](http://www.unicornscan.org) or contact us at:
- Jack: jack@dyadsecurity.com
- Robert: robert@dyadsecurity.com

Robert E. Lee & Jack C. Louis  
Introducing Unicornscan â€“ Dyad Labs, Inc.