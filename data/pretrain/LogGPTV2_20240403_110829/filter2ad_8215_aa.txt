**译者：知道创宇404实验室翻译组  
原文链接:**
2021年底，Volexity 发现了一起入侵事件，发生在网络安全监控服务的局部环境。Volexity 检测到一个运行
**[frp](https://github.com/fatedier/frp)**
的系统，或称为快速反向代理，随后不久检测到内部端口扫描。这个流量被确定为未经授权的，该运行 macOS 11.6(Big Sur)的 MacBook
Pro系统，被分离出来进行进一步的分析。Volexity 能够运行 [Surge
Collect](https://www.volexity.com/products-overview/surge/)
以获取系统内存(RAM)并从机器中选择需要的文件进行分析。因而 一个macOS 变种的恶意软件植入被发现， Volexity 称其为 **GIMMICK**
。在之前的几个事件中，Volexity 都遇到过 Windows 版本的恶意软件。
中国间谍黑客 [Storm Cloud](https://www.volexity.com/blog/2020/03/31/storm-cloud-unleashed-tibetan-community-focus-of-highly-targeted-fake-flash-campaign/),以攻击亚洲各地的组织而闻名，他在定向攻击中使用了 GIMMICK。它是一个功能丰富、多平台的恶意软件组，使用公共云托管服务(如
Google Drive)作为命令控制(C2)通道。新发现的 macOS 变体主要使用 Objective c 编写，Windows
版本使用两种语言编写,.NET 和 Delphi。尽管使用的编程语言和针对的操作系统存在核心差异，但 Volexity
通过共享的C2架构、文件路径和所有变体使用的行为模式，判断两个变体是同款恶意软件。
图1. GIMMICK 工作流
这篇博文深入分析了GIMMICK的 macOS 变体，同时也展示了 Windows版本 变体的特点。Volexity
通过对受感染系统的内存分析发现了这个样本，并且从内存和磁盘中恢复了植入程序。文件名和安装路径对受害者系统来说是唯一的，并且以一种旨在与用户的工作性质相融合的方式进行了配置。此外，GIMMICK
被配置为只在工作日与其基于 Google drive 的 c2服务器通信，以便进一步融入目标环境中的网络通信。
Volexity 能够从硬盘获得的文件 SHA1散列是“ fe3a3e65b86d2b07654f9a6104c8cb392c88b7e8”。
与苹果密切合作，在他们的用户中加入了对 GIMMICK 恶意软件的防护。2022年3月17日，苹果向 XProtect 和 MRT
推出了新的签名，以阻止和删除
GIMMICK。虽然在默认情况下，用户可以通过验证“‘安装系统数据文件和安全更新’框在他们的设置中被选中”来确认他们是受到保护的([说明点此处](https://support.apple.com/guide/mac-help/get-macos-updates-mchlpx1065/mac))。
### 启动和初始化
在 macOS 上，GIMMICK 支持作为系统上的守护进程启动或由用户启动。如果直接由用户启动，它将通过植入一个包含内容的 PLIST
文件来安装自身作为启动代理，安装到 _/Users/ /Library/LaunchAgents_，如下所示。二进制、 PLIST
和代理的名称根据样本而有所不同。在 Volexity 观察到的案例中，植入物被设计成模仿目标用户通常启动的应用程序。值得注意的是，Volexity
发现的GIMMICK 的 Windows 版本没有想要建立自己的持久性。
    Label
    com. /[applicationname].va.plist
    ProgramArguments
    /Users/#####/Library/Preferences/[pathto/binary]>/
    RunAtLoad
    StartInterval
    30
    ThrottleInterval
    2
    WorkingDirectory
    /Users//Library/Preferences/[applicationname]string>
同样，植入程序提供了一个卸载函数，可以通过在命令行上添加参数“ uninstall”来实现。这会删除植程序物和所有相关文件，然后终止进程。
在初始化过程中，样本使用旋转加法算法解码恶意软件操作中至关重要的几段数据。
第一个解码循环产生一个 JSON 对象，其中包含OAuth2凭据，用于建立到 Google Drive 的会话。图2显示了一个 JSON 对象的例子:
图2. 一个示例 JSON 对象，其中包含使用 Google Drive 进行身份验证所需的凭据
第二个循环解码32字节的字符串“943c3743f72f06e58e60fa147481db83”。此字符串通过一个附加的转换阶段运行，该转换阶段一次将两个字符转换为数字表示形式，并将生成的字节写入缓冲区。在对[CCCrypt()](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/CCCrypt.3cc.html)
函数的多个调用中，这个缓冲区被用作 AES 密钥。
图3. AES 密钥转换
最后的解码完成，其结果是一个200字节的配置数据二进制 blob对象，只有一些看似可见的数据边界。
图4: Config blob
除了这种数据混淆，以及对某些外部文件使用 AES 之外，恶意软件几乎不会尝试混淆系统中它的功能或它的存在。
### C2 协议
初始化后， GIMMICK恶意软件的操作是高度异步的。之前的 Windows 恶意软件变种已经使用
程序内部线程池技术来应对这个问题。技术是由`Delphi的 System.Threading.TThreadPool`和 `.NET的
System.Thread and System.Action`提供的。然而，macOS 的变种使用苹果的[Grand Central Dispatch
(GCD)](https://en.wikipedia.org/wiki/Grand_Central_Dispatch)技术来管理协议。此特性允许开发人员将任务分发到系统管理的线程池中，以便以后进行处理。这些任务被封装到称为[blocks](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html)的自包含对象中，这些对象被安排在调度队列上进行处理。GCD的确切结构和执行细节相当复杂，超出了本文件的范围,dan
附录中提供了一些资源。
恶意软件中有三个自定义的 ObjectiveC 类,管理C2协议的关键方面: DriveManager、 FileManager 和
GCDTimerManager。
DriveManager有几个职责:
  * 管理 Google Drive 和代理会话。
  * 在内存中维护 googledrive 目录层次结构的本地映射。
  * 管理 Google Drive 会话上同步任务的锁。
  * 处理 Google Drive 会话的下载和上传任务。
根据恶意软件枚举命令文件的方式，谷歌驱动器似乎被每个受感染主机的目录填充。此目录的名称因平台而略有不同。Windows植入程序会生成一个独特的 GUID
作为其 ID，而 macOS 植入程序则使用苹果自己的 Hardware UUID。
FileManager 管理一个本地目录层次结构，其中包含C2信息和处于不同完成阶段的命令任务。一些旧版本的 GIMMICK
使用了略有不同的目录名称，但它们在最近的几个变体中保持了一致性。macOS
植入程序将这个层次结构存储在应用程序主[包]((https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFBundles/BundleTypes/BundleTypes.html)
的根目录中一个名为“ MGD”的目录中。目录结构中的每个文件夹都被指定用于在 c2进程中保存单一类型的文件。下表给出了所有目录及其用途。
**Name** | **解释** | **内容**  
---|---|---  
tmp | Temporary | 用于写入文件的临时安全位置; 此目录中没有检查文件的调度代码  
c | Credentials | 存储初始化期间解码的 AES 加密凭据 JSON  
e | Errors | 将错误日志存储为单独的文件; 错误报告为四位数的不透明整数值  
p | Proxies | 存储由主机和端口组成的代理定义文件，中间以“:”分隔  
u | Upload Command | 存储的 AES 加密的命令结果，等待上传  
d | Download Command | 存储挂起的下载命令文件，每个文件包含要下载的命令文件的Google Drive 路径  
ds D | Download Success | 下载的等待处理的AES加密命令文件的存储位置  
df | Download Failed | 失败的下载命令的临时位置，在可以重试或清除它们前放在这里  