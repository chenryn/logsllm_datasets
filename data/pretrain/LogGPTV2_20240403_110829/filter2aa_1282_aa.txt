# LIFARS Ransomware Analysis Report

## Company Information
- **Website:** [www.LIFARS.com](www.LIFARS.com)
- **Email:** PI:EMAIL
- **Copyright:** ©2022 SecurityScorecard Inc.
- **Address:** 244 Fifth Avenue, Suite 2035, New York, NY 10001
- **Phone:** 1.212.222.7061
- **Prepared by:** Vlad Pasca, LIFARS, LLC
- **Date:** February 14, 2022

---

## Table of Contents
1. **Executive Summary** ............................................................ 2
2. **Analysis and Findings** ......................................................... 2
   - **Thread Activity – sub_4DF310 Function** .......................... 10
   - **Thread Activity – sub_4C3430 Function** ........................... 14
   - **Thread Activity – sub_4A2EC0 Function** ........................... 19
   - **Thread Activity – sub_45C960 Function** ........................... 28
   - **Thread Activity – sub_497060 Function** ........................... 34
   - **Thread Activity – sub_49E730 Function** ........................... 39
   - **Printing Ransom Notes** ................................................... 44
   - **LockBit Wallpaper Setup** ................................................. 46
   - **Extract and Save the HTA Ransom Note to Desktop** ......... 52
   - **Indicators of Compromise** ............................................... 59
     - **Registry Keys** .................................................................. 59
     - **Files Created** ................................................................... 59
     - **Processes Spawned** ....................................................... 59
     - **Mutex** .............................................................................. 60
     - **LockBit 2.0 Extension** ................................................... 60
     - **LockBit 2.0 Ransom Note** ............................................ 60
3. **Appendix** .......................................................................... 61
   - **List of Processes to be Killed** ........................................... 61
   - **List of Services to be Stopped** .......................................... 61

---

## Executive Summary
LockBit 2.0 ransomware is one of the most active families in the wild, claiming to implement the fastest encryption algorithms using multithreading with I/O completion ports. The malware does not encrypt systems from CIS countries and can perform UAC bypass on older Windows versions if running with insufficient privileges. A hidden window that logs different actions performed by LockBit can be activated using the Shift+F1 shortcut. The ransomware mounts all hidden volumes and stops a list of targeted processes and services. The malware generates a pair of ECC (Curve25519) session keys, with the private key being encrypted using a hard-coded ECC public key and stored in the registry. The binary deletes all Volume Shadow Copies using `vssadmin` and clears the Windows security application and system logs. LockBit obtains a list of physical printers used to print multiple ransom notes. The encrypted files have the “.lockbit” extension, and only the first 4KB of each file is encrypted using the AES algorithm. A unique AES key is generated for each file, encrypted using the session ECC public key, and stored in each encrypted file.

---

## Analysis and Findings

### SHA256: 9feed0c7fa8c1d32390e1c168051267df61f11b048ec62aa5b8e66f60e8083af

#### Debug Detection
The malware checks if it is being debugged by examining the `NtGlobalFlag` field in the PEB (Process Environment Block). If a debugger is detected, the process enters an infinite loop:

![Figure 1](path_to_image)

#### String Decryption
Encrypted strings are stored as stack strings and decrypted using the XOR operator. An example of the decryption algorithm and the decrypted DLL name are shown below:

![Figure 2](path_to_image)

#### API Hashing
The binary uses API hashing to obfuscate the API functions it calls. It computes a 4-byte hash value and compares it with a hard-coded value (0xA3E6F6C3 in this case):

![Figure 3](path_to_image)

#### DLL Loading
The malicious executable loads multiple DLLs into the address space of the process using the `LoadLibraryA` API:

![Figure 4](path_to_image)

The following DLLs are loaded:
- `gdiplus.dll`
- `ws2_32.dll`
- `shell32.dll`
- `advapi32.dll`
- `user32.dll`
- `ole32.dll`
- `netapi32.dll`
- `gpedit.dll`
- `oleaut32.dll`
- `shlwapi.dll`
- `msvcrt.dll`
- `activeds.dll`
- `mpr.dll`
- `bcrypt.dll`
- `crypt32.dll`
- `iphlpapi.dll`
- `wtsapi32.dll`
- `win32u.dll`
- `Comdlg32.dll`
- `cryptbase.dll`
- `combase.dll`
- `Winspool.drv`

#### Language Check
The `GetSystemDefaultUILanguage` function retrieves the language identifier for the system default UI language of the OS. The return value is compared with multiple identifiers corresponding to CIS countries (LockBit does not encrypt these systems):

![Figure 5](path_to_image)
![Figure 6](path_to_image)

The following language identifiers are checked:
- 0x82c - Azerbaijani (Cyrillic)
- 0x42c - Azerbaijani (Latin)
- 0x42b - Armenian
- 0x423 - Belarusian
- 0x437 - Georgian
- 0x43F - Kazakh
- 0x440 - Kyrgyz
- 0x819 - Russian (Moldova)
- 0x419 - Russian
- 0x428 - Tajik
- 0x442 - Turkmen
- 0x843 - Uzbek (Cyrillic)
- 0x443 - Uzbek (Latin)
- 0x422 - Ukrainian

The `GetUserDefaultUILanguage` routine extracts the language identifier for the user UI language for the current user. The extracted value is compared with the same identifiers:

![Figure 7](path_to_image)

#### System Information
The `NtQuerySystemInformation` function is used to retrieve the number of processors in the system (0x0 = `SystemBasicInformation`):

![Figure 8](path_to_image)

#### Process Handle
The binary opens a handle to the current process (0x60000 = `WRITE_DAC | READ_CONTROL`):

![Figure 9](path_to_image)

#### Security Descriptor
The `GetSecurityInfo` API is used to retrieve a pointer to the DACL in the returned security descriptor (0x6 = `SE_KERNEL_OBJECT`, 0x4 = `DACL_SECURITY_INFORMATION`):

![Figure 10](path_to_image)

#### SID Allocation
The `RtlAllocateAndInitializeSid` function allocates and initializes a SID (security identifier) structure:

![Figure 11](path_to_image)

#### ACL Size
The file extracts the ACL size information via a function call to `RtlQueryInformationAcl` (0x2 = `AclSizeInformation`):

![Figure 12](path_to_image)

#### Memory Allocation
The executable allocates memory by calling the `ZwAllocateVirtualMemory` routine (0x3000 = `MEM_COMMIT | MEM_RESERVE`, 0x4 = `PAGE_READWRITE`). It also frees previously allocated memory using `ZwFreeVirtualMemory`:

![Figure 13](path_to_image)

#### Access Control List
The `RtlCreateAcl` function creates and initializes an access control list (0x4 = `ACL_REVISION_DS`):

![Figure 14](path_to_image)

#### Access-Denied ACE
The `RtlAddAccessDeniedAce` routine adds an access-denied access control entry (ACE) to the ACL created earlier (0x4 = `ACL_REVISION_DS`, 0x1 = `FILE_READ_DATA`):

![Figure 15](path_to_image)

#### ACE Pointer
The process obtains a pointer to the first ACE in the ACL via a function call to `RtlGetAce`:

![Figure 16](path_to_image)

#### Adding ACE
The process adds an ACE to the ACL previously created using `RtlAddAce` (0x4 = `ACL_REVISION_DS`):

![Figure 17](path_to_image)

#### Setting DACL
LockBit sets the DACL of the current process to the ACL modified earlier by calling the `SetSecurityInfo` API (0x6 = `SE_KERNEL_OBJECT`, 0x4 = `DACL_SECURITY_INFORMATION`):

![Figure 18](path_to_image)

#### Error Mode
The malware modifies the hard error mode to prevent some error types from being displayed to the user (0xC = `ProcessDefaultHardErrorMode`, 0x7 = `SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX | SEM_NOALIGNMENTFAULTEXCEPT`):

![Figure 19](path_to_image)

#### Privilege Enablement
The ransomware enables the `SeTakeOwnershipPrivilege` privilege in the current process token (0x9 = `SeTakeOwnershipPrivilege`):

![Figure 20](path_to_image)

#### Process and Service List
LockBit decrypts a list of processes and services that will be stopped during the infection (the entire list can be found in the appendix):

![Figure 21](path_to_image)
![Figure 22](path_to_image)

#### Token Access
The `ZwOpenProcessToken` API is called to open the access token associated with the current process (0x8 = `TOKEN_QUERY`):

![Figure 23](path_to_image)

#### Token Information
The `GetTokenInformation` function is used to extract the user account of the token (0x1 = `TokenUser`):

![Figure 24](path_to_image)

#### SID Comparison
The `AllocateAndInitializeSid` routine allocates and initializes a security identifier (SID) with a single subauthority. The `EqualSid` API compares two SID values:

![Figure 25](path_to_image)
![Figure 26](path_to_image)

#### Memory Status
There is a recurrent function call to `GlobalMemoryStatusEx` that retrieves information about the current usage of both physical and virtual memory:

![Figure 27](path_to_image)

#### Thread Creation
LockBit creates a new thread using the `CreateThread` API, which runs the `sub_4DF310` function:

![Figure 28](path_to_image)

#### Debugger Evasion
The `ZwSetInformationThread` function is used to hide the thread from the debugger, but the x32dbg’s plugin called ScyllaHide can circumvent its effect (0x11 = `HideThreadFromDebugger`):

![Figure 29](path_to_image)

### Thread Activity – sub_4DF310 Function
The shutdown priority for the current process relative to other processes in the system is set to 0, meaning it is the last process to be shut down:

![Figure 30](path_to_image)

#### System Directory
The `GetSystemDirectoryW` function retrieves the path of the system directory:

![Figure 31](path_to_image)

#### Activation Context
The process creates and activates an activation context using the `CreateActCtxW` and `ActivateActCtx` routines:

![Figure 32](path_to_image)
![Figure 33](path_to_image)

#### Common Controls
The `InitCommonControls` API registers and initializes specific common control window classes:

![Figure 34](path_to_image)

#### GDI+ Initialization
The `GdiplusStartup` function initializes Windows GDI+:

![Figure 35](path_to_image)

#### COM Library
The malicious file initializes the COM library on the current thread:

![Figure 36](path_to_image)

#### OS Version
The `GetVersion` routine retrieves the operating system version:

![Figure 37](path_to_image)

#### Stream Object
The `CreateStreamOnHGlobal` function creates a stream object that uses an HGLOBAL memory handle to store the content:

![Figure 38](path_to_image)

#### Bitmap Creation
The stream content is modified, and the process uses the `GdipCreateBitmapFromStream` function to create a Bitmap object based on the stream:

![Figure 39](path_to_image)

#### Cursor Resource
The malware loads the standard arrow cursor resource via a function call to `LoadCursorW` (0x7F00 = `IDC_ARROW`):

![Figure 40](path_to_image)

#### GDI+ Memory
The `GdipAlloc` function allocates memory for a Windows GDI+ object:

![Figure 41](path_to_image)

#### Image Disposal
There is another call to `GdipCreateBitmapFromStream` followed by a call to `GdipDisposeImage`, which releases resources used by the Image object:

![Figure 42](path_to_image)

#### Window Class Registration
LockBit registers a window class called “LockBit_2_0_Ransom” using the `RegisterClassExW` API:

![Figure 43](path_to_image)

#### Window Creation
The `CreateWindowExW` function is used to create a window called "LockBit 2.0 Ransom" that tracks the progress of the ransomware, such as identified drives and different logs:

![Figure 44](path_to_image)

#### Window Hiding
The new window is hidden using the `ShowWindow` routine (0x0 = `SW_HIDE`):

![Figure 45](path_to_image)

#### Client Area Update
The `UpdateWindow` function updates the client area of the specified window by sending a `WM_PAINT` message:

![Figure 46](path_to_image)

#### New Thread
The process creates a new thread by calling the `CreateThread` function:

![Figure 47](path_to_image)

#### Hot Key
LockBit defines a Shift+F1 hot key for the new window that can be used to unhide it (0x70 = `VK_F1`, 0x4 = `MOD_SHIFT`):

![Figure 48](path_to_image)
![Figure 49](path_to_image)

#### Message Retrieval
The `GetMessageW` function retrieves a message from the thread’s message queue:

![Figure 50](path_to_image)

#### Virtual-Key Translation
The `TranslateMessage` function translates virtual-key messages into character messages:

![Figure 51](path_to_image)

#### Message Dispatch
The `DispatchMessageW` function dispatches a message retrieved by the `GetMessage` function:

![Figure 52](path_to_image)

### Thread Activity – sub_4C3430 Function
The process sends the `LVM_GETITEMCOUNT` message to the newly created window (0x1004 = `LVM_GETITEMCOUNT`):

![Figure 53](path_to_image)

#### Invalidate Rectangles
The `InvalidateRect` API is called multiple times to add rectangles to the window’s update region:

![Figure 54](path_to_image)

#### Command Line Arguments
The `CommandLineToArgvW` routine obtains an array of pointers to the command line arguments:

![Figure 55](path_to_image)

#### Token Elevation
The `NtQueryInformationToken` API checks if the access token is elevated (0x14 = `TokenElevation`):

![Figure 56](path_to_image)

Depending on the result, the malware proceeds by decrypting the "[+] Process created with admin rights" or "[-] Process created with limited rights" strings. This sample is supposed to perform UAC bypass in the case of low-level privileges, but this method was not employed on our Windows 10 analysis machine (it is intended for use on older Windows versions).

The process sends the "[+] Process created with admin rights" message to the hidden window using the `SendMessageA` API:

![Figure 57](path_to_image)

#### Mutex Creation
The binary creates a mutex called "\\BaseNamedObjects\\{3FE573D4-3FE5-DD38-399C-886767BD8875}" to ensure that only one instance of the malware is running at a time (0x1F0001 = `MUTEX_ALL_ACCESS`):

![Figure 58](path_to_image)

#### NetBIOS Name
The `GetComputerNameW` function extracts the NetBIOS name of the local computer:

![Figure 59](path_to_image)

#### Domain Controller
The `NetGetDCName` function retrieves the name of the primary domain controller. LockBit has the ability to propagate on the network and kill processes and services via malicious GPOs (Group Policy Objects), but these features were not activated in this sample:

![Figure 60](path_to_image)

#### Registry Key
The process opens the Run registry key using `RegCreateKeyExA` (0x80000001 = `HKEY_CURRENT_USER`, 0x2001F = `KEY_READ | KEY_WRITE`):

![Figure 61](path_to_image)

#### Registry Value
The file looks for a registry value called "{9FD872D4-E5E5-DDC5-399C-396785BDC975}":

![Figure 62](path_to_image)

#### Persistence
The malware establishes persistence by creating the above registry value:

![Figure 63](path_to_image)
![Figure 64](path_to_image)

#### New Thread
The `CreateThread` function is used to create a new thread within the address space of the process:

![Figure 65](path_to_image)

#### Debugger Evasion
As in the case of every thread creation, the binary tries to hide it from the debugger using the `ZwSetInformationThread` API.

#### File Creation
A file called "C:\windows\system32\2ED873.ico" is created via a function call to `ZwCreateFile` (0x40000000 = `GENERIC_WRITE`, 0x80 = `FILE_ATTRIBUTE_NORMAL`, 0x5 = `FILE_OVERWRITE_IF`):

![Figure 66](path_to_image)

#### File Population
The ICO file is populated using the `ZwWriteFile` routine:

![Figure 67](path_to_image)

#### Registry Key Creation
The executable creates the “HKCR\.lockbit” registry key using `ZwCreateKey` (0x2000000 = `MAXIMUM_ALLOWED`):

![Figure 68](path_to_image)

#### Default Icon
LockBit creates the DefaultIcon subkey and sets its value to the newly created ICO file:

![Figure 69](path_to_image)
![Figure 70](path_to_image)

### Thread Activity – sub_4A2EC0 Function
The `FindFirstVolumeW` API begins scanning the volumes of the computer:

![Figure 71](path_to_image)

#### Device Mapping
The `QueryDosDeviceW` function obtains the current mapping for the volume:

![Figure 72](path_to_image)

#### Drive Letters
The malware retrieves a list of drive letters for the specified volume via a call to `GetVolumePathNamesForVolumeNameW`:

![Figure 73](path_to_image)

#### Drive Type
The `GetDriveTypeW` function extracts the drive type of the volume:

![Figure 74](path_to_image)

#### Volume Message
The malicious process sends a message regarding the identified volume to the LockBit hidden window:

![Figure 75](path_to_image)

#### Volume Search
The `FindNextVolumeW` function continues the volume search:

![Figure 76](path_to_image)

#### Mounting Volumes
The purpose of the malware is to find unmounted volumes and mount them. LockBit tries to open the BOOTMGR file from the volume (0x80000000 = `GENERIC_READ`, 0x3 = `FILE_SHARE_READ | FILE_SHARE_WRITE`, 0x3 = `OPEN_EXISTING`, 0x80 = `FILE_ATTRIBUTE_NORMAL`):

![Figure 77](path_to_image)

An unmounted volume is mounted by calling the `SetVolumeMountPointW` routine:

![Figure 78](path_to_image)
![Figure 79](path_to_image)

#### Mount Message
LockBit sends a message regarding the successful mount operation to the hidden window. After the enumeration is complete, the thread exits by calling the `RtlExitUserThread` function:

![Figure 80](path_to_image)

#### Association Change
The `SHChangeNotify` API is called with the `SHCNE_ASSOCCHANGED` parameter (0x8000000 = `SHCNE_ASSOCCHANGED`):

![Figure 81](path_to_image)

#### New Thread
A new thread is created by the malware using `CreateThread`:

![Figure 82](path_to_image)

#### CPU Features
Intel and AMD CPUs implement a functionality called “AES-NI” (Advanced Encryption Standard New Instructions), which can be used for high-speed AES encryption processing. The binary uses the `cpuid` instruction to retrieve the CPU type and vendor:

![Figure 83](path_to_image)

If the CPU supports “AES-NI,” the process sends the "[+] AES-NI enabled" message to the hidden window using `SendMessageA`.

#### Random Bytes
The malicious process generates 16 random bytes by calling the `BCryptGenRandom` routine (0x2 = `BCRYPT_USE_SYSTEM_PREFERRED_RNG`):

---

## Appendix
### List of Processes to be Killed
- [List of processes]

### List of Services to be Stopped
- [List of services]

---

For more information, visit [www.LIFARS.com](www.LIFARS.com).

---