## The versioning scheme is actually quite childish and doesnt comply with any
industry standard.
major.minor.patch
major - this will break previous libraries that use this
minor - this adds new functionality/features
patch - something is broken
0 indicates that its still in development and anything can change at any time.
Yet people are already using your product in production and relying heavily on
it. You send a message to your end users that you do not care about them or
their compatibility issues by not using semantic versioning.
NodeJs finally moved to real semantic versioning with IOJS merged in they are
now up to 4.1.2 and clearly explains the backward compatability issues with
the different versioning.