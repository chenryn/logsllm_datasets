## The Current Versioning Scheme Lacks Maturity and Does Not Adhere to Industry Standards

The versioning scheme currently in use is overly simplistic and does not comply with established industry standards, such as semantic versioning (SemVer). Hereâ€™s a breakdown of the standard SemVer format:

- **Major** (e.g., `1.0.0`): Incremented when there are breaking changes that are not backward-compatible.
- **Minor** (e.g., `1.1.0`): Incremented when new features or functionality are added, but the changes are backward-compatible.
- **Patch** (e.g., `1.0.1`): Incremented for bug fixes and minor updates that do not affect compatibility.

Additionally, a `0.x.x` version indicates that the software is still in development, and any part of the API may change without notice.

However, your product is already being used in production environments, and users are relying heavily on it. By not adhering to semantic versioning, you are sending a message to your end users that their compatibility and stability concerns are not a priority.

For example, Node.js, after merging with IO.js, adopted a more robust semantic versioning system. They are now up to version `4.1.2`, and they clearly document backward compatibility issues with different versions. This approach ensures that users can make informed decisions about upgrades and understand the potential impact on their applications.

By adopting a more professional and standardized versioning scheme, you can build trust with your users and ensure a smoother, more predictable experience.