简单过了下Dubbo的漏洞
开⼯第⼀个想到的就是陈师傅的星球（漏洞百出），Dubbo最近出了⼏个漏洞，历史漏洞我也没
看过，这⾥就简单看下。
Apache Dubbo 是⼀款⾼性能、轻量级的开源Java RPC框架，它提供了三⼤核⼼能⼒：⾯向接
⼝的远程⽅法调⽤，智能容错和负载均衡，以及服务⾃动注册和发现。dubbo ⽀持多种序列化
⽅式并且序列化是和协议相对应的。⽐如：Dubbo⽀持dubbo、rmi、hessian、http、
webservice、thrift、redis等多种协议。
Dubbo和序列化关系 
参考⾃https://www.anquanke.com/post/id/209251#h3-7
1. Dubbo 从⼤的层⾯上将是RPC框架，负责封装RPC调⽤，⽀持很多RPC协议
2. RPC协议包括了dubbo、rmi、hession、webservice、http、redis、rest、thrift、
memcached、jsonrpc等
3. Java中的序列化有Java原⽣序列化、Hessian 序列化、Json序列化、dubbo 序列化
⼀、CVE-2019-17564
其实我是踩了⼏个坑的，⼀个事maven源的问题，⼀个是docker内部服务问题，其实归根结底
还是我穷电脑配置太拉跨了。下⾯就直接说下怎么配置吧。
⾸先直接去获取dubbo-samples，https://github.com/apache/dubbo-samples
idea打开项⽬推荐先⽤阿⾥的源打开，⼤概率会有问题，然后挂上代理再换成maven官⽅的源。
docker的话是需要zookeeper来启动的，为了⽅便直接从dockerhub上pullzk的镜像即可，
docker run --rm --name zookeeper -p 2181:2181 zookeeper
然后修改http-provider.xml来指定zookeeper的IP
这⾥强调⼀下另⼀个坑，由于我的zk是放在虚拟机⾥的，按理说应该延迟很⼩，但是dubbo服务
启动的时候仍旧连不上，沉思许久加了⼀个timeoute参数在连接url中。
修改pom⽂件中dubbo为存在漏洞版本，这⾥我也遇到⼀个坑，⽹上⽂章说直接改这⾥就⾏，我
这⾥改完以后maven加载不了，导致缺少关键类
尝试了⼀会⼉，⽬前我的是⽣效的
1
17
18
21
    org.apache.dubbo
22
    1.0-SNAPSHOT
23
24
    4.0.0
25
26
    dubbo-samples-http
27
28
29
        1.8
30
        1.8
31
        2.7.7
32
        4.3.16.RELEASE
33
        4.12
34
35
36
37
38
39
                org.springframework
40
                spring-framework-bom
41
                ${spring.version}
42
                pom
43
                import
44
45
46
47
                org.apache.dubbo
48
                dubbo
49
                2.7.4.1
50
51
52
53
                org.apache.dubbo
54
                dubbo-bom
55
                ${dubbo.version}
56
                pom
57
                import
58
59
60
                org.apache.dubbo
61
                dubbo-dependencies-zookeeper
62
                ${dubbo.version}
63
                pom
64
65
66
                com.fasterxml.jackson.core
67
                jackson-databind
68
                2.9.10.8
69
70
71
                com.fasterxml.jackson.core
72
                jackson-core
73
                2.9.10
74
75
76
                com.fasterxml.jackson.core
77
                jackson-annotations
78
                2.9.10
79
80
81
82
83
84
-->
85
org.apache.dubbo-->
86
dubbo-->
87
-->
88
89
90
            org.apache.dubbo
91
            dubbo-dependencies-zookeeper
92
            pom
93
94
95
96
            org.apache.dubbo
97
            dubbo
98
            2.7.3
99
100
最后配置idea即可启动服务
-->
101
org.apache.commons-->
102
commons-collections4-->
103
4.0-->
104
-->
105
106
略 和原来一样
107
108
109
110
111
112
113
            javax.annotation
114
115
                [1.11,)
116
117
118
119
                    javax.annotation
120
                    javax.annotation-api
121
                    1.3.2
122
123
124
125
126
127
128
129
130
                org.apache.maven.plugins
131
                maven-compiler-plugin
132
                3.7.0
133
134
                    ${source.level}
135
                    ${target.level}
136
137
138
139
140
141
142
2.7.0 <= Apache Dubbo <= 2.7.4.1 
2.6.0 <= Apache Dubbo <= 2.6.7 
Apache Dubbo = 2.5.x
这⾥就⽤2.7.3 来复现，我这⾥尝试复现CC链，JRE8u20，URLDNS 都报错为suid不匹配，最
后我本地写了⼀个恶意Gadget还是同样的报错，就很迷......不过反序列化肯定是⾛到了，勉强可
以跟⼀波，报错如下，这⾥将环境打包上传，有兴趣的师傅可以看下....
链接：https://pan.baidu.com/s/1AEuMmDc8IypZBolGQXc86w 
提取码：2333 
六月 30, 2021 12:02:57 下午 org.apache.catalina.core.StandardWrapperValve 
invoke
1
严重: Servlet.service() for servlet [dispatcher] in context with path [/] 
threw exception [java.io.InvalidClassException: TestDer; local class 
incompatible: stream classdesc serialVersionUID = -2639023527669302209, 
local class serialVersionUID = -2639023527669302135] with root cause
2
java.io.InvalidClassException: TestDer; local class incompatible: stream 
classdesc serialVersionUID = -2639023527669302209, local class 
serialVersionUID = -2639023527669302135
3
at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:621)
4
at 
java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1623)
5
由于我对Dubbo的整体架构不是很熟悉，直接来看了漏洞，根据经验，直接从报错点开始下断点
跟
可以看到这⾥的this为DispatcherServlet，下⾯⾃然就会⾛到很多⽂章⾥提到的
org.apache.dubbo.remoting.http.servlet.DispatcherServlet#service，Dispatcher听名字分
发，盲猜应该是dubbo的路由阶段
这⾥再留⼼⼀下前⾯的调⽤栈，是从doFilter⾛过来的
at 
java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1518)
6
at 
java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1774)
7
at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1351)
8
at java.io.ObjectInputStream.readObject(ObjectInputStream.java:371)
9
这⾥做⼀个记录，⽅便以后深⼊学习dubbo的逻辑
接下来进⼊org.apache.dubbo.remoting.http.HttpHandler#handle
这⾥的HttpHandler是个接⼝，上⾯提到dubbo⽀持多种协议处理数据，
我们发送的是http协议数据，⾃然会进⼊到
org.apache.dubbo.rpc.protocol.http.HttpProtocol.InternalHandler#handle
这⾥提⼀嘴修复，修复使⽤JsonRpcServer替代
org.apache.dubbo.rpc.protocol.http.HttpProtocol.InternalHandler，从⽽⽆法处理反序列化字
节流
以下涉及到⼀点知识盲区，引⽤⾃https://l3yx.github.io/2020/08/25/Apache-Dubbo-%E
5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%
A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/#%E6%BC%8F%E6%B4%9E%E5%A
4%8D%E7%8E%B0，留个坑，后⾯研究