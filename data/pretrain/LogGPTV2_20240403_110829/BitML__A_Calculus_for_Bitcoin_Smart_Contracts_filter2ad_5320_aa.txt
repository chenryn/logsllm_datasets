title:BitML: A Calculus for Bitcoin Smart Contracts
author:Massimo Bartoletti and
Roberto Zunino
BitML: A Calculus for Bitcoin Smart Contracts
Massimo Bartoletti
University of Cagliari
PI:EMAIL
Roberto Zunino
University of Trento
PI:EMAIL
ABSTRACT
We introduce BitML, a domain-specific language for specifying
contracts that regulate transfers of bitcoins among participants,
without relying on trusted intermediaries. We define a symbolic
and a computational model for reasoning about BitML security. In
the symbolic model, participants act according to the semantics of
BitML, while in the computational model they exchange bitstrings,
and read/append transactions on the Bitcoin blockchain. A compiler
is provided to translate contracts into standard Bitcoin transactions.
Participants can execute a contract by appending these transactions
on the Bitcoin blockchain, according to their strategies. We prove
the correctness of our compiler, showing that computational attacks
on compiled contracts are also observable in the symbolic model.
CCS CONCEPTS
• Security and privacy → Distributed systems security; For-
mal security models; Security protocols;
KEYWORDS
Bitcoin; smart contracts; process calculi
1 INTRODUCTION
Cryptocurrencies like Bitcoin and Ethereum have revived the idea of
smart contracts — agreements between untrusted parties that can be
automatically enforced without a trusted intermediary [58]. These
agreements regulate cryptocurrency exchanges among participants:
for instance, a lottery collects bets from players, determines the
winner in a fair manner, and then transfers the pot to the winner.
Disintermediation is made possible by the blockchain, a public,
append-only record of transactions, and by the consensus protocol
followed by the nodes to update the blockchain [27]. The execution
of smart contracts relies on the blockchain to log all the participants’
moves; further, the underlying logic of transactions is exploited
to enable all and only the moves permitted by the contract. The
consensus protocol is used to consistently update the blockchain:
suitable economic incentives ensure that the nodes of the network
have the same view of the blockchain. In this way, the state of
each contract (and consequently, the asset of each user) is uniquely
determined by the sequence of its transactions on the blockchain.
Smart contracts have different incarnations, depending on the
platform on which they are based. In Ethereum, they are expressed
as programs in a Turing-equivalent bytecode language. Any user
can publish a contract on the blockchain. This makes the contract
available to other users, who can then run it by calling its functions
(concretely, by publishing suitable transactions on the blockchain).
Such openness comes at the price of a wide attack surface: attackers
may exploit vulnerabilities in the implementation of contracts, or
may publish themselves Trojan-horses with hidden vulnerabilities,
to steal or tamper with the assets controlled by contracts. Indeed,
1
a series of vulnerabilities in Ethereum contracts [14] have caused
losses in the order of hundreds of millions of USD [4, 6, 7].
Unlike Ethereum, Bitcoin does not provide a language for smart
contracts: rather, in literature they are expressed as cryptographic
protocols where participants send/receive/sign messages, verify
signatures, and put/search transactions on the blockchain [15].
Lotteries [11, 20, 22, 47], gambling games [42], micro-payment
channels [31, 48, 54], contingent payments [18, 32, 46], and more
general fair multi-party computations [12, 41] witness the variety
of smart contracts supported by Bitcoin.
Describing smart contracts at this level of abstraction is complex
and error-prone. Indeed, establishing the correctness of a smart con-
tract requires to prove the computational security of a cryptographic
protocol, where — besides the usual primitives — participants can
craft Bitcoin transactions and interact with the Bitcoin network.
Further, these protocols often rely on advanced features of Bitcoin
(e.g., transaction scripts, signature modifiers, segregated witnesses),
whose actual behaviour relies on low-level implementation details.
The task of proving the security of such kind of protocols requires
the skills of expert cryptographers, and even in this case it is a
significant effort. By contrast, working in an high-level symbolic
model would relieve smart contract programmers from (most of)
this burden, since the much higher level of abstraction would allow
security proofs to be carried out with automatic tools.
Contributions. We introduce BitML (after “Bitcoin Modelling
Language”), a domain-specific language for Bitcoin smart contracts.
BitML is a process calculus, with primitives to stipulate contracts
and to exchange currency according to the contract terms. In this
respect, BitML departs from the current practice of representing
Bitcoin contracts as cryptographic protocols: rather, BitML pioneers
the “contracts-as-programs” paradigm for Bitcoin, by completely
abstracting from Bitcoin transactions and cryptographic details.
Despite the high level of abstraction, BitML can express most of the
Bitcoin smart contracts proposed so far [15], e.g. escrow services,
timed commitments, lotteries, gambling games, etc. The operational
semantics of BitML allows for reasoning about the behaviour of
these contracts in a symbolic setting, where the underlying cryp-
tography and Bitcoin machinery are abstracted away.
One of our main contributions is a compiler to translate BitML
contracts into standard Bitcoin transactions. Participants can per-
form the contract actions by publishing the corresponding trans-
actions on the blockchain. The crucial technical challenge is to
guarantee the correctness of the compiler, i.e. that the “symbolic”
execution of the contract matches the “computational” one per-
formed on Bitcoin. This correspondence must hold also in the pres-
ence of computational adversaries: otherwise, attacks at the Bitcoin
level could be unobservable at the level of the symbolic semantics.
We establish the correctness of the BitML compiler through a
computational soundness theorem [9]. More specifically, we prove
that if honest participants use compiler-generated transactions,
then the actual Bitcoin executions resulting from their interaction
with computational adversaries will have a symbolic counterpart
as a BitML execution (with overwhelming probability). Basically,
this implies that computational attacks to compiled contracts in
Bitcoin are also observable in the symbolic semantics of BitML. A
practical consequence of this result is that proofs of trace-based
security properties carried out in the symbolic model can be lifted
for free to the computational model. This result is crucial, since it
enables the development of analysis and verification techniques
at the symbolic level, which would be much more burdensome to
obtain at the (far more concrete) computational level.
2 OVERVIEW OF THE APPROACH
In this section we overview our approach, introducing its main com-
ponents, and discussing the relations among them. In particular,
we provide a gentle introduction to BitML, illustrating its expres-
siveness through a series of examples. We then discuss the main
results of the paper, illustrating their practical consequences.
In BitML, contracts allow participants to
BitML in a nutshell.
interact according to the following workflow. First, a participant
broadcasts a contract advertisement {G}C. The component C is the
contract, which specifies the rules to transfer bitcoins (B) among
participants. The component G is a set of preconditions to its exe-
cution: roughly, it requires participants to deposit some B, either
upfront or during the contract execution, and to commit to some
secrets. Participants can then choose whether to accept the adver-
tisement, or not. When all the involved participants have accepted
{G}C, satisfying its preconditions, the contract C becomes stipu-
lated. Only at this point, participants can transfer the deposited
funds by acting as prescribed by C. Once C is stipulated, it starts its
execution with a balance, initially set to the sum of the deposits in
its advertisement. The execution of C will affect this balance, when
participants deposit/withdraw funds to/from the contract.
As a first example, assume a buyer A who wants to buy an item
from a seller B. The participants want to use a contract to ensure
that B will get paid if and only if A gets her item. Assuming the
cost of the item is 1B, the contract precondition G = A:! 1B @ x
requires A to provide a 1B deposit (where x is the deposit name),
which will be transferred to B only after A’s consent. The contract
has two mutually exclusive clauses (separated by +):
PayOrRefund = A : withdraw B + B : withdraw A
The first clause allows B to withdraw 1B from the contract, if A
provides her authorization (denoted by A :· · ·). Instead, the second
clause allows A to get back her deposit upon B’s authorization (e.g.,
in case B acknowledges a problem with the shipment).
Note that the above contract gives little guarantees when the
participants dishonestly deny their authorization: in particular, A
can receive the item and then prevent B from withdrawing the
payment, while B can freeze A’s deposit without shipping the item.
A less naïve contract should guarantee that, even if A or B are
dishonest, exactly one of them will be able to redeem the deposit.
To ensure this property, we resort to a mediator M who resolves
disputes between A and B. Assuming that the mediator takes a fee
| v
of 0.1B (cut down from A’s deposit), we can craft the following:
Escrow = PayOrRefund + A : Resolve0.1,0.9 + B : Resolve0.1,0.9
Resolvev,v′ = split(vB → withdraw M
′B → M : withdraw A + M : withdraw B )
Besides the two clauses in PayOrRefund, the contract Escrow fea-
tures two additional clauses, which allow A and B to trigger the
dispute resolution, specified by Resolve. The two parallel clauses
therein split the 1B deposit in two parts: 0.1B go to the mediator,
while 0.9B are assigned either to A and B, depending on M’s choice.
BitML contracts feature other primitives besides those seen so
far: for instance, they can express time constraints, and allow par-
ticipants to choose/reveal secrets. We show these features to model
a timed commitment protocol [12, 26, 35, 57]. There, a participant
A wants to choose a secret, and reveal it after some time t — guar-
anteeing that the revealed value is the chosen secret. We force A to
pay to another participant B a penalty of 1B if A does not reveal the
secret within t. In the contract precondition, A declares a deposit
of 1B, and a secret with name a. The contract is the following:
TC = (reveal a . withdraw A ) + (after t : withdraw B )
Only A can choose the first clause, by revealing a. When doing so,
A can take her 1B deposit back. After the deadline t, B can choose
the second clause, and collect A’s penalty. Before t, A has the option
to reveal a (avoiding the penalty), or to keep it secret (paying the
penalty). As a borderline case, if A reveals a after t, a race condition
occurs: the first one who makes a step gets the money.
Timed commitment contracts like the one above are the basis
upon which constructing complex contracts which distribute bit-
coins according to values chosen by participants (e.g., gambling
games, lotteries, etc.). For instance, consider a simple “odds and
evens” game between two players. The contract preconditions re-
quire A and B to commit to one secret each (a and b, respectively),
and to put a deposit of 3B each (1B as a bet, and 2B as a penalty in
case of dishonest behaviour). The contract is the following:
OddsEvens = split(
+ after t : withdraw A
2B → reveal b if 0 ≤ |b| ≤ 1. withdraw B
| 2B → reveal a . withdraw A + after t : withdraw B
| 2B → reveal a b if |a| = |b|. withdraw A
+ reveal a b if |a| (cid:44) |b|. withdraw B )
The balance is split in three parts. Player B must reveal b by the
deadline t; otherwise, A can redeem B’s penalty (as in the timed
commitment). Similarly, A must reveal a. To determine the winner
we compare the lengths of the secrets, in the third clause of split.
The winner is A if the secrets have the same length, otherwise it is B.
Checking that b’s length is either 0 or 1 (in the first clause) is needed
to achieve fairness: indeed, B can increase his probability to win 2B
in the third clause by choosing a secret with length N > 1. However,
doing so would make B lose his 2B deposit, so overall B’s average
payoff would be negative. So, a rational B would then choose a
secret of length 0 or 1 — as well as a rational A, who otherwise
decreases her probability to win. When both lengths are 0 or 1, A
and B can redeem their 2B penalty, and have a 1/2 probability to
win, if at least one of them chooses the length uniformly.
2
The last primitive we present is put x, which allows a participant
to provide a “volatile” deposit x after stipulation. We illustrate it in
a variant of Escrow, where both A and B contribute to the fee for
the mediator, only if they do not agree within PayOrRefund:
EscrowPut = PayOrRefund + after t : withdraw B
+ put x . (put y . Resolve0.2,1 + after t
′ : withdraw A )
As a precondition, we assume that A and B declare additional
volatile 0.1B deposits (respectively, x and y). If they disagree, A has
to pay her deposit before time t, otherwise B can withdraw A’s 1B
deposit. The same for B, which must pay his 0.1B deposit before
t′ > t. After that, they invoke Resolve, paying 0.2B to the mediator,
and assigning 1B to the winner of the dispute.
Symbolic model. To reason about the security of BitML, we in-
troduce two security models: a symbolic model and a computational
one. The symbolic model is based on the semantics of BitML, which
abstracts from Bitcoin and its blockchain. In this model, partici-
pants are represented as strategies (formally, PPTIME algorithms)
which allow them to choose which actions to perform, in any given
state. Each honest participant has its own strategy, while the dis-
honest ones are collectively represented as a single adversarial
strategy. Strategies can read the current BitML configuration — a
public, shared state — and output actions which determine the next
state. Further, the adversary strategy can schedule the participants’
moves, eavesdrop messages, and impersonate other participants.
Within a configuration, we can find e.g. deposits of the form ⟨A, vB⟩,
modelling the ownership of vB by participant A. Participant can
freely split or gather their own deposits, or transfer them to other
participants. Further, deposits can be spent to stipulate contracts:
technically, stipulation creates an active contract, i.e. a term of the
form ⟨C , vB⟩, with an initial balance vB amounting to the sum of all
the spent deposits. The contract C determines how the balance of
vB can be distributed among participants, depending on their actual
interaction. Contracts have an operational semantics, describing
all their possible transitions: participants strategies (either honest
or adversarial) can only choose among the transitions allowed by
the semantics. For instance, a possible symbolic run of Escrow is
the following (omitting the stipulation and the intermediate steps):
⟨Escrow, 1B⟩ −→∗ ⟨A, 0.9B⟩ | ⟨M, 0.1B⟩
which models the case where the mediator has resolved a dispute
in favour of A (there are also runs where the dispute is won by B,
or the mediator is not invoked). The timed commitment TC has
two kinds of runs, according to A’s strategy: those where A reveals
the secret, and those where B redeems the deposit. For instance:
⟨TC, 1B⟩ | t0 −→∗ ⟨A, 1B⟩ | A : a#N | t0
is an run where A has revealed the secret (represented by the term
A : a#N , where N is a’s length) at time t0  t, A has not revealed the secret, and B has collected
A’s 1B penalty. Finally, OddsEvens features symbolic runs where
either A or B redeem the winnings, and they reveal or not their
secrets. For instance, in the following run (where t0 < t):
⟨OddsEvens, 6B⟩ | t0 −→∗ ⟨A, 2B⟩ | ⟨B, 4B⟩ | A : a#0 | B : b#1 | t0
3
players have revealed their secrets (and redeemed the 2B deposits),
and B has won the pot, since the lengths of the secrets are different.
Compiling BitML to Bitcoin. We design a compiler that, given a
BitML contract, outputs a set of Bitcoin transactions through which
the contract can be actually executed on Bitcoin. Our compiler only
relies on standard features of Bitcoin transactions: for instance, the
withdraw primitive relies on signature verification, split relies
on transactions with multiple outputs, and reveal exploits the
hash opcode of Bitcoin scripts. Sequencing and choice are obtained,
respectively, by transaction cascading and by the absence of double-
spending. We show several examples of compilation in Section 7.
A crucial question is: how to preserve security properties of a BitML
contract once it is compiled into Bitcoin? Indeed, lifting symbolic
security to computational security is a necessary result in order to
justify the adoption of high-level languages for smart contracts: in
the absence of such result, proving that a contract is secure in the
symbolic model would not guarantee its security under a computa-
tional attacker. Proving such preservation result is challenging, as