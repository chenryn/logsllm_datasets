the concrete constants are high. Looking ahead, for a
blocklist of 256 entries, a single proof of non-membership
is 63k constraints and takes 2.84s. A blocklist of 221
entries would yield a proof with 229 constraints. But
for Groth16, prover memory usage scales poorly in the
size of the circuit: a 229-constraint proof requires 4TB
of memory and takes 3 hours to compute, due to the
implementation overhead of distributing proving over
a 256-core cluster[WZC+18]. To use zkSNARKs for a
ZKBL, we cannot have the prover do work linear in the
size of the blocklist for each attestation.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
949
Decomposing blocklists by chunk. We observe that
a blocklist, mostly, does not change. While total prover
workload is inevitably linear in the size of the blocklist,
this work does not need to be recomputed from scratch
every time. By breaking the list up into non-overlapping
chunks we can both reuse work and limit the amount of
recomputation required when the list changes.
A zero-knowledge proof for consistency between
chunks. A sequence of chunk non-membership proofs
for a blocklist L poses three problems:
1) The server would need to verify O(|L |) chunks.
2) Reusing a chunk proof across blocklist non-
membership attestations would identify the client.
3) A malicious client could use a different identity
when proving non-membership in a speciﬁc chunk,
avoiding a block in that segment of the blocklist.
To address the above problems, we need a compact proof
that a sequence of chunk non-membership proofs veriﬁes
with respect to a single hidden identity. Further, that proof
must be zero-knowledge to ensure that the chunk proofs
can be safely reused across blocklist non-membership
proofs.
Recursive Groth16 proofs are impractical. Each
chunk proof could recursively check consistency of the
previous chunk proof. The challenge for recursion is
latency: assuming the blocklist changes frequently, each
attestation would need to compute an updated chunk
proof and a recursive step. On our benchmark system,
a single recursive step for Grooth16 takes 16.5s to
prove.1 With recursion, the cost of computing a chunk
proof would also increase by 5–7× because of overhead
imposed by the elliptic curves that are required to support
recursion. [CCDW20].2 Looking ahead, the buffered
approach we take adds 1s of latency to attestation and
supports a buffer of 14 16-element chunk proofs.
Beyond generic IVC and aggregate proofs. We
observe that IVC is not necessary to verify a sequence of
chunk non-membership proofs. There is no intermediate
state in our computation, rather we only require that all
proofs must share the same input private input. Recent
advances in inner product proofs [BMM+20] give a
succinct proof that n Groth16 zkSNARK proofs verify
in aggregate. However, this aggregate approach has two
critical shortcomings: it is not zero-knowledge and it
does not ensure consistency.
A natural approach for consistency would be to commit
to the hidden value and use it as a public input to each
1This is the cost to verify a proof with no inputs using MNT6-753
over MNT4-753.
2Depth-1 recursion using, e.g., BW6-761 over BLS12-377, would
avoid some of these costs compared to the MNT4/6 cycle. However,
any addition to the blocklist would necessitate recomputing the top-
level proof that checks all n chunk proofs. At 3.9s per check on our
benchmark system, this is not feasible.
Groth16 proof. But if the same commitment is used across
multiple anonymous attestations, it forms a persistent
identiﬁer. On the other hand, when a fresh commitment
is used for each attestation, we must regenerate every
chunk proof.
We use [BMM+20] as a starting point and have a
single public input to each chunk proof, then blind
it in the aggregate proof so it is not revealed to the
veriﬁer. The resulting scheme reuses the same blinders
in multiple parts of the zero-knowledge protocol. This
unusual property made proving the honest-veriﬁer zero-
knowledge property challenging.
III. PRELIMINARIES
We write x := z to denote variable assignment, and
y ← S to denote sampling uniformly from a set S. For an
arbitrary, efﬁciently computable predicate P, we say that
a proof of knowledge of a relation R = {(x;w) : P(x,w)}
with respect to an instance x is a proof of knowledge
of the witness w such that P(x,w) is satisﬁed. We will
often refer to x as a public input and w as a private input,
and we will use zero-knowledge proofs of knowledge
for various relations in order to hide w from the veriﬁer.
The security parameter of our system is denoted by λ .
A. Notation for Groups and Pairings
We will work exclusively with prime-order groups
and their associated scalar ﬁelds. Group elements are
denoted with capital letters G ∈ G, while ﬁeld elements
are lowercase r ∈ F. Vectors are bolded: A ∈ Gn, and
r ∈ Fn. We write A[:k] to denote the ﬁrst k elements of
A ∈ Gn, and A[k:] to denote the last n− k elements. We
say that a bilinear function e : G1 ×G2 → GT is a type-3
bilinear pairing if there is no efﬁciently computable group
homomorphism from G2 to G1. We say e is degenerate
if there is a non-identity G ∈ G1 such that e(G,H) = 1
for all H ∈ G2. Following convention, we use additive
notation for G1 and G2, and multiplicative notation for
GT .
For vectors A ∈ Gn
2 and a bilinear pairing
e, we write A∗ B to denote the inner pairing product
i=1 e (Ai,Bi). For vectors A∈ Gn and r∈ Fn we write Ar
∏n
to denote the multiscalar multiplication (MSM) ∑n
i=1 riAi,
and write r(cid:12)A to denote the element-wise multiplication
(r1A1, . . . ,rnAn). For a ﬁeld element x ∈ F, we denote
[x]1 := xG and [x]2 := xH, where G and H are the
canonical generators of G1 and G2, respectively.
B. Groth16
1 and B ∈ Gn
We brieﬂy describe the trusted-setup zkSNARK
scheme deﬁned in [Gro16]. At a high level, given a
description of an arithmetic circuit (over the scalar ﬁeld
of a pairing-friendly elliptic curve), a Groth16 proof
proves that a circuit is satisﬁed by a set of public wires
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
950
(values known to the veriﬁer) and private wires (values
which are not known to the veriﬁer, also called witness
elements).
Let e : G1 × G2 → GT be an efﬁciently-computable,
non-degenerate, type-3 bilinear pairing, where |G1| =
|G2| =|GT| is a prime p and p > 2λ . Let G be a generator
of G1 and H be a generator of G2. We use F to denote
the ﬁnite ﬁeld Z/pZ. The Groth16 scheme deﬁnes four
procedures:
Setup(desc) → crs Generates a common reference string
for the given arithmetic circuit description. crs
contains the group elements necessary to compute
the expressions in Groth16.Prove below.
i=(cid:96)+1) → π Proves the circuit de-
i=0,{ai}m
scribed by crs is satisﬁed, where a0, . . . ,a(cid:96) ∈ F
the circuit’s public input wires and
represent
a(cid:96)+1, . . . ,am ∈ F represent the private wires. π is
of the form ([η]1 , [θ ]2 , [ι]1), where
Prove(crs,{ai}(cid:96)
m
η = α +
m
aiui(X) + rδ
∑
i=0
ai (β ui(X) + αvi(X) + wi(X)) + h(X)t(X)
aivi(X) + sδ
θ = β +
∑
i=0
ι =
m
∑
i=(cid:96)+1
+ ηs + θr− rsδ
δ
Prepare(crs,{ai j}t
and all otherwise unspeciﬁed constants and polyno-
mials come from crs.
j=1) → ˆS Aggregates any subset of
public inputs into a single group element called
a prepared input: ˆS = ∑t
j=1 ai jWi j, where Wi are the
CRS values whose coefﬁcient represents the value
of the i-th wire of the circuit.
i=0) → {0,1} Veriﬁes the proof π =
(A,B,C) by checking the relation,
Vfy(crs,π,{a0}(cid:96)
e (A,B)
?
= e ([α]1 , [β ]2)·e (C, [δ ]2)· (cid:96)∏
i=0
e (aiWi, [γ]2) ,
where [α]1, [β ]2, [γ]2, and [δ ]2 come from crs. Vfy
permits any subset of the public inputs to be prepared
as above. The common case will be where all but
the ﬁrst input is prepared, i.e., calls of the form
Vfy(crs,π, (a0, ˆS)).
Rerand(π) → π(cid:48) Rerandomizes the proof π = (A,B,C)
by sampling ζ ,ω ← F and computing
π(cid:48) := (ζ−1A,ζ B + ζω [δ ]2 ,C + ωA).
By Theorem 3 in [BKSV20], the output of Rerand
is statistically indistinguishable from a fresh proof
of the same underlying statement.
C. Inner product proofs
B¨unz et al. [BMM+20] introduce a proof system for
various inner product relations. We will make use of
RTIPP :=
RMIPP−k :=
RHMIPP :=
2
(cid:86)
(cid:86)
2, ck2 ∈ Gn
1,
comA, comB, aggAB ∈ GT ,
r ∈ Fn ; A ∈ Gn
1,B ∈ Gn
 ck1,∈ Gn
comA = A∗ ck1
comB = ck2 ∗ B
aggAB = Ar ∗ B
ck1 ∈ Gn
2,
 :
 :
comC = (C∗ ck1)(cid:86) aggC = Cr
 :
 ck1 ∈ Gn
2, ck3 ∈ G2,
comC,∈ GT , aggC ∈ G1,
r ∈ Fn ; C ∈ Gn
1,z ∈ F
comC,∈ GT , aggC ∈ G1,
r ∈ Fn ; C ∈ Gn
1
comC = e ([z]1 , ck3)· (C∗ ck1)
(cid:86)
aggC = Cr
Fig. 1: We directly use B¨unz et al.’s deﬁnition of RTIPP
and RMIPP-k, and we use RHMIPP to refer to the “hiding
commitment” version of RMIPP-k. While RHMIPP admits a zero-
knowledge proof of knowledge, RTIPP does not, as it fails to
hide the witnesses A and B. Patching this is one of the primary
focuses of HICIAP.
the TIPP, MIPPk, and HMIPP proof systems, whose
relations are deﬁned in Figure 1.
In short, RTIPP is satisﬁed when Ar ∗ B = aggAB,
RMIPP−k is satisﬁed when Cr = aggC, and RHMIPP is the
same as RMIPP−k except its commitment to C is hiding.
D. HICIAP
Since HICIAP is used extensively in the construction
of SNARKBLOCK, we provide a brief overview of its
functionality here. We defer discussion of these algo-
rithms including their construction and security claims
until Section VI.
HICIAP is a zkSNARK which aggregates multiple
Groth16 proofs of the same relation. Of its aggregated
proofs, it proves that 1) they verify with respect to
veriﬁer-supplied public inputs, and 2) they share a
common public input element (which is hidden by the
aggregate proof). In addition, HICIAP can link aggregate
proofs: it can prove in zero-knowledge that the proofs
in a set of HICIAP proofs all share the same common
input element.
GenCk(n) → (ck, srs) Generates a commitment key
1 × G2 and a (short) struc-
Formally, HICIAP consists of six procedures:
(ck1, ck2, ck3) ∈ Gn
2 × Gn
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
951
1
tured veriﬁcation key srs which can be used, respec-
tively, to prove and verify HICIAP aggregates of up
to n− 2 Groth16 proofs, where n is a power of 2.
Com(ck, ˆS) → comin Constructs a commitment to the
as
prepared Groth16 public inputs
comin := ˆS∗ ck1,[:n−2].
Prove((ck, crs), ˆS, (a0,{πi}n−2
ˆS ∈ Gn−2
i=1 )) → ( ˆπ,o) Produces
the common witness element a0 ∈ F,
a
succinct proof that each Groth16 proof πi veriﬁes
w.r.t.
the
ˆSi ∈ G1, and the given Groth16
prepared input
CRS. Also produces an opening o to a commitment
to a0 contained inside ˆπ. The opening is used in
LinkProve.
Vfy(srs, ˆπ, comin) → {0,1} Veriﬁes the given aggregate
proof w.r.t. the committed public input. Alternatively,
a set of prepared Groth16 inputs can be passed
instead of comin.
i=1, (a0,{oi}t
i=1)) → πlink Using
the
openings oi, produces a proof
the given
aggregate proofs share the witness element a0 ∈ F.
i=1) → {0,1} Veriﬁes the link proof
LinkVfy(πlink,{ ˆπi}t
LinkProve({ ˆπi}t
that
w.r.t. the given aggregate proofs.
IV. ZERO-KNOWLEDGE BLOCKLISTS
We now give our framework for zero-knowledge
blocklists, taken directly from BLAC [TAKS10], but with
modiﬁcations to support multiple identity providers and
allow for additional precomputation.
A. Setting
A zero-knowledge blocklist allows users to attest that
an identity issued by one of a set of identity providers is
not in a blocklist. We now detail these concepts:
Identity. We use k to denote a user’s private identity.
A single user in the real world can hold arbitrarily many