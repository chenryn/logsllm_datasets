1An origin is deﬁned as a three tuple , e.g., .
the postMessage() API, which asynchronously transfers
immutable strings.
Isolation frameworks like Privilege-separated JavaScript
(PSJ) [3] place untrusted libraries in separate iframes.
A trusted master frame implements sensitive functional-
ity, and exposes that functionality to untrusted frames via
asynchronous pass-by-value RPCs that are layered atop
postMessage(). The master frame also routes messages
between untrusted frames.
When the master frame creates an untrusted frame, the
master initializes the new frame in some way, e.g., by delet-
ing references to sensitive functions, or creating virtualized
copies of sensitive functions (see §VI for more detail). The
master also injects a communication library which layers a
high-level RPC protocol atop raw postMessage() calls.
The master then loads the untrusted code, which uses the
communication library to interact with the master.
Advantages: If the master trusts nothing in an untrusted
frame (including the communication stub that the master
injected at initialization time!), the master can rely on the
browser to isolate the master and the untrusted frames.
This is because each frame represents a separate JavaScript
runtime that can only exchange immutable strings with other
frames. Thus, if an untrusted frame falls victim to proto-
type poisonings, mutability attacks, or dangerous JavaScript
statements, other frames (included the trusted master) are
still safe.
Disadvantages: Frame-based isolation forces RPCs to be
asynchronous. Asynchronous semantics are often well-suited
for IO operations, and JavaScript uses asynchronous call-
backs to handle user input and network operations (§III-B).
Unfortunately, many types of mashup communication are
best expressed using synchronous RPCs. For example, sup-
pose that the master wants to incorporate a cryptography
library that deﬁnes a hash function. The master’s code can
be written in a much simpler way if the call to the hash
function is synchronous. If cross-domain interactions must
be asynchronous, then any master function f which invokes
an RPC must be split into a “top half” that initiates the RPC,
and a “bottom half” callback that asynchronously receives
and processes the result. This asynchronous refactoring
affects any code in the master that calls f—since f is now
asynchronous, anything that invokes f must deﬁne a callback
which is ﬁred when f has completed. Even worse, if f’s
bottom half must invoke additional RPCs, then this bottom
half must be split too. This stack splitting is difﬁcult for
developers to manage across long, multi-hop asynchronous
call chains [2]; as a result, there are many projects which
attempt to introduce more synchrony into JavaScript [25],
[26], [27], [36] (although all of these projects provide
pseudo-synchrony, not Pivot’s true synchrony (§VI)).
264
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
C. Isolation Using Code Rewriting
Isolation systems like Caja [24] and Jigsaw [22] place
each domain’s code inside the same frame. To make this
co-location safe,
the isolation system must rewrite each
domain’s code. For example, dangerous statements like
delete are statically removed at rewrite time. Preventing
other security problems requires the insertion of runtime
checks. For example, JavaScript allows object properties
to be accessed using dot notation (obj.x) and bracket
notation (obj["x"]). Bracket notation allows the property
speciﬁer to be an arbitrary expression, like the return value
of a function (obj[f()]). To prevent manipulation of the
__proto__ property, the rewriter must instrument property
accesses that use the bracket notation.
As an application executes, it generates call chains which
may cross isolation boundaries. For example, a library from
domain X may invoke code from domain Y; in turn, Y’s
code may invoke a sensitive browser function. Each library
has distinct security privileges which constrain the allowable
interactions. To enforce these privileges, the isolation system
must rewrite functions so that they track execution context.
For example, Jigsaw maintains a privilege stack which rep-
resents the access rights of the corresponding functions on
the call stack; by examining the top of this stack, the Jigsaw
runtime can determine the access privileges of the currently
executing function. To implement this privilege stack, Jigsaw
rewrites function deﬁnitions so that, on function entry, a new
entry is pushed onto this stack, and on function return, that
entry is popped.
Advantages: Since all libraries reside within the same
frame, they can interact using synchronous RPCs. As dis-
cussed earlier, synchronous RPCs simplify cross-domain
interactions and make applications easier to understand.
Rewriting systems also allow libraries to exchange data by
reference instead of by value (as postMessage() requires).
Pass-by-reference is safe because the security runtime san-
itizes objects as they cross isolation boundaries, wrapping
the objects in proxies that only reveal sensitive properties
to authorized execution contexts. Using pass-by-reference,
applications can avoid complex marshaling operations that
postMessage()-based sharing may require.
Disadvantages: Compared to frame-based systems,
rewriting solutions impose high performance costs. Whereas
iframe isolation is implemented by fast C++ code inside
the browser, rewriting systems use application-level checks
that are implemented in JavaScript. Depending on the ap-
plication, these checks can reduce performance by 10x or
more [12], [22], [31]. Since multiple, untrusted libraries are
forced to share the single DOM belonging to a single frame,
the rewriter must expose a virtualized DOM interface to each
library. The security checks in this virtualized DOM further
reduce performance. Rewriting systems also force develop-
ers to write code in a new JavaScript dialect which has non-
A Pivot app
Figure 5: The master frame of a simple Pivot application.
standard semantics as a result of restricted operations and
forbidden (but occasionally useful) statements like eval().
D. Summary
Historically, iframe isolation has provided high perfor-
mance, but
it has required asynchronous, pass-by-value
RPCs. Rewriting systems provide synchronous pass-by-
reference RPCs, but performance is poor, and developers
cannot use raw JavaScript. Ideally, developers could use the
full, unconstrained JavaScript language to write RPCs that
are synchronous, high-performance, and capable of using
pass-by-reference arguments. In the next section, we de-
scribe how Pivot achieves three of the four goals, providing
synchronous, fast mashups that are written in raw JavaScript.
We describe how the unmet goal (pass-by-reference RPC
arguments) is difﬁcult to implement efﬁciently.
III. DESIGN
At initialization time, a Pivot application consists of a
single frame (see Figure 5). This frame contains three
items: the trusted JavaScript code belonging to the Pivot
master library; the trusted, application-speciﬁc JavaScript
code which implements sensitive operations; and a list of
URLs representing untrusted content to load in the satellite
frames. Pivot’s master library is responsible for creating new
satellites and routing RPC messages between the satellites.
Each satellite frame contains rewritten (but untrusted)
application code, and an untrusted Pivot scheduler. A satel-
lite’s generator function (§III-A) yields to its local scheduler
upon invoking an RPC. The scheduler sends the RPC
request to the master frame, receives the response from the
master frame, and restarts the local generator function. The
scheduler also maintains the queue of deferred asynchronous
event handlers. Using this queue, the scheduler maintains the
illusion of single-threaded execution within a frame (§III-B).
Figure 6 provides an example of a satellite frame.
265
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
A satellite frame
Figure 6: A satellite frame in a simple Pivot application. This
ﬁgure depicts the unrewritten version of the frame, i.e., this
is the code that the developer writes. See Section III-A for
a description of how Pivot rewrites code.
A. Rewriting: Creating Generators
is equivalent
Each JavaScript frame represents a single-threaded exe-
cution context. When a frame loads, it executes top-level
code that
to the main() function of a C
program. Once the top-level code ﬁnishes, the browser can
ﬁre application-deﬁned event handlers in response to asyn-
chronous events like user inputs or network activity. In this
section, we ignore asynchronous event handlers and describe
how to transform the top-level code into a generator. In
Section III-B, we discuss how Pivot supports asynchronous
event handlers.
Figure 7(a) provides a simple example of RPC invocation.
From the developer’s perspective, the RPC invocation looks
like a normal JavaScript function call. However, Pivot
rewrites the RPC call and adds bookkeeping code to
coordinate the behavior of the satellite frame and the master
frame.
Creating the generator function: First, Pivot wraps the
top-level application code in a function called program()
(see Figure 7(b)). Pivot replaces the RPC import statement
(Pivot.getFunction()) with code that deﬁnes a gener-
ator function. This generator represents a client-side RPC
stub. When invoked, the stub uses postMessage() to send
an RPC request to the master frame. The stub then yields the
special value Pivot.RPC_YIELD. Later, when the generator
resumes execution, it assumes that the local Pivot library has
var sha1 = Pivot.getFunction("crypto",
"sha1");
var retVal = sha1("foo");
(a) The unrewritten code invokes an RPC and stores the result.
//Pivot wraps the entire application in a
//generator function called "program".
var program = function(){
//Pivot rewrites the sha1 RPC stub
//to send a postMessage() request
//to the master frame, then yield.
var sha1 = function(){
postMessage(window.parent, //The master frame.
{namespace: "crypto",
funcName: "sha1",
args: Pivot.serialize(arguments)});
//The "arguments" keyword is a
//predefined JavaScript array
//containing a function’s arguments.
yield Pivot.RPC_YIELD;
//When control flow reaches here, it
//means that Pivot has restarted the
//yielding RPC stub, placing the RPC
//return value in Pivot.RPCRetVal.
yield Pivot.deserialize(Pivot.RPCRetVal);
};
//The next six lines are the rewritten
//version of "var retval = sha1(’foo’)".
var __tmp__, __gen__ = sha1("foo");
while((__tmp__ = __gen__.next()) ==
Pivot.RPC_YIELD){
yield Pivot.RPC_YIELD;
}
var retVal = __tmp__;
yield Pivot.CALL_CHAIN_FINISHED;
};
program = program(); //Get the actual generator.
(b) The rewritten code is a generator that yields upon RPC invocation.
Figure 7: Transforming an application into a generator
function.
received the RPC response and placed the response in the
special value Pivot.RPCRetVal. The stub simply returns
the value to the local caller of the stub.
return value Pivot.RPC_YIELD.
Pivot rewrites each function call site to check for the
special
If a function
returns this value, it means that the function (or something
in its downstream call chain) invoked an RPC. If a call
site receives a Pivot.RPC_YIELD value, that call site will
yield that value as well. This yielding occurs all the way
up the call stack, creating a chain of paused generator
functions that is rooted by the program() function. Note
that, although Pivot rewrites every function invocation, it
only has to unwind and rewind call stacks if an RPC is
invoked.
The local scheduler: Figure 8 depicts Pivot.run(). This
is
function issues the initial call
the function to which program() yields. If program()
returns Pivot.RPC_YIELD,
then Pivot.run() sim-
to program(), and it
266
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
Pivot.run = function(){
var retVal = program.next();
switch(retVal){
case Pivot.RPC_YIELD:
//Need to wait for the master
//to send an RPC response via
//postMessage() . . .
return;
case Pivot.CALL_CHAIN_FINISHED:
//Do we need to run deferred
//handlers for asynchronous
//events?
Pivot.drainQueue();
return;
default:
alert("Error!");
break;
}
}
Figure 8: The Pivot scheduler simply invokes a generator
function (Figure 7(b)) and checks whether it yielded due to
an RPC invocation.
//Handle incoming postMessage()s.
Pivot.handlePM = function(evt){
function(evt){
switch(evt.data.type){
case Pivot.RPC_RESPONSE:
//Local code invoked an RPC, and we
//have received the response. Resume
//execution of local RPC stub!
Pivot.RPCRetVal = evt.data.RPCData;
Pivot.run();
break;
case Pivot.RPC_REQUEST:
//External satellite wants to call
//a locally defined function.
var retVal = Pivot.callLocalFunc(evt);
var resp = {type: Pivot.RPC_RESPONSE,
RPCData: retVal};
evt.source.postMessage(resp,
window.parent);
break;
default:
alert(‘‘Error!’’);
}
};
window.addEventListener("message",
Pivot.handlePM);
//Start the rewritten application!
Pivot.run();
Figure 9: At the bottom of a satellite frame, Pivot places
code to respond to postMessage()s and to start the frame’s
generator function.
satellite frame waits
ply terminates, and its
for an
RPC response via postMessage(). If program() re-
turns Pivot.CALL_CHAIN_FINISHED, then Pivot.run()
knows that program() has terminated naturally,
it
has no more top-level code to run (see the bottom of
Figure 7(b)). In this case, Pivot.run() knows that it is
now safe to execute any deferred event handlers. We discuss
how Pivot processes these handlers in Section III-B.
i.e.,
and
invokes
Pivot.RPCRetVal,
RPC responses: Figure 9 shows the postMessage()
handler that Pivot
inserts into each satellite. When the
satellite receives an RPC response, Pivot extracts the
from the postMessage() data, stores it
RPC result
Pivot.run().
in
Pivot.run() invokes the paused program() routine.
program() resumes
the
while-loop which invokes the sha1() RPC stub (see
Figure 7(b)). When the stub resumes,
the
in Pivot.RPCRetVal. The stub returns
RPC result
the
that value to program(). program() consumes
special
value
Pivot.CALL_CHAIN_FINISHED
signals
to Pivot.run() that the program’s top-level code is done.
and then terminates by yielding the
This
it ﬁnds
value.
execution
at
the
top
of
Summary: Figures 7(b), 8, and 9 collectively represent the
rewritten version of the simple application in Figure 7(a).
Figure 10 depicts the end-to-end RPC control ﬂow.
B. Deferring Asynchronous Events
From the application’s perspective, a standard frame is
single-threaded and non-preemptive—at any given moment,
at most one application-deﬁned call chain is executing. An
application can deﬁne callbacks which ﬁre in response to
asynchronous events, but a callback’s execution can never
overlap with the execution of another callback or the appli-
cation’s top-level code.
As currently described, Pivot RPCs can violate these con-