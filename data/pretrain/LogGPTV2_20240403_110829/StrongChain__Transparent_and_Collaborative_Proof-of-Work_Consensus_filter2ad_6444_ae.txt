to follow incentives of
rational miners,
StrongChain does not require any radical changes from them
and is compatible with centralized mining pools; however, it
is speciﬁcally designed to mitigate their main security risk
(i.e., power centralization). In StrongChain such pools could
be much smaller than in Bitcoin (due to minimized vari-
ance) and to support this argument we conducted a study.
We listed the largest Bitcoin mining pools and their shares
in the global mining power (according to https://www.
blockchain.com/en/pools as for the time of writing).
Then for each pool, we calculated what would be the pool
size in StrongChain to offer the miner the same payout vari-
ance experience, and the variance reduction factor in that
case. As shown in Table 2, for the Bitcoin largest min-
ing pool with 18.1% of the global hash rate, an equivalent
Pool Size
StrongChain Reduction
Mining Pool
BTC.com
F2Pool
AntPool
SlushPool
ViaBTC
BTC.TOP
BitClub
DPOOL
Bitcoin.com
BitFury
Bitcoin
18.1%
14.1%
11.7%
9.1%
7.5%
7.1%
3.1%
2.6%
1.9%
1.7%
Size
74×
82×
87×
92×
95×
96×
103×
104×
106×
106×
0.245%
0.172%
0.135%
0.099%
0.079%
0.074%
0.030%
0.025%
0.018%
0.016%
Table 2: Largest Bitcoin mining pools and the corresponding pool
sizes in StrongChain offering the same relative reward variance
(Tw/Ts = 1024 and γ = 10).
pool in StrongChain (to provide miners the same reward ex-
perience) could be as small as 0.245% of the hash rate –
around 74 times smaller. Even better reduction factors are
achieved for smaller pools. Therefore, our study indicates
that StrongChain makes the size of a pool almost an irrel-
evant factor for miners’ beneﬁts (i.e., there is no objective
advantage of joining a large pool over a medium or a small
one). Therefore we envision that with StrongChain, central-
ized mining pools will naturally be much more distributed.
Limitations
As discussed, it is beneﬁcial for the system if as many par-
ticipants as possible independently run full nodes; however,
miners join large centralized pools not only due to high re-
ward variance. Other potential reasons include the minimiza-
tion of operational expenses as running a full node is a large
overhead, higher efﬁciency since large pools may use high-
performance hardware and network, better ability to earn ex-
tra income from merge mining [29], better protection against
various attacks, anonymity beneﬁts, etc. This work focuses
on removing the reward variance reason. Although we be-
lieve that StrongChain would produce a larger number of
small pools in a natural way, it does not eliminate the other
reasons, so some large centralized pools may still remain.
Luckily, our system is orthogonal to multiple concurrent so-
lutions. For instance, StrongChain could be easily combined
with non-outsourceable puzzle schemes (see Section 8) to in-
crease the number of full nodes by explicitly disincentivizing
miners from outsourcing their computing power. We leave
such a combination as interesting future work.
7 Realization in Practice
We implemented our system in order to investigate its feasi-
bility and conﬁrm the stated properties. We implemented a
StrongChain full node with interactive client in Python, and
USENIX Association
28th USENIX Security Symposium    831
our implementation includes the complete logic from Algo-
rithm 1 and all functionalities required to have a fully opera-
tional system (communication modules, message types, val-
idation logic, etc...).9 As described before, the main changes
in our implementation to the Bitcoin’s block layout are:
• a new (20B-long) Coinbase header ﬁeld,
• a new binding transaction protecting all weak headers
of the block,
• removed original coinbase transaction,
where a binding transaction has a single (32B-long) output
as presented in Equation 3.10
Weak headers introduced by our system impact the band-
width and storage overhead (when compared with Bitcoin).
Due to compressing them (see Section 4.2), the size of a sin-
gle weak header in a block is 60B. For example, with an
average number of weak headers equal 1024, the storage and
bandwidth overhead increases by about 61.5KB per block
(e.g., with 64 weak headers, the overhead is only 3.8KB).
Taking into account the average Bitcoin block size of about
1MB (the average between 15 Oct and 15 Nov 201811),
1024 weak headers constitute around 6.1% of today’s blocks,
while 64 headers only 0.4%. The same overhead is intro-
duced to SPV clients, that besides a strong header need to
obtain weak headers and a proof for their corresponding
binding transaction. Thus, an SPV update (every 10 min-
utes) would be 61.5KB or 3.8KB on average for 1024 or
64 weak headers, respectively. However, since only strong
headers authenticate transactions, SPV clients do not need
to store weak headers and after they are validated, they can
remove them (they need to just calculate and associate their
aggregated PoW with the strong header). Such an approach
would not introduce any noticeable storage overhead on SPV
clients.
Nodes validate all incoming weak headers; however, this
overhead is a single hash computation and simple sanity
checks per header. Even with our unoptimized implemen-
tation running on a commodity PC the total validation of
a single weak header takes around 50µs on average (i.e.,
51ms per 1024 headers on a single core). Given that we do
not believe this overhead can lead to more serious denial-of-
service attacks than ones already known and existing in Bit-
coin (e.g., spamming with large invalid blocks). Addition-
ally, StrongChain can adopt prevention techniques present in
Bitcoin, like blacklisting misbehaving peers.
9Our implementation is available at https://github.com/ivan-
homoliak-sutd/strongchain-demo/.
10An alternative choice is to store a hash of weak headers in a header
itself. Although simpler, that option would incur a higher overhead if the
number of weak headers is greater than several.
11https://www.blockchain.com/en/charts/avg-block-size
8 Related work
Employing weak solutions (and their variations) in Bitcoin is
an idea [36,38] circulating on Bitcoin forums for many years.
Initial proposals leverage weak solutions (i.e., weak blocks)
for faster transaction conﬁrmations [45,46], for signaling the
current working branch of particular miners [13,14,30]. Un-
fortunately, most of these proposals come without necessary
details or lack rigorous analysis. Below, we discuss the most
related attempts that have been made to utilize weak or stale
blocks in PoW-based decentralized consensus protocols. We
compare these systems in Table 3 according to their reward
and PoW calculation schemes.
Subchains. Rizun proposes Subchains [35], where a chain
of weak blocks (a so-called subchain) bridging each pair of
subsequent strong blocks is created. The design of Subchain
puts a special focus on increasing the transaction through-
put and the double-spend security for unconﬁrmed transac-
tions. Rizun argues that since the (weak) block interval of
subchains is much smaller than the strong block interval, it
allows for faster (weak) transaction conﬁrmations. Another
claimed advantage of such an approach is that during the
process of building subchains, the miners can detect forks
earlier, and take actions accordingly to avoid wasting com-
putational power. However, the design of Subchain sidesteps
a concrete security analysis at the subchain level. In detail,
by using a chaining data structure where one weak header
referencing the previous weak header in a subchain, it intro-
duces high stale rate on a subchain. More importantly, due
to applying a Bitcoin-like subchain selection policy in case
of conﬂicts, this approach is vulnerable to the selﬁsh mining
attack launched on a subchain.
Flux. Based on similar ideas as Subchain, Zamyatin et al.
propose Flux [49]. In contrast to Subchain, Flux shares re-
wards (from newly minted coins and transaction fees) evenly
among the ﬁnders of weak and strong blocks according to
the computational resources they invested. This approach
reduces the reward variance of miners, and therefore miti-
gates the need for large mining pools, which is beneﬁcial for
the system’s decentralization. In addition, simulation exper-
iments show that Flux renders selﬁsh mining on the main
chain less proﬁtable. However, alike Subchains, Flux em-
ploys a chain structure for weak blocks, which inevitably in-
troduces race conditions, increasing the stale rate of weak
blocks and making it more susceptible to selﬁsh mining at-
tacks at the subchain level. The designers of Flux let both
of these issues open and discuss the potential application of
GHOST [41] to subchains. Another limitation of this work
is that the authors do not analyze the requirements on space
consumption when putting possibly a high number of over-
lapping transactions into Flux subchains, which could nega-
tively inﬂuence network, storage, and processing resources.
Remarks on Subchain and Flux. One important difference
between our approach and the above two designs is that we
832    28th USENIX Security Symposium
USENIX Association
Bitcoin v0.1
Reward (strong)
Reward (weak)
Chain weight contrib. (strong)
Chain weight contrib. (weak)
R + F
0
1
0
Bitcoin
R + F
0
Tmax/Ts
0
Fruitchains
Flux
StrongChain
0
(R + F)/E
Tmax/Ts
0
(R + F)/(E + 1)
(R + F)/(E + 1)
Tmax/Ts
0
cR + F
cγRTs/Tw
Tmax/Ts
Tmax/Tw
Table 3: The comparison of reward and PoW computation schemes of StrongChain and the related systems. (F: block transaction fees, E:
expected number of weak headers per block. The entries for Flux are approximations for the PPLNS scheme in P2Pool, on which it is based.)
adopt a ﬂat hierarchy for the weak blocks, which not only
eliminates the possibility of selﬁsh mining in a set of weak
solutions, but also avoids the issue of stale rate of weak
blocks. In contrast, both Subchain and Flux employ a chain
structure for weak blocks, inevitably making them more sus-
ceptible to selﬁsh mining attacks at the subchain level. More-
over, in our approach rewards are not shared, therefore min-
ers can only beneﬁt from appending received weak solutions.
In addition, none of Subchain and Flux provide a concrete
implementation demonstrating their applicability.
FruitChains. Another approach to address the mining vari-
ance and selﬁsh mining issues is the FruitChains protocol
proposed by Pass and Shi [32]. In FruitChains, instead of di-
rectly storing the records inside blocks, the records or trans-
actions are put inside “fruits” with relatively low mining dif-
ﬁculties. Fruits then are appended to a blockchain via blocks
which are mined with a higher difﬁculty. Mined fruits and
blocks yield rewards, hence, miners can be paid more often
and there is no need to form a mining pool.
However,
some practical and technical details of
FruitChains lead to undesired side effects. First, the scheme
allows fruits with small difﬁculties to be announced and ac-
cepted by other miners. With too small difﬁculty it could
render high transmission overheads or even potential denial-
of-service attacks and its effects on the network are not in-
vestigated. On the other hand, too high fruit difﬁculty could
result in a low transaction throughput and a high reward vari-
ance. Second, duplicate fruits are discarded, even though
they might be found by different miners – this naturally im-
plies some stale fruit rate (uninvestigated in the paper). Sim-
ilarly, it is unclear would a block ﬁnder have an incentive
to treat all fruits equally and to not prioritize her mined
fruits (especially when fruits are associated with transac-
tion fees). Moreover, fruits that are not appended to the
blockchain quickly enough have to be mined and broadcast
again, rendering additional overheads. Finally, the descrip-
tion of FruitChains lacks important details (e.g., the size of
the fruits or the overheads introduced) as well as an actual
implementation.
GHOST and Ethereum. An alternative approach for de-
creasing a high reward variance of miners is to shorten the
block creation rate to the extent that does not hurt the over-
all system security – such an approach increases transac-
tion throughput as well. The Greedy Heaviest-Observed
Sub-Tree (GHOST) chain selection rule [41] makes use of
stale blocks to increase the weight of their ancestors, which
achieves a 600 fold speedup for the block generation com-
pared to Bitcoin, while preserving its security strength. De-
spite the inclusion of stale blocks in the blockchain, only the
miners of the main chain get rewards for the inclusion of the
stale blocks.
In contrast to the original GHOST, the white and yellow
papers of Ethereum [44, 48] propose to reward also miners
of stale blocks in order to further increase the security –
not wasting with the consumed resources for mining of stale
blocks. However, Ritz and Zugenmaier shows that rewarding
so called “uncle blocks” lowers the threshold at which self-
ish mining is proﬁtable [34] – a selﬁsh miner can built-up
the “heaviest” chain, as she can reference blocks previously
not broadcast to the honest network. Likewise, the inclu-
sive blockchain protocol [20], which increases the transac-
tion throughput, but leaves the selﬁsh mining issue unsolved.
DAG-based Protocols. SPECTRE [40] is an example of
the protocols family that leverages a directed acyclic graph
(DAG). This family proposed more radical design changes
motivated by the observation that one essential through-
put limitation of Nakamoto consensus is the data struc-
ture leveraged which can be maintained only sequentially.
SPECTRE generalizes the Nakamoto’s blockchain into a
DAG of blocks, while allowing miners to add blocks con-
currently with a high frequency, just basing on their indi-
vidual current views of the DAG. Such a design provides
multiple advantages over chain-based protocols including
StrongChain. Frequently published blocks increase transac-
tion throughput and provide fast conﬁrmation times while
relaxed consistency requirements allow to tolerate propaga-
tion delays. Like StrongChain, SPECTRE also aims to de-
crease mining reward variance, but achieves it again via fre-
quent blocks. However, frequent blocks have a side effect of
transaction redundancy which negatively impacts the stor-
age and transmission overheads, and this aspect was not in-
vestigated. Moreover, SPECTRE provides a weaker prop-
erty than chain-based consensus protocols as simultaneously
added transactions cannot be ordered. This and schemes fol-
lowing a similar design are payments oriented and to support
order-speciﬁc applications, like smart contracts, they need to
be enhanced with an additional ordering logic.
More recently, Sompolinsky and Zohar [42] proposed two
DAG-based protocols improving the prior work. PHAN-