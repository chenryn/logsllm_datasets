These chains use placeholder gadget addresses, since the ﬁnal
addresses are not yet known at this point. Eventually, these
placeholders will be replaced by gadget addresses in the
protected code, so that executing the veriﬁcation code implicitly
veriﬁes that the protected code is still intact. Along with the
ROP chains, Parallax inserts a loader routine to bootstrap them.
Optionally, the binary to protect is compiled from source if
not operating on a legacy binary.
Next, Parallax creates a collection of all gadgets available
in the binary 3(cid:3). First, any existing gadgets are added to the
collection. Then, Parallax walks through the list of instructions
which were selected for protection. For every such instruction,
Parallax examines if it can be augmented with an overlapping
gadget. If so, it inserts a gadget using binary rewriting, and
adds this new gadget to the collection. The gadgets are denoted
as g1, . . . , g5 in Figure 2. Our strategy for crafting overlapping
gadgets is discussed in Section IV.
Note that we do not require the inserted overlapping gadgets
to form a Turing-complete set, since most binaries contain a
Turing-complete gadget set by default [32]. If not, a standard
set of non-overlapping gadgets can be inserted into the binary
to augment the protective gadgets already inserted.
Finally, Parallax creates a gadget mapping which cat-
egorizes the available gadgets in the binary into a set of
types; for instance, memory stores and register moves. The
gadget mapping is then used to recompile the veriﬁcation
code such that it uses actual gadgets instead of placeholder
4(cid:3). During compilation of the veriﬁcation code,
addresses
overlapping gadgets are always preferred over non-overlapping
gadgets. Tampering with the protected instructions modiﬁes
the code bytes of the overlapping gadgets, thereby invalidating
them. Such changes are implicitly detected by the veriﬁcation
code, which malfunctions if the integrity of the gadgets it uses
is violated. We discuss the tampering and analysis resistance
of veriﬁcation code in Sections V and VI.
Listing 2 An attempt to disable the ptrace detector.
(gdb) set *(unsigned char*)0x08048479=0x90
(gdb) set *(unsigned char*)0x0804847a=0x90
IV. PROTECTING CODE INTEGRITY
This section discusses the creation of ROP gadgets which
overlap with existing code, and protect the code integrity. As
discussed in Section III, these gadgets need not form a Turing-
complete set. Instead, the focus is on gadgets which have
maximal overlap with the protected instructions. The creation
of veriﬁcation code which uses the gadgets is discussed in
Section V. We provide an example of gadget insertion in
Section IV-A, and generalize it in Section IV-B by describing
the rules which Parallax uses to craft overlapping gadgets.
A. A Tamperproofed Ptrace Detector
We provide a running example of a ptrace detection function
augmented with overlapping gadgets. We compiled this function
with gcc 4.6.3, and then used Parallax to search for locations
where overlapping gadgets could be inserted. In the example,
we manually chose which instructions to protect from the list of
possible locations emitted by Parallax. To avoid manual effort,
it is also possible to input a list of functions to protect, and rely
on Parallax to overlap gadgets with as many instructions in
these functions as possible. An alternative approach, if source is
available, is to select high-level source lines to protect, and use
debugging symbols to map these onto the associated machine
instructions. The rules Parallax uses to create gadgets are
discussed in Section IV-B.
Listing 1 shows a disassembly dump of our tamperproofed
ptrace detector. For clarity, we have shortened addresses such
as 08048438 to n+38. We ﬁrst describe the purpose of the
ptrace detector, and then elaborate on how it is protected.
The ptrace detector checks if a process is being debugged
using ptrace. To achieve this, the detector calls the ptrace
system call, requesting a trace of the host process. If a
debugger is already attached, this call fails, and the debugger
is thus detected. In the example, the detector jumps to a
cleanup_and_exit function if a debugger is detected.
Attackers commonly attempt
to circumvent such anti-
debugging code by modifying it at runtime, as shown in
127127
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:51:18 UTC from IEEE Xplore.  Restrictions apply. 
Listing 1 A ptrace detector with gadgets (shaded) overlapping sensitive areas.
n+38 :
n+32 :
n+38: 55
n+39: 89 e5
n+3b: 83 ec 18
n+3e: 89 04 24
n+41: e8 d5 fe ff ff
n+46 :
n+46: 55
n+47: 89 e5
n+49: 83 ec 18
push ebp
mov
ebp,esp
sub
esp,24
mov
[esp],eax
call exit@plt
push ebp
mov
ebp,esp
sub
esp,24
relocate
−−−−−−−−−−−→
n+32: 55
n+33: 89 e5
n+35: 83 ec 18
n+38: 89 04 24
n+3b: e8 d5 fe ff ff
n+46 :
n+46: 55
n+47: 89 e5
n+49: 83 ec 18
push ebp
mov ebp,esp
sub esp,24
mov [esp],eax
call exit@plt
push ebp
mov ebp,esp
sub esp,24
n+4c: c7 44 24 0c 00 00 00 00
mov
[esp+0xc],0
n+4c: c7 44 24 0c 00 00 00 00 mov [esp+0xc],0
n+54: c7 44 24 08 00 00 00 00
mov
[esp+0x8],0
n+54: c7 44 24 08 00 00 00 00 mov [esp+0x8],0
n+5c: c7 44 24 04 00 00 00 00
mov
[esp+0x4],0
n+5c: c7 44 24 04 00 00 00 00 mov [esp+0x4],0
n+64: c7 04 24 00 00 00 00
mov
[esp],0
n+64: c7 04 24 00 00 00 00
mov [esp],0
n+6b: e8 cb fe ff ff
call ptrace@plt
existing far ret
−−−−−−−−−−−→
n+6b: e8 cb fe ff ff
call ptrace@plt
n+70: 85 c0
n+72: 79 07
n+74: b8 01 00 00 00
n+79: eb bd
n+7b: b8 00 00 00 00
n+80: c9
n+81: c3
test eax,eax
jns
n+7b
mov
eax,1
jmp
n+38
mov
eax,0
leave
ret
modify exit arg
−−−−−−−−−−−→
modify target
−−−−−−−−−−−→
n+70: 85 c0
n+72: 79 07
test eax,eax
jns n+7b
n+74: b8 c3 00 00 00
mov eax,0xc3
n+79: eb c3
n+7b: b8 00 00 00 00
n+80: c9
n+81: c3
jmp n+32
mov eax,0
leave
ret
Listing 2. There, an adversary overwrites the jump to the
cleanup_and_exit function at address n+79 with nop
instructions. The goal of this attack is to redirect control to a
successful return even if a debugger is attached.
Overlapping gadgets defend against this attack class, as
they are destroyed if the code they overlap with is modiﬁed. As
mentioned in Section III, this is detected when the veriﬁcation
code using the gadgets fails to execute. Note that an adversary
could also modify the call to check_ptrace itself. As
we show in Section VII-A, Parallax can protect up to 90%
of the binary, allowing us to defend against such attacks
by inserting protective gadgets beyond the primary list of
instructions to protect. While this example focuses on runtime
code modiﬁcation, Parallax also prevents static code patching,
used in software cracking.
In Listing 1, four key code areas which adversaries are likely
to target have been protected using three overlapping gadgets.
The ﬁrst two locations are (1) the call to ptrace itself, at
address n+6b, and (2) the ﬁrst argument to ptrace, at address
n+64, which requests a trace of the host process. An adversary
may eliminate the call, so that execution always falls through
to the successful return code at the end of the function. Also,
an adversary may modify the call argument to request another
action from ptrace instead of a trace of the host process.
Both the call and its ﬁrst argument are protected by a seven
byte long overlapping gadget starting at address n+66. This
is an already existing gadget, which Parallax found without
making any code modiﬁcations. The gadget consists of the
instructions and al,0; add [eax],al; add al,ch;
retf, and can be used to move the contents of the ch register
into the al register (the memory write can be ignored, since
al is zeroed out).
Note that
it
is also possible to protect
the remaining
ptrace arguments at addresses n+4c through n+5c. One
possible way to protect these is to use the immediate splitting
rule, discussed in Section IV-B2. For simplicity of the example,
we do not show these modiﬁcations in Listing 1. However, we
provide a separate example of the immediate splitting rule in
Section IV-B2.
The third location which may be attacked is (3) the jump to
the cleanup_and_exit function, at address n+79, which
is taken if a debugger is detected. Eliminating this jump would
again cause control to fall through to the successful return at the
end of the function, even if the call to ptrace failed. Parallax
protects this jump by relocating the cleanup_and_exit
function, and modifying the jump offset to encode the ret
instruction for a gadget. The gadget starts at address n+78,
and contains instructions add bl,ch; ret.
Finally, the anti-debugging code could be disabled by
(4) rewriting the jns instruction at address n+72 to an
unconditional jmp instruction, so that the code always jumps
to a successful return. Parallax identiﬁes two possible ways to
protect against this. The ﬁrst is to modify the immediate operand
of the mov instruction at address n+74, such that its least
signiﬁcant byte encodes a ret instruction. This creates a ﬁve
byte long gadget at address n+71, consisting of the instructions
sar byte [ecx+0x7],0xb8; ret. This gadget ﬁlls the
memory byte at address [ecx+0x7] with the sign of the byte
it contains (the bits are either all set to 0, or all set to 1).
The mov operand is an exit status, and can be safely modiﬁed
assuming that the exit semantics differentiate only between
zero and non-zero (see Section IV-B).
An alternative way to protect the jns is to inject a spurious
instruction directly after it, which encodes the missing part
of a partial gadget. In the example, we did not use spurious
instructions, to show that no added code is needed to protect
the function.
B. Binary Rewriting Rules
This section describes the binary rewriting rules Parallax
uses to augment instructions with overlapping gadgets. The
added gadgets do not induce any performance overhead on the
128128
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:51:18 UTC from IEEE Xplore.  Restrictions apply. 
Listing 3 A split mov with overlapping gadgets (shaded).
mov eax,1
b8 01 01 c3 00 mov eax,0xc30101
35 00 01 c3 00 xor eax,0xc30100
(a) Original code.
(b) Protected code.
protected code, except where explicitly noted. In Section VII-A,
we measure the coverage of each of these rules. We use
binary rewriting techniques for legacy binaries explored in
prior work [22, 38].
1) Existing gadgets: Parallax searches for any existing
gadgets which can be used to protect code integrity. The use of
existing gadgets is advantageous, as it requires no modiﬁcations
to the protected code regions. In Section VII-A, we ﬁnd that
3%–6% of the code bytes in our test cases is protectable using
existing gadgets.
2) Modiﬁed immediate operands: One rule used by Parallax
to create new gadgets is that a partial gadget may be combined
with an adjacent immediate operand if this operand can be
modiﬁed to encode the missing portion of the desired gadget.
In Listing 1, this rule has been applied in the operand of the
instruction at address n+74. We distinguish two ways in which