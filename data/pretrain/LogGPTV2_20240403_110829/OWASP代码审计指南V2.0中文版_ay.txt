readonly attribute unsigned short readyState; 
readonly attribute unsigned long bufferedAmount; 
// networking 
attribute Function onopen; 
attribute Function onmessage; 
attribute Function onclose; 
boolean send(in DOMString data); 
void close(); 
}; 
WebSocket implements EventTarget; 
var myWebSocket = new WebSocket(“ws://www.websockets.org”); 
myWebSocket.onopen = function(evt) { alert(“Connection open ...”); }; 
myWebSocket.onmessage = function(evt) { alert( “Received Message: “ + evt.data); }; 
myWebSocket.onclose = function(evt) { alert(“Connection closed.”); }; 
审计实现 websockets 的代码时，应考虑以下事项: 
⚫ 
在已实现的客户机/服务器中放弃向后兼容性，仅使用 hybi-00 以上的协议版本。
流行的 Hixie-76 版(hiby-00)和更老的都是过时的，不安全的。 
⚫ 
当前所有浏览器的最新版本支持的推荐版本是 RFC 6455 RFC 6455(Firefox 11+、
Chrome 16+、Safari 6、Opera 12.50 和 IE10 支持)。 
⚫ 
虽然通过网络套接字隧道传输协议服务相对容易(例如，VNC，文件传输协议)，这
样可以让浏览器中的攻击者在跨站点脚本攻击的情况下访问这些隧道服务。这些服
231 
务也可能直接从恶意页面或程序中调用。 
⚫ 
协议不处理授权和认证。应用层协议应该处理这个问题以防传输敏感数据。 
⚫ 
将网络套接字接收的消息作为数据进行处理。不要试图将其直接赋给 DOM，也不
要将其作为代码进行评估。如果响应是 JSON，千万不要使用不安全的 eval()函数，
请改用安全选项 JSON.parse()。 
⚫ 
通过“ws://”协议公开的端点很容易转换为纯文本。使用“wss://”(基于 SSL/ TLS
的网络套接字)用于防止中间人攻击。 
⚫ 
在浏览器之外欺骗客户端是可能的，因此网络套接字服务器应该能够处理不正确的
恶意输入。始终验证来自远程站点的输入，因为它可能已被更改。 
⚫ 
实现服务器时，审计网络套接字握手中的“Origin:”头。尽管它可能是伪造的，
在浏览器之外，浏览器总是添加启动网络套接字连接的页面的原点。 
⚫ 
由于浏览器中的网络套接字客户端可通过 JavaScript 调用访问，所有网络套接字
通信都可能通过跨站点脚本被欺骗或劫持。要始终验证来自网络套接字连接的数据。 
4.1.5 审计什么:服务器发送的事件 
服务器发送的事件看起来类似于网络套接字，但是它们不使用特殊的协议(它们重复使
用超文本传输协议)，并且它们允许客户端浏览器只监听来自服务器的更新(消息)，从而消除
了客户端向服务器发送任何轮询或其他消息的需要。 
查看处理服务器发送事件的代码时，需要记住的事项有: 
⚫ 
验证传递给“EventSource”构造函数的网址，即使只允许相同来源的网址。 
232 
⚫ 
如前所述，将消息(“event.data”)作为数据处理，不要将内容评估为超文本标记
语言或脚本代码。 
⚫ 
始终审计消息的来源属性(“event.origin”)，以确保消息来自可信域。要使用白
名单。 
4.2 同源策略（Same Origin Policy） 
同源策略(SOP)，也称为单一源策略，是网络应用安全模型的一部分。同源策略存在代
码审计者需要考虑的漏洞。标准操作程序涵盖了网站开发的三个主要领域:信任、权威和政
策。同源策略由三个组件(scheme、host 和 port)组成。 
4.2.1  描述 
对于同源策略，Internet Explorer 有两个主要例外: 
1. 信任区域:如果两个域都在高信任区域，例如公司域，则不应用相同的源限制。 
2. 
端
口
:IE
不
包
括
Same 
Origin
组
件
的
端
口
，
因
此
http://yourcompany.com:81/index. html 和 http://yourcompany.com/index.html 被
认为来自同一个来源，没有任何限制。 
这些例外是非标准的，在任何其他浏览器中都不支持，但如果为基于Windows RT(或)IE
的网络应用程序开发应用程序，这将是需要考虑的。 
下图显示了该网址的各个部分: 
233 
4.2.2 审计什么 
如果应用程序允许用户在网址中提供数据，则代码审计者需要确保路径、查询或 
Fragment Id Code 数据得到验证。 
 确保用户提供的方案名称或授权部分具有良好的输入验证。这是一个主要的代码注入
和网络钓鱼风险。只允许应用程序需要的前缀。不要使用黑名单。代码审计应该确保只有白
名单用于验证。 
 确保权限部分仅包含字母数字，"-"和". "后面跟“/”，？,"#"。这里可能的风险是 IDN
同形词攻击。 代码审计者需要确保程序员没有采取默认行为，因为程序浏览器正确地转义
了一个特定的字符，或者在允许任何从网址派生的值被放入数据库查询或网址被回显给用户
之前，该字符将被正确转义（浏览器标准要求）。 
234 
 具有 MIME 类型 image/png 的资源被视为图像，具有 MIME text/html 的资源被视
为 html 文档。网络应用程序可以通过限制其 MIME 类型来限制该内容的权限。例如，将用
户生成的内容作为 image/png 提供比将用户生成的内容作为 text/html 提供风险小。 
 文件和资源上的特权应该授予或保留来自整个来源的特权(而不是在一个来源内区别
对待单个文件)。消减特权是无效的，因为没有特权的文件通常可以获得特权，因为标准操
作程序不隔离原始文件。 
4.3 审计日志代码 
应用程序记录不同强度和不同接收器的消息。许多日志记录应用编程接口允许您设置日
志消息的粒度，从在“跟踪”或“调试”级别记录几乎所有消息的状态，到只在“关键”级
别记录最重要的消息。日志消息的写入位置也是一个考虑因素，有时可以写入本地文件，有
时可以写入数据库日志表，或者可以通过网络链接写入中央日志服务器。 
必须控制日志记录的数量，因为向日志中写入消息的行为会占用 CPU 周期，因此向日
志中写入每个小细节都会占用更多资源(CPU、网络带宽、磁盘空间)。再加上日志必须由工
具或人来解析或解释才能有用，日志的使用者可能必须解析数千行才能找到重要的消息。 
4.3.1 描述 
日志可能因类型而异。例如，日志可能只包含应用程序状态或过程数据，允许支持或开
发人员跟踪系统在发生错误时正在做什么。其他日志可能是特定于安全的，只记录中央安全
系统感兴趣的重要信息。还有些日志可以用于商业目的，例如计费。 
235 
 应用程序日志可能非常强大，因为应用程序业务逻辑拥有关于用户的最多信息(例如，
身份、角色、权限)和事件的上下文(目标、动作、结果)，并且通常这些数据对于基础设施设
备或者密切相关的应用程序都是不可用的。应用程序日志是生产系统的一个重要特征，特别
是对于支持人员和审计人员来说，但是它经常被遗忘，并且很少在设计/需求文档中进行足
够详细的描述。安全监控、警报和报告的级别和内容需要在项目的需求和设计阶段进行设置，
并应与信息安全风险相符。应用程序日志记录还应该在应用程序中保持一致，在整个组织的
应用程序组合中保持一致，并在相关的地方使用行业标准，以便记录的事件数据可以用于各
种各样的系统消费、关联、分析和管理。 
 所有类型的应用程序都可以直接通过网络连接向远程系统发送事件数据，或者通过日
志的每日/每周/每月安全副本发到某个集中式日志收集和管理系统(例如，SIEM 或 SEM)或
其他地方的另一个应用程序。 
 如果日志中的信息很重要，并且可能用于法律事务，请考虑如何验证来源(日志)，以
及如何实施完整性和不可否认性。日志数据、临时调试日志和备份/拷贝/提取不得在所需的
数据保留期之前销毁，也不得超过此时间。法律、监管和合同义务可能会对这些时期产生影
响。 
 服务器应用程序通常将事件日志数据写入文件系统或数据库(SQL 或 NoSQL)，但是在
客户端设备上可能需要日志记录，例如安装在台式机上的应用程序以及可能使用本地存储和
本地数据库的移动设备。考虑如何将客户端日志数据传输到服务器。 
4.3.2  审计什么 
从日志记录的角度查看代码模块时，需要注意的一些常见问题包括: 
236 
使用文件系统时，最好使用独立的分区，而不是操作系统、其他应用程序文件和用户生
成的内容所使用的分区。 
对于基于文件的日志，对哪些用户可以访问目录和权限要有严格的限制。 
在网络应用程序中，日志不应暴露在网络可访问的位置，如果这样做，应限制访问，并
配置为纯文本 MIME 类型(非 HTML) 
使用数据库时，最好使用单独的数据库帐户，该帐户仅用于写入日志数据，并且具有非
常严格的数据库、表、函数和命令权限控制。 
考虑应该记录哪些类型的消息: 
输入验证失败。例如，违反协议、不可接受的编码、无效的参数名称和输出验证失败的
值，例如，数据库记录集不匹配，数据编码无效。 
授权(访问控制)认证成功和失败 
⚫ 
会话管理失败。例如，连接计时的 cookie 会话标识值修改 
⚫ 
考虑每个日志消息应该包含的内容: 
⚫ 
日期和时间，以某种常见的格式，同时，确保应用程序的所有节点都通过类似 NTP
的方式同步也非常有必要。 
⚫ 
执行操作的用户 
⚫ 
正在执行/尝试的操作 
237 
⚫ 
客户端信息。例如，IP 地址、源端口、用户代理 
⚫ 
外部分类。例如，NIST 安全内容自动化协议，常见攻击模式枚举和分类(CAPEC) 
⚫ 
对所有事件数据执行清理，以防止日志注入攻击。例如，回车符、换行符和分隔符
(也可以选择删除敏感数据) 
如果要写数据库，请阅读、理解并应用 SQL 注入备忘录 
确保在应用安全、模糊、渗透和性能测试期间实施并启用日志记录。 
确保日志记录不会耗尽系统资源，例如，通过填满磁盘空间或超出数据库事务日志空间，
从而导致拒绝服务。 
记录机制和收集的事件数据必须得到保护，以防误用，如在运输过程中被篡改，以及在
存储后被未经授权的访问、修改和删除。 
 尽快将日志数据存储或复制到只读介质。 
 考虑不应记录的内容: 
⚫ 
会话标识值(如果需要跟踪会话特定事件，考虑用散列值替换) 
⚫ 
敏感个人数据和某些形式的个人身份信息(PII) 
⚫ 
数据库连接字符串的身份验证密码(成功或不成功) 
⚫ 
密钥 
⚫ 
安全等级高于日志系统允许存储的数据 
238 
4.3.3 参考 
有关更多指导，请参见 NIST SP 800-92《计算机安全日志管理指南》。 
Mitre Common Event Expression（MCEE） 
PCISSC PCI DSS v2.0 要求 10 和 PA-DSS v2.0 要求 4 
其他通用日志文件系统(CLFS)，微软 
4.4 错误处理 
正确的错误处理在两个方面很重要: 
1.  它可能会影响应用程序的状态。最初未能防止错误可能导致应用程序进入不安全状
态。这涵盖了“安全失败”的关键前提，引入的错误不应使应用程序处于不安全的状态。应
该锁定和释放资源，终止会话(如果需要)，并停止计算或业务逻辑(当然，这取决于错误的类
型)。 
2.它可能会向用户泄露系统信息。安全应用程序开发的一个重要方面是防止信息泄漏。
错误消息让攻击者能够深入了解应用程序的内部工作方式。弱错误处理也有助于攻击者，因
为返回的错误可以帮助他们构建正确的攻击向量。 
 对于大多数错误，建议使用通用的错误页面，这种方法使攻击者更难识别潜在成功攻
击的特征，这样的话，诸如使用布尔化的盲 SQL 注入“”或响应时间特征分
析的攻击方法就不容易实现。 
239 
4.4.1  描述 
查看错误处理代码的目的是确保应用程序在所有可能的错误情况下安全地失败，无论是
预期的还是意外的。出现错误时，不会向用户显示任何敏感信息。一个公司的编码指南应该
包括关于错误处理的部分，以及它应该如何被一个应用程序套件控制，这将允许开发人员根
据这个指南进行编码，并根据它们进行审计。 