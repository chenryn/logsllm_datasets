configuration](http://kafka.apache.org/documentation#security_sasl_clientconfig)
中关于所需认证机制（GSSAPI/PLAIN）的客户端配置部分。由于Kafka Source
也可以连接 Zookeeper 以进行偏移迁移，因此"Client"部分也添加到此示例中。
除非您需要偏移迁移，否则不必要这样做，或者您需要此部分用于其他安全组件。
另外，请确保Flume进程的操作系统用户对 JAAS 和 keytab 文件具有读权限。
``` javascript
Client {
  com.sun.security.auth.module.Krb5LoginModule required
  useKeyTab=true
  storeKey=true
  keyTab="/path/to/keytabs/flume.keytab"
  principal="flume/flumehost1.example.com@YOURKERBEROSREALM";
};
KafkaClient {
  com.sun.security.auth.module.Krb5LoginModule required
  useKeyTab=true
  storeKey=true
  keyTab="/path/to/keytabs/flume.keytab"
  principal="flume/flumehost1.example.com@YOURKERBEROSREALM";
};
```
#### File Channel
必需的参数已用 **粗体** 标明。
  属性                                          默认值                              解释
  --------------------------------------------- ----------------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **type**                                      \--                                 组件类型，这个是： `file`.
  checkpointDir                                 \~/.flume/file-channel/checkpoint   记录检查点的文件的存储目录
  useDualCheckpoints                            false                               是否备份检查点文件。如果设置为 `true` ， *backupCheckpointDir* 参数必须设置。
  backupCheckpointDir                           \--                                 备份检查点的目录。 此目录不能与\**数据目录或检查点目录*checkpointDir\* 相同
  dataDirs                                      \~/.flume/file-channel/data         逗号分隔的目录列表，用于存储日志文件。 在不同物理磁盘上使用多个目录可以提高文件channel的性能
  transactionCapacity                           10000                               channel支持的单个事务最大容量
  checkpointInterval                            30000                               检查点的时间间隔（毫秒）
  maxFileSize                                   2146435071                          单个日志文件的最大字节数。这个默认值约等于2047MB
  minimumRequiredSpace                          524288000                           最小空闲空间的字节数。为了避免数据损坏，当空闲空间低于这个值的时候，文件channel将拒绝一切存取请求
  capacity                                      1000000                             channel的最大容量
  keep-alive                                    3                                   存入Event的最大等待时间（秒）
  use-log-replay-v1                             false                               （专家）是否使用老的回放逻辑 （Flume默认是使用v2版本的回放方法，但是如果v2版本不能正常工作可以考虑通过这个参数改为使用v1版本，v1版本是从Flume1.2开始启用的，回放是指系统关闭或者崩溃前执行的校验检查点文件和文件channel记录是否一致程序）
  use-fast-replay                               false                               （专家）是否开启快速回放（不适用队列）
  checkpointOnClose                             true                                channel关闭时是否创建检查点文件。开启次功能可以避免回放提高下次文件channel启动的速度
  encryption.activeKey                          \--                                 加密数据所使用的key名称
  encryption.cipherProvider                     \--                                 加密类型，目前只支持：`AESCTRNOPADDING`
  encryption.keyProvider                        \--                                 key类型，目前只支持：`JCEKSFILE`
  encryption.keyProvider.keyStoreFile           \--                                 keystore 文件路径
  encrpytion.keyProvider.keyStorePasswordFile   \--                                 keystore 密码文件路径
  encryption.keyProvider.keys                   \--                                 所有key的列表，包含所有使用过的加密key名称
  encyption.keyProvider.keys.\*.passwordFile    \--                                 可选的秘钥密码文件路径
::: note
::: title
Note
:::
默认情况下，文件channel使用默认的用户主目录内的检查点和数据目录的路径（说的就是上面的checkpointDir参数的默认值）。
如果一个Agent中有多个活动的文件channel实例，而且都是用了默认的检查点文件，
则只有一个实例可以锁定目录并导致其他channel初始化失败。
因此，这时候有必要为所有已配置的channel显式配置不同的检查点文件目录，最好是在不同的磁盘上。
此外，由于文件channel将在每次提交后会同步到磁盘，因此将其与将Event一起批处理的sink/source耦合可能是必要的，以便在多个磁盘不可用于检查点和数据目录时提供良好的性能。
:::
配置范例：
``` properties
a1.channels = c1
a1.channels.c1.type = file
a1.channels.c1.checkpointDir = /mnt/flume/checkpoint
a1.channels.c1.dataDirs = /mnt/flume/data
```
**Encryption**
下面是几个加密的例子：
用给定的秘钥库密码生成秘钥key-0：
``` bash
keytool -genseckey -alias key-0 -keypass keyPassword -keyalg AES \
  -keysize 128 -validity 9000 -keystore test.keystore \
  -storetype jceks -storepass keyStorePassword
```
使用相同的秘钥库密码生成秘钥key-1：
``` bash
keytool -genseckey -alias key-1 -keyalg AES -keysize 128 -validity 9000 \
  -keystore src/test/resources/test.keystore -storetype jceks \
  -storepass keyStorePassword
```
``` properties
a1.channels.c1.encryption.activeKey = key-0
a1.channels.c1.encryption.cipherProvider = AESCTRNOPADDING
a1.channels.c1.encryption.keyProvider = key-provider-0
a1.channels.c1.encryption.keyProvider = JCEKSFILE
a1.channels.c1.encryption.keyProvider.keyStoreFile = /path/to/my.keystore
a1.channels.c1.encryption.keyProvider.keyStorePasswordFile = /path/to/my.keystore.password
a1.channels.c1.encryption.keyProvider.keys = key-0
```
假设你已不再使用key-0，并且已经使用key-1加密新文件：
``` properties
a1.channels.c1.encryption.activeKey = key-1
a1.channels.c1.encryption.cipherProvider = AESCTRNOPADDING
a1.channels.c1.encryption.keyProvider = JCEKSFILE
a1.channels.c1.encryption.keyProvider.keyStoreFile = /path/to/my.keystore
a1.channels.c1.encryption.keyProvider.keyStorePasswordFile = /path/to/my.keystore.password
a1.channels.c1.encryption.keyProvider.keys = key-0 key-1
```
跟上面一样的场景，只不过key-0有自己单独的密码：
``` properties
a1.channels.c1.encryption.activeKey = key-1
a1.channels.c1.encryption.cipherProvider = AESCTRNOPADDING
a1.channels.c1.encryption.keyProvider = JCEKSFILE
a1.channels.c1.encryption.keyProvider.keyStoreFile = /path/to/my.keystore
a1.channels.c1.encryption.keyProvider.keyStorePasswordFile = /path/to/my.keystore.password
a1.channels.c1.encryption.keyProvider.keys = key-0 key-1
a1.channels.c1.encryption.keyProvider.keys.key-0.passwordFile = /path/to/key-0.password
```
#### Spillable Memory Channel
这个channel会将Event存储在内存队列和磁盘上。
内存队列充当主存储，内存装满之后会存到磁盘。
磁盘存储使用嵌入的文件channel进行管理。
当内存队列已满时，其他传入Event将存储在文件channel中。
这个channel非常适用于需要高吞吐量存储器channel的流，但同时需要更大容量的文件channel，以便更好地容忍间歇性目的地侧（sink）中断或消费速率降低。
在这种异常情况下，吞吐量将大致降低到文件channel速度。
如果Agent程序崩溃或重新启动，只有存储在磁盘上的Event能恢复。
**这个channel目前是实验性的，不建议用于生产环境** 。
::: hint
::: title
Hint
:::
这个channel的机制十分像Windows系统里面的“虚拟内存”。兼顾了内存channel的高吞吐量和文件channel的可靠、大容量优势。
:::
必需的参数已用 **粗体** 标明。有关其他必需属性，请参阅文件channel。
  属性                                        默认值             解释

  **type**                                    \--                组件类型，这个是： `SPILLABLEMEMORY`
  memoryCapacity                              10000              内存队列存储的Event最大数量。如果设置为0，则会禁用内存队列。
  overflowCapacity                            100000000          磁盘（比如文件channel）上存储Event的最大数量，如果设置为0，则会禁用磁盘存储
  overflowTimeout                             3                  当内存占满时启用磁盘存储之前等待的最大秒数
  byteCapacityBufferPercentage byteCapacity   20                 指定Event header所占空间大小与channel中所有Event的总大小之间的百分比 内存中最大允许存储Event的总字节数。 默认情况下会使用JVM可用内存的80%作为最大可用内存（就是JVM启动参数里面配置的-Xmx的值）。 计算总字节时只计算Event的主体，这也是提供 *byteCapacityBufferPercentage* 配置参数的原因。 注意，当你在一个Agent里面有多个内存channel的时候，而且碰巧这些channel存储相同的物理Event（例如：这些channel通过复制机制（[复制选择器](#复制选择器)）接收同一个source中的Event）， 这时候这些Event占用的空间是累加的，并不会只计算一次。如果这个值设置为0（不限制），就会达到200G左右的内部硬件限制。
  avgEventSize                                500                估计进入channel的Event的平均大小（单位：字节）
  \                 see file channel   可以使用除"keep-alive"和"capacity"之外的任何文件channel属性。 文件channel的"keep-alive"由Spillable Memory Channel管理， 而channel容量则是通过使用 *overflowCapacity* 来设置。
如果达到 *memoryCapacity* 或 *byteCapacity* 限制，则内存队列被视为已满。
配置范例：
``` properties
a1.channels = c1
a1.channels.c1.type = SPILLABLEMEMORY
a1.channels.c1.memoryCapacity = 10000
a1.channels.c1.overflowCapacity = 1000000
a1.channels.c1.byteCapacity = 800000
a1.channels.c1.checkpointDir = /mnt/flume/checkpoint
a1.channels.c1.dataDirs = /mnt/flume/data
```
禁用内存channel，只使用磁盘存储（就像文件channel那样）的例子：
``` properties
a1.channels = c1
a1.channels.c1.type = SPILLABLEMEMORY
a1.channels.c1.memoryCapacity = 0
a1.channels.c1.overflowCapacity = 1000000
a1.channels.c1.checkpointDir = /mnt/flume/checkpoint
a1.channels.c1.dataDirs = /mnt/flume/data
```
禁用掉磁盘存储，只使用内存channel的例子：
``` properties
a1.channels = c1
a1.channels.c1.type = SPILLABLEMEMORY
a1.channels.c1.memoryCapacity = 100000
a1.channels.c1.overflowCapacity = 0
```
#### Pseudo Transaction Channel
::: warning
::: title
Warning
:::
这个伪事务 channel 仅用于单元测试目的，不适用于生产用途。
:::
必需的参数已用 **粗体** 标明。
  属性         默认值   解释
  ------------ -------- ----------------------------------------------------------------------
  **type**     \--      组件类型，这个是： `org.apache.flume.channel.PseudoTxnMemoryChannel`
  capacity     50       channel中存储的最大Event数
  keep-alive   3        添加或删除Event的超时时间（秒）
#### Custom Channel
可以自己实现Channel接口来自定义一个channel，启动时这个自定义channel类以及依赖必须都放在flume
Agent的classpath中。 必需的参数已用 **粗体** 标明。
  属性       默认值   解释
  ---------- -------- ----------------------------------------------------------------------
  **type**   \--      你自己实现的channel类的全限定类名，比如：org.example.myCustomChannel
配置范例：
``` properties
a1.channels = c1
a1.channels.c1.type = org.example.MyChannel
```
### Flume Channel Selectors
如果没有手动配置，source的默认channel选择器类型是replicating（复制），当然这个选择器只针对source配置了多个channel的时候。
::: hint
::: title
Hint
:::
既然叫做channel选择器，很容易猜得到这是source才有的配置。前面介绍过，一个souce可以向多个channel同时写数据，所以也就产生了以何种方式向多个channel写的问题（比如自带的
[复制选择器](#复制选择器) ， 会把数据完整地发送到每一个channel，而
[多路复用选择器](#多路复用选择器)
就可以通过配置来按照一定的规则进行分发，听起来很像负载均衡），channel选择器也就应运而生。
:::
#### 复制选择器
**它是默认的选择器**。
必需的参数已用 **粗体** 标明。
  属性                默认值        解释
  ------------------- ------------- -----------------------------------------
  selector.type       replicating   `replicating`
  selector.optional   \--           指定哪些channel是可选的，多个用空格分开
配置范例：
``` properties
a1.sources = r1
a1.channels = c1 c2 c3
a1.sources.r1.selector.type = replicating