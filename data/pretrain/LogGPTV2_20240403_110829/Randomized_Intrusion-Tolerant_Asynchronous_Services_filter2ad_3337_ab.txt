of hashes in order to improve the performance. The proto-
col starts with the sender broadcasting a (INIT, m) message.
Upon receiving this message, each process pi builds a vec-
tor Vi with Vi[j] = H(m, sij) for every 0 ≤ j  1, is valid if its value is congruent with any
subset of n − f values accepted at step k − 1. Suppose
that process pi receives n− f messages at step 1, where the
majority has value 1. Then at step 2, it receives a message
with value 0 from process pj. Remember that the message
a process pj broadcasts at step 2 is the majority value of the
messages received by it at step 1. That message cannot be
considered valid by pi since value 0 could never be derived
by a correct process pj that received the same n − f mes-
sages at step 1 as process pi. If process pj is correct, then
pi will eventually receive the necessary messages for step 1,
which will enable it to form a subset of n− f messages that
validate the message with value 0. This validation technique
has the effect of causing the processes that do not follow the
protocol to be ignored.
2.5. Multi-valued Consensus
A multi-valued consensus allows processes to propose a
value v ∈ V with arbitrary length. The decision is either
one of the proposed values or a default value ⊥ /∈ V. The
implemented protocol is based on the multi-valued consen-
sus proposed by Correia et al. [9]. It uses the services of the
underlying reliable broadcast, echo broadcast, and binary
consensus layers. The main differences from the original
protocol are the use of echo broadcast instead of reliable
broadcast at a speciﬁc point, and a simpliﬁcation of the val-
idation of the vectors used to justify the proposed values.
The protocol starts when every process pi announces its
proposal value vi by reliably broadcasting a (INIT, vi) mes-
sage. The processes then wait for the reception of n − f
INIT messages and store the received values in a vector Vi.
If a process receives at least n− 2f messages with the same
value v, it echo-broadcasts a (VECT, v, Vi) message con-
taining this value together with the vector Vi that justiﬁes
the value. Otherwise, it echo-broadcasts the default value ⊥
that does not require justiﬁcation. The next step is to wait
for the reception of n − f valid VECT messages. A VECT
message, received from process pj, and containing vector
Vj, is considered valid if one of two conditions hold: (a)
v =⊥; (b) there are at least n− 2f elements Vi[k] ∈ V such
that Vi[k] = Vj[k] = vj. If a process does not receive two
valid VECT messages with different values, and it received
at least n − 2f valid VECT messages with the same value,
it proposes 1 for an execution of the binary consensus, oth-
erwise it proposes 0. If the binary consensus returns 0, the
process decides on the default value ⊥. If the binary con-
sensus returns 1, the process waits until it receives n − 2f
valid VECT messages (if it has not done so already) with
the same value v and then it decides on that value.
2.6. Vector Consensus
Vector consensus allows processes to agree on a vector
with a subset of the proposed values. The protocol is the
one described in [9] and uses reliable broadcast and multi-
valued consensus as underlying primitives. It ensures that
every correct process decides on a same vector V of size
n; if a process pi is correct, then V [i] is either the valued
proposed by pi or the default value ⊥, and at least f + 1
elements of V were proposed by correct processes.
The protocol starts by reliably-broadcasting a message
containing the proposed value by the process and setting
the round number ri to 0. The protocol then proceeds in
up to f rounds until a decision is reached. Each round is
carried out as follows. A process waits until n − f + ri
messages have been received and constructs a vector Wi of
size n with the received values. The indexes of the vector
for which a message has not been received have the value
⊥. The vector Wi is proposed as input for the multi-valued
consensus. If it decides on a value Vi (cid:5)=⊥, then the process
decides Vi. Otherwise, the round number ri is incremented
and a new round is initiated.
2.7. Atomic Broadcast
An atomic broadcast protocol delivers messages in the
same order to all processes. One can see atomic broadcast
as a reliable broadcast plus the total order property. The
implemented protocol was adapted from [9]. The main dif-
ference is that it has been adapted to use multi-valued con-
sensus instead of vector consensus and to utilize message
identiﬁers for the agreement task instead of cryptographic
hashes. These changes were made for efﬁciency and have
been proved not to compromise the correctness of the proto-
col. The protocol uses reliable broadcast and multi-valued
consensus as primitives.
The atomic broadcast protocol is conceptually divided
in two tasks: (1) the broadcasting of messages, and (2) the
agreement over which messages should be delivered (only
this part appears in Figure 2). When a process pi wishes to
broadcast a message m, it simply uses the reliable broadcast
to send a (AB MSG, i, rbid, m) message where rbid is
a local identiﬁer for the message. Every message in the
system can be uniquely identiﬁed by the tuple (i, rbid).
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
The agreement task (2) is performed in rounds. A pro-
cess pi starts by waiting for AB MSG messages to arrive.
When such a message arrives, pi constructs a vector Vi with
the identiﬁers of the received AB MSG messages and reli-
able broadcasts a (AB VECT, i, r, Vi) message, where r is
the round for which the message is to be processed. It then
waits for n−f AB VECT messages (and the corresponding
Vj vectors) to be delivered and constructs a new vector Wi
with the identiﬁers that appear in f + 1 or more Vj vectors.
The vector Wi is then proposed as input to the multi-valued
is not ⊥,
consensus protocol and if the decided value W (cid:1)
then the messages with their identiﬁers in the vector W (cid:1)
can be deterministically delivered by the process.
3. Implementation
This Section describes some aspects of the RITAS im-
plementation and provides insight into the design consider-
ations and practical issues that arose during development.
The protocol stack was implemented in the C language as a
shared library, which provides a simple interface to applica-
tions wishing to use the protocols. The protocol stack runs
in a single thread, independent of the application thread.
3.1. Interface
The API of RITAS revolves around a data structure
ritas t. This structure holds all the necessary con-
text – variables and data structures – for a communi-
cation session and is completely opaque to the applica-
tion programmer. The functions provided by the API can
be divided into two categories: context management and
service requests. A typical RITAS session is composed
by four basic steps executed by each process: 1) initial-
ize the RITAS context by calling ritas init(); 2)
add the participating processes to the context by calling
ritas proc add ipv4(); 3) call the service request
functions as many times as desired; 4) destroy the RITAS
context by calling ritas destroy(). There are service
request functions for the broadcast, and consensus proto-
cols. Each broadcast protocol has associated two functions:
ritas XX bcast() is utilized to transmit a message, and
ritas XX recv() blocks the program until a message
arrives (where XX can be rb, eb, or ab, for reliable broad-
cast, echo broadcast, or atomic broadcast, respectively).
Each consensus protocol has an associated ritas YY()
function that proposes a value, blocks until a decision is
made, and returns the decision value (where YY can be bc,
mvc, or vc, for binary consensus, multi-valued consensus,
or vector consensus, respectively).
3.2. Internal Data Structures
Internally, three major data structures form the core of
the RITAS operation. The aforementioned RITAS context,
Figure 3. Communication ﬂow among the
protocol layers during an atomic broadcast.
the message buffers, and the protocol handlers. Addition-
ally, several data structures and functions provide ancillary
common operations for general use.
Information is passed along the protocol stack using
message buffers (mbuf for short). This data structure was
inspired by the TCP/IP implementation in the Net/3 Oper-
ating System kernel [26]. mbuf is used to store messages
and several metadata related to their management and one
instance of mbuf can only hold a single message. All com-
munication between the different layers is done by passing
pointers to mbufs.
There is one data structure, the control block, which
holds all the necessary information for an instance of a pro-
tocol. All protocols share a common internal interface. Pro-
tocols provide initialization and destruction functions which
serve, respectively, to allocate a new control block and ini-
tialize all its variables and data structures, and to destroy
the internal data structures and the control block itself. For
inter-protocol communication two functions are provided:
an input function that receives as parameters the respective
control block and the mbuf to be processed, and an output
function which uses similar parameters as the input func-
tion. The communication between the protocols is depicted
in Figure 3.
There is a special protocol handler called RITAS Chan-
nel that sits between the broadcast layers and the Reli-
able Channel layer (the Reliable Channel layer corresponds
to the implementation of TCP and IPSec that is accessed
through the socket interface). Its purpose is to build a header
containing an unique identiﬁer for each message. Messages
are always addressed to a given RITAS Channel. The mes-
sage is then passed along the appropriate protocol instances
by a mechanism called control block chaining, described in
the next section.
3.3. Control Block Chaining
One important mechanism used in RITAS to manage the
linking of different protocol instances is the control block
chaining. This mechanism solves several problems – it
gives a means to unambiguously identifying all messages,
provides for seamless protocol demultiplexing, and facili-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
tates control block management.
Control block chaining works as follows. Suppose an
application creates an atomic broadcast protocol instance.
This task is done by calling the corresponding initialization
function that returns a pointer to a control block responsible
for that instance. Since atomic broadcast uses multi-valued
consensus and reliable broadcast as primitives, the atomic
broadcast initialization function also calls the initialization
functions of such protocols in order to create as many in-
stances of these protocols as needed. The returned control
blocks are kept and managed in the atomic broadcast con-
trol block. This mechanism is recursive since second-order
protocol instances may need to use other protocols as prim-
itives and so on. This creates a tree of control blocks that
has its root in the protocol called by the application and goes
down all the way, having control blocks for RITAS Chan-
nels as the leaf nodes.
A unique identiﬁer is given to each outbound message
when the associated mbuf reaches the RITAS Channel layer.
The tree is traversed bottom-up starting at the RITAS Chan-
nel control block and ending at the root control block. The
message identiﬁer is generated by appending the protocol
instance ID of each traversed node to a local message iden-
tiﬁer that was set by the node that created the mbuf.
Protocol demultiplexing is done seamlessly. When a
message arrives, its identiﬁcation deﬁnes an association
with a particular RITAS Channel control block. The RI-
TAS Channel passes the mbuf to the upper layer by calling