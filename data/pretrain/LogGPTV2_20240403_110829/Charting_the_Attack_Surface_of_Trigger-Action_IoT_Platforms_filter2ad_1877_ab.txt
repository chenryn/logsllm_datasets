the pattern r . For any given state, many rewrite rules can be active,
thus allowing for non-determinism. Rewriting logic has been used
to model and analyze diferent distributed systems [54ś57].
3 THREAT MODEL & ASSUMPTIONS
We consider an adversary that seeks to covertly compromise an IoT
deployment via rule-level attacks that target the logic layer of an IoT
platform. Rule-level attacks seek to subvert the intent of the end
user by exploiting the interactions of the IoT automation rules. Such
interactions may enable the attacker to execute privileged actions,
cause denial of service on devices or access sensitive information
belonging to the user. These attacks are enabled solely through
the invocation of automation rules that were legitimately installed
by the user. There are many scenarios through which an attacker
could create or detect the opportunity for rule-level attacks.
• Exploitation: An adversary discovers an exploitable interaction
between two or more benign apps or invokes a trigger event
through manipulation of a 3rd party service [41].
• Targeted Rules: An adversary tricks a user into installing rules that
enable an attack, e.g., through phishing or social engineering.
• Malicious Apps: An adversary develops and distributes a malicious
app that contains hidden functionality [23, 38, 49, 84].
ci
cb
tb
ab
Recent work has considered powerful adversaries that obtain
root access to devices [3] or compromise communication protocols
[2], which are out of scope in this work. While important, these
strong adversarial models run the risk of downplaying the potential
dangers posed by everyday attackers without advanced technical
knowledge. Prior work has demonstrated that IoT end users often
make errors in writing trigger-action rules [46, 68, 86]. Since they
are often unaware of the implications of rules interactions, it stands
to reason that users’ creation, deletion, or misconiguration of rules
leads to security vulnerabilities in their homes. Our threat model
also accounts for the safety risks of benign misconigurations, which
pose a real-world threat. We thus argue that rule-level attacks are an
important consideration for IoT security, and note also that similar
threat models have appeared in related work [23, 30, 49, 70, 87].
4 INTER-RULE VULNERABILITIES
In this section, we consider and deine the interference conditions
for trigger-action rules, which we call inter-rule vulnerabilities. For
generality, we deine each inter-rule vulnerability as a property
of an abstracted information low graph for an IoT deployment;
we concretize these deinitions in later sections once the state for
various devices and automation rules are known.
Consider the graph G = that encodes the active automa-
tion logic for an IoT deployment. Vertices V can be of type T , C, or
A, respectively representing triggers, conditions, and actions. All
edges carry state from one vertex to another, but this state is device
and coniguration-speciic; for now, we only deine an abstract state
for condition vertices as a boolean lag, i.e., STATE(c ) ∈ {0, 1}. Edges
that low into conditions may update this state, i.e., ON(c ) or OFF(c ).
Null conditions can also exist in the graph where STATE(c ) = 1
always. An individual rule Rj is given by {tj , cj , aj }; rule vertices
are otherwise elided. Using the above system, events in the IoT
deployment can be represented as path traversals in graph G. An
event trigger t being ired is represented by ACTIVATE(t ), which
causes branching traversal of the outbound directed edges of vertex
t. Traversal automatically proceeds from all trigger and action ver-
tices, leading to additional ACTIVATE(t ) and ACTIVATE(a) events.
Traversal only proceeds from condition vertices if STATE(c ) = 1.
Traversal concludes when all paths have reached either a childless
action vertex or a condition vertex where STATE(c ) = 0. A path
p ∈ P describes the series of valid transitions that occurred in the
graph traversal, with the set P deining all valid paths.
We now enumerate the space of inter-rule vulnerabilities in
terms of properties of IoT information low graphs. We will do so
with respect to a benign rule Rb = {tb , cb , ab } and (when necessary)
an interference rule Ri = {ti , ci , ai }.
Condition Bypass. Security-sensitive actions (e.g., open the win-
dow) are often guarded by some security conditions (e.g., I am at
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1441A1
T2
A3
T1
A2
Rule2
Rule3
T1
ti 
tb
R1
A2
A1
R2
ti
tb
A2
T2
ci
ai
ON
cb
ab
ci
ai
ci
ai
ON
cb
ab
· · ·
tb
OFF
ab
cb
(a) Not enough rules
(b) Active blocking
Figure 4: Condition blocking scenarios. In 4a, removing ai will
make cb unsatisiable. In 4b, ai ’s activation makes cb unsatisiable.
tb
ab'
cb
ab
ci
ti
(a) Action reverting
· · ·
tb
ci
cb
ab' 
ab 
(b) Action conlict
Figure 5: (a) Action reverting: a′
(b) Action conlict: tb activates ab and a′
b has the opposite efect as action ab .
b in an unknown order.
home). However, when a trigger is ired, all associated rules are
activated; if there are multiple paths to the security-sensitive ac-
tion, the burden is on the user to apply the condition for all active
rules. The security guarantee of an action thus follows the weakest
precondition, creating the potential for condition bypass:
∃ p ∈ P s .t . {tb , ab } ∈ p ∧ {cb } , where oid is the id of the device.
To model the interaction of rules, it is
Device State Transitions.
important to model the state transitions of devices (or services) as
the action of a rule could cause a state transition which invokes the
trigger of another rule. For a device command that can change the
device’s attributes, we model the command execution as a transition
from one device state to another. The value change of a device
attribute is modeled as a device event. For example, the turn_off
command of the heater is modeled as a transition from state  to state  with a switch change event
Event(oid , switch : of) where oid is the id of the device.
Implicit chaining is achieved through
Environment Modeling.
environmental variables such as temperature. We model each en-
vironmental variable as an environment object, for example, . As a device usually only observes
or afects environmental variables in the same place the device is
deployed, we consider the same type of environmental variable in
diferent zones (locations) as diferent variables. For example, the
temperature of the bedroom and the temperature of the living room
are treated as two diferent variables. Further, when the value of
an environmental variable is updated, the corresponding attribute
of a device that observe the variable will also be updated. For ex-
ample, when the value of env.temperature_bedroom is changed, the