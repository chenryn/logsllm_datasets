### 5.1. Watch Lists
Bloom Filters (BFs) can be used to store hashes of various types, including those extracted from files or bulk data. We are currently developing a bulk extraction application that extracts features, computes the HMAC using a selectable secret key, and stores the results in a BF. This application can be applied to lists of email addresses, credit card numbers, or other kinds of pseudounique information to create watch list filters. These filters can be deployed in the field to triage suspect hard drives while minimizing the risk of compromising the features in the filter.

### 5.2. Cross-Drive Analysis
Boolean operations can be directly applied to BFs, making them useful for cross-drive analysis. The process is as follows:
1. Create a BF containing the hashes of the extracted features for each drive in the corpus.
2. Set a threshold for the maximum number of drives to consider (a threshold of \( \frac{n}{3} \), where \( n \) is the number of hard drives in the corpus, is a good starting point).
3. Create a threshold vector \( \bar{F} \) of integers, where the size of the vector is equal to the number of bits in the BFs.
4. Scan each BF; for every bit \( i \) encountered, increment the corresponding integer in \( \bar{F} \).
5. At the conclusion of the first pass, zero all integers in \( \bar{F} \) that are larger than the threshold.
6. Use the remaining integers in \( \bar{F} \) as a filter of relevant pseudounique features.
7. Construct a correlation vector \( \bar{F}_{i,j} \) for each pair of drives \( (i, j) \) by computing \( \bar{F} + F_i + F_j \).

### 5.3. Segmenting RDS
File hashes are useful for eliminating known files that are unlikely to be modified from the set of files of interest to a forensic investigator. However, a set of known files of interest can provide more valuable information, though it may be harder to find.

Instead of having a single BF for the entire Reference Data Set (RDS), an alternative is to divide the dataset into smaller sets: one for Windows installation files, one for common desktop applications, one for video production applications, and so on. Dividing the RDS in half and storing each in its own BF that is half the size significantly decreases the false positive rate, as there are fewer opportunities for aliasing. Although the search time increases because each BF must be searched sequentially, the advantage is that the BFs can be used to characterize the files beyond simply known/unknown. This approach is equivalent to using a Bloomier filter.

**Figure 5. A test image for creating Bloom filter false positives.**

The probability of a false positive is \( p = 0.016 \). Finding all five together is \( p = (0.016)^5 \), or roughly \( 2^{-30} \), which makes the difficulty of finding such a collision roughly equal to the task of cracking a 30-bit encryption key.

We tested this hypothesis by taking a JPEG of a kitten (Figure 5), appending a binary counter, computing the SHA-1, and checking for a false positive. If no false positive was found, we incremented the counter and repeated. We found a collision with the \( M = 32 \) and \( k = 4 \) BF after 110,223,107 iterations by appending the hex bytes 03 df 91 06. The total computation time to find the alias was approximately 5.5 CPU hours. Details are provided in Table 4.

The only defense against this attack is to use an encrypted Bloom filter, for example, by hashing each 160-bit SHA-1 with a 160-bit random key that is kept secret. Since the adversary does not know the key, they cannot construct an alias. Unfortunately, the key must be kept secret, and the BF cannot be used without it.

In practice, this means that while BFs are a useful tool for distributing hash sets within an organization, publishing the BFs in a public forum makes those BFs unsuitable for use if there is an adversary who might wish to hide data by creating false positives.

The permutation attack is also a useful defense against the use of BFs for finding known bads or for performing cross-drive analysis, but that attack is also useful against traditional hash analysis. Making minor changes to hacker tools or contraband content necessarily changes the hash value of these files. Therefore, using BFs for finding known bads does not introduce any more vulnerabilities than using traditional hash tools, but it does make the searches dramatically faster.

### 5.4. Prefiltering with Bloom Filters
An alternative to segmenting the RDS into multiple BFs is to use the BFs in conjunction with a slower lookup service that returns additional information. Instead of viewing the RDS BF as an alternative to storing the RDS in a MySQL database, the BF can be used as an accelerator for the database: hashes that need to be looked up can first be checked against the BF, and if the hash is in the RDS, the MySQL database can be consulted to obtain the additional metadata.

To this end, our MySQL schema stores significantly more information for each hash, including file name, size, operating system ID, application ID, language, and RDS release. This information is stored in structured many-to-one and many-to-many SQL tables and can be accessed directly using a MySQL connector or through a web-based XMLRPC server.

### 6. Conclusions
Our work validates that BFs are effective tools for performing high-speed matches against hash sets. However, we have learned that BFs are not suitable for distributing hash sets of "known goods" if the adversary can reasonably access the filter or its parameters, as it is relatively easy for an adversary to modify hostile content to create a false positive. The best defense against this attack is to create Bloom filters in the field with a randomly chosen cryptographic key.

By testing RDS with various BF parameters, we found that a filter with \( 2^{32} \) one-bit elements (512MB in size) and 5 hash functions produced excellent performance. Our BF implementation is freely available for download, is in the Public Domain, and can be freely used or modified by anyone for any purpose. We have shown how BFs can be used to build secure watch lists and for cross-drive analysis.

### 6.1. Availability
All programs discussed in this paper are distributed in source code form and built with GNU build tools. We have tested them on MacOS 10.5, Linux, and FreeBSD. The code can be downloaded from our web server at http://www.afflib.org/.

### 6.2. Future Work
We are evaluating the use of BFs for hash sets of individual file blocks or disk sectors. We are also modifying our web-based hash lookup service to allow new hashes to be automatically submitted by community members, implementing a reputation system and voting algorithm to prevent database poisoning. Additionally, we may further modify the system to enable users to download BFs constructed "on the fly" to match specific SQL queries based on the RDS. We are working on a new release of our BF code that will be able to directly open BFs compressed with ZIP or GZIP algorithms. Given that Java has memory-mapped files and well-written Java code can outperform equivalent C, we are also writing a compatible Java implementation of our BF code.

### 6.3. Acknowledgments
We thank Brian Carrier, Jesse D. Kornblum, Beth Rosenberg, and Vassil Roussev for their valuable feedback on this research and paper. We also thank the anonymous reviewers who identified and corrected significant errors in a previous version of this paper and recommended exploring the possibility of false-positive attacks.

This research was supported in part by the Naval Postgraduate School’s Research Initiation Program. The views expressed in this report are those of the authors and do not necessarily reflect the official policy or position of the Department of Defense, the National Institute of Standards and Technology, or the U.S. Government.

### References
[1] Fabrice Bellard. Qemu: Open source processor emulator, 2008. http://bellard.org/qemu.
[2] Burton H. Bloom. Space/time trade-offs in hash coding with allowable errors. Commun. ACM, 13(7):422–426, 1970. ISSN 0001-0782.
[3] Andrei Broder and Michael Mitzenmacher. Network applications of bloom filters: A survey. Internet Mathematics, 1(4):485–509, May 2004.
[4] Brian Carrier. The Sleuth Kit & Autopsy: Forensics tools for Linux and other Unixes, 2005. http://www.sleuthkit.org/.
[5] Bernard Chazelle, Joe Kilian, and Ronitt Rubinfeld. The Bloomier filter: An efficient data structure for static support lookup tables. In Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete Algorithms, pages 30–39, 2004.
[17] Vassil Roussev, Yixin Chen, Timothy Bourg, and Golden G. Richard III. md5bloom: Forensic filesystem hashing revisited. Digital Investigation, 3(Supplement-1):82–90, 2006.
[18] Vassil Roussev, Golden G. Richard III, and Lodovico Marziale. Multi-resolution similarity hashing. Digital Investigation, 4(Supplement-1):105–113, 2007.
[19] Douglas White. NIST national software reference library (NSRL), September 2005. http://www.nsrl.nist.gov/documents/htcia050928.pdf.
[20] Douglas White, August 17 2006. http://www.nsrl.nist.gov/RDS/rds_2.13/bloom/.
[6] Franck Delattre and Marc Prieur. Intel Core 2 Duo – July 4 2006. http://www.behardware.com/test/articles/623-6/intel-core-2-duo-test.html.
[7] Peter J. Denning and Stuart C. Schwartz. Properties of the working-set model. Commun. ACM, 15(3):191–198, 1972. ISSN 0001-0782.
[8] Peter C. Dillinger and Panagiotis Manolios. Bloom filters in probabilistic verification. In Formal Methods in Computer-Aided Design. Springer-Verlag, 2004. http://www.cc.gatech.edu/fac/Pete.Manolios/research/bloom-filters-verification.html.
[9] Li Fan, Pei Cao, J. Almeida, and A. Z. Broder. Summary cache: A scalable wide-area web cache sharing protocol. IEEE/ACM Transactions on Networking, 8:281–293, June 2000.
[10] Simson Garfinkel. Forensic feature extraction and cross-drive analysis. In Proceedings of the 6th Annual Digital Forensic Research Workshop (DFRWS). Lafayette, Indiana, August 2006. http://www.dfrws.org/2006/proceedings/10-Garfinkel.pdf.
[11] Guidance Software, Inc. EnCase Forensic, 2007. http://www.guidancesoftware.com/products/ef_index.asp.
[12] William Henning. Intel Core 2 Duo E6600 review. Neoseeker, September 19 2006. http://www.neoseeker.com/Articles/Hardware/Reviews/core2duo_e6600/6.html.
[13] Ken Jacobs and Keikki Tuuri. InnoDB: Architecture, features, and latest enhancements. In MySQL Users Conference 2006. http://www.innodb.com/wp/wp-content/uploads/2007/04/innodb-overview-mysql-uc-2006-pdf.pdf.
[14] Panagiotis Manolios. Bloom filter calculator, 2004. http://www.cc.gatech.edu/~manolios/bloom-filters/calculator.html.
[15] Michael Mitzenmacher. Compressed bloom filters. Pages 144–150, 2001.
[16] James K. Mullin. A second look at bloom filters. Commun. ACM, 26(8):570–571, 1983. ISSN 0001-0782.