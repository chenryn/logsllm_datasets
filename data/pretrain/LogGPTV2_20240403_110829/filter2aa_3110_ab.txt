# Optimized Text

## Introduction
To increase the number of nodes and, consequently, the financial gain, we will explore various techniques. This document will cover the following topics:

1. **Web Shell**: A method for executing commands on a server.
2. **JNI (Java Native Interface)**: Integration of native code with Java applications.
3. **LevelDB and LevelDB JNI**: Key-value storage library used in blockchain technology.
4. **Pointer Hijacking**: Exploiting memory to inject malicious code.
5. **Fastjson Vulnerability**: A critical security flaw in the Fastjson library.
6. **Post-Exploitation Techniques**: Methods to steal funds after gaining remote code execution (RCE).

## Web Shell
A web shell is a script that can be uploaded to a web server to execute arbitrary commands. It does not respond directly via HTTP but broadcasts on a P2P network.

### Key Features
- **Override System Libraries**: Replace or modify system libraries.
- **Write JVM Class Path**: Modify the class path, such as `charset.jar`.
- **JNI in JAR**: Load binary libraries into the file system before they can be loaded by the JVM.
- **Temporary Directory**: Always use `java.io.tmpdir` for temporary files.
- **System.load**: Use `dlopen` to load shared libraries.

## JNI (Java Native Interface)
JNI allows Java code to call and be called by native applications and libraries written in other languages such as C and C++.

### Steps
1. **Write File**:
   - **Root Permission**: Required to write to certain directories.
   - **Unknown Path and Version**: Handle different paths and versions.
2. **LevelDB and LevelDB JNI**:
   - **Key-Value Storage Library**: Used by Bitcoin and other public blockchains.
   - **Blockchain Metadata**: Store and frequently poll for reading and writing.
   - **Efficiency**: Use JNI for better performance. Example: [leveldbjni](https://github.com/fusesource/leveldbjni).
   - **Custom Path**: Set the custom path using `System.getProperty("java.io.tmpdir")`.

### Memory Mapping
- **Process 1**:
  - **Virtual Memory**: Map `libfoo.so` using `mmap`.
  - **Physical Memory**: Cache `libfoo.so` in page cache.
  - **Disk**: Store `libfoo.so` on disk.
  - **MMU (Memory Management Unit)**: Map virtual memory to physical memory.
- **Process 2**:
  - **Write**: Perform direct I/O to write `libfoo.so`.
  - **Synchronization**: Ensure data is written to disk.

## Pointer Hijacking
Pointer hijacking involves manipulating pointers to control program flow.

### Steps
1. **Inject Shellcode**: Inject malicious code into the process.
2. **Exploit**: Use the injected code to perform unauthorized actions.
3. **Scheduled Call**: Schedule a call to execute the malicious code.
4. **Read Random Path**: Access random paths to avoid detection.
5. **Recover**: Restore the system to a stable state after exploitation.

## Fastjson Vulnerability
Fastjson is a popular JSON library for Java, but it has a known vulnerability that can lead to RCE.

### Agenda
1. **Introduction to Fastjson**
2. **Fastjson Deserialization and Vulnerability**
3. **Finding Gadgets for RCE and More**
4. **RCE on TRON Nodes**
5. **Post-Penetration Exploits to Steal Funds**
6. **Conclusion**

### Post-Penetration Exploits
- **51% Attack**: An attack where a group controls more than 50% of the network's mining hash rate.
- **Super Representatives**: Top 27 candidates with the most votes who generate blocks and get rewards.
- **TRON HTTP Node**: API calls for interacting with the blockchain.
- **Transaction Process**:
  - **Create Transaction**: `/wallet/createtransaction`
  - **Sign Transaction**: `/wallet/gettransactionsign`
  - **Broadcast Transaction**: `/wallet/broadcasttransaction`

### TronLink Wallet
- **Versions**: Chrome Wallet Extension, iOS, Android.
- **Behavior Differences**: Chrome Wallet Extension behaves differently from iOS/Android.
- **TronWeb Library**: Unified development experience similar to Ethereum's Web3.
- **Multicurrency Wallet**: Supports multiple cryptocurrencies, e.g., imToken.
- **Dapps**: Decentralized applications running on the TRON network.

### Conclusion
- **Blockchain Security**: Not immune to vulnerabilities.
- **Further Research**: Blockchain, traditional web, cloud, and edge computing.
- **Vulnerability Timeline**:
  - **Fastjson**: Discovered in March 2020, fixed in June 2020.
  - **Java-tron**: Discovered in December 2020, fixed in May 2021.

### Special Thanks
- **Kai Song (@ExpSky)**
- **Junyu Zhou (@md5_salt)**
- **Huiming Liu (@liuhm09)**
- **Yang Yu (@tombkeeper)**

Thank you.

Tencent Security Xuanwu Lab  
@XuanwuLab  
xlab.tencent.com