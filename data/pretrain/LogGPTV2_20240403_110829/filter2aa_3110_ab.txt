Take more nodes,Take more money
Web
Shell
No direct resp by HTTP
But broadcast on P2P network
• Override system libs
• Write JVM class path, such as charset.jar
• JNI in jar :
• The binary library files need to be released to the file system before it can be loaded
• Always in java.io.tmpdir
•System.load(libfoo) à dlopen(libfoo.so)
Write File
•
Root permission
•
Unknown path and version
Write File
• Leveldb and leveldbjni:
• A fast key-value storage library
• Used by Bitcoin, therefore, is inherited by many public chain
• Storage blockchain metadata, frequently polling for reading and writing
• Need efficiency, so JNI https://github.com/fusesource/leveldbjni
• org.fusesource.hawtjni.runtime.Library#exractAndLoad
customPath = System.getProperty("java.io.tmpdir");
File target = extract(errors, resource, prefix, suffix, file(customPath));
Override shared lib at Runtime
Process1 dlopen(libfoo.so)
Process1
Virtual memory
libfoo.so
mmap
Physical 
Memory
Page cache
libfoo.so
Disk
libfoo.so
MMU
mapping
Override shared lib at Runtime
Process1
Virtual memory
libfoo.so
Process1 dlopen(libfoo.so)
mmap
Physical 
Memory
Page cache
libfoo.so
Disk
libfoo.so
MMU
mapping
Meanwhile, Process2 open & write libfoo.so (or by direct IO)
Process2
Write 
Maj Fault 
Direct IO
Write 
sync
• Get the random file name released by JNI jar
• No direct resp by HTTP but broadcast on P2P network
• Write binary bytes instead of string with encoding
• Input json string
• Output stream and file writer
Read & Write JNI .so
Read & Write – commons-io 2.x
java.lang.AutoCloseable
org.apache.commons.io.input.BOMInputStream(InputStream delegate, boolean include, ByteOrderMark... boms )
BOMInputStream#getBOM()
Field delegate.read()
org.apache.commons.io.input.TeeInputStream#read()
@Override
public int read() throws IOException {
int ch = input.read();
if (ch != -1) {
branch.write(ch);
}
return ch;
}
WRITE
boolean matches(ByteOrderMark bom)
Boms cmp with input.read()
Return bom
Return null
SAME 
ONE?
READ
Y
N
Blind Read
Write – commons-io 2.x
java.lang.AutoCloseable
org.apache.commons.io.input.BOMInputStream(InputStream delegate, boolean include, ByteOrderMark... boms )
BOMInputStream#getBOM()
Field delegate.read()
org.apache.commons.io.input.TeeInputStream(InputStream input, OutputStream branch, boolean closeBranch)
@Override
public int read() throws IOException {
int ch = input.read();
if (ch != -1) {
branch.write(ch);
}
return ch;
}
WRITE
Write String
• Field delegate  à org.apache.commons.io.input.TeeInputStream
• Field input  à org.apache.commons.io.input.CharSequenceInputStream
• Field cs  à input string          > default bufsize 8192, auto flush
• Field branch  à org.apache.commons.io.output.WriterOutputStream
• Field writer  à org.apache.commons.io.output.FileWriterWithEncoding
• Field file à output file path
Write Binary
• Field delegate  à org.apache.commons.io.input.TeeInputStream
• Field input  à org.apache.commons.codec.binary.Base64InputStream
• Field in  à input base64 str: commons.io.input.CharSequenceInputStream
• Field branch  à org.eclipse.core.internal.localstore.SafeFileOutputStream
• Field targetPath  à output file path
• commons-codec
• AspectJ
• AOP for database backup
Read – commons-io 2.x
java.lang.AutoCloseable
org.apache.commons.io.input.BOMInputStream(InputStream delegate, boolean include, ByteOrderMark... boms)
BOMInputStream#getBOM()
READ
Return bom
Return null
SAME 
ONE?
Y
N
Blind Read
boolean matches(ByteOrderMark bom)
Compare Array Field boms with Field delegate.read()
Read Directory
{
"abc":{"@type": "java.lang.AutoCloseable",
"@type": "org.apache.commons.io.input.BOMInputStream",
"delegate": {"@type": "org.apache.commons.io.input.ReaderInputStream",
"reader": { "@type": "jdk.nashorn.api.scripting.URLReader",
"url": "file://tmp/"
}
},
"boms": [
{bom1 bytes}, {bom2 bytes}, ...
]
},
"address” : {"$ref":"$.abc.BOM"}
}
Parameter url supports 
file:// scheme for a folder 
and listing directory
Convert Reader    
to InputStream
Multiple bytes blocks to be compared with
Reader output.
Use Binary Search
abc.getBOM()
API   /wallet/validateaddress
is null
bad format
No resp
Validate failed 
message
Pointer Hijacking
org.tron.common.overlay.discover.node.NodeManager#channelActivated()
nodeManagerTasksTimer.scheduleAtFixedRate(new TimerTask() {
@Override
public void run() {
dbWrite();
}
}, DB_COMMIT_RATE, DB_COMMIT_RATE);
libleveldbjni.so # offset 0x197b0
Java_org_fusesource_leveldbjni_internal_NativeBuffer_00024NativeBufferJNI_malloc
public static final native long 
org.fusesource.leveldbjni.internal.NativeBuffer
$NativeBufferJNI#malloc(long size)
Inject shellcode
Exploit
Inject shellcode
Extract
Scheduled call
Read random path
Pointer hijacking
Recover
Post-penetration
Part II
Zekai Wu
1. What is Fastjson
2. Fastjson Deserialize and Vulnerability
3. Find Gadgets to RCE and more
4. RCE on the Tron nodes
5. Post Penetration Exploit to Steal your Money
6. Conclusion
> Agenda
How to Steal Your Money After RCE
l A 51% attack is an attack on a blockchain by a group of miners who control 
more than 50% of the network's mining hash rate.
l Attackers with majority control of the network can interrupt the recording of new 
blocks by preventing other miners from completing blocks.
51% Attack
l TRON uses the super-representative mechanism.
l The top 27 candidates with the most votes are the super representatives.
l Super representatives generate blocks, package transactions and get block 
rewards.
Super Representatives
Tron Nodes
l As shown by tronscan.org , Tron has 1332 nodes in total.
l Only a quarter of the nodes can be accessed through the HTTP service.
l There is no guarantee that more than half of the super representatives have 
enabled HTTP services.
Limits
l The TRON HTTP node has a variety of API calls to allow users to interact with 
the blockchain.
l Some of the API calls serve as stand-alone requests to get individual pieces of 
information. 
l There are also many API calls which modify the user TRX wallet, resulting in a 
need to sign and broadcast the transaction.
Back to Tron HTTP Node
l Make a Transaction
/wallet/createtransaction
return raw transaction in json format.
l Sign the Transaction
/wallet/gettransactionsign
use the private key to sign the raw transaction
l Broadcast the Transaction
/wallet/broadcasttransaction
broadcast signed transaction to blockchain
Transaction Process
Forge `raw transaction`
Steal `private key`
DOS
l TronLink is firstly launched at TRON’s official website and backed by TRON 
foundation.
l TronLink is the TRON wallet with the most users.
l TronLink has three versions (Chrome Wallet Extension/iOS/Android).
TronLink Wallet
l iOS/Android
Make a Transaction
Sign the Transaction
Broadcast Transaction
l Chrome Wallet Extension
Make a Transaction
Sign the Transaction
Broadcast Transaction
TronLink Wallet
Attack Chrome Wallet Extension
Send Bob 100 trx
Send Evil 100 trx
Sign the fake
transaction
Broadcast signed 
transaction
Why Chrome Wallet Extension has different 
behavior from iOS/Android
l TronWeb aims to deliver a unified, seamless development experience 
influenced by Ethereum's Web3 implementation.
l TronWeb
Make a Transaction
tronWeb.transactionBuilder.sendTrx
Sign the Transaction
tronWeb.trx.sign
Broadcast Transaction
tronWeb.trx.sendRawTransaction
TronWeb Library
TronWeb Library
tronWeb.transactionBuilder.sendTrx
sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, 
options, callback = false) {
// accept amounts passed as strings
amount = parseInt(amount)
const data = {
to_address: toHex(to),
owner_address: toHex(from),
amount: amount,
};
this.tronWeb.fullNode.request(‘wallet/createtransaction’, data, 
'post').then(transaction => resultManager(transaction, 
callback)).catch(err => callback(err));
}
l TronLink Chrome Wallet Extension
l Multicurrency wallet
l Dapps
TronWeb Library
l Multicurrency wallet is a wallet that supports multiple cryptocurrency 
transactions.
l imToken is a multi-currency wallet that supports Tron.
l imToken has 12 million users.
l imToken uses the TronWeb library.
Multicurrency Wallet
Multicurrency Wallet
l A decentralized application (Dapp) is a computer application that runs on a 
distributed computing system like blockchain.
l 1,400 Dapps have been created on the TRON network, with a daily transaction 
volume of over $12 million(2020/12/17).
l For a developer, Dapp is a combination of front-end and smart contracts.  
l Tron provides TronWeb for front-end developer.
Dapp
Dapp
l TronLink Chrome Wallet Extension
l 300,000 users.
l Multicurrency wallet
l imToken has 12 million users.
l Dapps
l 1,400 Dapps have been created on the TRON network, with a daily transaction volume 
of over $12 million(2020/12/17).
Influence
1. What is Fastjson
2. Fastjson Deserialize and Vulnerability
3. Find Gadgets to RCE and more
4. RCE on the Tron nodes
5. Post Penetration Exploit to Steal your Money
6. Conclusion
> Agenda
l Blockchain is not the bulletproof to security vulnerability
l Further research for blockchain security
l Traditional web vulnerabilities
l Cloud and Edge computing
l Post Penetration Exploit
Conclusion
l Fastjson vulnerability timeline
l 2020-03
Vulnerability was discovered.
l 2020-05-15 Vulnerability reported to vendor.
l 2020-06-01 Vulnerability was fixed and fastjson version 1.2.69 was updated.
l Java-tron vulnerability timeline
l 2020-12        Vulnerability was discovered.
l 2021-01-22   Vulnerability reported to vendor.
l 2021-05-21
Vulnerability was fixed and java-tron version 4.2.1 was updated.
TimeLine
l Kai Song （@ExpSky）
l Junyu Zhou （@md5_salt）
l Huiming Liu (@liuhm09)
l Yang Yu （@tombkeeper）
Special Thanks
Thanks. 
Tencent Security Xuanwu Lab 
@XuanwuLab
xlab.tencent.com