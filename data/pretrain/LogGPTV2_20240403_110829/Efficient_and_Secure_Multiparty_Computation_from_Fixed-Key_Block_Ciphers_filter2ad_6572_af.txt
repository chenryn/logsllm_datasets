.
zj ⊕ π(R ⊕ wj) ⊕ bjR = π(R ⊕ w(cid:2)).
The above can only possibly occur if j (cid:10)= (cid:5) since, if not, then
zj ⊕ bjR = 0k in contradiction to (B-2). But if j (cid:10)= (cid:5) then
π(R ⊕ w(cid:2)) is uniform in a set of size at least 2k − p − 1 even
conditioned on the value of π(R ⊕ wj) and thus
Pr[tj = v(cid:2)] ≤
1
2k − p − 1
≤ 2
2k
(using p < 2k/2). Taking a union bound over all v(cid:2) ∈ V
we see that the probability that tj ∈ V is at most 2q/2k.
Finally, taking a union bound over all j (and considering both
sub-cases above) shows that the probability of (C-2) is at
most 2q(p + q)/2k.
To analyze (C-3), ﬁx distinct j, (cid:5). Then sj = s(cid:2) iff π(R ⊕
wj) ⊕ ij = π(R ⊕ w(cid:2)) ⊕ i(cid:2). If wj = w(cid:2) then ij (cid:10)= i(cid:2) and so
sj = s(cid:2) is impossible. Otherwise, π(R ⊕ wj) is uniform in
≥ 2k−p−1 values even conditioned on the value of π(R⊕w(cid:2)),
and thus
Pr[sj = s(cid:2)] ≤
1
2k − p − 1
≤ 2
2k
.
The event tj = t(cid:2) occurs iff
zj ⊕ π(R ⊕ wj) ⊕ bjR = z(cid:2) ⊕ π(R ⊕ w(cid:2)) ⊕ b(cid:2)R.
The above can only possibly occur if j (cid:10)= (cid:5) since, if not, then
bjR⊕ zj = b(cid:2)R⊕ z(cid:2) in contradiction to (B-3). But if wj (cid:10)= w(cid:2)
then π(R ⊕ wj) is uniform in a set of at least 2k − p − 1
values, even conditioned on π(R⊕ w(cid:2)), and so Pr[sj = s(cid:2)] ≤
2
2k . Taking a union bound over all distinct j, (cid:5) shows that the
probability of (C-3) is at most 2q2/2k. In summary, we have
Pr[Bad(π) | π (cid:13) Qπ] ≤ 4q(p + q) + 2q2
2k
.
(2)
The probability that the ideal world is consistent with the
good transcript Q is exactly (1). The probability that the real
world is consistent with the transcript is
Pr[∀(w, i, b, z) ∈ QO : Otccr
(2k)p
R (w, i, b) = z | π (cid:13) Qπ]
· PrR[R].
R (w(cid:2), i(cid:2), b(cid:2)) = z(cid:2) for all
Write π (cid:13)j Q if π (cid:13) Qπ and Otccr
(cid:5) ≤ j. The numerator above is at least
Pr[π (cid:13)q Q ∧ ¬Bad(π) | π (cid:13) Qπ]
≥ (cid:12)
(cid:13)
1 − Pr[Bad(π) | π (cid:13) Qπ]
· q(cid:9)
Pr[π (cid:13)j Q | ¬Bad(π) ∧ π (cid:13)j−1 Q].
(3)
Consider any π such that π (cid:13) Qπ and ¬Bad(π). Note that
Otccr
R (wj, ij, bj) = zj iff π(sj) = tj (for sj, tj as deﬁned
j=1
before). If ¬Bad(π), there is no query of the form (sj, (cid:6))
or of the form ((cid:6), tj) in Qπ. Moreover, since neither (C-1)
nor (C-2) occur, neither π(sj) nor π−1(ti) is determined by
the input/output relations {π(uj) = vj}j=1,...,q. Furthermore,
since (C-3) does not occur, neither π(sj) nor π−1(tj) is
determined by the fact that π (cid:13)j−i Q or, equivalently, the
fact that π(s(cid:2)) = t(cid:2) for all (cid:5) < j. Thus, for all j we have
Pr[π (cid:13)j Q | ¬Bad(π) ∧ π (cid:13)j−1 Q] ≥ 1/2k,
and therefore
Pr[π (cid:13)q Q | ¬Bad(π) ∧ π (cid:13) Qπ] ≥ 1/2kq.
It follows from (3) that the ratio of the probability that the
real world is consistent with Q to the probability that the ideal
world is consistent with Q is at least
1 − Pr[Bad(π) | π (cid:13) Qπ].
Using (2) completes the proof.
VIII. EVALUATION
In this section we evaluate the performance of our hash-
function constructions from Section VII both on their own as
well as when they are used in various protocols. The primary
goal of our work is security, not efﬁciency. Nevertheless,
we show that our work results in noticeable performance
improvements over the state-of-the-art.
All timing results were obtained using an Intel(R) Xeon(R)
Platinum 8124M CPU running at 3.00GHz. This CPU uses a
Skylake architecture with hardware support for AES, where
AES-NI has a latency of 4 cycles with a throughput of
1 cycle per instruction. All tests use only a single core. The
implementations evaluated here are all publicly available [49].
A. Implementing the Hash Functions
Our constructions of correlation robust and tweakable (cir-
cular) correlation robust hash functions from Section VII only
involve XORs and calls to AES. Our construction of a circular
correlation robust hash function from Section VII-C, however,
also requires a linear orthomorphism σ. We implement σ
as described in that section using the mm shuffle epi32
instruction that is available since SSE2. This instruction allows
for arbitrary permutations of the four 32-bit
integers that
comprise a 128-bit value. We can thus implement σ via
σ(a) = mm shuffle epi32(a, 78) ⊕ and si128(a, mask),
where mask = 164(cid:3)064 is a constant. In the CPU we used
mm shuffle epi32 instruction
for our experiments,
executes in 1 cycle, while the other two instructions need
0.33 cycles each, so our implementation of σ requires just
1.66 cycles. This is in contrast to prior instantiations of a
linear orthomorphism based on ﬁnite-ﬁeld doubling [5], which
require 3.66 cycles on the same CPU.
the
In Table III we compare the performance of our hash
functions with other symmetric-key primitives. These are:
• “SHA-256” (resp., “SHA-3”) refers to computing SHA-
256 (resp., SHA-3) on a 256-bit input. The implementa-
tions from openssl are used. (In Appendix D we discuss
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:34 UTC from IEEE Xplore.  Restrictions apply. 
836
Batch size
SHA-3
SHA-256
AES + key-sched.
XORP
doubling
Fixed-key AES
MMOπ
π
(cid:2)MMO
σ
TMMOπ
1
1375
588
81
48
51
41
43
46
81
2
1381
584
55
27
28
21
26
26
45
4
1374
594
37
22
16
11
13
14
25
8
1432
588
37
22
13.5
10
12
13
21
TABLE III: Performance of symmetric-key primitives. Amortized cost per
call, measured in CPU cycles, on an Intel Xeon processor.
why the concrete security of this approach is comparable
to the concrete security of our constructions.)
to computation of
• “AES + key-sched.” refers to performing key scheduling
for AES-128 (using optimizations of Gueron et al. [25])
followed by a single AES evaluation.
• “doubling” refers
the function
H(x, i) = π(2x ⊕ i) ⊕ 2x ⊕ i, where π is AES-128 with
a ﬁxed key.
• “XORP” refers to computation of H(x) = π1(x)⊕π2(x),
where π1, π2 are both AES-128 with ﬁxed keys.
• “Fixed-key AES” is simply AES-128 with a ﬁxed key.
The ﬁnal three rows of the table refer to the hash functions we
construct in Section VII, implemented as discussed. In each
case, π is instantiated using AES-128 with a ﬁxed key.
We evaluated the performance of the above primitives on
different batch sizes (i.e., evaluating the primitive multiple
times in parallel) to explore the beneﬁt of instruction-level
pipelining. We tested batch sizes as high as 32, but found little
improvement above a batch size of 8. All numbers reported
in the table are an average over 225 experiments.
π
We also evaluated the performance of SHA-256 when
using the SHA-NI instruction. (Note that SHA-NI is currently
available only in AMD platforms and low-end Intel processors
like Pentium and Celeron.) Our results (see Appendix E) show
that SHA-NI is 30× slower than AES-NI and hence roughly
22× slower than MMOπ and 13× slower than TMMOπ.
π
Discussion. We ﬁnd that (cid:2)MMO
σ is almost as efﬁcient as
MMOπ, while TMMOπ is roughly 2× slower. We can also
σ is roughly 3× faster than nonﬁxed-key AES,
see that (cid:2)MMO
which directly translates to a 3× improvement in the applica-
tions described in Section VI. For example, an implementation
of the GGM tree using MMOπ takes roughly 6 ms to expand
a 128-bit seed into one million 128-bit values, while the
implementation using nonﬁxed-key AES takes about 21 ms
for the same task. Finally, TMMOπ is 28× faster than SHA-
256; as we discuss further in the next section, this leads to a
signiﬁcant improvement in OT-extension protocols.
XORP is competitive with MMOπ and (cid:2)MMO
π
σ for low batch
sizes, though is roughly twice slower for a batch size of 8. We
stress that XORP is non-compressing, and therefore does not
achieve tweakable (circular) correlation robustness; for that
Protocols
Malicious
Semi-honest
High Med.
1.74
2.03
2.35
8.50
2.04
1.76
3.60
9.17
2.85
3.7
12.1
6.27
Low
S-OT (prior)
0.50
S-OT (here)
0.50
C-OT (prior)
0.74
C-OT (here)
0.74
R-OT (prior)
1.14
R-OT (here)
1.46
TABLE IV: Performance of OT-extension protocols. Numbers reported
are in millions of OTs per second, and include the time for 128 base OTs.
High Med.
2.46
9.10
2.46
9.10
2.17
1.84
3.66
10.9
2.91
3.7
14.6
6.61
Low
0.49
0.49
0.74
0.74
1.13
1.43
reason, it should not be compared with TMMOπ.
B. OT Extension
As discussed in Section IV, prior constructions of malicious
OT extension either rely on a cryptographic hash function like
SHA-256 (modeled as a random oracle), or are constructed
from ﬁxed-key AES in an unprincipled—and often insecure—
way. We can use our hash-function constructions in place of
SHA-256 to achieve provable security (if we model ﬁxed-
key AES as a random permutation) with better efﬁciency.
(We stress that malicious OT extension requires tweakable
correlation robustness, and so XORP is inapplicable here.)
The actual improvement depends on the network speed.
We benchmark the performance of our OT protocols in three
settings: “High” (a 5 Gbps network), “Medium” (a 1 Gbps net-
work), and “Low” (a 200 Mbps network). Results are summa-
rized in Table IV, and are averaged over 225 executions. S-OT,
C-OT, and R-OT refer to standard-OT extension, correlated-
OT extension, and random-OT extension, respectively. The
table shows that we obtain a 3–4× improvement, except for the
case of semi-honest standard-OT extension (where the existing
implementation by Zahur et al. based on ﬁxed-key AES is
secure). End-to-end performance evaluations are presented in
Appendix E.
ACKNOWLEDGMENTS
Chun Guo is a post-doc funded by Francois-Xavier Stan-
daert via the ERC project SWORD (724725). Work of
Jonathan Katz was supported in part by DARPA and SPAWAR
under contract N66001-15-C-4065. Work of Xiao Wang was
supported in part by the MACS NSF project,
the RISCS
institute at Boston University, and a gift from PlatON net-
work. Work of Yu Yu was supported in part by the Na-
tional Natural Science Foundation of China (Grant numbers
61872236 and 61572192),
the National Cryptography De-
velopment Fund (Grant number MMJJ20170209), and the
Anhui Initiative in Quantum Information Technologies (Grant