### 1. Introduction to Unprivileged Helper Processes and Security Risks

When running unprivileged helper processes for tasks such as printing, notifications, and more, the system uses a specific group. If an unprivileged process is compromised, an attacker could replace state files with hard or symbolic links, leading to the destruction or corruption of sensitive files.

- **Fedora Core 11 Example**: A similar latent problem exists with files under the directory `/var/log/cups`.

### 2. MySQL Startup Vulnerability

During MySQL startup, the `mysqld` daemon opens a file named `hostname.lower-test` with flags `O_RDWR | O_CREAT` as root in the directory `/var/lib/mysql`, which is owned by the `mysql` user. If the `mysqld` daemon is later corrupted and runs with `mysql` user privileges, an attacker could replace this file with a hard or symbolic link, corrupting a sensitive file when MySQL is restarted.

### 3. Hardware Abstraction Layer (HAL) Daemon Vulnerability

The HAL daemon subsystem opens a file with flags `O_RDWR | O_CREAT` as root in the directory `/var/run/hald`. This directory is owned by the `haldaemon` user, who also owns several daemon processes. Some of these processes listen on a socket accessible to local users.

### 4. Tomcat Subsystem Vulnerability

The Tomcat subsystem opens a file with flags `O_WRONLY | O_APPEND | O_CREAT` as root in the directory `/var/cache/tomcat6`. This directory is owned by the `tomcat6` user, who also owns a process that provides service to remote network clients.

### 5. Fedora Core 11 Lock Files Vulnerability

On Fedora Core 11, the directory `/var/lock` is writable by the `lock` group, which is also the group of a setgid program `/usr/sbin/lockdev`. System startup scripts create "lock" files as root with flags `O_WRONLY | O_NONBLOCK | O_CREAT | O_NOCTTY`. If the `lockdev` program has a vulnerability, an attacker could replace a lock file with a hard or symbolic link, corrupting a sensitive file.

### 6. XAMPP on Linux Vulnerability

XAMPP, an integrated package of Apache, MySQL, PHP, and other components, on Linux opens files for error logging as root in the directory `/opt/lampp/var/mysql`, which is owned by the `nobody` user. A corrupted process running as `nobody` can replace this with a link to any file on the system, which would then be overwritten. XAMPP runs several daemons providing network services as the `nobody` user, including `httpd`.

### 7. Safe Name Resolution for Protection

In all these cases, our safe name resolution approach would protect the system from privilege escalation if the unprivileged processes are compromised.

### 8. Policy Violations

During our whole-system tests, we encountered a surprisingly small number of actual safety policy violations, which were specific to particular platforms and caused by quirks in directory ownership and permissions:

- **FreeBSD 7.2**: The `man` command could trigger policy violations when a user requested a manual page. FreeBSD stores pre-formatted manual pages under directories owned by the `man` user (instead of root). According to our policy, these directories are unsafe for users other than `man`, resulting in policy violations with pre-formatted manual page files that had multiple hard links.
- **FreeBSD Package Manager**: Triggered warnings about following `..` when removing a temporary directory tree under `/var/tmp`. These could be addressed by a more permissive policy.
- **Fedora Core 11 Gnome Desktop**: Triggered policy violations not experienced with other systems. The violations happened when a process with `gdm` user and group privileges attempted to follow symbolic links under the directory `/var/lib/gdm`, which is writable by both the owner `gdm` and the group `gdm`.

### 9. Web Server Application on Debian 5.0

Most of our measurements were conducted on bare-bones systems. On a Debian 5.0 system running an Apache web server, we did not attempt a whole-system measurement but instead ran specific services under our measurement apparatus. The web site on this system is managed cooperatively by several users, with different users responsible for different parts of the site. The web-tree is a mesh of directories with different owners, many writable by the `web-administrator` group. This setup makes the entire web-tree an unsafe subtree. Our safe-open procedure would break this web site, but a more permissive implementation described in Section 6.1 would not.

### 10. Conclusions

Our experiments indicate that our approach to safe name resolution is both effective and realistic. It fixes all 177 symlink-related vulnerabilities reported in CVE since January 2008 and provides protection against latent vulnerabilities identified in our experiments. Most systems will continue working without issues even if this safety measure is implemented. The few that break can be fixed by implementing a more standard permission structure or using the more permissive variant of safe-open.

### 11. Variations and Extensions

#### 11.1. More Permissive Safe-Open

Our safe-open procedure can be modified to be more permissive while ensuring the same security guarantee. The idea is to use two safe/unsafe flags: one sticky and one resettable. This allows following arbitrary symbolic links and handling `..` more flexibly.

#### 11.2. Alternative Safe-Open Using Extended Attributes

If the filesystem supports extended attributes, we can include an attribute listing permissible names for each file. The open procedure will check this attribute and abort if there is a mismatch. This solution requires proper management of the additional attribute.

#### 11.3. Group Permissions

Our safe-open procedure currently only uses UIDs to determine directory safety. To address group permissions, we could modify the procedure to consider GIDs, but this would require a change in the interface. Our current approach is coarse regarding group permissions, treating group write permissions as always making a directory unsafe.

### 12. Conclusion

We have considered the problem of privilege escalation via manipulation of filesystem pathnames, proposing a general approach to safe pathname resolution. This approach protects all applications by default and has been validated through extensive experiments on current operating systems and applications.