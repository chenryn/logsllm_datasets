如果想根据ASCII码反向转换成字符，
使用ASCII（），可以把一个单字节字符转换成它的ASCII编码值：
HEX('abcd');
也可以把HEX（）用于字符串，把字符串转换成一个由十六进制数字构成的字符串，其中每两
CAST(CURTIME()AS UNSIGNED)
CAST(NOW()AS UNSIGNED)
CURTIME()+0
NOW()+0
一般情况下，
CHAR(65)
HEX(65535)
HEX(255)
使用HEX（），可以把数字转换成十六进制字符串：
CONCAT(14)
CAST(14 AS CHAR)
使用CAST（)或CONCAT（），可以把一个值转换成字符串：
如果要带有四舍五入，则需要使用 ROUND（）来代替CAST（）。
abcd'
CURTIME()
NOW()
CURDATE()+0
20130101
ASCII('A')
13 + 0.0000
CAST(13.3 AS SIGNED)
A'
4
13
第3章数据类型
+
可以采用让日期值加上一个〇的方式，把它转换成数字形式：
INTERVALODAY
INTERVAL O DAY)
INTERVAL O DAY)
，下列表达式可以确定注册商标符号的UTF-8值：
可以把值转换成整数：
，则需要使用CHAR（）函数：
会把字符串或者数字强制转换成日期：
，可以使用CONVERT（）。
→'ucs2
→20130109
→'2013-01-09
→2013-01-01*
→'A'
↓
→13.0000
一→
一
153603
93517.000000
65
20130109153603
61626364
09:35:17
20120625093517.000000
2012-06-2509:35:17
'2013-01-01"
'FFFF!
'14
14
'latinl'
2013-01-01
'FF'
13
'ucs2'
'abcd'
'abcd'
'2013-01-01
。如果想检查结果是否
---
## Page 203
列出了几个在为列挑选类型时需要思考的问题。
弃用另一种表示，这种做法往往预示着在存储要求、查询处理和整体性能方面存在问题。下面
的列，会导致 MySQL 不会使用这些列上的任何索引，从而进一步降低查询的速度。如果从一
都执行从字符串到数字的转换，而此操作的效率很低。
数字列来对待，会引发两个很严重的问题。一个问题是，
却比字符串11‘更大。此问题可以通过把列放到数字上下文中来解决：
例如，对数字的排序与对字符串的排序就不一样。数字2小于数字11，但字符串+2在词法上
有效率。另外需要注意的是，由于对数字和字符串的处理方式不同，查询结果也会存在差异。
那么做吗？如果这么做了，会发生什么事情呢？
来看一个简单示例。假设有一些看起来像是数字的数据。你可以把它们表示成字符串，但应该
期都可以表示成字符串形式。既然如此，难道就应该把所有的列定义为字符串吗？非也。我们
3.6选择数据类型
开始就把值存储成数字，那么这两个性能降低问题都将不复存在。
有用，但没必要每次需要按数字方式排序时都用这一招。
本节将对那些有助于大家做出选择的因素进行讨论。
的值的类型，它们占用多少存储空间，等等。但在创建表时对使用何种类型又该如何执择呢？
对这种二进制串的解释：
然后再用COLLATE来更改排序规则：
排序规则，可以使用COLLATION（）函数：
刚才的示例揭示了几个在选择数据类型时需要考虑的问题。只是简单地选用某种表示，而
首先，你可能会使用更多的空间，因为使用数字类型列来存储数字，比使用字符串类型更
最为“通用”的数据类型是字符串类型。任何内容都可以保存在字符串中，因为数字和日
在3.2节，我们对各种可用的数据类型及其基本特性进行了描述，其中包括它们能够存放
列要存放什么类型的值？是数字？字符串？还是日期？你完全可以把任何类型的值都表示
让列加上0，可以强制列按数字方式来排序，但这么做合理吗？在某些场合，这个技术很
SELECTcol_name+Oasnum...ORDER BY num;
如果想把非二进制串强制转换成二进制串，则可以使用BINARY关键字：
另外，对于用引号引起来的二进制串或十六进制串，可以用字符集引导符来更改MySQL
CONVERT(abcd'USING latin2) COLLATE latin2_bin
字符集和排序规则必须是兼容的。如果它们不兼容，则可以先用CONVERT（）来转换字符集，
如果想把二进制串转换成具有给定字符集的非二进制串，
COLLATION(‘abcd'COLLATE latin1_bin)
COLLATION('abcd')
如果想更改字符串的排序规则，可以使用COLLATE运算符。如果想检查结果是否有所要的
BINARY'abcd'
'abcd'='ABCD
_latin10x61626364='ABCD
0x61626364=ABCD
0x61626364
HEX(CONVERT(_ucs2 0x2122 USING utf8))
abcd'
=BINARYABCD
ABCD
另一个问题是，在计算过程中使用这样
，这将迫使MySQL 对列里的每一个值
，让MySQL 把一个字符串列当作一个
则可以使用CONVERT（）：
1
'latin1_bin'
"latinl_swedish_ci"
E284A2
C
'abcd'
3.6选择数据类型
183
---
## Page 204
数据的计量单位和精度。精确到整数能满足需求吗？还需要精确到小数吗？这类问题有助于让
可以用下面这样的代码来显示这个列的值：
们进行转换，以便于显示。例如，如果把所有小于0.01英寸的非零降雨量都认为是微量，那么
查询代码的难度。
更为复杂的办法，例如：同时使用数字列和字符串列，在填充其中一列时，让另一列为NULL。
气预报一般都会报降雨量。有时，它是一个数字（如“降雨量为0.25英寸”）。但有时，它是
为别人设计表，那么情况就不一样了。想了解你要处理的内容，恐怕就没那么容易了。一定要
的类型。如果存储的是你自己的数据，那么你可能对使用什么样的类型心中有数。如果你是在
存储字符串、用时态类型列存储日期和时间。如果数字带有小数，就选用DECIMAL或浮点类型，
有着最直接的影响。一般来说，应该做简明的决定，即用数字类型列存储数字、用字符类型列
3.6.1
MEDIUMINT那样简单。有时会稍微复杂点，如把CHAR 更改为具有特定允许值的 ENUM。
现
即便如此，也不用发愁。你可以利用ALTER TABLE 语句，把它更改成一种更好的类型。当你发
更小。对于MyISAM表，长度固定的行的性能，比长度可变的行更好。
执行速度通常都比字符串操作要快。短字符串的比较速度，比长字符串要快，而且磁盘开销也
对
呢？对于数字，可以选择一种取值范围有限的小类型，也可以选择一种取值范围很大的大类型。
则使用ENUM或SET更为合适。
虑选用UNSIGNED。如果它们是字符串，那么是否总是来自某个固定且有限的值集合？如果是，
并不是件轻而易举的事情。如果你正在为别人设计表，那么把“列将存放什么样的数据”这样
另
它
强
好的性能。
成字符串，
184
如果让我来设计这个表，我可能会尽量把所有的行都存储成数字形式，然后根据需要对它
要有可能，请尽量不要选择最后一种做法。因为它会让表变得难以理解，并且大大增加编写
一种办法是，选用字符串类型，这样可以把单词“微量”记录下来。当然，还可以想出一些
降雨，也就是说“几乎没有”
问，以便弄清这个表到底需要包含什么样的值。
用整数类型。但凡事也有例外。这里的原则是，必须了解数据的本质，才能更好地选出适合
某个数据集包含的值超出当初的设想时，你要做的更改，可能就像把SMALLINT更改为
选择CHAR（255）。
于字符串，应该根据它们的长短来选择。如果要存储的值所包含的字符不超过10个，那么不
有些值一眼就能看出是数字，但你必须确定是选用整数类型还是非整数类型。你必须弄清
假设，不
在选择数据类型时，首先要考虑的事情是列要存放什么类型的值，因为这对于选择的类型
在性能和效率方面要考虑哪些问题？有些类型处理起来的效率比其他类型要高。数字操作的
数据类型的取值范围和空间占用量是相互影响的。实际需要使用多“大”的类型才算合适
值是否都在某个特定区间内？如果它们都是整数，那么是否总为非负值？如果是，则可以考
尽管你很想在创建表时就做出最好的数据类型选择，但实际选择的类型可能并不是最优的，
下面几节将对这些问题进行更加详细的讨论，其中性能问题将放到5.3节讨论。
列要存放什么类型的值
第3章
”（即通常会编码为数字，但并非总是如此）是数字的吗？例如，在看电视新闻时，
。不过，对要处理的值的类型进行评估，尤其是要评估那些源自其他人的数据的值，
有人让你帮忙设计一个表，其中需要用一个列来记录“降雨量”。它是数字吗？或者
只是，
数据类型
，正如我们刚才看到的那样，如果使用另一种更适合的类型，则有可能获得更
降雨。
，这种说法对于天气预报来说很正常，但在数据库里要
量化成一个数字，这样可以用数字类型来记录降雨量。
如
天
在
合
---
## Page 205
（如试验的开始时间）。所用方法既可以是只用一个DATETIME列，也可以是使用分开的 DATE
间。这取决于你是否会在同一天多次进行同一项试验。如果是这样，那么需要记录一个时间值
给定的课题ID和试验日期把这两个表链接在一起。
始试验都存储在主表的行里，
选择也会不同。可以用一个
始试验之后
关系的表“链接”
录时间。然后，让那个TIME 列可以为NULL，并把它解释为“无时间”：
如果时间部分确实是可选的，那么可以使用DATE列来记录日期，再用一个单独的TIME列来记
MySQL没有提供时间部分为可选的日期类型：DATE没有时间部分，DATETIME一定有时间部分。
开头的“零”。
使去掉了其中的非数字字符，恐怕还是会想要把它们存储成字符串，而不是数字，以避免丢生
供完美精度的数据类型。你有下面两种选择。
某些场合，你甚至可以使用多个列（如以磅和盎司来记录重量)。
可以选用整数类型列。如果想要记录精确到小数，则应该选用一个定点数或浮点数类型列。
你把整数和定点数或浮点数类型区分开来。例如，如果想要记录的“重量”是精确到磅，那么
合
分
如果需要保存日期信息，那么这个值包括时间吗？也就是说，它们还需要包含时间值吗？
在这个场景里，必须回答的问题是：是否可以只用日期，或者是否同时需要使用日期和时
在某些场合，
CREATE TABLE mytbl
某些“数字”其实不是真正的数字。电话号码、信用卡号和社会保险号都会使用非数字字
口把货币表示成DECIMAL（M,2)类型，其中M为所需取值范围的最大宽度。这种类型的
除非你只需要近似精度的行。因为人们对自己的金钱都很敏感，所以你可能更需要可以提
：
口
它们看起来像是汗
另
口
高度是一种数字类型的信息，它有以下几种可能的表示形式。
time TIME
date DATE NOT NULL,
内部用整数类型来表示所有货币换算成“分”
数值可以精确到小数点后2位。DECIMAL的优点在于：值不存在舍入误差，计算是料
一种数字类型的信
乘以100，
过程在内部都是使用整数完成的，速度很快。不足之处在于：在输入过程中原有值需
确的。
能是表示“高度”的最佳办法。
用一个数字列来表示英尺，
的算术运算中很难使用。
易于阅读和理解（肯定比“74英寸”这种形式好），但这种值在像求和或求平均值之类
用'6-2'这样的字符串来表示像“6英尺，2英寸”
大
用一
易一
后，你可能还需要
许多MySQL里的函数来重新格式化这些值，让显示变得更有意义。这意味着，这
，但不要忘了，值的展示格式并非一定要与用于处理它们的格式保持一致。你可以
一个数字列来表示英寸。这种做法对数据库来说最容易处理，对人来说却意义不
点，但使用两个列比使用一个列更复杂。
起来。
确定是否需要时间值尤其重要，如需要基于日期信息，把两个具有“主从”
而在输出过程中原有值需要除以100。
浮点
信息是货币，如美元。在计算时，使用到的值常带有美元和美分两个部
、假设，你正在进行某项涉及多项试验课题的研究。在完成一组标准初
房要立即开展另外一些试验。根据初始试验结果的不同，对附加试验的
值，但FLOAT和DOUBLE类型存在四舍五入的误差问题，因此不太
”
而所有的附加试验都存储在从表的行里。然后，通过具体试验所