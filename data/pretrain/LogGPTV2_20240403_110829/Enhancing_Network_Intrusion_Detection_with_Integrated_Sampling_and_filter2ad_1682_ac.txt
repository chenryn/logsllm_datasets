### Signature 2 to Signature 6
These signatures are represented by directed edges in a graph, where the edge direction corresponds to the alarm's source IP address to its destination IP address.

### Directed Graph Representation of IDS Alarms
The Intrusion Detection System (IDS) alarms, as detailed in Table 1, are modeled as a directed graph, as shown in Figure 2. This graph includes three connected components, each representing a set of related alarms.

**IP Addresses in the Directed Graph:**
- 10.0.0.1
- 10.0.0.2
- 10.0.0.3
- 10.0.0.5
- 10.0.0.6
- 10.0.0.9
- 10.0.0.10
- 10.0.0.4
- 10.0.0.13
- 10.0.0.11
- 10.0.0.12
- 10.0.0.7
- 10.0.0.8

**Figure 2: Intrusion Detection Alarms as a Directed Graph with Three Connected Components**

### 3.4 Data Set Reduction Using the Connected-Component Algorithm
In large intrusion detection environments, the number of alarms can easily reach millions per day. We have observed raw event counts approaching 10 million events per day. Most of these alarms are false positives, but it is challenging to precisely label which alarms are genuine [17, 18, 20, 21]. To manage this data volume, we used the connected-component algorithm to trim irrelevant data before starting the mining activities. This approach required prior knowledge of a specific signature for which we wished to discover new rules.

#### Importance of Connected Components
When analyzing relationships between distinct signature and IP address combinations, it is crucial to note that some alarms in the dataset cannot be related. For instance, if one set of alarms is unrelated to another, we exclude the latter from consideration. By translating the alarms into a directed graph, we can identify connected components, allowing us to focus on relevant alarms. However, this method has limitations, such as handling slave nodes controlled by an unrepresented master, which we designated as out of scope.

#### Limitations of Single-Source Analysis
Simply limiting the analysis to alarms from a single source IP address that triggered a specific signature would only detect single-source attacks. This approach would severely restrict further analysis. By including other relevant alarms within the same connected component, we can analyze a broader range of signatures and IP addresses, preserving the ability to perform more extensive data exploration.

**Example: Multi-Stage Attack**
Consider a multi-stage attack involving reconnaissance, exploitation, and subsequent attacks on a third system. The alarms for this scenario are listed in Table 2 and illustrated in Figure 3. If we had only considered the reconnaissance signature, we would have missed the subsequent stages of the attack. Thus, focusing on the same connected component balances efficiency and analytical depth.

**Table 2: Intrusion Detection Alarms for a Multi-Stage Attack**
| Network ID | Source IP   | Destination IP | Signature          |
|------------|-------------|----------------|--------------------|
| Network A  | 10.0.0.5    | 10.0.0.7       | Reconnaissance     |
| Network A  | 10.0.0.5    | 10.0.0.7       | Exploit 1          |
| Network A  | 10.0.0.7    | 10.0.0.8       | Exploit 2          |
| Network A  | 10.0.0.6    | 10.0.0.7       | False Alarm        |

**Figure 3: A Multi-Stage Attack Scenario**

### 4 The Approach
Our experiments were conducted on a dataset of alarm logs generated by network-based intrusion detection sensors over a 24-hour period for 135 distinct production networks. The alarms were loaded into a data warehouse designed for efficient offline analysis using association rule mining techniques. The experiments were repeated daily for 30 days.

#### 4.1 Generation of Signature-Specific Rules
We aimed to discover new rules for a signature exhibiting suspicious behavior. We selected the connected components containing the suspected signature and discarded unrelated alarms. The association rule algorithm was then executed to generate rules for the signature. This process, described in Algorithm 1, experienced a success rate of approximately 10%.

**Algorithm 1: Find-Signature-Rules(G, s)**
```plaintext
Require: G = (V, E), a directed graph of IDS Alarms, s a subject signature
1: C ← Connected-Components(G)
2: for all C ∈ C do
3:   if s ∈ C then
4:     copy all alarms in C to T
5:   end if
6: end for
7: R ← Association-Rules(T)
8: Return R
```

#### 4.2 Generation of Single-Source Rules
Grouping transactions by source IP address yielded the most high-confidence rules. While not necessary, using the connected components algorithm to limit the dataset improved performance. Setting the minimum Support and Confidence parameters to 0 was useful, as a single source IP typically triggers fewer than two signatures in 24 hours. Consequently, 87% of our single-source experiments generated zero rules for a given day’s data.

### 5 Efficacy of the Framework
The confidence value of a new rule was critical for its effectiveness in the production monitoring environment. On average, 66% of the rules had a confidence value of 100, and 86% had a confidence value over 80. Certain types of attack activity generated very high volumes of rules with a 100% confidence value, skewing the statistics. Disregarding these, the percentage of rules with a confidence value above 80% was 63%, and those with a confidence value of 100% was 43%.

#### Example: Web Server Attack
A detected web server attack involved multiple instances of the [AWStats configdir Command Exec] and [XMLRPC PHP Command Execution] signatures. Our framework grouped alarms by the source IP address and identified repetitive combinations, indicating an attacker attempting multiple exploits. This pattern was observed on two distinct monitored networks, confirming the legitimacy of the detected activity.

**Table 3: IDS Alarms for a Multi-Stage Web Server Attack**
| Network ID | Source IP   | Destination IP | Signature                           |
|------------|-------------|----------------|-------------------------------------|
| Network A  | 24.9.61.170 | 192.168.2.4    | AWStats configdir Command Exec      |
| Network A  | 24.9.61.170 | 192.168.2.5    | XMLRPC PHP Command Execution        |
| Network B  | 24.9.61.170 | 192.168.2.16   | AWStats configdir Command Exec      |
| Network B  | 24.9.61.170 | 192.168.2.17   | XMLRPC PHP Command Execution        |

**Rule for Multi-Stage Web Server Attack:**
- **Confidence = 100**
- **Support = 3.45**

#### Example: Reconnaissance Attack
This rule was generated from a network where an attacker was attempting to locate vulnerable file shares. The pattern involved two TCP-based reconnaissance signatures followed by a LANMan share enumeration, a common method for identifying vulnerable file shares for future exploitation.

**Rule for Reconnaissance Activity:**
- **Confidence = 100**
- **Support = 3.45**

By using our framework, we were able to detect attacks that did not trigger meta alarms on the operational console, ensuring that significant threats were not overlooked.