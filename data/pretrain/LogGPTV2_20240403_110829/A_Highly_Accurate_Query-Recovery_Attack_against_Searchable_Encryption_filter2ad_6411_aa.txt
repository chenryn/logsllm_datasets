title:A Highly Accurate Query-Recovery Attack against Searchable Encryption
using Non-Indexed Documents
author:Marc Damie and
Florian Hahn and
Andreas Peter
A Highly Accurate Query-Recovery Attack against 
Searchable Encryption using Non-Indexed Documents
Marc Damie, University of Technology of Compiègne, France; Florian Hahn and 
Andreas Peter, University of Twente, The Netherlands
https://www.usenix.org/conference/usenixsecurity21/presentation/damie
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.A Highly Accurate Query-Recovery Attack against
Searchable Encryption using Non-Indexed Documents
Marc Damie
Florian Hahn
University of Technology of Compiègne, France
University of Twente, The Netherlands
PI:EMAIL
PI:EMAIL
Andreas Peter
University of Twente, The Netherlands
PI:EMAIL
Abstract
Cloud data storage solutions offer customers cost-effective
and reduced data management. While attractive, data security
issues remain to be a core concern. Traditional encryption
protects stored documents, but hinders simple functionalities
such as keyword search. Therefore, searchable encryption
schemes have been proposed to allow for the search on en-
crypted data. Efﬁcient schemes leak at least the access pattern
(the accessed documents per keyword search), which is known
to be exploitable in query recovery attacks assuming the at-
tacker has a signiﬁcant amount of background knowledge
on the stored documents. Existing attacks can only achieve
decent results with strong adversary models (e.g. at least 20%
of previously known documents or require additional knowl-
edge such as on query frequencies) and they give no metric
to evaluate the certainty of recovered queries. This hampers
their practical utility and questions their relevance in the real-
world.
We propose a reﬁned score attack which achieves query
recovery rates of around 85% without requiring exact back-
ground knowledge on stored documents; a distributionally
similar, but otherwise different (i.e. non-indexed), dataset suf-
ﬁces. The attack starts with very few known queries (around
10 known queries in our experiments over different datasets of
varying size) and then iteratively recovers further queries with
conﬁdence scores by adding previously recovered queries that
had high conﬁdence scores to the set of known queries. Addi-
tional to high recovery rates, our approach yields interpretable
results in terms of conﬁdence scores.
1 Introduction
Cloud data storage services continue to be on the rise and
attract more users than ever before. At the same time, data is
a major target in cyber-attacks and the headlines about data
breaches become mainstream. This makes data security a key
concern in this setting. While traditional encryption technol-
ogy can be used to protect the conﬁdentiality of data, simple
functionalities such as searching get lost under encryption.
To cope with this, Song, Wagner, and Perrig [29] presented a
practical solution to search on encrypted data. Few years later,
Curtmola et al. [7] presented their construction of a searchable
symmetric encryption (SSE) scheme based on an inverted in-
dex. As a result, their construction can search keywords in
encrypted documents in optimal search time.
An (index-based) SSE scheme creates an encrypted index
which can be queried to obtain the identiﬁers of the docu-
ments containing one given keyword. The encrypted index
hides the underlying keywords from the server but leaks the
access pattern for each query; the access pattern is the list of
identiﬁers of all documents containing the queried keyword.
In this work, we focus on single-keyword search SSE schemes
that leak the access pattern; we do not consider more complex
systems such as encrypted databases.
The access pattern leakage has been shown to be ex-
ploitable in passive attacks. Blackstone et al. [1] divided such
passive attacks into two categories: 1) known-data attacks
where the adversary has partial or complete knowledge of the
documents indexed by the server (also referred to as leakage-
abuse attacks), and 2) similar-data attacks where the adver-
sary only has knowledge of (non-indexed) documents similar
to the indexed documents (also referred to as inference at-
tacks). An adversary who can run known-data attacks is more
powerful than an attacker who is restricted to similar-data
attacks. While Islam et al. [15] and Cash et al. [3] motivated
their attacks as similar-data attacks, decent results were only
achieved in the setting of known-data attacks.
Cash et al. deﬁned in [3] (referred to as CGPR) four levels
of security: L1 to L4. The most secure type of schemes is re-
ferred to as L1 which only leaks the access pattern for the key-
words which have been queried. The other types successively
leak more until L4 which leaks the number of occurrences
of each keyword and the pattern of their locations in the doc-
uments. Islam et al. [15] (referred to as IKK) proposed the
ﬁrst passive attack exploiting the access pattern leakage. Af-
ter [15], several passive attacks have been proposed to recover
the queries of L1-schemes [1, 3, 22, 32]. Although most of
USENIX Association
30th USENIX Security Symposium    143
these attacks can be executed as similar-data attacks, they are
only effective as known-data attacks with exact knowledge of
at least 20% of all indexed documents.
Other attacks have been proposed, for example by Black-
stone et al. [1], that conceptually only work as known-data
attacks and do not support similar-data attacks at all. This
conceptual restriction, however, enables the attack to work
with less partial knowledge and can be effective with exact
knowledge down to 10% of all indexed documents. While
this represents an impressive improvement of known-data at-
tacks, it still requires exact knowledge of parts of the indexed
documents. On the other hand, Oya and Kerschbaum [23]
proposed a new attack augmenting the adversary knowledge
with the query frequency. While effective, this new attack is
not directly comparable to our setting with decreased attacker
knowledge. Finally, all existing attacks [1, 3, 15, 23, 28] as-
sume the exact knowledge of the client’s keyword universe,
i.e. the queryable vocabulary.
In conclusion, no practical similar-data attack has been
proposed so far that achieves an accuracy higher than 50%
even under advantageous conditions (i.e. client’s keyword
universe small AND known by the attacker). In Appendix
A, we describe more extensively the related papers and their
respective contributions. Also, we discuss orthogonal lines of
research focusing on other attacker models or schemes with a
different leakage.
Our contribution.
In this paper, we describe an attack that
works without knowledge of the indexed documents and only
uses similar data. At the same time our similar-data attack
achieves recovery rates of up to 90%. The documents known
by the adversary only need to be distributionally close to the
indexed documents. For example, an attacker can mount a
successful attack exploiting information of a previous data
breach, even if the breached documents have been identiﬁed as
such and were purged from the index to mitigate future known-
data attacks. For a successful similar-data attack, an adversary
correctly recovers most of the queries given knowledge of
only 10 query tokens and their corresponding keywords.
Our attack is based on a conﬁdence metric used to score a
trapdoor-keyword pair. The score should be maximized when
the trapdoor (i.e. a query token) is paired with its (correct)
underlying keyword. This conﬁdence score is the key element
which provides a good interpretability of the attack results. We
start with our score attack that computes a conﬁdence score
of each trapdoor-keyword pair and returns, for each trapdoor,
the pair with the highest score. This base similar-data attack
reaches a recovery rate of 60% while assuming around 25% of
known queries. Secondly, we paper proposes an improvement
strategy reducing drastically the amount of adversary knowl-
edge necessary, especially regarding the known queries. Our
reﬁned score attack, an iterative reﬁnement strategy1, reaches
1Code: https://github.com/MarcT0K/Refined-score-atk-SSE
recovery rates of up to 85% with only 10 known queries in
our experiments over different datasets of varying size. More
speciﬁcally, the iterative scoring approach recovers further
queries by adding previously recovered queries that had a
high conﬁdence score to the set of known queries. Our attack
has a low runtime and can be performed in less than two min-
utes. As indicated by our experiments, the reﬁned score attack
is sensitive to the amount of knowledge available, that is, its
accuracy improves with additional adversary knowledge. This
observation was not made for attacks like IKK and CGPR
where their performance stays almost the same with growing
amounts of known queries. We show that both padding and
obfuscation countermeasures can successfully mitigate our
attack. However, these countermeasures come with practical
drawbacks, such as storage and communication overhead. We
also study how the reﬁned score attack behaves when the
attacker owns a dataset with a lower degree of similarity.
Our paper highlights that Searchable Symmetric Encryp-
tion (SSE) schemes should no longer be used without coun-
termeasure. For example, suppose a company uses SSE to
manage the employee mailboxes, each employee having their
own encrypted index and secret key. An attacker having ac-
cess to just one single employee’s mailbox may have enough
background knowledge to successfully recover the queries of
every other employee for which she has only very few known
queries. Using the compromised mailbox, she can run a mas-
sive ﬁle-injection attack by sending few emails to everyone.
This preliminary active attack would be a way to obtain the
known queries necessary to perform the reﬁned score attack
on the rest of the employees’ queries. Such a scenario is not
possible with the existing known-data attacks because, by
deﬁnition, they can only recover the queries from the owner
of the mailbox accessible by the attacker.
2 Deﬁnitions, attacker models, and assump-
tions
The notation as introduced in this section and used throughout
this work is summarized in Table 1.
2.1 Searchable symmetric encryption (SSE)
From a high-level perspective, the majority of searchable
symmetric encryption (SSE) schemes are based on the same
design idea introduced by Curtmola et al. [7]. We consider
a document set D, which consists of documents d ∈ D with
identiﬁers id(d). Each document d consists of keywords. If a
keyword x occurs in d, we denote this as x ∈ d. Now, initially,
a client generates an inverted index for document set D that
indicates for each keyword in which document it occurs. The
document set D is encrypted on the client side using a secret
key and uploaded to a server. In a second step, the client can
then query the encrypted index for single keywords using
144    30th USENIX Security Symposium
USENIX Association
Table 1: Summary of notations
Meaning
Base adversary knowledge
Similar document set
Queries observed by the attacker (i.e. a list of trapdoors)
Results of the queries from Q (i.e. a list of document identiﬁers for each td in Q )
(trapdoor, keyword) pairs known by the attacker
Derived adversary knowledge
Vocabulary extracted from Dsim
Word-word co-occurrence matrix built from Dsim
Trapdoor-trapdoor co-occurrence matrix built from RQ
Size notation
nsim
l
l
k
msim
msim × msim
l × l
Estimation of nreal, the number of documents indexed by the server
not applicable
Unknown by the attacker
Encrypted documents indexed by the server
Queryable vocabulary (i.e. the client’s keyword universe)*
nreal
mreal
l
Notation
Dsim
Q
RQ
KnownQ
Ksim
Ckw
Ctd
ˆnreal
Dreal
Kreal
Kreal(Q )
Underlying keywords of the observed queries Q (i.e. the objective of the attack)*
*Actually, the attacker knows a small part of this vocabulary thanks to the known queries
a trapdoor function, which takes the secret key and a key-
word as input and outputs a unique trapdoor. We denote as
Trapdoor(x) the trapdoor of the keyword x. When the client
searches for a keyword, she sends the corresponding trapdoor
to the server. The server computes the result set using the
encrypted index together with the received trapdoor and sends
back the matching result set, which consists of the matching
encrypted documents and their identiﬁers.
Here, SSE supports various kinds of document sets such
as, for example, a set of emails, a set of articles, a set of
information sheets. The only condition on the document set is
that the user can extract keywords. For text ﬁles, the procedure
is straightforward but it could also be a tag extraction for
videos. In the case of videos or images, the tags would be the
subject of the queries. Thus, we can also consider indexing
non-textual data.
Depending on the leakage proﬁle of the scheme, the re-
sponse leaks more or less information to the server. Our attack
works on the minimum leakage proﬁle called L1. L1-schemes
only unveil the identiﬁers of the documents containing the
keyword queried by the user.
2.2 Attacker models
A passive attacker observes the trapdoors sent to the server
and the server response, which includes the list of the match-
ing document identiﬁers. These identiﬁers reveal no further
information about the content of the document. The attacker
can link a query to its response and create (Trapdoor, DocIDs)
pairs. We consider two slightly different attacker models; both
are applicable for our attack as described in Section 5:
• An honest-but-curious server follows the protocols but
tries to recover the underlying keywords of the queries.
To facilitate search on encrypted documents, the en-
crypted index is usually supposed to be stored on the
server along with the encrypted documents as it is the
case in settings considered by the IKK and CGPR attacks.
Such an attacker owns metadata about the encrypted doc-
uments: total number of documents and their size.
• A passive trafﬁc observer records the trafﬁc of
the database. This adversary only has pairs of
(Trapdoor,DocIDs) and uses them to recover the un-
derlying keywords. It could also represent a case where
the index server does not store the encrypted documents.
Such an index server ignores the number and the size of
the indexed encrypted documents.
2.3 Adversary knowledge
Similar document set The adversary knowledge is focused
on a similar document set Dsim = {d1, . . . ,dnsim}. A docu-
ment set Dsim is similar if it is distributionally close to the
indexed documents Dreal. A formal deﬁnition of document
set similarity is proposed in Subsection 2.4.
In a company, the mailbox of an employee is a document
set similar to her colleague mailboxes. As another example,
leaked conﬁdential notes are a similar document set to recover
the queries on the rest of the notes. Known-data attacks can
also work on leaked documents but the server can simply
remove these documents from the index to avoid these attacks.
Despite this removal, our attack that we introduce in Section
USENIX Association
30th USENIX Security Symposium    145