# Practical Non-Malleable Codes from \(\ell\)-more Extractable Hash Functions

## Authors
Aggelos Kiayias<sup>∗†</sup>, Feng-Hao Liu<sup>§</sup>, and Yiannis Tselekounis<sup>∗‡</sup>

- <sup>†</sup>University of Edinburgh, email: [PI:EMAIL]
- <sup>§</sup>Florida Atlantic University, email: [PI:EMAIL]
- <sup>‡</sup>University of Edinburgh, email: [PI:EMAIL]

May 20, 2018

## Abstract
In this work, we significantly improve the efficiency of non-malleable codes in the split-state model by constructing a code with codeword length \(|s| + O(k)\), where \(|s|\) is the length of the message, and \(k\) is the security parameter. This represents a substantial improvement over previous constructions, both asymptotically and concretely.

Our construction relies on a new primitive called \(\ell\)-more extractable hash functions, which we define and study. This notion guarantees that any adversary given access to \(\ell \in \mathbb{N}\) precomputed hash values \(v_1, \ldots, v_\ell\) and produces a new valid hash value \(\tilde{v}\), must know a pre-image of \(\tilde{v}\). This is a stronger notion than those by Bitansky et al. (Eprint '11) and Goldwasser et al. (ITCS '12, Eprint '14), which consider adversaries without access to precomputed hash values. By appropriately relaxing the extractability requirement, we instantiate \(\ell\)-more extractable hash functions under the same assumptions used for previous extractable hash functions, specifically a variant of the Knowledge of Exponent Assumption (KEA).

**Keywords:** Non-malleable codes, hash functions, split-state model.

*Research partly supported by ERC project CODAMODA (# 259152) and H2020 project PANORAMIX (# 653497).*

## Contents
1. Introduction
   1.1 Our Results
   1.2 Technical Overview
   1.3 Related Work
2. Preliminaries
3. \(\ell\)-more Extractable Hash Function Families
4. A Non-Malleable Code Against Split-State Tampering
5. Constructing 1-more Extractable Hash Functions
   5.1 1-more Extractable Hash Functions from RSS-NM Codes Against Affine Functions
   5.2 Constructing RSS-NM Codes
   5.3 Our Resulting Instantiation
6. Constructing \(\ell\)-more Extractable Hash
7. Instantiating Authenticated Encryption
8. Appendices
   A. Preliminaries and Definitions
      A.1 Basic Notions
      A.2 Randomness Extractors and Universal Hash Function Families
      A.3 Instantiating Authenticated, Semantically Secure Symmetric Encryption Against One-Time Leakage
      A.4 Multi-Codeword Randomness Simulatable NMC
   B. Proofs
      B.1 Proof of Lemma 3.2
      B.2 Proof of Lemma 3.5
      B.3 Proof (Sketch) of Lemma 6.2

## 1. Introduction
Non-malleable codes, introduced by Dziembowski et al. [35], are a relaxation of error correction and detection codes. They provide security such that any modified codeword decodes to the original message or to a completely unrelated one, with overwhelming probability. Non-malleability is defined through a simulation-based definition, which informally states that for any tampering function \(f\), there exists a simulator that simulates the tampering effect by only inspecting \(f\), without making assumptions about the distribution of the encoded message.

Various applications of non-malleable codes have been proposed, including CCA-secure encryption schemes [23], non-malleable commitments [5], and protection against malicious modification attacks, also known as tampering attacks. The split-state model, where private memory is split into two parts \(L\) and \(R\), and the attacker can apply any function \(f = (f_1, f_2)\) resulting in a tampered memory \((f_1(L), f_2(R))\), has been extensively studied. This model is plausible because sensitive data can be split across physically separated storage devices.

Explicit constructions of non-malleable codes in the split-state model can be categorized into information-theoretic and computational. Aggarwal et al. [4] provided the first polynomial-time, information-theoretic, non-malleable code for multi-bit messages, producing codewords of length \(O((|s| + k)^7)\). Later, they proposed another construction achieving codeword length roughly \(O(|s|)\) for sufficiently large \(|s|\).

In the computational setting, Liu and Lysyanskaya [51] constructed a non-malleable code using cryptographic tools, achieving a codeword length of \(|s| + O(k^2)\). Recently, Aggarwal et al. [2] presented a compiler transforming any low-rate, non-malleable code into a rate 1, computationally secure, non-malleable code. However, these constructions, while achieving "rate 1" asymptotically, still have significant overhead for short messages, leaving the practical implications unclear.

### 1.1 Our Results
We introduce a new cryptographic primitive, \(\ell\)-more extractable hash function families, and use it to construct efficient non-malleable codes in the split-state model. \(\ell\)-more extractable hash function families ensure that if an adversary, given \(\ell\) hash values \(v_1, \ldots, v_\ell\), produces a new valid hash value \(\tilde{v}\), it must know a pre-image of \(\tilde{v}\). This generalizes the notion of extractable hash functions by Bitansky et al. [11] and Goldwasser et al. [61].

We prove that:
- **Theorem 1.1 (Informal):** Extractable hash \(\neq\) 1-more extractable hash.
- **Theorem 1.2 (Informal):** DLog and (a variant of) KEA imply \(\ell\)-more extractable hash.
- **Theorem 1.3 (Informal):** \(\ell\)-more extractable hash (with some additional properties) implies non-malleable codes in the split-state model.

Our scheme produces codewords of length \(|s| + 9 \cdot k + 2 \cdot \log_2(k)\) (or \(|s| + 18k\)), which is one order of magnitude better than the combination of [51] + [2] + [54] + [45]. Our approach is modular and uses a "(one-time-symmetric-key-encrypt)-and-hash" method, yielding truly efficient non-malleable codes.

## 2. Preliminaries
[Detailed preliminaries section to follow, covering necessary background and definitions.]

## 3. \(\ell\)-more Extractable Hash Function Families
[Definition and properties of \(\ell\)-more extractable hash functions, including formal definitions and proofs of key theorems.]

## 4. A Non-Malleable Code Against Split-State Tampering
[Construction of the non-malleable code using \(\ell\)-more extractable hash functions, including detailed steps and proof of non-malleability.]

## 5. Constructing 1-more Extractable Hash Functions
### 5.1 1-more Extractable Hash Functions from RSS-NM Codes Against Affine Functions
[Construction and analysis of 1-more extractable hash functions using RSS-NM codes.]

### 5.2 Constructing RSS-NM Codes
[Details on constructing RSS-NM codes, including algorithms and security proofs.]

### 5.3 Our Resulting Instantiation
[Instantiation of the 1-more extractable hash functions and their application in the non-malleable code.]

## 6. Constructing \(\ell\)-more Extractable Hash
[Generalization to \(\ell\)-more extractable hash functions and their construction under the same assumptions.]

## 7. Instantiating Authenticated Encryption
[Methods for instantiating authenticated encryption, including the use of symmetric key encryption and hash functions.]

## 8. Appendices
### A. Preliminaries and Definitions
#### A.1 Basic Notions
[Basic notions and definitions used throughout the paper.]

#### A.2 Randomness Extractors and Universal Hash Function Families
[Definitions and properties of randomness extractors and universal hash function families.]

#### A.3 Instantiating Authenticated, Semantically Secure Symmetric Encryption Against One-Time Leakage
[Methods for instantiating authenticated, semantically secure symmetric encryption against one-time leakage.]

#### A.4 Multi-Codeword Randomness Simulatable NMC
[Details on multi-codeword randomness simulatable non-malleable codes.]

### B. Proofs
#### B.1 Proof of Lemma 3.2
[Proof of Lemma 3.2, including detailed steps and reasoning.]

#### B.2 Proof of Lemma 3.5
[Proof of Lemma 3.5, including detailed steps and reasoning.]

#### B.3 Proof (Sketch) of Lemma 6.2
[Sketch of the proof of Lemma 6.2, including key insights and steps.]

---

This revised version aims to provide a clear, coherent, and professional presentation of the research, ensuring that all sections are well-structured and easy to follow.