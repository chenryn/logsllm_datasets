---
## Page 136
/18
Linux程序设计
下面这个user.c程序能够从口令字数据库里提取出用户的某些个人资料：
include 
include 
include 
include 
int sain()
uid_t uid;
:ad, pnssed aonu2s
gid_t gid;
uid = getuid():
gid = getgid();
pr'ntf(*Vser is s\n*, getlogin()):
printf(*User IDs: uid=td, gid=edn*, uid. gid);
pw = getpwuid(uid);
printf (*UID passwd entry:\n name=es, uid=ed, gidzed, home=es, shell=s`n*,
pw->pw_name.pw->pw_uid. pw>pw_gid,pw->pw_dir. pw>pw_shel1);
printf(*root passwd entry:\n*):
p = getpwman(*root*):
printf(*name=hs, uid=td, gid=ed, homexts, shell=es\n*,
exit(0):
pw->pw_name, pw>pw_uid, pw>pw_gid. pw>pw_dix, pw->pw_shel1):
1
它会给出如下所示的输出，在不同的UNIX版本里结果也会稍有差异：
S./user
User IDs:uid=500.gid=500
User io neil
:Aaua pasred gin
root passwd entry:
nane=nei1, uids500, gid=500,home=/usr/nei1, shel1x/bin/bash
name=root,uid=0,gid=0.home/root,shell=/bin/bash
操作注释：
这个程序先调用getuid函数获得当前用户的UID。再把这个UID用在getpwuid函数里取得口
令字文件里保存的详细资料。此外，我们还演示了通过在getpwnam函数里给出用户名“root”
的办法来获取用户资料。
如果读者手里有一份Linux的源代码，就能在id命令的源代码里看到使用gctuid函数的另外
个例子。
我们可以用getpwent函数扫描口令字文件中全部用户的资料。它的作用是取出连续的文件数
据项，下面是它的定义：
#include 
#include 
void endpwent(void)1
void setpuent(void)1
struct paaswd*getpwent(void);
getpwent函数依次返回每一位用户的个人资料数据项。如果到达文件尾，它会返回一个空指
加入jaVa编程群：524621833
---
## Page 137
第4章UNIX环境
61
针。如果已经扫描了足够的数据项，我们可以调用endpwent函数终止这一处理过程。setpwent函
数把口令字文件的读写指针重置到文件的开始，这样下一个getpwent调用将重新开始一次扫描。
这些函数的操作原理与我们在第3章里遇见的子目录扫描函数opendir、readdir和closedir等大同
小异。
与用户资料有关的其他函数
用户标识符和分组标识符（确实）还能被其他比较少用的函数获取：
finclude 
finclude 
uid_t geteuid(void);
gid_t getgid(void);
gid_t getegia（void))
nt
(pTa pru)pymos
int setgid(gid_t gid);
分组标识符和用户标识符的详细资料请参考UNIX系统的使用手册，但读者可能会发现自己
根本不需要对这些东西进行处理。
只有系统管理员才能调用setuid和setgid函数
4.6主机资料
既然一个程序可以查出与其使用者有关的资料，同样也可以查出一些与它正运行在其上的
计算机有关的细节。uname（1）命令就可以提供出这类的信息。uname（2）系统调用也能在C语言程
主机资料在许多方面都是很有用的。我们可以让某个程序在一个网络中根据它在其上运行
的计算机的名字（比如学生机或管理员机）面实现不同的预定行为。从软件许可证的角度考虑，
我们也许会限制某个程序只能运行在一台计算机上。所有这些都意味着我们需要一个能够确定
程序到底运行在哪台机器上的办法。
如果UNIx系统上安装了网络组件，我们就可以通过gethostname函数轻易地获得它的网络名，
这是它的定义：
#include 
int gethostnare( char *name, sixe_t namelen ）/
gethostname函数把机器的网络名写到字符串name里去。这个字符串的长度至少要有namelen
个字符。gethostname函数在成功时返回“0”，否则返回“-1”。
通过umame系统调用我们可以获取关于主机更进一步的详细资料：
#Include
int unane( struct utsnase*nane )/
uname函数把主机资料写到一个由name参数指向的结构里去。这个utsname结构的定义在
sys/utsname.h文件里，至少包括表4-4所示几个数据元素：
加入jaVa编程群：524621833
---
## Page 138
Linux程序设计
表4-4
utsname数据元素
说明
char sysname[1
操作系统的名称
土机的名字
char release[;
系统的发行级
char version[}
系统的版本号
cha!
machine []
硬件类型
uname的数在成功时返回一个非负整数；失败时返回“-1”并设置errmo变量指出错误类型
动手试试：主机资料
下面这个hostget.c程序能够提取出关于主机计算机的一些资料：
nclude 
tinclude 
include 
int main()
char computer[256]:
struct utsname uts;
if(gethostnane(computer. 255）=0√|unane[4uts]
long gethoatid( void )1
gethostid函数的作用是返回一个与主机计算机对应的独一无二的值。许可证管理者通过它来
保证软件只能运行在拥有合法许可证的机器上。在Sun公司出品的工作站上，它返回的是在制造
这台计算机时设置在非易失存储单元里的一个数字，它对系统硬件来说是独一无二的。
4.7日志记录功能
（log）文件写消息。这些消息可以是错误、警告，或者与系统状态有关的一般信息。举例来说，
这些日志消息通常被记录在某个系统文件里，那些系统文件义被保存在一个专用的子目录
里。它可能是/usr/adm子目录，也可能是/var/log子目录。对一个典型的Linux安装来说，文件
/var/log/messages容纳着所有的系统级消息；/var/log/maillog文件容纳着来自电子邮件系统的其
他日志消息：而/var/log/debug文件则容纳着调试信息。读者可以检查自己系统里在文件
/etc/syslog.conf中给出的系统配置情况。下面是一些消息示例：
Nov 21 17:27:00 ti1de kernel: F1oppy drive(s): fd0 is 1.44M
Nov 21 17:27:00 ti1de kernel:IP Protocois:ICMP. UDP.TCP
Nov 21 17:27:12 ti1de 1ogin: R00T L0GIN ON tty1
我们可以在这里看到系统记录下来的各种消息。前几条消息是由Linux内核在它自已开机引
导和检测已安装硬件时报告的。然后，电子邮件代理sendmail报告自己已经启动。最后，login程
序报告有一个超级用户登录上机。
注意查看日志消息需要有超级用户优先权。
有些UNIX系统不提供一个这样的具有可读性的消息文件，但为系统管理员准备了用来查看
系统事件数据库的工具。具体情况请读者查阅自己的系统文档。
虽然系统消息的格式和存储位置不尽相同，可产生这些消息的方法是标准的。UNIX技术规
范为方便各种程序生成日志消息准备了一个操作接口，它就是syslog函数：
#include 
void syalog（ int priority,const char *mesaage,arguaents...)
syslog函数的作用是把一条日志消息送到记日志工具那里去。每条消息都有一个priority参数，
它是危险系数和程序标识码的按位OR结果。危险系数用来调控如何对这条日志消息作出反应，
程序标识码日志着发出这条消息的是哪个程序。
定义自syslog.h文件中的程序标识码包括LOG_USER一—它指出该消息来自一个用户应用程
序（缺省值），以及LOG_LOCALO、LOG_LOCAL1～直到LOG_LOCAL7--它们的含义由本地的
系统管理员指定。
按危险系数递减题序排列的优先级见表4-5：
加入jaVva编程群：524621833
---
## Page 140
122
Linux程序设计
表4-5
优先级
说明
LOG_EMERG
紧急情况
I.OG_ALERT
高优先级故障，比如数据库前费等
LOG_CRIT
关键性错误，比如硬件操作失败等
LOG_ERR
错误
LOG_WARNING
警告
LOG_NOTICE
应该引起重视的特殊情况
LOG_TNFO
递知性消息
LOG_DEBUG
调试信息
根据系统的具体配置情况，LOG_EMERG消息可能会被广播给全体用户：LOG_ALERT消息
可能会邮寄给系统管理员：LOG_DEBUG消息可能会被忽略：而其他消息则记人某个消息文件
里。带日志功能的程序很容易编写。需要我们做的工作很简单，只要在希望创建一条日志消息
的时候调用一下syslog函数就可以了。
由syslog创建的消息分消息标题和消息内容两部分。标题部分包括产生该消息的程序标识码
以及日期和时间。消息内容部分则由syslog的message参数生成，它的作用类似于一个printf格式
字符申。syslog的其他参数要根据message字符串中printf风格的转换控制符来使用。转换控制符
“%m”可以用来插入与错误代码变量errno的当前值相对应的出错消息字符串，在记录出错消息
的时候这很有用。
动手试试：syslog函数
在这个程序里，我们尝试打开一个并不存在的文件：
#include 
#include 
int nain()
.3718
(x,ozauou,)do=
if(!f)
Syslog(LOG_ERR|LOC_USER,*oops - a\n*);
exit(0);
当我们编译并运行这个syslog.c程序的时候，将看不到任何输出。但在/var/log/messages文件
的尾部将会有这样一条消息：
Nov 21 17:56:00 ti1de syslog: oops - No such file or diretory
操作注释：
在这个程序里，我们试图打开一个并不存在的文件。在文件打开操作失败的时候，我们调
用syslog把这一事件记录到系统日志中。
注意：从日志消息里看不出调用日志功能的是哪个程序，它只记载了有人调用syslog记录-一
加入jaVva编程群：524621833
---
## Page 141
第4章UNIX环境
123
条消息这样一个事实。转换控制符“%m”被替换为对该错误的一个说明，在我们的例子里就是
“文件没有找到”。这比只给出错误编号“17”要明白多了！
日志记录功能的配置
在syslog.h文件里还定义了一些能够改变日志记录功能行为的其他函数。其中包括：
#include 
voldcloselog(void);
int setlogmask（int maskpri);
vold openlog(const char *ident，int logopt, int facility)
调用openlog函数可以改变我们日志消息的内容形式。它允许我们设置一个字符串ident，它
将加在我们的日志消息的前面。我们可以用它来指出哪个程序正在创建这条消息。facility参数
记录着一个可以在此后的syslog调用中使用的程序标识码，它的缺省值是LOG_USER。logopt参
数对此后的syslog调用的行为进行配置。它是零个或多个表4-6中的参数按位OR的结果：
表4-6
logopt参数