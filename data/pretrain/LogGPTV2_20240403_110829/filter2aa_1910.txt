Consumer 
Automotive 
Technology 
Retail 
Life Sciences & Healthcare 
Energy & Chemicals 
Uroburos 
Paul Rascagneres 
Senior Threat Researcher 
GDATA SecurityLabs 
Page 
Uroburos | HITCON | August 2014 
Uroburos is a rookit revealed to the public by G DATA in February 2014. The purpose of the 
rootkit is to maintain remote access to the infected machine and steal sensitive data. 
Here are the features of this rootkit: 
  - use of function hooking, to hide its activities 
  - Deep Packet Inspection (DPI), to monitor the network 
  - bypass kernel protection, to load and execute the driver 
  - use of virtual file system, to store configuration and data 
  - … 
2 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Uroburos’  name 
Uroburos is a direct reference to the Greek word Ouroboros (Οὐροβόρος).  The  Ouroboros is 
an ancient symbol depicting a serpent or dragon eating its own tail. 
3 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Rootkit composition 
The rootkit is composed of two files: 
  - .sys file (the Microsoft Windows driver 32/64 bits) 
  - .dat file (the encrypted virtual file system) 
4 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
The driver 
The loaded driver: 
5 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
The driver 
The loaded driver: 
6 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
The driver 
The loaded driver: 
7 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Hooking 
To hide its activity and its presence, the driver sets several hooks by modifying the 
beginning of the function with an interrupt (0x3C): 
kd> ? IoCreateDevice 
Evaluate expression: -2103684120 = 829c53e8 
kd> u 829c53e8 
nt!IoCreateDevice: 
829c53e8 6a01            push    1 
829c53ea cdc3            int     0C3h 
829c53ec ec              in      al,dx 
829c53ed 83e4f8          and     esp,0FFFFFFF8h 
829c53f0 81ec94000000    sub     esp,94h 
829c53f6 a14cda9282      mov     eax,dword ptr [nt!__security_cookie (8292da4c)] 
829c53fb 33c4            xor     eax,esp 
829c53fd 89842490000000  mov     dword ptr [esp+90h],eax 
8 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Hooking 
The Interrupt Descriptor Table (idt): 
kd> !idt  
Dumping IDT: 80b95400 
3194895000000030: 
82c27ca4 hal!Halp8254ClockInterrupt (KINTERRUPT …) 
3194895000000031: 
8486b058 i8042prt!I8042KeyboardInterruptService (KINTERRUPT 
3194895000000038: 
82c18c6c hal!HalpRtcProfileInterrupt (KINTERRUPT …) 
3194895000000039: 
8486bcd8 ACPI!ACPIInterruptServiceRoutine (KINTERRUPT …) 
319489500000003a: 
85afd7d8 ndis!ndisMiniportIsr (KINTERRUPT 85afd780) 
319489500000003b: 
8486b558 ataport!IdePortInterrupt (KINTERRUPT 8486b500) 
319489500000003c: 
85afdcd8 i8042prt!I8042MouseInterruptService (KINTERRUPT…)   
319489500000003e: 
8486ba58 ataport!IdePortInterrupt (KINTERRUPT 8486ba00) 
319489500000003f: 
8486b7d8 ataport!IdePortInterrupt (KINTERRUPT 8486b780) 
31948950000000c3: 
859e84f0  
9 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Hooking 
Code available at 0x859e84f0: 
10 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Hooking 
Python script to list the hooks: 
11 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Hooking 
The list of the ntoskrnl.exe hooked functions (the hooked feature): 
nt!NtCreateKey   
(registry) 
nt!NtQueryInformationProcess (process) 
nt!NtQuerySystemInformation  (system information) 
nt!ObOpenObjectByName  
(driver) 
nt!NtClose  
(file/process/event/…) 
nt!IoCreateDevice  
(driver) 
nt!NtEnumerateKey  
(registry) 
nt!NtShutdownSystem  
(system) 
nt!NtTerminateProcess  
(process) 
nt!IofCallDriver  
(driver) 
nt!NtQueryKey  
(registry) 
nt!NtCreateUserProcess  
(process) 
nt!NtCreateThread  
(process) 
nt!NtSaveKey  
(registry) 
nt!NtReadFile  
(file system) 
12 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Windows Filtering Platform (WFP)  
The WFP is a set of API and system services which provides a platform for creating network 
filtering applications. In our case, the rootkit uses this technology to perform Deep Packet 
Inspection (DPI) and modifications of the network flow. The purpose of this device is to 
intercept relevant data as soon as a connection to the Command & Control server or other 
local infected machines used as relay is established and to receive commands.  
13 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Windows Filtering Platform (WFP)  
14 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Windows Filtering Platform (WFP)  
The filter parses HTTP and SMTP traffic (other protocols can easily be supported).  
To identify the Uroburos traffic, the rootkit decrypts the network flow and looks for data 
starting with: 
- 0xDEADBEEF 
- 0xC001BA5E 
The intercepted data is forwarded to the user land by using named pipe. 
15 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Virtual file systems 
Uroburos uses two virtual file systems: FAT32 & NTFS. During our analysis, the first one 
was never used (maybe a legacy mode). The second one is the decrypted .dat file (CAST-
128 encryption). 
The volume can be accessed by: \\.\Hd1\ 
The file system contains a queue file, log files, additional tools (reconnaissance tools)… 
16 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Virtual file systems 
17 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Virtual file systems 
18 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Virtual file systems 
19 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Queue file 
On the virtual file system we have a particularly interesting file: \\.\Hd1\queue 
This file contains the rootkit configuration, encryption key, addition dll, ex-filtrated  data… 
These dll are injected in user land by the rootkit (for example in the browsers to steal 
sensitive information). 
20 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
User land injected libraries 
The injected libraries are used to communicate to the Command & Control servers, steal 
information…  These  file  are  used  to  create  a  kind  of  “proxy”  between  the  kernel  land  and  the  
user land. The libraries are: inj_snake_Win32.dll and inj_services_Win32.dll. 
From the user land point of view, the protocol used for the C&C communication can be: 
- HTTP 
- SMTP 
- ICMP 
- … 
21 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Bypass of the kernel protection 
The first bypassed protection is the Kernel Patch Protection (aka PatchGuard). 
This protection checks the integrity of the Windows kernel to make sure that no critical parts 
are modified. If a modification is detected, the KeBugCheckEx() (with the code 0x109 
CRITICAL_STRUCTURE_CORRUPTION) is executed and the system is shutdown with a blue 
screen. 
The rootkit bypasses this protection, the rootkit hooks the KeBugCheckEx() function to 
avoid handling the code 0x109. 
22 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Bypass of the kernel protection 
The second bypassed protection is the Driver Signature Enforcement. 
To avoid loading malicious drivers, Microsoft created this technology for its 64-bit versions of 
Windows Vista and later versions. To load a driver, the .sys file must be signed by a 
legitimate publisher. The flag to identify whether the protection is enable or not is 
g_CiEnabled . 
The  rootkit’s  driver  is  not  signed  but  it  still  loaded. 
23 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Bypass of the kernel protection 
To bypass the Signature Driver Enforcement, the attackers use a legitimate, signed driver 
(in our case VirtualBox driver) and exploit a vulnerability to switch 
arbitrary memory address to 0. In our case, the address of the flag 
g_CiEnabled to switch off the protection. The used CVE is  
CVE-2008-3431. The VirtualBox driver is presently expired. 
Before:  kd> dq nt!g_cienabled -> fffff800`02e45eb8  00000001 
After:     kd> dq nt!g_cienabled -> fffff800`02e45eb8  00000000 
24 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Bypass of the kernel protection 
The Signature Driver Enforcement bypass step by step: 
- the malware opens the VBoxDrv symbolic link; 
- it loads ntoskrnl.exe; 
- it locates g_CiEnabled; 
- it uses DeviceIoControl() to switch arbitrary address to 0 
For example:  
DeviceIoControl(VBoxDrv, SUP_IOCTL_FAST_DO_NOP, g_CiEnabledAddr, 0, g_CiEnabledAddr, 0, &cb, NULL) 
25 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Bypass of the kernel protection 
The VirtualBox driver is presently expired. 
What  about  the  signature’s  revocation  of  legacy  software  or  vulnerable  software? 
26 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Other exploits 
In the dropper, we can find several resources sections. These resources contain exploits to 
obtain administrator privileges (to be able to install and load the driver).  
For example MS09-025 or MS10-015. 
27 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Command & Controls 
The attackers seem to use two kinds of C&C: 
- dedicated servers 
- legitimate compromised web sites (water holing) (TYPO3 CMS) 
Thanks to the use of the WFP mechanism, we can imagine infected machines without any 
C&C hardcoded in the malware. The filter simply waits for the network pattern. The fact that 
the malware uses local, infected systems as relay adds complexity, too. 
For incident response point of view, the identification and containment can become a 
nightmare… 
28 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Command & Controls 
Source: Kaspersky 
29 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Infection vectors 
•Spear phishing e-mails with Adobe PDF exploits (CVE-2013-3346 + CVE-2013-5065) 
•Social  engineering  to  trick  the  user  into  running  malware  installers  with  ".SCR"  extension,  
sometimes packed with RAR 
•Watering  hole  attacks  using  Java  exploits  (CVE-2012-1723), Flash exploits (unknown) or 
Internet Explorer 6,7,8 exploits (unknown) 
•Watering  hole  attacks  that  rely  on  social  engineering  to  trick  the  user  into  running  fake  
"Flash Player" malware installers 
Source: Kaspersky 
30 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Targets 
In February 2014, we mentioned in our report: “Due  to the complexity of the Uroburos 
rootkit, we estimate that it was designed to target government institutions, research 
institutions or companies dealing with sensitive information as well as similar high-profile 
targets.“ 
31 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Targets 
In May 2014: 
32 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Targets 
In August 2014: 
Government (Ministry of interior (EU country), Ministry of trade and commerce (EU country), 
Ministry of foreign/external affairs (Asian country, EU country), Intelligence (Middle East, EU 
Country)), Embassies, Military (EU country) 
Education 
Research (Middle East) 
Pharmaceutical companies 
Source: Kaspersky 
33 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Attribution 
During our analysis we found some technical links connecting Uroburos to Agent.Btz: 
-
Encryption key 
-
Usage of the same file name 
-
Check whether Agent.Btz is installed on the system 
-
Use of Russian language and user names (vlad, gilg, urik…) 
34 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Attribution 
In  an  article  published  by  Reuters,  in  2011,  the  journalist  mentioned  that  “U.S.  government  
strongly suspects that the original attack was crafted by Russian Intelligence.” 
With the last elements presented by Belgian journalists, concerning the attack against the 
Ministry of Foreign Affairs, the Russian roots are further confirmed. 
35 
Uroburos rootkit 
Page 
Uroburos | HITCON | August 2014 
Thank you for your attention! 
Questions? 
36 
Uroburos rootkit