Vendor
Version
started
shell:info
1.8.025
org.apache.felix.framework - 4.0.3
/Users/kira/apache-karaf-2.3.4
Oracle Corporation
/Users/kira/apache-karaf-2.3.4
37
2.3.4
3minutes
46
466,432 kbytes
28,396 kbytes
27
7.587 seconds
125,952kbytes
0
3,811
Apache Karaf 概览
---
## Page 202
Command (2.3.4)
令如下：
确认这些OSGi包是否都正常启动了，这时我们需要用到OSGi 模块里面的list功能，命
自动化运维软件设计实战
[68]
[63]
[62]
[61]
[60]
START
执行完后我们可以看到插件的状态列表：
当OSGi包打包完成并且部署到了ApacheKaraf的deploy目录下面之后，我们需要
7.3.2
可以看到shellinfo的方法为我们提供了以下几大块的信息：
[73]
[72]
[71]
[70】
[69]
[67]
[66]
[65]
[64]
[58]
·Karaf的基础信息，这部分信息在后续开发中可以帮助我们定位Karaf 都装到什么
ID
操作系统信息，
JVM的基础信息，包括使用的JDK版本、当前使用的线程数、
数量；
osgi:list
位置去了；
[Starting]
Processors
Architecture
Name
OSGi模块
[Resolved]
[Active]
[Active]
[Active]
State
LEVEL 100,List Threshold: 50
[Resolved]
[Active]
[Resolved
[Resolved]
[Active]
[Resolved]
[Active]
[Resolved]
Resolved
[Resolved]
：包括系统的名称、CPU的核心数以及CPU的架构。
[Created]
[Failure]
Blueprint
Mac os x version 10.10.2
[08]
[80]
Level
[80]
[80]
x8664
[80]
[80]
[80]
[80]
[80]
[08]
[08]
[80]
[80]
[80]
[80]
Name
Snc pluginstatus server (1.0.o)
snc download agent (2.0)
osgi-1og4j-bundle(2.0)
snc_upload_agent(2.0)
Snc_result_server (2.0.0)
osgi-db-bundle(2.0)
snc download server(2.0)
snc_topsql_server (2.0.0)
osgi-cron4j-bundle(2.0)
snc_session tosql_server
snc_playbook_server(2.0)
snc_topsql_agent(2.0.0)
osgi-activemqall-bundle (2.0)
Apache Karaf ::Demos ::Extend Console
mvn:snc/ shellextra/0.0.1- SNAPSHOT
当前使用的内存
(2.0.0)
一
---
## Page 203
snc_topsql_server [66].
org.apache.felix.fileinstall
fileinstalll.?
directory)
[异常】：[TOPSQL服务端_2.O】：[SERVER_INIT_PROPERTIES]：[服务端初始化参数异
Log:Display 了。
模块就派上用场了。
们检查到存在没有Active的插件包，那我们就需要检查插件包的出错日志，这个时候Log
启动的，需要我们进一步查看为什么没有启动成功。
ork.controller.MessageController 1951 75- snc_framework_common-2.0.01
最简单的做法是在控制台上把所有的日志信息都打印出来，这个时候我们就可以使用
在控制台上打印所有的日志：
在完成插件包的部署之后，我们会先运行osgi:list，检查插件包是否正常启动。假设我
7.3.3
State列表示Active的插件包启动是正常的，而所有不是Active的插件包都是没有正常
[84]
[83]
[82]
[81]
[80]
[79]
[78]
[77]
[76]
[75]
[74]
org.osgi.framework.BundleException: Activator start error in bundle
2015-02-17
LOG模块
atorg.apache.felix.framework.Felix.activateBundle(Felix.java:202
[Resolved]
Resolved
[Resolved]
Resolved
[Resolved]
[Active]
[Resolved]
[Resolved]
[Resolved]
[Active]
[Active]
20:01:57,943
3.2.8
80]
][80]
][80]
][80]
][80]
][80]
][80]
1[80]
][80]
][80]
[80]
mqServer.properties"
WARN
snc_command_agent (2.0)
snc_statuscenter_server
snc_session_topsql_agent(2.0.0)
snc_structure_agent (2.0)
snc_inspection_server (2.0)
osgi-dom4jAndPoi(1.0.0)
snc_sql_agent.(2.0)
snc_schedule_server
snc_md5_agent (2.0)
snc_framework_common (2.0)
osgi-gson-bundle(2.0)
Error
while
raf-2.3.4/dep1oy
（No
starting
Apache Karaf 概览
such
(2.0)
(2.0)
bundle:
file
6
Or
---
## Page 204
Karaf容器，如图7.10所示。
致的，这时我们就可以有针对性地进行程序的调整了。
cureAction.java:645)[org.apache.felix.framework-4.0.3.jar:]
opsql_server:2.0.0]
ork_common:2.o]
onnectionFactory.java:154) [61:osgi-activemqal1-bundle:2.0]
MQConnectionFactory.java:175) [61:osgi-activemqal1-bundle:2.0]
ectoryWatcher.java:308)[6:org.apache.felix.fileinstal1:3.2.8]
(DirectoryWatcher.java:524)[6:org.apache.felix.fileinstall:3.2.8]
yWatcher.java:1235)[6:org.apache.felix.fileinstal1:3.2.8]
7)[org.apache.felix.framework-4.0.3.jar:]
org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundles(Director
Watcher.java:1263)[6:org.apache.felix.fileinstall:3.2.8]
org.apache.felix.fileinstall.internal.Directorywatcher.startBundle(Directory
4)[org.apache.felix.framework-4.0.3.jar:]
org.apache.felix.framework-4.0.3.jar:]
7) [org.apache.felix.framework-4.0.3.jar:]
iveMQconnectionFactory.java:375)[61:osgi-activemgal1-bundle:2.0]
自动化运维软件设计实战
ApacheKaraf内嵌了 SSHD 的服务，我们可以通过一个SSH容器跳到另外一个Apache
7.3.4
通过查看日志信息，我们可以看到插件包没启动成功的原因是由于参数初始化异常导
atorg.apache.felix.framework.Felix.activateBundle(Felix.java:197
atorg.apache.felix.framework.util.SecureAction.startActivator(Se
atsnc_topsql_server.Activator.start(Activator.java:105) [66:snc_
atorg.apache.activemq.ActiveMQConnectionFactory.(ActiveMQo
atorg.apache.activemq.ActiveMQConnectionFactory.setBrokeruRL(Act
atjava.net.URI$Parser.parse(URI.java:3042)[:1.8.0 25]
atorg.apache.felix.fileinstall.internal.DirectoryWatcher.run(Dir
atorg.apache.felix.fileinstall.internal.DirectoryWatcher.process
atorg.apache.felix.framework.BundleImpl.start(BundleImpl.java:94
atorg.apache.activemq.ActiveMQConnectionFactory.createURI(Active
atorg.apache.felix.framework.Felix.startBundle(Felix.java:1895)
SSHD模块
atjava.net.URI.(URI.java:588)[:1.8.0_25]
at
---
## Page 205
的是Apache Karaf 的。
们仅仅是在ApacheKaraf的容器内部，因为Windows本身没有开启 SSH服务，我们使用
这台Windows主机上进行操作了。这个时候，我们并没有进入到Windows的系统层面，我
份文件。
Karaf服务，接着使用SSH模块跳转到Windows主机上，移除Karaf的Deploy目录上的一
台设备上进行插件包的重新加载，再或者是移除插件包时，我们就可以用到这个功能了。
机部署到了许多不同的设备上，当需要手工检查某个插件包是否出现异常，或者要跳转到某
下shell:info:
进入到Karaf容器内部之后，前面讲到过的 Shell模块在这时就发挥作用了。我们先执
2.使用Shell模块
交互式的提示会要求输入密码，这时输入密码karaf，然后就可以跳转到10.211.55.65
首先要跳转到Windows主机，执行如下命令：
1.跳转到Windows主机
下面我们先在UNIX系统上开启ApacheKaraf，然后再在Windows系统上开启Apache
也可以通过Karaf的SSH客户端跳到一个开启了SSH服务的主机上，由于我们的客户
Operating system
PI:EMAIL
主机A
图7.10Karaf内置的SSHD模块
SSH
主机B
ARache
章
Apache Karaf概览
---
## Page 206
只是标准输出的重定向，在最新的版本里已经改进了，可以配置标准输出到/dev/null,
种日志对Karaf进行观察。
7.4Karaf的日志
Karaf到底安装到了哪个目录，shell:info为我们提供了非常有用的信息。
到Deploy目录下的osgi-db-bundle_2.0.0.jar包移除。我们首先要做的事情是确定Apache
自动化运维软件设计实战
某些功能异常而导致Karaf插件包无法正常启动时，这种做法还是非常实用的。
样操作还是不方便，所以我们后续会增加文件下发的功能，实现“自己更新自己”。当由于
这样一系列的操作，我们就可以完成移除一个坏掉的插件包的任务了，但是每台主机都这
Downloads\apache-karaf-2.4.1\deploy\osgi-db-bundle_2.0.0.jar。
karaf-2.4.1目录下，根据我们已知的karaf目录结构，我们需要移除的文件是C：\Users\kira\
使用Log模块可以监控Karaf的日志输出，我们还可以通过监控Karaf产生的其他几
需要注意的是，Windows 操作系统的路径需要加转义符号，不然会识别不出来。通过
这时我们再次调用Shell模块完成移除这个动作：
通过 shell:info，我们知道Apache Karaf 安装在了C:Users\kira\Downloads\ apache
7.4.1
可以看到我们的确进入到启动ApacheKaraf的Windows 内部了，接着我们需要把部署
C:\\Users\\kira\\Downloads\Vapache-karaf-2.4.1\\deploy\\-bundle_2.0.0.jar
shell:execcmd /c del /s
OSGi Framework
Karaf base
Karaf home
Karaf version
Karaf
Processors
Architecture
Name
Karaf.Out
org.apache.felix.framework-4.4.1
C:\Users\kira\Downloads\apache-karaf-2.4.1
C:\Users\kira\Downloads\apache-karaf-2.4.1
2.4.1
Windows 7 version 6.1
amd64
---
## Page 207
受之后加载的配置管理。
这是因为这个文件是日志管理组件（karaflogging service）启动之前的日志输出，当然不能
（etc/org.ops4j.pax.logging.cfg）之前就存在了，而且之后不管如何配置loglevel，它都存在。
赖包，导致ApacheKaraf不断地输出错误信息，于是就出现了这样一个30GB大小的日志文件。
在这里。因为这份karaf.out的文件是重定向生成的，由于我们的客户端没有导入一个必须的依
文件的大小居然有30GB，这可把我们吓坏了，赶紧进行问题的排查，最终定位到问题就出现
都正常启动了。一周以后，维护团队开始抱怨我们的运维客户端产生了很大的日志文件，日志
上把插件包批量地下发了下去，下发下去之后没有进行插件包状态的检查，大意地以为插件包
样的问题，由于开发了一个新的插件包，需要更新到所有的客户机上，所以我们从管理服务器
长期没有人发现，就会出现这一份karaf.out的日志文件容量暴增的情况。笔者就曾经碰到过这
7.11所示。
动，又会再次出错，而每次出错的日志都会在这份重定向生成的日志文件中记录，如图
log4j来管理。OSGi的程序有个特点，就是一旦出错，就会重新启动，但是一旦重新启
置，并且通过配置 Syslog-ng 来实现日志的rotation，或者手写一个 Java 小程序，通过
如果是之前的版本，打开bin/start文件，就会看到exec“$KARAF_HOME”/bin/karaf
{KARAF_BASE}/data/log/karaf.log这个日志在配置标准的Karaf日志文件
7.4.2
这样就会造成一个烦人的问题，
-Karaf.log
“$KARAF_DATA/karaf.out”2>&1&。也可以手动更改重定向的位
7.11由于启动出错导致不断写日志
写日志
启动
一旦某个插件包由于依赖包的导入缺失而导致出错，并且
出错
Apache-Karaf概览
95
---
## Page 208
就不能用了，同时也得加上logback依赖的包。
用使用的是logback，怎么办？
中，
加一条：
件用的是默认的 log appender.out，所以只要覆盖配置就行了。例如，更改输出位置，那就
ovy/1.6.32=8
自动化运维软件设计实战
/2.2.35=8
1r/2.7.75=8
ler/2.6.1=8
mvn\:org.apache.servicemix.bundles/org.apache.servicemix.bundles.gro
第一要改的是日志服务（logging service），既然要用logback的服务，默认的日志服务
需要重新定位这份日志文件的输出可以修改etc/java.utillogging.properties，其实这个文
修改配置文件etc/org.ops4j.pax.logging.cfg：
修改 etc/startup.properties:
根据Karaf的 guide，可以参照log4j 的配置信息来配置日志。问题是现在有一部分应
7.4.3
我们很少会使用这份日志文件。
karaf.log 这份文件输出的信息太少，对我们的排错没有太大的作用，所以在实际工作
mvn\:org.apache.servicemix.bundles/org.apache.servicemix.bundles.ant
org.ops4j.pax.logging.logback.config.file=s(karaf.base)/config/logback.xml
mvn\:org.ops4j.pax.1ogging/pax-1ogging-1ogback/1.7.2=8
mvn\:org.apache.servicemix.bundles/org.apache.servicemix.bundles.asm
mvn:org.codehaus.janino/com.springsource.org.codehaus.commons.compi
mvn\:org.codehaus.groovy/groovy-all/2.2.1=8
mvn\:org.ops4j.pax.logging/pax-logging-service/1.7.2=8
log4j.appender.out.file=logs/karaf.log
#end for logback
#added for logback
Application log4j 日志
---
## Page 209
admin命令创建的。
例的目录中。
实例不会把整个Karaf都复制，它只是把Karaf的配置文件以及bin目录的信息复制到子实
7.5
控制台的admin命令可以让我们对子实例进行创建和管理，每个新的子实例都是通过
然后我们启动Karaf容器，使用osgi:list 命令查看bundle包是否正常启动了：
Karaf可以以多实例的模式运行，
可以看到所有的Bundle包都是Active状态，说明所有的Bundle都正常启动了。
在开始创建子实例之前，我们先在deploy下放置一些OSGi的Bundle包，如图7.12所示。
7.5.1使用Karaf子实例
1.准备环境
Karaf子实例
START LEVEL 100,List Threshold:50