的中间文件。
9.4.4 Windows和苹果的IDE编译器
Windows和Macintosh系统使用的集成开发环境中的编译器是面向项目
的。项目（project）描述的是特定程序使用的资源。资源包括源代码文件。
这种IDE中的编译器要创建项目来运行单文件程序。对于多文件程序，要使
用相应的菜单命令，把源代码文件加入一个项目中。要确保所有的源代码文
件都在项目列表中列出。许多IDE都不用在项目列表中列出头文件（即扩展
名为.h的文件），因为项目只管理使用的源代码文件，源代码文件中的
#include指令管理该文件中使用的头文件。但是，Xcode要在项目中添加头文
件。
9.4.5 使用头文件
如果把main()放在第1个文件中，把函数定义放在第2个文件中，那么第
1个文件仍然要使用函数原型。把函数原型放在头文件中，就不用在每次使
用函数文件时都写出函数的原型。C 
标准库就是这样做的，例如，把I/O函
数原型放在stdio.h中，把数学函数原型放在math.h中。你也可以这样用自定
义的函数文件。
另外，程序中经常用C预处理器定义符号常量。这种定义只储存了那些
607
包含#define指令的文件。如果把程序的一个函数放进一个独立的文件中，你
也可以使用#define指令访问每个文件。最直接的方法是在每个文件中再次输
入指令，但是这个方法既耗时又容易出错。另外，还会有维护的问题：如果
修改了#define 
定义的值，就必须在每个文件中修改。更好的做法是，把
#define 指令放进头文件，然后在每个源文件中使用#include指令包含该文件
即可。
总之，把函数原型和已定义的字符常量放在头文件中是一个良好的编程
习惯。我们考虑一个例子：假设要管理 4 家酒店的客房服务，每家酒店的房
价不同，但是每家酒店所有房间的房价相同。对于预订住宿多天的客户，第
2天的房费是第1天的95%，第3天是第2天的95%，以此类推（暂不考虑这种
策略的经济效益）。设计一个程序让用户指定酒店和入住天数，然后计算并
显示总费用。同时，程序要实现一份菜单，允许用户反复输入数据，除非用
户选择退出。
程序清单9.9、程序清单9.10和程序清单9.11演示了如何编写这样的程
序。第1个程序清单包含main()函数，提供整个程序的组织结构。第 2 个程
序清单包含支持的函数，我们假设这些函数在独立的文件中。最后，程序清
单9.11列出了一个头文件，包含了该程序所有源文件中使用的自定义符号常
量和函数原型。前面介绍过，在UNIX和DOS环境中，#include "hotels.h"指令
中的双引号表明被包含的文件位于当前目录中（通常是包含源代码的目
录）。如果使用IDE，需要知道如何把头文件合并成一个项目。
程序清单9.9 usehotel.c控制模块
/* usehotel.c -- 房间费率程序 */
/* 与程序清单9.10一起编译   */
#include 
#include "hotel.h" /* 定义符号常量，声明函数 */
608
int main(void)
{
int nights;
double hotel_rate;
int code;
while ((code = menu()) != QUIT)
{
switch (code)
{
case 1:  hotel_rate = HOTEL1;
break;
case 2:  hotel_rate = HOTEL2;
break;
case 3:  hotel_rate = HOTEL3;
break;
case 4:  hotel_rate = HOTEL4;
break;
default: hotel_rate = 0.0;
printf("Oops!\n");
609
break;
}
nights = getnights();
showprice(hotel_rate, nights);
}
printf("Thank you and goodbye.\n");
return 0;
}
程序清单9.10 hotel.c函数支持模块
/* hotel.c -- 酒店管理函数 */
#include 
#include "hotel.h"
int menu(void)
{
int code, status;
printf("\n%s%s\n", STARS, STARS);
printf("Enter the number of the desired hotel:\n");
printf("1) Fairfield Arms        2) Hotel Olympic\n");
printf("3) Chertworthy Plaza     4) The Stockton\n");
610
printf("5) quit\n");
printf("%s%s\n", STARS, STARS);
while ((status = scanf("%d", &code)) != 1 ||
(code  5))
{
if (status != 1)
scanf("%*s"); // 处理非整数输入
printf("Enter an integer from 1 to 5, please.\n");
}
return code;
}
int getnights(void)
{
int nights;
printf("How many nights are needed? ");
while (scanf("%d", &nights) != 1)
{
scanf("%*s");   // 处理非整数输入
printf("Please enter an integer, such as 2.\n");
611
}
return nights;
}
void showprice(double rate, int nights)
{
int n;
double total = 0.0;
double factor = 1.0;
for (n = 1; n  5))
以上代码段利用了C语言的两个规则：从左往右对逻辑表达式求值；一
旦求值结果为假，立即停止求值。在该例中，只有在scanf()成功读入一个整
数值后，才会检查code的值。
用不同的函数处理不同的任务时应检查数据的有效性。当然，首次编写
menu()或getnights()函数时可以暂不添加这一功能，只写一个简单的scanf()即
可。待基本版本运行正常后，再逐步改善各模块。
615
9.5 查找地址：&运算符
指针（pointer）是 C 语言最重要的（有时也是最复杂的）概念之一，用
于储存变量的地址。前面使用的scanf()函数中就使用地址作为参数。概括地
说，如果主调函数不使用return返回的值，则必须通过地址才能修改主调函
数中的值。接下来，我们将介绍带地址参数的函数。首先介绍一元&运算符
的用法。
一元&运算符给出变量的存储地址。如果pooh是变量名，那么&pooh是
变量的地址。可以把地址看作是变量在内存中的位置。假设有下面的语句：
pooh = 24;
假设pooh的存储地址是0B76（PC地址通常用十六进制形式表示）。那
么，下面的语句：
printf("%d %p\n", pooh, &pooh);
将输出如下内容（%p是输出地址的转换说明）：
24 0B76
程序清单9.12中使用了这个运算符查看不同函数中的同名变量分别储存
在什么位置。
程序清单9.12 loccheck.c程序
/* loccheck.c -- 查看变量被储存在何处 */
#include 
void mikado(int);       /* 函数原型 */
int main(void)
616
{
int pooh = 2, bah = 5; /* main()的局部变量 */
printf("In main(), pooh = %d and &pooh = %p\n", pooh, 
&pooh);
printf("In main(), bah = %d and &bah = %p\n", bah, &bah);
mikado(pooh);
return 0;
}
void mikado(int bah)      /* 定义函数 */
{
int pooh = 10;       /* mikado()的局部变量 */
printf("In mikado(), pooh = %d and &pooh = %p\n", pooh, 
&pooh);
printf("In mikado(), bah = %d and &bah = %p\n",  
bah, 
&bah);
}
程序清单9.12中使用ANSI 
C的%p格式打印地址。我们的系统输出如
下：
In main(), pooh = 2 and &pooh = 0x7fff5fbff8e8
In main(), bah = 5 and &bah = 0x7fff5fbff8e4
617
In mikado(), pooh = 10 and &pooh = 0x7fff5fbff8b8
In mikado(), bah = 2 and &bah = 0x7fff5fbff8bc
实现不同，%p表示地址的方式也不同。然而，许多实现都如本例所
示，以十六进制显示地址。顺带一提，每个十六进制数对应4位，该例显示
12个十六进制数，对应48位地址。
该例的输出说明了什么？首先，两个pooh的地址不同，两个bah的地址
也不同。因此，和前面介绍的一样，计算机把它们看成4个独立的变量。其
次，函数调用mikado(pooh)把实际参数（main()中的pooh）的值（2）传递给
形式参数（mikado()中的bah）。注意，这种传递只传递了值。涉及的两个变
量（main()中的pooh和mikado()中的bah）并未改变。
我们强调第2 
点，是因为这并不是在所有语言中都成立。例如，在
FORTRAN中，子例程会影响主调例程的原始变量。子例程的变量名可能与
原始变量不同，但是它们的地址相同。但是，在 C语言中不是这样。每个C
函数都有自己的变量。这样做更可取，因为这样做可以防止原始变量被被调
函数中的副作用意外修改。然而，正如下节所述，这也带来了一些麻烦。
618
9.6 更改主调函数中的变量
有时需要在一个函数中更改其他函数的变量。例如，普通的排序任务中
交换两个变量的值。假设要交换两个变量x和y的值。简单的思路是：
x = y;
y = x;
这完全不起作用，因为执行到第2行时，x的原始值已经被y的原始值替
换了。因此，要多写一行代码，储存x的原始值：
temp = x;
x = y;
y = temp;
上面这 3 行代码便可实现交换值的功能，可以编写成一个函数并构造一
个驱动程序来测试。在程序清单9.13中，为清楚地表明变量属于哪个函数，
在main()中使用变量x和y，在intercharge()中使用u和v。
程序清单9.13 swap1.c程序
/* swap1.c -- 第1个版本的交换函数 */
#include 
void interchange(int u, int v); /* 声明函数 */