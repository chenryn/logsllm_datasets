the system (i.e., attestation). For example, a bank server
could leverage IMA to attest its integrity to its users, en-
abling the users to bootstrap trust before operating over
their accounts. In addition to attestation, IMA can also
enforce the integrity of a system by specifying which
ﬁles could be loaded. IMA does so by appraising ﬁles
against ”good” values (e.g., checksums or signatures)
speciﬁed by system owners.
In the above example, a
bank would beneﬁt from IMA to maintain a tightly con-
trolled environment of its servers and enforce that only
approved code could be run.
USENIX Association
27th USENIX Security Symposium    1425
Apache running in the containerDocker Daemonclone( CLONE_NEWIPC | CLONE_NEWNET | CLONE_NEWPID | CLONE_NEWUTS | CLONE_NEWNEWNS )hostname setuprootfs setuppivot rootmount /dev, /proc, /sysIP, ﬁrewall setupexecve( Apache2 )Daemon continue running in the native system3 Motivation
In this section, we discuss the need for containers to have
autonomous security control, and the fundamental chal-
lenges of achieving it.
3.1 Autonomous Security Control
As more critical applications are deployed in containers,
container owners want to utilize kernel security frame-
works to govern integrity measurement, code execution,
mandatory access control, etc.
to prevent application
speciﬁc security problems. Ideally, such security control
should be autonomous, similar to when their applications
were deployed on VMs or hosts.
Unfortunately, it is difﬁcult to achieve the autonomy
by directly using existing kernel security frameworks. As
an example, consider a containerized bank service de-
ployed on a public cloud. The service owner wants to
control the integrity of the service by ensuring that crit-
ical service components such as service code, libraries
and conﬁgurations are not modiﬁed. However, she can-
not use IMA to do so. First, the bank service could not
attest its integrity using IMA. The reason is that IMA,
as an in-kernel security mechanism, tracks the integrity
of the entire system. Consequently, measurements from
different containers ( and the host system) are mixed to-
gether and cannot be accessed independently. Second,
the bank service cannot control what code or data can
be loaded into the container. Since IMA only allows a
single policy maker (in this case, the cloud vendor that
controls the host system), individual containers cannot
decide what ﬁles to measure nor what would be good
measurements for those ﬁles.
We argue that achieving the autonomous security con-
trol is fundamentally difﬁcult because security frame-
works in Linux kernel are designed to be global and
mandatory. Security frameworks are global in a sense
that they control all processes running on a kernel. In
addition, security states (e.g., IMA measurements) are
stored centrally for the global system. Security frame-
works are mandatory in a sense that only the owner of
the system (i.e., system admin) is authorized to specify
a policy. Other principals on the system (i.e., container
owners) are not allowed to make security decisions.
Enabling containers to have autonomous security con-
trol, however, requires relaxation of both the global and
mandatory assumption of security frameworks. Security
frameworks need to exercise their control over a limited
scope of processes speciﬁed by the container owner and
security states need to be maintained and accessed sep-
arately; this relaxes the global assumption of security
frameworks. Container owners will independently apply
security policies and together participate in the process
of security decision making; this relaxes the mandatory
assumption of security frameworks.
Figure 2: A strawman design of security namespace.
3.2 Security Namespace
To achieve the autonomous security control, one idea
is to design a security namespace abstraction, similar
to how other global resources are isolated/virtualized in
Linux. However, unlike other resource namespaces, se-
curity namespace needs to relax the global and manda-
tory assumption which the security of the system often
rests upon. Thus, if naively designed, it could introduce
security loopholes into the system, invalidating the se-
curity offered by security frameworks. In this section,
we ﬁrst introduce a strawman design of security names-
pace that mimics the design of resource namespaces, and
present two attack examples.
Strawman design. Analogous to other resource names-
paces, a security namespace has to make it appear to the
processes within the namespace that they have their own
isolated instances of kernel security framework. An in-
tuitive design is thus to virtualize kernel security frame-
works (i.e., by replicating code and data structures) into
virtual instances. Each virtual instance becomes a secu-
rity namespace: it is associated with a group of processes
and it makes security decisions over those processes in-
dependently. For example, as shown in Figure 2, process
P0 runs in native security namespace NSnative. It creates
a new security namespace NS1 and forks itself (i.e., via
clone with CLONE NEW ﬂag set). The child process P1
now runs in NS1. P1 further forks itself in the same secu-
rity namespace and P2 further forks P3 in a new security
namespace. In this case, the strawman design assigns se-
curity control of P0 to NSnative, control of P1 and P2 to
NS1, and control of P2 to NS2. The owner of NSnative,
NS1 and NS2 will independently apply security policies.
While such design achieves autonomous security con-
trol in a straightforward way, it introduces two attacks:
Attack Example 1. Consider an example where the se-
curity namespaces NSnative and NS1 under discussion are
IMA namespaces. Assume the owner of the native sys-
tem wants to prove the integrity of the native system by
using NSnative to measure and record all the code that has
been executed on the system (Figure 3a). Such measure-
ments serve as an evidence for remote parties to boot-
strap trust into the native system. However, a malicious
subject P may fork itself into a new IMA namespace NS1
and then execute a malware inside of it (Figure 3b). In
1426    27th USENIX Security Symposium
USENIX Association
P0NSnativeNS1NS2forknew nsforkforknew nsP1P2P3security namespace design, if mandatory assumption of
security framework is relaxed in a naive way (e.g., by
allowing two or more principals to apply security poli-
cies freely), adversary may leverage that fact to launch
attacks.
3.3 Goals
The high level goal of this paper is to investigate the
design of security namespace that enables containers to
have autonomous security control. However, in doing so,
the security of the system should not be compromised.
Due to the diversity of kernel security frameworks and
their different design perspectives and details, the design
can hardly be generic. But we try to abstract the com-
monness by studying two commonly used kernel security
frameworks, namely IMA and AppArmor, and hopefully
it may provide useful guidance for other kernel security
frameworks and eventually lead to a generic design.
Autonomous Security Control. By autonomous secu-
rity control, we mean that individual security names-
paces can govern their own security. Speciﬁcally, we
would like our design to have the following three prop-
erties:
• The processes associated with a security namespace
will be under security control of that namespace1.
• The principal who owns a security namespace can
deﬁne security policy for that namespace, indepen-
dently from other security namespaces and the na-
tive system.
• Security states (e.g., logs, alerts, measurements and
etc.) are maintained and accessed independently.
Security. By security we mean that when there are two
or more principals on the system (including the native),
one principal cannot leverage the security namespace
abstraction to compromise the security of another princi-
pal. Here the principals refer to parties with independent
security interests and policies (i.e., container owners and
native system owner) but share the same kernel. The se-
curity of a principal refers to the security requirements
of the principal, expressed by his or her security policy.
In other words, our design should not satisfy a princi-
pal’s security requirements at the cost of another princi-
pal. Only when all principals’ security requirements are
satisﬁed we say that the overall system is secure.
The strawman design satisﬁes the autonomous secu-
rity control, but fails to meet the security requirements.
The focus of this paper is thus to investigate the design
of security namespace abstraction that can achieve au-
tonomous security control without violating security, and
1It does not necessarily mean that the processes will only be under
security control of that namespace.
Figure 3: An attack in the strawman design. A re-
mote veriﬁer may be tricked into believing the system
is of sufﬁcient integrity to use even though a malware
was once loaded on the system.
this case, the measurements of the malware are stored
onto the measurement list of NS1, which will be deleted
after the namespace exits, leaving no traces behind. In-
tegrity attestation of the native system, in this case, will
cause a remote party to believe that the system is of suf-
ﬁcient integrity to use, despite the fact that the malware
was once executed on the system.
In this example, P managed to execute a malware
without leaving a footprint on the system, due to that the
native security namespace NSnative no longer controls P1,
and the security namespace NS1 that controls P1 is cre-
ated and controlled by adversary. This example demon-
strates that, in a security namespace design, if the global
assumption of a security framework is relaxed in a naive
way, adversary may leverage that fact to circumvent sys-
tem policy.
Attack Example 2. A container associated with security
namespace NS1 shares a ﬁle f with another container as-
sociated with a different security namespace NS2. The
ﬁle is of high integrity to NS1, and thus is shared in a
read-only way. However, since NS2 has security control
over processes running in the second container, it can
make f read-write to its processes. As a result, when
processes from NS1 reads f , they read in low integrity
input even though they expect the ﬁle to be maintained
at high integrity. In this example, NS2 managed to let
processes in NS1 take low integrity input by specifying a
policy different from what was expected by NS1. Worse,
since processes in NS1 mistakenly believe that the ﬁle
is still at high integrity, most likely they will not take
countermeasures that could otherwise protect themselves
(e.g., by checking ﬁle hash before reading it). Previous
researches [22, 60] also show that, when two or more
principals try to make security decisions independently,
the inconsistencies between them may open additional
attack channels. This example demonstrates that, in a
USENIX Association
27th USENIX Security Symposium    1427
PMaliciousCodeMeasurementListcloneCLONE_NEWIMAexecnative(a) IMA measures code loaded in native(b) IMA measures code loaded in namespacePMaliciousCodeexecP1MeasurementListnativeMeasurementListnsnsSystem is Attacked !System is OK !Integrity AttestationIntegrity Attestationtonomous security control. However, the way it re-
laxes the global and mandatory assumption only consid-
ers a single principal’s security interest (i.e., the security
namespace that is associated with the process), therefore
potentially violating the security of other principals on
the system. We argue that when relaxing the global and
mandatory assumption of security frameworks, we have
to account for the security expectations of all principals
on the system. Only in this way, we can ensure that the
autonomous security control of one principal does not
come at the cost of another principal. This boils down to
two security invariant that we believe must be maintained
when global and mandatory assumption are relaxed:
• Given an operation from a process, all security
namespaces that have an opinion about the opera-
tion (i.e., expressed via its security policy) should
be made aware of the operation.
• Only if all security namespaces that have an opinion
about the operation allows the operation will the op-
eration be allowed by the system.
The ﬁrst invariant addresses the concern of relaxing
the global assumption of security frameworks. Although
a security namespace no longer sees every operation on
the system, it should be able to see all operations that
may affect its security. The second invariant addresses
the concern of relaxing the mandatory assumption of se-
curity frameworks. Every security namespace that is af-
fected by an operation can apply policies over the oper-
ation. However, only if all policies allow the operation
will the operation be allowed by the system.
Based on this insight, we propose a security names-
pace abstraction design that is secure, by augmenting
the strawman design with a routing based mechanism,
as shown in Figure 4.
First, as in the strawman design, we virtualized a
security framework into virtual instances. Each vir-
tual instance becomes a security namespace and controls
a group of processes associated with it (e.g., security
namespace1 to security namespacen in Figure 4). Each
security namespace shares the same code base in kernel,
but independently enforce its own security policies and
maintains independent data structures for security states.
Conceptually, they are isolated from each other.
Second, we added a component named Operation
Router to the standard operation mediation process of
security frameworks in kernel. When a process per-
forms an operation (i.e., system call), the operation is
ﬁrst sent to the Operation Router. Based on the opera-
tion, the Operation Router decides which security names-
paces should be made aware of the operation. The key
challenge in this step is to ensure that every security
Figure 4: Design overview. A subject’s operation
is routed to security namespaces who may have an
opinion about the operation. Each involved security
namespace independently makes a security decision,
and the operation is allowed if all involved security
namespaces allow the operation.
above attack examples show that how to relax the global
and mandatory assumption of security frameworks rep-
resents a control point in the tussle.
3.4 Security Model
In this work, we assume the trustworthiness of the ker-
nel. The security frameworks and their namespace im-
plementations reside in kernel space and they can be
trusted to enforce the security policies speciﬁed by their
owners. We do not trust any userspace processes, priv-
ileged or unprivileged, on native or in container. They
are targets of conﬁnements of security namespaces. In
practice, there are often certain userspace processes re-
sponsible for loading security policies into the kernel.
Such processes are not trusted as well. The kernel en-
sures the integrity of the policies being loaded by either
attesting policy integrity to the policy maker or accepting
only policies with valid maker signature. In addition, we
do not assume mutual trust among principals on a sys-
tem. It is the design goal of security namespace abstrac-
tion to prevent one principal from abusing the abstraction
to compromise security of another principal.
In this paper, we do not aim to provide an uniﬁed
abstraction for all kernel security frameworks. Instead,
each kernel security framework will have its own security
namespace abstraction. We leave it for the future work
to provide an uniﬁed abstraction and functions such as
stacking [32]. In addition, although we examine the chal-
lenges in applying the design to SELinux (Section 9), we
do not claim that the design is already generic. We leave
it for the future work to further study the generality of the
design and apply it to other kernel security frameworks.
Side channel attacks are also out of scope of this paper.
4 Solution Overview
The strawman design shown in Figure 2 provides
a straightforward way for containers to achieve au-
1428    27th USENIX Security Symposium
USENIX Association
SSecurity Namespace1Policy1.States1Security NamespacenPolicynStatesnSecurity Namespace2Policy2States2..DenyAllowDenyKernel SpaceUser Spacesystem callPolicy1Policy2PolicynPolicy Engine…namespace whose security might be affected by an op-
eration is made aware of the operation; this underpins
security while allowing relaxation of the global assump-
tion of security frameworks. The router then routes the
operation to those security namespaces. Each security
namespace makes their security decisions independently.
After each security namespaces made their security
decisions, a ﬁnal decision is made by the system, tak-