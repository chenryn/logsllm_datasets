### Optimized Text

#### Header Inclusion
Ensure you include the following header before `<ntddk.h>`, otherwise, you may encounter compilation errors. In fact, you can remove `<ntddk.h>` entirely since it is included by the former.

```c
#include <wdm.h>
```

#### Function Definition: `PsLookupThreadByThreadId`
Here is the function definition for `PsLookupThreadByThreadId`:

```c
NTSTATUS PsLookupThreadByThreadId(
    _In_  HANDLE ThreadId,
    _Outptr_ PETHREAD *Thread);
```

This function requires a thread ID, which is of type `HANDLE`. The output is a pointer to an `ETHREAD` structure. Note that `ETHREAD` is an opaque type.

#### Type Compatibility: `PETHREAD` and `PKTHREAD`
Although `KeSetPriorityThread` expects a `PKTHREAD` rather than a `PETHREAD`, these types are interchangeable because the first member of an `ETHREAD` is a `KTHREAD` (named `Tcb`). We will verify this using the kernel debugger in the next chapter. Here is the beginning of the `ETHREAD` structure definition:

```c
typedef struct _ETHREAD {
    KTHREAD Tcb;
    // more members
} ETHREAD;
```

Thus, you can safely use `PKTHREAD` and `PETHREAD` interchangeably as needed.

#### Converting Thread ID to Pointer
Now, we can convert a thread ID into a pointer:

```c
PETHREAD thread;
status = PsLookupThreadByThreadId(ULongToHandle(data->ThreadId), &thread);
if (!NT_SUCCESS(status)) {
    break;
}
```

The call to `PsLookupThreadByThreadId` can fail, primarily if the thread ID does not reference any existing thread in the system. If the call fails, we simply break out of the loop and let the resulting `NTSTATUS` propagate.

#### Setting Thread Priority
We are now ready to change the thread's priority. Even if the thread terminates after the lookup but before setting the new priority, our pointer remains valid. This is because the lookup function increments the reference count on the kernel thread object, preventing it from being freed until we explicitly decrement the reference count.

Here is the code to set the thread priority:

```c
auto oldPriority = KeSetPriorityThread(thread, data->Priority);
KdPrint(("Priority change for thread %u from %d to %d succeeded!\n", data->ThreadId, oldPriority, data->Priority));
```

We retrieve the old priority and print it for debugging purposes. Finally, we decrement the thread object's reference count to avoid a memory leak:

```c
ObDereferenceObject(thread);
```

#### Reporting to the Client
We also need to report to the client that we used the provided buffer. This is where the `information` variable comes into play:

```c
information = sizeof(data);
```

We write this value to the IRP before completing it, which is returned as the second-to-last argument from the client's `WriteFile` call.

#### Completing the IRP
Finally, we close the loop and complete the IRP with the current status:

```c
} while (false);

Irp->IoStatus.Status = status;
Irp->IoStatus.Information = information;
IoCompleteRequest(Irp, IO_NO_INCREMENT);
return status;
```

### Complete IRP_MJ_WRITE Handler
For reference, here is the complete `IRP_MJ_WRITE` handler:

```c
NTSTATUS BoosterWrite(PDEVICE_OBJECT DeviceObject, PIRP Irp) {
    auto status = STATUS_SUCCESS;
    ULONG_PTR information = 0;
    auto irpSp = IoGetCurrentIrpStackLocation(Irp);

    do {
        if (irpSp->Parameters.Write.Length < sizeof(BOOSTER_DATA)) {
            status = STATUS_INVALID_PARAMETER;
            break;
        }

        BOOSTER_DATA* data = (BOOSTER_DATA*)Irp->UserBuffer;
        if (data == nullptr || data->Priority > 31) {
            status = STATUS_INVALID_PARAMETER;
            break;
        }

        PETHREAD thread;
        status = PsLookupThreadByThreadId(ULongToHandle(data->ThreadId), &thread);
        if (!NT_SUCCESS(status)) {
            break;
        }

        auto oldPriority = KeSetPriorityThread(thread, data->Priority);
        KdPrint(("Priority change for thread %u from %d to %d succeeded!\n", data->ThreadId, oldPriority, data->Priority));
        ObDereferenceObject(thread);
        information = sizeof(*data);
    } while (false);

    Irp->IoStatus.Status = status;
    Irp->IoStatus.Information = information;
    IoCompleteRequest(Irp, IO_NO_INCREMENT);
    return status;
}
```

### Installing and Testing
You can now build the driver and client successfully. Next, install the driver and test its functionality. You can try this on a virtual machine or your development machine.

#### Install the Driver
Copy the `booster.sys` file to the target machine. Open an elevated command prompt and install the driver using `sc.exe`:

```sh
c:\> sc create booster type= kernel binPath= c:\Test\Booster.sys
```

Ensure the `binPath` includes the full path to the `.sys` file. The name `booster` is the Registry key name and must be unique.

Load the driver:

```sh
c:\> sc start booster
```

Verify the driver is running by checking WinObj for the device name and symbolic link.

#### Run the Client
Run the client executable with the thread ID and desired priority:

```sh
c:\Test> boost 768 25
```

If you encounter errors, ensure the runtime library is set to a static one in the client's project properties in Visual Studio.

### Summary
We have built a simple yet complete driver, including a user-mode client for communication. In the next chapter, we will cover debugging, an essential skill when writing drivers.

### Chapter 5: Debugging and Tracing
Kernel drivers, like any software, can have bugs. Debugging drivers is more challenging than user-mode debugging because it involves debugging the entire machine, not just a specific process. This chapter covers user-mode and kernel-mode debugging using WinDbg.

#### Debugging Tools for Windows
The Debugging Tools for Windows package includes debuggers, tools, and documentation. It can be installed as part of the Windows SDK or WDK. The package contains four debuggers: Cdb.exe, Ntsd.Exe, Kd.exe, and WinDbg.exe.

- **Cdb and Ntsd**: User-mode, console-based debuggers.
- **Kd**: Kernel debugger with a console UI.
- **WinDbg**: Graphical user interface for both user-mode and kernel debugging.

#### Introduction to WinDbg
WinDbg supports three types of commands:
- **Intrinsic commands**: Built-in commands that operate on the target.
- **Meta commands**: Start with a period (.) and operate on the debugging environment.
- **Extension commands**: Start with an exclamation point (!) and provide additional functionality via external DLLs.

#### Tutorial: User Mode Debugging Basics
1. Launch Notepad.
2. Launch WinDbg and attach to the Notepad process.
3. Use the `~` command to show information about all threads.
4. Set up symbols using the `.symfix` command or by setting the `_NT_SYMBOL_PATH` environment variable.
5. Use the `lm` command to list loaded modules and verify symbols.

This tutorial provides a basic understanding of WinDbg and how to use it for user-mode debugging. Kernel debugging is covered in the next section.