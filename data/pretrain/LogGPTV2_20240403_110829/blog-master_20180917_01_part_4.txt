cpu_operator_cost = 0.00216748542608239995        
seq_page_cost=0.014329        
random_page_cost = 0.016     
parallel_tuple_cost = 0      
parallel_setup_cost = 0     
min_parallel_table_scan_size = 0    
min_parallel_index_scan_size = 0    
```    
## 1000W tpcc 测试    
```    
16072 * 60 = 96.4万 tpmC    
```    
详细结果    
```    
......    
[ 2993s ] thds: 64 tps: 15107.81 qps: 431171.53 (r/w/o: 196624.50/204331.41/30215.62) lat (ms,95%): 10.65 err/s 51.00 reconn/s: 0.00    
[ 2994s ] thds: 64 tps: 15454.20 qps: 434439.71 (r/w/o: 198195.61/205335.70/30908.41) lat (ms,95%): 10.46 err/s 77.00 reconn/s: 0.00    
[ 2995s ] thds: 64 tps: 15480.57 qps: 438798.81 (r/w/o: 200298.44/207538.23/30962.14) lat (ms,95%): 10.46 err/s 72.00 reconn/s: 0.00    
[ 2996s ] thds: 64 tps: 15341.97 qps: 434496.22 (r/w/o: 198027.64/205784.63/30683.94) lat (ms,95%): 10.65 err/s 73.00 reconn/s: 0.00    
[ 2997s ] thds: 64 tps: 15208.54 qps: 433973.96 (r/w/o: 197975.05/205581.82/30417.08) lat (ms,95%): 10.65 err/s 75.01 reconn/s: 0.00    
[ 2998s ] thds: 64 tps: 15300.14 qps: 431763.76 (r/w/o: 196862.95/204300.53/30600.28) lat (ms,95%): 10.65 err/s 84.00 reconn/s: 0.00    
[ 2999s ] thds: 64 tps: 15108.49 qps: 426253.35 (r/w/o: 194171.57/201864.80/30216.98) lat (ms,95%): 10.65 err/s 56.99 reconn/s: 0.00    
[ 3000s ] thds: 64 tps: 15046.89 qps: 428187.32 (r/w/o: 195463.56/202631.98/30091.78) lat (ms,95%): 10.84 err/s 70.00 reconn/s: 0.00    
SQL statistics:    
    queries performed:    
        read:                            625427855    
        write:                           649118720    
        other:                           96478628    
        total:                           1371025203    
    transactions:                        48223282 (16072.47 per sec.)    
    queries:                             1371025203 (456952.75 per sec.)    
    ignored errors:                      210005 (69.99 per sec.)    
    reconnects:                          0      (0.00 per sec.)    
General statistics:    
    total time:                          3000.3636s    
    total number of events:              48223282    
Latency (ms):    
         min:                                    0.28    
         avg:                                    3.98    
         max:                                  912.95    
         95th percentile:                        9.91    
         sum:                            191859179.61    
Threads fairness:    
    events (avg/stddev):           753488.7812/3072.19    
    execution time (avg/stddev):   2997.7997/0.05    
```    
## 1000亿 tpcb 测试    
1、生成1000亿数据    
```    
nohup pgbench -i -s 1000000 -I dtg >./pgbench_ins.log 2>&1 &    
99998900000 of 100000000000 tuples (99%) done (elapsed 93180.83 s, remaining 1.03 s)    
99999000000 of 100000000000 tuples (99%) done (elapsed 93181.05 s, remaining 0.93 s)    
99999100000 of 100000000000 tuples (99%) done (elapsed 93181.13 s, remaining 0.84 s)    
99999200000 of 100000000000 tuples (99%) done (elapsed 93181.21 s, remaining 0.75 s)    
99999300000 of 100000000000 tuples (99%) done (elapsed 93181.30 s, remaining 0.65 s)    
99999400000 of 100000000000 tuples (99%) done (elapsed 93182.01 s, remaining 0.56 s)    
99999500000 of 100000000000 tuples (99%) done (elapsed 93182.09 s, remaining 0.47 s)    
99999600000 of 100000000000 tuples (99%) done (elapsed 93182.17 s, remaining 0.37 s)    
99999700000 of 100000000000 tuples (99%) done (elapsed 93182.25 s, remaining 0.28 s)    
99999800000 of 100000000000 tuples (99%) done (elapsed 93182.33 s, remaining 0.19 s)    
99999900000 of 100000000000 tuples (99%) done (elapsed 93182.42 s, remaining 0.09 s)    
100000000000 of 100000000000 tuples (100%) done (elapsed 93182.50 s, remaining 0.00 s)    
done.    
```    
生成1000亿数据耗时： 93182 秒。  （约25小时 52分钟。）     
2、给1000亿的单表创建索引(64 parallel)    
```    
postgres=# analyze pgbench_accounts ;    
ANALYZE    
postgres=# alter table pgbench_accounts set (parallel_workers =64);    
ALTER TABLE    
```    
```    
nohup pgbench -i -s 1000000 -I p > ./pk.log 2>&1 &    
```    
1000亿单表创建索引耗时： 10小时 50分钟。     
### 1000亿单表、索引容量大小  
1000亿单表：12.5 TB。  
1000亿单表索引： 2 TB。  
```  
postgres=# \di+ pgbench*  
                                      List of relations  
 Schema |         Name          | Type  |  Owner   |      Table       |  Size   | Description   
--------+-----------------------+-------+----------+------------------+---------+-------------  
 public | pgbench_accounts_pkey | index | postgres | pgbench_accounts | 2092 GB |   
 public | pgbench_branches_pkey | index | postgres | pgbench_branches | 21 MB   |   
 public | pgbench_tellers_pkey  | index | postgres | pgbench_tellers  | 214 MB  |   
(3 rows)  
postgres=# \dt+ pgbench*  
                          List of relations  
 Schema |       Name       | Type  |  Owner   |  Size   | Description   
--------+------------------+-------+----------+---------+-------------  
 public | pgbench_accounts | table | postgres | 12 TB   |   
 public | pgbench_branches | table | postgres | 35 MB   |   
 public | pgbench_history  | table | postgres | 0 bytes |   
 public | pgbench_tellers  | table | postgres | 422 MB  |   
(4 rows)  
```  
### 索引深度  
1、1000亿行，INT8类型索引，深度为4（不包括ROOT PAGE）。    
```  
postgres=# select * from bt_metap('pgbench_accounts_pkey');  
 magic  | version |   root   | level | fastroot | fastlevel | oldest_xact | last_cleanup_num_tuples   
--------+---------+----------+-------+----------+-----------+-------------+-------------------------  
 340322 |       3 | 23149704 |     4 | 23149704 |         4 |           0 |                      -1  
(1 row)  
```  
2、索引查询，索引需要搜索5个BLOCK。  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from pgbench_accounts where aid=10000000;  
                                                                   QUERY PLAN                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------  
 Index Scan using pgbench_accounts_pkey on public.pgbench_accounts  (cost=0.62..0.66 rows=1 width=101) (actual time=0.020..0.021 rows=1 loops=1)  
   Output: aid, bid, abalance, filler  
   Index Cond: (pgbench_accounts.aid = 10000000)  
   Buffers: shared hit=6  -- 5个index block, 1个heap block  
 Planning Time: 0.049 ms  
 Execution Time: 0.033 ms  
(6 rows)  
```  
[《深入浅出PostgreSQL B-Tree索引结构》](../201605/20160528_01.md)    
## tpcb 1000亿 性能测试  
使用高斯分布，生成测试数据。  
[《生成泊松、高斯、指数、随机分布数据 - PostgreSQL 9.5 new feature - pgbench improve, gaussian (standard normal) & exponential distribution》](../201506/20150618_01.md)    
### 只读  
```  
vi test.sql  
\set aid random_gaussian(1, :range, 10.0)  
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
```  
### 读写  
```  
vi rw.sql  
\set aid random_gaussian(1, :range, 10.0)  
\set bid random(1, 1 * :scale)  
\set tid random(1, 10 * :scale)  
\set delta random(-5000, 5000)  
BEGIN;  
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;  
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;  
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;  
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);  
END;  
```  
### tpcb 1000亿 只读测试    
#### 1、活跃数据10亿   
QPS: 998818  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -T 360 -D range=1000000000  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 64  
number of threads: 64  
duration: 360 s  
number of transactions actually processed: 359606534  
latency average = 0.064 ms  
latency stddev = 0.046 ms  
tps = 998777.462686 (including connections establishing)  
tps = 998818.121681 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.002  \set aid random_gaussian(1, :range, 10.0)  
         0.062  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
```  
#### 2、活跃数据100亿   