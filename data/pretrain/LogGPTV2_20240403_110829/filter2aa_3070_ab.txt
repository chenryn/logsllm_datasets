厂商 C 的局域网交互控制 
厂商 C 为了实现智能家居生态，主推一套实现产品智能化互联互通的协议——“***Link”，
目前所有的产品都可以与 APP，以及音箱进行交互控制，是一套“带认证的密钥协商+对称
密钥加密”的设备操作和交互控制协议。 
再介绍和认识“带认证的密钥协商”之前，我们先介绍一下 ECDH 密钥协商及其存在的
安全问题。 
有两个用户 Bob 和 Alice，使用 ECDH 密钥协商，交互过程如图 4.9 所示： 
控制消息Msg
Header结构体4个属性：
Device_ID、ts、length和unknown
cmd
Id、method、params等
checksum：token
Bob
Alice
(Bob_ECDH_pub_key,Bob_ECDH_pri_key)
=ECDH_generate_key()
(Alice_ECDH_pub_key,Alice_ECDH_pri_key)
=ECDH_generate_key()
Key=ECDH_compute_key(Alice_ECDH_pu
b_key,Bob_ECDH_pri_key)
Key=ECDH_compute_key(Bob_ECDH_pub
_key,Alice_ECDH_pri_key)
Bob_ECDH_pub_key
Alice_ECDH_pub_key
图 4.9：ECDH 密钥协商 
但是 ECDH 密钥协商是无法防御中间人攻击的，假设在 Bob 和 Alice 存在一个攻击者—
—Attack，对 Bob 和 Alice 进行中间人攻击，ECDH 协商流程如图 4.10 所示： 
Bbob
Alice
(Bob_ECDH_pub_key,Bob_ECDH_pri_key)
=ECDH_generate_key()
(Alice_ECDH_pub_key,Alice_ECDH_pri_key)
=ECDH_generate_key()
Key_BA=ECDH_compute_key(Att_ECDH_
pub_key2,Bob_ECDH_pri_key)
Key_AA=ECDH_compute_key(Att_ECDH_pub
_key1,Alice_ECDH_pri_key)
Bob_ECDH_pub_key
Alice_ECDH_pub_key
Attack
(Att_ECDH_pub_key1,Att_ECDH_pri_key1)
=ECDH_generate_key()
(Att_ECDH_pub_key2,Att_ECDH_pri_key2)
=ECDH_generate_key()
Key_BA=ECDH_compute_key(Bob_ECDH_pub_key,At
t_ECDH_pri_key2)
Key_AB=ECDH_compute_key(Alice_ECDH_pub_ke
y,Att_ECDH_pri_key1)
Att_ECDH_pub_key2
Att_ECDH_pub_key1
图 4.10：ECDH 密钥协商之中间人攻击 
为了防御中间人攻击，需要在 ECDH 密钥协商过程中加入“一套身份认证机制”——
EccSignKey 和 EccVerifyKey，EccVerifyKey 提前存储在需要协商密钥的用户设备上，整个“待
认证的 ECDH 密钥协商”交互过程如图 4.11 所示： 
Bob
Alice
(Bob_ECDH_pub_key,Bob_ECDH_pri_key)
=ECDH_generate_key()
(Bob_verify_key,Bob_sign_key)
=ECDSA_genarate_key()
(Alice_ECDH_pub_key,Alice_ECDH_pri_key)
=ECDH_generate_key()
(Alice_verify_key,Alice_sign_key)
=ECDSA_genarate_key()
ECDSA_Verify(Alice_verify_key,Alice_ECD
H_pub_key,Signature_a)
Key=ECDH_compute_key(Alice_ECDH_pu
b_key,Bob_ECDH_pri_key)
ECDSA_Verify(Bob_verify_key,Bob_ECDH_pu
b_key,Signature_b)
Key=ECDH_compute_key(Bob_ECDH_pub_k
ey,Alice_ECDH_pri_key)
Bob_ECDH_pub_key
Signature_b=ECDSA_sign(Bob_sign_key,Bob_ECDH_pub_key)
Alice_ECDH_pub_key
Signature_a=ECDSA_sign(Alice_sign_key,Alice_ECDH_pub_key)
图 4.11：待认证的 ECDH 密钥协商 
设备和厂商 C 的应用(或音箱)基于***Link 协议来进行交互，第三方设备制造商首先在
云端通过 ECC 算法一对生成公私钥：Ecc-sPrivateKey/Ecc-sPubkey，其中公钥 Ecc-sPubkey 内
置在设备端，用于加密发送随机数到云端，进行设备的身份认证，设备认证合法后，云端下
发后续通信加密的 key：accessKey 到设备上，然后应用使用 ECDH 密钥协商算法协商出的密
钥，通过 AES-CBC 模式加密传输 accessKey；此外设备和应用进行局域网通信时，都是通过
localkey 进行加解密来进行的，其中 localkey 就是 accessKey。设备和厂商 C 的应用局域网交
互流程如图 4.12 所示： 
某
APP
或
音
箱
厂
商
C
的
微
联
设
备
1.udp广播发送payload和publicKey到80或4320端口
6.设备返回响应
5.打开设备待激活状态，发送认证授权信息：accesskey、localkey等
2.返回设备devkey(公钥)+feedid+random+sPubKey(random)等设备信息
7.使用localkey加密设备控制信息，然后发送
8.设备返回执行结果
局域网模式
设备端内置
ECC-sPubKey
第三方设备在厂商C的
云上生成ECC-
sPrivateKey/sPubKey
3.发送random+sPubKey(random)
4.云端验证合法后下发accesskey
图 4.12：设备和厂商 C 的应用局域网通信交互 
厂商 C 的设备局域网身份劫持 
厂商 C 的***Link 协议的交互控制的消息结构体如下所示： 
已打开智能插座为例： 
Packet_t=协议包头，opt=null，Payload=LocalKey 密钥加密 
Time[时间戳]  
//4 字节 int 类型时间戳，小端在前 
{ 
“cmd”:5, 
"data":{ 
"streams":[{"current_value":"0","stream_id":"power"}], 
"snapshot":[{"current_value":"1","stream_id":"power"}] 
} 
设备交互方式总结和比较 
属性\公司 
厂商 A 
厂商 B 
厂商 C 
交互方式 
只允许云端交互 
允许云端和局域网 
允许云端和局域网 
是否可劫持 
音箱 server 和第三
方设备进行控制协
议交互； 
身份凭证是
userid，可劫持 
生态链企业，云端
统一走厂商 B 的生
态链云；基于 miio
协议 
局域网交互，身份
凭证 token 可劫持 
第三方企业使用其 link 协
议，云端使用厂商 C 的云作
为 server；局域网交互依赖
localkey，目前安全。但是
设备身份依赖于 ECC-
sPubKey(多个设备一个
key)，该 key 失窃后，设备
可以被伪造。 
产品安全性负
责 
厂商 A 只负责自己
音箱自生的安全
性，第三方产品的
安全性自行负责。 
厂商 B 负责 
第三方自己负责，但是
***link 协议统一交互控
制、OTA 更新等，安全性极
大的有保障 
账号 
第三方 Oauth 登录
授权 
统一厂商 B 的帐户 
厂商 C 的帐户 
APP 控制 
第三方有独立 APP 
厂商 B 的 APP 
厂商 C 的 APP(H5 小程序) 
5、通过应用实现身份劫持 
通过应用实现身份劫持，常用的方法有如下两种： 
1）通过 webview JS 交互接口远程命令执行或泄露身份账号 
应用 APP 通过为 webview @JavascriptInterface 关键字，自定义添加身份获取的函数，并
且没对加载 url 做好限制，导致身份信息远程泄露或者远程命令执行。 
2）Webview file 域远程信息泄露 
应用开启 WebSettings.setAllowUniversalAccessFromFileURLs(true)，并且 webview 对加载
的 url 没有任何限制，则应用 APP 下所有私有目录信息都会被窃取。 
通过 webview JS 交互接口远程命令执行或泄露身份账号 
应用扫一扫时(CaptureActivity),当 CaptureActivity 扫描到是“合法”url 时，会调用
com.***.WebViewActivity 进行 url 加载，但是 url 判断逻辑存在漏洞，导致攻击者可以调用
WebViewActivity 定义的交互接口，远程获取用户账号等敏感身份信息，漏洞执行效果如图
5.1 所示。 
漏洞案列简化： 
if(loadurl.contains(“***”)){ 
//合法 
} else{ 
//不合法 
} 
图 5.1：通过 webview-JS 交互接口获取厂商 C 控制应用的身份 
Webview file 域远程信息泄露 
厂商 A 的音箱控制 APP 中 WVWebViewActivity 对外导出，并接收如下远程 uri scheme：
assistant://hsend***Poc5_web_view?direct_address=url。 
WVWebViewActivity 接受外部的 url 会传入 Fragment 中的 webview 中进行加载，并且
WVWebViewActivity 中对 webview 进行了设置，开启了 JS 和 file 文件访问能力，并设置了
WebSettings.setAllowUniversalAccessFromFileURLs(true)。 
攻击者可以将 assistant 伪协议中的 url 先通过 url 加载任意 html，然后下载恶意 html 文
件到本地，然后 webview 跳转加载本地的恶意 html 文件，窃取用户私有目录内的身份信息。 
assistant://hsend***Poc5_web_view?direct_address=http://www.test.com 
assistant://hsend***Poc5_web_view?direct_address=file:///*/***.html 
6、智能家居身份劫持漏洞总结 
1：配网泄露 
2：设备交互控制时，劫持 
1）app/设备->server：厂商 A 为代表，userid 为身份凭证，可劫持； 
2）局域网控制： 
A、厂商 B 的局域网控制基于 miio 协议：token 泄露，可劫持； 
B、厂商 C 的局域网控制：带认证的密钥协商+对称密钥加密(localkey),协议安全，但是设备身
份依赖于 ECC-sPubKey(多个设备一个 key)，设备可被伪造； 
3：app 应用存在身份穿越漏洞 
A、Webview JS 交互接口远程命令执行或远程信息泄露 
B、Webview File 域远程信息克隆 
7、参考文章 
1.https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9
A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F
%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md 
2. https://github.com/rytilahti/python-miio 
3.https://paper.seebug.org/616/