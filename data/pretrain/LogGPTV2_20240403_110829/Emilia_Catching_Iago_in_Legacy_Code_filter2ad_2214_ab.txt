which syscall return values are compared in branch conditions
and adds values that will exercise both sides of the branch
to the valid value set of corresponding syscall’s output (see
Section III-C2). For example, if we ﬁnd if (ret  max depth then
current target ← ref erences[depth]
do
9: procedure RECURSIVE FUZZ(references, depth)
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
next target ← (syscall, hash, init ref )
ref erences.append(next target)
recursive f uzz(ref erences, depth + 1)
while current target.update target()
it runs the recursive analysis. The init_ref is the ini-
tial value reference of the target syscall invocation, and the
content of the value reference will be updated in the do-
while block in recursive_fuzz each time until it can
not be updated further (values exhausted). We will describe
the update mechanism in the Sections III-C2 and III-C3.
run_interceptor will
launch the interceptor with the
reference list and connect the client if the target application
is a server. If there exist new syscall invocations which are
not found in the overall_syscall set,
the controller
will update overall_syscall set, append the new syscall
invocations to the reference list and go to the next level of
recursion. As a result, a syscall in the reference list is a new
syscall invoked in the new execution path caused by fuzzing its
previous syscalls. In most cases, the reference list as a stored
state will help replay the previous execution by ﬁlling the
fuzzed syscall return ﬁelds with the same values. However, the
application could also be affected by the OS-returned values
to the unfuzzed syscalls. As future work, we could record the
whole execution state or take a snapshot of the execution.
Stateful fuzzing is still not comprehensive. Due to limited
resources, we only fuzz syscall invocations with this “fuzz-
then-appear” (syscalls in the reference list) relationship to-
gether. With more resources, it may be possible to also fuzz
every possible combination of syscall invocations at the same
time.
2) Fuzzing Value Sets: Once Emilia targets a syscall, it
will need to modify the return values with fuzz values. There
are three possibilities of how the fuzz values can be set:
random values, invalid values and valid values. Random values
are drawn randomly from the range deﬁned by the type of
return value (i.e., a random 32-bit value for a returned long).
Invalid values are values known to be invalid for the returned
value. Currently, this is set to the MAX and MIN values for
the returned type. With more effort, one could also examine
the semantics of each syscall and create syscall-speciﬁc sets
5
of invalid values, but currently Emilia does not do this. For
example, many syscalls will only return a limited set of
negative-valued error codes, so any negative value not in the
set would be a potentially invalid value. Finally, valid values
are those derived by the Emilia’s value extractor, described in
Section III-B. Both invalid and random values aim to trigger
crashes if the syscall return value is used for pointer arithmetic.
For random values, Emilia not only randomizes the bytes
of the output but also the number of bytes to overwrite. In
this way, Emilia has a higher possibility of generating values
with different orders of magnitude. This helps detect more
vulnerabilities because some memory corruptions can not be
triggered with too large a value. For example, in OpenSSH,
the read return value will be used ﬁrst to reallocate a buffer
then perform pointer arithmetic on another buffer. If the value
is too large, the reallocation will fail, and the program will not
go further.
3) Return Fields: A syscall could have multiple return
ﬁelds. In which order should we fuzz them? For example,
stat has 14 return ﬁelds when broken down (i.e., the return
value + 13 ﬁelds in struct stat). A systematic, but
expensive strategy would be to try every combination of the
return ﬁelds and values. The number of combinations increases
exponentially with the number of return ﬁelds. Assume we
have num values for each ﬁeld to try including an option to
not fuzz this return ﬁeld. There will be num values14 combi-
nations for one stat syscall invocation. To make the fuzzing
ﬁnish in a reasonable amount of time, we instead design Emilia
to fuzz one ﬁeld at a time, so that the time grows linearly with
the number of ﬁelds (i.e., O(num f ields × num values)).
As a result, update_target method will try every value
only once on every return ﬁeld.
D. OS-speciﬁc optimizations
The efﬁciency of Emilia is largely determined by the
number of syscall invocations processed. Therefore, if we can
eliminate certain syscalls from consideration, it will speed
up the analysis. To this end, one can apply domain-speciﬁc
analysis to eliminate syscalls. Since we will evaluate Emilia
on Linux, we conducted a manual audit of the Linux syscall
interface, and narrow down the scope of syscalls that Emilia
will consider as targets.
Linux syscalls can be categorized based on the purpose and
how they are handled by the OFL:
I. Special-purpose
that
such
syscalls
applications
are discouraged for
regular
as kexec_load and
query_module, syscalls that have no corresponding
libc wrapper (e.g., io_getevents) and those that do
not exist for certain Linux versions (e.g., getcpu).
40 syscalls fall in this category. They are unlikely to
be invoked by regular applications protected by the
isolation technique.
II. Syscalls that are usually specially handled by the isolation
technique and unlikely to be directly forwarded to the
untrusted OS. 74 syscalls fall in this category. They are
related to threads, memory management, and signals.
The untrusted OS is usually not allowed by the isolation
technique to directly manage threads and signals because
those operations involve manipulating the application’s
App
openSSH
Lighttpd
Apache
MongoDB
Redis
Nginx
Memcached
Evolver
Charybdis
BOINC
Chromium
Git
wolfSSH
Coreutils
8.31
zlib
libreadline
curl
1.2.11
7.0
7.72.0
Description
Ver.
7.9p1
1.4.51
2.4.37 HTTP Server
r4.2.4
SSH server and client
light-weight web server
document-based, distributed
database
key-value database
5.0.5
1.17.0 web server
1.5.20 memory object caching sys-
2.70
3.5.5
7.14.2
74.0
2.18.0
v1.4.3
tem
liquid surfaces modelling sys-
tem
IRCv3 server
volunteer grid computing sys-
tem
web browser
version control system
lightweight SSHv2 server li-
brary
GNU operating system utili-
ties
data compression library
command lines editing library
command lines web client
LOC
91,607
49,688
184,033
1,957,478
115,034
132,911
18,414
130,104
191,478
222,388
21,140,796
210,732
22,533
62,466
18,334
21,728
130,833
Table 1: Legacy applications analyzed
address space. After the publication of the Iago attack,
almost all isolation techniques implement their own mem-
ory management handlers to address the mmap-based
attack. Since they are handled separately, the interfaces
might be changed, and careful checks might have already
been applied to the interfaces.
III. 194 remaining syscalls including but not limited to ﬁle,
network and time operations such as read, epoll and
gettimeofday. Syscalls in this category are common
in applications and are more likely to be forwarded by
the OFL.
Based on the categorization, Emilia currently only targets
the 194 syscalls that we expect to be vulnerable to Iago attacks.
IV. VULNERABILITY ANALYSIS
In this section, we begin by classifying the vulnerabilities
found by Emilia and provide examples of each. We then quan-
titatively examine the results of our measurement to describe
how frequently the Iago vulnerabilities arise in legacy code.
Then we discuss our insights into why Iago vulnerabilities
arise, and at the same time, why they don’t arise more often.
Finally, we summarize some lessons-learned that will provide
directions for avoiding Iago vulnerabilities for legacy code in
applications.
A. Applications examined
One of the primary motivations for developing Emilia was
to measure the base rate of Iago vulnerabilities in a wide
range of legacy applications. To this end, we applied Emilia
to 17 applications and libraries,
including servers, clients,
and utilities, which are summarized in Table 1. Since we
intercepted the actual syscall layer instead of libc wrappers,
we also analyzed the C library code invoked during fuzzing.
Our system was running glibc-2.27.
6
Naturally, some applications are more likely to be ported to
SGX than others. As a result, we also classify our applications
into groups based on their functionality and how likely they
are to be used in SGX, as shown in Table 2. The ﬁrst group
consists of basic Utility programs, and also includes common
libraries. We believe these are the most likely to ﬁnd their way
into SGX enclaves, and some already have implementations in
SGX2. The next group consists of programs that are largely
Computational and perform little I/O. These programs have
a low attack surface and we envision that users may wish
to use SGX to protect these computations and any private
data they operate on when run on the public cloud. The third
class consists of Server & Network applications that we may
wish to secure from a malicious OS, but represent a greater
challenge due to the amount of I/O they conduct as well as
their larger code bases. Finally, we include Chromium, an
Interactive application for completeness, though we think it
is unlikely that large and highly interactive applications such
as web browsers will be ported into SGX.
B. Classiﬁcation of vulnerabilities
We classify the Iago vulnerabilities found by the nature of
the assumptions they violate. Every syscall has semantics that
a correct OS adheres to, so naturally, programs will assume the
OS will obey such semantics. We categorize these semantics
into ﬁve types:
Static: Semantics are independent of syscall arguments and