noisei = Ehx, yi mod L, Xi∈[n]
Since hx, yi  1, B1 uses the fact that the MIFE ot from Figure 5.1 is linearly
interacting with.
homomorphic (see Remark 13) to generate all the remaining wj
i mod L =
i + x1,β
Encot(pkot, ekot
i − x0
i ), which corresponds to the challenge ciphertexts in game Gβ.
i, wj
Finally, B1 returns Enc′(gpk′, ek′
-Simulation of OKeygen(y1k···kyn):
B1 uses its own secret key generation oracle on input y1k···kyn to get z := KeyGenot(y1k
···kyn). For all i ∈ [n], it computes dk′
It sends dky1k···kyn :=
({dk′
β ∈ {0, 1}, when B1 interacts with many-AD-IND-weakMIFE ot
to A. Therefore,
i}i∈[n], z) to A.
Finally, B1 forwards the output α of A to its own experiment.
It is clear that for all
, it simulates the game Gβ
i := KeyGen′(gpk′, msk′
i − x1,0
i ) to A.
i + xj,0
i := w1
i , xj,0
i, yi).
β
Advmany-AD-IND-weak
MIFE ot,B1
(λ) =
(cid:12)(cid:12) Prhmany-AD-IND-weakMIFE ot
− Prhmany-AD-IND-weakMIFE ot
|AdvG0(A) − AdvG1(A)|.
(1λ,B1) = 1i
(1λ,B1) = 1i(cid:12)(cid:12) =
0
1
5.1 From Single to Multi-Input FE for Inner Product
111
Lemma 39: Game G1 to G2
There exists a PPT adversary B2 such that
|AdvG1(A) − AdvG2(A)| ≤ Advmany-AD-IND
FE,B2,n
(λ).
i, x1,1
i + (xj,1
) kzi) with Enc(gpk′,
Proof of Lemma 39. In Game G2, we replace Enc′(gpk′, ek′
ek′
i kzi), for all i ∈ [n], j ∈ [Qi]. This follows from
the many-AD-IND security of FE for n instances, which we can use since for each key query
y1k . . .kyn and all r, z, we have
) kzi) = Enc(gpk′, ek′
i − x1,1
i − x1,0
i + (xj,0
i, x1,1
i, xj,1
i
i
hEncot(pkot, ekot, x1,1
i + xj,0
i − x1,0
i
i
i + xj,0
i + xj,1
i − x1,0
, yii = hui + x1,1
i − x1,1
= hui + x1,1
= hEncot(pkot, ekot, x1,1
i − x1,1
i
, yii
, yii
i − x1,1
i + xj,1
i
i
, yii
, yii, which follows from
, yii = hxj,1
the restriction imposed by the security game (see Remark 7).
The second equality is equivalent to hxj,0
We build a PPT adversary B2 such that:
i − x1,0
i
|AdvG1(A) − AdvG2(A)| ≤ Advmany-AD-IND
FE,B2,n
(λ).
i
i
i
i
n
, wj,1
i + xj,b
i, wj,β