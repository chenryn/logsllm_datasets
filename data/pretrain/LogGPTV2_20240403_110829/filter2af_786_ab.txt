        printf("Find section %s\n", target_section);
        break;
      }
    }
这一段是从打开文件到找到制定section的代码，我们为了减小实验难度，不会对一些重要的section加密（可能被玩坏），我们自己新建一个section，新建的方法之后说，所以这里的字符串target_section就是我们自己定义的section的名字。
    lseek(fd, base, SEEK_SET);                //移动到目标section的内容上
    content = (char*) malloc(length);
    if(content == NULL){
      puts("Malloc space for content failed");
      goto _error;
    }
    if(read(fd, content, length) != length){//读取出来
      puts("Read section .text failed");
      goto _error;
    }
    nblock = length / block_size;
    nsize = base / 4096 + (base % 4096 == 0 ? 0 : 1);
    printf("base = %d, length = %d\n", base, length);
    printf("nblock = %d, nsize = %d\n", nblock, nsize);
    ehdr.e_entry = (length e_shoff + base;
      nblock = ehdr->e_entry >> 16;
      nsize = ehdr->e_entry & 0xffff;
      printf("nblock = %d\n", nblock);
      if(mprotect((void *) base, 4096 * nsize, PROT_READ | PROT_EXEC | PROT_WRITE) != 0){
        puts("mem privilege change failed");
      }
      for(i=0;i< nblock; i++){
        char *addr = (char*)(text_addr + i);
        *addr = ~(*addr);
      }
      if(mprotect((void *) base, 4096 * nsize, PROT_READ | PROT_EXEC) != 0){
        puts("mem privilege change failed");
      }
      puts("Decrypt success");
    }
解密过程，大多数差不多，需要注意两个地方一个是getLibAddr，用于获得内存中so的位置
    unsigned long getLibAddr(){
      unsigned long ret = 0;
      char name[] = "libdexloader.so";
      char buf[4096], *temp;
      int pid;
      FILE *fp;
      pid = getpid();
      sprintf(buf, "/proc/%d/maps", pid);
      fp = fopen(buf, "r");
      if(fp == NULL)
      {
        puts("open failed");
        goto _error;
      }
      while(fgets(buf, sizeof(buf), fp)){
        if(strstr(buf, name)){
          temp = strtok(buf, "-");
          ret = strtoul(temp, NULL, 16);
          break;
        }
      }
    _error:
      fclose(fp);
      return ret;
    }
还有个是mprotect
这个函数用于修改内存页的权限，如果不修改，用户对于内存页的权限只有read，你是无法对内存中的数据进行修改的。这个和之前我们所说的segment的权限不一样，要注意区分。
#### 【再来一次】
这种单独建一个section的方法简单粗暴易懂，但是只要解析一下就会知道多了一个section。所以实际上往往都是对固定的section进行加密解密，要注意的是这些section中有重要的信息，不能乱来，所以难度会大很多。大家有兴趣自己实现以下。
就酱~~~
示例代码：http://bbs.pediy.com/showthread.php?t=191649)
原文地址：http://bbs.ichunqiu.com/thread-13913-1-1.html?from=seebug
* * *