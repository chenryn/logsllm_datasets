title:Efficient Multi-Key Homomorphic Encryption with Packed Ciphertexts
with Application to Oblivious Neural Network Inference
author:Hao Chen and
Wei Dai and
Miran Kim and
Yongsoo Song
Eﬃcient Multi-Key Homomorphic Encryption with Packed
Ciphertexts with Application to Oblivious Neural Network
Inference
Hao Chen1, Wei Dai1, Miran Kim2, and Yongsoo Song1
1 Microsoft Research, Redmond, USA
{haoche,Wei.Dai,Yongsoo.Song}@microsoft.com
2 University of Texas, Health Science Center at Houston, USA
PI:EMAIL
Abstract. Homomorphic Encryption (HE) is a cryptosystem which supports computation on en-
crypted data. L´opez-Alt et al. (STOC 2012) proposed a generalized notion of HE, called Multi-Key
Homomorphic Encryption (MKHE), which is capable of performing arithmetic operations on ci-
phertexts encrypted under diﬀerent keys.
In this paper, we present multi-key variants of two HE schemes with packed ciphertexts. We present
new relinearization algorithms which are simpler and faster than previous method by Chen et al.
(TCC 2017). We then generalize the bootstrapping techniques for HE to obtain multi-key fully
homomorphic encryption schemes. We provide a proof-of-concept implementation of both MKHE
schemes using Microsoft SEAL. For example, when the dimension of base ring is 8192, homomor-
phic multiplication between multi-key BFV (resp. CKKS) ciphertexts associated with four parties
followed by a relinearization takes about 116 (resp. 67) milliseconds.
Our MKHE schemes have a wide range of applications in secure computation between multiple
data providers. As a benchmark, we homomorphically classify an image using a pre-trained neural
network model, where input data and model are encrypted under diﬀerent keys. Our implementation
takes about 1.8 seconds to evaluate one convolutional layer followed by two fully connected layers
on an encrypted image from the MNIST dataset.
Keywords: multi-key homomorphic encryption; packed ciphertext; ring learning with errors; neural
networks
1
Introduction
As large amount of data are being generated and used for driving novel scientiﬁc discoveries, the eﬀective
and responsible utilization of large data remain to be a big challenge. This issue might be alleviated
by outsourcing to public cloud service providers with intensive computing resources. However, there
still remains a problem in privacy and security of outsourcing data and analysis. In the past few years,
signiﬁcant progresses have been made on cryptographic techniques for secure computation. Among the
techniques for secure computation, Multi-Party Computation (MPC) and Homomorphic Encryption (HE)
have received increasing attention in the past few years due to technical breakthroughs.
The history of MPC dates back three decades ago [49, 5], and since then it has been intensively
studied in the theory community. In this approach, two or more parties participate in an interactive
protocol to compute a function on their private inputs, where only the output of the function is revealed
to the parties. Recent years witnessed a large body of works on improving the practical eﬃciency of
MPC, and state-of-the-art protocols have achieved orders of magnitude improvements on performance
(see e.g. [48, 20, 36]). However, these protocols are still inherently ineﬃcient in terms of communication
complexity: the number of bits that the parties need to exchange during the protocol is proportional
to the product between the complexity of the function and the number of parties. Therefore, the high
communication complexity remains the main bottleneck of MPC protocols.
Moreover, the aforementioned MPC protocols may not be desirable for cloud-based applications, as
all the parties involved need to perform local computation proportional to the complexity of the function.
However, in practical use-cases, we cannot expect the data providers to either perform large amount of
work or stay online during the entire protocol execution. Another model was proposed where the data
owners secret-share their data with a small number of independent servers, who perform an MPC to
generate the computation result [23, 43]. These protocols have good performance and they moved the
burden from the data providers to the servers, but their privacy guarantees rely on the assumption that
the servers do not collude.
HE refers to a cryptosystem that allows computing on encrypted data without decrypting them, thus
enabling securely outsourcing computation in an untrusted cloud. There have been signiﬁcant technical
advances on HE after Gentry’s ﬁrst construction [24]. For example, one can encrypt multiple plaintext
values into a single packed ciphertext, and use the single instruction multiple data (SIMD) techniques to
perform operations on these values in parallel [47, 26]. Hence, HE schemes with packing techniques [7,
6, 22, 16] have good amortized complexity per plaintext value, and they have been applied to privacy-
preserving big data analysis [39, 11, 37]. However, traditional HE schemes only allow computation on
ciphertexts decryptable under the same secret key. Therefore, HE does not naturally support secure
computation applications involving multiple data providers, each providing its own secret key.
L´opez-Alt et al. [42] proposed a Multi-Key Homomorphic Encryption (MKHE) scheme, which is
a cryptographic primitive supporting arithmetic operations on ciphertexts which are not necessarily
decryptable to the same secret key. In addition to solving the aforementioned issues of HE, MKHE can
be also used to design round-eﬃcient MPC protocols with minimal communication cost [44]. In addition,
an MPC protocol from MKHE satisﬁes the on-the-ﬂy MPC [42] property, where the circuit to be evaluated
can be dynamically decided after the data providers upload their encrypted data.
Despite its versatility, MKHE has been seldom used in practice. Early studies [19, 44, 45] used a multi-
key variant of the GSW scheme [28]. These constructions have large ciphertexts and their performance
does not scale well with the number of parties. Previous work [8, 9] proposed MKHE schemes with short
ciphertexts, with the caveat that one ciphertext encrypts only a single bit. The only existing MKHE
scheme with packed ciphertexts [13, 50] is a multi-key variant of the BGV scheme [7]. Note that all
the above studies were purely abstract with no implementation given, and it remains an open problem
whether an MKHE scheme supporting SIMD operations can be practical.
1.1 Our Contributions
We design multi-key variants of the BFV [6, 22] and CKKS [16] schemes. We propose a new method
for generating a relinearization key which is simpler and faster compared to previous technique in [13].
Furthermore, we adapt the state-of-the-art bootstrapping algorithms for these schemes [12, 14, 9] to the
multi-key scenario to build Multi-Key Fully Homomorphic Encryptions with packed ciphertexts. Finally,
we give a proof-of-concept implementation of our multi-key schemes using Microsoft SEAL [46] and
present experimental results. To the best of our knowledge, this is the ﬁrst practical implementation of
MKHE schemes that support packed ciphertexts.
We also present the ﬁrst viable application of MKHE that securely evaluates a pre-trained convolu-
tional neural network (CNN) model. We build an eﬃcient protocol where a cloud server provides on-line
prediction service to a data owner using a classiﬁer from a model provider, while protecting the privacy
of both data and model using MKHE. Our scheme with support for the multi-key operations makes
it possible to achieve this at a low end-to-end latency, and near-optimal cost for the data and model
providers, as shown in Fig. 1. The server can store numerous ciphertexts encrypted under diﬀerent keys,
but the computational cost of a certain task depends only on the number of parties related to the circuit.
1.2 Overview of Our Construction
Let R = Z[X]/(X n+1) be the cyclotomic ring with a power-of-two dimension n, and si ∈ R be the secret of
the i-th party. The starting point of the construction of a a ring-based MKHE scheme is the requirement
that the resulting scheme should be able to handle homomorphic computations on ciphertexts under
independently generated secret keys. A ciphertext of our MKHE scheme associated to k diﬀerent parties
is of the form ct = (c0, c1, . . . , ck) ∈ Rk+1
for a modulus q, which is decryptable by the concatenated
q
Fig. 1. High-level overview of the application to oblivious neural network inference.
secret sk = (1, s1, . . . , sk). In other words, its phase µ = (cid:104)ct, sk(cid:105) (mod q) is a randomized encoding of a
plaintext message m corresponding to the base scheme.
Homomorphic multiplication of BFV or CKKS consists of two steps: tensor product and relineariza-
tion. The tensor product of two input ciphertexts satisﬁes (cid:104)ct1 ⊗ ct2, sk⊗ sk(cid:105) = (cid:104)ct1, sk(cid:105)·(cid:104)ct2, sk(cid:105), so it is a
valid encryption under the tensor squared secret sk ⊗ sk. In the relinearization step, we aim to transform
the extended ciphertext ct = ct1 ⊗ ct2 ∈ R(k+1)2
into a canonical ciphertext encrypting the same message
under sk. This step can be understood as a key-switching process which requires a special encryption of
sk ⊗ sk. We note that sk ⊗ sk contains entries sisj which depend on secrets of two distinct parties. Hence
a relinearization key corresponding to non-linear entries cannot be generated by a single party, diﬀerent
from the traditional HE schemes.
q
We propose an RLWE-based cryptosystem to achieve this functionality. It looks similar to the ring
variant of GSW [28, 21] but our scheme supports some operations between ciphertexts under diﬀerent
keys. Let g ∈ Zd be an integral vector, called the gadget vector. This scheme assumes the Common
Reference String (CRS) model so all parties share a random polynomial vector a ∈ Rd
q . Each party
i generates a special encryption of secret si by itself, which is a matrix Di = [di,0|di,1|di,2] ∈ Rd×3
satisfying di,0 + si · di,1 ≈ ri · g (mod q) and di,2 ≈ ri · a + si · g (mod q) where ri is a small polynomial
sampled from the key distribution. It is published as the evaluation key of the i-th party.
We present two relinearization methods with diﬀerent advantages. For each pair 1 ≤ i, j ≤ k, the ﬁrst
method combines the i-th evaluation key Di with the j-th public key bj ≈ −sj · a (mod q) to generate
such that Ki,j · (1, si, sj) ≈ sisj · g (mod q). That is, Ki,j can be used to relinearize one
Ki,j ∈ Rd×3
jsj ≈ ci,jsisj (mod q).
entry ci,j of an extended ciphertext into a triple (c(cid:48)
This method can be viewed as a variant of the previous GSW ciphertext extension proposed in [44]. In
particular, each row of Ki,j consists of three polynomials in Rq (compared to O(k) dimension of previous
work [13, 50]), so that the bit size of a shared relinearization key {Ki,j}1≤i,j≤k is O(dk2 · n log q) and the
complexity of key generation is O(d2k2) polynomial operations modulo q (see Section 3 for details). The
relinearization algorithm repeats O(k2) key-switching operations from sisj to (1, si, sj), so its complexity
is O(dk2) operations in Rq. We note that Ki,j can be pre-computed before multi-key operations, and a
generated key can be reused for any computation related to the parties i and j.
j) such that c(cid:48)
is(cid:48)
0 + c(cid:48)
i + c(cid:48)
q
q
0, c(cid:48)
i, c(cid:48)
Our second approach directly linearizes each of the entries of an extended ciphertext by multiplying
the j-th public key bj and i-th evaluation key Di in a recursive way. The ﬁrst solution should generate
and store a shared relinearization key {Ki,j}1≤i≤k, so its space and time complexity grow quadratically
on k. However, the second algorithm allows us to keep only the individual evaluation keys which is linear
on k. Furthermore, it signiﬁcantly reduces the variance of additional noise from relinearization, so that
we can use a smaller parameter while keeping the same functionality. The only disadvantage is that, if
we exclude the complexity of a shared key generation from the ﬁrst approach, then the second algorithm
entails additional costs (about 1/3 of the complexity of the ﬁrst relinearization). However, it is ignorable
compared to the overall performance gain from its various advantages. Finally, we adapt the modulus
raising technique [27] to the second approach to reduce the noise growth even more.
As an orthogonal issue, the bootstrapping of packed MKHE schemes has not been studied in the
literature. We generalize the existing bootstrapping methods for HE schemes [25, 32, 12, 14, 9] to the
multi-key setting. The main issue of generalization is that the pipeline of bootstrapping includes some ad-
vanced functionalities such as slot permutation. We resolve this issue and provide all necessary operations
by applying the multi-key-switching technique in [10] to Galois automorphism.
Finally, we apply the state-of-art optimization techniques for implementing HE schemes [4, 30, 15]
to our MKHE schemes for performance improvement. For example, we implement full Residue Number
System (RNS) variants of MKHE schemes and use an RNS-friendly decomposition method [4, 30, 15] for
relinearization, thereby avoiding expensive high-precision arithmetic.
1.3 Related Works
L´opez-Alt et al. [42] ﬁrstly proposed an MKHE scheme based on NTRU. After that, Clear and Mc-
Goldrick [19] suggested a multi-key variant of GSW together with ciphertext extension technique to
design an MKHE scheme and it was simpliﬁed by Mukherjee and Wichs [44]. Peikert and Shiehian [45]
developed two multi-hop MKHE schemes based on the same multi-key GSW scheme. However, these
schemes could encrypt only a single bit in a huge extended GSW ciphertext.
Brakerski and Perlman [8] suggested an MKHE scheme with short ciphertexts whose length grow
linearly on the number of parties involved. Chen, Chillotti and Song [10] improved its eﬃciency by
applying the framework of TFHE [17] with the ﬁrst implementation of MKHE primitive. However, their
scheme does not support the packing technique, thereby having similar inherent (dis)advantages from
TFHE.
Chen, Zhang and Wang [13] described a multi-key variant of BGV [7] by adapting the multi-key GSW
scheme for generating a relinearization key. Their performance was improved by Zhou et al. [50], however,
each key-switching key from si · sj to the ordinary key has O(k) components. In addition, these works
did not provide any implementation or empirical result. This study is an extension of these works in the
sense that our relinearization method and other optimization techniques can be applied to BGV as well.
We also stress that the performance of previous batch MKHE schemes can be improved by observing the
sparsity of evaluation keys, but this point was not pointed out in the manuscripts.
2 Background
2.1 Notation
All logarithms are in base two unless otherwise indicated. We denote vectors in bold, e.g. a, and matrices
in upper-case bold, e.g. A. We denote by (cid:104)u, v(cid:105) the usual dot product of two vectors u, v. For a real
number r, (cid:98)r(cid:101) denotes the nearest integer to r, rounding upwards in case of a tie. We use x ← D to denote
the sampling x according to distribution D. For a ﬁnite set S, U (S) denotes the uniform distribution
on S. We let λ denote the security parameter throughout the paper: all known valid attacks against the
cryptographic scheme under scope should take Ω(2λ) bit operations.
2.2 Multi-Key Homomorphic Encryption
A multi-key homomorphic encryption is a cryptosystem which allows us to evaluate an arithmetic circuit
on ciphertexts, possibly encrypted under diﬀerent keys.
Let M be the message space with arithmetic structure. An MKHE scheme MKHE consists of ﬁve PPT
algorithms (Setup, KeyGen, Enc, Dec, Eval). We assume that each participating party has a reference
(index) to its public and secret keys. A multi-key ciphertext implicitly contains an ordered set T =
{id1, . . . , idk} of associated references. For example, a fresh ciphertext ct ← MKHE.Enc(µ; pkid) corresponds
to a single-element set T = {id} but the size of reference set gets larger as the computation between
ciphertexts from diﬀerent parties progresses.
• Setup: pp ← MKHE.Setup(1λ). Takes the security parameter as an input and returns the public param-
eterization. We assume that all the other algorithms implicitly take pp as an input .
• Key Generation: (sk, pk) ← MKHE.KeyGen(pp). Outputs a pair of secret and public keys.
• Encryption: ct ← MKHE.Enc(µ; pk). Encrypts a plaintext µ ∈ M and outputs a ciphertext ct ∈ {0, 1}∗.
• Decryption: µ ← MKHE.Dec(ct;{skid}id∈T ). Given a ciphertext ct with the corresponding sequence of
secret keys, outputs a plaintext µ.
• Homomorphic evaluation:
ct ← MKHE.Eval(C, (ct1, . . . , ct(cid:96)),{pkid}id∈T ).
Given a circuit C, a tuple of multi-key ciphertexts (ct1, . . . , ct(cid:96)) and the corresponding set of public keys
{pkid}id∈T , outputs a ciphertext ct. Its reference set is the union T = T1 ∪ ··· ∪ T(cid:96) of reference sets Tj of
the input ciphertexts ctj for 1 ≤ j ≤ (cid:96).
Semantic Security. For any two messages µ0, µ1 ∈ M, the distributions {MKHE.Enc(µi; pk)} for i = 0, 1
should be computationally indistinguishable where pp ← MKHE.Setup(1λ) and (sk, pk) ← MKHE.KeyGen(pp).
Correctness and Compactness. An MKHE scheme is compact if the size of a ciphertext relevant to
k parties is bounded by poly(λ, k) for a ﬁxed polynomial poly(·,·).
For 1 ≤ j ≤ (cid:96), let ctj be a ciphertext (with reference set Tj) such that MKHE.Dec(ctj,{skid}id∈Tj ) = µj.
Let C : M(cid:96) → M be a circuit and ct ← MKHE.Eval(C, (ct1, . . . , ct(cid:96)),{pkid}id∈T ) for T = T1 ∪ ··· ∪ T(cid:96).
Then,
MKHE.Dec(ct,{skid}id∈T ) = C(µ1, . . . , µ(cid:96))
(1)
with an overwhelming probability. The equality of (1) can be substituted by approximate equality similar
to the CKKS scheme for approximate arithmetic [16].
2.3 Ring Learning with Errors
Throughout the paper, we assume that n is a power-of-two integer and R = Z[X]/(X n + 1). We write
Rq = R/(q · R) for the residue ring of R modulo an integer q. The Ring Learning with Errors (RLWE)
assumption is that given any polynomial number of samples (ai, bi = ai · s + ei) ∈ R2
q, where ai, s
are uniformly random in Rq and ei is drawn from an error distribution, the bi’s are computationally
indistinguishable from uniformly random elements from Rq. In our implementation, we sample the secret
s uniformly at random from the set of binary polynomials.
2.4 Gadget Decomposition
Let g = (gi) ∈ Zd be a gadget vector and q an integer. The gadget decomposition, denoted by g−1, is a
function from Rq to Rd which transforms an element a ∈ Rq into a vector u = (u0, . . . , ud−1) ∈ Rd of
small polynomials such that a =(cid:80)d−1
i=0 gi · ui (mod q).
The gadget decomposition technique is widely used in the construction of HE schemes. For exam-
ple, homomorphic evaluation of a nonlinear circuit is based on the key-switching technique and most of
HE schemes exploit various gadget decomposition method to control the noise growth. There have been
suggested in the literature various decomposition methods such as bit decomposition [6, 7], base decom-
position [21, 17] and RNS-based decomposition [4, 30]. Our implementation exploits an RNS-friendly
decomposition for the eﬃciency.
3 Renearizing Multi-key Ciphertexts
This section provides a high-level description of our MKHE schemes and explain how to perform the
relinearization procedures which are core operations in homomorphic arithmetic.
3.1 Overview of HEs with Packed Ciphertexts
In recent years, there have been remarkable advances in the performance of HE schemes. For example,
the ciphertext packing technique allows us to encrypt multiple data in a single ciphertext and perform
parallel homomorphic operations in a SIMD manner. Currently the batch HE schemes such as BGV [7],
BFV [6, 22] and CKKS [16] are the best-performing schemes in terms of amortized size and timing per