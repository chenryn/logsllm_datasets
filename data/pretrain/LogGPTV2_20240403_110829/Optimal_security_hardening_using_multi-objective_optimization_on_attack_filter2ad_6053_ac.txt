ery (monetary), public embarrassment (severity) and
law penalty (severity) – denoted by x1j, x2j , x3j, x4j
and x5j .
Step2: Estimate the expected number of attack occurrence,
F reqj, resulting in the consequences. A security man-
ager can estimate the expected number of attack from
the organization-based historical data or public histor-
ical data.1
Step3: Assess a single value function, Vij(xij ), for each pos-
sible consequence. The purpose of this function is to
normalize diﬀerent unit measures so that the values
can be summed together under a single standard scale.
Vij(xij) =
xij
M ax
j
xij
× 100
, 1 ≤ i ≤ 5
(1)
Step4: Assign a preference weight factor, Wi, to each pos-
sible consequence. A security manager can rank each
outcome on a scale of 1 to 100. The outcome with the
most concern would receive 100 points. The manager
ranks the other attributes relative to the ﬁrst. Finally,
the ranks are normalized and set as Wi.
The potential damage for the attribute can then be calcu-
lated from the following equation.
Pj = F reqj × 5X
WiVij(xij)
(2)
i=1
When using an attack tree, a better quantitative repre-
sentation of the cost is obtained by considering the resid-
ual damage once a set of security policies are implemented.
Hence, we augment each attribute in the attack tree with a
value signifying the amount of potential damage residing in
the subtree rooted at the attribute and the attribute itself.
Definition 7. Augmented-Attack Tree
Let AT = (sroot, S, τ, ε) be an attack tree. An augmented-
attack tree ATaug = AT|(cid:14)I, V (cid:15) is obtained by associating a
tuple (cid:14)Ii, Vi(cid:15) to each si ∈ S, where
1. Ii is an indicator variable for the attribute si, where
(
Ii =
0
1
, if si is f alse
, if si is true
2. Vi is a value associated with the attribute si.
1Also known as an incident report published annually in
many sites such as CERT/CC or SANS.ORG.
In this work, all attributes si ∈ Nexternal are given a zero
value. The value associated with sj ∈ Ninternal ∪ {sroot} is
then computed recursively as follows.
8>:
Vj =
P
Vk
k|(sk,sj )∈τ
M ax Vk
k|(sk,sj )∈τ
+ IjPj
, if dj is AN D
+ IjPj
, if dj is OR
(3)
Ideally, Pj is same for all identical attributes in the multi-
set. We took a “panic approach” in calculating the value at
each node, meaning that given multiple subtrees are rooted
at an attribute with an OR decomposition, we choose the
maximum value. We do so because an attacker’s capabilities
and preferences cannot be known in advance. The residual
damage of the augmented tree is then deﬁned as follows.
Definition 8. Residual Damage
Given an augmented-attack tree (sroot, S, τ, ε)|(cid:14)I, V (cid:15) and
a vector (cid:2)T = (Ti), Ti ∈ {0, 1}; 1 ≤ i ≤ m, the residual
damage is deﬁned as the value associated with sroot, i.e.,
RD( (cid:2)T ) = Vroot
6.2 Evaluating Security Cost
Similar to the potential damage, the security manager ﬁrst
lists possible security costs for the implementation of a secu-
rity control, assigns the weight factor on them, and computes
the normalized value. The only diﬀerence is that there is no
expected number of occurrence needed in the evaluation of
security cost.
In this study, we have identiﬁed ﬁve diﬀer-
ent costs of implementing a security control – installation
cost (monetary), operation cost (monetary), system down-
time (time), incompatibility cost (scale), and training cost
(monetary). The overall cost Cj , for the security control
SCj , is then computed in a similar manner as for potential
damage, with an expected frequency of 1. The total secu-
rity cost for a set of security controls implemented is then
deﬁned as follows.
Definition 9. Total Security Control Cost
Given a set of m security controls, each having a cost
Ci; 1 ≤ i ≤ m, and a vector (cid:2)T = (Ti), Ti ∈ {0, 1}; 1 ≤
i ≤ m, the total security control cost is deﬁned as
mX
SCC( (cid:2)T ) =
(TiCi)
i=1
7. PROBLEM FORMULATION
The two objectives we consider in this study are the total
security control cost and the residual damage in the attack
tree of our example network model. For the attack tree
shown in Fig. 3, we identiﬁed 19 diﬀerent security controls
possible by patching or disabling of diﬀerent services, as well
as by changing ﬁle access permissions. With about half a
million choices available (219), an enumerated search would
not be an eﬃcient approach to ﬁnd the optima. The security
controls are listed in Table 3. We also tried to maintain some
relative order of importance between the diﬀerent services,
as in a real-world scenario, when computing the potential
damage and security control costs.
Security Control
Action
Security Control
Action
SC1/SC2
SC3/SC4
SC5
SC6/SC7
SC8
SC9
SC10
Disable/Patch suid @ 196.216.0.2
Disable/Patch LICQ @ 196.216.0.2
Disable “at” @ 196.216.0.3
Disable/Patch LICQ @ 196.216.0.3
Disable Rsh @ 196.216.0.1
Disable Ftp @ 196.216.0.1
Disconnect Internet @ 196.216.0.1
SC11
SC12/SC13
SC14/SC15
SC16
SC17
SC18
SC19
Chmod home directory @ 196.216.0.1
Disable/Patch Ftp @ 196.216.0.10
Disable/Patch SSH @ 196.216.0.10
Disconnect Internet @ 196.216.0.10
Disable Rsh @ 196.216.0.10
Patch FTP/.rhost @ 196.216.0.10
Chmod home directory @ 196.216.0.10
Table 3: Security controls for example network model.
Problem 1. The Single-objective Optimization Problem
Given an augmented-attack tree (sroot, S, τ, ε)|(cid:14)I, V (cid:15) and
i ∈ {0, 1}; 1 ≤
m security controls, ﬁnd a vector (cid:2)T ∗ = (T ∗
i ≤ m, which minimizes the function
i ), T ∗
αRD( (cid:2)T ) + βSCC( (cid:2)T )
where, α and β are preference weights for the residual dam-
age and the total cost of security control respectively, 0 ≤
α, β ≤ 1 and α + β = 1.
The single-objective problem is the most likely approach to
be taken by a decision maker. Given only two objectives, a
preference based approach might seem to provide a solution
in accordance with general intuition. However, as we ﬁnd in
the case of our example network model, the quality of the
solution obtained can be quite sensitive to the assignment
of the weights. To demonstrate this aﬀect, we run multiple
instances of the problem using diﬀerent combination of val-
ues for α and β. α is varied in the range of [0, 1] in steps of
0.05. β is always set to 1 − α.
Problem 2. The Multi-objective Optimization Problem
Given an augmented-attack tree (sroot, S, τ, ε)|(cid:14)I, V (cid:15) and
i ∈ {0, 1}; 1 ≤
m security controls, ﬁnd a vector (cid:2)T ∗
i ≤ m, which minimizes the total security control cost and
the residual damage.
i ), T ∗
= (T ∗
The next level of sophistication is added by formulating
the minimization as a multi-objective optimization problem.
The multi-objective approach alleviates the requirement to
specify any weight parameters and hence a better global pic-
ture of the solutions can be obtained.
Problem 3. The Multi-objective Robust Optimization
Problem
Let (cid:2)T = (Ti) be a boolean vector. A perturbed assignment
of radius r, (cid:2)Tr, is obtained by inverting the value of at most
r elements of the vector (cid:2)T . The robust optimization problem
can then be deﬁned as follows.
Given an augmented-attack tree (sroot, S, τ, ε)|(cid:14)I, V (cid:15) and
i ∈ {0, 1}; 1 ≤
m security controls, ﬁnd a vector (cid:2)T ∗ = (T ∗
i ≤ m, which minimizes the total security control cost and
the residual damage, satisfying the constraint
RD( (cid:2)Tr) − RD( (cid:2)T ) ≤ D
i ), T ∗
max
(cid:3)Tr
where, D is the maximum perturbation allowed in the resid-
ual damage.
The third problem is formulated to further strengthen the
decision process by determining robust solutions to the prob-
lem. Robust solutions are less sensitive to failures in security
controls and hence subside any repeated requirements to re-
evaluate solutions in the event of a security control failure.
We use a simple genetic algorithm (SGA) [9] to solve Prob-
lem 1. NSGA-II is used to solve Problem 2 and 3.
NSGA-II for security optimization
NSGA-II starts with a population P0 of N randomly gen-
erated security control vectors (cid:2)T . For each trial solution,
the total security control cost is calculated using Def. 9. To
compute the residual damage, the attributes covered by a
security control vector in the attack tree are decided using
Table 3 and set to false. The truth values for the remaining
attributes in Nexternal are set to true. A DFS traversal of
the tree is then used to determine the truth values of the
internal nodes using the decomposition at each node. This
enables us to compute the value Vroot for the root node –
the residual damage – using Eq. 3.
A generation index t = 0, 1, . . . , GenM AX keeps track of
the number of iterations of NSGA-II. Each generation of the
algorithm then proceeds as follows. An oﬀspring population
Qt is ﬁrst created from the parent population Pt by applying
the usual genetic operations of selection, crossover and mu-
tation [9]. The residual damage and total security control
cost corresponding to each solution in the child population
are also computed.
Figure 4: One generation of NSGA-II.
The parent and oﬀspring populations are combined to
form a population Rt = Pt∪Qt of size 2N . A non-dominated
sorting is applied to Rt to rank each solution based on the
number of solutions that dominate it. A rank k solution
indicates that there are k other solutions of diﬀerent ranks
that dominate it. For Problem 3, the solutions which vi-
olate the robustness constraint, i.e. an infeasible solution,
are given unique ranks higher than the highest feasible so-
lution rank. The ranking starts in ascending order from the
infeasible solution with least constraint violation.
The population Pt+1 is generated by selecting N solutions
from Rt. The preference of a solution is decided based on its
rank: lower the rank, higher the preference. However, since
not all solutions from Rt can be accommodated in Pt+1, a
choice is likely to be made when the number of solutions of
the currently considered rank is more than the remaining
positions in Pt+1.
Instead of making an arbitrary choice,
NSGA-II uses an explicit diversity-preservation mechanism.
The mechanism, based on a crowding distance metric [8],
gives more preference to a solution with a lesser density of
solutions surrounding it, thereby enforcing diversity in the
population. The NSGA-II crowding distance metric for a
solution is the sum of the average side-lengths of the cuboid
generated by its neighboring solutions in objective space.
Fig. 4 depicts a single generation of the algorithm.
The algorithm parameters are set as follows: population
size = 100, number of generations = 250, crossover proba-
bility = 0.9, and mutation probability = 0.1. We ran each
instance of the algorithms ﬁve times to check for any sen-
sitivity of the solutions obtained from diﬀerent initial pop-
ulations. Since the solutions always converged to the same
optima, we dismiss the presence of such sensitivity.
8. RESULTS AND DISCUSSION
We ﬁrst present the sensitivity results of NSGA-II and
SGA to their parameters.
Increasing the population size
from 100 to 500 gives us a faster convergence rate, although
the solutions reported still remains the same. The eﬀect
of changing the crossover probability in the range of 0.7 to
0.9 does not lead to any signiﬁcant change of the solutions
obtained. Similar results were observed when changing the
mutation probability from 0.1 to 0.01. The solutions also do
not change when the number of generations is changed from
250 to 500. Since we did not observe any signiﬁcant change
in the solutions by varying the algorithm parameters, the