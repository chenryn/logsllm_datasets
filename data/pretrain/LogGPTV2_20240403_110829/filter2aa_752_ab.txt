件的 include 目录。你必须这样编译 reciprocal.cpp，以使 g++能够从../include 文件夹中搜索
reciprocal.hpp 文件： 
% g++ -c –I ../include reciprocal.cpp 
有时你会希望从编译命令中定义一些宏。例如，在发布版的程序中，你不希望在
reciprocal.cpp 中出现多余的断言检查——断言只有在程序的调试阶段才能起到相应的作
用。NDEBUG 宏可以用于关闭断言检查。你可以在 reciprocal.cpp 中添加 #define 语句，但
是这要求对源码的修改。更简单的方法是像这样直接通过命令行定义 NDEBUG 宏： 
% g++ -c –D NDEBUG reciprocal.cpp 
如果你希望将 NDEBUG 宏定义为某个特定的值，下面这个命令行可以做到： 
% g++ -c –D NDEBUG=3 reciprocal.cpp 
如果你现在编译的正是准备发布的版本，你或许希望 GCC 能将得到的代码尽量优化以
提高运行速度。你可以通过指明 -O2 选项要求 GCC 进行代码优化。（GCC 有许多不同等级
的代码优化，不过 2 级对多数情况都是适当的。）下面的命令可以打开优化并编译
reciprocal.cpp： 
% g++ -c –O2 reciprocal.cpp 
需要注意的是，优化选项会导致你的程序难以被调试程序（参考 1.4 节，“用 GDB 进行
调试”）调试。此外，在某些特例中，启用了优化的编译可能会将一些之前没有被发现的 bug
www.AdvancedLinuxProgramming.com 
8
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
显现出来。 
Gcc 和 g++ 还支持其它许多选项。获取完整列表的最佳方式是阅读相应的在线文档。
可以在命令行下输入以下命令以获取文档： 
% info gcc 
1.3 用 GNU Make 自动完成编译过程 
如果你习惯于 Windows 环境下的程序设计，你一定非常熟悉各种继承开发环境（IDE）
的使用。你只需将代码文件加入工程，IDE 会自动帮你完成编译构建的过程。尽管在 Linux
平台上也有一些 IDE 实现，本书中我们不会进行讨论。相反的，我们要介绍的是如何利用
GNU Make 程序自动编译你的代码——这才是每个 Linux 程序员的工作方式。 
Make 程序背后隐藏的理念是非常简单的。你告诉 make 程序你需要完成什么目标
（target），以及达成这些目标的规则（rules）。你还可以通过指定依赖关系（dependency）指
明需要重新构建某些目标的条件。 
在我们的示例项目 reciprocal 中，有三个目标是非常明显的：reciprocal.o、main.o 和
reciprocal 程序自己。在之前手工编译的过程中，你已经理清了构建这些目标的规则。依赖
性则需要进一步的理解。很清楚的，reciprocal 依赖于 main.o 和 reciprocal.o，因为没有这
两个对象文件的话，你无法进行链接。而每当源码文件被修改之后，对象文件都应被重新编
译。还有一个需要注意的地方，就是如果 reciprocal.hpp 文件被修改，则两个对象文件均应
被重新编译。这是因为两个对象对应的源码文件都包含了这个文件。 
除了这些显而易见的目标，你始终应该指定一个名为 clean 的目标。这个目标对应的规
则是删除所有编译生成的对象文件和程序文件，因此下次编译将是从头开始。这个目标的规
则通常使用 rm 命令进行删除操作。 
你可以通过一个 Makefile 将这些信息告诉 make 程序。这个 Makefile 可以写成这样： 
reciprocal: main.o reciprocal.o 
        g++ $(CFLAGS) –o reciprocal main.o reciprocal.o 
main.o: main.c reciprocal.hpp 
        gcc $(CFLAGS) –c main.c 
reciprocal.o: reciprocal.cpp reciprocal.hpp 
        g++ $(CFLAGS) –c reciprocal.cpp 
clean: 
        rm –f *.o reciprocal 
可以看出，目标写在最左侧一列，之后跟随一个冒号，然后是所有依赖项。用于构建目
标的对应规则写在紧接着的下一行。（暂时忽略 $(CFLAGS) 这些东西，我们稍候会讲解。）
包含规则的行必须以一个 Tab 字符（退格键）起头，否则 make 程序将无法识别。如果你用
Emacs 编辑 Makefile，Emacs 会帮助你打理排版方面的细节。 
如果你已经删除了编译得到的对象文件，你只需要在命令行中输入 
% make 
然后你就会看见这样的输出： 
www.AdvancedLinuxProgramming.com 
9
% make 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
gcc  –c main.c 
g++  -c reciprocal.cpp 
g++  -o reciprocal main.o reciprocal.o 
可以看出，make 自动建立了这些对象文件并完成了链接的步骤。如果你现在对 main.c
稍加修改，然后重新输入 make 命令，你将会看见下面的输出： 
% make 
gcc  -c main.c 
g++  -o reciprocal main.o reciprocal.o 
可以看出，make 正确地选择了重新编译生成 main.o 并重新链接整个程序，而没有去碰
reciprocal.cpp，因为 reciprocal.o 的任何一个依赖项都没有发生改变。 
前面看到的 $(CFLAGS) 是一个 make 变量。你可以在 Makefile 中定义这个变量，也
可以在命令行中定义。GNU make 会在执行这个规则的时候将变量的值代入。因此，假如要
让编译器打开优化并重新编译程序，你可以这样操作： 
% make clean 
rm –f *.o reciprocal 
% make CFLAGS=-O2 
gcc -O2 –c main.c 
g++ -O2 –c reciprocal.o 
g++ -O2 –o reciprocal main.o reciprocal.o 
应该注意到，-O2 被替换到了先前每个 $(CFLAGS) 出现的地方。 
在这一小节中，我们只向你展示了 make 最基本的用途。你可以通过下面这个命令获取
更多的信息： 
% info make 
在这份手册中，你会看到如何简化对 Makefile 的维护，如何降低必须写的规则数量，
以及如何自动计算依赖性关系等。你还可以从《GNU, Autoconf, Automake, and Libtool》一
书中找到更多的相关信息（作者：Gary V.Vaughan, Ben Elliston, Tom Tromey 以及 Ian Lance 
Taylor，2000 年由 New Riders 出版社出版）。 
1.4 用 GDB 进行调试 
调试器是一个工具，可以用来帮助你检查为什么程序行为与预期不同。你将经常进行这
样的检查工作5。GNU调试器（The GNU Debugger, GDB）是一个被多数Linux程序员使用的
调试器程序。利用GDB，你可以单步跟踪你的程序，设置断点以及检查局部变量的值。 
1.4.1 在编译时加入调试信息 
要使用 GDB，你必须在编译时为对象文件加入调试信息。只需在编译器选项中加入 –g
就可以做到这点。如果你使用前面介绍的 Makefile，你可以在运行 make 的时候将 CFLAGS
www.AdvancedLinuxProgramming.com 
10
5 ……除非你的程序每次都在第一遍就工作正常。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
设置为 –g，如下所示： 
% make CFLAGS=-g 
gcc –g –c main.c 
g++ -g –c reciprocal.cpp 
g++ -g –o reciprocal main.o reciprocal.o 
当你指定 -g 选项编译的时候，编译器会在生成的对象文件和执行文件中加入额外的信
息。调试器则可以通过这些信息获取地址与源码位置的对应关系、局部变量的输出方法等信
息。 
1.4.2 运行 GDB 
你可以通过输入下面的命令启动 gdb： 
% gdb reciprocal 
当 gdb 启动之后，你应该会看见它的提示符： 
(gdb) 
第一步要做的就是在调试器中运行你的程序：输入命令 run，之后跟着运行程序需要的
所有参数。试着这样不提供参数运行这个程序： 
(gdb) run 
Starting program: reciprocal 
Program received signal SIGSEGV, Segmentation fault. 
__strtol_internal (nptr=0x0, endptr=0x0, base=10, group=0) 
at strtol.c:287 
287      strtol.c: No such file or directory. 
(gdb) 
出现这个问题的原因在于 main 函数中没有用于检查错误情况的代码。程序希望得到一
个参数，而在这次调用过程中它没有得到需要的参数。那条 SIGSEGV 的消息标志着程序的
崩溃。GDB 知道程序实际是在 __strtol_internal 这个函数中崩溃的。这个函数属于标准哭
的一部分，而标准库的源码并没有安装在系统中，所以会出现“No such file or directory”（找
不到文件或目录）的提示信息。你可以通过 where 命令查看调用堆栈： 
(gdb) where 
#0  _strtol_internal (nptr=0x0, endptr=0x0, base=10, group=0) 
    at strtol.c:287 
#1  0x40096fb6 in atoi (nptr=0x0) at ../stdlib/stdlib.h:251 
#2  0x804863e in main (argc=1, argv=0xbffff5e4) at main.c:8 
可以看出，main 函数以一个 NULL 指针为参数调用了 atoi，而正是它导致了问题的出
现。 
你可以通过 up 命令沿着调用堆栈向上回溯两层，回到 main 函数中： 
(gdb) up 2 
#2  0x804863e in main (argc=1, argv=0xbffff5e4) at main.c:8 
8           i = atoi (argv[1]); 
www.AdvancedLinuxProgramming.com 
11
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
可以发现，gdb 找到了 main.c，并且现实了出错的函数调用所在处的代码。你可以用
print 命令查看变量的值： 
(gdb) print argv[1] 
$2 = 0x0 
这再次证实了出错的原因是传递给 atoi 的 NULL 指针在作怪。 
你可以利用 break 命令为程序设置断点： 
(gdb) break main 
Breakpoint 1 at 0x804862e: file main.c, line 8. 
这个命令在main函数的第一行设置了断点。6现在试着运行这个程序。这次我们传递一
个参数： 
(gdb) run 7 
Starting program: reciprocal 7 
Breakpoint 1, main (argc=2, argv=0xbffff5e4) at main.c:8 
8           i = aatoi (argv[1]); 
你会看见，调试器在断点处停止了程序的运行。 
利用 next 命令你可以单步追踪程序直到调用 atoi 的位置： 
(gdb) next 
9           printf (“The reciprocal of %d is %g\n”, i, reciprocal (i)); 
如果你希望看到 reciprocal 函数里面做了什么，则应改用 step 命令： 
(gdb) step 
reciprocal (i=7) at reciprocal.cpp:6 
6           assert (i != 0); 
你现在所处的就是 reciprocal 函数的内部。 
你也许会发现，从 Emacs 中运行 gdb 比在命令行中直接运行 gdb 更方便。可以通过命
令 M-x gdb 在一个 Emacs 窗口中启动 gdb 调试器。当你在一个断点处停止的时候，Emacs
会自动现实对应的源码文件。通常来说，相比只能看见一行程序的情况，能够通读整个文件
更容易让你找到头绪。 
1.5 获取更多信息 
几乎所有 Linux 发行版都会提供大量的有用的文档。你可以通过阅读你的发行版提供的
文档以理解本书中我们提到的大多数问题（尽管这样可能会耗去你更多的时间）。这些文档
可能并未被很好地组织，所以难处就在于，如何找到你想要的信息。有时候，文档可能会过
期，所以在阅读的时候要抱着怀疑论的观点。假如你发现系统的工作方式与 man page(manual 
pages，手册页)所说的不同，很可能这些手册页就是过期的。 
www.AdvancedLinuxProgramming.com 
12
6 有人说break main（打破main）这个说法有些可笑，因为通常来说只有当main函数已经坏掉（broken）
的时候你才需要做这件事。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
为帮助你更快地上手，这里我们列出了一些有关 Linux 程序设计的有用信息： 
1.5.1 手册页 
Linux 发行版包含了有关常用命令、系统调用和库函数的手册页。手册页被分成不同的
章节并分别标以序号；对于程序员而言，最重要的是这些： 
（1）用户命令 
（2）系统调用 
（3）标准库函数 
（8）系统/管理员命令 
这些数字就是手册页所在的章节。Linux 的手册页已经被安装在系统中；你可以通过
man 命令查看它们。要查看一个手册页，只需要执行 man name，这里 name 是一个命令或
函数的名字。在某些情况下，不同章节中可能包含具有相同名字的手册页；你可以通过在
name 之前插入指定的章节号。例如，当运行下面的命令的时候，你会得到 sleep 命令的手
册页（在 Linux 手册第一节中）： 