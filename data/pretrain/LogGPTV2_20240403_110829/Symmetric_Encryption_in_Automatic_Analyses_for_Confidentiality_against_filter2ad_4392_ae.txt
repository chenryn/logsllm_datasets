24
x ∈ Var
M
KAS
KBS
I(x)
secret
key(1)
key(2)
const (0)
const (1)
random(3)
input (4)
decr (key(1), input (4))
2 ) π4
1(decr (key(1), input (4)))
2 ) π4
4(decr (key(1), input (4)))
π4
3(decr (key(1), input (4)))
encr (5, π4
input (6)
π3
3(input (6))
key(7)
tuple 2(key(7), const (0))
encr (8, key(2), tuple2(key(7), const(0)))
tuple 4(π3
3(input (6)), const(1), key(7),
A
B
N A
A
mA
2
dmA
2
π4
1(dmA
π4
4(dmA
K A
AB
aM
m1
N S
A
KAB
df b
f b
df a
3(decr (key (1), input(4))), secret )
f a
m3
dm3
K B
AB
m4
bM
encr (8, key(2), tuple 2(key(7), const (0))))
encr (9, key(1), tuple4(π3
3(input (6)), const (1), key(7),
encr (8, key(2), tuple 2(key(7), const (0)))))
input (10)
decr (key(2), input (10))
π2
1(decr (key(2), input (10)))
input (11)
decr (π2
1(decr (key(2), input(10))), input (11))
Figure 6: Interpretation of protocol in Fig. 2
9 An example
We continue the example we presented in Sec. 5.
As the protocol given in Fig. 2 is a “real” protocol, it does not contain any dead
code. Consider the abstract interpretation of the protocol, it is given in Fig. 6.
The axioms added by check-statements do not allow us to simplify any term. The
next step of the protocol transformation is choosing the key as in Sec. 7.3. There are
three keys in the protocol key(1), key(2) and key(7). The keys key(1) and key(2) sat-
isfy the requirements put forth in Sec. 7.3, the key key(7) does not (consider I(f a), we
have f a ∈ Varsent). We were required to choose one key (although the transformation
could be modiﬁed to handle several suitable keys at once), so let us choose key(1).
We have to locate all uses of key(1). There is just one variable whose abstract
value is key(1), it is KAS. It is used at the deﬁnition of f a for encrypting and dmA
2
for decrypting. Replacing the decryption with a case-statement gives us the protocol
in Fig. 7. After also replacing the encryption statement (and introducing the variable
Z) we get the protocol in Fig. 8.
There is just one case-statement in the protocol in Fig. 8, it has a single branch.
Therefore, when we remove the case-statements we get just one new protocol. Let
25
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
the program for A
the program for S
the program for B
A := random(3)
N A
send (A, B, N A
A )
2 := receive(4)
mA
dmA
2 := case mA
2 of
f a → df a
A = π4
1 (dmA
2 ))
4(dmA
2 )
check(N A
send π4
K A
aM := encr KA
send aM
AB := π4
3(dmA
2 )
(M )(5)
AB
3(m1)
A := π3
m1 := receive(6)
N S
KAB := gen key(7)
df b := (KAB, A)
f b := encr KBS (df b)(8)
df a := (N S
f a := encr KAS (df a)(9)
send f a
A , B, KAB, f b)
m3 := receive(10)
dm3 := decr KBS (m3)
K B
m4 := receive(11)
bM := decr KB
AB := π2
1(m3)
(m4)
AB
Figure 7: Example protocol, ﬁrst iteration, introducing case-statements
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)
the program for A
the program for S
the program for B
A := random(3)
N A
send (A, B, N A
A )
2 := receive(4)
mA
dmA
2 := case mA
2 of
f a → df a
A = π4
1 (dmA
2 ))
4(dmA
2 )
check(N A
send π4
K A
aM := encr KA
send aM
AB := π4
3(dmA
2 )
(M )(5)
AB
3(m1)
A := π3
m1 := receive(6)
N S
KAB := gen key(7)
df b := (KAB, A)
f b := encr KBS (df b)(8)
df a := (N S
f a := encr KAS (Z)(9)
send f a
A , B, KAB, f b)
m3 := receive(10)
dm3 := decr KBS (m3)
K B
m4 := receive(11)
bM := decr KB
AB := π2
1(m3)
(m4)
AB
Figure 8: Example protocol, ﬁrst iteration, replacing encryptions
26
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)
the program for A
the program for S
the program for B
A := random(3)
2 = f a)
N A
send (A, B, N A
A )
2 := receive(4)
mA
wait(s1)
check(mA
dmA
2 := df a
check(N A
send π4
K A
aM := encr KA
send aM
AB := π4
4(dmA
2 )
A = π4
AB
3(dmA
2 )
(M )(5)
1 (dmA
2 ))
3(m1)
A := π3
m1 := receive(6)
N S
KAB := gen key(7)
df b := (KAB, A)
f b := encr KBS (df b)(8)
df a := (N S
f a := encr KAS (Z)(9)
signal (s1)
send f a
A , B, KAB, f b)
m3 := receive(10)
dm3 := decr KBS (m3)
K B
m4 := receive(11)
bM := decr KB
AB := π2
1(m3)
(m4)
AB
Figure 9: Example protocol, ﬁrst iteration, removing case-statements
s1 ∈ Sem be a semaphore. The new protocol is given in Fig. 9.
We continue with the next iteration of the transformation. There still is no syntacti-
cally locatable dead code. The results of the abstract interpretation of the protocol are
given in Fig. 10. This time only the key key(2) satsiﬁes the requirements put forth in
Sec. 7.3 (actually key(1) satisﬁes them, too, but replacing the statements where key(1)
is used for encryption would not change the protocol at all).
We have to locate all uses of key(2). There is just one variable whose abstract
value is key(2), it is KBS. It is used at the deﬁnition of f b for encrypting and dm3
for decrypting. Replacing the decryption with a case-statement gives us the protocol
in Fig. 11. After also replacing the encryption statement (the variable Z does not have
to be introduced any more) we get the protocol in Fig. 12.
We have again a single case-statement with a single branch. Removing it gives
us one new protocol. Let s2 ∈ Sem be a semaphore. The new protocol is given in
Fig. 13.
The analysis given in Sec. 8 still does not consider the protocol secure because
M ∗⇒ aM and aM ∈ Varsent. Let us do another iteration of the protocol transforma-
tion. The abstract values of the variables are given in Fig. 14. This time the key key(7)
also satisﬁes the requirements put forth in Sec. 7.3. Indeed,
• The set Varsent is {A, B, N A
2 ), aM, f a}. Of these variables, only the
abstract value of aM contains key(7) and it occurs there as the encryption key.
4(dmA
A , π4
• The set of variables occurring in check-statements is {mA
A , π4
m3, f b}. None of the abstract values of these variables contains key(7).
2 , f a, N A
1(dmA
2 ),
• The set of variables occurring as ciphertexts in decryption statements is empty
as there are no decryption statements.
• The set of variables that are used as keys in encryption and decryption statements
AB}. The abstract value of the last three variables
is {KAS, KBS, KAB, K A
AB, K B
27
x ∈ Var
M
KAS
KBS
A
B
N A
A
mA
2
dmA
2
I(x)
secret
key(1)
key(2)
const (0)
const (1)
random(3)
input (4)
tuple4(π3
3(input(6)), const (1), key(7),
encr (8, key(2), tuple2(key(7), const(0))))
2 ) π3
π4
1(dmA
π4
4(dmA
2 )
K A
AB
aM
m1