distinguishing
(cid:48)
1 − w
w
(cid:48)
2
where node, node 1, node 2 distinguishing ⇔ w(cid:48)
i = ps.enP(node, node 1) ·
ps.exPi(node 1) ·ps.miP(node 2, node, node 1).3
Iterating over all node triples, however, is not sufﬁciently efﬁcient for a live recipient anonymity monitor. To
improve the efﬁciency, we over-approximate the inﬂuence of the exit node on δEn(node) and omit the exit nodes
in the computation.
2 > eε, and where w(cid:48)
1/w(cid:48)
give have to be equally distributed for input messages of equal length.
2For Tor this formally presents a form of length-regularity: the lengths of the responses the two possible recipients of a challenge message
3We calculate a bound on δ for a given multiplicative factor of ε ≥ 0. Intuitively, we take a bound for ε as input and compute the probability
that this bound cannot be achieved.
16
·
ps.exP(ex , pf , ports1) − ps.enP(en, ex , pf , ports2)
·
> eε then
tmp+=(w1 − w2) · ps.enPMaxEx(en, pf , ports1)
tmp := 0
for mi in N do
if ps.allows(ex , pf , ports1) then
δ(ex )+=ps.exP(exit, pf , ports1);
for en in N do
if ps.allows(en, ex , pf , ports1) then
δsEn+=ps.enP(en, ex , pf , ports1)
ps.exP(ex , pf , ports2)
w1 := ps.miPMaxEx(mi, en, pf , ports1)
w2 := ps.miPMinEx(mi, en, pf , ports2)
if w1
w2
RAMonitor(N , pf , ports1, ports2, ps, ε)
1: for ex in N do
2:
3:
4:
5:
6:
7: for en in N do
8:
9:
10:
11:
12:
13:
14:
15: for ex in N do
16:
17:
18:
19:
20:
21:
22: sort all nodes n by the value δ(n) in a list sorted
23: for node in sorted and 1 ≤ i ≤ k do
24:
25: δ+=δsEn
26: return δ
δ(en)+=min{tmp, en.used as entry}
if ps.allows(ex , pf , ports1) then
δ+=δ(node); i = i + 1
for mi in N do
w1 := ps.miPMaxEn(mi, ex , pf , ports1)
w2 := ps.miPMinEn(mi, ex , pf , ports2)
if w1
w2
δ(mi)+=(w1 − w2) · ps.exP(ex , pf , ports1)
> eε then
Figure 6: Recipient Anonymity Monitor
These approximations inﬂuence relevant but rather minor factors of the anonymity guarantee, as the δ mostly
depends on the probability to compromise exit nodes. In the next section (Section 5.4) we will give a detailed
description of our approximations.
Theorem 3 (Recipient Anonymity Monitor). For a consensus document, a set of server descriptors, a user’s
preferences pf and two sets of ports ports1 and ports2, let N be the set of nodes in the consensus together with
their weights. Let ε > 0 be a real value . Then for the output δ of the algorithm RAMonitor(N , pf , ports1,
ports2,ps,ε) the following holds against passive local adversaries:
ΠOR
(cid:48) satisﬁes (1, ε, δ) − αSRA-IND-CDPMATOR(pf ,ports1,ports2 ),
where αSRA-IND-CDPMATOR(pf ,ports1,ports2) denotes session recipient anonymity (see Section 3) .
Proof. By Theorem 1 and Lemma 22 from the full version of the AnoA framework [7, Lemma 22], we know that
it sufﬁces to show that (1, ε, δ) − αSRA-IND-CDPMATOR(pf ,ports1,ports2 ) holds for the ideal functionality FOR
(cid:48) sends handles over the network instead of onions (i.e. ciphertexts) for
Recall that the ideal functionality FOR
(cid:48) reveals which handles belong together, and if all nodes of the circuit
honest nodes. For compromised nodes, FOR
to the exit node are compromised, FOR
user preferences pf .
For a given ε, we can bound δ as follows, where k is the number of estimated compromised nodes from the
(cid:48) additionally reveals the message along with the handle.
(cid:48).
(cid:88)
n∈K
δ ≤ max
Ks.t.|K|≤k
δ(n)
where δ(n) is the increase in the advantage that the adversary gets from compromising the node n.
δ(n) ≤ δEn(n) + δM i(n) + δEx(n)
17
The recipient anonymity monitor approximates δ(n) for efﬁciency reasons. We show in the following that δ(n)
is safely over-approximated. We ﬁrst show that δEn(n) is safely over-approximated, then we show that δM i(n) is
safely over-approximated, and for δEx we do not need to show anything since it is precisely computed as
δEx(n) := n.bw/(
(cid:48)
n
.bw).
(cid:88)
n(cid:48)∈bSi
1/w(cid:48)
2 > eε, and where w(cid:48)
For the sake of convenience, we omit in the following the preferences and ports if we call the path simulator
functions ps. (See Figure 8 for the precise arguments for the call.) We say that a triple of nodes n, n1, n2 is
distinguishing ⇐⇒ w(cid:48)
i = ps.enP(n, n1) · ps.exPi(n1) · ps.miP(n2, n, n1). Then, we
(cid:88)
can over-approximate δEn(n) as follows:
(cid:88)
n2∈N
n,n1,n2
unrelated
n,n1,n2
n1∈bS1
n,n1
unrelated
(cid:88)
w
(cid:48)
1 − w
(cid:48)
2
δEn(n) =
distinguishing
≤
n2∈N
n,n2 unrelated
n,n2 quasi entry distinguishing
ps.enPMaxEx(n) · (w1 − w2)
where n, n2 quasi entry distinguishing ⇐⇒ w1/w2 > eε, and w1 := ps.miPMaxEx(n2, n) and w2 :=
ps.miPMinEx(n2). We stress that we have to use ps.enPMaxEx(n) because we do not know which exit node
was chosen; hence we have to assume that the entry node with the maximal family has been chosen, whose impact
is worst.
For δM i(n), we also have
(cid:88)
n1∈bS1
n,n1
unrelated
(cid:88)
(cid:88)
n2∈N
n,n1,n2
unrelated
n,n1,n2
distinguishing
n2∈N
n,n2 unrelated
n,n2 quasi exit distinguishing
δM i(n) =
≤
(cid:48)
1 − w
w
(cid:48)
2
ps.exP(n2) · (w1 − w2)
where n, n2 quasi exit distinguishing ⇐⇒ w1/w2 > eε, where w1 := ps.miPMaxEn(n, n2) and w2 :=
ps.miPMinEn(n, n2). We stress that for ps.exP(n2) we can take the exact weight of the exit node because the
choice of the exit node does not depend on the entry or middle node.
Note that our approximations are exactly what the recipient anonymity monitor computes. Hence, the bounds
computed by the recipient anonymity monitor are secure.
The recipient anonymity monitor and the guard mechanism.
In recipient anonymity we assume that the
adversary has knowledge about the user’s connection to the Tor network. For our bounds we model both the case
where the user does not use entry guards, i.e., uses a fresh entry node for every circuit and the case in which the
user uses guards. To this end we allow the user to specify her entry guards (we envision that they are read from
the Tor source-code if MATOR is integrated into Tor). In this case we allow the adversary to even have auxiliary
information about the guards as we can assume that they have been used before. This in particular allows the
adversary to target the entry guards if that helps it to break recipient anonymity. Note, however, that the entry
node plays only a minor role in breaking recipient anonymity.
5.4 Approximations
In this section we explain the approximations we did for the recipient anonymity monitor (c.f. Section 5.3).
We approximate the probability that an entry node n chosen by always assuming that the exit node with the
largest family has been chosen: ps.enPMaxEx(n, pf , ports1) (see Figure 7). Similarly, we over-approximate the
conditional probability that a middle node is chosen in the ﬁrst scenario, given an entry and exit node, by again
assuming the exit node with the maximal family weight: w1 := ps.miPMaxEx(n2, n) (see Figure 7) . In order to
have a sound approximation, we under-approximate the conditional probability that a middle node is chosen in the
second scenario by not subtracting the weight of any exit family at all: w2 := ps.miPMinEx(n2) (see Figure 7).
18
Assume all variables are initialized with 0.
Computing the largest family joins
1:
2: for each entry node en in N do
3:
4:
5:
6: for each entry node en in N do
7:
8:
9:
10: for each exit node ex in N do
11:
/* largest exit family join: compute for each entry node en the cumulative middle weight of the largest family of valid exit nodes if en is
chosen as an entry node */
Compute the cumulative middle weight of the largest family join of en with exit nodes ex ∈ bS1 such that
ps.allow(en, ex , pf ).
Save this to en.lExFJ
/* largest other exit family: compute for each entry node the cumulative entry weight of the largest family of valid exit nodes if en is chosen
as an entry node */
Compute the cumulative entry weight of the largest family for exit nodes ex ∈ bS1 such that ps.allow(en, ex , pf ).
Save this to en.lOEF
/* largest entry family join: compute for each exit node the cumulative middle weight of the largest family of valid exit nodes if ex is chosen
as an exit node */
Compute the cumulative middle weight of the largest family join (i.e., the node en such that the family join is
maximal) of ex with entry nodes en such that ps.allow(en, ex , pf ).
Save this to ex .lEnFJ.
12:
miPMaxEx(mi, en, pf , ports)
1: return ps.miBW (mi,pf ,ports)
total−en.lExFJ
miPMaxEn(mi, ex , pf , ports)
1: return ps.miBW (mi,pf ,ports)
total−ex .lEnFJ
miPMinEx(mi, en, pf , ports)
1: return
total−ps.familyMiddleWeight(en,pf ,ports)
ps.miBW (mi,pf ,ports)
miPMinEn(mi, ex , pf , ports)
1: return
ps.miBW (mi,pf ,ports)
total−ps.familyMiddleWeight(ex ,pf ,ports)
enPMaxEx(en, pf , ports)
1: return ps.enBW (en)
total−en.lOEF
Figure 7: Tor Path Selection Approximations
For approximating whether a circuit is distinguishing or not for an entry node n and a middle node n2, we check