precision=48
这是一个线性变换，而state到output的变换方式为向右移动16个
bit。
可以通过图21-2来理解。
Linear
Linear
Linear
Linear
Linear
State:
stateO
state
state2
tate3
state
>>6
>>6
>>6
>>6
>>6
Output:
outO
outl
out2
out3
out4
图21-2
伪随机数发生器结构示意图2
那么它的攻击思路如图21-3所示。
Linear
Linear
Linear
Linear
Linear
State:
statec
statel
state2
tates
state
>>6
>>6
>>6
>>6
>>6
andino
gino
out1
out2
eine
out4
图21-3伪随机数发生器攻击示意图
---
## Page 700
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
700/1144
因为从state到output的过程中出现了信息损失，我们可以通过联
立两个output的函数的方式，逆推出state，然后就可以预测后续所有
的随机数。考虑如下题目：
class Unbuffered(object):
definit（self,stream):
self.stream=stream
def write(self,data):
self.stream.write(data)
self.stream.flush()
defgetattr_（selfattr):
return getattr(self.stream, attr)
import sys
sys.stdout=Unbuffered(sys.stdout)
import signal
signal.alarm(600)
import os
os.chdir(/root/level1")
flag=open(flag""r").read()
import subprocess
o=subprocess.check_output(['java","Main"])
tmp=
foriin o.split("n)[0:3]:
tmp.append(int(i.strip()))
v1=tmp[0] % 0xf
v2=tmp[1]%0xff
v3=tm21%0x
printv1
printv2
V3_get=int(raw_input())
if v3_get==v3:
print flag
攻击代码如下：
---
## Page 701
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
701/1144
from zio import *
importtime
import random
target=(47.74.44.24",10001)
io=zio(target)
v1=int(io.readline().strip())
v2=int(io.readline().strip()
def liner(seed):
return ((seed*252114903917+11)&0xfff)
fori in range(Oxff+1):
seed=v1*65536+i
if liner(seed)>>16 == v2:
print seed
print liner(liner(seed)>>16
io.writeline(str(liner(liner(seed))>>16)
print io.readline()
还有一种更加复杂的随机数生成方式，MTrand，这也是Python
中常用的。它的state是624个32bit的words，并且state之间不是单纯
的线性关系，而是由前624个生成后面624个。关系如图21-4所示。
Generating the next state
State:
stateo
tate624
Int
Obtaining the next number
......
Output:
outo
out623
out624
outox
Int
图21-4MTrand伪随机数发生器结构示意图
从state计算output的过程如图21-5所示。
---
## Page 702
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
702/1144
State->Number
currentlndex++;
inttmp=state[currentlndex];
tmp^=（tmp>>>11）;
tmp^=（tmp>>18);return tmp;
State:624integers
Number:624integers（624*32=19968bit)
图21-5MTrand伪随机数发生器产生output示意图
在这个过程中，首先state到output的过程是完全可逆的。那么就
可以利用如下方式进行攻击。首先我们收集624个int的output，然后
逆向出624个state，然后就可以利用这624个state任意推理出后续的
所有随机数。
代码如下：
class Unbuffered(object):
definit（self，stream):
self.stream=stream
def write(self,data）：
self.stream.write(data)
self.stream.flush()
---
## Page 703
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
703/1144
defgetattr_（self，attr):
return getattr(self.stream,attr)
import sys
sys.stdout = Unbufered(sys.stdout)
import os
os.chdir("/root/level2")
from random import *
while 1:
（.）nde=
target=getrandbits(32)
if al=str(target):
print target
else:
print open("flag”,"rb").read()
攻击方法如下：
from zio import *
target=(47.74.44.24",10002)
io=zio(target)
getlist=
for i in range(624):
printi
）nunpeero
io.writeline("1")
getlist.append(int(io.readine().strip())
import libprngcrack
r=libprngcrack.crack_prng(getlist)
io.readuntil("#")
io.writeline(str(r.getrandbits(32))
io.interact()
其中libprngcrack.py可以在我们的git仓库中找到。
对于分组密码，还有复杂的差分攻击、积分攻击等攻击方式，对
---
## Page 704
CTF特训营：技术详解、解题方法与
21.1.6攻击伪随机数发生器
704/1144
于序列密码，还有快速相关攻击等攻击方式，感兴趣的读者可以自行
了解。
---
## Page 705
CTF特训营：技术详解、解题方法与
21.2公钥密码
705/114
21.2公钥密码
前面介绍的几种类型的密码有一个共同的特点，就是加密密钥与
解密密钥是相同的，不同之处是密钥的使用方法，也就是说通信的双
方持有的密钥是相同的，这样才能一方加密传输，一方解密获得信息。
但是这样就会存在一个密钥分配的问题，即密钥是怎样分给通信双方
全新的密码思想，即一个密码体制中的加密密钥和解密密钥不同，其
中，加密密钥是公开的，解密密钥是保密的，且由公开的加密密钥难
以推出保密的解密密钥。这种密码体制称为公开密钥密码体制，也称
为公钥密码体制。
公钥密码体制的算法很多，所有的公钥算法都是基于桌个困难的
数学问题而产生的，其中，最受CTF青睐的就是RSA了。学习RSA
首先需要具备一定的数论知识，否则很难理解透彻。
---
## Page 706
CTF特训营：技术详解、解题方法与
21.2.1RSA基础
706/1144
21.2.1RSA基础
Alice向Bob广播了一句信息：“Bob老师，我有重要情况汇报！”
Bob很聪明，他知道Alice发现了什么但是不能通过广播的方式直
接汇报，于是他立即生成了两个大素数p和q，通过乘法计算出了
n=p*q，并取了一个合适的素数，通常是e=65537。此时Bob掌握看4
个数字（n，e，p，q），并且广播通信，向所有人包括Alice传递了一个信息
(n.e)，注意（n,e）就是加密密钥。当然攻击者Cat现在也通过广播通信
截取到了(n,e)。
Alice拿到（n,e）之后，首先将重要情况信息通过hex和padding转换
成一串数字m，然后进行一次计算得到了c：c=mmodn。转换成
Python就是：
c=pow(m,e,n)
此时，Alice掌握了四个数字（c.m，e，n），并通过广播通信将c传给
Bob，此时攻击者Cat也监听到了c，那么Alice、Bob、Cat所掌握的信
息分别如下：
---
## Page 707
CTF特训营：技术详解、解题方法与
21.2.1RSA基础
707/1144
Alice
c,m,e,n
Bob
c,e,n,p,q
Cat
c,e,n
Bob比Cat多掌握了p和q的值，Bob通过计算e关于n的欧拉函数的
逆元，可以求出d，即满足e*d=1mod（n），（n）是n的欧拉函数，又因为
n=p*q，所以（n）=（p-1)*（q-1)。这里可以通过扩展的欧几里得算法求出
d，在primefac包中有如下算式：
importprimefac
d=primefac.modinv(e,（p-1)*(q-1)%（（p-1)*(q-1)
所以Bob又多掌握了一个d，通过d可以进行如下计算m=cmodn。
转化为Python代码，如下所示：
m=pow(c,d,n)
至此，Bob通过hex处理，掌握了Alice的情报。而对于Cat来说
由于他们没有掌握p和q的值，所以无法计算出d，从而无法解密c得
到m。
(d.n)即为此密码的私钥。
---
## Page 708
CTF特训营：技术详解、解题方法与
21.2.1RSA基础
708/1144
整个通信过程请牢记，下面针对RSA的攻击会围绕这个过程来进
行。
有的时候攻击可能不会直接给出数字，这时可以使用openssl的
命令来读取pem文件中的信息。查看公钥文件的命令如下：
解密结果如下：
---
## Page 709
CTF特训营：技术详解、解题方法与
21.2.2直接模数分解
709/1144
21.2.2直接模数分解
在前文的通信过程中，n=p*q是所有计算的模数。Bob比Cat多知
道的情报就是p和q，而说Cat无法破译出密码是因为Cat无法知道p和
q的值，也正是因为通过分解n计算出p和q是一件很困难的事情，这
就是有名的大数分解难题，
但是，如果n取值过小，Cat可以通过爆破的手段分解得到p和
q，从而就可以轻而易举地破解出密文了。
在现实生活中，一般认为2048bit以上的n是安全的，但是在CTF
竞赛中，并不会让选手破解那么长的n，通常n会小于等于256bit。这
种情况下就要推出神器yafu，一个有名的开源模数分解神器（htps://
sourceforge.net/projects/yafu/)。
PyCrypto中提供了用于生成大素数、素性检测等的函数，代码如
下：
fromCrypto.Util.numbermport long_to_bytes,bytes_to_long,getPrime,sPrime
print isPrime(getPrime(1024)
---
## Page 710
CTF特训营：技术详解、解题方法与
21.2.2直接模数分解
710/1144
输出结果如下：
1
下面我们生成两个大素数，并计算其乘积：
from Crypto.Util.numberimport long_to_bytes,bytes_to_long.getPrime,isPrime
p=getPrime(128)
q=getPrime(128）
b,d=u
printp
printq
printn
输出结果如下：
102543140947308319247809743928685897903
61018158290670105343444420109232399649
6256993605945354279979074310942065756850337682319572399209620615130
907036047
getPrime的参数是要生成的大素数的bit位。我们用命令行打开
yafu，并使用factor（n）来分解n，如图21-6所示。
---
## Page 711
CTF特训营：技术详解、解题方法与
21.2.2直接模数分解
711/1144
tor(625
\yafu-l. 34>yafu-xb4.
605945354279979074310942065756850337682319572399209620615130907036047)
not
8/gnfs crossover of 95 digits
10:
x2+3.starting 1000iterations on C76
x2+1,
ho:
4/74
curves on C76,
CB:
B1=11K,B2
c-gnp"ecal
tarting SIQS on c76:6256993605945354279979074310942065756850337682319572399209620615130907036047
sieving in progress (1 thread):31344relations needed =
81389 rels found: 15981 fu11 + 15408 from 163431 partial,(2192.11 rels/sec)
s*factors found*$*
P38-61018158290670105343444420109232399649
=1
图21-6yafu使用方法示意图
由图21-6可以得知，使用yafu很快即可分解成功。下面我们通过
一道例题来介绍一个完整的攻击流程。在CTF的题目中，选手往往是
作为Cat这一方，在没有私钥，只有公钥的情况下来获取明文。也就
是说，我们目前掌握的信息如下：
n=
4137696115616894819630338421894111736785001950920204902603716819498
2219784159
e=65537
C=
---
## Page 712
CTF特训营：技术详解、解题方法与
21.2.2直接模数分解
712/1144