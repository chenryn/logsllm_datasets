get the same set of synthesized schemes: if one changes the topological ordering in the graphs so that the ﬁrst FIN/INI node
becomes the second one, and vice versa, then the scheme remains the same.
10
INIINFINOUTINDUPDUPTBCTBCXOROUTXORDUPXOR⊥,0⊥,0⊥,0$,2⊥,0⊥,0⊥,0$,1$,2$,2$,2$,2$,2⊥,0⊥,0⊥,0⊥,0$,2⊥,0⊥,0⊥,0$,2$,1$,1$,1$,2$,1⊥,0M1M2C1C2M3M4C3C4tagτFigure 3.8: Left: The OTR scheme, illustrated for a four-block message M1 ··· M4. Here, Σ is the checksum of the
even blocks M2 ⊕ M4. Middle: The Dec graph of the insecure variant of OTR, where Σ is instead the checksum of
the odd blocks M1 ⊕ M3. Right: The demonstration that the Dec graph of the insecure OTR variant does not pass
the test at lines 14–16 of Figure 3.6. Each node is shown with its (type, ctr) pair. The graph fails the test because
the FIN node has type 1 instead of $.
2 ) = true, where G−
Π[E](A) ≤ Advfprp
Theorem 3.3. Let Π[E] = (K,E,D) be an AE scheme for which Priv(G−
1 and G−
2
are the unlabeled graphs for algorithms Enc and Tag of Π, respectively. Then for any adversary A, there is
an adversary B with Advpriv
E (B). Adversary B has the same running time as A and makes
at most (Cost(Π) + 1) · σ/2 queries, where σ is the number of message blocks in the queries of A.
Proof. Adversary B runs A. For each of A’s queries (N, A, M), adversary B runs the encryption scheme
Π[E] on (N, A, M) with each call to EK replaced by a query to B’s oracle, and returns the ciphertext to A.
Finally, B outputs the same guess as A. Let Π[π] be the ideal variant of Π[E], where calls to EK are replaced
by corresponding queries to π, with π ←$ Perm(T , n). It suﬃces to show that Advpriv
Consider experiments H1–H4 in Figure 3.9. The adversary has oracle access to the encryption scheme
of Π[π] in experiment H1, and oracle access to $(·,·,·) in experiment H4. Experiment H2 is identical to H1,
except that we re-sample π ←$ Perm(T , n) each time we use Enc or Tag. Since a tweak to π is never repeated,
2 ⇒ true]. In experiment H3, instead of calling Tagπ(T, X) to get the tag, we sample
Pr[HA
the tag at random. Considering lines 02–03 of Priv (and the fact that Priv(G−
2 ) = true) in conjunction
with Lemma 3.1 shows that the string V := Tagπ(T, X) is uniform and so experiments H2 and H3 are
identical. Finally, experiment H4 is identical to H3, except that instead of calling Encπ(T, X, M2i−1M2i)
to get the blocks C2i−1C2i of the ciphertext, we sample them at random. Considering lines 04–05 of Priv
(and the fact that Priv(G−
2 ) = true) in conjunction with Lemma 3.1 shows that the output blocks of
Encπ(T, X, M2i−1M2i) are uniform and independent (and this is true even conditioned on all prior ciphertext
blocks). Hence H3 and H4 are identical, and Advpriv
1 ⇒ true] = Pr[HA
1 ⇒ true] − Pr[HA
4 ⇒ true] = 0.
Π[π](A) = Pr[HA
1 , G−
1 , G−
Π[π](A) = 0.
1 , G−
Next, in Theorem 3.4, we show that if Auth in Figure 3.6 returns true when given graphs corresponding to
the Dec and Tag components of some AE scheme, then that scheme satisﬁes authenticity when instantiated
with a secure tweakable blockcipher. (Examination of the proof shows that if algorithm Dec does not use E−1
K ,
(B) in Theorem 3.4 can be weakened to Advfprp
as in the case of OTR, then the term Adv±fprp
E (B).)
E
Π[E](A) ≤ 2−τ + ‘ · (Cost(Π) + 2)/2n + Adv±fprp
Theorem 3.4. Let Π[E] = (K,E,D) be an AE scheme such that Auth(G−
1 , G−
2 ) = true, where G−
2
are the unlabeled graphs for algorithms Dec and Tag of Π, respectively. Then for any adversary A, there
is an adversary B with Advauth
(B), where ‘ is the number
of blocks in the forgery output by A. Adversary B has the same running time as A and makes at most
(Cost(Π) + 1) · σ/2 queries, where σ is the total number of message blocks in the queries of A.
Proof. Adversary B runs A. For each of A’s encryption queries, B runs the encryption scheme of Π[E] but
with each call to EK replaced by a query to B’s ﬁrst oracle, and returns the ciphertext to A. When A outputs
a forgery (N, A, C), adversary B runs the decryption scheme of Π[E] on (N, A, C), but with each call to
K replaced by a query to B’s oracles. Adversary B returns 1 if A output a valid forgery, and returns 0
EK/E−1
1 , G−
E
11
M1M2C1C2M3M4C3C4Σ tagτINTBCINDUPXORXORDUPOUTDUPTBCINIXORFIN0,0$,11,00,01,0$,11,0$,11,00,00,01,01,0OUT1,0proc Encrypt[π](N, A, M)
M1 ··· M2m := M; X := 02n; v := 1
for i = 1 to m do
// Experiments H1, H2
// |Mi| = n
T := (N, A, v); π ←$ Perm(T , n)
(Y, C2i−1C2i) := Encπ(T, X, M2i−1M2i)
v := v + Cost(Π); X := Y
π ←$ Perm(T , n); T := (N, A, 1 − v); V := Tagπ(T, X)
return C1 ··· C2m k V [1, τ]
// Experiments H3, H4
// |Mi| = n
proc Encrypt[π](N, A, M)
M1 ··· M2m := M; X := 02n; v := 1
for i = 1 to m do
T := (N, A, v); π ←$ Perm(T , n)
(Y, C2i−1C2i) := Encπ(T, X, M2i−1M2i)
C2i−1C2i ←$ {0, 1}2n
v := v + Cost(Π); X := Y
T := (N, A, 1 − v); V ←$ {0, 1}n
return C1 ··· C2m k V [1, τ]
Figure 3.9: Experiments H1–H4 in the proof of Theorem 3.3. Experiments H2 and H4 include the corresponding
boxed statements, but H1 and H3 do not.
otherwise. Let Π[π] be the ideal variant of Π[E], where calls to EK/E−1
queries to π/π−1, with π ←$ Perm(T , n). It suﬃces to show that Advauth
K are replaced by corresponding
Π[π](A) ≤ 2−τ + ‘(Cost(Π) + 2)/2n.
Consider experiments H1–H3 in Figure 3.10. In H1, the adversary has oracle access to the encryption
and decryption schemes of Π[π]. Experiment H2 is identical to H1, except that when running the decryption
algorithm, we re-sample π ←$ Perm(T , n) before using it in Tag. Experiment H3 is identical to H2, except
that instead of using Tag to generate the tag, we sample the tag uniformly.
Let (N, A, C) be the forgery output by A. Suppose there is no encryption query (N, A, M0) with |M0| =
|C| − τ. Since decryption of the forgery query involves calling Tag with a tweak that has never been used
before, we have Pr[A forges in H1] = Pr[A forges in H2]. Considering lines 12–13 of Auth (and the fact that
1 , G−
Auth(G−
2 ) = true) in conjunction with Lemma 3.1 shows that the string V := Tagπ(T, X) is uniform.
Thus Pr[A forges in H2] = Pr[A forges in H3]. The probability that A can forge in H3 is at most 2−τ.
Π[π](A) ≤ 2−τ in this case.
Hence Advauth
Now, suppose that there is an encryption query (N, A, M0) such that |M0| = |C|−τ. (Note that there can
be at most one such query, since the attacker is not allowed to re-use a nonce value in two encryption queries.)
Let C0 be the corresponding ciphertext output by this encryption query, and let C = C1 ··· C2m k tag and
j for every j ≤ 2m then tag and tag0 must be diﬀerent and thus, since Tag is
C0 = C0
deterministic, the forgery is invalid. Otherwise, take the least index r ≤ m such that C2r−1C2r 6= C0
2r−1C0
2r.
Consider experiments P1, . . . , Pm−r+4 in Figure 3.11. In P1, the adversary has two oracles: Encrypt and
Decrypt. The ﬁrst implements the encryption scheme of Π[π], and the second implements the decryption
scheme of Π[π] but returns false if the decrypted value is ⊥ and returns true otherwise.
Let S be the subset of Perm(T , n) such that for any f ∈ S and query (T, X) that Encrypt[π](N, A, M0)
makes to π, we have f(T, X) = π(T, X). Experiment P2 is identical to P1, except that in procedure
Decrypt, each time we call Dec or Tag we resample π ←$ S. Since in the forgery query we do not repeat
the tweak of any encryption query other than (N, A, M0), and π and π−1 are called with distinct tweaks, we
have Pr[A forges in P1] = Pr[A forges in P2]. In experiment P3 we sample Y uniformly instead of computing
Y := Decπ,π−1(T, X, C2r−1C2r). Considering lines 14–16 of Auth (and the fact that Auth(G−
2 ) = true)
in conjunction with Lemma 3.2, we have Pr[A forges in P2] − Pr[A forges in P3] ≤ 2Cost(Π)+2
1 , G−
.
1 ··· C0
2mktag0. If Cj = C0
2n
12
// Experiments H1, H2
proc Decrypt[π](N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2m k tag := C // |Ci| = n and |tag| = τ
X := 02n; v := 1
for i = 1 to m do
T := (N, A, v)
(Y, M2i−1M2i) := Decπ,π−1(T, X, C2i−1C2i)
v := v + Cost(Π); X := Y
π ←$ Perm(T , n)
T := (N, A, 1 − v); V := Tagπ(T, X)
if tag 6= V [1, τ] then return ⊥
return M1 ··· M2m
// Experiment H3
proc Decrypt[π](N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2m k tag := C // |Ci| = n and |tag| = τ
X := 02n; v := 1
for i = 1 to m do
T := (N, A, v)
(Y, M2i−1M2i) := Decπ,π−1(T, X, C2i−1C2i)
v := v + Cost(Π); X := Y
V ←$ {0, 1}n
if tag 6= V [1, τ] then return ⊥
return M1 ··· M2m
Figure 3.10: Experiments H1–H3 in the proof of Theorem 3.4. Experiment H2 includes the corresponding boxed
statement, but experiment H1 does not. Each experiment also has a procedure Encrypt[π], implementing the
encryption algorithm of Π[π], that is not shown for simplicity.
1 , G−
For j = 1, . . . , m − r, experiment P3+j is identical to P2+j, except that we sample Y uniformly in-
stead of computing Y := Decπ,π−1(T, X, C2r+2j−1C2r+2j). Considering lines 17–19 of Auth (and the
2 ) = true) in conjunction with Lemma 3.2, we conclude that Pr[A forges in P2+j]
fact that Auth(G−
− Pr[A forges in P3+j] ≤ 2Cost(Π)+2
Experiment Pm−r+4 is identical to Pm−r+3 except that we sample V uniformly when checking the
validity of the forgery instead of computing V := Tagπ(T, X). Let X0 be the state used by Tag in
Encrypt[π](N, A, M0). If X[1, n] 6= X0[1, n], which happens with probability at least 1−2−n, then applying
Lemma 3.2 to lines 20–22 of procedure Auth, we have Pr[A forges in Pm−r+3]−Pr[A forges in Pm−r+4] ≤ 2
2n .
Finally, Pr[A forges in Pm−r+4] ≤ 2−τ. Summing up,
2n
.
Π[π](A) ≤ 2−τ + 2(m − r + 1)(Cost(Π) + 1) + 3
Advauth
2n
≤ 2−τ + ‘(Cost(Π) + 2)
2n
.
To summarize, Theorems 3.3 and 3.4 show that if the graphs induced by a given scheme Π satisfy Priv
and Auth as deﬁned in Figure 3.6, then Π is a secure AE scheme.
Implementation and Results
4
We have implemented the Priv and Auth algorithms described in Section 3, and used them to synthesize AE
schemes. The code is written in OCaml and available at https://github.com/amaloz/ae-generator.10
10All results in this section were computed using the code from commit 515959bcf9fa805cbc102aa8a2772cf3c35906f7.
13
// Experiments P1, P2