  1. What version of Go are you using (`go version`)?  
1.6
  2. What operating system and processor architecture are you using (`go env`)?  
linux amd64
  3. What did you do?  
https://play.golang.org/p/1zJjQLBlMK
  4. What did you expect to see?  
I want `float32(1e-45) == float32(math.SmallestNonzeroFloat32)` to be true
  5. What did you see instead?  
I got `float32(1e-45) == 0` to be true, which is unexpected.  
However `float32(1.1e-45) == float32(math.SmallestNonzeroFloat32)` is true, as
expected.  
I don't know whether there are other values that may be affected as well. I
have not tried to find the faulty code.
I think that `fmt.{Print,Scan}` and `strconv.{Append,Format,Parse}Float` are
correct; at least my manual testing showed that I could perform roundtrips
from `math.SmallestNonzeroFloat32`, and some other manually-tested values.
But I believe that the compiler is doing the wrong thing, since `1e-45` is
closer to `math.SmallestNonzeroFloat32` than it is to `0`. The spec says that
we should "round to the nearest representable constant" and "rounding using
IEEE 754 round-to-even rules" in the sections on constants and conversions,
respectively.  
https://golang.org/ref/spec#Constants  
https://golang.org/ref/spec#Conversions
FYI the reason this is affecting me is because I have written a Go code
generator, for an IDL language similar to protobufs. My language supports
generating Go constants and values. When I generate a constant representing
`math.SmallestNonzeroFloat32`, I end up with `float32(1e-45)` in my generated
code, but that is broken since it is interpreted as `float32(0)` by the Go
compiler.
Note that this is a different problem from #12576, which has examples where
very small non-zero floating-point exact constants should be rounded to 0, and
the question is whether to pick -0 or 0, and we've (now) picked 0.