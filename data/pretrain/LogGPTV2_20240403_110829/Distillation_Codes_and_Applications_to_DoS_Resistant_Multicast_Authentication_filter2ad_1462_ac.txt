CODE. Recall that the decoder partitions the symbols
such that all the symbols in Qi share the same accumu-
lator value (i.e., there exists a such that for all (s(cid:1), w)
in Qi, Recover(s(cid:1), w) = a).
is
a set of valid erasure code symbols created in Step 2
of DISTILLATION ENCODE applied to D, then for ev-
ery valid distillation code symbol (s(cid:1), w) resulting from
Step 3 of DISTILLATION ENCODE, Recover(s(cid:1), w) =
Accumulate(S(cid:1)). Thus one partition, say Qv, contains
all the valid distillation code symbols of D.
In particular, if S(cid:1)
Now we show Qv contains no invalid symbols. Sup-
pose, by contradiction, that Q v contains an invalid symbol
(¯s(cid:1), ¯w). If a = Accumulate(S(cid:1)), then Recover(¯s(cid:1), ¯w) =
a, implying Verify(¯s(cid:1), ¯w, a) = true. However, since
¯s(cid:1) /∈ S(cid:1)
, this violates the security condition for element
forgery in one-way accumulators (Section 3.3.1). Thus,
Qv contains no invalid symbols and all the received valid
symbols of D.
Since, by assumption |Qv| ≥ n − t,
then
D(cid:1) = ERASURE DECODE(Qv) is successful.
Since
) = true, then V (cid:4)= ∅ (from Step 4 of
VALIDATE(D(cid:1)
DISTILLATION DECODE), and the authenticity property
of distillation codes implies V contains no invalid recon-
struction. Therefore, DISTILLATION DECODE outputs a
valid reconstruction.
3.4.3 DoS-resistance
In this section, we show distillation codes can efﬁciently
satisfy the authenticity and correctness properties in the
presence of medium bandwidth pollution attacks. This
means an adversary cannot cause resource exhaustion de-
nial of service attacks against the receivers.
Computational DoS-resistance We ﬁrst prove an
upper bound on the extra computation an adversary
can cause with a pollution attack with attack factor f .
Consider the three expensive operations in distillation
decoding: hash function applications, erasure decodings,
and VALIDATE(·) executions.
Theorem 2. In DISTILLATION DECODE, the most com-
putation an adversary can cause with a pollution attack
with attack factor f is (f + 1)· n· (log(n) + 1) hash func-
n−t(cid:7) + 1 erasure decodings and
tion applications and (cid:6) f·n
VALIDATE(·) executions.
Proof. To prove this upper bound, we calculate separate
upper bounds on the number of hash applications and
the number of erasure decodings and VALIDATE(·) exe-
cutions.
(1) Hash function applications: Every received sym-
bol triggers the execution of the accumulator operation
Recover(·,·). With our Merkle hash tree implementation
of one-way accumulators, this requires log(n) + 1 hash
function applications per symbol. Under attack factor f ,
this results in (f + 1)· n· (log(n) + 1) total hash function
applications.
(2) Erasure decodings and VALIDATE(·) executions:
In the DISTILLATION DECODE algorithm, an erasure
decoding is executed if and only if VALIDATE(·) is
executed. To trigger an additional erasure decoding
and VALIDATE(·) execution, the adversary must cause
DISTILLATION DECODE to create an additional partition
containing at least n − t symbols. Since symbols are
only put into a single partition, creating an additional
partition with at least n− t symbols requires the adversary
to inject at least n − t symbols. This holds regardless
of the adversary’s attack method. Thus, with attack
n−t(cid:7) addi-
factor f , an adversary can create at most (cid:6) f·n
tional partitions, and DISTILLATION DECODE executes at
most (cid:6) f·n
n−t(cid:7)+1 erasure decodings and VALIDATE(·) calls.
Thus, the most computation an adversary can cause
with a pollution attack with attack factor f is (f + 1) ·
n−t(cid:7) + 1
n· (log(n) + 1) hash function applications and (cid:6) f·n
erasure decodings and VALIDATE(·) executions.
This analysis demonstrates a nice property of distilla-
tion codes: the computational workload of DISTILLATION
DECODE scales linearly with the bandwidth of the attack
and is independent of the attack trafﬁc pattern. In Sec-
tion 4, we show why this property of distillation codes is
useful for constructing DoS-resistant multicast authenti-
cation protocols.
To demonstrate what this upper bound means in con-
crete terms, consider the case of a medium bandwidth
attack (f ≤ 10) where n = 128 and t = 64. Sup-
pose (TAG(·),VALIDATE(·)) are RSA-1024 signature gen-
eration and veriﬁcation, symbols are roughly the size of
a network packet (1024 bytes), and one message is sent
per second. This corresponds to 128 encoding symbols
per second of valid trafﬁc, or 1Mb per second. For each
valid message sent by the encoder, the decoder will ex-
ecute at most 11,264 hash function applications and 21
erasure decodings and signature veriﬁcations. This is rela-
tively insigniﬁcant: with these parameters, a 2.4GHz Pen-
tium 4 machine running Linux can compute on average
70,000 1024-byte SHA1 hashes per second, 1700 RSA-
1024 signature veriﬁcations per second, and 300 (128,64)
Reed-Solomon decoding operations per second. We con-
ﬁrm this analysis experientially in Section 5 with an im-
plementation of distillation codes.
Strong pollution attacks We now demonstrate a pollu-
tion attack which achieves this upper bound. To cause
PARTITION SYMBOLS to create a partition with n − t
symbols, the adversary must generate at least n − t sym-
bol/witness pairs that recover to the same accumulator
value. To do this, an adversary generates a set of random
symbols and runs Step 2 of DISTILLATION ENCODE to
augment the symbols with witness values. The adversary
then injects the invalid symbol/witness pairs and repeats
this process a total of (cid:6) f·n
n−t(cid:7) times.
State-holding DoS-resistance We defer analysis of
state holding attacks until Section 4.5.3, where we analyze
an application of distillation codes to multicast authenti-
cation.
3.4.4 Message reordering and replay
The authenticity and correctness properties of distillation
codes by themselves do not prevent replay and reordering
attacks. The correctness property guarantees that if the le-
gitimate encoder encodes and sends D over the channel
and the decoder receives at least n − t valid symbols of
D, then DISTILLATION DECODE will output some valid
reconstruction. D is not guaranteed to be the output be-
cause an adversary can replay valid symbols from previ-
ous messages into the decoding process. In the Step 4 of
DISTILLATION DECODE, V might contain multiple valid
reconstructions, and one will be selected randomly as the
output.
A more desirable correctness property is the following:
if T contains at least n − t valid symbols of D, then
DISTILLATION DECODE will output D. To achieve this,
we must add replay protection to (TAG(·),VALIDATE(·)).
Most any replay protection mechanism is applicable. For
example, the TAG(·) algorithm can append a monoton-
ically increasing counter to D before authenticating it.
VALIDATE(D) ﬁrst veriﬁes the authenticity of D and then
veriﬁes the counter value is fresh. To handle adversaries
that delay messages (i.e., deliver symbols from multiple
fresh valid messages in a single execution of DISTILLA-
TION DECODE), we can extend DISTILLATION DECODE
to output multiple valid reconstructions.
4. Pollution Resistant Authenticated Block
Streams
Pollution Resistant Authenticated Block Streams
(PRABS) use distillation codes to construct authenticated
multicast streams. PRABS builds on SAIDA (Signature
Amortization using the Information Dispersal Algorithm)
[22], a multicast authentication protocol proposed by
Park, Chong and Siegel which uses erasure codes.
Pannetrat and Molva [21] present a protocol similar to
SAIDA which has less overhead, but is slightly more
complex. Applying distillation codes to the Pannetrat-
Molva construction results in a protocol with about 10
bytes less of overhead per packet, but for the sake of
simplicity we focus on SAIDA.
SAIDA is a signature amortization scheme. Signature
amortization schemes [11, 18, 21, 22, 26, 33, 35] amortize
the packet overhead and cost of generating and verifying
a signature over many packets by dividing the multicast
stream into blocks. Each block is then authenticated with
a single digital signature.
Signature amortization schemes differ mainly in their
method for reliably transmitting the signature to the re-
ceivers and individually authenticating each packet in
the block.
Previous approaches include hash graphs
[11, 18, 26, 33], the Wong-Lam scheme [35], and erasure
codes [21, 22].
As we discussed in Section 1, these approaches to sig-
nature amortization are vulnerable to pollution attacks,
signature ﬂooding, and adversarial loss patterns. To de-
fend against adversarial loss patterns, we need a signature
amortization scheme that can tolerate arbitrary packet loss
within a block up to a predetermined number of pack-
ets. SAIDA uses erasure codes to achieve this. How-
ever, SAIDA is vulnerable to pollution attacks. PRABS
combines distillation codes with the basic approach of
SAIDA to resist pollution attacks, signature ﬂooding, and
adversarial loss patterns. Before we present the details of
PRABS, we ﬁrst review SAIDA and discuss its vulnera-
bilities to pollution attacks.
4.1. Signature Amortization using the Information
Dispersal Algorithm
=
h(pj
In SAIDA, the sender partitions the packet stream into
blocks of n consecutive packets. Let h(·) be a crypto-
graphic hash function, (PKSign(·,·), PKVerify(·,·,·))
be a public key signature scheme, and (K pub, Kpriv)
be the public/private keypair of the sender.
Then
for each block Pj = pj
the sender
computes the authentication string Hj||GHj , where
1
=
Hj
PKSign(Kpriv, h(Hj)). Given the hash string Hj and its
signature GHj , a receiver can authenticate any p j
i in block
j by verifying PKVerify(Kpub, Hj, GHj ) = true and
that h(pj
, pj
2
2)|| . . .||h(pj
n)
i ) equals the i-th entry in the hash string H j.
1)||h(pj
and GHj
, . . . , pj
n,
This process assumes the receiver knows Hj and GHj .
We would like to authenticate every received packet, re-
gardless of the loss pattern of other packets in the block. A
naive solution is to include Hj and GHj with every packet,
but this incurs large packet overhead.
SAIDA constructs an (n, t) erasure code over H j||GHj
and includes one encoding symbol with each packet in
i||sj
the block. Each augmented packet takes the form p j
i ,
i is the i-th packet in the original block and s j
where pj
i is
the i-th symbol of the erasure encoding. If no more than t
packets are lost in transmission, then the receiver can re-
construct Hj||GHj , verify GHj , and authenticate each of
the received packets.
4.2. Pollution vulnerabilities in SAIDA
SAIDA is vulnerable to pollution attacks.
If a single
invalid symbol is used in the decoding algorithm, it will
fail to reconstruct Hj||GHj . Park, Chong, and Siegel pro-
pose using distributed ﬁngerprints to remedy this problem.
Distributed ﬁngerprints combine erasure codes with error-
correcting codes (ECC) to achieve robustness to sym-
bol modiﬁcation [14]. In SAIDA, distributed ﬁngerprints
augment each sj
i with a symbol from an (n, t) ECC en-
n), where h(·)
coding of Lj = h(sj
is a collision-resistant cryptographic hash function and
n} are the erasure encoding symbols of
{sj
Hj||GHj . The decoder reconstructs Lj using ECC de-
2)|| . . .||h(sj
1)||h(sj
, . . . , sj
, sj
2
1
i by comparing
coding and veriﬁes a candidate symbol ¯s j
h(¯sj
i ) to the i-th hash value in Lj.
Park, Chong, and Siegel claim distributed ﬁngerprints
prevent DoS in SAIDA.3 Although distributed ﬁngerprints
can handle symbol modiﬁcation, they were not designed
to defend against pollution attacks where many invalid
symbols are injected. Since distributed ﬁngerprints rely
on ECC, they are vulnerable to the pollution attacks (Sec-
tion 3.1).
4.3. Using distillation codes to prevent pollution
attacks
We now introduce Pollution Resistant Authenticated
Block Streams (PRABS). PRABS builds on SAIDA, but
uses distillation codes rather than erasure codes to resist
pollution attacks.
, pj
2
1)||h(pj
, . . . , pj
2)|| . . .||h(pj
In PRABS, the sender partitions the packet stream into
blocks of n consecutive packets, For block j composed of
packets Pj = pj
n the sender computes Hj 
j||h(pj
1
n). We assume each packet in-
cludes its block number and sequence number within the
block. Now, rather than encoding H j||GHj with an (n, t)
erasure code, we use an (n, t) distillation code. More
speciﬁcally, the sender applies DISTILLATION ENCODE
to input D = Hj. We deﬁne TAG(·), VALIDATE(·), and
STRIP(·) as follows:
GD  PKSign(Kpriv, h(D))
TAG(D)  D||GD
VALIDATE(D||GD)  if(PKVerify(Kpub, D, GD))
parse D as
j||h(p1)|| . . .||h(pn)
if j is fresh return true
STRIP(D||GD)  D
return false
, . . . , sj
Applying DISTILLATION ENCODE to Hj results in n dis-
, sj
tillation code symbols sj
n. The sender then
1
2
augments each packet pj
in the block with the corre-
i
sponding symbol sj
i and multicasts the augmented packets
i||sj
pj
i to the receivers. This process is repeated for each
block.
m} be the set of received packets from
Let {rj
block j. Since we assume a polluted erasure channel be-
, . . . , rj
, rj
2
1
3For SAIDA, digital ﬁngerprints are overkill. ECC is typically
more expensive than erasure codes, but the additional cost is only no-
ticeable when the input is large. Digital ﬁngerprints use ECC over
L = h(s1)||h(s2)|| . . . ||h(sn) where the si are the erasure encoded
symbols of some data D. |L| is relatively small for modest values of n,
and thus efﬁcient for ECC. However, when |D| is roughly equal to |L|,
as it is in SAIDA (for n = 128, |D| = 1408 vs. |L| = 1280), it is
more efﬁcient to simply use ECC directly on the input D.
1
, rj
2
, . . . , rj
m} con-
tween the sender and the receiver, {r j
tains some subset of the authentic packets and some num-
ber of invalid packets injected by the adversary. Since
we are considering pollution attacks on receivers, we
are most interested in the case when |invalid packets| (cid:11)
|valid packets|.
i||tj
The receiver parses each augmented packet r j
i
where pj
i represents an unaugmented packet of block j
and tj
i represents a symbol of the distillation encoded
authentication information Hj. The receiver then ap-
plies DISTILLATION DECODE to the received symbols
m}. In Step 4, the receiver has a set of can-
{tj
didate reconstructions of the form H j||GHj and executes
VALIDATE(·) on each one to obtain V, the set of valid re-
constructions. To account for non-malicious delays and
reorderings in the network, we alter DISTILLATION DE-
CODE to output the complete set of valid reconstructions
i as pj
, . . . , tj
, tj
2
1
STRIP(V)  {STRIP(R) : R ∈ V}
rather than a single valid reconstruction.
The authenticity property of distillation codes guaran-
tees all Hj ∈ STRIP(V) are authentic, but the receiver still