  The user's name is: VICKIE
    You may have noticed that template injections are similar to SQL injections. If the template engine can’t determine where a piece of user-supplied data ends and where the template logic starts, the template engine will mistake user input for template code. In those cases, attackers can submit arbitrary code and get the template engine to execute their input as source code!
    你可能会注意到模板注入和 SQL 注入类似。如果模板引擎无法确定用户输入数据在哪里结束，模板逻辑从哪里开始，则模板引擎会将用户输入误认为模板代码。在这种情况下，攻击者可以提交任意代码，并让模板引擎将其输入作为源代码执行！
    Depending on the permissions of the compromised application, attackers might be able to use the template injection vulnerability to read sensitive files or escalate their privileges on the system. We will talk more about escalating template injections later in this chapter.
    根据被侵入应用的权限，攻击者可能能够利用模板注入漏洞读取敏感文件或提升系统中的权限。我们稍后在本章中将详细讨论如何提升模板注入。
    Prevention
    How can you prevent this dangerous vulnerability? The first way is by regularly patching and updating the frameworks and template libraries your application uses. Many developers and security professionals are catching on to the danger of template injections. As a result, template engines publish various mitigations against this attack. Constantly updating your software to the newest version will ensure that your applications are protected against new attack vectors.
    你如何预防这个危险漏洞？首先，定期修复和更新应用程序所使用的框架和模板库是一种方法。许多开发人员和安全专家已经意识到模板注入的危险性。因此，模板引擎发布了各种缓解这种攻击的措施。不断更新软件到最新版本将确保您的应用程序受到新攻击向量的保护。
    You should also prevent users from supplying user-submitted templates if possible. If that isn’t an option, many template engines provide a hardened sandbox environment that you can use to safely handle user input. These sandbox environments remove potentially dangerous modules and
    functions, making user-submitted templates safer to evaluate. However, researchers have published numerous sandbox escape exploits, so this is by no means a bulletproof method. Sandbox environments are also only as safe as their configurations.
    如果可能的话，你也应该防止用户提供用户提交的模板。如果这不是一个选择，许多模板引擎提供了一种强化了的沙箱环境，可以用来安全地处理用户输入。这些沙箱环境会移除潜在有害的模块和函数，使得用户提交的模板更安全地进行评估。然而，研究人员已经发表了许多沙箱逃逸漏洞，所以这绝不是一个百分百安全的方法。沙箱环境也只要其配置足够安全，才会更加可靠。
    Implement an allowlist for allowed attributes in templates to prevent the kind of RCE exploit that I’ll introduce in this chapter. Also, sometimes template engines raise descriptive errors that help attackers develop exploits. You should handle these errors properly and return a generic error page to the user. Finally, sanitize user input before embedding it into web templates and avoid injecting user-supplied data into templates whenever possible.
    实现模板中属性允许列表以防止本章介绍的RCE漏洞类型，有时模板引擎会引发有助于攻击者开发漏洞利用的详细错误。应该适当处理这些错误并向用户返回通用错误页面。最后，在将用户输入嵌入Web模板之前对其进行净化，并尽可能避免将用户提供的数据注入模板。
    Hunting for Template Injection
    As with hunting for many other vulnerabilities, the first step in finding template injections is to identify locations in an application that accept user input.
    与寻找其他漏洞一样，寻找模板注入的第一步是识别应用程序中接受用户输入的位置。
    Step 1: Look for User-Input Locations
    Look for locations where you can submit user input to the application. These include URL paths, parameters, fragments, HTTP request headers and body, file uploads, and more.
    寻找可以向应用程序提交用户输入的位置。这些位置包括URL路径、参数、片段、HTTP请求头部和主体、文件上传等。
    Templates are typically used to dynamically generate web pages from stored data or user input. For example, applications often use template engines to generate customized email or home pages based on the user’s information. So to look for template injections, look for endpoints that accept user input that will eventually be displayed back to the user. Since these endpoints typically coincide with the endpoints for possible XXS attacks, you can use the strategy outlined in
     Chapter 6
    to identify candidates for template injection. Document these input locations for further testing.
    模板通常用于从存储的数据或用户输入动态生成网页。例如，应用程序通常使用模板引擎根据用户信息生成定制的电子邮件或主页。因此，要寻找模板注入，请寻找接受用户输入并最终显示回用户的端点。由于这些端点通常与可能的XXS攻击端点重叠，因此您可以使用第6章中概述的策略来识别模板注入的候选项。记录这些输入位置以进行进一步测试。
    Step 2: Detect Template Injection by Submitting Test Payloads
    Next, detect template injection vulnerabilities by injecting a test string into the input fields you identified in the previous step. This test string should contain special characters commonly used in template languages. I like to use the string
     {{1+abcxx}}${1+abcxx}[abcxx]
    because it’s designed to induce errors in popular template engines.
     ${...}
    is the special syntax for expressions in the FreeMarker and Thymeleaf Java templates;
     {{...}}
    is the syntax for expressions in PHP templates such as Smarty or Twig, and Python templates like Jinja2; and
    is the syntax for the Embedded Ruby template (ERB). And
     [
     random expression
     ]
    will make the server interpret the random expression as a list item if the user input is placed into an expression tag within the template (we will discuss an example of this scenario later).
    接下来，通过向先前识别出的输入字段注入测试字符串，检测模板注入漏洞。这个测试字符串应该包含常用模板语言中的特殊字符。我喜欢使用字符串{{1+abcxx}}${1+abcxx}[abcxx]，因为它被设计为在流行的模板引擎中导致错误。${...} 是 FreeMarker 和 Thymeleaf Java 模板中表达式的特殊语法；{{...}} 是 PHP 模板（如 Smarty 或 Twig）和 Python 模板（如 Jinja2）中表达式的语法； 是 Embedded Ruby 模板（ERB）中表达式的语法。而 [random expression] 则会使服务器将用户输入放入模板的表达式标记内并将其解释为列表项（稍后我们将讲述这种情况的一个例子）。
    In this payload, I make the template engine resolve the variable with the name
     abcxx
    , which probably has not been defined in the application. If you get an application error from this payload, that’s a good indication of
    template injection, because it means that the special characters are being treated as special by the template engine. But if error messages are suppressed on the server, you need to use another method to detect template injection vulnerabilities.
    在这个有效载荷中，我让模板引擎解析名称为abcxx的变量，这个变量可能没有在应用程序中定义。如果你从这个有效载荷中得到应用程序错误，这是一个很好的模板注入指示，因为这意味着特殊字符被模板引擎视为特殊字符。但是，如果服务器抑制错误消息，你需要使用另一种方法来检测模板注入漏洞。
    Try providing these test payloads to the input fields
     ${7*7}
    ,
     {{7*7}}
    , and
    . These payloads are designed to detect template injection in various templating languages.
     ${7*7}
    works for the FreeMarker and Thymeleaf Java templates;
     {{7*7}}
    works for PHP templates such as Smarty or Twig, and Python templates like Jinja2; and
    works for the ERB template. If any of the returned responses contain the result of the expression, 49, it means that the data is being interpreted as code by the template engine:
    尝试将这些测试载荷提供给输入字段$ {7 * 7}，{{7 * 7}}和。这些载荷旨在检测各种模板语言中的模板注入。 $ {7 * 7}适用于FreeMarker和Thymeleaf Java模板; {{7 * 7}}适用于PHP模板，如Smarty或Twig，以及Python模板，如Jinja2;并且适用于ERB模板。如果返回的任何响应都包含表达式结果49，则表示模板引擎正在将数据解释为代码：
GET /display_name?name={{7*7}}
Host: example.com
    While testing these endpoints for template injections, keep in mind that successful payloads don’t always cause results to return immediately. Some applications might insert your payload into a template somewhere else. The results of your injection could show up in future web pages, emails, and files. A time delay also might occur between when the payload is submitted and when the user input is rendered in a template. If you’re targeting one of these endpoints, you’ll need to look out for signs that your payload has succeeded. For example, if an application renders an input field unsafely when generating a bulk email, you will need to look at the generated email to check whether your attack has succeeded.
    在测试这些端点时防注入模板，请注意成功的有效负载并不总是立即返回结果。有些应用程序可能会将您的有效负载插入到其他地方的模板中。您的注入结果可能会在未来的网页、电子邮件和文件中显示。在有效负载提交后和用户输入在模板中呈现之间，可能会发生时间延迟。如果您正在针对其中之一的端点，则需要注意您的有效负载是否成功。例如，如果应用程序在生成批量电子邮件时不安全地呈现输入字段，则需要查看生成的电子邮件以检查攻击是否成功。
    The three test payloads
     ${7*7}
    ,
     {{7*7}}
    , and
    would work when user input is inserted into the template as plaintext, as in this code snippet:
    三个测试载荷 ${7*7}, {{7*7}}, 和  当用户输入被插入模板中作为纯文本时将能够工作，就像这段代码片段中一样：
from jinja2 import Template
tmpl = Template("
The user's name is: " + user_input + "")print(tmpl.render())
    But what if the user input is concatenated into the template as a part of the template’s logic, as in this code snippet?
    但如果用户输入被连接到模板中并作为模板逻辑的一部分，如此代码片段所示，情况会怎样？
from jinja2 import Template
tmpl = Template("
The user's name is: {{" + user_input + "}}")print(tmpl.render())
    Here, the user input is placed into the template within expression tags
     {{...}}
    . Therefore, you do not have to provide extra expression tags for the server to interpret the input as code. In that case, the best way to detect whether your input is being interpreted as code is to submit a random expression and see if it gets interpreted as an expression. In this case, you can input
     7*7
    to the field and see if
     49
    gets returned:
    在这里，用户输入会被放置在表达式标签{{...}}中的模板中，因此您不必为服务器提供额外的表达式标签来解释输入为代码。在这种情况下，检测您的输入是否被解释为代码的最佳方法是提交一个随机表达式，并查看它是否被解释为表达式。在这种情况下，您可以将7 * 7输入到字段中并查看是否返回了49：
GET /display_name?name=7*7
Host: example.com
    Step 3: Determine the Template Engine in Use
    Once you’ve confirmed the template injection vulnerability, determine the template engine in use to figure out how to best exploit that vulnerability. To escalate your attack, you’ll have to write your payload with a programming language that the particular template engine expects.
    确认模板注入漏洞后，确定使用的模板引擎以找出最佳利用方式。为了升级攻击，您需要使用特定模板引擎期望的编程语言编写有效载荷。
    If your payload caused an error, the error message itself may contain the name of the template engine. For example, submitting my test string
     {{1+abcxx}}${1+abcxx}[abcxx]
    to our example Python application would cause a descriptive error that tells me that the application is using Jinja2:
    如果你的载荷导致了错误，错误信息本身可能包含模板引擎的名称。例如，将我的测试字符串{{1+abcxx}}${1+abcxx}[abcxx]提交到我们的示例Python应用程序中，将引起一个详细的错误，告诉我应用程序正在使用Jinja2：
jinja2.exceptions.UndefinedError: 'abcxx' is undefined
    Otherwise, you can figure out the template engine in use by submitting test payloads specific to popular template languages. For example, if you submit
    as the payload and
     49
    gets returned, the application probably uses the ERB template. If the successful payload is
     ${7*7}
    , the template engine could either be Smarty or Mako. If the successful payload is
     {{7*7}}
    , the application is likely using Jinja2 or Twig. At that point, you could submit another payload,
     {{7*'7'}}
    , which would return
     7777777
    in Jinja2 and
     49
    in Twig. These testing payloads are taken from PortSwigger research:
     https://portswigger.net/research/server-side-template-injection/
    .
    否则，你可以通过提交特定于流行模板语言的测试载荷来确定模板引擎的使用情况。例如，如果您提交  作为载荷并返回 49，则该应用程序可能使用 ERB 模板。如果成功的负载是 $ {7*7}，则模板引擎可能是 Smarty 或 Mako。如果成功的负载是 {{7*7}}，则应用程序可能使用 Jinja2 或 Twig。在那时，您可以提交另一个负载{{7□7}，它将在Jinja2中返回7777777，在Twig中返回49。这些测试载荷来自PortSwigger研究：https://portswigger.net/research/server-side-template-injection/。
    Many other template engines are used by web applications besides the ones I’ve talked about. Many have similar special characters designed not to interfere with normal HTML syntax, so you might need to perform multiple test payloads to definitively determine the type of template engine you are attacking.
    除了我所提到的模板引擎，许多其他网络应用程序也在使用。许多模板引擎都使用类似的特殊字符，以设计不会干扰正常的HTML语法，因此您可能需要执行多个测试负载以明确确定要攻击的模板引擎的类型。
    Escalating the Attack
    Once you’ve determined the template engine in use, you can start to escalate the vulnerability you’ve found. Most of the time, you can simply use the
     7*7
    payload introduced in the preceding section to prove the template injection to the security team. But if you can show that the template injection can be used to accomplish more than simple mathematics, you can prove the impact of your bug and show the security team its value.
    一旦确定了使用的模板引擎，就可以开始升级发现的漏洞。大多数情况下，您可以简单地使用前面章节中介绍的 7 * 7 负载来证明模板注入的安全团队。但是，如果您可以显示模板注入可以用于完成更复杂的数学运算，那么就可以证明漏洞的影响，并向安全团队展示其价值。
    Your method of escalating the attack will depend on the template engine you’re targeting. To learn more about it, read the official documentation of the template engine and the accompanying programming language. Here, I’ll show how you can escalate a template injection vulnerability to achieve system command execution in an application running Jinja2.
    升级攻击的方式取决于你针对的模板引擎。要了解更多信息，请阅读模板引擎和相关编程语言的官方文档。在这里，我将展示如何将模板注入漏洞升级，以在运行Jinja2的应用程序中实现系统命令执行。
    Being able to execute system commands is extremely valuable for the attacker because it might allow them to read sensitive system files like customer data and source code files, update system configurations, escalate their privileges on the system, and attack other machines on the network. For example, if an attacker can execute arbitrary system commands on a Linux machine, they can read the system’s password file by executing the
    command
     cat /etc/shadow
    . They can then use a password-cracking tool to crack the system admin’s encrypted password and gain access to the admin’s account.
    攻击者能够执行系统命令是非常有价值的，因为这可能允许他们读取敏感的系统文件，比如客户数据和源代码文件，更新系统配置，提升他们在系统上的权限，并攻击网络中的其他计算机。例如，如果攻击者能够在Linux机器上执行任意系统命令，他们可以通过执行 cat /etc/shadow 命令读取系统的密码文件。然后，他们可以使用密码破解工具来破解系统管理员的加密密码并访问管理员的帐户。
    Searching for System Access via Python Code
    Let’s circle back to our example application. We already know that you can execute Python code by using this template injection vulnerability. But how do you go on to execute system commands by injecting Python code?
    让我们回到我们的示例应用。我们已经知道通过使用模板注入漏洞可以执行Python代码。但是，如何通过注入Python代码来执行系统命令呢？
from jinja2 import Template
tmpl = Template("
The user's name is: " + user_input + "")print(tmpl.render())
    Normally in Python, you can execute system commands via the
     os.system()
    function from the
     os
    module. For example, this line of Python code would execute the Linux system command
     ls
    to display the contents of the current directory:
    通常情况下，在Python中，您可以通过os模块的os.system()函数执行系统命令。例如，这行Python代码会执行Linux系统命令ls，以显示当前目录的内容。
os.system('ls')
    However, if you submit this payload to our example application, you most likely won’t get the results you expect:
    然而，如果您将此有效载荷提交到我们的示例应用程序中，您很可能无法获得您预期的结果。
GET /display_name?name={{os.system('ls')}}
Host: example.com
    Instead, you’ll probably run into an application error:
    相反，您可能会遇到应用程序错误：
jinja2.exceptions.UndefinedError: 'os' is undefined
    This is because the
     os
    module isn’t recognized in the template’s environment. By default, it doesn’t contain dangerous modules like
     os
    . Normally, you can import Python modules by using the syntax
     import
     MODULE
    , or
     from
     MODULE
     import *
    , or finally
     __import__('
     MODULE
    '
     )
    . Let’s try to import the
     os
    module:
    这是因为模板环境中没有识别到`os`模块。默认情况下，它不包含像`os`这样的不安全模块。通常情况下，您可以通过以下语法导入Python模块：`import MODULE`，或者`from MODULE import *`，或最后`__import__('MODULE')`。让我们尝试导入`os`模块：
GET /display_name?name="{{__import__('os').system('ls')}}"
Host: example.com
    If you submit this payload to the application, you will probably see another error returned:
    如果您提交此有效负载到应用程序，则可能会返回另一个错误。
jinja2.exceptions.UndefinedError: '__import__' is undefined
    This is because you can’t import modules within Jinja templates. Most template engines will block the use of dangerous functionality such as
     import
    or make an allowlist that allows users to perform only certain operations within the template. To escape these limitations of Jinja2, you need to take advantage of Python sandbox-escape techniques.
    这是因为在Jinja模板中不能导入模块。大多数模板引擎将阻止使用危险功能，例如导入或创建允许用户在模板中执行某些操作的白名单。为了摆脱Jinja2的这些限制，您需要利用Python沙箱逃逸技术。
    Escaping the Sandbox by Using Python Built-in Functions
    One of these techniques involves using Python’s built-in functions. When you’re barred from importing certain useful modules or importing anything at all, you need to investigate functions that are already imported by Python by default. Many of these built-in functions are integrated as a part of Python’s
     object
    class, meaning that when we want to call these functions, we can create an object and call the function as a method of that object. For example, the following GET request contains Python code that lists the Python classes available:
    其中一种技术包括使用Python的内置函数。当禁止导入某些有用的模块或根本不允许导入任何东西时，您需要调查Python默认已导入的函数。许多这些内置函数都是作为Python的对象类的一部分集成的，这意味着当我们想调用这些函数时，我们可以创建一个对象并将函数作为该对象的方法调用。例如，以下GET请求包含列出可用Python类的Python代码：
GET /display_name?name="{{[].__class__.__bases__[0].__subclasses__()}}"
Host: example.com
    When you submit this payload into the template injection endpoint, you should see a list of classes like this:
    当你将这个有效载荷提交到模板注入端点时，你应该会看到这样一个类列表：
[, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ...]
    To better understand what’s happening here, let’s break down this payload a bit:
    为了更好地理解这里正在发生的事情，让我们简要分析一下这个有效载荷：
[].__class__.__bases__[0].__subclasses__()
    It first creates an empty list and calls its