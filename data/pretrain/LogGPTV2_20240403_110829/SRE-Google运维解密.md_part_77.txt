## Page 417
的旅行，这样才能建立人与人之间的高质量关系。虽然有的时候这种旅行可以推迟进行，
异地团队合作，或者与跨越时区的团队一起工作则需要极好的书面沟通能力或者是大量
一般来说，在做本地团队边界之外的工作时要想成功就一定需要良好的沟通技巧。而与
部分也都适用于SRE。
要良好的协作能力。这里再提一下，有很多阅读材料都讨论了团队协作，这类资料的大
简单直接的。做成任何高价值的事情都需要很多人共同协作。正因为这样，SRE团队需
一般来说，单人项目最终肯定会失败，除非此人个人能力超强或者待解决的问题是非常
SRE采用很多方法提高工作效率。
高效工作的技术
项目进行讨论设计文档，必要的时候甚至亲自书写代码。
好的技术负责人、SRE经理以及项目经理组成了一个完整的管理团队，可以很好地组织
SRE经理在这之外还有两个特殊责任：绩效管理，以及其他一切其他人不能处理的事情，
负责人和SRE经理的工作几乎一样，因为我们的SRE经理也具有高度的技术能力。但
是在团队中推进共识的建立来引领团队方向等方式来领导团队。在Google内部，技术
多种方式进行领导。他可以通过仔细评审每个人的代码，组织进行季度工作汇报，或者
不管这些角色定义得是否清晰，基本来说，技术负责人是负责团队技术方向的，可以以
费更多时间，因为什么东西都不太确定。
个人能力越强，整个团队适应新的情况的能力也越强。但是这样的团队需要在沟通上花
境中工作，这样他们可以随时协商切换责任。普遍看来，越是动态的团队，团队成员的
们据此可以迅速和安全地做出范围内的决策。另外一些成员则希望在一个更为动态的环
被称为PM、TPM、PGM）的角色。有的成员希望这些角色的责任被明确定义：因为他
正式地讲，SRE团队中有着“技术负责人”（TL）、“SRE经理”（SRM）和“项目经理”（也
着需要特别注意沟通，防止认知偏差的出现，我们就不在这里详细介绍了。
多样化强的团队在各方面都更强（参见文献[Ne114]），组建这样一个多样化的团队意味
力都有。我们唯一可以确定的是：成功的协作需要团队内充分的多样性。有很多证据表明，
SRE团队的成员有着各种各样的技能，从系统工程到软件工程，以及组织能力和管理能
团队构成
程来定义一个团队将要做什么一
时专业化也是有端的，因为它会导致局部化，忽视大局。我们要有一个清晰的团队章
团队X只会为产品Y服务。专业化有很多优势，因为它能够大幅提高技术熟练度。但同
一更重要的是不会做什么一
一但这并不总是那么容易。
SRE的内部协作
375
431
---
## Page 418
SRE内部的协作案例分析：Viceroy
逐渐淡薄成一个电子邮件地址，直到你再次出现进行直接沟通。
但是最终来看仍是必要的。书面沟通能力再强，随着时间的推移，人们对你的印象也会
376
注3在这个案例中，JavaScript的大量使用也是一个很严重的因素。
们又一次造成了很多重复项目的诞生。在12~18个月的时间内，很多团队一
由于当时没有一套可行的方案来部署Monarch，好儿个团队开始各自闭门造车。由于
那些尝试使用Monarch的人很快发现它在监控台功能上有两个不足：
系统在监控台功能上仍然存在问题。
Borgmon的替代品，在内部也有越来越多的团队采用。但是在替换过程中，我们发现新
以测试。当时，Monarch已经足够成熟，原则上获得了SRE团队的一致认可即可成为
发的一套HTML模板系统，这个系统不符合任何标准，充满了各种边界条件，非常难
10章）有很多可以改进的地方。例如，该系统的监控台就很难用，因为它用的是自己开
设计目的就是为了方便SRE团队）。但是，大家都知道过时的监控系统Borgmon（见第
以SRE团队比非SRE团队花了更多时间来接受Monarch（这很讽刺，因为Monarch的
Monarch——Google内部新的监控系统上。SRE对于监控系统的态度是非常保守的，所
Viceroy是与众不同的。该项目开始于2012年，当时许多 SRE团队正在考虑如何迁移到
Viceroy的诞生
同时解决一个问题。
就是在鼓励每个工程师使用该SDK创造出另外一个废弃品，而不是尽可能地为更多人
同时Google基础设施通常提供的是一个SDK而非完整的一套产品。这些环境因素其实
通过开发自己的解决方案获得迅速的直接回报，跨越团队边界的工作通常是很艰难的，
造成团队产生许多废弃的、遗留的监控框架的原因是非常容易理解的：每个团队都可以
实现相似的项目；在多种因素作用下，监控台程序在这个问题上尤其严重。
框架，也是一项服务。目前的SRE的组织架构经常会导致不同团队产出多种目的相同、
一个成功的 SRE内部跨团队协作案例叫作Viceroy，该项目是一个监控台（dashboard）
·Monarch不支持过去的监控系统模板，这样使得迁移到Monarch非常困难。
服务没有很好的扩展能力。
第31章SRE与其他团队的沟通与协作
注3
一包括
---
## Page 419
Console++团队很乐意与Viceroy整合，他们在2013年上半年的实验证明了两个项目之
同时每个项目也有它们自己的技术要求，这些依赖于作者的偏好或者经验。比如说：
很不情愿在上面花时间，动力就更小了。但是，所有的监控台系统都有两个主要功能需求：
替换成一个未经验证的新系统又很麻烦。监控系统本身的需求就很多样化，加上团队又
很显然，团队现存的监控系统越庞大，他们切换的动力越小：现有系统的维护压力很小，
自2013年年初，那些没有迁移到新系统，但是很想尝试的团队开始对Viceroy产生了兴趣。
年年中。
联合起来创造一个对于所有SRE团队通用的解决方案。由此，Viceroy项目诞生于2012
队之间终于发现了彼此之间重复性的劳动。这些团队最终决定一起做更明智的事情一
的工作（这里一个值得提到的例子是Console++项目）。最终理智占据了上风，各个团
Spanner团队、广告前端服务团队以及一些其他服务团队都分别开始了自己在这个方面
发其他的功能又花费了几个季度的时间，2014年年底，整合系统正式完成。
经成为一个人人皆知的监控解决方案的品牌，联合项目就延续了Viceroy这个名字。开
很好地一起工作。这时，两个团队都愿意在整合上继续投入力量，因为Viceroy当时已
JavaScript来呈现图表。两个团队再次碰头，发现整合最终需要的就是用Viceroy服务器
和Viceroy都有了显著的发展。它们之间的技术差距已经缩小，因为Viceroy也开始使用
最终，我们暂时搁置了对于统一监控台框架的讨论。然而，到2013年年底，Console+-
为这两个系统中确实有一些基本的相似性：
过多的JavaScript，而Console++则是以JavaScript为主。但是，我们仍有一线希望，因
间的根本差异造成整合基本不可能。这其中的最大困难是，Viceroy的设计中就没有采用
由于这么多复杂要求的存在，全面融合到一个框架里非常困难。事实上，虽然
·它们的HTML模板进行渲染的语法很类似。
》使用全静态内容，这样页面可以缓存在浏览器中。
·核心监控系统之外的多样化数据源。
·同时支持Monarch和Borgmon。
?
）支持复杂的、自定义的监控台页面。
统都希望缓存监控数据并支持离线定期产生那些实时计算过于耗时的控制台数据。
没有JavaScript的页面和大量使用Javascript与Ajax的页面。
用配置文件自动生成的页面或者是用明确的HTML布局的页面。
它们的一些长期目标是一致的，这两个团队也都还没有开始解决。例如，这两个系
SRE内部的协作案例分析：Viceroy
377
434
---
## Page 420
378
目标，但最初的项目范围还是有限的。然而随着项目范围的不断扩大，核心功能的按时
此外，Viceroy项目的范围也随着时间的推移而增长。该系统在上线时有着雄心勃勃的
能会随着时间的推移出现各种问题，最终一般会被丢弃。
其主要成本是所有权的稀释问题：一旦某个功能做完了，维护者离开团队之后，这个功
随着人们不停地加入和离开团队，我们发现，这种短期的贡献是有用的但也是昂贵的。
当某个SRE贡献了Viceroy的某个功能之后回到自己的团队时，他们就成为Viceroy的
在项目中增加新人需要对其进行系统总体设计和结构的培训，这需要一定的时间。然而，
着时间推移，贡献者的职责也发生了变化，以及因此许多人只能够坚持参与项目1~3个
虽然Viceroy的核心团队一直保持一致，由其他贡献者组成的扩展团队却变化很快。随
前和结束之后立刻进行的即兴讨论（现在的沟通渠道已经大大改善了）。
很容易被误解。在项目开始之初，那些不在总部工作的团队成员经常会错过会议开始之
间的沟通方式差异很大，第一次见面时书面表达习惯和口语表达习惯中隐含的微妙暗示
在新的Viceroy团队建立之初，远程团队成员之间的协调是非常困难的。因为人与人之
地域的团队沟通所造成的。
虽然Viceroy最终取得了成功，但过程中遇到了很多困难。其中的许多困难都是由于跨
所面临的挑战
非另行开发监控台程序。
的一贯特色，它没有“要求”团队采用Viceroy：相反，它“建议”团队采用Viceroy而
Viceroy被正式宣布为适用于所有SRE团队的通用监控解决方案。这个声明带有Google
中都发现了自己的价值，并且从对方的贡献中受益。这种势头一直保持到2014年年底，
最终看来，对未来的一个共同愿景是项目合并成功的关键因素。这两个团队在开发过程
整合过程带来了巨大的收益：
本地专家，这种本地专家带来了更多的用户。
月的时间。因此，比Viceroy核心团队规模大得多的贡献者群体有很多的人员变动。
·总的来说，在整合项目上的开发速度比其他各重复项目速度的总和大得多。
·Console++项目从Viceroy的很多改进中也获益不少，例如缓存和背景数据渠道
·Viceroy增加了大量的数据源支持，同时增加了一个JavaScript客户端。
JavaScript编译过程被重写，以支持独立的模块。这些模块可以被选择性地包括
的增加。
在其中。这对使用自己的JavaScript代码的团队来说是必需的。
第31章SRE与其他团队的沟通与协作
---
## Page 421
和改进设计。文档化是抵消物理和／或逻辑距离的主要技术之一，一定要多用。
该在团队内部评审。这样，团队中的每个人都有机会及时了解变化，也有机会参与影响
目中，他们的工作才算完成。
中的每个人都知道整个团队对他们的期望，并且知道只有该组件完全集成并使用在主项
只有当团队的目标是提供某个功能或解决某个问题时，才是最高效的。这样确保了团队
期限。（同时还要试着不要让康威定律太多地影响软件的自然状态。）注4
在同一个地域范围内。如果将这些组件分散给项目的子团队，应建立明确的目标和最后
的部分可以减少沟通成本。努力确保每一个组件都可以被分配给一个小组，最好是保持
标准的“分而治之”的策略适用于跨地域项目；通过将项目拆分成尽可能多的合理大小
本地决策。
遍认同的做决策的方式。如果彼此有高度的认同感和信任感的话，应该倾向于多做一些
确保所有的工作都与这个愿景相关，设置正确的工作优先级。同时，我们还需要一个普
应该仔细考虑一下项目的框架。项目负责人非常重要：他们为项目提供一个长期愿景：
随着项目的发展，项目规模也会扩大，肯定会有其他团队的成员参与进来。因此，我们
来的维护）。有着特定目标的贡献者通常会更有动力，能够更好地维护他们的贡献。
个闪亮的项目上带上自己的名字；想要在一个新的令人兴奋的项目上编码，却不承诺未
献者会实际投入时间，而不只是为了一些朦胧的自我实现的目标而加入（例如想要在一
动力十足的贡献者是有价值的，但不是所有的贡献成果都是同样宝贵的。确保项目的贡
种做法其实都有一定成本。
则会有更高的产能。单地项目其实也可能会导致其他人不知道你正在做什么，所以这两
域工作需要更多的沟通，工作完成得也更慢；但是好处是——如果你能协调好的话—
只有在不得已的情况下才应该跨地域开发项目，但是这同时也会带来一定的好处。跨地
建议
题或做出决定，这可能会导致一定的冲突发生。
点都是好的，人们总是会默认选择阻力最小的路径，在不涉及远程交流的情况下讨论问
最后，Viceroy团队发现很难完全掌握一个由远程贡献者维护的组件。即使大家的出发
正轨上。
交付变得越来越困难，同时还要改善项目管理，设置更清晰的方向以确保项目一直走在
注4
显然，
也就是说，
一般的软件工程最佳实践也适用于协作项目：每一个组件都应该有设计文档并应
软件和生产软件的组织具有相同的沟通结构，可参考htps://len.wikipedia.org/wiki/
SRE内部的协作案例分析：Viceroy
1379
436
---
## Page 422
437
380