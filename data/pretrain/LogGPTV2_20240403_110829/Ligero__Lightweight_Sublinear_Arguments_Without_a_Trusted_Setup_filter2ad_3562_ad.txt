4.1.1 A Tighter Analysis? We conjecture that the requirement
e 
e. Then, there exists v∗ ∈ L∗ such that d(v∗, L) > e, where L∗ is the
row-span of U ∗.
Proof: Assume towards a contradiction that d(v∗, L) ≤ e for all
0 ∈ L∗ maximizes the distance from L. Since
v∗ ∈ L∗. Suppose v∗
d(U ∗, Lm) > e, there must be a row U ∗
0, L) (cid:44)
0 = u0 + χ0 and U ∗
∅. Let v∗
i
= ui + χi for u0, ui ∈ L and χ0, χi
of weight ≤ e. We argue that there exists α ∈ F such that for
we have d( ˆv, L) > d(v∗
0 + αU ∗
ˆv = v∗
0, L), contradicting the choice
of v∗
0. This follows by a union bound, noting that for any j ∈
∆(v∗
0, L)∪ ∆(U ∗
i , L) there is at most one choice of α such that ˆvj = 0.
(cid:3)
Given Lemma 4.3 it su(cid:28)ces to show that in any a(cid:28)ne subspace
of Fn, either all points are e-close to L or almost all are not. This
reduces to showing the same for 1-dimensional spaces. We state an
explicit version of the conjecture for the case of RS codes.
such that ∆(U ∗
i , L)\∆(v∗
i
i
Conjecture 4.1. Let L = RSF,n,k,η be a Reed-Solomon code with
minimal distance d = n − k + 1. Let e be a positive integer such
that e  e. Then, for
a random w∗ in the row-span of U ∗, we have
, L) ≤ e] ≤ d/|F|.
Pr[d(w
∗
Lemma 4.4 implies the following conjectured stronger version
of Theorem 4.3.
Theorem 4.4. Suppose Conjecture 4.1 holds. Let e be a positive
integer such that e  e. Then, for any
malicious P strategy, the oracle U ∗ is rejected by V except with
≤ (1 − e/n)t + d/|F| probability.
4.2 Testing Linear Constraints over Interleaved
Reed-Solomon Codes
In this section we describe an e(cid:28)cient procedure for testing that
a message encoded by an interleaved RS code satis(cid:27)es a given set
of linear constraints. This generalizes a procedure from [26, 33]
for testing that such an encoded message satis(cid:27)es a given set of
replication constraints.
In the following we assign a message in F(cid:96) to each codeword
in Fn by considering a (cid:27)xed set of (cid:96) evaluation points of the poly-
nomial de(cid:27)ned by the codeword. Note that while each codeword
has a unique message assigned to it, several di(cid:29)erent codewords
can be “decoded” into the same message. However, if the degree of
the polynomial corresponding to the codeword is restricted to be
smaller than (cid:96), the encoding becomes unique.
Definition 4.5 (Encoded message). Let L = RSF,n,k,η be an
RS code and ζ = (ζ1, . . . , ζ(cid:96)) be a sequence of distinct elements
of F for (cid:96) ≤ k. For u ∈ L we de(cid:27)ne the message Decζ (u) to be
(pu(ζ1), . . . , pu(ζ(cid:96))), where pu is the polynomial (of degree < k) corre-
sponding to u. For U ∈ Lm with rows u
, . . . , um ∈ L, we let Decζ (U)
be the length-m(cid:96) vector x = (x11, . . . , x1(cid:96), . . . , xm1, . . . , xm(cid:96)) such
that (xi1, . . . , xi (cid:96)) = Decζ (ui) for i ∈ [m]. Finally, when ζ is clear
from the context, we say that U encodes x if x = Decζ (U).
1
We now describe a simple testing algorithm for checking that the
message x encoded by U satis(cid:27)es a given system of linear equations
Ax = b, for A ∈ Fm(cid:96)×m(cid:96) and b ∈ Fm(cid:96). (We will always apply this
test with a sparse matrix A containing O(m(cid:96)) nonzero entries.) The
test simply picks a random linear combination r ∈ Fm(cid:96) and checks
that (rT A)x = rT b. Note that if Ax (cid:44) b, the test will only pass
with 1/|F| probability. To make the test sublinear, we let the prover
provide a polynomial encoding (rT A)x and check its consistency
with rT b and with U on t randomly chosen symbols.
To further simplify the description and analysis of the testing al-
gorithm, we assume that U is promised to be e-close to Lm. Our (cid:27)nal
IPCP we will run Test-Interleaved to ensure that if the promise
is violated, this is caught with high probability.
Test-Linear-Constraints-IRS(F, L = RSF,n,k,η, m, t, ζ , A, b; U)
• Oracle: A purported Lm-codeword U that should encode a mes-
• Interactive testing:
sage x ∈ Fm(cid:96) satisfying Ax = b.
(1) V picks a random vector r ∈ Fm(cid:96) and sends r to P.
(2) V and P compute
rT A = (r11, . . . , r1(cid:96), . . . , rm1, . . . , rm(cid:96))
and, for i ∈ [m], let ri(·) be the unique polynomial of degree
< (cid:96) such that ri(ζc) = ric for every c ∈ [(cid:96)].
(3) P sends the k + (cid:96) − 1 coe(cid:28)cients of the polynomial de(cid:27)ned
i =1 ri(•) · pi(•), where pi is the polynomial of
(4) V queries a set Q ⊂ [n] of t random symbols U[j], j ∈ Q.
(5) V accepts if the following conditions hold:
degree < k corresponding to row i of U .
by q(•) =m
(a) 
c∈[(cid:96)] q(ζc) =
(b) For every j ∈ Q,m
i∈[m],c∈[(cid:96)] ricbic.
i =1 ri(ηj) · Ui, j = q(ηj).
We will analyze the test under the promise that the (possibly badly
formed) U is close to Lm.
The following lemma easily follows by inspection.
Lemma 4.5. If U ∈ Lm, U encodes x such that Ax = b, and P is
honest, V always accepts.
Soundness is argued by the following lemma.
Lemma 4.6. Let e be a positive integer such that e < d/2. Suppose
that a (badly formed) oracle U ∗ is e-close to a codeword U ∈ Lm
encoding x ∈ Fm(cid:96) such that Ax (cid:44) b. Then, for any malicious P
strategy, U ∗ is rejected by V except with at most ((e +k +(cid:96))/n)t +1/|F|
probability.
Proof: Let q be the polynomial generated in Step 3 following the
honest P strategy on input U . Since we assume Ax (cid:44) b, we have
Prr[rT Ax = rT b] = 1/|F|. It follows that except with probability
1/|F| over the choice of r in Step 1, the polynomial q fails to satisfy
c∈[(cid:96)] q(ζc) = (rT A)x
Next, we analyze the probability that a malicious P strategy is
rejected conditioned on q failing in this way. Let q(cid:48) be the poly-
nomial sent by the prover. If q(cid:48) = q, the V rejects in Step 5(a).
If q(cid:48) (cid:44) q, then using the fact that q and q(cid:48) are of degree at most
k + (cid:96) − 2, we have that the number of indices j ∈ [n] for which
q(ηj) = q(cid:48)(ηj) is at most k + (cid:96) − 2. Let Q(cid:48) be the set of indices on
which they agree. Then V rejects in Step 5(b) whenever Q selected
in Step 4 contains an index i (cid:60) Q(cid:48) ∪ E. This fails to happen with
the condition in Step 5(a). Indeed, we have
and
(cid:1) ≤ ((e + k + (cid:96))/n)t . The lemma
probability at most(cid:0)e +k +(cid:96)−2
i∈[m],c∈[(cid:96)] ricbic = rT b.
(cid:1)/(cid:0)n
now follows by a union bound.
t
t
(cid:3)
4.3 Testing Quadratic Constraints over
Interleaved Reed-Solomon Codes
In this section we describe a simple test for verifying that vectors
x, y, z ∈ Fm(cid:96), encoded by U x , U y , U z ∈ Lm respectively, satisfy the
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2094constraints x (cid:12) y + a (cid:12) z = b for some known a, b ∈ Fm(cid:96), where (cid:12)
denotes pointwise product. Letting L = RSF,n,k,η, Ua = Enc(a) and
Ub = Enc(b), this reduces to checking that U x (cid:12)U y +U a (cid:12)U z −U b
encodes the all-0 message 0m(cid:96) in the (interleaved extension of) ˆL =
RSF,n,2k−1,η. This could be done using the general membership test
for interleaved linear codes (Test-Interleaved from Section 4.1),
since the set of codewords in ˆL that encode the all-0 message is a
linear subcode of ˆL. In the following we present this test in a self-
contained way, exploiting the promise that U x , U y , U z are close to
Lm for a tighter analysis.
Test-Quadratic-Constraints-IRS(F, L = RSF,n,k,η, m, t, ζ , a, b; U x ,
U y , U z)
• Oracle: Purported Lm-codewords U x , U y , U z that should en-
• Interactive testing:
code messages x, y, z ∈ Fm(cid:96) satisfying x (cid:12) y + a (cid:12) z = b.
(1) Let U a = Encζ (a) and U b = Encζ (b).
(2) V picks a random linear combinations r ∈ Fm and sends r
(3) P sends the 2k − 1 coe(cid:28)cients of the polynomial p0 de(cid:27)ned
i (•)·
i (•)+pa
i (•) − pb
are the polynomials of
pz
degree < k corresponding to row i of U x , U y , U z, and pa
i , pb
i
are the polynomials of degree < (cid:96) corresponding to row i
of U a, U b.
(4) V picks a random index set Q ⊂ [n] of size t, and queries
U x[j], U y[j], U z[j], j ∈ Q.
(5) V accepts if the following conditions hold:
(a) p0(ζc) = 0 for every c ∈ [(cid:96)].
(b) For every j ∈ Q, it holds that
i, j − U b
by p0(•) =m
i =1 ri·pi(•), where pi(•) = px
i (•), and where px
i , p
ri ·(cid:104)
= p0(ηj).
i, j · U
U x
m
+ U a
i, j · U z
i (•)·p
y
to P.
y
i , pz
i
y
i, j
(cid:105)
i, j
i =1
The following lemma follows again directly from the description.
Lemma 4.7. If U x , U y , U z ∈ Lm encode vectors x, y, z ∈ Fm(cid:96)
satisfying x (cid:12) y + a (cid:12) z = b and P is honest, V always accepts.
Soundness is argued by the following lemma.
Lemma 4.8. Let e be a positive integer such that e < d/2. Let
U x∗, U y∗, U z∗ be badly formed oracles and let U ∗ ∈ F3m×n be the
matrix obtained by vertically juxtaposing the corresponding m × n
matrices. Suppose d(U ∗, L
3m) ≤ e, and let U x , U y , U z, respectively,
be the (unique) codewords in Lm that are closest to U x∗, U y∗, U z∗.
Suppose U x , U y , U z encode x, y, z such that x (cid:12) y + a (cid:12) z (cid:44) b. Then,
for any malicious P strategy, (U x∗, U y∗, U z∗) is rejected by V except
with at most 1/|F| + ((e + 2k)/n)t probability.
Proof: Let p0 be the polynomial generated in Step 3 following the
honest P strategy on U x , U y , U z. Since x, y, z do not satisfy the
constraints, except with probability 1/|F| over the choice of r in
Step 2, the polynomial p0 fails to satisfy the condition in Step 5(a).
i =1 ri · pi(•) and there must exists an i
and ζc such that pi(ζc) (cid:44) 0. Next, we analyze the probability that a
malicious P strategy is rejected conditioned on p0 failing in this
way.
0 = p0, V
0 (cid:44) p0, then using the fact that p0 and p(cid:48)
rejects in Step 5(a). If p(cid:48)
0
Indeed, we have p0(•) =m
0 be the polynomial sent by the prover. If p(cid:48)
Let p(cid:48)
are of degree at most 2k − 2, we have that the number of indices
j ∈ [n] for which p0(ηj) = p(cid:48)