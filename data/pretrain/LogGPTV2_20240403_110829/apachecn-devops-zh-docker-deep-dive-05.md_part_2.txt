TLS 来救援了！
Docker 允许您强制客户端和守护程序只接受用 TLS 保护的网络连接。建议在生产环境中使用这种方式，即使所有流量都通过受信任的内部网络。
您可以保护客户端和守护进程。保护客户端会强制客户端仅使用由受信任的证书颁发机构(CA)签名的证书连接到 Docker 守护程序。保护守护程序会强制守护程序只接受来自客户端的连接，这些客户端提供来自受信任证书颁发机构的证书。两种模式的结合提供了最大的安全性。
我们将使用一个简单的实验室环境来完成为**守护程序模式**和**客户端模式** TLS 配置 Docker 的过程。
##### 实验室设置
对于剩余的示例，我们将使用图 5.6 所示的实验室设置。您的实验室看起来会有所不同，但是客户端和守护程序能够通过名称相互解析是至关重要的。
![Figure 5.6 Sample lab setup](img/figure5-6.png)
Figure 5.6 Sample lab setup
高级别进程如下:
1.  **配置证书颁发机构和证书**
2.  创建证书颁发机构
3.  为守护进程创建密钥并签名
4.  为客户端创建密钥并签名
5.  分发密钥
6.  **配置 Docker 使用 TLS**
7.  配置守护模式
8.  配置客户端模式
##### 创建证书颁发机构(自签名证书)
如果您正在实验室中学习，并且还没有证书颁发机构，则只需完成这一步。此外，我们在这里构建的 CA 是为了帮助演示如何配置 Docker，我们不是试图构建生产级的东西。
从实验室的`CA`节点运行以下命令。
1.  Create a new private key for the CA.
    您将设置一个密码作为操作的一部分。别忘了！
    ```
     $ openssl genrsa -aes256 -out ca-key.pem 4096
     Generating RSA private key, 4096 bit long modulus
     ...............................................++
     ..++
     e is 65537 (0x10001)
     Enter pass phrase for ca-key.pem:
     Verifying - Enter pass phrase for ca-key.pem: 
    ```
     `您将在当前目录中有一个名为`ca-key.pem`的新文件。这是 CA 的私钥。` 
`*   Use the CA’s private key to generate a public key (certificate).
    您需要输入上一步中的密码。希望你没有忘记；-)
    ```
     $ openssl req -new -x509 -days 730 -key ca-key.pem -sha256 -out ca.pem 
    ```
     `这为您的工作目录添加了第二个文件`ca.pem`。这是 CA 的公钥，也称为“证书”。`` 
 ``现在，您的当前目录中有两个文件:`ca-key.pem`和`ca.pem`。这些是认证中心的密钥对，构成了认证中心的*身份*。此时，CA 就可以使用了。
##### 为守护进程创建密钥对
在这一步中，我们将为`node3`上的 Docker 守护程序生成一个新的密钥对。这是一个四步走的过程:
1.  创建私钥
2.  创建签名请求
3.  添加 IP 地址并使其对*服务器授权*有效
4.  生成证书
开始吧。
从证书颁发机构(节点 2)运行这些命令。
1.  Create the private key for the daemon.
    ```
     $ openssl genrsa -out daemon-key.pem 4096
    ```
     `这在您的工作目录中创建了一个名为`daemon-key.pem`的新文件。这是守护程序节点的私钥。` 
`*   Create a certificate signing request (CSR) for the CA to create and sign a certificate for the daemon. Be sure to use the correct DNS name for your daemon node. The example uses `node3`.
    ```
     $ openssl req -subj "/CN=node3" \
       -sha256 -new -key daemon-key.pem -out daemon.csr 
    ```
     `现在，您的工作目录中有了第四个文件。这个是企业社会责任，叫做`daemon.csr`。` `*   Add required attributes to the certificate.
    这一步创建了一个文件，告诉证书颁发机构在对守护进程的证书进行签名时向证书添加几个扩展属性。这些将添加守护进程的域名和 IP 地址，并将证书配置为对*服务器认证*有效。
    用以下值创建一个名为`extfile.cnf`的新文件。该示例使用了实验中守护程序节点的域名和 IP，如图 5.6 所示。您环境中的价值观可能不同。
    ```
     subjectAltName = DNS:node3,IP:10.0.0.12
     extendedKeyUsage = serverAuth 
    ```
    `*   Generate the certificate.
    该步骤使用 CSR 文件、CA 密钥和`extfile.cnf`文件来签名和配置守护进程的证书。它将输出守护进程的公钥(证书)作为名为`daemon-cert.pem`的新文件
    ```
     $ openssl x509 -req -days 730 -sha256 \
       -in daemon.csr -CA ca.pem -CAkey ca-key.pem \
       -CAcreateserial -out daemon-cert.pem -extfile extfile.cnf 
    ```
    ``` 
 ```此时，您有了一个工作的证书颁发机构，以及一个用于`node3`的密钥对，该密钥对可用于保护 Docker 守护程序。
继续之前，删除企业社会责任和`extfile.cnf`。
```
$ rm daemon.csr extfile.cnf 
```
 `##### 为客户端创建密钥对
接下来的步骤将重复我们刚刚为`node3`所做的，但这次我们将为运行 Docker 客户端的`node1`做。
运行来自 CA ( `node2`)的所有命令。
1.  Create a private key for `node1`.
    这将在您的工作目录中生成一个名为`client-key.pem`的新文件。
    ```
     $ openssl genrsa -out client-key.pem 4096 
    ```
`*   Create a CSR. Be sure to use the correct DNS name of the node that will be your secure Docker client. The example uses `node1`.
    ```
     $ openssl req -subj '/CN=node1' -new -key client-key.pem -out client.csr 
    ```
     `这将在您当前的目录中创建一个名为`client.csr`的新文件。` `*   创建一个名为`extfile.cnf`的文件，并用以下值填充它。这将使证书对客户端认证有效。
    ```
     extendedKeyUsage = clientAuth 
    ```
    `*   使用企业社会责任、证书颁发机构的公钥和私钥以及`extfile.cnf`文件为`node1`创建证书。这将在您当前名为`client-cert.pem`的目录中创建客户端的签名公钥作为新文件。
    ```
     $ openssl x509 -req -days 730 -sha256 \
       -in client.csr -CA ca.pem -CAkey ca-key.pem \
       -CAcreateserial -out client-cert.pem -extfile extfile.cnf 
    ```
    ``` 
 ```删除企业社会责任和`extfile.cnf`文件，因为这些不再需要。
```
$ rm client.csr extfile.cnf 
```
 `此时，您的工作目录中应该有以下 7 个文件:
```
ca-key.pem          << CA private key
ca.pem              << CA public key (cert)
ca.srl              << Tracks serial numbers
client-cert.pem     << client public key (Cert)
client-key.pem      << client private key
daemon-cert.pem     << daemon public key (cert)
daemon-key.pem      << daemon private key 
```
 `在继续之前，您应该从私钥中删除写权限，并使它们仅对您和您组中的其他帐户可读。
```