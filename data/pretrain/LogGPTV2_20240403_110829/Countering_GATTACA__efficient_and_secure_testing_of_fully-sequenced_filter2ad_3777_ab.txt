garbled circuits [79], and showed that the overhead is acceptable
only for small strings (e.g., a 200-character strings require 2GB
circuits). For longer strings, two optimized techniques were pro-
posed; they exploit the structure of the dynamic programming prob-
lem (intrinsic to the speciﬁc circuit) and split the computation into
smaller component circuits. However, a quadratic number of obliv-
ious transfers is needed to evaluate garbled circuits, thus limiting
scalability of this approach. For example, 500-character string in-
stances take almost one hour to complete [42]. Optimized protocols
also extend to privacy-preserving Smith-Waterman scores [67], a
more sophisticated string comparison algorithm, where costs of
delete/insert/replace operations, instead of being equal, are deter-
mined by special functions. Again, scalability is limited: experi-
ments in [42] show that evaluation of Smith-Waterman for a 60-
character string takes about 1,000 seconds.
Somewhat less related techniques include [44] that proposed a
cryptographic framework for executing queries on genomic data-
bases where privacy is attained by relying on two anonymizing and
non-colluding parties. Danezis, et al. [14] used negative databases
to test a single proﬁle against a database of suspects, such that
database contents cannot be efﬁciently enumerated.
Specialized Protocols
Wang, et al. [75] proposed techniques for computation on ge-
nomic data stored at a data provider, including: edit distance, Smith-
Waterman and search for homologous genes. Program specializa-
tion is used to partition genomic data into “public” (most of the
genome) and “sensitive” (a very small subset of the genome). Sen-
sitive regions are replaced with symbols by data providers (DPs)
before data consumers (DCs) have access to genomic information.
DCs perform concrete execution on public data and symbolic exe-
cution on sensitive data, and may perform queries to DPs on sensi-
tive nucleotides. However, only queries that do not let DCs recon-
struct sensitive regions are allowed by DPs and generic two-party
computation techniques are used during query execution. Portions
of sensitive data are public information. We note that, due to the
current limited knowledge of human genome, parts that are consid-
ered non-sensitive today may actually become sensitive later.
Finally, Bruekers, et al. [6] presented privacy-preserving tech-
niques for a few DNA operations, such as: identity test, common
ancestor and paternity test, based on STR (Short Tandem Repeat;
see Sec. 3.1). Homomorphic encryption is used on alleles (frag-
ments of DNA) to compute comparisons. Testing protocols toler-
ate a small number of errors, however, their complexity increases
with the number of tolerated errors [4]. Also, [6] leaves as an open
problem the scenario where an attacker (honestly) runs the protocol
1
Edit distance is the minimum number of operations (delete, insert, or replace) needed
to transform α into β.
693but executes it on arbitrarily chosen inputs. In this setting, attack-
ers, given STR’s limited entropy, can “lie” about their STR proﬁles
and run multiple dependent protocols thus reconstructing the other
party’s proﬁle.
Using Current Techniques?
We aim to obtain secure and private computation on fully se-
quenced genomes, in scenarios where individuals possess their own
genomic data. As discussed in Sec. 1, we focus on paternity test-
ing, personalized medicine and genetic compatibility testing. Prior
work has yielded a number of elegant (if not always efﬁcient) cryp-
tographic protocols for secure computation on DNA sequences.
However, we identify some notable open problems:
1. Efﬁciency: Most current protocols are designed for DNA
snippets (e.g., hundreds of thousands nucleotides) and it is
unclear how to scale them to full genomes (i.e., three billion
nucleotides).
2. Error Resilience: Most prior work attempts to achieve re-
silience to sequencing errors in computation (e.g., using ap-
proximate matching or distance with errors). Not surpris-
ingly, this results in: (i) signiﬁcant computation and commu-
nication overhead, and (ii) ruling out more efﬁcient and sim-
pler cryptographic tools, i.e., those geared for exact match-
ing. (Whereas, our goal is error-resilience by design.) Also,
as the cost of full genome sequencing drops, so do error rates.
By increasing the number of sequencing runs, the probability
of sequencing errors can be rapidly reduced.
3. Inter-String Distance: Analyzing the distance between se-
quenced strings works for the creation of phylogenetic trees,
parental analysis, and homology studies. However, it does
not suit applications, such as genetic diseases testing, that
require much more complex comparisons.
4. Paternity Testing: To the best of our knowledge, the only
available technique for privacy-preserving genetic paternity
testing is [6]. However, it does not prevent a participant from
manipulating its input to reconstruct the counterpart’s proﬁle.
Also, as shown in Sec. 4.1, overhead can be signiﬁcantly re-
duced using techniques that obtain error resilience by design.
5. Genetic Testing via Pattern Matching: The use of pattern
matching over full genomes to test for genetic compatibility
and/or personalized medicine is not straightforward. Sup-
pose that a party wants to privately search for certain gene
mutation, e.g., Beta-Thalassemia. The pattern representing
this mutation might be very short — a few nucleotides —
but needs to be searched in the full genome, as restricting the
search to the speciﬁc gene would trivially expose the nature
of the test. Therefore, naïve application of pattern matching
would return all locations (presumably millions) where the
pattern appears. This would be detrimental to both privacy
and efﬁciency of the resulting solution. We could modify
the pattern to include nucleotides expected to appear imme-
diately before/after the mutation, such that, with high proba-
bility, this pattern would appear at most once. However, this
needs to be done carefully, since: (i) nucleotides added to
the pattern must appear in all human genomes, and (ii) the
choice of pattern length should not expose the mutation be-
ing searched. Plus, extending the pattern would also increase
computation and communication overhead.
3. PRELIMINARIES
3.1 Biology Background
Genomes represent the entirety of an organism’s hereditary infor-
mation. They are encoded either in DNA or, for many types of
viruses, in RNA. The genome includes both the genes and the non-
coding sequences of the DNA/RNA. For humans and many other
organisms, the genome is encoded in double stranded deoxyribonu-
cleic acid (DNA) molecules, consisting of two long and comple-
mentary polymer chains of four simple units called nucleotides,
represented by the letters A, C, G, and T. The human genome con-
sists of approximately 3 billion letters.
Restriction Fragment Length Polymorphisms (RFLPs) refers to
a difference between samples of homologous DNA molecules that
come from differing locations of restriction enzyme sites, and to
a related laboratory technique by which these segments can be il-
lustrated. In RFLP analysis, a DNA sample is broken into pieces
(digested) by restriction enzymes and the resulting restriction frag-
ments are separated according to their lengths by gel electrophore-
sis. Thus, RFLP provides information about the length (but not
the composition) of DNA subsequences occurring between known
subsequences recognized by particular enzymes. Although it is
being progressively superseded by inexpensive DNA sequencing
technologies, RFLP analysis was the ﬁrst DNA proﬁling technique
inexpensive enough for widespread application. It is still widely
used at present. RFLP probes are frequently used in genome map-
ping and in variation analysis, such genotyping, forensics, pater-
nity tests and hereditary disease diagnostics.
(For more details,
see [61].)
Single Nucleotide Polymorphisms (SNPs) are the most common
form of DNA variation occurring when a single nucleotide (A, C,
G, or T) differs between members of the same species or paired
chromosomes of an individual [68]. The average SNP frequency in
the human genome is approximately 1 per 1,000 nucleotide pairs.2
SNP variations are often associated with how individuals develop
diseases and respond to pathogens, chemicals, drugs, vaccines, and
other agents. Thus SNPs are key enablers in realizing personalized
medicine [9]. Moreover, they are used in genetic disease and disor-
der testing, as well as to compare genome regions between cohorts
in genome-wide association studies.
Short Tandem Repeats (STRs) occur when a pattern of two or
more nucleotides are repeated and repeated sequences are directly
adjacent to each other. The pattern can range in length from 2 to
50 nucleotides or so. Unrelated people likely have different num-
bers of repeat units in highly polymorphic regions, hence, STRs
are often used to differentiate between individuals. STR loci (i.e.,
locations on a chromosome) are targeted with sequence-speciﬁc
primers. Resulting DNA fragments are then separated and detected
using electrophoresis. By identifying repeats of a speciﬁc sequence
at speciﬁc locations in the genome, it is possible to create a genetic
proﬁle of an individual. There are currently over 10,000 published
STR sequences in the human genome.
3.2 Cryptography Background
We now overview a set of cryptographic concepts and tools used
in the rest of the paper. For ease of exposition, we omit basic no-
tions and refer to [31, 46, 57] for details on various cryptographic
primitives, such as hash functions, number-theoretic assumptions,
as well as encryption and signature schemes.
Private Set Intersection (PSI) [25]: a protocol between Server
This section provides some relevant biology and cryptography
2
background information.
NCBI maintains an interactive collection of SNPs, dbSNP, containing all known ge-
netic variations of the human genome [59].
694with input S ={s1, . . . , sw}, and Client with input C ={c1, . . . , cv}.
At the end, Client learns S ∩ C. PSI securely implements: FPSI :
(S,C) 7→ (⊥,S ∩ C).
Private Set Intersection Cardinality (PSI-CA) [25]: a protocol
between Server with input S = {s1, . . . , sw}, and Client with in-
put C = {c1, . . . , cv}. At the end, Client learns |S ∩ C|. PSI-CA
securely implements: FPSI-CA : (S,C) 7→ (⊥,|S ∩ C|).
Authorized Private Set Intersection (APSI) [16]: a protocol be-
tween Server with input S = {s1, . . . , sw}, and Client with input
C ={c1, . . . , cv} and Cσ ={σ1, . . . , σv}. At the end, Client learns:
def= S ∩ {ci | ci ∈ C ∧ σi valid auth. on ci}. APSI securely
implements: FAPSI : (S, (C,Cσ)) 7→ (⊥, ASI).
Adversarial Model. We use standard security models for secure
two-party computation. One distinguishing factor is the adversarial
model that is either semi-honest or malicious. (In the rest of this
paper, the term adversary refers to insiders, i.e., protocol partici-
pants. Outside adversaries are not considered, since their actions
can be mitigated via standard network security techniques.)
ASI
Following deﬁnitions in [31], protocols secure in the presence
of semi-honest adversaries assume that parties faithfully follow all
protocol speciﬁcations and do not misrepresent any information re-
lated to their inputs, e.g., size and content. However, during or after
protocol execution, any party might (passively) attempt to infer ad-
ditional information about the other party’s input. This model is
formalized by considering an ideal implementation where a trusted
third party (TTP) receives the inputs of both parties and outputs the
result of the deﬁned function. Security in the presence of semi-
honest adversaries requires that, in the real implementation of the
protocol (without a TTP), each party does not learn more informa-
tion than in the ideal implementation.
Security in the presence of malicious parties allows arbitrary de-
viations from the protocol. However, it does not prevent parties
from refusing to participate in the protocol, modifying their inputs,
or prematurely aborting the protocol. Security in the malicious
model is achieved if the adversary (interacting in the real proto-
col, without the TTP) can learn no more information than it could
in the ideal scenario. In other words, a secure protocol emulates
(in its real execution) the ideal execution that includes a TTP. This
notion is formulated by requiring the existence of adversaries in the
ideal execution model that can simulate adversarial behavior in the
real execution model.
Although security arguments in this paper are made with respect
to semi-honest participants, extensions to malicious participant se-
curity (with the same computation and communication complexi-
ties) have already been developed for our cryptographic building
blocks: PSI, PSI-CA and APSI. We consider these extensions to be
out of the scope of this paper.
4. GENOME TESTING
We now explore efﬁcient techniques for privacy-preserving test-
ing on fully sequenced genomes. Unlike most prior work (reviewed
in Sec. 2), we do not seek generic solutions for genomic computa-
tion. Instead, we focus on a few speciﬁc real-world applications
and, for each, capitalize on domain knowledge to propose an efﬁ-
cient privacy-preserving approach.
Notation. We assume that each participant has a digital copy of her
fully sequenced genome denoted by G = {(b1||1), . . . , (bn||n)},
where bi ∈ {A, G, C, T, –}, n is the human genome length (i.e.,
3 · 109), and “||” denotes concatenation. The “–” symbol is needed
to handle DNA mutations corresponding to deletion, i.e., where a
portion of a chromosome is missing [53]. It is also used when the
sequencing process fails to determine a nucleotide. This data may
be pre-processed in order to speed up execution of speciﬁc applica-
tions. For example, parties may pre-compute a cryptographic hash,
H(·), on each nucleotide, alongside its position in the genome, i.e.,
for each (bi||i) ∈ G, they compute hbi = H(bi||i).3
We use the notation |str| to denote the length of string str, and
|A| to denote the cardinality of set A. Finally, we use r ← R to
indicate that r is chosen uniformly at random from set R.
Experimental Setup. The rest of this section includes some exper-
imental results. Unless explicitly stated otherwise, all experiments
were performed on a Linux Desktop, with an Intel Core i5-560M
(running at 2.66 GHz). All tests were run on a single processor
core and all code is written in C, using OpenSSL and GMP li-
braries. Cryptographic protocols use the SHA-1 hash function and
1024-bit moduli. Source code of our experiments is available at
http://sprout.ics.uci.edu/projects/privacy-dna.
4.1 Genetic Paternity Test
A Genetic Paternity Test (GPT) allows two individuals with their
respective genomes to determine whether there exists a biological
parent-child relationship between them. A Privacy-Preserving Ge-
netic Paternity Test (PPGPT) achieves the same result without re-
vealing any information about the two genomes. In the following,
we refer to the two participants as Client and Server. Only Client
receives the outcome of the test.
Strawman Approach
Genomics studies have shown that about 99.5% of any two hu-
man genomes are identical. Humans carry two copies of each chro-
mosome, inherited one from the mother and one from the father.
Thus, genomes carried by two individuals tied by a parent-child re-
lationship show an even higher degree of similarity. As a result,
one immediate computational technique for GPT is to compare the
candidate’s genome with that of the child; the test returns a positive
result if the percentage of matching nucleotides is above a given
threshold τ , i.e., signiﬁcantly higher than 99.5%.
First-Attempt Protocol. At ﬁrst glance, protecting privacy is rela-
tively easy: recent proposals for Private Set Intersection Cardinality
(PSI-CA) protocols [17, 25, 48, 72] offer efﬁcient and private two-
party computation of the number of set elements shared by two
parties. Thus, to perform PPGPT, two participants just need to run
PSI-CA on input of their respective genomes.
We select the PSI-CA construction from [17] (shown in Fig. 1)
since it offers the best communication and computation complexi-
ties. Also, we use PSI-CA rather than PSI since semi-honest partic-
ipants only need to learn how similar their genomes are. Whereas,
PSI would also reveal where the two genomes differ and/or where
they have common features.
We emphasize that this approach provides very accurate results,
and is not signiﬁcantly affected by potential sequencing errors. In
fact, given expected error ratio ε, one can simply modify threshold
τ to accommodate errors. This is because ε is expected to be sig-
niﬁcantly smaller than the difference between τ and the percentage
of nucleotides that any two individuals share.
Unfortunately, since the number of nucleotides in the human ge-
nome is extremely large (about 3 · 109), this technique, though op-
timal in terms of accuracy, is impractical using current commodity
3
In case of insertion mutation in the genome, e.g., an ‘A’ is added between positions
35 and 36, genome pre-processing computes H(A||35||1). Similarly, if insertion
involves multiple nucleotides. Since insertions are rare in human genomes, we do
not consider them in this paper.
695Client, on input C = {c1, . . . , cv}
[Common Input: (p, q, g, H, H′)]
Server, on input S = {s1, . . . , sw}
Ofﬂine
{ˆs1, . . . , ˆsw} ← Π(S), with Π
random permutation
s ← Zq , Y = gRs
Rs ← Zq, R′
∀j 1 ≤ j ≤ w, ksj = H(ˆsj)R′
s
Ofﬂine
Rc ← Zq, R′
∀i 1 ≤ i ≤ v, ai = H(ci)R′
c ← Zq, X = gRc
c
Online
)1/R′
∀i 1 ≤ i ≤ v, tcℓi = H′((Y Rc )(a′
Out: (cid:12)(cid:12){ts1, . . . , tsw} ∩ {tcℓ1 , . . . , tcℓv}(cid:12)(cid:12)
ℓi