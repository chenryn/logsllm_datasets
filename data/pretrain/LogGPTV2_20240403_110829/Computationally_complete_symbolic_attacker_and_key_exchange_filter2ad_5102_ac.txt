for constraint-solving methods as in [16].
Let Q be a set of control states (not necessarily ﬁnite). A proto-
col is a recursive set of tuples
((q, n), (q
(cid:48)
, n, n(cid:48)),(cid:104)x1, ..., xm(cid:105) , x, ψ, s)
where q, q(cid:48) ∈ Q, x1, ..., xm, x are variables (into which agents read
messages from the adversary), n, n(cid:48) are disjoint ﬁnite sequences of
names (corresponding to honestly generated items such as keys,
nonces). ψ is some formula corresponding to agent checks on
incoming messages. For example, ψ can be a formula such as
1234dec(x, k) = n, checking whether the input decrypts to a previ-
ously generated nonce n. ψ is over the variables {x1, ..., xm, x},
the names n, the function symbols F without the rest of the names
and handles, and some subset of the predicate symbols P. Finally,
s is the output message, when the transition succeeds. s is built
from the variables {x1, ..., xm, x}, the names n, n(cid:48), and the func-
tion symbols F without the rest of the names and handles.
4.2 Execution of a Protocol and Attacks
In applied π-calculus, frames are sequences of terms with name
binders: a frame φ can be written νn.(cid:104)p1 (cid:55)→ t1, ..., pn (cid:55)→ tn(cid:105)
where p1, ...pn are place holders that do not occur in t1, ..., tn and
n is a sequence of names, but we think of a frame simply as a list
of terms (cid:104)t1, ..., tn(cid:105) representing the messages that agents have sent
over the network, that is, messages that the adversary has seen. The
names, variables of φ are the names, variables of t1, ..., tn.
(randomly) generated so far, n1, ..., nk
A symbolic state of the network consists of:
• a control state q ∈ Q together with a sequence of names
• a sequence of constants called handles h1, ..., hn (recording
• a ground frame φ (the agents outputs)
• a set of closed formulas Θ (all conditions that must be satis-
the attacker’s inputs)
ﬁed in order to reach the state).
A symbolic transition sequence of a protocol Π is a sequence
((q0, n0),∅, φ0,∅) → ... → ((qm, nm),(cid:104)h1, ..., hm(cid:105) , φm, Θm)
if, for every m − 1 ≥ i ≥ 0, there is a transition rule
((qi, αi), (qi+1, αi+1),(cid:104)x1, ..., xi(cid:105) , x, ψ, s)
such that n = αi+1 \ αi, φi+1 = (φi, sσi+1), ni+1 = (ni, n),
Θi+1 = Θi ∪ {φi  hi+1, ψσi+1} where σi+1 = {x1 (cid:55)→ h1, ...,
xi (cid:55)→ hi, x (cid:55)→ hi+1}. If necessary, some renaming of the sequence
αi+1 ensures the freshness of the names n: n ∩ ni = ∅.
Given an interpretation M, a transition sequence of Π
((q0, n0),∅, φ0,∅) → ... → ((qm, nm),(cid:104)h1, ..., hm(cid:105) , φm, Θm)
is valid w.r.t. M if, for every m − 1 ≥ i ≥ 0, M |= Θi+1.
Examples of symbolic executions can be found in [7] and [5].
4.3 Symbolic Satisfaction of Formulas
M modeled, among others, the predicate t1, ..., tn  t. In execu-
tions we also consider a predicate that we write as ˆφ, t1, ..., tn  t.
This is also an n + 1-arity predicate. ˆφ is just a symbol, not an
argument, and it represents the frame containing the messages that
protocol agents sent out, that is, the information available from the
protocol to the adversary. We also use a number of different con-
straints: Handle(h) means h is a handle, RanGen(x) means that x
was honestly, randomly generated (i.e. appears in the n of the con-
trol state); x (cid:118) ˆφ means that x is a subterm of a message sent out by
an agent (i.e. listed in the frame φ), x (cid:118) (cid:126)x means x is subterm of (cid:126)x.
dK (cid:118)d ˆφ means dK occurs somewhere other than in a decryption
position dec( , dK) in φ, and dK (cid:118)d (cid:126)x is analogous (dK may also
occur in a decryption position in (cid:126)x, but it has to occur elsewhere
too)2. Similarly, let K (cid:118)ed ˆφ mean that symmetric key K occurs
somewhere other than in an encryption or decryption position (as
{|_|}K or sdec( , K)) in φ, and K (cid:118)ed (cid:126)x is analogous (K may also
2In this paper, we will use the notation {x}R
eK and dec(y, dK) for
both symmetric and asymmetric encryptions with random input R,
where in the symmetric case, eK = dK = K. We use {|x|}R
K and
sdec(y, K) for symmetric encryption and decryption only.
occur in encryption or decryption position in (cid:126)x, but it has to occur
elsewhere too). Let us introduce the following abbreviations:
• x (cid:118) ˆφ, (cid:126)x ≡ x (cid:118) ˆφ ∨ x (cid:118) (cid:126)x
• fresh(x; ˆφ, (cid:126)x) ≡ RanGen(x) ∧ x (cid:54)(cid:118) ˆφ, (cid:126)x
• keyfresh(K; ˆφ, (cid:126)x) for asymmetric key:
• keyfresh(K; ˆφ, (cid:126)x) for symmetric key:
keyfresh(K; ˆφ, (cid:126)x) ≡ RanGen(K) ∧ dK (cid:54)(cid:118)d ˆφ, (cid:126)x
keyfresh(K; ˆφ, (cid:126)x) ≡ RanGen(K) ∧ K (cid:54)(cid:118)ed ˆφ, (cid:126)x
• x (cid:52) ˆφ, (cid:126)x ≡ ∀h(h (cid:118) x ∧ Handle(h) → ˆφ, (cid:126)x  h)
(cid:126)x (cid:52) ˆφ, (cid:126)y ≡ (cid:87)
(cid:52) ˆφ, (cid:126)y ∧ xp2
(cid:52) ˆφ, (cid:126)y, xp1 ∧ ...
p(xp1
∧ xpn
(cid:52) ˆφ, (cid:126)y, xp1 , ..., xpn−1 )
Where p runs through all permutations of 1, ..., n. Further, for sym-
metric encryption we also require for x (cid:52) ˆφ, (cid:126)x that if any R is a
random input of an encryption in ˆφ, (cid:126)x, x then the only way it can
appear in x is within that same encryption.
If M is a ﬁrst-order model, satisfaction of predicates and con-
straints in a symbolic execution (denoted by |s= ) is deﬁned recur-
sively: Let n = (n1, ..., nk) be a list of names and φ = (cid:104)t1, ..., tm(cid:105)
a list of closed terms. Let σ be a substitution of free variables of
the rhs of |s= with elements in the domain of M.
• Satisfactions of predicates by M, σ, n, φ (depends on M):
– M, σ, n, φ|s= t = t(cid:48) if M, σ |= t = t(cid:48)
– M, σ, n, φ|s= ˆφ, s1, ..., sn Ot
if M, σ |= t1, ..., tm, s1, ..., sn Ot.
– M, σ, n, φ|s= ˆφ, s1, ..., sn (cid:73)Ot
if M, σ |= t1, ..., tm, s1, ..., sn (cid:73)Ot.
• Satisfactions of constraints by M, σ, n, φ are independent of
M and σ so we deﬁne them as satisfaction by n, φ:
– Handle(h) for h closed term:
n, φ|s= Handle(h) if h∈H.
– RanGen(s) for s closed term:
n, φ|s= RanGen(s) if s ∈ N
and M, σ |= s = n1 ∨ ... ∨ s = nk.
– t (cid:118) ˆφ, where t is closed term:
n, φ|s= t (cid:118) ˆφ if t is a subterm of some ti
– t (cid:118) s1, ..., sn, where s1, ..., sn, t are closed terms:
n, φ|s= t(cid:118) s1, ..., sn if t is a subterm of some si
• Satisfaction of any FOL formula by M, σ, n, φ:
– θ1∧θ2, θ1∨θ2, and ¬θ are interpreted as usual in FOL.
– If x is not under a constraint in θ, interpretations of ∀xθ
– If x occurs under a constraint in θ, then
and ∃xθ are deﬁned as usual in FOL.
∗ M, σ, n, φ|s= ∀xθ iff for every ground term t,
M, σ, n, φ|s= θ{x (cid:55)→ t}
∗ M, σ, n, φ|s= ∃xθ iff there is a ground term t,
M, σ, n, φ|s= θ{x (cid:55)→ t}
• Satisfaction at step m:
M, σ, ((q, n),(cid:104)h1, ..., hm(cid:105) , φm, Θ)|s= θ
iff M, σ, n, φm |s= θ.
We say there is a successful symbolic attack against the security
property θ (a ﬁrst-order formula) of the protocol if there is a model
M and state of an execution ((q, n),(cid:104)h1, ..., hm(cid:105) , φm, Θ) such
that M, ((q, n),(cid:104)h1, ..., hm(cid:105) , φm, Θ)|s= ¬θ holds, and moreover,
M, ((q, n),(cid:104)h1, ..., hm(cid:105) , φm, Θ) also satisﬁes the computation-
ally sound axioms that we introduce in the rest of the paper. This
1235is the same as saying that there is a successful symbolic attack if at
a certain point of some symbolic execution, the axioms, the agent
checks and the negation of the security property are all consistent.
5. COMPUTATIONAL EXECUTION
We now summarize the computational semantics. Short proofs
of Theorems 5.2 and 5.3 are in the Section 6 using Fitting’s embed-
ding of classical logic into S4 [23].
5.1 Computational Execution
Following Bana and Comon, we consider a family of computa-
tional algebras, parametrized by a security parameter η, in which
each function symbol is interpreted as a polynomially computable
function on bit strings (that may return an error message). Given
a sample τ of names, every ground term t can be interpreted as
a bit string [[t]]τ in such a way that [[_]]τ is a homomorphism of
F-algebras (a name n is interpreted as a bit string τ (n)). More
generally, if σ is an assignment of the variables of t to bit strings,
[[t]]σ
τ is the (unique) extension of τ (on names) and σ (on variables)
as a homomorphism of F-algebras.
Given a set of transition rules, a computational state consists of
• a symbolic state s (that is itself a tuple ((q, n), h, φ, Θ))
• a sequence of bit strings (cid:104)b1, ..., bm(cid:105) (attacker outputs)
• a sequence (cid:104)b(cid:48)
m(cid:105) of bit strings (agents’ outputs)
• the conﬁguration γ of the attacker.
1, ..., b(cid:48)
Given a PPT interactive Turing machine Mc and a sample τ, a
sequence of transitions
0, γ0) → ... → (sm,(cid:104)b1, ..., bm(cid:105) ,(cid:10)b
(cid:48)
1, ..., b
is (computationally) valid with respect to Mc and τ if
(cid:11) , γm)
(s0,∅, (cid:126)b(cid:48)
(cid:48)
m
i+1
M γ(cid:48)
• s0 → ··· → sm is a transition sequence of the protocol
• for all i = 0, ..., m − 1, si = ((qi, ni), hi, φi, Θi), φi+1 =
• for every i = 0, ..., m − 1, there is a conﬁguration γ(cid:48)
M γi+1 and γ(cid:48)
(φi, ui), [[ui]]τ = b(cid:48)
i of the
machine Mc such that γi (cid:96)∗
i is in a
sending state, the sending tape containing bi+1, γi+1 is in a
receiving state, the receiving tape containing b(cid:48)
• for all i = 0, ..., m−1, the bit strings τ, {h1 (cid:55)→ b1, ..., hi+1 (cid:55)→
bi+1} satisfy all agent checks listed in Θi+1.
M means what the machine (in whatever model it is deﬁned)
Here (cid:96)∗
can compute via a sequence of computational steps.
5.2 Computational satisfaction of formulas
i (cid:96)∗
i+1
We recall the computational interpretation of the original predi-
cates, = and  here and the semantics of compound formulas. The
difference between our presentation here and that of [6] is that we
do not assume any computability condition on non-negligible sets
any more, as we apply a trick in the soundness proof that makes it
unnecessary. Interpretations of the new predicates are presented in
later sections.
Let (Ω0, Σ0, p0) be the probability space of inﬁnite fair coin
tosses, Ω0 the the set of inﬁnite bit strings, Σ0 the measurable sets
generated by ﬁxing ﬁnitely many outcomes, and p0 the probability
measure assigning the probabilities to the sets of Σ0. For a ﬁnite bit
string b ∈ {0, 1}∗ of length n, let ¯b ⊂ Ω0 denote the set of inﬁnite
bit strings for which the initial n bits are exactly b. Let Σf be the
set generated by ﬁnite unions intersections, and subtractions of sets
of the form ¯b (including Ω). Σ0 is the σ-closure of Σf .
Let Mc be an interactive PPT Turing machine with a special
challenge control state qch. We may regard this machine as an at-
tacker, who moves to the state qch when he thinks that he is ready to
break the security property. As usual, the machine takes the secu-
rity parameter 1η as an initial input. Mc interacts with the protocol
agents, which are also assumed to be interactive PPT Turing ma-
chines, and they respond to the calls of the adversary. Since once η
is ﬁxed, such an execution is probabilistic, and for each security pa-
rameter η, we denote underlying probability space by (Ωη, Ση, pη),
which is just a copy of the (Ω0, Σ0, p0) above. We denote the el-
ements of Ωη by ωη. (Actually, the adversary’s random string and
the agent random strings are separate, but as there are ﬁnitely many
of them, they can be thought to be on a single string) Each ωη is
one particular random string. Let Ω = (Ωη)η∈N. Let τ (ωη) be the
assignment of all ﬁxed bit string evaluations τ (n) of names given
for ωη. For a given n name, we just use simply n(ωη) for the bit
string τ (ωη)(n).
By a non-negligible set of coins S, we mean S = (Sη)η∈N,
where for all η ∈ N, Sη ∈ Ση
f , and pη(Sη) is non-negligible func-
tion of η. For S1 = (Sη
2 )η∈N non-negligible
sets of coins, we use the notation S1 ⊆ S2 if for all η ∈ N, Sη
1 ⊆
Sη
2 . In what follows, S is any such non-negligible set of coins. The
domain of interpretation D(S) = D is the same for all S: PPT
algorithms that take as input η, read from the random tape ωη, and
output a bit string. (As ωη is inﬁnite coin tosses, the algorithms of
course do not read it all, they terminate in polynomial time.)