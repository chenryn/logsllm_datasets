In-memory
CBC+SHA1
8.1 Gbps
18.45
140W
NBA [22]
w/ dGPU
Intel Xeon
E5-2670 +
NVIDIA GeForce
Helion ESP
w/ FPGA
Xilinx Artix-7
GTX 680
Standalone
$4,404.00
IPsec
CTR+SHA1
32 Gbps
7.27
620W
Accelerator
$34.37
IPsec
CBC+SHA1
1.16 Gbps
33.75
-
1. We estimate the cost of a standalone system by the sum of the prices of CPUs, main memory and additional devices such as dGPUs. We assume that the
price of the main memory is $50 (two 4GB DIMMs, $25 each).
2. We estimate the cost and the power consumption of an accelerator system by the price and the power consumption of the chip itself. Thus, its cost and power
consumption may be underestimated.
3. We assume that PIPSEA w/ dGPU exploits the low-end Intel Xeon CPUs, because it only uses the dGPUs for the IPsec processing.
4. PIPSEA, Multicore CPU, NBA [22] w/ dGPU and Helion ESP Engine have programmability. The others exploit dedicated hardware for packet encryp-
tion/decryption and does not have programmability. The performance of Intel Atom w/ QAT (Intel QuickAssist Technology), Multicore CPU w/ AES-NI
and Multicore CPU are measured by ourselves.
5. The performance numbers of Intel QAT chipset and Helion ESP Engine are obtained from the documents [16, 13].
6. The performance of NBA w/ dGPU is obtained from the its paper [22].
7. There is no information available about the power consumption of Helion ESP Engine.
Table 2: Cost-eﬀectiveness comparison of existing IPsec solutions and PIPSEA.
GPU. The result indicates that the packet scheduling algo-
rithm performs well not only for the APU, but also for the
dGPUs.
4.5 Cost-effectiveness
Table 2 is the cost-eﬀectiveness comparison of existing
IPsec solutions and PIPSEA. Existing solutions are catego-
rized in standalone and accelerator systems. An accelerator
system needs an additional CPU, memory, etc. to operate it
properly. In this table, the additional cost for the accelerator
system is not included.
The cost eﬀectiveness (Mbps/$) of PIPSEA is 110.90.
That is much higher than any other existing solutions ex-
cept the Intel QAT Chipset (DH8950 PCH) whose cost ef-
fectiveness is 160.45. However, it is an accelerator system
and requires additional cost to operate the chipset properly.
Moreover, Intel QAT chipset is inﬂexible, unlike PIPSEA.
The cost eﬀectiveness of PIPSEA is about 15 times higher
than NBA [22]. Because PIPSEA achieves good perfor-
mance using a single embedded APU of four CPU cores and
eight GPU cores that worths about US$50.
The energy eﬃciency of PIPSEA is also higher than other
solutions. The power consumption of the embedded APU
is only 35W. Although the power consumption of the Intel
QAT accelerator (20W) is lower than the APU, an additional
CPU is required to make the QAT accelerator run.
5. RELATED WORK
In this section, we classify the related work in two cat-
egories: hardware-accelerated IPsec and dGPU-based net-
work security.
5.1 Hardware-accelerated IPsec
Many studies have been done to accelerate IPsec using spe-
cial purpose hardware. Ha et al. [11] propose an ASIC design
of IPsec hardware accelerator. Its estimated throughput is
200 Mbps. Hodjat et al. [15] propose a specialized cryp-
tographic coprocessor to accelerate AES processing. The
throughput of the AES coprocessor is 3.43 Gbps. Dandalis
et al. [7], Chodowiec et al. [6], and Kakarountas et al. [19]
implement IPsec solutions with FPGAs. The FPGA im-
plementation of SHA-1 from Kakarountas et al. achieves a
throughput up to 4.2 Gbps. Thoguluva et al. [28] implement
IPsec on a mobile application processor SoC that contains
a programmable security processor. The IPsec implementa-
tion oﬄoads cryptographic algorithms to the security pro-
cessor. Its performance is up to 8 Mbps. Meng et al. [25]
propose a high-performance network processor solution for
IPsec using Cavium OCTEON CN58XX. Their implemen-
tation achieves 20 Gbps with packets of 1024B.
5.2 Discrete GPU-based Network Security
Cryptographic network applications. A few studies
including GASPP [30], PacketShader [12], NBA [22], and
SSLShader [18] have been done to accelerate cryptographic
network applications on dGPUs. GASPP [30], NBA [22],
and PacketShader [12] are dGPU-based network packet pro-
cessing frameworks. SSLShader is an SSL (Secure Socket
Layer) acceleration solution that exploits dGPUs. NBA
and PacketShader implement an IPsec protocol to show
their packet processing performance on a dGPU. NBA im-
plements AES-CTR and HMAC-SHA1, and PacketShader
implements AES-CBC and HMAC-SHA1. GASPP [30] im-
plements just a simple AES-CBC encryption application to
encrypt all incoming packets.
Among others, GASPP introduces a packet scheduling op-
timization to reduce control-ﬂow divergence and load imbal-
ance between GPU threads. It relies on sorting packets in
the GPU side, the overhead of which is not negligible. In
addition, control-ﬂow divergence due to diﬀerent workloads
may not be completely removed in GASPP. On the other
hand, our IPsec packet scheduling algorithm completely re-
moves control-ﬂow divergence due to diﬀerent workloads and
provides a near optimal load balancing algorithm between
GPU cores in addition to between GPU threads. Note
that load balancing between GPU cores is not considered
in GASPP. Moreover, packet scheduling occurs on the CPU
1265side in parallel with the kernel execution on the GPU side.
Thus, our packet scheduling overhead is fully hidden.
Other applications. Besides cryptographic network appli-
cations, dGPUs have been used to accelerate other network-
security-related applications. Gnort [29], MIDeA [31], and
Kargus [17] use dGPUs to provide high-performance net-
work intrusion detection.
Overall diﬀerences. To the best of our knowledge, PIPSEA
is the ﬁrst IPsec solution using an embedded APU. Most of
the previous GPU-based approaches are designed for mul-
tiple high-end multicore CPUs and multiple high-end dG-
PUs. They exploit many CPU cores to maximize the per-
formance of packet processing. It is hard to directly adapt
these approaches to an embedded APU because it has a
very restricted number of CPU cores (2–4 cores). More-
over, all previous GPU-based approaches are implemented
in CUDA [27]. Consequently, they work only for NVIDIA
GPUs. Although the performance of previous solutions is
higher than that of our solution, the cost eﬀectiveness of
PIPSEA is much better than theirs.
Most of previous GPU-based IPsec approaches do not seri-
ously consider real-world network traﬃc, where each incom-
ing packet potentially has a diﬀerent length and requires a
diﬀerent crypto algorithm. If we consider such network traf-
ﬁc, control-ﬂow divergence and load imbalance in the GPU
become more severe and adversely aﬀects performance. Our
packet scheduling algorithm handles such network traﬃc and
avoids the control-ﬂow divergence and load imbalance.
6. CONCLUSIONS
In this paper, we present the design and implementation
of a high-performance IPsec gateway, PIPSEA, using a low-
cost commodity embedded APU. PIPSEA is implemented
using DPDK and OpenCL. IPsec protocols are implemented
in OpenCL to oﬄoad IPsec processing on the on-chip GPU.
We propose a packet scheduling algorithm that fully exploits
a common GPU architecture and improves GPU utilization
signiﬁcantly. It avoids control-ﬂow divergence and load im-
balance caused by diﬀerent workload between packets. We
evaluate PIPSEA with diﬀerent tuning parameters and a
variety of input traﬃcs.
With three CPU cores and one GPU in the APU, the
IPsec gateway achieves a throughput of 10.36 Gbps with an
average latency of 2.79 ms to perform AES-CBC+HMAC-
SHA1 for incoming packets of 1024 bytes. With an average
latency of 3.71 ms, PIPSEA achieves a throughput of 10.66
Gbps for packets of random lengths. For a random mix of six
crypto algorithms, it achieves a throughput of 17.42 Gbps
with an average latency of 3.92 ms for packets of 1280 bytes.
The cost eﬀectiveness of our gateway is much higher than
any other existing IPsec solutions that have full programma-
bility. The HSA supported by the APU eliminates the data
copy overhead between the CPU cores and the on-chip GPU.
As a result, HSA enables such a cheap embedded APU to
achieve high performance.
Since PIPSEA spends at most three CPU cores and one
on-chip GPU on IPsec processing, adding more CPU cores to
implement diﬀerent pipeline stages, such as packet routing
and intrusion detection, enables PIPSEA to become a part
of a more powerful network system.
Acknowledgments
This work was supported by the National Research Founda-
tion of Korea (NRF) grant funded by the Korea government
(MSIP) (No. 2013R1A3A2003664). ICT at Seoul National
University provided research facilities for this study.
7. REFERENCES
[1] APUs-Accerlated Processing Units. Website.
http://www.amd.com/en-us/innovations/
software-technologies/apu/.
[2] DPDK: Data Plane Development Kit. Website.
http://www.dpdk.org.
[3] Heterogeneous System Architecture. Website.
http://www.hsafoundation.com.
[4] AMD. OpenCL Optimization Guide. Website. http:
//developer.amd.com/tools-and-sdks/opencl-zone/
amd-accelerated-parallel-processing-app-sdk/
opencl-optimization-guide/.
[5] S. Bradner and J. McQuaid. Benchmarking
Methodology for Network Interconnect Devices. RFC
2544 (Informational), Mar. 1999. Updated by RFCs
6201, 6815.
[6] P. Chodowiec, K. Gaj, P. Bellows, and B. Schott.
Experimental Testing of the Gigabit IPSec-Compliant
Implementations of Rijndael and Triple DES Using
SLAAC-1V FPGA Accelerator Board. In Proceedings
of the 4th International Conference on Information
Security, ISC ’01, pages 220–234, 2001.
[7] A. Dandalis and V. K. Prasanna. An Adaptive
Cryptographic Engine for Internet Protocol Security
Architectures. volume 9, pages 333–353, July 2004.
[8] T. T. Dao, J. Kim, S. Seo, B. Egger, and J. Lee. A
Performance Model for GPUs with Caches. Parallel
and Distributed Systems, IEEE Transactions on,
26(7):1800–1813, July 2015.
[9] M. R. Garey and D. S. Johnson. Computers and
Intractability; A Guide to the Theory of
NP-Completeness. W. H. Freeman & Co., New York,
NY, USA, 1990.
[10] R. L. Graham. Bounds on Multiprocessing Timing
Anomalies. SIAM journal on Applied Mathematics,
17(2):416–429, 1969.
[11] C.-S. Ha, J. H. Lee, D. S. Leem, M.-S. Park, and
B.-Y. Choi. ASIC design of IPSec hardware
accelerator for network security. In Proceedings of the
2004 IEEE Asia-Paciﬁc Conference on Advanced
System Integrated Circuits, pages 168–171, Aug 2004.
[12] S. Han, K. Jang, K. Park, and S. Moon.
PacketShader: A GPU-accelerated Software Router.
In Proceedings of the ACM SIGCOMM 2010
Conference, SIGCOMM ’10, pages 195–206, 2010.
[13] Helion Technology Limited. IPsec solutions. Website.
http://www.heliontech.com/ipsec.htm.
[14] A. Hoban. Using Intel AES New Instructions and
PCLMULQDQ to Signiﬁcantly Improve IPSec
Performance on Linux. White paper, 2010.
[15] A. Hodjat, P. Schaumont, and I. Verbauwhede.
Architectural Design Features of a Programmable
High Throughput AES Coprocessor. In Proceedings of
the International Conference on Information
Technology: Coding and Computing (ITCC’04)
1266Volume 2 - Volume 2, ITCC ’04, pages 498–, 2004.
[16] Intel Corporation. Integrated Cryptographic and
Compression Accelerators on Intel Architecture
Platforms. 2013. http://intel.ly/1NF6xFq.
[17] M. A. Jamshed, J. Lee, S. Moon, I. Yun, D. Kim,
S. Lee, Y. Yi, and K. Park. Kargus: A Highly-scalable
Software-based Intrusion Detection System. In
Proceedings of the 2012 ACM Conference on
Computer and Communications Security, CCS ’12,
pages 317–328, 2012.
L. Ruan. Towards High-performance IPsec on Cavium
OCTEON Platform. In Proceedings of the Second
International Conference on Trusted Systems,
INTRUST’10, pages 37–46, 2011.
[26] S. Mu, X. Zhang, N. Zhang, J. Lu, Y. S. Deng, and
S. Zhang. IP Routing Processing with Graphic
Processors. In Proceedings of the Conference on
Design, Automation and Test in Europe, DATE ’10,
pages 93–98, Leuven, Belgium, 2010. European Design
and Automation Association.
[18] K. Jang, S. Han, S. Han, S. Moon, and K. Park.
[27] NVIDIA. CUDA C Programming Guide. NVIDIA,
SSLShader: Cheap SSL Acceleration with Commodity
Processors. In Proceedings of the 8th USENIX
Conference on Networked Systems Design and
Implementation, NSDI’11, pages 1–14, 2011.
[19] A. P. Kakarountas, H. Michail, A. Milidonis, C. E.
Goutis, and G. Theodoridis. High-Speed FPGA
Implementation of Secure Hash Algorithm for IPSec
and VPN Applications. The Journal of
Supercomputing, 37(2):179–195, 2006.
[20] S. Kent and R. Atkinson. Security Architecture for the
Internet Protocol. RFC 2401 (Proposed Standard),
November 1998. Obsoleted by RFC 4301, updated by
RFC 3168.
[21] Khronos Group. OpenCL 2.0 Speciﬁcation. Khronos
Group, November 2013.
[22] J. Kim, K. Jang, K. Lee, S. Ma, J. Shim, and
S. Moon. NBA (Network Balancing Act): A
High-performance Packet Processing Framework for
Heterogeneous Processors. In Proceedings of the Tenth
European Conference on Computer Systems, EuroSys
’15, pages 22:1–22:14, 2015.
[23] Y. Li, D. Zhang, A. X. Liu, and J. Zheng. GAMT: A
Fast and Scalable IP Lookup Engine for GPU-based
Software Routers. In Proceedings of the Ninth
ACM/IEEE Symposium on Architectures for
Networking and Communications Systems, ANCS ’13,
pages 1–12, 2013.
[24] Y. Liu, D. Xu, W. Song, and Z. Mu. Design and
Implementation of High Performance IPSec
Applications with Multi-Core Processors. In
Proceedings of the 2008 International Seminar on
Future Information Technology and Management
Engineering, FITME ’08, pages 595–598, Nov 2008.
[25] J. Meng, X. Chen, Z. Chen, C. Lin, B. Mu, and
July 2013.
[28] J. Thoguluva, A. Raghunathan, and S. T. Chakradhar.
Eﬃcient Software Architecture for IPSec Acceleration
Using a Programmable Security Processor. In
Proceedings of the Conference on Design, Automation
and Test in Europe, DATE ’08, pages 1148–1153, 2008.
[29] G. Vasiliadis, S. Antonatos, M. Polychronakis, E. P.
Markatos, and S. Ioannidis. Gnort: High Performance
Network Intrusion Detection Using Graphics
Processors. In Proceedings of the 11th International
Symposium on Recent Advances in Intrusion
Detection, RAID ’08, pages 116–134, 2008.
[30] G. Vasiliadis, L. Koromilas, M. Polychronakis, and
S. Ioannidis. GASPP: A GPU-accelerated Stateful
Packet Processing Framework. In Proceedings of the
2014 USENIX Conference on USENIX Annual
Technical Conference, USENIX ATC’14, pages
321–332, 2014.
[31] G. Vasiliadis, M. Polychronakis, and S. Ioannidis.
MIDeA: A Multi-parallel Intrusion Detection
Architecture. In Proceedings of the 18th ACM
Conference on Computer and Communications
Security, CCS ’11, pages 297–308, 2011.
[32] E. Z. Zhang, Y. Jiang, Z. Guo, K. Tian, and X. Shen.
On-the-ﬂy Elimination of Dynamic Irregularities for
GPU Computing. In Proceedings of the Sixteenth
International Conference on Architectural Support for
Programming Languages and Operating Systems,
ASPLOS XVI, pages 369–380, New York, NY, USA,
2011. ACM.
[33] J. Zhao, X. Zhang, X. Wang, and X. Xue. Achieving
O(1) IP Lookup on GPU-based Software Routers. In
Proceedings of the ACM SIGCOMM 2010 Conference,
SIGCOMM ’10, pages 429–430, 2010.
1267