Towards a Lightweight, Hybrid Approach for Detecting DOM XSS Vulnerabilities
with Machine Learning  
原文发表于WWW’21：
## 摘要
Web 应用程序中的客户端跨站点脚本 (DOM XSS) 漏洞很常见，难以识别且难以预防。污点跟踪是检测 DOM XSS
的最有前途的方法，具有高精度和召回率，但对于许多实际用途来说计算成本太高。
本文研究了机器学习 (ML) 分类器在检测 DOM XSS 漏洞能力时是否可以替代或增强污点跟踪。通过大规模的网络爬虫，本文收集了超过 180 亿个
JavaScript 函数，并使用污点跟踪将超过 180,000 个函数标记为潜在易受攻击的函数。有了这些数据，本研究训练了一个深度神经网络 (DNN)
来分析 JavaScript 函数并预测它是否容易受到 DOM XSS
的攻击（
）。本研究试验了一系列超参数，并提出了一个低延迟、高召回率的分类器，可以作为污点跟踪的预过滤器，将独立污点跟踪的成本降低 3.43 倍，同时检测 94.5%
的独特漏洞。认为 DNN 和污点跟踪的这种组合对于污点跟踪本身并不适用的一系列样本来说足够有效，包括浏览器运行时 DOM XSS 检测和分析大型代码库。
## 0x01 Introduction
未能正确清理其输入的 Web 应用程序可能容易受到跨站点脚本 (XSS) 漏洞的攻击，这些漏洞正变得越来越普遍。一种特定类型的 XSS 漏洞，客户端 XSS
(DOM XSS)是由网站 JavaScript 代码中的错误引起的；它们的流行度随着客户端代码复杂性的增加而上升。近年来，eBay、雅虎、IBM 和
Facebook 等知名组织都报告了 DOM XSS 漏洞 。
DOM XSS 漏洞可以通过使用签名和启发式过滤掉内容来防止，但现代攻击策略可以规避这种防御。其他防御措施使用静态或动态分析检测 DOM XSS
漏洞。原则上，静态分析可以在代码注入漏洞被利用甚至发布之前检测到它们。然而，静态分析工具难以推理
JavaScript的动态特性，具有高错误率，或者可能无法扩展到大型代码库，这使得它们作为 DOM XSS 防御不切实际。
相比之下，动态分析——特别是污点跟踪——已经显示出检测 DOM XSS 漏洞的希望。在动态污点跟踪方法中，分析代码以在执行时检测 DOM XSS
漏洞。这增加了大量开销（页面加载时间增加了 16.8%），表明这种方法不太可能在许多设置中采用，例如作为浏览器内的防御。
利用观察到许多 DOM XSS 漏洞在语法上相似且复杂性较低，本文提出了一种替代方法，该方法使用机器学习 (ML) 来大大减少动态污点跟踪带来的开销，以检测
DOM XSS 漏洞。还研究了用现有分析组合机器学习的可行性。具体来说解决了两个主要的研究问题：
**RQ1：ML 是否可以作为污点跟踪的预过滤器来检测 DOM XSS 漏洞，同时保持高召回率，并且开销远低于单独污点跟踪？**
**RQ2：ML 是否可以单独用于检测 DOM XSS 漏洞，其召回率和精确度可与其他技术相媲美或优于其他技术？**
为了训练和评估这些 ML 分类器，首先获得足够数量的真实数据。本文使用启用了开源污点跟踪的 Web 浏览器，分两步收集 DOM XSS 易受攻击的
JavaScript 函数的状态（见下图）。首先使用污点跟踪来识别使用看似未经处理的参数调用危险接收器（例如 document.write）的
JavaScript
函数。污点跟踪本身无法确认这些函数是可利用的，因此将这些函数标记为未确认的漏洞（数据集1）。为了将这组函数修剪为仅可利用的函数，使用启发式方法来执行概念验证利用，并将可利用的函数标记为已确认的漏洞（数据集2）。  
本文在未经确认的漏洞上训练的分类器可用作基于污点跟踪的 DOM XSS 检测 (RQ1) 的预过滤器，将 97.5% 的独特函数分类为非脆弱性，同时保持
94.5% 的独特漏洞召回率。在此配置中，污点跟踪仅用于其余 2.5% 的函数，与单独的污点跟踪相比，漏洞检测开销降低了 3.43 倍。
或者，在已确认漏洞上训练的分类器可用作判断 JavaScript 函数是否容易受到 DOM XSS 攻击 (RQ2) 的唯一手段，并以 57.8%
的精度捕获 50% 的已确认漏洞。总的来说还没有找到一种调优，可以提供高召回率和高精度的组合，足以让这种分类器成为检测 DOM XSS 漏洞的唯一方法。
在探索分类器设计空间以回答这些研究问题时，试验了两种模型类型（线性模型和深度神经网络
(DNN)）；源代码的多种表示（基于脚本、函数或语义距离）；各种模型架构（嵌入大小和 DNN
层大小）；并调整训练机制以补偿不平衡的基本事实（即，在野非漏洞函数的数量远远超过漏洞函数）。
## 0x02 Background
### A.DOM XSS 漏洞
跨站点脚本 (XSS) 漏洞在输入被正确清理时发生，允许攻击者将任意 JavaScript
代码注入受害者的浏览器。攻击者可以通过重定向到恶意网站来窃取私人信息或危害受害者的机器。
这项工作关注由客户端对浏览器文档对象模型 (DOM) 的操作导致的客户端漏洞。攻击者可以将漏洞注入到诸如 document.location
对象（URL）、网页引用或 postMessage API 之类的源中。当来自这些攻击者可控来源的信息用于敏感的代码执行函数（称为接收器）时，可能存在
XSS 漏洞。此类接收器的示例包括：DOM 节点的 innerHTML 属性、eval方法或 javascript: URL。
从源到接收器的可利用流并不一定意味着存在漏洞，因为程序员可能会在使用敏感接收器之前对信息进行消毒。常见的清理方法包括内置浏览器 API，例如
encodeURI 和 encodeURIComponent 或手动检查用户输入是否与安全正则表达式（例如字母数字字符）匹配。
在本文工作中，训练了一个基于源代码预测 DOM XSS
漏洞的模型。训练单独的模型来预测未确认的漏洞（由污点分析标记并需要进一步调查）和已确认的漏洞（通过执行概念验证漏洞确认）。
### B.内容过滤
浏览器和 Web 服务器试图为 DOM XSS 漏洞利用过滤器。内容安全策略 (CSP) 可以限制网站上允许的脚本，但经常以一种不会实质性限制 DOM
XSS 漏洞利用的方式错误配置。已经引入了基于可信类型概念的实验性浏览器 API，但该 API 与遗留应用程序不兼容。 Web
应用程序防火墙过滤器是另一种针对 XSS 漏洞的常见防御措施，但可以通过调整漏洞利用来绕过过滤器检测模式。
客户端过滤器（例如XSS auditor）也被用作防御，但它们也遭受类似的攻击。研究人员检查了一系列已知的 DOM XSS 漏洞能力，并表明在 73%
的情况下，XSS auditor未能过滤攻击。与使用此类启发式相比，本文训练 ML 模型以学习过滤策略并检测 DOM XSS 漏洞。 ML
模型可能会推断出源代码和漏洞之间更深层次的关系，并且攻击者可能更难以绕过。
### C.JavaScript的静态分析
静态分析技术可以通过分析源代码来检测感兴趣的属性，从而了解程序可能采用的所有可能的执行路径。JavaScript 静态分析的几种实现可在商业工具中使用，包括
IBM Security AppScan、Trustwave App Scanner、Coverity 的 JavaScript 扫描器和 Burp
Suite Pro。然而，静态分析 JavaScript
尤其具有挑战性，因为它是一种动态语言，缺乏严格的类型信息。此外，静态分析对于本研究设置来说过于昂贵，因此不考虑在解决方案中使用静态分析。
### D.JavaScript的动态分析
动态分析也常用于
Javascript，但仅对程序执行期间收集的观察进行操作，并没有分析未执行的代码。此外，此类方法会产生运行时开销，并且需要大量工程工作来修改复杂的运行时环境（在示例中为
JavaScript 引擎）。
#### （1）污点跟踪
识别 DOM XSS
漏洞最相关的动态分析是污点跟踪。该技术将来自潜在攻击者控制的来源的数据标记为受污染，并在执行时传播污染信息。当在敏感接收器中使用受污染的字符串时，污点跟踪引擎会将此信息流标记为潜在的
DOM XSS 漏洞；称之为未经证实的漏洞。