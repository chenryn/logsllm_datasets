# Developments in Cisco IOS Forensics

## Presenter
Felix ‘FX’ Lindner  
DEFCON, Las Vegas, August 2008

## Agenda
- IP Routing Infrastructure and Cisco IOS
- Cisco IOS Internals
- Debugging and Post-Mortem Analysis Today
- A New Analysis Approach
- Proposal
- Features
- Challenges
- Public Offer
- Future Work

## IP Routing Infrastructure
The Internet and corporate networks predominantly rely on the Internet Protocol (IP). While IPv4 remains the most widely used version, IPv6 is slowly gaining traction. The design of IP necessitates intelligent nodes to make routing decisions, a fundamental principle that cannot be altered. "Flat" networks, while simpler, come with their own set of challenges.

### IP Infrastructure & Security
Security protocols built on top of IP aim to:
- Ensure end-to-end integrity (and sometimes confidentiality) of traffic.
- Detect modifications, replays, injections, and holding back of traffic.
- Inform upper protocol layers of any issues.

However, these protocols cannot recover from attacks rooted in the routing infrastructure and have no influence over routing decisions.

## Infrastructure Monoculture
Cisco Systems' routing platforms are the most prevalent in today's networks, spanning the Internet core, government, and corporate networks. These platforms feature:
- Diverse hardware with different CPUs.
- Significant investment tied to the equipment.
- Difficulty in replacement.
- All running essentially the same operating system (IOS).

Protecting this infrastructure is critical, making in-depth analysis and diagnostics essential.

## Cisco IOS
**Cisco® Internetwork Operating System® (IOS)**
- **Monolithic OS**: Compiled with linked functionality, leading to complex three-dimensional code.
- **Platform-Dependent Code**: Varies based on hardware, feature set, and version.
- **Variety of Images**: Tens of thousands of different IOS images are used, with over 10,000 still officially supported.

### Inside Cisco IOS
- **ELF Binary**: A large, statically linked UNIX program.
- **ROMMON Loader**: Functions like a BIOS.
- **CPU Utilization**: Runs directly on the router’s main CPU, often without virtual memory or privilege separation.
- **Processes as Threads**: No virtual memory per process, run-to-completion, cooperative multitasking, and interrupt-driven handling of critical events.
- **Data Structures**: Common heap, minimal abstraction, and shared address space.

### The IOS Code Security Issue
- **Binary Size**: For example, 12.4(16a) with an enterprise base feature set is 25.316.780 bytes.
- **Shared Resources**: Single address space, heap, and data structures.
- **Vulnerability**: A single error can affect the entire system, including kernel, security, and cryptographic components.

### Awareness and Mitigation
- **Next-Generation IOS-XR**: Uses a commercial QNX microkernel with real processes, concurrent scheduling, and higher hardware requirements.
- **Adoption**: Many production networks still use older versions (e.g., 12.1 or 12.2) due to stability and cost concerns.

### Frequency of Router Hacks
- **Keynote Insights**: Jerry Dixon at BlackHat Washington DC highlighted the risks of unpatched routers.
- **Exploitation**: Old vulnerabilities, such as the HTTP level 16 bug, are still actively scanned for.
- **Backdoors**: TCL backdoors and patched images are common, and patching images is relatively easy.

### Future Threats
- **Target Shift**: As Windows and UNIX systems become more secure, attackers may increasingly target routers.
- **Monitoring**: Multiple talks at DEFCON focus on IOS, with two specifically on attack methods.

## Summary – Part I
- **Significant Share**: A large portion of the Internet and corporate networks run on various builds of the same IOS code base in a single-process environment.
- **Detection Challenge**: It is difficult to determine if a router is compromised.

## Error Handling and Recovery
- **Exception Handling**: IOS, like a large UNIX process, can only restart the system upon an exception.
- **Evidence Destruction**: Rebooting destroys volatile evidence, except for the startup configuration and IOS image.
- **Crashinfo File**: Later IOS releases write a "crashinfo" file, but it contains limited information.

### Runtime Evidence
- **Show Commands**: Useful for inspection but require CLI access and are geared towards network engineers.
- **Debug Commands**: Enable in-code debugging output but can halt the router if misused.
- **SNMP and Syslog Monitoring**: Commonly used for monitoring but provide limited process-related information.

## Summary – Part II
- **Identification Difficulty**: Current tools and methods make it hard to identify compromised routers.
- **Insufficient Data**: There is not enough data for post-mortem analysis of router crashes.
- **Indistinguishable Issues**: Functional problems, attempted attacks, and successful attacks are indistinguishable.

## A (Not So) New Approach
- **Maximizing Evidence**: Full snapshots of the device are needed, on-demand and upon crashes.
- **Independent Analysis Framework**: Required to process and extend the evidence.

### Getting the Evidence
- **Core Dumps**: IOS can write complete core dumps to various destinations (TFTP, FTP, RCP, Flash).
- **Configuration**: Core dump settings do not affect router performance and are consistent across IOS versions.

### Analyzing Core Dumps
- **Requirements**: Must be independent, not based on disassembly, and able to handle corrupted data.
- **Image Blueprint**: The IOS image serves as a memory layout blueprint.
- **Heap Reconstruction**: Allows extensive integrity checks and detection of runtime-patched images.
- **Process List**: Extracts the IOS process list, enabling detailed post-mortem analysis.
- **TCL Backdoor Detection**: Identifies and extracts TCL scripts from the heap.
- **IO Memory Buffers**: Analyzes packet switching and forwarding, providing insights into traffic.

### Advanced Traffic Extraction
- **GDB Link**: Allows direct access to router memory via the console, preserving all data.
- **Applications**: Identifies attack jump pads, 0-day vulnerabilities, and spoofing attacks.

### Reality Check: Recent Vulnerabilities
- **Memory Exhaustion**: Visible through heap usage analysis.
- **UDP Delivery Issue**: Can be identified using the "show interfaces" command.
- **OSPF Vulnerability**: Similar analysis methods apply.

### Challenges
- **Complexity**: Handling the variety of hardware platforms and IOS versions.
- **Testing and Verification**: CIR has been tested against multiple IOS versions and platforms.

## Summary – Part III
- **Core Dumps**: A viable method for obtaining IOS evidence.
- **Analysis Framework**: Distinguishes between bugs and attacks, enabling real forensics on IOS routers.
- **CIR Development**: Ongoing, with community feedback driving future improvements.

## Availability
- **CIR Online Service (Free)**: Available at [cir.recurity-labs.com](http://cir.recurity-labs.com), currently in BETA.
- **CIR Rootkit Detector (Free)**: Detects image and runtime code modifications, available at [cir.recurity-labs.com](http://cir.recurity-labs.com), in BETA.
- **CIR Professional (Non-Free)**: Advanced features for professional use.

### Conclusion
CIR can be a valuable tool for networking engineers and forensics professionals to understand the state of their infrastructure. We welcome community feedback to guide future development.

---

**Contact Information**
- Felix 'FX' Lindner
- Head, Recurity Labs GmbH, Berlin, Germany
- [Website](http://www.recurity-labs.com)
- [Email](mailto:PI:EMAIL)