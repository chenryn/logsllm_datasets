参见
实例5.1、实例5.2和实例5.4。
5.4查找除某个单词之外的任意单词
问题描述
你想要使用一个正则表达式来匹配除了cat之外任意的完整单词。你应当可以匹配
解决方案
使用一个否定型顺序环视可以帮助你排除特定的单词，而这正是下面这个正则式的关
键所在：
\b(?!cat\b)\w+
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
虽然一个否定字符类（采用1的形式）可以让你很容易匹配除了某个特定字符之外
的任意字符，但是你并不能使用[^cat]>来匹配除了单词cat之外的任意单词。虽然
^cat]是一个合法的正则式，但是它会匹配除了c、a或t之外的任意字符。因此，虽
然b[^cat]+\b>会避免匹配单词cat，但是它却同样无法匹配单词cup，因为后者也包含
了它不允许的字母c。正则表达式也还是不正确的，因为它会拒绝以
c作为第一个字母，以a作为第二个字母，或者以t作为第三个字母的单词。而且，它
也没有把前三个字母都限制为是单词字符，另外它只会匹配至少包含3个字符的单词，
因为其中三个否定字符类都不是可忽略的。
单词、文本行和特殊字符
281
www.TopSage.com
---
## Page 298
在了解了这些情况之后，我们来仔细看一下这个实例开始处所给的正则表达式是如何
来解决这个问题的：
\b
判断一个单词边界位置
i)
#判断下面的正则式不能在这里匹配..
cat
#匹配“cat"
Ab
#判断一个单词边界位置
)
否定型顺序环视的结束
\w+
#匹配一个或多个单词字符
正则选项：宽松排列，不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
这个模式中的关键所在是一个否定型顺序环视，它采用的形式是《（？!)。否定型顺序
环视不允许出现在cat之后紧跟着一个单词边界的序列，但是并不会禁止这几个字符以
其他顺序出现，或者是它们作为更长或者更短单词的一部分出现。在正则表达式的结
尾处没有使用单词边界，因为它不会改变这个正则式的匹配。在会
重复单词字符记号任意多次，这也就意味着它总是会一直匹配到下一个单词边界为止。
如果我们把这个正则式应用到目标字符串categoricallymatchanywordexceptcat之上，
那么它会找到5个匹配：categorically、match、any、word和except。
变体
查找不包含另一个单词的单词
如果说我们现在要找的不是非cat的任意单词，而是要找到不包含cat的任意单词，那
么就需要使用一个稍有不同的方式：
\b(?:(?!cat)\w)+\b
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
在这个实例的前面小节中，正则表达式开始处的单词边界为我们提供了-一个方便的定
位符，用来把否定型顺序环视放在单词的开始处。虽然这里使用的解决方案的效率并
不是很好，但是不管怎样它也是一个较为常用的结构，用来让你可以匹配除了某个特定
单词或模式之外的内容。它的做法是，对包含一个否定型顺序环视的分组和单个的单词
字符进行重复。在匹配每个字符之前，正则引擎会确保单词cat不会从当前位置产生匹配。
与上一个正则表达式的不同之处是，这个正则式要求使用一个终止的单词边界。否则
的话，它就会只匹配到一个单词的前面一部分，直到出现了cat的位置为止。
参见
实例2.16中对于环视（其中包括了肯定型和否定型的顺序环视和逆序环视）进行了更
加深人的探讨。
实例5.1、实例5.5、实例5.6和实例5.11。
282第5章
www.TopSage.com
---
## Page 299
5.5查找后面不跟着某个特定单词的任意单词
问题描述
你想要匹配其后不会紧跟着单词cat的任意单词，可以忽略二者之间的任何空格、标点
或其他非单词字符。
解决方案
否定型顺序环视是这个正则表达式的关键所在：
(b\w+\b(?!\W+cat\b)
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
与本章中的许多其他实例一样，单词边界（\b>）和单词字符记号（w>）在一起使用
就可以匹配一个完整单词。关于这些特性的深入讲解，读者可以参考实例2.6。
把这个正则式的第二个部分包起来的？！...语法是一个否定型的顺序环视。顺序环视
会告诉正则引擎在字符串中临时向前搜索，检查是否可以从当前位置向前匹配到位于
顺序环视之内的模式。它并不会消费在顺序环视中匹配到的任何字符。它只是用来判
断是否可能产生一个匹配。因为我们使用了一个否定型的顺序环视，所以判断的结果
会被取反。换句话说，如果在顺序环视中的模式能够向前产生匹配，那么匹配尝试会
关于顺序环视（以及与之相对的逆序环视）的更多详细信息，请参考实例2.16。
在位于顺序环视之内的模式中，W+>会匹配出现在（cat之前的个或多个非单词字
符，而在结尾处的单词边界则会确保我们只会略掉不跟着作为整个单词的cat，而不是
略掉以cat作为开头的任意单词。
注意这个正则表达式甚至会匹配到单词cat，只要其后跟着的单词不是cat即可。如果
你还想要避免匹配到cat，那么你就需要把这个正则式同在实例5.4中的正则表达式结
合起来，这样会得到如下的正则表达式：并没有对于它可以匹配多少个学符进行限制，所以这个版本只能用在.NET
正则表达式流派中。本书中讲到的所有其他正则表达式流派都要求在逆序环视中的模
式必须拥有固定长度或最大（有限）长度的限制。
第二个正则表达式把逆序环视中的量词+>改成了{1,9）。因此，它可以用于.NET、Java
和PCRE中，所有这些流派都支持可变长度的逆序环视，但是要求指定它们可以匹配
的字符个数的上限。在这个例子中，作者随便指定了用来分隔单词的非单词字符串的
最大长度是9。这样就充许在单词之间出现一些标点和几个空行。除非你要处理的自标
文本非常怪异，否则这个解答与上一个只支持.NET的解答的执行结果应该是完全一样
的。然而，即使在.NET中，为逆序环视中的任意量词提供一个合理的重复次数上限，
也很可能会提高正则表达式的执行效率，因为这样会减少可能在逆序环视中出现的不
必要回溯的数量。
第三个正则表达式的构造方式是允许逆序环视检测一个固定长度的字符串，因此就可
以支持更多的正则表达式流派。为了能够达到这个目标，我们把非单词字符使用的简
写字符类（W>）移到了逆序环视的外面。这意味着在你要查找的单词之前的非单词字
符（比如标点和空格）就会被当作实际上匹配到的字符串的一部分，被包含在正则表
达式的返回结果中。为了能够更加容易忽略掉匹配中的这个部分，我们在最后的单词
字符序列之上添加了一个捕获分组。采用一点额外的代码，你就可以不读整个匹配的
单词、文本行和特殊字符
285
www.TopSage.com
---
## Page 302
结果，而是只读出向后引用#1中的内容，从而可以得到与前两个正则表达式相同的结
果。关于用来处理向后引用的代码，请参考实例3.9。
模拟逆序环视
JavaScript不支持逆序环视，但是前面所给的JavaScript代码示例中展示了如何使用两
个正则表达式来模拟出现在正则表达式开头的逆序环视。该代码对于（被模拟的）逆
序环视可以匹配的文本长度并没有施加任何限制。
首先，我们把最初解决方案所给的正则表达式（?拆分成了两个部分：
位于逆序环视中的模式（\bcatiW+>）和紧随其后的内容（）。在逆序环视正则式
的结尾添加一个$>标记。如果你需要在lookbehind正则式中采用“脱字符和美元符号
匹配换行处”的选项（/m)，那么应当使用的是$(?!s)>而不是，其目的是为了确保
它能匹配到目标文本的结尾处。变量lookbehind_type用来指定我们模拟的是肯定型还
是否定型的逆序环视，使用true来模拟肯定型逆序环视，而false则表示否定型。
在上述变量设置好之后，我们使用main_regex和exec两个方法来遍历目标字符串
（关于这个过程的描述，请参考实例3.11)。当找到匹配的时候，在该匹配之前的目
标文本子串会被拷贝到一个新的字符串变量中（left_context），然后我们会检查
lookbehind正则式是否匹配该字符串。因为在lookbehind正则式的结尾添加了定位
符，所以这样就会把第二个匹配刚好定位到第一个匹配的左边。通过把逆序环视检
查的结果同lookbehind_type做对比，我们就可以得知该匹配是不是符合总的成功匹
配的标准。
最后，我们选择下列的步骤之一。如果得到了成功匹配，那么就把匹配到的文本添加
到matches数组中。否则，把继续搜索下-个匹配的位置（使用的是main_regex.lastIndex）
修改为main_regex对象的上一个匹配的开始位置之后的一个字符，而不是让exec方法
从当前匹配的结尾继续下一次循环。
大功告成！
这里使用了一个高级的技巧，利用了在采用/g（“global"）标志的JavaScript正则表达
式中会动态进行更新的lastIndex属性。通常来说，对lastlndex进行更新和重置都是会
自动进行的。在这里，我们用它来控制正则表达式在目标字符串中的行进路线，按照
需要向前向后移动。这个技巧只能充许你模拟出现在一个正则式并头的逆序环视。然
而，它并不能作为逆序环视支持的完全替代。由于逆序环视和回溯的互相影响，这种
方式无法帮助你准确地模拟出现在正则表达式中间的逆序环视的行为。
变体
如果你只想匹配紧跟在cat之后的单词（在匹配到的文本中不包括cat和跟在它之后的
非单词字符），那么只需把否定型逆序环视改为肯定型逆序环视：
286第5章
www.TopSage.com
---