# 为什么每个人都在谈论 WebAssembly

作者：Mike Bursell  
类别：观点  
发表日期：2020年1月27日 12:54:39  
更新日期：2020年1月27日 12:54:39  
译者：laingke  
校对：wxy  
选题：lujun9972  

> 了解有关在Web浏览器中运行任何代码的最新方法的更多信息。

![](/data/attachment/album/202001/27/125343ch0hxdfbzibrihfn.jpg)

如果你还没有听说过[WebAssembly](https://opensource.com/article/19/8/webassembly-speed-code-reuse)，那么你很快就会知道。这是业界最保密的秘密之一，但它无处不在。所有主流浏览器都支持它，并且它也将在服务器端使用。它速度快，适用于游戏编程。它是主要国际网络标准组织万维网联盟（W3C）的一个开放标准。

你可能会说：“哇，这听起来像是我应该学习编程的东西！”你可能是对的，但也是错的。你不需要用WebAssembly编程。让我们花一些时间来了解一下这种通常被缩写为“Wasm”的技术。

## 它从哪里来？

大约十年前，人们越来越认识到广泛使用的JavaScript不够快速，无法满足许多需求。尽管JavaScript无疑是一种成功和方便的语言，可以在任何浏览器中运行，并启用了今天我们认为理所当然的动态网页类型，但它是一种高级语言，在设计时并没有考虑计算密集型工作负载。

尽管负责主流Web浏览器的工程师们对性能问题的看法大体一致，但他们对如何解决这个问题却意见不一。出现了两个阵营：谷歌开始了它的原生客户端（Native Client）项目，后来又推出了可移植原生客户端（Portable Native Client）变体，着重于允许用C/C++编写的游戏和其他软件在Chrome的安全隔间中运行。与此同时，Mozilla赢得了微软对asm.js的支持。该方法更新了浏览器，使其能够非常快速地运行JavaScript指令的低级子集（还有一个项目可以将C/C++代码转换为这些指令）。

由于这两个阵营都没有得到广泛采用，各方在2015年同意围绕一种称为WebAssembly的新标准联合起来，以asm.js所采用的基本方法为基础。正如CNET的Stephen Shankland当时所写，“在当今的Web上，浏览器的JavaScript将这些指令转换为机器代码。但是，通过WebAssembly，程序员可以在此过程的早期阶段完成很多工作，从而生成介于两种状态之间的程序。这使浏览器摆脱了创建机器代码的繁琐工作，但也实现了Web的承诺——该软件将在具有浏览器的任何设备上运行，而无需考虑基础硬件的细节。”

2017年，Mozilla宣布了其最小可行产品（MVP），并使其脱离预览版阶段。到该年年底，所有主流浏览器都采用了它。2019年12月，WebAssembly工作组发布了三个W3C推荐的WebAssembly规范。

WebAssembly定义了一种可执行程序的可移植二进制代码格式、相应的文本汇编语言以及用于促进此类程序与其宿主环境之间交互的接口。WebAssembly代码在低级虚拟机中运行，这个可运行于许多微处理器之上的虚拟机可模仿这些处理器的功能。通过即时（JIT）编译或解释，WebAssembly引擎可以以近乎原生平台编译代码的速度执行。

## 为什么现在感兴趣？

当然，最近对WebAssembly的兴趣部分原因是最初希望在浏览器中运行更多计算密集型代码。尤其是笔记本电脑用户，越来越多的时间都花在浏览器上（或者，对于Chromebook用户来说，基本上是所有时间）。这种趋势已经迫切需要消除在浏览器中运行各种应用程序的障碍。其中一个障碍通常是性能的某些方面，这正是WebAssembly及其前身最初旨在解决的问题。

但是，WebAssembly并不仅仅适用于浏览器。2019年，Mozilla宣布了一个名为WASI（WebAssembly系统接口）的项目，以标准化WebAssembly代码如何与浏览器上下文之外的操作系统进行交互。通过将浏览器对WebAssembly和WASI的支持结合在一起，编译后的二进制文件将能够在浏览器内外以接近原生的速度跨不同的设备和操作系统运行。

WebAssembly的低开销立即使它可以在浏览器之外使用，但这无疑是赌注；显然，还有其他不会引入性能瓶颈的运行应用程序的方法。为什么要专门使用WebAssembly？

一个重要的原因是它的可移植性。如今，像C++和Rust这样的广泛使用的编译语言可能是与WebAssembly关联最紧密的语言。但是，[各种各样的其他语言](https://github.com/appcypher/awesome-wasm-langs)可以编译为WebAssembly或拥有它们的WebAssembly虚拟机。此外，尽管WebAssembly为其执行环境[假定了某些先决条件](https://webassembly.org/docs/portability/)，但它被设计为在各种操作系统和指令集体系结构上有效执行。因此，WebAssembly代码可以使用多种语言编写，并可以在多种操作系统和处理器类型上运行。

另一个WebAssembly的优势源于这样一个事实：代码在虚拟机中运行。因此，每个WebAssembly模块都在沙盒环境中执行，并使用故障隔离技术将其与宿主机运行时环境分开。这意味着，对于其他部分而言，应用程序独立于其宿主机环境的其余部分执行，如果不调用适当的API，就无法摆脱沙箱。

## WebAssembly现状

这一切在实践中意味着什么？

如今在运作中的WebAssembly的一个例子是[Enarx](https://enarx.io)。

Enarx是一个提供硬件独立性的项目，可使用受信任的执行环境（TEE）保护应用程序的安全。Enarx使你可以安全地将编译为WebAssembly的应用程序始终交付到云服务商，并远程执行它。正如Red Hat安全工程师Nathaniel McCallum指出的那样：“我们这样做的方式是，我们将你的应用程序作为输入，并使用远程硬件执行认证过程。我们使用加密技术验证了远程硬件实际上是它声称的硬件。最终的结果不仅是我们对硬件的信任度提高了；它也是一个会话密钥，我们可以使用它将加密的代码和数据传递到我们刚刚要求加密验证的环境中。”

另一个例子是OPA，即开放策略代理（Open Policy Agent），它于2019年11月发布，你可以[编译](https://github.com/open-policy-agent/opa/tree/master/wasm)他们的策略定义语言Rego为WebAssembly。Rego允许你编写逻辑来搜索和组合来自不同来源的JSON/YAML数据，以询问诸如“是否允许使用此API？”之类的问题。

OPA已被用于支持策略的软件，包括但不限于Kubernetes。使用OPA之类的工具来简化策略被认为是正确保护Kubernetes部署的重要步骤。WebAssembly的可移植性和内置的安全功能非常适合这些工具。

我们的最后一个例子是[Unity](https://opensource.com/article/20/1/www.unity.com)。还记得我们在文章开头提到过WebAssembly可用于游戏吗？跨平台游戏引擎Unity是WebAssembly的较早采用者，它提供了在浏览器中运行的Wasm的首个演示品，并且自2018年8月以来，已将WebAssembly用作Unity WebGL构建目标的输出目标。

这些只是WebAssembly已经开始产生影响的几种方式。你可以在[这里](https://webassembly.org/)查找更多信息并了解Wasm的所有最新信息。

---
via: [开源中国](https://opensource.com/article/20/1/webassembly)

本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出。