Symbolic execution creates the symbolic variables and
constraints; they contain the decoding semantics of IEI and LI.
Each symbolic variable represents one of the IE fields (i.e., IEI,
LI, or value), and each constraint represents how the decoder
processes the fields. In the decoder, conditional branches that
are associated with the symbolic variables produce constraints
of these variables. These constraints can be created by checking
an IEI, in the case of non-imperative IEs, or verifying an LI,
based on the embedded message structure. For instance, the
program states in Figure 6 contain different constraints of
symbolic variables depending on the paths they followed. The
S1 state, which includes a constraint of v2==0x5F, may have
followed a path that decodes an IE with 0x5F as the IEI value.
Fig. 6: Overview of semantic analysis
Meanwhile, S2, which includes a constraint of v2==0x78, may
have followed another path comparing the IEI with 0x78.
2) Identifying IEI and LI: When a symbolic state reaches
the end of the decoder function, BASESPEC identifies IEIs
and LIs from the collected symbolic variables and constraints.
First, BASESPEC identifies an LI using its usages in memory
addressing. As an LI specifies the size of the value part, the
decoder function uses the LI in the address calculation to access
the following IE. For instance, in Figure 6, suppose v3 is an LI
located at address A. Then, v4 and its following bytes are the
value part with the length v3. Thus, when the decoder function
want to access the next IE, it will use A+v3+1 as the address of
the IE. Therefore, symbolic variables for an LI can be identified
by checking whether they are used in any address. Further, a
2-byte LI that has a -E suffix format can be identified similarly.
The last IE’s LI cannot be identified in this manner; however,
we can suppose the last unidentified symbolic variable as LI
after other parts are identified.
Next, the IEIs of non-imperative IEs can be identified in
a straightforward manner as they should be compared with
predefined IEI values in the decoding routines. Thus, a symbolic
variable is identified as an IEI if it is not an LI, and there are
constraints that strictly confine its value. As shown in Figure 6,
some constraints strictly limit the value of v2 into 0x5F, 0x78,
or 0x16, which are possible values of the IEI. Therefore, v2 is
the IEI part. The value parts of IEs are identified implicitly as
they are not constrained in the decoding routines. Symbolic
variables may not even be accessed if the decoder function
does not read the actual value and only stores the address of
the value parts as an output. If the values are accessed and
copied to other memory regions, we can identify such actions
during symbolic execution and determine the value parts.
3) Handling of path explosion: In the process of symbolic
execution, BASESPEC performs state pruning to prevent path
explosion, which is a well-known problem from which symbolic
execution-based approaches suffer [12], [13]. In particular,
BASESPEC prunes a path that reached an error handling logic.
If the decoder function detects obvious errors in the message, it
invokes a complicated error handling logic. This error handling
logic is irrelevant to legitimate message decoding; however,
it causes path explosion. Therefore, we can discard this path
and prevent path explosion. As the decoder function sets a flag
variable to indicate its error, we can distinguish such paths
with the flag variable. Thus, BASESPEC prunes paths which
have set the flag variable.
In addition, we limit the number of non-imperative IEs
analyzed in each state to prevent path explosion. Recall that
non-imperative IEs can appear in an arbitrary order in a message.
Therefore, numerous combinations of their sequences appear
in symbolic execution, and this eventually produces numerous
9
07  44  v1  v2  v3  v4  ...v2 == 5F &&v3  0v2 == 16 &&v3 > 0TLV?L3 Decoder Semantic AnalyzerTABLE III: BASESPEC’s components and lines of code (LoC).
Component
Preprocessing
Extracting binary-embedded specifications
Parsing specification documents
Syntactic comparison
Semantic comparison
Processing Vendor2
Total
LoC (Python)
1,303 lines
2,105 lines
566 lines
546 lines
1,938 lines
749 lines
7,207 lines
it difficult to validate its correctness automatically. Therefore,
we rely on a manual analysis to analyze it. Nevertheless, it is
worth noting that mismatches reported by BASESPEC can offer
hints for this analysis; we need to analyze only the routines
corresponding to the mismatched IEs rather than the entire
function with complex logic.
Figure 7 illustrates the relationship between mismatches in a
decoder and the implications in handler functions. In particular,
missing and unknown mismatches directly represent functional
errors in the baseband firmware. As shown in 2 of Figure 7, a
missing mismatch causes a drop of benign IE; if an imperative
IE (i.e., a mandatory field) is dropped due to the mismatch, it
shows that the firmware fails to comply with the specification
(i.e., functional errors). In addition, unknown mismatches are
tightly coupled with missing mismatches. When a developer
mistakenly embeds a wrong IEI value, both unknown and
missing mismatches appear simultaneously. In such a case, the
unknown mismatch directly represents a functional error.
Further, an invalid mismatch can have two implications;
it can cause a functional error or memory corruption as it
essentially represents that a decoder failed to validate the length
of a certain IE properly. If the decoder’s length limit for an
IE is tighter than that defined in the specification, we do not
need additional analysis because it represents a functional error
that rejects a benign IE ( 2 in Figure 7). Meanwhile, if the
length limit is larger, it may cause memory corruption bugs
in further processing ( 3 in Figure 7). For example, a buffer
overflow can happen if developer blindly assumes a certain
IE’s length according to the specification although the actual
length can be larger. As the handler function may have an
additional check, it requires manual analysis on the handler to
confirm the implications of invalid mismatches. Remarkably,
such invalid mismatches provide us helpful insights on the
developers’ mistakes in embedding message structures in the
baseband firmware, which lead us to discover several critical
security vulnerabilities (§VII-C).
VI.
IMPLEMENTATION
We implemented BASESPEC in 7k lines of code (LoC) in
Python, as summarized in Table III. First, we utilized APIs
in IDA Pro v7.4 [31] for automating the manual firmware
analysis (§V-B). For the semantic analysis part of BASESPEC,
we leveraged angr, a promising binary analysis framework [58],
and we used its symbolic execution engine and constraint solver.
To analyze memory access using length indicators, which are
treated as symbolic variables (§V-D), we implemented the fully
symbolic memory based on the approach of MemSight [19].
We released our source code that is irrelevant to the vendor to
help further research.2
2https://github.com/SysSec-KAIST/BaseSpec
Fig. 7: Relationship between mismatches and their implications
states having complex constraints. To prevent state explosion,
BASESPEC analyzes each non-imperative IE separately in an
independent state, as most non-imperative IEs are optional and
are not related to one another. Specifically, BASESPEC prunes
a state if it has constraints of multiple non-imperative IEs, by
periodically identifying IEIs in each active state. Note that all
the imperative IEs are analyzed in each state because they must
be present in a message.
4) Comparing IEs: For comparison, BASESPEC constructs
semantic-aware message structures based on the identified IEI
and LI values of the message. Each state from the symbolic
execution has information of all imperative IEs and some non-
imperative IEs. BASESPEC first composes the list of possible
IEs by collecting the information from various states. A pair
of an IEI and LI constructs a non-imperative IE, and an LI
without an IEI builds an imperative IE. BASESPEC analyzes
the semantics of the IEI and LI parts, and it does not identify
imperative IEs without LI as those IEs have only the value
part. For example, in Figure 6, the S1 state constructs a non-
imperative IE with v2 as the IEI (0x5F) and v3 as the LI. The S2
state comprises a non-imperative IE with v2 as the IEI (0x78)
and v3:v4 as the extended LI. Although the ATTACH REJECT
message also has an imperative IE with v1 in all states, it is not
identified because it does not have an LI but only the value part.
Then, BASESPEC constructs the message structure as the right
table in Figure 6; it concretizes the LIs to show the explicit
ranges of the lengths. The message structure is semantic-aware
as it reflects the internal logic of the decoder.
Finally, BASESPEC compares the message structure with
the specification documents similarly to that in syntactic com-
parison (§V-C). As imperative IEs must appear in a fixed order,
BASESPEC compares their LIs sequentially, skipping imperative
IEs without an LI. For non-imperative IEs, BASESPEC first
matches them using their IEIs and then compares their LIs.
BASESPEC reports any differences or remaining IE that are
not matched as semantic mismatches.
E. Implication Analysis
Although BASESPEC automatically discovers mismatches
between the specification and binary implementation, it requires
additional manual analysis to understand impacts of the mis-
matches. When a message is given, the decoder function parses
it and passes the message’s IEs to the corresponding handler
functions for further processing. BASESPEC automatically
analyzes a decoding routine by leveraging a systematic structure
of a message. However, a handler function has complicated se-
mantics (e.g., session management or call control), which makes
10
Benign IEIE withunknown IEIIE with invalid lengthNo MismatchMissing / Invalid MismatchInvalid MismatchUnknown MismatchDecoder FunctionAdditional CheckHandler FunctionFunctionalErrorMemoryCorruptionCorrectHandlingFunctionalErrorCorrectValidation✓XXX✓BaseSpec(automatic)Implication analysis(manual)DropBenign IE①②③④TABLE IV: Summary results of syntactic/semantic comparison and implication analysis. We anonymized the model names upon the request of
the vendor; the names are assigned in an alphabetical ascending order from the latest one (i.e., Model A is the latest one). The mismatches
show that the baseband binary can be non-compliant to the specification, but their implications have to be analyzed (see §V-E).
In Binary
Common Mismatch
Syntactic-only Mismatch
Semantic-only Mismatch
Case Study Results
# of
Missing Unknown
Invalid Missing Unknown
Invalid Missing Unknown
Invalid
F
r
i
r
a
w
m
t
s
e
t
a
L
Model Build Date Msgs IEs
e Model A May/2020 268 1204
Model B May/2020 268 1201
Model C May/2020 268 1201
268 1200
Model D Jun/2020
268 1200
Model E Jun/2020
268 1198
Model F Apr/2020
268 1198
Model G Apr/2020
Model H Apr/2020
263 1096
263 1096
Model I Apr/2020
268 1216
e Model A Apr/2019
268 1213
Model B Feb/2019
r
a
w
Model C Feb/2019
268 1213
m
Model D Mar/2018 269 1189
Model E Mar/2018 269 1189
Model F Apr/2017
269 1189
269 1189
Model G Apr/2017
263 1096
Model H Apr/2016
Model I Apr/2016
263 1096
t
s
e
d
l
O
r
i
F
i-IE n-IE i-IE n-IE i-IE n-IE i-IE n-IE i-IE n-IE i-IE n-IE i-IE n-IE i-IE n-IE i-IE n-IE
35 203
1
35 200
1
35 200
1
32 186
1
32 186
1
32 186
1
32 186
1
1
32
71
32
1
71
35 197
1
35 194
1
35 194
1
32 186
1
32 186
1
1
32 184
32 184
1
71
32
1
1
32
71
38 109
38 109
38 109
41 111
41 111
41 111
41 111
40
39
40
39
38 109
38 109
38 109
41 111
41 111
41 111
41 111
39
40
40
39
52
21
52
21
52
21
52
21
52
21
52
21
21
52
21 118
21 118
52
21
52
21
52
21
52
21