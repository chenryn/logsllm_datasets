然后，可以将 tar 文件导出到另一台计算机，然后使用以下命令导入:
```
$ gunzip -c ubuntu.tar.gz | docker import - ubuntu-sample 
4411d1d3001702b2304d5ebf87f122ef80b463fd6287f3de4e631c50efa01369
```
在另一台机器上运行 Ubuntu 示例映像中的容器后，我们可以发现示例文件完好无损:
```
$ docker images
REPOSITORY                   TAG                 IMAGE ID  CREATED 
IRTUAL SIZE
ubuntu-sample                    latest               4411d1d30017      20 seconds 
go    108.8 MB
$ docker run -i -t ubuntu-sample /bin/bash
root@7fa063bcc0f4:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root run  sample 
bin  srv  sys  tmp  usr  var
```
使用 save，为了在运行 Docker 容器的情况下传输映像，如前面的教程所示，我们可以使用`docker save`命令将映像转换为 tar 文件:
```
$ docker save ubuntu | gzip > ubuntu-bundle.tar.gz
```
现在可以使用`docker load`命令提取`ubuntu-bundle.tar.gz`文件并在另一台机器中使用:
```
$ gunzip -c ubuntu-bundle.tar.gz | docker load
```
从另一台机器中的`ubuntu-bundle`映像运行容器，我们会发现样本文件不存在，因为`docker load`命令将存储零投诉的映像:
```
$ docker run -i -t ubuntu /bin/bash 
root@9cdb362f7561:/# ls 
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root 
run  sbin  srv  sys  tmp  usr  var 
root@9cdb362f7561:/#
```
前面的两个示例都显示了导出和保存命令之间的区别以及它们的用法，以便在不使用 Docker 注册表的情况下跨本地主机传输映像。
## 确保映像签名映像的完整性
从 Docker 1.8 版本开始，包含的功能是 Docker 容器信任，它使用公证将**更新框架** ( **TUF** )集成到 Docker 中，公证是一种开源工具，可提供对任何内容或数据的信任。它允许验证发布者——Docker Engine 使用发布者密钥来验证——并且用户将要运行的映像正是发布者所创建的；它没有被篡改，是最新的。因此，这是一个允许验证映像发布者的选择加入功能。Docker 中央命令- *推*、*拉*、*构建*、*创建*和*运行-* 将对具有内容签名或显式内容哈希的映像进行操作。在将映像推送到存储库之前，内容发布者用私钥对映像进行签名。当用户第一次与映像交互时，与发布者建立信任，然后所有后续交互只需要来自同一发布者的有效签名。该模型类似于我们熟悉的 SSH 的第一个模型。Docker 内容信任使用两个键- **离线键**和**标记键**-它们是在发布者推送映像时第一次生成的。每个存储库都有自己的标记键。当用户第一次运行`docker pull`命令时，使用离线密钥建立对存储库的信任:
*   **离线密钥**:是你的存储库信任的根源；不同的存储库使用相同的离线密钥。该密钥应该保持离线，因为它对某些类别的攻击有优势。基本上，在创建新存储库的过程中需要这个密钥。
*   **标记键**:为发布者拥有的每个新存储库生成。它可以导出并与需要为特定存储库的内容签名的人共享。
下面是通过遵循信任密钥结构提供的保护列表:
*   **防止映像伪造** : Docker 内容信任提供了防止中间人攻击的保护。如果注册表遭到破坏，恶意攻击者无法篡改内容并将其提供给用户，因为每个运行命令都将失败，并显示无法验证内容的消息。
*   **防御回复攻击**:在重放攻击的情况下，之前的有效载荷被攻击者用来欺骗系统。Docker 内容信任在发布映像时利用时间戳密钥，从而提供针对重放攻击的保护，并确保用户接收最新的内容。
*   **防止密钥泄露**:标记密钥由于其在线性质可能会被泄露，并且每次新内容被推送到存储库时都需要它。Docker 内容信任允许发布者对用户透明地旋转泄露的密钥，并有效地将其从系统中移除。
通过将公证集成到 Docker 引擎中，可以实现 Docker 内容信任。想要对任意收集的内容进行数字签名和验证的任何人都可以下载并实现公证。基本上，它是在分布式不安全网络上安全发布和验证内容的实用程序。在下面的序列图中，我们可以看到如何使用公证服务器来验证元数据文件及其与 Docker 客户端的集成的流程。可信集合将存储在公证服务器中，一旦 Docker 客户端有了命名散列(标签)的可信列表，它就可以从客户端到守护程序利用 Docker 远程 API。一旦拉取成功，我们就可以信任注册表拉取中清单和层上的所有内容。
![Ensuring integrity of images - signed images](img/image_05_004.jpg)
Docker 可信运行的序列图
在内部，公证人使用 TUF，一个安全的软件分发和更新的通用设计，往往容易受到攻击。TUF 通过提供一个全面、灵活的安全框架来解决这个普遍存在的问题，开发人员可以将其与软件更新系统集成。通常，软件更新系统是在客户端系统上运行的应用，它获取并安装软件。
让我们开始安装公证人；在 Ubuntu 16.04 上，可以使用以下命令直接安装公证人:
```
$ sudo apt install notary 
Reading package lists... Done 
Building dependency tree        
Reading state information... Done 
The following NEW packages will be installed: 
  Notary 
upgraded, 1 newly installed, 0 to remove and 83 not upgraded. 
Need to get 4,894 kB of archives. 
After this operation, 22.9 MB of additional disk space will be used. 
...
```
否则可以从 GitHub 下载项目，手动搭建安装；构建项目需要安装 Docker Compose:
```
$ git clone https://github.com/docker/notary.git 
Cloning into 'notary'... 
remote: Counting objects: 15827, done. 
remote: Compressing objects: 100% (15/15), done. 
$ docker-compose build 
mysql uses an image, skipping 
Building signer 
Step 1 : FROM golang:1.6.1-alpine 
  $ docker-compose up -d 
$ mkdir -p ~/.notary && cp cmd/notary/config.json cmd/notary/root-ca.crt ~/.notary 
```
在上述步骤之后，将`127.0.0.1`公证服务器添加到`/etc/hosts`中，或者，如果使用了 Docker 机器，将`$(docker-machine ip)`添加到公证服务器中。
现在，我们将推送之前创建的`docker-cowsay`映像。默认情况下，内容信任被禁用；它可以在`DOCKER_CONTENT_TRUST`环境变量的帮助下启用，这将在本教程的后面进行。目前，操作内容信任的命令如下所示:
*   推
*   建设
*   创造
*   拉
*   奔跑
我们将用存储库名称标记映像:
```
$ docker images
REPOSITORY                  TAG                 IMAGE ID
CREATED             VIRTUAL SIZE
test/cowsay-dockerfile      latest              c1014a025b02        33
seconds ago      126.9 MB
debian                      wheezy              fbe34672ed6a        2
weeks ago         84.92 MB
vkohli/vca-iot-deployment   latest              35c98aa8a51f        8
months ago        501.3 MB
vkohli/vca-cli              latest              d718bbdc304b        9
months ago        536.6 MB
$ docker tag test/cowsay-dockerfile username/cowsay-dockerfile
$ docker push username/cowsay-dockerfile:latest
The push refers to a repository [docker.io/username/cowsay-dockerfile]
bbb8723d16e2: Pushing 24.08 MB/42.01 MB
```
现在，让我们检查公证人是否有这张映像的数据:
```
$ notary -s https://notary.docker.io -d ~/.docker/trust list docker.io/vkohli/cowsay-dockerfile:latest 
* fatal: no trust data available
```
正如我们在这里看到的，没有信任数据让我们启用`DOCKER_CONTENT_TRUST`标志，然后尝试推送映像:
```
$ docker push vkohli/cowsay-dockerfile:latest 
The push refers to a repository [docker.io/vkohli/cowsay-dockerfile] 
bbb8723d16e2: Layer already exists  
5f70bf18a086: Layer already exists  
a25721716984: Layer already exists  
latest: digest: sha256:0fe0af6e0d34217b40aee42bc21766f9841f4dc7a341d2edd5ba0c5d8e45d81c size: 2609 
Signing and pushing trust metadata 
You are about to create a new root signing key passphrase. This passphrase 
will be used to protect the most sensitive key in your signing system. Please 
choose a long, complex passphrase and be careful to keep the password and the 
key file itself secure and backed up. It is highly recommended that you use a 
password manager to generate the passphrase and keep it safe. There will be no 
way to recover this key. You can find the key in your config directory. 
Enter passphrase for new root key with ID f94af29:
```
正如我们在这里看到的，第一次推送时，它会询问密码以便对标记的映像进行签名。
现在，我们将从公证人那里获得之前推送的最新映像的信任数据:
```
$ notary -s https://notary.docker.io -d ~/.docker/trust list docker.io/vkohli/cowsay-dockerfile:latest
NAME                                 DIGEST                                SIZE 
BYTES)    ROLE
----------------------------------------------------------------------------------
-------------------
latest     0fe0af6e0d34217b40aee42bc21766f9841f4dc7a341d2edd5ba0c5d8e45d81c 
1374           targets
```
借助前面的例子，我们清楚地了解了公证人的工作以及 Docker 内容信任。
# Docker 可信注册(DTR)
DTR 在内部和虚拟私有云中提供企业级 Docker 映像存储，以提供安全性并满足法规遵从性。DTR 运行在 Docker **通用控制平面** ( **UCP** )之上，它可以安装在内部或虚拟私有云之上，借助它，我们可以将 Docker 映像安全地存储在防火墙之后。
![Docker Trusted Registry (DTR)](img/image_05_005.jpg)
DTR 在 UCP 节点上运行
DTR 最重要的两个特点如下:
*   **Image management**: It allows the user to store Docker images securely behind firewall and DTR can be easily made as part of the continuous integration and delivery process in order to build, run, and ship applications.
    ![Docker Trusted Registry (DTR)](img/image_05_006.jpg)
    DTR 截图
*   **Access control and built-in security**: DTR provides authentication mechanism in order to add users as well as integrates with **Lightweight Directory Access Protocol** (**LDAP**) and Active Directory. It supports **role-based authentication** (**RBAC**) as well, which allows you to assign access control policies for each user.
    ![Docker Trusted Registry (DTR)](img/image_05_007.jpg)
    DTR 的用户身份验证选项
# Docker 通用控制平面
Docker UCP 是企业级集群管理解决方案，允许您从单个平台管理 Docker 容器。它还允许您管理数千个节点，这些节点可以通过图形用户界面进行管理和监控。
UCP 有两个重要组成部分:
*   **控制器**:管理集群，保持集群配置
*   **节点**:为了运行容器，可以向集群中添加多个节点
UCP 可以使用沙盒安装安装在 Mac OS X 或 Windows 系统上使用 **Docker 工具箱**。安装由一个 UCP 控制器和一个或多个主机组成，这些主机将使用 Docker 工具箱作为节点添加到 UCP 集群中。
Docker 工具箱的一个先决条件是，需要使用 Docker 官方网站上提供的安装程序为 Mac OS X 和 Windows 系统安装工具箱。
![Docker Universal Control Plane](img/image_05_008.jpg)
Docker 工具箱安装
让我们开始部署 Docker UCP:
1.  After the installation, launch the Docker Toolbox terminal:
    ![Docker Universal Control Plane](img/image_05_009.jpg)
    Docker 快速启动终端
2.  使用`docker-machine`命令和`virtualbox`创建名为`node1`的虚拟机，该虚拟机将充当 UCP 控制器:
    ```
     $ docker-machine create -d virtualbox --virtualbox-memory 
            "2000" --virtualbox-disk-size "5000" node1 
            Running pre-create checks... 
            Creating machine... 