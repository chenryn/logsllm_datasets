电子邮件。并发人员可以使用自己已经习惯并且熟悉的界面（他的
邮件阅读器）来查看变更，如果发现可能存在问题的地方，可以回
复邮件，可以只引用自己关注的那部分变更，所做的回复会自动进
入到一个讨论线索中，通过这个讨论线索可以把回复意见与其他人
对这个变更的评论联系在一起。这样，利用邮件中已经存在的数据
管理惯例的优点，人们（其他程序员）能够方便地跟踪任何一个变
更所产生的后果。
234
---
## Page 236
但是，我作为项目组成员参与的另外一个项目，GNUEmacsI7L，做
事的方法则有一点不同。部分是由于历史原因，部分是由于它的版
本控制系统I的工作方式，每次提交到GNUEmacs时都产生两个提
交邮件：一个邮件显示的是日志信息，另一个邮件包括dif本身。
日志信息邮件是这样的：
From:JuanmaBarranquero
Subject:[Emacs-commit]emacs/lisp info.el
To:PI:EMAIL
Date:Sat,08 Mar 2008 00:09:29 +0000
CVSROOT:/cvsroot/emacs
Module name:emacs
Changes by:Juanma Barranquero08/03/08 00:09:29
Modified files:
lisp:info.el
Log message:
(bookmark-make-name-function, bookmark-get-bookmark-record):Pacify
byte-compiler.
CVSWeb URLs:
http:/cvs.savannah.gnu.org/viewcvs/emacs/lisp/info.el?cvsroot=emacs &
r1=1.519&r2=1.520
Dif邮件是这样的：
From:Juanma Barranquero
Subject:[Emacs-diffsJChanges to emacs/lisp/info.el,v
235
---
## Page 237
To:PI:EMAIL
Date:Sat,08 Mar 2008 00:09:29 +0000
CVSROOT:/cvsroot/emacs
Module name:emacs
Changes by:Juanma Barranquero08/03/08 00:09:29
Index:info.el
RCS file:/cvsroot/emacs/emacs/lisp/info.el,v
retrieving revision 1.519
retrieving revision 1.520
diff-u -b -r1.519 -r1.520
--- info.el 7 Mar 2008 19:31:59-0000 1.519
+++ info.el 8 Mar 2008 00:09:29-0000 1.520
@@-3375,6+3375,8@@
(defvar tool-bar-map)
(defvar bookmark-make-record-function)
+ (defvar bookmark-make-name-function)
+ (declare-function bookmark-get-bookmark-record"bookmark"
(bookmark))
; Autoload cookie needed by desktop.el
"##autoload
236
---
## Page 238
把这两个邮件合在一起，就包含了与我前面展示的Subversion项目
中一个邮件中相同的信息。但问题是，需要合在一起才行。但现在
两个邮件不是合在一起的，它们是分并的。虽然程序员提交的是一
个变更1，但是没有哪一个邮件包含了评审人在理解和评审那个变
更时所需的所有内容。为了评审变更，需要日志信息，这样才能理
解变更的大致意图，同时还需要dif，这样才能看到实际的代码编
辑是否与变更意图匹配。
如果人们不能在一个地方同时看到这两样东西，他们对变更做出评
审的可能性就小多了。
从我自己对这两个项目所做的非常严谨的LI-调查就能看出来。在
2008年2月，在Subversion开发列表中有207个独特的线索（来自908
条信息）。其中，50个是对提交邮件的后续跟进线索。通过一个合
理的度量，24%的开发列表关注的是对提交所做的评审（或者如果
你想数一数信息条数而不是线索数量，那么应当是比5%多一点）。
注意，Subversion提交邮件的后续跟踪通过“回复至"标题头自动转到
了主开发列表，所以开发列表适于使用的数据集。
同时，在2008年2月，Emacs升发列表有491个单独的线索（来自
3158条信息），其中评审邮件的数量一目了然，是0条。
我对这个结果感到非常吃惊，我放松了检测评审邮件的过滤标准并
再次扫描。这次找到的邮件最多也就是49个。但是在检查这49个邮
件时发现，大多数邮件似乎都是对发布在其他地方的列表中的补丁
进行的评审，而不是根据提交邮件来进行评审。只有两个能够确定
为评审邮件。但是，就算我们把这49个都算上（可以肯定地说，这
样的统计过于乐观了），也最多只有10%的并发列表量是提交评审
（如果我们数的是信息数而不是线索数，那就是1.5%）。因为
Emacs没有自动将提交邮件的后续跟踪转到主并发列表中，我还搜
索了提交列表和dif列表资料。我发现在2月份没有后续跟踪记录，
在3月份有两条，都是由我发出的。
这两个项目在它们的并发列表中提交率和流量水平都不一样。但是
我们可以通过问题的另一方面，也就是提交的邮件中得到评审的比
例来部分地验证这个结论。在2008年2月，Subversion有274个独特
的提交，Emacs是807个[L]。这样，Subversion的提交邮件的评审线
索的比例大约是18%，而Emacs是在0%～6%之间（但是如果真的只
有两个真正的评审邮件，比例可能很低，大约0.2%）。
237
---
## Page 239
这里出现了一些情况，某些因素使得一个项目比另外一个项目做同
行评审的可能性要大得多。这是什么原因呢？
当然，我无法证明，但是我想事实很简单，每个Emacs的提交是放
在两个单独的邮件中的：一个是日志信息，另外一个是dif。如果
不做大量的客户化操作，是没有办法在正常的邮件阅读界面中同时
查看日志信息和dif的。也就是说，没有一个方便的方式来评审变
更。并不是无法进行评审，而且评审也不难。既不是无法完成，也
不是很滩：如果想做，我可以评审所有的Emacs提交，其他开发人
员也是应当可以的。但是每次评审都需要在两个邮件之间来回切
换，或者是在短一些的邮件中点击URL并等待加载页面。实际上会
很麻烦，我可不想受这份罪。显然，其他人也都不愿意。
有一个毫不夸张的经验：对一个普通任务增加几秒钟的额外开销足
以让这个任务变得不再普通。你们的团队不是懒人，只是普通人。
如果把灯的并关放到肩膀的高度，每个人在离并房间时都会乐于关
闭电源，但是如果把并关放到膝盖的高度，你们的电费可就要一个
劲儿地往上涨了。
项目不做代码评审的成本是什么？我认为相当高。看看Subversion
在那个月的提交，55表明它们是对前一个具体提交内容的后续处
理，35是一个特殊标记（参见
http://subversion.tigris.org/hacking.html#crediting），表明它们修复的
是由其他人发现的问题。根据我在这个项目的经验，这类建议通常
都是同行评审的结果。这样，在Subversion中所做的大约12%～20%
的提交是由于对先前提交所做的评审而产生的。对于Emacs，我不
大容易给出一个可供比较的数字，因为Emacs不像Subversion那样有
一个标准化的规则将变更归于某人。但是我观察了Emacs的开发有
很长一段时间了，虽然很显然有一定比例的提交是由于先前提交的
评审而产生的（或者只是在做其他工作时遇到的有问题的代码），
但我认为比例达不到12%～20%。
此外，及时地对提交进行评审的好处不仅仅是用未来代码变更来度
量的。提交评审保持了大家的士气，提高了人们的技能（因为他们
都能够相互学习），增强了团队一起工作的能力（因为每个人都习
惯于接受其他人有建设性的批评），并且对参与项目形成了激励
（因为评审是公并的，所以鼓励其他人做同样的事情）。由于一个
细小的用户界面选择而剥夺了团队的这些好处，是一个让人付出很
大代价的错误。
238
---
## Page 240
人们成群地离开了：两个翻译界面的故事
在2005年，我写了一本关于管理开源项目的书I21，那本书的很大
一部分内容就是本章要讲述的内容：设置工具，让团队更有效。
在书出版了一段时间后，整本书都放到了网上，志愿者并始出现
了，将那本书翻译成其他语言。我对此自然是非常高兴的，而且想
要尽可能地帮助他们，于是我建立了一些技术基础设施，让译者们
能够协同工作。每一种目标语言一般都有不止一位志愿者参加翻译
工作，让某种语言的译者们一起工作是再正常不过的想法了。此
外，翻译过程的某些方面对于所有语言都是一样的，所以让不同语
言的译者们都能够看到相互的工作就更有意义了。
从理论上看非常好，不是吗？但是实际发生的事情却是我没有能够
理解团队对于工具的需求，这给我留下了深刻的教训。
我给他们的是什么
我为译者们建立的基础结构基本上就是把我自已在写作那本书时使
用的结构做了一些扩展：一组XML主文件存储在Subversion存储库
中，写到DocBookDTD中，然后使用一些由Makefile驱动的命令行
程序转换为输出格式。
让我拿书中一段内容解释一下：
我用XMIL格式写了一本书，虽然工作时有点笨拙，但是很容易产生
网页和可打印的书的形式。例如，下面是第3章的并头部分，在最
初的XML中是这样的：
第3章技术基础设施
自由软件项目依赖于选择性捕获和信息集成的技术，对这
些技术的使用越是熟练，并说服别人去使用这些技术，你的项目就
越成功。随着项目的成长，这一点愈发正确。好的信息管理系统应
该能够防正开源项目在布鲁克法则的重压下崩塌，摘自《人月神话》，1975。参见和,
也就是说向一个已经延期的项目增加人力，只能使项目延期更多。
佛雷德·布鲁克观察到，项目的复杂性同参与人员数量的平方成正比....
在经过转换器运行后，变成如下的网贞输出格式：
第3章技术基础设施
自由软件项目依赖于选择性捕获和信息集成的技术，对这些技术的
使用越是熟练，并说服别人去使用这些技术，你的项目就越成功。
随着项目的成长，这一点愈发正确。好的信息管理系统应该能够防
止开源项目在布鲁克法则的重压下崩塌[8]，也就是说向一个已经延
期的项目增加人力，只能使项目延期更多。佛雷德·布鲁克观察到，
项目的复杂性同参与人员数量的平方成正比....L]
很容易看出两段文字是相似的，但是毫无疑问，XML主文件不容易
阅读。它对我来说不成问题：虽然使用XML不够方便，但是能够方
便地产生不同类型的输出，相比之下使用XMIL还是值得的。
我使用了叫做Subversion的版本控制系统来管理XML文件的集合，