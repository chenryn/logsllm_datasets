PostgreSQL plan cache management
 if (!customplan)
 {
 if (CheckCachedPlan(plansource)) // 判断generic plan是否存在.
 {
 /* We want a generic plan, and we already have a valid one */
 plan = plansource->gplan; // 如果generic plan存在, 则直接重复使用.
 Assert(plan->magic == CACHEDPLAN_MAGIC);
 }
 else
 {
 /* Build a new generic plan */
 plan = BuildCachedPlan(plansource, qlist, NULL); // 不存在则创建一个generic plan.
 /* Just make real sure plansource->gplan is clear */
 ReleaseGenericPlan(plansource);
 /* Link the new generic plan into the plansource */
 plansource->gplan = plan;
 plan->refcount++;
 /* Immediately reparent into appropriate context */
 if (plansource->is_saved)
 {
PostgreSQL plan cache management
 /* saved plans all live under CacheMemoryContext */
 MemoryContextSetParent(plan->context, CacheMemoryContext);
 plan->is_saved = true;
 }
 else
 {
 /* otherwise, it should be a sibling of the plansource */
 MemoryContextSetParent(plan->context,
 MemoryContextGetParent(plansource->context));
 }
 /* Update generic_cost whenever we make a new generic plan */ // 更新generic plan的成本.
 plansource->generic_cost = cached_plan_cost(plan, false);
 /*
 * If, based on the now-known value of generic_cost, we'd not have
 * chosen to use a generic plan, then forget it and make a custom
 * plan. This is a bit of a wart but is necessary to avoid a
PostgreSQL plan cache management
 * glitch in behavior when the custom plans are consistently big
 * winners; at some point we'll experiment with a generic plan and
 * find it's a loser, but we don't want to actually execute that
 * plan.
 */
 customplan = choose_custom_plan(plansource, boundParams); // 把prepared statement参数值以及plan cache传入重新估算是否选择custom plan.
 /*
 * If we choose to plan again, we need to re-copy the query_list,
 * since the planner probably scribbled on it. We can force
 * BuildCachedPlan to do that by passing NIL.
 */
 qlist = NIL;
 }
 }
PostgreSQL plan cache management
 if (customplan)
 {
 /* Build a custom plan */
 plan = BuildCachedPlan(plansource, qlist, boundParams);
 /* Accumulate total costs of custom plans, but 'ware overflow */
 if (plansource->num_custom_plans total_custom_cost += cached_plan_cost(plan, true); // 更新total custom plan cost以及custom plan次数.
 plansource->num_custom_plans++;
 }
 }
PostgreSQL plan cache management
 /* Flag the plan as in use by caller */
 if (useResOwner)
 ResourceOwnerEnlargePlanCacheRefs(CurrentResourceOwner);
 plan->refcount++;
 if (useResOwner)
 ResourceOwnerRememberPlanCacheRef(CurrentResourceOwner, plan);
 /*
 * Saved plans should be under CacheMemoryContext so they will not go away
 * until their reference count goes to zero. In the generic-plan cases we
 * already took care of that, but for a custom plan, do it as soon as we
 * have created a reference-counted link.
 */
 if (customplan && plansource->is_saved)
 {
 MemoryContextSetParent(plan->context, CacheMemoryContext);
 plan->is_saved = true;
 }
 return plan;
 }
PostgreSQL plan cache management
 plan cache数据结构.
 typedef struct CachedPlanSource
 {
 int magic; /* should equal CACHEDPLANSOURCE_MAGIC */
 Node *raw_parse_tree; /* output of raw_parser() */
 const char *query_string; /* source text of query */
 const char *commandTag; /* command tag (a constant!), or NULL */
 Oid *param_types; /* array of parameter type OIDs, or NULL */
 int num_params; /* length of param_types array */
 ParserSetupHook parserSetup; /* alternative parameter spec method */
 void *parserSetupArg;
 int cursor_options; /* cursor options used for planning */
 bool fixed_result; /* disallow change in result tupdesc? */
 TupleDesc resultDesc; /* result type; NULL = doesn't return tuples */
 MemoryContext context; /* memory context holding all above */
 /* These fields describe the current analyzed-and-rewritten query tree: */
 List *query_list; /* list of Query nodes, or NIL if not valid */
 List *relationOids; /* OIDs of relations the queries depend on */
 List *invalItems; /* other dependencies, as PlanInvalItems */
 struct OverrideSearchPath *search_path; /* search_path used for
 * parsing and planning */
PostgreSQL plan cache management
 MemoryContext query_context; /* context holding the above, or NULL */
 /* If we have a generic plan, this is a reference-counted link to it: */
 struct CachedPlan *gplan; /* generic plan, or NULL if not valid */
 /* Some state flags: */
 bool is_oneshot; /* is it a "oneshot" plan? */
 bool is_complete; /* has CompleteCachedPlan been done? */
 bool is_saved; /* has CachedPlanSource been "saved"? */
 bool is_valid; /* is the query_list currently valid? */
 int generation; /* increments each time we create a plan */
 /* If CachedPlanSource has been saved, it is a member of a global list */
 struct CachedPlanSource *next_saved; /* list link, if so */
 /* State kept to help decide whether to use custom or generic plans: */
 double generic_cost; /* cost of generic plan, or -1 if not known */
 double total_custom_cost; /* total cost of custom plans so far */
 int num_custom_plans; /* number of plans included in total */
 } CachedPlanSource;
PostgreSQL plan cache management
 prepared statement接口.
 http://www.postgresql.org/docs/9.3/static/libpq-exec.html
 同步调用
 PGresult *PQprepare(PGconn *conn,
 const char *stmtName,
 const char *query,
 int nParams,
 const Oid *paramTypes);
 PGresult *PQexecPrepared(PGconn *conn,
 const char *stmtName,
 int nParams,
 const char * const *paramValues,
 const int *paramLengths,
 const int *paramFormats,
 int resultFormat);
PostgreSQL plan cache management
 异步调用
 int PQsendPrepare(PGconn *conn,
 const char *stmtName,
 const char *query,
 int nParams,
 const Oid *paramTypes);
 int PQsendQueryPrepared(PGconn *conn,
 const char *stmtName,
 int nParams,
 const char * const *paramValues,
 const int *paramLengths,
 const int *paramFormats,
 int resultFormat);
 PGresult *PQgetResult(PGconn *conn);
PostgreSQL plan cache management
 例子:
 跟踪choose custom plan 以及query parser, rewirte, plan , executor.
 stap -D MAXSTRINGLEN=99999 -e '
 global cnt;
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__start")
 {
 println(pn(), user_string($arg1), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__parse__start")
 {
 println(pn(), user_string($arg1), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__rewrite__start")
 {
 println(pn(), user_string($arg1), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__plan__start")
 {
 println(pn(), pid())
 }
PostgreSQL plan cache management
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__execute__start")
 {
 println(pn(), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").function("choose_custom_plan@/opt/soft_bak/postgresql-9.3.3/src/backend/utils/cache/plancache.c")
 {
 cnt++;
 printf("choose custom plan called %d\n %s\n", cnt, $$vars$$)
 }
 '
 create table test(id int, info text);
 insert into test select 1,repeat(random()::text,10) from generate_series(1,500000);
 insert into test values (2,'test');
PostgreSQL plan cache management
 psql始终使用exec_simple_query接口, 不会跟踪到choose custom plan, 因为psql没有使用prepared statement.
 digoal=# select count(*) from test where id=1;
 count
 --------
 500000
 (1 row)
 digoal=# select count(*) from test where id=1;
 count
 --------
 500000
 (1 row)
 digoal=# select count(*) from test where id=2;
 count
 -------
 1
 (1 row)
PostgreSQL plan cache management
 未跟踪到choose custom plan, 没有plan cache.
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__start")select count(*) from test where id=1;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__parse__start")select count(*) from test where id=1;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__rewrite__start")select count(*) from test where id=1;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__plan__start")2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__execute__start")2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__start")select count(*) from test where id=1;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__parse__start")select count(*) from test where id=1;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__rewrite__start")select count(*) from test where id=1;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__plan__start")2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__execute__start")2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__start")select count(*) from test where id=2;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__parse__start")select count(*) from test where id=2;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__rewrite__start")select count(*) from test where id=2;2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__plan__start")2624
 process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__execute__start")2624
PostgreSQL plan cache management
 使用prepare语句, 跟踪到choose custom plan, 匹配前面的generic plan生成算法.
 digoal=# prepare p(int) as select count(*) from test where id=$1;
 PREPARE
 digoal=# execute p(2); -- execute p(2) 除了使用psql的简单调用外, 还会用到prepared statement接口
 count
 -------
 1