(unencrypted) HTTP connections. To declare a practical
success, we also require that the attack does not signiﬁcantly
degrade performance of the source protocol.
Despite the clear importance of protocol misidentiﬁcation
attacks, we are unaware of any prior work that evaluate
the DPI systems in our test set (or other similar systems).
See Section 7 for discussion of related settings and other
potential approaches for forcing protocol misidentiﬁcation
that are diﬀerent from ours.
3. FORMAT-TRANSFORMING
ENCRYPTION
All of the open-source DPI systems in our evaluation set
use membership in a regular language — either explicitly
with regexes or implicitly by logic coded in languages such
as C/C++ — to inform application-layer protocol classiﬁ-
cation. We therefore target mechanisms which enable an
attacker to force protocol misidentiﬁcation against any DPI
that relies on regex checks. Note that this goal is more ag-
gressive than merely defeating the systems in our corpus
(but we will do that as well!), and we expect our approach
will work against any currently deployed regex-based DPI
system.
Our main idea is to build DPI resistance into encryption
schemes. The key technological enabler, which we explain
in the remainder of this section, is augmenting the normal
encryption interface to take a regex as an input. The pur-
pose of this regex is to specify the format of ciphertexts:
this means that ciphertexts, when taken as a string over
the appropriate alphabet, are guaranteed to match against
the speciﬁed regex. We call the resulting primitive format-
transforming encryption (FTE). In turn, we show how to
use FTE as a component within a record layer that han-
dles streams of messages from an arbitrary source proto-
col. Through proper choice of regex, ciphertexts produced
by this record layer –which are actually carrying the source
protocol– will be classiﬁed as messages from another proto-
col (of our choosing) by the DPI.
Our FTE record layer will be used for two purposes. First,
we will build an FTE (single-hop) proxy system by combin-
ing the FTE record layer with SOCKS in a straightforward
way. We will then use it to support our hypothesis that the
regex-based DPI used in practice is fundamentally vulnera-
ble to misclassifcation attacks. We do this by showing how
to use the FTE proxy to force protocol misidentiﬁcation by
the entire set of DPI systems and with respect to a variety of
target protocols. We also show that doing so has essentially
negligible overhead for most relevant regular languages. We
believe these results suggest that DPI systems must move
to more advanced mechanisms (discussed in Section 7) in
settings with adversarial users.
Our second purpose, empowered by the ease with which it
forces protocol misidentiﬁcation and the high performance
it obtains, will be to incorporate the FTE record layer into
Tor for use in circumventing censorship. We discuss this
more in Section 6.
Figure 2: Sender-side (left) and receiver-side (right) record-layer ﬂow. We discuss the various modules in the text.
3.1 FTE via Encrypt-then-Unrank
An FTE scheme is a triple of algorithms: key genera-
tion, encryption and decryption. Key generation works as
in conventional encryption, outputting a randomly chosen
symmetric key K. Encryption Enc takes inputs of a key K,
a format F, and a message M . It can be randomized, state-
ful, or deterministic, and always outputs a ciphertext C or a
distinguished error symbol ⊥. Decryption Dec takes inputs
of a key K, a format F, and a ciphertext C. It outputs a
message or ⊥. The format F speciﬁes a set L(F) called the
language of F. The requirement is that any C output by
Enc must be a member of L(F).
FTE is a related to format-preserving encryption (FPE),
ﬁrst formalized by Bellare, Ristenpart, Rogaway, and Ste-
gers (BRRS) [5]. FPE is used in the context of in-place
encryption of credit-card numbers (or other records) within
databases. It likewise uses formats, but requires that both
plaintext messages and ciphertexts be members of the same
format-speciﬁed language.
We desire FTE schemes that support formats described
by regexes. This will allow easy “programming” of formats
and endows FTE with the same expressive power as regex-
based DPI. To do so, we start by following an approach
similar to one used by BRRS. Loosely speaking, to imple-
ment Enc(K,F, M ) for a regular expression F we: (1) en-
crypt M using a standard authenticated encryption scheme
to obtain an intermediate ciphertext Y ; (2) treat Y as an in-
teger in Z|L(F )| (the set of integers from 0 to the size of the
language minus one); and (3) apply an encoding function
unrank : Z|L(F )| → L(F). To be able to decrypt, we require
that unrank is in fact a bijection with eﬃciently computable
inverse rank : L(F) → Z|L(F )|.
The key algorithmic challenge is implementing rank and
unrank eﬃciently. These associate to each string in the lan-
guage its rank, i.e., its position in a total ordering of the
language. The notion of ranking was ﬁrst explored by Gold-
berg and Sipser [17] in the context of language compres-
sion. Goldberg and Sipser also gave an eﬃcient way to rank
a regular language when that language is represented by
a deterministic ﬁnite automaton (DFA). BRRS used this
for an (unimplemented) FPE scheme for arbitrary regular
languages encoded as DFAs, but they also emphasize that,
asymptotically speaking, there is provably no way to give ef-
ﬁcient rank and unrank functions starting just from a regex.
Standard tools exist for converting from a regex to an non-
deterministic ﬁnite automaton (NFA) and from there to a
DFA (see Section 5), but the second step potentially incurs
an exponential blow-up in state size. We observe that this
worst-case behavior is not an issue for FTE, in part because
the kinds of regexes used by DPIs are themselves designed
explicitly to avoid the worst-case blowup.
Our implementation uses the time-space tradeoﬀ of Gold-
berg and Sipser to support more eﬃcient runtime perfor-
mance by precomputing tables that allow (un)ranking of all
strings x ∈ L with |x| ≤ n. (Appendix A details the al-
gorithms.) The complexity of this precomputation is O(n·
|Σ|·|Q|), where Σ is the underlying alphabet and Q is the
state set for the DFA implementing the FTE regular ex-
pression. Given these tables, the complexity of rankL and
unrankL are Ω(n) and O(n·|Σ|), where n is the length of the
output of rankL or input of unrankL, respectively. We can
also formalize all of the above and prove that the Encrypt-
then-Unrank approach preserves the message conﬁdentiality
and authenticity security of the underlying authenticated
encryption scheme. Due to space constraints, we omit de-
tails of the optimizations and formal treatment, and instead
move on to discuss how we build a full FTE record layer.
3.2 FTE Record Layer
In order to transform arbitrary TCP streams, we need ad-
ditional “record layer” machinery to buﬀer, encode, unam-
biguously parse, and decode streams of FTE messages. In
Figure 2 we give an overview of the processes by which plain-
texts are transformed into FTE ciphertexts, and vice versa.
We assume that sender and receiver share a pre-established
set of keys, possibly derived from a single shared master
key. Our record layer also assumes an underlying, reliable
network transport protocol, e.g. TCP.
Implementing FTE formats. We will ﬁnd it useful to
specify in our formats more than just a regular expression.
Thus a format F for the record layer is as a tuple (R, k, m):
a regular expression R, a number k > 0 that speciﬁes the
length of strings to use from the language L(R), and an
integer m ≥ 0 that controls the number of unformatted ci-
phertext bits to append to the end of the FTE-encoded mes-
sage. The reason to use a speciﬁc length k is that it is an
expedient way of rendering easy-to-parse FTE ciphertexts,
while the value m is used to cheaply enable more capacity in
CTRK1( |M| || M )HMACK2(.)TsplitunrankFTECiphertextEncryptedRecordC||XXC'1C'2C'2format(R,k,m)FTECiphertextsM  or ctxt bitsC'1XAE decryptionlogicrankrecvrbufferlogic|M|format(R,k,m)cases where the desired language is, in fact, any string with
a preﬁx in L(R). All told, for F = (R, k, m) the language
becomes L(F) = (L(R)∩ Σk)(cid:107) Σ≤m where Σ is the alphabet
underlying R. For simplicity we assume Σ = {0, 1} in what
follows, but in implementations one will typically use larger
alphabets. In our implementation we use values m = 218
and k = 210, unless otherwise speciﬁed.
FTE Sender. See the left diagram in Figure 2 and consider
a format F = (R, k, M ). Let Lk(R) = L(R) ∩ {0, 1}k be
the k-bit slice of L(R) we will use and t = (cid:98)log2(|Lk(R)|)(cid:99)
be that slice’s capacity (the number of bits one can encode
using the slice). The ﬁrst action on the sender’s side is to
prepare an encrypted record using a secret key K. From
a plaintext message buﬀer, grab a plaintext message M of
length at most |M| < m. Then form a plaintext record,
containing an encoding of |M| followed by M . The record
is then encrypted using a standard, stateful authenticated-
encryption (AE) scheme with K to produce a ciphertext C.
We assume that |C| is deﬁned solely by |M|, which is true for
AE schemes used in practice. We also pad M , if required, to
ensure that |C| ≥ t. Our implementation uses CTR mode
over AES and then authenticates the resulting ciphertext
with HMAC-SHA256.
The encrypted record C is passed to the split module, and
appended to an internal buﬀer maintained by split. The
job of split is to produce two strings: one to be passed to
unrank for formatting, and one that will be passed along
In particular, split takes up to t + m bits (and at
as-is.
least t bits) from the front of the buﬀer, which we refer to
as C(cid:48). Note that C(cid:48) may be a full AE ciphertext, part of
one, or include bits from multiple ciphertexts. Then split
2| ≤ m.
partitions C(cid:48) into C(cid:48)
1 and C(cid:48)
The ﬁrst portion C(cid:48)
1 is forwarded to unrank, which produces
a formatted string X ∈ Lk(R). Finally, the concatenation
X (cid:107) C(cid:48)
2 becomes the sender’s FTE ciphertext which can then
be transmitted.
1| = t and |C(cid:48)
2 with |C(cid:48)
FTE Receiver. Referring to the right-hand diagram in
Figure 2, the receiver buﬀer logic is responsible for man-
aging the stream of incoming FTE ciphertexts. One issue
here, is that there are no explicit markers to demarcate FTE-
encoded ciphertext boundaries. We therefore must take care
to ensure that the receiver can correctly decrypt given that
its buﬀer may contain multiple contiguous ciphertexts. To
do so, the receiver takes advantage of the fact that the sender
used a ﬁxed2 slice Lk(R). As soon as it has the ﬁrst k
FTE ciphertext bits in its buﬀer, it treats these as a string
X ∈ Lk(R) and applies rank(X) to recover C(cid:48)
(Should
1.
X /∈ Lk(R) decryption should abort.) It then feeds C(cid:48)
1 to
the AE decryption algorithm in order to retrieve (cid:96) = |M|
and possibly some initial bits of a message M . (Those latter
message bits should not yet be released to higher layers.)
Note that this means that the AE scheme must be able to
perform incremental decryption and that it should not be
vulnerable to attacks (c.f., [1]) that abuse use of the length
ﬁeld before ensuring integrity. CTR mode plus HMAC pro-
vides these properties.
Given (cid:96) the receiver now knows how many more bits of AE
ciphertext are expected. From here it can remove the next
up to m bits of ciphertext from the input buﬀer, and then
go back into a state where it treats the subsequent k bits
2One could instead rely on L(R) being preﬁx-free, but we
found using ﬁxed slices simpler and suﬃcient.
in the buﬀer as a string in Lk(R), applying rank as above,
and so on. When it retrieves a full AE ciphertext, it ﬁnishes
decryption, veriﬁes integrity of the ciphertext, and only now
releases the buﬀered message bits up to the application.
Regex negotiation. One unique feature of FTE is the
ability to quickly change regexes on the ﬂy. We would like
to be able to provide in-band negotiation of formats, but
since all data sent on the wire must be formatted to pass DPI
checks, it is not possible to negotiate regexes in the clear. We
address this limitation by allowing the client/server to agree
upon regexes for the duration of a TCP connection assuming
they support some initial large set of possible regexes.
In more detail, we assume the client and server have a
shared, ordered list of FTE formats (F1, . . . ,Fn), and still
assume the client and server have negotiated cryptographic
keys out-of-band. For each TCP connection, the client de-
termines the FTE format Fi it wishes to use for client-to-
server messages, and the Fj it wishes to use for server-to-
client message. Then, the client constructs the message
M ← (cid:104)i(cid:105) (cid:107) (cid:104)j(cid:105), encrypts M as a distinguished negotiate
message-type, designated by the value of a ﬁrst (reserved)
byte of the plaintext, encodes it with Fi, then sends it to
the server.
When the server receives an initial message from the client
it iterates through its list of formats, attempting to decode
the message with each of the FTE formats. Once it encoun-
ters a successful decryption, it evaluates the message and
then uses for the session Fi for client-server messages and
Fj for server-client messages. The server ﬁnalizes the ne-
gotiation by responding to the client with a distinguished
negotiate_acknowledge message.
We can improve on the na¨ıve receiver-side implementa-
tion of this procedure by having an implementation of rank
that contains special checks that short-circuit evaluation to
terminate early in cases when the string being ranked is not
accepted by the DFA. This enables the server to quickly ex-
clude certain formats, thereby making it possible to support
dozens of formats.
4. PROTOCOL MISCLASSIFICATION
In this section, we experiment with three strategies for
providing regexes used with our FTE record layer: regexes
extracted from open-source DPI systems (4.1); regexes pro-
grammed manually (4.2); and regexes automatically learned
from samples of target protocol traﬃc (4.3). We will always
use a pair of formats: one for upstream (client-to-server)
and one for downstream (server-to-client) communications.
We will then use our FTE record layer to assess the vul-
nerability of the DPI systems in our evaluation to protocol-
misidentiﬁcation attacks.
Recall that a source protocol is the application-layer pro-
tocol whose connections the attacker wants to have misclas-
siﬁed. We explored HTTP [16], HTTPS [13], secure copy
(SCP) [54], and Tor [14] as source protocols, and found that
the choice of source protocol does not inﬂuence our results.
We therefore focus our discussion primarily on HTTP(S).
For each regex generation strategy we explore three target
protocols: HTTP [16], SSH [54], and SMB [29]. The latter
is a proprietary protocol designed by Microsoft to support
sharing of resources, such as ﬁles and printers, over networks.
We also explored other target protocols, including SIP [37]
and RTSP [38], but limit our discussion here to the prior
three as the results for the others were the same. Indeed,
we suspect FTE can be successfully used for almost any
target protocol.
Experimental testbed. We implemented our FTE record
layer as a library that can be used to relay arbitrary data
streams. More implementation details appear in Section 5.
In our evaluation we use it in the following conﬁguration.
The FTE client listens for incoming TCP connections on a
local client-side port. Upon receipt of an incoming connec-
tion the FTE record layer encrypts the messages using the
upstream format and relays them to a remote FTE server.
The FTE server receives these FTE ciphertexts, decrypts
them, and then relays the recovered plaintexts to a pre-
conﬁgured destination TCP port. Downstream, the process
is reversed, with the FTE server encrypting returned mes-
sages using the downstream format.
We use Mozilla Firefox version 17.0.3, controlled by ver-
sion 2.28.0 of the Selenium browser automation framework
to request the Alexa Top 50 (US) websites over the FTE
record layer; this is repeated ﬁve times for each upstream-
downstream format pair tested. The testing framework gen-
erates a mixture of HTTP, HTTPS and DNS source traﬃc
and a total of roughly 12,000 TCP connections. On the
server-side we relayed all HTTP(S) messages via a SOCKS
proxy. We used the default Firefox conﬁguration, with the
following exceptions: we tunneled all DNS requests through
the SOCKS connection, speciﬁed our start page as blank,
and disabled caching to disk.
4.1 DPI-Extracted Regular Expressions
As our ﬁrst method of programming the FTE record layer,
we build FTE formats by extracting them directly from the
source code of open-source regex-based DPI systems. This
models a white-box DPI attack setting for the DPI systems
from which we extract regexes, and a black-box DPI attack
for others (e.g., DPI-X).
Extracting regular expressions. Using regexes from
DPI systems within our FTE record layer is straightforward.
Given a regular expression R from the DPI, we specify a for-
mat F = (R(cid:48), k, m) where R(cid:48) is exactly R except without
a “.∗” (match any) preﬁx, should there be one. This makes
L(R(cid:48)) ⊆ L(R), while ensuring that FTE ciphertexts will
include the formatting information found in R after the pre-
ﬁx. We set k = 128 and m = 215 for good performance (the
misclassiﬁcation results do not change with other reasonable
settings).
We use the naming convention of (cid:104)DPI system(cid:105)-(cid:104)target
protocol(cid:105) to reference a pair of upstream-downstream regexes
extracted from the given DPI system. (Some systems only