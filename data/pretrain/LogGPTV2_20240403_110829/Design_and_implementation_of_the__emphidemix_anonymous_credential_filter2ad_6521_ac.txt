plementing the UserNymSystem, OrgNymSystem4 and De-
AnOrgNymSystem components in Figure 4. Each of these
components oﬀers functionality related to the speciﬁc cryp-
tographic operations executed by the diﬀerent entities, as
well as methods to create a new instance of the entity by
generating cryptographic key material (user master secret,
organization’s public/private key pair, de-anonymizing or-
ganization’s public/private encryption key pair). The fol-
lowing paragraphs shortly discuss the diﬀerent interfaces.
4.1 OrgNymSystem and UserNymSystem
Token-Based Interfaces
UserNymSystem and OrgNymSystem contain the user’s
and organization’s methods to compose and analyze the
cryptographic tokens exchanged in the nym registration, cre-
dential issuing and credential show protocols. OrgNymSys-
tem, in addition, contains a method for verifying whether
two show transcripts result from the double-spending of a
one-show credential, and if so, extract the pseudonym the
credential was issued on. It is the calling application’s re-
sponsibility to call this method when deemed appropriate.
Each of the interactive user-organization protocols is im-
plemented by a user (in UserNymSystem) and an organiza-
tion (in OrgNymSystem) state machine (encapsulated in a
UserProtocol or OrgProtocol) which the calling application
initializes (e.g., initRegProtocol). After this, the calling ap-
plication can execute the protocol using the state machine’s
getNextMsg() method and a communication channel. When
the protocols is ﬁnished, the state machines (UserProtocol
or OrgProtocol) allow the calling application to retrieve a
newly formed UserNym or UserCred (OrgNym or OrgCred).
The advantage of this token-based interface is that the pro-
tocols can be used asynchronously.
For easier programming of synchronous applications, syn-
chronous interfaces (UserSyncNymSystem and OrgSync-
NymSystem) (see Section 4.2) were implemented hiding the
protocol state machines and the transport of cryptographic
tokens from the calling application.
4NymSystem does not distinguish between verifying and is-
suing organizations. A distinction can be made only by not
enabling an organization to issue credentials using the Re-
questGranter (Section 4.6.2) functionality.
25applications use the persistent data.
4.6 Building Applications: Granting and
Processing Requests
When building real applications, we have to link appli-
cation with the NymSystem. As granting requests for both
credentials and data can depend on a user having shown one
or several credentials, granting and processing of credentials
and other resource requests are both treated here as actions
dependent on access control conditions. In this section we
give an overview of how we deﬁned the rules governing the
organizations’ access control conditions, and how we deﬁned
the modules granting and processing service requests. This
was done in such a way that they can be tailored to a speciﬁc
application, and that processing conditions and resources
not known to the idemix system can be added and linked to
the idemix -speciﬁc ones.
In the following discussion, we refer to Figure 6, where
OrgApp stands for an organization application receiving
and processing requests. MyOrgPersistent allows OrgApp
to store and retrieve its key material OrgNymSysData (in-
put parameter to OrgSyncNymSys methods), to the orga-
nization’s Rules (input parameter to the RequestGranter),
to the organization’s Transcripts ﬁle (where the credential
protocol transcripts, resulting from the OrgRequestProces-
sor, are stored persistently). An OrgApp may have one or
more OrgSession threads which accumulate the Transcript
information on a speciﬁc communication session with a user.
4.6.1 Organizations’ Access Rules
An organization has to specify which condition or con-
ditions a user has to fulﬁll in order to get access to data
or to get a credential. A Condition can require to show a
credential:
ShowCondition(CredInfo, CredShowFeatures)
expresses what type of credential U needs to show, and using
which options or parameters. It can be used by UserApp and
OrgApp to parameterize a NymSystem credential show.
Alternatively, a Condition can be an idemix -external fact,
expressed in an ExternalCondition:
Condition(ShowCondition | ExternalCondition)
The format of an ExternalCondition is deﬁned by the ap-
plication, and its fulﬁllment is veriﬁed using an application-
provided method (see RequestGranter and extensions, Sec-
tion 4.6.2). E.g., an OrgApp may grant an anonymous news-
paper subscription credential based on a (non-anonymous)
proof of credit card payment. The checking of this proof is
a condition out of the scope of idemix and has to be imple-
mented by the application programmer in an extension of
the RequestGranter class.
An organization’ Rules set is a collection of Rule entries
([] is used as an array notation):
Rules(Rule[])
Each Rule consists of the description ResourceDescription
of the resource(s) for which this rule is valid, and a set of
conditions to be fulﬁlled for accessing the resource:
Rule(ResourceDescription, Condition[])
A ResourceDescription can describe a credential or an ex-
ternal resource; an external resource (ExternalResource) is
Figure 5: User, Org and DeAnOrg Token-Based and
Synchronous interfaces
object that implements these interfaces. Use of encrypted
or authenticated channels (e.g., using SSL) is allowed but
not mandatory; the security of the communication channel
is discussed in more detail in Section 6.
Our prototype SSLClientCommSession and SSLServer-
CommSession implementation of these interfaces use a pro-
prietary Java SSL implementation. Organizations’ address
and SSL information is part of the public information cre-
ated by an organization’s initialization program, distributed
to the users and stored in the users’ persistent storage (see
Section 4.5). Communication is authenticated (organization
to user) and encrypted, and the user can check the certiﬁ-
cate using the getPeerCertiﬁcate() method of the SSLClient-
CommSession.
4.5 Persistent Data Storage
Credentials, pseudonyms, master secrets, organizations’
keys, system parameters, and address information have to
be stored persistently to have a workable prototype. We
deﬁned interfaces allowing the various entities to store and
retrieve this information. These interfaces, the search keys
used for retrieving information about credentials, organiza-
tions, pseudonyms etc., and how the persistent information
is organized (one or several databases, password-protection,
etc.) ultimately depend on how the application will use the
system, and are not the focus of this work.
Each of the interfaces used in our prototype (UserPer-
sistent, OrgPersistent, DeAnOrgPersistent) combine access
methods to the appropriate data sets for each entity. The
example scenario in Section 5 illustrates how our example
26Figure 6: An Organization Application
any resource other than a credential (e.g., a URL). It has an
application-deﬁned format.
ResourceDescription(CredentialInfo | ExternalResource)
Granting a pseudonym or verifying a proof are currently de-
ﬁned to be unprotected resources; the ResourceDescription
could easily be extended to make also these requests subject
to conditions.
In an operational system, rules and conditions can be com-
municated dynamically (as a result of a resource request)
from OrgApp to UserApp; or it can be part of the organi-
zation’s publicly distributed information and stored by the
users (as described in Section 4.5). They parameterize the
granting decision of the organization’s RequestGranter (Sec-
tion 4.6.2).
4.6.2 RequestGranter
An extendable RequestGranter class contains default im-
plementations of the methods that grant diﬀerent requests.
Calls to the RequestGranter class are parametrized with the
Rules set, the persistent Transcript storage (Which creden-
tials did the user owning this nym show in the past?) and
with non-persistent OrgSession storage (Which credentials
did the user show in this session?)
The default RequestGranter cannot evaluate External-
Conditions and will consider them unfulﬁlled by default.
An application can provide additional methods in its own
extension of RequestGranter (MyRequestGranter in Fig-
ure 6), overriding the isFulﬁlledExtCond() method of Re-
questGranter.
4.6.3 OrgRequestProcessor
A default OrgRequestProcessor module,
extending
OrgSyncNymSys, deals with incoming requests and extracts
the appropriate arguments for the OrgSyncNymSys meth-
ods. This default OrgRequestProcessor does not know how
to handle application-speciﬁc resource requests or requests
that deal with fulﬁlling an ExternalCondition (e.g., show-
ing a credit card receipt). An application-speciﬁc extension
(MyOrgRequestProcessor) can override the (by default fail-
ing) handleExtResourceRequest() and handleShowExtRe-
quest() methods.
4.7 Performance
Options
Protocol
RegNym
any option
GetCred
no option, or w.r.t. pseudonym
ShowCred
ShowCred + one show (on-line or oﬀ-line)
ShowCred + exp date
ShowCred + local revocation enable
ShowCred + local revocation enable
ShowCred
all options on
Time (sec)
0.2-0.3
3.4-4.9
7.8-8.2
+ 0.6-1.0
+ 2.9-3.2
+ 6.5-7.2
+ 6.5-7.2
24.8-25.3
Table 1: Performance using 1024 bit moduli.
Table 1 lists the execution times of the diﬀerent opera-
tions. The measurements were made on IBM T23 laptop
machines (1.1 MHz Pentium III) running Debian Linux us-
ing Java 1.3.1 (Blackdown). The “+”-signs in the ShowCred
entries mean that if one switches on an option in the Show-
Cred protocol, then execution time will increase by the given
time.
These execution times are for a preliminary version of
the NymSystem where no optimization for multi-based ex-
ponentiation is used. We are currently implementing such
optimizations. First tests indicate that a speed-up by a fac-
tor of about 4-5 can be obtained. Furthermore, the cryp-
tographic protocols are currently such that ﬁrst the users
does lots of computations, sends the result to the verifying
organization, and then the verifying organization does lots
of computations. We plan to optimize the protocols in this
respect also, which should provide a speed-up by a factor of
a little less than 2.
275. AN EXAMPLE SCENARIO: AN ANONY-
MOUS SUBSCRIPTION TO THE NEW
YORK TIMES
In this section, we demonstrate the use of the prototype
by user and organization applications. We deﬁne four orga-
nizations: a Root Pseudonym Authority (PA), a bank (AR-
GENTIX), the New York Times news subscription service
(KIOSK), and the New York Times news service (NYT).
NYT serves items in its cartoons section only upon veriﬁca-
tion of a subscription credential issued by KIOSK; KIOSK,
in turn, issues such a credential upon veriﬁcation of a (one-
show) $10 credential; ARGENTIX issues such a credential
based on proof of an (non-anonymous, idemix -external) pay-
ment, combined with the veriﬁcation of a PA root credential.
PA unconditionally grants root pseudonyms and credentials
(In a more realistic scenario, a user could be required to show
an external certiﬁcate when registering a root credential, as
discussed in Section 6.3).
5.1 Creating and Conﬁguring the User and
Organizations
A demo setup program uses the NymSystem user and or-
ganization creation facilities to create one user and four or-
ganizations.
It assigns IP addresses and port numbers to
the four organizations, as well as SSL Certiﬁcates which are
created using the KeyMan [14] PKI management tool.
It
also creates rules for the three organizations (see below).
The initialization program creates persistent data sets for
each of the four entities, and initializes each of the orga-
nization’s data sets with its own OrgNymSystemData key
material. The user’s data set is initialized with the user’s
UserNymSysData key information, as well as all the orga-
nizations’ public information (idemix public key, addresses,
SSL certiﬁcates, rules).
PA and KIOSK use the default RequestGranter and Or-
gRequestProcessor as they do not deal with ExternalCon-
ditions or ExternalResources; ARGENTIX implements its
own ArgentixRequestGranter deﬁning the veriﬁcation of
the credit card receipt; NYT, ﬁnally, implements its own
NYTRequestProcessor with handleResourceRequest() map-
ping a resource request (URL) into the actual contents of a
web page.
5.2 User Credential Manager and Browser
Plug-In
Based on the idemix prototype, [25] describes the design
and implementation of a Credential Manager implemented
as a plug-in to a WBI [1] browser proxy. Figure 7 shows an
instance of the Credential Manager in a scenario with the
four organizations initialized as described above. This Cre-
dential Manager popped up after a user entered a “http://-
www.nyt.com/cartoons” URL in his browser URL window.
The Credential Manager then allows the user to view the