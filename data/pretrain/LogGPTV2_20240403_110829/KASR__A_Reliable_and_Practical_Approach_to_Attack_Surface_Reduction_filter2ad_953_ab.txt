Similar to prior schemes that commonly use SLoC as the metric of the attack
surface, the KASR metric uses the Number of Instructions (NoI). It naturally
works well with instruction sets where all the instructions have an equal length
(e.g., ARM instructions). However, with a variable-length instruction set (e.g.,
x86 instructions [13]), it is hard to count instructions accurately. In order to
address this issue on such platforms, we use the Number of Instruction Pages
(NoIP). NoIP is reasonable and accurate due to the following reasons. First, it is
696
Z. Zhang et al.
consistent with the paging mechanism that is widely deployed by all commodity
OS kernels. Second, the kernel instructions are usually contiguous and organized
in a page-aligned way. Finally, it could smoothly address the issue introduced
by variable-length instructions without introducing any explicit security and
performance side-eﬀects. In this paper, the KASR metric depends on NoIP to
measure the kernel attack surface.
3.2 Beneﬁts of Hardware-Assisted Virtualization
In a hardware-assisted virtualization environment, there are two levels of page
tables. The ﬁrst-level page table, i.e., Guest Page Table (GPT), is managed by
the kernel in the guest space, and the other one, i.e., Extended Page Table (EPT),
is managed by the hypervisor in the hypervisor space. The hardware checks the
access permissions at both levels for a memory access. If the hypervisor removes
the executable permission for a page Pa in the EPT, then the page Pa can never
be executed, regardless of its access permissions in the GPT. These mechanisms
have been widely supported by hardware processors (e.g., Intel [13], AMD [2],
and ARM [3]) and commodity OSes.
With the help of the EPT, we propose to reduce the attack surface by trans-
parently removing the executable permissions of certain kernel code pages. This
approach achieves all system goals listed before. First, it is reliable (achieving
G1) since an adversary in the guest space does not have the capability of modify-
ing the EPT conﬁgurations. Second, the attack surface reduction is transparent
(achieving G2), as the page-table based reduction is enforced in the hypervisor
space, without requiring any modiﬁcations (e.g., instruction instrumentation) of
the kernel binary. Finally, it is eﬃcient (achieving G3) as all instructions within
pages that have executable permissions are able to execute at a native speed.
4 KASR Design
We ﬁrstly elaborate the design of the KASR system. As depicted in Fig. 1, the
general working ﬂow of KASR proceeds in two stages: an oﬄine training stage
followed by a runtime enforcement stage. In the oﬄine training stage, a trusted
OS kernel Kern is running beneath a use case (e.g., user application Appa)
within a virtual machine. The KASR oﬄine training processor residing in the
hypervisor space, monitors the kernel’s lifetime run, records its code usage and
generates a corresponding database. The generated kernel code usage database
is trusted, as the system in the oﬄine training stage is clean. Once the generated
database becomes stable and ready to use, the oﬄine training stage is done.
In the runtime enforcement stage, the KASR module, running the same vir-
tual machine, loads the generated database and reduces the attack surface of
Kern. The kernel attack surface is made up of the kernel code from the kernel
image as well as loaded LKMs. A large part of the kernel attack surface is reli-
ably removed (the dotted square in Fig. 1). Still, the remaining part (the solid
shaded-square in Fig. 1) is able to support the running of the use case Appa. The
A Reliable and Practical Approach to Kernel Attack Surface Reduction
697
attack surface reduction is reliable, as the hypervisor can use the virtualization
techniques to protect itself and the KASR system, indicating that no code from
the virtual machine can revert the enforcement.
Fig. 1. The architecture of the KASR system.
4.1 Oﬄine Training Stage
Commodity OSes are designed and implemented to support various use cases.
However, for a given use case (e.g., Appa), only certain code pages within the
kernel (e.g., Kern) are used while other code pages are unused. Thus, the KASR
oﬄine training processor can safely extract the used code pages from the whole
kernel, the so-called used code extraction. On top of that, the used code pages
can be segmented into three phases (e.g., startup, runtime and shutdown). The
code segmentation technique is inspired by the observation that some used code
pages are only used in a particular time period. For instance, the init functions
are only invoked when the kernel starts up and thus they should be in the
startup phase. However, for certain functions, e.g., kmalloc and kfree, they are
used during the kernel’s whole lifetime and owned by all three phases. The KASR
oﬄine training processor uses the used code extraction technique (Sect. 4.1) to
extract the used code pages, and leverages the used code segmentation technique
(Sect. 4.1) to segment used code into diﬀerent phases. All the recorded code
usage information will be saved into the kernel code usage database, as shown
in Fig. 2.
The database will become stable quickly after the KASR oﬄine processor
repeats the above steps several times. Actually, this observation has been suc-
cessfully conﬁrmed by some other research works [17,18]. For instance, for the
use case of LAMP, a typical httperf [23] training of about ten minutes is suﬃcient
to detect all required features, although the httperf does not cover all possible
paths. This observation is reasonable due to the following two reasons. First,
698
Z. Zhang et al.
Fig. 2. Oﬄine Training Stage. The KASR oﬄine training processor working in the
hypervisor space, extracts used code from the OS kernel, segments used code into
three phases (i.e., startup, runtime and shutdown) and generates the kernel code usage
database.
people do not update the OS kernel frequently, and thus it will be stable within
a relatively long period. Second, although the user-level operations are complex
and diverse, the invoked kernel services (e.g., system calls) are relatively stable,
e.g., the kernel code that handles network packets and system ﬁles is constantly
the same.
Used Code Extraction. A key requirement of this technique is to collect all
used pages for a given workload. It means that the collection should cover the
whole lifetime of an OS kernel, from the very beginning of the startup phase to
the last operation of the shutdown phase. A straightforward solution is to use the
trace service provided by the OS kernel. For instance, the Linux kernel provides
the ftrace feature to trace the kernel-level function usage. However, all existing
integrated tracing schemes cannot cover the whole life cycle. For example, ftrace
always misses the code usage of the startup phase [18] before it is enabled.
Extending the trace feature requires modifying the kernel source code. To avoid
the modiﬁcation and cover the whole life cycle of the OS kernel, we propose a
hypervisor-based KASR oﬄine training processor. The oﬄine training processor,
working in the hypervisor space, starts to run before the kernel starts up and
remains operational after the kernel shuts down.
In the following, we will discuss how to trace and identify the used code pages
in the kernel image and loaded LKMs.
Kernel Image Tracing. Before the kernel starts to run, the oﬄine training
processor removes the executable permissions of all code pages of the kernel
image. By doing so, every code execution within the kernel image will raise
an exception, driving the control ﬂow to the oﬄine training processor. In the
hypervisor space, the oﬄine training processor maintains the database recording
the kernel code usage status. When getting an exception, the oﬄine training
processor updates the corresponding record, indicating that a kernel code page is
used. To avoid this kernel code page triggering any unnecessary exceptions later,
A Reliable and Practical Approach to Kernel Attack Surface Reduction
699
the oﬄine training processor sets it to executable. As a result, only the newly
executed kernel code pages raise exceptions and the kernel continues running,
thus covering the lifetime used code pages of the kernel image. Note that the
oﬄine training processor ﬁlters out the user-space code pages by checking where
the exception occurs. (i.e., the value of Instruction Pointer (IP) register).
Kernel Modules Tracing. The above tracing mechanism works smoothly with
the kernel image, but not with newly loaded LKMs. All LKMs can be dynam-
ically installed and uninstalled into/from memory at runtime, and the newly
installed kernel modules may re-use the executable pages that have already been
freed by other modules in order to load their code. Thus, their page contents
have totally changed and they become new code pages that ought to be traced as
well. If we follow the kernel tracing mechanism, such to-be-reused pages cannot
be recorded into the database. Because these pages have been traced and the
processor has set them to executable, they are unable to trigger any exceptions
even when they are reused by other modules.
To address this issue, we dictate that only the page currently causing the
exception can gain the executable permission while other pages cannot. Specif-
ically, when a page Pa raises an exception, the oﬄine training processor sets it
to executable so that the kernel can proceed to next page Pb. Once Pb raises the
exception, it is set to executable while Pa is set back to non-executable. Like-
wise, the oﬄine training processor sets Pb back to non-executable when another
exception occurs. By doing so, pages like Pa or Pb can trigger new exceptions if
they will be re-used by newly installed modules and thus all used code pages can
be traced. Obviously, this approach is also suitable for the kernel image tracing.
Page Identiﬁcation. The traced information is saved in the database, and the
database reserves a unique identity for each code page. It is relatively easy to
identify all code pages of the kernel image when its address space layout is unique
and constant every time the kernel starts up. Thus, a Page Frame Number (PFN)
could be used as the identiﬁcation. However, recent commodity OS kernels have
already enabled the KASLR technology [8] and thus the PFN of a code page
is no longer constant. Likewise, this issue also occurs with the kernel modules,
whose pages are dynamically allocated at runtime, and each time the kernel may
assign a diﬀerent set of PFNs to the same kernel module.
A possible approach is to hash every page’s content as its own identity. It
works for most of the code pages but will fail for the code pages which have
instructions with dynamically determined opcodes, e.g., for the call instruction,
it needs an absolute address as its operand, and this address may be diﬀerent
each time, causing the failure of page identiﬁcation. Another alternative is to
apply the fuzzy hash algorithm (e.g., ssdeep [15]) over a page and compute
a similarity (expressed as a percentage) between two pages. e.g., if two pages
have a similarity of over 60%, they are identical. However, such low similarity
will introduce false positives, which can be exploited by attackers to prompt
malicious pages for valid ones in the runtime enforcement stage.
To address the issues, we propose a multi-hash-value approach. In this oﬄine
training stage, we trace the kernel for multiple rounds (e.g., 10 rounds) to collect
700
Z. Zhang et al.
all the used pages and dump the page content of each used page. Then we build a
map of what bytes are constant and what bytes are dynamic in every used page.
Each used page has multiple ranges and each range is made up of consecutive
constant bytes. The ranges are separated by the dynamic bytes. Based on the
map, we compute a hash value for every range. If and only if two pages have the
same hash value for each range, they are identical. As a result, a page’s identity
is to hash everything within the page but the dynamic bytes. On top of that,
we observe that the maximum byte-length of the consecutive dynamic bytes is
4, making it hardly possible for attackers to replace the dynamic bytes with
meaningful rogue ones. Relying on the approach, the risk of abusing the false
positives is minimized.
Used Code Segmentation. This technique is used to segment the used code
into several appropriate phases. By default, there are three phases: startup, run-
time, and shutdown, indicating which phases the used code have been executed
in. When the kernel is executing within one particular phase out of the three, the
oﬄine training processor marks corresponding code pages with that phase. After
the kernel ﬁnishes its execution, the oﬄine training processor successfully marks
all used code pages and saves their records into the database. To be aware of the
phase switch, the oﬄine training processor captures the phase switch events. For
the switch between startup and runtime, we use the event when the ﬁrst user
application starts to run, while for the switch between runtime and shutdown,
we choose the execution of the reboot system call as the switch event.
4.2 Runtime Enforcement Stage
When the oﬄine training stage is done and a stable database has been generated
(see details in Sect. 5.2), KASR is ready for runtime enforcement. As shown in
Fig. 3, the KASR module loads the generated database for a speciﬁc workload,
and reduces the kernel attack surface in two steps:
1. Permission Deprivation. It keeps the executable permissions of all used code
pages (the solid shaded square in Fig. 3), and reliably removes the executable
permissions of all unused code pages (the dotted square in Fig. 3)
2. Lifetime Segmentation. It aims to further reduce the kernel attack surface
upon the permission deprivation. As shown in Fig. 3, it transparently allows
the used kernel code pages of a particular phase to execute while setting the
remaining pages to non-executable.
All instructions within the executable pages can execute at a native speed, with-
out any interventions from the KASR module. When the execution enters the
next phase, the KASR module needs to revoke the executable permissions from
the pages of the current phase, and set executable permissions to the pages
of the next phase. To reduce the switch cost, the KASR module performs two
optimizations. First, if a page is executable within the successive phase, the
KASR module skips its permission-revocation and keeps it executable. Second,
the KASR module updates the page permissions in batch, rather than updating
them individually.
A Reliable and Practical Approach to Kernel Attack Surface Reduction
701
Fig. 3. Runtime Enforcement Stage. The KASR module residing in the hypervisor
space reduces OS kernel attack surface in two consecutive steps. The ﬁrst step (i.e.,
permission deprivation) reliably deprives unused code of executable permission, and
the second step (i.e., lifetime segmentation) selectively activates corresponding used
code according to their phases.
5 KASR Database
This section presents the implementation details of the KASR database, includ-
ing database data-structure, database operations.
5.1 Data Structure
Basically, the database consists of two single-linked lists, which are used to man-
age the pages of kernel image and loaded modules, respectively. Both lists have