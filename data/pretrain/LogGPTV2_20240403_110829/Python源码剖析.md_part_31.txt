看来，这个函数的作用至关重要。
Eypedef
typedef struct
[frameobject.h]
void PyFrame _BlockSetup(PyFrameobject f,int type, int handler, int level)
[frameobject.c]
PyTryBlock;
我们注意到PyTryBlock结构中有一
显然，PyFrameObject对象中的f_blockstack是一个PyTryBlock结构的数组，而
其中的cO_MAXBLOcKs在Python2.5中被定义为20，_iblock在调用pyFrame_New
在这里，我们第一次开始使用ryFrameobject中的f_blockstack：
在sETUP_LOOP的实现代码中，仅仅是简单地调用了一个PyFrame_BlockSetup函数，
imt
int
b->b_handler=handler:
PyTryBlock*b,
=&f=>f blockatackif->f_iblock+]:
PyTryBlock
b_handler:
b_type;
B
struct
level;
_frame
evel:
value stack level
what kind of block this is/
index in E_blockstack */
10.2
个b_type域，
Python源码剖析
Python虚拟机中的for循环控制流
topop to/
这意味着实际上存在着几种不同
深度探索动态语言核心技术
185
---
## Page 216
10.2.2.2
186
ython源码剖析
对象压入运行时栈。然后再通过执行“18GET_ITER”指令来获得PyListObject对象的
结构的空间之后，Python虚拟机通过“15LOADNAMEo”指令，将刚创建的PyListObject
对异常机制我们暂且按下不表，单看PyTryB1ock在循环控制流中的作用。
PyListobject对象，然后通过pyobject_GetIter获得pyListobject对象的选代器：
迭代器。
CaSe SETUP EXCEFT:
Pyobject*Pyobject_GetIter(ByObject o)
typedef Ryobject*(*getiterfunc)(Pyobject*）:
[object.h]
[GET_ITER]
[abatract.c]
第10章Python虚拟机中的控制流
原来除了循环控制流，这个小小的PyTryBLock在异常机制中也占有一席之地，这里
PyFrame_BlockSetup(f,opcode,INSTR_OFESET()+oparg,STACK_LEVEL(O))
在GET_ITER的指令代码中，Py山hon虚拟机首先会获得位于运行时栈的栈顶的
list的迭代器
else
if
PyTypeObject
t->tP-
一深度探索动态语言核心技术
STACKADJ（-1):
PY_DECREF(V)
//获得PyListObject对象的iterator
//从运行时栈获得DyListObject对象
X
Pyobjeet_GetIter(v):
continue:
PREDICT(FOR_ITER):
SET.
TOPO
iter:
NULL:
=o->ob_type1
---
## Page 217
那个，也正是创建迭代器对象的命门所在：
tp_iter 域被设置为list_iter。这个list_iter正是pyobject_GetIter中所获得的
listiterobject 对象所对应的类型对象为ryListIter_Typea
static Ryobject·list_iter(Pyobjeot *seq)
[liatobject.c]
[listobject.c]
上，在Python中，不光是PyListobject对象，只要拥有迭代器的对象，这些选代器都是
相同，但其对应的迭代器却和STL中的1ist是一致的，都通过额外的对象来实现。实际
个类来实现的，比如ist。虽然Python中的pyListobject对象在内存布局上与vector
的STL中，有的选代器是直接利用C的原生指针实现的，比如vector：有的则是通过一
遍历操作与容器的具体实现分离开。这也是GoF中的IteratorPattern思想的实现。在C++
容器的选代器的概念是一致的，都是为容器中元素的遍历操作提供一层接口，将对容器的
PyTypeobject
一个实实在在的对象，很显然，它们也都是一个pyObject对象。
与对象关联的选代器的。在Python中，选代器的概念实际上与Java、C#或C++中sTL各
typedef struct
[listobject.c]
listiterobject:
我们回到PyLigtobject来，在pyListobject对象的类型对象PyList_Type中，
return(Pyobject）it;
listiterobject *it:
既然选代器是一个PvobjecE对象，
PyObject_GC_TRACK(it)
t->1E
Pyobject_SelfIter,
sizeof (ltstiterobject).
Pyobject_HEAD
显然，Pyobject_GetIter是通过调用对象对应的类型对象中的tp_iter操作来获得
/这里日eq就是之前创建的PyListObject对象
->it
=Pyobject_GC_New(listiterobject,
IINCREF(Seq);
methods
bas
index
PyListIter_Type=
ject
(PyListobject
0:
Set to NULt when
)seg;
10.2
tp_itemsize/
tpbasicsize*/
tp_name
ob_size */
那么很显然，它也一定拥有类型对象。选代器
Python源码剖析
Python虚拟机中的for循环控制流
&PyListIter_Type):
spoueurd
fterator
一深度探索动态语言核心技术
is exhausted/
187
---
## Page 218
10.2.3
188
Python源码剖析
如你所知，这样的预测动作是为了提高执行的效率。
这个选代器对象设置为运行时栈的栈顶元素。图10-4展现了这个过程：
在选代器中，维护了当前访问的元素在pyListobject对象中的序号：it_index。通过这
始进入Python虚拟机一级的for循环：
个与源码对应的循环控制结构了。没错，正是从“19FOR_ITER11”指令开始，我们开
环的另一种说法。我们现在可以猜想，在GET_ITER指令之后，Pyhon虚拟机应该进入一
获全胜，但如果去跟Ruby、Pel或者PHP赛跑，恐怕就没那么幸运了。
都是顺序结构，很显然，创建选代器的指令应该也属于顺序结构中的指令，因为如果每一
构来实现源码一级的循环结构，这可以看做程序的拓扑不变性。到现在为止，我们看到的
[FOR_ITER]
一个相应的循环控制结构。因为无论进行怎样的变换，都不可能在虚拟机一级利用顺序结
第10章Python虚拟机中的控制流
GET_ITER指令在获得了PyListObject对象的选代器之后，通过SET_TOP宏强制将
pyLiatobject对象的选代器对象只是对PyListObject对象做了一个简单的包装，
在指令“18GE_ITER”完成之后，Pyhon虚拟机开始了rOR_ITER指令的预测动作，
而另一方面，从概念上来说，选代器正是一个对容器实现遍历的工具。遍历，就是循
想象一下，对于源代码一级的循环控制结构，在Pyhon虚拟机一级，一定也对应着
迭代控制
PREDICTEDLWITH_ARG(POR_ITER):
case
一深度探索动态语言核心技术
1/通过terator对象获得集合中的下一个元素对象
FOR
PREDICT(STORE_FAST)
PUSH(X）:
1/将获得的元素对象压入运行时栈
TOP():
LOAD_NAME
图10-4创建选代器时运行时栈的变化
SET_TOPC)
>
---
## Page 219
为下一个选代动作做好准备。在我们的例子中，这里会返回一个pyIntobject对象1。
虚拟机会重新进入对下一条字节码指令
码预测动作。在我们的例子中，这两个预测动作显然都会失败，所以在continue处，Python
将返回NULL，这个结果预示着遍历结束。
联的容器对象中的下一个元素，如果当前已经抵达了容器对象的结束位置，那么tp_ternext
用选代器的tp_itermnext开始进行选代。选代器的tp_iternext操作总是返回与选代器关
static Pyobject* listiter_next(listiterobject *it)
[liatobject.c]
（x！NULL），那么将获得的这个元素压入到运行时栈中，并开始进行一系列的字节
在获取了当前it_index对应的pyListobject对象中的元素后，将it_index递增，
对于pyListobject对象的送代器，其获取下一个元素的操作如下；
FOR_ITER的指令代码会检查p_iternext的返回结果，如果得到的是一个有效的元
图10-5展示了直到“22STORE_NAME1”之前，运行时栈及local名字空间的变化情况。
FOR_ITER的指令代码会首先从运行时栈中获得PyListObject对象的选代器，然后调
it->it_seq =NULl;
Py_DECREF(seq);
//注意这里的seq是一个pPyLstObject对象
Pyobject item:
PyListObject *seq:
选代结束
(it->it_indexit_index):
Python虚拟机中的for循环控制流
Python源码剖析
一深度探索动态语言核心技术
一的执行过程。
189
---
## Page 220
Python源码剖析
190
结构，正是这个循环结构对应着for_control.py中的那个for循环结构。
Python虚拟机也在FOR_TTER指令和JUMP_ABSOLUTE指令之间成功地构造出了一个循环
对象的选代器获得pyListobject对象中的下一个元素，然后依次向前，继而执行输出操
条指令，那Pyhon虚拟机的下一步动作就是执行FOR_ITER指令，即通过PyListObject
中包括字节码和参数，19个字节之后，到达了“19FOR_ITER11。也就是说，在Python
for_controlpy中，参数的值是19，那么这个19代表着什么呢？
的指令参数决定，所以，这条参数就成了for循环中指令回退动作最关键的一点。在
f->f_code->co_code开始地址的某一特定偏移的位置。这个偏移的量由JUMP_ABSOLUTE
JUMP_ABsOLUTE指令的行为是强制设定next_instr的值，将next_instr设定到距离
跳跃。从名字就可以看出，完成这个绝对跳跃动作的指令正是JUMP_ABSOLUTE指令。
一种做法，不再使用相对距离跳跃，而是使用了基于字节码指令序列开始位置的绝对距离
必须是一个负数，因为这里的指令跳跃式一个向后回退的过程。但是Pyton采用了另外
令正是“30JUMP_ABSOLUTE19”
中的下一个元素，并继续进行输出操作。直观上，这时需要一个向后回退的指令，这个指
然后，按照for_control.py中Pyton源代码所定义的行为，应该获得PyListObject对象
#define JUMPTO(x)
[JUMP_ABSOLUTE]
我们从字节码指令序列的开始处（f->f_code->co_code），向前前进19个字节，其
可见，在JUMP_ABSOLUTE指令处，Python虚拟机实现了字节码的向后回退动作。而
前面我们提到，如果Eor循环中的指令跳跃动作依然采用JUMPBY的逻辑，那么参数
第10章Python虚拟机中的控制流
细心的读者可能已经注意到了一个奇怪的现象，在“19FOR_ITER11”这条指令中
这之后Pyton虚拟机将沿着字节码的顺序一条一条执行下去，从而完成输出的动作。
"lst>
>
一深度探索动态语言核心技术
(next_instr=first_instn+（x))
PUSH(X)
图10-5选代过程中虚拟机的状态变化
>
STORE NAME
>
>
---
## Page 221
10.2.4
之后的那个隐藏的返回动作了。
状态，从而完成了整个for循环结构。在这之后，就开始执行forcontroLpy中for循环
中存储的SETUP_LOOP指令处运行时栈的深度信息将运行时栈恢复到SETUP_LOOP之前的
执行POP_BLocK指令时，实际上是将这个PyTryBlock结构归还给了->f_blockstack。
SETUP_LOOP时的一些关于虚拟机的状态信息保存到了所获得的PyTryB1ock结构中。在
回
后的STORE_NAME向前前进11个字节，正好到达POP_BLOCK：
出，同时执行一个JUMPBY的动作，向前跳跃。
意味着选代结束了。这个结果将直接导致Python虚拟机会将选代器对象从运行时栈中弹
如果通过PyListobject对象的选代器获得的下一个元素不是有效的元素（NULL），这就
这个循环结束的行为同样是要落在FOR_ITER的身上在FOR_ITER指令的执行过程中，
什么用。列位看官，别急，关于这个参数的作用，马上就会水落石出了。
[POP_BLOCK]
#define JUMPBY（x)
很明显，BOR_IT显是一个带参数的指令，但是到目前为止，我们都没有看到这个参数有
同时，Python虚拟机抽取在SETUP_LOOP指令处保存在PyTryBlock中的信息，并根据其
PyTryBlock
[frameobject.c]
我们注意到，在执行sETUPLOOP指令时，Python虚拟机保存了许多信息，而在执行
有意思的是，POP_BLOCK的行为与它的名字有点不同。前面我们看到，在SETUP_LOOP
向前跳跃的距离即是FOR_ITER的参数，在for_control.py中是11。我们从FOR_ITER
俗话说“天下无不散的宴席”。在control.py中，for循环控制结构最终也是要结束的
return b
可
//向_b1ockstack中归还PyTryBlook
PyTryBlock *b:
终止迭代
>fblockstack[--f->f_iblock];
*pyFrame_BlockPop(PyFrameObject *f)
DyTbryBlock
//将运行时栈恢复为选代前的状态
(next_inst千=（)）
10.2Python虚拟机中的for循环控制流
Python源码剖析
一深度探索动态语言核心技术
191
---
## Page 222
192第10章Python虚拟机中的控制流
10.3Python虚拟机中的while循环控制结构
Python源码剖析
10.3.1
进行观察的。在图10-6创建的1ist对象中，第一个元素“654321”是我们修改的代码中
行for循环语句，从而导致我们无法观察到正常的结果，所以这里我们是在命令行模式下
结果如图10-6所示。由于IDLE自身使用了多线程，而其他线程处于活动状态时同样会执
么参数，取用需要的参数即可，对于其他参数，可以不用理会。
中会一古脑将所有机制可能用到的参数全都存放到PyTryBlock结构中，各个机制需要什