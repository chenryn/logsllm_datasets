check = 10 - (val % 10)
if check == 10:
check = *o"
1f (str(check) == last):
print("valid Is8N*)
4.13 Validate1S8Ns | 295
---
## Page 312
else:
print("Invalid Is8N check digit")
else:
print(“Invalid ISBN*)
Discussion
An ISBN is a unique identifier for commercial books and book-like products. The 10-
digit ISBN format was published as an international standard, ISO 2108, in 1970. All
ISBNs assigned since January 1, 2007 are 13 digits.
ISBN-10 and ISBN-13 numbers are divided into four or five elements, respectively.
Three of the elements are of variable length; the remaining one or two elements are of
fixed length. All five parts are usually separated with hyphens or spaces. A brief de-
scription of each element follows:
•13-digit ISBNs start with the prefix 978 or 979.
•The group idetifer identifies the language-sharing country group. It ranges from
one to five digits long.
•The publisher idextifier varies in length and is assigned by the national ISBN agency.
• The title identifier also varies in length and is selected by the publisher.
• The final character is called the check digit, and is computed using a checksum
algorithm. An ISBN-10 check digit can be either a number from O to 9 or the letter
X (Roman numeral for 10), whereas an ISBN-13 check digit ranges from 0 to 9.
The allowed characters are different because the two ISBN types use different
checksum algorithms.
All three regex solutions shown earlier are composed of similar parts, so here we'll focus
on the “ISBN-10 or ISBN-13" regex. Its leading  part has
three optional elements, allowing it to match any one of the following seven strings (all
except the empty-string option include a space character at the end):
·ISBN
*ISBN-10
*ISBN-13*
*ISBN:*
*ISBN-10:#
·ISBN-13:
●The empty string (no prefix)
After the leading  that we just discussed, there is a positive
lookahead that enforces one of four options (separated by the | alternation operator)
for the length and character set of the rest of the match, as well as the number of allowed
separators (zero or three for ISBN-10s, and zero or four for ISBN-13s). Because there
296 I Chapter 4: Validation and Formatting
---
## Page 313
are four alternatives within it, the lookahead is quite long. Here’s the full lookahead:
(?=[0-9x]{10}$|(=(?:[0-9]+[-]){3})[-*0-9x]{13}$|97[89][0-9]{10}$|(?=(?:
[0-9]+[ -=]{4})[-*0-9]{17}$). Since that’s difficult to analyze on its own, each of the
that there cannot be any trailing text that doesn’t fit into one of the patterms:
four options within it are shown next. They all end with the  anchor, which ensures
${0t}[x6-0]
Allows an ISBN-10 with no separators (10 total characters)
 matches the “978” or “979" prefix required by
an ISBN-13. The noncapturing group is optional because it will not match within an
ISBN-10 subject string.  matches the one to five digit group identifier
and an optional, following separator.  and
$> anchors with word boundaries, so you end up with <\b[0-9]{5)(?: -[0-9]{4})?\b,
There is one valid ZIP+4 code that this regex will not match: 10022-
SHOE. This is the only ZIP code that includes letters. In 2007, it was
 assgnd specifically to the cighth flor als Fifth Aeme shestor in
New York, New York. At least thus far, however, the U.S. Postal Service
has not created any other vanity ZIP codes. Mail addressed to ZIP code
10022 will still reach the shoe store (and pass validation) just fine, so we
don’t think it's worthwhile to modify the regex to shoehorm in this sole
exception.
See Also
For people who deal with non-U.S. addresses, we've covered Canadian postal codes in
Recipe 4.15, and U.K. postcodes in Recipe 4.16.
Recipe 4.17 shows how to determine whether something looks like a P.O. box address,
for cases where you need to treat P.O. boxes differently than normal street addresses.
/www.esps.comm/zip4/. However, ZIP codes actually correspond to mail delivery paths
You can look up cities by ZIP code, or ZIP codes by city and state or address, at Fertps:
rather than specific geographic locations, so there are many unusual cases including
buildings, or P.O. boxes.
ZIP codes that cross state boundaries or that service military vessels, specific corporate
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.9 explains
grouping. Recipe 2.12 explains repetition.
4.15ValidateCanadianPostalCodes
Problem
You want to check whether a string is a Canadian postal code.
Solution
(?! *[DFI00u])[A-VXY][0-9][A-Z]?[0-9][A-Z][0-9]$
Regex options: None
4.15 Validate Canadian Pestal Codes | 301
---
## Page 318
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
The negative lookahead at the beginning of this regular expression prevents D, F, 1, O,
W' or Z as the first character. Aside from those rwo exceptions, Canadian postal codes
Q, or U anywhere in the subject string. The <[A-vxv] character class further prevents
simply use an altermating sequence of six alphanumeric characters with an optional
space in the midle. For example, the regex will match KA_0B1, which is the postal
code for Canada Post's Ottawa headquarters.
See Also
See Recipe 4.14 for coverage of U.S. ZIP codes, and Recipe 4.16 for U.K. postcodes.
Recipe 4.17 explains how to determine whether something looks like a P.O. box ad-
dress, in case you need to treat P.O. boxes differently than normal street addresses.
Canada Post offes a web page to look up postal codes at http://www.caadapost.ca/
cpotools/apps/fpc/personalfondByCity
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.4 explains that the dot matches any
character. Recipe 2.5 explains anchors. Recipe 2.12 explains repetition. Recipe 2.16
explains lookaround.
4.16ValidateU.K.Postcodes
Problem
You need a regular expression that matches a U.K. postcode.
Solution
[A-Z]{1,2}[0-9R][09A-Z]?[0-9][ABDHLNP-UW-Z]{2}$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Postal codes in the U.K. (or postcodes, as they're called) are composed of five to seven
alphanumeric characters separated by a space. The rules covering which characters can
appear at particular positions are rather complicated and fraught with exceptions. The
regular expression just shown therefore sticks to the basic rules.
readability, here you go:
If you need a regex that ticks all the boxes for the postcode rules at the expense of
302 | Chapter 4: Validation and Formatting
---
## Page 319
(?:(?:[A-PR-UWYZ][0-9]{1,2}[A-PR-UWYZ][A-HK-Y][0-9]{1,2}
|[A-PRUMYZ][O-9][AHKSTUW][A-PR-UWYZ][AHKV][O-9]
[ABEHMNPRV-Y] [0-9][ABD-HJLNP-UM-Z]{2} |GIR OAA]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
See Also
British Standard BS7666, available at http://mterim.cabinetoffice.gov.k/govtalk/sche
masstandards/e-giffdatastancdards/address/postcode.aspx, describes the U.K. postcode
rules.
The Royal Mail's website at Fattp://www.royafmail.copostcode-finder ets you use an
address to look up an individual postcode.
Recipes 4.14 and 4.15 show how to validate U.S. ZIP codes and Canadian postal codes.
Recipe 4.17 explains how to identify addresses that contain a P.O. box.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors, Recipe 2.8 explains
altermation. Recipe 2.9 explains grouping. Recipe 2.12 explains repetition.
4.17FindAddresseswithPost OfficeBoxes
Problem
You want to catch addresses that contain a P.O. box, and wam users that their shipping
information must contain a street address.
Solution
Regular expression
^(?:Post(?:al)?(?:0ff1ce*)？|P[ . ]?0\. ?)?Box\b