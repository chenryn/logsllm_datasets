# 如何绕过SEH检查
没有通用的方法来绕过SEH检查，但还是有一些小技巧节省逆向工程人员的工作量，让我们看看导致SEH处理程序调用的调用堆栈：
    0:000> kn
     # ChildEBP RetAddr  
    00 0059f06c 775100b1 AntiDebug!ExceptionRoutine 
    01 0059f090 77510083 ntdll!ExecuteHandler2+0x26
    02 0059f158 775107ff ntdll!ExecuteHandler+0x24
    03 0059f158 003b11a5 ntdll!KiUserExceptionDispatcher+0xf
    04 0059fa90 003d7f4e AntiDebug!main+0xb5
    05 0059faa4 003d7d9a AntiDebug!invoke_main+0x1e
    06 0059fafc 003d7c2d AntiDebug!__scrt_common_main_seh+0x15a 
    07 0059fb04 003d7f68 AntiDebug!__scrt_common_main+0xd 
    08 0059fb0c 753e7c04 AntiDebug!mainCRTStartup+0x8
    09 0059fb20 7752ad1f KERNEL32!BaseThreadInitThunk+0x24
    0a 0059fb68 7752acea ntdll!__RtlUserThreadStart+0x2f
    0b 0059fb78 00000000 ntdll!_RtlUserThreadStart+0x1b
可以看到该调用来自于ntdll!ExecuteHandler2。此函数是调用任何SEH处理程序的起点。可以在调用指令中设置断点：
    0:000> u ntdll!ExecuteHandler2+24 L3
    ntdll!ExecuteHandler2+0x24:
    775100af ffd1            call    ecx
    775100b1 648b2500000000  mov     esp,dword ptr fs:[0]
    775100b8 648f0500000000  pop     dword ptr fs:[0]
    0:000> bp 775100af
设置断点后，应该分析每个调用SEH处理程序的代码。如果涉及到对SEH处理函数的多次调用，则很难进行下一步反调试工作了。
# VEH（向量化异常处理）
Veh是在WindowsXP中引入的，是SEH的变体。Veh和SEH不是相互依赖的，他们两个是可以同时工作的。添加新的VEH处理程序时，SEH链不会受到影响，因为VEH处理程序列表存储在`ntdll!LdrpVectorHandlerList`未导出变量中。VEH和SEH机制非常相似，唯一的区别是公开的函数用于设置和删除VEH处理程序。添加和删除VEH处理程序以及VEH处理函数的原函数签名如下：
    PVOID WINAPI AddVectoredExceptionHandler(
        ULONG                       FirstHandler,
        PVECTORED_EXCEPTION_HANDLER VectoredHandler
    );
    ULONG WINAPI RemoveVectoredExceptionHandler(
        PVOID Handler
    );
    LONG CALLBACK VectoredHandler(
        PEXCEPTION_POINTERS ExceptionInfo
    );
    The _EXCEPTION_POINTERS structure looks like this:  
    typedef struct _EXCEPTION_POINTERS {
      PEXCEPTION_RECORD ExceptionRecord;
      PCONTEXT          ContextRecord;
    } EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
在处理程序中接收控制权之后，系统收集当前进程上下文并通过ContextRecord参数传递。下面是使用向量异常处理的反调试保护代码示例：
    LONG CALLBACK ExceptionHandler(PEXCEPTION_POINTERS ExceptionInfo)
    {
        PCONTEXT ctx = ExceptionInfo->ContextRecord;
        if (ctx->Dr0 != 0 || ctx->Dr1 != 0 || ctx->Dr2 != 0 || ctx->Dr3 != 0)
        {
            std::cout Eip += 2;
        return EXCEPTION_CONTINUE_EXECUTION;
    }
    int main()
    {
        AddVectoredExceptionHandler(0, ExceptionHandler);
        __asm int 1h;
        return 0;
    }
在这里，我们设置了一个VEH处理程序，并生成了一个中断(不需要int1h)。当产生中断时，将出现异常并将控制权转移到VEH处理程序。如果设置了硬件断点，则程序执行将停止。如果没有硬件断点，则EIP寄存器的值将增加2，以便在INT1h生成指令之后继续执行。
# 如何绕过硬件断点检查和VEH
让我们看看导致VEH处理程序的调用堆栈：
    0:000> kn
     # ChildEBP RetAddr  
    00 001cf21c 774d6822 AntiDebug!ExceptionHandler 
    01 001cf26c 7753d151 ntdll!RtlpCallVectoredHandlers+0xba
    02 001cf304 775107ff ntdll!RtlDispatchException+0x72
    03 001cf304 00bf4a69 ntdll!KiUserExceptionDispatcher+0xf
    04 001cfc1c 00c2680e AntiDebug!main+0x59 
    05 001cfc30 00c2665a AntiDebug!invoke_main+0x1e 
    06 001cfc88 00c264ed AntiDebug!__scrt_common_main_seh+0x15a 
    07 001cfc90 00c26828 AntiDebug!__scrt_common_main+0xd 
    08 001cfc98 753e7c04 AntiDebug!mainCRTStartup+0x8 
    09 001cfcac 7752ad1f KERNEL32!BaseThreadInitThunk+0x24
    0a 001cfcf4 7752acea ntdll!__RtlUserThreadStart+0x2f
    0b 001cfd04 00000000 ntdll!_RtlUserThreadStart+0x1b
控制权已从main+0x59转移到ntdll!KiUserExceptionDispatcher。接下来看一下main+0x59中负责该操作的具体指令：
    0:000> u main+59 L1
    AntiDebug!main+0x59
    00bf4a69 cd02            int     1
KiUserExceptionDispatcher函数是系统从内核模式调用到用户模式的回调方法之一。以下是它的签名：
    VOID NTAPI KiUserExceptionDispatcher(
        PEXCEPTION_RECORD pExcptRec, 
        PCONTEXT ContextFrame
    );
下一个代码示例演示如何通过KiUserExceptionDispatcher函数钩子来绕过硬件断点检查：
    typedef  VOID (NTAPI *pfnKiUserExceptionDispatcher)(
        PEXCEPTION_RECORD pExcptRec,
        PCONTEXT ContextFrame
        );
    pfnKiUserExceptionDispatcher g_origKiUserExceptionDispatcher = NULL;
    VOID NTAPI HandleKiUserExceptionDispatcher(PEXCEPTION_RECORD pExcptRec, PCONTEXT ContextFrame)
    {
        if (ContextFrame && (CONTEXT_DEBUG_REGISTERS & ContextFrame->ContextFlags))
        {
            ContextFrame->Dr0 = 0;
            ContextFrame->Dr1 = 0;
            ContextFrame->Dr2 = 0;
            ContextFrame->Dr3 = 0;
            ContextFrame->Dr6 = 0;
            ContextFrame->Dr7 = 0;
            ContextFrame->ContextFlags &= ~CONTEXT_DEBUG_REGISTERS;
        }
    }
    __declspec(naked) VOID NTAPI HookKiUserExceptionDispatcher() 
    // Params: PEXCEPTION_RECORD pExcptRec, PCONTEXT ContextFrame
    {
        __asm
        {
            mov eax, [esp + 4]
            mov ecx, [esp]
            push eax
            push ecx
            call HandleKiUserExceptionDispatcher
            jmp g_origKiUserExceptionDispatcher
        }
    }
    int main()
    {
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        g_origKiUserExceptionDispatcher = (pfnKiUserExceptionDispatcher)GetProcAddress(hNtDll, "KiUserExceptionDispatcher");
        Mhook_SetHook((PVOID*)&g_origKiUserExceptionDispatcher, HookKiUserExceptionDispatcher);
        return 0;
    }
在本例中，DRx寄存器的值在`HookKiUserExceptionDispatcher`函数中重置，
# NtSetInformationThread-从调试器中隐藏线程
在Windows2000中，出现了传递到NtSetInformationThread函数的新线程信息类-`ThreadHideFromDebugger`。它是Windows提供的第一个反调试技术之一，功能非常强大。如果为某个线程设置了此标志，则该线程将停止发送有关调试事件的通知。这些事件包括断点和有关程序完成的通知。该标志的值存储于`_ETHREAD`结构的`HideFromDebugger`字段中。
    1: kd> dt _ETHREAD HideFromDebugger 86bfada8
    ntdll!_ETHREAD
       +0x248 HideFromDebugger : 0y1
下面是如何从调试器设置ThreadHideFromDebugger的示例：
    typedef NTSTATUS (NTAPI *pfnNtSetInformationThread)(
        _In_ HANDLE ThreadHandle,
        _In_ ULONG  ThreadInformationClass,
        _In_ PVOID  ThreadInformation,
        _In_ ULONG  ThreadInformationLength
        );
    const ULONG ThreadHideFromDebugger = 0x11;
    void HideFromDebugger()
    {
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        pfnNtSetInformationThread NtSetInformationThread = (pfnNtSetInformationThread)
            GetProcAddress(hNtDll, "NtSetInformationThread");