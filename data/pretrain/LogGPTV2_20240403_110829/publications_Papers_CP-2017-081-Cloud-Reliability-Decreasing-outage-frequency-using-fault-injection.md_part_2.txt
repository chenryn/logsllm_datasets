the number of threads, the larger the average waiting time,
Using qcomputer [6], an R package for queue system
thus diluting the degeneration cause by the server response
simulation, we create a simulated microservice, with ex-
time. To achieve a load of L requests per second with τ
ponentially distributed service times and a Poisson arrival
threads,wegeneratethesleeptimeforthreadsfromarandom
process.Usingthismodel,wegeneratedsamplesofarrivaland
uniform number between 0 and U (milliseconds), according
departure times for different parameterizations, from which to U = 2000τ. Meaning each thread, on average, will make a
we can then calculate response times. We then attempted to request evL ery U milliseconds.
estimate the parameters {λ,µ,c} from the samples, using the 2
estimators described in section II. Using the resulting model, IV. RESULTS
we calculated the predicted response time distribution and This sections presents the results obtained. To measure the
compared it to the empirical distribution of the sample, to error we calculated both MSE and Bias.
calculate the MSE between both.
A. Simulation with qcomputer
B. Experiment with a Microservice
We experimented with five settings in the simulation. The
Totesttheapproachinamorerealisticsetting,wheresome values [1,1,2,3,3] for c, 30 for all µ and [1,25,50,75,80]
assumptions may not hold, we deployed a microservice-based for λ, were used.
application on a virtual machine with 16 vCores and 32GiB Using the sliding window average method, we obtained the
of system memory, running Ubuntu Server 16.04.3 LTS. The results in Table II. Only the estimation in the first line is
services, respectively, data stores and load balancers were acceptable,and,infact,verygood.Thisshowstheimportance
packaged in docker containers and orchestrated and scaled of selecting the correct sample for estimating service rate,
using docker compose. The target microservice was behind as their quality will be inversely correlated with occupation.
a simple gateway service, and an nginx load balancer. Mea- The best estimator for service rate µ, it was used to model
surements of arrival and departure time, measured from the all the other settings, as they refer to the same simulated
loadbalancer,wereextractedusingOpenTracing[7]compliant microservice. We know the load to be constant and the inter-
tracing instrumentation. arrivaltimesexponentiallydistributed,foreachsetting,wegot
To load the deployments with approximately exponen- an estimate for arrival rate by the moments method.
tially distributed inter-arrival request times, we used Apache When it came time to get an estimate of the parallelism
JMeter. The naive approach would be to have each client of the service, c, we employed both Park et al. [5] and our
thread sleeping for an exponentially distributed time between alternative method to calculate it by minimizing the MSE. In
requests. However, since a client thread can only start a new Table III, presents the estimations obtained.
request once it gets the previous reply, most time they will For each setting, we calculated the predicted cumulative
be left waiting for a reply, thus degenerating the distribution distributionfunctionCDF(λ,µ , c,t)andtheempiricalcumu-
of inter-arrival times away from the desired exponential. To lative distribution function eCDF(t) and calculated the MSE
mitigate this effect, we attempted to simulate a large number between samplings from those two functions. Figure 1 shows
ofclientsgeneratingloadatrandomintervals,whichisknown the eCDF values, the prediction CDF and the cumulative
Setting S2 Setting S3 Setting S4 Setting S5
0.1 0.1 0.1 0.1
8.0 8.0 8.0 8.0
6.0)t(FDC4.0 6.0)t(FDC4.0 6.0)t(FDC4.0 6.0)t(FDC4.0
2.0 2.0 2.0 2.0
EeCCx DpDFF EeCCx DpDFF EeCCx DpDFF EeCCx DpDFF
0.0 0.0 0.0 0.0
0.0 0.5 t 1.0 1.5 0.0 0.2 0.4 t 0.6 0.8 1.0 0.0 0.1 0.2 0t.3 0.4 0.5 0.6 0.0 0.2 t0.4 0.6
Setting R2 Setting R3 Setting R4 Setting R5
0.1 0.1 0.1 0.1
8.0 8.0 8.0 8.0
6.0)t(FDC4.0 6.0)t(FDC4.0 6.0)t(FDC4.0 6.0)t(FDC4.0
2.0 2.0 2.0 2.0
EeCCx DpDFF EeCCx DpDFF EeCCx DpDFF EeCCx DpDFF
0.0 0.0 0.0 0.0
0.0 0.1 0.2 t 0.3 0.4 0.5 0.0 0.1 0.2 t 0.3 0.4 0.5 0.0 0.1 0.2 t 0.3 0.4 0.5 0.0 0.1 0.2 t 0.3 0.4 0.5
Fig.1. ComparisonofCDF(λ,µ , c,t)andeCDF(t)forsimulatedsettingsandrealsettings.
TABLEIV TABLEV
PARAMETERESTIMATIONRESULTS. PREDICTIONMEANSQUAREERROR(MSE)ANDBIAS.
Setting λ µ c(Parketal.) c(Optim.) Parketal. Optimization
 Setting
R1 16.16 17.50 1 2 MSE Bias MSE Bias
R2 24.46 17.92 2 2 R1 0.082144 -0.195274 0.000704 0.014506
R3 48.86 28.05 3 3 R2 0.000912 0.003089 0.000912 0.003089
R4 73.09 29.62 5 5 R3 0.001453 0.007380 0.001453 0.007380
R5 90.91 24.91 7 5 R4 0.003610 0.012120 0.003610 0.012120
R5 0.006047 0.030471 0.002498 0.019917
distribution function of an exponential distribution of rate TABLEVI
µ (“Exp” in the plots), which represents the distribution of PERFORMANCEPREDICTIONS.
service time (S). In simple terms, this would be the expected
Setting ρ E[Q] E[T]
response time distribution if there was no queue time. The R1 0.46 0.25 0.073
exact values are available in Table III. The MSE and Bias R2 0.68 1.19 0.104
R3 0.58 0.46 0.045
value demonstrate that eCDF(t) and CDF(λ,µ , c,t) are
R4 0.49 0.12 0.035
quite close to each other, in the simulated environment. To
R5 0.73 1.16 0.053
conserve space, we omitted the figure for the best setting.
B. Experiment With a Microservice
not the only determining factor, E[T] slowly decreases as c
We used five deployment settings to evaluate the param- grows as the chance of finding an available server increases.
eterization technique and adequacy of the resulting model Whiletheresultsstillhaveacceptableerror,theynotasgood
with the number of instances taking the values [1,1,2,3,3] as the ones from the simulated experiment. This observation
and [16,25,50,75,85] for arrival rate. Given the arrival and is explored in detail in Section V.
departure times for each request, we estimated the model
V. DISCUSSION
parameters. The service rate was estimated using the sliding
windowmethod,tomaintainindependencefromc.Parallelism, The experiments with the simulated data exposed two
c, was obtained using two methods, the one proposed by importantaspects.First,thequalityoftheestimationofservice
Park et al. [5], and the optimization that minimizes the MSE rate (µ) is very dependent on occupation. To get a good
between observed and predicted response times. Table IV estimate of service rate, we need to sample it under low
shows the results of the estimation step. occupation. With setting S1, we were able to get an estimate
The second method (Optim.) produced better estimations µ, and accurately predict the behavior of the other settings.
and was used for the remainder of the experiment. Note In a real setting there are measurement imprecisions and
however, that they could in principle be used together to get external factors. In this particular case, we noticed that due
a higher quality estimation. to some implementation detail, the service time was not
CDF(λ,µ , c,t) was calculated for each sample and com- independentfromthenumberofinstances,andimprovedwith
pared to their eCDF(t) (Figure 1). Table V shows the the number of instances (refer to Table IV). This might be an
predictionerror.Besidespredictingthecumulativedistribution artifact of some caching at the back-end, in this case a shared
function, we also calculated some other typical queueing datastore,whichisadistortionoftheintendedsetting.Sofar,
system performance metrics, namely, mean queue length and we avoided more general queuing systems (G/G/c), as they
mean request time. Table VI shows the resulting values, are not easily composable and lack closed solutions.
enabling a comparison between performance metrics and the There are some limitations inherent to the approach. The
occupation rate. Note that E[T] increases as ρ → 1 but it is estimationmethodforservicerateisverysensitivetooccupa-
tion,thusrequiringafavorablesamplingperiod,whereloadon times under any load and determine the required number
themicroservicetobemodeledislow.Theestimationmethods of instances to maintain a desired quality of service. The
for parallelism have distinct limitations. The one proposed by individual models are composable, for example as networks,
Park et al. [5] requires having complete sampling, starting at and canin the futurebe used toreason aboutthe performance
an instant when there were no requests in the system The of the resulting system. In that setting, as the model gives
optimization method, requires already having a good estimate an implicit notion of capacity, they can additionally be used
of service rate, and will be dependent on its quality. for bottleneck detection and optimal resource allocation at a
As for the model itself, since E[T] grows asymptotically to global level.
infinity as ρ → 1, the model is far more sensitive to error in
estimation, under higher loads, for which we are attempting ACKNOWLEDGMENTS
to predict the distribution of T.
This work was carried out under the project PTDC/EEI-
Our goal for the future is composing the individual models
ESS/1189/2014 — Data Science for Non- Programmers, sup-
in networks. A deeper characterization and further study of
portedbyCOMPETE2020,Portugal2020-POCI,UE-FEDER
this modeling approach is necessary. As such, we will run
and FCT. We would also like to express our gratitude to the
additional experiments in a more varied set of instrumented
INCD - Infraestrutura Nacional de Computac¸a˜o Distribu´ıda,
microservices. To model services in place in a production
for providing access to their computational resources.
setting, methods to quantify the impact of services on other
upstream services, which depend on them, will have to be REFERENCES
developed. For services that have more general service rates,
we will attempt to model them as tandem queues. [1] R. P. R. Filipe and F. Araujo, “Client-side black-box monitoring for
web sites,” in 2017 IEEE 16th International Symposium on Network
ComputingandApplications(NCA),Oct2017.
VI. RELATEDWORK
[2] R. R. Sambasivan, I. Shafer, J. Mace, B. H. Sigelman, R. Fonseca,
The literature is rich with approaches to model and analyze and G. R. Ganger, “Principled workflow-centric tracing of distributed
systems. Bahl et al. [8], uses network traffic to create and systems,” in Proceedings of the Seventh ACM Symposium on Cloud
Computing - SoCC ’16. New York, New York, USA: ACM Press,
inference Graph model, to check service degradation and fail- 2016,pp.401–414.
uresinanenterprisenetwork.However,itneedstheenterprise [3] A.A.Shahin,“EnhancingElasticityofSaaSApplicationsusingQueuing
Theory,”IJACSA)InternationalJournalofAdvancedComputerScience
network topology, and therefore it is closely coupled to the
andApplications,vol.8,no.1,pp.279–285,2017.
system. Urgaonkar et al. [9], propose an analytically model,
[4] I.AdanandJ.Resing,“Queueingtheory,”2015.
for multi-tier internet services, using multi-tier queue, where [5] J.Park,Y.B.Kim,andT.R.Willemain,“Analysisofanunobservable
each queue representing different layers of the application. queue using arrival and departure times,” Computers and Industrial
Engineering,vol.61,no.3,pp.842–847,2011.
Similarly, Bi et al. [10], use M/M/c queues in an open
[6] A. Ebert, P. Wu, K. Mengersen, and F. Ruggeri, “Computationally
networktomodelmulti-tiersystemsfordynamicprovisioning Efficient Simulation of Queues: The R Package queuecomputer,” mar
in cloud deployments. Although associate with our approach, 2017.
[7] “Opentracing,”http://opentracing.io/,retrievedOct,2017.
they aim to model multi-tier services, while our goal is to
[8] P. Bahl, R. Chandra, A. Greenberg, S. Kandula, D. A. Maltz, and
createmodelofmicroservice-baseddistributedsystems.Using M. Zhang, “Towards highly reliable enterprise network services via
networks of queues or layered queues is suggested in various inference of multi-level dependencies,” SIGCOMM Comput. Commun.
Rev.,vol.37,no.4,pp.13–24,Aug.2007.
works [11]–[13]. However they focus on manual modeling at
[9] B.Urgaonkar,G.Pacifici,P.Shenoy,M.Spreitzer,andA.Tantawi,“An
design time or from deep knowledge of the system, instead of analytical model for multi-tier internet services and its applications,”
trying to extract them from an existing system or considering SIGMETRICS Perform. Eval. Rev., vol. 33, no. 1, pp. 291–302, Jun.
2005.
other data driven approaches. There are approaches to model
[10] J.Bi,Z.Zhu,R.Tian,andQ.Wang,“Dynamicprovisioningmodeling
the performance and response times of services, [14] suggests forvirtualizedmulti-tierapplicationsinclouddatacenter,”inProceed-
modeling classic web servers as M/G/1/K∗PS queues. ings - 2010 IEEE 3rd International Conference on Cloud Computing,
CLOUD2010. IEEE,jul2010,pp.370–377.
Whileothershaveexploredsimilarapproaches,modelswith
[11] H.Li,“AQueueTheoryBasedResponseTimeModelforWebServices
no assumption about processing time, like M/G/1, G/G/c, Chain,” 2010 International Conference on Computational Intelligence
although more expressive have no closed analytical solutions andSoftwareEngineering,pp.1–4,2010.
[12] W.-p.Yang,L.-c.Wang,andH.-p.Wen,“Aqueueinganalyticalmodel
and cannot be easily composed. Heinrich et al. [15] explores
for service mashup in mobile cloud computing,” 2013 IEEE Wireless
the intricacies of microservice-based systems and lays out CommunicationsandNetworkingConference(WCNC),pp.2096–2101,
the existing challenges. He points out that existing modeling apr2013.
[13] J. Dilley, R. Friedrich, T. Jin, and J. Rolia, “Web server perfor-
approaches are not adequate for the typical scenarios of the
mance measurement and modeling techniques,” Performance Evalua-
modern microservice-based systems. tion,vol.33,no.1,pp.5–26,jun1998.
[14] J. Cao, M. Andersson, C. Nyberg, and M. Kihl, “Web Server Perfor-
VII. CONCLUSION mance Modeling using an M/G/1/K*PS Queue,” in 10th International
ConferenceonTelecommunications,ICT2003,vol.2,no.2,2003,pp.
Inthispaperweproposedaqueuingtheorybasedmodeling
1501–1506.
approach to characterize the performance of microservice- [15] R. Heinrich, A. van Hoorn, H. Knoche, F. Li, L. E. Lwakatare,
based systems. Models of individual microservices can be C. Pahl, S. Schulte, and J. Wettinger, “Performance Engineering for
Microservices,”inProceedingsofthe8thACM/SPEConInternational
used to characterize their response time distribution. The
ConferenceonPerformanceEngineeringCompanion-ICPE’17Com-
accompanyinganalyticaltoolscanbeusedtopredictresponse panion. NewYork,NewYork,USA:ACMPress,2017,pp.223–226.