title:A Heuristic Framework to Detect Concurrency Vulnerabilities
author:Changming Liu and
Deqing Zou and
Peng Luo and
Bin B. Zhu and
Hai Jin
A Heuristic Framework to Detect Concurrency Vulnerabilities
Changming Liu, Deqing Zou∗
Bin B. Zhu
Hai Jin
Peng Luo
Service Comp. Tech. and System Lab,
Cluster and Grid Computing Lab,
School of Computer Sci. and Tech.,
Huazhong Univ. of Sci. and Tech.
Wuhan, China
Microsoft Research Asia
Beijing, China
PI:EMAIL
Service Comp. Tech. and System Lab,
Cluster and Grid Computing Lab,
School of Computer Sci. and Tech.,
Huazhong Univ. of Sci. and Tech.
Wuhan, China
ABSTRACT
With a growing demand of concurrent software to exploit multi-
core hardware capability, concurrency vulnerabilities have become
an inevitable threat to the security of today’s IT industry. Existing
concurrent program detection schemes focus mainly on detecting
concurrency errors such as data races, atomicity violation, etc.,
with little attention paid to detect concurrency vulnerabilities that
may be exploited to infringe security. In this paper, we propose a
heuristic framework that combines both static analysis and fuzz
testing to detect targeted concurrency vulnerabilities such as con-
currency buer overow, double free, and use-after-free. The static
analysis locates sensitive concurrent operations in a concurrent pro-
gram, categorizes each nding into a potential type of concurrency
vulnerability, and determines the execution order of the sensitive
operations in each nding that would trigger the suspected concur-
rency vulnerability. The results are then plugged into the fuzzer
with the execution order xed by the static analysis in order to
trigger the suspected concurrency vulnerabilities.
In order to introduce more variance which increases possibility
that the concurrency errors can be triggered, we also propose ma-
nipulation of thread scheduling priority to enable a fuzzer such as
AFL to eectively explore thread interleavings in testing a concur-
rent program. To the best of our knowledge, this is the rst fuzzer
that is capable of eectively exploring concurrency errors.
In evaluating the proposed heuristic framework with a bench-
mark suit of six real-world concurrent C programs, the framework
detected two concurrency vulnerabilities for the proposed con-
currency vulnerability detection, both being conrmed to be true
positives, and produced three new crashes for the proposed inter-
leaving exploring fuzzer that existing fuzzers could not produce.
These results demonstrate the power and eectiveness of the pro-
posed heuristic framework in detecting concurrency errors and
vulnerabilities.
∗Corresponding author: Deqing Zou (PI:EMAIL). This work was sup-
ported by the National 973 Fundamental Basic Research Program under grant No.
2014CB340600.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specic permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274718
1030
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
140 
141 
142 
143 
529
CCS CONCEPTS
• Security and privacy → Software security engineering;
KEYWORDS
Concurrency Vulnerabilities, Fuzzing Test, Thread Schedule.
ACM Reference Format:
Changming Liu, Deqing Zou, Peng Luo, Bin B. Zhu, and Hai Jin. 2018.
A Heuristic Framework to Detect Concurrency Vulnerabilities. In 2018
Annual Computer Security Applications Conference (ACSAC ’18), December
3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, 13 pages. https:
//doi.org/10.1145/3274694.3274718
1 INTRODUCTION
Concurrent programs can provide signicantly more computing
power than sequential programs and have been applied in many
demanding applications, e.g. cloud services. However, concurrent
programs are prone to concurrency vulnerabilities that may cause
severe consequences, e.g. dirty copy on write[31], a well-known
concurrency vulnerability found in the Linux kernel, and attacks
specically targeting at concurrent programs to disrupt condential-
ity, integrity or availability of the system [33]. It is a great challenge
to detect concurrency bugs and vulnerabilities since there are too
many interleavings in a typical concurrent program.
thread 1
if (type == rr->type) /* SSL3_RT_APPLICATION_DATA or SSL3_RT_HANDSHAKE */
{
[...]
if (!peek)
{
rr->length-=n;
rr->off+=n;
if (rr->length == 0)
{
s->rstate=SSL_ST_READ_HEADER;
rr->off=0;
if (s->mode & SSL_MODE_RELEASE_BUFFERS)
ssl3_release_read_buffer(s);
}
}
return(n);
}
thread 2
124 int ssl3_read_n(SSL *s, int n, int max, int extend)
125 {
[...]
rb = &(s->s3->rbuf);
if (rb->buf == NULL)
if (!ssl3_setup_read_buffer(s))
return -1;
Figure 1: CVE-2010-5298 in s3_pkt.c of OpenSSL
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Changming Liu, Deqing Zou, Peng Luo, Bin B. Zhu, and Hai Jin
Fig. 1 shows a real-world concurrency use-after-free vulnerabil-
ity found in s3_pkt.c of OpenSSL. This vulnerability is triggered
at line 143 where thread 2 sets up a buer s for later usage, and
before the buer is used, another thread, thread 1, releases this same
piece of memory s at line 1059. This would allow remote attackers
to inject data across sessions or cause denial of service [17]. The
patch to this vulnerability is simply to add a condition inside the
if-condition clause at line 1058 to check if there is still unprocessed
data left in s before releasing it at line 1059 [18].
Detecting concurrency errors has been extensively studied, mainly
focusing on detecting data races, i.e. multiple simultaneous accesses
to shared memory with at least one write. Both static and dynamic
approaches have been used. However, methods aiming at detect-
ing data races in concurrent programs are generally inadequate in
detecting real-world concurrency vulnerabilities that can happen
even when a concurrent program is race-free. For example, in the
case shown in Fig. 1, making the two threads’ accesses to the shared
buer s, i.e. lines 142 and 1059, race-free would not prevent the
aforementioned vulnerability from happening.
The concurrency vulnerability shown in Fig. 1 is similar to the
order violation described in [21, 36], wherein multiple concurrent
accesses, protected by a lock respectively, to shared memory can
cause crashes of the program. If the free operation at line 1059
is executed after nishing using the buer, the vulnerability will
never occur. On the other hand, if their execution order is reversed,
the vulnerability will occur. In a concurrent program, the execution
order of threads may be uncontrollable, and a wrong execution order
may occur, leading to a vulnerability that may be exploited to inject
data across sessions or cause denial of service. Existing methods
[21, 36] of detecting order violation are all based on monitoring
memory accesses, e.g. read/write, and the order violations they can
detect are likely to cause concurrency errors instead of concurrency
vulnerabilities that this paper focuses on. This limitation has been
lifted in our approach.
In this paper, we propose a heuristic framework that combines
both static analysis and fuzz testing to detect concurrency vulnera-
bilities, particularly concurrency buer overows, double-free, the
two most common concurrency vulnerabilities as reported in the
National Vulnerability Database [16], and the aforementioned con-
currency use-after-free. A concurrency buer overow typically
occurs when two threads access shared memory and one of them
modies the shared memory, possibly with maliciously crafted con-
tent, before the other passes the shared memory to a memcpy-like
function. A real-world concurrency buer overow example will
be presented in Section 3. Concurrency double-free is intuitive: two
concurrent free operations on the same memory, and this can result
in undened behaviors. In addition, we also propose an interleaving
exploring strategy in the heuristic framework to enable fuzz test-
ing to explore thread interleavings eectively so that it can detect
concurrency errors in concurrent programs more eciently.
Our framework consists of the following three main techniques
we have developed:
• Static Analysis for Concurrent Operations. In this paper,
we use static analysis to detect sensitive concurrent opera-
tions that are likely to lead to concurrency vulnerabilities.
530
More specically, we collect a set of sensitive concurrent op-
erations and distill distinct operation patterns for each type
of concurrency vulnerability by studying the characteristics
of real-world concurrency vulnerabilities, and leverage static
analysis to locate sensitive concurrent operations, whether
protected by mutex or not, in a program. We compare each
nding against the operation patterns of each type of con-
currency vulnerability, and categorize it to a certain type of
vulnerability, e.g. a concurrency buer overow, double-free,
or use-after-free that we have chosen as an example to study
the proposed heuristic framework in this paper. We should
point out that our framework can be readily extended to
detect other types of concurrency vulnerabilities.
• Exploring Thread Interleavings in Fuzz Testing. Fuzz
testing is criticized for being inadequate to detect concur-
rency errors. One major reason is that, although very capa-
ble of exploring new branches at conditional jumps, current
state-of-the-art fuzzers such as AFL [13] are unaware of
thread scheduling and thus cannot explore enormous inter-
leavings as capable as they are in exploring path changes.
To enable a fuzzer to explore thread interleavings as eec-
tively as it explores path changes, we develop a thread-aware
fuzzer that randomizes priorities of forked threads to explore
thread interleavings to cover as many interleavings as pos-
sible, i.e., in each iteration of fuzz testing, we select one or
more threads to manipulate their priorities towards untested
interleavings. This ensures that more interleavings are likely
to be explored with increasing iterations of fuzz testing. We
have found several new crashes using this approach. To the
best of our knowledge, we are the rst to design a fuzzer to ef-
fectively explore thread interleavings to detect concurrency
errors/vulnerabilities.
• Targeting Scheduling for Sensitive Concurrent Opera-
tions. Like order violation mentioned in [21, 36], the exe-
cution order of concurrent operations is typically critical
in triggering concurrency vulnerabilities. For example, the
vulnerability shown in Fig. 1 can be triggered only if the
free operation is called before the shared memory is used.
Unlike order violation detection schemes in [21, 36] that
detect order violation patterns in run time, we rst apply
static analysis to locate sensitive concurrent operations and
identify the potential concurrency vulnerabilities they may
lead to as well as the specic execution order to trigger each
potential vulnerability. The information enables us to in-
sert priority adjusting code to force the sensitive concurrent
operations of a potential concurrency vulnerability to be exe-
cuted in the specic order in fuzz testing so that the potential
vulnerability has a high chance to be triggered.
This paper has the following major contributions by proposing:
• A novel approach to eectively detect concurrency vulner-
abilities: locating sensitive concurrent operations that may
lead to a potential concurrency vulnerability and forcing a
specic execution order of threads to trigger the potential
concurrency vulnerability in fuzz testing. By studying the
characteristics of some common real-world concurrency vul-
nerabilities, we have found that each type of concurrency
A Heuristic Framework to Detect Concurrency Vulnerabilities
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
vulnerability has a few sensitive concurrent operations and
distinct operation patterns. This allows us to apply static
analysis to locate sensitive concurrent operations that po-
tentially lead to a concurrency vulnerability and to use the
operation patterns to identify the potential type of concur-
rency vulnerability along with the specic execution order to
trigger it. This enhances the opportunity to trigger the con-
currency vulnerability in fuzz testing by adjusting thread’s
priorities to force the program to be executed in the desig-
nated execution order.
• An eective method to explore thread interleavings of con-
current programs in fuzz testing: randomizing priorities of
threads to explore as many interleavings as possible. This
can be achieved by injecting code to adjust threads’ priorities,
forcing threads to sleep for a random or specic time, etc.,
towards untested interleavings. This empowers a fuzzer to
explore eectively not only code paths but also concurrent
interleavings and can signicantly improve the eectiveness
of fuzz testing on testing concurrent programs.
This paper is organized as follows. We present the related work
in Section 2 and study real-world examples of concurrency vulner-
abilities in Section 3. Our static analysis is described in Section 4,
and the fuzzing strategies for concurrent programs are described in
Section 5. Our implementation of the proposed heuristic framework
is described in Section 6, and the evaluation results are presented in
Section 7. Limitations of the current implementation of the heuris-
tic framework and the future work are described in Section 8. The
paper concludes with Section 9.
2 RELATED WORK
2.1 Static Analysis to Detect Concurrency
Problems
Many static approaches have been proposed to handle concurrency
problems, such as [23, 28, 29]. Context-sensitive correlation analysis
is proposed in [23] to check if every memory location in a program
is consistently correlated with a lock, and its detection is proved
to be accurate. Aiming at the same, the method in [28] employs
a concept of relative lockset to gain signicant scalability. As we
mentioned before, existing static analysis focuses mainly on data
races, which are quite dierent from concurrency vulnerabilities we
focus on. A static method specically for double-fetch situations is
proposed in [29] which designates certain static patterns for double-
fetch situations and detects double-fetch situations by matching
these patterns. This method is scalable and can nd many double-
fetch vulnerabilities, yet it is hard to extend to detect other types
of concurrency vulnerabilities.
2.2 Concurrency Error Detection
Existing concurrency error detection techniques can be classied
into two categories: heuristic techniques and test techniques. Heuris-
tic techniques [19–21] detect concurrency errors based on error
patterns or characteristics. These methods construct heuristic rules
and statically scan the whole program to nd violation of these
rules. These heuristic rules may not catch all running situations, es-