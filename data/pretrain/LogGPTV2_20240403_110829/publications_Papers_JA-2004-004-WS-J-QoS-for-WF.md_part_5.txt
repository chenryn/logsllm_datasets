parameters, input and output logic, realization, exceptions generated, etc. All this
information makes up the task model. The task model has been extended to accommodate
25
the QoS model. Task QoS is initialized at design time and re-computed at runtime when
tasks are executed. During the graphical construction of a workflow process, each task
receives information estimating its quality of service behavior at runtime. This includes
information about its cost, time (duration), and reliability.
The task QoS estimates are composed of two classes of information (see section 5.1):
basic and distributional. The basic class associates with each task QoS dimension the
estimates of the minimum, average, and maximum values that the dimension can take.
The second class, the distributional class, corresponds to the specification of a
distribution function which statistically describes tasks behavior at runtime. Figure 12
illustrates the graphical interface that is used to specify the basic and distributional
information to setup initial QoS metrics.
Figure 12 – Task QoS basic and distributional class
The values specified in the basic class are used by mathematical methods, while the
distributional class information is used by simulation systems.
Once the design of a workflow is completed, it is compiled. The compilation generates
a set of specification files and realization files for each task. The specification files (Spec
files) include information describing the control and data flow of each task. The
realization files include the operations or instructions for a task to be executed at runtime.
For human tasks, HTML files are generated, since they are carried out using a web
browser. For non-transactional tasks, java code files are generated and compiled. At
runtime, the executables are executed automatically by the enactment system. Finally, for
non-transactional tasks a file containing the necessary data to connect to databases is
generated. To enable the enactment system to acquire and manipulate QoS information,
the builder has been extended to generate QoS specification files for each task. For
human tasks we have decided to embed the QoS metrics directly into the HTML forms
that are generated.
7.6.2 Re-Computing QoS Estimates
The initial QoS specifications may not be valid over time. To overcome this difficulty we
re-compute task QoS values for the basic class, based on previous executions, as
described in section 5.1. The same applies for transitions. The distributional class also
needs to have its distribution re-computed. This involves the analysis of runtime QoS
26
metrics to make sure that the QoS distribution functions associated with a task remain
valid or need to be modified.
The re-computation of QoS estimates for tasks and for transition probabilities is done
based on runtime data generated from past workflow executions that have been stored in
the database log. We have developed a QoS Estimator module that lies between the
builder and the database log. The QoS Estimator creates a QoS model for tasks based on
the information stored in the DBlog. It also calculates transition probability functions
based on the transitions enabled at runtime. Figure 13 illustrate the architecture of the
QoS Estimator module. When a workflow is being designed, if the tasks selected to
compose the workflow have been previously executed, then their QoS metrics are re-
computed automatically using the QoS Estimator module.
QoS Model Construction
QoS Model Construction Statistical
Transition Probability
Transition Probability Computation
DB Data Data
Database
Connector Selection Conversion
Figure 13 – QoS Estimator Module
DB connector. The DB Connector is responsible for the establishment of a connection to
the database. Currently, we support relational databases that implement the JDBC
protocol.
Data Selection. The data selection component allows for the selection of task QoS
metrics, as defined by the designer and tasks previously executed. Four distinct selection
modes exist, and for each one a specific selection function has been constructed. Each
function corresponds to one of the functions presented to re-compute QoS estimates for
tasks in section 5.1. The component can select tasks QoS metrics from information
introduced by the user at design time, from tasks executed in the context of any
workflow, from tasks executed in the context of a specific workflow w, and from tasks
executed from a particular instance i of workflow w.
Data Convertion. Once a subset of the tasks present in the database log is selected, the
data describing their QoS may need to be converted to a suitable format in order to be
processed by the Statistical Computation component. The data conversion component is
responsible for this conversion. For example, if the processing time of a task is stored
using its start execution date and end execution date, the data conversion component
applies the function f(t) = end_execution_date(t) - start_execution_date(t) to compute the
processing time (PT). As another example, let us assume that the reliability of a task is
stored in the database using the keywords done, fail, commit, and abort (as in
ORBWork). In this case, the data conversion component converts the keywords done and
commit to the value 1, indicating the success of the task, and converts the keywords fail
and abort to the value 0, indicating the failure of the task. This abstraction allows the
statistical component to be independent from any particular choice of storing runtime
information.
27
Figure 14 – GUI to calculate QoS estimates
Statistical Computation. Once an appropriate set of tasks has been retrieved from the
database and their QoS data has been converted to a suitable format, it is transferred to
the statistical computation component to estimate QoS metrics. Currently, the module
only computes the minimum, average, and maximum for QoS dimensions, but additional
statistical functions can be easily included, such as standard deviations, average
deviation, and variance.
Four distinct functions have been developed to compute estimates for the tasks
selected in the previous step. Each function is to be used when computing QoS
dimensions and corresponds to four scenarios that can occur.
Model Construction. The QoS Model Construction component uses the information
from the Statistical Computation component and applies a set of functions to re-compute
the QoS model (the functions have been presented in Table 3) for each task. Figure 14
shows the graphical user interface available to set the QoS functions and their associated
weights, and to visualize the QoS estimates automatically computed for workflows,
28
instances, tasks, and transitions. The QoS computation is carried out using the SWR
algorithm (described in the next section).
8 Workflow QoS Computation Example
The Fungal Genome Resource (FGR) laboratory is in the process of reengineering their
workflows. The laboratory technicians, domain experts, and managers have agreed that
an alteration to the Prepare and Sequence and Sequence Processing workflows would
potentially be beneficial when sequencing DNA.
Figure 15 – Prepare and Sequence Workflow
Figure 16 – Sequence Processing Workflow
To improve the efficiency of the processes being managed by the workflow system,
the bioinformatics researchers decided to merge the two processes. The researchers
noticed that the quality of the DNA sequencing obtained was in some cases useless due to
E. coli contamination. Additionally, it was felt that it would be advantageous to use other
algorithms in the sequence processing phase. Therefore, to improve the quality of the
process, the Test Quality task and the SP FASTA task were added.
Clones grown in bacterial hosts are likely to become contaminated. A quick and
effective way to screen for the Escherichia coli (E. coli) contaminants is to compare the
clones against the E. coli genome. For E. coli, this task is made easier with the
availability of its full genome.
29
The task SP FASTA has of the same objective of the task SP BLAST (a task of the
sequence processing sub-workflow). Both tasks compare new DNA sequences to a
repository of known sequences (e.g., Swiss-Prot or GenBank.) The objective is to find
sequences with homologous relationships to assign potential biological functions and
classifying sequences into functional families. All sequence comparison methods,
however, suffer from certain limitations. Consequently, it is advantageous to try more
than one comparison algorithm during the sequence processing phase. For this reason, it
was decided to employ the BLAST (Altschul, Gish et al. 1990) and FASTA (Pearson and
Lipman 1988) programs to compare sequences.
The following actions were taken to reengineer the existing workflows:
a) Merge the Prepare and Sequence workflow from Figure 15 and the Sequence
Processing workflow from Figure 16,
b) Add the task Test Quality to test the existence of E. coli in sequences, and
c) Execute the search for sequences in genome databases using an additional search
algorithm (FASTA).
At this point, the alterations to introduce into the processes have been identified. From
the functional perspective, the lab personnel, domain experts, and workflow designer all
agreed that the new workflow will accomplish the intended objective. The new re-
engineered workflow is named DNA Sequencing. It is illustrated in Figure 17.
Figure 17 – DNA Sequencing Workflow
8.1 Setting QoS Metrics
While the workflow design meets the functional objectives, non-functional requirements
also need to be met. Prior to the execution of the new workflow, an analysis is necessary
to guarantee that the changes to be introduced will actually produce a workflow that
meets desired QoS requirements, i.e., that the workflow time, cost, and reliability remain
30
within acceptable thresholds. To accomplish this, it is necessary to analyze the QoS
metrics and use the SWR algorithm (Cardoso 2002; Cardoso 2002) to compute workflow
quality of service metrics.
The first step is to gather QoS estimates for the tasks involved in the Prepare and
Sequence and Sequence Processing workflows. These workflows have been executed
several times in the past, and the workflow system has recorded their QoS metrics. The
designer QoS estimates have been set using the following methods. For human tasks, the
laboratory technicians and researchers have provided estimates for the QoS dimensions.
For automated tasks, we have used training sets. For example, for the SP BLAST task we
have constructed a training set of sequences of different lengths. The sequences have
been processed with BLAST, and their QoS has been recorded. For the time dimension,
we have used linear regression to predict future metrics (the BLAST algorithm has a
linear running time (Altschul, Gish et al. 1990).) Equation 1 was used to estimate the
BLAST running time to process a sequence:
n  n  n 
n∑x y −∑x ∑y 
i i  j k
i=1  j=1  k=1 
y =a+bx, a=Y −bX and b= (1)
2
n  n 
n∑x2 −∑x 
l m
l=1 m=1
where x is the independent data (input size) and y is the dependent data (running time).
The estimated function is defined as:
y = a+bx, with a = 78.37,b =0.0071 (2)
For the new tasks introduced (Test Quality and SP FASTA), no QoS runtime
information is available. The only QoS information that can be used to compute the
workflow QoS is the one the designer specified at design time. The initial QoS estimates
are shown in Table 4.
Designer Specifications
Tasks T(t) C(t) R(t)
Quality Test 0.01 $0.0 100%
SP FASTA 9.59 $0.0 100%
Table 4 – Test Quality and FASTA initial QoS estimates
Since the SP FASTA task is an automated task, we have used a training set of
sequences to derive and set designer QoS estimates. For the time dimension, we have
used the linear regression from Equation 1 and defined the function represented in
Equation 3 to estimate its duration (FASTA has a linear running time (Pearson and
Lipman 1988).)
31
y = a+bx, with a = 1061.9,b = 4.11 (3)
8.2 Computing QoS Metrics
The domain experts believe that there is a strong agreement between the tasks QoS
exhibited during the execution of the Prepare and Sequence and the Sequence Processing
workflows, and the expected QoS of the tasks to be scheduled by the DNA Sequencing
workflow. This belief is based on the fact that the tasks executed in the two initial
workflows will be executed without any change by the newly constructed workflow. The
following functions have been utilized to re-compute QoS metrics based on designer and
runtime information:
b) QoS ’(t) 0.2*Designer Average (t) + 0.8*Multi-Workflow Average (t)
Dim Dim Dim
c) QoS (t, w) 0.2*Designer Average (t) + 0.2*Multi-Workflow Average (t) +
Dim Dim Dim
0.6*Workflow Average (t, w)
Dim
Table 5 – Re-computation of the QoS dimensions for the DNA Sequencing workflow
To represent the QoS agreement among tasks from different workflows, the domain
experts have decided to set the weights according to the following beliefs. For formula b),
the domain experts believe that the recorded QoS of tasks previously executed will give
good estimates for the execution of tasks scheduled by the new workflow. Thus, the
experts set the weights wi and wi of formula b) to 0.2 and 0.8, respectively. The domain
1 2
experts also believe that as soon as tasks are scheduled by the new workflow, the QoS
estimates should rely on the latest QoS data recorded from the DNA Sequencing
workflow. Also, they consider that when QoS data is available from the DNA Sequencing
workflow, the importance given to the designer estimates should have the same influence
as the QoS estimates recorded for the execution of tasks scheduled by other workflows
than the DNA Sequencing. Therefore, for formula c), the experts set the weights wi , wi ,
1 2
and wi to 0.2, 0.2, and 0.6, respectively. In our experiments, we only predict workflow
3
QoS metrics before the execution of workflow, not during workflow execution; thus, we
did not to set the weights for formula d) from Table 3.
Since the new workflow has a loop that did not exist in any of the previously executed
workflows, it is necessary to estimate the probability of the transition (Test Quality,
Prepare Sample) to be enabled at runtime. Based on prior knowledge of sequencing
experiments, the researchers calculate that approximately 10% of the DNA sequence will
contain E. coli bacteria and that thus there is a 10% probability of the loop back transition
being enabled.
8.3 Results
We have run a set of ten experiments. Each experiment involved the execution of the
SWR algorithm to predict QoS metrics of the DNA Sequencing workflow and the actual
execution of the workflow. The results are shown for the four QoS dimensions in Figure
18. The diamonds indicate the QoS estimates (moving average) given by the SWR
algorithm and the squares indicate empirical runtime metrics. The three dimensions
32
analyzed and presented in Figure 13 show that the predicted results are a good estimation
for the measured ones.
Time Analyzis Cost Analyzis Reliability Analyzis
650.0 Time Analyzis $2,500 100.0%
)sruo)shr(u
550.0 $2,000 99.8% ytilibaileR
645500..00 99.6% tsoC
550.0 $1,500 43 55 00 .. 00 99.4% eomhi(T
325500..00 $1,000 250.0 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 99.2% 1 2 3 4 5 6 7 8 9 10 emiT
1 2 3 4 5 6 7 8 9 10
Instance # Instance # Instance #
Instance #
Estimate Runtime
Figure 18 – Experiment results
For the time analysis, the most relevant information that can be interpreted from the
chart is the observation that the instances 3 and 4 have registered actual running times
that are considerably different from the values estimated. This is due to the topology of
the workflow. During the process, it is expected that some DNA sequences will contain
E. coli contamination. When this happens, re-work is needed, and the first part of the
workflow, involving the tasks Prepare Sample, Prepare Clone and Sequence, and
Assembly, has to be re-executed. The first part of the workflow takes approximately 99%
of the overall workflow execution time. Thus, when E. coli contamination is present in a
sequence, the time needed to execute the workflow almost doubles. Since it is impossible
to know if a DNA sequence will contain E. coli or not, the SWR algorithm gives an
estimate for instance 3 which is significantly different from the registered values. When
instance 4 is executed, the QoS metrics from the previous instance are considered for the
QoS estimation. As a result, it can be seen in the chart that the SWR estimation
approximates the mean of the recent time metrics recorded, i.e. there is an increase of the
time estimate in response to the recent increase of workflow time. If more instances
detect the presence of E. coli contamination, the results of the SWR algorithm for the
time dimension will gradually approximate the 550 hours level. When instances number
5 through 10 are executed, they do not detect the presence of contamination in the
sequences processed. As a result, the SWR estimates are more accurate, and the estimates
start to slowly approximate lower time values.
The costs associated with each task have been provided from technical datasheets
describing the DNA Sequencing process. For the cost analysis, the explanation of the
results observed follows the same rational as the one provided for the time analysis.
The reliability analysis is relatively easy to interpret. For the first instance executed,
the SWR algorithm has used information specified by the designer and derived from task
executions from the Prepare and Sequence and Sequence Processing workflows. The
information suggests that the reliability of the new workflow design will be 99.4%. But
during our experiments, the ten instances executed never failed. Thus, a 100% reliability
value has been registered for each workflow instance. During the instance executions, the
reliability estimates given by the SWR algorithm slowly approximate 100%.
Nevertheless, it is expected that as the workflow system executes more instances, the
reliability of the DNA Sequencing workflow will decrease.
33
For all the QoS dimensions, the speed of approximation of the SWR algorithm is