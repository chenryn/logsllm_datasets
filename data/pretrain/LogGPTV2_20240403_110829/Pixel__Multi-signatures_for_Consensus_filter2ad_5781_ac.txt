public key ahead of time, so that veriﬁcation only requires
two pairing computations.
Differences from prior works. We highlight the differ-
ences between our scheme and those in [14,18,22], assuming
some familiarity with these prior constructions.
• We rely on asymmetric bilinear groups for efﬁciency, and
our signature sits in G2 × G1 instead of G2
2. This way, it
is sufﬁcient to give out the public parameters h0, . . . ,h(cid:96) in
G1 (which we can then instantiate using hash-to-curve
without trusted set-up) instead of having to generate
2 )∈ G1×
“consistent” public parameters (hi,h(cid:48)
G2.
i) = (gxi
1 ,gxi
• Our key-generation algorithm also deviates from that in
the Boneh-Boyen-Goh HIBE, which would set
pk = e(g1,g2)x,h = g1,(cid:101)skε =(cid:0)gr
2,gx
1hr
0,hr
1, . . . ,hr
(cid:96)
(cid:1).
2 lies in G2 instead of Gt and is
In our scheme, pk = gx
therefore smaller. Setting h to be random instead of g1
also allows us to achieve security under weaker assump-
tions. In fact, setting h = g1 and pk = gx
2 would yield
an insecure scheme in symmetric pairing groups where
g1 = g2, since hx = gx
2 = pk.
1 = gx
4.4 Correctness
We say that a secret key skt for time period t is well-formed
if skt = {(cid:101)skw : w ∈ Γt}, where each (cid:101)skw is of the form of
Equation (1) for an independent uniformly distributed expo-
nent r ←$ Zq. We ﬁrst show that all honestly generated and
updated secret keys are well-formed, and then proceed to the
veriﬁcation of signatures.
The key skt is trivially well-formed for t = 1, i.e., t = ε, as
can be seen from the key generation algorithm. We now show
that skt is also well-formed after a regular update from time t
to t + 1 and after a fast-forward update from t to t(cid:48) (cid:31) t.
In a regular update, assume that skt is well-formed. If
which by the second property of Γt and the induction hy-
pothesis means that skt+1 is also well-formed. If |t|  t∗,
• and A never made a signing query for M∗ during time
period t∗.
n), message M∗, and time period t∗,
1, . . . ,pk∗
Our security model covers rogue-key attacks because the
adversary ﬁrst receives the target public key pk, and only
then outputs the list of public keys pk∗
n involved in its
forgery. The only condition on these public keys is that they
are accompanied by valid proofs π∗
1, ...,pk∗
1, ...,π∗
n.
2100    29th USENIX Security Symposium
USENIX Association
5.2 Construction
Let HG1 : {0,1}∗ → G∗
1 be a hash function. The multi-
signature scheme reuses the key update and signature algo-
rithms from the scheme from Section 4.3, but uses different
key generation and veriﬁcation algorithms, and adds signature
and key aggregation.
Key generation. Each signer chooses x ←$ Zq and computes
y ← gx
2 and y(cid:48) ← HG1(PoP,y), where PoP is a ﬁxed string
used as a preﬁx for domain separation. It sets its public key
to pk = y, the proof to π = y(cid:48), and computes its initial secret
key as sk1 ← hx.
Key veriﬁcation. Given a public key pk = y with proof
π = y(cid:48), the key veriﬁcation algorithm validates the proof
of possession by returning 1 if
e(y(cid:48),g2) = e(HG1(PoP,y),y)
keys
public
and returning 0 otherwise.
Key aggregation. Given
pk1 = y1, . . . ,
pkn = yn, the key aggregation algorithm computes
Y ← ∏n
i=1 yi and returns the aggregate public key apk = Y .
Signature aggregation. Given
σ1 =
(σ1,1,σ1,2), . . . ,σn = (σn,1,σn,2) ∈ G1 × G2 on the
same message M, the signature aggregation algorithm
outputs
signatures
Σ = (Σ1,Σ2) = (cid:0) n
(cid:1) .
σi,1 ,
n
∏
i=1
σi,2
∏
i=1
Aggregate veriﬁcation. Multi-signatures are veriﬁed with
respect to aggregate public keys in exactly the same way
as individual signatures with respect to individual public
keys. Namely, given a multi-signature (Σ1,Σ2) ∈ G1 × G2
on message M under aggregate public key apk = Y in time
period t, the veriﬁer accepts if and only if apk (cid:54)= ⊥ and
e(Σ1,g2) = e(h,Y )· e(cid:0)h0 ·
(cid:1) .
|t|
∏
j=1
j · hHq(M)
ht j
(cid:96)+1
, Σ2
5.3 Security
Theorem 2. For any fu-cma adversary A against the above
forward-secure multi-signature scheme for T = 2(cid:96) − 1 time
periods in the random-oracle model, there exists an adver-
sary B with essentially the same running time that solves the
(cid:96)-wBDHI∗
3 problem with advantage
Adv(cid:96)-wBDHI∗
G1×G2
3
(B) ≥ 1
T · qH
· Advfu-cma
FMS (A)− q2
H
2κ ,
where qH is the number of random-oracle queries made by
A.