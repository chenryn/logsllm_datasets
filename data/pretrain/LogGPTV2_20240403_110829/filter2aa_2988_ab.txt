# Replay Attack Analysis and Mitigation

## Introduction
We analyzed the source and process of replay attacks to explain their feasibility in principle. We verified the replay attack based on a signature vulnerability and proposed a defense strategy to prevent this issue.

### Our Contribution
- **Judgment of Contract Compliance**: We determined whether the contract adheres to the ERC20 standard.
- **Vulnerability Scanning**:
  - Set three scanning standards to identify smart contracts with vulnerabilities.
  - Ensured the contract name is valid.
  - Filtered smart contracts vulnerable to replay attacks, resulting in 52 risky targets.
- **Verification of Replay Attack**:
  - Confirmed that two smart contracts allow proxy transactions.
  - If these contracts use a similar mechanism and share the same transaction format, a transaction in one contract will be legal in another, enabling a successful replay attack.

## Why Does the Replay Attack Occur?
The issue lies in the following line of code:
```solidity
bytes32 h = keccak256(_from, _to, _value, _fee, nonce);
```

## Example: Attack Process
1. **Contract Selection**: We chose two ERC20 smart contracts, the UGT contract and the MTC contract.
2. **Account Setup**:
   - Created two accounts, Alice (0x8e65d5349ab0833cd76d336d380144294417249e) and Bob (0x5967613d024a1ed052c8f9687dc74897dc7968d6).
   - Deposited some tokens in both accounts in the UGT and MTC contracts.
   - Used at least one Ethereum full node.

### Verification of the Replay Attack Process
1. **Step One**: Scanned transaction records on the Ethereum blockchain to find accounts with both UGT and MTC tokens (Alice and Bob).
2. **Step Two**: Bob induced Alice to send him 2 UGT tokens. The transaction input data is as follows:
   - Function: `transferProxy(address _from, address _to, uint256 _value, uint256 _feeUgt, uint8 _v, bytes32 _r, bytes32 _s)`
   - MethodID: `0xeb502d45`
3. **Step Three**: Bob extracted the input data from the blockchain, including parameters "from, to, value, fee, v, r, s" from [0] to [6].
4. **Step Four**: Bob used the input data from step two to execute another transfer in the MTC contract. The result of this transaction is shown below.
5. **Step Five**: Bob received not only 2 UGT tokens but also 2 MTC tokens from Alice. The transfer of 2 MTC tokens was unauthorized by Alice.

## Demonstration
### Select Contract
- **UGT Token**: 0x43eE79e379e7b78D871100ed696e803E7893b644
- **MTC Token**: 0xdfdc0D82d96F8fd40ca0CFB4A288955bECEc2088

### Account Setting
- **Alice (Sender)**: 0x8e65d5349ab0833cd76d336d380144294417249e
- **Bob (Receiver)**: 0x5967613d024a1ed052c8f9687dc74897dc7968d6
- Both accounts own some tokens for transferring.

### Core Code
- **Demo**: By April 27th, 2018, 52 Ethereum smart contracts were found to have this replay attack risk.

## Statistics and Analysis
### Vulnerability Groups
- **High-Risk Group (10/52)**: No specific information in the signature, allowing full reuse.
- **Moderate-Risk Group (37/52)**: Fixed string in the signature, still high probability of reuse.
- **Low-Risk Group (5/52)**: Address of the contract or sender in the signature, strong restrictions but still possible.

### Replay Types
- **Replay in the Same Contract (5/52)**: MiracleTele, RoyalForkToken, FirstBlood, KarmaToken, KarmaToken2.
- **Cross-Contracts Replay (45/52)**: Divided into 3 groups based on specific prefix data in signatures.
  - **Group 1 (28/52)**: ARCCoin, BAF, Claes Cash, CNF, CWC, DET, Developeo, Envion, FiCoin, GoldCub, JaroCoin, metax, NODE, NPLAY, SIGMA, solomex, Solomon Exchange, Trump Full Term Token, X, ZEUS TOKEN, cpay.
  - **Group 2 (7/52)**: "\x19Ethereum Signed Message:\n32" - Acore, CLC, CLOUT, CNYToken, CNYTokenPlus, GigBit, The 4th Pillar Token.
  - **Group 3 (10/52)**: BlockchainCutiesFirst, GG Token, M2C Mesh Network, MJ comeback, MTC Mesh Network, SmartMesh Token, UG Token.
- **Replay Between Test Chain and Main Chain (2/52)**: MeshBox, MeshBox2.
- **Replay Between Different Main Chains (0/52)**: None.

### Trading Frequency
- **Active Contracts (63.46%)**:
  - 24 contracts with transaction records within one week (46.15%).
  - 9 contracts with transaction records from one week to one month (17.31%).
  - 16 contracts with transaction records beyond one month (30.77%).
  - 3 contracts with only deployment records (5.77%).

## Countermeasures
- **Designers of Smart Contracts**: Always confirm the suitable range of digital signatures when designing smart contracts.
- **Public Chain Deployment**: Add specific information such as chainID and the name of the public chain.
- **Users of Smart Contracts**: Stay informed about news and reports concerning loophole disclosures.

## Conclusion
The security of smart contracts remains a significant concern. As long as the signature is not limited by the smart contract, there is a possibility of a replay attack. We believe that more loopholes in Ethereum smart contracts are yet to be discovered.