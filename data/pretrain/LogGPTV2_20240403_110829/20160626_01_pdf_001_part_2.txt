### 代码优化与注释

#### 变量声明
```c
Datum retvals[4]; // 存储返回值的数组
bool retnulls[4]; // 标记返回值是否为空
HeapTuple rettuple; // 返回的元组
```

#### 获取参数并转换
```c
// 获取第一个参数的元组头
HeapTupleHeader th = PG_GETARG_HEAPTUPLEHEADER(0);

// 从复合类型中获取子类并转换为C类型
int a, b, c;
bool aisnull, bisnull, cisnull;
a = DatumGetInt32(GetAttributeByName(th, "a", &aisnull));
b = DatumGetInt32(GetAttributeByName(th, "b", &bisnull));
c = DatumGetInt32(GetAttributeByName(th, "c", &cisnull));

// 调试：报告提取的字段值
ereport(INFO,
    (errmsg("arg: (a: %d, b: %d, c: %d)", a, b, c)));
```

#### 设置返回结果
```c
// 获取结果类型信息
Oid resultTypeId;
TupleDesc resultTupleDesc;
get_call_result_type(fcinfo, &resultTypeId, &resultTupleDesc);

// 确保SQL函数定义设置为返回复合类型
Assert(resultTypeId == TYPEFUNC_COMPOSITE);

// 使元组描述符在Postgres中作为有效返回类型
BlessTupleDesc(resultTupleDesc);

// 构造返回值
retvals[0] = Int32GetDatum(c);
retvals[1] = Int32GetDatum(b);
retvals[2] = Int32GetDatum(a);
retvals[3] = Int32GetDatum(retvals[0] * retvals[1] + retvals[2]);

// 标记返回值是否为空
retnulls[0] = aisnull;
retnulls[1] = bisnull;
retnulls[2] = cisnull;
retnulls[3] = aisnull || bisnull || cisnull;

// 构造返回元组
rettuple = heap_form_tuple(resultTupleDesc, retvals, retnulls);

// 返回Datum
PG_RETURN_DATUM(HeapTupleGetDatum(rettuple));
```

### 自定义集合返回函数 (SRF) 示例

#### 函数声明
```c
Datum
my_set_returning_function(PG_FUNCTION_ARGS)
{
    FuncCallContext *funcctx;
    Datum result;

    if (SRF_IS_FIRSTCALL()) {
        MemoryContext oldcontext;
        funcctx = SRF_FIRSTCALL_INIT(); // 初始化FuncCallContext
        oldcontext = MemoryContextSwitchTo(funcctx->multi_call_memory_ctx);

        // 一次性设置代码
        // 用户代码
        if (返回复合类型) {
            // 构建TupleDesc，可能还需要AttInMetadata
        }
        // 用户代码

        MemoryContextSwitchTo(oldcontext);
    }

    // 每次调用设置代码
    funcctx = SRF_PERCALL_SETUP(); // 清除之前调用产生的结果
    // 用户代码

    // 判断是否继续返回记录
    if (funcctx->call_cntr < max_calls) {
        // 返回另一条记录
        // 用户代码
        // 获取结果Datum
        SRF_RETURN_NEXT(funcctx, result); // 返回一条记录，循环往复
    } else {
        // 完成返回记录，清理
        // 用户代码
        SRF_RETURN_DONE(funcctx); // 调用结束，返回
    }
}
```

### 示例：字符串反转函数

#### 包含头文件
```c
#include <postgres.h>
#include <fmgr.h>
PG_MODULE_MAGIC; // V1 C UDF
PG_FUNCTION_INFO_V1(text_reverse); // 声明
```

#### 函数实现
```c
/*
 * 返回反转后的字符串
 */
Datum
text_reverse(PG_FUNCTION_ARGS)
{
    text *str = PG_GETARG_TEXT_PP(0);
    const char *p = VARDATA_ANY(str);
    int len = VARSIZE_ANY_EXHDR(str);
    const char *endp = p + len;
    text *result;
    char *dst;

    result = palloc(len + VARHDRSZ);
    dst = (char *)VARDATA(result) + len - 1;
    SET_VARSIZE(result, len + VARHDRSZ);

    if (pg_database_encoding_max_length() > 1) {
        // 多字节版本
        while (p < endp) {
            *dst-- = *p++;
        }
    } else {
        // 单字节版本
        while (p < endp) {
            *dst-- = *p++;
        }
    }

    PG_RETURN_TEXT_P(result);
}
```

### 自定义操作符示例

#### 操作符实现
```c
Datum
citext_ne(PG_FUNCTION_ARGS)
{
    text *left = PG_GETARG_TEXT_PP(0);
    text *right = PG_GETARG_TEXT_PP(1);
    char *lcstr, *rcstr;
    bool result;

    lcstr = str_tolower(VARDATA_ANY(left), VARSIZE_ANY_EXHDR(left), DEFAULT_COLLATION_OID);
    rcstr = str_tolower(VARDATA_ANY(right), VARSIZE_ANY_EXHDR(right), DEFAULT_COLLATION_OID);

    result = (strcmp(lcstr, rcstr) != 0);

    pfree(lcstr);
    pfree(rcstr);
    PG_FREE_IF_COPY(left, 0);
    PG_FREE_IF_COPY(right, 1);

    PG_RETURN_BOOL(result);
}
```

#### 创建操作符
```sql
CREATE FUNCTION citext_ne(citext, citext)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR <> (
    LEFTARG = CITEXT,
    RIGHTARG = CITEXT,
    NEGATOR = =,
    COMMUTATOR = <>,
    PROCEDURE = citext_ne,
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);
```

### 扩展索引语法

#### 创建操作符类
```sql
CREATE OPERATOR CLASS name [DEFAULT] FOR TYPE data_type
USING index_method [FAMILY family_name] AS
{
    OPERATOR strategy_number operator_name [(op_type, op_type)] [FOR SEARCH | FOR ORDER BY sort_family_name],
    FUNCTION support_number [(op_type [, op_type])] function_name (argument_type [, ...]),
    STORAGE storage_type
};
```

### GIN 索引接口介绍

#### GIN 索引结构
- `value : (ctid1, ctid2, .... )`
- [GIN 索引文档](https://www.postgresql.org/docs/9.5/static/gin.html)

#### 开发接口
- `int compare(Datum a, Datum b)`：比较两个元素
- `Datum *extractValue(Datum itemValue, int32 *nkeys, bool **nullFlags)`：输入 `ctid` 返回对应行所在列存储的元素
- `Datum *extractQuery(Datum query, int32 *nkeys, StrategyNumber n, bool **pmatch, Pointer **extra_data, bool **nullFlags, int32 *searchMode)`：`column op query` 返回对应行(s)所在列存储的元素
- `bool consistent(bool check[], StrategyNumber n, Datum query, int32 nkeys, Pointer extra_data[], bool *recheck, Datum queryKeys[], bool nullFlags[])`：`column op query` 返回 `true` 或 `false`
- `GinTernaryValue triConsistent(GinTernaryValue check[], StrategyNumber n, Datum query, int32 nkeys, Pointer extra_data[], Datum queryKeys[], bool nullFlags[])`：返回 `GIN_TRUE`, `GIN_FALSE` 和 `GIN_MAYBE`（需要重新检查，部分损失）。

#### 示例
- `array`, `ts`, `hstore`