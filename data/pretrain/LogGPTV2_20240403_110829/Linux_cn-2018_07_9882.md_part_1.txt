---
author: Daniel Van Flymen
category: 区块链
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 9160
date: '2018-07-30 13:04:02'
editorchoice: false
excerpt: 了解区块链是如何工作的最快的方法是构建一个。
fromurl: https://hackernoon.com/learn-blockchains-by-building-one-117428612f46
id: 9882
islctt: true
largepic: /data/attachment/album/201807/30/130406cfee68me8pzkemkz.jpg
permalink: /article-9882-1.html
pic: /data/attachment/album/201807/30/130406cfee68me8pzkemkz.jpg.thumb.jpg
related: []
reviewer: wxy
selector: ''
summary: 了解区块链是如何工作的最快的方法是构建一个。
tags:
- 区块链
- Python
thumb: false
title: 想学习区块链？那就用 Python 构建一个
titlepic: true
translator: qhwdw
updated: '2018-07-30 13:04:02'
---
> 
> 了解区块链是如何工作的最快的方法是构建一个。
> 
> 
> 
![](/data/attachment/album/201807/30/130406cfee68me8pzkemkz.jpg)
你看到这篇文章是因为和我一样，对加密货币的大热而感到兴奋。并且想知道区块链是如何工作的 —— 它们背后的技术基础是什么。
但是理解区块链并不容易 —— 至少对我来说是这样。我徜徉在各种难懂的视频中，并且因为示例太少而陷入深深的挫败感中。
我喜欢在实践中学习。这会使得我在代码层面上处理主要问题，从而可以让我坚持到底。如果你也是这么做的，在本指南结束的时候，你将拥有一个功能正常的区块链，并且实实在在地理解了它的工作原理。
### 开始之前 …
记住，区块链是一个 *不可更改的、有序的* 记录（被称为区块）的链。它们可以包括 交易   transaction 、文件或者任何你希望的真实数据。最重要的是它们是通过使用*哈希*链接到一起的。
如果你不知道哈希是什么，[这里有解释](https://learncryptography.com/hash-functions/what-are-hash-functions)。
***本指南的目标读者是谁？*** 你应该能轻松地读、写一些基本的 Python 代码，并能够理解 HTTP 请求是如何工作的，因为我们讨论的区块链将基于 HTTP。
***我需要做什么？*** 确保安装了 [Python 3.6](https://www.python.org/downloads/)+（以及 `pip`），还需要去安装 Flask 和非常好用的 Requests 库：
```
pip install Flask==0.12.2 requests==2.18.4 
```
当然，你也需要一个 HTTP 客户端，像 [Postman](https://www.getpostman.com) 或者 cURL。哪个都行。
***最终的代码在哪里可以找到？*** 源代码在 [这里](https://github.com/dvf/blockchain)。
### 第 1 步：构建一个区块链
打开你喜欢的文本编辑器或者 IDE，我个人喜欢 [PyCharm](https://www.jetbrains.com/pycharm/)。创建一个名为 `blockchain.py` 的新文件。我将仅使用一个文件，如果你看晕了，可以去参考 [源代码](https://github.com/dvf/blockchain)。
#### 描述一个区块链
我们将创建一个 `Blockchain` 类，它的构造函数将去初始化一个空列表（去存储我们的区块链），以及另一个列表去保存交易。下面是我们的类规划：
```
class Blockchain(object):
    def __init__(self):
        self.chain = []
        self.current_transactions = []
    def new_block(self):
        # Creates a new Block and adds it to the chain
        pass
    def new_transaction(self):
        # Adds a new transaction to the list of transactions
        pass
    @staticmethod
    def hash(block):
        # Hashes a Block
        pass
    @property
    def last_block(self):
        # Returns the last Block in the chain
        pass
```
*我们的 Blockchain 类的原型*
我们的 `Blockchain` 类负责管理链。它将存储交易并且有一些为链中增加新区块的辅助性质的方法。现在我们开始去充实一些类的方法。
#### 区块是什么样子的？
每个区块有一个索引、一个时间戳（Unix 时间）、一个交易的列表、一个证明（后面会详细解释）、以及前一个区块的哈希。
单个区块的示例应该是下面的样子：
```
block = {
    'index': 1,
    'timestamp': 1506057125.900785,
    'transactions': [
        {
            'sender': "8527147fe1f5426f9dd545de4b27ee00",
            'recipient': "a77f5cdfa2934df3954a5c7c7da5df1f",
            'amount': 5,
        }
    ],
    'proof': 324984774000,
    'previous_hash': "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824"
}
```
*我们的区块链中的块示例*
此刻，链的概念应该非常明显 —— 每个新区块包含它自身的信息和前一个区域的哈希。**这一点非常重要，因为这就是区块链不可更改的原因**：如果攻击者修改了一个早期的区块，那么**所有**的后续区块将包含错误的哈希。
*这样做有意义吗？如果没有，就让时间来埋葬它吧 —— 这就是区块链背后的核心思想。*
#### 添加交易到一个区块
我们将需要一种区块中添加交易的方式。我们的 `new_transaction()` 就是做这个的，它非常简单明了：
```
class Blockchain(object):
    ...
    def new_transaction(self, sender, recipient, amount):
        """
        Creates a new transaction to go into the next mined Block
        :param sender:  Address of the Sender
        :param recipient:  Address of the Recipient
        :param amount:  Amount
        :return:  The index of the Block that will hold this transaction
        """
        self.current_transactions.append({
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
        })
        return self.last_block['index'] + 1
```
在 `new_transaction()` 运行后将在列表中添加一个交易，它返回添加交易后的那个区块的索引 —— 那个区块接下来将被挖矿。提交交易的用户后面会用到这些。
#### 创建新区块
当我们的 `Blockchain` 被实例化后，我们需要一个创世区块（一个没有祖先的区块）来播种它。我们也需要去添加一些 “证明” 到创世区块，它是挖矿（工作量证明 PoW）的成果。我们在后面将讨论更多挖矿的内容。
除了在我们的构造函数中创建创世区块之外，我们还需要写一些方法，如 `new_block()`、`new_transaction()` 以及 `hash()`：
```
import hashlib
import json
from time import time
class Blockchain(object):
    def __init__(self):
        self.current_transactions = []
        self.chain = []
        # Create the genesis block
        self.new_block(previous_hash=1, proof=100)
    def new_block(self, proof, previous_hash=None):
        """
        Create a new Block in the Blockchain
        :param proof:  The proof given by the Proof of Work algorithm
        :param previous_hash: (Optional)  Hash of previous Block
        :return:  New Block
        """
        block = {
            'index': len(self.chain) + 1,
            'timestamp': time(),
            'transactions': self.current_transactions,
            'proof': proof,
            'previous_hash': previous_hash or self.hash(self.chain[-1]),
        }
        # Reset the current list of transactions
        self.current_transactions = []
        self.chain.append(block)
        return block
    def new_transaction(self, sender, recipient, amount):
        """
        Creates a new transaction to go into the next mined Block
        :param sender:  Address of the Sender
        :param recipient:  Address of the Recipient
        :param amount:  Amount
        :return:  The index of the Block that will hold this transaction
        """
        self.current_transactions.append({
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
        })
        return self.last_block['index'] + 1
    @property
    def last_block(self):
        return self.chain[-1]
    @staticmethod
    def hash(block):
        """
        Creates a SHA-256 hash of a Block
        :param block:  Block
        :return: 
        """
        # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()
```
上面的内容简单明了 —— 我添加了一些注释和文档字符串，以使代码清晰可读。到此为止，表示我们的区块链基本上要完成了。但是，你肯定想知道新区块是如何被创建、打造或者挖矿的。
#### 理解工作量证明
 工作量证明   Proof of Work （PoW）算法是在区块链上创建或者挖出新区块的方法。PoW 的目标是去撞出一个能够解决问题的数字。这个数字必须满足“找到它很困难但是验证它很容易”的条件 —— 网络上的任何人都可以计算它。这就是 PoW 背后的核心思想。
我们来看一个非常简单的示例来帮助你了解它。
我们来解决一个问题，一些整数 `x` 乘以另外一个整数 `y` 的结果的哈希值必须以 `0` 结束。因此，`hash(x * y) = ac23dc…0`。为简单起见，我们先把 `x = 5` 固定下来。在 Python 中的实现如下：
```
from hashlib import sha256
x = 5
y = 0  # We don't know what y should be yet...
while sha256(f'{x*y}'.encode()).hexdigest()[-1] != "0":
    y += 1
print(f'The solution is y = {y}')
```
在这里的答案是 `y = 21`。因为它产生的哈希值是以 0 结尾的：
```
hash(5 * 21) = 1253e9373e...5e3600155e860
```
在比特币中，工作量证明算法被称之为 [Hashcash](https://en.wikipedia.org/wiki/Hashcash)。与我们上面的例子没有太大的差别。这就是矿工们进行竞赛以决定谁来创建新块的算法。一般来说，其难度取决于在一个字符串中所查找的字符数量。然后矿工会因其做出的求解而得到奖励的币——在一个交易当中。
网络上的任何人都可以很容易地去核验它的答案。
#### 实现基本的 PoW
为我们的区块链来实现一个简单的算法。我们的规则与上面的示例类似：
> 
> 找出一个数字 `p`，它与前一个区块的答案进行哈希运算得到一个哈希值，这个哈希值的前四位必须是由 `0` 组成。
> 
> 
> 
```
import hashlib
import json
from time import time
from uuid import uuid4
class Blockchain(object):
    ...
    def proof_of_work(self, last_proof):
        """
        Simple Proof of Work Algorithm:
         - Find a number p' such that hash(pp') contains leading 4 zeroes, where p is the previous p'
         - p is the previous proof, and p' is the new proof
        :param last_proof: 
        :return: 
        """
        proof = 0
        while self.valid_proof(last_proof, proof) is False:
            proof += 1
        return proof
    @staticmethod
    def valid_proof(last_proof, proof):
        """
        Validates the Proof: Does hash(last_proof, proof) contain 4 leading zeroes?
        :param last_proof:  Previous Proof
        :param proof:  Current Proof
        :return:  True if correct, False if not.
        """
        guess = f'{last_proof}{proof}'.encode()
        guess_hash = hashlib.sha256(guess).hexdigest()
        return guess_hash[:4] == "0000"
```
为了调整算法的难度，我们可以修改前导 0 的数量。但是 4 个零已经足够难了。你会发现，将前导 0 的数量每增加一，那么找到正确答案所需要的时间难度将大幅增加。
我们的类基本完成了，现在我们开始去使用 HTTP 请求与它交互。
### 第 2 步：以 API 方式去访问我们的区块链
我们将使用 Python Flask 框架。它是个微框架，使用它去做端点到 Python 函数的映射很容易。这样我们可以使用 HTTP 请求基于 web 来与我们的区块链对话。
我们将创建三个方法：
* `/transactions/new` 在一个区块上创建一个新交易
* `/mine` 告诉我们的服务器去挖矿一个新区块
* `/chain` 返回完整的区块链
#### 配置 Flask
我们的 “服务器” 将在我们的区块链网络中产生一个单个的节点。我们来创建一些样板代码：
```
import hashlib
import json
from textwrap import dedent
from time import time
from uuid import uuid4
from flask import Flask
class Blockchain(object):
    ...
# Instantiate our Node
app = Flask(__name__)
# Generate a globally unique address for this node
node_identifier = str(uuid4()).replace('-', '')
# Instantiate the Blockchain
blockchain = Blockchain()
@app.route('/mine', methods=['GET'])
def mine():
    return "We'll mine a new Block"
@app.route('/transactions/new', methods=['POST'])
def new_transaction():
    return "We'll add a new transaction"
@app.route('/chain', methods=['GET'])
def full_chain():
    response = {
        'chain': blockchain.chain,
        'length': len(blockchain.chain),
    }