In other languages like C++, Java, C# etc dependency injection can be a big
pain; you want your class `Foo` to use class `Bar` in production, but class
`MockBar` in tests. This is usually enabled by explicit dependency injection
support in class `Foo` (through ctor/setter/interface injection) and the code
that uses `Foo`s. It's a fairly big hassle and requires a ton of boilerplate
code.
I'd like to see Rust provide compiler-level support for swapping types when
`cfg(test)`. Something like this:
    #[cfg(test)]
    mod testmod {
      struct MockBar {
      ...
      }
      #[test]
      #[swap(Bar, MockBar)]
      fn testfunc() { 
        // Foo::new() now creates MockBars instead of Bars internally
        let foo = Foo::new();
        assert_eq!(foo.frobulate(), 5);
      }
    }
The idea is to swap any uses of `Bar` with `MockBar` in all the code that's
executed through the annotated test function. The beauty lies in not having to
mangle the production code just so we can isolate only the parts we want to
test.
I'm not sure how difficult it would be to implement this and I don't have this
idea fully fleshed out, but the gist should be apparent. It doesn't even have
to be an attribute; frankly I don't care _how_ this is implemented as long as
I can replace one type with another type that implements the same interface[s]
for the purpose of test code _and that I don't have to change the production
code to do it._
Any such support should of course only work when `cfg(test)`. Enabling this in
production code would IMO be a bad idea.
EDIT: Forgot to mention, being able to swap functions in this way and not just
types would make this feature even more awesome.