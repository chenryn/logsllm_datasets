title:An Analysis of Speculative Type Confusion Vulnerabilities in the Wild
author:Ofek Kirzner and
Adam Morrison
An Analysis of Speculative Type Confusion 
Vulnerabilities in the Wild
Ofek Kirzner and Adam Morrison, Tel Aviv University
https://www.usenix.org/conference/usenixsecurity21/presentation/kirzner
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.An Analysis of Speculative Type Confusion Vulnerabilities in the Wild
Ofek Kirzner
Adam Morrison
Tel Aviv University
Abstract
Spectre v1 attacks, which exploit conditional branch mispre-
diction, are often identiﬁed with attacks that bypass array
bounds checking to leak data from a victim’s memory. Gen-
erally, however, Spectre v1 attacks can exploit any condi-
tional branch misprediction that makes the victim execute
code incorrectly. In this paper, we investigate speculative type
confusion, a Spectre v1 attack vector in which branch mis-
predictions make the victim execute with variables holding
values of the wrong type and thereby leak memory content.
We observe that speculative type confusion can be inad-
vertently introduced by a compiler, making it extremely hard
for programmers to reason about security and manually apply
Spectre mitigations. We thus set out to determine the extent
to which speculative type confusion affects the Linux kernel.
Our analysis ﬁnds exploitable and potentially-exploitable ar-
bitrary memory disclosure vulnerabilities. We also ﬁnd many
latent vulnerabilities, which could become exploitable due to
innocuous system changes, such as coding style changes.
Our results suggest that Spectre mitigations which rely on
statically/manually identifying “bad” code patterns need to be
rethought, and more comprehensive mitigations are needed.
1 Introduction
Spectre attacks [13, 30, 36, 43, 45, 46, 54] exploit processor
control- or data-ﬂow speculation to leak data from a victim
program’s memory over a microarchitectural covert channel.
A Spectre attack maneuvers the processor to mispredict the
correct execution path of an instruction sequence in the victim,
referred to as a Spectre gadget. The gadget’s misspeculated
execution acts as a “confused deputy” and accesses data from
an attacker-determined location in the victim’s address space.
Although the mispredicted instructions are transient [18,45]—
the CPU eventually discards them without committing their
results to architectural state—data-dependent traces of their
execution remain observable in microarchitectural state, such
as the cache. These data-dependent side effects form a covert
channel that leaks the accessed data to the attacker.
Spectre attacks pose a serious threat to monolithic oper-
ating system (OS) kernels. While Spectre attacks can only
leak data architecturally accessible to the victim, a victim that
if ( x < array1_len) { // branch mispredict: taken
y = array1[ x ];
z = array2[y * 4096]; } // leak y over cache channel
// read out of bounds
(a) Bounds check bypass.
void syscall_helper(cmd_t* cmd, char* ptr, long x ) {
// ptr argument held in x86 register %rsi
cmd_t c = *cmd;
if (c == CMD_A) { // branch mispredict: taken
// cache miss
... code during which x moves to %rsi ...
}
if (c == CMD_B) { // branch mispredict: taken
y = *ptr; // read from addr x (now in %rsi )
z = array[y * 4096]; // leak y over cache channel
}
... rest of function ...
(b) Type confusion.
Listing 1: Spectre gadgets for exploiting conditional branch predic-
tion. Data in red boxes is attacker-controlled.
is an OS kernel typically has all physical memory mapped
in its virtual address space and thus architecturally accessi-
ble [5, 23]. Moreover, kernels expose a large attack surface
(e.g., hundreds of system calls) through which an attacker can
trigger Spectre gadgets.
Since speculative execution is fundamental to modern pro-
cessor design, processor vendors do not plan to mitigate Spec-
tre attacks completely in hardware [8, 37, 39].1 Vendors in-
stead suggest using software mitigations to restrict specu-
lation [8, 37]. To minimize their performance impact, most
software mitigations target speciﬁc “templates” of potentially
vulnerable gadgets, which are identiﬁed with static or manual
analysis [38, 51, 57, 88].2
In this paper, we focus on conditional branch prediction
1In contrast, Meltdown-type attacks [52,70,82,83,85] exploit an Intel pro-
cessor implementation artifact (addressed in future processors [39]), wherein
a load targeting architecturally inaccessible data (e.g., in another address
space) can execute before being discarded due to a virtual memory exception.
2We discuss more comprehensive software mitigations—which, unfortu-
nately, have high performance overheads—in § 7.
USENIX Association
30th USENIX Security Symposium    2399
Spectre attacks (so-called “variant 1” [45]). These attacks are
often characterized as bounds check bypass attacks, which
exploit misprediction of an array bounds check to perform
an out-of-bounds access and leak its result (Listing 1a). De-
ployed software mitigations in compilers and OS kernels
target this type of gadget template [38, 51, 57].
Generally, however, a Spectre attack is deﬁned as exploit-
ing conditional branch prediction to make the processor “tem-
porarily violate program semantics by executing code that
would not have been executed otherwise” [45]—and a bounds
check bypass is just one example of such a violation. Specula-
tive type confusion is a different violation, in which misspec-
ulation makes the victim execute with some variables holding
values of the wrong type, and thereby leak memory content.
Listing 1b shows an example compiler-introduced spec-
ulative type confusion gadget, which causes the victim to
dereference an attacker-controlled value. In this example, the
compiler emits code for the ﬁrst if block that clobbers the
register holding a (trusted) pointer with an untrusted value,
based on the reasoning that if the ﬁrst if block executes, then
the second if block will not execute. Thus, if the branches
mispredict such that both blocks execute, the code in the sec-
ond if block leaks the contents of the attacker-determined
location. In contrast to the bounds check bypass attack, here
the attacker-controlled address has no data-dependency on the
branch predicate, nor does the predicate depend on untrusted
data. Consequently, this gadget would not be protected by ex-
isting OS kernel Spectre mitigations, nor would programmers
expect it to require Spectre protection.
To date, speculative type confusion has mainly been hy-
pothesized about, and even then, only in the context of object-
oriented polymorphic code [18] or as a vector for bypassing
bounds checks [32, 56]. Our key driving observation in this
paper is that speculative type confusion may be much more
prevalent—as evidenced, for instance, by Listing 1b, which
does not involve polymorphism or bounds checking. Accord-
ingly, we set out to answer the following question: are OS
kernels vulnerable to speculative type confusion attacks?
1.1 Overview & contributions
We study Linux, which dominates the OS market share for
server and mobile computers [90]. In a nutshell, not only do
we ﬁnd exploitable speculative type confusion vulnerabilities,
but—perhaps more disturbingly—our analysis indicates that
OS kernel security currently rests on shaky foundations. There
are many latent vulnerabilities that are not exploitable only
due to serendipitous circumstances, and may be rendered
exploitable by different compiler versions, innocuous code
changes, deeper-speculating future processors, and so on.3
3Indeed, we make no security claims for these “near miss” vulnerabilities;
some of them may be exploitable in kernel versions or platforms that our
analysis—which is not exhaustive—does not cover.
Attacker-introduced vulnerabilities (§ 4) Linux supports
untrusted user-deﬁned kernel extensions, which are loaded
in the form of eBPF4 bytecode programs. The kernel veriﬁes
the safety of extensions using static analysis and compiles
them to native code that runs in privileged context. The eBPF
veriﬁer does not reason about speculative control ﬂow, and
thus successfully veriﬁes eBPF programs with speculative
type confusion gadgets. eBPF emits Spectre mitigations into
the compiled code, but these only target bounds check bypass
gadgets. Consequently, we demonstrate that an unprivileged
user can exploit eBPF to create a Spectre universal read gad-
get [55] and read arbitrary physical memory contents at a rate
of 6.7 KB/sec with 99% accuracy.
Compiler-introduced vulnerabilities (§ 5) We show that
C compilers can emit speculative type confusion gadgets.
While the gadgets are blocked by full Spectre compiler miti-
gation modes (e.g., speculative load hardening (SLH) [21]),
these modes have high performance overheads (§ 7), and in
GCC must be manually enabled per-variable. Optional low-
overhead mitigation modes in Microsoft and Intel compilers
do not block these gadgets. Motivated by these ﬁndings, we
perform a binary-level analysis of Linux to determine whether
it contains speculative type confusion introduced by compiler
optimizations. We ﬁnd several such cases. In assessing po-
tential exploitability of these cases, we investigate how x86
processors resolve mispredicted branches. We ﬁnd that Spec-
tre gadgets which today may be considered unexploitable are
actually exploitable, which may be of independent interest.
Polymorphism-related vulnerabilities (§ 6) The Linux
kernel makes heavy use of object-oriented techniques, such
as data inheritance and polymorphism, for implementing ker-
nel subsystem interfaces. The related indirect function calls
are protected with retpolines [81], which essentially disable
indirect call prediction. To claw back the resulting lost per-
formance, Linux replaces certain indirect calls with direct
calls to one of a set of legal call targets, where the correct
target is chosen using conditional branches [9, 24]. Unfor-
tunately, this approach opens the door to speculative type
confusion among the different targets implementing a kernel
interface. We perform a source-level analysis on Linux to ﬁnd
such vulnerabilities. We identify dozens of latent vulnerabil-
ities, namely: vulnerable gadgets which are not exploitable
by chance, and could become exploitable by accident. For
example, we ﬁnd gadgets in which the attacker controls a 32-
bit value, which cannot represent a kernel pointer on 64-bit
machines. But if a future kernel version makes some variables
64-bit wide, such gadgets would become exploitable.
1.2
Our work shows that speculative type confusion vulnerabil-
ities are more insidious than speculative bounds check by-
passes, with exploitable and latent vulnerabilities existing in
Implications
4Extended Berkeley Packet Filter [11, 68].
2400    30th USENIX Security Symposium
USENIX Association
kernel code. Given the existence of compiler-introduced vul-
nerabilities, we question the feasibility of the current Linux
and GCC mitigation approach, which relies on developers
manually protecting “sensitive” variables [51], likely due
to equating Spectre v1 with bounds check bypasses. While
comprehensive mitigations, such as SLH [21], can block all
Spectre attacks, they impose signiﬁcant overhead on kernel
operations (up to 2.7×, see § 7). It is also unclear whether
static analysis [22, 31] can be incorporated into the OS kernel
development process to guarantee absence of speculative type
confusion vulnerabilities. In short, current Spectre mitigations
in OS kernels require rethinking and further research.
2 Background
2.1 Out-of-order & speculative execution
Modern processors derive most of their performance from two
underlying mechanisms: out-of-order (OoO) execution [79]
and speculation [34].
OoO execution A processor core consists of a frontend,
which fetches instruction from memory, and a backend, re-
sponsible for instruction execution. A fetched instruction is
decoded into internal micro-operations (µ-ops), which are
then dispatched to a reservation station and await execution.
Once the operands of a µ-op become available (i.e., have been
computed), it is issued to an execution unit where it is exe-
cuted, making its result available to dependent µ-ops. Hence,
µ-ops may execute out of program order. To maintain the
program order and handle exceptions, µ-ops are queued into a
reorder buffer (ROB) in program order. Once a µ-op reaches
the ROB head and has been executed, it gets retired: its re-
sults are committed to architectural state and any pipeline
resources allocated to it are freed.
Speculative execution To execute instructions as soon as
possible, the processor attempts to predict the results of cer-
tain (usually long latency) µ-ops. The prediction is made
available to dependent µ-ops, allowing them to execute. Once
the predicted µ-op executes, the backend checks if the µ-op’s
output was correctly predicted. If so, the µ-op proceeds to re-
tirement; otherwise, the backend squashes all µ-ops following
the mispredicted µ-op in the ROB and reverts its state to the
last known correct state (which was checkpointed when the
prediction was made). We refer to the maximum amount of
work that can be performed in the shadow of a speculative µ-
op as the speculation window. It is determined by the latency
of computing the predicted µ-op’s results and the available
microarchitectural resources (e.g., the size of the ROB limits
how many µ-ops can be in ﬂight). We consider control-ﬂow
speculation, described in the following section.
2.2 Branch prediction
To maximize instruction throughput, the processor performs
branch prediction in the frontend. When a branch is fetched,
Figure 1: BPU Scheme
a branch predictor unit (BPU) predicts its outcome, so that
the frontend can continue fetching instructions from the (pre-
dicted) execution path without stalling. The branch is resolved
when it gets executed and the prediction is veriﬁed, possibly
resulting in a squash and re-steering of the frontend. Notice
that every branch is predicted, even if its operands are readily
available (e.g., in architectural state), because ﬁguring out
availability of operands is only done in the backend.
We assume the branch predictor unit design shown in Fig-
ure 1, which appears to match Intel’s BPU [26, 97]. The BPU
has two main components: an outcome predictor, predict-
ing the direction of conditional branches, and a branch tar-
get buffer (BTB), predicting the target address of indirect
branches. The outcome predictor stores 2-bit saturating coun-
ters in a pattern history table (PHT). A branch’s outcome
is predicted based on a PHT entry selected by hashing its
program counter (PC). The PHT entry is selected in one of
two addressing modes, depending on the prediction success
rate: 1- or 2-level prediction. The 1-level predictor uses only
the PC, whereas the 2-level predictor additionally hashes a
global history register (GHR) that records the outcome of the
previously encountered branches.
2.3 Cache covert channels
To hide memory latency, the processor contains fast memory
buffers called caches, which hold recently and frequently
accessed data. Modern caches are set-associative: the cache
is organized into multiple sets, each of which can store a
number of cache lines. The cache looks up an address by
hashing it to obtain a set, and then searching all cache lines
in that set.
Changes in cache state can be used to construct a covert
channel. Consider transmission of a B-bit symbol x. In a
FLUSH+RELOAD channel [92], (1) the receiver ﬂushes 2B
lines from the cache; (2) the sender accesses the x-th line,
bringing it back into the cache; and (3) the receiver measures
the time it takes to access each line, identifying x as the only
cache hit. FLUSH+RELOAD requires the sender and receiver
to share memory. A PRIME+PROBE channel avoids this re-
quirement by using evictions instead of line ﬁlls [53].
2.4 Transient execution attacks
Transient execution attacks overcome architectural consis-
tency by using the microarchitectural traces left by transient—
doomed to squash—µ-ops to leak architecturally-inaccessible
USENIX Association