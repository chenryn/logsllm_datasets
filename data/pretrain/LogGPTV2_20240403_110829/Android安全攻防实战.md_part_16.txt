向 adb 传递了一条带上了参数“tcpdump"的 push 命令。这个 tcpdump 就是 for Android
版的TCPdump的二进制可执行文件。你应该注意到在/data/tcpdump目录之后是用一
个点号（.）表示tcpdump二进制可执行文件的文件名的。这是一个缩写，表示文件
被复制过去之后，文件名仍然保持原来的文件名。很明显，在我们复制本地计算机
中一个名为 tcpdump 的文件过去之后，在Android设备上也会出现一个名为 tcpdump
的文件。
在这条push命令之后，是一条带了“chmod 755/data/tcpdump/tcpdump”参数的
adb shell命令—这条命令修改了tcpdump这个二进制可执行文件的访问权限，使得
较低权限的用户也可以执行它。
109
---
## Page 128
Android安全攻防实战
在第二步里，我们使用nc命令一这是Netcat的缩写。这个工具堪称与网络服
务交互的瑞士军刀。在这个实验里，我们用它读取流入/流出一个网络连接的数据。
在不带参数的情况下运行nc将会输出使用帮助。这使我们能够确认你的Android设
备里已经安装了nc，并能正常运行。
文件，而紧接其后的这个参数确保输出是写到终端屏幕上的。作为我们执行的这个
命令的一部分，我们也指定了这个参数“nc-1-p31337”。其中的“1”，在操作系统
术语中被称为“管道”。即把该符号之前的程序的输出作为该符号之后的程序的输入。
的连接。在这个例子里，tcpdump输出的原始二进制网络流量，将会被交给Netcat
作为它的输入，也就是说，它会输出源自31337端口的原始二进制流量。
在第四步里，我们使用了ADB的打开转发功能，这使我们能把Android设备上
的一个端口（由第二个参数指定，即tcp12345）映射到本地计算机上的一个端口（由
第一个参数指定，即tcp31337°）上。你可以注意到：我们把端口12345镜像到端口
31337上，并且在上一步里要求Netcat监听端口31337上的连接。这样我们就可以通
过我们本地计算机上的31337端口与Netcat进程进行交互了。或者用更为简洁的术
语总结为：Android设备上的31337端口，就成了我们本地计算机上的12345端口。
在第五步里，我们用参数“127.0.0.1”（这是我们本地计算机的地址，术语叫“回
是告诉Netcat连接我们本地计算机上的12345端口。而且由于12345端口已经映射
成了Android设备上的31337端口，这实际上也就意味着通过本地12345端口的代理，
我们可以与端口31337进行交互了。这样做的结果是：我们可以在我们的本地计算
机上，抓取通过管道发给Android 设备上的 Netcat程序的网络流量。
在第六步里，我们把本地计算机上要执行的命令合并在一起，以便使Wireshark
能拿到原始二进制网络流量，并为我们解析这些流量。我们用下面这几个参数运行
7 Wireshark.
·k：根据Wireshark的帮助文档，这个参数的作用如下。
口立即开始抓包。如果还指定了-i标志位，就只抓取指定网卡的流量。
口否则，Wireshark 将会搜索网卡列表，如果列表中有非回送网络接口，则
①显然原文这里笔误了，应为 tcp 31337。—译者注
②显然原文这里笔误了，应为tcp 12345.一译者注
③显然原文这里笔误了，应该是Android设备上的31337端口。—译者注
110
---
## Page 129
第4章利用app中的漏润
选用第一个非回送网络接口：如果列表中没有非回送网络接口，则选用第
一个回送网络接口。
如果没有网络接口（网卡），Wireshark将会报告一个错误，不启动抓包。
·-S：这个参数指定了快照（snapshot）的长度，即需要抓取每个数据包中多少
个字节。如果没有给出长度参数，将会抓取完整的数据包。
·-i：这个参数指定了从哪里抓包。这里我们又一次使用了“-”这个符号—
它告诉Wireshark从标准输入中读取输入数据。我们这样做的原因是：
Wireshark的输入是来自Netcat 的，通过管道送来的数据。
如果想把这个主意用在更有意思些的用途上，你可以试若构造一些工具，通过
运行IDS（入侵检测系统）或者其他专用于安全的网络监视工具，比如Snort，分析
某个Android 设备上产生的一些网络流量，并以此分析主动威胁（active threat）。这
一思想也可用于非常带劲的恶意软件分析和漏润分析中。
拓展阅读
com/tutorials/android/analyzing-android-nctwork-traffic/。
●Wireshark 使用教程，位于:http:/www.wireshark.org/docs/wsug_html_ chunked/。
。Wireshark 的显示过滤帮助网页，位于：http://wiki.wireshark.org/DisplayFilters
°Wireshark 的抓包过滤帮助网页，位于：http:/wiki.wireshark.org/CaptureFilters
。TCPdump 帮助文档的网页，位于：http://www.tcpdump.org/tcpdump_man.html。
4.4
通过activitymanager被动噢探intent
大量获取app 及其组件的相关信息的一个好办法，就是监听app 内部的通信。达
成这一任务的一个途径就是从 activity manager那里获取关于最近使用的 intent 的
信息。
这相当的简单，而且事实证明，如果你写过python 脚本的话，可以用 drozer（在
第3章《Android安全评估工具》中介绍的工具）来完成它。iSec Partners 公司的工
程师们已经开发了一个能完成这一任务的Androidapp，下面这个实验里讨论的这个
drozer模块的绝大部分灵感就是源自他们这个app 的。至于哪里能得到这个app，请
移步这个实验的“拓展阅读”一节。
111
---
## Page 130
Android安全攻防实战
准备工作
在正式开始编写这个模块之前，我们需要对drozer的Agent 做一点点修改，使
之拥有通过 activity manager 获取关于intent 的信息的权限。做到这一点最简单的办
法就是修改drozer的AndroidManifest.xml文件，增加其所需的权限。这里我们演示
如何用Eclipse做到这一点的。
1.首先你需要去下列网站下载drozerAgent程序及其依赖程序。
drozer Agent 的网页位于 htps:/github.com/mwrlabs/drozer-agent。
。 jdiesel (drozer 的能增强包) 页位于https:/github. com/mwrlabs jdiesel,
●TLS支持网页位于 https://github.com/mwrlabs/mwr-tls。
·Drozer相关的Android实用程序的网页位于https://github.com/mwrlabs/
mwr-android.
2.在把它们下载和保存到同一个目录下之后，你可以打开Eclipse，并把它们都
作为各自独立的Android项目导入。每一个项目的导入方式都是：打开
Eclipse，依次按菜单栏上的“File”，然后选择“Import”，如图4.6所示。
Deenrile
图 4.6
3.单击 Android 文件夹，然后单击“Existing Android Code into Workspace”选
项，单击“Next”按钮，如图4.7所示。
112
---
## Page 131
第4章利用app中的漏润
图 4.7
4.这时，Eclipse将会要求你指定一个存放要导入项目的文件夹。你需要把你在
第一步中下载的文件夹添加进来。选择文件夹时，单击“Browse...”按钮，
然后将会弹出一个文件夹选择对话框，如图4.8所示。
图 4.8
5.通过文件夹选择对话框，选取你存放下载下来的drozerAgent及其依赖项的
目录，你应该用这一方法，把每个项目都添加进来。
113
---
## Page 132
Android安全攻防实战
请确保你把每个文件夹都添加了进来，否则，Eclipse将无法成功编译drozer
Agent.
6.导入所有的项目之后，你还要编辑 drozer Agent 的AndroidManifest.xml 文件。
你可以双击Eclipse 的drozer-agent项目文件夹中的AndroidManifestXml文件，
来完成这一工作（假设你已经事先切换到了AndroidManifest.xml标签页，这
样你就能直接编辑XML文件了）
接着，输入下面这一行代码。
如果你正确地执行了上述步骤的话，AndroidManifest.xml文件应该看上去如图
4.9所示的这样。
cuses-penmission android:nane=*android.permission.GET TA5KS*/
andro1d; Label=*@string/app_nane
cactivity
 4.9
好了，就是这样！已经为drozerAgent新添加了一个权限了。现在你可以导出
drozerAgent 的APK文件，把它上传到你的设备上去，开始进行破解了。
请注意，在安装这个修改过的版本之前，你必须先正确卸载装在你的设备上
的 drozer Agent。
怎么做
上述就是drozerAgent的编译和分发过程。我们现在着手开发一个intent噢探模
块。
1.切换到你的drozer模块仓库目录，如果你还没有设置过它，请参考第3章
个实验，看一下该怎么做。切换到你的drozer模块仓库目录中之后，创建一
个名为“ex.sniffer.intents”，并把下面这些代码输进去（下面这些代码可以在
本书的随书代码中找到）
①默认的标签页是Manifest，第一次使用时请切换一下。—译者注
114
---
## Page 133
第4章利用app 中的漏润
from dxozer,modules import Module,common
fron drozer,modules Import android 
class Intent.s (Module, common, PackageManager) :
name - "Dump recent intents to the console*
description = "mhis module allows you to see the most recent
intents that were sent, via the ActivityManager*
examples - *run ex.sniffer.intents*
[9ueu xnof]。 = zoqsne
-[eqep e1]。 = exep
1icense = *GNU GPL*
path = ["ex*,“aniffer*]
def execute (self, arguments) :
self,stdout,wrlte ("[*] initializing intent sniffer..\n*)
context - self.getContext ()
activityService = context.getSystemService (*activity*)
self,stdout,write ("[*) got system service ..\n")
recentTasks = activityService.getRecentTasks (1000, 1)
self,stdout,write ("[*] recentTasts Extracted..\n")
list_length = recentTasks.size ()
self,stdout.write ("[*] Extracted %s tasks ,,\n" 
(1ist_length) )
for task in range (list_length) :
cur_task - recentTasks get (task)
cur_taskBaseIntent - cur_task.baseIntent
self,stdout,write ("\t[%d] 4s\n" 
(task, cur_taskBaseIntent.toString ()))
2.做好之后，执行下面这一条命令，把这个模块安装到drozer中去：
dz> module instal1 [path-to-modulerepo]/ex.sniffer .intent
3.然后执行下面这条命令运行它。
dz> run ex.sniffer.intents
你应该看到类似图4.10的东西。
图 4.10
115
---
## Page 134
Android安全攻防实战
工作原理
Intent噢探脚本实际上是非常简单的。这里，我们把它分解开来，看看它到底是
怎么运行的，以及它究竞是怎样噢探intent的。
Intent 噢探器先调用了Context.getSystemServiceO函数，并传给它一个
ACTIVITY_SERVICE标志的标识符—就是那个“activity”字符串。该函数返回一
个ActivityManager类的实例，它使得该脚本能够与 activity manager 进行交互，并通
过这个对象调用ActivityManager.getRccentTasks0方法。该方法接收两个参数，第一
个参数是个整型数，表示这个脚本打算从activitymanager那里接收的RecentTaskInfo
对象的最大数目，第二个参数是个标志位，表示最近运行的activity的类型。在这个
例子里，脚本写入的这个参数表示需要完整的列表，不要忽略任何task。找这样与这
个脚本的原因是：被发送出来，启动最近运行的各个task的intent 会被记录在
ActivityManager 中的 RecentTaskInfo 对象里，更准确地说是 RecentTaskInfo.baselntent
这个域里。这个脚本可以利用它提取一些关于intent的有用信息，比如组件名，标志
位，action以及category等。为了让这里的处理过程简单明快，这个脚本在输出日志
时调用了Intent.toStringO方法一这个方法只是把与intent相关的信息格式化成字符
串，并把它返回出来。
当然，也很欢迎你对intent的信息做一些更智能化的解析。你甚至可以试试能不
能想出一种能确定是哪个package最终发起的调用的方法。虽然要做的这一点非常困
难，但它应该是一个值得去努力实现的，相当有用的drozer模块。
拓展阅读
●Intent Sniffer 这个 Android app 的 下 载地址：https://www.isecpartners.com/
tools/mobile-security/intent-sniffer.aspx,
 Context.getSystemService(String name)这个 API 的说明详见：http://developer.
android.com/reference/android/content/Context.html#getSystemService%28java.la
ng.String%29。
·ActivityManager.RecentTaskInfo类的详细说明见：http://developer.android
•Intent类的详细说明见：http://developer.android.com/reference/android/content/
Intenthtml.
116
---
## Page 135
第4章利用app中的漏洞
4.5攻击service
Service看上去是那么的人畜无害，它们只工作在后台。但是开发它们的目的，
就是为了支持其他app组件，可能执行非常敏感的操作，比如登录一个在线资料库，
重新设置密码，甚至是作为宿主设备上系统服务的代理，进行一些可能很危险的操
作。不管是上述哪种方式，在app 的评估过程中，它们都不可以被忽视掉。
那么一个有漏洞的 service又是什么样的呢？好吧，当我们可以通过service中的
功能，滥用用户权限，提升另一个app/用户的权限，或者用它提取敏感信息时，我
们就称该 service 是可利用的（exploitable）。也就是说，你得能够与 service 进行交
互—换句话说，它必须是导出的（exported），或者能响应/接受源自intent、文件或
者网络栈等格式的消息源中的输入信息。另一个需要考虑的事是：与service交互需
要什么类型的权限—它是不是一个可能很危险的service，会不会执行非常敏感的
操作，或者会被滥用导致app，甚至是设备被瘫痪（也就是拒绝服务（DenialofService，
DoS），即攻击者通过强制service停止工作或阻止用户使用该service 的方式瘫痰某个
service）的情况。更不必说，会致app及其用户陷于一种在不需要任何权限的情况下，
就能使用可能非常危险的service的糟糕情形中。
试着考虑一下所需的权限以及这些权限是否能与它们的受保护级别相一致。确
定是否与受保护级别一致的好办法是：考虑什么类型的app一般都会被赋予什么样的
权限。如果某个service属于一个银行类的app，你会希望使用定制的权限来保护它，
而不只满足于一般危险级别的权限，来保护这个service。这是因为：一般危险级别
的权限并不适用于银行app中可能会发生的所有潜在危险操作.你也应该考虑在用户
被要求授予app权限时显示的相关信息，即，权限的标签（label）和描述（description）。
你也应该把同样的思想用在检查其他app组件中安全缺陷的过程中，因为权限框架对
它们是一视同仁的。
这个实验将详细介绍如何去发现有漏洞的service—其中大致包括：一一列出
导出的 services，详细介绍如何通过drozer框架运行它们，同时也将向你展示如何编
写一些定制的intent去触发它们。
在我们开始之前，很有必要向你展示一下，从AndroidManifest.xml文件的角度，
对于一个service 来说，可能出现危险的情形看上去到底是怎样的。下面是OWASP
的GoatDroid项目中一个app的代码片段。请通读它一遍，考虑一下它可能会导致什
么样的威胁或风险。
117
---