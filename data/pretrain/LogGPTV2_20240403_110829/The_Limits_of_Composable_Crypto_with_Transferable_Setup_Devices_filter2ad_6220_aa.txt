# Title: The Limits of Composable Cryptography with Transferable Setup Devices

# Authors:
- Ioana Boureanu
- Miyako Ohkubo
- Serge Vaudenay
- Carmit Hazay
- Antigoni Polychroniadou
- Muthuramakrishnan Venkitasubramaniam

## Abstract
We introduce a new formulation of tamper-proof hardware within the Global Universal Composable (GUC) framework, as proposed by Canetti et al. at TCC 2007. Most previous works have relied on Katz's formulation from Eurocrypt 2007, which does not fully address the concurrent setting for tokens. Our contributions are as follows:

1. **Two-Round Secure Two-Party Computation (2PC):** We construct secure 2PC protocols for general functionalities with optimal round complexity and minimal computational assumptions using stateless tokens. Specifically, we show how to achieve GUC security in two rounds under the assumption of One-Way Functions (OWFs). Our construction is black-box in the underlying function. As a corollary, we demonstrate the feasibility of Multi-Party Computation (MPC) with GUC security under the same minimal assumption.

2. **Three-Round MPC Protocol:** We develop a three-round MPC protocol to securely realize arbitrary functionalities with GUC security, starting from any semi-honest secure MPC protocol. This construction relies on the one-many commit-and-prove primitive introduced by Canetti, Lindell, Ostrovsky, and Sahai at STOC 2002. We use specially designed "input-delayed" protocols to achieve this primitive with a three-round protocol, using stateless tokens and OWFs in a black-box manner.

Additionally, we identify an issue in a previous work by Goyal, Ishai, Sahai, Venkatesan, and Wadia at TCC 2010, concerning the feasibility of UC-secure computation with stateless tokens assuming collision-resistant hash functions.

**Keywords:** Secure Computation, Tamper-Proof Hardware, Round Complexity, Minimal Assumptions

## Contents
1. Introduction
   1.1 Our Results
   1.2 Our Techniques
   1.3 Related Work
2. Modeling Tamper-Proof Hardware in the GUC Framework
   2.1 The Global Tamper-Proof Model
3. Preliminaries
   3.1 Pseudorandom Functions
   3.2 Commitment Schemes
   3.3 Randomness Extractors
   3.4 Hardcore Predicates
   3.5 Secret-Sharing
4. Two-Round Oblivious Transfer in the Stand-Alone Model
   4.1 Building Blocks: Commitment Schemes
   4.2 Our Protocol
      4.2.1 Relaxing to One-Way Functions
   4.3 Reusability of Tokens
5. Two-Round Token-Based GUC Oblivious Transfer
   5.1 Two-Round 2PC Using Stateless Tokens
   5.2 GUC-Secure MPC using Stateless Tokens from One-Way Functions
   5.3 On Reusability
6. Three-Round Token-Based GUC Secure Multi-Party Computation
   6.1 One-Many Commit-and-Prove Functionality
      6.1.1 Realizing F 1:M CP in the FgWRAP-Hybrid
   6.2 Warmup: Simple MPC Protocol in the F 1:M CP -Hybrid
   6.3 Three-Round MPC Protocol in the FgWRAP-Hybrid
7. Acknowledgements
8. Appendix A: Issue with Over Extraction in Oblivious Transfer Combiners [GIS+10]

## 1. Introduction
Secure Multi-Party Computation (MPC) allows a set of parties to jointly compute a function \( f \) on their private inputs while ensuring privacy and correctness. Privacy ensures that no information beyond the output is revealed, and correctness ensures that the output is correct even if some parties are corrupted. Traditional results in MPC, such as those by Yao, Goldreich, Micali, and Wigderson, prove security in the stand-alone model, where a single instance of the protocol is executed. However, these protocols often fail to maintain security when multiple instances are executed concurrently.

The strongest form of concurrent security is Universally Composable (UC) security, which considers an unbounded number of concurrent executions in an adversarially controlled network environment. Achieving UC security typically requires trusted setup assumptions, such as tamper-proof hardware tokens.

Katz's work [Kat07] introduced the FWRAP functionality to model tamper-proof hardware and demonstrated the feasibility of realizing general functionalities with UC security. However, this formulation does not fully capture the concurrent setting, leading to several issues:

- **Concurrent Multi-Instance Security:** The security properties should hold even when multiple instances of the protocol are executed concurrently and are susceptible to coordinated attacks.
- **Modular Analysis:** The security of the overall protocol should be deducible from the security properties of its components.

Given these challenges, we aim to address the following questions:
- Can we construct tamper-proof UC-secure protocols using stateless tokens under the minimal assumption of one-way functions?
- Can we achieve strong composability guarantees and modular design in the GUC framework?

## 2. Modeling Tamper-Proof Hardware in the GUC Framework
### 2.1 The Global Tamper-Proof Model
[Details of the global tamper-proof model will be provided here.]

## 3. Preliminaries
### 3.1 Pseudorandom Functions
[Details of pseudorandom functions will be provided here.]

### 3.2 Commitment Schemes
[Details of commitment schemes will be provided here.]

### 3.3 Randomness Extractors
[Details of randomness extractors will be provided here.]

### 3.4 Hardcore Predicates
[Details of hardcore predicates will be provided here.]

### 3.5 Secret-Sharing
[Details of secret-sharing will be provided here.]

## 4. Two-Round Oblivious Transfer in the Stand-Alone Model
### 4.1 Building Blocks: Commitment Schemes
[Details of building blocks for commitment schemes will be provided here.]

### 4.2 Our Protocol
[Details of our protocol will be provided here.]

#### 4.2.1 Relaxing to One-Way Functions
[Details of relaxing to one-way functions will be provided here.]

### 4.3 Reusability of Tokens
[Details of reusability of tokens will be provided here.]

## 5. Two-Round Token-Based GUC Oblivious Transfer
### 5.1 Two-Round 2PC Using Stateless Tokens
[Details of two-round 2PC using stateless tokens will be provided here.]

### 5.2 GUC-Secure MPC using Stateless Tokens from One-Way Functions
[Details of GUC-secure MPC using stateless tokens from one-way functions will be provided here.]

### 5.3 On Reusability
[Details on reusability will be provided here.]

## 6. Three-Round Token-Based GUC Secure Multi-Party Computation
### 6.1 One-Many Commit-and-Prove Functionality
#### 6.1.1 Realizing F 1:M CP in the FgWRAP-Hybrid
[Details of realizing F 1:M CP in the FgWRAP-Hybrid will be provided here.]

### 6.2 Warmup: Simple MPC Protocol in the F 1:M CP -Hybrid
[Details of the simple MPC protocol in the F 1:M CP -Hybrid will be provided here.]

### 6.3 Three-Round MPC Protocol in the FgWRAP-Hybrid
[Details of the three-round MPC protocol in the FgWRAP-Hybrid will be provided here.]

## 7. Acknowledgements
[Details of acknowledgements will be provided here.]

## 8. Appendix A: Issue with Over Extraction in Oblivious Transfer Combiners [GIS+10]
[Details of the issue with over extraction in oblivious transfer combiners will be provided here.]