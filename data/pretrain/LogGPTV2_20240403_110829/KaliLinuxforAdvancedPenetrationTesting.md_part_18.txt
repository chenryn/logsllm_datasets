for NVIDIA graphics cards).
[ 222 ]
Chapter 8
To implement this attack, first convert the WPA handshake capture file, psk-01.cap
to a hashcat file using the following command:
root@kali:~# aircrack-ng psk-01.cap -J 
When the conversion is completed, run the hashcat against the new capture file
(choose the version of hashcat that matches your CPU architecture and your graphics
card) using the following command:
root@kali:~# cudaHashcat-plus32.bin -m 2500 .hccap
Attacking wireless routers with Reaver
WPA and WPA2 are also vulnerable to attacks against an access point's Wi-Fi
Protected Setup, WPS, and pin number.
Most access points support the Wi-Fi Protected Setup (WPS) protocol, which
emerged as a standard in 2006 to allow users to easily set up and configure access
points and add new devices to an existing network without having to re-enter large
and complex passphrases.
Unfortunately, the pin is an 8-digit number (100,000,000 possible guesses), but the
last number is a checksum value. Because the WPS authentication protocol cuts the
pin in half and validates each half separately, it means that there are 104 (10,000)
values for the first half of the pin, and 103 (1,000) possible values for the second
half—the attacker only has to make a maximum of 11,000 guesses to compromise
the access point!
Reaver is a tool designed to maximize the guessing process (although Wifite also
conducts WPS guesses).
To start a Reaver attack, use a companion tool called wash to identify any vulnerable
networks as given in the following command:
root@kali:~# wash -i wlan0 --ignore-fcs
If there are any vulnerable networks, launch an attack against them using the
following command:
root@kali:~# reaver -i wlan0 -b (BBSID) -vv
Testing this attack in Kali has demonstrated that the attack is slow and is prone to
failure; however, it can be used as a background attack or can supplement other
routes of attack to compromise the WPA network.
[ 223 ]
Exploiting Wireless Communications
Cloning an access point
One of the more interesting attacks against wireless networks relies on cloning the
access point and then monitoring the information that is transmitted when users
attempt to connect to it. An attacker can not only gain access to authentication
credentials but can also employ a man-in-the-middle attack to intercept or redirect
network traffic.
Several tools included in Kali claim to support cloning or producing a rogue access
point; however, at this time there are shortcomings in these tools. For example, the
Social Engineering Toolkit and Websploit do not integrate with the DHCP server that
comes preinstalled in Kali.
Most attackers look for external tools, including scripts such as Gerix, or easy-creds;
however, the aircrack-ng suite also includes a tool. airbase-ng, for cloning
access points.
To make a fake wireless access point, an attacker will:
1. Start wlan0 in monitor mode, which will create a mon0 interface for
monitoring, using the following command:
root@kali:~# airmon-ng start wlan0
2. Set up the access point (AP) on mon0 using the following command. Social
engineering can have a significant impact on the success of the AP, so use
a name that will attract the target clients. For this example, we will use a
generic name of an open Wi-Fi network. It will be established on the WiFi
channel six:
root@kali:~# airbase-ng --essid Customer_Network
-c 6 mon0
3. Install the bridge utilities using the following command:
apt-get install bridge-utils
4. In another terminal window, create a bridge (rogue) and link at0 (the at0
interface is created by the previous command) to eth0 using the bridge
utilities (note that bridge utilities must first be installed using apt-get
install bridge-utils).
root@kali:~# brctl addbr rogue
root@kali:~# brctl addif rogue at0
root@kali:~# brctl addif rogue eth0
[ 224 ]
Chapter 8
Because the two interfaces are integrated into the virtual bridge, you can
release their IP addresses using the following commands:
root@kali:~# ifconfig at0 down
root@kali:~# ifconfig at 0.0.0.0 up
root@kali:~# ifconfig eth0 down
root@kali:~# ifconfig eth0 0.0.0.0 up
5. Enable IP forwarding across the bridge using the following command:
root@kali:~# echo 1 > /proc/sys/net/ipv4/ip_forward
6. Configure the bridge with an IP address of the LAN where it connects to
eth0 using the following commands:
root@kali:~# ifconfig rogue 10.1.x.y netmask
255.255.255.0 broadcast 10.1.x.255 up
root@kali:~# route add default gw 10.1.x.1
7. Start the AP to sniff authentication handshakes using the
following command:
airbase-ng -c 6 -e --ESSID /file_path/file.cap wlan0
Denial-of-service attacks
The final attack against wireless networks that we'll evaluate is the denial-of-service
attack, where an attacker deprives a legitimate user of access to a wireless network
or makes the network unavailable by causing it to crash. Wireless networks are
extremely susceptible to DoS attacks, and it is difficult to localize the attacker on
a distributed wireless network. Examples of DoS attacks include the following:
• Injecting crafted network commands, such as reconfiguration commands,
onto a wireless network can cause a failure of routers, switches, and other
network devices.
• Some devices and applications can recognize that an attack is taking place
and will automatically respond by disabling the network. A malicious
attacker can launch an obvious attack and then let the target create the
DoS itself!
• Bombarding the wireless network with a flood of data packets can make it
unavailable for use; for example, an HTTP flood attack making thousands of
page requests to a web server can exhaust its processing ability. In the same
way, flooding the network with authentication and association packets blocks
users from connecting to the access points.
[ 225 ]
Exploiting Wireless Communications
• Attackers can craft specific deauthentication and disassociation commands,
which are used in wireless networks to close an authorized connection
and to flood the network and stop legitimate users from maintaining their
connection to a wireless access point.
To demonstrate this last point, we will create a denial-of-service attack by flooding
a network with deauthentication packets. Because the wireless 802.11 protocol is
built to support deauthentication upon the receipt of a defined packet (so that a
user can break a connection when it is no longer required), this can be a devastating
attack—it complies with the standard, and there is no way to stop it from happening.
The easiest way to "bump" a legitimate user off a network is to target them with a
stream of deauthentication packets. This can be done with the help of the aircrack-
ng tool suite using the following command:
root@kali:~# aireplay-ng -0 0 -a (bssid) -c wlan0
This command identifies the attack type as -0, indicating that it is for a
deauthentication attack. The second 0 (zero) launches a continuous stream of
deauthentication packets, making the network unavailable to its users.
The Websploit framework is an open source tool used to scan and analyze remote
systems. It contains several tools, including tools that are specific to wireless attacks.
To launch it, open a command shell and simply type websploit.
The Websploit interface is similar to that of recon-ng and the Metasploit Framework,
and it presents the user with a modular interface.
Once launched, use the show modules command to see the attack modules present
in the existing version. Select the WiFi jammer (a stream of deauthentication packets)
using the use wifi/wifi_jammer command. As shown in the following screenshot,
the attacker just has to use the set commands to set the various options and then
select run to launch the attack.
[ 226 ]
Chapter 8
Summary
In this chapter, we examined several management tasks required for a successful
attack against a wireless network, including the selection of the wireless adaptor,
configuration of the wireless modem, and reconnaissance using tools such as
aircrack-ng Kismet. We focused on using the aircrack-ng suite of tools to identify
hidden networks, bypass MAC authentication, and compromise WEP and WPA/
WPA2 encryption. We also saw how to clone, or copy, a wireless access point, and
how to perform a denial-of-service attack against a wireless network.
The next chapter, will focus on how attackers target a website and its services.
We'll examine the tools used for reconnaissance, especially client-side proxies
and vulnerability scanners. We'll see how attackers take advantage of these
vulnerabilities with automated tools, such as exploit frameworks and online
password cracking. More importantly, we'll examine some discrete attacks that
usually require manual intervention, such as injection attacks and cross-site
scripting. Finally, we'll look at the peculiarities of online services and why and how
they're vulnerable to the DoS attacks.
[ 227 ]
Reconnaissance and
Exploitation of Web-based
Applications
In the previous chapters, we reviewed the attacker's kill chain—the specific
approach used to compromise networks and devices, and disclose data or hinder
access to network resources. In Chapter 7, Physical Attacks and Social Engineering, we
examined the routes of attack, starting with physical attacks and social engineering.
In Chapter 8, Exploiting Wireless Communications, we saw how wireless networks could
be compromised. In this chapter, we'll focus on one of the most common attack routes,
through websites and web-based applications.
Websites that deliver content and web-based services (for example, e-mails and FTP)
are ubiquitous, and most organizations allow remote access to these services
with almost constant availability. To penetration testers and attackers, however,
websites expose back-end services occurring on the network, client-side activities
of the users accessing the website, and the connection between users and the
website's data frequent attacks. This chapter will focus on the attacker's perspective
of websites and web services, and we will review attacks against connectivity in
Chapter 10, Exploiting Remote Access Communications and client-side attacks in
Chapter 11, Client-side Exploitation.
Reconnaissance and Exploitation of Web-based Applications
By the end of this chapter, you will have learned the following:
• Extending the principles of reconnaissance to web services
• Vulnerability scanning
• Using client-side proxies
• Exploiting vulnerabilities in web services
• Maintaining access to compromised systems with web backdoors
For many exercises, we'll use NOWASP or Mutillidae as a target
website that contains known vulnerabilities that can be exploited;
it can be downloaded from www.owasp.org/index.php/
Category:OWASP_Mutillidae. This web application can be installed
directly onto Linux or Windows using LAMP, WAMP, and XAMPP.
It is also preinstalled on the SamauraiWTF and Metasploitable testing
environments. Refer to the Appendix, Installing Kali Linux for instructions
on creating a Metasploitable test environment.
Conducting reconnaissance of websites
Websites, and the delivery of services from those sites, are particularly complex.
Typically, services are delivered to the end user using a multi-tiered architecture
with web servers that are accessible to the public Internet, while communicating with
back-end servers and databases located on the network.
The complexity is increased by several additional factors that must be taken into
account during testing, which include the following:
• Network architecture, including security controls (firewalls, IDS/IPS, and
honeypots), and configurations such as load balancing
• Platform architecture (hardware, operating system, and additional
applications) of systems that host web services
• Applications, middleware, and final-tier databases, which may employ
different platforms (Unix or Windows), vendors, programming languages,
and a mix of commercial and proprietary software
• Authentication and authorization processes, including the process for
maintaining the session state across the application
• The underlying business logic that governs how the application will be used
• Client-side interactions and communications with the web service
[ 230 ]
Chapter 9
Given the proven complexity of web services, it is important for a penetration tester
to be adaptable to each site's specific architecture and service parameters. At the
same time, the testing process must be applied consistently and ensure that nothing
is missed. Several methodologies have been proposed to accomplish these goals. The
most widely accepted one is the Open Web Application Security Project (OWASP)
(www.owasp.org) and its list of the top 10 vulnerabilities.
As a minimum standard, OWASP has provided a strong direction to testers. However,
focusing on only the top 10 vulnerabilities is short-sighted, and the methodology has
demonstrated some gaps, particularly when applied to finding vulnerabilities in the
logic of how an application should work to support business practices.
Using the kill chain approach, some activities specific to web service reconnaissance
to be highlighted include the following:
• Identifying the target site, especially with regards to where and how
it is hosted.
• Enumerating the site directory structure and files of the target website,
including determining if a content management system (CMS) is in use.
This may include downloading the website for offline analysis, including
document metadata analysis, and using the site to create a custom wordlist
for password cracking (using a program such as crunch). It also ensures that
all support files are also identified.
• Identifying the authentication and authorization mechanisms and
determining how the session state is maintained during a transaction
with that web service. This will usually involve an analysis of cookies and
how they are used.
• Enumerating all forms. As these are the primary means for a client to
input data and interact with the web service, these are the specific locations
for several exploitable vulnerabilities, such as SQL injection attacks and
cross-site scripting.
• Identifying other areas that accept input, such as pages that allow for
file upload as well as any restrictions on accepted upload types.
• Identifying how errors are handled, and the actual error messages
that are received by a user; frequently, the error will provide valuable
internal information such as version of software used, or internal file
names and processes.
• Determining which pages require and maintain Secure Sockets
Layer or other secure protocols (refer to Chapter 10, Exploiting Remote
Access Communications).
[ 231 ]
Reconnaissance and Exploitation of Web-based Applications
The first step is to conduct the passive and active reconnaissance previously
described (refer to Chapter 2, Identifying the Target – Passive Reconnaissance and
Chapter 3, Active Reconnaissance and Vulnerability Scanning); in particular, ensure that
hosted sites are identified, and then use DNS mapping to identify all the hosted sites
that are delivered by the same server (one of the most common and successful means
of attack is to attack a non-target site hosted on the same physical server as the
target website, exploit weaknesses in the server to gain root access, and then use the
escalated privileges to attack the targeted site).
The next step is to identify the presence of network-based protective devices, such as
firewalls, IDS/IPS, and honeypots. An increasingly common protective device is the
Web Application Firewall (WAF).
If a WAF is being used, testers will have to ensure that the attacks, especially those
that rely on crafted input, are encoded to bypass the WAF.
WAFs can be identified by manually inspecting cookies (some WAFs tag or modify
the cookies that are communicated between the web server and the client), or by
changes to the header information (identified when a tester connects to port 80 using
a command line tool such as Telnet).
The process of WAF detection can be automated using the nmap script,
http-waf-detect.nse, as shown in the following screenshot:
The nmap script identifies that a WAF is present; however, testing of the script has
demonstrated that it is not always accurate in its findings, and that the returned data
may be too general to guide an effective strategy to bypass the firewall.
The wafw00f script is an automated tool to identify and fingerprint web-based
firewalls; testing has determined that it is the most accurate tool for this purpose.
The script is easy to invoke from Kali, and ample output is shown in the
following screenshot:
[ 232 ]
Chapter 9
Load balancing detector (lbd) is a bash shell script that determines if a given
domain uses DNS and/or HTTP load balancing. This is important information
from the perspective of a tester, as it can explain seemingly anomalous results
that occur when one server is tested, and then the load balancer switches requests
to a different server. Lbd uses a variety of checks to identify the presence of load
balancing; a. A sample output is shown in the following screenshot:
[ 233 ]
Reconnaissance and Exploitation of Web-based Applications
The website should be inspected to determine the CMS that may be used to build
and maintain it. CMS applications such as Drupal, Joomla, and WordPress, among
others, may be configured with a vulnerable administrative interface that allows
access to the elevated privileges, or may contain exploitable vulnerabilities.
Kali includes an automated scanner, BlindElephant, which fingerprints a
CMS to determine version information. A sample output is shown in the
following screenshot:
BlindElephant reviews the fingerprint for components of the CMS and then provides
a best guess for the versions that are present. However, like other applications, we
have found that it may fail to detect a CMS that is present; therefore, always verify
results against other scanners that crawl the website for specific directories and files,
or manually inspect the site.
One particular scanning tool, automated web crawlers, can be used to validate
information that has already been gathered, as well as determine the existing
directory and file structure of a particular site. Typical findings of web crawlers
include administration portals, configuration files (current and previous versions)
that may contain hardcoded access credentials and information on the internal
structure, backup copies of the website, administrator notes, confidential personal
information, and source code.
Kali supports several web crawlers, including Burp Suite, DirBuster, OWASP-ZAP,
Vega, WebScarab, and WebSlayer. The most commonly used tool is DirBuster.
[ 234 ]
Chapter 9
DirBuster is a GUI-driven application that uses a list of possible directories and
files to perform a brute-force analysis of a website's structure. Responses can be
viewed in a list or a tree format that reflects the site's structure more accurately.
Output from executing this application against a target website is shown in the
following screenshot:
It is also possible to copy a website directly to the tester's location. This "website
cloning" allows a tester the leisure to review the directory structure and its
contents, extract metadata from local files, and use the site's contents as an input to
a program such as crunch, which will produce a personalized wordlist to support
password cracking.
To clone a website to a local system, use HTTrack. If it is not present in Kali, it can
be downloaded using the apt-get command and then executed by typing httrack
in the command prompt. You will be prompted to select a directory location to store
the downloaded website. Once the program has executed, you will have a backup of
the target website.
Once you have mapped out the basic structure of the website and/or web
services that are being delivered, the next stage of the kill chain is to identify