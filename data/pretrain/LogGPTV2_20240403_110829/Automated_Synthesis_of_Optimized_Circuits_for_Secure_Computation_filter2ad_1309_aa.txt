title:Automated Synthesis of Optimized Circuits for Secure Computation
author:Daniel Demmler and
Ghada Dessouky and
Farinaz Koushanfar and
Ahmad-Reza Sadeghi and
Thomas Schneider and
Shaza Zeitouni
Automated Synthesis of Optimized Circuits
for Secure Computation
Daniel Demmler
TU Darmstadt, Germany
daniel.demmler@ec-
spride.de
Ghada Dessouky
TU Darmstadt, Germany
PI:EMAIL
Farinaz Koushanfar
Rice University, USA
PI:EMAIL
Ahmad-Reza Sadeghi
TU Darmstadt, Germany
PI:EMAIL
Thomas Schneider
TU Darmstadt, Germany
thomas.schneider@ec-
spride.de
Shaza Zeitouni
TU Darmstadt, Germany
PI:EMAIL
ABSTRACT
In the recent years, secure computation has been the subject
of intensive research, emerging from theory to practice. In
order to make secure computation usable by non-experts,
Fairplay (USENIX Security 2004) initiated a line of research
in compilers that allow to automatically generate circuits
from high-level descriptions of the functionality that is to
be computed securely. Most recently, TinyGarble (IEEE
S&P 2015) demonstrated that it is natural to use existing
hardware synthesis tools for this task.
In this work, we present how to use industrial-grade hard-
ware synthesis tools to generate circuits that are not only
optimized for size, but also for depth. These are required
for secure computation protocols with non-constant round
complexity. We compare a large variety of circuits gener-
ated by our toolchain with hand-optimized circuits and show
reduction of depth by up to 14%.
The main advantages of our approach are developing cus-
tomized libraries of depth-optimized circuit constructions
which we map to high-level functions and operators, and
using existing libraries available in the industrial-grade logic
synthesis tools which are heavily tested. In particular, we
show how to easily obtain circuits for IEEE 754 compliant
ﬂoating-point operations. We extend the open-source ABY
framework (NDSS 2015) to securely evaluate circuits gener-
ated with our toolchain and show between 0.5 to 21.4 times
faster ﬂoating-point operations than previous protocols of
Aliasgari et al. (NDSS 2013), even though our protocols
work for two parties instead of three or more. As application
we consider privacy-preserving proximity testing on Earth.
Keywords
secure computation; automation; optimization, logic design;
hardware description
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, CO, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813678.
1.
INTRODUCTION
Secure computation allows multiple parties to evaluate a
function on their private inputs without revealing any infor-
mation except for the result of the computation. The ﬁrst pro-
tocols given were Yao’s garbled circuits protocol [Yao86] and
the protocol of Goldreich-Micali-Wigderson (GMW) [GMW87].
Both protocols securely evaluate a Boolean circuit that rep-
resents the desired functionality. Since then, a large body of
literature has been investigating the design and implementa-
tion of practical circuit-based secure computation in diﬀerent
adversarial settings. While designing eﬃcient and correct
circuits for smaller building blocks for simple applications
can be performed manually by experts, this task becomes
highly complex and time consuming for large applications
such as ﬂoating-point arithmetic and signal processing, and
is thus error-prone. Faulty circuits could potentially break
the security of the underlying applications, e.g., by leaking
additional information about a party’s private inputs. Hence,
an automated way of generating correct large-scale circuits
which can be used by regular developers is highly desirable.
A large number of compilers for secure computation such
as [MNPS04, BNP08, HKS+10, HEKM11, Mal11, MLB12,
KSS12, HFKV12, SZ13, KSMB13, ZSB13] implemented cir-
cuit building blocks manually. Although tested to some
extent, showing the correctness of these compilers and their
generated circuits is still an open problem.
Recently, TinyGarble [SHS+15] took a completely diﬀerent
approach by using already established powerful hardware
logic synthesis tools and customizing them to be adapted
to automatically generate Boolean circuits for functions to
be evaluated by Yao’s garbled circuits protocol. The ad-
vantage of this approach lies in the fact that these tools
are being used by industry for designing digital circuits,
and hence are tested thoroughly, which is justiﬁed by the
high production costs of Application-Speciﬁc Integrated Cir-
cuits (ASICs). However, these tools are designed primarily
to synthesize circuits on hardware target platforms such as
ASICs or conﬁgurable platforms such as Field Programmable
Gate Arrays (FPGAs) or Programmable Array Logic (PAL).
Using hardware logic synthesis tools for special purposes
such as generating circuits for secure computation, requires
customizations and workarounds. Exploiting these tools
promises accelerated and automated circuit generation, signif-
icant speedup, and ease in designing and generating circuits
1504for much more complicated functions, while also maintaining
the size (and depth) eﬃciency of hand-optimized smaller
circuit building blocks. In particular, TinyGarble exploited
the sequential logic to synthesize highly compact circuits.
However, TinyGarble considered only few functionalities: ad-
dition, Hamming weight, comparison, multiplication, matrix
multiplication, AES, SHA-3, and a MIPS CPU.
In this work we continue along the lines of using logic
synthesis tools for secure computation and automatically
synthesize an extensive set of basic and complex operations,
including IEEE 754 compliant ﬂoating-point arithmetic. In
contrast to TinyGarble, which generated size-optimized cir-
cuits for Yao’s garbled circuits protocol, we focus on synthesiz-
ing depth-optimized circuits for the GMW protocol [GMW87].
Although the round complexity of the GMW protocol de-
pends on the circuit depth, it has some advantages compared
with Yao’s constant-round protocol: 1) it allows to pre-
compute all symmetric cryptographic operations in a setup
phase and thus oﬀers a very eﬃcient online phase, 2) its
setup phase is independent of the function being computed,
3) it balances the workload equally between all parties, 4)
GMW allows for better parallel evaluation of the same circuit
(SIMD operations) [SZ13, DSZ15], 5) it can be extended to
multiple parties, and 6) the TinyOT protocol [NNOB12]
which provides security against stronger active adversaries,
has an online phase which is very similar to that of GMW,
and its round complexity also depends on the circuit depth.
We combine industrial-grade logic synthesis tools with the
recent open-source ABY framework [DSZ15] which imple-
ments state-of-the-art optimizations of the two-party pro-
tocols by GMW and Yao. On the one hand, our approach
allows to use existing and tested libraries for complex func-
tions such as IEEE 754 compliant ﬂoating-point operations
that are already available in these tools without the need to
re-implement them manually. On the other hand, this allows
to use high-level input languages such as Verilog where we
map high-level operations to our optimized implementations
of basic functions.
After summarizing related work in §1.2 and preliminaries
1.1 Outline and Our Contributions
in §2, we present our following contributions:
Architecture and Logic Synthesis (§3). We provide a
fully-automated end-to-end toolchain allowing the developer
to describe the function to be computed securely in a high-
level Hardware Description Language (HDL), such as Verilog,
followed by the generation of the required customized cir-
cuit and its secure evaluation using either GMW [GMW87]
or Yao’s protocol [Yao86]. Our toolchain uses hardware
synthesis tools, both open-source and commercial, to gener-
ate depth- and size-optimized circuits customized for both
protocols respectively. For this, we manipulate and engi-
neer state-of-the-art hardware synthesis tools with synthesis
constraints and customized libraries to generate circuits opti-
mized for either protocol according to the developer’s choice.
Optimized Circuit Building Blocks (§4). We develop
a library of depth-optimized and size-minimized circuits, in-
cluding arithmetic operations (e.g., addition, subtraction,
multiplication, division), comparison, counter, and multi-
plexer, which can be used to construct more complex func-
tionalities such as various distances, e.g., Manhattan, Eu-
clidean, or Hamming distance. Some of the implemented
building blocks show improvements in depth compared with
hand-optimized circuits of [SZ13] by up to 14%, while oth-
ers show at least equivalent results. Assembling sub-blocks
from our customized library can be used to construct more
complicated functionalities, which would otherwise be im-
possible to build and optimize by hand. We exploit the
capabilities of our synthesis tools to bind high-level operators
(e.g., the ‘+’ operator) and functions to optimized circuits
in our library to allow the developer to describe circuits in
Verilog using high-level operators. We also utilize built-in
Intellectual Property (IP) libraries in commercial hardware
synthesis tools to generate Boolean circuits for more complex
functionalities such as ﬂoating-point arithmetic which have
been veriﬁed and tested extensively.
Benchmarks and Evaluation (§5). We use the ABY
framework [DSZ15] to securely evaluate the Boolean cir-
cuits generated by our hardware synthesis toolchain. More-
over, we extend the list of available operations in ABY by
multiple ﬂoating-point operations. In contrast to previous
works that built dedicated and complex protocols for secure
ﬂoating-point operations, we use highly tested industrial-
grade ﬂoating point libraries. We compare the performance
of our constructions with related work. For ﬂoating-point
operations we achieve between 0.5 to 21.4 times faster run-
time than [ABZS13] and 0.1 to 3 267 times faster runtime
than [KW14]. We emphasize that we achieve these improve-
ments even in a stronger setting, where all but one party
can be corrupted and hence our protocols also work in a
two-party setting, whereas the protocols of [ABZS13, KW14]
require a majority of the participants to be honest and hence
need n ≥ 3 parties. We also present timings for integer
division that outperform related work of [ABZS13] (3-party)
by a factor of 0.6 to 3.7 and related work of [KSS13] (2-party)
by a factor of 32.4 to 274. Additionally, we present bench-
marks for matrix multiplication, but here we are slower than
previous approaches of [BNTW12, ZSB13, DSZ15].
Application: Private Proximity Testing (§6). A real
world application of ﬂoating-point calculations on private in-
puts is privacy-preserving proximity testing on Earth [ˇSG14].
We implement the formulas described in [ˇSG14] with our
ﬂoating-point building blocks and achieve faster runtime
as well as higher precision compared to their protocols.
This demonstrates that our automatically generated building
blocks can outperform hand-built solutions.
1.2 Related Work
We classify related work into diﬀerent categories next.
TinyGarble. Most related to our work is the recently pro-
posed TinyGarble framework [SHS+15] which was the ﬁrst
work to consider using hardware-synthesis tools to automati-
cally generate circuits for secure computation. The authors
used sequential circuits that allow to describe a circuit as
a loop over a smaller sub-circuit (e.g., an (cid:96)-bit ripple-carry
adder can be represented as iterating (cid:96) times over a single
bit adder). Thereby, they are capable of generating highly
compact circuit descriptions. Although this approach allows
to represent the circuits in a highly memory-eﬃcient way, the
total number of gates that are evaluated securely and hence
the communication and total number of crypto operations
remains unchanged. As the main goal of TinyGarble was to
assess the memory eﬃciency, the paper gives benchmarks
1505only for evaluating a single circuit, the ripple-carry adder,
with Yao’s garbled circuits protocol.
As described before in §1, the GMW protocol has sev-
eral advantages over Yao’s garbled circuits protocol (pre-
computation, load balancing, multiple parties, etc.), but
requires circuits with low depth. Unfortunately, sequential
circuits cannot directly be applied to the GMW protocol,
since the sequential circuit structure can signiﬁcantly in-
crease the depth of the circuit and thus the communication
rounds required by GMW. Our work is the ﬁrst to consider
automated hardware synthesis of low-depth combinational
circuits optimized for use in the GMW protocol, as well as
size-optimized circuits for Yao’s protocol. Our work also al-
lows developers to write high-level Verilog code which can be
automatically mapped to our optimized circuits by binding
our circuit descriptions to arithmetic operators.
Secure Computation Compilers from Domain Spe-
ciﬁc Languages. Fairplay [MNPS04, BNP08] and the com-
patible PAL compiler [MLB12] compile a functionality in a
domain speciﬁc input language, called Secure Function Def-
inition Language (SFDL), into a Boolean circuit described
in the Secure Hardware Deﬁnition Language (SHDL) which
is evaluated with Yao’s garbled circuits protocol. Our in-
termediate circuit description is very similar to Fairplay’s
SHDL; in fact we could easily process SHDL input. Simi-
larly, TASTY [HKS+10] proposed a domain speciﬁc input
language called TASTYL that allows to combine protocols
that mix Yao’s garbled circuits with additively homomor-
phic encryption. The compiler presented in [KSS12] also
provides a domain speciﬁc input language and showed scal-
ability to circuits consisting of billions of gates that were
evaluated with a variant of Yao’s protocol with security
against malicious adversaries. Recently, ObliVM [LWN+15]
introduced a domain speciﬁc language that is compiled into
a Yao-based secure computation protocol with support for
Oblivious RAM (ORAM).
Instead of using a domain speciﬁc input language, we use
existing Hardware Description Languages (HDLs) such as
Verilog or VHDL that are already known by many develop-
ers. Thereby, we can use existing code and allow a large
community of developers to specify functionalities without
the necessity of learning a new language.
Secure Computation Compilers from ANSI C. The
following secure computation tools use a subset of the ANSI C
programming language as input. CBMC-GC [HFKV12] ini-
tiated this line of development and used a SAT solver to
generate size-optimized Boolean circuits from a subset of
ANSI C. PCF [KSMB13] compiles into a compact interme-
diate representation that also supports loops, similar to the
sequential circuits of TinyGarble described above. Both
CBMC-GC and PCF target Yao’s garbled circuits protocol
and hence only optimize for size. PICCO [ZSB13] is a source-
to-source compiler that allows parallel evaluation and uses
secure computation protocols based on linear secret sharing
with at least three parties.
Although ANSI C is widely known as well, it has the
drawback that some operations are either not supported (e.g.,
pointer arithmetic) or incur signiﬁcant costs when compiled
into a circuit (e.g., array access depending on private values).
Thereby, existing C code sometimes needs to be rewritten or
results in ineﬃcient protocols. Although we do not eliminate
these restrictions in our work, these issues do not occur when
taking existing functionalities described in HDLs that do
not support pointers and often avoid accesses to arrays with
private indices, as these result in costly multiplexers.
Secure Computation Libraries.
In this class of tools,
the developer composes the circuits to be evaluated securely
from circuit libraries that are instantiated at runtime. This
approach has been proposed in FastGC [HEKM11] and VM-
Crypt [Mal11] both of which are based on Yao’s garbled
circuits. In fact, all implementations of the GMW proto-
col [CHK+12, SZ13, DSZ15] are secure computation libraries.
In our work we extend the ABY framework [DSZ15] to
process pre-compiled sub-circuits that can then be composed
dynamically at runtime.
2. PRELIMINARIES
In this section we provide preliminaries and background re-
lated to the GMW protocol (§2.1), hardware synthesis (§2.2),
and the IEEE 754 ﬂoating-point standard (§2.3).
2.1 The GMW protocol
In the GMW protocol [GMW87], two or more parties com-
pute a function that is encoded as Boolean circuit. The
parties’ private inputs and all intermediate gate values are
perfectly hidden by an XOR-based secret sharing scheme.
GMW allows to evaluate XOR gates locally, without interac-
tion, using only one-time pad operations and thus essentially
for free. AND gates, however, require interaction in the
form of Oblivious Transfers (OTs) or Beaver’s multiplication
triples [Bea91] that can be pre-computed in a setup phase,
which is independent from the parties’ private inputs and
the function being computed. This pre-computation can be
achieved eﬃciently by using OT extension [IKNP03, ALSZ13]
as shown in [CHK+12, SZ13]. After evaluating all circuit
gates in the online phase, the output can be reconstructed
by computing the XOR of the resulting output shares.
In order to achieve high performance, the total number of
AND gates in the circuit (the circuit size S) and the number
of AND gates from any input to any output wire (the circuit
depth D) should be low. In this work we use the variant
of the GMW protocol with two parties and security against
passive/semi-honest adversaries.
2.2 Hardware Synthesis
Hand-optimizing Boolean circuits for secure computation
is a tedious, error-prone and time-consuming task. Using
hardware synthesis tools for synthesizing and optimizing
these circuits, and even more complex circuits that cannot be
easily hand-optimized, seems to be a promising and natural
approach. As shown in TinyGarble [SHS+15], using hardware
synthesis tools allows to reduce the time and eﬀort invested
by further automating the process of generating optimized
Boolean netlists in terms of circuit size and/or depth.
Overview. Hardware or logic synthesis is the process of
translating an abstract form of circuit description into its
functionally equivalent gate-level logic implementation using
a suite of diﬀerent optimizations and mapping algorithms
that have been a theme of research over years. A logic
synthesis tool is a software which takes as input a function
description (functional, behavioral or structural description,
state machine, or truth table) and transforms and maps this
description into an output suitable for the target hardware
platform and manufacturing technology.
1506Tools. Common target hardware platforms for synthesized