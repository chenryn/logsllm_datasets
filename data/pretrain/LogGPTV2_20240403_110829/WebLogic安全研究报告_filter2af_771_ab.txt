我们先简单的看一下这些标签都有什么作用：
  * object
object标签代表一个对象，Object标签的值将会被这个对象当作参数。
This class is intended to handle  element.  
This element looks like  element,  
but its value is always used as an argument for element  
that contains this one.
  * class
class标签主要负责类加载。
This class is intended to handle  element.  
This element specifies Class values.  
The result value is created from text of the body of this element.  
The body parsing is described in the class {@link StringElementHandler}.  
For example:  
java.lang.Class
is shortcut to  
java.lang.Class  
which is equivalent to {@code Class.forName(“java.lang.Class”)} in Java code.
  * void
void标签主要与其他标签搭配使用，void拥有一些比较值得关注的属性，如class、method等。
This class is intended to handleelement.  
This element looks like element,  
but its value is not used as an argument for element  
that contains this one.
  * array
array标签主要负责数组的创建
This class is intended to handleelement,  
that is used to array creation.  
The {@code length} attribute specifies the length of the array.  
The {@code class} attribute specifies the elements type.  
The {@link Object} type is used by default.  
For example:
is equivalent to {@code new Component[10]} in Java code.  
The {@code set} and {@code get} methods,  
as defined in the {@link java.util.List} interface,  
can be used as if they could be applied to array instances.  
The {@code index} attribute can thus be used with arrays.  
For example:
    Hello, world
is equivalent to the following Java code:  
String[] s = new String[3];  
s[1] = “Hello, world”;  
It is possible to omit the {@code length} attribute and  
specify the values directly, without using {@code void} tags.  
The length of the array is equal to the number of values specified.  
For example:
    123
    456
is equivalent to {@code int[] array = {123, 456}} in Java code.
  * method
method标签可以实现调用指定类的方法
This class is intended to handle  element.  
It describes invocation of the method.  
The {@code name} attribute denotes  
the name of the method to invoke.  
If the {@code class} attribute is specified  
this element invokes static method of specified class.  
The inner elements specifies the arguments of the method.  
For example:
    10
is equivalent to {@code Long.valueOf(“10”)} in Java code.
在基本了解这些标签的作用之后，我们来看看WebLogic的PoC中为什么要用到这些标签。
DocumentHandler将Apache
Xerces返回的标签分配给对应的事件处理器处理，比如XML的java标签，如果java标签内含有class属性，则会利用反射加载类。
  * object标签
object标签能够执行命令，是因为ObjectElementHandler事件处理器在继承NewElementHandler事件处理器后重写了getValueObject()方法，使用Expression创建对象。
  * new标签
new标签能够执行命令，是因为NewElementHandler事件处理器针对new标签的class属性有一个通过反射加载类的操作。
  * void标签
void标签的事件处理器VoidElementHandler继承了ObjectElementHandler事件处理器，其本身并未实现任何方法，所以都会交给父类处理。
  * class标签
class标签的事件处理器ClassElementHandler的getValue()使用反射拿到对象。
####  PoC分析
此部分将针对一个PoC进行一个简单的分析，主要目的在于弄清这个PoC为什么能够执行命令。
首先使用JavaElementHandler处理器将java标签中的class属性进行类加载。
接着会对object标签进行处理，这一步主要是加载java.lang.ProcessBuilder类，由于ObjectElementHandler继承于NewElementHandler，所以将会使用NewElementHandler处理器来完成对这个类的加载。
然后会对array标签进行处理，这一步主要是构建一个string类型的数组，用于存放想要执行的命令，使用array标签的length属性可以指定数组的长度，由于ArrayElementHandler继承NewElementHandler，所以由NewElementHandler处理器来完成数组的构建。
接着会对void标签进行处理，这里主要是把想要执行的命令放到void标签内，VoidElementHandler没有任何实现，它只继承了ObjectElementHandler，所以void标签内的属性都会由ObjectElementHandler处理器处理。
然后会对string标签进行处理，这里主要是把string标签内的值取出来，使用StringElementHandler处理器处理。
最后需要利用void标签的method属性来实现方法的调用，开始命令的执行，由于VoidElementHandler继承ObjectElementHandler，所以将会由ObjectElementHandler处理器来完成处理。
最终在ObjectElementHandler处理器中，使用Expression完成命令的执行。
完整的解析链：
####  简要漏洞分析
简单的分析一下XMLDecoder反序列化漏洞，以WebLogic
10.3.6为例，我们可以将断点放到WLSServletAdapter.clas128行，载入Payload，跟踪完整的调用流程，也可以直接将断点打在WorkContextServerTube.class的43行readHeaderOld()方法的调用上，其中var3参数即Payload所在：
继续跟入，到WorkContextXmlInputAdapter.class的readUTF()，readUTF()调用了this.xmlDecoder.readObject()，完成了第一次反序列化：xmlDecoder反序列化。
第二次反序列化即是Payload中的链触发的了，最终造成远程代码执行。
####  补丁分析
WebLogic
XMLDecoder系列漏洞的补丁通常在weblogic.wsee.workarea.WorkContextXmlInputAdapter.class中，是以黑名单的方式修补：
不过由于此系列漏洞经历了多次的修补和绕过，现在已变成黑名单和白名单结合的修补方式，下图为白名单：
## T3反序列化漏洞
###  前置知识
在研究WebLogic相关的漏洞的时候大家一定见过JNDI、RMI、JRMP、T3这些概念，简单的说，T3是WebLogic
RMI调用时的通信协议，RMI又和JNDI有关系，JRMP是Java远程方法协议。我曾经很不清晰这些概念，甚至混淆。因此在我真正开始介绍T3反序列化漏洞之前，我会对这些概念进行一一介绍。
####  JNDI
JNDI(Java Naming and Directory
Interface)是SUN公司提供的一种标准的Java命名系统接口，JNDI提供统一的客户端API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口。
JNDI可以兼容和访问现有目录服务如：DNS、XNam、LDAP、CORBA对象服务、文件系统、RMI、DSML v1&v2、NIS等。
我在这里用DNS做一个不严谨的比喻来理解JNDI。当我们想访问一个网站的时候，我们已经习惯于直接输入域名访问了，但其实远程计算机只有IP地址可供我们访问，那就需要DNS服务做域名的解析，取到对应的主机IP地址。JNDI充当了类似的角色，使用统一的接口去查找对应的不同的服务类型。
看一下常见的JNDI的例子：
    jdbc://:
    rmi://:
    ldap://:
JNDI的查找一般使用lookup()方法如registry.lookup(name)。
####  RMI
RMI(Remote Method
Invocation)即远程方法调用。能够让在某个Java虚拟机上的对象像调用本地对象一样调用另一个Java虚拟机中的对象上的方法。它支持序列化的Java类的直接传输和分布垃圾收集。
Java
RMI的默认基础通信协议为JRMP，但其也支持开发其他的协议用来优化RMI的传输，或者兼容非JVM，如WebLogic的T3和兼容CORBA的IIOP，其中T3协议为本文重点，后面会详细说。
为了更好的理解RMI，我举一个例子：
假设A公司是某个行业的翘楚，开发了一系列行业上领先的软件。B公司想利用A公司的行业优势进行一些数据上的交换和处理。但A公司不可能把其全部软件都部署到B公司，也不能给B公司全部数据的访问权限。于是A公司在现有的软件结构体系不变的前提下开发了一些RMI方法。B公司调用A公司的RMI方法来实现对A公司数据的访问和操作，而所有数据和权限都在A公司的控制范围内，不用担心B公司窃取其数据或者商业机密。
这种设计和实现很像当今流行的Web
API，只不过RMI只支持Java原生调用，程序员在写代码的时候和调用本地方法并无太大差别，也不用关心数据格式的转换和网络上的传输。类似的做法在ASP.NET中也有同样的实现叫WebServices。
RMI远程方法调用通常由以下几个部分组成：
  * 客户端对象
  * 服务端对象
  * 客户端代理对象（stub）
  * 服务端代理对象（skeleton）
下面来看一下最简单的Java RMI要如何实现：
首先创建服务端对象类，先创建一个接口继承java.rmi.Remote:
    // IHello.java
    import java.rmi.*;
    public interface IHello extends Remote {
        public String sayHello() throws RemoteException;
    }
然后创建服务端对象类，实现这个接口：
    // Hello.java
    public class Hello implements IHello{
        public Hello() {}
        public String sayHello() {
            return "Hello, world!";
        }
    }
创建服务端远程对象骨架并绑定在JNDI Registry上：
    // Server.java
    import java.rmi.registry.Registry;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class Server{
      public Server() throws RemoteException{}
      public static void main(String args[]) {
        try {
           // 实例化服务端远程对象
            Hello obj = new Hello();
           // 创建服务端远程对象的骨架（skeleton）
            IHello skeleton = (IHello) UnicastRemoteObject.exportObject(obj, 0);
            // 将服务端远程对象的骨架绑定到Registry上
            Registry registry = LocateRegistry.getRegistry();
            registry.bind("Hello", skeleton);
            System.err.println("Server ready");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
      }
    }
RMI的服务端已经构建完成，继续关注客户端：
    // Client.java
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Client {