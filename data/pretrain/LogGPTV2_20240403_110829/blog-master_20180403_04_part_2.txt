```
8、设置环境变量  
```  
su - digoal  
vi env_pg11_llvm.sh  
export PS1="$USER@`/bin/hostname -s`-> "    
export PGPORT=4000  
export PGDATA=/data01/pg/pg_root$PGPORT    
export LANG=en_US.utf8    
export PGHOME=/home/digoal/pgsql11_llvm  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH    
export DATE=`date +"%Y%m%d%H%M"`    
export PATH=$PGHOME/bin:$PATH:.    
export MANPATH=$PGHOME/share/man:$MANPATH    
export PGHOST=$PGDATA    
export PGUSER=postgres    
export PGDATABASE=postgres    
alias rm='rm -i'    
alias ll='ls -lh'    
unalias vi   
. ./env_pg11_llvm.sh  
```  
9、初始化数据库  
```  
initdb -D $PGDATA -U postgres -E UTF8 --locale=en_US.UTF8 -X /data02/pg/pg_wal_$PGPORT  
```  
10、配置postgresql.conf  
```  
listen_addresses = '0.0.0.0'  
port = 4000  
max_connections = 3000  
unix_socket_directories = '/tmp,.'  
unix_socket_permissions = 0700  
tcp_keepalives_idle = 60  
tcp_keepalives_interval = 10  
tcp_keepalives_count = 10  
shared_buffers = 128GB  
huge_pages = on  
work_mem = 32MB  
maintenance_work_mem = 1GB  
dynamic_shared_memory_type = posix  
vacuum_cost_delay = 0  
bgwriter_delay = 10ms  
bgwriter_lru_maxpages = 500  
bgwriter_lru_multiplier = 5.0  
effective_io_concurrency = 0  
max_worker_processes = 128  
max_parallel_maintenance_workers = 2  
max_parallel_workers_per_gather = 32  
parallel_leader_participation = on  
max_parallel_workers = 128  
wal_level = minimal  
synchronous_commit = off  
wal_buffers = 128MB  
wal_writer_delay = 10ms  
wal_writer_flush_after = 8MB  
checkpoint_timeout = 35min  
max_wal_size = 256GB  
min_wal_size = 64GB  
max_wal_senders = 0  
enable_bitmapscan = on  
enable_hashagg = on  
enable_hashjoin = on  
enable_indexscan = on  
enable_indexonlyscan = on  
enable_material = on  
enable_mergejoin = on  
enable_nestloop = on  
enable_parallel_append = on  
enable_seqscan = on  
enable_sort = on  
enable_tidscan = on  
enable_partitionwise_join = on  
enable_partitionwise_aggregate = on  
enable_parallel_hash = on  
random_page_cost = 1.1  
effective_cache_size = 400GB  
log_destination = 'csvlog'  
logging_collector = on  
log_truncate_on_rotation = on  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose    
log_timezone = 'PRC'  
log_autovacuum_min_duration = 0  
autovacuum_vacuum_cost_delay = 0  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'en_US.UTF8'  
lc_monetary = 'en_US.UTF8'  
lc_numeric = 'en_US.UTF8'  
lc_time = 'en_US.UTF8'  
default_text_search_config = 'pg_catalog.english'  
# JIT相关参数  
jit_above_cost = 100000  
jit_optimize_above_cost = 500000  
jit_inline_above_cost = 500000  
dynamic_library_path = '$libdir'  
jit = on  
jit_provider = 'llvmjit'  
```  
## JIT支持到什么程度了  
目前已支持表达式、TUPLE DEFORM的JIT。  
Currently PostgreSQL's JIT implementation has support for accelerating expression evaluation and tuple deforming. Several other operations could be accelerated in the future.  
Expression evaluation is used to evaluate WHERE clauses, target lists, aggregates and projections. It can be accelerated by generating code specific to each case.  
Tuple deforming is the process of transforming an on-disk tuple (see Section 68.6) into its in-memory representation. It can be accelerated by creating a function specific to the table layout and the number of columns to be extracted.  
## 什么样的SQL适合JIT  
1、需要处理的数据量庞大  
2、每条记录需要大量的操作符参与计算  
3、需要查询的字段靠后，需要先deform tuple中前面的字段  
```  
 249 Currently expression evaluation and tuple deforming are JITed. Those  
 250 were chosen because they commonly are major CPU bottlenecks in  
 251 analytics queries, but are by no means the only potentially beneficial cases.  
 252   
 253 For JITing to be beneficial a piece of code first and foremost has to  
 254 be a CPU bottleneck. But also importantly, JITing can only be  
 255 beneficial if overhead can be removed by doing so. E.g. in the tuple  
 256 deforming case the knowledge about the number of columns and their  
 257 types can remove a significant number of branches, and in the  
 258 expression evaluation case a lot of indirect jumps/calls can be  
 259 removed.  If neither of these is the case, JITing is a waste of  
 260 resources.  
 261   
 262 Future avenues for JITing are tuple sorting, COPY parsing/output  
 263 generation, and later compiling larger parts of queries.  
```  
## PG优化器如何选择是否使用JIT  
### 控制参数  
1、jit (boolean)  
Determines whether JIT may be used by PostgreSQL, if available (see Chapter 32). The default is on.  
默认ON，表示开启JIT。  
2、jit_above_cost (floating point)  
Sets the planner's cutoff above which JIT compilation is used as part of query execution (see Chapter 32). Performing JIT costs time but can accelerate query execution. The default is 100000.  
默认100000，当planner发现COST大于这个值时，优化器会启用JIT动态编译。  
3、jit_optimize_above_cost (floating point)  
Sets the planner's cutoff above which JIT compiled programs (see jit_above_cost) are optimized. Optimization initially takes time, but can improve execution speed. It is not meaningful to set this to a lower value than jit_above_cost. The default is 500000.  
默认500000，当planner发现COST大于这个值时，优化器会启用JIT动态编译优化。  
4、jit_inline_above_cost (floating point)  
Sets the planner's cutoff above which JIT compiled programs (see jit_above_cost) attempt to inline functions and operators. Inlining initially takes time, but can improve execution speed. It is unlikely to be beneficial to set jit_inline_above_cost below jit_optimize_above_cost. The default is 500000.  
默认500000，当planner发现COST大于这个值时，优化器会对用户自定义函数、操作符(目前仅支持C, internal类型的函数)启用JIT优化。  
https://www.postgresql.org/docs/devel/static/jit-extensibility.html#JIT-PLUGGABLE  
5、jit_provider (string)  
Determines which JIT provider (see JIT Extensibility) is used. The built-in default is llvmjit.  
If set to a non-existent library JIT will not be available, but no error will be raised. This allows JIT support to be installed separately from the main PostgreSQL package. This parameter can only be set at server start.  
为了让JIT支持更多的编译器，PG设计时对编译器的支持也是模块化的，通过jit_provider可以指定使用哪个编译器，当然这个需要实现对应的provider接口才行。  
https://www.postgresql.org/docs/devel/static/jit-extensibility.html#JIT-PLUGGABLE  
目前PG默认选择的是LLVM编译器，原因是LLVM友好的许可协议与PG的开源许可协议无冲突。第二方面是LLVM后面有很强大的公司在支撑，比如苹果。  
```  
  52 PostgreSQL, by default, uses LLVM to perform JIT. LLVM was chosen  
  53 because it is developed by several large corporations and therefore  
  54 unlikely to be discontinued, because it has a license compatible with  
  55 PostgreSQL, and because its IR can be generated from C using the Clang  
  56 compiler.  
```  
### 控制代码  
src/backend/jit/jit.c  
```  
/* GUCs */  
bool            jit_enabled = true;  
char       *jit_provider = "llvmjit";  
bool            jit_debugging_support = false;  
bool            jit_dump_bitcode = false;  
bool            jit_expressions = true;  
bool            jit_profiling_support = false;  
bool            jit_tuple_deforming = true;  
double          jit_above_cost = 100000;  
double          jit_inline_above_cost = 500000;  
double          jit_optimize_above_cost = 500000;  
```  
src/include/jit/jit.h  
```  
/* Flags determining what kind of JIT operations to perform */  
#define PGJIT_NONE     0  
#define PGJIT_PERFORM  1 jitFlags = PGJIT_NONE;  
        if (jit_enabled && jit_above_cost >= 0 &&  
                top_plan->total_cost > jit_above_cost)  
        {  
                result->jitFlags |= PGJIT_PERFORM;  
                /*  
                 * Decide how much effort should be put into generating better code.  
                 */  
                if (jit_optimize_above_cost >= 0 &&  
                        top_plan->total_cost > jit_optimize_above_cost)  
                        result->jitFlags |= PGJIT_OPT3;  
                if (jit_inline_above_cost >= 0 &&  
                        top_plan->total_cost > jit_inline_above_cost)  
                        result->jitFlags |= PGJIT_INLINE;  
                /*  