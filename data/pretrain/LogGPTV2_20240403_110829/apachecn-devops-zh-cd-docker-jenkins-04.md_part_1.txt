# 四、持续集成管道
我们已经知道如何配置 Jenkins。在这一章中，您将看到如何有效地使用它，重点是 Jenkins 的核心功能，管道。通过从头开始构建一个完整的持续集成过程，我们将描述现代面向团队的代码开发的所有方面。
本章包括以下几点:
*   解释流水线的概念
*   介绍 Jenkins 管道语法
*   创建持续集成管道
*   解释 Jenkins 文件的想法
*   创建代码质量检查
*   添加管道触发器和通知
*   解释开发工作流程和分支策略
*   介绍 Jenkins 多牧场
# 引入管道
管道是一系列自动化操作，通常代表软件交付和质量保证过程的一部分。它可以简单地看作是一系列脚本，提供了以下额外的好处:
*   **操作分组**:操作被分组到阶段(也称为**门**或**质量门**)中，将结构引入到流程中，并明确定义规则:如果一个阶段失败，则不再执行下一个阶段
*   **可见性**:流程的各个方面都是可视化的，有助于快速进行故障分析，促进团队协作
*   **反馈**:团队成员一有问题就了解，反应快
The concept of pipelining is similar for most Continuous Integration tools, however, the naming can differ. In this book, we stick to the Jenkins terminology.
# 管道结构
Jenkins 管道由两种元素组成:阶段和步骤。下图显示了它们的使用方法:
![](img/f0485dcf-1ed8-4ab0-bb5a-7cea1f89a09f.png)
以下是基本的管道元素:
*   **步骤**:单个操作(告诉 Jenkins 做什么，例如，从存储库中签出代码，执行脚本)
*   **阶段**:步骤的逻辑分离(对概念上不同的步骤序列进行分组，例如，**构建、测试、**和**部署**)，用于可视化 Jenkins 管道进度
Technically, it's possible to create parallel steps; however, it's better to treat it as an exception when really needed for optimization purposes.
# 多阶段 Hello World
例如，让我们扩展`Hello World`管道以包含两个阶段:
```
pipeline {
     agent any
     stages {
          stage('First Stage') {
               steps {
                    echo 'Step 1\. Hello World'
               }
          }
          stage('Second Stage') {
               steps {
                    echo 'Step 2\. Second time Hello'
                    echo 'Step 3\. Third time Hello'
               }
          }
     }
}
```
管道在环境方面没有特殊要求(任何从代理)，它在两个阶段内执行三个步骤。当我们单击立即构建时，我们应该会看到可视化表示:
![](img/e654212a-9407-4e1a-9543-e54ee2b15bdf.png)
管道成功了，我们可以通过点击控制台查看步骤执行细节。如果任何步骤失败，处理将停止，并且不会运行进一步的步骤。实际上，管道的全部原因是防止所有进一步的步骤被执行，并可视化故障点。
# 管道语法
我们已经讨论了管道元素，并且已经使用了一些管道步骤，例如`echo`。我们还可以在管道定义中使用哪些操作？
In this book, we use the declarative syntax that is recommended for all new projects. The different options are Groovy-based DSL and (prior to Jenkins 2) XML (created via the web interface).
声明性语法旨在使理解管道变得尽可能简单，即使不是每天编写代码的人也是如此。这就是为什么语法只限于最重要的关键词。
让我们准备一个实验，在描述所有细节之前，阅读下面的管道定义，并尝试猜测它的功能:
```
pipeline {
     agent any
     triggers { cron('* * * * *') }
     options { timeout(time: 5) }
     parameters { 
          booleanParam(name: 'DEBUG_BUILD', defaultValue: true, 
          description: 'Is it the debug build?') 
     }
     stages {
          stage('Example') {
               environment { NAME = 'Rafal' }
               when { expression { return params.DEBUG_BUILD } } 
               steps {
                    echo "Hello from $NAME"
                    script {
                         def browsers = ['chrome', 'firefox']
                         for (int i = 0; i < browsers.size(); ++i) {
                              echo "Testing the ${browsers[i]} browser."
                         }
                    }
               }
          }
     }
     post { always { echo 'I will always say Hello again!' } }
}
```
希望管道没有吓到你。相当复杂。实际上，它非常复杂，包含了所有可能的 Jenkins 指令。为了解答这个实验难题，让我们看看流水线是如何一条条指令地进行操作的:
1.  使用任何可用的代理。
2.  每分钟自动执行。
3.  如果执行时间超过 5 分钟，则停止。
4.  开始前要求布尔输入参数。
5.  将`Rafal`设置为环境变量名称。
6.  仅在`true`输入参数的情况下:
    *   打印`Hello from Rafal`
    *   打印`Testing the chrome browser`
    *   打印`Testing the firefox browser`
7.  执行过程中如有错误，打印`I will always say Hello again!`。
让我们描述最重要的 Jenkins 关键词。声明性管道总是在`pipeline`块中指定，并包含部分、指令和步骤。我们将逐一介绍。
The complete pipeline syntax description can be found on the official Jenkins page at [https://jenkins.io/doc/book/pipeline/syntax/](https://jenkins.io/doc/book/pipeline/syntax/).
# 部分
部分定义了管道结构，通常包含一个或多个指令或步骤。它们由以下关键词定义:
*   **阶段**:这定义了一系列一个或多个阶段指令
*   **步骤**:这定义了一系列一个或多个步骤指令
*   **Post** :这定义了在管道构建结束时运行的一系列一个或多个步骤指令；标有条件(例如，始终、成功或失败)，通常用于在管道构建后发送通知(我们将在*触发器和通知*部分对此进行详细介绍。)
# 指令
指令表示管道或其部件的配置:
*   **代理**:指定执行发生的位置，并且可以定义`label`来匹配同等标记的代理，或者`docker`来指定一个容器，该容器被动态地提供来为管道执行提供环境
*   **触发器**:这定义了触发管道的自动化方式，并且可以使用`cron`设置基于时间的调度或`pollScm`检查存储库的更改(我们将在*触发器和通知*部分对此进行详细介绍)
*   **选项**:指定管道特定选项，如`timeout`(管道运行最长时间)或`retry`(管道故障后应重新运行的次数)
*   **环境**:这定义了一组在构建过程中用作环境变量的键值
*   **参数**:定义用户输入参数列表
*   **阶段**:这允许步骤的逻辑分组
*   **当**时:根据给定的条件决定是否执行该阶段
# 步伐
步骤是管道最基本的部分。他们定义要执行的操作，所以他们实际上告诉 Jenkins**该做什么**。
*   **sh** :执行 shell 命令；实际上，使用`sh`几乎可以定义任何操作
*   **自定义** : Jenkins 提供了很多可以作为步骤的操作(例如`echo`)；其中很多只是为了方便而使用的`sh`命令的包装器；插件也可以定义自己的操作
*   **脚本**:这执行了一段基于 Groovy 的代码，可以用于一些需要流量控制的非平凡场景
The complete specification of the available steps can be found at: [https://jenkins.io/doc/pipeline/steps/](https://jenkins.io/doc/pipeline/steps/).
请注意，管道语法在技术上非常通用，几乎可以用于任何自动化过程。这就是为什么管道应该被视为结构化和可视化的方法。然而，最常见的用例是实现连续集成服务器，我们将在下一节中讨论。
# 提交管道
最基本的连续集成过程称为提交管道。顾名思义，这个经典阶段从提交(或以 Git 形式推送)到主存储库开始，并产生一个关于构建成功或失败的报告。因为它在代码的每次更改之后运行，所以构建应该不超过 5 分钟，并且应该消耗合理数量的资源。提交阶段始终是持续交付过程的起点，它提供了开发过程中最重要的反馈周期，如果代码处于健康状态，它会提供持续的信息。
提交阶段的工作方式如下。开发人员将代码签入存储库，持续集成服务器检测到更改，构建开始。最基本的提交管道包含三个阶段:
*   **签出**:这个阶段从存储库中下载源代码
*   **编译**:这个阶段编译源代码
*   **单元测试**:这个阶段运行一套单元测试
让我们创建一个示例项目，看看如何实现提交管道。
This is an example of a pipeline for the project that uses technologies such as Git, Java, Gradle, and Spring Boot. Nevertheless, the same principles apply to any other technology.
# 检验
从存储库中签出代码始终是任何管道中的第一个操作。为了看到这一点，我们需要一个存储库。然后，我们将能够创建一个管道。
# 创建 GitHub 存储库
在 GitHub 服务器上创建存储库只需几个步骤:
1.  转到[https://github.com/](https://github.com/)页面。
2.  如果您还没有帐户，请创建一个帐户。
3.  单击新建存储库。
4.  给它起个名字，`calculator`。
5.  勾选使用自述文件初始化此存储库。
6.  单击创建存储库。
现在，您应该看到存储库的地址，例如，`https://github.com/leszko/calculator.git`。
# 创建结帐阶段
我们可以创建一个名为`calculator`的新管道，并且作为**管道脚本**，将代码放入一个名为 Checkout 的阶段:
```
pipeline {
     agent any
     stages {
          stage("Checkout") {
               steps {
                    git url: 'https://github.com/leszko/calculator.git'
               }
          }
     }
}
```
管道可以在任何代理上执行，它唯一的步骤就是从存储库中下载代码。我们可以点击立即构建，看看它是否成功执行。
Note that the Git toolkit needs to be installed on the node where the build is executed.
当我们结账的时候，我们已经准备好第二阶段了。
# 编制
为了编译项目，我们需要:
1.  用源代码创建一个项目。
2.  将其推送到存储库。
3.  将编译阶段添加到管道中。
# 创建一个 Java Spring Boot 项目
让我们使用 Gradle 构建的 Spring Boot 框架创建一个非常简单的 Java 项目。
Spring Boot is a Java framework that simplifies building enterprise applications. Gradle is a build automation system that is based on the concepts of Apache Maven.
创建 Spring Boot 项目的最简单方法是执行以下步骤:
1.  转到[http://start.spring.io/](http://start.spring.io/)页面。
2.  选择 Gradle 项目而不是 Maven 项目(如果您喜欢 Maven 而不是 Gradle，也可以离开 Maven)。
3.  填充组和工件(例如`com.leszko`和`calculator`)。
4.  将网站添加到依赖项。
5.  单击生成项目。
6.  生成的骨架项目要下载(即`calculator.zip`文件)。
以下截图显示了[http://start.spring.io/](http://start.spring.io/)页面:
![](img/f7679438-1eed-48ca-be76-8fc68853701d.png)
# 将代码推送到 GitHub
我们将使用 Git 工具执行`commit`和`push`操作: