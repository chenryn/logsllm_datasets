Whether certificate pinning is performed to pin to a specific certificate
This list goes from the highest level defenses and arguably what is considered mandatory (the first three)
through to the lowest level and least technically sophisticated to implement (the last two).
To validate these mitigations, you can use tools such as mitmproxy (http://mitmproxy.org/) combined with
tools such as Burp Proxy, Mallory, or Canape.
In situations where proprietary protocols are used, you typically must employ a mixture of traffic analysis and
reverse engineering to understand the following constructs:
Key generation and storage
Key exchange/agreement
Ciphering and mode of operation
Data integrity and mode of operation, if required
One important consideration is even though data is encrypted, it may not be afforded integrity protection.
Although SSL and TLS provide this capability through the use of Hash-based Message Authentication Codes
(HMACs), other protocols may not. This can be important in, for example, a mobile payments app where an
attacker might be able to change the amount being transferred even though he might not be able to reliably
control the amount.
One way to validate an app's susceptibility to encrypted traffic modification is to first determine that the data
the app is sending is encrypted, stored, and reflected back to the app. You can then bit-flip the encrypted content
to see whether the content is accepted by the server and whether the content reflected back to the app changes.
If the data is obviously BASE64 or similarly encoded, decode it prior to bit-flipping. Then re-encode it before
transmitting it to the server. You can make these modifications programmatically to traffic sent between the app
and server using tools such as Mallory or Canape.
Integrity
As mentioned in the previous section, integrity is important, and protocols such as TLS automatically provide
mechanisms to provide integrity. In some situations a protocol does not need to be encrypted, but it does need
integrity validation. For example, developers who don't want to pay for TLS or provide a certificate for their
domain might employ integrity checks to allow the use of a Content Distribution Network (CDN).
When you're using cleartext protocols, analyzing them is important to identify whether the data being modified
in transit has a negative security impact on the device. You must also verify that where integrity is provided it
has an HMAC. Other integrity mechanisms such as CRC32, MD5, SHA1, or SHA2, while useful to validate
corruption, do not provide a way of reliably validating integrity.
Handling Personally Identifiable Information and Privacy
When assessing an app for PII handling, referencing the guidelines on this topic produced by the GSM
Association in its publication from 2012 titled, “Privacy Design Guidelines for Mobile Application Development”
is a good idea (http://www.gsma.com/publicpolicy/privacy-design-guidelines-for-mobile-application-
development). Vodafone provides privacy guidelines as well (http://developer.vodafone.com/develop-
apps/privacy/privacy-guidelines/). If you are reviewing apps for certain markets, local or regional guidelines
may exist, such as the “Privacy On the Go” guidelines from the California Attorney General's office
(http://oag.ca.gov/sites/all/files/agweb/pdfs/privacy/privacy_on_the_go.pdf).
Validating how PII is handled involves analyzing three distinct aspects of the app:
Data transmitted from the app to servers
Data stored by the app in the shared files directory
Data exposed to other apps via IPC (Inter Process Communication) mechanisms other than shared files,
such as PPS (Persistent Publish/Subscribe)
Understanding which PII the app has access to is important. You typically deduce this information from
reviewing the capabilities and permissions the app has. The following permissions are PII or privacy related:
read_geolocation—Read the current GPS location of the device (deprecated).
_sys_access_pim_unified *—Integrate with the BlackBerry Hub. With this permission, your app can create
and manage data in the BlackBerry Hub. This capability requires special permissions from BlackBerry.
access_location_services—Access the current location of the device, as well as locations that the user has
saved.
record_audio—Access the audio stream from the microphone on the device.
read_personally_identifiable_information—Access user information on the device, such as the first name,
last name, and BlackBerry ID username of the user currently associated with this device.
access_pimdomain_notebooks—Access the content stored in notebooks on the device. This access includes
adding entries to, and deleting entries from, the notebooks.
access_phone—Determine when a user is on a phone call. This access also allows an app to access the phone
number assigned to the device and send Dual Tone Multi-Frequency (DTMF) tones.
read_phonecall_details—View the status of phone calls that are in progress and the phone number of the
remote party.
access_pimdomain_calllogs—View the logs of previous incoming or outgoing phone calls.
access_shared—Read and write files that are shared between all apps on the device. With this permission,
your app can access pictures, music, documents, and other files that are stored on the user's device, at a
remote storage provider, or on a media card.
_sys_access_smartcard_api*—Encrypt, decrypt, sign, and verify data using a smart card. This capability
requires special permissions from BlackBerry.
access_sms_mms—Access the text messages that are stored on the device. This access includes viewing,
creating, sending, and deleting text messages.
access_wifi_public—Receive Wi-Fi event notifications such as Wi-Fi scan results or changes in the Wi-Fi
connection state.
How to identify issues with regards to the first two have already been covered earlier in this chapter. For the last
(which exposes PII- or privacy-impacting data to other apps) understanding the IPC mechanisms available to
BlackBerry apps is important (see Chapter 15). You must analyze each mechanism to understand whether it
exposes PII or privacy data. Examples include:
PPS objects—Review new PPS objects created by the app under the /pps namespace to identify those
exposing sensitive data.
Network servers—Review any new listening network socks to identify any that expose sensitive data and
do not enforce some form of authentication. This involves reviewing the output of netstat pre- and post-app
installation and then analyzing the interface.
Shared memory—Review any new shared memory instances that expose sensitive information. To review
these you must write code to interact with the shared memory sections.
Although local exposure to other apps of sensitive information might be less severe due to the need to have a
malicious app on the device it should still be considered a risk. This risk stems from the fact that an installed
malicious app may be able to access this sensitive information via the target app even though it does not have
the appropriate capabilities and permissions itself. Historically, we've seen numerous examples of this on
platforms such as Android.
Ensuring Secure Development
Beyond the specific topics already discussed in this chapter there are also more generic classes of issue that are
valuable to identify and articulate to developers. These classes of issues have the ability either to introduce
vulnerabilities themselves or significantly ease the exploitation of other issues present in the app.
Missing Compiler and Linker Defenses
For native Cascade and WebWork apps that use Cordova plug-ins you should assess whether the necessary
compiler/linker defenses are in place. (See Chapter 17.) To do this you use the cross-compiler objdump that
comes with the IDE and checksec.sh from Trapkit (http://www.trapkit.de/tools/checksec.html).
You must first obtain and extract the BAR files, and then run checksec.sh across the native binaries (including
libraries) looking for any omissions. In addition to checking for these important in-depth features, this bash
script checks for RPATH and RUNPATH. I made this addition while at BlackBerry. RPATH and RUNPATH are used by the
loader:
. . . All -rpath arguments are concatenated and passed to the runtime linker, which uses them to locate
shared objects at runtime. The -rpath option is also used when locating shared objects that are needed by
shared objects explicitly included in the link; see the description of the -rpath-link option. If -rpath isn't
used when linking an ELF executable, the contents of the following directories are searched in order:
LD_LIBRARY_PATH
_CS_LIBPATH.
http://www.qnx.org.uk/developers/docs/6.4.0/neutrino/utilities/l/ld.html
This functionality is the equivalent to the DLL Search Order on Microsoft Windows
(http://msdn.microsoft.com/en-gb/library/windows/desktop/ms682586(v=vs.85).aspx) but provides a
mechanism for developers to override it and quite frankly do something crazy. Because of its ability to provide
(in theory) an RPATH / RUNPATH of an untrusted location and thus undermine the security model, auditing it if
present is important.
Vulnerable Third-Party Libraries
Another key consideration for native, Cascade, and WebWork apps that use Cordova plug-ins is the version of
any third-party native libraries that they ship with within the BAR, or worst case are statically linked into the
main ELF file.
Identifying these vulnerable third-party external or statically linked libraries involves two approaches. The first
is the use of a utility such as strings to extract any ASCII or UNICODE version strings that might be included
and then cross referencing these extracted strings with the author's sites and vulnerability databases to
determine whether these strings are vulnerable.
If the preceding approach doesn't yield anything, either version strings are omitted or are otherwise
inconclusive, then the second approach is to fall back to reverse engineering, at least initially, to compare or
develop binary signatures in Yara (https://yara.readthedocs.org/) that represent the vulnerable and non-
vulnerable function.
I discuss how to write robust Yara rules to detect statically linked, Heartbleed-vulnerable OpenSSL in the blog
post, “Writing robust Yara detection rules for Heartbleed”
(https://www.nccgroup.com/en/blog/2014/06/writing-robust-yara-detection-rules-for-heartbleed/). The
basic concept behind the approach is to compile a non-vulnerable version and disassemble it, as shown in Figure
16.1.
Figure 16.1 Disassembly of vulnerable function in IDA Pro
You extract the byte that doesn't reference things that can change, such as registers and addresses. These are
highlighted in Figure 16.1.
You then replicate the process used for the vulnerable version of the function and get a signature string such as
this:
Ru`le HeartBleedARM
{
strings:
$opensslminiARM = {04 ?? ?? ?? E9 1C 4F EA 18 22 C3
1C 07 46 80 F8 02 \
80 02 20 7A 70 42 46 38 70 18 46 ?? F7}
condition:
$opensslminiARM
}
Over time, your signature set will grow, enabling you to quickly scan apps for vulnerable dynamically and
statically linked third-party libraries.
Native Code Vulnerability Classes
The topic of discovering native code vulnerabilities classes would fill a book. When we refer to native code
vulnerabilities classes we primarily mean memory corruption, such as buffer overflows, underflows, double
frees, format strings, use-after-frees, and similar items.
The primary method for discovering these is fuzzing. Fuzzing is the nomenclature used for automated, negative
test case generation and execution, and automated bucketing or triaging, about which entire books have been
written. What you fuzz and how depends on the purpose of app. For example, for an image-parsing app, your
target would be the image formats that it supports. You would most likely fuzz via the Invocation Framework or
by writing a custom test harness around the app's image-processing library.
If you wanted to use the Invocation Framework (see Chapter 15 in the “Invocation Framework” section) you
would first inspect the application's manifest and look for invocation targets, the bb.action.OPEN action, and
then (if supported) either common image extensions or MIME types. If these are present then you would be
able to use the Invocation Framework to supply your generated test cases to the app. BlackBerry provides a
sample invocation client app that shows you how to use the framework to save development time
(https://github.com/blackberry/Cascades-Samples/tree/master/invokeclient).
When there isn't an invocation target for the functionality you want, then the next avenue to explore is writing
your own instrumentation harness (i.e., a binary wrapped that is able to load the library, supply data and
monitor for crashes, etc.) around the target libraries if they are external to the app. If the library is open source
(you could code review) this will simply be a case of getting the headers. If the library is proprietary, you must
revert to reverse engineering to create your own headers so you can use the library.
After you have the ability to invoke the functionality you want to fuzz, it is then a case of executing the harness
within the simulator (which allows higher degrees of performance/parallelism) or the real device. The core files
for any issues appear in logs/*.core.
When you assess for native code issues there are obviously native and Cascade apps; however, equally
important are WebWorks apps, which use Cordova plug-ins. As discussed in Chapter 14 these plug-ins are native
code with a JavaScript bridge to a native function that are then callable from the app. The attack path will be
app-dependent but might include assets downloaded over HTTP connections or an injection vulnerability that
allows you to inject JavaScript. You're looking to obtain arbitrary code execution.
Injection Vulnerability Classes
Apps that are potentially susceptible to injection vulnerabilities will primarily be Cascade and WebWorks based.
In both cases you need to identify a source of tainting that gets you into a position to influence the scripting
engines.
When considering injection vulnerabilities look for traditional JavaScript injection, DOM-based injection, and
HTML or markup injection.
Again, entire books are written on this subject, but a common and quite effective way to identify such issues is
to walk through the app identifying strings that appear to originate from external sources in the network, a local
file, or the IPC mechanisms. You then attempt to taint these strings either at the source or via interception and
modify them with common payloads to demonstrate vulnerability. A good reference for these strings is the
OWASP Filter Evasion Cheat Sheet (https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet).
Within Cascades apps things can get quite complex because you have the ability to expose C++ objects to QML
and vice versa (http://developer
.blackberry.com/native/documentation/cascades/dev/integrating_cpp_qml/). As a result understanding this
functionality which is available and going beyond standard cross-site-scripting classes is important. As noted in
the QML security document, assessing all instances of the following is important:
Uses of import to ensure they don't import QML or JavaScript that could be intercepted or otherwise tainted
by an attacker.
Uses of Loader to ensure they do not import QML or JavaScript that could be intercepted or otherwise
tainted by an attacker.
Uses of XMLHttpRequest to ensure they do not load data that an attacker can control and then execute.
Normally, you conduct assessments in these cases at a source level by extracting the BAR and inspecting the
underlying code.
Logic Issues
The final primary class of vulnerability to consider is logic issues. These vulnerabilities are highly dependent on
the functionality of the app. This class of issue includes everything from the weird to the wonderful to the
downright crazy. To discover these issues you must have a good understanding of all facets of the app and all the
topics documented in Chapters 14, 15, 16, and 17.
Logic issues really can be anything from the supporting of negative order amounts which result in the app giving
you money through to user interface spoofing and everything in between. As a result it is imperative to
understand the function of the app, how the user will interact with it, likely implicit security boundaries, and
how any of these can be misused.
Summary
In this chapter you looked at the common types of vulnerabilities to which BlackBerry 10 apps can be
susceptible and how to go about identifying whether an app is vulnerable. We've tried to provide specific
guidance to common point issues, and in places provide guidance on the types of things to consider and how to
assess for them.
This topic is almost limitless and as such potential vulnerabilities will be highly dependent on the app you are
trying to hack. Understanding the app, its core function, attack surface, development language, and the services
it interacts with is important. This understanding allows you to develop representative attack threat models and
thus accurate attack trees (conceptual diagrams showing how an asset, or target, might be attacked) to use
against the app.
CHAPTER 17
Writing Secure BlackBerry Applications
The accepted wisdom made famous by initiatives such as Microsoft’s Security Development Lifecycle
(https://www.microsoft.com/security/sdl/), SafeCode (http://www.safecode.org/), BSIMM
(http://bsimm.com/), and similar is that in regard to software security an ounce of prevention is worth a pound
of cure (if you work in imperial measurements still). In other words, if security is considered earlier in the
development lifecycle you can significantly reduce the likelihood of finding issues late in the cycle, or worst-
case, after release. Although this approach should begin in the requirements and design stages, consideration
during development is equally important and thus this chapter.
In this chapter you look at how to write secure BlackBerry applications from a development perspective. To
develop applications in a secure manner, understanding the features that you can implement is important from
the outset so that you take the corresponding security and API selection considerations into account during
development.
This chapter first looks at how to secure BlackBerry OS Legacy applications before looking at BlackBerry 10
native, Cascade, and HTML and JavaScript applications. It does not cover BlackBerry 10 Adobe AIR–based apps
because support for it is depreciated in 10.3.1.
Securing BlackBerry OS 7.x and Earlier Legacy Java Applications
As you write BlackBerry OS 7.x and earlier legacy (or BlackBerry classic) applications in Java (this section does
not consider packaged HTML5 and JavaScript), you do not need to consider certain classes of vulnerability such
as memory corruption. However, you must consider an array of generic Java- and BlackBerry-specific issues.
This chapter covers all the common security features available to developers while giving examples about how
to use them, as well as any associated caveats.
General Java Secure Development Principals
Before addressing the BlackBerry OS 7.x–specific API considerations, it’s worth reading through the general
principals outlined in the CERT Oracle Secure Coding Standard for Java
(https://www.securecoding.cert.org/confluence/display/java/The+CERT+Oracle+Secure+Coding+Standard+for+Java
Although not all of them are relevant, a number of generic areas do apply, namely:
Subset of Input Validation and Data Sanitization (IDS)
Subset of Numeric Types and Operations (NUM)
Subset of Object Orientation (OBJ)
Subset of Methods (MET)
Subset of Miscellaneous (MSC)
After you have reviewed these sections you’re ready to understand the BlackBerry OS 7.x Java-specific practices.
Making Apps Work with the Application Control Policies
BlackBerry has a powerful control framework known as Application Control Policies
(http://www.blackberry.com/newsletters/connection/it/i610/control_policies.shtml). These policies allow
a rich set of controls to be placed around applications at either the BES (BlackBerry Enterprise Server)
administrator’s or user’s behest. These areas include certain API access such as:
What happens when you insert your smartphone in a holster?
Is access to the Browser Filters API allowed?
Is access to the Email API allowed?
Is access to the Event Injection API allowed?
Is access to the File API allowed?
Is access to the GPS API allowed?
Is access to the Handheld Key Store allowed?
Is access to the Interprocess Communication API allowed?
Is access to the Phone API allowed?
Is access to the Media API allowed?
Is access to the Module Management API allowed?
Is access to the PIM API allowed?
Is access to the Screen, Microphone, and Video Capturing APIs allowed?
Is access to the Serial Port Profile for Bluetooth API allowed?
Is access to the User Authenticator API allowed?
Is access to the Wi-Fi API allowed?
As a result, developers wanting to write robust security-conscious applications should not automatically assume
that their app will be granted access to all the APIs it requires. Instead the recommendation is that you use