     ........................   
     18868:     symbol=_dl_signal_error;  lookup in file=./envTest [0]  
     18868:     symbol=_dl_signal_error;  lookup in file=./libshowBytes.so [0]  
     18868:     symbol=_dl_signal_error;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]  
     18868:     symbol=_dl_catch_error;  lookup in file=./envTest [0]  
     18868:     symbol=_dl_catch_error;  lookup in file=./libshowBytes.so [0]  
     18868:     symbol=_dl_catch_error;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]  
     18868:  
     18868:     calling init: /lib/x86_64-linux-gnu/libc.so.6  
     18868:  
     18868:  
     18868:     calling init: ./libshowBytes.so  
     18868:  
     18868:  
     18868:     initialize program: ./envTest  
     18868:  
     18868:  
     18868:     transferring control: ./envTest  
     18868:  
     18868:     symbol=_dl_find_dso_for_object;  lookup in file=./envTest [0]  
     18868:     symbol=_dl_find_dso_for_object;  lookup in file=./libshowBytes.so [0]  
     18868:     symbol=_dl_find_dso_for_object;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]  
     18868:     symbol=_dl_find_dso_for_object;  lookup in file=/lib64/ld-linux-x86-64.so.2 [0]  
     18868:     symbol=__tunable_get_val;  lookup in file=./envTest [0]  
     18868:     symbol=__tunable_get_val;  lookup in file=./libshowBytes.so [0]  
     18868:     symbol=__tunable_get_val;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]  
     18868:     symbol=__tunable_get_val;  lookup in file=/lib64/ld-linux-x86-64.so.2 [0]  
calling show_twocomp  
     18868:     symbol=printf;  lookup in file=./envTest [0]  
     18868:     symbol=printf;  lookup in file=./libshowBytes.so [0]  
     18868:     symbol=printf;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]  
     18868:     symbol=putchar;  lookup in file=./envTest [0]  
     18868:     symbol=putchar;  lookup in file=./libshowBytes.so [0]  
     18868:     symbol=putchar;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]  
 39 30  
 c7 cf  
     18868:  
     18868:     calling fini: ./envTest [0]  
     18868:  
     18868:  
     18868:     calling fini: ./libshowBytes.so [0]  
     18868:  
```  
### 4、rpath 路径  
rpath 路径需要在编译时指定，因为这些信息会被写入到了 ELF 文件中。  
```  
gcc showBytes.c -fPIC -shared -o libshowBytes.so -I. -L. -lshowBytes -g -Wall -Wl,-rpath-link $(pwd)  
gcc -o envTest envTest.c -I. -L . -lshowBytes -g -Wall -Wl,-rpath $(pwd)  
```  
此时，检查下动态了依赖关系如下：  
```  
ldd envTest  
        linux-vdso.so.1 (0x00007fffe4fa3000)  
        libshowBytes.so => /home/myTest/envTest/libshowBytes.so (0x00007fe8017ae000)  
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe8015b5000)  
        /lib64/ld-linux-x86-64.so.2 (0x00007fe8017ba000)  
```  
可以看出共享库（如：动态库）是可以直接找到的。  
### 5、小结  
基于以上描述，我们可以总结出共享库（如：动态库）搜索顺序如下：  
- LD_PRELOAD 环境变量指定的共享库路径；  
- LD_LIBRARY_PATH 环境变量指定的共享库路径；  
- `-rpath` 链接时指定的共享库路径；  
- `/etc/ld.so.conf` 配置文件指定的共享库路径；  
- 默认共享库路径，`/usr/lib`，`lib`；  
- 此外，LD_PRELOAD 环境变量与 LD_LIBRARY_PATH 环境变量是不同的。  
疑问：以上这些查找路径如何验证他们的优先级呢？  
答疑：  
- 比较简单的做法就是在这几个位置分别放置同名，但是不同作用的库。通过程序运行结果来看看到底优先使用哪个路径下的库。  
## 文中源码  
### Linux环境  
```  
$ uname -a  
Linux lm 5.4.0-100-generic #113-Ubuntu SMP Thu Feb 3 18:43:29 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux  
$ gcc -v  
Using built-in specs.  
COLLECT_GCC=gcc  
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/9/lto-wrapper  
OFFLOAD_TARGET_NAMES=nvptx-none:hsa  
OFFLOAD_TARGET_DEFAULT=1  
Target: x86_64-linux-gnu  
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 9.4.0-1ubuntu1~20.04.1' --with-bugurl=file:///usr/share/doc/gcc-9/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,gm2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-9 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-9-Av3uEd/gcc-9-9.4.0/debian/tmp-nvptx/usr,hsa --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu  
Thread model: posix  
gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)  
```  
所有代码存放路径为： `/home/myTest/envTest`  
```  
$ tree  
.  
├── envTest  
├── envTest.c  
├── libshowBytes.so  
├── showBytes.c  
└── showBytes.h  
```  
### showBytes.h  
```  
/* $begin show-bytes */  
#ifndef _SHOW_BYTES_H_  
#define _SHOW_BYTES_H_  
#include   
typedef unsigned char *byte_pointer;  
void show_bytes(byte_pointer start, size_t len);  
void show_int(int x);  
void show_float(float x);  
void show_pointer(void *x);   
/* $end show-bytes */  
#endif  
```  
### showBytes.c  
```  
/* $begin show-bytes */  
#include   
void show_bytes(byte_pointer start, size_t len) {  
    size_t i;  
    for (i = 0; i   
#include   
void test_show_bytes(int val) {  
    int   ival = val;  
    float fval = (float) ival;  
    int   *pval = &ival;  
    show_int(ival);  
    show_float(fval);  
    show_pointer(pval);  
}  
void show_twocomp()   
{  
    short x = 12345;   
    short mx = -x;   
    show_bytes((byte_pointer) &x, sizeof(short));   
    show_bytes((byte_pointer) &mx, sizeof(short));   
}  
int main(int argc, char *argv[])  
{  
    int l_val = 12345;  
    if (argc > 1) {  
		if (argc > 1) {  
			l_val = strtol(argv[1], NULL, 0);  
		}  
		printf("calling test_show_bytes\n");  
		test_show_bytes(l_val);  
    } else {  
		printf("calling show_twocomp\n");  
		show_twocomp();  
    }  
    return 0;  
}  
/* $end environment Test */  
```  
### GCC命令  
需要注意的是，动态共享库的名字必须是 libXXXX.so 开头的。本篇中例子是 libshowBytes.so  
```  
gcc -g -Wall -I/home/myTest/envTest -fPIC -shared -o libshowBytes.so showBytes.c  
gcc -g -Wall -I/home/myTest/envTest -o envTest envTest.c -L/home/myTest/envTest -lshowBytes  
gcc -g -Wall -I/home/myTest/envTest -o envTest envTest.c ./showBytes.so  
```  
其中最后的两条命令是等价的。即可以通过 -L 指定路径，或者是直接将所需的 so 库加载进去（直接运行程序即可，无需再配置环境变量）。  
## 参考  
- 程序员的自我修养 https://book.douban.com/subject/3652388/  
- 程序运行时，是怎么找到动态库的？ https://mp.weixin.qq.com/s/C33sO1_T6X1QLUE1pcMb8g  
- Why LD_LIBRARY_PATH is bad  http://xahlee.info/UnixResource_dir/_/ldpath.html    
版权声明：本文为CSDN博主“lm_hao”的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。  
原文链接：https://blog.csdn.net/llm_hao/article/details/115493516  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")