pay for continuous resource use. The initial payment
protocol can be readily integrated with the TCP
connection establishment, and the renewal handshakes
can be “piggy-backed” onto TCP data segments as
options. The protocols are also designed to support
different
forms of payments including scrip and
proof-of-work. A micro-payment infrastructure will
be needed in order to use scrip.
In the remaining parts of this section, we will examine the
three essential components of MbSQD:
the resource
brokers that are installed at the boundary gateways, the
business logic that implements the price and the purchase
decision functions, and the payment protocol that enables
the business transactions.
Client
Organization
#1
Clients w/
Personal FW
& MbSQD
Brokers)
Client
Organization
#2
MbSQD Client
Broker/FW
MbSQD Client
Broker/FW
C IS C O SYST EMS
CISCOS YSTEMS
CISCOS YST EMS
Internet
MbSQD Server
Broker/FW
Figure 3-1. MbSQD Operational Architecture
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
3.1 Resource Brokers
The MbSQD resource brokers are to be installed in
gateways at the boundary of Internet sub-networks, where
they can function as application proxies or packet filters.
The brokers determine whether datagrams going to and
from certain IP addresses using specific transport
protocols and port numbers
should be passed or
discarded. Functionally, the resource brokers may be the
proxies of application clients or servers. The server and
client brokers enable passage of datagrams based resource
prices and budgetary considerations. Operationally, each
broker consists of two sets of components that either
operate on data or control flows.
3.1.1 Server vs. Client Brokers
The client brokers function as proxies of the client
applications that run on the end hosts. The client brokers
submit the requests for services — specified in terms of
server IP addresses, transport protocols and port numbers
— to the server broker on behalf of the client applications,
make the purchase decision when the server brokers reveal
the current prices of
the
the services and conduct
transaction in order to establish passages for the traffic.
The server brokers, on the other hand, function as
proxies of the server applications that provide specific
services. The brokers determine the dynamic prices of the
services based on several
traffic parameters that are
monitored continuously. They also work with the client
brokers to conduct the payment transactions and control
the client-server traffic flows.
3.1.2 Control vs. Data Flows
Each client or
server broker consists of
four
traffic monitor, business
traffic classifier,
components:
logic and business executive as shown in Figure 3-2.
•  The traffic classifier redirects IP datagrams according
to the nature of their payloads so as to separate
control and data flows. It also determines whether to
pass or discard datagrams in the data flows based on
the outcome of payment transactions.
•  The traffic monitor provides the values of traffic para-
meters that are used to establish the current prices of
specific services and/or serve as the indicators of
anomalous traffic behaviors.
•  The business logic is the decision making component
that computes the service prices in a server broker and
make the purchase decisions in a client broker.
•  The business executive is the module that conducts
using micro-payment
the
protocols and controls the traffic classifier.
transactions
payment
3.2 Business Logic
The business logic is a collection of
rules and
associated parameters that are used to control the traffic
flow related to a service. It is designed to protect the
resources such as network bandwidth or server capacity
that a service deems important. Service providers must
decide how to price and sell the services that they offer
and then configure the business logics for each service. In
MbSQD, services are distinguished by their server IP
addresses, transport protocols and port numbers.
A client gains access to a service running on a
specific server by purchasing a subscription to that
service. Service providers are free to decide how to price
the service — in packets, seconds or by connections. By
carefully choosing the pricing algorithm and the units in
which the subscription is sold, a service provider can
manage the utilization of its service so that “good” client
behavior
is
penalized based on some a priori definition of “good” and
“bad”. Note that
the design of the business logic is
independent of that of the payment mechanism. The
current design of MbSQD can use scrip and proof-of-work
computation as payment tokens.
rewarded and “bad” client behavior
is
this
The rest of
section discusses briefly the
subscription types — i.e. how the resources are quantified
and sold — as well as the price and purchase decision
functions.
Client Node
Client Node
Business
Logic
Business
Exec
Business
Exec
Business
Logic
Traffic
Monitor
Traffic
Monitor
Server Node
Traffic Classifier
Traffic Classifier
Client Broker
Server Broker
Control Traffic
Data Traffic
Figure 3-2. Functional Architecture of Resource Brokers
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
3.2.1 Subscription Types
Currently,
four general
subscription types
are
implemented in MbSQD.
a)
Subscriptions in Packets: subscriptions are offered to
customers on a per packet basis. The service provider
defines a maximum number of packets the client can
send or receive; once the quota has been met, the
subscription expires and the client must pay for
additional service.
b) Subscriptions in Seconds: subscriptions are sold in
seconds of connection time. When the connection
duration has elapsed,
the subscription expires and
customers must purchase a new subscription. A time-
based subscription may be used in conjunction with
another subscription type to create a hybrid sub-
scription type. For instance the subscriptions may be
sold in terms of number of packets, but a client must
send or receive the packets within a certain period of
time. Such a hybrid type may be useful discourage
clients from “squatting” on a connection.
Subscriptions in Connections: a client pays for a
connection that lasts for an indeterminate duration.
This subscription type may be combined with a time-
based subscription to simulate leasing of a resource.
c)
d) Subscriptions in Bytes: a client may also purchase a
subscription based on the number of bytes sent to or
from a server.
3.2.2 Pricing Functions
The pricing strategy is the mechanism that the server
broker uses to control resource consumption. Whenever a
new subscription request for a service arrives at
the
broker, it invokes the business logic of the service to cal-
culate a price for the new subscription based on the
current values of the market observable defined for the
service.
In our experiments, we tested the following four
different forms of pricing functions:
Constant Function (p = k): the price p of the resource is
set to constant k regardless of its level of consumption.
Linear Function (p = kc): the resource price p is propor-
tional to the value of a chosen market observable c such as
the number of current connections.
Asymptotic Function (p = kB/(B-c)): this function raises
the resource price p to infinity as the market observable c
approaches its limiting value B; such a pricing strategy is
useful in safeguarding a resource with a hard limit in
capacity.
Exponential Function (p = k1ek
c): this function produces
the fastest increase of resource price with respect to the in-
creasing value of the market observable c; such a pricing
strategy is useful in controlling consumption of a critical
resource.
2
Each of these pricing functions produces a floating
point number that can translated into appropriate proof-of-
work computation or scrip values.
3.2.3 Purchase Decision Functions
are
At the client brokers, interacting with the resource
the purchase decision functions, which
prices
determine whether
to purchase the subscriptions by
making required payments. The decision functions can
employ sophisticated strategies based on the market
observables and other parameters supplied by the clients.
The simplest decision function might only specify a price
ceiling for each client.
3.3 Micro-payment Protocols
MbSQD employs a three-message handshake to
perform the payment
transactions. The handshakes
provide a framework protocol that can be used to support
including scrip and
different forms of micro-payment
computational proof-of-work.
It can also be made
compatible with various micro-payment infrastructures.
Figure 3-3 shows the message sequence of the payment
protocol. It uses three messages (solid lines) to submit the
service/subscription request and exchange the payment
request and response. These messages can be readily inte-
grated with the TCP connection-establishing messages as
options in the respective SYN messages. The payment
response message may also be integrated as an option into
the ACK message of the initiator.
In order to support proof-of-work, two more messages
(dotted lines) are added between the client broker and the
clients. These messages complete a handshake that will be
completed if and only if the proof-of-work computation is
carried out successfully.
Client Agent
Client Brocker
Server Brocker
Server Agent
TCPConnection
T
C
P
C
o
n
n
e
c
t
i
o
n
F
o
r
w
a
r
d
e
d
P OW R e q u e s t
POWResponse
TCP Connection Dropped
SubscriptionRequest
P a y m e n t R e q u e s t
PaymentResponse
TCPConnection
TCPConnection
Figure 3-3. Message sequence of payment protocol
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
4. Simulation Experiments
We investigated the behaviors of MbSQD broker
architecture and traffic management mechanisms by
conducting a series of simulation experiments using
public-domain discrete-event network simulator, ns-2. The
experiment configuration is shown in Figure 4-1.
In the experiments, a fixed set of legitimate clients
was programmed to request the service offered by a single
server. Their requests were mingled with much larger
number of requests initiated by the rogue clients that were
subverted to instigate DDoS attacks. Client and server
brokers, deployed at the boundaries of the sub-networks
that contain the clients and the servers, relayed the service
requests of both “good” and “bad” clients. Both client and
server brokers could operate in an active or an inactive
mode. In the inactive mode, the brokers behaved like
ordinary firewalls or routers. When activated, client and
server brokers could control the traffic flowing through
them by matching the IP datagrams with the connections
established between the brokers. The datagrams were
passed if they could be matched with one or more of the
established connections and discarded otherwise. In each
run, we observed the progress of two DDoS attacks − one
with and the other without the use of MbSQD. Control
parameters, such numbers of rogue clients and traffic
characteristics, were changed between experimental runs.
The goal of the experiments was to investigate the
effectiveness of MbSQD architecture in mitigating the
DDoS attacks. The degree of effectiveness was inferred
from the following two sets of observations:
1. A comparison between the number of subverted
clients required to launch two similar DDoS attacks
that cause compatible levels of performance degrada-
tion with and without
the activation of MbSQD
brokers;
2. A comparison of
the residual
level of services
available to the fixed set of legitimate clients in the
two similar DDoS attacks with and without MbSQD
brokers.
A secondary goal was to investigate the usefulness of price
or other market parameters employed in MbSQD as
indicators of presence or absence of possible attacks and
the severity level of the attacks.
4.1 Metrics
In order to establish a quantitative description of
DDoS attacks, and an economic model for client-server
traffic, we introduced three sets of parameters into
MbSQD, known as attack quantifiers, market observables
and market controllables.
Clients
C
C
C
C
C
C
C
C
C
G
G
G
C
G
Client Broker
G
S
Server
Server Broker
Figure 4-1. Configuration of simulation experiments
4.1.1 Attack Quantifiers
The effect of a DDoS attack may be quantified by two
sets of measurements:
Service Quality: as its name indicated, this measurement
reflects the quality of a specific service received by a
specific client or group of clients. Assuming web
browsing is the service of interest and the DDoS attack
aims at exhausting the number of active HTTP sessions
maintained by the server, a suitable measurement for the
service quality would be a pair of values consisting of the
average latency for establishing a new HTTP session and
the average data rate sustainable by a legitimate client
under no-load condition.
Attack Duration: currently, a DDoS attack may last as
long as the attackers intended. By introducing a payment
scheme and providing each client with limited amount of
credits, MbSQD established an inherent
to the
amount of service any one client may obtain before
spending all its credits, and thus created a natural end to
an attack. In the experiments, we monitored the progress
of an attack by collecting measurements periodically
throughout its course.
limit
4.1.2 Market Controllables
In MbSQD, the trading of resources is controlled by
the server broker through setting of three control para-
meters.
Connection Granularity: the connections established by
the server brokers may cover a group of clients and a
range of protocols. Selectors such as source/destination IP
addresses,
identifiers and TCP/UDP
port numbers serve to specify the granularity of the
connections.
established
Connection Duration:
between client and server brokers could only last for a
finite duration. This parameter specifies the duration of the
connections established at the current moment. Note that
transport protocol
connections
the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
the duration may be specified in real time or data size
(either in number of bytes or packets).
refers to the time-
Connection Price:
varying price for a connection that is set by the pricing
function maintained in the server broker.
this parameter
with from 0 to 4000 rogue clients. The rogue clients were
identical to the legitimate clients except that they were
more aggressive: their average interval was shorter (0.1
seconds) and the average duration of their data uploads
was also larger (0.7 seconds).
4.1.3 Market Observables
The price of a resource was computed based on the
current values of a selected set of parameters that reflect
resource consumption. The choices of these parameters
are determined largely by the nature of the resources and
the
strategy employed to manage those resources.
Following three parameters were used in our experiments
to determine the price of HTTP connections.
Connection Request Count, which records
the total
number of HTTP requests received by the server broker
within a measurement period.
Connection Establishment Count, which records the total
number of HTTP connections established by the brokers
within a measurement period.
Data Throughput, which records the total number of data
bytes passed to the server within the past second; the