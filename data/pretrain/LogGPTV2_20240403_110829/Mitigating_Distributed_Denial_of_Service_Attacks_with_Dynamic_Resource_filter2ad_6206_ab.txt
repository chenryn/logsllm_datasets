### Continuous Resource Use and Payment Protocols

The initial payment protocol for continuous resource use can be seamlessly integrated into the TCP connection establishment process. Renewal handshakes can be "piggy-backed" onto TCP data segments as options. The protocols are designed to support various forms of payment, including scrip and proof-of-work. A micro-payment infrastructure is necessary to facilitate the use of scrip.

In the following sections, we will examine the three essential components of MbSQD: the resource brokers installed at boundary gateways, the business logic that implements price and purchase decision functions, and the payment protocol that enables business transactions.

### Operational Architecture

**Figure 3-1. MbSQD Operational Architecture**

```
Client Organization #1
Clients w/ Personal FW & MbSQD Brokers
Client Organization #2
MbSQD Client Broker/FW
MbSQD Client Broker/FW
CIS CO SYSTEMS
CISCO SYSTEMS
CISCO SYSTEMS
Internet
MbSQD Server Broker/FW
```

*Authorized licensed use limited to: Tsinghua University. Downloaded on March 22, 2021, at 07:07:10 UTC from IEEE Xplore. Restrictions apply.*

### 3.1 Resource Brokers

MbSQD resource brokers are installed in gateways at the boundary of Internet sub-networks, where they function as application proxies or packet filters. These brokers determine whether datagrams to and from specific IP addresses using particular transport protocols and port numbers should be passed or discarded. Functionally, the resource brokers may act as proxies for application clients or servers. The server and client brokers enable the passage of datagrams based on resource prices and budgetary considerations. Operationally, each broker consists of two sets of components that either operate on data or control flows.

#### 3.1.1 Server vs. Client Brokers

**Client Brokers:**
- Act as proxies for client applications running on end hosts.
- Submit service requests (specified by server IP addresses, transport protocols, and port numbers) to the server broker on behalf of client applications.
- Make purchase decisions based on the current prices revealed by the server broker.
- Conduct transactions to establish passages for traffic.

**Server Brokers:**
- Act as proxies for server applications providing specific services.
- Determine dynamic service prices based on continuously monitored traffic parameters.
- Work with client brokers to conduct payment transactions and control client-server traffic flows.

#### 3.1.2 Control vs. Data Flows

Each client or server broker consists of four components:
- **Traffic Classifier:** Redirects IP datagrams based on payload nature to separate control and data flows. It also determines whether to pass or discard datagrams in data flows based on payment transaction outcomes.
- **Traffic Monitor:** Provides values of traffic parameters used to establish current service prices and detect anomalous traffic behaviors.
- **Business Logic:** Computes service prices in a server broker and makes purchase decisions in a client broker.
- **Business Executive:** Conducts payment transactions using micro-payment protocols and controls the traffic classifier.

**Figure 3-2. Functional Architecture of Resource Brokers**

```
Client Node
Client Node
Business Logic
Business Exec
Business Exec
Business Logic
Traffic Monitor
Traffic Monitor
Server Node
Traffic Classifier
Traffic Classifier
Client Broker
Server Broker
Control Traffic
Data Traffic
```

*Authorized licensed use limited to: Tsinghua University. Downloaded on March 22, 2021, at 07:07:10 UTC from IEEE Xplore. Restrictions apply.*

### 3.2 Business Logic

The business logic is a set of rules and associated parameters used to control traffic flow related to a service. It protects resources such as network bandwidth or server capacity. Service providers configure the business logic for each service, which is distinguished by server IP addresses, transport protocols, and port numbers.

**Subscription Types:**
- **Packets:** Subscriptions are offered on a per-packet basis. Once the quota is met, the subscription expires.
- **Seconds:** Subscriptions are sold in seconds of connection time. The subscription expires after the duration elapses.
- **Connections:** Clients pay for a connection of indeterminate duration, which can be combined with a time-based subscription.
- **Bytes:** Clients purchase a subscription based on the number of bytes sent to or from a server.

**Pricing Functions:**
- **Constant Function (p = k):** The resource price is constant regardless of consumption.
- **Linear Function (p = kc):** The resource price is proportional to a chosen market observable.
- **Asymptotic Function (p = kB/(B-c)):** The resource price increases to infinity as the market observable approaches its limit.
- **Exponential Function (p = k1ekc):** The resource price increases rapidly with the increasing value of the market observable.

**Purchase Decision Functions:**
- At the client brokers, these functions determine whether to purchase subscriptions by making required payments. They can employ sophisticated strategies based on market observables and other parameters supplied by the clients.

### 3.3 Micro-payment Protocols

MbSQD uses a three-message handshake for payment transactions, which can support different forms of micro-payment, including scrip and computational proof-of-work. The handshake can be integrated with TCP connection-establishing messages as options in the respective SYN and ACK messages.

**Figure 3-3. Message Sequence of Payment Protocol**

```
Client Agent
Client Broker
Server Broker
Server Agent
TCP Connection
TCP Connection
Forwarded POW Request
POW Response
TCP Connection Dropped
Subscription Request
Payment Request
Payment Response
TCP Connection
TCP Connection
```

*Authorized licensed use limited to: Tsinghua University. Downloaded on March 22, 2021, at 07:07:10 UTC from IEEE Xplore. Restrictions apply.*

### 4. Simulation Experiments

We conducted a series of simulation experiments using the public-domain discrete-event network simulator, ns-2, to investigate the behavior of the MbSQD broker architecture and traffic management mechanisms.

**Experiment Configuration:**
- Legitimate clients requested a service from a single server.
- Rogue clients, programmed to instigate DDoS attacks, were mixed with legitimate clients.
- Client and server brokers, deployed at sub-network boundaries, relayed service requests and controlled traffic flows.

**Metrics:**
- **Attack Quantifiers:**
  - **Service Quality:** Measured by average latency for establishing HTTP sessions and sustainable data rate under no-load conditions.
  - **Attack Duration:** Monitored by collecting measurements periodically throughout the attack.
- **Market Controllables:**
  - **Connection Granularity:** Specified by source/destination IP addresses, port numbers, and protocol identifiers.
  - **Connection Duration:** Specifies the finite duration of connections established by the server broker.
  - **Connection Price:** Time-varying price set by the pricing function in the server broker.
- **Market Observables:**
  - **Connection Request Count:** Total number of HTTP requests received by the server broker within a measurement period.
  - **Connection Establishment Count:** Total number of HTTP connections established by the brokers within a measurement period.
  - **Data Throughput:** Total number of data bytes passed to the server within the past second.

**Figure 4-1. Configuration of Simulation Experiments**

```
Clients
C C C C C C C C C
G G G
C G
Client Broker
G
S
Server
Server Broker
```

*Authorized licensed use limited to: Tsinghua University. Downloaded on March 22, 2021, at 07:07:10 UTC from IEEE Xplore. Restrictions apply.*