    int call_system_example()
    {
        char *user = get_user_input_str();
        char *xx = user;
        system(xx);
        return 1;
    }
代码通过 `get_user_input_str` 获取外部输入， 然后传入 `system` 执行。
    def getFlow() = {
        val src = cpg.call.name("get_user_input_str")
        val sink = cpg.call.name("system").argument.order(1)
        sink.reachableByFlows(src).p
    }
代码解释如下：
  1. 首先根据 `cpg.call.name` 对所有的 `call` 过滤，获取所有的 `get_user_input_str` 函数调用，保存到 `src`
  2. 然后获取所有 `system` 函数调用，并将其第一个参数（从 `1` 开始索引）保存到 `sink`。
  3. 最后使用 `sink.reachableByFlows(src)` 检索出所有从 `src` 到 `sink` 的结果，然后对结果使用 `.p` 方法，把结果打印出来。
可以看到对于每个搜索到的结果，`Joern`会把数据的流动过程打印出来，结果中存在一个误报
`clean_data` 函数会对数据进行校验，不会产生命令执行，所以需要把这个结果过滤掉
    def clean_data_filter(a: Any): Boolean =  {
        if(a.asInstanceOf[AstNode].astParent.isCall)
        {
            if(a.asInstanceOf[AstNode].astParent.asInstanceOf[Call].name == "clean_data")
                return true
        }
        return false
    }
    def filter_path_for_clean_data(a: Any) = a match {
        case a: Path => a.elements.l.filter(clean_data_filter).size > 0
        case _ => false
    }
    def getFlow() = {
        val src = cpg.call.name("get_user_input_str")
        val sink = cpg.call.name("system").argument.order(1)
        sink.reachableByFlows(src).filterNot(filter_path_for_clean_data)
    }
`Joern` 没有类似 `Fortify` 的 `DataflowCleanseRule` 功能，只能对 `reachableByFlows`
的结果进行过滤， `reachableByFlows` 返回的是一组 `Path` 对象，然后我们使用 `filterNot` 来剔除掉不需要的结果，每个
`Path` 对象的 `elements` 属性是这条数据流路径流经的各个代码节点，我们可以遍历这个来查看 `Path` 中是否存在有调用
`clean_data` 函数，如果存在就说明返回 `true` 表示这个结果是不需要的会被剔除掉。
`clean_data` 函数调用在 `Path` 中是以 `Identifier` ( `xx` 变量)
存在，所以在规则中需要先将Path里面的每一项强转为 `AstNode` 类型 ，然后获取它的父节点，最后根据父节点就可以知道是否为
`clean_data` 的函数调用，这个信息可以通过绘制 `ast` 图来确定。
    joern> ci.astNode.astParent.astParent.astParent.dotAst.l
    res58: List[String] = List(
      """digraph  {
    "1000532" [label = "(CONTROL_STRUCTURE,if (!clean_data(xx)),if (!clean_data(xx)))" ]
    "1000533" [label = "(.logicalNot,!clean_data(xx))" ]
    "1000534" [label = "(clean_data,clean_data(xx))" ]
    "1000535" [label = "(IDENTIFIER,xx,clean_data(xx))" ]
    "1000536" [label = "(RETURN,return 1;,return 1;)" ]
    "1000537" [label = "(LITERAL,1,return 1;)" ]
      "1000532" -> "1000533"
      "1000532" -> "1000536"
      "1000533" -> "1000534"
      "1000534" -> "1000535"
      "1000536" -> "1000537"
    }
    """
    )
图中标蓝的就是 `Path` 中 `clean_data` 函数调用的子节点 `Identifier` .
# 引用计数漏洞
本节相关代码
    https://github.com/hac425xxx/sca-workshop/blob/master/joern-example/ref_query/
漏洞代码
    int ref_leak(int *ref, int a, int b)
    {
        ref_get(ref);
        if (a == 2)
        {
            puts("error 2");
            return -1;
        }
        ref_put(ref);
        return 0;
    }
`ref_leak` 的 漏洞是当 `a=2` 时会直接返回没有调用 `ref_put` 对引用计数减一，漏洞模型：在某些存在
`return`的条件分支中没有调用 `ref_put` 释放引用计数。
首先可以看看代码的 AST 结构
    def getFunction(name: String): Method = {
      return cpg.method.name(name).head.asInstanceOf[Method]
    }
    getFunction("ref_leak").dotAst.l
`Joern` 使用 `controlStructure` 来表示函数中的控制结构，后续可以使用这个对象来访问函数的控制结构。
下面具体分析下如何编写规则匹配到这种漏洞，首先获取所有调用 `ref_get` 的地方
    def search() = {
        var ref_get_callers = cpg.call.name("ref_get")
        ref_get_callers.filter(ref_func_filter).map(e => getEnclosingFunction(e.astNode))
    }
然后对 `ref_get_callers` 进行过滤，把存在漏洞的函数过滤出来，过滤核心函数位于 `ref_func_filter` ，关键代码如下
    def ref_func_filter(caller: Call): Boolean =  {
        var node : AstNode = caller.astNode
        var block : Block = null
        var func : Method = null
        var ret : Boolean = false
        loop.breakable {
            while(true) {
                if(node.isBlock) {
                    block = node.asInstanceOf[Block]
                }
                if(node.isMethod) {
                    func = node.asInstanceOf[Method]
                    loop.break;
                }
                node = node.astParent
            }
        }
        var true_block = func.controlStructure.whenTrue.l
        var false_block = func.controlStructure.whenFalse.l
        var ref_count = 1
        if(true_block.size != 0) {
            .................
        }
        return ret
    }
函数大部分都是使用的 `Scala` 的语法，其实 `Joern` 的规则开发在一些情况下就是使用 `Scala` 语法来搜索代码结构
由于我们这里过滤的是 `ref_get_callers` ，所以入参的类型是 `Call` ，然后通过循环地向上遍历 `ast` ，获取到该 `Call`
所在的函数和 `Block` 。
然后根据 `func` 来获取代码中的控制结构，然后获取到控制结构为 `True` 或者 `False` 时的代码块，然后对代码块遍历，搜集到
`Return` 之前的引用计数是否有问题。
    var true_block = func.controlStructure.whenTrue.l
      var ref_count : Int = 1
      if (true_block.size != 0) {
        var block = true_block(0)
        for (elem 