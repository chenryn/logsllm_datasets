designed to only extract information from the app, not the
device. Thus, if the patch does not have any impact on the app,
the approach cannot differentiate a vulnerable device from a
patched one. The second reason for false positive is the “dead
code” inside of the apps. Sometimes the apps may contain
code that was not actually being used by the device (legacy
code, code adopted from elsewhere without cleaning and etc.).
Statically, it is difﬁcult to decide if the code will ever be trig-
gered and executed at runtime. Our platform currently may
mistakenly include analysis results from such "dead code"
if the "dead code" exhibit similarities with other vulnerable
devices, thus causing false positives. The third reason for the
false positive is the imprecision of the static analysis. Cur-
rently, the static analysis techniques used by the platform are
not precise enough to attribute network interfaces to individ-
ual devices if a single app supports multiple devices and these
devices share much common control logic inside of the app.
This issue, as well as the “dead code” issue listed above, are
not a fundamental problem with the approach. Rather, they
are an artifact of the static analysis techniques we used to
analyze the apps in the platform. We are currently working
on improvements to the techniques to improve the accuracy
and precision of the static analysis. Finally, we encountered
an exception case to our approach where the app interface is
not an exact reﬂection of the device interface (i.e., the Bixi
gesture controller). However, due to the nature of the device
(i.e., a device that controls other devices), it is uncommon
among the IoT devices. We are exploring the Google Play
store to identify if there are any more devices of the similar
kind.
Table 4: Reasons for the false positives
Reason
Existence of the patch
Dead code inside of the apps
Fail to attribute interfaces to individual devices
Difference in device and app interface
# of
Devices
# of
Vendors
3
7
4
1
1
2
1
1
4 Discussion
4.1 Miscellaneous Findings
During the process of analyzing the interfaces between apps
and devices, we have some interesting observations, which
are presented here.
Confusing Trust Model. We observed that IoT device devel-
opers sometimes have a confusing, if not conﬂicting, trust
assumption regarding the local environment that their devices
will run in. On one hand, they seem to assume that the local
environment (i.e., consumer’s home network) is not trustwor-
thy. They apply encryption and authentication to protect the
communication between the app and the device. On the other
hand, they place an excessive amount of trust on the app, e.g.
they would embed the encryption keys and authentication cre-
dentials into the app. In such a scenario, an adversary within
the local environment can easily bypass the protections that
the device developer built, as long as the adversary has access
to the Google Play Store and has a basic knowledge of re-
verse engineering an app. As an example, TP-Link Smart Plug
(HS110) accepts commands from its mobile companion app
(and potentially anywhere else from within the LAN) without
authentication. The vendor seems to be concerned about local
threats to this design and, therefore, encrypts the communi-
cation. However, the encryption key in use (i.e., integer 171
XOR message) is simple and static, and most importantly built
into the app. Anyone with access to the app can thus forge the
1162    28th USENIX Security Symposium
USENIX Association
communication easily. This problem is also reported by [50].
Another example is the D-Link water sensor. D-Link water
sensor requires authentication from its mobile companion app.
However, the credentials used to authenticate the app is ﬁxed
(i.e., not conﬁgurable by user) and built into the app. These
examples highlight the confusing mindset of many IoT device
developers and the lack of general understanding of security.
While in this paper we do not intend to give solutions to the
problem, we believe a more standard architecture developed
with security in mind can help limit the freedom offered to
developers thus improving the security.
“Convenient” Provisioning. Smart home IoT devices are of-
ten headless—they do not provide direct user interfaces (e.g.,
touch screen, keyboard). As a result, they often rely on mo-
bile companion apps to provision the credentials of home
Wi-Fi network, in order for them to join the network. Our
observation through studying the device interfaces is that the
provisioning method is evolving from more user interactive
approaches (e.g., AP Mode, WPS and out-of-band channels
such as Bluetooth) to a more automated and hands-off ap-
proach where users do not need to do anything except provid-
ing the credentials. This presumably provides convenience,
but many times at the cost of security. These newer methods
such as Smart Conﬁg [30] and Sound Wave6 often artiﬁcially
create a side channel between the app and the device, and rely
on these channels to transfer Wi-Fi credentials. Unfortunately,
these side channels are publicly observable therefore allow-
ing the credentials to be leaked. In addition, even without
considering the openness of side channels, securing a side
channel can often be much more difﬁcult than normal means
of communication. This highlights the long-lasting problem
of balancing usability with security.
4.2 Limitations and Future Work
The major limitation of the approach discussed in this pa-
per is the accuracy of the analysis results. As we based our
analysis solely on mobile companion apps, we are inherently
limited to the information we can obtain from the app, and
sometimes the information we can obtain may not be an ac-
curate reﬂection of the device. For example, a device may
have patched a vulnerability and the patch did not change
the device interfaces at all. In this case, our analysis will still
output the device as potentially vulnerable since our platform
would have no clue about the existence of the patch by just
inspecting the app. This, however, is a trade-off we have to
make in order to study IoT device security at scale. We believe
a multi-stage solution can help address this limitation where
the ﬁrst stage (i.e., our platform) narrows down the scope
of analysis by identifying the potentially vulnerable devices,
and the second stage automates the vulnerability conﬁrmation
6Wi-Fi credentials are encoded in the sound wave and sent out directly by
the phone. This method is being used by devices such as 360 and Securenet
IP Cameras.
with more targeted but rigorous analysis, e.g., dynamic/static
analysis of ﬁrmware, device fuzzing.
Another limitation of the approach is that the network inter-
face analysis can be rendered less effective in scenarios where
IoT backend servers or cloud signiﬁcantly decouple device
interfaces from app interfaces. An example is the Google
and Amazon devices where much of the management is done
through the cloud. In this case, our approach can glean less
information about the device software. However, information
such as the Wi-Fi credential provisioning module and the
backend services in-use are still available in the app, which
allows the platform to predict security issues of these compo-
nents.
This work could also beneﬁt greatly from an automatic
vulnerability collection system. Currently, this is a manual
process: we manually collect the vulnerabilities and impacted
devices that were reported publicly. We then propagate the
vulnerability information to more devices through our plat-
form. An automatic vulnerability collection system can help
label the initial seed devices as well as evaluating security
from a device’s perspective (i.e., to ﬁnd the set of security
issues that a given device may have).
Another aspect to improve on is the dimension and granu-
larity of the similarity analysis, as mentioned in Section 2.4.
Further improvements to the App Analysis Engine may allow
the platform to detect similarities in ﬁner components of a
device software stack (e.g., web server, PHP interpreter, web
application, OS, driver) as well as other dimensions (e.g., sim-
ilar developer, similar development toolchain). This would
enable us to track vulnerability propagation more compre-
hensively and accurately. We leave the reﬁnement of the App
Analysis Engine for future work.
The general methodology, i.e., utilizing companion app
analysis to study the device, also enables a number of in-
teresting applications that we plan to explore for the future
work. For example, from app analysis, we could potentially
tell what types of sensors are on a device and what types of
network trafﬁc a device may produce. This would allow a
home security gateway, which is shipped as a default com-
ponent of many Wi-Fi routers on the market, to enforce an
accurate protection proﬁle and detect anomalous behaviors
of IoT devices in real time. As another example, instead of
similarities, the Cross-App Analysis Engine in our platform
can detect differences between devices. Such differences may
enable a more accurate ﬁngerprinting method of the device.
5 Related Work
IoT device vulnerabilities. IoT devices are affecting increas-
ing number of users in every aspect of their life. Meanwhile,
various studies revealed that ﬁrmware of many devices is
ﬁlled with vulnerabilities. For instance, Paleari [44, 45] re-
ported that D-Link DIR-645 routers expose critical web pages
to unauthenticated remote attackers, allowing them to extract
USENIX Association
28th USENIX Security Symposium    1163
root credentials and take full control of the device; also multi-
ple web interfaces are affected by stack-buffer overﬂow that
leads to remote code execution. Cui et al. [18] found that
attackers may inject malicious ﬁrmware modiﬁcations to a
device while it’s updated. With the vulnerabilities and the
huge amount of insecure devices [31], there arise a series of
large-scale attacks, such as Mirai [35], BASHLITE [1], etc. To
better understand the events, researchers have conducted com-
prehensive study on both features of the known vulnerabilities
(and malware) [15] and their propagation [6, 39].
Various analysis approaches have been proposed to identify
vulnerable IoT devices. For instance, with a network scanner
(i.e., nmap), Cui et al. [19] found that over 13% devices are
publicly accessible by default credentials. Similarly, using an
Internet-wide scanning, Heninger et al. [27] showed that a
large amount of TLS and SSH servers on embedded devices
are affected by weak certiﬁcates and keys. Online services,
Shodan [4] for example, allow security researchers to identify
vulnerable online web services and devices. Such works are
effective to ﬁnd devices with known vulnerabilities and eval-
uate their impacts, but in many cases fail to catch problems
that also appear in other devices.
Further, researchers are utilizing different techniques [16,
20,24,25,47,49,55] to statically identify vulnerabilities in the
device ﬁrmware. A majority of the approaches fall into the
broader category of vulnerability search: derive signatures
from known vulnerabilities, and then use them to search in
other ﬁrmware images. To name a few, Costin et al. [16] con-
ducted a large-scale study by scanning 32k ﬁrmware images
with simple signatures (e.g., certiﬁcates, unique keyword),
which is difﬁcult to cover vulnerabilities that are not bound to
speciﬁc strings. To address the problem, following works that
collect robust features from such as I/O behavior of the image
binary [47] and control ﬂow graphs [24, 25] were proposed.
Instead of extracting signatures from ﬁrmware image, Xiao
et al. [55] presented an approach that discovers unknown vul-
nerabilities based on the study of existing security patches.
In addition, Davidson et al. [20] built a symbolic execution
framework on top of KLEE [9] for detecting vulnerabilities
in MSP430 microcontroller family, which is difﬁcult to scale
as it needs to customize for speciﬁc architectural features of
an IoT device. Similarly, Shoshitaishvili et al. [49] showed
how symbolic execution and other techniques (e.g., program
slicing) work to ﬁnd authentication bypass vulnerabilities in
a ﬁrmware image. Corteggiani et al. [14] improved symbolic
execution of ﬁrmware by incorporating source code seman-
tics, etc. While these approaches are effective, they rely on
the static analysis of the ﬁrmware images, and therefore are
limited in cases where the images are not publicly available or
cannot be unpacked. In contrast, our work focuses on ﬁnding
potential vulnerabilities using analysis of the IoT companion
apps, which turns to be scalable, especially for IoT devices of
smaller companies.
Another effective approach is dynamic ﬁrmware analy-
sis [10, 17, 42, 58]. Zaddach et al. [58] performed dynamic
analysis by forwarding I/O access from an emulator to the ac-
tual hardware, and further, Muench et al. [42] presented how to
orchestrate execution between multiple testing environments.
Koscher et al. [34] used an FPGA bridge to allow the emu-
lator full and real-time access to the hardware. While these
approaches are accurate, they are not applicable to large-scale
analysis because of the lack of budget to obtain the device,
and the required effort to ﬁgure out the hardware interfaces.
To address the problem, Costin et al. [17] built a QEMU-based
emulation framework to discover vulnerabilities in web inter-
faces of an IoT device; Chen et. al [10] presented a full system
emulation tool, FIRMADYNE, for Linux-based ﬁrmware in
order to identify vulnerabilities. These works, however, also
rely on feasibility of the ﬁrmware, and tend to be affected by
the heterogeneous architectures of the ﬁrmware. Given the
difﬁculty of fuzzing IoT devices directly [43], Chen et al. [11]
proposed a testing method to detect memory corruptions in
the device with the assistance from app analysis. Similarly,
it requires presence of the physical device, and also fuzzing
each individual device is time-consuming. Again, our work is
more scalable since it is only based on static analysis of the
companion apps, and leverages cross-app similarities as an
indicator to ﬁnd other potentially vulnerable devices.
Mobile app analysis. Dozens of static and dynamic tech-
niques have been presented to analyze mobile apps. Among
them, most related to our work are those [12, 32, 48, 60] pro-
posed to collect runtime values in an Android app. These
techniques may serve different purposes, e.g., collecting devel-
oper credentials [60], harvesting obfuscated/encrypted values
for malware detection [48], extracting application imprints
from network request [12] and reconstructing format of a
protocol [32]. However, they have a basic idea in common:
extracting parts of the application code (i.e., slices) that are
related to the target (e.g., APIs, variables), and generating
target value by only executing the slices. In this study, we
designed the request construction with a similar Instantiated
Partial Execution (IPE) as in [12]. Another related work is Au-
toprobe [56], which collects request probes from the malware,
and then using the probes to ﬁngerprint a remote malware
server. Autoprobe is not applicable in our settings for several
unique challenges. For instance, requests of an IoT device
would not be triggered automatically because of the absence
of the device; mobile companion apps often serve multiple
devices, and thus it’s difﬁcult to pair the request and response
and collect telemetry for each individual device. In our work,
the interface analysis engine leverages several techniques that
not only triggered the request, but also conducted a modularity
analysis after locating the request/response pair.
6 Conclusion
In this paper, we present a platform to accelerate vulnerable
device discovery in smart home IoT device market. Different
1164    28th USENIX Security Symposium
USENIX Association
from previous approaches that examine real IoT devices or
ﬁrmware images, our platform analyzes mobile companion
apps of devices to indirectly detect device similarity and vul-
nerability propagation across devices, thus making it practical
for large-scale analyses. By analyzing 2,081 mobile compan-