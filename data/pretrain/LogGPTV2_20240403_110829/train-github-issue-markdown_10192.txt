Preface: I'm not sure if this should be classified as a bug, expected
behavior, or a longstanding inference rule that would be problematic to change
now.
From what I can tell numpy looks to be inferring `float64` instead of `uint64`
when both of the following conditions are met:
  * input data contains a number supported by both `int64` and `uint64` (0 to 2**63 - 1)
  * input data contains a number supported by only `uint64` (2**63 and above)
    In [1]: import sys; import numpy as np; np.__version__, sys.version
    Out[1]: 
    ('1.17.3',
     '3.7.5 (default, Oct 25 2019, 10:52:18) \n[Clang 4.0.1 (tags/RELEASE_401/final)]')
    In [2]: np.array([0, 2**63])
    Out[2]: array([0.00000000e+00, 9.22337204e+18])
Note that dtype is correctly inferred as `uint64` when all values fall into
the `uint64`-only range:
    In [3]: np.array([2**63, 2**63 + 1])
    Out[3]: array([9223372036854775808, 9223372036854775809], dtype=uint64)
Likewise, if all values are supported by both `int64` and `uint64` the dtype
is correctly inferred as `int64`:
    In [4]: np.array([0, 2**63 - 1])
    Out[4]: array([                  0, 9223372036854775807])
The `float64` inference is a bit surprising because data that's supported by
an integer dtype is inferred as a non-integer dtype. This can lead to
problematic behavior because many `uint64`-only values cannot be represented
exactly by `float64`, so roundtripping through `float64` can lead to precision
loss:
    In [5]: np.array([2**63 - 1, 2**63, 2**63 + 1]).astype('uint64')
    Out[5]: 
    array([9223372036854775808, 9223372036854775808, 9223372036854775808],
          dtype=uint64)
Of course, the example above can be avoided by directly passing
`dtype='uint64'` to `np.array` but from a user perspective it doesn't seem
very intuitive to account for a corner case in inference logic.
There are cases where the `float64` inference makes sense, e.g. `[-1, 2**63]`,
but it seems like the example I pointed out shouldn't be terribly complicated
to infer as `uint64`. That being said, I don't know if this will cause
cascading issues, or if this behavior is too longstanding to change.