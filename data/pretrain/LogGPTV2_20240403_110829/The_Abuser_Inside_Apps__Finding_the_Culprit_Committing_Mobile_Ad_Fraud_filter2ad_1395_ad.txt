java.net.HttpURLConnection. FraudDetective also re-
9
Library M1Library L1Library K1Library J1Library I2Library H2Library G3Library F5Library E6Library D8Library C8Library B9Library A26# of
download ∼1K 1K∼
50K
50K∼
500K
500K∼
5M
5M∼
100M 100M∼ Total
74
22
7
6
8
# of apps
TABLE IV: Number of detected fraudulent apps with download
numbers.
16
15
ported that Libraries F and H generated click URL requests
using the WebView loadURL function.
Table IV shows the number of downloads for the detected
fraudulent apps, which illustrates the impact of the detected ad
fraud. There exist 29 apps with more than ﬁve million installs,
thus demonstrating that today’s ad fraud detection systems
require further improvement to prevent abusers from victimizing
benign app users. Furthermore, the new abuse case in Library
A motivates a thorough examination of ad impressions and
their outgoing requests.
FraudDetective also observed eight Type-3 ad fraud activi-
ties that involve cross-app Intents from eight apps. These apps
invoke other apps without any user interactions.
One app using Library B used cross-app Intents to invoke a
browser app with a speciﬁc page or the YouTube app with a spe-
ciﬁc video in the foreground. The app redirects users to several
webpages promoting Bitcoin websites and a cosmetics sales
blog. Section VII-B further describes its fraudulent behaviors.
Two other apps also created a cross-app Intent. The Intent action
is android.intent.action.VIEW, which invokes the
default browser with a URL. The URLs of the Intent are all the
same: http://www.fofy.com/red.php?utm_source=
1. When we visited this URL, the ﬁnal landing page was from
a subdomain of http://www.fofy.com, which rendered
Google display ads. This means the above Intent action is
able to generate ad impression revenue. Note that http:
//www.fofy.com has been variously reported by the spyware
and malware reporting community as forcing users to visit their
webpage [53], [58]. FraudDetective concluded that Library E
committed this ad fraud behavior. The remaining ﬁve apps
created an Intent that invokes Play Store, which promoted
mobile apps without any interactions.
These experimental results yield the new insight that several
ad service providers actively commit ad fraud to promote
speciﬁc websites or products in which users have not expressed
interest. That is, these ad service providers victimize their
publishers as well as the users of apps from these publishers
to increase ad click and impression trafﬁc. We also emphasize
that FraudDetective contributes to pinpointing fraudulent third-
party modules inside these identiﬁed apps, which can help app
auditors not only to understand observed ad fraud but also to
propose that these app developers change their ad libraries.
Responsible disclosure. We reported all of our ﬁndings to
Google as well as identiﬁed ad library vendors to address the
identiﬁed fraud behaviors.
Ad fraud conﬁrmation. We investigated the current status
of 74 fraudulent apps that FraudDetective reported. As of
September 15, 2020, among the 74 apps, 19 apps had been
removed from Play Store, and 49 apps have been updated. We
further analyzed whether the latest versions of these 49 updated
apps have removed their ad libraries committing ad fraud. We
conﬁrmed that 22 out of the 49 updated apps removed the
10
# of Apps
MAdFraud
FraudDetective
165K†
# of Test Apps
# of Fraud Apps
21
† Malware + Third-party Stores
‡ Google Play Store
TABLE V: MAdFraud [25] vs. MAdLife [21] vs. FraudDetec-
tive (click fraud).
48K‡
74
MAdLife
143K‡
38
identiﬁed ad libraries, demonstrating the correctness of our
identiﬁcation results.
C. Comparison with previous studies and false negatives
We compared our experimental results with those of
MAdLife [21] and MAdFraud [25] in Table V. FraudDetective
analyzed fewer applications than the previous tools did but
found more fraudulent apps. Note that the numbers in the ﬁrst
and second columns are from their ﬁndings [21], [25].
Because we were unable to obtain the source code of
MAdFraud and MAdLife, we analyzed how many of the 74
apps that FraudDetective detected would have been missed by
these tools. Note that MAdLife mainly ﬁnds abusive clicks
on WebView instances. However, FraudDetective is able to
ﬁnd click fraud that does not involve any user click but still
sends click URL requests. Both MAdFraud and MAdLife
use Android emulators for dynamic analysis. On the other
hand, FraudDetective leverages real devices and triggers various
events, which helps increase dynamic testing coverage.
MAdFraud.
In order to ﬁnd 36 out of the 74 fraudulent
apps, it was necessary for FraudDetective to pass permission or
consent windows when the apps started. Because MAdFraud
does not interact with apps, it is unable to ﬁnd these 36 apps.
Note that MAdFraud was built upon the Android emulator
in 2014 of which the version is below 6.0 and which does
not support dynamic system permission. Therefore, MAdFraud
did not need to pass any of these system permission windows
for further execution. However, we observed that 28 apps
presented their own custom consent windows and start-up ads
that block execution, which necessitates explicit user interaction
for further execution. MAdFraud is also unable to detect two
apps committing ad fraud involving cross-app Intents without
user interaction because it only monitors outgoing click URL
HTTP requests. Thus, it misses requests for promotional web
pages from other mobile apps, including browsers and YouTube.
MAdLife. We contacted the authors of MAdLife and received
the names of packages and their app versions for 38 apps
in which they found click fraud behaviors in their previous
study [21]. Of the 38 apps, we checked 30 apps with FraudDe-
tective, excluding two apps for which APKs are not available
on the Internet and six apps in which we did not observe any
fraudulent behaviors due to their deprecated services.
FraudDetective successfully reported 30 fraudulent apps
with no false negatives. Of
the 30 apps, FraudDetec-
tive identiﬁed 29 fraudulent apps with the same fraud
behavior;
they invoked a cross-app Intent with the an-
droid.intent.action.VIEW action, which invokes a
default browser with Fofy and Leadbolt ad network URLs
without involving user interaction. Unlike the 74 fraudulent apps
that FraudDetective identiﬁed from our dataset (§VI-B), the
s
e
c
n
e
r
e
f
f
i
d
e
g
a
r
e
v
o
c
e
n
i
L
103
102
101
100
1 2 3 4 5 6 7 8 9 101112131415161718192021222324252627282930313233343536
Fraudulent apps
Fig. 7: Line coverage differences between the environments with
and without user interaction. The Y-axis represents a coverage
difference: line coverage with interaction while testing the app
− line coverage without interaction while testing the app.
observed AF ST s originated from Library E and another third-
party library. FraudDetective also identiﬁed that the remaining
app ﬁred a cross-app Intent that invoked a default browser with
the website of the app itself. This website served the same
service as the app, thus making this report a false positive.
The experimental results demonstrate that FraudDetective
is able to detect all of the ad fraud cases that MAdLife found
in its previous study. Furthermore, FraudDetective reported that
these fraudulent behaviors originated from the apps themselves.
False negatives. To assess false negatives, we further collected
apps with known click fraud behaviors. We searched through
various sources, including recent press releases about identiﬁed
fraud campaigns [23], [50], [63]. However, we were only able
to collect six fraudulent apps, each of which was downloaded
over 10M times from Google Play Store. Note that it is often
difﬁcult to know the speciﬁc versions of fraudulent apps, and
they are often unavailable from public app stores, including
APK mirror websites. Lastly, many known fraudulent apps
were found to no longer exhibit fraudulent behaviors due to
the deprecation of their C&C servers.
Among the six known fraudulent apps, FraudDetective
detected all of the apps that commit Type-2 fraud, producing no
false negatives. FraudDetective also reported that the module
responsible was Library D, which generated 194 click URL
requests from these six fraudulent apps. When merging these six
apps with the 30 apps identiﬁed by MAdLife, FraudDetective
identiﬁed all of these fraudulent apps, reporting no false
negatives.
D. Efﬁcacy of user interaction
We evaluated the degree to which conducting user inter-
actions in FraudDetective contributes to increasing testing
coverage and improving the identiﬁcation of fraud activities.
Line coverage. We measured the line coverage of a given APK
using ACVTool [66]. We tested a given app for ﬁve minutes
with and without the user interactions described in §V-E. Since
ACVTool does not support APKs using Multidex, we tested
36 apps among the 112 fraudulent apps that FraudDetective
and MAdLife found.
Operation
Avg. Execution Overhead
Resource loading in WebView
0.916 ms
HTTP request in HttpURLConnection
0.224 ms
Activity change using Intent
0.231 ms
Touch event
0.392 ms
ST propagation via a new Thread
0.731 ms
ST propagation via PriorityBlockingQueue
1.145 ms
ST propagation via Handler
0.883 ms
TABLE VI: Execution overhead of FraudDetective for each
operation that we modiﬁed in the AOSP framework.
Fraud activities. We checked whether user interactions con-
tributed to ﬁnding fraud activities. Among the 112 fraudulent
apps consisting of 74 apps that FraudDetective found and 38
apps reported by MAdLife, we were able to reproduce fraud
activities in 73 apps. At the time of conducting this evaluation,
25 apps were deprecated, and click fraud campaigns became
dormant in the other 14 apps.
Of the 73 apps, FraudDetective required no user interactions
to ﬁnd 23 apps. Among the remaining 50 apps, 36 apps
required bypassing startup ads or custom consent windows,
seven required consent to Android permission system windows,
ﬁve required bypassing both of permission system and custom
consent windows, and two required bypassing all three of the
aforementioned windows.
We observed that the transition of a testing app from the
background to the foreground helped close startup splash ads
and contributed most to increasing line coverage and ﬁnding
more fraudulent apps. We further describe the interesting case
study of Library B, which attempts to avoid fraud detection in
§VII-C.
E. Finding ad fraud with Android emulators
To test the efﬁcacy of FraudDetective in detecting ad fraud
using Android emulators, instead of real devices, we set up
FraudDetective to test the 74 fraudulent apps identiﬁed using
the Android Virtual Device (AVD) emulator [10]. Out of the
50 apps, we were unable to install 19 apps in an AVD device
due to their usage of ARM native libraries. Furthermore, we
observed that the AVD emulator environment drastically slows
down the execution of these 19 apps. Each fraudulent app took
more than 20 minutes to instantiate, thus rendering infeasible
the execution of the 19 apps in the AVD emulator.
Considering that MAdLife used the Genymotion Android
emulator [37] for their dynamic testing, we also tested the
Genymotion Android emulator with Android 8.1 Google Pixel
2 for FraudDetective. However, we were again unable to
install the 19 fraudulent apps using ARM native libraries.
The experimental results demonstrate that
leveraging real
mobile devices contributes to expanding the testing coverage
of FraudDetective by supporting diverse apps developed in
various execution environments.
F. Performance overhead
Figure 7 shows the difference from covered lines with user
interactions to those without user interactions for each app.
The differences vary from 5 to 2,885 lines; user interactions
contributed to increased coverage of 853.39 lines on average.
Table VI presents the execution overhead for each operation
that we modiﬁed in the AOSP framework. We randomly
sampled a total of 170 apps and tested each app for ﬁve minutes
using FraudDetective. In this experiment, we triggered a click
11
Listing 1: An ad HTML page of Library A that generates click
URL requests.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
...
...
event ﬁve times for each app testing instance because we
modiﬁed the event handling logic in the AOSP framework. As
the table shows, the performance overhead is negligible; all
executions were completed within 1.2 ms on average.
FraudDetective generated an average of 1032.6 Logcat
messages in ﬁve minutes, which took up approximately 2.29
MB. For analyzing a total of 48,172 apps, FraudDetective
required a disk space of 224 GB.
VII. CASE STUDIES
We present two representative ad fraud cases that are notable
by the extent of their abuse and explain newly obtained insights
into how attackers commit mobile ad fraud.
A. Case 1: Click fraud abuse of Library A ad impressions
FraudDetective reported 17 apps with Library A for sending
click URL requests without user interaction; it also reported that
the observed requests originated from the embedded Library