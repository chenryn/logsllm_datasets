### Java.net.HttpURLConnection and Fraud Detection

FraudDetective also reported that Libraries F and H generated click URL requests using the `WebView.loadURL` function.

**Table IV: Number of Detected Fraudulent Apps with Download Numbers**

| Library  | Downloads (Range) | Number of Apps |
|----------|-------------------|----------------|
| A        | 100M+             | 26             |
| B        | 5M-100M           | 9              |
| C        | 500K-5M           | 8              |
| D        | 50K-500K          | 8              |
| E        | 50K-500K          | 6              |
| F        | 50K-500K          | 5              |
| G        | 50K-500K          | 3              |
| H        | 50K-500K          | 2              |
| I        | 50K-500K          | 2              |
| J        | 50K-500K          | 1              |
| K        | 50K-500K          | 1              |
| L        | 50K-500K          | 1              |
| M        | 50K-500K          | 1              |

**Impact of Ad Fraud on Downloads**
Table IV illustrates the number of downloads for the detected fraudulent apps, highlighting the significant impact of ad fraud. Notably, 29 apps had more than five million installs, indicating a need for improved ad fraud detection systems to protect benign app users.

**Type-3 Ad Fraud Activities**
FraudDetective observed eight Type-3 ad fraud activities involving cross-app Intents from eight apps. These apps invoked other apps without any user interaction.

- **Library B**: One app used cross-app Intents to invoke a browser or YouTube app, redirecting users to webpages promoting Bitcoin websites and a cosmetics sales blog.
- **Other Libraries**: Two other apps created a cross-app Intent with the action `android.intent.action.VIEW`, invoking the default browser with a specific URL (`http://www.fofy.com/red.php?utm_source=1`). This URL eventually led to a subdomain of `http://www.fofy.com`, which rendered Google display ads, generating ad impression revenue. The website `http://www.fofy.com` has been reported as malicious by the spyware and malware community. 
- **Library E**: Five apps created an Intent that promoted mobile apps in the Play Store without any user interaction.

**Insights into Ad Fraud**
These findings reveal that several ad service providers actively commit ad fraud to promote specific websites or products, even if users have not expressed interest. This behavior victimizes both publishers and users, increasing ad click and impression traffic. FraudDetective helps identify fraudulent third-party modules, enabling app auditors to understand and address the observed ad fraud.

**Responsible Disclosure**
All findings were reported to Google and the identified ad library vendors to address the detected fraud behaviors.

**Ad Fraud Confirmation**
As of September 15, 2020, out of the 74 fraudulent apps, 19 had been removed from the Play Store, and 49 had been updated. Further analysis confirmed that 22 out of the 49 updated apps removed the identified ad libraries, validating our identification results.

**Comparison with Previous Studies and False Negatives**
We compared FraudDetective's results with those of MAdLife and MAdFraud (Table V). Despite analyzing fewer applications, FraudDetective found more fraudulent apps. 

- **MAdFraud**: FraudDetective detected 36 apps that MAdFraud missed due to its inability to interact with apps and handle system permissions. Additionally, MAdFraud missed two apps committing ad fraud involving cross-app Intents.
- **MAdLife**: FraudDetective successfully identified 30 out of 38 apps with no false negatives. Of these, 29 apps invoked a cross-app Intent with the `android.intent.action.VIEW` action, invoking a default browser with Fofy and Leadbolt ad network URLs without user interaction. One app was a false positive.

**False Negatives**
To assess false negatives, we collected six known fraudulent apps, each downloaded over 10M times from the Play Store. FraudDetective detected all Type-2 fraud cases, with no false negatives. The responsible module was Library D, which generated 194 click URL requests.

**Efficacy of User Interaction**
User interactions significantly increased testing coverage and improved fraud activity identification. Transitioning the app from background to foreground helped close startup splash ads, contributing to increased line coverage and the discovery of more fraudulent apps.

**Finding Ad Fraud with Android Emulators**
Testing with Android emulators (AVD and Genymotion) revealed that 19 apps could not be installed due to ARM native libraries. Real devices provided better testing coverage and supported diverse execution environments.

**Performance Overhead**
The performance overhead of FraudDetective was negligible, with all executions completed within 1.2 ms on average. On average, FraudDetective generated 1032.6 Logcat messages in five minutes, requiring 224 GB of disk space for analyzing 48,172 apps.

### Case Studies
**Case 1: Click Fraud Abuse of Library A Ad Impressions**
FraudDetective reported 17 apps with Library A sending click URL requests without user interaction. The observed requests originated from the embedded Library A.

```html
<!-- Example of an ad HTML page from Library A -->
<script>
    // JavaScript code to generate click URL requests
</script>
```

This case study highlights the extent of abuse and provides insights into how attackers commit mobile ad fraud.