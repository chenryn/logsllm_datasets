either the function is revealed in plaintext, or “complete context
hiding” such that the function is hidden. In our context, it means
either the number of inputs of the function, which corresponds
to the number of signatures (as receipts), is revealed; or the func-
tion is arbitrary such that an adversarial user can claim more than
what has been actually paid. Furthermore, we still need to add the
blind-signing functionality while disallowing user cheating attacks.
4 SIPSTER: OUR PROPOSED SYSTEM
4.1 Improving the Baseline Solution
Insights. We adopt a hybrid approach that leverages a minimum
degree of trust in smart meters. We observe that for any smart
metering system to work in practice, certain trust assumptions in
the smart meter are unavoidable. For example, the smart meter
should be tamper-proof; otherwise, users can simply modify the
hardware to pay less. For another example, the authenticity of the
meter readings should be guaranteed in some way (e.g., the smart
meter signs them); otherwise, no one would trust the readings.
Even with these two minimal trust assumptions, it still seems
miles away from the malleability we desire. We derive a few in-
sightful ways to “exploit” what can be offered by a limited set of
supported cryptographic operations. Firstly, the group element out-
put by the meter can be treated as one obtained from a common
reference string with an unknown discrete logarithm. In this way,
the group elements have some implicit cryptographic structure that
aids us in attaining cryptographic security outside of the trusted
computing base. Furthermore, we assign them a semantic mean-
ing, denoting a unit amount. Meanwhile, we restrict the meaning
of their operations. For example, for group elements R1 and R2,
their product denotes an amount of two units, but their semantic
1/2
meanings is not overloaded further than that, e.g., R
1 will not be
encoding half a unit. All these insights collectively lead to Sipster.
To the best of our knowledge, we are not aware of any related
privacy-preserving payment systems sharing these insights.
Minimizing Fancy Cryptography. Now we are ready to describe
our two modifications to our baseline design, relying on the SM to
perform random group element generation, simple modular mul-
tiplication and exponentiation, and signing on the group element.
Firstly, the SM still generates a random (group) element Ri for each
unit of power consumption, but instead of sending Ri to the RU
directly, it masks the element with a random blinding factor ri. The
SM sends the blinded element ˜Ri with a digital signature on it. The
RU forwards the blinded element and its signature to the UC, who
returns a “malleable signature” on the blinded element if and only
if the SM’s signature is valid. Thus, only the SM can unblind the
ID,t
ID,t
i =1 on {Ri}K
3.2.3 Unavailability of Cryptographic Tools. To free the SM from
taking processed inputs from the UC and further processing them,
our hope turns to the other major component, the signature scheme
used by our UC for issuing receipts of a unit payment. For our de-
sign to work, we hope it possesses the following malleability –
given signatures {σi}K
i =1, respectively, the RU can com-
pute a signature on RB
= F(R1, R2, . . . , RK). Suppose both the
signature size and output length of F(·) are constant (independent
of K). Further, suppose the malleability of the signature scheme is
restricted: without signatures of all Ri, the RU cannot compute a
signature on RB
= F(R1, R2, . . . , RK). Then, by showing the UC
this special signature together with a normal signature from the SM
on the tuple (RB
ID,t , ID, t), the RU shows that the bill for the time
period t has been settled without revealing K.
Assuming such a signature scheme exists, this design seems
secure at first glance and has several nice features. Firstly, the
workload of SM is low. The SM does not actively involve in bill
verification. It only issues random numbers and standard signatures
on them. Secondly, bill verification time is constant. The UC only
needs to verify two constant-size signatures. Thirdly, the solution
does not involve any zero-knowledge proof. Lastly, this design
works for any CPS as long as the smart meter is tamper resistant.
It is also independent of the (e-cash) payment method the RU used.
Indeed, our final solution follows the above design footprint.
However, there are non-trivial challenges (or open problems) and a
few caveats that we need to tackle to make it work.
ID,t
To start with, the UC should not be allowed to see R1, . . . , RK
in clear; otherwise, it can compute the aggregate function F(·) on
different subsets of {Ri} it received from different RUs in a “mix-
and-match” manner to see which subset leads to a particular RB
ID,t .
If there is a match, the UC can at least learn the payment amount
K of the user ID. This attack remains valid even if F(·) is one-way.
An immediate solution to make the UC being blind to Ri’s is to
let the UC sign on each Ri using blind signatures. Unfortunately,
now the RU can cheat: instead of asking the UC to sign Ri, the
RU asks for signing RB
= F(R1, R2, . . . , RK) directly. Then, this
cheating user only needs to pay one unit of e-cash.
Another technical problem is that we are not aware of any ef-
ficient signature schemes that possess the “malleability” we need.
Aggregate signatures [13] certify a number of messages while the
signature size is constant. But the verification (done by the UC
in our context) takes as input all the aggregated messages, i.e.,
R1, R2, . . . , RK , which breaks privacy, let alone we still need to
equip them with blind signing functionality. A related attempt aims
for feautes similar to aggregate blind signature functionality [49].
Interestingly, it also relies on some trusted parameter generation.
We defer a more in-depth discussion and comparison to Section 6.4.
Other “multi-party” blind signature variants are not likely to
be relevant. For example, in threshold (partially) blind signature
schemes (e.g., [24]), a single message is signed by multiple signers
in a way that the partial signatures can be “aggregated” into a
223ACSAC ’21, December 6–10, 2021, Austin, Texas, USA
Sherman S. M. Chow, Ming Li, Yongjun Zhao, and Wenqiang Jin
ID,t
group element, and the RU does not have the freedom to ask the UC
to sign on an arbitrary element, hence preventing cheating attacks.
The rest essentially follows the original design blueprint. We will
=
build a scheme such that the RU can compute a signature on ˜RB
˜RK), where all inputs to F(·) are blinded elements. The
F( ˜R1, ˜R2, . . . ,
SM incrementally aggregates all the blinding factors as well as the
random elements as its constant-size local state. Such information
is given to the RU at the end of the billing period to unblind the
signature on ˜RB
= F(R1, R2, . . . , RK).
Here, we make other observations that lead to our second im-
provement. Note that the “cheating capability” of RU is very lim-
ited: it only sees signatures on ˜R1, ˜R2, . . . chosen uniformly at ran-
dom by the SM. To argue security of the above revised solution,
we only need to show that RU cannot compute a signature on
= F(R1, R2, . . . , RK) when it missed one or more signatures
RB
ID,t
on ˜Ri. As a result, a full-fledged malleable signature scheme seems
to be an overkill. Our second modification is to replace the malleable
signature with a tailor-made and surprisingly simple scheme.
ID,t into a signature on RB
ID,t
Finally, the SM just acts “spontaneously” according to the change
in meter reading, instead of being a reactive device as needed in
the powerful smart meter approach we just outlined.
4.2 High-Level Ideas of Sipster
Within each billing period, the SM records the real-time consump-
tion of the RU to calculate the fine-grained charge on-the-fly. For
each unit to be charged, the SM prepares a fresh random group ele-
ment R and a random exponent r. The SM signs (e.g., using ECDSA)
˜R = дr R, which generates σ ˜R, and gives the token tk = ( ˜R, σ ˜R) to
the RU. Let {Ri} and {ri} be the set of random group elements and
exponents used in this period so far. The SM locally maintains the
aggregated blinding factor rτ = ri and the aggregated random
group element Rτ = Ri, which will be reset in the next period.
The RU settles the bill in units as follows. After paying the UC a
unit of e-cash, the RU presents a token tki = ( ˜Ri , σ ˜Ri) and requests
a “signature”6 on ˜Ri. The “signature” that the RU receives from the
UC serves as a receipt for the payment.
At the end of the period t, the SM generates the bill billID,t =
(Rτ , ID, t) for the RU with identity ID and signs it using a standard
(e.g., ECDSA) signature scheme. The signature σ B
ID,t and the ag-
gregated blinding factor rτ are sent to the RU. To show that the
bill for the period t has indeed been settled, the RU aggregates all
the “signatures” received from the UC and uses rτ from the SM to
unblind the aggregated “signature.” The RU then presents Rτ , σ B
ID,t
and the unblinded aggregated “signature” above to the UC.
Mindful readers may notice that the “signature” generated by
the UC bears the properties of blind signature [22] and aggregate
signature [13]. However, it is not a standalone full-fledged “aggre-
gate blind signature scheme.” Instead, we leverage the minimum
trust in the SM to tailor-make an efficient signature-like scheme
whose security guarantee is enough for our specific purpose. Fur-
thermore, such a trust assumption allows us to prove the security
of our incredibly simple scheme in the standard model. In contrast,
6Technically, this is not a standard EUF-CMA-secure signature scheme (Definition 1,
Appendix B) due to the trusted nature of the SM, but it still suffices for our purpose.
Algorithm 1 TokenGen (with internal state τ) by the SM
Require: (skSM, τ)
Ensure: (tk, τ)
1: procedure
Parse τ as (rτ , Rτ )
2:
r ← Z∗p, R ← G1
3:
˜R := дr R, σ ˜R := Sign(skSM, ˜R), tk := ( ˜R, σ ˜R)
4:
r′τ := rτ + r; R′τ := Rτ · R
5:
τ := (r′τ , R′τ )
6:
return (tk, τ)
7:
8: end procedure
▷ Choose fresh randomness
▷ Update the internal state τ
many efficient signature schemes are only proven secure in the ran-
dom oracle model. Hence we can instantiate this part of the system
efficiently with smaller parameters with the same security level.
4.3 Formal Descriptions
We naturally divide our Sipster construction into four conceptual
phases: setup, bill issuing, bill settlement, and bill verification. Setup
(resp. bill verification) happens strictly before (resp. after) the billing
period. However, note that the bill issuing and settlement phases
can happen during the billing period at (essentially) the same time.
Setup Phase:
Smart meters SM: The manufacturer runs the KGen algorithm of a
digital signature scheme SS = (KGen, Sign, Verify) to get a verifi-
cation/signing key pair (vkSM, skSM) for the SM. The signing key
skSM is hard-coded in the SM, and the verification key vkSM is made
public. (As in Section 2.3, one could use a group signature scheme.)
The utility company UC: It chooses groups G1 and GT of order p
(a λ-bit prime), which admit a bilinear map e : G1 × G1 → GT ,
chooses a random secret exponent α ← Z∗p, and a generator д ∈ G1.
It then publishes public parameters PPUC = (G1, GT , д, дα), and
locally stores the secret value skUC = α. In practice, the UC can
use a different (vk, sk) pair for different periods at ease.
We follow the original work of Boneh et al. [14] in using sym-
metric pairings, which is known to work for asymmetric pairings
as well [21]. Notably, Sipster does not require a full-domain hash.
Residential users RU: each is assigned a unique identity ID.
Bill Issuing Phase (SM → RU):
At the beginning of the period t, the SM initializes its internal
state τ = (rτ , Rτ ) = (0, 1G1). Within a billing period t, the SM
records the real-time consumption of the RU and calculates the fine-
grained expense. For each unit of expense, the SM runs the stateful
algorithm TokenGen (Algorithm 1) to get the token tk = (σ ˜R , ˜R),
and forwards it to the RU. The SM’s internal state τ is also updated.
Bill Settlement Phase (RU ↔ UC):
For each token tk received in the bill issuing phase, the RU can set-
tle the bill for this particular token immediately with the following
steps. Therefore, this phase can overlap with the bill issuing phase
significantly. For each tk, the RU engages in the following protocol:
RU → UC: RU presents a token tk to UC and pays a unit of e-cash.
224Sipster: Settling IOU Privately and Quickly with Smart Meters
ACSAC ’21, December 6–10, 2021, Austin, Texas, USA