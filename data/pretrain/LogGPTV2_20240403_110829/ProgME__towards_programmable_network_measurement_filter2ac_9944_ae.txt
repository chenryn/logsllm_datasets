### 5.4.1 BDD Nodes and Flowset Representation

Figure 11 illustrates the Binary Decision Diagram (BDD) nodes utilized throughout our computations. The final flowset, representing the union of all paths, requires a total of 70,291 BDD nodes, which translates to approximately 1.4MB using the BuDDy package. This can be further reduced to 560KB using other BDD packages. Initially, adding new prefixes increases the number of BDD nodes required to enumerate more paths. However, the number of BDD nodes peaks at around 80,000 (corresponding to 56,000 prefixes) and then decreases as more prefixes are added. This reduction is due to the large number of BDD paths, which provide more opportunities for the BDD to summarize entire subtrees into single nodes.

### 5.4.2 Tracking Bogons

The second task we consider is tracking bogons, which are packets with reserved or unallocated source IP addresses. These packets have no legitimate reason to appear on the Internet but are often used by spammers or attackers. Since these source IP addresses are spoofed, differentiating them individually is not meaningful. Administrators typically want to track the aggregated volume of bogons as a single metric. Given that this is a security-oriented application, administrators must be prepared for the worst-case scenario.

| **Counters** | **Accuracy** | **Computation/Packet** |
|--------------|--------------|------------------------|
| Per-Flow     | High         | 1 Hash                 |
| Superflow    | High         | 35.5 match             |
| FQAE         | High         | 1 BDD implication      |
| Elephants    | Low          | Ã—                      |

**Table 7: Comparison on Tracking Bogons**

The current bogon list [29] contains 71 non-aggregated CIDR blocks, corresponding to about 109 unique IP addresses. Maintaining per-flow counters for these bogons is impractical, even though it offers high accuracy and requires only a single hash operation to derive the flow ID. Techniques focused on elephants, as discussed in Section 5.3, are not suitable here. For superflow-based measurement, a packet will be compared with an average of 35 bogon IP blocks. Using FQAE, one can pre-compute the union of all 71 CIDR blocks in the bogon list as a single flowset (as shown in Figure 9a). Consequently, only one counter is needed to track all packets with bogon sources.

### 5.5 Speed of MRT

In network monitoring, especially for security-related applications, it is crucial to detect heavy hitters as quickly as possible. In addition to memory cost, the sample number required for the hypothesis to be conclusive (denoted as \( N \)) is another key parameter. For a flowset with weight \( F_w \), the expected value of \( N \) (E[N]) is a joint function of \( \theta^+ \), \( \theta^- \), \( F_w \), \( \alpha \), and \( \beta \), as given in Equation 17:

\[
E[N] = \frac{L(F_w) \log B + (1 - L(F_w)) \log A}{1 - \theta^+} + \frac{(1 - F_w) \log \theta^- + F_w \log \theta^+}{\alpha + \beta}
\]

In Equation 17, \( L() \) is the operating characteristics (OC) function of the test. Directly evaluating \( L(F_w) \) is challenging. Therefore, Wald [30] proposed a numerical method (pg. 51) to evaluate \( L(F_w) \), which we used to calculate E[N].

**Figure 12: Average Sample Number E[N]**

Figure 12 shows E[N] under various scenarios. For a given \( \alpha \) and \( \beta \), the average sample number (ASN) is larger when \( F_w \) is close to the threshold \( \theta \) and smaller when the weight is significantly larger or smaller than \( \theta \). This property is desirable for heavy hitter identification, as heavier elephants will be identified faster than less significant ones.

Using Figure 12 and Equation 16, one can determine the expected speed of MRT in identifying elephants. For example, if we want to find all flows with a weight larger than 0.01 and one flow \( f \) has a weight of 0.1, the worst-case scenario is that \( f \) is the sole flow in the flowset. In this case, it takes an average of 26 samples for the hypothesis test to conclude that MRT should zoom into this flowset. For a two-tuple {sip, dip} definition of flow and a memory cost factor of 256, it takes eight iterations, i.e., 208 packets, to identify the ID of this flow. Note that this is the theoretical worst-case, and the actual speed of MRT depends on the traffic pattern and could be faster.

### 6. Related Work

Online aggregation [2, 22] has received considerable attention in the database community. A typical example is finding the sum or average of a large number of objects. Instead of processing a large number of objects and returning an accurate result after a long latency, such systems use statistical methods to provide running (online) estimation, allowing users to make real-time decisions. If a database of flow/packet records is available, such a system can be adapted to query a database of flow records. The proposed flowset composition language (FCL) can be used for efficient specification of user queries, and FQAE can be used for aggregation on the database side.

Several works focus on producing traffic summaries or identifying hierarchical heavy hitters. Aguri [8] is a traffic profiler that aggregates small flow records (both temporal and spatial) until the aggregated weight exceeds a certain threshold. Autofocus [14, 32] is a traffic analysis and visualization tool that finds both uni-dimensional and multi-dimensional clusters from traffic traces or flow records. These tools require per-flow statistics to make bottom-up summaries and are designed for offline use to find effective presentations of traffic statistics, but they do not improve the scalability of measurement tools. Some online variants identify hierarchical heavy hitters without maintaining per-flow counters. Zhang et al. [38] applied dynamic packet classification algorithms (upon reaching a fixed threshold) to identify hierarchical heavy hitters top-down. The MRT algorithm in this paper also zooms into heavy hitters top-down but uses SPRT to update flowsets with proven optimality. Both offline and online aggregation follow hierarchies and are driven entirely by traffic, without considering the different preferences administrators might have, e.g., clustering traffic on port 80 with port 8000 instead of port 81.

In Section 5.3, we compared FQAE with techniques that produce biased flow records to reduce resource consumption. Estan and Varghese [15] proposed focusing on "elephants" and ignoring "mice" in flow statistics collection. They introduced two techniques, sample and hold and multistage filter, to achieve this goal. Similar smart sampling techniques include threshold sampling [9, 11], which is ideal for online monitoring, and priority sampling [10], which follows the spirit of online aggregation and is more suitable for querying a database of flow records. Coincidence-based techniques [19, 20, 25] exploit the fact that observing consecutive packets from the same flow is more likely if the flow is large or long-lived. These techniques favor large flows without considering user requirements, making them unsuitable when mice, such as DDoS traffic, are of interest. ProgME can complement these techniques by defining flowsets that receive preferential treatment, e.g., by setting different thresholds for different flowsets. ProgME can also use some of these techniques to improve its adaptive engine, such as using coincidence-based techniques together with SPRT to enhance the zooming process of the MRT algorithm.

Adaptive NetFlow (ANF) [13] dynamically adapts the sampling rate and time bin size to reduce the number of flow records while maintaining accuracy. ProgME and ANF are complementary, with ProgME offering spatial adaptability and ANF providing temporal adaptability.

### 7. Conclusion

In this paper, we presented ProgME, a framework for programmable network measurement. The core idea of ProgME is to collect traffic statistics based on the novel and versatile concept of flowset, i.e., an arbitrary set of flows, rather than the traditional inflexible concept of flow. The core of ProgME is a flowset-based query answer engine (FQAE), which can be programmed by users and applications via the proposed flowset composition language. Knowledge about user requirements offers measurement tools a fresh perspective and enables them to adapt by collecting statistics according to the tasks at hand. We extended ProgME with an adaptive multi-resolution tiling (MRT) algorithm that can iteratively reprogram itself to identify heavy hitters. We demonstrated that ProgME, being a versatile tool, can adapt to different measurement tasks. We believe ProgME is a valuable addition to the arsenal of measurement tools.

### 8. References

[1] S. Acharya, J. Wang, Z. Ge, T. F. Znati, and A. Greenberg. Traffic-aware firewall optimization strategies. In Proc. International Conference on Communications, 2006.
[2] N. Alon, N. G. Duffield, C. Lund, and M. Thorup. Estimating sums of arbitrary selections with few probes. In PODS, 2005.
[3] H. R. Andersen. An introduction to binary decision diagrams. http://www.it.dtu.dk/~hra, 1998.
[4] F. Baboescu, S. Singh, and G. Varghese. Packet classification for core routers: Is there an alternative to CAMs? In Proc. IEEE INFOCOM, 2003.
[5] N. Brownlee. Traffic Flow Measurement: Experiences with NeTraMet. RFC 2123, 1997.
[6] N. Brownlee, C. Mills, and G. Ruth. Traffic Flow Measurement: Architecture. RFC 2722, 1999.
[7] R. E. Bryant. Graph-based algorithms for boolean function manipulation. IEEE Trans. Computers, 35(8), 1986.
[8] K. Cho, R. Kaizaki, and A. Kato. Aguri: An aggregation-based traffic profiler. In Proc. Quality of Future Internet Services, 2001.
[9] N. Duffield and C. Lund. Predicting resource usage and estimation accuracy in an IP flow measurement collection infrastructure. In Proc. Internet Measurement Conference, 2003.
[10] N. G. Duffield, C. Lund, and M. Thorup. Flow sampling under hard resource constraints. In Proc. ACM SIGMETRICS, 2004.
[11] N. G. Duffield, C. Lund, and M. Thorup. Learn more, sample less: control of volume and variance in network measurement. IEEE Trans. Information Theory, 51, 2005.
[12] D. Eppstein and S. Muthukrishnan. Internet packet filter management and rectangle geometry. In Symposium on Discrete Algorithms, 2001.
[13] C. Estan, K. Keys, D. Moore, and G. Varghese. Building a better NetFlow. In Proc. ACM SIGCOMM, 2004.
[14] C. Estan, S. Savage, and G. Varghese. Automatically inferring patterns of resource consumption in network traffic. In Proc. ACM SIGCOMM, 2003.
[19] F. Hao, M. S. Kodialam, and T. V. Lakshman. ACCEL-RATE: a faster mechanism for memory-efficient per-flow traffic estimation. In Proc. ACM SIGMETRICS, 2004.
[20] F. Hao, M. S. Kodialam, T. V. Lakshman, and H. Zhang. Fast, memory-efficient traffic estimation by coincidence counting. In Proc. IEEE INFOCOM, 2005.
[21] S. Hazelhurst, A. Attar, and R. Sinnappan. Algorithms for improving the dependability of firewall and filter rule lists. In Proc. Dependable Systems and Networks, 2000.
[22] J. M. Hellerstein, P. Haas, and H. Wang. Online aggregation. In Proc. ACM SIGMOD, 1997.
[23] G. Janssen. A consumer report on BDD packages. In Proc. IEEE Symp. Integrated Circuits and Systems Design, 2003.
[24] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast portscan detection using sequential hypothesis testing. In Proc. IEEE Symp. Security & Privacy, Oakland, CA, 2004.
[25] M. Kodialam, T. Lakshman, and S. Mohanty. Runs-Based Traffic Estimator (RATE): A simple, memory-efficient scheme for per-flow rate estimation. In Proc. IEEE INFOCOM, 2004.
[26] J. Lind-Nielsen. BuDDy version 2.4. http://sourceforge.net/projects/buddy, 2004.
[27] P. Phaal, S. Panchen, and N. McKee. InMon Corporationâ€™s sFlow: A Method for Monitoring Traffic in Switched and Routed Networks. RFC 3176, 2001.
[28] D. Plonka. FlowScan: A network traffic flow reporting and visualization tool. In Proc. USENIX LISA, 2000.
[29] Team Cymru. The Team Cymru Bogon List v3.4. http://www.cymru.com/Documents/bogon-list.html, Jan 2007.
[30] A. Wald. Sequential Analysis. John Wiley & Sons, 1947.
[31] AS names. http://bgp.potaroo.net/cidr/autnums.html.
[32] Autofocus. http://ial.ucsd.edu/AutoFocus/.
[33] CAIDA: Cooperative Association for Internet Data Analysis. http://www.caida.org/home/.
[34] CIDR report. http://www.cidr-report.org/, Jan 2007.
[15] C. Estan and G. Varghese. New directions in traffic measurement and accounting: Focusing on the elephants, ignoring the mice. ACM Trans. Computer Systems, 2003.
[35] NetFlow v9 Export Format. http://www.cisco.com/univercd/cc/td/doc/product/software/ios123/123newft/123_1/nfv9expf.htm.
[36] University of Oregon Route Views project. http://www.routeviews.org/.
[16] A. Feldmann, A. Greenberg, C. Lund, N. Reingold, J. Rexford, and F. True. Deriving traffic demands for operational IP networks: Methodology and experience. In Proc. ACM SIGCOMM, 2000.
[17] A. Feldmann and S. Muthukrishnan. Tradeoffs for packet classification. In Proc. IEEE INFOCOM, 2000.
[18] H. Hamed and E. Al-Shaer. Dynamic rule-ordering optimization for high-speed firewall filtering. In ACM Symposium on InformAtion, Computer and Communications Security, 2006.
[37] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah, and P. Mohapatra. FIREMAN: A Toolkit for FIREwall Modeling and ANalysis. In Proc. IEEE Symp. Security & Privacy, 2006.
[38] Y. Zhang, S. Singh, S. Sen, N. Duffield, and C. Lund. Online identification of hierarchical heavy hitters: algorithms, evaluation, and applications. In Proc. Internet Measurement Conference, 2004.