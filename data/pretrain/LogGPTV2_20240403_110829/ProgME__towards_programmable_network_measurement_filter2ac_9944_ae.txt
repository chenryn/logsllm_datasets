path. Figure 11 presents the BDD nodes used throughout
our computation. The ﬁnal ﬂowset that represents the union
of them requires a total of 70,291 BDD nodes (1.4MB using
BuDDy and can be reduced to 560KB using other packages).
At the beginning, adding new preﬁxes causes the BDD to
require more nodes to enumerate more paths. However, the
number of BDD nodes used to describe such ﬂowset peak
at about 80,000 nodes (56,000 preﬁxes) and decreases with
more preﬁxes. This is because the large number BDD paths
actually present more opportunity for BDD to summarize
the entire sub-tree into one node.
5.4.2 Tracking Bogons
The second task we consider is to track bogons, which are
packets with reserved or unallocated source IP addresses.
Packets from these addresses have no legitimate reason to
appear on the Internet but these addresses are often used
by spammers or attackers. Since these source IP addresses
are spoofed, diﬀerentiating them is not meaningful. Ad-
ministrators would normally want to track the aggregated
volume of bogons as a single metric. Furthermore, adminis-
trators have to be prepared for the worst case since this is a
security-oriented application.
# Counters Accuracy Computation/Pkt
Per-Flow
Superﬂow
FQAE
Elephants
109
71
1
103
High
High
High
Low
1 Hash
35.5 match
1 bdd imp
×
Table 7: Comparison on Tracking Bogons.
The current bogon list [29] has 71 non-aggregated CIDR
blocks (about 109 unique IP addresses). Keeping per-ﬂow
counter for these bogons is clearly unrealistic, even though it
has high accuracy and requires only a single hash operation
to derive the ﬂow ID. Techniques that focuses on elephants
are not suitable here as we discussed in Section 5.3. For
superﬂow-based measurement, a packet will be compared
with 35 bogon IP blocks on average. Using FQAE, one can
pre-compute the union all 71 CIDR blocks in bogon list as
one ﬂowset (as in Figure 9a). Consequently, one only needs
to maintain one counter for all packets with bogon source.
5.5 Speed of MRT
In network monitoring, especially if it is security-related,
it is important to detect a heavy hitter in the shortest time
possible. In addition to the memory cost factor, the sample
number required for the hypothesis to be conclusive (de-
noted as N ) is another key parameter. For a ﬂowset with
weight Fw, the expected value of N (E[N ]) is a joint function
of θ+, θ
Fw, α and β, as in Eq. 17.
−
(17)
E[N ] =
L(Fw) log B + (1 − L(Fw)) log A
1 − θ+
1 − θ
−
θ+
− + (1 − Fw) log
θ
Fw log
In Eq. 17, L() is the operating characteristics (OC) function
of the test. Directly evaluating L(Fw) is diﬃcult. Therefore,
Wald [30] proposed a numerical method (pg. 51) to evaluate
L(Fw), which we used here to calculate E[N ].
10-3
2000
10-2
10-1
100
10.0=θ
10.0=β=α
50.0=β=α
1.0=β=α
1.0=θ
r
e
b
m
u
N
e
l
p
m
a
S
e
g
a
r
e
v
A
1500
1000
500
0
Actual Weight of Flowset %
Figure 12: Average Sample Number E[N ].
Figure 12 presents E[N ] under various scenarios. For a
given α and β, Average sample number (ASN) is larger when
Fw is close to the threshold θ and is small when the weight
is either signiﬁcantly larger or smaller than θ. This prop-
erty presents a much desired feature for heavy hitter iden-
tiﬁcation — heavier elephants will be identiﬁed faster than
not-so-signiﬁcant elephants.
One can use Figure 12 together with Eq. 16 to determine
the expected speed of MRT in identifying elephants. Con-
sider the case that we want to ﬁnd all ﬂows with weight
larger than 0.01 and one ﬂow f has a weight of 0.1. The
worst case scenario is that f is the sole ﬂow in the ﬂowset
that covers it. In this case, it takes an average of 26 samples
for the hypothesis test to conclude that MRT should zoom
into this ﬂowset. For a two-tuple {sip, dip} deﬁnition of ﬂow
and a memory cost factor of 256, it takes eight iterations,
i.e., 208 packets to identify the ID of this ﬂow. Note this
is the theoretical worst-case and the actual speed of MRT
depends on the traﬃc pattern and could be faster.
6. RELATED WORK
Online aggregation [2, 22] has received considerable atten-
tion in the database community. A typical example is to ﬁnd
the sum or average of a large number of objects. Instead of
running through a large number of objects and return an
accurate result after a long latency, such systems use sta-
tistical methods to provide running (online) estimation so
that users can decide in real time whether to continue. If a
database of ﬂow/packet records has been built, such a sys-
tem can be adapted to query a database of ﬂow records. The
proposed ﬂowset composition language (FCL) can be used
for eﬃcient speciﬁcation of user queries, and FQAE can be
used for aggregation on the database side.
There are several work on producing traﬃc summary or
identifying hierarchical heavy hitters. Aguri [8] is a traﬃc
proﬁler that aggregates small ﬂow records (both temporal
and spatial) until the aggregated weight is larger than a cer-
tain threshold. Autofocus [14, 32] is an traﬃc analysis and
visualization tool that ﬁnds both uni-dimensional or multi-
dimensional clusters from traﬃc trace or ﬂow records. These
tools requires per-ﬂow statistics to make summary bottom-
up. They are more engineered to work oﬄine to ﬁnd an
eﬀective presentation of traﬃc statistics but cannot improve
the scalability of the measurement tools. There are some
online variants that identify hierarchical heavy hitters with-
out maintaining per-ﬂow counters. Zhang et al. [38] applied
packet classiﬁcation algorithms dynamically (upon reaching
a ﬁxed threshold) to identify hierarchical heavy hitters top-
down. The MRT algorithm in this paper also zoom into
the heavy hitters top-down, but use SPRT to update the
ﬂowsets with proved optimality. Both oﬄine and online ag-
gregation are along hierarchies and driven entirely by traﬃc.
They do not consider the diﬀerent preference administrators
might have, e.g., to cluster traﬃc on port 80 with port 8000
instead of port 81.
In Section 5.3, we compared FQAE with techniques that
produce biased ﬂow records to reduce resource consump-
tion. This is exempliﬁed by the seminal work by Estan and
Varghese [15] which calls to “focus on the elephants and ig-
nore the mice” in ﬂow statistics collection. They proposed
two techniques, namely sample and hold and multistage ﬁl-
ter, to achieve this goal. Of similar spirit are the work using
smart sampling techniques. Threshold sampling [9, 11] is a
stream-based method ﬁts ideally for online monitoring. Pri-
ority sampling [10] follows the similar spirit of online aggre-
gation and is more suitable for querying a database of ﬂow
records. Another elegant formulation are the coincidence-
based techniques [19, 20, 25] that exploit the fact that one
is more likely to observe n consecutive packets from the
same ﬂow if the ﬂow is large or long-lived. These techniques
favors large ﬂows without knowledge of user requirements,
thus unsuitable when mice, e.g., DDoS traﬃc, are of inter-
est. ProgME can complement these techniques by deﬁning
ﬂowset that should receive preferential treatment, e.g., by
setting diﬀerent thresholds for diﬀerent ﬂowsets. ProgME
can also use some of those techniques to improve its adap-
tive engine. For example, one could use coincidence-based
techniques together with SPRT to improve the zooming pro-
cess of the MRT algorithm.
Adaptive NetFlow (ANF) [13] is a scheme that dynami-
cally adapts the sampling rate and the size of time bin in
order to reduce the number of ﬂow records while maintain-
ing the accuracy. ProgME and ANF are complementary to
each other since ProgME oﬀers spatial adaptability while
ANF achieves temporal adaptability.
7. CONCLUSION
In this paper, we presented ProgME, a framework for pro-
grammable network measurement. The core idea of ProgME
is to collect traﬃc statistics based on a novel and versatile
concept of ﬂowset i.e., arbitrary set of ﬂows, instead of the
traditional inﬂexible concept of ﬂow. The core of ProgME
is a ﬂowset-based query answer engine (FQAE), which can
be programmed by users and applications via the proposed
ﬂowset composition language. Knowledge about user re-
quirements oﬀers measurement tools a fresh perspective and
enables them to adapt itself by collecting statistics according
to the tasks at hand. We further extended ProgME with an
adaptive multi-resolution tiling (MRT) algorithm that can
iteratively re-program itself to identify heavy hitters. We
show that ProgME, being a versatile tool, can adapt to dif-
ferent measurement tasks. We believe ProgME is a useful
addition to the arsenal of measurement tools.
8. REFERENCES
[1] S. Acharya, J. Wang, Z. Ge, T. F. Znati, and
A. Greenberg. Traﬃc-aware ﬁrewall optimization
strategies. In Proc. International Conference on
Communications, 2006.
[2] N. Alon, N. G. Duﬃeld, C. Lund, and M. Thorup.
Estimating sums of arbitrary selections with few
probes. In PODS, 2005.
[3] H. R. Andersen. An introduction to binary decision
diagrams. http://www.it.dtu.dk/~hra, 1998.
[4] F. Baboescu, S. Singh, and G. Varghese. Packet
classiﬁcation for core routers: Is there an alternative
to CAMs? In Proc. IEEE INFOCOM, 2003.
[5] N. Brownlee. Traﬃc Flow Measurement: Experiences
with NeTraMet. RFC 2123, 1997.
[6] N. Brownlee, C. Mills, and G. Ruth. Traﬃc Flow
Measurement: Architecture. RFC 2722, 1999.
[7] R. E. Bryant. Graph-based algorithms for boolean
function manipulation. IEEE Trans. Computers,
35(8), 1986.
[8] K. Cho, R. Kaizaki, and A. Kato. Aguri: An
aggregation-based traﬃc proﬁler. In Proc. Quality of
Future Internet Services, 2001.
[9] N. Duﬃeld and C. Lund. Predicting resource usage
and estimation accuracy in an IP ﬂow measurement
collection infrastructure. In Proc. Internet
Measurement Conference, 2003.
[10] N. G. Duﬃeld, C. Lund, and M. Thorup. Flow
sampling under hard resource constraints. In Proc.
ACM SIGMETRICS, 2004.
[11] N. G. Duﬃeld, C. Lund, and M. Thorup. Learn more,
sample less: control of volume and variance in network
measurement. IEEE Trans. Information Theory, 51,
2005.
[12] D. Eppstein and S. Muthukrishnan. Internet packet
ﬁlter management and rectangle geometry. In
Symposium on Discrete Algorithms, 2001.
[13] C. Estan, K. Keys, D. Moore, and G. Varghese.
Building a better NetFlow. In Proc. ACM SIGCOMM,
2004.
[14] C. Estan, S. Savage, and G. Varghese. Automatically
inferring patterns of resource consumption in network
traﬃc. In Proc. ACM SIGCOMM, 2003.
[19] F. Hao, M. S. Kodialam, and T. V. Lakshman.
ACCEL-RATE: a faster mechanism for memory
eﬃcient per-ﬂow traﬃc estimation. In Proc. ACM
SIGMETRICS, 2004.
[20] F. Hao, M. S. Kodialam, T. V. Lakshman, and
H. Zhang. Fast, memory-eﬃcient traﬃc estimation by
coincidence counting. In Proc. IEEE INFOCOM, 2005.
[21] S. Hazelhurst, A. Attar, and R. Sinnappan.
Algorithms for improving the dependability of ﬁrewall
and ﬁlter rule lists. In Proc. Dependable Systems and
Networks, 2000.
[22] J. M. Hellerstein, P. Haas, and H. Wang. Online
aggregation. In Proc. ACM SIGMOD, 1997.
[23] G. Janssen. A consumer report on BDD packages. In
Proc. IEEE Symp. Integrated Circuits and Systems
Design, 2003.
[24] J. Jung, V. Paxson, A. W. Berger, and
H. Balakrishnan. Fast portscan detection using
sequential hypothesis testing. In Proc. IEEE Symp.
Security & Privacy, Oakland, CA, 2004.
[25] M. Kodialam, T. Lakshman, and S. Mohanty. Runs
bAsed Traﬃc Estimator (RATE): A simple, memory
eﬃcient scheme for per-ﬂow rate estimation. In Proc.
IEEE INFOCOM, 2004.
[26] J. Lind-Nielsen. BuDDy version 2.4.
http://sourceforge.net/projects/buddy, 2004.
[27] P. Phaal, S. Panchen, and N. McKee. InMon
Corporation’s sFlow: A Method for Monitoring Traﬃc
in Switched and Routed Networks. RFC 3176, 2001.
[28] D. Plonka. FlowScan: A network traﬃc ﬂow reporting
and visualization tool. In Proc. USENIX LISA, 2000.
[29] Team Cymru. The Team Cymru Bogon List v3.4.
http://www.cymru.com/Documents/bogon-list.html,
Jan 2007.
[30] A. Wald. Sequential Analysis. John Wiley & Sons,
1947.
[31] AS names.
http://bgp.potaroo.net/cidr/autnums.html.
[32] Autofocus. http://ial.ucsd.edu/AutoFocus/.
[33] CAIDA: Cooperative Association for Internet Data
Analysis. http://www.caida.org/home/.
[34] CIDR report. http://www.cidr-report.org/, Jan
2007.
[15] C. Estan and G. Varghese. New directions in traﬃc
[35] NetFlow v9 Export Format. http:
measurement and accounting: Focusing on the
elephants, ignoring the mice. ACM Trans. Computer
Systems, 2003.
//www.cisco.com/univercd/cc/td/doc/product/
software/ios123/123newft/123_1/nfv9expf.htm.
[36] University of Oregon Route Views project.
[16] A. Feldmann, A. Greenberg, C. Lund, N. Reingold,
http://www.routeviews.org/.
J. Rexford, and F. True. Deriving traﬃc demands for
operational IP networks: Methodology and
experience. In Proc. ACM SIGCOMM, 2000.
[17] A. Feldmann and S. Muthukrishnan. Tradeoﬀs for
[37] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah, and
P. Mohapatra. FIREMAN: A Toolkit for FIREwall
Modeling and ANalysis. In Proc. IEEE Symp. Security
& Privacy, 2006.
packet classiﬁcation. In Proc. IEEE INFOCOM, 2000.
[38] Y. Zhang, S. Singh, S. Sen, N. Duﬃeld, and C. Lund.
[18] H. Hamed and E. Al-Shaer. Dynamic rule-ordering
optimization for high-speed ﬁrewall ﬁltering. In ACM
Symposium on InformAtion, Computer and
Communications Security, 2006.
Online identiﬁcation of hierarchical heavy hitters:
algorithms, evaluation, and applications. In Proc.
Internet Measurement Conference, 2004.