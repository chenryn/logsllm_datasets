`ATTR{address}`{.command} 字段中不使用前 12
位字节以便设备映射会可靠。配置 IPoIB 接口时，该配置文件的 HWADDR
字段可包含所有 20 位字节，但只使用最后 8
位映射并查找配置文件指定的硬件。但如果在设备配置文件中的
`TYPE=InfiniBand`{.command} 条目拼写有误，且 [**ifup-ib**]{.application}
不是用来实际启动 IPoIB
接口的脚本，则系统会给出出错信息，说明该系统无法找到该配置指定的硬件。在
IPoIB 接口中，配置文件的 `TYPE=`{.command} 字段只能是
`InfiniBand`{.literal} 或者
`infiniband`{.literal}（该条目区分大小写，但该脚本不区分）。
:::
:::
::: section
::: titlepage
## [⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Understanding_InfiniBand_P_Key_subnets}9.6.4. 了解 InfiniBand P_Key 子网 {.title}
:::
::: para
使用不同 `P_Key`{.literal} 子网可将 InfiniBand
结构采用逻辑分段的方式分为虚拟子网。这与在以太网接口中使用 VLAN
极其相似。所有交换机及主机均必须是默认 `P_Key`{.literal}
子网中的成员，但管理员可以创建附加子网，并将该子网成员限制为该结构中主机或交换机的子网。主机可使用
`P_Key`{.literal} 子网前必须使用子网管理器定义该子网。有关使用
[**opensm**]{.application} 子网管理器定义 `P_Key`{.literal}
子网的详情，请查看 [第 9.4.4 节 "创建 P_Key
定义"](#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Creating_a_P_Key_definition){.xref}
一节。在 IPoIB 接口中，创建 `P_Key`{.literal} 子网后，可为
`P_Key`{.literal} 子网创建特殊的 IPoIB 配置文件。与在以太网设备中使用
VLAN 接口一样，每个 IPoIB 接口的行为都好像其处于与其他 IPoIB
接口完全不共的结构，他们共享同一链接，但使用不同的 `P_Key`{.literal}
值。
:::
::: para
对 IPoIB `P_Key`{.literal} 的名称有特殊要求。所有 IPoIB
`P_Key`{.literal} 必须在 `0x0000`{.literal} 到 `0x7fff`{.literal}
的范围内，在高端字节中，`0x8000`{.literal} 表示 `P_Key`{.literal}
中的成员关系为完全成员，而不是部分成员。Linux 内核的 IPoIB
驱动程序只支持 `P_Key`{.literal} 子网中的完全成员，因此在 Linux
无法连接的子网中总是要设置 `P_Key`{.literal}
号的高端字节。就是说如果使用 Linux 系统的计算机加入
`P_Key 0x0002`{.literal}，加入后，它的实际 `P_Key`{.literal}
号码将会变为 `0x8002`{.literal}，表示它是 `P_Key 0x0002`{.literal}
的完全成员。因此，如 [第 9.4.4 节 "创建 P_Key
定义"](#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Creating_a_P_Key_definition){.xref},
一节所述在 [**opensm**]{.application} `partitions.conf`{.filename}
文件中创建 `P_Key`{.literal} 定义时，要求制定不包含 `0x8000`{.literal}
的 `P_Key`{.literal} 值，但在定义 Linux 客户端中的 `P_Key`{.literal}
IPoIB 接口时，则需要在 `P_Key`{.literal} 指中添加 `0x8000`{.literal}
值。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Configure_InfiniBand_Using_the_Text_User_Interface_nmtui}9.7. 使用文本用户界面 nmtui 配置 InfiniBand {.title}
:::
::: para
可在终端窗口中使用文本用户界面工具 [**nmtui**]{.application} 配置
InfiniBand。运行以下命令接口启动该工具：
``` screen
~]$ nmtui
```
此时会出现文本用户界面。输入无效命令会显示用法信息。
:::
::: para
请使用箭头按键导航或按 [**Tab**]{.keycap} 前进，按
[**Shift**]{.keycap}+[**Tab**]{.keycap} 组合件后退。按
[**Enter**]{.keycap} 选择某个选项。按 [**Space**]{.keycap}
键选择复选框状态。
:::
::: para
在开始菜单中选择 [**编辑连接**]{.guilabel}。选择
[**添加**]{.guilabel}，此时会打开 [**新建连接**]{.guilabel} 页面。
:::
::: figure
[⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#exam-Add_a_Connection_InfiniBand}
::: figure-contents
::: mediaobject
[⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#mediaobj-nmtui_Add_a_Connection_InfiniBand}![NetworkManager
文本用户界面添加 InfiniBand
连接菜单](images/nmtui_Add_a_Connection_InfiniBand.png)
:::
:::
**图 9.1. NetworkManager 文本用户界面添加 InfiniBand 连接菜单**
:::
::: para
选择 [**InfiniBand**]{.guilabel}，此时会打开 [**编辑连接**]{.guilabel}
页面。根据页面提示完成配置。
:::
::: figure
[⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#exam-Add_a_Connection_InfiniBand_Detail_Slave}
::: figure-contents
::: mediaobject
[⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#mediaobj-nmtui_Add_a_Connection_InfiniBand_Detail}![NetworkManager
文本用户界面配置 InfiniBand
连接菜单](images/nmtui_Add_a_Connection_InfiniBand_Detail.png)
:::
:::
**图 9.2. NetworkManager 文本用户界面配置 InfiniBand 连接菜单**
:::
::: para
有关 InfiniBand 术语定义请查看 [第 9.11.1 节 "配置 InfiniBand
标签"](#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Configuring_the_InfiniBand_Tab){.xref}。
:::
::: para
有关安装 [**nmtui**]{.application} 的详情请查看 [第 1.5 节
"使用文本用户界面（nmtui）进行网络配置"](#ch-Introduction_to_RHEL_Networking.html#sec-Networking_Config_Using_nmtui){.xref}。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Configure_IPoIB_Using_the_NetworkManager_command_line_tool_nmcli}9.8. 使用命令行工具 nmcli 配置 IPoIB {.title}
:::
::: para
首先确定是否需要重新命名默认的 IPoIB 设备，如果是，则请按照 [第 9.3.3 节
"70-persistent-ipoib.rules
用法"](#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Usage_of_70-persistent-ipoib.rules){.xref}
一节中的说明，使用 [**udev**]{.application}
重命名规则重新命名这些设备。用户可强制重命名 IPoIB
设备而无需重启，方法是删除 `ib_ipoib`{.literal}
内核模块，然后按以下方法重新载入：
``` screen
~]$ rmmod ib_ipoib
~]$ modprobe ib_ipoib
```
:::
::: para
按要求重新命名设备后，请使用 [**nmcli**]{.application} 工具创建 IPoIB
接口，如下：
``` screen
~]$ nmcli con add type infiniband con-name mlx4_ib0 ifname mlx4_ib0 transport-mode connected mtu 65520
Connection 'mlx4_ib0' (8029a0d7-8b05-49ff-a826-2a6d722025cc) successfully added.
~]$ nmcli con edit mlx4_ib0
===| nmcli interactive connection editor |===
Editing existing 'infiniband' connection: 'mlx4_ib0'
Type 'help' or '?' for available commands.
Type 'describe [>settingprop set infiniband.mac-address 80:00:02:00:fe:80:00:00:00:00:00:00:f4:52:14:03:00:7b:cb:a3
nmcli> save
Connection 'mlx4_ib3' (8029a0d7-8b05-49ff-a826-2a6d722025cc) successfully updated.
nmcli> quit
```
:::
::: para
此时已创建名为 `mlx4_ib0`{.literal} 的 IPoIB
接口，并将其设定为连接模式，采用最大连接模式 MTU，在 `IPv4`{.systemitem}
或 `IPv6`{.systemitem} 中使用 `DHCP`{.systemitem}。如果为集群流量使用
IPoIB 接口，而为集群以外通讯使用以太网接口，则很可能需要按要求禁用 IPoIB
接口中的默认路由及所有默认名称服务器。
``` screen
~]$ nmcli con edit mlx4_ib0
===| nmcli interactive connection editor |===
Editing existing 'infiniband' connection: 'mlx4_ib0'
Type 'help' or '?' for available commands.
Type 'describe [>settingprop set ipv4.ignore-auto-dns yes
nmcli> set ipv4.ignore-auto-routes yes
nmcli> set ipv4.never-default true
nmcli> set ipv6.ignore-auto-dns yes
nmcli> set ipv6.ignore-auto-routes yes
nmcli> set ipv6.never-default true
nmcli> save
Connection 'mlx4_ib0' (8029a0d7-8b05-49ff-a826-2a6d722025cc) successfully updated.
nmcli> quit
```
:::
::: para
若需要 `P_Key`{.literal} 接口，则请使用 [**nmcli**]{.application}
创建该接口，如下：
``` screen
~]$ nmcli con add type infiniband con-name mlx4_ib0.8002 ifname mlx4_ib0.8002 parent mlx4_ib0 p-key 0x8002
Connection 'mlx4_ib0.8002' (4a9f5509-7bd9-4e89-87e9-77751a1c54b4) successfully added.
~]$ nmcli con modify mlx4_ib0.8002 infiniband.mtu 65520 infiniband.transport-mode connected ipv4.ignore-auto-dns yes ipv4.ignore-auto-routes yes ipv4.never-default true ipv6.ignore-auto-dns yes ipv6.ignore-auto-routes yes ipv6.never-default true
```
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Configure_IPoIB_Using_the_command_line}9.9. 使用命令行配置 IPoIB {.title}
:::
::: para
首先确定是否需要重新命名默认的 IPoIB 设备，如果是，则请按照 [第 9.3.3 节
"70-persistent-ipoib.rules
用法"](#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Usage_of_70-persistent-ipoib.rules){.xref}
一节中的说明，使用 [**udev**]{.application}
重命名规则重新命名这些设备。用户可强制重命名 IPoIB
设备而无需重启，方法是删除 `ib_ipoib`{.literal}
内核模块，然后按以下方法重新载入：
``` screen
~]$ rmmod ib_ipoib
~]$ modprobe ib_ipoib
```
:::
::: para
按要求命名设备后，管理员可使用其首选编辑器创建 `ifcfg`{.literal}
文件以控制这些设备。采用静态 `IPv4`{.systemitem} 寻址的典型 IPoIB
配置文件类似如下：
``` screen
~]$ more ifcfg-mlx4_ib0
DEVICE=mlx4_ib0
TYPE=InfiniBand
ONBOOT=yes
HWADDR=80:00:00:4c:fe:80:00:00:00:00:00:00:f4:52:14:03:00:7b:cb:a1
BOOTPROTO=none
IPADDR=172.31.0.254
PREFIX=24
NETWORK=172.31.0.0
BROADCAST=172.31.0.255
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
MTU=65520
CONNECTED_MODE=yes
NAME=mlx4_ib0
```
DEVICE 字段必须与使用 [**udev**]{.application}
命名规则创建的自定义名称映射。NAME 条目不需要与设备名称映射。如果启动
GUI 连接编辑器，则要使用 NAME 字段为用户显示这个连接的名称。TYPE
字段必须为 InfiniBand，以便正确处理 InfiniBand 选项。CONNECTED_MODE
可以是 `yes`{.literal}，也可以是 `no`{.literal}，其中 `yes`{.literal}
代表在通讯中使用连接模式，而 `no`{.literal}
代表使用数据报模式（详情请查看 [第 9.6.2 节 "了解 IPoIB
通讯方式"](#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Understanding_IPoIB_communication_modes){.xref}
一节）。
:::
::: para
以下是 `P_Key`{.literal} 接口的典型配置文件：
``` screen
~]$ more ifcfg-mlx4_ib0.8002
DEVICE=mlx4_ib0.8002
PHYSDEV=mlx4_ib0
PKEY=yes
PKEY_ID=2
TYPE=InfiniBand
ONBOOT=yes
HWADDR=80:00:00:4c:fe:80:00:00:00:00:00:00:f4:52:14:03:00:7b:cb:a1
BOOTPROTO=none
IPADDR=172.31.2.254
PREFIX=24
NETWORK=172.31.2.0
BROADCAST=172.31.2.255
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
MTU=65520
CONNECTED_MODE=yes
NAME=mlx4_ib0.8002
```
所有 `P_Key`{.literal} 接口文件都需要 PHYSDEV
指令，且必须是上级设备的名称。PKEY 指令必须为 `yes`{.literal}，同时
`PKEY_ID`{.literal} 必须为接口号（添加或不添加 `0x8000`{.literal}
成员关系字节均可）。但该设备名称必须是 `PKEY_ID`{.literal}
的四位十六进制数字代表附加使用逻辑或运算符的 `0x8000`{.literal}
成员字节，如下：
``` synopsis
NAME=${PHYSDEV}.$((0x8000 | $PKEY_ID))
```
:::
::: para
默认情况下，会将该文件中的 `PKEY_ID`{.literal}
视为十进制数字，并转换为示例禁止数字，然后使用逻辑或运算符与
`0x8000`{.literal} 合并得到该设备的正确名称，但用户需在该数字前添加标注
`0x`{.literal} 前缀，以便使用十六进制指定 `PKEY_ID`{.literal}。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Testing_an_RDMA_network_after_IPoIB_is_configured}9.10. 配置 IPoIB 后测试 RDMA 网络 {.title}
:::
::: para
配置 IPoIB 后，可以使用 `IP`{.systemitem} 地址指定 RDMA
设备。由于普遍使用 `IP`{.systemitem} 地址和主机名指定机器，大多数 RDMA
应用程序也首选使用此方式，只是在某些情况下指定远程机器以及连接到该机器的本地设备时使用
IPoIB。
:::
::: para
要测试 IPoIB 层的功能，可使用任意标准 `IP`{.systemitem}
网络测试工具，并提供要测试 IPoIB 设备的 `IP`{.systemitem}
地址。例如：测试 IPoIB 设备 `IP`{.systemitem} 地址是否工作的 ping 命令。
:::
::: para
Red Hat Enterprise Linux 中有两种不同的 RDMA 性能测试软件包，即
[qperf]{.package} 和
[perftest]{.package}。这两个软件包均可用来进一步测试 RDMA 网络性能。
:::
::: para
但使用 [perftest]{.package} 软件包中的任意程序时，或使用
[**qperf**]{.application} 应用程序时，需要特别注意地址解析。即使使用
`IP`{.systemitem} 地址或 IPoIB
设备的主机名指定远程主机，也允许测试应用程序通过不同的 RDMA
接口。理由是因为从主机名或 `IP`{.systemitem} 地址转换为 RDMA
地址的过程允许在两台机器中使用的所有有效 RDMA
地址对。如果有多种方式可让客户端连接到服务器，那么该程序会在指定路径出问题时选择使用不同的路径。例如：如果每台机器中均有两个端口连接到同一
InfiniBand 子网，并给出每台机器中第二个端口的 `IP`{.systemitem}
地址，那么该程序就很可能发现每台机器中的第一个端口是有效的，并使用该端口。在这种情况下，可使用
perftest 程序的所有命令行选项告诉它们要捆绑的网卡及端口，如 [第 9.5 节
"测试早期 InfiniBand RDMA
操作"](#ch-Configure_InfiniBand_and_RDMA_Networks.html#sec-Testing_Early_InfiniBand_RDMA_operation){.xref}
中 [**ibping**]{.application}
所做的一样，以便保证在要求测试的具体端口中进行测试。[**qperf**]{.application}
捆绑端口的方式稍有不同。[**qperf**]{.application}
程序在一台机器中作为服务器使用，侦听所有设备（包括非 RDAM
设备）。客户端可使用服务器的有效 `IP`{.systemitem} 或主机名连接到
[**qperf**]{.application}。[**Qperf**]{.application}
会首先尝试打开数据连接，并使用在客户端命令中给出的 `IP`{.systemitem}
地址或主机名运行要求的测试；但如果使用该地址有任何问题，[**qperf**]{.application}
就会返回，并尝试着客户端和服务器之间的任意有效路径中运行。因此，要强制
[**qperf**]{.application} 使用具体链接进行测试，请在
[**qperf**]{.application} 客户端中使用 `-loc_id`{.option} 或
`-rem_id`{.option} 选项，以便强制使用具体链接进行测试。
:::
:::
::: section
::: titlepage