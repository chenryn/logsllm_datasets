●
the whole of dot11ac is only defined for 5GHz.
So for devices which support both bands, we always capture signatures from each 
band.
However even in the same band, devices often have multiple signatures. They vary 
what they advertise based on local conditions like noise.
This example shows two signatures seen from a Google Pixel Phone. It varies its 
handling of beamforming, presumably based on the noise environment it sees.
0:50
Feedback loop with AP
Probe Request
Association Request
Probe Response
wifi4|probe:0,1,45,
221(0050f2,8),191,1
27,htcap:016f,htagg
:1f,htmcs:000000ff,
vhtcap:33907132,vht
rxmcs:0186fffe,vhtt
xmcs:0186fffe,extca
p:04000000000000408
0|assoc:0,1,33,36,4
8,70,45,221(0050f2,
2),191,127,htcap:01
6f,...
Clients can also behave differently depending on what the AP says in response to 
their Probe Request. For example:
●
If the AP says it supports Radio Resource Management, most Apple and 
some Android devices will include a Spectrum Management IE in their 
Association Request (it’s #70, in red above).
●
Another example: though dot11ac is only defined for 5 GHz, many vendors 
have a proprietary implementation which handles 2.4GHz as well. For some 
chipsets we see it in the Probe Request, but only in the Association if it sees 
the right response from the AP.
When capturing signatures for the database, we use three different APs to maximize 
the chances of capturing different signatures.
1:00
Signature Aliasing
Amazon Dash Button
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
First Alert Thermostat
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
Nexus 7 (2012 edition)
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
Roku HD
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
Withings Scale
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff
Sometimes we see the same signature from multiple devices.
These examples are all devices using the Broadcom 43362 chipset, running Linux, 
with the same driver, the same wpa_supplicant, and old enough that none of them 
provide a TX Power IE. The signatures are identical: an Amazon Dash Button, a First 
Alert Thermostat, a Nexus 7, Roku HD, and Withings Scale.
0:30
Signature Disambiguation
Amazon Dash Button
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|oui:amazon
First Alert Thermostat
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|oui:firstalert
Nexus 7 (2012 edition)
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|oui:asus
Roku HD
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|os:roku
Withings Scale
wifi4|probe:0,1,50,45,3,221(001018,2),221(00904c,51),htcap:110c,htagg:19,htmcs:000000ff|assoc:0,1,48,50,4
5,221(001018,2),221(00904c,51),221(0050f2,2),htcap:110c,htagg:19,htmcs:000000ff|oui:withings
In most cases like this we distinguish them using the top 24 bits of the MAC address, 
which is the Organizationally Unique Identifier. OUIs are assigned to a manufacturer. 
Adding the OUI as a qualifier can distinguish similar devices from different 
manufacturers which have the same signature.
We sometimes use information from DHCP: the options present in the request can 
identify the OS, as developed by Fingerbank (http://fingerbank.org). However using 
DHCP gets further and further from the Wi-Fi layer, so we try to be more sparing in 
using it. In particular, only the AP itself will be able to see the DHCP information after 
decryption, it cannot be used from a separate sniffer device on the Wi-Fi network.
0:45
Troublesome cases
iPad Air 2nd gen vs iPhone 6s
wifi4|probe:0,1,45,127,107,191,221(0017f2,10),221(0050f2,8),221(0
01018,2),htcap:006f,htagg:17,htmcs:0000ffff,vhtcap:0f815832,vhtrx
mcs:0000fffa,vhttxmcs:0000fffa,extcap:0400088400000040|assoc:0,1,
33,36,48,45,127,191,221(0017f2,10),221(001018,2),221(0050f2,2),ht
cap:006f,htagg:17,htmcs:0000ffff,vhtcap:0f815832,vhtrxmcs:0000fff
a,vhttxmcs:0000fffa,txpow:1302,extcap:0400000000000040
However there remain some cases which are still troublesome, mainly devices made 
by the same vendor, using the same software, the same chipset, and at about the 
same time. Often the TX Power information will distinguish them due to differing 
board designs, but not always. For example, iPad Air 2nd generation and iPhone 6s 
have the same signature. We can try to use heuristics, like if the DHCP hostname 
contains iPad then it’s probably an iPad. If nothing else though, we have to return 
both possibilities.
0:30
Uses of Wi-Fi Taxonomy
Current
● List of Connected Clients in UI
● Correlate with other data
Future
● Optimize for client ?
● WIDS ?
This mechanism was originally developed as part of a Wi-Fi AP project. We intended 
to focus on identifying the Wi-Fi chipset the client was using. We thought if we could 
just know what chipset the client was using, we’d enable all kinds of very clever 
workarounds for bugs in that chipset and we would make Wi-Fi perfect… but it turns 
out that the kinds of bugs which can be easily worked around are mostly handled by 
the software in the client device. Who knew?
Instead, this information is currently used:
●
in the UI where one can see a list of connected clients to also give an 
indication of what those clients are. If the client includes a useful hostname 
that is great, but if it doesn’t include a hostname or it uses something like its 
serial number it is better to say what kind of device we think it is.
●
We also use it to correlate with performance data to break it out by type of 
client device. My colleague Avery Pennarun gave a talk at Netdev 1.1. The 
graph on this page is from that talk, and shows Wi-Fi throughput getting better 
and better as the client gets closer to the AP, until when it gets really close it 
drops sharply back down. Most clients don’t behave this way, only a few (one, 
in this case). That sort of behavior is only visible if the data can be broken out 
by the type of device.
https://www.youtube.com/watch?v=yZcHbD84j5Y (the section about this 
mechanism starts at 16:09).
Possible uses in the future:
●
We might use it for optimizations based on the client, for example in how well 
they tolerate packet reordering, and use it to get lower latency.
●
Wireless Intrusion Detection Systems could make use of knowing more about 
the type of client connecting, to know what sort of behavior to expect from it.
2:00
Other resources
●
Published paper
https://research.google.com/pubs/pub45429.html
https://arxiv.org/abs/1608.01725
●
“Measuring wifi performance across all Google Fiber customers”
Avery Pennarun, Netdev 1.1, 2015
https://youtu.be/yZcHbD84j5Y
http://apenwarr.ca/diary/wifi-data-apenwarr-201602.pdf
We published a paper about the mechanism, which goes one level of detail deeper 
into the implementation.
The NetDev talk by Avery Pennarun is linked here. That talk described the overall 
environment where this mechanism was developed and how it was used in that 
environment.
0:30
Current Status
● hostapd 2.6 added CONFIG_TAXONOMY.
○ hostapd_cli command: signature
● Database of known signatures:
○
https://github.com/NetworkDeviceTaxonomy/wifi_taxonomy
○ 907 signatures covering 172 devices
○ ~60% of connected Wi-Fi devices
○ the long tail is long
The implementation to extract signatures for clients went into hostapd in August 2016, 
and is present in hostapd 2.6 and later.
The database of known signatures is released as open source code under an Apache 
license.
https://github.com/NetworkDeviceTaxonomy/wifi_taxonomy
It currently identifies about 60% of Wi-Fi clients across a broad swath of the market. 
The remaining 40% of devices are mostly laptops and desktops, with a long tail of 
other types of unidentified devices.
0:45
What Happens Next
● Integration
● Better tools to gather signatures
○ Handle dependency on AP
● AP Taxonomy?
What comes next?
●
So. There is this thing which can identify an interesting subset of Wi-Fi client 
devices. The signature mechanism is in hostapd, and the database of 
signatures is published as open source code, but it is only useful if integrated 
into other products and systems: Wi-Fi APs, or Wireless Intrusion Detection 
Systems, or other stuff.
The main goal of this talk is to build awareness that the system exists and is 
available for use. 
●
We need to develop better tools for gathering signatures. Right now it is pretty 
manually intensive. Also, the longer we’ve been at this the more we realize 
that the client responds to what it sees from the AP. To get a really robust set 
of signatures, we need to gather using even more different types of APs.
●
This talk has been all about how APs can identify clients, but running it in 
reverse would likely work as well. It could be run on a client to identify the type 
of AP it is connecting to. The list of IEs present in the AP’s Beacon and Probe 
Response could be turned into a signature, and this would allow any other 
connectivity or performance checks run by the client to report more information 
about the AP.
Poll: Run a Wi-Fi AP at DEFCON?
1%
10%
89%
bad idea.
worst idea.
what could possibly go wrong?
SSID: SmellOfWifiTalk
Password: smellofwifitalk
I surveyed co-workers about whether to run a demo, and as you can see the results 
were quite encouraging.
You can try it! Joining SmellOfWifiTalk will print the system’s estimation of what your 
device is, for however long a rogue Wi-Fi network lasts at DEFCON. It will be printed 
in that terminal window up on the screen, while we answer questions.
0:30