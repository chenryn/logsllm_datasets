### Development Platforms and Game Characteristics

The development platforms utilized in our study include Unity3D (C#) [33], Android SDK (Java) [18] and NDK (C++) [17], Adobe Air (ActionScript) [1], and cocos2d-x (C++) [10]. Among these, Unity3D, Android SDK/NDK, and cocos2d-x are the three leading platforms. The other platforms have fewer than 10 applications in our game set. Our game set covers a wide range of genres, including action, strategy, and sports [2]. The developers range from large companies such as King Digital, Zynga, and Tencent to individual developers.

Additionally, these games exhibit diverse network access patterns.

### Summary of Results

Most mobile games expose two types of resources to potential hackers: local resources (e.g., memory and local files) and network traffic. Developers employ various mechanisms to protect these resources. To safeguard against malicious modifications of local resources, developers use memory protections and file protections. For network traffic, techniques such as encoding, encryption, and signing are applied to secure communication between the mobile device and the game server.

We also observed that developers adopt different approaches to protect the game's internal logic. These methods include code obfuscation and compiling critical components into native code, which makes it more difficult for hackers to understand the game's behavior. Additionally, some developers implement client-server synchronization mechanisms. This ensures that any malicious modification of the client-side state is reverted to the server-side value during subsequent synchronization.

In the following sections, we will detail the aforementioned protection mechanisms: local resource protection, network protection, code obfuscation, native code implementation, and client-server synchronization.

### Table 1: Representative Set of Games

| Index | Game Name |
|-------|-----------|
| 1     | Subway Surf |
| 2     | Agent Alice |
| 3     | Temple Run 2 |
| 4     | Clash of Clans |
| 5     | Trivia Crack |
| 6     | Mary Garden |
| 7     | ZigZag |
| 8     | Crossy Road |
| 9     | Coin Dozer |
| 10    | Kill Shot |
| ...   | ...       |
| 99    | Dragon City |

### Table 2: Game Engines and Protections

| Game Engine      | Local Resource Protection | Network Protection | Code Obfuscation | Compilation to Native Code | Client-Server Sync |
|------------------|---------------------------|--------------------|------------------|---------------------------|--------------------|
| Unity3D          | 1, 7, 14, 17, 20, 24       | 1, 4, 6, 7, 17, 24  | 26, 39, 51, 53, 89 | 93, 94, 96, 98             | 30, 36, 51, 89, 94  |
| Android SDK/NDK  | 11, 13, 18, 25, 34, 42, 43, 46, 63 | 73, 76, 78, 79, 81, 85 | 5, 8, 11, 13, 15, 25, 26, 32, 33, 34, 42, 43, 54, 55, 64, 66, 70, 74, 75, 77, 78, 79, 80, 81, 82, 83, 92, 95, 97 | 5, 8, 11, 13, 18, 23, 25, 33, 35, 43 | - |
| Adobe AIR        | -                         | -                  | -                | -                         | -                  |
| Cocos2d-x        | -                         | -                  | -                | -                         | -                  |
| libGDX           | -                         | -                  | -                | -                         | -                  |
| AndEngine        | -                         | -                  | -                | -                         | -                  |

This table provides an overview of the game engines used and the specific protection mechanisms implemented by each engine.