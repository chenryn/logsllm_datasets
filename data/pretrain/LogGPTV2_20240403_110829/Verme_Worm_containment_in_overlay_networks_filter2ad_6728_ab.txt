In Section 5 we will give examples of other layers that
use this routing overlay, in particular a DHT.
4.3. Id assignment
The id assignment scheme used by Chord does not obey
the principles mentioned in Section 3, since the list of suc-
cessors of any given node will typically contain nodes of
both types. Therefore we modify the way ids are assigned
such that the ring is divided into sections, where each sec-
tion only contains the ids of nodes of a particular type.
Furthermore, neighboring sections must always belong to
different types. This will cause nodes of the same type
from the same section to have knowledge about themselves
(through their successor lists) but no knowledge of nodes of
the same type in other sections (provided that the number
of nodes in each section is large enough that successor lists
never span more than two sections).
Verme’s id assignment achieves this by dividing the node
id in three parts, as depicted in Figure 2. The lower bits are
assigned randomly, and the number of bits employed here
Figure 3. Finger and successor pointers
speciﬁes the length of the section. By adjusting this number
properly we can ensure that, with high probability, succes-
sor lists do not cross more than one section. The middle
bits are ﬁxed according to the node type. With our simpli-
fying assumption of having only two types in the system we
could use a single bit. The higher bits are also assigned ran-
domly, and their concatenation with the node type speciﬁes
the section number that the node is in.
4.4. Successors and ﬁngers
Each node maintains pointers to a list of successors that
are used and maintained just like in Chord. However, ﬁnger
table entries must be modiﬁed to point to a node that is not
of the same type as the node itself, to respect the design
principles presented in Section 3.
Thus we need to change the way that ﬁngers are deﬁned.
Instead of a ﬁnger table entry pointing to the node that fol-
lows it at power-of-two distances in the identiﬁer space, the
ﬁnger entry will now correspond to the ﬁrst successor of the
ids at the same distance plus the length of a section (except
for nearby nodes that are either in same section where the
node is in, or in the subsequent section of nodes of the op-
posite type where adding a section length is not required),
so that the node that follows it belongs to the opposite type.
Figure 3 shows a Verme ring with the successors and ﬁngers
of a node.
There is a corner case that need to be considered, which
happens when the id falls between the last node in the sec-
tion and the end of that section (in which case the ﬁnger
table entry would be the ﬁrst node in the next section of the
same type). In this case we chose to assign the responsi-
bility to the predecessor of that id, instead of the successor.
The problem with this design choice is that the last node in
each section will have a higher load than in Chord, which
is compensated by a lower load at the ﬁrst node of each
section. However, ﬁxing this slight load imbalance would
require adding a substantial amount of complexity to the
design of the system (e.g., to skip the neighboring section),
which justiﬁes our choice.
randomrandomtypeid formatType AType B4.5. Lookups
Lookup is the central operation provided by the rout-
ing overlay.
In Chord (as in most peer-to-peer overlays)
any node in the system can issue a lookup(id) operation.
As mentioned, this returns the address of a node (or set
of nodes) that are responsible for the data with that id (in
Chord these are the successors of the id).
This is used not only by applications, but also in the over-
lay maintenance protocols: ﬁnger table entries are refreshed
periodically by performing a lookup to the appropriate point
in the id space; and joins of nodes incoming to the overlay
are also initiated by performing a lookup to the id of the
incoming node, who then contacts its new successor to up-
date its routing information. We will begin by discussing
how lookups are modiﬁed for overlay maintenance opera-
tions, and we discuss how upper layers can use lookups in
Section 5.
The current lookup abstraction allows an infected node
to crawl the overlay, by making lookups with different ids,
to obtain addresses to attack. We address this issue by
changing several aspects of the lookup operation. First, the
lookup message must carry the certiﬁcate of the node that
is performing the lookup. This will allow the predecessor
of the id to verify the legitimacy of the initiator in look-
ing up this id. When lookups are being used for joining the
overlay or calculating ﬁnger table entries, this is straightfor-
ward: the node must verify if it is the successor or a correct
ﬁnger of the id in the certiﬁcate.
The second aspect we need to address in lookups is that
they cannot be iterative, since many nodes in a lookup path
have the same type as the node performing the lookup.
Therefore we change the lookup to be recursive (i.e., each
node contacts the next node in the lookup path, and the re-
ply travels back through the reverse lookup path). The re-
ply must be encrypted with the public key of the initiator
(present in the certiﬁcate sent with the lookup) to keep the
IP address in the reply from being disclosed to the nodes in
the lookup path.
We also rejected the solution of transitive lookups (i.e.,
the forward path is identical to a recursive lookup, but the
replier contacts the initiator directly) because in this case the
lookup request must contain the IP address of the initiator
node, to allow the replier to contact him. This would open
an avenue for an infected node to collect a large number
of IP addresses of any type, simply by inspecting the IP
addresses that are sent through it.
5. Upper layers: VerDi DHT
The layers above the lookup substrate also need to be
modiﬁed to preserve the design principles and properties
subjacent to our scheme, like not propagating network in-
formation about peers.
In this section we will focus on a particular layer that
uses the lookup infrastructure: a DHT that supports get and
put operations, similar to the DHash layer built on top of
Chord lookups [8, 9]. The design of the VerDi DHT is based
on the original design of DHash, and it uses Verme as the
routing overlay. We believe that a DHT is representative of
how other layers, or even applications must be adapted.
5.1. DHash overview
DHash exports a simple interface to applications with
two operations:
key = put(value)
value = get(key)
where the key is computed to be the SHA-1 hash of the
value.
In this system data is replicated in the set of n succes-
sors of the identiﬁer of the data item. As an optimization,
a more recent paper has proposed the use of erasure coded
fragments instead of full replicas of the data [9] but we will
not consider that optimization in this paper.
Get and put operations are preceded by a lookup that re-
turns the successor list of the key’s predecessor. Then one
or more of these nodes are contacted directly to store or re-
trieve the data. Another optimization for the get operation
that we did not implement was for the lookup to stop short
of the key’s predecessor provided that enough successors of
the id were returned to reconstruct the original data.
Before returning the output of a get operation to the
client, DHash veriﬁes that the hash of the value returned by
the replica matches the id being looked up (in other words,
the data is self-verifying).
5.2. Replication in VerDi
If we maintained the design of DHash, and only replaced
Chord with Verme in the routing layer, we would still have
a risk of worm propagation because the replicas of the data
may be from the same type of the node making the request.
Therefore an infected node could issue a series of get or
put requests to harvest IP addresses of any type it wishes to
infect.
The ﬁrst step to address this problem is to change the
way that replicas are assigned in VerDi. Instead of repli-
cating in the n successors of the identiﬁer of the data item,
we make n/2 replicas at that point in the id space, and an-
other n/2 in the same position of the subsequent section of
the ring (of the opposite type). This replication strategy is
depicted in Figure 4.
Again, we addressed the corner case of a data item with
2 th last node in a
an id that falls between the id of the n
section and the end of the section by replicating toward
the predecessors instead of successors, which causes some
load imbalance but avoids a complex design. This implied,
though, a small change to Verme’s maintenance protocols.
in the overlay (independently of their type). For that, it per-
forms a lookup for the id of the data (or that id plus the
section length) to ﬁnd a responsible node of the opposite
type to whom a copy of the data is sent.
The main limitation of Fast-VerDi is that it is vulnera-
ble to an impersonation attack. In this attack, a single node
would obtain an identity of the opposite type of the one it
wishes to attack, and issue a series of get or put operations
to random ids to harvest IP addresses and then infect these
nodes. In the next two sections we discuss alternative de-
signs that alleviate this problem.
5.3.2. Alternative 2: Secure-VerDi
In this design we address this problem by combining the
lookup operation with the operations get or put. Thus,
the operation is piggybacked in the lookup message, which
moves recursively until it reaches the predecessor of the
identiﬁer associated with the data. In the case of a get oper-
ation, one of the replicas is chosen to retrieve the data and
the reply travels back through the reverse lookup path. Note
that in this case it is not necessary to fetch the reply from
a particular type of node, and so data does not need to be
replicated in two sections.
In Secure-VerDi, the impersonation attack mentioned in
the previous section is highly limited: Each node only con-
tacts its overlay neighbors (ﬁnger and successor entries) and
therefore a single impersonating node would at most be able
to infect the sections corresponding to these nodes (which
are O(log n), hence a relatively small fraction of nodes for
a large overlay).
The price to pay for this additional level of security is
the latency and bandwidth usage for get and put opera-
tions, which imply a costly data transfer for every hop in
the lookup path.
5.3.3. Alternative 3: Compromise-VerDi
We also propose a compromise solution that represents an
intermediate point in the compromise between performance
and security. The idea is to have a single level of indirection
when uploading or downloading the data object. Thus the
data will be relayed by one of the ﬁnger table entries of
the initiator of the request, preventing a compromised node
from harvesting IP addresses by performing several DHT
operations.
In more detail, a get operation works as follows. The ini-
tiator of the operation begins by signing a statement vouch-
ing for the fact that it wants to perform the operation. Then
it sends the request, along with this statement and its certiﬁ-
cate to its appropriate ﬁnger table entry (who will act as a
relay). This node will then append its own node certiﬁcate
to the request, and will make a get operation like in Fast-
Verdi. When the relay receives the data, it forwards it to the
initiator.
This way, in case of an impersonation attack, an infected
Figure 4. Replication of data items in a DHT
Instead of only trying to keep the successor list up-to-date,
Verme also uses the same strategy to maintain a list of pre-
decessors.
Replicating in nodes of both types also has the advantage
of increasing reliability, since a worm outbreak that affects
nodes from one type will not be able to wipe out all copies
of a given object. We intend to further explore the increased
availability and reliability guarantees of our system.
5.3. Integrating routing and fetching
We also need to understand how get and put operations
are performed in VerDi, in particular how to integrate rout-
ing and fetching. We have devised three alternative methods
for the implementation of these operations, that represent
three distinct points in a tradeoff between performance and
security (in terms of the ability to contain p2p worms).
5.3.1. Alternative 1: Fast-VerDi
The most straightforward way to implement operations in
VerDi is to allow the lookup primitive exported to the upper
layers to return the addresses of the replicas that are of the
opposite type of the node that issued the request. For that
purpose, the lookup operation adds the section length to the
id being looked up if necessary (to avoid returning addresses
of the same type as the initiator). The replier then veriﬁes
if the initiator is of the opposite type before responding (by
checking that the id in the certiﬁcate sent along with the
message belongs to the opposite type) dropping the message
otherwise, and encrypts the reply using the public key in
the certiﬁcate. The reply travels back through the reverse
lookup path.
Once the initiator node receives this reply and decrypts
it, the get operation is concluded by fetching the data di-
rectly from any of the replicas.
In the case of put operations, after the lookup reply is re-
ceived, the client sends the data to the responsible node (of
the opposite type of the client). After receiving the data, the
responsible node has to send the data to the set of replicas
of the opposite type, to make the data available to all clients
Type AType BIdId + section lengthnode pretending to be of the same type that it wishes to
attack will not be able to proactively harvest IP addresses
by issuing operations, unless it is colluding with one of its
ﬁnger table entries, which is difﬁcult to do because of the
size of the overlay and because of the fact that node ids are
random and we envision that they will be difﬁcult to obtain
(so nodes cannot easily try out different ids until it works).
Again, even though such collusion between a node and its
ﬁnger would be possible given enough effort to produce two
node ids that are correspond to overlay neighbors, the goal
of signiﬁcantly raising the bar for building such a p2p worm
has been achieved.
Note that despite this effort to prevent impersonating
nodes from harvesting addresses by proactively issuing
DHT operations, an impersonating node can still passively
listen to requests coming from nodes of whom they are ﬁn-
ger table entries, and use this to record IP addresses of nodes
of the same type. They are, however, limited to the rate at
which their neighbors issue these requests.
6. Discussion
In this section we question the validity of some of the
assumptions made previously, and discuss other issues.
6.1. Sybil attacks
In our design we assumed that each node in the system
obtained a single certiﬁcate containing a correct indication
of the type of node.
In the previous section we already discussed how to ad-
dress an impersonation attack, where an infected node joins
the system with a single identity of a type which is different
from the vulnerable type.
However, we still need to limit the number of certiﬁcates
that can be issued to a single entity, since an attacker that
populates the system with nodes of arbitrary types under his
control (called a Sybil attack [10]) can still harvest a large
number of addresses.
Issuing such certiﬁcates and limiting Sybil attacks are
issues that have been solved with some degree of success
in deployed systems like Credence [24] (by asking join-
ing nodes to download a large ﬁle or solve cryptographic
puzzles), and therefore we intend to use the same strategy.
Also, in some cases where the client hardware allows it, we
can use remote attestation to verify the identity and platform
where the client is running.
6.2. Generalizing to other overlays
Even though DHTs are gaining in popularity, many pop-
ular p2p applications are based on unstructured overlays.
The design principles stated in Section 3 can also be applied
to modify the design of unstructured p2p overlays.
For instance, consider the original (unstructured) design
of BitTorrent [6] where a centralized tracker assigns neigh-
bors for nodes to exchange content with.
In this case, and assuming the tracker is not vulnerable to
worm infection (e.g., it will not run any services, run behind
a ﬁrewall, etc.), then it will be able to assign neighbors in a
way that forms an overlay graph with the generic structure
of Figure 1, therefore achieving the same goal.