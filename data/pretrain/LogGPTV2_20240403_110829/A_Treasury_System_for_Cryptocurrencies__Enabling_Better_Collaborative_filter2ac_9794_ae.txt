(cid:96)=1 z(cid:96),i and jointly decrypt it to wi (Cf. [22]).
αj
j,(cid:96) and jointly decrypt it to y(cid:96) (Cf. [22]). Execute macro
. (Cf. Fig. 6 )
Upon receiving (READTALLY, sid) from the environment Z, the party P does the following:
Execute macro Read-Msg and obtain data.
Fetch {(xi, yi)}i∈[0,2] from data, and return (READTALLYRETURN, sid, (y0, y1, y2)) to the environment Z.
Fig. 7: The voting protocol Πt,k,m,n
VOTE
in {FLEDGER,F t,k
DKG}-hybrid model
10
The algorithm that maps i ∈ [0, n − 1] to e(n)
Input: index i = (i1, . . . , ilog n) ∈ {0, 1}log n
Output: unit vector e(n)
1. For (cid:96) ∈ [log n], set b(cid:96),0 := 1 − i(cid:96) and b(cid:96),1 := i(cid:96);
2. For j ∈ [0, n − 1], set ei,j := (cid:81)log n
i = (ei,0, . . . , ei,n−1) ∈ {0, 1}n
(cid:96)=1 b(cid:96),j(cid:96) , where
i
j1, . . . , jlog n is the binary representation of j;
3. Return e(n)
i = (ei,0, . . . , ei,n−1);
Fig. 8: The algorithm that maps i ∈ [0, n − 1] to e(n)
i
i
schemes, e.g., Helios. However, the proof size is linear in the
length of the unit vector, and thus the communication overhead
is quite signiﬁcant when the unit vector length becomes larger.
In this section, we propose a novel special honest ver-
iﬁer ZK (SHVZK) proof for unit vector that allows the
prover to convince the veriﬁer that a vector of ciphertexts
, i ∈ [0, n− 1] with
(C0, . . . , Cn−1) encrypts a unit vector e(n)
O(log n) proof size. Without loss of generality, assume n is a
perfect power of 2. If not, we append Encpk(0; 0) (i.e., trivial
ciphertexts) to make the total number of ciphertexts to be the
next power of 2. The proposed SHVZK protocol can also be
Fiat-Shamir transformed to a non-interactive ZK (NIZK) proof
in the random oracle model. The basic idea of our construction
is inspired by [24], where Groth and Kohlweiss proposed a
Sigma protocol for the prover to show that he knows how to
open one out of many commitments. The key idea behind our
construction is that there exists a data-oblivious algorithm that
can take input as i ∈ {0, 1}log n and output the unit vector
e(n)
. Let i1, . . . , ilog n be the binary representation of i. The
i
algorithm is depicted in Fig. 8.
Intuitively, we let the prover ﬁrst bit-wisely commit the
binary presentation of i ∈ [0, n − 1] for the unit vector
e(n)
. The prover then shows that each of the commitments
i
of (i1, . . . , ilog n) indeed contain 0 or 1, using the Sigma
protocol proposed in Section 2.3 of [24]. Note that in the 3rd
move of such a Sigma protocol, the prover reveals a degree-1
polynomial of the committed message. Denote z(cid:96),1 := i(cid:96)x+β(cid:96),
(cid:96) ∈ [log n] as the corresponding degree-1 polynomials, where
β(cid:96) are chosen by the prover and x is chosen by the veriﬁer. By
linearity, we can also deﬁne z(cid:96),0 := x− z(cid:96),1 = (1− i(cid:96))x− β(cid:96),
(cid:96) ∈ [log n]. According to the algorithm described in Fig.8, for
j ∈ [0, n − 1], let j1, . . . , jlog n be the binary representation
(cid:96)=1 z(cid:96),j(cid:96) can be viewed as a degree-
of j, and the product(cid:81)log n
(log n) polynomial of the form
pj(x) = ei,jxlog n +
pj,kxk
k=0
j=0 (Ej)yj ·(cid:81)log n−1
that E := (cid:81)n−1
D(cid:96) := Encpk((cid:80)n−1
for some pj,k, k ∈ [0, log n − 1]. We then use batch
veriﬁcation to show that each of Cj indeed encrypts ei,j.
More speciﬁcally, for a randomly chosen y ← Zp,
let
Ej := (Cj)xlog n · Enc(−pj(x); 0); the prover needs to show
(Dk)xk encrypts 0, where
j=0 (pj,(cid:96) · yj); R(cid:96)), (cid:96) ∈ [0, log n − 1] with
fresh randomness R(cid:96) ∈ Zp. The construction is depicted
in Fig. 9, and it consists of 5 moves. Both the prover and
the veriﬁer shares a common reference string (CRS), which
is a Pedersen commitment key that can be generated using
k=0
log n−1(cid:88)
random oracle. The prover ﬁrst commits to each bits of the
binary representation of i, and the commitments are denoted
as I(cid:96), (cid:96) ∈ [log n]. Subsequently, it produces B(cid:96), A(cid:96) as the
ﬁrst move of the Sigma protocol in Sec. 2.3 of [24] showing
I(cid:96) commits to 0 or 1. Jumping ahead, later the prover will
receive a challenge x ← {0, 1}λ, and it then computes the third
move of the Sigma protocols by producing {z(cid:96), w(cid:96), v(cid:96)}log n
(cid:96)=1 .
To enable batch veriﬁcation, before that, the prover is given
another challenge y ← {0, 1}λ in the second move. The prover
computes and sends {D(cid:96)}log n−1
. The veriﬁcation consists of
two parts. In the ﬁrst part, the veriﬁer checks the following
equations to ensure that I(cid:96) commits to 0 or 1.
(cid:96)=0
•
•
(I(cid:96))x · B(cid:96) = Comck(z(cid:96); w(cid:96))
(I(cid:96))x−z(cid:96) · A(cid:96) = Comck(0; v(cid:96))
n−1(cid:89)
In the second part, the veriﬁer checks if
(cid:0)(Cj)xlog n · Encpk(− log n(cid:89)
z(cid:96),j(cid:96); 0)(cid:1)yj · log n−1(cid:89)
(D(cid:96))x(cid:96)
j=0
(cid:96)=1
(cid:96)=0
is encryption of 0 by asking the prover to reveal the random-
ness.
Theorem 1: The protocol described in Fig. 9 is a 5-move
public coin special honest veriﬁer zero-knowledge argument
i = (ei,0, . . . , ei,n−1) ∈ {0, 1}n and
of knowledge of e(n)
(r0, . . . , rn−1) ∈ (Zp)n such that Cj = Encpk(ei,j; rj),
j ∈ [0, n − 1] under the DDH assumption.
Proof: For perfect completeness, we ﬁrst observe that the
veriﬁcation equations (I(cid:96))x·B(cid:96) = Comck(z(cid:96); w(cid:96)) and (I(cid:96))x−z(cid:96)·
A(cid:96) = Comck(0; v(cid:96)) holds. Indeed, by additively homomorphic
property of the commitment scheme, (I(cid:96))x·B(cid:96) = Comck(i(cid:96)·x+
β(cid:96); α(cid:96)·x+γ(cid:96)) and (I(cid:96))x−z(cid:96)·A(cid:96) = Comck(i(cid:96)·(x−z(cid:96))+i(cid:96)·β(cid:96); α(cid:96)·
(x− z(cid:96)) + δ(cid:96)) = Comck(i(cid:96)(1− i(cid:96))· x; v(cid:96)). Since i(cid:96)(1− i(cid:96)) = 0
when i(cid:96) ∈ {0, 1}, we have (I(cid:96))x−z(cid:96) · A(cid:96) = Comck(0; v(cid:96)).
(cid:96)=1 z(cid:96),j(cid:96) is a polynomial
where x is the veriﬁer’s challenge. Therefore, it is easy to see
pj,kxk
in the form of
pj(x) = ei,jxlog n +
Moreover, for each j ∈ [0, n− 1],(cid:81)log n
log n−1(cid:88)
z(cid:96),j(cid:96); 0)(cid:1)yj
(cid:0)(Cj)xlog n · Encpk(− log n(cid:89)
n−1(cid:89)
· log n−1(cid:89)
n−1(cid:88)
(cid:0)ei,j · xlog n − pj(x) +
(pj,(cid:96) · yj); R(cid:96))x(cid:96)
(cid:96)=0
= Encpk
Encpk(
(cid:16) n−1(cid:88)
k=0
j=0
j=0
(cid:96)=1
j=0
= Encpk(0; R) .
log n−1(cid:88)
pj,(cid:96) · x(cid:96)(cid:1) · yj; R
(cid:17)
(cid:96)=0
For soundness, ﬁrst of all, the Sigma protocols for com-
mitments of i(cid:96), (cid:96) ∈ [log n] is specially sound, i.e., given two
transactions with the same {I(cid:96), B(cid:96), A(cid:96)}log n
(cid:96)=1 and two different
x and {z(cid:96), w(cid:96), v(cid:96)}log n
(cid:96)=1 , there exists a PPT extractor that can
output the corresponding witness i(cid:96) ∈ {0, 1}.
11
Unit vector ZK argument
CRS: the commitment key ck
Statement: the public key pk and the ciphertexts C0 := Encpk(ei,0; r0), . . . , Cn−1 := Encpk(ei,n−1; rn−1)
Witness: the unit vector e(n)
Protocol:
i ∈ {0, 1}n and the randomness r0, . . . , rn−1 ∈ Zp
The prover P , for (cid:96) = 1, . . . , log n, does:
Pick random α(cid:96), β(cid:96), γ(cid:96), δ(cid:96) ← Zp;
Compute I(cid:96) := Comck(i(cid:96); α(cid:96)), B(cid:96) := Comck(β(cid:96); γ(cid:96)) and A(cid:96) := Comck(i(cid:96) · β(cid:96); δ(cid:96));
◦
◦
P → V : {I(cid:96), B(cid:96), A(cid:96)}log n
(cid:96)=1 ;
V → P : Random y ← {0, 1}λ;
The prover P for (cid:96) = 0, . . . , log n − 1, does:
Pick random R(cid:96) ← Zp and compute D(cid:96) := Encpk
(cid:96)=0
P → V : {D(cid:96)}log n−1
V → P : Random x ← {0, 1}λ;
The prover P does the following:
Compute R :=(cid:80)n−1
;
j=0 (rj · xlog n · yj ) +(cid:80)log n−1
◦
◦
◦
(cid:0)(cid:80)n−1
j=0 (pj,(cid:96) · yj ); R(cid:96)
(cid:1)
For (cid:96) = 1, . . . , log n, compute z(cid:96) := i(cid:96) · x + β(cid:96), w(cid:96) := α(cid:96) · x + γ(cid:96), and v(cid:96) := α(cid:96)(x − z(cid:96)) + δ(cid:96);
(cid:96)=0
(R(cid:96) · x(cid:96));
•
•
•
•
•
•
•
•
•
•
P → V : R and {z(cid:96), w(cid:96), v(cid:96)}log n
(cid:96)=1
Veriﬁcation:
Check the followings:
For (cid:96) = 1, . . . , log n, does:
◦
◦
• (cid:81)n−1
j=0
(I(cid:96))x · B(cid:96) = Comck(z(cid:96); w(cid:96))
(I(cid:96))x−z(cid:96) · A(cid:96) = Comck(0; v(cid:96))
(cid:0)(Cj )xlog n · Encpk(−(cid:81)log n
(cid:96)=0
(cid:96)=1 z(cid:96),j(cid:96) ; 0)(cid:1)yj ·(cid:81)log n−1
(cid:96)=1 z(cid:96),j(cid:96); 0)(cid:1)yj
(cid:0)(Cj)xlog n ·
(cid:96)=0
j=0
(cid:0)(Cj)xlog n · Encpk(−(cid:81)log n
lemma, (cid:81)n−1
builds a degree-log n polynomial w.r.t. x in the plaintext.
(D(cid:96))x(cid:96) encrypts a degree-(log n − 1) poly-
nomial w.r.t. x. Since x is randomly sampled after D(cid:96)
is committed, Schwartz-Zippel
Moreover, (cid:81)n−1
While, (cid:81)log n−1
(cid:96)=1 z(cid:96),j(cid:96) ; 0)(cid:1)yj ·(cid:81)log n−1
Encpk(−(cid:81)log n
polynomial evaluation is 0. Therefore, Q(y) :=(cid:80)n−1
(D(cid:96))x(cid:96) encrypts a zero
(cid:81)log n
polynomial w.r.t. x with overwhelming probability if the
j=0 (ei,j −
we have for j ∈ [0, n− 1], ei,j =(cid:81)log n
(cid:96)=1 i(cid:96),j(cid:96))· yj = 0 with overwhelming probability. Similarly,
by Schwartz-Zippel lemma, Q(y) is a zero polynomial; hence,
(cid:96)=1 i(cid:96),j(cid:96) with overwhelm-
j=0
(cid:96)=0
ing probability.
In terms of special honest veriﬁer zero-knowledge, we now
construct a simulator Sim that takes input as the statement
(C0, . . . , Cn−1) and the given challenges x, y ∈ {0, 1}λ, and
it outputs a simulated transcript whose distribution is indistin-
guishable from the real one. More speciﬁcally, Sim ﬁrst ran-
domly picks i(cid:96) ← {0, 1} and α(cid:96), β(cid:96), γ(cid:96), δ(cid:96) ← Zp, (cid:96) ∈ [log n].
It then computes {I(cid:96), B(cid:96), A(cid:96)}log n
(cid:96)=1 accord-
ing to the protocol description. For (cid:96) ∈ {1, . . . , log n − 1},
it then picks random U(cid:96), R(cid:96) ← Zp and computes D(cid:96) :=
Encpk(U(cid:96); R(cid:96)). It then randomly picks R ← Zp, computes
(cid:96)=1 z(cid:96),j(cid:96) ; 0)(cid:1)yj ·(cid:81)log n−1
(cid:0)(Cj )xlog n Encpk(−(cid:81)log n
(cid:96)=1 and {z(cid:96), w(cid:96), v(cid:96)}log n
Encpk(0; R)
(D(cid:96))x(cid:96)
D0 :=
(cid:96)=1
After that, Sim outputs the simulated transcript as
j=0
(cid:81)n−1
(cid:16){I(cid:96), B(cid:96), A(cid:96)}log n
This concludes our proof.
(cid:96)=1 , y,{D(cid:96)}log n−1
(cid:96)=0
, x,{z(cid:96), w(cid:96), v(cid:96)}log n
(cid:96)=1
(cid:17)
.
12
(D(cid:96))x(cid:96)
= Encpk(0; R), where zj,1 = zj and zj,0 = x − zj.
Fig. 9: Unit vector ZK argument
VI. SECURITY AYALYSIS
The security of the treasury voting protocol is analysed in
the UC framework. We provide Theorem 2 and its proof can
be found in the full version.
VOTE
Theorem 2: Let k, n, m = poly(λ) and t > k/2. Protocol
described in Fig. 7 UC-realizes F t,k,m,n
in the
DKG}-hybrid world against static corruption under
Πt,k,n,m
{FLEDGER,F t,k
the DDH assumption.
VOTE
VII.
IMPLEMENTATION AND PERFORMANCE
Prototyping. The proposed treasury system was implemented
as a fully functional cryptocurrency prototype. As an under-
lying framework we used Scorex 2.0 [1] that provides basic
blockchain functionality. It is a ﬂexible modular framework
designed particularly for fast prototyping with a rich set
of already implemented functionalities such as asynchronous
peer-to-peer network layer, built-in blockchain support with
pluggable and extendable consensus module, simple transac-
tions layer, JSON API for accessing the running node, etc.
As treasury requires basic blockchain functions, we decided to
select TwinsCoin [15] example and extend it with the proposed
treasury system. Treasury integration required modiﬁcation of
the existed transactions structure and block validation rules,
as well as introduction of new modules for keeping treasury
state and managing transactions forging. All cryptographic
protocols related to the voting procedure were implemented
in a separate library to simplify code maintanance. It
is
also possible to reuse it not only in the blockchain systems
but also as a standalone voting system. The implementation
uses BouncyCastle library (ver.1.58) that provides needed
elliptic curve math. Some operations in the ﬁnite ﬁeld were
Fig. 10: DKG protocol execution time depending on the number of
committee members
Fig. 11: Total size of the DKG protocol messages to be sent over
the peer-to-peer network depending on the number of committee
members
implemented with help of the BigInteger class from the Java
Core. Subprotocols of the developed system were implemented
exactly as they are described in the paper without any protocol-
level optimizations.
Test network. For testing developed treasury prototype in real
environment a local network of 12 full nodes was launched. It
successfully worked for several days with dozens of epochs.
The treasury network had 9 voters with different amount of
stake, 3 experts, 12 candidates to the voting committee (10 of
them were selected to participate). The numbers of proposals
varied from 1 to 7. Treasury cycle had 780 blocks. Underlying
blockchain with TwinsCoin consensus had block generation
time of 10 seconds (or approximately 4.5 hours treasury cycle).