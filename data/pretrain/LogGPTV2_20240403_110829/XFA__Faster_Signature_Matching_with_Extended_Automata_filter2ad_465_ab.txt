g
RY
h
RZ
Figure 1. The DFA recognizing both .*ab.*cd and .*ef.*gh has state space blowup. For simplic-
ity, we do not show some less important transitions.
if (bit){
accept(sig1);
}
bit=true;
[^ac]
bit=false
P
c
b
a
Q
+
bit=true;
[^eg]
dR
S
bit=false
W
g
if (bit){
accept(sig2);
}
X
f
e
h
Y
Z
bit1=true;
[^aceg]
PW
bit1=false
bit2=false
=
bit2=true;
b
f
c
g
a
e
QW
RW
PY
PX
if (bit1){
accept(sig1);
}
d
h
SW
PZ
if (bit2){
accept(sig2);
}
Figure 2. The XFA recognizing both .*ab.*cd and .*ef.*gh without state space blowup. For
simplicity, we do not show some less important transitions.
The combined XFA for the entire signature set uses n
bits and O(nl) states. Thus by adding n bits of scratch
memory we obtain a combined XFA approximately 2n
times smaller than the combined DFA. The initialization
time goes up from O(1) to O(n) and, assuming that the
strings in the signatures are not sufﬁxes of each other,
only a small constant is added to the worst-case per byte
processing cost as at most one bit is updated for any
given byte from the input.
Note that the presence of scratch memory has no
inﬂuence on the shape of the underlying automaton for
the combined XFA: the same process for combining
DFAs is used for combining the underlying automata
of XFAs.
In reality, the combined XFA (Figure 2) is
smaller than the combined DFA (Figure 1) because the
automata structure in the source XFAs is different than
for DFAs. When combined, these XFAs have benign in-
teractions, just as with DFAs limited to string matching.
XFAs can provide large reductions in the number
of states even when recognizing individual signatures.
Figures 3 and 4 show the DFA and XFA, respectively,
recognizing the language deﬁned by .{n} which con-
sists of all strings of length n. Although no NIDS sig-
.q0
Ȉ
.q1
Ȉ
…
Ȉ
.qn
Ȉ
qn+1
Ȉ
Figure 3. DFA recognizing .{n}.
counter=0
q0
Ȉ
If (counter==n) { accept(); }
counter++;
Figure 4. XFA recognizing .{n}.
natures have this exact form, signatures detecting buffer
overﬂows use sequences of states similar to those in
Figure 3 to count the number of characters that follow
a given keyword. The minimal DFA for .{n} needs
n + 2 states, whereas the XFA uses a single state and
a counter. This counter is initialized to 0 and is incre-
mented on every transition, signaling acceptance only
when the value is n. Increment is deﬁned so that once
the counter reaches n + 1 it remains at n + 1. Thus the
counter needs to take only n + 2 values, requiring only
190
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
Security 
expert 
writes 
signature
regular 
expression
XFAs for other 
signatures
Traffic
Alerts
Annotate 
signature
(Section 4.1)
annotated 
regex
Compile to 
XFA
(Section 4.2)
XFA
Combine 
XFAs
(Section 4.3)
Combined 
XFA
Match traffic 
against XFA
(Section 5)
Figure 5. Lifecycle of signatures in a NIDS using XFAs.
k = (cid:3)log2
(n + 2)(cid:4) bits of scratch memory. By adding
these k bits we reduce the number of states by a factor
of close to 2k. Measuring run time in bit operations, the
initialization cost and per-byte processing increase from
O(1) to O(k). If we count instructions, a small constant
is added to both initialization and per byte processing.
3.2. Using XFAs in a NIDS
Figure 5 depicts the steps involved in constructing
XFAs and using them in a NIDS. Crafting NIDS sig-
natures themselves is outside the scope of this paper
since our proposal changes only the representation of
signatures for matching, not the underlying semantics.
Section 4.1 discusses how we extend regular expres-
sions to indicate to the compiler when to use scratch
memory operations. Section 4.2 outlines the compiler
steps that convert an annotated regular expression into
an XFA that recognizes the language deﬁned by the reg-
ular expression. Section 4.3 brieﬂy describes how indi-
vidual XFAs are combined into a single XFA that rec-
ognizes all signatures simultaneously. In our feasibility
study (Section 5) we use a signature set from the open-
source Snort NIDS [20] to compare the performance
of matching with an XFA against the performance of
matching with DFAs.
4. Building XFAs from regular expressions
4.1. Annotating regular expressions
Transforming a regular expression into an XFA re-
quires striking a balance between using states and tran-
sitions on one hand and executing instructions over
scratch memory on the other. At one extreme we can
produce a (possibly large) DFA which uses no scratch
memory and at the other extreme a (possibly slow) pro-
gram that does not rely on state information at all. There
are regular expressions for which the XFA we want to
build lies at one of these extremes. For expressions
such as .*S, where S is a string, a simple DFA with
no scratch memory is ideal. At the other extreme, the
example from Figure 4 which recognizes .{n} gives an
XFA that is effectively just a program: there is a sin-
gle state which does not inﬂuence at all how the scratch
memory is updated or when acceptance happens. Dur-
ing construction, we use annotations to control where
the resulting XFA lies along this spectrum.
Two types of constructs cause our compiler to add
scratch memory objects: parallel concatenation, de-
noted with the symbol ‘#’, adds a bit to the nondeter-
ministic form of the scratch memory, and integer ranges
‘{m,n}’) add a counter. Parallel concatenation
(e.g.
introduces a bit and changes the shape of the automa-
ton, but it has the same semantics with respect to the
language recognized as standard concatenation. Fortu-
nately, integer ranges, a form of syntactic sugar, are al-
ready present in the signatures wherever appropriate (al-
though we do re-interpret them to introduce a counter).
Thus we only need to decide where to use the parallel
concatenation operator ‘#’.
In our current prototype,
this is a partly manual step.
We use the parallel concatenation operator to
“break up” a regular expression, or parts of one, into
string-like subexpressions that are individually suit-
able for string matching. For example, we annotate
.*S1.*S2, where S1 and S2 are strings, as .*S1#.*S2.
Put another way, we add the ‘#’ operator right before
subexpressions such as ‘.*’ and [ˆ\n]{300} that re-
peat characters from either the whole input alphabet or a
large subset thereof. Table 1 shows examples of regular
expressions representing actual NIDS signatures from
our test set annotated with ‘#’. Note that for signature
2667 we have not used any parallel concatenation as
the expression is sufﬁciently string-like. This signature
will be compiled to an XFA without any scratch mem-
ory (so it is actually a DFA). For signature 3466, we
do not insert a ‘#’ in front of \s* because the charac-
ter class \s contains few characters (the white spaces).
For signatures such as 1735 which is a union of sub-
expressions we just apply the rules for inserting ‘#’ to
the sub-expressions of the union separately. We do not
insert a parallel concatenation operator in front of the
.* at the beginning of each of these sub-expressions (it
would actually be syntactically invalid).
4.2. Compiling to an XFA
Our XFA compiler takes annotated regular expres-
sions and transforms them into deterministic XFAs. The
191
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
Num.
2667
3194
2411
3466
1735
Signature
.*[/\\]ping\.asp
.*bat"#.*&
.*\nDESCRIBE\s#[ˆ\n]{300}
.*\nAuthorization:\s*Basic\s#[ˆ\n]{200}
(.*new XMLHttpRequest#.*file://)|(.*file://#.*new XMLHttpRequest)
Table 1. Snort signatures for web trafﬁc annotated with the parallel concatenation operator ‘#’.
stages are the same as for traditional DFA compilers us-
ing the standard Thompson construction [30]: parsing
the regular expression, building a non-deterministic au-
tomaton through a bottom-up traversal of the parse tree,
ε-elimination, determinization, and minimization. We
modify each of these steps to handle the scratch mem-
ory and implement new cases that handle the annota-
tions added to regular expressions.
4.2.1. Deﬁnitions. Formally, we represent the scratch
memory used by XFAs as a ﬁnite data domain D. Any
conﬁguration of the scratch memory that is possible
during matching is represented as a data value d ∈ D.
With each transition we associate an update function
U : D → D (or for non-deterministic XFAs an update
relation U ⊆ D × D) which speciﬁes how d is to be
updated. For the common special case of the data do-
main not being updated on a transition, we just asso-
ciate the identity function with the transition. Since we
extend the automaton with the data value, the current
state of the computation is no longer fully described
by the current state of the automaton q ∈ Q, but by
what we call the current conﬁguration of the automa-
ton, (q,d) ∈ Q× D. Similarly, the acceptance condition
is not deﬁned as a subset of states, but as a subset of
conﬁgurations F ⊆ Q× D. Note that our deﬁnition of
XFAs below generalizes the standard DFA deﬁnition.
Deﬁnition 1 A (deterministic) extended ﬁnite automa-
is a 7-tuple (Q,D,Σ,δ,Uδ,(q0,d0),F),
ton (XFA)
where
• Q is the set of states, Σ is the set of inputs (input
alphabet), δ : Q× Σ → Q is the transition function,
• D is the ﬁnite set of values in the data domain,
• Uδ : Q×Σ×D → D is the per transition update func-
tion which deﬁnes how the data value is updated on
every transition,
• (q0,d0) is the initial conﬁguration which consists of
an initial state q0 and an initial data value d0,
• and F ⊆ Q× D is the set of accepting conﬁgurations.
Nondeterministic XFAs differ from deterministic
XFAs in a number of important ways. Transitions can
be nondeterministic, epsilon (ε) transitions are allowed,
and per-transition update functions are generalized to
update relations which can take a single data domain
value to multiple values. Also, a set of initial conﬁg-
urations QD0 replaces the single initial conﬁguration
(q0,d0). We deﬁne nondeterministic XFAs as follows.
Deﬁnition 2 A nondeterministic extended ﬁnite au-
tomaton (NXFA) is a 7-tuple (Q,D,Σ,δ,Uδ,QD0,F),
where
• Q is the set of states, Σ is the set of inputs (input al-
phabet), δ⊆ Q× (Σ∪{ε})× Q is the nondetermin-
istic relation describing the allowed transitions,
• D is the ﬁnite set of values in the data domain,
• Uδ : δ→ 2D×D is the nondeterministic update func-
tion (or update relation) which deﬁnes how the data
value is updated on every transition,
• QD0 ⊆ Q × D is the set of initial conﬁgurations of
the NXFA,
• and F ⊆ Q× D is the set of accepting conﬁgurations.
During the construction procedure, we represent D
explicitly as a set of integers, the per transition update
functions as unstructured sets of pairs (di,d f ), and F as
a set of conﬁgurations. These are intermediate repre-
sentations. The ﬁnal XFA that performs the signature
matching uses a much more compact representation,
where D is not represented explicitly and small pro-
grams are associated with states and transitions. Thus,
in the end, the amount of memory required is not much
larger than that for a DFA based on Q and δ. We re-
fer to these data domains used by the ﬁnal XFAs dur-
ing matching as efﬁciently implementable data domains
(EIDDs). We deﬁne them formally in Section 4.2.4.
4.2.2. From parse trees to NXFAs. Our procedure for
constructing an NXFA from the parse tree extends the
traditional method with provisions for manipulating the
data domains and the data-dependent components of the
NXFAs. We add two new constructs which extend the
data domain: the parallel concatenation construct adds
a bit and integer range constructs add a counter. For
brevity, we only present simpliﬁed versions of these
constructs that build on NFAs corresponding to the sub-
expressions they apply to.
192
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
bit=0
q01
NFA for expr1
NFA for expr1
qf1
bit=1;
İ
if (bit==1){
accept();
}
İ
q+
q02
NFA for expr2
NFA for expr2
qf2
İ
Ȉ
Figure 6. Simpliﬁed NXFA construction step for
parallel concatenation expr1#expr2.
counter=0
q+
if (counter>=m && counter<=n) {
accept();
}
İ
İ
counter++;
q0
NFA for expr1
NFA for expr1
qf
Figure 7. Simpliﬁed NXFA construction step for
(expr1){m,n} .
Figure 6 shows a simpliﬁed version of the construc-
tion step triggered by the parallel concatenation opera-
tor expr1#expr2, where q01 and q f 1 are the start and ﬁ-
nal states for the NFA that results from processing expr1
and q02 and q f 2 are the same for the NFA recognizing
expr2. Acceptance in q f 2 is conditional on the bit be-
ing set to 1, but it is initialized to 0 and no transition
changes it except the ε-transition from q f 1 to q02. Since
there are no transitions from the states of the second au-
tomaton to the states of the ﬁrst, every accepting input
string must map to a path from q01 to q f 1 through the
ﬁrst NFA, followed by the transition from q f 1 to q02,
followed by a path from q02 to q f 2 through the second
NFA. Thus the NXFA in Figure 6 recognizes the lan-
guage expr1expr2. Note that structurally it is similar to
the NFA recognizing expr1|(.*expr2) .
Figure 7 shows a simpliﬁed version of the con-
struction step triggered by an integer range of the form
(expr1){m,n}. q0 and q f are the start and accepting
states of the NFA that results from processing expr1.
Since acceptance in q+ is conditional on the counter
being between m and n, and the counter is incremented
by the ε-transition from q f to q+, the non-deterministic
XFA in Figure 7 recognizes the correct language. Note