事件数监控 字段统计监控 连续统计监控 基线对比监控统统转换为SPL统计监控。
比如我们使用的事件数告警，其实就是关键字告警，但是我们也可以转换为spl统计监控：
ERROR \| stats count() as ct by appname,hostname,msg。
阈值就可以修改成ct\>0就触发告警。其他的告警类型的也都很类似，不再举例。
统一换成spl统计
告警的的好处就是好修改，尤其是对告警模板，而且还是输出要自定义字段的告警模板非常有用，统一使用spl统计告警，不用考虑太多额外的事情。
## 监控类型
以下所有内容都必须借由日志易中SPL语句来实现。
### 事件数监控（关键字告警）
基于搜索结果数量的告警，满足即告警。此告警类型很类似我们平常所说的关键字告警。
适用场景：
-   简单的关键字告警，比如 ERROR；
-   简单某一事件类型告警，ngingx.status:500。
示例：
![图片包含 屏幕截图
描述已自动生成](media/image7.png){width="4.916691819772528in"
height="3.8486439195100615in"}
输出内容：
![图片包含 屏幕截图
描述已自动生成](media/image8.png){width="4.073611111111111in"
height="3.3916666666666666in"}
### 字段统计监控
基于搜索出某个字段的数据量告警，和上面的事件数功能有些重叠。
适用场景：
-   需要对关键字或者字段进行统计时。
示例：
![图片包含 屏幕截图
描述已自动生成](media/image9.png){width="5.763888888888889in"
height="6.054166666666666in"}
告警结果：
![](media/image10.png){width="5.151388888888889in"
height="0.8451388888888889in"}
### 连续统计监控
当某个告警条件在某个时间段内连续触发多次，立即进行告警。
和字段统计告警类似，这种类型可以理解为在字段统计告警上的细化。针对触发次数的细化。
适用场景：
-   字段的告警阈值需要满足一定次数才可以；
-   在跑批业务中可能会用到，出现一次或者几次失误都没有问题，但是达到10次就需要告警通知。
示例：
apache 状态码在10分钟内大于400并且触发有两次大于400才会触发。
![图片包含 屏幕截图
描述已自动生成](media/image11.png){width="5.763888888888889in"
height="4.726388888888889in"}
### 基线对比监控
设置一个基准线，然后结果与基准线进行对比，基准线的时间可调控（基准线内统计的数值会变动）。
能够知晓这今天的状态与其他时间相比是否正常，比如业务的平均耗时、业务失败次数等。
适用场景：
需要同期对比时。
示例：昨天与今天天apache.status大于400的情况对比，如果超过基线的50%就告警，基线是以过去一天的数据为准。
![图片包含 屏幕截图
描述已自动生成](media/image12.png){width="5.765884733158355in"
height="5.940944881889764in"}
### SPL统计监控
spl语句功能很强大，上面所有的告警监控功能，都可以通过spl语句使用spl统计监控功能实现，可以说spl是集大成者。而且后面提到的模板最好使用SPL来做，因为可以最大化的定制输出内容、样式。
适用场景：
所有的监控都适合。
示例：
![图片包含 屏幕截图
描述已自动生成](media/image13.png){width="5.763888888888889in"
height="6.905555555555556in"}
## 执行计划
目前系统支持两种写法，较简单是定时，复杂的是 crontab。
### 定时
定时操作起来比较简单，但是没有办法精确到某一天，属于比较粗糙的那一类，而且这个定时需要后台模块的配合，怎么理解呢？就是后台轮询的时间要我们配置定时的时间。如果发现轮询的时间大于我们配置的定时时间，这种情况下会出现告警漏报。
![图片包含 屏幕截图
描述已自动生成](media/image14.png){width="4.347222222222222in"
height="1.6388888888888888in"}
### crontab
crontab是比较精细的那种，可以精确到秒级，（虽然叫crontab，但是和Linux中还是有区别的，Linux的只能精确到分钟）。
![图片包含 屏幕截图
描述已自动生成](media/image15.png){width="5.763888888888889in"
height="2.188888888888889in"}
下面给出一些实例，这样就不用去多想了：
1\. 普通用法：
\*/5 \* \* \* \* ? 每隔5秒执行一次
0 \*/1 \* \* \* ? 每隔1分钟执行一次
0 0 5-15 \* \* ? 每天5-15点整点触发
0 0/3 \* \* \* ? 每三分钟触发一次
0 0-5 14 \* \* ? 在每天下午2点到下午2:05期间的每1分钟触发 
0 0/5 14 \* \* ? 在每天下午2点到下午2:55期间的每5分钟触发
0 0/5 14,18 \* \* ?
在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发
0 0/30 9-17 \* \* ? 朝九晚五工作时间内每半小时
0 0 10,14,16 \* \* ? 每天上午10点，下午2点，4点 
30 \* \* \* \* ? 每半分钟触发任务
30 10 \* \* \* ? 每小时的10分30秒触发任务
30 10 1 \* \* ? 每天1点10分30秒触发任务
15,30,45 \* \* \* \* ? 每15秒，30秒，45秒时触发任务
15-45 \* \* \* \* ? 15到45秒内，每秒都触发任务
15/5 \* \* \* \* ? 每分钟的每15秒开始触发，每隔5秒触发一次
15-30/5 \* \* \* \* ? 每分钟的15秒到30秒之间开始触发，每隔5秒触发一次
0 0/3 \* \* \* ? 每小时的第0分0秒开始，每三分钟触发一次
2、进阶用法之星期设置：
0 0 12 ? \* WED 表示每个星期三中午12点
0 0 17 ? \* TUES,THUR,SAT 每周二、四、六下午五点
0 10,44 14 ? 3 WED 每年三月的星期三的下午2:10和2:44触发 
0 15 10 ? \* MON-FRI 周一至周五的上午10:15触发
0 15 10 ? \* MON-FRI 星期一到星期五的10点15分0秒触发任务
3、进阶用法之月份设置：
0 0 23 L \* ? 每月最后一天23点执行一次
0 15 10 L \* ? 每月最后一日的上午10:15触发 
0 15 10 ? \* 6L 每月的最后一个星期五上午10:15触发 
0 15 10 ? \* 6#3 每月的第三个星期五上午10:15触发
30 10 1 20 \* ? 每月20号1点10分30秒触发任务
0 15 10 L \* ? 每个月最后一天的10点15分0秒触发任务
0 15 10 LW \* ? 每个月最后一个工作日的10点15分0秒触发任务
0 15 10 ? \* 5L 每个月最后一个星期四的10点15分0秒触发任务
0 15 10 ? \* 5#3 每个月第三周的星期四的10点15分0秒触发任务
注意事项：
-   无论是使用定时还是crontab，都需要对告警进行合理的划分，不能将告警都集中在某一时刻，否则对后端有太大的压力；
-   告警建议5分钟以上；
-   建议每5个告警使用一个时刻；
-   如果超过5个告警，建议至少30s以上执行另一个告警。
如果使用的定时进行配置告警，那么需要根据后台执行定时任务的频率来确定，比如后台每个2分钟去数据库获取告警任务，那么我们只能配置2、4、6...等整数倍时间。
## 设备切分
问题：
一个交换机有20个接口，目前出现问题，有10个接口宕机，那么此时告警应该包含10个接口，在下一个告警检测时刻，发现有5个接口已经恢复正常，我们需要告警恢复通知来告知我们有接口恢复，但现在的情况却是没有告警恢复的信息。
原因：
究其原因是因为我们这个告警，将所有接口看成一个事件，当所有的接口恢复的正常的时候，才会发送出告警恢复短信。那要是如果能够恢复一个发送一个就好了，此时设备切分登场。
举例：
主机有100个，如果hostname的数量大于10就进行告警，开启设备切分，然后设定切分字段为hostname,这样在每一次告警执行的时候会以hostname为粒度来进行发送告警。
![图片包含 屏幕截图
描述已自动生成](media/image16.png){width="5.763888888888889in"
height="4.545833333333333in"}
## 扩展搜索
在告警触发之后需要进一步查看哪些数据，比如出现交易耗时的增高，是否是因为机器负载等原因引起的呢，这时可以通过扩展搜索来查看机器的负载等指标。
扩展搜索和前面告警的搜索内容写法一直，都是通过spl语句来获取信息，只不过是在前面触发之后才会执行扩展搜索中的语句。此处只进行搜索数据使用，无其他触发操作功能（执行自定义脚本）。
扩展搜索支持效果插图，即指标不仅仅是单调的文字，表格，而是一个更加丰富的趋势图。（趋势图只能使用timechart和chart指令来做）
实例：\*\| timechart span=1m count() as ct by appname
![电脑屏幕截图
描述已自动生成](media/image17.png){width="5.763888888888889in"
height="1.6548611111111111in"}
![图片包含 屏幕截图
描述已自动生成](media/image18.png){width="4.513888888888889in"
height="1.1388888888888888in"}
注意：
timechart和chart在预览的时候展现不了图片，只会在邮件中进行查看。如果需要在预览中进行查看，需要对告警插件以及模板进行修改。
### 固定键值
固定键值，这个比较有意思，可以添加额外的内容，在告警信息中呈现，这种添加固定键值对，可以减轻开发工作，如果客户需要添加一些额外的配置话，可以从这里进行配置，不需要单独在告警插件进行开发。
![图片包含 屏幕截图
描述已自动生成](media/image19.png){width="2.888888888888889in"
height="0.625in"}
### 告警抑制
告警抑制大部分的告警都会带的功能，有两个主要目的：防止告警风暴，防止告警疲劳。
告警风暴会导致其他严重的告警没有注意到，进而导致生产事故。
告警疲劳这个也是需要避免产生的，的产生原因基本都是无意义的告警，也可能是在维护期内不用查看。
如果出现上述情况，可以通过设置告警抑制来做，不过这里的告警抑制并不是很完美，最好能够做到告警合并。
![图片包含 屏幕截图
描述已自动生成](media/image20.png){width="4.111111111111111in"
height="0.9486111111111111in"}