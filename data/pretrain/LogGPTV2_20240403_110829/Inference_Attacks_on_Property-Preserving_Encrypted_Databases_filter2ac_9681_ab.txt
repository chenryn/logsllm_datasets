with the problem of de-anonymization. The data was not
de-anonymized nor any attempt was made to do so.
studied formally by Boldyreva, Chenette, Lee and O’Neill
in [12] and Boldyreva, Chenette and O’Neill [13].
In par-
ticular, it was shown in [12] that all (non-interactive) OPE
schemes must leak more than the order. The work of Popa,
Li and Zeldovich [34] describes an interactive protocol for an
OPE-like functionality that leaks at most the order. The ef-
ﬁciency of this protocol was later improved by Kerschbaum
and Schroepfer [29].
In [14], Boneh, Lewi, Raykova, Sa-
hai, Zhandry and Zimmerman construct a (non-interactive)
order-revealing encryption (ORE) scheme that leaks at most
the order. The diﬀerence between OPE and ORE is that in
the latter ciphertexts can be compared using an arbitrary
algorithm whereas in OPE it must be the standard compar-
ison operation.
The CryptDB system [35] was the ﬁrst to support a large
fraction of SQL on encrypted data. The CryptDB-design
was later adopted by the Cipherbase [10] and Encrypted
BigQuery systems [2]. Akin and Sunar [8] describe attacks
that enable a malicious database administrator to recover
plaintexts from CryptDB through a combination of passive
monitoring and active tampering with the EDB.
Frequency analysis was ﬁrst described by the Arab philoso-
pher and mathematician al-Kindi in the ninth century [9].
Techniques for recovering plaintext encrypted with substi-
tution ciphers using language statistics are well-known (see
for example pp.245–250 of [32]). Brekne, ˆArnes and Øslebø
[16] describe frequency attacks for recovering IP addresses
anonymized under a preﬁx-preserving encryption scheme [38].
Islam et al. [25] described the ﬁrst inference attack against
an encrypted search solution. This attack, referred to as
the IKK attack, exploits the access pattern leakage of SSE
constructions together with auxiliary information about the
frequencies of keyword pairs and knowledge of a subset of
client queries (in plaintext) to recover information about the
remaining queries. In comparison, the attacks we consider
here: (1) recover the database, as opposed to queries; and (2)
require no knowledge of any queries (neither in plaintext nor
encrypted). Furthermore, a recent study by Cash, Grubbs,
Perry and Ristenpart [18] shows that the accuracy of the
IKK attack is so low that it is not usable in practice (unless
the adversary already knows most of the underlying data).
In contrast, the attacks considered in this work are highly-
accurate and very eﬃcient. The fact that our attacks are
more powerful than the IKK attack is natural since PPE
schemes leak considerably more than SSE schemes.
Sanamrad, Braun, Kossman and Venkatesan [36] also con-
sider the security of OPE schemes in the context of en-
crypted databases. They propose a set of security deﬁni-
tions and discuss previously-known attacks (e.g., frequency
analysis and sorting). Unlike standard security deﬁnitions,
however, the security notions proposed in [36] are attack-
speciﬁc (e.g., they deﬁne security only against frequency
analysis) and guarantee only one-wayness; as opposed to
standard cryptographic notions which guarantee that partial
information is protected. Finally, [36] also proposes deter-
ministic and probabilistic OPE variants. The deterministic
variant is still vulnerable to our attacks (albeit requiring
larger encrypted columns).
There is an extensive literature on OPE variants including
probabilistic OPE, modular OPE, etc. [19, 22, 26, 27, 31, 39].
As far as we know, none of these constructions are used in
any EDB system. We leave it as future work to assess the
eﬃcacy of our attacks against these variants.
6463. PRELIMINARIES
Relational databases. A relational database is a collec-
tion of tables where each row corresponds to an entity (e.g.,
a customer or an employee) and each column corresponds
to an attribute (e.g., age, height, salary). For any given
attribute, we refer to the set of all possible values that it
can take as its space. The attribute space of a column is
the space of that column’s attribute. If a column supports
equality or range queries, then we refer to it as an equality
or range column. The structured query language (SQL) is a
special-purpose language for querying relational databases.
Datasets. A dataset d = (d1, . . . , dn) is a sequence of
elements from a universe D. We assume, without loss of
generality, that every space D is totally ordered. We view
the histogram of a dataset d as a |D|-dimensional vector over
N≥0 with, at position i, the number of times the ith element
of D appears in d. We denote by Hist(d) the operation that
computes the histogram of a dataset d. The cumulative dis-
tribution function (CDF) of a dataset d is a |D|-dimensional
vector over N≥0 with, at position i, the number of times
the ﬁrst through ith elements of D that appear in d. We
denote by CDF(d) the operation that computes the CDF of
a dataset d. The CDF of d is the vector f such that for
j=1 hj, where h = (h1, . . . , hn) is the
all i ∈ [n], fi = (cid:80)i
histogram of d.
We denote by Unique(d) the dataset that results from re-
moving all duplicates in d (i.e., from keeping only the ﬁrst
occurrence of every element in d). The rank of an element
d ∈ D in a dataset d is the position of its ﬁrst occurrence in
d if d ∈ d and 0 if d (cid:54)∈ d. We denote the rank of d in d by
Rankd(d).
We will often need to sort datasets. The result of sorting
d by value is the sequence d(cid:48) = (di1 , . . . , din ) such that
di1  m2 then EncK (m1) >
EncK (m2); if m1 = m2 then EncK (m1) = EncK (m2); and if
m1 < m2 then EncK (m1) < EncK (m2).
Additively homomorphic encryption. colorred A sym-
metric additively homomorphic encryption (AHE) scheme
AHE = (Gen, Enc, Dec) is a symmetric encryption scheme
with the added property that: DecK
m1 + m2, where ⊗ is an operation over the ciphertext space
of AHE and not necessarily addition.
(cid:0)EncK (m1)⊗EncK (m2)(cid:1) =
Join encryption.
The CryptDB system supports two
kinds of Join operations: equi-joins and range-joins. Equi-
joins are supported using a scheme EJOIN = (Gen, Enc, Dec)
which is a combination of DTE and hashing. Range-joins are
supported using an encryption scheme RJOIN = (Gen, Enc, Dec)
based on OPE. We note that after a join query (of either
kind), two joined columns are left encrypted under the same
key.
Searchable encryption. The systems also make use of
searchable encryption scheme SRCH = (Gen, Enc, Token, Dec)
for keyword search operations. In CryptDB, this is instan-
tiated with a variant of the scheme of the scheme of Song,
Wagner and Perrig [37].
Onion encryption. Popa et al.use the term onion to refer
to the composition of encryption schemes. For example,
given two encryption schemes SKE1 = (Gen1, Enc1, Dec1)
and SKE2 = (Gen2, Enc2, Dec2) the SKE1 ◦ SKE2 encryption
of a message m is deﬁned as
(cid:0)Enc2
K2 (m)(cid:1).
ct = Enc1
K1
3.1 PPE-based Encrypted Databases
We recall high-level architecture of EDB systems based
on the CryptDB design. The system is composed of three
entities: an application App, a proxy Prx, and a server
Srv. The application and proxy are trusted while the server
is untrusted. To create an encrypted database EDB from
a database DB, the proxy generates a master secret key
msk and uses it to encrypt each table as follows. First,
an anonymized schema is created where the attributes for
each column are replaced with random labels. The map-
ping between the attributes and their labels is stored at
the proxy. Then, each cell is encrypted using four diﬀer-
ent onions. More speciﬁcally, the following four onions are
used
• Equality onion: encrypts a string s as
(cid:17)(cid:17)
(cid:17)(cid:17)
;
;
(cid:16)
(cid:16)
(cid:0)w(cid:1);
(cid:0)i(cid:1);
(cid:16)
(cid:16)
ct = EncEJOIN
KJ
EncDTE
KD
EncSKE
KS (s)
• Order onion: encrypts a string s as
ct = EncRJOIN
KOJ
EncSKE
• Search onion: encrypts a keyword w as
EncOPE
KO
KS (s)
• Add onion: encrypts an integer i as
ct = EncSRCH
KS
ct = EncAHE
KA
To support queries on encrypted data, the encrypted cells
in the EDB are decrypted down to a certain layer. This
process is referred to as peeling in [35] and every cell in a
given column is peeled to the same level. The proxy keeps
track of the layer at which each column is peeled.
To query an encrypted database the application issues a
SQL query that is rewritten by the proxy before being sent to
647the server. In the new query, each column name is replaced
with its random label and each constant is replaced with a
ciphertext determined as a function of the semantics of the
query. More precisely, for each type of operation the proxy
does the following:
• equality: v is replaced with ct = DTE.EncK (v);
• range: v is replaced with ct = OPE.EncK (v);
• search: v is replaced with tk = SRCH.TokenK (v);
• addition: v is replaced with ct = AHE.EncK (v);
• join: v is replaced with ct = EJOIN.EncK (v);
After re-writing the query, the proxy checks the onion
levels of the relevant columns to determine if they need to
be peeled further. If so, it sends the appropriate decryption
keys to the server so that it peel the columns down to the
appropriate layer.
4. THREAT MODEL
An EDB system should protect a database against a va-
riety of threats. In this Section, we describe some of these
threats and propose an adversarial model that captures them.
In deﬁning such a model, we make two things explicit: (1)
the goal of the attack; and (2) the information the adversary
holds when carrying out the attack.
4.1 Adversarial Goals
There are at least two kinds of attacks on EDBs which we
refer to as individual attacks and aggregate attacks.
Individual attacks. In an individual attack, the adversary
is concerned with recovering information about a row in the
database. For example, if the EDB is a medical database
where each row corresponds to a patient, then the goal of
the attack would be to recover information about a speciﬁc
patient, e.g., its age or name.
Aggregate attacks.
In an aggregate attack, the adver-
sary wants to recover statistical information about the entire
database. Again, in the context of a medical database, this
could be information such as the total number of patients
with a particular disease or the number of patients above
a certain age. We note that, depending on the context,
aggregate attacks can be extremely harmful. For example,
hospitals do not disclose the number of cancer patients they
treat so as not to signal anything about the quality of their
cancer treatments.
4.2 Adversarial Information
PPE-based EDBs like [10,35] are designed to protect against
a semi-honest adversary that corrupts the server.
Intu-
itively, this means that the adversary has access to every-
thing the server sees but cannot inﬂuence it—in particular,
it cannot make it deviate from the prescribed protocol. Since
the adversary has complete access to what the server sees,
it holds the encrypted database and can see the queries gen-
erated by the proxy.
Ciphertext-only.
In this work, we focus on a consider-
ably weaker adversary which has access to the encrypted
database but not to the queries. We stress that this is a
much weaker adversary than what is typically considered in
the literature and captures all the threats that database cus-
tomers are typically concerned with. This includes internal
threats like malicious database administrators and employ-
ees, and external threats like hackers, nation states, and
organized crime.
Steady state EDBs. We assume the adversary has access
to the encrypted database in steady state, which means that
the onions of each cell are peeled down to the lowest layer
needed to support the queries generated by the application.
Intuitively, one can think of the steady-state EDB as the
state of the EDB after the application has been running for
a while.
Auxiliary information.
In addition to the encrypted
database, we assume our adversary has access to auxiliary
information about the system and/or the data. Access to
auxiliary information is standard in any practical adversar-
ial model since the adversary can always consult public in-
formation sources to carry out the attack. In particular, we
consider the following sources of auxiliary information:
• application details: the application running on top of