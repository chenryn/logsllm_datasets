Sample Implementation - Application Source Code
Integrity checks often calculate a checksum or hash over selected files. Commonly protected files include
AndroidManifest.xml,
class files *.dex,
native libraries (*.so).
The following sample implementation from the Android Cracking blog calculates a CRC over classes.dex and
compares it to the expected value.
private void crcTest() throws IOException {
boolean modified = false;
// required dex crc value stored as a text string.
// it could be any invisible layout element
long dexCrc = Long.parseLong(Main.MyContext.getString(R.string.dex_crc));
ZipFile zf = new ZipFile(Main.MyContext.getPackageCodePath());
ZipEntry ze = zf.getEntry("classes.dex");
if ( ze.getCrc() != dexCrc ) {
// dex has been modified
modified = true;
}
else {
// dex not tampered with
modified = false;
}
}
Sample Implementation - Storage
When providing integrity on the storage itself, you can either create an HMAC over a given key-value pair (as for the
Android SharedPreferences ) or create an HMAC over a complete file that's provided by the file system.
When using an HMAC, you can use a bouncy castle implementation or the AndroidKeyStore to HMAC the given
content.
Complete the following procedure when generating an HMAC with BouncyCastle:
1. Make sure BouncyCastle or SpongyCastle is registered as a security provider.
2. Initialize the HMAC with a key (which can be stored in a keystore).
3. Get the byte array of the content that needs an HMAC.
4. Call doFinal on the HMAC with the byte-code.
5. Append the HMAC to the bytearray obtained in step 3.
6. Store the result of step 5.
Complete the following procedure when verifying the HMAC with BouncyCastle:
1. Make sure that BouncyCastle or SpongyCastle is registered as a security provider.
2. Extract the message and the HMAC-bytes as separate arrays.
3. Repeat steps 1-4 of the procedure for generating an HMAC.
4. Compare the extracted HMAC-bytes to the result of step 3.
When generating the HMAC based on the Android Keystore, then it is best to only do this for Android 6 and higher.
The following is a convenient HMAC implementation without AndroidKeyStore :
public enum HMACWrapper {
HMAC_512("HMac-SHA512"), //please note that this is the spec for the BC provider
HMAC_256("HMac-SHA256");
316
Android Anti-Reversing Defenses
private final String algorithm;
private HMACWrapper(final String algorithm) {
this.algorithm = algorithm;
}
public Mac createHMAC(final SecretKey key) {
try {
Mac e = Mac.getInstance(this.algorithm, "BC");
SecretKeySpec secret = new SecretKeySpec(key.getKey().getEncoded(), this.algorithm);
e.init(secret);
return e;
} catch (NoSuchProviderException | InvalidKeyException | NoSuchAlgorithmException e) {
//handle them
}
}
public byte[] hmac(byte[] message, SecretKey key) {
Mac mac = this.createHMAC(key);
return mac.doFinal(message);
}
public boolean verify(byte[] messageWithHMAC, SecretKey key) {
Mac mac = this.createHMAC(key);
byte[] checksum = extractChecksum(messageWithHMAC, mac.getMacLength());
byte[] message = extractMessage(messageWithHMAC, mac.getMacLength());
byte[] calculatedChecksum = this.hmac(message, key);
int diff = checksum.length ^ calculatedChecksum.length;
for (int i = 0; i = checksumLength) {
byte[] message = new byte[body.length - checksumLength];
System.arraycopy(body, 0, message, 0, message.length);
return message;
} else {
return new byte[0];
}
}
private static byte[] extractChecksum(byte[] body, int checksumLength) {
if (body.length >= checksumLength) {
byte[] checksum = new byte[checksumLength];
System.arraycopy(body, body.length - checksumLength, checksum, 0, checksumLength);
return checksum;
} else {
return new byte[0];
}
}
static {
Security.addProvider(new BouncyCastleProvider());
}
}
Another way to provide integrity is to sign the byte array you obtained and add the signature to the original byte array.
317
Android Anti-Reversing Defenses
Bypassing File Integrity Checks
Bypassing the application-source integrity checks
1. Patch the anti-debugging functionality. Disable the unwanted behavior by simply overwriting the associated byte-
code or native code with NOP instructions.
2. Use Frida or Xposed to hook file system APIs on the Java and native layers. Return a handle to the original file
instead of the modified file.
3. Use the kernel module to intercept file-related system calls. When the process attempts to open the modified file,
return a file descriptor for the unmodified version of the file.
Refer to the "Tampering and Reverse Engineering" section for examples of patching, code injection, and kernel
modules.
Bypassing the storage integrity checks
1. Retrieve the data from the device, as described in the section on device binding.
2. Alter the retrieved data and then put it back into storage.
Effectiveness Assessment
For application-source integrity checks
Run the app in an unmodified state and make sure that everything works. Apply simple patches to classes.dex and
any .so libraries in the app package. Re-package and re-sign the app as described in the "Basic Security Testing"
chapter, then run the app. The app should detect the modification and respond in some way. At the very least, the app
should alert the user and/or terminate. Work on bypassing the defenses and answer the following questions:
Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?
How difficult is identifying the anti-debugging code via static and dynamic analysis?
Did you need to write custom code to disable the defenses? How much time did you need?
What is your assessment of the difficulty of bypassing the mechanisms?
For storage integrity checks
An approach similar to that for application-source integrity checks applies. Answer the following questions:
Can the mechanisms be bypassed trivially (e.g., by changing the contents of a file or a key-value)?
How difficult is getting the HMAC key or the asymmetric private key?
Did you need to write custom code to disable the defenses? How much time did you need?
What is your assessment of the difficulty of bypassing the mechanisms?
Testing Reverse Engineering Tools Detection (MSTG-RESILIENCE-4)
Overview
Reverse engineers use a lot of tools, frameworks, and apps, many of which you've encountered in this guide.
Consequently, the presence of such tools on the device may indicate that the user is attempting to reverse engineer
the app. Users increase their risk by installing such tools.
Detection Methods
You can detect popular reverse engineering tools that have been installed in an unmodified form by looking for
associated application packages, files, processes, or other tool-specific modifications and artifacts. In the following
examples, we'll demonstrate different ways to detect the Frida instrumentation framework, which is used extensively in
318
Android Anti-Reversing Defenses
this guide. Other tools, such as Substrate and Xposed, can be detected similarly. Note that DBI/injection/hooking tools
can often be detected implicitly, through run time integrity checks, which are discussed below.
Example: Ways to Detect Frida
An obvious way to detect Frida and similar frameworks is to check the environment for related artifacts, such as
package files, binaries, libraries, processes, and temporary files. As an example, I'll hone in on frida-server , the
daemon responsible for exposing Frida over TCP.
With API Level 25 and below it was possible to query for all running services by using the Java method
getRunningServices. This allows to iterate through the list of running UI activities, but will not show you daemons like
the frida-server. Starting with API Level 26 and above getRunningServices will even only return the caller's own
services.
A working solution to detect the frida-server process is to us the command ps instead.
public boolean checkRunningProcesses() {
boolean returnValue = false;
try {
Process process = Runtime.getRuntime().exec("ps");
BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
int read;
char[] buffer = new char[4096];
StringBuffer output = new StringBuffer();
while ((read = reader.read(buffer)) > 0) {
output.append(buffer, 0, read);
}
reader.close();
// Waits for the command to finish.
process.waitFor();
Log.d("fridaserver", output.toString());
if(output.toString().contains("frida-server")) {
Log.d("fridaserver","Frida Server process found!" );
returnValue = true;
}
} catch (IOException e) {
} catch (InterruptedException e) {
}
return returnValue;
}
Starting with Android Nougat (API Level 24) the ps command will only return processes started by the user itself,
which is due to a stricter enforcement of namespace separation to increase the strength of the Application Sandbox .
When executing ps it will read the information from /proc and it's not possible to access information that belongs to
other user ids.
319
Android Anti-Reversing Defenses
Even if the process name could easily be detected, this would only work if Frida is run in its default configuration.
Perhaps it's also enough to stump some script kiddies during their first steps in reverse engineering. It can, however,
be easily bypassed by renaming the frida-server binary. So because of this and the technical limitations of querying
the process names in recent Android versions, we should find a better method.
The frida-server process binds to TCP port 27042 by default, so checking whether this port is open is another method
of detecting the daemon. The following native code implements this method:
boolean is_frida_server_listening() {
struct sockaddr_in sa;
memset(&sa, 0, sizeof(sa));
sa.sin_family = AF_INET;
sa.sin_port = htons(27042);
inet_aton("127.0.0.1", &(sa.sin_addr));
int sock = socket(AF_INET , SOCK_STREAM , 0);
if (connect(sock , (struct sockaddr*)&sa , sizeof sa) != -1) {
/* Frida server detected. Do somethingâ€¦ */
}
}
Again, this code detects frida-server in its default mode, but the listening port can be changed via a command line
argument, so bypassing this is a little too trivial. This method can be improved with an nmap -sV . frida-server uses
the D-Bus protocol to communicate, so we send a D-Bus AUTH message to every open port and check for an answer,
hoping that frida-server will reveal itself.
/*
* Mini-portscan to detect frida-server on any local port.
*/
320
Android Anti-Reversing Defenses
for(i = 0 ; i = 0) {
while ((read_one_line(fd, map, MAX_LINE)) > 0) {
if (scan_executable_segments(map) == 1) {
num_found++;
}
}
if (num_found > 1) {
/* Frida Detected */
}
}
Note the use of my_openat , etc., instead of the normal libc library functions. These are custom implementations that
do the same things as their Bionic libc counterparts: they set up the arguments for the respective system call and
execute the swi instruction (see the following code). Using these functions eliminates the reliance on public APIs,