# Fix Me Up: Repairing Access-Control Bugs in Web Applications

## Authors
- Sooel Son†
- Kathryn S. McKinley†∗
- Vitaly Shmatikov†

†The University of Texas at Austin  
∗Microsoft Research  
{sooel, mckinley, shmatikov}@cs.utexas.edu

## Abstract
Access-control policies in web applications ensure that only authorized users can perform security-sensitive operations. These policies typically check user credentials before executing actions such as writing to the database or navigating to privileged pages. Each web application often uses its own, custom logic to enforce access control, which can vary between different user roles (e.g., administrator vs. regular user). Unfortunately, developers frequently omit proper access-control checks.

This paper introduces FIXMEUP, a static analysis and transformation tool designed to identify and repair access-control errors of omission. FIXMEUP starts with a high-level specification that defines the conditional statement for a correct access-control check. It then automatically computes an interprocedural access-control template (ACT), which includes all program statements involved in this instance of access-control logic. The ACT serves as both a low-level policy specification and a program transformation template. FIXMEUP uses the ACT to find faulty access-control logic, insert the missing statements, and ensure that unintended dependencies do not alter the access-control policy. The transformed program is then presented to the developer for review and acceptance.

Our evaluation on ten real-world PHP applications demonstrates that FIXMEUP effectively identifies subtle access-control bugs and performs semantically correct repairs.

## Introduction
Modern web-based software, such as e-commerce applications, blogs, and wikis, typically consists of client-side scripts running in a web browser and server-side programs that convert clients' requests into queries to a backend database and return HTML content. Since any internet user can invoke the server, developers must ensure that unauthorized users cannot access sensitive operations, such as database queries, administrative functions, or pages with confidential or paid content.

Developers usually implement access-control logic from scratch because there is no standard framework for web applications. This logic is often complex, spread across multiple functions, and varies by user role. PHP, a popular scripting language for server-side applications, allows a network user to directly invoke any program file by providing its name as part of a URL. This feature introduces unintended entry points and permits "forced browsing," where users navigate to pages without following the intended pattern, bypassing access-control checks. Consequently, access-control vulnerabilities are prominent in the OWASP Top 10 Application Security Risks. For example, nine out of ten real-world PHP applications analyzed in this paper contain access-control vulnerabilities.

While finding bugs is a mature area, repairing them is more challenging. Static repair techniques can fix simple local patterns or pass unit tests, but they do not address interprocedural bugs. Recent methods find access-control bugs using interprocedural analysis, but how to repair them remains an open problem. A key issue is that many, but not all, statements implementing the access-control logic are often already present in the vulnerable code. None of the prior patch, transformation, refactoring, or repair algorithms check if the statements are already present in the target of transformation.

We design and implement FIXMEUP, a static analysis and program transformation tool. FIXMEUP finds violations of access-control policies, produces candidate repairs, eliminates incorrect implementations, and suggests the remaining repairs to developers.

## Overview of Our Approach
FIXMEUP starts with a high-level specification of the access-control policy. This policy prescribes one or more access-control checks on execution paths leading to sensitive operations, such as database queries, links to privileged pages, or operations that rewrite cookies and delete files. If the checks fail, the program does not execute the sensitive operations. Access-control logic varies between different user roles and entry points within the same application, making it interprocedural and context-sensitive.

FIXMEUP is agnostic about the source of the policy and works equally well with user-specified policies and policies inferred by program analysis. For simplicity, assume the high-level policy is specified explicitly by the developer, who adds annotations to the PHP source code marking (1) access-control checks, (2) the protected sensitive operation, and (3) a tag indicating the user role to which the policy applies (e.g., root, admin, or blog poster).

FIXMEUP uses this specification to compute an access-control template (ACT). It starts with the conditional statement performing the correct access-control check and computes all methods and statements in its backward, interprocedural slice. Given this slice, FIXMEUP builds an interprocedural, hierarchical representation of all statements in the check's calling context on which the check depends. The ACT serves as both a low-level policy specification and a program transformation template.

To find missing access-control checks, FIXMEUP examines every calling context in which a sensitive operation may be executed and verifies whether the access-control logic matches the ACT for the corresponding role. In practice, the access-control logic of web applications is usually stylized and located close to the program entry points. The resulting templates are loop-free, consist of relatively few statements, and have simple control and data dependencies.

FIXMEUP generates candidate repairs by replicating the access-control logic in program contexts where some or all of it is missing. If a vulnerable context is found, it transforms the context using the access-control template, reusing existing statements and inserting only the missing ones. The repair procedure respects all control and data dependencies between statements.

To ensure that the reused statements do not change the meaning of the inserted policy, FIXMEUP computes a fresh template starting from the access-control check and matches it against the original template. If they do not match, FIXMEUP issues a warning. If they match, the transformed code is provided to the developer as the suggested repair.

## Access-Control Policies
Access control is fundamental to web-application security. Several of the OWASP Top 10 Application Security Risks are access-control bugs, including broken authentication and session management, insecure direct object references, and failure to restrict URL accesses. Access-control bugs can also expose other types of vulnerabilities.

### Examples of Correct Policies and Bugs
In general, an access-control policy requires some checks before executing security-sensitive operations. Web applications often implement multiple user roles. For example, an online store may have customers and administrators, while a blogging site may have blog owners, publishers, and commenters. Access-control policies are thus role-specific. Different calling contexts associated with different user roles often require different checks.

Figures 1 and 2 show examples of access-control checks in real-world PHP applications. Figure 1 shows a correct check in `Add.php` from minibloggie, which invokes a dedicated `verifyuser` function to query the user database with the username and password. If verification fails, the application returns the user to the login page. Figure 2 shows a correct check in `AcceptBid.php` from the DNscript application, which reads the session state and checks the member flag. Both access-control policies protect the same operation—a MySQL query call site that updates the backend database—but with different logic.

The access-control checks are role-specific. For example, the DNscript application has two roles. Figure 2 shows the check for the "regular user" role, and Figure 3 shows the check for the "administrator" role.

Figure 2 also shows an access-control bug in `DelCb.php` from the DNscript application, where the check for the "regular user" role is missing. The developer either forgot the check or did not realize that any network user can directly invoke `DelCb.php`. The bottom of Figure 2 shows how FIXMEUP repairs `DelCb.php` by replicating the correct access-control logic from `AcceptBid.php` (associated with the "regular user" role). Similarly, Figure 3 shows how FIXMEUP repairs an access-control bug in `AddCat2.php` (associated with the "administrator" role) by replicating the access-control check from `Del.php`.

Invalid control flow distinguishes access-control vulnerabilities from data-flow vulnerabilities, such as cross-site scripting and SQL injection. The access-control policy determines if the user is authorized to perform a particular operation, regardless of whether there are tainted data flows into the arguments of the operation.

### Design Patterns for Access Control
There is no standard access-control library or framework for web applications, so each application implements access control in its own way. Common design patterns include:

- **Role-Based Access Control (RBAC)**: Users are assigned roles, and permissions are granted to roles.
- **Attribute-Based Access Control (ABAC)**: Access decisions are based on attributes of the user, resource, and environment.
- **Session Management**: Ensuring that session identifiers are securely managed and that sessions are terminated appropriately.

## Evaluation
We evaluated FIXMEUP on ten real-world web applications, ranging from 1,500 to over 100,000 lines of PHP code. We chose these benchmarks because they have been used in prior work to specify and/or infer access-control policies, contain known access-control bugs, and demonstrate the scalability of FIXMEUP.

FIXMEUP found 38 access-control bugs and correctly repaired 30 of them. We confirmed all bugs and repairs manually and through experimental testing on attack inputs. In particular, FIXMEUP found and repaired 5 bugs in two benchmarks that prior analysis of the same code missed. In 7 cases, the inserted access-control check was added to an existing, alternative check. In one case, our repair validation procedure automatically detected an unwanted control dependence and issued a warning. In 28 cases, FIXMEUP detected that vulnerable code already contained one or more, but not all, of the statements prescribed by the access-control template and adjusted the repair accordingly.

This result shows that detecting which parts of the access-control logic are already present and correct is critical to repairing access-control vulnerabilities. No prior program repair or transformation approach detects whether the desired logic is already present in the program.

FIXMEUP guarantees that the repaired code implements the same access-control policy as the template, but it cannot guarantee that the resulting program is "correct." For example, FIXMEUP may apply the policy to a context where the developer did not intend to use it, or the repair may introduce an unwanted dependence into the program. Static analysis in FIXMEUP is neither sound nor complete, as it does not consider language features such as dynamic class loading, some external side effects, or `eval`. Developers should examine the errors found by FIXMEUP and the suggested repairs.

Using automated program analysis tools for verification and bug finding is now a well-established approach that helps programmers discover errors and improve code quality in large software systems. However, no prior tool can repair access-control errors of omission. These errors may appear simple, but they are common in web applications. FIXMEUP is a new tool that can help web developers repair common access-control vulnerabilities in their applications.