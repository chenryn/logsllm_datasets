### Configuration History in Jenkins

In the "Root history folder" field, specify a directory where Jenkins can store configuration history. This directory will hold records of both system-related and job-related configuration changes. The path can be either an absolute directory (e.g., `/var/hudson/history`) or a relative directory, calculated from the Jenkins home directory (refer to Section 3.4, "The Jenkins Home Directory"). If this is not configured, job configuration history will be stored with the jobs and will be lost if the job is deleted.

#### Advanced Options
- **Save System Configuration Changes**: This checkbox allows you to track system-wide configuration updates, in addition to job-specific ones.
- **Do Not Save Duplicate History**: This option prevents the recording of configuration updates when no actual changes have been made. Without this, a new version of the configuration will be recorded even if only the Save button was pressed without any changes.

Jenkins may internally trigger such saves, for example, when the main configuration page is saved, even if no changes were made.

### Accessing Configuration History

Once the plugin is set up, you can access the configuration history for the entire server, including system configuration updates and project-specific changes. To view these changes, click on the Job Config History icon located on the right side of the screen. Clicking this icon from the Jenkins dashboard will display a comprehensive view of all configuration history, including job and system-wide changes (see Figure 7.30, "Viewing Job Configuration History").

**Figure 7.30. Viewing Job Configuration History**

If you select a system-wide change (indicated by the "(system)" suffix), Jenkins will show a list of all versions of that file and allow you to view the differences between them (see Figure 7.31, "Viewing Differences in Job Configuration History"). The differences are displayed as diff files, which may not be very readable. However, for small changes, the XML format of most Jenkins configuration files makes it sufficient to understand the changes.

**Figure 7.31. Viewing Differences in Job Configuration History**

### Limitations of the JobConfigHistory Plugin

While the JobConfigHistory plugin is powerful, it has some limitations:
- It only displays differences in raw diff format.
- You cannot restore a previous version of a configuration file, which could be dangerous, especially for system-wide configurations.

Despite these limitations, the plugin provides a clear picture of the changes made to build jobs and system configurations.

### Conclusion

In this chapter, we explored various ways to configure security in Jenkins. The Jenkins security model, with its orthogonal concepts of Authentication and Authorization, is flexible and extensible. For a Jenkins installation of any size, integrating your security strategy with the organization's overall security practices is crucial. This can range from integrating with local LDAP repositories to setting up full-fledged SSO solutions like Crown or CAS, making the system easier to administer in the long run.

### Chapter 8: Notification

#### Introduction

While it is important to get your build server to build software, it is even more critical to notify people when the build fails. A key value of Continuous Integration (CI) is improving the flow of information about the project's health, such as failing unit tests, regressions in integration test suites, or drops in code quality metrics. The CI server must inform the right people quickly. This is what we call Notification.

There are two main types of notification strategies: passive (pull) and active (push). Passive notifications, such as RSS feeds and build radiators, require developers to check the build status. Active notifications, like desktop notifiers and SMS, proactively alert developers when a build fails. Both approaches have their advantages and disadvantages. Passive notifications raise general awareness, while active notifications encourage quicker fixes.

#### Email Notification

Email is the most common form of CI notification due to its ubiquity and ease of use. In Jenkins, you can enable email notifications by checking the E-mail Notification checkbox and providing the email addresses of the recipients (see Figure 8.1, "Configuring email notification"). By default, Jenkins sends an email for every failed or unstable build, and also for the first successful build after a series of failures.

**Figure 8.1. Configuring email notification**

Developers should diagnose and fix issues locally before committing changes. Repeated build failures often indicate chronic configuration issues or poor developer practices. You can also send separate emails to developers who committed changes to the broken build, using the email addresses from the configured security realm or derived from the SCM username.

For infrequent builds, it can be challenging to determine which change caused the failure. Different build types may require different notification strategies. For example:
- **Fast builds (unit/integration tests)**: Notify team lead and developers who committed changes.
- **Slow builds (acceptance tests)**: Notify team lead, testers, and developers who committed changes.
- **Nightly builds (QA metrics, performance tests)**: Notify all team members, providing a snapshot of project health before the daily status meeting.

#### More Advanced Email Notification

The Email-ext plugin allows for a more refined email notification strategy. It replaces the standard Jenkins email notification with an Editable Email Notification checkbox (see Figure 8.2, "Configuring advanced email notification"). Here, you can define a default recipient list, customize the email content, and set up triggers for different events.

**Figure 8.2. Configuring advanced email notification**

The plugin supports various tokens for customizing messages, such as `${BUILD_NUMBER}` and `${FAILED_TESTS}`. You can also define triggers for specific build states, such as Failure, Still Failing, Unstable, and Success (see Figure 8.3, "Configuring email notification triggers").

**Figure 8.3. Configuring email notification triggers**

You can customize the message content and recipient list for each trigger, ensuring that the appropriate people are notified. For example, you can notify developers who committed changes on the first failure and escalate to the team leader on subsequent failures.

**Figure 8.4. Customized notification message**

However, email has its drawbacks. Developers may ignore or miss important notifications. In the following sections, we will explore other notification strategies to ensure high-priority attention to build failures.

#### Claiming Builds

The Claim plugin allows developers to take ownership of a broken build, avoiding duplicate efforts. You can install this plugin and enable it in the build job configuration. Developers can claim a failed build and add comments about the issue and their intended fix. Claimed builds are marked in the build history.

To activate claiming, check the "Allow broken build claiming" option in the build job configuration. From there, developers can claim a build from the build details page (see Figure 8.5, "Claiming a failed build").

**Figure 8.5. Claiming a failed build**

#### RSS Feeds

Jenkins provides RSS feeds for build results, accessible via icons at the bottom of build dashboards and build history panels (see Figure 8.6, "RSS Feeds in Jenkins"). You can append `/rssAll`, `/rssFailed`, or `/rssLatest` to the URL to get different types of feeds. RSS readers are available on various platforms, making this a convenient way to monitor build results.

**Figure 8.6. RSS Feeds in Jenkins**

RSS feeds are passive, so they do not prompt users when a new failure occurs. They are useful for a quick overview of build statuses.

#### Build Radiators

Build radiators are prominent displays showing the state of builds, commonly used in Agile environments. They help ensure everyone is aware of failing builds. The Jenkins Radiator View plugin adds a new type of view that you can create and configure (see Figure 8.7, "Creating a build radiator view").

**Figure 8.7. Creating a build radiator view**

The build radiator view displays large red or yellow boxes for failing or unstable builds, with the job name and other details. You can configure it to show passing builds as well, but it is generally more effective to display only failing builds (see Figure 8.8, "Displaying a build radiator view").

**Figure 8.8. Displaying a build radiator view**

#### Instant Messaging

Instant Messaging (IM) is a fast, lightweight medium for communication. IM notifications are immediate and demand attention, making them harder to ignore than emails. They are particularly useful for quick, direct notifications.

### Summary

This chapter covered various notification strategies in Jenkins, including email, claiming builds, RSS feeds, build radiators, and instant messaging. Each method has its strengths and is suitable for different scenarios. By choosing the right combination, you can ensure that your team is promptly informed about build failures and can take action quickly.