a directory where Jenkins can store configuration history, in the “Root history folder” field. This is
the directory where Jenkins will store a record of both system-related and job-related configuration
changes. It can be either an absolute directory (such as /var/hudson/history), or a relative directory,
calculated from the Jenkins home directory (see Section 3.4, “The Jenkins Home Directory”). If you
don’t do this, job configuration history will be stored with the jobs, and will be lost if you delete a job.
There are a few other useful options in the Advanced section. The “Save system configuration changes”
checkbox lets you keep track of system-wide configuration updates, and not just job-specific ones. And
the “Do not save duplicate history” checkbox allows you to avoid recording configuration updates if no
actual changes have been made. If not, a new version of the configuration will be recorded, even if you
have only pressed the Save button without making any changes. Jenkins can also cause this to happen
internally—for example, system configuration settings are all saved whenever the main configuration
page is saved, even if no changes have been made.
Once you have set up this plugin, you can access the configuration history both for the whole server,
including system configuration updates, as well as the changes made to the configuration of each project.
In both cases, you can view these changes by clicking on the Job Config History icon to the right of the
screen. Clicking on this icon from the Jenkins dashboard will display a view of all of your configuration
history, including job changes and system-wide changes (see Figure 7.30, “Viewing Job Configuration
History”).
193
Figure 7.30. Viewing Job Configuration History
If you click on a system-wide change (indicated by the “(system)” suffix in the list), Jenkins takes you
to a screen that lists all of the versions of that file, and allows you to view the differences between
the different versions (see Figure 7.31, “Viewing differences in Job Configuration History”). The
differences are displayed as diff files, which is not particularly readable in itself. However, for small
changes, the readable XML format of most of the Jenkins configuration files makes this sufficient to
understand what changes were made.
Figure 7.31. Viewing differences in Job Configuration History
The JobConfigHistory plugin is a powerful tool. However, at the time of writing, it does have its limits.
As mentioned, the plugin only displays the differences in raw diff format, and you can’t restore a
previous version of a configuration file (those doing this out of context could be dangerous in some
circumstances, particularly for system-wide configuration files). Nevertheless, it gives a very clear
picture of the changes that have been made, both to your build jobs and to your system configuration.
7.7. Conclusion
In this chapter we have looked at a variety of ways to configure security in Jenkins. The Jenkins security
model, with the two orthogonal concepts of Authentication and Authorization, is flexible and extensible.
For a Jenkins installation of any size, you should try to integrate your Jenkins security strategy with the
194
organization as a whole. This can go from simply integrating with your local LDAP repository to setting
up or using a full-blown SSO solution such as Crown or CAS. In either case, it will make the system
considerably easier to administrate in the long run.
195
Chapter 8. Notification
8.1. Introduction
While it is important to get your build server building your software, it is even more important to get
your build server to let people know when it can’t do so. A crucial part of the value proposition of
any Continuous Integration environment is to improve the flow of information about the health of your
project, be it failing unit tests or regressions in the integration test suite, or other quality related issues
such as a drop in code coverage or code quality metrics. In all cases, a CI server must let the right people
know about any new issues, and it must be able to do so fast. This is what we call Notification.
There are two main classes of notification strategies, which I call passive and active (or pull/push).
Passive notification (pull) requires the developers to consciously consult the latest build status, and
includes RSS feeds, build radiators, and (to a certain extent) emails. Active notification (push) will pro-
actively alert the developers when a build fails, and includes methods such as desktop notifiers, chat,
and SMS. Both approaches have their good and bad points. Passive notification strategies such as build
radiators can raise general awareness about failed builds, and help install a team culture where fixing
broken builds takes a high priority. More direct forms of notification can actively encourage developers
to take matters into their own hands and fix broken builds more quickly.
8.2. Email Notification
Email notification is the most obvious and most common form of CI notification. Email is well-known,
ubiquitous, easy to use and easy to configure (see Section 4.8, “Configuring the Mail Server”). So,
when teams set up their first Continuous Integration environment, it is usually the most common initial
notification strategy they try.
You activate email notification in Jenkins by ticking the E-mail Notification checkbox and providing
the list of email addresses of the people who need to be notified (see Figure 8.1, “Configuring email
notification”). By default, Jenkins will send an email for every failed or unstable build. Remember, it
will also send a new email for the first successful build after a series of failed or unstable builds, to
indicate that the issue has been fixed.
Figure 8.1. Configuring email notification
Normally a build should not take too many tries to get working again—developers should diagnose and
reproduce the issue locally, fix it locally, and only then commit their fix to version control. Repeated
build failures usually indicate either a chronic configuration issue or poor developer practices (for
example, developers committing changes without checking that it works locally first).
You can also opt to send a separate email to any developers who have committed changes to the broken
build. This is generally a good idea, as developers who have committed changes since the last build are
naturally the people who should be the most interested in the build results. Jenkins will get the email
address of the user from the currently-configured security realm (see Section 7.4, “Security Realms—
Identifying Jenkins Users”), or by deriving the email address from the SCM username if you have set
this up (see Section 4.8, “Configuring the Mail Server”).
If you use this option, it may be less useful to include the entire team in the main distribution list. You
may want to simply include people who will be interested in monitoring the result of every build (such
as technical leads), and let Jenkins inform contributing developers directly.
This assumes of course that the changes caused the build failure, which is generally (but not always)
the case. However, if the builds are infrequent (for example, nightly builds, or if a build is queued for
several hours before finally kicking off), many changes may have been committed, and it is hard to
know which one was actually responsible for the build failure.
Not all builds are alike when it comes to email notification. Developers committing changes are
particularly interested in the results of the unit and integration test builds (especially those triggered by
their own changes), whereas BAs and testers might be more interested in keeping tabs on the status of the
automated acceptance tests. So the exact email notification setup for each build job will be different. In
fact, it is useful to define an email notification strategy. A sample of such an email notification strategy
is outlined here:
• Fast builds (unit/integration tests, runs in less than 5 minutes): notification is sent to the team lead
and to developers having committed changes.
• Slow builds (acceptance tests builds, run after the fast builds): notification is sent to team lead,
testers and developers having committed changes.
• Nightly builds (QA metrics, performance tests and so on; only run if the other builds work): all
team members—these provide a snapshot picture of project health before the daily status meeting.
Indeed, you should consider what notification strategy is appropriate for each build job on a case-by-
case basis, rather than applying a blanket policy for all build jobs.
8.3. More Advanced Email Notification
By default, Jenkins email notification is a rather blunt tool. Notification messages are always sent to
basically the same group of people. You cannot send messages to different people depending on what
went wrong, or implement any sort of escalation policy. It would be useful, for example, to be able to
notify the developers who committed changes the first time a build breaks, and send a different message
to the team lead or the entire team if the build breaks a second time
198
The Email-ext plugin lets you define a more refined email notification strategy. This plugin adds an
Editable Email Notification checkbox (see Figure 8.2, “Configuring advanced email notification”),
which effectively replaces the standard Jenkins email notification. Here, you can define a default
recipient list and fine-tune the contents of the email message, and also define a more precise notification
strategy with different messages and recipient lists for different events. Note that once you have installed
and configured this plugin for your build job, you can deactivate the normal E-mail Notification
configuration.
Figure 8.2. Configuring advanced email notification
This plugin has two related but distinct functionalities. Firstly, it lets you customize the email notification
message. You can choose from a large number of predefined tokens to create your own customized
message title and body. You include a token in your message template using the familiar dollar
notation (e.g., ${BUILD_NUMBER} or $BUILD_NUMBER). Some of the tokens accept parameters, which
you can specify using a name=value format (e.g., ${BUILD_LOG, maxLines=100} or ${ENV,
var="PATH"}). Among the more useful tokens are:
${DEFAULT_SUBJECT}
The default email subject configured in the Jenkins system configuration page
${DEFAULT_CONTENT}
The default email content configured in the Jenkins system configuration page
${PROJECT_NAME}
The project’s name
${BUILD_NUMBER}
Current build number
${BUILD_STATUS}
Current build status (failing, success, etc.)
${CAUSE}
The cause of the build
199
${BUILD_URL}
A link to the corresponding build job page on Jenkins
${FAILED_TESTS}
Shows information about failing unit tests, if any have failed
${CHANGES}
Displays the changes made since the last build
${CHANGES_SINCE_LAST_SUCCESS}
All the changes made since the last successful build
You can get a full list of the available tokens, and the options for those that accept parameters, by clicking
on the Help icon opposite the Context Token Reference label.
The Advanced button lets you define a more sophisticated notification strategy, based on the concept
of triggers (see Figure 8.3, “Configuring email notification triggers”). Triggers determine when email
notification messages should be sent out. The supported triggers include the following:
Failure
Any time the build fails.
Still Failing
Any successive build failures.
Unstable
Any time a build is unstable.
Still Unstable
Any successive unstable builds.
Success
Any successful build.
Fixed
When the build changes from Failure or Unstable to Successful.
Before Build
Sent before every build begins.
200
Figure 8.3. Configuring email notification triggers
You can set up as many (or as few) triggers as you like. The recipients list and message template can
be customized for each trigger—for example, by using the Still Failing and Still Unstable triggers, you
can set up a notification strategy that only notifies developer having committed changes the first time a
build job fails, but proceeds to notify the team leader if it fails a second time. You can choose to send
the message only to the developers who have committed to this build (“Send to committers”), or to also
include everyone who has committed since the last successful build. This helps ensures that everyone
who may be involved in causing the build to break will be notified appropriately.
You can also customize the content of the message by clicking on the More Configuration option (as
shown for the Still Failing trigger in Figure 8.3, “Configuring email notification triggers”). This way,
you can customize different messages to be sent for different occasions.
The triggers interact intelligently. So if you configure both the Failing and the Still Failing triggers, only
the Still Failing trigger will be activated on the second build failure.
An example of such a customized message is illustrated in Figure 8.4, “Customized notification
message”.
201
Figure 8.4. Customized notification message
Overall, however, as a notification strategy, email is not without its faults. Some developers shut down
their email clients at times to avoid being interrupted. In large organizations, the number of email
messages arriving each day can be considerable, and build failure notifications can be hidden among a
host of other less important messages. So build failures may not always get the high-priority attention
they require in a finely-tuned CI environment. In the following sections, we will look at some other
notification strategies that can be used to raise team awareness of failed builds and encourage developers
to get them fixed faster.
8.4. Claiming Builds
When a build does fail, it can be useful to know that someone has spotted the issue and is working on it.
This avoids having more than one developer waste time by trying to fix the same problem separately.
The Claim plugin lets developers indicate that they have taken ownership of the broken build, and are
attempting to fix it. You can install this plugin in the usual way. Once installed, developers can claim a
failed build as their own, and optionally add a comment to explain the suspected cause of the build and
what the developer intends to do about it. The claimed build will then be marked as such in the build
history, so that fellow developers can avoid wasting time with unnecessary investigation.
To activate claiming for a build job, you need to tick the “Allow broken build claiming” option in the
build job configuration page. From this point on, you will be able to claim a broken build in the build
details page (see Figure 8.5, “Claiming a failed build”). Claimed builds will display an icon in the build
history indicating that they have been claimed. You can also make a build claim “sticky,” so that all
202
subsequent build failures for this job will also be automatically claimed by this developer, until the issue
is resolved.
Figure 8.5. Claiming a failed build
8.5. RSS Feeds
Jenkins also provides convenient RSS feeds for its build results, both for overall build results across all
of your builds (or just the builds on a particular view), or build results for a specific build. RSS Feed
icons are available at the bottom of build dashboards (see Figure 8.6, “RSS Feeds in Jenkins”) and at
the bottom of the build history panel in the individual build jobs, giving you access to either all of the
build results, or just the failing builds.
203
Figure 8.6. RSS Feeds in Jenkins
The URLs for RSS feeds are simple, and work for any Jenkins page displaying a set of build results. You
just need to append /rssAll to get an RSS feed of all of the build results on a page, or /rssFailed
to only get the failing builds. And /rssLatest will provide you with a feed containing only the latest
build results. But the simplest way to obtain the URL is just to click on the RSS icon in the corresponding
Jenkins screen.
There are an abundance of RSS readers out there, both commercial and open source, available for
virtually every platform and device, so this can be a great choice to keep tabs on build results. Many
common browsers (Firefox in particular) and email clients also support RSS feeds. Some readers have
trouble with authentication, however, so if your Jenkins instance is secured, you may need to do a little
extra configuration to see your build results.
RSS feeds can be a great information source on overall build results, and let you see the state of your
builds at a glance without having to connect to the server. Nevertheless, most RSS Readers are by nature
passive devices—you can consult the state of your builds, but the RSS reader will usually not be able
to prompt you if a new build failure occurs.
8.6. Build Radiators
The concept of information radiators is commonly used in Agile circles. According to Agile guru Alistair
Cockburn:
An Information radiator is a display posted in a place where people can see it as they
work or walk by. It shows readers information they care about without having to ask
anyone a question. This means more communication with fewer interruptions.
In the context of a CI server, an information radiator is a prominent device or display that allows team
members and others to easily see if any builds are currently broken. It typically shows either a summary
of all the current build results, or just the failing ones, and is displayed on a large, prominently located
wall-mounted flat screen. This sort of specialized information radiator is often known as a build radiator.
When used well, build radiators are among the most effective of the passive notification strategies. They
are very effective at ensuring that everyone is aware of failing builds. In addition, unlike some of the
Extreme Feedback Devices that we discuss later on in this chapter, a build radiator can cater for many
build jobs, including many failing build jobs, and so can still be effectively used in a multiteam context.
204
There are several build radiator solutions for Jenkins. One of the easiest to use is the Jenkins Radiator
View plugin. This plugin adds a new type of job that you can create: the (see Figure 8.7, “Creating a
build radiator view”).
Figure 8.7. Creating a build radiator view
Configuring the build radiator view is similar to configuring the more conventional list views—you just
specify the build jobs you want included in the view, either by choosing them individually or by using
a regular expression.
Since the build radiator view takes up the entire screen, modifying or deleting a build radiator is a bit
tricky. In fact, the only way to open the view configuration screen is to append /configure to the view
URL: so if your build radiator is called “build-radiator,” you can edit the view configuration by opening
http://my.hudson.server/view/build-radiator/configure.
The build radiator view (see Figure 8.8, “Displaying a build radiator view”) displays a large red or
yellow box for each failing or unstable build, with the build job name in prominent letters, as well as
some other details. You can configure the build radiator view to display passing builds as well as failing
ones (they will be displayed in small green boxes). However a good build radiator should really only
display the failing builds, unless all the builds are passing.
205
Figure 8.8. Displaying a build radiator view
8.7. Instant Messaging
Instant Messaging (or IM) is widely used today as a fast, lightweight medium for both professional and
personal communication. Instant messaging is, well, instant, which gives it an edge over email when
it comes to fast notification. It is also “push” rather than “pull”—when you receive a message, it will
pop up on your screen and demand your attention. This makes it a little harder to ignore or put off than