d
a
e
h
r
e
v
O
y
r
o
m
e
M
7.5
Technique
MarkUs (ours)
Oscar
Dangsan
pSweeper
CRCount
s t a r
a
2
z i p
b
a lII
e
d
c
c
g
b m k
o
g
6
2
h
4 r e f
h m m e r
n t u m
l b m
q
li b
a
u
m c f
m il c
a m d
o m n
n
p
e rl b
e t p
p
h
c
n
e
y
v r a
o
p
g
n
s j e
p
s
3
x
h i n
o
s
x
a l a
p l e
x
c
n
b m k
g
e
n
a
o m e
Fig. 5: Slowdown for SPEC CPU2006 [24], compared with results reported in the literature [4], [7], [23], [25].
22
135
9
Technique
MarkUs (ours)
Oscar
Dangsan
pSweeper
CRCount
s t a r
a
2
z i p
b
a lII
e
d
c
c
g
b m k
o
g
6
2
h
4 r e f
h m m e r
n t u m
l b m
q
li b
a
u
m c f
m il c
a m d
o m n
n
p
e rl b
e t p
p
h
c
n
e
y
v r a
o
p
g
n
s j e
p
s
3
x
h i n
o
s
x
a l a
p l e
x
c
n
b m k
g
e
n
a
o m e
Fig. 6: Memory overhead for SPEC CPU2006 [24], compared with results from the literature [4], [7], [23], [25].
 10000
 1000
 100
 10
s
e
r
u
d
e
c
o
r
P
g
n
k
r
a
M
i
 1
a star
b zip 2
d e alII
g c c
g o b
h 2 6 4ref
m k
h
m
m
m
er
lb
lib q u a ntu
m
m cf m ilc
n a
o
m
m
p erlb e n c h
n etp p
d
p o vra y
sje n g
s o ple x
s p hin x 3
x ala n c b
m k
Fig. 7: Number of marking procedures performed in each
SPEC CPU2006 workload.
Even though CRCount can free objects once all references to
them disappear, whereas MarkUs deliberately delays this to
reduce performance overheads, MarkUs is still slightly lower
memory overhead: this is because it requires less metadata,
since pointers do not need to be identiﬁed and allocations
do not need reference counts, and since large allocations in
MarkUs can be deallocated immediately in the physical space
even in the presence of dangling pointers.
Without MarkUs, execution times range from 120 seconds
(povray) to 463 seconds (sphinx3), with a geomean of 280
seconds. With MarkUs, this changes from 120 seconds to
477 seconds, with the same workloads at the extremes, and
a geomean of 309 seconds. The overhead from MarkUs is
primarily from its marking procedures, and ﬁgure 7 shows that
the number of these performed can differ by several orders of
magnitude between each application: the more frequent deallo-
cation is, and the less amenable to page-table unmapping, the
longer spent marking and thus the higher the overheads. Since
MarkUs’s marking procedure is multithreaded, and so can
utilize the resources of multiple cores, in ﬁgure 8(a) we present
the CPU utilisation overheads as distinct from slowdown.
Though MarkUs is able to parallelize some of its overheads
er
lb
lib q u a ntu
m
m cf m ilc
n a
o
m
m
p erlb e n c h
n etp p
d
p o vra y
sje n g
s p hin x 3
m k
s o ple x
x ala n c b
g e o
(a) CPU utilisation overhead for SPEC CPU2006.
e a n
e a n
m
m
n
o
i
t
a
s
i
l
i
t
U
U
P
C
e
g
a
r
e
v
A
n
w
o
d
w
o
S
l
 1.15
 1.1
 1.05
 1
a star
b zip 2
d e alII
g c c
g o b
h 2 6 4ref
m k
h
m
m
 1.06
 1.05
 1.04
 1.03
 1.02
 1.01
 1
 0.99
 0.98
a star
b zip 2
d e alII
g c c
g o b
h 2 6 4ref
m k
h
m
m
m
m
er
lb
lib q u a ntu
m
m cf m ilc
n a
o
m
m
p erlb e n c h
n etp p
d
p o vra y
sje n g
s p hin x 3
m k
s o ple x
x ala n c b
g e o
(b) Slowdown from running SPEC CPU2006 simultaneously with
a MarkUs-augmented Xalancbmk, our most marking-procedure-
intensive workload, relative to the same workloads running simul-
taneously with an unaugmented Xalancbmk.
Fig. 8: System-wide resource metrics for MarkUs.
away, the effect of this on overall system resources is slight, as
most workloads do not spend much time performing marking
procedures: the average is 2.4% extra CPU resources per unit
time, and worst case 17.9%. Even running the most allocation-
intensive workload, xalancbmk, simultaneously with other
workloads (ﬁgure 8(b)) , the overall effect on performance is
minimal relative to an unaugmented xalancbmk. All workloads
suffer minor slowdown, due to some competition for resources
on CPU time from the parallel marking procedure, and some
also suffer from the increase in DRAM usage, but this is
minimal in both cases.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:38:23 UTC from IEEE Xplore.  Restrictions apply. 
585
n
w
o
d
w
o
S
l
 12
 10
 8
 6
 4
 2
 0
Technique
MarkUs (ours)
D+A