### Performance and Memory Overhead Analysis of MarkUs

#### Slowdown for SPEC CPU2006
**Figure 5:**
- **Comparison:** Slowdown for SPEC CPU2006 [24] compared with results reported in the literature [4], [7], [23], [25].
- **Techniques Compared:**
  - MarkUs (ours)
  - Oscar
  - Dangsan
  - pSweeper
  - CRCount
  - star
  - zip
  - alII
  - cc
  - gob
  - 64ref
  - mkm
  - hmm
  - qbm
  - libquantum
  - mcf
  - milc
  - omnetpp
  - povray
  - sjeng
  - sphinx3
  - xalancbmk

#### Memory Overhead for SPEC CPU2006
**Figure 6:**
- **Comparison:** Memory overhead for SPEC CPU2006 [24] compared with results from the literature [4], [7], [23], [25].
- **Techniques Compared:**
  - MarkUs (ours)
  - Oscar
  - Dangsan
  - pSweeper
  - CRCount
  - star
  - zip
  - alII
  - cc
  - gob
  - 64ref
  - mkm
  - hmm
  - qbm
  - libquantum
  - mcf
  - milc
  - omnetpp
  - povray
  - sjeng
  - sphinx3
  - xalancbmk

#### Number of Marking Procedures
**Figure 7:**
- **Description:** Number of marking procedures performed in each SPEC CPU2006 workload.
- **Workloads:**
  - star
  - zip
  - alII
  - cc
  - gob
  - 64ref
  - mkm
  - hmm
  - qbm
  - libquantum
  - mcf
  - milc
  - omnetpp
  - povray
  - sjeng
  - sphinx3
  - xalancbmk

### Detailed Analysis

Even though CRCount can free objects once all references to them disappear, whereas MarkUs deliberately delays this to reduce performance overheads, MarkUs still has a slightly lower memory overhead. This is because it requires less metadata, as pointers do not need to be identified and allocations do not need reference counts. Additionally, large allocations in MarkUs can be deallocated immediately in the physical space, even in the presence of dangling pointers.

**Execution Times:**
- **Without MarkUs:**
  - Range: 120 seconds (povray) to 463 seconds (sphinx3)
  - Geomean: 280 seconds
- **With MarkUs:**
  - Range: 120 seconds (povray) to 477 seconds (sphinx3)
  - Geomean: 309 seconds

The overhead from MarkUs primarily comes from its marking procedures. Figure 7 shows that the number of these procedures can differ by several orders of magnitude between applications. The more frequent the deallocation and the less amenable to page-table unmapping, the longer the marking process and the higher the overheads.

Since MarkUsâ€™s marking procedure is multithreaded and can utilize the resources of multiple cores, we present the CPU utilization overheads separately from slowdown in Figure 8(a).

**CPU Utilization Overheads:**
- **Average Extra CPU Resources per Unit Time:** 2.4%
- **Worst Case Extra CPU Resources per Unit Time:** 17.9%

**System-Wide Resource Metrics:**
- **Figure 8(a):** CPU utilization overhead for SPEC CPU2006.
- **Figure 8(b):** Slowdown from running SPEC CPU2006 simultaneously with a MarkUs-augmented Xalancbmk, our most marking-procedure-intensive workload, relative to the same workloads running simultaneously with an unaugmented Xalancbmk.

Even with the most allocation-intensive workload, xalancbmk, the overall effect on performance is minimal when running simultaneously with other workloads. All workloads suffer minor slowdown due to some competition for CPU time from the parallel marking procedure, and some also experience a slight increase in DRAM usage, but both effects are minimal.

---

**Note:**
- Authorized licensed use limited to: Tsinghua University.
- Downloaded on March 19, 2021, at 09:38:23 UTC from IEEE Xplore.
- Restrictions apply.