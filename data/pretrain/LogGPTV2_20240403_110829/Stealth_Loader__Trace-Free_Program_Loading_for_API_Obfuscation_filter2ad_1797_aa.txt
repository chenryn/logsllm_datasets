title:Stealth Loader: Trace-Free Program Loading for API Obfuscation
author:Yuhei Kawakoya and
Eitaro Shioji and
Yuto Otsuki and
Makoto Iwamura and
Takeshi Yada
Stealth Loader: Trace-Free Program Loading
for API Obfuscation
Yuhei Kawakoya1(B), Eitaro Shioji1, Yuto Otsuki1, Makoto Iwamura1,
and Takeshi Yada1,2
{kawakoya.yuhei,shioji.eitaro,otsuki.yuto,iwamura.makoto}@lab.ntt.co.jp
1 NTT Secure Platform Laboratories, Tokyo, Japan
2 NTT Advanced Technology Corporation, Kawasaki, Kanagawa, Japan
PI:EMAIL
Abstract. Understanding how application programming interfaces
(APIs) are used in a program plays an important role in malware
analysis. This, however, has resulted in an endless battle between mal-
ware authors and malware analysts around the development of API
[de]obfuscation techniques over the last few decades. Our goal in this
paper is to show a limit of existing API de-obfuscations. To do that,
we ﬁrst analyze existing API [de]obfuscation techniques and clarify an
attack vector commonly existed in API de-obfuscation techniques, and
then we present Stealth Loader, which is a program loader using our
API obfuscation technique to bypass all existing API de-obfuscations.
The core idea of this technique is to load a dynamic link library (DLL)
and resolve its dependency without leaving any traces on memory to be
detected. We demonstrate the eﬀectiveness of Stealth Loader by analyz-
ing a set of Windows executables and malware protected with Stealth
Loader using major dynamic and static analysis tools and techniques.
The result shows that among other obfuscation techniques, only Stealth
Loader is able to successfully bypass all analysis tools and techniques.
Keywords: API obfuscation · Windows · Program loader · Malware
analysis
1 Introduction
Malware analysis is essential for ﬁghting against cyber crime. Analysts take
advantage of various analysis methods to reveal the behaviors of malware eﬀec-
tively. Windows userland APIs are important information sources for under-
standing the behaviors and intentions of malware since a sequence of APIs
expresses signiﬁcant part of the functionalities of malware. That is, the API
is a fundamental factor for malware analysis.
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 10) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 217–237, 2017.
DOI: 10.1007/978-3-319-66332-6 10
218
Y. Kawakoya et al.
Malware authors understand this situation, so they try to hide APIs used in
their malware by managing various obfuscation tricks [13,19,20,23]. One exam-
ple is API redirection, which is an obfuscation technique that aims to confuse
the control ﬂows from call instructions to APIs by inserting junk code in the
middle of the ﬂows. Another example is DLL unlinking, which aims to make
control ﬂows from call instructions unreachable to the code of any recognized
APIs. This is done by hiding loaded DLLs containing API code, which possibly
becomes the destination of the control ﬂows.
To ﬁght against these API obfuscations, many API de-obfuscation approaches
have been proposed in the past few decades [11,18,23]. For example, one app-
roach aggressively collects traces of loaded DLLs from multiple sources, e.g.,
the Process Environment Block (PEB), Virtual Address Descriptor (VAD), or
callback events, and creates a complete list of loaded DLLs. Another approach
deeply performs a control ﬂow analysis until it ﬁnds any API code reachable
from call instructions in the original code by taking advantage of various static
analysis techniques.
An essential step in these API de-obfuscations is API name resolution,
i.e., relating a virtual memory address to an API name. To do that, API de-
obfuscations have to identify the positions of loaded DLLs that contain API
code. As far as we have investigated, to identify the positions of loaded DLLs,
most existing API de-obfuscations are likely to depend on data structures that
the underline operating system (OS) manages. For example, in the case of Win-
dows, many analysis tools are designed to acquire the addresses of loaded DLLs
from PEB or VAD. We consider that, behind this design, they expect that the
Windows OS precisely manages loaded DLLs and keeps track of them by storing
the information related to them in speciﬁc data structures. We also consider
that this expectation possibly becomes an attack vector for malware authors to
evade existing API de-obfuscations.
Our goal in this paper is to show a limitation of existing API de-obfuscations
by actually attacking this expectation. To do that, we propose a new Windows
API obfuscation technique and implement it in our prototype, Stealth Loader.
The design principle of Stealth Loader is that it loads a DLL without leav-
ing any traces in Windows-managed data structures. To achieve this, we have
two approaches. The ﬁrst is that we redesign each phase of program loading
to become trace-free. The second is that we add two new features to a pro-
gram loader; one is for removing some ﬁelds of the Portable Executable (PE)
header of a loaded DLL from memory, and the other is for removing behavioral
characteristics of Stealth Loader itself.
One eﬀect of Stealth Loader is that a stealth-loaded DLL1 is not recognized as
a loaded DLL by analysis tools and even by the Windows OS because there is no
evidence in Windows-managed data structures to recognize it. Due to this eﬀect,
calls of the functions exported from stealth-loaded Windows system DLLs, such
as kernel32.dll and ntdll.dll, are not recognized as API calls because the DLLs
are not recognized as loaded, i.e., analysis tools fail API name resolution.
1 A DLL loaded by Stealth Loader.
Stealth Loader: Trace-Free Program Loading for API Obfuscation
219
The main challenge of this paper is to design a trace-free program loader
without destroying the runtime environment for running programs. A program
loader is one of the core functions of an OS. Therefore, simply changing the
behavior of a program loader is likely to aﬀect the runtime environment, and
that change sometimes leads to a program crash. In addition, changes excessively
speciﬁc to a certain runtime environment lose generality as a program loader.
We need to redesign each step of the program loading procedure carefully while
considering the eﬀects on runtime environments that our changes may cause.
To demonstrate the eﬀectiveness of Stealth Loader against existing API de-
obfuscations, we embedded Stealth Loader into several Windows executables
and analyzed them with major malware analysis tools. The result showed that
all of these tools failed to analyze the invoked or imported APIs of stealth-
loaded DLLs.
In addition, to show that the current implementation of Stealth Loader is
practical enough for hiding malware’s fundamental behaviors, we protected ﬁve
real pieces of malware with Stealth Loader and then analyzed them by using
a popular dynamic analysis sandbox, Cuckoo Sandbox [15]. The result of this
experiment showed that pieces of malware whose malicious activities were obvi-
ously identiﬁed before applying Stealth Loader successfully hid most of their
malicious activities after Stealth Loader was applied. Consequently, they could
make Cuckoo Sandbox produce false negatives.
The contributions of this paper are as follows.
– We analyze existing API [de]obfuscation techniques and reveal a common
expectation of API de-obfuscations which possibly becomes an attack vector
for malware authors to bypass analyses and detections.
– We introduce Stealth Loader, a program loader using our Windows API obfus-
cation technique that exploits this attack vector.
– We demonstrate the eﬀectiveness of Stealth Loader by analyzing Windows
executables and real malware protected with Stealth Loader. The results show
that Stealth Loader successfully evaded seven primary analysis tools.
– We discuss possible countermeasures against Stealth Loader. We present that
Stealth Loader can evade API de-obfuscation techniques proposed in academic
studies as well.
2 Problem Analysis
In this section, we explain existing API obfuscation and de-obfuscation tech-
niques that are used in both major malware analysis tools and academic studies.
Then, we clarify a common expectation shared in API de-obfuscations.
2.1 API Obfuscation
API obfuscation is a technique for hiding imported or invoked APIs from static
or dynamic analysis tools, respectively. Malware authors often take advantage
of this technique to protect their malware from being detected or analyzed. We
220
Y. Kawakoya et al.
Fig. 1. Three patterns of API redirection. The upper one is the case of a normal
Windows executable before applying API redirection. (a) is a case in which the reference
of the call instruction is modiﬁed. (b) is a case in which the entry of IAT is modiﬁed.
(c) is a case in which API redirection is conducted with stolen code.
ﬁrst mention the basics of the PE format. Then, we explain IAT obfuscation
and DLL unlinking as a technique against static analysis. Last, we explain API
redirection as one technique against both static and dynamic analyses.
A PE executable usually has an import address table (IAT) and import name
table (INT) to manage external APIs if it depends on them. IAT is a table that
contains function pointers to APIs whose code is located in external DLLs. INT
is also a table that contains the names of external APIs corresponding to IAT
entries. Since these tables are referenced from the header of a PE executable,
malware analysts can acquire the list of APIs that a piece of malware depends
on from its PE header when they analyze a PE-format piece of malware.
To interfere with static analysis, malware often deletes INT and disconnects
the reference to the tables from its PE header. This is called IAT obfuscation.
Even if a piece of malware does not have any references to the tables from its
PE header, since it keeps the list of APIs inside and restores it at runtime, it
can sustain the feasibility of the original functionality.
DLL unlinking [11] is another technique for interfering with static analy-
sis by obfuscating loaded DLLs. It makes control ﬂows from call instructions
unreachable to any APIs by hiding loaded DLLs that could possibly become the
destination of the ﬂows. Since a control ﬂow of an external function call does not
reach any memory area where a Windows system DLL is mapped, analysis tools
fail to recognize this ﬂow as an API call reference. This technique achieves this
by removing the registered meta-information of the DLL from the lists of PEB,
which is a data structure of Windows for managing loaded DLLs and their status
in a process. Since some Windows APIs, e.g., EnumProcessModules, depend on
PEB to extract loaded DLL lists, unlinked DLLs can avoid being listed by these
APIs.
Stealth Loader: Trace-Free Program Loading for API Obfuscation
221
API redirection [23] is a technique for attacking both static and dynamic
analyses by obfuscating API references. As Fig. 1-(a) shows, it modiﬁes call
instructions in the original code. Otherwise, as Fig. 1-(b) shows, it modiﬁes IAT
entries. With these modiﬁcations, it forces control ﬂows to APIs in order to
detour a stub, which executes junk instructions and ﬁnally jumps to APIs. By
inserting a stub between an IAT entry or call instruction and API code, malware
breaks the direct connection between the caller and callee of an API. Since many
analysis tools expect API call instructions to directly refer to API code or at
least via IAT, this technique can confuse their API resolution.
Additionally, advanced API redirection, shown in Fig. 1-(c), is involved with
stolen code [23]. At the same time, when API redirection is applied, it copies
some instructions at the entry of an API, i.e., mov edi, edi and push ebp, to
right before the jmp instruction in the allocated buﬀer for a stub. An execution
performed after running these instructions in the buﬀer is transferred to the
instruction after the copied ones in API code, i.e., mov ebp, esp. By doing this,
malware can avoid analyses that monitor the executions of an API at the entry
instruction of an API, i.e., mov edi, edi.
2.2 API De-obfuscation
Malware analysts take advantage of API de-obfuscation techniques to clarify
imported APIs or invoked APIs for static or dynamic analysis, respectively.
Regarding IAT obfuscation, it is necessary to reconstruct an obfuscated IAT
and deleted INT. To reconstruct them, most existing IAT reconstruction tools,
such as impscan (a plugin of The Volatility Framework [11]) and Scylla [14],
follow four steps: acquiring a memory dump, ﬁnding IAT, resolving API, and
repairing the PE header.
1. Run a target program until it resolves imported APIs and ﬁlls in IAT with
the resolved addresses. Then, acquire a memory dump of it.
2. Find the original IAT by analyzing code sections of a target program, e.g.,
collecting memory addresses often referred by indirect call instructions, such
as call [0x01001000].
3. Resolve API names from each entry of the found IAT by identifying the loaded
addresses of each DLL. Then, make a list of imported APIs.
4. Restore INT with the resolved API names and then update the pointers in
the PE header to point to the found IAT and restored INT.
To defeat DLL unlinking, even if a loaded DLL is not listed on PEB, we can
ﬁnd the existence of an unlinked DLL by parsing VADs if we use ldrmodules,
which is a plugin of The Volatility Framework [11]. In addition, Rekall [17]
identiﬁes loaded DLLs in memory dumps on the basis of the debug section
included in the PE header of each loaded DLL. In a PE header, a globally unique
identiﬁer (GUID) can be contained, and Rekall sends a query to a Microsoft
symbol server to ﬁnd the DLL related to the GUID.
Some dynamic analysis tools, such as Cuckoo Sandbox [15], make the corre-
spondence between addresses and API names by monitoring APIs or events. For
222
Y. Kawakoya et al.
example, by monitoring LoadLibrary, we can get both the loaded address of a
DLL and its ﬁle name at the same time since the address is returned from this
API and the ﬁle name is passed to this API.
To ﬁght against API redirection, Sharif et al. [18] proposed an approach of
statically analyzing control ﬂows from call instructions until the ﬂows reach any
API code. Even if there is a stub between them, their approach can get over it
by continuously analyzing ﬂows to the end of a stub.
To overcome stolen code, shown in Fig. 1-(c), Kawakoya et al. [9] proposed a
way of tracking the movement of API code with taint analysis. Their approach
sets taint tags on API code and tracks them by propagating the tags to identify
the position of copied instructions.
2.3 Analysis
A common intention of existing API obfuscations is to attack API name resolu-
tion, i.e., the intention is to make it diﬃcult to relate a virtual memory address to
an API name. If analysis tools fail to make the relationship between an executed
virtual memory address with an API name, they fail to recognize an execution