(__bridge id)kSecValueData: [@"secretpassword" dataUsingEncoding:
NSUTF8StringEncoding], (__bridge id)kSecUseNoAuthenticationUI: @YES,
(__bridge id)kSecAttrAccessControl: (__bridge id)sacObject
};
dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT,
0), ^(void){
OSStatus status = SecItemAdd((__bridge CFDictionaryRef)attributes,
nil);
});
First the SecAccessControlRef object is populated with the accessibility and access control options; this is then
added to the keychain using the methods previously described and using the global queue.
Accessing the iOS Keychain
Under the hood, the keychain is simply a SQLite database stored in the /var/Keychains directory, and it can be
queried like any other database. For example, to find the list of the keychain groups execute the following query:
# sqlite3 keychain-2.db "select agrp from genp"
com.apple.security.sos
apple
apple
apple
apple
ichat
com.mdsec.mahhapp
mdsecios:/var/Keychains root#
On a jailbroken phone, you can dump all the keychain items for any application under the same caveats
previously detailed with the Data Protection API. You do it by creating an application that is assigned a wildcard
keychain-access-groups and querying the keychain service to retrieve the protected items. This is the technique
used by the keychain_dumper tool (https://github.com/ptoomey3/Keychain-Dumper), which uses the “*” wildcard
for the keychain-access-groups value of the entitlements file. Here is a sample usage showing the items that
keychain_dumper can retrieve:
# ./keychain_dumper -h
Usage: keychain_dumper [-e]|[-h]|[-agnick]
: Dump Password Keychain Items (Generic Password, Internet
Passwords)
-a: Dump All Keychain Items (Generic Passwords, Internet Passwords,
Identities, Certificates, and Keys)
-e: Dump Entitlements
-g: Dump Generic Passwords
-n: Dump Internet Passwords
-i: Dump Identities
-c: Dump Certificates
-k: Dump Keys
mdsecios:~ root#
Using keychain_dumper to access the generic passwords, keychain items can sometimes reveal application
credentials, as shown in the following example:
Generic Password
----------------
Service:
Account: admin
Entitlement Group: com.mdsec.mahhapp
Label:
Generic Field: mahhapp
Keychain Data: secret
Because the keychain is simply a SQLite database, reading the encrypted data directly from the database and
then decrypting it using the AppleKeyStore service, which is exposed via the MobileKeyBag private framework, is
also possible. This is the approach taken by the keychain_dump tool developed by Jean-Baptiste Bedrune and
Jean Sigwald (https://code.google.com/p/iphone-dataprotection/source/browse/?repo=keychainviewe).
Simply running the keychain_dump tool causes it to generate a number of plist files that provide a verbose
description on each of the keychain items:
# ./keychain_dump
Writing 7 passwords to genp.plist
Writing 0 internet passwords to inet.plist
Writing 0 certificates to cert.plist
Writing 4 keys to keys.plist
Understanding Touch ID
Touch ID is a fingerprint recognition feature that was introduced with the iPhone 5s; you access it by pressing
the home button on the device. The Touch ID sensor provides the user with an alternative means of
authentication to entering the device passcode and can be used to unlock the device, approve App Store and
iBooks purchases, and—as of iOS 8—be integrated as a means of authentication to third-party applications.
The Secure Enclave holds cryptographic material such as the data protection class keys. When a device is locked
the key material for the complete protection class is discarded, meaning that these items cannot be accessed
until the user unlocks the device again. On a device with Touch ID enabled, however, the keys are not discarded
but held in memory, wrapped using a key that is available only to the Touch ID subsystem. When the user
attempts to unlock the device using Touch ID, if the fingerprint is matched, the Touch ID subsystem provides
the key for unwrapping the complete data protection class and by proxy the device. Through this simplistic
process, the Touch ID system is able to unlock the device and provide access to data-protected resources. Note,
however, that the Touch ID system is not infallible and has indeed been proven to be breakable by an attacker
who is able to procure fingerprints and has physical access to the device
(http://www.ccc.de/en/updates/2013/ccc-breaks-apple-touchid).
Earlier in this chapter you learned how Touch ID authentication can be used with the keychain. However, using
the Touch ID sensor as a form of authentication using the LocalAuthentication framework is also possible.
Some subtle differences exist in how these implementations work—primarily the trust relationship is between
the application and the OS as opposed to the Secure Enclave as is with the keychain; applications have no direct
access to the Secure Enclave or the registered fingerprints. If this was not the case it could give rise to a
malicious application extracting and exfiltrating device fingerprints, which would clearly be a huge security
concern.
The LocalAuthentication framework API implements two key methods relevant to Touch ID:
canEvaluatePolicy—You can use this method to determine whether the Touch ID can ever be evaluated on
this device; that is, is the device Touch ID enabled or not?
evaluatePolicy—This method starts the authentication operation and shows the Touch ID interface.
Similarly to the keychain, a policy is available on which to base the authentication:
LAPolicyDeviceOwnerAuthenticationWithBiometrics. This policy, however, has no passcode-based fallback
authentication mechanism, and you should implement your own within the application.
The following example demonstrates how you can implement Touch ID authentication using the
LocalAuthentication framework:
LAContext *myCxt = [[LAContext alloc] init];
NSError * authErr = nil;
NSString *myLocalizedReasonString = @"Please Authenticate";
if ([myCxt canEvaluatePolicy:
LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&authErr]) {
[myCxt evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics
localizedReason:myLocalizedReasonString reply:^(BOOL success, NSError
*error) {
if (success) {
NSLog(@"Fingerprint recognised");
} else {
switch (error.code) {
case LAErrorAuthenticationFailed:
NSLog(@"Fingerprint unrecognised");
break;
case LAErrorUserCancel:
NSLog(@"User cancelled authentication");
break;
case LAErrorUserFallback:
NSLog(@"User requested fallback authentication");
break;
default:
NSLog(@"Touch ID is not enabled");
break;
}
NSLog(@"Authentication failed");
}
}];
} else {
NSLog(@"Touch ID not enabled");
}
You should be aware that because the trust relationship is with the OS as opposed to the Secure Enclave (and as
with any client-side authentication), it can be bypassed in situations whereby an attacker has compromised the
device.
Reverse Engineering iOS Binaries
A blackbox assessment of any iOS application will almost certainly require some degree of reverse engineering
to gain the necessary understanding of the inner workings of the application. In this section we review the
different types of iOS binaries that you may encounter, how to get these binaries into a format that you can
work with, and how to identify some security-relevant features in these binaries.
Analyzing iOS Binaries
As documented in earlier sections, iOS applications compile to native code using the Mach-O file format, similar
to that used in the OS X operating system. Multiple Mach-O files can be archived in one binary to provide
support for different architectures; these are known as fat binaries. Applications that are downloaded from the
App Store will also be encrypted and later decrypted at run time, on-device by the loader. A brief introduction to
the Mach-O file format appears in the following section. If, however, you prefer an in-depth analysis then we
recommend you refer to the file format reference as documented by Apple
(https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/Reference/reference.html
At a high-level the Mach-O file format is composed of three major regions (graphically illustrated in Figure 2.5):
Header—This is the first region of a Mach-O. It is used to identify the file format, and details the
architecture and other basic information that can be used to interpret the rest of the file.
Load commands—Directly following the header are a number of load commands that detail the layout and
linkage specifications for the file. The load commands specify, among other things, the location of the
symbol table, information on the encrypted segments of the file, names of shared libraries, and the initial
layout of the file in virtual memory.
Data—Following the load commands are one or more segments consisting of a number of sections; these
contain the code or data that subsequently gets mapped to virtual memory by the dynamic linker.
Figure 2.5 The Mach-O file format
Fat binaries exist to provide support for many devices because the CPU can differ between iOS hardware.
Currently, the latest Apple CPU is the A8 Cyclone chip, which supports armv8, otherwise known as arm64
instructions. This chip is present only in the iPhone 6 and iPhone 6 Plus devices. An application compiled with
only arm64 support would therefore only work on these and A7 chip devices and as you can see from Table 2.4,
architecture support across devices can vary significantly. Without fat binaries an organization would need to
submit device-specific releases of an application to the App Store. The architectures that you are most likely to
encounter during your assessments are arm7, armv7s, and arm64; these provide support for the devices shown
in Table 2.4.
Table 2.4 Architecture Support in Modern iOS Devices
ARCHITECTURE IPHONE IPOD TOUCH IPAD IPAD MINI
Armv7 3GS, 4, 4S, 5, 5C, 5S 3rd, 4th, 5th generation All versions All versions
Armv7s 5, 5C, 5S No support 4th generation, Air 2nd generation
Arm64 5S, 6, 6 Plus No support Air 2nd generation
To identify the architectures compiled into a fat binary you can use otool to print the Mach-O header
information, as shown here:
mdsecmbp:mahhswiftapp.app shell$ otool -hv mahhswiftapp
mahhswiftapp (architecture armv7):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds
flags
MH_MAGIC ARM V7 0x00 EXECUTE 31 2908
NOUNDEFS DYLDLINK TWOLEVEL BINDS_TO_WEAK PIE
mahhswiftapp (architecture armv7s):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds
flags
MH_MAGIC ARM V7S 0x00 EXECUTE 31 2908
NOUNDEFS DYLDLINK TWOLEVEL BINDS_TO_WEAK PIE
mahhswiftapp (architecture cputype (16777228) cpusubtype (0)):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds
flags
MH_MAGIC_64 16777228 0 0x00 EXECUTE 31 3376
NOUNDEFS DYLDLINK TWOLEVEL BINDS_TO_WEAK PIE
mdsecmbp:mahhswiftapp.app shell$
In this example, the mahhswitftapp binary archive contains three architectures: armv7, armv7s, and arm64. On
occasion, otool is unable to determine the architecture correctly, as in the previous example where it doesn’t
explicitly display the arm64 CPU type. You can use Table 2.5 as a point of reference to identify unknown
architectures.
Table 2.5 ARM Architectures
ARCHITECTURE CPU TYPE CPU SUBTYPE
ARMv6 12 6
ARMv7 12 9
ARMv7S 12 11
ARM64 16777228 0
You may find that you need to remove one or more architectures from a binary. For example, many of the
current tools for manipulating and attacking iOS applications lack arm64 support because it’s a relatively new
introduction to the iOS device family. You can, however, remove whole architectures from a fat binary using
lipo. The following example extracts the armv7 architecture from the previous archive and saves it in a new
binary:
$ lipo -thin armv7 mahhswiftapp -output mahhswiftappv7
If you print the header output on the newly created binary, you can see it only contains the armv7 slice:
$ otool -hv mahhswiftappv7
mahhswiftappv7:
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds
flags
MH_MAGIC ARM V7 0x00 EXECUTE 31 2908
NOUNDEFS DYLDLINK TWOLEVEL BINDS_TO_WEAK PIE
$
Identifying Security-Related Features
Earlier in this chapter we described some of the platform security features that exist in the iOS operating
system. However, a number of other security configurations exist that applications can optionally take
advantage of to further increase their built-in protection against memory corruption vulnerabilities, as detailed
in the following sections.
Position-Independent Executable
Position-Independent Executable (PIE) is an exploit mitigation security feature that allows an application to
take full advantage of ASLR. For this to happen, the application must be compiled using the —fPIC —pie flag;
using XCode this can be enabled/disabled by setting the value of the Generate Position-Dependent Code option
from the Compiler Code Generation Build setting. An application compiled without PIE loads the executable at a
fixed address. Consider the following simple example that prints the address of the main function:
int main(int argc, const char* argv[])
{
NSLog(@"Main: %p\n", main);
return 0;
}
If you compile this without PIE and run it on an iOS device, despite systemwide ASLR, the main executable
remains loaded at a fixed address:
# for i in 'seq 1 5'; do ./nopie-main;done
2014-03-01 16:56:17.772 nopie-main[8943:707] Main: 0x2f3d
2014-03-01 16:56:17.805 nopie-main[8944:707] Main: 0x2f3d
2014-03-01 16:56:17.837 nopie-main[8945:707] Main: 0x2f3d
2014-03-01 16:56:17.870 nopie-main[8946:707] Main: 0x2f3d
2014-03-01 16:56:17.905 nopie-main[8947:707] Main: 0x2f3d
If you recompile the same application with PIE enabled, the application loads the main executable at a dynamic
address:
# for i in 'seq 1 5'; do ./pie-main;done
2014-03-01 16:57:32.175 pie-main[8949:707] Main: 0x2af39
2014-03-01 16:57:32.208 pie-main[8950:707] Main: 0x3bf39
2014-03-01 16:57:32.241 pie-main[8951:707] Main: 0x3f39
2014-03-01 16:57:32.277 pie-main[8952:707] Main: 0x8cf39
2014-03-01 16:57:32.310 pie-main[8953:707] Main: 0x30f39
From a blackbox perspective, you can verify the presence of PIE using the otool application, which provides
functionality to inspect the Mach-O header as shown in earlier examples. For the two test applications, you can
use otool to compare the headers of the two binaries and the output:
# otool -hv pie-main nopie-main
pie-main:
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds
flags
MH_MAGIC ARM 9 0x00 EXECUTE 18 1948
NOUNDEFS DYLDLINK TWOLEVEL PIE
nopie-main:
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds
flags
MH_MAGIC ARM 9 0x00 EXECUTE 18 1948
NOUNDEFS DYLDLINK TWOLEVEL
Since iOS 5, all the built-in Apple applications are compiled with PIE by default; however, in practice many
third-party applications do not take advantage of this protection feature.
Stack-Smashing Protection
A further binary protection that iOS application can apply at compile time is stack-smashing protection.
Enabling stack-smashing protection causes a known value or “canary” to be placed on the stack directly before
the local variables to protect the saved base pointer, saved instruction pointer, and function arguments. The
value of the canary is then verified when the function returns to see whether it has been overwritten. The LLVM
compiler uses a heuristic to intelligently apply stack protection to a function, typically functions using character
arrays. Stack-smashing protection is enabled by default for applications compiled with recent versions of Xcode.
From a black box perspective you can identify the presence of stack canaries by examining the symbol table of
the binary. If stack-smashing protection is compiled into the application, two undefined symbols will be present:
___stack_chk_fail and ___stack_chk_guard. You can observe the symbol table using otool: