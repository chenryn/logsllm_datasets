# 【技术分享】GitHub企业版SQL注入漏洞分析

## 译文声明
本文为翻译文章，原文来源于 [orange.tw](http://blog.orange.tw/)。具体内容表达及含义以原文为准。

**作者**: [Orange Tsai](http://blog.orange.tw/)  
**翻译**: [scriptkid](http://bobao.360.cn/member/contribute?uid=2529059652)  
**预估稿费**: 100RMB（不服你也来投稿啊！）  
**投稿方式**: 发送邮件至 [linwei#360.cn](mailto:linwei@360.cn)，或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿。

---

## 前言
GitHub企业版是 [github.com](https://github.com/) 的定制版本，允许用户在自己的私有网络中部署完整的 GitHub 服务以用于商业用途。你可以在 [enterprise.github.com](https://enterprise.github.com/) 下载相应的虚拟机 (VM) 并获得45天的试用权。完成部署后，你会看到如下界面：

现在我们已经拥有了所有的 GitHub 环境，接下来我们将进一步深入探索。

## 具体环境
首先，我们从端口扫描开始。使用 Nmap 进行扫描后，我们发现 VM 中开放了六个端口：

```bash
$ nmap -sT -vv -p 1-65535 192.168.187.145    
...
PORT     STATE  SERVICE
22/tcp   open   ssh
25/tcp   closed smtp
80/tcp   open   http
122/tcp  open   smakynet
443/tcp  open   https
8080/tcp closed http-proxy
8443/tcp open   https-alt
9418/tcp open   git
```

经过简单的推敲和服务探测，得出以下结论：
- 22/tcp 和 9418/tcp 对应的服务似乎是 haproxy，它将连接转发到后端名为 babeld 的服务。
- 80/tcp 和 443/tcp 对应的主要 GitHub 服务。
- 122/tcp 是 SSH 服务。
- 8443/tcp 是 GitHub 的管理控制台。

顺便提一下，GitHub 管理控制台需要密码登录。一旦获取密码，你可以添加你的 SSH 密钥并通过 122/tcp 连接到 VM。通过 SSH 连接到 VM 后，我们检查了整个系统，发现服务的代码库位于 `/data/` 文件夹下。

```bash
# ls -al /data/    
total 92
drwxr-xr-x 23 root              root              4096 Nov 29 12 :54 .
drwxr-xr-x 27 root              root              4096 Dec 28 19:18 ..
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 alambic
drwxr-xr-x  4 babeld            babeld            4096 Nov 29 12:53 babeld
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 codeload
drwxr-xr-x  2 root              root              4096 Nov 29 12:54 db
drwxr-xr-x  2 root              root              4096 Nov 29 12:52 enterprise
drwxr-xr-x  4 enterprise-manage enterprise-manage 4096 Nov 29 12:53 enterprise-manage
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 failbotd
drwxr-xr-x  3 root              root              4096 Nov 29 12:54 git-hooks
drwxr-xr-x  4 git               git               4096 Nov 29 12:53 github
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 git-import
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 gitmon
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 gpgverify
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 hookshot
drwxr-xr-x  4 root              root              4096 Nov 29 12:54 lariat
drwxr-xr-x  4 root              root              4096 Nov 29 12:54 longpoll
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 mail-replies
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 pages
drwxr-xr-x  4 root              root              4096 Nov 29 12:54 pages-lua
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 render
lrwxrwxrwx  1 root              root                23 Nov 29 12:52 repositories -> /data/user/repositories
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 slumlord
drwxr-xr-x 20 root              root              4096 Dec 28 19:22 user
```

切换到 `/data/` 文件夹并尝试查看源代码，但似乎被加密了。GitHub 使用自定义库对源代码进行混淆。如果你在 Google 上搜索 `ruby_concealer.so`，会发现有人在这个 [gist](https://gist.github.com/geoff-codes/02d1e45912253e9ac183) 上写了一个小片段。简单地将 `rb_f_eval` 替换为 `rb_f_puts` 就可以了，但作为一个黑客，我们不能仅仅使用现成的方法而不知道到底发生了什么。因此，让我们使用 IDA Pro 进行分析！

如你所见，程序使用 `Zlib::Inflate::inflate` 解压数据，并与以下密钥进行 XOR 操作：

```plaintext
This obfuscation is intended to discourage GitHub Enterprise customers from making modifications to the VM. We know this 'encryption' is easily broken.
```

我们可以很容易地自己完成该操作：

```ruby
require 'zlib'
key = "This obfuscation is intended to discourage GitHub Enterprise customers from making modifications to the VM. We know this 'encryption' is easily broken. "
def decrypt(s)
    i, plaintext = 0, ''
    Zlib::Inflate.inflate(s).each_byte do |c|
        plaintext << (c ^ key[i%key.length].ord).chr
        i += 1
    end
    plaintext
end
content = File.open(ARGV[0], "r").read
content.sub! %Q(require "ruby_concealer.so"n__ruby_concealer__), "decrypt"
plaintext = eval content
puts plaintext
```

## 代码分析
解开所有代码的混淆后，我们可以开始代码审计了。

```bash
$ cloc /data/    
   81267 text files.
   47503 unique files.
   24550 files ignored.
http://cloc.sourceforge.net v 1.60  T=348.06 s (103.5 files/s, 15548.9 lines/s)
-----------------------------------------------------------------------------------
Language                         files          blank        comment           code
-----------------------------------------------------------------------------------
Ruby                             25854         359545         437125        1838503
Javascript                        4351         109994         105296         881416
YAML                               600           1349           3214         289039
Python                            1108          44862          64025         180400
XML                                121           6492           3223         125556
C                                  444          30903          23966         123938
Bourne Shell                       852          14490          16417          87477
HTML                               636          24760           2001          82526
C++                                184           8370           8890          79139
C/C++ Header                       428          11679          22773          72226
Java                               198           6665          14303          45187
CSS                                458           4641           3092          44813
Bourne Again Shell                 142           6196           9006          35106
m4                                  21           3259            369          29433
...
```

希望这些信息对你有所帮助。继续深入探索，你可能会发现更多有趣的内容。