# 【技术分享】Github企业版SQL注入漏洞分析
|
##### 译文声明
本文是翻译文章，文章来源：orange.tw
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**作者：[Orange Tsai ](http://blog.orange.tw/) 翻译：**[ **scriptkid**
****](http://bobao.360.cn/member/contribute?uid=2529059652)
**预估稿费：100RMB（不服你也来投稿啊！）**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**  
**
**前言**
Github企业版是[github.com](https://github.com/)的一款定制版本，你可以用其在自己的私人网络中部署属于自己的完整github服务以用于商业目的。你可以在[enterprise.github.com](https://enterprise.github.com/)下载到相应的VM并获得45天的试用权，在你完成部署后，你将看到如下内容：
现在，我们拥有了所有的Github环境了，很有趣，所以我决定进一步深入。
**具体环境**
首先我们从端口扫描开始入手，在使用完我们的好朋友-Nmap之后，我们发现了VM中开放了6个端口。
        $ nmap -sT -vv -p 1-65535 192.168.187.145    
        ...
        PORT     STATE  SERVICE
        22/tcp   open   ssh
        25/tcp   closed smtp
        80/tcp   open   http
        122/tcp  open   smakynet
        443/tcp  open   https
        8080/tcp closed http-proxy
        8443/tcp open   https-alt
        9418/tcp open   git
在经过简单的推敲和服务探测后得出以下结论：
22/tcp和9418/tcp对应的服务像是haproxy，其将连接转发到后端名为babeld的服务。
80/tcp和443/tcp对应的为主要的Github服务。
122/tcp为SSH服务。
8443/tcp为Github的管理控制台。
顺便提一下，Github管理控制台需要密码登录，一旦你获取了密码，你就可以添加你的SSH
key并通过122/tcp来连接到VM。通过SSH连接到VM，我们检测了整个系统，然后发现服务的代码库应该是位于/data/文件夹下。
    # ls -al /data/    
        total 92
        drwxr-xr-x 23 root              root              4096 Nov 29 12:54 .
        drwxr-xr-x 27 root              root              4096 Dec 28 19:18 ..
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 alambic
        drwxr-xr-x  4 babeld            babeld            4096 Nov 29 12:53 babeld
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 codeload
        drwxr-xr-x  2 root              root              4096 Nov 29 12:54 db
        drwxr-xr-x  2 root              root              4096 Nov 29 12:52 enterprise
        drwxr-xr-x  4 enterprise-manage enterprise-manage 4096 Nov 29 12:53 enterprise-manage
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 failbotd
        drwxr-xr-x  3 root              root              4096 Nov 29 12:54 git-hooks
        drwxr-xr-x  4 git               git               4096 Nov 29 12:53 github
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 git-import
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 gitmon
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 gpgverify
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 hookshot
        drwxr-xr-x  4 root              root              4096 Nov 29 12:54 lariat
        drwxr-xr-x  4 root              root              4096 Nov 29 12:54 longpoll
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 mail-replies
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 pages
        drwxr-xr-x  4 root              root              4096 Nov 29 12:54 pages-lua
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 render
        lrwxrwxrwx  1 root              root                23 Nov 29 12:52 repositories -> /data/user/repositories
        drwxr-xr-x  4 git               git               4096 Nov 29 12:54 slumlord
        drwxr-xr-x 20 root              root              4096 Dec 28 19:22 user
切换到/data/文件夹下然后尝试查看源代码，但是貌似被加密了。
Github使用了自定义库来对源代码进行混淆，如果你Google搜索ruby_concealer.so，你就会发现有热心人士在这个[gist](https://gist.github.com/geoff-codes/02d1e45912253e9ac183)上写了一个小片段。在ruby_concealer.so中简单地将rb_f_eval替换为rb_f_puts就可以了，但是作为一个hacker，我们不能仅仅是使用现成的办法而不知道到底发生了什么。因此，让我们使用IDA
Pro来进行分析！
正如你所看到的，程序使用Zlib::Inflate::inflate来解压数据并与下面的key进行XOR操作：
    This obfuscation is intended to discourage GitHub Enterprise customers from making modifications to the VM. We know this 'encryption' is easily broken.
所以我们可以很容易地自己完成该操作：
        require 'zlib'
        key = "This obfuscation is intended to discourage GitHub Enterprise customers from making modifications to the VM. We know this 'encryption' is easily broken. "
        def decrypt(s)
            i, plaintext = 0, ''
            Zlib::Inflate.inflate(s).each_byte do |c|
                plaintext << (c ^ key[i%key.length].ord).chr
                i += 1
            end
            plaintext
        end
        content = File.open(ARGV[0], "r").read
        content.sub! %Q(require "ruby_concealer.so"n__ruby_concealer__), " decrypt "
        plaintext = eval content
        puts plaintext
**代码分析**
在解开所有代码的混淆后，我们就可以开始代码审计了。
        $ cloc /data/    
           81267 text files.
           47503 unique files.
           24550 files ignored.
        http://cloc.sourceforge.net v 1.60  T=348.06 s (103.5 files/s, 15548.9 lines/s)
        -----------------------------------------------------------------------------------        Language                         files          blank        comment           code
        -----------------------------------------------------------------------------------        Ruby                             25854         359545         437125        1838503
        Javascript                        4351         109994         105296         881416
        YAML                               600           1349           3214         289039
        Python                            1108          44862          64025         180400
        XML                                121           6492           3223         125556
        C                                  444          30903          23966         123938
        Bourne Shell                       852          14490          16417          87477
        HTML                               636          24760           2001          82526
        C++                                184           8370           8890          79139
        C/C++ Header                       428          11679          22773          72226
        Java                               198           6665          14303          45187
        CSS                                458           4641           3092          44813
        Bourne Again Shell                 142           6196           9006          35106
        m4                                  21           3259            369          29433
        ...