性。但会使程序需要耗费启动线程所需要的时间。
Thread-Per-Message Pattern (第 7章)
Channel 参与者。
应到 Producer-Consumer Patterm 的 Producer Pattern 上j Consumer 参与j者。
Consumcr Pattern。Worker Thread Pattern 的 Client 参与§者与 Worker 参与者，分别对
Producer-Consumer Pattern（第 5章）
这样可以节省启动线程所需的时间。
相关Pattern
Worker Thread Pattern 的 Channcl 参与j者，对应到 Producer-Consumer Pattern 的
Worker Thread Patterm 中传递 Request 参与者的部分，使用到了Producer-
Flywcight Pattern 则必须注意共享的实例所具有的信息。应该共享的信息
Flyweight Pattem 中，通过共亨实例来节省内存。
Client 参与者想要获取 Worker 参与者的执行结果时，需要使用到 Future
在 Worker Thread Pattern 中，Worker 参与者接受工作进行作业的部分，使用到
Worker Thread Pattern 中则通过共享线程来节省启动线程所需的时间。不过即使
Thread-Per-Message Pattem 会将工作交付给新建立的线程，以提高程序的响应
Worker Thread-
一等到工作来，来了就工作
梁8草
128
---
## Page 230
执行结束后，再回来事件队列，接着取出下-个事件。就·直不断重复这样的工
cvent-dispatching thread就是工人线程（Worker 参与者）。
参与者，传给名为“事件队列”的Channel参与者。Client 参与者则是对应到管
此。单击按钮、移动鼠标这些现象，在Swing 内部会转换成名为“事件”的 Request
java.awi.event.MouseEvent 类的实例。这些实例都存放在 Swing 内部的事件队列
java.awi.event.ActicnEvent这个类的实例，移动鼠标的话，会产
象我们称之为事件（event）。以 Swing 的类的形式米表达。例如单击按钮，会产生
应用程序必须处理我们进行的这些操作。这里“点选按钮”、“移动鼠标光标”等现
件分配线程）的运行。
何谓 Event-Dispatching Thread
理鼠标、
Active Object Pattern（第12章）
Thread-Specific Storage Patterml ,
Thread-Specific Storage Pattern（第 11 章）
独有的信息，工作独有的信息应该放在Request 参与者里，
（event queue）里。
该放到实例中，
来。
进阶说明：Swing 的 Event-Dispatching Thread
看到这里为止，观察敏锐的读者可能已经在想，是不是Swing的“事件“
使用GUI应用程序时，我们可以白由地点选按钮、移动鼠标光标等等。而GUI
使用 Swing 建立GUI应川程序时，需要意识到(the)event-dispatching thread（事
Evcnt-dispatching thread会从事件队列里取出一个事件，并执行这个事件。
如果前面所说的您都了解，那要懂event-dispatching thread 就不难了。因为
Worker Thread Pattern 也要注意一样的问题。T人线程中，不应该拥行个别工作
-  n a 4  d  a
工人线程中，没有存放每件“作独有的信息，所以对“人线程不能使用
Thread-SpecificStoragePattern川来确保住线程独有的领域，
、键盘等事件来源的部分，这个被 Swing 内部隐藏起来，从外面看不出
---
## Page 231
dispatching thread川不知道mouseMoved方法里具体的操作内容。
的实例的对象（Listener）的 mouseMoved 方法。与 actionPerformed一样，Event-
队列。Event-dispatchingthread获取这个实例要执行时，会调用用来处理MouseEvent
actionPerformed 方法而mi己。
道这个方法里会做些什么事，event-dispatching thread只是单纯地去调川
例的对象”（Listener）的 actionPerformed方法。Event-dispatching thread其实并不知
里。当Event-dispatching thread 获取这个实例，会去调用“用来处理ActionEvent 实
考事件要怎么“执行”。
Event-dispatching thread 会调用 Listener
器）的方法，
有-一条，所以event-dispatching thread所调用的方法，都不需要为工人线程进行共亨
丘斥的问题，反面带来极大的优点。因为 Swing 的event-dispatching thread设计成只
就是说工人线程（Worker参与者）只有一个人。
Producer-Consumer Pattern 的 Consumer 参与者．evcnt-dispatching thread 只有一条
过只有一个 Consumer 的情况。Worker Thread Pattern 的 Worker参与者，就相当于
the+单数形式”表达，这是因为(the)event-dispatching thread在系统中是“独
Event-dispatching thread 只有一条
F.斥。
或是史精简的the event thread。但无论是哪个名字，在英文里它总是以“定冠词
件进来。
作。如果事件队列里没有任何事件，event-dispatching thread 就会停下来等待事
而移动鼠标时呢？这个时候 java.awt.event.MouseEvent 类的实例会被塞进事件
例如，单击按钮的时候，java.awt.event.ActionEvent类的实例会被放进事件队列
Event-dispatching thread 进行的操作之一，是调用各种Listener（收听者、监听
Event-dispatching thread的顺序图和时序图，如图8-7和图8-8所示。
我们已经了解到Event-dispatching thread 会去执行事件，接下来我们要具体思
Worker参与者只有一条时，乍看之下会丧失多线程的优点，但是可以省略共享
不知读者是否还记得在Producer-Consumer Pattern（第5章）中，我们曾经讨论
Event-dispatching thread 有很多名称。它也被称作 the event dispatch thread,
这正是 Worker Thread Pattern,
Worker Thread
一等到工作来，来了就工作
8算
2
---
## Page 232
216
管理鼠标的部分
放入ActionEvent
 8-8Evenmt-dispatching thread 的时序图（单击按钮时）
图8-7
Event-dispatching thread 的顺序图（单击按钮时）
事件队列
取得下
事件队列
个事件
evetit-dispatching
thread
  取摄高件
actionperformed
中
event--
ching
---
## Page 233
介绍其中3个与Event-dispatching thread 有关的方法（见表8-2）。
javax.swing.SwingUtilities 类
方法（update 或 paint)。
Event-dispatching thread 也处理画面的重绘
上，重绘的操作还是由 Event-dispatching thread 另外处理的。
Listener”的意义。对组件注册Listener，其实就是对组件设置当事件发生时，
就是要这样做"，而机械地作注册Listener 的操作。
“Event-dispatching thread 所要调月的方法所在的实例”。
注册Listener 的意义
“注册Listener”的经验吧，
说明
名
说明
名称
说明
名称
称
当我们想要重绘画面的时候，会去调用repaint 方法。但调用 repaint 方法，其
javax.swing.SwingUtilities 类中，收集了Swing 相关的许多方便的方法。在这里
Event-dispatching thread除了调用Listener 的方法以外，还会调用画面重绘用的
有用Swing 撰写程序的人，应该都有写过按钮（JButton）这些组件（JComponent)
static boolean isEventDispatchThread()
想要访问GUI组件时
件都执行完后，才会真正地被执行。通常会用在当Event-dispatching thread 以外的线程
static void invokeLater(Runnable doRun)
InvocationTargetException 的 getTargetException 方法获取
static void invokeAndWait(Runnable runnable)
rumnable.nn也执行完以后，
throws InterruptedException, InvocationTargetException
表 8-2 javax.swing.SwingUuties 类的方便的方法
，具体来说，就是调用addActionListener 方法或
Worker Thread-
，当目前囤积的所有事件处理完，
等到工作来，来了就工作
第8草
---
## Page 234
篇进阶说明所介绍过的内容作个总结”1（见图8-9）。
Swing的单线程规则
的线程（调用isEventDispatchThread方法的线程）是不是Event-dispatching thread。
等待Runnable对象执行结束。只把塞进事件队列，就马上退出。
invokeLater方法
象，使用 invokeAndWait方法（或是 invokeLater）方法交给 Event-dispatching thread
线程（Event-dispatching thread 以外的线程）去调用组件的方法，其实是危险的。
这一个线程会对它访问，所以都不是线程安全的。也就是说，我们若以自己建立的
所以不需要共享互斥"。大部分的Swing 的组件都假设只有event-dispatching thread
方法也执行完毕以后，才会从invokeAndWait方法退出。
传入的Runnable对象执行完毕。也就是说，要等到调用invokeAndWait方法的时间
操作塞进Swing的事件队列。
来调川。
论如何都想要调用组件的方法时，就该将要执行的操作的内容建立成Runnable 对
点，事件队列中已经存放的所有事件都执行完，并且参数传入的Runnable对象的 run
象的是Event-dispatching thread。也就是说，使用invodeAndWait 方法，可以将任意
invokeAndWait 方法
在这里要介绍 Swing 的单线程规则（The Single-Thread Rule）。这个守则可为这
使用 javax.swing.SwingUtilities 类的 isEventDispatchThread 方法，可以检查现在
invokeLater方法的操作与invokeAndWait方法类似。不过 invokeLater 方法不会
invokeAndWait是“启动并等待”的意思。如同其名，这个方法会等待参数中
invokeAndWait 方法，会执行参数中传入的 Runnable 对象。不过，执行这个对
所谓组件被实现（realized），是指组件处在已经可以调用 paint 方法的状态。具
当 Swing 组件一旦被实现，可能改变组件状态的程序代码、相依于状态的程序
图8-9Swing的单线程规则
无
---
## Page 235
[请就您对范例程序的认识，阅读下列语句，正确的请回答○，不正确的请回答
Producer-Consumer Pattern（第5章），将表示I作内容的实例传递给工人线程。
行工作的线程”分离开来，可提高程序的响应性。
其他可以执行 Listener 的新增及删除的方法全部
只有一条才得以成立的。程序员必须遵守这个守则，作为省去共享互斥、提高程序性能的代价，
thread执行。
是，一-且显示出来以后（设置为可显示以后），组件的方法就只能从Event-dispatching
或是这个组件是已经被实现的组件的子组件。
体来说，就是这个组件的setVisible(true)方法、show(方法、pack(方法已经被调用，
removeMouseMolionListener
addMouseMotionListener
removeActionListener
addActionListener
revalidatc
repaint
练习问题
重点回顾
使月Swing 开发程序时，必须遵守这个守则。这个守则是建立在Event-dispatching thread
这么一来，工人线程会负责执行工作，就不需要一直启动新的线程了。
另外，有
我们可以简单地说是，当组件还在准备时，由其他的线程调用也没有关系。可
问题8-1（基础知识的确认）
解答请见附录A
那么，就进入练习问题吧。
这就是 Worker Thread Pattcrn.
所以我们事先启动用来执行1作的线程（1人线程）备用：
但是，每次送出“作请求时，都为这个1作启动新的线程也很浪费。
X。
这章我们学习了Worker Thread Pattern
些方法即使在组件被实现后，仍然可由任何线程调用。表8-3是部分举例。
表8-3可从任何线程调用的方法举例
Worker Thread-
等到工作来，来了就工作
并使用
---
## Page 236
kxa移线者设理模武
在这里想要建立--个单击[countUp]按钮后，会每隔·秒依次显示出0、1、
[我们不可以使用 Event-dispatching thread 来调用 javax.swing.SwingUtilities 类的
220
范例程序使用了WorkerThreadPattem，上一个问题则使用了
[请改写范例程序的 Channel类（List 8-4），使得请求传进来时，就产生--个新
":BEGIN")；
public class Main l
这是为仆么呢？应该要如何修改呢？
秒就会显示出-一行字符串。可是GUI的部分却不是0、1、2、……这样递增，
实际执行程序后，我们发现控制台（console）画面如图8-10所示，每隔约1
按钮后，就会调用 MyFrame 类（List 8-7）的 countUp 方法。在这个方法里，
2、、9等数字的GUI应用程序。
问题8-5（在GUI上的应用）
invokeAndWait方法，为什么？
问题 8-4 ( event-dispatching thread )
Thread-Per-Message Patern。请测试这两个程序的 throughput（单位时闯可完成
约1秒钟。
我们使用labei字段（JLabel类）的 setText 方法显示出数字，并使用 sleep 休息
启动 Main类后，会建立出 MyFrame的实例并显示出 GUI。单击窗口里显示的
的处理量）有何差异。
问题 8-3（throughput)
而是在经过约10秒后：忽然显示出9（图8-11～图8-13）。
的线程来处理请求。
问题8-2（使用 Thread-Per-Message Pattern 会发生什么事）
List 8-6
（5）没有必要将execute 方法设成 synchronized。
（2）来自某个ClientThread 的request 再被执行(execute)时，来自同一个
（1）没有任何 request 的时候，WorkerThread 的线程会一直 sleep下去。
4）
（3）
 public static void main(String[l args) ↑
会调用 takeRequest 方法的只有WorkerThread。
会调用 putRequest 方法的只有 ClientThread。
System.out.println(Thread.currentThread().getName()
System,out.printlniThread.currentThread().getNamei)
new MyFrame();
Main 类(Main.java)
---
## Page 237
Thread Sample");
public class MyFrame extends JFrame implements ActionListener f
import
":END"};
import
import
import
import.
import
List 8-7
private void countup() ↑
public void actionPerformed (ActionEvent e) l
public MyFrame() [
private final JButton button = new JButton("countUp");
if (e.getsource() == button) ↑
java.awt.event.ActionListener;
java.awt.event.ActionEvent;
javax.swing.JFrame;
for （int i = 0; i < 10; i++) 
setVisible(true);
setDefaultCloseOperation (JFrame.EXIT_ON_CLoSE);
button.addActionListener(this);
getContent Pane() .add (button) ;
getContentPane() .add(label);
getCont.entPane() .setLayout (new FlowLayout());
super{"MyFrame"};
java.awt.FlowLayout;
javax.swing.JLabel;
pack(; 
javax.swing.JButton:
1catch (InterruptedException e) {
try 
label.setText("" + i);
（m（++)xaas:duno
countUp();
MyFrame 类 (MyFrame.java)
Thread.sleep(l000);
Worker Thread-
一等到工作来，来了就工作
第8章
---
## Page 238
为了使范例程序能在约5秒后自动结来，我们将Main类（List8-1）修改如下
AW-EvenLQueum-Q:countupetText{9）-执到这里gut画面终手没变了
AN-EventQuene-countlp：sText（6)
AWT-EventQueu-D+countUp:settext.（5)
AWT-EvenitQueue-0+countup:setText(4)
AWT-LvntQuese-D:coutup:etText（3)
AWT-EventQueue-p=contDpantText（2）
AWT-EyentDueus-0tcounttp:setText(1
H面设有变化
WT-yentQua-UcountptotTExt（0）+每隔秒会量示出一行字符年，
AWr-EentQuoue-Q:countDpnetText(9)
ANT-EventQune=0:countug:setTex7)
matn:EEGIN
问题B-6（结束工人线程）
（1）在Chinnel类（List8-4）加上stopAlWorker方法，这个方法可以用来结
（List8-8）请配合这个类，进行下列的修改操作。
8-12单击comrtUp]按扭后的画面（就这样持续10秒）
图8-13量后的两面1直接尾示用“9）
ByFraNe
En Cg T e
图8-11动后时面面
图8-10执行结果
coumtup
ContO
回
---
## Page 239
public class Main f
（2）有
List 8-8
public static void main(string[l args)
束掉ClientThread 的线程。
在ClientThread类（List 8-2）加上 stopThread方法，这个方法可以用来结
束排所有Channel类所管理的WorkerThread的线程：
 channel.stopAilWorkers();
alice.start(};
Channel channel = new Channel(5);
chris.stopThread();
bobby.stopThread() ;
alice.stopThread();
try 
chris.start(l;
bobby.start();
ClientThread chris = new (
ClientThread bobby = new ClientThread("Bobby", channel}:
ClientThread alice = new ClientThreadr"Alice",
channel.startworkers();
 Thread.sleep(5000);
修改后的 Main类（Main.java）
Worker Thread--
ClientThread{"Chris",
1！工人线程个数
一等到工作来，来了就工作
channel};
channel};
崇8张
---