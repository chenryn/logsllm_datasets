    ![Displaying all the pods in the current namespace to indicate status errors](img/B17338_07_08.jpg)
    图 7.8:其中一个 Pod 的状态为错误拉取或映像拉取后退
    您可能会看到一个名为**的错误状态或**的映像后退状态。这两个错误都是指 Kubernetes 无法从注册表中提取映像。**错误拉动**错误描述了这一点；**imagepullback**描述了 Kubernetes 将在重试下载映像之前退出(等待)。这种后退具有指数级的延迟，从 10 到 20 到 40 秒甚至更长，最长可达 5 分钟。****
5.  Run the following command to get the full error details:
    kubectl 描述 Pod /
    一个样本误差输出如图 7.9*所示。关键错误信息以红色突出显示:*
    ![Describing an individual pod to display more details on the error](img/B17338_07_09.jpg)
    图 7.9:使用描述显示了错误的更多细节
    这些事件清楚地表明，映像并不存在。诸如将无效凭证传递给私有 Docker 存储库之类的错误也会出现在这里。
6.  Let's fix the error by setting the image tag back to **v4**. First, type the following command in Cloud Shell to edit the deployment:
    kubectl 编辑部署/前端
7.  键入**/GB-前端**并点击*进入*将光标置于映像清晰度。
8.  点击 *I* 键进入插入模式。删除**v _ 不存在**，键入 **v4** 。
9.  现在，首先点击 *Esc* 键关闭编辑器，然后输入 **:wq！**点击*进入*。
10.  This should automatically fix the deployment. You can verify it by getting the events for the pods again.
    #### 注意
    因为 Kubernetes 进行了滚动更新，前端连续可用，没有停机时间。Kubernetes 意识到新规范有问题，并停止自动推出额外的更改。
当映像不可用或您无权访问容器注册表时，可能会出现映像拉取错误。在下一节中，您将探究应用本身中的一个错误。
### 应用错误
现在，您将看到如何调试应用错误。与上一节类似，这一节中的错误将是自我诱发的。调试问题的方法与我们用来调试运行中的应用的错误的方法相同。
1.  To start, get the public IP of the front-end service:
    忽必烈得到服务
2.  通过在浏览器中粘贴服务的公共 IP 连接到该服务。创建几个条目:
![Creating entries in the guestbook application](img/B17338_07_10.jpg)
图 7.10:在留言簿应用中输入几个条目
现在已经有一个留言簿应用的实例在运行。为了提高示例的体验，最好缩小前端，这样就只有一个副本在运行。
### 缩小前端
在*第三章*、*AKS*上的应用部署中，你了解到了前端的部署是如何配置**副本=3** 的。这意味着应用收到的请求可以由任何 pods 处理。要引入应用错误并记录错误，您需要对所有三个错误进行更改。
但是为了使这个例子更简单，将**副本**设置为 **1** ，这样您只需要对一个 pod 进行更改:
kubectl 规模-副本=1 个部署/前端
只运行一个副本将使引入错误变得更容易。现在让我们介绍这个错误。
### 引入应用错误
在这种情况下，您将使**提交**按钮无法工作。您需要为此修改应用代码:
#### 注意:
不建议通过使用 **kubectl exec** 在您的 pods 中执行命令来对您的应用进行生产更改。如果需要对应用进行更改，首选方法是创建新的容器映像并更新部署。
1.  You will use the **kubectl exec** command. This command lets you run commands on the command line of that pod. With the **-it** option, it attaches an interactive terminal to the pod and gives you a shell that you can run commands on. The following command launches a Bash terminal on the pod:
    忽必烈 exec -it - bash
    这将进入一个 Bash shell 环境，如图*图 7.11* :
    ![Executing a command to launch and enter a Bash terminal on the pod](img/B17338_07_11.jpg)
    图 7.11:获取一个容器的名称并访问容器内的外壳
2.  Once you are in the container shell, run the following command:
    apt 更新
    apt install -y 我来了
    前面的代码安装了 **vim** 编辑器，这样我们就可以编辑文件来引入错误。
3.  Now, use **vim** to open the **guestbook.php** file:
    我是 guestbook.php
4.  Add the following code at line 17, below the line **if ($_GET['cmd'] == 'set') {**. Remember, to edit a line in **vim**, you hit the *I* key. After you are done editing, you can exit by hitting *Esc*, and then type **:wq!** and press *Enter*:
    $ host = ' localhost
    if(！defined(' STDOUT '))define(' STDOUT '，fopen('php://stdout '，' w ')；
    fwrite(STDUT，“在‘set’命令开头的主机名”)；fwrite(STDOUT，$ host)；
    burite（STDOUT， "\n"）;
    文件看起来像*图 7.12* :
    ![Output displaying the updated code that introduced an error and additional logging](img/B17338_07_12.jpg)
    图 7.12:引入错误和附加日志记录的更新代码
5.  You have now introduced an error where reading messages will work, but not writing them. You have done this by asking the front end to connect to the Redis master at the non-existent localhost server. The writes should fail. At the same time, to make this demo more visual, we added some additional logging to this section of the code.
    通过浏览留言簿的公共 IP 打开留言簿应用，您应该会看到之前的条目:
    ![Guestbook application displaying entries from earlier](img/B17338_07_10.jpg)
    图 7.13:早期的条目仍然存在
6.  Now, create a new message by typing a message and hitting the **Submit** button:
    ![Creating a new message in the guestbook application](img/B17338_07_14.jpg)
    图 7.14:创建了一条新消息
    提交新消息会使其出现在应用中。如果没有更好的了解，您可能会认为条目已经成功写入数据库。但是，如果您刷新浏览器，您将看到消息不再存在。
7.  要验证消息尚未写入数据库，请在浏览器中点击**刷新**按钮；您将只看到初始条目，新条目已经消失:
![Refreshing the webpage to confirm there the new message wasn’t persisted](img/B17338_07_15.jpg)
图 7.15:新消息已经消失
作为应用开发人员或操作人员，您可能会收到这样的罚单:**新部署后，新条目不会持久化。修好它**。
### 使用日志识别根本原因
解决问题的第一步是获取日志。
1.  Exit out of the front-end pod for now and get the logs for this pod:
    出口
    立方日志〔t0〕
    #### 注意:
    您可以在 **kubectl 日志**后添加 **-f** 标志以获得实时日志流，如下所示: **kubectl 日志 -f** 。这在实时调试会话期间非常有用。
2.  You will see entries such as those seen in *Figure 7.16*:
    ![Output displaying the new message as part of the application logs](img/B17338_07_16.jpg)
    图 7.16:新消息显示为应用日志的一部分
3.  因此，当在代码的**集**部分写入数据库时，您知道错误在某个地方。当您在“set”命令 localhost 的开头看到条目**主机名时，您知道错误在这一行和客户端的开头之间，所以设置**$ host =“localhost”**一定是违规错误。这个错误并不像您想象的那样罕见，正如您刚刚看到的，除非有刷新浏览器的特定指令，否则很容易通过质量保证。对于开发人员来说，它可以很好地工作，因为他们可以在本地机器上运行一个 Redis 服务器。**
现在，您已经使用了 Kubernetes 中的日志来解决问题的根源，让我们开始解决错误，让我们的应用回到健康的状态。
### 解决问题
有两个选项可以修复您引入的这个 bug:您可以导航到 pod 并进行代码更改，也可以要求 Kubernetes 给我们一个健康的新 pod。不建议手动更改 pods，因此在下一步中，您将使用第二种方法。让我们通过删除有故障的 pod 来修复这个错误:
kubectl delete pod
由于有一个控制 PODS 的复制集，您应该立即获得一个从正确的映像开始的新 PODS。尝试再次连接到留言簿，并验证消息是否在浏览器刷新期间保持不变。
以下几点总结了本节中关于如何识别错误以及如何修复错误的内容:
*   错误有多种形式。
*   部署团队遇到的大多数错误都是配置问题。
*   使用日志来确定根本原因。
*   在容器上使用 **kubectl exec** 是一种有用的调试策略。
*   请注意，广泛地允许 **kubectl exec** 是一个严重的安全风险，因为它允许 Kubernetes 操作者直接在他们可以访问的 pods 中执行命令。确保只有一部分操作员能够使用 **kubectl exec** 命令。您可以使用基于角色的访问控制来管理这种访问限制，正如您将在*第 8 章，AKS* 中学习的那样。
*   打印到**标准输出**和**标准输出**的任何内容都会显示在日志中(独立于应用/语言/日志框架)。
在本节中，您向留言簿应用引入了一个应用错误，并利用 Kubernetes 日志来查明代码中的问题。在下一节中，您将了解 Kubernetes 中一个强大的机制，名为**就绪**和**活性探测器**。
## 就绪和活性探测器
在前一节中简单介绍了就绪性和活跃度探测器。在本节中，您将更深入地探讨它们。
Kubernetes 使用活跃度和就绪性探测器来监控应用的可用性。每个探头都有不同的用途:
*   一个**活性探测器**在应用运行时监控其可用性。如果活性探测失败，Kubernetes 将重启你的 Pod 。这对于捕捉死锁、无限循环或者仅仅是一个“卡住”的应用可能是有用的。
*   一个**就绪探测器**监控您的应用何时可用。如果准备探测失败，Kubernetes 将不会向未准备好的 Pod 发送任何流量。如果您的应用在变得可用之前必须经过一些配置，或者如果您的应用已经过载但正在从额外的负载中恢复，这将非常有用。由于就绪探测失败，您的应用将暂时得不到任何流量，从而能够从增加的负载中恢复。
活跃度和就绪性探测不需要从应用中的同一个端点提供服务。如果您有一个智能应用，该应用可以在保持健康的情况下停止循环(意味着不再有流量发送到该应用)。为了实现这一点，它将使就绪探测失败，但使活动探测保持活动状态。
让我们用一个例子来说明这一点。您将创建两个 nginx 部署，每个部署都有一个索引页和一个运行状况页。索引页将作为活跃度探测器。
### 建造两个网状容器
在本例中，您将使用几个网页来连接就绪和活动探测器。这些文件存在于本章的代码文件中。我们先来创建**index1.html**:
服务器 1
服务器 1
之后，创建**index2.html**:
服务器 2
服务器 2
让我们也创建一个健康页面，**healthy.html**:
这里一切都好
好
在下一步中，您将把这些文件装载到您的 Kubernetes 部署中。要做到这一点，您将把这些变成一个**配置图**，您将连接到您的 PODS。您已经在*第 3 章“AKS* 上的应用部署”中了解了配置图。使用以下命令创建**配置图**:
kubectl 从文件创建 config map server 1 = index 1 . html
kubectl 从文件创建 config map server 2 = index 2 . html
kubectl 创建 configmap 从文件健康=健康. html
这样，您就可以继续创建您的两个 web 部署了。两者非常相似，只是**配置图**发生了变化。第一个部署文件( **webdeploy1.yaml** )如下所示:
1 API 版本:apps/v1
2 种:部署
...
17 规格:
18 个容器:
19 -名称:nginx-1
20 图片:基尼系数:1 . 19 . 6-高山
21 个端口:
22 -容器港口:80
23 活动探测器:
24 httpGet:
25 路径:/health . html
26 端口:80
27 个初始延迟秒:3
28 周期秒:3
29 就绪探测器: