7.5.2创建跨站脚本
SQL注入是出现在Web应用中的一种很大的bug。不过，有时候确实想要一种不同的bug，
比如跨站脚本。通常可以使用SQL注入漏洞向应用程序引入不同类型的XSS。
如果提供给应用的输入无法自己回显，面要由应用程序从我们控制的 SQL查询中返回输
出，那么通常可以利用该漏洞实现与反射XSS攻击相同的效果。例如，如果应用返回下列查
询结果：
SELECT orderNum, orderDesc, orderAmount FROM tb1Orders
WHERE orderType - 123
并且orderType字段容易受到 SQL注入攻击，那么可以使用下列URL创建概念验证XSS
攻击：
https: / /wwr, example .org/MyOrders php?orderType=123+UNION+SELECT+1,
*, 1
与传统XSS不同，该应用程序不只是在响应中回显攻击有效载荷。可以通过修改SQL查
询来向查询结果添加有效载荷，应用程序会将查询结果复制到响应中。假设应用程序未对查询
结果执行任何输出编码（如果应用假定查询结果是值得信任的），攻击将会被成功执行。
对于其他情况，可以通过利用SQL注入漏洞来在应用程序中执行持久的XSS攻击。通常
288
---
## Page 303
第7章高级话题
机会。这些数据可能包含存储在数据库中的真正的HTML内容（比如使用产品ID检索到的产品
描述信息），也可能包含类似于用户显示名称和联系信息的数据项，它们被从数据库中检索出
来并被复制到HTML页面的模板中。
2008年到2009年之间出现的大量SQL注入攻击利用了一种能够自动识别目标数据库中所
有表的程序，并向每张表的每个文本列注入了一个指向恶意JavaScript文件的链接。不管何时
将修改后的数据复制到应用响应中，都会向用户提供攻击者的恶意脚本，该脚本之后会尝试利
用许多客户端漏洞来修改用户的电脑。
即便应用程序不包含任何可以将数据库数据未经审查地复制到应用响应中的功能，也仍然可
以通过SQL注入来发动这种攻击。如果可以修改数据库的影响以攻击底层操作系统（请参见第6章)，
就可以修改位于Web根目录中的静态内容，并向渲染给其他用户的页面注入任意JavaScript。
7.5.3在Oracle上运行操作系统命令
使用混合攻击并借助专门构思的数据库对象甚至可以在数据库服务器或数据库管理员的工
作站上运行操作系统命令。
如果使用双引号将表名引起来，那么下列表名是有效的，并且可以被Oracle接受：
CREATE TABLE *!rm Rf /" (a varchar2 (1)) ;
如果DBA或开发人员使用带spool命令(DBA编写动态SQL脚本时经常使用的技术）的
SQL*Plus脚本，那么SQL*Plus会清除上述例子中的双引号以便访问该对象。接下来SQL*Plus
会将感叹号解析成主机命令(UNIX中是！，Windows和VMS中是S)，并将感叹号后面的内容作
为操作系统命令执行。
下面是一个易受攻击的 SQL*Plus 脚本的例子。它创建了一个名为 test.sql 的 spool 文件，
之后执行该文件：
SPOOL test.sql
SELECT table_name FROM al1_tables WHERE owner=′SCOTT*;
SPOOL OFF
tbe's916
7.5.4利用验证过的漏洞
许多SQL注入漏洞位于验证过的功能中。在某些情况下，只有特权用户（比如应用管理员）
才可以访问并利用这些漏润。这种约束通常会轻微减病漏润的影响。
如果管理员在应用程序中完全可信，那么他们将能够直接在数据库中执行任意SQL查询
此时可认为那些只有管理员才能访问的SQL注入缺陷完全可以忽略。攻击者只有当修改了管
理员账户后才能利用这些缺陷。
不过，这样会忽视伪造跨站请求的可能。可以将该攻击技术与许多验证过的漏洞类型相结
合，以使非特权攻击者能够利用这些漏洞。请考虑一项管理员功能，它显示所选择用户的账户
信息：
https: / /www.example . org/admin/ViewUser .aspx?UID=123
UID参数容易受到SQL注入攻击，不过只有管理员才可以直接利用它。意识到该漏洞的
289
---
## Page 304
SQL注入攻击与防御（第2版）
攻击者可以通过伪造跨站请求来直接利用该bug-例如，如果攻击者创建了一个包含下列HTML
的Web页面，并且包含一个已经登录且正在访问该页面的管理员，那么他便可以通过执行注
入的SQL查询来创建一个由攻击者控制的新管理员用户：
2=I.xdse.xosoA/urupe/bxo otduexe*//:sd =xs bu>
+INSERT+INTO+USERS+ (u8ername, pass?ord, isAdmin) +VALUES+ (*pab1o′ ,
'quest45th*, true)“>
请注意，伪造跨站请求是一种单向攻击，攻击者无法仔细检索应用程序对攻击请求的响应。
因此，攻击者必须注入一个能引发有用副作用的SQL查询，面不是试图去读取敏感数据。
这里包含的寓意是：伪造跨站请求不需要涉及真正用于执行敏感操作的应用程序功能。在
刚刚介绍的例子中，即使应用程序中包含一项显式功能来执行只有管理员才能访问（未受伪造
请求保护)的任何SQL查询，也井不会降低受到攻击的儿率。因为刚刚介绍的例子并没有真正
被用于执行一种操作，它不太可能被包含到由应用程序实现的反伪装请求的保护防御范围内。
7.6本章小结
我们在本章介绍了多种高级技术，它们可以使SQL注入攻击更加有效并且有助于克服我
们在现实应用中有时会遇到的障碍。
20世纪90年代中后期，Web中包含很多SQL注入缺陷，攻击者可以很容易地利用它们。
随着人们对漏洞认识的不断深入，要想利用那些仍然比较细微的漏洞，就需要避开某些防御或
者将几种不同的攻击技术结合起来以产生影响。
许多Web应用和外部防御（比如Web应用防火墙）会执行一些基本的输入验证来试图阻止
SQL注入攻击。我们介绍了各式各样的用于探索并（如果可能）避开这些验证的技术。在某些情
况下，从HTTP请求收到的所有输入都会被安全地进行处理，不过之后它们会以不安全的方式
保持和重用。我们还另外介绍了一种可靠的系统方法，可用来寻找并利用这些“二阶”SQL注
入漏洞。
目前，使用HTML5 新特性以提供更丰富用户体验的应用程序正迅速增长。使用客户端 SQL
数据库作为本地的数据存储，可以使客户端应用程序具有更快的响应性，甚至可以离线操作。
与其他SQL数据库一样，如果以非安全方式处理了攻击者可以控制的数据，就可能导致SQL
注入漏洞产生，攻击者可以修改或窃取敏感数据，或者执行未经授权的操作。检测和利用这些
漏洞都是困难的，因此客户端存储成了开发可利用bug的重灾区。
某些情况下，SQL注入漏洞可能存在，但却无法直接利用它们自已来实现目标。通常可以
将这些bug与其他漏洞或攻击技术结合起来以产生成功的影响。我们介绍了如何利用通过SQL
注入捕获的数据来执行其他攻击，介绍了在无法使用其他方法来执行跨站脚本攻击的情况下，
如何利用SQL注入来执行跨站脚本攻击。另外还介绍了一种通过利用验证过的特权功能中的漏
洞，进而利用那些无法直接访问的漏洞（从漏洞自身考虑时）的方法。
本章介绍的攻击类型并不全面。现实中的应用多种多样，我们应该预想到可能会遇到本章
未考虑到的意外情况。希望读者能够使用本章介绍的基本技术以及所想到的方法来处理好新情
况，并通过富有想象力的方式将它们结合起来以克服各种障码并执行成功的影响。
290
---
## Page 305
第7章高级话题
7.7快速解决方案
1.避开输入过滤器
·通过与简单输入进行系统化交互来理解应用所使用的过滤器。
●根据所使用过滤器的不同，尝试相关的避开技术以阻止该过滤器（包括使用大小写敏感
的变量、SQL注释、标准和有缺陷的URL编码、动态查询执行以及空字节）。
·寻找多步骤过滤器中的逻辑缺陷，比如无法递归剥离的表达式或不安全的输入截断。
·如果使用了有效的应用程序级别的过滤器，请尝试寻找过滤器可能忽略的非标准入口
点，比如参数名和HTTP请求头部。
2.利用二阶SQL注入
·复查应用程序的功能，寻找存储并重用了用户提供的数据的情况。
·在每个数据项中提交单引号，如果输入被阻正或审查，就使用本章介绍的过滤器避开
技术来尝试战胜过滤器。
·快速查看使用了数据的有关功能，寻找异常行为。
·对于检测到的每个异常，尝试开发概念验证攻击来证明应用程序是否真的易受到SQL
注入攻击。如果未返回任何错误消息，请会试使用时间延迟字符串来在相关响应中引
发显著延迟。
3.客户端SQL注入漏洞
●对于任何使用了HTML5客户端SQL数据库的地方，复查客户端JavaScript代码。
·标识将被客户端SQL查询处理的、攻击者可以控制的任何数据项。使用自己的客户端
应用程序实例测试应用程序对异常输入的处理，特别要注意测试那些并非最初来自屏
幕上普通文本输入字段的数据。
·如果应用程序以某种非安全方式处理任何攻击者可控制的数据，请确定是否可以使用
SQL注入，结合应用程序已有的功能，提取敏感数据或执行未经授权的操作。
4.使用混合攻击
·不管何时发现了SQL注入漏洞，都请思考如何将其与其他bug和技术结合起米以便对
应用产生更精细的影响。
·坚持寻找通过使用SQL注入检索到的数据（比如用户名和口令）来提升针对应用的攻击
方法。
·通常可以使用SQL注入来在应用程序中执行跨站脚本攻击，其中最重要的是执行持续
攻击，它会影响以常规方式访问应用程序的其他用户。
·如果在验证过的特权应用程序的功能中发现了SQL注入漏洞，请检查是否可以使用跨
站请求伪造以低权限用户身份来发动成功的攻击。
291
---
## Page 306
SQL注入攻击与防御（第2版）
7.8常见问题解答
火墙。我应该不厌其烦地对该问题进行测试吗？
解答：一点儿也没错。请尝试使用本章介绍的所有过滤器回避技术来探究WAF的输入验
证。请记住，向数字数据字段施加的SQL注入不需要使用单引号。测试WAF可能
不会检查的非标准入口点，比如参数名和请求头部。研究WAF软件，寻找已知的
安全问题。如果可以在本地安装WAF，请亲自测试它以便准确理解过滤器的工作原
理以及可能存在漏润的位置。
问题：当前正在攻击的应用程序阻止了包含单引号的所有输入。我已经在一个数字类型的
利用中使用需要带引号的字符串。我应该怎么办？
解答：可以使用CHAR或CHR函数在利用中构造一个字符串（不需要任何引号）。
问题：如果不能准确了解应用程序正在执行的操作，那么要想弄明白关于截断漏洞的例子
并检测到该漏洞会比较困难。现实中应该怎样尝试发现该bug？
解答：实际上发现该漏洞非常简单，您不需要知道将引号双重编码之后正在被截断的输入
的长度。通常可以通过在相关的请求参数中提交下面两个有效载荷来发现该问题：
................................................
如果存在截断漏洞，那么在这两个有效载荷中，有一个会向查询中插入奇数个引号，
从而引发一个未终结的字符串，并最终产生一个数据库错误。
292
---
## Page 307
第8章代码层防御
本章目标
·领域驱动的安全
·使用参数化语句
验证输入
编码输出
·
规范化
·通过设计来避免SQL注入的危险
8.1概述
从第4章到第7章，我们关注了影响SQL注入的方法。但如何来修复SQL注入呢？我们
应该如何阻止应用中的SQL注入进一步恶化？不管是易受SQL注入攻击的应用程序的开发人
员，还是需要向客户提供建议的安全专家，都可以通过在代码层进行一些合理的操作来降低或
消除 SQL注入的威胁。
本章将介绍与SQL注入相关的安全编码行为的几大方面。首先讨论在应用中使用SQL时
动态构造字符串的方法。接下来讨论与输入验证相关的各种策略，这些输入来自用户，也可能
来自潜在的其他地方。与输入验证紧密相关的是输出编码，这也是在部署时应该考虑的防御技
术宝库中很重要的一部分。我们还会介绍与输入验证直接相关的数据规范化，以便读者可以确
信当前操作的数据正是自已所期望的数据。作为最后一项要点，我们会讨论生成安全应用时可
以使用的设计层考虑和资源。
不应将我们在本章中讨论的话题看作独立实现的技术。相反，实现这些技术时通常应该将
它们作为深层防御策略的子部分。这些内容基于这样的概念：不能依靠任何单一的控制来定位
威胁，应尽可能拥有附加的控制以防止这些控制中的某一个失效。因此，可能需要实现本章中
介绍的多种技术以使应用完全免受SQL注入攻击。
8.2领域驱动的安全
领域驱动的安全(Domain Driven Security，DDS）是一种设计代码的方法，以这种方法设计
的代码可以避免典型的注入问题。如果我们查看容易遭受SQL注入攻击的代码，常常可以找
到一些接受非常广泛的数据输入的方法。典型的登录函数很可能如下所示：
public boolean isValidPassword (String username, String password)
---
## Page 308
SQL注入攻击与防御（第2版）
f." + pxoRssed + .=pIonssed GNV
 (↑bs) Axonb = Tnco. ↑nood
在上面的函数中，虽然对密码的处理已经存在问题，但我们在这里先忽略它（请参考本章
后面的8.6.3节“处理敏感数据”）。请注意上面这个方法的签名（signature)，该方法实际的语义
是什么呢？它未能传达对输入数据的限制和预期设置。这个方法的签名似乎告诉我们，它支持
以任何字符串作为用户名和密码，虽然实际上并非如此。绝大多数应用程序对用户名和密码中
的允许使用的字符类型和长度都有限制，但在这个方法的签名之中找不到这种限制。尽管在其
他代码中执行的输入检验可能阻止无效的用户名或密码到达这个方法，但是随着应用程序的演
化和新代码的添加，新的函数可能会无意中绕过了输入检验，直接访问没有防护的方法。
在 DDD(Domain Driven Design，领域驱动设计)中，在团队内如何相互交流这一问题上，
域模型（modelofthedomain）扮演着一个关键的角色。通过不同利益相关者使用的术语以及应用
程序所支持的业务，在我们的领域模型中重用这些术语，可以在团队内构建一种通用的、普遍
的交流语言。领域模型中的某些概念是显式（explicit）构建的，并最终成为类（class)。其他概念
则是隐式的（implicit)，仅能在变量或方法的命名中找到。
领域驱动的安全
领域驱动的安全是一种开发方法，它的目标是帮助开发人员进行推理并缓解任何类型的注
入攻击的成肋—包括SQL注入和跨站脚本攻击。领域驱动的安全是开发人员为开发人员创建
的理念，它的灵感来自于EricEvans提出的领域驱动设计，它试图充分利用来自于DDD的概
念以提高应用程序的安全性。
在图8-1中，通过将数据在应用程序的三个
主要部分之间进行映射，我们创建了一个简单
OR1-1-
的应用程序模型。这个示例图说明了应用程序