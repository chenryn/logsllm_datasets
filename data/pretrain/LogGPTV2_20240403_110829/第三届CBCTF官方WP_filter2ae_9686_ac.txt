            v9 = 0; 
            j_strcat_0(Dest, &Source); 
            continue; 
          case 0x68u: 
            v7 += 4; 
            Source = v7; 
            v24 = 1i64; 
            v9 = 0; 
            j_strcat_0(Dest, &Source); 
            continue; 
          case 0x6Au: 
            v7 &= 0x60u; 
            Source = v7; 
            v25 = 1i64; 
            v9 = 0; 
            j_strcat_0(Dest, &Source); 
            continue; 
          case 0x6Bu: 
            v7 ^= 0x4Eu; 
            Source = v7; 
            v26 = 1i64; 
            v9 = 0; 
            j_strcat_0(Dest, &Source); 
            continue; 
          case 0x6Cu: 
            v7 -= 75; 
            goto LABEL_26; 
          case 0x6Fu: 
    LABEL_26: 
            v7 = 38; 
            Source = 38; 
            v27 = 1i64; 
            v9 = 0; 
            j_strcat_0(Dest, &Source); 
            break; 
          case 0x74u: 
            v7 += 2; 
            Source = v7; 
            v28 = 1i64; 
            v9 = 0; 
            j_strcat_0(Dest, &Source); 
            break; 
          case 0x75u: 
            v7 = 2 * ((signed int)v7 >> 1) + 1; 
            Source = v7; 
            v29 = 1i64; 
            v9 = 0; 
            j_strcat_0(Dest, &Source); 
            break; 
          case 0x79u: 
            v7 = 8 * ((signed int)v7 >> 3) | 1; 
            Source = v7; 
            v30 = 1i64; 
            v9 = 0; 
            j_strcat_0(Dest, &Source); 
            break; 
          default: 
            continue; 
        } 
      } 
      return sub_140011348(&v5, &unk_140019C80); 
    }
其实这题基本上已经不需要逆向的思维了，直接写个类似的代码跑出来答案一一对比就好了，具体代码就不写了，手算也可以做出来。
**flag{1_hatE_you}**
###  four steps.exe
主函数伪代码如下：
    __int64 sub_1400159A0() 
    { 
      char *v0; // rdi 
      signed __int64 i; // rcx 
      char v3; // [rsp+0h] [rbp-20h] 
      char Buffer; // [rsp+30h] [rbp+10h] 
      char v5; // [rsp+31h] [rbp+11h] 
      unsigned __int8 v6; // [rsp+32h] [rbp+12h] 
      unsigned __int8 v7; // [rsp+33h] [rbp+13h] 
      v0 = &v3; 
      for ( i = 130i64; i; --i ) 
      { 
        *(_DWORD *)v0 = -858993460; 
        v0 += 4; 
      } 
      sub_140011082((__int64)&unk_140021006); 
      sub_1400111D1("请输入你的 flag 吧\n"); 
      j_gets_0(&Buffer); 
      sub_1400113AC((__int64)&Buffer, 4i64); 
      if ( Buffer != 96 || v5 != 106 || v6 != 153 || v7 != 159 ) 
        exit(1); 
      if ( !(unsigned int)sub_1400113B1(&Buffer, 4i64) ) 
        sub_1400113B6((__int64)&Buffer, 4i64); 
      sub_1400113C5((__int64)&Buffer, 4i64); 
      sub_14001133E((__int64)&v3, (__int64)&unk_14001A910); 
      return 0i64; 
    } 
    3AC,3B1,3B6,3C5 是加密的四个函数。Buffer 是你要输入的 flag。 
    第一个加密函数 
    void __fastcall sub_1400156E0(__int64 a1, int a2) 
    { 
      char *v2; // rdi 
      signed __int64 i; // rcx 
      char v4; // [rsp+0h] [rbp-20h] 
      int j; // [rsp+24h] [rbp+4h] 
      int v6[261]; // [rsp+50h] [rbp+30h] 
      int v7; // [rsp+464h] [rbp+444h] 
      int v8; // [rsp+484h] [rbp+464h] 
      __int64 v9; // [rsp+700h] [rbp+6E0h] 
      int v10; // [rsp+708h] [rbp+6E8h] 
      v10 = a2; 
      v9 = a1; 
      v2 = &v4; 
      for ( i = 0x1BAi64; i; --i ) 
      { 
        *(_DWORD *)v2 = 3435973836; 
        v2 += 4; 
      } 
      sub_140011082((__int64)&unk_140021006); 
      for ( j = 0; j > 4; 
      if ( ((signed int)v6[5] >> 4) + v5 != 13 
        || (v5 = (signed int)v6[6] >> 4, ((signed int)v6[7] >> 4) + v5 != 13) 
        || (v5 = v6[4] & 0xF, v5 - (v6[5] & 0xF) != 10) 
        || (v5 = v6[6] & 0xF, v5 - (v6[7] & 0xF) != 11) 
        || (v5 = v6[6] & 0xF, v5 - (v6[5] & 0xF) != 13) 
        || (v5 = (signed int)v6[5] >> 4, v5 != (signed int)v6[6] >> 4) ) 
      { 
        exit(2); 
      } 
      return 0i64; 
    }
这个函数有点类似解方程，把它列出来可以找找突破口（嘤嘤嘤，太懒了，懒得写出来了）。
第三个加密函数
    int __fastcall sub_140016370(__int64 a1, int a2) 
    { 
      __int64 *v2; // rdi 
      signed __int64 i; // rcx 
      size_t v4; // rax 
      int result; // eax 
      __int64 v6; // [rsp+0h] [rbp-20h] 
      const char *v7; // [rsp+28h] [rbp+8h] 
      int v8; // [rsp+44h] [rbp+24h] 
      char *Str1; // [rsp+68h] [rbp+48h] 
      int v10; // [rsp+84h] [rbp+64h] 
      int v11; // [rsp+A4h] [rbp+84h] 
      int v12; // [rsp+C4h] [rbp+A4h] 
      int v13; // [rsp+194h] [rbp+174h] 
      __int64 v14; // [rsp+1C0h] [rbp+1A0h] 
      int v15; // [rsp+1C8h] [rbp+1A8h] 
      v15 = a2; 
      v14 = a1; 
      v2 = &v6; 
      for ( i = 106i64; i; --i ) 
      { 
        *(_DWORD *)v2 = -858993460; 
        v2 = (__int64 *)((char *)v2 + 4); 
      } 
      sub_140011082((__int64)&unk_140021006); 
      v7 = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890+/"; 
      v8 = 4 * (v15 / 3) + 4; 
      v4 = v8 + 1i64; 
      if ( (unsigned __int64)v8 >= 0xFFFFFFFFFFFFFFFFui64 ) 
        v4 = -1i64; 
      Str1 = (char *)malloc(v4); 
      Str1[v8] = 0; 
      v10 = 0; 
      v11 = 0; 
      while ( v10 > 2]; 
        Str1[v10 + 1] = v7[((signed int)*(unsigned __int8 *)(v14 + v11 + 9) >> 4) | 16 * (*(_BYTE *)(v14 + v11 + 8) & 3)]; 
        Str1[v10 + 2] = v7[((signed int)*(unsigned __int8 *)(v14 + v11 + 10) >> 6) | 4 * (*(_BYTE *)(v14 + v11 + 9) & 0xF)]; 
        Str1[v10 + 3] = v7[*(_BYTE *)(v14 + v11 + 10) & 0x3F]; 
        v11 += 3; 
        v10 += 4; 
      } 
      v13 = v15 % 3; 
      if ( v15 % 3 == 1 ) 