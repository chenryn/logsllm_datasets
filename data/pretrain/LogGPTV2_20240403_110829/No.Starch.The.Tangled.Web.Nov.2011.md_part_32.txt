### Descendant Model and HTML Frames

The descendant model, as implemented in Internet Explorer, effectively renders HTML frames unsafe for use, not only for financial institutions like Charles Schwab but for any website. This issue is further compounded by the Internal Revenue Service's (IRS) own site, which provides a similarly imprudent recommendation.

### Zone Settings in Internet Explorer

Beyond the complexity and inadequate documentation of Internet Explorer’s zone settings, another significant issue is the clustering of unrelated permissions. The settings for local intranet and trusted sites enable a random assortment of features that may be required by some trusted sites, but no single site would need all the permissions granted by these zones. Consequently, adding sites to privileged zones can have unexpectedly far-reaching consequences, even with minor security flaws like a trivial XSS vulnerability.

### Mark of the Web and Zone.Identifier

To maintain the integrity of the zone model for downloaded files, Internet Explorer employs two overlapping mechanisms:

1. **Mark of the Web (MotW)**: This simple pseudo-HTML tag is inserted at the beginning of HTML documents downloaded via Internet Explorer to indicate their initial source. For example:
   ```html
   <!-- saved from url=(0014)about:internet -->
   ```
   The URL recorded in this tag is mapped to an appropriate zone, and the document is opened in a unique origin within that zone. The most important consequence is that the downloaded content is isolated from other `file:URLs`.

   **Note**: The inline nature of MotW is one of its flaws. Rogue parties can pre-insert faux tags into HTML documents downloaded through non-Internet Explorer browsers, saved from email clients, or downloaded by Internet Explorer with a non-HTML extension (subjected to content sniffing). However, the privileges of `file:URL` documents saved without any MotW tags are significant enough to keep attackers relatively uninterested in hopping from the My Computer zone to, say, Local Intranet.

2. **Alternate Data Stream (ADS) Zone Identifier**: This is a piece of NTFS metadata attached by Internet Explorer (and Chrome) to every downloaded file, indicating the numerical code of the zone from which the file was retrieved. While less portable than MotW, as the information is lost when files are saved to non-NTFS filesystems, it is more versatile and can be applied to non-HTML documents.

   Zone.Identifier metadata is recognized by Internet Explorer, the Windows GUI shell, and some other Microsoft products, but third-party software almost universally ignores it. Where supported, it may result in a more restrictive security policy being applied to the document; more commonly, it just triggers a security warning about the unspecified risks of opening Internet-originating data.

### Security Engineering Best Practices

#### Requesting Elevated Permissions in Web Applications

When requesting access to geolocation data, video or microphone feeds, and other privileged APIs, remember that this comes with responsibility. If your site is prone to XSS vulnerabilities, you are not only gambling with the data stored in the application but also with the privacy of your users. Plan accordingly and compartmentalize the privileged functionality well. Never ask your users to lower their Internet Explorer security settings to accommodate your application, and do not blindly follow such advice when given by others, regardless of who they are.

#### Writing Plug-ins or Extensions That Recognize Privileged Origins

Developing plug-ins or extensions that recognize privileged origins puts your users at elevated risk due to inevitable web application security bugs. Design APIs robustly and use secondary security measures, such as cryptography, to further secure communications with your server. Do not whitelist non-encrypted origins, as they are prone to spoofing on open wireless networks.

### A Glimpse of Things to Come

After nearly a decade of stagnation, the browser world is once again a competitive arena. Vendors compete by introducing new features monthly, with security now seen as a clear selling point. However, objectively measuring the robustness of complex software remains an unsolved problem, especially with codebases carrying decades of bloat. Much of the competitive effort goes into inventing and rapidly deploying new security-themed additions, often with little consideration for their effectiveness.

Standards bodies, mindful of past misadventures, have relaxed their academic rigor, allowing a dedicated group of contributors to tweak specifications as they see fit. There is talk of making HTML5 the last numbered version of the standard and transitioning to a living document that changes daily. This relaxation has helped keep ongoing work around W3C and WHATWG, but it has also undermined some of the benefits of having a central organization. Many recent proposals gravitate toward quick, narrowly scoped hacks that do not form a consistent and well-integrated framework. The only way to stay on top of the changes is to immerse oneself in the day-to-day dynamics of the working group.

It is difficult to say if this new approach to standardization is a bad thing. Its benefits may outweigh speculative risks, but the results of this frantic and largely unsupervised process can be unpredictable, requiring the security community to be very alert.

### New and Upcoming Security Features

To organize the discussion, we will look at the intended purposes of new browser features, starting with those created specifically to tweak the Web’s security model for a well-defined gain.

#### Security Model Extension Frameworks

Some of the most successful security enhancements proposed in recent years add flexibility to the original constraints imposed by the same-origin policy. For example, the `postMessage(...)` API, discussed in Chapter 9, allows for communication across origins. Relaxing SOP checks in certain carefully chosen scenarios is more intuitive and less likely to cause problems than locking the policy down.

#### Cross-Domain Requests

Under the original constraints of the same-origin policy, scripts associated with one origin have no clean and secure way to communicate with client-side scripts executing in any other origin or to retrieve potentially useful data from a willing third-party server. Browser vendors have begun to address these constraints, with `postMessage(...)` solving the client-side communication task. The client-to-server scenario is still awaiting a canonical solution, but there has been progress.

The most successful attempt to create a method for retrieving documents from non-same-origin servers began in 2005. Under the auspices of W3C, developers working on VoiceXML drafted a proposal for Cross-Origin Resource Sharing (CORS). Between 2007 and 2009, their XML-based design evolved into a simpler scheme relying on HTTP header-level signaling to communicate consent to cross-origin content retrieval using a natural extension of the `XMLHttpRequest` API.

##### CORS Request Types

CORS differentiates between simple and non-simple requests. Simple requests must have a method of GET, POST, or HEAD and, if any custom headers are specified, they must belong to a specific set. Browsers that support CORS allow only GET, POST, and HEAD methods and ignore the recommended whitelist of headers, demoting any requests with custom header values to non-simple status. WebKit also considers any payload-bearing requests to be non-simple.

##### Security Checks for Simple Requests

Simple requests are submitted immediately to the destination server without confirming whether the destination is willing to engage in cross-domain communications. The crucial security check is carried out after the response is retrieved: the data is revealed to the caller only if the response includes a suitable `Access-Control-Allow-Origin` header. The original request includes a mandatory `Origin` header specifying the calling script's origin.

For example, a cross-domain `XMLHttpRequest` call from `http://www.bunnyoutlet.com/` to `http://fuzzybunnies.com/get_message.php?id=42` would include the `Origin` header, and the server would respond with the `Access-Control-Allow-Origin` header to allow the response to be readable.

##### Non-Simple Requests and Preflight

Non-simple requests require a two-step handshake to confirm the destination server's willingness to receive nonstandard traffic. This handshake involves sending a vanilla OPTIONS request ("preflight") to the target URL, containing the parameters of the underlying `XMLHttpRequest` call. The handshake is successful only if the server acknowledges the parameters in the response.

##### Current Status of CORS

As of this writing, CORS is available in Firefox and WebKit-based browsers but is notably absent in Opera and Internet Explorer. The most significant factor hindering its adoption is that the API is not as critical as `postMessage(...)`, as it can often be replaced by a content-fetching proxy on the server side. Additionally, CORS faces criticisms, including concerns over ambient authority, unnecessary complexity, and susceptibility to header injection.

#### XDomainRequest

Microsoft, concerned about the use of ambient authority and dissatisfied with interactions with W3C, implemented a counterproposal called `XDomainRequest`. This API differs from `XMLHttpRequest` in that the resulting requests are always anonymous and do not allow for custom HTTP headers or methods. The use of Microsoft’s API is otherwise similar to `XMLHttpRequest`:

```javascript
var x = new XDomainRequest();
x.open("GET", "http://www.fuzzybunnies.com/get_data.php?id=1234");
```

This concludes our overview of the current and upcoming security features in modern browsers.