# 循环写入与锁机制

在执行 `INSERT ... SELECT` 语句时，目标表不会被全表锁定，而是仅锁定需要访问的资源。例如，如果需要向表 `t2` 中插入一行数据，其中 `c` 值为表 `t` 中 `c` 的最大值加1，可以使用以下 SQL 语句：

```sql
INSERT INTO t2(c, d)
SELECT c + 1, d 
FROM t 
FORCE INDEX (c) 
ORDER BY c DESC 
LIMIT 1;
```

这条语句的加锁范围是表 `t` 索引 `c` 上的 `(3,4]` 和 `(4, supremum]` 这两个 next-key lock，以及主键索引上 `id=4` 的行。其执行流程是从表 `t` 按照索引 `c` 倒序扫描第一行，并将结果写入表 `t2`。因此，整条语句的扫描行数为 1。

### 执行慢查询日志分析

该语句的慢查询日志显示 `Rows_examined=1`，这验证了实际扫描行数为 1。然而，若将同样的一行数据插入到表 `t` 中，即：

```sql
INSERT INTO t(c, d)
SELECT c + 1, d 
FROM t 
FORCE INDEX (c) 
ORDER BY c DESC 
LIMIT 1;
```

此时的慢查询日志中 `Rows_examined` 的值为 5。通过 `EXPLAIN` 结果可以看到 "Using temporary" 字样，表明此语句使用了临时表。具体执行流程如下：

1. 创建临时表，包含字段 `c` 和 `d`。
2. 按照索引 `c` 扫描表 `t`，依次读取 `c=4, 3, 2, 1` 并回表获取 `c` 和 `d` 的值，写入临时表。此时 `Rows_examined=4`。
3. 由于 `LIMIT 1` 限制，只取临时表的第一行并插入表 `t`。此时 `Rows_examined` 增至 5。

这意味着此语句会导致对表 `t` 的全表扫描，并给索引 `c` 上的所有间隙加上共享的 next-key lock，从而阻止其他事务在此期间插入数据。

### 优化方法

为了避免上述问题，可以通过先将数据插入到临时表再从临时表读取的方式进行优化。具体步骤如下：

```sql
CREATE TEMPORARY TABLE temp_t(c INT, d INT) ENGINE=MEMORY;
INSERT INTO temp_t
SELECT c + 1, d 
FROM t 
FORCE INDEX (c) 
ORDER BY c DESC 
LIMIT 1;
INSERT INTO t SELECT * FROM temp_t;
DROP TABLE temp_t;
```

这样就只需扫描一行数据，显著提高了效率。

# 唯一键冲突处理

对于具有唯一键的表，在插入数据时可能会遇到唯一键冲突。以下是在可重复读隔离级别下发生唯一键冲突的一个例子：

- 当 `Session A` 插入一条记录并发生唯一键冲突时，会在冲突索引上加锁。
- 如果另一会话（如 `Session B` 或 `Session C`）尝试在同一位置插入相同的数据，则会进入等待状态，直到 `Session A` 提交或回滚。

此外，当多个会话同时尝试插入导致唯一键冲突的数据时，可能会形成死锁。这种情况下，正确的做法是尽快提交或回滚事务以释放锁。

# 使用 `ON DUPLICATE KEY UPDATE`

当插入操作遇到唯一键约束时，可以使用 `ON DUPLICATE KEY UPDATE` 语法来更新已存在的行。例如：

```sql
INSERT INTO t VALUES(11,10,10) ON DUPLICATE KEY UPDATE d = 100;
```

此语句表示：如果插入过程中遇到唯一键冲突，则执行后面的更新语句。如果有多个列违反了唯一性约束，系统会按照索引顺序修改第一个冲突的行。

### 示例

假设表 `t` 中已有两行数据 `(1,1,1)` 和 `(2,2,2)`，执行以下语句：

```sql
INSERT INTO t VALUES(11,10,10) ON DUPLICATE KEY UPDATE d = 100;
```

MySQL 会认为该语句与 `id=2` 的行冲突，并更新 `id=2` 的行。需要注意的是，`affected rows` 返回值可能为 2，但实际上只更新了一行数据。

# 小结

本文介绍了几种特殊情况下的 `INSERT` 语句及其注意事项。对于 `INSERT ... SELECT` 语句，需注意在可重复读隔离级别下会加读锁；而针对同一表的循环写入问题，可通过引入临时表解决。此外，唯一键冲突时应尽快处理事务以避免长时间占用锁资源。最后，使用 `ON DUPLICATE KEY UPDATE` 可以灵活地处理唯一键冲突情况。

希望这些内容对你有所帮助，也欢迎你在评论区分享你的经验和见解！