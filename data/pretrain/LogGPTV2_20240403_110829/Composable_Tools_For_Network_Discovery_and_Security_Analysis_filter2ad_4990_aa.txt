title:Composable Tools For Network Discovery and Security Analysis
author:Giovanni Vigna and
Fredrik Valeur and
Jingyu Zhou and
Richard A. Kemmerer
Composable Tools
For Network Discovery and Security Analysis
Giovanni Vigna
Fredrik Valeur
Jingyu Zhou
Reliable Software Group
Department of Computer Science
University of California Santa Barbara
Richard A. Kemmerer
[vigna,fredrik,jzhou,kemm]@cs.ucsb.edu
Abstract
1. Introduction
Security analysis should take advantage of a reliable
knowledge base that contains semantically-rich information
about a protected network. This knowledge is provided by
network mapping tools. These tools rely on models to rep-
resent the entities of interest, and they leverage off network
discovery techniques to populate the model structure with
the data that is pertinent to a speciﬁc target network. Un-
fortunately, existing tools rely on incomplete data models.
Networks are complex systems and most approaches over-
simplify their target models in an effort to limit the problem
space. In addition, the techniques used to populate the mod-
els are limited in scope and are difﬁcult to extend.
This paper presents NetMap, a security tool for network
modeling, discovery, and analysis. NetMap relies on a com-
prehensive network model that is not limited to a speciﬁc
network level; it integrates network information throughout
the layers. The model contains information about topol-
ogy, infrastructure, and deployed services. In addition, the
relationships among different entities in different layers of
the model are made explicit. The modeled information is
managed by using a suite of composable network tools that
can determine various aspects of network conﬁgurations
through scanning techniques and heuristics. Tools in the
suite are responsible for a single, well-deﬁned task. Each
tool has an abstract speciﬁcation of the input, the output,
the type of processing, and the requirements for carrying
out a task. Tool descriptions are expressed in a Network
Tool Language. The tool descriptions are then stored in a
database. By using the network model and the tool descrip-
tions, NetMap is able to automatically determine which
tools are needed to perform a particular complex task and
how the tools should be scheduled to obtain the requested
results.
Keywords: Network Security, Network Modeling and
Analysis, Network Discovery and Validation.
Network security is achieved by composing the function-
ality of a number of security applications, such as ﬁrewalls
and intrusion detection systems. Deploying and conﬁguring
security applications requires an in-depth knowledge of the
network to be protected. In addition, continuous monitoring
of both the network and the conﬁguration of the security ap-
plications is the basis for determining the current network
security posture.
Unfortunately, knowledge about the network being pro-
tected often exists only in the “mind” of the network ad-
ministrator, and this knowledge is obtained by using a num-
ber of tools, each of which can only provide a subset of
the information about the protected network. For example,
the information about the services active on a host could
be determined by scanning the ports of the host.
In ad-
dition, the results obtained from the execution of one tool
are often used as the basis for additional analysis and pos-
sibly as input for the execution of other tools. In the pre-
vious example, once the open ports have been determined,
banner-grabbing tools can help to determine the type and
version of the server applications. The coordination of tool
executions and the composition of their results is usually a
human-intensive task. This is the case even when ad hoc
scripts and procedures developed by network administra-
tors through years of experience in integrating the results of
network monitoring and analysis are available.
This paper presents NetMap, a novel approach that pro-
vides support for automated network discovery and security
analysis. NetMap is centered around a model of both the
network to be analyzed and the tools to be used for analy-
sis.
The network model has been designed by taking into
account the models used by existing network management
and vulnerability scanning tools. The model is not limited
to a speciﬁc network level; it integrates network informa-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
tion throughout the layers. The model contains information
about topology, infrastructure, and deployed services.
In
addition, the security-relevant relationships between differ-
ent entities in different layers of the model are made ex-
plicit. For example, the model includes trust relationships
between clients and servers for speciﬁc services, as well
as relationships between services and conﬁguration objects
(e.g., ﬁles) used to deﬁne the application behavior. The net-
work model is implemented as a database management sys-
tem, called NetDB.
A tool model supports the abstract description of a suite
of network discovery and scanning tools using a Network
Tool Language (NTL). Each tool in the suite is responsi-
ble for a single, well-deﬁned task and has a speciﬁcation
of the input, the output, the type of processing, and the re-
quirements for carrying out a task. The tool descriptions
are stored in a tool repository, called the Network Tool
Database (NTDB).
NetMap allows a network administrator to specify high-
level discovery/analysis tasks in a query language, called
NetScript. Tasks range from pure network discovery, to
the validation of existing information, to vulnerability scan-
ning. Given a task description, a Query Processor com-
ponent uses the tool descriptions to determine which tools
are needed to perform a particular complex task, what their
schedule should be, and how the results should be inserted
into an instance of the network model that represents the
protected network.
The remainder of this paper is structured as follows. Sec-
tion 2 discusses related work on network models and net-
work analysis tools and presents an overview of the NetMap
approach. Section 3 describes the network model. Sec-
tion 4 presents the concept of composable network tools.
Section 5 discusses issues related to network discovery
and security analysis. Section 6 presents an evaluation of
NetMap’s performance. Finally, Section 7 describes the
current status of the NetMap system, draws some conclu-
sions, and outlines future work.
2. Related Work
Currently, networks are monitored, maintained, and di-
agnosed using tools that rely on network protocols like the
Internet Control Message Protocol (ICMP) [10] and the
Simple Network Management Protocol (SNMP) [2]. Ex-
amples of these tools are HP OpenView [6], Scotty [11],
Brother [1], and Fremont [12]. These tools support network
discovery tasks and provide a means to remotely query and
control network devices, such as routers and hosts.
Network management tools have proved to be effective
in determining network conﬁguration problems and in help-
ing security analysts. However, their data model and the
type of information they gather is not sufﬁcient to deter-
mine and verify the security posture of a protected network.
Thus, network security analysts use vulnerability scanning
tools in addition to network management tools. Vulnera-
bility scanning tools automatically perform checks on the
hosts of a subnetwork looking for vulnerable applications,
misconﬁgured services, and ﬂawed operating system ver-
sions. Examples of these tools are Nessus [8], Nmap [4],
and ISS’s Internet Scanner [7]. These tools provide differ-
ent types of functionality, use different means to retrieve
information about a network, and store information in dif-
ferent formats. Table 1 summarizes the characteristics of
several popular network and security analysis tools. The ta-
ble shows, for each tool, the type of functionality provided
(node discovery, topology discovery, service mapping, op-
erating system ﬁngerprinting, and node management), and
the type of storage used for the information gathered (data
structures in memory, text ﬁles, or databases).
The tools described above provide many useful function-
alities but suffer from four main limitations:
1. They are limited in scope. Most of the tools address
one single problem (e.g., Nmap provides only scan-
ning capabilities). Different analysis domains, such as
routing and application-level service conﬁguration, are
not analyzed in an integrated way.
2. They do not rely on a well-deﬁned, shared network
model. Some tools do not model and store persistent
data at all, others use text ﬁles that are mostly unstruc-
tured. A few rely on database management systems,
but the corresponding database schemas are designed
for the speciﬁc tool only; they do not cover features
not considered by the tool. In addition, these tools do
not agree on a shared model. This makes it hard to
combine the results from one tool with another. Even
though there are ongoing efforts to standardize a net-
work management model [3], the proposed standard
does not take into account the application-level char-
acteristics of a network, which are paramount in deter-
mining the security conﬁguration of services.
3. They are not ﬂexible. In most cases, it is impossible or
very hard to add new functionality and analysis tech-
niques to an existing tool. The recent vulnerabilities
discovered in a number of SNMP implementations [5]
have brought this problem to the forefront. In order
to cope with the increasing number of attacks target-
ing SNMP agents, the agents have often been disabled,
which effectively prevents SNMP-based network tools
from working properly. Even though the desired infor-
mation is accessible by other means (e.g., by remote
execution of shell scripts), the existing tools cannot be
easily modiﬁed to take advantage of these alternative
sources of information.
In addition, composing and
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Product
Description
Functionality
Storage
Node Dis-
covery
Topology
Discovery
Service
Mapping
Fin-
OS
gerprint
Nmap
Nessus
Fremont
Big
Brother
Scotty
Port scanning
tool
Vulnerability
scanning tool
Topology dis-
covery tool
Network
monitor
Network
Management
Tool
OpenView Network
Management
Tool













Node
Manage-
ment



Memory
Memory
Memory,
text ﬁles
Text ﬁles
Memory,
text ﬁles
Database
Table 1. Characteristics of existing network analysis tools.
integrating different tools requires the development of
ad hoc procedures.
4. There is no automated support for tool composition.
Given a network analysis or monitoring task, there is
no automated support to determine what tools could be
used to carry out the task or how different tools should
be composed.
NetMap is a new approach that overcomes the limits
listed above. NetMap’s goal is to provide a network analy-
sis tool that supports network discovery and analysis over a
wide range of network characteristics. NetMap relies on a
well-deﬁned network reference model to represent both the
entities of a protected network and a suite of network anal-
ysis tools. Network discovery tools are used to populate
the model structure with the data that is pertinent to a spe-
ciﬁc target network, and then security analysis is performed
on the collected data. Unlike any other network security or
network management tool, the approach presented in this
paper does not rely on a monolithic tool suite or a ﬁxed set
of techniques. The NetMap approach relies on composable
network tools. NetMap maintains a tool database contain-
ing a toolset composed of specially built tools, COTS com-
ponents, or speciﬁc tool features (e.g., the TCP portscan-
ning functionality of Nmap). Each of the tools in the toolset
is responsible for a single well-deﬁned task (e.g., determin-
ing if a host in a network is up or down) and is associated
with a speciﬁcation of the input, the output, the type of pro-
cessing, and the requirements for carrying out a task. The
tool description is expressed in a Network Tool Language.
The tool descriptions are then stored in the Network Tool
Database.
Whenever data has to be retrieved to populate the net-
work model or to verify its contents, a Query Processor
component automatically determines:
(cid:15) what information is needed;
(cid:15) which tools can be used to obtain or verify the infor-
mation; and
(cid:15) how to compose the inputs and outputs of different
tools to obtain the result.
The resulting system is ﬂexible, customizable, extensi-
ble, and can easily integrate off-the-shelf tools. In addition,
it provides automated support for the execution of complex
tasks that require the results obtained from several different
tools. Figure 1 shows the high-level architecture of the sys-
tem. Existing network tools are described using NTL spec-
iﬁcations. Tool speciﬁcations are stored in the NTDB. The
Network Security Administrator browses the network infor-
mation contained in the NetDB and may request the execu-
tion of a network discovery operation by issuing a NetScript
query. The query is sent to the Query Processor compo-
nent, which determines a suitable set of tools to perform
the requested task on the basis of the information stored in
both the NetDB and the NTDB. The tools are scheduled for
execution, the actual tools are invoked, and eventually the
results are stored in the NetDB for further analysis. The fol-
lowing sections detail the main components of the NetMap
architecture.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
External Tools
Execution
Modeling
Results
Network Security Administrator
Schedule
NetDB
Query Processor
Browse
NetMap Viewer
NTL Specifications
NTDB
NetScript Queries
Figure 1. NetMap high-level architecture.
3. The Network Model
The network model is an entity-relationship description
of a network. It describes both the topology and the ser-
vice structure of the network. Figure 2 presents a simpliﬁed
schema for the model.
The network topology is a description of the constituent
components of the network and how they are connected.
The network model deﬁnes entities, such as interfaces,
nodes, and links, to describe elements of the network, and
uses relationships to determine how the elements are con-
nected to each other. Each topology element has a rich set
of attributes that deﬁnes the characteristics of the element.
For example, the node element is characterized by its type
(e.g., a router or a workstation), the processor architecture,
type, and speed, the manufacturer, the amount of memory
and disk storage available, its geographical location (e.g.,
building and room number), and so on. This part of the
model represents the “blueprint” of a network.
The network model is not limited to network topology;
it also contains a description of the service structure pro-
vided by the hosts of a network. This includes what op-
erating systems are installed on the different hosts, and
what services are available. Examples of these services
are the Network File System (NFS), the Network Infor-
mation System (NIS), Secure Shell, FTP, and “r” services.
The model contains a characterization of each service in
terms of the network/transport protocol(s) used, the access
model (e.g., request/reply), the type of authentication (e.g.,
address-based, password-based, token-based, or certiﬁcate-
based), and the level of trafﬁc protection (e.g., encrypted or
not). In addition, the model explicitly represents the rela-
tionships between the different entities. For example, the
model includes trust relationships between service clients
and servers, as well as relationships between services and
conﬁguration objects (e.g., ﬁles) used to deﬁne program
behavior. This structure allows one to determine the im-
plicit impact of an attack with respect to the whole net-
work. For example, suppose that a host-based attack that
allows an unauthorized user to write to a root-owned ﬁle
(e.g., /etc/exports) is detected. The model contains the in-
formation that relates the target ﬁle to a speciﬁc service (in
this case, the Network File System). Analysis based on the
model can determine the overall impact of the attack. For
example, suppose that client hosts use NFS to mount users’
home directories. The NFS service could be used to mount
modiﬁed versions of the users’ environments extending the
compromise to many user accounts. In this case, by making
the relationship between the client and the server explicit
it is possible to understand that a simple attack is actually
affecting the security of all of the users of the network.
The model is implemented using a relational database.