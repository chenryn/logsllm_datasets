Other tools such as Psiphon and Lantern use TLS in a more
natural way, connecting directly to endpoint proxies. These
tools must also take care to mimic or otherwise hide their
connections to look normal or face blocking.
Two different versions of meek were found to be detectable
by Cyberoam [21] and Fortiguard [22] ﬁrewalls, which ﬁnger-
printed the Client Hello of meek and blocked it. At the time
of incident with Cyberoam, meek was mimicking Firefox 38,
which had over time dwindled in users, reducing overall
collateral damage from blocking meek. Notably, censors were
able to substantially reduce collateral damage by combining
TLS ﬁngerprinting with simple host blocking: blocking was
limited to clients that both looked like Firefox 38 and tried to
access speciﬁc domains used for fronting. Subsequently, meek
started mimicking the newer Firefox 45, but was ultimately
blocked by Fortiguard in the same manner when Firefox 45
became less popular.
Given the importance of Client Hello messages in identi-
fying and potentially blocking censorship circumvention tools,
we analyzed the ﬁngerprints generated by several popular
circumvention tools, and compared the relative popularity of
those ﬁngerprints in our dataset. Fingerprints that were seen
much more frequently should in theory be more difﬁcult for
censors to block outright without collateral damage, while
those that we rarely see in our dataset may be at risk of easy
blocking. In this analysis, we assume that our dataset contains
negligible trafﬁc from these tools, as our institution is not in
a censored region and users have little motivation to use them
en mass.
We also provide a mechanism to easily test and analyze
any application by submitting a pcap ﬁle to our website:
 0 0.2 0.4 0.6 0.8 1Jan '18Feb '18Mar '18Apr '18May '18Jun '18Jul '18Aug '18Sep '18Oct '18Nov '18Dec '18Fraction blockedTimeBlocked connectionsBlocked ﬁngerprintshttps://tlsﬁngerprint.io/pcap. Our website will list all the ﬁn-
gerprints extracted from the pcap ﬁle, and provide links with
more details about their features, popularity, any user agents
observed using these ﬁngerprints, and similar ﬁngerprints that
can be compared.
A. Signal
Until recently,
the Signal secure messaging application
used domain fronting to circumvent censorship in Egypt, the
United Arab Emirates, Oman, and Qatar [41]. Signal used
Google App Engine as a front domain until April 2018,
when Google disabled domain fronting on their infrastruc-
ture [39]. Signal switched to domain fronting via the Amazon-
owned souq.com, but shortly after, Amazon disallowed domain
fronting on their infrastructure, and notiﬁed Signal that it was
in violation of its terms of service [38], [39]. Signal has
since stopped using domain fronting, and direct access is now
blocked in the above countries.
However, Signal still serves as one of the largest deploy-
ments of domain fronting, and we analyze both when it used
Google and when it used Amazon.
When Signal was using Google for domain fronting, we
analyzed both the iOS and Android versions of the application
on real devices and collected the TLS ﬁngerprints it generated
when we signed up with phone numbers in the previously
mentioned censored countries, triggering its domain fronting
logic. For iOS, we found it generates the native iOS ﬁngerprint,
which appears in 2.14% of connections, making it the 11th
most popular in our dataset at the time. It is unlikely a censor
would be able to block Signal iOS from its Client Hello
ﬁngerprints alone.
However, on Android, the situation is drastically worse.
Even on the same device, Signal Android generates up to
four unique ﬁngerprints when using domain fronting. Some
of these ﬁngerprints were never seen in our dataset, making it
trivial for a censor to detect and block. Even the most popular
ﬁngerprint was seen in only 0.06% of connections, making it
ranked 130th in popularity. It appears to be used by a small
fraction of Android 7.0 clients that access googleapis.com.
We conﬁrmed these ﬁndings using two devices: a Google
Pixel running Android 7.1 with Signal version 4.12.3, and a
Samsung G900V running Android 6.0.1 with Signal version
4.11.5.
Signal on Android uses the okhttp6 library to create TLS
connections with three different “connection specs” that deﬁne
the cipher suites and TLS version to be used in the Client
Hello. Signal attempted to mimic 3 different clients for 3
fronts it used: Google Maps, Mail and Play. However, we
identify two problems: First, the okhttp library disables certain
cipher suites by default such as DHE and RC4 ciphers, which
are speciﬁed in Signal’s connection specs [12]. Although the
library supports them, okhttp disallows their use without an
explicit API call, which Signal did not use. Instead, the okhttp
library silently drops these ciphers from the Client Hello it
sends, causing it to diverge from the intended connection spec.
Second, even when the desired cipher suite list is unaltered,
these cipher suites still correspond to unpopular clients, due
6https://square.github.io/okhttp/
to differences in other parts of Client Hello. For example,
the GMAIL_CONNECTION_SPEC’s cipher suite list is most
commonly sent by Android 6.0.1, and is seen in only 0.17%
of connections. However, the Signal Client Hello is trivially
distinguishable from the Android 6.0.1 ﬁngerprint, as Signal
does not specify support for HTTP/2 in its ALPN extension,
while Android does.
By April 2018, Signal switched to using the Amazon-
owned souq.com, and changed the TLS conﬁguration to only
use a single connection spec. This conﬁguration still included
3 DHE cipher suites, which are ignored and not sent by
the okhttp library. We also noticed that despite only the
single spec, Signal generates two distinct TLS ﬁngerprints,
differing in which signature algorithms they list. Each of these
ﬁngerprints are seen in fewer than 100 times (<0.000001% of
connections).
As of May 2018, Signal no longer uses domain fronting,
making these issues moot. Nevertheless, these examples illus-
trate several challenges in mimicking popular TLS implemen-
tations. First, libraries are not currently purpose-built for the
task of mimicry, emphasizing security over an application’s
choice of cipher suites. Second, in addition to cipher suites,
an application also must specify extensions and their values in
order to properly mimic other implementations.
B. meek
is bundled with the Tor Browser. Unfortunately,
meek is a domain fronting-based pluggable transport used
by Tor to circumvent censorship [14], [16], [17]. meek tunnels
through the Firefox ESR (Extended Support Release) version
that
the
Client Hello of Firefox and Firefox ESR may diverge, which
eventually makes the ﬁngerprint of ESR versions relatively
uncommon, allowing meek to be blocked with smaller collat-
eral damage. As of August 2018, meek uses Firefox 52 ESR
whose corresponding Client Hello is the 42nd most popular
ﬁngerprint in our dataset, seen in approximately 0.50% of
connections. The majority of regular Firefox users have mi-
grated to Firefox versions 59+, whose most popular ﬁngerprint
is ranked 6th in our dataset seen in 3.64% of connections.
Thus, meek is using a version of Firefox that is once
again approaching obsolescence, potentially allowing censors
to block it without blocking many normal users. Unfortunately,
meek must wait for updates to the underlying Tor Browser to
receive updated TLS features, making it relatively inﬂexible in
its current design.
C. Snowﬂake
Snowﬂake [18] is a pluggable transport for Tor that relies
on a large number of short-lived volunteer proxies, similar
to Flashproxy [24]. Clients connect to a broker via domain
fronting, and request information about volunteers running
browser proxies, and then connect to and uses those proxies
over the WebRTC protocol.
Snowﬂake is under active development, and its authors
were aware of potential TLS ﬁngerprintability issues. Indeed,
we ﬁnd that Snowﬂake (built from git master branch on April
17, 2018) generates a ﬁngerprint that is close to, but not exactly
the same as the default Golang TLS ﬁngerprint. In particular,
7
it diverges by including the NPN and ALPN extensions, and
offers a different set of signature algorithms. As a result,
this ﬁngerprint is seen in fewer than 0.0008% of connections,
making it susceptible to blocking.
TLS, illustrating that application-level demands may result in
observably different handshakes, ultimately allowing a censor
to block them.
D. Outline
Outline is a private self-hosted proxy based on Shad-
owsocks, a randomized protocol that attempts to look like
nothing. Outline provides a GUI interface that guides the user
through the Shadowsocks setup process, including purchase of
a VM on DigitalOcean. During the purchase, the installation
script uses TLS, leveraging the Electron framework (based on
Chromium). As of our tests in May 2018, we ﬁnd that Outline’s
TLS ﬁngerprint matches that of Chrome version 58-64.
While this ﬁngerprint is decreasing in popularity with the
release of Chrome 65, it still remains common: We observed
it in 2.10% connections in the ﬁrst week of May (vs. 8.76%
of connections over our full dataset). As of August 2018, the
weekly rate of connections with this ﬁngerprint has fallen to
1.72%. Still, the Outline installation process is unlikely to be
blocked based on the generated TLS ﬁngerprint in the short
term, though it must take care to update before use of this
ﬁngerprint wanes further.
We did not evaluate the rest of the communication proto-
cols used by Outline after installation, as it does not use TLS.
E. TapDance
TapDance [65] uses refraction networking to circumvent
censors, placing proxies at Internet service providers (ISPs)
outside censoring countries, and having clients communicate
with them by establishing a TLS connection to a reachable site
that passes the ISP. As it connects to innocuous websites, the
TapDance client must make its TLS connection appear normal
to the censor while it covertly communicates with the on-path
ISP.
As of May 2018, TapDance uses a randomized Client
Hello, which protects it against straightforward blacklisting.
However, the randomized ﬁngerprints generated by TapDance
are not found in our dataset of real-world ﬁngerprints, which
could allow a censor to block it by distinguishing randomized
Client Hellos from typical ones, or by simply employing a
whitelist of allowed TLS Client Hello messages.
F. Lantern
Lantern uses several protocols to circumvent censorship,
mainly relying on the randomized Lampshade pluggable trans-
port [43]. However, as of February 2018, several parts of
Lantern still use TLS as a transport, allowing us (and censors)
to capture its ﬁngerprint.
We observed that Lantern uses a Golang TLS variant
that sends a Session Ticket extension, and doesn’t send the
server name extension. This variant does appear in our dataset,
however, at a very low rate: approximately 0.0003% of con-
nections, ranked 1867 in terms of popularity.
Lantern uses the Session Ticket to communicate infor-
mation covertly out-of-band to their server. However,
this
use makes their ﬁngerprint differ from the default Golang
G. Psiphon
Similar to Lantern, Psiphon also uses several circumvention
transports, including domain fronting over TLS. We obtained a
version of the Psiphon Android application that only connects
using TLS from the app’s developers, allowing us to collect
TLS ﬁngerprints generated by it. Psiphon cycles through
different Chrome and Android ﬁngerprints until it ﬁnds an
unblocked one that allows them to connect to their servers.
Such a diverse set of ﬁngerprints may help evade censorship,
even if most ﬁngerprints get blocked. However, a censor with
a stateful DPI capability may also be able to use this feature
to detect (and ultimately block) Psiphon users.
We ﬁnd Psiphon successfully mimics Chrome 58-64, gen-
erating two ﬁngerprints ranked in the top 20 in our dataset, but
is less successful at mimicking legacy Android: ﬁngerprints
supposedly targeting Android were seen in fewer than 50
connections out of the 11 billion. We also determined that
Psiphon sometimes mimics Chrome without an SNI to evade
SNI-based blocking, generating a blockable ﬁngerprint seen in
fewer than 0.0002% of connections.
H. VPNs
We analyzed OpenVPN and 3 services that advertised
an ability to circumvent censorship: IVPN, NordVPN and
privateinternetaccess.com. VPNs tend to use UDP by default
for performance beneﬁts, which we did not collect in our
measurement system. However, we extracted the cipher suites
and extensions from OpenVPN’s UDP TLS handshake, and
found that the combination is rare in our (TCP-based) dataset.
This may suggest that OpenVPN has a distinctive ﬁngerprint,
given the unique set of features in its ﬁngerprint (85 cipher
suites, 13 groups, 14 signature algorithms, and rare set of
extensions), but we cannot be sure without collecting UDP
TLS connections.
We did recover one TCP TLS ﬁngerprint from NordVPN,
which is a circumvention plugin in Google Chrome. However,
this plugin uses the API of the host browser to make TLS
requests, making it
indistinguishable from the version of
Google Chrome it is installed in.
I. Vendor Response
We notiﬁed the authors of the censorship circumvention
tools about respective ﬁngerprintability issues, and provided
additional data about ﬁngerprints as well as potential defenses.
In response to our disclosure, developers of Psiphon,
Lantern, and TapDance integrated our uTLS library described
in Section VII to take advantage of alternative mimicry options
and have greater control over TLS features. The Snowﬂake
and meek authors were aware that the current ﬁngerprint was
not ideal, but didn’t have immediate plans to ﬁx it. Snowﬂake
is still in active development; and meek will keep tunneling
through Firefox ESR in short term, due to the effort involved
in changing it, but is considering going back to mimicking,
rather than tunneling. We disclosed our ﬁndings to Signal via
8
Version/Date Rank [all time] % Connections
Tool
Psiphon
Outline
meek
Snowﬂake
Lantern
TapDance
Signal
May 2018 1
TBB 7.5 42
April 2018 1378
4.6.13 1867
Jan 2018 1
9
62
198
203
500
2190
14397
16814
May 2018 random
4.19.3 11468
12982
8.76%
2.42%
0.25%
0.04%
0.04%
0.01%
0.0002%
0.0000%
0.0000%
8.76%
0.50%
0.0008%
0.0003%
-
0.0000%
0.0000%
TOOL FINGERPRINTABILITY — SUMMARY OF ALL TLS
TABLE II.
FINGERPRINTS GENERATED BY CENSORSHIP CIRCUMVENTION TOOLS AND
THEIR RANK AND PERCENT OF CONNECTIONS SEEN IN OUR DATASET AS
OF EARLY AUGUST 2018. HIGHLIGHTED IN RED ARE FINGERPRINTS SEEN
IN RELATIVELY FEW (< 0.1%) CONNECTIONS, PUTTING THEM AT RISK OF
BLOCKING BY A CENSOR.
email and a GitHub issue prior to their removal of domain