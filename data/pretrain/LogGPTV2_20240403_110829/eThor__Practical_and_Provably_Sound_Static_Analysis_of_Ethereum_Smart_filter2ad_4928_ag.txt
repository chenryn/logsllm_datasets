The rule shown in Figure 14 for example will be instantiated for
all program counters !pc at which c∗ holds an MSTORE instruction.
The sequence of these program counters is provided by the selector
function pcsForOpcode that maps opcodes to their corresponding
set of occurrences (identified by program counter) in c∗.
Within the body of rules we can define (optionally hygienic)
macros that we can use in the subsequent clauses of the rule. The
clauses themselves (declared with keyword clause), describe a
Horn clause consisting of a list of premises and a conclusion rang-
ing over free variables which need to be explicitly declared upfront.
Premises are lists of predicate applications and boolean HoRSt ex-
pressions while the conclusion may only consist of a single predi-
cate application. The example in Figure 14 defines three clauses that
exactly correspond to the Horn clauses defined for(cid:76)MSTORE(cid:77)pc
in Figure 6.
Sum Expressions. Selector functions can not only be used to gen-
erate rules, but can also be used at the expression level. So-called
sum expressions exist in two different shapes: in the simple case
(shown later in Figure 18), predefined associative operations (addi-
tion, multiplication, disjunction and conjunction) are used to join
Accepted for ACM CCS, 2020
expressions that may make use of the values returned by the selec-
tor function; the generalized case can be seen in line 2 of Figure 14.
The operation valToMemWord updates 32 consecutive memory cells of mem
with fractions of the value v starting from position o — mem is the start
value, store x (o + !a)(absExtractByteL{!a}(v)) is the iterated expression
(x acts as a placeholder for the last iteration step’s result).
Queries. In order to check for reachability of abstract configura-
tions, HoRSt allows for the specification of (reachability) queries
that can also be generated from selector functions. The query shown
in Figure 15 for instance, checks for reentrancy by checking if any
CALL instruction is reachable with call level cℓ = 1 (here encoded as
bool). It therefore is an implementation of the reachability property
introduced in § 3.5.
Note that if there is a notion of an expected outcome, we can
define queries with the keyword test as seen in Figure 18.
B THEORETICAL FOUNDATIONS OF ETHOR
In this section, we provide details on the theoretical foundations of
eThor. We start by formally characterizing the notion of Horn-clause
based abstractions as they can be implemented in HoRSt and relate
this concept to the general framework of abstract interpretation.
Next, we provide missing details on the definition of the static
analysis underlying eThor and conclude with a detailed proof sketch
of the soundness statement for this analysis.
B.1 Horn-clause based abstractions
In this section, we more formally characterize the aim and scope of
this work, as well as the kind of static analyses that are realizable by
HoRSt. Generally, we focus on the reachability analysis of programs
with a small-step semantics, which we over-approximate by an
abstract program semantics based on Horn clauses. More formally,
we will assume a program’s small-step semantics to be a binary
relation Ss over program configurations c ∈ C. A Horn-clause based
abstraction for such a small-step semantics Ss is then fully specified
by a tuple (D,S, α, Λ) where S defines the signature of predicates
with arguments ranging over (partially) ordered subsets of D. For a
given a predicate signature S, an abstraction function α : C → A
maps concrete program configurations c ∈ C to abstract program
configurations ∆ ∈ A consisting of instances of predicates in S.
P(D))) is a partial function from predicate names N to their argu-
ment types (formally written as a product over the subsets of some
abstract superdomain D, equipped with a corresponding order).
We require for all n ∈ N that (D, ≤) ∈ S(n) that (D, ≤) forms a
partially ordered set. Correspondingly, the set of abstract config-
urations AS over S can be defined as P({n((cid:174)v) | n ∈ N ∧ ∀i ∈
{1, . . . , |S(n)|}. πi(S(n)) = (D, ≤) =⇒ πi((cid:174)v) ∈ D}) where πi(·)
denotes the usual projection operator. The abstraction of a small-
step semantics is then a set of constrained Horn clauses Λ ⊆ H(S)
that approximates the small-step execution rules.
A constrained horn clause is a first order formula of the form
Formally, a predicate signature S ∈ N ↛(P(D) × (P(D) ×
∀X . Φ, P ⇒ c
Where X ⊆ Vars × P(D) is a (functional) set of typed variables,
and Φ is a set of quantifier free constraints over the variables in X.
Conclusions c are predicate applications n((cid:174)z) ∈ PX := {n((cid:174)x) | |(cid:174)x| =
17
Accepted for ACM CCS, 2020
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
clause [? size : int , ? sa : array , ? mem : array , ? stor : array , ? cl : bool , ? offset : AbsDom , ?p: int , ?v: AbsDom ]
for (! a: int ) in interval (32) : x: array  -> store x (o + !a) ( absExtractByteL {! a }( v)) , mem ;
for (! id : int ) in ids () ,
(! pc : int ) in pcsForIdAndOpcode (! id , MSTORE ) ,
(! p: int , !v: int ) in argumentsTwoForIdAndPc (! id , ! pc )
1 op valToMemWord (v: AbsDom , mem : array , o: int ): array  :=
2
3 op isConcrete (a: AbsDom ): bool := match a with | @T => false | _ => true ;
4 op extractConcrete (a: AbsDom ): int := match a with | @V (x) => x | _ => 0;
5
6 rule opMstore :=
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
MState {! id ,! pc }(? size , ?sa , ? mem , ? stor , ? cl ) , ? size > 1,
!p != ~1 ,
?v = tryConcrete {! v }( select ? sa (? size -2) )
=> MState {! id , ! pc +1}(? size - 2, ?sa , writeWord {! p }(? v , ? mem ) , ? stor , ? cl ) ,
MState {! id ,! pc }(? size , ?sa , ? mem , ? stor , ? cl ) , ? size > 1,
!p = ~1 ,
? pos = select ? sa (? size -1) ,
?v = tryConcrete {! v }( select ? sa (? size -2) ) ,
? memn = ( isConcrete (? pos )) ? ( writeWordEven ( extractConcrete (? pos ) , ?v , ? mem )) : ([ @T ])
=> MState {! id , ! pc +1}(? size - 2, ?sa , ? memn , ? stor , ? cl );
?v: AbsDom , ? memn : array ]
clause [? size : int , ? sa : array , ? mem : array , ? stor : array , ? cl : bool , ? pos : AbsDom ,
Figure 14: HoRSt rule describing the abstract semantics of the local memory write operation(cid:76)MSTORE(cid:77)pc
for (! id : int ) in ids () ,
1 query reentrancyCall
2
3
4
5
6
(! pc : int ) in pcsForIdAndOpcode (! id , CALL )
[? sa : array , ? mem : array ,
? stor : array , ? size : int ]
MState {! id , ! pc }(? size , ?sa , ? mem , ? stor , true );
Figure 15: HoRSt-query for reeentrancy.
|S(n)| ∧ ∀i ∈ {1, . . . , |(cid:174)x|}. πi((cid:174)x) = x ∧ πi(S(n)) = (D, ≤) =⇒
(x, D) ∈ X} over variables in X that respect the variable type. Corre-
spondingly, the premises P ⊆ PX , are a set of predicate applications
over variables in X.
We lift the suborders of S to an order on abstract configurations
∆1, ∆2 ∈ AS as follows:
n1((cid:174)t1) ≤p n2((cid:174)t2) := n1 = n2
∧ ∀i ∈ {1, . . . , | (cid:174)t1|}. πi((cid:174)t1) ≤n1,i πi((cid:174)t2)
α:
given πi(S(n)) = (Dn,i, ≤n,i)
∆1 ≤ ∆2 := ∀p1 ∈ ∆1 . ∃p2 ∈ ∆2 . p1 ≤p p2
Finally, we introduce the notion of soundness for a Horn-clause
based abstraction.
Definition B.1. A Horn-clause based abstraction(D,S, α, Λ) soundly
approximates a small-step semantics Ss if
∀(c, c′) ∈ S∗
s . ∀∆. α(c) ≤ ∆
⇒ ∃∆
′
. ∆, Λ ⊢ ∆
′ ∧ α(c′) ≤ ∆
′
(1)
This statement requires that, whenever a concrete configura-
tion c′ is reachable from configuration c (meaning that (c, c′) is
contained in the reflexive and transitive closure of Ss, denoted as
S∗s ), it shall hold that from all abstractions ∆ of c, the Horn clause
abstraction allows us to logically derive (⊢) a valid abstraction ∆′
of c′. Note that α intuitively yields the most concrete abstraction
of a configuration, hence to make the property hold for all possible
abstractions of a configuration, we strengthen the property to hold
for all abstractions that are more abstract than α(c). The soundness
theorem implies that whenever we can show that from some ab-
straction ∆ of a configuration c there is no abstract configuration
18
∆′ derivable such that ∆′ abstracts c′, then c′ is not reachable from
c. Consequently, if it is possible to enumerate all abstractions of
c′, checking non-derivability (as it is supported by the fixedpoint
engines of modern SMT solvers) gives us a procedure for proving
unreachability of program configurations.
Relation to abstract interpretation. It is possible to phrase the
previous characterization in terms of classical abstract interpreta-
tion notions. More precisely, we can define a Galois connection
(α, γ) between sets of concrete configurations P(C) (ordered by ⊆)
and abstract configurations A (ordered by ≤). To this end, we lift
the abstraction function α to subsets in a canonical fashion:
α(C) :=
c∈C
α(c)
(2)
Next, we define the the concretization function with the help of
γ(∆) := {c ∈ C | α(c) ≤ ∆}
Lemma B.2. The pair of functions (α, γ) forms a Galois connection
between (P(C), ⊆) and (A, ≤).
Proof. We need to show for all C and ∆ that
α(C) ≤ ∆ ⇔ C ⊆ γ(∆)
⇒: Let α(C) ≤ ∆. Further let c ∈ C. We show that c ∈ γ(∆).
By the definition of γ it is sufficient to show that α(c) ≤ ∆.
Let p1 ∈ α(c). We show that there is some p2 ∈ ∆ such that
p1 ≤ p2. Since p1 ∈ α(c) and c ∈ C, we know that p1 ∈ α(C)
and since α(C) ≤ ∆ also that there needs to be some p2 ∈ ∆
such that p1 ≤ p2 what concludes the proof.
⇐: Let C ⊆ γ(∆). Further let p1 ∈ α(C). We show that there is
some p2 ∈ ∆ such that p1 ≤ p2. Since p1 ∈ α(C) there must
be some c ∈ C such that p1 ∈ α(c). And from C ⊆ γ(∆) we
can conclude that c ∈ γ(∆) which implies that α(c) ≤ ∆.
Consequently there needs to be a p2 ∈ ∆ such that p1 ≤ p2
what concludes the proof.
□
eThor: Practical and Provably Sound Static Analysis
of Ethereum Smart Contracts
Now, we can define reachability on concrete configurations and
derivability of abstract configurations as the least fixed points of
step functions which describe a collecting semantics (with respect
to some initial configuration).
FI(C) := {c
′ | ∃c ∈ C. (c, c
′) ∈ Ss} ∪ I
′
∆I
F
(∆) := {p | ∆, Λ ⊢ p} ∪ ∆I
We obtain the following intuitive correspondences between the
(3)
(4)
different characterizations:
∗
′) ∈ S
(c, c
s ⇔ c
′ ⇔ ∆
∆, Λ ⊢ ∆
′ ∈ lfp[F{c }]
′
′ ⊆ lfp[F
∆]
where lfp[f ] denotes the least fixed point of a function f .
To ensure that the corresponding least fixed points exists, we
need to ensure that the domains P(C) and A of the Galois connec-
tion form a complete lattice and that both FI and F ′
are monotone.
While ⟨P(C), ⊆, ∅, P(C),∪,∩⟩ is the canonical power set lattice,
we can easily show ⟨A, ≤, ∅, ∆,∪,∩⟩ to also form a complete lat-
tice as ⊆ is a subrelation of ≤. While it is trivial to show that FI is
monotone, for F ′
. ∆ ≤ ∆
∀∆, ∆
(5)
Using the step functions, we can characterize sound over-
approximations as defined in Definition B.1 in an alternative fashion.
More precisely, we require our approximation to be a sound upper
approximation [18].
it becomes a proof obligation on Λ:
′ ∧ ∆, Λ ⊢ p =⇒ ∃p
′ ∧ ∆
′
. p ≤ p
, Λ ⊢ p
∆I
∆I
′
′
′
Lemma
B.3. A
abstraction
Horn-clause
(D, {≤n,i}(n,i),S, α, Λ)
soundly approximates a small-step
semantics Ss iff Λ satisfies Equation (5) and for all c ∈ C and all
∆ ≥ α(c)
based
α(lfp[F{c }]) ≤ lfp[F
′
∆]
∆
Proof. "⇒": Assume Equation (1) and f1 ∈ α(lfp[F{c }]) for
some fact f1. We show that there exists some fact f2 such that
f2 ∈ lfp[F ′
] and f1 ≤ f2. By Equation (2), we know that from f1 ∈
α(lfp[F{c }]) we can conclude that there exists some c′ ∈ lfp[F{c }]
such that f1 ∈ α(c′). By Equation (3), we have that (c, c′) ∈ S∗s
and hence by Equation (1) we can conclude that there exists some
∆′ such that ∆, Λ ⊢ ∆′ and α(c′) ≤ ∆′. With f1 ∈ α(c′) we get
from this that there exists some f2 ∈ ∆′ such that f1 ≤ f2. Since
∆, Λ ⊢ ∆′, we get from Equation (4) that ∆′ ⊆ lfp[F ′
] and hence
also f2 ∈ lfp[F ′
] and let (c, c′) ∈ S∗s and
α(c) ≤ ∆. We show that there is some ∆′ such that ∆, Λ ⊢ ∆′
and α(c′) ≤ ∆′. By Equation (3), we get that c′ ∈ lfp[F{c }] and
hence also α(c′) ⊆ α(lfp[F{c }]) (by Equation (2)). As α(lfp[F{c }]) ≤
lfp[F ′
]. Additionally, it follows
from Equation (4) immediately that ∆, Λ ⊢ lfp[F ′
]. This closes our
∆
proof.
□
] can be shown
"⇐": Assume α(lfp[F{c }]) ≤ lfp[F ′
] it follows that also α(c′) ≤ lfp[F ′
is monotonic, α(lfp[F{c }]) ≤ lfp[F ′
] which concludes the proof.
to be a consequence of the following one-step characterization:
Given that F ′
∆
∆
∆
∆
∆
∆
∆
α ◦ F ≤ F
(where F = F∅ and F ′ = F ′
∅).
′ ◦ α
(6)
19
Accepted for ACM CCS, 2020
This is as α ◦ F ≤ F ′ ◦ α implies for all c ∈ C and all ∆ ≥ α(c)
that α ◦ F{c } ≤ F ′
◦ α and by the fixed point transfer theorem [18]