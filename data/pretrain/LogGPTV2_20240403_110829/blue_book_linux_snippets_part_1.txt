---
title: Linux snippets
date: 20200826
author: Lyz
---
# [Makefile use bash instead of sh](https://stackoverflow.com/questions/589276/how-can-i-use-bash-syntax-in-makefile-targets)
The program used as the shell is taken from the variable `SHELL`.  If
this variable is not set in your makefile, the program `/bin/sh` is
used as the shell.
So put `SHELL := /bin/bash` at the top of your makefile, and you should be good to go.
# [Recover the message of a commit if the command failed](https://unix.stackexchange.com/questions/590224/is-git-commit-message-recoverable-if-committing-fails-for-some-reason)
`git commit` can fail for reasons such as `gpg.commitsign = true` && `gpg` fails, or when running a pre-commit. Retrying the command opens a blank editor and the message seems to be lost.
The message is saved though in `.git/COMMIT_EDITMSG`, so you can:
```bash
git commit -m "$(cat .git/COMMIT_EDITMSG)"
```
Or in general (suitable for an alias for example):
```bash
git commit -m "$(cat "$(git rev-parse --git-dir)/COMMIT_EDITMSG)")"
```
# [Accept new ssh keys by default](https://stackoverflow.com/questions/21383806/how-can-i-force-ssh-to-accept-a-new-host-fingerprint-from-the-command-line)
While common wisdom is not to disable host key checking, there is a built-in option in SSH itself to do this. It is relatively unknown, since it's new (added in Openssh 6.5).
This is done with `-o StrictHostKeyChecking=accept-new`. Or if you want to use it for all hosts you can add the next lines to your `~/.ssh/config`:
```
Host *
  StrictHostKeyChecking accept-new
```
WARNING: use this only if you absolutely trust the IP\hostname you are going to SSH to:
```bash
ssh -o StrictHostKeyChecking=accept-new mynewserver.example.com
```
Note, `StrictHostKeyChecking=no` will add the public key to `~/.ssh/known_hosts` even if the key was changed. `accept-new` is only for new hosts. From the man page:
> If this flag is set to “accept-new” then ssh will automatically add new host keys to the user known hosts files, but will not permit connections to hosts with changed host keys. If this flag is set to “no” or “off”, ssh will automatically add new host keys to the user known hosts files and allow connections to hosts with changed hostkeys to proceed, subject to some restrictions. If this flag is set to ask (the default), new host keys will be added to the user known host files only after the user has confirmed that is what they really want to do, and ssh will refuse to connect to hosts whose host key has changed. The host keys of known hosts will be verified automatically in all cases.
# [Do not add trailing / to ls](https://stackoverflow.com/questions/9044465/list-of-dirs-without-trailing-slash)
Probably, your `ls` is aliased or defined as a function in your config files.
Use the full path to `ls` like:
```bash
/bin/ls /var/lib/mysql/ 
```
# [Convert png to svg](https://askubuntu.com/questions/470495/how-do-i-convert-a-png-to-svg)
Inkscape has got an awesome auto-tracing tool.
- Install Inkscape using `sudo apt-get install inkscape`
- Import your image
- Select your image
- From the menu bar, select Path > Trace Bitmap Item
- Adjust the tracing parameters as needed
- Save as svg
Check their [tracing tutorial](https://inkscape.org/en/doc/tutorials/tracing/tutorial-tracing.html) for more information.
Once you are comfortable with the tracing options. You can automate it by using [CLI of Inkscape](https://inkscape.org/en/doc/inkscape-man.html).
# [Redirect stdout and stderr of a cron job to a file](https://unix.stackexchange.com/questions/52330/how-to-redirect-output-to-a-file-from-within-cron)
```
*/1 * * * * /home/ranveer/vimbackup.sh >> /home/ranveer/vimbackup.log 2>&1
```
# Error when unmounting a device: Target is busy
- Check the processes that are using the mountpoint with `lsof /path/to/mountpoint` 
- Kill those processes
- Try the umount again
If that fails, you can use `umount -l`.
# Wipe a disk
Overwrite it many times [with badblocks](hard_drive_health.md#check-the-health-of-a-disk-with-badblocks).
```bash
badblocks -wsv -b 4096 /dev/sde | tee disk_wipe_log.txt
```
# [Impose load on a system to stress it](https://linux.die.net/man/1/stress)
```bash
sudo apt-get install stress
stress --cpu 2
```
That will fill up the usage of 2 cpus. To run 1 vm stressor using 1GB of virtual memory for 60s, enter:
```bash
stress --vm 1 --vm-bytes 1G --vm-keep -t 60s
```
You can also stress io with `--io 4`, for example to spawn 4 workers.
# [Get the latest tag of a git repository](https://stackoverflow.com/questions/1404796/how-can-i-get-the-latest-tag-name-in-current-branch-in-git)
```bash
git describe --tags --abbrev=0
```
# [Configure gpg-agent cache ttl](https://superuser.com/questions/624343/keep-gnupg-credentials-cached-for-entire-user-session)
The user configuration (in `~/.gnupg/gpg-agent.conf`) can only define the default and maximum caching duration; it can't be disabled.
The `default-cache-ttl` option sets the timeout (in seconds) after the last GnuPG activity (so it resets if you use it), the `max-cache-ttl` option set the timespan (in seconds) it caches after entering your password. The default value is 600 seconds (10 minutes) for `default-cache-ttl` and 7200 seconds (2 hours) for max-cache-ttl.
```
default-cache-ttl 21600
max-cache-ttl 21600
```
For this change to take effect, you need to end the session by restarting `gpg-agent`.
```bash
gpgconf --kill gpg-agent
gpg-agent --daemon --use-standard-socket
```
# Get return code of failing find exec
When you run `find . -exec ls {} \;` even if the command run in the `exec` returns a status code different than 0 [you'll get an overall status code of 0](https://serverfault.com/questions/905031/how-can-i-make-find-return-non-0-if-exec-command-fails) which makes difficult to catch errors in bash scripts.
You can instead use `xargs`, for example:
```bash
find /tmp/ -iname '*.sh' -print0 | xargs -0 shellcheck
```
This will run `shellcheck file_name` for each of the files found by the `find` command.
# Limit the resources a docker is using
You can either use limits in the `docker` service itself, see [1](https://unix.stackexchange.com/questions/537645/how-to-limit-docker-total-resources) and [2](https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html).
Or/and you can limit it for each docker, see [1](https://www.baeldung.com/ops/docker-memory-limit) and [2](https://docs.docker.com/config/containers/resource_constraints/).
# [Get the current git branch](https://stackoverflow.com/questions/6245570/how-do-i-get-the-current-branch-name-in-git)
```bash
git branch --show-current
```
# Install latest version of package from backports
Add the backports repository:
```bash
vi /etc/apt/sources.list.d/bullseye-backports.list
```
```
deb http://deb.debian.org/debian bullseye-backports main contrib
deb-src http://deb.debian.org/debian bullseye-backports main contrib
```
Configure the package to be pulled from backports
```bash
vi /etc/apt/preferences.d/90_zfs
```
```
Package: src:zfs-linux
Pin: release n=bullseye-backports
Pin-Priority: 990
```
# [Rename multiple files matching a pattern](https://stackoverflow.com/questions/6840332/rename-multiple-files-by-replacing-a-particular-pattern-in-the-filenames-using-a)
There is `rename` that looks nice, but you need to install it. Using only `find` you can do:
```bash
find . -name '*yml' -exec bash -c 'echo mv $0 ${0/yml/yaml}' {} \; 
```
If it shows what you expect, remove the `echo`.
# [Force ssh to use password authentication](https://superuser.com/questions/1376201/how-do-i-force-ssh-to-use-password-instead-of-key)
```bash
ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no PI:EMAIL
```
# [Do a tail -f with grep](https://stackoverflow.com/questions/23395665/tail-f-grep)
```bash
tail -f file | grep --line-buffered my_pattern
```
# [Check if a program exists in the user's PATH](https://stackoverflow.com/questions/592620/how-can-i-check-if-a-program-exists-from-a-bash-script)
```bash
command -v 
```
Example use:
```bash
if ! command -v  &> /dev/null
then
    echo " could not be found"
    exit
fi
```
# [Reset failed systemd services](https://unix.stackexchange.com/questions/418792/systemctl-remove-unit-from-failed-list)
Use systemctl to remove the failed status. To reset all units with failed status:
```bash
systemctl reset-failed
```
or just your specific unit:
```bash
systemctl reset-failed openvpn-server@intranert.service
```
# [Automatic reboot after power failure](https://askubuntu.com/questions/111907/automatic-reboot-after-power-failure)
That's not something you can control in your operating system. That's what the BIOS is for. In most BIOS setups there'll be an option like After power loss with possible values like Power off and Reboot.
You can also edit `/etc/default/grub` and add:
```
GRUB_RECORDFAIL_TIMEOUT=5
```
Then run:
```bash
sudo update-grub
```
This will make your machine display the boot options for 5 seconds before it boot the default option (instead of waiting forever for you to choose one).
# SSH tunnel 
```bash
ssh -D 9090 -N -f user@host
```
If you need to forward an external port to a local one [you can use](https://linuxize.com/post/how-to-setup-ssh-tunneling/)
```bash
ssh -L LOCAL_PORT:DESTINATION:DESTINATION_PORT [USER@]SSH_SERVER
```
If you need a more powerful solution you can try [sshuttle](https://sshuttle.readthedocs.io/en/stable/overview.html)
# [Fix the SSH client kex_exchange_identification: read: Connection reset by peer error](https://stackoverflow.com/questions/69394001/how-can-i-fix-kex-exchange-identification-read-connection-reset-by-peer)
Restart the `ssh` service.
# [Get class of a window](https://unix.stackexchange.com/questions/703084/how-to-get-current-window-class-name-from-script)
Use `xprop` and click the window.
# Change the brightness of the screen
Get the current brightness level with `cat /sys/class/backlight/intel_backlight/brightness`. Imagine it's `1550`, then if you want to lower the brightness use:
```bash
sudo echo 500 > /sys/class/backlight/intel_backlight/brightness
```
# [Force umount nfs mounted directory](https://stackoverflow.com/questions/40317/force-unmount-of-nfs-mounted-directory)
```bash
umount -l path/to/mounted/dir
```
# [Configure fstab to mount nfs](https://linuxopsys.com/topics/linux-nfs-mount-entry-in-fstab-with-example)
NFS stands for ‘Network File System’. This mechanism allows Unix machines to share files and directories over the network. Using this feature, a Linux machine can mount a remote directory (residing in a NFS server machine) just like a local directory and can access files from it.
An NFS share can be mounted on a machine by adding a line to the `/etc/fstab` file.
The default syntax for `fstab` entry of NFS mounts is as follows.
```
Server:/path/to/export /local_mountpoint nfs  0 0
```
Where:
* `Server`: The hostname or IP address of the NFS server where the exported directory resides.
* `/path/to/export`: The shared directory (exported folder) path.
* `/local_mountpoint`: Existing directory in the host where you want to mount the NFS share.
You can specify a number of options that you want to set on the NFS mount:
* `soft/hard`: When the mount option `hard` is set, if the NFS server crashes or becomes unresponsive, the NFS requests will be retried indefinitely. You can set the mount option `intr`, so that the process can be interrupted. When the NFS server comes back online, the process can be continued from where it was while the server became unresponsive.
  When the option `soft` is set, the process will be reported an error when the NFS server is unresponsive after waiting for a period of time (defined by the `timeo` option). In certain cases `soft` option can cause data corruption and loss of data. So, it is recommended to use `hard` and `intr` options.
* `noexec`: Prevents execution of binaries on mounted file systems. This is useful if the system is mounting a non-Linux file system via NFS containing incompatible binaries.
* `nosuid`: Disables set-user-identifier or set-group-identifier bits. This prevents remote users from gaining higher privileges by running a setuid program.
* `tcp`: Specifies the NFS mount to use the TCP protocol.
* `udp`: Specifies the NFS mount to use the UDP protocol.
* `nofail`: Prevent issues when rebooting the host. The downside is that if you have services that depend on the volume to be mounted they won't behave as expected.
# [Fix limit on the number of inotify watches](https://stackoverflow.com/questions/47075661/error-user-limit-of-inotify-watches-reached-extreact-build)
Programs that sync files such as dropbox, git etc use inotify to notice changes to the file system. The limit can be see by -
```bash
cat /proc/sys/fs/inotify/max_user_watches
```
For me, it shows `65536`. When this limit is not enough to monitor all files inside a directory it throws this error.
If you want to increase the amount of inotify watchers, run the following in a terminal:
```bash
echo fs.inotify.max_user_watches=100000 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
```
Where `100000` is the desired number of inotify watches.
# [What is `/var/log/tallylog`](https://www.tecmint.com/use-pam_tally2-to-lock-and-unlock-ssh-failed-login-attempts/)
`/var/log/tallylog` is the file where the `PAM` linux module (used for authentication of the machine) keeps track of the failed ssh logins in order to temporarily block users.
# Manage users