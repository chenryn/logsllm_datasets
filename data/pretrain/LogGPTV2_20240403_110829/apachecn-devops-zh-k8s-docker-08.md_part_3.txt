重要说明
虽然策略文件可能看起来像标准的 Kubernetes 清单，但您不能使用`kubectl`应用它。策略文件与应用编程接口服务器上的`--audit-policy-file`应用编程接口标志一起使用。这将在*启用集群审核*一节中解释。
为了理解规则以及它将记录什么，我们将详细地浏览每个部分。
规则的第一部分是`level`，它决定了将为事件记录的信息类型。有四个级别可以分配给事件:
![Table 8.1 – Kubernetes auditing levels ](img/B15514_table_8.1.jpg)
表 8.1–Kubernetes 审计级别
`userGroups`、`verbs`和`resources`值告诉 API 服务器将触发审核事件的对象和动作。在本例中，只有来自`system:nodes`的请求试图对`node/status`或`pod/status`应用编程接口上的`node/status`或`pod/status`执行`update`或`patch`操作，才会创建事件。
`omitStages`告诉 API 服务器在*阶段*跳过任何记录事件，这有助于您限制记录的数据量。应用编程接口请求经历四个阶段:
![Table 8.2 – Auditing stages ](img/B15514_table_8.2.jpg)
表 8.2–审计阶段
在我们的例子中，我们已经将事件设置为忽略`RequestReceived`事件，该事件告诉 API 服务器不要为传入的 API 请求记录任何数据。
每个组织都有自己的审核策略，策略文件可能会变得又长又复杂。不要害怕设置一个记录所有事情的策略，直到你掌握了可以创建的事件类型。因为日志文件变得非常大，所以记录所有内容并不是一个好的做法。微调审计策略是一项随着时间推移而学习的技能，随着您对 API 服务器的了解越来越多，您将开始了解哪些事件对审计最有价值。
策略文件只是启用集群审核的开始，现在我们已经了解了策略文件，让我们解释如何在集群上启用审核。
## 在群集上启用审核
启用审核是针对 Kubernetes 的每个发行版的。在本节中，我们将启用 KinD 中的审核日志来了解低级步骤。作为快速复习，最后一章的成品是一个启用了模拟的 KinD 集群(而不是直接与 OpenID Connect 集成)。本章的其余步骤和示例假设正在使用该集群。
您可以手动执行本节中的步骤，也可以在 GitHub 存储库的`chapter8`目录中执行包含的脚本`enable-auditing.sh`:
1.  首先，将示例审核策略从`chapter8`目录复制到 API 服务器:
    ```
    k8s@book:~/kind-oidc-ldap-master$ docker cp k8s-audit-policy.yaml cluster01-control-plane:/etc/kubernetes/audit/
    ```
2.  Next, create the directories to store the audit log and policy configuration on the API server. We will exec into the container since we need to modify the API server file in the next step:
    ```
    k8s@book:~/kind-oidc-ldap-master$ docker exec -ti cluster01-control-plane bash
    root@cluster01-control-plane:/# mkdir /var/log/k8s
    root@cluster01-control-plane:/# mkdir /etc/kubernetes/audit
    root@cluster01-control-plane:/# exit
    ```
    此时，您已经拥有了 API 服务器上的审核策略，并且可以启用 API 选项来使用该文件。
3.  在 API 服务器上，编辑`kubeadm`配置文件`/etc/kubernetes/manifests/kube-apiserver.yaml`，这是我们为启用 OpenID Connect 而更新的同一个文件。要启用审核，我们需要添加三个值。需要注意的是，许多 Kubernetes 集群可能只需要文件和 API 选项。我们需要第二步和第三步，因为我们正在使用一个 KinD 集群进行测试。
4.  First, add command-line flags for the API server that enable the audit logs. Along with the policy file, we can add options to control the log file rotation, retention, and maximum size:
    ```
        - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
     - --audit-log-path=/var/log/k8s/audit.log
     - --audit-log-maxage=1
     - --audit-log-maxbackup=10
     - --audit-log-maxsize=10
     - --audit-policy-file=/etc/kubernetes/audit/k8s-audit-policy.yaml
    ```
    请注意，该选项指向您在上一步中复制的策略文件。
5.  接下来，将存储策略配置和结果日志的目录添加到`volumeMounts`部分:
    ```
        - mountPath: /usr/share/ca-certificates
          name: usr-share-ca-certificates
          readOnly: true
        - mountPath: /var/log/k8s
     name: var-log-k8s
     readOnly: false
     - mountPath: /etc/kubernetes/audit
     name: etc-kubernetes-audit
     readOnly: true
    ```
6.  最后，将`hostPath`配置添加到`volumes`部分，以便 Kubernetes 知道将本地路径安装到哪里:
    ```
      - hostPath:
          path: /usr/share/ca-certificates
          type: DirectoryOrCreate
        name: usr-share-ca-certificates
     - hostPath:
     path: /var/log/k8s
     type: DirectoryOrCreate
     name: var-log-k8s
     - hostPath:
     path: /etc/kubernetes/audit
     type: DirectoryOrCreate
     name: etc-kubernetes-audit
    ```
7.  保存并退出文件。
8.  Like all API option changes, you need to restart the API server for the changes to take effect; however, KinD will detect that the file has changed and restart the API server's pod automatically.
    从附带的外壳中退出，并检查`kube-system`名称空间中的容器:
    ```
    k8s@book:~/kind-oidc-ldap-master$ kubectl get pods -n kube-system
    NAME                                              READY   STATUS    RESTARTS   AGE
    calico-kube-controllers-5b644bc49c-q68q7          1/1     Running   0          28m
    calico-node-2cvm9                                 1/1     Running   0          28m
    calico-node-n29tl                                 1/1     Running   0          28m
    coredns-6955765f44-gzvjd                          1/1     Running   0          28m
    coredns-6955765f44-r567x                          1/1     Running   0          28m
    etcd-cluster01-control-plane                      1/1     Running   0          28m
    kube-apiserver-cluster01-control-plane            1/1     Running   0          14s
    kube-controller-manager-cluster01-control-plane   1/1     Running   0          28m
    kube-proxy-h62mj                                  1/1     Running   0          28m
    kube-proxy-pl4z4                                  1/1     Running   0          28m
    kube-scheduler-cluster01-control-plane            1/1     Running   0          28m
    ```
    应用编程接口服务器突出显示仅运行了 14 秒，表明它已成功重启。
9.  Having verified that the API server is running, let's look at the audit log to verify that it's working correctly. To check the log, you can use `docker exec` to tail `audit.log`:
    ```
    $ docker exec cluster01-control-plane  tail /var/log/k8s/audit.log
    ```
    此命令生成以下日志数据:
    ```
    {"kind":"Event","apiVersion":"audit.k8s.io/v1","level":"Metadata","auditID":"473e8161-e243-4c5d-889c-42f478025cc2","stage":"ResponseComplete","requestURI":"/apis/crd.projectcalico.org/v1/clusterinformations/default","verb":"get","user":{"usernam
    e":"system:serviceaccount:kube-system:calico-kube-controllers","uid":"38b96474-2457-4ec9-a146-9a63c2b8182e","groups":["system:serviceaccounts","system:serviceaccounts:kube-system","system:authenticated"]},"sourceIPs":["172.17.0.2"],"userAgent":"
    Go-http-client/2.0","objectRef":{"resource":"clusterinformations","name":"default","apiGroup":"crd.projectcalico.org","apiVersion":"v1"},"responseStatus":{"metadata":{},"code":200},"requestReceivedTimestamp":"2020-05-20T00:27:07.378345Z","stageT
    imestamp":"2020-05-20T00:27:07.381227Z","annotations":{"authorization.k8s.io/decision":"allow","authorization.k8s.io/reason":"RBAC: allowed by ClusterRoleBinding \"calico-kube-controllers\" of ClusterRole \"calico-kube-controllers\" to ServiceAc
    count \"calico-kube-controllers/kube-system\""}}
    ```
这个 JSON 中有相当多的信息，直接查看日志文件来找到一个特定的事件将是一个挑战。幸运的是，现在您已经启用了审核，您可以将事件转发到中央日志服务器。我们将在 [*第 12 章*](12.html#_idTextAnchor295) *、审核使用 Falco 和 EFK* 中进行，我们将在其中部署 EFK 栈。
现在我们已经启用了审核，下一步是练习调试 RBAC 策略。
# 使用 audit2rbac 调试策略
有一个名为`audit2rbac`的工具可以将审核日志中的错误反向工程到 RBAC 策略对象中。在本节中，我们将在发现我们的一个用户无法执行他们需要执行的操作后，使用该工具生成 RBAC 策略。这是一个典型的 RBAC 调试过程，学习如何使用此工具可以为您节省几个小时来隔离 RBAC 问题:
1.  在前一章中，创建了一个通用的 RBAC 策略，允许`k8s-cluster-admins`组的所有成员成为我们集群中的管理员。如果您已登录 OpenUnison，请注销。
2.  Now, log in again, but before hitting the **Finish Login** button at the bottom of the screen, remove the `k8s-cluster-admins` group and add `cn=k8s-create-ns,cn=users,dc=domain,dc=com`:
    ![Figure 8.1 – Updated login attributes ](img/Fig_8.1_B15514.jpg)
    图 8.1–更新的登录属性
3.  Next, click on **Finish Login**. Once logged in, go to the dashboard. Just as when OpenUnison was first deployed, there won't be any namespaces or other information because the RBAC policy for cluster administrators doesn't apply anymore.
    重要说明
    `memberOf`属性的格式从简单名称更改为 LDAP 可分辨名称，因为这是 ADFS 或活动目录最常呈现的格式。从左到右读取**识别名**或**DN**，最左边的组件是对象的名称，其右边的每个组件是其在 LDAP 树中的位置。例如，`name cn=k8s-create-ns,cn=users,dc=domain,dc=com`组被理解为“在`domain.com`域(`dc`)中的`users`容器(`cn`)中的组`k8s-create-ns`虽然 ADFS 可以生成更多用户友好的名称，但这需要特定的配置或脚本，因此大多数实现只需添加`memberOf`属性，该属性列出了用户所属的所有组。
4.  接下来，从令牌屏幕复制您的`kubectl`配置，确保将其粘贴到不是您的主 KinD 终端的窗口中，以免覆盖您的主配置。
5.  Once your tokens are set, attempt to create a namespace called `not-going-to-work`:
    ```
    PS C:\Users\mlb> kubectl create ns not-going-to-work
    Error from server (Forbidden): namespaces is forbidden: User "mlbiamext" cannot create resource "namespaces" in API group "" at the cluster scope
    ```
    这里有足够的信息来逆转 RBAC 策略。
6.  为了消除这个错误信息，创建一个`ClusterRole`，资源为`"namespaces"`，`apiGroups`设置为`""`，动词为`"create"` :
    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: cluster-create-ns
    rules:
    - apiGroups: [""]
      resources: ["namespaces"]
      verbs: ["create"]
    ```
7.  接下来，为用户和这个集群角色创建一个【T0: