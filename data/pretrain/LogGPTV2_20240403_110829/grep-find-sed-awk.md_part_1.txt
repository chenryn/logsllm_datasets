# Command-Line Tools for Increased Productivity: `find`, `grep`, `sed`, and `awk`

## Unix Philosophy
The Unix philosophy is centered around the idea of writing programs that do one thing and do it well. These programs should be designed to work together, and they should handle text streams, which serve as a universal interface.

> "This is the Unix philosophy: Write programs that do one thing and do one thing well. Write programs to work together. Write programs to handle text streams, because that is a universal interface."
>
> â€” Doug McIlroy, inventor of Unix pipes

## Why Learn Command-Line Utilities?
- **Simplicity**: They adhere to the principle of "do one thing."
- **Flexibility**: Designed for re-use.
- **Speed**: No graphical overhead.
- **Ubiquity**: Available on every machine.
- **Permanence**: Proven over 40 years.

## Part 0: Pipes and `xargs`
### Simple Programs
- List files in the current working directory:
  ```sh
  $ ls
  foo bar bazoo
  ```
- Count lines in a file:
  ```sh
  $ wc -l foo
  42 foo
  ```

### Combining Programs
- Count the number of files in the current directory:
  ```sh
  $ ls | wc -l
  3
  ```
- Count lines in multiple files:
  ```sh
  $ ls | xargs wc -l
  42 foo
  31 bar
  12 bazoo
  85 total
  ```

## Part 1: `find`
### Basic Examples
- Find a specific file by name:
  ```sh
  $ find . -name Account.java
  ```
- Find all `.conf` files in `/etc`:
  ```sh
  $ find /etc -name '*.conf'
  ```
- Find all `.xml` files in the current directory:
  ```sh
  $ find . -name '*.xml'
  ```
- Find all non-Java files up to 4 levels deep:
  ```sh
  $ find . -not -name '*.java' -maxdepth 4
  ```
- Find files with names ending in `.jsp` or `.xml`:
  ```sh
  $ find . \( -name '*jsp' -o -name '*xml' \)
  ```

### Additional Options
- Case-insensitive search:
  ```sh
  $ find . -iname 'Account.java'
  ```
- Use `!` instead of `-not`:
  ```sh
  $ find . ! -name '*.java'
  ```
- Quotes prevent shell expansion of wildcards.

### Finding and Performing Actions
- Count lines in all Java files:
  ```sh
  $ find . -name '*.java' | xargs wc -l | sort
  ```
- Alternative using `-exec`:
  ```sh
  $ find . -name '*.java' -exec wc -l {} \; | sort
  $ find . -name '*.java' -exec wc -l {} + | sort
  ```

### Tips
- `-exec` has complex syntax.
- `| xargs` aligns better with the Unix philosophy.
- `\;` is slow and executes the command once per line.
- `| xargs` can fail with filenames containing whitespace, quotes, or slashes.

### Finding by Type
- Find all files:
  ```sh
  $ find . -type f
  ```
- Find all directories:
  ```sh
  $ find . -type d
  ```
- Find all symbolic links:
  ```sh
  $ find . -type l
  ```

### Finding by Modification Time
- Files changed within the last day:
  ```sh
  $ find . -mtime -1
  ```
- Files changed within the last 15 minutes:
  ```sh
  $ find . -mmin -15
  ```

### Comparing to a File or Date
- Find files newer than `foo.txt`:
  ```sh
  $ find . -newer foo.txt
  ```
- Find files not newer than `foo.txt`:
  ```sh
  $ find . ! -newer foo.txt
  ```
- Find files modified after a specific date:
  ```sh
  $ find . -type f -newermt '2010-01-01'
  ```
- Find files modified between two dates:
  ```sh
  $ find . -type f -newermt '2010-01-01' ! -newermt '2010-06-01'
  ```

### Finding by Permissions and Size
- Find files with specific permissions:
  ```sh
  $ find . -perm 644
  $ find . -perm -u=w
  $ find . -perm -ug=w
  $ find . -perm -o=x
  ```
- Find files smaller than 1 KB:
  ```sh
  $ find . -size -1k
  ```
- Find files larger than 100 MB:
  ```sh
  $ find . -size +100M
  ```

### Summary
- `find` can search by name, path, depth, permissions, type, size, modification time, and more.
- Once you find what you want, pipe it to `xargs` if you need to perform actions on the results.

## Part 2: `grep`
### Overview
- `grep` stands for "global / regular expression / print" and is derived from the `ed` command `g/re/p`.
- It is used for finding text within files.

### Basic Usage
- Search for a string in a file:
  ```sh
  $ grep 'new FooDao' Bar.java
  ```
- Search for a string in multiple files:
  ```sh
  $ grep Account *.xml
  ```
- Recursive search:
  ```sh
  $ grep -r 'Dao[Impl|Mock]' src
  ```

### Common Options
- Case-insensitive search:
  ```sh
  $ grep -i foo bar.txt
  ```
- Word match only:
  ```sh
  $ grep -w foo bar.txt
  ```
- Display line numbers:
  ```sh
  $ grep -n 'new Foo()' src
  ```

### Filtering Results
- Inverted search (lines not containing the string):
  ```sh
  $ grep -v foo bar.txt
  ```
- Typical use case:
  ```sh
  $ grep -r User src | grep -v svn
  ```

### More Options
- Search for multiple terms:
  ```sh
  $ grep -e foo -e bar baz.txt
  ```
- Show surrounding lines:
  ```sh
  $ grep -r -C 2 foo src
  ```
- Show lines before and after the match:
  ```sh
  $ grep -r -A 2 -B 2 foo src
  ```

### Example
- Find tests that use the `AccountDao` interface:
  ```sh
  $ grep -rwn -C 3 AccountDao src/test | grep -v svn
  ```

### Summary
- `-r`: Recursive search
- `-i`: Case-insensitive
- `-w`: Whole word
- `-n`: Line number
- `-e`: Multiple searches
- `-A`: After
- `-B`: Before
- `-C`: Centered

## Part 3: `sed`
### Overview
- `sed` is a stream editor used for modifying files and streams of text.

### Basic Commands
- Substitute `foo` with `bar`:
  ```sh
  $ echo 'foo' | sed 's/foo/bar/'
  bar
  ```
- Substitute the first occurrence of `foo` with `bar`:
  ```sh
  $ echo 'foo foo' | sed 's/foo/bar/'
  bar foo
  ```
- Substitute all occurrences of `foo` with `bar`:
  ```sh
  $ echo 'foo foo' | sed 's/foo/bar/g'
  bar bar
  ```

### Typical Uses
- Modify a file and save the changes:
  ```sh
  $ sed 's/foo/bar/g' old > new
  ```
- Modify a file in place:
  ```sh
  $ sed -i 's/foo/bar/g' file
  ```
- Apply `sed` to multiple files:
  ```sh
  $ find . -name '*.txt' | xargs sed -i 's/foo/bar/g'
  ```

### Real-Life Examples
- Revert a flag file's content from `YES` to `NO`:
  ```sh
  $ sed -i 's/YES/NO/' flagfile
  ```
- Change `Assert.assertStuff` to `assertStuff` in test files:
  ```sh
  $ find src/test/ -name '*Test.java' | xargs sed -i 's/Assert.assert/assert/'
  ```
- Convert Windows CR-LF to Unix LF:
  ```sh
  $ sed 's/.$//' winfile > unixfile
  ```
- Convert Unix LF to Windows CR-LF:
  ```sh
  $ sed 's/$/\r/' unixfile > winfile
  ```

### Capturing Groups
- Capture and modify groups:
  ```sh
  $ echo 'Dog Cat Pig' | sed 's/\b\(\w\)/(\1)/g'
  (D)og (C)at (P)ig
  ```

This guide provides a comprehensive overview of how to use `find`, `grep`, `sed`, and `awk` to increase productivity and automate tasks on the command line.