This is the benchmark script:
    function mysum_int(data)
        sum = 0
        for i in Int(1):Int(endof(data))
            @inbounds sum += data[i]
        end
        return sum
    end
    function mysum_uint(data)
        sum = 0
        for i in UInt(1):UInt(endof(data))
            @inbounds sum += data[i]
        end
        return sum
    end
    let
        size = 128 * 2^20
        data = zeros(UInt8, size)
        println("mysum_int")
        mysum_int(data)
        @time mysum_int(data)
        @time mysum_int(data)
        @time mysum_int(data)
        println("mysum_uint")
        mysum_uint(data)
        @time mysum_uint(data)
        @time mysum_uint(data)
        @time mysum_uint(data)
    end
And the result:
    ~/.j/v/BGZFStreams (master|✚1…) $ julia-dev access.jl
    mysum_int
      0.022742 seconds (152 allocations: 9.028 KB)
      0.020606 seconds (4 allocations: 160 bytes)
      0.023985 seconds (4 allocations: 160 bytes)
    mysum_uint
      0.118161 seconds (4 allocations: 160 bytes)
      0.116512 seconds (4 allocations: 160 bytes)
      0.118702 seconds (4 allocations: 160 bytes)
I don't know the internal, but I guess an index value is converted to `Int`
before accessing and inexact check imposes the cost on it. `data[Int(i)]`
results in the slowdown at the same level but `data[reinterpret(Int, i)]`
doesn't show any slowdown.
* * *
    julia> versioninfo()
    Julia Version 0.5.0-dev+4934
    Commit 1a1a9a6* (2016-06-25 02:49 UTC)
    Platform Info:
      System: Darwin (x86_64-apple-darwin14.5.0)
      CPU: Intel(R) Core(TM) i5-4288U CPU @ 2.60GHz
      WORD_SIZE: 64
      BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Haswell)
      LAPACK: libopenblas64_
      LIBM: libopenlibm
      LLVM: libLLVM-3.7.1 (ORCJIT, haswell)