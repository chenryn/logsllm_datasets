作者: [Hcamael@知道创宇404实验室](http://0x48.pw)  
发布时间：2017-08-29
本周的Pwnhub延迟到了周一，所以周一中午就看了下这题，是一道Python 的pyc逆向题，思路到挺简单的，但是很花精力
本题是一道pyc逆向题，用uncompyle6没法跑出来，所以猜测又是考python的opcode
之前做过相关研究，也写过一篇blog：
主要是两个参考文档：
  1. [opcode.h](https://github.com/Python/cpython/blob/2.7/Include/opcode.h)
  2. [opcode 具体代表的操作](https://docs.python.org/2/library/dis.html)
    >>> import dis, marshal
    >>> f = open("./final.pyc")
    >>> f.read(8)
    '\x03\xf3\r\nT\x16xY'
    >>> code = marshal.load(f)
    >>> code.co_consts
    .....(输出太多了省略)
    >>> code.co_varnames
    ('DIVIDER',)
    >>> code.co_names
    ('a', 'b', 'int', 'str', 'i', 'q', 'raw_input', 'True', 'aa', 'xrange', 'OO00000O0O0OO0OOO', 'sys', 'OO000OOO0O000O00O', 'time', 'OO0OO00O0OO0OO00O', 'False', 'r', 'marshal', 'c', 'x', 'p', 'None', 'f', 'args', 'kwargs', 'u')
我们主要关心上面这三个集合，分别是`co_consts`, `co_varnames`, `co_names`
其中：
  * co_consts集合中包含的是该模块中定义的各种数据类型，具体的值，比如定义的对象，赋值的字符串/int型数据
  * co_varnames表示的是当前作用域的局部变量的变量名
接下来就是看具体的opcode：
    >>> dis.disassemble_string(code.co_code)
    Traceback (most recent call last):
    IndexError: string index out of range
    string index out of range
但是发现报错，跑不了，我的思路是一句一句看，从opcode.h头文件中可以看出opcode为1字节，再加上操作数的话就是3字节，所以一句指令的长度是1字节或者3字节，所以：
    >>> dis.disassemble_string(code.co_code[:3])
              0 JUMP_ABSOLUTE    3292
    >>> dis.disassemble_string(code.co_code[3292:3292+3])
              0 JUMP_FORWARD       24 (to 27)
我使用上面的方面进行简单的测试，发现有一大堆的`JUMP_ABSOLUTE`和`JUMP_FORWARD`指令，这时就知道这里有混淆了。
参考文档，我们可以知道`JUMP_ABSOLUTE`是跳到绝对地址，`JUMP_FORWARD`是下一个地址加上操作数，比如`0 JUMP_FORWARD
24 (to 27)`
，当前地址0，当前指令是3字节，下一个地址是3，加上24是27，所以执行完这句指令是跳到27，这里我只是举例，在本题中，地址0是从code.co_code[0]开始
该模块的最外层很麻烦，追了一会指令流就看不住了，然后就看定义的函数：
    >>> func_list = []                                                           
    >>> for x in code.co_consts:
    ...     if type(x) == type(code.co_consts[0]):
    ...         func_list.append(x)
    >>> for x in func_list:
    ...     print x.co_name                  # 函数名
    a
    q
    a
    a
    a
    aa
    a
    a
    aa
    r
    a
    a
    a
    p
    a
    a
    a
    f
    a
    u
    >>> for x in func_list:
    ...     print x.co_consts
    (None, 2574606289, None)
    (None, 'hex', '', 2269302367, 3999397071, 3212575724, 4011125418, 2541851390, 3101964664, 4002314880, None)
    (3363589608, None)
    (None, 928441828, None)
    (None, 1, 2827689411, 3340835492, None)
    (0, 3149946851, 1915448404, None)
    (None, 1, 1761489969, None)
    (None, 3346499627, None)
    (0, 804230483, 1849535108, None)
    (None, 18, 1, 0, 811440571, 694805067, 1480591167, 2317567929, None)
    (None, '', 103332102, 3569318510, 2445961406, 2136442608, 3449813582, None)
    (None, 1254503156, None)
    (None, 1, 3745711837, None)
    (None, 13, 25, 254, 256, 184, 139, 1, 2, 3, 158, 161, 21, 10, 251, 142, 128, 115, 5, 99, 28, 130, 253, 17, 219, 88, 180, 14, 83, 119, 101, 7, 57, 178, 91, 245, 207, 0, 249, 166, 230, 85, 8, 213, 134, 240, 4, 199, 255, 202, 6, 30, 9, 173, 69, 227, 124, 15, 141, 205, 170, 11, 133, 218, 149, 12, 193, 67, 24, 16, 103, 151, 145, 4002470191, 2521589842, 1264028523, 1557840806, 2269633706, 951771769, 1948225321, 2840041954, 240350730, 2835968845, 1344465054, 1832969381, 414996033, 893304341, 1033856613, 2005820485, 1655033734, 383297387, 1110377909, 1331741225, 98787899, 3245587348, 3507579705, 2710942562, 408230478, 4193925412, 4258146773, 3555027567, 2696796853, 3228309104, 1702138493, 878416672, 1840033377, 2212037170, 1264539365, 155548767, 3125510233, 2468296542, 2105197060, 1611521139, 2978471848, 3090963965, 3551862263, 4190549182, 1060650455, 418207362, 2505390665, 148314961, 1392669086, 3687927788, 740579929, 2902468892, 3221147519, 1094609218, 2451398154, 2409455404, 3351906386, 2473439137, 3475738179, 1904786329, 3519084889, 979327822, 2909197751, 2846946149, 3980818176, 4127800602, 1291996042, 4037586272, 2675091267, 199113052, 710970151, 1897807508, 1373489195, 1776856572, 1804854838, 1781505473, 3306320587, 1760320652, 860749406, 161432034, 3258951656, 2792565458, 1916846289, 2023044049, 1935716574, 1285095588, 3035625565, 3586006421, 2368742222, 3131839710, 2298893290, 1460710676, 4009727955, 2535652387, 19895811, 2953554646, 1834358963, None)
    (None, 1, 156819970, None)
    (None, 1, 2362387540, None)
    (None, 807794131, None)
    (None, 1, , 2901513116, 1218601877, 625447945, None)
    (None, 2014553041, None)
    (1296050898, 2236454079, 1998426264, 3102970915, None)
    (2343257866, 676615509, 2173771105, 697135550, 1974986440, None)
    (None, '', 'Wrong key!', 'Good job! The flag is pwnhub{flag:your input(lower case)}', 3463300106, 3857901018, 3949890875, 174919631, 1639824250, 433978434, 3710075802, 161154336, 33478671, 2489981027, 1574135945, 3935706030, 1700692433, 832561131, None)
随便看了下各个函数的相关信息，发现u函数中有flag相关信息，然后开始逆u函数，首先收集下u函数的相关变量信息：
    >>> u = func_list[-1]
    >>> u.co_argcount
    1
    >>> u.co_varnames
    ('OOO000OOOOOO00OOO', 'OOOO000OO000OOOOO', 'DIVIDER')
    >>> u.co_names
    ('q', 'r', 'p')
    >>> u.co_consts
    (None, '', 'Wrong key!', 'Good job! The flag is pwnhub{flag:your input(lower case)}', 3463300106, 3857901018, 3949890875, 174919631, 1639824250, 433978434, 3710075802, 161154336, 33478671, 2489981027, 1574135945, 3935706030, 1700692433, 832561131, None)
写了个脚本，自动追踪指令并输出，但是跳过两个`JUMP`指令的输出，然后又发现了一个控制流平坦化混淆.......简单的举例下：
    175: 
              0 LOAD_CONST         10 (10)
    178: 
              0 STORE_FAST          2 (2)
    247: 
              0 LOAD_CONST          9 (9)
    44: 
              0 LOAD_FAST           2 (2)
    47: 
              0 COMPARE_OP          2 (==)
    50: 
              0 POP_JUMP_IF_TRUE    74
    53: 
              0 LOAD_CONST         15 (15)
    56: 
              0 LOAD_FAST           2 (2)
    59: 
              0 COMPARE_OP          2 (==)
    62: 
              0 POP_JUMP_IF_TRUE    77
    65: 
              0 LOAD_CONST          5 (5)
    68: 
              0 LOAD_FAST           2 (2)
    596: 
              0 COMPARE_OP          2 (==)
    599: 
              0 POP_JUMP_IF_TRUE   626
    602: 
              0 LOAD_CONST         11 (11)
    605: 
              0 LOAD_FAST           2 (2)
    608: 
              0 COMPARE_OP          2 (==)
    611: 
              0 POP_JUMP_IF_TRUE   629
    614: 
              0 LOAD_CONST         10 (10)
    617: 
              0 LOAD_FAST           2 (2)
    620: 
              0 COMPARE_OP          2 (==)
    88: 
              0 POP_JUMP_IF_TRUE   115
解释下各个指令的含义：
  * LOAD_CONST 10 (10) ==> push co_consts[10]
  * STORE_FAST 2 (2) ==> pop co_varnames[2]
  * LOAD_FAST 2 (2) ==> push co_varnames[2]
  * COMPARE_OP 2 (==) ==> pop x1; pop x2; if x1 == x2: push 1 else: push 0 (该指令的操作数2表示栈上的两个数进行比较)
  * POP_JUMP_IF_TRUE 74 ==> pop x1; if x1: jmp 74
翻译成伪代码就是：
    DIVIDER = co_consts[10]
    if DIVIDER == co_consts[9]:
        jmp 74
    if DIVIDER == co_consts[15]:
        jmp 77
    if DIVIDER == co_consts[5]:
        jmp 626
    if DIVIDER == co_consts[11]:
        jmp 629
    if DIVIDER == co_consts[10]:
        jmp 115
这个就是控制流平坦化混淆，中间有一堆垃圾代码，因为我怕时间来不及就没有写全自动换脚本，是半自动半手工做题，用脚本去掉JUMP混淆，把结果输出到文件中，然后用ctrl+f，去掉控制流平坦化混淆(之后会在我博客中放全自动脚本)
去掉混淆后的代码：
    283: 
              0 LOAD_GLOBAL         0 (0)     TOP1
    286: 
              0 LOAD_FAST           0 (0)     TOP
    289: 
              0 CALL_FUNCTION       1         CALL TOP1(TOP)
    q(OOO000OOOOOO00OOO)
    229: 
              0 STORE_FAST          1 (1)     
    OOOO000OO000OOOOO = q(OOO000OOOOOO00OOO)
    232: 
              0 LOAD_FAST           1 (1)
    235: 
              0 LOAD_CONST          1 (1)
    336: 
              0 COMPARE_OP          2 (==)
    222: 
              0 POP_JUMP_IF_FALSE   253
    if OOOO000OO000OOOOO != "":   JUMP 253
    657: 
              0 LOAD_CONST          2 (2)
    660: 
              0 PRINT_ITEM     
    661: 
              0 PRINT_NEWLINE  
    PRINT co_consts[2]
    276: 
              0 LOAD_CONST          0 (0)
              0 RETURN_VALUE  
    return 0 
    ###
    def u(OOO000OOOOOO00OOO):
      OOOO000OO000OOOOO = q(OOO000OOOOOO00OOO)
      if OOOO000OO000OOOOO == "":
        print 'Wrong key!'
        return 0
    ###
第一个分支我们可以翻译出上面的代码，然后把指令调到253，在继续跑脚本：
    682: 
              0 LOAD_GLOBAL         1 (1)
    685: 
              0 LOAD_FAST           1 (1)
    688: 
              0 CALL_FUNCTION       1
    691: 
              0 POP_JUMP_IF_FALSE   709
     if r(OOOO000OO000OOOOO) == False: JMP 709
    16: 
              0 LOAD_CONST          2 (2)
    19: 
              0 PRINT_ITEM     
    20: 
              0 PRINT_NEWLINE  
    PRINT co_consts[2]
    317: 
              0 LOAD_CONST          0 (0)
              0 RETURN_VALUE 
    return 0
继续跟踪到709：
    324: 
              0 LOAD_GLOBAL         2 (2)
    327: 
              0 LOAD_FAST           1 (1)
    330: 
              0 CALL_FUNCTION       1
    241: 
              0 POP_JUMP_IF_FALSE   262
    if p(OOOO000OO000OOOOO) == False: JMP 262
    701: 
              0 LOAD_CONST          2 (2)
    704: 
              0 PRINT_ITEM     
    705: 
              0 PRINT_NEWLINE  
    print co_consts[2]
    10: 
              0 LOAD_CONST          0 (0)
              0 RETURN_VALUE   
    return 0
根据到262:
    24: 
              0 LOAD_CONST          3 (3)
    27: 
              0 PRINT_ITEM     
    28: 
              0 PRINT_NEWLINE  
    311: 
              0 LOAD_CONST          0 (0)
              0 RETURN_VALUE  
    print co_consts[3]
    return 0
根据上面追踪翻译出来的代码，成功还原出u函数：
    def u(OOO000OOOOOO00OOO):
        OOOO000OO000OOOOO = q(OOO000OOOOOO00OOO)
        if OOOO000OO000OOOOO == "":
            print ERROR
            return 0
        if r(OOOO000OO000OOOOO):
            print ERROR
            return 0
        if p(OOOO000OO000OOOOO):
            print ERROR
            return 0
        print "Good job!"
        return 0