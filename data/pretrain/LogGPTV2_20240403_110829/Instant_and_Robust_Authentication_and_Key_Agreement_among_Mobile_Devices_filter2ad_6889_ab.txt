where δ is a time threshold. The ﬁrst equation means the
response interval of legitimate device should be less than
a threshold while the second equation means the response
interval of an attacker should be larger than the threshold.
Thus we have 2dl
c which means
c + td(B) 
td(B)c
2
(3)
As long as dl and da satisﬁes Eq. (3), a threshold exists to
distinguish the legitimate device from attackers. The attack
distance should be at least dl + td(B)c
. As a result, when td(B)
is small, the minimum attack distance is small. A user needs to
check the area within the minimum attack distance to ensure
there is no attacker. Thus it is important that the minimum
attack distance is small for mobile devices to exclude attackers.
2
(a)
(b)
Fig. 2: (a)ACRs on different devices in the same position;
(b)ACR on the same device in different positions.
Here R1 records the signal two times in the same position.
We can see that the ACRs for the same device in the same
position is very similar. However, the ACRs of two devices
are signiﬁcantly different.
2) Location Diversity: We use the same receiver R1 to
record the acoustic signal form S at two different positions.
Figure 2(b) shows the ACR of the signal received by R1. We
can see that the ACRs received by the same device in two
different positions are signiﬁcantly different.
3) Summary: We can see that: (1) the ACRs are highly
similar for the same device on the same position, (2) the ACRs
are different for the same device on different positions and (3)
the ACRs are signiﬁcantly different for two different devices.
More speciﬁcally, assume the acoustic signal for transmit-
ting is x and the received signal is y. The received signal can
be denoted as
y = x · h1 · h2 · h3
(1)
where h1 and h2 are the hardware frequency selectivity param-
eters of the transmitter’s speaker and receiver’s microphone,
and h3 is the wireless channel response due to multipath
and so on. The hardware frequency selectivity is also widely
investigated in [4] [23]. Therefore, any change to the speaker,
microphone or environment (e.g., multipath) would lead to
change of ACR. We can distinguish signals of a static mobile
device with ACR.
C. Feasibility of Initial Authentication
D. Challenges
To construct the ACR based authentication. The ﬁrst prob-
lem is how to obtain the initial ACR. As the two legitimate
devices are in physical proximity, round-trip time of acoustic
To achieve ACR based authentication, several challenges
should be addressed. The ﬁrst challenge is how to minimize the
processing delay td(B). As shown in Figure 3, the processing
f0f0+BFrequency    Powerf0f0+BFrequency  Powerf0f0+BFrequency00.511.52PowerR1 in position 1R1 in position 1R2 in position 1f0f0+BFrequency00.511.52PowerR1 in position 1R1 in position 1R1 in position 2• General: The system should be able to run on commer-
cial mobile devices (e.g., smartphones) without pre-built
ﬁngerprint database.
• Easy-to-use: The system should be very easy to use, e.g.,
no need to put the antennas or the mobile devices very
close to each other as in traditional approaches [19][12].
B. Design Overview
We propose an acoustic device authentication and key agree-
ment system, GeneWave, to meet the design goals. Overall,
GeneWave system consists of the following two major steps:
bidirectional initial authentication and key agreement.
1) Bidirectional Initial Authentication: In GeneWave, for
Alice and Bob who want to make key agreement, we assume
they have no prior information of each other. Thus they need to
do initial authentication to verify the validity of each other. In
this step, we use the response interval less than the threshold
δ to distinguish legitimate devices and attackers. Meanwhile,
we use ACR features from the response signal to identify a
speaker-to-microphone channel. For example, Alice transmits
acoustic signal to Bob and authenticates Bob by the response
interval. Then, Alice also derives ACR features for the acoustic
channel from the response signal that Bob reply to Alice.
Similarly, Bob also authenticates Alice and derives the ACR
features from Alice’s response signal for the acoustic channel
from Alice to Bob.
2) Key Agreement: The agreement of symmetric key is
accomplished by public key system. As shown in Figure 4,
Alice encodes her public key kp into acoustic signal and
transmits the signal
to Bob. The encoded acoustic signal
from Alice should preserve the channel ACR features. Bob
decodes Alice’s public key after veriﬁed whether it is from
Alice using ACR features. The message coding should be
efﬁcient and be able to tolerate errors in the channel. Then,
Bob generates a session key ks and encrypts it using Alice’s
public key kp. Assume the encrypted session key is Ekp (ks),
Bob encodes Ekp (ks) into acoustic signal and transmits the
signal to Alice. Alice veriﬁes the signal source is from Bob.
Then she decodes Ekp (ks) and uses her private key to obtain
ks. Then the session key ks can be used by Alice and Bob for
further communication. In this progress, the attackers have
no opportunity for spooﬁng due to the identity veriﬁcation
by ACR, and the public key system prevents attackers from
deriving the session key ks.
IV. INITIAL AUTHENTICATION WITH ACR
In this section, we present the design details of device
authentication using ACR.
A. Response Interval Measurement
We use response interval for device veriﬁcation. Due to the
diversity of hardware capability and software processing, it
is essential to accurately measure the response interval on
different mobile devices. The process of initial authentication
between two users (e.g., Alice and Bob) is shown in Figure 5.
Alice begins to send a request signal at time t1 and the signal is
Fig. 3: Audio processing latency is combined by audio input
latency, audio detecting latency and audio output latency.
delay td(B) on most mobile devices consists of the following
parts: (1) input latency on B: the uncertain time delay from
the signal arrives at B to the signal is received. (2) detecting
latency: the time used to detect the requested signal with noise.
(3) output latency on B: the uncertain time delay from the
audio is played to the time the acoustic signal is emitted.
It is difﬁcult to reduce (1), and (3) since they are usually
uncertain and impacted by many factors in the operating
system. Meanwhile, reducing (2) is also difﬁcult as we need to
effectively detect the request signal within a very short time. In
this work, we design an efﬁcient detecting method which can
detect the request signal with short delay and low computation
overhead. The details for minimizing td(B) are explained in
Section IV.
After obtaining the initial authentication information, the
second challenge is to achieve efﬁcient communicate and ACR
authentication simultaneously. Intuitively, we can encode key
on chirp signal. However, how to encode key on chirp signal
while preserving the ACR features is a challenge. Meanwhile,
a tradeoff is between the coding rate and the ACR similarity
observed. More messages coded in a chirp signal would
lead to a higher data rate. However, it would also destroy
more ACR features and affect the reliability in authentication.
Therefore, it is a challenge to ﬁnd a proper coding method to
optimize the performance. In this work, we propose a novel
coding/decoding method to address this challenge. The details
of the solution are explained in Section V.
III. GENEWAVE OVERVIEW
A. Design Goals
From the security perspective, the system has the following
goals:
• Authenticity: A device can guarantee it is making key
agreement with legitimate devices.
• Conﬁdentiality: The key should not be exposed to other
attackers.
• Consistency: The key should be identical on all devices
that are making key agreement.
From the performance perspective,
following goals:
the system has the
• Fast: The system should accomplish key agreement in a
high speed, e.g., complete authentication and key agree-
ment in a tolerable time.
DetectinglatencyResponse signalRequest signal  Fig. 4: Key agreement process.
Fig. 5: The process of Alice authenticating Bob.
emitted from Alice’s speaker at time t2. Note that t1 (cid:54)= t2 due
to the internal processing latency (output latency) on mobile
phone. The signal is received by Alice herself at time t3 and
reaches Bob at time t4 due to audio input latency. The request
signal is received by Bob at time t5. After Bob ﬁnishes the
request signal detection, he sends a response signal at time t6
to reply. Similarly, due to output latency, the response signal
leaves Bob’s speaker at time t7 and reaches Alice at time t8.
Then Alice is ready to process the response signal at time
t9. In order to make the response signal not overlap with the
request signal at Alice, the transmission of the request signal
must be ﬁnished before t8, i.e., the length of request signal
must be shorter than t8 − t2.
The response interval of Bob, i.e., t8 − t2, indicates the
distance between Alice and Bob. However, it is difﬁcult to
obtain t2 and t8 at hardware layer. Normally, Alice can
measure t1, t3 and t9 at the software layer. This contains
Alice’s input latency (t9 − t8) and output latency (t2 − t1). We
ﬁnd that the intervals (t3 − t2) and (t9 − t8) are both Alice’s
audio input latency. Although audio latency have diversity on
different devices, the audio latency on the same device are
usually stable. The intervals (t3 − t2) and (t9 − t8) should
be the same. Thus, we deﬁne the response interval of Bob as
td(B) = t9 − t3 which removes the audio input and output
latency.
B. Request Signal Detection
From Figure 3, we can see the device processing delay on
Bob consists of audio input latency, audio output latency and
signal detecting latency. The audio input and output latency is
determined by the hardware and the detecting latency is related
to the processing software. In order to make the response
interval as small as possible, we need to reduce those latencies.
To reduce the detecting latency of request signal, we design a
fast request signal detection method. First, we use the audio
strength as a ﬁlter criteria. We ignore the signal with average
strength less than a pre-conﬁgured threshold. This only incurs
a linear overhead and can be ﬁnished very quickly. Then
we apply FFT (Fast Fourier Transform) to check whether
the received signal contains the frequency components of the
request signal. If the frequency components of the request
signal are detected, Bob considers the received signal as a
request signal from Alice. In our experiment, the fast signal
detection method detects the request signal correctly in 70
audio samples (70/48000 = 1.46 ms).
C. Bidirectional and Repeated Authentication
The key agreement process needs Alice and Bob to ex-
change key while preserving the ACR feature of the bi-
direction channels (Alice’s speaker to Bob’s microphone and
Bob’s speaker to Alice’s microphone). Thus we ﬁrst need
to do device initial authentication bidirectionally. To prevent
attackers from guessing the emission time of request signal and
playing the response signal in advance, Alice conducts initial
authentication for multiple times (ﬁve in our implementation)
with random time interval. Then she analyzes all response
signal. If those ACRs are highly correlated and the response
intervals are similar, she considers that those response signal
are from the same legitimate device.
D. Request/Response Signal Design
There are two requirements for request signal design and
response signal design. First, the request signal should be
able to support quick detection. Second, the response signal
should be able to reﬂect the hardware and multipath frequency
selectivity. Thus we propose a double layer signal design,
which uses different signal for request signal and response
signal. To support fast signal detection, the request signal is a
combination of sine waves of several pre-conﬁgured frequen-
cies. Meanwhile, to facilitate device authentication using ACR
features, the response signal from Bob should be able to reveal
the hardware and multipath frequency selectivity. Compared
with a combination of sine waves of several pre-conﬁgured
frequencies, linear chirp signal has an evenly distribution on
frequency domain in a certain frequency band as shown in
Figure 1 (b). Since the chirp signal has a even frquency
distribution on the bandwidth,
the channel selectivity can
be fully revealed in received signal. Figure 1 (d) shows the
channel frequency selectivity according to the intensity of the
frequencies in bandwidth. As a result, we choose linear chirp
signal as the response signal.
V. KEY AGREEMENT
After bidirectional initial authentication, Alice and Bob can
build the ACR features of the channels. Next, they need to
perform key agreement based on symmetric key for secure
AliceBobAlice sends her publicto BobkeyBob sendsto AliceBob receives pkand verifies the source by ACRBob generates session keyskBob encryptsskwithpk()pksEkAlice receives and Verifies the source by ACR()pksEkAlice decryptsskwithher private keypk()pksEkpkAliceBobRequest signalResponse signalInput latencyDetecting latencyOutput latency3t1t4t5t6t7t8t9t2t(a) Power.
(b) Phase.
Fig. 6: Power and phase of the frequencies in FS.
communication. In this section, we show the design details
for key agreement.
A. Encoding While Preserving ACR features
The most