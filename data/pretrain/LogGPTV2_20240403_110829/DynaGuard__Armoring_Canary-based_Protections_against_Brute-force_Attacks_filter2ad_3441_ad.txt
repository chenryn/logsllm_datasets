the slowdown for the SPEC CPU2006 applications ranges
from 3.2% to 2.19x, with an average slowdown of 1.56x. For
the database servers, the overhead is 0.4%, 8.19%, 214% for
the PostreSQL, SQLite, and MySQL servers respectively,
while for the Apache and Nginx web servers the overhead is
3.2x and 2.8x, respectively. As mentioned earlier, this high
overhead is mostly due to the underlying dynamic binary
instrumentation framework.
8. RELATED WORK
Canary-based stack protections were popularized by Stack-
Guard [10]. Subsequently, ProPolice [13] introduced a series
of GCC patches for StackGuard, which, among others, re-
ordered the local variables in the stack, placing buﬀers after
(local) pointers and function arguments in the stack frame.
ProPolice was subsequently integrated in GCC, by RedHat,
as the Stack Smashing Protector (SSP) [38]. Parallel to
the evolution of SSP, Microsoft introduced the GuardStack
(/GS) [28] compiler ﬂag, which also places a canary in the
stack using heuristics similar to those of SSP. As modern
stack protectors follow a design similar to that of SSP, Dy-
naGuard’s architecture can be (easily) adopted by popular
compilers, as it incurs a negligible overhead. Moreover, other
canary-based defenses, like ValueGuard [44], which aim to
protect against data-only attacks can also beneﬁt from Dy-
naGuard’s dynamic update of canaries.
With respect to preventing canary brute-force attacks,
RAF SSP [25], similarly to DynaGuard, aims to refresh
stack-based canaries in networking servers. However, upon
a fork system call, RAF SSP only updates the canary in
the TLS area, ignoring the frames inherited by the parent
process. This design fails to guarantee program correct-
ness, in the general case, as it assumes that a child process
never reuses inherited frames legitimately, and checks for
the noreturn attribute to avoid scenarios similar to those
shown in Fig. 1.
In addition, RAF SSP does not handle
exceptions, a vital application component for avoiding the
ungraceful termination of server applications.
A series of mechanisms have been proposed to protect the
integrity of return addresses. RAD [7] is implemented as
a compiler patch and creates a safe area where a copy of
the return address is stored. Similar defenses have been im-
 0.995 1 1.005 1.01 1.015 1.02 1.025 1.03 1.035 1.04 1.045 1.05 1.055 1.06400.perlbench401.bzip2403.gcc429.mcf445.gobmk456.hmmer458.sjeng462.libquantum464.h264ref471.omnetpp473.astar483.xalancbmkApacheNginxPostgreSQLSQLiteMySQLSlowdown (normalized over native)            SPEC CPU2006 Benchmarks          I/O-bound Benchmarks 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3 3.1 3.2 3.3400.perlbench401.bzip2403.gcc429.mcf445.gobmk456.hmmer458.sjeng462.libquantum464.h264ref471.omnetpp473.astar483.xalancbmkApacheNginxPostgreSQLSQLiteMySQLSlowdown (normalized over native)             SPEC CPU2006 Benchmarks          I/O-bound BenchmarksPinDynaGuardplemented at the micro-architectural level [34], using binary
rewriting [8], or by utilizing a shadow stack [41]. Apart from
the fact that the previous mechanisms do not tackle the
same problem as DynaGuard, they have not gained trac-
tion, mainly due to compatibility and performance issues
(e.g., such mechanisms nullify several micro-architectural
optimizations, like return address prediction) [11]. On the
contrary, DynaGuard enhances a mechanism that has al-
ready seen wide adoption, without breaking accepted con-
ventions around the format of the function prologue and
epilogue, or the stack layout.
Lastly, several protections have been proposed against
memory corruption attacks, and, as such, are beyond the
scope of the current work. ASLR-based defenses random-
ize, among others, the base address of the stack [35] or
introduce variable spacing between stack frames [3, 15] to
protect against (stack) object corruption. Protection mech-
anisms like WˆX [12] and DEP [30] prevent the execution
of injected code, by ensuring that memory is never both
writable and executable, whereas defenses like SafeSEH [29]
and SEHOP [42] attempt to prevent exploits that abuse the
exception handling mechanism to execute arbitrary code.
Finally, several protection mechanisms abandon the current
stack organization completely. StackArmor [6] operates at
the binary level and relies on a combination of randomiza-
tion and isolation to make the stack objects appear as if
drawn from a fully randomized space. SafeStack [22] splits
the stack into safe and unsafe regions, and enforces code
pointer integrity to prevent control-ﬂow hijacking attacks.
However, such mechanisms also have limitations, in terms
of both performance and eﬀectiveness [11, 14].
9. CONCLUSION
In this paper, we address a limitation of the current canary-
based protection mechanisms, which allows for brute-forcing
the canary, byte-by-byte, in forking applications. We resolve
this issue by proposing the dynamic update of the canaries
in forked processes upon their creation. We present a de-
sign that utilizes a per-process, in-memory data structure
to update the stack canaries at runtime, and we prototype
the proposed architecture in DynaGuard, which comes in
two ﬂavors: a compiler-based one operating at the source
code level and a DBI-based one that operates at the binary
level. The compiler-based version of DynaGuard incurs an
average overhead of 1.2% and can be easily integrated to
modern compiler toolchains.
Availability
Our prototype implementation of DynaGuard is available
at: https://github.com/nettrino/dynaguard
Acknowledgments
We are grateful to George Kontaxis and George Argyros for
their valuable feedback on earlier versions of this paper. This
work was supported by the Oﬃce of Naval Research (ONR)
through contracts N00014-12-1-0166 and N00014-15-1-2378.
Any opinions, ﬁndings, conclusions, or recommendations ex-
pressed herein are those of the authors, and do not neces-
sarily reﬂect those of the US Government or ONR.
10. REFERENCES
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti.
Control-Flow Integrity. In Proc. of CCS, pages
340–353, 2005.
[2] A. Ayer. LibreSSL’s PRNG is Unsafe on Linux.
https://www.agwa.name/blog/post/
libressls_prng_is_unsafe_on_linux, 2014.
[3] S. Bhatkar, D. C. DuVarney, and S. R. Eﬃcient
Techniques for Comprehensive Protection from
Memory Error Exploits. In Proc. of USENIX Sec,
pages 271–286, 2005.
[4] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazieres, and
D. Boneh. Hacking Blind. In Proc. of IEEE S&P,
pages 227–242, 2014.
[5] M. Boßlet. OpenSSL PRNG Is Not (Really) Fork-safe.
https://goo.gl/sZuopi, 2013.
[6] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and
C. Giuﬀrida. StackArmor: Comprehensive Protection
from Stack-based Memory Error Vulnerabilities for
Binaries. In Proc. of NDSS, 2015.
[7] T.-c. Chiueh and F.-H. Hsu. RAD: A Compile-Time
Solution to Buﬀer Overﬂow Attacks. In Proc. of
ICDCS, pages 409–417, 2001.
[8] M. L. Corliss, E. C. Lewis, and A. Roth. Using DISE
to Protect Return Addresses from Attack. ACM
SIGARCH Computer Architecture News, 33(1):65–72,
2005.
[9] C. Cowan, S. Beattie, J. Johansen, and P. Wagle.
PointGuard: Protecting Pointers From Buﬀer
Overﬂow Vulnerabilities. In Proc. of USENIX Sec,
pages 91–104, 2003.
[10] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole,
P. Bakke, S. Beattie, A. Grier, P. Wagle, and
Q. Zhang. StackGuard: Automatic Adaptive
Detection and Prevention of Buﬀer-Overﬂow Attacks.
In Proc. of USENIX Sec, pages 63–78, 1997.
[11] T. H. Dang, P. Maniatis, and D. Wagner. The
Performance Cost of Shadow Stacks and Stack
Canaries. In Proc. of ASIACCS, pages 555–566, 2015.
[12] T. de Raadt. Advances in OpenBSD. http://www.
openbsd.org/papers/csw03/index.html, 2003.
[13] H. Etoh. GCC extension for protecting applications
from stack-smashing attacks.
http://goo.gl/Tioc4C, 2005.
[14] I. Evans, S. Fingeret, J. Gonz´alez, U. Otgonbaatar,
T. Tang, H. Shrobe, S. Sidiroglou-Douskos,
M. Rinard, and H. Okhravi. Missing the Point(er): On
the Eﬀectiveness of Code Pointer Integrity. In Proc. of
IEEE S&P, 2015.
[15] C. Giuﬀrida, A. Kuijsten, and A. S. Tanenbaum.
Enhanced Operating System Security Through
Eﬃcient and Fine-grained Address Space
Randomization. In Proc. of USENIX Sec, pages
475–490, 2012.
[16] B. Hawkes. Exploiting OpenBSD.
http://inertiawar.com/openbsd/, 2006.
[17] J. L. Henning. SPEC CPU2006 Benchmark
Descriptions. ACM SIGARCH Computer Architecture
News, 34(4):1–17, 2006.
[18] M. Howard, M. Miller, J. Lambert, and
M. Thomlinson. Windows ISV Software Security
Defenses. https://msdn.microsoft.com/en-us/
library/bb430720.aspx, 2010.
[19] Intel. Pin: Instrumentation API.
http://www.cs.virginia.edu/kim/
publicity/pin/docs/31933/Pin/html/group_
_INS__INST__API.html, 2009.
[20] Jonathan Corbet. x86 NX support.
https://lwn.net/Articles/87814/, 2003.
[32] OpenSSL. Random fork-safety. https://wiki.
openssl.org/index.php/Random_fork-safety,
2014.
[33] Oracle. MySQL Benchmark Tool. https://dev.
mysql.com/downloads/benchmarks.html, 2015.
[34] Y.-J. Park and G. Lee. Repairing Return Address
Stack for Buﬀer Overﬂow Protection. In Proc. of CF,
pages 335–342, 2004.
[21] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D.
[35] PaX Team. Address Space Layout Randomization.
Keromytis. libdft: Practical Dynamic Data Flow
Tracking for Commodity Systems. In Proc. of VEE,
pages 121–132, 2012.
[22] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea,
R. Sekar, and D. Song. Code-Pointer Integrity. In
Proc. of OSDI, pages 147–163, 2014.
[23] B. Lee, L. Lu, T. Wang, T. Kim, and W. Lee. From
Zygote to Morula: Fortifying Weakened ASLR on
Android. In Proc. of IEEE S&P, pages 424–439, 2014.
[24] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. J. Reddi, and
K. Hazelwood. Pin: Building Customized Program
Analysis Tools with Dynamic Instrumentation. In
Proc. of PLDI, pages 190–200, 2005.
[25] H. Marco-Gisbert and I. Ripoll. Preventing Brute
Force Attacks Against Stack Canary Protection on
Networking Servers. In Proc. of NCA, pages 243–250,
2013.
[26] H. Marco-Gisbert and I. Ripoll. On the Eﬀectiveness
of Full-ASLR on 64-bit Linux. In DeepSeC, 2014.
[27] Metasploit. Nginx HTTP Server 1.3.9-1.4.0 -
Chuncked Encoding Stack Buﬀer Overﬂow. http:
//www.exploit-db.com/exploits/25775/,
2013.
[28] Microsoft. /GS (Buﬀer Security Check).
https://msdn.microsoft.com/en-us/
library/8dbf701c.aspx, 2002.
[29] Microsoft. /SAFESEH (Image has Safe Exception
Handlers). https://msdn.microsoft.com/
en-us/library/9a89h429.aspx, 2003.
[30] Microsoft. A detailed description of the Data
Execution Prevention (DEP) feature.
http://support.microsoft.com/kb/875352,
2013.
[31] OpenBSD. i386 WˆX. https://marc.info/?l=
openbsd-misc&m=105056000801065, 2003.
https://pax.grsecurity.net/docs/aslr.txt,
2003.
[36] PaX Team. Non-executable pages design &
implementation. https:
//pax.grsecurity.net/docs/noexec.txt, 2003.
[37] PaX Team. new gcc plugin: latent entropy extraction.
https://grsecurity.net/pipermail/
grsecurity/2012-July/001093.html, 2012.
[38] A. ’pi3’ Zabrocki. Scraps of notes on remote stack
overﬂow exploitation.
http://phrack.org/issues/67/13.html, 2010.
[39] PTS. Phoronix Test Suite, June 2015.
http://www.phoronix-test-suite.com.
[40] H. Shacham. The Geometry of Innocent Flesh on the
Bone: Return-into-libc without Function Calls (on the
x86). In Proc. of CCS, pages 552–561, 2007.
[41] S. Sinnadurai, Q. Zhao, and W. fai Wong. Transparent
Runtime Shadow Stack: Protection against malicious
return address modiﬁcations, 2008.
http://citeseerx.ist.psu.edu/viewdoc/
summary?doi=10.1.1.120.5702.
[42] skape. Preventing the Exploitation of SEH Overwrites.
http://www.uninformed.org/?v=5&a=2&t=txt,
2006.
[43] R. M. Stallman and the GCC Developer Community.
GNU Compiler Collection Internals.
https://gcc.gnu.org/onlinedocs/gccint/,
2015.
[44] S. Van Acker, N. Nikiforakis, P. Philippaerts,
Y. Younan, and F. Piessens. ValueGuard: Protection
of native applications against data-only buﬀer
overﬂows. In Proc. of ICISS, pages 156–170. 2010.
[45] V. van der Veen, N. Dutt-Sharma, L. Cavallaro, and
H. Bos. Memory Errors: The Past, the Present, and
the Future. In Proc. of RAID, pages 86–106, 2012.