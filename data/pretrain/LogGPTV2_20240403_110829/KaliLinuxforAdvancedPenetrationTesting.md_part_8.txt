message (404 not found); however, it also identifies that the server is running
Microsoft IIS, Version 7.5.
Employing comprehensive
reconnaissance applications
Although Kali contains multiple tools to facilitate reconnaissance, many of the tools
contain features that overlap, and importing data from one tool into another is
usually a complex manual process. Most testers select a subset of tools and invoke
them with a script.
Comprehensive tools focused on reconnaissance were originally command-line tools
with a defined set of functions; one of the most commonly used was Deepmagic
Information Gathering Tool (DMitry). DMitry could perform whois lookups,
retrieve netcraft.com information, search for subdomains and e-mail addresses, and
perform TCP scans. Unfortunately, it was not extensible beyond these functions.
Recent advances have created comprehensive framework applications that combine
passive and active reconnaissance; we'll review nmap, recon-ng, and maltego.
[ 80 ]
Chapter 3
nmap
Traditionally, nmap was perceived as a simple mapping tool that provided data
on host and port availability, as well as some additional data such as the probable
operating system of target devices.
The Nmap Scripting Engine (NSE) has transformed nmap into a tool that can
conduct passive and active reconnaissance, and even perform basic vulnerability
scanning (a full list of scripts is available at http://nmap.org/nsedoc/).
Because scripts are written in the Lua scripting language, it is easy for the
penetration testing community to modify and release scripts. Presently, scripted
functions include the following:
• Reconnaissance of IPv4 and IPv6 DNS data
• Identifying the presence of web application firewalls, IDS, IPS, and other
protective controls
• Testing the firewall rulesets (via firewalk) and attempting to bypass
the firewall
• Harvesting user names from target and online sites
• Brute-force guessing of passwords against a variety of services
and applications
• Crawling the target network to identify network shares
• Extracting of EXIF metadata from images in a defined website
• Geographical localization of IP addresses
• Conducting network attacks such as IPv6 packet flooding
• Vulnerability scanning, including fuzzing and SQL injection testing
As you can see, the ability to script nmap activities using an extensible language such
as Lua has increased the importance of this tool.
A useful script is Marc Ruef's vulscan (http://www.computec.ch/mruef/
software/nmap_nse_vulscan-1.0.tar.gz), which combines the fingerprinting
feature of nmap (using the –sV flag) with lookups against major vulnerabilities, such
as MITRE, OSVDB, and SecurityFocus.
Once you have downloaded the script package, untar the file and move the script
files to usr/share/nmap/scripts.
[ 81 ]
Active Reconnaissance and Vulnerability Scanning
To invoke one of the scripts from the command line, use the --script flag, and
then identify the script name. One script that is frequently used is nmap's general
vulnerability scanner, launched using the following command:
root@kali:~# nmap -sV --script=vulscan.nse digitaldefence.ca
In this particular case, the vulnerability scan did not identify any vulnerabilities with
known exploits, as shown in the following screenshot:
A must-have script is the SpiderLabs script to screenshot web services.
It requires the wkhtmltoimage tool to be downloaded (http://
wkhtmltopdf.googlecode.com) and placed in the /usr/local/
bin folder. The screenshot script itself should then be downloaded
(https://github.com/SpiderLabs/Nmap-Tools/blob/
master/NSE/http-screenshot.nse) and placed in /usr/local/
share/nmap/scripts. When invoked, this script produces a visual
record of all the identified web services, making it easier to select a
target for testing later.
The recon-ng framework
The recon-ng framework is an open source framework for conducting
reconnaissance (passive and active).
Like the Metasploit Framework and Social Engineer Toolkit, recon-ng uses a
modular framework. Each module is a customized cmd interpreter, preconfigured
to perform a specific task.
The recon-ng framework and its modules are written in Python, allowing
penetration testers to easily build or alter modules to facilitate testing.
[ 82 ]
Chapter 3
The recon-ng tool leverages third-party APIs to conduct some assessments; this
additional flexibility means that some activities undertaken by recon-ng may be
tracked by those parties. Users can specify a custom UserAgent string or proxy
requests to minimize alerting the target network.
All data collected by recon-ng is placed in a database, allowing you to create
various reports against the stored data. The user can select one of the report
modules to automatically create either a CVS report, or an HTML report.
To use recon, perform the following steps:
1. If recon-ng is not installed on your version of Kali, use the
following command:
apt-get install recon-ng
2. To start the application, enter recon-ng at the prompt as shown in
the following screenshot. The start screen will indicate the number of
modules present, and the help command will show the commands
available for navigation.
[ 83 ]
Active Reconnaissance and Vulnerability Scanning
3. To show the available modules, type show at the recon-ng> prompt. To load
a specific module, type load followed by the name of the module. Hitting
the tab key while typing will autocomplete the command. If the module has
a unique name, you can type in the unique part of the name, and the module
will be loaded without entering the full path.
Entering info, as shown in the following screenshot, will provide you
with information on how the module works, and where to obtain API keys
if required.
[ 84 ]
Chapter 3
4. Once the module is loaded, use the set command to set the options, and then
enter run to execute, as shown in the following screenshot:
In general, testers rely on recon-ng to do the following:
• Harvest contacts using whois, jigsaw, linkedin, and twitter
(use the mangle module to extract and present e-mail data)
• Identify hosts
• Identify geographical locations of hosts and individuals using hostop,
ipinfodb, maxmind, uniapple, and wigle
• Identify host information using netcraft and related modules
• Identify account and password information that has previously been
compromised and leaked onto the Internet (the pwnedlist modules,
wascompanyhacked, xssed, and punkspider)
Maltego
Maltego (www.paterva.com) is an open source intelligence and forensics application.
The community version included with Kali sets limits on the size of searches;
however, it is an excellent tool for visualizing relationships among data that use
data mining and link analysis.
[ 85 ]
Active Reconnaissance and Vulnerability Scanning
Maltego allows you to enumerate personal information, linking a particular person
with a company, e-mail addresses, websites, social networking groups, and phone
numbers. It also facilitates passive and active reconnaissance of whois information,
domain names, DNS information, IP addresses, and netblocks.
1. To open the application, enter maltego as a command prompt. The first time
you open it, you will be required to register and verify your e-mail address
with Paterva.
2. Once you have completed registration and updating of transforms,
you will be presented with a multipaned GUI that allows you to
examine the connections between various data objects, as shown in
the following screenshot:
Maltego relies on a series of transforms or modules that are stored in a
palette on the left-hand side of the application. Transforms are selected by
picking them from the column on the left and then dragging them into the
centre of the application.
By default, the icon may be called pantera.com when initially selected;
however, you can use the data manipulation areas in the right-hand column
to rename and change data.
Several different transforms exist in the community edition; these are
sorted into several groups such as Devices, Infrastructure, Personal,
Locations, Penetration Testing, and Social Network, as shown in the
following screenshot:
[ 86 ]
Chapter 3
3. Drag the appropriate transform onto the work sheet and right-click to reveal
the transformations that will be completed against that transform's identity.
Keep in mind that if you select the All option, processing will take
a significant amount of time.
The ability to analyze relationships is particularly useful in performing social
engineering attacks. For example, if the target's website contains multiple links to
another website, an attacker could use this relationship for a phishing attack.
[ 87 ]
Active Reconnaissance and Vulnerability Scanning
Vulnerability scanning
Vulnerability scanning employs automated processes and applications to
identify vulnerabilities in a network, system, operating system, or application
that may be exploitable.
When performed correctly, a vulnerability scan delivers an inventory of devices
(both authorized and rogue devices), known vulnerabilities that have been actively
scanned for, and usually a confirmation of how compliant the devices are with
various policies and regulations.
Unfortunately, vulnerability scans are loud—they deliver multiple packets that are
easily detected by most network controls and make stealth almost impossible to
achieve. They also suffer from the following additional limitations:
• For the most part, vulnerability scanners are signature based—they can only
detect known vulnerabilities, and only if there is an existing recognition
signature that the scanner can apply to the target. To a penetration tester,
the most effective scanners are open source and allow the tester to rapidly
modify code to detect new vulnerabilities.
• Scanners produce large volumes of output, frequently containing false-
positive results that can lead a tester astray; in particular, networks with
different operating systems can produce false-positives with a rate as high as
seventy percent.
• Scanners may have a negative impact on the network—they can create
network latency or cause the failure of some devices (refer to the Network
Scanning Watch List at www.digininja.org, for devices known to fail as a
result of vulnerability testing).
• In certain jurisdictions, scanning is considered as hacking, and may constitute
an illegal act.
There are multiple commercial and open source products that perform vulnerability
scans. In Kali, scanning tools can be found in the Vulnerability Analysis
submenu, as well as the Web Vulnerability Scanners menu; however, the primary
vulnerability scanner is Open Vulnerability Assessment System (OpenVAS).
Kali supports the installation of additional scanners. If it is decided to sacrifice
stealth for completeness during testing, always employ at least two different
scanners to minimize false-positive results. Recommended scanners include
Nexpose (www.rapid7.com) and the venerable Nessus (www.nessus.org).
[ 88 ]
Chapter 3
Summary
During active reconnaissance, the attackers face a very real chance of their activities
being identified, putting them at risk. This must be balanced against the need to map
a network, find open ports, and determine the operating system and applications
that are installed.
To reduce risks, attackers must adopt stealthy scanning techniques. Manual
approaches are used to create slow scans; however, this approach is not always
effective. Therefore, attackers take advantage of tools such as the Tor network and
various proxying applications to hide their identity.
In the next chapter, we will focus on analyzing the data from the reconnaissance
stages and from other sources, and using it to plan and execute a remote exploit
against a target network or system. We will review various attack techniques and
tools and focus on how to ensure that the exploit cannot be detected by normal
means. We will also examine remote exploitation as a continuous process—once you
have compromised one target, how to leverage that success to pivot to new targets.
[ 89 ]
Exploit
The goal of passive and active reconnaissance is to identify the exploitable security
flaws that are most likely to support the tester's or attacker's objective (denial of
service, theft, or modification of data). The exploit phase of the kill chain focuses on
creating the access to achieve the objective—either stopping the access to a target by
creating a denial of service or the more common approach of establishing persistent
access to the target from the attacker.
The penetration tester must be concerned with the following aspects of the
exploit phase:
• Was the target fully characterized? If the attacker does not understand the
network and host architecture of the target, the attack will fail and there will
be an increased risk of detection.
• Is the exploit well known, with defined actions on the target system?
An uncharacterized exploit could have unintended consequences when
employed and the resulting damage could have a negative impact on the
testing process. Testers should validate all exploits in a known setting prior
to use.
• Is the exploit being conducted from a remote location or is it local on the
target system? A remote exploit is safer for the attacker because the chances
of being positively identified are lesser; however, a local exploit gives the
attacker more control over the exploit's action and reduces the possibility
of detection.
• What are the required post-exploit activities? If the attacker needs to
exfiltrate data from the target, then the exploit must support establishing
an interactive connection.
• Is persistent access to the compromised system required, or is the
compromise going to be short term? This will drive the requirement for
a stealthy approach.
Exploit
Thousands of exploitable vulnerabilities have been identified, and most are
associated with at least one proof-of-concept code or technique to allow the system to
be compromised. Nevertheless, the underlying principles that govern success are the
same across networks, operating systems, and applications.
In this chapter you will learn:
• Threat modeling
• Using online and local vulnerability resources
• Exploiting a remote target using the Metasploit Framework
• Exploiting multiple targets with Armitage
• Bypassing IDs and antivirus detection
Threat modeling
The passive and active reconnaissance phases map the target network and
system and identify vulnerabilities that may be exploitable to achieve the attacker's
objective. During this stage of the attacker's kill chain, there is a strong bias for
action—testers want to immediately launch exploits and demonstrate that they can
compromise the target. However, an unplanned attack may not be the most effective
means of achieving the object, and it may sacrifice the stealth that is needed to
achieve the objective of the attack.
Penetration testers have adopted (formally or informally) a process known as
threat modeling, which was originally developed by network planners to develop
defensive countermeasures against an attack.
Penetration testers and attackers have turned the defensive threat modeling
methodology on its head to improve the success of an attack. Offensive threat
modeling is a formal approach that combines the results of reconnaissance and
research to develop an attack strategy. An attacker has to consider the available
targets and identify the type of targets listed as follows:
• Primary targets: These targets when compromised, these targets will
immediately support the objective.
• Secondary targets: These targets may provide information (security controls,
password and logging policies, and local and domain administrator names
and passwords) to support an attack or allow access to a primary target.
• Tertiary targets: These targets may be unrelated to the testing or attack
objective, but are relatively easy to compromise and may provide
information or a distraction from the actual attack.
[ 92 ]
Chapter 4
For each target type, the tester has to determine the approach to be used. A single
vulnerability can be attacked using stealth techniques or multiple targets can be
attacked using a volume of attacks in order to rapidly exploit a target. If a large-scale
attack is implemented, the noise in the defender's control devices will frequently cause
them to minimize logging on the router and firewall or even fully disable them.
The approach to be used will guide the selection of the exploit. Generally, attackers
follow an attack tree methodology when creating a threat model, as shown in the
following diagram:
Need to acquire
proprietary
engineering
documents
Compromise
Compromise the
engineer’s email
engineer’s server
account
Exploit
Obtain access Exploit known
vulnerability in
credentials using buffer overflow to
web access
keyboard logger gain root access
interface
The attack tree approach allows the tester to easily visualize the attack options that
are available and the alternative options that can be employed if a selected attack is
not successful. Once an attack tree has been generated, the next step of the exploit
phase is to identify the exploits that may be used to compromise vulnerabilities in
the target.
Using online and local vulnerability
resources
Together, passive and active reconnaissance identifies the attack surface of the
target, that is, the total number of points that can be assessed for vulnerabilities.
A server with just an operating system installed can only be exploited if there are
vulnerabilities in that particular operating system; however, the number of potential
vulnerabilities increases with each application that is installed.
[ 93 ]
Exploit
Penetration testers and attackers must find the particular exploits that will
compromise known and suspected vulnerabilities. The first place to start the search
is at vendor sites; most hardware and application vendors release information about
vulnerabilities when they release patches and upgrades. If an exploit for a particular
weakness is known, most vendors will highlight this to their customers. Although
their intent is to allow customers to test for the presence of the vulnerability
themselves, attackers and penetration testers will take advantage of this information
as well.
Other online sites that collect, analyze, and share information about vulnerabilities
are as follows:
• The National Vulnerability Database that consolidates all public
vulnerability data released by the US Government available at