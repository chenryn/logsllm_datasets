Rivain [30]. The noisy leakage model is much more complex and makes security proofs
on masked algorithms signiﬁcantly more involved, and much harder to verify.
Duc, Dziembowski and Faust [17] show that proving probing security allows one to
estimate the practical (noisy leakage) security of a masked algorithm. While Duc, Faust
and Standaert [18] empirically show that some of the factors of Duc et al.’s bound [17]
are likely proof artefacts, the remainder of the bound, and in particular a factor that
includes the size of the circuit, seems to be tight. Intuitively, Duc et al. [18] essentially
show that the probing security order gives an indication of the smallest order moment of
the distribution over leakage traces that contains information about the secret, whereas
the size of the circuit the adversary can probe is an indicator of how easy it is to evaluate
higher-order moments.
Composition, and Region and Stateful Probing This observation makes clear the impor-
tance of also considering more powerful probing adversaries that may place t probes
in each of some (pre-determined) regions of an algorithm (the t-region probing model).
For example, each core gadget (ﬁeld operations and mask refreshing operation) could
be marked off as a separate region (as in [17]). More recently, and in work contempo-
rary with that presented here, Andrychowicz, Dziembowski and Faust [1] consider a
more general notion of region whose size must be linear in the security parameter (and
masking order), and exhibit a mask refreshing gadget that is linear in size and fulﬁlls, in
the probing model, the reconstructibility and re-randomization properties from Faust et
al. [21]. We now discuss the implications of reconstructibility and re-randomization, and
their relation to our notion of SNI, based on the similarity of Prop. 4 with Ishai et al.’s
remark on “Re-randomized outputs” [24], before discussing the applicability of SNI to
security in the region and stateful probing models [24].
Intuitively, a gadget is t-reconstructible whenever any t of its positions can be
simulated using only its (shared) inputs and outputs, and a gadget is re-randomizing
whenever its output encoding is uniform and t-wise independent even if its input encoding
is completely known. Our SNI notions combines both considerations. Formulating it
in similar terms, a gadget is t-SNI whenever any t of its positions can be simulated
using only its (shared) inputs, and if its output encoding is uniform and (t − d)-wise
independent even if d shares of each of its inputs are known (for all d such that 0 ≤ d < t).
Expressed in this way, it is clear that SNI is slightly weaker than “reconstructible and
re-randomizable” in the probing model. This allows us to automatically verify that a
gadget is SNI for some ﬁxed t, whereas reconstructibility and re-randomization are more
complex. In addition, the ability to combine the use of SNI and weaker (NI or afﬁne)
gadgets in a ﬁne-grained way allows us to more precisely verify the security of large
algorithms in models where the adversary can place t probes in the entire algorithm.
We leave a formal investigation of the relation between SNI and “reconstructibility and
re-randomization” as future work.
Based on reconstructibility and re-randomization, Faust et al. [21,1] prove elegant
and powerful composition results that in fact apply in the more powerful region probing
and stateful probing models [24], where the adversary may (adaptively) place t probes
in each region (or in each subsequent iteration) of the algorithm. It is worth noting
that our SNI notion also enables composition in these two models: indeed, it is easy to
see that any two 2t-SNI algorithms (our regions) can be composed securely when the
adversary can place t probes in each of them. Further, our composition techniques also
support elegant constructions that support compositional security proofs in the region
and stateful probing models without doubling the number of shares computations are
carried out on (instead, simply doubling the number of shares at region boundaries). We
give details of these robust composition results in Appendix D. Depending on the size
of regions that are considered, these robust composition results may bring signiﬁcant
performance gains in terms of randomness and time complexity.
Finally, our notion of SNI and the automated veriﬁcation techniques presented allow
the efﬁcient, precise and automated veriﬁcation of t-SNI inside each region, an issue
which is not addressed by the works of Faust et al. [21,1].
Existing Masking Transformations Ishai, Sahai and Wagner [24] and others [17,1] also
propose simple masking transformations that turn unprotected algorithms (or boolean or
arithmetic circuits) into protected masked algorithms. Ishai, Sahai and Wagner [24] forgo
the use of mask refreshing gadgets by doubling the number of shares on which masked
computations occur–with a quadratic impact on performance and randomness complexity.
Faust et al. [17,1] rely on making sure that all gadgets used in the masked algorithm
are reconstructible and re-randomizing. This guarantees security in a stronger probing
model, but incurs an even greater loss of performance. By contrast, our transformation
attempts to decide whether a mask refreshing operation is required to ensure security in
the probing model, and our core contributions (the notion of SNI and the type-checker)
do support composition in stronger probing models, whilst still allowing the proofs of
security within regions to be handled precisely.
Coron [12] proposes schemes for masking lookups at secret or sensitive indices
in public tables. We have not investigated whether or not the proposed algorithms are
SNI or simply NI, and whether or not establishing these properties can be done by
adapting our type-system or if it should be done in a different way (either as a direct
proof or using the checker from Section 7). We note in passing that part of the result by
Coron [12], namely that using RefreshIter2t+1
between each query to the masked S-box
supports security in the stateful probing model is subsumed and improved by the robust
composition results described in the full version.
2t
The security analysis of masking schemes in the t-probing model is connected to
techniques from multi-party computation, exploited in parallel lines of research by
threshold implementations [28,9]. In particular, higher-order threshold implementations
are exposed to similar security issues due to composition, although they offer additional
protection against practical considerations not captured in standard probing models,
namely glitches. We believe that the results discussed here are in fact applicable to
the compositional security analysis of threshold implementations but leave a formal
investigation of these links as future work.
Reﬁning SNI We now discuss some limitations of our current implementation, and leads
for future theoretical work that may yield signiﬁcant practical improvements.
Alg. 6 Semi Public Modular Addition in GF(2)k
function AddPub(x, y)
w := x (cid:12) y
a := x ⊕ y
u := w (cid:28) 1
for i = 2 to k − 1 do
a(cid:48) := RefreshM(a)
ua := u (cid:12) a(cid:48)
u := ua ⊕ w
u := u (cid:28) 1
z := a ⊕ u
return z
(6a) Masked algorithm produced by our tool
function AddPub(x, y)
w := x (cid:12) y
a := x ⊕ y
w := RefreshM(w)
u := w (cid:28) 1
for i = 2 to k − 1 do
ua := u (cid:12) a
u := ua ⊕ w
u := u (cid:28) 1
z := a ⊕ u
return z
(6b) Masked algorithm produced by hand
The ﬁrst point we wish to discuss is the case of Keccak, for which algorithm trans-
formation is prohibitively expensive. This issue is due to our handling of static for loops:
indeed, our tool unrolls them to perform type-checking and rolls them back up afterwards
if possible (otherwise leaving them unrolled in the ﬁnal algorithm). For smaller algo-
rithms, this is not a problem, but unrolling all 24 rounds of Keccak-f, along with all the
loops internal to each iteration, yields a very large program that is then backtracked over
each time a mask refreshing operation is inserted. Reﬁning our non-interference notions
to multi-output gadgets and algorithms would allow us to signiﬁcantly improve our tool’s
handling of loops and high-level composition, whilst gaining a better understanding of
probing security in such scenarios. This improved understanding may in turn help inform
the design of primitives that are easier to protect against higher-order probing.
Second, we discuss our greedy policy for the insertion of mask refreshing algorithms.
In our experiments, we consider a version of the linear-time modular addition algo-
rithm [14] whose second argument is a public (non-shared) value (for example, a round
counter, as in Speck). We show its code, as produced by our masking transformer, in
Gadget 6a, and display a hand-masked variant in Gadget 6b, slightly abusing notations
by denoting simple gadgets with the symbol typically used for their unprotected versions.
Notice that the variable w is used once per loop iteration, and that our tool refreshes
each of them, while it is sufﬁcient to mask only the ﬁrst one. Improving our gadget
selection algorithm to detect and implement this optimization—and others—would be
an interesting avenue for future work, that could help improve our understanding of the
effect on security of compiler optimizations.
Acknowledgements The work presented here was supported by projects S2013/ICE-
2731 N-GREENS Software-CM, ANR-10-SEGI-015 PRINCE and ANR-14-CE28-0015
BRUTUS, and ONR Grants N000141210914 and N000141512750, as well as FP7 Marie
Curie Actions-COFUND 291803.
References
1. Marcin Andrychowicz, Stefan Dziembowski, and Sebastian Faust. Circuit compilers with
O(1/ log(n)) leakage rate. In EUROCRYPT 2016, LNCS, pages 586–615. Springer, Heidel-
berg, 2016.
2. Josep Balasch, Benedikt Gierlichs, Vincent Grosso, Oscar Reparaz, and Franc¸ois-Xavier Stan-
daert. On the cost of lazy engineering for masked software implementations. In Proceedings
of the Smart Card Research and Advanced Application Conference (CARDIS), volume 8968
of LNCS, pages 64–81. Springer, Heidelberg, November 2014.
3. Kshitij Bansal, Andrew Reynolds, Clark Barrett, and Cesare Tinelli. A new decision procedure
for ﬁnite sets and cardinality constraints in SMT. In Proceedings of the 8th International
Joint Conference on Automated Reasoning (IJCAR), volume 9706 of LNCS, pages 82–98,
June 2016.
4. Gilles Barthe, Sonia Bela¨ıd, Franc¸ois Dupressoir, Pierre-Alain Fouque, Benjamin Gr´egoire,
and Pierre-Yves Strub. Veriﬁed proofs of higher-order masking. In Elisabeth Oswald and
Marc Fischlin, editors, EUROCRYPT 2015, Part I, volume 9056 of LNCS, pages 457–485.
Springer, Heidelberg, April 2015.
5. Gilles Barthe, Franc¸ois Dupressoir, Benjamin Gr´egoire, C´esar Kunz, Benedikt Schmidt, and
Pierre-Yves Strub. EasyCrypt: A tutorial. In Foundations of Security Analysis and Design VII
- FOSAD 2012/2013 Tutorial Lectures, pages 146–166, 2013.
6. Alberto Battistello, Jean-S´ebastien Coron, Emmanuel Prouff, and Rina Zeitoun. Horizontal
side-channel attacks and countermeasures on the ISW masking scheme. In CHES 2016,
LNCS, pages 23–29. Springer, Heidelberg, 2016.
7. Ali Galip Bayrak, Francesco Regazzoni, David Novo, and Paolo Ienne. Sleuth: Automated
veriﬁcation of software power analysis countermeasures. In Guido Bertoni and Jean-S´ebastien
Coron, editors, CHES 2013, volume 8086 of LNCS, pages 293–310. Springer, Heidelberg,
August 2013.
8. Sonia Bela¨ıd, Fabrice Benhamouda, Alain Passel`egue, Emmanuel Prouff, Adrian Thillard,
and Damien Vergnaud. Randomness complexity of private circuits for multiplication. In
EUROCRYPT 2016, LNCS, pages 616–648. Springer, Heidelberg, 2016.
9. Beg¨ul Bilgin, Benedikt Gierlichs, Svetla Nikova, Ventzislav Nikov, and Vincent Rijmen.
Higher-order threshold implementations. In Palash Sarkar and Tetsu Iwata, editors, ASI-
ACRYPT 2014, Part II, volume 8874 of LNCS, pages 326–343. Springer, Heidelberg, Decem-
ber 2014.
10. Claude Carlet, Emmanuel Prouff, Matthieu Rivain, and Thomas Roche. Algebraic decom-
position for probing security.
In Rosario Gennaro and Matthew J. B. Robshaw, editors,
CRYPTO 2015, Part I, volume 9215 of LNCS, pages 742–763. Springer, Heidelberg, August
2015.
11. Suresh Chari, Charanjit S. Jutla, Josyula R. Rao, and Pankaj Rohatgi. Towards sound
approaches to counteract power-analysis attacks. In Michael J. Wiener, editor, CRYPTO’99,
volume 1666 of LNCS, pages 398–412. Springer, Heidelberg, August 1999.
12. Jean-S´ebastien Coron. Higher order masking of look-up tables.
In Phong Q. Nguyen
and Elisabeth Oswald, editors, EUROCRYPT 2014, volume 8441 of LNCS, pages 441–458.
Springer, Heidelberg, May 2014.
13. Jean-S´ebastien Coron, Johann Großsch¨adl, Mehdi Tibouchi, and Praveen Kumar Vadnala.
Conversion from arithmetic to boolean masking with logarithmic complexity. In Gregor
Leander, editor, FSE 2015, volume 9054 of LNCS, pages 130–149. Springer, Heidelberg,
March 2015.
14. Jean-S´ebastien Coron, Johann Großsch¨adl, and Praveen Kumar Vadnala. Secure conversion
between boolean and arithmetic masking of any order. In Lejla Batina and Matthew Robshaw,
editors, CHES 2014, volume 8731 of LNCS, pages 188–205. Springer, Heidelberg, September
2014.
15. Jean-S´ebastien Coron, Emmanuel Prouff, Matthieu Rivain, and Thomas Roche. Higher-order
side channel security and mask refreshing. In Shiho Moriai, editor, FSE 2013, volume 8424
of LNCS, pages 410–424. Springer, Heidelberg, March 2014.
16. Jean-S´ebastien Coron, Aur´elien Greuet, Emmanuel Prouff, and Rina Zeitoun. Faster evaluation
of sboxes via common shares. In CHES 2016, LNCS, pages 498–514. Springer, Heidelberg,
2016.
17. Alexandre Duc, Stefan Dziembowski, and Sebastian Faust. Unifying leakage models: From
probing attacks to noisy leakage.
In Phong Q. Nguyen and Elisabeth Oswald, editors,
EUROCRYPT 2014, volume 8441 of LNCS, pages 423–440. Springer, Heidelberg, May 2014.
18. Alexandre Duc, Sebastian Faust, and Franc¸ois-Xavier Standaert. Making masking security
proofs concrete - or how to evaluate the security of any leaking device. In Elisabeth Oswald
and Marc Fischlin, editors, EUROCRYPT 2015, Part I, volume 9056 of LNCS, pages 401–429.
Springer, Heidelberg, April 2015.
19. Hassan Eldib and Chao Wang. Synthesis of masking countermeasures against side channel
attacks. In Proceedings of the 26th International Conference on Computer Aided Veriﬁcation.,
pages 114–130, 2014.
20. Hassan Eldib, Chao Wang, and Patrick Schaumont. SMT-based veriﬁcation of software
In Proceedings of the 20th International
countermeasures against side-channel attacks.
Conference on Tools and Algorithms for the Construction and Analysis of Systems, pages
62–77, 2014.
21. Sebastian Faust, Tal Rabin, Leonid Reyzin, Eran Tromer, and Vinod Vaikuntanathan. Protect-
ing circuits from leakage: the computationally-bounded and noisy cases. In Henri Gilbert,
editor, EUROCRYPT 2010, volume 6110 of LNCS, pages 135–156. Springer, Heidelberg,
May 2010.
22. Louis Goubin and Jacques Patarin. DES and differential power analysis (the “duplication”
method). In C¸ etin Kaya Koc¸ and Christof Paar, editors, CHES’99, volume 1717 of LNCS,
pages 158–172. Springer, Heidelberg, August 1999.
23. Dahmun Goudarzi and Matthieu Rivain. How fast can higher-order masking be in software?
Cryptology ePrint Archive, Report 2016/264, 2016. http://eprint.iacr.org/.
24. Yuval Ishai, Amit Sahai, and David Wagner. Private circuits: Securing hardware against
probing attacks. In Dan Boneh, editor, CRYPTO 2003, volume 2729 of LNCS, pages 463–481.
Springer, Heidelberg, August 2003.
25. Paul C. Kocher, Joshua Jaffe, and Benjamin Jun. Differential power analysis. In Michael J.
Wiener, editor, CRYPTO’99, volume 1666 of LNCS, pages 388–397. Springer, Heidelberg,
August 1999.
26. Thomas Walker Lynch. Binary adders, 1996.
27. Andrew Moss, Elisabeth Oswald, Dan Page, and Michael Tunstall. Compiler assisted masking.
In Emmanuel Prouff and Patrick Schaumont, editors, CHES 2012, volume 7428 of LNCS,
pages 58–75. Springer, Heidelberg, September 2012.
28. Svetla Nikova, Vincent Rijmen, and Martin Schl¨affer. Secure hardware implementation of