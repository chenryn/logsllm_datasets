---
author: Margaret Lewis
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7556
date: '2021-01-22 12:22:12'
editorchoice: true
excerpt: 处理运行时性能的问题上，即使是最有才华的开发人员也会受编译器的支配 —— 因为如果没有可靠的编译器工具链，就无法构建任何重要的东西。
fromurl: https://www.linux.com/blog/2018/10/gcc-optimizing-linux-internet-and-everything
id: 13040
islctt: true
largepic: /data/attachment/album/202101/22/122155ujfd62u6zbx3i4b3.jpg
permalink: /article-13040-1.html
pic: /data/attachment/album/202101/22/122155ujfd62u6zbx3i4b3.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 处理运行时性能的问题上，即使是最有才华的开发人员也会受编译器的支配 —— 因为如果没有可靠的编译器工具链，就无法构建任何重要的东西。
tags:
- gcc
- 编译器
- GNU
thumb: false
title: GCC：优化 Linux、互联网和一切
titlepic: true
translator: Chao-zhi
updated: '2021-01-22 12:22:12'
---
![](/data/attachment/album/202101/22/122155ujfd62u6zbx3i4b3.jpg)
软件如果不能被电脑运行，那么它就是无用的。而在处理 运行时   run-time 性能的问题上，即使是最有才华的开发人员也会受编译器的支配 —— 因为如果没有可靠的编译器工具链，就无法构建任何重要的东西。 GNU 编译器集合   GNU Compiler Collection （GCC）提供了一个健壮、成熟和高性能的工具，以帮助你充分发挥你代码的潜能。经过数十年成千上万人的开发，GCC 成为了世界上最受尊敬的编译器之一。如果你在构建应用程序是没有使用 GCC，那么你可能错过了最佳解决方案。
根据 [LLVM.org](http://LLVM.org) 的说法，GCC 是“如今事实上的标准开源编译器”    [1] ，也是用来构建完整系统的基础 —— 从内核开始。GCC 支持超过 60 种硬件平台，包括 ARM、Intel、AMD、IBM POWER、SPARC、HP PA-RISC 和 IBM Z，以及各种操作环境，包括 GNU、Linux、Windows、macOS、FreeBSD、NetBSD、OpenBSD、DragonFly BSD、Solaris、AIX、HP-UX 和 RTEMS。它提供了高度兼容的 C/C++ 编译器，并支持流行的 C 库，如 GNU C Library（glibc）、Newlib、musl 和各种 BSD 操作系统中包含的 C 库，以及 Fortran、Ada 和 GO 语言的前端。GCC 还可以作为一个交叉编译器，可以为运行编译器的平台以外的其他平台创建可执行代码。GCC 是紧密集成的 GNU 工具链的核心组件，由 GNU 项目产生，它包括 glibc、Binutils 和 GNU 调试器（GDB）。
“一直以来我最喜欢的 GNU 工具是 GCC，即  GNU 编译器集合   GNU Compiler Collection 。在开发工具非常昂贵的时候，GCC 是第二个 GNU 工具，也是使社区能够编写和构建所有其他工具的工具。这个工具一手改变了这个行业，导致了自由软件运动的诞生，因为一个好的、自由的编译器是一个社区软件的先决条件。”—— Red Hat 开源和标准团队的 Dave Neary。   [2] 
### 优化 Linux
作为 Linux 内核源代码的默认编译器，GCC 提供了可靠、稳定的性能以及正确构建内核所需的额外扩展。GCC 是流行的 Linux 发行版的标准组件，如 ArchLinux、CentOS、Debian、Fedora、openSUSE 和 Ubuntu 这些发行版中，GCC 通常用来编译支持系统的组件。这包括 Linux 使用的默认库（如 libc、libm、libintl、libssh、libssl、libcrypto、libexpat、libpthread 和 ncurses），这些库依赖于 GCC 来提供可靠性和高性能，并且使应用程序和系统程序可以访问 Linux 内核功能。发行版中包含的许多应用程序包也是用 GCC 构建的，例如 Python、Perl、Ruby、nginx、Apache HTTP 服务器、OpenStack、Docker 和 OpenShift。各个 Linux 发行版使用 GCC 构建的大量代码组成了内核、库和应用程序软件。对于 openSUSE 发行版，几乎 100% 的原生代码都是由 GCC 构建的，包括 6135 个源程序包、5705 个共享库和 38927 个可执行文件。这相当于每周编译 24540 个源代码包。   [3] 
Linux 发行版中包含的 GCC 的基本版本用于创建定义系统 应用程序二进制接口   Application Binary Interface （ABI）的内核和库。 用户空间   User space 开发者可以选择下载 GCC 的最新稳定版本，以获得高级功能、性能优化和可用性改进。Linux 发行版提供安装说明或预构建的工具链，用于部署最新版本的 GCC 以及其他 GNU 工具，这些工具有助于提高开发人员的工作效率和缩短部署时间。
### 优化互联网
GCC 是嵌入式系统中被广泛采用的核心编译器之一，支持为日益增长的物联网设备开发软件。GCC 提供了许多扩展功能，使其非常适合嵌入式系统软件开发，包括使用编译器的内建函数、#语法、内联汇编和以应用程序为中心的命令行选项进行精细控制。GCC 支持广泛的嵌入式体系结构，包括 ARM、AMCC、AVR、Blackfin、MIPS、RISC-V、Renesas Electronics V850、NXP 和 Freescale Power 处理器，可以生成高效、高质量的代码。GCC提供的交叉编译能力对这个社区至关重要，而预制的交叉编译工具链    [4]  是一个主要需求。例如，GNU ARM 嵌入式工具链是经过集成和验证的软件包，其中包含 ARM 嵌入式 GCC 编译器、库和其它裸机软件开发所需的工具。这些工具链可用于在 Windows、Linux 和 macOS 主机操作系统上对流行的 ARM Cortex-R 和 Cortex-M 处理器进行交叉编译，这些处理器已装载于数百亿台支持互联网的设备中。   [5] 
GCC 为云计算赋能，为需要直接管理计算资源的软件提供了可靠的开发平台，如数据库和 Web 服务引擎以及备份和安全软件。GCC 完全兼容 C++ 11 和 C++ 14，为 C++ 17 和 C++ 2a 提供实验支持    [6] （LCTT 译注：本文原文发布于 2018 年），可以创建性能优异的对象代码，并提供可靠的调试信息。使用 GCC 的应用程序的一些例子包括：MySQL 数据库管理系统，它需要 Linux 的 GCC    [7] ；Apache HTTP 服务器，它建议使用 GCC    [8] ；Bacula，一个企业级网络备份工具，它需要 GCC。   [9] 
### 优化一切
对于 高性能计算   High Performance Computing （HPC）中使用的科学代码的研究和开发，GCC 提供了成熟的 C、C++ 和 Fortran 前端，以及对 OpenMP 和 OpenACC API的支持，用于基于指令的并行编程。因为 GCC 提供了跨计算环境的可移植性，它使得代码能够更容易地在各种新的和传统的客户机和服务器平台上进行测试。GCC 为 C、C++ 和 Fortran 编译器提供了 OpenMP 4.0 的完整支持，为 C 和 C++ 编译器提供了 OpenMP 4.5 完整支持。对于 OpenACC、 GCC 支持大部分 2.5 规范和性能优化，并且是唯一提供 [OpenACC](https://www.openacc.org/tools) 支持的非商业、非学术编译器。
代码性能是这个社区的一个重要参数，GCC 提供了一个坚实的性能基础。Colfax Research 于 2017 年 11 月发表的一篇论文评估了 C++ 编译器在使用 OpenMP 4.x 指令并行化编译代码的速度和编译后代码的运行速度。图 1 描绘了不同编译器编译并使用单个线程运行时计算内核的相对性能。性能值经过了归一化处理，以 G++ 的性能为 1.0。
![performance](/data/attachment/album/202101/22/122214zthwmtvvv1zznmiv.jpg "performance")