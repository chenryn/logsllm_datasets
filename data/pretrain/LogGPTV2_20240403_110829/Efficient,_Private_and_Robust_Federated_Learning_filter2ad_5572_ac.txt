In our SecureFL, there are two types of adversaries: malicious par-
ties that aim to actively corrupt the global model by sending poi-
soning gradients, and honest-but-curious servers (i.e., SP and CS)
that follow the privately robust aggregation protocol but try to
passively infer information about target party’s training data Di.
Typically, malicious parties have the following knowledge: the local
training data and local gradients of the corrupted parties, the train-
ing algorithm, the loss function, and the local learning rate. The
latter honest-but-curious servers have access to all parties’ local
gradients, the aggregation algorithm and the seed dataset Ds. This
setting is reasonable and also consistent with real-world FL systems
[38]. Namely, for maintaining a good reputation to provide more
FL services, the servers (e.g., Google and Amazon) are unwilling
to be caught acting maliciously, but parties may have various bad
motives such as for competitive purposes to maliciously corrupt
the ongoing FL systems.
Remark 1. We consider two non-colluding servers. This set-
ting is actually weaker than the single-server setting, but has been
widely formalized and instantiated in previous works, especially in
the machine learning field such as Prio (USENIX NSDI’17) [13], Se-
cureML (IEEE S&P’17) [36] and Quotient (ACM CCS’19) [1]. There
are two key advantages in this setting: 1) Parties can significantly
reduce local overheads by outsourcing the privately robust aggre-
gation procedure to the two servers. This is in line with the design
goal of SecureFL, which is not to incur extra computation and com-
munication costs for parties. 2) We can benefit from a combination
of efficient secure 2PC techniques [14] for boolean circuits such
as the evaluation of compare [40] and arithmetic circuits such as
multiplication procedures [6]. As shown in subsequent sections,
our privately robust aggregation protocol, involving matrix multi-
plication and complex non-linear function, is efficiently evaluated
using the customized secure 2PC protocols we designed. Moreover,
Local ModelLocal DatasetMaliciousParties(cid:54)(cid:87)(cid:72)(cid:83)(cid:3)(cid:4319)(cid:17)(cid:3)Train local models and send encrypted local (cid:88)(cid:83)(cid:71)(cid:68)(cid:87)(cid:72)(cid:86)(cid:17)(cid:54)(cid:87)(cid:72)(cid:83)(cid:3)(cid:4320)(cid:17)(cid:3)Filter out poisoned updates in cipher text and update (cid:87)(cid:75)(cid:72)(cid:3)(cid:74)(cid:79)(cid:82)(cid:69)(cid:68)(cid:79)(cid:3)(cid:80)(cid:82)(cid:71)(cid:72)(cid:79)(cid:17)(cid:54)(cid:87)(cid:72)(cid:83)(cid:3)(cid:4318)(cid:17)(cid:3)(cid:37)(cid:85)(cid:82)(cid:68)(cid:71)(cid:70)(cid:68)(cid:86)(cid:87)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:74)(cid:79)(cid:82)(cid:69)(cid:68)(cid:79)(cid:3)(cid:80)(cid:82)(cid:71)(cid:72)(cid:79)(cid:17)Honest PartiesGlobal ModelLocal ModelLocal DatasetLocal ModelLocal DatasetLocal ModelLocal DatasetComputing ServerService ProvidermputingS48Efficient, Private and Robust Federated Learning
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
and a linear function func, Eval outputs a new ciphertext c en-
crypting func(m1, m2). Our SecureFL builds on the Brakerski-Fan-
Vercauteren (BFV) scheme [17], which is one of the state-of-the-art
PLHE solutions.
Secret Sharing. There are two common secret sharing schemes:
3.4.2
additive secret sharing and boolean secret sharing. To additively share
x in a ring Zp, the first party samples r ∈ Zp uniformly at random,
and sends x−r ∈ Zp to the second party. In this paper, we denote an
additive secret sharing of x as a pair of (⟨x⟩0, ⟨x⟩1) = (r , x −r) ∈ Z2
p.
In boolean sharing, we denote the boolean-share of x ∈ Z2 as ⟨x⟩B
0
and ⟨x⟩B
1 . Arithmetic oper-
ations can still be executed in the form of sharing using Beaver’s
multiplicative triples (show details in Appendix C).
1 , and the shares satisfy x = ⟨x⟩B
0 ⊕ ⟨x⟩B
3.4.3 Oblivious Transfer. In the 1-out-of-2 oblivious transfer (OT)
protocol, one party called sender holds two messages x0, x1, and
the other party called receiver has a choice bit b. After the OT
protocol, the receiver learns xb without obtaining anything about
x1−b, while the sender learns nothing about b. Moreover, a widely
used technique is OT extension [26], which implements a large
number of OTs using only symmetric cryptographic primitives via
a few base OTs. Besides, on top of the OT extension, one important
variant is correlated OT (COT) [3]. Particularly, the sender inputs a
correlation function f (), and obtains a x0 randomly chosen by the
protocol itself and a correlated x1 = f (x0). By doing so, the com-
munication bandwidth from the sender to the receiver is reduced
by half.
3.4.4 Pseudorandom Generator. A Pseudorandom Generator (PRG)
[48] takes as input a uniformly random seed and generates a long
pseudorandom string. The security of PRG ensures that the output
of the generator is indistinguishable from the uniform distribu-
tion in polynomial-time, as long as the seed is hidden from the
distinguisher. PRG is instantiated in our SecureFL to cut the com-
munication to half between each party and the servers.
4 CRYPTO-FRIENDLY BYZANTINE-ROBUST
FL PROTOCOL
In this section, we first revise the state-of-the-art byzantine-robust
FL framework, FLTrust [11], and then we propose an improved
crypto-friendly variant.
4.1 Revising FLTrust
The main idea of FLTrust [11] is that SP collects a small but clean
seed dataset, and computes a server update дs on it as the base-
line to detect and exclude byzantine parties. Specifically, they first
normalizes each local gradient by scaling it to have the same mag-
nitude. Then, SP assigns a trust score to each local gradient, where
the trust score is larger if the direction of the local model update
is more similar to that of the server update. Formally, it is realized
through cosine similarity measurement along with ReLU-based
clipping. The training process of FLTrust is consistent with most FL
protocols except for the robust aggregation procedure, consisting
of the following steps:
˜дi =
дi(cid:13)(cid:13)дi(cid:13)(cid:13)
• Normalizing gradients’ magnitude. FLTrust first normal-
izes each local gradient as follows:
(1)
where ∥·∥ denotes the ℓ2 norm. The role of normalization is
to alleviate such manipulation that attackers may scale the
magnitude of local gradients by a large factor.
• Measuring gradients’ direction similarity. FLTrust then
assigns a trust score T Si to each local gradient дi, by com-
puting its consine similarity cosi with the server gradient дs
and clipping the consine similarity via ReLU3. Formally, the
trust score is defined as follows:
T Si = ReLU(cosi) = ReLU(⟨˜дi , ˜дs⟩)
(2)
where ˜дi and ˜дs are the normalized local and server gradi-
ents, respectively. The role of the ReLU function is to exclude
the local gradient that have a negative impact (i.e., negative
cosine similarity) on the global model update.
• Aggregating weighted gradients. FLTrust finally aggre-
gates the normalized local gradients weighted by their trust
scores, and scales the aggregation result as follows:
ддlobal =(cid:13)(cid:13)дs(cid:13)(cid:13)T S
ni =1
where T S =n
result is same as дs.
T Si · ˜дi ,
(3)
i =1 T Si, and the magnitude of the aggregation
On the basis of FLTrust, it is trivial to design a privacy-preserving
protocol by utilizing state-of-the-art mixed-protocol 2PC frame-
works such as ABY[14]. Specifically, linear operations (such as
matrix multiplication) are computed in the additive sharing, while
the computation of reciprocal square root and ReLU can be realized
in the boolean sharing. Despite having realized a privately robust
aggregation protocol, it still suffers from two key efficiency issues:
1) As described in previous works [35] [40], the normalization in
FLTrust is a costly operation in 2PC, since the involved reciprocal
square root operations are computationally expensive. 2) The direc-
tional similarity measurement for all parties can be formalized as a
matrix-vector multiplication, which is time-consuming due to the
high dimension of model gradients and the large number of parties.
In Section 6, we compare against such baseline scheme.
4.2 Crypto-friendly byzantine-robust FL
protocol
In the following, we first design a crypto-friendly alternative pro-
tocol called validity checking that functionally replaces the normal-
ization of FLTrust. Then, we propose a new two-phase computing
paradigm, which effectively tackles the efficiency issue of the di-
rectional similarity measurement.
Crypto-friendly protocol for normalization. Intuitively, we
can leave the implementation of normalization on the party side in
plaintext, since such processing of each local gradient is indepen-
dent of other gradients. However, under our adversary setting, a
key challenge is malicious parties may deviate from the protocol
by providing local gradients in the wrong form. Thus, we further
3ReLU(x) is defined as x if x ≥ 0 and 0 otherwise.
49ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Meng Hao, et al.
design an efficient validity checking protocol to catch malicious par-
ties who deviate from the specification. The main idea is to check
whether the squared ℓ2 norm of each local gradient lies within a
certain interval, as follows:
f laдi = 1{|⟨дi , дi⟩ − 1| < ϵ},
(4)
where ϵ is a predefined constant threshold. Currently, we set it
empirically based on the gradients obtained before. Moreover, the
upper bound of the threshold can be formally analyzed according
to mathematical analysis and the Fixed-Point Arithmetic represen-
tation. We leave it in the feature work. In particular, f laдi equals
1, if the party correctly normalizes the local gradients; it equals 0,
otherwise. Note that we use interval check instead of equality test,
since in privacy-preserving FL framework fixed-point encodings
are used to represent floating-point gradients at the cost of a small
precision loss [36] [34].
New computing paradigm for similarity measurement. We
observe that in real-world scenarios most parties (e.g., mobile de-
vices) may only have few computing resources and limited commu-
nication bandwidth. However, as a public cloud service provider,
SP has advanced computing equipment and extremely high band-
width. Our key insight inspired by the above resource asymmetry is
that SP can pre-process the heavy cryptographic operations before
the parties’ local gradients are available, instead of staying idle and
waiting for parties to submit local gradients. To this end, we propose
a new computing paradigm for directional similarity measurement,
involving two phases, i.e., the preamble phase and the online phase,
which are distinguished according to whether local gradients are
available. During the preamble phase, SP performs matrix multi-
plication preprocessing using the server gradient дs. A detailed
procedure is proposed in Section 5. Benefiting from such technique,
during the online phase, the cosine similarity measurement can
be evaluated securely with negligible computation overhead and
zero communication cost. Combining the above improvements, our
crypto-friendly FL protocol is shown in Algorithm 1, and it serves