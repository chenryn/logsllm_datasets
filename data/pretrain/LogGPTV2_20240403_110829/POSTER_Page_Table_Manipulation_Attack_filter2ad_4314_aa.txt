title:POSTER: Page Table Manipulation Attack
author:JungSeung Lee and
HyoungMin Ham and
InHwan Kim and
JooSeok Song
POSTER: Page Table Manipulation Attack 
JungSeung Lee1,2, HyoungMin Ham2, InHwan Kim2, JooSeok Song2 
1Samsung Electronics 
2Yonsei University 
{kerino, hmham, ihkim, jssong}@emerald.yonsei.ac.kr 
ABSTRACT 
The  kernel  exploit  attacks  have  recently  become  difficult  to  be 
launched  because  executing  either  malicious 
scripts  or 
instructions  is  prohibited  by  the  DEP/NX  (Data  Execution 
Prevention/Not  Executable).  As  an  alternative  way,  return-
oriented programming (ROP) could be another option to treat the 
prevention. However, despite lots of cost for making ROP gadgets, 
it has no guarantee to assemble the proper gadgets. To overcome 
this  limitation,  we  introduce  Page  Table  Manipulation  Attack 
(PTMA) 
table 
modification.  This  attack  enables  an  attacker  to  rewrite  memory 
attribute  of  protected  memory.  We  show  how  to  find  the  page 
table entry of interest in Master Kernel Page Table and modify its 
attribute  in  AArch32  and  x86-64.  The  results  show  that  PTMA 
effectively  circumvents  the  existing  kernel  exploitation  defenses 
that are based on memory permission. 
to  alter  memory  attribute 
through  page 
Categories and Subject Descriptors 
D.4.6 [OPERATING SYSTEMS(C)]: Security and Protection –
Security kernels 
General Terms 
Security 
Keywords 
Kernel; Kernel Exploit; Page Table; Memory Permission 
1.  INTRODUCTION 
Return-to-user  (ret2usr)  attacks  hijack  control  or  data  flow  in 
kernel area and redirect it to user area via corrupted pointer.  The 
attacks  utilize  a  corrupted  pointer  in  kernel  area  and  injected  a 
malicious  payload  in  user  area.  The  attacks  have  been  de-facto 
kernel  exploitation  technique  for  more  than  a  decade  [1].  But 
most  of  them  are  already  prevented  by  memory  permission  to 
isolate  the  kernel.  The  preventions  focused  on  the  fact  that  the 
redirection  of  data  and  control  flow  from  kernel  to  user  without 
change of CPU mode is abnormal. 
Return-oriented  programming  is  another  option  against  exploit 
Permission  to  make  digital  or  hard  copies  of  part  or  all  of  this  work  for  personal  or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. Copyrights for third-party components of this work must be honored. 
For all other uses, contact the Owner/Author.  
Copyright is held by the owner/author(s). 
CCS'15, October 12-16, 2015, Denver, CO, USA 
ACM 978-1-4503-3832-5/15/10. 
http://dx.doi.org/10.1145/2810103.2810121 
preventions  based  memory  permission.  However,  it  needs  lots  of 
cost  for  making  ROP  gadgets,  and  has  no  guarantee  to  assemble 
the proper gadgets. 
In  this  paper,  we  suggest  a  new  kernel  exploitation  technique 
named  Page  Table  Manipulation  Attack  (PTMA)  to  circumvent 
existing memory based preventions in Linux systems. 
2.  PTMA 
Since the permissions of kernel area are in “sane” state in most of 
recent  systems  [2-5],  there  are  several  difficulties  in  exploiting 
kernel.  The  most  important  challenge  for  kernel  exploit  is  the 
execution of the payload that is usually located in a part of kernel 
address  space  which  is  called  physmap  [1].  To  prevent  the 
payload  execution  in  physmap,  the  area  is  already  mapped  as 
unexecutable  in  latest  Linux  Kernel  [2-5].  In  this  case,  return-
oriented programming (ROP) which is done by combining a chain 
of code fragments can be considered to circumvent the prevention 
[6].  However,  it  has  only  a  slight  chance  to  find  a  set  of  all  the 
necessary  gadgets  that  works  like  payload  due  to  limited  kernel 
text segment. 
PTMA is a technique to access to the page table of the kernel and 
to  modify  the  memory  attribute  of  designated  region  with  small 
set  of  instructions.  This  technique  enables  rewriting  any  parts  of 
memory  that  is  adopting  the  existing  memory  permission  based 
preventions. 
To  show  the  effectiveness  of  this  technique,  in  this  paper,  we 
focus on finding the kernel page table and modifying its attribute. 
We  describe  how  to  infer  the  page  table  of  targeted  memory  by 
utilizing the base address of the kernel page table and page size. 
After  we  know  where  the  kernel  page  table  is,  the  memory 
attribute  can  be  modified  with  the  kernel  vulnerability.  PTMA 
only  requires  the  instructions  for  modification  of  a  word-size 
memory  value  to  change  the  memory  attribute  of  a  page  table. 
Even in the case of using ROP due to the memory permission, it 
just  needs  small  number  of  ROP  gadgets.  This  simplicity  makes 
PTMA possible to be used in various systems. 
Linux  Kernel  keeps  Master  Kernel  Page  Table  as  the  reference 
model for the kernel page tables of every process. Our strategy is 
to  influence  mapping  information  on  kernel  space  for  every 
process  by  modifying  the  targeted  Page  Table  Entry  (PTE)  in 
Master  Kernel  Page  Table.  PTMA  consists  of  following  steps: 
discovering Master Kernel Page Table, looking up a PTE for the 
targeted  memory,  and  modifying  attribute  of  the  corresponding 
memory from the PTE. Since the location, structure, and format of 
page  table  are  different  depending  on  the  architecture  and  the 
kernel  configuration,  we  explain  PTMA  in  detail  with  the  most 
widely used architectures, AArch32 and x86-64. 
16442.1  PTMA Attack in AArch32 
2.1.1  Discovering Master Kernel Page Table 
In 32-bit ARM  Linux  Kernel,  swapper_pg_dir  points  to  the  base 
address of Master Kernel Page Table. The address referenced by 
swapper_pg_dir is determined according to three factors: First one 
is PAGE_OFFSET indicating virtual start address of the first bank 
of  RAM.  PAGE_OFFSET  has  different  values  according  to 
various  configurations.  VMSPLIT_3G,  VMSPLIT_2G  and 
VMSPLIT_1G  in  configuration  specify  the  beginning  address  of 
kernel  space  as  0xC0000000,  0x80000000  and  0x40000000 
respectively. Next one is TEXT_OFFSET, which is the byte offset 
of the kernel  image  in  RAM  from  the  start  of  RAM.  The  default 
value of TEXT_OFFSET is 0x8000. The last one is page directory 
size  (PG_DIR_SIZE).  This  is  changed  according  to  the  use  of 
Large  Physical  Address  Extension  (LPAE).  If  LPAE  is  used, 
PG_DIR_SIZE is 0x5000, otherwise it is 0x4000. With the three 
factors,  the  address  of  swapper_pg_dir  can  be  computed  through 
the following equation 
swapper_pg_dir =  
PAGE_OFFSET + TEXT_OFFSET - PG_DIR_SIZE 
The three factors can be known by reading the kernel booting log 
that  could  be  acquired  through  dmesg  command.  Through  our 
tests,  we  confirmed  that  the  address  of  swapper_pg_dir  is 
0xC0004000  in  typical  AArch32  Linux  Kernel.  If  the  kernel 
symbol  file  can  be  acquired  by  a  malicious  user,  the  user  can 
know the address of swapper_pg_dir from the file. 
2.1.2  Finding the targeted PTE 
In 32-bit ARM Linux Kernel, section type mapping is applied for 
kernel  space  to  minimize  memory  consumption  by  page  table. 
Section  type  mapping  means  single  level  mapping  and  size  of 
each mapping is 1MB. Hence, address of the targeted PTE can be 
calculated through the following equation: 
PTE Address = swapper_pg_dir + virtual address >> 18 
For  instance,  if  virtual  address  of  the  targeted  memory  is 
0xED800000,  the  PTE  address  would  be  0xC0007B60  on  the 
AArch32 default configuration. 
2.1.3  Modifying attribute of corresponding memory 
The executable attribute can be easily changed with one bit clear 
operation, that is bit 4 of targeted PTE value. Figure 1 is the first 
level descriptor format marked as section type in AArch32. In this 
format, bit 4 is execute-never (XN). 