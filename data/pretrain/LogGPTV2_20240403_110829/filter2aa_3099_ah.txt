4673596220485719052047643489888100153066571815569889888260342202348499838866885869291
2250418134186095459060506275961050676051693220280588047233628259880712415593039977585
8058909200893186430025978370000496261549009085433847612103588358439740729600808571507
27010985827690190496793207012355214605393036388807616, 
7621, 
1403760491349348221539642434030312019222395880541333190564834133119633853212796821863
5494844184037412464018789461968971974634733429862108348549408636115291545745800499841
9817456902929318697902819798254427945343361548635794308362823239150919240307072688623
000747781103375481834571274423004856276841225675241863 
tmp = dp * e - 1 
kbits = 210 
for i in range(1, e): 
p = (tmp // i + 1)  = PolynomialRing(Zmod(n)) 
f = x + p 
roots = f.small_roots(X=2^kbits, beta=0.4) 
if roots: 
print(i, roots) 
x0 = roots[0] 
if (n%(p+x0)) == 0: 
print(p+x0) 
break 
from Crypto.Util.number import long_to_bytes 
p 
= 
1142176184493857029617817817491639711006995291067100421787388536975273050986332762879
4478842373581937596761823394628513585538173848033965350050214224480253 
q = n//p 
assert p*q == n 
d = inverse_mod(e, (p-1)*(q-1)) 
print(long_to_bytes(pow(c,d,n))) 
more calc 
import gmpy2 
from Crypto.Util.number import * 
c 
= 
3505591868374888328217478432365181356052073760318580022742450042876226493302151138187
1995418539707283801414497303232960090541986190867832897131815320508500774326925395739
5282420325663132161022100365481003745940818974280988045034204540385744572806102552420
4283262655419253467028436933669917534682203000708886517325025207970027072486042757551
4471342164997149244044205247072315311115645755855836214700200464613652201134426101746
1901953583462467622428810167107079281190209731251995976003352201766861887320739990258
6015506060053888729678251796261767145034755578838105434455553900145626868018945283116
0062315698482986474322296387716709989292671747978922668181058489406663507675599642320
3380493776130488170859798745677727810528672150350333480506424506676127108526488370011
0991476988750700439255242178373796541680091797981313783526231779477531929480125748317
7741372991005066875900770459644762548438474388076655842822437141772648037236281057239
5522725083798926133468409600491925317437998458582723897120786458219630275616949619564
0997335427662977706820445616053440903947775709737252117130762018469424388838970784080
6777932547158990704118642378158004690358831695861544319681913385236756504946707671037
6395085898875495653237178198379421129086523 
p 
= 
2740510704175326648914538862185816951187299662276526706486854211726987553136493989667
1662734188734825462948115530667205007939029215517180761866791579330410449202307248373
2292246622328221803972157211633691511150197705965287047194724245510245169286065849757
9335081494399773193999645995972082602511017921647770937384994541148373152483128489502
4319654509286305913312306154387754998813276562173335189450448233216133842189148761197
9485595299601444535131913722549020311687551651242187835047408344423793633114891087322
1605156695349827919853779462052180077391722800240297035808703350489720502188129515404
6656335865303621793069 
s = (p-(pow(2,p,p*p)-2) // p) 
q = gmpy2.next_prime(s) 
n = p*q 
e = 0x10001 
d = inverse(e, (p-1)*(q-1)) 
print(long_to_bytes(pow(c,d,n))) 
RSAssss 
from Crypto.Util.number import * 
from gmpy2 import next_prime, iroot, mpz 
p = getPrime(512) 
q = getPrime(512) 
n = p * q * next_prime(p) * next_prime(q) 
e = 0x10001 
n 
= 
8030860507195481656424331455231443135773524476536419534745106637165762909478292141556
8468921465535556093019148841764223222867395461936822363558231490967310580449330465529
2670768216843572780017578337304572669209369414871852161059052371881309689588353324533
1244650675812406540694948121258394822022998773233400623162137949381772195351339548977
4225645460541889185423820884716667958421850190020250835431629917393099359727058719437
8773378449173550090501365106128402044757823013507521126840541325436843954925991731244
5348808412659422810647972872286215701325216318641985498202349281374905892279894612835
009186944143298761257 
c 
= 
3304124639719334349997663632110579306673932777705840648575774671427424134287680988314
1293125933610876062438195282986101317970782623513073968319853975553906401513911386334
3195174674815661046358247964556177919498180612989800987651789945084087556967597676515
5608446799203699927448835004756707151281044859676695533373755798273892503194753948997
9476531006908418809254450591754943141986054750239395677504099072176542914306151022585
2399839423143679690263507799582947734731675473993898081429330428931841744349301970407
3164585505217658570214989150175123757038125380996050761572021986573934155470641091678
664451080065719261207 
# factor using https://www.alpertron.com.ar/ECM.HTM 
n0 
= 
8961506852753883631560212415400830028663693459961733486750905307662271536580937174003
7316558871796433906844464070995869293654082577887578197182408045172781798703173650574
7376449145155915222567588480899555787134587152345366644152165268309678318623015186365
86702212189087959136509334102772855657664091570630079 
n1 
= 
8961506852753883631560212415400830028663693459961733486750905307662271536580937174003
7316558871796433906844464070995869293654082577887578197182408045175035339285085728002
8382203140684746709752287784642400880843318074207201213644867650111696697475533936616
50912114228227308579940164269877101973728452252879383 
assert n0*n1 == n 
def solve(a, b, c): 
ga = mpz(a) 
gb = mpz(b) 
gc = mpz(c) 
delat = gb**2-4*ga*gc 
if delat <= 0: 
return 0, 0 
de = iroot(delat, 2) 
if de[1]: 
r1 = (de[0]-gb) % (2*ga) 
r2 = (-de[0]-gb) % (2*ga) 
if (r1, r2) == (0, 0): 
x1 = (de[0]-gb) // (2*ga) 
x2 = (-de[0]-gb) // (2*ga) 
x = max(x1, x2) 
if n0 % x == 0: 
return x, 0 
if n1 % x == 0: 
return x, 1 
return 0, 0 
for x in range(1, 1000): 
for y in range(1, 1000): 
a = y 
b = x*y+n1-n0 
c = -n0*x 
res, flag = solve(a, b, c) 
if res: 
print(x, y, res, flag) 
p 
= 
7438702853077959381258310132763396438106232921778795282485510181580967905871873724619
094997564895264666055160684895522536793412379230489025112499879129021 
c 
= 
3304124639719334349997663632110579306673932777705840648575774671427424134287680988314
1293125933610876062438195282986101317970782623513073968319853975553906401513911386334
3195174674815661046358247964556177919498180612989800987651789945084087556967597676515
5608446799203699927448835004756707151281044859676695533373755798273892503194753948997
9476531006908418809254450591754943141986054750239395677504099072176542914306151022585
2399839423143679690263507799582947734731675473993898081429330428931841744349301970407
3164585505217658570214989150175123757038125380996050761572021986573934155470641091678
664451080065719261207 
n = n0 
q = n//p 
c = c % n0 
d = inverse(e, (p-1)*(q-1)) 
print(long_to_bytes(pow(c, d, n)))