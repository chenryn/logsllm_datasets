title:Toward Detecting Collusive Ranking Manipulation Attackers in Mobile
App Markets
author:Hao Chen and
Daojing He and
Sencun Zhu and
Jingshun Yang
Characterizing Promotional Attacks
in Mobile App Store
Bo Sun1(B), Xiapu Luo2, Mitsuaki Akiyama3, Takuya Watanabe3,
and Tatsuya Mori1
1 Department of Computer Science and Communications Engineering,
Waseda University, Shinjuku, Japan
{sunshine,mori}@nsl.cs.waseda.ac.jp
2 Department of Computing, The Hong Kong Polytechnic University,
Kowloon, Hong Kong
PI:EMAIL
3 NTT Secure Platform Laboratories, NTT Corporation, Tokyo, Japan
PI:EMAIL, PI:EMAIL
Abstract. Mobile app stores, such as Google Play, play a vital role in
the ecosystem of mobile apps. When users look for an app of interest,
they can acquire useful data from the app store to facilitate their deci-
sion on installing the app or not. This data includes ratings, reviews,
number of installs, and the category of the app. The ratings and reviews
are the user-generated content (UGC) that aﬀect the reputation of an
app. Unfortunately, miscreants also exploit such channels to conduct
promotional attacks (PAs) that lure victims to install malicious apps. In
this paper, we propose and develop a new system called PADetective to
detect miscreants who are likely to be conducting promotional attacks.
Using a dataset with 1,723 of labeled samples, we demonstrate that the
true positive rate of detection model is 90%, with a false positive rate of
5.8%. We then applied PADetective to a large dataset for characterizing
the prevalence of PAs in the wild and ﬁnd 289 K potential PA attackers
who posted reviews to 21 K malicious apps.
Keywords: Mobile app store · Promotional attacks · Machine learning
1 Introduction
With more than four million apps [20], mobile app markets, such as Google Play
and Apple App Store, play a vital role in distributing apps to customers. To help
users look for apps and for developers to promote their apps, mobile app markets
provide various information about the apps, such as descriptions, screenshots,
and number of installations. In addition, most markets involve reputation sys-
tems, through which users can rate the apps and write down reviews, to facilitate
other users to select apps. Since apps with higher ratings usually get more down-
loads [12], recent studies report that some developers adopt unfair approaches
to manipulate their apps’ ratings and reviews [22,23], even if such behaviors are
c(cid:2) Springer Nature Singapore Pte Ltd. 2017
L. Batten et al. (Eds.): ATIS 2017, CCIS 719, pp. 113–127, 2017.
DOI: 10.1007/978-981-10-5421-1 10
114
B. Sun et al.
prohibited by FTC [9] and app markets. Note that attackers also employ such
approach to promote malicious apps and lure victims to install them. We call
such malicious apps campaign as promotional attacks (PAs).
Although a few recent studies have revealed the paid reviews [22] and colluded
reviewers [23], there have been no systematic examinations on the promotional
attacks in mobile app stores. To ﬁll in the gaps, we conducted the ﬁrst large-scale
investigation on PAs with the aim of answering the following two questions: (1)
How can we detect PAs systematically? and (2) How prevalent are PAs in the
wild?
It is non-trivial to address these two questions because the solution should
be accurate to capture PA attackers with low false positive rate, scalable to
handle millions of apps and reviews in app stores, and robust to raise the bar for
sophisticated attackers to evade the detection. Existing studies cannot achieve
these goals. For example, high computational complexity limits the scalability
of [22], and requiring the similar reviews in keyword level aﬀects the accuracy
of [17,18]. Moreover, to our best knowledge, none of the existing studies have
examined market-scale apps.
To tackle these challenges, we propose and develop a novel system, named
PADetective, to identify PA attackers accurately and eﬃciently. PADetective
adopts supervised learning to characterize PA attackers according to 15 features
(e.g., day intervals, semantic similarity), and then applies the trained model to
detect other PA attackers. It is worth noting that these new and eﬀective fea-
tures are carefully selected from not only UGC but also metadata in order to
enhance the robustness of PADetective. In particular, features from metadata
have not been used by existing works, and they could contribute to the robust-
ness of PADetective because it is easier for attackers to manipulate UGC than
metadata. We employ the information entropy and the coeﬃcient of variation for
quantifying the features from metadata, and leverage the state-of-the-art NLP
technique (i.e., Paragraph vector [14]) to extract features from UGC because it
can extract similar reviews at semantic level and therefore increase the accuracy.
Moreover, we employ the TRUE-REPUTATION [19] algorithm to calculate the
true reputation scores for detecting abnormal ratings. These algorithms are light-
weight, and we only need to recompute the true reputation scores and similarity
word weight vectors for new UGC and metadata. This feature extraction app-
roach empowers PADetective to handle large-scale dataset. In our evaluation,
PADetective processed 57 million reviews in one day. We evaluate PADetective
using real PA data, and the result shows that PADetective’s true positive rate
is up to 90% with a low false positive rate of 5.8%.
Moreover, we conduct the ﬁrst large-scale investigation on PA by applying
PADetective to 1 million apps in Google Play, which has 57 million reviews
posted by 14 million users. PADetective ﬂagged 289 K reviewers as suspicious
promotional attackers. These reviewers posted reviews to 136 K apps, which
included 21 K malicious apps. Among the top 1 K reviewers who were ﬂagged as
promotional attackers with high probability score, 136 reviewers posted reviews
only for malicious apps, and another 113 reviewers posted reviews for apps where
Characterizing Promotional Attacks in Mobile App Store
115
more than half of the apps were detected as malicious. It is worth noting that PAs
detected by PADetective can contribute to the detection of potentially malicious
apps.
Major contributions of this work are summarized as follows:
– We developed a novel system, named PADetective, which aims to detect PA
attackers from a large volume of reviewers with high accuracy and low false
positive rates. The extensive experiments demonstrated that PADetective can
achieve 90% true positive rate with low false positive rate of 5.8% (Sect. 4).
– Using the PADetective, we conducted the ﬁrst large-scale measurement study
on PAs by examining 57 million reviews, posted by 14 million users for 1 mil-
lion apps in Google Play, and obtained interesting observations and insights
(Sect. 5).
– Our extensive analyses revealed that the detected PAs can be used to discover
potentially malicious apps, which have not been detected by popular anti-
virus scanners (Sect. 5).
2 Problem Statement
This section speciﬁes the problem we address in this paper by ﬁrst presenting
the high-level overview of the problem and then describing its mathematical
formulation. Figure 1 presents the high-level overview of the problem. Although
this work targets Google Play, the model is applicable to other mobile app stores
as well. In the model, a reviewer posts review comments and rating scores for
several apps published in the app store. For the apps commented/rated by the
reviewer, we can extract the UGC and the metadata associated with the apps.
The UGC includes comment posting time, review comment, and rating score;
these are generated by the reviewer. The app metadata includes the number of
installs, a set of developers of the app, and a set of the categories of the app;
these are the data of the apps commented/rated by the reviewer.
Our goal is to determine whether a given reviewer is a PA attacker or not
by analyzing the UGC and the metadata associated with apps commented on
or rated by the reviewer. To achieve it, we ﬁrst extract a feature vector from
the UGC and app metadata, and then train a classiﬁer using labeled data. After
that, we apply the trained classiﬁer to diﬀerentiate legitimate reviewers and a
PA attackers.
To formulate the problem in a mathematical way, we introduce the variables
summarized in Table 1. It is worth noting that we only examine the reviewers
with mi ≥ 3 because it takes time and eﬀorts for promotional attackers to
create zombie accounts for commenting apps and therefore they often reuse
these accounts for posting reviews. We discuss how to relax this restriction in
Sect. 6. Of the variables shown in Table 1, cij, sij, and tij are UGC data and
nij, dij, and kij are the metadata. Using these six values for all the apps in
} for a given reviewer
A(ri), we compute a feature vector F(ri) = {f i
ri. Our goal is to build an accurate classiﬁer g(F(ri)) that determines whether
ri is promotional attacker or not. The details of computing a feature vector from
the observed variables will be described in the next section.
2, . . . f i
1, f i
15
116
B. Sun et al.
UGC
App metadata
Posting 
time
Review 
comments
Rating 
scores
#installs Developers Categories
Table 1. Notations used for our
problem.
Reviewer
Feature extraction
Feature vector
f1
f2
Classification
. . .
Legitimate 
reviewer
Promotional 
attacker
Fig. 1. High-level overview of the
problem.
Symbol Deﬁnition
ri
A(ri)
the i-th reviewer (i = 1, 2, . . .)
a set of apps reviewed by the
reviewer ri
mi
cij
sij
tij
nij
dij
kij
number of apps reviewed by the
reviewer ri. mi = |A(ri)|
review comment posted by the
reviewer ri for the j-th app.
j = 1, 2, . . . , mi
rating score posted by the
reviewer ri for the j-th app.
j = 1, 2, . . . , mi
time at which the reviewer ri
posted a comment for the j-th
app. j = 1, 2, . . . , mi
number of installs for the j-th
app reviewed by the reviewer ri.
j = 1, 2, . . . , mi
developer of the j-th app
reviewed by the reviewer ri.
j = 1, 2, . . . , mi
category of the j-th app reviewed
by the reviewer ri.
j = 1, 2, . . . , mi
      TRUE-
REPUTATION  
    algorithm 
Information 
  Entropy 
$
Large-scale Measurement
Fig. 2. Overview of PADetective.
3 PADetective System
This section details PADetective (Fig. 2), especially its four major components
including: data collection, data preprocessing, feature extraction, and detection.
3.1 Data Collection and Preprocessing
Collection. We ﬁrst create a list of apps to be downloaded by using the list of
package names in [21]. Then, we collect metadata for each app by accessing its
description page according to its package name and employing our HTML parser
to extract the metadata in the page. Moreover, we develop a UGC crawler by
leveraging the review collection API [4] provided by Google Play Store. Figure 3
shows the statistics of the number of reviews in each app. Note that the Google
Characterizing Promotional Attacks in Mobile App Store
117
Fig. 3. Histogram for the number of
reviews in each app.
Fig. 4. Percentage of review numbers
with diﬀerent rating.
Play review collection service only allows 4, 500 most recent reviews to be crawled
for each app. To circumvent this limitation, we could fetch the reviews continu-
ously thanks to our automated process of data collection. To follow the accept-
able use policy of the API, we deployed our crawler on 100 servers around the
world to collect UGC for a large number of apps. We used the crawler to collect
UGC and metadata for 1,058,259 apps from the Google Play app store in Novem-
ber 2015. The data set involved 57,868,301 reviews from 20,211,517 unique users.
Figure 4 shows the statistics for the collected rating data. The rating scale in the
Google Play Store ranges from 1 to 5. We can see that over 55% of ratings are
5 stars.
Preprocessing. Before creating the feature vector for the classiﬁer, we develop
a 8-step process to remove the noisy and meaningless data. Step 1: Remove all
reviews under the default reviewer name “A Google User”, because we cannot
extract the string features from the default reviewer name. Step 2: Extract the
reviewers who have commented on at least three apps. The limitation introduced
by this step is discussed in Sect. 6. Step 3: Remove reviews written in languages
other than English as PADetective currently only handles English. Step 4: Split
all sentences into words. Step 5: Transform all letters into lowercase. Step 6:
Remove all stop words such as “is”, “am”, “the”. Step 7: Consolidate variant
forms of a word into a common form (i.e., word stemming), for example, con-
vert “running” to “run.”. Step 8: Correct the misspelled English words for all
the reviews. For Steps 3–8, we implement the natural language processing based
on NLTK [5] and TextBlob [7]. TextBlob enables us to realize language detec-
tion and spelling correction. After data preprocessing, our dataset for feature
extraction includes 2,606,791 reviewers.
3.2 Feature Extraction
We proﬁle each reviewer ri using 15 features extracted from UGC and metadata.
These features form a feature vector F(ri) = {f i
}, and are described
as follows.
2, . . . f i
1, f i
15
118
B. Sun et al.
(cid:2)mi
2 = H(X) = − (cid:2)mi
f i
1: Day intervals. PA Attackers are likely to launch PA attacks within a short
day interval. For example, Xie and Zhu found that reviewers hired by app pro-
motion web services tend to complete their review promotion missions within
120 days [23]. Therefore, we calculated the day intervals between the earliest and
the latest post time max(Ti)− min(Ti), where Ti = {ti1, . . . , timi
}, and deﬁned
1 = max(Ti) − min(Ti).
f i