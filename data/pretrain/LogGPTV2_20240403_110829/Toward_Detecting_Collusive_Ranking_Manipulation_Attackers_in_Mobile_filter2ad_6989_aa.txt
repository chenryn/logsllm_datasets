# Toward Detecting Collusive Ranking Manipulation Attackers in Mobile App Markets

**Authors:**
- Hao Chen
- Daojing He
- Sencun Zhu
- Jingshun Yang

## Characterizing Promotional Attacks in Mobile App Stores

**Authors:**
- Bo Sun<sup>1</sup>
- Xiapu Luo<sup>2</sup>
- Mitsuaki Akiyama<sup>3</sup>
- Takuya Watanabe<sup>3</sup>
- Tatsuya Mori<sup>1</sup>

**Affiliations:**
1. Department of Computer Science and Communications Engineering, Waseda University, Shinjuku, Japan
   - {sunshine, mori}@nsl.cs.waseda.ac.jp
2. Department of Computing, The Hong Kong Polytechnic University, Kowloon, Hong Kong
   - PI:EMAIL
3. NTT Secure Platform Laboratories, NTT Corporation, Tokyo, Japan
   - PI:EMAIL, PI:EMAIL

### Abstract

Mobile app stores, such as Google Play, play a crucial role in the ecosystem of mobile applications. When users search for an app, they rely on data from the app store, including ratings, reviews, number of installs, and app category, to make informed decisions. Ratings and reviews, which are user-generated content (UGC), significantly influence an app's reputation. However, malicious actors exploit these channels to conduct promotional attacks (PAs) that deceive users into installing harmful apps. In this paper, we introduce PADetective, a system designed to detect potential PA attackers. Using a dataset of 1,723 labeled samples, we demonstrate that PADetective achieves a true positive rate of 90% with a false positive rate of 5.8%. We further apply PADetective to a large dataset to characterize the prevalence of PAs, identifying 289,000 potential PA attackers who posted reviews for 21,000 malicious apps.

**Keywords:** Mobile app store, Promotional attacks, Machine learning

### 1. Introduction

With over four million apps available, mobile app markets like Google Play and the Apple App Store are essential for distributing apps to consumers. These markets provide various information, such as descriptions, screenshots, and installation numbers, to help users find and developers promote their apps. Additionally, most markets include reputation systems where users can rate and review apps, aiding other users in making informed choices. Apps with higher ratings typically receive more downloads [12]. Recent studies have reported that some developers use unfair methods to manipulate their apps' ratings and reviews [22, 23], even though such practices are prohibited by the FTC [9] and app market policies. Malicious actors also use these tactics to promote harmful apps, a phenomenon we term promotional attacks (PAs).

While recent studies have exposed paid reviews [22] and colluded reviewers [23], there has been no comprehensive examination of PAs in mobile app stores. To address this gap, we conducted the first large-scale investigation of PAs, focusing on two key questions: (1) How can we systematically detect PAs? and (2) How prevalent are PAs in the wild?

Addressing these questions is challenging because the solution must be accurate, scalable, and robust against sophisticated attackers. Existing studies fall short in these areas. For example, high computational complexity limits the scalability of [22], and keyword-level similarity requirements affect the accuracy of [17, 18]. To our knowledge, no existing study has examined market-scale apps.

To tackle these challenges, we developed PADetective, a novel system for accurately and efficiently identifying PA attackers. PADetective uses supervised learning to characterize PA attackers based on 15 features, such as day intervals and semantic similarity, and applies the trained model to detect other PA attackers. These features are carefully selected from both UGC and metadata to enhance robustness, as it is easier for attackers to manipulate UGC than metadata. We use information entropy and the coefficient of variation to quantify metadata features and leverage state-of-the-art NLP techniques, such as Paragraph Vector [14], to extract UGC features. This approach increases accuracy by capturing semantic similarities. Additionally, we employ the TRUE-REPUTATION [19] algorithm to calculate true reputation scores for detecting abnormal ratings. These lightweight algorithms enable PADetective to handle large datasets; in our evaluation, PADetective processed 57 million reviews in one day, achieving a true positive rate of 90% with a false positive rate of 5.8%.

We also conducted the first large-scale investigation of PAs by applying PADetective to 1 million apps in Google Play, which includes 57 million reviews posted by 14 million users. PADetective identified 289,000 reviewers as potential PA attackers, who posted reviews for 136,000 apps, including 21,000 malicious apps. Among the top 1,000 flagged reviewers, 136 posted reviews only for malicious apps, and another 113 posted reviews for apps where more than half were detected as malicious. Our findings suggest that PAs detected by PADetective can aid in identifying potentially malicious apps.

**Major Contributions:**
- Development of PADetective, a system that detects PA attackers with high accuracy and low false positive rates. Extensive experiments show a 90% true positive rate and a 5.8% false positive rate.
- Conducted the first large-scale measurement study on PAs, examining 57 million reviews for 1 million apps in Google Play, yielding valuable insights.
- Revealed that detected PAs can help discover potentially malicious apps not detected by popular antivirus scanners.

### 2. Problem Statement

This section outlines the problem we address, providing a high-level overview and a mathematical formulation. Figure 1 illustrates the high-level problem. Although our work focuses on Google Play, the model is applicable to other mobile app stores. In the model, a reviewer posts comments and rating scores for several apps. We extract UGC and metadata associated with the reviewed apps. UGC includes posting time, review comments, and rating scores, while metadata includes the number of installs, developers, and app categories.

Our goal is to determine whether a given reviewer is a PA attacker by analyzing the UGC and metadata. We achieve this by extracting a feature vector from the UGC and metadata, training a classifier using labeled data, and then applying the classifier to differentiate legitimate reviewers from PA attackers.

Mathematically, we define the variables in Table 1. We only examine reviewers with \( m_i \geq 3 \) because promotional attackers often reuse accounts. We discuss relaxing this restriction in Section 6. Using the six values for each app, we compute a feature vector \( F(r_i) = \{ f^i_1, f^i_2, \ldots, f^i_{15} \} \). Our objective is to build an accurate classifier \( g(F(r_i)) \) that determines if \( r_i \) is a promotional attacker.

**Table 1: Notations Used for Our Problem**

| Symbol | Definition |
|--------|------------|
| \( r_i \) | The i-th reviewer (i = 1, 2, ...) |
| \( A(r_i) \) | Set of apps reviewed by \( r_i \) |
| \( m_i \) | Number of apps reviewed by \( r_i \); \( m_i = |A(r_i)| \) |
| \( c_{ij} \) | Review comment posted by \( r_i \) for the j-th app (j = 1, 2, ..., m_i) |
| \( s_{ij} \) | Rating score posted by \( r_i \) for the j-th app (j = 1, 2, ..., m_i) |
| \( t_{ij} \) | Time at which \( r_i \) posted a comment for the j-th app (j = 1, 2, ..., m_i) |
| \( n_{ij} \) | Number of installs for the j-th app reviewed by \( r_i \) (j = 1, 2, ..., m_i) |
| \( d_{ij} \) | Developer of the j-th app reviewed by \( r_i \) (j = 1, 2, ..., m_i) |
| \( k_{ij} \) | Category of the j-th app reviewed by \( r_i \) (j = 1, 2, ..., m_i) |

**Figure 1: High-Level Overview of the Problem**

**TRUE-REPUTATION Algorithm, Information Entropy**

**Large-Scale Measurement**

**Figure 2: Overview of PADetective**

### 3. PADetective System

This section details the components of PADetective, including data collection, preprocessing, feature extraction, and detection.

#### 3.1 Data Collection and Preprocessing

**Collection:**
- We create a list of apps to download using package names from [21].
- We collect metadata for each app by accessing its description page and parsing the HTML.
- We develop a UGC crawler using the Google Play Store's review collection API [4].

**Figure 3: Histogram of Reviews per App**

**Figure 4: Percentage of Reviews with Different Ratings**

The Google Play review collection service allows up to 4,500 recent reviews per app. To overcome this, we continuously fetch reviews using an automated process. We deployed the crawler on 100 servers worldwide to collect UGC and metadata for 1,058,259 apps in November 2015, involving 57,868,301 reviews from 20,211,517 unique users. Over 55% of the ratings are 5 stars.

**Preprocessing:**
- **Step 1:** Remove reviews under the default name "A Google User."
- **Step 2:** Extract reviewers who have commented on at least three apps.
- **Step 3:** Remove non-English reviews.
- **Step 4:** Split sentences into words.
- **Step 5:** Convert all letters to lowercase.
- **Step 6:** Remove stop words.
- **Step 7:** Perform word stemming.
- **Step 8:** Correct misspelled English words.

We use NLTK [5] and TextBlob [7] for natural language processing. After preprocessing, our dataset includes 2,606,791 reviewers.

#### 3.2 Feature Extraction

We profile each reviewer \( r_i \) using 15 features extracted from UGC and metadata, forming a feature vector \( F(r_i) = \{ f^i_1, f^i_2, \ldots, f^i_{15} \} \).

- **f^i_1: Day Intervals.** PA attackers often launch attacks within a short day interval. Xie and Zhu found that hired reviewers complete missions within 120 days [23]. We calculate the day interval between the earliest and latest post times, \( \max(T_i) - \min(T_i) \), where \( T_i = \{ t_{i1}, \ldots, t_{im_i} \} \), and define \( f^i_1 = \max(T_i) - \min(T_i) \).