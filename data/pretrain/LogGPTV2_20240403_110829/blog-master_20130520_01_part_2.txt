```  
uptest@db-172-16-3-33-> psql  
psql (9.0beta2)  
Type "help" for help.  
postgres=# create table test (id int primary key, info text);;  
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_pkey" for table "test"  
CREATE TABLE  
postgres=# insert into test select generate_series(1,10000);  
INSERT 0 10000  
```  
## 二. 升级准备  
1\. 检查老版本configure选项  
```  
uptest@db-172-16-3-33-> pg_config --pkgincludedir  
/opt/pgsql9.0beta2/include  
uptest@db-172-16-3-33-> pg_config --cflags  
-O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -fno-strict-aliasing -fwrapv  
uptest@db-172-16-3-33-> pg_config --cflags_sl  
-fpic  
uptest@db-172-16-3-33-> pg_config --ldflags  
-Wl,-rpath,'/opt/pgsql9.0beta2/lib',--enable-new-dtags  
uptest@db-172-16-3-33-> pg_config --libs  
-lpgport -lxslt -lxml2 -lpam -lssl -lcrypto -lz -lreadline -ltermcap -lcrypt -ldl -lm   
uptest@db-172-16-3-33-> pg_config --configure  
'--prefix=/opt/pgsql9.0beta2' '--with-pgport=1099' '--with-segsize=8' '--with-wal-segsize=64' '--with-wal-blocksize=64' '--with-perl' '--with-python' '--with-openssl' '--with-pam' '--with-ldap' '--with-libxml' '--with-libxslt' '--enable-thread-safety'  
```  
或者查看老版本的config.log  
```  
[root@db-172-16-3-33 soft_bak]# cd postgresql-9.0beta2  
[root@db-172-16-3-33 postgresql-9.0beta2]# less config.log   
  $ ./configure --prefix=/opt/pgsql9.0beta2 --with-pgport=1099 --with-segsize=8 --with-wal-segsize=64 --with-wal-blocksize=64 --with-perl --with-python --with-openssl --with-pam --with-ldap --with-libxml --with-libxslt --enable-thread-safety  
```  
2\. 检查老版本initdb选项  
```  
uptest@db-172-16-3-33-> psql  
psql (9.0beta2)  
Type "help" for help.  
postgres=# \l+  
                                                       List of databases  
   Name    |  Owner   | Encoding | Collation | Ctype |   Access privileges   |  Size   | Tablespace |        Description          
-----------+----------+----------+-----------+-------+-----------------------+---------+------------+---------------------------  
 postgres  | postgres | UTF8     | C         | C     |                       | 11 MB   | pg_default |   
 template0 | postgres | UTF8     | C         | C     | =c/postgres          +| 5273 kB | pg_default |   
           |          |          |           |       | postgres=CTc/postgres |         |            |   
 template1 | postgres | UTF8     | C         | C     | =c/postgres          +| 5273 kB | pg_default | default template database  
           |          |          |           |       | postgres=CTc/postgres |         |            |   
(3 rows)  
```  
3\. 根据老版本的configure选项以及其他环境变量编译postgresql 9.3beta1  
```  
wget http://ftp.postgresql.org/pub/source/v9.3beta1/postgresql-9.3beta1.tar.bz2  
tar -jxvf postgresql-9.3beta1.tar.bz2  
cd postgresql-9.3beta1  
```  
注意端口不要和老版本重复.  
```  
./configure --prefix=/opt/pgsql9.3beta1 --with-pgport=2099 --with-segsize=8 --with-wal-segsize=64 --with-wal-blocksize=64 --with-perl --with-python --with-openssl --with-pam --with-ldap --with-libxml --with-libxslt --enable-thread-safety  
gmake world  
gmake install-world  
```  
4\. 初始化数据库集群  
```  
[root@db-172-16-3-33 postgresql-9.3beta1]# cd /  
[root@db-172-16-3-33 /]# mkdir pgdata2099  
[root@db-172-16-3-33 /]# chown -R uptest:uptest pgdata2099  
[root@db-172-16-3-33 /]# su - uptest  
uptest@db-172-16-3-33-> LD_LIBRARY_PATH=/opt/pgsql9.3beta1/lib /opt/pgsql9.3beta1/bin/initdb -D /pgdata2099 -E UTF8 --locale=C -U postgres -W  
```  
配置postgresql.conf, 注意端口不要和老的重复.  
```  
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;  
port = 2099                             # (change requires restart)  
max_connections = 100                   # (change requires restart)  
superuser_reserved_connections = 13     # (change requires restart)  
unix_socket_directories = '.'   # comma-separated list of directories  
unix_socket_permissions = 0700          # begin with 0 to use octal notation  
shared_buffers = 1024MB                 # min 128kB  
maintenance_work_mem = 1024MB           # min 1MB  
max_stack_depth = 8MB                   # min 100kB  
shared_preload_libraries = 'pg_stat_statements'         # (change requires restart)  
wal_level = hot_standby                 # minimal, archive, or hot_standby  
synchronous_commit = off                # synchronization level;  
wal_sync_method = fdatasync             # the default is the first option  
wal_buffers = 16384kB                   # min 32kB, -1 sets based on shared_buffers  
wal_writer_delay = 10ms         # 1-10000 milliseconds  
checkpoint_segments = 32                # in logfile segments, min 1, 16MB each  
archive_mode = on               # allows archiving to be done  
archive_command = '/bin/date'           # command to use to archive a logfile segment  
max_wal_senders = 32            # max number of walsender processes  
wal_keep_segments = 128         # in logfile segments, 16MB each; 0 disables  
hot_standby = on                        # "on" allows queries during recovery  
wal_receiver_status_interval = 1s       # send replies at least this often  
hot_standby_feedback = off               # send info from standby to prevent  
random_page_cost = 2.0                  # same scale as above  
effective_cache_size = 8192MB  
log_destination = 'csvlog'              # Valid values are combinations of  
logging_collector = on          # Enable capturing of stderr and csvlog  
log_directory = 'pg_log'                # directory where log files are written,  
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,  
log_file_mode = 0600                    # creation mode for log files,  
log_truncate_on_rotation = on           # If on, an existing log file with the  
log_rotation_age = 1d                   # Automatic rotation of logfiles will  
log_rotation_size = 10MB                # Automatic rotation of logfiles will  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose           # terse, default, or verbose messages  
log_timezone = 'PRC'  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'C'                       # locale for system error message  
lc_monetary = 'C'                       # locale for monetary formatting  
lc_numeric = 'C'                        # locale for number formatting  
lc_time = 'C'                           # locale for time formatting  
default_text_search_config = 'pg_catalog.english'  
pg_stat_statements.max = 1000  
pg_stat_statements.track = all  
```  
5\. 启动新集群  
```  
uptest@db-172-16-3-33-> LD_LIBRARY_PATH=/opt/pgsql9.3beta1/lib /opt/pgsql9.3beta1/bin/pg_ctl start -D /pgdata2099  
server starting  
```  
6\. 安装老版本上一致的加载模块的so动态链接库. 本例 : pgfincore, postgis, pg_stat_statements(自带)  
```  
[root@db-172-16-3-33 /]# cd /opt/soft_bak/  
[root@db-172-16-3-33 soft_bak]# tar -zxvf pgfincore-v1.1.1.tar.gz  
[root@db-172-16-3-33 soft_bak]# mv pgfincore-1.1.1 postgresql-9.3beta1/contrib/  
[root@db-172-16-3-33 soft_bak]# cd postgresql-9.3beta1/contrib/pgfincore-1.1.1/  
[root@db-172-16-3-33 pgfincore-1.1.1]# export PATH=/opt/pgsql9.3beta1/bin:$PATH  
[root@db-172-16-3-33 pgfincore-1.1.1]# which pg_config  
/opt/pgsql9.3beta1/bin/pg_config  
```  
确保当前是postgresq9.3beta1的pg_config  
```  
[root@db-172-16-3-33 pgfincore-1.1.1]# gmake clean  
[root@db-172-16-3-33 pgfincore-1.1.1]# gmake  
[root@db-172-16-3-33 pgfincore-1.1.1]# gmake install  
[root@db-172-16-3-33 soft_bak]# cd /opt/soft_bak/  
[root@db-172-16-3-33 soft_bak]# mv postgis-2.0.3 postgis-2.0.3_for_9.0beta2  
[root@db-172-16-3-33 soft_bak]# tar -zxvf postgis-2.0.3.tar.gz  
[root@db-172-16-3-33 pgfincore-1.1.1]# export PATH=/opt/pgsql9.3beta1/bin:$PATH  
[root@db-172-16-3-33 pgfincore-1.1.1]# which pg_config  
/opt/pgsql9.3beta1/bin/pg_config  
```  
确保当前是postgresq9.3beta1的pg_config  
```  
[root@db-172-16-3-33 postgis-2.0.3]# cd /opt/soft_bak/postgis-2.0.3  
```  
注意修改pgsql路径,postgis路径.  
```  
./configure --prefix=/opt/postgis-2.0.3-for9.3 --with-pgconfig=/opt/pgsql9.3beta1/bin/pg_config --with-gdalconfig=/opt/gdal-1.10.0/bin/gdal-config --with-geosconfig=/opt/geos-3.3.8/bin/geos-config --with-xml2config=/usr/bin/xml2-config --with-projdir=/opt/proj-4.8.0 --with-libiconv=/usr/bin --with-jsondir=/opt/json-c-git20130520 --with-gui --with-raster --with-topology --with-gettext=no  
gmake  
gmake install  
```  
7\. 调整新老版本数据库本地无密码认证  
```  
cd /pgdata1099  
vi pg_hba.conf  
# "local" is for Unix domain socket connections only  
local   all             all                                     trust  
# IPv4 local connections:  
host    all             all             127.0.0.1/32            trust  
cd /pgdata2099  
vi pg_hba.conf  
# "local" is for Unix domain socket connections only  
local   all             all                                     trust  
# IPv4 local connections:  
host    all             all             127.0.0.1/32            trust  
LD_LIBRARY_PATH=/opt/pgsql9.0beta2/lib /opt/pgsql9.0beta2/bin/pg_ctl restart -m fast -D /pgdata1099  
LD_LIBRARY_PATH=/opt/pgsql9.3beta1/lib /opt/pgsql9.3beta1/bin/pg_ctl restart -m fast -D /pgdata2099  
```  
8\. 停库  
```  
LD_LIBRARY_PATH=/opt/pgsql9.0beta2/lib /opt/pgsql9.0beta2/bin/pg_ctl stop -m fast -D /pgdata1099  
LD_LIBRARY_PATH=/opt/pgsql9.3beta1/lib /opt/pgsql9.3beta1/bin/pg_ctl stop -m fast -D /pgdata2099  
```  
9\. 运行pg_upgrade(注意必须运行新版的pg_upgrade)  
9\.1 检查, 但不执行更新. pg_upgrade需要在当前目录存放日志文件, 所以当前目录要有写权限  
```  
mkdir upgrade_test  
cd upgrade_test  
uptest@db-172-16-3-33-> LD_LIBRARY_PATH=/opt/pgsql9.3beta1/lib /opt/pgsql9.3beta1/bin/pg_upgrade -c -b /opt/pgsql9.0beta2/bin -B /opt/pgsql9.3beta1/bin -d /pgdata1099 -D /pgdata2099 -p 1099 -P 2099 -u postgres -v  
```  
报错 :   
```  
Checking for presence of required libraries                 fatal  
Your installation references loadable libraries that are missing from the  
new installation.  You can add these libraries to the new installation,  
or remove the functions using them from the old installation.  A list of  
problem libraries is in the file:  
    loadable_libraries.txt  
Failure, exiting  
"/opt/pgsql9.3beta1/bin/pg_ctl" -w -D "/pgdata2099" -o "" -m fast stop >> "pg_upgrade_server.log" 2>&1  
```  
查看导致错误的模块详细信息 :   
```  
uptest@db-172-16-3-33-> less loadable_libraries.txt  
Could not load library "$libdir/rtpostgis-2.0"  
ERROR:  could not load library "/opt/pgsql9.3beta1/lib/rtpostgis-2.0.so": libgdal.so.1: cannot open shared object file: No such file or directory  
Could not load library "$libdir/postgis-2.0"  
ERROR:  could not load library "/opt/pgsql9.3beta1/lib/postgis-2.0.so": libgeos_c.so.1: cannot open shared object file: No such file or directory  
```  
指定LD_LIBRARY_PATH后, 报错变了:  
```  
LD_LIBRARY_PATH=/opt/pgsql9.3beta1/lib:/opt/postgis-2.0.3-for9.3/lib:/opt/gdal-1.10.0/lib:/opt/geos-3.3.8/lib:/opt/json-c-git20130520/lib:/opt/proj-4.8.0/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib /opt/pgsql9.3beta1/bin/pg_upgrade -c -b /opt/pgsql9.0beta2/bin -B /opt/pgsql9.3beta1/bin -d /pgdata1099 -D /pgdata2099 -p 1099 -P 2099 -u postgres -v  
```  
依旧报错 :   
```  
uptest@db-172-16-3-33-> less loadable_libraries.txt   
Could not load library "$libdir/postgis-2.0"  
ERROR:  could not load library "/opt/pgsql9.3beta1/lib/postgis-2.0.so": /opt/pgsql9.3beta1/lib/postgis-2.0.so: undefined symbol: GETSTRUCT  
```  
发现这个函数GETSTRUCT在geometry_estimate.c中调用.由于9.3修改了对应的头文件, 所以重新包含以下.  
```  
vi /opt/soft_bak/postgis-2.0.3/postgis/geometry_estimate.c  
#if POSTGIS_PGSQL_VERSION >= 93  
  #include "access/htup_details.h"  
#endif  
PostgreSQL 9.3的GETSTRUCT macro定义如下 :   
src/include/access/htup_details.h  
/*  
 * GETSTRUCT - given a HeapTuple pointer, return address of the user data  
 */  
#define GETSTRUCT(TUP) ((char *) ((TUP)->t_data) + (TUP)->t_data->t_hoff)  
```  
重新编译即可.  
```  
cd /opt/soft_bak/postgis-2.0.3  
gmake  
gmake install  
```  
重新执行  
```  
LD_LIBRARY_PATH=/opt/pgsql9.3beta1/lib:/opt/postgis-2.0.3-for9.3/lib:/opt/gdal-1.10.0/lib:/opt/geos-3.3.8/lib:/opt/json-c-git20130520/lib:/opt/proj-4.8.0/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib /opt/pgsql9.3beta1/bin/pg_upgrade -c -b /opt/pgsql9.0beta2/bin -B /opt/pgsql9.3beta1/bin -d /pgdata1099 -D /pgdata2099 -p 1099 -P 2099 -u postgres -v  
```  
通过.  
```  
*Clusters are compatible*  
```  
## 三. 升级  
建议执行升级前, 先备份一下老版本的数据库, 表空间以及xlog. 便于回滚. 可以打开归档来备份, 减少停机时间.  
升级把上面的-c参数去掉就可以了.   