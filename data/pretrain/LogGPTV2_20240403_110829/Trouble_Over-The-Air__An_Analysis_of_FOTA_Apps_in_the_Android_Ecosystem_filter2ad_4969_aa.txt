title:Trouble Over-The-Air: An Analysis of FOTA Apps in the Android Ecosystem
author:Eduardo Bl&apos;azquez and
Sergio Pastrana and
&apos;Alvaro Feal and
Julien Gamba and
Platon Kotzias and
Narseo Vallina-Rodriguez and
Juan Tapiador
5
9
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Trouble Over-The-Air: An Analysis of FOTA Apps in the Android Ecosystem
Eduardo Blázquez†, Sergio Pastrana†, Álvaro Feal∗†, Julien Gamba∗†, Platon Kotzias‡, Narseo Vallina-Rodriguez∗§ and Juan Tapiador†
∗IMDEA Networks Institute, †Universidad Carlos III de Madrid, ‡NortonLifelock Research Group, §ICSI
Abstract—Android ﬁrmware updates are typically managed by
the so-called FOTA (Firmware Over-the-Air) apps. Such apps
are highly privileged and play a critical role in maintaining
devices secured and updated. The Android operating system
offers standard mechanisms—available to Original Equipment
Manufacturers (OEMs)—to implement their own FOTA apps
but such vendor-speciﬁc implementations could be a source of
security and privacy issues due to poor software engineering
practices. This paper performs the ﬁrst large-scale and systematic
analysis of the FOTA ecosystem through a dataset of 2,013
FOTA apps detected with a tool designed for this purpose over
422,121 pre-installed apps. We classify the different stakeholders
developing and deploying FOTA apps on the Android update
ecosystem, showing that 43% of FOTA apps are developed by
third parties. We report that some devices can have as many
as 5 apps implementing FOTA capabilities. By means of static
analysis of the code of FOTA apps, we show that some apps
present behaviors that can be considered privacy intrusive, such
as the collection of sensitive user data (e.g., geolocation linked
to unique hardware identiﬁers), and a signiﬁcant presence of
third-party trackers. We also discover implementation issues
leading to critical vulnerabilities, such as the use of public
AOSP test keys both for signing FOTA apps and for update
veriﬁcation, thus allowing any update signed with the same key
to be installed. Finally, we study telemetry data collected from
real devices by a commercial security tool. We demonstrate that
FOTA apps are responsible for the installation of non-system
apps (e.g., entertainment apps and games), including malware
and Potentially Unwanted Programs (PUP). Our ﬁndings suggest
that FOTA development practices are misaligned with Google’s
recommendations.
I. INTRODUCTION
Android is now the most used operating system ever, with
over 2.5 billion active Android devices [25] and a global
market share of over 40% [21]. Part of Android’s success
is due to the openness of the platform, which allows any
device manufacturer to customize and deploy their own Android
version. Paradoxically, this open model has resulted in a poorly
understood ecosystem of actors that play key roles at different
stages of the Android supply chain [43]. This model has also
accentuated platform fragmentation problems despite Google’s
efforts for harmonization [4]: millions of devices got stuck on
outdated and no-longer supported Android versions [53], [58].
Platform updates are a particularly critical and highly
privileged element of the Android ecosystem. Once a patch
or a new Android version is released, each vendor needs to
ship it over-the-air to their userbase. A FOTA (Firmware-Over-
The-Air) app is the software responsible for downloading and
applying these updates on the device, receiving this name from
the way in which ﬁrmware updates are shipped. Traditionally,
device vendors have been named responsible for applying
system updates (including security patches) because they are
technically the ones that build the operating system after
customizing the Android Open Source Project (AOSP) code
maintained by Google. In truth however, updates are often
delegated to third- and even fourth-party services in the Android
ecosystem. This state-of-affairs not only accentuates platform
fragmentation, but also opens the ground for potential abuse
if appropriate supervisory mechanisms are not in place. As a
result of their privileged position, an attacker (or a deceptive
FOTA provider or partner) could install potentially harmful
system-level components over a large userbase, as it has already
occurred in desktop platforms [16].
In Android, there is anecdotal evidence of at least one so-
called FOTA app being used to distribute potentially harmful
apps. This was the case of Adups [19], [47], a Chinese wireless
update service provider offering support to millions of low-cost
Android vendors, which was reported as spyware. However,
the system update components in Android devices have been
largely overlooked by the research community. To ﬁll this
gap, this paper studies in depth the software responsible for
the platform update process across Android devices and the
ecosystem of FOTA providers offering such services worldwide.
In this paper, we perform the ﬁrst systematic analysis of
Android FOTA components at scale. We characterize the
underlying FOTA supply chain, and the privacy and security
risks of these components. We focus on those providers making
use of the standard capabilities offered by AOSP to implement
FOTA components. We rely on the dataset of pre-installed
applications collected by Gamba et al. [43] for our analysis.
As of June 2020, this dataset contains 422,121 pre-installed apps
collected from 40,165 users worldwide and covering 12,539
different devices. We extend the coverage due to the analysis of
compiled DEX ﬁles (ODEX), and also complement this dataset
with reputation logs and installation telemetry offered by a
major security ﬁrm, NortonLifeLock. Our analysis leverages
this dataset to make the following contributions aimed at better
understanding the Android FOTA ecosystem:
• We develop a tool for automatic detection of apps implement-
ing FOTA capabilities. This tool is based on code features
and signatures extracted from ofﬁcial Android documentation,
enhanced with a manual inspection of 18 FOTA apps from
main Original Equipment Manufacturers (OEM) vendors
and well-known third-party FOTA providers (§IV). This
process allows us to obtain 4 main signals to detect FOTA
components, and 11 secondary ones related to additional
installation capabilities, with each signal showing varying
levels of conﬁdence. We also design a helper tool to recover
DEX ﬁles from ODEX binaries, since many of the pre-
installed apps present in the dataset are in this format.
We automatically discover and classify 2,013 FOTA apps
deployed in real-world devices. A signiﬁcant number of these
have dual behavior as they can (silently) install both system
© 2021, Eduardo Blázquez. Under license to IEEE.
DOI 10.1109/SP40001.2021.00095
1606
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
and non system apps. Upon manual veriﬁcation, we ﬁnd no
false positives (i.e., wrongfully detected FOTA apps).
• We study the developer ecosystem behind FOTA apps to
draw a picture of its supply chain. We observe that FOTA
providers can be classiﬁed in four different categories: (i)
OEMs, (ii) Mobile Network Operators (MNO), (iii) System
On Chip (SoC), and (iv) Specialized FOTA Developers (SFD)
(§V). We ﬁnd that 43% of FOTA apps are developed by a
third party and that there are generally multiple apps with
FOTA capabilities in a single device, with some devices
having as many as 5 FOTA-enabled apps. We also ﬁnd a
critical security issue: 40 FOTAs (in devices from 20 brands)
are signed with test-keys part of the AOSP, thus allowing
any app signed with the same key to gain system privileges.
• We statically analyze each discovered FOTA to identify poten-
tial security and privacy threats (§VI). We ﬁnd the presence
of social networks, advertising or tracking SDKs in 10% of
the FOTA apps analyzed. We also observe potentially privacy-
intrusive behaviors such as the sharing of GPS-level location
data and unique device identiﬁers with online servers. Some
FOTA apps use their own SharedUserID, thus allowing any
app from the same developer to gain the privileges and
permissions from the FOTA component. A common bad
coding practice is the lack of veriﬁcation of the downloaded
updates, thus going against Google’s recommendation. We
also discover another critical vulnerability: 5% of the 1,747
devices where we ﬁnd an otacerts.zip ﬁle (which lists
the entities that can ship uploads) contain an AOSP default
key, thus accepting any update signed with the same key.
• We complement our static analysis with telemetry data from
a security vendor, NortonLifeLock, to analyze the behavior
of FOTA apps in the wild (§VII). We conﬁrm that FOTA
apps, in addition to system updates, are used for secondary
or commercial purposes—possibly for promoting third-party
apps. We also ﬁnd FOTA apps distributing unwanted apps,
mostly Potentially Unwanted Programs (PUP). We detect that
92% of the apps installed by one FOTA app are malware.
Our ﬁndings conﬁrm that FOTA apps might constitute
an overlooked vector for security and privacy incidents. We
consider this particularly critical because of its impact over a
very large user base, as some FOTAs deliver updates to tens
of millions of devices worldwide. We reported our ﬁndings to
Google and the main vendors involved, and make our tools [11],
[14] and aggregated dataset [5] available to the community.
II. ANDROID SYSTEM UPDATES
In Android, system update capabilities are implemented by
a privileged system component called the Firmware Over-The-
Air (FOTA) app. Android has supported various mechanisms
to update pre-installed software and other system- or vendor-
speciﬁc components stored in the system partition. These
mechanisms have evolved as new OS versions were released,
but all of them rely on modifying the (otherwise) read-only
system partition. While Android offers standard mechanisms,
some OEMs implement their own ad-hoc implementations via
custom vendor libraries and other privileged apps. There is
not a clear set of rules that a FOTA app must follow. Google
provides recommendations of the steps to follow in the update
process [3], [20]: (1) retrieving update information from the
update server (i.e., description and URL of the update zip ﬁle);
(2) downloading the update package; (3) verifying the package;
(4) installing the update; and (5) rebooting the device into the
new system. This section provides a historical overview and a
description of the system update mechanisms implemented in
the ofﬁcial AOSP.
A. Recovery system updates
This update process uses the Android recovery partition and
starts by downloading a zip ﬁle from the update server. This
zip ﬁle includes a patch script with the update instructions,
a binary interpreter for the update ﬁle called update_binary
(based on a template from AOSP [9]), additional ﬁles to be
added to the system, a metadata ﬁle, and (optionally) a ﬁle
with an updated set of signing keys. This is the recommended
mechanism for devices running Android versions up to 7.0 to
perform system updates [38], [50], as well as newer devices
without two system partitions (see §II-B). For security reasons,
the update ﬁle must be signed with the provider’s key, which
is later checked against the system OTA certiﬁcates stored in
the otacerts.zip ﬁle by the system update API. The owners
of the certiﬁcates included in otacerts.zip can thus install
system packages as part of the update process.
developers
the
RecoverySystem library [6] that implements this process. The
library implements two key functions, (i) verifyPackage()
which veriﬁes the downloaded zip’s signature against the
certiﬁcates in otacerts.zip; and (ii) installPackage(),
which calls
into the
bootloader control block. Developers may not use this
library and perform installations by writing directly into
/cache/recovery/command. In both cases, simple commands
(e.g., --update_package or --wipe_data ) are written for
recovery to apply requested changes once device is rebooted.
the recovery service and writes
FOTA
Android
provides
with
B. A/B seamless system updates
Android 7.0 introduced a new update mechanism known as
A/B system updates or, simply, seamless updates. This method
uses two separate disk partitions or slots: one where the system
currently runs, called the current slot; and an unused slot, which
is modiﬁed during the update process. Each slot has a number
of attributes. The active attribute deﬁnes the slot from which
the device can boot. After the update, the unused slot becomes
active and, upon reboot, the bootloader will try to boot from it.
If booting succeeds, an Android daemon called update_veriﬁer
marks the current active slot as successful.
This update process aims to ensure that there is always a
workable booting system on disk during the update process.
Thus, if the bootloader is not able to boot the new version,
it can roll back to the old one. Another advantage is the
possibility of updating the system while it is running, thus
improving the usability. Finally, this process also allows for
a streaming update where patches are applied directly to
a partition while downloading, so no cache or extra data
space is needed. The UpdateEngine class [2] provides the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1607
API for seamless updates. The applyPayload() method
interfaces with the update_engine Android daemon [1], which
effectively applies the update and uses the boot_control HAL
(Hardware Abstraction Layer) interface to reboot the device.
C. Projects Treble and Mainline
Device vendors are traditionally responsible for system
updates. However, many vendors have not been able to ship
updates at a reasonable pace, resulting in a substantial number
of outdated and unpatched Android versions [53]. Google has
recently put forward two initiatives to alleviate the problems
for vendors to adapt their code to AOSP and improve the
distribution of updates. Project Treble [17], announced in 2017,
tries to help vendors to build their own Android version from
a new AOSP release by separating customized vendor software
(provided by silicon manufacturers and other vendor-speciﬁc
suppliers) from the core Android OS framework. Additionally,
Project Mainline [15], launched in 2019 on top of Project
Treble, allows to update core OS components through Google
Play, similar to app updates. This allow critical security updates
to be delivered without intervention from the manufacturer.
These mechanisms improves devices’ security by reducing
the time it takes to push an update. Furthermore, FOTA apps
would no longer be needed for applying patches in AOSP
code. Still, studying the ecosystem of FOTA apps is important
and necessary, as these are needed for deploying HAL and
vendors-speciﬁc updates. Also, only a few of Google’s certiﬁed
vendors (devices that passed a series of tests and fulﬁll a set
of requirements [70]) implement this update mechanism at
the time of this writing [15] (see Appendix A). FOTA apps