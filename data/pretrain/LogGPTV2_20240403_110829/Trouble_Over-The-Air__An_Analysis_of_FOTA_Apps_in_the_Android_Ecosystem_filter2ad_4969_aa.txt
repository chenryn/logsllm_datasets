# Trouble Over-The-Air: An Analysis of FOTA Apps in the Android Ecosystem

**Authors:**
- Eduardo Blázquez†
- Sergio Pastrana†
- Álvaro Feal∗†
- Julien Gamba∗†
- Platon Kotzias‡
- Narseo Vallina-Rodriguez∗§
- Juan Tapiador†

**Affiliations:**
- ∗IMDEA Networks Institute
- †Universidad Carlos III de Madrid
- ‡NortonLifelock Research Group
- §ICSI

**Abstract:**
Firmware Over-the-Air (FOTA) apps are critical for managing Android firmware updates, ensuring device security and maintenance. While the Android operating system provides standard mechanisms for Original Equipment Manufacturers (OEMs) to implement their own FOTA apps, vendor-specific implementations can introduce security and privacy issues due to poor software engineering practices. This paper presents the first large-scale and systematic analysis of the FOTA ecosystem, using a dataset of 2,013 FOTA apps detected across 422,121 pre-installed apps. We classify the stakeholders developing and deploying FOTA apps, revealing that 43% are developed by third parties. Some devices have up to five FOTA apps. Our static analysis reveals privacy-intrusive behaviors, such as the collection of sensitive user data and the presence of third-party trackers. We also identify critical vulnerabilities, including the use of public AOSP test keys for signing FOTA apps and update verification, which allows any update signed with the same key to be installed. Additionally, we analyze telemetry data from real devices, showing that FOTA apps are responsible for installing non-system apps, including malware and Potentially Unwanted Programs (PUPs). Our findings suggest that FOTA development practices often deviate from Google’s recommendations.

## I. Introduction

Android is the most widely used operating system, with over 2.5 billion active devices and a global market share exceeding 40%. The platform's success is partly due to its openness, allowing device manufacturers to customize and deploy their own Android versions. However, this open model has led to a fragmented ecosystem, with many devices running outdated and unsupported Android versions. Platform updates are a critical and highly privileged element of the Android ecosystem. Once a patch or new Android version is released, vendors must ship it over-the-air to their users. FOTA (Firmware-Over-The-Air) apps are responsible for downloading and applying these updates. Traditionally, device vendors have been responsible for applying system updates, but this task is often delegated to third- and fourth-party services, leading to potential security and privacy risks. 

There is anecdotal evidence of FOTA apps being used to distribute harmful applications, such as the case of Adups, a Chinese wireless update service provider. To address this gap, this paper conducts an in-depth analysis of FOTA components and the ecosystem of FOTA providers. We use a dataset of 422,121 pre-installed apps collected from 40,165 users worldwide, covering 12,539 different devices. Our analysis includes compiled DEX files (ODEX) and complements the dataset with reputation logs and installation telemetry from NortonLifeLock. Our contributions include:

- **Automatic Detection Tool:** We develop a tool for detecting FOTA apps based on code features and signatures from official Android documentation, enhanced with a manual inspection of 18 FOTA apps from major OEMs and third-party providers. This tool identifies 2,013 FOTA apps with no false positives.
- **Supply Chain Analysis:** We classify FOTA providers into four categories: OEMs, Mobile Network Operators (MNOs), System on Chip (SoC) providers, and Specialized FOTA Developers (SFDs). We find that 43% of FOTA apps are developed by third parties, and some devices have up to five FOTA apps. We also identify a critical security issue where 40 FOTA apps are signed with AOSP test keys, allowing any app signed with the same key to gain system privileges.
- **Static Analysis:** We analyze each discovered FOTA app for potential security and privacy threats. We find that 10% of FOTA apps include social networks, advertising, or tracking SDKs. We also observe privacy-intrusive behaviors, such as sharing GPS-level location data and unique device identifiers with online servers. Some FOTA apps use their own SharedUserID, allowing other apps from the same developer to gain FOTA privileges. We also discover that 5% of 1,747 devices contain an AOSP default key, accepting any update signed with the same key.
- **Telemetry Data Analysis:** We use telemetry data from NortonLifeLock to confirm that FOTA apps are used for secondary or commercial purposes, such as promoting third-party apps. We also find that FOTA apps distribute unwanted apps, mostly PUPs, and detect that 92% of the apps installed by one FOTA app are malware.

Our findings highlight that FOTA apps may be an overlooked vector for security and privacy incidents, particularly given their impact on a large user base. We reported our findings to Google and the main vendors involved, and made our tools and aggregated dataset available to the community.

## II. Android System Updates

In Android, system update capabilities are implemented by a privileged system component called the Firmware Over-The-Air (FOTA) app. Android supports various mechanisms to update pre-installed software and system- or vendor-specific components stored in the system partition. These mechanisms have evolved with new OS versions, but all rely on modifying the read-only system partition. While Android offers standard mechanisms, some OEMs implement their own ad-hoc solutions via custom vendor libraries and other privileged apps. Google provides recommendations for the update process, including retrieving update information, downloading the update package, verifying the package, installing the update, and rebooting the device.

### A. Recovery System Updates

This update process uses the Android recovery partition and involves downloading a zip file from the update server. The zip file includes a patch script, an update_binary interpreter, additional system files, a metadata file, and optionally, an updated set of signing keys. This mechanism is recommended for devices running Android versions up to 7.0 and newer devices without two system partitions. For security, the update file must be signed with the provider’s key, which is verified against the system OTA certificates stored in the otacerts.zip file. The RecoverySystem library implements this process, providing functions to verify the downloaded zip’s signature and install the package.

### B. A/B Seamless System Updates

Introduced in Android 7.0, A/B seamless updates use two separate disk partitions: the current slot, where the system runs, and an unused slot, modified during the update process. After the update, the unused slot becomes active, and if booting fails, the bootloader rolls back to the old slot. This process ensures a workable booting system during updates, improves usability, and allows for streaming updates. The UpdateEngine class provides the API for seamless updates, interfacing with the update_engine daemon to apply the update and reboot the device.

### C. Projects Treble and Mainline

Traditionally, device vendors are responsible for system updates, but many have struggled to keep pace, resulting in outdated and unpatched Android versions. Google has introduced Project Treble and Project Mainline to improve the distribution of updates. Project Treble separates customized vendor software from the core Android OS framework, while Project Mainline allows updating core OS components through Google Play, similar to app updates. These initiatives reduce the time to push updates and eliminate the need for FOTA apps for AOSP code patches. However, FOTA apps remain important for deploying HAL and vendor-specific updates. Only a few certified vendors currently implement these update mechanisms.

**Keywords:** Android, FOTA, Security, Privacy, Firmware Updates, Supply Chain, Third-Party Apps, Malware, PUPs

**DOI:** 10.1109/SP40001.2021.00095

**Authorized licensed use limited to: Tsinghua University. Downloaded on February 25, 2022, at 12:11:06 UTC from IEEE Xplore. Restrictions apply.**

---

This optimized version aims to make the text more coherent, clear, and professional, while maintaining the original content and structure.