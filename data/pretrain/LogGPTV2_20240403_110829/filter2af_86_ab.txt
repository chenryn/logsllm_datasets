    class Demo {
        private $file = 'Gu3ss_m3_h2h2.php';
        public function __construct($file) {
            $this->file = $file;
        }
        function __destruct() {
            echo @highlight_file($this->file, true);
        }
        function __wakeup() {
            if ($this->file != 'Gu3ss_m3_h2h2.php') {
                //the secret is in the f15g_1s_here.php
                $this->file = 'Gu3ss_m3_h2h2.php';
            }
        }
    }
    #先创建一个对象，自动调用__construct魔法函数
    $obj = new Demo('f15g_1s_here.php');
    #进行序列化
    $a = serialize($obj);
    #使用str_replace() 函数进行替换，来绕过正则表达式的检查
    $a = str_replace('O:4:','O:+4:',$a);
    #使用str_replace() 函数进行替换，来绕过__wakeup()魔法函数
    $a = str_replace(':1:',':2:',$a);
    #再进行base64编码
    echo base64_encode($a);
    ?>
将得到的参数传入即可得到另一段代码，这里主要学习反序列化的知识，后面的就不再写了。
## 0x05:session反序列化攻击
先来了解一下关于`session`的一些基础知识
#### 什么是session
> 在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web
> 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web
> 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。
#### session是如何起作用的
> 当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session
> ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session
> ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion
> ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session
> ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。
除此之外，还需要知道`session_start()`这个函数已经这个函数所起的作用：
> 当会话自动开始或者通过 session_start() 手动开始的时候， PHP
> 内部会依据客户端传来的PHPSESSID来获取现有的对应的会话数据（即session文件）， PHP
> 会自动反序列化session文件的内容，并将之填充到 $_SESSION
> 超级全局变量中。如果不存在对应的会话数据，则创建名为sess_PHPSESSID(客户端传来的)的文件。如果客户端未发送PHPSESSID，则创建一个由32个字母组成的PHPSESSID，并返回set-> cookie。
了解了有关`session`的概念后，还需要了解`php.ini`中一些`Session`配置
    session.save_path="" --设置session的存储路径
    session.save_handler=""--设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)
    session.auto_start boolen--指定会话模块是否在请求开始时启动一个会话默认为0不启动
    session.serialize_handler string--定义用来序列化/反序列化的处理器名字。默认使用php
这里我是在Windows上搭建的所以显示的路径为D盘，如果是在Linux上搭建的话，常见的`php-session`存放位置有：
    /var/lib/php5/sess_PHPSESSID
    /var/lib/php7/sess_PHPSESSID
    /var/lib/php/sess_PHPSESSID
    /tmp/sess_PHPSESSID
    /tmp/sessions/sess_PHPSESSED
想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的  
参考l3m0n师傅的表  
这个便是在相应的处理器处理下，`session`所存储的格式，这里举个例子来了解一下在不同的处理器下，session所储存的格式有什么不一样(测试的时候php版本一定要大于
**5.5.4** ，不然session写不进文件))
    ";
    var_dump($_SESSION);
    echo "";
比如这里我get进去一个值为shy,查看一下各个存储格式：
    php : lemon|s:3:"shy";
    php_serialize : a:1:{s:5:"lemon";s:3:"shy";}
    php_binary : lemons:3:"shy";
这有什么问题，其实PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。如：使用不同引擎来处理session文件。
#### 使用不同的引擎来处理session文件
php引擎的存储格式是`键名 |
serialized_string`，而php_serialize引擎的存储格式是`serialized_string`。如果程序使用两个引擎来分别处理的话就会出现问题。
下面就模仿师傅的操作学习一下  
先以`php_serialize`的格式存储，从客户端接收参数并存入`session`变量  
**(1.php)**  
接下来使用`php`引擎读取session文件  
**(2.php)**  
**攻击思路：**  
首先访问`1.php`，在传入的参数最开始加一个`'|'`，由于`1.php`是使用`php_serialize`引擎处理，因此只会把`'|'`当做一个正常的字符。然后访问`2.php`，由于用的是`php`引擎，因此遇到`'|'`时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析session文件时直接对`'|'`后的值进行反序列化处理。
这里可能会有一个小疑问，为什么在解析session文件时直接对`'|'`后的值进行反序列化处理，这也是处理器的功能？这个其实是因为`session_start()`这个函数，可以看下官方说明：  
首先生成一个 **payload** ：
    nage =  "hacker";
        $a->age = "1111";
        echo serialize($a);
攻击思路中说到了因为不同的引擎会对`'|'`，产生歧义，所以在传参时在payload前加个`'|'`，作为a参数，访问`1.php`,查看一下本地session文件，发现payload已经存入到`session`文件  
`php_serialize`引擎传入的payload作为lemon对应值，而`php`则完全不一样：  
访问一下`2.php`看看会有什么结果  
成功触发了student类的`__wakeup()`方法,所以这种攻击思路是可行的。但这种方法是在可以对`session`的进行赋值的，那如果代码中不存在对`$_SESSION`变量赋值的情况下又该如何利用
#### 没有$_SESSION变量赋值
在`PHP`中还存在一个`upload_process`机制，即自动在`$_SESSION`中创建一个 **键值对** ，值中刚好存在
**用户可控的部分** ，可以看下官方描述的，这个功能在文件上传的过程中利用`session`实时返回上传的进度。  
但第一次看到真的有点懵，这该怎么去利用，看了大师傅的博客才明白，这种攻击方法与上一部分基本相同，不过这里需要先上传文件，同时`POST`一个与`session.upload_process.name`的同名变量。后端会自动将`POST`的这个
**同名变量作为键** 进行 **序列化** 然后存储到`session`文件中。下次请求就会 **反序列化session文件**
，从中取出这个键。所以攻击点还是跟上一部分一模一样，程序还是使用了不同的 **session** 处理引擎。
实践一下，可以来看一道ctf题目
**Jarvis OJ——PHPINFO**
当我们随便传入一个值时，便会触发`__construct()`魔法函数，从而出现`phpinfo`页面，在phpinfo页面发现
发现默认的引擎是`php-serialize`，而题目所使用的引擎是php，因为反序列化和序列化使用的处理器不同，由于格式的原因会导致数据无法正确反序列化，那么就可以通过构造伪造任意数据。
观察代码会发现这段代码是没有`$_SESSION`变量赋值但符合使用不同的引擎来处理session文件，所以这里就使用到了php中的`upload_process`机制。
通过`POST`方法来构造数据传入`$_SESSION`，首先构造`POST`提交表单
接下来构造序列化payload
将payload改为如下代码：
    print_r(scandir(dirname(__FILE__)));
    #scandir目录中的文件和目录
    #dirname函数返回路径中的目录部分
    #__FILE__   php中的魔法常量,文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名
    #序列化后的结果
    O:5:"OowoO":1:{s:4:"mdzz";s:36:"print_r(scandir(dirname(__FILE__)));";}
为防止双引号被转义，在双引号前加上`\`，除此之外还要加上`|`
    |O:5:\"OowoO\":1:{s:4:\"mdzz\";s:36:\"print_r(scandir(dirname(__FILE__)));\";}
在这个页面随便上传一个文件，然后抓包修改filename的值  
可以看到`Here_1s_7he_fl4g_buT_You_Cannot_see.php`这个文件，flag肯定在里面，但还有一个问题就是不知道这个路径，路径的问题就需要回到phpinfo页面去查看  
    $_SERVER['SCRIPT_FILENAME'] 也是包含当前运行脚本的路径，与 $_SERVER['SCRIPT_NAME'] 不同的是，这是服务器端的绝对路径。
既然知道了路径，就继续构造payload即可
    print_r(file_get_contents("/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php"));
    #file_get_contents() 函数把整个文件读入一个字符串中。
接下来的就还是序列化然后改一下格式传入即可，后面的就不再写了
## 总结：
通过这次的学习，真的学到了很多关于反序列化的知识！
**参考博客：**  
[PHP反序列化漏洞与Webshell](http://xz.aliyun.com/t/2202)  
[实战经验丨PHP反序列化漏洞总结 ](http://www.freebuf.com/column/197496.html)  
[PHP-Session利用总结](http://zhuanlan.zhihu.com/p/90879209)  
[关于PHP中的SESSION技术](http://www.cnblogs.com/privateWa/p/8832450.html)  
[l3m0n](http://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html)  
[php session序列化攻击面浅析](http://www.cnblogs.com/litlife/p/10748506.html)