        read_trace_pipe();
    }
###  load_bpf_file()源码分析
`load_bpf_file()`会直接进入`do_load_bpf_file()`
    int load_bpf_file(char *path)
    {
        return do_load_bpf_file(path, NULL);
    }
`do_load_bpf_file()`的加载ELF格式的目标文件后, 会进行三次扫描, 第一次扫描证书与映射相关的段.
第二次扫描为BPF映射重写某些BPF指令, 第三次扫描则为了加载BPF程序. 我们重点关注第三次的
    static int do_load_bpf_file(const char *path, fixup_map_cb fixup_map)
    {
        int fd, i, ret, maps_shndx = -1, strtabidx = -1;
        Elf *elf;
        GElf_Ehdr ehdr;
        GElf_Shdr shdr, shdr_prog;
        Elf_Data *data, *data_prog, *data_maps = NULL, *symbols = NULL;
        char *shname, *shname_prog;
        int nr_maps = 0;
        /* reset global variables */
        kern_version = 0;
        memset(license, 0, sizeof(license));
        memset(processed_sec, 0, sizeof(processed_sec));
        if (elf_version(EV_CURRENT) == EV_NONE)
            return 1;
            //打开文件
        fd = open(path, O_RDONLY, 0);
        if (fd d_buf,data->d_size);
                if (ret != 0)
                    goto done;
            }
        }
    ...;
    }
对于`load_and_attach()`, `do_load_bpf_file()`传入的段名就是要附着的事件名, 段中的内容就是eBPF指令数组,
段的长度就是以字节为单位的BPF程序的长度.
`load_and_attach()`首先根据段名解析出段的类型, 并调用`bpf_load_program()`把BPF程序注入内核, 这个在之前已经说过
    static int load_and_attach(const char* event, struct bpf_insn* prog, int size)
    {
        //首先判断是哪种事件类型
        bool is_socket = strncmp(event, "socket", 6) == 0;
        bool is_kprobe = strncmp(event, "kprobe/", 7) == 0;
        bool is_kretprobe = strncmp(event, "kretprobe/", 10) == 0;
        bool is_tracepoint = strncmp(event, "tracepoint/", 11) == 0;    //对本BPF程序属于这种
        ...;
        //计算有多少条指令
        size_t insns_cnt = size / sizeof(struct bpf_insn);
        enum bpf_prog_type prog_type;
        char buf[256];
        int fd, efd, err, id;
        //设置要观测事件的属性
        struct perf_event_attr attr = {};
        attr.type = PERF_TYPE_TRACEPOINT; //默认为追踪点
        attr.sample_type = PERF_SAMPLE_RAW;
        attr.sample_period = 1; //每次触发都取样
        attr.wakeup_events = 1; //每次取样都触发
        //根据事件类型设置prog_type变量, 之后进行bpf系统调用加载程序时会用到
        if (is_socket) {
            prog_type = BPF_PROG_TYPE_SOCKET_FILTER;
        } else if (is_kprobe || is_kretprobe) {
            prog_type = BPF_PROG_TYPE_KPROBE;
        } else if (is_tracepoint) {    //对本BPF程序属于这种
            prog_type = BPF_PROG_TYPE_TRACEPOINT;
        } else if (is_raw_tracepoint) {
            ...
        } else {
            printf("Unknown event '%s'\n", event);
            return -1;
        }
        ...
        //进行bpf系统调用, 把BPF程序加载如内核中
        fd = bpf_load_program(prog_type, prog, insns_cnt, license, kern_version, bpf_log_buf, BPF_LOG_BUF_SIZE);
接下来`load_and_attach()`根据段名中要观测的事件, 通过debugfs获取跟踪点的id, 这一步在例2中是手动完成的
        //根据要观测事件, 构造debugfs路径, 获取事件的id
        if (is_kprobe || is_kretprobe) {
            ...;
        } else if (is_tracepoint) {
            //bpf.o中bpf_prog()函数所在段名为"tracepoint/syscalls/sys_enter_execve", 这是为了跳过前缀"tracepoint/"
            event += 11;  
            if (*event == 0) {
                printf("event name cannot be empty\n");
                return -1;
            }
            strcpy(buf, DEBUGFS);    //DEBUGFS为:"/sys/kernel/debug/tracing/"
            strcat(buf, "events/");  //buf = "/sys/kernel/debug/tracing/events"
            strcat(buf, event);      //buf = "/sys/kernel/debug/tracing/events/syscalls/sys_enter_execve"
            strcat(buf, "/id");      //buf = "/sys/kernel/debug/tracing/events/syscalls/sys_enter_execve/id"
        }
        efd = open(buf, O_RDONLY, 0);   //打开debugfs中获取跟踪点对应的文件
        if (efd = sizeof(buf)) {
            printf("read from '%s' failed '%s'\n", event, strerror(errno));
            return -1;
        }
        close(efd);
        //用跟踪点id设置事件属性的config
        buf[err] = 0;
        id = atoi(buf);
        attr.config = id;
接下来调用`perf_event_open()`打开要观测事件, 启动后把BPF程序附着上去, 这样当事件被触发时就会调用对应的BPF程序
        efd = sys_perf_event_open(&attr, -1 /*pid*/, 0 /*cpu*/, -1 /*group_fd*/, 0);    //打开观测事件的fd
        ...;
        err = ioctl(efd, PERF_EVENT_IOC_ENABLE, 0); //启动此观测事件
        ...;
        err = ioctl(efd, PERF_EVENT_IOC_SET_BPF, fd);   //把对应BPF程序附着到观测的事件上
        ...;
        return 0;
    }
###  read_trace_pipe()源码分析
`read_trace_pipe()`就简单许多, 循环打印内核跟踪日志`/sys/kernel/debug/tracing/trace_pipe`
    void read_trace_pipe(void)
    {
        int trace_fd;
        trace_fd = open(DEBUGFS "trace_pipe", O_RDONLY, 0); //打开/sys/kernel/debug/tracing/trace_pipe文件
        if (trace_fd  0) {
                buf[sz] = 0;
                puts(buf);
            }
        }
    }
###  总结
我们可以发现, HelloWorld程序中引入的`bpf_load.c`不过是把我们之前手动的一些操作自动化, 其原理仍为: **编译BPF指令,
bpf()把BPF程序加载入内核, perf_event_open()挂载BPF程序到具体事件**. 令人劝退的HelloWorld页不再劝退
至此我们已经自底向上的了解了BPF如何使用, 利用的第一步是熟悉, 接下来会进一步探究BPF虚拟机实现的原理, 为后续利用进行铺垫.