---
author: Gaurav Kamathe
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 9573
date: '2021-10-05 14:58:24'
editorchoice: false
excerpt: trace-cmd 是一个易于使用，且特性众多、可用来追踪内核函数的命令。
fromurl: https://opensource.com/article/21/7/linux-kernel-trace-cmd
id: 13852
islctt: true
largepic: /data/attachment/album/202110/05/145818d2i9tgjetzj8itqg.jpg
permalink: /article-13852-1.html
pic: /data/attachment/album/202110/05/145818d2i9tgjetzj8itqg.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 13752
reviewer: wxy
selector: lujun9972
summary: trace-cmd 是一个易于使用，且特性众多、可用来追踪内核函数的命令。
tags:
- 追踪
- 内核
thumb: false
title: 使用 trace-cmd 追踪内核
titlepic: true
translator: mengxinayan
updated: '2021-10-05 14:58:24'
---
> 
> trace-cmd 是一个易于使用，且特性众多、可用来追踪内核函数的命令。
> 
> 
> 
![](/data/attachment/album/202110/05/145818d2i9tgjetzj8itqg.jpg "Puzzle pieces coming together to form a computer screen")
在 [之前的文章](/article-13752-1.html) 里，我介绍了如何利用 `ftrace` 来追踪内核函数。通过写入和读出文件来使用 `ftrace` 会变得很枯燥，所以我对它做了一个封装来运行带有选项的命令，以启用和禁用追踪、设置过滤器、查看输出、清除输出等等。
[trace-cmd](https://lwn.net/Articles/410200/) 命令是一个可以帮助你做到这一点的工具。在这篇文章中，我使用 `trace-cmd` 来执行我在 `ftrace` 文章中所做的相同任务。由于会经常参考那篇文章，建议在阅读这篇文章之前先阅读它。
### 安装 trace-cmd
本文中所有的命令都运行在 root 用户下。
因为 `ftrace` 机制被内置于内核中，因此你可以使用下面的命令进行验证它是否启用：
```
# mount | grep tracefs
none on /sys/kernel/tracing type tracefs (rw,relatime,seclabel)
```
不过，你需要手动尝试安装 `trace-cmd` 命令：
```
# dnf install trace-cmd -y
```
### 列出可用的追踪器
当使用 `ftrace` 时，你必须查看文件的内容以了解有哪些追踪器可用。但使用 `trace-cmd`，你可以通过以下方式获得这些信息:
```
# trace-cmd list -t
hwlat blk mmiotrace function_graph wakeup_dl wakeup_rt wakeup function nop
```
### 启用函数追踪器
在我 [之前的文章](/article-13752-1.html) 中，我使用了两个追踪器，在这里我也会这么做。用 `function` 启用你的第一个追踪器:
```
$ trace-cmd start -p function
  plugin 'function'
```
### 查看追踪输出
一旦追踪器被启用，你可以通过使用 `show` 参数来查看输出。这只显示了前 20 行以保持例子的简短（见我之前的文章对输出的解释）：
```
# trace-cmd show | head -20
## tracer: function
#
# entries-in-buffer/entries-written: 410142/3380032   #P:8
#
#                                _-----=> irqs-off
#                               / _----=> need-resched
#                              | / _---=> hardirq/softirq
#                              || / _--=> preempt-depth
#                              ||| /     delay
#           TASK-PID     CPU#  ||||   TIMESTAMP  FUNCTION
#              | |         |   ||||      |         |
           gdbus-2606    [004] ..s. 10520.538759: __msecs_to_jiffies <-rebalance_domains
           gdbus-2606    [004] ..s. 10520.538760: load_balance <-rebalance_domains
           gdbus-2606    [004] ..s. 10520.538761: idle_cpu <-load_balance
           gdbus-2606    [004] ..s. 10520.538762: group_balance_cpu <-load_balance
           gdbus-2606    [004] ..s. 10520.538762: find_busiest_group <-load_balance
           gdbus-2606    [004] ..s. 10520.538763: update_group_capacity <-update_sd_lb_stats.constprop.0
           gdbus-2606    [004] ..s. 10520.538763: __msecs_to_jiffies <-update_group_capacity
           gdbus-2606    [004] ..s. 10520.538765: idle_cpu <-update_sd_lb_stats.constprop.0
           gdbus-2606    [004] ..s. 10520.538766: __msecs_to_jiffies <-rebalance_domains
```
### 停止追踪并清除缓冲区
追踪将会在后台继续运行，你可以继续用 `show` 查看输出。
要停止追踪，请运行带有 `stop` 参数的 `trace-cmd` 命令：
```
# trace-cmd stop
```
要清除缓冲区，用 `clear` 参数运行它：
```
# trace-cmd clear
```
### 启用函数调用图追踪器
运行第二个追踪器，通过 `function_graph` 参数来启用它。
```
# trace-cmd start -p function_graph
  Plugin 'function_graph'
```
再次使用 `show` 参数查看输出。正如预期的那样，输出与第一次追踪输出略有不同。这一次，它包括一个**函数调用**链：
```
# trace-cmd show | head -20
## tracer: function_graph
#
# CPU  DURATION                  FUNCTION CALLS
# |     |   |                     |   |   |   |
 4)   0.079 us    |        } /* rcu_all_qs */
 4)   0.327 us    |      } /* __cond_resched */
 4)   0.081 us    |      rcu_read_unlock_strict();
 4)               |      __cond_resched() {
 4)   0.078 us    |        rcu_all_qs();
 4)   0.243 us    |      }
 4)   0.080 us    |      rcu_read_unlock_strict();
 4)               |      __cond_resched() {
 4)   0.078 us    |        rcu_all_qs();
 4)   0.241 us    |      }
 4)   0.080 us    |      rcu_read_unlock_strict();
 4)               |      __cond_resched() {
 4)   0.079 us    |        rcu_all_qs();
 4)   0.235 us    |      }
 4)   0.095 us    |      rcu_read_unlock_strict();
 4)               |      __cond_resched() {
```
使用 `stop` 和 `clear` 命令来停止追踪和清除缓存区：
```
# trace-cmd stop
# trace-cmd clear
```
### 调整追踪以增加深度
如果你想在函数调用中看到更多的深度，你可以对追踪器进行调整：
```
# trace-cmd start -p function_graph --max-graph-depth 5
  plugin 'function_graph'
```
现在，当你将这个输出与你之前看到的进行比较时，你应该看到更多的嵌套函数调用：
```
# trace-cmd show | head -20
## tracer: function_graph
#
# CPU  DURATION                  FUNCTION CALLS
# |     |   |                     |   |   |   |