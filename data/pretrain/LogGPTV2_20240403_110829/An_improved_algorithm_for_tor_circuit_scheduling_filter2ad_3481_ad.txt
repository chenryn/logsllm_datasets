have cell counts low enough to compete with HTTP circuits.
The largest value 99 does not perform much better than
unprioritized Tor either, since for our HTTP circuit, the
behaviour will accumulate to a large cell count value and
lose priority. The other values, 10, 20, 33 and 66, seem to
be good values for our OR.
The results match our assumption: the H value only need
ensure that bulk transfer circuits will have higher cell counts
than HTTP circuits; a wide range of values can satisfy this
requirement. A value around 20 or 30 will likely satisfy most
ORs in the Tor network. A global default value can be set in
the directory authorities’ consensus, so that OR operators do
not need to manually conﬁgure it. Even if an OR operator
misconﬁgures this value, for example, by setting it to 1.5,
the performance will not be greatly harmed, as shown by
our experiment.
However, as the Internet and the Tor network evolve, dif-
ferent protocols will start to use Tor, and the traﬃc dis-
tribution will not stay constant. The parameter should be
regularly re-evaluated.
3365. EFFECTS ON HIDDEN SERVICES
6. DISCUSSION
Tor’s Hidden Services [3] mechanism allows users to pro-
vide TCP-based services, such as operating web servers,
without revealing the server’s IP address. Instead of pub-
lishing its IP address, the hidden server publishes a server
descriptor, containing a signed list of introduction points to
the directory authorities. The client downloads the descrip-
tor, connects to one of the introduction points, selects one
OR as the rendezvous point, builds a circuit to it, and tells
the hidden server the rendezvous point selected. Then the
server connects to the rendezvous point, and begins commu-
nicating with the client.
Because of the diﬀerent design goals, the underlying net-
work traﬃc for hidden services is much more complex than
for regular public services. Accessing hidden services in-
volves more than a dozen ORs and multiple rounds of nego-
tiation; as a result, it is much slower than accessing public
services through Tor.
The most time-consuming part of the process for a client
to access a hidden service is circuit creation. According to
statistics [8], the average time for hidden service circuit cre-
ation is 33.8 seconds, much higher than that of public ser-
vices. After the circuit creation, the communication between
the client and the server becomes almost as fast as accessing
public services through Tor, as we will show later through
our experiments.
Our EWMA algorithm is ideal for prioritizing the circuit
creation phase of Hidden Services, since the command cells
for circuit creation have small sizes (512 bytes each), and
they are the ﬁrst cells sent by a circuit. These cells should
get the highest priority almost independent from the value
of the EWMA parameter.
We tested the performance improvement of Hidden Ser-
vices, using a similar approach to our experiments in Sec-
tion 3.3, above. We used H = 33 for our middle OR. The
hidden server is a desktop machine at the University of Wa-
terloo. The server is also conﬁgured to use planetgurgle as
the middle OR for all of its circuits.
We modiﬁed webfetch to support SOCKS4a, in order to
resolve URLs for hidden services. We also instrumented
webfetch to separately record the time for connection initial-
ization and the time for webpage fetching. For each client
instance, we perform four fetches of the target webpage. The
latter three fetches will not include circuit creation, and so
should be much faster than the ﬁrst one. We performed
200 groups of tests (200 circuit creations). The connection
initialization time for the latter three fetches is very short
(averaging 2.0 seconds) compared to the ﬁrst fetch. Since
we are mainly concerned about the circuit creation, we only
show the connection initialization time for the ﬁrst fetch,
and the download time for webpages. The CDF is shown in
Figure 14.
As we notice, there are improvements in the connection
initialization time in each quantile. The average time de-
creased from 19.3 seconds to 17.1 seconds (11.4%). This
time consists of mostly circuit creation. Note that only two
hops out of seven are prioritized (planetgurgle). We ex-
pect more improvement if all the ORs in the circuits are
prioritized.
6.1 Compatibility with the Existing Tor
For any upgrade of a distributed system the size of Tor,
compatibility is a fundamental issue to consider. Requiring
simultaneous upgrades for all Tor nodes would be a great re-
sisting force to the implementation. Fortunately, since our
algorithm only changes the order that cells are multiplexed
from diﬀerent circuits within the OR, it does not require
any change in other ORs. Consequently, each OR can be
upgraded individually, and each upgrade would make some
improvement, as can be seen by the results of our experi-
ments.
Our algorithm can also be turned on and oﬀ conveniently,
by setting the parameter in the Tor conﬁguration ﬁle, and
switched at runtime by sending a SIGHUP signal to Tor to
reload its conﬁguration ﬁle.
6.2 Effects on Security Properties of Tor
An important question is naturally whether these improve-
ments in performance would enable an attack not previously
present. We point out for emphasis that Tor is known to be
insecure against an adversary that can see both ends of a
circuit [6, 13, 21]. The most apparent avenue for attack is
for an attacker, who can see just one end of a circuit, to
try to determine whether the other end is an OR that has
been upgraded to use this protocol, or not, by observing the
performance of the circuit.
Here, Tor’s large variance in performance comes in handy.
Although our method provides a noticeable improvement,
the improvement is still small as compared to the very large
variance; see Figure 7. It would seem to be as easy for an
attacker to learn in the stock Tor, for example, whether the
OR at the other end of the circuit had high or low band-
width.
One may also contemplate an attack in the style of [5],
wherein the attacker constructs his own circuits through
various ORs in the network in order to observe interfer-
ence with a target circuit. This attack is already possible in
stock Tor [5]; the ﬁxes to Tor made as a result of that paper
(limiting circuits to eight hops) only prevent the bandwidth
ampliﬁcation portion of the attack.
7. RELATED WORK
A number of works examine Tor in an attempt to improve
its performance; we give an overview of some of them, and
other work related to our improvements, in this section.
7.1 Tor over DTLS
One area of investigation in improving Tor’s performance
is in ﬁghting the improper application of TCP’s congestion
control mechanisms, which degrade Tor’s performance. Be-
tween each pair of ORs, multiple circuits may share the same
TCP connection, and their traﬃc is multiplexed within this
connection using the same socket. When the number of
unacknowledged packets in the socket buﬀer exceeds the
socket’s congestion window, TCP’s congestion control mech-
anism takes eﬀect, and TCP will back oﬀ until more ac-
knowledgements are received. This mechanism is desirable
if there is only one circuit using the connection; however, if
there is more than one circuit, one circuit sending too much
data and triggering congestion control will cause cells on
other circuits to be prevented from being transmitted.
337Reardon and Goldberg [20] addressed this problem by us-
ing a TCP-over-DTLS tunnel. Instead of using a TLS/TCP
connection between each pair of ORs, a DTLS/UDP connec-
tion is established, to prevent the congestion control mech-
anism incurred by one circuit from preventing other circuits
from sending data. On top of DTLS/UDP, a user-level TCP
connection is established for each circuit, to guarantee in-
order delivery, congestion control, and ﬂow control on a per-
circuit basis.
Reardon and Goldberg’s work concentrated on a fair ap-
plication of the congestion control mechanism: the fault of
one circuit should not aﬀect other circuits. In comparison,
our approach aims to be fair on resource allocation among
circuits: circuits that consume few resources recently should
be prioritized over other circuits.
7.2 Opportunistic Bandwidth Measurement
Tor relies on ORs’ self-reported bandwidth values as weights
to make router selection decisions. This is not necessarily
accurate, and also may encourage malicious ORs to report a
higher bandwidth to attract traﬃc. Snader and Borisov [22]
proposed an opportunistic bandwidth measurement algo-
rithm to replace the self-reported bandwidth; this is more
accurate, and responds to changing load conditions quickly,
while at the same time preventing low-resource routing at-
tacks. In this way, Tor’s bandwidth resources are allocated
more eﬃciently, and the overall performance is improved.
Snader and Borisov also proposed a mechanism for users
to tune Tor’s parameter to select between circuits for higher
performance or higher anonymity, while incurring very little
cost of the other property.
Their work is orthogonal to ours; using both at the same
time should evince added beneﬁts.
7.3
Internet QoS Schemes
Several QoS schemes exist for today’s Internet, including
Integrated Services, RSVP, Diﬀerentiated Services, MPLS,
and Constraint-Based Routing. [24] There are also schemes
for prioritizing bursty traﬃc in ATM networks. [14] Our ap-
proach is similar to those eﬀorts, in the sense that Tor is
an overlay network and ORs act like Internet routers; we
wish to improve the QoS of HTTP traﬃc by adjusting the
scheduling policies within ORs.
Our EWMA algorithm is simple and eﬀective in our sit-
uation. Nonetheless, incorporating ideas from other QoS
techniques into Tor would be an interesting avenue for fu-
ture work. One caveat is that in Tor, the contents of the
packets are unavailable to the ORs, so QoS methods based
on protocol analysis or deep packet inspection would be un-
suitable for our use.
8. FUTURE WORK
8.1 Prioritizing Connections within an OR
In the ﬁne-grained analysis of a cell’s time spent within
the OR, we observed that our modiﬁcations resulted in a
reduction in the amount of time a cell spends waiting to
be ﬂushed from the circuit queues of interactive circuits to
the connection output buﬀer. We also observed that the
cells still wait in the connection output buﬀer for a notice-
able amount of time. If this time can be reduced, hopefully
interactive circuits will beneﬁt more in reducing the latency.
One possible approach is to reduce the size of the FIFO
output buﬀer, so that circuits are selected by priority closer
in time to when the cells ﬂushed from them are sent over
the network. This will reduce head-of-line blocking within
the output buﬀer, and get cells from high-priority circuits
onto the network faster.
Another direction is to prioritize connections within an
OR as well, by assigning higher priority to the idle connec-
tions. A problem to consider is how to guarantee fairness,
since a busy connection may not be doing a bulk transfer; it
may simply contain many circuits, all doing web browsing.
Slowing down this connection is not the desired behaviour.
Thus, besides watching the connection’s activity, we might
also need to watch the circuits within it as well.
8.2 Gaming the EWMA Algorithm
Since the prioritization decisions are based on the be-
haviour of each circuit, a user can modify her bulk transfer
protocol to open many circuits and transfer parts of the ﬁle
with each circuit in a bursty way. Each circuit will then have
a lower EWMA value, and will be prioritized over HTTP and
other interactive protocols.
Because our EWMA algorithm does not signiﬁcantly de-
grade the performance of bulk transfer, there is no strong
incentive for those bulk transfer users to implement such a
modiﬁcation. However, such modiﬁcation can make a speci-
ﬁed protocol prioritized over any other protocol on Tor. We
should note that our algorithm does not introduce this at-
tack, since a user can still utilize multiple TCP connections
over multiple circuits on her protocol to make it more com-
petitive, even with unprioritized Tor. Indeed, using multi-
ple TCP connections on the regular (non-Tor) Internet will
yield an unfair share of bandwidth. [16] Investigations into
countermeasures will be a good direction for future work.
9. SUMMARY
In this paper we examined one source of Tor’s performance
issues. One of the factors that contributed to the bad per-
formance for interactive streams is the unfair scheduling al-
gorithm among circuits: interactive circuits will be greatly
slowed down because of co-existent non-interactive circuits
on the same connection. We proposed an EWMA-based
scheduling algorithm to prioritize the interactive circuits,
and performed experiments on PlanetLab as well as the ac-
tual Tor network. The results show that under realistic net-
work traﬃc, the interactive streams in prioritized Tor per-
forms about 10% to 20% better, in terms of latency. The
algorithm is completely compatible with the current Tor net-
work: the ORs can be upgraded gradually, it can be turned
on and oﬀ easily and on the ﬂy, and the beneﬁts will be seen
immediately. Also, the algorithm brings little overhead, even
on CPU-limited ORs.
Acknowledgements
We thank Ryan Henry, Femi Olumoﬁn, Greg Zaverucha,
Roger Dingledine, and the anonymous reviewers for their
helpful suggestions on improving this paper. We gratefully
thank The Tor Project for their ﬁnancial support, and also
for incorporating our results into the main Tor code. We
ﬁnally acknowledge MITACS and NSERC for their ﬁnancial
support as well.
33810. REFERENCES
[1] Tor Network Status. http://torstatus.kgprog.com/,
2009. Accessed April 2010.
[2] Tony Aiuto. webfetch.
http://tony.aiu.to/sa/webfetch/, 2004. Accessed
April 2010.
[3] Roger Dingledine, Nick Mathewson, and Paul
Syverson. Tor: The Second-Generation Onion Router.
In Proceedings of the 13th USENIX Security
Symposium, pages 303–320, 2004.
[4] Roger Dingledine and Steven Murdoch. Performance
Improvements on Tor or, Why Tor is slow and what
we’re going to do about it. http://www.torproject.
org/press/presskit/2009-03-11-performance.pdf,
2009. Accessed April 2010.
[5] Nathan Evans, Roger Dingledine, and Christian
Grothoﬀ. A Practical Congestion Attack on Tor Using
Long Paths. In Proceedings of the 18th USENIX
Security Symposium, pages 33–50, August 2009.
[6] Brian N. Levine, Michael K. Reiter, Chenxi Wang,
and Matthew K. Wright. Timing Attacks in
Low-Latency Mix-Based Systems. In Ari Juels, editor,
Proceedings of Financial Cryptography (FC ’04), pages
251–265. Springer-Verlag, LNCS 3110, February 2004.
[7] John D.C. Little and Stephen C. Graves. Little’s Law.
http://web.mit.edu/sgraves/www/papers/Little’
s%20Law-Published.pdf. Accessed April 2010.
[8] Karsten Loesing. Privacy-enhancing Technologies for
Private Services. PhD thesis, University of Bamberg,
2008.
[9] Karsten Loesing. Measuring the Tor Network.
http://metrics.torproject.org/papers/
directory-requests-2009-06-25.pdf, 2009.
Accessed April 2010.
[10] Karsten Loesing. Measuring the Tor Network from
Public Directory Information.
http://freehaven.net/~karsten/metrics/
measuring-tor-public-dir-info-final.pdf, 2009.
Accessed April 2010.
[11] Nick Mathewson. gitweb.torproject.org.
http://gitweb.torproject.org/tor.git?a=commit;
h=06e8370c33d6ccb73d55e9e8c3d2673c48d7b328,
2009. Accessed April 2010.
[12] Damon McCoy, Kevin Bauer, Dirk Grunwald,
Tadayoshi Kohno, and Douglas Sicker. Shining Light
in Dark Places. In Proceedings of the 8th Privacy
Enhancing Technologies Symposium, pages 66–67,
2008.
[13] Steven J. Murdoch and Piotr Zieli´nski. Sampled
Traﬃc Analysis by Internet-Exchange-Level
Adversaries. In Proceedings of the 7th Privacy
Enhancing Technologies, pages 167–183, Ottawa,
Canada, 2007.
[14] Matt W. Mutka and Jose Roberto Fernandex. A
Burst-Level Priority Scheme for Bursty Traﬃc in
ATM Networks. In Proceedings of Sixth International
Conference on Computer Communications and
Networks, pages 11–16, 1997.
[15] NIST/SEMATECH. e-Handbook of Statistical
Methods. http:
//www.itl.nist.gov/div898/handbook/index.htm,
2010.
[16] Reinaldo Penno, Satish Raghunath, Vijay K. Gurbani,
Richard Woundy, and Joe Touch. LEDBAT Practices
and Recommendations for Managing Multiple
Concurrent TCP Connections.
http://www.ietf.org/id/draft-ietf-ledbat-practices-
recommendations-00.txt, February 2010. Accessed
April 2010.
[17] Larry Peterson, Tom Anderson, David Culler, and
Timothy Roscoe. A Blueprint for Introducing
Disruptive Technology into the Internet. SIGCOMM
Comput. Commun. Rev., 33(1):59–64, 2003.
[18] Joel Reardon. Improving Tor using a TCP-over-DTLS
Tunnel. Master’s thesis, University of Waterloo, 2008.
[19] Joel Reardon. libspe.
http://crysp.uwaterloo.ca/software/, 2009.
Accessed April 2010.
[20] Joel Reardon and Ian Goldberg. Improving Tor using
a TCP-over-DTLS Tunnel. In Proceedings of the 18th
USENIX Security Symposium, pages 119–133, 2009.
[21] Andrei Serjantov and Peter Sewell. Passive Attack
Analysis for Connection-Based Anonymity Systems. In
Proceedings of ESORICS 2003, pages 116–131,
October 2003.
[22] Robin Snader and Nikita Borisov. A Tune-up for Tor:
Improving Security and Performance in the Tor
Network. In Proceedings of 16th Annual Network and
Distributed System Security Symposium, 2008.
[23] WebSiteOptimization.com. Average Web Page Size
Triples Since 2003.
http://www.websiteoptimization.com/speed/
tweak/average-web-page/, 2008. Accessed April
2010.
[24] Weibin Zhao, David Olshefski, and Henning
Schulzrinne. Internet Quality of Service: an Overview.
www.cs.columbia.edu/techreports/cucs-003-00.
pdf, 2000. Accessed April 2010.
339