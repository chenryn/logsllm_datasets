to  the  target  system  using  the  78  FIUs.  Each  FIU  was 
used  for  injecting  40  faults.  The  DP32  processor  was 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:22 UTC from IEEE Xplore.  Restrictions apply. 
Table 4. Errors manifestation latencies (measured by the number of clock cycles) 
Workload 
Observation point  min  max  mean  median 
std 
# of manifested 
Total # of 
Bubble-sort 
Inverse 
Matrix  
Register File 
ALU output lines 
IR 
PC 
CC 
Register File 
ALU output lines 
IR 
PC 
CC 
1 
0 
1 
1 
1 
1 
0 
1 
1 
1 
2978  1324.6 
1455  796.1 
462  152.66 
531  112.31 
2126  896.5 
1420  358.09 
638 
85.38 
89.80 
308 
638 
44.61 
929  209.70 
1698 
994 
98 
84 
848 
208 
41 
62 
18 
175 
719.8 
559.9 
112.21 
93 
494.7 
328.56 
120.01 
85.53 
55.48 
204.99 
manifested Errors 
1754
1592
Errors 
1751 
1739 
1254 
1025 
1563 
1588 
1240 
836 
732 
984 
simulated using a 50 MHz clock and all of the faults were 
injected  by  the  average  duration  150  ns  (The  fault 
duration  was  exponentially  distributed).  Table  4  shows 
the error manifestation latencies for different observation 
points. 
The experimental results (such as error manifestation 
latencies)  for  the  purely  simulated  model  do  not  differ 
with  the  experimental  results  of  the  partitioned  model. 
This is because the communication between the simulator 
and  the  emulator  is  implemented in such a manner that 
the whole system resembles a unique simulator in results. 
In  order  to  evaluate  the  speed-up  figures  of  the 
presented  method,  the  same  fault  injection  campaigns 
were done using a purely simulated model (i.e. The ALU 
was  not  moved  to  the  emulator).  Table  5  shows  the 
speed-ups. As shown in Table 5, the resulted speed-up is 
workload  dependent.  This  is  because  some  workloads 
(such  as  inverse  matrix  computation)  generate  more 
signal  events  in  the  ALU  than  some  other  workloads 
(such  as  Bubble  sort).  The  simulation  time  is  directly 
proportional  to  the  number  of  generated  signal  events. 
Workloads,  which  generate  more  signal  events  in  the 
ALU (the emulated part of the system), result in greater 
speed-ups, because, for such workloads, the movement of 
the ALU results in more reduction in the number of the 
simulated signal events. 
Table 5. The resulted speed-ups 
Workload 
simulation 
Pure 
Bubble sort 
Inverse matrix 
time 
[minute] 
12951 
19149 
Simulation-
Emulation  
co-operation time 
Speed-up 
[minute] 
219 
157 
59.14 
121.97 
10. Summary and concluding remarks 
This paper presents (i) a new fault injection approach 
based on the simulation and emulation co-operation, (ii) 
a fault injection tool which supports the entire process of 
a system design, called FITSEC, (iii) a case study where 
faults  are  injected  into  a  structural  model  of  a  32-bit 
processor,  and  (iv)  a  comparison  between different fault 
injection approaches. 
The  experimental  results  show  that  the  hybrid  fault 
injection  approach  gives  a  speed-up,  which  varies 
between  59  and  122  as  compared  with  the  simulation-
based fault injection. 
The  controllability  feature  of  the  hybrid  approach 
enables  to  inject  a  fault  into  a  specific  location  at  a 
specific  time.  Also,  the  observability  feature  of  the 
approach  enables  to  trace  the  error  manifestation  in  the 
different points of the design. 
Finally, the FITSEC tool supports the entire process of 
a system design and is based on both Verilog and VHDL 
languages. 
References 
[1]  M. Abramovici, M.A. Breuer, and A.D. Friedman, Digital 
Systems  Testing  and  Testable  Design,  Revised  edition, 
IEEE Press, 1995. 
[2]  J.  Aidemark,  J.  Vinter,  P.  Folkesson,  and  J.  Karlsson, 
"GOOFI: Generic Object-Oriented Fault Injection Tool", in 
Proc. Int'l Conf. Dependable Systems and Networks, 2001, 
pp. 83-88. 
[3]  J. Arlat, M. Aguera, L. Amat, Y. Crouzet, J.C. Fabre, J.C. 
Laprie,  E.  Martins,  D.  Powell,  "Fault  injection  for 
dependability  validation:  a  methodology  and  some 
applications", IEEE Trans. Software Engineering, vol. 16, 
no. 2, 1990, pp. 166-182. 
[4]  J.  Arlat,  J.C.  Fabre,  M.  Rodriguez  and  F.  Salles, 
"Dependability  of  COTS  Microkernel-Based  Systems", 
IEEE Trans. Computers, vol. 51, no. 2, 2002, pp. 138-163. 
[5]  J.R.  Armstrong,  F.S.  Lam  and  P.C.  Ward,  "Test 
Generation  and  Fault  Simulation  for  Behavioral  Models", 
in Performance and Fault Modeling with VHDL, Prentice-
Hall, 1992, pp.240-303. 
[6]  G. Asadi, S.G. Miremadi, S. Bayat Sarmadi, and A. Ejlali, 
"Speeding  up  Design  Verification  Using  Co-operation  of 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:22 UTC from IEEE Xplore.  Restrictions apply. 
Simulation  and  Emulation",  in  Proc.  2002  IEEE-TTTC 
Int'l  Conf.  Automation,  Quality  and  Testing,  Robotics,
2002, pp. 283-288. 
[7]  J.H. Barton, E.W. Czeck, Z.Z. Segal, and D.P. Siewiorek, 
"Fault  Injection  Experiments  Using  FIAT",  IEEE  Trans. 
Computers, vol. 39, no. 4, April 1990, pp. 575-582. 
[8]  S. Bayat Sarmadi, S.G. Miremadi, G. Asadi, and A. Ejlali, 
"Fast  Prototyping  with  Co-operation  of  Simulation  and 
Emulation", in Proc. 12th Int'l Conf. Field Programmable 
Logic and Application (FPL 2002), 2002, pp. 15-25. 
[9]  A.  Benso,  P.  Prinetto,  M.  Rebaudengo,  and  M.  Reorda, 
"EXFI:  A  Low-cost  Fault  Injection  System  for  Embedded 
Microprocessor-Based  Boards",  ACM  Trans.  Design 
Automation of Electronic Systems, vol. 3, no. 4, Oct. 1998, 
pp. 626-634. 
[10] L.  Berrojo,  I.  Gonzalez,  F.  Corno,  M.S.  Reorda,  G. 
Squillero,  L.  Entrena,  C.  Lopez,  "New  techniques  for 
speeding-up  fault-injection  campaigns  Design",  in  Proc. 
Automation  and  Test  in  Europe  Conf.  and  Exhibition,
2002, pp. 847  852. 
[11] J.  Carreira,  H.  Madeira,  J.G.  Silva,  "Xception:  A 
of 
Technique 
Dependability 
in  Modern  Computers",  IEEE  Trans. 
Software Engineering, vol. 24, No. 2, Feb. 1998, pp. 125-
136. 
the  Experimental  Evaluation 
for 
[12] T.J.  Chakraborty,  C.H.  Chiang,  "A  novel  fault  injection 
method  for  system  verification  based  on  FPGA  boundary 
scan  architecture",  in  Proc.  Int'l  Test  Conference,  2002, 
pp. 923  929. 
[13] K.T. Cheng, S.Y. Huang, and W.J. Dai, "Fault Emulation: 
A  New  Methodology  for  Fault  Grading",  IEEE  Tran. 
Computer-Aided  Design  of 
Integrated  Circuits  and 
Systems, vol. 18, no. 10, Oct. 1999, pp. 1487-1495. 
[14] G.S.  Choi,  and  R.K.  Iyer,  "FOCUS:  An  Experimental 
Environment  for  Fault  Sensitivity  Analysis",  IEEE  Trans. 
Computers, vol. 41, no. 12, Dec. 1992, pp.1515-1526. 
[15] P.  Civera,  L.  Macchiarulo,  M.  Rebaudengo,  M.  Sonza 
Reorda,  and  M.  Violante,  "Exploiting  Circuit  Emulation 
for  Fast  Hardness  Evaluation",  IEEE  Trans.  Nuclear 
Science, vol. 48, Dec. 2001, pp. 2210-2216. 
[16] E.  Czeck,  and  D.  Siewiorek,  "Effects  of  Transient  Gate-
Level  Faults  on  Program  Behavior",  in  Proc.  20th  Symp. 
Fault Tolerant Computing, 1990, pp. 236-243. 
[17] P.  Folkesson,  S.  Svensson,  and  J.  Karlsson,  "A 
Comparison  of  Simulation  Based  and  Scan  Chain 
Implemented  Fault  Injection",  in  Proc.  28th  Int.  Symp. 
Fault-Tolerant Computing, 1998, pp. 284-293. 
[18] K.K.  Goswami,  and  R.K.  Iyer,  "DEPEND:  A  Simulation-
Based  Environment  for  System  Level  Dependability 
Analysis",  Technical  Report,  CRHC  92-11,  University  of 
Illinois at Urbana-Champaign, 1992. 
[19] J.  Gracia,  J.C.  Baraza,  D.  Gil,  P.J.  Gil,  "Comparison  and 
application  of  different  VHDL-based  fault 
injection 
techniques",  in  Proc.  IEEE  Int'l  Symp.  Defect  and  Fault 
Tolerance in VLSI Systems, 2001, pp. 233-241. 
[20] U.  Gunneflo,  J.  Karlsson,  and  J.  Torin,  "Evaluation  of 
Error  Detecting  Schemes  Using  Fault  Injection  by Heavy-
ion  Radiation",  in  Proc.  19th  IEEE  Int'l  Symp.  Fault-
Tolerant Computing, 1989, pp. 340-347. 
[21] HTTP://www.model.com 
[22] HTTP://www.plda.com/hardware/cpciprod10k.pdf 
[23] S.A.  Hwang,  J.H.  Hong,  C.  W.  Wu,  "Sequential  Circuit 
Fault  Simulation  Using  Logic  Emulation",  IEEE  Trans. 
Computer-Aided  Design  of 
Integrated  Circuits  and 
Systems, vol. 17, Aug. 1998, pp. 724-736. 
[24] IEEE  Std  1076-1993:  IEEE  Standard  VHDL  Language 
Reference Manual. 
[25] IEEE  Std  1364-1995:  IEEE  Standard  Verilog  HDL 
Language Reference Manual. 
[26] E.  Jenn,  J.  Arlat,  M.  Rimen,  J.  Ohlsson,  and  J. Karlsson, 
"Fault Injection into VHDL Models: The MEFISTO Tool", 
in Proc. 24th Int'l Symp. Fault-Tolerant Computing, 1994, 
pp. 336-344. 
[27] B.W.  Johnson,  Design  and  Analysis  of  Fault-Tolerant 
Digital Systems, Addison-Wesley, ch. 2, 1989. 
[28] G.A.  Kanawati,  N.A.  Kanawati,  and  J.  Abraham, 
"FERRARI:  A  Tool  for 
the  Validation  of  System 
Dependability  Properties", in Proc. 22th IEEE Int'l Symp. 
Fault-Tolerant Computing, 1992, pp. 336-344. 
[29] W. Kao, R.K. Iyer, and D. Tang, "FINE: A Fault Injection 
and Monitoring Environment for Tracing the UNIX System 
Behavior  Under  Faults", 
IEEE  Trans.  Software 
Engineering, vol. 19, no. 11, Nov. 1993. 
[30] J.  Karlsson,  P.  Folkesson,  J.  Arlat,  Y.  Crouzet,  G.  Leber, 
and  J.Reisinger,  "Application  of  Three  Physical  Fault 
Injection  Techniques  to  the  Experimental  Assessment  of 
the  MARS  Architecture",  in  Proc.  Fifth  IFIP  Working 
Conf.  Dependable  Computing  for  Critical  Applications,
DCCA-5, 1995, pp. 150-151. 
[31] U.R. Khan, H.L. Owen, J.L. Hughes, "FPGA Architecture 
for  ASIC  Hardware  Emulator",  in  Proc.  6th  IEEE  ASIC 
Conf., 1993, p. 336. 
[32] R.H. Klenke, M. Meyassed, J.H. Aylor, B.W. Johnson, R. 
Rao,  and  A.  Ghosh,  "An  Integrated  Design  Environment 
for  Performance  and  Dependability  Analysis",  in  Proc. 
ACM Design Automation Conf., 1997, pp. 184-189. 
[33] R.  Leveugle,  K.  Hadjiat,  "Multi-level  fault  injection 
experiments  based  on  VHDL  descriptions:  a  case  study", 
in  Proc.  8th  IEEE  Int'l  On-Line  Testing  Workshop, 2002, 
pp. 107-111. 
[34] H.  Madeira,  M.  Rela,  and  J.G.  Silva,  "RIFLE:  A  General 
Purpose Pin-Level Fault Injector", in Proc. First European 
Dependable Computing Conference, 1994, pp. 199-216. 
[35] G.  De  Micheli,  Synthesis  and  Optimization  of  Digital 
Circuits, McGraw-Hill, 1994. 
[36] G. Miremadi, J. Karlsson, U. Gunneflo, and J. Torin, "Two 
Soft-ware  Techniques  for  On-Line  Error  Detection",  in 
Proc.  IEEE  Int'l  Symp.  Fault-Tolerant  Computing,  1992, 
pp.328-335. 
[37] S.  Mittra,  Principles  of  Verilog  PLI,  Kluwer  Academic 
Publishers, 1999. 
[38] R. Sedaghat-Maman, E. Barke, "Real Time Fault Injection 
Using  Logic  Emulators",  in  Proc.  Asia  and  South  Pacific 
Design Automation Conf., 1998, pp. 475-479. 
[39] V.  Sieh,  O.  Tschache  and  F.  Balbach,  "VERIFY: 
evaluation  of 
reliability  using  VHDL-models  with 
embedded  fault  description",  in  Proc.  27th  Int'l  Symp. 
Fault-Tolerant Computing, 1997, pp. 32-36.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:22 UTC from IEEE Xplore.  Restrictions apply.