2
Given a hyper-alert type, a hyper-alert instance can be
generated if the corresponding attack is detected and re-
ported by an IDS. For example, we can generate a hyper-
alert instance of type SadmindBu(cid:11)erOver(cid:13)ow from a cor-
responding alert. The notion of hyper-alert instance is for-
mally de(cid:12)ned as follows.
De(cid:12)nition 2 Given a hyper-alert type T = (fact, prerequi-
site, consequence), a hyper-alert (instance) h of type T is a (cid:12)-
nite set of tuples on fact, where each tuple is associated with
an interval-based timestamp [begin time, end time]. The
hyper-alert h implies that prerequisite must evaluate to True
and all the predicates in consequence might evaluate to True
for each of the tuples. (Notation-wise, for each tuple t in h,
we use t:begin time and t:end time to refer to the times-
tamp associated with t.)
The fact component of a hyper-alert type is essentially a
relation schema (as in relational databases), and a hyper-
alert is a relation instance of this schema. One may point
out that an alternative way is to represent a hyper-alert
as a record, which is equivalent to a single tuple on fact.
However, such an alternative cannot accommodate certain
alerts possibly reported by an IDS. For example, an IDS
may report an IPSweep attack along with multiple swept IP
addresses, which cannot be represented as a single record. In
addition, our current formalism allows aggregation of alerts
of the same type, and is (cid:13)exible in reasoning about alerts.
Therefore, we believe the current notion of a hyper-alert is
an appropriate choice.
A hyper-alert instantiates its prerequisite and consequence
by replacing the free variables in prerequisite and conse-
quence with its speci(cid:12)c values. Since all free variables in
prerequisite and consequence must appear in fact in a hyper-
alert type, the instantiated prerequisite and consequence will
have no free variables. Note that prerequisite and conse-
quence can be instantiated multiple times if fact consists of
multiple tuples.
In the following, we treat timestamps implicitly and omit
them if they are not necessary for our discussion.
Example 2 Consider the hyper-alert type SadmindBu(cid:11)er-
Over(cid:13)ow in example 1. A hyper-alert hSadmindBOF of this
type could be: f(VictimIP = 152.1.19.5, VictimPort = 1235),
(VictimIP = 152.1.19.7, VictimPort = 1235)g. This implies
that if the attack is successful, the following two logical for-
mulas must be True as the prerequisites of the attack: Ex-
istHost (152.1.19.5) ^ VulnerableSadmind (152.1.19.5), Ex-
istHost (152.1.19.7) ^ VulnerableSadmind (152.1.19.7). More-
over, as possible consequences of the attack, the following
might be True: GainRootAccess (152.1.19.5), GainRootAc-
247cess (152.1.19.7). This hyper-alert says that there are bu(cid:11)er
over(cid:13)ow attacks against sadmind at IP addresses 152.1.19.5
and 152.1.19.7, and the attacker may gain root access as a
result of the attacks.
2
A hyper-alert may correspond to one or several related
alerts. If an IDS reports one alert for a certain attack and
the alert has all the information needed to instantiate a
hyper-alert, a hyper-alert can be generated from the alert.
However, some IDSs may report a series of alerts for a single
attack. For example, EMERALD may report several alerts
(within the same thread) related to an attack that spreads
over a period of time. In this case, a hyper-alert may corre-
spond to the aggregation of all the related alerts. Moreover,
several alerts may be reported for the same type of attack in
a short period of time. Our de(cid:12)nition of hyper-alert allows
them to be treated as one hyper-alert, and thus provides
(cid:13)exibility in the reasoning about alerts. Certain constraints
are necessary to make sure the hyper-alerts are reasonable.
However, since our hyper-alert correlation method does not
depend on them directly, we will discuss them after intro-
ducing our method.
Ideally, we may correlate a set of hyper-alerts with a later
hyper-alert together if the consequences of the former ones
imply the prerequisite of the latter one. However, such an
approach may not work in reality due to several reasons.
First, the attacker may not always prepare for certain at-
tacks by launching some other attacks. For example, the
attacker may learn a vulnerable sadmind service by talking
to people who work in the organization where the system is
running. Second, the current IDSs may miss some attacks,
and thus a(cid:11)ect the alert correlation if the above approach is
used. Third, due to the combinatorial nature of the afore-
mentioned approach, it is computationally expensive to ex-
amine sets of alerts to (cid:12)nd out whether their consequences
satisfy (or more precisely, imply) the prerequisite of an alert.
Having considered these issues, we adopt an alternative
approach. Instead of examining if several hyper-alerts sat-
isfy the prerequisite of a later one, we check if an earlier
hyper-alert contributes to the prerequisite of a later one.
Speci(cid:12)cally, we decompose the prerequisite of a hyper-alert
into pieces of predicates and test whether the consequence of
an earlier hyper-alert makes some pieces of the prerequisite
True (i.e., make the prerequisite easier to satisfy). If the re-
sult is yes, then we correlate the hyper-alerts together. This
idea is speci(cid:12)ed formally through the following De(cid:12)nitions.
De(cid:12)nition 3 Consider a hyper-alert type T = (fact, pre-
requisite, consequence). The prerequisite set (or consequence
set, resp.) of T , denoted P (T ) (or C(T ), resp.), is the set
of all predicates that appear in prerequisite (or consequence,
resp.). Given a hyper-alert instance h of type T , the pre-
requisite set (or consequence set, resp.) of h, denoted P (h)
(or C(h), resp.), is the set of predicates in P (T ) (or C(T ),
resp.) whose arguments are replaced with the corresponding
attribute values of each tuple in h. Each element in P (h) (or
C(h), resp.) is associated with the timestamp of the corre-
sponding tuple in h. (Notation-wise, for each p 2 P (h) (or
C(h), resp.), we use p:begin time and p:end time to refer to
the timestamp associated with p.)
Example 3 Consider the Sadmind Ping attack through
which an attacker discovers possibly vulnerable sadmind ser-
vices. The corresponding alerts can be represented by a
hyper-alert type SadmindPing = (fVictimIP, VictimPortg,
ExistHost (VictimIP), fVulnerableSadmind (VictimIP)g).
Suppose a hyper-alert instance hSadmindP ing of type Sad-
mindPing has the following tuples: f(VictimIP = 152.1.19.5,
VictimPort = 1235), (VictimIP = 152.1.19.7, VictimPort
= 1235), (VictimIP = 152.1.19.9, VictimPort = 1235)g.
Then P (hSadmindP ing) = fExistHost (152.1.19.5), ExistHost
(152.1.19.7), ExistHost (152.1.19.9)g, and C(hSadmindP ing)
= fVulnerableSadmind (152.1.19.5), VulnerableSadmind
(152.1.19.7), VulnerableSadmind (152.1.19.9)g.
2
Example 4 Consider hSadmindBOF in example 2. We
have P (hSadmindBOF ) = fExistHost (152.1.19.5), ExistHost
(152.1.19.7), VulnerableSadmind (152.1.19.5), VulnerableSad-
mind (152.1.19.7)g and C(hSadmindBOF ) = fGainRootAccess
(152.1.19.5), GainRootAccess (152.1.19.7)g.
2
De(cid:12)nition 4 Hyper-alert h1 prepares for hyper-alert h2,
if there exist p 2 P (h2) and C (cid:18) C(h1) such that for all
c 2 C, c:end time < p:begin time and the conjunction of all
the predicates in C implies p.
The prepare-for relation is developed to capture the causal
relationships between hyper-alerts. Intuitively, h1 prepares
for h2 if some attacks represented by h1 make the attacks
represented by h2 easier to succeed.
Example 5 Let us continue examples 3 and 4. Assume that
all tuples in hSadmindP ing have timestamps earlier than ev-
ery tuple in hSadmindBOF . By comparing C(hSadmindP ing)
and P (hSadmindBOF ),
it is clear that VulnerableSadmind
(152.1.19.5) (among others) in P (hSadmindBOF ) is also in
C(hSadmindP ing). Thus, hSadmindP ing prepares for, and is
correlated with hSadmindBOF .
2
Given a sequence S of hyper-alerts, a hyper-alert h in S
is a correlated hyper-alert, if there exists another hyper-alert
h0 in S such that either h prepares for h0 or h0 prepares for
h. If no such h0 exists, h is called an isolated hyper-alert.
Our goal is to discover all pairs of hyper-alerts h1 and h2 in
S such that h1 prepares for h2.
2.2.1 Temporal Constraints for Hyper-alerts
As discussed earlier, we allow multiple alerts to be ag-
gregated into a hyper-alert, which gives some (cid:13)exibility in
reasoning about alerts. However, the de(cid:12)nition of hyper-
alert is overly (cid:13)exible in some situations;
it allows alerts
that occur at arbitrary points in time to be treated as a
single hyper-alert. Although some attackers usually spread
their intrusive activities over time, aggregating alerts at ar-
bitrary time points is still overly broad, and may a(cid:11)ect the
e(cid:11)ectiveness of alert correlation.
In the following, we introduce two temporal constraints for
hyper-alerts. The purpose of these temporal constraints is
to restrict the alert aggregation to meaningful ones. We are
particularly interested in hyper-alerts that satisfy at least
one of the constraints. However, most of our discussion in
this paper applies to general hyper-alerts. Thus, we will not
speci(cid:12)cally indicate the constraints if it is not necessary.
De(cid:12)nition 5 Given a time duration D, a hyper-alert h
satis(cid:12)es duration constraint of D if M axft:end timej8t 2
hg (cid:0) M inft:begin timej8t 2 hg < D.
De(cid:12)nition 6 Given a time interval I, a hyper-alert h sat-
is(cid:12)es interval constraint of I if (1) h has only one tuple, or
(2) for all t in h, there exist another t0 in h such that there
exist t:begin time < T < t:end time, t0:begin time < T 0 <
t0:end time, and jT (cid:0) T 0j < I.
The temporal constraints are introduced to prevent unrea-
248sonable aggregation of alerts. However, this does not imply
that alerts have to be aggregated. Indeed, in our initial ex-
periments, we treat each alert as an individual hyper-alert.
In other words, aggregation of alerts is an option provided
by our model, and temporal constraints are restrictions that
make the aggregated hyper-alerts meaningful. (The results
in [11] have shown the usefulness of alert aggregation in re-
ducing the complexity of intrusion analysis.)
2.3 Hyper-alert Correlation Graph
The prepare-for relation between hyper-alerts provides a
natural way to represent the causal relationship between
correlated hyper-alerts. In the following, we introduce the
notion of a hyper-alert correlation graph to represent attack
scenarios on the basis of the prepare-for relation. As we will
see, the hyper-alert correlation graph re(cid:13)ects the high-level
strategies or logical steps behind a sequence of attacks.
De(cid:12)nition 7 A hyper-alert correlation graph HG = (N , E)
is a connected DAG (directed acyclic graph), where the set
N of nodes is a set of hyper-alerts, and for each pair of nodes
n1; n2 2 N , there is an edge from n1 to n2 in E if and only
if n1 prepares for n2.
Example 6 Suppose in a sequence of hyper-alerts we have
the following ones: hIP Sweep, hSadmindP ing, hSadmindBOF ,
and hDDOSDaemon. hSadmindBOF and hSadmindP ing have
been explained in examples 2 and 3, respectively. Suppose
hIP Sweep represents an IP Sweep attack, and hDDOSDaemon
represents the activity of a DDOS daemon program. Assume
that hIP Sweep prepares for hSadmindP ing and hSadmindBOF ,
respectively, hSadmindP ing prepares for hSadmindBOF , and
hSadmindBOF prepares for hDDOSDaemon. These are intu-
itively shown in a hyper-alert correlation graph in Figure
1(a).
2
The hyper-alert correlation graph provides an intuitive
representation of correlated hyper-alerts. With this notion,
the goal of alert correlation can be rephrased as the discovery
of hyper-alert correlation graphs that have maximal number
of nodes from a sequence of hyper-alerts.
In addition to getting all the correlated hyper-alerts, it is
often desirable to discover those directly or indirectly cor-
related to one particular hyper-alert. For example, if an
IDS detects a DDOS daemon running on a host, it would be
helpful to inform the administrator how this happened, that
is, report all the alerts that directly or indirectly prepare for
the DDOS daemon. Therefore, we de(cid:12)ne the following op-
erations on hyper-alert correlation graphs.
De(cid:12)nition 8 Given a hyper-alert correlation graph HG =
(N , E) and a hyper-alert n in N , precedent (n; HG) is an
operation that returns the maximal sub-graph P G = (N 0,
E 0) of HG that satis(cid:12)es the following conditions: (1) n 2 N 0,
(2) for each n0 2 N 0 other than n, there is a directed path
from n0 to n, and (3) each edge e 2 E 0 is in a path from a
node n0 in N 0 to n. The resulting graph P G is called the
precedent graph of n w.r.t. HG.
De(cid:12)nition 9 Given a hyper-alert correlation graph HG =
(N , E) and a hyper-alert n in N , subsequent (n; HG) is
an operation that returns the maximum sub-graph SG =
(N 0, E 0) of HG that satis(cid:12)es the following conditions: (1)
n 2 N 0, (2) for each n0 2 N 0 other than n, there is a directed
path from n to n0, and (3) each edge e 2 E 0 is in a path from
n to a node n0 in N 0. The resulting graph SG is called the
subsequent graph of n w.r.t. HG.
De(cid:12)nition 10 Given a hyper-alert correlation graph HG
= (N , E) and a hyper-alert n in N , correlated (n; HG)
is an operation that returns the maximal sub-graph CG =
(N 0, E 0) of HG that satis(cid:12)es the following conditions: (1)
n 2 N 0, (2) for each n0 2 N 0 other than n, there is either
a path from n to n0, or a path from n0 to n, and (3) each
edge e 2 E 0 is either in a path from a node in N 0 to n, or in
a path from n to a node in N 0. The resulting graph CG is
called the correlated graph of n w.r.t. HG.
Intuitively, the precedent graph of n w.r.t. HG describes
all the hyper-alerts in HG that prepare for n directly or
indirectly, the subsequent graph of n w.r.t. HG describes
all the hyper-alerts in HG for which n prepares directly or
indirectly, and the correlated graph of n w.r.t. HG includes
all the hyper-alerts in HG that are correlated to n directly
or indirectly.
It is easy to see that correlated(n; HG) =
precedent(n; HG) [ subsequent(n; HG).
Assuming the black node hSadmindBOF in (cid:12)gure 1(a) is
the hyper-alert of concern, (cid:12)gures 1(b) to 1(d) display the
precedent graph, subsequent graph, and correlated graph
of hSadmindBOF w.r.t. the hyper-alert correlation graph in
(cid:12)gure 1(a), respectively. Note that (cid:12)gure 1(d) is the same
as (cid:12)gure 1(a). This is because all the hyper-alerts in (cid:12)gure
1(a) are related to hSadmindBOF via the prepare-for relation.
The hyper-alert correlation graph is not only an intuitive
representation of attack scenarios constructed through alert
correlation, but also reveals opportunities to improve in-
trusion detection. First, the hyper-alert correlation graph
can potentially reveal the intrusion strategies behind the at-
tacks, and lead to better understanding of the attacker’s in-
tention. Second, assuming some attackers exhibit patterns
in their strategies, we can use the hyper-alert correlation
graph to pro(cid:12)le previous attacks and identify on-going at-
tacks by matching to the pro(cid:12)les. A partial match to the
pro(cid:12)le may indicate attacks possibly missed by the IDSs,
and lead to human investigation and improvement of the
IDSs.
2.4 Discussion
Our method has several advantages. First, our approach
provides a high-level representation of correlated alerts that
reveals the causal relationships between them. As we will see
in Section 4, the hyper-alert correlation graphs generated by
our implementation clearly show the strategies behind these
attacks. Second, our approach can potentially reduce the
impact of false alerts by providing a way to di(cid:11)erentiate
alerts. While true alerts are more likely to be correlated
with other alerts, false alerts, which do not correspond to
any actual attacks, tend to be more random than the true
alerts, and are less likely to be correlated to others.
Our method does not depend on prede(cid:12)ned attack sce-
narios to discover sequences of related attacks. This is a
common feature that our method shares with JIGSAW [17].
However, unlike JIGSAW, our method can correlate alerts as
long as there are signs of connections between them, even if
some alerts correspond to failed attack attempts, or the IDSs
fail to detect some related attacks. In addition, our method
provides an intuitive representation (i.e., hyper-alert correla-
tion graph) of correlated alerts, which reveals the high-level
strategy behind the attacks.
Our decision certainly has its pros and cons. On the
positive side, our method is simple and yet able to corre-
late related alerts even when the IDSs miss certain attacks.
249h IPSweep
h SadmindBOF hDDOSDaemon
h IPSweep
h SadmindBOF
h SadmindPing
h SadmindPing
(a) A hyper-alert correlation graph HG
(b) P G = precedent(hSadmindBOF ; HG)
h IPSweep
h SadmindBOF hDDOSDaemon