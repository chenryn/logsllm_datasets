Zipfian 分布    
random_zipfian ( lb, ub, parameter ) → integer    
  Computes a Zipfian-distributed random integer in [lb, ub], see below.    
  random_zipfian(1, 10, 1.5) → an integer between 1 and 10    
```    
例如    
```    
drop table if exists tbl_log;    
create unlogged table tbl_log (    
  uid int,  -- 用户id    
  info text,  -- 行为    
  ts timestamp   -- 时间    
);    
```    
```    
vi t.sql    
\set uid random_gaussian(1,1000,2.5)    
insert into tbl_log values (:uid, md5(random()::text), now());    
```    
```    
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 10 -j 10 -T 120    
transaction type: ./t.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 10    
number of threads: 10    
duration: 120 s    
number of transactions actually processed: 21752866    
latency average = 0.055 ms    
latency stddev = 0.089 ms    
initial connection time = 23.170 ms    
tps = 181307.721398 (without initial connection time)    
statement latencies in milliseconds:    
         0.000  \set uid random_gaussian(1,1000,2.5)    
         0.055  insert into tbl_log values (:uid, md5(random()::text), now());    
```    
```    
-- 查看分布情况, 产生的记录条数符合高斯分布    
select uid,count(*) from tbl_log group by uid order by 2 desc;    
 uid  | count     
------+-------    
  495 | 44221    
  505 | 44195    
  484 | 44128    
  478 | 44089    
  507 | 44074    
  499 | 44070    
  502 | 44069    
  506 | 44064    
  516 | 44057    
  513 | 44057    
  501 | 44019    
  ....    
   10 |  2205    
  989 |  2187    
  990 |  2185    
   11 |  2174    
    9 |  2154    
  991 |  2139    
    7 |  2131    
    6 |  2120    
  993 |  2109    
  992 |  2087    
    5 |  2084    
  994 |  2066    
    8 |  2053    
  995 |  2052    
  996 |  2042    
    3 |  2003    
    4 |  1995    
  997 |  1985    
    2 |  1984    
  999 |  1966    
    1 |  1919    
  998 |  1915    
 1000 |  1890    
(1000 rows)    
```    
2、pgbench 也可以将接收到的SQL结果作为变量, 从而执行有上下文交换的业务逻辑测试.      
```    
drop table if exists tbl;    
create unlogged table tbl (    
  uid int primary key,    
  info text,    
  ts timestamp    
);    
insert into tbl select generate_series(1,1000000), md5(random()::text), now();    
drop table if exists tbl_log;    
create unlogged table tbl_log (    
  uid int,    
  info_before text,    
  info_after text,    
  client_inet inet,    
  client_port int,    
  ts timestamp    
);    
```    
```    
vi t.sql    
\set uid random(1,1000000)    
with a as (    
  select uid,info from tbl where uid=:uid    
)     
update tbl set info=md5(random()::text) from a where tbl.uid=a.uid returning a.info as info_before, tbl.info as info_after \gset    
insert into tbl_log values (:uid, :info_before, :info_after, inet_client_addr(), inet_client_port(), now());    
```    
```    
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 10 -j 10 -T 120    
transaction type: ./t.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 10    
number of threads: 10    
duration: 120 s    
number of transactions actually processed: 8306176    
latency average = 0.144 ms    
latency stddev = 0.117 ms    
initial connection time = 23.128 ms    
tps = 69224.826220 (without initial connection time)    
statement latencies in milliseconds:    
         0.000  \set uid random(1,1000000)    
         0.081  with a as (    
         0.064  insert into tbl_log values (:uid, :info_before, :info_after, inet_client_addr(), inet_client_port(), now());    
```    
```    
select * from tbl_log limit 10;    
postgres=# select * from tbl_log limit 10;    
  uid   |           info_before            |            info_after            | client_inet | client_port |             ts                 
--------+----------------------------------+----------------------------------+-------------+-------------+----------------------------    
 345609 | b1946507f8c128d18e6f7e41ce22440e | a2df0ff6272ea38a6629b216b61be6e6 |             |             | 2023-09-06 09:45:27.959822    
 110758 | 39b6e7ab8ee91edebcd8b20d0a9fc99e | 5996800e06a82ccf5af904e980020157 |             |             | 2023-09-06 09:45:27.959902    
 226098 | 71c1983845e006f59b1cb5bd44d34675 | 5ab57b88f67272f4567c17c9fd946d19 |             |             | 2023-09-06 09:45:27.961955    
 210657 | 4dc8e7aaeb7b2c323292c6f75c9c5e41 | 0a8a4d58f82639b7e23519b578a64dfa |             |             | 2023-09-06 09:45:27.962091    
 898076 | 6b65ce6281880d1922686a200604dee9 | e695ea569fc4747832f7bbada5acbc17 |             |             | 2023-09-06 09:45:27.962147    
 117448 | 09f6ab54fea2b6729ff5ea297dbb50e9 | 94da2a284ae4751a60165203e88f1ff7 |             |             | 2023-09-06 09:45:27.962234    
 208582 | e8cb577f92e6898ff384fa77c805da00 | 0188ddf40947257009336cdc0862143d |             |             | 2023-09-06 09:45:27.959403    
   2241 | cf4ae28a99a5f39f07f7d3e0bcee6940 | d98df58e39c3d8942471179961ffe95d |             |             | 2023-09-06 09:45:27.96257    
 466615 | b2c012d9a5db4957753f2b67c80943e3 | f9de82dad0b90138686c9c36774faf5e |             |             | 2023-09-06 09:45:27.962729    
 241103 | 9680999428704ffb103b10271e490d14 | d88e38aa975490fcb7e2d81c10fda3c9 |             |             | 2023-09-06 09:45:27.962784    
(10 rows)    
```    
四、压测    
1、使用pgbench 编写自定义压测脚本.    
前面的例子都已经讲过了. 略.      
五、思考        
思考一下你熟悉的业务, 数据特征, 设计对应的表结构, 生成具有业务特征的数据, 编写业务相关SQL语句, 进行压力测试.      
现在chatgpt已经非常的智能, 你可以尝试一下把你的想法告诉chatgpt, 让他来写SQL.    
```  
问题: 写一个postgresql函数, 生成随机单词组成的字符串.  
回答: 下面是一个示例的 PostgreSQL 函数，用于生成由随机单词组成的字符串：  
CREATE OR REPLACE FUNCTION generate_random_string(word_count INTEGER, word_length INTEGER)  
  RETURNS TEXT AS $$  
DECLARE  
  alphabet TEXT[] := array['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];  
  random_string TEXT := '';  
BEGIN  
  FOR i IN 1..word_count LOOP  
    DECLARE  
      random_word TEXT := '';  
    BEGIN  
      FOR j IN 1..word_length LOOP  
        random_word := random_word || alphabet[ceil(random() * array_length(alphabet, 1))];  
      END LOOP;  
      random_string := random_string || random_word || ' ';  
    END;  
  END LOOP;  
  RETURN TRIM(random_string);  
END;  
$$ LANGUAGE plpgsql;  
```  
这个函数使用了两个参数：word_count 表示要生成的随机单词的数量，word_length 表示每个随机单词的长度。它同样使用了一个字母表数组 alphabet，在循环中，它从字母表中随机选择一个字母构成单词，并将单词添加到随机字符串中。最后使用 TRIM 函数去除字符串两端的空格，并返回生成的随机字符串。    
### 2、跨境电商场景, 快速判断商标|品牌侵权    
很多业务场景中需要判断商标侵权, 避免纠纷. 例如     
- 电商的商品文字描述、图片描述中可能有侵权内容. 特别是跨境电商, 在一些国家侵权查处非常严厉.     
- 注册公司名、产品名时可能侵权.    
- 在写文章时, 文章的文字内容、视频内容、图片内容中的描述可能侵权.     
而且商标侵权通常还有相似的情况, 例如修改大品牌名字的其中的个别字母, 蹭大品牌的流量, 导致大品牌名誉受损.    
例如postgresql是个商标, 如果你使用posthellogresql、postgresqlabc, p0stgresql也可能算侵权.      
以跨境电商为力, 为了避免侵权, 在发布内容时需要商品描述中出现的品牌名、产品名等是否与已有的商标库有相似.      
对于跨境电商场景, 由于店铺和用户众多, 商品的修改、发布是比较高频的操作, 所以需要实现高性能的字符串相似匹配功能.      
一、准备数据  
创建一张品牌表, 用于存储收集好的注册商标(通常最终转换为文字).     
```    
create unlogged table tbl_ip (   -- 测试使用unlogged table, 加速数据生成    
  id serial primary key,  -- 每一条品牌信息的唯一ID    
  n text  -- 品牌名    
);    
```    
使用随机字符模拟生成1000万条品牌名.    
```    
insert into tbl_ip (n) select md5(random()::text) from generate_series(1,10000000);    
```    
再放入几条比较容易识别的:    
```    
insert into tbl_ip(n) values ('polardb'),('polardbpg'),('polardbx'),('alibaba'),('postgresql'),('mysql'),('aliyun'),('apsaradb'),('apple'),('microsoft');    
```    
```    
postgres=# select * from tbl_ip limit 10;    
 id |                n                     
----+----------------------------------    
  1 | f4cd4669d249c1747c1d31b0b492d84e    
  2 | 2e29f32460485698088f4ab0632d86b7    
  3 | a8460622db4a3dc4ab70a8443a2c2a1a    
  4 | c4554856e259d3dfcccfb3c9872ab1d0    
  5 | b3a6041c5838d70d95a1316eea45bea3    
  6 | fc2d701eca05c74905fd1a604f072006    
  7 | f3dc443060e33bb672dc6a3b79bc1acd    
  8 | 1305b6092f9e798453e9f60840b8db2a    
  9 | 9b07cad251661627e15f239e5b122eaf    
 10 | 8b5d2a468435febe417b17d0d0442b86    
(10 rows)    
postgres=# select count(*) from tbl_ip;    
  count       
----------    
 10000010    
(1 row)    
```    
二、传统方法只能使用like全模糊查询, 但是局部侵权的可能性非常多, 使用模糊查询需要很多很多组合, 性能会非常差.    
例如postgresql是个商标, 如果用户使用了一个字符串为以下组合, 都可能算侵权:      
- post    
- postgres    
- sql    
- gresql    
- postgresql    
- postgre    
写成SQL应该是这样的    
```    
select * from tbl_ip where    
  n like '%post%' or    
  n like '%postgres%' or    