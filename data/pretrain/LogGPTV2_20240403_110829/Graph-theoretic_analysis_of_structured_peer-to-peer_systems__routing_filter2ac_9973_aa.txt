title:Graph-theoretic analysis of structured peer-to-peer systems: routing
distances and fault resilience
author:Dmitri Loguinov and
Anuj Kumar and
Vivek Rai and
Sai Ganesh
Graph-Theoretic Analysis of Structured Peer-to-Peer
Systems: Routing Distances and Fault Resilience
Dmitri Loguinov, Anuj Kumar, Vivek Rai, Sai Ganesh
Department of Computer Science
Texas A&M University
College Station, TX 77843
dmitri,anujk,vivekr,PI:EMAIL
ABSTRACT
This paper examines graph-theoretic properties of existing
peer-to-peer architectures and proposes a new infrastructure
based on optimal-diameter de Bruijn graphs. Since gener-
alized de Bruijn graphs possess very short average routing
distances and high resilience to node failure, they are well
suited for structured peer-to-peer networks. Using the ex-
ample of Chord, CAN, and de Bruijn, we ﬁrst study routing
performance, graph expansion, and clustering properties of
each graph. We then examine bisection width, path over-
lap, and several other properties that aﬀect routing and re-
silience of peer-to-peer networks. Having conﬁrmed that de
Bruijn graphs oﬀer the best diameter and highest connec-
tivity among the existing peer-to-peer structures, we oﬀer
a very simple incremental building process that preserves
optimal properties of de Bruijn graphs under uniform user
joins/departures. We call the combined peer-to-peer archi-
tecture ODRI – Optimal Diameter Routing Infrastructure.
Categories and Subject Descriptors
C.2.2 [Communication Networks]: Network Protocols
General Terms
Algorithms, Performance, Theory
Keywords
Peer-to-peer, Modeling, Graph Theory, DHT, de Bruijn
1.
INTRODUCTION
In the last few years, peer-to-peer networks have rapidly
evolved and have become an important part of the exist-
ing Internet culture. All current peer-to-peer proposals are
built using application-layer overlays, each with a set of
graph-theoretic properties that determine its routing eﬃ-
ciency and resilience to node failure. Graphs in peer-to-peer
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’03, August 25–29, 2003, Karlsruhe, Germany.
Copyright 2003 ACM 1-58113-735-4/03/0008 ...$5.00.
networks range from star-like trees (centralized approaches
such as Napster) to complex k-node-connected graphs (such
as Chord [40], CAN [31] and Pastry [35]). The performance
of each peer-to-peer architecture is determined by the prop-
erties of these graphs, which typically possess Θ(logN ) di-
ameter and Θ(logN ) degree at each node (where N is the
number of peers in the system). Until recently [12], [20],
[27], understanding whether these bounds were optimal and
whether there existed ﬁxed-degree graphs with logN diame-
ter was believed to be the fundamental question of peer-to-
peer research [32], [42].
Besides the diameter and degree, a third very important
property of a peer-to-peer structure is its resilience to simul-
taneous node failure. Without fault resilience, the answer to
logarithmic routing in ﬁxed-degree networks is obvious and
includes a variety of simple tree-like structures. Thus, the
main goal of this work is to ﬁnd a ﬁxed-degree graph with
not only provably minimum diameter, but also maximum
connectivity (i.e., fault resilience) among all such graphs.
Another dimension to this work is to provide a unifying
analytical framework for understanding the various prop-
erties of existing and future peer-to-peer graphs. Many of
the existing proposals (e.g., CAN, Chord, Pastry) have not
been modeled in ways that can provide a clear quantita-
tive assessment of each graph’s resilience to node failure. In
addition to these classical approaches, there are proposals
based on heuristics (e.g., [14], [26], [41]) with no provably-
optimal underlying foundation for choosing one or another
graph structure. Our work supplements such proposals with
a more fundamental insight into the problem and oﬀers an-
alytical tools for evaluating future peer-to-peer routing ar-
chitectures.
The paper is organized as follows. We ﬁrst examine the
problem of obtaining logarithmic routing diameter in ﬁxed-
degree (sparse) graphs. Our work relies on generalized de
Bruijn graphs [19] of ﬁxed degree k and asymptotically op-
timal diameter logkN . However, since the diameter itself
does not tell the whole story, we also study the average dis-
tances between all pairs of nodes since this metric (rather
than the diameter) determines the expected response time
(i.e., number of hops) and the capacity of the peer-to-peer
network.
We next examine clustering and small-world properties
of each graph and explain how they relate to graph expan-
sion. We derive that de Bruijn graphs have an order of
magnitude smaller clustering coeﬃcients than Chord, which
explains the diﬀerences in expansion, resilience, and diam-
eter between the two graphs. We then study the resilience
of these graphs against node failure, or simply their connec-
tivity. In general, connectivity determines the number and
location of failures that a graph can tolerate without becom-
ing disconnected. We examine edge bisection width in each
graph and demonstrate that de Bruijn graphs are several
times more diﬃcult to disconnect than the traditional ap-
proaches. We also examine the amount of overlap between
alternative (parallel) paths leading to any given destination
and investigate how it aﬀects the success of greedy routing
under adversarial node failure.
Having conﬁrmed that de Bruijn graphs oﬀer a resilient
and diameter-optimal routing structure, we provide an algo-
rithm for building such graphs incrementally as peer nodes
join and leave the system. We conclude the paper by show-
ing that under uniform user joins, the diameter of the peer-
to-peer graph remains asymptotically optimal.
2. BACKGROUND
Many current peer-to-peer networks [31], [35], [40], [43]
are based on distributed hash tables (DHTs), which provide
a decentralized, many-to-one mapping between user objects
and peers. This mapping is accomplished by organizing the
peers in some virtual coordinate space and hashing each ob-
ject to these virtual coordinates. The information about
each object (such as the IP address of the owner) is kept
by the peer to whose coordinates the object hashes. Their
distributed structure, excellent scalability, short routing dis-
tances, and failure resilience make DHTs highly suitable for
peer-to-peer networks.
2.1 Peer-to-Peer DHTs
Many current DHTs [17], [35], [37], [43], [44] rely on the
concept of preﬁx-based routing introduced by Plaxton et al.
in [29]. Plaxton’s framework is extended in Tapestry [43] and
Bayeux [17], [44] to accommodate dynamic join/departure
of peers and provide necessary failure-recovery mechanisms.
A similar method based on generalized hypercubes (Pastry)
is shown by Rowstron et al. in [35]. Using an alphabet of size
b, Pastry builds a k-regular graph with diameter logbN and
node degree (b − 1) logb N, b ≥ 2. Among other approaches,
Ratnasamy et al.
[31] propose a peer-to-peer architecture
called Content-Addressable Network (CAN) that maps the
DHT to a d-dimensional Cartesian space. CAN’s diameter
is 1/2dN 1/d and the degree of each node is 2d. Stoica et al.
[40] propose a distributed graph called Chord, which uses a
1D modulo ﬁeld (ring) with the diameter and degree both
equal to log2N .
Recent proposals start to address the issue of routing in
logarithmic time in ﬁxed-degree graphs. For example, Con-
sidine et al.
[8] expand on Chord’s ring structure by con-
structing a digraph (directed graph) of ﬁxed degree; how-
ever, the proposed structure needs to estimate the num-
ber of active nodes to properly build the application-layer
graph. Among tree-based structures, Freedman et al.
[13]
propose a DHT based on distributed tries and Tran et al.
[41] organize peers into a multicast tree of degree O(k2) and
diameter O(logkN ). Xu et al.
[42] study diameter-degree
tradeoﬀs of current DHTs and propose a graph based on a
modiﬁed static butterﬂy. As of this writing, the details of
this framework are still under on-going investigation. An-
other peer-to-peer architecture based on butterﬂy networks
(Viceroy) is shown in [25].
Independently of this work, several recent papers have
also proposed de Bruijn graphs for peer-to-peer networks
[12], [20], [27]. These developments are complementary to
our investigation and provide implementation details and
additional analysis not covered in this paper.
2.2 Fault Tolerance of DHTs
Fault tolerance of peer-to-peer networks is an equally im-
portant topic. Liben-Nowell et al.
[23] examine error re-
silience dynamics of Chord when nodes join/leave the system
and derive lower bounds on the degree necessary to main-
tain a connected graph with high probability. Fiat et al. [11]
build a Censorship Resistant Network that can tolerate mas-
sive adversarial node failures and random object deletions.
Saia et al.
[36] create another highly fault-resilient struc-
ture with O(log3N ) state at each node and O(log3N ) per-
message routing overhead. Unfortunately, very few studies
examine the resilience of existing graphs in comparison with
each other or attempt to understand whether this resilience
can be improved while preserving the diameter and routing
overhead of the graph. We are aware of only one compari-
son study, in which Gummadi et al. [15] ﬁnd that ring-based
graphs (such as Chord) oﬀer more ﬂexibility with route se-
lection and provide better performance under random node
failure compared to several other traditional DHTs.
2.3 Random Graphs
Another direction for building DHTs relies on properties
of random graphs. The main thrust in this area is to build
logarithmic-time routing structures with constant degree.
Pandurangan et al. [28] propose a random DHT graph with
a constant degree and (almost certainly) logarithmic diame-
ter; however, the paper does not provide an eﬃcient routing
algorithm for the proposed structure that can deterministi-
cally explore the low diameter of the graph. Aspnes et al.
[1] examine random graphs of ﬁxed degree l + 1 and derive
upper and lower bounds on the expected routing distance in
such graphs. Their results show that both bounds are pro-
portional to ln
l ln ln N . Law et al. [21] build random expander
graphs based on Hamiltonian cycles with O(logN ) diameter
and O(logN ) degree.
2 N
Even though random graphs of logarithmic diameter can
be built with high probability using random neighbor selec-
tion, the design of eﬃcient routing algorithms competitive
to those in deterministic graphs is still an open issue.
2.4 Optimal-Diameter Graphs
The problem of designing an optimal-diameter graph of
ﬁxed degree has been extensively studied in the past.
In
one formulation of this problem, assume a graph of ﬁxed
degree k and diameter D (the maximum distance between
any two nodes in the graph). What is the maximum number
of nodes N that can be packed into any such graph? A well-
known result is the Moore bound [6], [7]:
N ≤ 1 + k + k2 + ... + k
D
=
kD+1 − 1
k − 1
= NM .
(1)
Interestingly, Moore bound NM is only achievable for triv-
ial values of k and D. In fact, the Moore bound is provably
not achievable for any non-trivial graph [6]. Directed de
Bruijn graphs come close to the Moore bound and can be
built with N = kD nodes [19] or even with N = kD + kD−1
In general, it is not known how close we can
nodes [33].
approach upper bound NM for non-trivial graphs [7]. In the
context of peer-to-peer DHTs, we are concerned with a dif-
ferent formulation of the problem: given N nodes and ﬁxed
degree k, what is the minimum diameter in any graph built
on top of these N nodes? The answer follows from (1):
D ≥ (cid:4)logk (N (k − 1) + 1)(cid:5) − 1 = DM .
(2)
Imase and Itoh [19] construct nearly optimal de Bruijn
graphs of diameter D = (cid:4)logk N(cid:5), which is at most DM + 1;
however, for large k, the two diameters become asymptoti-
cally equal. In this paper, we use the same basic algorithms
[19] even though they can be slightly improved [33].
Another very important metric related to the routing per-
formance of a graph is its average distance µd between every
pair of nodes (note that we include distances from a node to
itself in µd while some of the related work does not). The
lower bound on µd in any k-regular graph is given by the
average distance in the corresponding Moore graph and is
also not achievable for non-trivial values of N and k [38]:
µd ≥ DM − k(kDM − 1)
N (k − 1)2 +
DM
N (k − 1)
≈ DM − 1
k − 1
. (3)
With respect to µd, de Bruijn graphs are again asymp-
totically optimal and converge to the bound in (3) for suﬃ-
ciently large N and k [38].
3. BASICS OF DE BRUIJN GRAPHS
3.1 Motivation
One of the goals of this work is to build a distributed hash
table (DHT) on top of ﬁxed-degree graphs with provably
optimal routing diameter. Since non-trivial Moore graphs
do not exist [6], we use de Bruijn graphs [19] of diameter
(cid:4)logk N(cid:5) and often call them “optimal” since among the
class of practically achievable graphs with simple routing
rules, they are optimal. To illustrate the impressive reduc-
tion in diameter compared to the classical DHT structures,
Under these circumstances, Chord oﬀers a graph with diam-
assume 1 million nodes and degree k ﬁxed at (cid:4)log2 N(cid:5) = 20.
eter D equal to (cid:4)log2 N(cid:5) = 20, while a de Bruijn graph with
smaller: D = (cid:4)log20 N(cid:5) = (cid:4)4.61(cid:5) = 5. Note that the di-
ameter of the corresponding Moore graph is essentially the
same: DM = (cid:4)4.59(cid:5) = 5.
the same number of neighbors has a diameter four times
Throughout the paper, we are concerned with the proper-
ties of the underlying graph of each peer-to-peer network.
Consequently, we examine the diameter and resilience of
these graphs assuming that the hashing function equally
spreads users along the DHT space and that all graphs are
populated with the maximum number of nodes (this as-
sumption is relaxed in section 7). We further assume for
simplicity of notation that the total number of nodes N is
a power of node degree and omit ceiling functions whenever
appropriate.
3.2 Structure of de Bruijn Graphs
De Bruijn graphs [5], [19], [22], [38] are nearly optimal,
ﬁxed-degree digraphs of diameter logkN , where k is the ﬁxed
degree of each node and N is the total number of nodes.
Note that de Bruijn graphs are directed graphs with k out-
going and k incoming edges at each node, which also holds
for many other protocols [35], [40], [43]. Assume that each
100 
110 
prefix A 
000 
010 
101 
111 
001 
011 
x1 
x2  …  xi+1  …  xD 
=Hx 
Hy= 
y1  …  yD–i  …  yD 
Routing path: 
overlap B 
suffix C 
P =
x1 
x2  …  xi+1  …  xD  …  yD 
prefix A 
overlap B 
suffix C 
Figure 1: A de Bruijn graph of degree 2 and diame-
ter 3 (left). Optimal routing from Hx to Hy (right).
node x is hashed to a string Hx drawn from some alphabet
Σ of size k. For example, if k is two, then Hx is a binary
string of 0s and 1s. A directed de Bruijn graph [19] contains
N = kD nodes where D is the diameter of the graph. Each
node Hx in the graph is a string (h1, . . . , hD) of length
D linked to k other nodes (h2, . . . , hD, α), for all possible
α ∈ Σ. A classical de Bruijn graph for k = 2 and N = 8 is
shown in Figure 1 (left) [38]. The diameter of the graph in
the ﬁgure is 3, even though some nodes link to themselves.
In fact, de Bruijn graphs contain exactly k nodes (h, h,. . . ,
h), for all h ∈ Σ, which link to themselves (this makes the
graph irregular). It is possible to create a regular de Bruijn
graph by linking these nodes to each other for added failure
resilience. We discuss this in section 6.
3.3 Routing
Recall that shortest-path routing between any two nodes
in de Bruijn networks follows a greedy procedure executed
by individual nodes in a distributed fashion [19], [38]. As-
sume that node x seeks a shortest path to node y. The choice
of the next-hop neighbor follows a simple string-matching al-
gorithm shown in Figure 1 (right). Node x ﬁnds the longest
overlap between the suﬃx of its hash index Hx and the pre-
ﬁx of y’s hash index Hy. In the ﬁgure, the longest overlap,
labeled B, contains (D − i) digits, for some i. By merging
preﬁx A, overlap B, and suﬃx C, node x can generate the
entire path P to reach y. Notice that P starts with Hx, ends
with Hy, and contains no more than (D − 1) intermediate
nodes (each node is a D-character substring of P , read from
left to right). As an example, again consider the graph in
Figure 1 (left). Suppose node 001 needs to route to node 101
along the shortest path. Using the above procedure, preﬁx
A is 00, overlap B is 1, and suﬃx C is 01. The resulting
shortest path is P = 00101, which translates to 001→010
→101.
3.4 Comparison with Existing Graphs
In this section, we brieﬂy examine diameter-degree trade-
oﬀs of the existing protocols and compare them to those of
de Bruijn graphs. We leave a thorough analysis of numerous
recently proposed graphs [14], [21], [25], [26], [41], [42] for
future work and conduct a detailed study of two classical