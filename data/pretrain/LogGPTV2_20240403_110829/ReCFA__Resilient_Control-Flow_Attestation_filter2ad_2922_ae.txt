### Table 5: Real Exploits Diagnosed by ReCFA

| Program | Source | Type | Detected? |
|---------|--------|------|-----------|
| ffmpeg  | CVE-2016-10190 | heap corruption | ✓ |
| Apache httpd | PoC exploit of [15] | heap corruption | ✓ |
| Nginx   | PoC exploit of [15] | heap corruption | ✓ |

### Offline Measurements and Abnormal Runtime Detection
Offline measurements are used to detect invalid data with respect to the attack, which is flagged as an abnormal runtime measurement. Enumerating valid values for these data is feasible for small IoT programs but becomes challenging for more complex software.

## 6. Related Work

### Control-Flow Attestation
Control-flow attestation (CFA) differs from static attestation, which verifies the integrity of program binaries and configurations. CFA measures the runtime states of a program, including its inputs, outputs, and behaviors [4, 5, 11–13, 16–18, 20, 21, 25, 31, 32, 35, 36, 39].

**Semantic Remote Attestation** [17] uses a trusted language-based virtual machine to attest dynamic properties of platform-independent code running within it. **DynIMA** [11] combines load-time measurements and dynamic taint analysis to enforce binary integrity. The architecture instruments the program with tracking code that performs runtime integrity checks, such as counting instruction sequences between consecutive returns to detect Return-Oriented Programming (ROP) attacks.

**Hardware-Based CFA** [16, 18] uses mechanisms on microcontrollers or off-chip hardware security modules to generate runtime attestation evidence. **C-FLAT** [4] measures the validity of execution paths using the Control Flow Graph (CFG) and aggregates path features using hash operations. An unexpected measurement indicates an illegal path. **LO-FAT** [13] uses processor features and IP blocks, including branch monitors and hash engines, to implement efficient CFA for vanilla programs. **ATRIUM** [39] addresses the Time-Of-Check-Time-Of-Use (TOCTOU) problem by attesting executed instructions on independent hardware. **DIAT** [5] efficiently verifies critical code modules in autonomous systems. **LiteHAX** [12] extends hardware-based attestation to detect data-only attacks. **LAPE** [21] is a CFA for bare-metal systems, separating code into attestation compartments. **MGC-FA** [20] uses a machine-learning model to predict vulnerability and adjust the strictness of CFA. **Tiny-CFA** [31] provides CFA for low-end MCUs, requiring only PoX architecture support. **OAT** [35] leverages CFA to enforce operation-scoped Control-Flow Integrity (CFI), protected by a Trusted Execution Environment (TEE). **ScaRR** [36] is designed for complex systems, providing a control-flow model for abstracting execution paths and reducing path explosion, though it may introduce false negatives due to context missing. ScaRR requires source-code instrumentation, whereas ReCFA uses binary CFG and binary-level static analysis, making it suitable for complex programs where complete path enumeration is difficult.

### Binary-Level Control-Flow Integrity Protections
Many works focus on binary-level CFI defenses [23, 27, 28, 33, 37, 38, 41, 42]. **CCFIR** [41] enforces coarse-grained CFI policies, allowing only whitelisted return targets. **binCFI** [42] also enforces coarse-grained policies on stripped binaries, relaxing constraints for performance. **O-CFI** [27] combines coarse-grained CFI with code randomization to resist information disclosure attacks. **binCC** [38] restricts returns using boundary checking. **Lockdown** [33] is a Dynamic Binary Instrumentation (DBI)-based CFI protection with a shadow stack, creating equivalent classes per shared object and profiling the CFG at runtime. **TypeArmor** [37] enforces arity-based forward-edge CFI by checking parameter compatibility. **τ-CFI** [28] uses both types and numbers of function parameters to enforce forward- and backward-edge control flow transfers. **BPA** [23] constructs sound and high-precision binary-level CFG based on points-to analysis, providing fine-grained CFI policy. These CFI protections generally focus on local enforcement and do not address remote control-flow hijacking or diagnose vulnerable traces triggering exploitation.

## 7. Conclusion

Abstracting runtime control-flow facts and delivering them to the verifier is crucial for CFA. To overcome the limitations of offline path measurement and hash-based attestation in complex software, we propose ReCFA, a new CFA approach that efficiently abstracts control-flow facts and enforces CFI at the binary level. ReCFA relies on static binary analysis and instrumentation to condense runtime control-flow facts into a deliverable size, enforcing context-sensitive CFI with a remote shadow stack and policy mappings. For efficiency and security, ReCFA uses a kernel-based trust anchor with user-level hardware-assisted memory isolation to protect prover-side mechanisms. Future work includes supporting multi-threaded programs and using stronger hardware features for a more robust trust anchor. The source code of ReCFA is available at [https://github.com/suncongxd/ReCFA](https://github.com/suncongxd/ReCFA).

## Acknowledgments
We thank the anonymous reviewers for their constructive comments and Dr. Xiaozhu Meng for advice on using the Dyninst instrumentation tool. Yumei Zhang, Xinzhi Liu, Cong Sun, and Xiao Kan were supported by the National Natural Science Foundation of China (No. 61872279) and the Key Research and Development Program of Shaanxi (No. 2020GY-004).

## References
[References remain unchanged and are listed as provided.]

---

This optimized version aims to improve clarity, coherence, and professionalism, while maintaining the original content and structure.