### Presentation Format

- **Three Parts in Today's Presentation:**
  - Kernel Auditing Research
  - A Sample of Exploitable Bugs
  - Kernel Exploitation
- **Q&A:** Questions are welcome at the end of each section, but can be asked throughout the presentation.

### Part (i): Kernel Auditing Research

#### Overview of Kernel Auditing
- **Manual Open Source Kernel Security Audit:**
  - **Operating Systems:** FreeBSD, NetBSD, OpenBSD, and Linux
  - **Duration:** Three months (July to September 2002)

#### Timeframe by Operating System
- **NetBSD:** Less than one week
- **FreeBSD:** A week or less
- **OpenBSD:** A couple of days
- **Linux:** All available free time

#### Prior Work
- **Dawson Engler and Stanford Bug Checker:**
  - Uncovered many concurrency and synchronization bugs.
- **Linux Kernel Auditing Project:**
  - Ongoing efforts to improve kernel security.

#### Presentation Notes
- The term "bug" is used to refer to a vulnerability unless otherwise specified.
- Over one hundred vulnerabilities were patched by the end of the auditing period.

#### Kernel Security Myths
1. **Myth 1: Kernels are written by security experts and programming gods.**
   - **Reality:** Initial bugs were found within hours across all kernels, indicating that even expert-written code can have vulnerabilities.
2. **Myth 2: Kernels never have simplistic security bugs.**
   - **Reality:** Simple bugs were frequently identified without extensive code tracking.
3. **Myth 3: Kernels, if buggy, are difficult to exploit.**
   - **Reality:** Exploits for some bugs were as short as 38 lines, and stack overflows required minimal effort.

#### Research Conjectures
- **Kernel Code is Not Special:**
  - It is just another program.
- **Language Implementation Bugs:**
  - Kernels use languages with known pitfalls.
- **Human Error:**
  - Kernel programmers, like any other, make mistakes.

#### Auditing Methodology
- **Focus on Simple Classes of Bugs:**
  - Entry points such as system calls and device drivers.
- **Bottom-Up Techniques:**
  - Targeted auditing evolved with experience.
- **System Calls and Device Drivers:**
  - Simple entry points by design, with IOCTLs being particularly versatile.

#### Immediate Results
- **First Bug Found Quickly:**
  - Within hours for all operating systems.
- **Observations:**
  - Varying degrees of code quality and security bugs.
  - Device drivers are a significant source of bugs.
  - Bugs often exhibit signs of propagation and clustering.
  - Identical bugs across platforms.

#### Research Bias
- **Manual Auditing:**
  - Inherently biased.
- **Automated Bug Discovery:**
  - Dawson Engler's work provides a less biased approach.

#### Evidence Contradicting Kernel Myths
- **Myth 1: Kernels are [not] written by gods.**
  - Initial bugs found quickly.
  - Large quantities of bugs (10-30 per day).
- **Myth 2: Kernels do have simplistic bugs.**
  - No intensive code tracking required.
  - Lack of input validation in some cases.
- **Myth 3: Kernels, if buggy, are [not] difficult to exploit.**
  - Short and effective exploits.

#### Attack Vectors
- **More Code, More Vulnerabilities:**
  - User-controllable entry points (device drivers, system calls, file systems) are vectors for exploitation.
- **Less Generic Kernels:**
  - Core kernel code resulted in fewer bugs.

#### Vendor Response
- **Open Source Security Response:**
  - Very strong, with fast responses from key figures.
  - **Examples:**
    - Theo de Raadt (OpenBSD) responded in 3 minutes.
    - Alan Cox (Linux) responded in under 3 hours.
- **Personal Bias:**
  - Strong belief in open-source software, leading to potentially biased responses.

#### Additional Observations
- **Linux:**
  - Alan Cox was the primary contact and involved throughout.
  - Patches were attributed to the auditor.
- **RedHat:**
  - Released advisories, possibly influenced by the audit.
- **FreeBSD:**
  - Formalized process with a security officer.
  - Effective dialogue and standardization.
- **NetBSD:**
  - Quick resolution after a small waiting period.
- **OpenBSD:**
  - Fastest response, with advisories released shortly after reports.

### Part (ii): A Sample of Exploitable Kernel Bugs

#### Example Bugs
- **i386_set_ldt (NetBSD and OpenBSD):**
  - Incorrect boundary checks.
- **cl_getcmap (Amiga):**
  - Improper index and count validation.
- **view_get_colormap (Amiga):**
  - Memory allocation and copyout issues.
- **hpux_sys_getcontext (HP300):**
  - Potential integer overflow.
- **lfs_bmapv (UFS/LFS):**
  - Similar issues with boundary and memory handling.

### Pause for Audience Participation
- **Questions?**