Connection String Parameter Pollution Attacks 
Chema Alonso1, Manuel Fernandez1, Alejandro Martín1 and Antonio Guzmán2 
1Informatica64, S.L. 
2Universidad Rey Juan Carlos 
1{chema,mfernandez,amartin}@informatica64.com, PI:EMAIL 
Abstract. In 2007 the ranking of the top ten critical vulnerabilities for the 
security of a system established code injection as the top 2, closely following 
top 1 XSS attacks. The first release candidate of the 2010 version of the ranking 
has promoted code injection attacks to top 1. Actually, the most critical attacks 
are those that combine XSS techniques to access systems and code injection 
techniques to access the information. The potential damage associated with this 
kind of threats, the total absence of background and the fact that the solution to 
mitigate these vulnerabilities must be worked together with programmers, 
systems administrators and database vendors justifies an in-depth analysis to 
estimate all the possible ways of implementing this technique. 
Keywords: Code injection attacks, connection strings, web application 
authentication delegation. 
1   Introduction 
SQL injections are probably the most known injection attacks to web applications by 
abusing its database architecture. Many different approaches and techniques have 
been studied and analyzed so far, and the published results conclude that to prevent 
these attacks from being successful, development teams need to establish the correct 
filtering levels on the inputs to the system.  
In the case of the attack presented in this paper, responsibility lays not only on 
developers, but also on system administrators and database vendors. This attack 
affects web applications, but instead of abusing implementation flaws in the way 
database queries are crafted, which is the most commonly found scenario on other 
injection attacks, it abuses the way applications connect to the database. 
According to OWASP [1], in 2007 the ranking of the top ten critical vulnerabilities 
for the security of a system established code injection attacks as the top 2, closely 
following top 1 XSS attacks. The first release candidate of the 2010 version of the 
ranking has promoted code injection attacks to top 1. Actually, the most critical 
attacks are those that combine XSS techniques to access systems and code injection 
techniques to access the information. This is the case for the so-called connection 
string parameter pollution attacks. Potential impact of this type of vulnerability and 
the total absence of background justify an in-depth analysis to estimate all possible 
attack vectors using this technique. 
This paper is structured is in three main sections. The first is this short introduction 
where the foundations of the connection strings and existing mechanisms for the 
implementation of web applications authentication will be introduce. Section two 
proposes a comprehensive study of this new attack technique, with an extensive 
collection of test cases. The article concludes briefly summarizing the lessons learned. 
1.1   Connections Strings 
Connection strings [2] are used to connect applications to database engines. The 
syntax used on these strings depends on the database engine to be connected to and on 
the provider or driver used by the programmer to establish the connection. 
One way or another, the programmer must specify the server and port to connect 
to, the database name, authentication credentials, and some connection configuration 
parameters, such as timeout, alternative databases, communication protocol or 
encryption options. 
The following example shows a common connection string used to connect to a 
Microsoft SQL Server database: 
“Data Source=Server,Port; Network Library=DBMSSOCN; 
Initial Catalog=DataBase; User ID=Username; 
Password=pwd;” 
As the example shows, a connection string is a collection of parameters separated 
by semicolons (;), each parameter being a key-value pair. The attributes used in the 
example correspond to the ones used in the “.NET Framework Data Provider for SQL 
Server”, which is chosen by programmers when they use the “SqlConnection” class in 
their .NET applications. Obviously, it is possible to connect to SQL Server using 
different providers such as: 
- 
“.NET Framework Data Provider for OLE DB” (OleDbConnection) 
- 
“.NET Framework Data Provider for ODBC” (OdbcConnection) 
- 
“SQL Native Client 9.0 OLE DB provider” 
The most common and recommended way to connect a .NET based application 
and a SQL server, is to use the framework default provider, where the connection 
string syntax is the same regardless the different versions of SQL Server (7, 2000, 
2005 and 2008). This is the one used in this article to illustrate the examples. 
1.2   Web Application authentication delegation 
There are two ways of defining an authentication system for a web application: create 
an own credential system, or delegate it to the database engine. 
In most cases, the application developer chooses to use only one user to connect to the 
database. Seen from the database side, this database user represents the entire web 
application. Using this connection, the web application will make queries to a custom 
users table where the user credentials for the application are stored. 
Fig. 1. Common web application authentication architecture 
The web application is identified by a single database user with access to the entire 
application content in the database, thus it is impossible to implement a granular 
permission system in the database over the different object, or to trace the actions of 
each user in the web application, delegating these tasks to the web application itself. 
If an attacker is able to abuse some vulnerability in the application to access the 
database, the whole database will be exposed. This architecture is very common, and 
can be found in widely used CMS systems such as Joomla, Mambo and many others. 
Usually, the target of the attacker is to get the application users credentials from the 
users table in the database. 
The alternative consists in delegating the authentication to the database engine, so 
that the connection string does not contain a fixed set of credentials, but will use those 
entered by the application user and it is the database engine responsibility to check 
them.  
Database management applications always use this delegated authentication, so 
that the user connecting to the application will only be able to access and control 
those objects and actions for which he has permissions. With this architecture, it is 
possible to implement a granular permission system and to trace user actions in the 
database.  
Database engine 
Web application 
Fig. 2. Web application delegated authentication architecture. 
Both methods offer different advantages and disadvantages, apart from the ones 
already mentioned, which are outside the scope of this article. The techniques 
described in this paper will focus on the second environment: web applications with 
delegated authentication to the database engine. 
2   Connection String Injection 
In a delegated authentication environment connection string injection techniques 
allow an attacker to inject parameters by appending them with the semicolon (;) 
character. 
In an example where the user is asked to enter a username and a password to create 
a connection string, an attacker can void the encrypting system by entering a 
password such as "pwd; Encryption=off", resulting in a connection string like: 
“Data Source=Server,Port; Network Library=DBMSSOCN; 
Initial Catalog=DataBase; User ID=Username; 
Password=pwd; Encryption=off” 
When the connection string is populated, the Encryption value will be added to the 
previously configured set of parameters. 
2.1   Connection String Builder in .NET 
Aware of this exploitation [3] of the connection strings, Microsoft included the 
“ConnectionStringBuilder” [4] classes on it's version 2.0 of the Framework. They are 
meant 
to 
create 
secure 
connection 
strings 
through 
the 
base 
class 
(DbConnectionStringBuilder) or through the specific classes for the different 
providers (SqlConnectionStringBuilder, OleDbConnectionStringBuilder, etc…), and 
they achieve this by allowing just key-value pairs for attributes and by escaping 
injection attempts. 
The use of these classes when creating a connection string would prevent the 
injections. However, not every developer or application uses them. 
2.2   Connection String Parameter Pollution 
Parameter pollution techniques are used to override values on parameters. They are 
well known in the HTTP [5] environment but they are also applicable to other 
environments. In this example, parameter pollution techniques can be applied to 
parameters in the connection string, allowing several attacks. 
2.3   Connection String Parameter Pollution (CSPP) Attacks 
As an example scenario to illustrate these attacks, a web application where a user 
[User_Value] and a password [Password_Value] are required is served by a Microsoft 
Internet Information Services web server running on a Microsoft Windows Server. 
The application user credentials are going to be used to create a connection string to a 
Microsoft SQL Server database as follows: 
Data source = SQL2005; initial catalog = db1; 
integrated security=no; user id=+’User_Value’+; 
Password=+’Password_Value’+;  
This connection string shows how the application is connecting to a Microsoft SQL 
Server database engine. Knowing this, and attacker can perform a Connection String 
Parameter Pollution Attack. The idea of this attack is to add a parameter to the 
connection string with the desired value, regardless of if it already was in the string or 
the value with which was set up. The component used by .NET applications to craft 
the connection string will use the value of the last occurrence of the parameter in the 