to construct a temporary calculation sequence to calculate the
linear combination of each layer. First, add the data returned to
the calculation sequence. Then for each layer, judge whether
it is needed that get an element from the authentication path to
add the left and right boundaries of the calculation sequence.
If the left boundary node of the sequence is a left child node
or the right boundary of the sequence is a right child node,
need not get an element from the authentication path to add
to the calculation sequence. If the left boundary node of the
sequence is a right child node or the right boundary of the se-
quence is a left child node, need get an element from the au-
thentication path to add to the left or right boundary of the cal-
culation sequence. In this example, the calculation sequence at
the beginning is {1, 3, 6, 7}, and the left boundary node of the
sequence is the right child node, then need get the ﬁrst element
in authentication path to add to the left boundary of the cal-
culation sequence, similarly, because the right boundary node
of the sequence is the left child node, continue to get the ﬁrst
element of the authentication path to add to the right bound-
ary of the calculation sequence, the calculation sequence be-
comes {2, 1, 3, 6, 7, 3} . The calculation rule of the calculation
sequence is that every two adjacent nodes are linearly combined
by the corresponding weights, and the result is added to the cal-
culation sequence of the upper layer. Now, the new calculation
sequence is {9, 39, 13}. Then it continues to judge whether to
get element from the authentication path to add it to the current
calculation sequence and calculate a new calculation sequence.
Finally, it calculates the value of the root node, and compares it
with the value of root node stored in location. If the comparison
is consistent, the result returned is integrity.
5. Correctness and Security Analysis
DFHMT must ensure that it is correct and secure, the follow-
ing section analyzes the correctness and security respectively.
10
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
11
9
range
veriﬁcation
Algorithm
rangeVer f iy(hsk, i, datai, j, authi j)
Input: the private key of FHE hsk , the data index i, the data
element datai, j and the corresponding authentication path
authi, j returned by signal element query algorithm;
algorithm
Output: if veriﬁcation is successful, return 1, otherwise return
0;
return singleVeri f y(hsk, i, datai, authi)
nodei ← f ind(i, dmtVeri f ierTree)
node j ← f ind( j, dmtVeri f ierTree)
ComS equence.copy(datas)
1: begin
2: if i > j then
return 0
3:
4: end if
5: if i == j then
6:
7: else
8:
9:
10:
11: end if
12: for every-level do
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23: end for
24: return basis.veri f y(ComS equence.pop())
weights ← getWeights(nodei, node j)
if i mod 2 == 1 then
end if
if j mod 2 == 0 then
ComS equence.addTail(decryptε(hsk, dsAuth.pop(0))
end if
ComS equence ← ComS equence.compute(weights)
i ← i/2, j ← j/2
nodei ← nodei.parent, node j ← node j.parent
ComS equence.addHead(decryptε(hsk, dsAuth.pop(0))
N = N0 ⊗ ε(wv
the root node stored by itself. Let N is the node in the critical
path, N0 and N1 are the left and right child node of node N re-
spectively, the corresponding plaintext weights are wv
0 and wv
1 ,
then can calculate the node N by Equation (1).
0) ⊕ N1 ⊗ ε(wv
1)
(1)
For node Nd storing element xi , veriﬁer can calculate Nd ⊗
d)⊕ sib(Nd)⊗ ε(wv
ε(wv
sib) to get the parent node Nd−1 of the node
Nd , and also can get the plaintext value of Nd−1 by dε(Nd) ×
+ dε(sib(Nd)) × ε(wv
wv
sib), and so on, ﬁnally get the root node
d
dε(Nroot) . According to the fully homomorphic nature of FHE,
the root node stored by veriﬁer is the same with dε(Nroot).
Assuming that both veriﬁer and prover execute the algo-
rithms according to the correct steps, and generate the correct
result without being maliciously tampered, veriﬁer can recal-
culate the root node according to the result returned and the
corresponding authentication path, and comparing it with the
root node stored in location is always veriﬁed successfully. Al-
though the steps of the range query algorithm and the result
returned is slightly diﬀerent from general query algorithm, they
are all veriﬁed by the nature of the FHE. The analysis process
is basically the same, so we will not go into details.
Therefore, DFHMT is correct.
(2) Security
In order to analyze the security of DFHMT, suppose an
adversary Adv with suﬃcient computational ability appends
poly(λ) data into DFHMT. For the adversary Adv, the Merkle
tree structure of veriﬁer VeriferTree , that is, the set of plain-
text weights weights and private key hsk are secret, and the
adversary can not obtain them. Adversary to win, it is nec-
essary to output a tuple (datai∗ , i∗, authi∗ (cid:60) Auth) accord-
ing to the Merkle tree structure of prover ProverTree, and
singleVeri f y(hsk, i∗, datai∗ , authi∗) → 1 , where 1 ≤ i∗ ≤
poly(λ), i∗ > poly(λ).
If the adversary wins, either replace, modify the node in the
Merkle tree, or construct the node yourself. In both cases, a
pair of collisions can be found, that is, a pair of FHE ciphertext
collisions are found using the ciphertext weights [weights]FHE,
so that the ciphertext operation result is consistent with the root
node of the client. This is diﬃcult to achieve if the adversary
Adv does not know the plaintext weights weights and the private
key hsk.
Fig. 11. data and the corresponding authentication path after querying No.2 dat
The DFHMT constructed in this paper can also eﬀectively
prevent tampering attacks as shown in Fig. 11. The numbers
in Figure 3.11 are only used to distinguish diﬀerent nodes. As-
suming that the No.2 data is queried in a Merkle tree with 6 data
11
(1) Correctness
Veriﬁer selects any λ ∈ (cid:3), executes getKey algorithm to
generate the public/private key pair of FHE (hpk, hsk) , pub-
lishes the public key , and executes initVeriﬁer algorithm once
to construct an empty tree VeriﬁerTree . Prover receives hpk
and executes initProver algorithm once to construct an empty
tree ProverTree. Veriﬁer executes appendVeriﬁer algorithm n
times and executes the extendVeriﬁer algorithm as needed, to
get any VeriﬁerTree updated and the corresponding evidence in-
formation basis . Prover executes the appendProver algorithm
n times and extendProver algorithm necessary times to get any
ProverTree updated. At this time, VeriﬁerTree and ProverTree
both contains m weights, and the weight relationship of the cor-
responding position is ε(wv
θ , where 1 ≤ θ ≤ m .
In the query and veriﬁcation phase, veriﬁer executes the
query qi for the element xi, and veriﬁer executes query algo-
rithm and returns the correct query result, the set of the sibling
nodes {sib(Ni)|l = d, d − 1, . . . , 1} in the critical path constitutes
authentication path authi , the nodes , Nd−1, . . . , N1 is the indi-
vidual node in the critical path which stores the nodes from xi
node to N1 node that is the child node of the ProverTree root
node. Veriﬁer executes algorithm to verify the result according
to private key hsk , the tree of plaintext weights VeriﬁerTree and
θ) = wp
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT3121221234(cid:178)Query56232432Return312465'23'(cid:55)(cid:68)(cid:80)(cid:83)(cid:72)(cid:85)(cid:72)(cid:71)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)32'(cid:178)'2'21'(cid:38)(cid:82)(cid:85)(cid:85)(cid:72)(cid:70)(cid:87)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)12231'32(cid:178)'/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
12
appended, the correct result and authentication path are {#2} and
{#1, # 22, #32} respectively. Get the root node ρ(cid:48) by calculat-
ing the hash(including chameleon hash) layer by layer and then
verify the integrity of the data compared with the ρ stored in
location. However, the information returned by prover may not
be the data to be queried but other data in the tree, such as the
No.5 data {# 5} and the corresponding authentication path {# 6,
# 24, # 31}, the hash function used to calculate can not distin-
guish the wrong result, also can calculate the correct root node
ρ(cid:48) . However, DFHMT also needs to use weights when cal-
culating the root node. If the data and the authentication path
returned by veriﬁer can not ensure to match the corresponding
weights, the root node calculated must be wrong and the ver-
iﬁcation fails. In fact, prover can not construct the collisions
according to ciphertext weights, which is the key to preventing
such attacks.
Through the above analysis, DFHMT is secure.
is only executes once, and the complexity of the algorithm is
O(C) . For algorithm, ﬁrst encrypts the data once, and then per-
forms once ciphertext multiplication and once ciphertext addi-
tion on each layer, therefore the complexity of the algorithm
is O(log(n0) . For extendProver algorithm, its complexity de-
pends on the number of weight needed for the current extension,
and appending µ data elements needs about 2µ weights, so the
complexity of extendProver algorithm is O(µ). singleQuery and
rangeQuery algorithms need to get a constant number of nodes
on each layer when generating the authentication path, and the
complexity is O(log(n)).
Table 2. Complexity of DFHMT
Entity
Veriﬁer
Initialization
O(C)
Store
Extend
× : O(C) O(log(n))
ε : O(µ)
Insert
+ : O(C)
× : O(log(n)
ε : O(C)
⊕ : O(log(n)) O(µ)
⊗ : O(log(n))
O(n)
6. Cost Analysis And Performance comparison
Prover
O(C)
6.1. Cost Analysis
First, analyze the storage cost of DFHMT. Suppose that the
current full tree contains n elements, the server needs to store
all the none-leaf nodes, each node consists of the value of the
node, the weight of the corresponding edge, and the pointer to
its parent/child node. Therefore, the space complexity of server
is O(n) . For client, need not to store the value of the internal
nodes of the tree, and the weights can be recalculated using
PRF. The client needs to store the evidence information basis
(root node), and because the scheme sets multiple root node,
the storage space required by client is O(log(n)) .
For the time complexity of DFHMT, it is analyzed sepa-
rately from the client and the server. Client executes the al-
gorithms: initVeriﬁer, appendVeriﬁer, extendVeriﬁer, singleV-
erify,rangeVerify. For initVeriﬁer algorithm, initializes Veri-
ﬁerTree, basis, size, capacity, depth and the complexity of the
algorithm is O(C) . For appendVeriﬁer algorithm, needs to cal-
culate the value of the root node updated, which needs log(n)
times multiplications operations and an addition operation, the
complexity of the algorithm is O(log(n)). For extendVeriﬁer al-
gorithm, generates at most the number of weights needed to ap-
pend µ elements, the number of the weight is not more than 2µ,
and needs O(µ) times FHE encryption operation and an multi-
plication operation, so the complexity of the algorithm is O(µ).
The client executes the veriﬁcation algorithm divided into sin-
gle element veriﬁcation and range veriﬁcation. For algorithm,
needs to execute log(n) times cycles, each cycle performs a de-
cryption operation, a multiplication operation and an addition
operation, and ﬁnally performs a comparison, so the complex-
ity of the algorithm is O(log(n)). For rangeVerify algorithm,
suppose has queried M consecutive elements, at most needs
2O(log(n)) times decryption operations and (M − 1)O(log(n))
times addition operations and multiplication operations, there-
fore the complexity of rangeVerify algorithm is O(M log(n)).
Server executes algorithms:
initProver, appendProver, ex-
tendProver, singleProver, rangeProver. For initProver algo-
rithm, server constructs an empty tree, initializes DS , which
Table 3. Complexity of various query and veriﬁcation
Single
query
Single verify Range
query
Range verify
O(log(n))
ε : O(log(n))
× : O(log(n)) O(log(n)
+ : O(log(n))
ε : O(log(n))
× : O(M log(n))
+ : O(M log(n))
6.2. Performance comparison
Testing environment: Processor Intel Core¢ i5-3210M CPU
@ 2.50GHzMemory 4 GB; OS CentOS 7 64 bit; Fully ho-
momorphic encryption library HElib; The client uses Pseudo-
Random Number Generator to simulate the process of data gen-