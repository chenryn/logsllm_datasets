title:Revisiting Square-Root ORAM: Efficient Random Access in Multi-party
Computation
author:Samee Zahur and
Xiao Wang and
Mariana Raykova and
Adrià Gasc&apos;on and
Jack Doerner and
David Evans and
Jonathan Katz
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Revisiting Square-Root ORAM
Efﬁcient Random Access in Multi-Party Computation
Samee Zahur∗
∗University of Virginia
Xiao Wang†
Jack Doerner∗
David Evans∗
Mariana Raykova‡
Adrià Gascón§
Jonathan Katz†
†University of Maryland
‡Yale University
§University of Edinburgh
Abstract—Hiding memory access patterns is required for
secure computation, but remains prohibitively expensive
for many interesting applications. Prior work has either
developed custom algorithms that minimize the need for
data-dependant memory access, or proposed the use of
Oblivious RAM (ORAM) to provide a general-purpose
solution. However, most ORAMs are designed for client-
server scenarios, and provide only asymptotic beneﬁts in
secure computation. Even the best prior schemes show
concrete beneﬁts over naïve linear scan only for array
sizes greater than 100. This immediately implies each
ORAM access is 100 times slower than a single access
at a known location. Even then, prior evaluations ignore
the substantial initialization cost of existing schemes.
We show how the classical square-root ORAM of
Goldreich and Ostrovsky can be modiﬁed to overcome
these problems, even though it is asymptotically worse than
the best known schemes. Speciﬁcally, we show a design
that has over 100x lower initialization cost, and provides
beneﬁts over linear scan for just 8 blocks of data. For all
benchmark applications we tried, including Gale-Shapley
stable matching and the scrypt key derivation function, our
scheme outperforms alternate approaches across a wide
range of parameters, often by several orders of magnitude.
I. INTRODUCTION
Over the past decade, advances in protocol design and
implementation [2, 17, 26], cryptographic techniques [3,
20, 29, 41], and approaches for constructing smaller
circuits [19, 31] have combined to make circuit-based
secure computation efﬁcient enough for many practical
uses. Nevertheless, typical applications still exhibit an
unacceptable performance penalty when computed using
such protocols — especially those employing algorithms
that make heavy use of data-dependent memory access.
Although such accesses are constant-time operations
when performed locally, they require (in general) time
proportional to the size of the memory when performed
using circuit-based secure-computation protocols, be-
cause the access patterns must be hidden. For this reason,
researchers, beginning with Gordon et al. [15], have
investigated secure computation in the random access
machine (RAM) model of computation [7, 9, 18, 23, 24,
25, 36, 40]. A primary building block in this model is
oblivious RAM (ORAM) [12], which provides a memory
abstraction that can read and write to arbitrary locations
without leaking any information about which locations
were accessed.
ORAM protocols were originally proposed for a
client-server setting where a client stores and manipu-
lates an array of length n on an untrusted server without
revealing the data or access patterns to the server. Gordon
et al. adapted ORAM to the setting of secure computa-
tion [15], where parties collectively maintain a memory
abstraction that they can jointly access access, while
hiding the access patterns from everyone. In essence,
the parties run a secure-computation protocol to store
shares of the state of the underlying ORAM protocol,
and then use circuit-based secure computation to execute
the ORAM algorithms.
Although there is a rich literature devoted to develop-
ing ORAM protocols with improved performance [4, 13,
14, 21, 28, 30, 32, 37], most of this literature focuses on
optimizing performance in the client-server setting, and
most work on RAM-based secure computation (RAM-
SC) uses existing ORAM protocols (to a ﬁrst approx-
imation) as black boxes. We highlight, however, that
there are a number of differences between applications
of ORAM in the two settings:
1) In the client-server setting the client owns the data
and performs the accesses, so the privacy require-
ment is unilateral. In the RAM-SC setting none of
the parties should be able to learn anything about
the data or access patterns.
2) In the client-server setting the client’s state should
be sublinear in n or else the problem is trivial; for
RAM-SC, however, the linear state is stored across
both parties.
3) In the client-server setting the most important met-
ric is the total communication complexity. In the
RAM-SC setting other measures of efﬁciency be-
come more important. Speciﬁcally, the algorithmic
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Samee Zahur. Under license to IEEE.
DOI 10.1109/SP.2016.21
DOI 10.1109/SP.2016.21
218
218
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 
complexity is important because the algorithms will
be emulated using generic secure computation.
4) In the client-server setting, the initialization step
(when the client outsources its data to the server) is
“free” because it is a local action on the part of the
client. In the RAM-SC case, the parties must use
a distributed protocol for initialization and the cost
of doing so may be prohibitive.
Existing work on ORAM has focused entirely on
asymptotic performance; we are not aware of any prior
work whose aim is to improve performance for concrete
values of n. Indeed, prior work in the RAM-SC setting
has found that a linear scan over the data (i.e., a triv-
ial ORAM construction) outperforms more-complicated
ORAM constructions until n becomes quite large [15,
34, 35] (in practice, n is often small even when the
inputs are large since n may denote the length of a single
array rather than the entire memory being used by the
computation, and each memory block may contain many
individual data items). This means that for practical
sizes, the entire body of research on ORAM has had
little impact as far as RAM-SC is concerned.
Contributions. We re-visit
the classical square-root
ORAM of Goldreich and Ostrovsky [12], and propose
a number of modiﬁcations to that construction with the
goal of obtaining an ORAM scheme suitable for secure
computation in the semi-honest setting:
1) In the original scheme, the client uses a hash func-
tion to compute the position map (i.e., the mapping
from semantic addresses to physical addresses). We
replace this with a shared array storing the position
map explicitly. This is particularly beneﬁcial when
the underlying ORAM algorithms are computed
using generic circuit-based secure computation.
2) Because the position map is stored explicitly, initial-
ization and reshufﬂing (expensive operations per-
formed sporadically) can be made much more efﬁ-
cient than in the original construction, as they can
be based upon Waksman shufﬂing networks [33]
rather than oblivious sorting.
3) As observed in prior work [32] the position map is
a constant factor smaller than the original mem-
ory array. We use ORAMs recursively to enable
oblivious access to the position map, and develop a
number of optimizations in order to obtain a secure
and efﬁcient protocol.
We implement and evaluate our construction (code
available at http://oblivc.org/) and show that for small-to-
moderate values of n our scheme offers more efﬁcient
data access than Circuit ORAM [34]. In fact, our scheme
outperforms even the trivial ORAM (i.e., linear scan) for
n as small as 8 (the exact crossover point depends on
the block size used as well as the underlying network
and processor). Our construction also signiﬁcantly out-
performs prior work in terms of initialization time. To
understand how the properties of different applications
impact ORAM performance, and demonstrate the general
applicability of our design, we implement and evaluate
several benchmark application,
including secure two-
party computations of the Gale-Shapley stable matching
algorithm, breadth-ﬁrst search, binary search, and the
Scrypt hash function. The resulting protocols are more
efﬁcient than prior approaches by an order of magnitude
or more in some cases.
II. BACKGROUND
This section provides a brief introduction to multi-
party computation (MPC), oblivious RAM (ORAM),
RAM-based secure computation (RAM-SC), and closely
related protocols.
A. Multi-Party Computation
Secure multi-party computation [11, 38] enables two
or more parties to collaboratively evaluate a function
that depends on secret inputs from all parties, while
revealing nothing but only the result of the function. In
most generic constructions of multi-party computation,
the function to be evaluated is represented as a circuit
(either Boolean or arithmetic). Numerous circuit-based
multi-party computation protocols have been developed
for different scenarios. In this paper, we focus on using
our ORAM design with Yao’s garbled circuit protocol.
However, our scheme also works with other MPC pro-
tocols in general, and does not depend on any speciﬁcs
of Yao’s protocol.
Garbled circuits protocols involve parties, denoted
the generator and evaluator. Given a publicly known
function f , the generator associates each input bit with
two garbled keys k0,k1, and computes a “garbled” circuit
representation of the function f , GCf . Given garbled
keys corresponding to inputs x and y,
the evaluator
can obliviously evaluate GCf
to learn garbled keys for
f (x,y). The generator generates and sends GCf
output
and the input keys for its own input. The generator and
evaluator execute an oblivious transfer protocol to enable
the evaluator to learn the input keys corresponding to its
input without revealing that input to the generator. After
obtaining its input keys, the evaluator can obliviously
219219
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 
evaluate GCf
coded in the ﬁnal step.
to obtain the output keys which are de-
B. Oblivious RAM
Oblivious RAM provides a memory structure that
hides access patterns [12]. An ORAM scheme consists
of two protocols: an initialization protocol that takes as
input an array of elements, initializes a new oblivious
structure in memory; and an access protocol that imple-
ments each logical access to the ORAM with a sequence
of physical accesses to the underlying structure.
To be secure, an ORAM must satisfy two proper-
ties: 1) the physical access pattern of the initialization
protocol is indistinguishable when initializing different
input arrays of the same size; 2) for any two sequences
of semantic accesses of the same length, the physical
access patterns produced by the access protocol must
be indistinguishable. Note that it is always possible to
implement a secure initialization protocol by performing
the access protocol iteratively on all input elements, and
this is the approach taken by previous ORAM designs
used in RAM-SC. It can be, however, very inefﬁcient to
initialize the ORAM through repeated accesses.
Goldreich and Ostrovsky [12] introduced two ORAM
constructions with a hierarchical layered structure: the
ﬁrst, Square-Root ORAM, provides square root access
complexity; the second, Hierarchical ORAM, requires a
logarithmic number of layers and has polylogarithmic
access complexity. A recent series of ORAM schemes,
beginning with the work of Shi et al. [30], adopted a se-
quence of binary trees as the underlying structure. While,
asymptotically,
the most bandwidth efﬁcient ORAM
constructions known use the hierarchical paradigm [21],
tree-based ORAMs are considered more efﬁcient for
practical implementations especially when used in MPC
protocols. This is primarily because classical hierarchical
constructions use hash functions or pseudorandom func-
tions (PRFs) to shufﬂe data in the oblivious memory.
In an MPC context these functions must be executed as
secure computations with large circuits.
C. RAM-Based Secure Computation
In traditional MPC, general
input-dependent array
access incurs a linear-time overhead since all elements
need to be touched to hide the position of interest. RAM-
based secure computation (RAM-SC) combines ORAMs
with circuit-based MPC protocols, to enable secure ran-
dom memory accesses [15]. In RAM-SC, the bulk of
the computation is still performed by a circuit-based
protocol as in traditional MPC, but memory accesses
is implemented
are performed using an ORAM that
within the MPC protocol. For each access, the circuit
now emulates an ORAM access step to translate a secret
logical location into multiple physical locations that must
be accessed. The physical locations are then revealed to
the two parties, which pass the requested elements back
into the circuit for use in the oblivious computation.
Finally, the circuit produces new data elements to be
written back to those physical positions, hiding which
elements were modiﬁed and how they were permuted.
One such structure is maintained for each array that
needs input-dependent general random access.
Two-party RAM-SC was ﬁrst formulated by Gordon et
al. [15] with an implementation based on a tree-based
ORAM scheme proposed by Shi et al. [30]. Subsequent
works [7, 9, 18, 36] presented improved protocols,
all based on tree-based ORAM constructions. Wang et
al. [34] proposed Circuit ORAM, which yields the best
known circuit size both in terms of asymptotic behavior
and concrete performance. In Section V, we provide per-
formance comparisons between our new ORAM scheme
and Circuit ORAM, showing orders of magnitude im-
provement for access and initialization across a wide
range of parameters and applications.
D. Variations
In addition to the RAM-SC model we focus on,
there are other uses for ORAMs in secure computation
protocols. Some of the ORAM innovations produced in
these settings have been applied to the RAM-SC designs
in Section II-C. Although it is beyond the scope of this
work, we believe our ORAM design may likewise yield
beneﬁts in other contexts.
Gentry et al. [9] proposed several optimizations for
tree-based ORAMs and considered brieﬂy how to build
a HE-over-ORAM system. A system based on Path
ORAM [32] was built in their subsequent work [10].
They showed a per-access time of 30 minutes for a
database with 4 million 120-bit records, excluding the
cost of initialization.
Lu and Ostrovsky [25] designed an ORAM algorithm