6y
0
8y
00
7.y
12.y
1
yx
6y
0
8y
12,x
7.y
12.y
2
yxt
6y
9.,t
8y
12,x
7.,y
12.y
Ap/
6y
9,t
8y
12,x
7.y
12.y
4
yxtvu
6y
9.,t
8y
12,x
7.,y
12.y
5
yxtvuw
6y
9,t
8y
12,x
7.y
12.y
6
yxtyuz
6y
9.t
8y
12,x
12.y
step
N'
()d(x)a
D(u),p(u)
()d’(A)a
D(w),p(w)
D(y).p(y)
()d)a
0
8,z
00
00
00
12,z
00
1
Zx
8,z
0
11,x
14,x
12,z
00
Zxv
8,z
14,v
11,x
14,x
12,z
15,v
3
zny
8,z
14,v
11,x
14,x
12,z
15,v
4
znyu
8,2
14,v
11.x
14,x
12,z
15,v
5
znyw
8,z
14,v
11.x
14,x
12,z
15,v
6
Znyuwt
8,2
14,v
11,x
14,x
12,z
15,v
P5.
值
50 / 79
---
## Page 51
计算机网络：自顶向下方法课后习题参考答案.md
2020/10/13
值
0000000
从×0000000000
2∞62∞00
值
uvxyz
9∞E0↓A
从×∞3032
z75250
ZAxAn
v10335
从
z6 5 2 5 0
值
xyz
v10335
从×43032
z65250
P6、这个问题的潜辞有点含幅。我们的意思是，“第一次运行算法时的选代次数“也就是说，酸设节点最初拥有的唯一信息是其最近的邻居的成本）。我们假设该算法是同
步运行的卸，在一个步骤中，所有节点同时计算它们的距真表，然后交换表。
在每次选代时，节点与其邻居交换距离表，因此，如果您是节点A，而您的邻居是B，则日的所有郭居（它们都是您的一两跳）在一次选代后御8告诉他们它对您的成本后将
知道一到两个衡到您的最短代价路径。
d是网绝的直径”-网格中任何两个节点之间最长的无坏路路径的长度。使用上面的推理，经过d-1选代后，所有节点都将知道d或更少额到所有其他节点的最短路径代价。
由于任何大于c确的路径都会有循环因此比去掉福坏的路径花费更大)，该算法最多会在d-1选代中收效。
旁白：如果口V算法是由于链路成本的变化而运行的，则在政效之前，所需选代次数不存在先验界，除非还指定了链路成本的约束。
P7、
a)Dz(w)  2, Dz(y)  4, Dz(α)  7
b)首先考虑如果c(x，y)发生变化会发生什么。如果c(x，y)变大或变小只要c(x。y)>=1)，那么从x孙的量小成本路径仍然至少要花费7。因此c(z，y)的改变(知果
c(z. y) >=1)不会使x通知其邻居,
如果Scx。y)=sigma1,那么最小成本的路径现在通过y，并有成本sigma+6$,
现在考虑如果c（z，w）改变，如果c[x，u)=6，部么最小成本路径现在经过y并花费了11;x将再次通知它的邻居这个新成本。
c链路成本c(x，y)(以及只要c(z，y)>=1)中的任何更改都不会导致x通知其邻国关于u的新的最小成本路径。
P8,
结点x表
xyz
x034
从y000000
00000
值
xy2
x 03 4
从y306
z460
结点y表
51 / 79
---
## Page 52
计算机网络：自顶向下方法课后习题参考答案.md
2020/10/13
值
xyz
x000000
从y306
00000
值
xyz
x034
从y306
z460
结点表
值
2
00
00
从
00
值
x034
从y306
z460
P9、不，这是因为降低链路成本不会导致循环（由该链路的两个节点之间的下一跳关系引起)。将两个节点连接到—个链路相当于将链路重量从无限降到有限权。
P10、在每一步中，节点距离向量的每一次更新都是基于Beman-Ford方程，即只减少距爽向量中的这些值，价恤没有增加，如果没有更新，则不会发送消息，因此，
DX是不增加的。由于这些代价是有限的，那么最终矩离向量将稳定在有限的步骤。
P11, a)
Router z Informs w, Dz[x)=0
Informs y, Dz(x)=6
Router w
Informs y, Dw(x)=00
Informs z, Dw(x)=5
Router y
Informs w, Dy(X)=4
Informs z, Dy(x)=4
b)是的，会有一个数不避数到无穷大的问题，下表显示了路由收效过程，假设在10时间发生链路成本更改。在时间T1，y更新其距爽向量并通知邻居w和z，在下表中，“
→表示通知”
time
to
t1
t2
t3
t4
Z
→ w, Dz(X)=00
No change
→ w, Dz(X)=00
*y Dα(x)=6
y. Dz(x)=11
W
y, Dw(X)=30
→y, Dw(x)=00
No change
→z,Dw(x)=5
→z,Dw(x)=10
Y
>w, Dy×)=4
6=(x)/g 'm(
 No change
w, Dy(x)=14
z, Dy(x]=4
z, Dy(x)=00
≠z, Dy(x=00
我们看到w，y。z在计算路由器x的开躺时形成一个循坏。如果我们继续上面表中所示的选代，那么在T27，z通过它与x的直接联系检测到它对x的最小成本是50，在T29，
w通过z得知它对x的最小成本为51，在t30，y将其最小成本更新为52(通过w)。最后，在T31，没有更新，路由是稳定的。
time
t27
t28
t29
t30
t31
Z
*w, Dz(x)=50
via w, 0c
*y Dz(x)=50
via y. 55