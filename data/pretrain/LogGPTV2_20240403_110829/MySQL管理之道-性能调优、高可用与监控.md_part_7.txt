## 优化后的文本

### Page 51
#### Compression and the InnoDB Buffer Pool
Starting from MySQL 5.5, you can dynamically disable `innodb_stats_on_metadata`, although it is enabled by default. The `innodb_stats_on_metadata` parameter controls whether InnoDB updates statistics in the `information_schema.STATISTICS` table whenever a query is made to the `information_schema` metadata database. This can be particularly resource-intensive when dealing with large tables or a high number of tables.

To disable this feature, use the following command:
```sql
SET GLOBAL innodb_stats_on_metadata = OFF;
```

Disabling `innodb_stats_on_metadata` can significantly improve query performance, as shown in Figures 1-17 and 1-18. For example, after disabling the metadata statistics, the query execution time was nearly halved, while the results remained the same.

**Figure 1-17: Query with Metadata Statistics Enabled**
```sql
mysql> SELECT SUM(data_length + index_length) / 1024 / 1024 / 1024 FROM information_schema.tables;
+---------------------------------------------------+
| SUM(data_length + index_length) / 1024 / 1024 / 1024 |
+---------------------------------------------------+
| 0.231541509740                                    |
+---------------------------------------------------+
1 row in set (0.04 sec)
```

**Figure 1-18: Query with Metadata Statistics Disabled**
```sql
mysql> SET GLOBAL innodb_stats_on_metadata = OFF;
Query OK, 0 rows affected (0.00 sec)

mysql> SELECT SUM(data_length + index_length) / 1024 / 1024 / 1024 FROM information_schema.tables;
+---------------------------------------------------+
| SUM(data_length + index_length) / 1024 / 1024 / 1024 |
+---------------------------------------------------+
| 0.231541509740                                    |
+---------------------------------------------------+
1 row in set (0.05 sec)
```

### Page 52
#### Enhanced Replication Features
In earlier versions of MySQL, replication was asynchronous. The master server would send the binlog without waiting for confirmation from the slave. This could lead to data inconsistencies if the slave lagged behind or experienced a failure.

**1.2.1 Improved Replication Functionality**
MySQL 5.5 introduced several enhancements to the replication feature, including semi-synchronous replication. Semi-synchronous replication ensures that at least one slave has received and acknowledged the transaction before the master commits it, thus improving data integrity.

**1.2.2 Self-Healing Relay Logs**
MySQL 5.5 also introduced the `relay_log_recovery` parameter. When set to 1, this parameter allows the slave to discard all unprocessed relay logs and re-fetch them from the master in case of a crash, ensuring the integrity of the relay logs.

**1.2.3 InnoDB Strict Mode**
The `innodb_strict_mode` parameter, which defaults to `OFF`, can be dynamically enabled to enforce stricter checks during table creation and alteration. This helps catch and prevent potential issues early.

To enable InnoDB strict mode, use the following command:
```sql
SET GLOBAL innodb_strict_mode = 1;
```

### Page 53
#### Dynamic Configuration Parameter Changes
MySQL 5.5 introduced the ability to dynamically change several InnoDB parameters, enhancing flexibility and performance tuning.

**1.3.1 Support for Dynamic Changes to Independent Tablespaces**
In MySQL 5.5, you can dynamically enable independent tablespaces using the `innodb_file_per_table` parameter. This is particularly useful for Barracuda format table compression, which requires independent tablespaces.

To enable independent tablespaces, use the following command:
```sql
SET GLOBAL innodb_file_per_table = 1;
```

**1.3.2 Dynamic InnoDB Lock Timeout Configuration**
You can also dynamically change the `innodb_lock_wait_timeout` parameter, which controls the time a transaction waits for a lock before timing out. The default value is 50 seconds.

To change the lock timeout, use the following command:
```sql
SET GLOBAL innodb_lock_wait_timeout = 10;
```

### Page 54
#### Summary of New InnoDB Parameters
Here is a summary of the new InnoDB parameters introduced in MySQL 5.5:

- **`innodb_stats_on_metadata`**: Controls whether InnoDB updates statistics in the `information_schema.STATISTICS` table.
- **`relay_log_recovery`**: Allows the slave to discard unprocessed relay logs and re-fetch them from the master.
- **`innodb_strict_mode`**: Enforces stricter checks during table creation and alteration.
- **`innodb_file_per_table`**: Enables independent tablespaces.
- **`innodb_lock_wait_timeout`**: Controls the time a transaction waits for a lock before timing out.

### Page 55
#### InnoDB Buffer Pool Enhancements
MySQL 5.5 introduced several enhancements to the InnoDB buffer pool, including the ability to create multiple buffer pool instances and adaptive flushing.

- **`innodb_buffer_pool_instances`**: Allows you to create multiple buffer pool instances to reduce contention. The default is 1, and it must be greater than 1 GB to be effective.
- **`innodb_adaptive_flushing`**: Enables adaptive flushing of dirty pages, even if the `innodb_max_dirty_pages_pct` threshold has not been reached.

These enhancements help improve the performance and efficiency of the InnoDB buffer pool, especially in high-concurrency environments.

### Page 57
#### Additional InnoDB Parameters
- **`innodb_io_capacity`**: Sets the I/O capacity of the storage device, with a default value of 200. This can be dynamically changed.
- **`innodb_file_format_check`**: Checks the file format of the shared tablespace. If set to `ON` and the file format is not supported, the server will report an error.
- **`innodb_file_format_max`**: Sets the maximum file format version, with a default value of `Antelope`. This cannot be dynamically changed.

These parameters provide additional control over InnoDB's behavior and performance, allowing for more fine-tuned configurations.