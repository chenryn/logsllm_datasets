## 前言
American Fuzzy
Lop（AFL）很棒。在命令行应用程序上快速进行的模糊测试分析是最好的选择。但是，如果通过命令行访问你想要模糊的东西的情况怎么样呢？很多时候你可以编写一个测试工具（或者可能使用
libFuzzer），但如果你想要模拟你想要模糊的代码部分，并得到 AFL 的所有基于 coverage 的优点呢？
例如，你可能想要从嵌入式系统中模糊解析函数，该系统通过 RF
接收输入并且不容易调试。也许你感兴趣的代码深藏在一个复杂、缓慢的程序中，你不能轻易地通过任何传统工具。
**我已经为 AFL 创建了一个新的 'Unicorn Mode' 工具来让你做到这一点** 。如果你可以模拟你对使用 Unicorn
引擎感兴趣的代码，你可以用 afl-unicorn 来 fuzz 它。所有源代码（以及一堆附加文档）都可以在 afl-unicorn [GitHub
页面](https://github.com/tigerpuma/Afl_unicorn)上找到。
## 如何获得它
克隆或从 GitHub 下载 afl-unicorn git repo 到 Linux 系统（我只在 Ubuntu 16.04 LTS
上测试过它）。之后，像普通方法一样构建和安装 AFL，然后进入 'unicorn_mode' 文件夹并以 root 身份运行
'build_unicorn_support.sh' 脚本。
    cd /path/to/afl-unicorn
    make
    sudo make install
    cd unicorn_mode
    sudo ./build_unicorn_support.sh
## 如何运作
Unicorn Mode 通过实现 AFL 的 QEMU 模式用于 Unicorn Engine 的块边缘检测来工作。基本上，AFL
将使用来自任何模拟代码段的块覆盖信息来驱动其输入生成。整个想法围绕着基于 Unicorn 的测试工具的正确构造，如下图所示：
基于 Unicorn 的测试工具加载目标代码，设置初始状态，并加载 AFL
从磁盘变异的数据。然后，测试工具将模拟目标二进制代码，如果它检测到发生了崩溃或错误，则会抛出信号。
AFL会做所有正常的事情，但它实际上模糊了模拟的目标二进制代码！
Unicorn Mode 应该按照预期的方式使用 Unicorn 脚本或用任何标准 Unicorn 绑定（C / Python / Go /
Whatever）编写的应用程序，只要在一天结束时测试工具使用从补丁编译的 libunicorn.so 由 afl-unicorn 创建的 Unicorn
Engine 源代码。到目前为止，我只用 Python 测试了这个，所以如果你测试一下，请向repo提供反馈和/或补丁。
  * 请注意，构建 afl-unicorn 将在本地系统上编译并安装修补版本的 Unicorn Engine v1.0.1。在构建 afl-unicorn 之前，您必须卸载任何现有的 Unicorn 二进制文件。与现成的 AFL 一样，afl-unicorn 仅支持 Linux。我只在 Ubuntu 16.04 LTS 上测试过它，但它应该可以在任何能够同时运行A FL 和 Unicorn 的操作系统上顺利运行。
  * 注意：在加载模糊输入数据之前，必须至少模拟 1 条指令。这是 AFL 的 fork 服务器在 QEMU 模式下启动的工件。它可能可以修复一些更多的工作，但是现在只需模拟至少 1 条指令，如示例所示，不要担心它。下面的示例演示了如何轻松解决此限制。
## 使用例子
注意：这与 repo 中包含的 “简单示例” 相同。请在您自己的系统上使用它来查看它的运行情况。 repo 包含 main（）的预构建 MIPS
二进制文件，在此处进行演示。  
首先，让我们看一下我们将要模糊的代码。这只是一个简单的示例，它会以几种不同的方式轻松崩溃，但我已将其扩展到实际用例，并且它的工作方式完全符合预期。
    /*
     * Sample target file to test afl-unicorn fuzzing capabilities.
     * This is a very trivial example that will crash pretty easily
     * in several different exciting ways. 
     *
     * Input is assumed to come from a buffer located at DATA_ADDRESS 
     * (0x00300000), so make sure that your Unicorn emulation of this 
     * puts user data there.
     *
     * Written by Nathan Voss 
     */
    // Magic address where mutated data will be placed
    #define DATA_ADDRESS    0x00300000  
    int main(void)
    {
        unsigned char* data_buf = (unsigned char*)DATA_ADDRESS; 
        if(data_buf[20] != 0)
        {
            // Cause an 'invalid read' crash if data[0..3] == '\x01\x02\x03\x04'
            unsigned char invalid_read = *(unsigned char*)0x00000000;                   
        }
        else if(data_buf[0] > 0x10 && data_buf[0]  data_buf[2])
        {
            // Cause an 'invalid read' crash if (0x10  data[2]
            unsigned char invalid_read = *(unsigned char*)0x00000000;
        }
        else if(data_buf[9] == 0x00 && data_buf[10] != 0x00 && data_buf[11] == 0x00)
        {
            // Cause a crash if data[10] is not zero, but [9] and [11] are zero
            unsigned char invalid_read = *(unsigned char*)0x00000000;
        }
        return 0;
    }
请注意，这段代码本身就完全是举例的。它假设 'data_buf' 的数据神奇地位于地址
0x00300000。虽然这看起来很奇怪，但这类似于许多解析函数，它们假设它们会在固定地址的缓冲区中找到数据。在实际情况中，您需要对目标二进制文件进行逆向工程，以查找并确定要模拟和模糊的确切功能。在即将发布的博客文章中，我将介绍一些工具来简化提取和加载流程状态，但是现在您需要完成在Unicorn中启动和运行所有必需组件的工作。
**您的测试工具必须通过命令行中指定的文件将输入变为 mutate** 。这是允许 AFL
通过其正常接口改变输入的粘合剂。如果在仿真期间检测到崩溃情况，测试工具也必须强行自行崩溃，例如
emu_start（）抛出异常。下面是一个示例测试工具，可以执行以下两个操作：
    """ 
       Simple test harness for AFL's Unicorn Mode.
       This loads the simple_target.bin binary (precompiled as MIPS code) into
       Unicorn's memory map for emulation, places the specified input into
       simple_target's buffer (hardcoded to be at 0x300000), and executes 'main()'.
       If any crashes occur during emulation, this script throws a matching signal
       to tell AFL that a crash occurred.
       Run under AFL as follows:
       $ cd /unicorn_mode/samples/simple/
       $ ../../../afl-fuzz -U -m none -i ./sample_inputs -o ./output -- python simple_test_harness.py @@ 
    """
    import argparse
    import os
    import signal
    from unicorn import *
    from unicorn.mips_const import *
    # Path to the file containing the binary to emulate
    BINARY_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'simple_target.bin')
    # Memory map for the code to be tested
    CODE_ADDRESS  = 0x00100000  # Arbitrary address where code to test will be loaded
    CODE_SIZE_MAX = 0x00010000  # Max size for the code (64kb)
    STACK_ADDRESS = 0x00200000  # Address of the stack (arbitrarily chosen)
    STACK_SIZE    = 0x00010000  # Size of the stack (arbitrarily chosen)
    DATA_ADDRESS  = 0x00300000  # Address where mutated data will be placed
    DATA_SIZE_MAX = 0x00010000  # Maximum allowable size of mutated data
    try:
        # If Capstone is installed then we'll dump disassembly, otherwise just dump the binary.
        from capstone import *
        cs = Cs(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN)
        def unicorn_debug_instruction(uc, address, size, user_data):
            mem = uc.mem_read(address, size)
            for (cs_address, cs_size, cs_mnemonic, cs_opstr) in cs.disasm_lite(bytes(mem), size):
                print("    Instr: {:#016x}:\t{}\t{}".format(address, cs_mnemonic, cs_opstr))
    except ImportError:
        def unicorn_debug_instruction(uc, address, size, user_data):
            print("    Instr: addr=0x{0:016x}, size=0x{1:016x}".format(address, size))    
    def unicorn_debug_block(uc, address, size, user_data):
        print("Basic Block: addr=0x{0:016x}, size=0x{1:016x}".format(address, size))
    def unicorn_debug_mem_access(uc, access, address, size, value, user_data):
        if access == UC_MEM_WRITE:
            print("        >>> Write: addr=0x{0:016x} size={1} data=0x{2:016x}".format(address, size, value))
        else:
            print("        >>> Read: addr=0x{0:016x} size={1}".format(address, size))    
    def unicorn_debug_mem_invalid_access(uc, access, address, size, value, user_data):
        if access == UC_MEM_WRITE_UNMAPPED: