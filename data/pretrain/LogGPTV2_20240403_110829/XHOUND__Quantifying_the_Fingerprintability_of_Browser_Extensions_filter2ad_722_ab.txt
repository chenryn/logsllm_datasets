as those are queried by extensions. Jagpal et al. report on a
similar system used internally by Google to identify malicious
browser extensions in the Chrome Store [28]. In addition to
dynamic honey pages, the authors use static honey pages,
i.e., pages that appear to be hosting sensitive content (such
as login forms) and could thus trigger the content-dependent
functions in extensions. Thomas et al. [47] and Xing et
al. [50] developed tools for the dynamic analysis of Chrome
extensions, which detect extensions that inject malicious ads
or swap ads so that the authors of malicious extensions can
beneﬁt from advertising revenue.
Even though XHOUND shares design choices with the
aforementioned systems, the goal of our platform is distinctly
different. Speciﬁcally, in XHOUND, we treat all extensions as
benign extensions which have no interest of evading dynamic
analysis tools and will modify pages by adding, modifying,
and removing DOM elements to achieve their stated goals.
XHOUND aims to capture these modiﬁcations and use them
to build detection code that can infer the presence or absence
of any given extension. On the one hand,
these relaxed
requirements (in contrast with adversarial scenarios) relieve
us from implementing complex monitoring mechanisms like
trafﬁc analysis. Therefore,
in XHOUND, we focus on the
ability to analyze the ﬁnal DOM tree of a web page, which
was rendered with the inspected extension being active. On
the other hand, we aim to maximize the detection of any
functional DOM modiﬁcations, and thus we have to trigger as
much of an extension’s functionality as possible. The ability
to stimulate an extension to, for example, create a new benign
DOM element
is irrelevant for Hulk and the rest of the
aforementioned dynamic analysis systems, yet is crucial for
our system since that new DOM element can be used as a
signature for an extension’s presence.
Figure 3 shows the architecture of XHOUND. We elaborate
on each component in the following paragraphs.
A. Test preparation
XHOUND ﬁrst automatically unpacks an extension and
to hook into
patches it with JavaScript code in order
functions of interest. More precisely,
inspired by Hulk’s
honey pages, we developed the OnTheFlyDOM library in
JavaScript which, upon inclusion on a web page, intercepts
most of the possible queries that an extension may use to
locate DOM elements. For instance, XHOUND patches the
document.getElementById method so that, when an
extension uses it to inquire about the presence of an element
with a speciﬁc identiﬁer, our library will actually create, on-
the-ﬂy, such an element, record that it did so, and return that
element to the calling script. The end effect is that extensions
are made to believe that the queried elements are present on
a given page and are thus allowed to continue executing. Our
library is included in all honey pages deployed by XHOUND,
both static and dynamic, and is injected to all extensions under
examination as a ﬁrst-to-include content script. This gives
us the ability to also intercept functions, which are deﬁned
in the execution environment of extensions. Those functions
can be called from the declared content scripts or injected
programmatically, and are mainly used by extensions to query
the DOMs of web pages.
receives a queried element,
attributes
In comparison to Hulk’s pages, we attempt
to increase
coverage of multi-step queries of DOM elements. First,
when an extension script
it
may additionally check it
for proper attributes. Since
we have no way of predicting these
and
we cannot hook into their value checks, we populated
XHOUND’s honey pages with static web elements bearing
different parameters, which include parts of popular
HTML structures,
like the ones found on the results of
popular search engines, or YouTube videos. Second, an
extension’s logic may search for a container element ﬁrst
and launch subsequent queries from it on its subtree, e.g.,
container.getElementsByClassName("child").
This is a rather common JavaScript practice, aimed towards
increasing the performance of queries. To address this,
XHOUND recursively patches all DOM elements created on
the ﬂy with intercepted functions for queries (including the
container element from the earlier example), as well as all
initial static elements present on the honey page. If such
multi-step queries are used to search for a child element, the
element will be created and appended to the proper parent
node.
Our aforementioned JavaScript library allows XHOUND to
ﬁngerprint extensions that expect a particular DOM struc-
944
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 3. XHOUND’s data sources and architecture: patching extensions and ﬁltering list of target URLs (1), running tests with Chrome Driver (2), and analyzing
introduced on-page changes (3).
integration,
ture before manifesting themselves. At the same time, many
extensions will only inspect
the DOM and modify con-
tent on speciﬁc URLs. A video-downloader extension for
YouTube and the SaveToPocket extension described in Sec-
tion II-B, will only append extra controls for pages hosted on
youtube.com and twitter.com, respectively. While it is
certainly possible to navigate to popular sites with and without
an extension and compare their DOMs, this approach brings
a whole host of problems related to the dynamic nature of
the web. Due to third-party advertisements, featured content,
and client-side widget
the same URL can be
visited multiple times only seconds apart, and yet result in
signiﬁcantly different DOMs. In these cases, attribution of a
DOM change to either the evaluated extension or the website
itself becomes challenging, and heuristic-based methods are
bound to be susceptible to false positives and false negatives.
In XHOUND, we tackle this challenge by only pretending to
visit popular domains, while in fact always visiting static pages
which host
the aforementioned OnTheFlyDOM JS library.
To achieve this we make use of a local DNS stub resolver
which resolves the Alexa top 50 sites to localhost and
an appropriate Apache module that rewrites URLs so as to
always serve our honey pages. We address the issues that arise
due to HTTPS by installing our own root certiﬁcate in the
browser used by XHOUND, and accepting all HTTPS errors.
Moreover, instead of just pretending to visit the root page of
the top 50 Alexa domains, we use a search engine to identify
popular URLs for each Alexa domain and pretend to visit up
to 20 URLs for each popular domain. In total, each extension
is exposed to 780 URLs spanning 308 subdomains. These
additional visits are utilized in order to trigger extensions
that may be activated only on certain pages or subdomains
of popular websites. The combination of these two techniques
(local DNS resolutions and on-the-ﬂy DOM population) allows
us to both convince extensions that they are on the “right” page
and present to them a DOM that is “as expected.” Note that
we follow this approach because we cannot rely on the URLs
whitelisted in an extension’s manifest since most extensions
request permission to run on every page that a user visits.
Even the extensions that request to run on speciﬁc domains
can include URL checks in their actual code and only execute
actions when a user is on a speciﬁc page or subdomain of
the whitelisted domain. Speciﬁcally, from our collected 10,000
Chrome extensions that we analyze in the next sections, more
than 67% of them request permissions to all possible URLs,
or at least to all non-HTTPS pages.
B. XHOUND Execution
XHOUND’s core is based on the Selenium ChromeDriver,
which provides the APIs that can be used to launch the Chrome
browser with a particular extension installed and navigate it to
a particular URL. To support honey pages, XHOUND instructs
the domain resolver component to resolve main URLs that the
browser visits to our local specially-crafted pages, omitting
other calls, which can be internal requests initiated by the
extension. That is, we differentiate between the loading of
a page that is meant to be locally served, and the request
for a remote resource requested by an extension, e.g., an
extension fetching a copy of the jQuery library from a content-
distribution network. After loading a web page, XHOUND
waits for ﬁve seconds and takes a snapshot of the current
state of the page’s DOM tree. Through empirical testing, we
chose a ﬁve second delay since each extension is taken to a
local honey page, which loads fast. However, longer timeouts
may potentially reveal even more functional on-page changes
from particular extensions, at the expense of increased total
analysis time. Moreover, during pilot runs with XHOUND, we
noticed that some extensions spent some time after installation
to load conﬁguration ﬁles or other additional components
(e.g. update blacklists or check for newer versions). Failing
to account for the time necessary to complete these checks,
caused some extensions to either crash, or not be active. As
such, we decided to introduce another ﬁve-second wait right
before instructing Chrome to visit the ﬁrst target URL. In
945
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply. 
its current instantiation, each extension requires appropriately
one-hour of dynamic analysis, on a single core and less than
1GB of RAM. Naturally, multiple multicore machines can be
used to parallelize the analysis of extensions.
The dynamic honey pages that were described in the pre-
vious section (where the DOM is populated on-the-ﬂy, driven
by the methods for searching for elements) are not sufﬁcient
for revealing all possible cases of on-page changes. Namely, a
number of extensions are purely content-based, examining all
content on a page and modifying the content that matches their
internal logic. For instance, an extension could be searching a
webpage’s text for phone numbers and making them clickable
so as to launch the user’s favorite VoIP client. Some ad-
blockers also fall into this category since they try to match
elements and outgoing requests to their internal blacklists and
remove/block those that match.
To account for these extensions, we designed static honey
pages with many types of content, including: tracking scripts,
audio and video tags, images, custom tables, phone numbers,
suspicious URLs, and login forms. While our static content is
by no means exhaustive, it was guided by a manual analysis of
a sample of 100 popular extensions so as to ensure that all the
ﬁngerprintable extensions that we identiﬁed through manual
analysis as ﬁngerprintable, would be stimulated by the content
of our static honey pages.
C. Analyzing results
All initial DOM elements on the honey pages are indexed to
facilitate further comparison of the potentially modiﬁed DOM
with the one of the original page. Each queried element, which
is created on the ﬂy, is also recorded, so we can later check
whether it was modiﬁed by an extension. This enables us to
straightforwardly identify any on-page changes as shown in
Figure 3.
D. Limitations
XHOUND currently supports Google Chrome and Mozilla
Firefox extensions. We chose to focus on these browsers
due to their large market share and wealth of available
browser extensions. At the same time, we do not make use
of any platform-speciﬁc functionality hence our system can
be straightforwardly ported to other browsers.
The OnTheFlyDOM library intercepts many popular DOM-
querying methods, including:
• getElementById
• getElementsByName
• getElementsByTagName
• getElementsByTagNameNS
• getElementsByClassName
There are, however, possible ways of accessing the DOM
that are currently not supported by XHOUND, such as, discov-
ering elements through global lists, like, document.forms.
the querySelector and querySelectorAll
methods, our library supports the parsing of CSS selectors and
attempts to recreate a proper hierarchy of DOM elements ex-
actly as requested by the utilized query. Additionally, we tested
For
our approach in scenarios where an extension makes use of the
jQuery library to discover DOM elements. Modern implemen-
tations of jQuery will leverage powerful querySelector
methods for most of the cases of complex selectors, and thus
we do not need to separately support differences of jQuery
syntax since we instrument the querySelector method.
XHOUND is currently limited in that it searches for mod-
iﬁcations in a page’s DOM but not in the browser’s BOM
(Browser Object Module). As such, our tool will not be able
to detect certain niche extensions, such as, user-agent spoofers
which spoof attributes from the navigator object in an
effort to spoof the identity of the browser [44]. Finally, it
is worth noting that XHOUND does not attempt to conﬁgure
an extension, once that is installed in the utilized browser.
As such, if an extension requires a user to conﬁgure it by
clicking through various dialogues the ﬁrst time that extension
is installed, XHOUND may not be able to detect its presence.
IV. ANALYSIS OF RESULTS
In this section, we ﬁrst describe the results of applying
XHOUND to popular browser extensions and then analyze the
ﬁndings of multiple user surveys which we conducted, in an
effort to estimate the presence and popularity of extensions in
the browsing environments of everyday users.
A. Fingerprintability of Popular Extensions
To estimate the overall fraction of detectable extensions in
the market we applied XHOUND to the 10,000 most popular
extensions in the Chrome Store. Popularity is measured
in terms of downloads, with the most popular extensions
like AdBlock, AdBlock Plus, Avast SafePrice, and Avira
Browser Safety having more than 10 million active users,
and the least popular one (ranked 10,000th) having 450
active users. XHOUND’s results show that at
least 9.2%
of extensions introduce detectable DOM changes on any
arbitrary domain. This means that any webpage with an
appropriately structured DOM could infer approximately
10% of the extensions available in the Google Chrome store.
Moreover, more than 16.6% are ﬁngerprintable on at least
one popular URL of the Alexa top 50 websites. If, instead of
looking at all 10K extensions, we limit ourselves to the top
1K, the fraction of detectable extensions increases to 13.2%
for arbitrary domains and 23% for popular URLs. Figure 4
illustrates the distribution of ﬁngerprintable extensions across
popularity ranks. Note that all statistics presented in this
section are lower-bounds since XHOUND cannot always
detect the side-effects and appropriate stimulation parameters
that a human analyst could, through manual analysis, discover.
Fingerprintability as a function of ranking
As seen in Figure 4, the overall trend is that the fraction
of detectable extensions decreases when we consider less
popular Chrome extensions. Interestingly,
the ratio of the
number of extensions ﬁngerprintable on any arbitrary domain,
to the total number of ﬁngerprintable extensions amounts
to more than 0.5 and is stable across ranks. The fact that
946
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply. 
i
l
s
n
o
s
n
e
t
x
e
e
b
a
t
c
e
t
e
d
f
o
%
25%
20%
15%
10%
5%
0%
Detectable on:
Arbitrary URL
Popular URL
Total
1−1000
1000−2000
2000−3000
3000−4000
4000−5000
5000−6000
6000−7000
7000−8000
8000−9000
9000−10000
lower 1000
Extension popularity
Fig. 4. Results of applying XHOUND to the top 10,000 most popular extensions and to a random sample of 1,000 other extensions. Higher-ranked extensions
tend to be more ﬁngerprintable, presumably because of their higher utility, compared to lower-ranked extensions.
the percentage of detectable extensions is higher among the
more popular extensions indicates that
the threat of web
tracking via browser extensions is a realistic threat since most
extension-utilizing users are likely to be ﬁngerprintable. At
the same time, in addition to using ﬁngerprintable extensions,
different users must be using different sets of ﬁngerprintable
extensions, if they are to be differentiated from each other by
a web tracker. We demonstrate that this is, in fact, the case,
in Section IV-B. In addition to the top 10K extensions, we
also randomly sampled 1,000 extensions from lower ranks
and discovered, as shown in the rightmost part of Figure 4,
that
they are as ﬁngerprintable as the browser extensions