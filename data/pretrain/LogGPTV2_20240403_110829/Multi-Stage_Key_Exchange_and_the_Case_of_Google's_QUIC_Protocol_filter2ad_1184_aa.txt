# Multi-Stage Key Exchange and the Case of Google's QUIC Protocol

**Authors:**
- Marc Fischlin
- Felix Günther

**Affiliation:**
- Cryptoplexity, Technische Universität Darmstadt, Germany
- [www.cryptoplexity.de](http://www.cryptoplexity.de)

**Contact:**
- PI:EMAIL
- PI:EMAIL

**Date:**
- November 18, 2015

**Abstract:**
The traditional approach to establishing a secure connection involves running a key exchange protocol to establish a shared key, which is then used in a secure channel protocol. The security of key exchange and channel protocols, as well as their composition, has been extensively studied. However, this approach often fails to capture key exchange protocols where, due to practical considerations, the originally separated phases become intertwined, and keys are established continuously. Two notable examples are TLS (with resumption) and Google's recently proposed low-latency protocol, QUIC.

In this work, we revisit the security model of Brzuska et al. (CCS'11) and extend it to a multi-stage key exchange model inspired by Bellare and Rogaway. Our model allows parties to establish multiple keys in different stages and use these keys between stages, even to establish subsequent keys. The advantage of using the formalization by Brzuska et al. is that it was designed to provide compositional guarantees. Thus, we can also provide sufficient conditions under which multi-stage key exchange protocols compose securely with any symmetric-key application protocol, such as a secure channel protocol.

We apply our model to the case of the QUIC protocol, demonstrating that QUIC is a secure multi-stage key exchange protocol that meets the suggested security properties. We propose minor modifications to QUIC to make it more amenable to our composition result, allowing for reasoning about its security as a combined connection establishment protocol when composed with a secure channel protocol.

**Keywords:**
- Key exchange
- Bellare–Rogaway
- Composition
- Protocol analysis
- QUIC

---

## 1 Introduction

### 1.1 Multi-Stage Key Exchange
The classical deployment of authenticated key exchange (AKE) protocols involves establishing a secure key between two parties and subsequently using this key to secure the communication. From a security perspective, this typically means that the key exchange step is executed once at the beginning and ceases once the key is established. The only information passed to the following protocol flow is a cryptographically strong key, usually specified to appear random to any adversary [BR94].

However, practical needs often require a more flexible use of key exchange protocols, viewing the key establishment as a continuous process that can be interleaved with the use of the key. Two prominent examples are SSL/TLS [DR08] and Google's QUIC protocol [Ros13].

In SSL/TLS, during session resumption, the client and server generate a fresh session key from the master secret, which was created in the initial handshake and used to derive keys for the record layer. Session resumption was added to SSL/TLS for efficiency, allowing the skipping of expensive public key operations.

Google's QUIC protocol, designed for "Quick UDP Internet Connections," is a Diffie-Hellman-based connection establishment protocol. It aims to improve efficiency by reducing the round complexity of interactions. The client can deliver data to the server immediately (zero round-trip time, 0-RTT), protected by an intermediate cryptographic key. The server then responds with its contribution to the key exchange, and both parties switch to a stronger key, continuing the interaction. The basic version of the protocol is illustrated in Figure 1.

### 1.2 Composition
Both SSL/TLS and QUIC reveal that current single-stage AKE models are inadequate for capturing desirable construction strategies. They do not allow mixing key exchange steps with the channel protocol and do not consider key exchange steps where keys with increasing strengths are gradually derived and used in between, possibly to derive the next key. Therefore, our goal is to define a sufficiently rich model for multi-stage key exchange protocols.

Our starting point is the Bellare–Rogaway model, which is flexible enough to capture many protocols while providing strong security guarantees. We use the formalization in [Brz13, BFWW11] to argue about composability with arbitrary symmetric-key protocols. A major difference in the multi-stage case lies in the dependencies between different stages. In QUIC, for example, the final key is protected under the stage-one key by sending the server's ephemeral Diffie-Hellman key through a secure channel. This indicates that we need to carefully define when session keys should be considered fresh and indistinguishable from random, ensuring they are not trivially available to the adversary.

We also provide definitions for both unilaterally and mutually authenticated key exchange protocols to capture cases like SSL/TLS and QUIC, where only the server authenticates. Another important point is the interplay of key exchange steps with protocol steps using the keys. A viable strategy, used in QUIC, is to run later key exchange phases through channels secured by previous keys, where the channel protocol is identical to the application protocol and based on the same session key. This can introduce formal vulnerabilities when both protocols are composed. We call protocols like QUIC, where keys of some stage are used to derive the next key, session-key dependent (or simply key-dependent). Protocols where knowledge of the session key alone does not endanger the security of the subsequent key are called session-key independent. An example of a key-independent protocol is SSL/TLS with resumption, as session keys in all stages are derived from the master secret in such a way that knowing some session keys, but not the master secret, does not help to compute another session key.

### 1.3 Analysis of QUIC
Our model will be tested using Google's QUIC protocol. This protocol is simpler than SSL/TLS, and we are not aware of any previous evaluations of its cryptographic strength. Investigating QUIC avoids the need to deal with the problem of key deployment for the finished message, as in SSL/TLS, which often leads researchers to use alternative approaches for security analyses [JKSS12, KPW13, BFS+13]. We show that QUIC is a secure key exchange protocol, assuming idealized key derivation via random oracles, the Gap Diffie-Hellman assumption [OP01], and use of a secure channel. We distinguish between the keys of the two stages, showing that the stage-one key provides basic key secrecy, whereas the stage-two key even yields forward secrecy.

Our result shows that QUIC, as is, does not exhibit any weaknesses, although the security bounds are not tight. Ideally, we would like to argue that QUIC, together with a secure channel protocol, provides a fully secure connection. This is where the compositional properties of our model and the composition result come into play. The composition result requires the key exchange protocol to be session-key independent and forward-secret. Therefore, we first propose a slight modification of QUIC to turn it into a key-independent protocol, following the same idea as in SSL/TLS resumption. We then conclude that compositional security with any symmetric-key protocol using the forward-secret second-stage session key is indeed achieved by the modified version of QUIC.

In summary, our results show that QUIC can be analyzed as a multi-stage key exchange protocol, demonstrating strong security properties despite its low complexity. The trade-off between 0-RTT performance and forward secrecy is optimal, requiring only one round trip. With little effort, QUIC can be further strengthened to facilitate the compositional analysis.

---

## 2 Modeling Multi-Stage Key Exchange

### 2.1 Overview
Before delving into the technical details, let us provide an overview, especially focusing on changes originating from the multi-stage setting and some motivation. The previous single-stage model in [Brz13, BFWW11] kept lists of session information, including values `stexec` about the state (accepted, running, or rejected), the session key `K`, the status `stkey` of the key (fresh or revealed), and a session identifier `sid`. Here, we handle multiplicity by storing vectors of these entries and a variable `stage` describing the stage a session is in.

As in the basic setting, the adversary can interact with sessions via oracle queries `NewSession`, `Send`, `Reveal`, `Corrupt`, and `Test` to initiate a new session, send messages to that session, reveal the session key, corrupt the long-term secret key of a party, and test a session key against a random key, respectively. We note that we do not cover session-state leakage in our model, as in the CK model [CK01] or the extended CK model [LLM07]. One can augment our model with such queries, though.

One difference in our model, due to the fact that an execution can continue after some session has accepted and derived an intermediate key which can be potentially tested, is that after acceptance, the reply to such a `Send` command is delayed. Also, in case of testing a session key and returning the genuine or a random key to the adversary, we let the subsequent key exchange step—which may now depend on this session key in the multi-stage setting—use the genuine or the random key. Otherwise, distinguishing the session keys from random might be trivial.

Another difference, motivated by QUIC, is the introduction of so-called temporary keys. These keys are somewhat in between ephemeral keys and static keys. QUIC suggests letting the server use the short-term key in the second stage in multiple sessions. The description [LC13] mentions a lifespan of about 60 seconds, during which the same key is used in every session of this server. Hence, temporary keys, analogous to static keys, are not bound to a single session. At the same time, they are too transient to be susceptible to cryptanalytic attacks, such that we do not reveal these keys in case of a `Corrupt` query. In the model, to avoid introducing timing events, we let the adversary decide when the parties should switch to a new temporary key via a `NewTempKey` command. We stress that the `NewTempKey` query can be omitted for analyses of protocols that do not include temporary keys without affecting our compositional results.

We also make the usual distinction between non-forward secrecy and forward secrecy, where the latter protects sessions that accepted before corruption took place. In our multi-stage setting, session keys can become forward-secret starting from a certain stage, leading us to introduce the notion of stage-j forward secrecy. We also differentiate between (session-)key-dependent and (session-)key-independent multi-stage protocols. The difference is that, for key-dependent schemes, the session key of stage i is used to derive the session key of stage i + 1, typically to enhance the security properties of the session keys. QUIC is an example of such a protocol. This property directly affects the adversary's capabilities, as we cannot allow the adversary to reveal the session key of stage i before the key of stage i + 1 is established. For key-independent protocols, exposure of the preceding session key does not weaken the next session key (e.g., SSL/TLS with resumption is key-independent, as new keys are derived from the master secret).

---

This revised text is more structured, clear, and professional, making it easier to read and understand.