title:Multi-Stage Key Exchange and the Case of Google's QUIC Protocol
author:Marc Fischlin and
Felix G&quot;unther
A preliminary version of this paper appears in the proceedings of the 21st ACM Conference on Computer and
Communications Security (CCS 2014), DOI: 10.1145/2660267.2660308. This is the full version.
Multi-Stage Key Exchange
and the Case of Google’s QUIC Protocol
Marc Fischlin
Felix G¨unther
Cryptoplexity, Technische Universit¨at Darmstadt, Germany
www.cryptoplexity.de
PI:EMAIL
PI:EMAIL
November 18, 2015
Abstract. The traditional approach to build a secure connection is to run a key exchange protocol and,
once the key has been established, to use this key afterwards in a secure channel protocol. The security
of key exchange and channel protocols, and to some extent also of the composition of both, has been
scrutinized extensively in the literature. However, this approach usually falls short of capturing some
key exchange protocols in which, due to practical motivation, the originally separated phases become
intertwined and keys are established continuously. Two prominent examples of such protocols are TLS
(with resumption), and Google’s recently proposed low-latency protocol QUIC.
In this work we revisit the previous security of model of Brzuska et al. (CCS’11) and expand it into a
multi-stage key exchange model in the style of Bellare and Rogaway. In our model, parties can establish
multiple keys in diﬀerent stages and use these keys between stages, even to establish the next key. The
advantage of using the formalization of Brzuska et al. is that it has been designed with the aim to provide
compositional guarantees. Hence, we can, too, give suﬃcient conditions under which multi-stage key
exchange protocols compose securely with any symmetric-key application protocol, like a secure channel
protocol.
We then exercise our model for the case of the QUIC protocol. Basically, we show that QUIC is an
adequately secure multi-stage key exchange protocol and meets the suggested security properties of the
designers. We continue by proposing some slight change to QUIC to make it more amenable to our
composition result and to allow reasoning about its security as a combined connection establishment
protocol when composed with a secure channel protocol.
Keywords. Key exchange, Bellare–Rogaway, composition, protocol analysis, QUIC
1
Contents
1 Introduction
1.1 Multi-Stage Key Exchange . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2 Composition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.3 Analysis of QUIC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
3
4
4
2 Modeling Multi-Stage Key Exchange
2.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 Preliminaries
2.3 Adversary Model
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.4 Security of Multi-Stage Key Exchange Protocols
5
5
6
7
. . . . . . . . . . . . . . . . . . . . . . . . 10
2.4.1 Match Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
2.4.2 Multi-Stage Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
3 Composition
12
3.1 Preliminaries
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3.2 Compositional Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
4 Security Analysis of Google’s QUIC Protocol
17
4.1 A QUIC Tour . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
4.2 Cryptographic Analysis of QUIC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
4.3 QUICi — A Key-i ndependent Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
4.4 A Note on 0-RTT Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
5 Conclusion
24
2
Client C
server’s static public key pkS
generate ephemeral key pair eskC, epkC
compute K1 = DH(eskC, pkS )
compute K2 = DH(eskC, epkS )
Server S
server’s static secret key skS
epkC
{data}K1
{epkS}K1
{data}K2
compute K1 = DH(epkC, skS )
generate ephemeral key pair eskS , epkS
compute K2 = DH(epkC, eskS )
Figure 1: High-level protocol run description of Google’s QUIC with 0-RTT handshake.
1 Introduction
The classical deployment of authenticated key exchange (AKE) protocols is to establish a secure key
between two parties and subsequently use this key to secure the actual communication. From a security
point of view this is often connected with the understanding that the key exchange step is executed once,
at the beginning, and ceases as soon as the key is established. The only information passed to the following
protocol ﬂow is a cryptographically strong key, usually speciﬁed to look random to any adversary [BR94].
Practical needs, however, seem to impose a more ﬂexible use of key exchange protocols by rather
viewing the key establishing as a continuous process which can be arbitrarily interleaved with the use
of the key. Two prominent examples are SSL/TLS [DR08] and the recently introduced QUIC protocol
of Google [Ros13].
In case of SSL/TLS, in the resumption step of an already established session, the
client and the server generate a fresh session key from the master secret. This master secret has been
created in the initial (full) handshake protocol execution and used to derive keys for the record layer.
Session resumption has been added to SSL/TLS for eﬃciency reasons, in order to be able to skip the more
expensive public key operations.
Google’s recently proposed protocol QUIC (for “Quick UDP Internet Connections”) is a Diﬃe-Hellman
based connection establishment protocol. It also aims at eﬃciency improvements, but focuses on reducing
the round complexity of the interactions. It starts with the client being able to deliver data to the server
immediately—i.e., with zero round-trip time (0-RTT), protected under an intermediate cryptographic key.
At some point, the server replies with its contribution to the key exchange. Both parties then switch to a
stronger key and continue the interaction with that key. The basic version of the protocol is displayed in
Figure 1.
1.1 Multi-Stage Key Exchange
Both examples, SSL/TLS and QUIC, reveal that current single-stage AKE models are inappropriate to
capture desirable construction strategies. For one, they do not allow mixing key exchange steps with the
channel protocol. Second, they do not consider key exchange steps in which keys with increasing strengths
are gradually derived and used in between, possibly to derive the next key. The latter also implies that
one cannot simply view the stages as runs of independent key exchange protocols, e.g., as possible for
SSL/TLS renegotiation [GKS13]. Hence, our goal here is to deﬁne a suﬃciently rich model for multi-stage
key exchange protocols.
Our starting point will be the Bellare–Rogaway model, as it is liberal enough to capture many protocols,
but also provides reasonably strong security guarantees. We prudently use the formalization in [Brz13,
BFWW11], as we can then more easily argue about composability with arbitrary symmetric-key protocols.
A major diﬀerence with the single-stage case lies in the dependencies of the diﬀerent stages. In QUIC, for
instance, the ﬁnal key is protected under the stage-one key by sending the server’s ephemeral Diﬃe-Hellman
3
key through a secure channel. This example indicates that we need to carefully devise and motivate when
session keys should be considered fresh (and thus indistinguishable from random) in the sense that they
are not trivially available to the adversary. We also give deﬁnitions for both unilaterally and mutually
authenticated key exchange protocols to capture cases like SSL/TLS and QUIC in which only the server
authenticates.
Another important point is the interplay of key exchange steps with protocol steps using the keys.
A viable strategy, which is also used in QUIC, seems to be to run later key exchange phases through
channels secured by previous keys, where the channel protocol is identical to the application protocol
(and is even based on the same session key). This potentially introduces formal, yet somewhat contrived
vulnerabilities when both protocols are composed. We call protocols like QUIC in which keys of some
stage are used to derive the next key session-key dependent (or simply: key dependent), whereas protocols
in which knowledge of the session key alone does not endanger the security of the subsequent key are called
(session-)key independent. An example of a key-independent protocol is SSL/TLS with resumption, as
the session keys in all stages are derived from the master secret in such a way that knowing some session
keys, but not the master secret, does not help to compute another session key.
1.2 Composition
Providing compositional guarantees (as in the Bellare–Rogaway model with session matching [BFWW11])
is one of additional goals here. It turns out that our notion of key independence is a crucial aspect to
give a general composition result of multi-stage key exchange steps with symmetric-key based application
protocols like secure channels. We prove that any multi-stage authenticated key exchange protocol, which
is key-independent and forward-secret, can be securely composed with any secure symmetric-key protocol.
Superﬁcially, the key-independence requirement for composition seems to be related to the insecurity
of the SSL/TLS handshake protocol in the Bellare–Rogaway model, due to usage of the session key in the
ﬁnished message. However, SSL/TLS is not a secure (single-stage) key exchange protocol, independently
of the question of composition.1 In contrast, a multi-stage protocol should explicitly allow to use a key to
derive the next keys. In this sense, the model should declare such protocols as secure; it is rather the “bad”
interplay with the application protocol we need to take care of when proving our composition theorem.
1.3 Analysis of QUIC
The “test case” for our model will be Google’s QUIC protocol. This protocol is simpler than SSL/TLS and
we are not aware of any previous evaluations about its cryptographic strength.2 Investigating QUIC also
avoids the need to deal with the problem of key deployment for the ﬁnished message as in SSL/TLS, which
often leads researchers to use alternative approaches for security analyses [JKSS12, KPW13, BFS+13]. We
show that QUIC is a secure key exchange protocol, assuming idealized key derivation via random oracles,
the Gap Diﬃe-Hellman assumption [OP01], and use of a secure channel. Here we distinguish between the
keys of the two stages, showing that the stage-one key provides basic key secrecy, whereas the stage-two
key even yields forward secrecy.
Note that our result about QUIC being a secure key exchange protocol shows that the protocol, as is,
does not show any weakness, although the security bounds are far from being tight. Ideally, though, we
would like to argue that QUIC, together with a secure channel protocol, provides a fully secure connection.
This is where the compositional properties of our model and the composition result come into play. Recall
that this result requires the key exchange protocol to be (session-)key independent and forward-secret.
1The Bellare–Rogaway model has been designed with compositional guarantees in mind, of course, but the problem with
SSL/TLS already appears when considered as a stand-alone key exchange protocol.
2In an independent and concurrent work, Boldyreva et al. [BLNR14, LJBN15] also investigated the security of QUIC.
4
Therefore, we ﬁrst propose a slight modiﬁcation of QUIC to turn it into a key-independent protocol,
following the same idea as in SSL/TLS resumption. We then can conclude that compositional security
with any symmetric-key protocol using the forward-secret second-stage session key is indeed achieved by
the modiﬁed version of QUIC.
In summary, our results show that QUIC can be analyzed as a multi-stage key exchange protocol. It
shows strong security properties, despite its low complexity. In particular, the trade-oﬀ between 0-RTT
performance and forward secrecy is only one round trip which is indeed optimal. Still, as we discuss, with
little eﬀort QUIC can be strengthened further to facilitate the compositional analysis.
2 Modeling Multi-Stage Key Exchange
We model security of multi-stage key exchange protocols along the lines of the seminal paper of Bellare
and Rogaway [BR94]. The formalization of our notions is inspired by the notation used by Brzuska et
al. [Brz13, BFWW11].
2.1 Overview
Before diving into the technical details, let us provide an overview, especially about changes originating
from the multi-stage setting, and some motivation. The previous single-stage model in [Brz13, BFWW11]
kept lists of session information, including values stexec about the state (accepted, running, or rejected),
the session key K, the status stkey of the key (fresh or revealed), and a session identiﬁer sid. Here, we
basically take care of multiplicity by storing vectors of these entries and a variable stage describing the
stage a session is in.
As in the basic setting, the adversary can interact with sessions via oracle queries NewSession, Send,
Reveal, Corrupt, and Test in order to initiate a new session, send messages to that session, reveal the session
key, corrupt the long-term secret key of a party, and test a session key against a random key, respectively.
We note that we do not cover session-state leakage in our model, as in the CK model [CK01] or in the
extended CK model [LLM07]. One can augment our model with such queries, though.
One diﬀerence in our model, owed to the fact that an execution can continue after some session has
accepted and derived an intermediate key which can be potentially tested, is that after acceptance the
reply to such a Send command is delayed. Also, in case of testing a session key and returning the genuine
or a random key to the adversary, we let the subsequent key exchange step—which may now depend on
this session key in the multi-stage setting—use the genuine or the random key. Otherwise, distinguishing
the session keys from random might be trivial.
Another diﬀerence, motivated by QUIC, is the introduction of so-called temporary keys. These keys
are somewhat in between ephemeral keys and static keys. QUIC suggests to let the server use the short-
term key in the second stage in multiple sessions. The description [LC13] speaks of a life span of about
60 seconds in which the same key is used in every session of this server. Hence, temporary keys, analogous
to static keys, are not bound to a single session. At the same time, they are too transient to be susceptible
to cryptanalytic attacks, such that we do not reveal these key in case of a Corrupt query. In the model,
to avoid introduction of timing events, we let the adversary decide when the parties should switch to a
new temporary key via a NewTempKey command. We however stress that the NewTempKey query can be
omitted for analyses of protocols that do not comprise temporary keys without aﬀecting our compositional
results.
We also make the usual distinction between non-forward secrecy and forward secrecy, where the latter
protects sessions that accepted before corruption took place. In our multi-stage setting, session keys can
become forward-secret starting from a certain stage on, such that we introduce the notion of stage-j forward
secrecy. We also diﬀerentiate between (session-)key-dependent and (session-)key-independent multi-stage
5
protocols. The diﬀerence is basically that, for key-dependent schemes, the session key of stage i is used
to derive the session key of stage i + 1, typically to enhance the security properties of the session keys.
QUIC is an example of such a protocol. This property directly aﬀects the adversary’s capabilities in the
sense that we cannot allow the adversary to reveal the session key of stage i before the key of stage i + 1
is established. For key-independent protocols, exposure of the preceding session key, in contrast, does not
weaken the next session key (e.g., SSL/TLS with resumption is key-independent, as new keys are derived