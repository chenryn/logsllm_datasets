### 与接口相关的改动需要大量协调这一点也很容易理解。比如我们要把一部分代码从一个服务迁移到另一个服务，或者修改API的协议，那么，所有不同服务的维护者都需要在代码里增加向前或者向后的兼容性，对代码进行保护。同时代码的上线顺序和修改顺序也息息相关，我们需要做一张检查列表（Checklist），考虑各种可能性，精确地按照顺序执行。一旦发生代码回滚，可能又要重来一遍。这个过程就会涉及方方面面的人、事和代码修改，过程十分繁复。
### 报错的处理因为程序不在一起了，当异常发生的时候，我们就得不到完整的异常堆栈信息（ExceptionStack），只能追踪到某个服务的接口处，于是 Debug变得很难。你还需要去另一个服务的日志里去找，看看那个时间点从你这里发出去的请求到底发生了些什么事，然后才能进一步定位问题。好的程序员在写服务的时候知道要把异常信息封装后层层传播出去，并最终暴露到接口的4XX 响应里，这样，调用方就可以在堆栈信息里看到具体的出错信息。如果有的程序员没有这么做，就很容易出现 "无语问苍天"的感觉，比如你线上的服务出了问题，到日志系统 Kibana里一看，只有下面这行错误信息，你是不是会很崩溃？Error! HTTP 400 response from\
### 日志的完整性系统拆分了，日志系统也会分离，不仅系统调试变得困难，一些基于日志产生的事件流（EventStream）机制，也会变得难以处理。这意味着，想要真正从日志里获取完整有用的信息，就需要将不同服务的日志一起取出来进行分析和处理。这种需求并不是所有的应用都需要，因为我们是做支付的，经常需要一个事务的完整审计线索（Audittrail），也就是一条告诉我们 "每个相关的变化是谁做的，什么时候做的（whodid what and when for every change involved）" 的特殊日志。这件事以前处理起来非常复杂，现在倒是有了比较标准的解决方案，就是一个共享的消息总线（MessageBus），比如Kafka，有了日志就分门别类的扔到消息总线里处理，然后再进行分析。
### 超时设置为了保证用户体验，我们常常在系统里做一些超时设置（Timeout），比如一个请求从终端设备发过来，我们希望用户最多等待5 秒，超过 5秒就会放弃请求并返回相应的结果通知用户。系统拆分之后，我们可以做一个全局的超时设置，让所有的服务都使用这个全局变量。这一切看起来很美好，但稍不注意就会出现这样那样的问题。由于服务都是独立开发的，如果某一个服务的实现没有使用5秒的全局变量，我们就不知道这个服务到底超时多久才会返回结果，或者是否有超时的设置。另外，根据某些服务的性质不同，我们希望尽可能地给出最合理的延时设置。还有些请求会经历多次跨服务的调用，一旦同时出现超时，就会进行叠加，超时设置就完全不可控了。为了避免这些情况出现，就需要增加流程和规范，并且在进行系统拆分的时候进行宏观的设计和考虑。系统拆分会为我们带来灵活性，同样也会增加其他成本。
### 关于代码自由记得以前看到过一句话，当每个人都有绝对自由的时候，这个世界就没有自由可言了。拆分之后每个服务的实现都可以自主选择自己的语言，自己的数据存储方式，自己的代码风格。短期来说，这种做法可以让程序员的效率极大地提高，但是在同一个公司里，当各种各样的服务变成一场技术秀的时候，不论是维护还是稳定性都会受到极大的挑战。于是，这时便会有人扮演清道夫的角色，开始搞服务的标准化。另外，独立服务的开发周期相对较短，往往一两个工程师几周时间就可以写出一个新的服务，这样系统里会出现数不清的服务，有的服务由于人员离职等原因没人维护了，有的服务被重写了，有的服务要退休了，为了管理这些服务，我们还需要一个服务编排和管理系统。系统拆分之路漫漫，吾等将上下而求索。
## 如何去判断系统是不是到了必须进行拆分和服务化的临界点写到这里可能有读者会问，这篇文章中你介绍了大代码库的弊端，也写了很多系统拆分和服务化需要注意的问题，那么，你到底想告诉我什么呢？做为一个亲身经历过两种架构的工程师，我想说的是：系统拆分并不是做一道单选题，在进行系统拆分和服务化之前，我们需要综合考虑各种因素，找到平衡点。1.  你的业务量是否足够大，逻辑是否足够复杂以至于必须进行系统拆分。水平扩展是不是已经不起作用了？代码的相互影响、部署时间过长真的是系统的切肤之痛么？如果答案都是肯定的，那么你就应该进行系统拆分了。2.  对于服务化的架构，你的开发人员多少经验，能否正确驾驭而不是让本文中提到的问题成为拦路虎么？3.  系统拆分是一个"从一到多容易，从多到一困难"的过程，这个过程几乎是不可逆的。一旦你三分天下，想再一统江山就没那么容易了。所以在做拆分计划的时候，一定要慎之又慎。系统拆分是一个实践性很强的工作，并无一定之规，只有亲自参与了这个过程，才会有更深入的体会；在这个过程中，你的架构能力也会产生一个质的跃迁。文章的最后，我来总结一下今天分享的内容。今天的文章较长，涉及的内容也比较多：第一点，我谈到了创业公司初期，代码的构建状况以及遇到的相关问题；第二点，我解释了为什么随着业务的发展，我们会进行系统拆分；第三点，我提醒了业务拆分并不像看起来那么简单，我们需要时刻去注意细节；第四点，我分析了在进行系统拆分和服务化的过程中，需要注意哪些问题；第五点，我讲解了如何去判断一个系统是不是到了必须进行拆分和服务化的临界点。希望这些内容对走在创业路上的技术人有所帮助。你有系统拆分的经验和故事么，可以在留言中告诉我，我们一起讨论，也欢迎你把这篇文章转发给你工作中的伙伴，我们一起成长。再见。\![](Images/9646a8154f57432904b0215eacaebe87.png){savepage-src="https://static001.geekbang.org/resource/image/7f/01/7f0faa67e327efd58c80c7411a54b201.jpg"}戳此获取你的专属海报](https://time.geekbang.org/activity/sale-poster?utm_source=app&utm_medium=zhuyun-article&utm_campaign=zhuyun-saleposter&utm_content=zhuyun0416)