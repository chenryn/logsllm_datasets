In 24th Annual Network and Distributed System Security
Collection for Tor.
Symposium, NDSS 2017 (2017).
[54] McCoy, D., Bauer, K. S., Grunwald, D., Kohno, T., and Sicker, D. C. Shining
Light in Dark Places: Understanding the Tor Network. In Privacy Enhancing
Technologies, 8th International Symposium, PETS 2008 (2008).
[55] McLachlan, J., Tran, A., Hopper, N., and Kim, Y. Scalable Onion Routing with
Torsk. In Proceedings of the 2009 ACM Conference on Computer and Communica-
tions Security, CCS 2009 (2009).
[56] Melis, L., Danezis, G., and Cristofaro, E. D. Efficient Private Statistics with
In 23rd Annual Network and Distributed System Security
Succinct Sketches.
Symposium, NDSS 2016 (2016).
[57] Miller, A., Xia, Y., Croman, K., Shi, E., and Song, D. The Honey Badger of BFT
Protocols. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security (2016).
[58] Mittal, P., and Borisov, N. ShadowWalker: Peer-to-peer Anonymous Commu-
nication Using Redundant Structured Topologies. In Proceedings of the 2009 ACM
Conference on Computer and Communications Security, CCS 2009 (2009).
[59] Mittal, P., Wright, M. K., and Borisov, N. Pisces: Anonymous Communication
Using Social Networks. In 20th Annual Network and Distributed System Security
Symposium, NDSS 2013 (2013).
[60] Nielsen, J. B., Schneider, T., and Trifiletti, R. Constant Round Maliciously
In 24th
Secure 2PC with Function-independent Preprocessing using LEGO.
Annual Network and Distributed System Security Symposium, NDSS 2017 (2017).
[61] Pinkas, B., Schneider, T., and Zohner, M. Faster Private Set Intersection Based
on OT Extension. In Proceedings of the 23rd USENIX Security Symposium (2014).
[62] Rabin, T., and Ben-Or, M. Verifiable Secret Sharing and Multiparty Protocols
with Honest Majority (Extended Abstract). In Proceedings of the 21st Annual ACM
Symposium on Theory of Computing (1989).
[63] Saia, J., and Zamani, M. Recent Results in Scalable Multi-Party Computation.
In SOFSEM 2015: Theory and Practice of Computer Science - 41st International
Conference on Current Trends in Theory and Practice of Computer Science (2015).
[66] Wang, G., Luo, T., Goodrich, M. T., Du, W., and Zhu, Z. Bureaucratic Protocols
for Secure Two-Party Sorting, Selection, and Permuting. In Proceedings of the
5th ACM Symposium on Information, Computer and Communications Security,
ASIACCS 2010 (2010).
[67] Wang, T., and Goldberg, I.
In
Proceedings of the 12th annual ACM Workshop on Privacy in the Electronic Society,
WPES 2013 (2013).
Improved Website Fingerprinting on Tor.
[68] Wang, X., Ranellucci, S., and Katz, J. Global-Scale Secure Multiparty Com-
putation. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, CCS 2017 (2017).
[69] Winter, P., Köwer, R., Mulazzani, M., Huber, M., Schrittwieser, S., Lindskog,
S., and Weippl, E. R. Spoiled Onions: Exposing Malicious Tor Exit Relays. In
Privacy Enhancing Technologies - 14th International Symposium, PETS 2014 (2014).
[70] Yao, A. C. How to Generate and Exchange Secrets (Extended Abstract). In 27th
Annual Symposium on Foundations of Computer Science (1986).
[71] Yin, M., Malkhi, D., Reiter, M. K., Golan-Gueta, G., and Abraham, I. HotStuff:
BFT Consensus with Linearity and Responsiveness. In Proceedings of the 2019
ACM Symposium on Principles of Distributed Computing, PODC 2019 (2019).
[72] Zamani, M., Movahedi, M., and Saia, J. Millions of Millionaires: Multiparty
Computation in Large Networks. Cryptology ePrint Archive, Report 2014/149,
2014.
A IDEAL FUNCTIONALITIES
This appendix contains the ideal functionalities used or realized by
the protocols in the main body of the paper.
A.1 FPre
Functionality FPre, realized by ΠPre (Figure 1) appears in Figure 6.
A.2 FInput
Functionality FInput, realized by ΠInput (Figure 4) appears in Fig-
ure 7.
A.3 FAccMsg
The accountable message functionality FAccMsg used by ΠInput
is given in Figure 8. This functionality is used to send messages
between two parties in an accountable way. Specifically, it allows
a sender (Pin) to send a (private) message m to a receiver R in the
presence of a committee C in such a way that R cannot later deny
that he received the message. This functionality consists of two
procedures, send and reveal. The send procedure allows Pin to send
a message to R in such a way that all parties in C agree whether
a valid message was sent, without knowing the content of that
message. The reveal procedure allows R to reveal the message m he
received in send to the rest of C. Note that if send succeeds, then
Pin will not be disqualified in the reveal procedure.
A.4 FOnline
We define an ideal functionality for the online phase of our protocol
in Figure 9. The Computation Committee members provide the au-
thenticated inputs from FInput and the MAC key and authenticated
triples from FPre. The functionality reconstructs ∆ and verifies that
the inputs and triples are correctly authenticated under ∆. If not, it
sends abort to all parties. Otherwise, it computes the circuit C given
the inputs and returns the result to the adversary. The adversary
then decides whether the functionality should return the output to
the honest committee members.
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom630Functionality FInput
Notation:
• Let Pin be the sender with input x .
• When a party Pi outputs (abort, Pin) this means he aborts
and blames Pin. If he outputs (abort, C) this means he aborts
and blames the committee.
• Sin ⊆ C is the set of parties blaming Pin, SC ⊆ C is the set
of parties blaming the committee, and Saccept ⊆ C is the set
of parties that blame nobody.
Authenticate Input: On input {x i
where h ∈ {1, . . . , b }, i ∈ {1, . . . , c },
• Saccept = C.
• The functionality computes xh = c
h } from Pin,
i =1 x(i)
, and random
shares of the authenticated value, (cid:8)(∆xh)(i)(cid:9). It gives A the
authenticated shares (cid:16)x(i)
, (∆xh)(i)(cid:17) for Pi ∈ A.
h
h
= (∆xh)(i).
h
• Let m(i)
•
•
•
If Pin < A and A , ∅, A partitions C into (Saccept, SC).
if A = {Pin}, A either sets Sin = C, or Saccept = C.
If {Pin} ⊂ A, A partitions C into (Saccept, Sin, SC). Ad-
ditionally, for each Pi ∈ Saccept, A sets the values of
(x(i)
h ), arbitrarily.
to Pi ∈ Sin, and (cid:16)x(i)
• The functionality sends (abort, C) to Pi ∈ SC , (abort, Pin)
h (cid:17) to Pi ∈ Saccept.
, m(i)
, m(i)
h
h
Figure 7: Input sharing functionality.
Functionality FPre
F
•
i =1
Initialize ∆ =⊥.
Notation:
• Let CC be the Computation Committee.
• Let TC1, . . . , TCmTC be the Triple Committees.
• Let c be the size of each committee.
• Let A denote the set of parties controlled by the adversary
•
Initialize: On input init from CC,
•
•
Forward each input to A as it is received.
2λ , and randomly choose shares ∆(i) ←
If ∆ =⊥, set ∆ ← F
2λ such that c
∆(i) = ∆. Parties in A ∩ CC can choose
their shares.
If A ∩ CC , ∅, allow A to input abort, which causes the
functionality to abort and reject further calls.
If A does not abort, output ∆(i) to Pi .
•
Random: On input (random, F, b) where F ∈ {F
each Pi ∈ CC,
•
•
•
Forward each input to A as it is received.
For h = 1, . . . , b, sample a random field element rh ← F.
For h = 1, . . . , b, produce random authenticated sharing
[[rh]]CC (i.e., compute µh = rh · ∆ and produce random
sharings over CC of rh and µh ). Parties in A ∩ CC can
choose their shares.
If A ∩ CC , ∅, allow A to input abort, which causes the
functionality to abort and reject further calls.
If A does not abort, for h = 1, . . . , b, output [[rh]](i) to
Pi ∈ CC\A.
2λ , F
2} from
•
•
Triples: On input (triples, ℓ) from each Pi ∈ TCj ,
•
•
•
Forward each input to A as it is received.
For h = 1, . . . , ℓ, choose xh , yh ← F
2, and set zh = xh ·yh .
For h = 1, . . . , ℓ, produce random authenticated sharings
[[xh]]CC, [[yh]]CC, and [[zh]]CC (i.e., for w ∈ {xh , yh , zh }
compute µ = w · ∆ and produce random sharings over CC
of w and µ). Parties in A ∩ CC can choose their shares.
If A ∩ (cid:0)TCj ∪ CC(cid:1) , ∅, allow A to input abort, in which
case further calls from TCj are rejected, and abort is output
to all Pi ∈ TCj ∪ CC. The functionality continues to respond
to calls from other committees.
If A does not output abort, for h = 1, . . . , ℓ, output
(cid:0)[[xh]](i), [[yh]](i), [[zh]](i)(cid:1) to Pi ∈ CC\A.
•
•
Figure 6: Preprocessing functionality.
A.5 FRM−MPC
We give the functionality for RelMode MPC in Figure 10. This
is designed the setting in which a large number of parties wish
to participate in a secure computation by providing inputs and
(potentially) participating in the computation. To enable efficient
computation, there is a single designated Computation Committee
(CC) of size c. This committee performs the online phase of the
computation and is allowed to abort the functionality. No other
party can cause an abort, making this MPC functionality resilient
to failure and malicious behavior by most parties.
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom631Functionality FAccMsg
Notation:
• Let Pin be the sender with input m.
• Let R be the receiver.
• Let C be the committee (Note that R ∈ C).
• When a party Pi outputs (abort, Pin) this means he aborts
and blames Pin. If he outputs (abort, C) this means he aborts
and blames the committee.
Send: On input (send, m) from Pin,
• The functionality stores m.
•
•
If Pin < A, output (accept, m) to R, and output accept to all
parties in C \ {R}.
If Pin ∈ A, do the following:
ś If R < A, allow A to specify an input in {accept, abort}.
If A inputs accept, then R outputs (accept, m) and all
parties in C \ {R} output accept. If A inputs abort, then
all parties in C (including R) output (abort, Pin) (i.e., they
abort and blame Pin).
ś If R ∈ A, allow A to specify a partition of C,
(Saccept, Sin, SC). All Pi ∈ Saccept output accept (if R ∈
Saccept, he additionally outputs m). All Pi ∈ Sin output
(abort, Pin). All Pi ∈ SC output (abort, C) (i.e., they abort
and blame the committee).
Reveal: On input (reveal) from R,
•
If R < A, the functionality outputs (accept, m) to all parties
in C.
If R ∈ A and Pin < A, A specifies a partition of C,
(Saccept, SC). Every Pi ∈ Saccept outputs (accept, m). Every
Pi ∈ SC outputs (abort, C).
If both R ∈ A and Pin ∈ A, A specifies a partition as
above, and, additionally, for each party Pi ∈ Saccept, A
specifies a message m′i . Then, every player Pi ∈ Saccept
outputs (accept, m′i) and Pi ∈ SC output (abort, C).
Figure 8: Accountable messaging functionality.
•
•
Functionality FOnline
Notation:
• The functionality is parametrized by a Boolean circuit C.
• Let CC = {P1, . . . , Pc } be the Computation Committee.
• Let x1, . . . , xn be all of the input bits successfully provided
• Let ℓ denote the total number of AND gates in the circuit C,
and (cid:0)[[w j]](i), [[yj]](i), [[zj]](i)(cid:1) denote the ith party’s shares
of the jth triple.
by all parties during the input sharing phase.
∈
CC provides the following input: ∆(i),
h =1, (cid:8)(cid:0)[[xh]](i), [[∆xh]](i)(cid:1)(cid:9)n
If not every member of CC provides the same number of
input shares and triple shares, output abort to every party.
Compute:
Party Pi
(cid:8)(cid:0)[[wh]](i), [[yh]](i), [[zh]](i)(cid:1)(cid:9) ℓ
•
• Reconstruct ∆ from the shares provided.
• Reconstruct and verify the input values, x1, . . . , xn from
the shares provided. If verification fails for any input value,
output abort to every party.
h =1
• Reconstruct and verify the triples from the shares provided.
If any triple is invalid (z , w · y), or if verification fails for
any triple value, output abort to every party.
• Compute C(x1, . . . , xn) and output the result to A.
•
If A says continue, send C(x1, . . . , xn) to the remainder of
CC. Otherwise, send abort to the remainder of the CC.
Figure 9: Functionality for computing the online phase.
Functionality FRM−MPC
Notation:
• The functionality is parametrized by a Boolean circuit C
• Let P = {P1, . . . , Pn } be the set of all parties, and let CC =
outputting o bits.
{Pi1 , . . . , Pic } be the Computation Committee.
•
Compute: On input (x1, . . . , xn) from P (each party supplies
one input):
•
If A∩CC , ∅, then A inputs either abort or run to the func-
tionality. If A inputs abort, then the functionality outputs
⊥ to all parties.
For any Pi ∈ A, A may input (abort, i) to the functionality
(i.e., if an input party aborts), in which case the functionality
sets xi =⊥ and outputs (abort, i) to Computation Commit-
tee.
• The functionality computes (y1, . . . , yo) = C(x1, . . . , xn)
If A ∩ CC , ∅, then the functionality returns y to A. A
•
specifies a set Sabort ⊆ P.
• The functionality outputs ⊥ to all Pi ∈ Sabort and outputs
(y1, . . . , yo) to all Pi ∈ CC \ Sabort.
Figure 10: Large-Scale MPC functionality.
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom632