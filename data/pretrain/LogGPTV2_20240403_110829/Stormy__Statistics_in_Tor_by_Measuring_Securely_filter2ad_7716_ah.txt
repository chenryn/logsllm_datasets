### References

1. **In 24th Annual Network and Distributed System Security Symposium, NDSS 2017 (2017).**
   - Collection for Tor.

2. **McCoy, D., Bauer, K. S., Grunwald, D., Kohno, T., and Sicker, D. C. (2008).** 
   - Shining Light in Dark Places: Understanding the Tor Network. In *Privacy Enhancing Technologies, 8th International Symposium, PETS 2008*.

3. **McLachlan, J., Tran, A., Hopper, N., and Kim, Y. (2009).** 
   - Scalable Onion Routing with Torsk. In *Proceedings of the 2009 ACM Conference on Computer and Communications Security, CCS 2009*.

4. **Melis, L., Danezis, G., and Cristofaro, E. D. (2016).** 
   - Efficient Private Statistics with Succinct Sketches. In *23rd Annual Network and Distributed System Security Symposium, NDSS 2016*.

5. **Miller, A., Xia, Y., Croman, K., Shi, E., and Song, D. (2016).** 
   - The Honey Badger of BFT Protocols. In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security*.

6. **Mittal, P., and Borisov, N. (2009).** 
   - ShadowWalker: Peer-to-peer Anonymous Communication Using Redundant Structured Topologies. In *Proceedings of the 2009 ACM Conference on Computer and Communications Security, CCS 2009*.

7. **Mittal, P., Wright, M. K., and Borisov, N. (2013).** 
   - Pisces: Anonymous Communication Using Social Networks. In *20th Annual Network and Distributed System Security Symposium, NDSS 2013*.

8. **Nielsen, J. B., Schneider, T., and Trifiletti, R. (2017).** 
   - Constant Round Maliciously Secure 2PC with Function-independent Preprocessing using LEGO. In *24th Annual Network and Distributed System Security Symposium, NDSS 2017*.

9. **Pinkas, B., Schneider, T., and Zohner, M. (2014).** 
   - Faster Private Set Intersection Based on OT Extension. In *Proceedings of the 23rd USENIX Security Symposium*.

10. **Rabin, T., and Ben-Or, M. (1989).** 
    - Verifiable Secret Sharing and Multiparty Protocols with Honest Majority (Extended Abstract). In *Proceedings of the 21st Annual ACM Symposium on Theory of Computing*.

11. **Saia, J., and Zamani, M. (2015).** 
    - Recent Results in Scalable Multi-Party Computation. In *SOFSEM 2015: Theory and Practice of Computer Science - 41st International Conference on Current Trends in Theory and Practice of Computer Science*.

12. **Wang, G., Luo, T., Goodrich, M. T., Du, W., and Zhu, Z. (2010).** 
    - Bureaucratic Protocols for Secure Two-Party Sorting, Selection, and Permuting. In *Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, ASIACCS 2010*.

13. **Wang, T., and Goldberg, I. (2013).** 
    - Improved Website Fingerprinting on Tor. In *Proceedings of the 12th Annual ACM Workshop on Privacy in the Electronic Society, WPES 2013*.

14. **Wang, X., Ranellucci, S., and Katz, J. (2017).** 
    - Global-Scale Secure Multiparty Computation. In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017*.

15. **Winter, P., Köwer, R., Mulazzani, M., Huber, M., Schrittwieser, S., Lindskog, S., and Weippl, E. R. (2014).** 
    - Spoiled Onions: Exposing Malicious Tor Exit Relays. In *Privacy Enhancing Technologies - 14th International Symposium, PETS 2014*.

16. **Yao, A. C. (1986).** 
    - How to Generate and Exchange Secrets (Extended Abstract). In *27th Annual Symposium on Foundations of Computer Science*.

17. **Yin, M., Malkhi, D., Reiter, M. K., Golan-Gueta, G., and Abraham, I. (2019).** 
    - HotStuff: BFT Consensus with Linearity and Responsiveness. In *Proceedings of the 2019 ACM Symposium on Principles of Distributed Computing, PODC 2019*.

18. **Zamani, M., Movahedi, M., and Saia, J. (2014).** 
    - Millions of Millionaires: Multiparty Computation in Large Networks. *Cryptology ePrint Archive, Report 2014/149*.

### Appendix: Ideal Functionalities

This appendix contains the ideal functionalities used or realized by the protocols in the main body of the paper.

#### A.1 FPre
- **Functionality FPre**, realized by ΠPre (Figure 1), is detailed in Figure 6.

#### A.2 FInput
- **Functionality FInput**, realized by ΠInput (Figure 4), is detailed in Figure 7.

#### A.3 FAccMsg
- **The accountable message functionality FAccMsg** used by ΠInput is given in Figure 8. This functionality allows a sender (Pin) to send a private message m to a receiver R in the presence of a committee C, ensuring that R cannot later deny receiving the message. It consists of two procedures: `send` and `reveal`.

#### A.4 FOnline
- **Ideal functionality for the online phase** of our protocol is defined in Figure 9. The Computation Committee members provide authenticated inputs from FInput and the MAC key and authenticated triples from FPre. The functionality reconstructs ∆ and verifies the inputs and triples. If verification fails, it sends an abort signal to all parties. Otherwise, it computes the circuit C and returns the result to the adversary, who then decides whether to return the output to the honest committee members.

#### A.5 FRM−MPC
- **Functionality for RelMode MPC** is given in Figure 10. This is designed for a setting where a large number of parties wish to participate in a secure computation. There is a single designated Computation Committee (CC) that performs the online phase of the computation and can abort the functionality. No other party can cause an abort, making this MPC functionality resilient to failure and malicious behavior by most parties.

### Figures

#### Figure 7: Input Sharing Functionality
- **Notation:**
  - Let Pin be the sender with input x.
  - When a party Pi outputs (abort, Pin), it means they abort and blame Pin. If they output (abort, C), it means they abort and blame the committee.
  - Sin ⊆ C is the set of parties blaming Pin, SC ⊆ C is the set of parties blaming the committee, and Saccept ⊆ C is the set of parties that blame nobody.

- **Authenticate Input:**
  - On input {x i h } from Pin, where h ∈ {1, . . . , b}, i ∈ {1, . . . , c}:
    - Saccept = C.
    - The functionality computes xh = c h=1 x(i) h, and random shares of the authenticated value, (cid:8)(∆xh)(i)(cid:9). It gives A the authenticated shares (cid:16)x(i) h, (∆xh)(i)(cid:17) for Pi ∈ A.
    - Let m(i) h = (∆xh)(i).
    - If Pin < A and A ≠ ∅, A partitions C into (Saccept, SC).
    - If A = {Pin}, A either sets Sin = C, or Saccept = C.
    - If {Pin} ⊂ A, A partitions C into (Saccept, Sin, SC). Additionally, for each Pi ∈ Saccept, A sets the values of (x(i) h ), arbitrarily.
    - The functionality sends (abort, C) to Pi ∈ SC, (abort, Pin) to Pi ∈ Sin, and (cid:16)x(i) h, m(i) h(cid:17) to Pi ∈ Saccept.

#### Figure 6: Preprocessing Functionality
- **Notation:**
  - Let CC be the Computation Committee.
  - Let TC1, . . . , TCmTC be the Triple Committees.
  - Let c be the size of each committee.
  - Let A denote the set of parties controlled by the adversary.
  - Initialize: On input init from CC, initialize ∆ =⊥.
  - Forward each input to A as it is received.
  - If ∆ =⊥, set ∆ ← F2λ, and randomly choose shares ∆(i) ← F2λ such that c ∆(i) = ∆. Parties in A ∩ CC can choose their shares.
  - If A ∩ CC ≠ ∅, allow A to input abort, which causes the functionality to abort and reject further calls.
  - If A does not abort, output ∆(i) to Pi.

- **Random:**
  - On input (random, F, b) where F ∈ {F2λ, F2} from each Pi ∈ CC:
    - Forward each input to A as it is received.
    - For h = 1, . . . , b, sample a random field element rh ← F.
    - For h = 1, . . . , b, produce random authenticated sharing [[rh]]CC (i.e., compute µh = rh · ∆ and produce random sharings over CC of rh and µh). Parties in A ∩ CC can choose their shares.
    - If A ∩ CC ≠ ∅, allow A to input abort, which causes the functionality to abort and reject further calls.
    - If A does not abort, for h = 1, . . . , b, output [[rh]](i) to Pi ∈ CC\A.

- **Triples:**
  - On input (triples, ℓ) from each Pi ∈ TCj:
    - Forward each input to A as it is received.
    - For h = 1, . . . , ℓ, choose xh, yh ← F2, and set zh = xh · yh.
    - For h = 1, . . . , ℓ, produce random authenticated sharings [[xh]]CC, [[yh]]CC, and [[zh]]CC (i.e., for w ∈ {xh, yh, zh} compute µ = w · ∆ and produce random sharings over CC of w and µ). Parties in A ∩ CC can choose their shares.
    - If A ∩ (TCj ∪ CC) ≠ ∅, allow A to input abort, in which case further calls from TCj are rejected, and abort is output to all Pi ∈ TCj ∪ CC. The functionality continues to respond to calls from other committees.
    - If A does not output abort, for h = 1, . . . , ℓ, output (cid:0)[[xh]](i), [[yh]](i), [[zh]](i)(cid:1) to Pi ∈ CC\A.

#### Figure 8: Accountable Messaging Functionality
- **Notation:**
  - Let Pin be the sender with input m.
  - Let R be the receiver.
  - Let C be the committee (Note that R ∈ C).
  - When a party Pi outputs (abort, Pin), it means they abort and blame Pin. If they output (abort, C), it means they abort and blame the committee.

- **Send:**
  - On input (send, m) from Pin:
    - The functionality stores m.
    - If Pin < A, output (accept, m) to R, and output accept to all parties in C \ {R}.
    - If Pin ∈ A, do the following:
      - If R < A, allow A to specify an input in {accept, abort}. If A inputs accept, then R outputs (accept, m) and all parties in C \ {R} output accept. If A inputs abort, then all parties in C (including R) output (abort, Pin).
      - If R ∈ A, allow A to specify a partition of C, (Saccept, Sin, SC). All Pi ∈ Saccept output accept (if R ∈ Saccept, he additionally outputs m). All Pi ∈ Sin output (abort, Pin). All Pi ∈ SC output (abort, C).

- **Reveal:**
  - On input (reveal) from R:
    - If R < A, the functionality outputs (accept, m) to all parties in C.
    - If R ∈ A and Pin < A, A specifies a partition of C, (Saccept, SC). Every Pi ∈ Saccept outputs (accept, m). Every Pi ∈ SC outputs (abort, C).
    - If both R ∈ A and Pin ∈ A, A specifies a partition as above, and, additionally, for each party Pi ∈ Saccept, A specifies a message m′i. Then, every player Pi ∈ Saccept outputs (accept, m′i) and Pi ∈ SC output (abort, C).

#### Figure 9: Functionality for Computing the Online Phase
- **Notation:**
  - The functionality is parametrized by a Boolean circuit C.
  - Let CC = {P1, . . . , Pc} be the Computation Committee.
  - Let x1, . . . , xn be all of the input bits successfully provided by all parties during the input sharing phase.
  - Let ℓ denote the total number of AND gates in the circuit C, and (cid:0)[[w j]](i), [[yj]](i), [[zj]](i)(cid:1) denote the ith party’s shares of the jth triple.

- **Compute:**
  - Party Pi ∈ CC provides the following input: ∆(i), (cid:8)(cid:0)[[xh]](i), [[∆xh]](i)(cid:1)(cid:9)n h=1, (cid:8)(cid:0)[[wh]](i), [[yh]](i), [[zh]](i)(cid:1)(cid:9) ℓ h=1.
  - If not every member of CC provides the same number of input shares and triple shares, output abort to every party.
  - Reconstruct ∆ from the shares provided.
  - Reconstruct and verify the input values, x1, . . . , xn from the shares provided. If verification fails for any input value, output abort to every party.
  - Reconstruct and verify the triples from the shares provided. If any triple is invalid (z ≠ w · y), or if verification fails for any triple value, output abort to every party.
  - Compute C(x1, . . . , xn) and output the result to A.
  - If A says continue, send C(x1, . . . , xn) to the remainder of CC. Otherwise, send abort to the remainder of the CC.

#### Figure 10: Large-Scale MPC Functionality
- **Notation:**
  - The functionality is parametrized by a Boolean circuit C outputting o bits.
  - Let P = {P1, . . . , Pn} be the set of all parties, and let CC = {Pi1, . . . , Pic} be the Computation Committee.

- **Compute:**
  - On input (x1, . . . , xn) from P (each party supplies one input):
    - If A ∩ CC ≠ ∅, then A inputs either abort or run to the functionality. If A inputs abort, then the functionality outputs ⊥ to all parties.
    - For any Pi ∈ A, A may input (abort, i) to the functionality (i.e., if an input party aborts), in which case the functionality sets xi = ⊥ and outputs (abort, i) to the Computation Committee.
    - The functionality computes (y1, . . . , yo) = C(x1, . . . , xn).
    - If A ∩ CC ≠ ∅, then the functionality returns y to A. A specifies a set Sabort ⊆ P.
    - The functionality outputs ⊥ to all Pi ∈ Sabort and outputs (y1, . . . , yo) to all Pi ∈ CC \ Sabort.

---

This optimized version aims to improve clarity, coherence, and professionalism by structuring the text, providing clear headings, and ensuring consistent formatting.