p
o
l
e
v
e
D
e
r
a
w
t
f
o
S
r
e
d
i
v
o
r
P
n
i
a
h
c
l
o
o
T
r
e
h
s
i
l
b
u
P
e
r
a
w
t
f
o
S
t
e
k
r
a
M
e
r
a
w
t
f
o
S
r
e
s
U
d
n
E
Actor
OS Developer
Hardware Vendor
Library Provider
Software Developer
Toolchain Provider
Software Publisher
Software Market
End User
= fully applies;
= partly applies,
= does not apply at all.
(ICC), which prompts developers to divide their apps into
smaller parts (e.g., plugins) and allows them to act as service
providers (e.g., Facebook app, Play app, etc.). Technically, ICC
is based on the Linux kernel’s inter-process communication—
primarily via a new IPC mechanism called Binder. However,
since logical communication occurs between application com-
ponents such as databases, user interfaces, and services, this
Android-speciﬁc IPC has been coined as Inter-Component
Communication in the literature [4].
B. Involved Actors
Software ecosystems involve a number of actors that each
have their own rights and duties, which differ between appiﬁed
and conventional ecosystems in some aspects. We differentiate
these actors as groups of ecosystem participants, describe
their primary task(s), their power to inﬂuence the security and
privacy of the ecosystem with their decisions, and then give
concrete examples of each class of actors. Table I illustrates
the different actors, their inﬂuence on the ecosystem’s security
and privacy, and their interaction with each other.
Although feedback loops can be established between any
number of actors, in the following discussion we focus on the
potential direct impact of a security decision made by one user
on all other actors. We do not consider indirect impact, e.g.,
when users protest against or boycott certain apps and thus
force app or platform developers to react.
1) Platform Developers: Platform developers are responsi-
ble for providing the Android Open Source Platform (AOSP).
They make basic system and security decisions and all other
actors build on their secure paradigms. Library providers and
app developers are bound to the provided SDK, and app mar-
kets have to rely on Android’s open approach (instead of, for
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
Ecosystem
Tool Chain 
Provider
Uses tool chain
App Developers
Publish App
Publish App
Security Impact
Tool Chain Providers
Advertisement 
Networks
Web Services
Google Play
Install
3rd Party Market
Market Operators
Sideloading
End User
k
r
o
w
e
N
t
3rd Party App
Library (e.g. Ads)
IPC
3rd Party App
Access Android API
IPC
Application Framework
Android Middleware
Inter-Process Communication
Linux
Android Platform
App Developers /
Library Providers
Platform Developer /
OS Vendor
Fig. 1. The Android ecosystem: Actors and their impact on the ecosystem’s security.
example, Apple’s walled-garden ecosystem). An exception is
that device vendors can implement their own security decisions
and need not adhere to Android’s paradigms. In reality, though,
they mostly build upon the provided foundations.
2) Device Vendors: Device vendors adopt the AOSP and
customize it for their different needs. A variety of device
vendors currently share the market for mobile devices using
Android [5]. Besides adaptation of the basic Android soft-
ware stack to the vendor-speciﬁc hardware platforms, vendors
customize in order to distinguish their Android device from
their competitors’. Thus, many versions of vendor-speciﬁc
apps and modiﬁed versions of Android’s original user in-
terface are being distributed with Android-based platforms.
The impact of device vendors on the ecosystem’s security
is signiﬁcant: Although, naturally, their customizations only
affect their customers, this user-base can be large in case
of big vendors such as Samsung or HTC. Device vendors
can adopt security decisions from the platform developers
or add their own solutions (cf. Samsung KNOX [6]) on
which library and app developers can build. However, device
vendors cannot change the way apps are published in markets,
which is why their impact on publishers and markets is very
limited—e.g. they could not enforce CA-signed instead of self-
signed certiﬁcates for app signing practices without breaking
Android’s guidelines.
3) Library Providers: Based on the platform’s API, library
providers build their own APIs to offer new features such as
ad services or to make the use of (possibly unnecessarily)
complicated platform APIs easier for app developers. Libraries
exist for UI components (they can but need not be attached to
network tasks) as well as for ads or crash reports. Library
developers have the power to make all apps that
include
them either more or less secure. Library developers suffer or
beneﬁt from security decisions made by platform developers
and device vendors. However, their decisions do not affect the
platform security in general. Their positive/negative security
decisions propagate to app developers who choose to use their
libraries—they can, for example, wrap badly designed pro-
gramming interfaces from platform developers. Their decisions
affect neither app publishers nor markets directly. Typically,
library providers offer ad services, networking features or app
usage evaluation features.
4) App Developers: App developers write apps using the
APIs deﬁned by platform developers and of those libraries
they choose to include. They can opt to write code themselves
or use existing third-party code. In theory, they can make
essential contributions to security. In practice,
they make
unsafe choices and implement features in the least laborious
way, which is frequently not the most secure choice.
While app developers can break secure default interfaces
provided by platform developers/device vendors (e.g. crypto
primitive API misuse), this has no effect on the platform
security in general. Their decisions neither affect app pub-
lishers nor markets directly. Still, app developers may impact
libraries’ security (e.g. as fraud is a frequently evaluated issue).
5) Toolchain Providers: Toolchain providers offer helpful
tools for app developers (e.g. the Eclipse ADT for Android
app development). They can implement many analysis tools
that help discover API misuse. Toolchain providers can ﬁx
some weaknesses introduced by platform providers and device
vendors (e.g. confusing permission descriptions, or hard-to-use
APIs). All app developers and their users beneﬁt/suffer from
good/bad toolchain provider support.
6) App Publishers: App publishers are professional service
providers that help developers publish their apps to certain
markets. They receive either binary or source code, add certain
properties like ads, and distribute the app to one or more app
markets. In theory, they can run preliminary analyses on the
code and report or ﬁx bugs, as well as ﬁlter malware. If app
signing is delegated to the app publishers, they could also
437437
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
surreptitiously insert malicious code. Several app publishers
maintain substantial numbers of apps [7] and thereby may sub-
stantially impact markets’ security. Hence, a single publisher’s
impact on the ecosystem’s security is rather impressive.
7) App Markets: App markets—Google Play is the most
popular one—distribute apps from developers to the end users.
Users as well as app developers rely on them to make sure that
the apps are distributed in a consistent, unchanged, reliable,
and benign way. In theory, app markets have the potential
to ﬁnd not only malware, but also buggy and unsafe code.
To do this, they can apply various kinds of security analyses
techniques—such as static or dynamic code analysis—on all
apps they distribute. For example, Google Play runs suppos-
edly multiple tests on apps prior to distribution, including
static/dynamic analysis and machine learning [8]. However,
they do not run deeper checks to detect dangerous misuse of
the Android API. No app market runs (theoretically possible)
runtime tests, nor do they exclude apps signed with the same
key corresponding to different developers.
8) Users: Users are app consumers in the ecosystem. They
can make the decision to install (non-pre-installed) apps, and
have to conﬁrm the permissions that apps request. They are
the most likely target of attacks. In theory, they can make safe
choices, as well as choose not to use important credentials.
However, a single user’s impact on the ecosystem’s security is
negligible. Users as a group have to rely on security decisions
made by all other actors in the ecosystem.
C. Global Attacker Model
We provide a taxonomy for attacker capabilities on An-
droid. This taxonomy reﬂects the threat models we extracted
during our systematization in Section IV and helps to later on
compare proposed countermeasures.
When considering the attacker capabilities, we had the
options to order them across capability categories or within
categories. We decided to order them within categories, since
our categories depend on too many distinct factors to be
comparable and since we base our systematization on those
categories. For instance, a user connecting frequently to public
Wi-Fi access points is susceptible to network attacks, but this
behavior does not inﬂuence other capability categories like,
e.g., piggybacking apps. We order the attacker capabilities
vertically,
i.e., we rate the power of attackers in speciﬁc
capability categories. We use the following semantics to note
attacker capabilities in each category: Solid circles ( ) denote
strong capabilities corresponding to a weak attacker model.
Half-ﬁlled circles ( ) denote common attacker capabilities,
while hollow circles ( ) describe the absence of any capability
in the category, strengthening the attacker model.
Next, we introduce our categories for attacker capabilities,
informally deﬁne the exact capabilities attackers may have in
each category, and explain our ordering of those capabilities.
C1—Dangerous permissions: The attacker has code run-
ning on the victim device, which has been granted dangerous
permissions ( ) that give access to privacy sensitive user data
or control over the device that can negatively impact the user.
Dangerous permissions must be explicitly granted by the user
during app installation. We assume normal permissions ( )
when the attacker has been granted only permissions that are
of lower risk and automatically granted by the system.
C2—Multiple apps: Attacker-controlled apps are running
on the user device. Full capability indicates that the attacker
has two or more apps running on the victim device ( ). This
would enable collusion attacks via overt and covert channels.
Half-capability ( ) means that only one attacker-controlled app
is running on the device. In general, the capability of having at
least one app on the user device enables the attacker to engage
in ICC with other apps on the device or to scan the local ﬁle
system to the extent the attacker-controlled apps’ permissions
allow this.
C3—Piggybacking apps: The attacker re-packages other
apps and is able to modify the existing code or include new
code ( ). A limited piggybacking capability ( ) is assumed if
the attacker provides code that is intentionally loaded by app
developers into their apps (e.g., libraries). Limited piggyback-
ing is assumed to be the weaker capability, because libraries
used by developers are hosted by the app (i.e., share the host
sandbox) limiting the attacker to the host app’s permissions.
In contrast, re-packaging apps allows the attacker to request
more permissions for the repackaged app.
C4—Native code: The attacker has an app containing native
code, i.e., shared libraries. This requires having at least one
app on the device under control (C2. ). Native code that
implements exploit payload, native programs, or zipper/crypto
routines for obfuscation are considered as full capability ( ).
Non-exploit code that still provides the means to modify
the app’s memory space is assumed as half-capability ( ).
Although Android’s design permits all apps to contain native
code, there are apps that contain none ( ).
C5—Dynamic code loading: The attacker is able to dy-
namically load code at run-time ( ) into an app (e.g., using
the Java reﬂection API). This requires having at least one
app on the device under control (C2. ). Half-capability ( )
is assumed if the attacker can inject code into another, benign
but insecure app. Dynamic code loading is assumed to be a
stronger capability than code injection, since dynamic loading
allows the attacker to use obfuscation techniques to execute
the attack surreptitiously.
C6—Network attacks: The attacker is capable of mod-
ifying/interrupting/forging the Wi-Fi and cellular network
communication of the end user device ( ). We assume a
passive attacker ( ) if the attacker is only able to eavesdrop
on the communication. Technically, a network attack can be
accomplished as in traditional attacker models by, e.g., setting
up a rogue access point or base station. On Android, an
attacker can gain the same capability through a malicious VPN
app, through which all network trafﬁc of all processes is routed
when it is activated by the user. This requires at least C2.
.
438438
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
E
c
o
s
y
s
t
e
m
a
n
d
F
r
a
g
m
e
n
t
a
t
i
o
n
o
f
t
h
e
V
e
n
d
o
r
C
u
s
t
o
m
i
z
a
t
i
o
n
s
A
p
p
l
i
c
a
t
i
o
n
S
i
g
n
i
n
g
I
s
s
u
e
s
—
[
1
1
]
,
[
7
]
[
5
2
]
,
[
2
4
]
,
[
5
3
]
[
1
5
]
,
C
h
a
n