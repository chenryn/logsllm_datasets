在此阶段，我们执行实际的攻击，恶意构造的请求会被发送以获取攻击结果或为未来的攻击做准备。
现在来计算具体的数学方法。在学习阶段，首先在n个阻断请求中测量相应时间集合，并且定义一个“标记阈值”。这个标记阈值在确定一个请求是否是阻断还是转发时作为一个参考值。这个阈值定义如下：
同理，再在n个转发请求中的响应时间集合定义一个“转发阈值”，该阈值的边界可以被定义为所有正常WAF转发请求的耗时集合中的最小值（译者注：因为转发请求耗时明显大于阻断请求，所以以最小值作为边界）。这个阈值可以定义如下：
在如上两个公式当中，常量δ表示由于一些网络因素等导致转发阈值和标记阈值边界的微小位移变化。
所以理论上，我们的转发边界和标记边界都是作为转发请求和阻断请求的耗时阈值。且网络本身的一些噪声等因素，这些阈值是不可在多个攻击场景下进行复制使用的。所以我们最终采用这两个边界值的均值来获得最终阻断请求和转发请求的耗时之间的边界值。
显然时间测量后，一个请求的耗时大于tβ即这个请求为转发请求，如果耗时小于tβ那么它就是阻断请求。但是任何请求耗时如果接近tβ可以极有可能是低网络噪声环境下的转发请求，也有可能是高网络噪声环境下的转发请求。为了排除这一点，攻击者需要放大这个攻击向量。我们将详细讨论这个问题。
## 实验
### 安装程序
为了验证上述理论，我采用了两种最常用的WAF部署拓扑：反向代理和插件部署服务器。我在我自己的服务器上做了这些设置，并完全按照正常的部署方式进行了场景复制。为了测试这种攻击方法，我选择了Shadow
Daemon（），因为它是开源的，且规则维护度很小。且它很容易设置，因此将它的代码改写成系统插件不是很难。
### 学习阶段
我写了一个小python代码，在学习阶段它会一个接一个每2秒重复发送正常的和恶意的请求。一共发送了200个请求，其中正常请求和恶意请求各100个。学习阶段得出的结果清晰地表明这种方法具有一定有效性。
转发请求和阻断请求的一些样例如下：
可能会注意到的是，请求被阻断的情况下，某些请求可能超过了预想的标记边界，这可能是网络连接丢包或者网络堵塞问题。但是可以清楚发现任何一个正常数据包或者恶意数据包都没有越过最终的绝对时间边界。
### 攻击阶段
实际攻击测试下，将会收集一组最常见的恶意payload，以便对目标进行测试。现在想法是一串天街了不同的混淆值而生成多种形式的变种payload。这种变种payload和原来的恶意payload语义相同，但是语法不同导致WAF的正则表达式可能无法检测到它。举几个例子：
现在将一系列此类请求发送到部署了WAF的服务器并记录其响应时间，为了进一步验证实验无误，同时会记录请求对应的响应码和响应页面，并识别出403状态和响应页面阻止保证结果一致。
在反向代理部署的WAF上，结果符合预期。标记边界和转发边界中间的最小时间间隔为53.2ms。结果显示，96.4%的案例中，我们可以正确区分转发请求和阻断其你去。因此可以有把握得说这种拓扑情况该方法准确性和可靠性都很高。只要重复几次学习阶段的测量就可以得到完美的测量结果。
在插件部署服务器系统的情况，我本来没想到会有这种结果输出（译者注：因为软WAF和逻辑代码处理之间的时间差会小很多）。但是令人震惊的是这种拓扑情况下方法的有效度和反向代理的情况一样好。这个拓扑情况下，阻断请求和转发请求之间的耗时差（58.8ms）还大于反向代理情况下的耗时差（53.2ms）。
因此可以有把握地说，这种攻击在95%以上的案例中可以明确区分转发请求和阻断请求。
## 方法存在的缺陷
这种方法的主要缺点就是攻击者都需要发送大量的请求来查找WAF规则集中的漏洞。除此之外，网络问题是一个比较大的障碍，可能会导致测量结果不稳定。因此服务器负载也可以作为一个因素加入到计算方法中，可以作为常数加入或者乘上。另外现代WAF也会通常实现针对发送包含恶意字符串的请求的客户端进行一定时间内封IP处理，从而极大限制该方法的能力。但是我们可以使用另一种技术来解决这个问题。
### 解决
这种问题的解决就是在合理的时间内（译者注：封IP前的一段时间内）执行更多的测试，直到我们可以获得平均结果，从而排除具有大响应时间的请求。另外，因为网络噪声确实对我们的测试结果产生了一定影响，例如在测试布尔值结果时。一旦WAF封了客户端的IP地址，换新IP攻击以及换站点进行继续攻击都可以有效对WAF这种封禁IP行为进行了绕过。在很多情况下，在学习阶段中的连续测量请求之间设置延迟也非常有帮助。
### 放大攻击
如何放大攻击向量？
选择更长URL路径
当从服务器查询资源时，查询操作将由CPU来处理，查询到的结果的各个部分都会累积到一起（图片，CSS等）然后一起返回给客户端。然后我们选择在所有URL路径中响应内容最大的一个（例如，在一个博客站点我们可以选择查询文章图片最多的那个），因为这个响应内容最大的请求将会产生更多的CPU负载，服务器也就会使用更长的时间去处理该请求，使得该方法更具有有效性。
拒绝服务攻击
第二，我们可以结合不同的拒绝服务攻击的原理，例如在查询框中提交体量更大的查询，发送包含大体积的body主体的POST数据包，hash碰撞攻击（HashDoS）（）等。请求处理的时间越长，网络噪声导致的负影响就越小。
跨站规则识别
最后，我们可以使用CSRF攻击来串联我们的识别过程，这需要攻击者将用户引诱到一个可以嵌入HTML和JS代码的站点（译者注：也就是存在XSS的站点）来让用户帮助它访问目标测试站点。一个样例代码如下：
在上述代码中，我们创建一个不可见的img标签，就在我们将payload复制到图片的引用链接之前，我们开始记录时间，由于图像无效，浏览器会触onerror事件，并且时间记录停止时执行相关功能，并且演出具有记录时间的警报框。
这个方法有三个优点：
  * 首先，攻击者的身份会被隐藏。因为由于是多个用户因为CSRF攻击被引诱到向目标服务器发送请求，因此无法区分这背后谁是真的攻击角色；
  * 这种方法避免了封禁IP地址的影响；
  * 特别重要的事该方法仅在基于时间的攻击时可靠有效。有时SOP（同源策略）可能会限制从其他源读取页面，因此这种情况下可能使用上文一些WAF识别工具所用到的指纹识别方法；
## 结论
总结一下，该攻击方法突出了时间在侧信道攻击中的有效性，以及WAF开发人员编写严格的规则的必要性。在这个小小的研究中，我在ShadowD
WAF的规则集中发现了一个可以绕过的安全漏洞，在我的下一篇文章中我将会写到我发现的问题。
感谢大家。