i=r+2
ipi
i=r+2
i=2
= p1 · r(r + 1)
2
+ (r + 1)(p1 − δr) +
ipi
=
(r + 1)(r + 2)
2
p1 − δr − rδr +
10
and plug this into equation 1 we get
r(r + 1)(r − 2)p1 − r(r + 1)(r + 2)p1 + 2rδr + 2r2δr − (r + 1)(r − 2)δr − 2r
⇔
−4r(r + 1)p1 + (r + 1)(r + 2)δr − 2r
B(cid:88)
B(cid:88)
i=r+2
i=r+2
ipi ≤ 0
ipi ≤ 0.
Since the summation term is non-negative and (r + 1) > 0, it is sufﬁcient to show that
4rp1 ≥ (r + 2)δr
We know that the strategy is non-increasing so p1 ≥ δr, and since r ∈ {1, . . . , B} we are sure that
4r ≥ (r + 2) so we are done.
If we repeat this process until we reach p(cid:48)
B−1 then we will have the uniform strategy DSU as required.
We now claim that ∆· E is a natural efﬁcacy metric for deduplication strategies, giving equal weight
to bandwidth efﬁciency and security against the existence-of-ﬁle attack, where the former is measured
by the expected bandwidth cost E and the latter is measured by the upper bound ∆ on the adversary’s
advantage. We remark that other metrics are possible and may even be more appropriate for certain
circumstances, and it is plausible that similar results could be obtained for other metrics. We now bring
together Theorem 1 and Theorem 2 and give the following corollary, which states that the uniform
strategy (i.e. choosing the threshold uniformly at random) is optimal in terms of this particular metric.
Corollary 1. Let DSU = ( 1
B , 0, . . . ) be the uniform deduplication strategy with corresponding
values EU and ∆U. Then for any deduplication strategy DS = (p1, p2, . . . , pB, 0, . . . ) with correspond-
ing values E and ∆,
B , . . . , 1
B , 1
EU∆U ≤ E∆.
5 Related Work
Lee and Choi [11] suggest using a variable threshold by making a random choice at each upload, but
note that this is equivalent to making all the random choices at the start and simply induces a probability
distribution on the threshold as in our model. Lee and Choi claim that their solution provides better
security than Harnik et al.’s uniform random choice [8] while having the same efﬁciency (expected
number of uploads is B+1
2 ). However, their measure of security basically states that the adversary wins
only if she is certain that the ﬁle was uploaded or not. This is rather like requiring message recovery
security for encryption rather than the more usual and stronger indistinguishability requirement. The
security measure that we consider in this paper only requires the adversary to learn whether or not the
ﬁle was uploaded with signiﬁcant probability. In this stronger security model, the scheme of Lee and
Choi is in fact weaker than Harnik et al.’s uniform choice of probability.
Shin and Kim [18] discuss related-ﬁles attack and claim that both Harnik et al.’s protocol [8] and
Lee and Choi’s protocol [11] are vulnerable to this attack because those schemes assume that all ﬁles are
stored independently. By related-ﬁles attack, Shin and Kim mean situations where ﬁles are correlated
to each other and thus stored at the same server together, e.g. ﬁles on a software package or document
ﬁles with the same content in different ﬁle formats such as doc, pdf and xml. The adversary then tries to
identify whether any one of a number of related ﬁles have been uploaded. By uploading not only F but
also other ﬁles that are related to F , the adversary may infer the existence of F with higher probability
than the case of independent ﬁles. In this scenario the randomization would have to be increased in order
to maintain the same level of security. However, their proposed solution includes using a trusted storage
gateway at the edge of the client’s network, which in general seems impractical to assume. We do not
consider this sort of attack in our model.
11
Wang et al. [20] adopt a game-theoretic approach to model the side-channel attacks in cross-user
client-side deduplication. They consider the scenario as a non-cooperative game played between an ad-
versary and the CSP, which means the players are assumed to share no information with others during
a game. The game is assumed to be dynamic which means that the game is played more than once (as
the players have to learn their opponents’ payoff through repeated game iterations). The players will
focus on optimizing their own payoff. Wang et al. claim that their proposed solution requires signiﬁ-
cantly fewer uploads than those required by Harnik et al.’s randomized threshold-based solution [8], and
conclude that they achieve improved efﬁciency in terms of reduced bandwidth overhead. However, their
results are based on comparisons using their chosen payoff matrix which puts a speciﬁc value on a suc-
cessful attack as well as the cost of uploads. Our results instead give a ﬁxed bound on how security and
efﬁciency interact and we can increase efﬁciency arbitrarily by reducing security level in compensation.
In practice, economic aspects will inﬂuence the chosen trade-off between security and efﬁciency.
Ács et al. [2] examine cache privacy attacks on Named Data Networking. Although this is a com-
pletely different application area from deduplication in the cloud, they propose a strongly related mech-
anism designed to prevent the adversary from learning whether a particular data item has been stored in
a local cache. They propose techniques to “randomly decide whether to mimic a cache hit or a cache
miss”. They compare privacy and efﬁciency, and use (, δ)-probabilistic indistinguishability as the pri-
vacy measure, somewhat similar to ∆ in our model. Their measure of efﬁciency, which they call utility,
relates the number of cache hits with the total number of ﬁle requests. This is in contrast to our measure
of efﬁciency where we do not consider the overall popularity of a ﬁle. The Ács et al. [2] model has
some details which our model ignores; however they cannot express the security/efﬁciency trade-off in
a manner as concise as our results. We expect that there can be some beneﬁt in trying to combine the
advantages of both approaches, in particular relating to the multiple-ﬁle IND-EFA extension described
in Section 3.2.
Another similar scenario for data deduplication is memory deduplication. In memory deduplication,
memory pages with the same contents are merged which reduces the memory footprint of a running
system. Memory deduplication has applications both in virtualization solutions (to host more virtual
machines with the same amount of physical memory) and operating systems. It has been adopted as a
default feature in Windows 8.1 (and later versions) [5]. Kernel Same-page Merging (KSM) is the Linux
implementation of memory deduplication that uses a kernel thread for periodically scanning memory
and ﬁnding memory pages with the same contents which should be merged [16]. However, memory
deduplication provides side-channel information and causes security problems. The side-channel in-
formation incurred by memory deduplication in virtualized environments has been exploited in recent
work [5,16] and again we expect our model to be of some utility in creating solutions that defend against
these attacks: if the KSM module were to use randomized thresholds for deduplication of memory pages
then the tradeoff between efﬁciency and security is very similar to the cloud storage scenario covered in
this paper.
6 Concluding Remarks
A secure client-side deduplication scheme should defend against side-channel attacks whereby an at-
tacker attempts to determine whether or not a speciﬁc ﬁle exists on the cloud. In this paper we showed
how to model such attacks and analyzed solutions based on probabilistic uploads. We gave conditions
on the strategies that servers should employ when defending against these attacks. We then showed that
the uniform distribution for probabilistic uploads provides the optimal solution for a natural measure,
which presents a tradeoff between security and bandwidth usage.
12
7 Acknowledgements
We would like to thank Håvard Raddum for helpful discussions and the anonymous reviewers for their
feedback. We would also like to thank Hubert Ritzdorf for pointing out that our original deﬁnition of
statistical distance was not a tight bound on security, and for detailing the MLD. This research was
funded by The Research Council of Norway under Project No. 248166.
References
[1] M. Abadi, D. Boneh, I. Mironov, A. Raghunathan, and G. Segev. Message-locked encryption for
lock-dependent messages. In Advances in Cryptology – CRYPTO 2013: 33rd Annual Cryptology
Conference, Santa Barbara, CA, USA, August 18-22, 2013. Proceedings, Part I, pages 374–391,
Berlin, Heidelberg, 2013. Springer Berlin Heidelberg. Cited on page 2.
[2] G. Ács, M. Conti, P. Gasti, C. Ghali, and G. Tsudik. Cache privacy in Named-Data Networking.
In IEEE 33rd International Conference on Distributed Computing Systems, ICDCS 2013, pages
41–51. IEEE Computer Society, 2013. Cited on pages 2, 5, and 12.
[3] F. Armknecht, C. Boyd, G. T. Davies, K. Gjøsteen, and M. Toorani. Side channels in deduplication:
Trade-offs between leakage and efﬁciency.
In R. Karri, O. Sinanoglu, A. Sadeghi, and X. Yi,
editors, Proceedings of the 2017 ACM on Asia Conference on Computer and Communications
Security, AsiaCCS 2017, Abu Dhabi, United Arab Emirates, April 2-6, 2017, pages 266–274. ACM,
2017. Cited on page 8.
[4] M. Bellare, S. Keelveedhi, and T. Ristenpart. Message-locked encryption and secure deduplication.
In Advances in Cryptology - EUROCRYPT 2013, 32nd Annual International Conference on the
Theory and Applications of Cryptographic Techniques, Athens, Greece, volume 7881 of Lecture
Notes in Computer Science, pages 296–312. Springer, 2013. Cited on pages 2 and 4.
[5] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida. Dedup Est Machina: memory deduplication as
an advanced exploitation vector. In 2016 IEEE Symposium on Security and Privacy (SP), pages
987–1004, May 2016. Cited on page 12.
[6] J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, and M. Theimer. Reclaiming space from
duplicate ﬁles in a serverless distributed ﬁle system. In ICDCS, pages 617–624, 2002. Cited on
pages 2 and 4.
[7] S. Halevi, D. Harnik, B. Pinkas, and A. Shulman-Peleg. Proofs of ownership in remote storage
systems. In Proceedings of the 18th ACM Conference on Computer and Communications Security,
CCS ’11, pages 491–500, New York, NY, USA, 2011. ACM. Cited on page 3.
[8] D. Harnik, B. Pinkas, and A. Shulman-Peleg. Side channels in cloud services: Deduplication in
cloud storage. IEEE Security & Privacy, 8(6):40–47, 2010. Cited on pages 2, 3, 4, 6, 7, 11, and 12.
[9] T. Jiang, X. Chen, Q. Wu, J. Ma, W. Susilo, and W. Lou. Towards efﬁcient fully randomized
message-locked encryption. In Proceedings of 21st Australasian Conference on Information Se-
curity and Privacy (ACISP 2016), Melbourne, Australia, July 4-6, 2016, pages 361–375, Cham,
2016. Springer International Publishing. Cited on page 2.
[10] S. Keelveedhi, M. Bellare, and T. Ristenpart. Dupless: Server-aided encryption for deduplicated
storage. In Proceedings of the 22th USENIX Security Symposium, Washington, DC, USA, August
14-16, 2013, pages 179–194. USENIX Association, 2013. Cited on pages 2 and 4.
13
[11] S. Lee and D. Choi. Privacy-preserving cross-user source-based data deduplication in cloud stor-
age. In 2012 International Conference on ICT Convergence (ICTC), pages 329–330, Oct 2012.
Cited on pages 2, 5, 8, and 11.
[12] J. Liu, N. Asokan, and B. Pinkas. Secure deduplication of encrypted data without additional
In Proceedings of the 22nd ACM SIGSAC Conference on Computer and
independent servers.
Communications Security, Denver, CO, USA, October 12-6, 2015, pages 874–885. ACM, 2015.
Cited on page 4.
[13] D. T. Meyer and W. J. Bolosky. A study of practical deduplication. In G. R. Ganger and J. Wilkes,
editors, 9th USENIX Conference on File and Storage Technologies, pages 1–13. USENIX, 2011.
Cited on page 1.
[14] M. Mulazzani, S. Schrittwieser, M. Leithner, M. Huber, and E. Weippl. Dark clouds on the horizon:
Using cloud storage as attack vector and online slack space. In Proceedings of the 20th USENIX
Conference on Security, SEC’11, pages 5–5, Berkeley, CA, USA, 2011. USENIX Association.
Cited on page 3.
[15] V. Rabotka and M. Mannan. An evaluation of recent secure deduplication proposals. Journal of
Information Security and Applications, 27-28:3 – 18, 2016. Special Issues on Security and Privacy
in Cloud Computing. Cited on pages 1 and 2.
[16] K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuffrida, and H. Bos. Flip feng shui: Hammering
a needle in the software stack. In 25th USENIX Security Symposium (USENIX Security 16), pages
1–18, Austin, TX, Aug. 2016. USENIX Association. Cited on page 12.
[17] H. Ritzdorf, G. O. Karame, C. Soriente, and S. Capkun. On Information Leakage in Deduplicated
Storage Systems. In Proceedings of the 8th Edition of the ACM Workshop on Cloud Computing
Security, CCSW ’16. ACM, 2016. Cited on page 2.
[18] Y. Shin and K. Kim. Differentially private client-side data deduplication protocol for cloud storage
services. Security and Communication Networks, 8(12):2114–2123, 2015. Cited on pages 2, 5,
and 11.
[19] J. Stanek, A. Sorniotti, E. Androulaki, and L. Kencl. A secure data deduplication scheme for cloud
storage. In N. Christin and R. Safavi-Naini, editors, Financial Cryptography and Data Security -
18th International Conference, FC 2014, Christ Church, Barbados, volume 8437 of Lecture Notes
in Computer Science, pages 99–118. Springer, 2014. Cited on page 2.
[20] B. Wang, W. Lou, and Y. T. Hou. Modeling the side-channel attacks in data deduplication with
game theory. In 2015 IEEE Conference on Communications and Network Security (CNS), pages
200–208, Sept 2015. Cited on page 12.
14