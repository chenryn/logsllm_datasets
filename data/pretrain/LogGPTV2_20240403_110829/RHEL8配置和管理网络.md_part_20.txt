        Node Name:         0x2000000af70ae935
        Port Name:         0x2001000af70ae935
        Fabric Name:       0x20c8002a6aa7e701
        Speed:             10 Gbit
        Supported Speed:   1 Gbit, 10 Gbit
        MaxFrameSize:      2048 bytes
        FC-ID (Port ID):   0xba02c0
        State:             Online
    ```
:::
::: itemizedlist
**其它资源**
-   有关 `fcoeadm`{.literal} 工具程序的详情，请查看
    `fcoeadm(8)`{.literal} man page。
-   有关如何在系统引导时通过软件 FCoE 挂载存储的详情，请查看
    `/usr/share/doc/fcoe-utils/README`{.literal} 文件。
:::
:::
::: section
::: titlepage
# []{#configuring-fibre-channel-over-ethernet_configuring-and-managing-networking.html#additional_resources_3}其它资源 {.title}
:::
::: itemizedlist
-   有关使用光纤通道设备的详情，请参考
    `Managing storage devices`{.literal} 指南中的
    [使用光纤通道设备](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/using-fibre-channel-devices_managing-storage-devices){.link}
    部分。
:::
:::
:::
[]{#assembly_legacy-network-scripts-support-in-rhel_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_legacy-network-scripts-support-in-rhel_configuring-and-managing-networking.html#assembly_legacy-network-scripts-support-in-rhel_configuring-and-managing-networking}第 17 章 RHEL 中支持旧的网络脚本 {.title}
:::
默认情况下，RHEL 使用 NetworkManager
配置和管理网络连接，`/usr/sbin/ifup`{.literal} 和
`/usr/sbin/ifdown`{.literal} 脚本使用 NetworkManager 处理
`/etc/sysconfig/network-scripts/`{.literal} 目录中的 `ifcfg`{.literal}
文件。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
旧脚本在 RHEL 8 中已弃用，并将在以后的 RHEL
主要版本中被删除。如果您仍然使用旧的网络脚本，例如，因为您从较早的版本升级到
RHEL 8，红帽建议将您的配置迁移至 NetworkManager。
:::
::: section
::: titlepage
# []{#assembly_legacy-network-scripts-support-in-rhel_configuring-and-managing-networking.html#proc_installing-the-legacy-network-scriptsassembly_legacy-network-scripts-support-in-rhel}安装旧的网络脚本 {.title}
:::
如果您需要在不使用 NetworkManager
的情况下使用弃用的网络脚本处理网络配置，您可以安装它们。在这种情况下，`/usr/sbin/ifup`{.literal}
和 `/usr/sbin/ifdown`{.literal} 脚本链接到管理网络配置的已弃用 shell
脚本。
::: itemizedlist
**流程**
-   安装 `network-scripts`{.literal} 软件包：
    ``` literallayout
    # yum install network-scripts
    ```
:::
:::
:::
[]{#assembly_port-mirroring_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_port-mirroring_configuring-and-managing-networking.html#assembly_port-mirroring_configuring-and-managing-networking}第 18 章 端口镜像 {.title}
:::
网络管理员可以使用端口镜像将入站和出站网络流量从一个网络设备传输到另一个网络设备。管理员使用端口镜像来监控网络流量，并收集网络流量到：
::: itemizedlist
-   调试网络问题并调整网络流
-   检查和分析网络流量，对网络问题进行故障排除
-   检测入侵
:::
::: section
::: titlepage
# []{#assembly_port-mirroring_configuring-and-managing-networking.html#proc_mirroring-a-network-interface-using-nmcli_assembly_port-mirroring}使用 nmcli 对网络接口进行镜像(mirror) {.title}
:::
您可以使用 NetworkManager 配置端口镜像。以下流程通过向
[*enp1s0*]{.emphasis} 添加流量控制(`tc`{.literal})规则和过滤器到
[*enp1s0*]{.emphasis} [*网络接口，将网络流量镜像到 enp1s0。*]{.emphasis}
::: itemizedlist
**先决条件**
-   用于将网络流量镜像到的网络接口。
:::
::: orderedlist
**流程**
1.  添加您要镜像的网络流量的网络连接配置集：
    ``` literallayout
    # nmcli connection add type ethernet ifname enp1s0 con-name enp1s0 autoconnect no
    ```
2.  将 `prio`{.literal} qdisc 附加到 [*enp1s0*]{.emphasis} 用于带有句柄
    \'10:\' 的出口（传出）流量。无子项附加的\"prio\" qdisc
    允许附加过滤器。
    ``` literallayout
    # nmcli connection modify enp1s0 +tc.qdisc "root prio handle 10:"
    ```
3.  为入口流量添加一个 qdisc，并带有句柄 \'ffff:\'。
    ``` literallayout
    # nmcli connection modify enp1s0 +tc.qdisc "ingress handle ffff:"
    ```
4.  要匹配入口和出口 `qdiscs`{.literal}
    中的数据包并将其镜像到另一个接口，请添加以下过滤器。
    ``` literallayout
    # nmcli connection modify enp1s0 +tc.tfilter "parent ffff: matchall action mirred egress mirror dev mirror-of-enp1s0"
    # nmcli connection modify enp1s0 +tc.tfilter "parent 10: matchall action mirred egress mirror dev mirror-of-enp1s0"
    ```
    `matchall`{.literal} 过滤器匹配所有数据包，`mirred`{.literal}
    操作将数据包重定向到目的地。
5.  激活连接：
    ``` literallayout
    # nmcli connection up enp1s0
    ```
:::
::: orderedlist
**验证步骤**
1.  安装 `tcpdump`{.literal} 工具：
    ``` literallayout
    # yum install tcpdump
    ```
2.  查看在目标设备([*mirror-of-enp1s0*]{.emphasis})上镜像的流量：
    ``` literallayout
    # tcpdump -i enp7s0
    ```
:::
::: itemizedlist
**其它资源**
-   有关使用 `tcpdump`{.literal} 工具的更多信息，请参阅如何使用
    [`tcpdump`{.literal}知识库解决方案捕获网络数据包](https://access.redhat.com/solutions/8787){.link}。
:::
:::
:::
[]{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard_configuring-and-managing-networking.html#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard_configuring-and-managing-networking}第 19 章 使用 802.1X 标准向网络验证 RHEL 客户端 {.title}
:::
管理员通常使用基于 IEEE 802.1X
标准的基于端口的网络访问控制（NAC）来保护网络不受未授权 LAN 和 Wi-Fi
客户端的影响。本节中的步骤描述了配置网络身份验证的不同选项。
::: section
::: titlepage
# []{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard_configuring-and-managing-networking.html#configuring-802-1x-network-authentication-on-an-existing-ethernet-connection-using-nmcli_authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard}使用 nmcli 在现有以太网连接中配置 802.1X 网络身份验证 {.title}
:::
使用 `nmcli`{.literal}
工具，您可以配置客户端向网络验证其自身。这个过程描述了如何在现有名为
`enp1s0`{.literal} 的 NetworkManager 以太网连接配置集中使用微软
Challenge-Handshake Authentication Protocol 版本 2（MSCHAPv2）
配置保护扩展验证协议（PEAP）验证。
::: orderedlist
**先决条件**
1.  网络必须具有 802.1X 网络身份验证。
2.  以太网连接配置集存在于 NetworkManager 中，且具有有效的 IP 配置。
3.  如果需要客户端验证验证程序证书,则必须将证书颁发机构（CA）证书存储在
    `/etc/pki/ca-trust/source/anchors/`{.literal} 目录中。
4.  已安装 `wpa_supplicant`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  将扩展验证协议（EAP）设置为 `peap`{.literal}，内部验证协议为
    `mschapv2`{.literal}，用户名为：
    ``` literallayout
    # nmcli connection modify enp1s0 802-1x.eap peap 802-1x.phase2-auth mschapv2 802-1x.identity user_name
    ```
    请注意，您必须在单个命令中设置
    `802-1x.eap`{.literal}、`802-1x.phase2-auth`{.literal} 和
    `802-1x.identity`{.literal} 参数。
2.  另外，还可将该密码存储在配置中：
    ``` literallayout
    # nmcli connection modify enp1s0 802-1x.password password
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    默认情况下，网络管理器（NetworkManager）在
    `/etc/sysconfig/network-scripts/keys-connection_name`{.literal}
    文件中以明文形式保存密码，这只可由 `root`{.literal}
    用户读取。但是，在配置文件中清除文本密码会有安全隐患。
    要提高安全性，将 `802-1x.password-flags`{.literal} 参数设置为
    `0x1`{.literal}。使用这个设置，在有 GNOME 桌面环境或
    `nm-applet`{.literal} 的服务器上，NetworkManager
    从这些服务中检索密码。在其他情况下，NetworkManager 会提示输入密码。
    :::
3.  如果需要客户端验证验证器的证书，请将连接配置集中的
    `802-1x.ca-cert`{.literal} 参数设置为 CA 证书的路径：
    ``` literallayout
    # nmcli connection modify enp1s0 802-1x.ca-cert /etc/pki/ca-trust/source/anchors/ca.crt
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    为了安全起见，红帽建议使用验证程序证书来使客户端能够验证验证器的身份。
    :::
4.  激活连接配置集：
    ``` literallayout
    # nmcli connection up enp1s0
    ```
:::
::: itemizedlist
**验证步骤**
-   访问需要网络身份验证的网络上的资源。
:::
::: itemizedlist
**其它资源**
-   有关添加 NetworkManager
    [以太网连接配置集的详情，请参阅配置以太网连接](#configuring-an-ethernet-connection_configuring-and-managing-networking.html "第 8 章 配置以太网连接"){.link}。
-   有关 802.1X 相关参数及其描述，请查看 `nm-settings(5)`{.literal} man
    page 中的 `802-1x settings`{.literal} 部分。
-   有关 `nmcli`{.literal} 工具程序的详情，请查看 `nmcli(1)`{.literal}
    man page。
:::
:::
::: section
::: titlepage
# []{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard_configuring-and-managing-networking.html#configuring-a-static-ethernet-connection-with-802-1x-network-authentication-using-rhel-system-roles_authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard}使用 RHEL 系统角色通过 802.1X 网络身份验证配置静态以太网连接 {.title}
:::
使用 RHEL 系统角色，您可以自动创建使用 802.1X
标准验证客户端的以太网连接。此流程描述了如何通过运行 Ansible playbook
来远程为带有以下设置的 `enp1s0`{.literal} 接口添加以太网连接：
::: itemizedlist
-   静态 IPv4 地址 - `192.0.2.1`{.literal}，子网掩码为 `/24`{.literal}
-   静态 IPv6 地址 - `2001:db8:1::1`{.literal}，子网掩码为
    `/64`{.literal}
-   IPv4 默认网关 - `192.0.2.254`{.literal}
-   IPv6 默认网关 - `2001:db8:1::fffe`{.literal}
-   IPv4 DNS 服务器 - `192.0.2.200`{.literal}
-   IPv6 DNS 服务器 - `2001:db8:1::ffbb`{.literal}
-   DNS 搜索域 - `example.com`{.literal}
-   802.1X 网络验证使用 `TLS`{.literal} 可扩展验证协议(EAP)
:::
在 Ansible 控制节点上运行此步骤。
::: itemizedlist
**先决条件**
-   在控制节点上安装 `ansible`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
-   如果您运行 playbook 时使用了与 `root`{.literal} 不同的远程用户,
    则此用户在受管节点上需要具有适当的 `sudo`{.literal} 权限。
-   网络支持 802.1X 网络身份验证。
-   受管节点使用 NetworkManager。
-   control 节点上存在 TLS 身份验证所需的以下文件：
    ::: itemizedlist
    -   客户端密钥存储在 `/srv/data/client.key`{.literal} 文件中。
    -   客户端证书存储在 `/srv/data/client.crt`{.literal} 文件中。
    -   证书颁发机构(CA)证书存储在 `/srv/data/ca.crt`{.literal} 文件中。
    :::
:::
::: orderedlist
**流程**
1.  如果 playbook 要针对其执行的主机还没有在清单中，请将此主机的 IP
    或名称添加到 `/etc/ansible/hosts`{.literal} Ansible 清单文件中：
    ``` literallayout
    node.example.com
    ```
2.  使用以下内容创建 `~/enable-802.1x.yml`{.literal} playbook:
    ``` literallayout
    ---