        with io.open('temp.bin', 'rt', encoding='utf8', errors='replace') as fin:
            print("IO-String %r") % (repr(fin.read()))
当b以二进制方式写入文件后，用codecs在进行读取，如果errors='replace'且编码形式为utf-8时，则对于xF5和xF4这类不能编码的都会被替换为ufffd。
在python2下：
        Correct-String "u'A\ufffdBC\ufffd'"
        CODECS-String "u'A\ufffdBC'"
        IO-String "u'A\ufffdBC\ufffd'"
在Python3下会报错：
        print("Correct-String %r") % ((repr(b.decode('utf8', 'replace'))))
        TypeError: unsupported operand type(s) for %: 'NoneType' and 'str'
**ctypes :**
ctypes是一个 **提供和C语言兼容的数据类型的外部库** ，当出现x00的空字符就会出现截断
        import ctypes
        buffer = ctypes.create_string_buffer(8)
        buffer.value='abx00c1234'
        print(buffer.value)
        print (buffer.raw)
在python2命令行下:
ab
abc1234
在python3下回报错：
        buffer.value='abx00c1234'
        TypeError: bytes expected instead of str instance
**Python Interpreter :**
        #!python
        try:
            if 0:
                yield 5
            print("T1-FAIL")
        except Exception as e:
            print("T1-PASS")
            pass
        try:
            if False:
                yield 5
            print("T2-FAIL")
        except Exception as e:
            print(repr(e))
            pass
对于类似if 0: if False: 的写法，python版本的不同，其测试结果也不同
可重用整数 :
        999+1 is 1000 #False
        1+1 is 2 #True
对此的解释是，Python 维护了一个对象连接池，其中保有前几百个整数，重用它们会节约内存和对象的创建。
浮点数比较 :
    2.2 * 3.0 == 3.3 * 2.0 #False
由于固有受限精度，以及十进制与二进制小数表示所产生的差异导致的舍入错误。
无穷大 :
python支持无穷大的概念，但在python2下出现了这样的情况
        Type "help", "copyright", "credits" or "license" for more information.
        10**1000000 > float('infinity')
        False
        float > float('infinity')
        True
python3下
         10**1000000 > float('infinity')
        False
         float > float('infinity')
        Traceback (most recent call last):
          File "", line 1, in 
        TypeError: unorderable types: type() > float()
**builtins :**
此模块在python启动后首先加载到内存，此时还没有执行任何程序员写的代码，在Python2.X版本中，内建模块被命名为__builtin__，而到了Python3.X版本中更名为builtins。
在 Python 2中， 内置对象可以通过魔法 __builtins__ 模块进行访问。
         __builtins__.False, __builtins__.True = True, False
          True
          False
          int(True)
          0
false被赋值成true，true被赋值成false
**urllib2:**
Python 的 urllib
库曾出过一个头注入的漏洞，[CVE-2016-5699](http://blog.neargle.com/SecNewsBak/drops/Python%20urllib%20HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.html)
如果请求头里出现了 **%0A** 则直接换行导致攻击者可以注入额外http头和请求方法，可在ssrf里攻击redis或者memcached。
Python2/Python3较新的版本均在出口处的putheader()函数里添加了一个检验，发现不合法URL会报一个error.
**tarfile/ZipFile:**
tarfile模块可以读取和写入tar文件，包括使用gzip或bz2压缩的压缩文件。
ZipFile模块提供了创建，读取，写入，附加和列出ZIP文件的函数。
TarFile.extractall使用此函数提取文件时，文件可能创建在其他路径，官方建议不要从不信任的来源提取文件。
ZipFile.extractall也有同样的问题，解压时文件可能创建在其他路径，但在2.7.4版本中，模块会试图阻止这种行为。
**urlparse :**
[CVE-2017-7233](https://paper.seebug.org/274/)
urllib.parse.urlparse的特殊情况曾给django造成一个url跳转漏洞。
django的 **is_safe_ur**
l函数可用于检测url是或否安全，但整合各函数是基于urllib.parse.urlparse的，urlparse在当scheme不等于http，path为纯数字时不能正常分割使得is_safe_url为true，从而达到bypass的目的。
例如 https:1029415385，is_safe_url会直接判断为true。
**格式化字符串漏洞:**
起因是python的新方法format，示例如下：
        class mapl0:
            user = 'mapl0'
            password = 'hahaha'
            key = '123456'
        print("This is {user.user} {user.password}".format(user = mapl0))
我们可以通过format将mapl0类中的属性输出出来，在这篇[paper](https://paper.seebug.org/175/)中(@phithon)就有类似的情况：
        def view(request, *args, **kwargs):
            user = get_object_or_404(User, pk=request.GET.get('uid'))
            template = 'This is {user}'s email: ' + request.GET.get('email')
            return HttpResponse(template.format(user=user))
由于request.GET.get('email')也就是用户通过get传入的email参数完全可控，我们就能让request.user里的任意属性输出出来，例如{user.password}。
通过debug查看了一下request.user里的内容,其中session_key,目录，secret_key等等敏感信息都能查看，其中SECRET_KEY如果泄露，则可能配合django反序列化漏洞实现rce。
Jinja的沙盒绕过与此同理。顺便一说，在[paper](https://paper.seebug.org/175/)还提到的f修饰符很有意思，在python3.6版本会后，被f/F修饰的字符串将会被当做代码执行。
**反序列化**
****
**Cpickle/pickle 反序列化：**
python2 使用cPickle，python3
使用pickle，__reduce__函数会在被反序列化是执行，类似php里的__wakeup，当我们序列化了一个带有__reduce__的类时，将其反序列化即可执行__reduce__里的代码
        import os
        import cPickle
        a = 1
        # Exploit that we want the target to unpickle
        class Exploit(object):
            def __reduce__(self):
                global a
                a = 10
                os.system("pwd")
                return (os.system, ('ls',))
        shellcode = cPickle.dumps(Exploit())#cPickle.dumps序列化操作
        cPickle.loads(shellcode)#cPickle.loads反序列化操作
        print a
pickle用法类似
        import os
        import pickle
        # Exploit that we want the target to unpickle
        class Exploit(object):
            def __reduce__(self):
                return (os.system, ('ls',))
        shellcode = pickle.dumps(Exploit())
        pickle.loads(shellcode)
[Django任意代码](http://www.freebuf.com/vuls/77591.html)在django1.6版本前存在任意代码执行漏洞，其漏洞起因就是pickle。
在django1.6以下，session默认是采用pickle执行序列号操作，在1.6及以上版本默认采用json序列化，但还需要知道SECRET_KEY以及目标采用了signed_cookies。
[掌阅iReader某站Python漏洞挖掘](https://www.leavesongs.com/PENETRATION/zhangyue-python-web-code-execute.html)，通过redis写session从而反序列化getshell。
**PyYAML 对象类型解析导致的命令执行问题：**
        import yaml
        content = '''---        !!python/object/apply:subprocess.check_output [[ls]]#subprocess.check_output父进程等待子进程完成 返回子进程向标准输出的输出结果
        ...'''
        print yaml.load(content)
python2下结果
1.py
__init__.py
__pycache__
……
python3下结果
    b'1.pyn__init__.pyn__pycache__n................
**shelve：**
shelve用处是让对象持久化，但它在序列化与反序列化的过程中使用了pickle模块，因此我们可以利用shelve会调用的pickle在反序列化过程中执行代码。
        import shelve
        import os
        class exp(object):
            def __reduce__(self):
                return (os.system('ls'))
        file = shelve.open("test")
        file['exp'] = exp()
        print(file['exp'])
一些在较新版本被弃用的函数和模块
**rexec:**
在python2.6后被弃用，相关[文档](https://docs.python.org/2/library/rexec.html).
**bastion:**
在python2.6后被弃用，相关[文档](https://docs.python.org/2/library/bastion.html).
**tempfile.mktemp:**
此函数自从2.3版本不推荐使用并使用mkstemp()代替，相关[文档](https://docs.python.org/3/library/tempfile.html?highlight=mktemp#tempfile.mktemp)
**总结**
****
python安全还远不止上文所述部分，随之python使用者的增多，其安全性必然也会不断地收到挑战，而我们也需要从中不断学习以应对随时袭来的威胁。
**参考文章**
****