, ∀i ∈ [n].
over an authenticated, private channel.
Veriﬁcation round:
1) Each player i ∈ [n] veriﬁes πi against c by checking if e(c/gsi , g) =
e(πi, gτ−i). If this check fails (or i received nothing from dealer), then
i broadcasts a complaint against the dealer.
Complaint round:
1) If the size of the set S of complaining players is ≥ t, the dealer is
disqualiﬁed. Otherwise, the dealer reveals the correct shares with proofs
by broadcasting {si, πi}i∈S.
is disqualiﬁed. Otherwise, each i ∈ [n] now has his correct share si.
2) If any one proof does not verify (or dealer did not broadcast), the dealer
Reconstruction Phase
Given commitment c and shares (i, si, πi)i∈T , |T| ≥ t, the reconstructor:
1) Veriﬁes each si, identifying a subset V of t players with valid shares.
2) Interpolates s =(cid:80)
i (0)si = φ(0).
i∈V LV
Algorithm 2 eJF-DKG’s Sharing Phase
Dealing round: Each player i:
1) Picks fi ∈R Fp[X] of degree t − 1, sets zi = fi(0) and ci = gfi(τ ).
2) Computes gzi = gfi(0), a KZG proof πi,0 for fi(0) and a NIZKPoK
3) Computes shares si,j = fi(j) and KZG proofs πi,j and sends (si,j , πi,j )
πDLog
for gfi(0) and broadcasts (ci, gzi , πi,0, πDLog
).
i
to each j ∈ [n] over an authenticated, private channel.
i
Veriﬁcation round: For each (ci, gzi , πi,0, πDLog
, si,j , πi,j ) from i, each j:
1) Veriﬁes πi,0 by checking e(ci/gzi , g) = e(πi,0, gτ−0) and veriﬁes the
2) Veriﬁes its share si,j using e(ci/gsi,j , g) = e(πi,j , gτ−j ).
3) If any of these checks fail (or nothing was received from i), then j
NIZKPoK.
πDLog
i
i
broadcasts a complaint against i.
Complaint round:
1) Let Si be the set of players complaining against i. If |Si| ≥ t, then i
is marked as disqualiﬁed by all honest players. Otherwise, i broadcasts
{si,j , πi,j}j∈Si .
disqualiﬁed. Otherwise, each j ∈ Si now has his correct share si,j.
2) If any one proof does not verify (or i did not broadcast), then i is
3) Let Q denote the set of players that were not disqualiﬁed. The agreed-
j∈Q cj,
j∈Q sj,i, and
j∈Q gzj , sets his share si =(cid:80)
upon (unknown) secret key s = (cid:80)
sets the public key gs =(cid:81)
sets his KZG proof πi =(cid:81)
j∈Q zj. Each i sets c = (cid:81)
j∈Q πj,i.
Unfortunately, SSS does not tolerate malicious dealers who
distribute invalid shares, nor malicious players who might
send invalid shares during reconstruction. To deal with this,
Veriﬁable Secret Sharing (VSS) protocols enable players to
verify shares from a potentially-malicious dealer [12]–[14],
[26]. Furthermore, VSS also enables the reconstructor to verify
the shares before interpolating the (wrong) secret. Loosely
speaking, VSS protocols must offer two properties against
any adversary who compromises the dealer and  t points x1, . . . , xn requires Θ(nt) time.
This is fast when t is very small relative to n but can
be slow when t ≈ n, as is the case in many instantia-
tions of threshold cryptosystems. Fortunately, a multipoint
evaluation reduces this time to O(n log2 n) using a di-
vide and conquer approach. Speciﬁcally, one ﬁrst computes
φL(x) = φ(x) mod (x − x1)(x − x2)··· (x − xn/2) and then
φR(x) = φ(x) mod (x − xn/2+1)(x − xn/2+2)··· (x − xn)
Then, one simply recurses on the two half-sized subprob-
lems: evaluating φL(x) at x1, x2, . . . , xn/2 and φR(x) at
xn/2+1, xn/2+2, . . . xn. Ultimately, the leaves of this recursive
computation store φ(x) mod (x − xi), which is exactly φ(i)
by the polynomial remainder theorem (see Figure 1).
For example, consider the multipoint evaluation of φ at
{1, 2, . . . , 8}, which we depict in Figure 1. We start at the root
node ε. Here, we divide φ by the accumulator polynomial (x−
1)(x− 2) . . . (x− 8) obtaining a quotient polynomial q1,8 and
remainder polynomial r1,8. Then, its left and right children di-
vide r1,8 by the left and right “half” of (x−1)(x−2) . . . (x−8),
respectively. This proceeds recursively: each node w divides
rparent(w) by its accumulator aw, obtaining a quotient qw and
remainder rw such that rparent(w) = qwaw + rw. Note that all
accumulator polynomials aw can be computed in O(n log2 n)
time by starting with the (x − i) monomials as leaves of a
binary tree and “multiplying up the tree.” Since division by a
degree-bound n accumulator takes O(n log n) time, the total
time is T (n) = 2T (n/2) + O(n log n) = O(n log2 n) [27].
III. SCALABLE THRESHOLD CRYPTOSYSTEMS
First, we show how to speed up and scale threshold sig-
nature aggregation as well as secret reconstruction in any
Lagrange-based threshold cryptosystem (see §III-A). Then, we
introduce authenticated multipoint evaluation trees (AMTs), a
new technique for precomputing logarithmic-sized evaluation
proofs much faster in KZG commitments (see §III-B). Last,
we use AMTs to speed up and scale Kate et al.’s eVSS and
Kate’s eJF-DKG (see §§III-C and III-D).
In this section, we show how to reduce the time to aggregate
a (t, n) BLS threshold signature from Θ(t2) to Θ(t log2 t).
Although we focus on BLS, our techniques can be used in
any threshold cryptosystem (not just signatures) whose secret
key lies in a prime-order ﬁeld Fp. This includes ElGamal
signatures [35]–[37], ElGamal encryption [53] and Schnorr
signatures [20], [61] (but not RSA-based schemes, whose
secret key does not lie in a prime-order ﬁeld [11]).
Recall from §II-A that BLS TSS aggregation has two
phases: (1) computing Lagrange coefﬁcients and (2) exponen-
tiating signature shares by these coefﬁcients. Unfortunately, as
t gets large, naively computing Lagrange coefﬁcients in Θ(t2)
time dominates exponentiating the shares (see Figure 2a). In
fact, current descriptions and implementations of threshold
schemes all seem to use this inefﬁcient scheme, which we
dub naive Lagrange [10], [38]–[40], [68]. We make three
contributions. First, we adapt the fast polynomial interpolation
from [27] to compute just the Lagrange coefﬁcients LT
i (0) fast
in Θ(t log2 t) time. We call this scheme fast Lagrange. Second,
we speed up this scheme by using roots of unity rather than
{1, 2, . . . , n} as the signer IDs. Third, we implement a BLS
TSS based on fast Lagrange and show it outperforms the naive
one as early as n = 511 (see §IV-A).
grange polynomial LT
Let us deﬁne N (x) = (cid:81)
x−i = (cid:81)
Ni(i) = (cid:81)
1) Fast Lagrange-based BLS: Recall from §II-4 that a La-
x−j
i−j .
i∈T (x − i). Then, let Ni(x) =
j∈T,j(cid:54)=i (x − j) be the numerator and let Di =
j∈T,j(cid:54)=i (i − j) be the denominator. Now, we can
i (x) = Ni(x)
Di
i (x) =(cid:81)
.
Our goal is to quickly compute LT
rewrite LT
i (0) for each signer ID
i ∈ T . In other words, we need to quickly compute all Ni(0)’s
and all Di’s. First, given the set of signer IDs T , we interpolate
N (x) in Θ(t log2 t) time by starting with the (x − i)’s as
leaves of a tree and “multiplying up the tree.” Second, we
can compute all Ni(0) = N (0)/(−i) in Θ(t) time. (Note that
N (0) is just the ﬁrst coefﬁcient of N (x).) However, computing
Di,∀i ∈ T appears to require Θ(t2) time. Fortunately, the
derivative N(cid:48)(x) of N (x) evaluated at i is exactly equal to
i (x) is deﬁned as LT
j∈T
j(cid:54)=i
N (x)
Di [27]. Thus, a Θ(t log2 t) multipoint evaluation of N(cid:48)(x) at
all i ∈ T can efﬁciently compute all Di’s!
To see why N(cid:48)(i) = Di, it is useful to look at the closed
form formula for N(cid:48)(x) obtained by applying the product rule
of differentiation (i.e., (f g)(cid:48) = f(cid:48)g + f g(cid:48)). For example, for
N (x) = (x − 1)(x − 2)(x − 3):
N(cid:48)(x) = (x − 2)(x − 3) + (x − 1)(x − 3) + (x − 1)(x − 2)
In general, we can prove that N(cid:48)(x) = (cid:80)
= N1(x) + N2(x) + N3(x)
i∈T Ni(x), where
deg N(cid:48) = t − 1. Since Nj(i) = 0 for all i (cid:54)= j, it follows
that N(cid:48)(i) = Ni(i) + 0 = Di. Lastly, computing N(cid:48)(x) only
takes Θ(t) time via polynomial differentiation. (i.e., N =
(ct, ct−1, . . . , c1, c0) ⇒ N(cid:48) = (t · ct, (t − 1)ct−1, . . . , 2c2, c1))
To summarize, given a set T of signer IDs, we can compute
the Lagrange coefﬁcients LT
i (0) = Ni(x)/N(cid:48)(i) by (1) com-
puting N (x) in Θ(t log2 t) time, (2) computing all Ni(0)’s
in Θ(t) time, (3) computing N(cid:48)(x) in Θ(t) time and (4)
evaluating N(cid:48)(x) at all i ∈ T in Θ(t log2 t) time. This reduces
the time to compute all LT
i (0)’s from Θ(t2) to Θ(t log2 t).
2) Further speed-ups via roots of unity: The fast Lagrange
technique works for any threshold cryptosytem whose secret
key s lies in prime-order ﬁeld Fp. However, for ﬁelds that
support roots of unity, further speed-ups are possible. (A caveat
is that pairings on the underlying elliptic curve can be up to 2×
slower.) Without loss of generality, assume the total number of
signers n is a power of two and let ωn denote a primitive nth