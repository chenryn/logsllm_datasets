        return 'c01db33f';
    }
    function gc() {
        for (var i = 0; i  Render`及`Repeater -> Render 功能进行渲染的时候会触发
#### burp 指纹的识别和反制
针对burp 指纹的反制 ，当攻击者使用默认配置的burp，很多指纹能够被精准识别到
1: 利用跨域去获取burp 的指纹，然后可以干很多事情，比如引入到蜜罐流量进行精准id 识别。
`http://burp/favicon.ico`
eg ：
#### 利用流量指纹特征，识别burp
Burp抓到包后，会把连接状态改为Close
### sqlmap 的反制
老版本的sqlmap，钓鱼页面然后进行构造表单参数
钓鱼页面的demo
     A sqlmap honeypot demo
    username:
### xss 盲打后台钓鱼反制
假装后台被打到了，然后传回他的xss 后台，然后他访问打到的后台后，使用话术套路，让他下载文件执行获取对方终端权限
### Git CLI远程代码
  * 创建一个新的存储库或将文件添加到现有存储库；
  * b）将Windows可执行文件上传到此存储库，重命名为git.exe；
  * c）等待受害者fork存储库
  * 使用gh repo fork REPOSITORY_NAME --clone frok后触发rce
### Git 源码漏洞反制
构造../ ，然后把后门写到启动项或者定时任务进行getshell。
GitHack |  | 是  
---|---|---  
GitHack |  | 是  
dumpall |  | 是  
GitHacker |  | 是  
dvcs-ripper |  | 否  
git-dumper |  | 是  
  1. 对于类unix系统可以写入crontab，增加定时任务，反弹shell回来
  2. 对于Windows系统可以写入开始菜单启动项，或者dll劫持
  3. 可以把攻击工具的脚本给替换掉，下次执行就能上线
除此之外，可以通过发来的包的TTL值判断操作系统(Windows默认是128，Linux是64或者255)，实现更精准的反制
### webshell 后门反制
直接传上来的一些大马，可以先关闭服务器进行隔离，然后在他的大马里进行“加料”隔离上线，当对方在连接进来的时候先获取对方的user-agent,
利用一些chrome 、fireofx 等一些常见浏览器的day ，构建shellcode 进行浏览器逃逸执行反制。
### 数据库连接的反制
MySQL中 `load data local infile '/etc/passwd' into table test fields terminated
by '\n';`语句可以读取客户端本地文件并插进表中，那么我们可以伪造一个恶意的服务器，向连接服务器的客户端发送读取文件的payload 。
比如读取攻击者的微信id、ntlm hash
### 远程桌面连接mstsc/共享的反制
当对方为了方便mstsc 连接进来，当然场景不限于mstsc ，比如对方开启了vmware