title:Comparing the Usability of Cryptographic APIs
author:Yasemin Acar and
Michael Backes and
Sascha Fahl and
Simson L. Garfinkel and
Doowon Kim and
Michelle L. Mazurek and
Christian Stransky
2017 IEEE Symposium on Security and Privacy
Comparing the Usability of Cryptographic APIs
Yasemin Acar, Michael Backes, Sascha Fahl, Simson Garﬁnkel∗,
Doowon Kim†, Michelle L. Mazurek†, and Christian Stransky
CISPA, Saarland University; ∗National Institute of Standards and Technology; †University of Maryland, College Park
Abstract—Potentially dangerous cryptography errors are well-
documented in many applications. Conventional wisdom suggests
that many of these errors are caused by cryptographic Appli-
cation Programming Interfaces (APIs) that are too complicated,
have insecure defaults, or are poorly documented. To address this
problem, researchers have created several cryptographic libraries
that they claim are more usable; however, none of these libraries
have been empirically evaluated for their ability to promote
more secure development. This paper is the ﬁrst to examine
both how and why the design and resulting usability of different
cryptographic libraries affects the security of code written with
them, with the goal of understanding how to build effective
future libraries. We conducted a controlled experiment in which
256 Python developers recruited from GitHub attempt common
tasks involving symmetric and asymmetric cryptography using
one of ﬁve different APIs. We examine their resulting code for
functional correctness and security, and compare their results
to their self-reported sentiment about their assigned library.
Our results suggest that while APIs designed for simplicity
can provide security beneﬁts—reducing the decision space, as
expected, prevents choice of insecure parameters—simplicity is
not enough. Poor documentation, missing code examples, and a
lack of auxiliary features such as secure key storage, caused
even participants assigned to simpliﬁed libraries to struggle
with both basic functional correctness and security. Surprisingly,
the availability of comprehensive documentation and easy-to-
use code examples seems to compensate for more complicated
APIs in terms of functionally correct results and participant
reactions; however, this did not extend to security results. We
ﬁnd it particularly concerning that for about 20% of functionally
correct tasks, across libraries, participants believed their code
was secure when it was not.
Our results suggest that while new cryptographic libraries
that want to promote effective security should offer a simple,
convenient interface, this is not enough: they should also, and
perhaps more importantly, ensure support for a broad range of
common tasks and provide accessible documentation with secure,
easy-to-use code examples.
I. INTRODUCTION
Today’s connected digital economy and culture run on a
foundation of cryptography, which both authenticates remote
parties to each other and secures private communications.
Cryptographic errors can jeopardize people’s ﬁnances, publi-
cize their private information, and even put political activists at
risk [1]. Despite this critical importance, cryptographic errors
have been well documented for decades, in both production
applications and widely used developer libraries [2]–[5].
The identiﬁcation of a commercial product or trade name does not imply
endorsement or recommendation by the National Institute of Standards and
Technology, nor is it intended to imply that the materials or equipment
identiﬁed are necessarily the best available for the purpose.
Many researchers have used static and dynamic analysis
techniques to identify and investigate cryptographic errors in
source code or binaries [2]–[6]. This approach is extremely
valuable for illustrating the pervasiveness of cryptographic
errors, and for identifying the kinds of errors seen most
frequently in practice, but it cannot reveal root causes. Conven-
tional wisdom in the security community suggests these errors
proliferate in large part because cryptography is so difﬁcult for
non-experts to get right. In particular, libraries and Application
Programming Interfaces (APIs) are widely seen as being
complex, with many confusing options and poorly chosen
defaults (e.g. [7]). Recently, cryptographers have created new
libraries with the goal of addressing developer usability by
simplifying the API and establishing secure defaults [8], [9].
To our knowledge, however, none of these libraries have been
empirically evaluated for usability. To this end, we conduct
a controlled experiment with real developers to investigate
root causes and compare different cryptographic APIs. While
it may seem obvious that simpler is better, a more in-depth
evaluation can be used to reveal where these libraries succeed
at
their objectives and where they fall short. Further, by
understanding root causes of success and failure, we can
develop a blueprint for future libraries.
This paper presents the ﬁrst empirical comparison of several
cryptographic libraries. Using Python as common implemen-
tation language, we conducted a 256-person, between-subjects
online study comparing ﬁve Python cryptographic libraries
chosen to represent a range of popularity and usability:
cryptography.io, Keyczar, PyNaCl, M2Crypto and PyCrypto.
Open-source Python developers completed a short set of
cryptographic programming tasks, using either symmetric or
asymmetric primitives, and using one of the ﬁve libraries.
We evaluate participants’ code for functional correctness and
security, and also collect their self-reported sentiment toward
the usability of the library. Taken together,
the resulting
data allows us to compare the libraries for usability, broadly
deﬁned to include ability to create working code, effective
security in practice (when used by primarily non-security-
expert developers), and participant satisfaction. By using a
controlled, random-assignment experiment, we can compare
the libraries directly and identify root causes of errors, without
confounds related to the many reasons particular developers
may choose particular libraries for their real projects.
We ﬁnd that simplicity of individual mechanisms in an API
does not assure that the API is, in fact, usable. Instead, the
stronger predictors of participants producing working code
© 2017, Yasemin Acar. Under license to IEEE.
DOI 10.1109/SP.2017.52
154
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
were the quality of documentation, and in particular whether
examples of working code were available on the Internet,
within or outside the provided documentation. Surprisingly, we
also found that the participant’s Python experience level, se-
curity background, and experience with their assigned library
did not signiﬁcantly predict the functionality of the code that
they created. None of the libraries were rated as objectively
highly usable, but PyCrypto, a complex API with relatively
strong documentation, was rated signiﬁcantly more usable than
Keyczar, a simple API with poor documentation.
On the other hand, with some important caveats, simpliﬁed
APIs did seem to promote better security results. As might
be expected, reducing the number of choices developers must
make (for example, key size or encryption mode of operation)
also reduces their opportunity to choose incorrect parameters.
Python experience level was not signiﬁcantly correlated with
security results, but participants with a security background
were more likely to produce code that was, in fact, secure.
Nevertheless, the overall security results were somewhat dis-
appointing. A notable source of problems was APIs that did
not easily support important auxiliary tasks, such as secure
key storage. Perhaps of most concern, 20% of functional
solutions were rated secure by the participant who developed
them but insecure according to our evaluation; this suggests
an important failure to communicate important security ideas
or warn about insecure decisions.
II. RELATED WORK
We discuss related work in four key areas: measuring
cryptography problems in deployed code; investigating how
developers interact with cryptographic APIs; attempts at de-
veloping more usable cryptographic libraries and related tools;
and approaches to evaluating API usability more generally.
Cryptography problems in real code. Researchers have
identiﬁed misuses of cryptography in deployed code. Egele
et al. examined more than 11,000 deployed Android apps
that use cryptography and found that nearly 90% contained
at least one of six common cryptography errors [5]. Fahl
et al. and Onwuzurike et al. also analyzed Android apps,
and found that a large number did not correctly implement
the Trusted Layer Security (TLS) protocol, potentially lead-
ing to security vulnerabilities to Man-In-The-Middle (MITM)
attacks [10]–[15]. Likewise, a study examining Apple’s iOS
apps revealed that many were vulnerable to MITM attacks
because of incorrect certiﬁcate validation during TLS con-
nection establishment [16]. Other researchers speciﬁcally ex-
amined mobile banking applications and found a plethora
of potentially exploitable cryptographic errors [4]. Lazar et
al. examined cryptography-related vulnerabilities from the
Common Vulnerabilities and Exposures (CVE) database and
found more than 80% resulted from errors at the application
level [17]. In all of these cases, weak ciphers and insufﬁcient
randomness were common problems; in this paper, we test the
hypothesis that these problems are strongly affected by API
design. Georgiev et al. identiﬁed many certiﬁcate-validation
errors in applications and libraries; the authors attribute many
of these vulnerabilities to poorly designed APIs and libraries
with too many confusing options [3].
Interacting with cryptographic APIs. Others have inves-
tigated how developers interact with cryptographic APIs. Nadi
et al. manually examined the top 100 Java cryptography posts
on Stack Overﬂow and found that a majority of problems
were related to API complexity rather than a lack of domain
knowledge [18]. Follow-up surveys of some Stack Overﬂow
users who had asked questions and of Java developers more
generally conﬁrmed that API complexity and poor documen-
tation are common barriers in cryptographic API use. In this
paper, we compare different APIs to measure their relative
difﬁculty of use. Relatedly, Acar et al. examined how use of
different documentation resources affects developers’ security
decisions, including decisions about certiﬁcate validation [19];
we compare different APIs rather than different sources of
help.
Making cryptography more usable. Several cryptographic
APIs have been designed with usability in mind. The designers
of NaCl (Networking and Cryptographic library, pronounced
“salt”) describe how their design decisions are intended to
promote usability, in large part by reducing the number of de-
cisions a developer must make, but do not empirically evaluate
its usability [9]. In this work, we empirically compare NaCl
to more traditional APIs, as well as to non-academic libraries
that also claim usability beneﬁts (e.g., cryptography.io [8]).
Rather than a new API, Arzt et al. present an Eclipse plugin
that produces correct code templates based on high-level
requirements identiﬁed by the developer [20]. This approach
can make working with existing APIs easier; however, it is
orthogonal to the question of how APIs do or do not encourage
secure practices. Indela et al. suggest using design patterns
to describe high-level semantic APIs for goals that require
cryptography, such as establishing a secure connection or
storing data securely [21]. This approach is complementary to
improving cryptographic libraries that underlie such patterns.
Evaluating APIs, security and otherwise. Many software
engineering researchers have examined what makes an API
usable. Myers and Stylos provide a broad overview of how
to evaluate API usability, with reference to Nielsen’s general
usability guidelines as well as the Cognitive Dimensions
framework [22]–[24]. Henning and Bloch separately provide
sets of maxims for improving API design [25], [26]. Smith
and Green proposed similar high-level guidelines speciﬁc to
security APIs [27]. We adapt guidelines from these various
sources to evaluate the APIs we examine.
Concurrent with our work, Gorski and Iacono [28] use
an extensive literature review to formulate high-level techni-
cal and usability criteria along which security-relevant APIs
should be designed, calling for further work on evaluating
adherence to these principles. Also concurrent to our work,
Wijayarathna et al. develop a set of questions about security
APIs based on the above guidelines, resulting in a ques-
tionnaire similar to the one we developed and used in this
work [29].
Oliveira et al. conducted a lab study to examine the se-
155
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
curity mindset of developers. They found that security is
not a priority in the standard developer’s mindset, but that
detailed priming for security issues helps [30]. Wurster and
Van Oorschot recommend assuming that developers will not
prioritize security unless incentivized or forced to, and suggest
mandating security tools, rewarding secure coding practices,
and ensuring that secure tools and APIs are more usable and
attractive than less secure ones [31]. Our work focuses on how
choice of library affects developers who have already decided
to interact with a cryptographic API and have been primed for
the importance of security to their task.
Finifter, Wagner and Prechelt compared the security of
two web applications built to the same speciﬁcation but with
different frameworks. They found that automatic framework-
level support for mitigating certain vulnerabilities improved
overall security, while manual framework supports were read-
ily forgotten or neglected [32], [33].
Researchers have also conducted empirical studies of API
usability in different domains, including comparing APIs for
conﬁguration [34], considering how assigning methods to
classes affects usability [35], and analyzing the usability of the
factory pattern [36]. Piccioni et al. examined the usability of
a persistence library using a method similar to the one we use
in this work, with exit interview questions structured around
the Cognitive Dimensions framework [37]. They successfully
identify usability failures of the examined API, and their
results emphasize the critical importance of accurate, unam-
biguous and self-contained documentation to API usability.
Burns et al. provide a preliminary survey of work evaluating
APIs empirically [38].
III. STUDY DESIGN
We designed an online, between-subjects study to compare
how effectively developers could quickly write correct, secure
code using different cryptographic libraries. We recruited
developers with demonstrated Python experience (on GitHub)
for an online study.
Participants were assigned to complete a short set of
programming tasks using either symmetric- or asymmetric-
key cryptography, using one of ﬁve Python cryptographic
libraries. Assignment to one of the resulting 10 conditions
was initially random, with counterbalancing to ensure roughly
equivalent participant counts starting each condition. As the
study progressed, however, it became clear that dropout rates
varied widely by condition (see Section IV-C for details), so
we weighted the random assignment to favor conditions with
higher dropout rates.
Within each condition, task order was randomized. Sym-
metric participants were either given a key generation, then an
encryption/decryption task, or vice-versa. Asymmetric partic-
ipants were assigned a key generation task, an encryption/de-
cryption task, and a certiﬁcate validation task, according to a
latin square ordering.
After ﬁnishing the tasks, participants completed a brief
exit survey about the experience. We examined participants’
submitted code for functional correctness and security. The
study was approved by our institutions’ ethics review boards.
A. Language selection
We chose to use Python as the programming language
for our experiment because it is widely used across many
communities and has support for all kinds of security-related
APIs, including cryptography. As a bonus, Python is easy to
read and write and is widely used among both beginners and
experienced programmers. Indeed, Python is the third most
popular language on GitHub, trailing JavaScript and Java [39].
Therefore, we reasoned that there would be many Python
developers to recruit for our study.
B. Cryptographic library identiﬁcation
Next, we performed a series of Internet searches to identify
possible cryptographic libraries that we could use in our
study. We were agnostic to library implementation language,
performance, and third-party certiﬁcation: all that mattered
was that the library could be called from Python language
bindings. At this point, we decided to use the Python 2.7
programming language because several Python cryptographic
libraries did not support Python 3.
We selected ﬁve Python libraries to empirically compare
based on a combination of their popularity, their suitability
for the range of tasks we were interested in, and our desire
to compare libraries that were and were not designed with
usability in mind. Table I lists details of these features for the
libraries we examined.
We selected three libraries whose documentation claims
they were designed for usability and that each handle (most
of) the tasks we were interested in: cryptography.io, Keyczar,
and PyNaCl. cryptography.io describes itself as “cryptography
for humans” [8], Keyczar is “designed to make it easier and
safer for developers to use cryptography” [40], and PyNaCl
is a Python binding for NaCl, a crypto library designed to
avoid “disaster” in part via simpliﬁed APIs [9]. pysodium is a
potential alternative to PyNaCl; although pysodium is very
slightly more popular, it is still beta and has no included
documentation, so we selected PyNaCl.
For comparison, we also selected two libraries that do not
make usability claims: PyCrypto and M2Crypto. PyCrypto is
the most popular general-purpose Python crypto library we
found, and the closest thing to a “default” Python crypto
library that exists. M2Crypto is a Python binding for the
venerable OpenSSL library, which is frequently criticized for
its lack of usability. pyOpenSSL is both more popular than
M2Crypto and the ofﬁcial OpenSSL [41] binding for Python;
however, it lacks support for symmetric and asymmetric en-
cryption, which was a major part of our study, so we opted
for M2Crypto instead. We provide further details about the
features and documentation of the libraries we selected in
Section III-F.
We excluded libraries that include few of the features we
were interested in, or that have negligible popularity. We
excluded PyCryptodome as a less popular replacement for
156
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
Sym
Asym
n
o
i
t
a
r
e
n
e
g
y
e
K
n
o
i
t
p
y
r
c
n
E
n
o
i
t
a
r
e
n
e
g
y
e
K
n
o
i
t
p
y
r
c
n
E
.
g
i
s
l
a
t
i
g
i
D
F
D
K
9
0
5
X
.
s
m
i
a
l
c
y
t
i
l
i
b
a
s
U
PyCrypto
cryptography.io
M2Crypto
Keyczar
PyNaCl
pyOpenSSL
tlslite
bcrypt
gnupg
pycryptopp