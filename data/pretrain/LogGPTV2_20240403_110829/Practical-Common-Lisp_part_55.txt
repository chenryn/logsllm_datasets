实现这一模型的score函数如下所示：
1
"The Fisher computation described by Robinson."
(let
(and (zerop spam-count) (zerop ham-count))))
(let
(/ (+(- 1 h) s) 2.0d0))))
第 23章实践：垃圾邮件过滤器
(let ((spam-prob (float (bayesian-spam-probability feature) 0.0d0)))
Is
((h
(push spam-prob spam-probs)
push
(feature features)
1 (fisher ham-probs number-of-probs))))
(fisher
(ham-probs ()) (number-of-probs 0))
www.TopSage.com
 spam-probs number-of-probs)))
---
## Page 278
错误可能导致LOOP返回一个稍大于1的和。
Square返回的值应当是另一个概率，有必要用MIN来固定返回值，因为乘法和指数计算中的边界
但只要m大于自由度的数量,这个初始值随后就将不断地被每个自由度微调。由于inverse-chi-
平寻常地大时，inverse-chi-square将返回一个较低的概率。下面的函数精确地做到了这点：
且传给inverse-chi-square的值就会越大。这样，在fisher合并值相比进入它的概率数量异
square的值。由于概率的定义是小于或等于l的，一个乘积中的概率越多，它的结果就会越小并
递给inverse-chi-square的值就越大。当然，引人的概率数量也会影响传递给inverse-chi-
果可以得到一个关于其作用的直观印象：你传给fisher的低概率值越多，概率的乘积将会越小。
讲解该函数的确切数学含义超出了本书的范围，但通过思考你传递给fisher的值将怎样影响结
23.5反向卡方分布函数
写成这样：
于REDUCE接受一个:keY关键字参数，你可以用它来完成整个计算。把下面的写法：
数的对数之和，因此不用将所有概率相乘然后取对数，你可以将每个概率的对数相加。并且，由
且因此非常容易导致乘积下溢。
的。这在本函数中尤其不幸，因为当输人的概率值较低（接近o）时，fisher方法最为敏感，并
么在某些实现中得到一个特殊的负无穷大值，这将使得所有后续的计算在本质上都变成无意义
果将会下溢到0。而且，因为概率的乘积下溢，所有努力都将白费，因为对O求LOG要么报错，
乘的简洁方法，但在这个特定应用中乘积将会过小而无法表示成一个浮点数。在这种情况下，结
(log (reduce #'* probs))
幸运的是，你可以运用一点儿高中数学知识来避免这个问题。一个乘法的对数等价于所有因
回忆第10章里Exp计算e的给定参数次方。这样，value的值越大，prob的初始值将会越小。
本节中的inverse-chi-square实现是Rebinson所写的一个Python版本的相当直接的转换。
(reduce #'+ probs :key #'log)
不幸的是，在这个相当直接的实现中有一个小问题。尽管使用REDUCE是一个将数字列表相
(defun inverse-chi-square (value degrees-of-freedom)
(min
(assert (evenp degrees-of-freedom))
1.0)}
(inverse-chi-square
(loop with m 
summing prob)
for prob 
=(/ value 2)
(exp (- m)） then (* prob (/ m i))
degrees-of-freedom 2)
www.TopSage.com
23.5
反向卡方分布函数
261
姆
---
## Page 279
评分。
一个值的调用者将不会受到影响。现在当你测试classify时，能够精确地看到进入到分类中的
回的任何东西，因此它也将返回两个值。但由于主返回值和以前相同，这两个函数的那些只需要
会干扰任何其他代码的最简单方法是改变classification从而返回多个值。
用一部分的函数了。你应当首先确保数据库为空。
候，按Tab将会根据你的Lisp所知道的包来自动补全包名。现在你可以调用任何属于垃圾邮件应
的快捷命令change-package将当前包切换到你编写这些代码所在的包中。在你输入包名的时
如果你还没有这样做过，那么你应当通过在REPL中求值一个IN-PACKAGE形式，或是使用SLIME
23.6训练过滤器
262
你可以做出这个改变，然后只重新编译这一个函数。classify返回classification所返
0.7685351219857626D0
SPAM
SPAM> (classify "Make money fast")
SPAM> (train "Do you have any money for the movies?" 'ham)
现在你可以看到，如果你用更多的一-些有用邮件来训练过滤器的话将发生什么。
SPAM>
0.863677101854273D0
SPAM>
尽管最终你所关心的只是那个分类，但可以看到原始的评分也是很有用的。得到两个值而不
SPAM> (classify "Make money fast")
然后看分类器是怎样判断的。
(wed, "asey Xao a uean)  (clear-database)
0.5D0
JNSURE
JNSURE
SPAM>
SPAM
score))
(values
(uesataow aua 0n 05 01 quem. stsse1o)
(classify "Make money fast")
(t 'unsure))
(classify "Want to go to the movies?")
第23章实践：垃圾邮件过滤器
(ueds, (xaioos-ueds-uu aioos =
NIL
(defun add-directory-to-corpus （dir type corpus）
(defun add-file-to-corpus（filename type corpus)
0.17482223132078922D0
HAM
SPAM>(classify "Want to go to the movies?")
获得。
测试过滤器
(add-file-to-corpus filename type corpus)))
(add-directory-to-corpus "mail/ham/"'ham *corpus*)
(filename
(list-
-directorydir))
www.TopSage.com
---
## Page 281
你可以在列表中放置一些关键字来指示每个值的含义。
件名、实际类型、由classify返回的类型以及评分收集在一个列表中。为了使结果更好理解,
corpus和上述函数相似。这样，你应当同时捕捉由classify返回的分类和评分数据，然后将文
符数来返回相应的文本。train-from-corpus如下所示：
一个你将很快实现的函数start-of-file来获取文本，该函数接受一个文件名和一个最大的字
消息，尤其是那些带有附件的，通常会比较大，你应当限制它从消息中获取的字符数量。它使用
BIND从每个元素中解出文件名和类型，然后将命名文件的文本和类型传给train。由于某些邮件
从而允许它们对给定消息库的一个子序列进行操作。
个辅助函数train-from-corpus和test-from-corpus都将带有关键字参数:start和:end,
的函数，基于其testing-fraction参数来找出用于训练的消息和将被保留用来测试的消息。两
来分析它。
类的消息以及错误的方向感兴趣——究竟是假阳性更多还是假阴性更多？为了方便对分类器的
要想知道的是分类器的精度一—究竟有多少百分比的消息被正确分类了？但你还可能对错误分
过把库的其余部分分类来测试这个库，将由classify返回的分类与已知的分类进行比较。你主
264
① 如果你想要进行一个测试而不想干扰已有的数据库，那么你可以用一个LET绑定*feature-αatabase*、
除了要返回一个含有每个分类结果的列表，从而可以稍后来分析它们之外，函数tést-from-
这个函数从清空特征数据库开始。“然后，它对整个库进行“洗牌”，使用一个你将很快实现
主测试函数如下所示：
(defun test-from-corpus (corpus &key'(start O) end)
(defun train-from-corpus (corpus &key (start 0) end)
(defparameter *max-chars* (* 10 1024))
*total-spams*和*total-hams*，但这样的话在测试结束之后，你就没有办法查看数据库了，除非你把所用
(defun test-classifier (corpus testing-fraction)
到的这些值返回到函数中。
(loop for
(loop for 
(let* ((shuffled (shuffle-vector corpus))
(clear-database)
(test-from-corpus shuffled :start train-on)))
第 23章
(destructuring-bind (file type)
(destructuring-bind
(size (length corpus))
(multiple-value-bind (classification score)
(train (start-of-file file *max-chars*) type))))
 idx from start below 
实践：垃圾邮件过滤器
www.TopSage.com
size (- 1 testing-fraction)))))
type)
{or
end
(length(
:end train-on)
corpus
corpus)) collect
idx
---
## Page 282
报告的字符数，并在实际读取的字符数较少时返回一个子串。
符流时FILE-LENGTH存在歧义。而在多数实现中，FILE-LENGTH总是返回文件的字节数，这可
很好地定义，因为一个文件中编码的字符个数可能同时取决于使用的字符编码和文件中的特定文
相对小一些。不幸的是，如同第14章里提到的，在处理字符流时，函数FILE-LENGTH完全没有
你应该创建一个字符数组，其长度要么是文件的大小要么是你想要读取的字符的最大数量，后者
到内存中最有效的方式是创建一个适当大小的数组并使用READ-SEQUENCE来填充其内容。因此，
等其他破坏性函数相同的命名规则。如下所示：
nshuffle-vector开始，它可以就地重排一个向量。这个名字遵循与诸如NcONc和NREVERSE
能大于可从文件中读取的字符数。
本。在最坏的情况下，精确测量文件中字符数的唯一方法是实际读取整个文件。这样，在处理字
系的工具函数，shuffle-vector和start-of-file。
23.8
实现shu ffle-vector的简单有效的方法是使用Fisher-Yates算法?。你可以从实现一个函数
①这个算法以发明了概率合并方法的同一个Fisher和FrankYates来命名，后者是Fisher的StatisticalTables forBiological
不过，READ-SEQUENCE可以返回实际读取的字符数。因此，你可以尝试读取由FILE-LENGTH
 为了完成test-classifier的实现，你还需要编写两个事实上跟垃圾邮件过滤没有特别关
(defun start-of-file (file max-chars)
另一个工具函数start-of-file也是非常直接的，只有一点特别。把一个文件的内容读取