Rubik 为开发者提供了基于应用画像的应用调度机制，来实现自动的资源调度能力。通过自动注入技术，来实现业务的自动画像和自动分析，得出不同业务负载对于资源的敏感度和压力度。再基于画像和标记，对各节点的资源进行调度（如 CPU、内存带宽、缓存带宽、磁盘带宽、网络带宽等）和数据收集，并基于历史数据二次调度资源，均衡各不同业务对于资源的平均利用水平。
在应用调度之上，Rubik 还会基于业务指标进行一定程度上的节点资源超卖。通过对业务资源维度的采样，预测可压缩资源的使用情况，从而实现基于预测情况的超卖。在为在线业务准确预留所需资源，保障其 QoS 的同时，将未使用资源尽可能多地分配给离线业务，最大化离线业务的吞吐率，提升节点的资源利用率。
通过引入 Rubik 在离线混部解决方案，在保证业务 SLA 不下降的情况下，资源利用率从业界平均的 15% 提升到 35%。
![Rubik 混部解决方案](/data/attachment/album/202301/11/171304gokew6imk06fzwb8.jpg)
除了在线/离线业务混部之外，openEuler 还支持软硬件层面的实时混部：
### 软硬实时混部：多层次确定性时延需求满足
在 openEuler 当中，集成了一个新的硬实时内核 uniProton，帮助开发者磨平底层的硬件平台的差异，提供**一套标准统一的操作系统平台**。uniProton 支持任务管理、事件管理、队列管理、硬中断管理等管理方式，兼容 POSIX 标准接口的开发，降低了开发者的开发成本。
而对于开发者而言，更重要的是 uniProton 是鸿蒙系统和 openEuler **共同支持的内核**。开发者可以开发一套应用，同时运行在 openEuler 计算设备和鸿蒙设备上，降低了开发者的开发成本。
对于需要硬实时方案的开发者来说，配合 uniProton 和 openEuler 的系统镜像裁剪能力，可以实现 **KB 级的系统镜像**，**调度时延 < 3us**；而可以接受软实时方案的开发者则可以选择基于内核自旋锁和信号量优先级继承机制，配合周期性、Workqueue 延时、负载均衡等任务驱逐机制，实现 20us 中断响应。
通过软硬实时方案的混部能力，openEuler 实现了 CPU 、内存等全域资源的隔离分区，满足了数控机床、传统工业场景下对于多层次确定性时延的需求，帮助 openEuler 开发者可以进行传统工业场景的开发。
openEuler 除了和鸿蒙系统共建 uniProton，还提供了一个更有价值的特性 —— 多芯片架构的支持。
### 异构互联：泛架构算力存储统一调度
openEuler 全版本支持 x86、ARM、申威、龙芯、RISC-V 等五大架构，并支持英特尔、AMD、兆芯等多款 CPU 芯片，支持多个硬件厂商发布的多款整机型号、板卡型号，对于开发者来说，可以轻松完成多个不同型号的设备之间的互联和统一调度。
![异构融合统一调度](/data/attachment/album/202301/11/170547hn9hgtteihnkwtnt.jpg)
配合分布式软总线，可以实现鸿蒙设备和 openEuler 系统设备之间的即插即用、高效传输。开发者可以无需关注设备的发现机制，借助分布式软总线提供的通信机制，快速完成设备的发现、组网、连接和传输能力。开发者可以通过使用分布式软总线提供的 API 实现设备间的高速通信，无需关心通信细节，进而实现业务平台的高效部署与运行能力。
### SysMaster： 安全可靠机制可靠的服务管理系统
除了上面介绍的各种内核、硬件方面的技术突破以外，openEuler 还在开发者最熟悉的初始化系统上做了一些探索和改进。
![SysMaster](/data/attachment/album/202301/11/170548szls1ssu1qqrsdq9.jpg)
我们过去熟悉的初始化系统（比如 sysVinit、systemd、upstart），大多是使用 C 写的，且往往因为设计复杂，功能大一统等有违 UNIX 传统思维的做法而广受诟病。openEuler 社区为社区提供了一个全新的、采用 Rust 编写的初始化系统 —— SysMaster。
和 systemd 相比，由于 SysMaster 采用 Rust 语言编写，原生地规避了内存泄漏问题，开发者无需担心内存泄漏导致的 1 号进程挂掉。而从零构建的 SysMaster，也摒弃了之前的初始化系统中存在问题，为开发者提供了**新一代的初始化系统**。
![SysMaster](/data/attachment/album/202301/11/170549ljnmk88kzc0nccxe.png)
相比于过去的初始化系统，SysMaster 提供了全新的架构设计，分为 SysMaster Core 和 SysMaster Extend 两类。SysMaster Core 提供了极度轻量的调度方式，占用更少的资源，以及更快的启动速度。拆分的架构则可以支持拓展多种服务类型，实现 1+1+N 的架构，满足初始化系统的多样化诉求。而它的生态兼容工具，则可以让开发者可以自由选择 systemd 和 SysMaster，无需担心被生态绑定。
### 总结
openEuler 的技术创新覆盖的场景相当地丰富和深入，以至于我无法在一篇文章中逐一分析和披露所有细分场景和技术创新点。在撰写这篇文章时，给我的最大感受是“**他们居然实现了！**”
对于一个产业的研发人员来说，毫无疑问，openEuler 的这些技术创新，将帮助产业和行业的开发者节省大量的时间，用更短的时间完成应用的建设，将精力投放在产业和业务当中，产生价值。
从过去的“要打造根社区”，到如今的“**成为根社区，并从根出发，进入纵深领域创新**”，openEuler 给我了太多的惊喜。假以时日，我相信，openEuler 还给我带来更多的震撼。