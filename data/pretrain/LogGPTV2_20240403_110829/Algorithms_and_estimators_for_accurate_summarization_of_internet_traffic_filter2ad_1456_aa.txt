title:Algorithms and estimators for accurate summarization of internet traffic
author:Edith Cohen and
Nick G. Duffield and
Haim Kaplan and
Carsten Lund and
Mikkel Thorup
Algorithms and Estimators for
Accurate Summarization of Internet Trafﬁc
Edith Cohen
AT&T Labs–Research
180 Park Avenue
Florham Park, NJ 07932, USA
PI:EMAIL
Nick Dufﬁeld
AT&T Labs–Research
180 Park Avenue
Florham Park, NJ 07932, USA
dufﬁPI:EMAIL
Haim Kaplan
School of Computer Science
Tel Aviv University
Tel Aviv, Israel
PI:EMAIL
Carsten Lund
AT&T Labs–Research
180 Park Avenue
Florham Park, NJ 07932, USA
PI:EMAIL
Mikkel Thorup
AT&T Labs–Research
180 Park Avenue
Florham Park, NJ 07932, USA
PI:EMAIL
ABSTRACT
Statistical summaries of trafﬁc in IP networks are at the heart of
network operation and are used to recover information on arbitrary
subpopulations of ﬂows. It is therefore of great importance to col-
lect the most accurate and informative summaries given the router’s
resource constraints. Cisco’s sampled NetFlow, based on aggregat-
ing a sampled packet stream into ﬂows, is the most widely deployed
such system.
We observe two sources of inefﬁciency in current methods. Firstly,
a single parameter (the sampling rate) is used to control utilization
of both memory and processing/access speed, which means that it
has to be set according to the bottleneck resource. Secondly, the
unbiased estimators are applicable to summaries that in effect are
collected through uneven use of resources during the measurement
period (information from the earlier part of the measurement pe-
riod is either not collected at all and fewer counter are utilized or
discarded when performing a sampling rate adaptation).
We develop algorithms that collect more informative summaries
through an even and more efﬁcient use of available resources. The
heart of our approach is a novel derivation of unbiased estimators
that use these more informative counts. We show how to efﬁciently
compute these estimators and prove analytically that they are su-
perior (have smaller variance on all packet streams and subpopula-
tions) to previous approaches. Simulations on Pareto distributions
and IP ﬂow data show that the new summaries provide signiﬁcantly
more accurate estimates. We provide an implementation design that
can be efﬁciently deployed at routers.
Categories and Subject Descriptors: G.3: probabilistic algorithms;
General Terms: Algorithms, Mea-
C.2.3: network monitoring
surement, Performance Keywords: NetFlow, Network manage-
ment, sketches, data streams, subpopulation queries, IP ﬂows.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’07, October 24-26, 2007, San Diego, California, USA.
Copyright 2007 ACM 978-1-59593-908-1/07/0010 ...$5.00.
1.
INTRODUCTION
Collection and summarization of network trafﬁc data is neces-
sary for many applications including billing, provisioning, anomaly
detection, inferring trafﬁc demands, and conﬁguring packet ﬁlters
and routing protocols. Trafﬁc consists of interleaving packets of
multiple ﬂows but the summaries should support queries on statis-
tics of subpopulations of IP ﬂows, such as the amount of trafﬁc that
belongs to a particular protocol, originate from a particular AS,
or both. These queries are posed after the sketch is produced and
therefore it is critical to retain sufﬁcient meta data information and
provide estimators that facilitate such queries.
Two critical resources in the collection of data are the high-speed
memory (usually expensive fast SRAM) and CPU power that are
used to process the incoming packets. The available memory limits
the number of cached ﬂows that can be actively counted.
The
processing power limits the level of per-packet processing and the
fraction of packets that can undergo higher-level processing.
The practice is to obtain periodic summaries (sketches) of traf-
ﬁc by applying a data stream algorithm to the raw packet stream.
The most widely deployed such system is Cisco’s sampled NetFlow
(NF): packets are sampled randomly at a ﬁxed rate. Once a ﬂow
is sampled, it is cached, and a counter is created that counts subse-
quent sampled packets of the same ﬂow. The number of counters
is the number of distinct sampled ﬂows. The packet-level sam-
pling that NF performs serves two purposes: Firstly, it addresses
the memory constraint by reducing the number of distinct ﬂows
that are cached (the bulk of small ﬂows is not sampled). Without
sampling, we need a counter for each distinct ﬂow in the origi-
nal stream. Secondly, the sampling reduces the processing power
needed for the aggregation, since only sampled packets require the
higher-level processing required in order to determine if they be-
long to a cached ﬂow.
An algorithm that is able to count more packets than NF using
the same number of statistics counters (memory) is sample-and-
hold (SH) [10, 9]. With SH, as with NF, packets are sampled at
a ﬁxed rate and once a packet from a particular ﬂow is sampled,
the ﬂow is cached. The difference is that with SH, once a ﬂow
is actively counted, all subsequent packets that belong to the same
ﬂow are counted (with NF, only sampled packets are counted). SH
sketches are considerably more accurate than NF sketches [10, 9].
A disadvantage of SH over NF, however, is that the summariza-
tion module must process every packet in order to determine if it
belongs to a cached ﬂow. This additional processing makes it less
practical for high volume routers.
NF and SH use a ﬁxed packet sampling rate, as a result, the num-
ber of distinct ﬂows that are sampled and therefore the number of
statistics counters required is variable. When conditions are sta-
ble, the number of distinct ﬂows sampled using a given sampling
rate has small variance. Therefore one can manually adjust the
sampling rate so that the number of counters does not exceed the
memory limit and most counters are utilized [9]. Anomalies such
as DDoS attacks, however, can greatly affect the number of distinct
ﬂows. A ﬁxed-sampling-rate scheme can not react to such anoma-
lies as its memory requirement would exceed the available mem-
ory. Therefore, anomalies would cause disruption of measurement
or affect router performance. These issue is addressed by adaptive
variants that include adaptive sampled NetFlow (ANF) [10, 8, 13]
and adaptive SH (ASH) [10, 9]. These variants adaptively decrease
the sampling rate and adjust the values of the statistics counters as
to emulate sampling with a lower rate.
Overview
We design sketching algorithms for packet streams that obtain con-
siderably more accurate statistics than existing approaches. We fo-
cus on subpopulation-size queries (packets or bytes of a subpopu-
lation) but the sketches can be used for other queries such as ﬂow
size distribution. We use available resources in a balanced and load-
sensitive way to collect more information from the packet sample.
Then we design unbiased estimators that use the additional infor-
mation. Our algorithms are robust to anomalies and changes in
trafﬁc patterns, and gracefully degrade performance when there is
a decrease in available resources. They are supported by rigorous
analysis.
Step counts for NF and SH. NF, SH, and their adaptive vari-
ants do not equally utilize available resources through the measure-
ment period: The number of cached ﬂows increases through the
measurement period and reaches its maximum only at the end. The
adaptive ANF and ASH fully utilize all counters, but this utilization
is in a sense “wasted” and does not translate into more accurate es-
timates, as each rate adaptation (decrease of the sampling rate) is
implemented by discarding the more informative counts obtained
with the lower sampling rate [10, 8].
Step-counting NetFlow (SNF) and step-counting sample-and-hold
(SSH) process the same packets as their adaptive counterparts, but
when performing rate adaptation, they retain the current counts.
SSH and SNF build on a simple but powerful design [17, 15] of
transferring partial counts from (fast and expensive) SRAM to (slower
and cheaper) DRAM, which allows us to use smaller size coun-
ters in SRAM and add the counts to larger DRAM counters when
the SRAM counters are about to overﬂow. This design allows us
to distinguish between the resources required for active counting
and those required for intermediate storage. While applicable to all
methods, SNF and SSH are able to make a further use of this design
by transferring, after each rate adaptation, the counts into DRAM.
Counting more of the processed packets in the ﬁnal summary is the
key for obtaining better estimates.
Hybrids of NF and SH. There are multiple resource constraints
for gathering statistics. At the router, the memory size that deter-
mines the number of statistics counters and the CPU processing (or
size of specialized hardware) that determines the fraction of pack-
ets that can be examined against the ﬂow cache. Other constraints
are the available bandwidth and storage to transmit and store the
ﬁnal sketch. Previous schemes, however, use a single parameter
(sampling rate) with these multiple constraints: NF (and ANF and
SNF), must set (or adjust) the sampling rate to be low enough so
that the number of counters does not overﬂow or over utilize the
router memory. As a result, resources available for processing
packets may not be fully utilized. SH (and ASH and SSH) , on
the other hand, do not address CPU processing constraints at all,
and all packets are processed. We propose hybrid schemes of
SH variants that use two packet sampling rates. The ﬁrst one con-
trols the fraction of packets that are processed in order to determine
if they belong to an already-cached ﬂow. The second, and lower,
rate, determines the fraction of packets that can create new entries
of cached ﬂows.
Estimators. The sketches we produce (for all algorithms) have
the form of a subset of the ﬂows along with the ﬂow attributes and
an adjusted weight associated with each ﬂow. Adjusted weights
have the property that for each ﬂow, the expectation is equal to its
actual size (Adjusted weights of ﬂows not included in the sketch is
deﬁned to be zero). Therefore, an unbiased estimate for the size of
a subpopulation of ﬂows can be obtained by summing the adjusted
weights of ﬂows in the sketch that belong to this subpopulation.
The per-ﬂow unbiasedness property is highly desirable as accuracy
increases when aggregating over larger subpopulations and when
combining estimates obtained from sketches of different time peri-
ods. The heart of our work is the calculation and analysis of unbi-
ased adjusted weights.
The derivation of adjusted weights for NF, which applies ﬁxed-
rate sampling, is standard: a simple scaling of the counts by the
inverse sampling rate. Adjusted weights assignments for ANF and
ASH are provided in [2] along with non explicit derivation for
SSH. We provide an explicit and efﬁciently computable expres-
sions for SSH and SNF adjusted weights. An important contribu-
tion we make is the understanding of what information to gather
and how to use it to obtain correct adjusted weights. The derivation
and efﬁcient computation of correct unbiased adjusted weights for
SNF and SSH is novel and highly nontrivial. The adjusted weights
we derive have minimum variance among all estimators that use
the same information (the counts gathered by the algorithm for the
ﬂow), and in this sense are optimal.
The quality of the adjusted weight assignment depends on the
distribution over subsets of ﬂows that are included in the sketch, the
information collected by the algorithm for these ﬂows, and the pro-
cedure used to calculate these weights. The distribution of the sub-
sets of ﬂows included in the sketch produced by each of the algo-
rithms NF, SH, hybrids, and variants, is that of drawing a weighted
sample without replacement from the full set of aggregated ﬂows
(for ASH, ANF, and SSH this is shown in [2].) Therefore, the dif-
ference in the quality of the sketches stems only from the variance
of the adjusted weights we assign. More informative counts are
beneﬁcial only if they correspond to adjusted weights with lower
variance. We analyze the variance of the adjusted weight assign-
ment and establish a strong relation between the different methods
that holds for any packet stream and any ﬂow or subpopulation of
ﬂows.
There are typically multiple numeric properties of interest over
subpopulations, such as total bytes, total packets, and number of
distinct ﬂows. We derive unbiased estimators for other aggregates
that are applicable to the same sketches.
Implementation. Our implementation design piggybacks on sev-
eral existing ingredients. The basis is the ﬂow counting mechanism
that Cisco’s NF deploys. (Proposed improved implementation such
as [15, 8] can also be integrated.) A router implementation of adap-
tive sampling rate for ANF was proposed in [8, 13] (rate adaptation
was termed renormalization. This design can also be used for ASH
and the step-counting and hybrid variants.
Discretized sampling rates. The pure adaptive models per-
form a rate adaptation each time a ﬂow is “evicted” from the cache.
Rate adaptations, however, are intensive operations [8, 13]. We de-
sign a “router friendly” variant of the pure model with discretized
sampling rates. This design drastically reduces the number of rate
adaptations and also simpliﬁes their implementation. As in [8],
discretization allows us to efﬁciently perform rate adaptations. The
discretized model, however, differs mathematically from the pure
sampling schemes. We show how to apply the estimators derived
for the pure schemes to the discretized schemes. More importantly,
we show that these estimators are also unbiased and retain other key
properties of the estimators for the pure model. Furthermore, the
particular discretization we used was critical for the unbiasedness
arguments to hold.
Performance study. We evaluate the performance of these meth-
ods on IP ﬂows data collected by unsampled NF running on a gate-
way router and on synthetic data obtained using Pareto distribution
with different parameter values. On the IP data, we consider sub-
populations of ﬂows that belong to speciﬁed applications, and on
the synthetic data, we consider preﬁxes and sufﬁxes of the ﬂow size
distribution. We observe that the step-counting SNF and SSH pro-
vide signiﬁcantly more accurate estimates than their adaptive coun-
terparts. The SH variants signiﬁcantly dominate their NF counter-
parts and the hybrid version provides a smooth performance curve
between these two extremes. Even with low sampling rates, the hy-
brids are able to provide much more accurate estimates than plain
NF, ANF, and SNF. We also show that our implementation design
can be tuned to provide a very low number of rate adaptations.
2. RELATED WORK
An orthogonal summarization problem is summarizing aggre-
gated data [11]. For example, using k-mins or bottom-k sketches [1,
3, 5, 4, 7]. Estimators developed for these summaries utilize the
weight of each item, which is not readily available in our unag-
gregated setup. Direct application requires pre-aggregation, that
is, obtaining an exact packet count for each ﬂow as when running
unsampled NF. This is infeasible in high volume routers as it re-
quires processing of every packet and storing an active counter for
every ﬂow. These methods can be used,however, to trim the size of
a sketch obtained using any method that obtains unbiased adjusted
weights (including NF, SH, and their variants), when trimming is
needed in order to address transmission bandwidth or storage con-
straints.
An extension of ASH that does not discard counts when a rate
adaptation is performed was considered in [9] for ﬁnding “elephant
ﬂows.” While this extension attempts to provide similar beneﬁt
to step-counting, it is not adequate for estimating subpopulation
sizes. The unadjusted count itself is indeed a better estimator than
the reduced count for each individual ﬂow, but this estimator is
inherently biased. The bias depends on where in the measurement
period the packets occurred, and an unbiased estimator can not be
constructed from the counts collected. The relative bias is very
large on smaller ﬂows (of the order of the inverse sampling-rate)
and if used to estimate subpopulation sizes for such ﬂows, we can
obtain a large relative error on such subpopulations (even is the
subpopulation size is large).
Kumar et al [14] proposed a streaming algorithm for IP trafﬁc
that produces sketches that allow us to estimate the ﬂow size distri-
bution (FSD) of subpopulations. Their design executes two mod-
ules concurrently. The ﬁrst is a sampled NetFlow module that col-
lects ﬂow statistics, along with full ﬂow labels, over sampled pack-
ets. The second is a streaming module that is applied to the full
packet stream and uses an array of counters, accessed by hashing.
Estimating the ﬂow size distribution is a more general problem than
estimating the size of a subpopulation, and therefore this approach
can be used to estimate the subpopulations sizes. To be accurate,
however, the number of counters in the streaming module should
be roughly the same as the number of ﬂows and therefore the size
of fast memory (SRAM) should be proportional to the number of
distinct ﬂows. As we see here, however, accurate estimates for
subpopulation sizes can be obtained more efﬁciently using other
approaches.
In some cases, protocol-level information such as testing for the
TCP syn ﬂag [6] on sampled packets and using TCP sequence num-
bers [16] can be used to obtain better estimates of the size of the
ﬂow from sampled packets. These methods can signiﬁcantly in-
crease the accuracy of estimating the ﬂow size distribution of TCP
ﬂows from packet samples, but are not as critical for subpopulation
size estimates for subpopulations with multiple ﬂows. We focus on
general-purpose all-protocols estimators, but these methods can be
integrated with our sketches.
This paper builds on and expands our earlier work on summa-
rization of unaggregated data streams [2]. The main new contribu-
tions are introducing SNF, closed-form expressions and fast algo-
rithms for computing unbiased adjusted weights for SNF and SSH
sketches, hybrid sketching algorithms, router-friendly design and
discretized variants, and performance study.
3. SKETCHING ALGORITHMS
We provide the underlying mathematical models of the differ-
ent ﬂow sampling schemes. These models are used in the analysis
and are mimicked by the “router friendly” implementations. Our
sampling schemes are data stream algorithms that are applied to a
stream of packets.
Sampled NF performs ﬁxed-rate packet sampling. Packets are
sampled independently at a rate p and sampled packets are aggre-
gated into ﬂows. All ﬂows with at least one sampled packet are
cached and there is an active counter for each ﬂow. The sketch
includes all ﬂows that are cached in the end of the measurement
period.
SH, like NF, samples packets at a ﬁxed rate p and maintains
a cache of all ﬂows that have at least one sampled packet. SH,
however, processes all packets and not only sampled packets. If a
processed packet belongs to a cached ﬂow, it is counted.
We facilitate the analysis through a rank-based view [2] of the
sample space: Each point in the sample space is a rank assign-
ment, where each packet is assigned a rank value that is indepen-
dently drawn from U [0, 1]. The actions of each sampling scheme
are deﬁned by the rank assignment. Implementations do not track
per-packet random rank values or even draw rank values. They
maintain just enough “partial” information on the rank assignment
to maintain a ﬂow cache and counts that are consistent with the
rank-based view.
For each ﬂow f ∈ F and position in the packet stream, we deﬁne
the current rank value r(f ) to be the smallest rank assigned to a
packet of the ﬂow that occurred before the current position in the
packet stream.
An NF sketch with sampling rate p is equivalent to obtaining a