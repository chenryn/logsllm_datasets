# 【缺陷周话】第38期：不安全的反序列化：XStream

## 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

## 1. 不安全的反序列化：XStream
当客户端向服务端发送XML格式的数据请求时，服务端通常不会直接处理这些数据，而是将其转换为程序中可操作的对象。这一过程中常使用XStream工具进行对象与XML之间的相互转换。如果在利用XStream执行反序列化操作时缺乏对用户输入的有效验证，则攻击者可能通过构造恶意输入来触发非预期对象的创建，从而引发包括任意代码执行在内的多种安全问题。本章节将以Java语言源码为例，深入探讨“不安全的反序列化：XStream”漏洞的原因及其修复方法。更多详情请参考CWE ID 502: Deserialization of Untrusted Data (http://cwe.mitre.org/data/definitions/502.html)。

## 2. 漏洞影响
攻击者能够利用“不安全的反序列化：XStream”漏洞修改已序列化的数据字段，进而实现权限提升、越权访问或替换缓存服务器中的数据等目的。更严重的情况下，该漏洞可能导致远程代码执行。据统计，在2019年1月至6月期间，共有38条与此相关的CVE记录被公布。部分示例如下：

| CVE | 描述 |
|---|---|
| CVE-2019-7091 | ColdFusion 版本 Update 1, Update 7, 和 Update 15 对不受信任的数据进行了反序列化，成功利用可能导致任意代码执行。 |
| CVE-2019-4279 | IBM WebSphere Application Server 8.5 和 9.0 可能允许远程攻击者使用来自不受信任来源的特制序列化对象在系统上执行任意代码。 |
| CVE-2019-10912 | Symfony 在版本 2.8.50, 3.x (早于 3.4.26), 4.x (早于 4.1.12) 以及 4.2.x (早于 4.2.7) 中，可以缓存可能包含错误用户输入的对象。这可能导致删除当前用户有权访问的文件。 |

## 3. 示例代码分析
以下示例来源于 WebGoat-8.0.0.M25 (https://www.owasp.org/index.php/Category:OWASP_WebGoat_Project)，具体文件为 `VulnerableComponentsLesson.java`。

### 3.1 缺陷代码
该段代码首先从用户处接收XML格式的数据（第54行），然后利用DOM解析器构建XStream实例（第57行）。接着设置Contact类作为XStream的类加载器，并配置XStream识别Contact类注解（第58-60行）。最后，通过调用`fromXML()`方法将XML字符串反序列化成Contact对象（第87行）。
若传入特定格式的XML文档（如包含`ProcessBuilder`对象初始化并调用`start()`方法以启动计算器程序的内容），则可能会导致执行任意命令。

### 3.2 修复建议
针对上述风险，可以通过调用`allowTypeHierarchy()`方法限制只允许指定类型的反序列化操作来加强安全性（第61行）。经此修改后再次使用代码卫士扫描，将不再报告“不安全的反序列化：XStream”问题。

## 4. 避免策略
- **实施白名单机制**：仅允许预定义的安全类型参与反序列化过程。
- **增强数据完整性校验**：通过对序列化对象施加加密保护和完整性检查来防止篡改。
- **严格控制类型约束**：确保在反序列化前对目标类型实施严格的限定。