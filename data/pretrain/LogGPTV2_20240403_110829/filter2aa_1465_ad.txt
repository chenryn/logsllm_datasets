in compilation time not to be prohibitive as it is a one-
time cost. Hence, the security improvement outweighs
the increase in compilation time.
5.2. Security
In this section, we evaluate the security provided by SFIP.
We discuss the theoretical security beneﬁt of each mode of
SFIP in the context of control-ﬂow-hijacking attacks. We
then evaluate a real vulnerability in BusyBox version 1.4.0
and later2. We also consider mimicry attacks [65, 66] and
2https://ssd-disclosure.com/ssd-advisory-busybox-
local-cmdline-stack-buffer-overwrite/
perform an analysis of real-world state machines and
syscall origins.
5.2.1. Syscall-Flow Integrity in the Context of Con-
trol-ﬂow Hijacking In the threat model of SFIP (cf. Sec-
tion 3.1), an attacker has control over the program-counter
value of an unprivileged application. In such a situation,
an attacker can either inject code, so-called shellcode,
that is then executed, or reuse existing code in a so-called
code-reuse attack. In a shellcode attack, an attacker man-
ages to inject their own custom code. With control over
the program-counter value, an attacker can redirect the
control ﬂow to the injected code. On modern systems,
these types of attacks are by now harder to execute due to
data execution prevention [62, 49], i.e., data is no longer
executable. As a result, an attacker must ﬁrst make the
injected code executable, which requires syscalls, e.g.,
the mprotect syscall. For this, an attacker has to rely on
existing code (gadgets) in the exploited application to ex-
ecute such a syscall. An attacker might be lucky, and the
correct parameters are already present in the respective
registers, resulting in a straightforward code-reuse attack
commonly known as ret2libc [51]. Realistically, however,
an attacker ﬁrst has to get the location and size of the shell-
code area into the corresponding registers using existing
code gadgets. Depending on the type of gadgets, such
attacks are known as return-oriented-programming [59]
or jump-oriented-programming attacks [5].
On an unprotected system, every application can exe-
cute the mprotect syscall. Depending on the application,
the mprotect syscall cannot be blocked by seccomp if
the respective application requires it. With SFIP, attacks
that rely on mprotect can potentially be prevented even
if the application requires the syscall. First, we consider
a system where only the state machine is veriﬁed on ev-
ery syscall execution. mprotect is mainly used in the
initialization phase of an application [24, 10]. Hence, we
expect very few other syscalls to have a transition to it, if
any. This leaves a tiny window for an attacker to execute
the syscall to make the shellcode executable, i.e., it is
unlikely that the attempt succeeds in the presence of state-
machine SFIP. Still, with only state-machine checks, the
syscall can originate from any syscall instruction within
the application.
Contrary, if only the syscall origin is enforced, the
mprotect syscall is only allowed at certain syscall instruc-
tions. Hence, an attacker needs to construct a ROP chain
that sets up the necessary registers for the syscall and then
returns to such a location. In most cases, the only instance
where mprotect is allowed is within the libc mprotect
function. If executed from there, the syscall succeeds. If
the syscall originates from another location, the check
fails, and the application is terminated. Still, with only
syscall origins being enforced, the previous syscall is not
considered, allowing an attacker to perform the attack at
any point in time.
With both active, i.e., full SFIP, several restrictions are
applied to a potential attack. The attacker must construct
a ROP chain that either starts after a syscall with a valid
transition to mprotect was executed, or the ROP chain
must contain a valid sequence of syscalls that lead to
such a state, i.e., a mimicry attack (cf. Section 5.2.3).
Additionally, all syscalls must originate from a location
where they can legally occur. These additional constraints
signiﬁcantly increase the security of the system.
5.2.2. Real-world Exploit For a real-world application,
we evaluate a stack-based buffer overﬂow in the BusyBox
arp applet from version 1.4.0 to version 1.23.1. In line
with our threat model, we assume that all software-based
security mechanisms, such as ASLR and stack protector,
have already been circumvented. The vulnerable code
is in the arp_getdevhw function, which copies a user-
provided command-line parameter to a stack-allocated
structure using strcpy. By providing a device name
longer than IFNAMSIZ (default 16 characters), this over-
ﬂow overwrites the stack content, including the stored
program counter.
The simplest exploit we found is to mount a return2libc
attack using a one gadget RCE, i.e., a gadget that directly
spawns a shell. In libc version 2.23, we discovered such a
gadget at offset 0xf0897, with the only requirement that
offset 0x70 on the stack is zero, which is luckily the case.
Hence, by overwriting the stored program counter with
that offset, we can successfully replace the application
with an interactive shell. With SFIP, this exploit is pre-
vented. Running the exploit executes the socket syscall
right before the execve syscall that opens the shell. While
the execve syscall is at the correct location, the state ma-
chine does not allow a transition from the socket to the
execve syscall. Hence, exploits that directly open a shell
are prevented. We also veriﬁed that there is no possible
transition from socket to mprotect,; hence loaded shell-
code cannot be marked as executable. There are only 21
syscalls after a socket syscall allowed by the state machine.
Especially as neither the mprotect nor the execve syscall
are available, possible exploits are drastically reduced.
To circumvent the protection, an attacker would need to
ﬁnd gadgets allowing a valid transition chain from the
socket to the execve (or mprotect) syscall. We also note
that the buffer overﬂow itself is also a limiting factor. As
the overﬂow is caused by a strcpy function, the exploit
payload, i.e., the ROP chain, cannot contain any null byte.
Thus, given that user-space addresses on 64-bit systems
always have the 2 most-signiﬁcant address bits set to 0, a
longer chain is extremely difﬁcult to craft.
5.2.3. Syscall-Flow-Integrity Protection and Mimicry
Attacks We consider the possibility of mimicry at-
tacks [65, 66] where an attacker tries to circumvent a
detection system by evading the policy. For instance, if an
intrusion detection system is trained to detect a speciﬁc
sequence of syscalls as malicious, an attacker can add
arbitrary, for the attack unneeded, syscalls that hide the
actual attack. With SFIP, such attacks become signiﬁ-
cantly more complicated. An attacker needs to identify
the last executed syscall and knowledge of the valid tran-
sitions for all syscalls. With this knowledge, the attacker
needs to perform a sequence of syscalls that forces the
state machine into a state where the malicious syscall
is a valid transition. Additionally, as syscall origins are
enforced, the attacker has to do this in a ROP attack and
is limited to syscall locations where the speciﬁc syscalls
are valid. While this does not make mimicry attacks im-
possible, it adds several constraints that make the attack
signiﬁcantly harder.
5.2.4. Security of Syscall-Flow Information in the Ker-
nel The security of the syscall-ﬂow information stored in
the kernel is crucial for effective enforcement. Once the
application has sent the information to the kernel for en-
forcement, it is the responsibility of the kernel to prevent
malicious changes to the information. The case where
the initial information sent to the kernel is malicious is
outside of the threat model (cf. Section 3.1).
The kernel stores the information in kernel memory;
hence direct access and manipulation is not possible. The
only way to modify the information is through our new
syscall. Our implementation currently does not allow for
any changes to the installed information, i.e., no updates
are allowed. An attacker using our syscall and a ROP
attack to manipulate the information is also not possible
as the syscall itself needs to pass SFIP checks before being
executed. As the application contains no valid transition
nor location for the syscall, the kernel terminates the
application.
Still, as allowing no updates is a design decision, an-
other implementation might consider allowing updates. In
this case, the application needs to perform our new syscall
to update the ﬁlters. Before our syscall is executed, SFIP
is applied to the syscall, i.e., it is veriﬁed whether there
is a valid transition to it and whether it originates at the
correct location. If not, the kernel terminates the appli-
cation; otherwise, the update is applied. In this case, if
timed correctly, an attacker is able to maliciously modify
the stored information.
5.2.5. State Machine Reachability Anaysis We anal-
yse the state machine of several real-world applications
in more detail. We deﬁne a state in our state machine
as a syscall with at least one outgoing transition. While
Wagner and Dean [65] only provide information on the
average branching factor, i.e., the number of average
transitions per state, we extend upon this to provide addi-
tional insights into automatically generated syscall state
machines. We focus on several key factors: the overall
number of states in the application and the minimum,
maximum, and average number of transitions across these
states. These are key factors that determine the effective-
ness of SFIP. We do not consider additional protection
provided by enforcing syscall origins. We again rely on
real-world applications that have been used in previous
work [10, 16, 24, 60]. For busybox and coreutils, we
do not provide the data for every utility individually, but
instead present the average of all contained utilities, i.e.,
398 and 103, respectively. To determine the improvement
in security, we consider an unprotected version of the
respective application, i.e., every syscall can follow the
previously executed syscall. Additionally, we compare
our results to a seccomp-based version.
Results
Table 2 shows the results of this evaluation. ng-
inx shows the highest number of states with 108, followed
by memcached, mutool, and ffmpeg with 87, 61, and 56
states, respectively. coreutils and busybox also provide
multiple functionalities but split across various utilities.
Hence, their number of states is comparatively low.
Interestingly, each application has at least one state
with only one valid transition. We manually veriﬁed this
transition, and in every case, it is a transition from the
exit_group syscall to the exit syscall, which is indeed the
only valid transition for this syscall.
The combination of the average and maximum number
of transitions together with the number of states provides
some interesting insight. We observe that in most cases,
the number of average transitions is relatively close to
the maximum number of transitions, while the difference
to the number of states can be larger. This indicates
that our state machine is heavily interconnected. Mod-
ern applications delegate many tasks via syscalls to the
kernel, such as allocating memory, sending data over the
network, or writing to a ﬁle. As syscalls can fail, they
are often followed by error checking code that performs
application-speciﬁc error handling, logs the error, or ter-
minates the application. Hence, a potential transition to
these syscalls is automatically detected, leading to larger
state machines. Another source is locking, as the involved
syscalls can be preceded and followed by a wide variety
of other syscalls. Additionally, the overapproximation of
indirect calls also increases the number of transitions.
Even with such interconnected state machines, the secu-
rity improvement is still large compared to an unprotected
version of the application or even a seccomp-based ver-
sion. In the case of an unprotected version, all syscalls are
valid successors to a previously executed syscall. An un-
modiﬁed Linux kernel 5.13 provides 357 syscalls. Com-
pared to nginx, which has the highest number of average
transitions with 66, this is an increase of factor 5.4 in
terms of available transitions. In our state machine, the
number of states corresponds to the number of syscalls
an automated approach needs to allow for seccomp-based
protection. These numbers also match the numbers pro-
vided in previous work on automated seccomp ﬁlter gen-
eration. For instance, Canella et al. [10] reported 105
syscalls in nginx and 63 in ffmpeg. Ghavamnia et al. [24]
reported 104 in nginx. Each such syscall can follow any
of the other syscalls that are part of the set. In the case of
nginx, this is around factor 1.6 more than in the average
state when SFIP is applied. Hence, we conclude that even
coarse-grained SFIP can drastically increase the system’s
security.
5.2.6. Syscall Origins Analysis We perform a similar
analysis for our syscall origins in real-world applications.
We focus on analyzing the number of syscall locations
per application and for each such location, the number
of syscalls that can be executed. Special focus is put
on the number of syscalls that can be invoked through
the syscall wrapper functions as they can allow a wide
variety of syscalls. Hence, the fewer syscalls are available
through these functions, the better the security of the
system.
Results
We show the results of this evaluation in Table 3.
The average number of offsets per syscall indicates that
many syscalls are available at multiple locations. This
is most likely due to the inlining of the syscall. This
number is largely driven by the futex syscall, as locking is
required in many places of applications. Error handling is
a less driving factor in this case as these are predominantly
printed using dedicated, non-inlined functions.
The last two columns analyze the number of syscalls
that can be invoked by the respective syscall wrapper func-
tion and demonstrate a non-bijective mapping of syscalls
to syscall locations. Relatively few syscalls are available
through the syscall() function as it can be more easily
Table 2: We evaluate various properties of applications state machines, including the average number of transitions per
state, number of states in the state machine, min and max transitions. Busybox and coreutils show the averages over all
contained utilites (398 and 103 utilities, respectively).
Application
Average Transitions
#States
Min Transitions
Max Transitions
busybox
15.73
24.51
1.0
21.09
pwgen
12.42
19
1
16
muraster
17.51
41
1
33
nginx
65.55
108
1
80
coreutils
15.75
27.11
1.0
23.0
ffmpeg
48.48
56
1
51
memcached
40.6
87
1
71
mutool
32.0
61
1
46
Table 3: We evaluate various metrics for our syscall location enforcement, including the total number of functions
containing syscalls, min, max and average number of syscalls per function, total syscall offsets found, average offsets
per syscall, and the number of syscalls in the used musl syscall wrapper functions. Busybox and coreutils show the
averages over all contained utilites (398 and 103 utilities, respectively).
Application
#Functions
Min Syscalls
Max Syscalls
Avg. Syscalls
per Function
Total #Offsets
Avg #Offsets
#syscall()
#syscall_cp()
#syscall_cp_asm()
busybox
30.57
1.0
9.83
1.48
102.64
3.75
1.71
9.79
0
pwgen
28
1
3
1.25
84
4.42
0
2
0
muraster
55
1
12
1.62
193
4.6
0
4
0
nginx
105
1
24
1.53
318
3.0