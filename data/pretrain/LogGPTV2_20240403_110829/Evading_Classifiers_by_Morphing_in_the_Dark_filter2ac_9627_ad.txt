(c) Ratios of Nd by
BiRand and EvadeHC
100
80
60
40
20
0
4 6 8 10 12 14
60
40
20
0
50 60 70 80 90
60
40
20
0
8
9
10 11 12
(b) Ratios of Nt by
SeqRand and BiRand
(a) Ratios of Nd by
SeqRand and BiRand
(b) Ratios of Nt by
SeqRand and BiRand
80
60
40
20
0
4
6
8
10 12
100
80
60
40
20
0
1.5 2 2.5 3 3.5 4 4.5
(d) Ratios of Nt by
BiRand and EvadeHC
(c) Ratios of Nd by
BiRand and EvadeHC
100
80
60
40
20
0
5
10
15
(d) Ratios of Nt by
BiRand and EvadeHC
20
80
5
Figure 5: Performance comparison of SeqRand, BiRand and
EvadeHC in evading PDFrate.
Figure 6: Performance comparison of SeqRand, BiRand and
EvadeHC in evading Hidost.
We ﬁrst compare the performance of BiRand to the base-
line SeqRand. Figure 5a shows the ratios of their Nd, and
Figure 5b plots that of Nt, clearly demonstrating the eﬀec-
tiveness of the binary search mechanism employed in BiRand.
Compared to the baseline, BiRand could reduce Nd by upto
94 times.
Next, we benchmark EvadeHC against BiRand. Figure 5c
report the ratios between their numbers of detector queries,
and Figure 5d depicts ratios of their tester queries. Bi-
Rand typically demands from 2 to 4 times more detec-
tor queries, and 6 to 10 times more tester queries than
EvadeHC does. More details in numbers of blackboxes
queries required by EvadeHC and BiRand are reported in
Appendix B.
Compared to the baseline SeqRand, EvadeHC demands
upto 450 times fewer detector queries and 148 times fewer
tester queries, which translates to two orders of magnitude
faster running times. We report running times of diﬀerent
approaches in Section 5.5.
5.4 Evading Hidost Detector
In the third set of experiments, we evaluate our proposed
approaches against Hidost detector. They also achieve 100%
evasion rate for the 500 malware seeds in the dataset. For
95% of the seeds, EvadeHC found the evading samples within
11 iterations, while the other seeds need up to 13 iterations
(Figure 3b). BiRand and SeqRand, on the other hand, have
to traverse approximately 1550 paths on average to ﬁnd an
evading sample.
We report performance of SeqRand in comparison with
BiRand in Figure 6a and 6b, showing that BiRand is capable
of outperforming SeqRand by upto 92 and 12 times in term
of detector and tester queries, respectively.
Further, we also benchmark BiRand against EvadeHC by
showing the ratios between their Nd (Figures 6c) and
Nt (Figure 6d).
The results show the superiority of
EvadeHC over BiRand. In particular, for most malware seeds,
When benchmarked against
EvadeHC requires two to three times fewer detector queries
and seven to ten times fewer tester queries compared to Bi-
Rand. More details in numbers of blackboxes queries re-
quired by the two approaches are reported in Appendix C.
solution,
EvadeHC attains upto two orders of magnitude lower exe-
cution cost, both in term of number of queries to the black-
boxes and the overall running time.
5.5 Execution Cost
the baseline
Figure 7 report average running time of diﬀerent ap-
proaches in evading the two detectors. As discussed earlier,
EvadeHC and BiRand are order of magnitude more eﬃcient
than the baseline solution SeqRand.
In particular, to ﬁnd
an evading sample against Hidost, SeqRand takes on average
6.7 hours, while BiRand and EvadeHC need only 40 and 5
minutes, respectively.
It can also be seen that evading Hidost is often more ex-
pensive than evading PDFrate. It would be interesting to
investigate how the construct of Hidost provides resilience
against the attacks.
We remark that BiRand and EvadeHC are designed with a
premise that Nd is a dominating component in determining
the evasion cost, thus minimising the number of detector
queries, rather than tester queries which are computation-
ally expensive.
In situations where Nt is the dominating
component (e.g., applications for which computational cost
is the main constrain), one can easily derive a variant of
EvadeHC that applies the single binary searches with D in-
stead of T . The performance of such algorithm is arguably
similar to that of our current implementation, except for Nd
and Nt whose values would be swapped. There is no im-
pact on the accuracy, since the modiﬁcation is purely on the
algorithmic aspect.
5.6 Evading Trace Analysis
To gain a better insight on how the hill-climbing heuris-
EvadeHC
BiRand
EvadeGP
67%
52%
38%
)
%
(
e
t
a
r
n
o
i
s
a
v
E
100
80
60
40
20
0
0.45
0.4
0.35
Malware thresholds
(a) Hardened PDFrate
EvadeHC
BiRand
EvadeGP
−0.25 −0.5 −0.75
Malware thresholds
(b) Hardened Hidost
35%
26%
5%
8%
100 100%
100%
91%
)
s
(
i
i
e
m
T
g
n
n
n
u
R
e
g
a
r
e
v
A
PDFrate
Hidost
104
103
SeqRand BiRand EvadeHC
)
%
(
e
t
a
r
n
o
i
s
a
v
E
80
60
40
20
0
Figure 7: Average running time (in seconds) required to ﬁnd
an evading sample of diﬀerent approaches. The results are
taken over 5000 evasions, 10 for each of the malware seeds
in our dataset
e
c
n
a
t
s
i
d
i
i
g
n
p
p
ﬂ
-
s
u
o
i
c
i
l
a
M
PDFrate
Hidost
Malware Seed
Evading Samples
100
80
60
40
20
0
20
0
Reject-ﬂipping distance
80 100
40
60
Figure 8: Typical evading traces by EvadeHC against the
two targeted detectors. A diagonal dashed line represents
samples whose ﬂipping distances are equal. Samples chosen
in successive iterations usually move “closer” to the line.
tic works in EvadeHC, we examine the ﬂipping distances of
samples generated along typical evading traces. An evading
trace is a collection of samples that EvadeHC successively
generates in ﬁnding an evading sample for a malware seed.
Such a trace starts with an originally malicious PDF ﬁle,
and ends with an evading sample. Samples generated in
the ﬁrst iteration would have reject-ﬂipping distance larger
than malice-ﬂipping distance. EvadeHC would select promis-
ing samples from one iteration and continue to morph them
in the next iteration so that they are eventually accepted by
the detector before losing their malicious functionality.
Figure 8 depicts typical evading traces that lead to evading
samples against PDFrate and Hidost detectors. The diago-
nal line in the ﬁgure represents points where malice-ﬂipping
distance and reject-ﬂipping distance are equal, the verti-
cal line represents points at which the detector’s decision
changes from reject to accept, and the horizontal line repre-
sents points where the malicious functionality of the samples
are lost. Intuitively, the malware seeds’ representations in
term of malice-ﬂipping distance and reject-ﬂipping distance
often lie below the diagonal line, and EvadeHC morphs them
so that they move past the diagonal line, reaching the verti-
cal line (i.e., being accepted) before crossing the horizontal
line (i.e., losing the malicious functionality). It can also be
Figure 9: Evasion rates of diﬀerent approaches (displayed
on top of the bars) against hardened detectors.
seen from the ﬁgure that PDFrate is more evadable, as it is
easier to move the samples generated against PDFrate past
the diagonal compared to those that are evaluated against
Hidost.
5.7 Robustness against Hardened Detectors
In the forth experiment set, we investigate scenarios where
the detectors are hardened to render evasions more diﬃcult.
We emulate hardened PDFrate by lowering its malware
threshold down to 0.35 5, and hardened Hidost’s to −0.75.
Further, we bound the maximum number of detector queries
that could be issued in ﬁnding an evading sample to 2, 500.
If an evading sample can not found after the predeﬁned num-
ber of detector queries, we treat the seed as non-evadable.
In addition, we benchmark the two approaches BiRand and
EvadeHC against a technique by Xu et al. [35], which we
shall refer to as EvadeGP. We stress that while EvadeGP re-
lies on classiﬁcation scores assigned to the samples to guide
the search, our approaches do not assume such auxiliary
information. We operate EvadeGP under a similar set of pa-
rameters reported in [35]: population size is 48, mutation
rate is 0.1 and ﬁtness stop threshold is 0.0. We bound the
number of generations that EvadeGP traverses to 50 (instead
of 20 as in [35]), eﬀectively limiting the number of detector
queries incurred in each evasion to 2, 500. In addition, we
5Authors of PDFrate [28] reported that adjusting the mal-
ware threshold from 0.2 to 0.8 has negligible eﬀect on accu-
racy.
e
c
n
a
t
s
i
d
i
i
g
n
p
p
ﬂ
-
e