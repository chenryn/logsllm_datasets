### 5.3 Performance Comparison of SeqRand, BiRand, and EvadeHC in Evading PDFrate

We first compare the performance of BiRand to the baseline SeqRand. Figure 5a shows the ratios of their \( N_d \) (detector queries), and Figure 5b plots the ratios of their \( N_t \) (tester queries). These figures clearly demonstrate the effectiveness of the binary search mechanism employed in BiRand. Compared to the baseline, BiRand can reduce \( N_d \) by up to 94 times.

Next, we benchmark EvadeHC against BiRand. Figure 5c reports the ratios between their numbers of detector queries, and Figure 5d depicts the ratios of their tester queries. BiRand typically demands 2 to 4 times more detector queries and 6 to 10 times more tester queries than EvadeHC. More details on the number of blackbox queries required by EvadeHC and BiRand are provided in Appendix B.

Compared to the baseline SeqRand, EvadeHC demands up to 450 times fewer detector queries and 148 times fewer tester queries, which translates to two orders of magnitude faster running times. We report the running times of different approaches in Section 5.5.

### 5.4 Evading Hidost Detector

In the third set of experiments, we evaluate our proposed approaches against the Hidost detector. All three methods achieve a 100% evasion rate for the 500 malware seeds in the dataset. For 95% of the seeds, EvadeHC found the evading samples within 11 iterations, while the remaining seeds required up to 13 iterations (Figure 3b). In contrast, BiRand and SeqRand had to traverse approximately 1550 paths on average to find an evading sample.

Figure 6a and 6b compare the performance of SeqRand with BiRand, showing that BiRand outperforms SeqRand by up to 92 and 12 times in terms of detector and tester queries, respectively. Further, we benchmark BiRand against EvadeHC by showing the ratios between their \( N_d \) (Figure 6c) and \( N_t \) (Figure 6d). The results show the superiority of EvadeHC over BiRand. Specifically, EvadeHC requires two to three times fewer detector queries and seven to ten times fewer tester queries compared to BiRand. More details on the number of blackbox queries required by the two approaches are provided in Appendix C.

EvadeHC achieves up to two orders of magnitude lower execution cost, both in terms of the number of queries to the blackboxes and the overall running time.

### 5.5 Execution Cost

Figure 7 reports the average running time of different approaches in evading the two detectors. As discussed earlier, EvadeHC and BiRand are orders of magnitude more efficient than the baseline solution SeqRand. Specifically, to find an evading sample against Hidost, SeqRand takes on average 6.7 hours, while BiRand and EvadeHC need only 40 and 5 minutes, respectively.

It is also evident that evading Hidost is generally more expensive than evading PDFrate. Investigating how the construction of Hidost provides resilience against attacks would be an interesting future direction.

We note that BiRand and EvadeHC are designed with the premise that \( N_d \) is the dominant component in determining the evasion cost, thus minimizing the number of detector queries rather than tester queries, which are computationally expensive. In scenarios where \( N_t \) is the dominant component (e.g., applications for which computational cost is the main constraint), one can easily derive a variant of EvadeHC that applies single binary searches with \( D \) instead of \( T \). The performance of such an algorithm would be similar to our current implementation, except for the values of \( N_d \) and \( N_t \), which would be swapped. There is no impact on accuracy, as the modification is purely algorithmic.

### 5.6 Evading Trace Analysis

To gain better insight into how the hill-climbing heuristic works in EvadeHC, we examine the flipping distances of samples generated along typical evading traces. An evading trace is a collection of samples that EvadeHC successively generates in finding an evading sample for a malware seed. Such a trace starts with an originally malicious PDF file and ends with an evading sample. Samples generated in the first iteration have a reject-flipping distance larger than the malice-flipping distance. EvadeHC selects promising samples from one iteration and continues to morph them in the next iteration so that they are eventually accepted by the detector before losing their malicious functionality.

Figure 8 depicts typical evading traces that lead to evading samples against the PDFrate and Hidost detectors. The diagonal line in the figure represents points where the malice-flipping distance and reject-flipping distance are equal. The vertical line represents points at which the detector's decision changes from reject to accept, and the horizontal line represents points where the malicious functionality of the samples is lost. Intuitively, the malware seeds' representations in terms of malice-flipping distance and reject-flipping distance often lie below the diagonal line, and EvadeHC morphs them so that they move past the diagonal line, reaching the vertical line (i.e., being accepted) before crossing the horizontal line (i.e., losing the malicious functionality). It can also be seen from the figure that PDFrate is more evadable, as it is easier to move the samples generated against PDFrate past the diagonal compared to those evaluated against Hidost.

### 5.7 Robustness Against Hardened Detectors

In the fourth set of experiments, we investigate scenarios where the detectors are hardened to make evasions more difficult. We emulate hardened PDFrate by lowering its malware threshold to 0.35 and hardened Hidost's to -0.75. Additionally, we bound the maximum number of detector queries that can be issued in finding an evading sample to 2,500. If an evading sample cannot be found after the predefined number of detector queries, we treat the seed as non-evadable.

We also benchmark the two approaches, BiRand and EvadeHC, against a technique by Xu et al. [35], referred to as EvadeGP. While EvadeGP relies on classification scores assigned to the samples to guide the search, our approaches do not assume such auxiliary information. We operate EvadeGP under a similar set of parameters reported in [35]: population size is 48, mutation rate is 0.1, and fitness stop threshold is 0.0. We bound the number of generations that EvadeGP traverses to 50 (instead of 20 as in [35]), effectively limiting the number of detector queries incurred in each evasion to 2,500. 

The authors of PDFrate [28] reported that adjusting the malware threshold from 0.2 to 0.8 has negligible effect on accuracy.