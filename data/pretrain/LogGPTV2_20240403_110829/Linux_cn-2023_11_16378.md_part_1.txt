---
author: Julia Evans
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 1598
date: '2023-11-14 10:32:40'
editorchoice: false
excerpt: 我们将谈论我原来以为的遴选操作（即应用一个补丁），这个理解为何不准确，以及实际上它是如何执行的（进行“三路合并”）。
fromurl: https://jvns.ca/blog/2023/11/10/how-cherry-pick-and-revert-work/
id: 16378
islctt: true
largepic: /data/attachment/album/202311/14/103134uddjt7ljl8dbbdj2.png
permalink: /article-16378-1.html
pic: /data/attachment/album/202311/14/103134uddjt7ljl8dbbdj2.png.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 我们将谈论我原来以为的遴选操作（即应用一个补丁），这个理解为何不准确，以及实际上它是如何执行的（进行“三路合并”）。
tags:
- Git
- 遴选
thumb: false
title: Git 的遴选和撤销操作是如何利用三路合并的
titlepic: true
translator: ChatGPT
updated: '2023-11-14 10:32:40'
---
![](/data/attachment/album/202311/14/103134uddjt7ljl8dbbdj2.png)
大家好！几天前，我尝试向其他人解释 Git 遴选（`git cherry-pick`）的工作原理，结果发现自己反而更混淆了。
我原先以为 Git 遴选是简单地应用一个补丁，但当我真正这样尝试时，却未能成功！
因此，接下来我们将谈论我原来以为的遴选操作（即应用一个补丁），这个理解为何不准确，以及实际上它是如何执行的（进行“三路合并”）。
尽管本文的内容有些深入，但你并不需要全部理解才能有效地使用 Git。不过，如果你（和我一样）对 Git 的内部运作感到好奇，那就跟我一起深入探讨一下吧！
### 遴选操作并不只是应用一个补丁
我先前理解的 `git cherry-pick COMMIT_ID` 的步骤如下：
* 首先是计算 `COMMIT_ID` 的差异，就如同执行 `git show COMMIT_ID --patch > out.patch` 这个命令
* 然后是将补丁应用到当前分支，就如同执行 `git apply out.patch` 这个命令
在我们详细讨论之前，我想指出的是，虽然大部分情况下这个模型是正确的，如果这是你的认知模型，那就没有问题。但是在一些细微的地方，它可能会错，我觉得这个疑惑挺有意思的，所以我们来看看它究竟是如何运作的。
如果我在存在合并冲突的情况下尝试进行“计算差异并应用补丁”的操作，下面我们就看看具体会发生什么情况：
```
$ git show 10e96e46 --patch > out.patch
$ git apply out.patch
error: patch failed: content/post/2023-07-28-why-is-dns-still-hard-to-learn-.markdown:17
error: content/post/2023-07-28-why-is-dns-still-hard-to-learn-.markdown: patch does not apply
```
这一过程无法成功完成，它并未提供任何解决冲突或处理问题的方案。
而真正运行 `git cherry-pick` 时的实际情况却大为不同，我遭遇到了一处合并冲突:
```
$ git cherry-pick 10e96e46
error: could not apply 10e96e46... wip
hint: After resolving the conflicts, mark them with
hint: "git add/rm ", then run
hint: "git cherry-pick --continue".
```
因此，看起来 “Git 正在应用一个补丁”这样的理解方式并不十分准确。但这里的错误信息确实标明了 “无法**应用** 10e96e46”，这么看来，这种理解又不完全是错的。这到底是怎么回事呢？
### 那么，遴选到底是怎么执行的呢？
我深入研究了 Git 的源代码，主要是想了解 `cherry-pick` 是如何工作的，最终我找到了 [这一行代码](https://github.com/git/git/blob/dadef801b365989099a9929e995589e455c51fed/sequencer.c#L2353-L2358)：
```
res = do_recursive_merge(r, base, next, base_label, next_label, &head, &msgbuf, opts);
```
所以，遴选实际上就是一种……合并操作？这有些出乎意料。那具体都合并了什么内容？如何执行这个合并操作的呢？
我意识到我对 Git 的合并操作并不是特别理解，于是我上网搜索了一下。结果发现 Git 实际上采用了一种被称为 “三路合并” 的合并方式。那这到底是什么含义呢？
### Git 的合并策略：三路合并
假设我要合并下面两个文件，我们将其分别命名为 `v1.py` 和 `v2.py`。
```
def greet():
    greeting = "hello"
    name = "julia"
    return greeting + " " + name
```
```
def say_hello():
    greeting = "hello"
    name = "aanya"
    return greeting + " " + name
```
在这两个文件间，存在两处不同：
* `def greet()` 和 `def say_hello`
* `name = "julia"` 和 `name = "aanya"`
我们应该选择哪个呢？看起来好像不可能有答案！
不过，如果我告诉你，原始的函数（我们称之为 `base.py`）是这样的：
```
def say_hello():
    greeting = "hello"
    name = "julia"
    return greeting + " " + name
```
一切似乎变得清晰许多！在这个基础上，`v1` 将函数的名字更改为 `greet`，`v2` 将 `name = "aanya"`。因此，合并时，我们应该同时做出这两处改变：
```
def greet():
    greeting = "hello"
    name = "aanya"
    return greeting + " " + name
```
我们可以命令 Git 使用 `git merge-file` 来完成这次合并，结果正是我们预期的：它选择了 `def greet()` 和 `name = "aanya"`。
```
$ git merge-file v1.py base.py v2.py -p
def greet():
    greeting = "hello"
    name = "aanya"
    return greeting + " " + name⏎
```
这种将两个文件与其原始版本进行合并的方式，被称为 **三路合并**。
如果你想在线上试一试，我在 [jvns.ca/3-way-merge/](https://jvns.ca/3-way-merge/) 创建了一个小实验场。不过我只是草草制作，所以可能对移动端并不友好。
### Git 合并的是更改，而非文件
我对三路合并的理解是 —— Git 合并的是**更改**，而不是文件。我们对同一个文件做出两种不同的更改，Git 试图以合理的方式将这两种更改结合到一起。当两个更改都对同一行进行操作时，Git 可能会遇到困难，此时就会产生合并冲突。
Git 也可以合并超过两处的更改：你可以对同一文件有多达 8 处不同的更改，Git 会尝试将所有更改协调一致。这被称为八爪鱼合并，但除此之外我对其并不了解，因为我从未执行过这样的操作。
### Git 如何使用三路合并来应用补丁
接下来，让我们进入到一个有些出乎意料的情境！当我们讨论 Git “应用补丁”（如在变基 —— `rebase`、撤销 —— `revert` 或遴选 —— `cherry-pick` 中所做的）时，其实并非是生成一个补丁文件并应用它。相反，实际执行的是一次三路合并。
下面是如何将提交 `X` 作为补丁应用到你当前的提交，并与之前的 `v1`、`v2` 和 `base` 设置相对应：
1. **在你当前提交中**，文件的版本是 `v1`。
2. **在提交 X 之前**，文件的版本是 `base`。
3. **在提交 X 中**，文件的版本是 `v2`。