Each application is responsible for setting policies and associat-
ing requests to pseudonyms. We dive into the policies and application-
level concerns for one very common application in Section 5: web
browsers. The policies of other applications as well as the manner
in which they protect against information leakage are beyond the
scope of this work.
The interface we provide to applications is simply a modiﬁcation
to the socket interface. We add a function called allocpseudonym()
that takes as a parameter an integer representing the number of de-
sired pseudonyms. The function returns an array of sockaddr_in6
structures with information about each pseudonym’s address. Sim-
ilarly, we also provide freepseudonym() that applications use to
release an address back into the pool of available pseudonyms. IP
addresses can be leased/refreshed for a period of time, but there is
maximum number of held addresses for both machines and appli-
cations. An example usage is listed in Figure 5.
A default pseudonym exists for backward compatibility and ease
of programming for applications that do not require unlinkabililty.
Also note that multiple applications can use the same pseudonym
if they wish to associate with each other. For example, a stand-
alone banking application may wish to associate itself with the
pseudonym that the customer uses inside the browser to access its
website.
4.2 Operating System Layer
The operating system maintains the set of addresses and acts as a
mediator between the DHCP server and the application. The num-
ber of addresses maintained is a preconﬁgured value that depends
on the memory and processing power limitations of the machine in
question. That being said, microbenchmarks have shown that, with
minor modiﬁcations, modern operating systems can handle thou-
sands of addresses with negligible penalties (see Section 7.1).
The OS, like the application and network layer, can also be a
source of linking information. DNS lookups and caching are an
example of this problem, and for this reason, pseudonyms do not
share DNS caches. CNN can point a user to a particular Akamai
server and set a long TTL, but it will only be cached for that par-
ticular pseudonym. Lookups should be done using a DNS resolver
that could be accessed by any node in the mixing network. For ex-
ample, if Comcast is mixing addresses for its customers, then (a)
customers should be able to use any Comcast DNS resolver, (b) the
resolvers should be indistinguishable, or (c) the customers should
use a third-party resolver (e.g., Google, OpenDNS).
5. A PSEUDONYMOUS WEB BROWSER
Any Internet communication can potentially be used to track
users, but in this paper, we concentrate on a particularly common
avenue of attack: web requests from browsers. For every applica-
tion, we need to answer two questions: (a) what is contained within
a pseudonym and (b) how is trafﬁc classiﬁed into pseudonyms. Be-
low, we discuss these issues in the context of web browsers.
Components: Within a web browser, tracking of users is of-
ten done through explicit mechanisms like browser cookies, Flash
LSOs, or other forms of local storage [23]. Thus, each pseudonym
needs to have separate storage for these entities in addition to us-
ing separate IP addresses. There is also plenty of implicit infor-
mation that can be used to correlate user behavior [7, 27], and the
browser must manage all of these pieces of information as part of a
pseudonym.
Policies: Recall that a pseudonym represents a set of linkable
activities. It is possible to provide users with the ability to explic-
itly specify a pseudonym for each web request manually; however,
296Privacy Protection Mechanism
Trivial
3rd-party blocking
Per browsing session: opening a new tab or typing
new URL makes a new session
Per 1st-party (Milk [25]): force 3rd-party to set
different cookies for each 1st-party
Per tab (CookiePie [2]): Use different cookies for
each tab
Per page: Use different cookies for each page
Private browsing
Per request: No activity should be correlated
Time-based (TorButton [21])
Policy
Every request uses the same pseudonym
For 3rd-party request, use random pseudonym
Pseudonym per tab and new page (no referer)
Pseudonym ID to Use
default
3rd-party?requestId:default
tabId.(sum += referer?0:1)
Pseudonym per 1st-party domain
domain(tabUrl)
Pseudonym per tab
Pseudonym per page
New pseudonym for private browsing window
Pseudonym per request
Allocate a new psuedonym every 10 minutes
tabId
tabUrl
private?windowId:default
requestId
Time.Now / 10 minutes
Table 2: Example pseudonym policies. 1st column: name and description for the privacy protection mechanism. 2nd column:
implementation with pseudonym. 3rd column: the policy’s pseudonym ID mapping.
In our system, pseudonyms are assigned to requests based on in-
formation about the request as well as the state of the browser (e.g.,
unique tab ID, tab URL, unique request ID, whether private brows-
ing mode was enabled, whether the request targets a third party
website, etc.). Speciﬁcally, policies deﬁne a mapping from requests
to pseudonym IDs, where IDs are unique, arbitrary strings of char-
acters. A pseudonym per-tab policy, for instance, might simply use
the tab ID as the pseudonym ID. Similarly, a Chrome-like private
browsing policy might use the window ID of the request as the
pseudonym ID for private requests, and use a default pseudonym
ID (see Section 4.3) for all other requests.
This policy framework is expressive enough to implement many
of the recent privacy protection mechanisms that have been pro-
posed to defend against web tracking. Most of them focus on sep-
arating browser cookies or blocking speciﬁc requests, but we are
able to extend these mechanisms into pseudonym policies, which
cover both IP addresses and cookie stores. Table 2 shows how sev-
eral privacy protection mechanisms can be implemented via pseu-
donym policies.
Users may also combine policies (e.g., a per-tab policy with
third-party blocking). More complex policies, such as one that em-
ulates ShareMeNot, can be implemented with a toggle button in-
dicating whether third-party authentication is allowed (if allowed,
we use the default pseudonym, otherwise a random ID is chosen).
Even more complex policies involving arbitrary relationships, like
search term keyword clustering, can be implemented as well, but
the point is that our system is powerful enough and expressive
enough to support a vast array of policies.
6.
IMPLEMENTATION FOR WEB
SERS
BROWSER
We have implemented an approximation of our ideal design that
enables pseudonyms for web browsing in today’s Internet. We are
able to provide pseudonyms without modiﬁcation to the browser,
operating system, or network.
Ideally, these layers would have
support for pseudonym allocation and usage, and IPv6 would be
available without tunneling through a broker, but our system pro-
vides a proof of concept and path to partial adoption. Note that IP
address separation across pseudonyms only works when the desti-
nation server is using IPv6 addresses; however, cookie separation
works even with IPv4 servers.
Our prototype implementation consists of two main components:
a gateway service that allocates/translates IPv6 addresses and a
browser extension that controls pseudonyms and their usage. The
Figure 6: An example of pseudonym policies. Here, the website
A.com has a Facebook widget for registering likes. A web re-
quest to A.com results in a third-party web access to Facebook,
which would contain information regarding the original page.
this quickly becomes infeasible. Therefore, we provide policies to
allow the system to assign these pseudonyms automatically.
To a ﬁrst approximation, there are two properties that charac-
terize the usefulness of a particular policy: website functionality
and user privacy. These properties are subjective and sometimes at
odds with each other. While most users probably expect logins to
still work, some may be willing to trade recommendation system
accuracy or targeted ads for more privacy, and some might not. In
our system, we intend to provide a policy framework that is ﬂexible
and expressive enough to allow for a broad range of policies.
To illustrate how a typical policy might work, Figure 6 shows an
example scenario where the Facebook social widget is embedded
on a web page, A.com, and each of the three resulting requests is
assigned some pseudonym (i.e., P1, P2, or PF). Without any pri-
vacy protection mechanism, pseudonyms P1, P2 and PF are the
same. The other extreme is that every request uses a different
pseudonym (P1 (cid:54)= P2 (cid:54)= PF). We can also imagine a policy that
blocks third-party tracking (P1 = PF (cid:54)= P2) and a policy that assigns
a pseudonym per ﬁrst-party site (P1 = P2 (cid:54)= PF). In the latter three
cases, Facebook cannot track the user’s visits to A.com, but they do
not allow Facebook’s Like button to function either. Note that in
the remaining case (P1 (cid:54)= P2 = PF), Facebook can track the user,
as it knows the Like button request is coming from A.com. Each
policy exhibits a different point in the functionality-privacy trade-
off, although some combinations (e.g., P1 = PF (cid:54)= P2 by default,
but link PF and P2 when the user explicitly intends it, as shown in
ShareMeNot [23]) allow users to have both.
LikeA.comFacebook.comThis is for A.comP1P2PFFacebook.comA.com297does not affect the unlinkability of any pseudonyms since the tun-
nel brokers only see that trafﬁc is coming from our gateway servers.
Thus, each client effectively has a single private address assigned
by its ISP, and many public IPv6 addresses assigned by our gate-
way servers. In the future, widespread IPv6 deployment will allow
us to circumvent the tunnel broker and potentially increase perfor-
mance.
6.2 Gateway
Our system utilizes a gateway service that handles allocation
of addresses and laundering of packets so that individual clients
can use our system without network support. Gateways are imple-
mented as transparent HTTP proxies running on Linux machines.
Clients can potentially use multiple gateways to send trafﬁc. Each
of these gateways controls a /64 subnet of IPv6 addresses assigned
through an IPv6 tunnel broker as explained in Section 6.1, allow-
ing us to dole out and mix trafﬁc over an address space of 264
addresses—much larger than the entire IPv4 address space. The
gateway has the following responsibilities:
Allocation/Deallocation: Gateways run an HTTP web server
to handle IP allocation/deallocation requests that are generated by
the browser extension. The addresses are assigned as they are in our
ideal design—the public addresses given to each user are efﬁciently
mappable to the private address and vice-versa without having an
easily discernible pattern. When a client requests an IP allocation,
the gateway creates a set of base addresses using its own network
preﬁx and the IPv4 address of the requester as host ID. It then gen-
erates encrypted addresses as detailed in Section 4.1 before sending
the list of IP addresses back to the client. We implemented Triple
DES (TDES) using OpenSSL to perform 64-bit block encryption on
the non-network-preﬁx portion of the address.
Forwarding: After allocation is complete, clients are responsi-
ble for crafting web requests to include the encrypted IPv6 address
that is to be used for that connection, which it does by adding a
string to the header’s user-agent ﬁeld. When the gateway re-
ceives requests, it reads, decrypts, and removes the IPv6 address
from the header and veriﬁes that the client is allowed to use the
address.
If the user’s identiﬁer matches, it checks whether the
pseudonym is active for the particular user. (The state of pseudonym
IDs is stored in a bit vector.) If the address is valid and active, it
then sets up a connection to the endpoint with a socket bound to the
speciﬁed IP address and uses the connection to forward requests.
As described above, web requests arrive at the gateway with a
domain name, allowing the gateway to ensure that all hosts use the
same DNS resolver and mappings.
6.3 Browser Extension
We have built a Chrome browser extension to implement the
client-side component of our system, but the same functionality
can be implemented in other browsers that have an extension archi-
tecture (e.g., Firefox). The architecture and layout of the extension
is illustrated in Figure 8. The extension is responsible for managing
pseudonyms and assigning them to requests according to policies.
It does this by separating cookies on a per-pseudonym basis, in-
tercepting every request made from the web browser, and adding
a tag to indicate to the gateway which IPv6 address to use. These
functionalities are described in more detail below:
Policy Speciﬁcation: Policies are deﬁned along with a map-
ping function that is used to deﬁne which pseudonym to use for
each request. As a starting point, we implemented each of the
Figure 7: Overview of the Implementation.
gateway service is implemented as a stand-alone proxy running
on Linux, and the browser extension is made for the Chrome web
browser. The overall architecture is illustrated in Figure 7. These
components work together to allow each pseudonym to have its
own set of cross-layer features that include:
• IP addresses: The external IP address for each connection is
explicitly indicated by the extension in the header of the HTTP
request. The extension allocates/deallocates IPv6 addresses by
communicating with the gateway.
• Name resolution: Requests for web pages arrive at the gateway
with domain names rather than IPs. Name resolution takes place
on the gateway instead of the local machine so DNS mappings
cannot be used to track hosts.
• Cookie/LocalStorage: Sets and gets of local storage are inter-
cepted and modiﬁed by the extension so that cookies for separate
pseudonyms are isolated from each other.
• Hardware specs, system information and browser details:
Browser details like the user-agent or fonts can be manually
set to values that are generic so as to not identify the user. Users
can tell how unique their browser details are by utilizing ser-
vices like Panopticlick [7]. Ideally, this tool would be able to
suggest values, provide per-gateway statistics, and potentially
utilize per-pseudonym value changes, but this is left for future
work.
Each of these pieces of identifying information needs to be con-
sistent within a pseudonym, but crafted such that they are unlink-
able to each other. Note that we consider higher-level leakage of
information such as form data orthogonal.
6.1 Utilizing IPv6 Without Modiﬁcation to the
Network
Our implementation is designed to be deployable immediately
even though we rely on IPv6 addresses. While actual use of IPv6 is
not yet common—only about 14.6% of ASes are running IPv64—
the support is there in both OSes and many of the larger services.
Because of these limitations, trafﬁc from our system is tunneled
through an IPv6 tunnel broker called Hurricane Electric.5 This
4http://bgp.he.net/ipv6-progress-report.cgi as of Oct.,
2012.
5http://tunnelbroker.net. There are also other tunnel brokers
like SixXS, http://sixxs.net.
Searchhttp://domain.comWeb Page TitleExtensionGatewayServiceIPv4 headerPayload (w/ pseudonym info)IPv4' headerIPv6 headerPayloadIPv6 Tunnel BrokerIPv6 InternetWebServerIPv6 headerPayload2981: document.__deﬁneSetter__ (‘cookie’, set_cookie);
2: document.__deﬁneGetter__ (‘cookie’, get_cookie);
function set_cookie(rawCookie)
1: tuple = rawCookie.split(‘=’)
2: remove_cookie(pseudonymID+ ‘_’ +tuple[0])
3: __cookie+ = pseudonymID+ ‘_’ +value+ ‘;’
function get_cookie()
1: ret = “”, cookies = __cookie.split(‘;’)
2: for all c in cookies do
3:
4:
5:
6:
end if
7:
8: end for
9: return ret
noPIDcookie = c.substring(c.indexOf(‘_’)+1)
ret+ = noPIDcookie+ ‘;’
PID = c.substring(0, c.indexOf(‘_’))