proc DeleteFromView (nick)(
global tail0pt8
if [$nick = **){
return
set newList （)
if ![info exists tailopts{winsl]
return
foreach iten $tailopts(wins){
if（Snick![lindex Sitem 1]}{
lappend newList $item
1
set tail0pts[wins) SnewList
UpdateOptionMenu
1
PositionWindow例程负责把一个顶层对话框居中摆放在它的父窗口里。它负责把对话框摆放
在主窗口里，不让它跑到显示器屏幕的其他角落去。
Positionwindow
Position the toplevel windcw centered to its parent.
Argumenta:
toplevel window.
Results:
Positions the window
proc PositionWindow [w}{
set paren [winfo parent Sw]
set parenConf [wm geometry Sparen]
wm iconify Sw
set parenConf Isplit $parenConf{+
set winConf[split [wm geometry Sw]{-x}]
-x}]
[winfo reqwidth Sw]/2]
set Y [expr [1index SparenConf 3]+[1index $parenConf 1]/2 -
$+XS+M$1b
[winfo reqheigh Sw]/2]
wm deiconify Sw
UpdateOptionMenu命令用当前活跃的快捷键名单刷新那个快捷键选项菜单素材。如下所示：
UpdateOptionMenu --
Arguments:
加入java编程群：524621833
---
## Page 571
第16章X窗口系统的程序设计
553
ults
proc UpdateOptionMenu (){
global tailopts curNick viewOptMenu
SviewOptMenu delete 0end
if :[info exasts tailoptstwins)]{
return
if {$tailopts{wins) s ()){
return
set curNick **
foreach itex Stail0pts(wins）(
SviewOptMenu add conmand -1abel [1index Sitem 1]-command*catch Stop:TailFi
set curNick (lindex Sitem 1]
最后，我们建立起主窗口。如下所示：
v withdraw
toplevel .t
Bui1dTai1Gui .t
当你运行这个程序的时候，应该看到类似于图16-23这样的窗口。
ElE
Hoip
TaFFlN
Slop
/us/ahar/app/udio/gmixdesktop
/usc/ar/app/aodio/gtcd.desktop
ur/shar/apps/Systen
/uat/aare/appa/Systa/session.deektop
/ar/sbare/sps/systa/gm.desktop
har/sbara/aps/syat/ditectazy
/ua/aa/opa/hp1icatione/etacagedetop
图16-23
加入jaVva编程群：524621833
---
## Page 572
554Linux程序设计
16.8.1国际化
对Tk素材我们已经讲得不少了、但还是有许多论题没有涉及到：其中之一就是所调的国际
化问题。Tcl8.1增加了许多新的功能，比如Unicode支持、创建和访问消息日录的函数（这样你
就可以把你所有对话框的文字保存为多种语言）对不同语言编码方案和通用性字符串处理的支
持等。从TcI8.1开始，TeI对字符串进行处理的所有函数都能接受和返回按照UTF-8格式来编码
的Unicode字符中了。但因为Unicode/UTF-8编码工作是在Tcl内部实现的，所以从脚本里是看不
出Tcl8.0和Tcl8.1在字符串处理方面有什么不同。事实上.Tcl8.1里的所有命令都能够无缝地处
理Unicode了、举个例子，你可以把一个按shiftjis编码方案编码的文件读到Tcl里，Tcl的读命令
会把shiftjis编码方案自动地转换为它自己的UTF-8编码方案。请看下面这段代码：
Set {J[open Sfil +]
set. Jstsing {read sfd]elosc S[d
close Cfd
更进一步，Tcl8.1里新实现的规则表达式解决方案能够全面处理Unicode字符
因为Tcl里的所有字符串都是按Unicode编码的了，Tk素材在以特定字体显示字符时也就能白
动地做好必要的编码方案转换工作了。请看下面这个小代码段：
set st*\u592a\u9177*
button.b·text $str
 pack .b
它将把按钮标题签上的“Tel显示为中文字样-一当然你必须安装有正确的x字体才能看到
对应的中文字。如果你为素材设定的主字体里没有你想显示的某个特定Unicode字符的字模，Tk
会尽量找出一个能够显示它的字体来。只要有可能、Tk就会尽量找出一个与素材的主字体各方
面特性（比如宽窄、斜度等等）匹配最多的字体来。一且Tk找到了这样的字体，它就会用新字
体把那个字符显示出来。换句话说，素材使用主字体来显示所有它能够显示的字符，只有在必
要是才使用后备字体。
国际化是一个很引人人胜的话题，但我们这一章里没有足够的篇幅了。下面这个站点是了
解Tcl/Tk的国际化问题的好地方：
http: //ww,seriptics,com/services/support/howto/118n.html
16.8.2业界动态
只要你在使用Tk（包括man使用手册页）时遇到了麻烦，就总是可以去“TkWidgetTour”
（Tk素材之旅）看看，那里面有各种Tk素材用法的示例。蔽人“widget”就可以运行这个程序
用Tk编写的比较著名的软件程序包括Xadmin、Exmh、ical、TkMan、TkElm、TkWWw和
SurfIT等。TkWWW是一个HTML编辑器，你可以用它来制作3W万维网上的主页；SurfIT是-一个
用Tel编写出来的Web浏览器，它具备从Web主页上直接下载和运行Tcl程序的能力。当然，如果
对方是个你不熟悉的主机，这就会是一个有危险性的功能！ical是一个基于x的日历程序。
加入jaVa编程群：524621833
---
## Page 573
第16章X窗口系统的程序设计
555
在我们编写本章的时候，在Tk世界里还有许多事情正在发生，所以我们下面就对几个比较
值得注意的项目进行简单的介绍。
1. Tix
Tix用超过40个专业的Motif风格的素材对Tk进行了扩展。Tix素材的功能十分强大，甚至能
够直接支持Motif 2.0的运行。Tix的网址是http：//www.xpi.com/tix/。
2. [incr Tk]
[incrTel]和[incrTk]构成了一个面向对象的Tcl/Tk扩展。它的3.0版本最近刚刚发布，你可以
在Web主页htup：//www.teltk.com/itcl/上找到它们]。
[incrTcl]提供了建立大型Tcl/Tk应用程序所额外需要的语言支持。它引入了对象的记号、
把对象做为一个应用软件的建筑基石。每个对象都是一个封装起来的数据包，它带有一系列过
程一或者叫做“方法”，对象的处理将由这些方法来实现。对象被组织为“类”（class），同一
个类里的对象都有相同的特性；面类又可以彼此继承各自的功能。这种面向对象的做法在基本
的变量/过程等元素上增加了新的组织功能，使最终得到的代码既易于阅读和理解又易于管理和
[incrTk]是一个使用[incrTel]对象系统构建复合素材的框架结构。复合素材是高端的紧材、
对待。复合素材本身是用基本Tk素材构建出来的复合物，构建时不再需要使用C语言代码。从
使用效果上看，复合素材与Tk素材的外观和行为都是一样的，但用在程序设计当中就简单的
多了。
3.BLT
BLT-2.1工具包用许多新素材扩展了TK，如可以用来绘制线图和直方图的blt_graph紫材、
blt_htext超文本素材，以及用于后台执行情况的各种素材等。BLT工具包的主页地址是：http:
//www.tcltk.com/blt
我们最后要说的是，comp.lang.tci和comp.lang.tcl.announce是提出Tk问题的最佳场所。那里
的人们都是很友好的，肯定会有人愿意解答你的问题。但在把你的问题张贴到comp.lang.tcl上之
前，最好先查查它的常见问题答疑（FAQ）目录，这是新闻组里的定期稿件。
在Tel的新家，Scriptics公司的Web主页htp://www.scriptics.com/resource上你可以找到大量
的Tk资源。
我们对Tk的学习到这里差不多就结束了，但对Tk来说，这还只是个简单的开头面已，因为
JohnOutsterhout把Tcl/Tk设计为一种可扩展和可嵌入的工具。Tcl命令和Tk素材都是用C语言编
写的，你可以编写出自己的东西并把它们添加到其中，也可以坐享因特网上的素材扩展。这是
一个高级论题，因为篇幅的原因我们就不再这里讨论它了：但这将是你从自己的图形化Tel/Tk前
端访问C语言程序的手段之一。具体内容请参考JohnOutsterhout的论著。最后，祝大家学习和使
用Tcl/Tk输快！
16.9本章总结
我们在这一章里对X窗口程序设计进行走马观花式的简单学习。
加入jaVa编程群：524621833
---
## Page 574
556
Linur程序设计
在介绍了X窗口的基础知识以及它不同的实现方法之后，我们对Tk进行了学习，它是对第15
章学习的Tci语言的补充。利用Tk丰富的素材库，我们可以为我们的应用程序快速开发出GUI前
端来。
我们将在下一章里学习一种用C语言设计图形化软件程序的新方法一一GNOME开发工具包
GTK+。
加入jaVa编程群：524621833
---
## Page 575
第17章使用GTK+进行GNOME程序设计
我们将在这一章里向大家介绍Linux世界令人激动的软件开发成果：GNOME。GNOME的意
思是“GNU NetworkObject Model Environment”（GNU网络对象模型环境），虽然它的名字比较
长.但这个软件项目的目的却很简单一那就是实现一个用户友好的、功能强大的用户和开发桌
面环境、而这一环境又完全是以免费的开放源代码软件为基础的。因为篇幅上的限制，大家会
发现这一章介绍的内容都不是很深人，但你们可以把下面这些论题做为GNOME程序设计的出发
点，然后利用在线文档微进一步的学习。我们将在这一章里讨论的问题有：
·GNOME的简单介绍。
·GNOME的体系结构。
·GNOME桌面。
·GTK+素材库。
·GNOME素材。
·一个GNOME软件。
GNOME项目的主页是www.gnome.org，大家可以在那里找到最新的新闻，查阅完整的在线
文档，并且能够找到大量的GNOME程序设计参考资料。
RedHat和Debian两家的新版Linux发行版本目前安装的缺省桌面系统就是GNOME，但你可
源代码。
17.1GNOME简介
在提到GNOME的时候，最困难的可能就是说清楚它到底是什么和它能干些什么。对普通用
户来说，把GNOME看做是各种桌面工具的一个集合可能更好理解一些。但正像它名字说的那样，
GNOME既是一个桌面，也是一个完整的程序设计环境，面它的内涵远远超过一个吸引人的用户
操作界面。
GNOME是底层X窗口系统和高层窗口管理器软件中间的一个程序设计界面，它向GUI程序
员提供了丰富的功能强大的开发工具，面这些工具是传统意义上的Linux所缺乏的。因为
GNOME只是增加了资源，所以即使程序不是为GNOME开发的，一般也不存在兼容性方面的问
题。特别值得一提的是，GNOME对UNIX程序员在以下四个领域遇到的问题提出了很好的解决
方案：
·在编写应用程序时，缺乏用来保持用户操作界面统一性的集成性框架。
·缺乏应用程序间的通信手段。
·缺乏适用于打印操作的标准。
加入iaVa编程群：524621833
---
## Page 576
558Linux程序设计
·缺乏适用于会话管理的标准。
在开始学习如何利用GNOME解决这些问题之前，我们先米看看这个项目的发展历史。
GNOME项日开始于1997年的秋季，主要发起人员有：PeterMattis和SpencerKimball（他们
两人是“GNUImageManipulationProgram”即GIMP软件的开发人员）、自由软件基金会（Free
Software Foundation 简称FSF）的Richard Stallman以及Red Hat公司的Erik Troan和Mark Ewing：
GNOME的原动力最初起源于对另一个Linux桌面环境项目KDE许可证问题的不满。KDE
（KDesktopEnvironment，K桌面环境）是以TrollTech公司开发的一个名为Qt的素材开发工具包
为基础的。Qt不采用GPL许可证制度，许多人认为使用一个不遵守GPL游戏规则的工具包来开发
一个Linux桌面对Linux来说是一种倒退，因为其传统是要在非专利的、自由的（意思是“你可
以按自已的意愿来使用软件”）开放源代码软件基础上进行程序开发。
这队程序员槟弃了KDE，开始在GTK+的基础上编写GNOME。GTK+是一个遵守GPL制度
的开发工具包，没有Qt上面的那些限制：经过了十八个月，GNOME的1.0版终于面世了。
KDE也有众多的追随者，在与GNOME的竞争中同样继续发展壮大着。具体选用哪一种纯粹
是个人口味方面的问题。如果你是个忠实的C++拥护者，那么，因为它是Qt的“母语”，你可能
会更喜欢KDE一些。你可以在一个系统上同时安装GNOME和KDE两套软件——它们完全可以做
到和平共处：面你只需编辑一下自已的X启动脚本，就可以选择加载执行它们中的--个。KDE的
详细情况可以从该项目的主页www.kde.org上查到。
17.1.1GNOME的体系结构
GNOME中的基本工具包是GTK+（即GIMP工具包），它最初是为了简化GIMP的开发T作
而编写出来的。GTK+是一个性能优异的、面向对象的、跨平台的、不依赖于具体语言的开发工
具包，在GNOME出现之前就已经大量地用来开发各种软件程序了。选择GTK+做为GNOME开
发工具包的原因之一是它能够支持许多种程序设计语言，其中包括C、C++、TOM、PERL、
Python、GUILE、ADA等等。我们将在这一章里坚持使用C语言，它也是最流行的语言。GTK+
和GNOME都是用C语言编写出来的，好的理由有很多，但要求成品必须做到面向对象多少算是
个强制性因素。选用C语言也没什么不好，但与用C++编写的程序比起来，我们的代码的整齐程
度要稍差-点。
GTK+、Qt或Tk等工具包都是由各种索材（按钮、菜单、对话框等GUI对象）以及各种通用
支持函数构成的集合。
GTK+使用GLIB（GIMP库）和GDK（GIMPDrawingKit，GIMP绘图工具包）系列的开发
库，GLIB定义了数据类型，提供了错误处理和内存管理方面的函数；GDK则是本地图形化
API和GTK+中间的一个过渡层，它需要依赖具体的计算机平台。因此，向其他计算机平台上移
植GTK+只需要重新编写GDK。
GNOME对GTK+的扩展在于增加了一个由独立的GNOME专用库和GNOME素材构成的层
面，它对某些GTK+库和GTK+素材做了替换和改进，目的是提供更方便的程序设计手段和毁励
应用程序开发人员编写出稳定一致的用户操作界面。
举个例子，GNOME提供了现成的对话框，我们只需加上自已的文字并指定相应的反馈按钮
加入jaVa编程群：524621833
---
## Page 577
第17章使用GTK+进行GNOME程序设计
559
就完成了设计。所以对话框代码编写起来更迅速更简单了，而它们在所有GNOME应用程序里也
都有了统一的设计。
GTK+和GNOME都向我们提供了创建某些素材（比如菜单和工具条）的例程，但在遇到这
种情况时我们将只讨论GNOME方法，因为它毫尤疑问地是一种功能更强的选择。