Full-Request = Request-Line
*(General-Header
| Request-Header
| Entity-Header)
CRLF
[Entity-Body]
A Simple-Request is an HTTP/0.9 request and must be replied to by a Simple-Response.
简单请求(Simple-Request)表明是一个 HTTP/0.9 请求，必须回复简单响应(Simple-Response)。
A Request-Line has format
请求行(Request-Line)的格式如下：
Request-Line = Method SP Request-URI SP HTTP-Version CRLF
where
其中
Method = "GET" | "HEAD" | POST |
extension-method
e.g.
如：
GET http://jan.newmarch.name/index.html HTTP/1.0
Response format
响应格式
A response is of the form
响应的形式如下：
Response = Simple-Response | Full-Response
Simple-Response = [Entity-Body]
Full-Response = Status-Line
*(General-Header
| Response-Header
| Entity-Header)
CRLF
[Entity-Body]
The Status-Line gives information about the fate of the request:
状态行(Status-Line)会给出请求的最后的状态信息:
Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF
e.g.
如
HTTP/1.0 200 OK
The codes are
状态码：
Status-Code = "200" ; OK
| "201" ; Created
| "202" ; Accepted
| "204" ; No Content
| "301" ; Moved permanently
| "302" ; Moved temporarily
| "304" ; Not modified
| "400" ; Bad request
| "401" ; Unauthorised
| "403" ; Forbidden
| "404" ; Not found
| "500" ; Internal server error
| "501" ; Not implemented
| "502" ; Bad gateway
| "503" | Service unavailable
| extension-code
The Entity-Header contains useful information about the Entity-Body to follow
实体头(Entity-Header)包含了有关实体(Entity-Body)的有用信息
Entity-Header = Allow
| Content-Encoding
| Content-Length
| Content-Type
| Expires
| Last-Modified
| extension-header
For example
例如：
HTTP/1.1 200 OK
Date: Fri, 29 Aug 2003 00:59:56 GMT
Server: Apache/2.0.40 (Unix)
Accept-Ranges: bytes
Content-Length: 1595
Connection: close
Content-Type: text/html; charset=ISO-8859-1
HTTP 1.1
HTTP 1.1 fixes many problems with HTTP 1.0, but is more complex because of it. This
version is done by extending or refining the options available to HTTP 1.0. e.g.
HTTP 1.1 修复了 HTTP 1.0 中的很多问题，因此更加复杂。例如此版本中扩展和完善了HTTP 1.0
中的可选项。
 there are more commands such as TRACE and CONNECT
 you should use absolute URLs, particularly for connecting by proxies e.g
 GET http://www.w3.org/index.html HTTP/1.1
 there are more attributes such as If-Modified-Since, also for use by proxies
 增加了命令，如 TRACE 和 CONNECT
 注意在通过代理服务器进行连接时，应当使用绝对路径。如：
 GET http://www.w3.org/index.html HTTP/1.1
 增加了更多属性，例如针对代理服务器的If-Modified-Since。
The changes include
这些变动包括：
 hostname identification (allows virtual hosts)
 content negotiation (multiple languages)
 persistent connections (reduces TCP overheads - this is very messy)
 chunked transfers
 byte ranges (request parts of documents)
 proxy support
 主机名识别(支持虚拟主机)
 内容协商(多语言)
 持久连接(降低TCP 开销)
 分块传送
 字节范围(请求文件部分内容)
 代理支持
The 0.9 protocol took one page. The 1.0 protocol was described in about 20 pages.
1.1 takes 120 pages.
0.9 版本的协议只有一页，1.0 版本用了大约20 页来说明，而1.1 则用了120 页。
8.3 Simple user-agents 简单用户代理
User agents such as browsers make requests and get responses. The response type is
用户代理(User agent)(例如浏览器)用来发起请求和接收响应。代码中的 response type 如下：
type Response struct {
Status string // e.g. "200 OK"
StatusCode int // e.g. 200
Proto string // e.g. "HTTP/1.0"
ProtoMajor int // e.g. 1
ProtoMinor int // e.g. 0
RequestMethod string // e.g. "HEAD", "CONNECT", "GET", etc.
Header map[string]string
Body io.ReadCloser
ContentLength int64
TransferEncoding []string
Close bool
Trailer map[string]string
}
We shall examine this data structure through examples. The simplest request is from
a user agent is "HEAD" which asks for information about a resource and its HTTP server.
The function
通过实例可以了解其数据结构。最简单的请求是由用户代理发起"HEAD"命令，其中包括请求的资源
和HTTP 服务器。函数
func Head(url string) (r *Response, err os.Error)
can be used to make this query.
可用来发起此请求。
The status of the response is in the response field Status, while the field Header is
a map of the header fields in the HTTP response. A program to make this request and
display the results is
响应状态对应response 中的Status属性，而Header属性对应HTTP 响应的header 域。下面的程
序用来发起请求和显示结果：
/* Head
*/
package main
import (
"fmt"
"net/http"
"os"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host:port")
os.Exit(1)
}
url := os.Args[1]
response, err := http.Head(url)
if err != nil {
fmt.Println(err.Error())
os.Exit(2)
}
fmt.Println(response.Status)
for k, v := range response.Header {
fmt.Println(k+":", v)
}
os.Exit(0)
}
When run against a resource as in Head http://www.golang.com/ it prints something like
程序运行请求资源，Head http://www.golang.com/，输出结果类似：
200 OK
Content-Type: text/html; charset=utf-8
Date: Tue, 14 Sep 2010 05:34:29 GMT
Cache-Control: public, max-age=3600
Expires: Tue, 14 Sep 2010 06:34:29 GMT
Server: Google Frontend
Usually, we are want to retrieve a resource rather than just get information about
it. The "GET" request will do this, and this can be done using
通常我们希望接收到一个资源内容而不是其有关信息。"GET"请求就是做来做这个的，使用如下函数
即可：
func Get(url string) (r *Response, finalURL string, err os.Error)
The content of the response is in the response field Body which is of
type io.ReadCloser. We can print the content to the screen with the following program
响应内容为response 的Body属性。它是一个io.ReadCloser类型。我们可以用以下程序在屏幕上
打印相应内容
/* Get
*/
package main
import (
"fmt"
"net/http"
"net/http/httputil"
"os"
"strings"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host:port")
os.Exit(1)
}
url := os.Args[1]
response, err := http.Get(url)
if err != nil {
fmt.Println(err.Error())
os.Exit(2)
}
if response.Status != "200 OK" {
fmt.Println(response.Status)
os.Exit(2)
}
b, _ := httputil.DumpResponse(response, false)
fmt.Print(string(b))
contentTypes := response.Header["Content-Type"]
if !acceptableCharset(contentTypes) {
fmt.Println("Cannot handle", contentTypes)
os.Exit(4)
}
var buf [512]byte
reader := response.Body
for {
n, err := reader.Read(buf[0:])
if err != nil {
os.Exit(0)
}
fmt.Print(string(buf[0:n]))
}
os.Exit(0)
}
func acceptableCharset(contentTypes []string) bool {
// each type is like [text/html; charset=UTF-8]
// we want the UTF-8 only
for _, cType := range contentTypes {
if strings.Index(cType, "UTF-8") != -1 {
return true
}
}
return false
}
Note that there are important character set issues of the type discussed in the
previous chapter. The server will deliver the content using some character set
encoding, and possibly some transfer encoding. Usually this is a matter of
negotiation between user agent and server, but the simple Get command that we are
using does not include the user agent component of the negotiation. So the server
can send whatever character encoding it wishes.
注意这里有一个重要的字符集类型问题，在前面章节也讨论过。服务器提供内容时使用的字符集编码，
甚至传输编码，通常是用户代理和服务器之间协商的那结果，但我们使用的Get的命令很简单，它不
包括用户代理的内容协商组件。因此，服务器可以自行决定使用什么字符编码。
At the time of first writing, I was in China. When I tried this program
on www.google.com, Google's server tried to be helpful by guessing my location and
sending me the text in the Chinese character set Big5! How to tell the server what
character encoding is okay for me is discussed later.
我第一次写的时候是在中国。当我用这个程序访问www.google.com时，谷歌的服务器尝试猜测我的
地理位置，然后很厉害地使用了Big5 码给我发送文本！后面会讨论如何告知服务器给我什么字符编
码最好。
8.4 Configuring HTTP requests 设置 HTTP 请求
Go also supplies a lower-level interface for user agents to communicate with HTTP
servers. As you might expect, not only does it give you more control over the client
requests, but requires you to spend more effort in building the requests. However,
there is only a small increase.
Go 还提供一个较低级别的用户代理接口用来与HTTP 服务器进行通信。你可能已经想到，这样可以更
灵活地控制客户端请求，当然创建请求也会更费力气。不过这只需要多费一点点力气。
The data type used to build requests is the type Request. This is a complex type,
and is given in the Go documentation as
用来创建请求的数据类型是Request。这是个复杂的类型，Go 语言文档中给出的定义如下：
type Request struct {
Method string // GET, POST, PUT, etc.
RawURL string // The raw URL given in the request.
URL *URL // Parsed URL.
Proto string // "HTTP/1.0"
ProtoMajor int // 1
ProtoMinor int // 0
// A header maps request lines to their values.
// If the header says
//
// accept-encoding: gzip, deflate
// Accept-Language: en-us
// Connection: keep-alive
//
// then
//
// Header = map[string]string{
// "Accept-Encoding": "gzip, deflate",
// "Accept-Language": "en-us",
// "Connection": "keep-alive",
// }
//
// HTTP defines that header names are case-insensitive.
// The request parser implements this by canonicalizing the
// name, making the first character and any characters
// following a hyphen uppercase and the rest lowercase.
Header map[string]string
// The message body.
Body io.ReadCloser
// ContentLength records the length of the associated content.
// The value -1 indicates that the length is unknown.
// Values >= 0 indicate that the given number of bytes may be read from Body.
ContentLength int64
// TransferEncoding lists the transfer encodings from outermost to innermost.
// An empty list denotes the "identity" encoding.
TransferEncoding []string
// Whether to close the connection after replying to this request.
Close bool
// The host on which the URL is sought.
// Per RFC 2616, this is either the value of the Host: header
// or the host name given in the URL itself.
Host string
// The referring URL, if sent in the request.
//
// Referer is misspelled as in the request itself,
// a mistake from the earliest days of HTTP.
// This value can also be fetched from the Header map
// as Header["Referer"]; the benefit of making it
// available as a structure field is that the compiler
// can diagnose programs that use the alternate
// (correct English) spelling req.Referrer but cannot
// diagnose programs that use Header["Referrer"].
Referer string
// The User-Agent: header string, if sent in the request.
UserAgent string
// The parsed form. Only available after ParseForm is called.
Form map[string][]string
// Trailer maps trailer keys to values. Like for Header, if the
// response has multiple trailer lines with the same key, they will be
// concatenated, delimited by commas.
Trailer map[string]string
}
There is a lot of information that can be stored in a request. You do not need to
fill in all fields, only those of interest. The simplest way to create a request
with default values is by for example
请求中可以存放大量的信息，但你不需要填写所有的内容，只填必要的即可。最简单的使用默认值创
建请求的方法如下：
request, err := http.NewRequest("GET", url.String(), nil)
Once a request has been created, you can modify fields. For example, to specify that
you only wish to receive UTF-8, add an "Accept-Charset" field to a request by
请求创建后，可以修改其内容字段(field)。比如，需指定只接受 UTF-8，可添加一个
"Accept-Charset"字段：
request.Header.Add("Accept-Charset", "UTF-8;q=1, ISO-8859-1;q=0")