译者： **xd0ol1 (知道创宇404安全实验室)**
原文链接：
作者打算按ROP+shellcode的套路来实现漏洞的利用，但目前只完成了堆喷布局，代码执行部分还未完成，分析过程值得我们借鉴学习。另外，翻译不对的地方还望多多指正。
### 0x00 概述
在15年的时候，我发现Google Hangouts用到的“Google Talk ActiveX Plugin”中存在一个UAF(use-after-free)的漏洞。由于此ActiveX控件是站点锁定的，也就意味着它只能被白名单中的Google域名所调用，因此要成功利用攻击者还需要找到其中某个域名的XSS漏洞。该bug已经报告给了Google，在那之后就被修复了。
### 0x01 ActiveX控件的细节
我们在IE上安装Google Hangouts时，系统会安装“Google Talk ActiveX
Plugin”这个控件，它能被浏览器调用并且导出了下述5个方法：
    dispinterface GTalkPluginInterface {
        properties:
        methods:
            [id(0x60020000)]
            void send([in] BSTR str);
            [id(0x60020001), propput]
            void onmessage([in] VARIANT* rhs);
            [id(0x60020002), propget]
            BSTR version();
            [id(0x60020003), propget]
            BSTR wsconnectinfo();
            [id(0x60020004)]
            void wsconnectfailed([in] int port);
    };
由分析可知该控件并没有通过实现IObjectSafetySiteLock接口来将其锁定到特定域名。
     C:\Program Files (x86)\Microsoft\SiteLock 1.15>sitelist.exe {39125640-8D80-11DC-A2FE-C5C455D89593}  
     SiteList: Utility to dump domain list from a site-locked ActiveX control.  
     [1ff8] No bp log location saved, using default.  
     [000:000] [1ff8] Cpu: 6.58.9, x4, 2890Mhz, 8065MB  
     [000:000] [1ff8] Computer model: Not available  
     IObjectSafetySiteLock not implemented.  
然而，测试表明该控件仅适用于特定的Google域名。既然它没有使用IObjectSafetySiteLock，我接着又检查其是否被注册成IE中的Browser
Helper对象，这样可以获取navigation事件，通过逆向调试发现确是如此。因此，由导出的IObjectWithSite接口控件可创建与IE的连接，借此就能得到当前访问的URL信息了。
通过下述C++代码，我们创建该控件的一个实例，并在调用IObjectWithSite-> SetSite()前插入一个断点：
    #include "stdafx.h"  
    #include "windows.h"  
    #include "OCIdl.h"  
    int _tmain(int argc, _TCHAR* argv[])  
    {  
      CoInitialize(NULL);   
      IUnknown *punk;  
      LPGUID pclsid;  
      HRESULT hr = NULL;
      //{39125640-8D80-11DC-A2FE-C5 C4 55 D8 95 93}
      static const GUID CLSID_GTALK = { 0x39125640, 0x8D80, 0x11DC, { 0xa2, 0xfe, 0xc5, 0xc4, 0x55, 0xd8, 0x95, 0x93 } };
      if (FAILED(hr))  
        printf("error");  
      hr = CoCreateInstance(CLSID_GTALK, NULL, CLSCTX_SERVER, IID_IUnknown, (void **)&punk);
      if (FAILED(hr))  
        printf("error");  
      // Ask the ActiveX object for the IDispatch interface.  
      IObjectWithSite *pOSite;  
      hr = punk->QueryInterface(IID_IObjectWithSite, (void **)&pOSite);  
      if (FAILED(hr))  
        printf("error");  
      __asm  
      {  
        int 3;  
      }  
      //pOSite->GetSite(CLSID_GTALK, NULL);  
      pOSite->SetSite(NULL);  
      return 0;  
    }
这样我们就可以在调试器中定位到此函数的入口信息，然后在IE中的相同位置下断，并借助HTML代码来加载和调用该控件。
分析可知，控件通过对象传递来实现SetSite供IE调用，如下代码为其中的一部分实现，这里的URL信息由ECX寄存器传递：
     0:007> u 5ca85c51  
     googletalkax+0x5c51:  
     5ca85c51 51           push  ecx  
     5ca85c52 50           push  eax  
     5ca85c53 e8d88f0000   call  googletalkax!DllUnregisterServer+0x39e0 (5ca8ec30)  
     5ca85c58 8bd8         mov   ebx,eax  
     5ca85c5a 83c408       add   esp,8  
     5ca85c5d 85db         test  ebx,ebx  
     5ca85c5f 7465         je   googletalkax+0x5cc6 (5ca85cc6)  
     5ca85c61 8b4e40       mov   ecx,dword ptr [esi+40h]  
     0:007> da poi(ecx)  
     1123efc0 "http://localhost:9000/testgoogle"  
     1123efe0 "talkactivexplugin.html"  
通过对此函数的更进一步分析我们可以找到将当前域名和白名单中的域名进行比较的代码段：
     .text:5CA8CA20         cmp   [ebp+var_8], 10h  
     .text:5CA8CA24         lea   eax, [ebp+var_1C] ; holds the current domain name   
     .text:5CA8CA27         push  dword ptr [esi] ; holds whitelisted domain  
     .text:5CA8CA29         cmovnb eax, [ebp+var_1C]  
     .text:5CA8CA2D         push  eax  
     .text:5CA8CA2E         call  sub_5CA957C0  
     .text:5CA8CA33         add   esp, 8  
     .text:5CA8CA36         test  al, al  
     .text:5CA8CA38         jnz   loc_5CA8CB37  
     .text:5CA8CA3E         add   esi, 4  
     .text:5CA8CA41         cmp   esi, offset aHostedtalkgadg ; "*hostedtalkgadget.google.com"  
     .text:5CA8CA47         jl   short loc_5CA8CA20  
我们可以在调试器中下断来打印出所有的白名单域名：
     0:005> bl  
      0 e 5ca8ca2e   0001 (0001) 0:**** googletalkax!DllUnregisterServer+0x17de "da poi(esp+4);g"  
     0:005> g  
     5cace2c4 "*hostedtalkgadget.google.com"  
     5cace2e4 "*mail.google.com"  
     5cace2f8 "*plus.google.com"  
     5cace30c "*plus.sandbox.google.com"  
     5cace328 "*talk.google.com"  
     5cace33c "*talkgadget.google.com"  
此外，下述代码为该函数中的另一条执行路径，但其需要设置控件中的“plugin_enable_corp_host”标志才能被触发，这应该是Google内部使用的，对于其它域名还需要执行额外的检测操作。
     .text:5CA8CA9F         push  offset a_corp_google_c ; "*.corp.google.com"  
     .text:5CA8CAA4         cmovnb eax, [ebp+var_1C]  
     .text:5CA8CAA8         push  eax  
     .text:5CA8CAA9         call  sub_5CA957C0  
     .text:5CA8CAAE         add   esp, 8  
     .text:5CA8CAB1         test  al, al  
     .text:5CA8CAB3         jnz   short loc_5CA8CB0C  
     .text:5CA8CAB5         cmp   [ebp+var_8], 10h  
     .text:5CA8CAB9         lea   eax, [ebp+var_1C]  
     .text:5CA8CABC         push  offset a_prod_google_c ; "*.prod.google.com"  
     .text:5CA8CAC1         cmovnb eax, [ebp+var_1C]  
     .text:5CA8CAC5         push  eax  
     .text:5CA8CAC6         call  sub_5CA957C0  
     .text:5CA8CACB         add   esp, 8  
     .text:5CA8CACE         test  al, al  
     .text:5CA8CAD0         jnz   short loc_5CA8CB0C  
     .text:5CA8CAD2         cmp   [ebp+var_8], 10h  
     .text:5CA8CAD6         lea   eax, [ebp+var_1C]  
     .text:5CA8CAD9         push  offset a_googlegoro_co ; "*.googlegoro.com"  
     .text:5CA8CADE         cmovnb eax, [ebp+var_1C]  
     .text:5CA8CAE2         push  eax  
     .text:5CA8CAE3         call  sub_5CA957C0  
     .text:5CA8CAE8         add   esp, 8  
     .text:5CA8CAEB         test  al, al  
     .text:5CA8CAED         jnz   short loc_5CA8CB0C  
     .text:5CA8CAEF         cmp   [ebp+var_8], 10h  
     .text:5CA8CAF3         lea   eax, [ebp+var_1C]  
     .text:5CA8CAF6         push  offset a_googleplex_co ; "*.googleplex.com"  
     .text:5CA8CAFB         cmovnb eax, [ebp+var_1C]  
     .text:5CA8CAFF         push  eax  
     .text:5CA8CB00         call  sub_5CA957C0  
其中，corp.google.com和googleplex.com域名会返回登录提示，似乎仅供Google员工使用，而prod.google.com域名则无法访问，很可能只是内部使用的。
### 0x02 如何触发漏洞
继续，我们知道赋值给“onmessage”导出方法的变量需为JavaScript回调函数，且它会立即被控件所调用，这可以通过下述代码进行验证：
如果控件在调用回调函数前没有事先调用AddRef()函数，那么就可能出现use-after-free的情况，因为回调函数不会改变此控件在垃圾回收机制中的引用计数。
我们通过创建一个删除控件的回调函数来复现此漏洞场景：
     sdr  
     bp OLEAUT32!DispCallFunc "u poi(poi(poi(esp+4))+(poi(esp+8))) L1;gc"  
最终调试器会返回如下的崩溃信息：
     (13b4.24a8): Access violation - code c0000005 (first chance)  
     First chance exceptions are reported before any exception handling.  
     This exception may be expected and handled.  
     *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:\Users\Sean\AppData\Local\Google\Google Talk Plugin\googletalkax.dll -   
     eax=00000001 ebx=00000001 ecx=0aabe8b7 edx=00161078 esi=00000000 edi=407a2fb0  
     eip=13e70ca5 esp=0a13c1b8 ebp=0a13c2cc iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00210246  
     googletalkax!DllUnregisterServer+0x6385:  
     13e70ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:407a2fcc=????????  
其中EDI寄存器指向的是一块无效的内存空间：
     0:008> r  
     eax=00000001 ebx=00000001 ecx=0aabe8b7 edx=00161078 esi=00000000 edi=407a2fb0  
     eip=13e70ca5 esp=0a13c1b8 ebp=0a13c2cc iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00210246  
     googletalkax!DllUnregisterServer+0x6385:  
     13e70ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:407a2fcc=????????  
     0:008> dd edi  