The rules of the basic step relation are modiﬁed to use this
richer set of values. Most instructions will only work with raw
words—e.g., attempting to compare sealed values or jump to
a key will halt the machine. Load and Store require a word as
their ﬁrst argument (the target memory address) but they place
no restrictions on the value being loaded or stored; similarly
Mov copies arbitrary values between registers.
reg[rp]=wp
decode i = Store rp rs
mem[pc] = i
(mem, reg, pc) → (mem(cid:3), reg, pc+1)
mem(cid:3)=mem[wp←vs]
reg[rs]=vs
(STORE)
The operations of generating keys, sealing, and unsealing
are provided by monitor service routines located at addresses
mkkey addr, seal addr, and unseal addr, all of which lie
outside of accessible memory at the symbolic and abstract
levels (at the concrete level, the code for the services will
begin at these addresses). By convention, these routines take any
arguments in general-purpose registers rarg1 and rarg2 and return
their result in a general-purpose register rret. The deﬁnition of
the step relation includes a rule for each service that applies
when the pc is at the corresponding address. For example:
mkkey f ks=k reg(cid:3)=reg[rret←k]
(mem, reg, mkkey addr, ks) → (mem, reg(cid:3), pc(cid:3), k::ks)
This rule applies when the machine’s pc is mkkey addr. The
ﬁrst premise uses mkkey f to generate a fresh key k. The
second premise updates the result register rret with k. The
third premise restores the pc from the register ra. To invoke
this service, a user program performs a Jal to the address
mkkey addr, which sets ra appropriately and causes this rule
to ﬁre on the next step. Invoking services this way means that
we can run exactly the same user code on this abstract machine
as we do on the symbolic machine (described below) and the
concrete machine (§8-§9). The rule for the unsealing service is
similar (as is the one for the sealing service, which we omit):
reg[ra]=pc(cid:3)
(MKKEY)
reg[rarg1] = {w}k
reg(cid:3) = reg[rret←w]
reg[rarg2] = k
reg[ra] = pc(cid:3)
(mem, reg, unseal addr, ks) → (mem, reg(cid:3), pc(cid:3), ks) (UNSEAL)
The ﬁrst two premises extract the sealed value {w}k from the
ﬁrst argument register and check that second argument register
contains the same key k. (If the ﬁrst register doesn’t contain
a sealed value or the key doesn’t match the second register,
the rule fails to ﬁre and the machine gets stuck.) The third
premise writes the raw value w into the result register, and the
last premise extracts the return address from ra.
Symbolic Sealing Machine The abstract machine described
above constitutes a speciﬁcation—an application programmer’s
view—of the sealing micro-policy. The next piece of the micro-
policy deﬁnition is a symbolic micro-policy that implements
this abstract speciﬁcation in terms of tags. Since the pc is just
a bare word in the sealing abstract machine, and there are
no restrictions on when monitor services can be called, we
can take the pc and service tag sets Tpc and Ts to be just the
singleton set {•}. Tr and Tm, on the other hand, will be used
to represent the values of the abstract machine: their elements
have the one of the forms Data, Key k, or Sealed k, where k
is a symbolic key drawn from an ordered ﬁnite set SK. Raw
words are tagged Data. Keys are represented as a dummy
payload word (say, 0) tagged Key k for some k. A word w
tagged Sealed k represents the sealing of w under key k. The
extra state type EX is just SK—i.e., the extra state is a single
monotonic counter storing the next key to be generated. The
initial extra state is the minimum key.
817817
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:44 UTC from IEEE Xplore.  Restrictions apply. 
Outside of monitor services, all the propagation and checking
of tags is performed by the transfer function of the symbolic
machine. In our formal development, transfer functions are
written in Gallina, but for readability here we will present
examples as collections of symbolic rules of the form
opcode : (PC , CI , OP1 , OP2 , OP3 ) → (PC (cid:3), R(cid:3))
where the metavariables PC , CI , etc. range over symbolic
expressions, including variables plus a dummy value “−” to
indicate input or output ﬁelds that are ignored. For example,
the fact that Store requires an unsealed word in its pointer
register (OP 1) and copies the tag of the source register (OP 2)
to the result is captured by the following symbolic rule:
Store : (•, Data, Data, tsrc,−) → (•, tsrc)
Similarly, the Jal rule ensures that the target register (OP 1) is
tagged Data:
Jal : (•, Data, Data,−,−) → (•, Data)
(The symbolic machine step rule for Jal is in §B.)
As we described in §3, the symbolic machine handles all
monitor services with a single rule that uses a function get ser-
vice (provided as part of the micro-policy deﬁnition) to do the
actual work; given a memory address, get service returns either
nothing or a pair of a Gallina function deﬁning the service’s
behavior and a symbolic tag that is passed to the transfer func-
tion so that it can check whether the call to this service is legal
from this machine state. For the sealing micro-policy, we deﬁne
get service to map mkkey addr to (mkkey,•), seal addr to
(seal,•), and unseal addr to (unseal,•), where mkkey and
unseal (seal is similar) are deﬁned by:
nk
(cid:3) = nk + 1
nk (cid:10)= max key
reg(cid:3) = reg[rret←0@(Key nk)]
reg[ra] = wpc(cid:2) @
mkkey (mem, reg, pc, nk) (cid:11)→ (mem, reg(cid:3), wpc(cid:2) @•, nk
(cid:3))
reg[rarg2] = w(cid:3)@(Key k)
reg[rarg1] = w@(Sealed k)
reg(cid:3) = reg[rret←w@Data]
reg[ra] = wpc(cid:2) @
unseal (mem, reg, pc, nk) (cid:11)→ (mem, reg(cid:3), wpc(cid:2) @•, nk)
The constant max key stands for the largest representable key,
and 0 is used as a dummy payload for fresh keys.
Note that mkkey is a partial function: it can fail if all keys
have been used up. This models the fact that, on the concrete
machine, keys will be implemented as ﬁxed-width machine
words. By contrast, the abstract sealing machine uses an inﬁnite
set of keys, so it will never fail for this reason. This discrepancy
is not an issue for the backward reﬁnement property, which
only requires us to show that if the symbolic machine takes
a step then a corresponding step can be taken by the abstract
machine. (Forward reﬁnement, on the other hand, does not hold:
the symbolic machine will fail to simulate the abstract one
when it runs out of fresh keys. Giving up forward reﬁnement is
the price we pay for choosing not to expose low-level resource
constraints at the abstract level.)
Reﬁnement We formalize the connection between the ab-
stract and symbolic sealing machines as a backward (i.e., from
symbolic to abstract) reﬁnement property on traces. We state
the property here in a general form so that we can instantiate
it repeatedly throughout the paper.
Deﬁnition 4.1 (Backward reﬁnement). We say that a low-level
machine (StateL,→L) backward reﬁnes a high-level machine
(StateH ,→H ) with respect to a simulation relation ∼ between
1 →∗ sL
1 and sL
low- and high-level states if, whenever sL
2 ,
1 →∗ sH
2 ∼ sH
there is some sH
2 .
1 ∼ sH
2 and sL
2 such that sH
2 such that sH
1 ∼ sH
2 and sL
1 →
1 and sL
2 ∼ sH
2 .
Following standard practice, we prove this general multi-step
reﬁnement property by establishing a correspondence between
individual execution steps. In the case of sealing, we prove a
strong 1-backward simulation theorem showing that each step
of the symbolic machine is simulated by exactly one step of
the abstract one.
Deﬁnition 4.2 (1-backward simulation). If sL
1 → sH
2 then there exists sH
sL
For sealing, since keys are dynamically allocated, our sim-
ulation relation is parameterized by a partial map ψ relating
abstract and symbolic keys. We begin by deﬁning an auxiliary
relation ∼SA
ψ showing how abstract atoms relate to symbolic
ones (SA stands for Symbolic-to-Abstract):
w@Data ∼SA
ψ w(cid:3)
when w = w(cid:3)
w@(Key kS) ∼SA
ψ kA
when ψ[kA] = kS
ψ {w(cid:3)}kA when w = w(cid:3) ∧ ψ[kA] = kS.
w@(Sealed kS) ∼SA
The relation ∼SA
ψ does not hold otherwise. Then, we deﬁne
the simulation relation on states, also noted ∼SA
ψ , by lifting the
previous relation “pointwise” to all atoms, and adding these
invariants: (a) all abstract keys in the domain of ψ are in the
set of currently allocated keys in the abstract state; (b) all
symbolic keys in the range of ψ are strictly smaller than the
current value of the monotonic counter; and (c) ψ is injective.
We then get the following result:
Theorem 4.3 (1-backward SA-simulation for sealing). The
symbolic machine instantiated with the sealing micro-policy
1-backward-simulates the sealing abstract machine with respect
to the simulation relation λsS sA. ∃ψ. sS ∼SA
ψ sA.
Notice that, in the above statement, the key map parameter ψ
is existentially quantiﬁed and not ﬁxed, since it must be updated
on each call to mkkey to maintain the correspondence between
the newly generated keys, which are drawn from different sets
at the two levels. This setup allows us to elide irrelevant details
of key allocation from the abstract machine. This is only a
minor convenience for sealing, but the idiom becomes quite
important in other micro-policies for hiding complex objects
like memory allocators (§7) from the high-level speciﬁcation.
5 Compartmentalization Micro-Policy
We next describe a micro-policy for enforcing isolation be-
tween program-deﬁned “compartments,” dynamically demar-
818818
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:44 UTC from IEEE Xplore.  Restrictions apply. 
cated memory regions that, by default, cannot jump or write
to each other. This model is based on Wahbe et al.’s work
on software fault isolation (SFI) [32], with a few differences
discussed below. To demonstrate isolation, we show that a
symbolic-machine instance reﬁnes an abstract machine that
enforces compartmentalization by construction.
Abstract Machine The abstract machine for this micro-policy
enforces compartmentalization directly by maintaining, along-
side the usual machine state, a set C of current compartments
that is consulted on each step to prevent one compartment
from improperly transferring execution to or writing to an-
other. Each abstract compartment in C is a triple (A, J, S)
containing (1) an address space A of addresses that belong
to the compartment, i.e., where its instructions and data are
stored; (2) a set of jump targets J, additional addresses that
it is allowed to jump to; and (3) a set of store targets S,
additional addresses that it is allowed to write to. Compartments
are not limited to contiguous regions of memory. Also, as
in Wahbe et al.’s model [32], reading from memory is not
constrained: code in one compartment is permitted to read from
addresses in any other. (Adding a set of “read targets” to each
abstract compartment would be a straightforward extension.)
The machine maintains a number of invariants, of which the
most important is that all compartments have disjoint address
spaces.
The abstract machine state includes a ﬂag F ∈ {Jumped,
FallThrough} that records whether or not the previous instruc-
tion was a Jump or a Jal, together with the previously executing
compartment, prev = (Aprev, Jprev, Sprev). This information is
used to prevent illegal pc changes (on both jumps and ordinary
steps) and to allow monitor services to see which compartment
called them.
At the abstract level, all instructions behave as in the basic
machine (§2), with the addition of a compartmentalization
check. For example, here is the rule for Store:
reg[rs] = ws
mem[pc] = i
(A, J, S) ∈ C
decode i = Store rp rs
wp ∈ A ∪ S
pc ∈ A
mem(cid:3) = mem[wp←ws]
reg[rp] = wp
(A, J, S) = (Aprev, Jprev, Sprev) ∨ (F = Jumped ∧ pc ∈ Jprev)
(STORE)
(mem, reg, pc, C, F, (Aprev, Jprev, Sprev))
(cid:3), reg, pc + 1, C, FallThrough, (A, J, S))
→ (mem
Most of the new features here are common to the step rules
for all the instructions: each rule checks that the current in-
struction is executing inside some compartment ((A, J, S) ∈ C
and pc ∈ A) and (using prev) that execution arrived at this
instruction either (a) from the same compartment, or (b) with
F = Jumped and the current pc in the previous compartment’s
set of jump targets (the ﬁnal line of the precondition). In the
new machine state, we update the previous compartment to
be the compartment the pc currently lies in. And we set F
to FallThrough (the rules for Jump and Jal set it to Jumped).
Besides these generic conditions, the Store rule has an addi-
tional check that its write is either to the current compartment
or to one of its store targets (wp ∈ A ∪ S).
819819
Deferring detection of illegal pc changes until one step after
they have occurred is the key trick that makes this tag-based
implementation at the symbolic level work; we will use a
similar approach for CFI in §6.
The compartmentalization abstract machine also provides
three monitor services. The core service is isolate, which
creates a new compartment. It takes as input the description of a
fresh compartment (A(cid:3), J(cid:3), S(cid:3)) and adds it to C, also removing
the addresses in A(cid:3) from the address space of the parent
compartment. Before allowing the operation, the service checks,
relative to the parent compartment (A, J, S), that A(cid:3) ⊆ A, that
J(cid:3) ⊆ A ∪ J, and that S(cid:3) ⊆ A ∪ S. This ensures that the
new compartment is no more privileged than its parent. The
argument sets are passed to the service as pointers to in-memory
data structures representing sets of addresses.
The other two services modify the target sets of the cur-