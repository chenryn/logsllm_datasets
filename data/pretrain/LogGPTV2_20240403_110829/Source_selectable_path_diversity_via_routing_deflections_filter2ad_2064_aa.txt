title:Source selectable path diversity via routing deflections
author:Xiaowei Yang and
David Wetherall
Source Selectable Path Diversity via Routing Deﬂections
Xiaowei Yang
University of California, Irvine
PI:EMAIL
David Wetherall
University of Washington
PI:EMAIL
ABSTRACT
We present the design of a routing system in which end-systems set
tags to select non-shortest path routes as an alternative to explicit
source routes. Routers collectively generate these routes by using
tags as hints to independently deﬂect packets to neighbors that lie
off the shortest-path. We show how this can be done simply, by
local extensions of the shortest path machinery, and safely, so that
loops are provably not formed. The result is to provide end-systems
with a high-level of path diversity that allows them to bypass unde-
sirable locations within the network. Unlike explicit source routing,
our scheme is inherently scalable and compatible with ISP policies
because it derives from the deployed Internet routing. We also sug-
gest an encoding that is compatible with common IP usage, making
our scheme incrementally deployable at the granularity of individ-
ual routers.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network Archi-
tecture and Design; C.2.2 [Computer- Communication Networks]:
Network Protocols—Routing Protocols
General Terms
Design, Algorithms
Keywords
Routing deﬂections, path diversity, source routing
1.
INTRODUCTION
Source routing, in which end-systems partially or fully specify
the paths taken by their packets, is the basis of a variety of schemes
to improve the reliability and performance of networks. For exam-
ple, the Detour study [17] and RON overlay [1] show that “loose
source route” style concatenations of default Internet paths may
possess lower latency or greater available bandwidth. Similarly,
SOSR [7] demonstrates that routing via a random point of indi-
rection can mask many Internet failures. And Perlman’s work on
sabotage-proof routing [13, 14] depends at its core on the ability of
sources to select their own routes to ﬁnd one that works correctly.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’06, September 11–15, 2006, Pisa, Italy.
Copyright 2006 ACM 1-59593-308-5/06/0009 ...$5.00.
Source routing is a fundamental means of improving communica-
tions because it provides path diversity that reduces the dependence
on a single network path with undesirable characteristics.
Despite these advantages, source routes are not in mainstream
use in the Internet today, perhaps due to several associated prob-
lems. They do not scale to permit widespread use (except in triv-
ial applications) because each end-system needs some map of the
overall network to formulate its preferred routes. Yet detailed, up-
to-date maps do not readily exist, and even simple lists of locations
for indirection are complicated by the need to maintain availability
and spread load. By letting users specify paths, source routes do
not ﬁt the Internet model in which ISPs set routing policy based
primarily on destination addresses. And in some forms, such as the
IP loose source route option, they pose a security threat and as a
result are often disabled.
In this paper, we revisit source-controlled routes. Our goal is to
ﬁnd a design that provides much of the beneﬁt of explicit source
routes but addresses the problems we have identiﬁed so as to re-
main practical. Our insight is that, to be useful, it is not necessary
for the end-system to specify which of the exponentially many pos-
sible routes to take. Instead, it is sufﬁcient to provide a small set
of diverse paths and let the end-system select from them. This is
because many beneﬁts of source routing stem from path diversity.
An end-system can then test different paths without knowing the
routes to which they correspond; even if the end-system did know
the path it would often need to test it for reliability or bandwidth.
And, as work on source routing for reliability has shown [7], simple
tests are sufﬁcient to solve problems that depend on avoiding a bad
path rather than ﬁnding the optimal path. Thus, while this small set
of diverse paths is less ﬂexible than arbitrary source routes, we are
willing to adopt it in exchange for a practical scheme.
Our approach to construct these diverse paths draws on deﬂec-
tion routing and hot-potato routing, in which routers forward pack-
ets off the shortest path when it is not available [11, 2]. We develop
routing deﬂection rules that enable routers to independently deﬂect
packets and thereby collectively construct a diverse set of paths.
Our rules exercise the latitude routers have to forward packets off
the shortest path yet maintain loop-free connectivity. For instance,
a well-known rule (on which we will improve) is that any router
can safely deﬂect packets to a neighbor that has a smaller cost to
reach the destination. Then, sources access this path diversity by
supplying a hint that affects the choice of deﬂection. Because rout-
ing deﬂections build on the shortest path machinery and do not alter
its character, they scale well and ﬁt the Internet model of routing
that is based on destination addresses and ISP policy. They are
also incrementally deployable at routers within and across ISPs be-
cause different routers do not need to coordinate their deﬂection
decisions.
determine which neighbors of a router can be used to forward a
packet; and 2) a signaling mechanism that lets end systems con-
trol which of the available paths routers use for a given packet. In
this section, we use a motivating example to explain the concept
of deﬂections within a single ISP. We describe the components in
the following sections, working up to deﬂections that change the
selection of peering points across multiple ISPs.
2.1 Example
Figure 1 shows the backbone of Abilene, a US-based research
and education network, complete with link weights. We omit the
intra-POP details for simplicity. Consider packets sent from Seattle
to Kansas City. The lowest-cost route (solid line) begins by sending
the packets to Denver. However, observe that as an alternative (dot-
ted line) it is possible for the Seattle router to instead forward the
packets to Sunnyvale. This is because the remaining cost to reach
the destination falls, and so the packets will still arrive at Kansas
City without the possibility of a loop. Moreover, multiple routers
along the path can safely deﬂect to neighbors in this manner; the
cost to reach the destination will fall at every step and so the desti-
nation must be reached eventually.
The example demonstrates a routing deﬂection rule that works
for all topologies: each router can deﬂect to any neighbor with a
lower cost to the destination than itself and the result will be a loop-
free path to the destination. In our example, the alternate path might
be useful to avoid the Seattle-Denver link if it were congested, had
a relatively high error rate, etc. To allow end-systems (rather than
routers) to choose between the available paths, we tag packets with
a path selection hint. For instance, a tag of 0 may indicate the
lowest-cost path, and a tag of 1 an alternate path. The source does
not need to name any intermediate router to use these paths.
The above rule is well-known and works for our simple scenario.
However, it may not work when intra-POP structure is considered,
as small uphill hops may be needed to switch egresses within a
POP [8]. And it is not sufﬁcient to construct many desirable alter-
nate paths. Suppose, for instance, that we wished to avoid the Den-
ver node entirely. Then it would be necessary to reach Kansas City
on the lower route via Los Angeles and Houston. However, Sunny-
vale cannot safely deﬂect to Los Angeles because it will loop the
packet back. In the next section we give stronger routing deﬂection
rules that can, for example, forward along this lower route to avoid
Denver entirely.
2.2 Advantages
Routing deﬂections are conceptually simple, yet they general-
ize shortest-path routing. With shortest-path routing, a packet may
be forwarded to any one of multiple equal lowest-cost neighbors.
Similarly, with routing deﬂections, a packet may be forwarded to
any neighbor in a larger deﬂection set that is computed according
to the speciﬁc deﬂection rule. We restrict our attention in this paper
to sets that are computed via the shortest-path machinery and that
include the lowest-cost neighbors, though other kinds of deﬂection
would be possible. With shortest-path routing, each router may in-
dependently decide which packets to forward along which of the
equal-cost routes as a local matter, without causing loops. Corre-
spondingly, each router may decide its own deﬂection as a purely
local matter without loops. Loop-freedom is important in our con-
text because we allow end-systems to select paths even when there
are no transient repair events. So if deﬂections were to cause loops,
they would be persistent steady-state loops that may disrupt con-
nectivity.
Deﬂections have several other desirable properties by design.
First, deployment is trivial because deﬂection choices are compat-
Figure 1: The Abilene backbone network. Numbers give the link
weights, which are symmetric. The solid line between Seattle and
Kansas City shows the lowest-cost route. The dotted line via Sun-
nyvale shows a deﬂected route, which avoids the Seattle-Denver link.
The map and weights were taken from the Abilene Observatory
(http://abilene.internet2.edu/observatory/) on Dec 5, 2005.
In the body of this paper, we present a design that provides
sources access to path diversity via routing deﬂections. We then
evaluate our design on real, measured and random network topolo-
gies. We ﬁnd that, by using it, sources are very likely to have
enough diversity to avoid an undesirable node, link or peering point.
We make two contributions. The ﬁrst is architectural: the use of
end-system tags to select path diversity as an alternative to explicit
source routes. Our tags are compact (10-bit in our design) and do
not have global meanings. We show how they can be encoded in
a way that is compatible with common IP usage as well as carried
more cleanly in a shim protocol layer. Routers can use whatever
mechanism is preferred to bind these tags to diverse paths, e.g.,
MPLS tunnels or routing deﬂections. The second contribution is
the design of routing deﬂections, and in particular two new rules
for constructing diverse paths that we prove to be loop-free despite
independent choices at different routers. These rules are similar
to local route repair mechanisms [25, 19, 8] but more general in
the sense that concurrent deﬂections can be made, e.g., to bypass
multiple failures, in arbitrary topologies and without the danger of
loops. That is, routing deﬂections are akin to multi-path routing
schemes.
The rest of this paper is organized as follows. In Section 2 we
motivate routing deﬂections and path selector tags with an example.
In Section 3 we present deﬂection rules that generate alternate paths
within ISPs; we prove them to be loop-free in the appendix.
In
Section 4 we describe how path selector tags are used for routing.
In Section 5, we extend our rules to paths across multiple ISPs. In
Section 6, we evaluate the combination of path selector tags and
deﬂection rules on various network topologies. We then discuss
related work and conclude.
2. DIVERSITY VIA DEFLECTIONS
The key idea of this paper is that a diverse set of end-to-end
paths may be constructed by allowing the routers of a network to
individually “deﬂect” packets by forwarding them off the known
shortest path; end-systems can then select from the available paths
by labeling their packets with hints. The design we present here
realizes this idea with two components: 1) deﬂection rules that
ible with lowest-cost routing: individual routers can be upgraded
across multiple ISPs with no need for coordination. Moreover, end
systems need not know about the network topologies in order to
explore alternative paths. This leads us to suggest how to carry tags
in a manner that is compatible with common IP usage.
Second, deﬂections scale to real-world usage. This is because
they are simple extensions of the shortest-path routing machinery
that is already deployed at ISPs. They do not require additional
messages in the manner of other source routing schemes [27, 15,
28, 6, 4, 3]. And they require no more than a constant factor of
added computation. For example, our rule above only requires in-
formation about its neighbors’ costs to compute its own deﬂection
set. These costs are either already signaled in a distance-vector
routing protocol or can be easily computed in a link-state protocol.
Third, deﬂections are highly robust because they inherit the fail-
ure tolerance of distributed routing algorithms. No centralized pro-
cess is used to compute deﬂection routes, and hence they work as
well as shortest-path routing when the network is partitioned.
2.3 Applications
Our focus in this paper is on how to provide hosts with access to
a diverse set of Internet paths. However, deﬂections are likely to be
useful in other contexts such as local route repair, in which a failure
is masked while new global routes converge. For instance, deﬂec-
tion paths could be selected by routers, rather than end-systems,
to locally bypass faults while news of their existence is globally
suppressed. By construction, this would allow multiple faults to
be bypassed without loops, whereas most local repair schemes [25,
8, 19] target the common case of a single failure and may form
transient loops in other cases. However, deﬂections are not a com-
plete solution as they do not address transient loops due to incon-
sistent forwarding tables. Also, the price for their guarantee of
loop-freedom is that they may not be able to bypass as many sin-
gle faults as schemes with weaker guarantees. Section 7 compares
deﬂections with speciﬁc schemes for local route repair.
3. DEFLECTION RULES
In this section, we present our deﬂection rules from the view-
point of a single ISP network. We describe how deﬂections are
extended across multiple ISPs in Section 5.
Each rule generates a deﬂection set of neighbors that a router can
use to reach particular destinations. Routers can then independently
select any neighbor in their deﬂection sets to use for forwarding;
we describe how hosts can tag packets to inﬂuence this selection in
the next section. We deﬁne our rules in terms of shortest-path costs.
Routers can compute the various shortest path costs as an extension
of whatever routing protocol they run to provide base routing, be it
OSPF, ISIS or a distance vector style of protocol such as RIPv2 or
EIGRP.
For each rule, the key issues we must consider are the correctness
of its deﬂections and how effective they are at providing diversity.
By correct we mean that paths are loop-free (a safety condition) and
reach the destination (a liveness condition). We prove the correct-
ness in the appendix for arbitrary topologies with multiple equal-
cost paths and asymmetric link costs. We study effectiveness via
simulations as part of our evaluation in Section 6.
For all rules, we let ni for i ≥ 0 be the sequence of nodes along
a path, and let cost(ni) be the shortest path cost to reach a given
destination from node ni, by whichever neighbors are on the short-
est path. We omit the destination in the cost function, since it does
not change.
3.1 Rule 1 (One Hop Down)
Our ﬁrst rule was used to motivate deﬂections, and serves as a
strawman for assessing the strength of our other rules: a router can
send to any neighbor provided that the neighbor has a lower cost to
reach the destination. More formally:
Rule 1 (One Hop Down): The deﬂection set for a node ni is
those neighbors ni+1 for which cost(ni+1) < cost(ni).
Intuitively, Rule 1 is loop-free to destinations because the cost
to a destination at each node is strictly decreasing, and will eventu-
ally become zero. Lowest-cost forwarding or Equal Cost Multiple
Path (ECMP) forwarding is a special case of Rule 1. We prove the
correctness of Rule 1 in Appendix A.
Rule 1 is simple to implement at routers. To run Rule 1, each
node needs to obtain costs for its neighbors as well as itself. With
a distance vector protocol the cost information is already signaled
between neighbors. With a link-state protocol, it requires multiple
shortest-path computations, but does not require additional routing
messages. These computations may be run in the background since
shortest-path routes already provide basic connectivity.
Rule 1 is also trivial to deploy in an ISP network on a per router
basis: observe that Rule 1 generalizes shortest path routing by in-
cluding the shortest path neighbors in its deﬂection sets. As a re-
sult, any mixture of routers following either Rule 1 or shortest path
routing are loop-free and reach the destination.
3.2 Rule 2 (Two Hops Down)
The ﬁrst rule provides greater diversity than shortest-path rout-
ing, but it is limited because sometimes there will be very few
choices that cause cost to decrease. Our next rule provides greater
ﬂexibility. It includes all choices allowed by Rule 1 plus that it al-
lows the cost to a destination to increase temporarily provided that
the cost decreases sufﬁciently on the next hop.
Rule 2 (Two Hops Down): The deﬂection set for a node ni is
those neighbors ni+1 for which either of these conditions apply,
subject to the two caveats that follow:
1. cost(ni+1) < cost(ni) [downhill]
2. cost(ni+1) < cost(ni−1) [two-hop]
We remove the incoming interface ni−1 from the deﬂection set
unless the set would otherwise be empty, and we expand the de-
ﬂection set when ni is the initial node by treating cost(ni−1) as
inﬁnity. Both are optimizations. The former case prunes the unin-
teresting deﬂection, in which a packet needlessly returns to a neigh-
bor only to take a different deﬂection. The latter case exploits a
situation that permits all neighbors to be in the deﬂection set.
To see the power of this rule, reconsider our example. Recall that
in sending from Seattle to Kansas City, Rule 1 could not take a long
round route via Los Angeles and avoid Denver entirely. But Rule
2 can. Los Angeles is a valid deﬂection, even though it normally
sends via Sunnyvale, because of the two-hop clause: its cost does
not rise as high as Seattle, which is two hops back. Continuing
on, Los Angeles can then forward to Houston using the downhill
clause, as the cost falls after crossing an expensive link.
In Appendix B, we prove Rule 2 to be loop-free in the sense that
a directional link can be crossed at most once in a deﬂection path.
Intuitively, on the forwarding path, the cost to a destination must
strictly decrease at every two hops. No two-node sequence can re-
peat. Hence, no link-level loop exists. Note that it is possible for a
node to be visited more than once with this rule. We do not consider
this to be a problem because a packet will not be queued twice for
the same interface, and it is interfaces that are the key underlying
resource. Rule 2 also satisﬁes the liveness property because the de-
ﬂection set always contains the shortest path neighbor. Therefore,
a packet will eventually reach its destination.
Rule 2 has a slightly higher implementation cost than Rule 1.
Similar to Rule 1, each node must obtain costs for neighbors. In
addition, forwarding decisions depend on the incoming link (or pre-
vious router) as well as the destination. This is similar to the way
in which routers use source addresses or incoming links to forward
along equal-cost paths and multicast paths [22].
As before, mixtures of nodes that follow Rule 2 or shortest-path
routes provide loop-free routes to their destinations. This follows
because the shortest path neighbor satisﬁes the deﬂection rule.
3.3 Rule 3 (Two Hops Forward)
With Rule 2, it is possible that a node will send uphill to a neigh-
bor that has no alternative but to return the packet. We now con-
struct a new rule that always provides an alternative to immediate
backtracking in the hope that it will increase diversity.
To state Rule 3, we deﬁne the following terms. In the forwarding
path, we let li denote both directions of the incoming link used to
reach ni, i.e., the link connecting ni−1 and ni. Now we let G be the
overall network graph and G\li be the same graph with the link li
removed. These other graphs with incoming links removed are the
key to our rule. To use them, we also need to extend the cost func-
tion to include the graph to which it applies, i.e., cost(G\li, ni) is
the shortest path cost from the node ni to a given destination in the
graph G\li.
Rule 3 (Two Hops Forward): The deﬂection set for a node ni
is comprised of the neighbors ni+1 for which ni+1 (cid:3)= ni−1 and
either:
1. cost(G\li+1, ni+1) < cost(G\li, ni) [downhill]
2. cost(G\li+1, ni+1) < cost(G, ni−1) [two-hop]
Rule 3 eliminates the need of immediate backtracking, because
if ni+1 receives a packet from ni, then cost(G\li+1, ni+1) must
not be inﬁnity. It implies that ni+1 must have a path to reach the
destination without using the backtracking link li+1. Therefore, we
can safely remove the backtracking node ni−1 from the deﬂection
set for all nis.
The ﬁrst clause compares cost(G\li+1, ni+1) with cost(G\li, ni)
rather than cost(G, ni), which might be simpler. This is because
cost(G\li, ni) is the larger quantity and leads to a larger deﬂec-
tion set; if we used cost(G, ni) then Rule 3 would actually have
been a subset of Rule 2. With our rule as stated, neither Rule 2 nor
Rule 3 are subsets of each other, but Rule 3 does allow paths that
Rule 2 does not. In Figure 1, for example, the path Indianapolis,
Kansas City, Huston, Atlanta, is a valid deﬂection path via Rule 3,
but not via Rule 2. This is because excluding the backtracking link
forces the shortest path to follow a more roundabout path to the
destination.
The cost of this increased ﬂexibility of Rule 3 is a slight increase
in the implementation complexity over Rule 2. Speciﬁcally, a node
must now compute costs for its neighbors in related graphs rather
than the same graph. This might be done incrementally in a link-
state implementation. And curiously, as before, we observe that
distance vector protocols can already signal the required informa-
tion. This is because costs from all neighbors but one can be used to
derive costs in the graph with the link to the one neighbor removed.