            return;
        }
        /*向SCM 报告运行状态*/
        ServiceStatus.dwCurrentState =
            SERVICE_RUNNING;
        SetServiceStatus(hStatus, &ServiceStatus);
        /*do something you want to do in this while loop*/
        // TODO
        return;
    }
可以`TODO`部分实现自己的代码，创建并启动该服务之后就会执行该部分代码，后续与攻击者通信部分也是在这实现的。
### 远程管理服务
通过SMB共享可以上传服务文件，但是要创建服务并启动还需要通过服务控制管理器（SCM）管理。如果当前用户要连接另一台计算机上的服务，需要有相应的权限并且进行认证，但是之前连接SMB共享的时候已经通过`WNetAddConnection2`进行认证了，所以不需要再进行认证。
[OpenSCManagerA](https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-openscmanagera)
    SC_HANDLE OpenSCManagerA(
      [in, optional] LPCSTR lpMachineName,      // 目标计算机的名称
      [in, optional] LPCSTR lpDatabaseName,     // 服务控制管理器数据库的名称
      [in]           DWORD  dwDesiredAccess     // 访问权限列表
    );
[OpenServiceA](https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-openservicea)
    SC_HANDLE OpenServiceA(
      [in] SC_HANDLE hSCManager,
      [in] LPCSTR    lpServiceName,
      [in] DWORD     dwDesiredAccess
    );
[CreateServiceA](https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-createservicea)
    SC_HANDLE CreateServiceA(
      [in]            SC_HANDLE hSCManager,
      [in]            LPCSTR    lpServiceName,
      [in, optional]  LPCSTR    lpDisplayName,
      [in]            DWORD     dwDesiredAccess,
      [in]            DWORD     dwServiceType,
      [in]            DWORD     dwStartType,
      [in]            DWORD     dwErrorControl,
      [in, optional]  LPCSTR    lpBinaryPathName,
      [in, optional]  LPCSTR    lpLoadOrderGroup,
      [out, optional] LPDWORD   lpdwTagId,
      [in, optional]  LPCSTR    lpDependencies,
      [in, optional]  LPCSTR    lpServiceStartName,
      [in, optional]  LPCSTR    lpPassword
    );
得到SCM的句柄之后，就可以利用`CreateService`创建服务，再通过调用`StartService`完成整个服务的创建、启动过程。
    BOOL CreateServiceWithSCM(LPCWSTR lpwsSCMServer, LPCWSTR lpwsServiceName, LPCWSTR lpwsServicePath)
    {
        std::wcout 
**命名管道**
命名管道比匿名管道更加灵活，可以在管道服务端和一个或多个管道客户端之间进行单向或双向通信。一个命名管道可以有多个实例，但是每个实例都有自己的缓冲区和句柄。
在PsExec中创建了三个命名管道`stdin、stdout、stderr`
用于攻击者和远程主机之间通信，但笔者为了偷懒，只实现了一个命名管道，输入输出都共用这个管道。
命名管道通信大致和socket通信差不多，下面是整个通信过程以及相应的Windows API：
[
#### 命名管道服务端
关于如何实现命名管道幅度，笔者参考msdn提供的样例代码实现了简单的单线程服务端。
参考代码：
先创建一个命名管道
    int _tmain(VOID) {
        HANDLE hStdoutPipe = INVALID_HANDLE_VALUE;
        LPCTSTR lpszStdoutPipeName = TEXT("\\\\.\\pipe\\PSEXEC");
        if (!CreateStdNamedPipe(&hStdoutPipe, lpszStdoutPipeName)) {
            OutputError(TEXT("CreateStdNamedPipe PSEXEC"), GetLastError());
        }
        _tprintf("[*] CreateNamedPipe successfully!\n");
    }
    BOOL CreateStdNamedPipe(PHANDLE lpPipe, LPCTSTR lpPipeName) {
        *lpPipe = CreateNamedPipe(
            lpPipeName,
            PIPE_ACCESS_DUPLEX,
            PIPE_TYPE_MESSAGE |
            PIPE_READMODE_MESSAGE |
            PIPE_WAIT,
            PIPE_UNLIMITED_INSTANCES,
            BUFSIZE,
            BUFSIZE,
            0,
            NULL);
        return !(*lpPipe == INVALID_HANDLE_VALUE);
    }
之后再等待客户端进行连接
    if (!ConnectNamedPipe(hStdoutPipe, NULL) ? TRUE : (GetLastError() == ERROR_PIPE_CONNECTED)) {
            OutputError("ConnectNamePipe PSEXEC", GetLastError());
            CloseHandle(hStdoutPipe);
            return -1;
    }
    _tprintf("[*] ConnectNamedPipe sucessfully!\n");
客户端连接之后，进入循环一直读取从客户端发来的命令，然后创建子进程执行命令，再通过匿名管道读取执行结果，将结果写入命名管道从而让客户端读取。
    while (true) {
            DWORD cbBytesRead = 0;
            ZeroMemory(pReadBuffer, sizeof(TCHAR) * BUFSIZE);
            // Read message from client.
            if (!ReadFile(hStdoutPipe, pReadBuffer, BUFSIZE, &cbBytesRead, NULL)) {
                OutputError("[!] ReadFile from client failed!\n", GetLastError());
                return -1;
            }
            _tprintf("[*] ReadFile from client successfully. message = %s\n", pReadBuffer);
            /*================= subprocess ================*/
            sprintf_s(lpCommandLine, BUFSIZE, "cmd.exe /c \"%s && exit\"", pReadBuffer);
            _tprintf("[*] Command line %s\n", lpCommandLine);
            if (!CreateProcess(
                NULL,
                lpCommandLine,
                NULL,
                NULL,
                TRUE,
                CREATE_NO_WINDOW,
                NULL,
                NULL,
                &si,
                &pi
            )) {
                OutputError("CreateProcess", GetLastError());
                return -1;
            }
            WaitForSingleObject(pi.hProcess, INFINITE);
            fSuccess = SetNamedPipeHandleState(
                hWritePipe,    // pipe handle 
                &dwMode,  // new pipe mode 
                NULL,     // don't set maximum bytes 
                NULL);    // don't set maximum time 
            ZeroMemory(pWriteBuffer, sizeof(TCHAR) * BUFSIZE);
            fSuccess = ReadFile(hReadPipe, pWriteBuffer, BUFSIZE * sizeof(TCHAR), &cbBytesRead, NULL);
            if (!fSuccess && GetLastError() != ERROR_MORE_DATA) {
                break;
            }
            // Send result to client.
            cbToWritten = (lstrlen(pWriteBuffer) + 1) * sizeof(TCHAR);
            if (!WriteFile(hStdoutPipe, pWriteBuffer, cbBytesRead, &cbToWritten, NULL)) {
                OutputError("WriteFile", GetLastError());
                return -1;
            }
            _tprintf("[*] WriteFile to client successfully!\n");
    }
#### 命名管道客户端
命名管道客户端同样参考msdn提供的代码：
客户端需要先通过`CreateFile`连接到命名管道，然后调用`WaitNamedPipe`等待管道实例是否可用
    HANDLE hStdoutPipe = INVALID_HANDLE_VALUE;
    LPCTSTR lpszStdoutPipeName = TEXT("\\\\.\\pipe\\PSEXEC");
    hStdoutPipe = CreateFile(
            lpszStdoutPipeName,
            GENERIC_READ |
            GENERIC_WRITE,
            0,
            NULL,
            OPEN_EXISTING,
            0,
            NULL);
    // All pipe instances are busy, so wait for 20 seconds.
    if (WaitNamedPipe(lpszStdoutPipeName, 20000)) {
        _tprintf(TEXT("[!] Could not open pipe (PSEXEC): 20 second wait timed out.\n"));
        return -1;
    }
    _tprintf(TEXT("[*] WaitNamedPipe successfully!\n"));
连接命名管道后，同样进入循环交互，将从终端读取的命令写入管道中，等待服务端执行完毕后再从管道中读取执行结果。
    while (true) {
            std::string command;
            std::cout ";
            getline(std::cin, command);
            cbToRead = command.length() * sizeof(TCHAR);
            if (!WriteFile(hStdoutPipe, (LPCVOID)command.c_str(), cbToRead, &cbRead, NULL)) {
                _tprintf(TEXT("[!] WriteFile to server error! GLE = %d\n"), GetLastError());
                break;
            }
            _tprintf(TEXT("[*] WriteFile to server successfully!\n"));
            fSuccess = ReadFile(hStdoutPipe, chBuf, BUFSIZE * sizeof(TCHAR), &cbRead, NULL);
            if (!fSuccess) {
                /*OutputError(TEXT("ReadFile"), GetLastError());*/
                _tprintf("ReadFile error. GLE = %d", GetLastError());
            }
            std::cout 
## 参考链接
  1. 
  2. 
  3. 
* * *