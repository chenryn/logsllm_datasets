18 gauge twisted pair wire "CAN bus backbone" 
Wire nuts 
Tie wraps 
12V DC power source 
Mini Cooper S Instrument Cluster 
18” x 14” board 
2 x 1.5” x 1.625” x 1.25” brackets with bolts 
The first thing we did was mount the hardware onto a self-
contained board. For prototyping purposes we used an 18” x 14” 
wood board to house the platform of our CAN clock. Next we 
needed to mount the Mini Cooper gauges using brackets, screws, 
and bolts (Figure 2-5). 
Figure 2-5: Mounting Mini Cooper instrument cluster to 
platform board 
Since BMW does not publicly disclose CAN message IDs for 
their various ECU devices on passenger vehicles, we apply our 
reverse engineering methodology described in section 2. Using 
this methodology, we now have a pretty solid idea of what 
message IDs and byte offsets are needed to control the display of 
the speedometer and tachometer on the instrument cluster. The 
next step is building a small CAN network and a CAN node 
capable of introducing messages onto the data bus. The first thing 
we need to do is build the CAN bus infrastructure. In adhering to 
the CAN standard, we used about 18 inches of 18 gauge twisted 
pair wire for the actual CAN bus backbone (Figure 2-6). 
Figure 2-6: 18 gauge twisted pair wire being used for the CAN 
bus backbone 
We also terminate both ends of the twisted pair wire by using 120 
Ω terminating resistors at each end to reduce reflection (Figure 2-
7). 
Figure 2-7: Wire terminated with 120 ohm resistors on both 
ends 
We now have our CAN bus backbone built and ready to add 
nodes onto it. 
 Next we attach the Mini Cooper instrument cluster (which 
includes both the speedometer and tachometer) onto the network 
via its CAN data lines. When attempting to use or modify 
hardware that is either unfamiliar or unknown, the first thing that 
should be done is referencing the electrical schematics, if they are 
available. In this case we were able to utilize the Mini Cooper 
electrical schematics from Mitchell1 (www.prodemand.com). 
Mitchell1 maintains an enormous repository full of vehicle service 
manuals, diagnostic codes, and wiring schematics for a majority 
of passenger vehicles. Leveraging this information was necessary 
for identifying the wires coming off of the instrument cluster units 
(Figure 2-8). 
Figure 2-8: Wires coming off of the Mini Cooper instrument 
cluster 
Looking through the 2003 Mini Cooper S service manual, we 
come across the Instrument Cluster Circuit (IKE). In looking at 
the electrical wiring schematics, we are interested in identifying  
wires responsible for 3 things; power, ground, and CAN data. The 
CAN data wires are obviously distinguishable as being the only 
twisted pair wires within the mesh of wires. 
Wires Associated with Power 
Wire 1 BRN/BLK = Ground 
Wire 2 VIO/BLK = 12V power source (HOT IN ACCY, 
RUN AND START) 
Wire 3 BLK/VIO = 12V power source (HOT IN 
START) 
Wire 15 RED/YEL = 12V power source (HOT AT ALL 
TIMES) 
Wire 16 GRN/BLU = 12V power source (HOT IN ON 
OR START) 
CAN Data Lines 
Wire 13 YEL/BRN = CAN-L 
Wire 26 YEL/BLK = CAN-H 
Once these wires were each identified, we striped the wires, 
spliced, and soldered them together accordingly. We striped the 
ends off of the 12V DC power source and tied wires 2, 3, 15, and 
16 of the instrument cluster unit to the positive lead of our power 
source (Figure 2-9). We also tied Wire 1 (ground) to the negative 
lead on our power supply. Next we connect the CAN high and 
low data lines to the network. We splice wires 13 and 26 from our 
instrument cluster into the CAN bus. Notice in Figures 2-9, CAN 
low is the blue wire of the CAN bus and CAN high is the tan. 
After capping our wire leads to both power source and splicing 
CAN node entry points, we can plug in the power source to test 
that the instrument cluster powers on and works properly. If all 
goes correctly a chime can be heard as soon as power is applied. 
Figure 2-9: Splicing instrument cluster wires together with 
CAN bus and 12V power source 
Now that the instrument cluster has successfully been connected 
to the CAN bus, we can configure the node that will be 
responsible for transmitting data to the instrument cluster unit. 
This node will be acting as a rogue device that an attacker could 
use to interact with components on the CAN bus in nefarious 
ways. We will be using an Arduino Uno Rev 3 and a CAN-Shield 
to achieve this (Figure 2-10). 
Figure 2-10: Arduino Uno and CAN shield simulating a rogue 
CAN device 
To interface the CAN shield with the data bus, we will be splicing 
the 18 gauge twisted pair wire from the CAN bus and soldering 
CAN-H and CAN-L wires coming into the pins on the CAN 
shield as shown in Figures 2-11. 
Figure 2-11: CAN shield used to connect to CAN bus 
The Arduino will be powered from the same 12V DC power 
source that powers the instrument cluster. The Arduino Uno 
features a built in voltage regulator at the power port. Considering 
the safety benefit of the voltage regulator, applying 12V of power 
to the Arduino was not an issue as the Arduino Uno specifications 
explicitly 
state 
that 
the 
microcontroller 
can 
handle 
a 
recommended 7 - 12 volts (Figure 2-12). 
Figure 2-12: 12V power source and Arduino voltage regulator 
In order for the Arduino to keep track of accurate time, even when 
the power is disrupted, we will use a real time clock module 
(RTC). The RTC chip is powered with a small battery in order to 
retain the current time in the event of power loss. The Arduino 
will poll the time from the RTC in order to transmit the accurate 
time to the instrument cluster gauges. For demonstration 
purposes, we placed the RTC on a bread board separate from the 
Arduino (Figure 2-13). 
Figure 2-13: RTC used by Arduino to poll accurate time 
Everything up to this point should be connected, and all that 
should be left is to program the microcontroller. Other than the 
standard Arduino libraries, we will primarily be using the 
MCP2515 library to communicate with the CAN controller, and 
SPI library to communicate with the CAN shield using the serial 
peripheral interface. The MCP2515 library allows us to construct 
our own CAN Frame objects that can be transmitted over onto the 
CAN bus. (See http://tucrrc.utulsa.edu/canclock/ for complete 
listing of source code) 
We will also be using the Wire.h and RTClib.h libraries to 
communicate with the RTC module.  
For purposes of demonstration, the microcontroller was 
configured to work in two modes of operation that can easily be 
toggled by using the joystick click button on the CAN-Shield; 
Clock Mode, and Demo Mode (Figure 2-14). Clock mode 
obviously polls the time from the RTC to display the current time 
on the instrument cluster gauges via the CAN bus, and demo 
mode is used to increment the needles on the gauges arbitrarily to 
demonstrate the dynamic manipulation of CAN traffic. The final 
product (CAN Clock) is shown below showing a time of 2:47 
p.m. (Figure 2-15). 
Figure 2-14: Joystick button used to toggle between clock 
mode and demo mode 
Figure 2-15: Mini Cooper CAN clock final product 
3. DISCUSSION 
The CAN clock proof of concept demonstrates how easy it could 
be for an attacker to manipulate ECM components on passenger 
vehicles. As newer vehicles begin to add more functionality and 
interconnection options, the attack surface will continue to grow 
as well. Other research has demonstrated attacks effecting the 
availability of ECMs on the CAN network. In 2010, researchers at 
The University of Washington and The University of California, 
San Diego effectively flooded the CAN network with traffic 
causing a denial of service (DoS) against all connected 
components, which rendered much of the car, including the 
braking system useless [2]. 
Methods for mitigating spoofed message attacks, and attacks that 
affect availability of the CAN bus need to be considered when 
designing and engineering ECUs. To counter the possibility of 
such attacks, conventional network security concepts, techniques, 
and devices such as firewalls, and intrusion detection/prevention 
systems should be considered being applied to CAN. Perhaps 
some form of a CAN based firewall or anomaly based network 
intrusion prevention system could be implemented on vehicles 
that mitigate such attacks from occurring. Although one of the 
advantages of CAN is for all nodes on the same bus to receive a 
message, regardless of what device it is intended for, some CAN 
components should never be allowed to communicate with other 
CAN components, or at least send certain messages between one 
another (e.g. infotainment systems to brake controller unit). The 
notion of a firewall from conventional network security could be 
applied by using access control lists between various networks, or 
even ECUs on vehicles. 
Although it may seem that solving these problems with anomaly 
based intrusion detection systems could be a trivial method of 
using existing methods from TCP/IP based anomaly IDSs, it 
actually would not be as straight forward. Conventional, anomaly 
based intrusion detection systems are developed and used within a 
network to detect statistical deviations from prior baselines. 
However, with the dynamic nature of vehicle networks, there 
could be numerous instances when otherwise normal activities 
would violate this baseline due to unexpected physical events, 
including vehicle collisions, sudden acceleration/deceleration, etc.  
CAN devices such as ECUs need to have security mechanisms 
built in that are similarly modeled after modern day computer 
network security systems such as access control devices, and 
intrusion detection systems, but not to the extent that they intrude 
on the reliability of CAN. Finding a compromise between 
security, reliability, and efficiency of CAN systems are all factors 
that need to be considered for future research into vehicle network 
systems. 
It is well understood that if someone has physical access to a 
device, all bets are off with regards to security. As such, these 
vehicle data lines of communication should be considered 
untrusted and treated as such. Methods of encrypting channels of 
communication on CAN could be considered, but that would 
ultimately hinder the speed and reliability advantages provided by 
CAN. For the time being, automobile consumers have no choice 
but to rely on physical security of automobiles, and security 
through obscurity provided by the manufacture proprietary CAN 
message IDs. 
4.  CONCLUSION 
This work described a methodology for reverse engineering 
proprietary CAN message IDs on passenger vehicles. This 
methodology is modular enough to be applied to other passenger 
vehicles with CAN networks. We have demonstrated how to 
identify message IDs of interest by analyzing CAN data provided 
by a data log of a 2003 Mini Cooper. We also developed a proof 
of concept in which we built a CAN network from scratch, and 
manipulated the Mini Cooper's instrument cluster speedometer 
and tachometer, turning them into a functional clock. 
Although we are only manipulating the instrument cluster gauges, 
there is no reason to believe these methods couldn't be applied to 
other ECMs on the vehicle, including critical devices such as the 
ABS braking system, accelerator, lighting system, wireless locks, 
etc. We have thoroughly demonstrated that security through 
obscurity fails when the attacker has physical access to the 
vehicle. Future work will look into the areas of monitoring CANs 
including possibly introducing the use of customized CAN 
firewalls and intrusion prevention systems. 
4. REFERENCES 
[1] Bosch, C. A. N. (1991). Specification version 2.0. Published 
by Robert Bosch GmbH (September 1991). 
[2] Koscher, K., Czeskis, A., Roesner, F., Patel, S., Kohno, T., 
Checkoway, S., ... & Savage, S. (2010, May). Experimental 
security analysis of a modern automobile. In Security and 
Privacy (SP), 2010 IEEE Symposium on (pp. 447-462). 
IEEE. 
[3] Checkoway, S., McCoy, D., Kantor, B., Anderson, D., 
Shacham, H., Savage, S., ... & Kohno, T. (2011, August). 
Comprehensive experimental analyses of automotive attack 
surfaces. In Proceedings of the 20th USENIX conference on 
Security (pp. 6-6). USENIX Association. 
[4] Davis, R. I., Burns, A., Bril, R. J., & Lukkien, J. J. (2007). 
Controller Area Network (CAN) schedulability analysis: 
Refuted, revisited and revised. Real-Time Systems, 35(3), 
239-272.