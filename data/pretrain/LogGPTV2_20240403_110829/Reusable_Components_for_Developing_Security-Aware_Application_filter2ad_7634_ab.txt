that  offers 
authorization and access control for system-wide security 
policy  maintenance.  JSEF  especially  addresses 
the 
security  of  mobile  code.  JSEF  offers  role-based  access 
control  including  a  rich  set  of  possible  constraints. 
Additive  and  subtractive  hierarchies  of  user  groups  are 
provided as well as global and local security policies that 
are defined using XML. However, JSEF is concentrating 
on protecting mobile code. Authentication and auditing is 
based  on  the  underlying  Java  platform  and  not  part  of 
JSEF.  Furthermore,  multiple  access  control  models  are 
not  supported.  Nevertheless,  JSEF  has  interesting  ideas 
concerning  a  system-wide  security  policy  that  is  able  to 
merge local and global policy settings. 
Kava  [8]  is  a  security  infrastructure  that  uses  meta-
object  protocols  to  provide  flexible  and  fine-grained 
control over the execution of components. By developing 
a  meta-level  security  architecture  various  real-world 
security  models  can  be  realized  for  Java.  Kava  inserts 
security  checks  directly  into  compiled  code,  which 
prevents modifications to existing code. The meta-object 
protocol  is  based  on  a  reflexive  extension  to  the  Java 
runtime  that  gives  the  control  over  the  behavior  of 
components. The approach uses byte-code transformation 
so  that  the  meta-object  protocol  has  control  over  the 
components  executed  in  a  meta-layer. Kava comes with 
an 
security 
mechanisms and supports multiple access control models. 
However, the transformation of the compiled code is not 
transparent 
in 
unforeseeable  behavior  of  the  application.  Furthermore, 
the  developer  and  might  result 
expressiveness 
enforcement 
its 
of 
to 
authentication  and  auditing  is  not  supported  by  Kava 
itself since it concentrates on authorization. 
2.1.3  Programming  Environments.  We  investigated 
today’s  most  important  programming  environments, 
namely, Sun’s Java 2 platform [9], [10] and Microsoft’s 
.NET environment [11]. 
to  access 
resources  outside 
Java’s  best-known  security  feature  is  the  sandbox 
model. Code is executed in a protected environment and 
is  not  allowed 
this 
environment. Furthermore, code is categorized according 
to  its  origin  into  so-called  protection  domains  based  on 
digital  signatures.  Privileges  can  be  assigned  to  these 
protection  domains,  allowing  local  code  to  access  more 
resources  and  restrict  mobile  code.  However,  Java  does 
not  support  security  at  a  higher  logical  level  by  itself. 
More  complex  mechanisms  are  provided  as  add-on 
libraries (e.g. the Java Authentication and Authorization 
Service  (JAAS))  that  neatly  integrate  into  the  Java 
environment.  Nevertheless,  adequate  security  models  (a 
variant  of  RBAC)  are  only  provided  within  the  Java  2 
Enterprise  Edition  (J2EE),  the  Standard  Edition  (J2SE) 
lacks of these features. 
Microsoft’s .NET environment offers a wide variety of 
security  features.  The  evidence-based  security  evaluates 
the  code’s  privileges  at  runtime.  The  privileges  result 
from  digital  signed  code,  the  identity  of  the  software 
developer or the code’s origin. .NET offers a role-based 
access  control  system  and  security  mechanisms  such  as 
Kerberos  authentication  or  various  cryptographic 
algorithms.  Within  the  .NET  framework,  security  is 
realized  in  the  business  objects  itself.  These  objects  are 
extended with code that verifies access. Developers have 
to perform checks based on the role of their future users. 
This results in inflexibility since roles have to be defined 
before  implementation  is  done  and  cannot  be  changed 
later  on  without  modification  within 
the  code. 
Furthermore,  reuse  of  objects  is  more  difficult  since 
security 
from 
application to application. 
Java  and 
.NET  are  programming 
environments  that  offer  strong  security  mechanisms 
(such  as  cryptographic  components)  at  a  lower  logical 
level.  Mechanisms  at  a  higher  logical  level  are  missing 
(J2SE),  require  a  special  architecture  (J2EE)  or  have  to 
be realized directly in the business objects. 
requirements  and 
roles  will  vary 
Generally, 
2.1.4. Our Approach. Our approach tries to relieve the 
application  developer  of  the  burden  to  think  about 
security  issues  when  implementing  his/her  business 
objects.  The  application  itself  should  be  security-aware; 
to  new  security  requirements  should  be 
adoptions 
possible  without  having 
the 
to  recode  or  modify 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
application.  Our  approach  separates  the  authorization 
model  from  the  application.  Objects  themselves  do  not 
know  much  about  security;  they  are  protected  by  the 
environment.  The  protection  settings  can  be  modified 
according to the actual security needs and objects can be 
reused in any other kind of application. Furthermore, our 
approach does not require any special infrastructure and 
can  be  realized  on  various  platforms  and  architectures. 
Finally, none of the approaches mentioned in this section 
allows to flexibly restrict authorization by constraints as 
realized within our approach. 
3. The Framework Components 
In this section we provide an overview of the different 
framework  components,  their  functionality,  and  their 
relationships to other components.  
Figure 4 Overview of framework components. 
The  following  sub-sections  explain  the  framework 
components  grouped  by  their  functionality.  For  the 
overall picture compare Figure 4. 
3.1. Main Components 
For  providing  high-level  security  mechanisms  the 
framework  offers  one  central  coordination  component 
(i.e.  security  manager)  and  three  specific  components 
corresponding  to  authentication,  access  control,  and 
auditing. Within this work, the focus is on access control 
components. 
3.1.1.  Security  Manager.  The  SecurityManager 
component controls all other security components of the 
framework. The application posts requests to the security 
to 
is 
the 
these 
requests 
task  of 
the 
manager,  which  dispatches 
corresponding  components.  Only  the  security  manager 
knows  which  components  are  initialized  and  running. 
Thus,  it  is  the  central  information  point  for  any 
application.  In  particular,  the  security  manager  handles 
the interaction between the authentication, access control 
and  auditing  components  of  the  framework.  However, 
each machine serving a distributed application may have 
its own security manager adhering to a centrally defined 
common 
security  policy.  This  allows  addressing 
performance issues in distributed environments. 
3.1.2.  Authentication.  The  Authenticator  component  is 
responsible  for  ensuring  correct  authentication  upon 
which  further  access  controls  will  be  based.  The 
authenticator checks the subject’s identity based upon an 
identifier. The framework does not require a special kind 
of identifier, thus the software developer can use various 
authentication  mechanisms.  It 
the 
authenticator  to  validate  the  identifier  according  to  the 
method used. The framework currently offers password-
based  authentication,  which  will  be  extended  in  future 
releases.  
3.1.3.  Access  Controller.  The  AccessController 
component is responsible for controlling access to objects 
according to a particular access control model and based 
on a valid authentication. This component together with 
its  required  infrastructure  components  are  described  in 
detail within sub-section 3.2. 
3.1.4. Auditing. A security framework has to be able to 
track  security  relevant  activities.  Thus,  the  framework 
provides  a  flexible  audit  trail  mechanism  that  gathers 
messages  from  all  other  components  and  optionally 
dispatches  them  to  multiple  output  media.  The  auditing 
system allows online filtering of messages for each output 
media.  This  can  be  used  for  printing  critical  messages 
directly  on  the  screen  and  all  other  information  in  a 
database,  for  instance.  Each  output  media  requires  an 
audit handler that is aware of the media’s specialties. It is 
also  feasible  to  provide  a  special  audit  handler  that 
performs online analysis of the audit messages and builds 
the base for an intrusion detection system. 
3.2. Access Control Components 
We  now  want  to  explain  those  components  in  more 
detail that are related to access control. 
3.2.1. Access Control Model. The AccessControlModel 
component is the abstract base class for a concrete access 
control model. It collects subjects, objects, authorizations, 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
and  constraints  from  data  provider  components  and 
transfers them into the authorization base. The model is 
aware  of  an  underlying  closure  assumption  (open  or 
closed world) when performing access validation, which 
affects the way that final access decisions are made. 
When the access controller contacts the access control 
model  for  handling  an  access  request, 
the  model 
generates  a  search  pattern  that  contains  the  requesting 
subject  and  the  object  to  which  access  is  requested.  It 
then  forwards  the  pattern  to  the  model’s  authorization 
base where rules are searched and analyzed. Depending 
on the rules one of the following results is returned to the 
access controller: 
•  True: if a rule is found and access is granted, i.e. the 
subject has a corresponding permission on the object 
•  False: if a rule is found and access is denied, i.e. a 
prohibition  denies  access  from  the  subject  to  the 
object 
•  Weak  True:  if  there  is  no  rule  found  in  an  open 
world assumption 
•  Weak  False:  if  there  is  no  rule  found  in  a  closed 
world assumption 
Finally,  the  model  is  responsible  for  model  specific 
tasks  that  are  often  realized  in  additional  helper  classes 
(such  as  role  activation,  ownership,  or  delegation  of 
access rights). 
In  our  framework  we  currently  support  two  types  of 
access  rules.  General  rules  are  assigned  to  object 
instances,  including  all  data  within  the  object  and  its 
methods. Authorizations on this level grant for example 
access to data stored within the object. The second type of 
rules  are  specific  rules.  These  rules  are  assigned  to  a 
certain  object’s  method.  The  rule  applies  only  to  this 
method, all other methods of an object are unaffected.  
3.2.2.  Access  Control  Context.  The  AccessControl-
Context is an abstract component that captures meta data 
needed by various other components when making access 
control  decisions.  The  particular  structure  has  to  be 
defined as required by the access control model. 
3.2.3.  Autorization  Base.  The  AuthorizationBase 
component  realizes  a  storage  holding 
tuples  with 
references  to  a  subject,  an  object,  optionally  a  class  or 
method,  a  certain  authorization  and  an  optional  list  of 
constraints.  Each  tuple  is  a  rule  that  describes  how  a 
subject may access an object, a class or a method based 
on  an  authorization  and  constraints.  When  the  defined 
subject  requests  access  to  an  object,  all  matching  rules 
are  considered  and  the  authorizations’  as  well  as 
constraints’ checkAccess methods are called.  
Each  access  control  model  has  its  own  authorization 
base. Thus, different types of access control models might 
have to realize an adapted authorization base, in order to 
capture its particular functionality. 
3.3. Infrastructure Components 
The components described within this sub-section are 
required by any of the main components especially by the 
access control components in order to enforce their tasks. 
• 
3.3.1.  Subject.  The  Subject  component  realizes  actors 
and entities of the system, such as persons, processes or 
access  control  model  specific  entities  (e.g.  roles),  each 
represented by an adequate sub-class that possible has to 
be derived and implemented. 
When  a  subject  wants  to  execute  a  method  on  an 
object, which requires access to another object, basically 
two options can be followed: 
• 
the  object  becomes  a  subject  and  access  control  is 
done  by  verifying  the  corresponding  object’s  access 
rights, or 
the  first  object  is  calling  the  method  of  the  second 
object  on  the  behalf  of  the  subject.  Therefore,  the 
subject  has  to  have  sufficient  access  rights  itself  to 
fulfill the task (transitive access). 
When  accessing  an  object  transitively,  the  subject  of 
the first object is used for evaluating access. This subject, 
as a part of the request parameters, is stored in the access 
control  context.  When  access  to  the  second  object  is 
requested,  the  access  controller  can  retrieve  the  subject 
from the access control context and check whether or not 
the  subject  is  allowed  to  call  the  method  on  the  second 
object. In that case the transitively accessed objects trust 
the  security  framework  to  correctly  authenticate  the 
originating subject. 
3.3.2.  Secure  Object.  The  SecureObject  component  is 
the base class for all objects, which need to be protected 
within the framework. In order to ensure enforcement, it 
is  necessary  that  a  client  does  not  obtain  a  direct 
reference to the object. By hiding the constructor, only a 
privileged component can create an instance of a secure 
object.  This  component  returns  a  SecureObjectWrapper 
as a proxy instead of the object itself. The object can only 
be  accessed  by  the  proxy  object,  which  guarantees  that 
security checks are called before the object is accessed. 
In order to use secure object wrappers, there has to be 
a  central  component  that  is  aware  of  generating  these 