in(cid:128)ltration miner in their own pool, even if they received a block
from an external miner (cid:128)rst.
10.2 Detecting FAW Attacks and Attackers
We showed that FAW a(cid:138)acks provide greater rewards to a(cid:138)ackers
than existing BWH a(cid:138)acks. From the target pool’s perspective,
detecting in(cid:128)ltration mining and identifying the a(cid:138)acker are impor-
tant. Indeed, the FAW a(cid:138)ack is easier to detect than the BWH a(cid:138)ack
because of the high fork rate. Additionally, the manager should
suspect and expel any miner who submits stale FPoWs, rather than
paying out the reward for the current round. Note that rewards
for previous rounds cannot be returned to the manager because
of the properties of Bitcoin. (cid:140)e a(cid:138)acker may easily launch the
a(cid:138)ack using many Sybil nodes with many churns, replacing the
expelled miner. (cid:140)is strategy allows the a(cid:138)acker to receive rewards
without being greatly a(cid:130)ected by the manager behavior, even if her
FAW a(cid:138)ack is detected and her in(cid:128)ltration miner is expelled. For
example, assuming that an a(cid:138)acker in(cid:128)ltrates a target pool with L
in(cid:128)ltration miners, each with di(cid:130)erent worker ID and password, if
the L-th in(cid:128)ltration miner is detected by the manager, the remain-
ing L − 1 miners can still earn rewards. (cid:140)en the a(cid:138)acker’s reward
β
+
1 − τ α
·
(L − d)τ α
Lβ + (L − d)τ α
is lower bounded by
(1 − τ)α
1 − τ α
Lβ + τ α(L − d − 1) .
Here d is de(cid:128)ned as the average number of FPoWs, which are
submi(cid:138)ed by in(cid:128)ltration miners for a while untill the pool earns
the reward for one block, and but not selected as the main chain.
(cid:140)e value of d can be expressed as
+cτ α · 1 − α − β
1 − τ α
(L − d − 1)τ α
·
(1 − c)γ α(1 − α − β)
β + cγ α(1 − α − β) .
(cid:140)erefore, the more in(cid:128)ltration miners are used (i.e., the more L
increases), the less detection a(cid:130)ects the a(cid:138)acker. She may continue
the FAW a(cid:138)ack by substituting the L-th miner with another in(cid:128)l-
tration miner. (cid:140)us, the FAW a(cid:138)acker’s reward is still be(cid:138)er than
the BWH a(cid:138)acker’s for a properly chosen L because the minimum
value of c is positive in practice. Additionally, an a(cid:138)acker can twist
the FAW a(cid:138)ack by propagating the withheld FPoW only when she
notices external block propagation faster than the manager if the
manager is honest. Also, she can hide her IP address by using
hidden services such as Tor.
10.3 Countermeasures
Even if we focus on the FAW a(cid:138)ack against Bitcoin, other proof-of-
work cryptocurrencies such as Ethereum [38], Litecoin [22], Doge-
coin [14], and Permacoin [27] are also vulnerable to the FAW a(cid:138)ack.
Especially, Ethereum adopts a protocol based on GHOST [36] un-
like Bitcoin. (cid:140)erefore, the FAW a(cid:138)acker’s reward in the case of
Ethereum should be recalculated. Because the FAW a(cid:138)ack breaks
the dilemma and is more practical than sel(cid:128)sh mining, it can be
launched from large pools in these cryptocurrencies.
We discuss possible countermeasures against the FAW a(cid:138)ack.
First, an approach must satisfy backward compatibility in order to
be a practical defense mechanism. Backward compatibility means
miners who have not upgraded their mining hardware can still
mine a(cid:137)er the measures are implemented [39], retaining miners’
current mining hardware investments [17]. (cid:140)is is important be-
cause Bitcoin’s security is directly related to total mining power.
(cid:140)erefore, it is impractical to make a major change to the Bitcoin
protocol for defense. (cid:140)e two-phase PoW protocol, called Oblivious
Shares, presented by Rosenfeld [34] which can defend against both
BWH and FAW a(cid:138)acks is impractical on these grounds.
Second, to prevent FAW a(cid:138)acks, it is not su(cid:129)cient to just detect
the in(cid:128)ltration miner. As described in Section 10.2, detection rarely
a(cid:130)ects the FAW a(cid:138)acker. For detection, one may consider the
following mechanism:
“Mining pool managers could provide a beacon value that is up-
dated very frequently (i.e., every couple of seconds) and only give
points for PPoWs that include a recent beacon value.”
(cid:140)is defense has an e(cid:130)ect only when an a(cid:138)acker notices external
block propagation faster than the manager, subsequently propagat-
ing a withheld FPoW. (If the a(cid:138)acker notices the propagation a(cid:137)er
the manager, the manager already knows that the FPoW is stale.)
In this case, the manager may notice the FPoW is stale because it
includes a stale beacon value. However, the manager would still
propagate a valid block based on the FPoW. Note that this credible
behavior does not deviate from Bitcoin protocol because the man-
ager received the internal FPoW before the external one. (cid:140)en, as
mentioned in Section 10.2, the remaining in(cid:128)ltration miners (e.g.,
L−1 in(cid:128)ltration miners in Section 10.2) receive a reward even if the
in(cid:128)ltration miner (e.g., the L-th in(cid:128)ltration miner), who submi(cid:138)ed
the FPoW, is expelled. As a result, the a(cid:138)acker still earns a higher
reward than the BWH a(cid:138)acker.
Another two-phase PoW [17] proposed by Eyal and Sirer can
be used to defend against FAW a(cid:138)acks. (cid:140)is defense has be(cid:138)er
backward compatibility than Rosenfeld’s Oblivious Shares [34]. In
both schemes, a miner does not know whether his PPoW is a valid
block because generating a PoW is divided into two steps. However,
the Bitcoin community would not like to adopt the two-phase PoW
proposed by Eyal and Sirer as well [15]. Such an approach would
be inconvenient for closed pools and solo miners who are not con-
cerned about being targets of BWH and FAW a(cid:138)acks. For pool
managers, this protocol increases the cost of pool operation. More-
over, pool miners are concerned about block withholding by pool
managers. A rational manager can waste miners’ power by with-
holding blocks in her pool and then earn higher rewards through
solo mining. If the malicious manager throws away all blocks found
by miners, miners can detect it in a short time period. However,
when the manager throws away just a part of the blocks (e.g., 5%),
miners cannot detect it for a long time. Such behavior can be seen
as a new variant of the BWH a(cid:138)ack. As a result, two-phase PoW
proposed by Eyal and Sirer is hardly suitable for adoption by the
Bitcoin system. Note that Oblivious Shares also has drawbacks
described above.
Eyal [15] and Luu et al. [24] have introduced several countermea-
sures against BWH a(cid:138)acks. A joining fee was one such measure,
but Eyal concluded that miners prefer (cid:131)exibility. A honeypot trap
was also proposed, but the idea was quickly dropped due to high
overhead. Moreover, even if this idea is practical, BWH and FAW
a(cid:138)acks can still be pro(cid:128)table if an a(cid:138)acker uses many (L) in(cid:128)ltration
miners. As established in Section 10.2, the remaining L − 1 miners
can still receive rewards even if the L-th miner is detected. Indeed,
the reward for a BWH a(cid:138)acker given the honeypot trap is lower
bounded by
(1 − τ)α
1 − τ α
Lβ + (L − d)τ α
γ α(1 − γ α)
(L − d)τ α
1 − τ α
if d =
+
β
β
·
.
Both studies also proposed new reward systems to incentivize min-
ers to submit FPoWs immediately. To prevent FAW a(cid:138)acks, we may
consider a new reward system. A pool miner who (cid:128)nds an FPoW
(as opposed to a PPoW) can receive a bonus from the manager. If,
for example, the manager receives 1 BTC for each block, the miner
who (cid:128)nds an FPoW may receive 0.1 BTC, with 0.9 BTC distributed
among all miners in proportion to their work shares. (cid:140)eorem 10.1
shows this defensive reward scheme against FAW a(cid:138)acks.
Theorem 10.1. If a reward fraction t of the total reward (e.g., 1
BTC) for one valid block is given to the miner who (cid:128)nds an FPoW,
then the a(cid:136)acker’s reward, Ra, is
(1−τ)α
1−τ α
1−τ α · (1 − t) ·
+ β
τ α
β +τ α
+ cτ α · 1−α−β
1−τ α · (t + (1 − t) τ α
β +τ β ).
(8)
When the manager chooses
t ≥
1
2(1 − cmax(1 − P))
for the pool’s current computational power, P, Ra is always less than
α.
Proof Sketch. (cid:140)e a(cid:138)acker can still earn the reward (1−τ)α
1−τ α
through innocent mining. When an honest miner (cid:128)nds an FPoW
in the target pool, she gets paid a fraction of the reward 1 − t
according to her in(cid:128)ltration mining power. Because the probability
that an honest miner (cid:128)nds an FPoW in the target pool is
, the
a(cid:138)acker’s reward from the case is
β
1−τ α
β
1 − τ α
· (1 − t) ·
τ α
β + τ α .
Next, if she submits an FPoW in order to generate a fork, she can
receive the reward including t. (cid:140)erefore, the a(cid:138)acker’s reward for
the case is
cτ α · 1 − α − β
1 − τ α
· (t + (1 − t)
τ α
β + τ β
).
Considering above all cases, the total reward Ra for the a(cid:138)acker is
Eq. (8).
(cid:140)en we (cid:128)nd the condition for t which makes Ra less than the
reward Rh of an honest miner, who possesses the computational
power, α.
(1−τ)α
1−τ α
1−τ α · (t + (1 − t) τ α
1−τ α · (1 − t) ·
+ β
+ cτ α · 1−α−β
β +τ β ) < α
τ α
β +τ α
2
2
2
2
2
α
α + cτ
α + cτ
α(1 − α − β)
(1 − τ α)(β + τ α)
− t
α(1 − α − β) + τ α β + τ
2
2 + α β
βτ − cτ β(1 − α − β)
(1 − τ α)(β + τ α) < 1
< t βτ(1 − c(1 − α − β))
(9)
⇔ β + τ α − τ
⇔ −τ
⇔ τ α(c(1 − α − β) − 1) + τ α
β(1 − c(1 − α − β))
(cid:140)erefore, for Ra to be less than α, t has to satisfy Eq. (9) for all
possible values of τ and c. (Note that the range of τ is between 0
and 1, and c ranges from 0 to cmax .) In other words, t has to be
greater than the maximum of the le(cid:137)-hand side of Eq. (9) for τ and
c. (cid:140)e maximum can be derived as follows.
τ α(c(1 − α − β) − 1) + τ α
β(1 − c(1 − α − β))
< t
(cid:19)
2 + α β
(cid:18) α(1 − c) + c(1 − β) − 1
1 − c(1 − α − β)
1 − c(1 − α − β) (∵ α(1 − c) + c(1 − β) ≤ 1
1 − cmax(1 − α − β)
β(1 − c(1 − α − β))
α
+
α
α
= τ α
≤
≤
2(1 − c) + c ≤ 1)
(cid:140)us, the condition of t needed to prevent the FAW a(cid:138)ack are
α
1 − cmax(1 − α − β) ≤ t .
(10)
(cid:140)e le(cid:137)-hand side of Eq. (10) is the same as the computational
power α of an a(cid:138)acker when cmax is zero. (cid:140)is particular case
is equivalent to a defensive reward system for the BWH a(cid:138)ack
proposed by Luu et al. [24].
Indeed, because the manager does not know who the a(cid:138)acker is,
he does not know either α or β. However, he can know β +τ α as his
pool’s current computational power. (cid:140)us, we express the condition
of t as an equation related to the current pool’s computational
power. When the pool’s current computational power is P, the
le(cid:137)-hand side of Eq. (10) is upper bounded by
Because α is less than 0.5, the value is less than
1 − cmax(1 − P) .
α
1
2(1 − cmax(1 − P)) .
(11)
As a result, if t is greater than Eq. (11), Ra is less than α.
(cid:3)
(cid:140)is theorem shows that the manager can make honest mining
more pro(cid:128)table than the FAW a(cid:138)ack by choosing t properly. Un-
fortunately, miners may hesitate to join pools using this reward
system because of the high reward variance. We may also consider
a reward system in which pool miners get a wage for multiple