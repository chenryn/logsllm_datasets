本文是[OATmeal on the Universal Cereal Bus: Exploiting Android phones over
USB](https://googleprojectzero.blogspot.com/2018/09/oatmeal-on-universal-cereal-bus.html)的翻译文章。
# 前言
最近，围绕智能手机的物理攻击主题引起了一些关注，其中攻击者能通过usb设备连接到被锁定的手机并访问存储在设备上的数据。
此文章描述了如何针对Android设备执行此类攻击（使用Pixel 2进行测试）。
Android手机启动并解锁后（在较新的设备上，使用“解锁所有功能和数据”;在旧设备上，使用“启动Android，输入密码”），它保留了用于解密内核内存中文件的加密密钥，即使屏幕被锁定，加密文件系统区域或分区仍然可访问。因此，攻击者在有足够权限的上下文中能获得在锁定设备上执行代码的能力，而且不仅可以取得设备后门，还可以直接访问用户数据。  
（警告：当具有工作资料的用户切换工作资料时，我们没有研究工作资料数据会发生什么。）
本博文中引用的错误报告以及相应的概念验证代码可在以下位置获得：  
（“通过注入blkid的输出遍历USB目录”）  
 （“privesc
zygote-> init;USB链”）  
这些问题被修复为[CVE-2018-9445](https://source.android.com/security/bulletin/2018-08-01)（在补丁级别2018-08-01处修复）和[CVE-2018-9488](https://source.android.com/security/bulletin/2018-09-01#system)（在补丁级别2018-09-01处修复）。
# 攻击面([The attack
surface](https://zh.wikipedia.org/wiki/%E6%94%BB%E5%87%BB%E8%A1%A8%E9%9D%A2))
许多Android手机支持USB主机模式（通常使用OTG适配器）。 这允许手机连接到多种类型的USB设备（此列表不一定完整）：
  * U盘：当U盘插入Android手机时，用户可以在系统和U盘之间复制文件。 即使设备被锁定，P之前的Android版本仍将尝试安装U盘。 （在报告了这些问题后发布的Android 9，具有在设备锁定时阻止安装U盘的逻辑。）
  * USB键盘和鼠标：Android支持使用外部输入设备而不是使用触摸屏。 这也适用于锁屏（例如用于输入PIN）。
  * USB以太网适配器：当USB以太网适配器连接到Android手机时，手机将尝试连接到有线网络，使用DHCP获取IP地址。 如果手机已锁定，这也适用。
本文主要关注U盘，安装不受信任的U盘可在高权限系统组件中提供非常重要的攻击面：内核必须使用包含SCSI子集的协议与USB大容量存储设备通信，解析其分区表，并使用内核的文件系统实现来解释分区内容;用户空间代码必须标识文件系统类型并指示内核将设备安装到某个位置。在Android上，用户空间实现主要是在vold中（[其中一个进程被认为具有内核等效权限](https://source.android.com/security/overview/updates-resources#process_types)），例如，它使用限制性SELinux域中的单独进程来确定U盘上分区的文件系统类型。
# BUG(第一部分)：确定分区属性
在插入U盘后，vold确定了设备上的分区列表，它会试图识别每个分区的三个属性：Label（描述分区用户可读的字符串），UUID（可用于确定U盘是否是之前已插入设备的唯一标识符），和文件系统类型。  
在现代GPT分区方案中，这些属性大多可以存储自分区表本身中，然而，U盘更倾向于使用MBR分区方案，而不能存储UUID和标签。对于普通U盘，Android支持MBR分区方案和GPT分区方案。
为了提供标记分区并为其分配UUID的能力，即使使用MBR分区方案，文件系统也实现了一个hack：文件系统头包含这些属性的字段，允许已确定文件系统类型的实现，并知道特定文件系统的头布局以特定的方式提取此信息。当vold想要确定标签，UUID和文件系统类型时，它会调用blkid_untrusted
SELinux域中的/system/bin/blkid，它正是这样做的：首先，它尝试使用magic来识别文件系统类型，并（尝试失败）一些启发式，然后，它提取标签和UUID。  
它以下列格式将结果打印到stdout：
    /dev/block/sda1: LABEL="" UUID="" TYPE=""
但是，Android使用的blkid版本没有转义标签字符串，负责解析blkid输出的代码仅扫描第一次出现的UUID =“和TYPE =”。
因此，通过创建具有精心制作标签的分区，可以获得对UUID的控制并返回返回到vold的字符串，否则它将始终是有效的UUID字符串和一组固定类型字符串之一。
# BUG(第二部分)：挂载文件系统
当vold确定新插入的带有MBR分区表的U盘包含vfat类型的分区时，内核的vfat文件系统实现应该是可以挂载的，`PublicVolume ::
doMount()`根据文件系统UUID构造一个装载路径，然后尝试确保mountpoint目录存在且具有适当的所有权和模式，然后尝试在该目录上挂载：
    if (mFsType != "vfat") {
           LOG(ERROR) << getId() << " unsupported filesystem " << mFsType;
           return -EIO;
       }
       if (vfat::Check(mDevPath)) {
           LOG(ERROR) << getId() << " failed filesystem check";
           return -EIO;
       }
       // Use UUID as stable name, if available
       std::string stableName = getId();
       if (!mFsUuid.empty()) {
           stableName = mFsUuid;
       }
       mRawPath = StringPrintf("/mnt/media_rw/%s", stableName.c_str());
       [...]
       if (fs_prepare_dir(mRawPath.c_str(), 0700, AID_ROOT, AID_ROOT)) {
           PLOG(ERROR) << getId() << " failed to create mount points";
           return -errno;
       }
       if (vfat::Mount(mDevPath, mRawPath, false, false, false,
               AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
           PLOG(ERROR) << getId() << " failed to mount " << mDevPath;
           return -EIO;
       }
使用格式化字符串确定装载路径，而不对blkid提供的UUID字符串进行任何健全性检查。
因此，控制UUID字符串的攻击者可以执行目录遍历攻击并导致FAT文件系统安装在/mnt/media_rw之外。
这意味着如果攻击者将带有标签字符串为“UUID =”../##'的FAT文件系统的U盘插入锁定的手机中，手机会将该U盘挂载到/mnt/##。
然而，这种直接的攻击实施有几个严重的局限性; 其中一些可以克服：
  * 标签字符串长度：FAT文件系统标签限制为11个字节。 试图执行直接攻击的攻击者需要使用六个字节'UUID =“'来启动注入，这只会为目录遍历留下五个字符 - 不足以到达挂载层次结构中的任何有趣的点。下一节将介绍如何解决这个问题。
  * SELinux对挂载点的限制：即使vold被认为是内核等价的，SELinux策略也会对vold的作用施加一些限制。 具体而言，mounton权限仅限于一组允许的标签。
  * 可写性要求：如果目标目录不是0700模式且chmod（）失败，则fs_prepare_dir（）将失败。
  * 访问vfat文件系统的限制：安装vfat文件系统时，其所有文件都标记为`u:object_r:vfat:s0`。 即使文件系统安装在加载重要代码或数据的位置，也不允许许多SELinux上下文实际与文件系统交互 - 例如，不允许zygote和system_server这样做。 最重要的是，没有足够权限绕过DAC检查的进程也需要在media_rw组中。 “处理SELinux：触发错误两次”一节描述了如何在此特定错误的上下文中避免这些限制。
# 利用：Chameleonic USB大容量存储
如上一节所述，FAT文件系统标签限制为11个字节。
blkid支持一系列具有明显更长标签字符串的其他文件系统类型，但是如果你使用了这样的文件系统类型，那么你必须通过fsck检查vfat文件系统，并在安装时由内核执行文件系统头检查。
一个vfat文件系统。 vfat内核文件系统在分区的开头不需要固定的magic值，所以理论上这可能会以某种方式工作;
但是，由于FAT文件系统头中的几个值对内核来说很重要，同时，blkid也会对superblocks执行一些常规检查，所以PoC采用不同的路径。