Vectorized Postgres
(VOPS extension)
Konstantin Knizhnik
Postgres Professional
Why Postgres is slow on OLAP queries?
1. Unpacking tuple overhead (heap_deform_tuple)
2. Interpretation overhead (invocation of query plan node
functions)
3. Abstraction penalty (user defined types and operations)
4. Pull model overhead (saving/restoring context on each
access to the page)
5. MVCC overhead (~20 bytes per tuple space overhead +
visibility check overhead)
Typical OLAP query profile
16.57% postgres postgres [.] slot_deform_tuple
13.39% postgres postgres [.] ExecEvalExpr
8.64% postgres postgres [.] advance_aggregates
8.58% postgres postgres [.] advance_transition_function
5.83% postgres postgres [.] float8_accum
5.14% postgres postgres [.] tuplehash_insert
3.89% postgres postgres [.] float8pl
3.60% postgres postgres [.] slot_getattr
2.66% postgres postgres [.] bpchareq
2.56% postgres postgres [.] heap_getnext
Query execution plan
select count(*) from where salary > 100000;
count(*)
>
100000
salary
heap scan
Traditional query execution
SELECT sum(quantity*price) FROM lineitems;
shipdate quantity price
21.02.2017 100 99 100 * 99 = 9900
+
23.02.2017 200 60 200 * 60 = 12000
+
24.02.2017 150 120 150 * 120 = 18000
= 39900
Vectorized query execution
SELECT sum(quantity*price) FROM lineitems;
shipdate quantity price
21.02.2017, 100, 99, 100 99 9900
23.02.2017, 200, 60,
Tile 24.02.2017 150 120 200 60 12000 Sum = 39900
150 120 18000
25.02.2017, 300, 100,
26.02.2017, 110, 60,
28.02.2017 80 230
VOPS integration in Postgres
FDW
03
Define Foreign Data
Wrapper allowsing to use
Abstract data types VOPS table in any query
VOPS defines special types
and operators for tiles,
which should be used
instead of scalar types
01 02 Planner hooks
Change query plan for
operators which can not
be redefined
User defined types,operators,aggregates
create type vops_float4 (
input = vops_float4_input,
output = vops_float4_output,
alignment = double,
internallength = 272 -- 16 + 64*4);
create operator - (leftarg=vops_float4, rightarg=vops_float4, procedure=vops_float4_sub);
create operator + (leftarg=vops_float4, rightarg=vops_float4, procedure=vops_float4_add, commutator= +);
create operator * (leftarg=vops_float4, rightarg=vops_float4, procedure=vops_float4_mul, commutator= *);
create operator / (leftarg=vops_float4, rightarg=vops_float4, procedure=vops_float4_div);
create operator = (leftarg=vops_float4, rightarg=vops_float4, procedure=vops_float4_eq, commutator= =);
create operator <> (leftarg=vops_float4, rightarg=vops_float4, procedure=vops_float4_ne, commutator= <>);
create operator > (leftarg=vops_float4, rightarg=vops_float4, procedure=vops_float4_gt, commutator= );
create operator >= (leftarg=vops_float4, rightarg=vops_float4, procedure=vops_float4_ge, commutator= =);
create operator - (rightarg=vops_float4, procedure=vops_float4_neg);
create aggregate sum(vops_float4) (
sfunc = vops_float4_sum_accumulate,
stype = float8,
combinefunc = float8pl,
parallel = safe);
Creating VOPS projections
create table vops_lineitem_projection(
l_shipdate vops_date not null,
l_quantity vops_float4 not null,
l_extendedprice vops_float4 not null,
l_discount vops_float4 not null,
l_tax vops_float4 not null,
l_returnflag "char" not null,
l_linestatus "char" not null
);
-- Load data from existed (normal) table
select populate(destination := 'vops_lineitem'::regclass,
source := 'lineitem'::regclass);
-- Load data directly from CSV file
select import(destination := 'vops_lineitem'::regclass,
csv_path := '/mnt/data/lineitem.csv', separator := '|');
VOPS special operators
-- Q6 using VOPS special operators
select sum(l_extendedprice*l_discount) as revenue
from vops_lineitem
where filter(betwixt(l_shipdate, '1996-01-01', '1997-01-01')
& betwixt(l_discount, 0.08, 0.1)
& (l_quantity  PI:EMAIL