 nake Lnstal1
/shtool mkdlx
te2o[/xsn/ ssL u- d-- :
uta/te2ot/xem/ ssL - d g- xpxw tooaue/*
./ahtool mkdlx
. /shtoo1l mkdLz -f -p -n 75s /usr/local/ahare/ac1oca1
[uew/ueu/exeue/Te2o/xsn/ ss2 u- d- - 
./shtoo1 mkGLx -f -p -n 755 /usr/1oca1/ahaxe/aht.oo1
-fshtoo1 1nata11 -c -n 644 ah,verelon /uar/1ocal/ahare/shtoo1/ah, veraion
/ghtool 1nsta11 -c -n 644 sh,path /usx/local/share/shtoo1/ah-path
现在就能在自己的shell脚本中使用这些函数了。
---
## Page 391
376
第17章创建函数
17.8.3shtool库函数
shtool库提供了大量方便的、可用于shell脚本的函数。表17-1列出了库中可用的函数。
表17-1shtool库函数
函
数
描述
hrx
创建归档文件（包含一些扩展功能）
Echo
显示字符申，并提供了一些扩展构件
Eixpexm
改变目录树中的文件权限
instal1
安装即本或文件
mdate
显示文件成日录的修改时间
mkdir
创建一个成更多日录
Mk1n
使用相对路径创建链接
mkshadow
创建一根阴影树
move
带有替换功能的文件移动
Path
处理程序路径
plat.form
显示平台标识
Prop
显示一个带有动画效果的进度条
rotate
转置日志文件
Scpp
共享的C预处理器
S1o
根据库的类别，分离链接签选项
Subst
使用sed的替换操作
Table
以表格的形式显示由字段分肠（field-separated）的数据
tarba11
从文件和日录中创建tar文件
vers1on
创建版本信息文件
每个shtool函数都包含大量的选项和参数，你可以利用它们改变函数的工作方式。下面是
shtool函数的使用格式：
shtool[optlona][function[optlons][argα]]
17.8.4使用库
可以在命令行或自己的shell脚本中直接使用shtool函数。下面是一个在shell脚本中使用
platform函数的例子。
$ cat test16
1/bin/bash
shtool platforn
$./test16
Ubuntu 14.04 (1X86)
---
## Page 392
17.9小结
377
platform函数会返回Linux发行版以及系统所使用的CPU硬件的相关信息。我喜欢的一个函
数prop函数。它可以使用、|、/和-字符创建一个旋转的进度条。这是一个非常漂亮的工具，可
以告诉shell脚本用户目前正在进行一些后台处理工作
要使用prop函数，只需要将希望监看的输出管接到shtool脚本就行了。
$ 1s -al /usr/bin 1 shtoo1 prop -p *waiting..,*
waiting-.-
17
prop函数会在处理过程中不停地变换进度条字符。在本例中，输出信息来自于1s命令。你
能看到多少进度条取决于CPU能以多快的速度列出usr/bin中的文件！-p选项允许你定制输出文
本，这段文本会出现在进度条字符之前。好了，尽情享受吧！
17.9小结
shell脚本函数允许你将脚本中多处用到的代码放到一个地方。可以创建一个包含该代码块的
函数，然后在脚本中通过函数名来引用这块代码，面不用一次次地重写那段代码。bash shell只要
看到函数名，就会自动跳到对应的函数代码块处。
甚至可以创建能返回值的函数。这样你的函数就能够同脚本进行交互，返回数字和字符申数
据。脚本函数可以用函数中最后一条命令的退出状态码或return命令来返回数值。return命令
可以基于函数的结果，通过编程的方式将函数的退出状态码设为特定值。
函数也可以用标准的echo语句来返回值。可以跟其他shell命令一样用反引号来获取输出的
数据。这样你就能从函数中返回任意类型的数据了（包括字符串和浮点数）。
可以在函数中使用shell变量，对其赋值以及从中取值。这样你就能将任何类型的数据从主体
脚本程序的脚本函数中传入传出。函数也支持定义只能在函数内部访问的局部变量。局部变量使
得用户可以创建自成体系的函数，这样就不会影响到shell脚本主体中变量或处理过程了。
函数也可以调用包括它自身在内的其他函数。函数的自调用行为称为递归。递归函数通常有
个作为函数终结条件的基准值。函数在调用自身的同时会不停地减少参数值，直到达到基准值。
如果需要在shell脚本中使用大量函数，可以创建脚本函数库文件。库文件可以用source命
令（或该命令的别名）在任何shell脚本文件中引用，这也称为sourcing。shel不会运行库文件，
但会使这些函数在运行该脚本的shell中生效。可以用同样的方法创建在普通shell命令行上使用的
函数。你可以直接在命令行上定义函数，或者将它们加到.bashre文件中，这样每次启动新的shell
会话时就可以使用这些函数了。这是一种创建实用工具的简便方法，不管PATH环境变量设置成
什么，都可以直接拿来使用。
下一章将会介绍脚本中文本图形的使用。在现代化图形界面普及的今大，只有普通的文本界
面有时是不够的。bash shell提供了一些轻松的方法来将简单的图形功能加人到你的脚本中。
---
## Page 393
第18章
图形化桌面环境中的脚本
编程
本章内容
口创建文本菜单
创建文本窗口部件
添加XWindow图形
本时，就未必如此了。有很多与脚本用户交互的方式并不依赖read和echo语句。
本章将会深人介绍一些可以让交互式脚本更友好的方法，这样它们看起来就不那么古板了。
18.1创建文本菜单
创建交互式shel脚本最常用的方法是使用菜单。提供各种选项可以帮助脚本用户了解脚本能
做什么和不能做什么。
通常菜单脚本会清空显示区域，然后显示可用的选项列表。用户可以按下与每个选项关联的
字母或数字来选择选项。图18-1显示了一个示例菜单的布局。
shell脚本菜单的核心是case命令（参见第12章）。case命令会根据用户在菜单上的选择来执
行特定命令。
后面几节将会带你逐步了解创建基于菜单的shell脚本的步骤。
---
## Page 394
18.1创建文本莱单
379
Sps AdtGA Ren
18
图18-1在shell脚本中显示菜单
18.1.1创建菜单布局
创建菜单的第一步显然是决定在菜单上显示哪些元素以及想要显示的布局方式
在创建菜单前，通常要先清空显示器上已有的内容。这样就能在干净的、没有干扰的环境中
显示菜单了。
clear命令用当前终端会话的terminfo数据（参见第2章）来清理出现在屏幕上的文本。运行
clear命令之后，可以用echo命令来显示菜单元素。
默认情况下，echo命令只显示可打印文本字符。在创建菜单项时，非可打印字符通常也很
有用，比如制表符和换行符。要在echo命令中包含这些字符，必须用-e选项。因此，命令如下：
,82eds xgTp Kedsta\ *[。 - oqo8
会生成如下输出行：
1 .
Display diak space
这极大地方便了菜单项布局的格式化。只需要几个echo命令，就能创建一个看上去还行的
菜单。
c1ear
echo -e *\tt^tSya Admin Menun*
echo
echo -e *\t1. Display Giak space*
echo -e *\t2. Diaplay logged on usera*
echo -e *\t3. Diaplay memory usage*
echo -e *\t0. Exit menun^,n*
echo =en *\t\cEnter optlon: *
最后一行的-en选项会去掉末尾的换行符。这让菜单看上去更专业一些，光标会一直在行尾
等待用户的输人。
---
## Page 395
第18章图形化桌面环境中的脚本编程
创建菜单的最后一步是获取用户输人。这步用read命令（参见第14章）。因为我们期望只有
单字符输人，所以在read命令中用了-n选项来限制只读取一个字符。这样用户只需要输入一个
数字，也不用按回车键：
read -n 1 option
接下来，你需要创建自己的菜单函数。
18.1.2创建菜单函数
shell脚本菜单选项作为一组独立的函数实现起来更为容易。这样你就能创建出简洁、准确、
容易理解的case命令。
要做到这一点，你要为每个菜单选项创建独立的shell函数。创建shell菜单脚本的第一步是决
定你希望脚本执行哪些功能，然后将这些功能以函数的形式放在代码中。
通常我们会为还没有实现的函数先创建一个桩函数（stub function）。桩函数是一个空函数，
或者只有一个echo语句，说明最终这里里需要什么内容。
function diskspace 
echo *This is where the diskspace commands vi1l go*
clear
这允许你的菜单在你实现某个函数时仍然能正常操作。你不需要写出所有函数之后才能让菜
单投人使用。函数从clear命令开始。这样你就能在一个干净的屏幕上执行该函数，不会受到原
先菜单的干扰。
还有一点有助于制作shell脚本菜单，那就是将菜单布局本身作为一个函数来创建。
function menu 
echo
u,nuag uupv sAg\a。 a- oqoa
echo -e *\t2. Display logged on users*
echo -e *\t1. Display disk space
echo
-e *\t3. Dieplay nemory usage*
echo
-e *\t0. Exit program`.nn*
echo
-en *\t\tEnter option1 *
read -n 1 option
这样一来，任何时候你都能调用menu函数来重现菜单。
18.1.3添加菜单逻辑
现在你已经建好了菜单布局和函数，只需要创建程序逻辑将二者结合起来就行了。前面提到
过，这需要用到case命令。
case命令应该根据菜单中输入的字符来调用相应的函数。用默认的case命令字符（星号）
---
## Page 396
18.1创建文本莱单
381
来处理所有不正确的菜单项是种不错的做法。
下面的代码展示了典型菜单中case命令的用法。
TenU
case $option in
( 0
break 11
diskspace 11
2 )
whoseon 11
( C
memusage 11
18
(x
I1 ,uoaoataa buon Aiog, o
clear
这段代码首先用menu函数清空屏幕并显示菜单。menu函数中的read命令会一直等待，直到
用户在键盘上键人了字符。然后，case命令就会接管余下的处理过程。case命令会基于返回的
字符调用相应的函数。在函数运行结束后，case命令退出。
18.1.4整合shell脚本菜单
现在你已经看到了构成shel脚本菜单的各个部分，让我们将它们组合在一起，看看彼此之间
是如何协作的。这里是一个完整的菜单脚本的例子。
$ cat menu1
1/bin/ba.sh
single script menu
function diskspace{
df -k
clear
function whoseon (
clear
who
function menueage {
cat /proc/meminfo
clear
function menu {
clear
echo
echo -e *\t\t\tSys Adimin Menu.n*
echo -e *\t1. Display disk space*
---
## Page 397
382
第18章图形化桌面环境中的脚本编程
echo -e *\t3. Diaplay memory usage*
echo -e *\t2. Display Logged on users*
echo
-α *\to. Exit progxam,n,n*
acho*
-en *\c\cEnter optLon: *
read -n 1 opt1on
vhi1e [ 1 1
do
menu
case Soption 1n
( 0
break 1:
(
diskspace 11
2 )
whoeeon 11
nemusage :1
*)
echo *Sorry, wrong selectLon*
clear
esac
, anuTauo3oKoAre aTH,a1,,u,。u8-oqo8
Gofe
read -n 1 1ine
c1ear
$
这个菜单创建了三个函数，利用常见的命令提取Linux系统的管理信息。它使用while循环
来一直菜单，除非用户选择了选项o，这时，它会用break命令来跳出while循环。
可以用这个模板创建任何shell脚本菜单界面。它提供了一种跟用户交互的简单途径。
18.1.5使用select命令
shell提供了一个很容易上手的小工具，帮助我们自动完成这些工作。
select命令只需要一条命令就可以创建出菜单，然后获取输人的答案并自动处理。select
命令的格式如下。
select varlable in 1lat
do
conmanda
done
list参数是由空格分隔的文本选项列表，这些列表构成了整个菜单。select命令会将每个
列表项显示成一个带编号的选项，然后为选项显示一个由PS3环境变量定义的特殊提示符。
这里有一个select命令的简单示例。