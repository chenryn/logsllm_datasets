title:TumbleBit: An Untrusted Bitcoin-Compatible Anonymous Payment Hub
author:Ethan Heilman and
Leen Alshenibr and
Foteini Baldimtsi and
Alessandra Scafuro and
Sharon Goldberg
TumbleBit: An Untrusted Bitcoin-Compatible
Anonymous Payment Hub
Ethan Heilman∗, Leen AlShenibr∗, Foteini Baldimtsi†, Alessandra Scafuro‡ and Sharon Goldberg∗
∗Boston University {heilman, leenshe}@bu.edu, PI:EMAIL
†George Mason University PI:EMAIL
‡North Carolina State University PI:EMAIL
Abstract—This paper presents TumbleBit, a new uni-
directional unlinkable payment hub that is fully com-
patible with today’s Bitcoin protocol. TumbleBit allows
parties to make fast, anonymous, off-blockchain payments
through an untrusted intermediary called the Tumbler.
TumbleBit’s anonymity properties are similar to classic
Chaumian eCash: no one, not even the Tumbler, can link
a payment from its payer to its payee. Every payment
made via TumbleBit is backed by bitcoins, and comes with
a guarantee that Tumbler can neither violate anonymity,
nor steal bitcoins, nor “print money” by issuing payments
to itself. We prove the security of TumbleBit using the
real/ideal world paradigm and the random oracle model.
Security follows from the standard RSA assumption and
ECDSA unforgeability. We implement TumbleBit, mix
payments from 800 users and show that TumbleBit’s off-
blockchain payments can complete in seconds.
I.
INTRODUCTION
One reason for Bitcoin’s initial popularity was the
perception of anonymity. Today, however, the sheen of
anonymity has all but worn off, dulled by a stream of
academic papers [31], [42], and a blockchain surveil-
lance industry [26], [22], that have demonstrated weak-
nesses in Bitcoin’s anonymity properties. As a re-
sult, a new market of anonymity-enhancing services
has emerged [35], [17], [1]; for instance, 1 million
USD in bitcoins are funneled through JoinMarket each
month [35]. These services promise to mix bitcoins
from a set of payers (aka, input Bitcoin addresses A)
to a set of payees (aka, output bitcoin addresses B) in a
manner that makes it difﬁcult to determine which payer
transferred bitcoins to which payee.
To deliver on this promise, anonymity must also
be provided in the face of the anonymity-enhancing
service itself—if the service knows exactly which payer
is paying which payee, then a compromise of the service
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  non-
commercial purposes is granted provided that copies bear this notice 
and  the  full  citation  on  the  ﬁrst  page.  Reproduction  for  commercial 
purposes is strictly prohibited without the prior written consent of the 
Internet Society, the ﬁrst-named author (for reproduction of an entire 
paper  only),  and  the  author’s  employer  if  the  paper  was  prepared 
within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA 
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23086
leads to a total
loss of anonymity. Compromise of
anonymity-enhancing technologies is not unknown. In
2016, for example, researchers found more than 100 Tor
nodes snooping on their users [37]. Moreover, users of
mix services must also contend with the potential risk
of “exit scams”, where an established business takes in
new payments but stops providing services. Exit scams
have been known to occur in the Bitcoin world. In 2015,
a Darknet Marketplace stole 11.7M dollars worth of
escrowed customer bitcoins [44], while btcmixers.com
mentions eight different scam mix services. Thus, it is
crucial that anonymity-enhancing services be designed
in a manner that prevents bitcoin theft.
TumbleBit: An unlinkable payment hub. We present
TumbleBit, a unidirectional unlinkable payment hub
that uses an untrusted intermediary, the Tumbler T ,
to enhance anonymity. Every payment made via Tum-
bleBit
is backed by bitcoins. We use cryptographic
techniques to guarantee Tumbler T can neither violate
anonymity, nor steal bitcoins, nor “print money” by
issuing payments to itself. TumbleBit allows a payer
Alice A to send fast off-blockchain payments (of de-
nomination one bitcoin) to a set of payees (B1, ...,BQ)
of her choice. Because payments are performed off
the blockchain, TumbleBit also serves to scale the
volume and velocity of bitcoin-backed payments. Today,
on-blockchain bitcoin transactions suffer a latency of
≈ 10 minutes. Meanwhile, TumbleBit payments are
sent off-blockchain, via the Tumbler T , and complete
in seconds. (Our implementation1 completed a payment
in 1.2 seconds, on average, when T was in New York
and A and B were in Boston.)
replaces on-
TumbleBit Overview.
blockchain payments with off-blockchain puzzle solv-
ing, where Alice A pays Bob B by providing B with the
solution to a puzzle. The puzzle z is generated through
interaction between B and T , and solved through an
interaction between A and T . Each time a puzzle is
solved, 1 bitcoin is transferred from Alice A to the
Tumbler T and ﬁnally on to Bob B.
TumbleBit
The protocol proceeds in three phases; see Figure 1.
In the on-blockchain Escrow Phase, each payer Alice
1https://github.com/BUSEC/TumbleBit/
TumbleBit provides k-anonymity within an epoch—no
one, not even the Tumbler T , can link one of the k
transfers that were successfully completed during the
epoch to a speciﬁc pair of payer and payee (A,B).
RSA-puzzle solving. At the core of TumbleBit is our
new “RSA puzzle solver” protocol
that may be of
independent interest. This protocol allows Alice A to
pay one bitcoin to T in fair exchange2 for an RSA
exponentiation of a “puzzle” value z under T ’s secret
key. Fair exchange prevents a cheating T from claiming
A’s bitcoin without solving the puzzle. Our protocol
is interesting because it is fast—solving 2048-bit RSA
puzzles faster than [30]’s fair-exchange protocol for
solving 16x16 Sudoku puzzles (Section VIII))—and
because it supports RSA. The use of RSA means that
blinding can be used to break the link between the
user providing the puzzle (i.e., Bob B) and the user
requesting its solution (e.g., payer Alice A).
Cryptographic protocols.
TumbleBit is realized by
interleaving the RSA-puzzle-solver protocol with an-
other fair-exchange puzzle-promise protocol. We for-
mally prove that each protocol
is a fair exchange.
Our proofs use the real/ideal paradigm in the random
oracle model (ROM) and security relies on the standard
RSA assumption and the unforgeability of ECDSA
signatures. Our proofs are in the full version [20].
A. TumbleBit Features
Bitcoin compatibility.
TumbleBit is fully compati-
ble with today’s Bitcoin protocol. We developed (off-
blockchain) cryptographic protocols that work with the
very limited set of (on-blockchain) instructions provided
by today’s Bitcoin scripts. Bitcoin scripts can only
be used to perform two cryptographic operations: (1)
validate the preimage of a hash, or (2) validate an
ECDSA signature on a Bitcoin transaction. The limited
functionality of Bitcoin scripts is likely here to stay;
indeed, the recent “DAO” theft [39] has highlighted the
security risks of complex scripting functionalities.
No coordination. In contrast to earlier work [28], [43],
if Alice A wants to pay Bob B, she need not interact
with any other TumbleBit users. Instead, A and B need
only interact with the Tumbler and each other. This
lack of coordination between TumbleBit users makes
it possible to scale our system.
Performance. We have implemented our TumbleBit
system in C++ and python, using LibreSSL as our
cryptographic library. We have tumbled payments from
800 payers to 800 payees; the relevant transactions are
visible on the blockchain. Our protocol requires 327 KB
2True fair exchange is impossible in the standard model [38]
and thus alternatives have been proposed, such as gradual release
mechanisms, optimistic models, or use of a trusted third party. We
follow prior works that use Bitcoin for fair exchange [4], [24], [25]
and treat the blockchain as a trusted public ledger. Other works use
the term Contingent Payment or Atomic Swaps [27], [5].
Fig. 1. Overview of the TumbleBit protocol.
A opens a payment channel with the Tumbler T by
escrowing Q bitcoins on the blockchain. Each payee
Bob B also opens a channel with T . This involves
(1) T escrowing Q bitcoins on the blockchain, and
(2) B and T engaging in a puzzle-promise protocol
that generates up to Q puzzles for B. During the off-
blockchain Payment Phase, each payer A makes up to Q
off-blockchain payments to any set of payees. To make
a payment, A interacts with T to learn the solution
to a puzzle B provided. Finally, the Cash-Out Phase
closes all payment channels. Each payee B uses his Q(cid:48)
solved puzzles (aka, TumbleBit payments) to create an
on-blockchain transaction that claims Q(cid:48) bitcoins from
T ’s escrow. Each payer A also closes her escrow with
T , recovering bitcoins not used in a payment.
Anonymity properties. TumbleBit provides unlinkabil-
ity: Given the set of escrow transactions and the set of
cash-out transactions, we deﬁne a valid conﬁguration
as a set of payments that explains the transfer of funds
from Escrow to Cash-Out. Unlinkability ensures that if
the Tumbler T does not collude with other TumbleBit
users, then T cannot distinguish the true conﬁguration
(i.e., the set of payments actually sent during the Pay-
ment Phase) from any other valid conﬁguration.
TumbleBit is therefore similar to classic Chaumian
eCash [12]. With Chaumian eCash, a payee A ﬁrst
withdraws an eCash coin in exchange for money (e.g.,
USD) at an intermediary Bank, then uses the coin to
pay a payee B. Finally B redeems the eCash coin to the
Bank in exchange for money. Unlinkability ensures that
the Bank cannot link the withdrawal of an eCash coin to
the redemption of it. TumbleBit provides unlinkability,
with Tumbler T playing the role of the Chaumian Bank.
However, while Tumbler T need not be trusted, the
Chaumian Bank is trusted to not (1) “print money”
(i.e., issue eCash coins to itself) or (2) steal money (i.e.,
refuse to exchange coins for money).
TumbleBit: As a classic tumbler. TumbleBit can also
be used as a classic Bitcoin tumbler, mixing together the
transfer of one bitcoin from ℵ distinct payers (Alice A)
to ℵ distinct payees (Bob B). In this mode, TumbleBit is
run as in Figure 1 with the payment phase shrunk to 30
seconds, so the protocol runs in epochs that require two
blocks added to the blockchain. As a classic tumbler,
2
Phase 1: EscrowPhase 2:PaymentAliceTumblerBobPhase 3:Cash-out{{{Puzzle-Promise      ProtocolEscrow TransactionEscrow TransactionRSA-Puzzle-Solver         ProtocolCash-out TransactionCash-out TransactionZ=Blind(   ) ZZZUnblind(   )=ϵ1 BTC from A to B3 BTC3 BTC2 BTC2 BTC1 BTC1 BTCϵϵϵ= Dec   (   ) ϵc σ(c,   )ZPrevents Theft
small set
small set
Anonymous Resists DoS Resists Sybils Minimum Mixing Time Bitcoin Compatible No Coordination?
× (p2p network)
× (uses blockchain)
1 block
1 block
2 blocks
×
×
Scheme
Coinjoin [28]
Coinshufﬂe [43], [34]
Coinparty [49]
XIM [9]
Mixcoin [11]
Blindcoin [48]
CoinSwap [29]
BSC [21]
TumbleBit
TABLE I.
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
2/3 users honest
TTP accountable × (TTP)
TTP accountable
× (TTP)2
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
×
×
some1
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88) (fees)
(cid:88) (fees)
(cid:88) (fees)
(cid:88) (fees)
(cid:88) (fees)
(cid:88) (fees)
(cid:88) (fees)
hours
2 blocks
2 blocks
2 blocks
3 blocks
2 blocks
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
×
(cid:88)
×
×
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
A COMPARISON OF BITCOIN TUMBLER SERVICES. TTP STANDS FOR TRUSTED THIRD PARTY. WE COUNT MINIMUM MIXING
TIME BY THE MINIMUM NUMBER OF BITCOIN BLOCKS. ANY MIXING SERVICE INHERENTLY REQUIRES AT LEAST ONE BLOCK.
1COINPARTY COULD ACHIEVE SOME DOS RESISTANCE BY FORCING PARTIES TO SOLVE PUZZLES BEFORE PARTICIPATING.
of data on the wire, and 0.6 seconds of computation on a
single CPU. Thus, performance in classic tumbler mode
is limited only by the time it takes for two blocks to
be conﬁrmed on the blockchain and the time it takes
for transactions to be conﬁrmed; currently, this takes
≈ 20 minutes. Meanwhile, off-blockchain payments can
complete in seconds (Section VIII).
B. Related Work
TumbleBit is related to work proposing new anony-
mous cryptocurrencies (e.g., Zerocash [33], [7], Mon-
ero [2] or Mimblewimble [23]). While these are very
promising, they have yet to be as widely adopted as
Bitcoin. On the other hand, TumbleBit is an anonymity
service for Bitcoin’s existing user base.
Off-blockchain payments. When used as an unlinkable
payment hub, TumbleBit is related to micropayment
channel networks, notably Duplex Micropayment Chan-
nels [13] and the Lightning Network [40]. These sys-
tems also allow for Bitcoin-backed fast off-blockchain
payments. Payments are sent via paths of intermedi-
aries with pre-established on-blockchain pairwise es-
crow transactions. TumbleBit (conceptually) does the
same. However, while the intermediaries in micropay-
ment channel network can link payments from A to
B, TumbleBit’s intermediary T cannot. Our earlier
workshop paper [21] proposed a protocol
that adds
anonymity to micropayment channel networks. Tum-
bleBit
is also related to concurrent work proposing
Bolt [18], an off-blockchain unlinkable payment chan-
nel. However, while TumbleBit is both implemented and
Bitcoin comptabile, Bolt [18] and [21] are not. Our full
version [20] has more discussion on [18], [21].
Bitcoin Tumblers. Prior work on classic Bitcoin Tum-
blers is summarized in Table I-A. CoinShufﬂe(++) [43],
[34] both perform a mix in a single transaction. Bit-
coin’s maximum transaction size (100KB) limits Coin-
Shufﬂe(++) to 538 users per mix. These systems are
also particularly vulnerable to DoS attacks, where a user