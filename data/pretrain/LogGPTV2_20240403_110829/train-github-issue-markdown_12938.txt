  * Version: 2.0.0-beta.7
I'm trying to create a project that uses ES6 style components with Webpack and
Babel.
**.babelrc**  
`{ "presets": ["es2015"], "plugins": [ "angular2-annotations", "transform-
flow-strip-types" ] }`
This works fine if I only reference components that are defined somewhere
within my project's main directory or a sub-directory. For instance, I've
successfully created an **App** and **MyButton** component, and **App** can
import and use **MyButton** just fine. However, if I create a duplicate
project, transpile it's src with the same Babel configuration, and attempt to
import the duplicate **Mybutton** into the original project's **App**
component, I get obscure errors. I've also tried to import the duplicate
**MyButton** component without transpiling via Babel. This should work, as it
is identical, but I still get errors...
![image](https://cloud.githubusercontent.com/assets/5278555/13408763/1cec0234-def5-11e5-8707-9fe92d779a72.png)
I'm using webpack-dev-server to serve a basic bundle, and I've brought in what
I believe to be the minimum necessary Angular2 dependencies in my index file.
**index.js**
    import 'angular2/bundles/angular2-polyfills';
    import 'rxjs';
    import { bootstrap } from 'angular2/platform/browser';
    import App from './components/App/App';
    bootstrap(App);
**MyButton.js**
    import { Component } from 'angular2/core';
    class MyButton {
    }
    export default Component({
      selector: 'my-button',
      template: `
          {{label}}
      `,
      inputs: ['label', 'onClick'],
    })(MyButton);
**App.js**
    // This import works 
    import MyButton from '../MyButton/MyButton';
    // This import doesn't work
    // import { MyButton } from '../../../../uxt/lib/components/MyButton/MyButton';
    import MyList from '../MyList/MyList';
    import { Component } from 'angular2/core';
    import { HTTP_PROVIDERS, Http } from 'angular2/http';
    export class App {
      constructor(http: Http) {
        this.loadData = this.loadData.bind(this);
        this.clearData = this.clearData.bind(this);
        this.http = http;
        this.items = [];
      }
      setItems() {
        this.http.get('http://jsonplaceholder.typicode.com/posts').subscribe(res => {
          this.items = res.json();
        });
      }
      loadData() {
        this.setItems();
      }
      clearData() {
        this.items = [];
      }
    }
    export default Component({
      directives: [MyButton, MyList],
      providers: [HTTP_PROVIDERS],
      selector: 'my-app',
      template: `
      `,
    })(App);