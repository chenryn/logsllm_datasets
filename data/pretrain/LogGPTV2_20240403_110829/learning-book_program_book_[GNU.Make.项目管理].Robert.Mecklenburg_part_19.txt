如多个目录的编译、新的程序语言、移植与效能、调试）中的方法通常不是很直观。接
下来我们将会探讨这些问题并且提供若干复杂的范例。
---
## Page 129
第六章
大型项目的管理
何谓大型项目？嗯，就是需要一组开发人员、可以在多种架构上运行、有若干已发行的
版本需要维护的项目。当然，并非一定要这样才叫做大型项目。一个只能在单一平台上
运行、包含了100万行C++程序代码的抢先版（prerelease）软件仍属大型项目。不过
软件极少永远停留在抢先版的阶段。而且，如果软件成功发行了，迟早会有人要求能够
在另一个平台上运行该软件，所以大多数的大型软件系统在不久以后看起来都会非常类
似。
我们通常会对大型软件项目进行简化的动作：将它们划分成几个主要组件，通常会被归
纳成不同的程序模块、程序库或是此两者皆有。这些组件往往会被存放在它们自己的目
录下，并由它们自己的makefile来管理。为整个系统编译所有组件的一个方法是，通过
顶层的makefile以适当的顺序调用每个组件的makefile。此做法称为递归式（recursive）
make，因为顶层的makefile会对每个组件的makefile递归地调用make。递归式make
技术常用来处理逐组件（component-wise）的编译工作。PeterMiller于1998年建议，
应该使用单一一makefile从每个组件目录引l入信息，以避免递归make所导致的许多问题
（注1）。
一旦项目编译好它的组件之后，它最后会在结构上遇到比较大的问题。这包括对项目的
多个版本进行开发、支持多个平台、对源文件和二进制文件提供有效的访问以及进行自
动化的编译工作。我们将会在本章后半部探讨这些问题。
注1：
ConsideredHarmful”（递归式make被认为是有害的）。实际的内容可到http://
aegis.sourceforge.net/auug97.pdf上获取。
119
---
## Page 130
120
第六章
递归式make
递归make（recursivemake）背后的动机很简单：make在单一目录（或一小群目录）
中可以运作得非常好，但是当目录的数量增长时，事情会变得比较复杂。因此，当我们
要使用make来编译一个大型项目时，我们可以为每个目录编写一个简单的、各自独立
的makefile，然后分别地执行它们。虽然我们可以使用脚本工具来完成此事，不过还是
使用make比较有效，因为在较高的层次上还涉及了依存关系。
例如，假设我有一个mp3player应用程序。逻辑上，它可以被划分成若干组件：用户界
面、编解码器（codec）以及数据库管理。它们分别可用三个程序库来表示：libui.a、
libcodec.a和libdb.a。将这些组件紧凑地放一起就可以组成这个应用程序。图6-1展示
了将这些组件直接对应到一个文件结构的样子。
makefile
include
odec
codec
图6-1：MP3播放器的文件布局图
一个比较传统的布局，就是将应用程序的main函数放在顶层目录，而不要放在子目录
app/player中。为了在顶层建立较明确的布局，我倾向于把应用程序代码放在它自己的
---
## Page 131
大型项目的管理
121
目录中，这样我就可以使用额外的模块来扩充系统。举例来说，如果我们稍后选择加入
独立的编目应用程序（catalogingapplication），你就可以明确地将它放在app/catalog
之下。
如果lib/db、lib/codec、lib/ui和app/player等目录中都包含了一个makefile、那么顶层
makefile的工作就是去调用它们。
1ib_codec:=lib/codec
lib_db:=1ib/db
1ib_ui:=lib/ui
libraries := $(lib_ui) S(lib_db) $(lib_codec)
player:=app/player
.PHONY:all $（player）$(libraries)
all:$(player)
$(player)$(libraries):
S(MAKE)--directory=$@
在顶层makefile中，你会看到一个规则在工作目标上列出了所有的子目录，它的动作就
是对每个子目录调用make：
$（player）$（libraries)：
S(MAKE)--directory=S@
在makefile文件中，MAKE变量应该总是用来调用make程序。make程序一看到MAKE
变量就会把它设成make的实际路径，所以递归调用中的每次调用都会使用同一个可执
行文件。此外，当命令行选项--touch（-t）、--just-print（-n）和--question
（-a）被使用时，包含MAKE变量的每一行将会受到特别的处理。稍后我们将会在“命
令行选项”一节中进一步探讨此议题。
由于这些“工作目标目录”被设成.PHONY的必要条件，所以即使工作自标已经更新，
此规则仍旧会进行更新的动作。使用--directory（-c）选项的目的是要让make在
读取makefile之前先切换到相应的“工作目标目录”。
尽管这个规则有些难以捉摸，不过它可以避免下面这个较简单的命令脚本所发生的若干
问题：
all:
for din S(player）$(libraries):\
do
$(MAKE)--directory=$$d;
done
这个命令脚本无法正确地将错误传送到上层的make，它也无法让make以并行的方式
对任何子目录进行编译的动作。我们将会在第十章探讨make的这个特性。
---
## Page 132
122
第六章
当make在建立依存图的时候找不到程序库与app/player工作目标之间的依存关系时，
这意味着，建立任何程序库之前，make将会先执行app/player目录中的makefile。显
然，这将会导致失败的结果，因为应用程序的链接需要程序库。为解决此问题，我们会
提供额外的依存信息。
$(player):S(libraries)
$(lib_ui):$(1ib_db) $(lib_codec)
我们在此处做了如下的描述：运行app/player目录中的makefile之前必须先运行程序库
子目录中的makefile。此外，编译lib/ui目录中的程序代码之前必须先编译lib/db和lib/
codec日录中的程序库。这么做可确保任何自动产生的程序代码（像yacc/lex文件）在
更新必要条件的时候，会引发微妙的次序问题。如同所有的依存关系，更新的次序取决
于依存图的分析结果，但是当工作目标的必要条件出现在同一行时，GNUmake将会以
从左至右的次序进行更新。例如：
all:abc
all:def
如果不存在其他依存关系，这6个必要条件的更新动作可以是任何次序（例如“dbac
ef”），不过GNUmake将会以从左至右的次序来更新出现在同一行的必要条件，这会
产生如下的更新次序：“abcdef”或“defabc”。但是不要因为之前这么做更新的
次序是对的，就以为每次这么做都是对的，而忘了提供完整的依存信息。最后，依存分
析可能会产生不同的次序而引发一些问题。所以，如果有一组工作目标需要以特定的次
序进行更新时，你就必须提供适当的必要条件来实现正确的次序。
当顶层的makefile被运行时，我们将会看到如下的结果：
Smake
make --directory=lib/db
make[1]:Entering directory/test/book/out/ch06-simple/lib/db'
Update db library...
make--directory=lib/codec
Update codec library...
make(1]:Leaving directory/test/book/out/ch06-simple/1ib/codec
make--directory=lib/ui
Update ui library...
make[1]:Leavingdirectory/test/book/out/ch06-simple/1ib/ui
make-directory=app/player
make[1]:Entering directory/test/book/out/ch06-simple/app/player'
Updateplayerapplication..
---
## Page 133
大型项目的管理
123
当make发觉它正在递归调用另一个make时，它会启用--print-directory（-w）
选项，这会使得make输出Enteringdirectory（进人目录）和Leavingdirectory
（离开目录）的信息。当--directory（-c）选项被使用时，也会启用这个选项。你还
可以在每一行看到，MAKELEVEL这个make变量的值加上方括号之后被一起输出。在
这个简单的例子里，每个组件的makefile只会输出组件正在更新的信息，而不会真的去
更新该组件。
命令行选项
递归式make最初只是一个简单的构想，但很快变得非常复杂。最完美的递归式make
方式是：尽管系统中有许多makefile，但是它的行为就如同只有一个makefile一样。要
达到这样的程度几乎不可能，所以妥协是免不了的。当我们知道命令行选项的处理方式
之后，这个微妙的问题将会变得较为明确。
假设我们为mp3player的头文件加人了注释。我们不想让make因为头文件被修改而重
新编译所有的源文件，我们发现可以执行make--touch来让相应文件的时间戳变成已
更新的。当我们对顶层的makefile执行make--touch时，我们也希望make能够通过
下层的make来让所有应该处理的文件变成已更新的。让我们来看看这是怎么办到的。
通常，当你在命令行上指定--touch选项时，make将会暂停规则的正常处理过程，它
会去搜索依存图，从中选出未被，PHONY标注过的工作目标以及必要条件，然后对工作
目标执行touch，好让它们变成已更新的。因为我们的子目录都被.PHONY标注过，所
以它们都会被忽略掉（像一般文件那样变更它们的时间戳没有任何意义）。但是我们并
不想让那些工作目标被忽略掉，我们想要运行它们的命令脚本。为了做对的事情，make
将会自动以+修饰符来标示包含MAKE的任何行，这会使得make在运行下层的make时
忽略--touch选项。
当make运行下层的make时，还必须将--touch标记传递给子进程。它可以通过
MAKEFLAGS变量来完成此事。当make启动时，它会自动将大部分的命令行选项追加
到MAKEFLAGS中，例外是--directory（-c）、--file（-f）、--old-file（-o）
和--new-file（-W）等选项。然后MAKEFLAGS变量会被导出到环境中，让下层的
make启动时能够读取。
有了这样的特别支持，下层make的行为几乎就是你想要的那样。S（MAKE）的递归执行
以及MAKEFLAGS的特别处理将会被应用在--touch（-t）选项上，也会被应用在选
项--just-print（-n）和--question（-q）上。
---
## Page 134
124
第六章
传递变量
正如之前提到的，变量可以通过环境传递给下层的make，而且可以使用export和
unexport指令加以控制。通过环境传递的变量将会成为默认值，不过对此类变量所进
行的任何赋值动作将会覆盖掉此默认值。使用--environment-overrides（-e）选项
可让环境变量覆盖掉当时的赋值动作。你也可以明确地针对特定的赋值动作使用
override指令来覆盖掉环境变量，即使当时使用了--environment-overrides选项：
overrideTMPDIR=~/tmp
命令行上所定义的变量，如果使用了正确的shell语法，将会被自动导出到环境中。一个
变量的名称中如果只使用了字母、数字和下划线，将会被视为语法正确。命令行上所进
行的变量赋值动作会跟着命令行选项一起被存放在MAKEFLAGS变量里。
错误处理
当递归式make发生错误时，要如何处理呢？事实上，跟一般的编译方式差别不会太大。
当make收到错误状态时，会终止它的处理过程并返回值为2的结束状态。然后上层的
顶层的make使用了--keep-going（-k）选项，这个选项将会如往常般被传递到下层
的make。下层make的处理方式如同往常那样，它会跳过当前的工作目标，前进到下
一个工作目标（条件是此工作目标并未以发生错误的工作目标作为它的必要条件）继续
处理。
举例来说，如果我们的mp3player程序在1ib/db组件中遇到了编译错误，1ib/db的
编译工作将会因此而结束，并将值为2的状态返回顶层的makefile。如果我们使用了--
keep-going（-k）选项，顶层的makefile将会前进到下一个无关的工作目标lib/codec
继续处理。完成该工作目标之后会忽略它的结束状态，make会返回值为2的结束状态
一由于1ib/db的失败已经没有其他工作目标可供处理了。
--question（-q）选项的行为非常类似。如果某工作目标尚未更新，此选项会使得make
返回值为1的结束状态，否则会返回0。当你将它应用在具有树状结构的makefile上时，
make会开始递归地运行makefile，直到它可以判断该项目是否已经更新。一发现尚未更
新的文件，make会终止当前所运行的make，并从递归操作返回。
建立其他工作目标
其他工作目标的支持，像clean、instail、print等。因为这些都属于.PHONY工作
目标，之前曾提到此技术的运作不是很好。
---
## Page 135
大型项目的管理
125
例如，下面这几种是有问题的做法，像：
clean:S(player)S(libraries)
$(MAKE)--directory=$@ clean
或是：
$(player)$(libraries):
$(MAKE)--directory=S0 clean
第一种做法的问题出在，它的必要条件将会触发S（player）和s（libraries）所在的
makefile的默认目标进行编译动作，而不是clean工作目标的编译动作。第二种做法的
问题出在，已经存在的工作目标具有不同的命令脚本。
还有一种做法会用到shell的for循环：
clean:
for d in $（player) $（libraries);\
do
$（MAKE)--directory=SSf clean;\
done
这个for循环也无法完全解决稍早所提到的问题，不过它（以及之前有问题的例子）却
让我们找到了如下这个解决方案
S（player)$(libraries):
S（MAKE）--directory=$@ $（TARGET）
对递归式make的那一行加上S（TARGET）变量，并且在make命令行上设定TARGET变
量，我们就可以随意为下层的make加上默认目标：
Smake TARGET=clean
可惜，这么做并无法在顶层的makefile上调用S（TARGET）。通常并不需要这么做，因
为顶层的makefile并没有什么事可以做，但如果有此需要的话，我们可以加人另一个受
到if保护的make调用：
S(player)s(libraries):
S(MAKE)--directory=S@ S(TARGET)
S（if S（TARGET)，$(MAKE)$（TARGET）)
现在只要在命令行上设定TARGET变量，我们就可以调用clean工作目标（或是任何
其他的工作目标）。
跨越makefile的依存关系
make对命令行选项的特殊支持以及把环境变量作为沟通管道，意味着递归式make技
术可以协助我们把事情做好。但是我们为什么要担心事情会变得更复杂呢？
---
## Page 136
126
第六章
链接。可借，这些微妙的依存关系通常会被隐藏在某些目录中。
举例来说，假设db模块引人了一个以yacc为基础的解析器，以便导人或导出音乐数
据。如果ui模块ui.c引l人了自动产生的yacc标头，那么这两个模块之间便存在着依存
关系。如果我们正确建立此依存关系，那么每当语法标头被更新时，make应该就会重
新编译我们的ui模块。使用稍早所提到的自动产生依存关系的技术，要完成此事并不难。