# Fuzzingbook学习指南 Lv1
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
强网杯以来就一直很想系统性的学习fuzzing技术，fuzzingbook可以说是fuzzing技术学习的圣经，但因为它全英文编写，且长度感人，因而很多人都望而止步。我将自己的学习经验分享给大家，希望能帮助大家更好的学习fuzzing技术。
## fuzzing是啥？
在98年的一个暴雪天，Madison教授在使用电话线（是的，那时候都是用电话线传递信号）远程访问学校的电脑，但由于当时雷电交加，传输中有些数据产生了差错，导致很多命令行程序频繁发生错误，教授觉得程序猿干得太不行了，程序健壮性太差了，于是他就让学生开始研究程序测试的问题，希望能帮助程序猿写点靠谱的程序，最终在此基础上创造了fuzzing技术。
fuzzing的官方译名叫做模糊测试，顾名思义，它是用“模糊”的输入对程序进行测试，找到程序漏洞、错误的一种技术。所谓的模糊，其实就是输入的不确定。
举个例子，你可以打开你linux下的bc程序（这是一个数学表达式计算器，你输入数学报表达式，它会输出对应的结果），随便在键盘一顿狂按，然后大力敲击回车进行输入，bc十有八九会告诉你，你输入的不是有效的表达式，恭喜你，你完成了一次“模糊”的程序测试。最最最简单的fuzzing，就是自动化进行你刚才的操作。
当然，就这么随机生成字符串显然是不够“聪明”，你用这玩意找出你身边路由器漏洞点的概率无限接近于0，所以我们要用各种技术来不断完善我们的fuzzing程序，比如代码覆盖等等技术，这在后面的文章中我们会详细阐述。
## fuzzing程序的结构
从上面的例子我们可以看出，fuzzing其实就是两部分构成：
  * 随机敲打键盘生成输入，我们管干这活的伙计叫fuzzer
  * 输入到别的程序，我们管干这活的伙计叫runner
好了，现在我们来写写这两个小东西，千万别往难了想，就实现我上面说的功能即可，我相信你只要会python，都能写的出来。
    def fuzzer(max_length=100, char_start=32, char_range=32):
        str_len = random.randrange(0, max_length + 1)
        # 随机生成字符串长度
        fuzzing = ""
        for i in range(0, str_len):
            fuzzing += chr(random.randrange(char_start, char_start + char_range))
        return fuzzing
我们用random模块来进行随机数的生成。首先我们随机生成一个数用作字符串的length，然后就随机生成length个随机字符，拼起来就是随机生成的字符串了，返回即可。
我们设定函数有三个参数，分别是字符串的最大长度、字符的开始位置、字符的范围大小，这是为了我们能够一定程度上指定生成字符串的格式。比如，有些情况下我们希望只生成数字测试字符串，那我们就可以指定char_start
= ord(‘0’)。
    def runner(program,FILE)
      result = subprocess.run([program, FILE],
                              stdin=subprocess.DEVNULL,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE,
                              universal_newlines=True)
      return result
对于runner来说，有两个参数，一个是目标程序的路径program，一个是存放输入数据的文件路径。因为我们需要将数据作为输入写到别的程序中，所以我们用到了
subprocess模块，他可以打开一个子程序，并指定程序的标准输入、标准输出、标准错误信息等参数。具体的参数大家可以查阅手册，这里就不展开介绍了。
函数最终返回的是程序的“状态”，我们可以利用result来查看程序是否发生了奔溃等问题
    result.stdout
    #程序的标准输出
    result.stderr
    #程序的标准错误输出
当然，runner需要我们有一个存放输入数据的文件，如果你用过fuzzing程序，比如peach、afl-fuzz等等，你应该会记得它们都有input、output两个文件夹，这俩其实存放的就是输入的数据和输出的程序状态，也就是我们上代码中的fuzzing、result两个变量，下面的代码就可以实现文件的存取功能
    FILE = os.path.join(tempdir, basename)
    # tempdir是目录名，basename是文件名
    data = fuzzer()
    # 使用fuzzer生成字符串
    with open(FILE, "w")as f:
        f.write(data)
    # 将字符串保存在文件中
接下来就让我们来试试吧，我们用fuzzer生成的字符串来测试一下bc，我们就简单写一个循环调用fuzzer，不停输出result.stderr即可
    parse error
    illegal character: &
我省略了大部分错误信息，只选取了主要部分，可以看到程序报的错误主要就是解析错误、非法字符，很好理解，解析错误就是我们输入的字符串无法被当作表达式进行处理，而非法字符就是我们输入的字符压根不是数学上有的。但是要注意，虽然这是stderr，但是我们的程序并没有崩溃或者停止运行，这是“被程序猿预料到的”错误，这种错误说明程序编写是健壮的，我们之后提到的错误一般都是程序奔溃或者停止运行的错误，我们可以打印一下程序的返回值来确定程序是否正常。
    print(result.returncode)
这代表程序的返回状态，它的值一直是0，说明程序正常结束。可以看到，bc程序在我们的简单测试中成功存活，恭喜这些程序猿不用被祭天。
如果你是要对自己的程序进行检测，那你还可以简单在程序编译时使用这样的指令：
    clang -fsanitize=address -g -o program program.c
有了这条指令，程序在奔溃时会打印出详细的错误信息，比如堆栈信息、错误信息等，非常全面，我们可以利用这些信息进一步排查问题。当然如果你开了这个选项，运行的速度是必然要下降的，所以仅限测试期间使用，真正发布程序时可不要带这个选项。
好了，你现在可以到处宣传你自己写了一个fuzzing程序了，只不过它还是个lv1的史莱姆，不过不用担心，它会在我们后续的文章中慢慢进化，最终变成lv100的超级史莱姆。现在就让我们先来试试这个小东西能干点啥。
## 程序测试
上面我们完成了简单的fuzzing程序，但是我们还需要恶补一些软件测试相关的知识，这是我们未来构建fuzzer函数的重要支撑。我们就一边测试我们的史莱姆，一边进行学习
    def my_sqrt(x):
    """Computes the square root of x, using the Newton-Raphson method"""
    approx =None
    guess = x / 2
    while approx != guess:
            approx = guess
            guess = (approx + x / approx) / 2
    return approx
这是fuzzingbook上给的一个函数，它使用牛顿法来计算给定x的平方根。你可以想象这是你舍友的面试题目，他写了上面的代码，但是提交了n遍都有样例无法通过，现在你要帮助他改改这个程序。