title:Applications of secure electronic voting to automated privacy-preserving
troubleshooting
author:Qiang Huang and
David Jao and
Helen J. Wang
Applications of Secure Electronic Voting to Automated
Privacy-Preserving Troubleshooting
Qiang Huang
Princeton University
David Jao
Microsoft Research
Helen J. Wang
Microsoft Research
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
Recent work [27, 15] introduced a novel peer-to-peer applica-
tion that leverages content sharing and aggregation among
the peers to diagnose misconﬁgurations on a desktop PC.
This application poses interesting challenges in preserving
privacy of user conﬁguration data and in maintaining in-
tegrity of troubleshooting results. In this paper, we provide
a much more rigorous cryptographic and yet practical solu-
tion for preserving privacy, and we investigate and analyze
solutions for ensuring integrity.
[Public Policy Issues-
Categories and Subject Descriptors
K.4.1 [Computers and Society]:
privacy]
General Terms
Security, Design
Keywords
Privacy, Integrity, Automatic Troubleshooting, Homomor-
phic Encryption, Zero Knowledge Proof
1.
INTRODUCTION
Recent work [27, 15] introduced a novel (and legal) peer-
to-peer application that leverages content sharing and ag-
gregation among the peers to diagnose misconﬁgurations on
a desktop PC automatically. The diagnosis is based on the
PeerPressure troubleshooting algorithm [28]. The key intu-
ition of PeerPressure is that misconﬁgurations of a PC are
likely anomalous when compared with the respective conﬁg-
urations from other PCs having the same setting. Hence, in
a peer-to-peer setting, the troubled PC collects respective
conﬁguration data from the peers. Then the anomalous-
looking conﬁguration entries on the troubled machine are
diagnosed as misconﬁgurations, and the most popular con-
ﬁguration values from the peers are used as the correction
values.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
This application poses interesting challenges in preserv-
ing privacy of user conﬁguration data and in maintaining
integrity of troubleshooting results, since conﬁguration data
often contain privacy-sensitive information and a peer is not
always trustworthy. To this end, the authors of [27, 15] pro-
posed a Friends Troubleshooting Network (FTN), which is
an unstructured peer-to-peer network where a link between
two machines represents friendship of their owners, and the
two machines trust each other’s content being exchanged. A
structured peer-to-peer network is unsuitable because build-
ing up the indices for routing necessarily compromises the
privacy of application ownership; for example, one may want
to maintain privacy with respect to owning the KaZaa appli-
cation. Furthermore, recursive trust, rather than transitive
trust, is assumed in FTN — Alice trusts Bob’s content, and
Bob trusts Carol’s content, but Alice does not trust Carol’s
content. In FTN, privacy is achieved using source-less and
destination-less random-walk of a troubleshooting request
initiated from a troubled machine, but where the immediate
last hop and next hop are recorded on each involved node;
during the random walk, respective conﬁguration data is
gathered.
There are two key limitations of the current FTN solu-
tion. The ﬁrst one is that the gathered conﬁguration data
is in plain text, though in aggregated form. Some forms
of collusion can give away privacy-revealing statistics. The
second limitation is that the data integrity problem is not
explored. In this paper, we address the ﬁrst limitation by
tailoring a homomorphic encryption scheme to scale with
the FTN scenario. Our design has the novel property that
decryption shares can be dynamically assembled among the
participants during the data collection phase, with no need
for a dedicated key sharing phase. To explore the integrity
problem, we investigate and analyze the eﬀectiveness of zero
knowledge proof together with a branching solution where
multiple branches are taken to gather the conﬁguration data,
using a real-world friends network topology. We ﬁnd that
when the percentage of compromised nodes is moderate or
small (e.g. 1% or less), our approach can eﬀectively reduce
the risk of malicious data injection attacks to nearly zero.
For the rest of the paper, we ﬁrst provide background on
PeerPressure in Section 2. Then we state our attacker model
in Section 3.
In Section 4, we review the previous FTN
solution and its limitations. We then introduce a privacy-
preserving data aggregation protocol for FTN based on ho-
momorphic encryption and various enhancements and opti-
mizations (Section 5, 6, 7, 9). Section 8 addresses the data
integrity problem. We analyze our protocol overhead in Sec-
68tion 10. Using real-world instant messenger (IM) data, we
present a security evaluation of our design in Section 11. A
brief review of related work is given in Section 12, followed
by our conclusion.
Acknowledgments: We are grateful to Josh Benaloh for
providing insightful discussion and comments on an earlier
draft of this paper, and to the anonymous reviewers for their
numerous helpful suggestions and corrections.
2. BACKGROUND: PEERPRESSURE
The PeerPressure troubleshooting algorithm uses respec-
tive conﬁguration data from peers to diagnose the anoma-
lous conﬁguration entries on the troubled machines. The op-
eration goes as follows: PeerPressure ﬁrst uses application
tracing to capture the conﬁguration entries and values that
are touched by the abnormal execution of the application
under troubleshooting. These entries are misconﬁguration
suspects. Next, from a sample set of helper machines, for
each suspect entry e, PeerPressure obtains the number Me
of samples that match the value of the suspect entry, the
cardinality Ce (the number of distinct values for this entry
among the sample set), and the most popular value for the
entry. PeerPressure uses these parameters along with the
sample set size and the number of suspect entries to calcu-
late the probability of a suspect entry being the cause of the
N +Cet+CeMe(t−1) where N is the number
symptom: Pe =
of samples and t is the number of suspects. The top ranking
entries with regard to this probability are diagnosed as the
root-cause candidates. Then, the troubleshooting user can
use the collected, most popular values for corrections1. The
sample set can be obtained either from a database of con-
ﬁguration snapshots collected from a large number of user
machines or from a peer-to-peer troubleshooting community
such as the one described in this paper. PeerPressure has
been shown to be eﬀective in troubleshooting [28].
N +Ce
3. ATTACKER MODEL AND SECURITY
OBJECTIVES
3.1 Security Objective
The information being communicated in FTN is PC con-
ﬁguration data. We denote the complete set of conﬁguration
data on a machine as D. A certain subset of D contains
identity-revealing information, such as usernames and cook-
ies, and we denote this subset as Di. A canonicalizer ﬁrst ﬁl-
ters any user-speciﬁc entries into a canonicalized form2. The
remaining set of conﬁguration data Dr = D − Di may con-
tain information that compromises privacy when linked with
user identity. Some examples of such information are URLs
visited and applications installed. Our privacy objective is
to protect all peers’ privacy by anonymizing such privacy-
sensitive information in Dr; of course, Di must never be
revealed.
In addition to the conﬁguration data, we aim
to protect the identities of the sick machine (i.e., the trou-
bleshooter) and the peer helpers. In some cases, the mere
fact that one is running a particular application may be
privacy-sensitive.
1Proper roll-back mechanisms are needed if a root-cause
candidate is not actually the root cause (when the correction
does not remove the sick symptom).
2Finding all identity-revealing entries is an open research
question.
Aside from the privacy of troubleshooting users, we also
aim to protect the integrity of their contributed conﬁgura-
tion information, since a compromised friend may lie about
the conﬁguration state it has,
leading to incorrect trou-
bleshooting results.
3.2 Attacks
We assume a friendly operational environment in FTN
where attackers are simply curious friends, together with
an occasional compromised machine that has not yet been
repaired by its user.
Curious friends may launch passive attacks to obtain pri-
vate information, but will never intentionally lie about their
conﬁguration state or alter troubleshooting results, since
they do have incentives to help their friends out. Passive
attacks initiated by curious friends include the following:
1. Eavesdropping on machines on the same LAN.
2. Message inspection attack: Infer privacy-sensitive in-
formation by passively inspecting the messages that
are passing by.
3. Gossip attack: Friends may participate normally in a
legitimate request, but simply gossip and share what
they know to compromise privacy.
Friends can exchange public keys out of band and use
them to establish secure communication channels, which
renders eavesdropping attacks ineﬀective. Therefore, we do
not speciﬁcally address this attack in our paper.
A compromised machine, on the other hand, may launch
active attacks against its peer friends to compromise their
privacy, or to corrupt the integrity of the troubleshooting
result. Active attacks include the following:
1. Troubleshooter attack: A compromised host may fab-
ricate a troubleshooting request to infer his friend’s
private information. For example, it may collude with
a node on the forwarding path to determine the aggre-
gate data values of all the nodes in between. We call
this form of attack a troubleshooter attack, because
it relies on the initiator participating in the attack by
fabricating a troubleshooting request.
2. Data injection attack: A compromised host may lie
about the application it owns and the conﬁguration
state it has, or tamper with other peers’ contributions,
leading to incorrect troubleshooting results.
Another form of passive attack that a compromised node
may launch is non-participation. A compromised host may
refuse to propagate the troubleshooting request it receives,
or drop the response messages, causing the troubleshooting
communication path to fail. However, this attack has no
eﬀect on our security objective, since by merely not partici-
pating, the attacker does not inject false conﬁguration infor-
mation into the response, and gains no private information
about other peers. The troubleshooter may still seek help
from other honest friends after a suitable timeout on the
non-participating node has elapsed. Therefore, we do not
address this attack in our paper.
4. PREVIOUS DESIGN
In this section, we brieﬂy review the previous FTN pro-
tocol design [27, 15] and its weaknesses.
694.1 Creating a Request on the Sick Machine
A sick machine ﬁrst ﬁlters out the identity-revealing en-
tries from the suspects. This ﬁltering step prevents informa-
tion compromise via entry names, and in practice does not
hurt the performance of the PeerPressure algorithm since
identity-revealing entry names are unlikely to be a root cause
of the symptom. Then it creates a troubleshooting request
which contains 1) the name of the application executable
that is under troubleshooting; 2) a random nonce ReqID
identifying the request; 3) the value distribution (or his-
togram) of each suspect entry e — that is, a list of values
that e can take, and the vector me(i) counting the occur-
rences of each value i of e from the sample set. The goal
of the FTN protocol is for a sick machine to obtain the ag-
gregate value distributions for all suspect entries. With the
value distribution of each entry e, the sick node can extract
the cardinality, the number of matches, and the most popu-
lar value to carry out the PeerPressure diagnosis (Section 2).
To preserve source anonymity, the troubleshooting mes-
sage is designed to be ownerless, and the value distribution
ﬁeld is randomly initialized by the requester.
4.2 Parameter Aggregation Through a Source-
less and Destination-less Random Walk
The FTN is an unstructured peer-to-peer network where
overlay links are made only to trusted friends’ machines.
Search for samples and parameter aggregation is integrated
in a source-less and destination-less random walk on the
friends overlay network topology.
The sick machine ﬁrst establishes a secure channel with an
available friend chosen at random and sends this friend the
troubleshooting request. To avoid routing loops or double-
counting, the friend responds with an acknowledgment only
if it has not already seen the ReqID of the arriving request.
A friend that receives a troubleshooting request and runs
the application under troubleshooting only becomes a helper
with probability Ph. A helper needs to update the trou-
bleshooting request. For each suspect entry e, the helper
increments me(i) where i is its own value for e. Then, with
a probability of forwarding Pf = 1 − 1/N , the helper prox-
ies the request to one of its friends, where N is the num-
ber of samples needed; otherwise it becomes the last hop.
This probabilistic proxying makes routing entirely history-
less. Nodes that do not help always forward the request to
their friends. This results in N helpers being involved on
average. Each node on the forwarding path must record the
ReqID, along with the previous and next hop friend.
The last-hop node waits for a random amount of time,
then sends the reply back to the previous hop. The reply
follows the request path back to the sick machine. The sick
machine ﬁrst subtracts the random initialization from the
value distributions; then it performs PeerPressure diagnosis.
4.3 Clustering
If a helper contributes its relevant conﬁguration state di-
rectly, its previous and next hop may gossip to determine its
conﬁguration information. The previous design addressed
the gossip attack via a cluster-based multiparty secure sum
protocol.
When a node receives a troubleshooting request, instead
of contributing to the request individually, it forms a trou-
bleshooting cluster from its immediate friends. The initiat-
ing node serves as the cluster entrance. Each cluster partici-
pant represents its own contribution using the vector format
me(i). The contribution of the cluster entrance includes the
aggregate value distribution from the previous hops. Mem-
bers who do not run the application or who choose not to
help according to Ph will contribute the all zeroes vector.
Members who help will set the vector element correspond-
ing to their value to 1, and 0’s for the rest. The cluster
entrance then initiates a secure multi-party sum procedure
that blends individual cluster member’s contributions into
an aggregate that encapsulates the contributions from both
the cluster and the past hops. A separate cluster member
(other than the entrance) is selected as the cluster exit for
receiving the aggregate. With probability P Vh
(where Vh is
the number of helpers in the cluster), the exit further prox-