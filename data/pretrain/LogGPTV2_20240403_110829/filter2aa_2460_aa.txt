Offensive Windows IPC Internals 2: RPC  
Contents:
The Series
Introduction
History
RPC Messaging
RPC Protocol Sequence
RPC Interfaces
RPC Binding
Anonymous & Authenticated Bindings
Registration Flags
Security Callbacks
Authenticated Bindings
Well-known vs Dynamic Endpoints
RPC Communication Flow
Sample Implementation
Access Matrix
Attack Surface
Finding Interesting Targets
RPC Servers
RPC Clients
Unauthorized Access
Client Impersonation
Server Non-Impersonation
MITM Authenticated NTLM Connections
MITM Authenticated GSS_NEGOTIATE Connections
References
The Series
This is part 2 of my series: Offensive Windows IPC Internals. 
If you missed part one and want to take a look, you’ll find it here: Offensive Windows IPC Internals 
1: Named Pipes. 
Part 2 was originally planned to be about LPC & ALPC, but as it turns out it’s quite time consuming 
to dig out all the undocumented bits and tricks about these technologies. Therefore i made the 
discussion to publish my knowledge about RPC first before turning my head towards ALPC once 
again.
The reason why i originally planed to publish LPC & ALPC before RPC is because RPC uses ALPC 
under the hood when used locally and even more: RPC is the intended solution for fast local inter 
process communication as RPC can be instructed to process local communication via a special 
ALPC protocol sequence (but you’ll find that out while reading on).
Anyhow, the lesson here is (i guess) that sometimes its better to pause on a thing and get your 
head cleared up and make progress with something else before you get lost in something that is 
just not ready to reveal its mysteries to you.
Get a coffee and a comfy chair and buckle up for RPC…
Introduction
Remote Procedure Calls (RPC) is a technology to enable data communication between a client and 
a server across process and machine boundaries (network communication). Therefore RPC is an 
Inter Process Communication (IPC) technology. Other technologies in this category are for 
example LPC, ALPC or Named Pipes. 
As the name and this category implies RPC is used to make calls to remote servers to 
exchange/deliver data or to trigger a remote routine. The term “remote” in this case does not 
describe a requirement for the communication. An RPC server does not has to be on a remote 
machine, and in theory does not even has to be in a different process (although this would make 
sense). 
In theory you could implement a RPC server & client in DLLs, load them into the same process 
and exchange messages, but you wouldn’t gain much as the messages would still be routed 
through other components outside of your process (such as the kernel, but more on this later) 
and you would try to make use of an “Inter” Process Communication technology for “Intra” 
Process Communication. 
Moreover a RPC server does not need to be on a remote machine, but could as well be called 
from a local client.
Within this blog post you can join me in discovering the insides of RPC, how it works & operates 
and how to implement and attack RPC clients and servers. 
This post is is made from an offensive view point and tries to cover the most relevant aspects the 
attack surface of RPC from an attackers perspective. A more defensive geared view on RPC can for 
example be found at https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html by 
Jonathan Johnson
The below post will contain some references to code from my sample implementations, all of this 
code can be found here: 
https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Cli
ent-Server
History
Microsoft’s RPC implementation is based on the RPC implementation of the Distributed 
Computing Environment (DCE) standard developed by the Open Software Foundation (OSF) in 
1993.
“One of the key companies that contributed [to the DCE implementation] was Apollo 
Computer, who brought in NCA – ‘Network Computing Architecture’ which became Network 
Computing System (NCS) and then a major part of DCE/RPC itself” 
Source: https://kganugapati.wordpress.com/tag/msrpc/
Microsoft hired Paul Leach (in 1991), one of the founding Engineers of Apollo, which might be how 
RPC came into Windows.
Microsoft adjusted the DCE model to fit their programming scheme, based the communication 
of RPC on Named Pipes and brought their implementation to daylight in Windows 95. 
Back in the days you could have wondered why they based the communication on Named Pipes, 
because Microsoft just came up with a new technology called Local Procedure Call (LPC) in 1994 
and it sounds like it would have made sense to base a technology called Remote Procedure Call 
on something called Local Procedure call, right?… Well yes LPC would have been the logical choice 
(and I would guess they initially went with LPC), but LPC had a crucial flaw: It didn’t support (and 
still doesn’t) asynchronous calls (more on this when i finally finish my LPC/ALPC post…), which is 
why Microsoft based it on Named Pipes.
As we’ll see in a moment (section RPC Protocol Sequence) when implementing routines with RPC 
the developer needs to tell the RPC library what ‘protocol’ to use for transportation. The original 
DCE/RCP standard already had defined ‘ncacn_ip_tcp’ and ‘ncadg_ip_udp’ for TCP and UDP 
connections. Microsoft added ‘ncacn_np’ for their implementation based on Named Pipes 
(transported through the SMB protocol).
RPC Messaging
RPC is a client-server technology with messaging architecture similar to COM (Component Object 
Model), which on a high level consists of the following three components:
A server & client process that are responsible for registering an RPC interface and associated 
binding information (more on this later on)
Server & client stubs that are responsible for marshalling incoming and outgoing data
The server’s & client’s RPC runtime library (rpcrt4.dll), which takes the stub data and sends 
them over the wire using the specified protocol (examples and details will follow)
A visual overview of this message architecture can be found at https://docs.microsoft.com/en-us/
windows/win32/rpc/how-rpc-works as shown below:
Later on, in section RPC Communication Flow, i will provide an overview of the steps involved 
from creating an RPC server to sending a message, but before we can dive into that we need to 
clarify a few RPC terminology bits.
Bare with me here while we dig into the insides of RPC. The following things are essential to know 
in order to to get along with RPC. 
If you get lost in new terms and API calls that you just can’t get in line you can always jump ahead 
to the RPC Communication Flow section to get an idea of where these thing belong in the 
communication chain.
Constant/Value
Description
ncacn_ip_tcp
Connection-oriented Transmission Control Protocol/Internet Protocol
(TCP/IP)
ncacn_http
Connection-oriented TCP/IP using Microsoft Internet Information Server
as HTTP proxy
ncacn_np
Connection-oriented named pipes (via SMB.)
ncadg_ip_udp
Datagram (connectionless) User Datagram Protocol/Internet Protocol
(UDP/IP)
ncalrpc
Local Procedure Calls (post Windows Vista via ALPC)
RPC Protocol Sequence
The RPC Protocol Sequence is a constant string that defines which protocol the RPC runtime 
should use to transfer messages. 
This string defines which RPC protocol, transport and network protocol should be used. 
Microsoft supports the following three RPC protocols:
Network Computing Architecture connection-oriented protocol (NCACN)
Network Computing Architecture datagram protocol (NCADG)
Network Computing Architecture local remote procedure call (NCALRPC)
In most scenarios where a connection is made across system boundaries you will find NCACN, 
whereas NCALRPC is recommended for local RPC communication.
The protocol sequence is a defined constant string assembled from the above parts, e.g. 
ncacn_ip_tcp for a connection-oriented communication based on TCP packets. 
The full list of RPC protocol sequence constants can be found at: https://docs.microsoft.com/en-u
s/windows/win32/rpc/protocol-sequence-constants.
The most relevant protocol sequences are shown below:
RPC Interfaces
In order to establish a communication channel the RPC runtime needs to know what methods 
(aka. “functions”) and parameters your server offers and what data your client is sending. These 
information are defined in a so called “Interface”. 
Side note: If you’re familiar with interfaces in COM, this is the same thing.
To get an idea of how an interface could be defined, let’s take this example from my Sample Code:
Interface1.idl
[
    // UUID: A unique identifier that distinguishes this
    // interface from other interfaces.
    uuid(9510b60a-2eac-43fc-8077-aaefbdf3752b),
    // This is version 1.0 of this interface.
    version(1.0),
The first thing to note is that interfaces are defined in an Interface Definition Language (IDL) file. 
The definitions in this will later on be compiled by the Microsoft IDL compiler (midl.exe) into 
header and source code files that can be used by the server and client. 
The interface header is rather self explanatory with the given comments - ignore the 
implicit_handle instruction for now, we get into implicit and explicit handles shortly. 
The body of the interface describes the methods that this interfaces exposes, their return values 
and their parameters. The [in, string]  statement within parameter definition of the Output 
function is not mandatory but aids the understanding of what this parameter is used for.
Side note: You could also specify various interface attributes in an Application Configuration File 
(ACF). Some of these such as the type of binding (explicit vs. implicit) can be placed in the IDL file, 
but for more complex interfaces you might want to add an extra ACF file per interface.
RPC Binding
Once your client connects to an RPC server (we’ll get into how this is done later on) you create 
what Microsoft calls a “Binding”. Or to put it with Microsoft’s words:
Binding is the process of creating a logical connection between a client program and a 
server program. The information that composes the binding between client and server is 
represented by a structure called a binding handle.
The terminology of binding handles gets clearer once we put some context on it. Technically 
there three types of binding handles:
Implicit
Explicit
Automatic
Side note: You could implement custom binding handles as described in here, but we ignore this 
for this post, as this is rather uncommon and you’re good with the default types.
Implicit binding handles allow your client to connect to and communicate with a specific RPC 
server (specified by the UUID in the IDL file). The downside is implicit bindings are not thread safe, 
multi-threaded applications should therefore use explicit bindings. Implicit binding handles are 
defined in the IDL file as shown in the sample IDL code above or in my Sample Implicit Interface. 
Explicit binding handles allow your client to connect to and communicate with multiple RPC 
servers. Explicit binding handles are recommended to use due to being thread safe and allow for 
multiple connections. An example of an explicit binding handle definition can be found in my code 
here. 
    // Using an implicit handle here named hImplicitBinding:
    implicit_handle(handle_t hImplicitBinding)
]
interface Example1 // The interface is named Example1
{
    // A function that takes a zero-terminated string.
    int Output(
        [in, string] const char* pszOutput);
    void Shutdown();
}
Automatic binding is a solution in between for the lazy developer, who doesn’t want to fiddle 
around with binding handles and let the RPC runtime figure out what is needed. My 
recommendation would be to use explicit handles just to be aware of what you’re doing.
Why do i need binding handles in the first place you might ask at this point. 
Imagine a binding handle as a representation of your communication channel between client and 
server, just like the cord in a can phone (i wonder how many people know these ‘devices’…). Given 
that you have a representation of the communication chanel (‘the cord’) you can add attributes to 
this communication channel, like painting your cord to make it more unique. 
Just like that binding handles allow you for example to secure the connection between your client 
and server (because you got something that you can add security to) and therefore form what 
Microsoft terms “authenticated” bindings.
Anonymous & Authenticated Bindings
Let’s say you’ve got a plain and simple RPC server running, now a client connects to your server. If 
you didn’t specify anything expect the bare minimum (which i will list shortly), this connection 
between client and server is referred to as anonymous or unauthenticated binding, due to the 
fact that your server got no clue who connected to it. 
To avoid any client from connecting and to level up the security of your server there are three 
gears you can turn:
You can set registration flags when registering your server interface; And/Or
You can set a Security callback with a custom routine to check whether a requesting client 
should be allowed or denied; And/Or
You can set authentication information associated with your binding handle to specify a 
security service provider and an SPN to represent your RPC server.
Let’s look at those three gears step-by-step.
Registration Flags
First of all when you create your server you need to register your interface, for example with a call 
to RpcServerRegisterIf2 - I’ll show you where this call comes into play in section RPC 
Communication Flow. As a fourth parameter to RpcServerRegisterIf2 you can specify Interface 
Registration Flags, such as RPC_IF_ALLOW_LOCAL_ONLY to only allow local connections. 
Side note: Read this as RPC_InterFace_ALLOW_LOCAL_ONLY
A sample call could look like this:
RPC_STATUS rpcStatus = RpcServerRegisterIf2(
    Example1_v1_0_s_ifspec,         // Interface to register.
    NULL,                           // NULL type UUID
    NULL,                           // Use the MIDL generated entry-point 
vector.
    RPC_IF_ALLOW_LOCAL_ONLY,        // Only allow local connections
    RPC_C_LISTEN_MAX_CALLS_DEFAULT, // Use default number of concurrent calls.
    (unsigned)-1,                   // Infinite max size of incoming data 
blocks.
    NULL                            // No security callback.
);
Security Callbacks
Next on the list is the security callback, which you could set as the last parameter of the above 
call. An always-allow callback could look like this:
To include this Security callback simply set the last parameter of the RpcServerRegisterIf2 function 
to the name of your security callback function, which in this case is just named “SecurityCallback”, 
as shown below:
This callback function can be implemented in any way you like, you could for example allow/deny 