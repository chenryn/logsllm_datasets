# Offensive Windows IPC Internals 2: RPC

## Contents
- The Series
- Introduction
- History
- RPC Messaging
- RPC Protocol Sequence
- RPC Interfaces
- RPC Binding
- Anonymous & Authenticated Bindings
- Registration Flags
- Security Callbacks
- Authenticated Bindings
- Well-known vs Dynamic Endpoints
- RPC Communication Flow
- Sample Implementation
- Access Matrix
- Attack Surface
- Finding Interesting Targets
- RPC Servers
- RPC Clients
- Unauthorized Access
- Client Impersonation
- Server Non-Impersonation
- MITM Authenticated NTLM Connections
- MITM Authenticated GSS_NEGOTIATE Connections
- References

## The Series
This is the second part of the "Offensive Windows IPC Internals" series. If you missed the first part, you can find it here: [Offensive Windows IPC Internals 1: Named Pipes](link-to-part-1).

Originally, Part 2 was intended to cover LPC (Local Procedure Call) and ALPC (Advanced Local Procedure Call). However, due to the complexity and time required to document these technologies, I decided to focus on RPC (Remote Procedure Call) first. This decision is also influenced by the fact that RPC uses ALPC for local communication and is the preferred method for fast local inter-process communication.

## Introduction
Remote Procedure Calls (RPC) is a technology that enables data communication between a client and a server across process and machine boundaries. It is an Inter-Process Communication (IPC) technology, similar to LPC, ALPC, and Named Pipes. RPC allows clients to call remote servers to exchange data or trigger remote routines. The term "remote" does not necessarily mean the server must be on a different machine; it can also be local.

In this blog post, we will explore the internals of RPC, its operation, and how to implement and attack RPC clients and servers from an offensive perspective. For a more defensive view, refer to Jonathan Johnson's work at [https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html](https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html).

Sample code for the implementations discussed in this post can be found at: [https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server](https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server)

## History
Microsoft's RPC implementation is based on the DCE (Distributed Computing Environment) standard developed by the Open Software Foundation (OSF) in 1993. Key contributors included Apollo Computer, which brought the NCA (Network Computing Architecture) that became a major part of DCE/RPC.

Microsoft hired Paul Leach, one of the founding engineers of Apollo, and adapted the DCE model to fit their programming scheme. They based the communication on Named Pipes and introduced their implementation with Windows 95. Although Microsoft had introduced LPC in 1994, they chose Named Pipes because LPC did not support asynchronous calls, which was a critical requirement for RPC.

The original DCE/RPC standard defined 'ncacn_ip_tcp' and 'ncadg_ip_udp' for TCP and UDP connections. Microsoft added 'ncacn_np' for their implementation based on Named Pipes (transported through SMB).

## RPC Messaging
RPC is a client-server technology with a messaging architecture similar to COM (Component Object Model). On a high level, it consists of:
- A server and client process responsible for registering an RPC interface and associated binding information.
- Server and client stubs that handle marshalling incoming and outgoing data.
- The server's and client's RPC runtime library (rpcrt4.dll), which sends the stub data over the wire using the specified protocol.

A visual overview of this message architecture can be found at: [https://docs.microsoft.com/en-us/windows/win32/rpc/how-rpc-works](https://docs.microsoft.com/en-us/windows/win32/rpc/how-rpc-works)

## RPC Protocol Sequence
The RPC Protocol Sequence is a constant string that defines the protocol, transport, and network protocol used by the RPC runtime to transfer messages. Microsoft supports three main RPC protocols:
- NCACN (Network Computing Architecture connection-oriented)
- NCADG (Network Computing Architecture datagram)
- NCALRPC (Network Computing Architecture local remote procedure call, via ALPC post Windows Vista)

Common protocol sequences include:
- `ncacn_ip_tcp` (TCP/IP)
- `ncacn_http` (HTTP proxy)
- `ncacn_np` (Named pipes via SMB)
- `ncadg_ip_udp` (UDP/IP)
- `ncalrpc` (Local Procedure Calls)

## RPC Interfaces
To establish a communication channel, the RPC runtime needs to know the methods (functions) and parameters offered by the server and the data sent by the client. These are defined in an Interface, typically in an IDL (Interface Definition Language) file.

Example:
```idl
[
    uuid(9510b60a-2eac-43fc-8077-aaefbdf3752b),
    version(1.0),
]
interface Example1 {
    int Output([in, string] const char* pszOutput);
    void Shutdown();
}
```

The IDL file is compiled by the Microsoft IDL compiler (midl.exe) into header and source code files. Complex interfaces may use an Application Configuration File (ACF) to specify additional attributes.

## RPC Binding
Binding is the process of creating a logical connection between a client and a server. There are three types of binding handles:
- **Implicit**: Not thread-safe, defined in the IDL file.
- **Explicit**: Thread-safe, recommended for multi-threaded applications.
- **Automatic**: Automatically managed by the RPC runtime.

Example of an explicit binding handle:
```c
RPC_STATUS rpcStatus = RpcServerRegisterIf2(
    Example1_v1_0_s_ifspec,
    NULL,
    NULL,
    RPC_IF_ALLOW_LOCAL_ONLY,
    RPC_C_LISTEN_MAX_CALLS_DEFAULT,
    (unsigned)-1,
    NULL
);
```

## Anonymous & Authenticated Bindings
By default, RPC connections are anonymous. To enhance security, you can:
- Set registration flags when registering the server interface.
- Use a security callback to control access.
- Set authentication information associated with the binding handle.

### Registration Flags
Example:
```c
RPC_STATUS rpcStatus = RpcServerRegisterIf2(
    Example1_v1_0_s_ifspec,
    NULL,
    NULL,
    RPC_IF_ALLOW_LOCAL_ONLY,
    RPC_C_LISTEN_MAX_CALLS_DEFAULT,
    (unsigned)-1,
    NULL
);
```

### Security Callbacks
Example of an always-allow callback:
```c
void SecurityCallback(RPC_IF_ID *pIfId, void *pAuthInfo, unsigned long *pAuthnLevel, unsigned long *pAuthnSvc, unsigned long *pAuthzSvc) {
    // Always allow
}
```

### Authenticated Bindings
Authenticated bindings require setting authentication information, such as a security service provider and an SPN (Service Principal Name).

## Well-known vs Dynamic Endpoints
Endpoints can be well-known (statically defined) or dynamic (assigned at runtime). Dynamic endpoints are more flexible but require additional management.

## RPC Communication Flow
The steps involved in creating an RPC server and sending a message include:
1. Define the interface in an IDL file.
2. Compile the IDL file to generate necessary code.
3. Register the interface and set up the server.
4. Create a binding handle on the client side.
5. Send and receive messages.

## Sample Implementation
Sample code for implementing RPC clients and servers can be found at: [https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server](https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server)

## Access Matrix
Understanding the access matrix is crucial for identifying potential attack vectors. This includes permissions, roles, and the scope of operations.

## Attack Surface
The attack surface of RPC includes vulnerabilities in the communication protocol, misconfigurations, and weak security settings. Common attacks include unauthorized access, impersonation, and man-in-the-middle (MITM) attacks.

## Finding Interesting Targets
Identifying interesting targets involves scanning for exposed RPC services and analyzing their configurations. Tools like `rpcdump` and `rpcinfo` can be useful.

## RPC Servers and Clients
Both RPC servers and clients need to be secured against common threats. Best practices include using strong authentication, limiting permissions, and monitoring for suspicious activity.

## Unauthorized Access
Preventing unauthorized access involves proper configuration of security settings and regular audits. Techniques like least privilege and role-based access control can help.

## Client Impersonation
Client impersonation can be prevented by ensuring that the server does not accept unauthenticated requests and by using secure authentication mechanisms.

## Server Non-Impersonation
Servers should be configured to avoid impersonating clients, which can lead to privilege escalation. This can be controlled through security settings and callbacks.

## MITM Authenticated NTLM Connections
Mitigating MITM attacks on authenticated NTLM connections involves using secure channels, such as SSL/TLS, and implementing mutual authentication.

## MITM Authenticated GSS_NEGOTIATE Connections
Similar to NTLM, GSS_NEGOTIATE connections should be protected against MITM attacks by using secure protocols and validating the authenticity of both parties.

## References
- [Microsoft Documentation on RPC](https://docs.microsoft.com/en-us/windows/win32/rpc/rpc-start-page)
- [Jonathan Johnson's IPC Research](https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html)
- [GitHub Repository for Sample Code](https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server)