### Dependency and Referer Fields in Web Requests

When an HTML object contains two embedded objects, the referer of those embedded objects is the parent HTML object. Similarly, if a user clicks a link to navigate to a new web page, the first request for the new page will have the referer field set to the URL of an object from the previous page.

### Streams and Referer Relations

At a high level, each stream is a transitive closure of the referer relation on the set of requests. If the referer field of a request is empty, that request becomes the start (or root) of a new stream. If the referer of a subsequent request matches any request in existing streams, it is associated with the matched stream. In cases where multiple streams match, the most recent one is chosen. If no match is found, a new stream is created, which can occur if the referer request was a browser cache hit and thus not present in the log.

Grouping requests by the referer relation helps isolate logs from different browser instances or tabs, as they belong to separate streams. This method also aids in identifying frames and client-side interactions, as all frames and interactions within the same web page are grouped into the same stream.

Although the referer field is optional, it is reliable because most modern browsers (Firefox and MSIE) enable it by default. Together, these browsers account for over 86% of our client population, as discussed in Section 2. When present, the referer field is used to group requests into streams.

### Step 1: Grouping Requests into Streams

1. **Identify Root Requests**: A request with an empty referer field starts a new stream.
2. **Match Subsequent Requests**: If the referer of a subsequent request matches any request in the existing streams, it is added to the matching stream.
3. **Handle Multiple Matches**: In case of multiple matches, the most recent stream is chosen.
4. **Create New Stream**: If no match is found, a new stream is created, possibly due to a cache hit.

### Step 2: Detecting Main Objects

After grouping the streams, we identify the main object for each stream:

1. **Generate Candidates**: Use a type-based approach to find HTML frame objects as main object candidates.
2. **Filter Candidates**: Discard candidates with no embedded objects, as modern web pages typically include many embedded objects.
3. **Time-Based Filtering**: Apply a time-based approach to finalize the main object selection. If the idle time between requests is below a threshold, they likely belong to the same web page. Overlapping HTML frame objects with short idle times are eliminated.

The remaining objects between two main objects are considered embedded objects of the preceding main object.

### Step 3: Identifying Initial Pages

The final step is to identify initial pages, as the previous steps may still include client-side interactions. We use the time-based approach, but simply checking the idle time is inaccurate due to DNS lookup and browser processing time variations.

To improve accuracy, we leverage the popular use of Google Analytics. The JavaScript code in Google Analytics triggers a beacon when the `DOMContentLoaded` event fires, indicating the page is fully loaded. This beacon allows us to apply the time-based approach more accurately. Other methods, such as beacons from other analytics services or custom JavaScript, can also be used.

### Validation

We validate the accuracy of our StreamStructure algorithm and compare it with existing approaches using a manually collected dataset. We visited the top 100 sites on Alexa's list via CoDeeN with MSIE, following approximately ten links from each site, resulting in 1,197 web pages. We recorded the URLs of the visited pages and compared them with the URLs found by each approach.

**Results**:
- **Time-Based Approach**: Poor performance, with a precision of 0.45 and recall of 0.55.
- **Type-Based Approach**: High recall (above 0.88) but low precision (about 0.27).
- **StreamStructure**: Outperforms both, achieving high precision and recall above 0.8, and is robust to the idle time parameter selection.
- **Time+Type Combination**: Less accurate, highlighting the importance of stream and structure information.

### Sensitivity Analysis

We investigated the sensitivity of the idle time parameter by comparing the cumulative distribution functions (CDFs) of page loading time, number of objects, and size of initial pages with different idle time thresholds. An idle time of 0.1 seconds is too short, while 5 seconds is too long. An idle time between 0.5 and 2 seconds provides stable and similar results.

### Analysis Results

We applied the StreamStructure algorithm to our CoDeeN access log dataset and analyzed the derived web pages. We used an idle time of one second for identifying web pages and initial pages, ignoring users active for less than 30 minutes to reduce bias.

**Initial Page Characteristics**:
- **Google Analytics Beacon**: Usage increased from less than 5% in 2006 to about 40% in 2010.
- **Page Traffic**: Initial page traffic accounts for 40-60% of total web traffic in terms of requests and bytes.
- **Complexity**: Median number of objects per page increased from 6 in 2006 to 12 in 2010, and median page size grew from 69 KB to 133 KB.
- **Latency**: Median page loading latency decreased from 8.45 seconds in 2008 to 5.98 seconds in 2010, likely due to increased concurrent connections and reduced object latency.

**Page Loading Latency Simulation**:
- **Factors**: Number of concurrent connections, object latency, and object dependencies.
- **Simulation Setup**: Objects fetched from a central FIFO queue, using measured object latencies and referer relations.
- **Simplifications**: Ignored network latency and browser parsing/processing time.

This simulation aims to assess the impact of various factors on page loading latency rather than predict exact values.