### HADES-IoT: A Practical Host-Based Anomaly Detection System for IoT Devices

#### 6.3 Exploitation of Vulnerabilities

**6.3.1 Credentials and Command Execution**

Once an attacker gains access to the credentials, they can use them to execute arbitrary commands on the vulnerable device, such as through the Telnet service. This vulnerability has been exploited by malware like Persirai and IoTReaper.

We tested HADES-IoT on a vulnerable IP camera (ProVision PT-737E). The exploit involves two steps:
1. **Credential Retrieval**: The attacker retrieves the credentials by reading the `system.ini` file. Since this action is handled by the HTTP server, which is whitelisted, HADES-IoT allows it.
2. **Remote Command Execution**: The remote command is sent via the FTP configuration CGI. According to HADES-IoT's logs, this step executes the `chmod` utility and `ftpupload.sh` script. However, since these executables are not in the whitelist, HADES-IoT terminates them upon execution, effectively stopping the attack.

**6.3.2 CVE-2013-2678 & IoTReaper, VPNFilter**

The CVE-2013-2678 vulnerability allows an attacker to execute arbitrary commands on the affected device. Attackers often exploit this to start the Telnet service and deliver malicious binaries. We used the Metasploit framework to test this vulnerability on an unprotected Cisco Linksys E4200 device. We observed that a SIGUSR1 signal was sent by `httpd` to `/sbin/preinit`, enabling the Telnet service. When we reproduced the attack with HADES-IoT, the attack failed at the point where the SIGUSR1 signal was sent, as it was not on the whitelist, and HADES-IoT stopped it.

**6.3.3 CVE-2014-9583 & VPNFilter**

CVE-2014-9583 is a vulnerability in the `infosrv` service running on ASUS routers, allowing an attacker to execute arbitrary commands with root privileges. This vulnerability can be exploited by the VPNFilter malware to infect the device and connect it to a botnet. We tested this vulnerability on an ASUS RT-N56U device protected by HADES-IoT in two scenarios:
- **Telnet Disabled (Default)**: The attempt to compromise the device was detected upon exploit execution.
- **Telnet Enabled**: The attack was detected later, either during malware download or execution, depending on the user's typical interaction with the device.

**6.3.4 TelnetEnable Magic Packet & VPNFilter**

Netgear routers allow users to enable the Telnet service via a specially crafted "magic" packet. This feature is exploited by the creators of the VPNFilter malware. We tested this vulnerability on a Netgear WNR2000v3 device:
- **Telnet Disabled**: The attack was detected by HADES-IoT when it began.
- **Telnet Enabled**: The attack was thwarted as soon as any unauthorized process was spawned, i.e., at the latest, during the execution of the malware.

#### 6.4 CPU and Memory Overhead

A critical aspect of a host-based defense system for IoT devices is low performance overhead. We conducted experiments to measure the CPU utilization and memory demands caused by HADES-IoT.

**CPU Utilization**
- **Idle State**: Figure 8a shows that the CPU load is usually minimal when the device is idle. Some devices, like the ProVision PT-737E, have higher CPU loads due to periodic processes that extract information from the device. HADES-IoT imposes an overhead of 34.6% and 36.9% for idle and user interaction cases, respectively.
- **User Interaction**: Figure 8b indicates that on some devices (e.g., SimpleHome and D-Link), HADES-IoT imposes greater overhead when a user interacts with the device. This is due to the spawning of additional processes to handle requests.

**Memory and Storage Utilization**
- **Memory Usage**: Figure 8c shows that HADES-IoT has low memory demands, averaging 5.5% of available space. The binary size and average memory usage vary across devices due to different cross-compilers and kernel configurations. For example, debug symbols in the HADES-IoT binary increase its size. Additionally, differences in memory usage are caused by tamper-proof mechanisms, which vary in size across devices.

#### 7. Discussion

**7.1 Firmware Updates**

Firmware updates are crucial for addressing improvements and bug fixes. When an IoT device is updated, the executables on the device may change, requiring the profile in HADES-IoT to be updated.

**Naïve vs. Advanced Update Procedures**
- **Naïve Update**: The flash of the device is fully rewritten, wiping out HADES-IoT, which must then be bootstrapped again.
- **Advanced Update**: Only relevant files are changed, keeping the rest, including service configurations, intact. This makes the update more convenient but still requires reprofiling.

**Frequency of Updates**
- Table 3 shows that the average timespan between firmware updates for major IoT manufacturers (D-Link, TP-Link, and ASUS) is over five months. Even if users update their devices frequently, updating HADES-IoT does not require significant extra effort, considering the effective protection provided.

**Deployment and Updates by Manufacturer**
- HADES-IoT can be deployed by the manufacturer and remotely updated. This benefits both manufacturers and end users, as manufacturers can claim that their devices come with security support. Users can manage and report on HADES-IoT and disable or constrain manufacturer support if needed.

#### 7.2 Deployment on Linux-Based Machines

HADES-IoT can run on any Linux-based machine, including PCs. However, it is designed for IoT devices with limited resources. PCs with Linux offer features like KProbe, Auditd, and SELinux, which can be used to develop similar but easier-to-implement solutions. IoT devices have a small and fixed set of applications, whereas PC environments change more frequently. Table 4 compares the number of unique processes on IoT devices and PCs, showing a significantly higher and less stable number on PCs. Frequent updates on PCs would necessitate frequent reprofiling, making HADES-IoT more suitable for IoT devices.