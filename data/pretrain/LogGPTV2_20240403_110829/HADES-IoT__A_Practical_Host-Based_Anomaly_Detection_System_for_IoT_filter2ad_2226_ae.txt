of the credentials, he can further use it to execute any command on
the vulnerable device (e.g., Telnet service). This vulnerability was
exploited by Persirai and IoTReaper.
We bootstrapped HADES-IoT on the vulnerable IP camera (i.e.,
ProVision PT-737E) and executed the exploit. In the first step of the
exploit, the credentials are retrieved by reading the system.ini file.
Since this is handled by the HTTP server that is in the whitelist,
HADES-IoT allows this action. In the second step, the remote com-
mand is sent through FTP configuration CGI. According to HADES-
IoT’s logs, this executes the chmod utility, as well as ftpupload.sh
that executes the command. However, since none of these executa-
bles are in the whitelist, HADES-IoT terminates both of them upon
their execution and stops the attack.
[CVE-2013-2678] & IoTReaper, VPNFilter. The CVE-2013-
6.3.3
2678 vulnerability enables an attacker to execute an arbitrary com-
mand on the affected device. Therefore, attackers usually exploit
this vulnerability to start Telnet service and then deliver the mali-
cious binary on the device. We used the Metasploit framework to
exploit this vulnerability on an unprotected device (Cisco Linksys
E4200). We observed that a SIGUSR1 signal was sent by httpd to
/sbin/preinit and subsequently, Telnet was enabled. We then repro-
duced the attack with HADES-IoT, but the attack failed at the mo-
ment SIGUSR1 was sent – the signal did not belong to the whitelist,
and thus HADES-IoT stopped it.
[CVE-2014-9583] & VPNFilter. CVE-2014-9583 represents
6.3.4
a vulnerability in the infosrv service running on ASUS routers. The
service enables an attacker to execute an arbitrary command with
root privileges on the vulnerable routers. Therefore, this vulnera-
bility can be exploited by the VPNFilter IoT malware in order to
infect the device and connect it to the botnet. We tested exploita-
tion of this vulnerability on the ASUS RT-N56U device protected
by HADES-IoT in two scenarios: with disabled and enabled Telnet.
With Telnet disabled (default option), an attempt to compromise
the device is detected upon exploit execution. However, in the case
in which Telnet is enabled, the attack is detected in its later stage;
this means upon malware download or its execution, depending on
the user’s typical interaction with the device.
6.3.5 TelnetEnable Magic Packet & VPNFilter. Netgear routers
allow a user to enable Telnet service via a specifically crafted (magic)
packet. This “feature” is exploited by the creators of the VPNFil-
ter malware for its deployment. We tested the exploitation of this
vulnerability on the Netgear WNR2000v3 device. Like the previ-
ous vulnerability, if the Telnet service is disabled, the attack by
VPNFilter is detected by HADES-IoT when it begins. With enabled
Telnet, the attack is thwarted as soon as any unauthorized process
is spawned (i.e., execution of the malware at the latest).
6.4 CPU and Memory Overhead
An important aspect of a host-based defense system for IoT de-
vices is low performance overhead. We conducted an experiment in
which we measured the CPU utilization caused by HADES-IoT (see
Figures 8a and 8b) and the memory demands (see Figure 8c). More
specifically, we measured an average CPU load that represents the
value of how much work has been done on the system in the previ-
ous N minutes [10] – in our case we used five minutes. Although
this metric has no clear boundaries, it is the most available option
on all IoT devices; common utilities such as top do not show LKMs
and their resource utilization, hence this information cannot be
obtained from them. Figure 8a shows that when a device is idle,
there is usually only a small amount of overhead. Note that in
some devices (e.g., ProVision PT-737E) the CPU load is significantly
higher than on other devices, and this is caused by the periodic
execution of hundreds processes that, for example, extract various
information from the device itself. Since HADES-IoT checks every
executed process, the overhead imposed is higher compared to less
active devices – the imposed overhead comprises 34.6% and 36.9%
of the total overhead for the idle case and the case of user interac-
tion, respectively.10 Furthermore, we can see in Figure 8b that on
some devices (e.g., SimpleHome and D-Link devices), HADES-IoT
imposes greater overhead when a user interacts with the device.
This is caused by spawning additional processes to handle the re-
quest, while on other devices the request can be handled by already
running processes.
Next, we measured memory and storage demands of HADES-IoT,
and the results (presented in Figure 8c) demonstrate low memory
demands in contrast to available space: 5.5% on average. Regard-
less of the same source code, the binary size and average memory
10Note that we ignore devices with negligible total overhead, i.e., less than 0.1.
(a) CPU load (idle)
(b) CPU load (with user interaction)
(c) Memory and storage utilization
Figure 8: Utilization of resources by HADES-IoT.
usage varies for each device. One of the reasons is that various
cross-compilers were used to compile HADES-IoT for each device.
However, what does have the highest impact on the binary size is
the configuration of the Linux kernel against which HADES-IoT is
compiled. For example, debug symbols are included in the HADES-
IoT’s binary due to the kernel configuration, which increases the
size of the binary. Also, note that differences in memory usage
across various devices is caused by the introduced tamper-proof
mechanisms – the integrity of HADES-IoT’s binary and init file
that must be loaded into the memory of HADES-IoT. In detail, these
files have a different size on each device, hence loading them into
the memory causes different memory consumption for each device.
7 DISCUSSION
7.1 Firmware Updates
To reflect improvements and bug fixes provided by a manufacturer,
firmware updates are important to deal with as well. When an IoT
device is updated, the executables on the device are modified, while
new ones might be added. This further means that the behavior
Manufacturer
Model
ASUS
D-Link
RT-N10E
RT-N10
RT-N56U
RT-N66U
RT-AC66U
DIR-890L
DCS-930L
DAP-1860
DCS-936L
DCS-942L
NC220
Avg. Time Between
Updates [Months]
15.03
2.33
5.28
2.33
2.37
3.21
7.47
4.96
5.77
6.40
9.10
5.98
9.17
2.55
1.13
5.54
Table 3: Average time between released updates.
Archer C2300
Archer D7 V1
Deco M5 V1
TL-WR1043ND V1
TP-Link
Average
in terms of the processes executed may change as well; thus, the
profile should be updated in HADES-IoT to reflect these changes.
Naïve vs. Advanced Update. We consider two types of firmware
update procedures on IoT devices. a) In the naïve update procedure,
the flash of the device is fully rewritten, which means that HADES-
IoT is wiped out. Therefore, HADES-IoT must be bootstrapped
again. b) In the advanced update procedure, however, only relevant
files are changed, while the rest is kept untouched, including the
configuration of services. This makes the update more convenient
as there is no need to bootstrap HADES-IoT again, but nevertheless
reprofiling must take place. Note that before updating a device,
HADES-IoT must be turned off by remote control (see Section 4.5.2).
Frequency of Updates. Another aspect that must be considered,
is the frequency of firmware updates. If IoT devices were updated
very frequently, then it would be inconvenient for an end user to up-
date HADES-IoT after each firmware update. To evaluate how often
firmware updates are released for IoT devices, we visited the web-
sites of three major IoT manufacturers (i.e., D-Link, TP-Link, and
ASUS); then we selected five IoT devices from each manufacturer
and inspected the release dates of firmware updates. In Table 3, we
see that the average timespan between update releases is over five
months. Users, however, usually update firmware of their devices
infrequently and in some cases they do not update the firmware at
all. Even were users to update their devices each time there is a new
firmware update released, we conjecture that updating HADES-IoT
does not require a significant amount of extra effort in contrast to
the firmware update itself, while taking into account the effective
protection provided.
Deployment and Updates by Manufacturer. Besides a deploy-
ment by the user, HADES-IoT might be deployed by a manufacturer
out of the shelf, while updates might be remotely performed by the
manufacturer as well. This would benefit both the manufacturers
and end users, as manufacturers could claim that their IoT device
is delivered with a support for security solution, eliminating time
and effort the user would need to spend on updates. Nevertheless,
the management and reporting of HADES-IoT could be handled by
the user as well, and the user would be able to disable/constraint
such a manufacturer’s support.
024681012024681012Configurationwith HADES-IoTOriginalconfigurationCPULoad024681012024681012Configurationwith HADES-IoTOriginalconfigurationCPULoad00.30.60.91.21.5Binary SizeMemory UsageSize[MB]2.3%1.4%1.2%4.3%0.9%16.1%12.3%[%] Out of Available MemoryHADES-IoT: A Practical Host-Based Anomaly Detection System for IoT Devices
Device
Device
Type
Linux
Kernel
Version
Unique
Process
Non-kernel
Processes
Kernel
Processes
Included
-
-
Netgear WNR2000v3
ASUS RT-N16
ASUS RT-N56U
Cisco Linksys E4200
D-Link DCS-942L
SimpleHome XCS7-1001
ProVision PT-737E
PC
PC
IoT
IoT
IoT
IoT
IoT
IoT
IoT
Ubuntu 16.04 (Development)
Kali 2.0 (Entertainment)
Custom
Custom
Custom
Custom
Custom
Custom
Custom
115
102
20
30
20
20
30
9
6
Table 4: Comparison of IoT devices and PCs.
4.15.0
4.17.17
2.6.15
2.6.21
2.6.21
2.6.22
2.6.28
3.0.8
3.4.35
118
132
30
35
31
20
30
10
6
183
190
40
47
48
35
62
45
43
7.2 Deployment on Linux-Based Machines
In general, HADES-IoT can run on any Linux-based machine, such
as a PC. However, it is important to note that HADES-IoT was
designed with a focus on IoT devices, having limited resources. In
contrast to IoT devices, PCs with Linux provide us with features,
such as KProbe, Auditd, or SELinux, which can be used to devise
an approach similar, but easier to develop than HADES-IoT. While
IoT devices have a rather small and fixed set of applications, the
environment of applications on PCs changes more frequently. To
compare differences in these environments, we installed HADES-
IoT on two PCs (see Table 4), and we observed a significantly higher
number of unique processes compared to IoT devices, while the set
of unique processes is not stable. Another limiting factor for the
deployment of HADES-IoT on PCs is the high frequency of updates,
which would necessitate frequent reprofiling. For these reasons,
we argue that HADES-IoT is appropriate for IoT devices and is not
suitable in volatile environments such as PCs.