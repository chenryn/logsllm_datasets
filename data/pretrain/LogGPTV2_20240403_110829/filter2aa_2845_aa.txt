Needle in A Haystack:
Catch Multiple Zero-days Using 
Sandbox
Qi Li
Security Development Engineer
Quan Jin
Vulnerability Mining and Exploiting Engineer
2019-5-30
About Us
Qi Li (@leeqwind)
360 Core Security Advanced Threat 
Automation Team
Security Development Engineer
Quan Jin (@jq0904)
360 Core Security Advanced Threat 
Automation Team
Vulnerability Mining and Exploiting Engineer
â€¢ Advanced Threat Automation and Sandbox
â€¢ Find in-the-wild zero-days using Sandbox
Outline
Cyber Attacks are Everywhere
The five in-the-wild exploiting zero-day attacks we captured up to now
CVE-2018-15982
Catch an international cyber-attack on a government 
agency in the world with a new Flash zero-day (CVE-
2018-15982).
2018-11
CVE-2018-8174
The first to capture a new APT MS Office attack using a 
browser zero-day (CVE-2018-8174) in the world, w h ich 
affects the latest version of Internet explorer and 
applications using the core of IE at that time.
2018-04
2018-06
CVE-2018-5002
The first company to catch an in-the-wild Flash zero-
day (CVE-2018-5002) worldwidely. The vulnerability 
affects Adobe Flash Player 29.0.0.171 and all versions 
below.
2017-12
CVE-2018-0802
The first in the world to catch Nightmare Equation II 
(CVE-2018-0802) zero-day, which is the first in-the-
wild zero-day Microsoft fixed in 2018.
CVE-2017-11826
Capture an in-the-wild zero-day (CVE-2017-11826) 
exclusively and globally. The first Office zero-day 
attack caught by Chinese security vendor.
2017-09
Cyber Attacks are Everywhere
1
10
100
1000
10000
100000
1000000
doc
docm
docx
eml
html
hwp
msi
nsis
pdf
ppt
pptm
pptx
rtf
swf
vbs
xls
xlsm
xlsx
exe
dll
others
Flash
HWP
IE
Kernel
Office
PDF
CVE-2012-0158
CVE-2015-1641
CVE-2015-1726
CVE-2015-2545
CVE-2016-7255
CVE-2017-11882
CVE-2017-8570
CVE-2018-0798
CVE-2018-0802
CVE-2018-4878
Statistics for some of the N-day exploits we detected from March 2018 to March 2019
Partial file type classification
Vulnerability module 
classification
Partial vulnerability count
Advanced Threat Automation
Sample
Cloud
Scheduler
Scan & Filter
Search
Alert
Subscription
Data
Collection
Worker
Server
Worker
Server
Worker
Server
Source & Prefiltering
Sandbox Servers Cluster
User Oriented
â€¢ Large-scale Sample Cloud
â€¢ Static Anti-virus Engine
â€¢ AVE QEX QVM
â€¢ Sample Pre-filtering Strategy
â€¢ Sandbox Servers Cluster
â€¢ Virtual Machine Isolation 
Environments
â€¢ Sandbox Detection Engine
â€¢ Rule Scoring System
â€¢ Result Alarm and Response
Advanced Threat Automation
â€¢ Large-scale Sample Cloud
â€¢ Static Anti-virus Engine
â€¢ AVE QEX QVM
â€¢ Sample Pre-filtering Strategy
â€¢ Sandbox Servers Cluster
â€¢ Virtual Machine Isolation 
Environments
â€¢ Sandbox Detection Engine
â€¢ Rule Scoring System
â€¢ Result Alarm and Response
VM Image Hub
Sandbox
Environment
Rule
Scoring
Task
Report
Log
Processing
VM
Operation
VM
How to do it?
Sandbox Detection Engine
â€¢ Initial Scenario: Dynamic Library
â€¢ Inject into target processes to work
â€¢ Hook export functions of system libs
Sandbox Detection Engine
Launch + Inject detector
Helper
Process
Suspecious
Process
Sub
Process
Hook
Exploit
VEH
Logging
Detector
Hook
Exploit
VEH
Logging
Detector
Launch
process
Inject detector
message
â€¢ Initial Scenario: Dynamic Library
â€¢ Inject into target processes to work
â€¢ Hook export functions of system libs
â€¢ Lightweight ðŸ˜€
Sandbox Detection Engine
Launch + Inject detector
Helper
Process
Suspecious
Process
Sub
Process
Hook
Exploit
VEH
Logging
Detector
Hook
Exploit
VEH
Logging
Detector
Launch
process
Inject detector
message
â€¢ Initial Scenario: Dynamic Library
â€¢ Inject into target processes to work
â€¢ Hook export functions of system libs
â€¢ Lightweight ðŸ˜€
â€¢ Is that enough?
Sandbox Detection Engine
Launch + Inject detector
Helper
Process
Suspecious
Process
Sub
Process
Hook
Exploit
VEH
Logging
Detector
Hook
Exploit
VEH
Logging
Detector
Launch
process
Inject detector
message
Launch + Inject detector
Helper
Process
Suspecious
Process
Sub
Process
Hook
Exploit
VEH
Logging
Detector
Hook
Exploit
VEH
Logging
Detector
Launch
process
Inject detector
message
â€¢ Initial Scenario: Dynamic Library
â€¢ Inject into target processes to work
â€¢ Hook export functions of system libs
â€¢ Lightweight ðŸ˜€
â€¢ Is that enough?
â€¢ Can be detected easily â˜¹
Sandbox Detection Engine
Launch + Inject detector
Helper
Process
Suspecious
Process
Sub
Process
Hook
Exploit
VEH
Logging
Detector
Hook
Exploit
VEH
Logging
Detector
Launch
process
Inject detector
message
Sandbox Detection Engine
â€¢ Initial Scenario: Dynamic Library
â€¢ Inject into target processes to work
â€¢ Hook export functions of system libs
â€¢ Lightweight ðŸ˜€
â€¢ Is that enough?
â€¢ Can be detected easily â˜¹
â€¢ Can be bypassed easily â˜¹
Launch + Inject detector
Helper
Process
Suspecious
Process
Sub
Process
Hook
Exploit
VEH
Logging
Detector
Hook
Exploit
VEH
Logging
Detector
Launch
process
Inject detector
message
Sandbox Detection Engine
â€¢ Initial Scenario: Dynamic Library
â€¢ Inject into target processes to work
â€¢ Hook export functions of system libs
â€¢ Lightweight ðŸ˜€
â€¢ Is that enough?
â€¢ Can be detected easily â˜¹
â€¢ Can be bypassed easily â˜¹
â€¢ Easy to lose the tracking chain to new 
processes launched remotely â˜¹
â€¢ The 2nd Option: Driver
â€¢ Monitor system call from target in kernel
â€¢ System callbacks, notifications, filters
Sandbox Detection Engine
Userland
Kernel
lib
syscall
obj
proc
fsflt
drv
Sandbox Detector Driver
lib
lib
â€¢ The 2nd Option: Driver
â€¢ Monitor system call from target in kernel
â€¢ System callbacks, notifications, filters
â€¢ More complete monitoring coverage ðŸ˜€
â€¢ More comprehensive stain tracking ðŸ˜€
Sandbox Detection Engine
Userland
Kernel
lib
syscall
obj
proc
fsflt
drv
Sandbox Detector Driver
lib
lib
â€¢ The 2nd Option: Driver
â€¢ Monitor system call from target in kernel
â€¢ System callbacks, notifications, filters
â€¢ More complete monitoring coverage ðŸ˜€
â€¢ More comprehensive stain tracking ðŸ˜€
â€¢ Is that all right?
Sandbox Detection Engine
Userland
Kernel
lib
syscall
obj
proc
fsflt
drv
Sandbox Detector Driver
lib
lib
Userland
Kernel
lib
syscall
obj
proc
fsflt
drv
Sandbox Detector Driver
lib
lib
Sandbox Detection Engine
â€¢ The 2nd Option: Driver
â€¢ Monitor system call from target in kernel
â€¢ System callbacks, notifications, filters
â€¢ More complete monitoring coverage ðŸ˜€
â€¢ More comprehensive stain tracking ðŸ˜€
â€¢ Is that all right?
â€¢ PATCH GUARD for 64-bit OS â˜¹
Userland
Kernel
lib
syscall
obj
proc
fsflt
drv
Sandbox Detector Driver
lib