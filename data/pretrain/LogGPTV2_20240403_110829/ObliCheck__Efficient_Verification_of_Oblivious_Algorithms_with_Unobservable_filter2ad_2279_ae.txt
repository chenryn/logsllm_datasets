A conditional predicate of the form LHS ◦ RHS in a loop
condition, where ◦ is one of the conditional operators (,≥, =,(cid:54)=), can be transformed to LHS− RHS◦ 0 and the
delta of LHS− RHS between iterations are obtained in the
same way that the delta of induction variables are ﬁgured
out [29]. When the operator ◦ is <, the number of iterations
is −(InitialValue/Delta). Since there can be multiple loop
conditions if a loop body has break or return statements,
ObliCheck computes the number of iterations for each loop
condition and takes the minimum among them.
i
n(cid:86)
After getting the delta per iteration of induction variables
and the number of iterations, the loop’s post-condition be-
IVi = Ci + Di ∗ ICl, where IVi represents the induc-
comes
tion variables, Ci is each induction variable’s initial value
before the loop, and ICl is the number of iterations of the
loop l. For example, the algorithm in Listing 4 has two in-
duction variables, i and buf.length. The post-condition be-
comes i = 0 + 1∗ inputSize∧ bu f .length = 0 + 1∗ inputSize.
The pre-condition of the loop is the loop condition i <
inputSize, so the loop is summarized as (i < inputSize)∧ (i =
inputSize∧ bu f .length = inputSize).
Limitation. ObliCheck cannot summarize the side-effects
of a loop on non-induction variables (e.g., sum += x, where
x is a symbolic expression). Also, if the loop condition de-
pends on a non-induction variable, ObliCheck is unable to
infer the number of loop iterations (e.g., for (i=0; i<y;
i+=x), where x is a symbolic expression, not a constant). The
same limitation applies to the recursive functions bounded
by input-dependent variables. In these cases, ObliCheck sim-
ply assigns an arbitrary symbolic variable to non-induction
variables and variables changed in a loop bounded by non-
induction variables for over-approximation. If a part of the
over-approximated variables is included in the veriﬁcation
condition, it will result in a false-positive. However, in §7 we
show that this is not the case for existing oblivious algorithms
since the relevant variables such as the length of the output
buffer increment by a ﬁxed amount per iteration.
Implementation
7 Evaluation
7.1
We implemented ObliCheck using Jalangi [61], a dynamic
program analysis framework for JavaScript. We chose
Javascript as a modeling language mainly to leverage the
existing open-source Jalangi framework and MultiSE imple-
mentation. Other open-source tools such as KLEE [16] and
Manticore [52] do not support full-ﬂedged state merging for
general programs. Moreover, the idea of value summary rep-
resentation and incremental state merging is most straightfor-
ward to base the implementation of our techniques on. The
main concern of our evaluation is the relative performance im-
provement from our techniques. Hence, we did not consider
the absolute performance of existing tools when choosing
MultiSE as a baseline.
Overcoming limitations of symbolic execution. We ad-
dress two challenges posed by the limitation of symbolic
execution. First, handling memory address and pointer val-
ues can be prohibitively expensive. When references and
pointers with symbolic values are de-referenced, symbolic
execution invokes a constraint solver to ﬁgure out all possible
pointer values under the path condition. Finding all satis-
fying assignments using a constraint solver is prohibitively
expensive. We eluded this issue since ObliCheck is based on
MultiSE. MultiSE does not require constraint solving for de-
referencing pointers because it maintains the set of possible
memory addresses of a pointer in the value-summary. This
allows ObliCheck to read and write memory locations directly
instead of using a constraint solver to reason about memory
operations. Second, symbolic execution cannot precisely han-
dle programs with unbounded loops or recursions. Existing
tools sacriﬁce soundness and limit the depth of path to handle
this issue. We implemented our loop summarization technique
in § 6 to preserve soundness and avoid false-negative cases.
ObliCheck is still not able to summarize all unbounded loops
as we pointed out in the last paragraph of § 6.
7.2 Evaluation Setup and Input Algorithms
We measured the total analysis time including the symbolic
execution and constraint solving time, but excluded the instru-
mentation time which is syntax-based and done before the
symbolic execution. The experiment was done on an AWS
instance with Ubuntu 18.04.2, with 2.5 GHz Intel Xeon Plat-
inum 8175 processors and the memory size is 32GB
We evaluate ObliCheck using existing data processing algo-
rithms from data processing frameworks used in production
and published academic papers. Table 6 lists the benchmark
algorithms. Opaque [78] is an open-source, distributed data
analytics frameworks based on Apache Spark [2]. Signal
Messenger [7] is an open-source encrypted messaging service
commercialized by Signal Messenger LLC. The input pro-
grams are derived from either the implementation or written
description of the algorithms. However, ObliCheck does not
verify the actual implementation of the algorithms and the
2230    30th USENIX Security Symposium
USENIX Association
Algorithm
Tag
Tag (Not Oblivious)
Tag&Apply
Sort
Filter
Aggregate
Join
MapReduce
Decision Tree
Hash Table
AES Encryption
Neural Net
ence
TextSecure Server
Infer-
operator
operator
operator
from Opaque
from Opaque
from Opaque
Description
The algorithm in Listing 1
The algorithm in Listing 1 with the false
branch in the if statement removed
The algorithm in Listing 3
Oblivious
project [3]
Oblivious
project [3]
Oblivious
project [3]
Oblivious
project [3]
MapReduce algorithm by Ohrimenko et
al. [57]
Oblivious decision tree inference by
Ohrimenko et al. [58]
Oblivious hash table used in the Signal
messenger contact discovery service [6]
AES CBC encryption from AES-JS [1]
Prediction part of a neural network from
neuroJS [5]
End-to-End message encryption server
in Javascript [4]
from Opaque
operator
Table 6: List of benchmark algorithms. Tag and Tag&Apply are the
example algorithms showed earlier. Sort, Filter, Aggreate and Join
are from the Opaque framework [3], MapReduce and Decision Tree
are from Ohrimenko et al. [57,58] and Hash Table is from the Signal
Messenger [7].
input programs are all re-written in the subset of Javascript
using ObliCheck APIs.
7.3 Accuracy Test
ObliCheck
Example
Oblivious?
(cid:13)
×
(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13)
×
(cid:13)
(cid:13)
(cid:13)
(cid:13)
×
(cid:13) 
× 
(cid:13) 
(cid:13) 
(cid:13) 
(cid:13) 
(cid:13) 
× 
(cid:13) 
(cid:13) 
(cid:13) 
(cid:13) 
× 
Taint
Analysis
× 
× 
× 
× 
× 
× 
× 
× 
× 
× 
(cid:13) 
(cid:13) 
× 
OSM OSM+ISU
(cid:13) 
× 
× 
(cid:13) 
(cid:13) 
(cid:13) 
(cid:13) 
× 
(cid:13) 
(cid:13) 
(cid:13) 
(cid:13) 
× 
Tag
Tag (NO)
Tag&Apply
Sort
Filter
Aggregate
Join
MapReduce
DecisionTree
HashTable
AES Encryption
Neural Net Inference
TextSecure Server
Table 7: Accuracy evaluation result of each technique over the bench-
mark suite algorithms. Taint Analysis checks the algorithm has a se-
cret dependent branch by taint tracking. OSM is our optimistic state
merging technique where only the length of buffers are not merged,
and ISU is our iterative state unmerging technique (ObliCheck). (cid:13)
means the algorithm is classiﬁed as oblivious and × represents one
is classiﬁed as not oblivious.  marks the test result is correct (either
true positive or true negative)and  marks the result is an error (either
false positive or false negative).
We ﬁrst evaluate the accuracy of ObliCheck’s techniques
(i.e., optimistic state merging and iterative state unmerging)
and compare it with other existing techniques – namely, taint
tracking, and symbolic execution with conventional state
merging (MultiSE). Table 7 displays the results. MapReduce
is not oblivious because it pads the output up to the possi-
ble maximum length of the output based on the input data.
Thus, it leaks information regarding the input data distribu-
tion. TextSecure Server is not oblivious since the server sends
the different lengths of the messages based on the status of
the devices and it does not pad the messages before sending
them.
Taint analysis classiﬁes all algorithms as not oblivious ex-
cept for AES Encryption and Neural Net Inference. Both
of the two are only algorithms without secret-dependent
branches. Our optimistic state merging technique obtains the
correct results except for the Tag&Apply (in Listing 3) exam-
ple. As we discussed in §5, optimistic state merging enables
two paths with different symbolic states to get merged pre-
cisely by the overapproximation. However, the performance
improvement comes at the cost of accuracy due to false posi-
tives. In Tag&Apply, simply merging all the tag values leads
to false positive because of the if statements in the apply
function in Listing 3.
With iterative state unmerging, ObliCheck iterates the sym-
bolic execution in addition to the ﬁrst Optimistic State Merg-
ing phase. In Listing 3 with the Tag&Apply source code, the
tag value is unmerged in the second iteration then ObliCheck
correctly classiﬁes the program as oblivious. Both conven-
tional state merging and our iterative state unmerging tech-
nique correctly identify oblivious and non-oblivious algo-
rithms. There is no false-negative case in either technique.
We discuss the cost of additional iterations of iterative state
unmerging in the next evaluation.
7.4 Performance Evaluation
Pure symbolic execution suffers from path explosion and
conventional state merging does not fully address this issue.
We evaluate the performance of applying conventional state
merging to ObliCheck and show how much performance im-
provement it achieves in terms of total program analysis time.
We also measured the overhead of iterative state merging com-
pared with a non-iterative domain-speciﬁc merging technique.
We set the length of the input data as large as possible until
MultiSE is on the brink of out of memory. The input data
to be processed is considered private in all the examples. In
Neural Net Inference, we consider the size of the network
layers is not private. In TextSecure Server, we consider the
destination device addresses are private input.
Table 8 shows the evaluation results of pure MultiSE and
ObliCheck on the test algorithms. ObliCheck performs up
to 50300× faster than MultiSE. The improvement mainly
comes from the reduced number of exploration paths and
simpliﬁed path conditions due to optimistic state merging.
USENIX Association
30th USENIX Security Symposium    2231
Example
LoC Branch
Total Time (s)
Symbolic Execution (MultiSE)
ObliCheck (OSM)
Overhead (%)
(vs OSM)
27
25
32
149
150
156
160
62
35
42
754
179
158
90
90
94
263
287
268
268
241
653
139
0
0
149
Avg Value
Summary Size Total Time (s)
0.19
1.48
0.27
0.44
0.41
0.35
0.31
9.68
0.19
0.15
0.99
4.84
0.18
459.52
589.71
377.00
4.01
7.46
3.99
4.06
204.86
465.12
38.64