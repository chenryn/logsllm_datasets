某种特定类型的方法。
也将其定义为类方法。将其定义为静态方法也是一样，没有办法强迫子类将抽象方法实现为
示例7.13混合使用@classmethod和@abstractmethod
例7.13所示。
可能会支持在@abstractmethod之上使用@staticmethod 和@classmethod装饰器，如示
基类 BasePizza 中定义的抽象接口，所以它仍然是有效的。
日
注意，像这样在 BasePizza 中定义 get_ingredients 为类方法并不会强迫其子类
从Python3开始（在 Python 2中有问题，详见 issue 5867，http:/bugs.python.org/issue5867)，
class BasePizza(object):
import abc
class BasePizza(object):
import abc
@classmethod
default_ingredients =['cheese']
def get_ingredients(cls):
@abc.abstractmethod
@classmethod
ingredients = ['cheese']
return cls.ingredients
=abc.ABCMeta
=abc.ABCMeta
本电子书仅限学习交流使用，请勿用于商业用途
7.6混合使用静态方法、类方法和抽象方法
105
---
## Page 113
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
这些概念，那么建议读一些相关的资料以便形成自己的观点。
会直接指定，但也可以像下面这样写：
方式应该非常熟悉了：class classname(expression of inheritance）。
原因，因为它是Python 核心的一部分。
很多开发人员似乎并不理解这些机制是如何工作的，以及与其关联的 super（）方法。
get_ingredients 方法，但它可以通过基类的默认机制访问原料表。
注意
7.7
混入（mixin）类是指继承自两个或两个以上的类，并将它们的特性组合在一起。
106
括号内的部分是一个 Python 表达式，返回一个当前类要继承的类对象列表。通常，都
到目前为止，你应该知道，在 Python 中类也是对象，而且对于这种构建类的特定声明
多继承仍然被广泛使用，尤其在使用了混合模式的代码里。这也是了解它仍然很重要的
单继承和多继承各有利弊，组成或者鸭子类型都超出了本书的讨论范围，如果你不了解
>>> def parent():
从 Python 的最早期开始，开发人员就能够通过单继承和多继承扩展他们的类。不过，
在这个例子中，每一个新的继承自 BasePizza 基类的 Pizza 子类都必须重写
class DietPizza(BasePizza):
>>
关于 super 的真相
 def get_ingredients(self):
第7章方法和装饰器
class A(parent()):
def get_ingredients(cls) :
@abc.abstractmethod
return [Egg()] + super(DietPizza, self).get_ingredients()
pass
return object
return cls.default_ingredients
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 114
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
个包含这个属性的类中返回这个属性。
方法去遍历MRO列表中的类并返回第一个满足条件的属性：
super（）函数实际上是一个构造器，每次调用它都会实例化一个 super 对象。它接收一个
/releases/2.3/mro)。
实现的，关于其内部工作机制详见Python 2.3 release notes（http://www.python.org/ download
序（method resolution order）用于解析属性。当前的 MRO 系统是在 Python 2.3 中第一次被
'object'>]
当请求C 的实例的访问其 super 对象的一个属性时，它会遍历 MRO 列表，并从第一
构造器返回的对象就像是第一个参数的父类的一个代理。它有自己的_getattribute_
你已经知道了调用父类方法的正规方式是通过 super（）函数，但你很可能不知道
>>> super(C, C()).bar
>>> class A(object) :
不出所料，可以正常运行：类A 继承自父类object。类方法 mro（)返回方法解析顺
>
>>> super(c, C()) .foo
[ ]
>>>super(B).self
42
>>> C.mro()
>>>class C(A,B):
>>>A.mro()
>>>
class B(object):
xyz='abc
bar=0
def foo(self):
bar=42
pass
本电子书仅限学习交流使用，请勿用于商业用途
7.7关于 super 的真想
107
---
## Page 115
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
只通过一个参数调用 super（），则会返回一个未绑定的 super 对象：
装饰器使用过它。它是Python的一种机制，允许对象以属性的方式进行存储以返回其他
尽管你可能没有听说过描述符协议，但是你很可能在不知道的情况已经通过@property
注意
(super(C)._get_(D()，
108
粗一看，似乎这种 super 对象没什么用，但是 super 类通过某种方式实现了描述符协
前一个例子中使用了绑定的 super 对象，也就是说，通过两个参数调用 super。如果
>>> D().sup.foo
:dns>
>>>D().sup
>>> class D(C) :
Traceback (most recent call last):
>>> super(C).xyz
>>> super(C).bar
AttributeError:'super' object has no attribute 'foo'
Traceback (most recent call last):
由于对象是未绑定的，所以不能通过它访问类属性：
, NULL>
>>>super(C)
>>>D().sup.bar
File "", line 1, in 
Traceback(most recent calllast):
>>> super(C).foo
File "",
File "", 1ine 1, in 
第7章方法和装饰器
sup = super(C)
本电子书仅限学习交流使用，请勿用于商业用途
line1，in
'foo"））能够让它找到并解析foo。
_get_
方法
---
## Page 116
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
协作调用不出意外，例如在多继承时父类方法没有被调用或者被调用了两次。
但没有参数传给 super（）时，它会为它们自动搜索栈框架：
有银弹”。
的是，除了类似让方法接收*args，
东西而非其自身。本书不会讨论这个协议的具体细节，想详细了解可参考Python数据模
super 是在子类中访问父类属性的标准方式，应该尽量使用它。它能确保父类方法的
class B(A):
在 Python 3中，super（）变得更加神奇：可以在一个方法中不传入任何参数调用它。
在许多场景中使用 super 都是很有技巧的，例如处理继承链中不同的方法签名。遗憾
deffoo（self):
super().foo()
本电子书仅限学习交流使用，请勿用于商业用途
**kwargs 参数这样的技巧，针对这个问题同样“没
7.7
关于 super 的真想
109
---
## Page 117
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 118
熊猫爱中国www.xiongmaoi.com
熊猫爱中国个非纯函数
数可以被看成纯函数式函数。
并生成输出而不保留任何状态或修改任何不反映在返回值中的内容。遵循这种理想方式的函
除了少数情况，函数式编程可以让你写出更为精确和高效的代码。
支持确实存在而且相当广泛。尽管许多Python程序员并没有意识到这一点，这有点儿难堪：
第8章一
·简洁。函数式编程通常比其他范型更为简洁。
·可形式化证明。诚然，这只是个纯理论的优点，没有人会用数学方法去证明一个
def butlast(mylist):
def remove_last_item(mylist):
在以函数式风格写代码时，函数应该设计成没有其他副作用。也就是说，函数接收参数
函数式编程具有以下实用的特点。
一个纯函数
函数式编程并不是考虑使用Python时需要考虑的首要问题，但Python 对函数式编程的
模块化。模块化编码能够在一定程度上强制对问题进行分治解决并简化在其他场景
下的重用。
Python 程序。
return mylist[:-l] # This returns a copy of mylist
mylist.pop(-1) # This modifies mylist
 """Removes the last item from a list."""
函数式编程
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 119
熊猫爱中国www.xiongmaoi.com
熊猫爱中国，
被用来在下一次调用 next 函数时恢复函数的执行。
会像return 语句那样返回一个值，但一个明显不同在于：解释器会保存对栈的引用，它将
会检测对 yield 的使用并将这个函数标识为一个生成器。当函数执行到yield 语句时，它
org/2/library/stdtypes.html#iterator-types）的方式来创建对象。
引入的，并提供了一种比较简单的实现迭代器（iterator）协议（https://docs.python.
8.1
它比 Python 要更关注函数式编程。
程，将很难拓展那种要充分利用函数式编程的思维过程。Lisp 本身也并非纯函数式,但是
经验告诉我如何“函数式地思考”。如果你所有的经验都来自于命令式编程和面向对象编
去学习 Lisp。我知道在一本 Python 书里谈 Lisp 很奇怪，但是这么多年同 Python 打交道的
如果想要更严谨的函数式编程，那么请参考我的建议：暂时从Python 中跳出来放松一下
112
提示
要创建一个生成器所需要做的只是写一个普通的包含yield语句的Python函数。Python
生成器（generator）就是对象，在每次调用它的 next（）方法时返回一个值，直到它抛
·并发。纯函数式函数是线程安全的并且可以并行运行。尽管在Python中还没实现，
>>>g=mygenerator()
>>>mygenerator()
>>def mygenerator() :
创建一个生成器
）可测性。测试一个函数式程序是非常简单的：所有需要做的仅仅是一组输入和一组
期望的输出。而且是幂等的。
但期待一些语言能够自动进行处理，这在需要扩展应用程序时非常有用。
第8章函数式编程
生成器
yield'a'
yield2
yield1
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 120
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
成器函数标识的内部实现。
inspect.isgeneratorfunction 的源代码
通过阅读inspect.isgeneratorfunction 的源代码也可以洞察一些前面提到的生
False
>>> inspect,isgeneratorfunction(sum)
>>> def mygenerator():
>>>import inspect
def isgeneratorfunction(object):
可以通过 inspect.isgeneratorfunction 检查一个函数是否是生成器。
True
>>
>>>
>>>importinspect
StopIteration
File "", line 1, in 
Traceback (most recent call last):
>>>next(g)
>>>
>>>next(g)
>>>next(g)
a'.
"""Return true if the object is a user-defined generator function.
Generator function objects provides same attributes as functions.
inspect.isgeneratorfunction(mygenerator)
def mygenerator():
next(g)
yield1
yield1
object.func_code.co_flags & Co_GENERATOR)
本电子书仅限学习交流使用，请勿用于商业用途
8.1生成器
113
---