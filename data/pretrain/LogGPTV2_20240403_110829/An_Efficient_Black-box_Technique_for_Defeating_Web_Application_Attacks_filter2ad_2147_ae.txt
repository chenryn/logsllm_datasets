### Performance Evaluation

#### Taint Inference Algorithm Comparison
The taint inference algorithm was compared, excluding the time for I/O, parsing, and policy enforcement. Our observations were as follows:
- **Speed Improvement**: The taint inference process was accelerated by a factor of 10 to 20, with an average improvement of about 14.
- **Memory Efficiency**: Memory requirements for taint inference were reduced by a factor of 50 to 1000.
- **Algorithm Performance**: The coarse-filtering algorithm took significantly more time than the edit-distance algorithm.

#### Component Contribution Analysis
We then investigated the relative contribution of different components of our implementation (excluding the time spent within event interceptors) to the overall performance. We found that:
- **Taint Inference Algorithms**: Approximately 60% of the total time was spent in taint inference algorithms.
- **Parser and Policy Checking**: About 20% of the time was spent in the parser, and another 20% in policy checking.

These results were obtained using profiling tools and validate the efforts made to improve the performance of taint inference.

#### Overall Performance Overhead
Finally, we measured the total performance overhead introduced by our approach after all optimizations, including pruning policies, were factored in. Our focus was on benign requests, assuming that the vast majority of requests received by a protected server would be benign. For this measurement, we used the AMNESIA dataset because the requests can be launched from a script, making it easier to perform meaningful performance measurements.

**Results Summary**:
- **Response Time**: The "response time" column in Figure 9 shows the total time taken (in seconds) to carry out all requests in the absence of our defenses. This measures the wall-clock time for sending all requests and receiving responses.
- **Overhead**: The "overhead" column shows the increase in response time when our defenses are enabled.

**Optimization Effectiveness**:
- The optimization described in Section 6 is particularly effective. If an input parameter does not match our attack filtering criteria, it is not processed by the taint inference algorithm. Additionally, output parsing and policy enforcement are skipped if none of the parameters in a session match the attack-filtering criteria. This optimization improves performance by an average factor of 5 for these applications.

### Related Work

#### Model-Carrying Code and Dataflow Anomaly Detection
- **Techniques**: Model-carrying code [24] and dataflow anomaly detection [1] developed techniques for discovering information flows by using runtime comparison of parameter values across different function calls.
- **Focus**: These works focused on discovering equality relationships among relatively short strings, primarily file names, which is simpler than the taint inference problem addressed in this paper.
- **Goals**: Their goal was to build an automata model of program behavior, which differs from our aim of defining policies and detecting injection attacks.

#### Taint-Tracking Techniques
- **Applications**: Various techniques have been developed for taint-tracking to detect memory corruption [27, 5, 16] and script injection attacks [21, 17, 10].
- **Efficiency**: Research into efficient taint-tracking techniques has been extensive [28, 13, 22, 23], but taint-tracking remains expensive, especially in the context of C and binary code, with overheads often exceeding 50%.
- **Instrumentation**: Taint-tracking requires extensive instrumentation of the protected application, which may impact stability or require source code access. Our approach avoids such instrumentation.

#### Injection Attack Detection
- **AMNESIA [9]**: Relied on static analysis to detect the intended structure of SQL queries. Static analysis must make approximations, reducing accuracy.
- **Candid [25]**: Uses dynamic analysis to discover intended query structure and has been extended to address XSS attacks [2]. However, these dynamic approaches also rely on deep instrumentation and have similar drawbacks to taint-tracking.

#### Intrusion Detection Techniques
- **Non-Intrusive Operation**: Our approach is similar to traditional intrusion detection techniques, which can operate non-intrusively based on observable data without deep instrumentation.
- **Accuracy**: Our approach offers improved accuracy over traditional intrusion detection techniques, which historically suffer from high false positive or negative rates. It provides comparable accuracy to taint-tracking and related techniques without the need for deep instrumentation.

#### Complex Transformations
- **Taint-Tracking Limitations**: Most practical taint-tracking techniques track only data dependence, ignoring control-dependence and implicit flows, leading to missed flows during complex transformations.
- **False Positives**: When tainted and untainted data are stored and retrieved from the same aggregate data structure, taint-tracking techniques can introduce false positives.
- **Robustness**: Our approach is robust enough to handle standard encodings and reliably detect attacks on web applications, which typically do not use many complex transformations.

#### Formal Characterization and Input Modification
- **Su et al. [26]**: Focused on formal characterization of SQL injection and related attacks. Our work improves on theirs by providing a language-neutral policy framework decoupled from parser implementations.
- **Input Modification**: Su et al. [26] modified inputs by adding bracketing characters, which can break real applications. Our approach does not require any modification of inputs or outputs and is a true black-box technique.

#### Client-Side Defenses
- **Microsoft IE 8 [15]**: Incorporates a defense for common forms of reflected XSS attacks. It compares inputs and outputs and detects attacks based on HTTP request characteristics. Our approach, implemented on the server side, uses rough parsing and approximate substring matching, while Microsoft's approach uses regular expression matching.

#### Privacy Oracle [12]
- **Black Box Approach**: A recently developed black-box approach for discovering information leaks by applications. It infers possible flows based on differential testing.
- **Sequence Alignment**: Uses sequence alignment algorithms to compare different outputs, contrasting with our approach, which matches inputs with outputs.

### Conclusions
In this paper, we presented a new approach for accurate detection of common types of attacks on web applications. Our approach relies on a novel technique for inferring taint propagation by passively observing inputs and outputs of a protected application. We introduced a new policy framework that enables policies to be specified in a language-neutral manner. Compared to previous works, our approach does not require extensive instrumentation of the applications to be protected. It is robust and can support applications written in various languages (Java, C, C++, PHP) and on multiple platforms (Apache, IIS, Tomcat). It can detect many types of command injection attacks and cross-site scripting within a single framework, using very few policies, and introduces significantly lower overheads (typically less than 5%) compared to previous approaches.

### Acknowledgements
We would like to thank Mark Cornwell, James Just, and Nathan Li from Global Infotek for numerous discussions on this project and for helping with experiments involving Microsoft IIS and WebGoat. We also thank Lorenzo Cavallaro for compiling the CVE vulnerability chart shown in Figure 1, and Wei Xu for providing a working version of many of the exploits used in this paper.

### References
[References listed as provided in the original text]

This optimized version of your text is more structured, concise, and professional, making it easier to read and understand.