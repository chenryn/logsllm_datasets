LOG.error("File not found " + fileName + ": " + fnfEx.getMessage());
} catch (IOException ioEx) {
LOG.error("Failed to write texture file " + fileName + ": " +
ioEx.getMessage());
return false; }
Large Objects method:
// Get the Large Object Manager to perform operations with
LargeObjectManager lobj =
((org.postgresql.PGConnection)connection).getLargeObjectAPI();
// Open the large object for reading
long oid = rs.getLong(1);
if (oid == 0) {
LOG.error("Database error while reading library object: " + fileName);
return false;
}
LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
// Read the data
byte buf[] = new byte[obj.size()];
obj.read(buf, 0, obj.size());
// Write the data
try {
FileOutputStream fos = new FileOutputStream(fileURI);
fos.write(buf, 0, obj.size());
obj.close();
fos.close();
} catch (FileNotFoundException fnfEx) {
LOG.error("File not found " + fileName + ": " + fnfEx.getMessage());
} catch (IOException ioEx) {
LOG.error("Failed to write texture file " + fileName + ": " +
ioEx.getMessage());
return false;
}
connection.commit();
43
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
7. The batchsize of PostgreSQL
Packages: Classes:
 api [C] Internal
 cmd [C] UpdateBatching
[M cityE] DBExportCache
 config
[M cityI] DBImportXlinkResolverWorker
 database [M cityI] DBImportXlinkWorker
 event [M cityI] DBAddress
 gui [M cityI] DBAddressToBuilding
[M cityI] DBAppearance
 log
[M cityI] DBAppearToSurfaceData
 modules [M cityI] DBBuilding
 plugin [M cityI] DBBuildingFurniture
 util [M cityI] DBBuildingInstallation
[M cityI] DBCityFurniture
[M cityI] DBCityObject
[M cityI] DBCityObjectGenericCityObject
[M cityI] DBCityObjectGroup
[M cityI] DBExternalReference
[M cityI] DBGenericCityObject
[M cityI] DBImplicitGeometry
[M cityI] DBLandUse
[M cityI] DBOpening
[M cityI] DBOpeningToThemSurface
[M cityI] DBPlantCover
[M cityI] DBReliefComponent
[M cityI] DBReliefFeatToRelComp
[M cityI] DBReliefFeature
[M cityI] DBRoom
[M cityI] DBSolitaryVegetatObject
[M cityI] DBSurfaceData
[M cityI] DBSurfaceGeometry
[M cityI] DBThematicSurface
[M cityI] DBTrafficArea
[M cityI] DBTransportationComplex
[M cityI] DBWaterBodyToWaterBndSrf
[M cityI] DBWaterBody
[M cityI] DBWaterBoundarySurface
[M cityI] DBImportCache
[M cityI] DBXlinkImporterBasic
[M cityI] DBXlinkImporterDeprecatedMaterial
[M cityI] DBXlinkImporterGroupToCityObject
[M cityI] DBXlinkImporterLibraryObject
[M cityI] DBXlinkImporterLinearRing
[M cityI] DBXlinkImporterSurfacegeometry
[M cityI] DBXlinkImporterTextureAssociation
[M cityI] DBXlinkImporterTextureFile
[M cityI] DBXlinkImporterTextureParam
[M cityI] XlinkBasic
[M cityI] XlinkDeprecatedMaterial
[M cityI] XlinkGroupToCityObject
[M cityI] XlinkSurfaceGeometry
[M cityI] XlinkTexCoordList
[M cityI] XlinkTextureAssociation
[M cityI] XlinkTextureParam
[M cityI] XlinkWorldFile
[M cityI] ResourcesPanel
The maximum batchsize of PostgreSQL was set to 10000 and given the name
POSTGRESQL_MAX_BATCH_SIZE. A higher value might be possible but was not tested. The
parameter had to be renamed in many classes.
44
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
de.tub.citydb.config.internal.Internal
39 // public static final int ORACLE_MAX_BATCH_SIZE = 65535;
public static final int POSTGRESQL_MAX_BATCH_SIZE = 10000;
In the following examples no equivalent methods could be found for the Java
PreparedStatement. The psDrain batch is now executed and not sent.
de.tub.citydb.modules.citygml.exporter.database.gmlid.DBExportCache
de.tub.citydb.modules.citygml.importer.database.gmlid.DBImportCache
82 // ((OraclePreparedStatement)psDrains[i]).setExecuteBatch(batchSize);
143 // ((OraclePreparedStatement)psDrain).sendBatch();
psDrain.executeBatch();
8. Workspace Management
Packages: Classes:
 api [A] DatabaseController
 cmd [C] Internal
[C] Database
 config
[C] Workspace
 database [C] Workspaces
 event [D] DatabaseConnectionPool
 gui [D] DatabaseControllerImpl
[M cityE] DBExportCache
 log
[M cityE] DBExportXlinkWorker
 modules [M cityE] DBExporter
 plugin [M cityE] DBSplitter
 util [M cityE] ExportPanel
[M cityI] DBImportCache
[M cityI] DBImportXlinkResolverWorker
[M cityI] DBImporter
[M cityI] ImportPanel
[M DB] BoundingBoxOperation
[M DB] DatabaseOperationsPanel
[M DB] ReportOperation
[U] DBUtil
[U] Util
PostgreSQL does not offer a workspace or history management like Oracle does. Every part in
the Java code concerning these workspace features was uncommented but not deleted as
there might be a solution for database versioning in the future. The affected packages are
colored orange.
45
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
9. KML-Exporter
Packages: Classes:
 api [M kml] KmlExportWorker
 cmd [M kml] KmlExporter
[M kml] BalloonTemplateHandlerImpl
 config
[M kml] CityObjectGroup
 database [M kml] ColladaBundle
 event [M kml] KmlExporterManager
 gui [M kml] KmlGenericObject
[M kml] KmlSplitter
 log
[M kml] Queries
 modules
 plugin
 util
Due to the modular architecture of the Importer/Exporter the port of the KML-Exporter only
affected classes of the KML module. The code design differs from the CityGML module.
9.1 Queries
Database queries are collected in one central class and were used as string constants in other
classes.
de.tub.citydb.modules.kml.database.Queries
44 // public static final String GET_IDS =
rep // "SELECT co.gmlid, co.class_id " +
// "FROM CITYOBJECT co " +
// "WHERE " +
// "(SDO_RELATE(co.envelope, MDSYS.SDO_GEOMETRY(2002, ?, null, " +
// "MDSYS.SDO_ELEM_INFO_ARRAY(1,2,1), " +
// "MDSYS.SDO_ORDINATE_ARRAY(?,?,?,?,?,?)), " +
// "'mask=overlapbdydisjoint') ='TRUE') " +
// "UNION ALL " +
// "SELECT co.gmlid, co.class_id " +
// "FROM CITYOBJECT co " +
// "WHERE " +
// "(SDO_RELATE(co.envelope, MDSYS.SDO_GEOMETRY(2003, ?, null,
// "MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,3), " +
// "MDSYS.SDO_ORDINATE_ARRAY(?,?,?,?)), " +
// "'mask=inside+coveredby') ='TRUE') " +
// "UNION ALL " +
// "SELECT co.gmlid, co.class_id " +
// "FROM CITYOBJECT co " +
// "WHERE " +
// "(SDO_RELATE(co.envelope, MDSYS.SDO_GEOMETRY(2003, ?, null, " +
// "MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,3), " +
// "MDSYS.SDO_ORDINATE_ARRAY(?,?,?,?)), 'mask=equal') ='TRUE') "
// + "ORDER BY 2"; // ORDER BY co.class_id
46
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
public static final String GET_IDS =
"SELECT co.id, co.gmlid, co.class_id " +
"FROM CITYOBJECT co " +
"WHERE " +
"ST_Intersects(co.envelope, ST_GeomFromEWKT(?)) = 'TRUE' " +
"UNION ALL " +
"SELECT co.id, co.gmlid, co.class_id " +
"FROM CITYOBJECT co " +
"WHERE " +
"ST_CoveredBy(co.envelope, ST_GeomFromEWKT(?)) = 'TRUE' " +
"ORDER BY 3"; // ORDER BY co.class_id*/
56 // public static final String QUERY_EXTRUDED_HEIGHTS =
// "SELECT " + // "b.measured_height, " +
// "SDO_GEOM.SDO_MAX_MBR_ORDINATE(co.envelope, 3) -
SDO_GEOM.SDO_MIN_MBR_ORDINATE(co.envelope, 3) AS
envelope_measured_height " +
// "FROM CITYOBJECT co " + // ", BUILDING b " +
// "WHERE " +
// "co.gmlid = ?"; // + " AND b.building_root_id = co.id";
public static final String GET_EXTRUDED_HEIGHT =
"SELECT " + // "b.measured_height, " +
"ST_ZMax(Box3D(co.envelope)) - ST_ZMin(Box3D(co.envelope)) AS
envelope_measured_height " +
"FROM CITYOBJECT co " + // ", BUILDING b " +
"WHERE co.gmlid = ?"; // + " AND b.building_root_id = co.id";
The following query is only needed in the PostGIS version to prevent a full table scan of the
Surface_Data table as it holds BYTEA objects (see chapter 6).
76 public static final String GET_TEXIMAGE_FROM_SURFACE_DATA_ID =
"SELECT sd.tex_image " +
"FROM SURFACE_DATA sd " +
"WHERE " +
"sd.id = ?";
86 // public static final String TRANSFORM_GEOMETRY_TO_WGS84 =
rep // "SELECT SDO_CS.TRANSFORM(?, 4326) FROM DUAL";
public static final String TRANSFORM_GEOMETRY_TO_WGS84 =
"SELECT ST_Transform(?, 4326)";
112 // public static final String GET_CENTROID_LAT_IN_WGS84_FROM_ID =
rep // "SELECT v.Y FROM TABLE(" +
// "SELECT SDO_UTIL.GETVERTICES(
// SDO_CS.TRANSFORM(
// SDO_GEOM.SDO_CENTROID(co.envelope, 0.001), 4326)) " +
// "FROM CITYOBJECT co " +
// "WHERE co.id = ?) v";
public static final String GET_CENTROID_LAT_IN_WGS84_FROM_ID =
"SELECT ST_Y(ST_Transform(ST_Centroid(co.envelope), 4326)) " +
"FROM CITYOBJECT co " +
"WHERE co.id = ?";
172 // public static final String GET_ENVELOPE_HEIGHT_MIN_IN_WGS84_FROM_ID
rep // =
// "SELECT SDO_GEOM.SDO_MIN_MBR_ORDINATE(
47
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
// SDO_CS.TRANSFORM(co.envelope, 4326), 3) " +
// "FROM CITYOBJECT co " +
// "WHERE co.id = ?";
public static final String GET_ENVELOPE_HEIGHT_MIN_IN_WGS84_FROM_ID =
"SELECT ST_ZMin(Box3D(ST_Transform(co.envelope, 4326))) " +
"FROM CITYOBJECT co " +
"WHERE co.id = ?";
The following example is a bit tricky. In Oracle a best practice to aggregate a large number of
polygons is to perform a sort of pyramid aggregation. That means aggregations are primarily
done on smaller adjacent groups which are then aggregated to bigger groups and so on (see
GROUP BY clauses at the end of the query). Internally the PostGIS function ST_Union works
similar using the CascadedPolygonUnion function of the GEOS library. Thus GROUP BY
aggregations are not needed.
454 // public static final String
rep // BUILDING_PART_GET_AGGREGATE_GEOMETRIES_FOR_LOD2_OR_HIGHER =
// "SELECT sdo_aggr_union(mdsys.sdoaggrtype(aggr_geom,
// )) aggr_geom " +
// "FROM (SELECT sdo_aggr_union(mdsys.sdoaggrtype(aggr_geom,
// )) aggr_geom " +
// "FROM (SELECT sdo_aggr_union(mdsys.sdoaggrtype(aggr_geom,
// )) aggr_geom " +
// "FROM (SELECT sdo_aggr_union(mdsys.sdoaggrtype(simple_geom,
// )) aggr_geom " +
// "FROM (" +
//
// "SELECT * FROM (" +
// "SELECT * FROM (" +
//
// "SELECT geodb_util.to_2d(sg.geometry, ) AS
// simple_geom " +
// //"SELECT geodb_util.to_2d(sg.geometry, (select srid from
// // database_srs)) AS simple_geom " +
// //"SELECT sg.geometry AS simple_geom " +
// "FROM SURFACE_GEOMETRY sg " +
// "WHERE " +
// "sg.root_id IN( " +
// "SELECT b.lod_geometry_id " +
// "FROM CITYOBJECT co, BUILDING b " +
// "WHERE "+
// "co.gmlid = ? " +
// "AND b.building_root_id = co.id " +
// "AND b.lod_geometry_id IS NOT NULL " +
// "UNION " +
// "SELECT ts.lod_multi_surface_id " +
// "FROM CITYOBJECT co, BUILDING b, THEMATIC_SURFACE ts " +
// "WHERE "+
// "co.gmlid = ? " +
// "AND b.building_root_id = co.id " +
// "AND ts.building_id = b.id " +
// "AND ts.lod_multi_surface_id IS NOT NULL "+
// ") " +
// "AND sg.geometry IS NOT NULL" +
//
// ") WHERE sdo_geom.validate_geometry(simple_geom, )
48
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
// = 'TRUE'" +
// ") WHERE sdo_geom.sdo_area(simple_geom, ) >
// " +
//
// ") " +
// "GROUP BY mod(rownum, ) " +
// ") " +
// "GROUP BY mod (rownum, ) " +
// ") " +
// "GROUP BY mod (rownum, ) " +
// ")";
public static final String
BUILDING_PART_GET_AGGREGATE_GEOMETRIES_FOR_LOD2_OR_HIGHER =
"SELECT ST_Union(get_valid_area.simple_geom) " +
"FROM (" +
"SELECT * FROM (" +
"SELECT * FROM (" +
"SELECT ST_Force_2D(sg.geometry) AS simple_geom " +
"FROM SURFACE_GEOMETRY sg " +
"WHERE " +
"sg.root_id IN( " +
"SELECT b.lod_geometry_id " +
"FROM BUILDING b " +
"WHERE b.building_root_id = ? " +
"AND b.lod_geometry_id IS NOT NULL " +
"UNION " +
"SELECT ts.lod_multi_surface_id " +
"FROM BUILDING b, THEMATIC_SURFACE ts " +
"WHERE b.building_root_id = ? " +
"AND ts.building_id = b.id " +
"AND ts.lod_multi_surface_id IS NOT NULL "+
") " +
"AND sg.geometry IS NOT NULL) AS get_geoms " +
"WHERE ST_IsValid(get_geoms.simple_geom) = 'TRUE')
AS get_valid_geoms " +
// ST_Area for WGS84 only works correctly if the geometry is a
// geography data type
"WHERE ST_Area(ST_Transform(get_valid_geoms.simple_geom,4326)
::geography, true) > ) AS get_valid_area";
651 // private static final String SOLITARY_VEGETATION_OBJECT_COLLADA_ROOT_
rep // IDS= "SELECT ? FROM DUAL "; // dummy
private static final String SOLITARY_VEGETATION_OBJECT_COLLADA_ROOT_IDS =
"SELECT ?"; // dummy
de.tub.citydb.modules.kml.database.KmlSplitter
187 // BoundingBox tile =
rep // exportFilter.getBoundingBoxFilter().getFilterState();
// OracleResultSet rs = null;
// PreparedStatement spatialQuery = null;
// try {
// spatialQuery =
49
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
// connection.prepareStatement(TileQueries.QUERY_GET_IDS);
// int srid =
// DatabaseConnectionPool.getInstance().
// getActiveConnectionMetaData().getReferenceSystem().getSrid();
//
// spatialQuery.setInt(1, srid);
// // coordinates for inside
// spatialQuery.setDouble(2, tile.getLowerLeftCorner().getX());
// spatialQuery.setDouble(3, tile.getLowerLeftCorner().getY());
// spatialQuery.setDouble(4, tile.getUpperRightCorner().getX());
// spatialQuery.setDouble(5, tile.getUpperRightCorner().getY());
// spatialQuery.setInt(6, srid);
//
// // coordinates for overlapbdydisjoint
// spatialQuery.setDouble(7, tile.getLowerLeftCorner().getX());
// spatialQuery.setDouble(8, tile.getUpperRightCorner().getY());
// spatialQuery.setDouble(9, tile.getLowerLeftCorner().getX());
// spatialQuery.setDouble(10, tile.getLowerLeftCorner().getY());
// spatialQuery.setDouble(11, tile.getUpperRightCorner().getX());
// spatialQuery.setDouble(12, tile.getLowerLeftCorner().getY());
//
// rs = (OracleResultSet)query.executeQuery();
BoundingBox tile = exportFilter.getBoundingBoxFilter().getFilterState();
ResultSet rs = null;
PreparedStatement spatialQuery = null;