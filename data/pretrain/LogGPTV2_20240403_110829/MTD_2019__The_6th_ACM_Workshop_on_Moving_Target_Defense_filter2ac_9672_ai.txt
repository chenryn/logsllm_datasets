vides insights and lessons based on the observations of general
system behaviors with minimum evaluation cost. However,
due to the probabilistic parameterization of all the key system
design features, a certain level of simplicity and abstraction
is unavoidable and may not be able to capture some devia-
tions and/or unexpected effect that can be introduced in real
application scenarios.
2) Graphical Security Model-based MTD Evaluation: The
graph-based security models (GSM) have been proposed and
widely used in modeling and analysis of the network security
using attack graphs (AGs) [141] and attack trees (ATs) [130].
The hierarchical attack representation model (HARM) [65]
has been developed to model a system’s security features
with two layers, an upper layer and a lower layer. The
upper layer represents a network’s reachability information
(i.e., network topological information) using an AG while
the lower layer represents a node’s vulnerability information
using ATs, as shown in Fig. 9. A comprehensive assess-
ment of the effectiveness of MTD techniques (i.e., shufﬂing,
diversity, and redundancy) have been developed using the
HARM [5, 67, 69]. Hong et al. [70] proposed a technique
to capture dynamic changes in the network resulted from
deploying MTD techniques through the simulation. To this
end,
they incorporated MTD techniques into the temporal
graph-based graphical security model [160] and then evaluated
22
(a) An example cloud model.
V M1
V M3
A
V M2
R
O
V M4
R
O
. . .
R
O
R
O
. . .
V M5
R
O
DB
R
O
. . .
v0
v1
. . .
vn
v0
v1
. . .
vn
v0
v1
. . .
vn
(b) Two-layer HARM of the example cloud in (a).
Fig. 9. The cloud model example [65] showing an attacker (A) and a target
(e.g., database, or DB) where (a) illustrates the cloud model and (b) shows the
two-layer HARM of the cloud example including an AG in the upper layer
and ATs in the lower layer capturing vulnerabilities (denoted by vi) existing
on each VM.
their MTD techniques using the dynamic security metrics.
Pros and Cons: The main advantages of using GSMs are
the ease of evaluation and representation. Furthermore, GSMs
can be adopted to compute various security metrics based on
the MTD application. A GSM can be easily visualized and
help the network administrators or cloud providers to ﬁnd out
the vulnerabilities of the network and choose appropriate de-
fensive strategies like MTD techniques. However, generating
and analyzing GSMs in large-scale networks suffers from a
scalability issue. Although this has been improved by using
HARM which is more scalable than the other GSMs, it is
still challenging to model the very large-scale networks using
GSMs.
B. Simulation Model-based MTD Evaluation
Most studies evaluating the performance of MTD ap-
proaches have been validated based on simulation experiments.
EVALUATION METHODS OF MTD TECHNIQUES: PROS VS. CONS.
TABLE VI
23
Providing theoretical background and understanding with
minimum cost; ease of modeling, representation, and
Scalability issues with some analyaitcal models (e.g., GSM,
SPN); limitations in reﬂecting realistic scenarios due to
Cons
Better ﬂexibility in attack/system modeling than analytical
models; easy parameterization for sensitivity analysis
High validity; high modeling ﬂexibility; more realistic
abstraction/simplicity traded off for efﬁciency
Limitations due to inherent uncertainty toward real-world
applications
Lack of scalability due to issues in limited hardware
computational resources; still maintaining a certain level of
Real Testbeds
Highest ﬂexibility and validity in modeling and experiments
among all other available evaluation tools
Least scalability in complexity and cost among all available
abstraction/simplicity
evaluation tools
Evaluation Method
Analytical Models
Simulation
Emulation
Pros
evaluation
scenarios
Compared to analytical models, simulation models have more
ﬂexibility in modeling speciﬁc attack behaviors (e.g., periodic
attacks [83], DDoS attacks [170], Multi-Armed Bandit policy-
based attacks [121], sequential attacks on attack surface [26]),
and various testing scenarios characterizing unique environ-
mental features (e.g., cloud-based service computing [120],
wireless sensor networks using IPv6-based MTD [162]). Some
simulation studies add MTD features into existing network
simulators (e.g., NeSSi2 [170]).
Pros and Cons: Simulation models provide high ﬂexibility in
modeling diverse types of attacks, environmental conditions,
and/or different types of MTD techniques as most design
features can be easily parameterized without much restriction.
Due to the ﬂexibility and experimental capability to conduct
sensitivity analysis by varying the values of key design param-
eters, it allows us to easily obtain meaningful insights before
performing the implementation in a real system. However,
the simulation model has its inherent limitations because all
possible variables may not be captured due to the nature
of existing, uncontrollable uncertainty. Therefore, the lessons
obtained from the simulation studies may not be realized in
real testbed-based experiments or systems.
C. Emulation Model-based MTD Evaluation
Compared to the simulation-based studies, results from
emulation testbed-based experiments can even provide a
higher validity on experimental results although emulation-
based studies are not common as much as simulation studies.
Aydeger et al. [13] proposed an SDN-based route mutation
technique to deal with DDoS attacks which are validated via
the implementation on the Mininet emulator with a Floodlight
SDN controller. Further, Aydeger et al. [14] deﬁned a route
mutation MTD technique for the Internet Service Provider
(ISP) network context
through NFV and virtual shadows
network aiming to thwart possible DDoS attack. Their route
mutation method makes it difﬁcult for the attackers to perform
attack reconnaissance phase and obtain network topology
information. They implemented their work in an emulated
environment using Mininet and evaluated the effectiveness
of their framework in terms of success rate and overhead
which measures defensive costs, such as storage cost and
end-to-end (ETE) delay. Jafarian et al. [79] presented an
OF random host mutation technique, and validated it via the
Mininet emulator with an NOX SDN controller. Skowyra et al.
[143] constructed an enterprise-like network topology using
the Mininet emulator, and validated the network performance
in terms of time-to-ﬁrst-byte and total download time, and the
security robustness is evaluated by testing several classes of
cyberattacks.
Pros and Cons: Emulation models can provide a higher valid-
ity than simulation models in the experimental results validated
through them. In addition, they also provide higher ﬂexibility
in modeling realistic attack types and MTD techniques than
simulation-based evaluation. However, most emulation-based
test environments (e.g., Mininet) running on a single machine
share the same hardware resources for all emulation elements,
making it difﬁcult
to evaluate experiments for large-scale
networks.
D. Real Testbed-based MTD Evaluation
1) SDN-based Testbeds: MacFarland and Shue [100] pro-
posed a host-based MTD technique to defend against network
reconnaissance attacks on an SDN environment and validated
their proposed method via the implementation of an SDN
controller and DNS/NAT (Network Address Translator) func-
tionalities on the Ubuntu OS using Python scripts. Hong et al.
[68] presented a shufﬂing-based optimal network reconﬁgura-
tion method on SDNs. They constructed a real SDN testbed
consisting of SDN-enabled hardware switches and an SDN
controller to carry out performance analysis when the proposed
shufﬂing-based MTD technique is deployed on the network.
Wang et al. [156] constructed a real enterprise-like SDN topol-
ogy with Open vSwitch (OVS) and Ryu SDN controller to
verify their proposed U-TRI (Unlinkability Through Random
Identiﬁer) MTD technique.
2) Cloud or Web-based Environment: Kampanakis et al.
[85] presented an AG-based MTD countermeasure selection
method. They constructed a prototypical virtualized cloud
computing platform on Openstack and validated the perfor-
mance overhead of the proposed method on the Cloud-based
testbed. Vikram et al. [154] proposed a novel MTD technique
that defends against web bots which automatically send re-
quests to remote web servers by hiding the correct name/ID
parameter values of HTML elements. Security effectiveness
and performance overhead of the proposed technique are tested
on the web platform testbeds. Penner and Guirguis [121] de-
veloped a set of MTD techniques that randomize the locations
of VMs in the cloud against Multi-Armed Bandit (MAB)
policy-based attacks. The authors demonstrated the proposed
defense strategies in an OpenStack-based cloud environment
24
Fig. 10. An example deployment of MTD techniques in an enterprise
network [171].
Fig. 11. An example deployment of MTD in an IoT environment [101]:
Context-aware code partitioning and diversiﬁcation.
and evaluated their performance based on migration downtime
and network trafﬁc.
Pros and Cons: Real testbeds can help verify the performance
of MTD techniques under more realistic system environments.
However, it is difﬁcult to evaluate the MTD techniques in
large-scale networks. Most real
testbed-based studies have
focused on evaluating the performance of MTD in small or
mid-sized networks.
We summarize the pros and cons of each evaluation method
discussed above in Table VI.
IX. APPLICATION DOMAINS OF MTD TECHNIQUES
MTD techniques have been deployed in diverse application
domains. We discuss how MTD techniques have been applied
in the following environments: (1) enterprise networks; (2)
Internet-of-Things (IoT); (3) cyber-physical systems (CPS);
(4) software-deﬁned networks (SDNs); and (5) cloud-based
Web services. In this section, we aim to answer what MTD
techniques, attack behaviors, design methodologies / theories,
and evaluation methods are used in existing MTD techniques
developed under each domain.
A. Enterprise Networks
to operate in a static conﬁguration,
An enterprise networked system is homogeneously and
statically conﬁgured. Since the enterprise networked system
is built
the attackers
are relatively easy to plan and launch successful attacks to
penetrate into the system. In addition, the attacker can develop
mechanisms to make attacks dynamic, aiming at defeating
detection mechanisms.
MTD Techniques: The common MTD techniques used for
enterprise networks are mostly shufﬂing or diversity-based.
The examples include platform migrations or system diver-
sity [20, 30, 46, 49], server location migrations [51, 158],
software stack diversity [161], proxy shufﬂing [83], or IP
mutation [34].
Main Attacks: Most MTD approaches developed for enter-
prise networks countermeasured worm attacks [51], DDoS
[51, 83, 158], abstracted attacks
in an attack-defense
game [49], scanning attacks [20, 30, 34], APT attacks [161], or
more sophisticated, multi-stage attacks, including circumven-
tion attacks, deputy attacks, entropy reducing attacks, probing
attacks, and incremental attacks [46].
Key Methodologies: Since majority of existing MTD ap-
proaches have used game theoretic approaches, many MTD
techniques for enterprise networks have used in an attack-
defense game where the MTD techniques are used as
defense strategies. The examples include utility-concerned,
incentive-compatible MTD [51], game theoretic approaches
(Bayesian Stackelberg game [49], empirical game-theoretic
analysis [158], moving target game [83]), or decision utility
model [20]. Some MTD research focused on developing the
assessment tools to measure the performance of MTD tech-
niques, such as quantitative MTD assessment framework [161]
or model-based probability models to estimate the effective-
ness of MTD techniques [43, 46].
Evaluation Methods: As seen in Section VIII, most MTD
approaches have used simulation-based experiments for the
performance validation. The similar trends are observed in
evaluating MTD techniques for enterprise networks , which
are mainly validated based on simulation models [20, 34, 49,
51, 83, 158, 161] while the use of a model-based probabil-
ity/analytical models was not common [30].
Fig. 10 depicts the architecture of the MTD deployment
in an enterprise network [171]. The MTD mechanism is
implemented in the conﬁguration manager which produces
effective conﬁgurations with intelligent adaptations.
Pros and Cons: Many MTD approaches for enterprise net-
works have been developed using game theoretic approaches
by modeling an attack-defense game. As discussed in Sec-
tion VI-A, modeling and formulating the interactions between
an attacker and defender and estimating their utilities can
be easily formulated using the game theoretic approaches.
However, due to a certain level of abstractions on speciﬁc
attack / defense behaviors or strategies, how much those can
be applicable in practice still remained unclear. Further, most
works are validated based on analytical or simulation models,
which inherently introduce a certain level of abstraction and/or
omission in modeling the behaviors of a system and players
(i.e., an attacker and defender), which inherently limits the
applicability.
B. Internet-of-Things (IoT)
IoT refers to a network environment characterized by het-
erogeneous devices interacting with each other where the
devices are controlled by machines and/or humans. Recently,
the advance of IoT technologies has contributed to developing
innovative applications in various domains [128]. However,
due to its large scale and severe resource constraints relying
on limited bandwidth and/or power, conventional security /
defense mechanisms (e.g., endpoint anti-virus software) has
shown its limitations for applicability in IoT environments.
Therefore, the threats and/or attacks encountered in IoT en-
vironments have been hurdles in providing seamless, normal
services and operation of IoT-based systems [53]. The MTD
paradigm is an emerging, new technology concept that can
provide the capability to protect an IoT system even under
the challenges. In this section, we discuss the key MTD tech-
niques, attacks, methodologies, and evaluation methods used
to develop MTD technologies to protect IoT environments.
MTD Techniques: In the literature, most IoT-based MTD
techniques are shufﬂing or diversity-based. The examples in-
clude mutation of cryptosystem and/or ﬁrmware version [26],
IP randomization [140], IPv6 rotation (i.e., µMT6D) [162],
or code partitioning and diversiﬁcation on IoT devices [101].
Since IoT concerns severe resource constraints because most
of them are mobile devices, developing lightweight shufﬂing-
based MTD is a key concern in IoT-based MTD.
Main Attacks: The most common attack behaviors considered
in IoT-based MTD approaches are reconnaissance (scanning)
attacks [101, 140, 162, 163] although some conventional
attacks, such as cryptographic attacks [26], are also con-