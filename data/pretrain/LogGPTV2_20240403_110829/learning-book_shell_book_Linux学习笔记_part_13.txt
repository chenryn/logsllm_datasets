第一行表示的项目依次为当前时间、系统启动时间、当前系统登录用户数目、平均负载。
第二行显示的是Tasks:114total进程总数、2running正在运行的进程数、110 sleeping睡眠的进程数、
0 stopped停止的进程数、2zombie 僵尸进程数
第三行显示的是目前CPU的使用情况，Cpu(s):0.3%us用户空间占用CPU百分比、1.0% sy内核空间
占用CPU百分比、0.0%ni用户进程空间内改变过优先级的进程占用CPU百分比、98.7%id空
闲 CPU百分比、0.0% wa等待输入输出的CPU 时间百分比、0.0%hi、0.0% si
第四行显示物理内存的使用情况，Mem:191272ktotal物理内存总量、173656kused使用的物理内存
总量、17616kfree空闲内存总量、22052kbuffers 用作内核缓存的内存量
第五行显示交换分区使用情况，Swap:192772ktotal交换区总量、0kused使用的交换区总量、192772k
free 空闲交换区总量、123988kcached缓冲的交换区总量、内存中的内容被换出到交换区，
而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的
交换区的大小。相应的内存再次被换出时可不必再对交换区写入。
第六行显示的项目最多，下面列出了详细解释。
PID（ProcessID）：进程标志号，是非零正整数。USER：进程所有者的用户名。PR：进程的优先级别。
NI：进程的优先级别数值。VIRT：进程占用的虚拟内存值。RES：进程占用的物理内存值。SHR：进程
使用的共享内存值。STAT：进程的状态，其中S表示休眠，R表示正在运行，Z表示僵死状态，N表
示该进程优先值是负数。%CPU：该进程占用的CPU使用率。%MEM：该进程占用的物理内存和总内
---
## Page 67
存的百分比。TIME：该进程启动后占用的总的CPU时间。COMMAND：进程启动的启动命令名称，如
果这一行显示不下，进程会有一个完整的命令行。
top命令使用过程中，还可以使用一些交互的命令来完成其他参数的功能。这些命令是通过快捷键启
动的。
：立刻刷新。
A分类显示系统不同资源的使用大户。有助于快速识别系统中资源消耗多的任务。
添加删除所要显示栏位
o调整所要显示栏位的顺序
r调整一个正在运行的进程Nice值.
k结束一个正在运行的进程.
z彩色/黑白显示开关
P：根据CPU使用大小进行排序。
T：根据时间、累计时间排序。
q：退出 top 命令。
m：切换显示内存信息。
t：切换显示进程和CPU状态信息。
C:
切换显示命令名称和完整命令行。
M：根据使用内存大小进行排序。
W：将当前设置写入～/.toprc文件中.这是写top配置文件的推荐方法。
可以看到，top命令是一个功能十分强大的监控系统的工具，对于系统管理员而言尤其重要。但是，
它的缺点是会消耗很多系统资源。
十一、
资源监控
1、free内存监控
语
法：free [-bkmotV][-s]
补充说明：free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以
及系统核心使用的缓冲区等。
数：
-b
以Byte 为单位显示内存使用情况。
-k
以KB为单位显示内存使用情况。
m
以MB为单位显示内存使用情况。
不显示缓冲区调节列。
-s
持续观察内存使用状况。
-t
显示内存总和列。
-V
显示版本信息。
[rootetest
~]# free
tota1
used
free
shared
buffers
cached
Men:
879
865
13
 0
126
541
/+ buffers/cache:
197
189
Swap:
2047
0
2047
Mem：表示物理内存统计
-/+buffers/cached：表示物理内存的缓存统计
Swap：表示硬盘上交换分区的使用情况
第1行Mem：
total：表示物理内存总量。
---
## Page 68
used：表示总计分配给缓存（包含buffers与cache）使用的数量，但其中可能部分缓存并未实际使
用。
free：未被分配的内存。
shared：共享内存，一般系统不会用到，这里也不讨论。
buffers：系统分配但未被使用的buffers数量。
cached：系统分配但未被使用的cache 数量。buffer 与cache 的区别见后面。total=used+free
第2行-/+ buffers/cached：used：也就是第一行中的 used-buffers-cached 也是实际使用的内
存总量。
free：未被使用的buffers 与cache 和未被分配的内存之和，这就是系统当前实际可用内存。free2=
buffers1 + cached1+ free1 //free2 为第二行、buffers1 等为第一行
A buffer is something that has yet to be "written”" to disk. A cache is something that has
been“read”from the disk and stored for later use 第3行：第三行所指的是从应用程序角度
来者，对于应用程序来说，buffers/cached是等于可用的，因为buffer/cached是为了提高文件读取
的性能，当应用程序需在用到内存的时候，buffer/cached会很快地被回收。
所以从应用程序的角度来说，可用内存=系统free memory+buffers+cached.
接下来解释什么时候内存会被交换，以及按什么方交换。
当可用内存少于额定值的时候，就会开会进行交换，如何看额定值（RHEL4.0）：
#cat /proc/meminfo
交换将通过三个途径来减少系统中使用的物理页面的个数：
1.减少缓冲与页面 cache的大小，
2.将系统V类型的内存页面交换出去，
3.换出或者丢弃页面。（Application 占用的内存页，也就是物理内存不足）。
事实上，少量地使用swap是不是影响到系统性能的。
下面是buffers与cached的区别：
buffers是指用来给块设备做的缓冲大小，他只记录文件系统的metadata以及tracking in-flight
pages.
cached是用来给文件做缓冲。
那就是说：buffers是用来存储，目录里面有什么内容，权限等等。
而cached直接用来记忆我们打开的文件，如果你想知道他是不是真的生效，你可以试一下，先后执行
两次命令anX，你就可以明显的感觉到第二次的开打的速度快很多。
实验：在一台没有什么应用的机器上做会看得比较明显。记得实验只能做一次，如果想多做请换一个文
件名
#free
#man X
#free
#man X
#free
你可以先后比较一下free后显示buffers的大小。
另一个实验：
#free
#1s /dev
#free
你比较一下两个的大小，当然这个buffers随时都在增加，但你有1s过的话，增加的速度会变得快，
这个就是buffers/chached的区别。
---
## Page 69
因为Linux将你暂时不使用的内存作为文件和数据缓存，以提高系统性能，当你需要这些内存时，
系统会自动释放（不像windows那样，即使你有很多空闲内存，他也要访问一下磁盘中的pagefiles）
使用free命令
将 used 的值减去
buffer和cache的值就是你当前真实内存使用
对操作系统来讲是
Mem的参数.buffers/cached都是属于被使用，所以它认为free 只有16936。
对应用程序来讲是（-/+buffers/cach).buffers/cached是等同可用的，因为 buffer/cached是为了
提高程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。所以，以应用来看看，
以（-/+buffers/cache）的 free和 used为主，所以我们看这个就好了.另外告诉大家一些常识.Linux
为了提高磁盘和内存存取效率，Linux做了很多精心的设计，除了对dentry进行缓存（用于VFS，加速
文件路径名到inode 的转换），还采取了两种主要 Cache 方式：Buffer Cache 和Page Cache。前者针
对磁盘块的读写，后者针对文件inode的读写。这些Cache能有效缩短了I/0系统调用（比如
read,write，getdents)的时间。记住内存是拿来用的，不是拿来看的.不象windows，无论你的真实物
理内存有多少，他都要拿硬盘交换文件来读.这也就是windows为什么常常提示虚拟空间不足的原因
你们想想，多无聊，在内存还有大部分的时候，拿出一部分硬盘空间来充当内存.硬盘怎么会快过内存。
所以我们看linux,只要不用swap的交换空间，就不用担心自己的内存太少.如果常常swap用很多，可
能你就要考虑加物理内存了.这也是linux看内存是否够用的标准哦。
[root@scs-2 tmp]# free
total
pasn
free
shared
buffers
cached
Mem:
3266180
3250004
16176
0
110652
2668236
-/+ buffers/cache:
471116
2795064
Swap:
2048276
80160
1968116
下面是对这些数值的解释：
total:总计物理内存的大小。
used:已使用多大。
free:可用有多少。
Shared:多个进程共享的内存总额。
Buffers/cached:磁盘缓存的大小。
第三行(-/+ buffers/cached):
used:已使用多大。
free:可用有多少。
第四行就不多解释了。
区别：第二行(mem)的 used/free与第三行(-/+buffers/cache)used/free 的区别。这两个的区别在于使用
的角度来看，第一行是从OS的角度来看，因为对于OS，buffers/cached都是属于被使用，所以他的可
用内存是16176KB,已用内存是3250004KB,其中包括，内核（OS）使用+Application(X,oracle,etc)使用的
+buffers+cached.
第三行所指的是从应用程序角度来看，对于应用程序来说，buffers/cached是等于可用的，因为
buffer/cached是为了提高文件读取的性能，当应用程序需在用到内存的时候，buffer/cached会很快地被
回收。
所以从应用程序的角度来说，可用内存=系统freememory+buffers+cached。
如上例：
2795064=16176+110652+2668236
接下来解释什么时候内存会被交换，以及按什么方交换。当可用内存少于额定值的时候，就会开会进
行交换。
如何看额定值：
---
## Page 70
cat/proc/meminfo
[root@scs-2 tmp]# cat /proc/meminfo
MemTotal:
3266180 kB
MemFree:
17456 kB
Buffers:
111328 kB
Cached:
2664024 kB
SwapCached:
0 kB
Active:
467236 kB
 Inactive:
2644928 kB
High Total:
0 kB
HighFree:
0 kB
LowTotal:
3266180 kB
LowFree:
17456 kB
SwapTotal:
2048276 kB
SwapFree:
1968116 kB
Dirty:
8 kB
Writeback:
0 kB
 Mapped:
345360 kB
Slab:
112344 kB
Committed_AS:
535292 kB
PageTables:
2340 kB
VmallocTotal: 536870911 kB
VmallocUsed:
272696 kB
VmallocChunk: 536598175 kB
HugePages_Total:
0
HugePages_Free:
0
Hugepagesize:
2048 kB
用free-m查看的结果：
[root(@scs-2 tmp]# free -m
total
pasn
free
shared
buffers
cached
Mem:
3189
3173
16
0
107
2605
-/+ buffers/cache:
460
2729
Swap:
2000
78
1921
查看/proc/kcore文件的大小（内存镜像）：
[root(@scs-2 tmp]# II -h /proc/kcore
- 1 root root 4.1G Jun 12 12:04 /proc/kcore
备注：
占用内存的测量
测量一个进程占用了多少内存，linux为我们提供了一个很方便的方法，/proc目录为我们提供了所有的
信息，实际上top等工具也通过这里来获取相应的信息。
/proc/meminfo机器的内存使用信息
/proc/pid/mapspid为进程号，显示当前进程所占用的虚拟地址。
/proc/pid/statm进程所占用的内存