title:CLARION: Sound and Clear Provenance Tracking for Microservice Deployments
author:Xutong Chen and
Hassaan Irshad and
Yan Chen and
Ashish Gehani and
Vinod Yegneswaran
CLARION: Sound and Clear Provenance Tracking 
for Microservice Deployments
Xutong Chen, Northwestern University; Hassaan Irshad, SRI International; 
Yan Chen, Northwestern University; Ashish Gehani and Vinod Yegneswaran, 
SRI International
https://www.usenix.org/conference/usenixsecurity21/presentation/chen-xutong
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.CLARION: Sound and Clear Provenance Tracking for Microservice Deployments
Xutong Chen
Northwestern University
Hassaan Irshad
SRI International
Yan Chen
Northwestern University
Ashish Gehani
SRI International
Vinod Yegneswaran
SRI International
Abstract
Linux container-based microservices have emerged as an
attractive alternative to virtualization as they reduce appli-
cation footprints and facilitate more efﬁcient resource uti-
lization. Their popularity has also led to increased scrutiny
of the underlying security properties and attack surface of
container technology. Provenance-based analysis techniques
have been proposed as an effective means toward compre-
hensive and high-assurance security control as they provide
ﬁne-grained mechanisms to track data ﬂows across the system
and detect unwanted or unexpected changes to data objects.
However, existing provenance tracking techniques are limited
in their ability to build sound and clear provenance in con-
tainer network environments due to complexities introduced
by namespace virtualization.
We describe a namespace- and container-aware prove-
nance tracking solution, called CLARION, that addresses
the unique soundness and clarity challenges introduced by
traditional provenance tracking solutions. Speciﬁcally, we
ﬁrst describe fragmentation and ambiguities introduced in
provenance analysis tools by each of the Linux namespaces
and propose solutions to address analysis soundness. Then we
discuss the design of specialized semantics-summarization
techniques that improve the clarity of provenance analysis. We
have developed a prototype implementation of CLARION
and evaluate its performance against a spectrum of container-
speciﬁc attacks. The results demonstrate the utility of our sys-
tem and how it outperforms the state-of-the-art provenance
tracking systems by providing an accurate and concise view
of data provenance in container environments.
1 Introduction
Linux container technology has seen a rapid rise in adop-
tion due to the miniaturized application footprints and im-
proved resource utilization that are crucial in contemporary
microservice architectures [20] and serverless computing envi-
ronments [2]. The performance boost realized in containerized
environments stems from their use of light-weight virtualiza-
tion techniques whereby a single Linux operating system (OS)
kernel is used to manage an array of virtualized containers.
However, a side effect of this design choice is that an attack
initiated inside a container may affect the shared host Linux
OS kernel. Compared to the traditional virtual machine (VM)
model, in which the guest VM OS is completely isolated from
the host, this provides a much greater target surface to the
attacker. Hence, comprehensive security tracking and analysis
are vital in container networks.
The application of data provenance analysis techniques
[22, 24, 27–30, 32, 34, 36, 39] for host and enterprise security
monitoring has been well studied. However, extending such
capabilities to container-based microservice environments
raises some unique research challenges. At a cursory glance,
the shared-host OS kernel substrate provides a centralized
monitoring platform for observing events across containers
and implementing security policy. In fact, the use of Linux
namespaces introduces fragmentation and ambiguities in data
streams used by provenance tracking systems, such as those
based on the Linux Audit subsystem. Here, fragmentation
refers to abnormal vertex splitting leading to false disconnec-
tions in the provenance graph. Conversely, ambiguity refers
to vertex merging where a single vertex incorrectly repre-
sents multiple distinct objects in the correct provenance graph.
Both fragmentation and ambiguities lead to false or missing
dependencies. We refer to these as soundness challenges for
container provenance analysis.
Namespaces [15] are a fundamental feature in the Linux
kernel that facilitate efﬁcient partitioning of kernel resources
across process groups. This is the key feature exploited by
popular containerization technologies such as Docker [7].
While processes within the same namespaces will share OS re-
sources, those in different namespaces have isolated instances
of corresponding operating system resources. For example,
ﬁles in the same mount namespace have the same root direc-
tory so they must have different path names. Conversely, two
ﬁles in different mount namespaces can appear to have exactly
the same path names within but can still be distinguished by
the root directory of their respective mount namespaces – i.e.,
their path names are virtualized (containerized) by the mount
namespace. Unfortunately, it is the virtualized path names that
will be recorded and reported by the kernel’s audit subsys-
tems, making those two ﬁles indistinguishable, which leads
to falsely conﬂated elements in inferred provenance graphs.
Furthermore, mishandling the effect of namespaces can
prevent a provenance tracking system from correctly charac-
terizing essential aspects, such as the boundary of containers.
Here the boundary of containers refer to the delineation of
a provenance subgraph that represents the behavior within a
container. It includes the processes running inside the con-
tainer, the ﬁles manipulated by them, the sockets they create,
etc. Without a proper understanding of container semantics
USENIX Association
30th USENIX Security Symposium    3989
(i.e., ability to deﬁne boundary of containers and activity
patterns of container engines corresponding to initialization,
termination etc.), it will be impossible for security analysts to
reason about how, when, and what containers are affected by
attacks. We refer to these as clarity challenges for container
provenance analysis.
CLARION Solution. To resolve the aforementioned sound-
ness and clarity challenges, we propose CLARION, a
namespace- and container-aware provenance tracking solu-
tion for Linux microservice environments. For soundness, we
ﬁrst provide an in-depth analysis of how the virtualization
provided by each relevant namespace causes fragmentation
and ambiguity in the inferred provenance. For each relevant
namespace, we then propose a corresponding technical solu-
tion to resolve both issues. To improve clarity, we ﬁrst deﬁne
essential container-speciﬁc semantics including boundary of
containers and initialization of containers. Next, we propose
summarization techniques for each semantics to automatically
mark the corresponding provenance subgraphs.
We show that soundness and clarity challenges are not spe-
ciﬁc – i.e., they exist in a range of monitoring approaches,
including Linux Audit [25], Sysdig [21] and LTTng [16]. We
describe a prototype implementation based on SPADE [23],
an open source state-of-the-art provenance tracking system
and comprehensively evaluate the effectiveness, efﬁciency,
and generality of our solution. We studied the effectiveness
and utility of our system using container-speciﬁc attacks. We
also empirically evaluated system efﬁciency by running our
solution on desktop computers as well as in an enterprise-level
microservice environment. To assess generality, we collected
provenance graphs for various state-of-the-art container en-
gines including Docker, rkt [3], LXC [17] and Mesos [1].
These results show our solution works across container en-
gines and outperforms the traditional provenance tracking
technique by producing superior provenance graphs with an
acceptable increase in system overhead (< 5%).
Contributions. In summary, our paper makes the following
contributions:
• We thoroughly analyze the ways namespace virtualiza-
tion can affect provenance tracking. To the best of our
knowledge, this is the ﬁrst in-depth analysis of the im-
plications of namespaces on microservice provenance
tracking.
• Based on these insights, we designed and implemented
a namespace- and container-aware provenance tracking
solution – i.e., CLARION– that holistically addresses
the soundness and clarity challenges.
• We conducted a comprehensive evaluation of the effec-
tiveness, efﬁciency, and generality of our solution. The
results show our solution produces sound and clear prove-
nance in container-based microservice environments
with low system overhead.
Table 1: Supported Linux Namespaces
Namespace
Isolated System Resource
Cgroup
IPC
Network
Mount
PID
Time
User
UTS
Cgroup root directory
System V IPC, POSIX message queues
Network devices, stacks, ports, etc.
Mount points
Process IDs
Boot and monotonic clocks
User and group IDs
Hostname and NIS domain name
2 Background and Motivation
We provide basic background information on Linux contain-
ers and namespaces. We then use a motivating example to
highlight the limitations of existing provenance tracking tech-
niques and also describe our threat model.
2.1 Linux Namespaces
Linux namespaces [15] provide a foundational mechanism
leveraged by containerization technologies to enable system-
level virtualization. They are advertised as a Linux kernel
feature that supports isolating instances of critical operating
system resources including process identiﬁers, ﬁlesystem, and
network stack across groups of processes. Internally, names-
paces are implemented as an attribute of each process, such
that only those processes with the same namespaces attribute
value can access corresponding instances of containerized
system resources. Currently, eight namespaces are supported
by the Linux kernel as listed in Table 1.
Consider the mount namespace as an example. On a Linux
operating system that has just been booted, every process runs
in an initial mount namespace, accesses the same set of mount
points, and has the same view of the ﬁlesystem. Once a new
mount namespace is created, the processes inside the new
mount namespace can mount and alter the ﬁlesystems on its
mount points without affecting the ﬁlesystem in other mount
namespaces.
2.2 Linux Containers
Linux containers may be viewed as a set of running pro-
cesses that collectively share common namespaces and sys-
tem setup. In practice, containers are usually created by a
container engine using its container runtime. The container
runtime will specify the namespace to be shared among pro-
cesses running inside the container. As a concrete example,
the Docker container engine speciﬁes ﬁve namespaces (PID,
Mount, Network, IPC and UTS) to be shared, initializes sev-
eral system components including rootfs /, hostname, /proc
pseudo-ﬁlesystem, and ﬁnally executes the target application
as the ﬁrst process inside the container.
2.3 Motivating Example
We motivate our solution by investigating the performance of
three classes of state-of-the-art provenance tracking solutions
3990    30th USENIX Security Symposium
USENIX Association
against a trivial credential theft insider attack1. Notably, dur-
ing this attack, the attacker touches the /etc/passwd ﬁle in
both a container and the host system.
First, as shown in Figure 1(a), traditional solutions that lack
both container and namespace awareness, e.g., SPADE, are un-
able to deliver a sound and clear illustration of this attack step.
To illustrate soundness challenges, we explain how fragmen-
tation and ambiguity occur in the ﬁgure. For fragmentation,
when bash (2976) forks a child process bash (10) with
the global PID 3030 to execute the cat command, the virtual-
ized PID 10 will be reported and used in building this process
creation provenance so bash (3030) splits into two vertices,
bash (10) and cat (3030), which build incorrect fork and
execve edges correspondingly. For ambiguity, consider the
ﬁle /etc/passwd. Since the ﬁle path is virtualized, ambigu-
ity occurs on the vertex representing two /etc/passwd ﬁles
(inside and outside the container respectively) simultaneously.
The correct graph should contain two separate /etc/passwd
ﬁle artifact vertices. With respect to clarity, it is not intuitive
which processes are inside the container because container
boundaries are not marked in the graph.
Second, solutions that only provide container awareness,
e.g., Winnower, also suffer from the soundness challenge.
Though they can distinguish the processes inside the container
in Figure 1(b), the ambiguity and graph fragmentation issues
persist. This is also the case for other simple container labeling
solutions, e.g., using a cgroup preﬁx or a SELinux label for
every provenance artifact.
Third, solutions that only provide namespace awareness,
e.g., CamFlow, still suffer from the clarity challenge. As we
can see in Figure 1(c), they do not capture essential container
semantics, such as the boundary of containers, complicating
security analysis. As CamFlow provides a more ﬁne-grained
and complex provenance graph2, non-trivial additional graph
analysis will be required to design and apply similar semantic
patterns in CamFlow to provide clarity. For instance, to sup-
port the boundary of containers, it is necessary in CamFlow
to (1) put the PID namespace identiﬁer on every task vertex
to group processes inside a container by aggregating PID
namespace information; (2) get the namespace-virtualized
pathname and the mount namespace identiﬁer for each ﬁle to
reveal whether the ﬁle is inside a container by complementing
mount namespace information.
For (1), we need to ﬁnd the process memory vertex as-
signed to each task vertex and use its PID namespace identi-
ﬁer. Figure 1(c) illustrates a simple case. In practice, the graph
analysis required is more complex. Because CamFlow uses
versions to avoid cycles or to record any object state change
for a provenance artifact, a path traversal is needed to ﬁnd the
correct version of the task vertex, i.e., where a clone tries to
1A complete attack description can be found in the Appendix, but is not
required to illustrate the challenges faced by container provenance systems.
2The provenance graph of CamFlow is framed over ﬁne-grained kernel
objects, e.g., task, process memory, inode, path, packet.
Figure 1: Comparison between different provenance tracking
solutions. The traditional provenance solution graph illus-
trated in (a) lacks namespace awareness and container aware-
ness. The container-aware graph shown in (b), produced by
systems such as Winnower, performs slightly better because it
can distinguish processes from different containers, but lacks
namespace awareness, leading to disconnected intra-container
provenance graphs. The namespace-aware graph, illustrated in
(c), produced by CamFlow lacks container-awareness. While
this graph does not suffer from the soundness issue, it can-
not effectively capture essential container semantics (e.g., the
boundary of containers).
USENIX Association
30th USENIX Security Symposium    3991
Hostbashpid=2976forkbashpid=10catpid=3030execvecatpid=3030subtype:filepath:/etc/passwdforkbashpid=4032catpid=4146bashpid=4146execvereadread(a) Provenance Tracking without Container Awareness orNamespace AwarenessRed labels represent the errors caused by this solution.Hostbashpid=2976forkbashpid=10catpid=3030execvecatpid=3030subtype:filepath:/etc/passwdforkbashpid=4032catpid=4146bashpid=4146execvereadread(b) Provenance Tracking with only Container AwarenessRed labels represent the errors caused by container labeling solution.ContainerHost(c) Provenance Tracking with only Namespace AwarenessRed labels represent the information which could be usedfor identifying containers.exec_taskreadtask(bash)pid=3030vpid=10task(bash)pid=2976vpid=1namedtype:fileino:920927fdclonetype:proc_memobject_id=74143pidns=4026532270type:pathpathname:/var/lib/docker/overlay2/container_hash/merged/etc/passwd exec_taskreadtask(bash)pid=4146vpid=4146task(bash)pid=4032vpid=4032namedtype:fileino:524664fdclonetype:proc_memobject_id=71983pidns=4026531836type:pathpathname:/etc/passwd Figure 2: Problematic Linux Audit Record (PID)
Figure 4: Problematic Linux Audit Record (Mount)
Figure 3: PID Namespace: Failure and Success
assign the process memory. For (2), CamFlow does not pro-
vide virtualized paths and mount namespace identiﬁer for ﬁle