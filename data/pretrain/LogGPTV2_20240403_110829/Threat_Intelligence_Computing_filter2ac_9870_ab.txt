the subset of security-relevant subgraphs in the CG, and finally
yielding the subgraph that describes the threat or intrusion. Graph
queries can be pre-programmed into IDSes or behavior anomaly
detection systems, or they can be accomplished through on-demand
agile reasoning development. Threat hunting composes sequences
of graph queries to iteratively and interactively conceive, verify,
revise, and confirm threat hypotheses.
The process of composing and executing graph queries in a
CG is graph computation. During the computation, any variable
referencing a subgraph is also a label to the set of entities and events
of that subgraph, and the variable can be stored as a label on CG
(security knowledge label category in section 2.1). Since the outcome
of each iterative graph computation step is a subgraph or a label,
each step can be implemented natively in a graph computation
language or in an external module as a black-box, which outputs a
set of events and entities as the subgraph.
Threat intelligence is therefore generated in the graph query
when a threat is discovered. The query, especially the graph pattern,
describes the threat and can be executed to search other CGs for
the specific threat.
2.3 Programming Platform Requirements
Programming on CGs enables dynamic reasoning and agile rea-
soning development. Next, we detail the requirements to achieve
programmability for threat intelligence from the language design
and platform realization perspectives.
Comprehensive Graph Pattern Composition. Graph pattern matching
is at the core of graph querying. A graph pattern, in essence, is a set
of constraints describing the subgraph(s) to be matched, where a
constraint over graph elements describes (1) a single graph element
(e.g., a label/property of an entity), or (2) an element relation (e.g.,
an entity connects to an event). Pattern composition allows for
embedding human domain knowledge into the deduction procedure.
Simple pattern examples, which can be expressed by most graph
languages, include:
• behavior of typical DLL injections1: two entities with PROCESS
labels are connected by an event with label CREATE_THREAD.
• behavior of untrusted executions: an entity with FILE label
2 label connects to an event labeled
but not TRUSTED_EXE
EXECUTE, then to an entity labeled PROCESS.
• behavior of data leak: an entity labeled with SENSITIVE con-
nects to an entity labeled NETFLOW within 10 hops.
What makes pattern matching powerful in threat intelligence
computing is its ability to treat patterns as values and compose
larger patterns based on others, thus enabling pattern reuse and
abstraction. One common task in threat hunting is to back traverse
from a pre-matched subgraph following some unique traversal
guidance for the case. Such a traversal can be expressed as a pattern,
which matches a subset of entities/events from a given subgraph (as
1DLL injections can be benign or malicious. This pattern does not distinguish them.
2An organization may only permit a whitelist of applications for execution.
enf2enf1enp1enp3Timeenp2lb1lb1: sensitivelb2: untrustedlb2Session 9D: VulnDet 1CCS’18, October 15-19, 2018, Toronto, ON, Canada1885Table 2: Platform Candidates for the Realization of Threat Intelligence Computing
Titan (Gremlin)
Neo4J (Cypher)
τ-calculus
Data Model: Language Built-in Element/Algorithm Support
graph element labeling (intermediate analysis result storing/retrieval)
temporal graph (native temporal operation/algorithm support)
graph integrity guarantee (immutability of computation history)
Programming: Abstraction, Code Reusability, and Computability
declarative programming (minimizing low-level execution exposure)
comprehensive pattern composition (abstraction and code reusability)
function composition and application (modular program design)
Turing completeness (potential detecting/analytical algorithm design)
Performance: Real-time and Forensic Uses
streaming ingestion (24/7 system events and security log feeding)
distributed storage and data retrieval (scalablity potential)
data awareness (fine-grained data locality and indexing tuning)
Peripherals: Interfaces, Extensions, and Helpers
external language API (user-defined functions, etc.)
built-in console (interactive tasks, e.g., threat hunting)
interactive visualization tool (interface to opaque human reasoning)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
its argument) based on element attributes or element relations. An
abstract traversal pattern can be expressed as a pattern similar to the
simple data leak pattern described above but takes two arguments:
one refers to the subgraph as the source for traversal, and the other
refers to the guidance pattern, which dynamically expands to the set
of constraints on the traversed variable in the matching procedure.
To implement pattern matching as a constraint-solving prob-
lem for compiler reasoning and optimization, the construction of
patterns should be limited to graph element constraints and other
patterns, making them pure and solvable. Full-fledged functions
should be defined as a separate first-class object in the language.
Declarative Language Design. A language supporting threat intel-
ligence computing should be declarative, so that threat hunters
need only to specify what to do, e.g., matching a pattern, instead
of how to do it, e.g., steps of constraint solving for matching a pat-
tern. Additional features of this language include native function
composition and external function interface.
Functions and Computability. Though patterns are similar to func-
tions as in a pure functional language, I/O and other operations are
inevitable to make a language useful. The ability to compose func-
tions with side effects in native graph languages is critical for code
reusability and abstraction. Furthermore, recursive function refer-
encing is desirable since lots of graph algorithms are recursive in
nature (e.g., graph traversal). In addition, though a Turing-complete
graph language can program any Turing-computable problem in
theory, many algorithms have weak or inexistent graph language
equivalents in reality. It is therefore important for graph languages
to provide external function interfaces, or user-defined functions
(UDF), to delegate dedicated tasks like anomaly score calculation
to external libraries such as scikit-learn in Python.
Domain-Specific Language Syntax. A CG is a labeled semi-directed
temporal graph. Its entities/events must be immutable, though
new labels can be added. General graph languages do not reflect
this property and therefore need to be extended or modified. In
addition, a user-friendly programming language should enforce
that all executable programs are well-typed according to a typing
system in order to reduce programming errors.
Distributed and Data-Aware Storage. Supporting a distributed data-
base architecture is critical for coping with a large number of devices
or CGs, or/and long-term monitoring and historical data support. It
is also important to optimize the database design regarding unique
CG properties, e.g., temporal locality tuning for fast graph traversal.
Moreover, an effective threat intelligence computing platform must
be capable of ingesting monitored data as live streams concurrently
from multiple sources to enable threat hunting on multiple systems.
This becomes vital if one wants to capture early stages of APTs and
take actions before later destructive APT stages.
Interactive Programming and Visualization. To effectively and effi-
ciently support human-machine cooperation, the platform must
be conducive to agile detection strategy development and rapid
interpretation of execution outcomes. Toward this end, we envi-
sion a threat hunting ecosystem that enables analysts to obtain
interactive feedback from threat hunting tasks coupled with vi-
sual representations that reduce the semantic gap between threat
behavior understanding and the CG presentation.
Summary. Though many graph languages/databases are avail-
able today for general and domain-specific programming, the pro-
grammability requirements of threat intelligence computing are
hardly met by existing solutions. To overcome this limitation, we in-
troduce τ-calculus as a new graph computation platform, including
a DSL, a graph database, and peripheral systems. Table 2 compares
τ-calculus with the most popular graph programming platforms
Neo4J/Cypher [65] and Titan/Gremlin [12] for threat intelligence
computing. τ-calculus meets and exceeds the minimal requirements
Session 9D: VulnDet 1CCS’18, October 15-19, 2018, Toronto, ON, Canada1886Table 3: Semantics of τ-calculus Relational Operators
Predicate
el has lb
en conn ev
Op
has
conn
reach el1 reachn el2
prec
ev1 prec ev2
at
bf
af
in
ev at ψ
ev bf ψ
ev af ψ
el in gr
Semantics
el has label lb
en connects to ev via a join point
el1 reaches el2 in at most n hops
ev1 precedes ev2
ev occurs at timestamp ψ
ev occurs before timestamp ψ
ev occurs after timestamp ψ
el is in graph gr
for realizing threat intelligence computing, providing a new pow-
erful platform for threat hunters to validate threat hypotheses and
uncover entire attack campaigns deeply buried in the sea of logging
events and monitoring data.
3 τ -CALCULUS LANGUAGE
We design the τ-calculus language as a domain-specific language
for programming computations on CG. The language is declarative
and embraces patterns as a first-class language construct. It supports
parameterized pattern definition and pattern application similar
to functions. Well-typed terms (Table 3) in a pattern definition are
sets of predicate expressions used for constraint solving purposes
as explained in Section 2.3.
For explanatory precision, we formally define the τ-calculus
language in terms of the simple, typed Turing-complete language
shown in Figure 2. The simplified programming language abstracts
irrelevant implementation details, capturing only essential features
for formalizing threat intelligence computing.
3.1 Language Syntax
Programs P are lists of commands, denoted c. Commands consist
of variable assignments, graph label operations, identifier-derefer-
encing assignments (stores), graph visualizations, pattern/function
application, pattern abstraction, pattern matching, function abstrac-
tion, and fixed-point operator. Expressions evaluate to values u and
value-labeled tuples gr ∈ T × V × L, where u ranges over primitive
value representations, and gr denotes CGs.
Variable names range over identifiers and function names, and
the type system supports primitive types, graph abstract data types,
predicate expression types, pattern types, and function types (τ). We
use 2en to denote the type of the set of values of type en. Execution
contexts are comprised of i) a store σ relating locations to CGs and
graph identifiers to locations, and ii) an environment ρ mapping
variables to values, graphs, and functions.
Pattern matching on graphs is the problem of finding a homo-
morphic or isomorphic image of a given graph, called the pattern, in
another graph. In τ-calculus, patterns are defined as n-ary functions
(τ1, . . . , τn) → τдr , specified as constraints p on computational
graph elements (predicate expressions) and pattern applications (cf.
Section 3.3). Patterns are pure and do not have side effects. Pattern
matching expressions are evaluated by a constraint solver.
The language does not enforce any particular label model — a
notation for labeling graphs together with policies governing those
programs
commands
expressions
pred expressions
relational ops
variables
values
element types
primitive types
graph type
pattern type
types
CGs
visualization
locations
identifiers
join points
environment
stores
P ::= c
c ::= v:= e | label e1 e2 | store e1 e2 | show e
e ::= u | gr | v | load e
| p | pattern v . e | e e
| match e p with e in e
| fn v : τ . e | e1e2 | µ v : τ . e
p ::= notp | e1 (cid:51)p e2
(cid:51)p ::= has | conn | reachn | prec | at | bf | af | in
v
u ::= values of the underlying language
el ::= en | ev
τp ::= id | bool | ψ | lb | el
τдr ::= 2en × 2ev × 2lb
τ p ::= (τ1, . . . , τn) → τдr
τ ::= τp | τдr | τ p | τ → τ ′
gr ∈ T × V × L
O ::= output methods
ℓ ::= memory addresses
id ∈ ID (computation graph identifiers)
jp ::= ⟨⟩ | ⟨en, ev⟩ | ⟨ev, en⟩
ρ : v ⇀ (u ∪ gr ∪ p ∪
((u ∪ gr ∪ p) → (u ∪ gr ∪ p)))
σ : (ℓ ⇀ (gr ∪ p)) ∪ (id ⇀ ℓ)
Figure 2: τ-calculus language syntax.
labels. This choice of design enables τ-calculus to support different
label embeddings for a variety of threat reasoning tasks such as
traversals for root cause analysis or policy reasoning.
3.2 Denotational Semantics