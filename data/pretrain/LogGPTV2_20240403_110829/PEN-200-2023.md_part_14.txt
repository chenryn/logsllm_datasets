to you (the student), you are also responsible for assessing and improving on that strategy.
While this might sound like a lot, let’s review an easy and effective approach: at the end of a study
y
session, take just 10 seconds to think about how well it went. It’s a very small thing, but it can
make a huge difference. To understand how, we’ll look at the two most obvious and extreme
k
outcomes of a study session.
If the study session was particularly difficult, this momsent of self-reflection might lead you to
think about some of the content that made it difficult. Generally speaking, we want to ask why it
was difficult. The easy answer here might be “that SQL Injection is just tough!” but the difficulty of
o
the material is at least somewhat out of our hands (though this might indicate a need to spend
the next study session reviewing some more foundational materials).
n
We’re specifically interested in the things that we, as learners, have some control over. Here is a
list of potential questions to ask about the study session:
i
1. What time did I start the studzy session?
2. How long was the study session?
D
3. Did I get interrupted (if so, how did that happen)?
4. What did I do just before I started studying?
5. What did I eat or drink before I started studying?
6. What was my study location like? Was it quiet or busy?
7. What did I do during the study session specifically?
This is not a complete list of possible questions.
The answer to each of these things might lead us to locate a more specific point of frustration.
For example, if we discover that a heavy meal immediately before a study session led to us
feeling unproductive and sluggish, then we can adjust either when we study or how much we eat
beforehand.
Let’s consider the opposite scenario. Let’s say that we finish a study session and we feel great
about how it went. Again, it might be easy to say, “That went really well because I’m fascinated by
SQL Injection,” but we should think beyond the content itself.
193 (OffSec, 2023), https://offs.ec/discord
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 88
Made in Morocco
Penetration Testing with Kali Linux
In this case, the answers to these questions may reveal keys to future successful study sessions.
Let’s say we studied for one hour in the morning after a light breakfast at the dining room table
with a cup of coffee, using our own version of the Feynman Technique. If that led to a successful
session, it’s worth making a note of this and then planning the next study session to recreate as
much of the scenario as possible.
Finally, as a closing note, we want to acknowledge that we can’t possibly cover every effective
strategy or give a full picture of all of the things involved in learning a new set of skills. We hope
that the items presented in this Module are useful and helpful in some way.
If you are a learner just starting out with OffSec’s training, we want to wish you the best of luck on
your journey.
y
k
s
o
n
i
z
D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 89
Made in Morocco
Penetration Testing with Kali Linux
5 Report Writing for Penetration Testers
We will cover the following Learning Units in this Learning Module:
• Understanding Note-Taking
• Writing Effective Technical Penetration Testing Reports
This Module is designed to help Penetration Testers understand how to deliver effective reports
to their clients.
5.1 Understanding Note-Taking
In this Learning Unit we will cover the following Learning Objectives: y
• Review the deliverables for penetration testing engagements
k
• Understand the importance of note portability
• Identify the general structure of pentesting documesntation
• Choose the right note-taking tool
o
• Understand the importance of taking screenshots
• Use tools to take screenshots
n
5.1.1 Penetration Testing Deliverables
i
A penetration test or red team exercise194 is difficult to script in advance. This is because the
z
tester cannot consistently anticipate exactly what kind of machines or networks the client will
want to be tested.
D
Even though the outcome of our assessment is ofter unpredictable, is is often
recommended to define a detailed scope during the preliminary meetings with
the customer. This process is especially very helpful when prioritizing business
critical targets within large networks.
While the general execution plan for a penetration test will often follow a particular model, most
pentests tend to follow the maxim “no plan survives first contact with the enemy”195. This means
that any specific activities we might expect to perform during the engagement might not actually
happen, since the reality of the testing environment is almost certainly different than our initial
ideas and hypotheses about it. It’s therefore difficult to report on penetration tests using
prepopulated forms. This is especially the case when the testing is carried out with little prior
discussion with the client, for example, if the client is looking to surprise their defending teams in
some manner.
194 (Aon, 2022), https://www.aon.com/cyber-solutions/thinking/penetration-testing-or-red-teaming/
195 (Helmuth von Moltke, 1871), https://quoteinvestigator.com/2021/05/04/no-plan
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 90
Made in Morocco
Penetration Testing with Kali Linux
As such, instead of preparing a report in advance, the penetration test is executed and notes are
taken as it proceeds to ensure that there is a detailed record of what was done. This makes sure
that:
• the penetration test can be repeated if it becomes necessary to demonstrate that an issue is
real.
• the penetration test can be repeated after remediation to confirm that an issue has been
fixed.
• if there’s a system failure during the period of the penetration test, the client and tester can
determine if the testing was the cause of the failure.
During a penetration test, some activities may not be permitted. We have to be very clear about
the Rules of Engagement (RoE)196 under which the testing is done. When conducting red team
testing, a person will often be assigned the role of “referee” tyo ensure that the rules of
engagement are observed. There may be constraints placed on testing such as not carrying out
denial of service attacks, or not engaging in social engineering. Furthermore, the testing work may
k
be in response to the client’s regulatory compliance requirements and may need to follow a
specific methodology such as the OWASP Penetration Testing Execution Standard.197 Any such
s
constraints need to be very clear from the outset.
5.1.2 Note Portability o
Portability of penetration testing notes means being able to pass those notes on to others.
n
Writing notes that are concise and coherent is an integral part of successful note-taking, and
enables the notes to be used not only by ourselves but also by others. Additionally, concise notes
can be quickly adapted for technical reporting.
i
z
The need for portability is particularly emphasized when a penetration tester has to leave an
engagement because of sickness, illness, or other issues. Having a shared understanding of how
notes should be taken isD especially important for large penetration testing teams, where
individuals need to be able to understand the details of other team members’ engagements at
will.
5.1.3 The General Structure of Penetration Testing Notes
We need to take a structured approach to note-taking that is both concise and precise. There are
an uncountable number of ways in which we might organize our notes, and it would be futile to
attempt to provide a one-size-fits all set of recommendations. Nevertheless, here are some
principles that often useful to consider:
• Rather than taking a few general notes assuming that we’ll remember how to perform
certain actions next time, we should record exactly what we did.
• This means that every command that we type, every line of code that we modify, and even
anywhere we click in the GUI should be recorded so that we can reproduce our actions.
196 (Microsoft, 2022), https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement
197 (OWASP, 2022), https://owasp.org/www-project-web-security-testing-guide/latest/3-The_OWASP_Testing_Framework/1-
Penetration_Testing_Methodologies
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 91
Made in Morocco
Penetration Testing with Kali Linux
• Even if we’ve taken a lot of notes, if looking at them later doesn’t help us remember exactly
what happened during the assessment, then they won’t be particularly useful to us.
• The notes need to be structured and sufficiently detailed to remove any ambiguity.
• To write a convincing and substantiated technical report later, we need to provide sufficient
technical details within our notes.
• If the notes are not written coherently, it will be difficult for someone else to repeat the test
and get the same results.
The structure we recommend here for note-taking is sufficiently abstract to allow for personal
preferences. As a general rule, we would like the notes to remind us of what occurred, and allow
us to replicate the issues we identify. A note-taking structure that starts broad and drills down into
each section is an easy and expandable method of taking notes. The top-down approach guides
us to start with the broadest activity, and then narrow down our focus and expand the level of
y
detail until we have everything we need to replicate exactly what happened.
Let’s now look at an example of the notes we might take for a wkeb vulnerability we discovered:
• Application Name: This is important in a multi-application test, and a good habit to get into.
s
The application names also lends itself to building a natural folder and file structure quite
nicely.
o
• URL: This is the exact URL that would be used to locate the vulnerability that we’ve detected.
• Request Type: This represents both thne type of request (i.e: GET, POST, OPTIONS, etc) that
was made, as well as any manual changes we made to it. For example, we might intercept a
POST request message and change the username or password before forwarding it on.
i
z
• Issue Detail: This is the overview of the vulnerability that will be triggered by our actions. For
example, we may point to a CVE describing the vulnerability if one exists, and/or explain the
impact we observe. WDe may categorize the impact as denial of service, remote code
execution, privilege escalation, and so on.
• Proof of Concept Payload: This is a string or code block that will trigger the vulnerability. This
is the most important part of the note, as it is what will drive the issue home and allow it to
be replicated. It should list all of the necessary preconditions, and provide the exact code or
commands that would need to be used to perform the triggers the vulnerability again.
Let’s get more specific and review an example of testing for a Cross-Site Scripting (XSS)
vulnerability. The target we tested has a web page aptly named XSSBlog.html. When we navigate
to it, we can enter a blog entry.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 92
Made in Morocco
Penetration Testing with Kali Linux
Figure 5: XSS Testing
When we read back the blog entry, we get the following alert:
y
k
s
o
n
i
z
Figure 6: XSS Testing Issue
In the course of making these requests, we keep a record of our actions, as shown below.
D
Testing for Cross-Site Scripting
Testing Target: 192.168.1.52
Application: XSSBlog
Date Started: 31 March 2022
1. Navigated to the application
http://192.168.1.52/XSSBlog.html
Result: Blog page displayed as expected
2. Entered our standard XSS test data:
You will rejoice to hear that no disaster has accompanied the
commencement of an enterprise which you have regarded with such
evil forebodings.
I arrived here yesterday, and my first task is to assure my dear
sister of my welfare and increasing confidence in the success of
my undertaking.
3. Clicked Submit to post the blog entry.
Result: Blog entry appeared to save correctly.
4. Navigated to read the blog post
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 93
Made in Morocco
Penetration Testing with Kali Linux
http://192.168.1.52/XSSRead.php
Result: The blog started to display and then the expected alert popped up.
5. Test indicated the site is vulnerable to XSS.
PoC payload: 
Listing 26 - Example of a Testing Note.
We now have a simple, fast, and expandable way to take coherent and comprehensive notes that
another tester can follow. It’s worth repeating that the notes are not themselves the report we will
deliver to the client, but they will be invaluable when we attempt to put our report together later.
5.1.4 Choosing the Right Note-Taking Tool
There are an enormous number of both free and paid note-taking tools available today. To decide
y
on the right tool for a particular engagement, it is important to understand some requirements. In
many cases we want to keep all information local to the computer rather than uploading it
anywhere else, so certain tools are precluded from beingk used. By the same token, if an
engagement is source-code heavy then a tool that does not allow for code blocks to be inserted is
not going to be appropriate.
s
While a comprehensive list of desirable properties to keep in mind is nearly impossible to
enumerate, some of the more important items to roemember are:
• Screenshots: If a lot of screenshots are necessary, consider a tool that allows for inline
screenshot insertion. n
• Code blocks: Code blocks need formatting to be properly and quickly understood.
i
• Portability: Something that czan be used cross-OS, or easily transferred to another place
should be high on the list of priorities.
D
• Directory Structure: In an engagement with multiple domains or applications, keeping a
coherent structure is necessary. While manually setting up a structure is allowed, a tool that
can do this automatically makes things easier.
Now that we have a good baseline of our requirements, let’s consider the use of some particular
note-taking tools.
Sublime198 is a pretty standard text editor that adds lots of useful features and functionality. One
of the most important features it provides is flexible syntax highlighting. Syntax highlighting
allows us to place code blocks into a file, and those code blocks will be highlighted according to
the programming language’s specific syntax rules. However, this often comes with limitations.
Highlighting two languages is not possible with one file. In an engagement with a single code
type, this is not a problem, but for others, we may prefer to use different options. Additionally, it’s
not currently possible to inline screenshots at the time of writing.
Another tool we can consider is CherryTree.199 This tool comes as standard in Kali. It contains
many of the features that are necessary for note-taking. It uses an SQLite database to store the
198 (Sublime, 2022), https://www.sublimetext.com/download
199 (Cherry Tree, 2022), https://github.com/giuspen/cherrytree
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 94
Made in Morocco
Penetration Testing with Kali Linux
notes we take, and these can be exported as HTML, PDF, plain text, or as a CherryTree document.
CherryTree comes with a lot of built-in formatting, and provides a tree structure to store
documents, which it calls “nodes” and “subnodes”.
Below is an example of CherryTree being used to store penetration testing notes using a fairly
simple tree structure.
y
k
s
o
n
i
z
Figure 7: CherryTree
D
The final tool we’ll consider is the Obsidian200 markdown editor, which contains all the features
that we need for note-taking. We can install Obsidian as a snap201 application or in its Flatpak202
application form. It also comes as an AppImage,203 meaning that all we need to do is copy it into
our system, mark it as executable, and run it.
kali@kali:~$ wget https://github.com/obsidianmd/obsidian-
releases/releases/download/v0.14.2/Obsidian-0.14.2.AppImage
....
2022-03-31 15:38:53 (1.28 MB/s) - 'Obsidian-0.14.2.AppImage' saved
[113102744/113102744]
kali@kali:~$ chmod +x Obsidian-0.14.2.AppImage
kali@kali:~$ ./Obsidian-0.`14.2.AppImage
Listing 27 - Getting and Running Obsidian
When we execute the AppImage, we get a welcome screen, which enables us to open an Obsidian
vault or create a new one.
200 (Obsidian, 2022), https://obsidian.md/
201 (SnapCraft, 2022), https://snapcraft.io/
202 (Flatpak, 2022), https://flatpak.org/
203 (AppImage, 2022), https://appimage.org/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 95
Made in Morocco
Penetration Testing with Kali Linux