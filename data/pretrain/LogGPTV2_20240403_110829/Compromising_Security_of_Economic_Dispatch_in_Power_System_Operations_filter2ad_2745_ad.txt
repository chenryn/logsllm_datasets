interested in exact object memory addresses,
because the addresses will likely differ during the attack due
to unpredictable (inputs and hence) dynamic execution paths.
Instead, by capturing the logical interconnections among the
instantiated memory-resident objects, we extracted invariants
about their interdependencies that remain the same across
different runs. The attacker later uses the invariants during
the attack to locate (and corrupt) the DLR values.
Search for a speciﬁc DLR value during the attack results
in several memory-resident candidates that are mostly (except
one) false positives. To identify the correct candidate, our
implementation uses the invariants, expressed as propositional
logic predicates, that capture the logical memory structural
patterns around the target DLR parameters. We use three
kinds of memory patterns: address-relative intra-class type
patterns, code pointer-instruction patterns, and data pointer-
538
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:57 UTC from IEEE Xplore.  Restrictions apply. 
Intra-Class Pattern (type)
Code Pointer Pattern (content)
Data Pointer Pattern (relation)
 class A size(20): 
    +--- 
0   | {vfptr}
 // virtual fn table* 
4
4   | line-rating  // target parameter 
8
8   | mem-var2 
1
12 | mem-var3 
1
16 | line-name  // char* string 
    +--- 








type(&line-rating + 0x0C) ““ string
 // virtual fn table* 
 // target parameter      
 class B size(8): 
    +--- 
0 
0  | {vfptr}  
4
4  | line-rating
    +--- 
B
 B's vftable: 
     0  | &A::A_virt1 
     4  | &A::A_virt2 
53
56
8B F2 
*(*(&line-rating-0x04)+0x04) ““ 0x53568BF2
 push ebx 
 push esi 
 mov esi, edx 
 |
 |
 |
c
 class C size(16): 
0
0  | {vfptr}  
4
44
4  | linked_list_prev   // previous node 
8
8
8   | linked_list_next
1
12 | lr 
 // next node      
 // target parameter      
 class C size(16): 
0  | {vfptr}  
4  | linked_list_prev   // previous node 
8   | linked_list_next
12 | lr 
 // next node      
 // target parameter      
*(*(&lr - 0x08) + 0x04) ““ (&lr - 0x10)
TABLE II: Logical memory structure signatures for critical parameters.
.text:01375A8C 53                             push    ebx
.text:01375A8D 56                             push    esi
.text:01375A8E 57                             push    edi
.text:01375A8F 8B D8                       mov
ebx, eax
…
TTRLine Function Code (fixed)
0x06410810 
0x06410820
0x06410830
0x06410840
...
0x06410870
0x06410880
…
0x06410940
0x06410950
…
30 5A A4 02 00 00 00 00  00 00 00 00 00 00 00 00
80 0E 3F 11 00 00 00 00   00 00 00 00 00 00 00 00
00 00 00 00 00 A5 35 01  10 A5 35 01 20 A5 35 01
01 00 00 00 A0 64 49 09  00 00 00 00 00 00 00 00
...
00 00 00 00 00 00 C0 3F  E1 FA C7 42 E1 FA C7 42
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
...
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
95 BF D6 33 CD CC 4C 3D 00 00 00 00 00 00 00 00
.text:02A459D8 30 5A A4 02
dd offset off_2A45A30 
.text:02A459DC 00 00 00 00
dd 0
…
.text:02A45A18 8C 5A 37 01      
dd offset sub_1375A8C
.text:02A45A1C A8 AA 40 00      
dd offset sub_40AAA8
.text:02A45A20 9C AA 40 00      
dd offset nullsub_105
.text:02A45A24 80 A5 40 00      
dd offset sub_40A580
.text:02A45A28 9C A5 40 00      
dd offset sub_40A59C
.text:02A45A2C 10 2E AD 02      
dd offset loc_2AD2E10
.text:02A45A30 08 29 37 01      
dd offset sub_1372908 
…
.text:02A45A44 24 FE AD 02      
dd offset sub_2ADFE24
.text:02A45A48 5C 3C A6 02     
dd offset sub_2A63C5C
TTRLine Instance
…
TTRLine VMT
.bss:02E7FD24    00 00 F5 
04
0x05E50000
00 00 32 06
00 00 F5 04
…
…
0x04F50000
…
0x050532C0
…
0x05053380
0x05053390
0x050533A0
0x050533B0
0x050533C0
0x050533D0
…
0x05053450
0x05053460
0x05053470
00 00 E5 05
24 FD E7 02
…
1C DE A3 02 00 00 00 00 00 00 00 00 00 00 00 00 
…
A0 6C 03 05 00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 17 B7 D1 38 00 00 00 00 00 00 80 3F 
00 00 00 00 00 00 C0 40 00 00 00 00 00 00 00 00 
00 00 00 00 00 01 00 00 5C FF 79 44 00 00 C6 C2 
00 00 C0 3F 00 00 00 40 00 00 80 BF 00 00 00 00 
00 00 00 00 66 66 6F 43 C3 F5 F8 40 17 B7 D1 3A
…
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 C0 3F 00 00 C0 3F 
00 00 C0 3F 00 00 00 00 00 00 00 00 00 00 00 00
0x06320000
...
0x06410810 
0x06410820
0x06410830
0x06410840
...
0x06410870
0x06410880
…
0x06410940
0x06410950
…
00 00 46 06
00 00 E5 05
...
30 5A A4 02 00 00 00 00  00 00 00 00 00 00 00 00
80 0E 3F 11 00 00 00 00   00 00 00 00 00 00 00 00
00 00 00 00 00 A5 35 01  10 A5 35 01 20 A5 35 01
01 00 00 00 A0 64 49 09  00 00 00 00 00 00 00 00
...
00 00 00 00 00 00 D3 3F  E1 FA C7 42 E1 FA C7 42
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
...
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
95 BF D6 33 CD CC 4C 3D 00 00 00 00 00 00 00 00
(a) Code pointer-instruction pattern.
(b) Linked-list as data pointer-based pattern.
Fig. 7: Code and data pointer-based structural memory patterns in PowerWorld used for graphical predicate generation.
based patterns (Table II).
Address-relative intra-class type patterns. The attack ex-
tracts execution-agnostic memory structural patterns around
the target DLR values in memory. We concentrate on intra-
class patterns that capture ﬁxed offset relations among mem-
bers of the same class as the target DLR parameter, and their
types and/or values. If the DLR parameter is stored as a
member of a class that also contains other variable(s), whose
type is (are) easy to identify, we use that information as a
local signature for the target parameter. In memory forensics,
types such as character strings, pointers [16], and ﬁxed-value
member ﬁelds can be identiﬁed simply. We investigate the
vicinity of the target parameter within the same object looking
for addresses that store easy-to-identify data types. If one
or more of such samples are found,
their type/value and
corresponding offset from the target parameter address is used
to produce the signature. The attack creates simple-to-check
logical predicates for each candidate (e.g., “candidate addr +
0x08 stores 0x00000001”). Our implementation aggregates the
produced predicates into a single conjunctive logic signature.
Code pointer-instruction patterns. We leverage the code
pointer relations within the memory regions to extract invari-
ants (logical predicates) about the structural memory layout
around the target DLR parameters. We extract such invari-
ants given the reverse engineered class object pointers, and
their logical interdependencies with the corresponding member
and virtual functions. We use the fact that code segments
(e.g., instructions of member and virtual functions) within
the controller software binary are typically set as read-only
with ﬁxed content. Table II shows a sample code pointer-
based predicate for the illustrated pattern. The signature checks
whether the ﬁrst four byte content of the target parameter’s
object’s second virtual function is equal to the corresponding
function prologue. As denoted, the signature does not depend
on the absolute address values given the target parameter
candidate’s location. The attack can automatically generate
the code pointer patterns for the object’s individual member
and virtual functions. Finally, the generated predicates are
combined into a single conjunctive logical predicate to check
against all the identiﬁed candidates within the EMS memory
space attack time.
Data pointer-based patterns. The data pointer-based patterns
do not often assume ﬁxed data values in memory, and is purely
based on memory structure and the relations between various
objects. We perform a recursive pointer traversal among the
recognized objects on the controller’s memory space following
its earlier forensics analyses of the allocated objects and the
stored pointer values within them (member ﬁelds). The algo-
rithm implements a depth-ﬁrst search starting from individual
recognized pointers within the memory space. For each pointer
under the consideration, we determine if its destination is an
memory-resident object. If so, the attack recursively traverses
all the member pointer ﬁelds within the destination object.
During its recursive search, our implementation generates the
corresponding directed graph, where nodes represent allocated
objects, and the outgoing edges indicate the member pointer
ﬁelds within the source object. The generated directed graph
represents the inter-object dependencies within the memory
space. Once the generation of the graph in completed, our
implementation searches for cycles. Such cycles are very
539
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:57 UTC from IEEE Xplore.  Restrictions apply. 
Param. values
0x3FC00000
0x02A45A30
0x06410570
0x06410810
0x06410810
#Hits
143
2038
30
30
28
#Relevant
3
4
1
1
1
#Recognized
3
4
1
1
1
Accuracy
100%
100%
100%
100%
100%
TABLE III: The target parameter value recognition accuracy.
popular in widely used data structures such as linked lists
(the rightmost entry on Table II). The attack turns each cycle
within the graph into a logical predicate that corresponds to a
data pointer-based signature.
VI. EMPIRICAL ATTACK DEPLOYMENT RESULTS
To assess the proposed attack feasibility in practice, we im-
plemented it against widely-used commercial and open-source
industrial controller software packages. The implemented at-
tack involves the following steps: i) during the ofﬂine phase,
we reverse engineer the EMS software binary to locate DLR
parameters within the controller and create the corresponding
invariants that hold true regardless of their absolute memory
addresses; ii) during the online phase (attack time), the exploit
searches the controller memory for the known legitimate DLR
values and collects the candidates; iii) the attack recognizes the
only true candidate by applying the invariants on the collected
set of candidates; and iv) our implementation modiﬁes the
value maliciously according to the optimal attack generation
algorithms discussed in the previous section. We now explain
the results for our empirical validation.
A. EMS Software Attack
We validated the proposed attack on real-world widely-used
industrial controller software packages. We ﬁrst present the
detailed results on PowerWorld, and later compare the attack’s
performance for other controllers (NEPLAN, PowerFactory,
PowerTools, and SmartGridToolbox).
Figure 7a shows a generated code pointer-based memory
signature in PowerWorld. The corresponding pattern predicate
for runtime memory search was “*(*(candidate addr - 0x54)
- 0x24) == 0x5356578B”, where 0x5356578B is the
hex representation of the sub_1375A8C function’s ﬁrst four
instruction bytes. The rating of every transmission line is
stored in offset 0x24 of the corresponding TTRLine object.
The information about the transmission lines of the power
system is stored as a doubly linked list of TTRLine objects
in PowerWorld memory space. The attack used “*(*(candi-
date addr - 0x24) + 0x04) == (candidate addr - 0x24)” as
the pattern predicate for line ratings. Let us call the linked
list node that stores the target line rating A. The pattern
predicate above essentially veriﬁes the following linked list
invariant: whether A’s previous node’s next pointer points to
A. More complex patterns can be extracted if needed; however,
our empirical studies on PowerWorld shows simple patterns
always sufﬁce to identify and isolate the exact candidate
uniquely.
Figure 7b shows another PowerWorld data pointer pat-
tern for line ratings. PowerWorld allocates linked list nodes
(0x13FFF0 sizes each) allocated by VirtualAlloc for
objects instances of different classes (e.g., TGen, TBus and
EMS Software
PowerWorld
NEPLAN
PowerFactory
Powertools
SmartGridToolbox
vfTable
8527
6549
110
3
194
Line
3
51
34
185
79
Bus Gen.
3