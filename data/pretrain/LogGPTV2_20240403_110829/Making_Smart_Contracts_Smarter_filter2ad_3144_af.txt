### 8. Acknowledgments

We would like to extend our gratitude to Brian Demsky, Vitalik Buterin, Yaron Welner, Gregory J. Duck, Christian Reitwiessner, Dawn Song, Andrew Miller, Jason Teutsch, Alex Zikai Wen, Patrick Cousot, and Joseph Chow for their valuable discussions and feedback on the early draft of this paper. This research was supported by the Ministry of Education, Singapore, under Grant No. R-252-000-560-112, and in part by Yale-NUS College under Grant No. R-607-265-045-121. The opinions expressed in this work are solely those of the authors.

### 9. References

1. Satoshi Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System. bitcoin.org, 2009.
   
2. Ethereum Foundation. Ethereum’s White Paper. https://github.com/ethereum/wiki/wiki/White-Paper, 2014.

3. A. Miller, A. Juels, E. Shi, B. Parno, and J. Katz. Permacoin: Repurposing Bitcoin Work for Long-Term Data Preservation. IEEE Security and Privacy, 2014.

4. Use Case for Factom: The World’s First Blockchain Operating System (BOS). http://kencode.de/projects/ePlug/Factom-Linux-Whitepaper.pdf, February 2015.

5. Nick Szabo. The Idea of Smart Contracts. http://szabo.best.vwh.net/smart_contracts_idea.html, 1997.

6. Loi Luu, Jason Teutsch, Raghav Kulkarni, and Prateek Saxena. Demystifying Incentives in the Consensus Computer. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS '15), pages 706–719. ACM, 2015.

7. EtherDice Smart Contract is Down for Maintenance. https://www.reddit.com/r/ethereum/comments/47f028/etherdice_is_down_for_maintenance_we_are_having/, 2016.

8. RSK Labs. Rootstock: Smart Contracts Platform Powered by Bitcoin. http://www.rootstock.io/, 2015.

9. Counterparty Platform. http://counterparty.io/, 2015.

10. James C. Corbett, Jeffrey Dean, Michael Epstein, Andrew Fikes, Christopher Frost, J. J. Furman, Sanjay Ghemawat, Andrey Gubarev, Christopher Heiser, Peter Hochschild, Wilson Hsieh, Sebastian Kanthak, Eugene Kogan, Hongyi Li, Alexander Lloyd, Sergey Melnik, David Mwaura, David Nagle, Sean Quinlan, Rajesh Rao, Lindsay Rolig, Yasushi Saito, Michal Szymaniak, Christopher Taylor, Ruth Wang, and Dale Woodford. Spanner: Google’s Globally Distributed Database. ACM Transactions on Computer Systems (TOCS), August 2013.

11. Jason Baker, Chris Bond, James C. Corbett, J.J. Furman, Andrey Khorlin, James Larson, Jean-Michel Leon, Yawei Li, Alexander Lloyd, and Vadim Yushprakh. Megastore: Providing Scalable, Highly Available Storage for Interactive Services. In Proceedings of the Conference on Innovative Data Systems Research (CIDR), pages 223–234, 2011.

12. KingOfTheEtherThrone Smart Contract. https://github.com/kieranelby/KingOfTheEtherThrone/blob/v0.4.0/contracts/KingOfTheEtherThrone.sol.

13. GovernMental’s 1100 ETH Payout is Stuck Because It Uses Too Much Gas. https://www.reddit.com/r/ethereum/comments/4ghzhv/governmentals_1100_eth_jackpot_payout_is_stuck/, 2016.

14. Kevin Delmolino, Mitchell Arnett, Ahmed Kosba, Andrew Miller, and Elaine Shi. Step by Step Towards Creating a Safe Smart Contract: Lessons and Insights from a Cryptocurrency Lab. Cryptology ePrint Archive, Report 2015/460, 2015. http://eprint.iacr.org/.

15. Gavin Wood. Ethereum: A Secure Decentralised Generalised Transaction Ledger. http://gavwood.com/paper.pdf, 2014.

16. Ethereum Foundation. The Solidity Contract-Oriented Programming Language. https://github.com/ethereum/solidity.

17. Ethereum Foundation. The Serpent Contract-Oriented Programming Language. https://github.com/ethereum/serpent.

18. Oyente Project Page. https://www.comp.nus.edu.sg/~loiluu/oyente.html.

19. TheDAO Smart Contract. http://etherscan.io/address/0xbb9bc244d798123fde783fcc1c72d3bb8c189413#code.

20. EtherEx: A Fully Decentralized Cryptocurrency Exchange. https://etherex.org/.

21. EtherOpt: A Decentralized Options Exchange. http://etheropt.github.io/.

22. The Run Smart Contract. https://etherscan.io/address/0xcac337492149bdb66b088bf5914bedfbf78ccc18.

23. Ethereum Foundation. Block Validation Algorithm. https://github.com/ethereum/wiki/wiki/Block-Protocol-2.0#block-validation-algorithm.

24. Andrew Miller, Brian Warner, and Nathan Wilcox. Gas Economics. https://github.com/LeastAuthority/ethereum-analyses/blob/master/GasEcon.md.

25. Protect The Castle Contract. http://protect-the-castle.ether-contract.org/.

26. GovernMental Smart Contract. http://governmental.github.io/GovernMental/.

27. Ahmed Kosba, Andrew Miller, Elaine Shi, Zikai Wen, and Charalampos Papamanthou. Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts. In Proceedings of the 2016 IEEE Symposium on Security and Privacy (SP '16). IEEE Computer Society, 2016.

28. Lottopolo Smart Contract. https://etherchain.org/account/0x0155ce35fe73249fa5d6a29f3b4b7b98732eb2ed.

29. Random Number Generator Contract. https://github.com/randao/randao.

30. Joseph Bonneau, Jeremy Clark, and Steven Goldfeder. On Bitcoin as a Public Randomness Source. Cryptology ePrint Archive, Report 2015/1015, 2015. http://eprint.iacr.org/.

31. James C. King. Symbolic Execution and Program Testing. Communications of the ACM, 19(7):385–394, 1976.

32. Patrick Cousot and Radhia Cousot. Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints. In Proceedings of the 4th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, pages 238–252, New York, NY, USA, 1977. ACM.

33. Microsoft Corporation. The Z3 Theorem Prover. https://github.com/Z3Prover/z3.

34. The Ethereum Block Explorer. https://etherscan.io/.

35. The Ethereum Network Stats. https://etherchain.org/.

36. Peter Borah. TokenWithInvariants - Vulnerable Contracts in Ethereum. https://github.com/PeterBorah/smart-contract-security-examples/blob/7d7ef27b12f15318871c44512b70737176d23c5f/contracts/TokenWithInvariants.sol.

37. Peter Vessenes. More Ethereum Attacks: Race-to-Empty is the Real Deal. http://vessenes.com/more-ethereum-attacks-race-to-empty-is-the-real-deal/.

38. Alexandre Naverniouk. EtherID: Ethereum Name Registrar. http://etherid.org/.

39. Fan Zhang, Ethan Cecchetti, Kyle Croman, Ari Juels, and Elaine Shi. Town Crier: An Authenticated Data Feed for Smart Contracts. Cryptology ePrint Archive, Report 2016/168, 2016. http://eprint.iacr.org/.

40. Ari Juels, Ahmed Kosba, and Elaine Shi. The Ring of Gyges: Investigating the Future of Criminal Smart Contracts. Cryptology ePrint Archive, Report 2016/358, 2016. http://eprint.iacr.org/.

41. Philip A. Bernstein and Nathan Goodman. Concurrency Control in Distributed Database Systems. ACM Computing Surveys, 13(2):185–221, June 1981.

42. Friedemann Mattern. Virtual Time and Global States of Distributed Systems. In Parallel and Distributed Algorithms, pages 215–226. North-Holland, 1989.

43. C. J. Fidge. Timestamps in Message-Passing Systems That Preserve the Partial Ordering. Proceedings of the 11th Australian Computer Science Conference, 10(1):56–66, 1988.

44. Leslie Lamport. Time, Clocks, and the Ordering of Events in a Distributed System. Communications of the ACM, pages 558–565, July 1978.

45. Andrew Koenig and Bjarne Stroustrup. Exception Handling for C++. Journal of Object-Oriented Programming, 3(2):16–33, 1990.

46. Robin Milner, Mads Tofte, and David MacQueen. The Definition of Standard ML. MIT Press, Cambridge, MA, USA, 1997.

### Appendix

**Table 2: Operational Semantics of EtherLite**

| Instruction | Description | Conditions | Result |
|-------------|-------------|------------|--------|
| `push v`    | Push value `v` onto the stack. | - | \(\langle\langle M, pc, l, v \cdot s \rangle \cdot A, \sigma \rangle\) |
| `pop`       | Pop the top value from the stack. | - | \(\langle\langle M, pc, l, s \rangle \cdot A, \sigma \rangle\) |
| `op v`      | Apply unary operator `op` to `v`. | `op` is a unary operator. | \(\langle\langle M, pc + 1, l, v' \cdot s \rangle \cdot A, \sigma \rangle\) |
| `op v1 v2`  | Apply binary operator `op` to `v1` and `v2`. | `op` is a binary operator. | \(\langle\langle M, pc + 1, l, v' \cdot s \rangle \cdot A, \sigma \rangle\) |
| `bne z λ`   | Branch if `z` is not equal to 0. | `z \neq 0` and `λ` is a valid target. | \(\langle\langle M, \lambda, l, s \rangle \cdot A, \sigma \rangle\) |
| `bne z λ`   | Branch if `z` is not equal to 0. | `z \neq 0` and `λ` is not a valid target. | \(\langle\langle e \rangle_{exc} \cdot A, \sigma \rangle\) |
| `mload i`   | Load memory at index `i`. | - | \(\langle\langle M, pc + 1, l, v \cdot s \rangle \cdot A, \sigma \rangle\) |
| `mstore i v`| Store value `v` at memory index `i`. | - | \(\langle\langle M, pc + 1, l', s \rangle \cdot A, \sigma \rangle\) |
| `sload i`   | Load storage at index `i`. | - | \(\langle\langle M, pc + 1, l, v \cdot s \rangle \cdot A, \sigma \rangle\) |
| `sstore i v`| Store value `v` at storage index `i`. | - | \(\langle\langle M, pc + 1, l, s \rangle \cdot A, \sigma' \rangle\) |
| `call γ z st sz` | Call contract at address `γ` with gas `z`, start `st`, and size `sz`. | - | \(\langle\langle M', pc, l', \gamma \cdot z \cdot st \cdot sz \cdot s \rangle \cdot a, \sigma' \rangle\) |
| `return st sz` | Return data starting at `st` with size `sz`. | - | \(\langle\langle M, pc + 1, l, 0 \cdot s \rangle \cdot A, \sigma \rangle\) |
| `EXC`       | Exceptional halting of callee. | - | \(\langle\langle e \rangle_{exc} \cdot \langle M, pc, l, st \cdot sz \cdot s \rangle \cdot A, \sigma \rangle\) |
| `suicide`   | Self-destruct the contract. | - | \(\langle\langle M, pc + 1, l, 0 \cdot s \rangle \cdot A, \sigma'' \rangle\) |

- \(M\): Machine state
- \(pc\): Program counter
- \(l\): Local memory
- \(s\): Stack
- \(\sigma\): Global state
- \(\gamma\): Address of the called contract
- \(A\): Active call stack
- \(v'\): Result of the operation
- \(l'\): Updated local memory
- \(\sigma'\): Updated global state
- \(\sigma''\): Final global state after self-destruction