8. ACKNOWLEDGMENT
We thank Brian Demsky, Vitalik Buterin, Yaron Welner,
Gregory J. Duck, Christian Reitwiessner, Dawn Song, An-
drew Miller, Jason Teutsch, Alex Zikai Wen, Patrick Cousot
and Joseph Chow for useful discussions and feedback on the
early version of the paper. This work is supported by the
Ministry of Education, Singapore under Grant No. R-252-
000-560-112 and in part by Yale-NUS College under Grant
No. R-607-265-045-121. All opinions expressed in this work
are solely those of the authors.
9. REFERENCES
[1] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic
cash system. bitcoin.org, 2009.
[2] Ethereum Foundation. Ethereum’s white paper. https:
//github.com/ethereum/wiki/wiki/White-Paper,
2014.
[3] A Miller, A Juels, E Shi, B Parno, and J Katz.
Permacoin: Repurposing Bitcoin work for long-term
data preservation. IEEE Security and Privacy, 2014.
[4] Use case for factom: The world’s ﬁrst blockchain
operating system (bos). http://kencode.de/projects/
ePlug/Factom-Linux-Whitepaper.pdf, Feb 2015.
[5] Nick Szabo. The idea of smart contracts.
http://szabo.best.vwh.net/smart contracts idea.html,
1997.
[6] Loi Luu, Jason Teutsch, Raghav Kulkarni, and
Prateek Saxena. Demystifying incentives in the
consensus computer. In Proceedings of the 22Nd ACM
SIGSAC Conference on Computer and
Communications Security, CCS ’15, pages 706–719.
ACM, 2015.
[7] EtherDice smart contract is down for maintenance.
https:
//www.reddit.com/r/ethereum/comments/47f028/
etherdice is down for maintenance we are having/.
[8] RSK Labs. Rootstock: Smart contracts platform
powered by Bitcoin. http://www.rootstock.io/, 2015.
[9] Counterparty platform. http://counterparty.io/, 2015.
[10] James C. Corbett, Jeﬀrey Dean, Michael Epstein,
Andrew Fikes, Christopher Frost, J. J. Furman, Sanjay
Ghemawat, Andrey Gubarev, Christopher Heiser,
Peter Hochschild, Wilson Hsieh, Sebastian Kanthak,
Eugene Kogan, Hongyi Li, Alexander Lloyd, Sergey
Melnik, David Mwaura, David Nagle, Sean Quinlan,
Rajesh Rao, Lindsay Rolig, Yasushi Saito, Michal
Szymaniak, Christopher Taylor, Ruth Wang, and Dale
Woodford. Spanner: Google’s globally distributed
database. ACM Trans. Comput. Syst., aug 2013.
[11] Jason Baker, Chris Bond, James C. Corbett,
JJ Furman, Andrey Khorlin, James Larson,
Jean-Michel Leon, Yawei Li, Alexander Lloyd, and
Vadim Yushprakh. Megastore: Providing scalable,
highly available storage for interactive services. In
Proceedings of the Conference on Innovative Data
system Research (CIDR), pages 223–234, 2011.
[12] KingOfTheEtherThrone smart contract. https:
//github.com/kieranelby/KingOfTheEtherThrone/
blob/v0.4.0/contracts/KingOfTheEtherThrone.sol.
[13] GovernMental’s 1100 ETH payout is stuck because it
uses too much gas. https:
//www.reddit.com/r/ethereum/comments/4ghzhv/
governmentals 1100 eth jackpot payout is stuck/.
[14] Kevin Delmolino, Mitchell Arnett, Ahmed Kosba,
Andrew Miller, and Elaine Shi. Step by step towards
creating a safe smart contract: Lessons and insights
from a cryptocurrency lab. Cryptology ePrint Archive,
Report 2015/460, 2015. http://eprint.iacr.org/.
[15] Gavin Wood. Ethereum: A secure decentralised
generalised transaction ledger.
http://gavwood.com/paper.pdf, 2014.
[16] Ethereum Foundation. The solidity contract-oriented
programming language.
https://github.com/ethereum/solidity.
[17] Ethereum Foundation. The serpent contract-oriented
programming language.
https://github.com/ethereum/serpent.
[18] Oyente project page.
https://www.comp.nus.edu.sg/˜loiluu/oyente.html.
[19] TheDAO smart contract. http://etherscan.io/address/
0xbb9bc244d798123fde783fcc1c72d3bb8c189413#code.
[20] EtherEx: A fully decentralized cryptocurrency
exchange. https://etherex.org/.
[21] EtherOpt: A decentralized options exchange.
http://etheropt.github.io/.
[22] The Run smart contract.
https://etherscan.io/address/
0xcac337492149bdb66b088bf5914bedfbf78ccc18.
[23] Ethereum Foundation. Block validation algorithm.
https://github.com/ethereum/wiki/wiki/Block-
Protocol-2.0#block-validation-algorithm.
[24] Andrew Miller, Brian Warner, and Nathan Wilcox.
Gas economics. https://github.com/LeastAuthority/
ethereum-analyses/blob/master/GasEcon.md.
[25] Protect The Castle Contract.
http://protect-the-castle.ether-contract.org/.
[26] GovernMental Smart Contract.
http://governmental.github.io/GovernMental/.
[27] Ahmed Kosba, Andrew Miller, Elaine Shi, Zikai Wen,
and Charalampos Papamanthou. Hawk: The
blockchain model of cryptography and
privacy-preserving smart contracts. In Proceedings of
the 2016 IEEE Symposium on Security and Privacy,
SP ’16. IEEE Computer Society, 2016.
[28] Lottopolo smart contract.
https://etherchain.org/account/
0x0155ce35fe73249fa5d6a29f3b4b7b98732eb2ed.
[29] Random number generator contract.
https://github.com/randao/randao.
[30] Joseph Bonneau, Jeremy Clark, and Steven Goldfeder.
On Bitcoin as a public randomness source. Cryptology
ePrint Archive, Report 2015/1015, 2015.
http://eprint.iacr.org/.
[31] James C. King. Symbolic execution and program
testing. Commun. ACM, 19(7):385–394.
[32] Patrick Cousot and Radhia Cousot. Abstract
interpretation: A uniﬁed lattice model for static
analysis of programs by construction or approximation
of ﬁxpoints. In Proceedings of the 4th ACM
SIGACT-SIGPLAN Symposium on Principles of
Programming Languages, pages 238–252, New York,
NY, USA, 1977. ACM.
[33] Microsoft Corporation. The Z3 theorem prover.
https://github.com/Z3Prover/z3.
[34] The Ethereum block explorer. https://etherscan.io/.
[35] The Ethereum network stats. https://etherchain.org/.
[36] Peter Borah. Tokenwith invariants - vulnerable
contracts in ethereum. https://github.com/
PeterBorah/smart-contract-security-examples/blob/
7d7ef27b12f15318871c44512b70737176d23c5f/
contracts/TokenWithInvariants.sol.
[37] Peter Vessenes. More ethereum attacks:
Race-to-empty is the real deal.
http://vessenes.com/more-ethereum-attacks-race-to-
empty-is-the-real-deal/.
[38] Alexandre Naverniouk. EtherID: Ethereum name
registrar. http://etherid.org/.
[39] Fan Zhang, Ethan Cecchetti, Kyle Croman, Ari Juels,
and Elaine Shi. Town crier: An authenticated data
feed for smart contracts. Cryptology ePrint Archive,
Report 2016/168, 2016. http://eprint.iacr.org/.
[40] Ari Juels, Ahmed Kosba, and Elaine Shi. The ring of
Gyges: Investigating the future of criminal smart
contracts. Cryptology ePrint Archive, Report
2016/358, 2016. http://eprint.iacr.org/.
[41] Philip A. Bernstein and Nathan Goodman.
Concurrency control in distributed database systems.
ACM Comput. Surv., 13(2):185–221, June 1981.
[42] Friedemann Mattern. Virtual time and global states of
distributed systems. In Parallel and Distributed
Algorithms, pages 215–226. North-Holland, 1989.
[43] C. J. Fidge. Timestamps in message-passing systems
that preserve the partial ordering. Proceedings of the
11th Australian Computer Science Conference,
10(1):56ˆa ˘A¸S66, 1988.
[44] Leslie Lamport. Time, clocks, and the ordering of
events in a distributed system. Commun. ACM, pages
558–565, July 1978.
[45] Andrew Koening and Bjarne Stroustrup. Exception
handling for C++. Journal of Object-Oriented
Programming, 3(2):16–33, 1990.
[46] Robin Milner, Mads Tofte, and David MacQueen. The
Deﬁnition of Standard ML. MIT Press, Cambridge,
MA, USA, 1997.
APPENDIX
Table 2 describes the operational semantics of EtherLite.
Table 2: Operational Semantics of EtherLite. EXC stands for “Exception”.
M [pc]
push v
pop
op
op
bne
bne
bne
mload
mstore
sload
sstore
call
call
return
return
EXC
suicide
suicide
Conditions
(cid:48)
(cid:48)
(cid:48)
← op v
← v1 op v2
← σ[id][i (cid:55)→ v]
← (cid:104)M, pc, l, s(cid:105)
(cid:48)
← Lookup(σ, γ)
← σ[id][bal (cid:55)→ σ[id][bal] − z]
← σ
[γ][bal (cid:55)→ σ[id][bal] + z]
op: unary operator and v
op: binary operator and v
z = 0
z (cid:54)= 0 and λ is a valid target
z (cid:54)= 0 and λ is NOT a valid target
v ← l[i]
(cid:48)
← l[i (cid:55)→ v]
l
id ← address of the executing contract
v ← σ[id][i]
id ← address of the executing contract
(cid:48)
σ
id ← address of the executing contract
(cid:48)
a
M
(cid:48)
σ
(cid:48)(cid:48)
σ
id ← address of the executing contract
σ[id][bal] < v or |A| = 1023
(cid:48)
(cid:48)
(cid:48)
· s
(cid:105)
, l
a
, pc
(cid:48)
n ← min(sz
, sz)
(cid:48)
+ i (cid:55)→ l[st + i]]
i+1 ← l
0 ≤ i < n : l
exceptional halting of callee
id ← address of the executing contract
(cid:48)
← σ[γ][bal (cid:55)→ (σ[γ][bal] + σ[id][bal])]
σ
(cid:48)(cid:48)
← σ
σ
Register id for later deletion
id ← address of the executing contract
(cid:48)
≡ (cid:104)M
a
(cid:48)
← σ[γ][bal (cid:55)→ (σ[γ][bal] + σ[id][bal])]
σ
(cid:48)
(cid:48)(cid:48)
← σ
σ
Register id for later deletion
(cid:48)
(cid:48)
0,• · • · s
[id][bal (cid:55)→ 0]
[id][bal (cid:55)→ 0]
· sz
(cid:48)
(cid:48)
i[st
≡ (cid:104)M
(cid:48)
0, st
(cid:105)
, pc
, l
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
µ
(cid:104)(cid:104)M, pc, l, s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, v · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, v · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, v1 · v2 · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l,• · z · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, λ · z · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, λ · z · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, i · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, i · v · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, i · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc, l, i · v · s(cid:105) · A, σ(cid:105)
(cid:48)
µ
(cid:48)
(cid:48)
(cid:104)(cid:104)M, pc + 1, l, v · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc + 1, l, s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc + 1, l, v
· s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc + 1, l, v
· s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc + 1, l, s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, λ, l, s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)e(cid:105)exc · A, σ(cid:105)
(cid:104)(cid:104)M, pc + 1, l, v · s(cid:105) · A, σ(cid:105)
(cid:48)
(cid:104)(cid:104)M, pc + 1, l
(cid:104)(cid:104)M, pc + 1, l, v · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc + 1, l, s(cid:105) · A, σ
, s(cid:105) · A, σ(cid:105)
(cid:105)
(cid:48)
(cid:104)(cid:104)M, pc, l, γ · z · st · sz · s(cid:105) · A, σ(cid:105)
(cid:48)
, 0, l
(cid:48)
(cid:48)
, (cid:105) · a
(cid:104)(cid:104)M
· A, σ
(cid:48)(cid:48)
(cid:105)
(cid:104)(cid:104)M, pc, l,• · v · • · • · • · • · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc,•,•(cid:105) · , σ(cid:105)
(cid:48)
(cid:104)(cid:104)M, pc, l, st · sz · s(cid:105) · a
(cid:104)(cid:104)e(cid:105)exc · (cid:104)M, pc, l, st · sz · s(cid:105) · A, σ(cid:105)
· A, σ(cid:105)
(cid:104)(cid:104)M, pc + 1, l, 0 · s(cid:105) · A, σ(cid:105)
(cid:104), σ(cid:105)
(cid:48)
(cid:104)(cid:104)M
(cid:104)(cid:104)M, pc + 1, l, 0 · s(cid:105) · A, σ(cid:105)
(cid:48)
(cid:48)
n, 1 · s
+ 1, l
, pc
(cid:48)
(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc,•, γ · s(cid:105) · , σ(cid:105)
(cid:48)(cid:48)
(cid:105)
(cid:104), σ
(cid:48)
(cid:104)(cid:104)M, pc,•, γ · s(cid:105) · a
· A, σ(cid:105)
(cid:48)
(cid:48)
, pc
+ 1, l
(cid:48)
(cid:48)
n, 1 · s
(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M