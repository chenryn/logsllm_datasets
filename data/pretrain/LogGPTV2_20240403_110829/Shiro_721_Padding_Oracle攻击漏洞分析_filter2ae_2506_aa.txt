# Shiro 721 Padding Oracle攻击漏洞分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
前不久刚分析完Shiro 550的漏洞，后面@wh1t3Pig告诉我Shiro十月份又出了一个安全公告，等级是Critical
https://issues.apache.org/jira/browse/SHIRO-721
公告梗概：
Shrio所使用的cookie里的rememberMe字段采用了AES-128-CBC的加密模式，这使得该字段可以被padding oracle
攻击利用。攻击者可以使用一个合法有效的rememberMe
的cookie作为前缀来实施POA，然后制造一个特制的rememberMe来执行Java反序列化攻击，比如Shrio 550那样的。
实施步骤：
  1. 登录网站，任意用户，来获取一个合法的remmemberMe cookie。
  2. 使用rememberMe cookie作为前缀来实施POA。
  3. 加密Java反序列化的payload来制作特制的rememberMe
  4. 带着新的rememberMe向网站发起请求
这个漏洞相较于550而言，它不需要知道key的值，但是它需要一个合法用户的rememberMe cookie，这大概是它比较鸡肋的地方了。
## 环境搭建
###  制作war包
    git clone https://github.com/apache/shiro.git
    cd /shiro
    git checkout shiro-root-1.4.1 -b shiro-root-1.4.1
    cd ./shiro/samples/web
    mvn clean
    mvn package
###  搭建调试环境
把war包放入www跑docker-compose即可，source只是做个备份
Github：
[https://github.com/Mote-Z/JavaWebSecurity/tree/master/Shiro/shiro%20721/DebugEnvironment](https://github.com/Mote-Z/Java_Web_Security/tree/master/Shiro/shiro%20721/DebugEnvironment)
IDEA设置remote debug 端口为5005
在对应地方下断即可愉快调试。
## rememberMe解密过程
首先，这个漏洞是针对rememberMe的，所以要对rememberMe的解密流程有所了解，这里用了IDEA+docker来进行远程Debug（什么？为什么不说加密？emmm，我当然不会说我想偷懒，而且了解这个过程只是为了我编写exp有一丢丢帮助）
###  解密过程的细（mang）致（mu）分析
下面是对这个流程的分析，如果对550比较熟悉的可以直接跳到后面的总结
    getRememberedPrincipals , AbstractRememberMeManager (org.apache.shiro.mgt)
  1. 进行base64解码，返回byte数组
    byte[] bytes = this.getRememberedSerializedIdentity(subjectContext);
    getRememberedSerializedIdentity , CookieRememberMeManager (org.apache.shiro.web.mgt)
  2. 接收传过来得base64编码的rememberMe
    String base64 = this.getCookie().readValue(request, response);
  3. 调用ensurePadding方法来填充=号
    base64 = this.ensurePadding(base64); //填充=号
  4. base64解码
    byte[] decoded = Base64.decode(base64);  //进入decode方法
    ↓
    byte[] bytes = CodecSupport.toBytes(base64Encoded); //先把string类型的payload转成byte数组
    return decode(bytes);    //进入decode，并返回base64解码后的byte数组
    ↓
    byte[] decoded = Base64.decode(base64);  //返回decode方法，decoded的值为解码后的byte数组
    getRememberedPrincipals , AbstractRememberMeManager (org.apache.shiro.mgt)
  5. 此时bytes是base64解码后的字节数组
    byte[] bytes = this.getRememberedSerializedIdentity(subjectContext);
  6. 判断是否为空，且bytes长度大于0，否则抛出异常，如果符合则进入convertBytesToPrincipals方法
    if (bytes != null && bytes.length > 0) {
    principals = this.convertBytesToPrincipals(bytes, subjectContext);
    }
    convertBytesToPrincipals , AbstractRememberMeManager (org.apache.shiro.mgt)
  7. 获取cipher实例，不为空则进入AES解密流程
    this.getCipherService() != null
从实例中也可以看到，使用AES，分组模式为CBC，keySize为128也就是16个字节，填充类型遵循PSCS5
  8. 调用cipher实例解密
    bytes = this.decrypt(bytes);
    decrypt , AbstractRememberMeManager (org.apache.shiro.mgt)
  9. 获取实例的key
    this.getDecryptionCipherKey()
自从1.2.5以后，shiro的密钥不再硬编码，而是使用了KeyGenerator来生成密钥
  10. 调用实例的decrypt方法进行解密
    ByteSource byteSource = cipherService.decrypt(encrypted, this.getDecryptionCipherKey());
这里的cipherService是一个接口，具体实现在JcaCipherService中
    decrypt , JcaCipherService (org.apache.shiro.crypto)
  11. 取出byte数组前16位取出来当作iv
    if (this.isGenerateInitializationVectors(false)) {
    try {
    int ivSize = this.getInitializationVectorSize();
    int ivByteSize = ivSize / 8;
    iv = new byte[ivByteSize];
    System.arraycopy(ciphertext, 0, iv, 0, ivByteSize);
    int encryptedSize = ciphertext.length - ivByteSize;
    encrypted = new byte[encryptedSize];
    System.arraycopy(ciphertext, ivByteSize, encrypted, 0, encryptedSize);
    } catch (Exception var8) {
    String msg = "Unable to correctly extract the Initialization Vector or ciphertext.";
    throw new CryptoException(msg, var8);
    }
    }
  12. 调用decrypt进行解密
    return this.decrypt(encrypted, key, iv);
  13. 跟进decrypt，发现调用crypt
    byte[] decrypted = this.crypt(ciphertext, key, iv, 2);
    return decrypted == null ? null : Util.bytes(decrypted);
    ……
    try {
    return cipher.doFinal(bytes);
    } catch (Exception var5) {
    String msg = "Unable to execute 'doFinal' with cipher instance [" + cipher + "].";
    throw new CryptoException(msg, var5);
    }
这里会检测填充是否正确，后面讲POA的时候会解释，否则会抛出异常final block not properly padded
    convertBytesToPrincipals , AbstractRememberMeManager (org.apache.shiro.mgt)