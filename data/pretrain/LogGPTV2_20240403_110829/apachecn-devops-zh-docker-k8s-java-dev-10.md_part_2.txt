*   `IAMFullAccess`
*   `AmazonVPCFullAccess`
首先，我们将创建一个名为`kops`的组，并将所需的权限授予该组。执行以下命令列表来创建组并分配权限:
```
$ aws iam create-group --group-name kops
$ aws iam attach-group-policy --policy-arn $ arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops
$ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops
```
`create-group`命令会给你一些 JSON 响应，但是如果一切顺利的话，在给组附加权限(组策略)的时候不会有响应:
![](img/7061c707-d164-46b5-b078-68a2a3f5580c.png)
接下来，让我们创建`kops` IAM 用户，并使用以下命令将该用户添加到`kops`组:
```
$ aws iam create-user --user-name kops
$ aws iam add-user-to-group --user-name kops --group-name kops  
```
如果你感到好奇，你现在可以登录到网络 AWS 控制台。您将看到我们的`kops`用户拥有我们需要的所有权限:
![](img/c666ee8f-cb4b-4daf-839d-8802de9ae703.png)
要列出所有注册用户，请执行以下命令:
```
$ aws iam list-users        
```
从下面的截图中可以看到，我们现在应该有两个用户:`admin`和`kops`:
![](img/44e29a86-3197-4cba-94e0-fa6637626564.png)
关于我们的新`kops`用户，我们需要做的最后一件事是生成访问密钥。我们需要他们使用`aws configure`命令进行身份验证。执行以下操作为`kops`用户生成访问密钥:
```
$ aws iam create-access-key --user-name kops  
```
从下面的截图中可以看到，AWS 会用包含`AccessKeyId`和`SecretAccessKey`的 JSON 响应进行回答；当使用`aws configure`命令进行身份验证时，我们将需要这两者:
![](img/c8c205ac-147d-4882-9581-eed618029985.png)
我们现在需要做的就是使用`aws configure`命令进行身份验证，提供我们在响应中得到的`AccessKeyId`和`SecretAccessKey`。执行以下操作:
```
$ aws configure   
```
因为`aws configure`命令没有导出这些变量供`kops`使用，所以我们现在需要导出它们:
```
$ export AWS_ACCESS_KEY_ID=
$ export AWS_SECRET_ACCESS_KEY=  
```
就这样，我们已经通过了名为`kops`的新用户的身份验证，该用户拥有启动 Kubernetes 集群所需的所有权限。从现在开始，我们执行的每个`kops`命令都将使用 AWS `kops`用户。是时候回到正题，最终创建我们的集群了。
# 创建集群
我们将创建一个包含一个主节点和两个工作节点的简单集群。要使用`kops`完成，我们需要:
*   在`~/.aws/credentials`中声明的用户配置文件(如果您使用`aws configure`进行身份验证，这将自动完成)。
*   一个 S3 桶来存储`kops`集群状态。为了存储集群的表示及其状态，我们需要创建一个专用的 S3 桶供`kops`使用。这个桶将成为我们集群配置的真理之源。
*   已配置 DNS。这意味着我们将需要在同一个 AWS 帐户中有一个 53 号公路托管区域。亚马逊 53 号路线是一个高度可用和可扩展的云**域名系统** ( **域名系统**)网络服务。Kops 将使用它来创建集群所需的记录。如果您使用较新的 kops (1.6.2 或更高版本)，则 DNS 配置是可选的。相反，可以很容易地创建一个基于流言的集群。为了简单起见，我们将使用基于流言的集群。要使其工作，集群名称必须以`k8s.local`结尾。不过，让我们看看关于域名系统设置的其他选项。
# DNS 设置
对于我们集群的域，基本上有四种可能的情况:托管在 AWS 上的根域，托管在 AWS 上的域的子域，对托管在其他地方的域使用 Amazons Route 53，最后，在 Route 53 中为您的集群设置子域，同时在其他地方拥有根域。现在让我们简单看看这些设置。
# AWS 托管域上的根域
如果您购买了您的域名并将其托管在 AWS 上，您可能已经自动为您配置了 53 号路由。如果您想将此根级域用于您的群集，您不需要做任何事情就可以将该域名用于您的群集。
# 托管在 AWS 上的域的子域
如果您购买了您的域并将其托管在 AWS 上，但希望将该子域用于群集，则需要在 53 号路由中创建新的托管区域，然后将新路由委派给该新区域。这基本上是关于将您子域的 NS 服务器复制到 53 号路由的父域。假设我们的领地是[mydomain.com](http://www.mydomain.com/)；我们需要先得到一些信息。请注意，`jq`命令行工具现在在执行`aws`命令时派上了用场。首先，我们需要主父区域的 ID:
```
$ aws route53 list-hosted-zones | jq '.HostedZones[] \ 
| select(.Name=="mydomain.com.") | .Id'  
```
要创建新子域，请执行以下操作:
```
$ aws route53 create-hosted-zone --name myservice.mydomain.com \ 
--caller-reference $ID | jq .DelegationSet.NameServers  
```
请注意，前面的命令将列出新域的名称服务器。如果您之前创建了子域，并且想要列出名称服务器(要将 NS 服务器列表复制到父区域，我们需要先了解它们)，请执行以下命令获取子域区域 ID:
```
$ aws route53 list-hosted-zones | jq '.HostedZones[] | \ select(.Name==" myservice.mydomain.com.") | .Id' 
```
有了子域区域的标识，我们可以通过执行以下命令来列出它的名称服务器:
```
$ aws route53 get-hosted-zone --id  \
| jq .DelegationSet.NameServers  
```
到目前为止，我们已经有了我们父母的区域标识、子域区域标识和子域名称服务器列表。我们准备将它们复制到父对象中。最方便的方法是准备 JSON 文件，因为这是一个相当长的输入。该文件看起来与以下内容相同:
```
{
 "Changes": [
 {
 "Action": "CREATE",
 "ResourceRecordSet": {
 "Name": "myservice.mydomain.com",
 "Type": "NS",
 "TTL": 300,
 "ResourceRecords": [
 {
 "Value": "ns-1.awsdns-1.com"
 },
 {
 "Value": "ns-2.awsdns-2.org"
 },
 {
 "Value": "ns-3.awsdns-3.com"
 },
 {
 "Value": "ns-4.awsdns-4.net"
 }
 ]
 }
 }
 ]
}
```
你需要把它保存为一个文件，比如说`my-service-subdomain.json`，然后执行最后一个命令。它会将名称服务器列表复制到父区域:
```
$ aws route53 change-resource-record-sets 
--change-batch file://my-service-subdomain.json \
--hosted-zone-id   
```
过一会儿，所有到`*.myservice.mydomain.com`的网络流量将被路由到 AWS 路由中正确的子域托管区域。
# 向另一个注册商购买的域名的路由 53
如果您在其他地方购买了您的域，并希望将整个域专用于您的 AWS 托管集群，事情可能会变得有点复杂，因为这种设置需要您在另一个域注册器中进行重要的更改。
If the registrar for your domain is also the DNS service provider for the domain (which is, actually, very often the case), it's recommended to transfer your DNS service to Amazon Route 53 before you continue with the process to transfer the domain registration.
其原因是，当您转移注册时，先前的注册者可能会在收到来自路由 53 的转移请求后立即禁用该域的 DNS 服务。因此，您在该域上拥有的任何服务(如 web 应用或电子邮件)都可能变得不可用。要将域注册从另一个注册服务商转移到 53 号路由，您需要使用 53 号路由控制台，该控制台可在[https://console.aws.amazon.com/route53/](https://console.aws.amazon.com/route53/)获得。在导航窗格中，选择已注册的域，然后选择传输域，输入要传输的域名，然后单击检查。如果域不可用于传输，控制台将列出可能的原因和建议的处理方法。如果一切正常，并且域可供转移，您将可以选择将其添加到购物车中。您需要输入一些详细信息，例如您的联系信息、转账授权码(您应该从以前的注册服务商那里获得)和名称服务器设置。我强烈建议选择路由 63 管理的域名系统服务器，因为它非常容易配置和可靠。63 号公路将负责与您以前的注册服务商沟通，但您可能会收到一些电子邮件，要求您确认一些事情。传输过程可能需要更长的时间，但完成后，您可以按照与前两种情况相同的方式继续为基于 AWS 的集群配置域。
# AWS 路由中群集的子域，其他地方的域
如果您在亚马逊以外的注册机构注册了您的域名，并希望使用该域名的子域来指向您的集群，则需要在注册机构中修改您的域名服务器条目。这将需要在 53 号公路上创建一个新的托管区域子域，然后将该子域的名称服务器记录迁移到您的注册服务商。
类似于 AWS 托管域上的子域，让我们首先通过执行以下命令来创建一个子域:
```
$ aws route53 create-hosted-zone \
--name myservice.mydomain.com \
--caller-reference $ID | jq .DelegationSet.NameServers  
```
前面命令的输出将列出子域的名称服务器。您需要登录到注册器的设置页面，并创建一个新的子域，提供从上一个命令接收到的四个名称服务器记录。您可以在特定的注册服务商帮助指南中找到如何编辑域名服务器的详细说明。
前面的指南应该使您的集群在特定的域或子域下可用。然而，在本章的剩余部分，我们将运行基于流言的集群。
在我们在 AWS 上创建任何东西之前，我们必须看看有哪些区域可供使用。您应该知道，亚马逊 EC2 在全球多个地方托管。这些位置由区域和可用性区域组成。每个地区都是一个独立的地理区域。每个区域都有多个独立的位置，称为可用性区域。您可以选择您想要的位置，但是首先，您需要检查区域的可用性。我们现在就开始吧。
# 检查区域的可用性
要列出特定区域的可用区域，请执行以下命令:
```