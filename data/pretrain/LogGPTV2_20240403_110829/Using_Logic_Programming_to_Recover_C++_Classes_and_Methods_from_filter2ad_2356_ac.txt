Another example is Consistency-MultipleRealDestructors,
which checks that each class has at most one real destructor. When
consistency checks fail, they conclude false, which forces Prolog to
backtrack and revisit guesses made during hypothetical reasoning.
OOAnalyzer completes and presents the results to the user after
all proposed guesses have been made and the model passes the
consistency checks.
5 IMPLEMENTATION
OOAnalyzer’s executable fact exporter is a tool built inside the
Pharos binary analysis framework [20]. Pharos is developed by
Carnegie Mellon’s Software Engineering Institute and builds upon
Consistency-VFTables
VFTableInstall(_, Ma, O, VFT)
VFTableInstall(_, Mb , O, VFT)
Ma (cid:44) Mb
Ma ∈ Cla
HasNoBase(Cla)
Mb ∈ Clb
HasNoBase(Clb)
Cla (cid:44) Clb
false
Consistency-VirtualConstructor
Constructor(M)
VFTableEntry(VFT, _, M)
false
Consistency-DoubleDuty
Constructor(M)
Destructor(M) ∨ DeletingDestructor(M)
false
Consistency-MultipleRealDestructors
Destructor(Ma)
Destructor(Mb)
Ma (cid:44) Mb
false
Figure 4: Selected consistency rules
the binary analysis components of the ROSE compiler infrastruc-
ture [22] from Lawrence Livermore National Lab. At a high level,
ROSE handles Portable Executable (PE) file format parsing, instruc-
tion disassembly and the partitioning of those instructions into
functions. ROSE also provides instruction semantics and a static
analysis framework. Pharos builds on these capabilities by adding a
lightweight symbolic analysis that summarizes the output of each
function in terms of its symbolic inputs. OOAnalyzer utilizes this
symbolic analysis to generate initial facts. OOAnalyzer consists of
approximately 2,313 lines of C++ code inside the Pharos framework.
Pharos itself has 51,222 lines of C++. Most of OOAnalyzer’s C++
code implements the executable fact exporter, but there is also a
user front-end and an interface with the Prolog engine.
OOAnalyzer’s Prolog implementation consists of approximately
4,996 lines of Prolog rules. OOAnalyzer employs XSB Prolog [29]
because it is mature, open source, can be embedded into C/C++
programs, and has robust tabling support. From the perspective of a
Prolog programmer, tabling is essentially a mechanism for caching
the execution of Prolog rules. We quickly found that tabling sup-
port is a practical requirement due to the large number of facts
that can be emitted for programs, and the nature of OOAnalyzer’s
hypothetical reasoning strategy, which results in repetitive queries
being issued under slightly different contexts. Tabling allows these
repetitive queries to be made much more efficiently. The current
OOAnalyzer implementation can analyze 32-bit Windows PE exe-
cutables, and we are working to add support for 64-bit executables.
We chose to focus on Windows because it is the platform most com-
monly targeted by malware and other closed source C++ programs.
6 EVALUATION
In this section, we evaluate OOAnalyzer’s ability to identify C++
classes and their constituent methods (Section 6.4), and to classify
methods as constructors, destructors, and virtual methods (Sec-
tion 6.5). Along the way, we discuss how we produce ground truth
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada433data (Section 6.2) for our program corpus (Section 6.1), and use that
ground truth data to develop a new class membership metric based
on edit distance (Section 6.3).
6.1 Program Corpus
We evaluated OOAnalyzer on a program corpus of 27 programs
that were compiled to 32-bit Windows PE executables. We chose
our corpus to reflect the two most common scenarios in which
recovering C++ abstractions is necessary: analyzing cleanware and
malware.
Cleanware. The top eighteen rows of Table 3 list the cleanware
programs in our corpus. We started by selecting Windows clean-
ware evaluated in other C++ abstraction recovery work [14], namely:
CImg 1.05, Light POP SMTP 608b, optionparser 1.3, PicoHttpD 1.2,
and x3c 1.02. We used the same executables from that work [14],
which were compiled with Visual Studio 2010 using the Debug
configuration (i.e., optimizations disabled). For this paper, we added
log4cpp 1.1, muParser 2.2.3 and TinyXML 2.6.1, which we compiled
ourselves using Visual Studio 2010 in both Debug and Release con-
figurations to analyze the impact of optimizations. We felt that these
programs adequately covered small and medium sized programs
since they range in size from 42 to 663 KiB, but did not represent
larger cleanware programs. To represent more complex programs,
we included Firefox web browser 52.0,4 and several programs from
MySQL database 5.2.0, including mysql.exe, which is larger than 5
MiB, and is a strenuous test of OOAnalyzer’s ability to handle large
and complex programs. We used the official precompiled 32-bit
Windows executables for these programs, which were compiled
by Visual Studio 12 and 15 respectively, both with optimizations
enabled.
Malware. The nine malware programs in our corpus are shown
in the bottom rows of Table 3. Malware is one of the most common
reverse engineering targets, but evaluating it is difficult because
ground truth is seldom available. We addressed this problem by
searching our private malware collection of hundreds of millions
of samples for executables that have corresponding Program Data-
base (PDB) symbol files [16]. Such pairs can be identified because
the Visual Studio linker embeds the debug GUID, which uniquely
identifies a PDB file, in the corresponding executable. We believe
that most of these debugging symbols were collected after a ma-
licious actor inadvertently copied them to a target system along
with the malware. To ensure that all of the malware files in our
corpus are actually malicious, we only considered files on which
at least one antivirus product in VirusTotal reported a detection,
and then manually verified that each file was malicious. From their
PDB files, we were able to determine that all the malware samples
were compiled with Visual Studio 9, 10, or 11, and only one sample
was compiled with optimizations enabled.
4Firefox notably consists of an executable and several large DLLs such as xul.dll.
We only evaluated OOAnalyzer on firefox.exe. As we note in Section 7.3, this will
include in scope any C++ classes that firefox.exe imports from xul.dll, but will
not include classes internal to xul.dll. We believe this is what most people would
want when reverse engineering a program as complex as Firefox. The other programs
in our corpus do not contain significant amounts of code in DLLs.
6.2 Ground Truth
We produced ground truth C++ abstractions for each program by
parsing the PDB [16] files that are optionally produced by Visual
C++ during compilation. We only used these debugging symbols to
evaluate our results, and did not provide them to OOAnalyzer. The
ground truth for each program includes the list of classes in the
program, the methods and members in each class, and the location
of each class’s virtual function and base tables if applicable.
6.2.1
Scope. Our evaluation considers any method or object
whose implementation is in the executable to be in scope. In C++
programs, this often includes some library code, because the im-
plementations of methods from templated library classes will be
included in the executable even when employing dynamic linking.
Programs which utilize heavily templated libraries such as the Stan-
dard Template Library and Boost libraries [3] can have substantial
amounts of library code inside of them. Unfortunately, since these
library methods cannot be easily distinguished from application
code, their presence increases the difficulty of understanding the
given executable. Thus, it is important for tools such as OOAnalyzer,
which attempt to ease this burden, to consider them in scope.
6.2.2 Ground Truth Exceptions. Some differences between OO-
Analyzer’s output and the ground truth are minor differences that
are both uninteresting (i.e., an analyst does not care about the
distinction) and indistinguishable at the executable level (i.e., the
distinction only makes sense in source code). Thus, we adjust the
following special cases in the ground truth:
• When a class method does not use its object, it can be in-
distinguishable from a regular function. In particular, when
a function is called in a 32-bit binary, it can be ambiguous
whether the compiler placed the object pointer in the ecx
register explicitly to call a OO method using thiscall (Sec-
tion 2.3), or if the compiler happened to leave the object
pointer in ecx when it called a regular function. When the
OO method does not access ecx, it is ambiguous whether
ecx was actually a parameter. Because of this ambiguity, we
treat each method that does not use its object as a regular,
non-OO function.
• When a class method is linked into the executable but not
actually invoked in the control flow of the program, it is
often impossible to determine which class it belongs to. We
identify methods with no code or data references using a
Hex-Rays IDA Python script [12] and exclude those methods
from the ground truth. This scenario occurs more frequently
than might be expected because the linker includes entire
object modules without removing unused functions unless
Whole Program Optimization (Section 7.1) is enabled.
6.3 Edit Distance as a Class Membership Metric
In the next section, we evaluate OOAnalyzer’s ability to identify
C++ classes and the methods in each class.5 But first we motivate
and introduce a new metric for quantifying the results. Recall from
Section 3.1.1 that OOAnalyzer represents each class as a set of
methods so that it can recover information about non-polymorphic
5In this paper, we consider any object type with a method to be a class. This can
include classes, structs, and oddly enough, unions.
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada434Num.
Meth-
ods
Method Edit Distance
w/o RTTI
Program
Ver.
. Com-
t
piler
p
O
1.0.5
VS10
52.0 ✓ VS15
VS10
608b
1.1
VS10
1.1 ✓ VS10
2.2.3
VS10
2.2.3 ✓ VS10
Size
with RTTI w/o guess
(KiB)
Total
%
Total
%
200 90.9
21
9.5
590
CImg
212 33.2
499 78.2
505
Firefox
263 89.2
41 13.9
132
light-pop3-smtp
786 88.0
240 26.9
264
log4cpp Debug
244 64.6
75 19.8
97
log4cpp Release
1310 91.2
474 33.0
664
muParser Debug
181 30.3
407 68.1
302
muParser Release
1005 79.4
388 30.6
MySQL cfg_editor.exe 5.2.0 ✓ VS12 4,386
143 85.6
48 28.7
136
MySQL connection.dll 5.2.0
VS12
211 82.4
32 12.5
MySQL ha_example.dll 5.2.0 ✓ VS12
54
399 30.0
1042 78.5
5.2.0 ✓ VS12 4,570
MySQL libmysql.dll
1110 79.6
433 31.0
5.2.0 ✓ VS12 4,678
MySQL mysql.exe
1578 76.2
655 31.6
5.2.0 ✓ VS12 5,321
MySQL upgrade.exe
56 100.
6 10.7
55
1.3
VS10
optionparser
569 86.7
161 24.5
386
1.2
VS10
PicoHttpD
68 16.4
384 92.5
2.6.1
594
VS10
TinyXML Debug
229 80.9
56 19.8
222
2.6.1 ✓ VS10
TinyXML Release
28 100.
5 17.9
42
VS10
1.0.2
x3c
68 50.4
19 14.1
276
VS9
—
Malware 0faaa3d3
15 11.5
110 84.6
—
VS9
571
Malware 29be5a33
174 51.3
29
8.6
— ✓
445
VS9
Malware 6098cb7c
1724 89.8
374 19.5
VS10 1,322
—
Malware 628053dc
1821 87.9
670 32.3
927
VS11
—
Malware 67b9be3c
111 60.3
33 17.9
VS10
—
98
Malware cfa69fff
15 11.3
91 68.4
—
VS10
68
Malware d597bee8
2493 91.9
639 23.6
VS9 1,673
—
Malware deb6a7a1
1453 90.8
329 20.5
—
VS9 1,256
Malware f101c05e
Average
21.5
81.0
Table 3: The edit distance between the classes that OOAnalyzer recovered and the ground truth. A low edit distance indicates
that the class assignments are close to the ground truth. The edit distance is broken down into the number of move, add, remove,
split and join edits to reveal the types of errors that OOAnalyzer made when it was not allowed to use RTTI. These sum to
the total edit distance which is also reported as a percentage of methods. The remaining columns show for comparison the
results when OOAnalyzer is allowed to utilize RTTI and when OOAnalyzer’s hypothetical reasoning component is disabled.
Move Add Rem Split
1
40
12
66
24
104
34
68
16
4
75
74
92
0
24
5
10
0
2
0
6
27
111
7
3
19
16
Num.
Class
29
141
44
139
76
180
94
190
43
21
200
202
333
11
95
35
33
6
21
19
55
207
400
39
19
283
169
114
%
Join Total
21
9.5
212 33.2
44 14.9
239 26.8
75 19.8
483 33.6
183 30.6
391 30.9
48 28.7