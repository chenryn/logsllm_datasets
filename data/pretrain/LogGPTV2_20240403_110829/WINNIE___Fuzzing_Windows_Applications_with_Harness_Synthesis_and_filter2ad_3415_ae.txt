### WINNIE: A Comprehensive Fuzzing System for Windows Applications

#### Software Binaries Analyzed
- **ultraISO.exe**
- **XnView**
- **Hancom Office HncBmp10.flt**
- **ldf_jpm.dll**
- **FFmpeg**
- **Uriparser**
- **Gomplayer**
- **EzPDF**
- **VLC player**
- **Utable**
- **RetroArch**
- **HncJpg, Png, Gif**
- **HncDxf10.flt**
- **HncTif10.flt**
- **IMDRW9.flt**
- **ISGDI32.flt**
- **IBPCX9.flt**
- **FFmpeg.dll†**
- **uriparse.exe†**
- **RtParser.exe**
- **ezPDFEditor.exe**
- **Pdf2Office.dll**
- **Mediainfo.dll**
- **libfaad.dll**
- **Utable.exe**
- **bnes.dll**
- **emux_gb.dll**
- **snes_9x.dll**
- **quicknes.dll**
- **C2T_CLI.exe**
- **Capture2Text**

#### Vulnerability Types
- **ND**: Null-pointer dereference
- **HR**: Heap out-of-bounds read
- **HC**: Heap corruption
- **TC**: Type confusion
- **FC**: Field confusion
- **SOF**: Stack overflow
- **SBOF**: Stack buffer overflow

#### Summary of Findings
**Table X: Bugs Discovered by WINNIE**
- We discovered a total of 61 unique vulnerabilities across 32 binaries.
- All vulnerabilities were found in the latest versions of commercial off-the-shelf (COTS) binaries.
- We reported all identified bugs to the respective developers. The symbol "†" indicates that the bug was present in the released binary but had already been fixed by the developer when we filed our report.

#### Statistical Significance
- Using p-values to compare the performance of three fuzzers, as suggested by [37], we found that for WinAFL-DR and WinAFL-IPT, all trials except HWP-jpeg have p-values less than 0.05, indicating that WINNIE's improvement is statistically significant.

#### Real-World Effectiveness
- WINNIE's approach scales to complex, real-world software. To highlight its effectiveness, we applied WINNIE to non-trivial programs with complicated logic and GUI code.
- We included binaries from several well-known open-source projects, as many of these projects have only been heavily fuzzed on Linux operating systems, and their Windows-specific implementations may still contain bugs.
- Among the 32 binaries, WINNIE found 61 previously unknown bugs, covering 19 different types, including stack and heap buffer overflows, type confusion, double free, uninitialized use, and null pointer dereferences.
- At the time of writing, we have reported these bugs to the corresponding maintainers and are working with them to help fix the issues.

### Discussion

#### Challenges in Fuzzing Windows Applications
- Due to the difficulty of fuzzing closed-source, GUI-based applications, most Windows programs are tested either through unscalable manual efforts or only evaluated during development by their vendors.
- In contrast, Linux programs are consistently tested and improved at all stages of the software lifecycle by researchers worldwide. Most prior fuzzing work has been concentrated on Linux systems.
- As shown in our evaluation, it is easy to find many bugs in the Windows software we targeted, especially given the legacy code bases involved.

#### Limitations of WINNIE
- **Harness-Based Testing**: Testing with a harness limits coverage to the selected features. WINNIE cannot reach code in unforeseen features absent from the trace, limiting maximum code coverage to the API set covered by the trace. To mitigate this, we recommend collecting as many sample inputs as possible to generate a diverse set of harnesses.
- **Highly-Coupled Programs**: Generating harnesses for applications tightly coupled with their libraries is challenging. For example, in Adobe Reader, the main executable `AcroRd32.exe` is a thin wrapper of the library `AcroRd32.dll`, with frequent cross-module calls. Our system currently handles communication within two components, but we plan to improve the tracer and generator to capture complete inter-module control- and data-flow.
- **False Positives**: Inaccurate harnesses may generate invalid crashes or exceptions that do not occur in the original program, leading to false positives. WINNIE combats this by pre-verifying candidate harnesses during synthesis. However, eliminating false positives requires constructing a suitable input file and interacting with the GUI, which can be automated on a per-target basis.
- **Focus on Shared Libraries**: WINNIE focuses on testing shared libraries due to their clear API boundaries. Private functions in the main executable are difficult to extract into independent functions. To fuzz the main binary, we rely on an injected fork-server, allowing any target address in the main binary to be fuzzed.

#### Performance Versus Persistent Mode
- We noticed that WinAFL occasionally shows better performance on certain simple target applications. This is due to WinAFL's strong assumptions about the target application, such as the harness not changing any global state and cleanly returning to the caller. WINNIE, on the other hand, uses a fork to comprehensively preserve the entire initialized program state, which incurs a little overhead. However, our conservative design allows WINNIE to support significantly more programs.

#### Future Work
- **Handling Structures and Callback Functions**: Custom structures and callback functions are challenging. We could apply memory pre-planning techniques to provide probabilistic guarantees to avoid crashes and use memory breakpoints to infer structure layouts. For callback functions, we could automatically add decompiled code to the harness for simple cases and load the main binary for more complex cases.
- **Support for Non-C ABIs**: WINNIE focuses on C-style APIs, but we plan to extend it to support other native languages' ABIs, such as C++, Rust, or Go.
- **Bytecode Languages and Interpreted Binaries**: While WINNIE supports most native applications, it does not support applications compiled for a virtual machine (e.g., .NET, Java). Specialized instrumentation techniques should be used to collect code coverage for these binaries.

### Related Work

#### Fuzzing and Harness Generation
- Fuzzing has evolved into a well-known program testing and bug-finding technique. Various fuzzing techniques have been proposed, developed, and used to find a large number of program bugs.
- **Windows Fuzzing**: Existing Windows fuzzers include black-box fuzzers like Peach, white-box fuzzers like Sage, and grey-box fuzzers like WinAFL. WINNIE is based on WinAFL but uses a fork-server during execution, making it more robust and capable of fuzzing more programs.
- **Fuzzing Harness Generation**: Tools like IMF analyze kernel API call sequences to deduce API usage patterns. Unlike past works focusing on static or dynamic analysis, WINNIE leverages hybrid analysis of run traces to extract code sequences.
- **Partial Execution**: Approaches like MicroX and UC-KLEE aim to run code fragments under emulation and symbolic execution, respectively. WINNIE avoids heavy solutions and executes the target application under a realistic context, ensuring that any crash has a concrete input for reproduction.

### Conclusion
- We proposed WINNIE, an end-to-end system to support fuzzing Windows applications. Instead of repeatedly running the program directly, WINNIE synthesizes lightweight harnesses to directly invoke interesting functions, bypassing GUI code. It also features an implementation of fork on Windows to clone processes efficiently.
- We tested WINNIE on 59 Windows closed-source binaries and found that it discovered 3.9× more program states and achieved 26.6× faster execution than existing Windows fuzzers. Overall, WINNIE found 61 bugs from 32 binaries.

### Acknowledgment
- We thank the anonymous reviewers, our shepherd Zhiyun Qian, and Weihan Huang for his initial implementation of the tracer. This research was supported by NSF awards, ONR grants, DARPA, ETRI IITP/KEIT, and gifts from Facebook, Mozilla, Intel, VMware, and Google.

### References
- [List of references as provided in the original text]

This optimized version aims to enhance clarity, coherence, and professionalism while maintaining the essential information and structure of the original text.