ultraISO.exe
XnView
Hancom Office HncBmp10.flt
ldf_jpm.dll
FFMpeg
Uriparser
Gomplayer
EzPDF
VLC player
Utable
RetroArch
HncJpg,Png,Gif
HncDxf10.flt
HncTif10.flt
IMDRW9.flt
ISGDI32.flt
IBPCX9.flt
FFmpeg.dll†
uriparse.exe†
RtParser.exe
ezPDFEditor.exe
Pdf2Office.dll
Mediainfo.dll
libfaad.dll
Utable.exe
bnes.dll
emux_gb.dll
snes_9x.dll
quicknes.dll
C2T_CLI.exe
32
Capture2Text
Total
ND: Null-ptr dereference, HR: Heap OOB read, HC: Heap corruption, TC: Type
confusion, FC: Field confusion, SOF: Stack overflow, SBOF: Stack buffer overflow
TABLE X: Bugs found by WINNIE. We discovered total 61 unique
vulnerabilities from 32 binaries. All vulnerabilities were discovered
on the latest version of COTS binaries. We reported all bugs to the
developers. “†” indicates that the bug existed in the released binary,
but the developer had already fixed it when we filed our report.
using p-values to compare the performance of three fuzzers,
as suggested by [37]. For WinAFL-DR and WinAFL-IPT, all
trials except HWP-jpeg have p-values less than 0.05, meaning
that WINNIE’s improvement is statistically significant.
2) Real-world Vulnerabilities: WINNIE’s approach scales
to complex, real-world software. To highlight the effectiveness
of our approach, we applied our system to non-trivial programs
that are not just large in size but also accompany complicated
logic and GUI code. We also included binaries from several
well-known open-source projects because most of them have
only been heavily fuzzed on Linux operating systems; thus
their Windows-specific implementations may still contain bugs.
Among them all, WINNIE found 61 previously unknown bugs
in 32 binaries (shown in Table X). All these bugs are unique.
These bugs cover 19 different types, including but not limited
to stack and heap buffer overflow, type confusion, double free,
uninitialized use, and null pointer dereference. At the time of
writing, we have reported these bugs to their corresponding
maintainers and are working with them to help fix the bugs.
VIII. DISCUSSION
Due to the difficulty of fuzzing closed-source, GUI-based
applications, most Windows programs are tested either by
unscalable manual efforts, or are only evaluated during the
development by their vendors. In contrast, Linux programs are
consistently tested and improved at all stages of the software
lifecycle by researchers over the world. Most prior fuzzing
12
work also has been concentrated on Linux systems. However,
as shown in our evaluation, it is easy to find many bugs in
Windows software we target—especially given the legacy code
bases involved. Nevertheless, we identify several limitations of
WINNIE, which can be addressed in the future to better test
more programs.
Limitations of Harness-Based Testing. Testing the program
with a harness limits the coverage within the selected features.
In the case of WINNIE, we cannot reach any code in unforeseen
features absent from the trace. Thus, the maximum code
coverage possible is limited to the API set the trace covers; the
number of generated harness is limited by the number of inputs
traced. To mitigate this issue, we recommend users to collect
as many sample inputs as possible to generate a diverse set of
harnesses. Although we cannot eliminate this problem inherited
from harness-based testing, automatic harness generation will
help alleviate the burden of manually creating many harnesses.
It
Highly-Coupled Programs.
is more challenging for
WINNIE to generate harnesses for applications tightly coupled
with their libraries. As the logic is split into two binaries, the
program may use frequent cross-module calls to communicate,
making it hard to accurately identify and extract the relevant
code we wish to fuzz. In Adobe Reader, for instance, the main
executable AcroRd32.exe is simply a thin wrapper of the library
AcroRd32.dll [3]. There are a lot of functions calls between
these two binaries, or with other libraries, like jp2.dll. Thus,
the harness generator needs to handle calls between the main
executable and a library, callbacks from a library to the main
executable, and calls between libraries. Our system focuses on
handling cases where the communication merely happens within
two components. To support more complicated invocations like
in Adobe Reader, we plan to improve our tracer and generator to
capture a complete trace of inter-module control- and data-flow.
False Positives.
Inaccurate harnesses may generate invalid
crashes or exceptions that do not occur in the original program.
As a result, WINNIE will mistakenly assume the presence of a
bug, leading to a false positive. As described in §IV-E, WINNIE
combats false positives by pre-verifying candidate harnesses
during synthesis. Still, eliminating false positives requires a
non-negligible effort. Since bug validation must be conducted
against the actual application, constructing a suitable input file
and interacting with the GUI is required. For example, when
fuzzing Adobe Reader’s image parser, end-to-end verification
requires creating a new PDF with the buggy image embedded,
and then opening the image via the GUI. This step can be
automated on a per-target basis, and it is mostly an engineering
effort. Nevertheless, as long as WINNIE can generate high-
quality harnesses, this validation incurs little overhead due to
the small number of false crashes.
Focus on Shared Libraries. WINNIE’s harness generator fo-
cuses testing shared libraries because shared libraries represent
a clear API boundary. Past harness generation work also focuses
on testing functions within libraries [8, 35]. Moreover, unlike
calls to exported functions in libraries, private functions in
the main executable are difficult to extract into independent
functions. To fuzz the main binary, we rely on our injected
fork-server, allowing any target address in the main binary to
be fuzzed.
Performance Versus Persistent Mode. We noticed that
WinAFL occasionally shows better performance on certain
target applications, typically simple ones. Upon investigation,
we found that the performance difference ultimately stems
from WinAFL’s strong assumptions about the target application.
Specifically, WinAFL assumes the harness will not change any
global state and will cleanly return back to the caller (§III-B).
Therefore, it only restores CPU registers and arguments each
loop iteration. Instead, WINNIE uses fork to comprehensively
preserve the entire initialized program state, which incurs a little
overhead. However, as shown in the evaluation, our conservative
design makes WINNIE support significantly more programs.
Although WinAFL performs better on simple programs, it could
not test even half of the programs in our evaluation (§VII-A).
Other input modes. In our evaluation, we focused on fuzzing
libraries which accept inputs from files or standard input.
Another common way programs accept input is through network
packets. WINNIE supports this case. To fuzz these network
applications, we extended WINNIE by implementing a de-
socket [13, 71] technique to redirect socket traffic to the fuzzer.
A. Future Work
Beyond this initial work towards practical Windows fuzzing,
we identify several directions for future improvement. Among
the following, we believe that handling structures and callback
functions is fundamentally challenging, whereas supporting
other ABIs or languages would be relatively straightforward.
Structures. Custom structures are challenging to both au-
tomatic testing tools and human researchers, and incorrect
structures may lead to program crashes. To mitigate this issue,
we could apply a memory pre-planning technique [66] to
provide probabilistic guarantees to avoid crashes. We could
also use memory breakpoints to trace the detailed memory
access patterns of the program and infer the structure layouts.
Callback functions. Callback functions in the main executable
make harness generation difficult. In our example Figure 3, we
reconstructed the callback function by copying decompiled code
from the main binary into the harness. For simple callbacks,
we could automatically add decompiled code to the harness.
For complicated cases, we could load the main binary and call
the functions directly, as copied code is not always reliable.
Support for Non-C ABIs. WINNIE focuses on C-style APIs,
and we did not investigate fuzzing programs with other ABIs.
In our experience during the evaluation, these libraries are rare
in practice. In the future, WINNIE can be extended to support
other native languages’ ABIs, like C++, Rust, or Go.
Bytecode languages and interpreted binaries. While
WINNIE supports most native applications, it does not support
applications compiled for a virtual machine (e.g.,
.NET,
Java). To support these binaries, specialized instrumentation
techniques [1] should be used to collect code coverage.
IX. RELATED WORK
WINNIE is closely related to recent work on fuzzing and
fuzzing harness generation. Fuzzing has evolved into a well-
known program testing and bug finding technique since it was
first introduced [42]. Various fuzzing techniques have been
proposed [22, 24, 33, 36, 53, 60, 67], developed [5, 11, 14,
16, 25, 26, 38, 39, 50, 69], and used to find a large number of
program bugs [12, 28, 52, 62, 69].
Windows Fuzzing. Although Windows fuzzing is restricted
by the many challenges discussed in this paper, there are still
many Windows fuzzer implementations. Black-box fuzzers
like Peach [16] excel at scalability due to their simplicity but
can only find shallow bugs. White-box fuzzers like Sage [24],
leverage symbolic execution to explore deeper paths but are
slow. Lastly, grey-box fuzzers like WinAFL [57], strike a good
balance by using coverage feedback. However, existing WinAFL
implementations suffer from unreliable persistent mode that
limits the applications it can support (§III-B). WINNIE is based
on WinAFL but uses a fork-server during execution, which
is far more robust. As a result, WINNIE can fuzz far more
programs than existing Windows fuzzers, as shown in §VII-A.
Fuzzing Harness Generation. Analyzing API usage patterns
to generate code snippets is not a new idea. Some tools are
primarily designed to help users understand an unfamiliar
library [45, 46, 72]. IMF [32] analyzes kernel API call
sequences recorded from the run trace to deduce API usage
patterns and uses that knowledge during fuzzing (e.g., the order
APIs should be called). Unlike past works which focus on static
analysis of source code [8, 19, 35, 73] or dynamic analysis [32],
WINNIE leverages hybrid analysis of run traces to extract code
sequences. We further discuss WINNIE’s differences in §II-B.
Partial Execution. There are several approaches to run code
fragments to discover bugs [23, 51]. MicroX and UC-KLEE
aim to run the code fragment under emulation and symbolic
execution respectively. Unlike prior works, WINNIE aims to
avoid heavy solutions that partially execute the program, such
as emulation (like MicroX), or symbolic execution (like UC-
KLEE). Also, WINNIE executes the target application under a
realistic context. For any crash, there is a concrete input that
helps reproduce the bug. UC-KLEE and MicroX execute it in
the middle and thus may trigger an unrealistic execution path.
X. CONCLUSION
We proposed WINNIE, an end-to-end system to support
fuzzing Windows applications. Instead of repeatedly running
the program directly, WINNIE synthesizes lightweight harnesses
to directly invoke interesting functions, bypassing GUI code. It
also features an implementation of fork on Windows to clone
processes efficiently. We tested WINNIE on 59 Windows closed-
source binaries. WINNIE discovered 3.9× more program states
and achieved 26.6× faster execution than existing Windows
fuzzers. Overall, WINNIE found 61 bugs from 32 binaries.
ACKNOWLEDGMENT
We thank the anonymous reviewers, and our shepherd,
Zhiyun Qian, for their helpful feedback. We are grateful to
Weihan Huang for his initial implementation of the tracer for
earlier versions of this paper. This research was supported,
in part, by the NSF awards CNS-1563848, CNS-1704701,
CRI-1629851 and CNS-1749711, ONR under grants N00014-
18-1-2662, N00014-15-1-2162, N00014-17-1-2895, DARPA
AIMEE under Agreement No. HR00112090034, and ETRI
IITP/KEIT [2014-3-00035], and gifts from Facebook, Mozilla,
Intel, VMware and Google.
13
REFERENCES
google/syzkaller.
[27] Google, “A New Chapter For OSS-Fuzz,” https://security.googleblog.
com/2018/11/a-new-chapter-for-oss-fuzz.html, 2018.
[28] Google, “Honggfuzz Found Bugs,” 2018, https://github.com/google/
honggfuzz#trophies.
[29] Google, “OSS-Fuzz - Continuous Fuzzing For Open Source Software,”
https://github.com/google/oss-fuzz, 2018.
[30] H. Gray, “Fuzzing Linux GUI/GTK Programs With American Fuzzy Lop
(AFL) For Fun And Pr... You Get the Idea.” https://blog.hyperiongray.
com/fuzzing-gtk-programs-with-american-fuzzy-lop-afl/.
[31] I. Guilfanov, “IDA Pro - Hex Rays,” https://www.hex-rays.com/products/
ida/, 2018.
[32] H. Han and S. K. Cha, “Imf: Inferred model-based fuzzer,” in Proceedings
of the 24th ACM Conference on Computer and Communications Security
(CCS), Dallas, TX, Oct.–Nov. 2017.
[33] C. Holler, K. Herzig, and A. Zeller, “Fuzzing With Code Fragments.” in
Proceedings of the 21st USENIX Security Symposium (Security), Bellevue,
WA, Aug. 2012.
[34] H. Hu, C. Qian, C. Yagemann, S. P. H. Chung, W. R. Harris, T. Kim,
and W. Lee, “Enforcing Unique Code Target Property for Control-Flow
Integrity,” in Proceedings of the 25th ACM Conference on Computer and
Communications Security (CCS), Toronto, Canada, Oct. 2018.
[35] K. K. Ispoglou, D. Austin, V. Mohan, and M. Payer, “FuzzGen: Automatic
the 29th USENIX Security
Fuzzer Generation,” in Proceedings of
Symposium (Security), Boston, MA, USA, Aug. 2020.
[36] S. Y. Kim, S. Lee, I. Yun, W. Xu, B. Lee, Y. Yun, and T. Kim, “CAB-Fuzz:
Practical Concolic Testing Techniques For COTS Operating Systems,” in
Proceedings of the 2017 USENIX Annual Technical Conference (ATC),
Santa Clara, CA, Jul. 2017.
[37] G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks, “Evaluating fuzz
testing,” in Proceedings of the 25th ACM Conference on Computer and
Communications Security (CCS), Toronto, Canada, Oct. 2018.
[38] Y. Li, B. Chen, M. Chandramohan, S.-W. Lin, Y. Liu, and A. Tiu, “Steelix:
Program-state Based Binary Fuzzing,” in Proceedings of the 11th Joint
Meeting on Foundations of Software Engineering, 2017.
[39] LLVM, “LibFuzzer - A Library For Coverage-guided Fuzz Testing,” 2017,
http://llvm.org/docs/LibFuzzer.html.
[40] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace,
V. J. Reddi, and K. Hazelwood, “Pin: building customized program
analysis tools with dynamic instrumentation,” in Acm sigplan notices,
vol. 40. ACM, 2005, pp. 190–200.
[41] Microsoft, “Frequently Asked Questions about Windows Subsystem for
Linux,” https://docs.microsoft.com/en-us/windows/wsl/faq, 2018.
[42] B. P. Miller, L. Fredriksen, and B. So, “An Empirical Study Of The
Reliability Of UNIX Utilities,” Commun. ACM, vol. 33, no. 12, pp. 32–44,
Dec. 1990.
[43] M. Miller, “Trends, Challenges, And Strategic Shifts
In The
Software Vulnerability Mitigation Landscape,” https://msrnd-cdn-
stor.azureedge.net/bluehat/bluehatil/2019/assets/doc/Trends,Challenges,
andStrategicShiftsintheSoftwareVulnerabilityMitigationLandscape.pdf,
2019, BlueHat IL.
[44] J. Min, “Using WinAFL To Fuzz Hangul(HWP) AppShield,” https://
sigpwn.io/blog/2018/1/29/using-winafl-to-fuzz-hangul-appshield, 2018.
[45] J. E. Montandon, H. Borges, D. Felix, and M. T. Valente, “Documenting
Apis With Examples: Lessons Learned With The Apiminer Platform,” in
2013 20th Working Conference on Reverse Engineering (WCRE).
IEEE,
2013, pp. 401–408.
[46] L. Moreno, G. Bavota, M. Di Penta, R. Oliveto, and A. Marcus, “How
Can I Use This Method?” in Proceedings of the 37th International
Conference on Software Engineering-Volume 1.
IEEE Press, 2015, pp.
880–890.
[47] S. Nagy and M. Hicks, “Full-speed Fuzzing: Reducing Fuzzing Overhead
Through Coverage-guided Tracing,” in Proceedings of the 40th IEEE
Symposium on Security and Privacy (Oakland), San Francisco, CA, May
2019.
[48] D. Palmer, “Top Ten Security Vulnerabilities Most Exploited By
Hackers,” https://www.zdnet.com/article/these-are-the-top-ten-security-
vulnerabilities-most-exploited-by-hackers-to-conduct-cyber-attacks/,
2019, zDNet.
[49] PaX Team, “PaX Address Space Layout Randomization (ASLR),” http:
//pax.grsecurity.net/docs/aslr.txt, 2003.
[50] H. Peng, Y. Shoshitaishvili, and M. Payer, “T-Fuzz: Fuzzing By Program
Transformation,” in Proceedings of the 39th IEEE Symposium on Security
and Privacy (Oakland), San Francisco, CA, May 2018.
[51] D. A. Ramos and D. Engler, “Under-constrained symbolic execution:
[1] 0xd4d, “.NET module/assembly reader/writer library,” https://github.com/
[2] N. S. Agency, “Ghidra Software Reverse Engineering Framework,” https:
0xd4d/dnlib, 2013.
//ghidra-sre.org/, 2019.
[3] Y. Alon and N. Ben-Simon, “50 CVEs In 50 Days: Fuzzing Adobe Reader,”
https://research.checkpoint.com/50-adobe-cves-in-50-days/, 2018.
[4] C. Aschermann, S. Schumilo, A. Abbasi, and T. Holz, “IJON: Exploring
Deep State Spaces via Fuzzing,” in Proceedings of the 41st IEEE
Symposium on Security and Privacy (Oakland), San Francisco, CA,
May 2020.
[5] C. Aschermann, S. Schumilo, T. Blazytko, R. Gawlik, and T. Holz,
“Redqueen: Fuzzing with input-to-state correspondence,” in Proceedings
of the 2019 Annual Network and Distributed System Security Symposium
(NDSS), San Diego, CA, Feb. 2019.
[6] C. authors, “Highlights of Cygwin Functionality,” https://cygwin.com/
cygwin-ug-net/highlights.html, 1996.
[7] AutoIt Consulting Ltd, “AutoIt Scripting Language,” https://www.
autoitscript.com/site/autoit/, 2019.
[8] D. Babi´c, S. Bucur, Y. Chen, F. Ivanˇci´c, T. King, M. Kusano, C. Lemieux,
L. Szekeres, and W. Wang, “FUDGE: Fuzz Driver Generation At Scale,”
in Proceedings of the 2019 27th ACM Joint Meeting on European Software
Engineering Conference and Symposium on the Foundations of Software
Engineering. ACM, 2019, pp. 975–985.
[9] M. Böhme, V.-T. Pham, and A. Roychoudhury, “Coverage-based Greybox
Fuzzing As Markov Chain,” in Proceedings of the 23rd ACM Conference
on Computer and Communications Security (CCS), Vienna, Austria, Oct.
2016.
[10] Brian Krebs, “The Scrap Value of a Hacked PC,” https://krebsonsecurity.
com/2012/10/the-scrap-value-of-a-hacked-pc-revisited/, 2012.
[11] CENSUS, “Choronzon - An Evolutionary Knowledge-based Fuzzer,”
2015, zeroNights Conference.
[12] O. Chang, A. Arya, and J. Armour, “OSS-Fuzz: Five Months Later, And
Rewarding Projects,” 2018, https://security.googleblog.com/2017/05/oss-
fuzz-five-months-later-and.html.
[13] J. Chen, W. Diao, Q. Zhao, C. Zuo, Z. Lin, X. Wang, W. C. Lau, M. Sun,
R. Yang, and K. Zhang, “Iotfuzzer: Discovering memory corruptions
in iot through app-based fuzzing.” in Proceedings of the 2018 Annual
Network and Distributed System Security Symposium (NDSS), San Diego,
CA, Feb. 2018.
[14] P. Chen and H. Chen, “Angora: Efficient Fuzzing By Principled Search,”
in Proceedings of the 39th IEEE Symposium on Security and Privacy
(Oakland), San Francisco, CA, May 2018.
[15] Dmytro Oleksiuk, “fork() for Windows,” https://gist.github.com/Cr4sh/
126d844c28a7fbfd25c6, 2016.
The Most
[16] M. Eddington, “Peach Fuzzing Platform,” Peach Fuzzer, p. 34, 2011.
[17] Emma Woollacott,
“Windows Of Opportunity: Microsoft
For Hackers,”
OS Remains
https://portswigger.net/daily-swig/windows-of-opportunity-microsoft-
os-remains-the-most-lucrative-target-for-hackers, 2018, The Daily Swig.
[18] A. Fiscutean, “Microsoft Office Now The Most Targeted Platform, As
Browser Security Improves,” https://www.csoonline.com/article/3390221/
microsoft-office-now-the-most-targeted-platform-as-browser-security-
improves.html, 2019, cSO.
Lucrative
Target
[19] J. Fowkes and C. Sutton, “Parameter-free Probabilistic API Mining Across
GitHub,” in Proceedings of the 2016 24th ACM SIGSOFT International
Symposium on Foundations of Software Engineering. ACM, 2016, pp.
254–265.
[20] R.
Freingruber,
“Fuzzing
Closed
Source
Applications,”
https://def.camp/wp-content/uploads/dc2017/Day1_Rene_Fuzzing_
closed_source_applications_DefCamp.pdf, 2017.
[21] R. Freingruber, “Hack The Hacker: Fuzzing Mimikatz On Windows
With Winafl & Heatmaps,” https://sec-consult.com/en/blog/2017/09/hack-
the-hacker-fuzzing-mimikatz-on-windows-with-winafl-heatmaps-0day/,
2017.
[22] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen, “CollAFL:
Path Sensitive Fuzzing,” in Proceedings of the 39th IEEE Symposium on
Security and Privacy (Oakland), San Francisco, CA, May 2018.
[23] P. Godefroid, “Micro execution,” in Proceedings of the 36th International
Conference on Software Engineering, 2014, pp. 539–549.
[24] P. Godefroid, M. Y. Levin, and D. Molnar, “Automated Whitebox Fuzz
Testing,” in Proceedings of the 15th Annual Network and Distributed
System Security Symposium (NDSS), San Diego, CA, Feb. 2008.
[25] Google, “Honggfuzz,” 2016, https://google.github.io/honggfuzz/.
[26] Google, “Syzkaller - Linux Syscall Fuzzer,” 2016, https://github.com/
14
com/google/syzkaller/blob/master/docs/linux/found_bugs.md.
[63] XnSoft, “Supported file formats in XnView,” https://www.xnview.com/
en/xnviewmp/#formats, 2019.
[64] XnSoft, “XnView Image Viewer,” https://www.xnview.com/en/, 2020.
[65] W. Xu, S. Kashyap, C. Min, and T. Kim, “Designing New Operating
Primitives to Improve Fuzzing Performance,” in Proceedings of the 24th
ACM Conference on Computer and Communications Security (CCS),
Dallas, TX, Oct.–Nov. 2017.
[66] W. You, Z. Zhang, Y. Kwon, Y. Aafer, F. Peng, Y. Shi, C. Harmon,
and X. Zhang, “Pmp: Cost-effective forced execution with probabilistic
memory pre-planning,” in Proceedings of the 41st IEEE Symposium on
Security and Privacy (Oakland), San Francisco, CA, May 2020.
[67] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM: A Practical Concolic
Execution Engine Tailored for Hybrid Fuzzing,” in Proceedings of the
27th USENIX Security Symposium (Security), Baltimore, MD, Aug. 2018.
[68] M. Zalewski, “New In AFL: Persistent Mode,” 2015, https://lcamtuf.
blogspot.com/2015/06/new-in-afl-persistent-mode.html.
[69] M. Zalewski, “American Fuzzy Lop (2.52b),” 2018, http://lcamtuf.
coredump.cx/afl/.
[70] M. Zalewski, “Fuzzing Random Programs Without Execve(),” https:
//lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html,
2019.
[71] Y. Zheng, A. Davanian, H. Yin, C. Song, H. Zhu, and L. Sun, “Firm-afl:
high-throughput greybox fuzzing of iot firmware via augmented process
emulation,” in Proceedings of the 28th USENIX Security Symposium
(Security), Santa Clara, CA, USA, Aug. 2019.
[72] H. Zhong, T. Xie, L. Zhang, J. Pei, and H. Mei, “MAPO: Mining And
Recommending API Usage Patterns,” in European Conference on Object-
Oriented Programming. Springer, 2009, pp. 318–343.
[73] Z. Zhu, Y. Zou, B. Xie, Y. Jin, Z. Lin, and L. Zhang, “Mining Api Usage
Examples From Test Code,” in 2014 IEEE International Conference on
Software Maintenance and Evolution.
IEEE, 2014, pp. 301–310.
Correctness checking for real code,” in Proceedings of the 24th USENIX