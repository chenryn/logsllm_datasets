粗略地看一下，这些是可以改进的显而易见的事情，影响是什么，可能的缓解措施是什么:
*   数据库没有身份验证
    *   **级**:安全，冲击力很高
    *   **缓解**:私有云或使用认证
*   数据库数据存储在 Docker 容器中(如果容器丢失，数据也会丢失)
    *   **级**:稳定性，临界冲击
    *   **缓解**:装载的卷和/或分片和集群
*   硬核端点
    *   **级** : Ops，非常高的冲击力
    *   **缓解**:服务发现(我们将在后面的章节中介绍)
*   应用服务器假设它是唯一一个改变单词列表的服务器
    *   **级**:缩放，非常高的冲击力
    *   **缓解**:刷新每次页面加载的数据
*   应用服务器需要容器启动时的数据库
    *   **级**:缩放/操作，中等冲击力
    *   **缓解**:延迟加载，直到页面被点击和/或显示数据库不可用的消息
*   Web 服务器身份验证被烘焙到映像中
    *   **级**:安全，临界影响
    *   **缓解**:运行时添加凭证
*   网络服务器认证是通过 HTTP
    *   **级**:安全，冲击力很高
    *   **缓解**:使用 HTTPS 和/或 OAuth
# 解决关键问题
由于我们还处于 Docker 旅程的早期阶段，我们现在将只讨论一些最关键问题的变通方法，如下所示:
*   数据库数据存储在 Docker 容器中(如果容器丢失，数据也会丢失)。
*   Web 服务器身份验证被烘焙到映像中。
# 使用本地卷
第一个问题是一个非常严重的问题，因为我们所有的数据目前都绑定在我们的容器上，所以如果数据库应用停止，您必须重新启动同一个容器才能取回数据。在这种情况下，如果容器运行时带有`--rm`标志，并且停止或终止，所有与之相关的数据都会消失，这肯定不是我们想要的。虽然针对这个问题的大规模解决方案是针对我们的级别使用分片、集群和/或持久卷来完成的，但是我们只需将数据卷装载到我们希望将数据直接保存到容器中的位置就可以了。如果容器发生任何情况，这应该会将数据保留在主机文件系统上，如果需要，可以进一步备份或移动到其他地方。
如果我们的卷是存储在 Docker 内部的命名卷，当我们启动它时，将目录装入(有时称为映射)到容器中的过程实际上相对容易做到:
```
$ docker run --rm -d -v local_storage:/data/db -p 27000:27017 database
```
这将在 Docker 的本地存储中创建一个名为`local_storage`的命名卷，该卷将无缝地安装在容器中的`/data/db`上(MongoDB 映像在 Docker Hub 的映像中存储其数据的地方)。如果容器死亡或发生任何意外，您可以将此卷装入不同的容器并保留数据。
`-v` , `--volume` , and using a named volume are not the only ways to create volumes for Docker containers. We will cover the reasons why we use this syntax as opposed to other options (that is, `--mount`) in more detail in [Chapter 5](5.html), *Keeping the Data Persistent,* which specifically deals with volumes.
让我们来看看实际情况(这可能需要在您的主机上安装一个 MongoDB 客户端 CLI):
```
$ # Start our container
$ docker run --rm \
             -d \
             -v local_storage:/data/db \
             -p 27000:27017 \
             database
16c72859da1b6f5fbe75aa735b539303c5c14442d8b64b733eca257dc31a2722
$ # Insert a test record in test_db/coll1 as { "item": "value" }
$ mongo localhost:27000
MongoDB shell version: 2.6.10
connecting to: localhost:27000/test
> use test_db
switched to db test_db
 > db.createCollection("coll1")
{ "ok" : 1 }
 > db.coll1.insert({"item": "value"})
WriteResult({ "nInserted" : 1 })
 > exit
bye
$ # Stop the container. The --rm flag will remove it.
$ docker stop 16c72859
16c72859
$ # See what volumes we have
$ docker volume ls
DRIVER              VOLUME NAME
local               local_storage
$ # Run a new container with the volume we saved data onto
$ docker run --rm \
             -d \
             -v local_storage:/data/db \
             -p 27000:27017 \
             database
a5ef005ab9426614d044cc224258fe3f8d63228dd71dee65c188f1a10594b356
$ # Check if we have our records saved
$ mongo localhost:27000
MongoDB shell version: 2.6.10
connecting to: localhost:27000/test
> use test_db
switched to db test_db
 > db.coll1.find()
{ "_id" : ObjectId("599cc7010a367b3ad1668078"), "item" : "value" }
 > exit
$ # Cleanup
$ docker stop a5ef005a
a5ef005a
```
如您所见，我们的记录通过原始容器的销毁得以保留，这正是我们想要的！我们将在后面的章节中介绍如何以其他方式处理卷，但这应该足以让我们在我们的小服务中处理这个关键问题。
# 运行时生成凭据
与数据库问题不同，这个特殊的问题并不容易处理，主要是因为从安全角度来看，凭据是一个很难处理的问题。如果包含一个构建参数或一个预定义的环境变量，任何能够访问该映像的人都可以读取它。此外，如果您在容器创建期间通过环境变量传递凭据，任何具有 docker CLI 访问权限的人都可以读取它，因此您最多只能将带有凭据的卷装载到容器中。
There are a few other ways of passing credentials securely, though they are a bit outside of the scope of this exercise such as env variables that contain hashed passwords, using a broker secrets-sharing service, using cloud-specific roles mechanisms (that is, AWS, IAM Role, `user-data`), and a few others, but the important part for this section is to understand which things you should try not to do when handling authentication data.
为了解决这个问题，我们将在主机上本地生成自己的凭据文件，并在启动时将其装载到容器中。用您想要的用户名替换`user123`，用字母数字密码替换`password123`:
```
$ printf "user123:$(openssl passwd -1 password123)\n" >> ~/test_htpasswd
$ # Start the web_server with our password as the credentials source
$ docker run --rm \
             -v $HOME/test_htpasswd:/srv/www/html/.htpasswd \
             -p 8080:80 web_server
1b96c35269dadb1ac98ea711eec4ea670ad7878a933745678f4385d57e96224a
```
有了这个小小的改变，你的 web 服务器现在将被新的用户名和新的密码保护起来，这个配置也不会被能够运行 docker 命令的人使用。您可以访问 [http://127.0.0.1:8080](http://127.0.0.1:8080) 查看新的用户名和密码是唯一有效的凭据。
# 介绍 Docker 网络
在前面，我们已经稍微浏览了一下我们在`web_server`代码中对 IP `172.17.0.1`的使用，这是一个在其他材料中没有很好覆盖的东西，但是如果你想对 Docker 有一个坚实的理解，这是一个*非常*重要的事情。当 Docker 服务在机器上启动时，许多联网`iptables`规则被添加到您的机器上，以便允许容器通过转发连接到世界，反之亦然。实际上，您的机器成为所有容器启动的互联网路由器。除此之外，每个新容器都被分配了一个虚拟地址(很可能在`172.17.0.2` +)并且它所做的任何通信通常对其他容器都是不可见的，除非创建了一个软件定义的网络，所以在同一台机器上连接多个容器实际上是一项非常棘手的任务，需要手动完成，而不需要名为**服务发现**的 Docker 基础设施中的助手软件。
由于我们现在不想要这个服务发现的开销(我们将在后面更深入地讨论)，并且我们不能使用`localhost` / `127.0.0.1` / `::1`，这根本不会起作用，我们需要给它 Docker 虚拟路由器 IP(几乎总是`172.17.0.1`)，以便它会找到我们的实际机器，其他容器端口已经绑定在那里。
Please note that large parts of this next section do not work on macOS nor Windows machines due to the way their networking stack is implemented for Docker. For those systems, I would suggest that you use an Ubuntu virtual machine to follow along.
如果您想验证这一点，我们可以在 Docker 的内部和外部使用一些命令，以便真正看到正在发生的事情:
```
$ # Host's iptables. If you have running containers, DOCKER chain wouldn't be empty.
$ sudo iptables -L
Chain FORWARD (policy DROP)
target     prot opt source               destination 
DOCKER-ISOLATION  all  --  anywhere             anywhere 
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
Chain DOCKER (1 references)
target     prot opt source               destination 
Chain DOCKER-ISOLATION (1 references)
target     prot opt source               destination 
RETURN     all  --  anywhere             anywhere 
$ # Host's network addresses is 172.17.0.1
$ ip addr
5: docker0:  mtu 1500 qdisc noqueue state UP group default 
 link/ether 02:42:3c:3a:77:c1 brd ff:ff:ff:ff:ff:ff
 inet 172.17.0.1/16 scope global docker0
 valid_lft forever preferred_lft forever
 inet6 fe80::42:3cff:fe3a:77c1/64 scope link 
 valid_lft forever preferred_lft forever
$ # Get container's network addresses
$ docker run --rm \
             -it \
             web_server /bin/bash
 root@08b6521702ef:/# # Install pre-requisite (iproute2) package
root@08b6521702ef:/# apt-get update && apt-get install -y iproute2
 root@08b6521702ef:/# # Check the container internal address (172.17.0.2)
root@08b6521702ef:/# ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
 inet 127.0.0.1/8 scope host lo
 valid_lft forever preferred_lft forever
722: eth0@if723:  mtu 1500 qdisc noqueue state UP group default 
 link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
 inet 172.17.0.2/16 scope global eth0
 valid_lft forever preferred_lft forever
 root@08b6521702ef:/# # Verify that our main route is through our host at 172.17.0.1
root@08b6521702ef:/# ip route
default via 172.17.0.1 dev eth0
172.17.0.0/16 dev eth0 proto kernel scope link src 172.17.0.2
 root@08b6521702ef:/# exit
```
正如你所看到的，这个系统有点奇怪，但它运行得很好。一般来说，当构建更大的系统时，服务发现实际上是强制性的，因此您不必担心这一领域中如此低级的细节。
# 摘要
在这一章中，我们介绍了如何构建多个容器，以构成一个由 web 服务器、应用服务器和数据库组成的基本服务，同时启动多个容器，并通过网络将它们联系在一起。我们还研究了连接服务时最常见的问题以及这些基本构件的常见缺陷。还提供了一些关于未来主题的提示(卷、服务发现、凭据传递等)，但我们将在后面的章节中深入讨论这些内容。在下一章中，我们将把我们的小服务变成一个具有水平扩展组件的健壮服务。