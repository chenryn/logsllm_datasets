# Title: Making Secure TCP Connections Resistant to Server Failures

## Authors:
- Hailin Wu
- Andrew Burt
- Ramki Thurimella

### Affiliation:
Department of Computer Science  
University of Denver  
Denver, CO 80208, USA  
Email: {hwu, aburt, ramki}@cs.du.edu

## Abstract
This paper presents methods to enhance the resilience of secure, long-running TCP-based connections by migrating them to backup servers in the event of server failures. This approach mitigates the impact of attacks or accidental server outages, and is transparent to the client. The proposed techniques can be integrated into existing infrastructure without requiring changes to the TCP/IP protocol or client systems. The result is a drop-in solution that significantly improves the robustness of secure network connections, such as those using the Secure Shell (SSH) protocol. Given the widespread use of TCP-based user agent software, our methods offer an immediate way to enhance reliability and resistance to attacks, without waiting for clients to upgrade their software. We demonstrate the practical viability of our approach by detailing a system we have built that meets these requirements.

## 1. Introduction
The Transmission Control Protocol (TCP) is not inherently secure and cannot withstand server failures due to malicious attacks, system crashes, or hardware failures. However, modern information assurance requirements demand the construction of software, networks, and servers that are resilient to such issues. While individual connections can be secured against eavesdropping or alteration using protocols like SSH, the server providing these services remains a single point of failure. This vulnerability is a consequence of TCP's original design, which assumes that connections should be terminated if either endpoint is lost. Additionally, TCP lacks mechanisms for migrating connections, making any secure software built on top of it vulnerable to server failures.

Combining TCP with encryption protocols like SSH or SSL addresses general security deficiencies but does not solve the problem of server resilience. In this paper, we extend these methods to increase the resiliency of secure connections in the face of server failures. Specifically, we show practical ways to migrate active SSH connections to backup servers without requiring any changes to client-side software, including application software, operating systems, or network stacks. These techniques are general and can be applied to other secure connection types, such as SSL, which is our next research goal.

Recently, the authors [4] presented Jeebs, a system that migrates open TCP connections in a client-transparent manner. Jeebs has been demonstrated to recover TCP sessions from various combinations of Linux/Windows clients and servers. The results in this paper extend Jeebs to handle secure connections, which the original implementation could not manage due to the nature of their security. Our implementation, SecureJeebs, involves simple, modular, and secure extensions to SSH software, along with a "black box" on the server's subnet to monitor and recover TCP connections.

While significant progress has been made in providing redundancy for network components like load balancing switches and routers, and in proprietary applications such as database servers, a key missing component in end-to-end fault tolerance has been the inability to migrate open TCP connections across server failures. Although neither these products nor SecureJeebs provide reliability in the event of a catastrophic failure affecting the entire cluster, SecureJeebs eliminates servers as a single point of failure. Unlike load balancing and other techniques, SecureJeebs transparently and securely migrates in-progress secure connections, allowing it to be used not only to enhance the reliability of unreliable servers but also to take production servers offline for scheduled maintenance without disrupting existing connections.

Following an overview in Section 2 and a discussion of related work in Section 3, we describe the necessary background in Section 4 and present our techniques and the architecture of Jeebs in Section 5. We provide a performance analysis in Section 6 and concluding remarks in Section 7.

## 2. Overview

### 2.1. Migration
Recovering TCP sessions that are about to abort due to server loss requires two components: (1) a monitor to record pertinent information about existing connections and detect imminent failures, and (2) a recovery system to perform emergency reconnection to a new server. Each component is briefly described below.

#### Monitor
The monitor logs traffic from the server host it is watching, recording unacknowledged data and any prior data required for recovery. It also monitors the health of each connection to detect imminent failures. Health monitoring and server crash detection use standard techniques [3, 6, 12]. SecureJeebs is installed on the server’s subnet to monitor and recover connections, currently limited to recovering local server crashes. Packets are logged at the TCP level by a sniffer, with potential packet loss mitigated as described in [4].

#### Recovery System
The recovery system takes over the IP number of the designated server and initiates the recovery of each connection. Connection state is restored using per-service recovery procedures. There are three styles of recovery: Standalone, Integrated, and Proxy. In the Standalone method, a new piece of software is written to handle in-progress connections. In the Integrated method, the existing service daemon on the recovery system is modified to adopt stranded connections. In the Proxy method, a small, programmable daemon interposes itself between the client and a backup copy of the original service daemon, replaying the necessary parts of the original connection to bring the new server up to the point where the original server failed, then acting in a pass-through mode while the new server finishes the connection.

### 2.2. Preserving Security
A legitimate concern is whether modifications to a secure protocol like SSH weaken its security. We argue that the methods proposed here do not compromise the original security. The changes we make are client-transparent and consistent with the regular operation of SSH. The main changes are to the key exchange phase on the server side, where we export several entities so that the recovery server can recreate the original session. These entities include the client’s payload of the SSH_MSG_KEXINIT message, prime p, generator g, server’s exchange value f, and its host key. The export operation is independent of the regular behavior of the SSH server and does not interfere with normal packet exchange.

All exported entities, including the last block of ciphertext and message sequence number, are encrypted using the recovery server’s public host key. A message digest is appended for integrity checks, and non-repudiation is provided by signing the message digest with the original server’s private key. These measures ensure that only the recovery server can decrypt the quantities, verifying that they are from the original server and have not been tampered with during the export/import process. Access control is in place to ensure that only authorized recovery servers can perform the migration.

---

This revised version aims to improve clarity, coherence, and professionalism, while maintaining the technical depth and accuracy of the original text.