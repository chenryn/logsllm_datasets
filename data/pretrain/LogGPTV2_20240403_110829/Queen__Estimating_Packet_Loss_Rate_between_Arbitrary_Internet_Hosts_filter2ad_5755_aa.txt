title:Queen: Estimating Packet Loss Rate between Arbitrary Internet Hosts
author:Angela Wang and
Cheng Huang and
Jin Li and
Keith W. Ross
Queen: Estimating Packet Loss Rate
between Arbitrary Internet Hosts
Y. Angela Wang1, Cheng Huang2, Jin Li2, and Keith W. Ross1
1 Polytechnic Institute of NYU, Brooklyn, NY 11201, USA
2 Microsoft Research, Redmond, WA 98052, USA
Abstract. Estimate of packet-loss rates between arbitrary Internet
hosts is critical for many large-scale distributed applications, including
overlay routing, P2P media streaming, VoIP, and edge-server location
in CDNs. iPlane has been recently proposed to estimate delay, packet-
loss rates, and bandwidth between arbitrary hosts [1]. To our knowledge,
iPlane is the only published technique for estimating loss rates between
arbitrary Internet hosts. In this paper, we present Queen, a new method-
ology for estimating packet-loss rates between arbitrary hosts. Queen, ex-
tending the King [2] methodology for estimating delay, takes advantage
of the open recursive DNS name servers. Queen requires neither addi-
tional infrastructure deployment nor control of the DNS recursive servers.
After describing the methodology, we present an extensive measurement
validation of Queen’s accuracy. Our validation shows that Queen’s accu-
racy is reasonably high and, in particular, signiﬁcantly better than that
of iPlane for packet-loss rate estimation.
Keywords: Recursive DNS, Retransmission Pattern, Loss Rate.
1 Introduction
End-to-end packet loss-rate and delay are fundamental network metrics, both of
which impact the performance of network applications. Estimate of delay and
packet-loss rate between arbitrary Internet hosts is critical for many large-scale
distributed applications, including overlay routing, P2P media streaming, VoIP,
and edge-server location in CDNs. Applications can measure latency and loss rate
by passive monitor or active probe. For example, Akamai’s EdgePlatform [3], de-
ployed in 70 countries, continually monitors Internet traﬃc, trouble spots, and
overall network conditions. Ensuring high-quality service to its customers, this
monitoring is an indispensable component of Akamai. RON [4] measures latency
and loss rate continuously, and switches overlay paths accordingly. However, ac-
tive probing often requires control of at least one end of the path, which imposes
a signiﬁcant coverage limitation. In academia, researchers are generally limited
to paths imposed by the PlanetLab platform. Due to deployment and mainte-
nance costs, large commercial entities are limited to modest-scale deployments
of measurement platforms; for example, Keynote’s platform is only available in
240 locations [8]. To overcome these limitations, several schemes have been de-
veloped to provide delay estimates without access to either end of an Internet
S.B. Moon et al. (Eds.): PAM 2009, LNCS 5448, pp. 57–66, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009
58
Y.A. Wang et al.
path. King [2] leverages DNS infrastructure to measure latency between arbi-
trary end hosts. Network coordinate systems construct virtual coordinate spaces
from limited latency measurements, and then make latency predictions based on
the virtual coordinates [7,9,10]. Azureus builds one of such latency estimation
scheme into its production P2P client [10], in order to make better peer selection.
Although there is signiﬁcant research on delay estimation between arbitrary
end hosts, there has been relatively little work on packet-loss rate. To our knowl-
edge, the only existing published methodology for estimating packet-loss rates
between arbitrary end-hosts is iPlane [1], which also measures other metrics. It
predicts the loss rate between arbitrary hosts by composing the performance of
measured segments of Internet paths. In this paper, we present Queen, a new
methodology for estimating packet-loss rates between arbitrary hosts. Queen
requires neither additional infrastructure deployment nor control of end hosts.
Queen builds upon the well-known latency measure tool King [2]. Queen ap-
proximates packet loss rates between arbitrary hosts by ﬁnding two DNS servers
near them and determining the packet loss rates between these two DNS servers.
However, although Queen gets its initial inspiration from King, it is nevertheless
very diﬀerent – its design has required a deep understanding of how currently
deployed DNS servers operate. In particular, we have discovered that all DNS
servers are conﬁgured with highly regular retransmission mechanisms, allowing
packet loss to be inferred from observed excessive latencies. Because the gap
in DNS retransmissions is large and regular, Queen is accurate even though
latencies can vary wildly between end systems over short period of time.
The contribution of this paper is as follows: (i): We develop a new methodol-
ogy that estimates packet loss rate between arbitrary Internet end hosts without
control on either end. We ﬁrst characterize the retransmission behavior of de-
ployed DNS servers; we then propose a loss-rate formula based on this behavior.
(ii): Based on the methodology, we develop a tool, Queen, which is made public
at http://cis.poly.edu/∼angelawang/projects/lossrate.htm. (iii): We conduct exten-
sive measurements to validate the accuracy of Queen. In particular, we show
that Queen is more accurate than iPlane for estimating packet-loss rates. (iv):
As a case study, we perform an Internet-wide packet-loss rate measurement. The
results are informative and can also provide realistic Internet characteristics to
other platforms, such as Emulab [11].
The rest of the paper is organized as follows. In Section 2, we brieﬂy review
how King works, then we present the design of Queen in Section 3 and evaluate
its accuracy in Section 4. In Section 5, we present an Internet-wide experiment
result. Afterwards, we present related work and conclusion in Section 6 and 7.
2 Brief Review of King
King, developed by Gummadi et al. [2], is a methodology to estimate latency
between arbitrary Internet hosts. They propose a simple version that requires no
external setup and a somewhat more complex one with much improved accuracy
and additional setup. We only review the latter version for this work.
Queen: Estimating Packet Loss Rate between Arbitrary Internet Hosts
59
To measure the latency between arbitrary end hosts A and B, King (i) ﬁnds
DNS name servers that are topologically close to A and B (say R and T, respec-
tively); (ii) estimates the latency between the two DNS name servers R and T
using DNS queries; and (iii) uses the measured latency between R and T as an
estimate of the latency between A and B (see Figure 1).
R :  open recursive DNS
server
6
2
A
4
8
3
1
5
S 1: our DNS server
Domain: queen.net
M: Measurement client
T: target
DNS server
7
1 NS ?T.queen.net
2 Same as 1
3 NS :ns.T.queen.net, Addr: T
4 Same as
3
5  A? xx.T.queen.net
6 Same as 5
7   Error/points to root server
8 Same as 7
B
c
a
c
h
i
n
g
m
e
a
s
u
r
e
m
e
n
t
Fig. 1. King measures the latency between R and T by tricking R to directly query T
The key step is to estimate the latency between R and T. This requires at
least one of the servers to be an open recursive DNS server, that is, a DNS server
allowing recursive DNS queries from arbitrary Internet hosts. Henceforth, assume
that R is such an open recursive server. The important issue is how to “trick” R
to send DNS queries directly to T in order to measure the latency between them.
The key idea is: (i) ﬁrst trick R into believing that T is the authoritative name
server for a special domain; and (ii) then query R for a host in this domain,
which will trigger R to forward the DNS query directly to T. We refer to steps
(i) and (ii) as the caching and measurement stages, respectively.
For the caching stage, we need operate an authoritative DNS server (call it
S1) for a special domain (say queen.net). A measurement client M (arbitrary)
sends to R a recursive NS type query containing encoded T’s IP address for
a sub-domain (say t.queen.net), which will ultimately be answered by S1, the
authoritative DNS server for domain queen.net. S1 is programmed to reply that
T is the authoritative DNS server for sub-domain t.queen.net, and this reply will
be cached at R. This completes the caching stage. From this point on, any subse-
quent recursive query through R for a host belonging to sub-domain t.queen.net
will be forwarded to T directly. Since T is actually not the authoritative name
server for this sub-domain, it will return an error message (or a pointer to the
root DNS servers). R will in turn report query failure to M. Thus, R is tricked
into querying T directly, and the latency between them can be estimated.
3 Methodology
DNS queries are transmitted using UDP by default. An interesting question is:
What happens if there is packets lost (either query or response) between the two
representative name servers R and T? This leads us to a new methodology for
estimating packet-loss rates between arbitrary Internet end hosts.
60
Y.A. Wang et al.
3.1 Retransmission Pattern
When a DNS server sends a query to another DNS server, either the query or the
response could get lost along the path. All DNS servers have built-in mechanism
to deal with such losses. In either case, if the querying name server does not
receive response within a certain period of time, it will resend the query until
a retry limit is reached. Intuitively, intervals between retransmissions in most
DNS servers should be substantially larger than RTT of most paths. We now
conﬁrm this intuition by studying the retransmission patterns of DNS servers.
Architecture. To dig a DNS server’s retransmission pattern, we force the server
to resend queries until its retry limit exhausted. Fig. 2(a) shows our architecture.
We operate two name servers, S1 and S2, which are conﬁgured as: 1) S1 is
the authoritative name server for domain queen.net, and delegates sub-domain
poly.queen.net to S2; 2) S2 runs as a simple DNS black hole, which only records
the received time of all incoming queries but does not reply to any query. When
client M sends to R a recursive DNS query for a host (say host.poly.queen.net)
in the sub-domain, R will be redirected to S2 after ﬁrst contacting S1. Since S2
never replies, R will resend the query until exhausting its retry limit. We encode
R’s IP address inside the query (together with a unique identiﬁer), so that S2
can easily extract the address, as well as match queries. Finally, we collect the
timestamps of all queries from each R, and calculate the retransmission pattern.
R: open recursive DNS server
2
4
1
1   A? xx.poly.queen.net
2   NS? xx.poly.queen.net
3   NS: xx.poly.queen.net,Addr: S2
4   Same as  1
3
M: Measurementc lient
S2: our DNS server
domain: poly.queen.net
S1: our DNS server
domain: queen.net
(a) Method to measure a name server’s
retransmission pattern
(b) Most Common Retransmis-
sion Patterns of DNSs
Fig. 2. Retransmission pattern measurement
Experiment. We setup an experiment to discover the retransmission patterns
of ∼30,000 DNS servers picked from a large list of unique open recursive DNS
servers with wide coverage, obtained in our previous study [6]. Those servers
cover 6 continents and 147 countries. For each name server R, we send a unique
recursive query from our measurement client M. The retry at M is set to 0 to
ensure that exactly one query is sent to each R and all the duplicate queries
recorded at S2 are generated solely by R. We found that there are small number
of common retransmission patterns among DNS servers, showed in Fig. 2(b).
Those patterns cover 93.5% measured servers. As an example, pattern 2-2-8-16
means the server will retry 4 times, 1st after 2 seconds timeout, 2nd after another
2 seconds timeout, 3rd after another 8 seconds, and 4th after another 16 seconds.
Furthermore, about 94% servers will wait at least 2 seconds before retry.
Queen: Estimating Packet Loss Rate between Arbitrary Internet Hosts
61
3.2 Loss Rate Estimation
We are now ready to describe how to infer packet losses from large latencies,
and how to estimate the packet-loss rate.
Packet Loss Deﬁnition. We will use an example to explain how to infer packet
losses from large latencies. In Fig. 3, we measure the latency between two name
servers R (in S. Africa) and T (in Seattle) using DNS queries with exponential
inter-arrival time, where the average is 200ms and their associated counting
process is Poisson, over a 15-minute duration. Here, R is an open recursive name
server with retransmission pattern 2-2-8-16s. We can see most latencies fall into
a range (490-500ms) – the regular RTTs between R and T. However, there are
some latencies far larger than the regular ones. We infer that these large latencies
correspond to packet losses. Speciﬁcally, we compute a latency threshold based
on R’s retransmission pattern. Because the regular RTT is about 500ms and R
sends out its ﬁrst retransmission after 2 seconds if there is no response, we set
the threshold to be 500ms+2s. Thus, any latency around 2500ms implies one
packet loss between R and T, either on forward path or reverse path. Similarly,
any latency around 500ms+2s+2s implies two packet losses, and so on.
2500
2000
1500
1000
500
)
s
m
(
y
c
n
e
t
a
L
0
0
1000
2000
Probe ID
3000
4000
Fig. 3. Packet Loss Example
Loss Rate Computation. Now we know whether there is a packet loss from the
measured latency. Next is how to compute the packet loss rate exactly. Suppose
we send out N total queries, where M queries receive response and obtain the
latencies, while the other (N − M) queries have failed (without responses). To
compute the total number of lost packets, we consider those M queries only (the
reason to be explained later). With the loss deﬁnition in previous section, we
can infer how many queries (say L out of M) have excessive latencies, as well
as the total number of retransmission packets L(cid:3) (clearly, L(cid:3) ≥ L). Then, the
packet loss rate is simply calculated as L(cid:3)/(M + L(cid:3)).
So far, we have presented our methodology to estimate the packet-loss rate
from excessive DNS query latencies. However, what’s the eﬀect if packets get
lost between M and R, or R and S1 in Fig 1? The facts are: 1) if the packet is
lost between M and R, no matter forward or reverse, M will not receive response
at all. This is exactly the reason to exclude those failed queries when computing
62
Y.A. Wang et al.
the loss rate; 2) Packet losses between R and S1 will be automatically taken care
of by R’s retransmission mechanism. In addition, it happens during the caching
stage, so the excessive latency here will not aﬀect the measurement stage at all.
Thus, the losses inferred in our method will only be the losses between R and T.
Another potential problem is, when T returns an error to R, depending on its
conﬁguration, R may have two other outlier actions: 1) It may retransmit the
same query several times. In this case, even without packet loss, the estimated
latency will be a factor of K larger, where K is the number of retransmissions.
It will introduce noise to the real loss. 2) Alternatively, it may stop forwarding
further queries for the same sub-domain to T. If so, R will not contact T directly
any more after an error, which causes the algorithm to fail. Fortunately, we can
easily point our own DNS server as T and send trial DNS queries to examine
all open recursive DNS servers (R’s). By parsing the query logs on our own
DNS server, we can identify which R’s behave as outliers and simply ﬁlter them
out in future measurements. Based on our observation, there are only few such
outlier-behaving DNS servers; majority can handle exception normally.
4 Validation
In this section, we present quantitative validation of the accuracy of Queen.
4.1 Direct Path Validation
First, we ﬁx the target T to be S1. We trick open recursive DNS servers (R’s) to
query S1 and estimate the packet loss rate between them, as shown in Fig. 4(a).
We send out DNS queries with exponential inter-arrival time and 200ms in average
over a 15-minute duration, so that their associated counting process is Poisson. In
parallel, we also run direct probing by sending ICMP packets from S1 to R, which
serves as ground truth loss rate. Note that, in this validation, Queen is estimating
the packet loss rate on exactly the same path as the direct probing.
Local DNS1 (Recursive)
DNS probe
Local DNS2
S 1(T)
ICMP Direct Probe
R (Open RDNS)
<5ms
DNS Probe
(a) Direct Path
PL Node1
UDP direct probe
(b) PlanetLab
<5ms
PL Node2
Fig. 4. Validation Path Setup
We randomly choose 370 open recursive name servers from 5 continents. In
the end, we get results for ∼330 paths, where 210 experience loss either in direct
probing or Queen. Fig. 5(a) compares two latencies. Optimally, they will align
at 45◦ straight line. As we can see they indeed match very well. Fig. 5(b), 5(c)
compare the loss rate estimated by two methods. They also match very well. In
particular, the absolute loss rate diﬀerence between direct probing and Queen is
Queen: Estimating Packet Loss Rate between Arbitrary Internet Hosts
63
500
400
300
200
100
)
s
m
(
T
T
R
n
e
e
u
Q
0
0
100
)
%
(
n
o
i
t
u
b
i
r
t
s
i
D
e
v
i
t
a
l
u
m
u
C
80
60
40
20
Experiment
Optimal