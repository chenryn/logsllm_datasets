### Improved Text

#### Table 2: Sliding-Window Sizes and System Calls
The results for sliding-window sizes from \( k=5 \) to \( k=11 \) (with a total of 2,789 system calls) are provided in Table 2.

#### JOE Text Editor Exploit
The target program is the popular Linux terminal text editor, Joe, available at [http://sourceforge.net/projects/joe-editor/](http://sourceforge.net/projects/joe-editor/). The exploit for Redhat can be found at [http://www.uhagr.org/src/kwazy/UHAGr-Joe.pl](http://www.uhagr.org/src/kwazy/UHAGr-Joe.pl), and it was executed on Redhat 7.3.

Joe is typically not run as a setuid program. For this proof-of-concept, we assume that Joe has been run with root privileges or setuid to root. The original attack sequence is: `setuid(0), execve("/bin/sh")`. We modified it to: `open(), write(), close(), exit()`.

The results of the attack construction on Joe's normal traces, generated from three Joe sessions (with a total of 9,802 system calls) for sliding-window sizes from \( k=5 \) to \( k=11 \), are presented in Table 3.

**Table 3: Attack Construction for Joe with \( k=5 \)–\( k=11 \) (9,802 Sys-calls in Normal)**

| \( k \) | Joe Search Result | Length of Stealthy Attack Trace (Buffer-Overflow Case) | Length of Stealthy Attack Trace (Direct-Attack Case) | Average Search Time (User+Sys) |
|---------|-------------------|-------------------------------------------------------|-----------------------------------------------------|--------------------------------|
| 5       | 20                | 30                                                    | 7                                                   | 0.258s                         |
| 6       | 49                | 76                                                    | 7                                                   | 0.305s                         |
| 7       | 79                | 79                                                    | 7                                                   | 0.362s                         |
| 8       | 80                | 80                                                    | 7                                                   | 0.432s                         |
| 9       | 81                | 81                                                    | 7                                                   | 0.520s                         |
| 10      | 82                | 82                                                    | 7                                                   | 0.623s                         |
| 11      | 49                | 76                                                    | 7                                                   | 0.778s                         |

From the normal traces collected for Joe, we observed some differences between the normal traces and the exploit trace before the point of seizure, likely due to increased memory allocation for the buffer overflow attack. However, as reasoned by [5], small differences may be tolerated by the IDS depending on the parameters used in the anomaly signal measurement function of self-based IDS (e.g., Locality Frame Count).

#### Autowux WU-FTPD Exploit
This exploit targets the "site exec" vulnerability in the WU-FTPD FTP server. The exploit, `autowux.c`, is available at [http://www.securityfocus.com/bid/1387/exploit/](http://www.securityfocus.com/bid/1387/exploit/). We ran the wu-2.4.2-academ [BETA-15] wu-ftpd that comes with Redhat 5.0 distribution on the 2.2.19 kernel.

The attack trace used is: `setreuid(), chroot(), chdir(), chroot(), open(), write(), close(), exit()`. The results of the attack construction on the WU-FTPD normal traces, generated from ten sessions (with a total of 11,051 system calls) for sliding-window sizes from \( k=5 \) to \( k=11 \), are presented in Table 4.

**Table 4: Attack Construction for Wu-Ftpd with \( k=5 \)–\( k=11 \) (11,051 Sys-calls in Normal)**

| \( k \) | Wu-Ftpd Search Result | Length of Stealthy Attack Trace (Buffer-Overflow Case) | Length of Stealthy Attack Trace (Direct-Attack Case) | Average Search Time (User+Sys) |
|---------|------------------------|-------------------------------------------------------|-----------------------------------------------------|--------------------------------|
| 5       | 230                    | 244                                                   | 201                                                 | 2.036s                         |
| 6       | 256                    | 272                                                   | 234                                                 | 2.663s                         |
| 7       | 272                    | 303                                                   | 257                                                 | 3.535s                         |
| 8       | 321                    | 318                                                   | 285                                                 | 5.056s                         |
| 9       | 314                    | 285                                                   | 285                                                 | 4.980s                         |
| 10      | 314                    | 285                                                   | 285                                                 | 6.220s                         |
| 11      | 314                    | 285                                                   | 285                                                 | 7.811s                         |

Wagner and Soto [5] reported a stealthy trace for \( k=6 \) with 135 stealthy system calls based on their normal profile. However, their result is not directly comparable to ours, as they used a different set of normal traces collected over two days with a large number of downloads.

#### Improved IDS Behavior
We have demonstrated that the improved IDS can better withstand mimicry attacks. Next, we evaluate the IDS against various attack strategies.

**Table 5: Attack Strategies to be Prevented**

| ID   | Operation (respectively)                                                                 |
|------|------------------------------------------------------------------------------------------|
| A1-A5 | Open and write an entry into F1, F2, F3, F4, F5                                          |
| A6-A10 | Chmod on F1, F2, F3, F4, F5                                                             |
| A11-A15 | Fchmod on F1, F2, F3, F4, F5                                                            |
| A16-A20 | Chown on F1, F2, F3, F4, F5                                                             |
| A21-A25 | Fchown on F1, F2, F3, F4, F5                                                            |
| A26-A30 | Lchown on F1, F2, F3, F4, F5                                                            |
| A31-A35 | Rename F1, F2, F3, F4, F5 into some other file                                           |
| A36-A40 | Rename some other file into F1, F2, F3, F4, F5                                           |
| A41-A45 | Link F1, F2, F3, F4, F5 into some other file                                             |
| A46-A50 | Link some other file into F1, F2, F3, F4, F5                                             |
| A51-A55 | Unlink F1, F2, F3, F4, F5                                                                |
| A56-A60 | Mknod F1, F2, F3, F4, F5                                                                 |
| A61    | Execve shell or command                                                                   |

For this experiment, we chose the Traceroute program. The experiment was conducted on normal traces (2,789 system calls) with a sliding-window size set to 5. All the attack strategies listed in Table 5 failed on the tested normal traces, even in the direct-attack search scenario. For most strategies (A6-A61), the attacks failed because the required system calls were not present in the normal traces. In attacks A1-A5, the searches failed because the normal traces did not contain the specific categories.

**Table 6: Number of Foreign k-grams in Traceroute and ls**

| Program  | k  | IDS1 | IDS3 |
|----------|----|------|------|
| Traceroute | 5  | 0    | 0    |
|          | 6  | 0    | 0    |
|          | 7  | 0    | 0    |
|          | 8  | 1    | 2    |
|          | 9  | 2    | 2    |
|          | 10 | 3    | 2    |
|          | 11 | 3    | 2    |
| ls       | 5  | 0    | 0    |
|          | 6  | 0    | 0    |
|          | 7  | 0    | 0    |
|          | 8  | 1    | 2    |
|          | 9  | 2    | 2    |
|          | 10 | 3    | 2    |
|          | 11 | 3    | 2    |

### Discussion
Our results show that the improved IDS model is more resistant to mimicry attacks, as the basic attacks in our experiments could not be turned into mimicry attacks. The running times also indicate that our automated attack construction algorithm is practical and efficient, with execution times of a few seconds for large window sizes.

- There can be a considerable difference in length between a stealthy buffer overflow attack and a direct attack for self-based IDS. In some cases, like with Joe, the non-buffer overflow stealthy attack is very short, with an attack of length seven working for window sizes from \( k=5 \) to \( k=11 \).
- The length of the shortest stealthy attack trace varies from program to program, confirming earlier reports that a larger window tends to require a longer stealthy attack trace. This suggests that relying solely on a baseline IDS with a certain sliding window length, such as six, is insufficient. Our IDS with categorization techniques appears to make the self-based IDS more robust.
- Our experimental results show that with the given basic attacks, it was not possible to turn them into mimicry attacks on the enhanced IDS, although it was possible in the baseline versions. Most results for attacking IDS, particularly with mimicry attacks, highlight potential problems or ways to attack the IDS. Our positive result shows that certain systematic attacks fail to work.
- Removing pseudo edges for the self-based IDS (the IDS2 model) does not significantly strengthen the IDS against mimicry attacks. Pseudo subtraces can still exist. For example, a normal trace (A, B, C, D, E, A, B, C, M, N) with \( k = 3 \) can still allow a stealthy trace to be constructed for a basic attack trace (E, B, D) due to the common node ABC.
- The false-positive rate experiment is encouraging, as it shows that improving the IDS with a more fine-grained detection mechanism does not increase the false-positive rate over the baseline IDS. This means the IDS is now more accurate for negative cases, reducing the false-negative rate without impacting the false-positive rate.
- The argument and privilege abstraction technique can also be applied to other gray-box IDS models, such as the FSA model in [10]. In this new model, the set of states \( Q = \{q_0, q_\perp\} \cup \{U \times P\} \) with \( P \) being the set of possible program counter values and \( \Sigma \in \{S \times C\} \). The transition is enhanced using a tuple with the system call number and argument category value.

### Conclusion
We have presented an efficient algorithm for automated mimicry attack construction on self-based IDS, which is useful for evaluating the robustness of the IDS to attacks. We propose an extension to self-based IDS using privilege and argument abstraction, arguing that this extension is both simple to use and makes the IDS more robust. Our experimental results show that mimicry attacks that could work in the baseline setting fail in the extended IDS, indicating that the extended IDS is more secure.