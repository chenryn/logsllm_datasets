45
−
64
64
−
51
51
−
48
64
−
45
51
−
total of 2,789 system calls) for sliding-window sizes from k=5 to k=11 is given in
Table 2.
JOE Text Editor Exploit. The victim program that we chose is a popular
Linux terminal text editor Joe available on http://sourceforge.net/projects
/joe-editor/. The exploit for Redhat is available at http://www.uhagr.org/
src/kwazy/UHAGr-Joe.pl, and was run on Redhat 7.3.
Joe is not normally run as a setuid program. As a proof of concept, we assume
that Joe has been run as root or setuid to root. The original attack sequence is:
setuid(0), execve ("/bin/sh"). Again, we changed it to: open(), write(),
close(), exit(). 4
The result of attack construction on Joe’s normal traces generated from three
Joe sessions (with a total of 9,802 system calls) for sliding-window sizes from
k=5 to k=11 is given in Table 3.
Table 3. Attack construction for Joe with k=5–11 (9,802 Sys-calls in Normal)
k=5 k=6 k=7 k=8 k=9 k=10 k=11
Joe Search Result
Resulting Length of Stealthy Attack Trace:
IDS-1 (Buﬀer-Overﬂow Case)
IDS-2 (Buﬀer-Overﬂow Case)
IDS-3 (Buﬀer-Overﬂow Case)
IDS-1 (Direct-Attack Case)
IDS-2 (Direct-Attack Case)
IDS-3 (Direct-Attack Case)
Average Search Time (User+Sys) 0.258s 0.305s 0.362s 0.432s 0.520s 0.623s 0.778s
20
30
−
7
7
−
30
49
−
7
7
−
76
79
−
7
7
−
79
80
−
7
7
−
80
81
−
7
7
−
81
82
−
7
7
−
49
76
−
7
7
−
4 From the normal traces collected for Joe, we note that there are actually some
diﬀerences between the normal traces and the exploit trace before the point of seizure
due to some brk() system calls. This is probably due to increased memory allocation
for the buﬀer overﬂow attack. However, as reasoned by [5], small diﬀerences may
be tolerated by the IDS depending on the parameters used in the anomaly signal
measurement function of self-based IDS (e.g. Locality Frame Count).
160
Sufatrio and R.H.C. Yap
Since Joe is an editor, it falls into the class of general purpose programs as
opposed to the more privileged processes targeted for monitoring by self-based
IDS in [1, 2]. We however include it here to highlight some points on our attack
construction results. Note that the search using Attack-strategy A2 on IDS-3
fails as Joe was not previously used to open /etc/shadow in the normal traces.
Autowux WU-FTPD Exploit. This is the same exploit previously used in [5].
The autowux.c exploits “site exec” vulnerability on the WU-FTPD FTP server.
It is available at http://www.securityfocus.com/bid/1387/exploit/. We ran
the wu-2.4.2-academ [BETA-15] wu-ftpd that comes with Redhat 5.0 distrib-
ution on the 2.2.19 kernel.
We use the same attack trace as [5] which is: setreuid(),chroot(),
chdir(),chroot(),open(),write(),close(), exit(). The result of attack
construction on the WU-FTPD normal traces generated from 10 sessions (11,051
system calls) for sliding-window sizes from k=5 to k=11 is given in Table 4.
Table 4. Attack construction for Wu-Ftpd with k=5–11 (11,051 Sys-calls in Normal)
k=5 k=6 k=7 k=8 k=9 k=10 k=11
Wu-Ftpd Search Result
Resulting Length of Stealthy Attack Trace:
IDS-1 (Buﬀer-Overﬂow Case)
IDS-2 (Buﬀer-Overﬂow Case)
IDS-3 (Buﬀer-Overﬂow Case)
IDS-1 (Direct-Attack Case)
IDS-2 (Direct-Attack Case)
IDS-3 (Direct-Attack Case)
Average Search Time (User+Sys) 2.036s 2.663s 3.535s 5.056s 4.980s 6.220s 7.811s
230
244
−
201
222
−
182
194
−
167
179
−
196
212
−
181
183
−
92
182
−
77
167
−
256
272
−
234
257
−
272
303
−
257
285
−
321
318
−
285
314
−
Wagner and Soto [5] give a stealthy trace for k=6 with 135 stealthy system
calls based on their normal proﬁle. Their result, however, is not comparable to
ours as the normal traces used are diﬀerent. In their case, they had collected
normal traces for an existing Wu-Ftpd with large numbers of downloads over
two days. We have used a small normal proﬁle.
5.2 Behavior of the Improved IDS
Resistance Against Various Attacks. Having shown that the improved IDS
can better withstand mimicry attacks, we now evaluate the IDS against a number
of diﬀerent attack strategies.
First, we list some important ﬁles from the security viewpoint, namely F1:
/etc/passwd, F2: /etc/shadow, F3: /etc/group, F4: /proc/kmem and F5:
hosts.equiv. Next, in Table 5, we list a number of common attack strategies
in the Unix/Linux environment on those ﬁles above when the system calls are
executed with superuser euid/egid privilege. While the list is not comprehensive,
it suﬃces to demonstrate improvements in the resistance level of the IDS. We
Improving Host-Based IDS with Argument Abstraction
161
Table 5. Attack strategies to be prevented
ID
Operation (respectively)
A1 − A5 Open and write an entry into F1, F2, F3, F4, F5
A6 − A10 Chmod on F1, F2, F3, F4, F5
A11 − A15 Fchmod on F1, F2, F3, F4, F5
A16 − A20 Chown on F1, F2, F3, F4, F5
A21 − A25 Fchown on F1, F2, F3, F4, F5
A26 − A30 Lchown on F1, F2, F3, F4, F5
A31 − A35 Rename F1, F2, F3, F4, F5 into some other ﬁle
A36 − A40 Rename some other ﬁle into F1, F2, F3, F4, F5
A41 − A45 Link F1, F2, F3, F4, F5 into some other ﬁle
A46 − A50 Link some other ﬁle into F1, F2, F3, F4, F5
A51 − A55 Unlink F1, F2, F3, F4, F5
A56 − A60 Mknod F1, F2, F3, F4, F5
Execve shell or command
A61
chose the Traceroute program for this experiment. The experiment was done on
normal traces described earlier (2,789 system calls) with a sliding-window size
set to 5. We found that all the attack strategies listed in Table 5 fail on the
tested normal traces even in the direct-attack search scenario. For most of the
strategies (A6 − A61), the attacks fail because the needed attack system calls do
not appear in the normal traces. In attacks A1 − A5, given the category spec-
iﬁcation, the attack searches fail because the normal traces do not contain the
particular categories.
False-Positive Rate. We give some preliminary results comparing the new
IDS in terms of its false-positive rate to the baseline self-based IDS. We chose
two programs: ls and traceroute in Redhat Linux 7.3. For each program, we
produced 10 trace sessions and then randomly chose one to be tested against the
other 9. The results are shown in Table 6 below. Here we simply measure the
number of foreign k-grams. As can be seen, the enhancement does not increase
the false positives.
Table 6. Number of foreign k-grams in Traceroute and ls
Traceroute
ls
k IDS1 IDS3 IDS1 IDS3
5
6
7
8
9
10
11
0
0
0
0
1
2
3
0
0
0
0
1
2
3
2
2
2
2
2
2
2
2
2
2
2
2
2
2
162
Sufatrio and R.H.C. Yap
6 Discussion
We have shown that the improved IDS model is more resistant to mimicry attacks
since the basic attacks in our experiments could not be turned into mimicry
attacks. The running times also show that our automated attack construction
algorithm is practical and eﬃcient. Execution times for all cases is at most a few
seconds on large window sizes. We have the following further observations:
– There can be a considerable diﬀerence in length between a stealthy buﬀer
overﬂow attack compared to the direct attack one for self-based IDS. In some
cases, like in Joe, the non-buﬀer overﬂow stealthy attack is very short. Here
an attack of length seven works for window sizes from k=5 to 11.5
– The length of the shortest stealthy attack trace varies from program to
program. It conﬁrms earlier reports [6, 9] that a larger window tends to
require also a longer stealthy attack trace. However, it clearly shows that
relying the baseline IDS with certain length of sliding window of, such as
six as suggested in [1], is not suﬃcient. Rather, other improvements are
necessary. Our IDS with categorization techniques seems to be able to answer
the need to make the self-based IDS more robust. In addition, one can always
specify his/her own speciﬁcation rules in our IDS to suit a particular program
in preventing possible attack strategies.
– Our experimental results show that with the given basic attacks, it was not
possible to turn them into mimicry attacks on the enhanced IDS although it
was possible to do so in the baseline versions of the IDS. Most results that
we are aware of for attacking IDS, in particular with mimicry attacks, are
usually of the negative variety in that they show potential problems or ways
of attacking the IDS. It is signiﬁcant that our result here is a positive one,
since it shows that certain systematic attacks fail to work.
However, we do not guarantee that no attacks are possible since the
evaluation is relative with respect to a given basic attack and the normal
traces. The question of a security guarantee is in fact an open problem in
most IDS models, and we argue that the work here points a way towards
more robust evaluation methods.
– We can see that removing pseudo edges for the self-based IDS (the IDS2
model), does not make the IDS signiﬁcantly stronger against mimicry at-
tacks. In other words, pseudo subtraces can still exist. To understand why,
let us consider a normal trace (cid:14)A, B, C, D, E, A, B, C, M, N(cid:15) with k = 3.
Given a graph without pseudo edges for this trace, a stealthy trace can still
be constructed for a basic attack trace (cid:14)E, B, D(cid:15). The reason for this is that
a common node ABC allows us to create a “crossover path” (i.e. one like
EAB-ABC-BCD) that makes a stealthy trace possible.
5 The actual trojans will usually have longer sequences since there are system calls
typically invoked at the beginning of a program related to libraries loading or memory
allocation. However, the number does establish the lower-bound of mimicry attacks
in the direct-attack setting.
Improving Host-Based IDS with Argument Abstraction
163
– The false-positive rate experiment is encouraging as it shows that improving
the IDS with a more ﬁne-grained detection mechanism does not increase the
false-positive rate over the baseline IDS. This means that the IDS is now
more accurate for the negative cases as it decreases false-negative rate, but
without impacting on the false-positive rate.
– We also can apply the arguments and privileges abstraction technique to
other gray-box IDS models, such as the FSA model as in [10]. In this new
model, the set of states Q = {q0, q⊥}∪{U
(cid:4)×P} with P = set of possible
program counter values and Σ ∈ {S × C}. The transition is thus enhanced
using a tuple with the system call number and argument category value.
(cid:4)×G
7 Conclusion
We have presented an eﬃcient algorithm for automated mimicry attack construc-
tion on self-based IDS. This is useful for evaluating the robustness of the IDS to
attacks. We propose an extension to self-based IDS using privilege and argument
abstraction. We argue that this extension is both simple to use and also makes
the IDS more robust. Our experimental results show that mimicry attacks which
could work in the baseline setting fail in the extended IDS. Hence, the extended