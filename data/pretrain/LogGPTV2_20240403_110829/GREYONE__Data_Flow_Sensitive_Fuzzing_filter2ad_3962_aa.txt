title:GREYONE: Data Flow Sensitive Fuzzing
author:Shuitao Gan and
Chao Zhang and
Peng Chen and
Bodong Zhao and
Xiaojun Qin and
Dong Wu and
Zuoning Chen
GreyOne: Data Flow Sensitive Fuzzing
Shuitao Gan, State Key Laboratory of Mathematical Engineering and Advanced Computing; 
Chao Zhang, Institute for Network Sciences and Cyberspace of Tsinghua University; 
Beijing National Research Center for Information Science and Technology; Peng Chen, 
ByteDance Inc.; Bodong Zhao, Institute for Network Science and Cyberspace, Tsinghua 
University; Xiaojun Qin and Dong Wu, State Key Laboratory of Mathematical Engineering 
and Advanced Computing; Zuoning Chen, National Research Center of Parallel Computer 
Engineering and Technology
https://www.usenix.org/conference/usenixsecurity20/presentation/gan
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.GREYONE: Data Flow Sensitive Fuzzing
Shuitao Gan1, Chao Zhang2,3, Peng Chen4, Bodong Zhao2,
Xiaojun Qin1, Dong Wu1, Zuoning Chen5
1State Key Laboratory of Mathematical Engineering and Advanced Computing. PI:EMAIL
2Institute for Network Science and Cyberspace, Tsinghua University. PI:EMAIL
3Beijing National Research Center for Information Science and Technology
4ByteDance AI lab 5National Research Center of Parallel Computer Engineering and Technology.
Abstract
Data ﬂow analysis (e.g., dynamic taint analysis) has proven
to be useful for guiding fuzzers to explore hard-to-reach code
and ﬁnd vulnerabilities. However, traditional taint analysis
is labor-intensive, inaccurate and slow, affecting the fuzzing
efﬁciency. Apart from taint, few data ﬂow features are utilized.
In this paper, we proposed a data ﬂow sensitive fuzzing
solution GREYONE. We ﬁrst utilize the classic feature taint to
guide fuzzing. A lightweight and sound fuzzing-driven taint
inference (FTI) is adopted to infer taint of variables, by mon-
itoring their value changes while mutating input bytes during
fuzzing. With the taint, we propose a novel input prioritiza-
tion model to determine which branch to explore, which bytes
to mutate and how to mutate. Further, we use another data
ﬂow feature constraint conformance, i.e., distance of tainted
variables to values expected in untouched branches, to tune
the evolution direction of fuzzing.
We implemented a prototype of GREYONE and evaluated it
on the LAVA data set and 19 real world programs. The results
showed that it outperforms various state-of-the-art fuzzers
in terms of both code coverage and vulnerability discovery.
In the LAVA data set, GREYONE found all listed bugs and
336 more unlisted. In real world programs, GREYONE on
average found 2.12X unique program paths and 3.09X unique
bugs than state-of-the-art evolutionary fuzzers, including AFL,
VUzzer, CollAFL, Angora and Honggfuzz, Moreover, GREY-
ONE on average found 1.2X unique program paths and 1.52X
unique bugs than a state-of-the-art symbolic exeuction as-
sisted fuzzer QSYM. In total, it found 105 new security bugs,
of which 41 are conﬁrmed by CVE.
1 Introduction
Evolutionary mutation-based fuzzing (e.g., AFL [44]) has
become one of the most popular vulnerability discovery solu-
tions, widely used and studied by the community. A core task
of such fuzzers is determining the evolution direction, as well
as where and how to mutate seed inputs, in order to efﬁciently
explore hard-to-reach code and satisfy sophisticated data-ﬂow
constraints to trigger potential vulnerabilities.
A common solution is utilizing symbolic execution to solve
control-ﬂow constraints and help fuzzers to explore code, as
proposed in Driller [37], QSYM [43] and DigFuzz [45]. How-
ever, symbolic execution is too heavy weight and cannot scale
to large applications, and unable to solve many complicated
constraints, e.g., one-way functions. Researchers also tried to
improve fuzzers with deep learning [29] and reinforcement
learning [7], by predicating which byte to mutate and what
mutation actions to take. However, they are still in early stage
and the improvements are not signiﬁcant.
Instead, data ﬂow analysis 1(e.g., dynamic taint analysis)
has proven to be useful for guiding fuzzing. TaintScope [40]
utilized it to locate checksums. VUzzer [30] uses it to identify
which bytes and what values are used in branch instructions.
Angora [10] uses it to draw the shape of input bytes related
to path constraints. These solutions utilize taint to determine
where and how to mutate in different ways, and showed good
performance in some applications.
1.1 Questions to Address
However, traditional dynamic taint analysis has several lim-
itations. First, it is labor-intensive and requires lots of man-
ual efforts. For example, VUzzer [30] at ﬁrst only supports
x86 platform. In general, these solutions have to interpret
each instruction in native or intermediate representation form,
with custom taint propagation rules. They also have to build
taint models for external function calls or system calls. Sec-
ond, it is inaccurate. For example, some tainted data val-
ues may affect control ﬂow that further affects other data,
forming implicit data ﬂows. It causes either under-taint if
the implicit ﬂows are ignored, or over-taint if such ﬂows
are all counted [19]. Lastly, it is extremely slow (usually
several times overheads), making fuzzing inefﬁcient. These
1The paper focuses on fuzzing, and dynamic taint analysis is more accu-
rate than its static counterpart. So we only focus on dynamic taint analysis.
USENIX Association
29th USENIX Security Symposium    2577
seriously limit dynamic taint analysis’ application and ef-
ﬁciency in fuzzing. Therefore, the ﬁrst research question
to address is: RQ1: How to perform lightweight and
accurate taint analysis for efficient fuzzing?
With the inferred taint attributes, VUzzer [30] mutates
input bytes used in branch instructions and imprecisely
replaces them with expected values (e.g., magic number).
REDQUEEN [4] further identiﬁes all direct copies of inputs,
i.e., input bytes that are directly used in branch constraints
(e.g., magic number and checksum), and replaces them with
expected values. However, they could neither solve branch
constraints related to indirect copies of inputs, i.e., input bytes
that are transformed and indirectly used in branch constraints,
nor prioritize which branch to explore and which bytes to
mutate. Thus, the second research question to address is: RQ2:
How to efficiently guide mutation with taint?
Existing evolutionary fuzzers in general evolve towards
increasing code coverage. For example, AFL [44] adds test
cases that ﬁnd new code to the seed queue, and selects one
at a time from the queue to mutate. Many other solutions,
e.g., AFLfast [6] and CollAFL [14], have been proposed to
further improve the way to select seed, accelerating the evo-
lution speed. However, they only considered control ﬂow
features rather than data ﬂow features, e.g., taint attributes
or constraint conformance, and may waste energies during
mutation to explore hard-to-reach branches. Thus, the third re-
search question to address is: RQ3: How to tune fuzzers’
evolution direction with data flow features?
1.2 Our Solution
We proposed a novel data ﬂow sensitive fuzzing solution
GREYONE, to address the aforementioned questions.
Fuzzing-driven Taint Inference (FTI). We ﬁrst propose
FTI to infer taint of variables by conducting a pilot fuzzing
phase, during which we systematically mutate each input byte
(one at a time) and monitor variables’ values. If a variable’s
value changes while an input byte is mutated, we could infer
the former is tainted and depends on the latter.
This inference is sound, i.e., without over-taint issues. It is
also immune to under-taint issues caused by implicit ﬂows
or external calls2. Experiments showed that, FTI is more ac-
curate than traditional taint analysis, e.g., able to ﬁnd 2 to 4
times more dependencies (with no false positives). Further-
more, it avoids the labor-intensive efforts of composing taint
propagation rules and is very fast at runtime. This lightweight
and sound solution could scale to large programs, and provide
supports for other application scenarios beyond fuzzing.
Taint-Guided Mutation.
Input bytes contribute differently
to code coverage. We utilize taint provided by FTI to sort
2FTI could suffer from under-taint issues due to incomplete pilot fuzzing.
input bytes. More speciﬁcally, we prioritize input bytes that
affect more untouched branches to mutate, and prioritize un-
touched branches that depend on more prioritized input bytes
to explore. When exploring a branch, we mutate its depen-
dent input bytes in priority order, by precisely replacing direct
copies of inputs with expected values (and minor variations).
Conformance-Guided Evolution. Lots of fuzzers (e.g.,
AFL) use control ﬂow features, e.g., code coverage, to guide
evolution. To efﬁciently explore hard-to-reach branches (e.g.,
those related to indirect copies of inputs), we propose to use
complementary data ﬂow features to tune the evolution direc-
tion. Note that, for each tainted variable used in untouched
branches, we need to ﬂip some bits to match the expected
values. The amount of efforts required is related to the con-
straint conformance, i.e., the distance of tainted variables to
the values expected in untouched branches.
We use this data ﬂow feature to tune the fuzzer’s evolution
direction. First, we add test cases with higher conformance
to the seed queue, making the fuzzer gradually improve the
overall conformance and eventually satisfy the constraints of
untouched branches. Then, we prioritize seeds with higher
conformance to be selected from the queue for mutation,
accelerating the exploration of new branches. This evolution
could satisfy the constraints at a faster pace, like the gradient
descent used in Angora [10]. But it could avoid getting stuck
in local minimum and brings long-term stable improvements.
Furthermore, we rebase ongoing mutations onto new seeds
with higher conformance on-the-ﬂy. Experiments showed that
it thus signiﬁcantly improves the mutation efﬁciency.
1.3 Results
We implemented a prototype of GREYONE and evaluated it
on the LAVA-M dataset [12] and 19 open source applications.
Our taint analysis engine FTI outperforms the classic taint
analysis solution DFSan [2]. On average, it ﬁnds 1.3X more
untouched branches that are tainted (i.e., depending on input
bytes), and generates 1X more unique paths during fuzzing.
GREYONE outperforms 6 state-of-the-art evolutionary
fuzzers, including AFL and CollAFL [14], in terms of both
code coverage and vulnerability discovery. In the LAVA
data set, GREYONE ﬁnds all listed bugs and 336 more un-
listed bugs. In real world applications, GREYONE ﬁnds 2.12X
unique paths, 1.53X new edges, 6X unique crashes and 3.09X
bugs, than the second best counterpart.
In addition, GREYONE demonstrates very good perfor-
mance in bypassing complicated program constraints, even
better than the state-of-the-art symbolic execution assisted
fuzzer QSYM [43]. In the real world applications, GREYONE
ﬁnds 1.2X unique paths, 1.12X new edges, 2.15X unique
crashes and 1.52X bugs than QSYM.
In total, GREYONE has found 105 unknown vulnerabilities
in these applications. After reporting to upstream vendors, we
2578    29th USENIX Security Symposium
USENIX Association
Figure 1: Architecture of GREYONE.
learned that 25 of them are known by vendors (but not public).
Among the remaining 80 bugs, 41 are conﬁrmed by CVE.
To summarize, we make the following contributions:
• We propose a taint-guided mutation strategy, able to
prioritize which branch to explore and which input bytes
to mutate, and determine how to (precisely) mutate.
• We propose a new conformance-guided evolution solu-
tion to tune the direction of fuzzing, by taking into con-
sideration data ﬂow features including taint attributes
and constraint conformance.
• We implement a prototype GREYONE, evaluate it on 19
widely-tested open source applications, showing that it
outperforms various state-of-the-art fuzzers.
• We ﬁnd 105 unknown vulnerabilities in 19 applications,
and help the vendors improve the products.
2 Design of GREYONE
As shown in Figure 1, the overall workﬂow of GREYONE is
similar to AFL, consisting of steps like seed generation/up-
dating, seed selection, seed mutation and testing/tracking.
First, we introduce a new step into the fuzzing loop, i.e.,
fuzzing-driven taint inference (FTI), to infer taint of variables.
We conduct a pilot fuzzing by performing byte-level mutation
on the input seed and testing them. During the pilot fuzzing,
we monitor program variables’ value changes. Once a vari-
able’s value changes, we could induce that it is tainted and
depends on the mutated input bytes. Besides, we could also
identify all tainted variables that use direct copy of inputs.
Second, with the taint attributes provided by FTI, we fur-
ther guide the fuzzer to mutate seeds in a more efﬁcient way.
We prioritize which input bytes to mutate and which branch
to explore. In addition, we determine how to mutate input
bytes, including direct and indirect copies of inputs.
Lastly, we tune the fuzzing direction with conformance-
guided evolution. In addition to code coverage, we track
tainted variables’ constraint conformance during testing, and
add test cases with higher conformance to the seed queue,
making the fuzzer gradually increase the conformance and
reach untouched branches. Then, we prioritize seeds with
higher conformance to select from the queue, accelerating
the evolution. Furthermore, once we ﬁnd a new seed with
higher conformance, we rebase ongoing mutations onto this
new seed on-the-ﬂy, promoting the mutation efﬁciency.
2.1 Fuzzing-driven Taint Inference
As shown in [10, 30], taint analysis could guide fuzzers
towards efﬁcient mutation and help explore hard-to-reach
branches. However, traditional solutions are labor-intensive,
slow and inaccurate. GREYONE introduces a lightweight and
sound solution, i.e., fuzzing-driven taint inference (FTI).
Intuition.
If a variable’s value changes after we mutate one
input byte, we could infer that the former depends on the
latter, either explicitly or implicitly. Furthermore, mutating
this input byte could change the constraints of branches that
use this variable, leading to new branch exploration.
Interference Rule for FTI. Assume we have a program
variable var (at a given line of instruction) and a seed input
S, and another input S[i] which is derived by mutating the
i-th byte of the input S, let v(var,S) be the value of var when
given the input S. We claim the variable var depends on the
i-th byte of input S, if the following condition holds.
v(var,S) (cid:54)= v(var,S[i])
(1)
Moreover, if either operand variable of a branch instruction
br depends on the i-th byte of input S, we claim this branch
br depends on this input byte. In other words, if the data
ﬂow from the input byte to the branch does not satisfy the
non-intererence rule [16], the latter depends on the former.
Unlike traditional instruction-level taint analysis, e.g.,
TaintInduce [46], this rule captures high-level dependency
and is more accurate. As discussed later, it has fewer false pos-
itives (i.e., over-taint) and false negatives (i.e., under-taint).
USENIX Association
29th USENIX Security Symposium    2579
Test (Core Fuzzing)selective testingPath1Fuzzing-driven Taint Inference (FTI)Test (Pilot Fuzzing)seedInitialInputsByte-Level MutateTaint Inferencevariable value monitoringbranch-inputdependencyTaint-Guided MutationByte PrioritizationBranch PrioritizationBytes MutationseedseedTestcasescoverage trackingPotentialVulnerabilitiesconformance trackingsecurity sanitizersDirect Copy Identif.Direct Copy Replacementseed11seed12Path2seed21Path3seed31seed32Seed QueueSeed SelectionSeed UpdatingConformance-Guided EvolutionOn-the-ﬂy Mutation Rebase// Target program is instrumented to collect information, as P(cid:48)
(cid:48)
,seed)
for each position pos in the seed do
for each available mutation operand Opd do
Algorithm 1 Fuzzing-driven Taint Inference.
Input: seed
Output: {br.taint[seed] | br ∈ branches(P)}
1:
2: State = Execute(P(cid:48)
3: for each candidate mutation method Opr do
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17: end for
= Mutate(seed,Opr,Opd, pos)
= Execute(P(cid:48)
for var ∈ br do
seed
State
for br ∈ uncovered_branches(State) do
br.taint[seed] ∪ = {pos}
if State(var) (cid:54)= State
(cid:48)
end if
end for
(var) then
end for
end for
end for
,seed
)
(cid:48)
(cid:48)
2.1.1 Taint Inference
Following the aforementioned intuition and interference rule,
FTI infers the taint attributes in a pilot fuzzing phase, which
could be integrated with the deterministic fuzzing stage of
AFL, with the following three steps, as shown in Algorithm 1.
Byte-Level Mutation. We mutate the seed inputs one byte
at a time, with a set of predeﬁned mutation rules (e.g., single-
bit ﬂipping, multiple-bits ﬂipping and arithmetic operations).
For each seed input S and each input offset pos, a set of new
test cases BLM(S, pos) could be derived in this way.
Note that, we do not mutate multiple bytes at the same
time,3 due to the following reasons. First, we cannot precisely
determine which byte is responsible for the potential value
change if multiple bytes are mutated, causing either under-
taint or over-taint issues. Second, single-byte mutation yields
fewer test cases and introduces fewer performance overheads.
Variable Value Monitoring. We then feed the generated
test cases to test, and monitor program variables’ values dur-
ing testing. To support the monitoring, we instrument the
target applications with special value tracking code.
Note that, we could monitor all program variables in this
way. However, for the purpose of fuzzing, we only monitor
variables that are used in path constraints. First, it is much
faster to monitor fewer variables. Second, only these variables
will affect the path exploration, and it is sufﬁcient to only
monitor them in order to explore all branches.
Taint Inference. Lastly, after testing each set of test cases
BLM(S, pos), we check whether the value of each variable
used in path constraints keeps intact or not. If the value of a
variable var changes, we could infer that var is tainted and
depends on the pos-th byte of the input seed S.
3This may cause incomplete testing.
Listing 1: Motivating example of FTI
i n p u t [ 0 : 8 ] vs .
c o n s t a n t
checksum : d i r e c t copy i n p u t [ 8 : 1 6 ] vs . computed v a l
len −16) ) {
bug2 ( ) ;
bug1 ( ) ;
l e n g t h : d i r e c t copy o f
/ / magic number : d i r e c t copy o f
i f ( u64 ( i n p u t ) == u64 ( " MAGICHDR " ) ) {
1
2
3
4 }
/ /
5
i f ( u64 ( i n p u t +8) == sum ( i n p u t +16 ,
6
7
8 }
/ /
9
i f ( u16 ( i n p u t +16) > l e n ) ) { bug3 ( ) ; }
10