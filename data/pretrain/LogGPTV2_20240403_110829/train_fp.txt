.ip [3]
mounts that come as a single unit from a more privileged mount namespace are
locked together and may not be separated in a less privileged mount
namespace.
(the
.br unshare (2)
.b clone_newns
operation brings across all of the mounts from the original
mount namespace as a single unit,
and recursive mounts that propagate between
mount namespaces propagate as a single unit.)
.ip
in this context, "may not be separated" means that the mounts
are locked so that they may not be individually unmounted.
consider the following example:
.ip
.rs
.in +4n
.ex
$ \fbsudo sh\fp
# \fbmount \-\-bind /dev/null /etc/shadow\fp
# \fbcat /etc/shadow\fp       # produces no output
.ee
.in
.re
.ip
the above steps, performed in a more privileged mount namespace,
have created a bind mount that
obscures the contents of the shadow password file,
.ir /etc/shadow .
for security reasons, it should not be possible to unmount
that mount in a less privileged mount namespace,
since that would reveal the contents of
.ir /etc/shadow .
.ip
suppose we now create a new mount namespace
owned by a new user namespace.
the new mount namespace will inherit copies of all of the mounts
from the previous mount namespace.
however, those mounts will be locked because the new mount namespace
is less privileged.
consequently, an attempt to unmount the mount fails as show
in the following step:
.ip
.rs
.in +4n
.ex
# \fbunshare \-\-user \-\-map\-root\-user \-\-mount \e\fp
               \fbstrace \-o /tmp/log \e\fp
               \fbumount /mnt/dir\fp
umount: /etc/shadow: not mounted.
# \fbgrep \(aq^umount\(aq /tmp/log\fp
umount2("/etc/shadow", 0)     = \-1 einval (invalid argument)
.ee
.in
.re
.ip
the error message from
.br mount (8)
is a little confusing, but the
.br strace (1)
output reveals that the underlying
.br umount2 (2)
system call failed with the error
.br einval ,
which is the error that the kernel returns to indicate that
the mount is locked.
.ip
note, however, that it is possible to stack (and unstack) a
mount on top of one of the inherited locked mounts in a
less privileged mount namespace:
.ip
.in +4n
.ex
# \fbecho \(aqaaaaa\(aq > /tmp/a\fp    # file to mount onto /etc/shadow
# \fbunshare \-\-user \-\-map\-root\-user \-\-mount \e\fp
    \fbsh \-c \(aqmount \-\-bind /tmp/a /etc/shadow; cat /etc/shadow\(aq\fp
aaaaa
# \fbumount /etc/shadow\fp
.ee
.in
.ip
the final
.br umount (8)
command above, which is performed in the initial mount namespace,
makes the original
.i /etc/shadow
file once more visible in that namespace.
.ip [4]
following on from point [3],
note that it is possible to unmount an entire subtree of mounts that
propagated as a unit into a less privileged mount namespace,
as illustrated in the following example.
.ip
first, we create new user and mount namespaces using
.br unshare (1).
in the new mount namespace,
the propagation type of all mounts is set to private.
we then create a shared bind mount at
.ir /mnt ,
and a small hierarchy of mounts underneath that mount.
.ip
.in +4n
.ex
$ \fbps1=\(aqns1# \(aq sudo unshare \-\-user \-\-map\-root\-user \e\fp
                       \fb\-\-mount \-\-propagation private bash\fp
ns1# \fbecho $$\fp        # we need the pid of this shell later
778501
ns1# \fbmount \-\-make\-shared \-\-bind /mnt /mnt\fp
ns1# \fbmkdir /mnt/x\fp
ns1# \fbmount \-\-make\-private \-t tmpfs none /mnt/x\fp
ns1# \fbmkdir /mnt/x/y\fp
ns1# \fbmount \-\-make\-private \-t tmpfs none /mnt/x/y\fp
ns1# \fbgrep /mnt /proc/self/mountinfo | sed \(aqs/ \- .*//\(aq\fp
986 83 8:5 /mnt /mnt rw,relatime shared:344
989 986 0:56 / /mnt/x rw,relatime
990 989 0:57 / /mnt/x/y rw,relatime
.ee
.in
.ip
continuing in the same shell session,
we then create a second shell in a new user namespace and a new
(less privileged) mount namespace and
check the state of the propagated mounts rooted at
.ir /mnt .
.ip
.in +4n
.ex
ns1# \fbps1=\(aqns2# \(aq unshare \-\-user \-\-map\-root\-user \e\fp
                       \fb\-\-mount \-\-propagation unchanged bash\fp
ns2# \fbgrep /mnt /proc/self/mountinfo | sed \(aqs/ \- .*//\(aq\fp
1239 1204 8:5 /mnt /mnt rw,relatime master:344
1240 1239 0:56 / /mnt/x rw,relatime
1241 1240 0:57 / /mnt/x/y rw,relatime
.ee
.in
.ip
of note in the above output is that the propagation type of the mount
.i /mnt
has been reduced to slave, as explained in point [2].
this means that submount events will propagate from the master
.i /mnt
in "ns1", but propagation will not occur in the opposite direction.
.ip
from a separate terminal window, we then use
.br nsenter (1)
to enter the mount and user namespaces corresponding to "ns1".
in that terminal window, we then recursively bind mount
.ir /mnt/x
at the location
.ir /mnt/ppp .
.ip
.in +4n
.ex
$ \fbps1=\(aqns3# \(aq sudo nsenter \-t 778501 \-\-user \-\-mount\fp
ns3# \fbmount \-\-rbind \-\-make\-private /mnt/x /mnt/ppp\fp
ns3# \fbgrep /mnt /proc/self/mountinfo | sed \(aqs/ \- .*//\(aq\fp
986 83 8:5 /mnt /mnt rw,relatime shared:344
989 986 0:56 / /mnt/x rw,relatime
990 989 0:57 / /mnt/x/y rw,relatime
1242 986 0:56 / /mnt/ppp rw,relatime
1243 1242 0:57 / /mnt/ppp/y rw,relatime shared:518
.ee
.in
.ip
because the propagation type of the parent mount,
.ir /mnt ,
was shared, the recursive bind mount propagated a small subtree of
mounts under the slave mount
.i /mnt
into "ns2",
as can be verified by executing the following command in that shell session:
.ip
.in +4n
.ex
ns2# \fbgrep /mnt /proc/self/mountinfo | sed \(aqs/ \- .*//\(aq\fp
1239 1204 8:5 /mnt /mnt rw,relatime master:344
1240 1239 0:56 / /mnt/x rw,relatime
1241 1240 0:57 / /mnt/x/y rw,relatime
1244 1239 0:56 / /mnt/ppp rw,relatime
1245 1244 0:57 / /mnt/ppp/y rw,relatime master:518
.ee
.in
.ip
while it is not possible to unmount a part of the propagated subtree
.ri ( /mnt/ppp/y )
in "ns2",
it is possible to unmount the entire subtree,
as shown by the following commands:
.ip
.in +4n
.ex
ns2# \fbumount /mnt/ppp/y\fp
umount: /mnt/ppp/y: not mounted.
ns2# \fbumount \-l /mnt/ppp | sed \(aqs/ \- .*//\(aq\fp      # succeeds...
ns2# \fbgrep /mnt /proc/self/mountinfo\fp
1239 1204 8:5 /mnt /mnt rw,relatime master:344
1240 1239 0:56 / /mnt/x rw,relatime
1241 1240 0:57 / /mnt/x/y rw,relatime
.ee
.in
.ip [5]
the
.br mount (2)
flags
.br ms_rdonly ,
.br ms_nosuid ,
.br ms_noexec ,
and the "atime" flags
.rb ( ms_noatime ,
.br ms_nodiratime ,
.br ms_relatime )
settings become locked
.\" commit 9566d6742852c527bf5af38af5cbb878dad75705
.\" author: eric w. biederman 
.\" date:   mon jul 28 17:26:07 2014 -0700
.\"
.\"      mnt: correct permission checks in do_remount
.\"
when propagated from a more privileged to
a less privileged mount namespace,
and may not be changed in the less privileged mount namespace.
.ip
this point is illustrated in the following example where,
in a more privileged mount namespace,
we create a bind mount that is marked as read-only.
for security reasons,
it should not be possible to make the mount writable in
a less privileged mount namespace, and indeed the kernel prevents this:
.ip
.rs
.in +4n
.ex
$ \fbsudo mkdir /mnt/dir\fp
$ \fbsudo mount \-\-bind \-o ro /some/path /mnt/dir\fp
$ \fbsudo unshare \-\-user \-\-map\-root\-user \-\-mount \e\fp
               \fbmount \-o remount,rw /mnt/dir\fp
mount: /mnt/dir: permission denied.
.ee
.in
.re
.ip [6]
.\" (as of 3.18-rc1 (in al viro's 2014-08-30 vfs.git#for-next tree))
a file or directory that is a mount point in one namespace that is not
a mount point in another namespace, may be renamed, unlinked, or removed
.rb ( rmdir (2))
in the mount namespace in which it is not a mount point
(subject to the usual permission checks).
consequently, the mount point is removed in the mount namespace
where it was a mount point.
.ip
previously (before linux 3.18),
.\" mtk: the change was in linux 3.18, i think, with this commit:
.\"     commit 8ed936b5671bfb33d89bc60bdcc7cf0470ba52fe
.\"     author: eric w. biederman 
.\"     date:   tue oct 1 18:33:48 2013 -0700
.\"
.\"         vfs: lazily remove mounts on unlinked files and directories.
attempting to unlink, rename, or remove a file or directory
that was a mount point in another mount namespace would result in the error
.br ebusy .
that behavior had technical problems of enforcement (e.g., for nfs)
and permitted denial-of-service attacks against more privileged users
(i.e., preventing individual files from being updated
by bind mounting on top of them).
.sh examples
see
.br pivot_root (2).
.sh see also
.br unshare (1),
.br clone (2),
.br mount (2),
.br mount_setattr (2),
.br pivot_root (2),
.br setns (2),
.br umount (2),
.br unshare (2),
.br proc (5),
.br namespaces (7),
.br user_namespaces (7),
.br findmnt (8),
.br mount (8),
.br pam_namespace (8),
.br pivot_root (8),
.br umount (8)
.pp
.ir documentation/filesystems/sharedsubtree.txt
in the kernel source tree.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/cpu_set.3
.so man3/strsignal.3
.\" copyright (c) 1993 michael haardt (PI:EMAIL),
.\"     fri apr  2 11:32:09 met dst 1993
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" modified sat jul 24 16:59:10 1993 by rik faith (PI:EMAIL)
.th mem 4 2015-01-02 "linux" "linux programmer's manual"
.sh name
mem, kmem, port \- system memory, kernel memory and system ports
.sh description
.ir /dev/mem
is a character device file
that is an image of the main memory of the computer.
it may be used, for example, to examine (and even patch) the system.
.pp
byte addresses in
.ir /dev/mem
are interpreted as physical memory addresses.
references to nonexistent locations cause errors to be returned.
.pp
examining and patching is likely to lead to unexpected results
when read-only or write-only bits are present.
.pp
since linux 2.6.26, and depending on the architecture, the
.b config_strict_devmem
kernel configuration option limits the areas
which can be accessed through this file.
for example: on x86, ram access is not allowed but accessing
memory-mapped pci regions is.
.pp
it is typically created by:
.pp
.in +4n
.ex
mknod \-m 660 /dev/mem c 1 1
chown root:kmem /dev/mem
.ee
.in
.pp
the file
.ir /dev/kmem
is the same as
.ir /dev/mem ,
except that the kernel virtual memory
rather than physical memory is accessed.
since linux 2.6.26, this file is available only if the
.b config_devkmem
kernel configuration option is enabled.
.pp
it is typically created by:
.pp
.in +4n
.ex
mknod \-m 640 /dev/kmem c 1 2
chown root:kmem /dev/kmem
.ee
.in
.pp
.ir /dev/port
is similar to
.ir /dev/mem ,
but the i/o ports are accessed.
.pp
it is typically created by:
.pp
.in +4n
.ex
mknod \-m 660 /dev/port c 1 4
chown root:kmem /dev/port
.ee
.in
.sh files
.i /dev/mem
.br
.i /dev/kmem
.br
.i /dev/port
.sh see also
.br chown (1),
.br mknod (1),
.br ioperm (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
#!/bin/sh
#
# add_parens_for_own_funcs.sh
#
# this script is designed to fix inconsistencies in the use of
# parentheses after function names in the manual pages.
# it changes manual pages to add these parentheses.
# the problem is how to determine what is a "function name".
# the approach this script takes is the following:
#
#   for each manual page named in the command line that contains 
#           more than one line (i.e., skip man-page link files)
#       create a set of names taken from the .sh section of the
#               page and from grepping all pages for names that 
#               have .so links to this page
#       for each name obtained above
#           if we can find something that looks like a prototype on 
#                   the page, then
#               try to substitute instances of that name on the page.
#                   (instances are considered to be words formatted
#		    using ^.[bi] or \f[bi]...\f[pr] -- this script
#		    ignores unformatted instances of function names.)
#           fi
#       done
#   done
#
# the rationale of the above is that the most likely function names
# that appear on a page are those that the manual page is describing.
# it doesn't fix everything, but it catches many instances.
# the rest will have to be done manually.
#
# this script is rather verbose because it provides a computer-assisted
# solution, rather than one that is fully automated.  when running it,
# pipe the output through
#
#            ...  2>&1 | less
#
# and take a good look at the output.  in particular, you can scan
# the output for *possible* problems by looking for the pattern: /^%%%/
# the script's output should be enough to help you determine if the 
# problem is real or not.
#
# suggested usage (in this case to fix pages in section 2):
#
#     cd man2
#     sh add_parens_for_own_funcs.sh *.2 2>&1 | tee changes.log | less
#
# use the "-n" option for a dry run, in order to see what would be
# done, without actually doing it.
#
# (and, yes, there are many ways that this script could probably be 
# made to work faster...)
#
######################################################################
#
# (c) copyright 2005 & 2013, michael kerrisk
# this program is free software; you can redistribute it and/or
# modify it under the terms of the gnu general public license
# as published by the free software foundation; either version 2
# of the license, or (at your option) any later version.
# 
# this program is distributed in the hope that it will be useful,
# but without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose.  see the
# gnu general public license for more details
# (http://www.gnu.org/licenses/gpl-2.0.html).
#
#
# 
file_base="tmp.$(basename $0)"
work_dst_file="$file_base.dst"
work_src_file="$file_base.src"
matches_for_all_names="$file_base.all_match"
matches_for_this_name="$file_base.this_match"
all_files="$work_dst_file $work_src_file $matches_for_all_names \
	   $matches_for_this_name"
rm -f $all_files
# command-line option processing
really_do_it=1
while getopts "n" optname; do
    case "$optname" in
    n)	really_do_it=0;
    	;;
    *)  echo "unknown option: $optarg"
        exit 1
	;;
    esac
done
shift $(( $optind - 1 ))
# only process files with > 1 line -- single-line files are link files 
for page in $(wc "$@" 2> /dev/null | awk '$1 > 1 {print $4}'| \
    grep -v '^total'); do
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>" $page ">>>>>>>>>>>>>>>>>>>>>>>>" $page "&2
    # extract names that follow the ".sh name" directive -- these will
    # be our guesses about function names to look for
    sh_nlist=$(cat $page | \
        awk 'begin { p = 0 } 
             /^\.sh name/     { p = nr } 
	     /^.sh/ && nr > p { p = 0 }	    # stop at the next .sh directive
	     p > 0 && nr > p  { print $0 }  # these are the lines between
					    # the two .sh directives
	    ')
    sh_nlist=$(echo $sh_nlist | sed -e 's/ *\\-.*//' -e 's/, */ /g')
    echo "### .sh name list:" $sh_nlist
    # some pages like msgop.2 don't actually list the function names in 
    # the .sh section -- but we can try using link pages to give us 
    # another guess at the right function names to look for
    so_nlist=$(grep -l "^\\.so.*/$(echo $page| \
	     sed -e 's/\.[1-8]$//')\\." $* | \
	     sed -e 's/\.[1-8]$//g')
    echo "### .so name list:" $so_nlist
    # combine the two lists, eliminate duplicates
    nlist=$(echo $sh_nlist $so_nlist | tr ' ' '\012' | sort -u)
    maybechanged=0
    cp $page $work_dst_file
    rm -f $matches_for_all_names; # touch $matches_for_all_names
    for rname in $nlist; do	# try each name from out list for this page
        # a very few names in .sh sections contain regexp characters!
	name=$(echo $rname | sed -e 's/\*/\\*/g' -e 's/\./\\./g' \