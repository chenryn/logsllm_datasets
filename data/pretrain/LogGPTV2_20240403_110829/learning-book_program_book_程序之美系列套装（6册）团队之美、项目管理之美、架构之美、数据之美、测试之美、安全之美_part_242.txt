SoI和通过SSI成像相关，那么我们就可以通过槽配置来最小化
RAC/MECA的大小分配，即设置为默认的配置。另一方面，如果该
计划和很多的RAC或OM图像相关，那么我们可以对内存进行配
置，使得它能够处理上限39个、较小尺寸的图像。
1372
---
## Page 1374
传递图像：三个任务间的通信
台照相机的图像数据刷新会通过其中一个照相机任务写入槽中。
在执行完任何必要的像素纠正和子图定位操作之后，该照相机任务
会通知ICS有新的图像可以处理。然后ICS根据输入的命令，对该槽
中的图像执行就地压缩（不论是有损的还是无损的），然后对图像
数据进行打包，传递给“下行”处理程序。只有完成了“下行"处理
该槽才会被释放，供新的图像使用。从图像曝光到为SSI照相机传
送图像的事件顺序如图3-7所示。
获取图像槽
SSI
2
曝光图像命令
口
口
获取图像
（从照相机下载）
把图像存储在图像槽
处理图像：
④
像素纠正
子图定位抽取
取样
就地处理
?
把图像传给ICS
准备获取下一个图像
图3-7：图像获取和传送序列
如图3-6所示，整个事件的次序是根据图像槽的可达性而定的。如果
无法获取槽，照相机任务将会等待一段可配置的时间，使得ICS可
1373
---
## Page 1375
以完成压缩和图像“下行”处理，这样就有一个图像槽变得可用。如
果ICS在那段时间内不释放槽，该照相机任务就会给地面的操作员
生成一条错误信息，直接把该图像保存在照相机中（因为实在没有
其他地方可以保存该图像）。
一旦一个照相机设备任务获取一个槽，它在把该槽交给ICS之前
就"拥有”该槽，而交给ICS之后，ICS就拥有该槽。拥有权的验证是
基于槽管理器在初始化该槽时所分配给它的槽ID（即ID数值）、图
像ID代码和照相机设备任务ID。当某个任务把一个槽交给ICS时，
ICS会验证这些ID和之前记录下来的该图像槽的ID是否匹配。
正如之前所述，ICS是异步方式运行，且和任意一个照相机任务并
没有密切关系。可以通过利用VxWorks的内置消息队列系统，并且
在内存槽管理器中使用共享函数，把ICS和照相机关联起来。图3-8
显示了这些步骤的消息序列图(MC)表示方式，这些步骤包括从照相
机获取数据到最终把它们传输给”下行"程序。
使用内部消息队列（S/CFSW操作系统管道，代表太空飞行器的飞
行软件），这将允许任意一个照相机任务使用和执行从地面“上行”
的命令相同的机制，并向ICS发布命令。该命令会保存在队列中，
直到ICS完成了其当前的任务。只要有可用的槽来存储图像数据，
照相机就会继续获取图片，ICS将轮流检索和处理这些数据，直到
队列为空，而不需要考虑照相机当前的工作状态。
注意：图3-8没有显示在成像过程中的错误检查。总之，错误检查和
出错处理的代码行数大概和实际上执行处理或者处理该数据的代码
的行数相同。在设计生命周期的早期就采用了失效模型效果关键性
分析（FilureMode，Effects,andCriticalityAnalysis,FMECA)技术，该技
术在软件实现和出错处理能力上具有指导作用。
ICS对数据流进行序列化，但是使用图像槽和命令消息队列允许一
组图像可以连续快速地（相对而言）获取。这也意味着对于图像获
取，存在一定的时间间隙(tmingmargin)，这减少了由于等待图像“下
行"处理，操作被挂起的儿率。早期的测试命令序列证明了可以执
行如下操作：制作短篇“电影”（这么说是因为从SSI照相机下载一张
图片大约需要6秒），或者使用不同焦距的RAC或者OM生成大的
（30多张图像）数据集合。
获取图片：图像下载和处理
1374
---
## Page 1376
从图像曝光到最终传送给ICS，这期间发生了很多事情。系统中的
每个照相机都有自己的控制电子设备来处理命令和把从CCD获取的
模拟信号转换为12位的数字值，然后把数据存储在硬件缓冲区中，
直到飞行软件可以把数据下载到图像槽。
S/CFSW
照相机任务
槽管理器
消息队列
ICS
获取照相机命令
请求槽
获取槽地址
获取图像
处理图像
发送图像
给ICS
获取新的消息
请求槽地址
获取槽地址
压缩图像
“下行”图像
释放槽
图3-8：图像获取、处理和“下行"处理的MSC表示
以上所有这些都是在防辐射的可编程门阵列设备中的嵌入式逻辑控
制之下发生的。
1375
---
## Page 1377
照相机一旦获取到一张图像，并把它写入图像槽，就会对该图像执
行各种方式的处理，每种处理都是在图像槽的约束下就地执行。由
于没有额外大的（图像尺寸）缓冲区可以供处理过程或者保存结果
数据使用，因此，只有几个小的缓冲区来保存必要的中间结果。使
用就地处理方式是设计成像软件的关键因素，它允许三个任务在整
个系统中只占用很少的内存。图3-9显示了对于凤凰号火星着陆探测
器成像飞行软件，多缓冲区的处理方式和单缓冲区（即槽）的就地
设计策略之间的区别。
我们采取就地单缓冲区处理方式，是为了满足图像处理需求，并且
占用的内存仍然在预分配给照相机的内存范围之内，在早期设计时
采用的一个权衡。虽然这种设计处理方式，确实满足内存需求，其
不足之处是无法提供"undo"操作。如图3-10所示，如果在图像处理
时出现错误，那么会导致或者整个图像丢失，或者是返回的是部分
错乱的图像。
照相机
原始图像
数据
照相机
图像处理
函数
处理后的
图像数据
图像处理
图像数据
函数
→
图3-9：多数据缓冲区和单数据缓冲区
1376
---
## Page 1378
处理数据
读取
写数据
数据
处理后的数据
N
原始图像
数据
图3-10：就地数据处理
就地数据处理方式的处理算法是应用于图像槽中的全程数据处理，
包括读数据、处理数据及写回结果数据。有些算法，如像素纠正算
法，并没有改变图像的几何信息，而只是基于已知一些“坏”像素的
一个"上行"表，简单地对单个像素值进行修改（一个像素有可能是
“坏"像素有两个原因：一是其没有相邻的像素那么敏感，二是它可
能过于敏感）。在空间环境中，人们认为奇特的宇宙射线可能会穿
透CCD上的一个像素，导致该像素有缺陷。其他的操作，比如图像
子图定位，从原始图像中抽取一块区域，把该区域写回到槽中，然
后相应地调整高度和宽度参数。抽样技术采用了一种数学均值计算
的方式，通过把像素按4、9或16分组的方式，每个组生成的是单一
的结果像素，从而减少图像大小。结果像素在图像大小上相应地缩
小了1/2、1/3或者1/4：而最小化“梯度步长"的处理方式，通常是在
当图像通过子抽样技术，只保留每第2、第3或者第4个像素，而抛
弃其他像素来达到减小图像大小。这种操作也把修改后的结果数据
写回到图像槽中，并相应地调整了其几何参数。
当一个成像任务完成了根据命令执行的处理操作，它就会向ICS发
送一条消息（如之前所述），然后执行消息队列中的下一条命令。
如果有可用的图像槽，该任务会执行获取另一个图像的处理操作。
图像压缩
正如由机器人完成的任务生成的数据非常宝贵，需要返回这些数据
的通信带宽也是非常宝贵的。对于较小的图像，比如那些通过子图
定位或者抽样操作，图片大小已经减少了，因此直接执行“下行”操
1377
---
## Page 1379
作而不做压缩处理是可行的。更大的图像，比如全尺寸大小的SSI
图像，“下行”操作会消耗很多带宽，因此在这种情况下，通常采用
压缩方法来解决。
ICS采用像素映射和扩展，提供了两种压缩和减少图像大小的方
式。对于某个特定的图片，采用哪种压缩或减少图像大小方式，主
要依赖于图像需要达到的保真程度，高保真被认为是图像的一个必
要方面。在一些情况下，每个像素8位就足够了；而在其他一些情
况下，JPEG压缩本身造成的图像保真损失是可以接受的；而对于一
些情况，图像需要保持尽可能高的保真，则可以采用无损压缩的方
式。
在ICS内部，一台JPEG压缩器采用所有的整数算术计算和就地操
作，提供所谓的“有损”压缩方式。JPEG被认为是有损的，因为其压
缩过程丢失了部分图像数据。JIPEG可以通过命令，对图像数据实现
不同程度的压缩。最终代码是松散式地基于Mars'98使命的JPEG压
缩器：虽然凤凰号火星着陆探测器的ICS的实现只采用了其部分原
始代码。原始的JPEG压缩器使用的是浮点数乘以全尺寸大小的图像
数组作为缓存，并采用动态内存分配方式。对于这种方式如何在飞
行软件上正常工作，我仍然感到很困惑，不过它确实能够正常工