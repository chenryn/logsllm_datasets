title:HoneyBadgerMPC and AsynchroMix: Practical Asynchronous MPC and its
Application to Anonymous Communication
author:Donghang Lu and
Thomas Yurek and
Samarth Kulshreshtha and
Rahul Govind and
Aniket Kate and
Andrew K. Miller
HoneyBadgerMPC and AsynchroMix: Practical Asynchronous
MPC and its Application to Anonymous Communication
Samarth Kulshreshtha
University of Illinois at
Urbana-Champaign
Andrew Miller
University of Illinois at
Urbana-Champaign
Donghang Lu
Purdue University
Thomas Yurek
Aniket Kate
Purdue University
Rahul Govind
University of Illinois at
Urbana-Champaign
University of Illinois at
Urbana-Champaign
ABSTRACT
Multiparty computation as a service (MPSaaS) is a promising ap-
proach for building privacy-preserving communication systems.
However, in this paper, we argue that existing MPC implementa-
tions are inadequate for this application as they do not address
fairness, let alone robustness. Even a single malicious server can
cause the protocol to abort while seeing the output for itself, which
in the context of an anonymous communication service would cre-
ate a vulnerability to censorship and de-anonymization attacks. To
remedy this we propose a new MPC implementation, HoneyBadger-
MPC, that combines a robust online phase with an optimistic offline
phase that is efficient enough to run continuously alongside the
online phase. We use HoneyBadgerMPC to develop an application
case study, called AsynchroMix, that provides an anonymous broad-
cast functionality. AsynchroMix features a novel MPC program that
trades off between computation and communication, allowing for
low-latency message mixing in varying settings. In a cloud-based
distributed benchmark with 100 nodes, we demonstrate mixing a
batch of 512 messages in around 20 seconds and up to 4096 messages
in around two minutes.
KEYWORDS
HoneyBadgerMPC; Robustness; Fairness; Asynchronous Mixing;
Anonymous Communication
ACM Reference Format:
Donghang Lu, Thomas Yurek, Samarth Kulshreshtha, Rahul Govind, Aniket
Kate, and Andrew Miller. 2019. HoneyBadgerMPC and AsynchroMix: Practi-
cal Asynchronous MPC and its Application to Anonymous Communication.
In 2019 ACM SIGSAC Conference on Computer& Communications Security
(CCS ’19), November 11–15, 2019, London, United Kingdom. ACM, New York,
NY, USA, 17 pages. https://doi.org/10.1145/3319535.3354238
1 INTRODUCTION
Millions of users employ the Tor [43] network to protect the anonymity
of their communication over the Internet today. However, Tor
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354238
can only provide a weak form of anonymity against traffic anal-
ysis [42] and has been successfully attacked using strong adver-
saries [14, 76]. Furthermore, emerging applications such as dis-
tributed ledgers (or blockchains), thanks to their close relation
with payments and the financial world, demand a stronger form of
anonymity [48, 52]. For example, even the use of zero-knowledge
proofs in blockchains [13, 66, 75] is undermined unless users submit
transactions through a Tor-like service. Designing and implement-
ing practical and scalable systems for anonymous communication
with stronger anonymity guarantees is, therefore, an active and
important area of research and development [3, 33, 49, 59, 77].
Anonymous Communication from MPC. Secure multi-party
computation (MPC) is a natural approach for building distribu-
ted applications with strong privacy guarantees. MPC has recently
made great strides towards practical implementation and real-world
deployment and consequently, several general-purpose compilers
(or front-ends [51]) and implementations are now available sup-
porting a range of performance and security tradeoffs [4, 8, 15,
26, 40, 55, 56, 78]. Recent implementation efforts [8, 26, 73] have
bolstered their security guarantees by focusing on the malicious
rather than semi-honest setting (i.e., they tolerate Byzantine faults),
and can scale to larger networks (e.g., more than 100 servers) while
tolerating an appreciable number of faults. Further, in contrast to
early MPC realizations centered around one-off ceremonies [16, 17],
there has been increased interest in the MPC system-as-a-service
(MPSaaS) [3, 8, 46, 65] setting, where a network of servers continu-
ously process encrypted inputs submitted by clients. As scalable and
maliciously secure MPSaaS becomes increasingly practical, there’s
an increasingly more convincing argument that it can be success-
fully used for highly desirable internet services such as anonymous
communication.
The Need for Robustness in MPC. Despite the aforementioned
progress towards practical MPC, in this paper, we highlight ro-
bustness as an essential missing component. All of the MPC imple-
mentations we know of do not guarantee output delivery in the
presence of even a single active fault. Even worse, these implemen-
tations do not guarantee fairness, in the sense that an adversary
can see the output even if the honest servers do not. In the context
of an anonymous communication service, unfair MPC could be
catastrophic since an adversary could link the messages of clients
who retry to send their message in a new or restarted instance.
Thus the primary goal of our work is to fill this gap by advancing
robustness in practical MPC implementations and demonstrating
the result through a novel robust message mixing service.
Session 4C: Secure Computing IIICCS ’19, November 11–15, 2019, London, United Kingdom887Challenges in Providing Robust MPC. For MPC based on ad-
ditive (n-of-n) secret sharing such as SPDZ [40] and EMP [78], the
guaranteed output is inherently infeasible. However, even among
guaranteed output protocols based on Shamir sharing, we find that
the vast majority [10, 38, 39, 41, 53] are sensitive to assumptions
about network synchrony. In short, their confidentiality and in-
tegrity guarantees rely on synchronous failure detectors, such that
if a server is temporarily unresponsive, then it is "timed out" and
ejected from the network and the fault tolerance among the surviv-
ing servers is reduced. If t honest parties are timed out, e.g., because
of a temporary network partition, then a single corruption among
the remaining servers could compromise the client’s confidential
inputs. Hence for a robust distributed service based on an MPC, we
would desire safety properties even in an asynchronous network. In
this setting, a Byzantine fault tolerance of t < n/3 is a lower bound
even for agreement tasks that do not require any confidentiality.
Our Approach: Asynchronous MPSaaS. To address the above
challenges, we base our message mixing service, AsynchroMix, on
a new MPC implementation, called HoneyBadgerMPC, which is the
first to guarantee fairness and output delivery in a malicious setting
without depending on network timing assumptions. AsynchroMix
proceeds in asynchronous epochs, wherein each epoch the sys-
tem selects a subset of k clients and mixes their inputs together
before publishing them. Unlike HyperMPC [8], which relies on a
central coordinator service, HoneyBadgerMPC employs asynch-
ronous broadcast protocols to receive secret shared inputs from
untrusted clients and initiate mixing epochs in a robust and distribu-
ted way. Like many MPC protocols, HoneyBadgerMPC relies on the
online/offline preprocessing paradigm. In our protocol the cost of
the offline phase is comparable to that of the online phase, hence it
can run continuously in the background as mixing proceeds. While
the online phase is entirely robust, more efficient (but non-robust)
protocols are chosen to generate preprocessing elements in the
offline phase. In this way, less work is required overall and a buffer
of preprocessed values can be used to guarantee robustness in the
presence of faults.
Realizing Low-Latency, Robust Mixing. We evaluate two ap-
proaches for mixing inputs in MPC. The first is straightforward and
implements a switching network [34] that requires log2
k rounds
and O(nk log2
k) communication to shuffle k client inputs. To im-
prove on this, we present PowerMixing, a novel mixing technique
for reducing the number of rounds to two and the communication
overhead to only O(nk) by increasing computation to O(nk + k
3)
per node. We show that this allows for messages to be mixed with
a lower latency than we could otherwise achieve, with larger mixes
being available to servers with more computational power.
• Robust MPC System-as-a-Service. We advocate for a new op-
erating point for MPC implementations, which features a robust
online phase, but an efficient non-robust offline phase used to fill a
buffer of preprocessing values. This fills a gap between protocols
from the literature, which forego an important security property
(asynchronous safety) in order to provide a robust offline phase,
and implementations, which are not robust at all. We also show
how to use fully-distributed asynchronous broadcast primitives,
To summarize our contributions,
rather than a central cloud coordinator (like MATRIX [8]), to
receive client inputs and initiate MPC computations.
• Novel MPC program for mixing. We design and implement a
novel MPC program that can mix an arbitrarily large number of
messages in only two communication rounds. We evaluate this
program against a switching network implementation and show
the operating points at which it demonstrates mixing with lower
latency. We also demonstrate a method to create arbitrarily many
powers of a shared secret in one online communication round,
which may be of independent interest.
• First implementation of robust asynchronous MPC. As a
practical contribution, our prototype offers the first implemen-
tation of asynchronous MPC primitives with the guaranteed
output which may be employed for robust secure computations
beyond anonymous broadcast. In our cloud-based distributed
experiments, we show it is practical to mix inputs from up to
k = 4096 clients using n = 100 servers located across five conti-
nents just in a few minutes of end-to-end latency. Additionally,
using our novel low-latency mixing program, we can mix a more
modest k = 512 messages in just over 20 seconds.
2 PRELIMINARIES: MPC BASED ON SHAMIR
SECRET SHARING
Our standard MPC setting involves n parties {𝒫1, . . . ,𝒫n}, where
up to t < n/3 of those can be compromised by a Byzantine adver-
sary. HoneyBadgerMPC relies on many standard components for
MPC [10, 28, 31, 41] based on Shamir secret-sharing [71]. Here, we
detail the most relevant techniques and notation.
t
2.1 Shamir Secret Sharing and Reconstruction
Notation. For prime p and a secret s ∈ Fp,(cid:74)s(cid:75)t denotes Shamir
secret sharing (SSS) with threshold t (i.e., a t-sharing). Specifically, a
degree-t polynomial ϕ : Fp → Fp is sampled such that ϕ(0) = s. The
share(cid:74)s(cid:75)(i)
is the evaluation ϕ(i). The superscript and/or subscript
of a share may be omitted when clear from the context.
s from(cid:74)s(cid:75) requires interpolating the polynomial ϕ from shares
Robust interpolation of polynomials. Reconstructing a secret
received from other parties. Since we want to achieve security
against an active (Byzantine) attacker, up to t of the shares may be
erroneous. Furthermore, in an asynchronous network, we cannot
distinguish a crash fault from an intentional withholding of data
and can consequently only expect to receive shares from n − t
parties in the worst case.
Figure 1 outlines the standard approach [10, 28, 30, 31] for robust
decoding in this setting, Robust-Interpolate. First, we optimistically
attempt to interpolate a degree-t polynomial ϕ after receiving any
t + 1 shares. If the resulting ϕ coincides with the first 2t + 1 shares
received, then we know it is correct. If the optimistic case fails, we
wait to receive more shares and as they arrive to attempt to correct
errors. In the worst case, we receive t incorrect shares and need to
wait for 3t + 1 total shares before we can correct t errors and find a
degree-t polynomial that coincides with all 2t + 1 honest shares.
In Appendix A we discuss implementations of RSDecode and
Interpolate. We use FFTs to achieve robust decoding with quasi-
n) computational cost),
linear overhead (i.e., incurring an O(n log2
Session 4C: Secure Computing IIICCS ’19, November 11–15, 2019, London, United Kingdom888rather than superlinear algorithms based on Vandermonde matrix
multiplication which incur ≈ O(n
2) overhead.
Algorithm Robust-Interpolate
• Input: y0, ..., yn−1 symbols, up to t erasures (yi ∈ Fp ∪ {⊥})
• Output: a0, ..., at , coefficients of a degree-t polynomial ϕ, such
that yi = ϕ(αi) for i ∈ I where I ⊂ [1..n] and |I| = 2t + 1, or
else ⊥
• Procedure (case of t erasures):
(1) Interpolate a polynomial ϕ from any t + 1 points (yi , αi)
(2) Output ϕ if it coincides with all 2t + 1 points, otherwise
output ⊥
• Procedure (case of t − e erasures):
(1) Run RSDecode decoding to correct up to e errors
Figure 1: Robust Polynomial Interpolation
secrets(cid:74)x1(cid:75), . . . ,(cid:74)xt +1(cid:75) into a set of sharings(cid:74)y1(cid:75), ...,(cid:74)yn(cid:75). In the
(cid:74)yi(cid:75)(j) and sends it to 𝒫i. Each 𝒫j then uses Robust-Interpolate to
xi ← Open((cid:74)xi(cid:75)) for reconstructing an individual share, implicitly
Batch reconstruction. We recall an algorithm for the amortized
batch public reconstruction (BatchRecPub) of t-sharings for the
t < n/3 setting by Damgård and Nielsen [41] in Figure 2. The
idea is to apply a Vandermonde matrix M to expand the shared
first round, each server 𝒫j locally computes their shares of each
reconstruct a different share yj. In the second round, the servers
exchange each yj, and again use Robust-Interpolate to recover
x1, ..., xt +1. When defining an MPC program, we use the notation
making amortized use of the BatchRecPub protocol.
2.2 SSS-Based MPC
Linear combinations of SSS-shared secrets can be computed locally,
preserving the degree of secret sharing without any necessary in-
teraction between parties. However, in order to be able to realize an
arbitrary arithmetic circuit using MPC, we need a way to multiply
secrets together. In this work, we use Beaver’s trick to multiply two
t-sharings(cid:74)x(cid:75)t and(cid:74)y(cid:75)t by consuming a preprocessed Beaver triple.
Beaver triples are correlated t-sharings of the form(cid:74)a(cid:75)t ,(cid:74)b(cid:75)t ,(cid:74)ab(cid:75)t ,
for random a, b ∈ Fp which can be used to find(cid:74)xy(cid:75)t by using the
(cid:74)ab(cid:75)t = (a − x)(b − y) + (a − x)(cid:74)y(cid:75)t + (b − y)(cid:74)x(cid:75)t +(cid:74)xy(cid:75)t .
If a and b are random and independent of x and y, then Open((cid:74)a − x(cid:75))
and Open((cid:74)b − y(cid:75)) do not reveal any information about x or y. Each
multiplication then requires the public opening of (a−x) and (b−y)
and the spending of a Beaver triple.
We follow the standard online/offline MPC paradigm, where the
online phase assumes it can make use of a buffer of preprocessed
values that were created during the offline phase. By utilizing pre-
computed triples and using BatchRecPub to open (a−x) and (b−y)
for many multiplication gates at once, we can process many gates
at the same circuit depth simultaneously.
Offline phase. In order to fulfill the computational needs of our
online phase, we need to generate a steady supply of Beaver Triples
following identity:
Protocol BatchRecPub
• Input:(cid:74)x1(cid:75), . . . ,(cid:74)xt +1(cid:75)
• Output: x1, . . . , xt +1
• Procedure (as server 𝒫i):
(1) Let M be the (n, t + 1) Vandermonde matrix Mi, j = α
evaluating a degree-t polynomial at (α1, ..., αn).
(2) Compute ((cid:74)y1(cid:75), . . . ,(cid:74)yn(cid:75))T := M((cid:74)x1(cid:75), ...,(cid:74)xt +1(cid:75))T
(3) (Round 1) For each j, send(cid:74)yj(cid:75) to party 𝒫j.
(4) Wait to receive between 2t + 1 and n shares of(cid:74)yi(cid:75) and
decode yi using Robust-Interpolate.
(5) (Round 2) Send yi to each party Pj.
(6) Wait to receive between 2t +1 and n values y′
j
decode x1, ..., xt +1 using Robust-Interpolate.
, then robustly
j
i
Figure 2: Batch Reconstruction [10, 28, 41]
offline (prior to when inputs for an MPC circuit are given). As the
offline phase can be run for an indefinite amount of time, we relax
the robustness requirements and focus on more efficient protocols.
In this way, the offline phase can proceed with less work while still
gradually building up a buffer and allowing for guaranteed output
in the online phase.
hyperinvertibility property of M ensures that if all of the inputs are
((cid:74)r1(cid:75), ...,(cid:74)rn(cid:75)) := M((cid:74)s1(cid:75), ...,(cid:74)sn(cid:75))
unknown, despite of the influence of t corrupt parties. To check that
the secret sharings are of the correct degree, 2t + 1 of the servers
The first step of the offline phase is randomness extraction [10],
where secret-shared random values are produced from the contribu-
tions of different servers. To produce t-sharings of random elements
of Fp, we apply an (n, n) hyperinvertible matrix M, (concretely, a
Vandermonde matrix) and compute