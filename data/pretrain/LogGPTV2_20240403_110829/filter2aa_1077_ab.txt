# Secure Boot Image Authentication API

- The API is designed to be called from Secure mode.
- Implementations access secure addresses.
- The Image Authentication API requires Secure/Privileged mode.
- Entrypoints are discovered via tables located inside ROM.

## Breaking TrustZone-M: OXIDE Plan of Attack

1. Identify the ROM API used by secure code.
2. Use the ROM Patch Controller to inject code into that ROM API.
3. Wait for the secure code to invoke the API.
4. Exploit the injected code for unauthorized access or control.

## TrustedFirmware-M (TF-M)

- **Reference Implementation**: TF-M is a reference implementation of ARM’s Platform Security Architecture (PSA).
- **API Definition**: PSA defines an API for common secure services offered to non-secure applications.
- **Vendor Flexibility**: Designed to allow different vendors for secure and non-secure code.
- **Core Services**:
  - Cryptography
  - Initial Attestation
  - Internal Trusted Storage (ITS)
  - Root of Trust (RoT) Lifecycle
- **Supported Devices**: Upstream support for LPC55S69.
- **More Information**: [TrustedFirmware.org](https://www.trustedfirmware.org/projects/tf-m/)

## Internal Trusted Storage (ITS)

- **API Access**: Callable from Non-Secure code.
- **Implementation Requirement**: Must be implemented in Secure mode.
- **Storage Interaction**: Interacts with flash memory.
- **ROM Flash API Usage**: Uses the ROM Flash API.
- **Security Features**: Provides confidentiality and integrity protection for limited storage of persistent data against physical and logical attacks.
- **Isolation Levels**: Implementations providing isolation levels 2 or 3 must implement the PSA ITS Service within the PSA RoT, isolated from Application Root of Trust clients.

## Building a Proof of Concept (PoC)

### PoC Plan of Attack

1. Build an unmodified TF-M v1.2 Secure image.
2. Build a Non-secure application.
3. Write a payload that fits in approximately 24 bytes.
4. Use the ROM Patch Controller to copy the payload into empty space in ROM.
5. Use the ROM Patch Controller to patch the `Flash_Write` ROM API to call the payload.
6. Use the ITS API to write something.
7. Verify that the payload was executed.

### TF-M Flash Layout (Without Bootloader)

- **SAU and MPC Configuration**:
  - Debug boot spew from TF-M Secure.
  - Excluded in normal builds.
  - Reported configuration does not change.
  - **Access Control**: Non-secure code cannot access secure flash.

### Patching the `Flash_Write` ROM API

- **PoC Payload**: A 20-byte payload.
- **Verification**: Confirm the start of secure flash to verify compromise.

## Responsible Disclosure Process

1. **Write up Findings**: Document the vulnerability details.
2. **Disclose to Vendor**: Share the findings with the vendor.
3. **Wait for Response**: Allow up to 90 days for the vendor to respond.
4. **Coordinate Fixes and Public Disclosure**: Work with the vendor on mitigation and public disclosure.

### Disclosing Findings to Vendor

- **Finding Contact Information**:
  - Support? No
  - Company? No
  - Footer? No
  - Contact Us? No
  - Contact Support? Finally!

### Example of Vendor Response

```plaintext
Hi Rick,

Thank you for your follow-up and apologies for the delay. The product team has confirmed Laura's findings and is investigating possible mitigations. The team will propose possible mitigations to address this vulnerability shortly, by restricting access to the ROM patch controller.

NXP would like to thank you and Laura for your responsible disclosure.

Kind Regards,
Asim
NXP PSIRT
```

### Coordination on Fixes and Public Disclosure

- **Dramatization**: Shared with NXP's permission.

### Disclosure Timeline

- **Initial Disclosure**: 2020-12-16
- **Oxide Requests Confirmation**: 2020-01-11
- **NXP Confirms and Works on Mitigations**: 2020-01-12
- **Oxide Requests Update on Disclosure Timeline**: 2020-02-03
- **NXP Proposes Narrower Scope**: 2020-02-08
- **Oxide Provides PoC**: 2020-02-24
- **NXP Requests Extension**: 2020-03-05
- **Oxide Agrees to Extension with Conditions**: 2020-03-10
- **NXP Provides Some Answers Under NDA**: 2020-03-26
- **Public Disclosure**: 2020-04-30

### Public Disclosure

- **Oxide**:
  - CVE-2021-31532
  - Blog post
  - Tweets
  - DEFCON Talk
- **NXP**:
  - Security Bulletin 04/2021 emailed to select customers
  - Updated User Manuals

### Affected Devices

- **LPC55S6x Variants**: All variants affected.
- **LPC552x**:
  - Includes ROM Patch Controller.
  - Lacks TrustZone-M.
  - Escalation from unprivileged to privileged mode still possible.
- **LPC553x**:
  - Includes the ability to lock ROM Patch Controller configuration.
  - ROM intentionally does not do so before starting user code.
- **Other Products**: Many other LPC and i.MX RT products also include the ROM Patch Controller.
- **Full List**: NXP has not provided a full list of devices.

### Takeaways

- **TrustZone-M Configuration**: Difficult to configure correctly.
  - Starts from secure/privileged mode with everything enabled.
  - User code needs to drop permissions.
- **Undocumented Hardware**: SoCs contain undocumented hardware.
  - Cannot drop a peripheral’s privileges if unaware of its existence.
  - NXP does not see this as an issue.
- **Secure Defaults**: Reference implementations often lack secure defaults.
  - Both TF-M and NXP examples leave many security controls disabled.
- **ROM Source Secrecy**: Keeping ROM source secret does not improve security.