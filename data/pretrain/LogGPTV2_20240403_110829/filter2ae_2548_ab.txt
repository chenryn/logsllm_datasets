[ADBHoney](https://github.com/huuck/ADBHoney) | 一个计语TCP/IP的Android调试桥的低交互蜜罐  
[ciscoasa](https://github.com/cymmetria/ciscoasa_honeypot) | Cisco
ASA防火墙的低交互蜜罐，能够检测CVE-2018-0101、DoS和远程代码执行漏洞  
[citrixhoneypot](https://github.com/t3chn0m4g3/CitrixHoneypot) |
检测和记录CVE-2019-19781(Citrix ADC的RCE)扫描和攻击尝试  
[conpot](https://github.com/mushorg/conpot) | 一个低交互式的工业控制系统的蜜罐  
[cowrie](https://github.com/micheloosterhof/cowrie) | 一个中等交互式的 SSH / Telnet 蜜罐  
[dionaea](https://github.com/DinoTools/dionaea) | 一个基于 Python
开发的低交互蜜罐，设计目的是诱捕恶意攻击，获取恶意攻击会话与恶意代码程序样本  
[elasticpot](https://github.com/schmalle/ElasticpotPY) | 一个 Elasticsearch 的蜜罐  
[glastopf](https://github.com/mushorg/glastopf) | 一个 Python 语言开发的 Web
蜜罐，能提供各种基于漏洞类型的模拟  
[glutton](https://github.com/mushorg/glutton) | 一款低交互蜜罐  
[heralding](https://github.com/johnnykv/heralding) | 一款可收集凭证的蜜罐（下文有详细介绍）  
[honeypy](https://github.com/foospidy/HoneyPy) | 一款低交互的蜜罐，但是具有更多的中等交互蜜罐的能力  
[honeytrap](https://github.com/armedpot/honeytrap/) | 一个低交互式的蜜罐，通过监听 NFQUEUE
用户态数据包，相当与就监听了所有其他未监听的端口  
[mailoney](https://github.com/awhitehatter/mailoney) | 一个 SMTP 蜜罐  
[medpot](https://github.com/schmalle/medpot) | 也是一款SMTP蜜罐  
[rdpy](https://github.com/citronneur/rdpy) | 一个用 Python 实现的 RDP 和 VNC
协议，可以用作服务端以及客户端，也提供 RDP 的蜜罐，用于记录 RDP 过程  
[tanner](https://github.com/mushorg/tanner) |
一种远程数据分析和分类服务，用于评估HTTP请求和组合响应，然后由snare事件提供服务  
同时集成的其他非蜜罐的工具有cyberchef(一个用于加密、编码、压缩和数据分析的web应用程序)、evs(从多个蜜罐源收集信息，并将其发布到中央收集服务，如DTAG预警系统和hpfeed)、fatt(用于从pcapfile和实时网络通信中提取网络元数据和指纹)、heimdall(Web应用程序的仪表板)、hyfeeds(蜜网项目通用认证数据路由协议)、p0f(利用一系列复杂的流量指纹识别，被动的来识别
TCP/IP
通信的对方信息)、spiderfoot(开源的足迹和情报收集工具)、Suricata(一个网络IDS、IPS和网络安全监控引擎)和Nginx等。
其官方架构图如下所示（通过架构图能很直观的看明白T-Pot的架构）：
###### > 本地搭建测试
T-Pot
19.03运行在Debian上，官方文档说支持三种安装方式：裸设备安装（基于iso镜像）、基于现有系统安装和云部署。刚开始用的第一种方法，用官方提供的iso在Vmware安装，安装都是自动化的，但是安装完成后服务一直无法启动，可能是因为源的问题，导致很多依赖包没有下载下来。试了很多次，无奈国外的源实在是太慢，第一种方法“夭折”~
试了第二种方法，先在Vmware装了个Debian 9.9.0的虚拟机，然后再进行安装。参考这篇文章：[开源蜜罐T-pot
19.03安装和使用](https://blog.csdn.net/yyws2039725/article/details/91353690)中基于现有系统安装的方法。文中很多修改源的操作一定要修改，不然真的好慢好慢......
但是，漫长的等待过后，虚拟机重启了，以为装完了，但是打开发现镜像全是down的，启动不起来。心力交瘁，懒得折腾了，盗张官方的图吧：
###### > 说明
T-Pot很强大，是个很棒的项目。但是无奈搭建起来较麻烦。其次，T-Pot集成的蜜罐项目太多，再加上Suricata、ELK，整个项目太庞大了，可视化的Kibana面板是很炫，但是运营起来需要花费的精力很大，在中小型互联网企业，运营起来有难度。
##### (3) MHN
###### > 简介
MHN（Modern Honey
Network）：开源蜜罐，支持快速部署传感器并立即收集数据,可以从整洁的Web界面查看。用ThreatStream来部署，数据存储在MOngoDB中，安装了入侵检测系统的部署传感器Snort、Kippo、Conpot和Dionaea。收集的信息可以通过Web接口进行展示。据官方说法，
**目前经测试支持部署MHN服务器的系统有Ubuntu 14.04, Ubuntu 16.04, Centos 6.9**
。MHN是一个Flask应用，为蜜罐提供HTTP的api，各个蜜罐可通过api下载部署脚本，连接，下载snort规则，发送检测日志等。其架构图如下所示：
###### > 本地搭建测试
MHN的搭建不难，官方提供了自动化的安装脚本install.sh。但是碍于很多依赖被qiang，下载起来也很慢。搭建的时候注意，官方说支持在Ubuntu
18.04, Ubuntu 16.04和Centos
6.9上搭建部署，自动化脚本里对版本有校验，最好选择这三个版本的机器进行搭建。运行install.sh，安全速度很慢，然后睡觉去了，第二天早上起来发现装完了。
详细的安装、配置和操作可以参考 **backlin**
师傅的这篇文章：[MHN蜜罐系统建设](https://www.cnblogs.com/backlion/p/10656399.html)。
搭建完成后，是没有传感器（蜜罐节点）的，页面里内容都是空的。在Deploy里可以选择蜜罐的，对应会有该蜜罐的部署脚本，可以选择性安装部署。
比如选择Dionaea(捕蝇草)，显示出的脚本如下所示：
去安装蜜罐的机器上运行该脚本部署就行，部署完成后，Sensors那边就会有一个连接成功的蜜罐节点：
对该蜜罐节点进行nmap扫描，界面上就会有攻击行为的记录，如下图所示：
当然，MHN也可以跟ELK和Splunk进行集成。
###### > 说明
MHN也是个很强大的蜜罐平台，集成了很多个不错的蜜罐。各个蜜罐部署起来很方便，基本可以一键部署。但是在管理蜜罐的时候不是很方便，页面上只能将对应的节点删除，停止和删除蜜罐要去对应的节点上操作，收集的日志也非常多，nmap扫描了一下，200条的日志。
##### (4) Artillery
###### > 简介
Artillery这个项目的介绍是：旨在通过多种办法保护 Linux 和 Windows
操作系统。蜜罐只是这个项目其中的一个功能，其他功能还有监控服务器目录和系统重要文件、对攻击ip进行封禁、邮件告警、对端口开启Dos保护等等。其中蜜罐功能开放的TCP和UDP端口如下：
###### > 开发语言
Python
###### > 本地搭建测试
安装也很简单，把项目git clone下来，直接`python
./setup.py`就ok了。安装完成就自动运行了，查看该蜜罐ls开放的端口如下，跟配置文件中的一致：
当然，这些端口是可以修改的，也可以增加。所有的配置都是在`/var/artillery/config`中进行配置的，包括配置邮件告警、对端口进行开启Dos保护等。
Artillery我搭在外网测试机上，本地nmap扫描了一下，Aetillery记录的攻击日志如下：
还有个封禁ip的功能，监控SSH和FTP爆破的，可以在配置文件中开启，改成"ON"。
开启后，会将所有爆破次数大于4次的ip封禁掉，被封禁的ip存储在`/var/artillery/banlist.txt`中。测试的时候，外网测试机搭建好，几分钟就有上千个ip：
###### > 说明