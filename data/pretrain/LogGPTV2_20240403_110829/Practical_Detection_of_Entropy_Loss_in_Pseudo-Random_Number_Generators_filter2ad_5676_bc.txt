2: if |s||I| = 64 then
3:
4: end if
5: if |s||I| > 64 then
6:
7: end if
8: return S0 = (S1, S2)
S1[0, · · · , 63] = I \ I∗, S1[328, · · · , 347] = hK(s||I∗, h)
S1[0, · · · , 63] = 0, S1[328, · · · , 347] = hK(s||I, h)
0
in the descriptions.
The next Algorithm. This algorithm is described in Algorithm 15. It is implemented with
engineNextBytes. It takes as input an integer n, outputs R, of size n bytes and the updated
internal state S0. Twenty successive bytes outputs are generated as follows: the algorithm
appends S1 and S2, calculates the output with function hK (the compression function) and
increments the counter contained in S2. For clarity, we suppose that n is a multiple of 20 (the
implementation allows any value with intermediate arrays whose description would complicate
the understanding of the algorithm) and we denote c the counter contained in S2. We also use
the same notation (s and h) used for the refresh algorithm.
Algorithm 15 Android SHA1PRNG next
Require: S = (S1, S2) = ([s, · · · , h], [c]), n(n mod 20 = 0)
Ensure: S0, R
1: for i = 0 to n − 1 do
2:
3:
4:
5:
6: end for
7: return S0, R = (S1, S2), ∪
S1[0, · · · , 63] = [s||c], S1[328, · · · , 347] = hK(s||c, h)
c = c + 1, S2 = [c]
Ri = S1[328, · · · , 347]
i = i + 20
Ri
i
— 128 —
7.5. Analysis of OpenJDK SHA1PRNG
Attack. We mount one attack against the Android SHA1PRNG taking in consideration the
internal state decomposition. Our attack is possible because of the use of the compression
function hK instead of the hash function HK, both in the refresh and next algorithms. When
using the compression function hK, the current hash value is used whereas the hash should be
calculated with the initialization vector deﬁned in the speciﬁcation [SHA95]. Again, this attack
identiﬁes a design ﬂaw of the generator. This attack shows that the generator is not resilient
because the attacker only needs to refresh the generator with an input that forces S1 to be
equal to [0]. In addition, if at initialization the internal state is ﬁlled with 64 random bytes, the
generator is not even pseudo-random, because no refresh is needed. The attack is demonstrated
in Theorem 23.
Theorem 23. The pseudo-random number generator with input Android SHA1PRNG is not re-
silient.
Proof. Consider an adversary A against the security of the generator that chooses the following
(one state) distribution D, D(0) = I, where I is of size ‘, where ‘ ≤ 512 and uniformly random
(i.e. D is legitimate with γ0 = ‘). Then A makes the following oracle queries in the security
game RES: one D-refresh, one ﬁrst next-ror with an output R1 of size 20 bytes, and one second
next-ror, with an output R2 of size 20 bytes. Then:
• After D-refresh with I: [S1]63
• After next-ror with R0, [S1]63
0 = 064 with probability 1/64, [S1]347
0 = 064 with probability 1/64, R0 = [S1]347
328 is random, S2 = 0.
328 and S2 = 1, as S1
is not modiﬁed.
• After next-ror with R1, [S1]63
0 = [0||1], R0 = [S1]347
328, but [S1]347
328 = hK(0, R0) with probabil-
ity 1/64.
In this last next-ror-oracle query, A obtains a 20-byte string that is known to A with probability
1/64 as it only relies on the previous output, whereas ideally, this event should occur only with
probability 2−80. Therefore this pseudo-random number generator with input is not resilient.
7.5 Analysis of OpenJDK SHA1PRNG
The OpenJDK provider contains an implementation of a pseudo-random number generator with
input, named SHA1PRNG, directly given in the class SecureRandom. This implementation follows
the speciﬁcation given in the Digital Signature Standard [DSS00]. This speciﬁcation has been
analyzed in [KSWH98], where the authors show that it not a resilient pseudo-random number
generator with input. Here we present new attacks that concern partial corruption of its internal
state of the implementation.
Internal State Decomposition. The internal state of the generator is implemented with
three private ﬁelds, the ﬁeld state, of size 20 bytes, the ﬁeld remainder, of size 20 bytes and an
integer remCount. The decomposition of the internal state is S = (S1, S2, S3), where S1, S2, S3
stand for state, remainder, remCount, respectively. The generator uses this decomposition as
follows: S1 contains the collected entropy, S2 contains random bytes before their output and S3
is used to check if S2 contains enough random bytes that can serve as output.
The refresh Algorithm. This algorithm is described in Algorithm 16. It is implemented with
method engineSetSeed. It takes as input the current internal state S = (S1, S2, S3), a new
input I and outputs the new internal state by mixing S1 with I using HK.
The next Algorithm. This algorithm is described in Algorithms 17 and 18. It is implemented
with two methods; the ﬁrst one, engineNextBytes, generates the output and the second one,
— 129 —
Chapter 7. Security Analysis
Algorithm 16 OpenJDK SHA1PRNG refresh
Require: S = (S1, S2, S3), I
Ensure: S0
1: S1 = HK(S1||I)
2: return S0 = (S1, S2, S3)
updateState, updates the internal state.
The method engineNextBytes takes as input the current internal state S = (S1, S2, S3) and n,
the number of bytes requested. It outputs an n-byte output R and updates the internal state.
The internal counter S3 controls the update of the internal state when output is generated: if
S3 > 0 it means that S2 contains some bytes that have not been used for a previous output,
these bytes can be used for the current output and are then set to 0. Next, S2 and S1 are
updated only if all bytes from S2 have been used: at ﬁrst S2 is updated with S1 (S2 = HK(S1))
and then, S1 is updated using updateState instruction.
Algorithm 17 OpenJDK SHA1PRNG next (engineNextBytes)
Require: S = (S1, S2, S3), n
Ensure: S, R
1: i = t = 0
2: if S3 > 0 then
3:
4:
5:
6: end if
7: while i < n − 1 do
S2 = HK(S1)
8:
S1 = updateState(S1, S2)
9:
t = min n − i, 20
10:
R[i, · · · , i + t − 1] = S2[0, · · · , t − 1]
11:
i ← i + t
12:
13: end while
14: S3 = (S3 + n) mod 20
15: return S1, S2, S3, R
t = min n − i, 20 − S3
R[0, · · · , t − 1] = S2[S3, · · · , S3 + t − 1]
S2[S3, · · · , S3 + t − 1] = [0]
The method updateState is the implementation of the update algorithm speciﬁed in [DSS00].
It takes as input two binary strings S1 and S2 of size 20 bytes and mixes them together byte by
byte.
Algorithm 18 OpenJDK SHA1PRNG next (updateState)
Require: S1, S2, |S1| = |S2| = 160
Ensure: S1
1: ‘ = 1
2: for i = 0 to 19 do
3:
4:
5:
6: end for
7: return S1
v = (S1[i] + S2[i] + ‘)
S1[i] = v mod 28
‘ = v/28
Attack. We mount a memory attack against the OpenJDK SHA1PRNG taking in consideration
the internal state decomposition. Our attack uses the fact that S2 and S3 are not updated
during refresh. After a refresh, if S3 is set by the attacker to 1, the next output will be derived
from a predictable value.
Theorem 24. The pseudo-random number generator with input OpenJDK SHA1PRNG is not
backward secure against memory attacks. To mount an attack against the generator, A needs
to corrupt 4 bytes of the internal state.
— 130 —
7.6. Analysis of Bouncycastle SHA1PRNG
Proof. Let us consider an adversary A against the security of the OpenJDK SHA1PRNG that
chooses the distribution D, such that D(0) = I where I is of size 20 bytes and random (i.e. D
is legitimate with γ0 = 160). Then A makes the following oracle queries in the security game
MBWD: one D-refresh, one M-set-state with M = (0, 0, 1), J = {3} and one ﬁnal next-ror with
an output R of size 10 bytes. Then:
• After D-refresh with I, S1 = HK(I||0), S2 = 0 and S3 = 0.
• After one M-set-state with M = (0, 0, 1), J = {3}, S1 = HK(I||0), S2 = 0 and S3 = 1.
• After one next-ror with n = 10, S1 = HK(I||0), S2 = 0, S3 = 11 and R = 0.
Therefore, A obtains a 10-bytes string in the last next-ror-oracle query that is predictable whereas
this event should occur with probability 2−80. Therefore this pseudo-random number generator
is not backward secure for γ∗ ≤ 160. Note that as the ﬁelds S2 and S3 are not updated during
the refresh Algorithm, A could make suﬃcient calls to D-refresh to mount a similar attack for a
larger value of γ∗.
7.6 Analysis of Bouncycastle SHA1PRNG
The Bouncy Castle Crypto package is a Java implementation of cryptographic algorithms; our
analysis refers to release 1.5 [Bou]. The implementation of several pseudo-random number
generators with input is provided in the package org.bouncycastle.crypto.prng, where the
implementation of the pseudo-random number generator with input SHA1PRNG is in the class
DigestRandomGenerator. The implementation combines a cryptographic hash function (which
is by default HK) with internal instructions that are used to update the internal state of the
generator. In our source code analysis, we identiﬁed ﬁrstly a weakness related to the decompo-
sition of the internal state, and secondly a weakness due to an incomplete state update during
the refresh algorithm. These weaknesses have neither been identiﬁed in [MMS13], nor by the
Bouncycastle community.
Internal State Decomposition. The internal state of the generator is implemented with the
following ﬁelds: seed of size 160 bits, state of size 160 bits, seedCounter of size 64 bits, and
ﬁeld stateCounter, of size 64 bits. The two ﬁrst contain the collected entropy and the two
last are counters that are used for its operations. The total size of the internal state is 448
bits and its decomposition is S = (S1, S2, S3, S4), where S1, S2, S3, S4 stand for seed, state,
seedCounter, stateCounter, respectively.
The refresh Algorithm. This algorithm is fully described in Algorithm 19. It takes as input
the current internal state (S1, S2, S3, S4) and an input I; it outputs a new internal state where
only S1 is updated. It is implemented with the method addSeedMaterial.
Algorithm 19 Bouncycastle SHA1PRNG refresh
Require: S = (S1, S2, S3, S4), I
Ensure: S0
1: S1 = HK(S1||I)
2: return S0 = (S1, S2, S3, S4)
The next Algorithm. This algorithm is described in Algorithms 20 and 21. It is implemented
with the method NextBytes.
It takes as input an integer n, the current the internal state
(S1, S2, S3, S4) and outputs an n-byte string R. The output R is derived from S2, while an
internal method, named generateState is used to update the state.
— 131 —
Chapter 7. Security Analysis
Algorithm 20 Bouncycastle SHA1PRNG next (NextBytes)
Require: S = (S1, S2, S3, S4), n
Ensure: S0
1: S = generateState(S)
2: j = n
3: for i = 0 to j do
if j = 20 then
4:
5:
6:
7:
8:
9:
10: end for
11: return S0 = (S1, S2, S3, S4), R
S = generateState(S)
j = 0
end if
R[i] = S2[i]
i = i + 1
Algorithm 21 Bouncycastle SHA1PRNG next: (generateState)
Require: S = (S1, S2, S3, S4)
Ensure: S0
1: S4 = S4 + 1
2: S2 = HK(S4||S2||S1)
3: if S3 mod 10 = 0 then
4:
5:
6: end if
7: return S0 = (S1, S2, S3, S4)
S3 = S3 + 1
S1 = HK(S1||S3)
The generateState instruction increments the counters S3 and S4 and calculates the new values
of S1 and S2 accordingly.
Attack. We mount an attack against the Bouncycastle SHA1PRNG taking in consideration the
internal state decomposition. This attack is similar as the attack against [DSS00] described
in [KSWH98]: the attacker uses a previously generated output as an input to corrupt the
generator: our attack shows that Bouncycastle SHA1PRNG is not resilient.
Theorem 25. The pseudo-random number generator with input Bouncycastle SHA1PRNG is not
resilient.
Proof. Consider an adversary A against the resilience of the generator that chooses the following
(2-state) distribution D(0) = (1, I, 160, ∅) and D(1) = (2, J, 0, 160), where I and J are of size
20 bytes, I is random and J is known by A (i.e. D is legitimate with γ0 = 160 and γ1 = 0).
Then A makes the following oracle queries in the security game RES: one D-refresh, two next-ror
with two outputs R1 and R2, both of size 20 bytes, one D-refresh, and one third next-ror, with
one output R3 of size 20 bytes. Then:
• After one D-refresh with I, S1 = HK(I||0), S2 = 0, S3 = 1, S4 = 1.
• After one next-ror, with |R1| = 20, S1 remains the same, S2 = HK(S4||S2||S1) = HK(2||0||S1),
S3 = 1, S4 = 2, R1 = S2.
• After one second next-ror, with |R2| = 20, S1 remains the same, S2 = HK(S4||S2||S1) =
HK(3||R1||S1), R2 = S2.
• After one D-refresh with J = [3||R1], S1 = HK(J||S1) = HK(3||R1||S1) = R2.
• After one last next-ror with |R3| = 20, S1 remains the same, S2 = HK(S4||S2||S1) =
HK(4||R2||R2), R3 = S2.
Therefore, A obtains a 20-byte string in the last next-ror-oracle that is predictable (R3 =
HK(4||R2||R2)), whereas this event should occur with probability 2−80. Therefore the pseudo-
random number generator with input Bouncycastle SHA1PRNG is not resilient.
— 132 —
7.7. Analysis of IBM SHA1PRNG
7.7 Analysis of IBM SHA1PRNG
We analyze the pseudo-random number generator with input implemented in IBM’s Java Vir-
tual Machine. Besides Oracle’s Java Virtual Machine, IBM implements its own JVM with some
diﬀerences (in particular in performance) compared to Oracle’s JVM. We analyze the IBM SDK