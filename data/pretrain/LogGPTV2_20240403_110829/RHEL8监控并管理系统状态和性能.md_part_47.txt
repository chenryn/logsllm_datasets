    WantedBy=sysinit.target
    ```
4.  在 `/usr/lib/systemd/`{.literal} 目录中创建一个名为
    `hugetlb-reserve-pages.sh`{.literal} 的新文件并添加以下内容：
    在添加以下内容时，将 [*number_of_pages*]{.emphasis} 替换为您要保留的
    1GB 页面数，[*并使用*]{.emphasis} 要保留这些页面的节点名称替换
    node。
    ``` screen
    #!/bin/sh
    nodes_path=/sys/devices/system/node/
    if [ ! -d $nodes_path ]; then
        echo "ERROR: $nodes_path does not exist"
        exit 1
    fi
    reserve_pages()
    {
        echo $1 > $nodes_path/$2/hugepages/hugepages-1048576kB/nr_hugepages
    }
    reserve_pages number_of_pages node
    ```
    例如，要在 [*node0 上保留两个 `1 GB`{.literal} 页面，在
    node*]{.emphasis} [*1*]{.emphasis} 上保留一个 1GB 页面，将
    [*number_of_pages*]{.emphasis} 替换为 2(node [*0*]{.emphasis} )和
    1(node [*1*]{.emphasis} )：
    ``` screen
    reserve_pages 2 node0
    reserve_pages 1 node1
    ```
5.  创建可执行脚本：
    ``` screen
    # chmod +x /usr/lib/systemd/hugetlb-reserve-pages.sh
    ```
6.  启用早期引导保留：
    ``` screen
    # systemctl enable hugetlb-gigantic-pages
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
::: itemizedlist
-   您可以通过随时写入 `nr_hugepages`{.literal}，尝试在运行时保留更多
    1GB 页面。但是，由于内存碎片，此类保留可能会失败。保留
    `1 GB`{.literal} 页面的最可靠方法是使用此
    `hugetlb-reserve-pages.sh`{.literal} 脚本在启动早期运行。
-   保留静态大页面可以有效地减少系统可用的内存量，并阻止它正确使用内存容量。虽然正确大小的保留大页面池对于使用大页面的应用程序很有用，但保留巨页池的大小过大或未使用的剩余大页面最终将阻碍整体系统性能。在设置保留的巨页池时，请确保系统可以正确利用其完整内存容量。
:::
:::
::: itemizedlist
**其它资源**
-   `systemd.service(5)`{.literal} man page
-   `/usr/share/doc/kernel-doc-kernel_version/Documentation/vm/hugetlbpage.txt`{.literal}
    file
:::
:::
::: section
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#parameters-for-reserving-hugetlb-pages-at-run-time_configuring-huge-pages}在运行时保留 HugeTLB 页面的参数 {.title}
:::
在运行时，使用以下参数来影响 HugeTLB 页面行为。
::: table
[]{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#idm139675499629136}
**表 36.2. 在运行时配置 HugeTLB 页面的参数**
::: table-contents
+----------------------+----------------------+----------------------+
| 参数                 | Description          | 文件名               |
+:=====================+:=====================+:=====================+
| `nr_                 | 定义分配给指定 NUMA  | `/                   |
| hugepages`{.literal} | 节点的               | sys/devices/system/n |
|                      | 指定大小的巨页数量。 | ode/node_id/hugepage |
|                      |                      | s/hugepages-size/nr_ |
|                      |                      | hugepages`{.literal} |
+----------------------+----------------------+----------------------+
| `nr_overcommit_      | 定                   | `/proc/s             |
| hugepages`{.literal} | 义系统可以通过过量使 | ys/vm/nr_overcommit_ |
|                      | 用内存来创建和使用的 | hugepages`{.literal} |
|                      | 额外巨页的最大数量。 |                      |
|                      |                      |                      |
|                      | 将任何非零值写入该文 |                      |
|                      | 件表示系统会从内核的 |                      |
|                      | 普通页面池中获取巨页 |                      |
|                      | 的数量（如果持久的大 |                      |
|                      | 页面池已耗尽）。当这 |                      |
|                      | 些大页面变得未使用后 |                      |
|                      | ，它们会被释放并返回 |                      |
|                      | 到内核的普通页面池。 |                      |
+----------------------+----------------------+----------------------+
:::
:::
:::
::: section
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#configuring-hugetlb-at-run-time_configuring-huge-pages}在运行时配置 HugeTLB {.title}
:::
这个步骤描述了如何向 [*node2*]{.emphasis} [*添加*]{.emphasis} [*2048
kB*]{.emphasis} 巨页。
要根据您的要求保留页面，请替换：
::: itemizedlist
-   [*20*]{.emphasis} 以及您要保留的巨页数量，
-   [*2048KB*]{.emphasis}，带有巨页大小，
-   [*node2*]{.emphasis} 带有您要保留页面的节点。
:::
::: orderedlist
**流程**
1.  显示内存统计信息：
    ``` screen
    # numastat -cm | egrep 'Node|Huge'
                     Node 0 Node 1 Node 2 Node 3  Total add
    AnonHugePages         0      2      0      8     10
    HugePages_Total       0      0      0      0      0
    HugePages_Free        0      0      0      0      0
    HugePages_Surp        0      0      0      0      0
    ```
2.  将指定大小的巨页数量添加到节点：
    ``` screen
    # echo 20 > /sys/devices/system/node/node2/hugepages/hugepages-2048kB/nr_hugepages
    ```
:::
::: itemizedlist
**验证步骤**
-   确保添加了巨页数量：
    ``` screen
    # numastat -cm | egrep 'Node|Huge'
                     Node 0 Node 1 Node 2 Node 3  Total
    AnonHugePages         0      2      0      8     10
    HugePages_Total       0      0     40      0     40
    HugePages_Free        0      0     40      0     40
    HugePages_Surp        0      0      0      0      0
    ```
:::
::: itemizedlist
**其它资源**
-   `numastat(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#enabling-transparent-hugepages_configuring-huge-pages}启用透明大页 {.title}
:::
在 Red Hat Enterprise Linux 8 中默认启用 THP。但是，您可以启用或禁用
THP。
这个步骤描述了如何启用 THP。
::: orderedlist
**流程**
1.  检查 THP 的当前状态：
    ``` screen
    # cat /sys/kernel/mm/transparent_hugepage/enabled
    ```
2.  启用 THP：
    ``` screen
    # echo always > /sys/kernel/mm/transparent_hugepage/enabled
    ```
3.  要防止应用程序分配超过必要数量的内存资源，请禁用系统范围的透明巨页，并只为通过
    `madvise`{.literal} 明确请求的应用程序启用：
    ``` screen
    # echo madvise > /sys/kernel/mm/transparent_hugepage/enabled
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
有时，为短期的分配提供低延迟的优先级高于立即通过长期分配实现最佳性能。在这种情况下，您可以在启用
THP 的同时禁用直接紧凑。
直接紧凑是在巨页分配期间异步内存紧凑。禁用直接紧凑不保证保存内存，但可以降低频繁页面错误时出现较高延迟的风险。请注意，如果工作负载显著受益于
THP，性能会降低。禁用直接压缩：
``` screen
# echo madvise > /sys/kernel/mm/transparent_hugepage/defrag
```
:::
::: itemizedlist
**其它资源**
-   `madvise(2)`{.literal} man page
-   [禁用透明大页](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-huge-pages_monitoring-and-managing-system-status-and-performance#disabling-transparent-hugepage_configuring-huge-pages){.link}.
:::
:::
::: section
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#disabling-transparent-hugepages_configuring-huge-pages}禁用透明大页 {.title}
:::
在 Red Hat Enterprise Linux 8 中默认启用 THP。但是，您可以启用或禁用
THP。
这个步骤描述了如何禁用 THP。
::: orderedlist
**流程**
1.  检查 THP 的当前状态：
    ``` screen
    # cat /sys/kernel/mm/transparent_hugepage/enabled
    ```
2.  禁用 THP：
    ``` screen
    # echo never > /sys/kernel/mm/transparent_hugepage/enabled
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-huge-pages_monitoring-and-managing-system-status-and-performance.html#impact-of-page-size-on-translation-lookaside-buffer-size_configuring-huge-pages}对转换前缓冲大小的影响 {.title}
:::
从页表中读取地址映射非常耗时且耗费资源，因此 CPU
构建时会使用最近使用的地址的缓存，称为 Translation Lookaside
Buffer(TLB)。但是，默认 TLB 只能缓存一定数量的地址映射。
如果请求的地址映射不在 TLB 中（称为 TLB
miss），则系统仍需要读取页表以确定物理地址到虚拟地址映射。由于应用程序内存要求和用于缓存地址映射的页面大小之间的关系，具有大型内存要求的应用程序更有可能遭受
TLB 未命中性能下降的问题，而不是内存要求最低的应用程序。因此，尽可能避免
TLB 未命中非常重要。
HugeTLB 和 Transparent Huge Page 功能允许应用程序使用大于
`4 KB`{.literal} 的页面。这允许 TLB 中存储的地址引用更多内存，这可减少
TLB 未命中并提高应用性能。
:::
:::
[]{#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance}第 37 章 SystemTap 入门 {.title}
:::
作为系统管理员，您可以使用 SystemTap 识别运行 Linux
系统上出现错误或性能问题的底层原因。
作为应用开发人员，您可以使用 SystemTap 详细监控应用程序在 Linux
系统中的行为。
::: section
::: titlepage
# []{#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#the-purpose-of-systemtap_getting-started-with-systemtap}SystemTap 的目的 {.title}
:::
SystemTap
是一款跟踪和探测工具，可用于详细研究和监控操作系统（特别是内核）的活动。SystemTap
提供的信息类似于 `netstat、ps、top`{.literal} ``{.literal} 和
`iostat`{.literal} ``{=html} 等工具的输出。但是，SystemTap
为收集的信息提供更多过滤和分析选项。在 SystemTap 脚本中，您可以指定
SystemTap 收集的信息。
SystemTap
旨在通过为用户提供相应的基础架构来跟踪内核活动并将此功能与两个属性相结合，以此补充现有的
Linux 监控工具套件：
::: variablelist
[[**灵活性**]{.strong}]{.term}
:   SystemTap
    框架允许您开发用于调查和监控内核空间中各种内核功能、系统调用和其他事件的简单脚本。因此，SystemTap
    不再只是一个工具，它是一个可让您开发特定于内核的取证和监控工具的系统。
[[**易于使用**]{.strong}]{.term}
:   SystemTap 允许您监控内核活动，而无需重新编译内核或重新引导系统。