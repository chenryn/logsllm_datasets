switches between different processes and context switches
between user code and kernel code.
Besides, currently most proxies are not transparent to
their users; hence, one end of a TCP connection may re-
gard a transparent proxy as its communication counterpart.
This property may distract other services. First it exposes
the proxy’s identiﬁcation, and thus put it under the direct
ﬁre of malicious users. Second, applications based on IP
addresses, such as bandwidth management tools and trusted
hosts, can no long function as expected, because instead of
the real sources’ addresses, they only see the proxy’s ad-
dress. Third, a vicious user inside a proxied network could
easily disable the whole network’s access to outside servers
whose ﬁrwalls ﬁlter out packets based on their source IP
addresses. All the person need to do is to use the proxy to
connect the target and make the target’s ﬁrewall record the
proxy as a bad guy.
Smart et al. [21] solves OS ﬁngerprinting by normalizing
the trafﬁc. In other words, their method, ﬁngerprint scrub-
ber, eliminates the personal styles (e.g.
initial sequence
number, window size ... and so on) and ambiguities from
trafﬁc to block OS ﬁngerprinting.
Utilizing similar method, trafﬁc normalizer [22] syn-
chronizes TCP connection’s state at both a NIDS and a
protected host, and thus thwarts malicious users’ attempts
to bypass NIDS’s detection. The above method introduces
only a little overhead over the system and could efﬁciently
block the powerful OS ﬁngerprinting tools — NMAP.
But in order to provide more security, there are still some
issues needed to be solved. First, modiﬁcation of TTL ﬁeld
could disable its functionality and result in invalid packets’
circuiting around in the network. Second, normalization
could not normalize all exploration trafﬁc. For example, in
order to protect itself from SYN ﬂood, some OS stops es-
tablishing connections after being unable to ﬁnish several,
say 8, 3-way handshaking processes. As a result, a scanner
can just send 8 forged SYN packets and then makes a real
connection to the target system. All these exploring pack-
ets will not be blocked by the normalizer; hence, later on if
the connection can not be established, then the scanner can
deduce the target system’s OS type, otherwise, the scanner
can know what OS she/he can rule out.
Moreover, both the above methods are not compatible
with SYN cookies which is an useful tool to defeat SYN
ﬂood. Instead of storing state information of an open con-
nection request (such as initialize sequence number and
source IP , destination IP, ... and so on) at a protected
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
host, SYN cookies encode these information in the initial
sequence numbers of the replying SYN/ACK packets. The
SYN/ACK packets could quickly consume up the normal-
izer’s memory, because all these SYN/ACK packets come
from the trusted side of the normalizer , and the normalizer
is asked to establish state information for packets coming
from the trusted side. Due to the above reasons, under SYN
ﬂood attack, maybe the protected host is still alive because
of the protection provided by SYN cookies, but the normal-
izer is already disable due to running out of memory.
As using repeating addresses in attack strings to increase
the chance to have a successful attack, repeating NOP in-
structions right before the injected code are also widely used
in attack strings. Toth and Kruegel’s solution [30] focus on
detecting the appearance of a sequence of NOP instructions
which they call sledge or their equivalences. In their method
they try to dissemble the packet content, and if a substring
of a packet content could be interpreted as a sequence of 30
or more instructions, an alarm is issued. However it is not a
trivial work to disassemble a packet to ﬁnd the longest exe-
cution path which may start at any byte inside that packet.
If an attacker on purpose crafts packets that contains numer-
ous execution paths and all of the paths have length less than
30, than the attacker could issue some kind of DoS/DDoS
attacks upon this approach without being detected.
As CTCP, buttercup [25] also uses addresses as hints to
detect buffer overﬂow attacks. Instead of using a generic
address pattern for all buffer overﬂow attacks, for each in-
dividual attack string, they need to study the targeted pro-
gram and its buggy overﬂowed functions to drive a small
range of possible address that could be used to launch a
successful attack. Later on this address range is used as
a signature of the speciﬁc attack string; therefore, if any
word of a packet’s payload could be interpreted as an ad-
dress within this range, the packet is classiﬁed as an attack
packet. This method simpliﬁes the signatures of known at-
tacks; thus, improves the performance of signature match-
ing. However, for unknown buffer overﬂow attacks, current
buttercup version doesn’t take them into account.
6. Conclusion and Future Work
In this paper we advocate a centralized TCP/IP archi-
tecture, in which the only TCP/IP stack visible to the out-
side world is the one on an organization’s CTCP router. To
demonstrate its usefulness, we show that it can effectively
stop OS ﬁngerprinting and port scanning, the scouting ac-
tivity for most automated attacks, including worms. In ad-
dition, the CTCP architecture greatly facilitate enterprise-
scale deployment of solutions to vulnerabilities due to
TCP/IP implementation bugs, for example, DoS attacks and
TCP connection hijacking attacks. Finally, the CTCP ar-
chitecture provides a ﬂexible platform for developing hon-
eypots that can apply content ﬁltering techniques to iden-
tify and extract attack packets, for example buffer over-
ﬂow attacks. A major concern about the CTCP architec-
ture is that the additional processing may exert serious per-
formance cost on a CTCP router compared with a generic
IP router. Performance measurements on a working CTCP
router shows that the performance cost of the CTCP archi-
tecture is relatively modest.
In fact, the throughput of a
Linux-based CTCP router can actually be higher than that
of a Linux-based IP router, because the former forces the
CPU to pay more attention to Linux’s network subsystem.
Our current algorithm for detecting buffer overﬂow at-
tacks is based on the assumption that some special patterns
(e.g. return address) will repeat in the attack payload. How-
ever, a patient attacker could bypass this detection method
by using attack payload that contains no more than 2 copies
of a special pattern. In the future we plan to remove this as-
sumption by applying run-time binary disassembly to sus-
picious packets. The honeypot in the current CTCP proto-
type cannot carry out a conversation with remote attackers
beyond the initial three-way hand-shake. We plan to im-
prove the honeypot so that it can interact with attackers in
the same way that the service it simulates does, all without
actually running the service daemon.
References
[1]
Fyodor, “The Art of Port Scanning,” 1997.
[2] Oﬁr
Arkin,
“Network
Scanning
Techniques,”
http://www.publicom.co.il, 1999
[3]
Fyodor, “Remote OS Detection via TCP/IP Stack Finger-
Printing,”
http://www.insecure.org/nmap/nmap-
ﬁngerprinting-article.html
[4] Orﬁn Arkin, “ ICMP usage in scanning,” http://www.sys-
security.com/html/projects/icmp.html.
[5]
[6]
[7]
[8]
“P0f
P0f
http://www.stearns.org/p0f/README.
README,
README,”
Jose Nazario, “Passive Fingerprinting using Network Client
Applications,
2000,
http://www.crimelabs.net/docs/passive.html
Nov.
Franck Veysset, Olivier Courtay, Olivier Heen, “New Tool
And Technique For Remote Operating System Fingerprint-
ing,” Intranode Software Technologies, April, 2002.
Fyodor, “Exploit world! Master Index for ALL Exploits, ”
http://www.insecure.org/sploits all.html
[9]
http://www.securiteam.com/exploits/archive.html
[10] Prashant Pradhan, Tzi-cker Chiueh, Anindya Neogi, “Ag-
gregate TCP Congestion Control Using Multiple Network
Probing,” ICDCS 2000.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
[26] Stuart Staniford, Vern Paxson, Nicholas Weaver, “ How to
Own the Internet in Your Spare Time,” Proceedings of the
11th USENIX Security Symposium, 2002.
[27] Nadav Har’El, “Bug in Nonlocal-bind (Transparent Proxy)
http://www.cs.helsinki.ﬁ/linux/linux-kernel/2001-
?,”
22/0678.html.
[28] Alexey Kuznetsov,“Re:Bug in Nonlocal-bind (Transparent
?,”
Proxy)
http://search.luky.org/linux-kernel.2001/msg32060.html.
[29] Wolfgang Zekoll, “tcpproxy - Generic TCP/IP Proxy,”
http://www.quietsche-entchen.de/software/tcpproxy.html.
[30] Thomas Toth, Christopher Kruegel, “Accurate Buffer Over-
ﬂow Detection via Abstract Payload Execution,” Distributed
Systems Group, Technical University Vienna, Austria,
RAID 2002.
[31] D. Ditzel and R. McLellan., “Register Allocation for Free:
The C Machine Stack Cache,” Proc. of the Symp. on Archi-
tectural Support for Programming Languages and Operating
Systems, pp. 48 - 56, March 1982.
[32] Sangyeun Cho, Pen-Chung Yew, Gyungho Lee, “Decou-
pling local variable accesses in a wide-issue superscalar pro-
cessor,” Pro. of the 26th annual international symposium on
Computer architecture, Georgia, United States, 1999.
[33] CERT,
“CERT
Sta-
tistical Weaknesses in TCP/IP Initial Sequence Numbers,”
http://www.cert.org/advisories/CA-2001-09.html
CA-2001-09
Advisory
[34] Laurent Joncheray, “Simple Active Attack Against TCP,”
5th USENIX UNIX Security Symposium, June 1995.
[35]
route—daemon9, “JUGGERNAUT,” Volume 7, Issue 50,
Phrack maganize.
[36] Krauz’s, Pavel. ”HUNT Project.” 1.5 - bug ﬁx release. 30th
May 2000. URL: http://lin.fsid.cvut.cz/ kra/index.html(9th
February, 2001)
[37] Embyte, “gspoof,” http://gspoof.sourceforge.net/
[38] Sandeep Grover, “Buffer Overﬂow Attacks and Their Coun-
termeasures,” Linux Journal, March 10, 2003.
[39] Deokjo Jeon,
“ Understanding DDoS Attacks,
Tools and Free Anti- tools with Recommendation,”
http://www.sans.org/infosecFAQ/threats /Understand-
ing ddos.htm.
[11] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beat-
tie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton, “Stack-
Guard: Automatic Adaptive Detection and Prevention of
Buffer-Overﬂow Attacks,” in Proceedings of 7th USENIX
Security Conference, San Antonio, Texas, Jan. 1998
[12] Tzi-cker Chiueh and Fu-Hau Hsu, “RAD: A Compiler Time
Solution to Buffer Overﬂow Attacks,” Proceeding of ICDCS
2001, Arizon USA, April 2001
[13] Nergal, “The Advanced Return-into-Lib(c) Exploits,” Vol-
ume 10, Issue 58, Phrack.
[14] Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar, “Ad-
dress Obfuscation: An Efﬁcient Approach to Combat a
Broad Range of Memory Error Exploits,” 12th USENIX Se-
curity Symposium, Washington, DC, August 2003.
[15] Honeynet
Porject
team,
“ Honeynet
Project,”
http://www.honeynet.org.
[16] Daniel P. Bovet, Marco Cesati, “Understanding the Linux
Kernel, 2nd edition,” O’Reilly , Dec 2002.
[17] Permeo,
“SOCKS
http://www.socks.permeo.com/AboutSOCKS/
Overview,”
SOCKSOverview.asp.
[18] Mark Grennan, “Firewall and Proxy Server HOWTO,”
http://www.tldp.org/HOWTO/Firewall-
HOWTO.html#toc11
[19] Gopinath K. “N. Kernel Support for Building Network Fire-
walls Based on the Paradigm of Selective Inspection of
Packets at Applicatin Level,” Thesis, Indian Institute of
Technology, Kanpur April 1999.
[20]
Inferno Nettverk, “Dante,” http://www.inet.no/dante/.
[21] Matthew Smart, G. Robert Malan, Farnam Jahanian, “De-
feating TCP/IP Stack Fingerprinting,” USENIX Security
Symposium, Aug. 2000.
[22] Mark Handley, Vern Paxson, and Christian Kreibich, “Net-
work Intrusion Detection: Evasion, Trafﬁc Normalization,
and End-to-End Protocol Semantics,” Proc. USENIX Secu-
rity Symposium 2001.
[23] Trusted Information Systems, “TIS Firewall Toolkit,”
http://www.tis.com
[24] Daniel Kiracofe, “Transparent Proxy with Linux and Squid
Mini-HOWTO,” http://en.tldp.org/HOWTO/ Transparent-
Proxy.html.
[25] A. Pasupulati, J. Coit, K. Levitt, S.F. Wu, S.H. Li,
R.C. Kuo, and K.P. Fan, “Buttercup: On Network-based
Detection of Polymorphic Buffer Overﬂow Vulnerabili-
ties,” Network Operations and Management Symposium
2004(NOMS 2004).
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE