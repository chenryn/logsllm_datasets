    ![Figure 6.16: docker inspect output for the nonenet container ](img/B15021_06_16.jpg)
    图 6.16: docker 检查非网络容器的输出
    `docker inspect`输出将显示该容器没有 IP 地址，也没有网关或任何其他网络设置。
9.  Use the `docker exec` command to access an `sh` shell inside this container:
    ```
    $ docker exec -it nonenet /bin/sh
    ```
    成功执行此命令后，您将被放入容器实例的根外壳中:
    ```
    / #
    ```
10.  Execute the `ip a` command to view the network interfaces available in the container:
    ```
    / $ ip a 
    ```
    这将显示此容器中配置的所有网络接口:
    ```
    1: lo:  mtu 65536 qdisc noqueue state 
    UNKNOWN qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        inet 127.0.0.1/8 scope host lo
        valid_lft forever preferred_lft forever
    ```
    该容器唯一可用的网络接口是其`LOOPBACK`接口。由于此容器未配置 IP 地址或默认网关，通用网络命令将不起作用。
11.  Test the lack of network connectivity using the `ping` utility provided by default in the Alpine Linux Docker image. Try to ping the Google DNS servers located at IP address `8.8.8.8`:
    ```
    / # ping 8.8.8.8
    ```
    `ping`命令的输出应该显示它没有网络连接:
    ```
    PING 8.8.8.8 (8.8.8.8): 56 data bytes
    ping: sendto: Network unreachable
    ```
    使用`exit`命令返回您的主终端会话。
    现在您已经仔细查看了`none`网络，考虑一下`host`网络驱动程序。Docker 中的`host`网络驱动程序是独一无二的，因为它没有任何中间接口或创建任何额外的子网。相反，`host`网络驱动程序与主机操作系统共享网络栈，以便主机可用的任何网络接口也可用于以`host`模式运行的容器。
12.  To get started with running a container in `host` mode, execute `ifconfig` if you are running macOS or Linux, or use `ipconfig` if you are running on Windows, to take inventory of the network interfaces that are available on the host machine:
    ```
    $ ifconfig
    ```
    这将输出主机上可用的网络接口列表:
    ![Figure 6.17: List of network interfaces configured on the host machine ](img/B15021_06_12.jpg)
    图 6.17:主机上配置的网络接口列表
    在本例中，您主机的主要网络接口是`enp1s0`，其 IP 地址为`192.168.122.185`。
    注意
    macOS 或 Windows 上的 Docker Desktop 的某些版本可能无法在`host`网络模式下或使用`macvlan` 网络驱动程序正常启动和运行容器，因为依赖 Linux 内核来提供其中的许多功能。在 macOS 或 Windows 上运行这些示例时，您可能会看到运行 Docker 的底层 Linux 虚拟机的网络详细信息，而不是您的 macOS 或 Windows 主机上可用的网络接口。
13.  Use the `docker run` command to start an Alpine Linux container in the `host` network. Name it `hostnet1` to tell it apart from the other containers:
    ```
    docker run -itd --network host --name hostnet1 alpine:latest
    ```
    Docker 将使用`host`网络在后台启动该容器。
14.  Use the `docker inspect` command to look at the network configuration of the `hostnet1` container you just created:
    ```
    $ docker inspect hostnet1
    ```
    这将以 JSON 格式显示运行容器的详细配置，包括网络细节:
    ![Figure 6.18: docker inspect output for the hostnet1 container ](img/B15021_06_18.jpg)
    图 6.18: docker 检查 hostnet1 容器的输出
    需要注意的是`NetworkSettings`块的输出看起来很像你在`none`网络中部署的容器。在`host`网络模式下，Docker 不会为容器实例分配 IP 地址或网关，因为它直接与主机共享所有网络接口。
15.  Use `docker exec` to access an `sh` shell inside this container, providing the name `hostnet1`:
    ```
    $ docker exec -it hostnet1 /bin/sh
    ```
    这会让你掉进`hostnet1`容器里的一个根壳里。
16.  Inside the `hostnet1` container, execute the `ifconfig` command to list which network interfaces are available to it:
    ```
    / # ifconfig
    ```
    应显示该容器内可用网络接口的完整列表:
    ![Figure 6.19: Displaying the available network interfaces inside the hostnet1 container ](img/B15021_06_19.jpg)
    图 6.19:显示 hostnet1 容器中可用的网络接口
    请注意，此网络接口列表与您直接查询主机时遇到的列表相同。这是因为这个容器和主机直接共享网络。主机可用的任何内容也将可用于在`host`网络模式下运行的容器。
17.  使用`exit`命令结束 shell 会话，返回主机终端。
18.  To understand more fully how the shared networking model works in Docker, start an NGINX container in `host` network mode. The NGINX container automatically exposes port `80`, which we previously had to forward to a port on the host machine. Use the `docker run` command to start an NGINX container on the host machine:
    ```
    $ docker run -itd --network host --name hostnet2 nginx:latest
    ```
    该命令将在`host`网络模式下启动一个 NGINX 容器。
19.  Navigate to `http://localhost:80` using a web browser on the host machine:
    ![Figure 6.20: Accessing the NGINX default web page of a container  running in host networking mode ](img/B15021_06_20.jpg)
    图 6.20:访问在主机网络模式下运行的容器的 NGINX 默认网页
    您应该能够看到在您的网络浏览器中显示的 NGINX 默认网页。需要注意的是`docker run`命令并没有明确的向主机转发或者暴露任何端口。由于容器在`host`网络模式下运行，容器默认公开的任何端口将直接在主机上可用。
20.  使用`docker run`命令在`host`网络模式下创建另一个 NGINX 实例。将此容器称为`hostnet3`，以区别于其他两个容器实例:
    ```
    $ docker run -itd --network host --name hostnet3 nginx:latest
    ```
21.  Now use the `docker ps -a` command to list all the containers, both in running and stopped status:
    ```
    $ docker ps -a
    ```
    将显示正在运行的容器列表:
    ```
    CONTAINER ID  IMAGE         COMMAND                CREATED
      STATUS                        PORTS           NAMES
    da56fcf81d02  nginx:latest  "nginx -g 'daemon of…" 4 minutes ago
      Exited (1) 4 minutes ago                      hostnet3
    5786dac6fd27  nginx:latest  "nginx -g 'daemon of…" 37 minutes ago
      Up 37 minutes                                 hostnet2
    648b291846e7  alpine:latest "/bin/sh"              38 minutes ago
      Up 38 minutes                                 hostnet
    ```
22.  Based on the preceding output, you can see that the `hostnet3` container exited and is currently in a stopped state. To understand more fully why this is the case, use the `docker logs` command to view the container logs:
    ```
    $ docker logs hostnet3
    ```
    日志输出应显示如下:
    ![Figure 6.21: NGINX errors in the hostnet3 container ](img/B15021_06_21.jpg)
    图 6.21:hostnet 3 容器中的 NGINX 错误
    本质上，NGINX 容器的第二个实例无法正常启动，因为它无法绑定到主机上的端口`80`。原因是`hostnet2`容器已经在监听该端口。
    注意
    请注意，在`host`联网模式下运行的容器需要小心谨慎地部署。如果没有适当的规划和架构，容器无序蔓延会导致在同一台机器上运行的多个容器实例之间出现各种各样的端口冲突。
23.  您将调查的下一种本地 Docker 网络类型是`macvlan`。在`macvlan`网络中，Docker 将为容器实例分配一个 MAC 地址，使其在特定网段上显示为物理主机。它可以在`bridge`模式下运行，该模式使用父`host`网络接口获得对底层网络的物理访问，也可以在`802.1Q trunk`模式下运行，该模式利用 Docker 动态创建的子接口。
24.  首先，通过使用`docker network create`命令将主机上的物理接口指定为父接口，使用`macvlan` Docker 网络驱动程序创建一个新网络。
25.  Earlier in the `ifconfig` or `ipconfig` output, you saw that the `enp1s0` interface is the primary network interface on the machine. Substitute the name of the primary network interface of your machine. Since you are using the primary network interface of the host machine as the parent, specify the same subnet (or a smaller subnet within that space) for the network connectivity of our containers. Use a `192.168.122.0/24` subnet here, since it is the same subnet of the primary network interface. Likewise, you want to specify the same default gateway as the parent interface. Use the same subnet and gateway of your host machine:
    ```
    $ docker network create -d macvlan --subnet=192.168.122.0/24 --gateway=192.168.122.1 -o parent=enp1s0 macvlan-net1
    ```
    这个命令应该创建一个名为`macvlan-net1`的网络。
26.  Use the `docker network ls` command to confirm that the network has been created and is using the `macvlan` network driver:
    ```
    $ docker network ls
    ```
    此命令将输出在您的环境中定义的所有当前配置的网络。你应该看看`macvlan-net1`网络:
    ```
    NETWORK ID       NAME            DRIVER     SCOPE
    f4c9408f22e2     bridge          bridge     local
    f52b4a5440ad     host            host       local
    b895c821b35f     macvlan-net1    macvlan    local
    9bed60b88784     none            null       local
    ```
27.  Now that the `macvlan` network has been defined in Docker, create a container in this network and investigate the network connectivity from the host's perspective. Use the `docker run` command to create another Alpine Linux container named `macvlan1` using the `macvlan` network `macvlan-net1`:
    ```
    $ docker run -itd --name macvlan1 --network macvlan-net1 alpine:latest
    ```
    这应该会在后台启动一个名为`macvlan1`的 Alpine Linux 容器实例。
28.  Use the `docker ps -a` command to check and make sure this container instance is running:
    ```
    $ docker ps -a
    ```
    这应该显示名为`macvlan1`的容器按预期启动并运行:
    ```
    CONTAINER ID   IMAGE           COMMAND      CREATED
      STATUS              PORTS              NAMES
    cd3c61276759   alpine:latest   "/bin/sh"    3 seconds ago
      Up 1 second                            macvlan1
    ```
29.  Use the `docker inspect` command to investigate the networking configuration of this container instance:
    ```
    $ docker inspect macvlan1
    ```
    应该显示容器配置的详细输出。以下输出已被截断，仅显示 JSON 格式的网络设置部分:
    ![Figure 6.22: The docker network inspect output of the macvlan1 network  ](img/B15021_06_22.jpg)
    图 6.22:docker 网络检查 macvlan1 网络的输出
    从这个输出中，您可以看到这个容器实例(类似于其他网络模式中的容器)有一个 IP 地址和一个默认网关。根据`Networks`子节下的`MacAddress`参数，还可以得出结论，该容器在`192.168.122.0/24`网络中还有一个 OSI 模型第 2 层媒体访问控制地址。该网段中的其他主机会认为该机器是位于该子网中的另一个物理节点，而不是位于该子网节点内部的容器。
30.  Use `docker run` to create a second container instance named `macvlan2` inside the `macvlan-net1` network:
    ```
    $ docker run -itd --name macvlan2 --network macvlan-net1 alpine:latest