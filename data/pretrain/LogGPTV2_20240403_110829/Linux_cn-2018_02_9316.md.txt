---
**作者**: Richard Fontana  
**分类**: 开源智慧  
**评论数据**: 无  
**统计信息**:
  - 评论数: 0
  - 收藏次数: 0
  - 点赞数: 0
  - 分享次数: 1
  - 浏览量: 4093
**发布日期**: 2018-02-06 18:43:00  
**编辑推荐**: 否  
**摘要**: 想要了解开源许可证对 Linux 容器的影响吗？以下问题你需要知道。  
**原文链接**: https://opensource.com/article/18/1/containers-gpl-and-copyleft  
**文章ID**: 9316  
**是否为原创翻译**: 是  
**大图链接**: /data/attachment/album/201802/06/184358sadosnlnarp9ybqr.png  
**永久链接**: /article-9316-1.html  
**图片链接**: /data/attachment/album/201802/06/184358sadosnlnarp9ybqr.png.thumb.jpg  
**相关文章**: 无  
**审稿人**: 无  
**选择器**: 无  
**简介**: 想要了解开源许可证对 Linux 容器的影响吗？以下问题你需要知道。  
**标签**:
  - 许可证
  - 容器
**缩略图显示**: 否  
**标题**: 容器、GPL 与左版：无需过度担忧  
**标题图片显示**: 是  
**译者**: 薛亮  
**更新日期**: 2018-02-06 18:43:00  
---

> **提要**: 想要了解开源许可证对 Linux 容器的影响吗？以下问题你需要知道。

![](/data/attachment/album/201802/06/184358sadosnlnarp9ybqr.png)

尽管开源软件已经成为主流，但新技术的涌现和旧技术的复兴有时会引发对开源许可证的强烈关注。大多数情况下，焦点集中在 GPL 许可证上，尤其是经常被描述为“左版”（copyleft）范围的问题。具体来说，遵循 GPL 许可证的代码与专有代码结合形成一个单独的修改作品时，专有代码是否也受 GPL 许可证约束？

虽然目前针对 Linux 容器的具体问题还不多，但随着容器的普及，预计未来会有更多相关讨论。然而，可以明确的是，容器不会引发新的或特别的 GPL 范围问题。

法律和判例在解释 GPL 许可证方面帮助有限，而自由软件基金会（FSF）作为 GPL 的起草者和管理者，其解释性观点具有较高的可信度和影响力。FSF 提供了大量关于 GPL 解释的指导，有助于理解容器中 GPL 代码与非 GPL 代码共存的效果。

FSF 在界定左版范围时，主要考虑进程边界以及多个软件组件之间的通信机制和语义，以确定它们的集成程度是否足以被视为单个程序。例如，[GNU 许可证常见问题解答](https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation)指出，在没有足够“密切”通信的情况下，管道、套接字和命令行参数通常被视为独立机制。

在容器环境中，GPL 代码和专有代码可能共存并执行。实际上，容器是一个隔离的用户空间栈。在 [OCI 容器映像格式](https://github.com/opencontainers/image-spec/blob/master/spec.md) 中，代码被打包为文件系统的变更层，基本层通常是一个没有内核的精简 Linux 发行版。这些基本层包括许多遵循 GPL 许可证的软件包，以及许多遵循被认为与 GPL 不兼容的许可证的软件包，并且通常作为专有和开源应用的运行环境。GPL v2 中的“单纯聚合”条款（以及 GPL v3 中有关“聚合”的条款）表明，这种组合通常是可接受的，只要不兼容的组件是分离和独立的，就不会影响两个程序的许可。

当然，在特定情况下，两个组件之间的关系可能不是“单纯聚合”，但这同样适用于非容器化的 Linux 用户空间中的软件。容器或容器映像的技术构成中没有任何暗示表明需要特殊形式的左版范围分析。

当考察运行在容器中的代码和运行在容器外面的代码之间的关系时，几乎肯定会满足“分离和独立”的标准。代码将作为单独的进程运行，使用容器的主要目的是与系统上的其他软件隔离。

现在考虑两个组件的情况，其中一个遵循 GPL 许可证，另一个为专有软件，它们运行在分离但可能交互的容器中，可能是微服务架构的一部分。在没有特别不寻常事实的情况下，我们不应期望看到左版的范围跨越多个容器。分离的容器涉及分离的进程。通过网络接口在容器之间进行通信类似于管道、套接字等机制，多容器微服务场景似乎排除了 FSF 所定义的“密切”通信。使用多个容器的应用程序的组成可能不是 GPL 范围问题的决定因素，但它使组件之间的技术边界更加明显，并为争论“分离性”提供了强有力的基础。这其中也没有容器的技术特征暗示对左版的范围分析应用不同或更严格的方法。

过度担心分发 GPL 代码潜在影响的企业可能会禁止开发人员将此类代码添加到计划分发的容器映像中，以避免依据 GPL 许可证分发代码。然而，常规容器映像的基础层通常包含多个遵循 GPL 的组件。如果该公司将容器映像推送到注册表中，通常无法保证其中不包含基础层，即使它被广泛共享。

另一方面，通过隔离 GPL 代码和专有代码，企业可能会决定采用容器化来减少左版范围的影响。希望这一决策基于技术上的益处，而不是对 GPL 的莫须有的法律担忧。在非容器化环境中，两个相互作用的软件组件之间的关系往往是单纯聚合，容器化所提供的“分离性”证据可能让那些担心 GPL 范围的人感到安慰。

共享容器映像时，可能会出现开源许可证合规义务问题。然而，对于容器来说，没有什么技术上的不同或独特之处可以改变这些义务的性质，或者使它们更难满足。关于左版的范围，容器化应该能够缓解过度的担忧。

**作者简介**:
Richard Fontana 是红帽公司法律部门产品和技术团队的高级商业顾问。他的大部分工作都集中在开源相关的法律问题上。

**译者简介**:
薛亮，集慧智佳知识产权咨询公司高级咨询师，擅长专利检索、专利分析、竞争对手跟踪、FTO分析、开源软件知识产权风险分析，致力于为互联网企业、高科技公司提供知识产权咨询服务。

![](/data/attachment/album/201802/06/184136idk4jss0a42b449t.png)
---