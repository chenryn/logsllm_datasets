Object:
Mode:
researcher Operation: view
/Report//*[count(copies()[/PA]) > 0
deny
Figure 4.3: Rule denying view
pending. This would require another term in the condition which inspects
the value of the corresponding attribute of the PA.
The corresponding rule is depicted in Figure 4.3. The object ﬁeld uses
an XPath pattern, where the path /Report//* denotes that this rule is
applicable to any node of any report.
In other words, we do not restrict
objects to be located at a speciﬁc position within a report. The following
square brackets deﬁne a condition, which uses the count function (predeﬁned
in XPath) to count the number of copies of the current object that reside
in a patent application. As an argument for the count function, we use the
copies function to retrieve all copies of that element in other documents.
The result of the copies function is ﬁltered by another condition in square
brackets. This condition retrieves the root element of the corresponding
document and checks whether its element name is PA. Finally, we check
whether the result of the count function is greater than 0. In this case, the
object matches with the XPath pattern and the viewing of this object is
denied for any subject in the role researcher.
4.7.2 Getting Related Nodes Depending on Time
This group of functions retrieves nodes addressed relatively to the context
node that existed within a speciﬁed time interval. We need this group of
functions, since we store deleted nodes in the history and we want to be
able to access these deleted nodes in conditions. XPath oﬀers functions
to retrieve nodes addressed relatively to the context node, but without the
speciﬁcation of a time interval within which the nodes have existed, since
XPath only considers the current state of a document. This time interval is
required to select related nodes depending on time when they have exisited.
Therefore, each of these functions can have a time interval as parameter,
e.g., childrenAt(t1, t2) returns all nodes that were children of the context
node in the time interval between t1 and t2. To inspect a single point in
time, t2 can be omitted.
If no parameter is speciﬁed, the entire lifetime
of the corresponding document is inspected. When the entire lifetime of a
document is inspected, all current elements, as well as all deleted elements
are returned. As mentioned, all functions can optionally have an element as
ﬁrst parameter. The functions for getting related nodes depending on time
56
CHAPTER 4. MODEL
are listed in Table 4.7.
parentAt
rootAt
childrenAt descendantAt selfAt
followingAt
precedingAt
precedingSiblingAt
followingSiblingAt
Table 4.7: Getting related nodes depending on time
We illustrate the usage of the functions deﬁned above by an example
rule, which is depicted in Figure 4.4. Recall the policy from our scenario
that denies the viewing of a report if it has contained an element from a
patent application. To do this, the XPath pattern of the corresponding
rule inspects all descendants of the root element of the report in question
by using the descendantAt function. By deﬁnition, this function returns all
descendants including deleted nodes. These nodes are ﬁltered by a condition,
which inspects the elements that are in is-copy-of relation with the element
in question. We count whether at least one of these elements is contained in
a patent application (abbreviated by PA).
Role:
Object:
researcher Operation: view
/Report/descendantAt()
[count(copies()[/PA]) > 0]
Figure 4.4: Rule denying view
4.7.3 Getting the Context of a History Entry
This group of functions oﬀers access to the context of a speciﬁc history en-
try. Each function except of getAttrChangeContexts() returns an element
consisting of subject, role and time. In addition to this, the function get-
AttrChangeContexts() also delivers the value to that the corresponding
attribute was changed to. Moreover, we oﬀer functions to retrieve the con-
text of the creation, the deletion and the viewing of nodes. Table 4.8 lists
the functions for retrieving the context of a history entry.
We illustrate the usage of the functions deﬁned above by an example
rule. Recall the policy from the scenario stating that a researcher cannot
delete a section that was created by a senior researcher. The corresponding
rule is depicted in Figure 4.5 and uses the getCreationContext function to
check whether the role of the subject that created the Section is senior
researcher.
In that case, it denies the deletion of Section elements for
subjects in the role researcher.
4.7. ACCESSING THE HISTORY WITH XPATH
57
Function
getCreationContext()
getDeletionContext()
getViewsContexts()
getAttrChangeContexts() changing an attribute
Returns context(s) of
creation of current element
element deletion
viewing a node
Table 4.8: Getting the context of a history entry
Role:
Object:
Mode:
researcher Operation: delete
//Section[getCreationContext()
/role = ’senior researcher’]/*
deny
Figure 4.5: Rule denying deleting of a section
4.7.4 Getting Accessed Nodes
This group of functions is used to get all nodes which have been accessed by a
speciﬁed user or by a user in a certain role. For example, these functions are
required to express Chinese Wall policies [BN89]. The functions are created,
viewed, accessed, deleted, changedAttr and copied. Each function refers
to a speciﬁc operation, e.g., viewed returns viewed nodes. In addition, the
function accessed returns all accessed nodes independently of the operation
and modified returns nodes that have been modiﬁed. All functions have two
parameters that deﬁne conditions on the returned nodes. The ﬁrst parameter
user speciﬁes to return only nodes that have been accessed by the speciﬁed
user. Analogously, we deﬁne the parameter role. Both parameters can be
set to any to indicate to return nodes accessed by any user or in any role.
Optionally, each parameter can be set to current. In this case, the current
user or his current role is used for the check. For example, created(any,
current) returns all nodes which have been created by users who were active
in the same role as the one in which the current user is active in. The
functions of this group are summarized in Table 4.9. We present example
rules using the functions of this group in Section 4.8.
4.7.5 Getting Speciﬁc Nodes of Current Rule
We deﬁne three functions for accessing speciﬁc nodes within an XPath pat-
tern. The function currentNode returns the node in question for which the
XPath pattern is evaluated. This function is required when the pattern’s
context changes to a document that is diﬀerent from the document for which
58
CHAPTER 4. MODEL
Function
created()
viewed()
accessed()
deleted()
changedAttr() all changed attributes
copied()
Returns
all created nodes
all viewed nodes
all accessed nodes
all deleted nodes
all copied nodes
Table 4.9: Getting accessed nodes
the pattern was initiated. The function srcNode retrieves the source node
in question when checking a copy rule.
In a similar fashion, the function
destNode returns the destination node of a copy rule. The last two functions
are necessary to deﬁne copy rules which compare the source and destination
objects with each other. The functions of this group are listed in Table 4.10.
We present example rules example rules using the functions of this group in
Section 4.8.
Returns
Function
currentNode() inspected node of a unary rule
srcNode()
destNode()
inspected source node of a copy rule
inspected destination node of a copy rule
Table 4.10: Getting speciﬁc nodes of a rule
4.7.6 Additional Extension Functions
This group of functions are required for rules that need to inspect the cur-
rent subject, the role of the current subject or whether a speciﬁc node is
deleted. The functions of this group are currentSubject, currentRole and
isDeleted. These functions provide information that is not available within
XPath patterns and can be required in a variety of rules. The functions of
this group are summarized in Table 4.6.
4.8 Modeling Chinese Wall policies
We conclude this chapter by presenting three example rules that demonstrate
how our model can be used to express the policies of the Chinese Wall model
mentioned in the scenario in an eﬀective and ﬂexible way. We show that
4.8. MODELING CHINESE WALL POLICIES
59
Returns
Function
currentSubject() the current subject
currentRole()
isDeleted()
the role of the current subject
true if the node is deleted, otherwise false
Figure 4.6: Additional functions
our model is better suited for real world scenarios, since it can avoid the
unnecessary restrictions of the original Chinese Wall model.
The Chinese Wall model (described in detail in Section 2.1.3) includes two
policies to deﬁne access, namely the “read policy” and the “write policy”.
The ﬁrst policy is used for read and execute access and states that access to
an object is only granted if the accessing subject did not access any object of
the same conﬂict-of-interest class that belongs to a diﬀerent company. As a
consequence, after an access to one object, all objects of the same class that
belong to diﬀerent company data sets are unaccessible for that subject.
Figure 4.7: An example of the objects in the CWM
The read policy alone is insuﬃcient, because unwanted data transfers
that enable misuse of insider knowledge are still possible via multiple steps.
Consider the following example depicted in Figure 4.7. We have two conﬂict-
of-interest classes, namely banks and oil companies. A subject s1 reads object
o1, which belongs to “Bank A” and writes the corresponding data to object o8,
which belongs to “Oil Company A”. After that, the subject s2 reads that data
from o8 and writes it to object o4, which belongs to “Bank B”. This transfer
is unwanted since o4 belongs to a competitor of “Bank A”. As a consequence,
the “write policy” is deﬁned to prevent these unwanted transfers. It allows
to write data to an object only if the previous read accesses refer to the same
company data set or the read information is public. Next, we model the
policies of the Chinese Wall model with our history-based approach.
BanksPetroleum CompaniesBank ABank BBank COil Company AOil Company Bo2o3o4o5o6o7o1o8o9o10o11o12o1360
CHAPTER 4. MODEL
We assign a conﬂict-of-interest class and a company to each document by
adding the attributes class and company to its root element. This approach
is reasonable, since each document typically refers to one company. Assigning
these attributes to each element can lead to ambiguous semantics regarding
the part-of relation of elements which are assigned to diﬀerent companies.
For example, if a “Bank A” element has children that are assigned to “Oil
Company B” it is unclear whether these children are regarded to belong to
“Bank A” because they are part of a “Bank A” element.
Next, we deﬁne a set of rules which allow users to execute all operations
on any object, e.g., {employee, view, allow, //*}. Then, we specify two
rules that take precedence over the allow rules and deny accesses that are
not permitted according the policies of the Chinese Wall model. The ﬁrst
rule corresponds to the read policy and is depicted in Figure 4.8. This rule
denies view access to non-public documents of diﬀerent companies belonging
to the same conﬂict class.
employee Operation: view
Role:
Object:
//*[count((viewed(current, any)[
(/*/@company != root(current-node())/@company) and
(/*/@class = root(current-node())/@class) and
(/*/@class != ’public’)]) > 0 ]
Mode: deny
Figure 4.8: Rule enforcing the read policy
The XPath expression of this rule ﬁrst matches with any object (//*) and
then speciﬁes a condition on them. This condition states that the number
of elements viewed by the current subject matching a second condition must
be greater than zero. The second condition checks three properties of each
viewed object. First, its company must be diﬀerent from the company of the
current node. Second, its class must be the same as the class of the current
node and third its class must not be public. The rule matches if all these
properties are fulﬁlled. The attributes company and class are accessed in
the expression using built-in functions of XPath, functions deﬁned by us and
the child axis of XPath, e.g., root(current-node())/@company accesses the
company attribute of the currently inspected node. Next, we present the rule
enforcing the write policy in Figure 4.9.
The rule above reﬂects the write policy as close as possible. The write
operation of the Chinese Wall model can be used to create new data or to
transfer data. Since the write policy aims at denying transfers of data, we
4.8. MODELING CHINESE WALL POLICIES
61
employee Operation: copy Source: //*
Role:
Destination:
//*[count((viewed(current, any)[
(/*/@class != root(dest-node())/@class) and
(/*/@class != ’public’)]) > 0 ]
Mode: deny
Figure 4.9: Strict rule enforcing the write policy
have deﬁned a copy rule for that purpose. This allows users to modify docu-
ments belonging to diﬀerent classes, which is not possible in the Chinese Wall
model, because the denial of write operations also prevents the creation and
modiﬁcation of data. However, the rule denies transfers of public informa-
tion that resides in a non-public document, although the transfer of public
information should not be restricted.
Moreover, transfers to documents of diﬀerent conﬂict classes are denied
as well to prevent transfers via multiple steps, although the resulting state
of only one such transfer is not unwanted, e.g., the transfer from “Bank A”
to “Oil Company A” is acceptable if the transferred data is not transferred
by another subject to “Bank B” afterwards.
To overcome these shortcomings, we present a more ﬂexible version of the
second rule in Figure 4.10. With the help of history information, we keep
track of the source of information and deny unwanted transfers via multiple
steps.
employee Operation: copy Source: //*
Role:
Destination:
//*[(/*/@company != root(copies(src-node())[0])/@company) and
(/*/@class = root(copies(src-node())[0])/@class) and
(root(copies(src-node())[0])/@class != ’public’) ]
Mode: deny
Figure 4.10: More ﬂexible rule for the write policy
The diﬀerence between the rule in Figure 4.10 and the rule in Figure 4.9 is
that the latter rule inspects the document from where the object to be trans-
ferred came from. This rule uses the expression copies(src-node())[0] to
retrieve the original node of which the current source node is a copy. This
leads to diﬀerent semantics, where the source document is relevant for the
attributes class and company of an object rather than the document where
the node is currently located. As a consequence, public information can be
62
CHAPTER 4. MODEL
transferred from any document to another, even if it is currently part of
a non-public document. Moreover, document parts can be exchanged be-