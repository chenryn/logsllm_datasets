### Collision Handling and Binding Mechanisms

Collisions in the hash table were managed through chaining, with new bindings utilizing the next pointer, while the cleaner used the last pointer. A separate thread was scheduled to periodically (e.g., every tenth of a lifetime) check whether the entry pointed to by the last pointer had expired.

### Performance Measurement

To evaluate performance when the hash table becomes full, we artificially loaded the table and measured its performance. As expected, the latency of the `find()` operation is dependent on the chain size in the hash table (Table 1). Table 1 illustrates the cost of ESS functions for the SRAM implementation when the hash table is essentially empty (i.e., chain lengths of 1). Since the actual access time depends on the length of the chain, we also show the number of memory accesses required as a function of the chain length \( cl \).

The `find_create()` function requires only five additional 32-bit accesses compared to `find()`, as both the hash table and the tag/data table must be modified. The simplicity of ESP instructions means that the majority of the processing costs are attributed to ESS performance. Our initial results indicate that the ESS can operate near or at line speeds.

### Hash Table and Tag Table Size Variations

We also measured performance using different sizes of hash tables, specifically with \( h \) ratios (hash table size/tag table size) ranging from 0.5 to 2. Figure 11 shows the effect of different hash table and tag table sizes on the `find()` performance. Our results demonstrate that even when the store is full, the average access time remains constant if the hash table has twice as many entries as the data table. Even when the hash table is only half the size of the data table, the average access time still remains below 3 µsec per packet.

**Table 1: Access times for ESS operations**

| ESS Calls | Time (µsec) | Number of 32-bit Memory Accesses |
|-----------|-------------|----------------------------------|
| `find()`  | 0.5         | 5 × cl                           |
| `find_create()` | 1.4         | 5 + 5 × cl                       |
| `read()`  | 0.1         | 2                                |
| `write()` | 0.1         | 2                                |

**Figure 11: Average `find()` function latency when a fraction of the ESS is filled**

### Memory Access Capabilities

The IXP1200 provides different access capabilities for SRAM and SDRAM memory. SRAM has a 32-bit wide bus and runs at the core clock frequency (232 MHz), while SDRAM has a 64-bit wide bus and operates at half the SRAM frequency (116 MHz). SRAM's fast access is intended for crucial router state such as the routing table, while SDRAM's wider bus is designed for packet I/O and buffering. Although smaller in size, the IXP1200’s SRAM offers the desired performance for ESS storage, with up to 8 MB of space being sufficiently large to support a reasonable-sized prototype ESS. For comparison, we measured the performance of our ESS design using both SRAM and SDRAM.

**Table 2: Latency of various ESS operations with ESS located in SRAM, SDRAM, or both**

| Functions  | Avg. Latency (µsec) |
|------------|---------------------|
| Compare    | SRAM: 3.98, SDRAM: 2.62, SRAM & SDRAM: 6.49 |
| Count      | SRAM: 3.54, SDRAM: 4.99, SRAM & SDRAM: 3.47 |

These measurements were taken on the StrongARM processor and factor out the cost of transferring data to/from the core, making them representative of what we expect to see if they were executed at the µengine level.

**Table 3: Estimated Throughput of ESP instructions**

| Functions  | Throughput (Kpps) |
|------------|-------------------|
| Compare    | SRAM: 232, SDRAM: 340, SRAM & SDRAM: 146 |
| Count      | SRAM: 259, SDRAM: 188, SRAM & SDRAM: 263 |

### Microengine Processing

We also measured certain costs of processing on the µengine, including ESP packet classification and hardware hash operations performed on tags. Using the cycle-accurate hardware emulator provided by the IXP1200, the µengine processing times averaged 75 cycles per packet (about 0.32 microseconds). Based on this and the latency information from Table 2, the estimated packet rates for various ESP instructions in terms of number of minimum-sized packets per second processed are shown in Table 3.

Our current efforts involve pushing the code completely into the µengines to avoid the performance penalty of transferring data to the core for processing. Our prototype implementation did not take advantage of some µengine features that would almost certainly increase the effective throughput, including multiprocessing, hardware multithreading, and optimized memory access. Nevertheless, our preliminary measurements show that ESP processing can support bandwidths of up to 169 Mbps, even going through the StrongARM core.

### Related Work

Several research efforts have aimed to place some form of extended functionality or programmability in the network. Compared to ESP, these generally target more specific end-to-end services or provide "heavyweight" computational capabilities offering greater computational power. Protocols like PGM and BCFS extend router functionality specifically to support end-to-end reliable multicast, while Generic Router Assist (GRA) generalizes these protocols to support other services. These protocols use soft-state techniques to maintain and process state information for multicast sessions.

Protocol boosters were an early effort to place support for end-to-end services in the network, operating on all parts of the packet and generating packets in the middle of the network. Active networks, such as ANTS, provide users with more or less complete control of packet processing, associating a program with each packet or capsule. SNAP allows packets to carry small programs expressed in a restrictive programming language, ensuring that the computing resources consumed by a packet are strictly bounded.

Some active network services target specific needs, especially for group applications. The concast service provides a many-to-one communication channel, combining information sent to a common destination from the group in routers along the way. The "Smart Packets" project from BBN applies active network technology to network management, focusing on a small set of primitives to be invoked by packets.

### Conclusions

We have proposed a new approach to placing support for end-to-end services inside routers. Ephemeral state processing (ESP) is a building-block service designed under minimal assumptions about applications. A key aspect of our design is the use of an associative store with a fixed lifetime, which benefits the network by ensuring that state resources are freed at the same rate they are allocated, making it possible to build stores that can process allocation requests at "wire speed." It benefits the user (service designer) by ensuring that all traces of a computation disappear from the network within a fixed time.

Our experience with an initial prototype implementation on the IXP1200 network processor suggests that ESP should easily be able to process packets at line speeds in excess of hundreds of megabits per second. By exploiting available parallelism, pipelining, and special-purpose hardware, we expect performance can be increased substantially beyond that.

Our current design is based on a small set of parameterized instructions that suffice for a broad set of end-to-end services primarily of an auxiliary nature. As new ways to use ESP are found, the need for new instructions will arise. This brings up the question of how to add new instructions once ESP is deployed. One possibility is to allow packets to carry "microcode," perhaps coded in a restricted language like SNAP, which would be interpreted at each node. An alternative would be to extend the instruction set through a formal standardization process, allowing the flexibility and simplicity of the instruction set to be carefully maintained. In either case, allowing the instruction set to be extended provides for the ESP service to evolve over time.

In addition to various engineering choices, we find further issues worthy of future study, such as dynamic adaptation of robust ESP computations to network conditions and the development of a security architecture for ESP that provides enhanced protection while preserving the lightweight nature of the service.

Although we are optimistic that ESP is both sound in design and useful in application, it represents just one point on a spectrum of approaches to extending network functionality. We hope others will consider additional ways to use ESP and explore different parts of that spectrum.

### Acknowledgements

This paper has benefited greatly from the constructive comments of the anonymous referees and especially our shepherd, David Wetherall. The authors also acknowledge with thanks the technical support of the IXP1200 group at Intel Architecture Labs.

### References

[1] Burton Bloom. Space/time trade-offs in hash coding with allowable errors. Communications of the ACM, 13(7):422–426, July 1970.
[2] Brad Cain, Tony Speakman, and Don Towsley. Generic router assist (GRA) for multicast transport protocols, June 2002. Internet Draft (work in progress).
[3] K. Calvert, J. Griffioen, B. Mullins, A. Sehgal, and S. Wen. Concast: Design and implementation of an active network service. IEEE Journal on Selected Areas of Communications, 19(3):426–437, March 2001.
[4] D.C. Feldmeier et al. Protocol boosters. IEEE Journal on Selected Areas of Communications, 16(3):437–444, April 1998.
[5] T. Speakman et al. PGM Reliable Transport Protocol Specification. RFC 3208, December 2001.
[6] Sally Floyd, Van Jacobson, Ching-Gung Liu, Steven McCanne, and Lixia Zhang. Reliable Multicast Framework for Light-weight Sessions and Application Level Framing. In ACM SIGCOMM, Cambridge, MA, September 1995.
[7] Michael Hicks, Pankaj Kakkar, T. Moore, Carl A. Gunter, and Scott Nettles. PLAN: A Packet Language for Active Networks. 1998. International Conference on Functional Programming.
[8] H. Holbrook and B. Cain. Source-specific multicast for IP, November 2001. Internet Draft (work in progress).
[9] Hugh W. Holbrook and David R. Cheriton. IP Multicast Channels: EXPRESS Support for Large-Scale Single Source Applications. In ACM SIGCOMM, Cambridge, MA, August 1999.
[10] John Janotti. Network Layer Support for Overlay Networks. In IEEE OpenArch, New York, June 2002.
[11] D. Katz. IP router alert option, February 1997. RFC 2113.
[12] S. Kent and R. Atkinson. IP encapsulating security payload (ESP), November 1998. RFC 2406.
[13] Jonathan T. Moore, Michael Hicks, and Scott Nettles. Practical Programmable Packets. In IEEE INFOCOM, Anchorage, AK, April 2001.