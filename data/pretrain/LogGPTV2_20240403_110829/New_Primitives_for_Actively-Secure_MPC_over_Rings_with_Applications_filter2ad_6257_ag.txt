(cid:5) = c mod 2d and
Figure 8: Protocol for truncating a value by d bits probabilistically
(cid:8)
(cid:9)
[a] with a ≤ 2(cid:3), protocol
Proposition IX.1. On input
Πd
TruncP securely computes [b] where, with probability at
least 1 − 2(cid:3)−k, b =
(cid:9) − v for some v ∈ {0, 1}.
(cid:8)
c
2d
a/2d
there is the bad event
1) Deterministic Truncation: The previous protocol al-
lows us to calculate shares of
, but it is probabilistic
in two aspects. First,
in which
Carryk(c, r) = 1, in which makes the error in the truncation
to be around 2k−d; fortunately this event happens with at
most probability 2(cid:3)−k. However, there is also the event
in which (using the notation from the previous section)
v = Carryd(c, a) = 1, in which case we get an error
of 1 in the result. Based on these observations we can
obtain different truncation protocols that provide different
guarantees about the result, with different costs.
ΠTruncP1(d): The truncation is exact with probability
1− 2(cid:3)−k. For this the parties use bit-decomposition (Section
IX-C) and the carry protocol (Section IX-A) to compute
[v] ← Carryd(c, [a]) and deﬁne the output of the truncation
to be [b] − [v].
ΠTruncP2(d): With probability 1, the truncation has an
error of at most 1. To achieve this the parties use bit-
decomposition and the carry protocol to compute [u] ←
Carryk(c, [a]) and deﬁne the output of the truncation to be
[b] + 2k−d[u].
ΠTruncD(d): The truncation is exact with probability
1. This is essentially a combination of the two cases
above. This is obtained by letting the parties using bit-
decomposition and the carry protocol twice to get [u] ←
Carryk(c, [a]) and [v] ← Carryd(c, [a]), and let the output
be [b] + 2k−d[u] − [v].
C. Bit-Decomposition
(cid:2)k−1
obtain
protocol
([a0], . . . , [am−1])
i=0 ai2i
and m ≤ k. This protocol is taken from [21], and it is
described in Fig. 9.
parties
from [a], where a =
allows
This
the
to
Protocol ΠBitDec
[
(cid:2)k−1
INPUT: Shared value [a].
[a0], . . . , [ak−1], where a =
OUTPUT: Shared values
i=0 ai2i ∈ Z2k.
(cid:2)k−1
1) Call [r0], . . . , [rk−1] ← ΠRandBit() and compute [r] =
2) Let c ← Open([a] − [r]).
3) Call [r0]2, . . . , [rk−1]2 ← ΠA2B([r0], . . . , [rk−1]).
4) Use the binary addition protocol CarryAddL, from [21]
to output (c0, . . . , ck−1) + ([r0]2, . . . , [rk−1]2), getting as
output [a0]2, . . . , [ak−1]2.
i=0 ri2i].
5) Output [a0], . . . , [ak−1] = ΠB2A([a0]2, . . . , [ak−1]2).
Figure 9: Protocol for bit-decomposing a shared value
D. Bit-wise Comparison
Correctness is clear since r+c = r+(a−r) mod 2k ≡k a.
(cid:2)k−1
(cid:2)k−1
i=0 ai2i and
i=0 bi2i the parties execute the protocol in Fig. 10.
To compare bitwise-shared values a =
b =
Protocol ΠBitLT
INPUT: Shared bits [a0]2, . . . , [ak−1]2, [b0]2, . . . , [bk−1]2.
OUTPUT: Shared value [u]2, where u = a
(cid:2)k−1
i=0 ai2i and b =
1) Compute [b
2) Return 1−ΠCarry([a0]2, . . . , [ak−1]2, [b
(cid:2)k−1
i]2 = 1 − [bi]2 for i = 0, . . . , k − 1.
(cid:5)
(cid:5)
0]2, . . . , [b
i=0 bi2i.
?
< b with a =
(cid:5)
k−1]2, 1).
Figure 10: Protocol for comparing bitwise-shared values
(cid:2)k−1
Security is obvious. To argue the correctness of the
i=0 (1 − bi) · 2i and notice that
+1) < 2k.
protocol, consider b(cid:2)
a < b ⇔ a−b < 0 ⇔ a+(2k−b) < 2k ⇔ a+(b(cid:2)
=
(cid:18)(cid:18)(cid:18)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:49:58 UTC from IEEE Xplore.  Restrictions apply. 
?
Therefore, a
< b is equal to 1 if and only if adding a with
b(cid:2), when the carry bit is set, does not result in a carry. This
is precisely what is done in the protocol.
X. PROTOCOLS AND FUNCTIONALITIES FOR DECISION
TREE AND SVM EVALUATION
Fig. 11 presents the ideal functionality for decision tree
evaluation, which is realised by the protocol in Fig. 12.
Fig. 13 contains the ideal functionality for SVM evaluation,
whilst the protocol for implementing this is in Fig. 15, and
the arg-max subroutine in Fig. 14. The arg-max protocol is
based on a work by Toft [48].
Functionality FDecTree
Initialization: The functionality is initialized by (Init, d, n, k)
Compute: On input (Input,T ) from P1 and (Input, x) from
n , z ∈ Z
from P1 and P2.
P2 where T = (t, v, z) with t ∈ Z
2k, return T (x) = z to P2.
and x ∈ Z
2k , v ∈ Z
2d
2k
m
m
n
Figure 11: Functionality for evaluating decision trees
Protocol ΠDecTree
m
n
2k from P2.
n , z = (z1, . . . , z2d ) ∈ Z
INPUT: T = (t, v, z) with t = (t1, . . . , tm) ∈ Z
m
2k , v =
(v1, . . . , vm) ∈ Z
2d
2k from P1 and
x = (x1, . . . , xn) ∈ Z
1) Let [tj] ← Input(tj, P1) for each j ∈ [m]. Similarly let
[zj] ← Input(zj, P1) for each j ∈ [1, 2d] and [cj,i] ←
Input(cj,i, P1) for each i ∈ [1, n] and j ∈ [1, m] where
(cid:2)n
cj,vj = 1 and cj,i = 0 for i (cid:8)= vj.
i=1[cj,i] for j ∈ [1, m].
2) The parties compute [cj] =
3) The parties then let cj ← Open([cj]) and verify that cj =
1 for j ∈ [1, m]. If this is not the case for any j ∈ [1, m]
then output Abort.
4) The parties the compute [¯cj,i] = [cj,i] · (1 − [cj,i]) and let
¯cj,i ← Open([¯cj,i]) for all i ∈ [1, n] and j ∈ [1, m].
5) The parties verify that all ¯cj,i = 0 for all i ∈ [1, n] and
j ∈ [1, m], if not they output Abort.
6) Let [xi] ← Input(xi, P2) for all i ∈ [1, n].
(cid:6)
OUTPUT: Nothing to P1 and T (x) = z to P2.
for j ∈
i=1[cj,i] · [xi]
1) Compute [fj] = ΠLT
[1, m].
2) For l ∈ [1, d], let jl denote the l’th bit of the index j
(letting j1 be the least signiﬁcant bit). Then for j ∈ [1, 2d]
compute
(cid:5)(cid:5)(cid:2)n
, [tj]
(cid:6)
(cid:7)
l∈[d]
(cid:8)
(1 − [f(cid:8)(j+m)/2l(cid:9)]),
(cid:2)2d
[f(cid:8)(j+m)/2l(cid:9)],
j=1[zj] · [fj+m] and then let z ←
if jl = 0
if jl = 1
[fj] =
3) Compute [z] =
Open([z], P2).
Functionality FSVM
Initialization: The functionality is initialized by (Init, q, n, k)
Compute: On input (Input,S) from P1 and (Input, x) from
2k and
from P1 and P2.
P2 where S = (F , b) with F ∈ Z
x ∈ Z
2k , b ∈ Z
q×n
2k, return S(x) = z to P2.
Figure 13: Functionality for evaluating SVMs
n
q
Protocol ΠArgMax [48, 13.1.1]
Computes ArgMax([c1], . . . , [cq]) → (([f1], . . . , [fq]), [g])
where f1, . . . , fq ∈ {0, 1} and g = max(c1, . . . , cq).
1) If q = 2:
a) [d1] = ΠLT([c2], [c1]) and [d2] = 1 − [d1] and [g] =
[d1] · ([c1] − [c2]) + [c2].
b) Return (([d1], [d2]), [g]).
2) Else if q = 3:
3) Else, let
a) [d
b) [d
c) [d1] = [d
(cid:5)
1] = ΠLT([c2], [c1]) and [g
(cid:5)
2] = ΠLT([c3], [g
1]· [d
(cid:5)
(cid:5)
2] and [d2] = [d
1 − [d1] − [d2].
1]·([c1]−[c2])+[c2].
(cid:5)] = [d
(cid:5)
2]· ([g
(cid:5)]− [c3]) + [c3].
(cid:5)
(cid:5)]) and [g] = [d
1]· [d
2]− [d
(cid:5)
(cid:5)
(cid:5)
2] and [d3] =
d) Return (([d1], [d2], [d3]), [g]).
(cid:6) ← ArgMax([c1], . . . , [c(cid:8)q/2(cid:9)]),
(cid:6)←
(cid:5)
(cid:5)
([d1], . . . , [d(cid:8)q/2(cid:9)]), [g1]
([d(cid:8)q2(cid:10) + 1], . . . , [dq]), [g2]
ArgMax([c(cid:8)q/2(cid:9)+1], . . . , [cq]):
a) [d] = ΠLT([g2], [g1]) and [g] = [d] · ([g1] − [g2]) + [g2].
b) [fj] = [d] · [dj] for j ∈ [1,(cid:11)q/2(cid:10)] and [fj] = (1 − [d]) ·
[dj] for j ∈ [(cid:11)q/2(cid:10) + 1, q].
c) Return (([f1], . . . , [fq]), [g]).
Figure 14: Protocol for ﬁnding largest element
Protocol ΠSVM
q
INPUT: S = (F , b) with F = (F1, . . . , Fq) ∈ Z
q×n
2k , b =
(b1, . . . , bq) ∈ Z
2k from P1 and x = (x1, . . . , xn) ∈ Z
n
2k from
P2.
1) P1 inputs the values F , b using Input(·, P1) to get sharings
[F ] = ([F1], . . . , [Fq]) and [b] = ([b1], . . . , [bq]) such that
([fj,1], . . . , [fj,n]) = [Fj] for all j ∈ [1, q].
2) P2 inputs the values (x1, . . . , xn) = x using Input(·, P2)
OUTPUT: P1 learns nothing and P2 learns z ∈ Z2k.
to get sharings [x1], . . . , [xn].
1 For all i ∈ [1, n] and all j ∈ [1, q] the parties compute
2 Use ΠArgMax in 14 to compute (([f1], . . . , [fq]), [g]) ←
3 Compute fj ← Open([fj]) for all j ∈ [1, q] and return the
i∈[1,n][fj,i] · [xi] for all j ∈ [1, q].
[cj] = [bi] +
ArgMax([c1], . . . , [cq]).
value j · fj (cid:8)= 0.
(cid:2)
Figure 15: Protocol for evaluating SVMs
Figure 12: Protocol for evaluating decision trees
A. Ofﬂine Micro-bechmarks
From the micro-benchmark in Fig. 16 we see that these
two optimizations alone can cut preprocessing time in half.
These benchmarks are done using network supporting com-
munication up to 10 Gbps. The high bandwidth ensures that
the execution will be computationally bounded, as we will
show in Sec. VII-B, and so that the relative improvements
don’t get distorted by not having enough network bandwidth.
(cid:18)(cid:18)(cid:18)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:49:58 UTC from IEEE Xplore.  Restrictions apply. 
Ofﬂine Microbenchmarks
2
6
7
7
5
1
Basic
Optim.
Basic
Optim.
9
1
.
5
4
6
1
3
0
3
0
9
7
8
1
8
0
7
2
,
7
9
4
2
,
3
0
4
1
,
4
9
7
k = 32
4