p
p
t
t
t
s
s
s
t
t
si
si
Signature 
Signature 
Signature 
Signature 
Signature 
Developed
Developed
Developed
Installed
Installed
Vulnerability 
Vulnerability 
Vulnerability 
Vulnerability 
Discovered
Discovered
Discovered
Discovered
Patch/Fix 
Patch/Fix 
Patch/Fix 
Patch/Fix 
Developed
Developed
Developed
Developed
t
t
t
pi
pi
pi
Patch/Fix 
Patch/Fix 
Patch/Fix 
Installed
Installed
Installed
B)
B)
Failed Attacks Detected
Failed Attacks Detected
Window of Vulnerability
Window of Vulnerability
t
t
t
t
v
v
v
v
t
t
t
x
x
x
Exploit 
Exploit 
Exploit 
Developed
Developed
Developed
t
t
t
t
p
p
p
p
t
t
t
s
s
s
Signature 
Signature 
Signature 
Developed
Developed
Developed
t
t
t
pi
pi
pi
t
t
si
si
Signature 
Signature 
Installed
Installed
Vulnerability 
Vulnerability 
Vulnerability 
Vulnerability 
Discovered
Discovered
Discovered
Discovered
Patch/Fix 
Patch/Fix 
Patch/Fix 
Patch/Fix 
Developed
Developed
Developed
Developed
Patch/Fix 
Patch/Fix 
Patch/Fix 
Installed
Installed
Installed
Fig. 1. Hosts are vulnerable to new exploits and there always is a window of vulnerability from
the time a new exploit is developed until vulnerable systems are patched. There is a window of
visibility, as shown in (A), only if a signature is installed in an intrusion detection system before
a  patch  is  installed  and  there  is  no  window  of  visibility,  as  shown  in  (B),  if  the  signature  is
installed after the patch.
a  fix  or  software  patch  is  made  available  that  makes  exploits  using  the  new
vulnerability impossible and a signature is developed for intrusion detection systems
to  detect  attempted  attacks  that  exploit  the  vulnerability.  It  is  up  to  a  system
administrator  to  install  the  published  signature  and/or  the  patch  and  these  can  be
installed in any order or never. 
Independent of the order of other events, systems are always vulnerable to attacks
from the time an exploit is developed until the time software patches or other fixes
are  installed.  This  time  interval  always  exists  and  it  will  be  called  the  “window  of
vulnerability”  as  in  [1].  In  addition,  there  may  be  a  time  interval  when  successful
known attacks are detected by intrusion detection systems. This interval, if it exists,
will be called the “window of visibility”. The upper time line of Figure 1 labeled (A)
shows  a  situation  where  a  new  signature  is  installed  before  the  software  patch  and
there  is  a  window  of  visibility  when  new  attacks  are  detected.  The  lower  time  line
shows a situation when the signature is installed after software patches and there is no
window  of  visibility  when  successful  attacks  are  detected.  There  will  only  be  a
window  of  visibility  when  the  time  signatures  are  installed  (tsi)  is  before  the  time
patches are installed (tpi). It is difficult to predict if there will be a window of visibility
in  practice  because  this  depends  on  how  long  it  takes  to  develop  patches  and
signatures and on the strategy used by system administrators. There will be a window
of visibility if patches are developed after signatures. There will not be a window of
314         R. Lippmann, S. Webster, and D. Stetson
Table 3. Eight remote-to-local attacks used for analysis.
Name
IIS MDAC RDS
Vulnerability
rpc.statd Buffer Overflow
IIS Unicode Directory
Traversal
BIND TSIG buffer
overflow
RPC snmpXdmid Buffer
Overflow
IIS ISAPI Extension Buffer
Overflow
Telnet Buffer Overflow
Windows XP UPNP Buffer
Overflow
CVE
Number
CVE-
1999-1011
CVE-
2000-0666
CVE-
2000-884
CVE-
2001-0010
CAN-
2001-0236
CAN-
2001-0500
CAN-
2001-0554
CAN-
2001-0876
Who-
Discovered
G. Gonzalez
Publish
Date
7/19/1999
Who-
Patched/Fixed
Microsoft
D.
Jacobwitz
Anonymous
COVERT
Labs
Job de Haas
eEye
TESO
eEye
7/16/2000
Linux
10/14/2000 Microsoft
1/29/2001
Unix
3/15/2001
6/8/2001
Job de Hass,
Sun
Microsoft
7/18/2001
Unix
12/20/2001 Microsoft
visibility  if  patches  are  developed  before  signatures  and  administrators  place  a
priority  on  minimizing  the  window  of  vulnerability  by  installing  patches  before
signatures. 
5  A Detailed Analysis of Eight Important Remote-to-Local Attacks
last 
in  [22].  The 
A  detailed  analysis  was  made  of  the  eight  remote-to-local  vulnerabilities  shown  in
Table 3 to determine likely sequences for those events shown in Figure 1. The first
six of these vulnerabilities were selected from among the 20 most important security
incidents  cataloged 
two  are  serious  recently-discovered
vulnerabilities. Information on these attacks is  available  from  the  NIST  ICAT  meta
database [14] and in a recent security advisory [10]. Table 3 contains the attack name,
the  Common  Vulnerabilities  and  Exposures  (CVE)  number  [4],  the  person  or
organization that discovered the vulnerability, the date the vulnerability used by the
attack  was  published,  and  the  identity  of  the  organization  that  published  the  patch.
Dates  of  attacks  shown  range  from  mid  1999  to  late  2001,  both  individuals  and
security  companies  discovered  vulnerabilities,  and  the  affected  software  developers
provided  patches.  In  this  table,  the  terms  “Unix”  and  “Linux”  in  the  last  column
indicate  that  many  different  software  developers  of  these  operating  systems
developed patches. 
Figure  2  shows  time  lines  for  all  eight  attacks.  Each  separate  horizontal  region
corrresponds  to  one  attack,  the  horizontal  axis  shows  dates  from  October  1998  to
The Effect of Identifying Vulnerabilities and Patching Software         315
February 2002, and symbols show the dates of different events. Open squares indicate
when  vulnerabilities  were  published  and  plus  signs  indicate  when  fixes  or  patches
were available. These dates were obtained by going back to the original mailing lists
or  web  postings  where  the  vulnerabilities  were  announced.  The  patch/fix  dates
correspond to the dates patches were released for all but the RPC snmpXdmid Buffer
Overflow vulnerability. Here, the date is that of the fix suggested by the vulnerability
discoverer and Sun released a patch more than five months after the vulnerability was
discovered. The availability date for signatures was determined by finding two dates.
One  was  when  a  signature  was  available  for  a  widely  used  open-source  intrusion
detection  system  named  Snort  [21]  with  performance  comparable  to  that  of  many
commercial systems [18]. The second date was when a security test was available in
an  open-source  vulnerability  scanner  named  Nessus  [17]  that  also  performs
comparably to commercial vulnerability scanners [9].
Fig. 2.  Dates eight important vulnerabilities were publicly released, software patches or fixes
were made available, a Snort signature was available, a Nessus vulnerability-testing rule was
available, and (if applicable) when major Internet worms exploited the vulnerability. 
The Snort and Nessus dates represent those that might be provided by a user group
that  carefully  tracks  publication  of  new  vulnerabilities.  Dates  were  found  by
searching  postings  of  new  security  test  listings  for  Nessus  and  both  software
316         R. Lippmann, S. Webster, and D. Stetson
repositories and new signature postings for Snort. It was found that Snort signatures
were  not  being  updated  frequently  until  roughly  April  2001.  Times  for  Snort
signatures  were  thus  left  out  if  they  occurred  before  this  date  while  dates  for  all
Nessus security tests are listed. If an attack in Figure 2 was part of a major Internet
worm incident, then the date of the worm release is shown by a solid dot. Information
on the worms shown is available in [2,3,7,8,12,23].
Figure 2 shows that patches or software fixes were almost always available soon
after  vulnerabilities  were  publicly  released.    This  agrees  with  the  analysis  of  three
older  attacks  performed  in  [1].  For  many  vulnerabilities,  the  discoverer  notified
software developers and held back public release until a software patch was available.
In  others  the  discoverer  presented  a  fix  to  prevent  the  vulnerability  from  being
exploited or software developers rapidly produced patches following the vulnerability
announcement. Patches were available on the day the vulnerability was announced or
the  next  day  for  five  of  the  eight  vulnerabilities  and  within  ten  days  for  all
vulnerabilities. In almost all cases, the discoverer publicly noted the significance of
the  vulnerability  and  this  information  was  widely  distributed  across  many  security
mailing lists and web sites. 
Figure 2 also shows that Snort signatures and Nessus security tests typically were
not available until after patches were developed. For five vulnerabilities, Nessus tests
were available within roughly one week, but for the others, tests weren’t available for
from two to nine months. For three vulnerabilities Snort rules were available within a
week, but for one, a rule wasn’t available for roughly a month. 
6   Implications for Well Protected DMZ Subnets
If  the  timelines  shown  in  Figure  2  generalize  to  other  vulnerabilities,  then  these