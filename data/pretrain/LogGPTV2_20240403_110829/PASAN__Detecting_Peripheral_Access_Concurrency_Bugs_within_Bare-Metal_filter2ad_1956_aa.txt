# PASAN: Detecting Peripheral Access Concurrency Bugs in Bare-Metal Embedded Applications

**Authors:**  
- Taegyu Kim, Purdue University
- Vireshwar Kumar, Indian Institute of Technology, Delhi
- Junghwan Rhee, University of Central Oklahoma
- Jizhou Chen, Purdue University
- Kyungtae Kim, Purdue University
- Chung Hwan Kim, University of Texas at Dallas
- Dongyan Xu, Purdue University
- Dave (Jing) Tian, Purdue University

**Link to Paper:**  
[https://www.usenix.org/conference/usenixsecurity21/presentation/kim](https://www.usenix.org/conference/usenixsecurity21/presentation/kim)

**Publication Information:**  
This paper is included in the Proceedings of the 30th USENIX Security Symposium, August 11–13, 2021. Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.

---

## Abstract

Concurrency bugs are among the most challenging software defects to detect and debug due to their non-deterministic triggers caused by task scheduling and interrupt handling. While various tools have been proposed to address concurrency issues, protecting peripherals in embedded systems from concurrent accesses presents unique challenges. A simple lock on a specific memory-mapped I/O (MMIO) address does not prevent concurrent accesses to other MMIO addresses of the same peripheral. Additionally, embedded peripherals often use internal state machines for functionality, and improper locking can lead to transaction corruption, resulting in corrupted sensor values or failed jobs.

In this paper, we introduce PASAN, a static analysis tool designed to detect peripheral access concurrency issues in embedded systems. PASAN automatically identifies the MMIO address range of each peripheral using memory layout documents, extracts the internal state machines from device drivers, and detects concurrency bugs in peripheral accesses. We evaluated PASAN on seven different embedded platforms, including real-time operating systems (RTOSes) and robotic aerial vehicles (RAVs). PASAN detected 17 true positive concurrency bugs across three platforms, with detection rates ranging from 40% to 100%. To our knowledge, PASAN is the first static analysis tool to detect intrinsic problems in concurrent peripheral accesses for embedded systems.

## 1. Introduction

Concurrency bugs are one of the most challenging software defects to detect and debug due to their non-deterministic triggers caused by task scheduling and interrupt handling. These bugs can lead to intermittent unexpected system behaviors and contribute to attack surfaces. For example, the Dirty Cow vulnerability [1] in the Linux kernel, caused by a race condition in the memory subsystem, enables privilege escalation. Similarly, a race condition in VMware Tools on Windows 10 [17] and a recent race condition in the Android binder [16] both allow privilege escalations. Another race condition in BIND [9] allows remote attackers to carry out Denial-of-Service attacks on DNS servers. A keyword search for "race condition" in the CVE database reveals 862 entries [10].

Various approaches, including static analysis [33, 40, 50, 79], dynamic analysis [83, 84], and hybrid analysis [54, 55, 62, 73], have been proposed to address concurrency issues. However, protecting peripheral devices in embedded systems from concurrent accesses presents unique challenges. A simple lock on a specific MMIO address still allows concurrent accesses to other MMIO addresses of the same peripheral. In other words, unless there is a global lock for the peripheral and every MMIO access is protected by the same lock, race conditions can still occur.

Embedded peripherals often employ internal state machine transitions to achieve functionality. For instance, a sensor might need to go through different internal states to complete a read operation. We define such a sequence of internal state machine transitions as a transaction. The device driver must access different MMIO addresses of the peripheral and may even sleep between accesses to follow the peripheral's internal state machine. Unlike typical critical section protection, where sleep is excluded or forbidden (e.g., spinlocks), the sleep here gives the peripheral time to finish its job and corresponds to part of the internal state machine (e.g., wait).

Effective concurrent peripheral access protection in embedded systems requires protecting both the MMIO address range and the internal state machine transition. None of the existing tools acknowledge this unique requirement, leading to potential concurrency bugs. Improper locking can corrupt the peripheral's ongoing jobs, resulting in corrupted sensor values or failed jobs, which we call transaction corruption.

In this paper, we propose PASAN (Peripheral Access SANitizer), a static analysis tool to detect peripheral access concurrency bugs in embedded systems. PASAN automatically learns the MMIO address range of each peripheral using memory layout documents and extracts the internal state machines from device drivers. Leveraging this information, PASAN detects potential concurrent peripheral accesses and generates bug reports.

We evaluated PASAN on seven embedded platforms, including multiple RTOSes and RAVs. PASAN found 17 true positive concurrency bugs across three platforms, with detection rates ranging from 40% to 100%. We reported all findings to the relevant parties. To our knowledge, PASAN is the first static analysis tool to detect intrinsic problems in concurrent peripheral accesses for embedded systems. Our contributions are summarized as follows:

- **Analysis of Challenges:** We analyze the unique challenges in concurrent peripheral access protection in embedded systems and define the correct protection to consider both the MMIO address range and the internal state machines of peripherals.
- **Design and Implementation:** We design and implement PASAN, a static analysis tool that parses memory layout documents to extract MMIO address ranges, learns internal state machines by analyzing device drivers, and detects concurrency bugs using a combination of techniques.
- **Validation:** We validate PASAN's capabilities by evaluating its effectiveness on real-world embedded platforms, discovering a total of 17 concurrency bugs in three different platforms.

## 2. Background and Motivation

Concurrency protection for peripheral accesses is a common practice for device driver writers on general-purpose operating systems like Linux. For example, in a Multi-Function Device (MFD) driver, a write function is protected via a mutex to prevent concurrent accesses, as shown in Listing 1. However, these simple concurrency protections fail in embedded systems due to the intrinsic states of bus types and embedded peripherals.

**Listing 1: MFD Device Write Function in Linux Kernel 5.4**
```c
int retu_write(struct retu_dev *rdev, u8 reg, u16 data) {
    mutex_lock(&rdev->mutex);
    ret = regmap_write(rdev->regmap, reg, data);
    mutex_unlock(&rdev->mutex);
    return ret;
}
```

Consider the simplified example in Figure 1, where an LIS3DH sensor and an SD card controller are attached to an SPI bus. Naive concurrency protection for operations on these peripherals or the bus does not protect the internal state machines, leading to job failures and data loss. These internal state machines exist in both embedded buses and peripherals, and we define a complete transition of these state machines as a transaction to reflect its atomic requirement. Unprotected states and transactions can be exploited by attackers to trigger unexpected state machine transitions, causing security or safety-critical issues.

**Figure 1: Simplified Example of State Machines with SPI and Attached Peripherals**

### Bus-Level State Machines

The SPI bus in Figure 1 controls two peripheral devices. To communicate with a device, the bus must: (i) select the slave device and (ii) read/write data from/to the device. These steps represent the internal state machines of the bus. If thread A selects the LIS3DH sensor and sends a command, and simultaneously, thread B makes the SPI bus choose the SD card controller, thread A’s command will be redirected to the SD card controller due to transaction corruption. As a result, thread A never receives the response from the sensor because the transaction corruption leads to an erroneous redirection of the requested job.

**Table 1: Comparison of Concurrency Bug Detection Approaches**

| Analysis Approach | Automatic Detection | Memory Objects | Work Address Range Aware | Transaction Aware |
|-------------------|---------------------|----------------|--------------------------|-------------------|
| Lamport timestamps [60] | Algorithmic | No | No | No |
| Vector clock [66] | Algorithmic | No | No | No |
| Esterel [36] | Manual | No | No | No |
| Rust [65] | Manual | No | No | No |
| VCC [42] | Static | No | No | No |
| VeriFast [32] | Static | No | No | No |
| RacerX [50] | Static | No | No | No |
| RELAY [79] | Static | No | No | No |
| Vojdani et al. [78] | Static | No | No | No |
| Chen et al. [40] | Static | No | No | No |
| DSAC [33] | Static | No | No | No |
| Polyspace [24] | Static | No | No | No |
| Separation logic [69] | Static | No | No | No |
| Mthread [20] | Static | No | No | No |
| Coverity [15] | Static | No | No | No |
| Infer [21] | Static | No | No | No |
| Flawfinder [19] | Static | No | No | No |
| CodeSonar [13] | Static | No | No | No |
| ProRace [84] | Dynamic | No | No | No |
| Cruizer [83] | Dynamic | No | No | No |
| Hellgrind [67] | Dynamic | No | No | No |
| ThreadSanitizer [73] | Hybrid | No | No | No |
| RaceMob [55] | Hybrid | No | No | No |
| LockDoc [62] | Hybrid | No | No | No |
| Razzer [54] | Hybrid | No | No | No |
| **PASAN** | Static | Yes | Yes | Yes |

Note that placing a lock only on the MMIO address range without considering the internal state machines of the peripheral is insufficient.