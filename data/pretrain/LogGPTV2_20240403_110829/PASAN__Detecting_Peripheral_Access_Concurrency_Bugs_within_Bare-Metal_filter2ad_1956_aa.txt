title:PASAN: Detecting Peripheral Access Concurrency Bugs within Bare-Metal
Embedded Applications
author:Taegyu Kim and
Vireshwar Kumar and
Junghwan Rhee and
Jizhou Chen and
Kyungtae Kim and
Chung Hwan Kim and
Dongyan Xu and
Dave (Jing) Tian
PASAn: Detecting Peripheral Access Concurrency 
Bugs within Bare-Metal Embedded Applications
Taegyu Kim, Purdue University; Vireshwar Kumar, Indian Institute of Technology, 
Delhi; Junghwan Rhee, University of Central Oklahoma; Jizhou Chen and Kyungtae 
Kim, Purdue University; Chung Hwan Kim, University of Texas at Dallas; Dongyan 
Xu and Dave (Jing) Tian, Purdue University
https://www.usenix.org/conference/usenixsecurity21/presentation/kim
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.PASAN: Detecting Peripheral Access Concurrency Bugs
within Bare-Metal Embedded Applications
Taegyu Kim†, Vireshwar Kumar∗, Junghwan Rhee§, Jizhou Chen†
Kyungtae Kim†, Chung Hwan Kim¶, Dongyan Xu†, Dave (Jing) Tian†
†Purdue University, {tgkim, chen2731, kim1798, dxu, daveti}@purdue.edu
∗Indian Institute of Technology, Delhi, PI:EMAIL
§University of Central Oklahoma, PI:EMAIL
¶University of Texas at Dallas, PI:EMAIL
Abstract
Concurrency bugs might be one of the most challenging soft-
ware defects to detect and debug due to their non-deterministic
triggers caused by task scheduling and interrupt handling.
While different tools have been proposed to address concur-
rency issues, protecting peripherals in embedded systems
from concurrent accesses impose unique challenges. A naïve
lock protection on a certain memory-mapped I/O (MMIO)
address still allows concurrent accesses to other MMIO ad-
dresses of a peripheral. Meanwhile, embedded peripherals
such as sensors often employ some internal state machines to
achieve certain functionalities. As a result, improper locking
can lead to the corruption of peripherals’ on-going jobs (we
call transaction corruption) thus corrupted sensor values or
failed jobs.
In this paper, we propose a static analysis tool namely
PASAN to detect peripheral access concurrency issues for
embedded systems. PASAN automatically ﬁnds the MMIO
address range of each peripheral device using the parser-ready
memory layout documents, extracts the peripheral’s internal
state machines using the corresponding device drivers, and
detects concurrency bugs of peripheral accesses automatically.
We evaluate PASAN on seven different embedded platforms,
including multiple real time operating systems (RTOSes) and
robotic aerial vehicles (RAVs). PASAN found 17 true positive
concurrency bugs in total from three different platforms with
the bug detection rates ranging from 40% to 100%. We have
reported all our ﬁndings to the corresponding parties. To
the best of our knowledge, PASAN is the ﬁrst static analysis
tool detecting the intrinsic problems in concurrent peripheral
accesses for embedded systems.
1 Introduction
Concurrency bugs might be one of the most challenging soft-
ware defects to detect and debug due to their non-deterministic
triggers caused by task scheduling and interrupt handling.
They not only lead to intermittent unexpected system behav-
iors but also contribute to attack surfaces. For instance, the
Dirty Cow [1] vulnerability caused by a race condition in the
memory subsystem enables privilege escalations within the
Linux kernel. The race condition bug in VMware Tools on
Windows 10 [17] causes privilege escalations in the virtual
machines. The most recent privilege escalation vulnerabil-
ity [16] in Android was caused by a race condition in the
binder. Another race condition within BIND [9] allows a re-
mote attacker to carry out Denial-of-Service of DNS servers.
In fact, a simple keyword search for “race condition” in the
CVE database shows 862 entries [10].
Multiple approaches have been proposed to address concur-
rency issues including static analysis [33,40,50,79], dynamic
analysis [83,84], and hybrid analysis [54,55,62,73]. However,
protecting peripheral devices1 in embedded systems from
concurrent accesses imposes unique challenges. A naïve lock
protection on a certain memory-mapped I/O (MMIO) address
still allows concurrent accesses to other MMIO addresses of
a peripheral. In other words, unless there is a global lock for
this peripheral and every MMIO access to the peripheral is
protected by the same lock, race conditions still can exist on
the peripheral.
Meanwhile, embedded peripherals often employ some in-
ternal state machine transitions to achieve a functionality. For
instance, a sensor might need to go through different internal
states2 to accomplish one sensor read operation. We deﬁne
such a speciﬁc sequence of internal state machine transitions
as a transaction. Accordingly, the device driver often needs
to access different MMIO addresses of the peripheral and
even sleep in between to follow the peripheral’s internal state
machine transition. Note that unlike typical critical section
protection, where sleep is excluded or even forbidden (e.g.,
spinlocks), the sleep here gives the embedded peripheral time
to ﬁnish its job and corresponds to the part of the internal
state machines (e.g., wait).
As a result, an effective concurrent peripheral access pro-
tection means the protection (locking) of both the MMIO
1We will also use simply peripherals in this paper interchangeably.
2e.g., receive_cmd: receiving a command, wait: waiting for an ongoing
job completion, and return_res: returning the job result.
USENIX Association
30th USENIX Security Symposium    249
address range and the internal state machine transition of the
peripheral for embedded systems. Unfortunately, none of the
existing tools mentioned above acknowledges this unique con-
current protection requirement of embedded peripherals, and
fails to detect potential concurrency bugs. Improper locking
ﬁnally leads to the corruption of peripheral’s on-going jobs,
thus corrupting sensor values or failing jobs. We call such
corruption of jobs as a transaction corruption.
In this paper, we propose PASAN (short for Peripheral
Access SANitizer), a static analysis tool to detect periph-
eral access concurrency bugs for embedded systems. PASAN
learns the MMIO address range of each peripheral device au-
tomatically using the memory layout documents. To gain the
knowledge of the internal state machines, PASAN analyzes
different device drivers to extract state machine models based
on the correlation between device drivers and target peripher-
als. Leveraging the MMIO address ranges and internal state
machines, PASAN ﬁnally detects the potential concurrent pe-
ripheral accesses and generate bug reports automatically.
We have evaluated PASAN on seven embedded platforms,
including multiple real time operating systems (RTOSes) and
robotic aerial vehicles (RAVs). PASAN has found 17 true pos-
itive concurrency bugs in total among three platforms with
the bug detection rates ranging from 40% to 100%. We have
reported all of our ﬁndings to the corresponding parties. To
the best of our knowledge, PASAN is the ﬁrst static analysis
tool detecting the intrinsic problems in concurrent peripheral
accesses for embedded systems. We summarize our contribu-
tions as follows.
• We analyze the unique challenges in concurrent peripheral
access protection in embedded systems and deﬁne the cor-
rect protection to consider both of the MMIO address range
and the internal state machines of peripherals at the same
time.
• We design and implement PASAN, a static analysis tool to
detect potential concurrency bugs for peripheral accesses
in embedded systems. PASAN parses memory layout docu-
ments to extract MMIO address ranges automatically, learns
the internal state machines by analyzing device drivers, and
detects concurrency bugs by combining multiple underly-
ing techniques of the MMIO address range identiﬁcation,
transaction abstraction, points-to analysis, and lockset anal-
ysis.
• We validate the capabilities of PASAN by evaluating its
effectiveness on real-world embedded platforms, and dis-
covering a total of 17 concurrency bugs in three different
platforms.
2 Background and Motivation
Concurrency protection for peripheral accesses is a general
practice for device driver writers on general-purpose operat-
ing systems such as Linux. For instance, in a Multi-Function
int ret ;
1 int retu_write (struct retu_dev * rdev , u8 reg , u16 data )
2 {
3
4
5
6
7
8
9
10 }
mutex_lock (& rdev -> mutex );
ret = regmap_write ( rdev -> regmap , reg , data );
mutex_unlock (& rdev -> mutex );
return ret ;
Listing 1: A MFD device write function within the Linux
kernel 5.4 protected by a mutex.
Figure 1: Simpliﬁed motivating example of state machines
with SPI and attached peripherals.
Device (MFD) driver, a write function is protected via a mutex
preventing concurrent accesses to the device as shown in List-
ing 1. Unfortunately, these simple concurrency protections
fail on embedded systems due to the intrinsic states of bus
types and embedded peripherals. Take Figure 1 as an exam-
ple, where an LIS3DH sensor and an SD card controller are
attached to an Serial Peripheral Interface (SPI) bus. A naïve
concurrency protection for any operations on these periph-
erals or the bus does not protect the internal state machines
of these devices, leading to a job failure, data loss, etc. We
note that these internal state machines exist on both embed-
ded buses and peripherals. We deﬁne a complete transition
of these bus- and peripheral-level internal state machines as
a transaction to reﬂect its atomic requirement. Once such
unprotected states and corresponding transactions are iden-
tiﬁed, attackers may exploit this attack surface and trigger
unexpected bus- or peripheral-level state machine transition
(e.g., via network interface) to cause security or safety critical
issues.
Bus-Level State Machines. The SPI bus in Figure 1 is an
I/O port controlling two attached peripheral devices. To com-
municate with any device, the bus needs to: (i) select the slave
device and (ii) read/write data from/to the device. These two
steps represent the internal state machines of this bus. Now
imagine step (i) is done by thread A, which is going to send
a command to the LIS3DH sensor. Simultaneously, thread B
makes the SPI bus choose another slave device, i.e., the SD
card controller. In this case, thread A’s command will then
be redirected to another slave device due to the transaction
corruption of SPI caused by concurrent bus accesses. As a re-
sult, thread A never gets the response from the sensor because
the transaction corruption leads to an erroneous redirection
250    30th USENIX Security Symposium
USENIX Association
SelectSlaveData RWSelectCMDDataWaitSPISD Card ControllerInitSendCMDWaitReadStatusLIS3DHSensorInitBus-LevelPeripheral-LevelReadValuePeripheral LockPeripheral LockBus LockTable 1: Comparison of concurrency bug detection ap-
proaches. The “Hybrid” analysis approach is based on both
static and dynamic analysis; the “Algorithmic” indicates a
theoretical approach without actual implementation; and the
“Manual” approach requires manual efforts to detect (or pre-
vent) concurrency bugs.
Analysis
Approach
Automatic
Detection
Memory
Objects
Work
Address
Range
Aware
Transaction
Aware
Lamport
timestamps [60]
Vector clock [66]
Algorithmic
Algorithmic
Esterel [36]
Rust [65]
VCC [42]
VeriFast [32]
RacerX [50]
RELAY [79]
Vojdani et al. [78]
Chen et al. [40]
DSAC [33]
Polyspace [24]
Separation
logic [69]
Mthread [20]
Coverity [15]
Infer [21]
Flawﬁnder [19]
CodeSonar [13]
ProRace [84]
Cruizer [83]
Hellgrind [67]
ThreadSanitizer [73]
RaceMob [55]
LockDoc [62]
Razzer [54]
PASAN
Manual
Manual
Manual
Manual
Static
Static
Static
Static
Static
Static
Static
Static
Static
Static
Static
Static
Dynamic
Dynamic
Dynamic
Hybrid
Hybrid
Hybrid
Hybrid
Static
















































of the requested job. Note that putting a lock only on the