ﬁcult. libcapsicum therefore provides an API for start-
ing scrubbed sandbox processes, and explicit delega-
tion APIs to assign rights to sandboxes. libcapsicum
cuts off the sandbox’s access to global namespaces via
cap enter, but also closes ﬁle descriptors not positively
identiﬁed for delegation, and ﬂushes the address space
via fexecve. Sandbox creation returns a UNIX domain
socket that applications can use for inter-process com-
munication (IPC) between host and sandbox; it can also
be used to grant additional rights as the sandbox runs.
3 Capsicum implementation
3.1 Kernel changes
Many system call and capability constraints are applied
at the point of implementation of kernel services, rather
than by simply ﬁltering system calls. The advantage
of this approach is that a single constraint, such as the
blocking of access to the global ﬁle system namespace,
can be implemented in one place, namei, which is re-
sponsible for processing all path lookups. For example,
one might not have expected the fexecve call to cause
global namespace access, since it takes a ﬁle descriptor
as its argument rather than a path for the binary to exe-
cute. However, the ﬁle passed by ﬁle descriptor speci-
ﬁes its run-time linker via a path embedded in the binary,
which the kernel will then open and execute.
Similarly, capability rights are checked by the ker-
nel function fget, which converts a numeric descriptor
into a struct file reference. We have added a new
rights argument, allowing callers to declare what ca-
pability rights are required to perform the current oper-
ation.
If the ﬁle descriptor is a raw UNIX descriptor,
or wrapped by a capability with sufﬁcient rights, the op-
eration succeeds. Otherwise, ENOTCAPABLE is returned.
Changing the signature of fget allows us to use the com-
piler to detect missed code paths, providing greater assur-
ance that all cases have been handled.
One less trivial global namespace to handle is the pro-
cess ID (PID) namespace, which is used for process cre-
ation, signalling, debugging and exit status, critical op-
erations for a logical application. Another problem for
logical applications is that libraries cannot create and
manage worker processes without interfering with pro-
cess management in the application itself—unexpected
Figure 3: Capabilities “wrap” normal ﬁle descriptors, masking the set of permitted methods.
Figure 4: Portions of the global ﬁlesystem namespace can be delegated to sandboxed processes.
SIGCHLD signals are delivered to the application, and un-
expected process IDs are returned by wait.
Process descriptors address these problems in a man-
ner similar to Mach task ports: creating a process with
pdfork returns a ﬁle descriptor to use for process man-
agement tasks, such as monitoring for exit via poll.
When the process descriptor is closed, the process is ter-
minated, providing a user experience consistent with that
of monolithic processes: when a user hits Ctrl-C, or the
application segfaults, all processes in the logical applica-
tion terminate. Termination does not occur if reference
cycles exist among processes, suggesting the need for a
new “logical application” primitive—see Section 7.
3.2 The Capsicum run-time environment
Removing access to global namespaces forces funda-
mental changes to the UNIX run-time environment.
Even the most basic UNIX operations for starting pro-
cesses and running programs have been eliminated:
fork and exec both rely on global namespaces. Respon-
sibility for launching a sandbox is shared. libcapsicum
is invoked by the application, and responsible for forking
a new process, gathering together delegated capabilities
from both the application and run-time linker, and di-
rectly executing the run-time linker, passing the sandbox
binary via a capability. ELF headers normally contain a
hard-coded path to the run-time linker to be used with the
binary. We execute the Capsicum-aware run-time linker
directly, eliminating this dependency on the global ﬁle
system namespace.
Once rtld-elf-cap is executing in the new process,
it loads and links the binary using libraries loaded via li-
brary directory capabilities set up by libcapsicum. The
main function of a program can call lcs get to deter-
mine whether it is in a sandbox, retrieve sandbox state,
81014...Process ﬁle descriptorsstructﬁlestruct vnodestructﬁlestruct capabilitymask = READ | WRITEstructﬁlestruct capabilitymask = READ...ApacheApacheWorker 1ApacheWorker 2Logical Application/etcvarapachepasswdwwwsite1site2Figure 5: Process and components involved in creating a new libcapsicum sandbox
query creation-time delegated capabilities, and retrieve
an IPC handle so that it can process RPCs and receive
run-time delegated capabilities. This allows a single bi-
nary to execute both inside and outside of a sandbox, di-
verging behaviour based on its execution environment.
This process is illustrated in greater detail in Figure 5.
Once in execution, the application is linked against
normal C libraries and has access to much of the tradi-
tional C run-time, subject to the availability of system
calls that the run-time depends on. An IPC channel, in
the form of a UNIX domain socket, is set up automat-
ically by libcapsicum to carry RPCs and capabilities
delegated after the sandbox starts. Capsicum does not
provide or enforce the use of a speciﬁc Interface De-
scription Language (IDL), as existing compartmentalised
or privilege-separated applications have their own, of-
ten hand-coded, RPC marshalling already. Here, our
design choice differs from historic capability systems,
which universally have selected a speciﬁc IDL, such as
the Mach Interface Generator (MIG) on Mach.
libcapsicum’s fdlist (ﬁle descriptor list) abstrac-
tion allows complex, layered applications to declare ca-
pabilities to be passed into sandboxes, in effect provid-
ing a sandbox template mechanism. This avoids encod-
ing speciﬁc ﬁle descriptor numbers into the ABI between
applications and their sandbox components, a technique
used in Chromium that we felt was likely to lead to pro-
gramming errors. Of particular concern is hard-coding of
ﬁle descriptor numbers for speciﬁc purposes, when those
descriptor numbers may already have been used by other
layers of the system.
Instead, application and library
components declare process-local names bound to ﬁle
descriptor numbers before creating the sandbox; match-
ing components in the sandbox can then query those
names to retrieve (possibly renumbered) ﬁle descriptors.
4 Adapting applications to use Capsicum
Adapting applications for use with sandboxing is a non-
trivial task, regardless of the framework, as it requires
analysing programs to determine their resource depen-
dencies, and adopting a distributed system programming
style in which components must use message passing or
explicit shared memory rather than relying on a common
address space for communication.
In Capsicum, pro-
grammers have a choice of working directly with capa-
bility mode or using libcapsicum to create and manage
sandboxes, and each model has its merits and costs in
terms of development complexity, performance impact,
and security:
1. Modify applications to use cap enter directly in
order to convert an existing process with ambient
privilege into a capability mode process inheriting
only speciﬁc capabilities via ﬁle descriptors and vir-
tual memory mappings. This works well for ap-
plications with a simple structure like: open all re-
sources, then process them in an I/O loop, such as
programs operating in a UNIX pipeline, or interact-
ing with the network for the purposes of a single
connection. The performance overhead will typi-
cally be extremely low, as changes consist of encap-
Application calls libcapsicum with fdlist to create sandboxlibcapsicum merges application and rtld fdlists, exports to shared memory; ﬂushes undelegated capabilities; calls fexecvertld-elf generates library path fdlistpdforkfexecvertld-elf-cap links application, calls cap_mainApplication executes; queries libcapsicum for delegated capabilities as neededlibcapsicum unpacks fdlist from shared memory; provides capabilities to application on demandLIBCAPSICUM_FDLISTshared memory,application fds             LD_BINARY             binary fd            LD_LIBRARY_DIRS       library fdssulating broad ﬁle descriptor rights into capabilities,
followed by entering capability mode. We illustrate
this approach with tcpdump.
2. Use cap enter to reinforce the sandboxes of ap-
plications with existing privilege separation or com-
partmentalisation. These applications have a more
complex structure, but are already aware that some
access limitations are in place, so have already been
designed with ﬁle descriptor passing in mind. Re-
ﬁning these sandboxes can signiﬁcantly improve se-
curity in the event of a vulnerability, as we show
for dhclient and Chromium; the performance and
complexity impact of these changes will be low
because the application already adopts a message
passing approach.
to
the
3. Modify
the
use
application
full
libcapsicum API,
introducing new compart-
mentalisation or reformulating existing privilege
separation.
This offers signiﬁcantly stronger
protection, by virtue of ﬂushing capability lists and
residual memory from the host environment, but at
higher development and run-time costs. Boundaries
must be identiﬁed in the application such that not
only is security improved (i.e., code processing
risky data is isolated), but so that resulting perfor-
mance is sufﬁciently efﬁcient. We illustrate this
technique using modiﬁcations to gzip.
Compartmentalised application development is, of ne-
cessity, distributed application development, with soft-
ware components running in different processes and
communicating via message passing. Distributed debug-
ging is an active area of research, but commodity tools
are unsatisfying and difﬁcult to use. While we have not
attempted to extend debuggers, such as gdb, to better
support distributed debugging, we have modiﬁed a num-
ber of FreeBSD tools to improve support for Capsicum
development, and take some comfort in the generally
synchronous nature of compartmentalised applications.
The FreeBSD procstat command inspects kernel-
related state of running processes, including ﬁle descrip-
tors, virtual memory mappings, and security credentials.
In Capsicum, these resource lists become capability lists,
representing the rights available to the process. We have
extended procstat to show new Capsicum-related in-
formation, such as capability rights masks on ﬁle de-
scriptors and a ﬂag in process credential listings to indi-
cate capability mode. As a result, developers can directly
inspect the capabilities inherited or passed to sandboxes.
When adapting existing software to run in capability
mode, identifying capability requirements can be tricky;
often the best technique is to discover them through
dynamic analysis, identifying missing dependencies by
tracing real-world use. To this end, capability-related
failures return a new errno value, ENOTCAPABLE, dis-
tinguishing them from other failures, and system calls
such as open are blocked in namei, rather than the sys-
tem call boundary, so that paths are shown in FreeBSD’s
ktrace facility, and can be utilised in DTrace scripts.
Another common compartmentalised development
strategy is to allow the multi-process logical application
to be run as a single process for debugging purposes.
libcapsicum provides an API to query whether sand-
boxing for the current application or component is en-
abled by policy, making it easy to enable and disable
sandboxing for testing. As RPCs are generally syn-
chronous, the thread stack in the sandbox process is logi-
cally an extension of the thread stack in the host process,
which makes the distributed debugging task less fraught
than it otherwise might appear.
tcpdump
4.1
tcpdump provides an excellent example of Capsicum
primitives offering immediate wins through straight-
forward changes, but also the subtleties that arise when
compartmentalising software not written with that goal
in mind. tcpdump has a simple model: compile a pat-
tern into a BPF ﬁlter, conﬁgure a BPF device as an in-
put source, and loop writing captured packets rendered as
text. This structure lends itself to sandboxing: resources
are acquired early with ambient privilege, and later pro-
cessing depends only on held capabilities, so can execute
in capability mode. The two-line change shown in Fig-
ure 6 implements this conversion.
This signiﬁcantly improves security, as historically
fragile packet-parsing code now executes with reduced
privilege. However, further analysis with the procstat
tool is required to conﬁrm that only desired capabili-
ties are exposed. While there are few surprises, un-
constrained access to a user’s terminal connotes signif-
icant rights, such as access to key presses. A reﬁnement,
shown in Figure 7, prevents reading stdin while still al-
lowing output. Figure 8 illustrates procstat on the re-
sulting process, including capabilities wrapping ﬁle de-
scriptors in order to narrow delegated rights.
ktrace reveals another problem, libc DNS resolver
code depends on ﬁle system access, but not until after
cap enter, leading to denied access and lost function-
ality, as shown in Figure 9.
This illustrates a subtle problem with sandboxing:
highly layered software designs often rely on on-demand
initialisation,
lowering or avoiding startup costs, and
those initialisation points are scattered across many com-
ponents in system and application code. This is corrected
by switching to the lightweight resolver, which sends
DNS queries to a local daemon that performs actual res-
+
+
if (cap_enter() 0x1b6)
"/etc/resolv.conf"
connect -1 errno 78 Function not implemented
socket(PF_INET,SOCK_DGRAM,IPPROTO_UDP)
socket 4
connect(0x4,0x7fffffffe080,0x10)
connect -1 errno 78 Function not implemented
Figure 9: ktrace reveals a problem: DNS resolution depends on ﬁle system and TCP/IP namespaces after cap enter.
PID COMM
18988 dhclient