, . . . si
After TCj generates the triples, it transfers them to CC to use
during the online computation. Each member Pi ∈ TCj secret-
shares [[w]](i) to CC, where w is a triple component, using c−1 seeds
to a pseudorandom generator (PRG) to minimize communication.
That is, Pi samples c − 1 PRG seeds, si
c−1, and sends each to
a different member of CC\Qi , where Qi ∈ CC is the ith member of
CC. To Qi , Pi sends [[w]](i) c−1
h). Having each Pi ∈ TC
send this to a different Qi ∈ CC provides load balancing. After CC
has received the triples from TCj , it must ensure that they are well
formed so that a malicious member of TCj can’t cause the later
online computation to abort. CC executes a batch MAC check on all
triple components using ΠMACCheck (Figure 3). This MAC-checking
procedure is taken from Keller et al. [49]. If the MAC check fails,
CC informs TCj , TCj aborts, and CC rejects the triple batch and
any further batches from TCj .
h=1 PRG(si
Security. Theorem 4.1 shows that ΠPre securely realizes FPre
4.2.4
(Figure 6 in Appendix A) as long as there exists at least one honest
member in every committee. The proof appears in the technical
report [65].
Theorem 4.1. ΠPre realizes FPre in the standalone model with
random oracle H against a static, malicious adversary simultaneously
corrupting up to c − 1 members of each of CC, TC1,. . ., and TCmTC .
A consequence of Theorem 4.1 (following from the definition of
FPre) is that ΠPre can be used to obtain random authenticated bits
and triples secret-shared by CC that are unknown to the adversary
and have correct MAC tags under a global key ∆. An additional
corollary is that TCj can only cause its triple generation to be
aborted and cannot interrupt triple generation by other TCs. Fur-
thermore, ΠPre reveals no information about ∆ to the adversary.
4.2.5 Performance. The offline preprocessing protocols are the
most costly components of Stormy. Generating ℓ triples involves
an execution of a correlated oblivious transfer with errors proto-
col (Figure 19 in [48]) with every other committee member. This
protocol extends a small number of łbasež 1-of-2 oblivious trans-
fers [18] (which are the only offline asymmetric-key cryptographic
h =1:
2λ el-
Committee C uses shared key [∆] to check the MACs of authen-
ticated secret-shared bits {[[xh]]}b
1. C calls ΠPre.Random(F
2. C generates random coefficients:
2λ , 1) to obtain authenticated F
ement [[f ]].
a. Each Pi chooses si , ri ∈ {0, 1}κ and sends commit-
b. After all Comj are received, each Pi sends opening
ment Comi = H(si ||ri) to each Pj .
(si ||ri) to each Pj .
c. After obtaining all opened values, each Pi sets r =
j r j and generates (д0, д1, . . . , дb) ← PRGλ(r),
дh ∈ F
2λ for 0 ≤ h ≤ b.
h =1 µ(i)xh
3. Each Pi computes y(i) = f (i)д0 + b
дh and µ(i) =
дh , where µ(i)z denotes Pi ’s share of the
4. C performs a partial opening:
µ(i)
д0 + b
f
MAC in [[z]].
a. Each Pi sends y(i) to a designated party P1.
b. P1 sends y = c
and sends commitment Comi = H(qi ||ζ (i)) to each Pj .
to each Pj .
5. Each Pi computes ζ (i) = µ(i) − y ∆(i), chooses qi ∈ {0, 1}κ ,
6. After all Comj are received, each Pi sends opening (cid:0)qi ||ζ (i)(cid:1)
7. After obtaining all opened values, each Pi sets ζ = c
j =1 ζ (j)
j =1 y(j) to each Pi .
h =1 x(i)
h
and aborts if ζ , 0.
Figure 3: MAC checking protocol.
operations) into a large number (ℓ) of oblivious transfers using only
symmetric key operations. However, it has high communication
costs, and with c parties, it requires that each party sends approxi-
mately 3(c − 1)(κ + λ)ℓβ bits for ℓ triples, where β ≤ λ/(log2(ℓ)) + 1.
The Random functionality is also based on OT extension and thus
also requires relatively cheap computation, but its communication
costs for b bits are about 2(c − 1)λb and are thus significantly lower
than triple generation unless b ≫ ℓ.
4.3 Input Sharing Protocol
Another critical part of our protocol is in how inputs are provided to
the Computation Committee, CC. Specifically, our input protocol
must (1) ensure that a malicious committee member cannot modify
or exclude the input of an honest party and (2) prevent a malicious
input party from causing the computation to abort. To reduce the
amount of time input parties must be online, we also want this
protocol to be łnon-interactivež in the sense that there is only
one message sent from an input party to the committee (further
interaction within the committee is allowed).
One of the challenges in achieving these properties simultane-
ously is the need for parties to prove that they did not receive a
message that should have been sent. To support such proofs, we
design the accountable message functionality FAccMsg, described in
Figure 8 (Appendix A). The functionality has send and reveal sub-
routines. The send subroutine delivers a message to the receiving
party while allowing him to prove to the other committee members
if he failed to receive a message. The reveal subroutine simply for-
wards a sent message to all committee members. We describe in the
technical report [65] how to realize FAccMsg using an encryption
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom620scheme with verifiable decryption (e.g. El Gamal). It requires O(c)
communication, with the sender sending an encrypted message to
every committee member, each of which forwards the ciphertext
to the receiver.1
We use FAccMsg for sending point-to-point messages of both
public values and c-out-of-c additive shares. In the latter case, the
functionality looks a lot like weak verifiable secret sharing (WSS)
[62], which guarantees agreement on an honest dealer’s shared
value, and allows disagreement on whether to abort when the dealer
is malicious.2 However, there are a few important differences. We
require an additive sharing of the input (rather than, say, a Shamir
sharing), and we do not want to involve the dealer after the sending
phase. It is not clear how to achieve these properties using WSS.
Note that, because we use an additive sharing, reconstruction is
always possible, as long as everyone has received some signed
value in the field. Additionally, there are a few relaxations that
we leverage: we allow some honest parties to abort, even when
the dealer is honest (as long as they don’t blame the dealer), and
we allow disagreement on the dealer’s input value if the dealer is
malicious.
We now briefly describe the ΠInput protocol (Figure 4) making
use of FAccMsg. A functionality FInput is given in Figure 7 (Ap-
pendix A) and a proof of security for this protocol is given in the
technical report [65]. Pin sends additive shares of his masked, b-bit
input, and of the b mask values. He cannot authenticate these val-
ues, since he does not know ∆, so he instead computes part of the
MAC check protocol. Specifically, he secret-shares random coef-
ficients (χ1, . . . , χb), and computes and sends their inner-product
with his mask values.
The committee transfers the MAC values from the pre-processed
random bits to the masked input, and then opens the shared coeffi-
cients in order to complete the MAC check on the masked input.
If the MAC check terminates without error, they know they have
validly authenticated, unmodified input. If an error is detected dur-
ing the MAC check, there are two possibilities: either the input
party sent an inner-product that was inconsistent with his mask
values and his MAC check coefficients, or some committee member
modified some of the values he received. The committee members
use the reveal subroutine of FAccMsg to verify that the masks, the
coefficients, and the inner-product are consistent; crucially, they
can do this without exposing the masked input, and so an honest
Pin is not adversely impacted.
The input protocol has different abort behavior based on which
party is controlled by the adversary. If only Pin is malicious, we
guarantee that all committee members detect this and blame Pin, so
they can exclude his input and continue. If only committee mem-
bers are malicious, some honest parties may not immediately detect
this, but none will blame Pin. We allow the protocol to continue
with a fraction of the honest parties, who will quickly abort anyway,
as at least one of their honest partners will have stopped partic-
ipating. Finally, if both the input party and committee members
1If we are willing to sacrifice the non-interactive property, the sender can send a
message directly to the receiver without accountability, saving on communication. The
receiver may then complain and ask for an execution of the accountable message pro-
tocol only when necessary. If everyone is honest, the protocol remains non-interactive.
2Because we sometimes use this functionality for sending public values, we model it
as having send and reveal subroutines, instead of share and reconstruct, which is used
in VSS and WSS.
are malicious, they can force part of the committee to blame the
input party while others blame the committee (or nobody at all).
Regardless, all committee members will terminate the protocol,
either immediately, or when detecting that others have aborted.
The proof of the next theorem appears in the technical report [65].
Theorem 4.2. ΠInput securely realizes the ideal functionality FInput
in the standalone model against a static, malicious adversary that
can corrupt Pin and at most c − 1 out of the c parties in CC.
4.4 Online Computation Protocol
The online computation protocol is run by the Computation Com-
mittee, CC, to evaluate a Boolean circuit on inputs provided by the
relays. We use the TinyOT protocol of Burra et al. (Figure 11, [15]).
The online computation protocol ΠOnline uses the subprotocols
ΠAdd, ΠMultiply, and ΠOutput described by Burra et al. It takes as
input the circuit C to be computed and the global MAC key [∆]. Ac-
cess to the offline bits and triples is assumed as well. After running
ΠInput with each input party, CC executes ΠAdd and ΠMultiply for
each of the XOR and AND gates in C, respectively, in topologically-
sorted order. The inputs at each gate are values [[x]]CC and [[y]]CC
either obtained during input sharing or output by a previous gate
evaluation, and the gate’s output is a value [[z]]CC, where z = x ⊕ y
for an XOR gate and z = x ∧ y for an AND gate. ΠOutput takes the
values of the o output gates ([[y1]]CC, . . . , [[yo]]CC) and either aborts
or outputs (y1, . . . , yo) to each member of CC. The functionality
FOnline realized by this protocol is given in Figure 9 (Appendix A),
and the following theorem follows from Burra et al. [15].
Theorem 4.3. ΠOnline securely realizes the ideal functionality
FOnline in the standalone model against a static, malicious adversary
that can corrupt at most c − 1 out of the c parties in CC.
The online computation phase is fast and inexpensive compared
to the offline preprocessing phase. It involves no asymmetric-key
operations. Evaluating XOR gates is localÐno network communica-
tion occurs. Evaluating an AND gate involves sending and receiving
about two bits on average. A major cost is latency due to the round
complexity, which is determined by the circuit’s AND-gate depth.
4.5 Complete protocol
We now describe how these component protocols can be assembled
into a protocol ΠRM−MPC to securely evaluate a Boolean circuit C
in the Relay Model. The protocol in the Authority Model can be
recovered by skipping committee election and executing everything
in the single committee, and security follows in a straightforward
way from prior work. ΠRM−MPC is executed as follows:
(1) All parties run the randomness generation protocol described
in Section 4.1.1 to generate shared randomness r .
(2) Each party locally uses r to elect m committees, setting the
first committee as the CC, and the rest as TCs.
random bits and field elements for all inputs in C.
(3) The CC runs FPre.Initialize to generate a global MAC key ∆.
(4) The CC runs FPre.Random to generate sufficiently many
(5) Each TCj runs FPre.Triples to generate AND triples and
outputs them to the CC. If any party in any TCj aborts, no
triples are produced, but the protocol continues.
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom621Protocol ΠInput
holding global MAC key ∆.
Notation:
• Let C = {P1, . . . , Pc } denote the Computation Committee
• Let Pin denote the input party holding input bits x1, . . . , xb .
Subroutine Adjust([[r]], [s]) 7→ [[s]]: (r , s ∈ F2 or r , s ∈ F
2λ )
1. Let r (i), m(i)r , and s(i) denote Pi ’s share of r , mr (the MAC
on r ) and s, respectively.
2. Each Pi computes d(i) = s(i) − r (i). C opens d .
3. Each Pi sets m(i)s = m(i)r + d · ∆(i). C now holds [[s]].
Preprocessing:
1. C calls FPre(random, F
2. C calls FPre(random, F
h =1.
shared field element [[r0]].
shared bits {[[rh]]}b
2λ , 1) to obtain authenticated, secret-
, b) to obtain authenticated, secret-
2
Input Sharing:
1. Pin samples s0 ← F
2. Pin forms random sharings {[sh]}b
2λ , (s1, . . . , sb) ← Fb
(χ0, . . . , χb) ← Fb +1
2λ . Pin computes y = b
2 , and
h =0 (χh · sh).
h =1, and
{[χh]}b
h =0. Pin accountably sends to Pi ∈ C its shares,
and the public value y, using FAccMsg .send. If Pi receives
(abort, C) in any execution of FAccMsg, he aborts and blames
C. Otherwise, if he receives (abort, Pin) in some execution,
he excludes Pin’s input.
h =0, {[xh + sh]}b
3. C calls Adjust([[rh]], [sh]) and obtains {[[sh]]}b
4. Each Pi ∈ C opens their share of χ (i)
h
h =0.
, for h = 0, . . . , b, by
calling FAccMsg .reveal(χ (i)
h ).
(Here, and any other time FAccMsg .reveal is called, if a party
receives (abort, C), they abort and blame C.)
, for h = 0, . . . , b, and
5. Each Pi computes χh = c
i =1 χ (i)
h
h =0 (cid:16) χh · m(i)
h (cid:17), where m(i)
h
m(i) = b
share on sh .
denotes Pi ’s MAC
6. C executes a MAC check:
a. Each Pi computes ζ (i) = m(i) − y · ∆(i).
b. C securely opens ζ = c
i =1 ζ (i): each Pi sends a com-
mitment Comi = H(ζ (i)||ri) to all Pj ∈ C, and after
receiving all c − 1 commitments, sends the opening
(ζ (i)||ri) to C.
i. Each Pi echos his shares of s, {s(i)
c. If ζ , 0, C must decide to exclude or abort:
h =0, by calling
FAccMsg .reveal(s(i)
h ).
detects any inconsistency, C excludes Pin’s input.
ii. Each Pi echos y by calling FAccMsg .reveal(y). If C
h }b
iii. Each Pi computes sh
If y ,
b
h =0 (χh · sh), C excludes Pin’s input. If not, C
aborts and blames C.
calling
Pi
+ s(i)
echos
= c
i =1 s(i)
by
h
.
h )}b
h =1
7. Each
FAccMsg .reveal((x(i)