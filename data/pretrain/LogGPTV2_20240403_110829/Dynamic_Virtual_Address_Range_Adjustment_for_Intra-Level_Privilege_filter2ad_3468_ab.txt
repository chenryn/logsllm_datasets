normal OS. In this case, the get_sys_time() function
of the secure OS returns the current
time of the secure
world to the normal OS. However, the get_sys_time()
function does not check the validity of a destination address
(tag_TC_NS_SMC_CMD::operation_phys) where the
time value will be stored. Therefore, attackers
in the
normal OS can manipulate arbitrary memory locations
of the secure OS by sending commands with a crafted
tag_TC_NS_SMC_CMD::operation_phys.
2) The Ability of Attackers: We assume that all software
attacks that would compromise system software can be carried
out. By exploiting vulnerabilities, attackers may attempt to do
anything allowed within the privilege level of the victim system
software. Speciﬁcally, they may exploit arbitrary memory read
capabilities to disclose secrets in system software. They may
also leverage arbitrary memory write capabilities to manipulate
control data (return addresses or function pointers) and non-
control data to subvert system software. In many cases, their
attacks involve tampering with system resources, such as page
tables and system control registers, in order to facilitate further
attacks by incapacitating protection capabilities of the system.
However, we assume that attackers do not mount side-
channel attacks to reveal secrecy of system software. They
are also assumed not to launch any types of hardware attacks.
Therefore, memory attacks, such as cold boot attacks and
3
structtag_TC_NS_SMC_CMD{…unsigned intoperation_phys;…};intget_sys_time() {….// v2 and v3 are holding time values from get_time()*(int*)(cmd->operation_phys+ 4) = v2;*(int*)(cmd->operation_phys+ 4) = 1000 * v3;}Normal WorldSecure WorldOuterdomainInnerdomainPrivilege LevelOuterdomainInnerdomainOuterdomainInnerdomainNormal OSHypervisorSecure OSTABLE I.
COMPARISON OF HARDWARE-ASSISTED SECURITY SOLUTIONS FOR PRIVILEGED SYSTEM SOFTWARE.
Solution
SecVisor [36]
SIM [37]
SecPod [45]
HyperSentry [8]
TZ-RKP [7]
SPROBES [19]
Nested Kernel [15]
HyperSafe [46]
SKEE [4]
SKEE [4]
Hilps
Need for Higher Priv. Layer
Yes
Yes
Yes
Yes
Yes
Yes
No
No
No
Yes
No
Architecture
x86 32/64-bit
x86 32/64-bit
x86 32/64-bit
x86 32/64-bit
ARM 32/64-bit
ARM 32/64-bit
x86 64-bit
x86 64-bit
ARM 32-bit
ARM 64-bit
ARM 64-bit
Key Hardware Feature
Extended Paging
Extended Paging, CR3-Target-List
Extended Paging, CR3-Target-List
System Management Mode
TrustZone
TrustZone
Write-Protection
Write-Protection
TTBCR
Extended Paging
TxSZ
Normal OS
Support
Support
Support
Support
Support
Support
Support
Support
Support
Support
Support
Hypervisor
Not Support
Not Support
Not Support
Support
Support
Support
Support
Support
Not Support
Not Support
Support
Secure OS (TrustZone)
-
-
-
-
-
-
Not Support
Not Support
Support
Not Support
Support
bus monitoring attacks, are beyond the scope of this paper.
Similarly, JTAG attacks are not considered either.
3) Security Guarantee: Hilps implements privilege sepa-
ration to increase the security level of system software by
isolating the inner, secure domain from the outer domain. To
defend the outer domain, which potentially be under control
of attackers, against corrupting the inner domain region, we
ensure the integrity of its TxSZ-based mechanisms for intra-
level isolation and domain switching. As a result, the code and
data (i.e., sensitive system resources and security applications)
residing in the inner domain are isolated and protected from the
outer domain. Recall that multi levels of system software may
run in a single machine. Hilps covers this typical situation by
supporting full intra-level privilege separation. Therefore, even
if different levels of system software simultaneously operate
in the system, Hilps can be applied separately and offer each
of them certain security advantage with privilege separation as
described in Figure 2.
4) Trusted Computing Base: Hilps is designed to operate
based on salient hardware features provided by AArch64.
Therefore, we assume that all hardware components do not
contain any bugs or vulnerabilities, such as RowHammer
bug [22]. We assume that
the integrity of the code base
belonging to privilege separation mechanisms implemented by
Hilps is formally veriﬁable. That is, there is no exploitable
vulnerability in them, and this assumption is not violated
during the boot sequence because we also assume that system
software that applies our technique is loaded intact with a
secure boot mechanism such as AEGIS [41] or UEFI [44].
B. Related Work
By abandoning the monolithic design and modularizing
core services, the micro-kernel design [25], [24] can prevent
damage of a fraction of the OS kernel from spreading across
the whole kernel. Similar attempts have been made on different
system software [47], [40]. Through in-depth study [24], [47],
the performance of these schemes is almost comparable to
current monolithic system software. Nevertheless, the micro-
kernel design has been deemed unrealistic in that it usually
necessitates a complete remodeling of the current system
software architecture. Considering practicality, many research
efforts have struggled to enhance the security of the monolithic
system software without major modiﬁcation.
As a more realistic design to strengthen system software
security, researchers turn their focus onto an additional security
layer in the system, such as a hypervisor [36], [37], [39], [45],
SMM of Intel [20], [8], [51], [9], DRTM of Intel TXT [27] or
TrustZone of ARM [19], [7], which has a higher privilege over
the software they intend to protect. This more privileged layer
may own exclusive capability of monitoring and controlling
system resources such that it can safely guard sensitive system
resources against potential attacks. A clear advantage of this
design is that it does not entail substantial changes in the
current software architecture. However, earlier studies have
commonly agreed that this is inferior majorly in two aspects
to the intra-level privilege separation solutions introduced in
Section I. One is that
its trust on
more privileged software for its solution to work, hence being
infeasible to solve security problems for the most privileged
software. The other is that it suffers from a longer latency,
possibly reaching up to thousands of CPU cycles [7],
in
switching between two different privilege layers.
it always tends to put
In light of analysis on other security solutions, a growing
number of studies have proposed various intra-level privilege
separation schemes attempting to provide alternative solutions.
Software Fault Isolation (SFI) [13], [26], [16], [14], one of
such schemes, is realized by integrating a number of in-lined
reference monitors [35] into system software for exhaustive ac-
cess control enforcement. SFI boasts its excellent applicability
thanks to its hardware independent design, but it has a serious
drawback that the system performance degrades proportionally
to the amount of instrumented code. To minimize performance
degradation, other research has exerted effort to attain high
efﬁciency by taking full advantage of underlying hardware
supports in their schemes. To this end, some researchers
strive to utilize hardware features for their hardware-assisted
memory protection capabilities. As representative examples,
Nested Kernel [15] and HyperSafe [46] have successfully
evinced the effectiveness of their hardware-assisted privilege
separation schemes in terms of performance as well as secu-
rity. In particular, as explained in Section I, their underlying
hardware feature, the WP bit, makes their solutions for privilege
separation applicable to both an OS and a hypervisor.
Due primarily to the relatively abundant hardware support
for security, a majority of privilege separation schemes have
been centered on Intel x86 architectures. To the best of our
knowledge, SKEE [4] is the only and most notable work to
realize privilege separation on ARM’s commodity processors
today. This is in fact,
the closest work to
ours in that our goal is also to ﬁnd a doable solution for
privilege separation on ARM. However, due to the lack of
the availability of key hardware features, SKEE can only be
applied to limited levels of system software in comparison
with Hilps. First, targeting ARM’s 32-bit architecture, SKEE
capitalizes mainly on Translation Table Base Control Register
(TTBCR) for dynamic page table activation and successfully
implements the two essential mechanisms for isolation and
in our view,
4
Fig. 3. Exception Levels of AArch64
switching described in Section I. To be more speciﬁc, SKEE
creates separate page tables for the inner domain and activates
them in a timely manner by modifying the N ﬁeld of TTBCR
only when the inner domain is in control. However, as this
hardware feature is only deﬁned in the kernel privilege level
on AArch32, SKEE is not commonly applicable to different
levels of system software, such as hypervisors.
Unfortunately, SKEE faces a similar limitation on ARM’s
64-bit architecture. As ARM has abandoned the original
TTBCR feature in this new line of processors, SKEE opts for
the software-based page table swap technique introduced by
Nooks [42]. Recall that this swap technique has an intrinsic
security loophole [39], [37] in that attackers can exploit it
to load a maliciously crafted page table. To resolve the
problem, SKEE resorts to an additional method that hardens
the technique in a way to operate deterministically. For this, it
is compelled to rely on a complementary technique, called
extended paging, which must be supported and controlled
by a hypervisor. Despite the lack of due hardware support,
the solution manages to achieve remarkable performance. It,
however, also comes with a major limitation. The mandatory
involvement of a hypervisor for extended paging manifests its
limitation that the same solution is not viable for privilege
separation on the hypervisor itself or secure OS. In contrast,
owing to the availability of TxSZ at all levels of system
software on AArch64, Hilps can be equally applied to any
types of system software.
Table I summarizes the comparison of Hilps and other
hardware-assisted security solutions for system software. To
compare the coverage of each solution, we deemed that a
solution supports a speciﬁc type of system software if its key
hardware features are available on the privilege level where
the system software runs. For example, the TrustZone-based
approach of TZ-RKP [7] can be adopted to not only a normal
OS but also a hypervisor. Therefore, even if authors of TZ-RKP
did not handle a hypervisor in their paper, we considered that
TZ-RKP can support a hypervisor as well. Such a comparison
clearly shows two advantage of Hilps. First, Hilps does not
require the help of higher privileged software such that it does
not unnecessarily bloat the size of trusted computing base.
Second, Hilps relies on TxSZ, which commonly exists in all
processor privilege levels of AArch64, such that it facilitates
the enforcement of intra-level privilege separation in all levels
of privileged system software.
III. BACKGROUND
Fig. 4. The change of the virtual address range depending on TCR ELx.TxSZ
A. Exception Level
In AArch64, the processor privilege levels of AArch32
are mapped onto the exception levels (ELx). As described in
Figure 3, four exception levels are deﬁned in AArch64 and
an exception level with a larger number x corresponds to a
higher privilege level. Generally, each exception level is used
to execute different levels of software as follows:
•
•
•
•
EL0: Applications
EL1: Normal OSes and Secure OSes
EL2: Hypervisors
EL3: Secure monitors1
B. Virtual Address Range
At every exception level, AArch64 provides two types of
core registers for the virtual address translation management.
As the ﬁrst type, Translation Table Base Registers (TTBRs)
hold the base physical address of the current page table for
mapping between virtual and physical addresses. At
level
1, there are two registers, TTBR0_EL1 and TTBR1_EL1,
provided for applications and the OS, respectively. At all
the other levels, AArch64 supports only one register, that is,
TTBR0 EL2 at EL2 and TTBR0 EL3 at EL3. As displayed in
Figure 4, TTBR0_ELx is used to translate the virtual address
space starting from the bottom (0x0), and TTBR1_EL1 is used
to translate the virtual address space starting from the top
(0xFFFF FFFF FFFF FFFF). The registers of the second type
are Translation Control Registers (TCR_ELx) that determine
various features related to address translation at each exception
level, such as translation granule size, cacheability and share-
ability. In particular, the two ﬁelds T0SZ and T1SZ within
TCR_ELx are used to deﬁne the valid virtual address ranges
that are allowed for virtual-to-physical address translation. Fig-
ure 4 depicts how virtual address ranges vary with the values
of TCR_ELx.T0SZ and TCR_EL1.T1SZ. Since the current
version of AArch64 supports the maximum virtual address
range of 48-bit (256 TB) for each TTBR, the virtual address
range reaches the boundary when TxSZ is 16, and it varies
in inverse proportion to TxSZ. In the current AArch64 Linux,
the default value of the TxSZ is 25, indicating that the 39-
bit (512 GB) virtual address range is available in each kernel
and user space. Once TxSZ is programmed, any memory
access exceeding the virtual address range is forbidden, and
the system generates a translation fault if violated.
In this section, we provide the background information
relevant to our target 64-bit architecture, AArch64.
1Generally, secure monitors act as a mediator that performs a context switch
between the normal and secure worlds.
5