18 );
19 }
20 catch(err)
21 {
22 console.log("[!] Exception2: " + err.message);
23 }
24 }
25 else
26 {
27 console.log("Objective-C Runtime is not available!");
28 }
执⾏结果如下：
成功绕过。
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 8/16
2020/7/27 当frida来"敲"门
4
HOOK加解密函数
越狱检测绕过后，进⼀步开始尝试定位加解密的函数。
关于定位加解密函数这块在Android可以尝试使⽤traceview去分析追踪函数。
(https://developer.android.google.cn/studio/profile/traceview)
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 9/16
2020/7/27 当frida来"敲"门
IOS可以尝试使⽤runtime去追踪函数，uidump从界⾯按钮⼊⼿，Nslog⽇志等位置⼊
⼿，或者直接找相关关键字的函数去⼊⼿。
例如crypt(decryot,encrypt),HTTP,Network,⽬标⼚商的名字简写找不到，可以尝试
搜索NSString系统库等。
这边推荐⼀个⼤佬的github项⽬。使⽤可以参考这个githu项⽬，⾮常好⽤，先⽤之前写
好的绕过越狱检测的脚本启动APP，这边通过查找函数名找到对⽅关键的加解密函数
“*encryptor”。
github项⽬：https://github.com/lyxhh/lxhToolHTTPDecrypt
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 10/16
2020/7/27 当frida来"敲"门
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 11/16
2020/7/27 当frida来"敲"门
hook此函数的所有⽅法，在点击登录按钮后，观察到有请求的数据包被当做参数传⼊到-
[XXEncryptor RSAEncrypt:]⽅法内，并返回了加密后的字符串。-[XXEncryptor
setRSAPublicKey:]根据定义的⽅法名判断应该是RSA公钥信息。
其他⽅法则去处理了返回包。如-[XXEncrytor AESDecrypt:]⽅法，将服务端返回的
加密字段，使⽤AES对称解密解密为明⽂。
之前我们在Hook请求包函数的时候发现明⽂的数据包⾥⾯带有aeskey，说明此处的逻辑
应该是：
本地⽣成aeskey代⼊到request包->使⽤定义的RSA公钥加密request->发送到服务
端并解密request后->处理请求包内容，并使⽤AESkey加密Response返回到客户端-
>客户端在使⽤Aeskey解密服务端的Response包。
⼤概是这么⼀个流程，事实也证明返回包确实可以使⽤hook到的aeskey进⾏解密。
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 12/16
2020/7/27 当frida来"敲"门
后⾯的思路是hook[XXEncrytor AESDecrypt:]解密⽅法去解密请求包和返回包，返回
包是可以解，但是突然想到请求包是RSA⾮对称的，需要私钥。想尝试在客户端找到RSA
的私钥或者RSA解密⽅法，结果也确实有RSADecrypt⽅法。
但是事实是，从头到尾这个⽅法都没有被使⽤过，没有参数被传⼊，也没有返回值。所以
想，可能本地不做请求包的解密。那么调⽤他的函数解密返回包可⾏，但解密请求包不
⾏ 。 但 是 咱 们 之 前 是 有 Hook 到 明 ⽂ 的 request, 可 以 再 request 被 传 ⼊ 到 -
[XXEncryptor RSAEncrypt]⽅法前，先去修改arg。
具体操作⽅法可以参考lyxhh，将加密前的请求包转⼊Burp后就可以实现篡改数据了。
lyxhh：https://github.com/lyxhh/lxhToolHTTPDecrypt
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 13/16
2020/7/27 当frida来"敲"门
新⼿的话可以先⽤la0s的JS，先看看对⽅是不是使⽤了IOS统⼀封装的Crypto库,js脚本
如下：
JS:https://la0s.github.io/2018/12/07/iOS_Crypto/
1 / Intercept the CCCrypt call.
2 Interceptor.attach(Module.findExportByName('libcommonCrypto.dylib', 'CCC
3 onEnter: function (args) {
4 // Save the arguments
5 this.operation = args[0]
6 this.CCAlgorithm = args[1]
7 this.CCOptions = args[2]
8 this.keyBytes = args[3]
9 this.keyLength = args[4]
10 this.ivBuffer = args[5]
11 this.inBuffer = args[6]
12 this.inLength = args[7]
13 this.outBuffer = args[8]
14 this.outLength = args[9]
15 this.outCountPtr = args[10]
16
17 console.log('CCCrypt(' +
18 'operation: ' + this.operation +', ' +
19 'CCAlgorithm: ' + this.CCAlgorithm +', ' +
20 'CCOptions: ' + this.CCOptions +', ' +
21 'keyBytes: ' + this.keyBytes +', ' +
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 14/16
2020/7/27 当frida来"敲"门
22 'keyLength: ' + this.keyLength +', ' +
23 'ivBuffer: ' + this.ivBuffer +', ' +
24 'inBuffer: ' + this.inBuffer +', ' +
25 'inLength: ' + this.inLength +', ' +
26 'outBuffer: ' + this.outBuffer +', ' +
27 'outLength: ' + this.outLength +', ' +
28 'outCountPtr: ' + this.outCountPtr +')')
29
30 if (this.operation == 0) {
31 // Show the buffers here if this an encryption operation
32 console.log("In buffer:")
33 console.log(hexdump(ptr(this.inBuffer), {
34 length: this.inLength.toInt32(),
35 header: true,
36 ansi: true
37 }))
38 console.log("Key: ")
39 console.log(hexdump(ptr(this.keyBytes), {
40 length: this.keyLength.toInt32(),
41 header: true,
42 ansi: true
43 }))
44 console.log("IV: ")
45 console.log(hexdump(ptr(this.ivBuffer), {
46 length: this.keyLength.toInt32(),
47 header: true,
48 ansi: true
49 }))
50 }
51 },
52 onLeave: function (retVal) {
53 if (this.operation == 1) {
54 // Show the buffers here if this a decryption operation
55 console.log("Out buffer:")
56 console.log(hexdump(ptr(this.outBuffer), {
57 length: Memory.readUInt(this.outCountPtr),
58 header: true,
59 ansi: true
60 }))
61 console.log("Key: ")
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 15/16
2020/7/27 当frida来"敲"门
62 console.log(hexdump(ptr(this.keyBytes), {
63 length: this.keyLength.toInt32(),
64 header: true,
65 ansi: true
66 }))
67 console.log("IV: ")
68 console.log(hexdump(ptr(this.ivBuffer), {
69 length: this.keyLength.toInt32(),
70 header: true,
71 ansi: true
72 }))
73 }
74 }
75 })
如果只能hook到部分明⽂流量，再考虑去对⽅定义的函数⾥去找关键的加密函数，如这
个APP的关键的XXEncryptor类。
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 16/16
|---|--|--|
| 0 |  |  |