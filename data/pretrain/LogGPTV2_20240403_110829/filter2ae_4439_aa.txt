[TOC]
# 概述
本片文章描述一次完整的脱壳历程，从java层到Native层
# 流程概述
## Java层
  1. java层找到库函数的入口位置
  2. 过掉java层的反调试(解决方法在Native层：动态在isDebuggerConnected下断点)
## Native层
  1. 绕过Anti IDA
  2. 双层解密JNI_OnLoad
  3. 动态调试JNI_OnLoad，得到注册的本地方法的具体位置
  4. 分析load方法找到Dex动态解密的地方并dump
# 详细过程
这次脱壳用的测试机是Dalvik虚拟机4.4版本，所以底层用的libdvm.so库文件。
## 壳特征
有过壳经验的分析人员可以从安装包的特征文件和lib下的libshellxxx.so中看出是TX加固过的壳
## java层
### 实锤加壳
在manifest中的入口类LoadingActivity是找不到的
    ...........
### 初探attachBaseContext
既然入口类被隐藏了，我们根据调用关系找到启动入口类的地方，即Application这个类，我们主要需要关注的是attachBaseContext方法，这个在onCreate方法之前执行的
### 弃用jadx
这个方法首先调用e(context)进行了调试检查，接着在b(this)方法中进行了一些库地址的初始化操作
接着在
d(context)方法中加载不存在的库nfix、ufix，并且调用了本地方法fixNativeResource、fixUnityResource，从名称上看应该是修复操作
接下来主要是tx的SDK崩溃信息收集模块的功能，这块可以省略，主要看最后一个a((Context) this)方法，find
Usage跳转过去发现调用了e()方法和load(f)方法
    protected void attachBaseContext(Context context) {
            super.attachBaseContext(context);
            e(context);
            SystemClassLoaderInjector.fixAndroid(context, this);
            if (b(this)) {
                d(context);
                this.k = new Handler(getMainLooper());
                String str = "3.0.0.0";
                String str2 = "900015015";
                UserStrategy userStrategy = new UserStrategy(this);
                userStrategy.setAppVersion(str);
                CrashReport.setSdkExtraData(this, str2, str);
                CrashReport.initCrashReport(this, str2, false, userStrategy);
                new Thread(new d(this)).start();
                a((Context) this);
            }
        }
    private void d(Context context) {
            AssetManager assets = context.getAssets();
            String str = context.getApplicationInfo().sourceDir;
            try {
                System.loadLibrary("nfix");
                fixNativeResource(assets, str);
            } catch (Throwable th) {
            }
            try {
                System.loadLibrary("ufix");
                fixUnityResource(assets, str);
            } catch (Throwable th2) {
            }
        }
    public void a(Context context) {
            e();
            load(f);
        }
而在jadx这里e方法并未生成相应伪代码，反汇编指令倒是没有错，为了方便分析，开启我们的jeb继续分析
### 接盘侠：jeb探索首次加载so库
接续分析e();方法，根据反编译后的伪代码，可以看到这里第一次进行了so库的加载，加载shell
还有一个紧跟着的本地的load方法，这个需要我们在Native层进行分析，参数是shella-3.0.0.0.so文件路径
### 寥寥几句onCreate
分析完attachBaseContext，接着分析onCreate
可以看到出了一个反调试和崩溃信息收集，我们的关注重点就在本地方法runCreate
    public void onCreate() {
            TxAppEntry.isDebugger(((Context)this));
            TxAppEntry.runCreate(((Context)this));
            this.sdkcrash(TxAppEntry.context);
        }
    private static native void runCreate(Context arg0) {
        }
### 再度回顾加壳包目录
加固主要行为都在这里，可以从目录名称看出，多个反调试类
刨去没什么太紧要的类，只有一个TxReceiver类值得专注
通过交叉引用，并未发现有地方注册广播来执行这里，排除静态注册，剩下只有动态注册可能，都需要Native层的分析。而且他的回调方法onReceive的内部实现是通过本地方法reciver实现的，是需要第二个关注的点
    public class TxReceiver extends BroadcastReceiver {
        public static String TX_RECIEVER;
        static {
            TxReceiver.TX_RECIEVER = "com.tencent.StubShell.TxReceiver";
        }
        public TxReceiver() {
            super();
        }
        public void onReceive(Context arg1, Intent arg2) {
            TxAppEntry.receiver(arg2);
        }
    }
    ######################################################TxAppEntry.java
    public static void receiver(Intent arg0) {
        TxAppEntry.reciver(arg0);
    }
    private static native void reciver(Intent arg0) {
    }
### 短暂小结，再度启程
壳的分析基本到这里暂停下来
**主要分析结果** ：
​ 找到了唯一一个要加载的库shella3.0.0.0.so，根据分析流程继续分析native层的load、runCreate方法
**留下的疑惑** ：
​ 修复ufix、nfix是否得到调用
​ 广播行为
## Native层
分析shella3.0.0.so，首次加载的so库
**分析目标**
  1. 本地方法runCreate
  2. java层修复ufix、nfix的fixNativeResource、fixUnityResource方法是否得到调用，做了哪些行为
  3. 实锤广播注册，探索广播行为
### 出师未捷，对抗IDA
IDA6.8打开libshella-3.0.0.0.so弹出未识别的节格式，反编译失败，什么东西都没有！这不禁引发了我对人生的思考，是对抗反编译吗、还是对抗IDA呢？这是我需要探索的问题
使用010edit打开so文件，可以看到解析文件是没有问题的，但是text、init等个别节头表内的数据都被抹空了，个别节头没有，如.dynstr、.dynsym
#### 思考
【1】如果IDA根据节数据进行反汇编，这里数据都为空，确实会反编译失败，那么如何恢复这些节表呢？但是在看到参考【4】中文章的时候，根据之前使用经验得出一些想法，
**IDA在识别节头失败后会去通过程序头表来进行分析**
【2】上面这种报错： **检测出不识别的section格式** 导致终止反编译的行为很明显是 **对抗IDA**
这种反编译工具的，这也回答了上面需要探索的问题。
​
为了解决其对抗IDA行为，我们这里直接将节内数据置空或者将包含字符的节数据置0，让他识别无意义或非法的节声明，接着使用程序头来进行分析即可。最终定位到.dynsym表的s_size字段，将这个字段置0即可
### Anti不能停：JNI_OnLoad加密
过掉AntiIDA后，再次加载so文件，可以看到导出JNI_OnLoad函数已经被加密了（虚拟内存地址=0x274C），那么合理向上推导，只能在.init节或者.init_array节中
接下来的目标就是找到init、init_array节所在的地址
#### 解决思路
【1】修复section节头
【2】动态调试so，通过在linker.so上下断点
### section修复，觅得init_array
修复之前多个节都是置空的，还有个别节错误数据来Anti IDA
通过[开源代码](https://github.com/WangYinuo/FixElfSection)对so文件进行修复后，在linux平台用readelf可以看到已经将很多节头的偏移恢复了，
在ida6.8打开时，首先出现下面两个弹窗中的出现的错误，全部确认
我们根据觅得的init_array地址，抱着兴奋的情绪进行G跳转到0x3e84，这里切记别乱改数据类型，这里应该是 **DCD**
代表双字，代表的地址是0x944。