# 使用Python测试HTTP验证服务的OCSP协议

##### 译文声明
本文是翻译文章，原文来源：360安全播报。
原文地址：[此处插入链接]
译文仅供参考，具体内容及含义请以原文为准。

今天，我们想分享如何使用渗透测试工具Burp和一些Python技巧来测试HTTP验证服务中的OCSP（在线证书状态协议）。首先简要介绍一下OCSP的基本背景。OCSP的主要功能是验证X.509证书的状态。OCSP响应器是一个关键组件，通常由权威认证机构运营，并可返回三种结果之一：“good”表示证书有效；“revoked”表示证书已被撤销；“unknown”则意味着由于颁发证书的CA对响应器来说是未知的，因此无法确定其状态。更多详细信息，请参阅RFC 2560。

在最近的一次渗透测试中，我们开发了一个Python脚本来生成有效的X.509证书并连接到一个OCSP服务。这使得在整个测试过程中不必重复手动操作，从而提高了效率。该脚本能够生成有效的OCSP响应，简化了测试流程。

为了运行此脚本，需要安装几个必要的Python包。“PyASN1”用于存储和交换客户端与OCSP服务器之间的数据，“requests”库用于处理HTTP POST请求并与Burp Proxy交互。这些扩展可以通过easy_install或pip等Python包管理器进行安装。

脚本配置包括设置要测试的OCSP应用服务器URL以及指定Burp监听端口，默认为8080。一旦正确设置了这些变量，就可以开始测试了。首先启动Burp Proxy拦截所有来自指定端口的流量。如果一切设置得当，您将看到类似如下所示的OCSP二进制证书请求：

```
POST http://yourhost.tld/ocsp HTTP/1.1
Host: yourhost.tld
Content-Length: 105
Accept-Encoding: gzip, deflate
Accept: */*
User-Agent: python-requests/2.7.0 CPython/2.7.6 Windows/7
Connection: keep-alive
Content-Type: application/ocsp-request
<binary data>
```

将此请求发送给OCSP服务后，它会验证证书并返回响应，例如：

```
HTTP/1.1 200 OK
Content-Type: application/ocsp-response
Date: Mon, 29 Jun 2015 18:22:10 GMT
X-Cache: MISS from <cache server>
Via: 1.1 <proxy server>
Connection: keep-alive
Content-Length: 5779
<binary data>
```

直接理解这些二进制响应并不容易，因此我们在脚本中加入了一个解码器。通过查看终端输出，可以看到解码后的有效载荷内容，如`certStatus=CertStatus: unknown`，表明根据RFC 2560标准，证书状态为“未知”。

如果您的OCSP服务正常工作，那么您可以尝试修改脚本来插入自己的恶意证书以进一步测试。此外，还应检查OCSP stapling功能，这是一种改进的标准OCSP协议版本，允许服务器直接向客户端发送OCSP响应，而无需每次由客户端查询颁发CA，从而减少了带宽消耗、提高了性能，并增强了安全性。启用stapling还可以降低针对OCSP服务的DoS攻击风险。

最后，在测试过程中还需要注意其他可能存在的针对OCSP服务器的攻击向量。以下是本次测试所使用的Python脚本：
[**OCSP Python Script**](https://github.com/ernw/insinuator-snippets/blob/master/OCSP/ocsp.py)