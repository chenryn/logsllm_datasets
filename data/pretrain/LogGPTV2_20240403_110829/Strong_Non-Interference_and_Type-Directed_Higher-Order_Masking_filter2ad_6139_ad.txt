return (cid:104)x0, . . . , xt(cid:105);
n); . . . ; xt ← ft(at
1, . . . , at
n);
1, . . . , aı
Thus, one can deﬁne a mapping η : OG → {0, . . . , t} such that for every position
π ∈ OG, η(π) = ı if π occurs in the computation of the ıth share (i.e. in the computation
of fı(aı
n)). The ﬁne-grained information about dependencies given by this notion
of afﬁnity is often critical to proving the probing security of algorithms. Therefore, it
is important to capture afﬁnity in our type system. Let O = Oint (cid:93) Oext be a position
set, split between internal and output positions. The afﬁne property ensures that the joint
distribution of O depends only on input positions in η(Oint ∪ Oext), and furthermore
that |η(Oint ∪ Oext)| = |η(Oint)| + |η(Oext)| = |η(Oint)| + |Oext|. Rule (AFFINE)
interprets this afﬁne property into our type system, using Γout(b) and a fresh O(cid:96) for
Oext and Oint, respectively, and encoding η(O(cid:96)) into an abstract existential set X (cid:96). The
condition |X (cid:96)| ≤ |O(cid:96)| precisely captures the fact that |η(O)| ≤ |O| for all O.
Deﬁnition 8 (Typing of an algorithm) Let P be an algorithm with a deﬁnition of the
form P (a1, . . . , an) ::= s; return r.
P is well-typed for NI, written (cid:96)NI P , whenever there exist Γin, φin such that
1≤(cid:96)≤|P| |O(cid:96)| ≤ t) and, for each i ∈ {1, . . . , n}, φin ⇒
P is well-typed for SNI, written (cid:96)SNI P , whenever there exist Γin, φin such that
1≤(cid:96)≤|P| |O(cid:96)| ≤ t) and, for each i ∈ {1, . . . , n},
1≤(cid:96)≤|P| |O(cid:96)| (where [v ← x] is the map that associates x
(cid:96) P : (Γin, φin) ⇐= (∅,(cid:80)
(cid:96) P : (Γin, φin) ⇐= ([r ← O],|O| +(cid:80)
we have φin ⇒ |Γin(ai)| ≤(cid:80)
|Γin(ai)| ≤ t.
to v and is everywhere else undeﬁned).
When typing for NI, we start from the empty map for Γout and simply consider any
output position observed as if they were internal. However, the same cannot be done
when typing for SNI since we need to distinguish clearly between internal positions in
one of the O(cid:96), used to type the gadget at instruction (cid:96), and output positions in O, initially
used as the set of position of the algorithm’s return encoding.
Proposition 5 (Soundness of the Type System)
If (cid:96) s : (Γin, φin) ⇐= (Γout, φout) then also |= P : (Γin, φin) ⇐= (Γout, φout)
If (cid:96)NI P then P is t-NI
If (cid:96)SNI P then P is t-SNI
An Example: Rivain and Prouff’s inversion algorithm We now illustrate the type system
by describing a typing derivation on Rivain and Prouff’s algorithm for computing
inversion in GF(28) [31,15]. An algorithm implementing this operation securely is
shown in Figure 4, with some information relevant to its typing derivation. We recall
that the function x (cid:55)→ x2n is linear (for any n) in binary ﬁelds and rely on afﬁne gadgets
pow2, pow4, and pow16 to compute the corresponding functionalities.
We present the typing derivation in the slightly unusual form of a table, in Figure 4,
which shows the code of the inversion algorithm along with the values of Γin and φin (φin
shows only the part of the constraint that is added at that program point, not the entire
constraint) at each program point. By the sequence rule, these serve as Γout and φout
for the immediately preceding program point. The table also shows the side conditions
checked during the application of gadget rules where relevant. It is easier to understand
the type-checking process by reading the table from the bottom up.
constraint contains only the global constraint that the whole position set O ∪(cid:83)
As per the deﬁnition of well-typedness for SNI, we start from a state where the
output position set O is associated to the algorithm’s return encoding r5, and where the
(cid:96) O(cid:96) is of
cardinality bounded by t. When treating line 9, we know that SecMult is t-SNI and try
to apply rule (SNI-GADGET). We check that the number of positions observed in this
instance of SecMult is bounded by t (which trivially follows from the global constraint),
and construct the new value of (Γin, φin) following the rule: since neither of the call’s
input encodings are used below, new sets X 9
2 are associated to the call’s inputs
and the SNI constraints are added to φin. Applying the rules further until the top of the
program is reached, and performing the appropriate set unions in Γ when an encoding
variable is used more than once, we observe that the resulting pre-assertion is such that
(cid:96) O(cid:96), and therefore proves that this inversion
|Γin(a)| ≤ |O1| +|O2| +|O3| +|O9| ≤(cid:80)
1 and X 9
algorithm is t-SNI.
1
Γin
1 ∪ X 1
2 ∪ X 2
2 ∪ X 9
2 ∪ X 2
2 ; z1 : X 9
2 ; z1 : X 9
2 ; z2 : X 3
1
1 ∪ X 8
2 ∪ X 5
2 ; r1 : X 6
2 ; r1 : X 6
1 ; w1 : X 8
2 ; r1 : X 6
1 ; w1 : X 8
2 ; w1 : X 8
2 ; r2 : X 8
2 ; w1 : X 8
2 ; r3 : X 8
1
2 ; r4 : X 9
1
a : X 3
a : X 3
a : X 3
z1 : X 9
z1 : X 9
z1 : X 9
z1 : X 9
z1 : X 9
z1 : X 9
r5 : O
1 ∪ X 4
2 ∪ X 5
2 ; w2 : X 6
1 ∪ X 7
1
φin
|X 1| ≤ |O1|
|X 2
1| ≤ |O2|
|X 3
k| ≤ |O3|
|X 4| ≤ |O4|
|X 5
1| ≤ |O5|
k| ≤ |O6|
2 |X 6
|X 7| ≤ |O7|
|X 8
k| ≤ |O8|
k| ≤ |O9|
|X 9
|O| +(cid:80)
Instructions
function invert(a)
z1 :=1 pow2(a)
z2 :=2 Refresh(z1)
r1 :=3 SecMult(z2, a)
w1:=4 pow4(r1)
w2:=5 Refresh(w1)
r2 :=6 SecMult(r1, w2)
r3 :=7 pow16(r2)
r4 :=8 SecMult(r3, w1)
r5 :=9 SecMult(r4, z1)
return r5
Fig. 4: a−1 in GF(28)
1≤(cid:96)≤9 |O(cid:96)| ≤ t
Side conditions
|X 6
1 ∪ X 8
2 ∪ X 5
|X 6
|X 3
1| + |O2| ≤ t
1 ∪ X 4| + |O3| ≤ t
2| + |O5| ≤ t
1 ∪ X 7| + |O6| ≤ t
|X 9
1| + |O8| ≤ t
|O| + |O9| ≤ t
|X 8
Finally, one can remark that the instances of SecMult at line 6 and 8 do not in fact
need to be t-SNI. As pointed out by Bela¨ıd et al. [8], using a t-NI multiplication gadget
at these program points is sufﬁcient to construct a type derivation for SNI.
7 SNI Checker for Gadgets
We present an automated method for proving that gadgets (or small algorithms, by
inlining) are t-SNI at small ﬁxed orders (up to t = 6 for ring multiplication). We then
give some experimental results.
Veriﬁcation algorithm We adapt to t-SNI the algorithmic contributions of Barthe et
al. [4] that support the automated veriﬁcation, on small to medium gadgets and for small
orders, of Ishai, Sahai and Wagner’s circuit privacy property [24], which is similar to our
t-NI. Their work builds on two observations: ﬁrst, every probabilistic program P taking
input x and performing a (statically) bounded number (say q) of uniform samplings over
K is equivalent, in the sense below, to composing a deterministic program P † taking
inputs x and r with random sampling over Kq. Formally, for every x,
Second, P satisﬁes (I,O)-NI iff there exists a function f such that for every x1, x2 and
r, such that x1 ∼I x2
(cid:74)P(cid:75)(x) = mlet r = UKq in(cid:74)P †(cid:75)O(x, r)
(cid:74)P †(cid:75)O(x1, r) =(cid:74)P †(cid:75)O(x2, f (x2, r))
and moreover f (x,·) is a bijection for every x. The latter equality can be easily veriﬁed
for all x and r using standard tools, therefore the key to proving non-interference is to
exhibit a suitable function f. Their algorithm proceeds by incrementally deﬁning bijec-
tions f1, . . . , fn satisfying the two conditions above until evenutally(cid:74)P †(cid:75)O(x, fn(x, r))
can be rewritten into an expression that does not depend syntactically on secrets.
However, even with efﬁcient algorithms to prove that a program P is (I,O)-NI for
some position set O, proving that P is t-NI remains a complex task: indeed this involves
proving (I,O)-NI for all O with |O| ≤ t. Simply enumerating all possible position
sets quickly becomes untractable as P and t grow. Therefore, [4] uses the following
fact: if P is (I,O(cid:48))-NI then it is also (I,O)-NI for all O ⊆ O(cid:48). Hence, checking that P
is (I,O(cid:48))-NI for some large set O(cid:48) is sufﬁcient to prove that P is (I,O)-NI for every
O ⊆ O(cid:48), and this using only one proof of non-interference. In particular, they exhibit
algorithms that rely on the explicit construction of the bijection fn to efﬁciently extend
the set O from which it was constructed into a potentially much larger set O(cid:48) for which
that bijection still proves (I,O(cid:48))-NI. Further, they also exhibit algorithms that rely on
such extensions to prove the existence of I such that (I,O)-NI for all position sets O
much more efﬁciently than by considering all position sets individually.
We adapt their algorithms by changing the core bijection-ﬁnding algorithm in two
ways: i. rather than being applied to a modiﬁed program that includes the initial uniform
sampling of secret encodings, our core algorithm works directly on the gadget description
(this is necessary to ensure that we prove t-SNI instead of alternative security notions);
and ii. our search for a bijection stops when(cid:74)P †(cid:75)O(x, fn(x, r)) can be simpliﬁed into
an expression that syntactically depends on at most d shares of the secret (for the desired
bound d on (cid:107)I(cid:107), that is d = |Oint| for SNI), rather than stopping when all syntactic
dependencies on the secret input have been removed. We note that replacing the bound d
from the second point with d = t yields a veriﬁcation algorithm for t-NI (by Lemma 3).
Our full algorithm is given in App. B.
Evaluation We evaluate the performance of our SNI veriﬁer on some medium and small
gadgets: SecMult, Coron’s linear-memory ring multiplication algorithm [12, Alg. 6];
MultLin, Coron et al.’s algorithm for the computation of functionalities of the form
x (cid:12) g(x) for some linear g [15, Alg. 5]; Add, the standard afﬁne gadget for the addition
Gadget
SecMult
MultLin
RefreshA
RefreshIter2
RefreshIter3
WeakMult
Order 1
Order 2
Order 3
Order 4
Order 5
Order 6
1-SNI Time 2-SNI Time 3-SNI Time 4-SNI Time 5-SNI Time 6-SNI Time
 0.07s  0.08s  0.09s  0.86s  36.40s  37min
 0.07s  0.08s  0.15s  1.19s  54.13s  48min
 0.07s
 0.08s  0.08s  0.08s  0.08s  0.13s
 0.09s  0.08s  0.09s  0.14s
–
 0.07s

–
Table 1: Experimental Results for the SNI Veriﬁer
–
.20s
.54s
–
–


–