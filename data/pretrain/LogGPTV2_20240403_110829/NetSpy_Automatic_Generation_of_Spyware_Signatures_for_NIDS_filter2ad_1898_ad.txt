BE
BHO, Toolbar
BE, BHO
Toolbar
Toolbar
BHO
Figure 6. Experimental results using NetSpy on several programs.
server www.bestoftheweb.cc sending requests matching
the regular expression:
GET /errorpage/?src=404& url=.* HTTP/1.1
NetSpy’s signature generator produced Snort signatures
using each of the three regular expressions shown above.
Note that NetSpy created three signatures for eXactSearch-
Bar because it detected traﬃc going to three distinct hosts.
Mirar toolbar behaves like 180SearchAssistant in that it
displays advertisements related to the URL visited by a user.
However, Mirar toolbar uses SSL to encrypt data that it
sends to its home server.
While NetSpy identiﬁed the extra network activity
it could not decipher the contents
generated by Mirar,
of the packets, because they were encrypted.
Thus,
NetSpy produced a signature based solely upon the
host/port pair of the traﬃc generated by Mirar toolbar
(64-128-107-140.static.twtelecom.net:443 in our
experiments).
One option to correlate network packets with user activ-
ity in such cases is to set up an SSL proxy server between
the user’s computer and the outside network. This proxy
server can provide NetSpy with decrypted traﬃc for analy-
sis.
6.2. Evaluating NetSpy with other programs
We evaluated NetSpy on 9 toolbars and browser exten-
sions (Figure 6) that are widely-believed to be non-spyware
programs. The goal was to determine if NetSpy would (er-
roneously) classify any of these popular programs as spy-
ware.
NetSpy classiﬁed 6 of these programs as benign. The re-
maining three programs, A9 Toolbar, Google Toolbar, and
Yahoo Toolbar, were (surprisingly) classiﬁed as spyware.
Further investigation revealed that these three toolbars ex-
hibited network behavior that was similar to the network
behavior of the spyware programs tested. In fact, the End-
User-License-Agreements (EULAs) from these three pro-
grams state that they track user activity to improve qual-
ity of service for their users. It is worth noting that Net-
Spy made the startling discovery that A9 Toolbar, despite
claims in its EULA, contains behavior that may be consid-
ered undesirable by many users. A9 Toolbar is an Internet
Explorer plug-in that is supposed to save URLs that a user
visits on A9’s home server, under the user’s account. This
requires the user to ﬁrst sign in to A9’s web site. We con-
ducted an experiment to simulate user browsing activity on
a machine with A9 Toolbar installed but did not sign into
A9’s web site. We had expected that A9 Toolbar would
not generate any extra traﬃc. Instead, NetSpy found that
A9 Toolbar sends URLs that the user has visited to a spe-
cial server siteinfo.a9.com. When the user does sign
in to A9’s web site, A9 toolbar additionally sends data to
client.a9.com, which we believe is the server that A9
uses to save URL history on behalf of the user.
We consider the above behavior undesirable because it
tracks user activity even when a user is not logged into the
service. Google Toolbar also has a similar feature, which
when turned on, sends URLs that the user has visited to
Google’s home server. However, unlike with the A9 Tool-
bar, NetSpy does not detect extra network activity gener-
ated by Google Toolbar when this feature is turned oﬀ. This
experiment leads us to conclude that it is sometimes diﬃ-
cult to classify a program as spyware. Activity that may be
classiﬁed as spying behavior by some users may in fact be
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006considered desirable features by others, as for example with
A9 Toolbar, provided that A9 does not reveal/sell the URL
history of each user to third parties.
6.3. Performance
We evaluated the performance of NetSpy to determine
the time taken to (i) capture network traﬃc from a spyware-
infected system,
(ii) perform diﬀerential analysis, and
(iii) generate NIDS signatures. All timing measurements
were averaged over 10 runs.
Because NetSpy simulates user activity by running Inter-
net Explorer with several URLs, it must wait for the web-
page to load completely for each URL. Thus, the time to
visit each URL depends on the contents of the web-page
visited. For example, visiting www.google.com only gen-
erates two HTTP requests, and is quick (fewer than 2 sec-
onds, on average), while visiting www.apple.com requires
longer (10 seconds on average) because the Apple website
contains more contents, including images and movies.
6.4. Desirable enhancements to the NetSpy prototype
Based upon our experiments, we have identiﬁed several
desirable enhancements to NetSpy, that we plan to address
in future work.
• NetSpy is currently designed to analyze one program at
a time. That is, it must be invoked each time a new pro-
gram is installed. It may not be as eﬀective when a ma-
chine is infected with multiple spyware programs. The
key diﬃculty here is that network traﬃc may be gener-
ated by any one of the multiple spyware programs in-
stalled. To enhance NetSpy, we need to associate net-
work packets captured with the program that generated
them.
• NetSpy has been implemented to detect spyware pro-
grams (speciﬁcally plug-ins and toolbars) that infect In-
ternet Explorer. It currently cannot detect spyware pro-
grams that run as standalone processes (e.g., keyloggers).
• NetSpy currently observes only HTTP-based network
traﬃc. Spyware programs that use other protocols (such
as SMTP and FTP) may evade detection. We plan to ex-
tend NetSpy to monitor such traﬃc as well.
7. Evading NetSpy
There are several fundamental limitations of the ap-
proach adopted by NetSpy that a malicious attacker can use
to evade detection.
1. A key factor that determines the eﬀectiveness of NetSpy
is the coverage of the input set used to collect network
traﬃc. Spyware that generates network traﬃc only under
certain inputs, not covered by NetSpy’s set of inputs, will
be undetected.
There are two ways to overcome this shortcoming. The
ﬁrst is to use a crawler to automatically generate input
Host-
based
Network-
based
Pattern-based
Most commercial
solutions (e.g., [1, 7])
Behavior-based
Kirda et al. [17]
Bleeding Edge Snort [2]
Web Tap [10], Siren [11]
NetSpy/spyware
NetSpy/spyware
detection (Section 4)
characterization (Section 3)
Figure 7. Related work in spyware detection.
URLs for use by NetSpy. The second is to analyze the
(binary executable of the) untrusted program to recover
speciﬁc URLs that trigger special behavior in the exe-
cutable. However, we note that binary executable anal-
ysis is challenging and this solution may not always be
feasible.
2. Time-triggered spyware programs can periodically con-
tact their home server to report user activity. NetSpy, if
only invoked during program installation, will miss the
network activity generated by this program, thus misclas-
sifying the program as benign.
One way around is to make NetSpy an “always-on” tool
that constantly monitors network activity to identify spy-
ware behavior. NetSpy can also beneﬁt from recent work
on the analysis of time-triggered malware [13].
3. NetSpy currently classiﬁes an untrusted program as spy-
ware using the heuristic presented in Table 5. Spyware
can evade detection by bypassing this heuristic. For in-
stance, an attacker can use spyware to send data to one of
the servers observed in the reference network statistics to
evade detection. To retrieve stolen data, the attacker can
intercept the network traﬃc on the link between the vic-
tim’s network and the destination server.
We believe that this attack is less feasible because it re-
quires physical access to the link between the victim’s
network and the destination.
8. Related Work
Spyware-detection techniques fall into two main cate-
gories: host-based and network-based. Each of these can
be further sub-categorized into pattern-based and behavior-
based matching techniques, as shown in Figure 7.
Host-based techniques analyze untrusted binary executa-
bles to determine if they are potentially spyware. They work
much like commercial virus scanners and search binary ex-
ecutables for known patterns of spyware. Commercial anti-
spyware solutions, such as AdAware [1] and Spybot Search
& Destroy [7] use simple techniques, such as comparing the
MD5-hash of untrusted binary executables against known
values to detect spyware. These techniques while fast and
accurate—they have near-zero false positives—can only de-
tect known spyware instances and are not resilient even in
the face of simple obfuscations.
Recent work by Kirda et al. [17] addresses this short-
coming by proposing a behavior-based approach. Their
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006work uses static analysis to analyze untrusted binary exe-
cutables to detect spying behavior, e.g., by searching for the
appearance of certain system calls or Internet Explorer API
calls. This approach has the advantage of being able to de-
tect previously-unseen variants of spyware that exhibit the
same spyware behavior. However, it cannot detect novel
spyware programs that diﬀer in behavior from existing spy-
ware programs.
BENDER [14] is a host-based malware detection tool de-
signed to identify a class of malware (e.g., worms) that gen-
erate network traﬃc that is not dependent on user activity.
Web Tap [10] is another tool that ﬁnds anomalous network
traﬃc generated by certain spyware programs that operate
without user input. It learns the characteristics of network
traﬃc in a controlled training period and uses this informa-
tion to ﬁnd anomalous network traﬃc. One shortcoming of
Web Tap is that it cannot detect spyware that “blends” with
normal user activity, such as web surﬁng [11]. NetSpy is de-
signed to detect spyware that generates network traﬃc that
is dependent on user activity. We believe that NetSpy can
complement BENDER and Web Tap in ﬁnding previously-
unseen malware.
Siren [11] uses a behavior-based approach to detect spy-
ware at the network-level. The key idea here, much like
in NetSpy, is that network traﬃc generated by a spyware-
infected system diﬀers from that of a clean system. Siren
uses a network-level detector to detect anomalous network
traﬃc generated by a spyware-infected system. The key dif-
ference between NetSpy and Siren is NetSpy’s ability to
generate network-level signatures.
In contrast, Siren fo-
cuses solely on detection, i.e., determining if a system is
spyware-infected.
Automatic signature generation for other malware, such
as worms and viruses, is an active research area [16, 18,
20, 21]. Among these, HoneyComb [18] and PAYL [21]
use techniques similar to those used by NetSpy to gener-
ate NIDS signatures. HoneyComb uses the Longest Com-
mon Substring (LCS) algorithm to identify common pat-
terns (substrings) within network packets captured by hon-
eypots and generates NIDS signatures using the identiﬁed
patterns [18]. Note that NetSpy uses Longest Common Sub-
sequence (LCSeq) algorithm to create a regular expression
suitable for an NIDS. PAYL generates worm signatures by
observing both ingress and egress network traﬃc. In con-
trast, NetSpy only monitors outbound network traﬃc.
9. Conclusion
We presented NetSpy, an automatic spyware signature
generator. NetSpy identiﬁes if an untrusted program is spy-
ware; if so, it generates network-level signatures that can be
used with a NIDS that monitors outgoing network traﬃc.
Experimental results show that NetSpy is eﬀective and that
it generates succinct, precise spyware signatures for NIDS.
References
[1] Ad-Aware. http://www.lavasoft.de.
[2] Bleeding Edge of Snort. http://www.bleedingsnort.com/.
[3] Bro Intrusion Detection System. http://bro-ids.org.
[4] IWebBrowser2
Interface.
http://msdn.microsoft.com/
workshop/browser/webbrowser/reference/ifaces/iwebbrowser2/
iwebbrowser2.asp.
[5] LibNIDS 1.17 Win32 Port. http://www.checksum.org/.
[6] Snort. http://www.snort.org.
[7] Spybot Search & Destroy. http://www.safer-networking.org/.
[8] WinPcap. http://www.winpcap.org/.
[9] AOL/NCSA online safety study.
http://www.staysafeonline.
info/pdf/safety study v04.pdf, October 2004.
[10] K. Borders and A. Prakash. Web Tap: Detecting covert web
traﬃc. In 11th ACM Conference on Computer and Commu-
nications Security, October 2004.
[11] K. Borders, X. Zhao, and A. Prakash. Siren: Detecting eva-
sive malware (short paper). In IEEE Symposium on Security
and Privacy, May 2006.
[12] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.
Introduction to Algorithms. MIT Press, 2001.
[13] J. R. Crandall, G. Wasserman, D. Oliveira, Z. Su, S. F. Wu,
and F. T. Chong. Temporal search: Detecting hidden mal-
ware timebombs with virtual machines. In Intl. Conf. on Ar-
chitectural Support for Programming Languages and Oper-
ating Systems, October 2006.
[14] W. Cui, R. H. Katz, and W. tian Tan. Design and implemen-
tation of an extrusion-based break-in detector for personal
computers. In ACSAC, 2005.
[15] Internet Security Systems. ISS x-force database: spyware-
http://xforce.iss.net/
7search-browser-accelerator(14221).
xforce/xfdb/14221.
[16] H.-A. Kim and B. Karp. Autograph: Toward automated, dis-
tributed worm signature detection. In 13th USENIX Security
Symposium, August 2004.
[17] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A. Kem-
merer. Behavior-based spyware detection. In 15th USENIX
Security Symposium, August 2006.
[18] C. Kreibich and J. Crowcroft. Honeycomb - Creating Intru-
sion Detection Signatures Using Honeypots. In Hotnets II,
November 2003.
[19] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M. Levy. A
crawler-based study of spyware on the web. In Networked
and Distributed System Security Symposium, February 2006.
[20] J. Newsome, B. Karp, and D. X. Song. Polygraph: Auto-
matically generating signatures for polymorphic worms. In
IEEE Symposium on Security and Privacy, May 2005.
[21] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-
In RAID,
based worm detection and signature generation.
September 2005.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006