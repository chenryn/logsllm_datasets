## PostgreSQL primary-standby failback tools : pg_rewind  
### 作者                                      
digoal                                      
### 日期                                      
2015-03-25                                     
### 标签                                      
PostgreSQL , 时间线分歧 , pg_rewind , 修复分歧 , 脑裂修复         
----                                      
## 背景         
将要加入PostgreSQL 9.5了  
http://hlinnaka.iki.fi/2015/03/23/pg_rewind-in-postgresql-9-5/  
https://github.com/vmware/pg_rewind  
在数据库变得比较大时, 例如上TB, 如果部署了PostgreSQL primary-standby 流复制或者log shipping HA.  
当发生了failover, old primary节点可能因为某些原因需要重新同步数据.   
在广域网上, 由于网络异常也可能造成standby节点落后主节点, 导致需要重新同步数据.  
小数据库重新同步数据很方便, 全量或者使用rsync增量同步都可以.   
但是数据库很大的情况下, rsync也会变得非常慢, 而且大量消耗主机IO资源.   
PostgreSQL 社区有提议在核心中加入通过wal文件解析, 达到增量同步到目的. 目前还在开发阶段.  
http://www.postgresql.org/message-id/flat/CAF8Q-Gy7xa60HwXc0MKajjkWFEbFDWTG=gGyu1KmT+PI:EMAIL#CAF8Q-Gy7xa60HwXc0MKajjkWFEbFDWTG=gGyu1KmT+PI:EMAIL  
http://www.postgresql.org/message-id/flat/CAF8Q-Gxg3PQTf71NVECe-6OzRaew5pWhk7yQtbJgWrFu513s+PI:EMAIL#CAF8Q-Gxg3PQTf71NVECe-6OzRaew5pWhk7yQtbJgWrFu513s+PI:EMAIL  
目前已经有一个工具名为pg_rewind, 也是一个增量同步工具, 具体的做法是通过解析wal, 同步变更过的数据块. 仅仅支持9.3及以上版本. 因为需要data page checksum的支持.  
原理如下 :   
```  
Theory of operation  
-------------------  
The basic idea is to copy everything from the new cluster to old, except   
for the blocks that we know to be the same.  
1. Scan the WAL log of the old cluster, starting from the point where  
the new cluster's timeline history forked off from the old cluster. For   
each WAL record, make a note of the data blocks that are touched. This   
yields a list of all the data blocks that were changed in the old   
cluster, after the new cluster forked off.  
2. Copy all those changed blocks from the new master to the old master.  
3. Copy all other files like clog, conf files etc. from the new cluster  
to old. Everything except the relation files.  
4. Apply the WAL from the new master, starting from the checkpoint  
created at failover. (pg_rewind doesn't actually apply the WAL, it just   
creates a backup label file indicating that when PostgreSQL is started,   
it will start replay from that checkpoint and apply all the required WAL)  
```  
详细介绍参考此文 :   
http://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL  
https://github.com/vmware/pg_rewind  
下面测试一下pg_rewind的强大功能. 测试中包含了standby节点promote后, 主节点和备节点都发生了变更的情况, 当然发生变更产生的wal必须存在. 如果old primary发生的变更已经在归档目录, 需要先手工将这些变更拷贝到pg_xlog目录. 备节点发生的变更无所谓, 因为可以通过recovery.conf来解决.  
下载postgresql 9.3 :   
http://git.postgresql.org/gitweb/?p=postgresql.git;a=shortlog;h=refs/heads/REL9_3_STABLE  
wget http://git.postgresql.org/gitweb/?p=postgresql.git;a=snapshot;h=b5a20ab3e0310103ff11337faeed3c521f5eb917;sf=tgz  
安装PostgreSQL 9.3  
```  
tar -zxvf postgresql-b5a20ab.tar.gz  
cd postgresql-b5a20ab  
./configure --prefix=/opt/pgsql9.3beta2 --with-pgport=1999 --with-perl --with-tcl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=16 && gmake && gmake install  
cd contrib/  
gmake && gmake install  
```  
下载pg_rewind :   
https://github.com/vmware/pg_rewind/archive/master.zip  
安装pg_rewind  
```  
unzip pg_rewind-master.zip  
mv pg_rewind-master postgresql-b5a20ab/contrib/  
cd postgresql-b5a20ab/contrib/pg_rewind-master  
[root@db-172-16-3-33 pg_rewind-master]# export PATH=/opt/pgsql9.3beta2/bin:$PATH  
[root@db-172-16-3-33 pg_rewind-master]# which pg_config  
/opt/pgsql9.3beta2/bin/pg_config  
[root@db-172-16-3-33 pg_rewind-master]# gmake clean  
[root@db-172-16-3-33 pg_rewind-master]# gmake  
[root@db-172-16-3-33 pg_rewind-master]# gmake install  
[root@db-172-16-3-33 pg_rewind-master]# which pg_rewind  
/opt/pgsql9.3beta2/bin/pg_rewind  
[root@db-172-16-3-33 pg_rewind-master]# pg_rewind --help  
pg_rewind resynchronizes a cluster with another copy of the cluster.  
Usage:  
  pg_rewind [OPTION]...  
Options:  
  -D, --target-pgdata=DIRECTORY  
                 existing data directory to modify  
  --source-pgdata=DIRECTORY  
                 source data directory to sync with  
  --source-server=CONNSTR  
                 source server to sync with  
  -v             write a lot of progress messages  
  -n, --dry-run  stop before modifying anything  
  -V, --version  output version information, then exit  
  -?, --help     show this help, then exit  
Report bugs to .  
```  
初始化数据库, 使用data page checksums  
```  
pg93@db-172-16-3-33-> initdb -D $PGDATA -E UTF8 --locale=C -W -U postgres -k  
```  
配置主节点  
```  
vi pg_hba.conf  
host replication postgres 172.16.3.0/24 md5  
host all all 0.0.0.0/0 md5  
vi postgresql.conf  
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;  
port = 1999                             # (change requires restart)  
max_connections = 100                   # (change requires restart)  
superuser_reserved_connections = 3      # (change requires restart)  
unix_socket_directories = '.'   # comma-separated list of directories  
unix_socket_permissions = 0700          # begin with 0 to use octal notation  
shared_buffers = 1024MB                 # min 128kB  
maintenance_work_mem = 512MB            # min 1MB  
shared_preload_libraries = 'pg_stat_statements'         # (change requires restart)  
vacuum_cost_delay = 10                  # 0-100 milliseconds  
vacuum_cost_limit = 10000               # 1-10000 credits  
bgwriter_delay = 10ms                   # 10-10000ms between rounds  
wal_level = hot_standby                 # minimal, archive, or hot_standby  
synchronous_commit = off                # synchronization level;  
wal_sync_method = fdatasync             # the default is the first option  
wal_buffers = 16384kB                   # min 32kB, -1 sets based on shared_buffers  
wal_writer_delay = 10ms         # 1-10000 milliseconds  
checkpoint_segments = 32                # in logfile segments, min 1, 16MB each  
archive_mode = on               # allows archiving to be done  
archive_command = 'test ! -f /pgdata/digoal/1921/data03/pg93/pg_arch/%f && cp %p /pgdata/digoal/1921/data03/pg93/pg_arch/%f'# command to use to archive a logfile segment  
max_wal_senders = 32            # max number of walsender processes  
wal_keep_segments = 128         # in logfile segments, 16MB each; 0 disables  
hot_standby = on                        # "on" allows queries during recovery  
max_standby_archive_delay = 300s        # max delay before canceling queries  
max_standby_streaming_delay = 300s      # max delay before canceling queries  
wal_receiver_status_interval = 1s       # send replies at least this often  
hot_standby_feedback = on               # send info from standby to prevent  
random_page_cost = 1.5                  # same scale as above  
effective_cache_size = 128000MB  
log_destination = 'csvlog'              # Valid values are combinations of  
logging_collector = on          # Enable capturing of stderr and csvlog  
log_directory = 'pg_log'                # directory where log files are written,  
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,  
log_file_mode = 0600                    # creation mode for log files,  
log_truncate_on_rotation = on           # If on, an existing log file with the  
log_rotation_age = 1d                   # Automatic rotation of logfiles will  
log_rotation_size = 10MB                # Automatic rotation of logfiles will  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose           # terse, default, or verbose messages  
log_lock_waits = on                     # log lock waits >= deadlock_timeout  
log_statement = 'ddl'                   # none, ddl, mod, all  
log_timezone = 'PRC'  
autovacuum = on                 # Enable autovacuum subprocess?  'on'  
log_autovacuum_min_duration = 0 # -1 disables, 0 logs all actions and  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'C'                       # locale for system error message  
lc_monetary = 'C'                       # locale for monetary formatting  
lc_numeric = 'C'                        # locale for number formatting  
lc_time = 'C'                           # locale for time formatting  
default_text_search_config = 'pg_catalog.english'  
pg_stat_statements.max = 1000  
pg_stat_statements.track = all  
pg93@db-172-16-3-33-> cp $PGHOME/share/recovery.conf.sample $PGDATA/  
pg93@db-172-16-3-33-> mv $PGDATA/recovery.conf.sample $PGDATA/recovery.done  
vi recovery.done  
recovery_target_timeline = 'latest'  
standby_mode = on  
primary_conninfo = 'host=172.16.3.39 port=1999 user=postgres keepalives_idle=60'  
```  
启动主节点数据库  
```  
pg93@db-172-16-3-33-> pg_ctl start  
server starting  
pg93@db-172-16-3-33-> LOG:  00000: loaded library "pg_stat_statements"  
LOCATION:  load_libraries, miscinit.c:1296  
```  
创建standby(172.16.3.39)  
安装postgresql  
略, 同主节点  
安装pg_rewind  
略, 同主节点  
创建$PGDATA目录  
```  
mkdir -p $PGDATA  
chown pg93:pg93 $PGDATA  
chmod 700 $PGDATA  
su - pg93  
```  
复制主节点数据库  
```  
root@db-172-16-3-39-> su - pg93  
pg93@db-172-16-3-39-> vi ~/.pgpass  
172.16.3.33:1999:*:postgres:postgres  
pg93@db-172-16-3-39-> chmod 400 ~/.pgpass   
pg93@db-172-16-3-39-> pg_basebackup -D $PGDATA -F p -x -P -v -h 172.16.3.33 -p 1999 -U postgres  
WARNING:  skipping special file "./.s.PGSQL.1999"  
transaction log start point: 0/2000028 on timeline 1  
WARNING:  skipping special file "./.s.PGSQL.1999"g_root/pg_subtrans/0000)  
36575/36575 kB (100%), 1/1 tablespace                                           
transaction log end point: 0/20000F0  
pg_basebackup: base backup completed  
pg93@db-172-16-3-39-> cd $PGDATA  
pg93@db-172-16-3-39-> mv recovery.done recovery.conf  
pg93@db-172-16-3-39-> vi recovery.conf  
recovery_target_timeline = 'latest'  
standby_mode = on  
primary_conninfo = 'host=172.16.3.33 port=1999 user=postgres keepalives_idle=60'                # e.g. 'host=localhost port=5432'  
```  
启动standby数据库  
```  
pg93@db-172-16-3-39-> pg_ctl start  
server starting  
pg93@db-172-16-3-39-> LOG:  00000: loaded library "pg_stat_statements"  
LOCATION:  load_libraries, miscinit.c:1296  
```  
主节点控制文件信息 :   
```  
pg93@db-172-16-3-33-> pg_controldata   
pg_control version number:            937  
Catalog version number:               201306121  
Database system identifier:           5908450106616519131  
Database cluster state:               in production  
pg_control last modified:             Mon 05 Aug 2013 10:31:56 AM CST  
Latest checkpoint location:           0/30007E8  
Prior checkpoint location:            0/3000710  
Latest checkpoint's REDO location:    0/30007A8  
Latest checkpoint's REDO WAL file:    000000010000000000000003  
Latest checkpoint's TimeLineID:       1  
Latest checkpoint's PrevTimeLineID:   1  
Latest checkpoint's full_page_writes: on  
Latest checkpoint's NextXID:          0/1685  
Latest checkpoint's NextOID:          24576  
Latest checkpoint's NextMultiXactId:  1  
Latest checkpoint's NextMultiOffset:  0  
Latest checkpoint's oldestXID:        1674  
Latest checkpoint's oldestXID's DB:   1  
Latest checkpoint's oldestActiveXID:  1684  
Latest checkpoint's oldestMultiXid:   1  
Latest checkpoint's oldestMulti's DB: 1  
Time of latest checkpoint:            Mon 05 Aug 2013 10:31:56 AM CST  
Fake LSN counter for unlogged rels:   0/1  
Minimum recovery ending location:     0/0  
Min recovery ending loc's timeline:   0  
Backup start location:                0/0  
Backup end location:                  0/0  
End-of-backup record required:        no  
Current wal_level setting:            hot_standby  