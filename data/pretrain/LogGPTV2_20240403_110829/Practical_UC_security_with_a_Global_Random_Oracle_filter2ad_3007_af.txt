22
• Session 1. Play as sender of PVW OT with input (s0,1, s1,1). Namely, compute (ud,0, vd,0)
= RAND(gd,0, hd,0, pk0), for d = 0, 1 and w0,1 = v0,1 · s0,1 w1,1 = v1,1 · s1,1.
Where RAND(g, h, g(cid:48), h(cid:48)) is the following functionality: pick s, t ∈ Zq, output u = gs · ht
and v = g(cid:48)s · h(cid:48)s.
3. Send (u0,0, w0,0), (u1,0, w1,0) for session 0. Send (u0,1, w0,1), (u1,1, w1,1) for session 1.
Decryption. R obtains sb,0 = wb,0
(ub,1)r1 and outputs sb = sb,0 + sb,1.
(ub,0)r0 and sb,1 = wb,1
Eﬃciency The above protocol has the following complexity. Round Complexity. The protocol
requires one message per party only. Exponentiations. In the initialization phase the receiver com-
putes 6 exponentiation for the parameter generation and 2t exponentiations for the non-interactive
WI proof proofcons. This is done only once and the same parameter can be re-used for more than
one transfer. For each transfer the receiver computes 6 exponentiations. The sender computes 2t
exponentiations to check the WI proof, and 8 exponentiations for each transfer. The total number
of exponentiation is 4t+20 exponentiations, where t is the statistical parameter. Hash evaluations.
The sender compute 2t + 1 hash evaluations for the WI proof proofcons, while the receiver evaluates
the hash t + 1 times.
Batch Committing OT The notion of Committing-OT has been introduced by Kiraz and
Schoenmakers in [KS06], and is a modiﬁcation of standard OT functionality where, at the end
of the protocol, the OT receiver additionally receives commitments to the inputs of the sender, and
the OT sender outputs the opening of such commitments.
More speciﬁcally, the sender runs OT with input (s0, r0), (s1, r1) and the receiver runs with
input b. At the end of the protocol the receiver additionally obtains commitments Com(s0; r0),
Com(s1, r1) and the sender outputs r0, r1.
The work [AMPR14] on which we build upon, requires a committing OT protocol which is a
property already satisﬁed by PVW OT. To see why, note that the message sent by the OT sender in
the second round can be seen as a commitment of the sender’s input. (E.g., the message to retrieve
b and w = g(cid:48)s · h(cid:48)t · sb and g(cid:48), h(cid:48) is the
string sb corresponds to the pair (ub, wb) where ub = gs
temporary key sent by the receiver). Our one-sided simulatable OT is also a committing OT. The
reason is that it can be seen as a modiﬁcation of the PVW OT where sender and receiver basically
repeats the PVW OT twice in parallel.
b · ht
Furthermore, as in [SS11] our protocol can be modiﬁed to allow batch OT, where the sender
plays with m strings for 0 and m strings for 1: [K0,1, . . . , K0,m] and [K1,1, . . . , K1,m] and the receiver
plays with one bit b only, and select one of the m-tuples. In order to send m strings, the sender
simply runs procedure RAND() 2m times reusing the same temporary keys sent by the receiver for
that transfer.
5.1 Proof of security
We show that Protocol 2 is one-sided UC-simulatable. Namely, we show that it is UC-simulatable
when the receiver is malicious, while it is only secure in the indistinguishability sense when the sender
is malicious. Before proceeding with the formal proof, we write the formal deﬁnition of one-sided
simulation adapted from [HL10] to the Oblivious Transfer functionality in the gRO model.
23
Deﬁnition 3. Let Ftot be the Oblivious Transfer functionality as shown in Fig. 3. We say that a
protocol π securely computes Ftot with one-sided simulation if the following holds:
1. For every non-uniform PPT adversary R∗ controlling the receiver in the real model, there
exists a non-uniform ppt adversary S for the ideal model, such that for any environment Z,
{IDEAL
GgROFt,S,Z (s0, s1, b, z)}z∈{0,1}∗ ≈ {REAL
GgRO
π,R∗,Z (s0, s1, b, z)}z∈{0,1}∗
2. For every non-uniform PPT adversary S∗ controlling the sender it holds that:
π,S∗(z)(s0, s1, 1)}z∈{0,1}∗}
{viewR
π,S∗(z)(s0, s1, 0)}z∈{0,1}∗ ≈ {viewR
where viewR
honest receiver R.
π,S∗(z) denotes the view of adversary S∗ after a real execution of protocol π with the
We are now ready to prove the following theorem.
Theorem 1. If NIWIpok is a witness-indistinguishable proof of knowledge in the gRO model and
under the assumption that DDH is hard in G, Protocol 2 securely computes Ftot with one-sided
simulation in the gRO model.
Proof. UC-security against a Malicious Receiver. We show a simulator SR that extracts the
input of the malicious receiver R∗ using the observability of the RO. Let sid the session id of the
challenge protocol that S must simulate. Let Q|sid be the list of queries made by R∗ to the random
oracle and of illegitimate queries performed by the environment Z in concurrent sessions of
arbitrary protocols accessing gRO.
SR extracts the witness α0,e by running the straight-line extractor associated to the NIWIpok
protocol on input Q|sid and the proof proofcons. If the extraction fails, SR aborts. Due to the proof
of knowledge property of NIWIpok, if proofcons is accepting, then SR will not abort with all but
negligible probability.
SR detects in which session R∗ sent the correct parameters by checking if h0,0 = (g0,0)α0,e∧
h1,0 = (g1,0)α0,e+1 or h0,1 = (g0,1)α0,e ∧h1,1 = (g1,1)α0,e+1. Let e be such session. To extract the
input played by R∗, SR looks at the temporary key pke.
If he = (ge)α0,e it sets the secret bit
b = 0, else if he = (ge)α0,e+1 it sets b = 1. SR plays b in the ideal OT functionality and obtains sb.
Finally it computes Round 2 of the OT protocol as the honest sender but on input the pair (sb, 0).
Indistinguishability follows from the indistinguishability of the PVW OT in session e and from the
fact that the inputs of the sender are secret shared between the two sessions. UC-security follows
from the fact that the simulator is straight-line and that the proofs of knowledge sent by R∗ are
non-malleable in the gRO model.
Indistinguishability against a Malicious Sender. We want to show that for any PPT malicious
sender S∗, the view of S∗ when R is playing with bit 0 is indistinguishable from the view of S∗
when R is playing with bit 1. Informally, this holds due to the hardness of the DDH problem and
the WI property of the NIWIpok shown in Prot. 3.2.
The proof goes by hybrids arguments. Recall that the OT protocol consists of two parallel
sessions of PVW OT (that we denote as session 0 and session 1) and one WI proof. A receiver
playing with bit b, runs both the sessions with input b.
24
We start with an execution where the receiver plays with input 0 in both sessions. Through a
sequence of hybrids (i.e., using the WI property of proofcons and to the DDH assumption) we move to
an execution where the receiver plays bits 0 and 1 and we argue that this hybrid is indistinguishable
from the case in which R plays with input 0, 0. Following the same arguments we end with the case
in which R played with input 1, 1, therefore proving the claim. More precisely, the hybrids are the
following.
Hybrid H0. In this hybrid R plays with input 0, namely it runs the two parallel OT sessions with
secret bit 0. This hybrid corresponds to a real execution where the receiver plays with bit 0:
{viewR
π,S∗(z)(s0, s1, 0)}z∈{0,1}∗
g1,¯e
1,e . (Therefore, the tuple {g0,¯e, h0,¯e, g1,¯e, h1,¯e
Hybrid H1. In this hybrid R picks a bit e and computes parameters par¯e as a DDH tuple.
Namely h1,¯e = gα0,¯e
is not a DDH tuple.) R compute
the WI proof with witness α0,e. The diﬀerence between H0 and H1 is in the fact that in H0 par¯e
is a not a DDH tuple while in H1 it is. Assume that there is a distinguisher D for the views
output by S∗ in hybrids H0 and H1. We can use S∗ and D to help a DDH distinguisher as follows.
The DDH distinguisher receives the challenge tuple (g, g1, g2, g3) from the DDH experiment.
It
sets par¯e =(g, g1, g2, g3), and computes any other message as in experiment H0. Then it runs the
distinguisher D on the view of S∗ and outputs whatever D outputs. If (g, g1, g2, g3) was a DDH
tuple, then the messages computed by the DDH distinguisher are distributed identically to H1,
otherwise they are distributed identically to H0. From the hardness of the DDH problem, H0 and
H1 are computationally indistinguishable.
Hybrid H2. In this hybrid we change the bit played in session ¯e, from 0 to 1. Because par¯e is a
DDH tuple, then the temporary key pk¯e computed in this hybrid is distributed identically to the
pk¯e computed in H1. Therefore, the two hybrids are identical.
Hybrid H3. In this hybrid we change again the parameters par¯e so that they are not a DDH tuple.
Again, the only diﬀerence between H2 and H3 is the fact that in H2, parameters par¯e is a DDH
tuple and in hybrid H3 is not. H2 and H3 are indistinguishable due to the hardness of the DDH
problem.
Hybrid H4 In this hybrid R changes the witness used to compute proofcons. Namely, the proof is
computed using as witness α0,¯e. Assume that there is a distinguisher D for the view of S∗ in these
two hybrids, then we can use S∗ and D to distinguish the witness used in proofcons and break its
witness indistinguishability property.
Hybrid H5.
arguments for the indistinguishability of H0, H1 that H5 and H4 are indistinguishable.
Hybrid H6. In this hybrid R uses the bit 1 also in session e. Therefore, in this hybrid R is playing
with bit 1. It follows from the same arguments for the indistinguishability of H1, H2 that H5 and
H6 are indistinguishable. The view of the S∗ in this hybrids corresponds to:
In this hybrid R set parameter pare as a DDH tuple.
It follows from the same
and the claim is proved.
{viewR
π,S∗(z)(s0, s1, 1)}z∈{0,1}∗
25
6 UC-secure NISC
Given any two-round UC-OT, a non-interactive UC-2PC (UC-NISC, for short) for any function
f (x, y) can be easily constructed in the CRS model as follows. P1 sends the ﬁrst message of the OT
based on its input x, P2 prepares a garbled circuit for f and sends the garbled keys for P1 using
the second message of OT. Additionally P2 sends the garbled keys for its own input y and a NIZK
proof proving that the garbled circuit is correct, the garbled keys sent in the OT are consistent with
the garbled circuit and with P2’s input. This solution is very ineﬃcient as the NIZK proof requires
the use of the circuit of the underlying primitives and thus expensive NP reductions.
In [AMPR14] Afshar et al. show how to implement UC-secure NISC protocol very eﬃciently
in the CRS model. They start with the multi-round highly-eﬃcient 2PC protocol presented by
Lindell [Lin13] and use several tricks to squash it down to two rounds. The round-complexity of
Lindell’s construction stems from the cut-and-choose phase. The main contribution of [AMPR14]
is to show how to perform all the checks required by the cut-an-choose technique non-interactively.
We built upon their protocol to achieve the same result in the gRO model. In the following, we ﬁrst
outline the NISC protocol of [AMPR14] and then we discuss how we modify their construction to
achieve our result.
NISC in the CRS model [AMPR14] To implement the cut-and-choose in only two rounds [AMPR14]
uses several techniques. We provide an overview of the technique used in [AMPR14] in Appendix B.
Here we discuss only two salient points of their protocol that allow us to achieve the same result in
the gRO model.
Recall that in a typical cut-and-choose protocol, P2 sends t garbled circuits gc1, . . . , gct to P1,
who tests the correctness of them by asking P2 to “open” half of the circuits (i.e., to reveal the
randomness used to generate them). If all the checks go through, P1 is convinced that most of the
remaining circuits are correct. The ﬁrst idea to achieve non-interactiveness, is to let P1 select the
circuits that she wants to check, via the selection bits of several OTs. Namely, additionally to the
OT for the input, called input-OT in [AMPR14], P1 runs one OT for each garbled circuit. Such
OTs are called circuit-OT: P1 participates to the i-th circuit-OT with input bi = 0 if she wants to
check (i.e., obtain the randomness for) circuit gci, otherwise if she wants to evaluate gci, she sends
bi = 1.
The second idea is to let P2 compute the garbled circuit, the messages for input-OT protocols,
and other relevant information related to input/output consistency proofs, using randomness gen-
erated by a PRF. Namely, all such messages are computed by invoking a PRF with key seedi. In
the circuit-OT protocol P2 will place the string seedi for the case bi = 0 and thus gci is a circuit
that will be checked, and will instead send the keys corresponding to her input, in case bi = 1 and
thus gci is an evaluation circuit.
Security of NISC [AMPR14] in the CRS model. The UC-security of NISC [AMPR14]
relies crucially on the fully simulatability of the underlying PVW OT protocol.
Informally, the
intuition behind the proof is the following. Simulating Malicious P ∗
1 . The simulator extracts the
secret input x∗ of P ∗
1 from the input-OT, by running the UC-simulator granted by PVW OT in the
CRS model. It sends x∗ to the ideal functionality and receives the output z = f (x∗, y). Next, from
the circuit-OTs it extracts the indexes of the circuits that will be checked, and hence it computes
the evaluation and checking garbled circuits accordingly.
Simulating Malicious P ∗
2 . The simulator generates the ﬁrst message of P1 for circuit-OTs
26
and input-OTs, by running honest P1 with a random input. Due to the security of PVW OT in
the CRS model, these messages are distributed identically for the real input and the random one.
When the simulator receives P2’s message it performs the same correctness checks as P1.
If P2
cheats in one of the checked garbled circuits, the simulator will abort, and this happens with the
same probability that P1 would abort in the real execution. If the emulated P1 does not abort, the
cut-and-choose guarantees that whp, at least one evaluated garbled circuit is correct. Therefore,