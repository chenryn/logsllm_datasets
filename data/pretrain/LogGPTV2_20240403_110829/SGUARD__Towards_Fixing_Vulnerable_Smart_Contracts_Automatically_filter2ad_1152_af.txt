on average SGUARD introduces 5.42 times less bound checks
than the simplistic approach. Since each bound check costs
gas and time when executing a transaction, we consider such
a reduction to be welcomed.
RQ4: How long does SGUARD take to ﬁx a smart contract?
This question asks about the efﬁciency of SGUARD itself.
We measure the execution time of SGUARD by recording
time spending to ﬁx each smart contract. Naturally, a more
complicated contract (e.g., with more symbolic traces) takes
more time to ﬁx. Thus, we show how execution time varies
for different contracts. Figure 12 summarizes our results,
where each bar represents 10% of smart contracts and y-axis
shows the execution time in seconds. The contracts are sorted
according to the execution time. From the ﬁgure, we observe
Name
USDT
LINK
BNB
HT
BAT
CRO
LEND
KNC
ZRX
DAI
No.
#1
#2
#3
#4
#5
#6
#7
#8
#9
#10
TABLE IV: Fixing results on the high proﬁle contracts
Symbolic traces
265
291
128
0
128
401
281
443
0
0
#AR




(cid:88)





#RE










#TX










that 90% of contracts are ﬁxed within 36 seconds. Among
the different steps of SGUARD, SGUARD spends most of the
time to identify dependency (70.57%) and ﬁnd vulnerabilities
(20.08%). On average, SGUARD takes 15 seconds to analyze
and ﬁx a contract.
Manual inspection of results To check the quality of the ﬁx,
we run an additional experiment on the top 10 ERC20 tokens
in the market. That is, we apply SGUARD to analyze and ﬁx
the contracts and then manually inspect the results to check
whether the ﬁxed contracts contain any of the vulnerabilities,
i.e., whether SGUARD fails to prevent certain vulnerability
or whether SGUARD introduce unnecessary runtime checks
(which translates to considerable overhead given the huge
number of transactions on these contracts). The results are re-
ported in Table IV where column RE (respectively AE and TX)
shows whether any reentrancy (respectively arithmetic, and
tx.origin) vulnerability is discovered and ﬁxed respectively;
and the symbol (cid:88) and  denote yes and no respectively. The
last column shows the number of symoblic traces explored.
We observe that the number of symbolic traces explored
for three tokens HT, ZRX and DAI are 0. It is because these
contracts contain no external calls and thus SGUARD stops im-
mediately after scanning the bytecode. Among the remaining
7 tokens, six of them (i.e., LINK, BNB, CRO, LEND, KNC,
and USDT) are found to be safe and thus no modiﬁcation
is made. One arithmetic vulnerability in the smart contracts
BAT is reported and ﬁxed by SGUARD. We conﬁrm that a
runtime check is added to prevent the discovered vulnerability.
A close investigation however reveals that this vulnerability is
unexploitable although it conﬁrms to our deﬁnition. This is
because the contract already has runtime checks. We further
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1227
02004006008001000120014001600050100150200250300secondsexecution time90% cutoffmeasure the overhead of the ﬁx by executing 10 transactions
obtained from the Ethereum network on the smart contract.
The result shows that SGUARD introduces a gas overhead of
18%. Lastly, our manual investigation conﬁrms that all of the
contracts are free of the vulnerabilities.
VI. RELATED WORK
To the best of our knowledge, SGUARD is the ﬁrst tool that
aims to repair smart contracts in a provably correct way.
SGUARD is closely related to the many works on automated
program repair, which we highlight a few most relevant ones
in the following. GenProg [1] applies evolutionary algorithm
to search for program repairs. A candidate repair patch is
considered successful if the repaired program passes all test
cases in the test suite. In [2], Dongsun et al. presented PAR,
which improves GenProg by learning ﬁx patterns from existing
human-written patches to avoid nonsense patches. In [23],
Abadi et al. automatically rewrites binary code to enforce
control ﬂow integrity (CFI). In [24], Jeff et al. presented
ClearView, which learns invariants from normal behavior of
the application, generates patches and observes the execution
of patched applications to choose the best patch. While there
are many other program repair works, none of them focus on
ﬁxing smart contracts in a provably correct way.
SGUARD is closely related to the many work on applying
static analysis techniques on smart contracts. Securify [4]
and Ethainter [5] are approaches which leverage a rewriting
system (i.e., Datalog) to identify vulnerabilities through pattern
matching. In terms of symoblic execution, in [25], Luu et al.
presented the ﬁrst engine to ﬁnd potential security bugs in
smart contracts. In [26], Krupp and Rossow presented teEther
which ﬁnds vulnerabilities in smart contracts by focusing on
ﬁnancial transactions. In [27], Nikolic et al. presented MAI-
AN, which focus on identifying trace-based vulnerabilities
through a form of symoblic execution. In [28], Torres et al.
presented Osiris which focuses on discovering integer bugs.
Unlike these engines, SGUARD not only detects vulnerabilities,
but also ﬁxes them automatically.
SGUARD is related to some work on verifying and analyzing
smart contracts. Zeus [29] is a framework which veriﬁes the
correctness and fairness of smart contracts based on LLVM.
Bhargavan et al. proposed a framework to verify smart con-
tracts by transforming the source code and the bytecode to an
intermediate language called F* [30]. In [31], the author used
Isabelle/HOL to verify the Deed contract. In [32], the authors
showed that only 40% of smart contracts are trustworthy based
on their call graph analysis. In [33], Chen et al. showed that
most of the contracts suffer from some gas-cost programming
patterns.
Finally, SGUARD is remotely related to approaches on
testing smart contracts. ContractFuzzer [34] is a fuzzing engine
which checks 7 different types of vulnerabilities. sFuzz [15]
is another fuzzer which extends ContractFuzzer by using
feedback from test cases execution to generate new test cases.
VII. CONCLUSION
In this work, we propose an approach to ﬁx smart contracts
so that they are free of 4 kinds of common vulnerabilities.
Our approach uses run-time information and is proved to be
sound. The experiment results show the usefulness of our
approach, i.e., SGUARD is capable of ﬁxing contracts correctly
while introducing only minor overhead. In the future, we
intend to improve the performance of SGUARD further with
optimization techniques.
REFERENCES
[1] W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest, “Automatically
ﬁnding patches using genetic programming,” in Proceedings of the 31st
International Conference on Software Engineering, ser. ICSE ’09, 2009,
pp. 364–374.
[2] D. Kim, J. Nam, J. Song, and S. Kim, “Automatic patch generation
learned from human-written patches,” in 2013 35th International Con-
ference on Software Engineering (ICSE).
IEEE, 2013, pp. 802–811.
[3] A. Marginean, J. Bader, S. Chandra, M. Harman, Y. Jia, K. Mao,
A. Mols, and A. Scott, “Sapﬁx: Automated end-to-end repair at scale,”
in 2019 IEEE/ACM 41st International Conference on Software Engi-
neering: Software Engineering in Practice (ICSE-SEIP).
IEEE, 2019,
pp. 269–278.
[4] P. Tsankov, A. Dan, D. Drachsler-Cohen, A. Gervais, F. Buenzli, and
M. Vechev, “Securify: Practical security analysis of smart contracts,” in
Proceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security, 2018, pp. 67–82.
[5] L. Brent, N. Grech, S. Lagouvardos, B. Scholz, and Y. Smaragdakis,
“Ethainter: a smart contract security analyzer for composite vulnerabil-
ities.” in PLDI, 2020, pp. 454–469.
[6] G. Wood et al., “Ethereum: A secure decentralised generalised trans-
action ledger,” Ethereum project yellow paper, vol. 151, no. 2014, pp.
1–32, 2014.
[7] RSK. [Online]. Available: https://www.rsk.co/
[8] Hyperledger. [Online]. Available: https://www.hyperledger.org/
[9] A
Multi-Sig
the
brary
a-postmortem-on-the-parity-multi-sig-library-self-destruct/
on
Parity
[Online]. Available:
Li-
https://www.parity.io/
Postmortem
Self-Destruct.
[10] Thinking About Smart Contract Security. [Online]. Available: https:
//blog.ethereum.org/2016/06/19/thinking-smart-contract-security/
[11] OpenZeppelin. [Online]. Available: https://github.com/OpenZeppelin/
openzeppelin-contracts
[12] J. Jiao, S. Kan, S. Lin, D. Sanan, Y. Liu, and J. Sun, “Semantic
understanding of smart contracts: Executable operational semantics of
solidity,” in 2020 IEEE Symposium on Security and Privacy (SP).
Los Alamitos, CA, USA: IEEE Computer Society, may 2020, pp.
1695–1712. [Online]. Available: https://doi.ieeecomputersociety.org/10.
1109/SP40000.2020.00066
[13] M. Rodler, W. Li, G. Karame, and L. Davi, “Sereum: Protecting existing
smart contracts against re-entrancy attacks,” in Proceedings of
the
Network and Distributed System Security Symposium (NDSS’19), 2019.
https://consensys.github.io/
[14] Known Attacks.
[Online]. Available:
smart-contract-best-practices/known attacks/
[15] T. D. Nguyen, L. H. Pham, J. Sun, Y. Lin, and Q. T. Minh, “sfuzz: An
efﬁcient adaptive fuzzer for solidity smart contracts,” in Proceedings
of the 42nd International Conference on Software Engineering (ICSE),
2020, pp. 778–788.
[16] J. Chang, B. Gao, H. Xiao, J. Sun, Y. Cai, and Z. Yang, “scompile:
Critical path identiﬁcation and analysis for smart contracts,” in Inter-
national Conference on Formal Engineering Methods. Springer, 2019,
pp. 286–304.
[17] M. Mossberg, F. Manzano, E. Hennenfent, A. Groce, G. Grieco, J. Feist,
T. Brunson, and A. Dinaburg, “Manticore: A user-friendly symbolic
execution framework for binaries and smart contracts,” in 2019 34th
IEEE/ACM International Conference on Automated Software Engineer-
ing (ASE).
//pages.cs.wisc.edu/∼ﬁscher/cs701.f08/lectures/Lecture19.4up.pdf
IEEE, 2019, pp. 1186–1189.
[18] A worklist algorithm for dominators.
[Online]. Available: http:
[19] Etherscan. [Online]. Available: https://etherscan.io/
[20] Solc-Select. [Online]. Available: https://github.com/crytic/solc-select
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1228
[21] Ethereum transactions per day. [Online]. Available: https://etherscan.io/
[Online]. Available: https://github.com/ethereum/EIPs/blob/
chart/tx
[22] EIP-170.
master/EIPS/eip-170.md
[23] M. Abadi, M. Budiu,
´U. Erlingsson, and J. Ligatti, “Control-ﬂow
integrity principles, implementations, and applications,” ACM Transac-
tions on Information and System Security (TISSEC), vol. 13, no. 1, pp.
1–40, 2009.
[24] J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach,
M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan et al.,
“Automatically patching errors in deployed software,” in Proceedings
of the ACM SIGOPS 22nd symposium on Operating systems principles,
2009, pp. 87–102.
[25] L. Luu, D.-H. Chu, H. Olickel, P. Saxena, and A. Hobor, “Making smart
contracts smarter,” in Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 2016, pp. 254–269.
[26] J. Krupp and C. Rossow, “teether: Gnawing at ethereum to automati-
cally exploit smart contracts,” in 27th {USENIX} Security Symposium
({USENIX} Security 18), 2018, pp. 1317–1333.
[27] I. Nikoli´c, A. Kolluri, I. Sergey, P. Saxena, and A. Hobor, “Finding the
greedy, prodigal, and suicidal contracts at scale,” in Proceedings of the
34th Annual Computer Security Applications Conference. ACM, 2018,
pp. 653–663.
[28] C. F. Torres, J. Sch¨utte et al., “Osiris: Hunting for integer bugs in
ethereum smart contracts,” in Proceedings of the 34th Annual Computer
Security Applications Conference. ACM, 2018, pp. 664–676.
[29] S. Kalra, S. Goel, M. Dhawan, and S. Sharma, “Zeus: Analyzing safety
of smart contracts,” in 25th Annual Network and Distributed System
Security Symposium (NDSS’18), 2018.
[30] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Gollamudi,
G. Gonthier, N. Kobeissi, N. Kulatova, A. Rastogi, T. Sibut-Pinote,
N. Swamy et al., “Formal veriﬁcation of smart contracts: Short paper,”
in Proceedings of the 2016 ACM Workshop on Programming Languages
and Analysis for Security. ACM, 2016, pp. 91–96.
[31] Y. Hirai,
“Formal veriﬁcation of deed contract
in ethereum
name service,” November-2016.[Online]. Available: https://yoichihirai.
com/deed. pdf, 2016.
[32] M. Fr¨owis and R. B¨ohme, “In code we trust?” in Data Privacy
Management, Cryptocurrencies and Blockchain Technology. Springer,
2017, pp. 357–372.
[33] T. Chen, X. Li, X. Luo, and X. Zhang, “Under-optimized smart contracts
devour your money,” in 2017 IEEE 24th International Conference on
Software Analysis, Evolution and Reengineering (SANER).
IEEE, 2017,
pp. 442–446.
[34] B.
Jiang, Y. Liu, and W. K. Chan, “Contractfuzzer: Fuzzing
the
smart contracts for vulnerability detection,” in Proceedings of
33rd ACM/IEEE International Conference on Automated Software
Engineering, ser. ASE 2018. New York, NY, USA: ACM, 2018,
pp. 259–269. [Online]. Available: http://doi.acm.org/10.1145/3238147.
3238177
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1229