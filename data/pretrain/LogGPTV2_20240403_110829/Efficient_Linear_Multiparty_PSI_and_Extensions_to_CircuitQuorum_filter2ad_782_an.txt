from the correctness of the functionalities F 𝑝,𝑛,𝑡
Mod
the fact that(cid:106) (𝑎−𝑘)
(cid:107)
= 0 iff 𝑎 ≥ 𝑘.
2𝛾
Security. Let 𝐶 ⊂ [𝑛] be the set of corrupted parties (|𝐶| = 𝑡 
2𝜅+𝛾 (where 𝛾 = ⌈log 𝑛⌉ + 1) with 𝑝 mod 4 = 3 and proceeds
as follows: first, in an input-independent Pre-processing step, the
parties generate (𝑛, 𝑡)− shares of a pair of random non-negative
integers (𝑠′, 𝑠′′), such that (2 · 𝑠′′ + 𝑠′) is of 𝛾 + 𝜅 bits, which is
required for security reasons as discussed later. Then, they locally
compute and get the (𝑛, 𝑡)− shares of 𝑐 = 2𝛾−1 + 𝑎 + 2𝑠′′ + 𝑠′, which
is revealed to 𝑃1. 𝑃1 then computes 𝑐0 = 𝑐 mod 2 and sends it
to all parties. Finally, all parties locally compute and get (𝑛, 𝑡)−
shares of 𝑑 = 𝑐0 + 𝑠′ − 2𝑐0𝑠′, which is the required output. A formal
description of the protocol is given in Figure 14.
Parameters: There are 𝑛 parties 𝑃1, · · · , 𝑃𝑛 with (𝑛, 𝑡)−
shares [𝑎], of 𝑎 ∈ F𝑝 and 𝑎  2𝜅+𝛾 is a prime such that 𝑝 mod 4 = 3.
Input: For each 𝑖 ∈ [𝑛], 𝑃𝑖 inputs its (𝑛, 𝑡)− shares [𝑎]𝑖.
Protocol:
(1) Pre-processing:
• For each 𝑖 ∈ [𝑛], 𝑃𝑖 sets [𝑠′′]𝑖 =𝜅+𝛾−1
• For each 𝑖 = 1, · · · , 𝜅 + 𝛾, 𝑃1, · · · , 𝑃𝑛 use the RandBit()
sub-protocol (Figure 15) to get [𝑏𝑖].
2𝑗−1 · [𝑏 𝑗]𝑖
and [𝑠′]𝑖 = [𝑏𝜅+𝛾]𝑖.
(2) For each 𝑖 ∈ [𝑛], 𝑃𝑖 sets [𝑐]𝑖 = (2𝛾−1+[𝑎]𝑖+2[𝑠′′]𝑖+[𝑠′]𝑖).
(3) 𝑐 ← Reveal𝑛,𝑡 ([𝑐]).
(4) 𝑃1 computes: 𝑐0 = 𝑐 mod 2 and sends to all parties.
(5) For each 𝑖 ∈ [𝑛], 𝑃𝑖 sets [𝑑]𝑖 = 𝑐0 + [𝑠′]𝑖 − 2 · 𝑐0 · [𝑠′]𝑖.
Output: For each, 𝑖 ∈ [𝑛], 𝑃𝑖 gets the output [𝑑]𝑖.
𝑗=1
Figure 14: Mod2 PROTOCOL
We now describe the sub-protocol RandBit used in the pre-processing
step of the above protocol, which takes no input and outputs the
(𝑛, 𝑡)− shares of a random bit 𝑏. The parameters of this sub-protocol
are as in the main Mod2 protocol of Figure 14.
Theorem E.4. The protocol given in Figure 14 securely realizes
F 𝑝,𝑛,𝑡
Mod in the F− hybrid model, where F = (RandomF𝑛,𝑡 , MultF𝑛,𝑡 ,
Reveal𝑛,𝑡 ), against a semi-honest adversary corrupting 𝑡 < 𝑛/2 par-
ties.
Proof. Correctness. We begin by proving the correctness of
the RandBit sub-protocol, invoked in the first step. For this, it suf-
fices to show that 𝑏 ∈ {0, 1}. By the correctness of the functionali-
ties RandomF𝑛,𝑡 and MultF𝑛,𝑡 from [21], we know that 𝑢 = 𝑟2. If
𝑢 ≠ 0, (𝑣𝑟 + 1)2−1 mod 𝑝 = (𝑟 (1−𝑝)/2 + 1)2−1 mod 𝑝. We know
that for any prime order field element 𝑟, 𝑟 (1−𝑝)/2 = ±1 mod 𝑝 and
hence 𝑏 ∈ {0, 1}. Now, the correctness of the Mod2 protocol follows
Input: No input taken.
Protocol:
(1) [𝑟] ← RandomF𝑛,𝑡 (1).
(2) Compute [𝑢] ← MultF𝑛,𝑡 ([𝑟], [𝑟]).
(3) 𝑢 ← Reveal𝑛,𝑡 ([𝑢]). If 𝑢 = 0, discard 𝑢 and repeat step 1.
(4) For each 𝑖 ∈ [𝑛], 𝑃𝑖 sets: 𝑣 = 𝑢−(𝑝+1)/4 mod 𝑝.
(5) For each 𝑖 ∈ [𝑛], 𝑃𝑖 sets: [𝑏]𝑖 = (𝑣[𝑟]𝑖 + 1)2−1 mod 𝑝.
Output: For each 𝑖 ∈ [𝑛], 𝑃𝑖 gets the output [𝑏]𝑖.
Figure 15: RandBit SUB-PROTOCOL
Else, 𝑃1 sends 𝑢 to all parties.
from the following observations: consider 𝑐 = 2𝛾−1 + 𝑎 + 2𝑠′′ + 𝑠′,
which implies that 𝑐0 = 𝑐 mod 2 = (𝑎 + 𝑠′) mod 2. Now, clearly,
𝑑 = 𝑐0 + 𝑠′ − 2𝑐0𝑠′ = 𝑎 mod 2 (recall that 𝑠′ is a single bit).
Security. Let 𝐶 ⊂ [𝑛] be the set of corrupted parties (|𝐶| = 𝑡 < 𝑛/2).
We show how to simulate the view of 𝐶 in the ideal world, given the
input shares {[𝑎]𝑖}𝑖∈𝐶 and the output shares {[𝑑]}𝑖∈𝐶 (for 𝑑 = 𝑎
mod 2). But note that the output is something the simulator can
set on its own (by the security of secret sharing). We consider two
cases based on party 𝑃1 being corrupt or not.
• Case 1 (𝑃1 is honest): In the pre-processing step, to simulate
the view of the corrupted parties in the RandBit sub-protocol,
the simulator does the following: it picks the 𝑡 shares of 𝑟 as
shares of a random value. It picks a random 𝑢 and sends its 𝑡
shares to the corrupted parties. Further, it does local computa-
tions to get 𝑣 and the 𝑡 shares of 𝑏. Then, the simulator does
local computations to get the 𝑡 shares of 𝑠′ and 𝑠′′. For step
2, the simulator does local computations to get the 𝑡 shares of
𝑐. Finally, it picks 𝑐0 at random (this is because of the follow-
ing reason: for a random 𝑟, 𝑟 (1−𝑝)/2 = ±1 mod 𝑝, with equal
probability and hence, 𝑏 is a random bit. Thus, 𝑠′ looks ran-
dom to the corrupted parties, by the security of secret sharing,
which implies that 𝑐0 = 𝑎 + 𝑠′ mod 2 looks random to the
corrupted parties) and sets the 𝑡 shares of [𝑑] by doing the local
computation.
• Case 2 (𝑃1 is corrupt): The simulation of the pre-processing
step and step 2 is exactly as in Case 1. The simulator picks both
𝑐 and 𝑐0 at random (this is because of the following reason:
𝑐 = 2𝛾−1 + 𝑎 + 2𝑟′′ + 𝑟′ and 𝑐0 = 𝑐 mod 2. (2𝑠′′ + 𝑠′) mod 𝑝 is
a random field element (corresponding to a random integer of
length 𝜅 + 𝛾) and hence, 𝑐 looks random in the field F𝑝, which
implies that 𝑐0 also looks random). Finally, the simulator does
the local computation to set the 𝑡 shares of [𝑑].
□
Complexity. The Mod2 protocol has an expected communica-
tion complexity of 19.3𝑛(⌈log 𝑝⌉)2 and an expected round complex-
ity of 10.
F CORRECTNESS, SECURITY AND
COMPLEXITY OF QUORUM PSI
F.1 Correctness and Security of Quorum PSI
We recall the Quorum PSI protocol from Section 5.1 in Figure 16.
We now give a complete proof of Theorem 5.1, by proving the
correctness and security of the protocol in Figure 16.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1202Parameters: There are 𝑛 parties 𝑃1, . . . , 𝑃𝑛 with private sets of size 𝑚 and 1 < 𝑘 ≤ 𝑛 − 1 is quorum. Let 𝛽 = 1.28𝑚, 𝜎 = 𝜅 + ⌈log 𝑚⌉ +
⌈log 𝑛⌉ + 2. Additions and multiplications in the protocol are over F𝑝, where 𝑝 is a prime (larger than 𝑛) that depends on specific
instantiation of Fw-CMP
Input: Each party 𝑃𝑖 has input set 𝑋𝑖 = {𝑥𝑖1, · · · , 𝑥𝑖𝑚}, where 𝑥𝑖 𝑗 ∈ {0, 1}𝜎. Note that element size can always be made 𝜎 bits by first
hashing the elements using an appropriate universal hash function.
Protocol:
(1) Hashing: Parties agree on hash functions ℎ1, ℎ2, ℎ3 : {0, 1}𝜎 → [𝛽].
. Let 𝑡 < 𝑛/2 denote the corruption threshold.
wPSM functionality: For each 𝑖 ∈ {2, · · · , 𝑛} , 𝑃1 and 𝑃𝑖 invoke the F 𝛽,𝜎,𝑁
𝑃1 does stash-less cuckoo hashing on 𝑋1 using ℎ1, ℎ2, ℎ3 to generate Table1 and inserts random elements into empty bins.
For 𝑖 ∈ {2, · · · , 𝑛}, 𝑃𝑖 does simple hashing of 𝑋𝑖 using ℎ1, ℎ2, ℎ3 into Table𝑖, i.e., stores each 𝑥 ∈ 𝑋𝑖 at locations ℎ1(𝑥), ℎ2(𝑥) and
ℎ3(𝑥). If the three locations are not distinct, random dummy values are inserted in bin with collision.
• 𝑃𝑖 is the sender with inputs {Table𝑖[ 𝑗]} 𝑗 ∈[𝛽] and 𝑃1 is the receiver with inputs {Table1[ 𝑗]} 𝑗 ∈[𝛽].
• 𝑃𝑖 receives the outputs {𝑤𝑖 𝑗} 𝑗 ∈[𝛽] and 𝑃1 receives {𝑦𝑖 𝑗} 𝑗 ∈[𝛽].
𝑃1 and 𝑃𝑖 send their inputs 𝑦𝑖 𝑗 and 𝑤𝑖 𝑗, resp., and receive boolean shares ⟨𝑒𝑞𝑖 𝑗⟩𝐵
EQ functionality: For each 𝑖 ∈ {2, · · · , 𝑛} and for each 𝑗 ∈ [𝛽], 𝑃1 and 𝑃𝑖 invoke the F 𝜎
B2A functionality: For each 𝑖 ∈ {2, · · · , 𝑛} and for each 𝑗 ∈ [𝛽], 𝑃1 and 𝑃𝑖 invoke the F F𝑝
functionality for 𝑁 = 3𝑚 as follows:
𝑖 resp., as outputs.
functionality as follows:
functionality as follows:
1 and ⟨𝑒𝑞𝑖 𝑗⟩𝐵
wPSM
(2) Invoking the F 𝛽,𝜎,𝑁
(3) Invoking the F 𝜎
EQ
𝑖 , resp., and receive the additive shares ⟨𝑓𝑖 𝑗⟩1 and ⟨𝑓𝑖 𝑗⟩𝑖 resp., as outputs.
B2A
𝑃1 and 𝑃𝑖 send their inputs ⟨𝑒𝑞𝑖 𝑗⟩𝐵
• 𝑃1 computes ⟨𝑎 𝑗⟩1 =𝑛
(4) Invoking the F F𝑝
(5) Invoking n-party functionalities: For each 𝑗 ∈ [𝛽],
• 𝑃1, · · · , 𝑃𝑛 compute [𝑎 𝑗] ← ConvertShares𝑛,𝑡 (⟨𝑎 𝑗⟩).
• Parties invoke F 𝑝,𝑘,𝑛,𝑡
w-CMP
(6) Output: 𝑃1 computes the quorum intersection as 𝑌 =
1 and ⟨𝑒𝑞𝑖 𝑗⟩𝐵

𝑖=2⟨𝑓𝑖 𝑗⟩1 and for each 𝑖 ∈ {2, · · · , 𝑛}, 𝑃𝑖 sets ⟨𝑎 𝑗⟩𝑖 = ⟨𝑓𝑖 𝑗⟩𝑖.
with 𝑃𝑖’s input being [𝑎 𝑗]𝑖 for 𝑖 ∈ [𝑛] and 𝑃1 learns 𝑐 𝑗 as output.
Table1[ 𝑗].
𝑗 ∈[𝛽]:𝑐 𝑗 =1
Figure 16: QUORUM PSI PROTOCOL
Correctness. For 𝑥 ∈ 𝑋1, define 𝑞𝑥 = |{𝑖 ∈ {2, · · · , 𝑛} : 𝑥 ∈ 𝑋𝑖}|.
Let 𝑌∗ = {𝑥 ∈ 𝑋1 : 𝑞𝑥 ≥ 𝑘} and the output of the protocol is de-
noted by 𝑌. We now show that 𝑌 = 𝑌∗, with all but negligible in
𝜅 probability. For the rest of the proof we assume that the cuckoo
hashing by 𝑃1 succeeds (i.e., all elements of 𝑋1 get inserted success-
fully in Table1), which happens with probability at least 1 − 2−42
(see Section 2.2). Now, the following two lemmata complete the
proof of correctness.
Lemma F.1. 𝑌∗ ⊆ 𝑌 .
Proof. Let 𝑒 = Table1[ 𝑗] ∈ 𝑌∗ and E = {𝑖 ∈ {2, · · · , 𝑛} :
𝑒 ∈ 𝑋𝑖}. By the property of simple hashing, 𝑒 ∈ Table𝑖[ 𝑗] for all
𝑖 ∈ E. By correctness of F 𝛽,𝜎,𝑁
, we have 𝑦𝑖 𝑗 = 𝑤𝑖 𝑗,
wPSM
𝑒𝑞𝑖 𝑗 = 1 and 𝑓𝑖 𝑗 = 1 respectively, for all 𝑖 ∈ E. For 𝑖 ∉ E, since F 𝜎
EQ
gives a boolean output, 𝑒𝑞𝑖 𝑗 ∈ {0, 1}, and by correctness of F F𝑝
,
B2A
we have 𝑓𝑖 𝑗 ∈ {0, 1}. By correctness of ConvertShares𝑛,𝑡, we know
that [𝑎 𝑗] corresponds to 𝑎 𝑗 =𝑖∈{2,··· ,𝑛} 𝑓𝑖 𝑗 < 𝑛 < 𝑝. Since 𝑒 ∈ 𝑌∗,
we will get
□
we get 𝑎 𝑗 ≥ |E| ≥ 𝑘. Finally, by correctness of F 𝑝,𝑘,𝑛,𝑡
w-CMP
𝑐 𝑗 = 1 when invoked on shares of 𝑎 𝑗 ≥ 𝑘. Therefore, 𝑒 ∈ 𝑌.
Lemma F.2. 𝑌 ⊆ 𝑌∗, with probability at least 1 − 2−𝜅−1.
Proof. Suppose 𝑌 ⊈ 𝑌∗. Let 𝑒 = Table1[ 𝑗] ∈ 𝑌\𝑌∗. First,