i ← label.Ki and label(cid:48).tested(cid:48)
with sidi = sid(cid:48)
Return label.Ki.
exec, stage(cid:48), sid(cid:48), K(cid:48), st(cid:48)
i ← true to ensure consistency.
i, also set label(cid:48).K(cid:48)
2.4 Security of Multi-Stage Key Exchange Protocols
We are now ready to state our security notions.
2.4.1 Match Security
Following the approach of Brzuska et al. [BFWW11, Brz13] we split the (security) requirements of matching
sessions and Bellare–Rogaway-like key secrecy into two games. Here, Match security ensures that the
session identiﬁers sid eﬀectively match the partnered sessions in the sense that
1. sessions with the same identiﬁer for some stage hold the same key at that stage,
2. sessions are partnered with the intended (authenticated) participant,
3. session identiﬁers do not match across diﬀerent stages, and
4. at most two sessions have the same session identiﬁer at any stage.
The Match security game GMatch
Def inition 2.1 (Match security) Let KE be a key exchange protocol and A a PPT adversary interacting
with KE via the queries deﬁned in Section 2.3 within the following game GMatch
KE,A :
KE,A thus is deﬁned as follows.
10
Setup. The challenger generates long-term public/private-key pairs for each participant U ∈ U.
Query. The adversary A receives the generated public keys and has access to the queries NewSession,
Send, NewTempKey, Reveal, and Corrupt.
Stop. At some point, the adversary stops with no output.
We say that A wins the game, denoted by GMatch
KE,A = 1, if at least one of the following conditions hold:
1. There exist two distinct labels label, label(cid:48) and some stage i ∈ {1, . . . , M} such that label.sidi =
label(cid:48).sidi (cid:54)= ⊥, label.stage ≥ i, label(cid:48).stage ≥ i, label.stexec (cid:54)= rejectedi, and label(cid:48).stexec (cid:54)= rejectedi,
but label.Ki (cid:54)= label(cid:48).Ki. (Distinct accepted session keys in some stage of partnered sessions.)
2. There exist two distinct labels label, label(cid:48) such that label.sidi = label(cid:48).sidj (cid:54)= ⊥ for some stages
i, j ∈ {1, . . . , M}, label.role = initiator, and label(cid:48).role = responder, but label.V (cid:54)= label(cid:48).U or (only in
the case of mutual authentication) label.U (cid:54)= label(cid:48).V . (Distinct intended authenticated responder.)
3. There exist two (not necessarily distinct) labels label, label(cid:48) such that label.sidi = label(cid:48).sidj (cid:54)= ⊥ for
some stages i, j ∈ {1, . . . , M} with i (cid:54)= j. (Diﬀerent stages share the same session identiﬁer.)
4. There exist three distinct labels label, label(cid:48), label(cid:48)(cid:48) such that label.sidi = label(cid:48).sidi = label(cid:48)(cid:48).sidi (cid:54)= ⊥
for some stage i ∈ {1, . . . , M}. (More than two sessions share the same session identiﬁer.)
We say KE is Match-secure (with unilateral resp. mutual authentication) if for all PPT adversaries A the
following advantage function is negligible in the security parameter:
AdvMatch
KE,A := Pr
GMatch
KE,A = 1
.
(cid:104)
(cid:105)
Note that we sometimes specify the notion of unilateral security by speaking of initiator-authenticated
or responder-authenticated unilateral security.
KE,A
, which ensures Bellare–Rogaway-like key secrecy, is deﬁned as
2.4.2 Multi-Stage Security
The Multi-Stage security game GMulti-Stage,D
follows.
Def inition 2.2 (Multi-Stage security) Let KE be a key exchange protocol and A a PPT adversary in-
teracting with KE via the queries deﬁned in Section 2.3 within the following game GMulti-Stage,D
, where D
is the distribution from which random keys are chosen in Test queries:
Setup. The challenger generates long-term public/private-key pairs for each participant U ∈ U and
KE,A
chooses the test bit btest
$← {0, 1} at random.
Query. The adversary A receives the generated public keys and has access to the queries NewSession,
Send, NewTempKey, Reveal, Corrupt, and Test.
Guess. At some point, the adversary stops and outputs a guess b.
We say that A wins the game, denoted by GMulti-Stage,D
KE,A
= 1, if all of the following conditions hold:
1. b = btest.
11
2. There do not exist two (not necessarily distinct) labels label, label(cid:48) and some stage i ∈ {1, . . . , M}
such that label.sidi = label(cid:48).sidi, label.stkey,i = revealed, and label(cid:48).testedi = true. (Adversary has
tested and revealed the key in a single session or in two partnered sessions.)
Note that the winning conditions are independent of the key dependency, forward secrecy, and authentica-
tion properties of KE, as they are directly integrated in the aﬀected (Reveal, Corrupt, resp. Test) queries.
We say KE is Multi-Stage-secure in a key-dependent resp. key-independent and non-forward-secret resp.
stage-j-forward-secret manner and with unilateral resp. mutual authentication if KE is Match-secure and
for all PPT adversaries A the following advantage function is negligible in the security parameter:
AdvMulti-Stage,D
KE,A
:= Pr
GMulti-Stage,D
KE,A
= 1
(cid:104)
(cid:105) − 1
.
2
We notice that the diﬀerent ﬂavors of Multi-Stage security that a multi-stage key exchange protocol with
M stages can provide form an ordered hierarchy (according to their strength) as depicted in Figure 2, where
key-independent stage-1 forward secrecy with mutual authentication is the strongest and key-dependent
non–forward secrecy with unilateral authentication is the weakest notion.
3 Composition
Ideally, one would like to see a composition result for Multi-Stage-secure key exchange protocols in the
sense that such protocols—potentially under some condition—can be securely composed with arbitrary
symmetric-key protocols, as is the case with Bellare–Rogaway-secure key exchange protocols [BFWW11].
In this section, we prove that indeed secure composition with arbitrary symmetric-key protocols is possible
for a speciﬁc ﬂavor of Multi-Stage-secure protocols, namely those that provide key independence and
stage-j forward secrecy, when composed with a symmetric-key protocol at a forward-secret, ﬁnal stage.
Unfortunately however, for key-dependent or non-forward-secret multi-stage key exchange protocols, such
a generic composition result seems hard to achieve or even impossible, as we will see later.
Moreover, the authentication property of the multi-stage key exchange inﬂuences the security guar-
antees our composition result is able to provide. While mutual authentication yields security for an
unrestricted composition with a symmetric-key protocol, in the case of unilateral authentication, security
can only be guaranteed if the composition with the symmetric-key protocol is not applied in the trivial
attack scenario, where the adversary impersonates the unauthenticated initiator in the key exchange phase.
We state our composition result in terms of mutual authentication, and discuss afterwards how (and why)
it extends to the unilateral case.
3.1 Preliminaries
In order to reason about composition of key exchange and symmetric-key protocol games, we employ the
syntax for composed games (adapted to the multi-stage setting) as well as the notion of session matching
introduced by Brzuska et al. [BFWW11, Brz13], which we brieﬂy summarize in the following.
Composed games for multi-stage key exchange. Let GKE be a game modeling security for a (multi-
stage) key exchange protocol KE and GΠ a security game for some symmetric-key protocol Π, then GKEi;Π
is deﬁned as the security game for the composition KEi; Π of KE and Π where, whenever a session key Ki
is accepted in stage i of KE, this key Ki is registered as a new key in the symmetric-key protocol game
GΠ, allowing the adversary to run Π sessions with this key (and all previously registered keys). In GKEi;Π,
the adversary’s task is to break the security of Π given access to both the queries of GKE and GΠ, which
the composed game essentially just relays to the appropriate subgame. Exceptions to this are the key
12
registration queries of GΠ (that are only executed by the composed game to register stage-i keys within
GΠ whenever such a key has been accepted), the Reveal query of GKE (which the adversary is not allowed
to query for stage-i keys in the composed game6, as session key compromise for these keys is—if at all—
captured in GΠ), and the Test query of GKE (being only of administrative purpose for GKE). The adversary
wins in the composed game, if it, via its queries, succeeds in the subgame GΠ.
Session matching. For composability, an additional property named session matching is required. A
key exchange protocol KE allows for session matching, if there exists an eﬃcient algorithm that, when
eavesdropping on the communication between an arbitrary adversary A and the security game GKE, is
able to deduce which sessions are partnered at each point of the communication. We refer to Brzuska et
al. [BFWW11] for deﬁnitional details and that (some form of) session matching is in fact necessary for
arguing about compositional security.
3.2 Compositional Security
Informally, a multi-stage key exchange protocol KE
We are now able to state our composition result.
composes securely with an arbitrary symmetric-key protocol Π using the session keys of some stage i,
if the key exchange is key-independent and stage-j-forward-secret for j ≤ i with mutual authentication,
allows for an eﬃcient session matching, and the stage-i keys are ﬁnal. With ﬁnal keys in stage i (or: ﬁnal
stages i) we refer to those keys established after the last key exchange message has been exchanged (K2
in QUIC).7 Note that keys derived prior to the ﬁnal message exchange might be used in generating some
key exchange messages and are thus not amenable to truly generic composition: such keys cannot provide
security in, e.g., a symmetric-key protocol Π whose security is deﬁned as an adversary being unable to
forge the server message of a QUIC key exchange (as an adversary can simply replay such a message from
the key exchange in the composed game).8
Theorem 3.1 (Multi-stage composition) Let KE be a key-independent stage-j-forward-secret Multi-Stage-
secure key exchange protocol with mutual authentication, key distribution D, and an eﬃcient session match-
ing. Let Π be a secure symmetric-key protocol w.r.t. some game GΠ with a key generation algorithm that
outputs keys with distribution D. Then the composition KEi; Π for ﬁnal stages i ≥ j is secure w.r.t. the
composed security game GKEi;Π and for any eﬃcient adversary A we have
Adv
GKEi;Π
KEi;Π,A ≤ ns · AdvMulti-Stage,D
KE,B
+ AdvGΠ
Π,C
for some eﬃcient algorithms B and C, where ns is the maximum number of sessions in the game GKEi;Π
(i.e., the size of the set LABELS of used labels).
Proof (Theorem 3.1). The proof proceeds similar as the one for composition of classical Bellare–Rogaway-
secure key exchange protocols given by Brzuska et al. [BFWW11]. First, we gradually replace each session
key derived in stage i of KE by a randomly chosen value and show that, if an adversary is able to distinguish
this, we can break the Multi-Stage security of KE. Once all keys are replaced by random ones, the composed
game is actually independent of the key exchange protocol (as the now randomly chosen ﬁnal stage-i keys
6Note however that keys in stages diﬀerent from i, not being used for Π, are still accessible via Reveal queries in GKEi;Π.
7The notion of ﬁnal keys can be formalized in our model through the sequence of special Send(·, continue) queries (without
further message output) at the end of a session run. A similar query can be used to enable the adversary to trigger the ﬁnal
key computation after the last protocol message has been sent (in QUIC: after the server sent its message).
8In principle, our composition result can cover not only ﬁnal, but any unused stage-i key. We refrain from capturing this
more complex notion of non-usage of keys here.
13
are not used within the key exchange), thus breaking it is equivalent to breaking the symmetric-key protocol
Π directly.
For the ﬁrst part, a hybrid argument is applied. Let Gλ
KEi;Π denote a game that behaves like GKEi;Π,
except that for the ﬁrst λ accepting sessions in stage i (where the partnered session has not yet accepted
$← D is used in the subsequent execution
this stage), instead of the real session key Ki a randomly chosen K(cid:48)
of Π. Obviously, G0
KEi;Π denotes the game where all keys for the Π subgame are
chosen at random from D. Applying Lemma 3.2 below, we have that both games are indistinguishable
due to the Multi-Stage security of KE and it holds that
KEi;Π = GKEi;Π while Gns
i
(cid:12)(cid:12)(cid:12)(cid:12)Adv
G0
KEi;Π
KEi;Π,A − Adv
Gns
KEi;Π
KEi;Π,A
(cid:12)(cid:12)(cid:12)(cid:12) ≤ ns · AdvMulti-Stage,D
KE,B
.
As Gns
KEi;Π uses only randomly chosen keys which are completely independent of the ones derived in
the key exchange protocol, we can, by Lemma 3.3 below, bound the advantage of A in Gns
KEi;Π by the
advantage of an adversary in the security game GΠ of Π. Since Π is assumed to be secure w.r.t. GΠ, we
(cid:3)
can conclude that KE; Π is secure w.r.t. GKEi;Π.
The following lemma establishes the hybrid argument required in the proof of Theorem 3.1.
Lemma 3.2 Let KE be a key-independent stage-j-forward-secret Multi-Stage-secure key exchange protocol
with mutual authentication, key distribution D, and an eﬃcient session matching. Let Π be a symmetric-
key protocol with a key generation that outputs keys with distribution D. Then for i ≥ j, all λ = 1, . . . , ns
(where ns is the maximum number of sessions in GKEi;Π) and any eﬃcient adversary A we have
(cid:12)(cid:12)(cid:12)(cid:12)Adv
Gλ−1
KEi;Π,A − Adv
KEi;Π
Gλ
KEi;Π
KEi;Π,A
(cid:12)(cid:12)(cid:12)(cid:12) ≤ AdvMulti-Stage,D
KE,B
.
for some eﬃcient algorithm B.
For simplicity we provide B with λ as auxiliary input. As already noted in [BFWW11] letting B pick
λ at random in the interval [1, ns] suﬃces to prove the hybrid argument.
Proof (Lemma 3.2). We construct algorithm B using the adversary A against GKEi;Π in such a way
that, if A has a non-negligible diﬀerence between the advantage in Gλ−1
KEi;Π, then B will have a