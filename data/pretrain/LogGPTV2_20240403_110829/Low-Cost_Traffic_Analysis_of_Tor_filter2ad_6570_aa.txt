title:Low-Cost Traffic Analysis of Tor
author:Steven J. Murdoch and
George Danezis
Low-Cost Trafﬁc Analysis of Tor
Steven J. Murdoch and George Danezis
University of Cambridge, Computer Laboratory
15 JJ Thomson Avenue, Cambridge CB3 0FD
{Steven.Murdoch,George.Danezis}@cl.cam.ac.uk
United Kingdom
Abstract
Tor is the second generation Onion Router, supporting
the anonymous transport of TCP streams over the Inter-
net.
Its low latency makes it very suitable for common
tasks, such as web browsing, but insecure against trafﬁc-
analysis attacks by a global passive adversary. We present
new trafﬁc-analysis techniques that allow adversaries with
only a partial view of the network to infer which nodes are
being used to relay the anonymous streams and therefore
greatly reduce the anonymity provided by Tor. Furthermore,
we show that otherwise unrelated streams can be linked
back to the same initiator. Our attack is feasible for the
adversary anticipated by the Tor designers. Our theoreti-
cal attacks are backed up by experiments performed on the
deployed, albeit experimental, Tor network. Our techniques
should also be applicable to any low latency anonymous
network. These attacks highlight the relationship between
the ﬁeld of trafﬁc-analysis and more traditional computer
security issues, such as covert channel analysis. Our re-
search also highlights that the inability to directly observe
network links does not prevent an attacker from performing
trafﬁc-analysis: the adversary can use the anonymising net-
work as an oracle to infer the trafﬁc load on remote nodes
in order to perform trafﬁc-analysis.
1 Introduction
Anonymous communication networks were ﬁrst intro-
duced by David Chaum in his seminal paper [10] describing
the mix as a fundamental building block for anonymity. A
mix acts as a store-and-forward relay that hides the corre-
spondence between messages it receives and sends. Sev-
eral mix based architectures have been proposed and im-
plemented to anonymise email, most notably Babel [26],
Mixmaster [30] and the newer Mixminion [15]. Their la-
tency is tolerable for email, but is unsuitable for interactive
applications such as web browsing.
Other systems, based on the idea of a mix, were de-
veloped to carry low latency trafﬁc.
ISDN mixes [33]
propose a design that allows phone conversations to be
anonymised, and web-mixes [6] follow the same design pat-
terns to anonymise web trafﬁc. A service based on these
ideas, the Java Anon Proxy (JAP)1 has been implemented
and is running at the University of Dresden. These ap-
proaches work in a synchronous fashion, which is not well
adapted for the asynchronous nature of widely deployed
TCP/IP networks [8].
The Onion Routing project has been working on stream-
level, low-latency, high-bandwidth anonymous communi-
cations [35].
Their latest design and implementation,
Tor [18], has many attractive features, including forward se-
curity and support for anonymous servers. These features,
and its ease of use, have already made it very popular, and
a testing network, available for public use, already has 50
nodes acting as onion routers (as of November 2004).
Tor aims to protect the anonymity of its users from non-
global adversaries. This means that the adversary has the
ability to observe and control some part of the network, but
not its totality. Similarly, the adversary is assumed to be ca-
pable of controlling some fraction of Tor nodes. By making
these assumptions, the designers of Tor believe it is safe to
employ only minimal mixing of the stream cells that are re-
layed, therefore lowering the latency overhead of the com-
munication.
This choice of threat model, with its limitation of the ad-
versaries’ powers, has been a subject of controversy in the
anonymity community, yet most of the discussion has fo-
cused on assessing whether these restrictions of attackers’
capabilities are ‘realistic’ or not. We leave this discussion
aside and instead show that trafﬁc-analysis attacks can be
successfully mounted against Tor even within this very re-
stricted threat model.
Our attacks are based on the notion that the timing signa-
ture of an anonymised stream can be used to track it in the
1http://anon.inf.tu-dresden.de/
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Tor network, since the low latency hardly distorts it. The
adversary is not global so he cannot observe this timing sig-
nature directly in the network. Instead the adversary sends
his own trafﬁc streams through a node and monitors the la-
tency. He uses the fact that the trafﬁc volume of one stream
inﬂuences the latency of other streams carried over the same
Tor node. To assess if one of the target streams is carried
over a Tor node, the adversary routes a stream that he can
observe, over the same node, and measures the changes in
latency. Besides tracing the route of an anonymous com-
munication, our trafﬁc-analysis attacks can also be used to
link transactions together. Our techniques allow any user to
perform trafﬁc-analysis on the whole network, and thereby
approximate the capabilities of a global passive observer.
This might at ﬁrst seem to be a typical example of infor-
mation leakage, or covert channels, that have for decades
haunted the community working on multi-level secure sys-
tems. Yet there is a fundamental difference: anonymous
communication relies on trafﬁc from many different sources
being mixed together. Therefore the established solution
to covert channels, of separating the different streams to
avoid timing information leakage, would completely ruin
the anonymity properties of the system. For this reason,
novel techniques will have to be devised to cope with our
attacks.
The results we present should be seriously considered
by designers of anonymous communication systems. They
concern a widely deployed, popular, and well used system
that represents the state of the art in both research and im-
plementation. Few systems of such a standard have been
deployed (Freedom [23, 9, 4] and JAP [6] being the oth-
ers), which has made practical experimentation to verify
the effectiveness of theoretical attacks very difﬁcult. Also,
our attacks highlight an architectural ﬂaw that leads to in-
formation leakage, and this could affect other designs of
anonymity systems. The parallels that this problem has
with covert channels in multilevel security brings the ﬁeld
of anonymous communications closer to more traditional
computer security disciplines. The approach of performing
covert channel analysis to assess the security of an anony-
mous communication system was pioneered in Moskowitz
et al. [31, 32]. Our attacks show that this is not simply a
theoretic model, but techniques from this community can
be effective in practice in degrading the anonymity provided
by real systems.
2 Understanding The Onion Router (Tor)
The Onion Router (Tor) [18] is the culmination of many
years of research by the Onion Routing project [35, 24, 39].
Not only is it a completely new design and implementa-
tion, but it reﬂects a shift from the traditional threat mod-
els anonymous communication systems have tried to pro-
tect against. We ﬁrst describe the Tor architecture and then
introduce the threat model considered in the Tor design.
2.1 Architecture
The Tor network can be used to transport TCP streams
anonymously. The network is composed of a set of nodes
that act as relays for a number of communication streams,
hopefully from different users. Each Tor node tries to
ensure that the correspondence between incoming data
streams and outgoing data streams is obscured from the at-
tacker. Therefore the attacker cannot be sure about which
of the originating user streams corresponds to an observed
output of the network.
The Tor architecture is similar to conventional circuit
switched networks. The connection establishment has been
carefully crafted to preserve anonymity, by not allowing ob-
servers to cryptographically link or trace the route that the
connection is using. The initiator of the stream creates a cir-
cuit by ﬁrst connecting to a randomly selected Tor node, ne-
gotiating secret keys and establishes a secure channel with
it. The key establishment uses self-signed ephemeral Difﬁe-
Hellman key exchange [16] and standard Transport Layer
Security (TLS) is further used to protect the connections
between nodes and provide forward secrecy. All communi-
cations are then tunnelled through this circuit, and the ini-
tiator can connect to further Tor nodes, exchange keys and
protect the communication through multiple layers of en-
cryption. Each layer is decoded by a Tor node and the data
is forwarded to the next Onion router using standard route
labelling techniques. Finally, after a number of Tor nodes
are relaying the circuit (by default three), the initiator can
ask the last Tor node on the path to connect to a particular
TCP port at a remote IP address or domain name. Applica-
tion layer data, such as HTTP requests or SSH sessions, can
then be passed along the circuit as usual. Since we are not
attacking the cryptographic components of Tor we will not
go into any further details on this subject. Interested readers
should consult the Tor speciﬁcation [17].
TCP streams travelling through Tor are divided and
packaged into cells. Each cell is 512 bytes long, but to
cut down on latency it can contain a shorter useful pay-
load. This is particularly important for supporting interac-
tive protocols, such as SSH, that send very small keystroke
messages through the network.
Controversially, Tor does not perform any explicit mix-
ing. Cells are stored in separate buffers for each stream, and
are output in a round-robin fashion, going round the connec-
tion buffers. This ensures that all connections are relayed
fairly, and is a common strategy for providing best effort
service. Importantly, when a connection buffer is empty, it
is skipped, and a cell from the next non-empty connection
buffer is sent as expected. Since one of the objectives of
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Tor is to provide low latency communications, cells are not
explicitly delayed, reordered, batched or dropped, beyond
the simple-minded strategy described above.
Tor has some provisions for fairness, rate limiting and to
avoid trafﬁc congestion at particular nodes. Firstly, Tor im-
plements a so-called token bucket strategy to make sure that
long-term trafﬁc volumes are kept below a speciﬁed limit
set by each Tor node operator. Since the current deployment
model relies on volunteer operators, this was considered im-
portant. Yet this approach, on its own, would not prevent
spikes of trafﬁc from being sent, and propagating through
a connection. These spikes of data would, of course, be
subject to the maximum bandwidth of each node, and could
saturate the network connection of some Tor nodes.
To avoid such congestion, a second mechanism is imple-
mented. Each stream has two windows associated with it,
the ﬁrst describes how many cells are to be received by the
initiator, while the other describes how many are allowed to
be sent out to the network. If too many cells are in transit
through the network – and have not already been accepted
by the ﬁnal destination – the Tor node stops accepting any
further cells until the congestion is eased. It is important
to note that this mechanism ensures that the sender does not
send more than the receiver is ready to accept, thereby over-
ﬁlling the buffers at intermediary Tor nodes. It also makes
sure that each connection can only have a certain number
of cells in the network without acknowledgement, thus pre-
venting hosts from ﬂooding the network. Tor does not, how-
ever, artiﬁcially limit the rate of cells ﬂowing in any other
way.
Finally, it is worth mentioning that each Tor circuit can
be used to relay many TCP streams, all originating from
the same initiator. This is a useful feature to support proto-
cols such as HTTP, that might need many connections, even
to different network nodes, as part of a single transaction.
Unused Tor circuits are short-lived – replacements are set
up every few minutes. This involves picking a new route
through the Tor network, performing the key exchanges and
setting up the encrypted tunnels.
2.2 Threat model
The principal objective of an adversary attacking an
anonymous communication system is to link the initiators
of connections with their respective communication part-
ners and vice versa. For example, an adversary observing
a web request coming out of the Tor network might be in-
terested in determining its originator. Similarly, an attacker
observing a connection into the Tor network would be in-
terested in knowing which remote machine it is ultimately
accessing. A secondary objective of the attacker is to link
transactions, namely network connections, so as to estab-
lish that they are from the same initiator. This could allow
an adversary to proﬁle the initiator, by observing patterns in
his communication habits.
Tor aims to protect against a peculiar threat model, that
is unusual within the anonymous communications com-
munity.
It is conventional to attempt to guarantee the
anonymity of users against a global passive adversary, who
has the ability to observe all network links. It is also cus-
tomary to assume that transiting network messages can be
injected, deleted or modiﬁed and that the attacker controls
a subset of the network nodes. This models a very powerful
adversary and systems that protect against it can be assumed
to be secure in a very wide range of real world conditions.
Tor, on the other hand, like some other designs, most no-
tably MorphMix [36] and Tarzan [21, 20], assumes a much
weaker threat model. It protects against a non-global adver-
sary that can only observe a fraction of the network, mod-
ify the trafﬁc only on this fraction and control a fraction of
the Tor nodes. Furthermore, Tor does not attempt to pro-
tect against trafﬁc conﬁrmation attacks, where an adversary
observes two parties that he suspects to be communicating
with each other, to either conﬁrm or reject this suspicion.
Instead, Tor aims to make it difﬁcult for an adversary with a
very poor a priori suspicion of who is communicating with
whom, to gain more information.
It could be claimed that the weaker threat model makes
Tor insecure and incapable of protecting the anonymity of
users against powerful real-world adversaries. In particular,
while real world adversaries are not omnipotent, they do
have the ability to be adaptive, i.e. select where to monitor
the network based on previous observations. This monitor-
ing can be performed on deployed TCP/IP or telephone net-
works using the lawful interception capabilities integrated
in most modern routing equipment [40]. Access to these
capabilities is, or at least should be, restricted to authorised
parties only.
The importance of our attacks is that an adversary can
extract information about the path of a Tor connection with-
out stepping outside the threat model considered by Tor, and
the methods used are accessible to any Tor user. Therefore
we show that even relatively weak adversaries can perform
trafﬁc-analysis, and get vital information out of Tor. This
means that even non-law-enforcement agencies can signif-
icantly degrade the quality of anonymity that Tor provides,
to the level of protection provided by a collection of simple
proxy servers, or even below.
3 Attacking The Onion Router
An attacker aims to gain some information about who is
communicating with whom through the Tor network. We
will present an overview of the techniques that an attacker
can use to trace the communication and the constraints in-
troduced by the restrictive Tor threat model. These lead to
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
the theoretical exposition of our attacks, the practical results
of which are presented in Section 4.
3.1 Traditional trafﬁc-analysis
Trafﬁc-analysis is extracting and inferring information
from network meta-data, including the volumes and timing
of network packets, as well as the visible network addresses
they are originating from and destined for. In the case of
anonymous communications, an adversary would use this
data to perform trafﬁc-analysis with the aim of tracing who
the originator or the ultimate destination of a connection is –
therefore violating the anonymity properties that the system
is designed to provide. We assume that Tor intermediaries,
through the use of encrypted tunnels, effectively hide the bit
patterns of data travelling though a Tor connection. There-
fore an attacker cannot use any information from the content
to trace the stream and has to resort to trafﬁc-analysis.
Trafﬁc-analysis can be performed at different levels of
granularity. The ﬁrst class of attacks considers the anony-
mous network as a “black box” and only consider the times
when users are initiating connections, and connections are
being relayed to network services outside the Tor network.
Dogan Kesdogan et al. [27] were the ﬁrst to show how re-
peated communications would eventually be revealed even
if the anonymous channel was otherwise perfect. A statis-
tical variant of these attacks, later presented [13], and val-
idated through simulations [29], is more general and can
be applied to a wider variety of anonymous communication
channels.
Both these attack families are very powerful and would
uncover repeated patterns of communication through Tor.
For example, the disclosure and statistical disclosure attacks
could, in the long run, reveal if a particular user connects ev-
ery day to a set of web sites through Tor. An analysis of how
long this would take can be found in Mathewson et al. [29]
and Agrawal et al. [2]. Yet, to effectively mount such at-
tacks, an adversary is required to observe a large fraction of
the network in order to log who is accessing it and which
outside services are used. This attacker is outside the threat
model that Tor tries to protect against and therefore cannot
be considered to break Tor as such2.
A second category of attacks works at a much ﬁner gran-
ularity. They inspect the trafﬁc within the anonymous com-
munication network, and further, the actual shape (load) of
2How realistic these attacks are is a completely different subject, that
requires careful consideration of the size and topology of the anonymous
communication network. In the case of Tor, a fully-connected network, an
attacker would have to be able to know all the meta-data associated with
the TCP connections to and from all Tor nodes. Given their small number
(at time of writing, approximately 50) this might not be such a large effort.
In the case of JAP [6], which arranges all relays in a cascade, only two
nodes have to be under surveillance when applying disclosure or statistical
disclosure attacks. In the latter case we judge them to be a real threat.
the trafﬁc on each network link. Earlier work by the Onion
Routing project drew attention to the fact that overall trafﬁc
patterns in connections are not particularly distorted by each
Onion Router that relays them [39]. Therefore, a global ob-
server would be able to correlate the timing and volume of
incoming and outgoing streams in order to trace the route
an onion-routed connection is taking though the network.
In Danezis [14] these ﬁner granularity attacks are pre-
sented in detail, and a theoretical framework is developed to
assess their effectiveness. In practice, an attacker observes
a stream of data that is to be traced, for example, the reply
of a web server to the initiator of a request. This stream
of data can be represented as a function of trafﬁc volume
by time. The function is convolved with an exponential
decay function: the result is a template that predicts how
the stream will look in the anonymous network. All links
of the network are then compared to assess if they match