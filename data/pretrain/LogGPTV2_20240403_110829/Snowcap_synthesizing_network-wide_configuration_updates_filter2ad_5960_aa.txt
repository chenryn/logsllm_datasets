title:Snowcap: synthesizing network-wide configuration updates
author:Tibor Schneider and
R&quot;udiger Birkner and
Laurent Vanbever
Snowcap: Synthesizing Network-Wide Configuration Updates
Tibor Schneider
ETH Zurich, Switzerland
PI:EMAIL
Rüdiger Birkner
ETH Zurich, Switzerland
PI:EMAIL
ABSTRACT
Large-scale reconfiguration campaigns tend to be nerve-racking for
network operators as they can lead to significant network down-
times, decreased performance, and policy violations. Unfortunately,
existing reconfiguration frameworks often fall short in practice as
they either only support a small set of reconfiguration scenarios or
simply do not scale.
We address these problems with Snowcap, the first network
reconfiguration framework which can synthesize configuration
updates that comply with arbitrary hard and soft specifications,
and involve arbitrary routing protocols. Our key contribution is
an efficient search procedure which leverages counter-examples
to efficiently navigate the space of configuration updates. Given a
reconfiguration ordering which violates the desired specifications,
our algorithm automatically identifies the problematic commands
so that it can avoid this particular order in the next iteration.
We fully implemented Snowcap and extensively evaluated its
scalability and effectiveness on real-world topologies and typical,
large-scale reconfiguration scenarios. Even for large topologies,
Snowcap finds a valid reconfiguration ordering with minimal side-
effects (i.e., traffic shifts) within a few seconds at most.
CCS CONCEPTS
• Networks → Network management; Network reliability;
Network simulations; • Theory of computation → Modal and
temporal logics; Logic and verification;
KEYWORDS
Network analysis, Configuration, Migration
ACM Reference Format:
Tibor Schneider, Rüdiger Birkner, and Laurent Vanbever. 2021. Snow-
cap: Synthesizing Network-Wide Configuration Updates. In ACM
SIGCOMM 2021 Conference (SIGCOMM ’21), August 23–28, 2021, Vir-
tual Event, USA. ACM, New York, NY, USA, 17 pages. https://doi.org/
10.1145/3452296.3472915
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
© 2021 Copyright held by the owner/author(s). Publication rights licensed to the
Association for Computing Machinery.
ACM ISBN 978-1-4503-8383-7/21/08...$15.00
https://doi.org/10.1145/3452296.3472915
Laurent Vanbever
ETH Zurich, Switzerland
PI:EMAIL
rfw
8
10
rx
5 ⇝ 9
c
10 ⇝ 20
b
r2
20
r1
a
Figure 1: This scenario consists of adding an eBGP session a
and adapting two link weights: b and c , while: (i) ensuring
traffic from rx always flows via rfw; and (ii) minimizing traf-
fic shifts. Two orderings achieve both goals: b c a and c b a .
1 INTRODUCTION
Network operators reconfigure their network literally every day [17,
27, 39, 40, 45]. In a Tier-1 ISP for example, network operators modify
their BGP configurations up to ≈20 times per day on average [45].
While most of these reconfigurations are small (e.g., adding a
new BGP session), a non-negligible fraction is large-scale. Common
examples include switching routing protocols (e.g., from OSPF to
IS-IS [19]), adopting a more scalable routing organization (e.g.,
route reflection [37]), or absorbing another network [23]. As an
illustration, Google’s data center networks have undergone no less
than 5 large-scale configuration changes within the last decade [36].
Small or large, network reconfigurations consist in modifying
the configuration of one or more network devices. Due to the dis-
tributed nature of networks, applying all reconfiguration commands
atomically—on all devices—is impossible. Instead, the network nec-
essarily transitions through a series of intermediate configurations,
each of which inducing possibly distinct routing and forwarding
states. Doing so the network might temporarily violate important
invariants or suffer from performance drops even if both the initial
and the final configuration are perfectly correct and verified.
While such reconfiguration issues are transient, they are also
disruptive. Alibaba revealed that the majority of their network inci-
dents (56%) resulted from operators updating configurations [29].
Our case studies (§2) confirm this: even when following best prac-
tices, reconfiguring a network often causes numerous forwarding
anomalies (e.g., loops or blackholes) and unnecessary traffic shifts.
Take the scenario in Fig. 1 as an example. The operators wish
to increase their capacity by establishing a new eBGP session on
r1 while, for security reasons, ensuring traffic from rx keeps flow-
ing through rfw. For performance reasons, they also want to avoid
any unnecessary traffic shifts during the reconfiguration. The first
requirement is hard: it has to be maintained throughout the recon-
figuration. In contrast, the second requirement is soft: it should be
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tibor Schneider, Rüdiger Birkner, and Laurent Vanbever
violated as little as possible. The scenario involves applying 3 com-
mands: adding the BGP session a and adapting two link weights
b and c .1 For simplicity, we assume that there are no failures.
In this example, both the initial and the final configurations
comply with the hard requirement. This is however not the case
for most intermediate forwarding states. Indeed, applying a first
makes traffic from rx bypass the firewall as rx would then forward
traffic to r1 via its direct link. Applying b before a avoids this
bypass. The same holds for traffic shifts: most intermediate states
exhibit some. For example, applying a before c
leads to a shift in
which the traffic from rx (transiently) leaves via r1 instead of r2.
Only two orderings b c a and c b a out of the 3! = 6 possible
comply with the hard requirement while optimizing for the soft
one. Finding those manually is generally hard.
Given its relevance, researchers have developed multiple tools
to seamlessly reconfigure networks. We can broadly classify them
in two categories depending on whether they modify the configura-
tions in-place (one command at a time, as in our example above) or
rely on a technique commonly known as Ships-In-The-Night (SITN),
where routers are running multiple configurations in parallel.
While useful, both categories suffer from limitations in terms
of (i) the reconfiguration scenarios they can support; (ii) the guar-
antees they can provide; and (iii) the overhead they impose. In
particular, while “in-place” reconfiguration tools do not impose any
extra overhead on the network, they only support a restricted set
of scenarios and properties such as preserving reachability when
changing an IGP link weight [13] or when removing a BGP ses-
sion [12]. A bigger problem though is that their restricted model
makes them unsafe to use in multi-protocol environments [42]. In
contrast, SITN-based reconfiguration tools can support a larger set
of scenarios and properties, at the price of duplicating the routing
and forwarding table on all routers [43–45]. Besides, not all routers
support running duplicated control planes in the first place [9].
Several works address the problem of safely updating Software-
Defined Networks (SDN) [24, 31, 32] from one forwarding state to
another. These techniques, however, do not apply to distributed
routing protocols found in the vast majority of networks [6].
A fundamental research question is still open: Is it possible to
automatically and safely reconfigure a network running arbitrary
protocols without imposing any extra overhead on the network?
Snowcap. We answer positively and present Snowcap, a recon-
figuration framework which can synthesize and deploy safe config-
uration updates, for arbitrary protocols and arbitrary correctness
properties. Given (i) the initial and the final configurations; and (ii)
hard and soft specifications (expressed as a linear temporal logic
(LTL) formula and as an objective function, respectively), Snowcap
automatically generates an ordering of the reconfiguration com-
mands which satisfies the hard specifications, while optimizing for
the soft ones. Snowcap’s runtime controller then applies these com-
mands one-by-one to the live network, appropriately waiting for
network convergence in-between them. Doing so enables Snowcap
to tightly control the intermediate states.
1Adapting the weights allows operators to preserve rx ’s original paths in the final
configuration, while allowing other routers to use the new session. Note that lowering
the local preference on the new session would prevent it from being used at all,
nullifying the goal of increasing capacity.
Snowcap’s specification language supports path-based proper-
ties and resilience to link failure. Path-based properties limit for-
warding to only use paths matching a regular expression. This
allows, for example, enforcing security properties, such as requir-
ing traffic to pass through a middlebox. In addition, Snowcap allows
requiring that properties are satisfied under any link failures. This
makes Snowcap practical for networks which have to provide high-
percentile reachability guarantees even during reconfigurations
and link failures (e.g., five nines).
Key challenges and insights. The main technical challenge we
face in designing Snowcap is to efficiently navigate the space of
possible reconfiguration orderings. This is hard as, besides its size
(there are n! orderings given n commands to apply), the search space
is typically sparse (very few orderings adhere to the specification,
cf. our example above). Taken together, these characteristics make
simple search strategies like random sampling extremely inefficient.
We address that by designing an efficient counter-example-guided
search procedure. More specifically, Snowcap greedily builds a re-
configuration ordering leveraging the hard and soft specifications
to guide the search. Upon encountering an ordering which vio-
lates the hard constraints, Snowcap uses this counter-example to
identify the (minimal) ordering constraint (which we call dependen-
cies). Snowcap then restarts its exploration taking these constraints
into account, effectively pruning the search space in a divide-and-
conquer fashion. As we show, this counter-example-guided ap-
proach tends to work particularly well in practice as it neutrally
adapts to different reconfiguration scenarios.
System & results. We demonstrate a prototype of Snowcap2
which currently supports Border Gateway Protocol (BGP) and link-
state Interior Gateway Protocols (IGPs), and can easily be extended
to other protocols. Our prototype not only synthesizes a “good”
reconfiguration plan, but also applies it to the live network au-
tomatically. Our evaluation shows that Snowcap scales to large
network topologies and reconfiguration scenarios: it finds compli-
ant reconfiguration orderings within a few seconds. Snowcap also
finds significantly more optimized orderings than the baselines.
Contributions. In summary, our main contributions are:
tion problem with hard and soft constraints.
• A framework which poses safe reconfiguration as an optimiza-
• A specification language based on LTL.
• A generic search procedure which uses counter-examples to
• An implementation of our approach, together with an evaluation
efficiently find optimized reconfiguration orderings.
on real network topologies and scenarios.
Limitations. Snowcap guarantees that all properties are satisfied
when the network has converged. However, it cannot always guar-
antee that during convergence as transient anomalies (like forward-
ing loops and blackholes) are inherently part of the convergence
process of distributed protocols and thus outside of Snowcap’s con-
trol. These effects can (and do) occur even during normal operation
of the network. While this means that Snowcap cannot guarantee
general reachability properties in-between updates, we prove that
it can guarantee path-based properties during convergence.
2Available at https://github.com/nsg-ethz/snowcap
Synthesizing Network-Wide Configuration Updates
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
F
D
C
100%
89%
75%
50%
27%
0%
0%
Insert-before-remove
Random order
Error Rate
85% 100%
Chinanet (65)
Harnet (15)
Iij (83)
Renater (61)
Uninett (125)
Random order
Theoretical minimum
0
0.5
1
Cost
1.5
Figure 2: The reconfiguration plans based on both random
order and best practice (“insert-before-remove”) often vio-
late reachability when moving from an iBGP full mesh to a
route reflector configuration.
Figure 3: Different reconfiguration usually introduce un-
necessary traffic shifts The y axis lists 5 different network
topologies from Topology Zoo. The x axis shows the cost,
i.e., number of traffic shifts (§5.3).
2 MOTIVATION
We motivate that careful planning is necessary to reconfigure a
network safely and with minimal side-effects by considering two
common and typical reconfiguration scenarios, which are given
priority in the popular “Network Mergers and Migrations” book
for Junos [23]. First, we show that forwarding anomalies (e.g., for-
warding loops and blackholes) can easily occur during an iBGP re-
configuration, even when following best practices. Then, we show
the difficulty of finding a reconfiguration with minimal side-effects
(e.g., traffic shifts) in a network acquisition scenario.
2.1 Case Study: iBGP Reconfiguration
We study the prevalence of forwarding anomalies by reconfiguring
80 networks from the Topology Zoo collection [28] from an iBGP
full mesh to a route reflector topology.3
For every topology, we randomly generate 10 sets of IGP weights
and choose the router with the highest degree as the designated
route reflector (following best practices [20]). We consider two
reconfiguration strategies: First, we simulate a careless operator
blindly reconfiguring the network by randomly choosing the order
of routers in which to apply the changes. Second, we simulate an
operator following the recommended reconfiguration strategy for
this scenario: “insert-before-remove” [23]. That is, we (randomly)
add all the iBGP route reflector sessions before removing the old
ones. For each topology, set of IGP weights, and reconfiguration
strategy, we simulate 10 000 different orderings.
Fig. 2 shows a CDF of the percentage of orderings that led to a
blackhole or forwarding loop (i.e., the error rate) across our experi-
ments. For 50% of the networks, we see that a “careless” operator
introduced forwarding anomalies 85% of the time. In addition, a
“careless” operator would create at least one forwarding anomaly in
73% of the networks (only 27% of the networks exhibited no issues
in all orderings). In contrast, we see that even “best practice” opera-
tors still introduced forwarding anomalies in 25% of the topologies,
and for more than 10% of the topologies, their error rate is over 85%.
“Best practice” is arguably better than the careless operator, but still
far from zero—hence the need for Snowcap, which performs all
these reconfigurations without disruptions.
2.2 Case Study: Network Acquisition
In addition to forwarding anomalies, a reconfiguration can also
lead to unnecessary traffic shifts, causing congestion or jitter. It is
therefore crucial to minimize their occurrences whenever possible.
We study the prevalence of traffic shifts in a merging scenario.
More specifically, we take 42 networks from the Topology Zoo
collection [28]4 which we randomly partition in two distinct con-
nected components, and assign one router in each partition to be a
reflector. We then merge the two networks, during which we add
several links between the two networks, generate an iBGP session
between the two route reflectors, and rescale all link weights in
one network to match the other’s.
Fig. 3 compares the number of traffic shifts (cost) triggered dur-
ing the entire reconfiguration process (cf. §5.3) between a random
order to the theoretical minimum. We compute the ideal costs by
assuming that the entire reconfiguration could be performed in a
single step. Again, we see that random reconfigurations introduce
far more traffic shifts than the theoretical minimum—hence, justify-
ing once more the need for a tool like Snowcap, which merges the
two networks with significantly lower costs (cf. §6.2). The extended
figure with all tested topologies can be found in App. A.
3 OVERVIEW
We now provide an overview of Snowcap and how it computes
reconfiguration orderings using a running example.
Sequence notation. Throughout this paper, we denote an ordered
sequence of commands a , b , c , and d as a b c d . When simulat-
ing such a sequence, we see whether it satisfies or violates the hard
specification ϕ. When it satisfies the specification, we color it green:
d c a b |= ϕ. When it violates the specification, we split it in a green
and a red part: a b c d ̸|= ϕ. The green part shows all commands
that still satisfy the specification, while the red part starts with the
first command that violates it. For example, the sequence a b c d
does not satisfy the specification ϕ and the first command that