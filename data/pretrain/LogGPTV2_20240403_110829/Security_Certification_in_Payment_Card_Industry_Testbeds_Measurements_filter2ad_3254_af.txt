does not show a version number).
Is Improving PCI Certification a Practical Task? From the eco-
nomics point of view, the concept of for-profit security certification
companies may seem like an oxymoron. Intuitively, a scanning ven-
dor might make more money if its scanner is less strict, allowing
websites to easily pass the DSS certification test. On the contrary, a
company offering rigorous certification scanning might lose cus-
tomers when they become frustrated from failing the certification
test. Phenomena with misaligned incentives widely exist in many
security domains (e.g., ATM security, network security) [41]. Fortu-
nately, unlike the decentralized Internet, PCI security is centrally
supervised by the PCI Security Council. Thus, the Council, govern-
ing the process of screening and approving scanner vendors, is a
strong point of quality control. The enforcement can be strength-
ened through technical means. Thus, improving the PCI security
certification, unlike deploying Internet security protocols [69], is a
practical goal that is very reachable in the near future.
Gaming-resistant Self-evolving Testbeds and Open-Source PCI Scan-
ners. A testbed needs to constantly evolve, incorporating new types
of vulnerabilities and relocating existing vulnerabilities over time. A
fixed testbed is undesirable, as scanners may gradually learn about
the test cases and trivially pass the test without conducting a thor-
ough analysis. Automating this process and creating self-evolving
testbeds are interesting open research problems.
Competitive open-source PCI/web scanners from non-profit or-
ganizations could drive up the quality of commercial vendors, forc-
ing the entire scanner industry to catch up, and providing alterna-
tive solutions for merchants to run sanity check on their services.
Currently, there are not many high-quality, open-source and deploy-
able web scanners; w3af and ZAP are among the very few available.
Automate the Workload at Payment Brands and Acquirer Banks.
Payment brands and acquirer banks are the ultimate gatekeepers
in the PCI DSS enforcement chain. Manually screening millions of
scanning reports and questionnaires every quarter is not efficient
(and is likely not being done well in practice). Indeed, our real-world
experiments suggest that the gatekeeping at the acquirer banks
and payment brands appears weak. Thus, automating the report
processing for scalable enforcement is urgently needed.
Scanning vs. Self-assessment Questionnaires. There are four
major types of Self-assessment Questionnaires or SAQs (A to D) [29].
The different SAQs are designed for different types of merchants,
as illustrated in Figure 6 in the Appendix. In SAQs, all the questions
are close ended, i.e., multiple choices. For a vast majority of the
merchants, the current compliance checking largely relies on the
trust of a merchant’s honesty and capability of maintaining a secure
system. This observation is derived from our analysis of the 340
questions in the self-assessment questionnaire (SAQ) D-Mer, which
is an SAQ designed for merchants that process or store cardholder
data. Consequently, it is the most comprehensive questionnaire.
We manually went through all the questions the in Self-
Assessment Questionnaire (SAQ) D-Mer and categorized them into
the five major groups, network security, system security, applica-
tion security, application capability, and company policies. 271 of
the 340 questions fall under the category of company policies and
application capability, where none of them can be automatically
verifiable by an external entity (e.g., ASV/web scanners). Only 31
out of the 69 questions on network, system and application security
are automatically verifiable by a PCI scanner.
Legal Consequences of Cheating in PCI Certification. The
PCI DSS standard is not required by the U.S. federal law. Some state
laws do refer to PCI DSS (e.g., Nevada, Minnesota, Washington) [58],
stating that merchants must be PCI compliant. However, there is
no mentioning about any legal consequences of cheating in the PCI
DSS certification process. Thus, it appears that being untruthful
when filling out the self-assessment questionnaire would not have
any direct legal consequences. The only potential penalty would
be an “after effect”. For example, a merchant may be fined by the
card brand if a data breach happens due to its non-compliance [3].
Limitations. Our work has a few limitations. First, we only tested
6 PCI scanners and 4 web scanners. Given the high expense to
order PCI and web scanning, it is unlikely that such an experiment
can truly scale up. For PCI scanning, we have tried to increase
the diversity of scanner selection by selecting from different price
ranges. The website scanners are added to further increase diver-
sity. Second, our paper primarily focuses on the PCI compliance
certification of e-commerce websites. Although we did not evaluate
the compliance of banks (which report to card brands), we argue
that it is the same set of the approved PCI scanners that provide
the compliance reports for both merchants and banks. The problem
revealed in our study should be generally applicable. Third, we
did not test vulnerabilities that are not yet covered by the current
Data Security Standards (DSS). Future work can further study the
comprehensiveness of DSS. Finally, in Section 5, we only tested
1,203 e-commerce websites because it requires manual efforts to
verify whether a website accepts payment card information. It is
difficult to automate the verification process since one often needs
to register an account and visit many pages before finding the pay-
ment page. We argue that our experiment already covers websites
from various categories and ranking ranges, which is sufficient to
demonstrate the prevalence of the problem.
7 Related Work
Website Scanning. The detection of web application vulnerabili-
ties has been well studied by researchers [45, 49, 73]. In [45, 74], au-
thors measured the performance of several black-box web scanners
and reported a low detection rate for XSS and SQL injection attacks.
The main challenge is to exhaustively discover various web-app
states by observing the input/output patterns. Duchene et al. [53]
proposed an input fuzzer to detect XSS vulnerabilities. Doupé et
al. [49] proposed to guide fuzzing based on the website’s internal
states. In [64], authors proposed a black-box method to detect logi-
cal flaws using network traffic. In [73], authors used a taint-tracking
based detection of XSS vulnerabilities at the client-side. In [65], au-
thors used dynamic execution trace-based behavioral models to de-
tect CSRF vulnerabilities. Although most defenses against XSS and
SQL inject attacks prescribe input sanitization [44, 57, 59], in [51],
authors proposed an application-agnostic rewrite technique to dif-
ferentiate scripts from other HTML inputs. We argue that similar
research efforts could make a positive impact to the PCI community
by (1) producing and releasing high-quality open-sourced tools;
and (2) customizing a non-intrusive version of the tool for testing
production websites in the PCI DSS context.
Proactive Threat Measurements. Honeypots [62, 66] are useful
to collect empirical data on attackers (or defenders). In [56], authors
measure attack behaviors by deploying vulnerable web servers wait-
ing to compromised. In [63], authors deployed phishing websites to
measure the timeliness of browsers’ blacklist mechanisms. In [48],
authors measure the capability of the web hosting providers to
detect compromised websites by deploying vulnerable websites
within those web hosting services. Our testbed can be regarded as
a specialized honeypot to assess the capability of PCI scanners.
Physical Card Frauds. Payment card frauds at ATM or point-of-
sale (POS) machines have been studied for decades [42, 43, 47, 52,
61, 70, 71]. Most of these frauds occur due to stealing payment
card information during physical transactions [35, 42], and cloning
magnetic stripe cards [70, 71]. EMV cards are known to be resistant
to card cloning, but are vulnerable to tempered terminals [52],
or due to protocol-level vulnerabilities [61] and implementation
flaws [47]. Recently, researchers proposed mechanisms to detect
magnetic card skimmers [46, 70].
Digital Card Frauds. In the online setting, the danger of using
magnetic-stripe-like transactions is known for years [8, 21]. Various
methods (e.g., 3D-Secure [24], Tokenization framework [13]) have
been proposed to fix it. Unfortunately, 3D-Secure is found to be
inconvenient and easy to break [60]. Tokenization framework offers
a great alternative by replacing original card information with tem-
porary tokens during a transaction. However, card information can
still be stolen during account setup phase at a poorly secured mer-
chant. Other unregulated digital financial services are also reported
to be insecure [68]. In [68], the authors showed that branchless
banking apps that leverage cellular networks to send/receive cashes
are also vulnerable due to flaws such as skipping SSL/TLS certificate
validation, and using insecure cryptographic primitives.
8 Conclusion
Our study shows that the PCI data security standard (PCI DSS) is
comprehensive, but there is a big gap between the specifications and
their real-world enforcement. Our testbed experiments revealed
that the vulnerability screening capabilities of some approved scan-
ning vendors (ASV) are inadequate. 5 of the 6 PCI scanners are not
compliant with the ASV scanning guidelines. All 6 PCI scanners
would certify e-commerce websites that remain vulnerable. Our
measurement on 1,203 e-commerce websites shows that 86% of
the websites have at least one type of vulnerability that should
disqualify them as non-compliant. Our future work is to a design
minimum-footprint black-box scanning method.
9 Acknowledgment
This project was supported in part by NSF grants CNS-1717028,
CNS-1750101 and OAC-1541105, ONR Grant ONR-N00014-17-1-
2498.
References
[1] Common Vulnerability Scoring System Calculator Version 3. https://nvd.nist.
gov/vuln-metrics/cvss/v3-calculator. [Online; accessed 28-Aug-2019].
[2] The owasp zed attack proxy (zap). https://www.zaproxy.org/.
[3] Q15: What are the penalties
for non-compliance?
pcicomplianceguide.org/faq/#15.
[4] W3af. http://w3af.org/.
[5] SQL injection with raw MD5 hashes (leet more ctf 2010 injection 300). http:
//cvk.posthaven.com/sql-injection-with-raw-md5-hashes, 2010.
[6] Payment Card Industry (PCI) Point-to-Point Encryption: Solution Requirements
and Testing Procedures. https://www.pcisecuritystandards.org/documents/P2PE_
v2_r1-1.pdf, 2015.
[7] Payment Card Industry (PCI) Token Service Providers: Additional Security
Requirements and Assessment Procedures for Token Service Providers (EMV
Payment Tokens). https://www.pcisecuritystandards.org/documents/PCI_TSP_
Requirements_v1.pdf, 2015.
[8] All About Fraud: How Crooks Get the CVV. https://krebsonsecurity.com/2016/04/
all-about-fraud-how-crooks-get-the-cvv/, 2016. [Online; accessed 8-Jan-2019].
https://www.
whos-in-your-online-shopping-cart/, 2018.
[33] BlueCrypt: Cryptographic Key Length Recommendation. https://www.keylength.
[9] Payment Card Industry (PCI) Payment Application Data Security Stan-
https://www.
dard: Requirements and Security Assessment Procedures.
pcisecuritystandards.org/documents/PA-DSS_v3-2.pdf, 2016.
[10] Payment Card Industry (PCI) PIN Transaction Security (PTS) Hard-
Requirements.
ware
https://www.pcisecuritystandards.org/documents/PCI_HSM_Security_
Requirements_v3_2016_final.pdf, 2016.
Security Module
(HSM): Modular
[11] PCI Self-Assessment Questionnaire Instructions and Guidelines. version
3.2. https://www.pcisecuritystandards.org/documents/SAQ-InstrGuidelines-v3_
2.pdf, 2016.
[12] Amazon Connect is Now PCI DSS Compliant.
https://aws.amazon.com/
about-aws/whats-new/2017/07/amazon-connect-is-now-pci-dss-compliant/,
2017.
Security
[13] EMV Payment
Tokenisation
Framework.
https://www.emvco.com/terms-of-use/?u=/wp-content/uploads/documents/
EMVCo-Payment-Tokenisation-Specification-Technical-Framework-v2.0-1.
pdf, 2017.
Specification:
Technical
[14] Giant equifax data breach: 143 million people could be affected. https://money.
cnn.com/2017/09/07/technology/business/equifax-data-breach/index.html, 2017.
[15] How many e-commerce companies are there? What’s the global e-commerce
market size? http://blog.pipecandy.com/e-commerce-companies-market-size/,
2017.
[16] Payment Card Industry 3-D Secure (PCI 3DS): Security Requirements
and Assessment Procedures for EMV 3-D Secure Core Components: ACS,
DS, and 3DS Server.
https://www.pcisecuritystandards.org/documents/
PCI-3DS-Core-Security-Standard-v1.pdf, 2017.
[17] Payment Card Industry (PCI) Card Production and Provisioning: Logical Secu-
rity Requirements. https://www.pcisecuritystandards.org/documents/PCI_Card_
Production_Logical_Security_Requirements_v2.pdf, 2017.
[18] Payment Card Industry (PCI) Card Production and Provisioning: Physical Secu-
rity Requirements. https://www.pcisecuritystandards.org/documents/PCI_Card_
Production_Physical_Security_Requirements_v2.pdf, 2017.
[19] Payment Card Industry (PCI) Data Security Standard Approved Scanning Vendor.
program guide. version 3.1. https://www.pcisecuritystandards.org/documents/
ASV_Program_Guide_v3.1.pdf, 2017.
[20] Approved scanning vendors. https://www.pcisecuritystandards.org/assessors_
and_solutions/approved_scanning_vendors, 2018.
[21] Card Fraud on the Rise, Despite National EMV Adoption. https://geminiadvisory.
io/card-fraud-on-the-rise/, 2018. [Online; accessed 8-Jan-2019].
[22] Cardconnect: A new wave of payment processing. https://cardconnect.com/,
[23] A Comprehensive Guide to PCI DSS Merchant Levels. https://semafone.com/
blog/a-comprehensive-guide-to-pci-dss-merchant-levels/, 2018.
[24] EMV 3-D Secure: Protocol and Core Functions Specification. https://www.emvco.
com/wp-content/uploads/documents/EMVCo_3DS_Spec_v220_122018.pdf, 2018.
[25] Let’s Encrypt. https://letsencrypt.org/, 2018.
[26] Opencart. https://www.opencart.com/, 2018.
[27] Payment Card Industry (PCI) Data Security Standard: Requirements and security
assessment procedures. https://www.pcisecuritystandards.org/documents/PCI_
DSS_v3-2-1.pdf, 2018.
[28] Payment Card Industry (PCI) Data Security Standard Self-Assessment Question-
naire D and Attestation of Compliance for Merchants: All other SAQ-Eligible
Merchants. https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_
1-SAQ-D_Merchant.pdf?agreement=true&time=1557603304233, 2018.
[29] Payment Card Industry (PCI) Data Security Standard Self-Assessment Question-
naire: Instructions and Guidelines. https://finance.ubc.ca/sites/finserv.ubc.ca/
files/banking-leases/PCI_DSS_SAQ_Instructions_Guidelines.pdf, 2018.
[30] Payment Card Industry (PCI) PIN Transaction Security (PTS) Point of Interaction
(POI): Modular Security Requirements. https://www.pcisecuritystandards.org/
documents/PCI_PTS_POI_SRs_v5-1.pdf, 2018.
[31] Payment Card Industry (PCI) Software-based PIN Entry on COTS: Security Re-
quirements. https://www.pcisecuritystandards.org/documents/SPoC_Security_
_Requirements_v1.0.pdf, 2018.
[32] Who’s In Your Online Shopping Cart? https://krebsonsecurity.com/2018/11/
2018.
com/en/4/, 2019.
[34] DB-Engines Ranking. https://db-engines.com/en/ranking, 2019.
[35] Insert Skimmer + Camera Cover PIN Stealer. https://krebsonsecurity.com/2019/
03/insert-skimmer-camera-cover-pin-stealer/, 2019. [Online; accessed 20-Mar-
2019].
[36] netcat. https://en.wikipedia.org/wiki/Netcat, 2019.
[37] PCI DSS Compliance.
https://www.akamai.com/us/en/resources/
[38] Shopify meets all 6 categories of PCI standards. https://www.shopify.ca/security/
[39] Standards, Regulations & Certifications. https://cloud.google.com/security/
pci-dss-compliance.jsp, 2019.
pci-compliant, 2019.
compliance/pci-dss/, 2019.
[40] Adrian, D., Bhargavan, K., Durumeric, Z., Gaudry, P., Green, M., Halder-
man, J. A., Heninger, N., Springall, D., Thomé, E., Valenta, L., VanderSloot,
B., Wustrow, E., Béguelin, S. Z., and Zimmermann, P. Imperfect Forward
Secrecy: How Diffie-Hellman Fails in Practice. In Proceedings of the ACM SIGSAC
Conference on Computer and Communications Security (CCS) (2015).
[41] Anderson, R., and Moore, T. The economics of information security. Science
314, 5799 (2006), 610–613.
[42] Anderson, R. J. Why cryptosystems fail. In Proceedings of the ACM Conference
on Computer and Communications Security (CCS) (1993).
[43] Anderson, R. J., and Murdoch, S. J. EMV: why payment systems fail. Commun.
ACM 57, 6 (2014), 24–28.
[44] Balzarotti, D., Cova, M., Felmetsger, V., Jovanovic, N., Kirda, E., Kruegel,
C., and Vigna, G. Saner: Composing static and dynamic analysis to validate
sanitization in web applications. In Proceedings of the IEEE Symposium on Security
and Privacy (S&P) (2008).
[45] Bau, J., Bursztein, E., Gupta, D., and Mitchell, J. C. State of the art: Auto-
mated black-box web application vulnerability testing. In Proceedings of the IEEE
Symposium on Security and Privacy (S&P) (2010).
[46] Bhaskar, N., Bland, M., Levchenko, K., and Schulman, A. Please pay inside:
Evaluating bluetooth-based detection of gas pump skimmers. In Proceedings of
the 28th USENIX Security Symposium (USENIX SEC) (2019).
[47] Bond, M., Choudary, O., Murdoch, S. J., Skorobogatov, S. P., and Anderson,
R. J. Chip and skim: Cloning EMV cards with the pre-play attack. In Proceedings
of the IEEE Symposium on Security and Privacy (S&P) (2014).
[48] Canali, D., Balzarotti, D., and Francillon, A. The role of web hosting
providers in detecting compromised websites. In Proceedings of the International
World Wide Web Conference (WWW) (2013).
[49] Doupé, A., Cavedon, L., Kruegel, C., and Vigna, G. Enemy of the State: A
State-Aware Black-Box Web Vulnerability Scanner. In Proceedings of the USENIX
Security Symposium (USENIX SEC) (2012).
[50] Doupé, A., Cova, M., and Vigna, G. Why Johnny Can’t Pentest: An Analysis
In Proceedings of the Detection of
of Black-Box Web Vulnerability Scanners.
Intrusions and Malware, and Vulnerability Assessment (DIMVA) (2010).
[51] Doupé, A., Cui, W., Jakubowski, M. H., Peinado, M., Kruegel, C., and Vigna,
G. dedacota: toward preventing server-side XSS via automatic code and data
separation.
In Proceedings of the ACM SIGSAC Conference on Computer and
Communications Security (CCS) (2013).
[52] Drimer, S., and Murdoch, S. J. Keep your enemies close: Distance bounding
against smartcard relay attacks. In Proceedings of the USENIX Security Symposium
(USENIX SEC) (2007).
[53] Duchene, F., Rawat, S., Richier, J., and Groz, R. Kameleonfuzz: evolutionary
fuzzing for black-box XSS detection. In Proceedings of the ACM Conference on
Data and Application Security and Privacy (CODASPY) (2014).
[54] Gamero-Garrido, A., Savage, S., Levchenko, K., and Snoeren, A. C. Quantify-
ing the pressure of legal risks on third-party vulnerability research. In Proceedings
of the ACM SIGSAC Conference on Computer and Communications Security (CCS)
(2017).
https://www.cgisecurity.com/
Cross site tracing (xst).
[55] Grossman, J.
whitehat-mirror/WH-WhitePaper_XST_ebook.pdf.
[56] Han, X., Kheir, N., and Balzarotti, D. Phisheye: Live monitoring of sandboxed
phishing kits. In Proceedings of the ACM SIGSAC Conference on Computer and
Communications Security (CCS) (2016).
[57] Hooimeijer, P., Livshits, B., Molnar, D., Saxena, P., and Veanes, M. Fast
and precise sanitizer analysis with BEK. In Proceedings of the USENIX Security
Symposium (USENIX SEC) (2011).
[58] Kemp, T. Buckle up with Cybersecurity ... It’s the law. https://www.forbes.
com/sites/tomkemp/2012/02/01/buckle-up-with-cybersecurity-its-the-law/
#5d83d3a31d72, 2012.
[59] Livshits, B., and Chong, S. Towards fully automatic placement of security sani-
tizers and declassifiers. In Proceedings of the ACM SIGPLAN-SIGACT Symposium
on Principles of Programming Languages (POPL) (2013).
[60] Murdoch, S. J., and Anderson, R. J. Verified by visa and mastercard securecode:
Or, how not to design authentication. In Proceedings of the International Conference
on Financial Cryptography and Data Security (FC) (2010).
[61] Murdoch, S. J., Drimer, S., Anderson, R. J., and Bond, M. Chip and PIN is
In Proceedings of the IEEE Symposium on Security and Privacy (S&P)
broken.
(2010).
[62] Nazario, J. PhoneyC: A virtual client honeypot. In Proceedings of the USENIX
Workshop on Large-Scale Exploits and Emergent Threats (LEET) (2009).
[63] Oest, A., Safaei, Y., Doupé, A., Ahn, G.-J., Wardman, B., and Tyers, K. Phish-
farm: A scalable framework for measuring the effectiveness of evasion techniques
against browser phishing blacklists. In Proceedings of the IEEE Symposium on
Security and Privacy (S&P) (2019).
[64] Pellegrino, G., and Balzarotti, D. Toward black-box detection of logic flaws
in web applications. In Proceedings of the Network and Distributed System Security
Symposium (NDSS) (2014).
[65] Pellegrino, G., Johns, M., Koch, S., Backes, M., and Rossow, C. Deemon:
Detecting CSRF with dynamic analysis and property graphs. In Proceedings of
the ACM SIGSAC Conference on Computer and Communications Security (CCS)
(2017).
[66] Provos, N. A virtual honeypot framework. In Proceedings of the 13th USENIX
Security Symposium (USENIX SEC) (2004).
[67] Ramos, S. H., Villalba, M. T., and Lacuesta, R. MQTT Security: A Novel
Fuzzing Approach. Wireless Communications and Mobile Computing 2018 (2018).
[68] Reaves, B., Scaife, N., Bates, A., Traynor, P., and Butler, K. R. B. Mo(bile)
money, mo(bile) problems: Analysis of branchless banking applications in the
developing world. In Proceedings of the USENIX Security Symposium (USENIX
SEC) (2015).
[69] Routing security for policymakers: An Internet society white paper, October
2018.
Internet Society. https://www.manrs.org/wp-content/uploads/2018/10/
Routing-Security-for-Policymakers-EN.pdf.
[72] Shu, X., Tian, K., Ciambrone, A., and Yao, D. Breaking the target: An analysis
[70] Scaife, N., Peeters, C., and Traynor, P. Fear the Reaper: Characterization
and Fast Detection of Card Skimmers. In Proceedings of the USENIX Security
Symposium (USENIX SEC) (2018).
[71] Scaife, N., Peeters, C., Velez, C., Zhao, H., Traynor, P., and Arnold, D. P.
The cards aren’t alright: Detecting counterfeit gift cards using encoding jitter. In
Proceedings of the IEEE Symposium on Security and Privacy, (S&P) (2018).
of target data breach and lessons learned. CoRR abs/1701.04940 (2017).
[73] Steffens, M., Rossow, C., Johns, M., and Stock, B. Don’t trust the locals:
Investigating the prevalence of persistent client-side cross-site scripting in the
wild. In 26th Annual Network and Distributed System Security Symposium, NDSS
2019, San Diego, California, USA, February 24-27, 2019 (2019).
[74] Vieira, M., Antunes, N., and Madeira, H. Using web security scanners to
detect vulnerabilities in web services. In Proceedings of the IEEE/IFIP International
Conference on Dependable Systems and Networks (DSN) (2009).
Appendix
Figure 3: An example of wrong hostname in the certificate.
The domain (a*****.***) uses a certificate that is issued for a
different domain name (*.n*****.***).
Figure 4: Self-signed certificate used by (r*****.***), a website
that accepts payment cards for donations.
Implementation Details of PciCheckerLite
PciCheckerLite follows a series of rules for vulnerability testing.
The index of the rules matches with the testing cases discussed in
the paper. As described in the paper, we only focus on a subset of
test cases that do not disrupt or cause any negative impact to the
remote servers (for ethical considerations). The implementation
details are as follows.
Figure 5: (u*****.***) uses expired certificates by default and
redirects users to a secure sub-domain with proper certifi-
cate during payment.
Figure 6: Self-Assessment Questionnaires (SAQs) for differ-
ent types of e-commerce merchants.
Rule 2. Database port detection. For database port detection, we
choose to probe for Mysql port6. The reason for choosing Mysql
port are i) Mysql is among the top three (Mysql, Oracle, Microsoft
SQL Server) most popular databases in the world [34]; ii) Mysql is
free; and iii) it supports a wide range of programming languages.
The access to Mysql port (e.g., 3306) is disabled by default. It is
very dangerous to enable remote access to Mysql database for an
arbitrary client. We check the Mysql port using nc [36], which
is a Unix utility tool that reads and writes data across network
connections using the TCP or UDP protocol.
Rule 5. Default Mysql user/password detection. If the Mysql database
of a website is remotely accessible, we further check for the default
username and password. A typical Mysql installation has a user
“root” with an empty password, unless it is otherwise customized or
disabled. As such, we run a Mysql client to connect to the remote
host using the default username and password. PciCheckerLite
terminates the connection immediately and raises an alert if the
attempt is successful.
Rules 3 & 19. Checking OpenSSH’s availability and version. We use
nc [36] to connect with port 22 of the remote OpenSSH server. If
OpenSSH runs on port 22, then it will return the server informa-
tion (e.g., OpenSSH version, OS type, OS version). We parse the
returned information to determine the version of the OpenSSH
server. We consider any installation versions before OpenSSH_7.6
as vulnerable.
Rules 29 & 33. Checking HTTP header information. Extracting
HTTP information does not require the rich browser functionality.
We use Java net URL APIs to open HTTP connections for
extracting HTTP headers. For case 29, we raise a warning only
6We do not probe for multiple ports to avoid suspicions for possible port scanning.
However, a similar technique can be used to probe for other databases.
X-Content-Type-Options)
if we detect that the “Server” header contains server name
and version. For case 33, we raise a warning if any of the four
(i.e., X-Frame-Options, X-XSS-Protection,
security header
Strict-Transport-Security,
is
missing.
Rule 7. Sensitive information over HTTP. We tested whether all the
HTTP traffic is redirected to HTTPS by default. We open an HTTP
connection with the server and follow the redirection chain. If the
server doesn’t redirect to HTTPS, we raise an alert. We use Java
net URL APIs to implement this test case.
Rules 18 & 13. TLSv1.0 and weak cipher negotiation. We use
OpenSSL’s s_client tool to establish a SSL/TLS connection using
TLSv1.0 protocol. PciCheckerLite raises a warning if the connec-
tion is successful. We also use s_client to negotiate the ciphersuite
with the remote server. PciCheckerLite raises a warning if we suc-