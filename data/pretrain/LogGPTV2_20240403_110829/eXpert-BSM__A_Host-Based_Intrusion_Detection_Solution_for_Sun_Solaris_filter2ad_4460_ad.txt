data and a description of the expected output in terms of
eXpert-BSM reports. In addition to being a basis for regres-
sion testing during development, this data set is useful to
eXpert-BSM operators in several ways. Typically, an opera-
tor would like to be assured that the monitor works correctly
after installation. When started in test mode, eXpert-BSM
loads the conﬁguration settings that are speciﬁc for the test
battery, and starts a batch mode run that will exercise the
analysis and presentation components of eXpert-BSM. This
will show the operator all the possible types of reports that
the monitor can produce. In addition, if the operator wants
to run live attacks to make an end-to-end test in real time,
the test battery documentation provides helpful instructions.
The test battery is designed to be a concentrated collec-
tion of attack data, with as little normal data as possible, to
minimize the size of the data ﬁle and the time it takes to run
through it. The purpose of the test is to validate the proper
operation of all the intrusion models in eXpert-BSM, and to
demonstrate the contents of the resulting reports. Although
producing such data is time-consuming and sometimes dif-
ﬁcult, we believe that this type of test battery is appreciated
by IDS operators. Results from a questionnaire sent to reg-
istered eXpert-BSM operators strongly support this view.
Another form of testing is to run through large amounts
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:26 UTC from IEEE Xplore.  Restrictions apply. 
of normal data to make sure that there are no false alarms.
We continuously perform such testing of eXpert-BSM in our
development and production environments. The DARPA
IDS evaluation data from 1998 and 1999 is of this charac-
ter [11], with several weeks of large data sets containing a
small suite of attacks inserted for every day. The attacks
selected are intended to exploit a strategically broad range
of vulnerabilities that are representative of the major threats
being used to inﬁltrate systems today.
5.2. Experimentation, deployment, and evaluation
Over the years of its development, versions of eXpert-
BSM have been deployed in third-party laboratories, such as
groups within the Air Force Research Laboratory and Na-
tional Security Agency, for operational evaluations and ex-
periments. In addition, these components have participated
in multiple yearly live red-team exercises, mainly within the
DARPA Information Assurance and Survivability suite of
research programs. These activities have provided valuable
input to the continuing development of the knowledge base
and other features of eXpert-BSM.
In April 2000, the ﬁrst release of eXpert-BSM was made
available for download on the Internet. Those who regis-
tered their contact information were granted a time-limited
evaluation license. At the time of writing, well over 200
organizations have registered.
We are currently aware of at least one military oper-
ational center and one commercial data center where the
evaluation version has been ﬁelded operationally to moni-
tor critical servers. At both centers eXpert-BSM has been in
continuous use for more than a year.
5.3. Optimization and Performance
In general, expert systems built with P-BEST are much
faster than systems using the traditional interpreting model.
This is because P-BEST code is translated to C, which is
then compiled just like any C program [10]. In addition,
P-BEST has undergone several modiﬁcations to further en-
hance its performance in terms of speed and integration with
other programs. The modiﬁcations include language exten-
sions that allow most C native types to be used in P-BEST,
translator directives to pass some constructs directly to the
C code, and an improved execution model for the inference
engine. We have also developed C libraries that optimize
the evaluation of complex antecedent expressions.
For any IDS analyzing a high-bandwidth event stream,
it is important to be able to discard as much irrelevant data
as possible as early in the process as possible. The eXpert-
BSM knowledge base uses only 58 of the over 250 possi-
ble types of BSM audit records (auditable event types) in
its intrusion models.
In real-time mode, the Solaris au-
dit kernel module is conﬁgured to produce only those 58
types of records. For batch mode, our preprocessing com-
ponent ebsmgen performs the same selection. Our experi-
ments show that for large sets of typical audit data ((cid:1) 1 GB),
this preselection reduces the amount of data that need to
be produced and processed to on average about 10% of the
total amount that would be produced if full auditing were
enabled.
The original auditd is designed to write audit records
only to ﬁles. The eXpert-BSM package includes a com-
ponent called ebsmprobe that replaces auditd, reads audit
records directly from the kernel, and uses interprocess com-
munication to pass the records to the preprocessing and
analysis components for direct consumption. Thus, eXpert-
BSM avoids expensive disk I/O operations for audit records
and eliminates the need to reserve large amounts of disk
space for audit ﬁles.
We recommend installing eXpert-BSM on local disk
space rather than on network-mounted volumes, for better
security and to avoid unpredictable ﬁle access delays. In-
ternally, any kind of over-the-network access such as NIS
or DNS lookup is avoided, except during the short initial-
ization phase. Because many sites use NIS for user account
information, eXpert-BSM uses its own local ﬁle for map-
ping numerical user IDs to usernames, which comprises the
information in /etc/passwd and NIS.
If the monitored host is running an extremely active pro-
cess producing very large volumes of audit records, such as
a heavily loaded DBMS, auditing can be turned off for that
process to let the IDS be more responsive in its monitor-
ing of the other processes on the host. We propose that a
separate account be created for the sole purpose of running
the heavy process, and that the account be excepted from
auditing by an entry in /etc/security/audit user.
To obtain performance measurements, we have deployed
eXpert-BSM on a Sun Enterprise 450, which is used as a ﬁle
server and compute server for about 15 users. The machine
is equipped with two UltraSparcII 400 Mhz processors, and
1 GB RAM. The additional load imposed by eXpert-BSM
was studied in an experiment where we measured the com-
pletion time for building a relatively large software package,
both in the presence and in the absence of the eXpert-BSM
monitor. We ran make for a clean distribution of openssl-
0.9.6 and measured the completion time as reported by
/usr/bin/time. A total of 10 runs were performed for each
of the two situations, and each run was followed by other
operations to eliminate the effects of ﬁle-system caches etc.
When eXpert-BSM was not running, the 10 builds took on
average 428 seconds each to complete, with a standard de-
viation of 0.8. With eXpert-BSM running in its “out-of-the-
box” conﬁguration, each build produced 94,684 audit event
records, and took on average 454 seconds to complete, with
a standard deviation of 1.1. We can conclude that the pres-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:26 UTC from IEEE Xplore.  Restrictions apply. 
ence of the eXpert-BSM monitor caused a 6% increase in
completion time for the task.
Acknowledgments
6. Related work
Operating system audit logs offer an interesting vantage
point to the security-relevant operations of host systems.
In [15], a design of effective auditing for security-critical
systems is explored. Some standardization efforts for han-
dling audit content have been examined [1], as have issues
of what additional network related activity is worthy of rep-
resentation in host audit trails [4]. A more recent work on
applying formality to audit log structures is [6], which in-
cludes a discussion on some of the difﬁculties in automated
BSM audit trail parsing.
There is a variety of related research efforts that explore
what one can do with audit data to automatically detect
threats to the host. An important work is MIDAS [20], as it
was one of the original applications of expert systems—in
fact using P-BEST—to the problem of monitoring user ac-
tivity logs for misuse and anomalous user activity. CMDS,
by SAIC, demonstrated another application of a forward-
chaining expert-system, CLIPS, to a variety of operating
system logs [18]. USTAT [9] offered another formulation of
intrusion heuristics using state transition diagrams [16], but
by design remained a classic forward-chaining expert sys-
tem inference engine. ASAX [7] introduced the Rule-based
Sequence Evaluation Language (RUSSEL) [12], which is
tuned speciﬁcally for the analysis of host audit trails.
7. Conclusion
Host-based intrusion detection offers the ability to detect
a wide variety of computer misuse through the direct anal-
ysis of process activity inside the host. Host-based analysis
offers an important complement to network trafﬁc analysis,
providing threat detection coverage that is simply not easily
available through the analysis of raw network trafﬁc.
eXpert-BSM is a powerful and mature service for isolat-
ing security misuse and important security-relevant warning
indicators. It analyzes the rich content of the Solaris BSM
audit stream in real time, providing operators with distilled
alert information and response recommendations. eXpert-
BSM has been under development since 1998, and continues
to progress in its effectiveness and usability through exten-
sive testing, experimentation, and deployment experience.
eXpert-BSM is available for download at:
http://www.sdl.sri.com/emerald
The authors are grateful to all the people who have con-
tributed to the design, implementation, evaluation and evo-
lution of eXpert-BSM and other EMERALD components.
We thank Martin Fong and Keith Skinner at SRI for their
extensive contributions to the eXpert-BSM package. The
feedback provided by a number of beta testers and users has
been most helpful and is greatly appreciated. We also thank
the OS security group at Sun Microsystems for answering
our many questions about the Solaris audit subsystem.
References
[1] M. Bishop. A standard audit trail format. In Proceedings of
the 18th National Information Systems Security Conference,
pages 136–145, Baltimore, Maryland, Oct. 10–13, 1995.
National Institute of Standards and Technology/National
Computer Security Center.
[2] D. Bruschi, E. Rosti, and R. Banﬁ. A tool for pro-active de-
fense against the buffer overrun attack. In J.-J. Quisquater
et al., editors, Computer Security – Proceedings of ES-
ORICS 98, volume 1485 of LNCS, pages 17–31, Louvain-
la-Neuve, Belgium, Sept. 16–18, 1998. Springer-Verlag.
[3] CERT Coordination Center, Software Engineering Institute,
Carnegie Mellon University, Pittsburgh, PA 15213-3890,
USA. Buffer Overﬂow in Sun Solstice AdminSuite Daemon
sadmind, Dec. 14, 1999. CERT Advisory CA-1999-16, http:
//www.cert.org/advisories/CA-1999-16.html.
[4] T. E. Daniels and E. H. Spafford. Identiﬁcation of host audit
data to detect attacks on low-level IP vulnerabilities. Journal
of Computer Security, 7(1):3–35, 1999.
[5] J. de Haas. Vulnerability in Solaris ufsrestore. Bug-
traq, June 14, 2000. http://archives.neohapsis.com/archives/
bugtraq/2000-06/0114.html.
[6] C. Flack and M. J. Atallah. Better logging through formal-
ity: Applying formal speciﬁcation techniques to improve
audit logs and log consumers.
In H. Debar, L. M´e, and
S. F. Wu, editors, Recent Advances in Intrusion Detection
(RAID 2000), volume 1907 of LNCS, pages 1–16, Toulouse,
France, Oct. 2–4, 2000. Springer-Verlag.
[7] J. Habra, B. Le Charlier, A. Mounji, and I. Mathieu. ASAX:
Software architecture and rule-based language for universal
audit trail analysis.
In Y. Deswarte et al., editors, Com-
puter Security – Proceedings of ESORICS 92, volume 648 of
LNCS, pages 435–450, Toulouse, France, Nov. 23–25, 1992.
Springer-Verlag.
[8] L. T. Heberlein et al. A network security monitor. In Pro-
ceedings of the 1990 IEEE Symposium on Security and Pri-
vacy, pages 296–304, Oakland, California, May 7–9, 1990.
[9] K. Ilgun. USTAT: A real-time intrusion detection system
for UNIX.
In Proceedings of the 1993 IEEE Symposium
on Security and Privacy, pages 16–28, Oakland, California,
May 24–26, 1993.
[10] U. Lindqvist and P. A. Porras. Detecting computer and net-
work misuse through the production-based expert system
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:26 UTC from IEEE Xplore.  Restrictions apply. 
toolset (P-BEST). In Proceedings of the 1999 IEEE Sym-
posium on Security and Privacy, pages 146–161, Oakland,
California, May 9–12, 1999.
[11] R. Lippmann, J. W. Haines, D. J. Fried, J. Korba, and K. Das.
Analysis and results of the 1999 DARPA off-line intrusion
detection evaluation. In H. Debar, L. M´e, and S. F. Wu, ed-
itors, Recent Advances in Intrusion Detection (RAID 2000),
volume 1907 of LNCS, pages 162–182, Toulouse, France,
Oct. 2–4, 2000. Springer-Verlag.
[12] A. Mounji. Languages and Tools for Rule-Based Distributed
Intrusion Detection. PhD thesis, Institut d’Informatique,
University of Namur, Belgium, Sept. 1997.
[13] P. G. Neumann and P. A. Porras. Experience with EMER-
ALD to date. In Proceedings of the 1st Workshop on Intru-
sion Detection and Network Monitoring, Santa Clara, Cali-
fornia, Apr. 9–12, 1999. The USENIX Association.
[14] A. One. Smashing the stack for fun and proﬁt. Phrack Mag-
azine, 7(49), Nov. 8, 1996. http://www.fc.net/phrack/ﬁles/
p49/p49-14.
[15] J. Picciotto. The design of an effective auditing subsystem.
In Proceedings of the 1987 IEEE Symposium on Security
and Privacy, pages 13–22, Oakland, California, Apr. 27–29,
1987.
[16] P. A. Porras and R. A. Kemmerer. Penetration state tran-
sition analysis: A rule-based intrusion detection approach.
In Proceedings of the Eighth Annual Computer Security Ap-
plications Conference, pages 220–229, San Antonio, Texas,
Nov. 30–Dec. 4, 1992.
[17] P. A. Porras and P. G. Neumann. EMERALD: Event mon-
itoring enabling responses to anomalous live disturbances.
In Proceedings of the 20th National Information Systems
Security Conference, pages 353–365, Baltimore, Maryland,
Oct. 7–10, 1997. National Institute of Standards and Tech-
nology/National Computer Security Center.
[18] P. Proctor. Audit reduction and misuse detection in hetero-
geneous environments: Framework and application. In Pro-
ceedings of the Tenth Annual Computer Security Applica-
tions Conference, pages 117–125, Orlando, Florida, Dec. 5–
9, 1994.
[19] T. H. Ptacek and T. N. Newsham. Insertion, evasion, and de-
nial of service: Eluding network intrusion detection. Techni-
cal report, Secure Networks, Inc., Calgary, Alberta, Canada,
Jan. 1998. http://www.clark.net/˜roesch/idspaper.html.
[20] M. M. Sebring, E. Shellhouse, M. E. Hanna, and R. A.
Whitehurst. Expert systems in intrusion detection: A case
study.
In Proceedings of the 11th National Computer
Security Conference, pages 74–81, Baltimore, Maryland,
Oct. 17–20, 1988. National Institute of Standards and Tech-
nology/National Computer Security Center.
[21] Sun Microsystems, Inc., 901 San Antonio Road, Palo Alto,
SunSHIELD Basic Security Module
CA 94303, USA.
Guide, Solaris 7, Oct. 1998. Part No. 805-2635-10.
[22] U.S. Department of Defense. Trusted Computer System
Evaluation Criteria, Dec. 1985. DoD 5200.28-STD.
[23] A. Valdes and K. Skinner. Adaptive, model-based mon-
itoring for cyber attack detection.
In H. Debar, L. M´e,
and S. F. Wu, editors, Recent Advances in Intrusion De-
tection (RAID 2000), volume 1907 of LNCS, pages 80–92,
Toulouse, France, Oct. 2–4, 2000. Springer-Verlag.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:26 UTC from IEEE Xplore.  Restrictions apply.