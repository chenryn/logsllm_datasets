3
+
,
4
2
*
+
5
6
)
0
*
+
&
7
/
)
/
%
/
*
2
4
,
+
8
&
7
)
*
5
/
&
/
0
9
*
(
%
/
,
0
!

:


#

;
0
.
-
,
+
+
*
?
/
+
*
(
%
/
,
0
%
,
8
&
)
/
(
/
,
6
2
4
*
7
2
/
%
*
2
@






A
,
(
&
%
/
,
0
B
+
&
(
C
/
0
.
D
5
&
/
)
&
7
)
*
%
,
8
,
%
/
5
&
%
*
?
(
+
/
8
/
0
&
)
2
E
F
G
H
I
J
K
L
M
N
less coverage to end users, e.g. mobile nodes 1‚Äì7. They
could represent, for example, WLANs deployed at ad-
jacent buildings. Note that overlapping usually exists
between adjacent access points for both residential net-
works (especially in densely populated cities) and corpo-
rate wireless networks (to allow for continuous connec-
tivity and seamless mobility roaming).
Assume node 1 is the initial source of infection, i.e. it
was infected previously at some other location before as-
sociating with access point A. Once activated, the worm
analyzes WLAN A and probes all victims in the neigh-
borhood; hence node 2 and node 3 eventually get in-
fected. Note that node 3 is under coverage of both A and
B. Normally node 3 picks and associates with only one
access point, which is decided by certain criteria such as
wiÔ¨Å signal-to-noise ratio. A worm-infected node, how-
ever, can gather a list of usable access points within reach
and scan them for victims in the proximity. Effectively,
the worm toggles association between usable WLANs to
spread itself. Eventually all nodes in WLAN B and C are
compromised through node 3 and nodes 5/6 respectively.
Nodes at coverage intersection of access points are
‚Äúbridges‚Äù that help propagate the worm. These nodes
can be thought of as ‚Äúconnectors‚Äù in the small-world
phenomenon hypothesis [44, 41]. Contrary to the con-
text of traditional Internet worms in which node 1 could
probe and infect node 7 instantly, propagation dynam-
ics of wildÔ¨Åre worms are similar to gradual and local
diffuseness of disease. Therefore, a major advantage
and difference of a wildÔ¨Åre worm over a regular Inter-
net worm is that a wildÔ¨Åre worm can propagate entirely
locally within each connectivity area, and thus evade Ô¨Åre-
walls and intrusion detection/prevention systems located
at traditional enforcement points on the boundary be-
tween the local networks and the Internet.
Fertile ground for wildÔ¨Åre worms are wireless hotspot
networks, which provide Internet access in public areas
such as restaurants and airports, and private wireless net-
works of home users in residential areas. For example,
Singapore government is realizing a ‚ÄúDigital Singapore‚Äù
with wireless hotspots available at every street corner
where people can log onto the Internet and receive emails
on the move. Section 2.6.2 evaluates whether wiÔ¨Å pen-
etration in metropolitan areas is sufÔ¨Åcient for sustaining
the spread of a wiÔ¨Å worm.
2.2 Mobility
Presently, the wireless node population consists mostly
of laptops, and to a lesser extent of PDAs and smart-
phones (including wiÔ¨Å VoIP phones). The mobility pat-
terns of wireless users can affect worm dynamics in three
ways. First, mobility could compensate for sparse con-
nectivity that may hinder wildÔ¨Åre-style propagation, as
users carry the worm to networks previously unreach-
able by the worm. This is not restricted to just the places
where the user turns on the laptop, as Laptops can also be
programmed to wake up periodically as the user moves
from one place to another At the same time, user mobil-
ity also helps worm propagation into protected networks,
whether they use WEP or more secure WPA/WPA2 pro-
tection, as the user will voluntarily (and perhaps even au-
tomatically) authenticate to those networks. Finally, the
worm could create fake access points to lure and infect
mobile users.
2.3 Open vs. Protected Access Points
There is a signiÔ¨Åcant number of publicly available
‚Äúopen‚Äù access points; the rest are protected with Wired
Equivalent Privacy (WEP) encryption or WiÔ¨Å Protected
Access (WPA). A worm can propagate over unprotected
wireless networks in the way shown in Figure 2. More-
over, as a result of design and implementation Ô¨Çaws,
WEP encryption is insecure. There is a handful of WEP
attacks in the literature, e.g. weak IV attacks [30],
keystream re-use [15, 22] and more recently fragmen-
tation attacks [20] . These attacks are not just of theoret-
ical value; they have been implemented into many prac-
tical and efÔ¨Åcient WEP cracking tools freely available
on the Internet. Wepcrack [8] did a performance com-
parison on some of such tools. Among them, Aircrack
[1] is particularly powerful with a high success rate and
relatively low cracking time that could vary between 5
seconds to 1 minute. However Aircrack needs to spend
considerable time to sniff and capture sufÔ¨Åcient wireless
packets before cracking attempt. For example, after an-
alyzing wireless usage statistics at a university campus
[7], we determine that it may take 1-2 hours on average
to successfully crack WEP encryption. Instead of pas-
sively snifÔ¨Ång packets, the worm could also employ ac-
tive attacks e.g., discovering the encrypted version of a
plaintext packet [8]. As for WPA, while not inherently
weak, it is susceptible to bruteforce attacks if used with
a weak password in the most common WPA/PSK con-
Ô¨Åguration. Given the apparent susceptibility of the cur-
rently available protection mechanisms, it seems likely
that worms would consider carrying the additional pay-
load of including cracking tools.
2.4 Infection process
In the design of a wildÔ¨Åre worm, we note that there are
two possible ways to exploit vulnerabilities. The Ô¨Årst
approach, known as the ‚Äúpush method‚Äù, is to directly
probe for an exploitable service and inject code to that
service on clients just as traditional worms (e.g. DCOM
RPC vulnerability on port 135 for Blaster worm). With
the second approach, dubbed ‚Äúpull method‚Äù, instead of
relying on a service vulnerability, the attacker exploits
vulnerabilities, such as browser vulnerabilities by per-
326
16th USENIX Security Symposium
USENIX Association
forming a man-in-the-middle attack. For example, the
infected node can listen on the wiÔ¨Å and wait for the vic-
tim to make a DNS request, spoof the response pointing
to itself (or some other, unused address), pretend it is the
web-server and respond with pages that include exploits
such as the WMF exploit [13] or other exploits for IE
and Mozilla that attempt to execute malicious code. ARP
spooÔ¨Ång and TCP injection attacks may be used as well.
We note that the distinction between worm and virus is
blurred in this case, as propagation may require some
form of user interaction, yet the attack is piggybacked on
communication to a third party, rather than between in-
fected and targeted host. The broadcast nature of most
wireless setups makes ‚Äúpull‚Äù attacks attractive for wild-
Ô¨Åre worms as they can be exploited at a scale that was
never possible for Internet worms.
2.5 Proof-of-concept implementation
We have implemented a proof-of-concept wildÔ¨Åre worm
for both Windows XP and Windows Vista. This worm,
dubbed WildÔ¨Åre/A, has been submitted to security ven-
dors for testing. The implementation of this worm was
surprisingly straight-forward given the plethora of tools
publicly available.
The WLAN API available for both Windows-Vista
and -XP facilitates the process of managing AP associa-
tion and scanning. Through this API, the worm is able to
actively scan for open ‚Äúvisible‚Äù APs and, in turn, asso-
ciate with them. Once associated with an AP, the worm
scans the local subnet for vulnerable machines. For
this particular proof-of-concept implementation we only
considered push exploits, namely, the chunked-encoding
vulnerability found in the Apache Web server 1.22. The
worm payload is packaged as a self-extracting archive
that contains the libraries required by the WLAN API as
well as a copy of the actual worm. We have conÔ¨Årmed
that the worm operates as expected in a small scale ex-
periment with 4 APs and 15 vulnerable hosts.
2.6 Analysis
As with all worms, wildÔ¨Åre worms need to exploit a vul-
nerability to infect end-hosts. Unlike Internet worms that
can effectively spread even if the vulnerable population
is very small [48], wiÔ¨Å worms depend on the vulnera-
bility being widespread. This raises two questions: what
critical mass does a wildÔ¨Åre worm require to be effective,
and whether there are indeed such pervasive vulnerabili-
ties.
2.6.1 Vulnerabilities
To determine whether there is a signiÔ¨Åcant number of
pervasive vulnerabilities, we analyze vulnerability data
from a variety of sources, including NVD [4], Securi-
tyfocus [6], and other independent sources. We focus
on remotely exploitable vulnerabilities in the default in-
stallation of Windows XP Service Pack 2, between Au-
gust 2004 (the Windows XP SP2 release date) and Jan-
uary 2007. We classify vulnerabilities based on whether
they can be triggered through direct injection (‚Äúpush‚Äù ex-
ploits) or through spooÔ¨Ång attacks as discussed in the
previous section (‚Äúpull‚Äù exploits). Starting from basic in-
formation available through the NVD database, we ver-
ify the vulnerability information and derive further de-
tails such as exploit availability, exploitation technique,
disclosure date, and patch dates primarily from Security-
focus archives but also other independent sources.
For all the qualifying vulnerabilities, we attempt to get
a rough estimate of the vulnerability window: the amount
of time the vulnerability was known and not patched in
the majority of hosts. Unfortunately, publicly-available
information does not always give us an accurate timeline
of exploitation time vs. disclosure time, and we there-
fore have to make certain assumptions. In particular, we
optimistically assume that by the time a vendor (in this
case, Microsoft) releases an update, all hosts in the net-
work are instantly updated and patched.
In most (but
not all) cases, the vulnerability is disclosed by the ven-
dor only when the update is available. As such, it is not
always possible to determine exactly when the vulnera-
bility became known and to consider this as the start of
the vulnerability window.
In lack of more accurate data, we assume that the vul-
nerability window starts two week before the update is
issued, as Microsoft only posts updates every second
Tuesday of each month. This is corroborated by Syman-
tec which reported an average period of 13 days for the
Ô¨Årst half of 2006 between disclosure date of a vulnera-
bility and the release date of an associated patch by Mi-
crosoft [53].
The results indicate signiÔ¨Åcant exposure to vulnerabil-
ities in the default conÔ¨Åguration over the last two years,
accounting for more than 50% of all days in the to-
tal period. Vulnerabilities of ‚Äúpush‚Äù type, i.e., that af-
fect services and don‚Äôt need user interaction, were ac-
tive for 105 days (11.89%) while ‚Äúpull‚Äù type, i.e., that
need user-interaction of some-kind, were active for 428
days (48.47%). We believe this observation suggests a
trend, in which server/services components seem to be
relatively robust when compared to client components.
This is especially alarming in the context of wiÔ¨Å worms,
because they are particularly suited for exploiting such
vulnerabilities, and their abundance may give them an-
other evolutionary advantage over Internet worms. Over-
all, we have found that 60% of the listed vulnerabilities
had public exploits available for 391 days (44.28%) dur-
ing the time period.
Other analyses of vulnerability exposure for the years
2004‚Äì2006 published on the Internet paint an even dim-
mer picture for ‚Äúpull‚Äù type attacks. For a total of 284
USENIX Association