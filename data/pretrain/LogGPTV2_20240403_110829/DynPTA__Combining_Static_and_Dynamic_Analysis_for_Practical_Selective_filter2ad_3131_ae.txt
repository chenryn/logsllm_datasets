be protected, as also shown in Figure 8.
For the two client-side utilities, we performed 500 logins to
another host in the same subnet that triggered ssh-agent, and
signed a 1GB ﬁle using Minisign. The overhead for ssh-agent
is just 3.15%, while Minisign exhibits the highest overhead
among all our use cases at 22%. Minisign operates by ﬁrst pre-
hashing the ﬁle and then signing the hash value byte-by-byte,
with every iteration of the signing loop requiring a decryption
of the private key, resulting in such a high overhead—which
though is expected as a fully compute-bound use case.
2) Increasing the Amount of Sensitive Data: The key insight
behind selective data protection, and DynPTA in particular, is
that instead of protecting all data by spending as few extra
CPU cycles per memory access as possible, we protect only
data that is really security-critical, and thus afford to spend
more CPU cycles for only a fraction of memory accesses. As
expected, however, any performance beneﬁts will diminish as
the amount of protected data increases, and for this reason we
performed some additional experiments to explore this tradeoff.
We used MbedTLS to explore a worst-case scenario by
marking additional non-critical data as sensitive. Speciﬁcally,
besides the SSL private key, we progressively mark other ﬁelds
of the mbedtls_ssl_context data structure as sensitive.
These include SSL handshake parameters, conﬁguration options,
and input/output buffers. In each round we mark more ﬁelds as
sensitive, until the whole data structure is marked as sensitive.
Figure 10 shows how the overhead increases modestly from
4% to 11% in the ﬁrst four measurement rounds, as we
keep marking mostly conﬁguration-related ﬁelds as sensitive.
Marking the input and output buffers as sensitive in the ﬁnal two
rounds increases the overhead considerably to 46%, because
these buffers are used as part of every transmission, in contrast
to the private key and the rest of the ﬁelds, which are accessed
only during the TLS handshake.
Fig. 10: Runtime overhead of MbedTLS for an increasing
amount of protected (non-critical) data.
observing only a minor increase of 1% in the overall per-
formance overhead. We discuss in detail this experiment in
Appendix F. Finally, we also performed some microbenchmarks
to further study the beneﬁts of scoped DFT as the percentage
of sensitive data in the program increases, the results of which
we provide in Appendix G. Our main ﬁnding is that once
sensitive data exceeds 70–80% of all data, the scoped DFT
and label lookups become more costly than simply encrypting
all objects identiﬁed by the points-to analysis.
VII. SECURITY EVALUATION
A. Heartbleed
Heartbleed [5] is a heap overﬂow vulnerability due to a
missing bounds check in the TLS Heartbeat feature of OpenSSL.
An attacker can send a malicious request that causes a buffer
over-read in the server’s memory and allows the leakage of
sensitive data, including the private server SSL keys, back to
the attacker through the generated response.
We compiled Nginx with OpenSSL v1.0.1f and veriﬁed
that the PoC exploit [53] was indeed capable of leaking the
private TLS key. We observed that the leakage of the key was
dependent on the heap allocations, that is, the address of the
private key and the address of the vulnerable request buffer that
is over-read. The private key is initialized during server startup
and typically occupies a low address on the heap. To leak the
private key, the vulnerable request buffer must be allocated
below this address. During experimentation, we observed that
there are “holes” below the address of the private key on the
Besides MbedTLS, we also experimented with Nginx by
enabling HTTP password authentication and protecting the
in-memory passwords (in addition to the SSL private key),
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1929
heap that occasionally would be allocated to the vulnerable
request buffer, allowing the exﬁltration of the private key.
We then marked the private key as sensitive, as described in
Section VI-A, and hardened the server using DynPTA. Using
the above PoC exploit, we repeatedly veriﬁed that whenever
the private key was leaked, it was always encrypted.
B. Spectre
Transient execution vulnerabilities allow the leakage of
otherwise inaccessible data from memory, and are thus another
class of attacks DynPTA can defend against. We evaluated
DynPTA against this type of attacks using two Spectre [18]
variants for which we could obtain PoC exploits [40, 41].
Intel CPUs contain a pattern history table (PHT) that
uses the history of past taken/not-taken branches for branch
prediction. The Spectre-PHT variant poisons the PHT, causing
mispredictions in the direction of conditional branches, which
can be used by attackers to bypass bounds checks in the
program, and speculatively load sensitive data into the cache.
From there, data can be leaked via various cache side-channel
attacks. The Spectre-PHT PoC [40] contains a bounds check
which is bypassed to leak a secret string.
Besides the PHT, CPUs also contain a branch target buffer
(BTB) that uses the history of past branch targets for branch
target prediction. The Spectre-BTB variant poisons the BTB
to steer transient execution to special “gadgets” found in the
program, which can be used to leak sensitive data. Similarly
to the previous exploit, the Spectre-BTB PoC [41] contains
a secret string that is leaked by redirecting the speculative
execution to an appropriate gadget.
For both PoCs, we marked the secret string as sensitive, and
used DynPTA to harden the exploit program (more details and
the code for both PoCs are provided in Appendix E). When the
string is speculatively accessed, its encrypted form is loaded in
the cache. Therefore, the conﬁdentiality of the string is always
preserved when being leaked through a cache side channel.
VIII. LIMITATIONS AND DISCUSSION
a) Performance Optimizations: Although DynPTA allows
us to scale selective data protection to larger applications
with modest overhead, there is still opportunity for further
optimizations that will lower the overhead even further. Label
lookups can disrupt cache locality, resulting in a higher number
of cache misses. We plan to investigate this issue further and
adapt the shadow memory implementation accordingly.
DynPTA performs context-sensitive modeling only for heap
analysis. Other regions in the program code, such as code
hotspots and critical objects, could also beneﬁt from selective,
summary-based, context sensitivity. Smaragdakis et al. [54,
55] discussed selective context sensitivity with respect to Java
programs. Similarly, Sridharan et al. [56] proposed reﬁnement-
based context sensitive pointer analysis. In their current form,
these techniques are applicable only to Java programs, but we
plan to investigate their adaptation for C/C++ programs.
Our DFT-based optimization is not limited to Steensgaard’s
algorithm, and can improve the precision of any static pointer
analysis algorithm. In particular, TeaDSA [57] is a promising
uniﬁcation-based pointer analysis algorithm that aims to limit
oversharing and thus improve scalability. Despite our efforts,
however, we could not successfully use it
to run larger
applications such as Nginx with OpenSSL.
Iodine [58] successfully uses proﬁling to improve the
performance of DFT. Similarly, various works have presented
techniques to optimize dynamic ﬂow tracking [59, 60, 61, 62,
63]. We plan to investigate the application of these techniques
to improve the performance of our system.
b) Ensuring Data Integrity: DynPTA protects all memory
operations to sensitive objects with strong AES encryption.
Encryption is not enough though to fully guarantee data
integrity, as the attacker may be able to swap encrypted objects,
or corrupt existing values (altering protected data with arbitrary
values is still not possible, as the encryption key remains
inaccessible to the attacker) [33]. To that end, we plan to
extend our data protection mechanism with an HMAC-based
scheme to ensure data integrity.
c) Leaking Register Contents via Vector Register Sam-
pling: Vector Register Sampling [64] is a recent speculative
execution vulnerability that might allow partial data values to
be leaked from vector registers under certain microarchitectural
conditions. Although this vulnerability could affect the security
of our system, as we rely on vector registers to store the AES
round keys, it was patched via a microcode update [65].
IX. RELATED WORK
Data-only attacks were introduced more than a decade
ago [1], but have only recently started gaining popularity [2,
3, 4, 6, 66, 67]. On the other hand, transient execution attacks
such as Spectre [18] are more recent, and can leak secrets from
a process’s memory through microarchitectural side channels.
In the following, we discuss various types of defenses that can
be used against these attacks.
a) Memory Safety: Defenses based on memory safety
ensure that all pointers access their intended referents, thus
ensuring spatial safety. SoftBound [14] and CCured [68]
maintain bounds information for each pointer and ensure
spatial safety by performing bounds checks during all pointer
dereferences. AddressSanitizer (ASan) [69] and Baggy Bounds
Checking [15] associate metadata with each object and detect
out-of-bounds memory accesses. In general, defenses based on
memory safety use whole-program instrumentation to protect
all program data and require every memory instruction to be
instrumented with bounds checks. Therefore, they incur a very
high runtime overhead. Moreover, these techniques do not
protect against transient execution attacks.
DataShield [31] enforces memory safety at an object
granularity by partitioning process memory into sensitive and
non-sensitive regions. It then performs ﬁne-grained bounds
checks for sensitive pointers and coarse-grained bounds checks
for non-sensitive pointers. Similarly, ConfLLVM [70] partitions
the memory into private and public regions and ensures that
every pointer points to its own memory region. Moreover,
ConfLLVM requires the programmer to classify all arguments
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1930
of a function as public or private, whereas we only require
annotating the initial sensitive data. As these are software-based
defenses, they can protect against data leakage attacks, but not
against transient execution attacks.
b) Data Flow Integrity: Dataﬂow Integrity (DFI) [16]
ensures that all memory accesses adhere to valid data ﬂow
paths identiﬁed by static analysis. Therefore, any static analysis
imprecision results in false negatives. DFI requires every
memory instruction to be instrumented with software checks,
leading to high overhead (up to 104% for SPEC [71]).
Hardware-based DFI techniques [72, 73] have lower overhead,
but require custom hardware. Moreover, DFI cannot protect
against transient execution attacks.
c) Isolation-based Defenses: Many works rely on memory
isolation to protect security-critical data [30, 32, 42, 74, 75,
76, 77, 78]. Glamdring [32] moves all sensitive-annotated data
into SGX enclaves, and uses static dataﬂow analysis [79] and
static backward slicing [80] to transform all functions that
may access the sensitive data to use the appropriate SGX
entry and exit routines. ERIM [42] and LibMPK [81] provide
hardware-enforced isolation for sensitive code and data using
Intel Memory Protection Keys (MPK) [82]. However, Intel
MPK is vulnerable to transient execution attacks [7], therefore
these solutions cannot protect against them. Donky [83] is
a hardware-software codesign for the RISC-V [84] Ariane
CPU, offering strong in-process isolation based on memory
protection domains. The xMP [30] system relies on Xen [85]
to protect selective sensitive data. However, the programmer
has the burden of manually inserting the xMP domain switches,
making the process cumbersome and error-prone. Overall,
unlike DynPTA, which provides ﬁne-grained protection, these
isolation-based approaches provide page-level protection and
this requires refactoring the data layout.
Ginseng [74] ensures that sensitive data is always stored in
registers and relies on ARM TrustZone to protect against an
untrusted operating system. PT-rand [75] protects kernel page
tables by randomizing and hiding their locations.
For Android applications, FlexDroid [86] introduces an
isolation mechanism that provides ﬁne-grained access control
for third-party Android libraries. On the browser front, privilege
separation techniques such as Chrome’s Site Isolation [87] and
Firefox’s RLBox [88] are being widely deployed [89].
XOR, and was originally designed to defend against code
injection attacks. It thus cannot prevent data leakage, as the
memory-resident XOR keys can be leaked as well, and the
XOR transformation can be reversed. CoDaRR [96] extends
DSR to periodically rerandomize the masks used to provide
probabilistic guarantees against disclosure attacks, but suffers
from the same weaknesses as DSR due to the use of XOR.
HARD [97] is an ISA extension to the RISC-V architecture to
support DSR at the hardware level.
e) Defenses against Transient Execution Attacks: Ret-
poline [98] mitigates Spectre [18] by hardening all branch
instructions against speculative execution. ConTExT [99]
proposes a backwards-compatible architectural change that
mitigates transient execution attacks. SpecFuzz [100] performs
fuzzing to determine which branches are benign and which
can lead to speculative execution, and removes hardening from
the benign ones, thus lowering the overhead. SPECCFI [101]
proposes a hardware extension that uses CFI [102] to determine
whether speculative execution targets a legal destination or not.
Blade [103] stops the leakage of sensitive data via speculative
execution by cutting the dataﬂow (e.g., using memory fences)
from expressions that speculatively introduce secrets, to those
that leak them through the caches. Swivel [104] hardens
WebAssembly [105] applications against Spectre attacks.
The above defenses focus on hardening all or a subset of all
branches in a program, without considering whether speculative
execution might actually leak sensitive data. In comparison,
DynPTA focuses on preventing the leakage of only sensitive
data, obviating the need for the above mitigations.
X. CONCLUSION
DynPTA combines static and dynamic analysis to provide a
practical defense against data leakage attacks due to memory
disclosure or transient execution vulnerabilities. DynPTA
requires developers to just mark certain objects in the program’s
memory as sensitive, and automatically derives all sensitive
memory operations, which are then protected using encryption.
To ameliorate the inherent overapproximation of static pointer
analysis, DynPTA uses a scoped form of data ﬂow tracking that
maintains sensitivity labels and tracks their ﬂow over the set
of instructions identiﬁed by the pointer analysis. This allows
DynPTA to ensure the conﬁdentiality of sensitive data in real-
world applications with modest overhead. As part of our future
work, we plan to implement support for data integrity, and also
investigate further optimizations to our scoped DFT logic that
will reduce the runtime overhead even further.
ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers for their valuable
feedback, and our PC point of contact, Yajin Zhou, for helping us
revise our manuscript. We also thank Hamed Ghavamnia for his
valuable comments on an earlier draft of this paper. This work was
supported by the Ofﬁce of Naval Research (ONR) through award
N00014-17-1-2891, the National Science Foundation (NSF) through
award CNS-1749895, and the Defense Advanced Research Projects
Agency (DARPA) through award D18AP00045.
Various works have presented techniques to assist program
partitioning and privilege separation [21, 90, 91, 92, 93, 94].
These techniques cannot be easily applied to the problem
of tracking sensitive memory operations because they are
speciﬁc to privilege separation. PtrSplit [92] is a type-based
technique that allows the use of only intra-procedural analysis
instead of requiring global interprocedural analysis. However, it
assumes that void pointers are not used as function arguments.
Based on experience with codebases such as OpenSSL, this
assumption does not always hold.
d) In-memory Transformation: Defenses based on in-
memory transformation [33, 95] change the representation
of memory-resident objects using encryption. Data space
randomization [95] transforms in-memory data using simple
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1931
REFERENCES
[1] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer, “Non-control-
data attacks are realistic threats,” in Proceedings of the 14th USENIX
Security Symposium, August 2005.
[2] D. Moghimi, “Subverting without EIP,” https://moghimi.org/blog/
[3] F. Falcon, “Exploiting adobe ﬂash player in the era of control ﬂow
subverting-without-eip.html, 2014.
guard,” in Black Hat Europe, 2015.
[4] B. Sun, C. Xu, and S. Zhu, “The power of data-oriented attacks:
Bypassing memory mitigation using data-only exploitation,” in Black
Hat Asia, 2017.
[5] “The heartbleed bug,” https://heartbleed.com/, 2020.
[6] R. Rogowski, M. Morton, F. Li, K. Z. Snow, F. Monrose, and
M. Polychronakis, “Revisiting browser security in the modern era:
New data-only attacks and defenses,” in Proceedings of the 2nd IEEE
European Symposium on Security & Privacy (Euro S&P), April 2017.
[7] C. Canella, J. Van Bulck, M. Schwarz, M. Lipp, B. Von Berg, P. Ortner,
F. Piessens, D. Evtyushkin, and D. Gruss, “A systematic evaluation of
transient execution attacks and defenses,” in Proceedings of the 28th
USENIX Security Symposium, 2019, pp. 249–266.
[8] J. Voisin, “Spectre exploits in the ”wild”,” https://dustri.org/b/spectre-
exploits-in-the-wild.html, 2020.
[9] “Virus total: Spectre exploit”,” https://www.virustotal.com/gui/ﬁle/
6461d0988c835e91eb534757a9fa3ab35afe010bec7d5406d4dfb30ea767a62c/
detection, 2021.
[10] S. Rottger and A. Janc, “Leaky page: Spectre proof-of-concept for
Chrome browser,” https://leaky.page/, 2021.
[11] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro, “Preventing
the IEEE
memory error exploits with WIT,” in Proceedings of
Symposium on Security and Privacy (S&P), 2008, pp. 263–277.
[12] T. Jim, J. G. Morrisett, D. Grossman, M. W. Hicks, J. Cheney, and
Y. Wang, “Cyclone: A safe dialect of C,” in Proceedings of the USENIX