refer to as component requirements. Furthermore, an ADL should provide mod-
eling of non-functional properties (e.g. reliability, safety, performance, etc.) as-
sociated with components for V&V, simulation and analysis purposes. In order
to control evolution of components within a system, i.e., modiﬁcations of com-
ponent properties, the language should be able to support the evolution of the
system. An ADL can support the evolution by supporting subtyping of compo-
nent types as well as reﬁnement of component features.
2.2 Building Block: Connector
Connectors are abstractions of interactions, where the method to interact may
be of simple or highly complex nature. The nature may exclusively consist of
software (e.g. data ﬂows, control ﬂows, function calls and access to data), hard-
ware (e.g. wires) or a combination of the two (e.g. bus system). Connectors may
have interfaces, specifying interaction points which components or connectors
can be connected to. The behavior models of connectors which specify interac-
tion protocols, are here referred to as connectors semantics. Similar to compo-
nent semantics, connector semantics provide information for analysis and V&V
activities, where the information is based on interconnection and communica-
tion requirements/properties. Connectors that are encapsulated within a subset
of connector semantics and properties are here referred to as a connector type.
These types are provided, similar to component types, by ADLs to facilitate
modeling and understandability by reusable building blocks. Connector require-
ments assert interaction protocol properties by describing unacceptable borders.
Connectors should also be able to be modeled with non-functional properties,
which can not be derived from the connector semantics. As these interaction
protocol properties are modiﬁed according to the evolution, ADLs should be
able to support this evolution through subtyping and reﬁnement of connector
features.
2.3 Building Block: Conﬁguration
ADL conﬁgurations deﬁne how each building block (components and connectors) is
combined to form an architecture describing correct component connections, com-
ponent communications, interface compatibility and that the combined semantics
of the whole system result in correct system behavior. Since a system architecture
partly serves as a mutual communication blueprint among stakeholders, the under-
standability of speciﬁcations is of great importance. An ADL speciﬁcation should
describe the topological system with understandable syntax or/and graphical no-
tions, where an architecture conﬁguration can be understandable without knowing
Developing Dependable Software-Intensive Systems: AADL vs. EAST-ADL
107
components’ and connectors’ architectural details. Closely related to the under-
standability of an architecture conﬁguration is the architecture compositionality. In
order to provide an understandable architecture conﬁguration, it is important to be
able to describe the system at diﬀerent abstraction levels, by abstracting away un-
interesting details when concerning speciﬁc perspectives of the system. Such views
can be provided by ADLs that have the capability to model a system hierarchically,
where an architecture conﬁguration may be contained within a higher abstracted
component. As ADLs provide means for architectural description at diﬀerent lev-
els of abstraction, it is important to have traceability throughout the reﬁnement of
properties and relationships, from high levels of abstraction to the concrete system,
in order to bridge the gaps between them. Since ADLs partly are used to facilitate
development of large, complex and often highly heterogeneous systems, it is impor-
tant that ADLs can meet these heterogeneity and scalability problems by providing
possibilities to specify components and connectors described by external formal
languages, and to be able to handle large and growing systems. Evolvability, which
is closely related to scalability, does not only concern ADLs ability to accommodate
to new architectural building-blocks to be added, but does also concern how ADLs
can accommodate to incomplete architectural speciﬁcations, since it is unfeasible
to make all design decisions at once. Requirements and non-functional properties
of architectural conﬁgurations are not speciﬁc to individual components or connec-
tors, but may be extracted from or are depended upon component- or connector-
speciﬁc requirements and non-functional properties.
2.4 Vital Quality Attributes
Software-intensive systems are of highly complex nature with numerous criti-
cal quality-attributes. What software-intensive systems have in common is that
they often are operating in safety-critical and time-critical environments. Con-
sequently, two of the most important quality-attributes are dependability and
timing. Even though one of the fundamental results of architecture-based devel-
opment is increased dependability, as a result of abstracting complex systems
to understandable and manageable blueprints, an ADL for software-intensive
systems should explicitly provide means for dependability modeling. An ADL
should facilitate safety- and reliability-analysis, such as for example, provide
means for error modeling, reliability modeling, hazard analysis, risk analysis,
and structures of requirements. Another critical aspect of software-intensive sys-
tems is timing since these systems often have to meet real-time constraints. An
ADL should provide means to support modeling and analysis of timing require-
ments and properties, such as for example, end-to-end timing (sensor to actuator
timing), latency, task execution time and deadlines.
3 ADLs Under Comparison
We present an overview of both ADLs in order to provide a basis for the com-
parison in section 4.
108
A. Johnsen and K. Lundqvist
3.1 Overview of AADL
AADL (1.0) [7] [8] was released and published as a Society of Automotive En-
gineers (SAE) Standard AS5506 [2] in 2004. It is a textual and graphical lan-
guage used to model, specify and analyze software- and hardware-architectures
of real-time embedded systems. The AADL language is based on a component-
connector paradigm that describes components, component interfaces and the
interaction (connections) between components. Hence, the language captures
functional properties of the system, such as input and output through compo-
nent interfaces, as well as structural properties through conﬁgurations of com-
ponents and connectors. Furthermore, means to describe quality attributes are
also provided. A system is modeled as a hierarchy of components where compo-
nents that represent the application software are mapped onto the components
that represent the hardware platform. A component is modeled by a compo-
nent type and a component implementation. The component type speciﬁes the
external interfaces of the component in which other components can interact
through, while the component implementation speciﬁes the internal view of a
component, such as subcomponents and their connections, and must be coupled
to a component type.
Although a new version of AADL (AADLv2) [9] was published in 2009, the
survey is restricted to the version of the language released in 2004.
3.2 Overview of EAST-ADL
The EAST-ADL [3] [10] is a domain-speciﬁc ADL for modeling and development
of automotive electronic systems, where the language has modeling possibilities
to specify software components, hardware components, features, requirements,
variability and annotations to support analysis of the system. The language
supports modeling of electronic systems at four diﬀerent conceptual abstraction
levels, namely: Vehicle level, Analysis level, Design level and the Implementation
level. These abstraction levels reﬂect the amount of details in the architecture
where abstract features and functions modeled in higher abstraction levels are re-
alized to software and hardware components modeled in lower abstraction levels.
The language provides a complete traceability through the diﬀerent abstraction
levels. The basic vehicle features (e.g. wipers and breaks) of the electronic sys-
tems are captured at the Vehicle level, the highest level of abstraction. These
features are reﬁned in related functions at the Analysis level by abstract elements
representing software functions and devices interacting with the vehicle environ-
ment. The Design level represents a realization of the functionalities depicted at
the analysis level, where the level allows further decomposition or restructuring
of software functions and preliminary allocation of software elements. Speciﬁed
devices are realized at this level into hardware architectures, such as sensors
and actuators, including software for signal transformations. The lowest level of
abstraction, the Implementation level is deﬁned by using the Automotive Open
System Architecture (AUTOSAR) standard[11].
Developing Dependable Software-Intensive Systems: AADL vs. EAST-ADL
109
4 AADL vs. EAST-ADL
AADL and EAST-ADL are compared according to the comparison framework
given in section 2, where each architectural building block, their features and
vital quality-attributes are analyzed and discussed based on the AADL standard
speciﬁcation [2] and the EAST-ADL standard speciﬁcation [3].
4.1 Modeling of Components
Both AADL and EAST-ADL support modeling of all three component categories
(i.e. computational software, main hardware/execution platform and composi-
tion of software and hardware). EAST-ADL refer these components to features,
functions or components, depending on which conceptual abstraction level is
considered whereas AADL exclusively refer to components.
Interface. AADL support modeling of ﬁve diﬀerent types of component inter-
faces, or component features as referred to in the AADL standard. The diﬀerent
types of component interfaces are: ports, data access, bus access, subprogram or
parameter. Ports are interaction points of software components for transfer of
typed data and events. Data access interfaces are used to connect software com-
ponents to static data whereas bus access interfaces are used to interconnect