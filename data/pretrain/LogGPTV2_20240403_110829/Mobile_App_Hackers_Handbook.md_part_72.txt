minimizing the risk of cross-site scripting in WebBrowser and WebView components.
Using SSL/TLS for Network Communications
When WebBrowser and WebView components fetch and render data via HTTP (and not HTTPS), the risk always
exists of a suitably positioned attacker injecting data into the session. Such data could include JavaScript and
HTML that sets up a phishing attempt, or JavaScript that attempts to steal a user’s session cookies could be
introduced. Injected HTML and JavaScript could also attempt to exploit parsing vulnerabilities in the HTML and
JavaScript engines themselves.
As mentioned earlier in this chapter, using SSL/TLS sessions for all communications, whether traffic is deemed
to be sensitive or not, is advisable.
Disabling JavaScript
If a WebBrowser control does not specifically require JavaScript to provide the app’s functionality, not enabling it
is advisable. WebBrowser components actually require JavaScript to be explicitly enabled for JavaScript to be
executed in the first place.
JavaScript may be enabled via the IsScriptEnabled property, either programmatically or in the appropriate
XAML markup. The default is False, but copying and pasting code examples from sites such as StackOverflow
may result in some developers shipping apps that enable JavaScript without that particular intention.
If your app’s WebView or WebBrowser does not explicitly require JavaScript to be enabled, ensure that the app does
not contain the following (on a non–case-sensitive basis), in any XAML pages, or in its codebase:
IsScriptEnabled="True"
Setting the IsScriptEnabled property to False explicitly for your WebBrowser instances may be advisable, if you
don’t need JavaScript, in case Microsoft changes the default to True in the future. JavaScript can be explicitly
disabled in the XAML page markup that the WebBrowser component is contained within, i.e.,
Alternatively, the setting can be set programmatically on the object in question:
myWebBrowser.IsScriptEnabled="False"
Currently no documented way exists to disable JavaScript on a WebView object, so a developer who does not
require the use of JavaScript may consider using WebBrowser in place of WebView.
Safe Construction of Dynamic HTML and JavaScript
Some apps may construct HTML and JavaScript dynamically, often using data that is influenced or controlled by
an attacker. For example, consider the following code fragment:
string someHtml = "";
[ ... ]
myWebView.NavigateToString(someHtml);
In such situations, developers must ensure that attacker-influenced values being inserted into dynamically-
generated HTML and JavaScript code is sanitized so that attackers cannot control the syntax of the resulting
code.
To prevent many cases of malicious content from being injected into HTML/JavaScript strings, use the
HttpUtility.HtmlEncode() API:
string someHtml = "";
In such cases, the attacker’s string would be unable to break out of the src="..." parameter, thus preventing
scripting injection attacks.
Developers must also be careful in passing attacker-controlled values as JavaScript function parameters,
however. Consider the following case:
string someHtml = "";
In this case, an attacker could, for example, pass alert(1) in as attackerControlledString, which would result
in alert(1) being executed before control is passed to someFunction().
To prevent such cases, enclose the attacker-controlled value in double-quotes, and also escape it to prevent
escape from the double quotes:
string someHtml = "";
Avoiding Local Scripting Attacks
In the Chapter 11 we described how opening files in WebBrowser and WebView controls from the local filesystem
could result in the theft of files from the app’s sandbox. In particular, this is possible because the same-origin
policy allows access to documents that are from the same origin; in the context of a file loaded locally, this is the
local filesystem.
Therefore, avoiding the construction or offline saving of web pages for future loading from the filesystem is
advisable, unless you’re very careful in ensuring that their contents are safe.
Secure XML Parsing
It’s well understood in the computer security industry that the main risks around XML parsing is the resolution
of Document Type Definitions DTDs)—particularly DTDs that refer to external entities such as local files and
other URLs. External entity attacks can result in theft of files from the filesystem and may allow internal web
services to be hit via URLs being resolved as external entities; both cases are obviously undesirable from a
security perspective. Expanding DTDs can also result in denial-of-service (DoS) attacks, often called the “billion
laughs” attack.
As we discussed in some detail in the Chapter 11 section, “Attacking XML Parsing”, the standard API for XML
processing in Windows Phone apps is XDocument and associated classes.
Fortunately for the Windows Phone developer, XDocument objects do not parse DTDs by default, and as such, a
developer must manually set an attribute on the object to enable such parsing. This, however, is possibly more
common than expected, given that developers often copy and paste code from community contribution sites
such as StackOverflow.
Developers and security testers should ensure that apps do not have code similar to the following, which
enables DTD parsing:
var settings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Parse };
XmlReader xmlReader = XmlReader.Create("someFile.xml", settings);
// parse the XML file
XDocument xmlDoc = XDocument.Load(xmlReader);
Clearing Web Cache and Web Cookies
If a device is compromised, an attacker may be able to gain access to cookies and the web cache that was
acquired via the app’s web-based interactions. Compromising cookies may allow access to a user’s web session,
and compromising the cache may result in disclosure of sensitive information to the would-be attacker.
From a security perspective, clearing cookies and the web cache when they are no longer needed, such as when
an app’s screen lock is enabled, or when the user logs out of the app or the web interface it’s talking to, is
therefore good practice. We’ll discuss here how you can do that.
Clearing Cookies
Remove cookies from the device when they are no longer needed, because they may otherwise still be present in
the app’s INetCookies directory. The WebBrowser control allows cookies to be deleted using the
ClearCookiesAsync() API:
await new WebBrowser().ClearCookiesAsync();
Note that the ClearCookiesAsync() API may simply be called on any WebBrowser component instantiated by the
app, or statically, as in the previous code snippet.
There is also a way to delete cookies when WebView is being used:
Windows.Web.Http.Filters.HttpBaseProtocolFilter myFilter = new
Windows.Web.Http.Filters.HttpBaseProtocolFilter();
var cookieManager = myFilter.CookieManager;
HttpCookieCollection myCookieJar = cookieManager.GetCookies(new
Uri("https://www.targeturi.com"));
foreach (HttpCookie cookie in myCookieJar)
{
cookieManager.DeleteCookie(cookie);
}
Here https://www.targeturi.com is the URL for which cookies are to be deleted.
Clearing Web Cache
The most full-proof way of ensuring that none of your application’s web interactions result in cache storage to
its INetCache folder is to ensure that the web server being interacted with specifies appropriate non-caching
directives in its HTTP(S) responses. For example, the following headers in HTTP(S) responses should be
sufficient to prevent WebView, WebBrowser, WebRequest (and other such classes) from caching data from any
responses:
Cache-Control: no-store
Pragma: no-cache
The previous snippet represents our general advice for prevention of data caching.
When applications use a WebBrowser control, you can programmatically delete that WebBrowser’s cache, using the
ClearInternetCacheAsync() API. Refer to the API’s MSDN documentation at the following URL:
http://msdn.microsoft .com/library/windows/apps/jj571213(v=vs.105).aspx.
Unfortunately, at the time of writing, there is no documented way to programmatically clear a cache put in place
by use of a WebView. See the appropriate section at the following MSDN blog post:
http://blogs.msdn.com/b/wsdevsol/archive/2014/04/03/ten-things-you-need-to-know-about-webview-
_2d00_-an-update-for-windows-8.1.aspx#AN7.
Avoiding Native Code Bugs
Because native code does not have the safety features of the Common Language Runtime (CLR) to protect it,
Windows Phone applications written in native code (C, C++), or those calling into native modules, need to be
carefully written to avoid native code vulnerabilities.
Native code components containing such vulnerabilities as memory corruption bugs (heap overflows, stack
overflows, and so on), format string bugs, uninitialized variable use, and so on, may all fall prey to classic native
code attacks.
Developers should therefore review their native codebases for dangerous API misuse and other insecure coding
practices.
We recommend consulting the following resources for information on security coding guidelines for native code
development, which are provided by CERT: C secure coding guidelines at
https://www.securecoding.cert.org/confluence/display/seccode/CERT+C+Coding+Standard and C++ secure
coding guidelines at https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637.
We also recommend consulting Microsoft’s banned API list, which is offered as a C and C++ header file. You
may obtain the file directly via the following URL: http://download.microsoft.com/download/2/e/b/2ebac853-
63b7-49b4-b66f-9fd85f37c0f5/banned.h.
Consider inserting #include to place the file into your code for analysis purposes. The following resource
discusses how to use banned.h to analyze whether your codebase is misusing potentially dangerous APIs:
http://blogs.microsoft .com/cybertrust/2012/08/30/microsofts-free-security-tools-banned-h/.
Otherwise, you can manually analyze your app’s usage of APIs listed in banned.h to ensure no API misuse could
result in classic native code vulnerabilities.
Using Exploit Mitigation Features
As we already discussed in Chapter 10 and Chapter 11, Windows Phone supports several exploit mitigation
features, including:
/GS protections (stack cookies and other stack overflow protections such as variable reordering)
NXCOMPAT (DEP)
SafeSEH
/DYNAMICBASE (ASLR)
As per Visual Studio’s default settings, all of these are enabled on native binaries built from Visual Studio, hence
unless these settings have been changed, your application’s native components should have these. Having
exploit mitigation features significantly reduces the ease with which native code vulnerabilities may be
exploited in vulnerable apps. Enabling them on all native binaries that are part of your app is highly
recommended.
Microsoft released a useful tool named BinScope, available at http://www .microsoft.com/en-
gb/download/details.aspx?id=11910, for the purpose of analyzing native binaries to ensure that the
recommended exploit mitigation technologies are enabled on the binary in question.
We recommend that developers run BinScope on all native binaries distributed as part of their applications. In
any case, it appears that for Windows Phone 8.1 apps, Microsoft insists upon BinScope’s catalog of tests passing.
See the following resource for further details: http://msdn.microsoft.com/en-
us/library/windowsphone/develop/dn629257.aspx#binscope.
Summary
In this chapter, we’ve aimed to offer some key guidelines for implementing secure Windows Phone apps. We
recommend following the guidelines when trying to implement Windows Phone applications with security
requirements:
Encrypt all sensitive data, whether stored in databases, or other file formats.
Follow industry-standard cryptography practices, and preferably, use AES-256.
Apply sensible cryptography key management principles. For example, use PBKDF2, and enforce a
reasonably strict password complexity policy.
Use a secure random data source, when needed (i.e., RNGCryptoServiceProvider).
Attempt to wipe keys and passwords from memory, via a best-effort approach, when they are no longer
required.
Avoid SQL injection in apps that use SQLite-derived databases.
Implement secure network communications via SSL/TLS.
Take care to avoid cross-site scripting and script injection bugs.
Ensure that XML parsing doesn’t resolve DTDs, unless this functionality is specifically required by your app.
Try to clear web cache and cookies when they’re no longer needed.
Apply native code secure coding guidelines to avoid traditional bugs such as buffer overflows.
Build your native modules with exploit mitigation features enabled.
CHAPTER 14
Analyzing BlackBerry Applications
BlackBerry was the dominant smartphone platform for business in the early to mid-2000s. Although its
dominance has been in severe decline, you may still need to analyze applications for it at some time.
This chapter provides an introduction to the BlackBerry platforms, some of the security traits you need to be
aware of, and the tools required to get you into a position to analyze a BlackBerry application. We then discuss
some specific high-level analysis techniques for BlackBerry 10 apps. This material does not cover BlackBerry 10
Adobe AIR–based apps because support for them is deprecated in 10.3.1. For BlackBerry Legacy we provide a
condensed overview of the platform and analysis techniques.
Fundamentally, recognizing that BlackBerry apps (both Legacy and 10) are on the whole developed using
common technologies, such as Java, C/C++ (ELF), HTML5, and JavaScript is important, and as such
understanding the platform-specific aspects and tooling is important because most if not all of the language-
specific issues carry over from other platforms that use similar technologies.
Understanding BlackBerry Legacy
BlackBerry Legacy is the platform that is 7.x and earlier. This platform was in the market during BlackBerry's
dominant era in the SmartPhone market. Although it isn't the latest it does still continue to have strong
representation in certain subsectors and emerging markets. Due to this legacy coupled with representation in
certain high-security environments such as the government and financials services sectors, understanding how
to access apps is important.
Architecture, Security, and the Simulator
The BlackBerry Legacy platform is based on a lightweight, custom, real-time operating system (the BlackBerry
operating system, or BBOS) and Java Virtual Machine (JVM), which itself is custom although deemed
SUN/Oracle compatible. The BBOS runs on the application processor (AP) and provides the abstraction layer
between the JVM and the hardware.
The BlackBerry Legacy simulator is actually very close in terms of architecture and code to the JVM and BBOS
that run on the device. That is, the JVM is nearly identical and there are stubs for the BBOS APIs used by the
JVM, which instead of translating to real hardware are instead translated to either simulator-specific or
functionality corresponding to Microsoft Windows.
The notable differences between device and simulator are that although the device code is compiled for the
ARM CPU architecture, the simulator is compiled for the X86 CPU architecture. The simulator by virtue of its
purpose also provides a number of simulated hardware devices (GPS, cellular network, and so on) and the
ability to do certain operations such as not enforcing certain security controls found on the device. This
flexibility with these controls is very useful during development. However, these security controls cannot be
subverted on a real device, so verifying any vulnerability you discover in an app on a real device and not solely
the simulator is always worthwhile.
The security model of BlackBerry Legacy is entirely implemented within the JVM. All the high-level security
concepts such as app controls, encryption, private application storage mechanisms, code signing, and so on are
implemented there.
Apps and COD Files
BlackBerry Legacy apps are at their core Java based; however, unlike its desktop cousin, its apps are not stored
in JAR files but instead in COD files. These COD files are generated by a custom BlackBerry generator that takes
the compiled Java class files and converts them. The reason for this custom storage mechanism is not to
obfuscate or otherwise frustrate but for performance and space optimization. BlackBerry discusses why it uses a
custom file structure in the patent behind the COD format:
Java .class files may be archived (and optionally compressed) into a .jar file. However, .jar files are not
directly interpretable by the Java VM, and the .class files must be extracted (and decompressed, if
applicable) from the .jar file (and read into memory) in order for them to be linked, resolved, and
interpreted by the Java VM. Although .jar files comprising archived and compressed .class files are smaller
than the .class files themselves (and are therefore more suitable for transmission between communication
devices), storage space for the extracted (and decompressed, if applicable) .class files needs to be available
in the environment where the application is to be executed, so that the Java VM may access the .class files.
Consequently, a solution involving .jar files may not represent a savings in storage space.
−https://www.google.com/patents/WO2004051468A1
The benefit of the COD format is that files produced using it can be linked without the need to decompress
them. Also, optimization (with the exception of Just-In-Time compilation) is done on the comparably cheap PC
side during compilation and production of the COD files.
However, note that not all CODs are optimized and converted Java classes. Confusingly, some may actually be
zip files. This is why when analyzing BlackBerry Legacy apps that verifying the actual contents prior to starting
the analysis is important.
Aside from pure Java apps, BlackBerry also introduced WebWorks (HTML5 and JavaScript)–based apps.
WebWorks apps have a COD name but are standard zip files.
So when you see a COD, remember it might be
An optimized Java class, which requires custom tooling to reverse engineer as discussed later in this chapter
A zip file, which you can extract with common unzip utilities
Reverse Engineering COD Files
In this section we will review how to reverse-engineer the files that contain BlackBerry legacy apps. We will
walk through the process looking at the container types and the tools used to extract their contents.
Java COD Files
Due to the proprietary format used by non-zip format COD files, traditional Java class decompilation tools such
as JAD won't work. Instead, two open source projects help in reverse engineering COD files:
cod2jar (https://code.google.com/p/cod2jar/source/checkout)
coddec (http://dontstuffbeansupyournose.com/2009/02/19/disassembling- blackberry-apps-take-2/ and
the original at http://drbolsen.wordpress .com/2008/07/14/coddec-released/)
coddec was the first COD reverse engineering tool, originally developed by Dr. Bolsen and later updated by the
DontStuffBeansUpYourNoes team. However, it can at times be a little fragile. cod2jar is a Python-based
application and tends to yield results on COD files created with newer versions of the BlackBerry SDK.
Keep in mind that developers may try and obfuscate their code using tools such as ProGuard
(http://proguard.sourceforge.net/), or otherwise modify their COD's file structure to break these tools.
After the COD files you are interested in have been decompiled, you are then free to perform a code review as
you would any other Java applications.
Zip COD Files
You can rename zip-based COD files (where required; for example, typically in Microsoft Windows) and then
extract them with common zip archive utilities such as 7zip on Microsoft Windows or unzip on Linux and
similar.
Depending on the purpose of the zip, for example, WebWorks versus a sibling COD, the contents will vary.
Java Development Environment and JVM Interface
The Eclipse-based Java Development Environment (JDE) (http://developer
.blackberry.com/bbos/java/download/JDE/) is used to develop Java apps for BlackBerry Legacy. The JDE
communicates with the simulator and real device over the same JVM software interface. The simulator uses a