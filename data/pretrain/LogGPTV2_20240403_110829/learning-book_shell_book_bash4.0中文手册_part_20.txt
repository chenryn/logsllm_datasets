在历史中向“前”移动得到下一个命令。
beginning=of-history (M-)
移动到历史的最后一行，即当前正在输入的行。
reverse=search-history ( [C-)
从当前行开始向后搜索，如有必要则向“上"移动。这是增量搜索。
forward=search-history ([Cs)
从当前行开始向前搜索，如有必要则向“下”移动。这是增量搜索。
non=increnental-reverse=search-history ([M-p])
从当前行开始向前搜索，如有必要则向“上"移
动：移动时，使用非增量搜索搜索查找用户提供的字符串。
non=increnental-foruard-search-history (M-n)
从当前行开始向后搜索，如有必要则向“下"移
动：移动时，使用非增量搜索搜索查找用户提供的字符串。
history=search-forvard
在历史中当前行的开头和标志点之间向前搜索字符串。这是非增量搜索。这
个命令默认没有绑定。
history-search-backuard
在历史中当前行的开头和标志点之间向后搜索字符申。这是非增量搜索。
这个命令默认没有绑定。
yank=nth=arg (M-C-y)
在标志点上插入前一个命令的第一个参数（通常是前一行的第二个单词）.如
果有参数n，插入前
一个命令的第n个单词（前一行的单词是从0开始数的）。
负的参数将插入从前
一个命令的结尾开始的第n个单词。计算n的值以后，就会截取对应的参数，就好像指定了历史扩
展"!n”一样。
p81
目录
BASH 中文文
---
## Page 93
第八章编辑命令行
58.4可以绑定的READLINE命令
yank-1ast-arg（M或M）
插入前一个命令的最后一个参数（前一行的最后一个单词）。如果有
参数，其行为就和yank-nth-arg完全一样。连续调用yank-last=arg会在历史中向后移动，并依
次插入每一行的最后一个参数。最后一个参数是通过历史扩展机制取出来的，就好像指定了历史扩
展“！$”一样。
8.4.3
Readline的文本修改命令
delete=char([C-d）
删除标志点处的字符。如果标志点在行的开头，行中没有字符，并且最后输入的
字符没有绑定到delete=char，则返回EDF。
ackward=delete=char (Rubout])
删除光标后面的字符，带有数值参数表示剪切这个字符，而不是册
除。
forward-backward-delete-char
剩除光标下面的字符：如果光标在行的结尾则删除光标后面的字符。
这个命令默认没有绑定。
quoted-insert（aq或C）
按字面意思插入后面输入的一个字符。例如，这样可以用来输入
q等键序列。
Belf-insert(、回·、、·)
插入这些字符本身。
transpose=chars ([C-t)
把光标前的字符向前拖动到光标下的字符上，同时把光标向前移动。如果插
入点在行的结尾，则交换行中最后两个字符的位置。负的参数不起作用。
transpose-vords (M-t])
把标志点前的单词拖过标志点后的单词，并把标志点移过这个单词。如果插
入点在行的结尾，则交换行中最后两个单词的位置。
upcase=word ([M-u] )
把当前（或下一个）单词变为大写。如果有负的参数，则把前一个单词变为大写，
但不移动光标。
douncase=vord (M-I)
把当前（或下一个）单词变为小写，如果有负的参数，则把前一个单词变为小
写，但不移动光标。
capitalize=vord ([M-)
把当前（或下一个）单词变为首字母大写，如果有负的参数，则把前一个单
词首字母变为小写，但不移动光标。
overvrite-mode
切换覆盖模式。如果指定正数作为参数，则切换到覆盖模式：如果指定非正数参数，
则切换到插入模式。这个命令只影响emacs模式，而vi模式有不同的覆盖方法。每次启动Readline
时都进入插入模式。在覆盖模式中，绑定到Belf-insert的字符会覆盖标志点后的字符，而不是把文
本向右推动。绑定到backward-delete-char的字符会把标志点前的字符用空格替换。这个命令默认
没有绑定。
8.4.4
删除和复制
kill-1ine ( [Ck)
删除从标志点开始到行结尾的文本。
backward=kill=1ine ([C-x Rubout])
向后删除到行的开头。
unix=1ine=discard ( [C-u)
从光标位置向后删除到当前行的开始。
kill-vhole-line
删除当前行中的所有字符，不管标志点在哪。这个命令默认没有绑定。
BASH 中文文档
目录
p82
---
## Page 94
8.4可以绑定的READLINE命令
第八章编辑命令行
kill=vord ( M-d])
从标志点删除到当前单词的结尾：如果在单词之间，则删除到下一个单词的结尾。
单词界限和forward=word相同。
backward-ki11-vord ( [M-DEL] )
删除标志点后的单词。单词界限和backuard-uord相同。
shell-kill=uord
从标志点剩除到当前单词的结尾：如果在单词之间，则删除到下一个单词的结尾。单
词界限和ghell-forvard=vord 相同。
backward-kill=vord
删除标志点后的单词。单词界限和shel1-backvard-uord 相同.[4l
unix=vord=rubout (C-w)
删除标志点后的单词，用空格作为单词的界限。删除后的文本保存在删除
环中
unix-filenane-rubout
删除标志点后的单词，用空格和斜杠作为单词的界限。删除后的文本保存在删
除环中。
delete-horizontal-space
删除标志点左右的空格和制表符，这个命令默认没有绑定，
kill-region
删除当前区域中的文本。这个命令默认没有绑定。
copy-region-as-ki11
把区域中的文本复制到删除环缓存中，以便可以立即粘贴。这个命令默认没有绑
定。
copy-backvard-vord
把标志点前的单词复制到删除环缓存中，单词界限和backward-word相同。这个
命令默认没有绑定，
copy-forward-word
把标志点后的单词复制到删除环缓存中，单词界限和forward-word相同。这个命
令默认没有绑定。
yank (Cy)
把删除环顶端的文本复制到标志点所在的缓存中。
yank=pop (M-y ）
轮询删除环并复制新的顶端文本。只能在yank或yank-pop之后使用这个命令，
8.4.5
指定数字参数
digit=argument （Mo] .[M-I、-.-[M-- )
把这个数字加入到已收集数字的参数中，或者开始一个
新的数字参数。M开始一个负的参数。
universal=argunent
这是另外一种指定数字的方法。如果这个命令后面有一个或多个数字，数字前面
可能还有负号，这些数字就是命令的参数。如果这个命令后面是数字，则再次执行这个命令就会结束
数字参数，否则就忽略这个命令，特别的，如果紧接着这个命令后的字符既不是数字也不是负号，则
后面的命令参数就扩大四倍。参数初始值是一，所以第一次执行这个命令时参数就变成四，第二次就
变成十六，以此类推，这个命令默认没有绑定。
H这和前面的描述相冲突，应该是原文中的错误，这里可能是ehel1-bsckward-xi11-prd，但是Realline中好像没有这个命令。
以前的文档中没有这句话。
事实上删除命令一般都会把删除的文本保存在删除环中。如果不这样，一般翻译成“药切”。
同即依次使用下一条文本，把原顶行移动末尾，同时把原第二行移动项端：这样，删除环中各行文本好像在一个有方向的环中。
++++++++++++++++++++++++++++++++++++++++++*
p83
目录
BASH 中文文
---
## Page 95
第八章编辑命令行
58.4可以绑定的READLINE命令
$8.4.6
补全命令]
conplete (TAB])
试图补全标志点前的文本，实际进行的补全是应用程序相关的，补全时，Bash依次
把文本当作变量（如果以"s"开头）、或用户名（如果以"-"开头）、或主机名（如果以""开头）、或命令
名（包括别名和函数），如果这些都不匹配，则试图进行文件名补全。
possible=conpletions ([M-7])
列出能够补全标志点前的条目。
insert=conpletions ([M*)
把pogsible=completiong命令能生成的所有文本条目插入到标志点
前。
enu-complete
和complete类似，但是把要补全的文本替换成补全列表中的一个条目。连续执行
menu-conplete会在补全列表中依次前进，每次都插入当前条目.前进到补全列表的结尾时就响
铃（取决于bell=Btyle的设置）并恢复原来的文本。参数n表示在补全列表中向前移动n步：负参
数表示向后移动。这个命令本来是要绑定到TAB键，但默认没有绑定。
delete-char=or-list
如果不是在行的结尾或开头则删除光标下面的字符（和delete=char一样）。如
果在行的结尾，其行为就和poBaible-completione完全一样。这个命令默认没有绑定。
conplete=filenane ( [M-7)
试图对标志点前的文本进行文件名补全。
possible-filenane=completions (C-x )
把标志点前的文本当成文件名并列出可以补全的条
目。
conplete=usernane (M-)
把标志点前的文本当成用户名并试图进行补全。
possible-usernane=completions (C-x)
把标志点前的文本当成用户名并列出可以补全的条
目。
conplete-variable ( M-s] )
把标志点前的文本当成shell变量并试图进行补全。
possible=variable=completions (C-x)
把标志点前的文本当成shell变量并列出可以补全的条
目
conplete=hostnane (M-@])
把标志点前的文本当成主机名并试图进行补全。
possible-hostnane=completions (C-x)
把标志点前的文本当成主机名并列出可以补全的条
目。
conplete=conmand ([M-])
把标志点前的文本当成命令名并试图进行补全。进行命令名补全时会依次
使用别名、保留字、shell函数、shell 内部命令，最后是可执行文件名。
把标志点前的文本当成命令名并列出可以补全的条目。
dynamic=conplete-history ( [M-TAB )
把标志点前的文本与历史记录里的文本行进行比较以寻找匹配
并试图进行补全。
dabbrev=expand
把标志点前的文本与历史记录里的文本行进行比较以寻找匹配并试图列出可以进行补
全的条目菜单。
conplete=into=braces (M-[)
进行文件名补全，把可以补全的条目列表放在大括号之间，以使这个
列表可以在shell中使用（参见53.5.1[大括号扩展]，p15）。
凹原文中，本节标题是“让Resdine为你输入”，但多处对本节的引用却认为标题是*补全命令”，所以这里做了改动。
BASH 中文文档
目录
p84
---
## Page 96
8.4可以绑定的READLINE命令
第八章编辑命令行
§ 8.4.7
键盘宏定义
start-kbd-nacro (Cx)
开始把输入的字符保存在当前的键盘宏中。
end-kbd-macro (Cx[)
结束把输入的字符保存在当前的键盘宏中，并保存键盘宏定义。
call-last-kbd-nacro（Cx）
重新执行刚刚定义的键盘宏，使得键盘宏的文本和用键盘输入的
一样。
§ 8.4.8
其它功能
re-read-init=file (CxC-)
读入inputrc文件的内容，并把其中任何绑定和变量赋值合并到当
前会话中。
abort (C)
中止当前编辑的命令并响铃（取决于bell-Btyle的配置）。
do=uppercase=version (M-a、M-b、M-x
)
如果Meta化的字符是小写的，就运行对应大写
字母绑定的命令。
prefix=meta (EsC])
把下一个字符Meta化.这是为没有Meta键的键盘准备的.键入ESCf就
等价于输入M
undo（或）
增量撤销，可以分别对每行进行。
revert-1ine (M-)