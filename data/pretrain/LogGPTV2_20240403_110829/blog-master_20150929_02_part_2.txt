consoleHandler(DWORD dwCtrlType)  
{  
        char            errbuf[256];  
        if (dwCtrlType == CTRL_C_EVENT ||  
                dwCtrlType == CTRL_BREAK_EVENT)  
        {  
                /*  
                 * Can't longjmp here, because we are in wrong thread :-(  
                 */  
                /* set cancel flag to stop any long-running loops */  
                cancel_pressed = true;  
                /* and send QueryCancel if we are processing a database query */  
                EnterCriticalSection(&cancelConnLock);  
                if (cancelConn != NULL)  
                {  
                        if (PQcancel(cancelConn, errbuf, sizeof(errbuf)))  
                                write_stderr("Cancel request sent\n");  
                        else  
                        {  
                                write_stderr("Could not send cancel request: ");  
                                write_stderr(errbuf);  
                        }  
                }  
                LeaveCriticalSection(&cancelConnLock);  
                return TRUE;  
        }  
        else  
                /* Return FALSE for any signals not being handled */  
                return FALSE;  
}  
```  
src/interfaces/libpq/fe-connect.c  
```  
/*  
 * PQcancel and PQrequestCancel: attempt to request cancellation of the  
 * current operation.  
 *  
 * The return value is TRUE if the cancel request was successfully  
 * dispatched, FALSE if not (in which case an error message is available).  
 * Note: successful dispatch is no guarantee that there will be any effect at  
 * the backend.  The application must read the operation result as usual.  
 *  
 * CAUTION: we want this routine to be safely callable from a signal handler  
 * (for example, an application might want to call it in a SIGINT handler).  
 * This means we cannot use any C library routine that might be non-reentrant.  
 * malloc/free are often non-reentrant, and anything that might call them is  
 * just as dangerous.  We avoid sprintf here for that reason.  Building up  
 * error messages with strcpy/strcat is tedious but should be quite safe.  
 * We also save/restore errno in case the signal handler support doesn't.  
 *  
 * internal_cancel() is an internal helper function to make code-sharing  
 * between the two versions of the cancel function possible.  
 */  
static int  
internal_cancel(SockAddr *raddr, int be_pid, int be_key,  
                                char *errbuf, int errbufsize)  
{  
        int                     save_errno = SOCK_ERRNO;  
        pgsocket        tmpsock = PGINVALID_SOCKET;  
        char            sebuf[256];  
        int                     maxlen;  
        struct  
        {  
                uint32          packetlen;  
                CancelRequestPacket cp;  
        }                       crp;  
        /*  
         * We need to open a temporary connection to the postmaster. Do this with  
         * only kernel calls.  
         */  
        if ((tmpsock = socket(raddr->addr.ss_family, SOCK_STREAM, 0)) == PGINVALID_SOCKET)  
        {  
                strlcpy(errbuf, "PQcancel() -- socket() failed: ", errbufsize);  
                goto cancel_errReturn;  
        }  
retry3:  
        if (connect(tmpsock, (struct sockaddr *) & raddr->addr,  
                                raddr->salen) = 0)  
        {  
                strncat(errbuf, SOCK_STRERROR(SOCK_ERRNO, sebuf, sizeof(sebuf)),  
                                maxlen);  
                strcat(errbuf, "\n");  
        }  
        if (tmpsock != PGINVALID_SOCKET)  
                closesocket(tmpsock);  
        SOCK_ERRNO_SET(save_errno);  
        return FALSE;  
}  
```  
判断连接数是否超出，给系统释放sock预留了一些，所以是两倍的(连接数+worker processes+1)。  
```  
/*  
 * MaxLivePostmasterChildren  
 *  
 * This reports the number of entries needed in per-child-process arrays  
 * (the PMChildFlags array, and if EXEC_BACKEND the ShmemBackendArray).  
 * These arrays include regular backends, autovac workers, walsenders  
 * and background workers, but not special children nor dead_end children.  
 * This allows the arrays to have a fixed maximum size, to wit the same  
 * too-many-children limit enforced by canAcceptConnections().  The exact value  
 * isn't too critical as long as it's more than MaxBackends.  
 */  
int  
MaxLivePostmasterChildren(void)  
{  
        return 2 * (MaxConnections + autovacuum_max_workers + 1 +  
                                max_worker_processes);  
}  
```  
是否允许连接  
```  
static CAC_state  
canAcceptConnections(void)  
{  
        CAC_state       result = CAC_OK;  
        /*  
         * Can't start backends when in startup/shutdown/inconsistent recovery  
         * state.  
         *  
         * In state PM_WAIT_BACKUP only superusers can connect (this must be  
         * allowed so that a superuser can end online backup mode); we return  
         * CAC_WAITBACKUP code to indicate that this must be checked later. Note  
         * that neither CAC_OK nor CAC_WAITBACKUP can safely be returned until we  
         * have checked for too many children.  
         */  
        if (pmState != PM_RUN)  
        {  
                if (pmState == PM_WAIT_BACKUP)  
                        result = CAC_WAITBACKUP;        /* allow superusers only */  
                else if (Shutdown > NoShutdown)  
                        return CAC_SHUTDOWN;    /* shutdown is pending */  
                else if (!FatalError &&  
                                 (pmState == PM_STARTUP ||  
                                  pmState == PM_RECOVERY))  
                        return CAC_STARTUP; /* normal startup */  
                else if (!FatalError &&  
                                 pmState == PM_HOT_STANDBY)  
                        result = CAC_OK;        /* connection OK during hot standby */  
                else  
                        return CAC_RECOVERY;    /* else must be crash recovery */  
        }  
        /*  
         * Don't start too many children.  
         *  
         * We allow more connections than we can have backends here because some  
         * might still be authenticating; they might fail auth, or some existing  
         * backend might exit before the auth cycle is completed. The exact  
         * MaxBackends limit is enforced when a new backend tries to join the  
         * shared-inval backend array.  
         *  
         * The limit here must match the sizes of the per-child-process arrays;  
         * see comments for MaxLivePostmasterChildren().  
         */  
        if (CountChildren(BACKEND_TYPE_ALL) >= MaxLivePostmasterChildren())  
                result = CAC_TOOMANY;  
        return result;  
}  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")