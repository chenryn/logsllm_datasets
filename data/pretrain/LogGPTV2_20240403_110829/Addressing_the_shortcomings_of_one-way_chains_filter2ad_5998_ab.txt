4. APPLICATION TO MULTICAST
COMMUNICATION
One-way hash chains have been exploited in multicast
communications (e.g., in TESLA [19]) to achieve eﬃcient
source authentication and data conﬁdentiality. However,
the nature of multicast communication is a group commu-
nication where the data transmitted by a member (broad-
caster) should be available to the members of that group
only while ensuring source authentication and data conﬁ-
dentiality. For example, in TESLA, these properties are
achieved with the help of one-way hash chain under the as-
sumption that group members are loosely time-synchronized
with the broadcaster. Another more practical approach for
secure group communication is using “Key Graphs” [22] that
provides a mechanism to dynamically add (join group) and
delete (leave group) users from a group. This approach,
also called LKH (Logical Key Hierarchy), works under the
assumption that users are honest and there exists one or
more trusted key management servers that act (update keys
in the LKH) on each join or leave operation in the group. In
[10], LKH is shown to be prone to session disruption, session
hijack, replay attacks and had been shown robust against
these attacks using values of one-way hash chain as values
for the auxiliary key nodes in LKH setup. In this section,
we brieﬂy review this proposal [10], its drawbacks, and the
necessity of chameleon chains in lieu of traditional SHA-1
based one-way chains. Note that, application to LKH setup
is just one of the applications of our construction and it
can stand a great enabler in a variety of other applications
that demand one-way (unbounded) chains with backward
secrecy.
In the framework proposed for secure group communica-
tion (key-oriented setup, i.e., LKH) [22], a secure group is
denoted by a triple (U, K, R) where U denotes a set of
users, K a set of keys held by the users, and R ⊂ U K
a user-key relation which speciﬁes keys held by each user in
U . Each user is given a subset of keys which includes user’s
individual key, a group key, and sub-group keys based on
the conﬁguration of the LKH. The set K is maintained (up-
dated upon each join/leave) by the group administrator i.e.,
root node of LKH. However, this framework is susceptible
to attacks brought forward in [10] and can be made resistant
against these attacks by making auxiliary keys self veriﬁable
with the help of one-way hash chain values as keys.
Herein, we brieﬂy present the re-keying mechanism in
: auxiliary keys 
: session key
: private keys 
level 0
level 1
k0,j0
c
height 3
k1,j1
k2,j2
level 2
k3,j3
k4,j4
k5,j5
k6,j6
u1 u2
u3
u4
u5
u6
u7
u8
Figure 3: LKH setup and notations

, where j 
LKH setup that uses one-way hash chain values as keys for
auxiliary nodes. Therefore, the auxiliary key for node i is
ki,ji where ji keeps track of index of one-way chain assigned
to node i. On gth re-keying, the key of the ith auxiliary node
will change to ki,ji
i = g. The anchors of the chains
used for auxiliary nodes, are provided to appropriate users
by the group administrator through a secure channel as in
original LKH protocol [22]. With the help of Figure 3, and
Table 1, we show a leave operation under the LKH setup
described in [10]. Figure 3, shows a LKH setup for U =
{u1, .., u8}, controlled by group administrator c. The leaf
nodes of the tree are the users belonging to U . Each user has
to store the keys that are on the path from itself (leaf-node)
to the root. Let kuz be the a key shared by the user uz with
the center. A communication message p ﬂowing from c to u
is shown as; c → u : p. Table 1, gives sequence of messages
broadcasted by c to evict user u1 from the secure group. We
employ following notations; {string}key indicates that, the
message “string” is encrypted using symmetric-key encryp-
tion and key “key”.
M essage1 is broadcasted for the users of the right sub-
tree and contains the new session key k0,j0+1 encrypted with
k2,j2 . M essage2 and M essage3 are used to change the
old keys k1,j1 , k3,j3 that the user u1 shared with the users
u2, u3, u4.
As already mentioned, the classical re-keying protocol is
subject to attacks that are pointed out in [10], and these
highlighted attacks are addressed using self-veriﬁable keys
(i.e., one-way hash chain values as auxiliary keys). However,
two issues still stand: 1) overcoming the ﬁnite-ness of the
traditional one-way hash chains, and 2) enforcing backward
secrecy.
Indeed, in [10], using the Lamport’s scheme, if a
new user receives key ki, then the user can locally compute
all the previously generated values of the hash chain and
can decrypt the previously communicated data within the
secure group, thus demanding backward conﬁdentiality to
the communication. This justiﬁes the need for our one-way
chain construction. We show the above re-keying protocol
using chameleon one-way chains.
To set up the secure group using chameleon one-way
chains, the center c computes the keys ki,ji = CHR(mji , rji )
for all auxiliary nodes in the setup. Let k0,j0 be the session
key of the group. Then, the group administrator, c, dis-
tributes these keys to appropriate users (that is, to the users
that include the auxiliary node on their path to the root of
the tree). This initial key distribution is done in a secure
fashion, as done in [22, 23]. Let us analyze the re-keying
under this setup. Assume user u1 needs to be removed from
the secure group. The center needs to renew the entire set
of keys that are on the path between u1 and the root. The
internal details of chameleon chain while performing renewal
of auxiliary key ki,ji to ki,ji+1 are enumerated below.
• Sender (Center):
1. generates a new key ki,ji+1 such that ki,ji+1 =
CHR(mji+1, rji+1) and mji = mji+1, rji = rji+1
2. chooses sji+1, using the trapdoor collision prop-
erty, such that ki,ji = CHR(ki,ji+1, sji+1),
3. sends the re-keying messages (e.g., as enumerated
in Table 2.)
Message 1 -
Message 2 -
Message 3 -
c → u5, u6, u7, u8 : {k0,j0 +1}k2,j2
c → u3, u4 : {k1,j1 +1}k4,j4
c → u2 : {k3,j3 +1}ku2 , {k1,j1+1}k3,j3 +1 , {k0,j0 +1}k1,j1 +1
, {k0,j0 +1}k1,j1 +1
Table 1: Eviction of u1 under key-oriented protocol
Message 1 -
Message 2 -
Message 3 -
c → u5, u6, u7, u8 : {k0,j0 +1, sj0+1}k2,j2
c → u3, u4 : {k1,j1+1, sj1+1}k4,j4
c → u2 : {k3,j3+1, sj3+1}ku2 , {k1,j1 +1, sj1+1}k3,j3 +1 , {k0,j0 +1, sj0+1}k1,j1 +1
, {k0,j0+1, sj0+1}k1,j1 +1
Table 2: Re-keying steps for eliminating u1 in LKH with chameleon one-way chains
• Receiver:
1. receives the re-keying message,
2. decrypts the message containing the new keys us-
ing the appropriate keys, according to the LKH
setup.
3. checks for each newly received key ki,ji+1, if the
If
new key veriﬁes ki,ji = CHR(ki,ji+1, sji+1).
the match succeeds, the new key ki,ji+1 is au-
thentic.
Our solution for secure group communications overcomes
the limitations arising in [10]. In general, our construction
provides the following additional properties for the applica-
tions that use traditional one-way chains: backward secrecy,
key authenticity, unbounded chain with constant storage
and computation requirement, and no need of even loose
synchronization between the sender and the receivers. Thus,
relieving the group manager from tracking one-way chains
for each auxiliary key in the setup. One should also note
that, re-keying could be carried out even when there are no
join/leave operations in the setup, to desist cryptanalytic
attacks [1].
5. EXPERIMENTAL ANALYSIS
In this section, we argue that the proposed scheme is vi-
able and oﬀers good trade-oﬀ of computation between sender
and receiver of the chain. Before that, we shall discuss the
environment under which we carried our experiments, pro-
vide the results and discuss the suitability of our approach
to a class of applications.
Experimental Setup: The implementation is carried out on
GNU/Linux (i486) platform with gcc-3.3.5, OpenSSL 0.9.7e
library for cryptographic primitives (without any external
cryptographic acceleration) and numerical analysis. To get
a fair computational estimation, we did not use any code
optimization of gcc while building our executables.
5.1 Approach to Compute Execution Time
Various approaches are possible to audit the process exe-
cution time. We employed the method of tracking CPU cy-
cles consumed during execution of a function of our interest.
The experiments are carried out on an AMD 750MHz ma-
chine, that complies IA32 architecture (which provides cycle
counter; a 64-bit, unsigned number). The IA32 counter is
accessed with the rdtsc (read time stamp counter) instruc-
tion. This instruction takes no arguments. It sets register
%edx to the high-order 32 bits of the counter and register
%eax to the low-order 32 bits. Based on this methodology, a
pair of functions are integrated with our code that allows us
to measure the total number of cycles that elapse between
any two time points:
#include "clock.h"
void start_counter(); /* Starts the counter */
double get_counter(); /* Returns: Number of cycles
since last call to
start_counter */
To verify the precision of this approach we marked the
counter before and after sleep(sleeptime); function call
(where sleeptime equals to one). We obtained 756,154,624.0
as return value (i.e., 756.2 MHz). We run each function of
our interest for 101 times and discarded the ﬁrst value of exe-
cution time in favor of cache warming process. Furthermore,
results are gathered in run-level 1; to minimize interference
from other processes. To plot all the results into graphs
with common scale, we introduced dummy 101st and 102nd
entries in our results with values equal to -1 and 200,000,000
respectively.
5.2 Comparative Analysis
We implemented Chameleon scheme with three diﬀerent
methods, namely: Simple Factorization (SF), Discrete Log-
arithm (DL) (both from [15]), and Advanced Factorization
(AF) [21]. Implementation of these schemes can be catego-
rized into two phases: Hash Generation (HG) and Finding
Collision (FC). These schemes produce hash of length 160-
bits. Our results are summarized in Figure 4, and Table 3.
The results provided in Table 3, for chameleon implementa-
tions, are the averages taken over 100 runs each.
Lamport scheme (SHA-1) is realized using OpenSSL EVP
library, and gives 160-bit digest as value of intermediate unit
of the one-way chain. The average execution cost for a single
SHA-1 hash generation is reported in Table 3.
It would be inappropriate to compare the computational
cost for generating one unit value of one-way chain in our
construction and SHA-1 based construction, because our
construction has constant storage and computational costs
due to the unidirectional propagation of its generation and
spending (cf. ﬁgure 1). While, SHA-1 approach wins over
our approach using storage versus computation trade-oﬀs.
To normalize the comparison, we assess both schemes in
Table 3 with constant storage requirement and comparing
them based on their pure computational costs. That means
for a SHA-1 chain of length 1000, the sender of the chain
can store only the seed value of the chain and its associated

Chameleon
SF
DL
AF
scheme Hash Gen. Find Collision
14.375 ms
46.503 ms
Hash Gen. Find Collision Hash Gen. Find Collision
140.881 ms
56.139 ms
0.887 ms
0.720 ms
SHA-1 based
scheme
the average cost (for the sender) to perform authentication using a chain
with 5000 elements = ( 5000(5000+1)
2
0.0322)/5000 = 80.516 ms,
where, 0.0322 ms is the cost of one SHA-1 hash
Table 3: Comparative analysis of chameleon and SHA-1 chains based on their computational cost
 2e+08
 1.5e+08
 1e+08
 5e+07
 0
-5e+07
 0
 2e+08
 1.5e+08
 1e+08
 5e+07
 0
-5e+07
 0
 2e+08
 1.5e+08
 1e+08
 5e+07
 0
l
)
s
e
c
y
c
U
P
C
(
e
m
i
t
l
)
s
e
c
y
c
U
P
C
(
e
m
i
t
l
)
s
e
c
y
c
U
P
C
(
e
m
i
t
Simple Factorization (Hash Computation, Finding Collision)
Hash Gen. (HG)
average of HG
Finding Collision (FC)
(avg. 35,163,499)
(avg. 10,870,368)
 20
 40
 60
chain length
 80
 100
 120
Discrete Logarithm (Hash Computation, Finding Collision)
Hash Gen. (HG)
average of HG
Finding Collision (FC)
(avg. 106,528,303)
(avg. 671,074)