    char s[10][10] = {
        "",
        "eax",
        "ebx",
        "ecx",
        "edx",
        "esi"
    };
    int main(main) 
    {
        int idx = 0, eip = 0xAF18F0;
        t_disasm da = { 0 };
        da.code_format = 0;
        da.lowercase = 0;
        da.ideal = 0;
        da.putdefseg = 0;
        for (int idx = 0; idx 
    #include "defs.h"
    int swap_data[36];
    unsigned char encode_data[36];
    unsigned char input_data[36] = "c4ca4238a0b923820dcc509a6f75849b";
    unsigned char tmp_data[36];
    unsigned char data[36];
    char aBier[] = "Bier";
    void encode()
    {
        int v0; // eax
        int i; // ecx
        int j; // ecx
        int v3; // ebx
        int v4; // edx
        int k; // ecx
        char result; // al
        int l; // ecx
        v0 = 0;
        for (i = 0; i > 5) | (8 * (encode_data[k] & 0x1F));
        result = tmp_data[0];
        data[0] = tmp_data[0];
        for (l = 1; l > 5 | (8 * (encode_data[i] & 0x1F)) == data[i])
    swap_data = list(range(32))
    t = 0
    for i in range(32):
        t = (t + 0x11) & 0x1F
        swap_data[i] = t
    for i in range(0, 32, 2):
        v3 = swap_data[i]
        v4 = swap_data[i + 1]
        solver.add(encode_data[v3] == input_data[v4])
        solver.add(encode_data[v4] == input_data[v3])
    solver.check()
    res = solver.model()
    data = ''.join(chr(res[input_data[i]].as_long()) for i in range(32))
    print(data)
## Childre-300
###  双进程保护
这道题就是典型的双进程保护（Debug Blocker）
双进程保护，实际上是程序本身作为一个进程或一个调试器，并且在调试模式下运行自身程序。所以这种保护通常就会存在两个进程。
这种程序的技术特点是
1.无法被调试，因为程序本身也是一个调试器。我们又知道一般情况下一个程序只能被一个调试器所调试，如果他的程序先抢占作为了调试器，那么就无法进行调试。所以解决办法只能是在他的调试器附加之前你先开始调试。
2.一般来说，为了防止你直接抢占调试来绕过，他还会加一个异常处理函数，程序中原本存在一些不合理的代码或者INT3断点，当他的调试器处理的时候会去做一些指定的流程，而你作为调试者，在调试过程中就无法处理那些代码。
不过好在他是一道题目，那么就一定是能做的，也就是一般来说这个异常处理函数不会很复杂，手动模拟也可以操作，或者编写简单的脚本也可以进行解密，比如有些题目就是会直接在异常处理函数里面对代码进行解密后再返回运行。
###  异常处理函数（调试器部分）
这道题我们尝试直接从start开始下断，并且找到他处理调试器异常的逻辑部分，然后再手动跳转来执行加密过程
不断单步可以发现，这里开始分配函数执行
不难发现这部分就是创建了互斥体，并且通过互斥体来判断当前进程是调试器还是被调试的函数，并且通过 **dword_432350** 来记录，然后创建进程。
接着跟踪就发现了调试器处理的代码，这部分内容如果看过《加密与解密》的师傅应该会很清楚，里面有对编写调试器的函数信息详细的解释。
接下来进入到case 1分支中的函数，就可以很清楚的看到处理逻辑
###  普通程序流程
我们目前知道了调试逻辑之后，接下来就是按照调试器的逻辑手动去执行代码。
我们手动创建一个进程，然后再次调试的时候，当前程序就会被认为是要被调试的程序，也就会去执行加密的流程了。
接下来就去wmain函数手动模拟，很快就遇到了第一个int3断点，我们模拟他的调试器逻辑，跳到下面去执行
紧接着又遇到第二个int3
并且在这之前的call函数输出了
于是我们又手动修改EIP，跳到下面去执行
紧接着发现程序停在了这里，要我们输入flag的信息