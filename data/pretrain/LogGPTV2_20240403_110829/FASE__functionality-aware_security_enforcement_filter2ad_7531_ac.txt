expression val.substr(0,6) · [0-9](cid:2). which evaluates to the
concrete regular expression "310152"·[0-9](cid:2). The remaining
characters are not labeled and thus remain unchanged. The
derived regular expression is "id=310152"·[0-9](cid:2). The string
"id=310152000000000", for example, satisﬁes this application
constraint, while the string "id=310152xxxxxxxxx" does not.
4.3 Enforcement
(cid:3)
Here we deﬁne the notion of correct security enforcement
with respect to generic and application-speciﬁc constraints.
Consider an app that calls a sink method snk in a given
state σ. Imagine that the string s, pointed-to by the vari-
able x,
is labeled. The security enforcement system re-
satisﬁes
places s with s
the generic constraint G and the application-speciﬁc con-
is in the language of the CFG g = G(snk , x)
straints A, i.e. s
as well as in the language of the regular expression r =
[[A]](σ, snk , x). The reduces to checking their intersection:
(cid:3) ∈ L(g)∩L(r). We detail the FASE synthesizer for correct
s
enforcement in Section 5.
. The enforcement is correct iﬀ s
(cid:3)
(cid:3)
Discussion. We remark on several key points about the
FASE DSL. We deliberately designed the language to sup-
port regular application constraints and context-free generic
constraints. The intersection between a regular and a context-
free language is context-free, which guarantees that member-
ship is decidable. Note that using context-free languages for
all constraints breaks decidability [17].
We opted for CFGs for sinks’ preconditions as they are
more subtle to encode. For example, the precondition of
the sink SQLiteDatabase.execSQL(String), which accepts only
well-formed SQL queries, is not regular.
Algorithm 1: The main steps of synthesizer. All labeled
values passed to a sink snk are replaced with constraint-
compliant values.
Input: Generic constraints G,
Application constraints A,
Sink signature snk k(x1, . . . , xk),
State σ
Output: Repaired state σ
1 begin
2
if τ (x) (cid:14)= ∅ then
L ← []
for x ∈ {x1, . . . , xk} do
r ← [[A]](σ, snk , x)
dfa ← convert r to DFA
g ← G(snk , x)
cfg ← intersect dfa with g
s ← generate a string from cfg
L ← L + [(x, s)]
3
4
5
6
7
8
9
10
11
12
13
for (x, s) ∈ L do
store s at x
return σ
We can approximate more complex context-free applica-
tion constraints using regular approximations [20, 21]. For
instance, one can under-approximate a context-free applica-
tion constraint g with a regular expression r. This guaran-
tees that any string that satisﬁes r also satisﬁes g, simply
because L(r) ⊆ L(g).
5. SYNTHESIZER
We describe our specialized synthesizer for strings, char-
acterize its properties, and discuss several optimizations.
The synthesizer is invoked immediately before the appli-
cation invokes a sink. For the example of Figure 2, it is
invoked immediately before calling the sink API method
HTTPClient.execute(). The synthesizer replaces each sen-
sitive value passed to the sink with a value that satisﬁes
all functionality constraints—both generic and application-
speciﬁc.
We illustrate the main steps of the synthesizer in Algo-
rithm 1. Our synthesizer is conﬁgured with the generic con-
straints G and a set A of application constraints expressed
in the FASE DSL. The sink signature snk (x1, . . . , xk) iden-
tiﬁes all variables that may point to labeled strings at run
time. The synthesizer computes a new value for each vari-
able x ∈ {x1, . . . , xk} that stores a sensitive value according
to τ . Note that x stores a sensitive value if the labeling func-
tion τ maps x to a nonempty set of labels. To synthesize a
new value, the synthesizer ﬁrst derives the regular expres-
sion r from the application constraints A, as deﬁned in the
FASE DSL semantics (line 5). Then, it converts the derived
regular expression to a DFA (line 6) and intersects this DFA
with the CFG G(snk , x) of the sink (line 8). Here, our syn-
thesizer leverages that the intersection of a context-free and
a regular language is a context-free language [17] to com-
pute the conjunction of all constraints. If this intersection
is empty, then the synthesizer aborts and reports about the
inconsistency. Otherwise, the synthesizer deterministically
derives a string s from the computed CFG, generating the
477replacement string for the variable x. The synthesized string
s for the variable x is added to the list L (line 10). Finally,
the synthesizer updates the variables with the synthesized
strings (lines 11–12).
Key Points. There are several points of interest. First,
the synthesizer, by default, forbids all explicit ﬂows from
sources to sinks, unless the application constraints restrict
this. In more detail, without any application constraints, the
synthesizer generates a ﬁxed value that satisﬁes the sink’s
precondition and that does not depend on the actual sensi-
tive value. Second, although the worst complexity for trans-
lating a regular expression of size n to a DFA (line 6) is
exponential, our experimental results show that the regu-
lar expressions used in practical constraints have small DFA
representations. Third, the problem of computing the in-
tersection between a DFA and a context-free grammar is
tractable. Finally, generating a string from the computed
grammar takes linear time.
Optimizations. We conclude with two optimizations that
address expensive computation steps, thereby improving the
synthesizer’s performance.
The regular expressions r derived from application con-
straints often imply the generic constraint g, i.e. L(r) ⊆
L(g). Common cases are sensitive strings in URL strings
such as "http://a.com?arg=" where application-
speciﬁc constraints restrict changes to  to al-
phanumerical strings. Any string satisfying the application
constraints is a well-formed URL string that satisﬁes the
generic constraint.
Deciding whether L(r) ⊆ L(g) is as expensive as comput-
ing L(r) ∩ L(g). We thus select a string v ∈ L(r) and then
check v ∈ L(g). If v (cid:14)∈ L(g), the synthesizer falls back to the
original approach and computes the intersection.
As a further optimization, we can cache all computed
context-free grammars used for deriving constraint-compliant
strings. This works well as many labeled strings diﬀer only
in their labeled parts.
6. EXPERIMENTAL EVALUATION
We now present the experiments conducted to evaluate
the design choices governing FASE and its eﬀectiveness.
6.1
Implementation
The FASE system implements our ﬁne-grained information-
ﬂow tracking engine (Section 3) and our synthesizer for gen-
erating values satisfying generic and application-speciﬁc con-
straints (Section 5).
To implement the character-level tracking for strings, the
FASE system instruments the libraries String, StringBuffer,
StringBuilder, and AbstractStringBuilder. To keep the over-
head incurred by tracking low, we use spatial locality and
store labels in the same character array used to store string
characters. Since the String class is declared as ﬁnal, in-
strumentation at the application-level based on inheritance
is not possible.
The value-based tracking for primitive values is imple-
mented using application-level instrumentation. FASE in-
jects code for maintaining the key/value table that maps
primitive values to labels. The instrumentation augments
calls to methods such as StringBuffer.append(double) with
code for propagating labels, as explained in Section 3.2.
The application-level instrumentation also injects byte-
Conﬁguration
Byte-level Generic
App-speciﬁc
Tracking Constraints Constraints
Coarse Tracking
No Constraints
Generic constraints
All functional constraints

(cid:2)
(cid:2)
(cid:2)


(cid:2)
(cid:2)



(cid:2)
Table 1: FASE features used by each conﬁguration.
code for intercepting the calls to all sources and sinks in
the FASE conﬁguration, and insert calls to the synthesizer
(Section 5), which we implemented in Java.
Technically, our instrumentation scheme is deﬁned atop
the ASM 5.0 framework [3] and the Dex2Jar tool [9], which
transforms Dalvik code into Java bytecode. We used the
ACLA framework [6, 7] to implement the synthesizer.
6.2 Engineering Requirements
We evaluate the FASE system with respect to three engi-
neering requirements:
(R1) Robustness. The FASE system must secure appli-
cations without causing crashes, run-time errors, or
other visible side eﬀects.
(R2) Overhead. The overall overhead caused by the FASE
system must be low.
(R3) Constraint Conciseness. Application constraints
for real-world applications can be expressed concisely
in the FASE DSL.
6.3 Experimental Setup
There have been numerous studies on popular Android ap-
plications with sensitive information ﬂows; see e.g. [10, 18,
31]. As we needed precisely such applications for our exper-
iments, we randomly selected applications from the experi-
mental suites of
[18] and [31]. Statistics about the selected
applications are given in Figure 8 of Appendix A. We remark
that many applications have more than a thousands sinks
and all applications have sensitive ﬂows. Common sensitive
ﬂows include conﬁdentiality-relevant ﬂows such as sending
private data sent over HTTP GET and POST requests as
well as integrity-relevant ﬂows such as opening ﬁles with un-
sanitized ﬁle paths and executing unsanitized SQL queries.
To gather a more complete data on the behavior of each of
the applications, we wrote scripts to simulate user interac-
tion, which exercise the applications more thoroughly. To
write the scripts we had a user manually click through the
application and record all the user’s actions in the script.
We conﬁgured FASE with the set of sensitive sources and
sinks speciﬁed in [25]. We conducted all the experiments
using a Nexus 7 device running a modiﬁed Android with
support for the FASE information-ﬂow tracking engine.
6.4 Results
In the following, we present several sets of results and
discuss our engineering requirements.
R1: Robustness. To obtain a better understanding of
which features are needed for repairing sensitive informa-
tion ﬂows without causing side eﬀects, we ran the selected
applications using four diﬀerent conﬁgurations:
478Coarse Tracking
Generic Constraints All Constraints (FASE)
Crash Side-eﬀects Errors Crash Side-eﬀects Errors Crash Side-eﬀects Errors Crash Side-eﬀects Errors
No Constraints
App Name
Candy Crush Saga
Yellow Pages
Paper Toss
Smiley Pops
Coﬀee Finder
Bump
iHeartRadio
SmartTacToe
AccuWeather
aiMinesweeper
Antsmasher
Cat Hair Saloon
Tiny Flashlight
Celebrity Care
Mako Mobile
Video Poker
(cid:2)
(cid:3)
(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
Check: Bill & Money (cid:2)
(cid:3)
Extreme Droid Jump (cid:2)
(cid:3)
Princess Nail Salon
Transparent Screen
(cid:2)
(cid:3)
(cid:3)
(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:4)(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
0
5
1
1
3
0
1
0
2
0
4
0
0
5
1
2
3
5
0
3
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:4)(cid:2)
(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:3)
(cid:3) Application crashes (cid:2) Application loads successfully
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:2)
(cid:4)(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)