将`br0`桥添加到`docker0`桥:
```
# brctl addif docker0 br0
```
`docker0`桥与另一座桥`br0`相连。这一次，它是一座 OVS 大桥。这意味着容器之间的所有交通也要经过`br0`。
此外，我们需要将运行容器的两台主机的网络连接在一起。GRE 隧道用于此目的。这条隧道与`br0` OVS 大桥相连，因此也与`docker0`相连。
在两台主机上执行上述命令后，您应该能够从两台主机 ping 通`docker0`网桥地址。
在主机 1 上，使用`ping`命令生成以下输出:
```
# ping 192.168.10.2
PING 192.168.10.2 (192.168.10.2) 56(84) bytes of data.
64 bytes from 192.168.10.2: icmp_seq=1 ttl=64 time=0.088 ms
64 bytes from 192.168.10.2: icmp_seq=2 ttl=64 time=0.032 ms
^C
--- 192.168.10.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.032/0.060/0.088/0.028 ms
```
在主机 2 上，使用`ping`命令生成以下输出:
```
# ping 192.168.10.1
PING 192.168.10.1 (192.168.10.1) 56(84) bytes of data.
64 bytes from 192.168.10.1: icmp_seq=1 ttl=64 time=0.088 ms
64 bytes from 192.168.10.1: icmp_seq=2 ttl=64 time=0.032 ms
^C
--- 192.168.10.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.032/0.060/0.088/0.028 ms
```
让我们看看如何在两台主机上创建容器。
在主机 1 上，使用以下代码:
```
# docker run -t -i --name container1 ubuntu:latest /bin/bash
```
在主机 2 上，使用以下代码:
```
# docker run -t -i --name container2 ubuntu:latest /bin/bash
```
现在我们可以从`container1`ping`container2`。这样，我们使用 Open vSwitch 连接多个主机上的 Docker 容器。
# 与覆盖网络联网–Flannel
Flannel 是虚拟的网络层，为每台主机提供子网，供 Docker 容器使用。它与 CoreOS 一起打包，但也可以在其他 Linux 操作系统上配置。Flannel 通过将自己实际连接到 Docker 桥来创建覆盖，容器连接到 Docker 桥，如下图所示。要设置 Flannel，需要两台主机或虚拟机，可以是 CoreOS，更好的是 Linux 操作系统，如下图所示:
![Networking with overlay networks – Flannel](img/00023.jpeg)
Flannel 代码可以从 GitHub 中克隆出来，如果需要的话，可以在不同风格的 Linux 操作系统上本地构建，如下图所示。它预装在 CoreOS 中:
```
# git clone https://github.com/coreos/flannel.git
Cloning into 'flannel'...
remote: Counting objects: 2141, done.
remote: Compressing objects: 100% (19/19), done.
remote: Total 2141 (delta 6), reused 0 (delta 0), pack-reused 2122
Receiving objects: 100% (2141/2141), 4.
Checking connectivity... done.
# sudo docker run -v `pwd`:/opt/flannel -i -t google/golang /bin/bash -c "cd /opt/flannel && ./build"
Building flanneld...
```
根据以下链接中提到的教程，可以使用 float 和 VirtualBox 轻松配置 CoreOS 机器:
[https://coreos.com/os/docs/latest/booting-on-vagrant.html](https://coreos.com/os/docs/latest/booting-on-vagrant.html)
创建并登录机器后，我们会发现一个 Flannel 桥，它是使用`etcd`配置自动创建的:
```
# ifconfig flannel0
flannel0: flags=4305  mtu 1472
 inet 10.1.30.0  netmask 255.255.0.0  destination 10.1.30.0
 unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500 (UNSPEC)
 RX packets 243  bytes 20692 (20.2 KiB)
 RX errors 0  dropped 0  overruns 0  frame 0
 TX packets 304  bytes 25536 (24.9 KiB)
 TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
```
Flannel 环境可以通过查看`subnet.env`进行检查:
```
# cat /run/flannel/subnet.env
FLANNEL_NETWORK=10.1.0.0/16
FLANNEL_SUBNET=10.1.30.1/24
FLANNEL_MTU=1472
FLANNEL_IPMASQ=true
```
Docker 守护程序需要使用以下命令重新启动，以便从 Flannel 网桥用子网重新实例化网络:
```
# source /run/flannel/subnet.env
# sudo rm /var/run/docker.pid
# sudo ifconfig docker0 ${FLANNEL_SUBNET}
# sudo docker -d --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU} & INFO[0000] [graphdriver] using prior storage driver "overlay"
INFO[0000] Option DefaultDriver: bridge
INFO[0000] Option DefaultNetwork: bridge
INFO[0000] Listening for HTTP on unix (/var/run/docker.sock)
INFO[0000] Firewalld running: false
INFO[0000] Loading containers: start.
..............
INFO[0000] Loading containers: done.
INFO[0000] Daemon has completed initialization
INFO[0000] Docker daemon
commit=cedd534-dirty execdriver=native-0.2 graphdriver=overlay version=1.8.3
```
也可以通过查看`subnet.env`来查看第二台主机的 Flannel 环境:
```
# cat /run/flannel/subnet.env
FLANNEL_NETWORK=10.1.0.0/16
FLANNEL_SUBNET=10.1.31.1/24
FLANNEL_MTU=1472
FLANNEL_IPMASQ=true
```
不同的子网被分配给第二个主机。Docker 服务也可以通过指向 Flannel 桥在该主机中重新启动:
```
# source /run/flannel/subnet.env
# sudo ifconfig docker0 ${FLANNEL_SUBNET}
# sudo docker -d --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU} & INFO[0000] [graphdriver] using prior storage driver "overlay"
INFO[0000] Listening for HTTP on unix (/var/run/docker.sock)
INFO[0000] Option DefaultDriver: bridge
INFO[0000] Option DefaultNetwork: bridge
INFO[0000] Firewalld running: false
INFO[0000] Loading containers: start.
....
INFO[0000] Loading containers: done.
INFO[0000] Daemon has completed initialization
INFO[0000] Docker daemon
commit=cedd534-dirty execdriver=native-0.2 graphdriver=overlay version=1.8.3
```
可以在各自的主机中创建 Docker 容器，并且可以使用`ping`命令测试它们，以便检查 Flannel 覆盖网络的连通性。
对于主机 1，请使用以下命令:
```
#docker run -it ubuntu /bin/bash
INFO[0013] POST /v1.20/containers/create
INFO[0013] POST /v1.20/containers/1d1582111801c8788695910e57c02fdba593f443c15e2f1db9174ed9078db809/attach?stderr=1&stdin=1&stdout=1&stream=1
INFO[0013] POST /v1.20/containers/1d1582111801c8788695910e57c02fdba593f443c15e2f1db9174ed9078db809/start
INFO[0013] POST /v1.20/containers/1d1582111801c8788695910e57c02fdba593f443c15e2f1db9174ed9078db809/resize?h=44&w=80
root@1d1582111801:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:0a:01:1e:02
 inet addr:10.1.30.2  Bcast:0.0.0.0  Mask:255.255.255.0
 inet6 addr: fe80::42:aff:fe01:1e02/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1472  Metric:1
 RX packets:11 errors:0 dropped:0 overruns:0 frame:0
 TX packets:6 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:969 (969.0 B)  TX bytes:508 (508.0 B)
lo        Link encap:Local Loopback
 inet addr:127.0.0.1  Mask:255.0.0.0
 inet6 addr: ::1/128 Scope:Host
 UP LOOPBACK RUNNING  MTU:65536  Metric:1
 RX packets:0 errors:0 dropped:0 overruns:0 frame:0
 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
```
对于主机 2，使用以下命令:
```
# docker run -it ubuntu /bin/bash
root@ed070166624a:/# ifconfig
eth0       Link encap:Ethernet  HWaddr 02:42:0a:01:1f:02
 inet addr:10.1.31.2  Bcast:0.0.0.0  Mask:255.255.255.0
 inet6 addr: fe80::42:aff:fe01:1f02/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1472  Metric:1
 RX packets:18 errors:0 dropped:2 overruns:0 frame:0
 TX packets:7 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:1544 (1.5 KB)  TX bytes:598 (598.0 B)
lo         Link encap:Local Loopback
 inet addr:127.0.0.1  Mask:255.0.0.0
 inet6 addr: ::1/128 Scope:Host
 UP LOOPBACK RUNNING  MTU:65536  Metric:1
 RX packets:0 errors:0 dropped:0 overruns:0 frame:0
 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
root@ed070166624a:/# ping 10.1.30.2
PING 10.1.30.2 (10.1.30.2) 56(84) bytes of data.
64 bytes from 10.1.30.2: icmp_seq=1 ttl=60 time=3.61 ms
64 bytes from 10.1.30.2: icmp_seq=2 ttl=60 time=1.38 ms
64 bytes from 10.1.30.2: icmp_seq=3 ttl=60 time=0.695 ms
64 bytes from 10.1.30.2: icmp_seq=4 ttl=60 time=1.49 ms
```
因此，在前面的示例中，我们可以看到 Flannel 通过在每台主机上运行`flanneld`代理降低了复杂性，该代理负责从预配置的地址空间中分配子网租约。Flannel 内部使用`etcd`存储网络配置和其他详细信息，如主机 IP 和分配的子网。数据包的转发是使用后端策略实现的。
Flannel 还旨在解决除 GCE 之外的云提供商上的 Kubernetes 部署问题，其中 Flannel 覆盖网状网络可以通过为每个服务器创建子网来缓解为每个 pod 分配唯一 IP 地址的问题。
# 总结
在本章中，我们学习了 Docker 容器如何使用不同的网络选项(如 Weave、OVS 和 Flannel)跨多个主机进行通信。管道工程使用传统的 Linux 桥，Weave 创建虚拟网络，OVS 使用 GRE 隧道技术，Flannel 为每台主机提供单独的子网，以便将容器连接到多台主机。有些实现(如管道工程)是遗留的，将在一段时间后过时，而另一些则设计用于特定的操作系统，如带有 CoreOS 的 Flannel。
下图显示了 Docker 网络选项的基本比较:
![Summary](img/00024.jpeg)
在下一章中，我们将讨论在使用框架(如 Kubernetes、Docker Swarm 和中间层)时，Docker 容器是如何联网的。