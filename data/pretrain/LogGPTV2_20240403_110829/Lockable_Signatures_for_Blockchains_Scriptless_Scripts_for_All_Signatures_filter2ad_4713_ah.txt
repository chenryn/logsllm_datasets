(cid:16)
r3+(cid:80)j∗
y1x1+y1
:= g
0
y1
:= g
0
F := H
1
i=6 si−2ri
i=5 si−2ri
i=5 si−2ri
i=5 si−2ri
i=5 si−2ri
y1
0
(cid:17)
(cid:17)
(cid:17)
+y2
0
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
Open Channel: On input (OpChannel, c(cid:104)u,u(cid:48)(cid:105), v, u(cid:48), t, f ) from a user u, the functionality checks whether c(cid:104)u,u(cid:48)(cid:105) is
well-formed (contains valid identiﬁers and it is not a duplicate) and eventually sends (c(cid:104)u,u(cid:48)(cid:105), v, t, f ) to u(cid:48), who can either
abort or authorize the operation. In the latter case, the functionality appends the tuple (c(cid:104)u,u(cid:48)(cid:105), v, t, f ) to B and the tuple
(c(cid:104)u,u(cid:48)(cid:105), v, t, h) to P, for some random h. The functionality returns h to u and u(cid:48).
Close Channel: On input (ClChannel, c(cid:104)u,u(cid:48)(cid:105), h) from either user u or u(cid:48), the ideal functionality parses B for an entry
(c(cid:104)u,u(cid:48)(cid:105), v, t, f ) and P for an entry (c(cid:104)u,u(cid:48)(cid:105), v(cid:48), t(cid:48), h), for h (cid:54)= ⊥. If c(cid:104)u,u(cid:48)(cid:105) ∈ L or either t or t(cid:48) is past the current time, the
functionality aborts. Otherwise the functionality adds (c(cid:104)u,u(cid:48)(cid:105), u(cid:48), v(cid:48), t(cid:48)) to B and adds c(cid:104)u,u(cid:48)(cid:105) to L. The functionality then
notiﬁes other parties with the message (c(cid:104)u,u(cid:48)(cid:105),⊥, h).
Pay: On input (payChannel, v, c(cid:104)u0,u1(cid:105), . . . , c(cid:104)un,un+1(cid:105)), (t0, . . . , tn)) from a user u0, the functionality executes the following
interactive protocol:
• For all i ∈ 1, . . . , (n + 1), it samples a random hi and parses B for an entry of the form (c(cid:104)ui−1,u(cid:48)
entry does exist, it sends the tuple (u0, hi−1, hi, hi+1, hi+2, c(cid:104)ui−2,ui−1(cid:105), c(cid:104)ui−1,ui(cid:105), c(cid:104)ui,ui+1(cid:105), c(cid:104)ui+1,ui+2(cid:105), v −(cid:80)n
(hn+1, c(cid:104)un,un+1(cid:105), v, tn)). Then it checks whether for all entries of the form (c, v(cid:48),·,·) ∈ P it holds that v(cid:48) ≥ (v −(cid:80)n
ti−2, ti−1, ti, ti+1)to the user ui via an anonymous channel (for the speciﬁc case of the receiver the tuple is only
and that ti−1 ≥ ti. If this is the case it adds di = (c(cid:104)ui−1,ui(cid:105), (v(cid:48)
(c(cid:104)ui−1,ui(cid:105), v(cid:48)
entries di added in this phase and aborts.
• For all i ∈ {(n + 1), . . . , 1}, it queries all ui with (hi, hi+1), through an anonymous channel. Each user can reply with
either (cid:62) or ⊥. Let j be the index of the user that returns ⊥ such that for all i > j : ui returned (cid:62). If no user returned ⊥ we
set j = 0.
• For all i ∈ {j + 1, . . . , n} the ideal functionality updates di ∈ P (deﬁned as above) to (−,−,−, hi) and notiﬁes the user of
the success of the operation with with some distinguished message (success, hi, hi+1). For all i ∈ {0. . . . , j} (if j (cid:54)= 0), it
removes di from P and notiﬁes the user with the message (⊥, hi, hi+1).
j=i fj)
i. If any of the conditions above is not met, it removes from P all the
i,·,·) ∈ P is the entry with the lowest v(cid:48)
i − (v −(cid:80)n
j=i fj), ti,⊥) to P, where
i, fi). If such an
i(cid:105), vi, t(cid:48)
j=i fj,
Fig. 9: Ideal functionality FPCN for PCNs (with weaker off-chain privacy).
ExpAgExtA,G0,G1,Gt(1λ, k)
xi, yi ← Zq, ∀i ∈ [k]
σ ← g
(cid:48)
(σ
, I
b0 := (∅ (cid:54)= I
(cid:80)
i∈[k] xiyi
) ← A({gxi
1 , gyi
(cid:48) ⊂ [k])
(cid:80)
i∈I(cid:48) xiyi
0 }i∈[k], σ)
(cid:18)
(cid:19)
(cid:48)
(cid:48)
0
σ
b1 :=
= g
return b0 ∧ b1
0
Fig. 10: Aggregate Extraction experiment
probability in ExpAgExt, we have that R wins the experiment
ExpChAgExt with the same non-negligible probability. But
this means R is a PPT algorithm that breaks the aggregate
extraction assumption, which is a contradiction. Hence it must
be the case that no such PPT A can exist. This concludes the
"only if" direction.
If. Proving this direction is trivial. Here we build a reduction
algorithm R that plays in ExpChAgExt and runs a sub-routine
A that is participating in ExpAgExt with k = 2. The reduction
R receives a chained aggregate challenge and simply chooses
one of the n − 1 aggregates at random and gives it to A. Now,
whatever signature A outputs, R outputs the same signature
along with the index of the chosen aggregate. It is easy to
see that the simulation by R for the adversary A is faithful to
ExpAgExt. If A outputs a valid extraction for the aggregate it
was given as input with non-negligible probability, the reduction
R is able to win ExpChAgExt with the same non-negligible
probability. By contradiction, this proves the "if" direction.
953
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
Input: For i ∈ [n − 1], parties Pi and Pi+1 share a payment channel 2-PCi with channel expiry ti. For each channel 2-PCi,
party Pi has a secret signing key sk (i)
. All parties are aware of the system
parameters ∆ ∈ N and T ∈ N.
We consider party P1 the sender of the payment, to play the role of a P0 in the below protocol.
p,i and party Pi+1 has a secret signing key sk (i+1)
p,i
Payment Setup Phase
(cid:16)
pk (j)
, sk (j)
Parties P0, Pi, Pi+1 for i ∈ [n − 1] (Party Pn+1, is just a copy of party Pn) do the following:
1) Each party Pj, j ∈ {0, i, i + 1}, executes the following steps:
(cid:17)
i ) ← ΠBLS.KGen(1λ)
, sk (j)
• Sample (pk (j)
i
• Generate π(j)
• Verify if the proof π(k)
(cid:16)
, k ∈ {0, i, i + 1}/j of other parties is correct by checking VNIZK,LDL
• The ﬁnal public key is pk i ←(cid:81)
(cid:17)
(cid:16)
one of the proof does not verify, the party aborts.
j∈{0,i,i+1} pk (j)
and
i ← PNIZK,LDL
(cid:16)
2) Parties Pi and Pi+1 do the following:
to P0, Pi and Pi+1, respectively.
(cid:17)
(cid:17)
to other parties
pk i, sk (i+1)
pk i, sk (0)
pk i, sk (i)
• Return
and send
pk (j)
, π(j)
(cid:16)
(cid:17)
(cid:16)
(cid:17)
,
i
i
i
i
i
i
i
i
i
• Generate tx Setup,i = tx (2-PCi, 3-PCi, vi) with transaction expiry time tSetup,i = ti − T , where 3-PCi := pk i
• Generate σs,i ← ΠBLS.Sign
• Send (tx Setup,i, σs,i, tSetup,i) to P0 and P0 veriﬁes if the transaction is correctly formed and checks if
p,i + sk (i+1)
, tx Setup,i
sk (i)
p,i
(cid:16)
pk (k)
i
, π(k)
i
(cid:17)
= 1. If any
ΠBLS.Vf(2-PCi, tx Setup,i, σs,i) = 1, and aborts otherwise.
Payment Lock Phase
Parties P0, Pi−1, Pi, Pi+1 for i ∈ [2, n − 1] generate a payment lock for party Pi by doing the following:
1) Parties P0, Pi−1, Pi generate tx pay,i−1 = tx (3-PCi−1, pk
∗
i , v) with payment expiry time ˜ti−1 and parties P0, Pi, Pi+1
generate tx pay,i = tx (3-PCi, pk
∗
i+1, v) with payment expiry time ˜ti, such that ˜ti−1 = ˜ti + ∆.
(cid:17)
(cid:17)
(cid:17)
(cid:16)
(cid:17)
i
.
i
(cid:17)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
sk (i−1)
pk (i−1)
i−1, sk (i)
i−1, sk (0)
i−1 , Pi has
and Pi+1 has sk (i+1)
, Pi−1 has sk (i−1)
2) Party P0 sends 3-PCi−1 to party Pi+1 and sends 3-PCi to party Pi−1
3) Parties P0, Pi−1, Pi and Pi+1 engage in the following interactive protocol to compute
i−1 , tx pay,i−1
= 0 and continues otherwise.
(cid:16)
(cid:96)ki−1 ← Lock (sk i−1, tx pay,i−1, sk i, tx pay,i). The common input all parties is (pk i−1, pk i) and as private inputs P0 has
sk (0)
sk (i)
• (Round 1): Pi−1 generates σ(i−1)
i−1 ← ΠBLS.Sign
i−1 , tx pay,i−1, σ(i−1)
ΠBLS.Vf
i−1
(cid:17)
• (Round 2): Pi+1 generates σ(i+1)
, tx pay,i, σ(i+1)
,{tx pay,i−1, tx pay,i}, σ(cid:48)(cid:17)
(cid:16)
, σ(cid:48)(cid:17)
i
• (Round 3): P0 generates σ(0)
σ(cid:48) ← ΠBLS.Agg(σ(0)
pk (0)
ΠBLS.VfAgg
i−1 ← ΠBLS.Sign
(cid:111)
) and sends σ(cid:48) to Pi. Party Pi aborts if
← ΠBLS.Sign
, tx pay,i
= 0 and continue otherwise.
i−1, tx pay,i−1
• Party Pi generates signatures σ(i)
σ(i−1)
i−1 , σ(i)
i−1 ← ΠBLS.Sign
i−1, σ(i+1)
4) Parties P0, Pn−1, Pn, Pn+1 where Pn+1 is party P1, run the above steps that returns (cid:96)kn−1 := l1 · l2 to Pn where
= 0 and continues otherwise.
and sends σ(i−1)
i−1
i ← ΠBLS.Sign
i ← ΠBLS.Sign
to Pi. Party Pi aborts if
to Pi. Party Pi aborts if
i−1, σ(0)
i−1, pk (0)
(cid:96)ki−1 := ΠBLS.Agg
and sends σ(i+1)
i−1, tx pay,i−1
. It computes
sk (i)
.
(cid:16)(cid:110)
and σ(0)
and σ(i)
pk (i+1)
ΠBLS.Vf
sk (i+1)
, tx pay,i
, tx pay,i
sk (i)
i
sk (0)
sk (0)
(cid:16)
, σ(i)
i
i
(cid:16)
i
i
i
(cid:17)
(cid:17)
(cid:17)
i
i
(cid:16)
(cid:17)
i
i
i
(cid:16)
. It then sets
l1 := σn−1 and l2 := σn. Here σn−1 is a signature on transaction tx pay,n−1 := tx (3-PCn−1, pk
σn ← ΠBLS.Sign(sk n, tx pay,n) is a signature on some message tx pay,n (known to P0, Pn+1 and Pn) under public key pk n.
∗
n, v) and
Payment Release Phase
The sender (parties P0, Pn+1) initiates the payment release by jointly generating σn with Pn. Parties Pi for i ∈ [n, 2] do the
following:
1) Check if ΠBLS.Vf(pk i, tx pay,i, σi) = 1 and if so, release the locks by computing
σi−1 := (cid:96)ki−1/σi := Unlock(pk i−1, tx pay,i−1, pk i, tx pay,i, σi, (cid:96)ki−1).
2) Store (tx Setup,i−1, σs,i−1, tx pay,i−1, σi−1) to post on the blockchain if the case arises.
Fig. 11: BLS based Payment Channel Network Protocol run between parties P1, . . . , Pn
954
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply.