a “cross-path inconsistency” as discussed in Section 3.2.3.
∀j ∈ m, Ij = I
(6)
Policy conformance is checked by comparing the input I
to the root of the ACL tree with the blacklist and whitelist.
Since ﬁrewalls can rely on others to achieve policy confor-
mance, checking at the root allows us to make the judge-
ment based on the complete information of the entire ACL
tree.
• I ∩ blacklist (cid:11)= ∅ ⇒ policy violation: The ﬁrewalls ac-
cept some packets forbidden by the stated policy. This
is a security violation.
• whitelist (cid:2) I ⇒ policy violation: The ﬁrewalls deny
some protected packets. This causes disrupted service.
4.3. Formal Properties and Discussions
With respect to our deﬁnitions of misconﬁgurations in
Section 3, we have a soundness and completeness theorem
for our analysis.
Theorem 1 (Soundness and Completeness) Our
ing algorithm is both sound and complete:
check-
• If the algorithm detects no misconﬁgurations, then
there will not be any misconﬁgurations (soundness).
• Any misconﬁguration detected by the algorithm is a
real misconﬁguration (completeness).
We can achieve both soundness and completeness (i.e.,
neither false negatives nor false positives) because ﬁrewalls
are essentially ﬁnite-state systems. We perform symbolic
model checking covering every path and every packet, that
is we are doing exhaustive testing in an efﬁcient manner.
Our algorithm is sound and complete with respect to our
classiﬁcation of misconﬁgurations. However, certain mis-
conﬁgurations viewed as errors by one administrator may
not be viewed as errors by others. The concrete judgments
for these cases depends on the intention of the particular
administrator. There are cases where we cannot make con-
crete judgments and can only raise “warnings.” These cases
include, for example, correlations and generalizations for
intra-ﬁrewall checks, and raised security level and redun-
dancy for inter-ﬁrewall checks. This happens because we,
as tool writers, do not know the intention of the admin-
istrator. This intention gap, however, does not affect our
claim that the algorithm is sound and complete. Our tool
raises “warnings” and leaves the decision to the administra-
tor, who surely knows his/her own intention.
5. Implementation and Evaluation
5.1. BDD Representation of Firewall Rules
Updating state information for ﬁrewall rules and ACL
graphs requires an efﬁcient representation of the predicates
of individual rules or any collection of the predicates. In ad-
dition, we must be able to implement efﬁcient set operations
with this representation. FIREMAN uses binary decision
diagrams (BDDs) [4] to represent predicates and perform
all the set operations. The BDD library used in FIREMAN
is BuDDy [22], which provides efﬁcient dynamic memory
allocation and garbage collection.
BDD is an efﬁcient data structure which is widely used
in formal veriﬁcation and simpliﬁcation of digital circuits.
A BDD is a directed acyclic graph that can compactly and
canonically represent a set of boolean expressions. The
predicates of ﬁrewall rules describe constraints on certain
ﬁelds of the packet header. We can represent them com-
pactly and compute them efﬁciently using BDDs. For ex-
ample, a source IP block 128.0.0.0/8 can be represented as
5x(cid:3)
4x(cid:3)
x1x(cid:3)
6x7x(cid:3)
8, whose corresponding BDD is shown
in Figure 6a.
In a BDD graph, the non-terminal vertices
represent the variables of the boolean function, and the two
terminal vertices represent the boolean values 0 and 1. To
check if another source IP block is a subset of this IP block
requires only a single bdd_imp (i.e., ⇒, the logical implica-
tion) operation.
3x(cid:3)
2x(cid:3)
Performing set operations such as intersection, union
and not on BDDs is also straightforward using BuDDy. Fig-
ure 6c presents the union of source IP 128.0.0.0/8 (Fig-
ure 6a) and 192.0.0.0/8 (Figure 6b). Note that BDDs can
automatically summarize the two IP blocks and produce a
canonical form for the union.
5.2. Building Blacklist
FIREMAN checks for policy violations based on given
blacklist and whitelist. Although policy deﬁnitions are
subjective to individual institutions, there are some well-
understood guidelines we believe that most administrators
would want to observe. Therefore, FIREMAN checks for a
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
sip8
sip8
sip7
sip6
sip5
sip4
sip3
sip2
sip7
sip6
sip5
sip4
sip3
sip2
sip8
sip7
sip6
sip5
sip4
sip3
sip1
sip1
0
1
(a) Source IP 128.0.0.0/8.
0
1
(b) Source IP 192.0.0.0/8.
0
sip1
1
(c) Source IP 128.0.0.0/8 or
192.0.0.0/8.
Figure 6: Using BDDs to represent and operate on ﬁrewall rules.
list of default policies based on our understanding of com-
mon requirements. The actual users of FIREMAN can mod-
ify the blacklist and whitelist to suite their own policy-level
decisions.
The default blacklist of FIREMAN is built based on the
bogon list [9] and 12 common mistakes pointed out by
Wool [31]. For each IP block B listed on the bogon list,
we read them as “deny any B any” and “deny any any B”
rules to indicate that packets with either source IP in B or
destination IP in B should be denied.
Most rules listed in [31] can be encoded into the black-
list as well. Insecure or external access to ﬁrewall manage-
ment can be encoded as “deny tcp any ﬁrewall telnet” which
prevents telnet access to the ﬁrewall or “deny any external
ﬁrewall” which prevents external access to the ﬁrewall. In-
secure services like NetBios and Portmapper/Remote Pro-
cedure Call can be encoded as “deny any any any netbios”
which prevents access to NetBios.
As discussed in Section 4.2.3, the blacklist describes pro-
hibited behaviors and FIREMAN checks the ﬁrewall con-
ﬁgurations against each item deﬁned in the blacklist. The
current implementation of FIREMAN does not deﬁne a de-
fault whitelist and this check is thus omitted. However, it
is easy to write a list of predicates and FIREMAN can read
them as “accept” rules and use it to compare against the in-
put set I at the root of ACL tree.
5.3. Misconﬁgurations Discovered
Obtaining production ﬁrewall conﬁguration scripts is not
easy because they contain sensitive security information.
Table 5 lists the conﬁguration ﬁles that we were able to ob-
tain to test FIREMAN: P IX1 is for a Cisco PIX ﬁrewall
used at an enterprise network; BSD1 is using OpenBSD
packet ﬁlter at a campus network; and P IX2 is used by
another enterprise network. Both P IX1 and BSD1 are ac-
tively used in production. All the script excerpts presented
here have been modiﬁed to private IP address blocks. In Ta-
ble 5, the columns “P ”, “C”, and “E” list respectively the
number of policy violations, the number of inconsistencies,
and the number of inefﬁciencies detected for each ﬁrewall
conﬁguration.
Firewall
P IX1
BSD1
P IX2
Product
PIX 6.03
BSD PF
PIX 6.03
#ACLs
7
2
3
#rules P
3
249
3
94
36
2
C E
16
0
0
2
0
5
Table 5: Conﬁguration ﬁles and misconﬁgurations.
5.3.1 Policy Violations (P )
Policy violations are observed on all three conﬁgurations.
BSD1 explicitly denied 10.0.0.0/8, 172.16.0.0/12 and
192.168.0.0/16. In addition, the administrator commented
that he/she wanted to deny all unroutable packets. There-
fore, we infer that BSD1 is tasked to deny all unroutable
packets. However, FIREMAN reveals that other unallo-
cated IP address blocks such as 2.0.0.0/8 and 5.0.0.0/8,
are implicitly allowed by rules like “accept udp any any port
domain, ntp.”
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
A similar problem is identiﬁed in P IX1. Only two of
the three private IP blocks are explicitly denied. It is inter-
esting to note that while most administrators will not hesi-
tate to block private IP address blocks, they may be reluctant
to setup rules to ﬁlter unallocated IP address blocks as dis-
cussed in Section 3.1. FIREMAN can be conﬁgured to read
the latest bogon ﬁle every time it runs so that the bogon list
is up to date. It can be used to enforce the policy to block
all unroutable IP blocks.
Some of the 12 errors pointed by Wool [31] are observed
on these three conﬁgurations.
In particular, none of the
three ﬁrewalls pays special attention to secure the ﬁrewall
itself. They are not conﬁgured with a stealth rule to hide it-
self or limit the access to internal addresses and secure pro-
tocols. The default blacklist in FIREMAN has a rule which
denies any packets to the ﬁrewall itself not from internal
network (“deny any !internal_IP ﬁrewall_IP”). FIREMAN
diagnoses this problem by noting that the conjunction of in-
put to the root of the ACL tree (I) and the blacklist is not
empty.
Our results agree well with Wool’s observation that
ﬁrewall conﬁgurations often do not conform to well-
understood security policies.
In addition, FIREMAN is
fully automated and does not require an experienced ﬁre-
wall/security expert to diagnose the problems.
5.3.2 Inconsistencies (C)
1.
2.
3.
4.
5.
6.
7.
8.
9.
accept icmp any 10.2.53.192/32
accept icmp any 10.2.54.3/32
accept icmp any 10.2.53.249/32
accept icmp any 10.2.53.250/32
deny icmp any 10.2.53.0/24 echo
deny icmp any 10.2.53.0/24 traceroute
deny icmp any 10.2.54.0/24 echo
deny icmp any 10.2.54.0/24 traceroute
accept icmp any any
Table 6: Inconsistencies found in P IX1.
FIREMAN reported 8 correlations and 8 generalizations
on one of the ACL in P IX1 which contains 141 rules. The
rules causing the alarms are listed in Table 6. Rules 1–4 are
accepting icmp access to individual hosts, and rules 5–8 are
blocking icmp echo and traceroute to their networks. There-
fore rules 1,3, and 4 are correlated with rules 5 and 6, and
similarly, for rule 2 and rules 7, 8. Rule 9 is a generalization
of rules 1–8.
This script probably does not have any misconﬁgura-
tions. As discussed, correlations and generalizations can
often be tricks used by administrators to represent rules ef-
ﬁciently.
5.3.3 Inefﬁciencies (E)
FIREMAN noted 5 redundancies in P IX2. As shown in
Table 7, rules 2 and 3 will not match any packets because
they are matching a subset of those matched by rule 1. In
addition, rule 4 is a generalization of rules 1, 2 and 3. One
could keep only the rule 4 and achieve the same effect.
1.
2.
3.
4.
accept ip 192.168.99.0/24 192.168.99.0/24
accept ip 192.168.99.56/32 192.168.99.57/32
accept ip 192.168.99.57/32 192.168.99.56/32
accept ip 192.168.99.0/24 any
Table 7: Inefﬁciencies found in P IX2.
Another redundancy FIREMAN caught is in P IX1,
which explicitly denies 10.0.0.0/8 and 192.168.0.0/16 in
some of its ACLs. However, since these two rules are the
last two rules in the ACL, and the default action of PIX is
to deny anything remaining, these two rules are unneces-
sary and reported as redundancy. Private communication
with the administrator conﬁrmed this observation, and the
redundant rules will be removed.
5.4. Performance and Scalability
The complexity of intra-ﬁrewall checking is determined
by the complexity of checking each rule and the number of
rules in a conﬁguration. Our algorithm performs the usual
set operations, conjunction, disjunction, and complementa-
tion, on the A, D, and F sets for each rule. Our implemen-
tation (cf. Section 5) uses binary decision diagrams (BDDs)
to represent these sets canonically for efﬁcient processing.
On ﬁrewalls using the simple list model, our algorithm tra-
verses each rule exactly once, so the total running time is
O(n), where n is the number of rules. This is witnessed
in Figure 7, which shows that the average time required to
check an ACL is proportional to its length for synthetically
generated ACLs of different lengths. For example, it took
FIREMAN less than 3 seconds to check an 800-rule ACL.
Our algorithm scales better than Al-Shaer’s [2], which com-
pares two rules at a time and has a complexity of O(n2).
For ﬁrewalls using the complex chain model, we can
achieve O(n) time complexity with the following optimiza-
tions: (1) storing the state information and reusing it; and
(2) merging the state information whenever possible. Next,
we discuss in more detail these optimizations together with
distributed ﬁrewall checking.
For distributed ﬁrewalls, the number of paths from “out-
side” to “inside” may be exponential. For example, for
a graph with m nodes and an average outdegree k, there
can be O(km) simple paths in the worst-case. As ﬁre-
walls often reside on normal routers, m and k may be large.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
3.0
2.5
2.0
1.5
1.0
0.5
)
s
d
n