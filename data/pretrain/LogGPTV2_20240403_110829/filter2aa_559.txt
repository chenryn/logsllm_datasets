Covert Debugging
Circumventing Software 
Armoring Techniques
Offensive Computing, LLC
Danny Quist
Valsmith
PI:EMAIL
PI:EMAIL
Offensive Computing - Malware Intelligence
Danny Quist
• Offensive Computing, Cofounder
• PhD Student at New Mexico Tech
• Reverse Engineer
• Exploit Development
• cDc/NSF
Offensive Computing - Malware Intelligence
Valsmith
• Offensive Computing, Cofounder
• Malware Analyst/Reverse Engineer
• Metasploit Contributor
• Penetration Tester/Exploit developer
• cDc/NSF
Offensive Computing - Malware Intelligence
Offensive Computing, LLC
• Community Contributions
– Free access to malware samples
– Largest open malware site on the Internet
– 350k hits per month
• Business Services
– Customized malware analysis
– Large malware data-mining / access
– Reverse Engineering
Offensive Computing - Malware Intelligence
Introduction
• Debugging Malware is a powerful tool
– Trace Runtime Performance
– Monitor API Calls
– Dynamic Analysis == Automation
• Malware is getting good at preventing it
– Debugger Detection
– VM Detection
– Legitimate Software Pioneered these 
Techniques
Offensive Computing - Malware Intelligence
Overview of Talk
• Software Armoring Techniques
• Covert Debugging Requirements
• Dynamic Instrumentation for Debugging
• OS Pagefault Assisted Covert Debugging
• Application – Generic Autounpacking
• Results
Offensive Computing - Malware Intelligence
Software Armoring
• Packing/Encryption
• VM Detection
• SEH Tricks
• Debugger Detection
• Shifting Decode Frame
• Example: Microsoft’s Patchguard
Offensive Computing - Malware Intelligence
Packing/Encryption
• Self-modifying Code
– Small Decoder Stub
– Decompresses the main executable
– Restores imports
• Play Tricks with Portable Executables
– Hide the Imports
– Obscure relocations
– Encrypt/compress the executable
Offensive Computing - Malware Intelligence
Normal PE File
Offensive Computing - Malware Intelligence
Packed PE File
Offensive Computing - Malware Intelligence
Virtual Machine Detection
• Single instruction detection
– SLDT, SGDT, SIDT
– See: Redpill, Scoopy-Doo, OCVmdetect
• Instructions for Privileged/Unprivileged 
CPU mode
– VMs try to be efficient, some instructions 
insecure
– Do not fully emulate x86 bug for bug
Offensive Computing - Malware Intelligence
Debugger Detection
• Windows API
– IsDebuggerPresent() API call
– Checks PEB for magic bit (EFLAGS)
– Bit toggling works
• Timing Attacks
– Issue RDTSC instruction, compare to known 
values
– Amazingly effective
Offensive Computing - Malware Intelligence
Debugger Detection (cont.)
• Breakpoint Detection
– Int3 (0xCC) Instruction Scanning
– Checksumming of executable
• Hardware Debugging Detection
– Check CPU Flags for debug bit
• SoftICE Detection
– Modification of Int3 Scanning
Offensive Computing - Malware Intelligence
SEH Tricks
• Structured Exception Handler
• Used to handle error in running code
• Malware will overload this function to 
unpack code
• Debugger thinks SEH exceptions are for it
• Debugger dies
Offensive Computing - Malware Intelligence
Shifting Decode Frames
• Execution is split at the basic block level
• Block is decoded, executed, and then 
encoded again
• Hard to defeat!
• Implemented in Patchguard for Vista 64 
and Windows Server 2003 64-bit
Offensive Computing - Malware Intelligence
So What?
• These are all variations on a theme
• There should be a generic way to debug
• Need to modify at a fundamental level
• Solution should be:
– Generic – Work across set of executables
– Efficient – Good performance for non-debug
– Undetectable (as much as possible)
– Extensible – Automation is the key
Offensive Computing - Malware Intelligence
Software Armoring Achilles Heel
If it executes, 
it can be unpacked.
[http://www.security-assessment.com/files/presentations/Ruxcon_2006_-_Unpacking_Virus,_Trojans_and_Worms.pdf]
Offensive Computing - Malware Intelligence
Unpacking
• How an Unpacker Works:
– Writes to an area of memory (decode)
– Memory is read from (execute)
– More writes to memory (optional re-encoding)
• CPU Only Executes Machine Code
• This process can be monitored
• Unpacking is directly related to timing
– At some point, it must be unpacked
Offensive Computing - Malware Intelligence
Manual Unpacking Process
• Consists of several stages
– Identify Packer Type
– Find OEP or get process to unpacked state in 
memory
– Dump process memory to file
– Fixup file / rebuild Import Address Table (IAT)
– Ensure file can now be analyzed 
Offensive Computing - Malware Intelligence
Manual Unpacking Process
• Several methods to identify packer type
– Peid
– Msfpecan / OffensiveComputing.net
– Manually look at section names
– Other packer scanners like
• Protection-id
• Pe-scan
Offensive Computing - Malware Intelligence
Manual Unpacking Process
Offensive Computing - Malware Intelligence
Manual Unpacking Process
• Methods to find OEP / unpacked memory
– OllyScripts
• http://www.tuts4you.com
• http://www.openrce.org
– OEP finder tools
• OEP finders for specific packers
• OEP Finder (very limited)
• PE Tools / LordPe
• PEiD generic OEP finder
Offensive Computing - Malware Intelligence
Manual Unpacking Process
Offensive Computing - Malware Intelligence
Manual Unpacking Process
– Dump process memory to file
• OllyDump
• LordPE
• Custom tools
– Example:
void DumpProcMem(unsigned int ImageBase, unsigned int ImageSize,LPSTR filename, 
LPSTR pid) {
SIZE_T ReadBytes = 0; SIZE_T WriteBytes = 0;
unsigned char * buffer = (unsigned char *) calloc(ImageSize, 1); 
HANDLE hProcess = OpenProcess(PROCESS_VM_READ, FALSE, (DWORD)atoi(pid));
ReadProcessMemory(hProcess, (LPCVOID) ImageBase, buffer, ImageSize, 
&ReadBytes);
HANDLE hFile = CreateFile(TEXT("oc_dumped_image.exe"),   
GENERIC_READ|GENERIC_WRITE,         
0,      
NULL,                 
OPEN_ALWAYS,        
FILE_ATTRIBUTE_NORMAL,
NULL);                
WriteFile(hFile, buffer, ImageSize, &WriteBytes, NULL);
Offensive Computing - Malware Intelligence
Manual Unpacking Process
Offensive Computing - Malware Intelligence
Manual Unpacking Process
– Fixup file / rebuild Import Address Table (IAT)
• ImportRec probably best tool
• Revirgin by +Tsehp
• Manually with a hex editor (tedious)
– IAT contains list of functions imported
• Very useful for understanding capabilities
Offensive Computing - Malware Intelligence
Manual Unpacking Process
Offensive Computing - Malware Intelligence
Manual Unpacking Process
• Ensure file can now be analyzed 
• Clean disassembly should be available
• IAT should be visible
• Functions should be found
• Strings clear and useful
• Manual unpacking process can be tedious
• Hardest part is generally finding the OEP
Offensive Computing - Malware Intelligence
Manual Unpacking Process
Offensive Computing - Malware Intelligence
Unpacking: The Algorithm
• Track written memory
• If that memory is executed, it’s unpacked
• Must monitor:
– Memory writes
– Memory Executions
• Break on execute useful here
• Automate the process
Offensive Computing - Malware Intelligence
Dynamic Instrumentation
• Allows a running process to be monitored
• Intel PIN
– Uses Just-In-Time compiler to insert analysis code
– Retains consistency of executable
– Pintools – Use API to analyze code
– Good control of execution
• Instruction
• Memory access
• Basic block
– Process Attaching / Detaching
Offensive Computing - Malware Intelligence
Dynamic Instrumentation
• Instruction tracing for the following packers
– Armadillo
– Aspack
– FSG
– MEW
– PECompact
– Telock
– UPX
• Created Simple Hello World Application
• Graphed results with Oreas GDE
Offensive Computing - Malware Intelligence
Results
Aspack 2.12 
Offensive Computing - Malware Intelligence
Results
• Unpacking loop is easy to find
Offensive Computing - Malware Intelligence
Dynamic Instrumentation Results
• Generic Algorithm Described Previously 
works well
• All address verified by manual unpacking
• Addresses display clustering, which must 
be taken into account
• Attach / Detach is effective for taking 
memory snapshots of an executable
Offensive Computing - Malware Intelligence
Dynamic Instrumentation Problems
• Detectable
– Memory checksums
– Signature scanning
• Extend this to work generically, non- 
detectably
• Slow – ~1,000 times slower than native
• Need faster implementation
Offensive Computing - Malware Intelligence
Towards a Solution
• Core operating system component that:
– Monitors all memory
– Intercepts memory accesses
– Fast Interception and Logging
– Fundamental part of OS
Offensive Computing - Malware Intelligence
Introducing Saffron
• Intel PIN and Hybrid Page Fault Handler
• Extension of OllyBonE Kernel Code
• Designed for 32-bit Intel x86 CPUs
• Replaces Windows 0x0E Trap Handler
• Logs memory accesses
Offensive Computing - Malware Intelligence
Offensive Computing - Malware Intelligence
Virtual Memory Translation
• Each process has its own memory
• Memory must be translate from Virtual to 
Physical Address
• Non-PAE 32bit Processors use 2 page 
indexes and a byte index
• Each process has its own Page Directory
Offensive Computing - Malware Intelligence
Example Memory Translation
Virtual Address
0 (LSB)
31
[Microsoft Windows Internals, Fourth Edition, Microsoft Press]
CPU References Virtual Memory Address
Offensive Computing - Malware Intelligence
Example Memory Translation
Page Directory Index
Page Table Index
Virtual Page Number
10 Bits
10 Bits
Byte Index
12 Bits
0 (LSB)
31
[Microsoft Windows Internals, Fourth Edition, Microsoft Press]
Offensive Computing - Malware Intelligence
Example Memory Translation
Page Directory Index
Page Table Index
Virtual Page Number
10 Bits
10 Bits
Byte Index
12 Bits
0 (LSB)
31
PFN
CR3
Page Directories
(Contains the PDE)
[Microsoft Windows Internals, Fourth Edition, Microsoft Press]
CR3 contains process Page Directories
Offensive Computing - Malware Intelligence
Example Memory Translation
Page Directory Index
Page Table Index
Virtual Page Number
10 Bits
10 Bits
Byte Index
12 Bits
0 (LSB)
31
PFN
PTE
CR3
Page Directories
(Contains the PDE)
Page Tables
(Contains the PTE)
[Microsoft Windows Internals, Fourth Edition, Microsoft Press]
Offensive Computing - Malware Intelligence
Example Memory Translation
Page Directory Index
Page Table Index
Virtual Page Number
10 Bits
10 Bits
Byte Index
12 Bits
0 (LSB)
31
PFN
PTE
Address
CR3
Desired Page
Desired Byte
Page Directories
(Contains the PDE)
Page Tables
(Contains the PTE)
Physical Address
Space
[Microsoft Windows Internals, Fourth Edition, Microsoft Press]
Offensive Computing - Malware Intelligence
MMU Data Structures
• Page Directory Entry is hardware defined
– Contains permissions, present bit, etc.
• Page Table Entry also hardware defined
– Permissions (Ring0 vs. all others)
– Present bit (paged to disk or not)
– “User” defined bits (for OS)
Offensive Computing - Malware Intelligence
Virtual Address Translation
• TLB is major source of optimization
• Hardware resolves as much as possible
• Invokes page fault handler when
– Page is not loaded in RAM
– Incorrect privileges
– Loaded, but mapped with demand paging
– Address is not legal (out-of-range)
• All indicated by special fields
Offensive Computing - Malware Intelligence
Intel TLB Implementation
• Two TLBs maintained
– Data - DTLB
– Instructions – ITLB
• ITLB more optimized than DTLB
– Less lookups for ITLB == faster code
– DTLB accessed less
Offensive Computing - Malware Intelligence
Offensive Computing - Malware Intelligence
Process Monitoring
• Overloading of supervisor bit in page fault 
handler
• All process memory must be found
• Iterate through all pages for a process
– Windows application memory 
0x00000000 – 0x7FFFFFFF
• Mark supervisor bit on each valid PTE
• Invalidate the page in the TLB with INVLPG
• Hook heap allocation so new pages are watched
Offensive Computing - Malware Intelligence
Trap to Page Fault Handler
• Determine if a watched process
• Unset the supervisor bit
• Loads the memory into the TLB
• Resets supervisor bit
Offensive Computing - Malware Intelligence
Results
• Memory accesses are visible
• Reads, writes, and executes are exposed
• Program execution can be tracked, 
controlled
• Memory reads, writes are extremely 
apparent
• Executions only show for each individual 
page
Offensive Computing - Malware Intelligence
Modifying the Autounpacker
• Watch for written pages
• Monitor for executions into that page
• Mark page as Original Entry Point
• Dump memory of the process
Offensive Computing - Malware Intelligence
Video Demo of Unpacking
• Demonstrate Saffron
Offensive Computing - Malware Intelligence
Autounpacker Results
• Effective method for bypassing debugger 
attacks
– SEH decode problem is easily solved
– Memory checksum
• No process memory is modified
• p0wn3d!!!
• Shifting decode frame
– Slight modification under development, but 
effective
Offensive Computing - Malware Intelligence
Future Work
• Develop full-fledged API
• Problems
– Sometimes all page markings are lost
– Still detectable at some level
Offensive Computing - Malware Intelligence
Questions?
• Paper, presentation available at 
www.offensivecomputing.net