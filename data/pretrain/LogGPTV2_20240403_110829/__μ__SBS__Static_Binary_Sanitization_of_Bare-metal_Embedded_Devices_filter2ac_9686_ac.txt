ldr
ldr
r0 , [sp , # -64]
r0 , label
mapping
r0 , [sp , # -4]
r0 , [sp , # -64]
pc , [sp , # -4]
Listing 2: Rewritten instructions for every indirect jump
instruction with target address label.
Similarly, every indirect call instruction with target address
func must be rewritten by instructions shown in Listing 3. To
store the return address, µSBS loads into Link Register (LR)
the address of the instruction following the call to [sp, #-4].
str
mov
bl
str
ldr
add
ldr
r0 , [sp , # -64]
r0 , func
mapping
r0 , [sp , # -4]
r0 , [sp , # -64]
lr , pc , #4
pc , [sp , # -4]
Listing 3: Rewritten instructions for every indirect call
instruction with target address func.
µSBS translates every indirect branch into the mov and
direct call instructions. The mov instruction puts the old target
address into register r0 and the direct call goes to the mapping
routine which searches for the offset corresponding to the
old target in the mapping table. If the search succeeds, it will
jump to the translated target address in .newsec.
Finally, µSBS uses LIEF framework [9] to add .newsec and
mapping routine to the original ﬁrmware ELF ﬁle. The LIEF
framework modiﬁes the ELF header and creates a new code
segment containing the .newsec code section.
4.2 Sanitization
We implemented the process of generating a sanitization spec-
iﬁcation with 687 LOC in the Python language. Once the
ﬁrmware binary is disassembled, µSBS extracts all object
allocations and memory accesses (i.e., LDR and STR) and
stores them in the sanitization speciﬁcation ﬁle. The binary in-
strumentation component interprets the sanitization speciﬁca-
tion ﬁle for instrumenting all memory accesses with memory
check instructions to consult the metadata store. The memory
check instruction computes the address of the correspond-
ing metadata byte, loads that byte and checks whether it is
valid. For efﬁciency reasons, µSBS deploys a similar meta-
data management mechanism to AddressSanitizer by storing
1 byte of metadata for every 8 bytes of ﬁrmware memory.
In this case, the metadata mapping accords with Formula 1
where meta_base is the base address of the metadata store
Figure 3: Mapping procedure: all indirect branch instructions
(e.g., blx r2) are ﬁrstly redirected to the mapping routine
which looks for new offset (0x81d0) corresponding to the old
target address (0x804816c) in mapping table.
from other uninitialized values. (5) Incorrect freeing of heap
memory, such as double-freeing heap blocks.
4 Implementation
We have implemented a proof-of-concept of µSBS for the
ARMv7-M architecture [1], which covers a large share of
microcontrollers (i.e., Cortex-M3/4/7) for embedded plat-
forms [35]. The following outlines the technical details of the
implementation based on the design described in the previous
section.
4.1 Binary Instrumentation
We implemented µSBS binary instrumentation component
with a total of 1609 LOC in Python language using the Cap-
stone framework [3] as our underlying linear disassembler
engine. We used the pyelftools [8] and pwntools [7] open
source frameworks for parsing the ELF ﬁles and reassem-
bling instrumented assembly code respectively.
As mentioned in § 3.2, µSBS generates a new stretched
code section (.newsec) and executes ﬁrmware from its new
entry point. µSBS rewrites all instructions of the old code
section together with new inserted instructions in .newsec.
However, inserting new instructions may push a target address
beyond the reach of the instruction referencing it. To resolve
this issue, µSBS replaces every referencing instruction by
its substitute which allows for larger offsets. For instance,
it replaces b branch instructions with b.w to generate a 32-
bit instead of 16-bit instruction. Furthermore, it is necessary
to rewrite all branch instructions to handle the challenges
mentioned in § 3.2.
To safely handle reference targets and adjust the binary
layout, µSBS rewrites all direct branch instructions by stati-
cally changing their offsets. Thereafter, it rewrites all indirect
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    387
27/03/2020draw.iochrome-extension://pebppomjfocnoigkeepgbmcifnnlndla/index.html1/1                            80481d4:     movt r3, #1 80481d8:     ldr  r3, [r3] 80481dc:     mov  r0, r3 80481e0:     blx  r2  ...               82081d0:     .... ... 8208300:     ldr  r3, [r3] 8208304:     mov  r0, r3 8208308:     str  r0, [sp,#-64] 820830a:     mov  r0, r3 820830e:     bl   mapping 8208312:     str  r0, [sp,#-4] 8208314:     ldr  r0, [sp,#-64] 8208316:     add  lr, pc, #4 8208318:     ldr  pc, [sp,#-4] Mapping Routine||||||base = 0x8200000  r2   = 0x804816c+-----------------------------++-----------------------------+Values||||||...  0x81d0+-----------------------------++-----------------------------+Mapping Table0x804816cOriginal Code SectionRewritten Code SectionRewriting +-----------------------------++-----------------------------+Table 2: Comparison of fault observability between µSBS and
the heuristic-based method proposed by Muench et al. [42].
Memory Corruptions
Muench et al.
µSBS
Null Pointer Dereference
Stack-based buffer overﬂow
Heap-based buffer overﬂow
Format String
Double Free










and block_addr is the address of the memory block.
meta_addr = meta_base + (block_addr >> 3)
(1)
5 Evaluation
We evaluated µSBS from three different angles: (1) Whether
it can make faulty states observable on binary ﬁrmware in
an automatic fashion. (2) Whether it can rewrite the code
section of binary ﬁrmware without breaking its functionality.
(3) Assessing the runtime performance and size expansion of
rewritten binaries in practice.
To that end, we investigated µSBS ability to catch the same
class of memory bugs of the state-of-the-art [42] based on
the WYCNINWYC vulnerable application [15, 42] (§ 5.1).
We also conducted an evaluation on 11 real ﬁrmware images
to check the correctness of the rewritten binaries by using
the standard test suite that provided by the vendor of each
ﬁrmware (§ 5.2). Finally, we measure the runtime perfor-
mance of our rewritten and instrumented binaries (§ 5.3).
5.1 Effectiveness
We designed and performed this experiment to verify whether
µSBS can successfully make the same class of memory cor-
ruptions observable compared to state-of-the-art fault obser-
vation method proposed by Muench et al. [42].
Experiment Setup: We used WYCNINWYC application,
developed and used by Muench et al. as a testbench, in order
to obtain comparable results. The WYCNINWYC application
is a vulnerable implementation of an XML parser contain-
ing ﬁve different instances of spatial and temporal memory
corruptions. Experiments are performed on a same develop-
ment board, STM32-Nucleo L152RE [14] featuring an ARM
Cortex-M3 CPU.
Experiment Results: We instrumented the WYCNIN-
WYC application using the µSBS sanitizer and collected the
statistics and results, including the observability of faulty
states caused by memory corruptions. As shown in Table 2,
µSBS caught all faulty states without the need for reverse engi-
neering or advanced data-ﬂow analysis techniques as required
by the method of Muench et al. [42].
5.2 Feasibility
We performed this experiment to verify the correctness of the
µSBS design and its application to large real-world bare-metal
ﬁrmware. We rewrote the code sections of 11 binary ﬁrmware
images without sanitization and observed whether all rewrit-
ten binaries executed correctly and produced identical output
to the original.
Experiment Setup: We selected 11 real bare-metal bi-
nary ﬁrmware images for different applications, ranging from
cameras to industrial control systems. These are full-ﬂedged
ﬁrmware and demonstrate the use of a diverse set of peripher-
als including an LCD Display, Microphone, Camera, Serial
port, Ethernet and SD card. They collectively cover ARM
Cortex-M3 and Cortex-M4 microcontrollers. In what follows,
we provide a brief description of each ﬁrmware.
Audio-Playback ﬁrmware is developed for playing audio
ﬁles by reading data from USB and sending it to the audio
codec. LCD-Display is a ﬁrmware for reading and display-
ing a series of bitmaps from an SD card to the LCD. LCD-
Animate displays animated pictures saved on a microSD card
on the LCD. To create animated pictures, the ﬁrmware dis-
plays an images sequence with a determined frequency on
the LCD. Camera-USB uses the Digital Camera Interface
(DCMI) to connect with a camera module and display pic-
tures on an LCD in continuous mode while also saving these
pictures on the USB device. FatFs-uSD creates a FAT ﬁle
system on the microSD and uses FatFs APIs to access the
FAT volume in order to perform writing and reading of a
text ﬁle. TCP/UDP-Echo-Client/Server are four ﬁrmware for
running TCP/UDP echo client/server applications over Eth-
ernet based on LwIP, a popular TCP/IP stack for embedded
devices. mbed-TLS ﬁrmware runs an SSL client application
based on the mbed-TLS crypto library and the LwIP TCP/IP
stack for the STM32F4 family. PLC (Programmable Logic
Controller) is a family of embedded devices for controlling
critical processes in industrial environments. The ST-PLC
ﬁrmware implements a PLC that executes uploaded ladder
logic programs. The ladder logic program is uploaded to the
microcontroller from an Android application via WiFi (ladder
logic is a common PLC programming language).
All of these ﬁrmware images are provided with the de-
velopment boards and written by STMicroelectronics [10].
Experiments are performed on STM32-Nucleo F401RE [11],
STM32F479I-Eval [12], and STM32F4Discovery [13] de-
velopment boards featuring an ARM Cortex-M4 CPU and
STM32-Nucleo L152RE [14] featuring an ARM Cortex-M3
CPU.
Experiment Results: We executed both the rewritten ver-
sion and the original version of the ﬁrmware on the test suit
shipped with the ﬁrmware and compared their functional cor-
rectness. All of the rewritten ﬁrmware passed the functionality
test and ran correctly, producing the same result as the original
ﬁrmware.
388    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Table 3: Statistical metrics of µSBS binary rewriting when applying to bare-metal ﬁrmware.
Firmware
Audio-Playback
LCD_Display
LCD_Animate
FatFs_uSD
TCP_Echo_Client
TCP_Echo_Server
UDP_Echo_Client
UDP_Echo_Server
Camera-USB
mbed-TLS
ST-PLC
MCU
Dir. Inst.
Ind. Inst. Code (KB) Rew. Code (KB)
Size Inc. (%)
STMF479I-Eval
STMF479I-Eval
STMF479I-Eval
STMF4Discovery
STMF479I-Eval
STMF479I-Eval
STMF479I-Eval
STMF479I-Eval
STMF479I-Eval
STMF401RE Nucleo
STMF479I-Eval
1853
809
803
575
1407
1384
1341
1310
1003
3218
2275
250
103
103
150
132
132
132
130
163
338
373
132
48
48
23
79
77
76
75
70
171
168
195
57
56
29
91
89
88
87
81
215
231
24
10
10
6
14
14
14
14
13
20
67
Table 3 presents the rewriting statistics and the modiﬁca-
tions made by µSBS to the binary ﬁrmware images. The col-
umn under Dir. Inst. in the table represents the count of direct
branch instructions, including calls and jumps, that are stati-
cally rewritten by changing their offsets. The column under
Ind. Inst. represents the count of indirect branch instructions
redirected to the mapping routine by µSBS.
Additionally, columns Code and Rew. Code represent the
sizes of original code section and the rewritten code sec-
tion (.newsec) respectively. The code section size overhead
correlates positively with the number of indirect branch in-
structions due to the rewriting procedure that replaces each
indirect branch with 6/7 instructions (§ 4.1). Furthermore,
the ﬁxed overhead of the mapping table and mapping routine
play a signiﬁcant role in the size overhead of the binary ﬁle
(last column). In fact, the size overhead in percent will be less
for large ﬁrmware compared to small images. For example,
the original size of the ST-PLC ﬁrmware is 1.1MB and has
67% overhead, while mbed-TLS is 3.5MB and has only 20%
overhead.
5.3 Performance
µSBS with no sanitization slows down ﬁrmware execution for
two reasons. First, the ﬁrmware is statically instrumented and
there is an additional direct call added for each indirect branch
instruction to call the mapping routine. Second, µSBS dynam-
ically searches for the new target address of every indirect