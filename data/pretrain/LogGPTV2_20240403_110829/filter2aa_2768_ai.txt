The node authenticates the incoming connection by its IP address combined with the
given connection ID.
8.2.  
The node matches the connection to the corresponding previously forwarded dummy
package (and thus also to the right encryption key which was chosen during that
forwarding procedure, described in step 3 above), by matching the first data block
that arrives over the connection against the time limited cache of all such previously
forwarded dummy packages. The matching entry is then removed from the cache
after the encryption key for the new connection has been stored separately.
8.3.  
The node decrypts both the first received data block (i.e. the copy of the originally
forwarded dummy package) and the second one (i.e. the new tunnel initialization
package), using the encryption key derived in the previous step.
8.4.  
The node establishes a new connection to the previous node in the routing path, i.e.
to the same IP address and port used during the original routing path setup
procedure, authenticating it in both directions by means of the original connection ID
used between the nodes in the original routing path setup procedure, and the
previously stored (during the routing path setup procedure) “server-side” SSL
certificate for this previous node.
8.5.  
The node sends the two decrypted data blocks (i.e. the copy of the originally
forwarded dummy package and the new tunnel initialization package) over the newly
established and authenticated connection, in the same order that they were received.
9.  The anonymized node finally receives the tunnel initialization package, after it has traversed
the entire routing path, at this point “decrypted” (in the situation at hand effectively working
rather as an encryption, but the terms are important here) once by each of its intermediate
nodes, with randomly selected keys from each of their individual sets of keys, which are
known by the anonymized node (since it created the seeds and parameters for generating
these keys, and can thus duplicate this process locally). At this point, the separate
connection for the routing tunnel has also been successfully established throughout the
entire routing path.
10.  The anonymized node calculates which exact key out of its known set of keys that each
individual node in the routing path has selected for this particular tunnel, i.e. the key that was
used by each of them to decrypt the tunnel initialization package. This is done by brute
forcing over all keys in all the known sets of keys for each individual node in the routing path.
The number of keys in the set of each node can be arranged in a way that this entire
operation takes no more than e.g. 0.1 – 0.5 seconds (or any other chosen length of time),
during which still a considerable amount of e.g. AES blocks can be processed in memory.
The test being performed on the resulting plaintext block to know if a certain brute force
attempt was successful is related to the crypto key initialization block, mentioned in step 5.1
above (just as with all other steps, this will be explained in much more detail in the next
section).
First of all, a few words about why different keys need to be used to begin with. Why can’t each
node just have a single secret symmetrical key, instead of randomly selecting one from a pre-
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
48(68)
defined set? The reason is that we don’t want the nodes in the path to be able to communicate
with each other through “covert channels”, i.e. using parts of the protocol as a means of encoded
communication. The multiple keys prevent non-adjacent nodes from being able to communicate
with each other through repeated requests for new tunnels, and indirectly through the data
contained in the tunnel initialization packages of these. Using multiple keys chosen individually by
the each node during the establishment of each tunnel, there are no means for a node in the path
to deterministically influence the encrypted form of the tunnel initialization package coming out of
its adjacent node, and even less the remaining nodes.
So, let’s talk some more about the test through which the anonymized node can determine the
randomly selected keys (from the predefined sets) for each nodes. To visualize this test, it can be
seen as a number of nested for-loops (the number of loops being equal to the number of nodes in
the routing path), where each for-loop iterates through the entire pre-defined set of keys for its
corresponding node in the routing path, and the innermost loop performs the final consistency
test on the crypto key initialization block. If there were to be, let’s say, four nodes in a particular
routing path, and they would have respectively 10, 50, 100 and 200 keys in their individual sets,
this would result in a maximum of 4 * (10 * 50 * 100 * 200) = 40,000,000 block encryption tests
(where the factor 4 comes from the fact that for each tested combination, one block encryption
needs to be performed for each node in the path, which in this case is four nodes). Regardless of
whether this is a reasonable number or not, the number of keys in the node key sets will always
be automatically adjusted by the anonymized node itself to make sure that the operation always
completes in a reasonable amount of time on its hardware, e.g. 0.1 – 0.5 seconds. Also, with the
ongoing and upcoming mainstream deployment of massively parallel (multi core) processors,
such an operation shouldn’t practically have to pose any noticeable delay at all.
The main concept of this method is that any attacker (e.g. any of the intermediary nodes in the
path) would rather have to crack at least the equivalence of one full 128-bit key for each of the
nodes in the path in order to get hold of the used keys, an exercise which is not feasible at all (as
long as the symmetrical algorithm used, e.g. AES, isn’t itself cracked, of course, but even in that
event it could be easily replaced too).
11.  When all the chosen keys of each individual node in the entire routing path have been
recovered, a final validation of the checksum in the recovered package is performed,
reducing the risk of false positives to one in 264 or less. It should always match under normal
circumstances (possible exception conditions will be discussed later).
12.  The anonymized node prepares a special tunnel initialization reply package, of the same
size as the original tunnel initialization package, containing the following (just as with all
other steps, this will be explained in much more detail in the next section):
12.1.  The desired AP address and port to create an outbound connection to.
12.2.  A secure checksum.
Just as with the dummy random data package, discussed in step 2 above, using the size of a
single crypto block is good for preventing an attacker from piggy-backing data with the block as it
is being forwarded through the tunnel. In the case of a single symmetric crypto block, the entire
plaintext contents of it will become completely corrupted if only a single bit of it is altered by any
node in the routing path, which will also be immediately discovered by use of the internal
checksum when it reaches the exit node.
13.  The anonymized node encrypts the tunnel initialization reply package with all the individual
recovered keys of the routing path nodes, in the appropriate sequence, in such a way that it
will be decrypted correctly once it reaches the exit node, and sends it back through the newly
created separate connection for the tunnel.
14.  The receiving X-node performs the following sub-procedure, which is then repeated by all
subsequent nodes in the routing path:
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
49(68)
14.1.  The node decrypts the (at this point already previously decrypted by all preceding
nodes in the routing path) tunnel initialization reply package, with the previously
chosen key for the connection, as a single block.
14.2.  The node sends off the decrypted dummy package to the next intermediate node in
the routing path, over the newly created separate connection for the tunnel.
15.  The exit node finally receives the tunnel initialization reply package, after it has traversed the
entire routing path, at this point being decrypted into the plaintext state in which it was
created by the anonymized node in the other end of the routing path. It verifies the
checksum, and then immediately attempts to create an outgoing connection to the stated AP
address and port.
16.  If the external connection attempt does not succeed, the exit node simply closes down the
newly created connection for the tunnel, which will cause a chain reaction closing down all
the parts of the connection, all the way back to the anonymized node, which at this point will
know that the connection attempt failed. If the external connection attempt does succeed, the
exit node sends a dummy data package, having the same size as the tunnel initialization
package and containing only random data, back through the newly established connection.
Similar to the tunnel initialization package, it will be encrypted by each node with the
established key for the connection, and eventually reach the anonymized node, which will
then know that the connection has succeeded, and be able to start using it immediately. At
this point, the routing tunnel creation is complete and the application layer on each side of
the connection is notified of this, and can thus start communicating arbitrary data over the
connection, equivalent to a TCP connection.
Inbound Routing Tunnel Setup Procedure
1.  The entry node of the inbound routing path (i.e. entry path) receives a connection
establishment request from another node in the anonymous network.
2.  The entry node prepares a special tunnel initialization package, having the same size as the
initial dummy package in the outbound routing tunnel creation procedure described above,
i.e. the size of a single symmetric crypto block (128 bits or more), containing the following
(just as with all other steps, this will be explained in much more detail in the next section):
2.1.  
A crypto key initialization block, constructed in a way that the risk of falsely
diagnosing it as a positive in a certain kind of test will be one in 232, or less.
2.2.  
The IP address of the connecting node (Note: remember that this is only the IP
address of the node that directly connects to the entry node, i.e. if the node that
initiated this connection is anonymized by means of an exit path, this will only be the
IP address of the exit node of this exit path, thus not revealing any sensitive
information in regards to the identity of the remote anonymized node).
2.3.  
The AP address of the anonymized node that the connecting node intends to create
a connection to by means of this connection.
The crypto key initialization block is constructed in exactly the same way as described in the
comment for step 5 in the outbound routing tunnel setup procedure above. Instead of an extra
checksum however, the false positive rate for the consistency test can be reduced to at least one
in 264 by validating that the stated AP address matches the AP address of the anonymized node.
Just as with the data packages discussed in the outbound routing tunnel setup procedure above,
using the size of a single crypto block is good for preventing an attacker from piggy-backing data
with the block as it is being forwarded through the tunnel.
3.  The entry node performs the following sub-procedure, which is then repeated by all
subsequent nodes in the routing path:
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
50(68)
3.1.  
The node randomly selects one of the stream encryption keys from its local set of
such keys, which it generated previously in step 11.13 of the routing path creation
process.
3.2.  
The node encrypts the (at this point already previously encrypted by all preceding
nodes in the routing path, except of course for the entry node, which doesn’t have
any preceding nodes and was the one to prepare the package to begin with) tunnel
initialization package with the chosen key, as a single block.
3.3.  
The node saves the encrypted tunnel initialization package in a time limited cache
(containing all such recently forwarded tunnel initialization packages), together with
the encryption key that was chosen for the package, and then sends off the
encrypted tunnel initialization package to the next intermediate node in the routing
path (i.e. its adjacent X-node if using the same nomenclature as during the creation
procedure for routing paths) over the already established connection remaining since
the routing path setup process.
4.  The anonymized node that owns the routing path receives the tunnel initialization package
after it has traversed the entire routing path, at this point being encrypted once by each of its
intermediate nodes, with randomly selected keys from each of their individual sets of stream
encryption keys, which are known by the anonymized node (since it created the seeds and
parameters for generating these keys, and can thus duplicate this process locally).
5.  The anonymized node calculates which exact key out of its known set of keys that each
individual node in the routing path has selected for this particular tunnel, i.e. the key that was
used by each of them to encrypt the tunnel initialization package. This is done by brute
forcing over all keys in all the known sets of keys for each individual node in the routing path.
The number of keys in the set of each node can be arranged in a way that this entire
operation takes no more than e.g. 0.1 – 0.5 seconds (or any other chosen length of time),
during which still a considerable amount of e.g. AES blocks can be processed in memory.
The test that is performed on the resulting plaintext block to know if a certain brute force
attempt was successful is related to the crypto key initialization block, mentioned in step 2.1
above (just as with all other steps, this will be explained in much more detail in the next
section).
This key derivation procedure is performed in the exact same way as described in the comment
for step 10 in the outbound routing tunnel setup procedure above.
6.  When all the chosen keys of each individual node in the entire routing path have been
recovered, a final validation of the target AP address of the connection is performed, to
confirm that it was indeed intended for the actual AP address that the anonymized node has
registered. In addition, this can be seen as an extension to the brute force key recovery
procedure in the previous step, which reduces the risk of false positives to one in 264. The
AP address should always match under normal circumstances (possible exception
conditions will be discussed later).
7.  The anonymized node prepares a special tunnel initialization reply package, of the same
size as the original tunnel initialization package, containing the following (just as with all
other steps, this will be explained in much more detail in the next section):
7.1.  
A flag block, containing multiple flags for communication of exceptional
circumstances from the anonymized node to the entry node.
7.2.  
A secure checksum.
8.  The anonymized node encrypts the tunnel initialization reply package with all the individual
keys of the routing path nodes, in the appropriate sequence, in such a way that it will be
decrypted correctly once it reaches the entry node.
9.  The anonymized node establishes a completely new connection to the previous node in the
routing path, i.e. to the same IP address and port used during the original routing path setup
procedure, authenticated with the original connection ID used between the nodes in the
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
51(68)
original routing path setup procedure. A copy of the originally received tunnel initialization
package is then sent over this connection, immediately followed by the new and repeatedly
encrypted tunnel initialization reply package.
10.  The receiving X-node performs the following sub-procedure, which is then repeated by all
subsequent nodes in the routing path:
10.1.  The node authenticates the incoming connection by its IP address combined with the
given connection ID.
10.2.  The node matches the connection to the corresponding previously forwarded tunnel
initialization package (and thus also the right encryption key which was chosen
during that forwarding procedure, described in step 3 above), by matching the first
data block that arrives over the connection against the time limited cache of all such
previously forwarded tunnel initialization packages. The matching entry is then
removed from the cache after the encryption key for the new connection has been
stored separately.
10.3.  The node decrypts both the first received data block (i.e. the copy of the originally
forwarded tunnel initialization package) and the second one (i.e. the new tunnel
initialization reply package), using the encryption key derived in the previous step.
10.4.  The node establishes a new connection to the previous node in the routing path, i.e.
to the same IP address and port used during the original routing path setup
procedure, and authenticates it in both directions by means of the original connection
ID used between the nodes in the original routing path setup procedure, and the
previously stored (during the routing path setup procedure) “server-side” SSL
certificate for this previous node.
10.5.  The node sends the two decrypted data blocks (i.e. the copy of the originally
forwarded tunnel initialization package, and the new tunnel initialization reply
package) over the newly established and authenticated connection, in the same
order that they were received.
11.  The entry node finally receives the tunnel initialization reply package, after it has traversed
the entire routing path, at this point being decrypted into the plaintext state in which it was
created by the anonymized node in the other end of the routing path. The flags of the
package can now be interpreted by the entry node, and under normal circumstances
everything should be ok, and the routing tunnel has now been successfully established
throughout the entire routing path.
12.  The entry node notifies the external node that submitted the original connection
establishment request that the tunnel has been set up and is ready for communication (the
nature of this communication will be described in the section regarding secure
communication over routing tunnels, below).
13. This last step is completely unnecessary for the functionality of this procedure. It is only
implemented in order to make the inbound routing tunnel setup process identical and
symmetrical to the outbound routing tunnel setup process, in regards to any external
observers or even any intermediary node in the routing path.
The entry node sends a dummy data package, having the same size as the tunnel
initialization package and containing only random data, back through the newly established
connection. Equivalent to the matching step of the outbound tunnel establishment procedure
(step 14), it will be decrypted by each node with its established key for the connection, and
eventually reach the anonymized node, which will just discard it and send a new random
package of the same size back through the connection. Equivalent to the matching step of
the outbound tunnel establishment procedure (step 16), it will be encrypted by each node
with its established key for the connection, and eventually reach the entry node, which will
then discard it. At this point, the inbound routing tunnel creation is complete and the
application layer on each side of the connection is notified of this, and can thus start
communicating arbitrary data over the connection, equivalent to a TCP connection.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author: