4.3 Privacy
Without knowledge of the shared symmetric key K, the
server is unable to obtain any information from the en-
crypted transaction descriptions, aside from timing and size.
Transaction slot requests contain no additional information.
5 Lock-free outsourced serialization
and durability
The obvious disadvantage to the above protocol is that it
requires a global lock, restricting transaction processing as
only one client may be active at a time. We now remove
all locking from the protocol described above, and replace
it with an optimistic conﬂict-detection mechanism. This al-
lows clients to run transactions simultaneously, but adds the
requirement that transactions are rolled back and reissued
in the case of conﬂicts.
At an overview level, this protocol works as follows.
Clients ﬁrst issue an (encrypted) notiﬁcation of their pend-
ing transaction, relayed to the other clients through the un-
trusted server. This contains enough information to allow
other clients to determine whether it might cause a conﬂict
with their own pending transactions. After this notiﬁcation
(“pre-commit”), clients then check to see if their pending
transaction might conﬂict with any transactions scheduled
to run before theirs. If not, they issue the commit; other-
wise they retry with a new request. As in the previous pro-
tocol, clients maintain a transaction hash chain to guarantee
consistency for misbehaving servers.
In this solution, running a transaction entails the following
steps, outlined in ﬁgure 1:
1. The client simulates the intended transaction on its lo-
cal database copy, then undoes this transaction on its
own database copy.
(Issuing the RollbackLocal
client command deﬁned in the Model section). It will
properly apply the transaction only once it has applied
the pending transactions ﬁrst.
2. Once ready to commit, the client issues the “Request
slot” command to the server, attaching an encrypted
pre-commit transaction description P of its intended
transaction, and the slot number l which is the latest
the client knows about.
3. The server allocates a slot s, and sends back a list of all
new pre-commit descriptions Pl . . . Ps−1 up to s. The
server may choose to also send any previously com-
mitted transactions that the client hasn’t seen yet at this
point (e.g., this is the case if the client just joined or has
been ofﬂine for a while).
4. The client veriﬁes the signatures on each pre-commit,
and checks whether its transaction conﬂicts with these
pre-committed transactions (conﬂict semantics were
discussed in Section 3). E.g., a conﬂict occurs with
pre-commit Pj, l  j, and client d applies the update at k from client c,
then c and d are j-trace consistent.
Proof. Assume that client d has applied update k from
Thus, client d’s computation of HC(k)
client c.
agrees with Ck.pre-hashchain, and the contents of the
transactions are consistent;
the inconsistency is there-
fore in the commit/abort status of transaction j. Since
client c applied transaction j before issuing update k,
Ck. commit-hashchain-position ≥ j. Similarly, since
client d has applied transaction i, client d veriﬁes that
Ck. commit-hashchain matches d’s own computation of
that chain link. However, since these two chain links have
different values as inputs (one indicating that transaction j
committed, and one indicating it did not), there is a hash