Accept(pk, m, σ) = 0
Validate(vk, pk, m, σ) = 1
∧
(sk, pk, vk) ← KeyGen(param, 1N )
param ← Setup(1α, 1λ)
m ∈R M, σ ∈R Σ
 = 0,
3. Undeniability. We require that no polynomially bounded
signer can produce an acceptable signature that is not valid
even when she has an oracle access that, on query, returns
a pair composed of a random message and a spurious sig-
nature for it. Concretely, we denote by OForge an oracle ini-
tialized with the public key pk to which the adversary asks
for spurious signatures of adaptively chosen messages. Nat-
urally, the adversary is not allowed to output a signature for
a message that was submitted to OForge. In other words, for
all naturals α, λ and every polynomial-time algorithm Ap,
we have
Pr
Validate(vk, pk, m, σ) = 0
param ← Setup(1α, 1λ)
(m, σ) ← AOForge
(sk, pk)
with the probability taken over the randomness of Setup,
KeyGen, and Ap.
 = negl(λ),
(sk, pk, vk) ← KeyGen(param, 1N )
Accept(pk, m, σ) = 1,
p
4. Validatability. We say that the scheme is validatable against
adversaries able to solve instances of hard problems if for
any polynomially bounded adversary who has access to an
oracle Ohard that can solve problems lying in FNP (which
may be equivalent to an NP-Complete problem), and to a
signing oracle OSign to which she can submit N adaptively
chosen messages, it holds that for all naturals α, λ and every
Pr
Accept(pk, m, σ) = 1
Validate(vk, pk, m, σ) = 1
param ← Setup(1α, 1λ)
(m, σ) ← AOSign (pk, vk)
(sk, pk, vk) ← KeyGen(param, 1N )
Accept(pk, m, σ) = 1
PPT algorithm AOSign,Ohard,
Pr
Validate(vk, pk, m, σ) = 1
param ← Setup(1α, 1λ)
(m, σ) ← AOSign,Ohard (pk)
(sk, pk, vk) ← KeyGen(param, 1N )
is negligible, where the probability is taken over the random-
ness of all the probabilistic algorithms.
 − 2−α
5. Trustability. We say that the scheme is trustable if no mali-
cious judge, modeled as a polynomially bounded adversary
who has knowledge of both public and validation keys and
has access to a signing oracle OSign, to which she can sub-
mit N adaptively chosen messages, can output a valid signa-
ture on a message not submitted to OSign. In other words, we
require that
is negligible, where the probability is taken over the random-
ness of Setup, KeyGen, OSign (if Sign is probabilistic), and
A.
In contrast to fail-stop signatures, once a forgery occurs, it does
not put honestly produced signatures under question. This is a con-
sequence of the correctness requirement as the judge is the one de-
ciding the validity of the signatures. However, in fail-stop signa-
tures, the proof of forgery was computed by the signer. Moreover,
we require stronger properties here as the signer should not be able
to produce spurious signatures once a forgery happens. We do not
explicitly specify that the signer does not have the validation key
vk. Indeed, this is not a requirement for our construction and the
signer may be able to compute vk from sk.
Moreover, we could have given the signer the ability to obtain
valid forgeries. However, as the undeniability property will only be
considered in conjonction with validatibility, the probability that a
forger manages to produce a valid signature is negligible. There-
fore, when considering secure forgery-resilient schemes, the prob-
ability that the signer obtains such a signature is negligible. More-
over, we show in Appendix D that giving the adversary the access
to an oracle implementing the Validate algorithm does not affect
the security of the scheme.
4.
INSTANTIATING A FORGERY-RESILIENT
DIGITAL SIGNATURE SCHEME
In this section, we present our concrete proposal of a forgery-
resilient digital signature scheme. Throughout this section and the
following one, we assume the existence of a strongly collision-free
accumulator scheme. In short, an accumulator scheme is said to
be strongly collision-free if it remains collision-free even if the ad-
versary obtains the witness of an element that was not in the accu-
mulated set (see Appendix B for a proper deﬁnition and an explicit
construction.).
Setup(1α, 1λ).
The setup algorithm ﬁrst picks an α-bit odd prime number a and
an α-bit odd positive integer b such that gcd(a, b) = 1. Then, it
generates an RSA modulus n = pq by choosing two random prime
numbers p and q such that p = 2ap + 1 and q = 2bq + 1
are also prime numbers. We further require that ϕ(n) > N. It
also picks an integer e < ϕ(n) such that gcd(e, ϕ(n)) = 1. In
parallel, the algorithm sets the accumulator key for a collision-free
accumulator scheme by calling AccKey(1λ) → (Kacc,·). For the
sake of simplicity, we let a = ae and b = be.
The message space of the resulting scheme is M = Za. The
param (n, a, b, e, Kacc) is published.
KeyGen(param, 1N ).
The protocol runs as follow:
• The signer picks a random index K for a PRF FK : Zϕ(n) →
n.
Z
i and vi = gb
• The signer computes gi = FK(i), for i = 1 . . . N, and then
yi = ga
i . He then sends the list of vi’s to the
judge. After that, the signer accumulates the set of yi’s, i.e.,
he calls upon AccKacc (y1, . . . , yN ) → (z, aux).
• The signer picks g ∈ Z
v = gb, and transmits the last value to the judge.
n at random, computes y = ga and
• The predicate Ψ for the judge’s veriﬁcation consists of check-
ing whether yb = va. If the last equality does not hold, then
he outputs ⊥.
The scheme’s keys are set to sk = (g, K, aux), pk = (a, b, e, n, y, z),
and vk = (v, v1, . . . , vN ). At the end of key generation, the signer
sets a state counter ctr to 0.
Sign(sk, m).
The signer ﬁrst starts with incrementing its state counter by one:
ctr = ctr + 1. He then recomputes gctr = FK(ctr) and let
yctr = ga
ctr. After that, it computes the witness of yctr by calling
wKacc (yctr, z, aux) → wctr. At last, given the message m ∈ M, he
. He releases the pair (gm, yctr, wctr) as
computes gm = gm · gb+m
his signature.
ctr
Accept(pk, m, σ).
Given a signature σ = (gm, yctr, wctr) on a message m, the ac-
cept algorithm checks whether EvalAuthKacc (yctr, wctr, zacc) = 1
and ga
m = ymyb+m
.
ctr
Validate(vk, pk, m, σ = (gm , y)).
The validation algorithm ﬁrst calls Accept(pk, m, σ). If the
signature is not acceptable, it yields 0, meaning “not a forgery”.
 = va
Once the signature has been proven to be acceptable, it checks
whether there exists an i, 0 < i ≤ N, for which the following
equality holds yb
i . If no index is found, then the algorithm
stops and outputs 1, which means “forgery”. After that, Validate
tests the equality gb
vm. If it holds, the algorithm outputs
1, which means “not a forgery”, and that the signature is valid.
Otherwise, it outputs 0 in which case the signature is spurious.
4.1 Reducing the size of the Validation Key
m = vb+m
i
While we assume that the judge can behave maliciously, we
might consider a scenario in which he behaves honestly given its
position as a legislative authority. In this settings, we can adapt our
construction and sacriﬁce trustability to obtain a validation key of
constant size. That is, we proceed by replacing the list of vi’s by
K and updating the Validate algorithm accordingly. It is clear that
other properties that trustability are still valid in this context as they
do not depend on the validation key.
4.2 Online Judges
Alternatively, we could make the rather constraining assumption
that the judge is online and reachable whenever the signer wishes
to compute a signature. In this scenario, the construction simpliﬁes
in a way that instead of generating the vi’s from a PRF, they could
be purely random. Then at each signature, the signer sends the
signature along with the corresponding vi to the judge (Note that
the channel is not necessarily secure). The later alerts in case of
a detected forgery. A more detailled treatment of this variant will
appear in the full version of the paper.
5. SECURITY ANALYSIS
This section is devoted to showing the correctness of the scheme
we propose in Section 4 and its security. Due to lack of space, we
leave the proof of trustability to Appendix C.
5.1 Correctness and Soundness
THEOREM 3. The scheme deﬁned in Section 4 is correct and
sound. Furthermore, given yctr there exists exactly one valid signa-
ture (gm, yctr) for every message m.
PROOF. First, note that the ﬁrst step of Validate is to check
whether the signature it receives is acceptable and outputs 0 if it
is not the case. Hence, every non-acceptable signature is rejected
by Validate and the scheme is sound.
We also have to show that any signature produced by the Sign
algorithm passes the Accept test. Clearly, from the signature algo-
rithm we havegm = gm · gb+m
. By raising both sides to the power
of a = ae, we obtain
·ga
m =gam
ctrb+m
which corresponds to the equation of the Accept algorithm.
= ym · yb+m
ga
(4)
Now, recall that a valid signature passes the Validate algorithm,
ctr
ctr
,
i.e., such a signature veriﬁes
gb
m =gbm
·gb
ctrb
= vm · vb
ctr.
(5)
m = ga
We now show that this signature is unique with respect to yctr.
Assume that there exists two distinct valid signatures (gm, yctr)
and (gm, yctr) for a message m (gm = gm). From Equations (4)
and (5), we deduce that ga
m. Let x =
m . Note that since gm = gm, we should have x = 1,
gm · g−1
xae = 1, and xbe = 1. This implies that the order of x divides
both ae and be. As gcd(a, b) = 1, it must be that xe = 1. Since
gcd(e, ϕ(n)) = 1, we deduce x = 1 This contradicts the assump-
tion, so there can only exist one gm.
5.2 Undeniability: Security against Malicious
m and gb
m = gb
Signers
The following theorem formalizes the fact that in order to pro-
duce a spurious signature, the signer needs to compute the factor-
ization of the RSA modulus.
THEOREM 4. If the factorization assumption holds (Deﬁnition 1)
and the accumulator scheme is strongly collision-free, then the scheme
described in Section 4 is undeniable.
PROOF. Let Ap be a malicious signer that queries OForge to ob-
tain Σ = (m1, (gm1
, y1, w1)), . . . , (m, (gm , y, w)), a list
of pairs message and spurious signature. Recall that Ap is success-
ful when it outputs a spurious, i.e., acceptable and not valid, sig-
nature (g
m , y, w) on a message m that was not submitted to
OForge. We use the game methodology to separate different cases
depending on the accumulated value contained in the adversary’s
spurious signature.
• Game 0. This is the original game played by Ap
• Game 1. In this game, we deal with the event E1 that an
adversary wins by producing an acceptable signature such
that y is neither in Σ nor in {y1, . . . , yN}. That is, we
are considering adversaries who, in order to produce an ac-
ceptable signature, defeat the security of the accumulator
scheme. In other words, the adversary succeeds in producing
a pair (y, w) such that EvalAuthKacc (y, w) = 1.
We construct an adversary Aacc against the accumulator scheme
as follows. The challenger performs AccKey to generate
Kacc for the adversary Aacc who generates N, a, b and ex-
ecutes KeyGen for Ap, hence perfectly emulating Ap’s en-
vironment. Aacc also simulates OForge by picking a random
ctr, submitting y
ctr to its own oracle for obtaining its
g
witness w
. In the end,
m = gm · gb+m
it returns the pair (g
ctr) as the forged signature. By
construction, this pair is an acceptable signature if the wit-
ness w
ctr satisﬁes EvalAuth. At the end of Ap’s execution,
Aacc outputs (y, w) which veriﬁes with AuthEval when
Ap wins, i.e., Pr[Aacc wins] = Pr[Ap wins|E1]. How-
ever, under the hypothesis that the accumulator is strongly
collision-free, the probability above is negligible.
ctr, and computing g
ctr, w
ctr = ga
m, y
ctr