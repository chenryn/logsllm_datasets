Segment (TSS)
#TS
11
Segment Not Present
#NP
12
Stack-Segment Fault
#SS
13
General Protection
#GP
14
Page Fault
#PF
15
Intel Reserved
-
16
x87 Floating Point
#MF
17
Alignment Check
#AC
18
Machine Check
#MC
19
SIMD Floating Point
#XM or 
#XF
20
Virtualization Exception
#VE
21
Control Protection (CET)
#CP
All exceptions, except those simple enough to be resolved by the trap
handler, are serviced by a kernel module called the exception dispatcher. The
exception dispatcher’s job is to find an exception handler that can dispose of
the exception. Examples of architecture-independent exceptions that the
kernel defines include memory-access violations, integer divide-by-zero,
integer overflow, floating-point exceptions, and debugger breakpoints. For a
complete list of architecture-independent exceptions, consult the Windows
SDK reference documentation.
The kernel traps and handles some of these exceptions transparently to
user programs. For example, encountering a breakpoint while executing a
program being debugged generates an exception, which the kernel handles by
calling the debugger. The kernel handles certain other exceptions by
returning an unsuccessful status code to the caller.
A few exceptions are allowed to filter back, untouched, to user mode. For
example, certain types of memory-access violations or an arithmetic
overflow generate an exception that the operating system doesn’t handle. 32-
bit applications can establish frame-based exception handlers to deal with
these exceptions. The term frame-based refers to an exception handler’s
association with a particular procedure activation. When a procedure is
invoked, a stack frame representing that activation of the procedure is pushed
onto the stack. A stack frame can have one or more exception handlers
associated with it, each of which protects a particular block of code in the
source program. When an exception occurs, the kernel searches for an
exception handler associated with the current stack frame. If none exists, the
kernel searches for an exception handler associated with the previous stack
frame, and so on, until it finds a frame-based exception handler. If no
exception handler is found, the kernel calls its own default exception
handlers.
For 64-bit applications, structured exception handling does not use frame-
based handlers (the frame-based technology has been proven to be attackable
by malicious users). Instead, a table of handlers for each function is built into
the image during compilation. The kernel looks for handlers associated with
each function and generally follows the same algorithm we described for 32-
bit code.
Structured exception handling is heavily used within the kernel itself so
that it can safely verify whether pointers from user mode can be safely
accessed for read or write access. Drivers can make use of this same
technique when dealing with pointers sent during I/O control codes
(IOCTLs).
Another mechanism of exception handling is called vectored exception
handling. This method can be used only by user-mode applications. You can
find more information about it in the Windows SDK or Microsoft Docs at
https://docs.microsoft.com/en-us/windows/win32/debug/vectored-exception-
handling.
When an exception occurs, whether it is explicitly raised by software or
implicitly raised by hardware, a chain of events begins in the kernel. The
CPU hardware transfers control to the kernel trap handler, which creates a
trap frame (as it does when an interrupt occurs). The trap frame allows the
system to resume where it left off if the exception is resolved. The trap
handler also creates an exception record that contains the reason for the
exception and other pertinent information.
If the exception occurred in kernel mode, the exception dispatcher simply
calls a routine to locate a frame-based exception handler that will handle the
exception. Because unhandled kernel-mode exceptions are considered fatal
operating system errors, you can assume that the dispatcher always finds an
exception handler. Some traps, however, do not lead into an exception
handler because the kernel always assumes such errors to be fatal; these are
errors that could have been caused only by severe bugs in the internal kernel
code or by major inconsistencies in driver code (that could have occurred
only through deliberate, low-level system modifications that drivers should
not be responsible for). Such fatal errors will result in a bug check with the
UNEXPECTED_KERNEL_MODE_TRAP code.
If the exception occurred in user mode, the exception dispatcher does
something more elaborate. The Windows subsystem has a debugger port (this
is actually a debugger object, which will be discussed later) and an exception
port to receive notification of user-mode exceptions in Windows processes.
(In this case, by “port” we mean an ALPC port object, which will be
discussed later in this chapter.) The kernel uses these ports in its default
exception handling, as illustrated in Figure 8-24.
Figure 8-24 Dispatching an exception.
Debugger breakpoints are common sources of exceptions. Therefore, the
first action the exception dispatcher takes is to see whether the process that
incurred the exception has an associated debugger process. If it does, the
exception dispatcher sends a debugger object message to the debug object
associated with the process (which internally the system refers to as a “port”
for compatibility with programs that might rely on behavior in Windows
2000, which used an LPC port instead of a debug object).
If the process has no debugger process attached or if the debugger doesn’t
handle the exception, the exception dispatcher switches into user mode,
copies the trap frame to the user stack formatted as a CONTEXT data
structure (documented in the Windows SDK), and calls a routine to find a
structured or vectored exception handler. If none is found or if none handles
the exception, the exception dispatcher switches back into kernel mode and
calls the debugger again to allow the user to do more debugging. (This is
called the second-chance notification.)
If the debugger isn’t running and no user-mode exception handlers are
found, the kernel sends a message to the exception port associated with the
thread’s process. This exception port, if one exists, was registered by the
environment subsystem that controls this thread. The exception port gives the
environment subsystem, which presumably is listening at the port, the
opportunity to translate the exception into an environment-specific signal or
exception. However, if the kernel progresses this far in processing the
exception and the subsystem doesn’t handle the exception, the kernel sends a
message to a systemwide error port that Csrss (Client/Server Run-Time
Subsystem) uses for Windows Error Reporting (WER)—which is discussed
in Chapter 10—and executes a default exception handler that simply
terminates the process whose thread caused the exception.
Unhandled exceptions
All Windows threads have an exception handler that processes unhandled
exceptions. This exception handler is declared in the internal Windows start-
of-thread function. The start-of-thread function runs when a user creates a
process or any additional threads. It calls the environment-supplied thread
start routine specified in the initial thread context structure, which in turn
calls the user-supplied thread start routine specified in the CreateThread call.
The generic code for the internal start-of-thread functions is shown here:
Click here to view code image
VOID RtlUserThreadStart(VOID)
{
    LPVOID StartAddress = RCX;   // Located in the initial thread 
context structure
    LPVOID Argument = RDX;   // Located in the initial thread context 
structure
    LPVOID Win32StartAddr;
    if (Kernel32ThreadInitThunkFunction != NULL) {
        Win32StartAddr = Kernel32ThreadInitThunkFunction;
    } else {
        Win32StartAddr = StartAddress;
    }
    __try
    {
        DWORD ThreadExitCode = Win32StartAddr(Argument);
        RtlExitUserThread(ThreadExitCode);
    }
    __except(RtlpGetExceptionFilter(GetExceptionInformation()))
    {
        NtTerminateProcess(NtCurrentProcess(), GetExceptionCode());
    }
}
Notice that the Windows unhandled exception filter is called if the thread
has an exception that it doesn’t handle. The purpose of this function is to
provide the system-defined behavior for what to do when an exception is not
handled, which is to launch the WerFault.exe process. However, in a default
configuration, the Windows Error Reporting service, described in Chapter
10, will handle the exception and this unhandled exception filter never
executes.
EXPERIMENT: Viewing the real user start address
for Windows threads
The fact that each Windows thread begins execution in a system-
supplied function (and not the user-supplied function) explains why
the start address for thread 0 is the same for every Windows
process in the system (and why the start addresses for secondary
threads are also the same). To see the user-supplied function
address, use Process Explorer or the kernel debugger.
Because most threads in Windows processes start at one of the
system-supplied wrapper functions, Process Explorer, when
displaying the start address of threads in a process, skips the initial
call frame that represents the wrapper function and instead shows
the second frame on the stack. For example, notice the thread start
address of a process running Notepad.exe:
Process Explorer does display the complete call hierarchy when
it displays the call stack. Notice the following results when the
Stack button is clicked:
Line 20 in the preceding screen shot is the first frame on the
stack—the start of the internal thread wrapper. The second frame
(line 19) is the environment subsystem’s thread wrapper—in this
case, kernel32, because you are dealing with a Windows subsystem
application. The third frame (line 18) is the main entry point into
Notepad.exe.
To show the correct function names, you should configure
Process Explorer with the proper symbols. First you need to install
the Debugging Tools, which are available in the Windows SDK or
WDK. Then you should select the Configure Symbols menu item
located in the Options menu. The dbghelp.dll path should point to
the file located in the debugging tools folder (usually C:\Program
Files\Windows Kits\10\Debuggers; note that the dbghelp.dll file
located in C:\Windows\System32 would not work), and the
Symbols path should be properly configured to download the
symbols from the Microsoft symbols store in a local folder, as in
the following figure:
System service handling
As Figure 8-24 illustrated, the kernel’s trap handlers dispatch interrupts,
exceptions, and system service calls. In the preceding sections, you saw how
interrupt and exception handling work; in this section, you’ll learn about
system services. A system service dispatch (shown in Figure 8-25) is
triggered as a result of executing an instruction assigned to system service
dispatching. The instruction that Windows uses for system service
dispatching depends on the processor on which it is executing and whether
Hypervisor Code Integrity (HVCI) is enabled, as you’re about to learn.
Figure 8-25 System service dispatching.
Architectural system service dispatching
On most x64 systems, Windows uses the syscall instruction, which results in
the change of some of the key processor state we have learned about in this
chapter, based on certain preprogrammed model specific registers (MSRs):
■    0xC0000081, known as STAR (SYSCALL Target Address Register)
■    0xC0000082, known as LSTAR (Long-Mode STAR)
■    0xC0000084, known as SFMASK (SYSCALL Flags Mask)
Upon encountering the syscall instruction, the processor acts in the following
manner:
■    The Code Segment (CS) is loaded from Bits 32 to 47 in STAR, which
Windows sets to 0x0010 (KGDT64_R0_CODE).
■    The Stack Segment (SS) is loaded from Bits 32 to 47 in STAR plus 8,
which gives us 0x0018 (KGDT_R0_DATA).
■    The Instruction Pointer (RIP) is saved in RCX, and the new value is
loaded from LSTAR, which Windows sets to KiSystemCall64 if the
Meltdown (KVA Shadowing) mitigation is not needed, or
KiSystemCall64Shadow otherwise. (More information on the
Meltdown vulnerability was provided in the “Hardware side-channel
vulnerabilities” section earlier in this chapter.)
■    The current processor flags (RFLAGS) are saved in R11 and then
masked with SFMASK, which Windows sets to 0x4700 (Trap Flag,
Direction Flag, Interrupt Flag, and Nested Task Flag).
■    The Stack Pointer (RSP) and all other segments (DS, ES, FS, and GS)
are kept to their current user-space values.
Therefore, although the instruction executes in very few processor cycles, it
does leave the processor in an insecure and unstable state—the user-mode
stack pointer is still loaded, GS is still pointing to the TEB, but the Ring
Level, or CPL, is now 0, enabling kernel mode privileges. Windows acts
quickly to place the processor in a consistent operating environment. Outside
of the KVA shadow-specific operations that might happen on legacy
processors, these are the precise steps that KiSystemCall64 must perform:
By using the swapgs instruction, GS now points to the PCR, as described
earlier in this chapter.
The current stack pointer (RSP) is saved into the UserRsp field of the PCR.
Because GS has now correctly been loaded, this can be done without using
any stack or register.
The new stack pointer is loaded from the RspBase field of the PRCB (recall
that this structure is stored as part of the PCR).
Now that the kernel stack is loaded, the function builds a trap frame, using
the format described earlier in the chapter. This includes storing in the frame
the SegSs set to KGDT_R3_DATA (0x2B), Rsp from the UserRsp in the PCR,
EFlags from R11, SegCs set to KGDT_R3_CODE (0x33), and storing Rip
from RCX. Normally, a processor trap would’ve set these fields, but
Windows must emulate the behavior based on how syscall operates.
Loading RCX from R10. Normally, the x64 ABI dictates that the first
argument of any function (including a syscall) be placed in RCX—yet the
syscall instruction overrides RCX with the instruction pointer of the caller, as
shown earlier. Windows is aware of this behavior and copies RCX into R10
before issuing the syscall instruction, as you’ll soon see, so this step restores
the value.
The next steps have to do with processor mitigations such as Supervisor
Mode Access Prevention (SMAP)—such as issuing the stac instruction—and
the myriad processor side-channel mitigations, such as clearing the branch
tracing buffers (BTB) or return store buffer (RSB). Additionally, on
processors with Control-flow Enforcement Technology (CET), the shadow
stack for the thread must also be synchronized correctly. Beyond this point,
additional elements of the trap frame are stored, such as various nonvolatile
registers and debug registers, and the nonarchitectural handling of the system
call begins, which we discuss in more detail in just a bit.
Not all processors are x64, however, and it’s worth pointing out that on x86
processors, for example, a different instruction is used, which is called
sysenter. As 32-bit processors are increasingly rare, we don’t spend too much
time digging into this instruction other than mentioning that its behavior is
similar—a certain amount of processor state is loaded from various MSRs,
and the kernel does some additional work, such as setting up the trap frame.
More details can be found in the relevant Intel processor manuals. Similarly,
ARM-based processors use the svc instruction, which has its own behavior
and OS-level handling, but these systems still represent only a small minority
of Windows installations.
There is one more corner case that Windows must handle: processors
without Mode Base Execution Controls (MBEC) operating while Hypervisor
Code Integrity (HVCI) is enabled suffer from a design issue that violates the
promises HVCI provides. (Chapter 9 covers HVCI and MBEC.) Namely, an
attacker could allocate user-space executable memory, which HVCI allows
(by marking the respective SLAT entry as executable), and then corrupt the
PTE (which is not protected against kernel modification) to make the virtual
address appear as a kernel page. Because the MMU would see the page as
being kernel, Supervisor Mode Execution Prevention (SMEP) would not
prohibit execution of the code, and because it was originally allocated as a
user physical page, the SLAT entry wouldn’t prohibit the execution either.
The attacker has now achieved arbitrary kernel-mode code execution,
violating the basic tenet of HVCI.
MBEC and its sister technologies (Restricted User Mode) fix this issue by
introducing distinct kernel versus user executable bits in the SLAT entry data
structures, allowing the hypervisor (or the Secure Kernel, through VTL1-
specific hypercalls) to mark user pages as kernel non executable but user
executable. Unfortunately, on processors without this capability, the
hypervisor has no choice but to trap all code privilege level changes and
swap between two different sets of SLAT entries—ones marking all user
physical pages as nonexecutable, and ones marking them as executable. The
hypervisor traps CPL changes by making the IDT appear empty (effectively
setting its limit to 0) and decoding the underlying instruction, which is an
expensive operation. However, as interrupts can directly be trapped by the
hypervisor, avoiding these costs, the system call dispatch code in user space
prefers issuing an interrupt if it detects an HVCI-enabled system without
MBEC-like capabilities. The SystemCall bit in the Shared User Data
structure described in Chapter 4, Part 1, is what determines this situation.
Therefore, when SystemCall is set to 1, x64 Windows uses the int 0x2e
instruction, which results in a trap, including a fully built-out trap frame that
does not require OS involvement. Interestingly, this happens to be the same
instruction that was used on ancient x86 processors prior to the Pentium Pro,
and continues to still be supported on x86 systems for backward
compatibility with three-decade-old software that had unfortunately
hardcoded this behavior. On x64, however, int 0x2e can be used only in this
scenario because the kernel will not fill out the relevant IDT entry otherwise.
Regardless of which instruction is ultimately used, the user-mode system call
dispatching code always stores a system call index in a register—EAX on x86
and x64, R12 on 32-bit ARM, and X8 on ARM64—which will be further
inspected by the nonarchitectural system call handling code we’ll see next.
And, to make things easy, the standard function call processor ABI
(application binary interface) is maintained across the boundary—for
example, arguments are placed on the stack on x86, and RCX (technically
R10 due to the behavior of syscall), RDX, R8, R9 plus the stack for any
arguments past the first four on x64.
Once dispatching completes, how does the processor return to its old state?
For trap-based system calls that occurred through int 0x2e, the iret instruction
restores the processor state based on the hardware trap frame on the stack.
For syscall and sysenter, though, the processor once again leverages the
MSRs and hardcoded registers we saw on entry, through specialized
instructions called sysret and sysexit, respectively. Here’s how the former
behaves:
■    The Stack Segment (SS) is loaded from bits 48 to 63 in STAR, which
Windows sets to 0x0023 (KGDT_R3_DATA).
■    The Code Segment (CS) is loaded from bits 48 to 63 in STAR plus
0x10, which gives us 0x0033 (KGDT64_R3_CODE).
■    The Instruction Pointer (RIP) is loaded from RCX.
■    The processor flags (RFLAGS) are loaded from R11.
■    The Stack Pointer (RSP) and all other segments (DS, ES, FS, and GS)
are kept to their current kernel-space values.
Therefore, just like for system call entry, the exit mechanics must also clean
up some processor state. Namely, RSP is restored to the Rsp field that was
saved on the manufactured hardware trap frame from the entry code we
analyzed, similar to all the other saved registers. RCX register is loaded from
the saved Rip, R11 is loaded from EFlags, and the swapgs instruction is used
right before issuing the sysret instruction. Because DS, ES, and FS were
never touched, they maintain their original user-space values. Finally, EDX
and XMM0 through XMM5 are zeroed out, and all other nonvolatile registers
are restored from the trap frame before the sysret instruction. Equivalent
actions are taken on for sysexit and ARM64’s exit instruction (eret).
Additionally, if CET is enabled, just like in the entry path, the shadow stack
must correctly be synchronized on the exit path.
EXPERIMENT: Locating the system service
dispatcher
As mentioned, x64 system calls occur based on a series of MSRs,
which you can use the rdmsr debugger command to explore. First,
take note of STAR, which shows KGDT_R0_CODE (0x0010) and
KGDT64_R3_DATA (0x0023).