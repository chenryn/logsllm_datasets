### Program and Instance Definitions

**Web Application:**
A web application is the combination of a client-side browser instance and a remote web service that work together to provide the user with specific application functions, such as online banking or webmail.

**Distributed Application:**
A distributed application is an application that runs on multiple computers connected by a network. Each component of the application can run on different machines, and they communicate and coordinate their actions over the network.

### Table 1: Terminology
This table explains key terms in the Tahoma architecture and provides the closest analogous term in a conventional operating system environment.

### Manifest
The manifest includes several key pieces of information:
1. **Digital Signature:** Authenticates the web service to the client.
2. **Code Specification:** Specifies the code that will run in the browser instance. This can be a conventional web browser or arbitrary code and data to be downloaded.
3. **Network Policies:** Defines the set of websites or URLs that the browser instance is allowed to access, enforced by a reverse firewall.

### Network Policies
Network policies protect the web application from compromised browsers. Browsers can be easily compromised by malicious plugins or through active web content that exploits security holes in the browser or its extensions. A compromised browser could capture confidential data flowing between the browser instance and its web service and send that information to an untrusted site, or it could use the browser instance as a base to attack other internet hosts. The network policy and reverse firewall aim to prevent these attacks by restricting communication from the browser instance to legitimate sites within the web service.

### User Approval
Users must approve the installation of a web application the first time they access it. Only then will Tahoma create a new virtual machine, install the browser code and data, and execute the new browser instance. The BOS caches approvals, so the user does not need to re-approve the web application on subsequent executions.

### 2.2 The Browser Operating System (BOS)
The BOS is the trusted computing base for the Tahoma browsing system. It manages the collection of browser instances executing on the client. The BOS performs the following tasks:
- **Multiplexing:** Combines the virtual screens of each browser instance onto the client’s physical display.
- **Policy Enforcement:** Enforces the network policies of each instance.
- **State Management:** Stores state associated with browser instances, bookmarks, and manifests.

#### Detailed Architecture
- **User Interface:** Provides the highest level user interface, allowing users to manipulate the virtual screens of each browser instance. It also wraps each virtual screen with a border that the browser instance cannot occlude, providing trusted information such as the name and credentials of the web application.
- **Control Panels and Bookmark Management:** Users can install, execute, and uninstall web applications, and create bookmarks pointing to documents within a web application. Custom browser instances can use bookmarks for their own purposes, such as implementing radio channels in a streaming radio service.
- **Network Interactions:** Mediates all network interactions between a browser instance and remote websites. A browser instance invokes a BOS system call to fetch web documents over HTTP. The BOS services the connection only if the document falls within the network policy specified in the instance’s manifest. If not, the BOS refuses the request. If the document is allowed by the manifest of a different web application, the BOS gives the user the option to load it into that web application’s browser instance.
- **Durable State Management:** Manages durable state, including private virtual disks for browser instances, stock browser instances (e.g., Mozilla) that can be cloned, and manifests and bookmarks associated with web applications. All long-term storage is treated as a soft-state cache, which can be evicted at the cost of re-downloading manifests or re-installing browser instances when the user next accesses a web application.

### 2.3 Summary
The Tahoma architecture is driven by the principles of distrust of web browsers and applications and the empowerment of users. It isolates web applications, protecting other applications and client resources from malicious downloaded code. Additionally, it permits web services to build safer and more powerful web applications, accepting the enhanced role of modern browsers in managing the client-side components of complex, non-trusted, distributed applications.

### 3. Implementation
This section describes the central components of the Tahoma prototype implementation, including the BOS, browser instances, and the underlying Xen virtual machine monitor.

#### 3.1 Xen and the Browser Operating System
- **BOS Kernel:** Manages browser instances and the durable storage of the system.
- **Network Proxy:** A reverse firewall that enforces network access policies for web applications.
- **Window Manager:** Aggregates browser instance windows into the physical screen.

Each Tahoma browser instance executes in its own Xen virtual machine. The BOS uses libraries (libBOS and libQT) to provide access to BOS system functions and graphics functions. Communication between browser instances and the BOS is implemented as XML-formatted remote procedure calls (RPCs) carried over TCP connections.

#### 3.2 Xen and the Browser Instance
Browser instances execute in Xen VMs, with Xen handling CPU and memory isolation. The BOS enforces the manifest-specified network policy of each browser instance, ensuring that they do not have unfettered internet access. Instead, a point-to-point network link is established between the browser instance and the Domain0 VM, where an HTTP proxy runs to enforce network policies.

### Controlled Transfers
The BOS supports strong VM-based isolation between browser instances but also allows controlled transfers of objects outside of a VM. For example, a user can copy a photo from a web-mail application into a photo album. The BOS kernel implements a private "holding bin" for each browser instance, and two browser-calls, BinStore and BinFetch, are provided to manage this. However, transfers between the holding bin and the host OS must be initiated explicitly by the user through a trusted Tahoma tool, preventing the browser instance from directly manipulating host OS resources.

### Conclusion
The Tahoma architecture aims to enhance the security and functionality of web applications by isolating them and enforcing strict network policies. The BOS and Xen VMM work together to provide a secure and flexible environment for running web applications, while also empowering users to control their data and applications.