These link maps can be derived using tools such as Rock-
etFuel [18].
Internet routes are often stable for at least a
day [21], so topological data need not be fetched often.
Once the topology is known, hosts infer link quality us-
ing lightweight proactive probing and heavyweight reac-
tive probing. Lightweight tomography uses the availabil-
ity probes that hosts already send to their routing table
peers [17, 19]. The period of these probes is a minute or
less, and the duration of high loss events in IP links is on
the order of tens of minutes [14]. Thus, H can use these
preexisting probes to detect high intensity packet loss inside
TH. More speciﬁcally, H schedules a lightweight probe of
TH as a periodic task whose inter-arrival time is picked ran-
domly and uniformly from the range [0, max probe time];
max probe time is on the order of one or two minutes. H
probes its entire routing table at once using a simpliﬁed ver-
sion of Dufﬁeld’s striped unicast scheme [10]. H generates a
single probe packet for each routing peer, but it issues these
packets back to back. Since these packets will stay close to
each other as they traverse shared interior routers, they emu-
late a single multicast packet sent to the leaves of a multicast
tree. If H receives acknowledgments from all peers, it as-
sumes that there is no link loss. Otherwise, it sends a few
more probes to silent peers to determine if they are truly of-
ﬂine or situated along a lossy IP link.
If link loss is detected or H’s application-level messages
are not being acknowledged, H initiates heavyweight prob-
ing. Heavyweight tomography also uses striped unicast prob-
ing, but H sends many probes to each leaf using Dufﬁeld’s
full scheme. Loss rates for each root-leaf path are inferred
using the number of acknowledgments received from each
leaf host. Using maximum likelihood estimators, these end-
to-end loss rates induce loss rates for each internal IP link.
When H initiates heavyweight probing, it asks its rout-
ing peers do the same. This ensures the availability of ﬁne-
grained, high quality tomographic data for the entire forest
during the speculated fault period. To avoid probe-induced
congestion, each peer waits for a small, randomly picked
time before initiating heavyweight tomography.
After H has probed TH using lightweight or heavyweight
mechanisms, it sends a timestamped snapshot of TH and its
summarized probe results to its routing peers. The probe re-
sults for each path can be encoded in a few bits representing
predeﬁned loss rates. H signs the tomographic snapshot with
its public key, both to prevent spooﬁng attacks and to prevent
H from disavowing previously advertised probe results.
Each leaf node in TH is one of H’s routing peers, so H
implicitly advertises its forwarding state when it publishes its
tomographic data. This data also includes the signed fresh-
ness timestamps for each routing entry as described in Sec-
tion 3.1. When a node receives a snapshot from H, it veriﬁes
all the signatures, checks the freshness of each entry, and
performs the density checks. If any of these tests fail, the
node may issue a fault accusation against H as described in
Section 3.4. Regardless, the node archives H’s snapshot. As
the node receives snapshots from other peers, it constructs a
distributed view of the forwarding paths emanating from its
routing peers and the quality of IP links in these paths.
3.3 Error-checking Tomographic Data
Striped unicast tomography assumes that leaf nodes will
return acknowledgments for received probes. A faulty or ma-
licious leaf can try to respond to probes that were actually
lost in the network, or drop acknowledgments for probes that
were received. The former only affects inferences over the
last mile to the misbehaving leaf, but the latter can ruin many
inferences throughout the tree [3]. Fortunately, we can de-
tect both types of misbehavior. To detect spurious responses
to non-received probes, the probing node includes nonces in
its probes. To detect leaves which faultily suppress acknowl-
edgments, the probing node applies statistical tests to verify
that the acknowledgment patterns of its leaves are consistent
with each other [3]. Thus, an intentionally malicious leaf can
accomplish the most damage by responding correctly to the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:21:03 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007probes of other nodes, but misreporting the results of its own
probes. We explore this issue further in Section 4.3.
We assume that interior IP routers can be faulty but not
actively malicious. We assume that they do not interfere with
probes or their responses in a byzantine way.
3.4 Attributing Fault
Armed with link measurements and routing information,
each Concilium node can issue accusations for dropped mes-
sages. Suppose that at time t, host A sends a message to Z
through B. By checking its copy of B’s routing table, A can
determine the host C to which B will forward the message. If
A never receives a signed acknowledgment from Z, it checks
its tomographic data for probes which test links in the path
between B and C. If one or more links were probed as down,
Concilium assigns blame to the network. Otherwise, Con-
cilium determines that B was faulty. This judgment may be
erroneous, since the true culprit may lie downstream from B.
We describe how Concilium recovers from these mistakes in
Section 3.5. For now, we restrict our attention to the original
issuance of blame.
Let B → C represent the path between B and C, and let
probes be the set of probe results covering links in B → C.
We allow this set to contain results from probes initiated
within the interval [t− ∆, t + ∆], where ∆ might equal sixty
seconds. Let probes(link) be the set of probes covering a
particular link. For p ∈ probes(link), let p.l up ∈ {0 or 1}
be the probed status of the link, with 1 representing a link
that was up and 0 representing a failed link. Let a ∈ [0, 1] be
the accuracy of probes in diagnosing link failure. Returning
to our running example, when A fails to receive an acknowl-
edgment from Z, it ascribes blame to B as follows:
P r(B f aulty) = P r(B → C good)
= 1 − P r(B → C bad)
= 1 − P r(B → C has ≥ 1 bad link)
(2)
where P r(B → C has ≥ 1 bad link) equals
(cid:195)(cid:80)
maxl∈B→C
p∈probes(l)[p.l up(1 − a) + (1 − p.l up)a]
|probes(l)|
(3)
We use max as the OR operator from fuzzy logic [5]. In the
context of Equation 3, it selects the link in B → C for which
A has the highest conﬁdence that it was bad, with each probe
result weighed equally. For example, suppose that Q and R
probe a link as down (0) and S probes the same link as up
(1). If a equals 0.8, A believes that the link was bad with
conﬁdence (1/3)(0.8)+(1/3)(0.8)+(1/3)(0.2)=0.6.
Importantly, when A judges the trustworthiness of B, it
does not incorporate B’s probe results into Equation 3. This
prevents a malicious B from inﬂuencing the amount of blame
that A ascribes to it. For example, if A included B’s probe
results in Equation 3, B could reduce its level of blame by
claiming that it probed a link in B → C as down.
Using Equation 2, A determines the amount of blame that
it ascribes to B for a particular dropped message.
If the
blame is larger than a threshold described in Section 4.3, A
assigns a guilty verdict to B; otherwise, A assigns a guilty
verdict to the network. A maintains a sliding window of the
last w verdicts that it issued for B, archiving the tomographic
data used to make each verdict.
If B receives m or more
guilty verdicts in this window, A inserts a formal fault ac-
cusation into a DHT which exists atop the secure overlay.
The insertion key for the accusation is B’s public key, and
the accusation contains all of the signed tomographic data
that A used to derive its fault assessments. Insertions and
fetches of the formal accusation are secured using Castro’s
techniques [7], and the statement is signed by A so that it can
be held accountable for spurious accusations. When another
host considers B as a routing peer, it ﬁrst retrieves accusa-
tions against B from the DHT. For each accusation, the host
uses the associated tomographic data to independently verify
the fault calculations. If the host veriﬁes the accusations, it
considers B to be a “bad peer” and sanctions it according to
network-speciﬁc policies.
3.5 Revising Incorrect Fault Attributions
As currently described, a Concilium node cannot ascribe
blame beyond the next overlay hop. Returning to our run-
ning example, if A does not receive a signed acknowledg-
ment from Z, and A estimates all links in B → C to be good,
then A will always blame B for dropping the message, even
if B successfully forwarded the message and it was actu-
ally dropped further downstream. To correctly ascribe blame
in these situations, Concilium uses recursive stewardship of
messages and recursive revision of fault accusations.
Whenever a peer along A → Z forwards a message, it
treats the message as if it were generated locally—in other
words, each forwarding peer expects to receive an acknowl-
edgment from Z.
If Z receives the message successfully,
it routes its acknowledgment along the reverse forwarding
path. If Z never receives the message or its acknowledgment
is dropped along the reverse path, a chain of guilty verdicts
will be issued. By considering them as a whole, Concilium
can determine where blame should ultimately be placed. For
example, suppose that D faultily drops A’s message to Z
along A → B → C → D → ... Z and that all IP links are
good. Using recursive stewardship, B and C will await an
acknowledgment from Z. When this acknowledgment does
not arrive, A will blame B, B will blame C, and C will
blame D. D will not be able to blame a forwarding peer
since it lacks incriminating tomographic data—D’s peers in
FD will not have probed any links as down 1, and D can-
not fabricate such probes itself because a node’s own probes
are ignored when calculating blame for that node. Thus, the
accusation chain stops at D and nodes absolve themselves
1This assumes that the nodes in FD are not colluding with D. We return
to the issue of colluding nodes in Section 4.
(cid:33)
.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:21:03 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007of unfair blame by pushing locally generated verdicts up-
stream. First, C presents its guilty verdict against D to B. B
examines the signed, timestamped tomographic data in the
verdict, veriﬁes the blame calculation, and amends its accu-
sation against C to be an accusation against D. B presents
its amended verdict to A. After A veriﬁes the inference, it
amends its accusation against B to an accusation against D.
Innocent nodes have now been exonerated, and blame has
been fairly attributed to D. Note that an amended accusation
contains the signed, timestamped data from both the origi-
nal verdict and the revision that was pushed upstream. This
allows amended verdicts to be self-verifying.
Faulty nodes may not push revision information upstream.
They do so at their own peril, since they will receive the
blame for the message drop. For example, if C does not
push its accusation against D to B, then B will not amend its
original fault claim against C, and A will eventually blame
C, not D, for the message drop.
A faulty node may receive a revision but refuse to update
its local accusation. For example, A may receive B’s blame
against a node further downstream but continue to blame B.
To guard against such misbehavior, B archives its local fault
attributions and revisions. If another host believes that B is
untrustworthy, it allows B to defend itself before any puni-
tive steps are taken. The host presents B with the relevant
formal accusations. If B can rebut these accusations using
its local archives, the other host will recalculate B’s trust-
worthiness in light of the new evidence.
3.6 Preventing Spurious Accusations
Up to this point, we have focused on detecting hosts which
fail to forward messages. However, the original message
sender can also misbehave. Suppose that each link in B → C
is good. If A accuses B of dropping its message without ac-
tually sending one to B, other nodes will believe the accu-
sation; they will verify the tomographic information in A’s
accusation and derive the same blame probability as A.
To prevent such spurious accusations, Concilium uses for-
warding commitments. When A sends a message through B,
B sends a signed statement to A indicating its willingness
to forward the message. The commitment includes a times-
tamp, A’s identiﬁer, B’s identiﬁer, and the identiﬁer of the
ultimate destination Z. When A issues an accusation against
B, it includes this forwarding commitment along with the
relevant tomographic data and routing state. In this fashion,
B can only be blamed for dropping messages that it agreed to
forward. B can batch its commitments and asynchronously
piggyback them upon its responses to A’s availability probes.
Like message stewardship and accusation revision, forward-
ing commitment is also recursive.
A malicious B may refuse to issue forwarding commit-
ments for A’s packets. Without support from core IP routers
on the path between A and B, there is no way for Concil-
ium to establish that A actually sent a message to B, or that
B sent a forwarding commitment which A ignored. Lacking
such knowledge, Concilium cannot comment on the trust-
worthiness of either peer. Fortunately, B’s misbehavior can
be detected by other mechanisms. For example, if overlay
hosts are part of a decentralized reputation system such as
Creedence [20], A can issue a vote of no conﬁdence in B
using this reputation system. Since honest hosts trust each