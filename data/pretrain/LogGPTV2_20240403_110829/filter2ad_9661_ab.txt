    00000844: 4e65 6564 2065 7861 6374 6c79 206f 6e65  Need exactly one
    00000854: 2061 7267 756d 656e 742e 004e 6f2c 2025   argument..No, %
    00000864: 7320 6973 206e 6f74 2063 6f72 7265 6374  s is not correct
    00000874: 2e0a 0070 6173 7377 6f72 6431 0059 6573  ...password1.Yes
所以现在我们知道这段代码打印一个字符串“Need exactly one argument.”这就是当您指定太多或太少的参数时，您会看到的程序行为。
### 基础流分析
这段代码最重要的部分是最后的无条件跳转，它转到地址77c：
    add    rsp,0x8
    ret
这段代码从堆栈中删除局部变量并返回，仅此而已。如果没有为二进制文件提供正好2个参数——它自己的名称和一个命令行参数——它就会退出。
我们可以用C代码编写这个程序：
    int main(int argc, char** argv){
        if (argc != 2) {
            puts("Need exactly one argument.");
            return -1;
        }
        // 神奇的事情在这里发生
    }
为了找出程序接下来的部分中发生了什么神奇的事情，我们需要查看程序的流程。假设`argc`检查通过（不进行0x717的跳转），程序将进入该块执行：
    mov    rdx,QWORD PTR [rsi+0x8]
    movzx  eax,BYTE PTR [rdx]
    test   al,al
    je     761
第一条指令将地址`[rsi + 0x8]`的四字（64位值）移入`rdx`。什么是 rsi ？完整64位源索引寄存器（the full 64-bit
Source Index register）？实际上这是Linux x86_64调用约定中的 _第二个_ 参数。 所以在C语言中，这是`argv +
8`的值，或者`argv[1]`，因为`argv`的类型是`char **`。
下一条指令移动存储在`rdx`中的地址上的一个字节并向高位填充零（`movzx`）。换句话说，移动了`*argv[1]`，或`argv[1][0]`。现在eax寄存器（The
Accumulator register）除了最后8位为`argv[1]`（即程序的命令行参数）的第一个字节，高位全为零。
`test al，al`相当于`cmp al,0`。`al`是累加器寄存器的低8位。这个程序块相当于C代码：
    if (argv[1][0] == 0) {
        // do something
    }
那么地址0x761中是什么？它是这样的：
    lea    rsi,[rip+0x119]        # 881 
    mov    edi,0x1
    mov    eax,0x0
    call   5c8 
    mov    eax,0x0
    add    rsp,0x8
    ret
逆向工程师最重要的技能之一是注意到代码的模式，您在这里就可以看到一个。这里，程序通过`lea`复制了一个指令指针的相对偏移量到`rsi`，然后调用一个函数。
使用和上面相同技术，可以知道这个函数是`printf`。`printf`的参数是一个格式字符串和可变数量的参数。所有可变函数都需要使用`eax`累加寄存器来保存一个值，告诉程序要在FPU寄存器中查找多少个参数（在这个例子中没有，正如我们从`mov
eax，0x0`指令中看到的那样）。`rdx`寄存器已经存放了指针`argv[1]`，所以这是第二个命令行参数。
那格式字符串是什么？我们使用与以前相同的技术，但这次我没有把`objdump`添加的注释去掉，它帮我们做了数学运算。
所以运行`xxd -s 0x881 -l 0x40 crackme02.64`，得到这里的格式字符串是`Yes, %s is
correct!`。看起来很好！另外我们可以看到，在函数调用之后（在地址0x77c，这是一个很有用的地址，要记住），局部变量的空间从堆栈中删除，函数返回。返回值总是放在eax中，所以这里程序返回0。成功！
所以我们的C代码看起来像这样：
    int main(int argc, char** argv){
        if (argc != 2) {
            puts("Need exactly one argument.");
            return -1;
        }
        if (argv[1][0] == 0) {
            printf("Yes, %s is correct.", argv[1]);
        }
        // 神奇的事情在这里发生
    }
我们所要做的只是提供一个字符串，其第一个字节为0——也就是空字符串：
    $ ./crackme02.64 ""
    Yes,  is correct!
从某种意义上说，我们已经完成了这个CrackMe，但是我们继续看看接下来的代码。
如果检查失败，则代码转到这里（地址0x724处）：
    cmp    al,0x6f
    jne    794
回想一下，由于我们假设检查成功的跳转没有执行，所以al中现在存放着`argv[1][0]`。这段代码检查它是否不等于0x6f（十进制111;
ASCII字符'o'）。如果是就跳转到地址0x794。
    lea    rsi,[rip+0xc4]        # 85f 
    mov    edi,0x1
    mov    eax,0x0
    call   5c8 
    mov    eax,0x1
    jmp    77c
这又是一个打印并返回的代码块。最后无条件跳转（`jmp`）到0x77c，程序删除其局部变量的堆栈空间并返回。
这个代码块不是打印成功消息，而是打印“No, %s is not correct.”，格式化字符串填入命令行参数，然后返回失败代码1。
_那我们就知道正确的消息以字母“o”开头_ ，如果不是就会判定失败。
    int main(int argc, char** argv){
        if (argc != 2) {
            puts("Need exactly one argument.");
            return -1;
        }
        if (argv[1][0] == 0) {
            printf("Yes, %s is correct.", argv[1]);
            return 0;
        }
        if (argv[1][0] != 'o') {
            printf("No, %s is not correct.", argv[1]);
            return 1;
        }
        // 神奇的事情在这里发生
    }
假设跳转不发生，那么我们来到地址0x728的代码块处：
    mov    esi,0x1
    mov    eax,0x61
    mov    ecx,0x1
    lea    rdi,[rip+0x139]        # 877 
    movzx  ecx,BYTE PTR [rdx+rcx*1]
    test   cl,cl
    je     761
在这里，我们给寄存器加载一些常量，然后将一个指针加载到`rdi`中。这个指针指向字符串“password1”，但我们知道这不是正确的密码。究竟发生什么了？
下一条指令移动一个地址在`rdx + rcx`的字节。`rdx`里面是什么？我们向上翻一翻，到0x719的代码处，我们看到它加载了`rsi +
0x8`的值，也就是`argv[1]`。所以这里其实是在索引那个字符串，`ecx = argv[1][1]`。
之前说过，逆向工程最重要的技能是识别代码的模式。这是我们在上面已经见过的汇编片段：寄存器test自己，紧接着je，等价于“如果寄存器为零则跳转”。
所以，如果在`argv[1][1]`处是一个零字节，那么就跳转到0x761。那里的代码逻辑是什么？这是我们刚刚逆向过的一个代码块，它打印成功字符串并退出，返回码为0。伪代码如下所示：（译者注：因为是先判断第一个字符是否为o，才进行的第二个字符为0的判断，这个逻辑和下面的伪代码不符）
    int main(int argc, char** argv){
        if (argc != 2) {
            puts("Need exactly one argument.");
            return -1;
        }
        if (argv[1][0] == 0 || argv[1][1] == 0) {
            printf("Yes, %s is correct.", argv[1]);
            return 0;
        }
        if (argv[1][0] != 'o') {
            printf("No, %s is not correct.", argv[1]);
            return 1;
        }
        // 神奇的事情在这里发生
    }
如果第二个字符不是零，会怎样呢？继续向下，看0x746处的代码：
    movsx  eax,al
    sub    eax,0x1
    movsx  ecx,cl
    cmp    eax,ecx
    jne    794
这里我们将`eax`除最低8位之外都清零，并减去1。然后同样将`ecx`除最低8位之外都清零，并将`eax`与`ecx`进行比较。如果它们不相等，就跳转到0x794。这是又一个我们已经逆向过的代码块，它打印失败字符串并退出，返回码为1。
这个代码是实现什么的？从上面我们可以知道，`eax`包含一个字节0x61（十进制97，ASCII字符'a'）。它减去1，是0x60（十进制96，ASCII字符'`'）。所以我们就知道了，密码的前两个字符是“o`”。
我们的伪代码如下：
    int main(int argc, char** argv){
        if (argc != 2) {
            puts("Need exactly one argument.");
            return -1;
        }
        if (argv[1][0] == 0 || argv[1][1] == 0) {
            printf("Yes, %s is correct.", argv[1]);
            return 0;
        }
        if (argv[1][0] != 'o' || argv[1][1] != 0x60) {
            printf("No, %s is not correct.", argv[1]);
            return 1;
        }
        // 神奇的事情在这里发生
    }
如果它们相等，那么就到了地址0x753的代码处：
    add    esi,0x1
    movsxd rcx,esi
    movzx  eax,BYTE PTR [rdi+rcx*1]