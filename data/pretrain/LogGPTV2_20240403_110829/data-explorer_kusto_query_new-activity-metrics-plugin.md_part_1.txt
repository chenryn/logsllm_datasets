---
title:  new_activity_metrics plugin
description: Learn how to use the new_activity_metrics plugin to calculate activity metrics. 
ms.reviewer: alexans
ms.topic: reference
ms.date: 01/08/2023
---
# new_activity_metrics plugin
Calculates useful activity metrics (distinct count values, distinct count of new values, retention rate, and churn rate) for the cohort of `New Users`. Each cohort of `New Users` (all users, which were first seen in time window) is compared to all prior cohorts.
Comparison takes into account *all* previous time windows. For example, for records from T2 to T3, the distinct count of users will be all users in T3 who weren't seen in both T1 and T2.
The plugin is invoked with the [`evaluate`](evaluate-operator.md) operator.
## Syntax
*TabularExpression* `| evaluate` `new_activity_metrics(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *Window* [`,` *Cohort*] [`,` *dim1*`,` *dim2*`,` ...] [`,` *Lookback*] `)`
[!INCLUDE [syntax-conventions-note](../../includes/syntax-conventions-note.md)]
## Parameters
| Name | Type | Required | Description |
|--|--|--|--|
| *TabularExpression*| `string` |  :heavy_check_mark: | The tabular expression for which to calculate activity metrics.|
| *IdColumn*| `string` |  :heavy_check_mark: | The name of the column with ID values that represent user activity.|
| *TimelineColumn*| `string` |  :heavy_check_mark: | The name of the column that represents the timeline.|
| *Start*| scalar |  :heavy_check_mark: | The value of the analysis start period.|
| *End*| scalar |  :heavy_check_mark: | The value of the analysis end period.|
| *Window*| scalar |  :heavy_check_mark: | The value of the analysis window period. Can be a numeric, datetime, or timespan value, or a string that is one of `week`, `month` or `year`, in which case all periods will be [startofweek](startofweek-function.md)/[startofmonth](startofmonth-function.md)/[startofyear](startofyear-function.md) accordingly. When using `startofweek`, make sure start time is a Sunday, otherwise first cohort will be empty (since [startofweek](startofweek-function.md) is considered to be a Sunday).|
| *Cohort*| scalar | | Indicates a specific cohort. If not provided, all cohorts corresponding to the analysis time window are calculated and returned.|
| *dim1*, *dim2*, ...| `dynamic` | | An array of the dimensions columns that slice the activity metrics calculation.|
| *Lookback*| `string` | | A tabular expression with a set of IDs that belong to the 'look back' period.|
## Returns
Returns a table that contains the following for each combination of 'from' and 'to' timeline periods and for each existing column (dimensions) combination:
* distinct count values
* distinct count of new values
* retention rate
* churn rate
Output table schema is:
|from_TimelineColumn|to_TimelineColumn|dcount_new_values|dcount_retained_values|dcount_churn_values|retention_rate|churn_rate|dim1|..|dim_n|
|---|---|---|---|---|---|---|---|---|---|
|type: as of *TimelineColumn*|same|long|long|double|double|double|..|..|..|
* `from_TimelineColumn` - the cohort of new users. Metrics in this record refer to all users who were first seen in this period. The decision on *first seen* takes into account all previous periods in the analysis period.
* `to_TimelineColumn` - the period being compared to.
* `dcount_new_values` - the number of distinct users in `to_TimelineColumn` that weren't seen in *all* periods prior to and including `from_TimelineColumn`.
* `dcount_retained_values` - out of all new users, first seen in `from_TimelineColumn`, the number of distinct users that were seen in `to_TimelineCoumn`.
* `dcount_churn_values` - out of all new users, first seen in `from_TimelineColumn`, the number of distinct users that weren't seen in `to_TimelineCoumn`.
* `retention_rate` - the percent of `dcount_retained_values` out of the cohort (users first seen in `from_TimelineColumn`).
* `churn_rate` - the percent of `dcount_churn_values` out of the cohort (users first seen in `from_TimelineColumn`).
>[!NOTE]
>For definitions of `Retention Rate` and `Churn Rate` - refer to **Notes** section in [activity_metrics plugin](./activity-metrics-plugin.md) documentation.
## Examples
The following sample dataset shows which users seen on which days. The table was generated based on a source `Users` table, as follows:
```kusto
Users | summarize tostring(make_set(user)) by bin(Timestamp, 1d) | order by Timestamp asc;
```
**Output**
|Timestamp|set_user|
|---|---|
|2019-11-01 00:00:00.0000000|[0,2,3,4]|
|2019-11-02 00:00:00.0000000|[0,1,3,4,5]|
|2019-11-03 00:00:00.0000000|[0,2,4,5]|
|2019-11-04 00:00:00.0000000|[0,1,2,3]|
|2019-11-05 00:00:00.0000000|[0,1,2,3,4]|
The output of the plugin for the original table is the following:
```kusto
let StartDate = datetime(2019-11-01 00:00:00);
let EndDate = datetime(2019-11-07 00:00:00);
Users 
| evaluate new_activity_metrics(user, Timestamp, StartDate, EndDate-1tick, 1d) 
| where from_Timestamp < datetime(2019-11-03 00:00:00.0000000)
```
**Output**
|R|from_Timestamp|to_Timestamp|dcount_new_values|dcount_retained_values|dcount_churn_values|retention_rate|churn_rate|
|---|---|---|---|---|---|---|---|
|1|2019-11-01 00:00:00.0000000|2019-11-01 00:00:00.0000000|4|4|0|1|0|
|2|2019-11-01 00:00:00.0000000|2019-11-02 00:00:00.0000000|2|3|1|0.75|0.25|
|3|2019-11-01 00:00:00.0000000|2019-11-03 00:00:00.0000000|1|3|1|0.75|0.25|
|4|2019-11-01 00:00:00.0000000|2019-11-04 00:00:00.0000000|1|3|1|0.75|0.25|
|5|2019-11-01 00:00:00.0000000|2019-11-05 00:00:00.0000000|1|4|0|1|0|
|6|2019-11-01 00:00:00.0000000|2019-11-06 00:00:00.0000000|0|0|4|0|1|
|7|2019-11-02 00:00:00.0000000|2019-11-02 00:00:00.0000000|2|2|0|1|0|
|8|2019-11-02 00:00:00.0000000|2019-11-03 00:00:00.0000000|0|1|1|0.5|0.5|
|9|2019-11-02 00:00:00.0000000|2019-11-04 00:00:00.0000000|0|1|1|0.5|0.5|
|10|2019-11-02 00:00:00.0000000|2019-11-05 00:00:00.0000000|0|1|1|0.5|0.5|
|11|2019-11-02 00:00:00.0000000|2019-11-06 00:00:00.0000000|0|0|2|0|1|
Following is an analysis of a few records from the output:
* Record `R=3`, `from_TimelineColumn` = `2019-11-01`,  `to_TimelineColumn` = `2019-11-03`:
  * The users considered for this record are all new users seen on 11/1. Since this is the first period, these are all users in that bin – [0,2,3,4]
  * `dcount_new_values` – the number of users on 11/3 who weren't seen on 11/1. This includes a single user – `5`.
  * `dcount_retained_values` – out of all new users on 11/1, how many were retained until 11/3? There are three values (`[0,2,4]`), while `count_churn_values` is one (user=`3`).
  * `retention_rate` = 0.75 – the three retained users out of the four new users who were first seen in 11/1.
* Record `R=9`, `from_TimelineColumn` = `2019-11-02`,  `to_TimelineColumn` = `2019-11-04`:
  * This record focuses on the new users who were first seen on 11/2 – users `1` and `5`.