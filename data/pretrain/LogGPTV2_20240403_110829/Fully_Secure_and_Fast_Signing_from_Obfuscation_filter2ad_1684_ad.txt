if s ⊕ s1 = ⊕i(cid:54)=i(cid:48)F2,i(K2,i, t(i)) ⊕ F2,i(cid:48)(K2,i(cid:48){p}, t(i(cid:48))) then output 1 else output ⊥
end if
A succeeds if M∗ (cid:54)∈ Q and VK(M∗, σ∗) = 1 and if t∗(i(cid:48)) = p.
Game 4 In this game the constant y, used to create z in SigCheckB, is replaced with a random λ-bit string.
The other parts of the game do not change.
$← K2,i : i ∈ [1, λ]. Let K2,i(cid:48){p} ← PunctureF2,i(cid:48) (K2,i(cid:48), p). Choose y at random
j(cid:48) ⊕ ei(cid:48).
$← {0, 1}λ for all j ∈ [1, n].
$← K1 and K2,i
in {0, 1}λ. Let z = f(y).
1. Let tj
2. Choose (i(cid:48), j(cid:48)) in [1, λ] × [1, n] at random. Let p = ti(cid:48)
3. Pick K1
4. Let VK = iO(λ, SigCheckB).
5. Output VK.
6. While Mj ∈ Q is received:
i=1F1(K1, tj(cid:107)i(cid:107)M(i)) and s2j = ⊕λ
(a) Let s1j = ⊕l
(b) Compute sj = s1j ⊕ s2j. Let σj = (tj, sj).
(c) Output σj.
7. Receive (M∗, σ∗).
i=1F2(K2, t(i)
j ).
A succeeds if M∗ (cid:54)∈ Q and VK(M∗, σ∗) = 1 and if t∗(i(cid:48)) = p.
Claim 5. Suppose there exists a PPT adversary A making a type II forgery such that AdvGame1A,Π = . Then
the advantage of A in Game 2, i.e. AdvGame2A,Π , is bounded below by /(nλ).
11
Proof. For any message t∗ submitted by A in Game 1, there exists a shortest common preﬁx of t∗ with the
tj : j ∈ [1, n]. Also, since σ∗ is a type II forgery, t∗ (cid:54)= tj, for all tj. Thereore the length of this preﬁx is at most
λ − 1. In particular there exists some string tj and a preﬁx of length i, at most λ, for which t∗(i) = t(i)
j ⊕ ei.
Since the challenger chooses (i(cid:48), j(cid:48)) uniformly at random from [1, λ] × [1, n], the event (i(cid:48), j(cid:48)) ?= (i, j) occurs
with probability 1/(nλ). The claim then follows from the fact the view of A in Game 1 is identical to its
view in Game 2.
Claim 6. Suppose there exists a PPT adversary A for which AdvGame2A,Π − AdvGame3A,Π =  is non-negligible.
Then we can construct an attacker B with advantage  in distinguishing the output of the indistinguishability
obfuscator.
i=1, K1, (K2,i)λ
If it holds that t(i(cid:48))
F2,i(K2,i, t(i)) = F2,i(cid:48)(K2,i(cid:48), p) ⇔ f(cid:0)s ⊕ s1 ⊕i(cid:54)=i(cid:48) F2,i(K2,i, t(i))(cid:1) = f(y), since f is injective. Consider the
Proof. We demonstrate the functional equivalence of circuits SigCheck and SigCheckB as follows. Con-
(cid:54)= p, then
sider a claimed signature (M, σ) which is input to the latter circuit.
F2,i(cid:48)(K2,i(cid:48){p}, t(i(cid:48))) = F2,i(cid:48)(K2,i(cid:48), t(i(cid:48))), since the punctured PRF key preserves functionality outside the
punctured point. Thus s = s1 ⊕i(cid:54)=i(cid:48) F2,i(K2,i, t(i)) ⊕ F2,i(cid:48)(K2,i(cid:48), t(i(cid:48))) ⇔ s ⊕ s1 = ⊕i(cid:54)=i(cid:48)F2,i(K2,i, t(i)) ⊕
F2,i(cid:48)(K2,i(cid:48){p}, t(i(cid:48))). On the other hand, if t(i(cid:48)) = p, then s = s1 ⊕λ
i=1 F2,i(K2,i, t(i)) ⇔ s ⊕ s1 ⊕i(cid:54)=i(cid:48)
adversary B = (Samp, D). The algorithm Samp on 1λ chooses tj
$← {0, 1}λ for j ∈ [1, n]. Next it picks ran-
dom (i(cid:48), j(cid:48)) in [1, λ]× [1, n], computes string p and outputs C0 = SigCheck and C1 = SigCheckB. It sets state
i=1, i(cid:48), j(cid:48)). Now the distingisher D on input (δ, iO(λ, Cz)) sends VK = iO(λ, Cz) as
δ = ((tj)n
well as a signature σj on each message Mj received from A. If A outputs a pair (M∗, σ∗) for which M∗ (cid:54)∈ Q,
VK(M∗, σ∗) = 1 and t∗(i(cid:48)) = p then D outputs 1, otherwise ⊥. If z = 0 then B simulates Game 2. Otherwise
B simulates Game 3. The claim follows.
Claim 7. Suppose there exists a PPT adversary A for which AdvGame3A,Π − AdvGame4A,Π =  is non-negligible.
Then we can construct an attacker B with advatange  in distinguishing the output of the puncturable PRF
F2(K2,·).
Proof. Simulator B interacts with the puncturable PRF challenger while acting as a challenger to A. First B
$← {0, 1}λ for j ∈ [1, n]. Next it chooses (i(cid:48), j(cid:48)) at random from [1, λ]×[1, n] and computes string p.
chooses tj
B submits point p to the PRF challenger and receives punctured key K2,i(cid:48){p} and PRF challenge y(cid:48) in return.
B then computes z = f(y(cid:48)) and computes an obfuscation of SigCheckB. It sends VK = iO(λ, SigCheckB)
and a signature σ on every received message Mj. If A submits (M∗, σ∗) which meets the winning condition,
then B outputs 1, otherwise ⊥. If y(cid:48) = F2,i(cid:48)(K2,i(cid:48), p) then B simulates Game 3. Otherwise y(cid:48) is a random
w-bit string and B simulates Game 4. The claim follows.
Claim 8. Suppose there exists a PPT adversary A such that AdvGame4A,Π =  is non-negligible. Then we can
construct an adversary B with advantage  in inverting the one way function.
Proof. Simulator B interacts with the one way function challenger while acting as a challenger to A. First B
$← {0, 1}λ
receives the challenge z(cid:48) = f(a) as an input, where a is a λ-bit random string. Then it chooses tj
for j ∈ [1, n]. Next it chooses (i(cid:48), j(cid:48)) at random from [1, λ] × [1, n] and computes string p.
It computes
punctured key K2,i(cid:48){p} and an obfuscation of SigCheckB with z(cid:48) hardwired in place of z. Since z(cid:48) is identically
distributed to z, the view of A is identical to its view in Game 4. It sends VK and signatures on every received
message Mj. Then with probability , A outputs (M∗, σ∗) such that M∗ (cid:54)∈ Q, VK(M∗, σ∗) = 1 and t∗(i(cid:48)) = p.
Thus B can compute a∗ = s∗ ⊕ s∗
1 ⊕i(cid:54)=i(cid:48) F2,i(K2,i, t(i)) which satisﬁes a∗ = f−1(z(cid:48)).
Suppose that there exists a PPT adversary A with non-negligible advantage  in breaking the adaptive
security of the signature scheme. Similar to the proof of Lemma 1, Claims 5-8 imply that A has probabil-
ity /(nλ) − negl(λ) in inverting the one way function. As before, since n is polynomially bounded, this
contradicts its non-invertibility. It follows that the advantage of A is negligible.
12
Given Lemmas 1 and 2 we can conclude Theorem 1 as follows. Simulator B guesses ahead of time which
forgery A will make. Thus B has advantage at least (1/2) · (I /(2nl) + II /(nλ) − negl(λ)) ≥ AdvA,Π/(2n ·
max{2l, λ}) − negl(λ). Since B has negligible advantage in inverting f, it follows that A has negligible
advantage in breaking the signature scheme.
5
Improving Eﬃciency
One drawback of our previous construction is that it does not meet our goal of achieving fast signing. (We
will see some concrete end-to-end comparisons in Section 6.) Relative to the selectively secure Sahai-Waters
scheme the primary drawback is that a punctured PRF must be evaluated (cid:96) diﬀerent times. If we use the
GGM implementation each call results is around (cid:96) applications of the underlying pseudo random generator,2
resulting in an O((cid:96)2) applications.
In this section we demonstrate an idea to lower the cost of our fully secure scheme. The primary change
is that instead of using (cid:96) diﬀerent punctured PRF systems, each with a diﬀerent domain size, we will use
one punctured PRF with a variable length domain {0, 1}1≤i≤(cid:96). That is the input to the function can be a
string of any length up to (cid:96). We can then plug this into our main construction.
At ﬁrst glance it might seem that this modiﬁcation brings us nothing since the construction still needs
to XOR together (cid:96) diﬀerent PRF values. However, as we will show that it is possible to create a variable
length punctured PRF where the cost of evaluating the PRF on all preﬁxes of an (cid:96) bit message M is the
same as computing the GGM tree once on M. The main modiﬁcation is that, following Goldreich [Gol06],
we now need a length tripling PRG G : {0, 1}λ → {0, 1}3·λ that goes from λ bits to 3 · λ bits. In practice,
this could be more than using a length doubling one, but should result in signiﬁcantly faster signatures than
the prior approach.
Below we ﬁrst give the modiﬁed punctured PRF construction. Then we show the changes to our scheme.
5.1 Puncturable PRFs for Variable Length Domain
Let the puncturable PRF have variable message size v bits and output size λ bits. Here v ≤ l. Let G be a
PRG with input size λ bits and output size 3λ bits. Deﬁne auxiliary functions G0, G1 and G⊥ mapping λ
bits to λ bits as follows: G(x) = G0(x)(cid:107)G1(x)(cid:107)G⊥(x).
Construction
• Setup(1λ) : Let K be a random λ-bit string. Output key K.
• Puncture(K, x) :
Write x as b1 . . . bv, where v ≤ l.
for i = 1 to v − 1 do
FK,i ← Gbi
(Gbi−1(. . . (Gb1(K)) . . .))
FK,i,⊥ ← G⊥(Gbi . . . (Gb1(K)) . . .)
end for
FK,v ← Gbv
(Gbv−1(. . . (Gb1(K)) . . .))
FK,v+1,0 ← G0(Gbv(. . . (Gb1(K)) . . .))
FK,v+1,1 ← G1(Gbv(. . . (Gb1(K)) . . .))
• Eval(K{x}, y) :
if y = x then
output ⊥
Let K{x} = (FK,i, FK,i,⊥)i∈[1,v−1], FK,v, (FK,v+1,b)b∈[0,1]. Output key K{x}.
else
Let x = b1 . . . bv.
2The exact number of applications will depend on the length of the input. In Section 6 we work out the details.
13
Write y = b1 . . . bib(cid:48)
if i  i then
Output G⊥(Gb(cid:48)
(. . . Gb(cid:48)
u
(FK,i+1) . . .)).
i+2
Output G⊥(Gb(cid:48)
(. . . Gb(cid:48)
v+2
(FK,v+1,b(cid:48)
v+1
) . . .)).
u
else
end if
end if
Cost To evaluate this puncturable PRF on a u-bit message requires u−i calls to G, where i is the length of
the longest common preﬁx with the punctured point. Even more signiﬁcantly, to evaluate the PRF on every
preﬁx of a u-bit message still only requires u− i calls, because evaluations on successive preﬁxes corresponds
to pipelined calls to G, with each evaluation terminated by a single application of G⊥. We will see that this
leads to signiﬁcant savings in our signature scheme.
Security We defer the proof of security of this puncturable PRF to the Appendix.
5.2 Modiﬁed Scheme
The message space of the signature scheme is {0, 1}l. For l-bit message M, let M(i) denote the i-th bit of
M. For λ-bit string t, let t(i) denote the ﬁrst i bits of t. Let F1(K1,·) be a puncturable PRF mapping lt-bit
inputs to λ-bit outputs. Here lt = λ +(cid:100)lg l(cid:101) + 1. Let F2(K2,·) be a puncturable PRF mapping {0, 1}1≤i≤(cid:96) to
λ-bit outputs. Let f be an injective one way function mapping λ-bit inputs to w-bit outputs. Our signature
scheme is as follows.
$← K1 and K2
$← K2. The secret key is (K1, K2). Let the
Setup(1λ) : Pick puncturable PRF keys K1
veriﬁcation key VK be an indistinguishability obfuscation of the program SigCheck deﬁned below.
Sign(SK, M) : Choose t $← {0, 1}λ. Let s1 = ⊕l
s = s1 ⊕ s2. Output σ = (t, s).
Verify(VK, M, σ) : Output VK(M, σ).
i=1F1(K1, t(cid:107)i(cid:107)M(i)). Let s2 = ⊕λ
i=1F2(K2, t(i)). Compute
SigCheck :
Inputs : M, σ
Constants : PRF keys K1 and K2
(t, s) ← σ
s1 ← ⊕l
s2 ← ⊕λ
if s = s1 ⊕ s2 then output 1 else output ⊥
i=1F1(K1, t(cid:107)i(cid:107)M(i))
i=1F2(K2, t(i))
We omit the proof of this scheme since it follows extremely close to the base scheme of Section 4.
6 Analysis and Evaluation
In this section we evaluate the cost of the (selectively secure) Sahai-Waters construction and the proposed
adaptively secure construction in terms of the cost of the puncturable PRFs. We begin by expressing the
cost of each scheme in terms of the underlying length-doubling and length-tripling PRGs. Next we show