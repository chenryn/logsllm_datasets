communications. In this scenario, the attacker and the victim are
physically separated; hence, the attacker cannot exploit physical
side channels, such as power usage. Furthermore, the attacker does
not have a co-resident process or VM running on the victim’s
machine, thus it is hard to passively observe or actively manipulate
OS and hardware-level side channels. What the attacker can do is
to either interact with the server and measure the time it takes for
the server to respond, or observe the network traffic and measure
request and response sizes. In our setting, we assume that data
encryption has been properly implemented and the attacker cannot
directly read the contents of any packet.
3 SIDE-CHANNELS AND BOUNDED
NON-INTERFERENCE
In this section, we introduce the property of ϵ-bounded non-interference,
which is the security policy that will be subsequently verified using
the Themis system.
Let P be a program that takes a list of input values (cid:174)a, and let RP((cid:174)a)
denote the resource usage of P on input (cid:174)a. Following prior work in
the literature [30, 35, 60], we assume that each input is marked as
either high or low, where high inputs denote security-sensitive data
and low inputs denote public data. Let (cid:174)ah (resp. (cid:174)al ) be the sublist
of the inputs that are marked as high (resp. low). Prior work in the
literature [6, 25, 66] considers a program to be side-channel-free if
the following condition is satisfied:
Definition 1. A program P is free of resource-related side-channel
vulnerabilities if
∀ (cid:174)a1, (cid:174)a2. ( (cid:174)a1l = (cid:174)a2l ∧ (cid:174)a1h (cid:44) (cid:174)a2h) ⇒ RP( (cid:174)a1) = RP( (cid:174)a2)
The above definition, which is a direct adaptation of the classical
notion of non-interference [34], states that a program is free of side
channels if the resource usage of the program is deterministic with
respect to the public inputs. In other words, the program’s resource
usage does not correlate with any of its secret inputs.
We believe that Definition 1 is too strong in practice: There are
many realistic programs that are considered side-channel-free but
that would be deemed vulnerable according to Definition 1. For
example, consider a setting in which the attacker is co-located with
the victim on a slow network and the resource usage of the pro-
gram varies by only a few CPU cycles depending on the value of the
high input. Since the resource usage of the program is not identical
for different high inputs, this program is vulnerable according to
Definition 1, but it is practically impossible for an attacker to ex-
ploit this vulnerability given the noise in the program’s execution
environment.
In this paper, we therefore use a relaxed version of the above
definition, with the goal of giving security analysts greater flex-
ibility and helping them understand the severity of the resource
usage imbalance. Specifically, we propose the following variant of
non-interference that we call ϵ-bounded non-interference:
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA877⟨expr⟩ ::= ⟨const⟩ | ⟨var⟩ | ⟨expr⟩ ◦ ⟨expr⟩
(◦ ∈ {+,−,×,∨,∧, ...})
if ⟨expr⟩ then ⟨stmts⟩ else ⟨stmts⟩
⟨stmt⟩ ::= skip | consume(⟨expr⟩) | ⟨var⟩ := ⟨expr⟩
⟨stmts⟩ ::= ⟨stmt⟩ | ⟨stmt⟩; ⟨stmts⟩
|
| while ⟨expr⟩ do ⟨stmts⟩
⟨params⟩ ::= ⟨param⟩ | ⟨param⟩, ⟨params⟩
⟨param⟩ ::= ⟨annot⟩ ⟨var⟩
⟨annot⟩ ::= low | high
⟨prog⟩ ::= λ⟨params⟩. ⟨stmts⟩
Figure 3: Language used in our formalization
Definition 2. A program P obeys the ϵ-bounded non-interference
( (cid:174)a1l = (cid:174)a2l ∧ (cid:174)a1h (cid:44) (cid:174)a2h) ⇒ |RP( (cid:174)a1) − RP( (cid:174)a2)| ≤ ϵ
property if
∀ (cid:174)a1, (cid:174)a2.
In this definition, any variation in resource usage below ϵ is
deemed to be a minor imbalance that is unlikely to be exploitable
under real-world scenarios. Hence, compared to Definition 1, the
notion of ϵ-bounded interference considers a program to be secure
as long as the difference in resource usage is “minor" according to
the constant ϵ. In practice, the value of ϵ should be chosen by secu-
rity analysts in light of the security requirements of the application
and the underlying threat model. If Definition 2 is violated even
for large values of ϵ, this means the application potentially exhibits
large secret-induced variations in resource usage, and hence, the
underlying vulnerability is potentially more serious.
4 VERIFYING BOUNDED
NON-INTERFERENCE USING QCHL
One of the key technical contributions of this paper is a new method
for verifying ϵ-bounded non-interference using QCHL, a variant
of Cartesian Hoare Logic introduced in recent work for verifying
k-safety [65]. As mentioned in Section 1, QCHL proves triples of
the form ⟨ϕ⟩ S ⟨ψ⟩, where S is a program fragment and ϕ,ψ are first-
order formulas that relate the program’s resource usage between
an arbitrary pair of program runs. Starting with the precondition
that the program’s low inputs are the same for a pair of program
runs, QCHL tries to derive a post-condition that logically implies
ϵ-bounded non-interference.
4.1 Language
We will describe our program logic, QCHL, using the simplified
imperative language shown in Figure 3. In this language, program
inputs are annotated as high or low, indicating private and public
data respectively. Atomic statements include skip (i.e., a no-op),
assignments of the form x := e, and consume statements, where
“consume(e)”indicates the consumption of e units of resource. Our
language also supports standard control-flow constructs, including
sequential composition, if statements, and loops.
P = λ(cid:174)p.S
S = (x := e)
∀pi ∈ (cid:174)p. Γ(pi) = ai
RP((cid:174)a) = r
S = skip
Γ ⊢ S : Γ, 0
Γ ⊢ e : v
Γ′ ⊢ S : Γ′, 0
Γ ⊢ S : Γ′, r
Γ′ = Γ[x ← v]
S = consume (e)
Γ ⊢ S : Γ, v
Γ ⊢ e : v
Γ ⊢ S1 : Γ1, r1
Γ1 ⊢ S2 : Γ2, r2
S = S1; S2
Γ ⊢ S : Γ2, r1 + r2
S = if e then S1 else S2
Γ ⊢ S : Γ′, r′
S = if e then S1 else S2
Γ ⊢ S : Γ′, r′
Γ ⊢ e : true
Γ ⊢ S1 : Γ′, r′
Γ ⊢ e : false
Γ ⊢ S2 : Γ′, r′
S = while e do S′
Γ ⊢ S : Γ, r
Γ ⊢ e : false
S = while e do S′
Γ ⊢ e : true
Γ ⊢ S′ : Γ1, r1
Γ1 ⊢ S : Γ2, r2
Γ ⊢ S : Γ2, r1 + r2
Figure 4: Rules for computing resource usage
Figure 4 defines the cost-instrumented operational semantics
of this language using judgments of the form Γ ⊢ S : Γ′, r. The
meaning of this judgment is that, assuming we execute S under
environment Γ (mapping variables to values), then S consumes
r units of resource and the new environment is Γ′. As shown in
Figure 4, we use the notation RP((cid:174)a) to denote the resource usage
of program P on input vector (cid:174)a. In cases where the resource usage
is irrelevant, we simply omit the cost and write Γ ⊢ S : Γ′.
4.2 QCHL Proof Rules
We now turn our attention to the proof rules of Quantitative Carte-
sian Hoare Logic (QCHL), which forms the basis of our verification
methodology. Similar to CHL [65], QCHL is a relational program
logic that allows proving relationships between multiple runs of
the program. However, unlike CHL, QCHL is concerned with prov-
ing properties about the difference in resource usage across multi-
ple runs. Towards this goal, QCHL performs cost instrumentation
and explicitly tracks the program’s resource usage. Furthermore,
since our goal is to prove the specific property of ϵ-bounded non-
interference, QCHL exploits domain-specific assumptions by incor-
porating taint information into the proof rules. Finally, since the
QCHL proof rules we describe here are deterministic, our program
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA878logic can be immediately translated into a verification algorithm
(modulo an oracle for providing loop invariants and proving stan-
dard Hoare triples).
Figure 5 presents the proof rules of QCHL. Here, all proof rules,
with the exception of Rule (0), derive judgments of the form Σ ⊢
⟨Φ⟩ S1 ⊛ S2 ⟨Ψ⟩, where S1 and S2 contain a disjoint set of variables
and Σ is a taint environment mapping variables to a taint value
drawn from the set {low, high} . The notation S1 ⊛ S2 describes a
program that is semantically equivalent to S1; S2 but that is some-
how easier to verify (because it tries to execute loops from different
executions in lock step). Hence, we have Σ ⊢ ⟨Φ⟩ S1 ⊛ S2 ⟨Ψ⟩ if
{Φ}S1; S2{Ψ} is a valid Hoare triple. As we will see shortly, the
taint environment Σ is used as a way of increasing the precision
and scalability of the analysis. In the remainder of this section, we
assume that Σ is sound, i.e., if Σ(x) is low, then the value of x does
not depend (either explicitly or implicitly) on any high inputs. We
now explain each of the rules from Figure 5 in more detail.
The first rule labeled (0) corresponds to the top-level verification
procedure. If we can derive Σ ⊢ SideChannelFree(P, ϵ), then P obeys
the ϵ-bounded non-interference property. In this rule, we use the
notation Sτ to denote the cost-instrumented version of S, defined
as follows:
Definition 3. Given a program P = λ(cid:174)p.S, its cost-instrumented
version is another program Pτ obtained by instrumenting P with
a counter variable τ that tracks its resource usage. More formally,
Pτ = γ(P) where the instrumentation procedure γ is defined as:
• γ(λ(cid:174)p.S) = λ(cid:174)p.(τ := 0; γ(S))
• γ(skip) = skip
• γ(x := e) = (x := e)
• γ(consume (e)) = (τ := τ + e)
• γ(S1; S2) = γ(S1); γ(S2)
• γ(if e then S1 else S2) = if e then γ(S1) else γ(S2)
• γ(while e do S) = while e do γ(S)
Essentially, the program Pτ is the same as P except that it con-
tains an additional variable τ that tracks the program’s resource
usage. As stated by the following lemma, our instrumentation is
correct with respect to the operational semantics from Figure 4.
Lemma 4.1. Let program P = λ(cid:174)p.S and let Pτ = λ(cid:174)p.Sτ . We have
- Sτ does not contain any consume statement.
- If Γ((cid:174)p) = (cid:174)a and Γ ⊢ Sτ : Γ′, then RP((cid:174)a) = Γ′(τ).
Hence, rule (0) from Figure 5 instruments the original program
λ(cid:174)p. S to obtain a new program λ(cid:174)p. Sτ that uses a fresh variable τ to
track the program’s resource usage. Since bounded non-interference
is a 2-safety property, it then creates two α-renamed copies Sτ
1 and
Sτ
2 of Sτ that have no shared variables and uses the remaining
QCHL proof rules to derive a triple
h (cid:44) (cid:174)p2
If the post-condition Ψ logically implies |τ1 − τ2| ≤ ϵ, we have a
proof that the program obeys bounded non-interference. Intuitively,
this proof rule considers an arbitrary pair of executions of S where
the low inputs are the same and tries to prove that the resource
usage of the two runs differs by at most ϵ.
The remaining rules from Figure 5 derive QCHL triples of the
form ⟨Φ⟩ S1 ⊛S2 ⟨Ψ⟩. Our verification algorithm applies these rules
1 ⊛ Sτ
2 ⟨Ψ⟩
l = (cid:174)p2
l ∧ (cid:174)p1
h⟩ Sτ
⟨ (cid:174)p1
λ(cid:174)p1.Sτ
λ(cid:174)p2.Sτ
1 = α(λ(cid:174)p.Sτ )
2 = α(λ(cid:174)p.Sτ )
Σ ⊢ SideChannelFree(λ(cid:174)p.S, ϵ)
Φ = ( (cid:174)p1
l ∧ (cid:174)p1
1 ⊛ Sτ
h (cid:44) (cid:174)p2
l = (cid:174)p2
Σ ⊢ ⟨Φ⟩ Sτ
2 ⟨Ψ⟩
|= Ψ → |τ1 − τ2| ≤ ϵ
h)
(0)
Σ ⊢ ⟨Φ⟩ S2 ⊛ S1 ⟨Ψ⟩
Σ ⊢ ⟨Φ⟩ S1 ⊛ S2 ⟨Ψ⟩
(1)
S (cid:44) (S1; S2)
Σ ⊢ ⟨Φ⟩ S; skip ⊛ S′ ⟨Ψ⟩
Σ ⊢ ⟨Φ⟩ S ⊛ S′ ⟨Ψ⟩
⊢ {Φ} S1 {Φ′}
Σ ⊢ ⟨Φ′⟩ S2 ⊛ S3 ⟨Ψ⟩
S1 = skip ∨ S1 = (v := e)
Σ ⊢ ⟨Φ⟩ S1; S2 ⊛ S3⟨Ψ⟩
(2)
(3)
⊢ {Φ} S {Ψ}
(4)
Σ ⊢ ⟨Φ⟩ S ⊛ skip ⟨Ψ⟩
Σ ⊢ ⟨Φ ∧ e⟩ S1; S ⊛ S3⟨Ψ1⟩
Σ ⊢ ⟨Φ ∧ ¬e⟩ S2; S ⊛ S3⟨Ψ2⟩
Σ ⊢ ⟨Φ⟩ if e then S1 else S2; S ⊛ S3⟨Ψ1 ∨ Ψ2⟩
(5)
⊢ {Φ}while e1 do S1{Φ′}
⊢ {Φ′}while e2 do S2{Ψ′}
Σ ⊢ ⟨Ψ′⟩ S ⊛ S′ ⟨Ψ⟩
Σ ⊢ ⟨Φ⟩ while e1 do S1; S ⊛ while e2 do S2; S′⟨Ψ⟩
Σ ⊢ CanSynchronize(e1, e2, S1, S2, I)
Σ ⊢ ⟨I ∧ e1 ∧ e2⟩S1 ⊛ S2⟨I′⟩
Σ ⊢ ⟨I ∧ ¬e1 ∧ ¬e2⟩S ⊛ S′⟨Ψ⟩
|= I′ → I
|= Φ → I
Σ ⊢ ⟨Φ⟩ while e1 do S1; S ⊛ while e2 do S2; S′⟨Ψ⟩
(6)
(7)
Figure 5: QCHL proof rules. The notation α(S) denotes an
α-renamed version of statement S.
in the reverse order shown in Figure 5. That is, we only use rule
labeled i if no rule with label j > i is applicable. Hence, unlike stan-
dard CHL, our verification method does not perform backtracking
search over the proof rules.
Let us now consider the remaining rules in more detail: Rule
(1) is the same as commutativity rule in CHL and states that the
⊛ operator is symmetric. Intuitively, since S1 and S2 do not share
variables, any interleaving of S1 and S2 will yield the same result,
and we can therefore commute the two operands when deriving
QCHL triples. As will become clear shortly, the commutativity rule
ensures that our verification algorithm makes progress when none
of the other rules are applicable.
The next rule states that we are free to append a skip statement to
any non-sequential statement without affecting its meaning. While
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA879this rule may not seem very useful on its own, it allows us to avoid
redundancies in the proof system by bringing each S1 ⊛ S2 to a
canonical form where S1 is always of the form S; S′ or S2 is skip.
Rule (3) specifies the verification logic for S1 ⊛ S2 when S1 is
of the form A; S where A is an atomic statement. In this case, we
simply “consume" A by deriving the Hoare triple {Φ}A{Φ′} and
then use Φ′ as a precondition for S ⊛ S2.
Rule (4) serves as the base case for our logic. When we want to
prove ⟨Φ⟩ S ⊛ skip ⟨Ψ⟩, we immediately reduce this judgement to
the standard Hoare triple {Φ} S {Ψ} because skip is just a no-op.
Example. Suppose we want to prove (0-bounded) non-interference
for the following program:
λ ( low x). consume (x); skip ;
First we apply transformation γ and get the resource instru-
mented program:
λ ( low x). τ =0; τ = τ + x; skip ;
Ignore the taint environment for now, as we will not use it in
this example. According to rule (0), we only need to prove
⟨x1 = x2⟩ τ1 = 0; τ1 = τ1 + x1; skip; ⊛
τ2 = 0; τ2 = τ2 + x2; skip; ⟨τ1 = τ2⟩
Applying rule (3) twice, we can reduce the above judgement to the
following one:
⟨x1 = x2 ∧ τ1 = x1⟩ skip; ⊛ τ2 = 0; τ2 = τ2 + x2; skip; ⟨τ1 = τ2⟩