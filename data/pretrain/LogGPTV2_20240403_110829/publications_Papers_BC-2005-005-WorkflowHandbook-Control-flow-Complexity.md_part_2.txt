by objective and quantifiable metrics. Complexity analysis allows
calculating insightful metrics and thereby identifying complex and
error prone processes.
• Maintenance analysis. The complexity of processes tends to increase
as they are maintained and over a period of time (Figure 2). By
measuring the complexity before and after a proposed change, we
can minimize the risk of the change.
• Reengineering. Complexity analysis provides knowledge of the
structure of processes. Reengineering can benefit from the proper
application of complexity analysis by reducing the complexity of
processes.
• Dynamic behavior. Processes are not static applications. They are
constantly undergoing revision, adaptation, change, and
modification to meet end users needs. The complexity of these
processes and their continuous evolution makes it very difficult to
assure their stability and reliability. In-depth analysis is required for
fixing defects in portions of processes of high complexity (Figure 2).
6
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
Process Complexity Analysis and Process
Reengineering
60
50
40 ytixelpmoC
30
20
Process Adaptation and Modification
10
Complexity Analysis and Process Reengineering
0
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29
Time
Figure 2. Process Complexity Analysis and Process Reengineering
OVERVIEW OF MCCABE’S CYCLOMATIC COMPLEXITY
Since our work to evaluate processes’ complexity borrows some ideas from
McCabe’s cyclomatic complexity (MCC) (McCabe, 1976) to analyze software
complexity, we start by describing the importance of MCC and illustrates
its usage. This metric was chosen for its reliability as a complexity indicator
and its suitability for our research.
Since its development, McCabe’s cyclomatic complexity has been one of the
most widely accepted software metrics and has been applied to tens of
millions of lines of code in both the Department of Defense (DoD) and
commercial applications. The resulting base of empirical knowledge has
allowed software developers to calibrate measurements of their own
software and arrive at some understanding of its complexity.
Software metrics are often used to give a quantitative indication of a
program’s complexity. However, it is not to be confused with algorithmic
complexity measures (e.g. Big-Oh “O”-Notation), whose aim is to compare
the performance of algorithms. Software metrics have been found to be
useful in reducing software maintenance costs by assigning a numeric
value to reflect the ease or difficulty with which a program module may be
understood.
McCabe’s cyclomatic complexity is a measure of the number of linearly
independent paths in a program. It is intended to be independent of
language and language format (McCabe & Watson, 1994). MCC is an
indication of a program module’s control flow complexity. Derived from a
module’s control graph representation, MCC has been found to be a reliable
indicator of complexity in large software projects (Ward, 1989). This metric
is based on the assumption that a program’s complexity is related to the
number of control paths through the program. For example, a 10-line
program with 10 assignment statements is easier to understand than a 10-
line program with 10 if-then statements.
7
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
MCC is defined for each module to be e - n + 2, where e and n are the
number of edges and nodes in the control flow graph, respectively. Control
flow graphs describe the logic structure of software modules. The nodes
represent computational statements or expressions, and the edges
represent transfer of control between nodes. Each possible execution path
of a software module has a corresponding path from the entry to the exit
node of the module’s control flow graph. For example, in Figure 3, the MCC
of the control flow graph for the Java code described is 14-11+2=5.
Figure 3. Example of a Java program and its corresponding
flowgraph
Our major objective is to develop a metric that could be used in the same
way as the MCC metric but to evaluate processes’ complexity. One of the
first important observations that can be made from MCC control flow
graph, shown in Figure 3, is that this graph is extremely similar to Web
processes and workflows. One major difference is that the nodes of a MCC
control flow graph have identical semantics, while process nodes (i.e., Web
services or workflow tasks) can have different semantics (e.g., AND-splits,
XOR-splits, OR-joins, etc). Our approach will tackle this major difference.
PROCESS CONTROL-FLOW COMPLEXITY
Complexity metrics provide valuable information concerning the status and
quality of process development projects. Access to this information is vital
for accurately assessing overall process quality, identifying areas that need
improvement, and focusing on development and testing efforts. In this
section, we describe the structure and representation of Web processes and
discuss how control-flow complexity is defined and computed for a Web
process.
8
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
PROCESS STRUCTURE AND REPRESENTATION
Control flow graphs can be used to describe the logic structure of Web
processes. A Web process is composed of Web services and transitions. Web
services are represented using circles and transitions are represented using
arrows. Transitions express dependencies between Web services. A Web
service with more than one outgoing transition can be classified as an AND-
split, OR-split or XOR-split. AND-split Web services enable all their
outgoing transitions after completing their execution. OR-split Web services
enable one or more outgoing transition after completing their execution.
XOR-split Web services enable only one outgoing transition after completing
their execution. AND-split Web services are represented with a ‘•’, OR-split
are represented with a ‘O’ and XOR-split Web services are represented with
a ‘⊕’. A Web service with more than one incoming transition can be
classified as an AND-join, OR-join or XOR-join. AND-join Web services start
their execution when all their incoming transitions are enabled. OR-join
services start their execution when a subset of their incoming transitions is
enabled. XOR-join Web services are executed as soon as one of the
incoming transitions is enabled. As with AND-split, OR-split and XOR-split
Web services, AND-join, OR-join and XOR-join Web services are
represented with the symbols ‘•’, ‘O’ and ‘⊕’, respectively.
An example of a Web process is shown in Figure 4. The process has been
developed by the Fungal Genome Resource (FGR) laboratory in an effort to
improve the efficiency of their processes (Cardoso, Miller et al., 2004). One
of the reengineered processes was the DNA sequencing workflow, since it
was considered to be beneficial for the laboratory’s daily activities.
Figure 4. The DNA Sequencing Workflow.
Semantics of Processes
The complexity of a Web process or workflow can be analyzed according to
different perspectives. In our work we are interested in evaluating the
complexity of processes from a control-flow perspective. In a Web process
and workflow the control-flow logic is captured in a process model and
function logic is captured in the applications, data, and people the model
invokes. A process model includes basic constructs such as transitions,
roles, Web services or tasks, XOR-splits, OR-splits, AND-splits, XOR-joins,
OR-joins, AND-joins and networks (sub-processes.)
9
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
Our approach uses the idea introduced by McCabe. Numerous studies and
experience in software projects have shown that the MCC measure
correlates very closely with errors in software modules. The more complex a
module is, the more likely it is to contain errors. Our goal is to adapt
McCabe’s cyclomatic complexity to be applied to processes.
As stated previously, one interesting remark is that all the nodes of MCC
flowgraphs have identical semantics. Each node represents one statement
in a source code program. On the other hand, the nodes in Web processes
and workflows can assume different semantics. Thus, we consider three
constructs with distinct semantics presents in process models: XOR-split,
OR- split, and AND-split. The three constructs have the following
semantics:
• XOR-split. A point in the process where, based on a decision or
process control data, one of several transitions is chosen. It is
assumed that only one of the alternatives is selected and executed,
i.e. it corresponds to a logic exclusive OR.
• OR-split. A point in the process where, based on a decision or
process control data, one or more transitions are chosen. Multiple
alternatives are chosen from a given set of alternatives. It is
assumed that one or more of the alternatives is selected and
executed, i.e. it corresponds to a logic OR.
• AND-split. This construct is required when two or more activities
are needed to be executed in parallel. During the execution of a
process, when an AND-split is reached the single thread of control
splits into multiple treads of control which are executed in parallel,
thus allowing activities to be executed at the same time or in any
order. It is assumed that all the alternatives are selected and
executed, i.e. it corresponds to a logic AND.
Definition and Measurement of Control-flow Complexity
The control-flow behavior of a process is affected by constructs such as
splits and joins. Splits allow defining the possible control paths that exist
through the process. Joins have a different role; they express the type of
synchronization that should be made at a specific point in the process.
Since we are interested in calculating the complexity of processes’ control-
flow, the formulae that we will present evaluate the complexity of XOR-split,
OR-split, and AND-split constructs. We call this measurement of
complexity, Control-flow Complexity (CFC). Each formula computes the
number of states that can be reached from one of the three split constructs.
The measure is based on the relationships between mental discriminations
needed to understand a split construct and its effects. This type of
complexity has been referred to as psychological complexity. Therefore, the
more possible states follow a split, the more difficulty the designer or
business process engineer has to understand the section of a processes and
thus the process itself.
10
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
In processes, the McCabe’s Cyclomatic complexity cannot be used
successfully since the metric ignores the semantics associated with nodes
of the graph. While the nodes (i.e. activities) of processes have distinct
semantics associated, the nodes of a program’s flowgraph are
undifferentiated.
We now introduce several definitions that will constitute the basis for CFC
measurement.
Definition 1 (Process measurement). Process measurement is concerned
with deriving a numeric value for an attribute of a process.
Examples of attributes can include process complexity, duration (time),
cost, and reliability (Cardoso, Miller et al., 2004).
Definition 2 (Process metric). Any type of measurement related to a process.
Process metrics allows attributes of processes to be quantified.
Definition 3 (Activity fan-out). Fan-out is the number of transitions going
out of an activity. The fan-out is computed using function fan-out(a), where
a is n activity.
Definition 4 (Control-flow induced mental state). A mental state is a state
that has to be considered when a designer is developing a process. Splits
introduce the notion of mental states in processes. When a split (XOR, OR,
or AND) is introduced in a process, the business process designer has to
mentally create a map or structure that accounts for the number of states
that can be reached from the split.
The notion of mental state is important since there are certain theories
(Miller, 1956) that prove complexity beyond a certain point defeats the
human mind’s ability to perform accurate symbolic manipulations, and
hence results in error.
Definition 5 (XOR-split Control-flow Complexity). XOR-split control-flow
complexity is determined by the number of mental states that are
introduced with this type of split. The function CFC (a), where a is a
XOR-split
activity, computes the control-flow complexity of the XOR-split a. For XOR-
splits, the control-flow complexity is simply the fan-out of the split.
CFC (a)= fan-out(a)
XOR-split
In this particular case, the complexity is directly proportional to the
number of activities that follow a XOR-split and that a process designer
needs to consider, analyze, and assimilate. The idea is to associate the
complexity of an XOR-split with the number of states (Web services or
11
HOW TO MEASURE THE CONTROL-FLOW COMPLEXITY OF WEB PROCESSES AND
WORKFLOWS
workflow tasks) that follow the split. This rationale is illustrated in Figure
5. Please note that in this first case the computation and result bear a
strong similarity to the McCabe’s cyclomatic complexity.
Figure 5. XOR-split control-flow complexity
Definition 6 (OR-split Control-flow Complexity). OR-split control-flow
complexity is also determined by the number of mental states that are
introduced with the split. For OR-splits, the control-flow complexity is 2n-1,