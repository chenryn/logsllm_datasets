          ldrb  
w0, [x29,39] 
; W0=c 
          cmp  
w0, 13         ; is it '\r'? 
          beq  
.L3 
          ldrb  
w0, [x29,39] 
; W0=c 
          cmp  
w0, 10         ; is it '\n'? 
          bne  
.L4            ; goto exit if it is not 
.L3: 
          ldr  
x0, [x29,40] 
; X0=str_len 
          sub  
x0, x0, #1 
; X0=str_len-1 
          ldr  
x1, [x29,24] 
; X1=s 
          add  
x0, x1, x0 
; X0=s+str_len-1 
          strb  
wzr, [x0]     ; write byte at s+str_len-1 
; decrement str_len: 
          ldr  
x0, [x29,40] 
; X0=str_len 
          sub  
x0, x0, #1 
; X0=str_len-1 
          str  
x0, [x29,40] 
; save X0 (or str_len-1) to local stack 
.L2: 
          ldr  
x0, [x29,40] 
; str_len==0? 
          cmp  
x0, xzr 
; goto exit then 
          beq  
.L4 
          ldr  
x0, [x29,40] 
; X0=str_len 
          sub  
x0, x0, #1 
; X0=str_len-1 
          ldr  
x1, [x29,24] 
; X1=s 
          add  
x0, x1, x0 
; X0=s+str_len-1 
; load byte at address s+str_len-1 to W0 
          ldrb  
w0, [x0] 
          strb  
w0, [x29,39] ; store loaded byte to "c" 
          ldrb  
w0, [x29,39] ; reload it 
; is it zero byte? 
          cmp  
w0, wzr 
; goto exit, if its zero or to L5 if its not'' 
          bne  
.L5 
.L4: 
; return s 
          ldr  
x0, [x29,24] 
          ldp  
x29, x30, [sp], 48 
          ret 
47.5  ARM64:优化 GCC（Linaro）4.9 
编译器采用了更为高级的优化技术。在程序开始时，首先调入第一个字符，并和十进制数 10 进行比对
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 47 章  字符串剪切 
491 
（也就是换行 LF 的数值）。此后，后续字符相继被调入主循环。这种处理方法和本书第 47 章第 3 节中的例
子类似。 
指令清单 47.5  GCC（Linaro）4.9 的优化 
str_trim: 
          stp  
x29, x30, [sp, -32]! 
          add  
x29, sp, 0 
          str  
x19, [sp,16] 
          mov  
x19, x0 
; X19 will always hold value of "s" 
          bl   
strlen 
; X0=str_len 
          cbz  
x0, .L9  
; goto L9 (exit) if str_len==0 
          sub  
x1, x0, #1 
; X1=X0-1=str_len-1 
          add  
x3, x19, x1 
; X3=X19+X1=s+str_len-1 
          ldrb  
w2, [x19,x1]  
; load byte at address X19+X1=s+str_len-1 
; W2=loaded character 
          cbz  
w2, .L9  
; is it zero? jump to exit then 
          cmp  
w2, 10  
; is it '\n'? 
          bne  
.L15 
.L12: 
; main loop body. loaded character is always 10 or 13 at this moment! 
          sub  
x2, x1, x0 
; X2=X1-X0=str_len-1-str_len=-1 
          add  
x2, x3, x2 
; X2=X3+X2=s+str_len-1+(-1)=s+str_len-2 
          strb  
wzr, [x2,1]  
; store zero byte at address s+str_len-2+1=s+str_len-1 
          cbz  
x1, .L9  
; str_len-1==0? goto exit, if so 
          sub  
x1, x1, #1  
; str_len-- 
          ldrb  
w2, [x19,x1]  
; load next character at address X19+X1=s+str_len-1 
          cmp  
w2, 10  
; is it '\n'? 
          cbz  
w2, .L9  
; jump to exit, if its zero' 
          beq  
.L12   
; jump to begin loop, if its' '\n' 
.L15: 
          cmp  
w2, 13  
; is it '\r'? 
          beq  
.L12   
; yes, jump to the loop body begin 
.L9: 
; return "s" 
          mov  
x0, x19 
          ldr  
x19, [sp,16] 
          ldp  
x29, x30, [sp], 32 
          ret 
47.6  ARM: Keil 6/2013 优化（ARM 模式） 
这里我们会再次看到，编译器分配了 ARM 模式下的条件指令，使整个代码更为紧凑。 
指令清单 47.6  Keil 6/2013 优化（ARM 模式） 
str_trim PROC 
          PUSH  
{r4,lr} 
; R0=s 
          MOV  
r4,r0 
; R4=s 
          BL   
strlen  
; strlen() takes "s" value from R0 
; R0=str_len 
          MOV  
r3,#0 
; R3 will always hold 0 
|L0.16| 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
492 
逆向工程权威指南（下册） 
          CMP  
r0,#0  
; str_len==0? 
          ADDNE  r2,r4,r0   
; (if str_len!=0) R2=R4+R0=s+str_len 
          LDRBNE  r1,[r2,#-1]  
; (if str_len!=0) R1=load byte at address R2-1=s+str_len-1 
          CMPNE  r1,#0  
; (if str_len!=0) compare loaded byte against 0 
          BEQ  
|L0.56|  
; jump to exit if str_len==0 or loaded byte is 0 
          CMP  
r1,#0xd  
; is loaded byte '\r'? 
          CMPNE  r1,#0xa  
; (if loaded byte is not '\r') is loaded byte '\r'? 
          SUBEQ  r0,r0,#1   
; (if loaded byte is '\r' or '\n') R0-- or str_len-- 
          STRBEQ  r3,[r2,#-1]  
; (if loaded byte is '\r' or '\n') store R3 (zero) at 
    address R2-1=s+str_len-1 
          BEQ  
|L0.16|  
; jump to loop begin if loaded byte was '\r' or '\n' 
|L0.56| 
; return "s" 
          MOV  
r0,r4 
          POP  
{r4,pc} 
          ENDP 
47.7  ARM:Keil 6/2013（Thumb 模式）优化 
在 Thumb 模式指令集的条件执行指令比 ARM 模式指令集的少，因此这种代码更接近 x86 的指令。但
是在程序的 22 和 23 行处的偏移量 0x20 和 0x1f，会令多数人感到匪夷所思。为什么 Keil 6 编译器会分配
这些指令？老实说，很难讲。也许这就是 Keil 6 优化进程的诡异之处。不管这种代码多么令人费解，整个
程序的功能确实忠实于我们的源代码。 
指令清单 47.7  Keil 6/2013（Thumb 模式）优化 
1   
str_trim PROC 
1        
   PUSH  
{r4,lr} 
2           
MOVS  r4,r0 
4 
; R4=s 
5 
          BL  
strlen  
; strlen() takes "s" value from R0 
6 
; R0=str_len 
7 
          MOVS  
r3,#0 
8 
; R3 will always hold 0 
9 
          B   
|L0.24| 
10 
|L0.12| 
11 
          CMP  
r1,#0xd  
; is loaded byte '\r'? 
12 
          BEQ  
|L0.20| 
13 
          CMP  
r1,#0xa  
; is loaded byte '\n'? 
14 
          BNE  
|L0.38|  
; jump to exit, if no 
15 
|L0.20| 
16 
          SUBS  
r0,r0,#1   
; R0-- or str_len-- 
17 
          STRB  
r3,[r2,#0x1f]  ; store 0 at address R2+0x1F=s+str_len-0x20+0x1F=s+str_len-1 
18 
|L0.24| 
19 
          CMP  
r0,#0  
; str_len==0? 
20 
          BEQ  
|L0.38|  
; yes? jump to exit 
21 
          ADDS  
r2,r4,r0   
; R2=R4+R0=s+str_len 
22 
          SUBS  
r2,r2,#0x20  
; R2=R2-0x20=s+str_len-0x20 
23 
          LDRB  
r1,[r2,#0x1f]  ; load byte at 
24 
    address R2+0x1F=s+str_len-0x20+0x1F=s+str_len-1 to R1 
25 
          CMP  
r1,#0  
; is loaded byte 0? 
26 
          BNE  
|L0.12|  
; jump to loop begin, if its not 0' 
27 
|L0.38| 
28 
; return "s" 
29 
          MOVS  
r0,r4 
30 
          POP  
{r4,pc} 
31 
          ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权