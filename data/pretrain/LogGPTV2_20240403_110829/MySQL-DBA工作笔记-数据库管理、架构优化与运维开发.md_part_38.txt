id
|name
-+一
> insert into unique_test values(l,null);
31
aa
NULL
NULL
aa
下面的语句依旧可以成功。
'1-aa' for key 'id'
---
## Page 243
简单的测试就能说明问题就好了。
书上是怎么说的，其实这两种方法对我们去理解这个问题来说不是很合适，如果能够通过
别？相信大多数同学都会比较迷茫，因为这个问题很难验证，或者看源码，或者就是查看
6.1.2
性约束；一定要使用时也可退而求其次，能设置属性为 not null 就不要使用 null。
给数据库迁移带来一系列潜在的隐患。
而对于上述问题的解决之道是尽可能避免使用 null 约束，能创建主键就不要使用唯一
我们可以对问题做一下细化，整体上来说，一条简单的SQL语句的解析流程如下图6-5所示。
抛出一个问题，你是如何理解MySQL 解析器的，它和其他数据库的解析器有什么差
·对象权限：检查语句的用户是否具有访问对象的权限;
·将对象进行名称转换：比如同义词转义成对应的对象或者 select*from testt，其中
·对象检查：在数据字典里校验SQL涉及的对象是否存在；
·对 SQL 的文法检查：查看是否有文法错误，比如 from、select 拼写错误等；
整个流程上，我们做一些相关解释：
比如上面所说的数据余问题在Oracle中是不会发生的，所以一些应用层的使用习惯会
同样都是null的差别，在MySQL和Oracle里面的处理方式截然不同。
（3）含有 null值的组合索引
1 row in set (0.00 sec)
mysql> select count (name)from unique_test where id=1;
而根据 name 列进行条数统计，会发现 count无情地拒绝了 null
t是一个同义词指向hr.test；
count（name)
推理 SQL 的解析过程
1
对象名称转换
对象检查
SQL文法检查
图6-5
对象权限
第6章MySQL查询优化|221
---
## Page 244
222丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
按如下顺序来执行，和解析的方式是有较大的差异的，
象和权限的解析方面，MySQL 的解析方式也相对比较单一，即从左到右。
corresponds to your MysQL server version for
理 SQL 的解析过程，我们先来看一下在 MySQL 侧的解析情况。
mysql> select id from test where id=100 group by id order by id3;
这种错误没有下标，也没有明确的错误提示，是难以去理解语法解析的过程的，在对
错误在 group by子句，修复 group by 子句，继续测试。
如果我们提交一个语法错误的 SQL，在解析方面 MySQL 提供的信息会非常有限。
Create table test (id int,name varchar(30));
如何通过测试来验证呢，我们可以试一下以毒攻毒的方法，即用错误的的 SQL 来推
（8）最终结果
（7）LIMIT子句
(6）SELECT子句
（5）ORDERBY子句
（2）WHERE子句
（1）FROM子句
至此我们完成了一个初步 SQL 解析器的测试，而如果包含 limit 子句，整个 SQL 中
可以看到，错误在 order by子句。
错误在 select子句，修复 select 子句，继续测试。
可以使用下面的语句：
比如我们需要验证 select 子句、group by子句和 order by子句的解析顺序。
使用如下的语句：
如何在 MySQL中进行验证呢，
1．MySQL解析器简单测试
·生成执行计划：这个无需解释了。
（4）H
（3）GROUPBY子句
HAVING子句
You have an
'aaa'
groupby4
我们可以在MySQL 中创建表test。
column
'id3'
idlorderby5id0'
in
，限于篇幅在此就不再展开了。
'select
tha
---
## Page 245
在这个表，还没有开始校验字段的情况。
左至右。对于是否存在表，是否字段存在问题都不会解析。
where 的文法错误如下。
继续验证。
但是首先发现的是 select的部分，可见解析还是从左至右的方向来做文法解析。
实现，加深我们对于 SQL 解析过程的理解。
完全不需要部署环境了，我们以Oracle 19c的在线环境做测试，来验证下Oracle的解析器
官方提供的在线测试入口：https://livesql.oracle.com，所有的测试和操作都可以在线完成，
有的同学可能会想,测试Oracle 部署环境还是比较麻烦的,其实可以走快捷通道,即Oracle
什么）的思维，
析是在做 SQL文本的解析，而运行则是在解析的基础上做数据的提取，一个是WHAT（是
如果想要做一些较为完整的测试，该怎么办呢，我们可以借鉴 Oracle 的实现方式，
这时发现错误指向了 testl，提示没有这个表。
如下，修复了 group by、order by 的文法错误。
而这次又直接指向了 group by 的部分。通过这三次错误指向，更能断定文法解析是从
ORA-00924: missing BY keyword
select id3 from test1 where id2='aaa' group by4 idl order by5 id0;
这个时候错误指向了 FROM，进一步论证解析的顺序，我们修复 from 的错误，开始
开始修复 select 的文法错误。
解析发现 select 的语句错误，其实后面的 from、where、group by、order by 都有错误。
一
select1 id3 from2 test1 where3 id2='aaa'
下面的语句存在很多的问题，来看看Oracle 的反应。
开始测试。重申一下，思路是用有问题的语句来测试和推理。
create table test (id number,name varchar2(30));
首先准备一个测试表，如下。
2．Oracle 解析器简单测试
为什么解析顺序和执行顺序差别很大呢，归根结底，就两种方式的差异总结来说，解
一个是HOW（怎么做）的思维。
 where id2='aaa' group by idl order by id0;
。可见在文法解析之后只是开始校验是否存
 group by4 idl order by5 id0;
 group by4 idl order by5 id1;
group by4 idl order by5 id0;
第6章MySQL 查询优化丨223
---
## Page 246
224丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
有写完整，在完成统计工作之后，我准备分析下这条 SQL 语句。
展了，大家可以自行测试。
时候校验出来。
间接验证一下。
SQL 的解析顺序和 SQL 数据处理的顺序是不一样的，仅仅作为一种参考的思路，我们来
by 的解析顺序，这里仅供参考。
select id from test where id='aaa' group by id order by id;
我们更进一步，查看如果字段ID 为 number，赋予 varchar2 的数据，是否会在解析的
这个时候解析到了 group by子句中的字段值。但是 select，where 中的字段还没有开始解析。
select id3 from test where id2='aaa' group by idl order by id;
我们修复 order by 中的错误，继续查看。
注：对于不同的 Oracle 版本，这里的输出结果是不一样的，在 1lg 中是 group by,order
有一天统计备份数据的时候，写了一条 SQL，当看到执行结果时才发现 SQL 语句没
案例 6-1：group by 问题浅析
当然在这些场景之外，我们还可以测试索引、统计信息的一些场景，限于篇幅就不扩
此时会发现错误已经在校验字段的数据类型了。
select id from test where id='aaa' group by id order by id;
而如果我们对表写入数据，再来看看效果。
从错误来看，目前还没有到执行阶段，是没有办法做出判断的。
通过上面的错误测试，基本能够得到语句解析中的处理顺序，但是这里需要明确的是
ORA-00904:
ORA-00904:
修复 group by 子句中的问题，继续测试。
ORA-00904:
发现是在解析 order by 的字段名，对于 select、where、group by 中的字段名先不解析。
修复了表名的错误，看看报错信息。
 backup_date 丨 piece_no
:invalid
identifier
---
## Page 247
的操作，显然这是从执行计划中无法得到的信息。
group by backup_date;
在添加 group by之后，结果就符合预期了。
说，是
mysql>
mysql> select count(*)from redis_backup_result;
我们换个思路，可以看到这个表有4万多条的记录。
但是比较好奇这个解析的逻辑，看起来是 SQL 解析了第一行，然后输出了count(*)
9 rows in set (0.06 sec)
I backup_date | piece_no 
是允许的；但是到了高版本，比如5.7版本之后是不支持的，所以解决方案很简单，
在早期的版本中数据库参数 sql_mode 默认为空，不会校验这个部分，从语法角度来
10rows inset(0.00sec)
mysql> select backup_date from redis_backup_result limit 10;
自己仔细看了下 SQL，发现是没有加 group by，我们随机查出 10 条数据。
count(*）
一天之内肯定没有这么多的记录，明显不对，到底是哪里出了问题呢。
1 row in set (0.03 sec)
2018-08-21
2018-08-18
2018-08-15
2018-08-14
2018-08-14
2018-08-14
2018-08-22
2018-08-15
2018-08-15
2018-08-15
2018-08-15
2018-08-15
2018-08-14
2018-08-14
2018-08-15
2018-08-1
40944
select
--+--
backup_date
409061
8226
7272
7272
184
121
3
,count(*) piece_no from redis_backup_result
第6章MySQL查询优化|225
---
## Page 248
226丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
20 rows in set (0.00 sec)
 mysql> SELEcT @rowno:=@rowno+l as rowno,r._rowid from redis_backup_result
然后借助 rownum 来实现。
1 row in set (0.03 sec)
5 rows in set (0.00 sec)
mysql> select _rowid from redis_backup_result limit 5;
InnoDB 表中在没有默认主键的情况下会生成一个6 字节空间的自动增长主键，可以
接着可以实现一个初步的思路。
为了验证，我们可以使用_rowid的方式来做初步的验证。
1 row in set (0.01 sec)
rowno1
117
2
11213
068
8
4
_rowid
136
410361
5267
0
6
r ,(select @rowno:=0) t limit 20;
---
## Page 249
为3个部分：
如果较为复
设 SQL 语句为 select *from article，则可以按照如下的方式得到执行计划。
以使用 explain 的方式，但对于执行计划的输出如何理解呢，我们可以举一个小例子，假
6.1.3
（1）对比DML 执行计划的版本差异
如果整体上对于执行计划有一定地了解了，我们开始做一些小的对比测试，主要会分
possible_keys:
如下表6-1是执行计划的输出结果，由于只有一行，我就用表格的形式整理出来了；
MySQL 里的执行计划内容还是很丰富的，值得好好挖掘，比如我们查看执行计划可
（3）深入理解key_len 的意义
（2）得到执行计划的新特性
执行计划列
很明显是第1行的记录，然后做了count(*)的操作。
1 row in set (0.02 sec)
mysql> SELECT @rowno:=@rowno+1 as rowno,r._rowid ,backup_date,count(*)
key_len: 9
partitions
select_type
-----
filtered:
Extra:
rows:
key:
type:
table
读懂执行计划
一个完整的语句，如下：
ref:
id
1
杂
是有多行的，
Using index
117
9982824
NULL
SIMPLE
NULL
index
NULL
article
100
列值
6
12018-08-14
针对表里符合某个条件（where或者连接）的记录数的百分比做的悲观估算
表的访问方式，INDEX表示全索引扫描，只扫描索引树，比ALL快一些
，我对于输出列的含义也做了标识。
语句所使用的查询类型，SIMPLE 表示除子查询或UNION之外的查询
from redis_backup_result r ,(select @rowno:=0) t
在搜索表记录时可能使用哪个索引，此处表示没有任何索引可使用
查询优化器通过系统手机的统计信息估算出的结果集记录条数
被选中索引的索引键长度，MySQL使用索引的长度
查询优化器从 posible keys 中锁选择使用的索引
查询将访问的分区（如果查询是基于分区表）
通过变量还是通过某个表的字段过滤的
MySQL 选定的执行计划中查询的序列号
表
410611
6-1
查询中 MySQL的附加信息
数据库中的表和表的别名
解
释
第6章MySQL查询优化丨227
---
## Page 250
228丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
的执行计划有些鸡肋，因为实在没什么好处理的了。
句的执行计划很清晰地看到是哪一种类型的 DML（insert，update，delete），当然 insert
rows
No tables used
insert into test values(3,
> explain insert into test values(3,'cc');
2 rows in set (0.00 sec)
查一下数据一目了然。