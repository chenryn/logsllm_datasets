0
4096
ports 137−139
port 445
port 80
FORTH−ICS
16384
8192
Execution threshold (log scale)
32768
65536
131072
)
s
/
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
1400
1200
1000
800
600
400
200
0
4096
FORTH−ICS full 2h trace
16384
8192
Execution threshold (log scale)
32768
65536
131072
Fig. 10. Raw processing throughput for differ-
ent execution thresholds
Fig. 11. Raw processing throughput for the com-
plete 2-hour trace
of port 80 trafﬁc have a negligible amount of endless loops, so a higher CPU execution
threshold does not result to the execution of more instructions due to extra loop itera-
tions. However, ASCII data usually result to very long and dense execution chains with
many one or two byte instructions, which consume a lot of CPU cycles.
We should stress that our home-grown CPU emulator is highly unoptimized, and
the use of interpretive emulation results to orders of magnitude slowdown compared to
native execution. It is expected that an optimized CPU emulator like QEMU [6] would
boost performance, and we plan in our future work to proceed with such a change.
Nevertheless, the low processing throughput of the current implementation does not
prevent it from being practically usable. In the contrary, since the vast majority of the
trafﬁc is server-initiated, the detector inspects only a small subset of the total trafﬁc of
the monitored link. For example, web requests are usually considerably smaller than
the served content. Note that all client-initiated streams are inspected, in both direc-
tions. Furthermore, even in case of large client-initiated ﬂows, e.g., due to ﬁle uploads,
the detector inspects only the ﬁrst 64KB of the client stream, so again the vast amount
of the trafﬁc will not be inspected. Indeed, as shown in Fig. 11, when processing the
complete 106GB long trace captured at FORTH-ICS, the processing throughput is or-
ders of magnitude higher. Thus, the detector can easily sustain the trafﬁc rate of the
monitored link, which for this 2-hour long trace was on average around 120 Mbit/s.
6 Real-World Deployment
In this section, we present some attack activity results from a real-world deployment of
our prototype detector implementation. The detector is installed on a passive monitoring
sensor that inspects the trafﬁc of the access link that connects part of an educational
network with hundreds of hosts to the Internet. The detector has been continuously
operational since 7 November 2006, except a two-day downtime on January.
As of 14 June 2007, the detector has captured 21795 attacks targeting nine different
ports. An overall view of the attack activity during these seven months is presented in
Fig. 12. The upper part of the ﬁgure shows the attack activity according to the targeted
port. From the 21795 attacks, 14956 (68.62%) were launched from 5747 external IP
addresses (red dots), while the rest 6839 (31.38%) originated from 269 infected hosts in
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
103
t
r
o
p
t
e
g
r
a
T
r
u
o
h
r
e
p
s
k
c
a
t
t
A
445
143
1025
80
42
5000
135
2967
1051
250
200
150
100
50
0
DEC2006
JAN2007
FEB2007
MAR2007
APR2007
MAY2007
JUN2007
Fig. 12. Overall attack activity from a real-world deployment of our prototype detector
the monitored network (gray dots). Almost one third of the internal attacks came from a
single IP address, using the same exploit against port 445. The bottom part of the ﬁgure
shows the number of attacks per hour of day. There are occasions with hundreds of
attacks in one hour, mostly due to bursts from a single source that horizontally attacks all
active hosts in local neighboring subnets. The vast majority of the attacks (88%) target
port 445. Interestingly, however, there also exist attacks to less commonly attacked ports
like 1025, 1051, and 5000. We should note that for all captured attacks the emulator was
able to successfully decrypt the payload, while so far has zero false positives.
For each identiﬁed attack, our prototype detector generates i) an alert ﬁle with generic
attack information and the execution trace of the shellcode, ii) a raw dump of the re-
assembled TCP stream, iii) a full payload trace of all attack trafﬁc (both directions) in
libpcap format,3 and iv) the raw contents of the modiﬁed addresses in the virtual
memory of the emulator, i.e., the decrypted shellcode.
Although we have not thoroughly analyzed all captured attacks, we can get a rough
estimate on the diversity of the different exploitation tools, worms, or bots that launched
these attacks, based on a simple analysis of the decrypted payloads of the captured poly-
morphic shellcodes. Computing the MD5 hash of the decrypted payload for all above
attacks resulted to 1021 unique payloads. However, grouping further these 1021 pay-
loads according to their size, resulted to 64 different payload size groups. By manu-
ally inspecting some of the shellcodes with same or similar lengths, but different MD5
hashes, we observed that in most cases the actual payload code was the same, but the
seeding URL or IP address from where the “download and execute” shellcode would
retrieve the actual malware was different. Our results are in accordance with previous
studies [17] and clearly show that polymorphic shellcodes are extensively used in the
wild, although in most cases they employ naive encryption methods, mostly for con-
cealing restricted payload bytes.
3 Anonymized full payload traces of some attacks are available from
http://lobster.ics.forth.gr/traces/
104
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
7 Limitations
The increasing complexity of polymorphic shellcodes results to a corresponding in-
crease in the processing time required for reasoning weather an input stream is mali-
cious. Indeed, while self-contained polymorphic shellcode can effectively be detected
using only 2K instructions per execution chain [22], non-self-contained shellcode, re-
quires a CPU execution threshold in the order of 8K instructions. However, shellcode
produced by advanced engines like TAPiON [4] sometimes requires up to 16K instruc-
tions for the complete decryption of an 128-byte payload [22], and can exceed 64K
instructions for 512-byte payloads. Although such shellcodes use some form of GetPC
code, and thus can be easily detected by the existing self-contained shellcode heuristic,
if they begin to adopt non-self-contained techniques as those presented in this paper,
then network-level emulation should be deployed with high execution thresholds, in the
order of 128K instructions.
Fortunately, even in case we have to spend so many cycles per inspected input,
network-level emulation is still practical, although with a reduced throughput, as we
showed in Sec. 5.3. However, in the extreme case, an attacker could construct a decryp-
tor that could spend millions of instructions, maybe even before the actual decryption
process has begun at all, just for reaching the execution threshold before revealing any
signs of polymorphic behavior [22]. Such “endless” loops are a well-known problem
in the area of dynamic code analysis, and we are not aware of any effective solution
so far. Fortunately, the percentage of benign streams that reach the execution threshold
is under 3.2%, as discussed in Sec. 5.3, so if attackers start to employ such evasion
techniques, network-level emulation can still be useful as a ﬁrst-stage anomaly detector
for application-aware NIDS like shadow honeypots [3], by considering as suspicious all
streams that reach the execution threshold.
Finally, here we have considered only the class of non-self-contained shellcode that
takes advantage of some register to get a reference to the absolute address of the in-
jected code in order to decrypt. However, it could be possible to construct a shellcode
that during decryption uses some data or code from memory locations with a priori
known contents, which should remain constant across all vulnerable systems. Since the
network-level detector lacks any host-level information, it would not be able to execute
such shellcode properly. In general, however, the use of hard-coded addresses is avoided
because it results in more fragile code [25], especially since address space randomiza-
tion has become prevalent in popular OSes, and signiﬁcantly complicates the imple-
mentation of polymorphic shellcode engines. In our future work, we plan to explore
ways to augment the network-level detector with host-level context [10] for enabling
the detection of a broader class of non-self-contained shellcodes.
8 Conclusion
In this paper, we have presented a novel approach for the detection of a certain class of
non-self-contained polymorphic shellcodes using dynamic code analysis of network-
level data. We have extended previous work on network-level emulation to correctly
handle the execution and identify the behavior of polymorphic shellcodes that do not
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
105
use any form of GetPC code, but instead rely on some register that happens during
exploitation to contain the base address of the injected code. This demonstrates that in
certain cases where some certain host-level state is used by the shellcode, detection at
the network level is still possible.
Such advanced analysis comes at the cost of spending more CPU cycles per input,
which reduces the runtime throughput of the detector, but still allows it to achieve a
decent performance on real-world deployments. However, certain evasion methods are
still possible, and the problem of effectively tackling them at the network-level remains
open. Nevertheless, we believe that the ability to accurately detect previously unknown
polymorphic shellcodes with virtually zero false positives, and the simplicity of its de-
ployment, make network-level emulation an effective and practical defense method.
References
1. Metasploit project (2006), http://www.metasploit.com/
2. Akritidis, P., Markatos, E.P., Polychronakis, M., Anagnostakis, K.: STRIDE: Polymorphic
sled detection through instruction sequence analysis. In: Proceedings of the 20th IFIP Inter-
national Information Security Conference (IFIP/SEC) (June 2005)
3. Anagnostakis, K., Sidiroglou, S., Akritidis, P., Xinidis, K., Markatos, E., Keromytis, A.D.:
Detecting targeted attacks using shadow honeypots. In: Proceedings of the 14th USENIX
Security Symposium, August 2005, pp. 129–144 (2005)
4. Bania, P.: TAPiON (2005), http://pb.specialised.info/all/tapion/
5. Bania, P.: Windows Syscall Shellcode (2005),
http://www.securityfocus.com/infocus/1844
6. Bellard, F.: QEMU, a fast and portable dynamic translator. In: Proceedings of the USENIX
Annual Technical Conference, FREENIX Track, pp. 41–46 (2005)
7. Bellovin, S.M.: There be dragons. In: Proceedings of the Third USENIX UNIX Security
Symposium, pp. 1–16 (1992)
8. Chinchani, R., Berg, E.V.D.: A fast static analysis approach to detect exploit code inside
network ﬂows. In: Valdes, A., Zamboni, D. (eds.) RAID 2005. LNCS, vol. 3858, Springer,
Heidelberg (2006)
9. Detristan, T., Ulenspiegel, T., Malcom, Y., Underduk, M.: Polymorphic shellcode engine
using spectrum analysis. Phrack 11(61) (August 2003)
10. Dreger, H., Kreibich, C., Paxson, V., Sommer, R.: Enhancing the accuracy of network-based
intrusion detection with host-based context. In: Julisch, K., Kr¨ugel, C. (eds.) DIMVA 2005.
LNCS, vol. 3548, Springer, Heidelberg (2005)
11. Eller, R.: Bypassing MSB Data Filters for Buffer Overﬂow Exploits on Intel Platforms,
http://community.core-sdi.com/˜juliano/bypass-msb.txt
12. Fogla, P., Sharif, M., Perdisci, R., Kolesnikov, O., Lee, W.: Polymorphic blending attacks.
In: Proceedings of the 15th USENIX Security Symposium (2006)
13. K2: ADMmutate (2001), http://www.ktwo.ca/ADMmutate-0.8.4.tar.gz
14. Kim, H.-A., Karp, B.: Autograph: Toward automated, distributed worm signature detection.
In: Proceedings of the 13th USENIX Security Symposium, pp. 271–286 (2004)
15. Kruegel, C., Kirda, E., Mutz, D., Robertson, W., Vigna, G.: Polymorphic worm detection
using structural information of executables. In: Valdes, A., Zamboni, D. (eds.) RAID 2005.
LNCS, vol. 3858, Springer, Heidelberg (2006)
106
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
16. Li, Z., Sanghi, M., Chen, Y., Kao, M.-Y., Chavez, B.: Hamsa: Fast signature generation for
zero-day polymorphic worms with provable attack resilience. In: Proceedings of the 2006
IEEE Symposium on Security and Privacy, pp. 32–47. IEEE Computer Society Press, Los
Alamitos (2006)
17. Ma, J., Dunagan, J., Wang, H.J., Savage, S., Voelker, G.M.: Finding diversity in remote code
injection exploits. In: Proceedings of the 6th ACM SIGCOMM on Internet measurement
(IMC), pp. 53–64. ACM Press, New York (2006)
18. Newsome, J., Karp, B., Song, D.: Polygraph: Automatically generating signatures for poly-
morphic worms. In: Proceedings of the IEEE Security & Privacy Symposium, May 2005, pp.
226–241. IEEE Computer Society Press, Los Alamitos (2005)
19. Newsome, J., Karp, B., Song, D.: Paragraph: Thwarting signature learning by training mali-
ciously. In: Zamboni, D., Kruegel, C. (eds.) RAID 2006. LNCS, vol. 4219, Springer, Heidel-
berg (2006)
20. Obscou: Building IA32 ‘unicode-proof’ shellcodes. Phrack 11(61) (August 2003)
21. Payer, U., Teuﬂ, P., Lamberger, M.: Hybrid engine for polymorphic shellcode detection. In:
Julisch, K., Kr¨ugel, C. (eds.) DIMVA 2005. LNCS, vol. 3548, pp. 19–31. Springer, Heidel-
berg (2005)
22. Polychronakis, M., Markatos, E.P., Anagnostakis, K.G.: Network-level polymorphic shell-
code detection using emulation. In: B¨uschkes, R., Laskov, P. (eds.) DIMVA 2006. LNCS,
vol. 4064, pp. 54–73. Springer, Heidelberg (2006)
23. Rix: Writing IA32 alphanumeric shellcodes. Phrack 11(57) (August 2001)
24. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm ﬁngerprinting. In: Proc.
of the 6th Symposium on Operating Systems Design & Implementation (OSDI) (December
2004)
25. sk: History and Advances in Windows Shellcode. Phrack 11(62) (July 2004)
26. Skape: Shellcode text encoding utility for 7bit shellcode,
http://www.hick.org/code/skape/nologin/encode/encode.c
27. Skape: Implementing a Custom x86 Encoder. Uninformed 5 (September 2006)
28. Sz¨or, P., Ferrie, P.: Hunting for metamorphic. In: Proceedings of the Virus Bulletin Confer-
ence, September 2001, pp. 123–144 (2001)
29. Toth, T., Kruegel, C.: Accurate Buffer Overﬂow Detection via Abstract Payload Execution.
In: Wespi, A., Vigna, G., Deri, L. (eds.) RAID 2002. LNCS, vol. 2516, Springer, Heidelberg
(2002)
30. Wang, K., Cretu, G., Stolfo, S.J.: Anomalous Payload-based Worm Detection and Signa-
ture Generation. In: Valdes, A., Zamboni, D. (eds.) RAID 2005. LNCS, vol. 3858, Springer,
Heidelberg (2006)
31. Wang, K., Parekh, J.J., Stolfo, S.J.: Anagram: A Content Anomaly Detector Resistant to
Mimicry Attack. In: Zamboni, D., Kruegel, C. (eds.) RAID 2006. LNCS, vol. 4219, Springer,
Heidelberg (2006)
32. Wang, X., Pan, C.-C., Liu, P., Zhu, S.: Sigfree: A signature-free buffer overﬂow attack
blocker. In: Proceedings of the USENIX Security Symposium (August 2006)
33. Wever, B.-J.: Alpha 2 (2004),
http://www.edup.tudelft.nl/˜bjwever/src/alpha2.c
34. Yegneswaran, V., Barford, P., Ullrich, J.: Internet intrusions: global characteristics and preva-
lence. In: Proceedings of the 2003 ACM SIGMETRICS international conference on Mea-
surement and modeling of computer systems, pp. 138–147. ACM Press, New York (2003)
35. Zhang, Q., Reeves, D.S., Ning, P., Lyer, S.P.: Analyzing network trafﬁc to detect self-
decrypting exploit code. In: Proceedings of the ACM Symposium on Information, Computer
and Communications Security (ASIACCS), ACM Press, New York (2007)