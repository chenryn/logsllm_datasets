2.2.4 Efficiency of Cryptographic Primitives 
As  exhibited  in  Table  2-2,  symmetric  cryptographic  primitives 
like  DES  and  MD5  are  much  more  efficient  than  asymmetric 
primitives  like  RSA.  The  one  way  hash  function  is  almost  as 
efficient as a symmetric cipher. All experiments are performed on 
an 8-byte size input, using the OpenSSL libraries on an 800 MHz 
Pentium III Linux station. 
2.3 One-time Signatures 
First proposed by Lamport [6] and Rabin [13], one-time signature 
schemes  are  efficient  signature  schemes  based  on  one  way 
functions.  These  signature  schemes  differ  from  public  key 
signature  schemes  by  the  number  of  messages  each  can  sign. 
Using  a  single  key  pair,  the  former  can  only  sign  several 
messages,  while  the  latter  can  sign  an  unlimited  number  of 
messages. This is due to the disclosure of the private key of a one-
time  signature  scheme  shortly  after  signing  a  few  messages. 
Public key signature schemes never disclose a private key. 

Table 2-2. Efficiency of cryptographic primitives 
KEY GENERATION 
Input: Parameters l, k, t 
Output: key pair 
Public Key PK = (k, v1, v2, …, vt)
Secret Key SK = (k, s1, s2, …, st)
1.
2.
Generate t random l-bit strings (s1, s2, ..., st)
Let vi = f(si) for 1 (cid:148) i (cid:148) t
SIGNING
Input: Message m and SK
Output: Signature (cid:305) = (si1, si2, …, sik)
1.
2.
Compute the hash h = H(m)
Split h into k substrings (h1, h2, …, hk) of length log2 t
bits each 
Interpret each hj as an integer ij for 1 (cid:148) j (cid:148) k
3.
VERIFYING
Input: Message m, signature (cid:305) = (s1’, s2’, …, s k’), and PK
Output: {Accept, Reject} 
1.
2.
Compute the hash h = H(m)
Split h into k substrings (h1, h2, …, hk) of length log2 t
bits each 
Interpret each hj as an integer ij for 1 (cid:148) j (cid:148) k
“accept” if for each j, 1 (cid:148) j (cid:148) k, f(sj’) = vij
“reject” otherwise 
3.
4.
Figure 2-4. HORS algorithm 
Figure 2-5. HORS architecture 
3. Proposed Scheme 
We  propose  a  computationally  lightweight  one-time  signature 
scheme  that  allows  sensor  nodes  to  authenticate  broadcast 
messages  from  a  base  station  in  a  wireless  sensor  network.  To 
attain 
for  broadcast 
the  asymmetric  property  necessary 
this 
Despite 
limitation,  one-time  signature  schemes  are 
advantageous because of their speed. Since they are based on one 
way  functions,  their  computation  cost  is  quite  low  when 
compared with that of asymmetric primitives. 
In general, one-time signature schemes use the secret key as input 
to a sequence of one-way functions which generate a number of 
intermediate  results  that  eventually  lead  to  the  public  key.  The 
one-way  property  of  the  function  implies  that  it  is  infeasible  to 
compute  the  secret  key,  or  any  intermediate  result,  from  the 
public  key.  The  private  key  is  a  self-authenticating  value. 
Motivated  by  the  application  of  signatures  to  stream  and 
broadcast  authentication,  Perrig  proposed  a  one-time  signature 
called  BiBa  [2],  which  features  fast  verification  and  a  short 
signature. The disadvantage of BiBa is a longer signing time and 
larger public key size than previous schemes. 
2.3.1 Subsubsections
Reyzin  and  Reyzin  proposed  a  new  one-time  signature  scheme 
called  HORS  [3],  which  improves  upon  the  BiBa  scheme  by 
decreasing the time needed to sign and verify messages while also 
reducing  the  key  and  signature  sizes,  making  HORS  the  fastest 
one-time  signature  scheme  available  thus  far.  The  security  of 
BiBa depends upon the random-oracle model, while the security 
of  HORS  relies  on  the  assumption  of  the  existence  of  one-way 
functions and the subset-resilience as defined in Appendix A. 
HORS  is  computationally  efficient,  requiring  a  single  hash 
evaluation  to  generate  the  signature  and  a  few  hash  evaluations 
for  verification.  Due  to  the  large  public  key  size  (usually  10K 
bytes),  HORS  is  not  suitable  in  a  WSN  environment  without 
additional modifications. Figure 2-4 outlines the HORS algorithm 
while Figure 2-5 depicts its architecture. 
In a typical example of HORS, we take parameters l=80, t=1024,
and flt=160. The private key size is 1024 * 80 bits = 10K bytes, 
and the public key size is 1024 * 160 bits = 20K bytes. Since we 
assume the base station is the sender, the size of the private key is 
manageable; however, the size of the public key is too large for a 
sensor node. 

authentication,  we  utilize  symmetric  cryptographic  primitives. 
Moreover,  we  mitigate  the  general  drawbacks  of  one-time 
signature schemes: the use of an extremely large key size and the 
limitation  to  authenticate  only  a  few  messages.  The  proposed 
scheme efficiently reduces the storage requirement and includes a 
re-keying mechanism to sign additional messages. 
3.1 Signature Scheme 
Compared  to  HORS,  our  scheme  consumes  less  storage  and 
communication overhead at the expense of a higher computation 
cost.  This  is  a  worthwhile  tradeoff  because  storage  is  a  more 
precious  resource  than  computation  power  in  a  sensor  node, 
especially  since  our  scheme  only  uses  a  few  additional  hash 
computations.
In the remainder of this section, we first explain the basic idea of 
our  scheme,  followed  by  our  generalized  scheme.  Finally,  we 
propose a re-keying mechanism for our scheme. 
3.1.1 The Basic Idea 
First, the signer must generate the key pair. The key pair includes 
the private  key,  which  consists  of  t  random  numbers,  and  the 
public  key,  which  consists  of  t  hash  values  of  these  t  random 
numbers. For convenience, we call these random numbers private
balls and their hash values public balls.
A  verifier  can efficiently authenticate the private balls based on 
the public balls but cannot feasibly compute a valid private ball 
given a public ball. HORS uses the one-way hash function F as a 
commitment scheme. Given a set of private balls, the public ball 
is pi = F(ri). The verifier can easily authenticate ri by verifying pi
= F(ri).
As previously mentioned, the public key is composed of t public 
balls. To reduce the size of the public key, we can either reduce 
the ball size or the number of balls. Because the length of public 
ball  is  related  to  the  security  strength  of  the  hash  function,  we 
cannot reduce the ball size. Thus, we reduce the number of public 
balls needed by using a Merkle hash tree instead of one-way hash 
function to authenticate the private balls, as illustrated in Figure 
3-1. We place the original private balls at the leaves of a binary 
tree  and  compute  each  internal  node  as  the  hash  of  the 
concatenation of the two child values. The root node of the hash 
tree becomes the new public key. 
A  change  in  the  public  key  generation  also  effects  signature 
generation and verification. The signer generates the signature as 
before, by picking k private balls out of t private balls. However, 
the signer must affix additional public balls to the signature. The 
additional  public  balls  correspond  to  the  authentication  path  of 
each  picked  ball.  Using  the  authentication  path,  the  verifier  can 
validate each picked ball by reconstructing the path from picked 
ball to the root of the Merkle hash tree. 
One  security  flaw  occurs  when  an  attacker  replaces  a  disclosed 
private ball i with private ball j. We cannot distinguish between 
two private balls in the same tree. To resolve this problem, we use 
the uniqueness of each leaf’s authentication path. For each private 
ball, we concatenate the public balls along its authentication path. 
Then,  we  obtain  the  identity  of  the  private  ball  by  applying  the 
hash  function  to  this  concatenated  value.  When  validating  a 
signature, the verifier first checks the identity of each private ball. 

Figure 3-1. Key generation procedure 
3.1.2 The Generalized Scheme 
We  generalize  our  scheme  by  first  constructing  many  small 
Merkle hash trees of height h that hold 2h private balls. The public 
key  contains  the  root  nodes  of  all  the  Merkle  hash  trees,  and 
hence  reduces  the  key  size  by  a  factor  of  2h.  However,  to 
authenticate each private ball, the signer adds the authentication 
path  of  each  private  ball,  which  requires  h  verification  nodes. 
Thus, the signature size increases by a factor of h.
By  constructing  many  Merkle  trees,  we  can  lower  the  overall 
storage  requirement.  As  public  key size decreases, the signature 
size  increases.  If  we  only  build  one  Merkle  tree,  the  combined 
size  of  the  public  key  and  signature  would  not  be  minimal. 
Therefore, we need to find an optimal balance between the public 
key size and signature size. 
We use the parameters in Table 3-1 when describing our scheme. 
Table 3-1. System Parameters 
t 
k 
d 
l 
r 
number of private balls
number of signature balls
number of public balls
size of ball (bits)
r-subset resilient
Our  proposed  scheme  comprises  of  three  phases:  initial  phase, 
signing  phase,  and  verification  phase.  In  the  initial  phase,  the 
sender generates a private key and its corresponding public key, 
as  shown  in  Figure  3-2.  A  pseudorandom  generator  produces  a 
private key, which is made of t l-bit random numbers. As outlined 
in  Figure  3-3,  the  PUBLIC_KEY_GENERATION  algorithm 
derives the public key, which consists of d hash values. Next, the 
sender uses the private key in the signing phase to sign a message, 
as Figure 3-4 shows. Finally, the receivers use the sender’s public 
key  in  the  verification  phase  to  validate  the  signature  of  the 
message,  as  illustrated  in  Figure  3-6.  We  elaborate  upon  each 
phase in the remainder of this section. 
3.1.2.1 Key Generation 
A key pair consists of a private key and a public key. The private 
key  is  composed  of  t
l-bit  random  numbers  created  by  a 
pseudorandom generator, and the public key is derived from these 
t random numbers. First, we input t random numbers into the one-
way hash function and output t hash values. Then, we separate t
hash  values  into  d  groups  so  that  there  are  t/d  values  in  each 
group. Finally, we use these t/d values as the leaves of the binary 
tree  and  compute  each  intermediate  node  as  the  hash  of  the 
concatenation of the two child values. Thus, we attain d Merkle 
trees,  whose  roots  comprise  our  public  key.  We  note  that  the 
original  public  key  of  HORS  is  t  hash  values  generated  from  t
random numbers while our public key is d Merkle tree roots. In a 
typical case, t = 1024 and d = 32.
KEY_GENERATION
Input: parameters t, k, d, l
Output: key pair 
Private Key Kpri = (k, s1, s2, …, st)
Public Key Kpub = (k, v1, v2, …, vln d)
1.
Randomly generate t l-bit random numbers (s1,s2,…,st)
as private key 
Kpub = PUBLIC_KEY_GENERATION(k,d,Kpri)
Distribute public key 
Figure 3-2. Key generation algorithm 
2.
3.
2.
PUBLIC_KEY_GENERATION
Input: parameters k, d, and Kpri
Output: Kpub
1.
Use t balls as pre-image of leaves to build c Merkle trees 
with height ln t.
Take ln d tree root as public key, with each public key 
corresponding to a sequence period. 
Figure 3-3. Public key generation algorithm 
3.1.2.2 Broadcasting Authenticated Messages 
A sender must sign all messages it broadcasts. To sign a message 
m, we first compute h = H(m). Then, we separate the hash value h
into k pieces and regard these pieces as integers, ending up with 
(i1, i2,…, ik) between 0 and t-1. Next, we combine these integers to 
form a subset of {0, 1, 2,…, t-1} of size at most k. Each integer is 
an index of private balls (r1, r2,…, rt). We pick k private balls (ri1,
ri2,…, rik) and use them, along with their associated authentication 
paths,  as  the  signature  of  this  message  m.  Compared  to  the 
original  HORS, 
added 
communication  overhead.  For  better  performance,  the  duplicate 
authentication  paths 
these 
are 

path  is  sent  only  once.  We  discuss  the  duplicate  authentication 
path below. 
SIGNATURE_GENERATION
Input: message m and Kpri
Output: signature (cid:305) = {ai1, ai2, …, aik, bs}, where ai = (si, api)
(ap is the authentication path of the ball) 
1.
2.
3.
Compute the hash h = H(m)
Split h into k pieces (h1,h2,…,hk) of length ln t bits each 
Interpret each hj as an integer ij, with 1 (cid:148) j (cid:148) k
Figure 3-4. Signature generation algorithm 
3.1.3 The Duplicated Authentication Path 
To  allow  a  receiver  to  verify  each  private  ball,  the  sender  must 
include  in  the  signature  nodes  that  comprise  the  authentication 
path.  Unfortunately,  the  sender  may  inadvertently  send  these 
additional  nodes  multiple  times.  For  example,  consider  Figure 
3-5. A sender first transmits ball s0 and its authentication path {v1,
m23,  m47}.  It  then  sends  s1  and  its  authentication  path  {v0,  m23,
m47}. The sender should send nodes m23 and m47 once since they 
are  duplicates.  Moreover,  a  receiver  can  compute  v0  =  H(s0).
Thus, if a sender selects a direct neighbor of a disclosed private 
ball, then no additional nodes are required to be sent. In general, 
if  a  node  at  height  e  is  a  common  parent, then all nodes higher 
than e need not be resent. Therefore, selected private balls that are 
close together can reduce transmission overhead. We note that the 
upper bound of the sum of the authentication paths is min(r*k*h, 
the whole tree).
Figure 3-5. Duplicate authentication path 
3.1.3.1 Authenticating Broadcast Messages 
When a receiver obtains a broadcast message, it must ensure that 
the message originated from an authentic sender by verifying the 
signature  of  message  m  with  the following procedure. Since the 
sender  will  periodically  re-key,  the  receiver  must  first  decide 
which  of  the  sender’s  public  keys  should  be  used  to  verify  the 
message’s signature. Second, the receiver checks which sequence 
period of that public key the sequence number falls into. Third, it 
computes the hash value h = H(m). Fourth, the receiver separates 
the hash value h into k pieces and regards these pieces as integers 
(i1, i2,…, ik) between 0 and t-1, with each integer as an index to a 