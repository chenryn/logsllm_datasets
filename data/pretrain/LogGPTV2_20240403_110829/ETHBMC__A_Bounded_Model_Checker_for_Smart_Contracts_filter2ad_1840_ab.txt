Listing 2: Using the mapping data. type
3.1.2 Memcopy-like Instructions
The EVM cannot access calldata directly, it can only operate
on data residing within execution memory, i.e., the input data
gets copied. In Listing 3, string is an unbounded data type,
resulting in the EVM utilizing the CALLDATACOPY instruction
to copy the entire input to execution memory. This is in
contrast to data types with a ﬁxed width (e.g., uint256) which
can be accessed with a plain read from calldata.
1
2
3
4
5
f u n c t i o n s o l v e ( s t r i n g i n p u t ) {
i f
( i n p u t [ 0 ] == "A" && i n p u t [ 1 ] == "B" ) {
s e l f d e s t r u c t ( msg . s e n d e r ) ;
}
}
Listing 3: Memcopy-like operation to access input.
3.1.3 Inter-Contract Communication
Ethereum is a decentralized system, offering the ability for
multiple contracts to interact with each another. On the down-
side, these techniques increase complexity of smart contract
systems and might lead to unforeseen (security) consequences.
A simple example is provided in Listing 4. During the exe-
cution of Target, a library contract gets called to simulate a
simple interaction between two contracts.
The need for inter-contract analysis is furthered by a recent
survey by Kiffer et al. [29] on the current contract topology
of Ethereum. They state that most contracts are not deployed
by humans, but rather are created by other contracts, making
these contracts part of intra-contract interactions.
1
2
3
4
c o n t r a c t T a r g e t {
L i b r a r y p r i v a t e
f u n c t i o n s o l v e ( uint256 i n p u t ) {
( l i b . r ( i n p u t ) == 123) {
l i b = 0xAABBCC . . . ;
i f
s e l f d e s t r u c t ( msg . s e n d e r ) ;
}
}
}
c o n t r a c t L i b r a r y {
5
6
7
8
9
10
11
12
13
}
}
f u n c t i o n r ( uint256 i n p u t )
r e t u r n s
( uint256 ) {
return i n p u t ;
Listing 4: A simple interaction between two contracts.
3.2 The Parity Wallet Bug
Based on these examples, we now examine the original Par-
ity wallet bug as a real-world example where all previous
issues need to be addressed to obtain a comprehensive analy-
sis. While other types of smart contract vulnerabilities were
already studied [4, 29, 36, 46, 62], the question how to detect
the Parity incident in an automated fashion remained an un-
solved challenge. Note that we only present snippets relevant
to this analysis which we simpliﬁed for easier reading; a full
source code listing can be found online [49].
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
c o n t r a c t W a l l e t L i b r a r y {
address [ 2 5 6 ] owners ;
mapping ( b y t e s => uint256 ) a p p r o v a l s ;
f u n c t i o n c o n f i r m ( bytes32 _op )
i n t e r n a l bool {
/* logic for confirmation */
}
f u n c t i o n i n i t W a l l e t ( address [ ] _owners ) {
/* initialize the wallet owners */
}
f u n c t i o n pay ( address
to , u i n t amount ) {
i f
( c o n f i r m ( keccak256 ( msg . d a t a ) ) )
t o . t r a n s f e r ( amount ) ;
}
}
c o n t r a c t W a l l e t {
l i b r a r y = 0xAABB . . . ;
address
// constructor
f u n c t i o n W a l l e t ( address [ ] _owners ) {
l i b r a r y . d e l e g a t e c a l l ( " initWallet " , _owners )
}
f u n c t i o n ( ) payable {
l i b r a r y . d e l e g a t e c a l l ( msg . d a t a ) ;
}
Listing 5: A simpliﬁed source code from the Parity wallet.
The Parity wallet is split across two contracts, a library
contract holding the majority of the code base and a client
contract deployed by the user. Once deployed, smart contracts
are immutable, as a result, when changing (or ﬁxing) a con-
tract, one has to redeploy and thus repay for the entire contract.
In order to lessen the burden on the user, when splitting up
the logic, only the library has to be redeployed. The EVM
offers the DELEGATECALL instruction, an instruction for us-
ing another account’s code while executing. The instructions
switches the code to be exeuted, while still using the original
account context and storage. Consider Listing 5, assume the
user Alice wants to use the Parity wallet library. She deploys
her client code (line 15-23) with a storage variable containing
the library contract’s account address (line 16). When later
calling her client contract, it delegates the transaction to the
library code (line 22), forwarding the transaction’s calldata
2760    29th USENIX Security Symposium
USENIX Association
(msg.data). Note that this also implies that if an attacker can
redirect the control ﬂow of a contract to an address of her
liking, they has the ability to arbitrarily execute code (e.g.,
extract all the funds).
Since everyone on the blockchain can call into any contract,
smart contract developers have invented the concept of the
owner, a variable which is usually set during contract creation,
specifying the address of the contract owner. In the case of
the Parity multi-signature wallet, there even exists an array
of owners (line 2) initialized during the creation of the wallet
(line 7-9). Albeit the variable is deﬁned in the library code,
since the execution context resides with the original account,
the variables is set on the client contract.
Analysis Hurdles Besides inter-contract communication,
the Parity wallet utilizes the keccak function, both as a plain
call (line 11) as well as in the mapping data type (line 3).
When hashing the msg.data (line 11), due to its (theoreti-
cally) unlimited size, the entire data gets copied to execution
memory. Thus a static analyzer must be able to reason about
inter-contract communication to analyze the distributed con-
tracts as well as memcopy-like instructions and cryptographic
hash functions to thoroughly analyze the pay function.
The attacker exploited the fact that the initWallet func-
tion was not marked as private. In Solidity, this implies that it
defaults to public, i.e. it is callable by anyone. Thus, the at-
tacker ﬁrst called the initWallet function, making himself
the owner, and then transferred all funds of the wallet to his
account using the pay function. Note that the attacker has to
perform two transactions, thus only analyzing initWallet
is not sufﬁcient since the actual exploit happens in the pay
function.
3.3 State-of-the-Art Techniques
For our survey of existing methods, we chose a variety
of tools based on different principles from the program
analysis domain, ranging from data-ﬂow analysis (Secu-
rify), over symbolic execution (Manticore, Mythril, MA-
IAN, Oyente, and teEther), to abstract interpretation (Van-
dal and MadMax). We cannot give a sufﬁcient introduc-
tion to every technique, however, the interested reader is re-
ferred to the excellent book by Nielson et al. [43]. All discus-
sions concerning speciﬁc tools are based on their respective
publications [4, 23, 33, 36, 39, 41, 46, 62] and their source
code [3, 22, 32, 35, 40, 45, 48, 61] at the time of writing.
During our review, we have found that all tools use some
kind of overapproximation which may introduce false posi-
tives. As a result, we deﬁne Validation as an additional po-
tential obstacle; i.e., are any overapproxmiations correctly
validated afterwards? An overview of our analysis results is
presented in Table 1. Note that MadMax is based on Vandal,
thus it inherits its limitations and we only discuss Vandal in
detail in the following.
Table 1: Feature comparison between existing tools and our approach.
Inter-Contract Memory Keccak Validation
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
Tool
Manticore [39]
Mythril [41]
MAIAN [46]
Oyente [36]
teEther [33]
Vandal [4]
MadMax [23]
Securify [62]
ETHBMC
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:35) Incorrectly implemented or missing
(cid:32) Correctly implemented (cid:71)(cid:35) Partially implemented
3.3.1 The Keccak256 Function
Due to the prevalence of keccak computations, most tools we
analyzed offer some kind of strategy to deal with them during
analysis, but all of them in an imprecise way. All tools offer
support for computing keccak values over constant execution
memory regions with constant parameters (i.e., every value
of memory is non-symbolic). This allows them to extract the
corresponding memory regions and compute the actual hash
value.
Securify considers during symbolic computations every
memory location as a potential dependency, even those who
are infeasible in practice. Mythril, on encountering a symbolic
offset or a symbolic portion of memory, overapproximates the
keccak value with fresh unconstrained symbolic one instead.
When any memory value or argument is symbolic, Manticore
uses a concolic strategy and ﬁxes the values to constant ones.
However, they keep a mapping of all previously computed
hashes and try to match the current one to already seen ones.
In a similar vein, teEther stores a placeholder object during
symbolic execution and then applies a concolic strategy to
resolve all seen placeholders. Vandal does not attempt any
concrete or symbolic handling, but ignores the instruction and
treats the outcome as a new symbolic variable. The outlier to
the above schemes is Oyente, it only support concrete keccak
computation, but makes no effort in computing the actual
values. It rather extracts the string representation of the mem-
ory region, compresses and base64 encodes it, and uses this
encoding as a mapping to match later hash computations [37].
Our Solution: When encountering a symbolic keccak
value, we utilize a special encoding scheme presented in Sec-
tion 4.6. The scheme is based on the idea that keccak is a
binding function, i.e., when the same input is supplied to
the function, it will produce the same output. We utilize this
behaviour by adding constraints to the execution, encoding
different keccak computations to be the same, when their
input memory regions can be identical.
USENIX Association
29th USENIX Security Symposium    2761
3.3.2 Memory Modelling
Our review revealed that none of the examined tools fully
supports a precise memory model. Some revert to overapprox-
imation or concolic strategies to circumvent complications
regarding symbolic memcopy-style operation, while others
simply choose not to support them. More speciﬁcally, MA-
IAN supports symbolic read operations, but drops any sym-
bolic write or memcopy-style operation. Mythril supports
standard read/write operations, but ﬂounders when encoun-
tering copy instructions. It handles concrete ones correctly,
yet, when for instance a symbolic offset is supplied to the
memcopy operation, it either drops the path or ﬁxes its size to
a value of one. Similarly, Manticore and teEther fully support
simple memory operations, but resort to concolic strategies
otherwise. When encountering any symbolic memory write,
Securify behaves conservatively and clears the entire mem-
ory, since it cannot reason about speciﬁcs anymore. Neither
Oyente nor Vandal support any copy-based instruction.
Our Solution:
In contrast to previous work, we employ a
fully symbolic memory model. We represent the memory as
a graph representation, connecting different memory regions
when we copy from one to the other (see Section 4.4). When
we need to assess the feasibility of a given path, we encode the
memory graph as constraints, utilizing the well known theory
of arrays [21], as well as the extension by Falke et al. [17], for
addressing memcopy-like operations.
3.3.3 Inter-Contract Analysis
Mythril and Manticore are the only two tools supporting inter-
contract analysis, however, both do so in an imprecise way.
When a contract interacts with another contract, the input for
the next execution stems from the execution memory of the
callee. Both Mythril and Manticore support fully concrete
contract calls, i.e., if the part of execution memory which is
used as calldata completely corresponds to concrete values,
execution continues as normal. Nonetheless, when any value
in the concerning memory region is symbolic, both tools ap-
ply different strategies to tackle the problem. Mythril ignores
the content of execution memory and overapproximates call-
data by creating a new unconstraint array object. In contrast,
Manticore utilizes a concolic approach, ﬁxing any symbolic
values to constant ones.
Our Solution: We utilize our memory model, which sup-
ports symbolic copy instructions, to correctly model the input
memory to the call operation (see Section 4.5 for details).
3.3.4 Validation
All tools discussed in this section heavily rely on overapprox-