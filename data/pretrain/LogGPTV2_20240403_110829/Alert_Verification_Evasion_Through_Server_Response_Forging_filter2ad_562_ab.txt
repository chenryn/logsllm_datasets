memcpy()  operation,  resulting  in  a  buffer 
overflow [22]. 
2005-1523  Mailutils  contains  a  flaw 
that  allows  a 
malicious  user  to  execute  arbitrary  code.  The 
issue  is  triggered  when  format  specifiers  are 
sent  as  part  of  user-supplied  commands,  and 
are unchecked by the imap4d server [23]. 
2003-0213  The PoPToP PPTP Server contains a flaw that 
allows  a  malicious  user  to  execute  arbitrary 
code.  The  issue  is  triggered  when  the  server 
receives  a  malicious  packet  with  the  length 
field  set  to  either  zero  or  one.  This  causes  a 
to  use  a  negative  value, 
read  operation 
allowing  sensitive  memory  regions 
to  be 
overwritten with user-supplied data [24]. 
2003-0201  Samba  contains  a  flaw  that  allows  a  remote 
attack  to  execute  arbitrary  code.    The  issue  is 
due  to  a  flaw  in  trans2.c  in  which  the 
call_trans2open()  function  user  input  is  not 
properly sanitized [25]. 
Application 
Samba 
GNU Mailutils 
PoPToP 
Vulnerability 
Samba  Fragment 
Reassembly 
Overflow 
GNU  Mailutils 
imap4d 
Server 
Client  Command 
Format String 
PoPToP 
Negative 
Overflow 
PPTP 
Read 
Samba 
call_trans2open() 
Function  
Overflow 
262 
A.D. Todd et al. 
Exploit 
samba_nttrans 
gnu_mailutils_imap4d 
poptop_negative_read 
trans2root.pl 
3.2   Performance Metrics 
Table 3. Exploits 
Type 
Metasploit 
Metasploit 
Metasploit 
Public 
Version 
Rev 3818 
Rev 3818 
Rev 3818 
N/A 
Corresponding CVE 
2003-0085 
2005-1523 
2003-0213 
2003-0201 
This  research  focuses  on  server  response  forging;  thus,  server  response  is  the  only 
metric.    A  server  response  is  the  packet  or  packets  sent  in  response  to  a  message 
received from a client.  The client message can be a legitimate request in which case 
the server responds accordingly or the client message may be erroneous in which case 
the  server  typically  responds  with  an  error  message.    The  request  may  also  be  a 
malicious  exploit  in  which  case  the  server’s  response  is  uncertain.    If  the  exploit  is 
successful, the server may not send a server response. 
This research considers only the server response packets, or lack thereof, after the 
exploit has been sent.  This investigation only focuses on the stream of server packets 
after  the  exploit  is  received.    This  stream  of  server  packets  is  comparable  to  the 
information a NIDS logs for the verification process.  It is this server response, when 
forged,  which  may  allow  intrusion  detection  evasion  by  fooling  the  verification 
mechanism and therefore the analyst. 
3.3   Test Design 
Two research goals, evaluate the server response to exploits and develop a method for 
forging server responses on Linux systems, are pursued through the development of 
testing methodologies described below. 
Server  Response  Test  Design.  The  Metasploit  Framework  console  was  used  to 
configure the chosen exploits (cf., Table 3).  The linux_ia32_exec payload is used in 
each test.  This payload executes a command specified by the “CMD” variable on the 
target machine.  During these tests, the payload command is set to ping the attacking 
system  once  (“ping  –c  1  10.1.1.99”).    Each  vulnerable  and  patched  server  is  tested 
and the remote  host (“RHOST”) is set to the corresponding IP address in each test.  
Public exploits are executed with the required arguments (e.g., local host and remote 
host).  Public exploits lack the robustness of the Metasploit Framework, so there is no 
opportunity to select the payload.  After each trial, the tested server is restored to its 
original state using VMWare’s “Revert to Snapshot” feature. 
The server responses are captured using Ethereal.  The capture starts before the exploit 
is sent and is subsequently terminated after all server response packets have been captured.  
Server  responses  are  generally  completed  within  a  couple  seconds.    However,  some 
exploits use a brute force technique for determining the return address and therefore make 
thousands of requests.  The network captures containing the server responses are saved in 
the libpcap format after each test [26].  After all trials are completed, the server responses 
are compared to determine the possibility of server forging.  
Alert Verification Evasion Through Server Response Forging 
263 
Response Forging Design. Previous research investigated Windows implementations 
and  the  effectiveness  of  such  an  attack;  however,  this  is  the  first  known  research 
extending  this  ability  to  the  Linux  environment  [16].    In  general,  forging  a  server 
response may provide misleading information that may cause an attack to be falsely 
classified  as  unsuccessful.    This  new  form  of  attack  requires  the  exploit  to  carry  a 
shellcode capable of creating and sending a forged server response. 
Shellcode Development. The first challenge of a shellcode which can send a response 
is finding a way to send the message.  The shellcode needs a socket on which to send 
the message.  Obtaining a socket can be accomplished in two ways: by creating a new 
socket specifically for the purpose of forging a response or finding an existing socket 
which can be reused. 
The  first  method  is  fairly  straightforward.    The  shellcode  simply  creates  a  new 
socket  by  making  one  call  to  an  operating  system  library,  and  then  sends  out  the 
forged response by modifying the IP and TCP header information and including the 
server response message. 
The second method requires the shellcode to reuse a socket.  Reusing a socket has 
several  benefits  including  not  needing  to  forge  much  of  the  header  information.  
Reusing  an  existing  connection  also  keeps  the  forgery  from  being  noticed  by  a 
firewall or NIDS looking for new TCP connections.  Two techniques are available to 
find an existing socket: findsock and findrecv.   
Findsock finds  the  socket based on the remote  host’s TCP port number [27, 28].  
Basically,  the  shellcode  iterates  through  every  open  socket  file  descriptor  and 
compares  the  remote  connections  port  number  with  the  number  specified  by  the 
attacker.  When the socket with the corresponding port number is found, the shellcode 
returns the file descriptor which can be used to send messages back to the attacking 
computer.   
Findrecv locates the established socket by looking for a secondary message sent to 
that socket by the attacker [27, 29].  In this approach, the exploit sends the shellcode 
in  one  message  and  then  sends  an  additional  “tag”  message.    The  shellcode  loops 
through all the sockets and attempts to receive the tag.  If the tag is found and matches 
the  one  sent  by  the  attacker,  then  the  established  socket  is  found  and  the  shellcode 
returns the file descriptor.   
The second challenge of the shellcode is creating the forged response.  To deceive 
the  NIDS  and  the  analyst,  the  response  must  appear  to  be  legitimate.    Even  the 
smallest things like the message’s header information must be correct or the response 
may get flagged.  The actual message contents must be determined ahead of time and 
will  vary  depending  on  the  service  attacked,  the  version  number,  and  possibly  the 
operating system.  
Testing  Implementation.  Our  research  tests  the  developed  exploits  and  shellcodes 
using  an  experimental  client-server  application  written  in  C.    The  server  process 
listens for client connections on port 8080.  After establishing a connection, the client 
sends  a  request  to  the  server.    The  server  receives  this  message  and  copies  it  to 
another buffer  using strcpy(), and then it echoes back the  request assuming  nothing 
has gone awry. 
264 
A.D. Todd et al. 
The receive buffer is 760 bytes while the destination buffer is only 740 bytes.  By 
using  strcpy()  with  a  larger  source  buffer  than  destination  buffer,  the  server  is 
vulnerable  to  a  buffer  overflow  attack.  These  buffer  sizes  represent  a  typical  buffer 
overflow  size.    The  Metasploit  Framework  contains  13  Linux  exploits,  and  the 
average available payload size was 737 bytes.  A buffer overflow attack occurs when 
the  return  memory  address  is  overwritten.    At  the  end  of  execution,  the  function 
attempts  to  return  to  where  it  was  called,  but  during  a  buffer  overflow  attack  the 
return address is usually overwritten to point back into the attacker specified buffer.  
Once control flow has jumped back into the exploit message, it falls through until it 
reaches the shellcode. The shellcode must be passed into the buffer as machine byte-
code  so  that  it  can  be  interpreted  as  instructions  and  executed.    However,  before  a 
shellcode can be sent to a vulnerable application, “bad” characters must be removed 
(c.f., Section 3.5).  To alleviate these problems, the Metasploit encoder was used to 
remove all the problematic characters.  It works by using a specified encoding scheme 
to encrypt the real shellcode, and then attaches a decoding algorithm to the front of 
the exploit to decrypt the rest of the shellcode once it begins to execute. 
In  this  scenario,  the  client  is  responsible  for  generating  and  sending  the  exploit.  
The  testing  client  has  several  shellcodes  to  choose  from  and  each  has  already  been 
encoded  with  the  default  Metasploit  encoder.    After  selecting  the  shellcode  to  use 
with  this  exploit,  the  client  fills  the  request  with  a  NOP  sled.    Next,  the  encoded 
shellcode  is  placed  in  the  buffer,  and  then  the  remaining  space  is  filled  with  a  new 
return address which will overwrite the handler’s return address on the server.  Once 
the complete exploit is created, the client sends the request to the server and waits for 
the response. 
4   Analysis 
4.1   Server Responses 
The  analysis  begins  with  a  description  of  the  server  responses  of  the  vulnerable 
applications  followed  by  the  patched  application  responses.  These  responses  are 
compared  to  determine  if  response  forging  is  a  viable  attack.    Consistent  differences 
between the two responses along with consistency amongst patched server responses are 
key elements in determining the possibility of forging.  This section also compares the 
differences  in  responses  between  operating  systems  to  determine  if  they  affect  the 
universality  of  server  response  forging.  Finally,  general  observations  and requirements 
for successful server response forging are discussed. 
Responses to samba_nttrans. This experiment captures the server responses generated 
by  using the  samba_nttrans exploit against the vulnerable Samba  version 2.25 and the 
patched version 3.0.23.  The application was only found to be vulnerable on seven of the 
ten Linux distributions (cf., Table 4). 
All four Linux distributions tested in this research were vulnerable to this exploit, 
and all shared similar server responses.  This exploit starts by establishing an  SMB 
session and connecting to the SMB file tree.  After this session has been created, the 
exploit sends a malformed NT Trans request which contains a buffer overflow.  The 
Samba service fails to check the length field inside the NT Trans request before using 
Alert Verification Evasion Through Server Response Forging 
265 
this value as the buffer’s length in a memcpy() operation [22].  After exploitation, the 
Samba server executes the shellcode, but the service does not crash nor does it send 
back any response.  After the shellcode has been executed, the process simply sends 
back a FIN-ACK to close the connection.   
After  installing  Samba  3.0.23,  the  buffer  overflow  was  unsuccessful.    When  the 
service received a malformed NT Trans request, it replied with an SMB error message 
stating that the command was unknown and closed the connection.   
Responses to gnu_mailutils_imap4d. This experiment captured the server responses 
generated  by  using  the  gnu_mailutils_imap4d  exploit  against  the  vulnerable  GNU 
Mailutils  version  0.6  and  the  patched  version  1.1.  The  application  was  found  to  be 
exploitable on only three of the ten distributions (cf., Table 4).  
Of  the  four  Linux  distributions  tested,  three  were  vulnerable  to  this  exploit.    All 
three vulnerable distributions shared similar server responses.  This exploit connects 
to the server and determines the correct parameters for a buffer overflow attack.  The 
server  runs  an  Internet  Message  Access  Protocol  (IMAP)  server  which  is  used  for 
sending  and  receiving  email.    After  an  IMAP  session  has  been  established,  a 
malicious request is sent.  In all three vulnerable test scenarios, the application  was 
exploited and responded with a normal IMAP response message followed by several 
IMAP response messages filled with spaces.   
On the patched version 1.1 of GNU Mailutils, the exploit could not determine the 
information  necessary  to  successfully  execute  the  buffer  overflow  attack.    When 
presented with erroneous requests, the server sent an IMAP response and then closed 
the connection.  When attempting to exploit the patched Mailutils on the SuSE 9.3, 
the application also responded with a bad arguments IMAP message.  This is the same 
response  given  by  the  Ubuntu  4.10  system,  which  was  the  only  configuration  not 
vulnerable to this exploit. 
Responses to poptop_negative_read. This experiment captured the server responses 
when  the  poptop_negative_read  exploit  was  used  against  the  vulnerable  PoPToP 
PPTP daemon version 1.1.3 and the patched version 1.3.0.  The application was found 
to be vulnerable on three of the ten distributions (cf., Table 4).   
Three of the  four  Linux distributions tested  were vulnerable to this exploit.  The 
exploit is contained within one 408-byte packet.  The overflow occurs in a malicious 
“Start Control Connection Request”.  The PPTP length field is set to 1, and the return 
address  is  overwritten.    The  new  return  address  points  back  into  the  user-supplied 
request which contains the shellcode.  After the server is exploited, the connection is 
immediately closed with a FIN-ACK packet, and then the shellcode is executed.  This 
server response was shared amongst the vulnerable configurations.   
SuSE 9.3 was not vulnerable to the PoPToP negative read exploit and neither were 
the other operating systems after installing PoPToP version 1.3.0.  In both cases, the 