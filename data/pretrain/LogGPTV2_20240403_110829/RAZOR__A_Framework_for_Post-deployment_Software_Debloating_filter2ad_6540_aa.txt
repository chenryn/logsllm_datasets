title:RAZOR: A Framework for Post-deployment Software Debloating
author:Chenxiong Qian and
Hong Hu and
Mansour Alharthi and
Simon Pak Ho Chung and
Taesoo Kim and
Wenke Lee
RazoR: A Framework for Post-deployment 
Software Debloating
Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho Chung, Taesoo Kim, and 
Wenke Lee, Georgia Institute of Technology
https://www.usenix.org/conference/usenixsecurity19/presentation/qian
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.RAZOR: A Framework for Post-deployment Software Debloating
Chenxiong Qian∗, Hong Hu∗, Mansour Alharthi, Pak Ho Chung, Taesoo Kim, Wenke Lee
Georgia Institute of Technology
Abstract
Commodity software typically includes a large number of
functionalities for a broad user population. However, each
individual user usually only needs a small subset of all sup-
ported functionalities. The bloated code not only hinders
optimal execution, but also leads to a larger attack surface. Re-
cent works have explored program debloating as an emerging
solution to this problem. Unfortunately, these works require
program source code, limiting their real-world deployability.
In this paper, we propose a practical debloating framework,
RAZOR, that performs code reduction for deployed binaries.
Based on users’ specifications, our tool customizes the binary
to generate a functional program with minimal code size.
Instead of only supporting given test cases, RAZOR takes
several control-flow heuristics to infer complementary code
that is necessary to support user-expected functionalities. We
evaluated RAZOR on commonly used benchmarks and real-
world applications, including the web browser FireFox and
the close-sourced PDF reader FoxitReader. The result shows
that RAZOR is able to reduce over 70% of the code from the
bloated binary. It produces functional programs and does
not introduce any security issues. RAZOR is thus a practical
framework for debloating real-world programs.
1 Introduction
“Entities are not to be multiplied without necessity.”
— Occam’s Razor
As commodity software is designed to support more features
and platforms to meet various users’ needs, its size tends to
increase in an uncontrolled manner [16, 39]. However, each
end-user usually just requires a small subset of these features,
rendering the software bloated. The bloated code not only
leads to a waste of memory, but also opens up unnecessary at-
tack vectors. Indeed, many serious vulnerabilities are rooted
in the features that most users never use [31, 35]. There-
fore, security researchers are beginning to explore software
debloating as an emerging solution to this problem.
∗The two lead authors contributed equally to this work.
Unfortunately, most initial works on software debloating
rely on the availability of program source code [40, 15, 44],
which is problematic in real-world use. First, most users do
not have access to the source code, and even if they do, it
is challenging for them to rebuild the software, diminishing
the intended benefits of software bloating. Moreover, users
may use the same software in drastically different ways, and
thus the unnecessary features to be removed will accordingly
vary from user to user. Therefore, to obtain the most bene-
fits, the debloating process should take place after software
deployment and should be tailored for each individual user.
Making such a post-deployment approach beneficial and
usable to end-users creates two challenges: 1) how to allow
end-users, who have little knowledge of software internals,
to express which features are needed and which should be
removed and 2) how to modify the software binary to remove
the unnecessary features while keeping the needed ones.
To address the first challenge, we can ask end-users to
provide a set of sample inputs to demonstrate how they will
use the software, as in the CHISEL work [15]. Unfortunately,
programs debloated by this approach only support given in-
puts, presenting a rather unusable notion of debloating: if the
debloated software only needs to support an apriori, fixed set
of inputs, the debloating process is as simple as synthesizing
a map from the input to the observed output. However, from
our experiments, we find that even processing the same input
multiple times will result in different execution paths (due to
some randomization factors). Therefore, the naive approach
will not work even under simplistic scenarios.
In order to practically debloat programs based on user-
supplied inputs, we must identify the code that is necessary
to completely support required functionalities but is not exe-
cuted when processing the sample inputs, called related-code.
Unfortunately, related-code identification is difficult. In par-
ticular, it is challenging for end-users (even developers) to
provide an input corpus that exercises all necessary code that
implements a feature. Furthermore, if the user provides some
description of all possible inputs (e.g., patterns), it is still hard
to identify all reachable code for those inputs. Thus, we be-
USENIX Association
28th USENIX Security Symposium    1733
lieve that any debloating mechanism in the post-deployment
setting will be based on best-effort heuristics. The heuristics
should help identify the related-code as much as possible,
and meanwhile include minimal functionally unrelated code.
Note that techniques like dead code elimination [23, 22] and
delta debugging [49, 42] do not apply to this problem be-
cause they only focus on either removing static dead code or
preserving the program’s behavior on a few specific inputs.
We design four heuristics that infer related-code based
on the assumption that code paths with more significant di-
vergence represent less related functionalities. Specifically,
given one executed path p, we aim to find a different path q
such that 1) q has no different instructions, or 2) q does not
invoke new functions, or 3) q does not require extra library
functions, or 4) q does not rely on library functions with dif-
ferent functionalities. Then, we believe q has functionalities
similar to p and treat all code in q as related-code. From 1) to
4), the heuristic includes more and more code in the debloated
binary. For a given program, we will gradually increase the
heuristic level until the generated program is stable. In fact,
our evaluation shows that even the most aggressive heuristic
introduces only a small increase of the final code size.
Once all the related-code is identified, we develop a binary-
rewriting platform to remove unnecessary code and gener-
ate a debloated program. Thanks to the nature of program
debloating, our platform does not face the symbolization
problem from general binary-rewriting tools [51, 53, 52, 5].
Specifically, a general binary-rewriting tool has to preserve all
program functionalities, which is difficult without a reliable
disassembling technique and a complete control-flow graph
(CFG) [2]. For debloating, we preserve only the functionali-
ties related to the sample inputs, where the disassembling and
CFG are available by observing the program execution.
We designed the RAZOR framework to realize the post-
deployment debloating. The framework contains three com-
ponents: Tracer monitors the program execution with the
given sample inputs to record all executed code; PathFinder
utilizes our heuristics to infer more related-code from the ex-
ecuted ones; Generator generates a new binary based on the
output of Tracer and PathFinder. In the RAZOR framework,
we implemented three tracers (two based on dynamic binary
instrumentation and one based on a hardware tracing feature),
four path finding heuristics, and one binary generator.
To understand the efficacy of RAZOR on post-deployment
debloating, we evaluated it on three sets of benchmarks: all
SPEC CPU2006 benchmarks, 10 coreutils programs used
in previous work, and two real-world large programs, the
web browser Firefox and the closed-sourced PDF parser
FoxitReader. In our evaluation, we performed tracing and
debloating based on one set of training inputs and tested the
debloated program using a different set of functionally similar
inputs. Our results show that RAZOR can effectively reduce
70-80% of the original code. At the same time, it introduces
only 1.7% overhead to the new binary. We compared RA-
ZOR with CHISEL on debloating 10 coreutils programs and
found that CHISEL achieves a slightly better debloating result
(smaller code size), but it fails several programs on given test
cases. Further, CHISEL introduces exploitable vulnerabilities
to the debloated program, such as buffer overflows resulting
from the removed boundary checks. RAZOR does not intro-
duce any security issues. We also analyzed the related-code
identified by our path finder and found that different heuristics
effectively improve the program robustness.
In summary, we make the following contributions:
• New approach. We proposed a practical post-
deployment debloating framework that works on pro-
gram binaries. Besides given test inputs, our system
supports more inputs of the required functionalities.
• Open source. We designed RAZOR as an end-to-end
system to produce a minimal functional executable. We
implemented our system on an x86-64 Linux system and
will open source RAZOR at https://github.com/
cxreet/razor.
• Practical and ready-to-use. We evaluated RAZOR on
real-world programs such as Firefox and FoxitReader
and showed that these programs can be significantly
debloated, resulting in better security.
2 Problem
2.1 Motivating Example
Figure 1a shows a bloated program, which is designed to
parse image files in different formats. Based on the user-
provided options (line 4 and 6), the program invokes func-
tion parsePNG to parse PNG images (line 5) or invokes func-
tion parseJPEG to handle JPEG images (line 7). In function
parsePNG, the code first allocates memory to hold the image
content and saves the memory address in img (line 10). Then
it makes sure img is aligned to 16-bytes with the macro ALIGN
(line 11 and 12). Finally, it invokes function readToMem to
load the image content from file into memory for further
processing. Function parseJPEG has a structure similar to
parsePNG, so we skip its details.
Although the program in Figure 1a merely supports two im-
age formats, it is still bloated if the user only uses it to process
PNG files. For example, screenshots on iPhone devices are
always in PNG format [27]. In this case, the code is bloated
with the unnecessary JPEG parser, which may contain security
bugs [18]. Attackers can force it to process malformed JPEG
images to trigger the bug and launch remote code execution.
In real-world software ecosystem, we can easily find docu-
ment readers (e.g., Preview on MacOS) that support obsolete
formats (e.g., PCX, Sun Raster, TGA). We can debloat these
programs to reduce their code sizes and attack surfaces.
1734    28th USENIX Security Symposium
USENIX Association
if (!strcpy(options, "PNG"))
parsePNG(file_name);
parseJPEG(file_name);
else if (!strcpy(options, "JPEG"))
1 #define MAX_SIZE 0xffff
2 #define ALIGN(v,a) (((v+a-1)/a)*a)
3 void imageParser(char *options, char *file_name) {
4
5
6
7
8 }
9 void parsePNG(char *file_name) {
10
11
12
13
14 }
15 void parseJPEG(char *file_name) { ... }
char * img = (char *)malloc(MAX_SIZE + 16);
if ((img % 16) != 0)
img = ALIGN(img, 16);
readToMem(img, file_name);
(a) A bloated image parser.
(b) Original control-flow graph.
(c) Debloated control-flow graph
Figure 1: Debloating an image parser. (a) shows the code of the bloated image parser, where the program invokes different functions to handle
PNG or JPEG files based on the options. The control-flow graphs before and after debloating are shown in (b) and (c).
2.2 Program Debloating
In this paper, we develop techniques to remove user-
specified unnecessary functionalities from bloated pro-
grams. Given a program P that has a set of functionali-
ties F = {F0,F1,F2, ...} and a user specification of necessary
functionalities Fu = {Fi,Fj,Fk, ...}, our goal is to generate a
new program P′ that only retains functionalities in Fu and
gracefully refuses requests of other functionalities in F − Fu.
The program in Figure 1a has two high-level functionalities:
parsing PNG images and parsing JPEG images, while the user
specification only requires the first functionality. In this case,
the goal of debloating is to generate minimal code that only
supports parsing PNG files while exiting gracefully if the given
images are in other formats. From the simple code we can
easily tell that code in the yellow background (i.e., line 6, 7
and 15) is not necessary, so we remove such code in a safe
manner: function parseJPEG will be simply removed; for line
6 and 7, we should replace the code with fault-handling code
to prompt warnings and exit gracefully.
In this paper, we focus on reducing functionalities from
software binaries. Specifically, the program P is given as
a binary, while the source code like Figure 1a is not avail-
able. Instead, we construct the control-flow graph (CFG)
from the executable and use it to guide the binary debloat-
ing. Figure 1b and Figure 1c show CFGs of the bloated
binary and the debloated one, respectively. Black arrows
represent intra-procedural jumps, while dotted arrows stand
for inter-procedural calls and returns. Originally, function
imageParser can execute lines 6 and 7 and invoke function
parseJPEG. In the debloated binary, these lines and functions
are not reachable, and the CFG is simplified to Figure 1c.
For the vulnerability in the removed code, the new binary
prevents attackers from triggering them in the first place.
2.3 Challenges and Solutions
From the previous example, we can find the gap between
the user specification and the code removed: users specify
that the functionality of parsing PNG files is necessary (i.e.,
others are unnecessary), while we finally remove line 6, line
7, and function parseJPEG. However, mapping high-level
functionalities to low-level code manually is challenging,
especially for large programs. Specifically, this leads to two
general challenges of program debloating:
C1. How to express unnecessary functionalities;
C2. How to map functionalities to program code.
One possible solution is to rely on end-users to provide a set of
test cases for each necessary/unnecessary functionality so we
can inspect the program execution to learn the related program
code. Our problem can be rephrased as follows: given the
program binary Pb and a set of test cases T = {ti,t j,tk, ...},
where each test case ti triggers some functionalities of Pb,
we will create a minimal program P′
b that supports and only
supports functionalities triggered by the test cases in T .
Test cases help us address challenges C1 and C2. However,
it is impossible to provide test cases that cover all related-code
of the required functionalities. In this case, some related-code
will not be triggered. If we simply remove all never-executed
code, the program functionality will be broken. For example,
the code at lines 11 and 12 of Figure 1a will make sure the
pointer img is aligned to 16. Based on the concrete execution
context, the return value of malloc (at line 10) may or may not
satisfy the alignment requirement. If the execution just passes
the check at line 11, the simple method will delete line 12 for
the minimal code size. However, if the later execution expects
an aligned img, the program will show unexpected behavior
or even crash. Our evaluation in §5.2 shows that simply
removing all non-executed code introduces many bugs, even
exploitable ones, to the debloated program. Therefore, a test-
case-based debloating system faces the following challenge.
C3. How to find more related-code from limited test cases.
To address challenge C3, we propose control-flow-based
heuristics to infer more related-code that is necessary to sup-
port the required functionalities but was missed during our
USENIX Association
28th USENIX Security Symposium    1735
imageParser  return6FT4FTparsePNG10FT1112137parseJPEG5returnimageParser  return5T4parsePNG10FT111213returnFigure 2: Overview of RAZOR. It takes in the bloated program binary and a set of test cases and produces a minimal, functional binary.
Tracer collects the program execution traces with given test cases and converts them into a control-flow graph (CFG). PathFinder utilizes
control-flow-based heuristics to expand the CFG to include more related-code. Based on the new CFG, Generator generates the debloated
binary.
inspection. Suppose the test cases in T only trigger the exe-
cution of instructions in I = {i0,i1,i2, ...}, our heuristic will
automatically infer more code that is related to the function-
alities covered by T . Specifically, we identify a super set
I ′ = I ∪{ix,iy,iz, ...} and keep all instructions in I ′ while
removing others to minimize the code size. When debloat-
ing the code in Figure 1a, the execution of given test cases
does not cover line 12. However, with our heuristics, we
will include this line in the debloated program. The evalu-
ation in §5.3 shows that our heuristic is effective in finding
related-code paths and introduces only a small increase in
code size.
3 System Design
Figure 2 shows an overview of our post-deployment debloat-
ing system, RAZOR. Given a bloated binary and a set of test
cases that trigger required functionalities, RAZOR removes
unnecessary code and generates a debloated binary that sup-
ports all required features with minimal code size. To achieve
this goal, RAZOR first runs the binary with the given test cases
and uses Tracer to collect execution traces (§3.1). Then, it
decodes the traces to construct the program’s CFG, which
contains only the executed instructions. In order to support
more inputs of the same functionalities, PathFinder expands
the CFG based on our control-flow heuristics (§3.2). The
expanded CFG contains non-executed instructions that are
necessary for completing the required functionalities. In the
end, with the expanded CFG, Generator rewrites the origi-
nal binary to produce a minimal version that only supports
required functionalities (§3.3).
3.1 Execution Trace Collection
Tracer executes the bloated program with given test cases
and records the control-flow information in three categories:
(1) executed instructions, including their memory addresses
and raw bytes; (2) the taken or non-taken of conditional
branches, like je that jumps if equal; (3) concrete targets
of indirect jumps and calls, like jmpq *%rax that jumps to the
address indicated by register %rax. Our Tracer records the
raw bytes of executed instructions to handle dynamically gen-
Figure 3: A snippet of the collected trace. It includes the range of
each executed basic block, the taken/non-taken of each condition
branch, and the concrete target of indirect jumps/calls. We also
record the frequency of each indirect jump/call target (after #).
erated/modified code. However, instruction-level recording
is inefficient and meanwhile most real-world programs only
contain static code. Therefore, Tracer starts with basic block-
level recording that only logs the address of each executed
basic block. During the execution, it detects any dynamic
code behavior, like both writable and executable memory re-
gion (e.g., just-in-time compilation [13]), or overlapped basic
blocks (e.g., legitimate code reuse [26]), and switches to the
instruction-level recording to avoid missing instructions. A
conditional branch may get executed multiple times and fi-
nally covers one or both targets (i.e., the fall-through target
and the jump target). For indirect jump/call instructions, we
log all executed targets and count their frequencies.
Figure 3 shows a piece of collected trace. It contains two
executed basic blocks, one at address 0x4005c0 and another
at 0x400596. The trace also contains three conditional branch
instructions: the one at 0x4004e3 only takes the true target;
the one at 0x4004ee only takes the false target; the one at
0x400614 takes both targets. One indirect call instruction at
0x400677 jumps to target 0x4005e6 for 18 times and jumps to
target 0x4005f6 for six times. As the program only has static
code, Tracer does not include the instruction raw bytes.
We find that it is worthwhile to use multiple tools to collect
the execution trace. First, no mechanism can record the trace
completely and efficiently. Software-based instrumentation
can faithfully log all information but introduces significant
overhead [7, 25, 6]. Hardware-based logging can record ef-
ficiently [20] but requires particular hardware and may not
guarantee the completeness (e.g., data loss in Intel PT [17]).
Second, program executions under different tracing environ-
1736    28th USENIX Security Symposium
USENIX Association
bloated binaryTracertest casesexecutiontracesDynamorioIntel PINIntel PTPath FinderGeneratordebloated binaryCFGdecodeCFG'Heuristic AHeuristic B...fault handlerinstrumenterassembler[0x4004e3: true][0x4004ee: false][0x400614: true & false][0x400677: 0x4005e6#18,0x4005f6#6]......Executed Blocks[0x4005c0,0x4005f2][0x400596,0x4005ae]...Conditional BranchesIndirect Calls/Jumpsments will show divergent paths. For example, Dynamorio
always expands the file name to its absolute path, leading to
different executed code in some programs (e.g., vim). There-
fore, we provide three different implementations (details in
§4.1) with different software and hardware mechanisms. End-
users can choose the best one for their requirement or even
merge traces from multiple tools for better code coverage.
CFG construction. With the collected execution traces,
RAZOR disassembles the bloated binary and constructs the
partial control-flow graph (CFG) in a reliable way. Different
from previous works that identify function boundaries with