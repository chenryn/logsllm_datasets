37
Deﬁnition 26: Decentralized Multi-Client Function Encryption
Let {Fn}n∈N be a set of functionality where for each n ∈ N, Fn deﬁned over (Kn,X1,··· ,Xn)
is a function Fn : Kn × X1 × ··· × Xn → Z. Each i is called an input slot. The key space
Kn, depends on the arity n. A decentralized multi-client functional encryption scheme
DMCFE for the set of functionality {Fn}n∈N consists of the following algorithms:
• Setup(1λ, Fn): on input the security parameter λ and a functionality Fn, outputs a
public key pk, encryption keys eki for each input slot i ∈ [n], and secret keys ski for
each input slot i ∈ [n].
• Enc(pk, eki, xi, ℓ): on input the public key pk, encryption key eki for the input slot
i ∈ [n], a message xi ∈ Xi, and a label ℓ, it outputs a ciphertext ct.
• KeyGen(pk, ski, k): on input the public key pk, the secret key ski for slot i ∈ [n], and
a function k ∈ Kn, it outputs a partial decryption key dkk,i.
• KeyComb(pk,{dkk,i}i∈[n], k): on input the public key pk, n partial decryption keys
keys, and a key k, it combines its input to produce a decryption key dkk.
• Dec(pk, dkk, ct1, . . . , ctn, ℓ): on input the public key pk, a decryption key dkk, n
ciphertexts and a label ℓ, outputs z ∈ Z, or a special rejection symbol ⊥ if it fails.
The scheme DMCFE is correct if for all k ∈ Kn, all xi ∈ Xi for i ∈ [n], and all label
ℓ, we have:
(pk, (eki, ski)i∈[n]) ← Setup(1λ, Fn);
∀i ∈ [n] : dkk,i ← KeyGen(pk, ski, k);
dkk ← KeyComb(pk, (dki,k)i∈[n], k);
Pr
Dec(pk, dkk, Enc(pk, ek1, x1, ℓ), . . . , Enc(pk, ekn, xn, ℓ), ℓ) = Fn(k, x1, . . . , xn)
= 1 − negl(λ),
where the probability is taken over the coins of Setup, KeyGen, KeyComb and Enc.
The scheme is public-key if eki = ∅, that is, the encryption algorithm Enc only requires
the public pk to encrypt messages. It is private-key otherwise.
We now present the many-AD-IND security notion for decentralized multi-client functional
encryption. The diﬀerence with centralized multi-client functional encryption is that the shares
of the functional decryption keys can be corrupted, instead of the functional decryption keys
themselves. The oracle OCorrupt also give out the secret key ski in addition of eki, when
queried on input slot i ∈ [n].
Deﬁnition 27: many-AD-IND secure DMCFE
A decentralized multi-client functional encryption DMCFE := (Setup, Enc, KeyGen, KeyComb,
Dec) for the set of functionalities {Fn}n∈N, is many-AD-IND secure if for every stateful
PPT adversary A, we have:
Advmany-AD-IND
(1λ,A) = 1i − PrhAD-INDDMCFE
1
DMCFE,A (λ) =(cid:12)(cid:12)(cid:12)PrhAD-INDDMCFE
= negl(λ),
0
(1λ,A) = 1i(cid:12)(cid:12)(cid:12)
where the experiments are deﬁned for β ∈ {0, 1} as follows:
38
Chapter 2. Preliminaries
β
Experiment AD-INDMCFE
(1λ,A):
(pk, (eki, ski)i∈[n]) ← Setup(1λ, Fn)
α ← AOEnc(·,·,·),OKeygen(·,·),OCorrupt(·)(pk)
Output: α
i , x1
i ), ℓ), returns Enc(pk, eki, xβ
The oracle OEnc, on input (i, (x0
i , ℓ). For any input slot
i ∈ [n], and label ℓ, we denote by Qi,ℓ the set of queries to OEnc for slot i and label ℓ,
and Qi,ℓ the size of Qi,ℓ. The oracle OKeygen(i, k), on input i ∈ [n], and k ∈ Kn, returns
KeyGen(pk, ski, k). The oracle OCorrupt, on input i ∈ [n], returns (eki, ski). We denote by
CS ⊆ [n] the set of corrupted slots. The queries of adversary A must satisfy the following
condition.
Condition 1:
• For all i ∈ CS, all labels ℓ, all (x0
• if A queries OKeygen(·,·) on the same key k for all slots i ∈ [n], then it must be
i ) ∈ Qi,ℓ, we have x0
i = x1
i .
i , x1
that:
Fn(k, x0
for all labels ℓ and all vectors (xb
(x0
i ) ∈ Qi,ℓ, or (i ∈ CS and x0
i , x1
1, . . . , x1
n)
n) = Fn(k, x1
1, . . . , x0
i)i∈[n],b∈{0,1} such that for all i ∈ [n], we have: either
i = x1
i ).
If the condition is not satisﬁed, the experiment outputs 0 instead of α.
Concrete Instances of Functional Encryption for Inner
Products
In this section, we recall the public-key single-input functional encryption schemes from [ALS16],
which are proven many-AD-IND secure for the inner products.
We recall the additional properties deﬁned in [ACF+18], which will be useful to obtain
multi-input FE from single-input FE for inner products, in Chapter 4.
Inner-Product FE from MDDH
Here we present the FE for bounded norm inner products from [ALS16, Section 3], generalized
to the Dk(p)-MDDH setting, as in [AGRW17, Figure 15]. It handles the following functionality
F m,X,Y
: K × X → Z, with X := [0, X]m, K := [0, Y ]m, Z := Z, and for all x ∈ X , y ∈ Y, we
have:
IP
F m
IP (y, x) = hx, yi.
This restriction on the norm of x ∈ X and y ∈ K is necessary for the correctness of the scheme.
Note that the scheme actually supports vector of arbitrary norms, as long as we only want to
decrypt the result in the exponent (see Remark 4).
In [ALS16], it was proven many-AD-IND secure under the DDH assumption. We extend
the one-SEL-SIM security proof given in [AGRW17] to the multi-instance setting. Note that
in the public-key setting, one-SEL-IND security (which is implied by one-SEL-SIM security)
implies many-SEL-IND security. Finally, we also extend the many-AD-IND security proof from
[AGRW17] to the multi-instance setting. We also show that is satisﬁes Property 1 (two-step
decryption) and Property 2 (linear encryption).
2.6 Concrete Instances of Functional Encryption for Inner Products
39
GSetup(1λ, F m,X,Y
G := (G, p, P ) ← GGen(1λ), A ←R Dk(p), gpk := (G, [A])
Return gpk
):
IP
Setup(1λ, gpk, F m,X,Y
W ←R Zm×(k+1)
Return (ek, msk)
IP
p
):
, ek := [WA], msk := W
Enc(gpk, ek, x):
r ←R Zk
p
Return(cid:20) −Ar
Return(cid:18)W⊤y
x + WAr(cid:21) ∈ Gk+m+1
y (cid:19) ∈ Zk+m+1
KeyGen(gpk, msk, y):
p
Dec(pk, [c], d):
C := [c⊤d]
Return log(C)
Figure 2.2: FE, a functional encryption scheme for the functionality F m,X,Y
security is based on the Dk(p)-MDDH assumption.
IP
, whose one-SEL-SIM
Correctness. We have C = [x⊤y] ∈ G. Since x ∈ [0, X]m and y ∈ [0, Y ]m, we have
hx, yi < m · X · Y . Thus, we can eﬃciently recover the discrete log hx, yi as long as m, X, Y
are polynomials in the security parameter.
40
Chapter 2. Preliminaries
Remark 4: Correctness for vectors with large norm
Note that the the functional encryption scheme FE presented in Figure 5.7 supports
vectors x, y ∈ Zm of arbitrary norm, where the decryption eﬃciently recovers [hx, yi] ∈ G.
This feature will be used in Chapter 4 to build multi-input FE from single-input FE for
inner products.
Theorem 3: Multi-instance, one-SEL-SIM security
If the Dk(p)-MDDH assumption holds in G, then the single-input FE in Figure 5.7 is
one-SEL-SIM secure, for n instances.
Games: G0, G1, G2 :
{xi}i∈I⊆[n] ← A(1λ, F m,X,Y
G := (G, p, P ) ←R GGen(1λ), A ←R Dk(p), a⊥ ←R Zk+1
For all i ∈ [n]: Wi ←R Zm×(k+1)
α ← AOKeygen(·,·)(gpk,{eki}i∈[n],{cti}i∈I)
Return α.
)
IP
p
p
, eki := [WiA], cti := OEnc(xi)
\ {0} s.t. A⊤a⊥ = 0 , gpk := (G, [A]).
OEnc(xi):
ri ←R Zk
OKeygen(i, y):
p
p, ci := Ari, ci ←R Zk+1
dky :=(cid:18)W⊤
y (cid:19).
If i ∈ I, dky :=(cid:18)W⊤
i y
Return dky.
i y − hxi, yi · a⊥
y
(cid:19) .
s.t. c⊤
i a⊥ = 1 , c′
i := xi + Wici, c′
i (cid:21)
i := Wici , return(cid:20)−ci
c′
Figure 2.3: Games for the proof of Theorem 3.
In each procedure, the components inside a solid
(dotted) frame are only present in the games marked by a solid (dotted) frame. Here, I ⊆ [n] denotes
the set of instances for which a challenge ciphertext is queried.
Proof of Theorem 3. Let A be a PPT adversary, and λ ∈ N be the security parameter. We
proceed with a series of hybrid games, described in Figure 2.3. For any game G, we denote by
AdvG(A) the advantage of A in game G, that is, the probability that the game G outputs 1
when interacting with A.
Game G0:
is the experiment REALFE(1λ, 1n,A).
is as game G0, except we replace the vector [ci] := [Ari] computed by OEnc(xi)
Game G1:
with [ci] ←R Gk+1 such that c⊤
\ {0} such that A⊤a⊥ = 0,
using the Dk(p)-MDDH assumption. We do so for all instances i ∈ I simultaneously (recall we
denote by I ⊆ [n] the set of instances for which a challenge ciphertext is queried). Namely, we
prove in Lemma 7 that there exists a PPT adversary B such that
i a⊥ = 1, where a⊥ ←R Zk+1
p
|AdvG0(A) − AdvG1(A)| ≤ AdvDk(p)-mddh
G,B
(λ) +
1
p
.
2.6 Concrete Instances of Functional Encryption for Inner Products
41
\ {0} s.t. A⊤a⊥ = 0, ggpk := (G, [A]),
p
p
IP ):
IP ):
^GSetup(1λ, F m
G := (G, p, P ) ← GGen(1λ), A ←R Dk(p), a⊥ ←R Zk+1
td := a⊥. Return (ggpk, td).
^Setup(ggpk, F m
fW ←R Zm×(k+1)
^KeyGen(cid:16)td,gmsk, y,hx, yi(cid:17):
Return(cid:18)fW⊤y − hx, yi · a⊥
gEnc(td,eek,gmsk):
, eek := [fWA],gmsk := fW. Return (eek,gmsk).
(cid:19).
y
s.t. c⊤a⊥ = 1. Return(cid:20) −c
fWc(cid:21).
c ←R Zk+1
p
ure 5.7.
Figure 2.4: Simulator ( ^GSetup,^Setup, ^KeyGen,gEnc) for the one-SEL-SIM security of the FE from Fig-
is the experiment IDEALFE(1λ, 1n,A), where the simulator ( ^GSetup,^Setup, ^KeyGen,
gEnc) is described in 2.4. In Lemma 8, we show that game G2 and game G1 are perfectly indis-
tinguishable, using a statistical argument, that crucially relies on the fact that game G1 and
G2 are selective. Namely, we prove in Lemma 8 that
Game G2:
Putting everything together, we obtain:
AdvG1(A) = AdvG2(A).
Advone-SEL-SIM
FE,A,n
(λ) ≤ AdvDk(p)-mddh
G,B
(λ) +
1
p
.
Lemma 7: Game G0 to G1
There exists a PPT adversary B such that
|AdvG0(A) − AdvG1(A)| ≤ AdvDk(p)-mddh
G,B
(λ) +
1
p
.
Proof of Lemma 7. In game G1, we replace the vectors [Ari] computed by OEnc(xi), with
[ci] ←R Gk+1 such that c⊤
i a⊥ = 1, simultaneously for all instances i ∈ [n]. This replacement
is justiﬁed by the facts that:
• The following are identically distributed: {Ari}i∈[n] and {Ari + Ar}i∈[n], where for all
i ∈ [n], ri ←R Zk
p, and r ←R Zk
p.
• By the Dk(p)-MDDH assumption, we can switch ([A], [Ar]) to ([A], [u]), where A ←R
Dk(p), r ←R Zk
p, and u ←R Zk+1
p
.
• The uniform distribution over Zk+1
p-close, for any A ∈ Z(k+1)×k
\ Span(A) instead of uniformly random over Zk+1
.
Combining these facts, we obtain a PPT adversary B such that |Adv1(A) − Adv0(A)| ≤
AdvDk-mddh
of rank k. So we can take u ←R Zk+1
\Span(A) are 1
and Zk+1
p
p
p
p
p
G,B
(λ) + 1
p.
42
Chapter 2. Preliminaries
Lemma 8: Game G1 to G2