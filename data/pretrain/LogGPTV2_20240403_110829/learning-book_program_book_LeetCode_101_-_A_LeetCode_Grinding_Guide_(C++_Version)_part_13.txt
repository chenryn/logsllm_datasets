3[-1
-3
5] 3 6
5
E
-1 [3 5
3]6 7
5
1
3
-1
-3[5 3
6] 7
6
1
- 1
-35[3 67]
了
题解
我们可以利用双端队列进行操作：每当向右移动时，把窗口左端的值从队列左端剔除，把队
列右边小于窗口右端的值全部剔除。这样双端队列的最左端永远是当前窗口内的最大值。另外，
这道题也是单调栈的一种延申：该双端队列利用从左到右递减来维持大小关系。
vector maxSlidingWindou(vector& nums, int k) {
deque dq;
vector ans;
for (int i = 0; i = k - 1) {
ans push_back (nums [dq.front ()]) ;
return ans;
11.7哈希表
哈希表，又称散列表，使用O（n)空间复杂度存储数据，通过哈希函数映射位置，从而实现
近似0（1)时间复杂度的插入、查找、删除等操作。
C++中的哈希集合为unordered_set，可以查找元素是否在集合中。如果需要同时存储键
和值，则需要用unordered_map，可以用来统计频率，记录内容等等。如果元素有穷，并且范围
不大，那么可以用一个固定大小的数组来存储或统计元素。例如我们需要统计一个字符中中所有
字母的出现次数，则可以用一个长度为26的数组来进行统计，其哈希函数即为字母在字母表的
位置，这样空间复杂度就可以降低为常数。
一个简单的哈希表的实现如下。
template 
class HashTable {
private:
vector> hash_table;
//哈希函数
int myhash(const T & obj） const{
return hash(obj, hash_table.size ()) ;
public:
//Bize最好是质数
HashTable(int size=31){
hash_table.reserve (size) ;
hash_table.resize(size) ;
“HashTable() {)
11查找哈希表是否存在该值
bool contains(const T& obj）{
int hash_value = myhash(obj);
const list & slot = hash_table[hash_value] ;
std::1ist: :const_iterator it = slot.cbegin();
for (; it != slot.cend() &k *it != obj; ++it);
return it != slot.cend();
//括入值
bool insert(const T&obj) {
if (contains(obj)） {
return false;
---
## Page 100
11.7哈希表
95/143 
int hash_value = myhash (obj);
std::list & slot = hash_table[hash_value] ;
slot.push_front (obj);
return true;
//删除值
bool remove(const T& obj) {
list & slot = hash_table[myhash(obj)] ;
auto it = find (slot.begin(), slot.end(), obj);
if (it -= slot.end()) {
return false;
slot.erase(it);
return true;
};
一个简单的对整数实现的哈希函数
int hash(const int & key, const int &tableSize) {
return key % tableSize;
如果需要大小关系的维持。且插入查找并不过于频繁，则可以使用有序的Bet/map来代替
unordered_set/unordered_map
1. Two Sum (Easy)
题目描述
给定一个整数数组，已知有且只有两个数的和等于给定值，求这两个数的位置。
输人输出样例
输人一个一维整数数组和一个目标值，输出是一个大小为2的一维数组，表示满足条件的两
个数字的位置。
Input: nums - [2, 7, 11, 15], target = 9
Output: [0, 1]
在这个样例中，第0个位置的值2和第1个位置的值7的和为9。
题解
我们可以利用哈希表存储遍历过的值以及它们的位置，每次遍历到位置i的时候，查找哈希
表里是否存在target-mums[i]，若存在，则说明这两个值的和为target。
vector tvoSum(vector& nums, int target) {
//键是数字，值是该数字在数组的位置
unordered_map hash;
vector ans;
for (int i = 0; i second) ;
ans push_back(i) ;
break;
return ans;
128.Longest Consecutive Sequence (Hard)
题目描述
给定一个整数数组，求这个数组中的数字可以组成的最长连续序列有多长。
输人输出样例
输入一个整数数组，输出一个整数，表示连续序列的长度。
Input:[100,4,200,1,3,2]
Output: 4
在这个样例中，最长连续序列是[1.2.3.4]。
题解
我们可以把所有数字放到一个哈希表，然后不断地从哈希表中任意取一个值，并剩除掉其之
前之后的所有连续数字，然后更新目前的最长连续序列长度。重复这一过程，我们就可以找到所
有的连续数字序列。
int longestConsecutive(vector& nums){
unordered_set hash;
for (const int & nun: nums){
hash.insert(nun) ;
int ans = 0;
while (!hash.enpty()) {
int cur = *(hash.begin());
hash.erase (cur);
int next - cur + 1, prev = cur - 1;
while (hash.count(next)){
hash.erase (next++) ;
while (hash.count (prev)){
上
hash.erase(prev--);
ans
max(ans, next - prev - 1);
return ans;
---
## Page 102
11.7哈希表
97/143 -
{
149. Max Points on a Line (Hard)
题目描述
给定一些二维坐标中的点，求同一条线上最多由多少点。
输人输出样例
输入是一个二维整数数组，表示每个点的横纵坐标：输出是一个整数，表示满足条件的最多
点数。
Input: [[1,1] , [3,2], [5,3] , [4,1] , [2,3], [1,4]]
0123456
Output: 4
这个样例中，y=5-x上有四个点。
题解
对于每个点，我们对其它点建立哈希表，统计同一斜率的点一共有多少个。这里利用的原理
是，一条线可以由一个点和斜率而唯一确定。另外也要考虑斜率不存在和重复坐标的情况。
本题也利用了一个小技巧：在遍历每个点时，对于数组中位置i的点，我们只需要考虑1之
后的点即可，因为1之前的点已经考虑过i了。
int maxPoints(vector>& points)(
unordered_maphash;//
int max_count = 0, same = 1, same_y = 1;
for (int i = O; i  findItinerary(vector>& tickets){
vector ans;
if (tickets.empty()) {
unordered_map> hash;
for(const auto & ticket: tickets){
hash [ticket [0]] .insert (ticket[1]);
stack s;
8 .push("JFK") ;
while (!s.empty()) {
string next = s.top();
if (hash[next] -empty()){
ans push_back (next) ;
s.pop();
}else {
8 . push(+hash [next] . begin ()) ;
hash [next] erase(hash [next] begin()) ;
---
## Page 104
11.9前银和与积分国
99/143 -
reverse(ans.begin() , ans.end());
return ans;
11.9前缀和与积分图
一维的前缓和，二维的积分图，都是把每个位置之前的一维线段或二维矩形预先存储，方便
加速计算。如果需要对前缀和或积分图的值做寻址，则要存在哈希表里：如果要对每个位置记录
前缀和或积分图的值，则可以储存到一维或二维数组里，也常常伴随着动态规划。
303.Range Sum Query -Immutable (Easy)
题目描述
设计一个数据结构，使得其能够快速查询给定数组中，任意两个位置间所有数字的和。
输人输出样例
以下是数据结构的调用样例。
vector nums{2,0,3, -5,2, -1};
NumArray num_array = nev NumArray(nums) ;
num_array.sumRange(0 , 2) ;
 // Result = -2+0+3 = 1.
num_array.sunRange(1,5) ; / / Result - 0+35+21 -
题解
对于一维的数组，我们可以使用前缓和来解决此类问题。先建立一个与数组nums长度相
同的新数组psum，表示nums每个位置之前前所有数字的和。psum数组可以通过C++自带的
partial_sum函数建立，也可以直接遍历一遍nums数组，并利用状态转移方程psum[i]=psum[i-
1]+nums[i]完成统计。如果我们需要获得位置i和j之间的数字和，只需计算psum[j+1]-psum[i]
即可。
class NumArray {
vector psum;
public:
NumArray(vector nums) : psum(nums.size() + 1, 0) {
partial_sum(nums.begin() , nums.end() , psum.begin() + 1);
int sumRange(int i, int j) {
return psum[{+1] -  psum[i];
};
---
## Page 105
11.9前银和与积分图
100/143 -
304.RangeSum Query 2D -Immutable (Medium)
题目描述
设计一个数据结构，使得其能够快速查询给定矩阵中，任意两个位置包围的长方形中所有数
字的和。
输人输出样例
以下是数据结构的调用样例。其中sumRegion函数的四个输人分别是第一个点的横、纵坐标，
和第二个点的横、纵坐标。
vector matrix{{3,0,1,4,2},
{5,6,3,2,1},
{1,2,0,1,5},
{1,0,3,0,5}
{4,1,0,1,7},
NumMatrix num_matrix = new NumMatrix(matrix) ;
num_matrix.sumRegion(2,1,4, 3) ;
// Result = 8.
num_matrix.sumRegion(1,1,2,2) ;
// Result - 11.
题解
类似于前缓和，我们可以把这种思想拓展到二维，即积分图（image integral）。我们可以先建
立一个intergral 矩阵，intergral[i]U]表示以位置（0,0)为左上角、位置（,j)为右下角的长方形中
所有数字的和。
如图1所示，我们可以用动态规划来计算integral 矩阵：intergral[i]U]=matrix[i-1][j-1] +
integral[i-1][] + integral[i]U-1] - integral[i-1]U-1]，即当前坐标的数字+上面长方形的数字和 +左
边长方形的数字和－上面长方形和左边长方形重合面积（即左上一格的长方形）中的数字和。
2
3
8
9
11
4
m
15
25
31
2
11
24