# 技术分享：绕过LSASS的SACL审计

## 译文声明
本文是翻译文章，原文来源：tyranidslair.blogspot.co.uk。译文仅供参考，具体内容表达及含义以原文为准。
译者：[牧野之鹰](http://bobao.360.cn/member/contribute?uid=877906634)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 前言
**LSASS**（本地安全权威子系统）是Windows平台上一个用户模式进程，负责本地系统安全策略（如允许哪些用户登录到本地机器、密码策略、授予用户和用户组的特权以及系统安全审计设置）、用户认证，并将安全审计消息发送到事件日志中。著名的密码抓取工具 **Mimikatz** 就是从LSASS进程中获取明文密码的。

## 正文
自Windows NT发布以来，资源访问审计一直是其支持的功能之一。任何审计事件最终都会记录在安全事件日志（Security event log）中。要启用审计功能，管理员需要在本地或组安全策略中配置需要审计的资源类型及其成功与失败的访问。每个被审计的资源都需要添加到系统访问控制列表（SACL）中，该列表决定了哪些类型的访问将被审计。此外，ACL还可以指定将审计限制在特定组中。

最近的一条推特引起了我的兴趣，该推特指出在Windows 10中对LSASS进程配置了一个SACL。推特中附带了一张截图，显示了这一改动是为了检测某些工具（如Mimikatz）的使用，这些工具需要打开LSASS进程。但这种方法是否有效呢？

让我们来分析一下这个LSASS SACL，首先从审计的角度来看看它的意义，然后讨论为什么它不是检测Mimikatz或其他试图访问LSASS内存程序的有效机制。

### 测试环境
为了验证SACL的存在并启用审计检查打开LSASS时是否收到审计事件，我设置了一个测试系统。我更新了我的一个Windows 10 1703虚拟机，并安装了NtObjectManager PowerShell模块。

需要注意的是，在打开进程时必须请求ACCESS_SYSTEM_SECURITY访问权限，否则无法访问SACL。您还必须在访问进程的安全描述符时明确请求SACL。我们可以将SACL视为一个SDDL（Security Descriptor Definition Language）字符串，与推特中的SDDL字符串相匹配。然而，SDDL的表示方法并不能很好地理解SACL ACE（Access Control Entry），因此我会在文中将其扩展。

扩展后的形式表明ACE是我们期望用于审计的ACE，主体用户是Everyone组，对成功和失败事件都启用了审计，并且掩码设置为0x10。

### 审计配置
接下来，我们在系统的本地安全策略中启用了对象审计（例如运行gpedit.msc）。不需要重启即可更改审计配置。重新打开LSASS进程后，我们可以在安全事件日志中看到生成的审计事件。

### 绕过SACL
回顾SACL ACE的意义，内核用来确定是否生成基于SACL的审计日志的过程与使用DACL进行访问检查的过程类似。内核尝试找到具有当前令牌组中的主体的ACE，并且掩码表示已授予打开句柄的一个或多个访问权限。

根据SACL ACE，如果当前令牌具有Everyone组并且句柄被授予访问权限0x10，则会生成审计事件。0x10应用于进程意味着需要PROCESS_VM_READ权限才能访问进程内存。如果你想要阻止进程抓取LSASS的内容，可以确保该进程必须获取访问权限才能调用ReadProcessMemory()。

#### 方法一：移除Everyone组
第一个思路是将Everyone组从令牌中移除，然后再打开目标进程，这样审计规则将不匹配。然而，操作起来非常困难。从令牌中移除组的唯一简单方法是使用CreateRestrictedToken()将其转换为仅拒绝（Deny Only）组。但是内核在审计访问检查时仍将仅拒绝组视为已启用。或者，如果你有SeCreateToken特权，可以创建一个没有该组的令牌，但根据测试，Everyone组是一个特殊的存在，无论令牌中有哪些组，它仍然会进行审计匹配。

#### 方法二：修改SACL
另一种方法是以ACCESS_SYSTEM_SECURITY权限打开进程，然后修改SACL以删除审计条目。当然，更改SACL会生成一个审计事件，该事件ID与对象访问生成的不同，如果你没有捕获那些事件，可能不会注意到它。

#### 方法三：滥用句柄复制
更简单的方法是滥用句柄复制。正如我在P0博客文章中解释的那样，当使用伪当前进程句柄时，DuplicateHandle系统调用有一个有趣的行为，返回值为-1。具体来说，如果你尝试从另一个进程复制伪句柄，就可以获取源进程的完整访问句柄。为了绕过SACL，我们可以在OpenProcess()函数中指定PROCESS_DUP_HANDLE参数来访问LSASS，复制其伪句柄并获取PROCESS_VM_READ权限访问句柄。句柄复制并不会触发访问检查，因此审计功能不会运行。

### 结论
我们不应该依赖配置好的SACL来检测那些尝试访问或利用LSASS内存的恶意代码。SACL太脆弱，绕过它太容易了。使用像Sysmon这样的工具可能会有更好的效果（尽管我没有试过），或者启用Credential Guard应该可以从一开始就阻止恶意代码打开LSASS。如果你的计算机上运行了管理员级代码，那么你将会很不幸。