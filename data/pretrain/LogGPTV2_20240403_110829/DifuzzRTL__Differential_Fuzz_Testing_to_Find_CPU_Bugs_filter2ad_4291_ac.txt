allowing DIFUZZRTL to stress test the design. (e.g., on a
corner implementation case of SW design or data/control hazard
detection or resolution logics in RTL design).
Regarding the space complexity, DIFUZZRTL requires two
pools of variables (i.e., used registers and immediates) per
mutation. Each pool can have variables up to the length of
generated instructions, thus the space complexity is O(N )
where N is the number of instructions. DIFUZZRTL requires
a predefined set of opcodes and register indices but they are
statically determined before the fuzzing.
Interrupt Mutation. After the instruction mutation, the
sequence of interrupts is mutated. As in the instruction case,
mutator randomly appends or deletes interrupts in the given
sequence. Then, the generated interrupt sequence is paired with
the instruction sequence. In the simulation, the paired interrupt
values are injected every execution of the corresponding
instructions.
Population through Instruction Interpretation. After mutat-
ing all instructions and interrupts, DIFUZZRTL populates all re-
maining information, i.e., map of initial address to instructions,
data and interrupts, to SimInput. However, directly placing all
the instructions sequentially in a defined memory region would
Fig. 5: An overall framework of DIFUZZRTL. It runs both
ISA and RTL simulations using the same SimInput, and cross-
checks the both execution results’ after each run. The entire
workflow leverages the register-coverage guiding, so the RTL
simulation measures the register-coverage which is provided
for the mutator.
RTL simulation (§IV-D). This RTL simulation also accepts the
identical SimInput as the ISA simulation. Lastly, we describe
how DIFUZZRTL cross-checks the execution results from ISA
and RTL simulations to finally identify bugs (§IV-E).
Overall Workflow. The overall framework of DIFUZZRTL
is shown in Figure 5. First, mutator randomly generates input
( 1 ), and DIFUZZRTL runs both ISA simulation and RTL
simulation using the input ( 2 , 3 ). After the simulations end,
DIFUZZRTL takes a snapshot of the final memory states and
architectural registers of both designs to cross-check ( 4 ). Thus,
DIFUZZRTL finds a potential bug if execution results are
different. Above four steps make one fuzz iteration, and such
an iteration keeps repeated indefinitely while the input mutation
and selection is guided to increase register-coverage ( 5 ).
A. SimInput Mutation
In order to provide a consistent and identical input to both
SW and RTL designs, DIFUZZRTL defines a new input format
for CPU, SimInput. SimInput thoroughly includes all input
space that CPU takes, ranging from all address and value (both
code and data) to associated interrupt events. Figure 6 shows
a simple example of SimInput.
For a given SimInput, DIFUZZRTL randomly mutates it
with following two phases: 1) DIFUZZRTL enumerates all
instructions in SimInput and performs per-instruction mutation,
which determines opcode and operands of the instruction;
After mutating all instructions, DIFUZZRTL starts interpreting
instruction by instruction, which populates all remaining
information of SimInput (including an address of an instruction,
address and value of data, and a list of interrupts).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1291
SeedcorpusCross-checkMutatormutationInterpretationRegister cov.14Final statera⋮t6⋮CPU regs.Mem. mapaddr:dataFinal statera⋮t6⋮CPU regs.Mem. mapaddr:dataSimInputaddr.:(data, INT.)ISA simulationCPUSW DUTReg.Mem. unit addr:dataINT. ctrl.2RTL simulationMem. unit addr.:dataCPURTL DUTReg.INT. ctrl.35Coverage increased?AbandonseedSimInputend in meaningless executions since the prepared instructions
will not be executed after control flow changes. Thus, the
population is performed through instruction interpretation, as
it necessarily requires to understand how the instruction would
be executed at runtime.
To be more specific, DIFUZZRTL first determines the
address of the first instruction to be a given entry symbol,
and interprets the instruction (i.e., executes the instruction).
During the interpretation, if the instruction attempts to load
the data from addr where addr is not specified in SimInput,
DIFUZZRTL provides a random value v while populating
SimInput with (addr, v). Note that, if the instruction attempts
to store data, DIFUZZRTL would not update SimInput as it
is not part of the input to the CPU. Moreover, an interrupt
event is pushed to the interrupt event list of the current PC.
Each interrupt event can be either None (i.e., the interrupt
signal should not be asserted) or the interrupt signal value (i.e.,
the interrupt signal should be asserted with the specified IRQ
number).
After finishing the interpretation of the first instruction,
the next PC value will be determined (i.e., a target address
if it
is a branch instruction, or PC+4 otherwise). Then
DIFUZZRTL updates SimInput so that the next instruction
(i.e., a next mutated instruction) has the next PC address, and
start interpreting this new instruction.
B. ISA Simulation
DIFUZZRTL’s ISA simulator runs CPU SW design as
instructed by SimInput. To this end, DIFUZZRTL tailors how
CPU SW design takes input from other components including
a memory unit and an interrupt controller. In the case of
the memory unit, DIFUZZRTL populates the initial memory
layout by embedding SimInput in the base memory template.
Then, DIFUZZRTL loads the initial memory layout to the ISA
simulation.
In the case of the interrupt, DIFUZZRTL implements a
pseudo interrupt controller in the ISA simulator, which raises
an interrupt when CPU SW design executes a specific PC. More
specifically, the controller raises the interrupt value which is
paired to the instruction pointed by PC.
The simulation continues until the CPU SW design reaches
a specific address (i.e.
the end of the execution) which
is embedded in the base memory template. The SimInput
population ensures that the control flow always converges to the
end of the execution. The base memory template also contains
instructions to save achitectural register-files to the specific
memory address so that DIFUZZRTL can take the snapshot
of programmer-visible states (i.e. memory and registers) by
reading specified memory addresses. The snapshot is later used
to cross-check with the RTL simulation generated one.
C. RTL Compilation with Register Coverage
As described in §III-A, a mux-coverage technique has two
limitations: 1) it is clock-insensitive, it cannot precisely capture
FSM state transitions; and 2) it imposes huge instrumentation
Algorithm 1 Algorithm of DIFUZZRTL’s control register
identification
Input: G = (V, E), graph of nodes (muxes, wires, registers, ports)
parsed from HDL source code
Output: C, set of all control registers
1: for each m : M ux ∈ V do
CM ← f indSrcRegs(m, ϕ, ϕ)
2:
C ← C ∪ CM
3:
4: return C
5:
6: function FINDSRCREGS(m, S, T)
7:
8:
9:
10:
11:
12:
13:
if m ∈ register then
S ← S ∪ {m}
else if m /∈ {port ∪ T} then
T ← T ∪ {m}
for each (m′, m) ∈ E do
S ← S ∪ f indSrcRegs(m′, ϕ, T )
return S
costs, critically slowing down the runtime performance of
simulation as well as limiting its scalability.
In order to overcome such limitations, DIFUZZRTL pro-
poses a new coverage metric: register-coverage. DIFUZZRTL’s
register-coverage metric has two key features: 1) it is based
on control registers, not based on muxes’ control signals,
making it performance efficient and scalable; and 2) it is clock-
sensitive coverage (i.e., measures the coverage every clock
cycle), so it can precisely capture FSM state transitions. In the
following, we first describe how DIFUZZRTL identifies control
registers in RTL through a static analysis, and then describe
how DIFUZZRTL measures clock-sensitive register-coverage
at runtime.
Identifying Control Registers. DIFUZZRTL’s coverage mea-
surement focuses on monitoring value changes in a control
register—a register where its value is used as any muxes’
control signal. In other words, since value changes of control
registers would lead to the FSM state transition, it can also be
used to explore more FSM states for fuzzing. Since a single
control register is often connected to multiple muxes’ control
signals, the number of control registers is far less than the
number of wires connected to the mux’s control signals.
The problem arising here is that RTL design has a vast
number of registers, and only a small set of registers are control
registers. Hence, DIFUZZRTL performs a static analysis to
identify control registers. In particular, the analysis first builds
a graph representing the connections between all elements (e.g.,
registers, wires, and muxes) in the module. Then, we recursively
perform a backward data-flow analysis for each mux’s control
signal as shown in Algorithm 1. If the backward data-flow
tracing reaches a register, then we conclude such a register is
the control register. This is because this register’s value will
be directly or indirectly (i.e., through a combinational logic)
used to control the mux’s behavior. If the backward tracing
either goes beyond the module boundary or reaches the already
traced point (because a circuit is circular), the analysis stops.
In terms of analyzing the algorithmic complexity,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1292
Fig. 7: A register-coverage instrumentation of DIFUZZRTL,
which adds following three registers: regstate represents the
state of the module, covmap remembers the reached states,
and covsum summarize the number of reached states.
DIFUZZRTL finds all the control registers with O(V 2 · E)
of time complexity where V is the number of elements and
E is the number of connections between them. The space
complexity is O(V · E) for managing the graph representing
the connections between all the elements.
Clock-Sensitive Register Coverage. DIFUZZRTL measures
the register-coverage every clock cycle. Note that this clock-
by-clock coverage measurement is nearly infeasible using mux-
coverage due to its performance and scalability issues. In the
case of DIFUZZRTL, however, such clock-by-clock measure-
ment became feasible with DIFUZZRTL’s register-coverage
technique, which we demonstrate more details in (§VI).
For each RTL module, DIFUZZRTL inserts three new
registers, regstate, covmap, and covsum (shown in Figure 7).
DIFUZZRTL instruments the module such that all the values
in control registers are hashed into regstate. In order to
implement the hash function, we used a series of XOR operations
while each control register’s value is left-shifted with a
deterministic random offset. We note that this hash function
design is inspired by AFL’s edge-coverage metric using XOR
operations [17]. Then the instrumented logic attempts to write
1 to the covmap’s slot, where the slot index is determined
by the value of regstate. This write operation marks that the
corresponding FSM state (i.e., a hash of control register values)
has been explored by the instrumented module.
When this write operation to covmap takes place,
DIFUZZRTL increments covsum only if the value in the
corresponding covmap slot was zero. If it were already 1, it
implies that the RTL module has already explored such an
FSM state in the previous clock cycles. If it were zero, it
implies that it has just explored the new FSM state during the
current clock cycle. Since such covmap and covsum updates are
carried out every clock cycle, DIFUZZRTL’s register-coverage
mechanism is clock-sensitive. Then this covsum is wired out to
the parent RTL module, which sums up covsum values from all
child RTL modules. This tree structure-like covsum summation
is performed until reaching the top level RTL module.
The covsum value in the top level RTL module is used
as a final coverage value throughout DIFUZZRTL’s fuzzing.
It is worth noting that the values in covmap and covsum are
Fig. 8: The workflow of DIFUZZRTL’s clock-sensitive
register-coverage schemes for benign (left) and bug triggering
inputs (right).
maintained during the fuzz iterations, thus the states once
covered are not recognized as new in the later iterations.
Revisiting the Memory Controller Example. Using the
register-coverage, DIFUZZRTL can correctly distinguish states
in the memory controller example, which were not detected by
RFuzz’s mux coverage (previously shown in Figure 4). Figure 8
illustrates how DIFUZZRTL handles the same example case. In
each clock cycle, DIFUZZRTL computes the hash of all control
registers (i.e., stateF and stateS), which updates covmap every
clock cycle. Since the hash of control registers is computed
every clock cycle, DIFUZZRTL can correctly identify the state
difference between benign and bug-triggering cases, thereby
enabling DIFUZZRTL to correctly guide the fuzzing procedure
towards the buggy states.
D. RTL Simulation
DIFUZZRTL’s RTL simulator runs CPU RTL design as
specified by SimInput. While overall simulation mechanism is
similar to how DIFUZZRTL runs ISA simulator, DIFUZZRTL’s
RTL simulation has following two key differences. First, since
CPU RTL design takes input stimuli following the specific
protocol, DIFUZZRTL accordingly generates the input stimuli
after interpreting SimInput. Second, an interrupt processing
mechanism in RTL design is different from SW design for the
following two reasons: 1) RTL design runs at a CPU cycle
level while SW design runs at an instruction level; and 2) RTL
design may defer when to process an asynchronous interrupt
but SW design does not defer.
Stimuli Generation.
In order to handle the first difference,
DIFUZZRTL generates formatted stimuli based on the protocol.
As in the ISA simulation, DIFUZZRTL runs as a pseudo
memory unit in RTL simulation, which is initialized with
the memory layout generated from SimInput. DIFUZZRTL
monitors the data bus interface of RTL design and generates
input stimuli which contains the data mapped to the requested
address.
Interrupt Generation.
In order to generate an interrupt,
DIFUZZRTL designs a pseudo interrupt controller for RTL
design. According to SimInput, DIFUZZRTL monitors executed
PC every cycle so as to assert interrupt signal at a specific PC.
One challenging issue here is unlike in the case of ISA simu-
lation, it is difficult to control when the raised interrupt would
be processed by the RTL design. Specifically, a majority of
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1293
10+1covsumTotal covsum++covmapRegister cov.instrumentationwrite 1Hash4’b01013’b110regstate4’b0011Control registers⋮10102 → 3new?covsum+1→ 1cycle000101011001111Bug0000101010250150124registerCoverage034state0Sstate1SstateF000110001034025state0Sstate1SstateF000010101025BenignBugclk0clk1clk2clk0clk1clk2register covmapregister covmap034state0Sstate1SstateF000110001025state0Sstate1SstateF000010101BenignBugclk0clk1clk2clk0clk1clk2register covmapregister covmap0341256703412567clk0clk1clk2clk0clk1clk2ISAs dictates that processing of an asynchronous interrupt can
be deferred [42, 43], meaning that each microarchitecture can
make their own decision on when to process the asynchronous
interrupt. Thus, even if DIFUZZRTL raises an interrupt when
RTL design’s PC has a specific address value, RTL design
may not process the interrupt when executing that address
value—it may process the interrupt much later. In order to
address this challenge, DIFUZZRTL exhaustively attempts to
find the correct cycle by re-running the RTL simulation while
advancing the interrupt assertion cycle one by one from the
cycle when corresponding PC is committed.
E. Checking Execution Results
Once the running of both ISA and RTL simulation for a
given SimInput ends, DIFUZZRTL starts the cross-checking
process. First, DIFUZZRTL checks if the control-flows of ISA
and RTL simulations are the same. If both simulations correctly
reach the end of execution, DIFUZZRTL reads programmer
visible states of RTL design as we have done for the ISA case,
and then compares it with ISA one’s. If the architectural states
do not match, DIFUZZRTL saves the corresponding SimInput
as a potential bug since both designs should be in the same
state after the same execution.
Note that the design of DIFUZZRTL relies on the ISA
simulator, which implies two functional limitations: 1) The
target CPU RTL design should have the ISA simulator; and 2)
While DIFUZZRTL can detect ISA level bugs, it cannot detect
non-ISA level bugs. The first limitation can be mitigated if
two different RTL designs implement the same ISA. In this
case, DIFUZZRTL can be extended to perform the differential
testing between those two (e.g., Rocket and Boom cores are
two different RTL designs implementing the same ISA). The
second issue can be partially addressed if the designer imple-
ments manual hardware assertions checking micro-architectural
contexts, which can be retrofitted by DIFUZZRTL to detect
non-ISA level bugs.
Then, if new register-coverage is discovered, the correspond-
ing SimInput is saved to the corpus so that it can get another
chance to be fuzzed later, thereby DIFUZZRTL’s fuzzing
procedure is register-coverage guided. DIFUZZRTL repeats
above steps while resetting the design every iteration.
V. IMPLEMENTATION
For DIFUZZRTL, we implemented both RTL compiler
pass for register-coverage instrumentation and CPU fuzzing
framework. DIFUZZRTL is open-source and available at
https://github.com/compsec-snu/difuzz-rtl.
A. RTL compiler pass for register-coverage Instrumentation
We modified two different HDL processing tools: 1)
Pyverilog, for codes written in Verilog [44]; and 2) FIRRTL
compiler, for FIRRTL codes which is the intermediate language
of Chisel [45]. These tools thus automatically find control reg-
isters, instrument register-coverage, then produce instrumented
Verilog code as a final output. Our implementation includes
1.5 k lines of python code (in Pyverilog) and 2 k lines of
Scala code (in FIRRTL compiler).
B. CPU fuzzing framework
CPU fuzzing framework of DIFUZZRTL runs as a testbench