配置完成后，重启mysql服务：
\[root@dbsvr2 \~\]# systemctl restart mysqld.service
通过CHANGE
MASTER语句指定MASTER服务器的IP地址、同步用户名/密码、起始日志文件、偏移位置（参考MASTER上的状态输出）：
mysql\> CHANGE MASTER TO MASTER_HOST=\'192.168.4.10\',
-\> MASTER_USER=\'replicater\',
-\> MASTER_PASSWORD=\'pwd123\',
-\> MASTER_LOG_FILE=\'dbsvr1-bin.000002\', //对应Master的日志文件
-\> MASTER_LOG_POS=334; //对应Master的日志偏移位置
Query OK, 0 rows affected, 2 warnings (0.12 sec)
然后执行START SLAVE（较早版本中为SLAVE START）启动复制：
mysql\> START SLAVE; //启动复制
Query OK, 0 rows affected (0.00 sec)
注意：一旦启用SLAVE复制，当需要修改MASTER信息时，应先执行STOP
SLAVE停止复制，然后重新修改、启动复制。
通过上述连接操作，MASTER服务器的设置信息自动存为master.info文件，以后每次MySQL服务程序时会自动调用并更新，无需重复设置。查看master.info文件的开头部分内容，可验证相关设置：
\[root@dbsvr2 \~\]# ls -lh /var/lib/mysql/master.info
-rw-r\-\-\-\--. 1 mysql mysql 132 4月 23 12:06
/var/lib/mysql/master.info
\[root@dbsvr2 \~\]# head /var/lib/mysql/master.info
25
dbsvr1-bin.000001
154
192.168.4.10
replicater
pwd123
3306
60
0
2）检查Slave服务器的同步状态
通过SHOW SLAVE
STATUS语句可查看从服务器状态，确认其中的IO线程、SQL线程正常运行，才能成功同步：
mysql\> SHOW SLAVE STATUS\\G
Slave_IO_State: Waiting for master to send event
Master_Host: 192.168.4.1
Master_User: replicater
Master_Port: 3306
Connect_Retry: 60
Master_Log_File: dbsvr1-bin.000001
Read_Master_Log_Pos: 154
Relay_Log_File: db2-relay-bin.000003
Relay_Log_Pos: 321
Relay_Master_Log_File: dbsvr1-bin.000001
Slave_IO_Running: Yes //IO线程应该已运行
Slave_SQL_Running: Yes //SQL线程应该已运行
Replicate_Do_DB:
Replicate_Ignore_DB:
Replicate_Do_Table:
Replicate_Ignore_Table:
Replicate_Wild_Do_Table:
Replicate_Wild_Ignore_Table:
Last_Errno: 0
Last_Error:
Skip_Counter: 0
Exec_Master_Log_Pos: 154
Relay_Log_Space: 2490
Until_Condition: None
Until_Log_File:
Until_Log_Pos: 0
Master_SSL_Allowed: No
Master_SSL_CA_File:
Master_SSL_CA_Path:
Master_SSL_Cert:
Master_SSL_Cipher:
Master_SSL_Key:
Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
Last_IO_Errno: 0
Last_IO_Error:
Last_SQL_Errno: 0
Last_SQL_Error:
Replicate_Ignore_Server_Ids:
Master_Server_Id: 10
Master_UUID: 2d4d8a11-27b7-11e7-ae78-52540055c180
Master_Info_File: /var/lib/mysql/master.info
SQL_Delay: 0
SQL_Remaining_Delay: NULL
Slave_SQL_Running_State: Slave has read all relay log; waiting for more
updates
Master_Retry_Count: 86400
Master_Bind:
Last_IO_Error_Timestamp:
Last_SQL_Error_Timestamp:
Master_SSL_Crl:
Master_SSL_Crlpath:
Retrieved_Gtid_Set:
Executed_Gtid_Set:
Auto_Position: 0
Replicate_Rewrite_DB:
Channel_Name:
Master_TLS_Version:
1 row in set (0.00 sec)
若START SLAVE直接报错失败，请检查CHANGE
MASTER相关设置是否有误，纠正后再重试；若IO线程或SQL线程有一个为"No"，则应检查服务器的错误日志，分析并排除故障后重启主从复制。
步骤四：测试主从同步效果
1）在Master上操作数据库、表、表记录
新建newdb库、newtable表，随意插入几条表记录：
mysql\> CREATE DATABASE newdb; //新建库newdb
Query OK, 1 row affected (0.17 sec)
mysql\> USE newdb; //切换到newdb库
Database changed
mysql\> CREATE TABLE newtable(id int(4)); //新建newtable表
Query OK, 0 rows affected (0.46 sec)
mysql\> INSERT INTO newtable VALUES(1234),(5678); //插入2条表记录
Query OK, 2 rows affected (0.24 sec)
Records: 2 Duplicates: 0 Warnings: 0
mysql\> SELECT \* FROM newtable; //确认表数据
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 1234 \|
\| 5678 \|
+\-\-\-\-\--+
2 rows in set (0.00 sec)
2）在Slave上确认自动同步的结果
直接切换到newdb库，并查询newtable表的记录，应该与Master上的一样，这才说明主从同步已经成功生效：
mysql\> USE newdb; //直接切换到newdb库
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
mysql\> SELECT \* FROM newtable; //输出表记录
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 1234 \|
\| 5678 \|
+\-\-\-\-\--+
2 rows in set (0.02 sec)
3）在Master服务器上可查看Slave主机的信息
mysql\> SHOW SLAVE HOSTS;
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Server_id \| Host \| Port \| Master_id \| Slave_UUID \|
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| 2 \| \| 3306 \| 10 \| 512cf7c1-27c4-11e7-8f4b-5254007b030b \|
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
2 案例2：配置主从从同步结构
2.1 问题
具体要求如下：
配置主机192.168.4.51为主数据库服务器
配置主机192.168.4.52为51主机的从库服务器
配置主机192.168.4.53为52主机的从库服务器
客户端连接主数据库服务器51主机创建的数据，连接52和53主机时，也可以访问到库、表、记录。
2.2 方案
使用3台RHEL
7虚拟机，如图-2所示。其中192.168.4.51是MySQL主服务器，负责提供同步源；另一台192.168.4.52作为192.168.4.51从服务器，最后一台192.168.4.53作为192.168.4.52从服务器，通过调取主服务器上的binlog日志，客户端访问主库51
时 创建库表记录 在52 和53 数据库服务器都可以看到
图－2
2.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：环境准备
为了在启用binlog日志及同步之前保持主、从库的一致性，主从同步未配置之前，要保证从库上要有主库上的数据，禁用selinux，关闭防火墙服务，保证物理连接正常
\[root@db51 \~\]# systemctl stop firewalld
\[root@db51 \~\]# setenforce 0
\[root@db51 \~\]# ping -c 2 192.168.4.51
PING 192.168.4.51 (192.168.4.51) 56(84) bytes of data.
64 bytes from 192.168.4.51: icmp_seq=1 ttl=64 time=0.059 ms
64 bytes from 192.168.4.51: icmp_seq=2 ttl=64 time=0.063 ms
\-\-- 192.168.4.51 ping statistics \-\--
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.059/0.061/0.063/0.002 ms
\[root@db51 \~\]# ping -c 2 192.168.4.52
PING 192.168.4.52 (192.168.4.52) 56(84) bytes of data.
64 bytes from 192.168.4.52: icmp_seq=1 ttl=64 time=0.698 ms
64 bytes from 192.168.4.52: icmp_seq=2 ttl=64 time=0.365 ms
\-\-- 192.168.4.52 ping statistics \-\--
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.365/0.531/0.698/0.168 ms
步骤二：配置主服务器192.168.4.51
1）对yaya用户进行授权
\[root@db51 \~\]# mysql -uroot -p123456
mysql\> grant replication slave on \*.\* to yaya@\"%\" identified by
\"123456\";
Query OK, 0 rows affected, 1 warning (0.03 sec)
2）启用binlog日志，修改/etc/my.cnf配置，重新启动MySQL服务程序
指定服务器ID号、允许日志同步：
\[root@db51 \~\]# vim /etc/my.cnf
\[mysqld\]
log_bin=db51 //启用binlog日志，并指定文件名前缀
server_id=51 //指定服务器ID号
binlog-format=\"mixed\" // 指定binlog日志格式
重启mysql服务：
\[root@db51 \~\]# systemctl restart mysqld
确保/var/lib/mysql下面有两个文件：
\[root@db51 \~\]# ls /var/lib/mysql/db51.\*
/var/lib/mysql/db51.000001 /var/lib/mysql/db51.index
查看主服务正在使用的日志信息
查看主服务器状态，记录下当前的日志文件名、偏移的位置（下面SLAVE发起复制时需要用到）：
mysql\> show master status;
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| File \| Position \| Binlog_Do_DB \| Binlog_Ignore_DB \|
Executed_Gtid_Set \|
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| db51.000002 \| 437 \| \| \| \|
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
步骤三：配置从服务器192.168.4.52
1）在服务器192.168.4.52上对user53用户进行授权
\[root@db52 \~\]# mysql -u root -p123456
mysql\> grant replication slave on \*.\* to user53@\"192.168.4.53\"
identified by \"654321\";
Query OK, 0 rows affected, 1 warning (0.00 sec)
2）修改/etc/my.cnf配置，启用binlog日志，指定server_id 和 允许级联复制
\[root@db52 \~\]# vim /etc/my.cnf
\[mysqld\]
server_id=52
log-bin=db52
binlog-format=\"mixed\"
log_slave_updates //允许级联复制
3）配置完成后，重启mysql服务：
\[root@db52 \~\]# systemctl restart mysqld
4）确保/var/lib/mysql下面有两个文件：
\[root@db52 \~\]# ls /var/lib/mysql/db52.\*
/var/lib/mysql/db52.000001 /var/lib/mysql/db52.index
5）查看正在使用的日志信息
\[root@db52 \~\]# mysql -uroot -p123456
mysql\> show master status;
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| File \| Position \| Binlog_Do_DB \| Binlog_Ignore_DB \|
Executed_Gtid_Set \|
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| db52.000001 \| 154 \| \| \| \|
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec) //查看日志文件名、偏移的位置
6）验证主库的授权用户
\[root@db52 \~\]# mysql -h192.168.4.51 -uyaya -p123456
mysql: \[Warning\] Using a password on the command line interface can be
insecure.
Welcome to the MySQL monitor. Commands end with ; or \\g.
Your MySQL connection id is 4
Server version: 5.7.17-log MySQL Community Server (GPL)
Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights
reserved.
Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the current
input statement.
mysql\> //验证成功
7）通过change
master语句指定master服务器的IP地址、同步用户名/密码、起始日志文件、偏移位置（参考master上的状态输出）：
\[root@db52 \~\]# mysql -uroot -p123456
mysql\> change master to
-\> master_host=\"192.168.4.51\",
-\> master_user=\"yaya\",
-\> master_password=\"123456\",
-\> master_log_file=\"db51.000002\",
-\> master_log_pos=437;
Query OK, 0 rows affected, 2 warnings (0.43 sec)
8）启动slave进程
mysql\> start slave;
Query OK, 0 rows affected (0.03 sec)
9）查看进程状态信息，通过show slave
status语句可查看从服务器状态，确认其中的IO线程、SQL线程正常运行，才能成功同步,IO线程和SQL线程必须是Yes
mysql\> show slave status \\G;