= 0x00001000,
// field, method, ie
189
---
## Page 208
Android安全攻防实战
ACC_ANNOTATION
= 0x00002000,
// class, ic (1.5)
ACC_ENUM
= 0x00004000,
// class, field, ic (1.5)
ACC_CONSTRUCTOR
= 0x00010000,
// method (Dalvik only)
ACC_DBCLARED_SYNCHRONIZED -
0x00020000,
/ / method (Dalvik only)
ACC_CLASS_MASK =
(ACC_PUBLIC 1 ACC_FINAL 1 ACC_INTERFACE 1 ACC_ABSTRACT
IACC_SYNTHETIC I ACC_ANINOTATION IACC_ENOMO ,
ACC_INNER_CLASS_MASK =
(ACC_CLASS_MASK I ACC_PRIVATE 1 ACC_PROTECTED I ACC_STATIC) ,
ACC_FIELD_MASK =
(ACC_PUBLIC 1 ACC_PRIVATE I ACC_PROTECTED I ACC_STATIC IACC_FINAL
I ACC_VOLATILE 1 ACC_TRANSIENT 1 ACC_SYNTHETIC I ACC_ENUM) ,
ACC_METHOD_MASK =
(ACC_PUBLIC 1 ACC_PRIVATE 1 ACC_PROTECTED 1 ACC_STATIC IACC_FINAL
I ACC_SYNCHRONIZED I ACC_BRIDGE 1 ACC_VARARGS I ACC_NATIVE
IACC_ABSTRACT 1 ACC_STRICT I ACC_SYNTHETIC 1 ACC_CONSTRUCTOR
|ACC_DECLARED_SYNCHRONIZED) 
superClassIDx字段中存放了Typelds区段中的一个索引，它是用来描述超类的类
型的。SourceFileIDx字段中存放的是Stringlds区段的一个索引，使Dalvik能够找到
这个类的源文件。classDef结构体中另一个重要的字段是classdataOf，指向一个
Dalvik文件内部的偏移量，在这个位置上存放了一些这个类的非常重要的属性，即
代码在哪儿，以及有多少代码。classDataOff字段指向了一个保存这些信息的结构体。
/* expanded form of class_data_item. Note: If a particular item is
* absent (e,g., no static fields), then the corresponding pointer
* is set to NULL. */
struct DexClassData {
DexClassDatalleader header,
DexFleld* staticFields
DexField* instanceFields;
DexMethod* directMethods:
DexMethod* virtualMethods,
DexClassDataHeader 字段中存放的是类的元数据，即 staticFields，instanceFields,
directMethods 以及virtualMethods 的大小。Dalvik使用这一信息来计算一些重要的参
数，比如，确定访间每个方法时所需的内存大小以及获得部分在校验字节码时所必
须的信息。这里一组值得注意的字段类型是DexMethod，其定义如下：
struct DexMethod {
u4 methodIdx; /* index to a method_id_item */
u4 accessFlags
190
---
## Page 209
第6章逆向app
u4 code0ff; /* file offset to a code_item */
) ;
这个结构体中记录了组成类的代码的指针。代码的偏移位置被存放在codeOf
字段中，它和methodld 和 accessFlags 字段一起构成了这个结构体。
我们已经讨论了如何用所有这些信息组装出一个普通的DEX文件了，现在该去
用一些自动化的工具解析它们了。
准备工作
在开始解析之前，你先要确认已经安装好了一组工具，即Android SDK。
怎么做.
现在，你已经了解了DEX文件的格式和结构，可以按照下列步骤使用dexdump
工具解析它了。
Android SDK 中有一个名为dexdump 的工具，它被存放在SDK的
sdk/buildtools/android-[version]/dexdump 路径中。要解析一个 DEX文件，你要做的就
是把它作为参数传递给dexdump。下面是你该怎样做。
[SDK-path] /build-tools/android- [version] /dexdump classes dex
其中，[SDK-path]是你的 SDK 的安装路径，classes.dex 是你要解析的 DEX 文件。
例如，你可以执行下面这条命令，解析我们上一节中用Java代码编译得到的文件：
[SDK-path] /bui.1ld-tools/android- [version] /dexdump Example dex
解析这个example 文件的输出如图6.19所示。
[e]k3178nakan@B14ckwidBw:-/AndrotdSecurity/Reverse
Processing'Exanple.dex'.
dexdunp Exanple.dex
Class#0
Class descriptor
Access flags
：
'LExanple;'
：Ljava/lang/0bject;'
0x0001（PUBLIC)
Static flelds
Interfaces
Instance flelds
DLrect nethods
#0
：（in LExanple;）
nype
cinit>'
access
：8X10001（PUBLIC CONSTRUCTOR)
图 6.19
191
---
## Page 210
Android安全攻防实战
更多信息
Android SDK中还有一个名为 dx的工具，它能以更接近DEX文件格式的方式，
详细解析DEX文件，你这就能看到为什么了，如图6.20所示。
Sdx
and spectfLed
dx
--nun-threads
eh][-.
flles.class|f
nane rust
tvoesat
keava/1ang/bect;
Print thls nessage.
图 6.20
不幸的是，dx只能对.class文件进行操作，把它编译成DEX文件，并执行指定
的操作。所以，如果你有一个可以使用的.class文件，你可以执行下面这条命令来看
下对应的DEX文件的语义结构和内容：
dx -dex -vezbose-dump -dump-to=[output-f1le] txt [1nput-f1le] . class
dx 工具可以在 Android SDK 安装包下的 sdk/build-tools/android-[version]路径下
找到，如图6.21所示。
dx--dex--verbose-dunp--dunp-to=example-dump.txt Example.class
图6.21
在我们这个例子（Example.class）里，输出的结果如下。
000000 : 6465 780a 3033
[magic: "dex\n035\0*
000006: 3500
000008: 3567 e33f
00000c: b7ed dd99 5d35
| checksun
000012: 754f 9c54 0302
Isignature
000018: 62ea 0045 3d3d
192
---
## Page 211
第6章逆向app
00001e: 4e48
000020: 1003 0000
lfile_size:
00000310
000024: 7000 0000
lheader_size:
00000070
000028: 7856 3412
[endi.an_t.ag1
12345678
00002c: 0000 0000
[link_size:
000030: 0000 0000
I1ink_off:
000034: 7002 0000
0
Imap_off:
00000270
0001 :800000
0000
Istring_ids_size: 00000010
00003c: 7000
0000
Istring_ids_off:
00000070
000040: 0800
0000
Itype_ids_size:
00000008
000044: b000 0000
Itype_ids_off:
000000b0
000048: 0300 0000
Iproto_ids_size: C
00000003
00004c: d000 
0000
Iproto_ids_off:
000000d0
000050: 0100 0000
Ifield_ids_size:
00000001
000054: f400
0000
Ifield_ids_off :
000000f4
000058: 0400
0000
Imethod_ids_slze: 00000004
00005c: fc00
0000
[method_ids_off: 000000fc
00T0 :090000
0000
Iclass_defs_size: 00000001
000064: 1c01
0000
Iclass_defs_off : (
000001d4
0000011c
000068: d401
0000
[data_size:
00006c: 3c01 
0000
Idata_off:
0000013c
输出结果中左边栏，是以十六进制形式表示的文件中的偏移量及其内容。右边
栏是该内容的语义以及它会被解析成什么结果。
请注意，围于篇幅所限，其中的部分输出被删掉了。只保留了DexHeader结构
中所有区段的相关信息。
拓展阅读
•The Dex File Format-
RetroDev webpage at http:/www.retrodev.com/android/
dexformat.html
▪The Smali Decompiler
Google Code webpage at https:/code.google.com/p/
smali.
* Deoompiling Android by Godfrey Nolan, Apress.
● The  Practicing Safe  Dex document at htp:/www.strazzere.com/papers/
DexEducation-PracticingSafeDex.pdf.
●The Android Dalvik Kemel Source Code Rcpository webpage at https://github.
com/android/platform_dalvik/tree/master/libdex.
° The Dalvik Executable Format  Android Open Source Project documcnt at
http://source.android.com/devices/tech/dalvik/dex-format.html.
193
---
## Page 212
Android安全攻防实战
6.4解释Dalvik字节码
你可能现在已经知道，Dalvik虚拟机和Java虚拟机在结构和操作上略有不同—它
们的文件和指令格式都是不一样的。Java虚拟机是基于栈的，这也就意味着字节码
（之所以这样命名这一代码格式是因为，每条指令的长度都是1个字节）的工作方式
是用push和pop 指令进栈和出栈。Dalvik字节码的设计类似x86指令集，它也使用
一种类似C风格的调用约定。你马上会看到，每个主调函数（方法）都必须为被调
函数（方法）准备参数，然后才能调用被调函数（方法）。关于dalvik代码格式的设
计和一般说明的详细信息，请参考“拓展阅读”一节中 General Design—Byrecode for
the Dalvik VM, Android Open Source 文。
解释字节码就意味着能够理解指令格式的工作方式。这一节是专门用来向你提
供理解Dalvik字节码所必需的知识和工具的。让我们深入探索字节码的格式，搞清
它的工作原理和它各部分的含义。
理解Dalvik字节码
在分析具体的字节码指令之前，先建立一些概念是很有必要的。我们需要了解
一些关于字节码是如何执行的知识。这有助于你理解Dalvik字节码的属性，并能区
别出一段字节码是什么和在特定的运行时上下文环境中，这段字节码的含义之间的
差别，这是非常有用的技能。
Dalvk虚拟机是逐个执行方法的，因此，把方法相互分隔开来是很有必要的。
例如，当一个方法调用另一个方法时，每个方法都可以被认为是一个独立的Dalvik
虚拟机执行实体。每个方法都有一段被称为“栈帧”（frame）的私有内存空间，其
中保留有足够的空间来容纳方法执行过程中所需的数据。每个栈顿中要留有一个指
向DEX文件的指针。显然，方法需要通过这个指针来引用Typelds和对象的定义。
它还要留有一个指针指向程序计数器（program counter）的实例—这是一个控制执
行流并用于把执行流跳转到其他执行流的寄存器。例如，在执行“if”语句时，方法
需要根据比较的结果，跳转到两段不同的代码片段中的一个里去。栈帧中也要保留
一些被称为寄存器（register）的空间，它们是用来执行加法、乘法、移动数值（这
有时可能意味着向其他方法，比如对象的构造函数，传递参数）之类的操作的。
一个字节码是由一系列的操作码（operator）和操作数（operand）组成的。每个
操作码都会对提供给它的操作数，执行指定类型的操作。有些操作码还会进行一些
复杂的复合操作，比如调用方法。这些操作码的简单性和原子属性是它们如此健壮，
易于阅读和理解，并支持Java这种复杂的高级语言的原因。
194