    [ myexts ]
    basicConstraints=critical,CA:FALSE
    keyUsage=digitalSignature
    subjectKeyIdentifier=hash
    authorityKeyIdentifier=keyid
    EOF
    ```
2.  如以下示例所示，创建 X.509 公钥和私钥对：
    ``` literallayout
    # openssl req -x509 -new -nodes -utf8 -sha256 -days 36500
    -batch -config configuration_file.config -outform DER \
    -out my_signing_key_pub.der \
    -keyout my_signing_key.priv
    ```
    公钥将写入 `my_signing_key_pub.der`{.literal} 文件，私钥将写入
    `my_signing_key.priv`{.literal} 文件中。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    在 RHEL 8
    中，密钥对的有效性日期非常重要。这个密钥没有过期，但必须在其签名密钥的有效周期内对内核模块进行签名。例如：一个只在
    2019 年有效的密钥可用来验证在 2019
    年中使用该密钥签名的内核模块。但是，用户无法使用这个密钥在 2020
    年签注一个内核模块。
    :::
3.  另外，您还可以查看公钥的有效性日期，如下例所示：
    ``` literallayout
    # openssl x509 -inform der -text -noout -in 
    Validity
                Not Before: Feb 14 16:34:37 2019 GMT
                Not After : Feb 11 16:34:37 2029 GMT
    ```
4.  在您要验证并载入内核模块的所有系统中注册您的公钥。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
应用强大的安全措施和访问策略来保护您的私钥内容。对于一个恶意的用户，可以使用这个密钥破坏所有由对应公钥验证的系统。
:::
::: itemizedlist
**其它资源**
-   `openssl(1)`{.literal} 手册页
-   [*[[RHEL
    安全指南](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/security_guide/index#sec-Using_OpenSSL){.link}]{.citetitle}*]{.emphasis}
-   [通过在 MOK
    列表中添加公钥在目标系统中注册公钥](#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#enrolling-public-key-on-target-system-by-adding-the-public-key-to-the-mok-list_signing-kernel-modules-for-secure-boot "通过在 MOK 列表中添加公钥在目标系统中注册公钥"){.link}
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#example-output-of-system-keyrings_signing-kernel-modules-for-secure-boot}系统密钥环输出示例 {.title}
:::
您可以使用 `keyctl`{.literal} 实用程序显示系统密钥环中的密钥信息。
以下是启用了 UEFI 安全引导的 RHEL 8 系统中的
`.builtin_trusted_keys`{.literal}、`.platform`{.literal} 和
`.blacklist`{.literal} 密钥环的简化示例输出。
``` literallayout
# keyctl list %:.builtin_trusted_keys
6 keys in keyring:
...asymmetric: Red Hat Enterprise Linux Driver Update Program (key 3): bf57f3e87...
...asymmetric: Red Hat Secure Boot (CA key 1): 4016841644ce3a810408050766e8f8a29...
...asymmetric: Microsoft Corporation UEFI CA 2011: 13adbf4309bd82709c8cd54f316ed...
...asymmetric: Microsoft Windows Production PCA 2011: a92902398e16c49778cd90f99e...
...asymmetric: Red Hat Enterprise Linux kernel signing key: 4249689eefc77e95880b...
...asymmetric: Red Hat Enterprise Linux kpatch signing key: 4d38fd864ebe18c5f0b7...
# keyctl list %:.platform
4 keys in keyring:
...asymmetric: VMware, Inc.: 4ad8da0472073...
...asymmetric: Red Hat Secure Boot CA 5: cc6fafe72...
...asymmetric: Microsoft Windows Production PCA 2011: a929f298e1...
...asymmetric: Microsoft Corporation UEFI CA 2011: 13adbf4e0bd82...
# keyctl list %:.blacklist
4 keys in keyring:
...blacklist: bin:f5ff83a...
...blacklist: bin:0dfdbec...
...blacklist: bin:38f1d22...
...blacklist: bin:51f831f...
```
上述 `.builtin_trusted_keys`{.literal} 密钥环显示从 UEFI
安全引导\"db\"密钥和`红帽安全引导（CA 密钥 1）`{.literal}中添加了两个密钥，这些密钥嵌入在
`shim.efi`{.literal} 引导装载程序中。
以下示例显示了内核控制台的输出结果。消息标识带有 UEFI
安全引导相关源的密钥。这包括 UEFI 安全引导 db、内嵌的 shim 和 MOK 列表。
``` literallayout
# dmesg | grep 'EFI: Loaded cert'
[5.160660] EFI: Loaded cert 'Microsoft Windows Production PCA 2011: a9290239...
[5.160674] EFI: Loaded cert 'Microsoft Corporation UEFI CA 2011: 13adbf4309b...
[5.165794] EFI: Loaded cert 'Red Hat Secure Boot (CA key 1): 4016841644ce3a8...
```
::: itemizedlist
**其它资源**
-   `keyctl(1)`{.literal}、`dmesg(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#enrolling-public-key-on-target-system-by-adding-the-public-key-to-the-mok-list_signing-kernel-modules-for-secure-boot}通过在 MOK 列表中添加公钥在目标系统中注册公钥 {.title}
:::
当 RHEL 8 在启用了安全引导机制的基于 UEFI
的系统中引导时，内核会将系统密钥环 (`.builtin_trusted_keys`{.literal})
加载到安全引导 db 密钥数据库中的所有公钥中。同时，内核排除 dbx
数据库中已撤销的密钥。以下小节描述了在目标系统上导入公钥的不同方式，以便系统密钥环
(`.builtin_trusted_keys`{.literal}) 能够使用公钥来验证内核模块。
Machine Owner Key (MOK) 功能可以用来扩展 UEFI 安全引导密钥数据库。当
RHEL 8 在启用了安全引导机制的启用了安全引导的系统中引导时，MOK
列表中的密钥除密钥数据库中的密钥外也会添加到系统密钥环
(`.builtin_trusted_keys`{.literal}) 中。和安全引导数据库密钥相似，MOK
列表密钥会被安全地永久存储。但它们是两个独立的工具。MOK 工具由
`shim.efi`{.literal}、`MokManager.efi`{.literal}、`grubx64.efi`{.literal}
和 `mokutil`{.literal} 实用程序支持。
注册 MOK 密钥需要用户在每个目标系统中在 UEFI 系统控制台上手动互动。MOK
工具为测试新生成的密钥对以及与其签注的内核模块提供了方便的方法。
::: orderedlist
**流程**
1.  请在 MOK 列表中添加您的公钥：
    ``` literallayout
    # mokutil --import my_signing_key_pub.der
    ```
    会要求您输入并确认此 MOK 注册请求的密码。
2.  重启机器。
    待处理的 MOK 密钥注册请求将由 `shim.efi`{.literal} 通知，它将启动
    `MokManager.efi`{.literal}，以便您从 UEFI 控制台完成注册。
3.  输入您之前与此请求关联的密码并确认注册。
    您的公钥已添加到 MOK 列表中，这是永久的。
:::
密钥位于 MOK 列表中后，它会在启用 UEFI
安全引导时自动传播到此列表中的系统密钥环，并在随后引导时自动传播到系统密钥环。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
为了便于对系统中的内核模块进行身份验证，请您的系统供应商将公钥合并到其工厂固件镜像中的
UEFI 安全引导密钥数据库中。
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#signing-kernel-modules-with-the-private-key_signing-kernel-modules-for-secure-boot}使用私钥签名内核模块 {.title}
:::
如果启用了 UEFI
安全引导机制，用户可以通过加载签名的内核模块来获取对其系统的增强安全优势。下面的部分描述了如何使用私钥为内核模块签名。
::: itemizedlist
**先决条件**
-   您生成了公钥和私钥对，并且知道公钥的有效性日期。详情请参阅[生成公钥和私钥对](#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#generating-a-public-and-private-key-pair_signing-kernel-modules-for-secure-boot "生成公钥和私钥对"){.link}。
-   在目标系统中注册了您的公钥。详情请查看[在 MOK
    列表中添加公钥在目标系统中注册公钥](#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#enrolling-public-key-on-target-system-by-adding-the-public-key-to-the-mok-list_signing-kernel-modules-for-secure-boot "通过在 MOK 列表中添加公钥在目标系统中注册公钥"){.link}。
-   您有一个可以签注的 ELF 镜像格式的内核模块。
:::
::: itemizedlist
**流程**
-   使用参数执行 `sign-file`{.literal} 工具，如下例所示：
    ``` literallayout
    # /usr/src/kernels/$(uname -r)/scripts/sign-file sha256 my_signing_key.priv my_signing_key_pub.der my_module.ko
    ```
    `sign-file`{.literal} 计算并直接将签名附加到内核模块文件中的 ELF
    镜像中。`modinfo`{.literal}
    实用程序可用于显示有关内核模块签名的信息（如果存在）。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    附加的签名不包含在 ELF 镜像部分，不是 ELF
    镜像的一个正式部分。因此，`readelf`{.literal}
    等实用程序将无法在内核模块中显示签名。
    :::
    您的内核模块现在可以被加载。请注意，您签名的内核模块也可以在禁用
    UEFI 安全引导的系统或非 UEFI
    系统中加载。这意味着您不需要同时提供内核模块的签名和未签名版本。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    在 RHEL 8
    中，密钥对的有效性日期非常重要。这个密钥没有过期，但必须在其签名密钥的有效周期内对内核模块进行签名。`sign-file`{.literal}
    实用程序不会提醒您这样做。例如：一个只在 2019
    年有效的密钥可用来验证在 2019
    年中使用该密钥签名的内核模块。但是，用户无法使用这个密钥在 2020
    年签注一个内核模块。
    :::
:::
::: itemizedlist
**其它资源**
-   [显示内核模块信息](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#displaying-information-about-kernel-modules_managing-kernel-modules "显示内核模块信息"){.link}
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#loading-signed-kernel-modules_signing-kernel-modules-for-secure-boot}载入经过签名的内核模块 {.title}
:::
当您的公钥注册在系统密钥环 (`.builtin_trusted_keys`{.literal}) 和 MOK
列表中后，在使用私钥签署相应内核模块后，您可以使用 `modprobe`{.literal}
命令最终加载签名的内核模块，如下一节所述。
::: itemizedlist
**先决条件**
-   您已生成了公钥和私钥对。详情请参阅[生成公钥和私钥对](#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#generating-a-public-and-private-key-pair_signing-kernel-modules-for-secure-boot "生成公钥和私钥对"){.link}。
-   您已经在系统密钥环中注册了公钥。详情请查看[在 MOK
    列表中添加公钥在目标系统中注册公钥](#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#enrolling-public-key-on-target-system-by-adding-the-public-key-to-the-mok-list_signing-kernel-modules-for-secure-boot "通过在 MOK 列表中添加公钥在目标系统中注册公钥"){.link}。
-   您用私钥签名了一个内核模块。详情请查看[使用私钥签名内核模块](#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#signing-kernel-modules-with-the-private-key_signing-kernel-modules-for-secure-boot "使用私钥签名内核模块"){.link}。
:::
::: orderedlist
**流程**
1.  验证您的公钥是否在系统密钥环中：
    ``` literallayout
    # keyctl list %:.builtin_trusted_keys
    ```
2.  将内核模块复制到您想要的内核的 `/extra/`{.literal} 目录中：
    ``` literallayout
    # cp my_module.ko /lib/modules/$(uname -r)/extra/
    ```
3.  更新模块依赖项列表：
    ``` literallayout
    # depmod -a
    ```
4.  载入内核模块并确认它已被成功载入：
    ``` literallayout
    # modprobe -v my_module
    # lsmod | grep my_module
    ```
    ::: orderedlist
    1.  另外，要在引导时载入模块，将其添加到
        `/etc/modules-loaded.d/my_module.conf`{.literal} 文件中：
        ``` literallayout
        # echo "my_module" > /etc/modules-load.d/my_module.conf
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   [管理内核模块](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html "第 3 章 管理内核模块"){.link}
:::
:::
:::
[]{#configuring-kernel-command-line-parameters_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#configuring-kernel-command-line-parameters_managing-monitoring-and-updating-the-kernel.html#configuring-kernel-command-line-parameters_managing-monitoring-and-updating-the-kernel}第 5 章 配置内核命令行参数 {.title}
:::
内核命令行参数是用来在引导时更改 Red Hat Enterprise Linux
内核某些方面行为的方法。作为系统管理员，您可以完全控制引导时要设置的选项。某些内核行为只能在引导时设置，因此了解如何进行此更改是关键管理技能。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
通过修改内核命令行参数来更改系统行为可能会对您的系统产生负面影响。因此，您应该在生产环境中部署更改前测试它们。如需进一步帮助，请联络红帽支持团队。
:::
::: section
::: titlepage
# []{#configuring-kernel-command-line-parameters_managing-monitoring-and-updating-the-kernel.html#understanding-kernel-command-line-parameters_configuring-kernel-command-line-parameters}了解内核命令行参数 {.title}