---
title: Projects
date: 20210206
author: Lyz
---
There is an ever growing pool of ideas where I want to invest my time. Sadly
time is a finite currency, and even though I am lucky enough to be able to put
my focus on maximizing it, it's never enough.
I understand projects as a mental tool that groups ideas, processes and tools to
achieve a specific goal. Following the [digital garden](digital_garden.md)
metaphor, projects are plants in different phases of development where I've
spent a different amount of effort.
The development phases are:
* [*Seeds*](#seeds): Are raw, basic ideas of projects that may once be.
* [*Seedlings*](#seedlings): Are projects that don't yet have their first stable version, but
    the drafts of the [ADR](adr.md) and some code is already written.
* [*Growing*](#growing-plants): Projects that have a stable release and are
    under active development.
* [*Dormant*](#dormant-plants): Projects whose growth has temporally stopped.
    I still believe they are useful and even though I don't want to work on them
    at the moment, I see myself doing it in the future.
    I still maintain them by answering to issues, reviewing pull requests,
    keeping the continuous integration pipelines alive and developing fixes to
    important issues.
* [*Dying*](#dying-plants): Projects that I know are going to be deprecated
    soon, and I'm looking for alternatives.
* *Dead*: Project no longer used.
# Growing plants
## [Blue book](https://lyz-code.github.io/blue-book/)
What you're reading right now. I'm storing most of the new knowledge I learn
every day. At the same time I'm migrating the notes of the previous
version of this digital garden which consists on 7422 articles, almost 50
million lines.
## [Repository ORM](https://lyz-code.github.io/repository-orm)
I'm creating a [Python library](https://github.com/lyz-code/repository-orm)
to make it easier to use the [repository pattern](repository_pattern.md) in new
projects.
I monthly spin up new ideas for programs, and managing the storage of the
information is cumbersome and repeating. My idea is to refactor that common
codebase into a generic library that anyone can use.
## [Pynbox](https://lyz-code.github.io/pynbox)
I wanted a system to improve the management of ideas, tasks,
references, suggestions when I'm not in front of the computer. Right now I've
got Markor for Android to register these quicknotes, but the reality is that
I don't act upon them, so it's just a log of tasks that never get done, and
ideas, references and suggestions that aren't registered in my knowledge or
media management systems.
On the computer there are also cases of tasks that are not worth registering in
the task management system, or ideas that I get at a moment but don't have time
to process at the moment.
The idea then is to automatically sync the Android quicknote with syncthing,
and have a special format for the file that allows `pynbox`
to extract
the elements from that file to the "inbox system". For example:
```
t. buy groceries
tv. IT crowd
i. Improve the inbox management
I want a system to improve ...
```
Gets introduced in the "inbox system" as a task, a TV suggestion and an idea.
# Dormant Plants
## [mkdocs-newsletter](https://lyz-code.github.io/mkdocs-newsletter/)
MkDocs plugin to show the changes of documentation repositories in a user
friendly format, at the same time that it's easy for the authors to maintain.
It creates daily, weekly, monthly and yearly newsletter articles with the
changes of each period. Those pages, stored under the `Newsletters` section, are
filled with the changes extracted from the commit messages of the git history.
The changes are grouped by categories, subcategories and then by file using the
order of the site's navigation structure. [RSS feeds](rss.md) are also created for each
newsletter type, so it's easy for people to keep updated with the evolution of
the site.
I use it for this site
[newsletters](https://lyz-code.github.io/blue-book/newsletter/0_newsletter_index/).
## [Autoimport](https://lyz-code.github.io/autoimport/)
Throughout the development of a python program you continuously need to manage
the python import statements either because you need one new object or because
you no longer need it. This means that you need to stop writing whatever you
were writing, go to the top of the file, create or remove the import statement
and then resume coding.
This workflow break is annoying and almost always unnecessary.
[autoimport](https://lyz-code.github.io/autoimport/) solves this problem if you
execute it whenever you have an import error, for example by configuring your
editor to run it when saving the file.
The reasons why it is dormant are:
* The current features cover most of needs. Even though I'd like to be able to
    [import broken package
    objects](https://github.com/lyz-code/autoimport/issues/74), and that it is
    intelligent enough to use [relative
    imports](https://github.com/lyz-code/autoimport/issues/75).
* My hype is elsewhere.
## [Clinv](https://github.com/lyz-code/clinv)
As part of my [DevSecOps](https://dzone.com/articles/shifting-left-devsecops)
work, I need to have an updated inventory of cloud assets organized under a risk
management framework.
As you can see in [how do you document your
infrastructure?](https://www.reddit.com/r/aws/comments/dxmkci/how_do_you_document_your_infrastructure/),
there is still a void on how to maintain an inventory of dynamic resources with
a DevSecOps point of view.
* Manage a dynamic inventory of risk management resources (Projects, Services,
  Information, People) and infrastructure resources (EC2, RDS, S3, Route53, IAM
  users, IAM groupsâ€¦).
* Add risk management metadata to your AWS resources.
* Monitor if there are resources that are not inside your inventory.
* Perform regular expression searches on all your resources.
* Get all your resources information.
* Works from the command line.
So I started building [clinv](https://github.com/lyz-code/clinv).
## [yamlfix](https://lyz-code.github.io/yamlfix)
A simple opinionated yaml formatter that keeps your comments.
The reasons why it is dormant are:
* The current features cover most of needs.
* My hype is elsewhere.
## [bruty](https://github.com/lyz-code/bruty)
Python program to bruteforce dynamic web applications with Selenium.
## [Cookiecutter Python template](https://lyz-code.github.io/cookiecutter-python-project/)
Following the same reasoning as the previous section, I've spent a lot of time
investigating quality measures for python projects, such as project structure, ci
testing, ci building, dependency management, beautiful docs or pre-commits. With
the [cookiecutter
template](https://github.com/lyz-code/cookiecutter-python-project), it is easy
to create a new project with the best quality measures with zero effort.
Furthermore, with [cruft](cruft.md) I can keep all the projects generated with
the template updated with the best practices.
## Mediarss
I've always wanted to own the music I listen, because I don't want to give my
data to the companies host the streaming services, nor I trust that they'll
keep on giving the service.
So I started building some small bash scrappers (I wasn't yet introduced to
[Python](https://en.wikipedia.org/wiki/Python_%28programming_language%29)) to
get the media. That's when I learned to hate the web developers for their
constant changes and to love the API.
Then I discovered [youtube-dl](https://github.com/ytdl-org/youtube-dl), a Python
command-line program to download video or music from streaming sites. But
I still laked the ability to stay updated with the artist channels.
So mediarss was born. A youtube-dl wrapper to periodically download new
content.
This way, instead of using Youtube, Soundcloud or Bandcamp subscriptions, I've got
a [YAML](https://en.wikipedia.org/wiki/YAML) with all the links that I want to
monitor.
## Playlist_generator
When my music library started growing due to [mediarss](#mediarss), I wanted
to generate playlists filtering my content by:
* Rating score fetched with [mep](#mep).
* First time/last listened.
* Never listened songs.
The playlists I usually generate with these filters are:
* Random unheard songs.
* Songs discovered last month/year with a rating score greater than X.
* Songs that I haven't heard since 20XX  with a rating score greater than
  X (this one gave me pleasant surprises ^^).
## Media indexation
I've got a music collection of more than 136362 songs, belonging to
[mediarss](#mediarss) downloads, bought CDs rips and friend library sharing. It
is more less organized in a directory tree by genre, but I lack any library
management features. I've got a lot of duplicates, incoherent naming scheme, no
way of filtering or intelligent playlist generation.
[playlist_generator](#playlist_generator) helped me with the last point, based
on the metadata gathered with [mep](#mep), but it's still not enough.
So I'm in my way of migrate all the library to
[beets](http://beets.readthedocs.io/), and then I'll deprecate [mep](#mep) in
favor to a [mpd](https://en.wikipedia.org/wiki/Music_Player_Daemon) client that
allows me to keep on saving the same metadata.
Once it's implemented, I'll migrate all the metadata to the new system.
## Home Stock inventory
I try to follow the idea of emptying my mind as much as possible, so I'm able to
spend my CPU time wisely.
Keeping track of what do you have at home or what needs to be bought is an
effort that should be avoided.
So I've integrated [Grocy](https://grocy.info/) in my life.
## [Drode](https://lyz-code.github.io/drode/)
[drode](https://lyz-code.github.io/drode/) is a wrapper over the Drone and AWS
APIs to make deployments more user friendly.
It assumes that the projects are configured to continuous deliver all master
commits to staging. Then those commits can be promoted to production or to
staging for upgrades and rollbacks.
It has the following features:
* Prevent failed jobs to be promoted to production.
* Promote jobs with less arguments than the drone command line.
* Wait for a drone build to end, then raise the terminal bell.
## [Create an ordered list of digital gardens](https://github.com/lyz-code/best-of-digital-gardens)
A [best-of-lists](https://github.com/best-of-lists/best-of) compilation of
awesome list of digital gardens.
# Seedlings
## [Learn about antifascism](antifascism.md)
I'm summing up the key insights of
[Mark's](https://www.mhpbooks.com/books/antifa/) and
[Pol's](https://www.txalaparta.eus/es/libros/todo-el-mundo-puede-ser-antifa)
awesome books in [this article](antifascism.md)
## [Automate email management](email_management.md)
Most of the emails I receive require repetitive actions that can be automated,
in the [Email management](email_management.md) article I'm gathering the steps
to setup such an infrastructure.
## [Learn about sleep](sleep.md)
I'm reading Matthew Walker's awesome book [Why we
sleep](https://www.goodreads.com/book/show/34466963-why-we-sleep) and summing up
the key insights in [this article](sleep.md)
## [Life](https://lyz-code.github.io/life/)
Life is a real time sandbox role game where you play as yourself surviving in today's
world.
## Self hosted map
I love maps, as well as traveling and hiking. This project aims to create a web
interface that let's me interact with the data gathered throughout my life. I'd
like to:
* Browse the waypoints and routes that I've done.
* Create routes and export the gpx.
* Be able to search through the data
* Plan trips
All the data must live in my servers.
I first started with [umap](https://umap.openstreetmap.fr/en/) but it stopped
being responsive when you add many points, and it's not easy to self-host. Then
I went with [folium](folium.md), but it lacked the interactively I wanted, so
I ended up using [dash leaflet](dash_leaflet.md).
The first phase of the project is to be able to import and browse the existing
data. A second phase will be to add the [routing
functionality](https://wiki.openstreetmap.org/wiki/Routing/online_routers),
maybe with [Leaflet Routing
Machine](http://www.liedman.net/leaflet-routing-machine/#getting-started), which
will probably need a [self-hosted OSRM
server](https://github.com/Project-OSRM/osrm-backend/wiki/Running-OSRM).
Meanwhile I'm using the [brouter-web](http://brouter.de/brouter-web/) that uses
[brouter](https://github.com/abrensch/brouter) behind the scenes.
# Seeds
This is a gathering of tools, ideas or services that I'd like to enjoy.
If you have any lead, as smallest as it may be on how to fulfill them, please
[contact me](contact.md).
## Beancount forecast
I'd like to see a forecast of the evolution of my accounts given an amount of
time. Maybe by doing seasonality analysis and forecast in time series as stated
[here](https://medium.com/swlh/seasonality-analysis-and-forecast-in-time-series-b8fbba820327)
and
[here](https://towardsdatascience.com/finding-seasonal-trends-in-time-series-data-with-python-ce10c37aa861).
It will also be interesting to see for a given account the evolution of the
subaccounts.
## Life warnings
I've always tackled the pursuit of the peace of mind by improving in task
management, for example trying to predict when I have to do something in order
to avoid a nuisance. Maybe it's more interesting to monitor and visibilice the
warnings that are affecting you.
Once a warning is active you need to keep track of its evolve throughout time
maybe with a simple [questionary](questionary.md). This track could be both
quantitative (bother level from 1 to 10), and qualitative (a description of the
state and evolution).
The user will have a view (probably command line interface) of the active
warnings, their priority, bother level, bother level change, last update, number
of days it's been active, predicted end. Another interesting view can be the
evolution of solved warnings and new warnings.
Warnings are not completely solved, as they can happen again. That way we can
see how often do they reactivate, and maybe we can get an estimate of the next
occurrence. It can also be interesting to see how long did the last warnings
last and the effectiveness of the different actions taken to solve it.
We'll need an easy way to filter and merge warnings so as not to repeat similar