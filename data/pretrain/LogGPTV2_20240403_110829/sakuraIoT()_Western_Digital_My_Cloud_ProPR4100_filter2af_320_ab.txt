    ./firmware/module/crfs/etc/smtp.conf
    ./firmware/module/crfs/etc/nas/wdnotifier.conf
    ./firmware/module/crfs/etc/nas/notify.d/wdmcserver.conf
    ./firmware/module/crfs/etc/nas/notify.d/wddispatcher.conf
    ./firmware/module/crfs/etc/apache2/sites-available/wdnas-rest-api.conf
    ./firmware/module/crfs/etc/apache2/sites-available/wdnas-ui.conf
    ./firmware/module/crfs/etc/apache2/sites-available/wdnas-rest-api-trusted.conf
    ./firmware/module/crfs/etc/apache2/conf.d/orionversion.conf
    ./firmware/module/crfs/etc/rsyslog.d/wdlog.conf
    ./firmware/module/crfs/etc/rsyslog.d/wddispatcher.conf
    ./firmware/module/crfs/default/syslog.conf
    ./firmware/module/crfs/default/mt-daapd.conf
    ./firmware/module/crfs/default/wdlog.conf
    ./firmware/module/crfs/default/dhcp6c.conf
    ./firmware/module/crfs/default/udhcpd.conf
    ./firmware/module/crfs/default/resolv.conf
    ./firmware/module/crfs/default/routeap.conf
    ./firmware/module/crfs/default/s3.conf
    ./firmware/module/crfs/default/snmpd.conf
    ./firmware/module/crfs/default/gogoc.conf
    ./firmware/module/crfs/apache2/sites-available/wdnas-rest-api.conf
    ./firmware/module/crfs/apache2/sites-available/wdnas-ui.conf
    ./firmware/module/crfs/apache2/conf.d/orionversion.conf
    ./firmware/module/crfs/files/ups/upsd.conf
    ./firmware/module/crfs/files/ups/upssched.conf
    ./firmware/module/crfs/files/ups/upsmon.conf
    ./firmware/module/crfs/files/ups/ups.conf
    ./firmware/module/crfs/files/syslog_rotate.conf
    ./firmware/module/crfs/files/mke2fs.conf
    ./firmware/module/crfs/files/syslog_dai
  * `alias.conf`  
        ScriptAlias /cgi-bin/ /var/www/cgi-bin/
这句配置的含义是把web请求的url中，如果它访问的目录是`/cgi-bin/`，就重定向到`/var/www/cgi-bin/`目录下。
  * `rewrite.conf`  
对于`rewrite.conf`，主要读懂RewriteCond和RewriteRule两个关键字的含义就行了。
RewriteCond起到的是过滤作用  
以`RewriteCond %{REMOTE_ADDR}
!^127\.0\.0\.1$`这句为例，如果`%{REMOTE_ADDR}`和`!^127\.0\.0\.1$`正则匹配，即`REMOTE_ADDR`不是来自localhost的话，就使用紧邻着的下一句RewriteRule来重定向web请求。  
以`RewriteRule ^(\w*).cgi$ /web/cgi_api.php?cgi_name=$1&%{QUERY_STRING}
[L]`这句为例，就是把所有访问`xx.cgi`文件的请求，都重定向到`/web/cgi_api.php?cgi_name=xxx`，即用`cgi_api.php`来分发请求，如果鉴权不通过，就不能访问该cgi文件。
这里的鉴权主要指的就是攻击者是否有普通用户登录的权限，也就是一般说的pre-auth和after-auth了。
我们主要关注的都是pre-auth的rce，所以从这个配置文件和从`cgi_api.php`里的逻辑可以看出，认证前能够访问的cgi文件只有`webpipe.cgi`和`login_mgr.cgi`，而前者内部也有鉴权，所以主要关注`login_mgr.cgi`
至此为止我们就分析出了攻击者易达的攻击面，如果要深挖的话还需要再读一下其他的配置文件，和`ps -ef`看看还开了哪些进程，能否通过httpd路由到。
        RewriteEngine on
        RewriteCond expr "%{REQUEST_URI} != '/xml/english.xml'"
        RewriteCond expr "%{REQUEST_URI} != '/xml/lang.xml'"
        RewriteRule ^/xml/(.*) /cgi-bin/webpipe.cgi
        #RewriteRule /api/[0-9.]+/rest/(.*)\?(.*)$ /htdocs/api/rest/index.php?$2
        #RewriteRule /api/[0-9.]+/rest/(.*)  /htdocs/api/rest/index.php
        RewriteCond %{HTTP_HOST} ^(.*)\.(:\d+)?$
        RewriteRule ^(.*)$ http://%1%2$1 [L,R=301]
            RewriteCond %{REMOTE_ADDR} !^127\.0\.0\.1$
            RewriteCond $1 !^abFiles$
            RewriteRule ^(\w*).cgi$ /web/cgi_api.php?cgi_name=$1&%{QUERY_STRING} [L]
## 漏洞分析
首先抓包看一下正常的请求包是什么样的，可以看出用户输入的密码其实是被base64之后再发往server端处理的
    POST /cgi-bin/login_mgr.cgi HTTP/1.1
    ...
    Cookie: PHPSESSID=058d44781ddc0be98f15233c8853476f; local_login=1
    cmd=wd_login&username=admin&pwd=YWRtaW4%3D&port=
入口函数在cgiMain，该函数根据post请求里的cmd参数来选择使用哪个函数，这里我们主要看的就是`wd_login`函数
### cgiMain
    __int64 cgiMain()
    {
      bool v0; // zf
      const char *v1; // rdi
      signed __int64 v2; // rcx
      char *v3; // rsi
      const char *v4; // rdi
      signed __int64 v5; // rcx
      char *v6; // rsi
      bool v7; // zf
      const char *v8; // rdi
      signed __int64 v9; // rcx
      char *v10; // rsi
      const char *v11; // rdi
      signed __int64 v12; // rcx
      char *v13; // rsi
      const char *v14; // rdi
      signed __int64 v15; // rcx
      char *v16; // rsi
      __int64 result; // rax
      char v18; // [rsp+0h] [rbp-28h]
      cgiFormString("cmd", &v18, 32LL);
      v0 = memcmp(&v18, "wd_login", 9uLL) == 0;
      if ( v0 )
      {
        wd_login();
        result = 0LL;
      }
      else
      {
        v1 = "ui_check_wto";
        v2 = 13LL;
        v3 = &v18;
        do
        {
          if ( !v2 )
            break;
          v0 = *v3++ == *v1++;
          --v2;
### wd_login
在我简单的处理了一下符号之后的伪代码如下。
    int wd_login()
    {
      char *pos_dbl_slash; // r14
      char *v1; // rsi
      char *v2; // rdx
      unsigned int login_successful; // er15
      FILE *v4; // rax
      FILE *v5; // r14
      int v6; // ecx
      unsigned int v7; // eax
      bool v8; // zf
      __int64 v9; // r14
      char *v10; // rsi
      FILE *v11; // rax
      FILE *v12; // r13
      __int64 v13; // r12
      __int64 v14; // rdx
      signed int v15; // er13
      unsigned int v16; // er12
      FILE *v17; // rax
      FILE *v18; // r12
      _BOOL4 v19; // ST10_4
      _BOOL4 v20; // ST08_4
      FILE *v21; // rbp
      _BOOL4 v22; // er8
      _BOOL4 v23; // er9
      struct passwd *v24; // rax
      signed __int64 v25; // rdx
      __int64 v26; // rdx
      FILE *v27; // rbp
      struct passwd *v28; // r14
      int v29; // er14
      FILE *v30; // r12
      FILE *v31; // rdi
      time_t v33; // [rsp+8h] [rbp-1200h]