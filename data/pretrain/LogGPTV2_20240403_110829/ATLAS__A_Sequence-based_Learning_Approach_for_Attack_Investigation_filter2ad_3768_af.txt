sequences and to balance the sequences, with an additional
28 minutes to train the LSTM model. In total, the training
process for each attack takes less than one hour.
We note that training ATLAS is a one-time effort, and new at-
tacks can be incrementally added to the LSTM model without
requiring re-training the previously learned attacks. In addi-
tion, our experiment was performed on a laptop PC, meaning
the training time could be signiﬁcantly reduced with more
powerful machines in the production environment (e.g., multi-
core and large-memory servers). Although ATLAS takes time
to build the causal graph for starting the attack investigation,
it only takes around four seconds to extract the sequences.
In addition, it only takes on average one second to recover
the attack story (with 1-day audit logs) by going through the
complete list of unknown entities in the causal graph.
Word process on the victim machine (❶ – ❸). Thereafter, an
injected shellcode forks other processes and grants additional
capabilities to the attacker, including information gathering
and downloading ﬁles to the victim system (❹ and ❺). It also
executes a backdoor that the attacker uses to leak a secret
ﬁle to a C&C server (❻ and ❼). Additionally, the attacker
identiﬁes that the compromised host acts as the company
portal’s web server. For lateral movement, the attacker uploads
the backdoor code to this web server, and adds a piece of
code to the portal main webpage portal.com/index.html
(orange node in the causal graph) to prompt a message asking
users to update their machines (❽). After users download and
install the backdoor (❾), more secret ﬁles are leaked to the
C&C server (❿ and later).
Figure 9-B illustrates the causal graph constructed for this
attack. We note that though we simpliﬁed the causal graph for
ease of presentation, the ﬁgure still includes many non-attack
entities (the white nodes in graph), which can be difﬁcult
for the analysts to manually analyze for attack investigation.
The attack investigation starts from a malicious hostname
evil.com (the blue node). ATLAS ﬁrst identiﬁes a set of attack
entities (red nodes), and a set of non-attack entities (white
nodes) through the learning model. Second, ATLAS reports the
identiﬁed events in temporal order as a sequence, which helps
an investigator to reason about the attack story. For this attack,
ATLAS only reports six false positives in terms of entities and
recovers the attack story similar to Figure 9-A.
6.5 Case Study
We illustrate how ATLAS can be deployed and beneﬁt cyber
analysts for attack investigation through a case study (i.e., the
attack M-5 which we used in evaluation). We use numbers in
Figure 9-A to illustrate the key steps of this attack. Here, a
user downloads a malicious document that compromises the
7 Limitations and Discussion
The preceding analysis of ATLAS shows that it can precisely re-
cover the key attack steps from the attack symptoms, and help
security investigators obtain the attack story. Although we
focused our work on Windows platform logs, ATLAS can be
3018    30th USENIX Security Symposium
USENIX Association
10.1.2.3connection_10.1.2.1_10.1.3.52. ip_connectH1_word.exe_3518 ip_connectH1_firefox.exe_374. ip_connectH1_mshta.exe_2417. ip_connectH2_payload.exe_7058. ip_connectH1_powershell.exe_5421. ip_connectH1_payload.exe_2831. ip_connectconnection_10.1.3.5_10.1.3.159. ip_connectsession_10.1.2.1_898. session_connectsession_10.1.2.1_99;9727. session_connectsession_10.1.3.1_8662. session_connectsession_10.1.2.1_5135. session_connectH1_payload.exe_35evil.com/msf.docevil.com10. requestevil.com/9. request1. resolve10.1.2.13. ip_connectH2_firefox.exe_3741. ip_connectconnection_10.1.3.1_10.1.2.145. ip_connectsession_10.1.3.1_72;65;6446. session_connectsession_10.1.3.5_9926. session_connectportal.com/portal.com56. request55. resolveportal.com/payload.exe57. request19. connect5. connect16. connect23. connect32. connectH1_msf.doc12. readH1_pdf_files37. readH2_pdf_files63. read13. write11. writeH1_svchost.exe_5814. forkH2_payload.exe49. instantiateH1_payload.exe20. writeH1_index.html38. writeH1_cmd.exe_2728. execute29. fork30. instantiateH1_python.exe_2340. read48. write10.1.3.151. ip_connect47. ip_connectsession_10.1.2.1_8052. session_connect50. connect39. connect42. connect43. bind44. send53. bind54. sendsession_10.1.2.1_9425. sendsession_10.1.3.5_806. send64. send36. sendsession_10.1.3.5_8824. send15. bind7. bind22. bind60. bind65. send61. send33. bind34. sendeasily extended to other platforms such as Linux and FreeBSD.
This is because our approach starts its analysis from any log
entities and builds a customized platform-independent causal
graph. We plan to extend our framework to diverse types of
audit logs in the future. We note that a list of manually desig-
nated attack entities is required for ATLAS training. However,
labeling such data is a one-time-effort for investigating future
attacks. Another limitation of ATLAS is that it cannot detect
attacks that use a similar sequence of normal events to hide
its behavior, such as the mimicry attacks [4, 5, 49]. However,
we note that following the behaviors of normal events will
signiﬁcantly limit the capability of any attack investigation
techniques [31, 36]. Besides, ATLAS requires the analyst to
start an investigation with a true attack-symptom entity. Using
a false positive entity as an attack-symptom will only discover
non-attack sequences since their subset entities include a non-
attack entity. Lastly, the correctness of the sequence-based
model highly depends on the quality of the collected training
log entries. Hence, more representative temporal relations
among attacks will enable ATLAS to learn more precise mod-
els. This can be easily alleviated by introducing more types
of attacks to the training set.
8 Related Work
ATLAS is mainly related to three sub-topics that support prove-
nance tracking with audit logs, including causality analysis
over the provenance graph, anomaly-based analysis, and ap-
plication of ML techniques for attack investigation.
Causality Analysis. Much prior work has been done on
causality analysis over audit logs for attack investigation, in-
cluding optimizing the provenance graph and reporting a con-
cise attack story [20,21,27]. These approaches require system
modiﬁcations via source-code instrumentation, static binary-
level instrumentation, or dynamic program instrumentation
at runtime. Unfortunately, source-code level instrumentation
is not applicable for proprietary software due to software
licenses, while static and dynamic instrumentation incur addi-
tional overhead on the user-system. Recent works proposed
instrumentation-free approaches [10, 13, 16, 31, 51] that do
not require any changes to the user-system for provenance
tracking. However, most of these approaches are heuristic-
or rule-based, which require non-trivial effort to develop and
maintain the rules or heuristics. HOLMES [31] and Rap-
Sheet [10] rely on a knowledge base of adversarial Tactics,
Techniques, and Procedures (TTPs) [32]. In contrast, ATLAS
only requires attack training data to learn the co-occurrence
of attack steps through temporal-ordered sequences.
Anomaly-based Analysis. Anomaly-based approaches [11,
12, 25, 50] learn the normal system behavior to identify
anomalous behavior. Unfortunately, while anomaly-based ap-
proaches can effectively detect unknown attacks, they are
notoriously prone to false positives due to user behavior
change over time and lack of sufﬁcient training data. For
instance, a host-based intrusion detection framework Uni-
corn [9] learns a model from normal provenance graphs to
detect anomalies. PrioTracker [25] ranks node importance
with statistical information to more accurately report real at-
tack events. NoDoze [11] reduces false alarms by computing
and propagating anomaly scores within a dependency graph.
Winnower [12] provides threat alerts for cluster auditing by
noticing the difference between multiple instances of clusters.
ProvDetector [50] identiﬁes stealthy malware through learn-
ing the sequences of normal execution paths of applications
from a provenance graph. Deeplog [8] models existing au-
dit logs as natural language sequences and detects abnormal
events. Lastly, Log2vec [24] proposes a clustering framework
to identify unseen abnormal sequences from system logs. Un-
like anomaly-based approaches that only learn user behaviors,
ATLAS learns both attack and non-attack (user) sequences and
exploits their temporal and causal relations to reduce false
positives and false negatives.
Learning-based Analysis. Learning-based attack investiga-
tion approaches [36, 42, 43] use machine learning techniques
to model attack events in the logs. HERCULE [36] uses a com-
munity detection algorithm to correlate attack events. Similar
to ATLAS, a number of recent works [42,43] employ word em-
beddings to transform the textual information (i.e., sequences)
into vectors to facilitate its learning process. However, these
approaches are limited to identifying and reporting individual
attack events in logs. In contrast to these approaches, ATLAS
aims to locate attack entities and construct an attack story
through associating each entity with its events.
9 Conclusion
We have presented ATLAS, a framework to identify and re-
construct end-to-end cyber attack stories from unmodiﬁed
system and software audit logs. ATLAS employs a novel com-
bination of causality analysis, natural language processing,
and machine learning techniques that model and recognize
high-level patterns of different attacks through a sequence-
based analysis. Evaluation results over 10 real-world APT
attack scenarios showed that ATLAS successfully recovered
key attack steps which constitute the attack story with both
high precision and efﬁciency.
Acknowledgments
We thank our shepherd, Adam Bates, and the anonymous
reviewers for their valuable comments and suggestions. This
work was supported in part by ONR through a subcontract
from the Intelligent Automation, Inc., an LDRD Grant from
Sandia National Labs, and a gift from Cisco. Any opinions,
ﬁndings, and conclusions in this paper are those of the authors
and do not necessarily reﬂect the views of our sponsors.
USENIX Association
30th USENIX Security Symposium    3019
References
[1] Martín Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen,
Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat,
Geoffrey Irving, Michael Isard, et al. Tensorﬂow: a system
for large-scale machine learning. In USENIX Symposium on
Operating Systems Design and Implementation, 2016.
[2] Adam Bates, Dave Jing Tian, Kevin RB Butler, and Thomas
Moyer. Trustworthy whole-system provenance for the linux
kernel. In USENIX Security Symposium, 2015.
[3] Karin Beijering, Charlotte Gooskens, and Wilbert Heeringa.
Predicting intelligibility and perceived linguistic distance by
means of the levenshtein algorithm. Linguistics in the Nether-
lands, 15:13–24, 2008.
[4] Z Berkay Celik, Patrick McDaniel, Rauf Izmailov, Nicolas
Papernot, Ryan Sheatsley, Raquel Alvarez, and Ananthram
Swami. Detection under privileged information. In Proceed-
ings of the 2018 on Asia Conference on Computer and Com-
munications Security, pages 199–206, 2018.
[5] Z Berkay Celik, Robert J Walls, Patrick McDaniel, and Anan-
thram Swami. Malware trafﬁc detection using tamper resistant
features. In IEEE Military Communications Conference, 2015.
[6] François Chollet et al. Keras.
https://github.com/
fchollet/keras, 2015. Accessed: 2020-06-06.
[7] Microsoft Corporation.
Support for unc naming and
mup.
https://docs.microsoft.com/en-us/windows-
hardware/drivers/ifs/support-for-unc-naming-and-
mup, 2017. Accessed: 2020-06-06.
[8] Min Du, Feifei Li, Guineng Zheng, and Vivek Srikumar.
Deeplog: Anomaly detection and diagnosis from system logs
through deep learning. In ACM SIGSAC Conference on Com-
puter and Communications Security, 2017.
[9] Xueyuan Han, Thomas Pasquier, Adam Bates, James Mick-
ens, and Margo Seltzer. Unicorn: Runtime provenance-
based detector for advanced persistent threats. arXiv preprint
arXiv:2001.01525, 2020.
[10] Wajih Ul Hassan, Adam Bates, and Daniel Marino. Tactical
provenance analysis for endpoint detection and response sys-
tems. In Proceedings of the IEEE Symposium on Security and
Privacy, 2020.
[11] Wajih Ul Hassan, Shengjian Guo, Ding Li, Zhengzhang Chen,
Kangkook Jee, Zhichun Li, and Adam Bates. Nodoze: Combat-
ting threat alert fatigue with automated provenance triage. In
Network and Distributed Systems Security Symposium, 2019.
[12] Wajih Ul Hassan, Mark Lemay, Nuraini Aguse, Adam Bates,
and Thomas Moyer. Towards scalable cluster auditing through
grammatical inference over provenance graphs. In Network
and Distributed Systems Security Symposium, 2018.
[13] Wajih Ul Hassan, Mohammad A Noureddine, Pubali Datta,
and Adam Bates. Omega-log: High-ﬁdelity attack investiga-
tion via transparent multi-layer log analysis. In Network and
Distributed Systems Security Symposium, 2020.
[15] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term
memory. Neural computation, 9(8):1735–1780, 1997.
[16] Md Nahid Hossain, Sanaz Sheikhi, and R Sekar. Combating
dependence explosion in forensic analysis using alternative tag
propagation semantics. In IEEE S&P, 2020.
[17] FireEye Threat Intelligence.
Second adobe ﬂash zero-
day cve-2015-5122
from hackingteam exploited in
strategic web compromise targeting japanese victims.
https://www.fireeye.com/blog/threat-research/
2015/07/second_adobe_flashz0.html, 2015. Accessed:
2020-06-06.
[18] Genwei
Jonathan
Jiang, Rahul Mohandas,
Leath-
CVE-2017-
In the Wild Attacks Leveraging HTA Handler.
ery, Alex Berry, and Lennard Galang.
0199:
https://www.fireeye.com/blog/threat-research/
2017/04/cve-2017-0199-hta-handler.html,
Accessed: 2020-06-06.
2017.
[19] Samuel T King, Zhuoqing Morley Mao, Dominic G Lucchetti,
and Peter M Chen. Enriching intrusion alerts through multi-
host causality. In Network and Distributed Systems Security
Symposium, 2005.
[20] Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee,
Wen-Chuan Lee, Shiqing Ma, Xiangyu Zhang, Dongyan Xu,
Somesh Jha, Gabriela Ciocarlie, et al. Mci: Modeling-based
causality inference in audit logging for attack investigation. In
Network and Distributed Systems Security Symposium, 2018.
[21] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. High accu-
racy attack provenance via binary-based execution partition. In
Network and Distributed Systems Security Symposium, 2013.
[22] Brooks Li and Joseph C. Chen.
Exploit kits in 2015:
Flash bugs, compromised sites, malvertising dominate.
https://blog.trendmicro.com/trendlabs-security-
intelligence/exploit-kits-2015-flash-bugs-
compromised-sites-malvertising-dominate/,
Accessed: 2020-06-06.
2016.
[23] Andy Liaw, Matthew Wiener, et al. Classiﬁcation and regres-
sion by random forest. R news, 2(3):18–22, 2002.
[24] Fucheng Liu, Yu Wen, Dongxue Zhang, Xihe Jiang, Xinyu
Xing, and Dan Meng. Log2vec: A heterogeneous graph em-
bedding based approach for detecting cyber threats within en-
terprise. In Proceedings of the 2019 ACM SIGSAC Conference
on Computer and Communications Security, 2019.
[25] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li,
Zhenyu Wu, Junghwan Rhee, and Prateek Mittal. Towards a
timely causality analysis for enterprise security. In Network
and Distributed Systems Security Symposium, 2018.
[26] Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu
Zhang, and Dongyan Xu. Mpi: Multiple perspective attack
investigation with semantics aware execution partitioning. In
USENIX Security Symposium, 2017.
[14] Sepp Hochreiter. The vanishing gradient problem during learn-
ing recurrent neural nets and problem solutions. International
Journal of Uncertainty, Fuzziness and Knowledge-Based Sys-
tems, 6(02):107–116, 1998.
[27] Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. Protracer:
Towards practical provenance tracing by alternating between
logging and tainting.
In Network and Distributed Systems
Security Symposium, 2016.
3020    30th USENIX Security Symposium
USENIX Association
[28] Trend Micro. Rig exploit kit now using cve-2018-8174 to
https://blog.trendmicro.com/
deliver monero miner.
trendlabs-security-intelligence/rig-exploit-
kit-now-using-cve-2018-8174-to-deliver-monero-
miner/, 2018. Accessed: 2020-06-06.
[29] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean.
Efﬁcient estimation of word representations in vector space.
arXiv preprint arXiv:1301.3781, 2013.
[30] Tomáš Mikolov, Wen-tau Yih, and Geoffrey Zweig. Linguistic
regularities in continuous space word representations. In Pro-
ceedings of the 2013 conference of the north american chapter
of the association for computational linguistics: Human lan-
guage technologies, pages 746–751, 2013.
[31] Sadegh M Milajerdi, Rigel Gjomemo, Birhanu Eshete, R Sekar,
and VN Venkatakrishnan. Holmes: real-time apt detection
through correlation of suspicious information ﬂows. In IEEE
Symposium on Security and Privacy, 2019.
[42] Yun Shen, Enrico Mariconti, Pierre Antoine Vervier, and Gi-
anluca Stringhini. Tiresias: Predicting security events through
deep learning. In ACM SIGSAC Conference on Computer and
Communications Security, 2018.
[43] Yun Shen and Gianluca Stringhini. Attack2vec: Leveraging
temporal word embeddings to understand the evolution of cy-
berattacks. In USENIX Security Symposium, 2019.
[44] Riyanat Shittu, Alex Healing, Robert Ghanea-Hercock, Robin
Bloomﬁeld, and Muttukrishnan Rajarajan. Intrusion alert pri-
oritisation and attack detection using post-correlation analysis.
Computers & Security, 50:1–15, 2015.
[45] Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to
sequence learning with neural networks. In Advances in neural
information processing systems, pages 3104–3112, 2014.
[46] Johan AK Suykens and Joos Vandewalle. Least squares support
vector machine classiﬁers. Neural processing letters, 9(3):293–
300, 1999.
[32] MITRE. Mitre att&ck. https://attack.mitre.org/, 2020.
[47] Jacob Torrey.
Dapra transparent computing.
https:
Accessed: 2020-06-06.
[33] Nagios. Network, server and log monitoring software. https:
//www.darpa.mil/program/transparent-computing,
2014. Accessed: 2020-06-06.
//www.nagios.com, 2019. Accessed: 2020-06-06.
[48] W3C. Prov-dm data model. https://www.w3.org/TR/2013/
[34] Pierluigi Paganini.
Phishing campaigns target us gov-
ernment agencies exploiting hacking team ﬂaw cve-2015-
5119. https://securityaffairs.co/wordpress/38707/
cyber-crime/phishing-cve-2015-5119.html, 2015. Ac-
cessed: 2020-06-06.
[35] Thomas Pasquier, Xueyuan Han, Mark Goldstein, Thomas
Moyer, David Eyers, Margo Seltzer, and Jean Bacon. Practical
whole-system provenance capture. In ACM Symposium on
Cloud Computing, 2017.
[36] Kexin Pei, Zhongshu Gu, Brendan Saltaformaggio, Shiqing
Ma, Fei Wang, Zhiwei Zhang, Luo Si, Xiangyu Zhang, and
Dongyan Xu. Hercule: Attack story reconstruction via com-
munity discovery on correlated log graph. In The 32nd Annual
Conference on Computer Security Applications, 2016.