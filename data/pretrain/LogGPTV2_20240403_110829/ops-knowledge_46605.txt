User: Write a performance test script to test the concurrent visits and response time of a Web application.
Assistant: The following is an example of a possible performance test script, written in Python: ```python import requests import time from multiprocessing.pool import ThreadPool # Set test parameters url = "http://localhost:8080" # URL of web application num_users = 100 # Number of visiting users num_requests = 1000 # The number of requests each user visits the URL # Statistical variable start_time = time.time() num_success = 0 num_fail = 0 responses = [] # Access function def make_request(num): for i in range(num_requests): try: response = requests.get(url) if response.status_code == 200: responses.append(response.elapsed.total_seconds()) num_success += 1 else: num_fail += 1 except: num_fail += 1 # Concurrent access to pool = ThreadPool(processes=num_users) pool.map(make_request, range(num_users)) pool.close() pool.join() #Output test results print("Test completed!") print("Total time spent (seconds):", time.time() - start_time) print("Number of successful requests:", num_success) print("Number of failed requests:", num_fail) print("Average response time (seconds):", sum( responses) / len(responses)) print("Maximum response time (seconds):", max(responses)) ``` This script creates a thread pool, and each thread calls `make_request()` The application makes a request. The `make_request()` function can add code to simulate user actions, such as entering data, clicking buttons, etc. On each successful request, the response time will be added to a list so that the average and maximum response times can be calculated after the test is complete. Test results include total time, number of successful and failed requests, average and maximum response time. Parameters can be modified to simulate different test situations, such as changing the target URL, changing the number of visiting users and the number of requests.