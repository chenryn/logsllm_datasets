### 优化后的文本

#### 恶意URL检测与黑名单
当代理服务检测到恶意URL时，该代理本身会被列入黑名单。为了避免干扰SSR服务的正常运行，我们并未在实际环境中测试这种攻击。根据我们的威胁模型，这是针对S的风险R4。

#### 攻击2.2（利用数据放大器进行DoS攻击）
在第二种场景中，攻击者可以针对任何面向互联网的服务，并通过HTTP请求对其进行洪水攻击。基本思路是使用解释器服务作为协调器，通过CORS（跨源资源共享）利用数据放大器服务来增加请求的数量和大小。为了绕过CORS的同源策略，此攻击利用了第4.1节中介绍的Web源清洗技术，每当解释器需要向另一个服务角色发送请求时都会使用这种方法。图4展示了涉及攻击者、解释器和放大器服务的一个示例。攻击者（C）将JavaScript程序的URL提交给解释器服务（S，步骤1）。解释器获取并执行一个恶意程序（步骤2和3），该程序执行两个操作：注册和攻击。注册阶段，恶意程序会重新提交JavaScript程序的URL给解释器服务，从而增加参与攻击的JavaScript程序实例数量。在攻击阶段，JavaScript代码指示Web服务向受害者（ES）发送大量HTTP请求。浏览器（如S所使用的）可以通过XMLHttpRequest API每秒生成约3,000个请求[21]。通过使用数据放大器服务，这些服务接收压缩请求并将解压缩的数据发送给受害者（步骤6），可以进一步增强攻击的影响。数据放大器允许数据发送量与受害者接收到的数据量之间达到1:1000的比例[20]。

出于道德原因，我们没有进行资源耗尽型DoS攻击的实际测试。相反，我们手动验证了构成这种攻击的各个部分是否由相关服务提供。具体来说，我们验证了：
- 解释器提供了攻击所需的功能（例如XMLHttpRequest API或Image API）；
- 可以创建SSR服务链和组合；
- 服务组合可以被解释器调用。
根据我们的威胁模型，这是针对ES的攻击，即风险R1。

#### 攻击2.3（对数据放大器的DoS攻击）
类似于攻击2.2的设置也可以用来攻击数据放大器，使其忙于解压缩任务（见图5）。在这种情况下，攻击还需要一个存储服务来存储攻击者控制的压缩数据。受恶意程序控制的解释器将请求存储服务从攻击者的Web服务器获取压缩资源（步骤4-6）。然后，存储服务返回资源ID给解释器（步骤7）。最后，解释器将许多压缩请求发送给受害者，触发受害者从存储服务中获取资源（步骤8, 8', ...）。受害者不仅被迫解压缩请求，还必须不断从存储服务中获取压缩资源并解压缩它们，这很容易导致内存耗尽。同样地，我们没有进行实际攻击，但验证了构成这种攻击的各个部分是由相关服务提供的。根据我们的威胁模型，这是针对S的攻击，即风险R4。

#### 网络侦察
网络侦察是一种已知的攻击类型（即风险R1），它涉及收集关于网络、服务器或服务的信息。我们将网络侦察分为端口扫描、主机发现和应用程序指纹识别。侦察是主要记录的利用SSRF（服务器端请求伪造）的攻击之一[15,24]。传统的攻击需要直接连接到受害者，而探针服务可以提供匿名性，甚至允许访问防火墙边界内的私有网络。图6展示了使用探针服务S的这种攻击。攻击者为S准备了一个包含要扫描的主机或服务URL的请求。例如，如果攻击者想要探测SSH服务，她可以提交URL `http://target.com:22`。结果，S连接到该URL（即SSH服务器）并响应攻击者，可能会泄露有关目标服务状态的信息。在我们的示例中，S试图将目标的响应解释为HTTP响应，并返回失败的原因（例如，报告某个SSH服务器横幅不是有效的HTTP消息）。如果S不泄露有关目标的信息，正如我们将展示的那样，攻击者可以使用侧信道来确定TCP端口的状态、资源的可用性或主机的可达性。

#### 协议桥接攻击
协议桥接是一种已知的攻击类型。服务S通常支持多种URL方案，包括ftp、gopher和dict。特别是，gopher方案允许攻击者通过以下URL发送任意数据：`gopher://target.com:port/payload`。如果服务不对用户提供的URL方案进行适当验证，SSR可以用于在非HTTP网络服务之间发送任意数据，从而有效地充当不同协议之间的桥梁。过去，这种技术曾被用于连接远程过程调用（RPC）服务并利用缓冲区溢出漏洞[22]，但它也可以用于其他恶意目的，例如向SMTP服务器发送垃圾邮件。根据我们的威胁模型，这是针对ES的攻击，即风险R1。另一种变体涉及使用file URL方案从S的文件系统中检索文件（例如，通过向桥接服务S发送`file:///etc/passwd`）。在一个事件中，这种攻击允许访问Google服务器上的系统文件（例如passwd）[1]。根据我们的威胁模型，这是针对S本地资源的攻击，即风险R2。

#### 案例研究与分析
为了调查SSR攻击的普遍性，我们分析了来自七个Web应用程序类别的68个服务，即社交网络、商业Web应用程序（例如电子表格和日历Web应用程序）、软件开发工具、在线图像处理、OpenID服务提供商、RSS阅读器和在线网页截图工具。对于每个类别，我们选择了按谷歌搜索排名优先的最流行的Web应用程序。大约60%的案例研究属于Alexa排名前50,000的网站，其中包括六个排名前十的网站。

我们的分析目标是研究实际的SSR服务，并将其映射到我们的分类。为了辅助我们的分析，我们开发了一种新的开源黑盒测试工具g¨unther4，它可以揭示SSR缺陷和服务行为。g¨unther接受url(reqES)的描述作为输入，可能还包含会话数据（即会话cookie）。然后，g¨unther生成一组请求来探测服务。g¨unther由测试器和监视器组件组成。测试器探测S，而监视器动态生成服务器以接收由服务发起的SSR。参考图1a，测试器和监视器分别扮演C和S的角色。当前版本的g¨unther支持表2中的测试，即(T1) URL验证和通过HTTP 3xx重定向绕过验证、(T2) 代理行为、(T3) 响应头分析、(T4) HTTP客户端分析和(T5) 侧信道分析。这些测试映射到缺陷和行为，如表2所示。

我们在数据集中的68个服务上运行了g¨unther。实验结果如表3所示。为了保护尚未修复的服务，我们在表3a中通过替换域名的方式对每个服务进行了匿名化（列ID）。为了提高可读性，我们将具有相同缺陷和行为的服务分组在同一行。我们的实验揭示了至少有一个服务对应于我们分类中的每个缺陷和行为。总共68个服务中有50个存在我们分类中的一个或多个缺陷。所有这些服务都是代理、开放源策略、探针或桥接服务。其中一个服务还表现为放大器，四个服务可以充当解释器，因此可以被滥用以协调其他攻击。此外，十个服务（14.7%）实现了较弱的URL验证形式，g¨unther通过HTTP 3xx重定向成功绕过了这些验证。最后，只有14个服务（20.6%）在我们的实验中不受基于SSR的漏洞影响。

#### 缓解措施
在讨论了SSR的巨大潜力和影响之后，我们现在将讨论八种缓解措施和陷阱。通过对案例研究的实验以及回顾现有技术，我们提取了一份七种缓解措施的清单。由于观察到的措施都不足以阻止攻击1.2，我们提出了一种额外的缓解措施，以强制执行基于URL的浏览器对策。

(M1) 监控—监控是一种旨在在服务运行时检测可疑活动的缓解技术。S5的所有者告诉我们，他们依靠一种复杂的监控技术来检测针对C的SSR滥用（图1c中的R3）。不幸的是，使用监控来检测这种类型的滥用有两个缺点，使其不足以作为一种通用解决方案。首先，复杂的基础设施和大量的资源是支持监控所必需的，尤其是对于服务于大量用户的流行服务。其次，虽然监控SSR可以成功缓解大规模滥用，但对于检测低容量攻击往往无效。例如，APT（高级持续性威胁）攻击的出现改变了攻击分布，从大规模转变为只针对单一用户或组织的有针对性的分布。因此，我们认为监控应该与其他预防性指南相结合。

(M2) 避免充当代理或包装响应—在我们的案例研究中，三个服务可以被滥用为透明代理，向客户端提供恶意内容。然而，我们并不知道透明代理的预期使用场景，因此服务应该明确设计以避免这种行为。例如，S可以使用JSON封套来包装resES，防止Web浏览器解释资源resES，从而阻止Web源清洗攻击1.1。服务S12、S59和S60使用自定义的JSON数据结构来包装resES，即它们表现得像非透明代理。然而，仅靠这种对策还不足以阻止攻击1.2。因为第二次攻击使用恶意JavaScript来检索resES，JavaScript程序可以解包resES并将其编码为内联数据（即通过data URI方案）。攻击1.2可以通过在S处强制执行基于URL的浏览器对策（如Google Safe Browsing）来部分缓解（参见M8）。

(M3) 进行适当的URL验证—S应在获取目标资源之前验证urlES。表3b显示了我们的案例研究如何验证用户提供的URL。绝大多数服务接受包含IP地址（60个服务）和/或端口号（55个服务）的URL。这些行为本身不能被视为漏洞。一些应用程序拒绝包含IP地址的URL，可能是为了阻止攻击者尝试访问公司内部网络中的本地机器。然而，重要的是要理解，这种对策往往是不够的，因为攻击者仍然可以通过指向本地IP地址的攻击者控制域来访问任何IP（DNS重绑定）。

此外，我们发现了可以通过HTTP重定向绕过的弱URL验证形式。十个服务的URL验证可以通过HTTP重定向绕过（表3b的最后一列）。这是关键的，因为它表明服务开发者试图缓解问题，但没有意识到这种安全威胁的所有细节。更糟糕的是，尽管68个服务中只有少数几个接受Dict（四个服务）或Gopher（三个服务）方案的URL，但重定向帮助绕过了每个方案的另外四个案例。这些桥接是一个严重的威胁，因为它们提供了对TCP套接字的完全控制，并使攻击者能够与非HTTP网络服务通信。

可以实现防止重绑定的URL验证的HTTP库。据我们所知，SafeCurl[14]是唯一为PHP服务提供这些对策的HTTP库。使用其他编程语言或无头浏览器的开发者需要自行实现上述机制。

(M4) 内容处置—内容处置头用于建议浏览器不应以内联方式显示资源[7]。这个头在过去被提议用于修复反射文件下载攻击[11]。使用此头的SSR服务可以阻止Web源清洗攻击1.1。事实上，由于资源不会以内联方式显示给用户，钓鱼攻击得以防止。在我们的实验中，服务S5和S9使用了内容处置头。虽然Content-Disposition可以缓解攻击1.1，但它不能保护攻击1.2。Content-Disposition单独并不能解决安全策略执行不足的根本原因，而是增加了攻击者滥用SSR的难度。要缓解攻击1.2，请参阅M8。

(M5) 限制资源使用—第4.2节中的DoS攻击是服务组合的结果：解释器用于编排攻击，放大器用于放大请求的大小和数量，OOP服务用于链接SSR服务。此缓解措施针对前两种服务（对于OOP服务，请参见M6）。表3c显示，我们案例研究中有10%的服务使用了具有完整JavaScript支持的浏览器，包括可以用于编排DoS攻击的JavaScript API。特别是，七个服务支持Image API，五个服务支持XMLHttpRequest API，两个服务支持Web Worker API。这些API可以被滥用，将看似无害的Web浏览器变成一个可以生成数千个HTTP请求的武器化HTTP机器人。