### Not Masked from Network Message Loss Rate

Another scheme elects a committee of \( K' \) (instead of just one) leaders in each protocol phase (conceptually, at each internal tree node). This scheme is \((K' - 1)\)-fault-tolerant at each subtree root. While this may seem sufficient, phase \( i \) requires that the knowledge of each height-\((i - 1)\) subtree's leader committee be disseminated among all members of its sibling height-\((i - 1)\) subtrees. This dissemination typically takes at least \( O(\log N) \) time due to the constant member bandwidth constraint. Therefore, \( K' \) needs to be \( O(\log N) \) to ensure that the dissemination completes even if all the leaders in the committee fail. Such dissemination can be avoided by maintaining consistent and complete views at all members, but this approach requires the use of accurate failure detectors.

In conclusion, using leader election appears to be either inadequate or requires unrealistic assumptions for a one-shot global aggregation algorithm using the Grid Box hierarchy. Random message delivery failures and process crashes can arbitrarily affect the completeness of the aggregate value.

### The Gossiping Approach

In this section, we present an algorithm for evaluating a composable global aggregate function over member votes. This algorithm uses the Grid Box Hierarchy but avoids leader election. We provide a discussion and analysis of the algorithm, showing that it is only poly-logarithmically sub-optimal in time and message complexity. Simulation results in Section 7 evaluate the resilience of the protocol's completeness to message losses and member failures.

Informally, the algorithm at each member consists of \( \log_b N \) phases, where phase \( i \) calculates the aggregate function for the set of votes in the subtree of height \( i \) (in the Grid Box Hierarchy) that the member belongs to. As discussed in Section 6.1, in each subtree of each phase, the component votes of child members (phase 1) or aggregates of child subtrees (higher phases) are required for this calculation. These component aggregates or votes are obtained through gossiping rather than by electing a leader and sending votes to it. Gossiping is robust against random message and process failures and scales well with group size. Our algorithm inherits these characteristics—its completeness scales well with increasing group size, while the time and message complexity remain poly-logarithmically sub-optimal for any group size.

Our scheme does not require complete or consistent views at any group member. However, we will assume these for the sake of simplifying the analysis.

The algorithm is started simultaneously at each group member. Each group member \( A_i \) executes the following three steps in different protocol phases:

1. **Phase 1:**
   - \( A_i \) starts in phase \( i = 1 \), where it gossips within its own grid box about individual votes that it knows of and that belong to members in its own grid box, including its own vote.
   - \( A_i \) periodically (once every gossip round) randomly selects a few gossipees from other members in its own grid box and sends them one randomly selected known vote along with the identifier of the member whose vote it is.
   - \( A_i \) learns about the vote of another member in its own grid box when it first receives the same by a gossip message from another member.
   - After \( K \log N \) gossip rounds, \( A_i \) applies the aggregate function to the known votes of members in its grid box and moves to phase 2.

2. **Phase \( i \) (2 ≤ \( i \) ≤ \( \log_b N - 1 \)):**
   - In every gossip round in phase \( i \), \( A_i \) chooses a few gossipees randomly from the set of all members in the same subtree of height \( i \) as itself, i.e., the set of members whose grid box addresses agree with \( A_i \) in the most significant \( (\log_b N - i) \) digits.
   - \( A_i \) then sends these gossipees a randomly selected aggregate value from among the known (at \( A_i \)) aggregates for the height-\((i - 1)\) child subtrees of \( A_i \)'s height-\(i\) subtree.
   - After \( K \log N \) gossip rounds, each of the height-\((i - 1)\) child subtrees' aggregate values is received (via gossip) at \( M_j \) with a probability \( C_i(N, K, b) \) that can be bounded from below as:
     \[
     C_i(N, K, b) \geq 1 - \left(1 - \frac{b}{N}\right)^{K \log N}
     \]

This analysis does not apply to the first phase of the protocol since a grid box can have anywhere between 0 and \( N \) members, and that many values need to be gossiped about during the first phase. However, we can express the expected completeness of the first phase in any grid box as:
\[
C_1(N, K, b) = 1 - \left(1 - \frac{b}{N}\right)^{K \log N}
\]

Evaluating \( C_1(N, K, b) \) exactly is beyond the scope of this paper. Instead, we use a pragmatic approach combining simulation and reasoning to bound the completeness of our protocol's first phase.

Figure 4 shows that at \( K = 2 \) and \( b = 4 \), \( -\log(1 - C_1(N, K, b)) \) varies linearly with \( \log(N) \) (since both axes are logarithmic). From this curve, we obtain that \( C_1(N, K = 2, b = 4) \geq 1 - \frac{1}{N} \), which is a very pessimistic lower bound. Further, \( C_1(N, K, b) \) is monotonically increasing with both \( b \) and \( K \). This is verified by observation. Figure 5 shows the variation of \( (1 - C_1(N = 2000, K, b = 4)) \) with \( K \), both axes being logarithmic. Evidently, the completeness is monotonically increasing with \( K \). The same trend was observed for other values of \( N \) and \( b \).

**Postulate 1:** For \( K \geq 2 \) and \( b \geq 4 \), the completeness of the first phase in any grid box with an average of \( K \) members can be lower bounded by \( [1 - \frac{1}{N}] \).

**Theorem 1:** For \( K \geq 2 \), \( b \geq 4 \), and large \( N \), the expected completeness of the Hierarchical Gossiping protocol can be lower bounded by \( [1 - \frac{1}{N}] \).

**Proof:**
The expected completeness of the protocol is the probability that a random group member vote is included in the final aggregate function obtained at member \( A_i \):
\[
\text{Expected completeness} = \prod_{i=0}^{\log_b N - 1} C_i(N, K, b)
\]
\[
\approx \left(1 - \frac{1}{N}\right)^{\log_b N} \approx 1 - \frac{\log_b N}{N}
\]
For large \( N \), this simplifies to:
\[
\text{Expected completeness} \geq 1 - \frac{1}{N}
\]

This is a satisfactory, although pessimistic, lower bound on the protocol’s completeness, given reasonable assumptions on the protocol parameters \( (K, b) \). However, this analysis does not reflect the effect of members executing protocol phases asynchronously or having \( b < 4 \).