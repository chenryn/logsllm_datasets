finds more functions. Consequently, our preprocessing steps
helped IDA Pro to identify 91,481 functions eventually. The
preprocessing is merely a one-time task, and it can apply to
the firmware of other device models without any other manual
effort. In practice, we can successfully preprocess the other
latest models as listed in Table II. The average time spent on
the full preprocessing including the IDA’s auto-analysis was
2,557 s. Sometimes, IDA found more functions before the
preprocessing (Model B’s case), or its auto-analysis required
more time (Model A’s case). We are inspecting these outliers.
C. Identifying Layer 3 Decoder
To investigate the standard L3 messages (§III-C), we first
need to locate their decoding logic through binary analysis.
We call the functions implementing this decoding logic as
decoder functions. We focus on the decoder functions because
they have machine-friendly information for the L3 messages
structures. As described in the §II-B, the L3 protocol messages
have a standardized structure. To properly parsing the messages,
developers embed message structures from the specification,
in a machine-friendly format. Therefore, we can analyze the
embedded structure systematically and understand how the
firmware decodes the L3 messages.
To identify the decoders, we utilize debug information
(e.g., logging messages) left by developers in the baseband
binary. Note that this debug information is different from that
inserted by compilers with the -g option, which disappear
if a binary is stripped. We describe the details in the next
paragraph. We select this approach among various methods in
binary analysis because debug information is commonly used
in practice for finding a specific function in a stripped binary
when analyzing embedded devices [20], [25], [15]. Baseband
firmware is stripped and extremely large (over 30MB) composed
of numerous functions (over 90K), which makes it significantly
challenging to discover an L3 decoder without such information.
Therefore, we utilize debug messages and share their details
below as an example for further research. Similarly, we found an
L3 decoder function in another vendor’s firmware using debug
Fig. 4: Relationship between specification document and binary
information, although the structure of debug information in it
is different (§VII-E). Meanwhile, our ultimate goal, which is
conducting a comparative analysis on the standard L3 messages,
does not depend on how the decoder function is identified. Other
techniques can also be used for this process.
We first search all debug information in the baseband
binary and then analyze functions that refer to only the
corresponding debug information of interest. While searching
debug information, we noticed that the firmware uses a specific
structure to log debug messages and information. The structure,
which starts with a magic value DBT, contains a debug message
along with the file path and the line number where it is
referenced. Therefore, we first search all debug information
using DBT. Because numerous functions reference the debug
information indirectly (≈100K cases), we perform a lightweight
backward slice analysis to match the debug information with
functions correctly. Next, we categorize each function based on
the file path in the debug information, as the functions in the
same layer or library may share the path. After categorization,
we find L3 functions using debug messages and paths that
contain keywords such as L3, SS, EMM, or NAS. Then, we
find functions related to decoding incoming messages using
keywords such as decode, codec, and names of several IEs.
Consequently, we identified a function that parses standard L3
messages. We found that a single decoder function decodes
all standard L3 messages regardless of their protocols, as
these messages have the same standardized structure (§II-B).
Therefore, a single decoder would suffice to handle them.
D. Obtaining Binary-embedded Message Structures
Finally, we determine how the standard L3 message struc-
tures are embedded in the baseband binary. To achieve this,
we analyze the decoder function and its data references. The
simplified architecture of the embedded message structure is
illustrated in Figure 4 with the EMM ATTACH REJECT message
6
07  44  02  78  00  39  52  02Ptr…43444546…Imper.IEidx✓1F8200201LengthIEI……1F81-153……2000-7FFF782011-1FF……(a)Protocol List(b) Msg List(c) Msg IE List(d) Global IE ListPtr…4567…IEIInformation ElementFormatLength-Protocol discriminator (PD)V1/2-Security headertypeV1/2-Attachreject message identity(Message type)V1-EMM causeV178ESM message containerTLV-E6-n5FT3346valueTLV3Raw Packet Data (in hex format)Message Structure Embedded in BinaryMessage Structure in Specification DocumentIEILengthValueImperativeNon-ImperativeMessage TypeMessage Name…0x41Attach request0x42Attach accept0x43Attach complete0x44Attach reject0x45Detach request…EMM (PD=7) message typesAttach Reject (0x44) message contentsas an example. The embedded message structures are encoded
as a hierarchical structure of four types of lists:
• Protocol List (Figure 4 (a)) is the top-level list of the
hierarchy. It holds pointers to the Msg List of each L3
protocol and is indexed by PDs. As the PD of the EMM
protocol is 7, the 7th item in the Protocol List is accessed
in the example.
• Msg List (Figure 4 (b)) is defined for each protocol. It holds
pointers to the Msg IE List of each message in the protocol
and is indexed by message identity values. In the example,
as the message identity of the EMM ATTACH REJECT message
is 0x44, its Msg IE List is accessed using 0x44.
• Msg IE List (Figure 4 (c)) is defined for each message. It
contains the imperative flag and index for each IE in the
message. The imperative flag shows whether the IE is encoded
as imperative or non-imperative in the message, and the index
represents the location of the IE in the Global IE List. As
shown in the example, the first three of the IEs — PD, security
header type, and message type — in the EMM ATTACH REJECT
message are not listed in the Msg IE List because they are
common IEs for all messages.
• Global IE List (Figure 4 (d)) contains information of all
IEs used in the L3 protocols and is accessed by the index
assigned for each IE. The information consists of the length
and IEI of the IE. Note that the length here indicates the size
of only the value part, whereas the length in the specification
document indicates thee total size of the IE (§II-B).
We extract all embedded message structures by iterating
these lists. From the firmware analysis, we can eventually notice
how to obtain the L3 decoder address and message structure
information in the firmware. With this knowledge, we automate
BASESPEC as described in the next section.
V. BASESPEC DESIGN
This section describes BASESPEC’s design in detail. Fig-
ure 3 illustrates the overview of BASESPEC. BASESPEC
automatically reports mismatches by comparing the message
structures in the baseband firmware and those in the spec-
ification documents. To this end, BASESPEC first extracts
messages structures from specifications (§V-A) and those from
the firmware with the binary-specific metadata (§V-B). Then,
it syntactically compares the structures in the specification
to binary-embedded ones (§V-C) and semantically examines
their implementation logic using symbolic execution (§V-D).
Based on these comparisons, BASESPEC reports various types
of mismatches between the specification and implementations.
BASESPEC reports suspicious IEs that exist only in binary
(i.e., unknown mismatches) or specifications (i.e., missing
mismatches). Moreover, it reports IEs with different length
(i.e., invalid mismatches). After obtaining the mismatch results,
we can further analyze their implications (§V-E).
A. Extracting Message Structures from Specification Documents
To inspect L3 message structures in the baseband firmware,
BASESPEC extracts reference structures from the specification
documents. The 3GPP and its partner organizations provide
the specification documents on their websites [1]. BASESPEC
downloads the latest specification documents listed in Table I
and converts them into a raw text format. Then, it extracts
the message structures from the converted raw text using
regular expressions. The message structures in the specification
documents include two parts, namely, message contents, which
are a list of IE formats, and a list of message types for each L3
protocol, as illustrated in Figure 4. BASESPEC automatically
parses those structures for each standard L3 message.
Although this text processing seems trivial, BASESPEC
needs to address several problematic situations listed below.
Conversion errors. Converting a specification document into
a raw text format introduces several types of errors. The
specification documents are in human-friendly forms such as
Microsoft Word (i.e., DOC) or Adobe (i.e., PDF) format. Their
visual richness (e.g., tables and figures) helps readers understand
these documents more thoroughly. However, BASESPEC needs
to convert the documents into machine-understandable formats
for a systematic analysis; converting these human-friendly
documents into the raw text format relies on error-prone
methods such as OCR [24]. Thus, such conversion often results
in several errors including incorrect or missing words/sentences.
To mitigate such conversion errors, BASESPEC co-utilizes
different document formats. The 3GPP and ETSI provide the
same specification documents in two different formats: DOC file
on the 3GPP and PDF file on ETSI. We found that conversion
errors from each format are deterministic and complimentary.
For example, when processing the specification documents
of EMM and ESM messages (Table I), the conversion of
tables for message types in the DOC files failed, whereas the
conversion of PDF files was successful. In contrast, converting
the tables for message contents showed the opposite case.
Therefore, BASESPEC selects the correct raw text between
different conversion results by checking the number of rows of
converted tables; a table having more rows is more likely to be
the correct one. Surprisingly, this approach produced no error.
For conversion, BASESPEC utilizes antiword and pdftotext
for DOC and PDF files, respectively.
Word inconsistencies. BASESPEC has to address many
inconsistent words in the specification documents for text
processing. As the specifications are manually written by
numerous people, such inconsistencies are inevitable, which
makes it difficult to parse the specifications systematically.
These inconsistencies include 5 cases of duplicate and/or
missing words, 14 cases of incorrect spaces between words, 5
cases of abbreviation usages, 14 cases of incorrect delimiters,
and several different terms for denoting a single meaning.
For example, SYSTEM INFORMATION TYPE 15, which is an RR
message [7], is sometimes written as SYSTEM INFORMATION
15. In addition, there are four different names for denoting
downlink (DL) messages which are transferred to a cellular
device: UE, mobile station, MS, and DL. Furthermore, there
is a missing delimiter ’-’ in the length of one IE format in
the DTM ASSIGNMENT COMMAND message [7]. Some table names
have duplicate words, such as Contents of Service Request
message content [4]. We addressed all these inconsistencies
and successfully retrieved message information for comparison.
We reported the issues to 3GPP, so that they could be corrected
for future research applying text processing in this field.
Irregular IE formats. While extracting the message structures
from the specification documents, we found several nested IEs
and invalid IE formats. For example, some SMS messages
could have nested messages [5]; thus, the IEs of the nested
7
messages must be checked. We flattened the nested IEs to
compare the message structures properly. Moreover, the CN
to MS transparent information IE in the INTER SYSTEM TO
UTRAN HANDOVER COMMAND message has an invalid TLV format
as it does not have an IEI; an IE with the TLV format should
include an IEI (§II-B). However, this was an exceptional case
defined in the specification [7]. We made exceptions to handle
the above cases when comparing the results.
B. Extracting Binary-specific Metadata
For further analysis, BASESPEC extracts binary-specific
metadata: the information of binary-embedded message struc-
tures for syntactic comparison, and the address of the L3
decoder for semantic comparison. These are distinct across
different baseband binaries. However, BASESPEC can extract
this information regardless of the baseband binaries, and it is
applicable for multiple baseband models or versions (§VII-D).
Given a firmware image, BASESPEC performs all firmware
analysis procedures described in §IV and extracts the binary-
specific metadata. For automating the firmware preprocessing
(§IV-B), BASESPEC searches pre-built signatures of functions
related to scatter-loading similarly to IDA Pro’s FLIRT [30].
Then, it emulates their corresponding functionalities of copy,
decompress, and zero-initialize. BASESPEC then scans the
loaded firmware to detect function prologues and pointers for
the Thumb mode functions. For automating the L3 decoder
identification (§IV-C), we implement backward and forward
slicers to identify L3-related debug structures correctly. Then,
we can identify the L3 decoder by cross-referencing the debug
structure. Finally, BASESPEC locates the address of message
structures from the decoder as the function references the
structures while decoding L3 messages. The message structures
are used in the syntactic comparison, and the information
regarding the decoder is used in the semantic comparison.
C. Syntactic Comparison of Message Structures
BASESPEC first syntactically compares message structures
extracted from the baseband binary with those from the
specification documents, at the IE-level granularity. For each
message from the specification, BASESPEC fetches the corre-
sponding message from the binary using PD and a message type
(§V-C1). Next, BASESPEC iteratively maps IEs in the message
from the specification onto those from the binary according
to their types (i.e., imperative or non-imperative) (§V-C2).
Finally, BASESPEC compares the mapped IEs and reports the
mismatches, which we refer to as syntactic mismatches (§V-C3).
These syntactic mismatches can directly identify developers’
mistakes in embedding message structures in the baseband
binary. We detail the syntactic comparison procedure as follows:
1) Fetching messages: For each message in the specification,
BASESPEC first fetches its corresponding message structure
from the baseband binary using the PD and message identity.
As shown in Figure 5, BASESPEC fetches the corresponding
Msg IE List for the EMM ATTACH REJECT message using a PD
(0x7, red boxes) and a message identity (0x44, yellow boxes)
as indices for the Protocol List and Msg List, respectively.
2) Mapping IEs: Next, BASESPEC maps each IE from the
Msg IE List onto that in the specification. BASESPEC performs
this mapping according to the IE type as an imperative IE and
Fig. 5: Example of syntactic comparison
a non-imperative IE have distinct formats. For an imperative
IE, BASESPEC relies on its order as it has a fixed order in the
message. For example, in Figure 5, BASESPEC concludes that
the first entry of the Msg IE List represents the EMM cause
IE as it is the first IE, of which the imperative flag is set.
Note that the Msg IE List only contains IEs after the message
identity as the header IEs of the message (i.e., PD and the
message identity) are already used to obtain Msg IE List. For
a non-imperative IE, which can appear in an arbitrary order,
BASESPEC uses its IEI, which is an identifier to distinguish it.
For example, BASESPEC regards the second entry of the Msg
IE List in Figure 5 as the ESM message container IE because
its IEI (0x78) matches that in the specification.
After the mapping process, BASESPEC reports the re-
maining IEs, which are not mapped, as either missing or
unknown mismatches. Missing mismatches indicate IEs that
exist in the specification but are not implemented in the binary.
Meanwhile, unknown mismatches refer to IEs that exist only
in the binary. For example, BASESPEC fails to map the T3346
value in Figure 5 as its IEI (0x5F) does not exist in the
Msg IE List. Therefore, BASESPEC reports this as a missing
mismatch. Similarly, BASESPEC reports the third IE in the Msg
IE List as an unknown mismatch because its IEI (0xff) has
no corresponding IE in the specification.
3) Comparing IEs: BASESPEC finally compares IE pairs
from the mapping and reports the mismatch results. BASESPEC
first needs to convert the IEs in the specification to a comparable
format for the binary. Specifically, BASESPEC adjusts the IE
lengths in the specification because lengths in the binary and
specification are different. A length in the binary only considers
the value part of an IE (i.e., a value length), whereas that in
the specification also includes IEI and LI (i.e., an IE length).
BASESPEC subtracts the size of IEI and LI according to the
format in the specification (§II-B). For example, as shown
in Figure 5, BASESPEC subtracts three bytes from the IE
length of the ESM message container IE to calculate its value
length because its format includes a 1-byte IEI (T) and 2-byte
extended LI (L with -E). Similarly, BASESPEC subtracts two
bytes to the IE length of the T3346 value IE, which has an
IEI (T) with a 1-byte LI (L). BASESPEC does not adjust the IE
length of the EMM cause IE as it only has the value (V).
8
Ptr…43444546…Imper.IEidx✓1F8200201LengthIEI……1F81-153……2000-7FFF782011-1FF……(b) Msg List(c) Msg IE List(d) Global IE ListBinary-embeddedMessage StructuresIEIInformation ElementFormatIE LengthValue Length-Protocol discriminator (PD)V1/21/2-Security headertypeV1/21/2-Attachreject message identityV11-EMM causeV1178ESM message containerTLV-E6-n3-n5FT3346valueTLV31EMM(0x7)Attach Reject (0x44) IE ListIEIValue Length-------1780-7FFF--FF1IE Comparison(e) From Specification(f) From BinaryCorrectInvalidMissing(a)Protocol ListPtr…4567…ValueUnknownThen, BASESPEC compares the adjusted IEs. If their lengths
are different, BASESPEC reports them as invalid mismatches.
For example, in Figure 5, the value lengths of EMM cause
IE is the same in both the specification and the binary; thus,
BASESPEC does not report any mismatch. Meanwhile, the
minimum value length of the ESM message container IE in
the specification (3 bytes) differs from that in the binary (0 byte);
thus, BASESPEC marks this as an invalid mismatch.
D. Semantic Comparison of Message Structures
In addition to syntactic analysis, BASESPEC performs
semantic analysis. Although syntactic analysis can identify
evident mismatches of the message structures,
the actual
decoding logic for a given message in the baseband binary
could be different from its syntactic form. To this end, semantic
analysis focuses on how incoming messages are parsed in the
decoder function. BASESPEC reveals the semantic flaws of the
decoder function by discovering mismatches in the handling
of messages between the implementation and the specification;
we refer to these mismatches as semantic mismatches. These
semantic mismatches can imply unintended behavior of the
baseband different from the specification.
For semantic analysis, BASESPEC symbolically executes the
decoder function (§V-D1), whose address is given from §V-B.
Then, BASESPEC converts constraints, which are obtained from
symbolic execution, into IEIs and LIs using their distinct
roles (§V-D2); an IEI distinguishes the non-imperative IEs,
while an LI specifies the size of value part. Next, BASESPEC
builds message structures based on the identified IEIs and LIs,
compares them with structures in specifications similarly to the
syntactic comparison, and finally reports mismatches (§V-D4).
Figure 6 depicts an overall procedure of our semantic analysis
with a sample EMM ATTACH REJECT message.
1) Symbolic execution: BASESPEC analyzes the decoder
function instead of the entire baseband binary following the
concept of under-constrained symbolic execution [50]. Under-
constrained symbolic execution analyzes individual functions
directly without running the entire binary for scalability.
Accordingly, BASESPEC performs symbolic execution from the
entry of the decoder function until it returns. For an efficient
analysis, BASESPEC concretizes the PD and message type, so
that it processes one L3 message at a time. The message body,
namely IEs, remains unconstrained to consider any possible
IEs. For example, the message in Figure 6 has concrete values
for the PD (0x7) and message type (0x44), which indicate
the EMM ATTACH REJECT message. However, the message body
comprises of unconstrained symbolic variables (v1–v4).