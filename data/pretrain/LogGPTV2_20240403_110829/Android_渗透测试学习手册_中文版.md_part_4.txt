(文件夹)
lib
为了验证这一点，我们可以使用任何归档管理器应用程序（如 7zip，WinRAR 或任何首选应
用程序）简单地解压缩应用程序。 在 Linux 或 Mac 上，我们可以简单地使用 unzip 命令来展
示压缩包的内容，如下面的截图所示：
28
第三章 Android 应用的逆向和审计
这里，我们使用 （list）标志，以便简单地展示压缩包的内容，而不是解压它。 我们还可
-l
以使用 命令来查看它是否是一个有效的压缩包。
file
Android 应用程序由各种组件组成，它们一起创建可工作的应用程序。 这些组件是活动，服
务，广播接收器，内容供应器和共享首选项。 在继续之前，让我们快速浏览一下这些不同的
组件：
活动（Activity）：这些是用户可以与之交互的可视界面。这些可以包括按钮，图
像， 或任何其他可视组件。
TextView
服务（Service）：这些 Android 组件在后台运行，并执行开发人员指定的特定任务。这
些任务可以包括从 HTTP 下载文件到在后台播放音乐的任何内容。
广播接收器（Broadcast Receiver）：这些是 Android 应用程序中的接收器，通过
Android 系统或设备中存在的其他应用程序，监听传入的广播消息。一旦它们接收到广播
消息，就可以根据预定义的条件触发特定动作。条件可以为收到 SMS，来电呼叫，电量
改变等等。
共享首选项（Shared Preference）：应用程序使用这些首选项，以便为应用程序保存小
型数据集。此数据存储在名为 的文件夹中。这些小数据集可以包括名值
shared_prefs
对，例如游戏中的用户得分和登录凭证。不建议在共享首选项中存储敏感信息，因为它
们可能易受数据窃取和泄漏的影响。
意图（Intent）：这些组件用于将两个或多个不同的 Android 组件绑定在一起。意图可以
用于执行各种任务，例如启动动作，切换活动和启动服务。
内容供应器（Content Provider）：这些组件用于访问应用程序使用的结构化数据集。应
用程序可以使用内容供应器访问和查询自己的数据或存储在手机中的数据。
29
第三章 Android 应用的逆向和审计
现在我们知道了 Android 应用程序内部结构，以及应用程序的组成方式，我们可以继续逆向
Android 应用程序。 当我们只有 .apk 文件时，这是获得可读的源代码和其他数据源的方式。
3.2 逆向 Android 应用
正如我们前面讨论的，Android应用程序只是一个数据和资源的归档文件。 即使这样，我们不
能简单地解压缩归档包（ ）来获得可读的源代码。 对于这些情况，我们必须依赖于将
.apk
字节代码（如在 中）转换为可读源代码的工具。
classes.dex
将字节码转换为可读文件的一种方法，是使用一个名为 dex2jar 的工具。 .dex 文件是由
Java 字节码转换的 Dalvik 字节码，使其对移动平台优化和高效。 这个免费的工具只是将
Android 应用程序中存在的 .dex 文件转换为相应的 .jar 文件。 请遵循以下步骤：
1. 从 https://code.google.com/p/dex2jar/ 下载 dex2jar 工具。
2. 现在我们可以使用它来运行我们的应用程序的 .dex 文件，并转换为 .jar 格式。
3. 现在，我们需要做的是，转到命令提示符并访问 dex2jar 所在的文件夹。 接下来，我们
需要运行 d2j-dex2jar.bat 文件（在 Windows 上）或 d2j-dex2jar.sh 文件（在 Linux /
Mac 上），并提供应用程序名称和路径作为参数。 这里的参数中，我们可以简单地使
用 文件，或者我们甚至可以解压缩 文件，然后传递 文件，如下
.apk .apk classes.dex
面的截图所示：
正如我们在上面截图中看到的，dex2jar 已经成功地将应用程序的 文件转换为名
.dex
为 helloworld-dex2jar.jar 的 .jar 文件。 现在，我们可以在任何 Java 图形查看器（如
JD-GUI）中打开此 文件，JD-GUI 可以从其官方网站 下载。
.jar http://jd.benow.ca/
4. 一旦我们下载并安装 JD-GUI，我们现在可以继续打开它。 它看起来像下面的截图所示：
30
第三章 Android 应用的逆向和审计
5. 在这里，我们现在可以打开之前步骤中转换的 .jar 文件，并查看 JD-GUI 中的所有
Java 源代码。 为了打开 .jar 文件，我们可以简单地访问 File | Open 。
在右侧窗格中，我们可以看到 Java 应用程序的 Java 源代码和所有方法。 请注意，重新编译
过程会为你提供原始 Java 源代码的近似版本。 这在大多数情况下无关紧要; 但是，在某些情
况下，你可能会看到转换的 文件中缺少某些代码。 此外，如果应用程序开发人员使用
.jar
一些防止反编译的保护，如 proguard 和 dex2jar，当我们使用 dex2jar 或 Apktool 反编译应用
程序时，我们不会看到准确的源代码; 相反，我们将看到一堆不同的源文件，这不是原始源代
码的准确表示。
3.3 使用 Apktool 逆向 Android 应用
31
第三章 Android 应用的逆向和审计
另一种逆向 Android应用程序的方法是将 .dex 文件转换为 smali 文件。 smali 是一种文件格
式，其语法与称为 Jasmine 的语言类似。我们现在不会深入了解 smali 文件格式。有关更多
信息，请参阅在线 wiki https://code.google.com/p/smali/wiki/ ，以便深入了解 smali。
一旦我们下载 Apktool 并配置它，按照前面的章节的指示，我们都做好了进一步的准备。 与
JD-GUI 相比，Apktool 的主要优点是它是双向的。这意味着如果你反编译一个应用程序并修
改它，然后使用 Apktool 重新编译它，它能跟完美重新编译，并生成一个新的 .apk 文件。然
而，dex2jar 和 JD-GUI 不能做类似功能，因为它提供近似代码，而不是准确的代码。
因此，为了使用 Apktool 反编译应用程序，我们所需要做的是，将 .apk 文件与 Apktool 二进
制文件一起传递给命令行。一旦反编译完成，Apktool 将使用应用程序名称创建一个新的文件
夹，其中会存储所有的文件。为了反编译，我们只需调用 。这
apktool d [app-name].apk
里， 标志表示反编译。
-d
在以下屏幕截图中，我们可以看到使用 Apktool 进行反编译的应用程序：
现在，如果我们进入 smali 文件夹，我们将看到一堆不同的 smali 文件，它们包含开发应用程
序时编写的 Java 类的代码。在这里，我们还可以打开一个文件，更改一些值，并使用
Apktool 再次构建它。为了从 smali 构建一个改动的应用程序，我们将使用 Apktool 中
的 （build）标志。
b
apktool b [decompiled folder name] [target-app-name].apk
但是，为了反编译，修改和重新编译应用程序，我个人建议使用另一个名为 Virtuous Ten
Studio（VTS）的工具。这个工具提供与 Apktool 类似的功能，唯一的区别是 VTS 提供了一
个漂亮的图形界面，使其相对容易使用。此工具的唯一限制是，它只在 Windows 环境中运
行。我们可以从官方下载链接 下载 VTS。以下是反编译
http://www.virtuous-ten-studio.com/
同一项目的应用程序的屏幕截图：
32
第三章 Android 应用的逆向和审计
3.4 审计 Android 应用
Android 应用程序通常包含许多安全漏洞，大多数时候是由于开发人员的错误和安全编码实践
的无视。 在本节中，我们将讨论基于 Android 应用程序的漏洞，以及如何识别和利用它们。
内容供应器泄露
许多应用程序使用内容供应器来存储和查询应用程序中的数据或来自电话的数据。 除非已经
定义了内容提供者可以使用权限来访问，否则任何其他应用都可以使用应用所定义的内容供
应器，来访问应用的数据。 所有内容供应器具有唯一的统一资源标识符（URI）以便被识别
和查询。 内容提供者的 URI 的命名标准惯例是以 content:// 开始。
如果 Android API 版本低于 17，则内容供应器的默认属性是始终导出。 这意味着除非开发人
员指定权限，否则任何应用程序都可以使用应用程序的内容供应器，来访问和查询数据。 所
有内容供应器都需要在 中注册。 因此，我们可以对应用程序使用
AndroidManifest.xml
Apktool，并通过查看 文件检查内容供应器。
AndroidManifest.xml
定义内容供应器的一般方法如下所示：
所以现在，我们将举一个漏洞应用程序的例子，并尝试利用内容供应器泄漏漏洞：
1. 为了反编译应用程序，我们将使用 Apktool 来使用 apktool d [appname].apk 反编译应用
程序。
2. 为了找到内容供应器，我们可以简单地查看定义它们的 AndroidManifest.xml 文件，或者
我们可以使用一个简单的 命令，从应用程序代码中获取内容供应器，如下所示：
grep
33
第三章 Android 应用的逆向和审计
3. 我们可以使用 grep 命令来查找内容提供者，使用 grep –R 'content://' 。 此命令将在每
个子文件夹和文件中查找内容供应器，并将其返回给我们。
4. 现在，我们在模拟器中安装应用程序。 为了查询内容供应器并确认漏洞是可利用的，我
们需要在 Android 设备或模拟器中安装该应用程序。 使用以下代码，我们将在设备上安
装易受攻击的 文件：
app.apk
$ adb install vulnerable-app.apk
1869 KB/s (603050 bytes in 0.315s)
pkg: /data/local/tmp/vulnerable-app.apk
Success
5. 我们可以通过创建另一个没有任何权限的应用程序来查询内容供应器，然后查询漏洞应
用程序的内容供应器。 为了快速获得信息，我们还可以使用 查询内容供应器，我们
adb
可以在以下命令中看到：
adb shell content query - - uri [URI of the content provider]
以下是在漏洞应用程序上运行的命令，输出展示了存储在应用程序中的注释：
在这里，我们还可以使用 MWR 实验室的另一个名为 Drozer 的工具，以便在 Android 应
用程序中找到泄漏的内容供应器漏洞。 我们可以从官方网
站 下载并安装 Drozer。
https://labs.mwrinfosecurity.com/tools/drozer/
6. 一旦我们安装了它，我们需要将代理组件 agent.apk 安装到我们的模拟器，它位于下载
的 文件内。 该代理是系统和设备相互交互所需的。 我们还需要在每次启动模拟器
.zip
时转发一个特定的端口（ 31415 ），以便建立连接。 要在 Mac 和其他类似平台上安装设
34
第三章 Android 应用的逆向和审计
备，我们可以按
照
https://www.mwrinfosecurity.com/system/assets/559/original/mwri_drozer-users-guide_2013-09-11.pdf
上提供的在线指南。
7. 一旦完成，我们可以启动应用程序，并单击"Embedded Server（嵌入式服务器）"文本。
从那里，我们需要回到设备，启动 Drozer 应用程序，并通过单击名为 Disabled 的左上
角切换按钮启用服务器。
8. 此后，我们需要访问终端并启动 Drozer，并将其连接到模拟器/设备。 为此，我们需要输
入 ，如下面的截图所示：
drozer console connect
9. 在这里，我们可以运行 app.provider.finduri 模块来查找所有内容供应器，如下所示：
35
第三章 Android 应用的逆向和审计
dz> run app.provider.finduri com.threebanana.notes
Scanning com.threebanana.notes…
content://com.threebanana.notes.provider.NotePad/notes
content://com.threebanana.notes.provider.NotePadPending/notes/
content://com.threebanana.notes.provider.NotePad/media
content://com.threebanana.notes.provider.NotePad/topnotes/
content://com.threebanana.notes.provider.NotePad/media_with_owner/
content://com.threebanana.notes.provider.NotePad/add_media_for_note
content://com.threebanana.notes.provider.NotePad/notes_show_deleted
content://com.threebanana.notes.provider.NotePad/notes_with_images/
10. 一旦我们有了 URI，我们现在可以使用 Drozer 应用程序查询它。 为了查询它，我们需要
运行 模块并指定内容供应器的 URI，如下面的截图所示：
app.provider.query
如果 Drozer 能够查询和显示来自内容供应器的数据，这意味着内容供应器泄漏数据并且
存在漏洞，因为 Drozer 没有被明确地授予使用数据集的任何权限。
11. 为了修复此漏洞，开发人员需要做的是，在创建内容供应器时指定参
数 ，或者创建一些新的权限，另一个应用程序在访问供应器之
android:exported = false
前必须请求它。
3.5 不安全的文件存储
通常，开发人员为应用程序存储数据时，未指定文件的正确文件权限。 这些文件有时被标记
为全局可读，并且可以由任何其它应用程序访问而不需要请求权限。
为了检查这个漏洞，我们所需要做的是访问 ，之后使用 进
adb shell cd
入 。
/data/data/[package name of the app]
如果我们在这里执行一个简单的 ，就可以看到文件和文件夹的文件权限：
ls -l
# ls -l /data/data/com.aditya.example/files/userinfo.xml
-rw-rw-rw- app_200 app_200 22034 2013-11-07 00:01 userinfo.xml