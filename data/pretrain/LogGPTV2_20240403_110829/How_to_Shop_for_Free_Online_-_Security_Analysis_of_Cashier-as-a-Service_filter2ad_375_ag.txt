contingent upon the merchant-side program logic, which is 
less disciplined. How to securely call APIs has always been 
a challenge in programming, not specific to web APIs. For 
example, strcpy and setuid in C are notoriously difficult to 
call  securely.  In  this  sense,  it  is  not  a  surprise  that  CaaS 
APIs leave plenty of rooms for logic bugs in web stores.  
478
Perhaps  our  work  suggests  that  it  is  worthwhile  to 
revisit  the  possibility  of  payment  protocols,  assuming  that 
lessons have been learned from the unsuccessful adoptions 
of the techniques. Of course, the effectiveness of a protocol 
adoption should be put in perspective. After all, security of a 
theoretically-proven protocol often depends on many factors 
in  real  systems.  First,  its  incorrect  implementation  could 
bring in security bugs.  Also the assumptions underlying its 
design  can  be  totally  different  from  actual  operational 
settings.  As  an  example,  the  designer  of  a  protocol  could 
ignore  the  facts  that  anybody  (essentially  with  no  real 
identity)  is  eligible  to  be  a  seller,  or  a  real-world  system 
actually  needs  to  operate  in  concurrent  HTTP  sessions 
(Section  III.B.1).  Finally,  security  of  the  whole  system  is 
also contingent on how  the payment  module interacts  with 
other  modules,  e.g.,  bugs  could  exist  if  the  state  of  a 
shopping  cart  can  be  changed  during 
the  payment 
processing  (Section  III.B.3),  or  the  order  ID  is  retrieved 
from a client cookie (Section III.B.2). 
We  believe  an  important  contribution  of  our  work  is 
that it provokes a soul searching in both academia and the e-
commerce industry on the prior effort on building a secure 
and  usable  payment  system,  which  should  preserve  APIs’ 
flexibility, and achieve formally verified security guarantee.  
VII.  RELATED WORK 
techniques 
Technologies  on  security  protocol  verification.  For 
decades, 
for  verifying  protocols’  security 
properties  have  been  the  focus  of  many  studies.  Classic 
approaches can be grouped into two categories, according to 
Millen  [26].  The  first  category  is  based  on  an  algebraic 
model defined by Dolev and Yao [14]. Prominent examples 
of  these  techniques  include  Interrogator  [26]  and  NRL 
Protocol  Analyzer  [24][15],  in  which  protocol  flaws  are 
identified through searching a protocol’s state space for the 
paths  that  lead  to  insecure  states.  They  were  successfully 
applied  to  detect  previously  unknown  bugs  in  security 
protocols.  The  second  category  is  based  on  an  axiomatic 
system about protocol participants’ beliefs, as formalized by 
Burrows,  Abadi and Needham (a.k.a. BAN  logic) [7]. The 
BAN  logic  is  believed  to  be more  limited  than  the  Dolev-
Yao model, but it is decidable. The approach was applied on 
a  number  of  protocols,  such  as  Kerberos,  Needham-
Schroeder  public-key  protocol,  CCITT  X.509,  etc.  It  is 
worth noting that despite its proof, the Needham-Schroeder 
public-key  protocol  was  later  found  vulnerable  by  Lowe 
under the  man-in-the-middle  assumption [22]. The field of 
protocol  verification  has  been  advanced  significantly  over 
years.  Abadi’s  recent  tutorial  [2]  covers  many  techniques. 
Some may not fit very well into Millen’s classification, such 
as the approaches based on type systems [4].   
Research  has  also  been  conducted  on  analyzing  other 
security  protocols,  e.g.,  fairness  and  verifiability  [33]  of  a 
contract  signing  protocol  [3].  TulaFale  is  a  specification 
language  to  describe  SOAP-based  protocols  and  thus  to 
enable  formal  checking  of  security  properties  for  web 
services [5]. 
479
Security  issues  in  e-commerce.  Security  weaknesses  and 
flaws in e-commerce technologies were discussed in various 
sources.  Price  manipulation  bugs  existed  in  some  early 
shopping cart implementations, as reported in [32] and [27], 
which  used  the  cart  total  stored  in  a  browser  cookie  to 
generate the order. We found that today’s leading shopping 
carts, e.g., every cart that we studied, could not be similarly 
attacked. Another shopping cart bug was reported in [9]. It 
allowed items to have negative quantities.  
Also worth mentioning is a new payment protocol 3D-
Secure,  which  is  promoted  by  Visa  and  also  adopted  by 
MasterCard.  It  is  marketed  under  the  names  Verified  By 
Visa and MasterCard SecureCode. A main goal is to protect 
a credit card with a password to foil card-not-present attacks 
(e.g., using a stolen card number). Murdoch and Anderson 
discussed a set of weaknesses in 3D Secure [28], e.g., GUI 
design, registration procedure, privacy protections.    
Technologies  addressing  web  application  logic  bugs. 
Researchers have shown increased attention to logic bugs in 
web  applications.  The  proposed  technologies  fall  in  two 
categories:  (1)  those  helping  avoid  logic  bugs  in  new 
applications (a.k.a., the secure-by-construction approach); (2) 
those finding logic bugs in legacy applications.  
that 
Examples  of  the  technologies  in  category  1  include 
Swift  [12]  and  Ripley  [36].  They  are  both  built  upon 
distributing  compilers,  such  as  Google  Web  Toolkit  and 
Microsoft Volta, which automatically partition a single web 
program between the server and the client. Swift views the 
security task as a  “logic placement” problem. To tackle it, 
Swift allows the developers to annotate the source code for 
security  requirements  so  that  it  can  perform  information 
flow analysis to decide what logic can be securely placed on 
the client side. Ripley views the task as a logic replication 
problem: it runs a server-side replica of the client-side logic 
in 
so 
tampering  with 
inconsistencies  between 
replica. 
Technologies  in  category  2  for  legacy  applications  include 
NoTamper [9] and Waler [16]. NoTamper detects parameter 
validation  bugs  by  finding  conditions  checked  only  by  the 
client logic but not the server logic. Waler is a technology to 
generate  likely-invariants  based  on  runtime  traces,  and 
checks the likely-invariants against the source code.  
the  client  would  result 
the  client  and 
The  aforementioned  technologies  addresses  logic  bugs 
in  web  applications  architected  as  client-server  or  client-
frontend-backend. Our work explicitly focuses on  websites 
integrating third party web APIs. The logic bugs appear to 
be more elusive in this new context.  
the 
VIII.  CONCLUSIONS AND FUTURE WORK 
We  presented  our  analysis  for  Caas-based  web  stores, 
as  an  example  of  security  challenges  in  third-party  service 
integration.  We  found  serious  logic  flaws  in  leading 
merchant  applications,  popular  online  stores  and  a  CaaS 
provider  (i.e.,  Amazon  Payments),  which  can  be  exploited 
to cause inconsistencies between the states of the CaaS and 
the merchant. As a result, a malicious shopper can purchase 
an item at a lower price, shop for free after paying for one 
item and even avoid payment. We reported our findings to 
the  affected  parties  and  received  their  acknowledgements. 
Our further analysis revealed the logic complexity in CaaS-
based  checkout  mechanisms,  and  the  effort  required  to 
verify  their  security  property  when  developing  and  testing 
these systems. 
We believe that our study takes the first step in the new 
security problem space that hybrid web applications bring to 
us. Even for the security analyses of merchant applications, 
we have just scratched the surface, leaving many intriguing 
functionalities  (e.g.,  cancel,  return,  subscription,  auction, 
and  marketplace)  unstudied.  An  interesting  question  might 
be, for example, whether we can check out a $1 order and a 
$10 order, and cancel the $1 order to get $10 refunded.  We 
are also considering the security challenges that come with 
web  service  integrations  in  other  scenarios,  e.g.,  social 
networks  and  web  authentication  services.  Fundamentally, 
we  believe 
this  new  web 
programming  paradigm  demands  new  research  efforts  on 
ensuring the security quality of the systems it produces. 
the  emergence  of 
that 
ACKNOWLEDGMENT 
We  thank  Martín  Abadi,  Brian  Beckman,  Josh  Benaloh,  Cormac 
Herley,  Dan  Simon  and  Yi-Min  Wang  for  valuable  discussions, 
Akash Lal for important advices on Poirot, Beth Cate for the legal 
assistance  and  Robert  Schnabel  for  the  support  that  makes  this 
work  possible.    We  also  greatly  appreciate  Trent  Jaeger  for 
shepherding. Authors with IU were supported in part by the NSF 
Grant  CNS-0716292  and  CNS-1017782.  Rui  Wang  was  also 
supported in part by a Microsoft Research internship. 
REFERENCES 
[1]  Amazon Security Advisories. Amazon Payments Signature Version 2 
Validation. https://payments.amazon.com/sdui/sdui/security 
[2]  Martín  Abadi.  Security  Protocols:  Principles  and  Calculi  (Tutorial 
Notes),  Foundations  of  Security  Analysis  and  Design  IV,  FOSAD 
2006/2007 Tutorial Lectures, Springer-Verlag (2007), 1-23. 
[3]  N.  Asokan,  Victor  Shoup,  and  Michael  Waidner.  Asynchronous 
protocols  for  optimistic  fair  exchange.  In  Proceedings  of  IEEE 
Symposium on Research in Security and Privacy, pages 86–99, 1998.  
[4]  Karthikeyan  Bhargavan,  Cédric  Fournet,  Andrew  Gordon.  Modular 
verification of security protocol code by typing. ACM Symposium on 
Principles of Programming Languages (POPL), 2010 
[5]  Karthikeyan  Bhargavan,  Cédric  Fournet,  Andrew  Gordon,  Riccardo 
Pucella. TulaFale: A security tool for web services. In Symposium on 
Formal Methods for Components and Objects (FMCO), 2003 
[6]  BigCommerce. http://www.bigcommerce.com/ 
[7]  Michael Burrows, Martín Abadi, and Roger Needham. 1990. A logic 
of authentication. ACM Trans. Computer Systems 8, 1, 18-36. 
[8]  Ecommerce  Statistics  Compendium  2010.  http://econsultancy.com/ 
us/reports/e-commerce-statistics/downloads/2076-econsultancy-
ecommerce-statistics-uk-sample-pdf 
[9]  Prithvi Bisht, Timothy Hinrichs, Nazari Skrupsky, R. Bobrowicz, and 
V.  N.  Venkatakrishnan,  "NoTamper:  Automatically  Detecting 
Parameter  Tampering  Vulnerabilities  in  Web  Applications,"  ACM 
Conf. on Computer and Communications Security, 2010 
[10]  Dominique  Bolignano.  “Towards 
the  Formal  Verification  of 
Electronic Commerce Protocols,” Proceedings of the IEEE Computer 
Security Foundations Workshop, 1997. 
[11]  David  Chaum,  Amos  Fiat,  and  Moni  Naor.  Untraceable  electronic 
cash. In Proceedings on Advances in cryptology (CRYPTO '88). 
[12]  Stephen  Chong,  Jed  Liu,  Andrew  C.  Myers,  Xin  Qi,  K.  Vikram, 
Lantian  Zheng,  and  Xin  Zhen,  "Secure  Web  Applications  via 
Automatic  Partitioning,"  ACM  Symposium  on  Operating  Systems 
Principles (SOSP), October 2007. 
[13]  Benjamin Cox, J. D. Tygar, and Marvin Sirbu. 1995. NetBill security 
and  transaction  protocol.  In  Proceedings  of  the  1st  conference  on 
USENIX Workshop on Electronic Commerce (WOEC'95). 
[14]  Danny Dolev and Andrew C. Yao. 1981. On the Security of Public 
Key Protocols. Technical Report. Stanford University, Stanford, USA. 
[15]  Santiago Escobar, Catherine Meadows, and Jose Meseguer. 2005. A 
rewriting-based  inference  system  for  the  NRL  protocol  analyzer: 
grammar generation, the 2005 ACM workshop on Formal methods in 
security engineering (FMSE '05). ACM, New York, NY, USA, 1-12. 
[16]  Viktoria  Felmetsger,  Ludovico  Cavedon,  Christopher  Kruegel,  and 
Giovanni  Vigna, 
"Toward  Automated  Detection  of  Logic 
Vulnerabilities in Web Applications," USENIX Security Symposium, 
August 2010. 
Schemes. 
[17]  Fiddler Web Debugger. http://www.fiddler2.com/fiddler2 
[18]  Phillip  M.  Hallam-Baker.  Electronic 
Payment 
http://www.w3.org/ECommerce/roadmap.html 
[19]  Nevin  Heintze,  J.  D.  Tygar,  Jeannette  Wing,  and  H.  Chi  Wong. 
Model  checking  electronic  commerce  protocols.    The  2nd  USENIX 
Workshop on Electronic Commerce , Berkeley, CA, USA. 1996. 
[20]  Interspire Shopping Cart. http://www.interspire.com/shoppingcart 
[21]  Live HTTP Headers. http://livehttpheaders.mozdev.org 
[22]  Gavin  Lowe.  An  attack  on  the  Needham-Schroeder  public  key 
authentication protocol. Information Processing Letters 56(3), 1995 
[23]  Shiyong Lu and Scott A. Smolka. 1999. Model Checking the Secure 
Electronic  Transaction  (SET)  Protocol.  The  7th  International 
Symposium on Modeling, Analysis and Simulation of Computer and 
Telecommunication Systems (MASCOTS '99).  
[24]  Catherine Meadows. Applying Formal Methods to the Analysis of a 
Key Management Protocol. Journal of Computer Security, 1992. 
[25]  Catherine Meadows  and  Paul  F.  Syverson.  "A  Formal  Specification 
of  Requirements  for  Payment  Transactions  in  the  SET  Protocol," 
Financial Cryptography 1998 
[26]  Jonathan  K.  Millen.  The  Interrogator  Model.  IEEE  Symposium  on 
Security and Privacy 1995.. 
[27]  K.  K.  Mookhey,  "Common  Security  Vulnerabilities  in  e-commerce 
articles/common-
http://www.symantec.com/connect/ 
Systems," 
security-vulnerabilities-e-commerce-systems 
[28]  Steven  Murdoch  and  Ross  Anderson,  "Verified  by  Visa  and 
MasterCard  SecureCode:  or,  How  Not  to  Design  Authentication," 
Financial Cryptography and Data Security, January 2010 
[29]  NopCommerce. http://www.nopcommerce.com/ 
[30]  Poirot: 
concurrency 
sleuth. 
The 
http://research.microsoft 
[31]  Resources  –  Amazon  Payments.  https://payments.amazon.com/sdui 
.com /en-us/projects/poirot/  
/sdui/business/resources#cba 
[32]  SecurityFocus.com.  "3D3.Com  ShopFactory  Shopping  Cart  Cookie 
http://www. 
Vulnerability," 
Price 
Securityfocus.com/bid/6296/discuss 
Manipulation 
[33]  Vitaly Shmatikov and John C. Mitchell, Analysis of a fair exchange 
protocol,  Symposium  on  Network  and  Distributed  Systems  Security 
(NDSS '00), San Diego, CA, Internet Society, 2000. 
[34]  Softpedia,  "Choose 
the  Best  Open  Source  CMS  for  2010," 
http://news.softpedia.com/news/Choose-the-Best-Open-Source-CMS-
for-2010-158440.shtml 
[35]  TopTenReviews. 
eCommerce 
Software 
Review 
2011. 
http://ecommerce-software-review.toptenreviews.com 
[36]  K.  Vikram,  Abhishek  Prateek,  and  Benjamin  Livshits,  "Ripley: 
Automatically  Securing  Web  2.0  Applications  Through  Replicated 
Execution,"  ACM  Conference  on  Computer  and  Communications 
Security (CCS), Nov. 2009. 
[37]  Rui Wang, Shuo Chen, XiaoFeng Wang, Shaz Qadeer. “How to Shop 
for  Free  Online  --  Security  Analysis  of  Cashier-as-a-Service  Based 
Web Stores”. Technical Report, IU-CS-TR690. Supporting materials 
are available at http://research.microsoft.com/~shuochen/caas/supp/ 
[38]  Rui Wang, Shuo Chen, XiaoFeng Wang, Shaz Qadeer. “A Case Study 
of  CaaS  Based  Merchant  Logic,”  http://research.microsoft.com/en-
us/people/shuochen/caaslogiccasestudy.aspx 
[39]  Wikipedia, 
"Secure 
Electronic 
Transaction," 
http://en. 
wikipedia.org/wiki/Secure_Electronic_Transaction 
480