(cid:6)(cid:3)(cid:9)(cid:11)(cid:9)(cid:4)(cid:12)(cid:9)(cid:13)(cid:6)(cid:2)(cid:8)(cid:8)(cid:4)(cid:5)(cid:14)(cid:5)(cid:3)
(cid:5)(cid:14)(cid:5)(cid:3)(cid:4)(cid:6)(cid:13)(cid:14)(cid:3)(cid:9)(cid:13)(cid:11)(cid:11)(cid:2)(cid:9)(cid:8)
(cid:12)(cid:9)(cid:13)(cid:18)(cid:2)(cid:4)(cid:5)(cid:14)(cid:3)(cid:2)(cid:9)(cid:14)(cid:15)(cid:11)
(cid:12)(cid:9)(cid:13)(cid:18)(cid:2)
(cid:9)(cid:2)(cid:1)(cid:5)(cid:8)(cid:3)(cid:2)(cid:9)(cid:4)(cid:6)(cid:13)(cid:14)(cid:3)(cid:9)(cid:13)(cid:11)(cid:11)(cid:2)(cid:9)(cid:8)
(cid:2)(cid:15)(cid:11)(cid:4)(cid:5)(cid:14)(cid:5)(cid:3)
(cid:2)(cid:14)(cid:21)(cid:4)(cid:5)(cid:14)(cid:5)(cid:3)
(cid:19)(cid:15)(cid:5)(cid:14)
Figure 6: Flame Graphs for Intel SPDK running inside Intel SGX enclave plotted using TEE-PERF: (top) unoptimized version
of SPDK, and (bottom) optimized version of SPDK.
accesses, e.g. thread or page pinning to minimize the remote
memory accesses. However, both proﬁlers rely on hardware-
speciﬁc counters, such as instruction-based sampling (IBS).
Further, they are tightly integrated with Linux perf to iden-
tify memory accesses. In contrast to MemProf and Memphis,
TEE-PERF does not require any architecture- and platform-
speciﬁc counters. Furthermore, our proﬁler is geared for the
trusted execution environments.
Coz [14] introduced causal proﬁling to locate optimization
opportunities in concurrent applications. The key idea in
Coz is to slowdown the execution to have the same relative
effect of virtually speeding up the code section. In this way,
it is able to identify causal relationship between two code
segments executing concurrently. Likewise, Coz, TEE-PERF
targets unmodiﬁed multi-threaded applications. In contrast to
Coz, TEE-PERF targets proﬁling applications running inside
the TEEs. More importantly, Coz also relies on Linux perf
to collect the program counter and user-space call stack. In
contrast, our approach is completely platform independent.
Inspector [29] proposed a data provenance library for
unmodiﬁed multithreaded applications to provide detailed
information about thread schedules, and memory accesses.
However, Inspector relies on Linux perf and Intel Processor
Trace (Intel PT) to provide these performance statistics. Our
approach does not require Intel PT to trace the execution.
Proﬁlers for distributed systems, such as Conductor [35],
Fay [15], and Sieve [30], target the same research direction.
These systems provide detailed overview of performance bot-
tlenecks in the applications. However, these proﬁlers target
distributed systems, and they are orthogonal to our work since
we are currently targeting single-node systems. Moreover, our
primary focus is on applications running inside the TEEs.
VI. CONCLUSION
In this paper, we presented TEE-PERF, an architecture-
and platform-independent proﬁler for TEEs. TEE-PERF sup-
ports unmodiﬁed multithreaded applications without relying
on TEE-speciﬁc hardware counters or platform-speciﬁc ker-
nel features. Further, TEE-PERF supports accurate method-
level proﬁling without employing instruction pointer sam-
pling. We have implemented TEE-PERF with an easy to use
interface, and integrated it with Flame Graphs to visualize
performance bottlenecks. We evaluated TEE-PERF based on
a multithreaded benchmark suite and real-world applications.
Our experimental evaluation shows that TEE-PERF incurs low
proﬁling overheads, while providing accurate proﬁle measure-
ments compared to perf.
Software availability. TEE-PERF along with the entire ex-
perimental is available: https://github.com/mbailleu/tee-perf
Acknowledgements. We thank anonymous reviewers and our
shepherd Sara Bouchenak for their helpful comments. This
work was supported by the European Unions Horizon 2020 re-
search and innovation program under grant agreement 645011
(SERECA), Huawei Research, and the UK Research Institute
in Secure Hardware and Embedded Systems (RISE).
420
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:15:59 UTC from IEEE Xplore.  Restrictions apply. 
[1] Flame Graphs.
html.
REFERENCES
http://www.brendangregg.com/ﬂamegraphs.
Shielded Execution. In Proceedings of the 12th ACM European
Conference on Computer Systems (EuroSys), 2017.
[2] GDB: The GNU Project Debugger.
https://www.gnu.org/
software/gdb/.
[3] GNU gprof. https://sourceware.org/binutils/docs/gprof/.
[4] Intel DPDK. http://dpdk.org/.
[5] Intel VTune Ampliﬁer. https://software.intel.com/en-us/vtune.
[6] perf: Linux proﬁling with performance counters. https://perf.
wiki.kernel.org/index.php/Main Page.
[7] RocksDB Benchmarking Tool.
https://github.com/facebook/
rocksdb/wiki/Benchmarking-tools.
[8] AMD. AMD Secure Encrypted Virtualization (SEV). https:
//developer.amd.com/sev/.
Building
a
secure
[9] ARM.
trustzone
http://infocenter.arm.com/help/topic/com.arm.
system using
technology.
doc.prd29-genc-009492c/PRD29-GENC-009492C trustzone
security whitepaper.pdf, 2009.
[10] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin,
C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. L.
Stillwell, D. Goltzsche, D. Eyers, R. Kapitza, P. Pietzuch, and
C. Fetzer. SCONE: Secure Linux Containers with Intel SGX.
In Proceedings of the 12th USENIX Symposium on Operating
Systems Design and Implementation (OSDI), 2016.
[11] M. Bailleu, J. Thalheim, P. Bhatotia, C. Fetzer, M. Honda, and
K. Vaswani. SPEICHER: Securing lsm-based key-value stores
using shielded execution. In 17th USENIX Conference on File
and Storage Technologies (FAST), 2019.
[12] A. Baumann, M. Peinado, and G. Hunt. Shielding Applications
from an Untrusted Cloud with Haven.
In Proceedings of the
11th USENIX Symposium on Operating Systems Design and
Implementation (OSDI), 2014.
[13] V. Costan and S. Devadas. Intel SGX Explained, 2016.
[14] C. Curtsinger and E. D. Berger. Coz: Finding code that counts
with causal proﬁling. In Proceedings of the 25th Symposium on
Operating Systems Principles (SOSP), 2015.
[15] U. Erlingsson, M. Peinado, S. Peter, and M. Budiu.
Fay:
Extensible distributed tracing from kernels to clusters.
In
Proceedings of the Twenty-Third ACM Symposium on Operating
Systems Principles (SOSP), 2011.
[16] A. T. Gjerdrum, R. Pettersen, H. D. Johansen, and D. Johansen.
Performance of trusted computing in cloud infrastructures with
intel sgx. In International Conference on Cloud Computing and
Services Science (CLOSER), 2017.
[17] Intel Software Guard Extensions SDK for Linux OS.
https://download.01.org/intel-sgx/linux-1.8/docs/Intel SGX
SDK Developer Reference Linux 1.8 Open Source.pdf. Last
accessed: Dec, 2018.
[18] Intel Storage Performance Development Kit. http://www.spdk.
io. Last accessed: Dec, 2018.
[19] R. Krahn, B. Trach, A. Vahldiek-Oberwagner, T. Knauth,
P. Bhatotia, and C. Fetzer. Pesos: Policy enhanced secure object
store.
In Proceedings of the Thirteenth EuroSys Conference
(EuroSys), 2018.
[20] D. Kuvaiskii, O. Oleksenko, S. Arnautov, B. Trach, P. Bhatotia,
P. Felber, and C. Fetzer. SGXBOUNDS: Memory Safety for
[21] R. Lachaize, B. Lepers, and V. Qu´ema. Memprof: A memory
proﬁler for numa multicore systems.
In Proceedings of the
USENIX Conference on Annual Technical Conference (USENIX
ATC), 2012.
[22] C. McCurdy and J. S. Vetter. Memphis: Finding and ﬁxing
numa-related performance problems on multi-core platforms.
In IEEE International Symposium on Performance Analysis of
Systems and Software (ISPASS), 2010.
[23] O. Oleksenko, D. Kuvaiskii, P. Bhatotia, and C. Fetzer. Fex:
A software systems evaluator.
In 47th Annual IEEE/IFIP
International Conference on Dependable Systems and Networks
(DSN), 2017.
[24] M. Orenbach, M. Minkin, P. Lifshits, and M. Silberstein. Eleos:
ExitLess OS services for SGX enclaves. In Proceedings of the
12th ACM European ACM Conference in Computer Systems
(EuroSys), 2017.
[25] C. Ranger, R. Raghuraman, A. Penmetsa, G. Bradski, and
C. Kozyrakis. Evaluating MapReduce for multi-core and mul-
tiprocessor systems. In Proceedings of the IEEE 13th Interna-
tional Symposium on High Performance Computer Architecture
(HPCA), 2007.
[26] RISC-V. Keystone Open-source Secure Hardware Enclave.
https://keystone-enclave.org/.
[27] RocksDB — A persistent key-value store. https://rocksdb.org/.
[28] S. Shinde, D. Le Tien, S. Tople, and P. Saxena. PANOPLY:
Low-TCB Linux Applications with SGX Enclaves. In Proceed-
ings of the Network and Distributed System Security Symposium
(NDSS), 2017.
[29] J. Thalheim, P. Bhatotia, and C. Fetzer.
INSPECTOR: Data
Provenance Using Intel Processor Trace (PT).
In 2016 IEEE
36th International Conference on Distributed Computing Sys-
tems (ICDCS), 2016.
[30] J. Thalheim, A. Rodrigues, I. E. Akkus, P. Bhatotia, R. Chen,
B. Viswanath, L. Jiao, and C. Fetzer. Sieve: Actionable insights
from monitored metrics in distributed systems. In Proceedings
of the 18th ACM/IFIP/USENIX Middleware Conference (Mid-
dleware), 2017.
[31] B. Trach, A. Krohmer, F. Gregor, S. Arnautov, P. Bhatotia,
and C. Fetzer. ShieldBox: Secure Middleboxes using Shielded
Execution. In Proceedings of the ACM SIGCOMM Symposium
on SDN Research (SOSR), 2018.
[32] J. Treibig, G. Hager, and G. Wellein. Likwid: A lightweight
performance-oriented tool suite for x86 multicore environments.
In Proceedings of the 2010 39th International Conference on
Parallel Processing Workshops (ICPPW), 2010.
[33] C.-C. Tsai, D. E. Porter, and M. Vij. Graphene-SGX: A practical
library OS for unmodiﬁed applications on SGX. In Proceedings
of the USENIX Annual Technical Conference (USENIX ATC),
2017.
[34] N. Weichbrodt, P.-L. Aublin, and R. Kapitza.
sgx-perf: A
Performance Analysis Tool for Intel SGX Enclaves.
In Pro-
ceedings of the ACM/IFIP/USENIX International Conference
on Middleware (Middleware), 2018.
[35] A. Wieder, P. Bhatotia, A. Post, and R. Rodrigues. Orchestrating
the deployment of computations in the cloud with conductor. In
Presented as part of the 9th USENIX Symposium on Networked
Systems Design and Implementation (NSDI), 2012.
421
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:15:59 UTC from IEEE Xplore.  Restrictions apply.