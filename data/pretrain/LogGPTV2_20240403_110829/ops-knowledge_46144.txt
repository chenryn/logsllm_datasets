User: 请提供一个Python脚本，用于监测服务器CPU和内存的使用情况，并将结果发送到指定邮箱。
Assistant: 这里提供一个完整的Python脚本，可以实现监测服务器CPU和内存的使用情况，并将结果发送到指定的邮箱。需要先安装psutil和smtplib模块，并设置好邮箱账号和密码。

```python
import psutil
import smtplib
import time
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header


def get_cpu_usage():
    """
    获取CPU使用率
    """
    cpu_usage = psutil.cpu_percent(interval=1)
    return cpu_usage


def get_memory_usage():
    """
    获取内存使用情况
    """
    mem = psutil.virtual_memory()
    memory_usage = {'total': mem.total, 'available': mem.available, 'percent': mem.percent}
    return memory_usage


def send_email(email_address, email_password, to_address, title, content):
    """
    发送邮件
    """
    try:
        smtp_server = 'smtp.' + email_address.split('@')[1]
        smtp_port = 25
        smtp = smtplib.SMTP(smtp_server, smtp_port)
        smtp.login(email_address, email_password)

        msg = MIMEMultipart()
        msg['From'] = email_address
        msg['To'] = to_address
        msg['Subject'] = Header(title, 'utf-8')

        msg.attach(MIMEText(content, 'plain', 'utf-8'))

        smtp.sendmail(email_address, to_address, msg.as_string())
        smtp.quit()
        return True

    except Exception as e:
        print('发送邮件失败：', e)
        return False


if __name__ == '__main__':
    # 邮箱配置
    email_address = '<发送邮件的邮箱地址>'
    email_password = '<发送邮件的邮箱密码>'
    to_address = '<接收邮件的邮箱地址>'

    while True:
        # 获取CPU使用率和内存使用情况
        cpu_usage = get_cpu_usage()
        memory_usage = get_memory_usage()

        # 组装邮件内容
        title = '服务器监测'
        content = 'CPU使用率：{}%\n内存总量：{}MB\n可用内存：{}MB\n内存使用率：{}%'.format(
            cpu_usage, int(memory_usage['total'] / 1024 / 1024),
            int(memory_usage['available'] / 1024 / 1024), memory_usage['percent'])

        # 发送邮件
        send_email(email_address, email_password, to_address, title, content)

        # 每隔1小时发送一次邮件
        time.sleep(3600)
```