In [1]: import shelve
In [1]: import shelve
Out[3]: ('key': [1]
In [2]: d = shelve.open('mutable_nonlossy.s')
Do you really want to exit ([y]/n)?
In[8]:
In [7]: d.close()
In [6]: d['key'] = temp_list
In [5]: temp_list.append(1)
In [4]: temp_list = d['key']
In[3]:d['key']=[]
In [2]: d = shelve.open('mutable_nonlossy.s')
Out[3]: {'key': []}
In [3]: d.
In [2]: d = shelve.open('mutable_lossy.s')
In[3]:d.
In [1]: import shelve
www.TopSage.com
数据持久性丨361
---
## Page 376
现在，看一下我们的修改是否被持久化了。
赋值它到shelve对象：
在接下来的示例中，我们将设置writeback标志为True，并且操控一个列表，而不重新
362
个示例，演示了序列化一个简单的字典：
一旦使用了“easy_install.PyYAML”
用之间获得数据，YAML是一个好的折中方案。
解析器已经在许多其他语言中实现。如果你需要在Python应用与以另一种语言编写的应
遇到编辑配置文件是一个好的选择的情况下，YAML或许是一个好选择。第二，YAML
YAML是非常有好处的。首先，YAML是可读的。语法看起来类似于配置文件。如果你
个原因不能保证YAML在所有的情况下都是正确选择，但是在某些情况下，选择使用
必须安装并使用YAML？有两个选择YAML而不选择pickle的吸引人的原因。虽然这两
最简单的方法是使用“easy_installPyYAML”。但是当pickle是内建的，又为什么
式被用来保存、获得和更新数据。数据通常是分层的。或许在Python中开始使用YAML
确，似乎取决于你问的人是谁。无论哪一个答案，它是一种数据格式，经常以纯文本方
YAML代表“yet another markup language”（已经是另一种标识语言），究竟哪一个正
有人说YAML代表“YAML ain't markup language”（YAML不是标识语言），还有人说
YAML
用的模块。
shelve提供一个简便的方法处理数据持久性。会有一些不足，但是总体来说还是非常有
正如我们所希望的，它是持久的。
In [2]: d = shelve.open('mutable_nonlossy.s')
In [1]: import shelve
Do you really want to exit ([y]/n)?
In [4]: d['key'].append(1)
In [3]: d['key']=[]
In [2]: d = shelve.open('mutable_nonlossy.s', writeback=True)
In [1]: import shelve
In[5]:d.close()
[6]:
第12章
www.TopSage.com
，可以序列化和反序列化YAML数据。以下是一
---
## Page 377
自之前的示例。以下示例演示了如何dump相同的字典：
你或许不需要dump你的YAML数据为可读模式。让我们介绍如何序列化字典，该字典来
载它。
当使用yaml模块时，你或许会找到自己循环创建的数据，dump这些数据到磁盘，然后加
YAML文件中导出的示例：
如果希望对文件进行反序列化，执行与dump()示例相反的操作。以下是如何将数据从
以下是YAML文件的示例：
正在序列化的对象。
而不是默认方式。这看起来有点像数据对象的字符串转换，而其中的数据对象正是我们
化的字典、YAML输出文件，以及一个参数，该参数告诉YAML库以块方式进行写输出
用yaml模块中的dump()函数序列化字典（名为d）。传递给dump()的参数包括正在序列
创建一个字典（名为d），该字典中包括了我们希望进行序列化的数据。最后，我们使
yaml）。接下来，我们创建一个可写入的文件，该文件以后会用来保存YAML。之后，
这个示例非常简单，但是还是让我们介绍一下。首先要做的是载人YAML模块（名为
load()函数。load()返回一个字典，该字典等同于输出字典。
件。这次我们从磁盘中的YAML文件创建一个可读的文件对象。最后，从yaml模块调用
如dump()示例中所示，首先必须加载YAML模块（yaml）。接下来，创建一个YAML文
In [1]: import yam]
In [3]: yaml.load(yaml_file)
In [2]: yaml_file = open('test.yaml','r')
jmjones@dinkgutsy:~/code$ cat test.yaml
In [5]: yaml_file.close()
In [4]: yaml.dump(d, yaml_file, default_flow_style=False)
In [3]: d = {'foo': 'a', 'bar': 'b', 'bam': [1, 2,3]}
In [2]: yaml_file = open('test.yaml', 'w')
In [1]: import yaml
bar:b
'bar': 'b', 'foo': 'a'}
www.TopSage.com
数据持久性丨363
---
## Page 378
使用块格式的示例：
default_flow_style风格并使用块格式的示例，以及不具有default_flow_style风格，不
以下是对一些数据结构的对比，使用了块风格序列化和非块风格序列化。以下是具有
到标准输出。因此，在以下的示例中，我们放弃了文件对象，直接输出YAML的结果。
件的内容，就很容易错过这些示例。yaml模块中的dump（）函数的文件参数是可选的。
来展示这些差别。但是在我们这样做之前，如果我们没有保留使用cat显示的YAML文
上不是这样）。如果放弃了“文件”（或是“流”
（PyYAML文档在涉及“文件”对象时，将文件对象作为“流”对象来引用，但是实际
数组式的数据结构（如列表或是字典）的时候，差别就会出现。让我们对比一些示例
这看起来与块模式格式非常相似，除了bam列表值之外。当存在一些层次的递归或一些
这是YAML文件看起来的样子：
-C:C
In [6]:print yaml.dump(d2, default_flow_style=False)
In[5]:d=[t'a':a'},(b'：b'},{c：c}]
In[4]:print yaml.dump(d)
-a:a
In[3]:print yaml.dump(d, default_flow_style=False)
In [2]:d={’first':{'second':{'third':{’fourth’:'a'}}）}
In [1]:import yam]
first:
first:
In[5]:yaml_file.close()
In [4]:yaml.dump(d, yaml_file)
In [3]:d={foo′:'a,'bar′:b',bam':[1,2,3]}
In[2]:yaml_file =open('nonblock.yaml',w′)
In[1]:import yam]
second:
second:
bam:[1,2,3]bar:b foo:a
$cat nonblock.yaml
jmjones@dinkgutsy:~/code
third:{fourth:a}
第12章
third:
fourth:a
www.TopSage.com
）这个参数，
dump（）将写序列化对象
---
## Page 379
以下是与之前模块相反的示例：
没有任何输出。这表明所有事情运行正常。
当我们运行之前的模块时，以下是我们看到的输出：
素，然后进行序列化：
custom_class”示例中使用的模块。从MyClass创建一个对象，向对象中添加一些元
十分相似。以下示例将进一步使用相同的custom_class模块，这是我们在“pickle
如果你希望序列化一个自定义类，那会怎么样呢？yaml模块的行为与pickle自定义类
#!/usr/bin/env python
jmjones@dinkgutsy:~/code$
 jmjones@dinkgutsy:~/code$ python custom_class_yaml.py
yaml_file.close()
my_obj.add_item(2)
my_obj = custom_class.Myclass()
#I/usr/bin/env python
import custom_class
import yaml
In [10]: print yaml.dump(d3)
In [9]: print yaml.dump(d3, default_flow_style=False)
In [8]: d3 = [{'a': 'a'}, {'b': 'b'}, {'c': [1, 2, 3, 4, 5]]
In [7]: print yaml.dump(d2)
C:[1,2,3,4,5]
{b：b}
{a:a}
b: b
a:a
{q :9}
S
34
12
www.TopSage.com
数据持久性丨365
DG
---
## Page 380
366丨第12章
至于安装ZODB，只需要简单地执行“easy_install ZODB3”即可。ZODB模块有一些
ZODB或许应该编人“关系持久”部分而不是“简单持久”部分。但是，这个对象数据
的功能。例如，如果在你的操作中需要原子性，ZODB提供了事务处理。如果需要一个
ZODB简单灵活的用法与序列化到pickle或是YAML十分相似，但是ZODB具有按需定制
序列化数据的另一个选择是Zope的ZODB模块。ZODB表示“ZopeObjectDatabase”
ZODB
这与本章之前运行的unpickle示例的输出结果相同，这是我们希望看到的结果。
作为使用ZODB的一个简单的例子，我们创建了一个ZODB存储对象，并添加一个字典
依赖，但是easy_install解决了该问题，它可以下载并安装ZODB模块需要的任何依赖。
shelve而不是一个关系数据库。因此，我们决定保留ZODB在“简单持久”部分中。
当我们运行它时，可以看到以下结果：
加载YAML文件到对象中并输出对象。
这个脚本加载yaml和custom_class模块。从之前创建的YAML创建一个可读文件对象，
和一个列表到其中。以下是实现序列化字典和列表的代码：
象之间的关系。我们也展示了一些更基本的ZODB的特征。在示例中，它看起来更像是
库不能准确地适应我们多年来已经熟悉的关系数据库模式，尽管你可以简单地建立对
更加可扩展的持久存储，可以使用zEO，这是Zope的发布对象存储。
conn = db.open()
filestorage = ZoDB.FileStorage.FileStorage('zodb_filestorage.db')
import ZODB
#!/usr/bin/env python
jmjones@dinkgutsy:~/code$ python custom_class_unyaml.py
printmy_obj
my_obj = yaml.load(yaml_file)
importcustom_class
import yaml
import
tZODB.FileStorage
www.TopSage.com
PDG
---
## Page 381
ZODB进行同样的处理。但是这里不使用相同的MyClass示例（我们将在以后进行解
我们已经演示了如何使用其他数据持久框架序列化自定义类，接下来将演示如何使用
果：
在运行对数据库进行操作的代码之后，如果你运行这个代码，可以看到如下的输出结
的数据库，但是这次是读取数据而不是写人数据：
经提交了一些数据，但是你可能希望再次取回数据。以下是一个示例，演示了打开相同
你已经创建了一个ZODB数据存储容器（例如在这个示例中的文件存储对象），并且已
使用conn.close()关闭数据库连接。
的列表和字典）的根对象。之后，使用transaction.commit()提交所做的修改，最后,
open()打开数据库对象，获得它的根节点。这时可以更新数据结构（我们使用的是临时
FileStorage对象。然后创建一个DB对象并连接它到FileStorage对象。然后，我们使用
要注意这一点。现在我们将继续）。接下来，通过指定使用的数据库文件来创建一个
别扭。对于我们，之前加载的transaction模块应该被赋予zoDB前缀。无论如何你需
介绍一点别的内容。假设提供加载的模块不包括一个可识别前缀，那么看起来会有些
自解释性，尤其给出了数据持久性的其他一些示例，我们将快速地进行介绍。
个创建并初始化的持久存储，用法与pickle或YAML就非常相似了。这个示例具有很好的
与看到的使用pickle或YAML完成的工作相比，ZODB需要更多的代码，但是一旦你有一
jmjones@dinkgutsy:~/code$ python zodb_read.py
conn.close()
db = ZODB.DB(filestorage)
import ZODB.FileStorage
#1/usr/bin/env python
print root.items(）
root = conn.root()
conn = db.open()
import ZODB
conn.close()
transaction.commit()
root['dict']={'this':'is',
root['list']
root = conn.root()
'is',
'is',
'a'，
list'), ('dict', {'this': ‘is','a': ‘dictionary′}）]
[,Kreuorotp. :,e.
'a',
www.TopSage.com
‘list']
数据持久性丨367
---
## Page 382
368丨第12章
到这些。我们也创建deposit()和withdraw()方法。这两种方法正向或反向更新对象的
persistent.Persistent而来的子类执行同样的后台操作，使得ZODB很容易被序列
用的模块。如何瞄一眼代码就可以告诉读者ZODB代码在这里被使用了？不能）。从
会在以后进行解析。account类是persistent.Persistent的子类（对于persistent，
这是一个非常简单的用于管理资金的account类。我们定义一个outofFunds异常，这
保存它到磁盘。以下是这次使用的自定义类：
释）。正如其他框架一样，定义一个类，然后从其中创建一个对象，再告诉序列化引擎
以下是一些代码，用于序列化我们介绍的自定义类：
加或减之后都返回收支结余。
抛出outofFunds异常，该异常是之前已经介绍过的。deposit()和withdraw在对资金或
有足够的资金在balance属性中。如果没有足够的资金在balance中，withdraw()方法将
balance属性，这取决于被调用的方法。withdraw()方法在减除资金的同时，检查是否
化。在类的定义中，我们创建自定义的_str_和_repr_string转换。你将在之后看
我们有相同的观点，即属性应该提供一个有意义的前缀，该前缀应该是人们将会使
 #1/usr/bin/env python
class OutofFunds(Exception):
#!/usr/bin/env python
import custom_class_zodb
import ZODB
class Account(persistent,Persistent):
import persistent
import transaction
pass
defw
def
def
self.balance = starting_balance
return self.balance
self.balance -= amount
return self.balance
init_
raise OutofFunds
"Account %s, balance %s" % (self.name, self.balance)
(self):
(self,name,starting_balance=o):
www.TopSage.com
---
## Page 383
不大。以下是一个代码段，将打开之前创建的数据库并从noah账户转移300（假设是美
我们如何打开数据库并为不同账户修改数据？如果它不允许我们这样做，这个代码用处
代码不仅创建了我们需要的对象，而且也将它们保存到了磁盘以备将来使用。
我们运行显示ZODB数据库内容的模块，以下是我们看到的内容：
元）到jeremy账号：
以下是这个示例的输出：
1000（假设是$1,000.00 USD，我们没有对货币的单位进行识别）。
象为ZODB数据库。这两个对象是noah账户和jeremy账户，这两个创建的账户都有结余
列表。我们加载自己的模块，从一个自定义类中创建两个对象，并且序列化这两个对
这个示例与之前的ZODB示例几乎相同。在ZODB示例中我们序列化了一个字典和一个
root = conn.root()
import ZoDB
#!/usr/bin/envpython
 jmjones@dinkgutsy:~/code$ python zodb_custom_class.py
filestorage = ZODB.FileStorage.FileStorage('zodb_filestorage.db')
[('jeremy', Account jeremy, balance 10oo), ('noah', Account noah, balance 1000)]
Account jeremy，balance 1000
conn.close()