999
object causes MainPage to become the active page. The second
parameter is passed as an object that can be used by the page to provide
context information about what to display. In this code, the parameter is
a string containing the customer name.
5. Open the ViewModel.cs file in the Code and Text Editor window and
find the ViewModel constructor. The code in this constructor has been
refactored slightly, and the statements that initialize the view state have
been moved to a separate method named _initializeState, as shown here:
Click here to view code image
public ViewModel()
{
    _initializeState();
    this.customers = DataSource.Customers;
}
private void _initializeState()
{
    this.currentCustomer = 0;
    this.IsAtStart = true;
    this.IsAtEnd = false;
    this.NextCustomer = new Command(this.Next, () =>
        this.customers.Count > 1 && !this.IsAtEnd);
    this.PreviousCustomer = new Command(this.Previous, () =>
        this.customers.Count > 0 && !this.IsAtStart);
}
6. Add another constructor to the ViewModel class. This constructor should
take a string containing a customer name and filter the records in the
data source by using this name, as follows:
Click here to view code image
public ViewModel(string customerName)
{
    _initializeState();
    string[] names = customerName.Split(new[] {' '}, 2,
        StringSplitOptions.RemoveEmptyEntries);
    this.customers =
        (from c in DataSource.Customers
         where string.Compare(c.FirstName.ToUpper(),
names[0].ToUpper()) == 0 &&
         (names.Length > 1 ?
             string.Compare(c.LastName.ToUpper(),
names[1].ToUpper()) == 0 : true)
         select c).ToList();
Download from finelybook PI:EMAIL
1000
}
A customer’s name can contain two parts: a first name and a last name.
The Split method of the String class can break a string into substrings
based on a list of separator characters. In this case, the Split method
divides the customer name into a maximum of two pieces if the user
provides a first name and a last name separated by one or more space
characters. The results are stored in the names array. The LINQ query
uses this data to find all customers where the first name matches the first
item in the names array and the last name matches the second item in the
names array. If the user specifies a single name, the names array will
contain only one item, and the LINQ query matches only against the
first name. To remove any case sensitivity, all string comparisons are
performed against the upper case versions of the strings. The resulting
list of matching customers is assigned to the customers list in the view
model.
7. Return to the MainPage.xaml.cs file in the Code and Text Editor
window.
8. Add the OnNavigatedTo method shown here to the end of the MainPage
class, after the constructor:
Click here to view code image
public sealed partial class MainPage : Page
{
    public MainPage()
    {
        ...
    }
    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
        string customerName = e.Parameter as string;
        if (!string.IsNullOrEmpty(customerName))
        {
            ViewModel viewModel = new ViewModel(customerName);
            this.DataContext = viewModel;
        }
    }
}
The OnNavigatedTo method runs when the application displays
(navigates to) this page by using the Navigate method. Any arguments
Download from finelybook PI:EMAIL
1001
provided appear in the Parameter property of the NavigationEventArgs
parameter. This code attempts to convert the data in the Parameter
property to a string, and if it is successful, it passes this string as the
customer name to the ViewModel constructor. The resulting ViewModel
(which should contain only customers that match this name) is then set
as the data context for the page.
9. On the Build menu, click Build Solution and verify that the solution
compiles successfully.
As a final bit of polish, the next exercise adds a set of icons that Windows
10 and Cortana can use to represent the app visually. These icons are more
colorful than the stock gray-and-white cross images provided by the Blank
App template.
Add icons to the Customers app
1. In Solution Explorer, right-click the Assets folder, point to Add, and
then click Existing Item.
2. In the Add Existing Item - Customers dialog box, move to the
\Microsoft Press\VCSBS\  Chapter 26\Resources folder in your
Documents folder, select the three AdventureWorks logo files in this
folder, and then click Add.
3. In Solution Explorer, double-click the Package.appxmanifest file to
display it in the Manifest Designer window.
4. Click the Visual Assets tab. Then, in the left pane, click Medium Tile.
5. Scroll down to the Preview Images section, and in the list of Scaled
Assets click the ellipsis button directly below the Scale 100 image.
Browse to the Assets folder, click AdventureWorksLogo150x150.png,
and then click Open. The image for this asset should be displayed in the
box.
6. In the left pane, click App Icon.  Scroll down to the Preview Images
section, and in the list of Scaled Assets click the ellipsis button directly
below the Scale 100 image. Browse to the Assets folder, click
AdventureWorksLogo44x44.png, and then click Open.
7. In the left pane, click Splash Screen.  Scroll down to the Preview Images
Download from finelybook PI:EMAIL
1002
section, and in the list of Scaled Assets click the ellipsis button directly
below the Scale 100 image. Browse to the Assets folder, click
AdventureWorksLogo620x300.png, and then click Open.
8. On the Debug menu, click Start Without Debugging to build and run the
application. Verify that the splash screen appears momentarily when the
app starts running, and then the details of the customer named Orlando
Gee are displayed. You should be able to move back and forth through
the list of customers as before. By running the app, you have also
registered the voice commands that Cortana can use to invoke the app.
9. Close the app.
You can now test voice activation for the Customers app.
Test the search capability
1. Activate Cortana, and then speak the following query or type it in the
search box:
Customers show details for Brian Johnson
Note Remember to alert Cortana first with the “Hey, Cortana”
prompt if you are talking rather than typing. Cortana should
respond in the same way regardless of whether you speak a
command or type it.
Cortana should recognize that this command should be directed to the
Customers app.
Download from finelybook PI:EMAIL
1003
Cortana will then launch the Customers app and display the details for
Brian Johnson. Notice that the Previous and Next buttons in the
command bar are not available because there is only one matching
customer.
Download from finelybook PI:EMAIL
1004
2. Return to Cortana, and then speak the following query or type it in the
search box:
Search for John in Customers
This time, the app finds all customers who have the first name, John.
More than one match is returned, and you can use the Previous and Next
buttons in the command bar to move between the results.
3. Experiment with other searches. Notice that you can use the forms
“Search for …,” “Show details for …,” and “Show details of …” with
the app name specified at the start of the command or at the end
(prefixed by “in”). Notice that if you type a query with a different form,
Download from finelybook PI:EMAIL
1005
Cortana will not understand it and will instead perform a Bing search.
4. When you have finished, return to Visual Studio.
Providing a vocal response to voice commands
In addition to sending voice commands to an app, you can make an app
respond vocally. To do this, UWP apps make use of the speech synthesis
features provided by Windows 10. Implementing this functionality is actually
reasonably straightforward, but there is one piece of etiquette that you should
observe: an app should respond vocally only if it is spoken to. If the user
types a phrase instead of uttering it, the app should remain silent. Fortunately,
you can detect whether a command is spoken or typed by examining the
commandMode property returned by performing the semantic interpretation
of the command, as follows:
Click here to view code image
SpeechRecognitionResult speechRecognitionResult = ...;
string commandMode = speechRecognitionResult.SemanticInterpretation.
    Properties["commandMode"].FirstOrDefault();
The value of the commandMode property is a string that will contain
either “text” or “voice” depending on how the user entered the command. In
the following exercise, you will use this string to determine whether the app
should respond vocally or remain silent.
Add a voice response to search requests
1. In Visual Studio, open the App.xaml.cs file and display it in the Code
and Text Editor window.
2. In the OnActivated method, add the following statement shown in bold:
Click here to view code image
protected override void OnActivated(IActivatedEventArgs args)
{
    ...
    if (args.Kind == ActivationKind.VoiceCommand)
    {
        var commandArgs = args as
VoiceCommandActivatedEventArgs;
        var speechRecognitionResult = commandArgs.Result;
        var commandName =
Download from finelybook PI:EMAIL
1006
speechRecognitionResult.RulePath.First();
        string commandMode =
            speechRecognitionResult.SemanticInterpretation.
                Properties["commandMode"].FirstOrDefault();
        string customerName = "";
        ...
    }
}
3. At the end of the method, change the statement that calls the Navigate
method so that it passes in a NavigationArgs object as the second
parameter. This object wraps the customer name and the command
mode.
Click here to view code image
protected override void OnActivated(IActivatedEventArgs args)
{
    ...
    if (args.Kind == ActivationKind.VoiceCommand)
    {
        ...
        switch (commandName)
        {
            ...
        }
        ...
        rootFrame.Navigate(typeof(MainPage),
            new NavigationArgs(customerName, commandMode));
        Window.Current.Activate();
    }
}
Visual Studio will report that the NavigationArgs type cannot be found.
This happens because the NavigationArgs type does not exist yet; you
need to create it.
4. Right-click the reference to the NavigationArgs object in the code, and
then click Quick Actions and Refactorings. In the Quick Actions popup,
click Generate Class For NavigationArgs In the new file, as shown here:
Download from finelybook PI:EMAIL
1007
This action creates a new file, called NavigationArgs.cs, that contains a
class with private fields named customerName and commandMode,
together with a public constructor that populates these fields. You must
modify this class to make the fields accessible to the outside world. The
best way to achieve this is to convert the fields into read-only properties.
5. In Solution Explorer, double-click the NavigationArgs.cs file to display
it in the Code and Text Editor window.
6. Modify the customerName and commandMode fields to make them
read-only fields that can be accessed by other types in the application, as
shown in bold in the following code:
Click here to view code image
internal class NavigationArgs
{
    internal string commandMode { get; }
    internal string customerName { get; }
    public NavigationArgs(string customerName, string
commandMode)
    {
        this.customerName = customerName;
        this.commandMode = commandMode;
    }
}
7. Return to MainPage.xaml.cs in the Code and Text Editor window and
locate the OnNavigatedTo method. Make this method async, and modify
the code in the body of his method as follows:
Download from finelybook PI:EMAIL
1008
Click here to view code image
protected override async void OnNavigatedTo(NavigationEventArgs
e)
{
    NavigationArgs args = e.Parameter as NavigationArgs;
    if (args != null)
    {
        string customerName = args.customerName;
        ViewModel viewModel = new ViewModel(customerName);
        this.DataContext = viewModel;
        if (args.commandMode == "voice")
        {
            if (viewModel.Current != null)
            {
                await Say($"Here are the details for ");
            }
            else
            {
                await Say($" was not found");
            }
        }
    }
}
Note that the Say method has not been implemented yet. You will create
this method shortly.
8. Add the following using directives to the list at the top of the file:
Click here to view code image
using Windows.Media.SpeechSynthesis;
using System.Threading.Tasks;
9. Add the Say method shown here to the end of the MainPage class:
Click here to view code image
private async Task Say(string message)
{
    MediaElement mediaElement = new MediaElement();
    var synth = new SpeechSynthesizer();
    SpeechSynthesisStream stream =
        await synth.SynthesizeTextToStreamAsync(message);
    mediaElement.SetSource(stream, stream.ContentType);
    mediaElement.Play();
}
The SpeechSynthesizer class in the Windows.Media.SpeechSynthesis
Download from finelybook PI:EMAIL
1009
namespace can generate a media stream containing speech synthesized
from text. This stream is then passed to a MediaElement object, which
plays it.
10. On the Debug menu, click Start Without Debugging to build and run the
application.
11. Activate Cortana, and then speak the following query:
Customers show details for Brian Johnson
Cortana should respond by displaying the details for Brian Johnson in
the Customers app and saying “Here are the details for Brian Johnson.”
12. Type the following query into the Cortana search box:
Customers show details for John
Verify that this time the application remains mute after displaying the
list of customers with the first name John.
13. Experiment by performing other queries by typing and with your voice.
Close the app when you are finished.
Summary
In this chapter, you learned how to display data on a form by using data
binding. You saw how to set the data context for a form and how to create a
data source that supports data binding by implementing the
INotifyPropertyChanged interface. You also learned how to use the Model–
View–ViewModel pattern to create a UWP app, and you saw how to create a
ViewModel with which a view can interact with a data source by using
commands. Finally, you learned how to integrate an app with Cortana to
provide voice-activated search functionality.
Quick reference
To
Do this
Bind the property of
Use a data-binding expression in the XAML markup
Download from finelybook PI:EMAIL
1010
a control to the
property of an object
of the control. For example:
Click here to view code image
Enable an object to
notify a binding of a
change in a data
value
Implement the INotifyPropertyChanged interface in
the class that defines the object and raise the
PropertyChanged event each time a property value
changes. For example:
Click here to view code image
class Customer : INotifyPropertyChanged
{
  ...
  public event PropertyChangedEventHandler
    PropertyChanged;
  protected virtual void OnPropertyChanged(
    string propertyName)
  {
    if (PropertyChanged != null)
    {
      PropertyChanged(this,
        new
PropertyChangedEventArgs(propertyName));
    }
  }
}
Enable a control that
uses data binding to
update the value of
the property to which
it is bound
Configure the data binding as two-way. For example:
Click here to view code image
Separate the business
logic that runs when
a user clicks a Button
control from the user
interface that
contains the Button
control
Use a ViewModel that provides commands
implemented with the ICommand interface, and bind
the Button control to one of these commands. For
example:
Click here to view code image
Support searching in
Add a voice-command definition (VCD) file to the
Download from finelybook PI:EMAIL
1011
a UWP app by using
Cortana
application that specifies the commands to be
recognized, and then register these commands when
the application starts running by using the static
InstallCommandDefinitionsFromStorageFileAsync
method of the VoiceCommandDefinitionManager
class.
At runtime, capture the Activated event. If the
ActivationKind value of the IActivatedEventArgs
parameter to this event indicates a voice command,
then parse the speech recognition data in the Result
property of this parameter to determine the action to
take.
Download from finelybook PI:EMAIL
1012
CHAPTER 27
Accessing a remote database from a
Universal Windows Platform app
After completing the chapter, you will be able to:
Use the Entity Framework to create an entity model that can retrieve
and modify information held in a database.
Create a Representational State Transfer (REST) web service that
provides remote access to a database through an entity model.
Fetch data from a remote database by using a REST web service.
Insert, update, and delete data in a remote database by using a REST
web service.
Chapter 26, “Displaying and searching for data in a Universal Windows
Platform app,” shows how to implement the Model–View–ViewModel
(MVVM) pattern. It also explains how to separate the business logic of an
app from the user interface (UI) by using a ViewModel class that provides
access to the data in the model and implements commands that the UI can use
to invoke the logic of the app. Chapter 26 also illustrates how to use data
binding to display the data presented by the ViewModel and how the UI can
update this data. This all results in a fully functional Universal Windows
Platform (UWP) app.