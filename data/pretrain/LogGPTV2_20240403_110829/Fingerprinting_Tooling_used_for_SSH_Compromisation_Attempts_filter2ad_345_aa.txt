title:Fingerprinting Tooling used for SSH Compromisation Attempts
author:Vincent Ghi&quot;ette and
Harm Griffioen and
Christian Doerr
Fingerprinting Tooling used for
SSH Compromisation Attempts
Vincent Ghiëtte, Harm Grifﬁoen, and Christian Doerr
TU Delft, Cyber Threat Intelligence Lab
{v.d.h.ghiette, h.j.grifﬁoen, c.doerr}@tudelft.nl
Abstract
In SSH brute forcing attacks, adversaries try a lot of different
username and password combinations in order to compromise
a system. As such activities are easily recognizable in log ﬁles,
sophisticated adversaries distribute brute forcing attacks over
a large number of origins. Effectively ﬁnding such distributed
campaigns proves however to be a difﬁcult problem.
In practice, when adversaries would spread out brute-
forcing over multiple sources, they would likely reuse the
same kind of software across all of these origins to simplify
their operation and reduce cost. This means if we are able to
identify the tooling used in these attempts, we could cluster
similar tool usage into likely collaborating hosts and thus
campaigns. In this paper, we demonstrate that it is possible
to utilize cipher suites and SSH version strings to generate a
unique ﬁngerprint for a brute-forcing tool used by the attacker.
Based on a study using a large honeynet with over 4,500
hosts, which received approximately 35 million compromi-
sation attempts over the period of one month, we are able to
identify 49 tools from the collected data, which correspond to
off-the-shelf tools, as well as custom implementations. The
method is also able to ﬁngerprint individual versions of tools,
and by revealing mismatches between advertised and actually
implemented features detect hosts that spoof identifying in-
formation. Based on the generated ﬁngerprints, we are able
to correlate login credentials to distinguish distributed cam-
paigns. We uncovered speciﬁc adversarial behaviors, tactics
and procedures, frequently exhibiting clear timing patterns
and tight coordination.
1
Introduction
Secure Shell (SSH) is a widely used protocol to operate ser-
vices on a remote host over a network. One of the commonly
used services of SSH is remote terminal access, which al-
lows a user to execute programs on a remote system. The
protocol authenticates a user based on a public key or an user-
name/password combination, which prohibits malicious users
to connect and exploit the host.
Figure 1: While basic Indicators of Compromise (IoC) are
easy to gather and distribute, they are trivially changed by an
adversary. For effective, more persistent detection it is nec-
essary to assemble threat intelligence that covers behavioral
features of the attacker. [3]
Due to the extensive use of the protocol, SSH is a popular
target in brute forcing attacks. While system administrators
are able to change the usernames and passwords used by the
device, a lot of devices are still conﬁgured to use standard
username and password combinations. As many devices are
left with default conﬁgurations, simply trying a list of com-
mon username and password combinations proves effective
enough for attackers to massively scan for, and attack SSH
devices using this method.
While unsophisticated attackers would run through an ex-
tensive username/password candidate list in order to gain ac-
cess, such behavior would be quickly visible in log ﬁles, and
source addresses with repeated failed attempts are routinely
blocked by intrusion detection systems (IDS) or monitoring
systems such as fail2ban. Advanced adversaries would thus
split the brute forcing out over multiple hosts, but in order to
simplify the administration, usage and lower the cost, they
would typically run a similar software across systems.
Hash ValuesDomain NamesNetw./Host ArtifactsToolsTTPsIP AddressesDifﬁculty for Adversary to ChangeDifﬁculty for Defender to DetectUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 61Current detection revolves mostly around simple indicators
to detect malicious behavior. Virus scanners or intrusion de-
tection systems for example rely on signatures and hashes to
identify malicious activity, and also the IP addresses of mali-
cious hosts scanning and brute forcing logins is enumerated
and distributed in IP block lists. As explained by the so-called
“pyramid of pain” [3] depicted in ﬁgure 1, these indicators
are however trivially changed for an adversary, for example
by simply recompiling a malware or moving the activity to
a newly compromised host or proxy. In result, such informa-
tion is unsuited to stop adversaries for long and at a broader
scale. An alternative is the detection based on complex indi-
cators, such as the systems or tools used or the tactics in a
compromise, as they are much more difﬁcult and costly for an
adversary to change. If we can detect a particular software or
modus operandi used for brute forcing SSH, we can reliably
identify malicious activity, regardless of the IP address it is
coming from and whether this address was participating in
such activities before.
In this paper, we introduce methods for ﬁngerprinting soft-
ware stacks and tools used in SSH connections. This will help
to study and follow the activities of adversaries, as an attacker
will most likely distribute the same tool over a number of
hosts to leverage the economies of scale. By detecting attacks
by their used tools, attackers will have to change their soft-
ware between campaigns, and even between different hosts.
This greatly increases the cost for attackers, and can price
them out of the system.
Our approach extracts session negotiation information such
as the list and ordering of key exchange algorithms, cipher
suites, or compression algorithms which are exchanged in
clear text during the SSH session initiation. This means that
using this approach, we do not need to interfere with the con-
nection itself, meaning that the method is completely passive,
and as the ﬁngerprint is derived from the SSH handshake, we
are able to identify brute forcing attempts even before the ﬁrst
password is sent to the system.
This paper makes the following contributions:
• We introduce the concept of ﬁngerprinting to the SSH
protocol and demonstrate based on a large corpus of
35 million brute forcing attempts that ﬁngerprinting is
suited to identify tools that are used by adversaries. By
detecting attacks on this level, the cost for adversaries
rises as they need to build new tools for every campaign.
• We deploy the technique to 4,500 honeypots with the aim
of gaining cyber threat intelligence about the practices
of adversaries. We empirically show the presence of
49 different tools, and show that a cluster of hosts relies
on the same toolchains. We furthermore ﬁnd evidence
of large, distributed campaigns of collaborating hosts.
The remainder of this paper is structured as follows: Sec-
tion 2 describes the state of the art in ﬁngerprinting and SSH
brute forcing. Section 3 provides an overview of the SSH
protocol and components necessary to introduce the proposed
method. Section 4 explains the ﬁngerprinting methodology.
Section 5 provides details about the design and scale of our
honeynet. The evaluation of our proposed method is presented
in Section 6. Using our method, we ﬁnd a large number of ac-
tors, each featuring different strategies, tactics and resources.
Finally, Section 7 summarizes and concludes our work.
2 Related Work
As stated in the previous section, a sustainable cyber defense
best focuses not on identiﬁers of speciﬁc malicious instances,
but on characteristics that are constant over multiple instances.
One way of generating these characteristics is to ﬁngerprint
the tools used by attackers. Our main claim in this paper
is that we can extract ﬁngerprints from the SSH connection
negotiation that can be used to distinguish different tools. Two
lines of related work are important to class the proposed work,
ﬁrst previous research on ﬁngerprinting protocols, and second
previous research in brute force detection.
First, while ﬁngerprinting has not been done in SSH, differ-
ences in cipher suite strings have been used in the SSL/TLS
protocol suite to identify server or client software. To ﬁn-
gerprint clients, Husak et al. [9] were able to infer the used
client application based on the cipher suites that were used
in the connection. The authors found that many applications
support different cipher suites for establishing a connection,
and some applications also send the cipher suites in a dif-
ferent order. Therefore, the authors were able to ﬁngerprint
client applications using only the cipher suites presented in
the handshake. Durumeric et al. [4] applied the analysis of
advertised clients (through the HTTP User-Agent) and imple-
mented SSL/TLS handshakes to detect the nature of the client
connecting, and thereby identify middleboxes that intercepted
the TLS connection between client and server. Fingerprinting
speciﬁc implementations is also possible by detecting speciﬁc
patterns in which header ﬁelds [5] or packet payloads [6] are
set and encapsulated in scan and attack trafﬁc.
Fingerprinting the trafﬁc sent through encrypted channels
has been done by Sun et al. [18]. Their algorithm is able to
identify which webpages are visited from the amount of trafﬁc
sent during the page load. Similar research by Korczynski
et al. [11] uses Markov chains to generate ﬁngerprints for
different services based on the SSL session. Their research
shows that they are able to ﬁngerprint certain applications
with a high conﬁdence level. In the case of SSL, research has
focused on ﬁngerprinting clients and client behavior. Our SSH
ﬁngerprinting method leverages the same intuitions, but is
tailored towards ﬁngerprinting adversaries that are attempting
to compromise a system.
Second, although there exists no prior work in the literature
for ﬁngerprinting SSH endpoints, a selection of previous stud-
ies have developed methods for detecting SSH brute forcers.
62          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationHellemons et al. [7] have proposed an intrusion detection
system method for detecting SSH intrusions using netﬂows.
Similarly, Najafabadi et al. [14] propose a machine learn-
ing algorithm to detect brute force attacks in netﬂow data.
The authors have validated their results on the SSH proto-
col and found that machine learning techniques perform well
for detecting these brute force attacks. Nicomette et al. [15]
clustered adversaries together based on attempted passwords.
The authors ﬁnd relationships between dictionaries, but at
the same time notice that few dictionaries are shared across
attackers. All these works focus on the detection of brute
forcing attacks at the moment that the system is already under
attack, however we show in the following that it is possible
to obtain much information about the incoming request dur-
ing the connection negotiation itself and before the password
prompt is shown.
A selection of studies have investigated adversarial behav-
ior after the successful compromise of a honeypot. Ramsbrock
et al. [16] followed compromises made into four honeypots,
and was able to derive a state machine to describe the ac-
tions of adversaries. Barron and Nikiforakis [2] investigated
whether adversarial actions differed based on environmental
factors, for example depending on the presence of real users
on the systems and their usage of ﬁles. They were able to
distinguish between human and bot login activity, and noticed
humans did to a limited extent show interest in stored ﬁles
while bots generally avoided signiﬁcant interaction with the
ﬁle system, and in half of the cases only proceeded to install
a proxy gateway.
While proposed methods can identify brute force attacks,
they do not allow for tool classiﬁcation or for pre-emptively
stopping these attacks. Given the current threat landscape, in
which there is a high number of attackers, identifying attacks
in an early stage before actual compromization is increasingly
important. By forcing attackers to change their tools every
attempt, the cost for attackers increases and many attackers
will be priced out of the system. In this paper, we propose a
method to ﬁngerprint tools in use by adversaries, which can
be used to track their activities over time, relate distributed
attempts to the same toolchain and possibly actor, and thus
gain a greater insight into the ecosystem as a whole.
3 The SSH Protocol
The secure shell protocol (SSH) is an established protocol
for accessing services on a remote host, which is secured
by an authentication procedure. In order for an attacker to
enter login credentials it is ﬁrst necessary to set up a secure
protocol connection as speciﬁed in RFC4253 [20]. The main
steps in setting up a secure communication channel between
the attacker and its target are shown in ﬁgure 2 and go through
three main phases.
First, after a TCP connection has been established, both
parties exchange the version of the SSH protocol they are
Figure 2: Schematic overview of the message exchanges in
the establishment of an SSH session.
running in the protocol identiﬁcation phase. Typical exam-
ples of sent version strings are SSH-2.0-JSCH-0.1.51 and
SSH-2.0-paramiko_1.7.5. As will later be explained, the
version exchange is one of the components used for proﬁling
attackers.
As SSH provides an authenticated encryption tunnel, both
sides need to negotiate key material for the connection. In
the second phase of the protocol, client and server negotiate
the key exchange mechanism to be used. This negotiation
is initiated by the client through a key exchange initializa-
tion message (SSH_MSG_KEXINIT), which contains all the
different key exchange algorithms, encryption algorithms,
algorithms to compute a message authentication code, and
algorithms for compressing the data the client is able to ac-
cept. The order of the advertised algorithms is of importance
as the algorithms are advertised according to the host’s pref-
erence, and thus both the presence and order of algorithms
shared during this step of the SSH connection can be used
to proﬁle a connecting client. After both parties have sent
and received the key exchange initialization message, the
highest commonly preferred algorithms are selected for set-
ting up a secure connection. Depending on which algorithms
have been chosen, the rest of the key negotiation and key
exchange procedure slightly varies. After the key negotia-
tion, the actual key exchange is initialized by sending the
SSH_MSG_KEXDH_INIT message, after which the key ex-
change algorithm is run. Once the algorithm is ﬁnished, each
side signals using a SSH_MSG_NEWKEYS message that the
secure connection is set up and ready to be used.
In the third phase, both client and server switch to an en-
crypted tunnel using the just negotiated key material and per-
form the authentication, during which the client sends its
login credentials. Given the correct credentials, the SSH pro-
tocol then makes the requested resource on the remote host
available to the client.
ClientServerConnection and TCP HandshakeSSH Server Version StringSSH Client Version StringSSH_MSG_KEXINITSSH_MSG_KEXREPLYSSH_MSG_KEXDH_INITSSH_MSG_KEXDH_REPLYSSH_MSG_NEWKEYSSSH_MSG_NEWKEYSProtocolIdentiﬁcationKey Exchange Negotiationand Key ExchangeAuthentication and SSH sessionUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 634 Fingerprinting Tooling
Brute forcing the login credentials to gain access to a shell
generally requires a great amount of attempts due to the large
amount of possible username/password combinations. There-