## Page 930
return ans
//解法二
func sortedSquaresl(A []int) []int {
for i, value := range A {
A[i] = value α value
sort.Ints(A)
return A
978.LongestTurbulentSubarray.
题目
A subarray A[i], A[i+1], ..., A[j] of A is said to be turbulent if and only if:
●For i  A[k+1] when k is odd, and A[k]  A[k+1] when k is even, and A[k]  A[2]   A[4] A[k+1],且当k为偶数时，A[k] A[k+1]，且当k为奇数时，A[k]A[i]{
dec = inc + 1
inc = 1
}else{
inc = 1
dec = 1
maxLen = max(maxLen, max(inc, dec))
---
## Page 932
return maxLen
//解法二滑动窗口
func maxTurbulenceSizel(A []int) int {
if len(A) == 1 {
return 1
//flag>0代表下一个数要大于前一个数，flag lastNum && flag > 0) 11 (A[right+1]
= 0 && x = 0 && y = 0 {
visited[startx][starty] = true
empty=-
path = append(path, startx)
path = append(path, starty)
for i := 0;i timestamp的
最小解，然后下标减一即是满足题意的最大解。
·另外题目中提到TimeMap.set操作中的timestamp是严格递增的”。所以在map中存储
value结构体的时候，不需要排序了，天然有序。
代码
package leetcode
import "sort"
type data struct {
time int
value string
// TimeMap is a timebased key-value store
// TimeMap define
type TimeMap map[string] []data
// Constructor981 define
func Constructor981() TimeMap {
return make(map[string][]data, 1024)
}
//Set define
func (t TimeMap) Set(key string, value string, timestamp int) {
if _， ok := t[key]; !ok {
t[key] = make([]data, 1, 1024)
---
## Page 942
t[key] = append(t[key] , data{
time:timestamp,
'a :a
3)
// Get define
func （t TimeMap) Get(key string,timestamp int) string {
d := t[key]
i:= sort.Search(len(d), func(i int) bool {
return timestamp < d[i].time