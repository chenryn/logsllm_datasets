ActivityRecord
ActivityRecord
ActivityRecord
Back Stack
Figure 2: Data structures of tasks, activities and back stacks
in the Activity Manager Service.
as shown in s2. The previous activity A is stopped and
its state is retained. In (s2,s1,eback,λ de f ault), eback repre-
sents the event of user pressing the “back” button. As ex-
pected by the user, the next activity A on stack is brought
back to the screen, and its original state is resumed. Ac-
tivity B is popped from the back stack and destroyed by
the system. The initial state s0 is ﬁnally restored through
(s1,s0,eback,λ de f ault) when the user presses “back” but-
ton again. The app’s task is destroyed because when the
popped activity is the last activity in the back stack, the
activity is destroyed together with the “empty” task.
Note that activities from different apps can co-reside
in the same task (e.g. activity A and B in this exam-
ple). In other words, although activities from different
apps are isolated and protected within their own process
sandboxes, Android allows different apps to co-exist in
a common task. This creates opportunities for malicious
activities to interfere with other activities once they are
placed in the same task, and the system passes the pro-
gram control to the malicious activities.
In reality, the amount of possible task states in a sys-
tem is big, and the state transitions can be complex, e.g.,
each state may again have numerous incoming and out-
going transitions connecting with other states. In Sec-
tion 4, we discuss what may go wrong during the com-
plex task state transitions.
3.4 Android Implementation
AMS maintains Android tasks and activities in a hier-
archy shown in Figure 2. AMS uses TaskRecord and
ActivityRecord objects to represent tasks and activ-
ities in the system respectively. A TaskRecord main-
tains a stack of ActivityRecord instances, which is
the back stack of that task. Similar to the activities in a
back stack, tasks are organized in a stack as well, main-
tained by a ActivityStack object, such that when
a task is destroyed, the next task on stack is resumed
and brought to the foreground. There are usually two
ActivityStack containers in the system - one con-
taining only the launcher’s tasks and the other holding
all remaining app tasks.
S0
Foreground
Home
Launcher 
mal-main
mal-root
Malware
A
B
S1
mal-main
mal-root
Malware
S1’
Home
Launcher
Hijacked
State
Home
Launcher
mal-root
Malware
Foreground
main
Victim
Foreground
mal-main
main
Victim
Figure 3: Task state transition of spooﬁng attack (A: task state
transition by system-default. B: Hijacking state transition).
4 Task Hijacking in Android
In this section, we ﬁrst discuss an example showing how
an attacker could manipulate the task state transitions to
his advantage, causing task hijacking attacks. We then
explore the extent of different task hijacking methods and
how they can be used for other various attack goals.
4.1 Motivating Example
Suppose attacker’s goal is to launch an UI spooﬁng at-
tack. Speciﬁcally, when the user launches a victim app
from the home screen, a spooﬁng activity with an UI
masquerading the victim app’s main activity (e.g. the lo-
gin screen of a bank app) shows up instead of the original
activity.
Figure 3 shows the task state transitions of the UI
spooﬁng attack. Initially in s0, the home screen is dis-
played to the user while a malware task waits in the back-
ground. Like the task state transition example just shown
in Section 3.3, when the user launches the victim app
from the launcher, state transition A is supposed to occur
by default, i.e. a new task is created and the app’s main
activity is displayed on screen. However, as shown in
state transition B, the malware can manipulate the task
state transition conditions such that the system instead
displays the spooﬁng UI of activity ”mal-main” by relo-
cating ”mal-main” from the background task to the top
of victim app’s back stack. The user has no way to detect
the spooﬁng UI since the original activity UI is not shown
on screen at all, and the ”mal-main” activity appears to
be part of the victim app’s task (perceivable in recent task
list). By this means, the victim task is smoothly hijacked
by the malware activity from launch time, and all user
behaviors within this task are now under malware’s con-
trol.
In this example, the attacker successfully misleads the
system and launches the spooﬁng UI by abusing some
task state transition conditions, i.e. taskAffinity
and allowTaskReparenting. We will introduce
them together with other exploitable conditions/events in
948  24th USENIX Security Symposium 
USENIX Association
4
Conditions
Intent Flags
(FLAG_ACTIVITY_*)
Activity Attribute
NEW_TASK
SINGLE_TOP
CLEAR_TOP
NO_HISTORY
CLEAR_TASK
REORDER_TO_FRONT
launchMode
allowTaskReparenting
taskAfﬁnity
allowTaskReparenting
documentLaunchMode (API 21)
NEW_DOCUMENT (API 21)
ﬁnishOnTaskLaunch
MULTIPLE_TASK
Callback Function
onBackPressed()
Events
Framework APIs
startActivity()
startActivities()
TaskStackBuilder class
Table 2: Task control knobs - conﬁgurable task state transition
conditions and events provided by Android.
Section 4.5 and 4.6.
4.2 Adversary Model
We assume the user’s Android device already has a mal-
ware installed (similar assumptions are made in [8, 25,
34, 38]). The malware pretends to seem harmless, requir-
ing only a minimum set of widely-requested permissions
such as INTERNET permission. The attacker’s goal is
clear: blend the malicious activities with the target app’s
activities in one task, and intercept the normal user oper-
ations to achieve malicious purposes.
4.3 Hijacking State Transition
A hijacked task state is a desirable state to attackers, in
which at least one task in the system contains both ma-
licious activities (from malware) and benign activities
(from the victim app). The task state s(cid:31)
1 in the spoof-
ing attack is an example of hijacked task state. A hijack-
ing state transition (HST) is a state transition which turns
the tasks in the system to a dangerous hijacked task state,
e.g., the task state transition B in the previous example.
Conceptually, there are two types of HSTs:
1. The malicious activity gets pushed onto the victim
task’s back stack (malware⇒victim);
2. The victim app activity is “tricked” by mal-
ware and pushed on the malware’s back stack
(victim⇒malware).
4.4 The Causes of HSTs
Android provides a rich set of task control features, i.e.,
task state transition conditions and events. We call these
features as task control knobs. The task control knobs
provide app developers with broad ﬂexibility in control-
ling the launch of new activities, the relocation of ex-
isting activity to another task, “back” button behaviors,
even the visibility of a task in the recent task list (a.k.a
overview screen), etc. Table 2 lists such conditions and
events in four categories: activity attribute, intent ﬂags,
call-back functions, and framework APIs. All these con-
trol ﬂexibility further complicates task state transitions.
Due to HST’s potential threats to app and system se-
curity, understanding the extent of HSTs in the complex
task state transitions becomes important. To achieve this,
we simulate the task state transitions in a Android system
and try to capture all possible HSTs and hijacked task
states that occur during the state transitions.
In theory, there are a huge number of possible task
states (each app may have a number of activities, and an
activity can be instantiated for multiple times). We con-
ﬁne the number of task states to more interesting cases
by adding two constraints: (1) each app only has two ac-
tivities - the main activity and another public exported
activity (can be invoked by other apps), and (2) each ac-
tivity can only be instantiated once. In the simulation,
we specify three apps in the system - namely, Alice, Bob
and Mallory (the malware) - as it covers most HST cases.
Given the task states, we generate the task state tran-
sition graph by connecting pairs of states with directed
edges. For instance, state s1 and s2 are connected only
if ∃e ∈ E,λ ∈ Λ, such that (s1,s2,e,λ ) or (s2,s1,e,λ )
are valid transitions, where E denotes all feasible events
and Λ represents all possible conditions in Table 2. After
constructing the task state transition graph, all hijacked
states and HSTs are highlighted. We show a sub-graph of
the resulting task state transition graph in Figure 4(a) and
visualize the task states in Figure 4(b). For clarity of the
presentation, we only show the interesting branches of
the over-sized graph and have skipped many duplicated
HST cases. Moreover, we zoom in each of the HSTs and
show their detailed information in Table 3, including the
conditions and events that trigger the HSTs. We manu-
ally verify all presented HSTs on real systems and these
HSTs are proven to be exploitable to launch real attacks
(indicated in the last column in Table 3).
We make two important observations from our result.
First, once exploited, the hijacked states shown in Fig-
ure 4(a) could result in serious security hazards. For ex-
ample, HST#3 is the task state transition of our exam-
ple attack discussed earlier. As a result of this HST, the
screen is under attacker’s control in state s14. As another
example, in HST#2, the benign activity B2 is tricked to
be placed in Mallory’s task instead of Alice’s task dur-
ing start-up. This can also lead to spooﬁng attack or GUI
conﬁdentiality breaches.
Second, compared with the HST triggered by the
system-default conditions and events (e.g., HST#1),
more HST scenarios are produced under the conﬁgurable
conditions and events (HST#2-6) .
It means that, by
abusing the ﬂexible task control “knobs” readily offered
USENIX Association  
24th USENIX Security Symposium  949
5
S5
S6
S8
S1
S0
S2
#4
S4
S3
S7
S11
S13
S12
S9
(a)
S16
#6
S14
#2
S15
S18
S10
S17
S
S
Tasks State
Hijacked State
Tasks State Trans.
HST
S1
S2
S3
S4
S5
S6
F
A1
F
M2
A1
S7
S8
F
M1
B
M2
M1
F
B1
S9
F
A1
M1
S13
S14
S15
F
A1
M2
M1
F
M2
A1
M1
F
A2
A1
M2
M1
F
B2
A2
A1
(b)
B
M1
S10
F
M2
A1
M1
S16
F
A2
A1
A1
F
B2
A2
A1
F
M1
A1
S11
S12
F
M1
S17
M2
M1
F
A1
A2
A1
M1
S18
F
B2
M2
M1
Figure 4: (a) A sub-graph of the over-sized task state transition graph for a simulated system with three apps. The sub-graph shows
the typical cases of HSTs (red edges with HST indexes) and the resulting hijacked task states (red nodes). s0 represents the initial
state, i.e., no tasks except the launcher task exists in the system. (b) Visualization of task states of all nodes in ﬁgure (a). A, B and
M represent the activities from Alice, Bob and Mallory (the malware) respectively. We skip showing the launcher task in the task
states. Hijacked states are highlighted as red boxes. F and B denote foreground and background tasks respectively.
HST
#
1
2
3
4
5
6
HST Type
malware⇒victim
victim⇒malware
malware⇒victim
victim⇒malware
victim⇒malware
malware⇒victim
Conditions
Default
NEW_TASK intent ﬂag set or B2:launchMode=”singleTask”
M1:taskAfﬁnity=B2
M2:taskAfﬁnity=A1; M2:allowTaskReparenting=”true”
NEW TASK intent ﬂag set
Events
A1: startActivity(M1)