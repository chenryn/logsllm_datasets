# Simultaneous Fault Injection Models: Analysis and Evaluation

## Introduction
Simultaneous fault injection models are crucial for evaluating the robustness of software systems, especially in critical applications. This paper explores the implementation and effectiveness of three simultaneous fault injection (SFI) models, specifically focusing on their impact on software robustness evaluations. The models are designed to inject faults into different parameters of a service invocation simultaneously, and their performance is compared with discrete fault models.

## Masking and Amplification Effects

### Masking Effects
Masking effects occur when the combination of faults results in a lower failure rate than the individual faults. For example, using the FuzzFuzz model, while the FZ model causes SC (System Crash) failures in more than 80% of the injections into parameters 0 and 1, the combined FuzzFuzz model yields an injection efficiency of less than 10%, all of which are AE (Assertion Error) failures. This indicates that the combined effect of multiple faults can mask the severity of individual faults.

### Amplification Effects
Amplification effects occur when the combination of faults results in a higher failure rate than the individual faults. For instance, in the same FuzzFuzz model targeting a different service, single fuzzing only results in a modest amount of SC failures in parameter 2, but simultaneous injections into parameters 0 and 2 result in higher SC failure rates. This demonstrates that the combined effect of multiple faults can amplify the severity of the failures.

## Implementation Overhead
The actual mechanism for combining any two existing models for simultaneous injections into different parameters of the same service invocation accounts for only 105 DSIs (Distinct Service Invocations) and an accumulated cyclomatic complexity of 18. This suggests that the overhead for implementing and executing simultaneous fault injections is moderate.

## Discussion

### Value Addition
Simultaneous models add value to the evaluation by detecting service faults that are not covered by other models. The SimBF model, in particular, outperforms discrete fault models in most cases. The implementation overhead of the considered simultaneous models is moderate compared to discrete models, making them suitable for critical applications.

### Caveats
Exhaustive tests are feasible for the BF and SimBF models but not for the FZ-based models. Consequently, we were able to exhaustively inject BF and SimBF faults but had to select a fixed number of test cases for the FZ-based models. The BF and SimBF faults that we injected are also among the injection candidates of the FZ model, but the results differ significantly, indicating that the chosen samples for the FZ-based models have a significant impact.

### Performance Variability
We observed differing performance of the different fault models for different drivers. Some interfaces are used by some drivers and not by others, suggesting that the efficiency of an evaluation depends on the interplay of fault models and the precise system configuration, including fault loads and applied workloads.

## Related Work

### Simultaneous Injections into Function Call Parameters
In the Ballista project, simultaneous injections into multiple parameters of a function call were performed with a data-type fault model. However, the authors did not differentiate between valid and invalid parameters and did not quantitatively analyze the impact of simultaneous injections. Their results, which indicated no significant impact on the detection probability of robustness vulnerabilities, contradict our findings. Possible reasons for this discrepancy include differences in the targeted interfaces, the age of the systems, and the fault models used.

### Validating Software-Implemented Hardware Fault-Tolerance
Software replication techniques, such as N-copy programming or process-level redundancy, are common for handling non-deterministic hardware errors. To validate the effectiveness of setups with more than two replicas, multiple hardware faults are emulated. Strategies to reduce the exponentially increasing test candidates in distributed settings have been proposed, but these do not account for test results. Our approach differs in that we do not restrict ourselves to the emulation of hardware-induced software errors.

### Higher Order Mutation Testing
Mutation testing assesses the quality of test suites by creating mutants of programs. Higher order mutants, resulting from consecutive applications of multiple traditional first-order mutation operators, can inject both temporally coincident and temporally spread faults. While mutation order and interface fault coincidence have similar intent, our proposed coincidence notion is more general, as it provides definitions for both white-box and black-box assessment scenarios and considers coincidence at different spatial and temporal resolutions.

### Accumulating Fault Effects
If fault activations do not immediately result in a detectable failure, errors may remain dormant in the system, leading to accumulating fault effects. Software aging is an example of minor deviations accumulating over time. Our work falls into the category that considers accumulating fault effects and either accepts that no direct causal relation between an individual fault activation can be established or performs additional experiments to establish these relations.

## Conclusion
The interaction of coincident fault effects is often neglected in software robustness analyses. Our work investigates the benefits and costs of considering coincident faults in terms of evaluation efficiency. We establish coincidence notions for SWIFI covering both the temporal and spatial domains, investigate conceptual and technical arguments affecting the effectiveness of coincident fault injections, detail the design and implementation of three simultaneous fault models, and assess their performance quantitatively in an actual robustness evaluation. Our results indicate that coincident fault models have significant effects on the coverage in a software robustness evaluation and highlight the need for careful re-investigation of assumptions in contemporary fault injection frameworks and combinatorial testing techniques.

## Acknowledgements
The authors would like to thank Thorsten Piper and Holger Rother for comments on a previous draft of the paper. The work in this paper has been supported by CASED (http://www.cased.de).

## References
[References listed here, formatted according to the appropriate citation style]

---

This optimized version of the text aims to provide a clear, coherent, and professional presentation of the research findings and discussions.