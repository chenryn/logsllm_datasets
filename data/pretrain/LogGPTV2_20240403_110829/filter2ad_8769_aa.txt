**作者：启明星辰ADLab  
公众号：[ADLab](https://mp.weixin.qq.com/s/wb_eFxAjQMChegjlTB0lDw "ADLab")**
### **1、概述**
2019年2月中旬，启明星辰ADLab发现了一款全新的Android银行钓鱼木马，该木马将自身伪装成“Google
Play”应用（见图1），利用系统辅助服务功能监控感染设备，以便在合法的银行APP运行时，启用对应的伪造好的银行钓鱼界面将其覆盖掉，来窃取受害用户的银行登录凭证。此次攻击的目标银行默认包含包括花旗银行在内的三十多家银行（见图2），因此我们将之命名为“BankThief”。“BankThief”的存在和传播无疑对这数十银行客户的财产安全构成了严重的威胁。
图1 “BankThief”将自身伪装成“Google Play”
图2 目标银行的logo
“BankThief”会根据感染设备本地语言来配置自身显示语言，配置语言包括捷克语和波兰语，而且“BankThief”链接的钓鱼页面服务器上配置有针对波兰和捷克的伪装银行钓鱼页面，因此我们推测“BankThief”的主要攻击目标国家为波兰和捷克。该木马的证书签名起始时间是2019年2月13日，存放恶意钓鱼页面的服务器域名为“anlixes.at”，从该域名的解析记录来看，该域名主要活跃时间为2019年1月28日至2月21日。据此可推断，“BankThief”开发和传播的时间应该在2019年1月底到2月初这个时间段。
启明星辰ADLab研究人员对比了2018年9月LUKAS STEFANKO（ESET安全研究员）披露的一款银行木马（MD5 =
03720d4e7ae807f7c8ce56e772c19bcc）后发现，“BankThief”与其有少许相似之处。比如，两款银行木马的攻击目标都包含捷克和波兰；都是通过伪装的钓鱼页面覆盖掉目标银行合法的界面进行钓鱼攻击；都使用了Google
Firebase云消息传递服务进行控制命令的下发。不过，他们的整体设计和代码实现机制却完全不同，也没有很强证据表明这两款银行木马存在关联性，因此我们认为“BankThief”是一款全新的木马。
值得注意的是，“BankThief”是使用Google
Firebase云消息传递服务来控制感染设备的。该服务首次被用于恶意攻击要追溯到高级间谍软件“Skygofree”，
2018年3月启明星辰ADLab对已其进行详细分析，并发布深度分析报告[《首款利用Firebase云消息传递机制的高级间谍软件》](https://mp.weixin.qq.com/s?__biz=MzAwNTI1NDI3MQ==&tempkey=OTk4X0xTL3JXRDVCdGVJdEw5SEJtLUFYUmJnNXRqYVd3Yk9mTVpSemZNY3FWUUU3SVROQ0JqTS11SkFKLVFoTkdGb3lZMF9ackdFYWQ2RzY5UDNIWTFxZmtsU1dkNGdRa0NxTlpZeG10eGRUY2U5UnItbEVvZ1Q3WndFaDZvRzdNWHRIN0NhZzQyNDV3ak1DWFJPa3)。攻击者将恶意命令通过Firebase云消息服务进行传送，一方面不必耗费精力和资源去配置C&C服务器；另一方面，攻击者将恶意命令隐藏在安全的Firebase通信隧道中，避免了攻击流量被网络安全设备处置，攻击性更加隐蔽。Google
Firebase云消息传递服务此次又被“BankThief”用来进行恶意攻击，可以预见，越来越多的恶意应用将会使用Firebase云消息服务来实施攻击。
### **2、木马行为简介**
“BankThief”感染目标设备后，首先通过无障碍服务（无障碍服务是辅助身体不便或者操作不灵活的人来操作手机应用的，其可以被用于监控手机当前活动APP界面，实现对目标界面自动化操作。）监控感染设备。当监控到目标银行应用被打开时，银行木马会启动对应的伪装好的钓鱼页面覆盖掉真实的银行APP界面，在受害用户没有察觉的情况下窃取其银行登录凭证，“BankThief”会进一步将自身设置成默认短信应用来拦截银行短信，这样就绕过了基于SMS短信的双因素验证机制。其次，“BankThief主要利用Google
Firebase 云消息传递服务（Google Firebase
云消息传递服务是Google提供的能帮助开发者快速写出Web端和移动端应用通信的一种服务）来对感染设备进行远控，包含清空用户数据、卸载指定应用等恶意操作以及劫持包括花旗银行在内的数十家银行APP应用的恶意行为。“BankThief”的攻击示意图见图3。
图3 “BankThief”攻击示意图
### **3、功能分析**
“BankThief”的代码中，大量的字符串被加密存储（如图4），只有在其运行的过程中，在需要时才会使用自定义的解密算法进行解密操作（图5只列出其中一个解密算法），并且从多个“ALLATORIXDEMO”命名的函数名来看，“BankThief”使用了混淆器“Allatori”的Demo版来保护自身，这无疑增加了研究人员分析的难度和工作量。
图4 被加密存储的字符串
图5 其中的一个字符串解密函数
“BankThief”利用无障碍服务对感染设备进行监控，实施钓鱼攻击。木马将自身伪装成“Google
Service”服务，在诱使受害者开启对应的无障碍服务权限成功后，会利用无障碍服务监控感染设备的运行。当目标银行APP启动时，它会启动伪造好的对应钓鱼界面覆盖掉合法的银行APP界面，窃取受害用户的银行凭证。
此外，“BankThief”还试图阻止用户取消其管理员权限和限制三星系统管理应用的正常运行等手段来保障自身的安全。
#### **3.1 诱使用户开启恶意服务**
“BankThief”诱使受害用户开启无障碍服务界面下伪装成“Google
Service”的恶意服务，并且还隐藏了自身图标（见图6），防止受害用户察觉到异常。
图6伪装成“Google Service”服务
在诱导受害用户操作的过程中，应用会跳转到无障碍设置界面，诱导受害用户开启“Google
Service”服务。“BankThief”会根据受害用户手机系统来选择使用捷克语还是波兰语提示（很显然，攻击者主要攻击的目标为波兰和捷克），如果用户没有开启该权限，会不停提示，直到受害用户开启为止（见图7）。
图7 诱导受害用户开启“Google Service”
#### **3.2 利用无障碍服务监控设备**
“BankThief”利用无障碍服务监控感染设备界面，来窃取受害用户银行登录凭证。当感染设备运行目标银行APP时，木马就会打开其设置好的对应钓鱼界面，覆盖在合法的银行APP上面，神不知鬼不觉地拿走受害用户的银行登录凭证（见图8）。
图8 窃取受害用户银行登录凭证
#### **3.3 请求设备管理员权限并防止取消**
“BankThief”运行后，不但会将自身图标隐藏掉（见上图6），而且会激活其设备管理员权限（见图9）。这样，普通用户很难察觉并卸载掉它，从而达到长期驻留在受害用户设备中的目的。
图9 诱导受害用户设置自身为管理员权限
此外，“BankThief”还利用无障碍服务监控感染设备，一旦发现受害用户试图取消管理员权限就强制返回，依靠这种流氓行为，阻止自身管理员权限被取消（见图10）。
图10 阻止自身管理员权限被取消
#### **3.4 阻止三星应用“Device Maintenance”**
“BankThief”一旦发现感染设备运行三星设备维护软件“Device Maintenance”，就强制返回桌面。“Device
Maintenance”是三星研发的针对Android手机维护和优化的一款系统管理应用，可以对一些流氓和耗电的APP发出警告并且会主动关闭不必要的后台程序，“BankThief”大概是防止自身被该款应用检测和卸载才使用此流氓手段阻止其被打开（见图11）。“BankThief”的这一功能大概和三星手机在波兰领先的市场份额有很大关系。
图11 阻止三星应用“Device Maintenance”
### **4、命令控制分析**
“BankThief”使用了Google
Firebase云消息传递服务来进行控制命令的下发。攻击者利用Firebase云消息传递控制命令和http协议回传执行结果到自己控制的恶意服务器“anlixes.at”来形成一个控制回路。木马一旦发现用户启动合法的银行应用，便利用劫持功能将自身伪造的钓鱼页面覆盖在合法的银行应用上面。当用户在伪造的界面上输入银行账号、密码等登录信息后，登陆凭证便会被上传到恶意服务器“anlixes.at”上。
#### **4.1 Firebase云消息传递机制利用**
Firebase云消息传递（Firebase Cloud
Messaging，简称FCM），也称Firebase云信息传递，前身为Google云消息传递（GCM），是一项针对Android、iOS以及网络应用程序的消息与通知的跨平台解决方案，目前可免费使用。开发者只需要在[https://firebase.google.com/](https://link.jianshu.com/?t=https%3A%2F%2Ffirebase.google.com%2F)上，登录自己的Google账户，经过简单的设置操作，便可以将Firebase服务配置到自己的移动APP中。完成移动端的APP设置后，开发者就可以在自己的Firebase网页中选择对应的APP，并在网页上编辑发送自定义的Message。客户端则会以Notifications的方式接收这些Message。
攻击者利用Firebase实时云服务发送恶意命令（分析后的命令和含义见表1），木马负责对这些恶意命令进行接收和解析执行（见图12），完成恶意任务。
![