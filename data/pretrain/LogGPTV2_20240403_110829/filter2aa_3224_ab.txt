* Reveals encryption method and
hard coded password
- "thisisthesecret"
* XOR(password,thisisthesecret)
>>> Decompiling APKs
[27/42]
* Vulnerable Device
- Danalock Doorlock
* Reveals encryption method and
hard coded password
- "thisisthesecret"
* XOR(password,thisisthesecret)
>>> Web Servers
User
Lock
Web
Server
[28/42]
* Utilizes a Web Server to generate
passwords
* Requires internet to communicate
and retrieve passwords
* Becoming more widely used
- Kwikset Kevo Doorlock
- Noke Smart Padlock
- Masterlock Smart Padlock
- August Smart Doorlock
- Mesh Motion Bitlock Padlock
>>> Rogue Devices
[29/42]
* Impersonate lock to steal password from user
* Requires:
- Raspberry Pi or Laptop
- Bluez
- Bleno
- LightBlue Explorer
* Mobile and (Somewhat) Undetectable
* Vulnerable Device
- Mesh Motion Bitlock Padlock
* This is possible due to a predictable nonce
* App is running in the background and sends commands
without user interaction
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
[30/42]
* Connect to Bitlock
* Scan for Primary
Services &
Characteristics
* Build copy of device in
Bleno
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
[30/42]
* Connect to Bitlock
* Scan for Primary
Services &
Characteristics
* Build copy of device in
Bleno
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
[30/42]
* Read current nonce from
notification
* Send invalid password
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
[30/42]
* Invalid password
increments nonce again
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
[30/42]
* Follow target and setup
impersonated lock
* Receive connection from
user
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
[30/42]
* Send nonce notification
to user
* Value doesn’t have to be
only n+2, it could be
n+10 or n+100
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
Web
Server
(6) n+2
[30/42]
* Nonce sent from
user to Bitlock’s
server
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
Web
Server
(6) n+2
(7) Enc(n+2)
[30/42]
* Encrypted nonce is
sent back to the
user
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
Web
Server
(6) n+2
(7) Enc(n+2)
(8) Enc(n+2)
[30/42]
* Encrypted nonce is
sent to attacker
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
Web
Server
(6) n+2
(7) Enc(n+2)
(8) Enc(n+2)
[30/42]
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
Web
Server
(6) n+2
(7) Enc(n+2)
(8) Enc(n+2)
(9
)
C
o
n
ne
ct
[30/42]
* Return to lock
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
Web
Server
(6) n+2
(7) Enc(n+2)
(8) Enc(n+2)
(9
)
C
o
n
ne
ct
(
1
0
)
n
+
2
[30/42]
* Receive current
nonce
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
Web
Server
(6) n+2
(7) Enc(n+2)
(8) Enc(n+2)
(9
)
C
o
n
ne
ct
(
1
0
)
n
+
2
(
1
1
)
E
n
c
(
n
+
2
)
[30/42]
* ...and it opens
>>> How Did We Do It?
Attacker
Bitlock
(1) Connect
(2) n
(3) n+1
User
(4) Connect
(5) n+2
Web
Server
(6) n+2
(7) Enc(n+2)
(8) Enc(n+2)
(9
)
C
o
n
ne
ct
(
1
0
)
n
+
2
(
1
1
)
E
n
c
(
n
+
2
)
[30/42]
>>> Rogue Devices
[31/42]
* Deployment in high traffic areas (Coffee
Shop or Universities)
* Theoretically possible to retrieve
password from user and steal bike before
they return
>>> Test Run Bike
[32/42]
* University in Midwest
* 4 bikes on campus
(Summertime)
* Capacity 88 bikes
* Any user can see bikes
within a bikeshare
>>> Test Run Bike
[33/42]
>>> Test Run Bike
[34/42]
>>> Test Run Bike
[35/42]
>>> Test Run Bike
[35/42]
Device Name
>>> Test Run Bike
[35/42]
Device Name
>>> Test Run Bike
[35/42]
Device Name
Nonce
>>> Test Run Bike
[36/42]
* Disclaimer:
We did not open any locks
that do not belong to us ...
>>> Rogue Device Way Ahead
Rogue
Device 2
Rogue
Device 1
User
Lock
Web
Server
[37/42]
WiFi, LTE, Etc
>>> Locating Devices
[38/42]
* BlueFinder
- Open-source tool
- Determines the distance (meters) to a
Bluetooth device through RSS
- Active or Passive Modes
- ~100 samples/sec used to estimate distance
- Mean error ~24% (e.g., +/- 3m at d = 12m)
>>> How do we find these devices?
[39/42]
0
100
200
300
400
500
600
700
800
Distance (m)
-90
-80
-70
-60
-50
-40
-30
-20
RSS (dBm)
Model P = 2.0
Mean RSS
Wireless Demo
[40/42]
>>> Takeaways & Future Work
[41/42]
* Takeaways
- Vendors prioritized physical robustness
over wireless security
- 12/16 locks had insufficient BLE security
- Recommendation:
disable phone’s Bluetooth
when not in use
* Future Work
- Extract pattern of life using history logs
- Dynamic profiles for rogue device
- Extended python functionality
- Evaluate Bluetooth ATM locks
>>> Questions?
[42/42]
Code:
github.com/merculite/BLE-Security
Have comments, compliments, or cash?
Contact us:
team @ merculite.net