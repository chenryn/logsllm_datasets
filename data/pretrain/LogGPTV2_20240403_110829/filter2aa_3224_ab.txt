### Revealing Encryption Method and Hard-Coded Password
- **Hard-Coded Password**: "thisisthesecret"
- **Encryption Method**: XOR(password, "thisisthesecret")

### Decompiling APKs
- **Progress**: 27/42

### Vulnerable Device: Danalock Doorlock
- **Reveals**:
  - Encryption method
  - Hard-coded password: "thisisthesecret"
- **Encryption**: XOR(password, "thisisthesecret")

### Web Servers
- **User**
- **Lock**
- **Web Server**
- **Progress**: 28/42

#### Features
- Utilizes a web server to generate passwords
- Requires internet for communication and password retrieval
- Increasingly popular in smart locks
  - Kwikset Kevo Doorlock
  - Noke Smart Padlock
  - Masterlock Smart Padlock
  - August Smart Doorlock
  - Mesh Motion Bitlock Padlock

### Rogue Devices
- **Impersonate Lock to Steal Password from User**
- **Requirements**:
  - Raspberry Pi or Laptop
  - Bluez
  - Bleno
  - LightBlue Explorer
- **Characteristics**:
  - Mobile and (somewhat) undetectable
- **Vulnerable Device**: Mesh Motion Bitlock Padlock
- **Exploit**: Predictable nonce
- **App Behavior**: Runs in the background, sending commands without user interaction
- **Progress**: 29/42

### How Did We Do It?
- **Attacker**: Connect to Bitlock
  1. **Connect to Bitlock**
  2. **Scan for Primary Services & Characteristics**
  3. **Build copy of device in Bleno**

- **Nonce Manipulation**:
  1. **Read current nonce from notification**
  2. **Send invalid password (increments nonce again)**
  3. **Follow target and set up impersonated lock**
  4. **Receive connection from user**
  5. **Send nonce notification to user (value can be n+2, n+10, or n+100)**
  6. **Nonce sent from user to Bitlock’s server**
  7. **Encrypted nonce is sent back to the user**
  8. **Encrypted nonce is sent to attacker**
  9. **Return to lock**
  10. **Receive current nonce**
  11. **...and it opens**

- **Progress**: 30/42

### Deployment of Rogue Devices
- **High Traffic Areas**:
  - Coffee shops
  - Universities
- **Theoretical Possibility**: Retrieve password from user and steal bike before they return
- **Progress**: 31/42

### Test Run: Bike
- **Location**: University in Midwest
- **Bikes on Campus**: 4 (Summertime)
- **Capacity**: 88 bikes
- **Visibility**: Any user can see bikes within a bikeshare
- **Progress**: 32/42 to 35/42

- **Device Name and Nonce**:
  - **Disclaimer**: We did not open any locks that do not belong to us.
- **Progress**: 36/42

### Rogue Device Way Ahead
- **Rogue Device 1 and 2**
- **User**
- **Lock**
- **Web Server**
- **Communication**: WiFi, LTE, etc.
- **Progress**: 37/42

### Locating Devices
- **BlueFinder**:
  - Open-source tool
  - Determines distance (in meters) to a Bluetooth device through RSS
  - Modes: Active or Passive
  - ~100 samples/sec used to estimate distance
  - Mean error: ~24% (e.g., +/- 3m at d = 12m)
- **Progress**: 38/42

### How to Find These Devices
- **RSS vs. Distance Graph**:
  - Model P = 2.0
  - Mean RSS
- **Wireless Demo**
- **Progress**: 39/42 to 40/42

### Takeaways & Future Work
- **Takeaways**:
  - Vendors prioritize physical robustness over wireless security
  - 12/16 locks had insufficient BLE security
  - Recommendation: Disable phone’s Bluetooth when not in use
- **Future Work**:
  - Extract pattern of life using history logs
  - Dynamic profiles for rogue devices
  - Extended Python functionality
  - Evaluate Bluetooth ATM locks
- **Progress**: 41/42

### Questions?
- **Code**: [github.com/merculite/BLE-Security](https://github.com/merculite/BLE-Security)
- **Contact Us**: team@merculite.net
- **Progress**: 42/42