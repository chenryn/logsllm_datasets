title:HideMyApp: Hiding the Presence of Sensitive Apps on Android
author:Anh Pham and
Italo Dacosta and
Eleonora Losiouk and
John Stephan and
K&apos;evin Huguenin and
Jean-Pierre Hubaux
HideMyApp: Hiding the Presence of 
Sensitive Apps on Android
Anh Pham, ABB Corporate Research; Italo Dacosta, EPFL; Eleonora Losiouk, 
University of Padova; John Stephan, EPFL; Kévin Huguenin, University of Lausanne; 
Jean-Pierre Hubaux, EPFL
https://www.usenix.org/conference/usenixsecurity19/presentation/pham
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.HideMyApp : Hiding the Presence of Sensitive Apps on Android
Anh Pham
ABB Corporate Research, Switzerland
Italo Dacosta
EPFL, Switzerland
Eleonora Losiouk
University of Padova, Italy
John Stephan
EPFL, Switzerland
Kévin Huguenin
University of Lausanne, Switzerland
Jean-Pierre Hubaux
EPFL, Switzerland
Abstract
Millions of users rely on mobile health (mHealth) apps to
manage their wellness and medical conditions. Although the
popularity of such apps continues to grow, several privacy and
security challenges can hinder their potential. In particular,
the simple fact that an mHealth app is installed on a user’s
phone can reveal sensitive information about the user’s health.
Due to Android’s open design, any app, even without per-
missions, can easily check for the presence of a speciﬁc app
or collect the entire list of installed apps on the phone. Our
analysis shows that Android apps expose a signiﬁcant amount
of metadata, which facilitates ﬁngerprinting them. Many third
parties are interested in such information: Our survey of 2917
popular apps in the Google Play Store shows that around 57%
of these apps explicitly query for the list of installed apps.
Therefore, we designed and implemented HideMyApp (HMA),
an effective and practical solution for hiding the presence
of sensitive apps from other apps. HMA does not require any
changes to the Android operating system or to apps yet still
supports their key functionalities. By using a diverse dataset
of both free and paid mHealth apps, our experimental eval-
uation shows that HMA supports the main functionalities in
most apps and introduces acceptable overheads at runtime
(i.e., several milliseconds); these ﬁndings were validated by
our user-study (N = 30). In short, we show that the practice of
collecting information about installed apps is widespread and
that our solution, HMA, provides a robust protection against
such a threat.
1 Introduction
Mobile health (mHealth), the use of technologies such as
smartphones and wearable sensors for wellness and medical
purposes, promises to improve the quality of and reduce the
costs of medical care and research. An increasing number of
people rely on mHealth apps to manage their wellness and to
prevent and manage diseases.1 For instance, more than a third
of physicians in the US recommend mHealth apps to their
patients [23], and there are around 325,000 mHealth apps
available in major mobile app stores.2
Given the sensitivity of medical data, the threats of pri-
vacy leakage are one of the main hindrances to the success of
mHealth technologies [37]. In this area, a serious and often
overlooked threat is that an adversary can infer sensitive infor-
mation simply from the presence of an app on a user’s phone.
Previous studies have shown that private information, such as
age, gender, race, and religion, can be inferred from the list of
installed apps [22, 29, 47]. With the increasing popularity of
mHealth apps, an adversary can now infer even more sensitive
information. For example, learning that a user has a diabetes
app reveals that the user probably suffers from this disease;
such information could be misused to proﬁle, discriminate, or
blackmail the user. When inquired about this threat, 87% of
the participants in our user-study expressed concern about it
(Section 10.6).
Due to Android’s open design, a zero-permission app can
easily infer the presence of speciﬁc apps, or even collect the
full list of installed apps on the phone [55]. Our analysis
shows that Android exposes a considerable amount of static
and runtime metadata about installed apps (Section 4); this
information can be misused by a nosy app to accurately ﬁnger-
print these apps. In 2014, Twitter was criticized for collecting
the list of installed apps in order to offer targeted ads.3 But
Twitter is not the only app interested in such information. Our
static and dynamic analysis of 2917 popular apps in the US
Google Play Store shows that approximately 57% of these
apps include calls to API methods that explicitly collect the
list of installed apps (Section 5). Our analysis, corroborating
the ﬁndings of previous studies [29, 32], also shows that free
apps are more likely to query for such information and that
third-party libraries (libs) are the main requesters of the list of
installed apps. As users have on average 80 apps installed on
their phones,4 most of them being free, there is a high chance
of untrusted third-parties obtaining the list of installed apps.
Since 2015, Android has classiﬁed as potentially harmful
apps (PHA)5 the apps that collect information about other
apps without user consent [1]. To avoid this classiﬁcation,
USENIX Association
28th USENIX Security Symposium    711
developers simply need to provide a privacy policy that de-
scribes how the app collects, uses, and shares user data.6
We ﬁnd it interesting that only 7.7% of the evaluated apps
clearly declared that they collect the list of installed apps in
their privacy policies, and some even claim that such a list
is non-personal information (Section 5.4). Also, few users
read privacy policies [41], as our user study also conﬁrmed
(Section 10.6).
Android does not provide mechanisms to hide the use of
sensitive apps on a phone; a few third-party tools, designed
for other purposes, can provide only partial protection to some
users (Section 6). Android announced that their security ser-
vices will display warnings on apps that collect without con-
sent users’ personal information, including the list of installed
apps.7 This is a welcomed step, but the effectiveness of secu-
rity warnings is known to be limited [30, 49] and it is unclear
how queries by third-party libraries will be handled. It is also
unclear if such an approach will be able to prevent more sub-
tle attacks, where a nosy app checks for the existence of a
speciﬁc app or a small set of sensitive apps by using more
advanced ﬁngerprinting techniques (Section 4).
We propose HideMyApp (HMA), the ﬁrst system that enables
organizations and developers to distribute sensitive apps to
their users while considerably reducing the risk of such apps
being detected by nosy apps on the same phone. Apps pro-
tected by HMA expose signiﬁcantly less identifying metadata,
therefore, it is more difﬁcult for nosy apps to detect their pres-
ence, even when the nosy apps have all Android permissions
and debugging privileges. With HMA, an organization such as a
consortium of hospitals sets up an HMA app store where autho-
rized developers collaborating with the hospitals can publish
their mHealth and other sensitive apps. Users employ a client
app called HMA Manager to anonymously (un)install, use, and
to update the apps selected from the HMA app store; an the
HMA App Store does not learn about the set of apps that a
user has installed from the store. HMA transparently works on
stock Android devices, it does not require root access, and
it preserves the app-isolation security model of the Android
operating system (OS). Still, HMA preserves the key functional-
ities of mHealth apps, e.g., connecting to external devices via
Bluetooth, sending information over the Internet, and storing
information in databases.
With HMA, users launch a sensitive app inside the context
of a container app, without requiring the sensitive app to be
installed. A container app is a dynamically generated wrapper
around the Android application package (APK) of the sensi-
tive app, and it is designed in such a way that the sensitive
app cannot be ﬁngerprinted yet still can support inter-process
communication between the sensitive app and other installed
apps. To launch the APK from the container app, HMA relies on
techniques described in existing work: the dynamic loading of
compiled source code and app resources from the APKs and
user-level app-virtualization techniques, e.g., [24, 25]. How-
ever, note that app virtualization alone is insufﬁcient in provid-
ing robust protection against ﬁngerprinting attacks, as many of
the information leaks uncovered by our analysis are still pos-
sible when just app virtualization is used. Therefore, our main
contribution is the design and evaluation of mechanisms built
on top of app-virtualization in order to reduce the information
leaks that could be exploited to ﬁngerprint sensitive apps. HMA
provides multiple tiers of protection: For baseline protection
against current threats, HMA obfuscates static meta-data of sen-
sitive apps (e.g., their package names and components). To
provide more advanced protection (e.g., against side-channel
attacks), HMA can add an additional layer of obfuscation for
sensitive apps (e.g., randomizing memory access). In some
cases, app developers might need to be involved to make
changes to the apps. Moreover, we are the ﬁrst to identify the
security and functional limitations of using app virtualization
for the purpose of hiding apps.
Our evaluation of HMA on a diverse set of both free and paid
mHealth apps on the Google Play Store shows that HMA is
practical, and that it introduces reasonable operational delays
to the users. For example, in 90% of the cases, the delay
introduced by HMA to the cold start of an mHealth app by
a non-optimized proof-of-concept implementation of HMA is
less than one second. At runtime, the delay introduced is of
only several milliseconds. Moreover, our user-study (N = 30)
suggests that HMA is user-friendly and of interest to users.
Our main contributions in this work are as follows.
• Systemized knowledge: We are the ﬁrst to investigate
the techniques that an app can use to ﬁngerprint another
app.8 Also, through our static and dynamic analysis on
apps from the Google Play Store, we gain understanding
about the prevalence of the problem of apps ﬁngerprint-
ing other installed apps.
• Design and implementation of a solution for hiding sen-
sitive apps: We present HMA, a practical system that pro-
vides robust defense against ﬁngerprinting attacks that
target sensitive apps on Android. HMA works on stock
Android, and no ﬁrmware modiﬁcation or root privilege
is required.
• Thorough evaluation of HMA: The evaluation of HMA’s
prototype on apps from the Google Play Store suggests
that HMA is practical. Also, our user study suggests that
HMA is perceived as usable. HMA’s source code is available
at https://github.com/lca1/HideMyApp.
2 Related Work
Researchers have actively investigated security and privacy
problems in the Android platform. Existing works show
that third-party libs often abuse their permissions to collect
users’ sensitive information [35, 48], and that apps have sus-
picious activities e.g., collecting call logs, phone numbers,
and browser bookmarks [29, 42]. Zhou et al. [55] show that
712    28th USENIX Security Symposium
USENIX Association
Android’s open design has made publicly available a num-
ber of seemingly innocuous phone resources, including the
list of installed apps; these resources could be used to infer
sensitive information about their users, e.g., users’ gender
and religion [40, 46]. Similarly, Chen et al. [27] show how to
ﬁngerprint Android apps based on their power consumption
proﬁles. A signiﬁcant research effort has been devoted to ﬁn-
gerprinting Android apps based on their (encrypted) network
trafﬁc patterns [28, 51, 54]. Researchers have also shown that
re-identiﬁcation attacks are possible using a small subset of
installed apps [22, 33]. Demetriou et al. [29], in the same line
as our work, used static analysis to quantify the prevalence
of the collections of the list of installed apps and their meta-
data by third-party libs. We go beyond their work, however,
by systematically investigating all possible information leaks
that nosy apps can exploit to ﬁngerprint other apps and by
performing a dynamic analysis and privacy-policy analysis.
Existing mechanisms for preventing apps from learning
about the presence of another app are not sufﬁcient (Section 6).
As we will show in Section 8, user-level virtualization tech-
niques that enable an app (called target app) to be encapsu-
lated within the context of another app (called container app)
can be used as a building block for HMA. These techniques are
used to sandbox untrusted target apps (e.g., [24,25]) or to com-
partmentalize third-party libs from the host apps (e.g., [34]).
As they were designed for a different problem, however, they
do not directly help hide the presence of a sensitive target
app: They either require the target app to be ﬁrst installed,
thus exposing them to nosy apps through public APIs, or they
run multiple target apps inside the same container app, thus
violating the Android’s app-isolation security model. They
also do not provide any insight into the possible information
leaks that can be exploited to ﬁngerprint apps and how their
techniques can be used for hiding the presence of apps.
3 Background on Android
Android Security Model. Android requires each app to have
a unique package name deﬁned by its developers and cannot
be changed during its installation or execution. Upon instal-
lation, the Android OS automatically assigns a unique user
ID (UID) to each app and creates a private directory where
only this UID has read and write permissions. Additionally,
each app is executed in its dedicated processes. Thus, apps
are isolated, or sandboxed, both at the process and ﬁle levels.
Apps interact with the underlying system via methods de-
ﬁned by the Java API framework and the shell commands
deﬁned by the Linux-layer interface. Some API methods re-
quire users to grant apps certain permissions. Android deﬁnes
three main protection levels for apps: normal, signature, and
dangerous permissions.9 Apps can have special permissions;
users are required to grant these permissions to apps through
the Settings app. Any app can execute shell commands; how-
ever, depending on its privilege, i.e., default app privilege,
debugging (adb)10 or root, the outputs of the same shell com-
mands are different.
Android Apps and APK Files. An Android app must con-
tain a set of mandatory information: a unique package name,
an icon, a label, a folder containing resources, and at least
one of the following components: activity, service, broadcast
receiver and content provider. An activity represents a screen,
and a service performs long-running operations in the back-
ground. A broadcast receiver enables an app to subscribe and
respond to speciﬁc system-wide events. A content provider
manages the sharing of data between components in the same
app or with other apps. Apps can optionally support other
features such as implicit or explicit intents, permissions, and
some customized app conﬁgurations. Apps are distributed
in the form of APK ﬁles. An APK is a signed zip archive
that contains the compiled code and resources of the app.
Each APK also includes a manifest conﬁguration ﬁle, called
AndroidManifest.xml; this ﬁle contains a description of
the app (e.g., its package name and components).
4 Fingerprintability of Android Apps
Here, we demonstrate that an app, depending on its capabili-
ties (its granted permissions and/or privileges), can retrieve
information about other installed apps. This includes static
information (i.e., information available after apps are installed
and that typically does not change during apps’ lifetimes), and
runtime information (i.e., information generated or updated
by apps at runtime). Our analysis was conducted on Android
8.0. Its ﬁndings are summarized in Table 1.
Without Permissions. An app can easily check if a spe-
ciﬁc app is installed on the phone. This can be done
by invoking two methods getInstalledApplications()
and getInstalledPackages() (hereafter abbreviated as
getIA() and getIP(), respectively);
they return the
entire list of installed apps. An app can also reg-
ister broadcast receivers (e.g., PACKAGE_INSTALLED) to
be notiﬁed when a new app is installed.
It can also
use various methods of
the PackageManager class
(e.g., getResourcesForApplication()) as an oracle to
check for the presence of a speciﬁc app. These methods take
a package name as a parameter and return null if the package
name does not exist on the phone.
If Android restricts access to package names of installed
apps (e.g., by requiring permissions), an app can still retrieve
other static information about installed apps for ﬁngerprinting
attacks. This includes their mandatory information: the names
of their components, their icons, labels, resources, developers’
signatures and signing certiﬁcates. This also includes cus-
tom features used by installed apps: their permissions, apps
conﬁgurations (themes, styles, and supported SDK). Such
information can be obtained through a number of methods in
USENIX Association
28th USENIX Security Symposium    713