of accuracy, however: whereas our process scanner found all in-
stances of the structure in all tested memory images with no false
positives, Laika had false positive and negative rates of 32% and
35%, respectively.
We anticipate that rootkit authors will soon add signature eva-
sion techniques to their standard toolkits. Evasion of signatures
for kernel data has already been publicly discussed: Walters and
Petroni [47] demonstrated that changing a single bit in the Windows
process data structure was sufﬁcient to evade all known signatures
without harming the functionality of the running process. Similarly,
in response to Rutkowska’s signature-based modGREPER [35], va-
lerino [43] described an evasion technique that altered a number of
ﬁelds in the driver and module structures. Finally, bugcheck [6]
described a number of methods (including signatures that match
ﬁxed strings) for ﬁnding kernel data structures in Windows mem-
ory and explored several evasion techniques that could be used to
hide objects from those techniques. As tools that ﬁnd hidden ob-
jects through memory scans become more common, we believe
malware authors will adapt by attempting to evade signatures. This
threat motivates our work to generate signatures for kernel data that
are resistant to evasion.
3. OVERVIEW
A signature-based scanner examines each offset in physical mem-
ory, looking for predeﬁned patterns in the data that indicate the
presence of a particular data structure. These patterns take the form
of a set of constraints on the values of various ﬁelds in the struc-
ture. For example, Figure 1 shows a simple signature for a process
data structure in Windows (called EPROCESS; this structure holds
accounting information and metadata about a task). The constraints
check to see that the Type and Size ﬁelds match predeﬁned con-
stants, that the ThreadListHead pointer is greater than a certain
value, and that the DirectoryTableBase is aligned to 0x20
bytes. These invariants must be general enough to encompass all
instances of the data structure, but speciﬁc enough to avoid match-
ing random data in memory.
An adversary’s goal is to hide the existence of a kernel data struc-
ture from a signature-based scanner while continuing to make use
of that data structure. We assume that the attacker has the ability to
run code in kernel-mode, can read and modify any kernel data, and
cannot alter existing kernel code. This threat model represents a re-
alistic attacker: it is increasingly common for malware to gain the
ability to execute code in kernel mode [13], and there are a number
of solutions available that can detect and prevent modiﬁcations to
the core kernel code [31,37], but we are not aware of any solutions
that protect kernel data from malicious modiﬁcation.
To carry out a process hiding attack, such as the one shown in
Figure 2, an attacker conceals the process from the operating sys-
tem using a technique such as DKOM. This attack works by remov-
ing the kernel data structure (EPROCESS) representing that process
from the OS’s list of running processes. The process continues to
run, as its threads are known to the scheduler, but it will not be vis-
ible to the user in the task manager. However, it will still be visible
to a signature-based scanner [5, 36] that searches kernel memory
for process structures rather than walking the OS process list.
To evade such scanners, the attacker must modify one of the
ﬁelds in the process data structure so that some constraint used by
the signature no longer holds. The ﬁeld must also be carefully cho-
sen so that the modiﬁcation does not cause the OS to crash or the
malicious program to stop working. In the example shown in Fig-
ure 2, the attacker zeroes the Size ﬁeld, which has no effect on
the execution of his malicious process, but which effectively hides
the data structure from the scanner.
In order to defend against these kinds of attacks, signatures for
data structures must be based on invariants that the attacker cannot
violate without crashing the OS or causing the malicious program
to stop working. The signature’s constraints, then, should be placed
only on those ﬁelds of the data structure that are critical to the cor-
rect operation of the operating system. Rather than relying on hu-
man judgement, which is prone to errors, our solution proﬁles OS
execution in order to determine the most frequently accessed ﬁelds,
and then actively tries to modify their contents to determine which
Type == 0x03Size == 0x1bThreadListHead >= 0x80000000DirectoryTableBase is aligned to 0x20Process AProcess BHidden ProcessType: 0x03Size: 0x1bThreadListHead:0x8182dfd4DirectoryTableBase:0x08140220PreviousNext......Type: 0x03Size: 0x00ThreadListHead:0x81840decDirectoryTableBase:0x08140100PreviousNext......Type: 0x03Size: 0x1bThreadListHead:0x819cc7e4DirectoryTableBase:0x08140080PreviousNext............568are critical to the correct functioning of the system. Such ﬁelds will
be difﬁcult for an attacker to modify without crashing the system,
and are good candidates for robust signatures.
Finally, we will demonstrate that it is possible to automatically
infer invariants on these robust ﬁelds and construct a scanner that
is resistant to evasion attacks.
4. ARCHITECTURE
Our system architecture generates signatures using a three step
process. We ﬁrst proﬁle the data structure we wish to model to de-
termine which ﬁelds are most commonly accessed by the operating
system (Section 4.1). This is done to narrow the domain of the data
that we must test in the fuzzing stage: if a ﬁeld is never accessed in
the course of the normal operation of the OS, it is safe to assume
that it can be modiﬁed without adversely affecting OS functionality.
Next, the most frequently accessed ﬁelds are fuzzed (Section 4.2)
to determine which can be modiﬁed without causing a crash or oth-
erwise preventing the structure from serving its intended purpose.
Finally, we collect known-good instances of the data structure, and
build a signature based on these instances that depends only on the
features that could not be safely modiﬁed during fuzzing (Section
4.3).
Proﬁling and fuzzing are both essentially forms of feature se-
lection. Each tests features of the data structure to determine their
suitability for use in a signature. Features that are unused by the
operating system or are modiﬁable without negative consequences
are assumed to be under the control of the attacker and eliminated
from consideration. Including such weak features would allow an
attacker to introduce false negatives by violating the constraints of
a signature that used them, in the same way that a polymorphic
virus evades an overly speciﬁc antivirus signature. At the other end
of the spectrum, if too few features remain at the end of feature se-
lection, the resulting signature may not be speciﬁc enough and may
match random data, creating false positives.
The proﬁling and fuzzing stages are implemented using the Xen
hypervisor [3] and VMware Server [45], respectively. Because pro-
ﬁling requires the ability to monitor memory access, we chose to
use Xen, which is open source and allowed us to make the neces-
sary changes to the hypervisor to support this monitoring. How-
ever, Xen lacks the ability to save and restore system snapshots, a
feature needed for reliable fuzz testing, so we use VMware Server
for this stage. Also, because VMware’s snapshots save the con-
tents of physical memory to disk, we were able to easily modify
the memory of the guest OS by altering the on-disk snapshot ﬁle.
4.1 Data Structure Proﬁling
In the proﬁling stage (shown in Figure 3), we attempt to deter-
mine which structure ﬁelds are most commonly accessed by the op-
erating system during normal operation. Fields which are accessed
by the OS frequently are stronger candidates for use in a signa-
ture because it is more likely that correct behavior of the system
depends upon them. By contrast, ﬁelds which are rarely accessed
are most likely available to the attacker for arbitrary modiﬁcation;
if the OS never accesses a particular ﬁeld in the data structure, its
value cannot inﬂuence the ﬂow of execution.
In our implementation, we make use of a modiﬁed Xen hypervi-
sor and the “stealth breakpoint” technique described by Vasudevan
and Yerraballi [44] to proﬁle access to the data structure. Stealth
breakpoints on memory regions work by marking the memory page
that contains the data to be monitored as “not present” by clearing
the Present bit in the corresponding page table entry. When the
guest OS makes any access to the page, the page fault handler is
triggered, an event which can be caught by the hypervisor. The hy-
pervisor then logs the virtual address that was accessed (available
in the CR2 register), emulates the instruction that caused the fault,
and allows the guest to continue. These logs can later be examined
to determine what ﬁelds were accessed, and how often.
For example, to monitor the ﬁelds of the Windows EPROCESS
data structure, we launch a process and determine the address in
memory of the structure. We then instruct the hypervisor to log
all access to that page, and then allow the process to run for some
time. Finally, the logs are examined and matched against the struc-
ture’s deﬁnition to determine how often individual ﬁelds were read
or written. This process is repeated using several different applica-
tions; only the ﬁelds that are accessed during the execution of every
program will be used as input for the fuzzing stage.
We note in passing that determining the precise ﬁeld accessed
requires access to the data structure’s deﬁnition. On open source
operating systems, this information is easy to come by, but for
closed source OSes such as Windows it may be more difﬁcult to
obtain. For our implementation, which targets Windows XP, we
used the debugging symbols provided by Microsoft; these symbols
include structure deﬁnitions for many kernel structures, including
EPROCESS.
4.2 Fuzzing
Although a ﬁeld that is accessed frequently is a stronger candi-
date than one which is never accessed, this condition alone is not
sufﬁcient to identify truly robust features for use in signatures. For
example, the operating system may update a ﬁeld representing a
performance counter quite frequently, but its value is not signiﬁ-
cant to the correct operation of the OS. Thus, to be conﬁdent that a
signature based on a particular ﬁeld will be robust against evasion
attacks, we must ensure that the ﬁeld cannot be arbitrarily modiﬁed.
The actual fuzzing (shown in Figure 4) is done by running the
target operating system inside VMware Server [45]. As in the pro-
ﬁling stage, we ﬁrst create a valid instance of the data structure.
Next, the state of the guest VM is saved so that it can be easily re-
stored after each test. For each ﬁeld, we then replace its contents
with test data from one of several classes:
1. Zero: null bytes. This is used because zero is often a signif-
icant special case; e.g., many functions check if a pointer is
NULL before dereferencing.
2. Random: n random bytes from a uniform distribution, where
n is the size of the ﬁeld.
3. Random primitive type: a random value appropriate to the
given primitive type. In particular, pointer ﬁelds are fuzzed
using valid pointers to kernel memory.
4. Random aggregate type: a random value appropriate to the
given aggregate type (i.e., structure). Embedded structures
are replaced by other valid instances of that structure, and
pointers to structures of a given type are replaced by pointers
to that same type. Currently implemented as a random choice
of value from that ﬁeld in other instances of the target data
structure.
After the data is modiﬁed, we resume the guest VM and monitor
the operating system to observe the effects of our modiﬁcations.
To determine whether our modiﬁcation was harmful, we must con-
struct a test, φ, which examines the guest and checks if the OS is
still working and the functionality associated with the target data
structure instance is still intact.
For a process data structure, φ could be a test that ﬁrst checks to
see if the OS is running, and then determines whether the associated
569Figure 3: The proﬁling stage of our signature generation system. As the OS executes, accesses to the target data structure are logged.
These logs are then combined with knowledge of the ﬁeld layout in the structure to produce an access proﬁle.
Figure 4: The architecture of the fuzzing stage. Starting from
some baseline state, a test pattern is written into a ﬁeld in the
target data structure in the memory of the virtual machine. The
VM is then resumed and tested to see if its functionality is in-
tact. If so, the modiﬁcation was not harmful and we consider
the ﬁeld a weaker candidate for a signature.
program is still running. This check may be simpler to program if
the behavior of the application in question is well-known. In our
experiments (described in Section 5.1), we used an application we
had written that performed some simple functions such as creating
a ﬁle on the hard drive. This allowed φ to check if the program had
continued to run successfully by simply testing for the existence of
the ﬁle created by the program.
To actually inject the data, we pause the virtual machine, which
(in VMware) writes the memory out to a ﬁle. We then use the
memory analysis framework Volatility [46] (which we modiﬁed to
support writing to the image) to locate the target instance and mod-
ify the appropriate ﬁeld with our random data. Volatility was ideal
for this purpose, because it has the ability to locate a number of
kernel data structures in images of Windows memory and provides
a way to access the data inside the structures by ﬁeld name. The
modiﬁcations to allow writing to the image (a feature not normally
supported by Volatility, as it is primarily a forensics tool) required
303 lines of additional code.
Finally, we resume the virtual machine and check to see if φ
indicates the system is still functioning correctly after some time
interval. This interval is currently set to 30 seconds to allow time
for the VM to resume and any crashes to occur. Software engineer-
ing studies [26] have found that crashes typically occur within an
average of one million instructions from the occurrence of mem-
ory corruption; thus, given current CPU speeds, it is reasonable to
assume that this 30 second delay will usually be sufﬁcient to deter-
mine whether the alteration was harmful to program functionality.
The result of the test is logged, and we restore the saved virtual ma-
chine state before running the next test. Any ﬁelds whose modiﬁ-
Figure 5: Two sample constraints found by our signature gen-
erator. If all constraints match for a given data buffer, the plu-
gin will report that the corresponding location in memory con-
tains an EPROCESS instance.
cation consistently caused φ to indicate failure are used to generate
a signature for the data structure.
4.3 Signature Generation
The ﬁnal signature generation step is performed using a simpli-
ﬁed version of dynamic invariant detection [12]. For each ﬁeld
identiﬁed by the feature selection as robust, we ﬁrst gather a large
number of representative values from all instances of the target data
structure in our corpus of memory images. Then, for each ﬁeld, we
test several constraint templates to see if any produce invariants that
apply to all known values of that ﬁeld. The templates checked are:
• Zero subset: check if there is a subset of the values that is
zero. If so, ignore these values for the remaining checks.
• Constant: check if the ﬁeld takes on a constant value.
WinXP GuestXen¬PresentWinXP GuestXenXHypervisor marks page containing target data structure as "Not Present"Guest OS accesses page, fault occurs and is propagated to hypervisor.WinXP GuestXenHypervisor logs address accessed and emulates requested operation.Access LogStructure DeﬁnitionStructure AccessProﬁleLogPause VMRestore to Base ImageInject DataResume, check functionalityWeaker FeatureStronger FeatureWorksCrashesStartclassScan(RobustPsScanner,PoolScanProcessFast2.Scan):definit(self,poffset,outer):RobustPsScanner.init(self,poffset,outer)self.addconstraint(self.checkobjecttable)self.addconstraint(self.checkgrantedaccess)[...]defcheckobjecttable(self,buf,off):val=readobjfrombuf(buf,types,[‘EPROCESS’,‘ObjectTable’],off)res=(val==0or(val&0xe0000000==0xe0000000andval%0x8==0))returnresdefcheckgrantedaccess(self,buf,off):val=readobjfrombuf(buf,types,‘EPROCESS’,‘GrantedAccess’],off)res=val&0x1f07fb==0x1f07fbreturnresListing1:Twosampleconstraintsfoundbyoursigna-turegenerator.Ifallconstraintsmatchforagivendatabuﬀer,thepluginwillreportthatthecorrespondinglo-cationinmemorycontainsanEPROCESSinstance.2570• Bitwise AND: check if performing a bitwise AND of all
values results in a non-zero value. This effectively checks
whether all values have any bits in common.
• Alignment: check if there is a power of two (other than 1)
on which all values are aligned.
First, because many ﬁelds use zero as a special case to indicate
that the ﬁeld is not in use, we check if any of the instances are zero,
and then remove these from the set to be examined. Constraints are
then inferred on the remaining ﬁelds, and zero will be included as
a disjunctive (OR) case in the ﬁnal signature. The other templates
will produce conjunctive constraints on the non-zero ﬁeld values.