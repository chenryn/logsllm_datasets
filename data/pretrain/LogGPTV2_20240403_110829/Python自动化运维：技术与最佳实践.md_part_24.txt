logs/host.access.log main;
80 default_server;
'$remote_addr - $remote_user [$time_local]
[ grains['max_open_file'] }};
0;
:www.linuxidc.com
/50x.html;
/404.html;
info;
notice;
main;
"$request"
---
## Page 210
片段如下：
10.7.5
登录weblgroup 组的一台服务器，检查Nginx的配置，尤其是变量部分的参数值，配置
worker_processes
【/etc/nginx/nginx.conf 】
user
执行刷新 state配置，结果如图10-19所示。
校验结果
location=/50x.html{
Linux公社 www.linuxidc.com
root
ate:
N2013-08-020
esult:
on:
Omr
ion:
2：
nginx;
021
/usr/share/nginx/html;
图10-19刷新state返回结果（部分截图）
十
file
nginx
manac
/etc/nginx/nginx
he
File
oan
~]#salt
rue
ice nginx has been
follo
/etc/nginx/nginx.conf
New
con
第10章集中化管理平台Saltstack详解183
---
## Page 211
利用这个思路扩展到其他功能平台。
异化，包括不同硬件配置、内核参数等，配置片段如下：
184第二部分高级篇
至此，一个模拟生产环境Web 服务集群的配置集中化管理平台已经搭建完成，大家可以
再登录web2group组的一台服务器，检查Nginx的配置，对比weblgroup组的服务器差
events{
pid
#error_log
#error_log
errorlog
worker_rlimit nofile 65535;
worker_cpu_affinity 1000 0100 0010 0001;
worker_processes
user
events{
pid
terrorlog
#errorlog
error_log
worker_rlimit_nofile65535;
10.1至10.6节的 Saltstack介绍可参考官网文档http://docs.saltstack.com/en/latest/。
worker_connections
worker_connections
location/
location/
/var/run/nginx.pid;
/var/1og/nginx/error.log;
/var/run/nginx.pid;
/var/log/nginx/error.log
/var/log/nginx/error.log;
index
root
/var/log/nginx/error.log
/var/log/nginx/error.1og
Linux公社 www.linuxidc.com
index
root
/var/log/nginx/error.log
4
index.html index.htm;
/data;
nginx;
index.html index.htm;
www:
65535;
65535;
info;
notice;
info;
notice;
---
## Page 212
件分发的工作，同时API支持跨语言，可以与现有运营平台打通，实现交互式更强、体验更
API支持、配置简单等方面还是能体现出其优势，适合中小型服务集群的远程命令执行、文
相比 Saltstack或Ansible，Func在文件配置、状态管理方面还是空白，但在远程命令执行
分，master 为主控端，slave 为被控端。Func 具有以下特点。
习、使用和扩展，功能强大，只需要极少的配置和维护操作。Func 分为 master 和 slave 两部
https://fedorahosted.org/func。它是一个能有效简化多服务器系统管理工作的工具，它易于学
网络控制器，是为解决集群管理、监控问题而设计开发的系统管理基础框架，官网地址为
Func与 Saltstack在主、被控端建立信任机制是一样的，都采用了证书+签名的方式。
Func（Fedora UnifiedNetworkController）是由红帽子公司以Fedora平台构建的统一
都是自动完成的。
口Func平台没有与数据库关联，不需要复杂的安装与配置，服务器间安全证书的分发
口提供封装大量通用的服务器管理命令模块。
口可以通过Kickstart预安装Func到系统中，自动注册到主控服务器端。
口Func通信基于XMLRPC和SSL标准协议，具有模块化的可扩展的特点。与Saltstack
口支持命令行方式发送远程命令或者远程获取数据。
口支持在主控机上管理任意多台服务器，或任意多个服务器组。
认证方式一致。
展。而且任何Func命令行能完成的工作，都能通过API编程实现。
Linux公社 www.linuxidc.com
统一网络控制器Func详解
第11章
Chapter!l
---
## Page 213
func 命令用到此配置，如：
过配置主机hosts 来解决主机名的问题。主控端hosts 配置如下：
11.1.2
CentOS release 6.4，自带Python 2.6.6。相关服务器信息如表11-1所示。
11.1.1业务环境说明
装步骤。
最新版本为0.28，由 func、certmaster、pyOpenSSL三个组件组成。下面详细讲解Func的安
11.1
好的自动化运营平台。
186第二部分高级篇
为了方便读者理解，笔者通过虚拟化环境部署功能服务器来进行演示，操作系统版本为
修改/etc/certmaster/minion.conf的certmaster参数，指向证书服务器，即主控端服务器，
192.168.1.22
【/etc/hosts】
在设备通信上Func要求使用主机名来识别，在没有内部域名解析服务的情况下，可通
主控端部署在主机名为 SN2013-08-020的设备上，通过yum方式安装，如下：
1.主控端服务器安装
Func需要在主控端、被控端部署环境，建议读者采用 yum 的方式实现部署。目前Func
192.168.1.20
192.168.1.21
/sbin/chkconfig --level 345 certmaster on
#yum install func-y
安装 Func
Func的安装
minion
minion
Master
角色
Linux公社 www.linuxidc.com
func.master.server.com
SN2013-08-022
SN2013-08-021
表11-1业务环境表说明
SN2013-08-022
SN2013-08-021
SN2013-08-020
主机名
192.168.1.22
192.168.1.21
192.168.1.20
---
## Page 214
机名，以SN2013-08-021主机为例，配置如下：
建立信任关系，如：
安装，如下：
修改/etc/func/minion.conf 的 minion_name 参数，作为被控主机的唯一标识，一般使用主
【/etc/certmaster/minion.conf】
被控端部署在主机名为SN2013-08-021、SN2013-08-022的设备上，同样通过yum方式
cert_dir=/etc/pki/certmaster
修改/etc/certmaster/minion.conf的certmaster参数，以便指向证书服务器发出签名请求，
192.168.1.20
配置hosts 信息：
#/sbin/chkconfig --level 345 funcd on
2.被控端服务器安装
至此，主控端配置完毕。
配置iptables，开通192.168.1.0/24网段访问证书服务·51235（certmaster服务）端口。
#/sbin/servicecertmaster start
启动证书服务：
certmaster = func.master.server.com
【/etc/certmaster/minion.conf】
certmaster_port
certmaster=func.master.server.com
#configuration for minions
cert_dir=/etc/pki/certmaster
certmaster_port
main]
configuration for minions
Linux公社 www.linuxidc.com
=51235
func.master.server.com
第11章
统一网络控制器Func详解187
---
## Page 215
的参数 autosign= no为 autosign= yes 即可。
188第二部分高级篇
删除（注销）签名主机使用certmaster-ca-c hostname，如：
使用func"*" list_minions查看已经完成签名的主机名，如：
Func 也提供了类似 Saltstack自动签名的机制，通过修改/etc/certmaster/certmaster.conf
sn2013-08-022
当然，也可以结合--list、--sign 参数实现一键完成所有主机的签名操作，如：
#func
# certmaster-ca --sign sn2013-08-021
证书签名通过certmaster-ca--sign hostname命令来完成，如：
sn2013-08-022
sn2013-08-021
在主控端运行certmaster-ca--list 获取当前请求证书签名的主机清单，如：
3.证书签名
至此，被控端配置完毕。
配置iptables，开通192.168.1.20主控端主机访问本机51234（func服务）端口。
#/sbin/service funcd start
启动func服务：
certmaster-ca --list
method_log_dir=/var/log/func/methods/
minion_name= SN2013-08-021
listen_addr
acl_dir = /etc/func/minion-acl.d
log_1
[main]
#configuration for minions
level
+*! list_minions
Linux公社 www.linuxidc.com
INFO
---
## Page 216
者建议使用API方式对应用场景的逻辑进行封装，将权限放到一个预先定制好的方框中，
进行结果集的解析工作非常有利，例如，远程运行“df-m”命令的运行结果如图11-2所示。
args（模块参数）>
func/wiki/ModulesList。命令行调用模块格式：
SNMPModule（SNMP信息），等等，更多模块介绍见官网模块介绍：https://fedorahosted.org/
管理）、NetworkTest（网络测试）ProcessModule（进程管理）SysctIModule（sysctl管理）
踪）IPtablesModule（iptables 管理）MountModule（Mount 挂载）NagiosServerModule（Nagios
（拷贝文件）、CpuModule（CPU信息）、DiskModule（磁盘信息）、FileTrackerModule（文件跟
11.2
在所有模块中，CommandModule模块最常用，可以在目标被控主机执行任意命令。
模块命令行执行结果都以Python的元组字符串返回（API以字典形式返回），这对后续
Func提供了非常丰富的功能模块，
ooteSN2013-08-020~]#func
校验安装、任务签名是否正确，通过func"*"ping命令来测试，如图 11-1所示。
#certmaster-ca -c sn2013-08-021
11286
Func常用模块及API
书文件，再运3行certmaster-request进行证书请求，具体操作步骤如下：
#rm-rf/etc/pki/certmaster/主机名.*
/usr/bin/certmaster-request
159
872
Linux公社 www.linuxidc.com
4%/data\n'
1M-blocks
ok
OK
rooteSN2013-08-020 func]#func
sn2013-08-021
图11-2返回主机内存使用信息
图11-1测试认证主机的连通性
Used Available Use%
242
包括CommandModule（执行命令）、CopyFileModule
第11章统一网络控制器Func详解189
242
ping
0%/dev/shmn/dev/sda3
sdal
14765
实
笔
---
## Page 217
11.2.2
web1、web2、web3、、webn.webapp.com，要查看所有Web应用的uptime信息可以运行：
可以根据实际应用场景随意组合。例如，我们定义的多台Web业务服务器主机名分别为：
“？”代表单个任意字符，例如：
11.2.1
现收敛操作。
190
CopyFileModule实现主控端向目标主机拷贝文件，类似于 scp的功能。
（1）功能
（1）功能
1.执行命令模块
多个目标主机名使用分号分隔，如：
“SN2013-*-02?”在本文环境中将匹配到SN2013-08-021、SN2013-08-022两台主机，
Func选择目标主机操作对象支持“*”与“？”方式匹配，其中“*”代表任意多个字符，
2.文件拷贝模块
printclient.command.run("free-m")
import func.overlord.clientas func
（3）API模式
（2）命令行模式
CommandModule实现Linux远程命令调用执行。
"df -m""
#func
#func"SN2013-*-02?"call command run"uptime"
第二部分高级篇
常用模块详解
选择目标主机
"SN2013-08-022"
"web.example.org;mailserver.example.org;db.example.org"call command run
。下面对Func 常用的模块一一进行讲解。
func.C1ient("SN2013-08-022")
callcommand run"ulimit-a"
Linux公社 www.linuxidc.com
call command run "free-m"
---
## Page 218
数“10”。
DiskModule实现获取远程主机的磁盘分区信息，参数为分区标签，如/data分区。
（2）命令行模式
CpuModule获取远程主机CPU信息，支持按时间（秒）采样平均值，如下面示例中的参
print
（3）API模式
#func"SN2013-08-022"
（2）命令行模式
（1）功能
4.磁盘信息模块
print client.cpu.usage(10)
client=func.Client("SN2013-08-022")
import func.overlord.client as func
（3）API模式
#func"SN2013-08-022"
（1）功能
3.CPU信息模块
client.local.copyfile.send("/etc/sysctl.conf","/tmp/sysctl.conf")
import func.overlord.client as func
（3）API模式
# func "sN2013-08-022" copyfile -f /etc/sysctl.conf --remotepath /etc/sysctl.conf
import
#func "SN2013-08-022" ca1l disk usage/data
（2）命令行模式
func
client.disk.usage("/dev/sda3")
func.overlord.client as func
"SN2013-08-022"
func.C1ient("sN2013-08-022")
Linux公社 www.linuxidc.com
call disk usage
call cpu usage 10
call cpu usage
第11章统一网络控制器Func详解191
---
## Page 219
192第二部分高级篇
print client.hardware.hal_info()