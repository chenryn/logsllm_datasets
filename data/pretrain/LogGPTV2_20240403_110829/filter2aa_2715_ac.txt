open URL 
adb shell am start -t image/* -a 
android.intent.action.VIEW  
opens gallery 
LOGS 
adb logcat [options] [filter] [filter]  
view device log 
adb bugreport  
print bug reports 
PERMISSIONS 
16 
adb shell permissions groups  
list permission 
groups definitions 
adb shell list permissions -g -r  
list permissions 
details 
A
A 
ANDROID_Resources 
RED/BLUE TEAM 
ANALYSIS 
MOBILE 
AVC UnDroid http://undroid.av-comparatives.info/ 
Submit Android apps for quick online analysis with AVC UnDroid. 
Virustotal - max 128MB https://www.virustotal.com/ 
Submit suspicious Android files/apks to analysis. 
AppCritique - https://appcritique.boozallen.com/  
Upload your Android APKs and receive comprehensive free security 
assessments. 
AMAaaS - https://amaaas.com/  
Free Android Malware Analysis Service. A bare metal service 
features static and dynamic analysis for Android applications. A 
product of MalwarePot. 
APKPure - EXTRACTED APK's 
https://m.apkpure.com/ 
Apks are nothing more than a zip file containing resources and 
assembled java code. If you were to simply unzip an apk, you would 
be left with files such as classes.dex and resources.arsc. 
REFERENCE: 
https://github.com/ashishb/android-security-awesome 
https://github.com/anitaa1990/Android-Cheat-sheet 
https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet 
A
A 
ANSIBLE 
RED/BLUE TEAM 
MANAGEMENT 
DEVOPS 
Ansible is an open-source IT automation engine which can help you 
to automate most of your repetitive tasks in your work life. 
Ansible can also improve the consistency, scalability, reliability 
and easiness of your IT environment. 
VARIABLES 
host_vars 
directory for host variable files 
group_vars 
directory for group variable files 
17 
facts 
collecting the host specific data 
register 
registered variables 
vars 
in playbook 
vars_files 
in playbook 
include_vars 
module 
include_tasks: stuff.yml 
include a sub task file 
TASK CONTROL & LOOPS 
with_items 
then “item” inside action 
with_nested 
for nested loops 
with_file 
with_fileglob 
with_sequence 
with_random_choice 
when 
meet a condition 
MODULES 
copy 
copy file or content 
get_url 
download file 
file 
manage file/directories 
yum 
manage package 
service 
manage services 
firewalld 
firewall service 
lineinfile 
add a line to dest file 
template 
to template file with variables 
debug 
to debug and display 
add_host 
add host to inventory while play 
wait_for 
use for flow control 
apt 
manage apt-packages 
shell 
execute shell commands on targets 
PLAYBOOKS 
ansible-playbook  
Run on all hosts defined 
ansible-playbook  -f 
10 
Fork - Run 10 hosts parallel 
ansible-playbook  --
verbose 
Verbose on successful tasks 
ansible-playbook  -C 
Test run 
ansible-playbook  -C 
-D 
Dry run 
ansible-playbook  -l 
Limit to run on single host 
HANDLERS 
notify 
to notify the handler 
handlers 
define handler 
TAGS 
tags 
add tags to the tasks 
--tags ‘’ 
during playbook execution 
--skip-tags 
for skipping those tags 
tagged 
run any tagged tasks 
untagged 
any untagged items 
18 
all 
all items 
HANDLING ERRORS 
ignore_errors 
proceed or not if any error on 
current task 
force_handlers 
call handler even the play failed 
failed_when 
mark the task as failed if a 
condition met 
changed_when 
set “ok” or “failed” for a task 
block 
logical grouping of tasks (can use 
with when) 
rescue 
to run if block clause fails 
always 
always run even block success or 
fails 
ROLES 
Role Directories 
defaults 
default value of role variables 
files 
static files referenced by role 
tasks 
handlers 
role’s handlers 
meta 
role info like Author, Licence, 
Platform etc 
tasks 
role’s task defenition 
templates 
jinja2 templates 
tests 
test inventory and test.yml 
vars 
role’s variable values 
pre_tasks 
tasks before role 
post_tasks 
tasks after role 
ANSIBLE GALAXY 
ansible-galaxy search 
‘install git’ --platform 
el 
search for a role 
ansible-galaxy info  
display role information 
ansible-galaxy install 
 -p  
install role from galaxy 
ansible-galaxy list 
to list local roles 
ansible-galaxy remove 
remove role 
ansible-galaxy init --
offline  
initiate a role directory 
DELEGATION 
delegate_to: localhost 
run the task on localhost instead 
of inventory item 
delegate_facts 
assign the gathered facts from the 
tasks to the delegated host instead 
of current host 
PARALLELISM 
19 
forks 
number of forks or parallel 
machines 
--forks 
when using ansible-playbook 
serial 
control number parallel machines 
async: 3600 
wait 3600 seconds to complete the 
task 
poll: 10 
check every 10 seconds if task 
completed 
wait_for 
module to wait and check if 
specific condition met 
async_status 
module to check an async task 
status 
ANSIBLE VAULT 
ansible-vault create 
newfile 
create a new vault file 
ansible-vault view newfile 
view file which is already ansible 
vaulted 
ansible-vault edit newfile 
Edit file 
ansible-vault view --
vault-password-
file .secret newfile 
provide vault password as file 
ansible-vault decrypt 
newfile 
remove encryption or vault 
ansible-vault rekey 
newfile 
change vault password 
--ask-vault-pass or 
ask for vault password for ansible-
playbook 
--vault-password-file 
TROUBLESHOOTING 
log_path 
where logs are saved 
debug 
module for debugging 
--syntax-check 
syntax checking for playbooks 
before they run 
--step 
run playbook step by step 
--start-at-task 
run a playbook but start at 
specific task 
--check 
check mode 
--diff 
will show the expected changes if 
you run the playbook, but will not 
do any changes (kind of dry run) 
uri 
module for testing url 
script 
module for running script and 
return success code 
stat 
module to check the status of 
files/dir 
assert 
check file exist 
REFERENCE: 
https://github.com/ginigangadharan/ansible-cheat-sheet 
20 
A
A 
AWS CLI 
RED/BLUE TEAM 
RECON/ADMIN 
CLOUD 
The AWS Command Line Interface is a unified tool to manage your AWS 
services. 
aws [options]   [parameters] 
Command displays help for available top-level commands: 
aws help 
Command displays the available EC2 (Amazon EC2) specific commands: 
aws ec2 help 
Command displays detailed help for EC2 DescribeInstances operation.  
aws ec2 describe-instances help 
Cloudtrail - Logging and Auditing 
List all trails 
aws cloudtrail describe-trails 
List all S3 buckets 
aws s3 ls 
Create a new trail 
aws cloudtrail create-subscription --name awslog --s3-new-bucket 
awslog2020 
List the names of all trails 
aws cloudtrail describe-trails --output text | cut -f 8 
Get the status of a trail 
aws cloudtrail get-trail-status --name awslog 
Delete a trail 
aws cloudtrail delete-trail --name awslog 
Delete the S3 bucket of a trail 
aws s3 rb s3://awslog2020 --force 
Add tags to a trail, up to 10 tags allowed 
21 
aws cloudtrail add-tags --resource-id awslog --tags-list "Key=log-
type,Value=all" 
List the tags of a trail 
aws cloudtrail list-tags --resource-id-list  
Remove a tag from a trail 
aws cloudtrail remove-tags --resource-id awslog --tags-list 
"Key=log-type,Value=all" 
IAM USERS 
**Limits = 5000 users, 100 group, 250 roles, 2 access keys per user 
List all user's info 
aws iam list-users 
List all user's usernames 
aws iam list-users --output text | cut -f 6 
List current user's info 
aws iam get-user 
List current user's access keys 
aws iam list-access-keys 
Create new user 
aws iam create-user --user-name aws-admin2 
Create multiple new users from  file 
allUsers=$(cat ./user-names.txt) 
for userName in $allUsers; do 
    aws iam create-user --user-name $userName 
done 
List all users 
aws iam list-users --no-paginate 
Get a specific user's info 
aws iam get-user --user-name aws-admin2 
Delete one user 
aws iam delete-user --user-name aws-admin2 
Delete all users 
allUsers=$(aws iam list-users --output text | cut -f 6); 
22 
allUsers=$(cat ./user-names.txt) 
for userName in $allUsers; do 
    aws iam delete-user --user-name $userName 
done 
IAM PASSWORD POLICY 
List password policy 
aws iam get-account-password-policy 
Set password policy 
aws iam update-account-password-policy \ 
--minimum-password-length 12 \ 
--require-symbols \ 
--require-numbers \ 
--require-uppercase-characters \ 
--require-lowercase-characters \ 
--allow-users-to-change-password 
Delete password policy 
aws iam delete-account-password-policy 
IAM ACCESS KEYS 
List all access keys 
aws iam list-access-keys 
List access keys of a specific user 
aws iam list-access-keys --user-name aws-admin2 
Create a new access key 
aws iam create-access-key --user-name aws-admin2 --output text | 
tee aws-admin2.txt 
List last access time of an access key 
aws iam get-access-key-last-used --access-key-id 
AKIAINA6AJZY4EXAMPLE 
Deactivate an access key 
aws iam update-access-key --access-key-id AKIAI44QH8DHBEXAMPLE --
status Inactive --user-name aws-admin2 
Delete an access key 
aws iam delete-access-key --access-key-id AKIAI44QH8DHBEXAMPLE --
user-name aws-admin2 
IAM GROUPS, POLICIES, MANAGED POLICIES 
23 
List all groups 
aws iam list-groups 
Create a group 
aws iam create-group --group-name FullAdmins 
Delete a group 
aws iam delete-group --group-name FullAdmins 
List all policies 
aws iam list-policies 
Get a specific policy 
aws iam get-policy --policy-arn  
List all users, groups, and roles, for a given policy 
aws iam list-entities-for-policy --policy-arn  
List policies, for a given group 
aws iam list-attached-group-policies --group-name FullAdmins 
Add a policy to a group 
aws iam attach-group-policy --group-name FullAdmins --policy-arn 
arn:aws:iam::aws:policy/AdministratorAccess 
Add a user to a group 
aws iam add-user-to-group --group-name FullAdmins --user-name aws-
admin2 
List users, for a given group 
aws iam get-group --group-name FullAdmins 
List groups, for a given user 
aws iam list-groups-for-user --user-name aws-admin2 
Remove a user from a group 
aws iam remove-user-from-group --group-name FullAdmins --user-name 
aws-admin2 
Remove a policy from a group 
aws iam detach-group-policy --group-name FullAdmins --policy-arn 
arn:aws:iam::aws:policy/AdministratorAccess 
Delete a group 
aws iam delete-group --group-name FullAdmins 
24 
S3 BUCKETS 
List existing S3 buckets 
aws s3 ls 
Create a public facing bucket 
aws s3api create-bucket --acl "public-read-write" --bucket 
bucket_name 
Verify bucket was created 
aws s3 ls | grep bucket_name 
Check for public facing s3 buckets 
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | 
xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} -
-query 
'"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/A
llUsers` && Permission==`READ`]'"'"' --output text) ]]; then echo 
{} ; fi' 
Check for public facing s3 buckets & update them to be private 
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | 
xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} -
-query 
'"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/A
llUsers` && Permission==`READ`]'"'"' --output text) ]]; then aws 
s3api put-bucket-acl --acl "private" --bucket {} ; fi' 
EC2 KEYPAIRS 
List all keypairs 
aws ec2 describe-key-pairs 
Create a keypair 
aws ec2 create-key-pair --key-name  --output text 
Create a new local private / public keypair, using RSA 4096-bit 
ssh-keygen -t rsa -b 4096 
Import an existing keypair 
aws ec2 import-key-pair --key-name keyname_test --public-key-
material file:///home/user/id_rsa.pub 
Delete a keypair 
aws ec2 delete-key-pair --key-name  
25 
SECURITY GROUPS 
List all security groups 
aws ec2 describe-security-groups 
Create a security group 
aws ec2 create-security-group --vpc-id vpc-1a2b3c4d --group-name 
web-access --description "web access" 
List details about a security group 
aws ec2 describe-security-groups --group-id sg-0000000 
Open port 80, for all users 
aws ec2 authorize-security-group-ingress --group-id sg-0000000 --
protocol tcp --port 80 --cidr 0.0.0.0/24 
Open port 22, just for "my IP" 
aws ec2 authorize-security-group-ingress --group-id sg-0000000 --
protocol tcp --port 80 --cidr /32 
Remove a firewall rule from a group 
aws ec2 revoke-security-group-ingress --group-id sg-0000000 --
protocol tcp --port 80 --cidr 0.0.0.0/24 
Delete a security group 
aws ec2 delete-security-group --group-id sg-00000000 
IMAGES 
List all private AMI's, ImageId and Name tags 
aws ec2 describe-images --filter "Name=is-public,Values=false" --
query 'Images[].[ImageId, Name]' --output text | sort -k2 
Delete an AMI, by ImageId 
aws ec2 deregister-image --image-id ami-00000000 
INSTANCES 
List all instances (running, and not running) 
aws ec2 describe-instances 
List all instances running 
aws ec2 describe-instances --filters Name=instance-state-
name,Values=running 
Create a new instance 
26 
aws ec2 run-instances --image-id ami-f0e7d19a --instance-type 
t2.micro --security-group-ids sg-00000000 --dry-run 
Stop an instance 
aws ec2 terminate-instances --instance-ids  
List status of all instances 
aws ec2 describe-instance-status 
List status of a specific instance 
aws ec2 describe-instance-status --instance-ids  
List all running instance, Name tag and Public IP Address 
aws ec2 describe-instances --filters Name=instance-state-
name,Values=running --query 
'Reservations[].Instances[].[PublicIpAddress, 
Tags[?Key==`Name`].Value | [0] ]' --output text | sort -k2 
INSTANCES TAGS 
List the tags of an instance 
aws ec2 describe-tags 
Add a tag to an instance 
aws ec2 create-tags --resources "ami-1a2b3c4d" --tags 
Key=name,Value=debian 
Delete a tag on an instance 
aws ec2 delete-tags --resources "ami-1a2b3c4d" --tags 
Key=Name,Value= 
CLOUDWATCH LOG GROUPS 
Create a group 
aws logs create-log-group --log-group-name "DefaultGroup" 
List all log groups 
aws logs describe-log-groups 
aws logs describe-log-groups --log-group-name-prefix "Default" 
Delete a group 
aws logs delete-log-group --log-group-name "DefaultGroup" 
CLOUDWATCH LOG STREAMS 
27 
Create a log stream 
aws logs create-log-stream --log-group-name "DefaultGroup" --log-
stream-name "syslog" 
List details on a log stream 
aws logs describe-log-streams --log-group-name "syslog" 
aws logs describe-log-streams --log-stream-name-prefix "syslog" 
Delete a log stream 
aws logs delete-log-stream --log-group-name "DefaultGroup" --log-
stream-name "Default Stream" 
LAMBDA 
Get Lambda function config 
aws lambda get-function-configuration --function-name 
 --profile  
SNS 
Get Simple Notification Service configurations 
aws sns list-topics --profile  
aws sns get-topic-attributes --topic-arn "arn:aws:sns:us-east-
1:945109781822:" --profile  
aws sns list-subscriptions --profile  
aws sns get-subscription-attributes --subscription-arn 
"arn:aws:sns:us-east-1:945109781822::6d92f5d3-f299-
485d-b6fb-1aca6d9a497c" --profile  
RDS 
Get database instances 
aws rds describe-db-security-groups --db-security-group-name 
 --profile  
aws rds describe-db-instances --db-instance-identifier 
 --profile  
REFERENCE: 
https://github.com/aws/aws-cli 
https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html 
https://gist.github.com/apolloclark/b3f60c1f68aa972d324b 
A
A 
AWS_Defend 
28 
BLUE TEAM 
FORENSICS 
CLOUD 
CLOUDTRAIL MONITORING 
Successful Logins 
Example search below returns successful authentications without 
multi-factor authentication. It can help detect suspicious logins 
or accounts on which MFA is not enforced. 
sourcetype="aws:cloudtrail" eventName="ConsoleLogin" 
"responseElements.ConsoleLogin"=Success 
"additionalEventData.MFAUsed"=No 
Failed Logins by Source 
Example search returns a table of failed authentication, including 
the source IP, country, city and the reason why the authentication 
failed. 
sourcetype="aws:cloudtrail" eventName="ConsoleLogin" 
"responseElements.ConsoleLogin"=Failure 
| iplocation sourceIPAddress 
| stats count by userName, userIdentity.accountId, eventSource, 
sourceIPAddress, Country, City, errorMessage 
| sort - count 
CryptoMining GPU Instance Abuse 
Example of Splunk search to identify GPU instances that have been 
started. 
sourcetype="aws:cloudtrail" eventSource="ec2.amazonaws.com" 
eventName="RunInstances" 
| spath output=instanceType path=requestParameters.instanceType 
| spath output=minCount 
path=requestParameters.instancesSet{}.items{}.minCount 
| search instanceType IN ("p3.2xlarge", "p3.8xlarge", 
"p3.16xlarge", "p3dn.24xlarge", "p2.xlarge", "p2.8xlarge", 
"p2.16xlarge", "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", 
"g3.16xlarge") 
| stats count by eventSource, eventName, awsRegion, userName, 
userIdentity.accountId, sourceIPAddress, userIdentity.type, 
requestParameters.instanceType, 
responseElements.instancesSet.items{}.instanceId, 
responseElements.instancesSet.items{}.networkInterfaceSet.items{}.p
rivateIpAddress, minCount 
| fields - count 
Security Group Configurations 
Example search below looks for rules allowing inbound traffic on 
port 22 from any IPs. Then we look for the associated instance IDs 
and append them to the list. 
29 
sourcetype="aws:cloudtrail" eventSource="ec2.amazonaws.com" 
eventName="AuthorizeSecurityGroupIngress" 
| spath output=fromPort 
path=requestParameters.ipPermissions.items{}.fromPort 
| spath output=toPort 
path=requestParameters.ipPermissions.items{}.toPort 
| spath output=cidrIp 
path=requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrI
p 
| spath output=groupId path=requestParameters.groupId 
| spath output=accountId path=userIdentity.accountId 
| spath output=type path=userIdentity.type 
| search fromPort=22 toPort=22 AND cidrIp="0.0.0.0/0" 
| spath output=ipPermissions 
path=requestParameters.ipPermissions.items{} 
| mvexpand ipPermissions 
| fields - fromPort, toPort, cidrIp 
| spath input=ipPermissions 
| spath output=cidrIp path=ipRanges.items{}.cidrIp 