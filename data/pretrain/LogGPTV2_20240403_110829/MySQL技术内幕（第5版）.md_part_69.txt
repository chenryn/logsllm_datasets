第7章用C语言编写MySQL程序
keep_going=1;
status;
"Couldnot enablemultiple-statement execution");
"mysql_real_connect() failed");
/*有语句执行失败*/
用
---
## Page 293
据值。
制的客户端/服务器协议。二进制协议支持服务器端预处理语句，并且可以按本地格式来传输数
那些函数编写的，它们都是以字符串的形式来发送和检索所有信息。本节将讨论如何使用二进
7.8
到达了末尾，还是发生了错误。也就是说，你无法判断是否应该显示一条出错消息。
出循环。这个更为简单的策略有一个不足之处：当没有检索到更多结果时，你无法知道是正常
在本章的前面几节中，用于处理 SQL语句的代码都是基于 MySQL客户端开发库所提供的
如果愿意，你也可以只测试 mysql_next_result（)的返回值是否为0。如果不为0，则退
使用服务器端预处理语句
）while（keep_going);
o
/*语句执行成功；进入结果检索循环*/
if(status !=0)
status =mysql_next_result （conn);
/*确定当前语句是否有数据返回*/
return;
print_error
keep_going = 0;
else/*有错误发生*/
se
mysql_free_result
print_error (conn,
确定是否还有更多的结果存在*/
/*处理各个行，然后释放结果集*/
(res_set)
keep_going=0;
print_error (conn,
printf（"Number of rows affected:%lu\n",
￥
(mysql_field_count
还是因为出现了错误呢？
当没有结果集时，
语句不生成结果集（它不是SELECT、SHOW、DESCRIBE等）；
(unsigned long) mysql_affected_rows (conn));
(conn,
是因为不返回，
/*无结果集返回*/
"Could not execute statement(s)");
/*出错*/
1*无结果集，或者出错*/
(res_set);
(conn)
返回了一个结果集
"Could not execute statement");
"Could not retrieve result set");
（conn）==0）
res_set);
7.8使用服务器端预处理语句
273
---
## Page 294
于该结果集的元数据。为获得这些行，需要再次使用 MYSQL_BIND 结构，但是，它们这次是用
用mysql_stmt_affected_rows（）函数来确定该语句影响的行数。
绑定在一起。
是
届
指针，后续步骤会用到这个处理器。
也只需发送数据值即可。对于重复执行的语句，这种做法可以大大改善性能。
数据值绑定到这些占位符上。而当执行它时，这些数据便会让语句变得完整。预处理语句的这
所提供的数据值会出现在该处。
处理
制所支持的语句种类还在不断增加。更多关于最新语句列表的信息请参考MySQL参考手册。
DELETE、DO、INSERT、REPLACE、SELECT、SET、UPDATE 和绝大多数的 SHOW 变体。预处理
274
（6）如果该语句会生成结果集，那么可以调用mysql_stmt_result_metadata（)来获得关
（3）如果该语句包含占位符，那么在执行它之前，必须为每个占位符提供相应的数据。具
人反复多次地执行同一条语句。这意味着，
“参数传递”机制使它们可以重复使用：只
器进行预处理。
相关联。服务器会分析该语句的特征，如语句类型，它包含多少个参数标记，
(2）调用 mysql_stmt_prepare（），把语句发送到服务器，让其接受预处理，
为使用二进制协议，必须创建一个语句处理器。有了这个处理器，便可以把语句发送到服
(5）如果该语句只会修改数据，而不会生成结果集（如 INSERT或UPDATE 语句)，那么调
会生成一个结果集，
（1）调用mysql_stmt_init（），分配一个语句处理器。这个函数会返回一个指向处理器的
使用预处理语句的基本流科
与最初的非二进制协议相比，二进制协议有以下几个缺点。
口服务器只需对语句分析一次，而不用每次执行时都分析一次。
这条语句包含有3个“？”字符，它们的作用是充当参数标记或占位符。将来，你可以提供
INSERT INTO score （event_id,student_id,score) VALUES(?,?,？)
用于预处理的语句可以被参
器里的）发
并非所有语句都能被预处理。
（4）
口
口
口
口
口
口
对于交互式程序，最好还是使用原来的非二进制协议。在交互式程序里，从用户那里
二进制协议并不支持所有的语句。例如，USE语句便不能被预处理。
难以使用，因为在传输和接收数据值时需要更多的准备工作。
返回的，无需转换成字符串形式。
不必对检索结果进行转换。在预处理语句的结果集里，非字符串值都是以二进制格式
文本里即可。在有了预处理语句接口之后，便可以用二进制格式来发送这些数据值。
INSERT 语句里的3个列全部都是INT 列。
数据值在发送时无需转换成字符串形式，这
能降低网络开销，因为每次执行时只需发送数据值，而不是整条语句。
调用 mysql_stmt_execute(）函数，执行该语句。
那些需要反复执行的语句，
第7章
接收到的语句都只会执行一次。因此，使用预处理语句，并没有什么优势，它只能为
发送回
用C语言编写MySQL程序
，服务器会分析语句、记住它，并把有关它的信息（客户端开发库存储在语句
回去。对这条
等等。
程，包括以下几个步骤。
参数化，
条语句的进一步处理会用到这个处理器。
例如，
预处理语句API 适用于这样几种语句：CREATETABLE、
带来最大限度的性能提升。
即包含问号（?)，以此来表示，
可以像下面这样预处理语句：
语句文本只需发送
只要把各有关“参数”替换成某些不同的值，便可
。每当使用mysql_query（)或mysql_real_
这样可以降低执行开销。例如，上面那条
送一次，并且每次执行该语句时，
当你将来执行该语句时
，在执行时它
，并与语句处
机
---
## Page 295
有展示用于建立连接的代码，因为它与前几个示例程序里的代码相似。
文件：prepared.c 和 process_prepared_statement.c，它们是这个程序的源文件。这里没
的是：如何检索预处理语句所产生的结果集。在 sampdb 发行版的 capi 目录下，可以找到两个
理语句时，把数据值传递给与它绑定在一起的那个服务器。处理SELECT语
里，处理INSERT语句的那个部分演示的是：如何在语句里使用占位符，以及如何在执行预处
行它们。
连接关闭时，服务器仍然把预处理语句与该连接关联在一起，那么服务器会自动释放它们。
回零。
可以通过调用mysql_stmt_num_rows（），确定结果集里的行数。如果结果集为空，则该函数返
调用了，则可以从服务器里一次性取回全部结果集的行，并缓存在客户端的内存里。另外，也
行的各个列值。
复调用mysql_stmt_fetch（），依次取回每一个行。在取回每一个行之后，你便可以访问当前
个MYSQL_BIND结构。它们包含与每一个行的数据值有关的信息，这些值都是你期望从服务器
于接收从服务器返回的数据，而不是向服务器发送数据。你必须为结果集里的每一个列创建一
建立此程序的目的是使用预处理语句，其主要部分如下所示：
接下来，我们将编写一个简单的程序，把多个行插入表中，然后再检索它们。在这个程序
在同一个客户端应用程序里，可以先准备多条语句，然后按照应用程序要求的顺序逐个执
在调用 mysql_stmt_fetch()之前，可以选择调用mysql_stmt_store_result()。如果
MYSQL_STMT *stmt;
process_prepared_statements (MYSQL *conn)
void
(9）在使用完语句处理器之后，请别忘了调用mysql_stmt_close（）来释放它。如果客户
（8）如果想使用这个处理器来预处理另一条语句，则可以返回到第2步。
在取回结果集之后，请记得调用mysql_stmt_free_result（），释放与之相关的内存。
char
char
char
（7）如果想再次执行刚才那条语句，可以返回到第3步，同时指定新的参数值。
insert_rows (stmt);
/*插入并检索记录*/
stmt = mysql_stmt_init (conn);
if (mysql_query （conn,
/*打开数据库，并创建测试表*/
"CREATE TABLE t(i INT, f FLOAT, C CHAR(24)， dt DATETIME)";
return;
print_error (conn, "Could not initialize statement handler");
return;
print_error (conn,
一
mysql_query
*drop_stmt
*use_stmt ="USE sampdb";
(conn,
(conn
"Could not set up test table");
use_stmt)!=0
create_stmt)!=0)
drop_stmt)
1*分配语句处理器*/
0
7.8使用服务器端预处理语句
语句的那个部分演示
275
---
## Page 296
之处在于，它会调用特定于预处理语句的出错报告函数：
print_stmt_error()的函数，它与前几个示例程序所用到的 print_error(）函数相似；不
select_rows（）函数里，很快便会讲到它们。
着，插入和检索了多个行；最后释放了处理器。所有的实际工作都发生在insert_rows（)和
FLOAT、CHAR和 DATETIME。随后你将看到，这几种不同的数据类型会被区别对待。
276
在创建测试表之后，先调用了mysql_stmt_init（），用于分配一个预处理语句处理器；接
struct tm
char
MYSQL_BIND
char
insert_rows
static void
insert_rows（）函数会负责把新行添加到测试表里：
int
print_stmt_error (MYsQL_STMT *stmt, char *message)
static void
首先，我们打开了一个数据库，并创建了一个测试表。这个表包含4个不同类型的列：INT、
param[O].buffer_type = MYSQL_TYPE_LONG;
/*设置INT参数*/
memset ((void *) param, 0, sizeof (param));
if (mysql_stmt_prepare (stmt, stmt_str, strlen (stmt_str)) != 0)
printf ("Inserting records...\n");
ime_t
nsignedlongm
YSQL_TIME
oat
fprintf (stderr,
mysql_stmt_close (stmt);
select_rows (stmt);
*每一行都不会发生变化的参数
将参数结构置0，然后初始化所有常量以及在
print_stmt_error (stmt, "Could not prepare INSERT statement");
return;
fprintf (stderr,
第7章用C语言编写MySQL程序
(MYSQL_STMT *Stmt)
mysql_stmt_error(stmt));
5
*cur_time;
my_str_length;
my_datetime;
my_str[26];
param[4];
"%s\n",message);
"Error%u（%s）:%s\n"
/*ctime（）会返回长度为26字符串*/
/*释放语句处理器*/
同
为
---
## Page 297
for（i=1;i<=5;i++)
param[3].buffer