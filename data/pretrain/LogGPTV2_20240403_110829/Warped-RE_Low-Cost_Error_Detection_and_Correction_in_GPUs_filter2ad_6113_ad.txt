In this phase, the active mask for each sub-warp is generated, and thread replications are performed on idle SIMT (Single Instruction, Multiple Thread) lanes based on the inherent redundancy and warp deformation information generated in the previous stage. Figure 10 illustrates how this phase integrates into the GPU pipeline, positioned between the issue queue and the SP (Streaming Processor) unit pipeline.

For every warp instruction, this phase iterates according to the number of sub-warps required for the current operational mode. In each cycle, a new sub-warp active mask is generated using the deformation datapath unit, which corresponds to the current operational mode. The sub-warp active mask then controls thread replication, leveraging idle lanes to enforce redundancy.

### Sub-Warps' Active Masks and Thread Replication

**Figure 12: Thread Replication Hardware Support**

- **Cluster Issuance:** The cluster is issued as part of the first sub-warp, rendering it completely idle during the second sub-warp (i.e., S2 AM[y+1: y] = 00). This is achieved by XOR-ing the original active mask and the issued active mask for the first sub-warp to deactivate all threads issued as part of the first sub-warp.
- **Warp Deformation:** When warp deformation is required and there are two non-redundant threads assigned to the cluster, the active mask of the first sub-warp is chosen as "01" through the priority encoder and the 4:1 MUX in Figure 11. Similarly, in the second iteration, the active mask of the second sub-warp is chosen as "10".
- **Redundant Threads:** If warp deformation is required and two inherently redundant threads are assigned to the cluster, both threads are assigned to the first sub-warp, achieved through the upper input of the second rightmost 2:1 MUX in Figure 11. The XOR-ing deactivates all threads issued with the first sub-warp, resulting in the active mask of the second sub-warp being "00".

### TMR Deformation Datapath Unit

The design of the TMR (Triple Modular Redundancy) deformation datapath unit is similar to the DMR (Dual Modular Redundancy) deformation datapath unit, with the exception that the number of sub-warps during TMR mode can be zero, two, three, or four. For brevity, the exact details are omitted.

### Replicating Active Threads

To leverage idle lanes for forced redundancy, we need to forward the source operands of each SIMT lane to other lanes in the same cluster. This is achieved by adding forwarding multiplexers, adapted and modified from [4] [6], where the cluster size is fixed to four lanes. In the Warped-RE framework, the cluster size is two lanes during DMR mode and dynamically changes to three lanes when an error is detected and TMR mode is activated.

**Figure 12: Multiplexers for SIMT Lanes**

- **L0:** Requires a 3:1 MUX to receive source operands from L1 during DMR mode and from L1 and L2 during TMR mode.
- **L1:** Requires a 3:1 MUX to receive source operands from L0 and L2.
- **L2:** Requires a 4:1 MUX to receive source operands from L3 during DMR mode and from L0 and L1 during TMR mode.
- **L3, L4, L5:** Require 4:1 MUX, 3:1 MUX, and 3:1 MUX, respectively.
- **L11-L6 and L15-L12:** Have specific multiplexing requirements, with L14, L13, and L12 needing 4:1 MUXes and L15 needing a 2:1 MUX.

### Detailed Design for DMR Cluster

**Figure 11: DMR Cluster Deformation Datapath**

- **Active Mask Generation:** For each SP unit in the Fermi architecture, eight DMR deformation datapath units generate the active masks for the eight DMR clusters. These active masks are concatenated to form the active mask of the whole sub-warp.
- **Table II: DMR Cluster Sub-Warps Active Masks**
  - **No Deformation (WDDMR = 0):** The original issued active mask is selected for the first sub-warp.
  - **Warp Deformation (WDDMR = 1):** The active thread originally assigned to the cluster is ensured by the priority encoder, and the active mask is generated accordingly.

### Error Detection and Correction Stage

After each sub-warp completes its redundant execution, the outputs of the SIMT lanes are compared to detect and correct errors. During DMR mode, only error detection is possible, using an XOR-based comparator. During TMR mode, error detection and correction are performed, with the outputs of every three SIMT lanes fed to TMR voter and comparator logic.

### Experimental Evaluation

**GPGPU-Sim v3.02 [9]:** The baseline GPU architecture is configured using the Nvidia GTX480 (Fermi) configuration file, and the Warped-RE framework is implemented on top of the baseline architecture. The evaluation uses 22 benchmarks from GPGPU-Sim [9], Parboil [10], and Rodinia [11] to cover a wide range of application domains.

- **DMR Mode Evaluation:**
  - **Error-Free Scenario:** The GPU continuously runs in DMR mode to guarantee 100% error detection, showing a weighted average performance overhead of 8.4% across all benchmarks.
  - **Performance Overhead Reduction:** This overhead is significantly lower than the expected overhead of dual redundant execution, attributed to low-cost opportunistic DMR execution, empty bubbles in the SP unit pipeline, and reduced memory subsystem contention.

This comprehensive approach ensures efficient and reliable error detection and correction in the GPU pipeline.