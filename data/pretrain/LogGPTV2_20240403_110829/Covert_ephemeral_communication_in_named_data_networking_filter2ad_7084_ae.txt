9. RELATED WORK
We divide relevant related work in two classes: covert com-
munication and ephemeral communication.
Covert Communication. The goal of a covert channel is
to conceal the very existence of a covert message by com-
municating it through legitimate channels [17].
In [26], Shah et al. present Jitterbug, a hardware device
and a communication protocol that covertly transmit con-
tent by perturbing the timing of keyboard events. In par-
ticular, the authors design and implement a small hardware
pass-through device that introduces small – although, mea-
surable – variations in the times at which keyboard events
are delivered to the host. When the user runs an interac-
tive communication protocol (e.g., SSH, instant messaging),
a receiver monitoring the host’s network traﬃc can recover
the leaked content. According to the experimental results re-
ported in [26], the bandwidth oﬀered by Jitterbug is roughly
500 bps over 14 network hops, with 8.9% error rate. In con-
trast, our technique provide a bit rate of about 15,000 bps
in a similar scenario with analogous error rate. Another dif-
ference is that with Jitterbug the receiver must be able to
intercept network traﬃc, while our approach can be used by
any unprivileged user.
CoCo, introduced in [17] by Houmansadr et al., is a frame-
work for establishing covert channels via inter-packet delays.
The sender generates a traﬃc ﬂow directed to the receiver,
then manipulates the ﬂow according to the covert message
and a key, shared between the two parties. The coding al-
gorithm used in CoCo ensures robustness of the covert mes-
sage to perturbations. The authors show statistical evidence
on the undetectability of the communication channel. We
emphasize that CoCo would not satisfy our requirements
because sender and receiver must communicate directly.
Murdoch et al. [20] investigate covert channel implemented
by embedding information in random-looking TCP ﬁelds.
They show that na¨ıve approaches – such as embedding ci-
phertext in the initial sequence number (ISN) ﬁeld – can be
easily detected. Then, they discuss how to implement net-
working stack-speciﬁc covert channel, which are provably
undetectable. Similarly to CoCo, the main diﬀerence be-
tween our work and the work of Murdoch et al. is that sender
and receiver must exchange packets directly.
Ephemeral Communication. Geambasu et al. introduced
the Vanish system [15], which allows users to publish ephem-
eral messages. Users encrypt their messages using a random
symmetric key. Then, they publish shares of the key (com-
puted using Shamir secret sharing [25]) in random indices
in a large, pre-existing distributed hash table (DHT). A
DHT is a distributed data structure that holds key-value
pairs. Since data on DHTs is automatically deleted over
time, shares of the key automatically “disappear”. Once
enough shares have been deleted, the key – and therefore
the encrypted message – is eﬀectively erased.
Wolchok et al. [30] showed that Vanish can be defeated us-
ing low-cost Sybil attacks on the DHT. In particular, they
exploited one of the design ﬂaws of Vanish, namely the as-
sumption that DHTs are resistant to crawling. This is in
contrast with our approach, where monitoring all routers’
caches is clearly infeasible. Although the authors of Vanish
have since proposed countermeasures [14], these techniques
only slightly raise the bar against existing attacks [5].
Castelluccia et al. [5] introduced EphPub, a DNS-based
ephemeral communication technique. A publishers encrypts
and distributes a message. Then, it distributes the decryp-
tion key as follows: for each key bit set to 1, the publisher
picks a DNS resolver and uses it to answer a recursive DNS
queries for a speciﬁc domain. Since DNS resolvers cache re-
sponses for a pre-determined amount of time, one or more
receivers can subsequently issue non-recursive queries to the
same resolver. These queries will be answered only if the cor-
responding domain-IP pair is in cache. Once enough cache
entries expire (or get overwritten), the decryption key – and
therefore the published message – disappears.
There are several diﬀerences between EphPub and our
techniques. First, while EphPub relies on an application-
layer service (DNS resolver) to publish an ephemeral piece
of data, our techniques leverage routers’ PITs and caches,
which are part of the routing architecture. Moreover, while
EphPub can be blocked by forcing users to use a local DNS
server with no cache (e.g., by ﬁltering out DNS queries at
the network gateway), our PIT-based technique allows two
parties to exchange CEMs even if routers do not provide con-
tent caching. Moreover, if EphPub sees wide adoption, there
are several concerns (raised also by Castelluccia et al. in [5])
that would impose excessive load on DNS servers, which
would then be forced to stop acting as “open” resolvers. In
contrast, with our approach, communicating parties do not
impose higher-than-usual load on routers: consumers simply
use their allocated bandwidth for content retrieval. Further-
more, routers cannot determine the source of data requests
(interests do not carry a source address), and therefore al-
ways operate similarly to open resolvers. Finally, EphPub
does not provides covert communication, since the behav-
ior of two users who communicate via EphPub is diﬃcult to
conceal. In fact, “regular” users rarely query multiple remote
DNS servers in short bursts. With our techniques, instead,
Snd and Rcv do not perform any easily identiﬁable activity.
Perlman [23] proposed Ephemerizer, a centralized approach
to secure data deletion. The goal of Ephemerizer is to ﬁnd a
 0 5 10 15 20 25 30 35 40 1000 10000error (%)bitrate (bps)cache-hit-basedPIT-hit-basedcommon-prefix-based; TDP 0 5 10 15 20 25 30 35 40 1000 10000error (%)bitrate (bps)cache-hit-basedPIT-hit-basedcommon-prefix-based; TDP 0 5 10 15 20 25 30 35 40 1000 10000error (%)bitrate (bps)cache-hit-basedPIT-hit-basedcommon-prefix-basedTDP 0 5 10 15 20 25 30 35 40 1000 10000error (%)bitrate (bps)cache-hit-basedPIT-hit-basedcommon-prefix-based TDP 24balance between data availability and the ability to prop-
erly delete data. Users encrypt their data using a sym-
metric encryption scheme. Then they delegate key storage
to a trusted third party. This third party destroys cryp-
tographic keys when they “expire”, eﬀectively making the
original data unaccessible. Compared to [15], [5], as well
as to our approach, Ephemerizer requires an always on-line,
trusted third party.
10. CONCLUSIONS
In this paper, we have presented the ﬁrst evaluation of
covert ephemeral communication in NDN. Our techniques
do not require Snd and Rcv to exchange any packet directly.
Rather, they rely on user-driven state on routers to publish
and retrieve covert messages. Messages published with our
approach are ephemeral, i.e., they are automatically deleted
from the network after a certain amount of time, without
requiring any action from Snd or Rcv. Also, our delay-
based techniques, messages expire immediately after being
retrieved.
Our techniques are based on fundamental components on
NDN, and do not require “abuse” of application-layer pro-
In practice Snd and Rcv only need access to non-
tocols.
popular content.
We performed experiments on a prototype implementa-
tion of our protocols.
In particular, we measured the the
bandwidth and robustness of our approaches on a local (LAN)
setup and in a geographically distributed environment – the
oﬃcial NDN testbed. Our experiments conﬁrm that the
techniques proposed in this paper provide high bandwidth
and low error rate.
11. ACKNOWLEDGEMENTS
We would like to thank Christos Papadopoulos, Steve
DiBenedetto, Jeﬀ Burke and Alex Horn for providing access
to the NDN routers hosted at their respective institutions.
12. REFERENCES
[1] G. Acs, M. Conti, P. Gasti, C. Ghali, and G. Tsudik.
Cache privacy in named-data networking. In the 33rd
International Conference on Distributed Computing
Systems (ICDCS), pages 41–51, 2013.
[2] A. Afanasyev, P. Mahadevan, I. Moiseenko, E. Uzun,
and L. Zhang. Interest ﬂooding attack and
countermeasures in Named Data Networking. In IFIP
Networking, pages 1–9, 2013.
[3] Akamai. http://www.akamai.com.
[4] S. Cabuk, C. E. Brodley, and C. Shields. Ip covert
timing channels: Design and detection. In the 11th
ACM Conference on Computer and Communications
Security (CCS), pages 178–187, 2004.
[5] C. Castelluccia, E. D. Cristofaro, A. Francillon, and
M. A. Kˆaafar. Ephpub: Toward robust ephemeral
publishing. In the IEEE International Conference on
Network Protocols (ICNP), pages 165–175, 2011.
[6] Content centric networking (CCNx) project.
http://www.ccnx.org.
[7] CCNx Interest Message.
http://www.ccnx.org/releases/latest/doc/
technical/InterestMessage.html.
[8] CCNx Node Model. http://www.ccnx.org/releases/
latest/doc/technical/CCNxProtocol.html.
[9] A. Compagno, M. Conti, P. Gasti, and G. Tsudik.
Poseidon: Mitigating interest ﬂooding DDoS attacks
in Named Data Networking. In the IEEE Conference
on Local Computer Networks (LCN), 2013.
[10] M. Conti, P. Gasti, and M. Teoli. A lightweight
mechanism for detection of cache pollution attacks in
Named Data Networking. Computer Networks: The
International Journal of Computer and
Telecommunications Networking, 57(16):3178–3191,
Nov. 2013.
[11] S. DiBenedetto, P. Gasti, G. Tsudik, and E. Uzun.
Andana: Anonymous named data networking
application. In the Network and Distributed System
Security Symposium (NDSS), 2012.
[12] Facebook. http://www.facebook.com.
[13] P. Gasti, G. Tsudik, E. Uzun, and L. Zhang. DoS &
DDoS in named-data networking. In the International
Conference on Computer Communications and
Networks (ICCCN), pages 1–7, 2013.
[14] R. Geambasu, J. Falkner, P. Gardner, T. Kohno, and
K. Krishnamurthy. Experiences building security
applications on DHTs. Technical report,
UW-CSE-09-09-01, University of Washington, 2009.
[15] R. Geambasu, T. Kohno, A. A. Levy, and H. M. Levy.
Vanish: Increasing data privacy with self-destructing
data. In USENIX Security Symposium, pages 299–316,
2009.
[16] Google global cache.
https://peering.google.com/about/ggc.html.
[17] A. Houmansadr and N. Borisov. CoCo: Coding-Based
Covert Timing Channels for Network Flows. In the
13th Information Hiding Conference (IH), pages
314–328, 2011.
[18] Apple itunes. http://itunes.apple.com.
[19] W. Mazurczyk, K. Szczypiorski, and J. Lubacz. Four
ways to smuggle messages through internet services.
Spectrum, IEEE, 50(11):42–45, 2013.
[20] S. J. Murdoch and S. Lewis. Embedding covert
channels into tcp/ip. In Information Hiding: 7th
International Workshop, pages 247–261, 2005.
[21] Named Data Networking project (NDN).
http://named-data.org.
[22] NDN Testbed.
http://www.named-data.net/testbed.html.
[23] R. Perlman and R. Perlman. The ephemerizer:
Making data disappear. Journal of Information
System Security, 1:51–68, 2005.
[24] I. S. Reed and G. Solomon. Polynomial codes over
certain ﬁnite ﬁelds. Journal of the Society for
Industrial and Applied Mathematics, 8:300–304, 1960.
[25] R. L. Rivest, A. Shamir, and Y. Tauman. How to
share a secret. Communications of the ACM,
22(22):612–613, 1979.
[26] G. Shah, A. Molina, and M. Blaze. Keyboards and
covert channels. In USENIX Security Symposium,
pages 59–75, 2006.
[27] Gps clock synchronization. http://www.
spectracomcorp.com/Solutions/Applications/
GPSClockSynchronization/tabid/100/Default.aspx.
25[28] Google serves 25 percent of North American Internet
traﬃc. http://www.wired.com/wiredenterprise/
2013/07/google-internet-traffic/.
and E. Witchel. Defeating vanish with low-cost sybil
attacks against large DHTs. In the Network and
Distributed System Security Symposium (NDSS), 2010.
[29] M. W¨ahlisch, T. C. Schmidt, and M. Vahlenkamp.
[31] M. Xie, I. Widjaja, and H. Wang. Enhancing cache
Backscatter from the data plane - threats to stability
and security in information-centric networking.
Computer Networks:The International Journal of
Computer and Telecommunications Networking,
57(16):3192–3206, Nov. 2013.
[30] S. Wolchok, O. S. Hofmann, N. Heninger, E. W.
Felten, J. A. Halderman, C. J. Rossbach, B. Waters,
robustness for content-centric networks. In the IEEE
International Conference on Computer
Communications (INFOCOM), pages 2426–2434,
2012.
[32] Youtube. http://www.youtube.com.
26