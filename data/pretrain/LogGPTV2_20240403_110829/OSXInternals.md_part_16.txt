With each major release of Mac OS X, Apple has improved the system's command-line support by exposing
more aspects of the system to be driven from the command line. In some cases, Apple has made command-
line tools behave correctly and consistently. For example, in Mac OS X versions prior to 10.4, Unix-derived
commands such as cp, mv, tar, and rsync did not handle certain aspects of Apple's HFS Plus file system
correctly.[74] As still newer file system features such as metadata-based searching and access control lists
(ACLs) were added in Mac OS X 10.4, the aforementioned commands were updated to behave consistently.
[74] These commands were not aware of HFS Plus resource forks until Mac OS X 10.4. We will
look at details of HFS Plus in Chapter 12.
Let us consider a few other examples of using the command line in Mac OS X.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 61 of 80
The drutil command can be used to interact with the Disc Recording framework
(DiscRecording.framework), which manages CD and DVD burners. Figure 230 shows an example of its
use.
Figure 230. Command-line interaction with the Disc Recording framework
$ drutil list
Vendor Product Rev Bus SupportLevel
1 HL-DT-ST DVD-RW GWA-4082B C03D ATAPI Apple Shipping
$ drutil getconfig current
...
GetConfiguration returned 128 bytes.
00> 00 00 00 80 00 00 00 00 00 00 03 28 00 11 00 00
10> 00 14 00 00 00 13 00 00 00 1A 00 00 00 1B 00 00
20> 00 10 00 00 00 09 00 00 00 0A 00 00 00 08 00 00
...
001Ah DVD+RW DVD ReWritable
001Bh DVD+R DVD Recordable
0010h DVD-ROM Read only DVD
...
The hdiutil command interacts with the Disk Images framework (DiskImages.framework), which is used
for accessing and manipulating disk images. Figure 231 shows an example of its use.
Figure 231. Command-line interaction with the Disk Images framework
$ hdiutil plugins # Print information about plug-ins
...
 {
"plugin-key" = "CEncryptedEncoding"
"plugin-name" = "AES-128 (recommended)"
"plugin-class" = "CFileEncoding"
"plugin-type" = "builtin"
"plugin-encryption" = Yes
}
...
$ hdiutil burn foo.dmg # Burn image to an attached burning device
...
The say command uses the Speech Synthesis Manager to convert input text to audible speech. The resultant
speech data may be either played back or saved to an AIFF file.
The sips[75] command provides basic image-processing functionality from the command line. It supports
several image formats. Its goal is to allow quick and convenient desktop automation of common queries and
operations on images. Figure 232 shows an example of using sips.
[75] sips stands for Scriptable Image Processing System.
Figure 232. Using the sips command to resample an image and convert its format
$ sips -g image.gif
/private/tmp/image.gif
pixelWidth: 1024
pixelHeight: 768
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 62 of 80
typeIdentifier: com.compuserve.gif
format: gif
formatOptions: default
dpiWidth: 72.000
dpiHeight: 72.000
samplesPerPixel: 4
bitsPerSample: 8
hasAlpha: yes
space: RGB
profile: Generic RGB Profile
$ sips --resampleHeightWidth 640 480 -s format jpeg\
--out image.jpg /private/tmp/image.gif
/private/tmp/image.jpg
The Spotlight metadata search functionality is accessible from the command line. The mdls command lists
the names and values of all metadata attributes associated with the specified files. The mdfind command can
be used to find files matching a given query, optionally limiting the search to a specified directory.
Moreover, mdfind can operate in "live" mode: It will continue to run until interrupted, while updating the
number of matches. Figure 233 shows an example of using mdfind.
Figure 233. Using the mdfind command to find files matching a given query
$ mdfind -live "kMDItemFSName == 'foo.txt'"
[type ctrl-C to exit]
Query update: 1 matches # foo.txt created
Query update: 0 matches # foo.txt deleted
...
^C
$ mdfind "kMDItemContentType == 'com.adobe.pdf'"
/Developer/About Xcode Tools.pdf
...
2.13.4. Tools
In addition to the development tools that are accessible through Xcode, Mac OS X provides a wide range of
tools for analyzing, debugging, monitoring, profiling, and understanding both hardware and software.
Apple's general philosophy is to encourage programmers to use the highest possible level of abstraction as
far as possible and to let the platform handle low-level details. This way, programmers can avoid using
interfaces or system aspects that are likely to change during the evolution of Mac OS X. This
approachparticularly when followed for end-user softwareis conducive to overall stability and a consistent
user experience.
2.13.4.1. Debugging and Analysis Tools
The following are examples of debugging and analysis tools available on Mac OS X.
 fs_usage reports system calls and page faults related to file system activity.
 heap lists all malloc()-allocated buffers in a process's heap.
 install_name_tool changes the dynamic shared library names installed in a Mach-O file.
 ktrace enables kernel process tracing. kdump is used to view the resultant trace dump.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 63 of 80
 leaks searches a process's memory for unreferenced malloc() buffers.
 lipo can create a multiple-architecture fat executable from one or more input files, list the
architectures in a fat file, extract a single architecture file from a fat file, or create a fat file from an
existing one, with the new file containing a subset of the architectures contained in the original.
 lsof lists information about open files, where a file could be a regular file, a directory, a device file, a
socket, and so on.
 MallocDebug.app tracks and analyzes allocated memory.
 malloc_history shows a process's malloc()-based allocations.
 MergePef merges two or more PEF files into a single file.
 ObjectAlloc.app TRacks Objective-C and Core Foundation object allocations and deallocations.
 OpenGL Profiler.app is used for profiling OpenGL applications.
otool, as we have seen earlier, displays various parts of an object file.
 pagestuff displays information on specified pages of a Mach-O file.
 PEFViewer displays the contents of a PEF binary.
 QuartzDebug.app is a visualizer for an application's screen-drawing behaviorit briefly flashes the
areas that are being redrawn. It also allows you to alter the user interface's scale factor and enable or
disable graphics hardware acceleration.
 sample profiles a process during a given time interval.
 Sampler.app is a viewer for a program's execution behavior.
 sc_usage shows system call usage statistics.
 Spin Control.app samples applications that fail to respond quickly enough, causing the spinning
cursor to appear.
 Thread Viewer.app is a viewer for threads and thread activity.
 vmmap displays virtual memory regions in a process.
 vm_stat displays Mach virtual memory statistics.
2.13.4.2. Computer Hardware Understanding Development Tools
The Computer Hardware Understanding Development (CHUD) package is a set of low-level tools that can
be optionally installed on Mac OS X. CHUD tools include the following specific programs.
 BigTop.app is a graphical equivalent to command-line tools such as top and vm_stat. It displays a
variety of system statistics.
 CacheBasher.app is a tool for measuring cache performance.
 MONster.app is a tool for collecting and visualizing hardware-level performance data.
 PMC Index.app is a tool for searching Performance Monitoring Counter (PMC) events.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 64 of 80
 Reggie SE.app is a viewer and editor for CPU and PCI configuration registers.
 Saturn.app is a tool for profiling applications at the function-call level. It is also used for visualizing
the profile data.
 Shark.app performs system-wide sampling and profiling to create a profile of a program's execution
behavior. This helps the programmer understand where time is being spent as the code runs.
 Skidmarks GT.app is a processor-performance benchmarking tool. It supports integer, floating-point,
and vector benchmarks.
 SpindownHD.app is a utility for displaying the sleep/active status of attached drives.
 amber traces all threads of execution in a process, recording every instruction and data access to a
trace file. acid analyzes traces generated by amber.
 simg4 is a cycle-accurate core simulator of the Motorola PowerPC G4 processor.
 simg5 is a cycle-accurate core simulator of the IBM PowerPC 970 (G5) processor.
2.13.4.3. Visual Tools
Mac OS X also provides several visual design and programming tools, most of which we came across earlier
in this chapter, for example, AppleScript Studio, Automator, AU Lab, Interface Builder, Quartz Composer,
and Xcode class- and data-modeling tools.
2.14. Security
We could informally define computer security as a condition wherein all computer resources are always
used "as intended." However, it is impossible to exhaustively enumerate all of one's intentions, which will
differ in any case from one personor one scenarioto another.[76] We could express the notion of computer
security in somewhat more concrete terms as follows: Security is the union of software, hardware, policies,
and practices that allows a system and its users to achieve the following:
[76] Surely, there could be situations that neither the designers of a system nor its users have
thought of yet.
Verify identities of users and system services
Safeguard sensitive information (such as personal data, cryptographic keys, and passwords) during
storage, transmission, and use
A definition of security could be reinforced by describing the absence of security, that is, insecurity. A
computer system's resourcesincluding external, shared resources such as the networkare all vulnerable to
attacks: from outside and often from within. We can think of a vulnerability as a potential for unintended
usea result of a software bug, a design oversight or error, a misconfiguration, and so on. When exploited via
attacks, vulnerabilities could lead to tangible or intangible damage. The following are examples of common
types of potential damage:
Leaking of sensitive data
Modification of sensitive data
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 65 of 80
Destruction of sensitive data
Unauthorized use of a system service
Denial of a system service so that its legitimate users cannot use it
Disruption or degradation of any system operation in general
A system's resources could be misused without denying service to legitimate users or without causing any
apparent damage to the system itself. For example, if a system's resources are lying idle, it can still be
misused as a stepping-stone to infiltrate another system.
Now that we have an informal understanding of computer security, let us look at important security-related
aspects and features in Mac OS X. Figure 234 depicts many of these features.
Figure 234. The Mac OS X security architecture
[View full size image]
Figure 234 does not show some daemons that play security-related roles in the operating system. For
example, lookupd caches and makes available a variety of information such as user accounts, groups,
computer names, and printers. Another daemon, memberd, resolves group memberships and responds to
membership API calls made by clients. Examples of these calls include mbr_uid_to_uuid() and
mbr_uuid_to_id().
Mac OS X security features can be divided between those provided by the kernel-level and user-level
security models. Additionally, a firmware password may be used on Apple computers in a potentially
hardware- or model-dependent manner. We will look at Open Firmware password protection in Chapter 4.
2.14.1. Kernel-Space Security
The Mac OS X kernel security model consists of both Mac OS Xspecific and typical Unix-style features.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 66 of 80
The following are examples of the kernel's security-related features.
BSD user and group identifiers (UIDs and GIDs) Traditional UIDs and GIDs form the kernel's most
basic and least flexible means of security enforcement. Examples of BSD security policies based on
UIDs and GIDs include ownership of file system objects; read/write/execute permissions on file
system objects; operations restricted to processes with an effective UID of 0 (root euid policy); and
operations on an object restricted to a process belonging to the object's owner or to a process with an
effective UID of 0 (owner or root euid policy).
Mach port rights Besides being an IPC channel, a Mach port may represent a variety of resources,
examples of which include tasks, threads, memory ranges, processors, and other devices. Moreover,
Mach is a capability-based system in which port rights determine which operations a task may or may
not perform on a port. The kernel manages and protects ports, thereby ensuring that only tasks with
the required rights can perform privileged operations.
Auditing system The Mac OS X kernel implements an auditing system based on BSM (Basic Security
Module), which is both a security audit format and an API used to track security-related events in the
operating system.
Process accounting System-level accounting for every process executed can be enabled or disabled
using the accton command. When process accounting is enabled, the lastcomm command displays
information about previously executed commands.
Encrypted virtual memory The kernel can optionally use the AES algorithm to encrypt virtual memory
pages that are swapped out to secondary storage.
ACLs File system ACLs are supported for finer-grained and flexible admission control when using
on-disk information. Per-file ACLs are implemented as extended attributes in the file system.
Kauth Kauth is an in-kernel mechanism for the evaluation of ACLs. It is flexible and extensible,
allowing kernel programmers to install their own callbacksor listenersfor authorization requests in the
kernel. When an entity wishes to perform an operation on an object, all registered listeners are
invoked and provided with contextual information about the requester's credentials and the requested
operation. A listener may allow, deny, or defer the request. The latter essentially lets the listener opt
out from decision makingit is up to the remaining listeners, and eventually the default listener, to
allow or deny the request.
2.14.2. User-Space Security
Mac OS X provides a flexible user-space security model that is largely based on the Common Data Security
Architecture (CDSA). CDSA is an open source security architecture adopted as a technical standard[77] by
the Open Group. It consists of a cryptographic framework and several layers of security services. Apple uses
its own CDSA implementation, which is depicted in Figure 234.
[77] The CDSA Specification was initiated by Intel Architecture Labs. The current standard is a
cooperative work of many organizations and companies, including Apple and IBM.
CDSA helps in the implementation of security features such as encryption, fine-grained access permissions
and user authentication, and secure data storage.
2.14.2.1. CDSA Plug-ins
The lowest layer of CDSA consists of plug-ins called by the layer above. CDSA plug-ins are allowed to call
each other as well. Apple-provided CDSA plug-ins are shown in Figure 234. CDSA allows additional plug-
ins to exist.
2.14.2.2. CSSM API
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 67 of 80
CDSA's core is a set of modules called the Common Security Services Manager (CSSM). The CSSM
modules shown in the CSSM Managers block in Figure 234 together provide the CSSM API. The
Authorization Computation Services Manager module shown within a dotted outline is not present in
Apple's CDSA implementation.
2.14.2.3. Mac OS X Security APIs
Mac OS X applications normally use Apple's middleware security APIs that are built atop the CSSM API to
access CDSA functionality. However, it is possible for an application to use the CSSM API directly.
Examples of services provided by the middleware APIs include the following.
Keychain Services provides secure storage for certificates, keys, passwords, and arbitrary information.
Secure Transport provides secure network communication through implementations of the Secure
Socket Layer (SSL) and Transport Layer Security (TLS) protocols.
Certificate, Key, and Trust Services, respectively, create, access, and manipulate certificates; create
encryption keys; and manage trust policies.
Authorization Services is used as the primary API by applications to authorize access to specific
actions[78] (e.g., creating a file in a restricted directory) or data.
[78] Applications can use Authorization Services to implement fine-grained authorization.
2.14.2.4. Security Server and Security Agent
As shown in Figure 234, Authorization Services communicate with the Security Server, which then uses the
CDSA APIs. Besides authorization, the Authorization Services API also handles authentication if required.
Authorization involves asking whether a given entity is allowed to perform a given operation. Before the
question may be answered, the requester is typically required to authenticatethat is, to prove his or her
identity. Then it is determined whether the entity in question has the appropriate permissions.
The Security Server[79] (/usr/sbin/securityd) acts as an arbiter of many types of security-related
operations and accesses. For example, fine-grained authorization of arbitrary operations by applications is
based on rules contained in the /etc/authorization policy database. The Authorization Services API
includes functions to add, delete, edit, and read policy database items. When an application requests a
rightfor example, com.osxbook.Test.DoSomething[80]it makes an authorization call. The call is routed to
securityd, which consults the policy database. securityd attempts to find a rule that exactly matches the
requested right. If none is found, securityd looks for wildcard rules that may match, in the order of the
longest match first. If there are no matches at all, securityd uses the generic rule, which is used for rights
that do not have any specific rules. If the user authenticates successfully, securityd creates a credential
with an expiration period of 5 minutes.[81]
[79] The Security Server is not part of CDSA.
[80] Rules and rights are conventionally named in the policy database using a reverse DNS
naming scheme.
[81] The expiration period is specified through the timeout key in the policy database.
The Security Agent application (/System/Library/CoreServices/SecurityAgent.app) is the user-
interface handler for securitydthe latter does not interact with the user directly but launches Security Agent
as a separate process, which in turn displays a username and password request dialog. Thus, Security Agent
enforces GUI interaction, which normally warrants physical presence.[82]