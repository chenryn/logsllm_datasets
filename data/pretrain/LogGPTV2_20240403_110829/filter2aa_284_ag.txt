and is becoming the de-facto standard in replacing XML.
JSON main security concern is JSON text dynamically embedded in JavaScript, because of this injection is a very real 
vulnerability.  The vulnerability in the program that may inadvertently to run a malicious script or store the malicious 
script to a database. This is a very real possibility when dealing with data retrieved from the Internet.
The code reviewer needs to make sure the JSON is not used with Javascript eval. Make sure JSON.parse(…) is used.
Var parsed_object = eval(“(“ + Jason_text  + “)”);  // Red flag for the code reviewer.
 JSON.parse(text[, reviver]); .. // Much better then using javascript eval function.
Code reviewer should check to make sure the developer is not attempting to reject known bad patterns in text/
string data, Using regex or other devices is fraught with error and makes testing for correctness very hard. Allow only 
whitelisted alphanumeric keywords and carefully validated numbers.
Do not allow JSON data to construct dynamic HTML. Always us safe DOM features like innerText or CreateText-
Node(…)
Object/Relational Mapping (ORM)
Object/Relation Mapping (ORM) facilitates the storage and retrieval of domain objects via HQL (Hibernate Query 
Language) or .NET Entity framework. 
It is a very common misconception that ORM solutions, like hibernate are SQL Injection proof. They are not. ORM’s 
allow the use of “native SQL”.  Thru proprietary query language, called HQL is prone to SQL Injection and the later is 
prone to HQL (or ORM) injection. Linq is not SQL and because of that is not prone to SQL injection. However using 
excutequery or excutecommand via linq causes the program not to use linq protection mechanism and is vulnera-
bility to SQL injection. 
A1 - Injection
52
Bad Java Code Examples
List results = session.createQuery(“from Items as item where item.id = “ + currentItem.getId()).list();
NHibernate is the same as Hibernate except it is an ORM solution for Microsoft .NET platform. NHibernate is also vul-
nerable to SQL injection if used my dynamic queries.
Bad .Net Code Example
Code Reviewer Action
Code reviewer needs to make sure any data used in an HQL query uses HQL parameterized queries so that it 
would be used as data and not as code.  They can also use the Criteria API at https://docs.jboss.org/hibernate/
orm/3.3/reference/en/html/querycriteria.html
7.5 Content Security Policy (CSP)
Is a W3C specification offering the possibility to instruct the client browser from which location and/or which 
type of resources are allowed to be loaded. To define a loading behavior, the CSP specification use “directive” 
where a directive defines a loading behavior for a target resource type. CSP helps to detect and mitigate cer-
tain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for 
everything from data theft to site defacement or distribution of malware
Directives can be specified using HTTP response header (a server may send more than one CSP HTTP header 
field with a given resource representation and a server may send different CSP header field values with dif-
ferent representations of the same resource or with different resources) or HTML Meta tag, the HTTP headers 
below are defined by the specs:
• Content-Security-Policy : Defined by W3C Specs as standard header, used by Chrome version 25 and later, 
Firefox version 23 and later, Opera version 19 and later.
• X-Content-Security-Policy : Used by Firefox until version 23, and Internet Explorer version 10 (which partially 
implements Content Security Policy).
• X-WebKit-CSP : Used by Chrome until version 25
Risk
The risk with CSP can have 2 main sources:
• Policies misconfiguration,
• Too permissive policies.
What to Review
Code reviewer needs to understand what content security policies were required by application design and 
how these policies are tested to ensure they are in use by the application.
string userName = ctx.GetAuthenticatedUserName();
 String query = “SELECT * FROM Items WHERE owner = ‘” 
 + userName + “’ AND itemname = ‘”  
 + ItemName.Text + “’”;
 List items = sess.CreateSQLQuery(query).List()
A1 - Injection
53
Useful security-related HTTP headers
In most architectures these headers can be set in web servers configuration without changing actual applica-
tion’s code. This offers significantly faster and cheaper method for at least partial mitigation of existing issues, 
and an additional layer of defense for new applications.
Note the Spring Security library can assist with these headers, see http://docs.spring.io/spring-security/site/
docs/current/reference/html/headers.html
Header name
Description
Example
Strict-Transport-Security
https://tools.ietf.org/
html/rfc6797
X-Frame-Options
https://tools.ietf.org/
html/draft-ietf-websec-x-
frame-options-01
Frame-Options 
https://tools.ietf.org/
html/draft-ietf-websec-
frame-options-00
HTTP Strict-Transport-Security (HSTS) enforces secure (HTTP over SSL/TLS) connections 
to the server. This reduces impact of bugs in web applications leaking session data 
through cookies and external links and defends against Man-in-the-middle attacks. 
HSTS also disables the ability for user’s to ignore SSL negotiation warnings.
Provides Click jacking protection. Values: deny - no rendering within a frame, sameorigin 
- no rendering if origin mismatch, allow-from: DOMAIN - allow rendering if framed by 
frame loaded from DOMAIN
Strict-Transport-Security: 
max-age=16070400; 
includeSubDomains
X-Frame-Options: deny
Table 11: Security Related HTTP Headers
X-Content-Type-Options
https://blogs.msdn.
microsoft.com/
ie/2008/09/02/ie8-securi-
ty-part-vi-beta-2-update/
Content-Security-Policy, 
X-Content-Security-poli-
cy,X-WebKit-CSP
https://www.w3.org/TR/
CSP/
Content-Security-Poli-
cy-Report_Only
https://www.w3.org/TR/
CSP/
The only defined value, “nosniff”, prevents Internet Explorer and Google Chrome from 
MIME-sniffing a response away from the declared content-type. This also applies to Goo-
gle Chrome, when downloading extensions. This reduces exposure to drive-by down-
load attacks and sites serving user uploaded content that, by clever naming, could be 
treated by MSIE as executable or dynamic HTML files.
Content Security Policy requires careful tuning and precise definition of the policy. If 
enabled, CSP has significant impact on the way browser renders pages (e.g., inline JavaS-
cript disabled by default and must be explicitly allowed in policy). CSP prevents a wide 
range of attacks, including Cross-site scripting and other cross-site injections.
Like Content-Security-Policy, but only reports. Useful during implementation, tuning 
and testing efforts.
X-Content-Type-Options: 
nosniff
Content-Security-Policy: 
default-src ‘self’
Content-Security-Pol-
icy-Report-Only: de-
fault-src ‘self’; report-uri 
http://loghost.example.
com/reports.jsp
X-XSS-Protection
[http://blogs.
msdn.com/b/ie/ar-
chive/2008/07/02/
ie8-security-part-iv-the-
xss-filter.aspx X-XSS-Pro-
tection]
This header enables the Cross-site scripting (XSS) filter built into most recent web brows-
ers. It’s usually enabled by default anyway, so the role of this header is to re-enable the 
filter for this particular website if it was disabled by the user. This header is supported in 
IE 8+, and in Chrome (not sure which versions). The anti-XSS filter was added in Chrome 
4. Its unknown if that version honored this header.
X-XSS-Protection: 1; 
mode=block
A1 - Injection
54
References
Apache: http://httpd.apache.org/docs/2.0/mod/mod_headers.html 
IIS: http://technet.microsoft.com/pl-pl/library/cc753133(v=ws.10).aspx
7.6 Input Validation
Input validation is one of the most effective technical controls for application security. It can mitigate numer-
ous vulnerabilities including cross-site scripting, various forms of injection, and some buffer overflows. Input 
validation is more than checking form field values. 
All data from users needs to be considered untrusted. Remember one of the top rules of secure coding is 
“Don’t trust user input”. Always validate user data with the full knowledge of what your application is trying 
to accomplish.
Regular expressions can be used to validate user input, but the more complicated the regular express are the 
more chance it is not full proof and has errors for corner cases.  Regular expressions are also very hard fro QA 
to test. Regular expressions may also make it hard for the code reviewer to do a good review of the regular 
expressions.
Data Validation
All external input to the system (and between systems/applications) should undergo input validation. The 
validation rules are defined by the business requirements for the application. If possible, an exact match vali-
dator should be implemented. Exact match only permits data that conforms to an expected value. A “Known 
good” approach (white-list), which is a little weaker, but more flexible, is common. Known good only permits 
characters/ASCII ranges defined within a white-list. 
Such a range is defined by the business requirements of the input field. The other approaches to data valida-
tion are “known bad,” which is a black list of “bad characters”. This approach is not future proof and would need 
maintenance. “Encode bad” would be very weak, as it would simply encode characters considered “bad” to a 
format, which should not affect the functionality of the application.
Business Validation
Business validation is concerned with business logic. An understanding of the business logic is required prior 
to reviewing the code, which performs such logic. Business validation could be used to limit the value range 
or a transaction inputted by a user or reject input, which does not make too much business sense. Reviewing 
code for business validation can also include rounding errors or floating point issues which may give rise to 
issues such as integer overflows, which can dramatically damage the bottom line. 
Canonicalization
Canonicalization is the process by which various equivalent forms of a name can be resolved to a single stan-
dard name, or the “canonical” name. 
The most popular encodings are UTF-8, UTF-16, and so on (which are described in detail in RFC 2279). A single 
character, such as a period/full-stop (.), may be represented in many different ways: ASCII 2E, Unicode C0 AE, 
and many others.
With the myriad ways of encoding user input, a web application’s filters can be easily circumvented if they’re 
not carefully built.
A1 - Injection
55
Bad Example
Good Example
.NET Request Validation
One solution is to use .Net  “Request Validation”.  Using request validation is a good start on validating user 
data and is useful. The downside is too generic and not specific enough to meet all of our requirements to 
provide full trust of user data.
You can never use request validation for securing your application against cross-site scripting attacks.
The following example shows how to use a static method in the Uri class to determine whether the Uri provid-
ed by a user is valid.
 var isValidUri = Uri.IsWellFormedUriString(passedUri, UriKind.Absolute);
However, to sufficiently verify the Uri, you should also check to make sure it specifies http or https. The follow-
ing example uses instance methods to verify that the Uri is valid.
 var uriToVerify = new Uri(passedUri);
 var isValidUri = uriToVerify.IsWellFormedOriginalString();
 var isValidScheme = uriToVerify.Scheme == “http” || uriToVerify.Scheme == “https”;
Before rendering user input as HTML or including user input in a SQL query, encode the values to ensure ma-
licious code is not included.
You can HTML encode the value in markup with the  syntax, as shown below.
Or, in Razor syntax, you can HTML encode with @, as shown below.
 public static void main(String[] args) {
     File x = new File(“/cmd/” + args[1]);
     String absPath = x.getAbsolutePath();
 }
Sample 7.11
public static void main(String[] args) throws IOException {
     File x = new File(“/cmd/” + args[1]);
     String canonicalPath = x.getCanonicalPath();
Sample 7.12
A1 - Injection
56
 @userInput
The next example shows how to HTML encode a value in code-behind.
 var encodedInput = Server.HtmlEncode(userInput);
Managed Code and Non-Managed Code
Both Java and .Net have the concept of managed and non-managed code. To offer some of these protections 
during the invocation of native code, do not declare a native method public. Instead, declare it private and 
expose the functionality through a public wrapper method. A wrapper can safely perform any necessary input 
validation prior to the invocation of the native method:
Java Sample code to call a Native Method with Data Validation in place
Data validations checklist for the Code Reviewer.
• Ensure that a Data Validation mechanism is present. 
public final class NativeMethodWrapper {
            private native void nativeOperation(byte[] data, int offset, int len);
            public void doOperation(byte[] data, int offset, int len) {
                // copy mutable input
                data = data.clone();
                // validate input
                // Note offset+len would be subject to integer overflow.
                // For instance if offset = 1 and len = Integer.MAX_VALUE,
                //   then offset+len == Integer.MIN_VALUE which is lower
                //   than data.length.
                // Further,
                //   loops of the form
                //       for (int i=offset; i data.length - len) {
                      throw new IllegalArgumentException();
                }
                nativeOperation(data, offset, len);
            }
        }
Sample 7.13
A1 - Injection
57
• Ensure all input that can (and will) be modified by a malicious user such as HTTP headers, input fields, hidden 
fields, drop down lists, and other web components are properly validated. 
• Ensure that the proper length checks on all input exist. 
• Ensure that all fields, cookies, http headers/bodies, and form fields are validated. 
• Ensure that the data is well formed and contains only known good chars if possible. 
• Ensure that the data validation occurs on the server side. 
• Examine where data validation occurs and if a centralized model or decentralized model is used. 
• Ensure there are no backdoors in the data validation model. 
• “Golden Rule: All external input, no matter what it is, will be examined and validated.”
Resources:
http://msdn.microsoft.com/en-us/library/vstudio/system.uri
A1 - Injection
58
A2
59
8.1 Overview
Web applications and Web services both use authentication as the primary means of access control from log-
ins via user id and passwords. This control is essential to the prevention of confidential files, data, or web pages 
from being access by hackers or users who do not have the necessary access control level.
8.2 Description
Authentication is important, as it is the gateway to the functionality you are wishing to protect. Once a user 
is authenticated their requests will be authorized to perform some level of interaction with your application 
that non-authenticated users will be barred from. You cannot control how users manage their authentication 
information or tokens, but you can ensure there is now way to perform application functions without proper 
authentication occurring.
There are many forms of authentication with passwords being the most common. Other forms include client 
certificates, biometrics, one time passwords over SMS or special devices, or authentication frameworks such as 
Open Authorization (OAUTH) or Single Sign On (SSO).
Typically authentication is done once, when the user logs into a website, and successful authentication results 
in a web session being setup for the user (see Session Management). Further (and stronger) authentication 
can be subsequently requested if the user attempts to perform a high risk function, for example a bank user 
could be asked to confirm an 6 digit number that was sent to their registered phone number before allowing 
money to be transferred.
Authentication is just as important within a companies firewall as outside it. Attackers should not be able to 
run free on a companies internal applications simply because they found a way in through a firewall. Also 
separation of privilege (or duties) means someone working in accounts should not be able to modify code in 
a repository, or application managers should not be able to edit the payroll spreadsheets.
8.3 What to Review
When reviewing code modules which perform authentication functions, some common issues to look out for 
include:
• Ensure the login page is only available over TLS. Some sites leave the login page has HTTP, but make the form
submission URL HTTPS so that the users username and password are encrypted when sent to the server. How-
ever if the login page is not secured, a risk exists for a man-in-the-middle to modify the form submission URL 
to an HTTP URL, and when the user enters their username & password they are sent in the clear.
• Make sure your usernames/user-ids are case insensitive. Many sites use email addresses for usernames and
email addresses are already case insensitive. Regardless, it would be very strange for user ‘smith’ and user 
‘Smith’ to be different users. Could result in serious confusion.
• Ensure failure messages for invalid usernames or passwords do not leak information. If the error message
indicates the username was valid, but the password was wrong, then attackers will know that username exists. 
If the password was wrong, do not indicate how it was wrong.
• Make sure that every character the user types in is actually included in the password.
BROKEN AUTHENTICATION AND
SESSION MANAGEMENT
A2
A2 - Broken Authentication and Session Management
60
A2 - Broken Authentication and Session Management
• Do not log invalid passwords. Many times an e-mail address is used as the username, and those users will 
have a few passwords memorized but may forget which one they used on your web site. The first time they 
may use a password that in invalid for your site, but valid for many other sites that this user (identified by the 
username). If you log that username and password combination, and that log leaks out, this low level compro-
mise on your site could negatively affect many other sites.
• Longer passwords provide a greater combination of characters and consequently make it more difficult for
an attacker to guess. Minimum length of the passwords should be enforced by the application. Passwords 
shorter than 10 characters are considered to be weak. Passphrases should be encouraged. For more on pass-
word lengths see the OWASP Authentication Cheat Sheet.
• To prevent brute force attacks, implement temporary account lockouts or rate limit login responses. If a user
fails to provide the correct username and password 5 times, then lock the account for X minutes, or implement 
logic where login responses take an extra 10 seconds. Be careful though, this could leak the fact that the user-
name is valid to attackers continually trying random usernames, so as an extra measure, consider implement-
ing the same logic for invalid usernames.
• For internal systems, consider forcing the users to change passwords after a set period of time, and store a 
reference (e.g. hash) of the last 5 or more passwords to ensure the user is not simply re-using their old pass-
word.
• Password complexity should be enforced by making users choose password strings that include various type of 
characters (e.g. upper- and lower-case letters, numbers, punctuation, etc.). Ideally, the application would indicate to 
the user as they type in their new password how much of the complexity policy their new password meets. For more 