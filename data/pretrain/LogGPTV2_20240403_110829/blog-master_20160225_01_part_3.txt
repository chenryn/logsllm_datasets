 >=      | date_ge    
 =       | time_eq    
        | time_gt    
 >=      | time_ge    
 =       | timetz_eq    
        | timetz_gt    
 >=      | timetz_ge    
 =       | float48eq    
        | float48gt    
 =      | float48ge    
 =       | float84eq    
        | float84gt    
 =      | float84ge    
 =       | timestamptz_eq    
        | timestamptz_gt    
 >=      | timestamptz_ge    
 =       | interval_eq    
        | interval_gt    
 >=      | interval_ge    
 =       | macaddr_eq    
        | macaddr_gt    
 >=      | macaddr_ge    
 =       | network_eq    
        | network_gt    
 >=      | network_ge    
 =       | numeric_eq    
        | numeric_gt    
 >=      | numeric_ge    
 =       | biteq    
        | bitgt    
 =      | bitge    
 =       | varbiteq    
        | varbitgt    
 =      | varbitge    
 =       | int28eq    
        | int28gt    
 =      | int28ge    
 =       | int82eq    
        | int82gt    
 =      | int82ge    
 =       | byteaeq    
        | byteagt    
 >=      | byteage    
 =       | timestamp_eq    
        | timestamp_gt    
 >=      | timestamp_ge    
 ~=~    | text_pattern_ge    
 ~>~     | text_pattern_gt    
 ~=~    | bpchar_pattern_ge    
 ~>~     | bpchar_pattern_gt    
 =      | date_ge_timestamp    
 >       | date_gt_timestamp    
 =      | date_ge_timestamptz    
 >       | date_gt_timestamptz    
 =      | timestamp_ge_date    
 >       | timestamp_gt_date    
 =      | timestamptz_ge_date    
 >       | timestamptz_gt_date    
 =      | timestamp_ge_timestamptz    
 >       | timestamp_gt_timestamptz    
 =      | timestamptz_ge_timestamp    
 >       | timestamptz_gt_timestamp    
 =       | uuid_eq    
        | uuid_gt    
 =      | uuid_ge    
 =       | pg_lsn_eq    
        | pg_lsn_gt    
 =      | pg_lsn_ge    
 =       | enum_eq    
        | enum_gt    
 =      | enum_ge    
 =      | tsvector_ge    
 >       | tsvector_gt    
 =      | tsquery_ge    
 >       | tsquery_gt    
 =       | record_eq    
        | record_gt    
 =      | record_ge    
 *=      | record_image_eq    
 *      | record_image_gt    
 *=     | record_image_ge    
 =       | range_eq    
 =      | range_ge    
 >       | range_gt    
 =       | jsonb_eq    
        | jsonb_gt    
 =      | jsonb_ge    
(273 rows)    
```    
除此以外的操作符，不参与逻辑推理。    
例如    
我们知道geo严格在坐标10,0的左边，肯定能推理出它不可能在11,0的右边，正常情况下是可以排除对这个表的扫描的。    
但是由于>不是btree operator，所以不参与推理。    
```    
postgres=# create table tt13(id int, geo point check(geo > point '(11,0)';    
                       QUERY PLAN                           
--------------------------------------------------------    
 Seq Scan on tt13  (cost=0.00..31.25 rows=170 width=20)    
   Filter: (geo >> '(11,0)'::point)    
(2 rows)    
```    
这种逻辑推理在分区表的应用中尤为突出，例如：    
用户规划了一批分区表，按照ID取模分区。    
```    
postgres=# create table p(id int, info text);    
CREATE TABLE    
postgres=# create table t0(id int check(abs(mod(id,4))=0), info text);    
CREATE TABLE    
postgres=# create table t1(id int check(abs(mod(id,4))=1), info text);    
CREATE TABLE    
postgres=# create table t2(id int check(abs(mod(id,4))=2), info text);    
CREATE TABLE    
postgres=# create table t3(id int check(abs(mod(id,4))=3), info text);    
CREATE TABLE    
postgres=# alter table t0 inherit p;    
ALTER TABLE    
postgres=# alter table t1 inherit p;    
ALTER TABLE    
postgres=# alter table t2 inherit p;    
ALTER TABLE    
postgres=# alter table t3 inherit p;    
ALTER TABLE    
postgres=# explain select * from p where id=0;  -- id=0 和 abs(mod(id,4)) =  0,1,2,3由于操作数不一致，不会进行推理。    
                        QUERY PLAN                            
----------------------------------------------------------    
 Append  (cost=0.00..103.50 rows=25 width=36)    
   ->  Seq Scan on p  (cost=0.00..0.00 rows=1 width=36)    
         Filter: (id = 0)    
   ->  Seq Scan on t0  (cost=0.00..25.88 rows=6 width=36)    
         Filter: (id = 0)    
   ->  Seq Scan on t1  (cost=0.00..25.88 rows=6 width=36)    
         Filter: (id = 0)    
   ->  Seq Scan on t2  (cost=0.00..25.88 rows=6 width=36)    
         Filter: (id = 0)    
   ->  Seq Scan on t3  (cost=0.00..25.88 rows=6 width=36)    
         Filter: (id = 0)    
(11 rows)    
postgres=# explain select * from p where id=0 and abs(mod(id,4)) = abs(mod(0,4));   -- 所以必须带上与约束一致的操作数    
                        QUERY PLAN                            
----------------------------------------------------------    
 Append  (cost=0.00..35.40 rows=2 width=36)    
   ->  Seq Scan on p  (cost=0.00..0.00 rows=1 width=36)    
         Filter: ((id = 0) AND (abs(mod(id, 4)) = 0))    
   ->  Seq Scan on t0  (cost=0.00..35.40 rows=1 width=36)    
         Filter: ((id = 0) AND (abs(mod(id, 4)) = 0))    
(5 rows)    
```    
如果我们使用的是范围分区，就不存在以上的问题。因为约束中的操作数和WHERE子句中的操作数可以做到一致。    
从以上的例子可以了解到，PostgreSQL优化器的逻辑推理能力还可以加强。    
只要能推理出一定为假的，就可以被优化器用于排除表。例如一些几何类型的操作符，数组类型的操作符等等。    
## 参考    
1\. 分区字段的分区方法，这种方法对应的函数或操作符必须是immutable的，同时尽量以字段加btree operator来分区，方便写SQL，如果做不到，那么SQL中必须带上原样的表达式，同时代入，例如 abs(mod(id,4)) = abs(mod(?,4))  。   
2\. http://www.postgresql.org/docs/9.5/static/ddl-partitioning.html#DDL-PARTITIONING-CONSTRAINT-EXCLUSION    
```    
The following caveats apply to constraint exclusion:    
Constraint exclusion only works when the query's WHERE clause contains constants (or externally supplied parameters). For example, a comparison against a non-immutable function such as CURRENT_TIMESTAMP cannot be optimized, since the planner cannot know which partition the function value might fall into at run time.    
Keep the partitioning constraints simple, else the planner may not be able to prove that partitions don't need to be visited. Use simple equality conditions for list partitioning, or simple range tests for range partitioning, as illustrated in the preceding examples. A good rule of thumb is that partitioning constraints should contain only comparisons of the partitioning column(s) to constants using B-tree-indexable operators.    
All constraints on all partitions of the master table are examined during constraint exclusion, so large numbers of partitions are likely to increase query planning time considerably. Partitioning using these techniques will work well with up to perhaps a hundred partitions; don't try to use many thousands of partitions.    
```    
3\. constraint_exclusion    
http://www.postgresql.org/docs/9.5/static/runtime-config-query.html#RUNTIME-CONFIG-QUERY-OTHER    
```    
constraint_exclusion (enum)    
Controls the query planner's use of table constraints to optimize queries. The allowed values of constraint_exclusion are on (examine constraints for all tables), off (never examine constraints), and partition (examine constraints only for inheritance child tables and UNION ALL subqueries). partition is the default setting. It is often used with inheritance and partitioned tables to improve performance.    
```    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")