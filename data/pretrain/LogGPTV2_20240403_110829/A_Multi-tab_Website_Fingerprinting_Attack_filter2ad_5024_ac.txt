67.28%
5s
50.4%
64.76%
68.76%
73.36%
71.32%
6s
50.4%
64.76%
68.76%
73.36%
77.08%
Table 3: How often BalanceCascade-XGBoost outputs each
possible split time for each real split time. Bolded values
represent correct detection of split time. There are 2500 in-
stances for each split time.
t 2s
3s
4s
5s
6s
i
l
p
s
d
e
t
c
e
t
e
D
2s
51.96%
4%
4.72%
6.2%
33.12%
3s
0.72%
66.48%
3.24%
5.28%
24.28%
Real split
4s
0.64%
1.28%
65.72%
5%
27.36%
5s
0.44%
0.92%
1.4%
74.28%
22.96%
6s
1.04%
1.52%
1.76%
3.04%
92.64%
Figure 2: TPR of detected split time with our dynamic split
WF attack on Tor that loads two pages with the dierent
time gap, comparing with the assumed split time ranging
from two seconds to six seconds.
which achieves a TPR of 64.94%. It is interesting to see that the TPR
with dierent specied split time is random, which means it is hard
to select and set a xed split time to construct the attack. However,
our dynamic split WF attack solves the problem and achieves a
higher TPR than any other specied split time. It is not surprising
to see that, compared with CUMUL and k-FP, our attack achieves
the best attack accuracy (see Figure 3).
Note that, in our experiments, we use one-second granularity
to set various split times. In practice, an attacker can use ner
granularity, e.g., 500 milliseconds, when training classiers, which
may achieve a higher TPR.
Attack Against Defenses. We observe that feature selection was
especially useful to defeat some defenses proposed in the WF litera-
ture. The reason is that WF defenses signicantly change the shape
and characteristics of the client’s trac. We tested the following
defenses, and evaluated defenses when applied to the SSH_normal6.
6We used Wang’s code at https://cs.uwaterloo.ca/ t55wang/wf.html to create defenses.
332
A Multi-tab Website Fingerprinting Aack
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Figure 3: TPR of detected split time with our dynamic split
WF attack on Tor that loads two pages with the dierent
time gap, comparing with CUMUL and k-FP.
Table 4: Comparison of the TPR of our classier with CU-
MUL and k-FP against various defences with an initial
chunk size of two seconds.
HTTPOS split
Trac morphing
Decoy pages
Defense
BuFLO
CUMUL
2.16%
2.96%
2.92%
4.4%
k-FP
88.12%
80.08%
70.36%
12.6%
Our
93.92%
84.52%
74.16%
12.32%
• Trac morphing [28], which alters the packet sizes of the client’s
trac according to the packet distribution of a target web page,
used as a decoy for the real web page.
• HTTPOS split [19], which utilizes HTTP range requests to obfus-
cate the size of small outgoing and incoming packets, splitting
them into random sizes.
• Decoy pages [22], which loads a decoy page whenever the client
opens a new web page.
• BuFLO [9], which sends packets at a constant size and at regular
intervals in both directions.
We compare our classier with the state of the art, i.e., k-FP
and CUMUL, on various defenses in the closed-world setting. Our
defense datasets are converted from SSH_normal. Table 4 shows
the performance of all three classiers under various defenses,
where the initial chunk size is two seconds. Against each defense,
our attack is comparable to or performs better than both k-FP and
CUMUL. Surprisingly, against HTTPOS split, we achieve almost the
same TPR as on the SSH_normal dataset, which means the HTTPOS
split has no inuence on TPR. When trac morphing is applied, our
attack can achieve 84.52% TPR, which is better than K-FP by more
than 4%. It is interesting to nd that our attack achieves 74.16%
TPR when decoy pages are used. Usually, in decoy page defense,
we load another page at the same time when we open a target page.
In theory, background noise and network ows of the target page
are mixed and there is no non-overlapped part. However, as long as
there is delay between the load time of these two types of pages, we
can still classify the target page. Here, we use unmonitored pages
as the noise [25]. Our new WF attack can still achieve high TPR
with the initial chunk against defenses even when the split time is
only two seconds. We observe similar TPR if the initial chunk size
is larger than two seconds.
6.3 Evaluation of Page Split
Now we compare the performance of BalanceCascade-XGBoost
with time-kNN [27] that achieves page splitting. If the start point
333
Figure 4: The split accuracy of BalanceCascade-XGBoost
compared to time-kNN while varying the proportion of
“false splits” class to “true splits” class.
of the second pages is within 50 packets of the rst page, time-
kNN cannot classify such pages. To perform a fair comparison
between the two algorithms, we lter the instances which do not
satisfy the requirement of time-kNN. We use the same features used
in time-kNN to compare the performance of the two algorithms.
We generate the SSH_random and Tor_random datasets that are
randomly selected from SSH_two and Tor_two datasets with two
pages, respectively. We train 1,500 instances in each dataset and
then use 1500 instances for test.
Accuracy Evaluation with Varying Sampling. As we discussed
above, the binary classication has a problem that there is a seri-
ous unbalance between “true splits” and “false splits” classes. The
BalanceCascade used in our split nding algorithm resolves this
issue by balancing the quantity of two classes in an under-sampling
method. We evaluate how the proportion b of “false splits” and
“true splits” classes aect our split accuracy compared with time-
kNN. Here, the split accuracy is dened as the percentage of packet
sequences of the dataset on which our algorithm returns a split
point that is fewer than 25 packets before or after the true split
point.
As shown in Figure 4, we can see that, even when the ratio
of the number of “false splits” class to that of “true splits” class
is 1:1, our split accuracy is higher than time-kNN. However, the
accuracy is relatively stable after b is larger than 10. On the one
hand, more “false splits” class instances introduce more information
about the false split point. On the other hand, more “false splits”
class instances mean more weak classiers built and thus incur
more computation time. Hence, we consider b = 10 is a good choice.
However, the split accuracy of time-kNN decreases with b increases,
which means time-kNN has a limitation in an unbalanced dataset.
Thus, time-kNN achieves low classication accuracy if the classes
are unbalanced.
Next we compare the split accuracy of our algorithm with time-
kNN. In this experiment, the ratio of the number of “false splits”
class N to the number of “true splits” class P is 10:1 in our training
dataset. Figure 5 shows the performance of our algorithm compared
to time-kNN algorithm. On the Tor dataset, we have achieved a
higher split accuracy than time-kNN. They achieve the split accu-
racy of 82% and 69%, respectively. Note that, the split accuracy of
guessing correct split randomly for any outgoing packets is only
0.22% with the Tor_two dataset. As for SSH dataset, when an SSH
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Y. Xu, T. Wang, Q. Li, Q. Gong, Y. Chen, and Y. Jiang
Table 6: TPR of split nding with BalanceCascade-XGBoost
on SSH. For each real split time, the table shows the number
of network ows detected as each possible split time. Bolded
values represent correctly detected split times.
2s
1086
51
47
45
21
3s
25
1112
52
28
23
Real split
4s
14
27
1112
61
36
5s
18
11
22
1148
51
6s
21
15
14
25
1175
t 2s
3s
4s
5s
6s
i
l
p
s
d
e
t
c
e
t
e
D
Table 7: TPR of split nding with time-kNN on Tor. For each
real split time, the table shows the number of network ows
detected as each possible split time. Bolded values represent
correctly detected split times.
t 2s
3s
4s
5s
6s
N/A
i
l
p
s
d
e
t
c
e
t
e
D
2s
124
13
29
35
60
989
3s
15
252
39
64
91
789
Real split
4s
24
29
388
69
167
573
5s
25
31
56
590
164
384
6s
19
32
56
74
787
282
Table 8: TPR of split nding with BalanceCascade-XGBoost
on Tor. For each real split time, the table shows the number
of network ows detected as each possible split time. Bolded
values represent correctly detected split times.
t 2s
3s
4s
5s
6s
i
l
p
s
d
e
t
c
e
t
e
D
2s
644
46
65
71
424
3s
8
818
43
60
321
Real split
4s
9
15
822
60
344
5s
9
16