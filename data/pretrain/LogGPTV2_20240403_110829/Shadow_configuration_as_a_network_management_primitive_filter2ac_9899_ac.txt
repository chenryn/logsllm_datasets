that the router be able to support this additional processing burden.
Forwarding engines in many routers are designed to handle worst-
case scenarios where all incoming packets have the minimum size.
In particular, assume that a router can support α L
Kmin packets per
second where L is the link speed in bytes per second; Kmin (typi-
cally, Kmin = 40 bytes) is the minimum packet size; and α ≤ 1 is
the efﬁciency factor.
Let kr denote the packet sizes of real trafﬁc and ks the packet
sizes of shadow trafﬁc. Let αr be the link utilization caused by real
trafﬁc and αs that of shadow trafﬁc. To sustain lookup, we need:
(cid:2)
E
(cid:3)
αrL
kr
(cid:2)
(cid:3)
+ E
αsL
ks
< α L
Kmin
.
Using the packet size distribution in [26], we can compute αs
given αr and α. For α ≥ 0.7 and αr ≤ 0.8, we have αs ≥ 0.75,
meaning the link utilization for shadow trafﬁc can reach up to 75%
while still being supported by the forwarding engine.
Performance Measurement Accuracy
Our packet cancellation scheme tries to remain as consistent as pos-
sible with the original forwarding behaviors for both shadow and
real packets. This is important since the operator must have con-
ﬁdence that the measurements obtained on real and shadow trafﬁc
are indicative of the measurements that would be observed if only
real or only shadow trafﬁc were present in the system.
To better understand our scheme, consider a basic model: pack-
ets have uniform sizes, all packets have space reserved for an addi-
tional shadow header, and packets do not arrive in the output queue
when a transmission is in progress. Then, we can show that there
will be no delay or loss perturbations for either real or shadow pack-
ets.
CLAIM 1. For any packet p, dr(p) = ds(p) = 0 where dr(p)
(resp., ds(p)) is the end-to-end packet delay perturbation for a real
(resp., shadow) packet.
CLAIM 2. For any packet p, lr(p) = ls(p) = 0 where lr(p)
(resp., ls(p)) is the packet loss perturbation for a real (resp., shadow)
packet.
6. SHADOW COMMITMENT
As we discussed in Section 3, with a consistent and reachable
forwarding state and satisfactory performance, the network opera-
tor may then decide to apply the shadow conﬁguration as the net-
work’s actual conﬁguration. We deﬁne the objective of the commit-
ment process to be swapping the shadow and real conﬁgurations at
all routers within the srnet. Swapping allows the network to roll-
back if an error occurs or the operator ﬁnds the new conﬁguration
unacceptable.
6.1 Overview
Although there are several previous studies on updating FIBs
across routers (e.g., [20,21,56]), our shadow conﬁguration commit-
ment problem is distinct from these previous problems. For exam-
ple, many types of changes and routing processes may be involved
in a conﬁguration change, so routing-protocol speciﬁc techniques
(e.g., [21]) may not apply.
Our protocol is inspired by the simple and clean map dissemi-
nation protocol proposed by Lakshminarayanan et al. in [34]. We
address additional issues in our speciﬁc context including integra-
tion with version control of distributed conﬁguration ﬁles, rollback
of conﬁgurations, and simplicity of router maintenance.
To integrate with conﬁguration version control (e.g., CVS), be-
fore each commitment, the operator broadcasts two tags to each
router: Cold identiﬁes the real conﬁguration before swap, and Cnew
the shadow conﬁguration before swap. An additional functionality
of the tags is to mark packets to avoid forwarding loops during the
swapping period; this is inspired by the map dissemination in [34].
After commitment, the tags should be removed for simplicity of
router maintenance.
Consider the scenario when routers always tag packets (e.g., with
global map sequence numbers [34]), and the network operator pow-
ers on a new router. After reading its local conﬁguration ﬁle, a
routing process (either shadow or real) must communicate with the
corresponding routing processes of its neighboring routers. How-
ever, since the router does not know which tag denotes the real con-
ﬁguration and which denotes the shadow, it may not be able to tag
routing messages correctly such that they are demultiplexed to the
correct routing processes at its neighbors. One could design vari-
ous ways to work around this problem (e.g., designating globally
constant tags or a protocol to allow a router to query tags), but they
introduce extra complexity. Our commitment protocol chooses to
remove the tags after commitment so that the shadow bit has well-
deﬁned semantics (0 indicates current and 1 indicates shadow) dur-
ing normal operation.
6.2 Protocol Operation
The protocol proceeds in four phases. Messages to the routers
are sent ﬁrst using the real conﬁguration, then the shadow conﬁgu-
ration in the case where the real conﬁguration is non-operational.
Phase 1: During the ﬁrst phase, the operator sends a TAG DISTRI-
BUTION message containing two tags to each router. The two tags
are temporary network-wide identiﬁers for the conﬁgurations: Cold
identiﬁes the real conﬁguration before swap, and Cnew the shadow
conﬁguration before swap. Upon receiving these tags, each router
creates a lookup table to remember the mapping. To report its con-
ﬁguration ﬁle to version control (diff is enough) and to make
sure that all routers have received the tags, each router responds to
the TAG DISTRIBUTION message with an acknowledgment. The
operator waits to receive an acknowledgment from each router.
To prevent links from being oversubscribed while commitment
is in process, testing trafﬁc marked with the PD bit (discussed in
Section 5) is immediately dropped by routers as of this phase. This
is done by adding an output ﬁlter rule.
Phase 2: During the second phase, every router knows the tags, so
the operator sends a TAG PACKET message to all routers causing
them to start marking packets with tags. Since routers do not re-
ceive the TAG PACKET message simultaneously, some packets are
marked with tags and some use the shadow bit during this phase.
Packets generated at the router by a conﬁguration are marked with
that conﬁguration’s tag, and received packets already marked with
tags are forwarded according to the appropriate conﬁguration. Tags
are added to packets received without tags: if the shadow bit is un-
R1
R2
e
R1
R2
e
R1
R2
e
(c)
(a)
(b)
Figure 6: Scenario showing how a transient state can cause
temporary congestion. White routers have not yet swapped;
black routers have swapped.
set, it uses the tag of current real conﬁguration (currently Cold);
otherwise, it uses the tag of the current shadow conﬁguration (cur-
rently Cnew). If a router has not received the TAG PACKET mes-
sage but receives a packet with a tag, it additionally triggers the
router to transit to a state as if it had received the TAG PACKET
state. This indirect triggering can speed up this phase.
Before moving to phase 3, the network must wait for the follow-
ing two conditions to become true: (1) no routers are still marking
packets using the shadow bit; (2) no packets using the shadow bit
are in transit.
At the second half of the Phase 2, the two conditions are satisﬁed.
For the ﬁrst condition, the operator needs to receive an acknowledg-
ment from each router. After the ﬁrst condition is true, the operator
satisﬁes the second condition by waiting for a short time (e.g., the
estimated upper bound of link latency) until all packets have been
processed by the next router in their path.
Phase 3: During the third phase, since no packets will be using the
shadow bit, the routers can safely swap the conﬁgurations. The op-
erator transmits a SWAP message to the routers. Each router swaps
the real and shadow conﬁguration after receiving the message, and
sends an acknowledgment back to the operator. Note that the tags
associated with each conﬁguration are not swapped. Also note that
ingress routers that have received the SWAP message now tag un-
marked packets with Cnew instead of Cold.
Phase 4: In the last phase, the operator sends a MARK SHADOW
BIT message to each router, allowing them to again mark pack-
ets using the shadow bit. To report success, each router sends an
acknowledgment back to the operator.
6.3 Error Handling and Rollback
There are potential error conditions during commitment. Link
or router failures cause the routing and forwarding processes (e.g.,
fast rerouting) to automatically start to react and bypass the failed
equipment. The presentation below is focused on error conditions
leading to the disruption to our commitment protocol.
Transient States: We deﬁne a transient state as a state where some
data packets use the old conﬁguration and others use the new con-
ﬁguration. A potential pitfall of a transient state is that the utiliza-
tion of some links may be higher than it would be under either of
the two conﬁgurations. Consider an example shown in Figure 6.
Routers R1 and R2 will both change forwarding paths in the new
conﬁguration. In Figure 6(a), neither has swapped and only R2 for-
wards through link e. After R1 has swapped in Figure 6(b), the
link is used by both routers, possibly causing temporary conges-
tion. Once R2 swaps in Figure 6(c), the transient state ends and the
ﬁnal router is no longer using link e. Note that such transient states
also can happen under some circumstances with other approaches
such as the map dissemination approach [34].
Recovery and Rollback: During phase 1, if any one router reports
an error or the controller does not receive acknowledgments from
all routers, the commitment should abort. As a soft state design, if
a router does not receive TAG PACKET before its local timeout, it
should change back to the normal state. During phases 2 and 4, if
the operation of any router is unsuccessful or times out, the operator
will retry the phase. Routers can remain in their current states, as
this is not a transient state.
It is straightforward if the operator
chooses to rollback to the original conﬁguration since the tags are
already distributed and only phases 2, 3, and 4 of the protocol need
be executed.
The only phase in which a transient state can happen is phase
3. Here, it is important for the state not to be permanent. Con-
sider what can happen during phase 3.
If acknowledgments are
received from all routers, the transient state has already ended and
no rollback is necessary. If at least one acknowledgment is missing,
there are two possible reasons: a router did not receive or process
the SWAP command, or the SWAP is processed but the acknowl-
edgment was not delivered. We would like to detect the ﬁrst case.
Since an error may have occurred at such routers (e.g., a routing
process crashed), it may not be possible to query them directly.
Thus, the operator queries the router’s neighbors. If the router in
question is tagging its forwarded trafﬁc (recall that only real pack-
ets are present) with Cold, then there exists a router that has not
processed the SWAP message, and the srnet should rollback. Note
that even if a router crashes during commitment, both the real and
shadow conﬁgurations of other routers within the srnet reconverge
appropriately.
PROPOSITION 1
(SAFETY). Packets never alternate back and
forth between conﬁgurations. Thus, the commitment protocol does
not create any additional forwarding loops. Also, control packets
such as route advertisements are delivered correctly even while the
commitment protocol is executing.
PROPOSITION 2
(LIVENESS). If for every router, commitment
control messages are delivered in ﬁnite time, and the router either
responds to the messages or is recovered ofﬂine in ﬁnite time, the sr-
net returns to normal operation, and the transient state is no longer
present.
7. SHADOW IMPLEMENTATION
A key issue in implementing support for shadow conﬁgurations
is associating entities maintained within the operating system (e.g.,
FIB entries, ﬁltering rules, interfaces, neighbor entries, and pack-
ets) with the appropriate conﬁguration. To demonstrate that this can
be done with minimal effort, we present an implementation consist-
ing of extensions to the Linux Kernel (version 2.6.22.9). Our design
is able to support both XORP [23] (version 1.4) and Quagga [41]
(versions 0.98.6 and 0.99.9) without any source code changes to
either software package. Either can be used interchangably above
our shadow-enabled kernel, which illustrates support in heteroge-
nous environments.
Figure 7 shows the major components of the implementation.
We emphasize that different routers may choose different imple-
mentation as long as the messaging format (i.e., how shadow data
packets and shadow control packets are encoded) is standardized.
Separating Conﬁgurations: Each entity is associated with a par-
ticular conﬁguration. Entities corresponding to the current real con-
ﬁguration are applied to transit trafﬁc and routing processes that
communicate with the outside world, while entities corresponding
to the current shadow conﬁguration are being evaluated by the op-
erator.
We append data structures for necessary entities with a mask,
where each bit position corresponds to a particular conﬁguration.
To demonstrate feasibility, we have implemented a fully opera-
tional system supporting shadow conﬁgurations. We now discuss
in detail Layers 1 and 2 of our system architecture. The related
components are shown in Figure 1.
7.1 Objectives
There are three primary objectives fulﬁlled by our implemen-
tation: (1) identify operating system conﬁguration entities with the
shadow and/or real conﬁgurations; (2) keep CPU and memory over-
head low by merging conﬁguration entities where possible; (3) re-
duce code changes (e.g., to routing processes and network tools)
after introducing shadow conﬁgurations.
7.2 Supporting Shadow Conﬁgurations
Configuration Management Tools
cui
scaf
stc
cdb
Routing Processes
ospfd
bgpd
ospfd
bgpd
xorp_bgp
xorp_ospfv2
xorp_bgp
xorp_ospfv2
zebra
zebra
proxy
xorp_rtrmgr
xorp_rtrmgr
Linux kernel
Socket API
Shadow-enabled FIB
Forwarding/Bandwidth Control
NIC driver 0
NIC driver 1
Figure 7: Implementation of router supporting shadow conﬁg-
urations: Shaded parts are new or modiﬁed.
If an entity appears in more than one conﬁgurations, multiple bits
are set in the mask.
One installed conﬁguration is considered as the real while an-
other is considered the shadow. This mapping is maintained in
a simple two-entry translation table, allowing the commitment’s
swap operation to simply swap the entries in the translation table.
Shadow-enabled FIB: We merge entries in FIB table for both con-
ﬁgurations to reduce memory overhead. FIB entries use a mask to
indicate the conﬁgurations to which the destination subnet belongs.
We extend the FIB lookup, insertion, and deletion algorithms to
If the forwarding behaviors (e.g.,
handle the merged FIB table.
next hops) in the two conﬁgurations are different, we record the
difference inside the entry.
Other similar kernel tables, such as neighbor entries, ﬁltering
rules, and interface addresses are handled similarly.
Socket API: Extending the kernel tables is not enough. When
a userspace program, such as a routing process or a testing tool
communicates with the kernel, it uses the socket API. We extend
the kernel’s socket data structure to reference the conﬁguration to
be used when transmitting packets and demultiplexing incoming
packets. Routing processes in different conﬁgurations can safely
bind to the same IP addresses and ports.
Packets: Our current packet format supports IPv4 and ARP, but
the same methodology can be applied to IPv6 or other Layer 3 pro-
tocols. During normal operations, each packet needs two bits: a