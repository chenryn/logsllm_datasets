Ecosystem
This section aims to provide a structured way to conduct re-
verse engineering1 of Apple wireless protocols while using
practical examples from our analysis of Continuity services.
First, we show useful vantage points. We explain the binary
analysis methodology and share our insights on dynamic anal-
ysis. Then, we explain how to access the security key material
of Apple services and discuss our methodology’s applicabil-
ity to other protocols in Apple’s ecosystem. In the end, we
present several tools and scripts that we have developed to
facilitate reverse engineering. All services that we analyzed
in this paper are available on both macOS 10.15 and iOS 13.
iOS and macOS share large parts of their code, and since we
found macOS to be much more open and accessible than iOS,
we used macOS as the platform that we analyzed. Most of
the methods presented in this section can be applied to iOS
as well. For some of them (e. g., full keychain access), the
researcher requires a jailbroken iPhone. Since the discovery
of a BootROM exploit called checkm8 and the introduction of
checkra1n, jailbreaks became widely available and supported
all iOS versions [20]. Finally, all vulnerabilities and attacks
presented in Section 5 apply to both macOS and iOS. This
section is a revised Ph.D. thesis chapter [40, Chapter 4].
3.1 Vantage Points
We approach protocol analysis from different vantage points
that we depict in Fig. 1. (1) Static binary analysis is tough
to conduct as each protocol is implemented across multiple
components (frameworks and daemons). Therefore, during
the initial stages, it is useful to monitor (2) the system as a
whole to identify core components that can thoroughly be ex-
amined subsequently. Also, data transmitted via (3) network
1We deﬁne a hacker as a curious individual who wants to understand the
technical details of a (potentially proprietary and closed-source) system to
achieve interoperability or conduct a security analysis.
USENIX Association
30th USENIX Security Symposium    3919
similar name (e. g., sharingd and Sharing) or share a derived
preﬁx (e. g., searchpartyd, SPFinder, and SPOwner). We list
the locations in the ﬁle system in the following. /System/Li-
brary/Frameworks contains frameworks with public documen-
tation2 such as Security. /System/Library/PrivateFrameworks
contains other frameworks such as Sharing. /usr/libexec and
/usr/sbin contain most daemons such as sharingd. However,
some are also shipped in their respective framework.
/us-
r/lib and /usr/lib/system contain low-level libraries such as
CoreCrypto.
Drivers The Wi-Fi driver is a kernel extension and, there-
fore, resides in /System/Library/Extensions. The driver is
split up into a generic component (IO80211Family) and chip-
speciﬁc plugins (such as AirportBrcmNIC).
3.2.2 Binary Selection
The purpose of the initial selection process is to identify
binaries that may contain relevant code and, thus, sets the
scope for the analysis project. To start this process, we can
use the system’s logging facility (see Section 3.3) to identify
processes that become active when starting a particular system
function (e. g., AirDrop). If we identify at least one daemon
process, we can crawl through its dependencies recursively
by running otool -L to ﬁnd related frameworks and libraries.
We show part of the discovered dependencies and interactions
found for HO in Fig. 1.
3.2.3
Interesting Functions and Code Segments
Due to the size of most binaries that we analyzed, such as
the sharingd daemon, it is infeasible to analyze the entire
program. Instead, it makes sense to identify functions of in-
terest, e. g., those that implement frame handling. Fortunately,
Apple does not strip symbol names from (most of) their bina-
ries, such that the symbol table provides useful information
and, e. g., lists function names including -[RPConnection
_receivedObject:ctx:] in the Rapport framework. This
function handles received messages shared over AWDL after
they have been decrypted. Furthermore, debug log statements
give hints about the purpose of a code segment inside a func-
tion. Therefore, we can search for debugging strings (using
strings) and their cross-references to ﬁnd additional details.
3.3 System Logging
The complete protocol operation is difﬁcult to comprehend
with binary analysis alone. We complemented our static anal-
ysis with a dynamic approach. In this section, we discuss
dedicated macOS logging and debugging facilities that helped
during our analyses. In particular, we explain the Console
application. However, previous work [42] has also used the
2https://developer.apple.com/documentation
Figure 1: Vantage points that we used during our analysis.
We provide a simpliﬁed view of components and their inter-
actions, such as daemons ( ), frameworks (
), and drivers
( ) that are used by Handoff and Universal Clipboard.
interfaces is easily accessible using monitoring tools and is
tremendously useful for dynamic analysis. We found that the
ability to retrieve and use (4) persistent data, especially from
the system’s keychain, is essential for building prototypes
and, thus, for validating ﬁndings. Finally, any available (5)
documentation (not shown in Fig. 1) such as patents [45, 46]
or Apple’s platform security white paper [4] can be helpful
for an initial assessment and understanding of some design
elements of the service. Having those multiple vantage points
at hand enables us to gather more information, to change per-
spective if we get stuck (e. g., when encountering encrypted
trafﬁc), and to resume analysis at a later point (e. g., after
extracting the decryption keys). We elaborate on the four
vantage points in Fig. 1 in the following.
3.2 Binary Analysis
We analyzed many binaries related to the Continuity services
to ﬁnd those parts that ﬁnally implement the protocol. We ﬁrst
illustrate our selection process and then discuss the two-part
Wi-Fi driver, which implements most of the AWDL protocol
stack. We focus our analysis on macOS and assume that the
architecture is, in principle, similar to that of iOS as the two
operating systems (OSs) share a large common codebase [8].
3.2.1 Binary Landscape
Understanding and navigating the binary landscape of macOS
is essential to ﬁnd and relate components of interest.
Frameworks and Daemons Apple excessively uses frame-
works and daemons in its OSs. Consequently, numerous
dependencies result in a complex binary selection process.
Frameworks offer an API to their corresponding singleton
daemons and can be used by other daemons and processes.
Daemons and their respective frameworks typically have a
3920    30th USENIX Security Symposium
USENIX Association
(4) Persistent DataKeychain(3) Network InterfacesSecuritysharingdSharingbluetoothdIOBluetoothFamilyIO80211FamilyWirelessProximitywirelessproxdmDNSResponderFoundation(NetService)CoreBluetooth(2) System(1) BinaryrapportdRapportCoreUtilsuseractivitydUserActivityioctl interface, Broadcom’s leaked wl utility, and Apple’s
undocumented CoreCapture framework to analyze the Wi-Fi
driver. The Console aggregates all system and application
logs since macOS 10.12 and includes debug messages from
the kernel. Alternatively, one can use the log command-line
tool to access the same information.
Filtering for Interesting Output
It is possible to ﬁlter log-
ging output, e. g., by process or subsystem. The predicate-
based ﬁltering is described in detail on the man page of log.
For example, to get information about HO, we can use
log stream -- predicate " process == \
’rapportd ’ OR process == ’ useractivityd ’"
One of our tools, as described in Section 3.6, uses this ability
to identify processes and frameworks that log information
about a speciﬁc system service, like AirDrop.
Increasing Log Level The --level debug ﬂag will in-
crease the log verbosity of processes that make use of os_log.
In addition, some processes log private data such as keys. To
enable this, we can set
sudo log config -- mode " private_data : on "
Since macOS 10.15, the command is no longer available, and
we need to disable SIP [25].
3.4 Network Interfaces
Monitoring the Wi-Fi and Bluetooth network interfaces are
a quick way to gather information about a particular service.
For example, we can identify known protocols, whether en-
cryption is used, or determine whether we are dealing with
an undocumented protocol. Besides, we can learn the active
wireless communication channels, the timings of packet trans-
missions, generally monitor the dynamics of a protocol. In
the following, we discuss those tools that we have found to
be particularly useful for this purpose.
3.4.1 Wireshark
Wireshark [49] is an open-source network protocol analyzer
and supports many standardized but also proprietary protocols.
While Wireshark identiﬁes known protocols from network
traces, it is also possible to implement custom dissectors. We
found that writing such a custom dissector in parallel to the
reverse engineering process serves multiple purposes: (1) We
iteratively document and validate our ﬁndings. (2) It helps
to deduce the semantics of individual ﬁelds, e. g., a random
nonce would change in every handshake, while a static key or
certiﬁcate would remain constant (Section 3.5). And (3) it can
be used to evaluate experiments such as those in Section 5.4
by exporting time series data via tshark.
3.4.2 Bluetooth Explorer and Packet Logger
Apple ships two Bluetooth debugging tools in the Additional
Tools for Xcode package.3 The Bluetooth Explorer displays
nearby BLE devices and their advertisements in real-time.
Apple devices excessively use these advertisements to an-
nounce the availability of services such as AirDrop [34].
BTLEmap [24] implements a dissector for most of these adver-
tisements. PacketLogger, on the other hand, creates network
traces for Bluetooth HCI commands and, therefore, provides
some of the functionality of InternalBlue [33]. Wireshark
supports PacketLogger-recorded .pklg ﬁles, which allow for
convenient analysis of Bluetooth traces.
3.4.3 Machine-in-the-Middle Proxy
Encrypted trafﬁc can prohibit us from examining the inter-
esting parts of the protocols. While we could instrument
the daemon process and extract packets before transmission
(which requires identifying functions that perform those oper-
ations), it can be easier to employ MitM proxy tools to open
the end-to-end encryption, e. g., for HTTPS [19]. Unfortu-
nately, a MitM proxy is not always successful in intercepting
a connection with self-signed certiﬁcates, e. g., when certiﬁ-
cate pinning is used, so it can be helpful to extract private
keys and certiﬁcates from the system’s keychain.
3.4.4 Custom Prototypes
In an advanced stage of the process, we have collected sufﬁ-
cient information to re-implement (part of) the protocol and,
thus, can interact with the target devices actively. In particular,
a custom prototype enables us (1) to validate our ﬁndings’
correctness, e. g., if other devices start interacting with our
prototype, we can conclude that the frame format is correct,
(2) to ﬁnd out more details about the protocol, e. g., we could
determine which protocol ﬁelds mandatory or optional, and
(3) to conduct protocol fuzzing as part of the security analysis,
e. g., we found parsing-related vulnerabilities in PWS. We
list the links to our prototypes the “Availability” section at the
end of this paper.
3.5 Keychains
Access to private keys and other secure data used by a partic-
ular service or protocol is highly useful in making educated
assumptions about what security mechanisms might be em-
ployed. Also, extracting key material is essential to build and
test prototypes that prove or disprove working hypotheses,
e. g., verifying the requirements for an authenticated PWS
connection.
3https://developer.apple.com/download/more/?=additional%
20tools%20xcode
USENIX Association
30th USENIX Security Symposium    3921
3.5.1 macOS Keychains
In macOS 10.15, there are two types of keychains known as
login and iCloud keychain, respectively. The former is only
stored locally on the computer. The iCloud keychain was ﬁrst
introduced in iOS and has since been ported to macOS as
well. This keychain provides more features such as protec-
tion classes, optional synchronization between devices, and
improved access control [4]. As Apple has moved more key-
chain items from the login keychain to the iCloud keychain,
we believe that Apple will merge them in the future. The Key-
chain Access application is a GUI for displaying and working
with either keychain. However, we have found that not all
keychain items (e. g., those used by some system services)
are displayed.
3.5.2 Security Framework
Fortunately, Apple provides a documented API for accessing
keychains via the Security framework, which additionally
is open-source.4 For our purposes, the SecItemCopyMatching
function5 is particularly interesting as it allows retrieving
items such as keys from the keychain. The function requires
some query parameters to narrow down the items it should re-
turn. To get the relevant query parameters of a target program,
we can either statically analyze the binary by searching for
references to SecItemCopyMatching or monitor the process
and extract the parameters at runtime using a debugger. In
the case of PWS, the query consists of three keys: kSecClass,
kSecReturnRef, and kSecValuePersistentRef. The value of
the latter is a serialized object containing all information re-
quired to locate a particular item in the keychain.
3.5.3 Accessing Keys of Apple Services
As a security measure, programs not signed by Apple will
not get any results even when using the correct query pa-
rameters as Apple uses code signing to implement access
control to keychain items. To circumvent this measure, we
(1) need to set the correct keychain-access-group entitlement
(com.apple.rapport in case of HO or simply the * wildcard)
during code signing and (2) disable Apple Mobile File In-
tegrity (AMFI), which prevents program with restricted en-
titlements from starting by setting the following as a boot
argument:6 amfi_get_out_of_my_way=1. An automated solu-
tion to this is introduced in Section 3.6.
4https://opensource.apple.com/source/Security/
5https://developer.apple.com/documentation/security/
1398306-secitemcopymatching
6https://www.theiphonewiki.com/wiki/
AppleMobileFileIntegrity
3.6 Automated Reverse Engineering Toolkit
Automated reverse engineering for generic protocols is a hard
problem. However, we have identiﬁed several possibilities
for automating parts of the process on Apple’s platforms to
make our work more sustainable. We release a toolkit that
covers all vantage points mentioned in this section with the
publication of the paper (see the “Availability” section at
the end of this paper). In particular, the toolkit allows to
(1) discover interesting daemons/frameworks and functions
based on a keyword, (2) extract the plaintext messages used
by rapportd that are exchanged by Continuity services, and
(3) print any secrets stored in the system keychain that are
used by a particular daemon. We elaborate on the individual
tools in the following.
3.6.1
Identifying Interesting Binaries
Our toolkit contains a Python script that scans system log
messages (Section 3.3) for speciﬁed keywords and lists the
emitting daemons, frameworks, and subsystems. The tool
can then search those binaries and their dependencies (frame-
works and libraries) recursively for the same or additional
strings and symbols. Finally, the user receives an initial can-
didate list of binaries and functions to analyze further.
3.6.2 Extracting Plaintext Continuity Messages
Our analysis has shown that many Continuity services use
a secure transport service offered by rapportd. In analogy
to an HTTP MitM proxy, our toolkit allows us to extract
exchanged plaintext messages before they are encrypted (out-
going) and after they are decrypted (incoming). Internally, the
tool attaches the lldb debugger to rapportd and uses break-
points at the respective send and receive functions to print all
exchanged messages.
3.6.3 Printing Keychain Items
Continuity services use different security mechanisms to pro-