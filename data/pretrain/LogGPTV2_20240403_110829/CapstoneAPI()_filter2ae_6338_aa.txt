# Capstone反汇编引擎数据类型及API分析及示例(三)
[Capstone反汇编引擎数据类型及API分析及示例(一)](https://xz.aliyun.com/t/5753
"Capstone反汇编引擎数据类型及API分析及示例\(一\)")  
[Capstone反汇编引擎数据类型及API分析及示例(二)](https://xz.aliyun.com/t/5761
"Capstone反汇编引擎数据类型及API分析及示例\(二\)")
## API分析
### cs_open
`cs_err CAPSTONE_API cs_open(cs_arch arch, cs_mode mode, csh *handle);`
初始化cs句柄
参数  
arch: 架构类型 (CS _ARCH_ _)  
mode: 硬件模式. CS _MODE__ 在cs_mode数据类型中可查  
handle: 指向句柄, 返回时更新  
return: 创建成功返回CS_ERR_OK，否则返回cs_err枚举中对应的错误信息
实现代码
    cs_err CAPSTONE_API cs_open(cs_arch arch, cs_mode mode, csh *handle)
    {
        cs_err err;
        struct cs_struct *ud;
        if (!cs_mem_malloc || !cs_mem_calloc || !cs_mem_realloc || !cs_mem_free || !cs_vsnprintf)
            // Error: 使用cs_open()前, 必须使用cs_option(CS_OPT_MEM)进行动态内存管理的初始化
            return CS_ERR_MEMSETUP;
        if (arch errnum = CS_ERR_OK;
            ud->arch = arch;
            ud->mode = mode;
            // 默认情况指令不打开detail模式
            ud->detail = CS_OPT_OFF;
            // 默认skipdata设置
            ud->skipdata_setup.mnemonic = SKIPDATA_MNEM;
            err = cs_arch_init[ud->arch](ud);
            if (err) {
                cs_mem_free(ud);
                *handle = 0;
                return err;
            }
            *handle = (uintptr_t)ud;
            return CS_ERR_OK;
        } else {
            *handle = 0;
            return CS_ERR_ARCH;
        }
    }
其中，cs_struct结构体包含更多细节设定，如下
    struct cs_struct {
        cs_arch arch;
        cs_mode mode;
        Printer_t printer;  // 打印asm
        void *printer_info; // 打印信息
        Disasm_t disasm;    // 反编译
        void *getinsn_info; // 打印辅助信息
        GetName_t reg_name;
        GetName_t insn_name;
        GetName_t group_name;
        GetID_t insn_id;
        PostPrinter_t post_printer;
        cs_err errnum;
        ARM_ITStatus ITBlock;   // ARM特殊选项
        cs_opt_value detail, imm_unsigned;
        int syntax; //ARM, Mips & PPC等架构的基本asm语法打印
        bool doing_mem; // 在InstPrinter代码中处理内存操作数
        unsigned short *insn_cache; //为mapping.c建立缓存索引
        GetRegisterName_t get_regname;
        bool skipdata;  // 如果反编译时要跳过数据，该项设置为True
        uint8_t skipdata_size;  //要跳过bytes的数量
        cs_opt_skipdata skipdata_setup; // 自定义skipdata设置
        const uint8_t *regsize_map; //映射register大小 (目前仅支持x86)
        GetRegisterAccess_t reg_access;
        struct insn_mnem *mnem_list;    // 自定义指令助记符的链接list
    };
示例(创建一个x86_64类型的cs句柄)：  
`cs_open(CS_ARCH_X86, CS_MODE_64, &handle)`
### cs_close
`cs_err CAPSTONE_API cs_close(csh *handle);`
释放句柄  
参数  
handle: 指向一个cs_open()打开的句柄  
return: 释放成功返回CS_ERR_OK,否则返回cs_err枚举的错误信息
实现代码，可以看出释放句柄实质为将句柄值设置为0
    cs_err CAPSTONE_API cs_close(csh *handle)
    {
        struct cs_struct *ud;
        struct insn_mnem *next, *tmp;
        if (*handle == 0)
            // 句柄不可用
            return CS_ERR_CSH;
        ud = (struct cs_struct *)(*handle);
        if (ud->printer_info)
            cs_mem_free(ud->printer_info);
        // 释放自定义助记符的链接list
        tmp = ud->mnem_list;
        while(tmp) {
            next = tmp->next;
            cs_mem_free(tmp);
            tmp = next;
        }
        cs_mem_free(ud->insn_cache);
        memset(ud, 0, sizeof(*ud));
        cs_mem_free(ud);
        // handle值设置为0，保证这个句柄在cs_close()释放后不可使用
        *handle = 0;
        return CS_ERR_OK;
    }
示例：  
`cs_close(&handle);`
### cs_option
`cs_err CAPSTONE_API cs_option(csh handle, cs_opt_type type, size_t value);`
反编译引擎的运行时选项
handle: cs_open()打开的句柄  
type: 设置选项的类型  
value: 与type对应的选项值  
return: 设置成功返回CS_ERR_OK,否则返回cs_err枚举的错误信息
注意: 在CS_OPT_MEM的情况下，handle可以是任何值，因此cs_option(handle, CS_OPT_MEM,
value)必须在cs_open()之前被调用
实现代码
    cs_err CAPSTONE_API cs_option(csh ud, cs_opt_type type, size_t value)
    {
        struct cs_struct *handle;
        cs_opt_mnem *opt;
        // 支持在所有API前支持 (even cs_open())
        if (type == CS_OPT_MEM) {
            cs_opt_mem *mem = (cs_opt_mem *)value;
            cs_mem_malloc = mem->malloc;
            cs_mem_calloc = mem->calloc;
            cs_mem_realloc = mem->realloc;
            cs_mem_free = mem->free;
            cs_vsnprintf = mem->vsnprintf;
            return CS_ERR_OK;
        }
        handle = (struct cs_struct *)(uintptr_t)ud;
        if (!handle)
            return CS_ERR_CSH;
        switch(type) {
            default:
                break;
            case CS_OPT_UNSIGNED:
                handle->imm_unsigned = (cs_opt_value)value;
                return CS_ERR_OK;
            case CS_OPT_DETAIL:
                handle->detail = (cs_opt_value)value;
                return CS_ERR_OK;
            case CS_OPT_SKIPDATA:
                handle->skipdata = (value == CS_OPT_ON);
                if (handle->skipdata) {
                    if (handle->skipdata_size == 0) {
                        handle->skipdata_size = skipdata_size(handle);
                    }
                }
                return CS_ERR_OK;
            case CS_OPT_SKIPDATA_SETUP:
                if (value)
                    handle->skipdata_setup = *((cs_opt_skipdata *)value);
                return CS_ERR_OK;
            case CS_OPT_MNEMONIC:
                opt = (cs_opt_mnem *)value;
                if (opt->id) {
                    if (opt->mnemonic) {
                        struct insn_mnem *tmp;
                        // 添加新指令或替换现有指令
                        // 查看当前insn释放在list中
                        tmp = handle->mnem_list;
                        while(tmp) {
                            if (tmp->insn.id == opt->id) {
                                // f找到指令，替换助记符
                                (void)strncpy(tmp->insn.mnemonic, opt->mnemonic, sizeof(tmp->insn.mnemonic) - 1);
                                tmp->insn.mnemonic[sizeof(tmp->insn.mnemonic) - 1] = '\0';
                                break;
                            }
                            tmp = tmp->next;
                        }
                        // 2. 如果没有就添加这条指令
                        if (!tmp) {
                            tmp = cs_mem_malloc(sizeof(*tmp));
                            tmp->insn.id = opt->id;
                            (void)strncpy(tmp->insn.mnemonic, opt->mnemonic, sizeof(tmp->insn.mnemonic) - 1);
                            tmp->insn.mnemonic[sizeof(tmp->insn.mnemonic) - 1] = '\0';
                            // 新指令放在list最前面
                            tmp->next = handle->mnem_list;
                            handle->mnem_list = tmp;
                        }
                        return CS_ERR_OK;
                    } else {
                        struct insn_mnem *prev, *tmp;
                        tmp = handle->mnem_list;
                        prev = tmp;
                        while(tmp) {
                            if (tmp->insn.id == opt->id) {
                                // 删除指令
                                if (tmp == prev) {
                                    handle->mnem_list = tmp->next;
                                } else {
                                    prev->next = tmp->next;
                                }
                                cs_mem_free(tmp);
                                break;
                            }
                            prev = tmp;
                            tmp = tmp->next;
                        }
                    }
                }
                return CS_ERR_OK;
            case CS_OPT_MODE:
                // 验证所请求的模式是否有效
                if (value & cs_arch_disallowed_mode_mask[handle->arch]) {
                    return CS_ERR_OPTION;
                }
                break;
        }
        return cs_arch_option[handle->arch](handle, type, value);
    }
示例，更改反汇编后显示的语法：
    #include 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    #define CODE "\x55\x48\x8b\x05\xb8\x13\x00\x00"
    int main(void)
    {
        csh handle;
        cs_insn* insn;
        size_t count;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
            printf("ERROR: Failed to initialize engine!\n");
            return -1;
        }
        cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);  // 以AT&T语法显示
        count = cs_disasm(handle, (unsigned char*)CODE, sizeof(CODE) - 1, 0x1000, 0, &insn);
        if (count) {
            size_t j;
            for (j = 0; j 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    #define CODE "\x55\x48\x8b\x05\xb8\x13\x00\x00"
    int main(void)
    {
        csh handle = 0;
        cs_insn* insn;
        size_t count;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
            printf("ERROR: Failed to initialize engine!\n");
            return -1;
        }
        cs_close(&handle);