= (xi, xi +1), [y]A
i +1), [y′]A
= (y′
i, y′
(1) Upon receiving shares from the honest parties,
functionality Fmult computes x, y and
the ideal
= (yi, yi +1). Let [x′]A
[x]A
i
(x′
i, x′
i +1) be the shares submitted
by the adversary. The ideal functionality computes d =
(xiyi + xiyi +1 + xi +1yi) − (x′
i +1y′
iy′
i)
(2) Fmult hands[x]A
, and d to the adversary/simulator
i
S.
(3) The functionality Fmult computes z = xy + d and sam-
ples zi +1 uniformly at random, then it defines zi +2 =
z − (zi + zi +1).
(4) The ideal functionality Fmult hands each party Pj its
share [z]A
j
iy′
+ x′
i +1 + x′
= {zj, zj +1}.
,[y]A
i
i
Figure 15: Multiplication up to an additive attack
FUNCTIONALITY FCheckZero - Checking equality to 0
Input: Parties hold replicated shares [x]
Functionality: Upon receiving the shares from the parties, the
functionality reconstruct x. Then:
• If x = 0, the functionality sends abort = 0 to the parties.
• If x (cid:44) 0, with probability 1
|F | the functionality sends
|F | it
abort = 0 to the parties, and with probability 1 − 1
sends abort = 1 to the parties.
Figure 16: Checking Equality to 0.
FUNCTIONALITY Finput - Sharing of Inputs
Let Pj be the corrupted party.
(1) Functionality Finput receives inputs v1, ..., vM ∈ F
from the parties. For every i = 1, ..., M, Finput also
receives from S the shares v j
of the corrupted parties
i
for the ith input.
(v j
, v j +2
i , v j +1
at random and vi = v j
i
For every i = 1, ..., n, Finput sends Pj its output shares
[vi]A
(2) For every i = 1, ..., M, Finput computes all shares
is sampled uniformly
+ v j +2
) such that v j +1
i
+ v j +1
= {v j
i , v j +1
}.
.
i
i
i
i
j
i
Figure 17: Sharing inputs
Christopher Kruegel:, editors, ACM CCS 15, pages 591–602. ACM Press, October
2015.
[31] Moni Naor and Omer Reingold. Number-theoretic constructions of efficient
pseudo-random functions. In 38th FOCS, pages 458–467. IEEE Computer Society
Press, October 1997.
[32] Benny Pinkas, Thomas Schneider, Oleksandr Tkachenko, and Avishay Yanai.
Efficient circuit-based psi with linear communication.
In EUROCRYPT 2019,
volume 11478 of Advances in Cryptology, pages 122–153. Springer, 2019.
[33] Benny Pinkas, Thomas Schneider, Christian Weinert, and Udi Wieder. Efficient
circuit-based PSI via cuckoo hashing. In Jesper Buus Nielsen and Vincent Rijmen,
editors, EUROCRYPT 2018, Part III, volume 10822 of LNCS, pages 125–157. Springer,
Heidelberg, April / May 2018.
[34] Shrisha Rao, Mainak Chatterjee, Prasad Jayanti, C. Siva Ram Murthy, and San-
joy Kumar Saha, editors. Distributed Computing and Networking, 9th International
Conference, ICDCN 2008, Kolkata, India, January 5-8, 2008, volume 4904 of Lecture
Notes in Computer Science. Springer, 2008.
[35] Peter Rindal and Mike Rosulek. Improved private set intersection against ma-
licious adversaries. In Jean-Sébastien Coron and Jesper Buus Nielsen, editors,
EUROCRYPT 2017, Part I, volume 10210 of LNCS, pages 235–259. Springer, Hei-
delberg, April / May 2017.
[36] Peter Rindal and Mike Rosulek. Malicious-secure private set intersection via dual
execution. In Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan
Xu, editors, ACM CCS 17, pages 1229–1242. ACM Press, October / November
2017.
[37] Tamir Tassa. Generalized oblivious transfer by secret sharing. Des. Codes Cryp-
togr., 58(1):11–21, 2011.
A ASSUMED IDEAL FUNCTIONALITIES
FUNCTIONALITY Frand - Generating Random
Replicated Arithmetic Shares
Let Pi be the malicious adversary. Upon receiving ri from
Pi , the ideal functionality Frand chooses a random r ∈ F and
samples ri +1, ri +2 such that r = ri + ri +1 + ri +2. Frand gives
{rj, rj +1} to Pj .
Figure 13: Generating shares of a random field element
FUNCTIONALITY Fcoin - Generating Random Value
The ideal functionality Fcoin chooses a random r ∈ F then gives
r to all the parties.
Figure 14: Sample a random field element
B SECURITY PROOFS
Theorem B.1. Assuming (com, decom) is a computationally hid-
ing, statistically binding commitment scheme, and that F is a secure
PRP, the protocol ΠPSI-CA for computing the cardinality of the set
intersection (Figure 5) securely realizes the ideal functionality FPSI-CA
with abort (Figure 3), under a single malicious corruption.
Proof. We first describe a simulator for the cases where P1 is
corrupt. The simulator for P2 is identical, so we omit the description
and corresponding claim. Without loss of generality, we assume the
malicious party outputs his entire view in the protocol. Simulated
to Fcoin. After receiving encrypted inputs from P1, if there is
no duplication in the set of encrypted inputs, S inverts the
and outputs whatever P1 outputs. He submits X ′ to F, and
P3.
messages appear with ‘(cid:101)’ above them.
(1)(cid:101)k1,(cid:101)k2,(cid:101)τ: S and P1 sample random PRP keys(cid:101)k1,(cid:101)k2 with a call
PRP using(cid:101)k1, recovering input set X ′, otherwise, S aborts
receives(cid:101)τ = |X ′ ∩ Y|. S hands(cid:101)τ to P1 as the message from
(2)(cid:101)p1,(cid:101)p2,(cid:101)c1,(cid:101)c2: S simulates the output of Fcoin, determining
two random polynomials,(cid:101)p1 and(cid:101)p2, of degree(z−1) and(2n−
V1 = {F((cid:101)k2, F((cid:101)k1, x)) | x ∈ X ′} and V2 = {p2(F((cid:101)k1, x)) |
(cid:101)s1 =(cid:101)p1(0),(cid:101)s2 =(cid:101)p2(0). Otherwise, he sets(cid:101)s1 = 0,(cid:101)s2 = 0. S
computes commitments to these values:(cid:101)c1 = com((cid:101)s1), and
(cid:101)c2 = com((cid:101)s2). He hands P1 the commitments as the messages
z − 1) respectively. After receiving V1 and V2 from P1 (step
6), S verifies whether P1 has generated these sets correctly:
x ∈ X ′}. If these have been generated correctly, S computes
from P3.
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2416(3)(cid:101)s1,(cid:101)s2: S receives k2, p1, p2 from P1. If pi (cid:44)(cid:101)pi for either i, or
k2 (cid:44)(cid:101)k2, S sends abort to P1 on behalf of P3 and outputs
commitments to P1:(cid:101)s1 = decom((cid:101)c1) and(cid:101)s2 = decom((cid:101)c2),
the simulated messages. Otherwise, S opens the previous
and sends these to P1.
(4) S outputs the simulated messages.
Claim 1. Assuming (com, decom) is a computationally hiding
commitment scheme, then, for the simulator S described above and
interacting with the functionality FPSI-CA on behalf of P1,
(cid:8)realπPSI-CA,A(z) (X , Y , κ)(cid:9)
(cid:8)idealFPSI-CA,S(z)(X , Y , κ)(cid:9)
z∈{0,1}∗,κ∈N
z∈{0,1}∗,κ∈N
c≡
=
=
z∈{0,1}∗,κ∈N
z∈{0,1}∗,κ∈N
{k1, k2, τ , p1, p2, com(s1), com(s2), s1, s2}
Proof. Case 0: First, we consider the case where P1 executes
the protocol honestly. Because the functionality is deterministic,
it suffices to consider the view of the adversary in both worlds.
In place of analyzing the joint-distribution of his view with the
honest output. We consider the real and ideal world distributions
to contain only P1’s view:
(cid:8)realπPSI-CA,A(z) (X , Y , κ)(cid:9)
(cid:8)idealFPSI-CA,S(z)(X , Y , κ)(cid:9)
{(cid:101)k1,(cid:101)k2,(cid:101)τ ,(cid:101)p1,(cid:101)p2, com((cid:101)s1), com((cid:101)s2),(cid:101)s1,(cid:101)s2}
messages. The simulation,(cid:101)k1,(cid:101)k2,(cid:101)p1,(cid:101)p2 is therefore perfect. τ and
(cid:101)τ are fully determined by the first message of P1, and the input
using the PRP key, τ and(cid:101)τ are identically distributed. In Step 6,
thus si = pi(0) and(cid:101)si =(cid:101)pi(0) are identically distributed. As our
of the honest P2. Since S correctly extracts P1’s input in Step 2
the two polynomials p1 and p2 are sampled uniformly at random,
The security of Fcoin ensures that k1, k2, p1, and p2 are distributed
uniformly at random, and that they are independent from other
function is a deterministic one, the indistinguishability between
the two distributions is reduced to the indistinguishability of the
commitment messages, which is true due to the property of the
commitment scheme. Thus, the joint distributions in both worlds
are computationally indistinguishable when P1 is honest.
identically distributed.
Case 1: If P1 sends duplicated ciphertexts in Step 4, abort happens
in both the real and ideal worlds. The joint distributions in the real
and ideal worlds are {k1, k2} and {(cid:101)k1,(cid:101)k2} respectively. They are
distribution in the ideal world is {(cid:101)k1,(cid:101)k2,(cid:101)τ ,(cid:101)p1,(cid:101)p2, com(0), com(0),⊥
Case 2: If P1 deviates in Step 6, in the ideal world, this will be
detected immediately and the simulator sends abort at Step 11 or 12,
as the simulator knows the values of p1, p2, k1, k2, and X. The joint
}. In the real world, P1 will be caught by P3 in Step 9 or Step 12,
and P3 will abort at Step 12. Note that in Step 12, P3 verifies the
correctness of the messages sent to him in Steps 6 and 7 by P1 and
P2, using k2, p1, and p2. The joint distribution in the real world
is {k1, k2, τ , p1, p2, com(s1), com(s2),⊥}. The indistinguishability of
these distributions again reduces to the hiding property of the
commitment scheme.
Case 3: If P1 deviates in Step 11 by sending the wrong k2, p1,
or p2 to P3. This will be detected in both the ideal and the real
worlds. The joint distributions in the ideal and real world are
{(cid:101)k1,(cid:101)k2,(cid:101)τ , com((cid:101)s1), com((cid:101)s2),⊥} and {k1, k2, τ , com(s1), com(s2),⊥}
respectively. Follow the same arguments in case 0, the two joint
distributions are computationally indistinguishable.
These cases cover all possible behaviors of P1, proving that the
adversarial views are indistinguishable in the two worlds.
We now describe a simulator for P3.
section. It then simulates the first messages from P1 and P2
by choosing random strings for each encoding, subject to the
constraint that the intersection is of appropriate size. Let the
both P1 and P2. If P3 sends different values to P1 and P2, S
aborts and outputs the partial view. Otherwise, S chooses
Let the polynomials be p1 and p2 respectively. S computes
s1 = p1(0) and s2 = p2(0). S samples a random key k2 and
(1) (cid:101)S,(cid:101)T : The simulator S queries F to learn the size of the inter-
messages be two sets(cid:101)S and(cid:101)T (from P1 and P2 respectively).
(2) (cid:101)V1,(cid:101)V2,(cid:101)W1,(cid:101)W2: S receives τ from P3, who sends the value to
two random polynomials of degree ((cid:101)τ − 1) and (2n −(cid:101)τ − 1).
computes the following messages:(cid:101)V1 ← {F(k2, ˆx) | ˆx ∈(cid:101)S},
(cid:101)V2 ← {p2(ˆx) | ˆx ∈(cid:101)S},(cid:101)W1 ← {F(k2, ˆy) ⊕ p1( ˆy) | ˆy ∈(cid:101)T}, and
(cid:101)W2 ← {p2( ˆy) | ˆy ∈(cid:101)T}. S hands the values to P3.
(3)(cid:101)k2,(cid:101)p1,(cid:101)p2: S receives two commitments from P3: com((cid:101)s1)
and com((cid:101)s2). S hands P3 duplicates of the key k2 and the
(4) If P3 aborts, or gives wrong decommitments to com((cid:101)s1) or
com((cid:101)s2), or(cid:101)s1 (cid:44) s1, or(cid:101)s2 (cid:44) s2, S submits abort to the ideal
polynomials p1, p2, simulating the messages from P1 and P2.
functionality, sends ⊥ to P3 on behalf of P1 and P2, and
outputs the simulated transcript.
Claim 2. Assuming F is a secure pseudorandom permutation,
and that (com, decom) is a statistically binding commitment scheme,
then, for simulator S corrupting party P3 as described above, and
interacting with the functionality FPSI-CA,
z∈{0,1}∗,κ∈N
(cid:8)realπPSI-CA,A(z) (X , Y , κ)(cid:9)
(cid:8)idealFPSI-CA,S(z)(X , Y , κ)(cid:9)
z∈{0,1}∗,κ∈N
c≡
=
z∈{0,1}∗,κ∈N
{(cid:98)X ,(cid:98)Y , V1, V2,W1,W2, k2, p1, p2}
{(cid:101)S,(cid:101)T ,(cid:101)V1,(cid:101)V2,(cid:101)W1,(cid:101)W2,(cid:101)k2,(cid:101)p1,(cid:101)p2}
Proof. Case 0: We first consider the case where P3 executes
the protocol honestly. Because the functionality is deterministic,
it suffices to consider the view of the adversary in both worlds,
in place of analyzing the joint-distribution of his view with the
honest output. We consider the real and ideal world distributions
to contain only P3’s view:
(cid:8)realπPSI-CA,A(z) (X , Y , κ)(cid:9)
(cid:8)idealFPSI-CA,S(z)(X , Y , κ)(cid:9)
distributions are identical: {V1, V2,W1,W2, k2, p1, p2 | (cid:98)X ,(cid:98)Y} and
{(cid:101)V1,(cid:101)V2,(cid:101)W1,(cid:101)W2,(cid:101)k2,(cid:101)p1,(cid:101)p2 | (cid:101)S,(cid:101)T}. This immediately gives a reduc-
Case 1: Assume P3 cheats in Step 4 by sending different(cid:101)τ to P1
distributions generated in the real and ideal world are {(cid:98)X ,(cid:98)Y ,⊥}
and {(cid:101)S,(cid:101)T ,⊥} respectively. They are identical.
tion from semi-honest security to the PRP: the simulation of the
semi-honest P1, beginning at Step 2, serves as a good reduction in
the indistinguishability game of the PRP.
and P2. Both parties immediately abort in both worlds. The joint
The reader can verify by inspection that the following two
z∈{0,1}∗,κ∈N
=
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2417Case 2: If P3 cheats in Step 4 by providing the same incorrect(cid:101)τ to
to this point in the real and ideal world are {(cid:98)X,(cid:98)Y,V1,V2,W1,W2,k2,p1,p2}
and {(cid:101)S,(cid:101)T ,(cid:101)V1,(cid:101)V2,(cid:101)W1,(cid:101)W2,(cid:101)k2,(cid:101)p1,(cid:101)p2} respectively. As argued in case 0,
P1 and P2, all parties continue up to Step 11, and the partial views up
12, if he decides to abort, then in both worlds the joint distributions
they are identically distributed. If P3 does not abort in Step 11 and
Step 12, assuming (com, decom) is statistically binding, P3 has at
these partial views are computationally indistinguishable. It re-
mains to argue about the output of the honest parties. Note that in
the ideal world, the honest parties output ⊥, as this deviation is al-
ways detected by S, who then tells the trusted party to abort. On the
other hand, in the hybrid-world, if P3 deviates in Step 4 by sending
both parties the wrong intersection size, τ (cid:44) |(cid:101)S ∩(cid:101)T |, he will not be
able to correctly interpolate both(cid:101)p1 and(cid:101)p2 in Step 9: if(cid:101)τ  |(cid:101)S ∩(cid:101)T |,
he will not be able to recover the value of(cid:101)p1(0). In Step 11 or Step
are {(cid:98)X,(cid:98)Y,V1,V2,W1,W2,k2,p1,p2, ⊥} and {(cid:101)S,(cid:101)T ,(cid:101)V1,(cid:101)V2,(cid:101)W1,(cid:101)W2,(cid:101)k2,(cid:101)p1,(cid:101)p2, ⊥},
most 1/|F| chance of successfully guessing p1(0) or p2(0), as(cid:101)p1(0)
and(cid:101)p2(0) are randomly distributed in F. If P3 guesses the wrong
if P3 guesses(cid:101)pi(0) correctly, the joint distributions are distinguish-
value, the joint distributions are identical in both worlds, as every
party aborts. (Note that the probability that P3 guesses these values
correctly when τ (cid:44) |X ∩ Y| is independent of his view.) However,
able: in the real world, this would go undetected, and the honest
parties might output some τ (cid:44) |X ∩ Y|. This is not possible in the
ideal world, and thus the simulator S fails to simulate P3’s behavior.
But, as argued above, this happens with probability 1/|F|.
Case 3: If P3 is honest in Step 4, but deviates at any other steps,