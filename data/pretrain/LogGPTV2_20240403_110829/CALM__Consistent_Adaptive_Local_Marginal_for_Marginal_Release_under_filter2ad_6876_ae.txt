2, 262
2, 262
2, 262
2, 262
2, 262
2, 28
2, 28
2, 28
2, 28
2, 28
2, 28
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
3, 56
3, 56
3, 56
3, 56
3, 56
2, 28
3, 262
2, 120
2, 120
2, 120
2, 120
2, 120
2, 262
2, 262
2, 262
2, 262
2, 262
2, 262
2, 28
2, 28
2, 28
2, 28
2, 28
2, 28
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
3, 56
4, 70
3, 56
3, 56
3, 56
3, 56
3, 262
3, 262
3, 262
2, 120
2, 120
2, 120
2, 262
2, 262
2, 262
2, 262
2, 262
2, 262
3, 56
3, 56
2, 28
2, 28
2, 28
2, 28
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
3, 56
4, 70
4, 70
4, 70
3, 56
3, 56
4, 140
3, 262
3, 262
3, 262
3, 262
3, 262
3, 262
3, 262
2, 262
2, 262
2, 262
2, 262
3, 56
3, 56
3, 56
3, 56
2, 28
2, 28
3, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
3, 56
4, 70
5, 56
4, 70
4, 70
4, 70
4, 140
4, 262
4, 262
3, 262
3, 262
3, 262
3, 262
3, 262
3, 262
3, 262
2, 262
2, 262
4, 14
3, 56
3, 56
3, 56
3, 56
3, 56
3, 65
3, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
2, 65
4, 14
4, 70
5, 56
5, 56
5, 56
4, 70
4, 140
4, 262
4, 262
4, 262
4, 262
3, 262
4, 262
3, 262
3, 262
3, 262
3, 262
3, 262
Table 2: The setting of ℓ and m in the runtime, calculated by Algorithm 1. Each cell is of the format (ℓ, m), and each row
represents the values for the same d, k, and n setting.
counts into 0 while decreasing the counts for its neighbors to main-
tain the overall count constant. Specifically, given an k-way mar-
ginal table TA, for any v ∈ VA with TA(v) < −θ, we set the entry
to 0 and subtract |c |/h from each of its h neighboring cells, defined
as the cells obtained by changing one of the attributes’ category to
other categories, and h is determined by the number of categories
of each attribute in A. However, this procedure may make the count
of other cells to be c < −θ, the procedure iterates until no cell has
count c < −θ. As each iteration distributes a negative count into h
neighbors, it is guaranteed to terminate quickly.
Applying the ripple non-negativity step to the marginals, how-
ever, may make them inconsistent. To resolve this problem, we run
the consistency step after the non-negativity step several times.
Reconstructing k-way Marginals After the consisting phase,
when all the attributes in A are łcoveredž by at least one marginal
Ai , i.e. A ⊆ Ai , this step is trivial. We can construct TA by summing
over corresponding entries in TAi .
answers are to be stored, the same amount of space should be
allocated for each method.
For the memory consumption, the CALM method needs to main-
tain the m ℓ-way marginal tables. For FC, the full contingency table
is maintained for counting reports for each possible value, requiring
Θ (cid:16)2d(cid:17) storage. Note that one can sacrifice computation for storage
by scanning through each user’s report multiple times and directly
construct the k-way marginal tables. But this will make the compu-
tation even more overwhelming. For FT, one can maintain do the
similar: either maintain all the 2k · (cid:0)d
s =0 (cid:0)d
k
k(cid:1) coefficients or calculate the
s(cid:1) marginals on time. Finally, for EM, a storage to count all
possible intermediate results are needed.
Communication Overhead: The communication from each user
to the server is the same as the report size. Note that since both
FT and EM uses GRR as FO. The report in FT is only one bit, plus
the index, which can be represented by d bits; and the report for
EM is one bit for each of the d dimensions. Note that one can
use OLH, presented in [37], instead of OUE. The OLH protocol is
equivalent to OUE, with the communication overhead reduced to
almost constant. But the disadvantage is that the server needs to
do extra computation (i.e., evaluate hash functions) to retrieve the
full report.
If A is not fully covered by any marginal Ai , we compute the
k-way marginal table as the following optimization problem:
maximize
subject to
−v ∈VA TA(v) · log (TA(v))
∀
TA(v) ≥ 0
∀
v ∈VA
∀
Ai
v ∈VAi ∩A
TAi (v) = TA(v)
Since all marginals are consistent, the value should be the same
for all Ai . The above optimization problem can be solved by an
off-the-shelf convex optimization tool.
A.4 Complexity Analysis
We give the time complexity, space complexity, and communica-
tion cost of different methods in Table 3. For ease of exposition,
we assume all attributes are binary. Note that this can be easily
converted to non-binary cases.
Time
Space
Comm
FC
CALM Θ (cid:16)n · 2ℓ(cid:17) or Θ (cid:16)n + m · 2ℓ(cid:17)
Θ (cid:16)n · 2d(cid:17) or Θ (cid:16)n + 2d(cid:17)
AM Θ (cid:16)n · 2k(cid:17) or Θ (cid:16)n + (cid:0)d
k(cid:1) · 2k(cid:17)
k(cid:1) · 22k(cid:17)
s(cid:1)2s(cid:17)
s =0 (cid:0)d
Θ (cid:16)n + (cid:0)d
Θ (cid:16)n ·k
EM
FT
Θ (cid:16)m · 2ℓ(cid:17)
Θ (cid:16)2ℓ(cid:17)
Θ (cid:16)2d(cid:17)
Θ (cid:16)2d(cid:17)
Θ (cid:16)2k(cid:17)
Θ (cid:16)2k(cid:17)
Θ (cid:16)k
s(cid:1)(cid:17)
s =0 (cid:0)d
Θ (cid:16)k
s(cid:1)2s(cid:17) Θ (d)
s =0 (cid:0)d
Θ (d)
Table 3: Comparison of complexity for different methods.
Server-side computation, server-side storage, and client-
server communication are listed. All attributes are assumed
to be binary.
Time Complexity: CALM is dominated by processing users’ re-
similar arguments also hold for FC and AM methods, where user
ports, which takes Θ (cid:16)2ℓ(cid:17) for each user, and Θ (cid:16)n · 2ℓ(cid:17) in total. The
reports are basically vectors of size Θ (cid:16)2d(cid:17) and Θ (cid:16)2k(cid:17), respectively.
Note that when ϵ is small and GRR is used in the above three meth-
ods, each user’s report is one value (instead of a vector); thus one
only needs to aggregate the reports, making the running time to
k(cid:1) · 2k(cid:17) for CALM, FC, and
AM, respectively. For FT, since GRR is always used, the processing
time is in the order of n. But the calculation of Equation (9) takes
Θ (cid:16)n + m · 2ℓ(cid:17) , Θ (cid:16)n + 2d(cid:17), and Θ (cid:16)n + (cid:0)d
Θ (cid:16)2k(cid:17) (for enumerating α). Therefore, to build (cid:0)n
k(cid:1) marginal tables,
each with 2k values, the total computation takes Θ (cid:16)n + 22k · (cid:0)d
k(cid:1)(cid:17).
For EM, the running time is dominated by the counting operation.
Specifically, the method first counts the number of users that re-
ports a particular value for any single attribute, and then for any
combination of values for any pair of attributes, and so on. There
one should count all of them for each user, making the resulting
s(cid:1)2s possible values that are needed to be counted; and
s =0 (cid:0)d
are k
running time Θ (cid:16)k
s =0 (cid:0)d
s(cid:1)2s(cid:17).
Space Complexity: We measure the memory needed assuming
that all inputs and outputs are discarded. If the user reports and