discrepancy δ between the Veriﬁer and the Transmitter and
the one-way frame traverse time τ can then be estimated as
follows (e.g., [22], [25], [27]):
δ = (t2 − t1) − (t4 − t3)
;
τ = (t2 − t1) + (t4 − t3)
2
.
(11)
2
The Transmitter and the Veriﬁer face a subtle difﬁculty
in time synchronization due to the need of authentication:
The timestamps t1 and t3 should be the actual
transmis-
sion time of the request and reply frames; however,
the
MIC computation requires the timestamp value before the
actual transmission. Fortunately, a solution has been previously
developed for this problem [25]. It is observed that in the
physical layer protocol component, all computation is deter-
ministic if the wireless channel is available for transmission.
Thus, we can estimate how much time the deterministic
processing will take before (the SFD ﬁeld of) the frame is
transmitted and thus determine the transmission time before
computing the frame MIC. If the frame transmission does
not happen due to channel unavailability,
the estimation,
the computation of the MIC, and the transmission can be
repeated.
To defend against potential frame repeater and physical
layer symbol repeater attacks, we use the design given in
Section V-B. That is, the Transmitter pads the reply frame
payload so that after all necessary components of the frame
are included,
the minimum
frame length Lmin. The Transmitter uses the MIC of the entire
frame as the link signature training sequence, and places it at
a random offset in the frame payload. Finally, the Transmitter
places the random offset at the end of the frame.
the frame length is at
least
Fig. 6. Training phase protocol.
Figure 6 shows the training phase protocol between the
Transmitter and the Veriﬁer.
1) Training Request: The Veriﬁer sends the ﬁrst training
request frame to the Transmitter, which includes the frame
header, the transmission time t1 of this frame, and the frame
MIC that covers the entire frame (excluding the preambles).
Upon receiving of
the Transmitter
immediately records the receiving time t2 of the frame, and
authenticates the request frame by verifying the MIC.
the request
frame,
We can also ﬁlter some bogus requests before verifying
the MIC. Though a clock discrepancy between the Transmitter
and the Veriﬁer is expected, there is usually a maximum clock
discrepancy δmax. If (t2 + δmax − t1) is too large, it is likely
that the request frame is a replay of a previous request frame,
and should be discarded without veriﬁcation.
2) Training Reply: Upon verifying an incoming training
request frame, the Transmitter should send back a training
reply frame. The Transmitter should include time t2 and
the actual transmission time t3 of the reply frame in the
frame. The Transmitter also pads the frame payload to at
least the minimum frame length Lmin and randomly selects
an offset P to place the training sequence as discussed earlier.
The Transmitter then leaves a placeholder (e.g., all 0’s) in
place of the training sequence and computes the frame MIC
using the shared key K . Finally, the Transmitter places the
frame MIC as the training sequence x in the reply frame and
sends it over the air.
Once the Veriﬁer receives the training reply frame, the
Veriﬁer ﬁrst computes the clock discrepancy δ and the one-
way transmission time τ according to Equation (11). If τ is
greater than a threshold τmax, which is the maximum possible
direct transmission time, the Veriﬁer should consider the reply
frame as possibly forwarded by the attacker and discard it.
Otherwise, the Veriﬁer locates the frame MIC by following
the offset P at the end of the frame, authenticates the frame
MIC using the shared key K , and uses the frame MIC, which
is also the training sequence x, to extract the link signature.
The Veriﬁer may run the training phase protocol several times
to get a better quality link signature. As a result, the Veriﬁer
obtains the valid link signature to perform physical layer
authentication of future frames from the Transmitter.
D. Operational Phase
Once the Veriﬁer obtains the clock discrepancy and the valid
link signature from the Transmitter, the two nodes can go
into the operational phase, during which the Veriﬁer can use
this link signature to verify frames that require physical layer
authentication.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:51:05 UTC from IEEE Xplore.  Restrictions apply. 
FANG et al.: MIMICRY ATTACKS AGAINST WIRELESS LINK SIGNATURE AND NEW DEFENSE
1523
1) Transmitter: To defend against
the threats discussed
in Section V-A, the Transmitter follows the design shown
in Figure 5. Speciﬁcally, the Transmitter randomly selects an
offset in the frame payload to include the ﬁeld for the training
sequence.1 The Transmitter also includes the transmission
time ts, places the offset P at the end of the frame, and
computes the frame MIC using the shared secrete key K,
with a placeholder (e.g., all 0’s) for the training sequence.
The Transmitter then uses the frame MIC as the training
sequence x, puts it in the frame, and sends the frame over
the air. Similar to the training phase, the Transmitter estimates
the frame transmission ts based on the current time and the
estimated duration for the deterministic MIC computation.
2) Veriﬁer: When the Veriﬁer receives the frame, it immedi-
ately records the receiving time tr . The Veriﬁer then retrieves
the frame transmission time ts from the received frame and
estimates the frame traverse time τ = ts − tr − δ, where
δ is the clock discrepancy between the Veriﬁer and the
Transmitter learned in the training phase. If τ is greater than
the threshold τmax, the maximum possible direct transmission
time, the Veriﬁer should consider the frame possibly forwarded
by the attacker and discard it. Otherwise, the Veriﬁer locates
the frame MIC by using the offset P at the end of the frame,
veriﬁes the frame MIC using the shared key K , and then uses
the frame MIC as the training sequence to extract the link
signature. Finally, the Veriﬁer compares this link signature
with the one derived during the training phase. The frame
is accepted if this link signature does not deviate from the
valid one learned in the training phase. Otherwise, the frame
is considered forged and discarded.
E. Security Analysis
Now let us examine the ability of the time-synched link
signature to defend against the malicious threats.
First of all, the time-synched link signature uses a training
sequence authenticated with a shared secret key only known
to the Transmitter and the Veriﬁer, and the training sequence
changes from frame to frame due to the involvement of the
timestamp in the computation of the training sequence. Thus,
the training sequence is authenticated, dynamic, and unpre-
dictable. This effectively prevents the attacker from forging
frames with training sequences of its choice. The only choice
left for the attacker is to reuse and manipulate valid frames
from the Transmitter.
The use of random offset for the training sequence in
the frame payload forces the attacker to wait for the end
of the frame transmission to understand where the training
sequence is located in the frame. As a result, the attacker
cannot launch physical layer symbol repeater attacks and at the
same time manipulate the training sequence correctly to bypass
link signature veriﬁcation. The attacker may still perform the
frame repeater attack. However, due to the enforcement of
the minimum frame length, a frame forwarded by a frame
1Note that the training sequence is necessary for the Veriﬁer to extract the
link signature. It is used in the operational phase even though its name has
“training” in it.
repeater will introduce at least the amount of delay caused by
the receiving of the frame, which is detectable by the Veriﬁer.
The attacker may launch a probabilistic mimicry attack by
randomly guessing the location of the training sequence and
forging the frame symbols accordingly. Indeed, the attacker
may also try to overestimate the length of the training sequence
(cid:6)
and perform the forgery. If the assumed training sequence y
t
is a superset of the actual one yt (i.e., yt
is a subsequence
(cid:6)
of y
t ), due to the linear property of Equation (3), the forged
symbols ˆx
a will also include ˆxa as a subsequence. This will
(cid:6)
allow the attacker’s symbols to be accepted by the receiver.
However, the attacker cannot delay the transmission of a frame
for Lmin or more; otherwise, its interference will be detected.
This means that the probability for the attacker to succeed
is at most p = Lmin−|x|+1
F−|x|+1 when Lmin is greater than or
equal |x|, where |x| and F are the length of the training
sequence and the frame payload, respectively. When Lmin is
less than |x|, the probability of a successful mimicry attack
degrades to 0. For example, in a 54Mbps 802.11g wireless
if we can achieve 2.96μs precision in the time
network,
synchronization and measurement error (i.e., eall = 2.96μs
and Lmin = 159.84 bits) and use HMAC-SHA1 to generate
the training sequence (i.e., |x| = 160 bits), the probabilistic
mimicry attack is guaranteed to fail.
Nevertheless, the probabilistic mimicry attack does increase
the requirement for time synchronization. In other words,
the Transmitter and the Veriﬁer need to obtain ﬁne-grained
time synchronization so that
the success probability of a
probabilistic mimicry attack becomes negligible.
VI. EXPERIMENTAL EVALUATION
We have implemented the link signature scheme in [5],
the mimicry attack, and the newly proposed time-synched
link signature. We have also implemented the frame repeater
attack, which can be used along with the mimicry attack.
Our prototype uses USRP2 [13], which are equipped
with AD and DA converters as the RF front ends, and
XCVR2400 daughter boards operating in the 2.4 GHZ range
as transceivers. The software implementation is based on
GNURadio [14].
USRP2s are capable of processing signals up to 100MHz
wide. Such a high bandwidth enables the use of them for
capturing multipath effects and measuring link signatures.
However, GNURadio conﬁguration requires to set the values
of interpolation (decimation) rate at the transmitter (receiver)
and the number of samples per symbol. If the values of those
parameters are set too high, the actual bandwidth will be
signiﬁcantly reduced. To guarantee the capture of multipath
effect, we set those parameters the minimum values allowed
by GNURadio (i.e., 5 for interpolation and decimation rate,
and 2 for number of samples per symbol).
A. Evaluation Methodology
1) Evaluation Scenarios: Our prototype system consists
of a transmitter, a receiver (i.e.,
the veriﬁer in case of
time-synched link signature), and an attacker. Each node is a
USRP2 connected to a commodity PC. The receiver estimates
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:51:05 UTC from IEEE Xplore.  Restrictions apply. 
1524
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 11, NO. 7, JULY 2016
the received link signatures and compares them with the
transmitter’s link signatures.
We evaluate three scenarios: (1) normal scenario, (2) forgery
scenario, and (3) defense scenario. In a normal scenario, the
attacker simply sends original symbols to the receiver. In both
the forgery and the defense scenarios, the receiver functions
as the symbol sensor for the attacker. It estimates the link
signatures for the attacker and provides this link signature and
the received symbols from the transmitter to the attacker. Upon
obtaining this information, the attacker launches the mimicry
attack. However, the forgery scenario uses the previous link
signature scheme in [5], while the defense scenario uses the
newly proposed time-synched link signature.
2) Evaluation Metrics:
Intuitively, the attacker wants to
reduce the difference between its own link signatures and the
transmitter’s link signatures, whereas the defense method aims
to increase this difference to alert the transmitter. Thus, the link
difference between both the attacker’s and the transmitter’s
link signatures can visually reveal the impact of mimicry
attacks and the effectiveness of the defense method.
The receiver measures N link signatures of the transmitter,
where we set N to 50 in our evaluation. Let H denote the
set formed by the N link signatures. We collect 500 link
signatures from the attacker, and calculate the link difference
da,H between H and them. For the purpose of comparison,
we also let the receiver collect 500 link signatures from the
transmitter, and calculate the link difference dt,H between H
and those newly collected link signatures.
the above link difference (i.e., da,H
(cid:5)g − h(cid:5), where h is a
and dt,H) is calculated using 1
link signature of the attacker or the transmitter, and σ is the
historical average difference between link signatures in H [5],
and is given by σ =
Link signature based authentication serves as a detector
that decides whether or not a received signal is from the
desired source. Thus, besides link difference, we also use
detection rate PD (i.e., the rate that an attacker’s link signature
is successfully detected by the receiver) and false alarm rate
PF A (i.e., a transmitter’s link signature is incorrectly identiﬁed
as the attacker’s link signature) as two additional evaluation
metrics. Finally, we measure the time delay introduced by
the transmitter and the attacker to assess how well the frame
repeaters can be detected.
σ min
g∈H
(cid:8)
q∈H−g
According to [5],
1
N(N−1)
(cid:8)
g∈H
(cid:5)q − g(cid:5).
Fig. 7. Normal scenario.
Fig. 8. Forgery scenario.
Fig. 9. Defense scenario.
Fig. 10.
scenario.
Link difference for the transmitter and the attacker in normal
B. Evaluation Results
We now show how mimicry attacks affect the link differ-
ence, false alarm rate, detection rate, and the tradeoff between
the detection and the false alarm rates in the normal, forgery,
and defense scenarios.
1) Link Difference: Figures 7, 8, and 9 show the link dif-
ference for the attacker da,H and that for the transmitter dt,H
in the normal, forgery, and defense scenarios, respectively.
In the normal scenario, we see in Figure 7 that da,H is
generally larger than dt,H. The histograms da,H and dt,H are
shown in Figure 10. Most of the transmitter’s link difference is
less than 0.6, whereas most of the attacker’s link difference is
larger than 0.6. Thus, based on the value of link difference, the
receiver can achieve a high accuracy in distinguishing between
the transmitter and the attacker.
In the forgery scenario,
the attacker launches mimicry
attacks to make its own link signatures similar to the transmit-
ter’s link signatures. We see in Figure 8 that da,H decreases
to the same level as dt,H, and da,H and dt,H substantially
overlap with each other. The histogram of da,H (i.e., the top
graph in Figure 11) shows that the link difference distribution
of the attacker gets very close to that of the transmitter. The
mimicry attack reduces the difference between the attacker’s
link signatures and the transmitter’s link signatures, leading to
high false negative rate at the receiver.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:51:05 UTC from IEEE Xplore.  Restrictions apply. 
FANG et al.: MIMICRY ATTACKS AGAINST WIRELESS LINK SIGNATURE AND NEW DEFENSE
1525
Fig. 11. Link difference for the attacker in forgery and defense scenarios.
Fig. 13. Tradeoff between false alarm and detection rate.
by the receiver. Such optimum threshold actually occurs at
the point where the distance between PF A and PD is the
largest (i.e., PD − PF A is the largest). The optimum threshold
of the normal, defense, and forgery scenarios are 0.5811,
0.6329, and 0.4182, respectively. For the normal scenario, the