**作者：360 Core Security  
博客：[http://blogs.360.cn/post/PoisonNeedles_CVE-2018-15982.html?from=timeline&isappinstalled=0](http://blogs.360.cn/post/PoisonNeedles_CVE-2018-15982.html?from=timeline&isappinstalled=0)**
### 概述
近年来，乌克兰和俄罗斯两国之间围绕领土问题的争执不断，发生了克里米亚半岛问题、天然气争端、乌克兰东部危机等事件。伴随着两国危机事件愈演愈烈之时，在网络空间中发生的安全事件可能比现实更加激烈。2015年圣诞节期间乌克兰国家电力部门受到了APT组织的猛烈攻击，使乌克兰西部的
140 万名居民在严寒中遭遇了大停电的煎熬，城市陷入恐慌损失惨重，而相应的俄罗斯所遭受的APT攻击，外界却极少有披露。
2018年11月25日，乌俄两国又突发了“刻赤海峡”事件，乌克兰的数艘海军军舰在向刻赤海峡航行期间，与俄罗斯海军发生了激烈冲突，引发了全世界的高度关注。在2018年11月29日，“刻赤海峡”事件后稍晚时间，360高级威胁应对团队就在全球范围内第一时间发现了一起针对俄罗斯的APT攻击行动。值得注意的是此次攻击相关样本来源于乌克兰，攻击目标则指向俄罗斯总统办公室所属的医疗机构。攻击者精心准备了一份俄文内容的员工问卷文档，该文档使用了最新的Flash
0day漏洞cve-2018-15982和带有自毁功能的专属木马程序进行攻击，种种技术细节表明该APT组织不惜代价要攻下目标，但同时又十分小心谨慎。在发现攻击后，我们第一时间将0day漏洞的细节报告了Adobe官方，Adobe官方及时响应后在12月5日加急发布了新的Flash
32.0.0.101版本修复了此次的0day漏洞。
![
](https://images.seebug.org/content/images/2018/12/f564a540-d5a7-4787-9a93-dd9d9d79b824.png-w331s)
图1：漏洞文档内容
按照被攻击医疗机构的网站（）
介绍，该医疗机构成立于1965年，创始人是俄罗斯联邦总统办公室，是专门为俄罗斯联邦最高行政、立法、司法当局的工作人员、科学家和艺术家提供服务的专业医疗机构。由于这次攻击属于360在全球范围内的首次发现，结合被攻击目标医疗机构的职能特色，我们将此次APT攻击命名为“毒针”行动。目前我们还无法确定攻击者的动机和身份，但该医疗机构的特殊背景和服务的敏感人群，使此次攻击表现出了明确的定向性，同时攻击发生在“刻赤海峡”危机的敏感时段，也为攻击带上了一些未知的政治意图。
![
](https://images.seebug.org/content/images/2018/12/da13c129-c430-4ab3-b20d-d39e17e15a5c.png-w331s)
图2： 该医院机构介绍
### 攻击过程分析
攻击者通过投递rar压缩包发起攻击，打开压缩包内的诱饵文档就会中招。完整攻击流程如下：
图3： 漏洞文档攻击过程
当受害者打开员工问卷文档后，将会播放Flash 0day文件。
![
](https://images.seebug.org/content/images/2018/12/dd540b9a-f79b-401b-89cb-d8ac4bee1b58.png-w331s)
图4： 播放Flash 0day漏洞
触发漏洞后， winrar解压程序将会操作压缩包内文件，执行最终的PE荷载backup.exe。
![
](https://images.seebug.org/content/images/2018/12/55065e88-f9f4-49c9-bb35-5bc901650a66.png-w331s)
图5： 漏洞执行进程树
### 0day漏洞分析
通过分析我们发现此次的CVE-2018-15982
0day漏洞是flash包com.adobe.tvsdk.mediacore.metadata中的一个UAF漏洞。Metadata类的setObject在将String类型（属于RCObject）的对象保存到Metadata类对象的keySet成员时，没有使用DRCWB（Deferred
Reference Counted, with Write
Barrier）。攻击者利用这一点，通过强制GC获得一个垂悬指针，在此基础上通过多次UAF进行多次类型混淆，随后借助两个自定义类的交互操作实现任意地址读写，在此基础上泄露ByteArray的虚表指针，从而绕过ASLR，最后借助HackingTeam泄露代码中的方式绕过DEP/CFG，执行shellcode。
![
](https://images.seebug.org/content/images/2018/12/84964d61-a2a3-4d78-b064-3f74c6de7e89.png-w331s)
#### 漏洞成因分析
在漏洞的触发过程，flash中Metadata的实例化对象地址，如下图所示。
![
](https://images.seebug.org/content/images/2018/12/437a2a99-19de-41c7-8047-f75ce3543ad5.png-w331s)
循环调用Metadata的setObject方法后，Metadata对象的keySet成员，如下图所示。
![
](https://images.seebug.org/content/images/2018/12/1e06f2a7-cdcc-4323-8b87-90e0464d266a.png-w331s)
keySet成员的部分值，如下图所示。
![
](https://images.seebug.org/content/images/2018/12/8e75e1ec-727a-4595-8723-92b8eed1c782.png-w331s)
强制垃圾回收后keySet成员被释放的内存部分，如下图所示。
![
](https://images.seebug.org/content/images/2018/12/52af7263-6c4c-407b-9780-6b44466f20e8.png-w331s)
在new Class5重用内存后，将导致类型混淆。如下图所示。
![
](https://images.seebug.org/content/images/2018/12/ab0e7a2a-8841-4e51-a3e8-6ed153a62d3e.png-w331s)
后续攻击者还通过判断String对象的length属性是否为24来确定漏洞利用是否成功。（如果利用成功会造成类型混淆，此时通过获取String对象的length属性实际为获取Class5的第一个成员变量的值24）。
通过进一步反编译深入分析，我们可以发现Metadata类的setObject对应的Native函数如下图所示，实际功能存在于setObject_impl里。
![
](https://images.seebug.org/content/images/2018/12/4ce367a5-b261-4eda-b318-2e615365f69d.png-w331s)
在Object_impl里，会直接将传入的键（String对象）保存到Metadata的keySet成员里。
![
](https://images.seebug.org/content/images/2018/12/21044c6e-c4e3-4982-b909-6a3ec556fdb7.png-w331s)
Buffer结构体定义如下（keySet成员的结构体有一定差异）。
![
](https://images.seebug.org/content/images/2018/12/95edb777-7a8e-497d-a86e-e9650fa48db9.png-w331s)
add_keySet中保存传入的键(String对象)，如下代码所示。
![
](https://images.seebug.org/content/images/2018/12/7fa0a60c-e521-4ddf-b1c2-97ce4caff859.png-w331s)
这个时候垃圾回收机制认为传入的键未被引用，从而回收相应内存，然而Metadata对象的keySet成员中仍保留着被回收的内存的指针，后续通过new
Class5来重用被回收的内存，造成UAF漏洞。
#### 漏洞利用分析
在实际的攻击过程中，利用代码首先申请0x1000个String对象，然后立即释放其中的一半，从而造成大量String对象的内存空洞，为后面的利用做准备。
随后，利用代码定义了一个Metadata对象，借助setObject方法将key-value对保存到该对象中，Metadata对象的keySet成员保存着一个指向一片包含所有key(以String形式存储)的内存区域的指针。紧接着强制触发GC，由于keySet成员没有使用DRCWB，keySet成员内保存着一个指向上述内存区域的垂悬指针，随后读取keySet到arr_key数组，供后面使用。
![
](https://images.seebug.org/content/images/2018/12/ff625d61-98c1-4c79-b1e3-ad3f1fb7c7fb.png-w331s)
得到垂悬指针后，利用代码立即申请0x100个Class5类对象保存到vec5（vec5是一个向量对象），由于Class5类对象的内存大小和String对象的内存大小一致（32位下均为0x30字节），且相关对象分配在同一个堆内，根据mmgc内存分配算法，会有Class5对象占据之前被释放的String对象的内存空间。
![
](https://images.seebug.org/content/images/2018/12/33dcc695-24af-4517-b123-4bf4e9863f23.png-w331s)
其中Class5对象定义如下，可以看到该Class5有2个uint类型的成员变量，分别初始化为0x18和2200(0x898)。
![
](https://images.seebug.org/content/images/2018/12/e83a3489-adfe-4c87-8c3a-edf57970fb8b.png-w331s)
随后遍历key_arr数组，找到其中长度变为为0x18的字符串对象（在内存中，String对象的length字段和Class5的m_1成员重合），在此基础上判断当前位于32位还是64位环境，据此进入不同的利用分支。
![
](https://images.seebug.org/content/images/2018/12/6681e7ac-a007-48ca-b125-af66000e432e.png-w331s)
接上图，可以看到：在找到被Class5对象占用的String索引后，利用代码将arr_key的相关属性清零，这使得arr_key数组内元素（包括已占位Class5对象）的引用计数减少变为0，在MMgc中，对象在引用计数减为0后会立刻进入ZCT（zero
count table）。随后利用代码强制触发GC，把ZCT中的内存回收，进入后续利用流程。下面我们主要分析32位环境下的利用流程。
下面我们主要分析32位环境下的利用流程，在32位分支下，在释放了占位的Class5对象后，利用代码立即申请256个Class3对象并保存到另一个向量对象vec3中，此过程会重用之前被释放的某个（或若干）Class5对象的内存空间。
![
](https://images.seebug.org/content/images/2018/12/2feefab8-83e3-4ddb-8081-2a3313dd1b99.png-w331s)
其中Class3对象的定义如下，它和Class5非常相似，两者在内存中都占用0x30字节。
![
](https://images.seebug.org/content/images/2018/12/edef019c-6e65-4dfb-a203-a34d81bf6ef4.png-w331s)
可以看到Class3有一个m_ba成员和一个m_Class1成员，m_ba被初始化为一个ByteArray对象，m_Class1被初始化为一个Class1对象，Class1对象定义如下：
![
](https://images.seebug.org/content/images/2018/12/3520a7a0-b82e-48b2-b6cf-1662fdd2396c.png-w331s)
Class3对象占位完成后，利用代码立即遍历vec5寻找一个被Class3对象占用内存的原Class5对象。找到后，保存该Class5对象的索引到this.index_1，并保存该对象（已经变为Class3对象）的m_Class1成员到this.ori_cls1_addr，供后续恢复使用。
![
](https://images.seebug.org/content/images/2018/12/d8eada4b-0e6f-4221-8eb2-05fd5a9dd664.png-w331s)
两轮UAF之后，利用代码紧接着利用上述保存的index_1索引，借助vec5[index_1]去修改被重用的Class3对象的m_Class1成员。随后立即遍历vec3去寻找被修改的Class3对象，将该对象在vec3中的索引保存到this.index_2。
![
](https://images.seebug.org/content/images/2018/12/ebc1971f-69b4-4bd4-b817-4963f0a5a9b3.png-w331s)
到目前为止，利用代码已经得到两个可以操纵同一个对象的vector(vec5和vec3)，以及该对象在各自vec中的索引(index_1和index_2)。接下来利用代码将在此基础上构造任意地址读写原语。
我们来看一下32位下任意地址读写原语的实现，从下图可以看到，借助两个混淆的Class对象，可以实现任意地址读写原语，相关代码在上图和下图的注释中已经写得很清楚，此处不再过多描述。关于减去0x10的偏移的说明，可以参考我们之前对cve-2018-5002漏洞的分析文章。
![
](https://images.seebug.org/content/images/2018/12/6f47ee95-68f7-4830-b20d-35a65c59b326.png-w331s)
64位下的任意地址读写原语和32位下大同小异，只不过64位下将与Class5混淆的类对象换成了Class2和Class4。此外还构造了一个Class0用于64位下的地址读取。
以下是这三个类的定义。
![
](https://images.seebug.org/content/images/2018/12/dd5b154f-ee87-4a89-b4e6-6319bb753a3c.png-w331s)
![
](https://images.seebug.org/content/images/2018/12/a841012f-8b8c-4da3-82de-76a432d43e61.png-w331s)
![
](https://images.seebug.org/content/images/2018/12/7790adcb-7e78-4d95-894f-9a60535d7ac0.png-w331s)
以下是64位下的任意地址读写原语，64位下的读写原语一次只能读写32位，所以对一个64位地址需要分两次读写。
![
](https://images.seebug.org/content/images/2018/12/d184e058-69f5-4003-b89f-55a1c891404f.png-w331s)
利用代码借助任意地址读写构造了一系列功能函数，并借助这些功能函数最终读取kernel32.dll的VirtualProtect函数地址，供后面Bypass
DEP使用。
![
](https://images.seebug.org/content/images/2018/12/52e519c6-74c6-4c4c-b258-afee3a499642.png-w331s)
利用最终采用与HackingTeam完全一致的手法来Bypass
DEP/CFG。由于相关过程在网上已有描述，此处不再过多解释。32和64位下的shellcode分别放在的Class6和Class7两个类内，
shellcode最终调用cmd启动WINRAR相关进程，相关命令行参数如下：
![
](https://images.seebug.org/content/images/2018/12/38cb100c-ab0c-426a-a4dd-e8f2402996d1.png-w331s)
#### 漏洞补丁分析
Adobe官方在12月5日发布的Flash
32.0.0.101版本修复了此次的0day漏洞，我们通过动态分析发现该次漏洞补丁是用一个Array对象来存储所有的键，而不是用类似Buffer结构体来存储键，从而消除引用的问题。
1、某次Metadata实例化对象如下图所示，地址为0x7409540。
![
](https://images.seebug.org/content/images/2018/12/51268655-02a4-4c81-af07-fad0e32eb21a.png-w331s)
2、可以看到Metadata对象的偏移0x1C处不再是类似Buffer结构体的布局，而是一个Array对象，通过Array对象来存储键值则不会有之前的问题。
![
](https://images.seebug.org/content/images/2018/12/a956e69b-601f-4ce4-bc5d-f8b1b60548e2.png-w331s)
3、循环调用setObject设置完键值后keySet中的值如下所示。
![
](https://images.seebug.org/content/images/2018/12/f8af6062-92ab-4e94-8266-6217b9dd19e9.png-w331s)
4、强制垃圾回收发现保存的ketSet中的指针仍指向有效地字符串，说明强制垃圾回收并没有回收键值对象。