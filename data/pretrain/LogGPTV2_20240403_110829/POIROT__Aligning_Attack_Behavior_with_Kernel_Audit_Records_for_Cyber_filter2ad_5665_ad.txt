Finally, for each node i having a set K of candidate alignments
as produced by Step 3, the selection function, which fixes the align-
ment of i is as follows:
A(i : k)
arg max
k∈K
(6)
The intuition behind equations 5 and 6 is that once a node align-
ment is fixed, the other possible alignments of that node are ignored
by future steps of the algorithm and the calculation of the maxi-
mum influence score related to that alignment is reduced to a table
lookup instead of an iteration over candidate node alignments. In
particular, the search starts as a brute force search, but as more
and more node alignments are fixed, the search becomes faster
by reusing results of previous searches stored in the table. Using
equations 5 and 6 dramatically speeds up the determination of a
proper graph alignment. While in theory, this represents a greedy
approach, which may not always lead to the best results, in practice,
we have found that it works very well.
Finally, after fixing all node alignments, the alignment score is
calculated as in Equation (2). If the score is below the threshold,
the steps 2-4 are executed again. Our evaluation results in section 5
show that the attack graph is usually found within the first few
iterations.
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom18025 EVALUATION
We evaluate Poirot’s efficacy and reliability in three different ex-
periments. In the first experiment, we use a set of DARPA Transpar-
ent Computing (TC) program red-team vs. blue-team adversarial
engagement scenarios which are set up in an isolated network
simulating an enterprise network. The setup contains target hosts
(Windows, BSD, and Linux) with kernel-audit reporting enabled.
During the engagement period, benign background activities were
continuously run in parallel to the attacks from the red team.
In the second experiment, we further test Poirot on real-world
incidents whose natural language descriptions are publicly available
on the internet. To reproduce the attacks described in the public
threat reports, we obtained and executed their binary samples in a
controlled environment and collected kernel audit logs from which
we build the provenance graph. In the third experiment, we evaluate
Poirot’s robustness against false signals in an attack-free dataset.
In all the experiments, we set the value of Cthr to 3 (and thus
a threshold of 1
3). This choice is validated in section 5.3. We note,
however, that one can configure Poirot with higher or lower values
depending on the confidence about the system’s protection mech-
anisms or the effort cyber-analysts are willing to spend to check
the alarms. In fact, the value of Cthr influences the number of false
positives and potential false negatives. A higher Cthr will increase
the number of false positives while a lower Cthr will reduce it. On
the other hand, a higher value of Cthr may detect sophisticated
attacks, with multiple initial entry points, while a smaller value
may miss them. After finding alignment with a score bypassing the
threshold, we manually analyzed all the matched attack subgraphs
to confirm that they were correctly pinpointing the actual attacks
present in the query graphs.
5.1 Evaluation on the DARPA TC Dataset
This experiment was conducted on a dataset released by the DARPA
TC program, generated during a red-team vs. blue-team adversarial
engagement in April 2018 [31]. In the engagement, different services
were set up, including a web server, an SSH server, an email server,
and an SMB server. An extensive amount of benign activities was
simulated, including system administration tasks, web browsing to
many web sites, downloading, compiling, and installing multiple
tools. The red-team relies on threat descriptions to execute these
attacks. We obtained these threat descriptions and used them to
extract a query graph for each scenario (summary shown in table 2).
In total, we evaluated Poirot on ten attack scenarios including
four on BSD, two on Windows, and four on Linux. Due to space
restrictions, we are not able to show all the query graphs; however,
their characteristics are described in table 2, where subjects indicate
processes, and objects indicate files, memory objects, and sockets.
BSD-1-4 pertain to attacks conducted on a FreeBSD 11.0 (64-bit)
web-server which was running a back-doored version of Nginx.
Win-1&2 pertain to attacks conducted on a host machine running
Windows 7 Pro (64-bit). The Win-1 scenario contains a phishing
email with a malicious Excel macro attachment, while the Win-2
scenario contains exploitation of a vulnerable version of the Fire-
fox browser. Linux1&2 and Linux3&4 pertain to attacks conducted
on hosts running Ubuntu 12.04 (64-bit) and Ubuntu 14.04 (64-bit),
respectively. Linux1&3 contain in-memory browser exploits, while
Linux2&4 involve a user who is using a malicious browser exten-
sion.
Alignment Score. As discussed in section 4.2, Poirot iteratively
repeats the node alignment procedure starting from the seed nodes
with fewer candidates. Fig. 4 shows the number of candidate aligned
nodes for each node of Gq. Most of the nodes of Gq have less than
ten candidate nodes in Gp, while there are also nodes with thou-
sands of candidate nodes. These nodes, which appear thousands of
times, are usually ubiquitous processes and files routinely accessed
by benign activities, such as Firefox or Thunderbird. We remind
the reader that our seed nodes are chosen first from the nodes with
fewer alignments. In each iteration, an alignment is constructed,
and its alignment score is compared with the threshold value, which
is set to 1
3.
Table 3 shows Poirot’s matching results for each DARPA TC
scenario after producing an alignment of the query graphs with
the corresponding provenance graphs. We stop the search after the
first alignment that surpasses the threshold value. The second and
third columns of table 3 show the number of iterations of the steps
2-4 presented in section 4.2 and the actual score obtained for the
first alignment that bypasses the threshold value. In 9 out of 10
scenarios, an alignment bypassing the threshold value was found
in the first iteration. In one case, the exact matching of Gq could
be found in Gp (see BSD-4).
The fourth column of table 3 shows the maximum alignment
score among the 20 alignments constructed by iterating steps 2-4
of our search algorithm 20 times while the last column shows the
earliest iteration-number that resulted in the maximum value. As
can be seen, on average, our search converges quickly to a perfect
solution. In 7 out of 10 scenarios, the maximum alignment score is
calculated in the first iteration, while in the other 3, the maximum
subjects ∈
|V (Gq)|
objects ∈
|V (Gq)|
|E(Gq)|
|F(Gq)|
Scenario
Earliest
iteration
bypassing
threshold
Earliest
score
bypassing
threshold
Max
score in
iterations
Earliest
iteration
resulting
Max score
BSD-1
BSD-2
BSD-3
BSD-4
Win-1
Win-2
Linux-1
Linux-2
Linux-3
Linux-4
1
1
1
1
1
1
1
2
1
1
0.45
0.81
0.89
1
0.63
0.47
0.58
0.55
0.54
0.87
20
0.64
0.81
0.89
1
0.63
0.63
0.58
0.71
0.54
0.87
5
1
1
1
1
4
1
5
1
1
Scenario
BSD-1
BSD-2
BSD-3
BSD-4
Win-1
Win-2
Linux-1
Linux-2
Linux-3
Linux-4
4
1
3
2
13
1
2
5
2
4
9
7
18
8
8
13
9
12
8
11
19
10
34
13
26
19
19
24
22
22
81
32
159
43
149
94
62
112
48
96
Table 2: Characteristics of Query Graphs.
Table 3: Poirot’s Graph Alignment Scores.
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1803Fig. 4: Cumulative Distribution Function (CDF) of number of candidates in |Gp| for each node of |Gq|. From left to right: BSD,
Windows, and Linux Scenarios.
Fig. 5: Query Graph of Scenario: Linux-2 (on the left) and its Detected Alignment (on the right).
alignment scores are calculated in the fourth or fifth iterations.
The latter is due to slight differences between the attack reports
and the red team’s implementation of the attacks, which result
in information flows and causal dependencies that differ slightly
between the query graph and the provenance graph. As an example,
in Fig. 5, we show the query graph and its aligned subgraph for the
Linux-2 scenario. In this scenario, the attacker exploits Firefox via
a malicious password manager browser extension, to implant an
executable to disk. Then, the attacker runs the dropped executable
to exfiltrate some confidential information and perform a port scan
of known hosts on the target network. We tag the aligned nodes
in each graph with the same letter label. Some nodes on the query
graph are not aligned with any nodes in the provenance graph.
This reduces the score of the graph alignment to a value that is
less than 1. Although Gq largely overlaps with a subgraph in Gp,
some nodes have no alignment, and some information flows and
causal dependencies do not appear in the provenance graph. The
percentage of these nodes is small, however. As long as the reports
are mainly matching the actual attack activities, our approach will
not suffer from this.
5.2 Evaluation on Public Attacks
In this section, we describe the evaluation of Poirot on attacks
performed by real-world malware families and compare its effec-
tiveness with that of other similar tools. We show the results of this
evaluation in table 4. The names of these malware families, the CTI
reports we used as descriptions of their behavior, and the year in
which the report is published are shown in the first three columns.
Mutation Detection Evaluation. As mentioned earlier, a com-
mon practice among attackers is that of mutating malware to evade
detection or to add more features to it. Therefore, a CTI report
may describe the behavior of a different version of the malware
that is actually present in the system, and it is vital for a threat
hunting tool to be able to detect different mutations of a malware
sample. To this end, we execute several real-world malware families,
containing different mutated versions of the same malware, in a
controlled environment. The fourth column of table 4, shows the
number of malware samples with different hash values belonging
to the family mentioned in the corresponding CTI report. We note
that the reports describe the behavior of only a few samples. The
fifth column of table 4 shows our selected sample’s hash value,