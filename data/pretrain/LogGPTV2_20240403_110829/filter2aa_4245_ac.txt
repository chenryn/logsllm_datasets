>> BasicObject.instance_methods
=> [:==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]
```
虽然大部分方法我们都还没有接触到，但据此也可以看出，相对于 `Object` 类持有多种方法，`BacsicObject` 类所拥有的功能都是最基本的。 定义 `BasicObject` 的子类时，与 `Object` 类不同，需要明确指定 `BasicObject` 类为父类，如下所示 :
```ruby
class MySimpleClass  "Hello"
p obj.hello                 #=> "Hello, again
```
**undef**
`undef` 用于删除已有方法的定义。与 `alias` 一样，参数可以指定方法名或者符号名。
```ruby
undef 方法名    # 直接使用方法名
undef : 方法名   # 使用符号名
```
例如，在子类中希望删除父类定义的方法时可以使用 `undef`。
**单例类**
通过利用单例类定义，就可以给对象添加方法（单例方法）。单例类定义被用于定义对象的专属实例方法。在下面的例子中，我们分别将 `"Ruby"` 赋值给 `str1` 对象和 `str2` 对象，然后只对 `str1` 对象添加 `hello` 方法。这样一来，两个对象分别调用 `hello` 方法时，`str1` 对象可以正常调用，但 `str2` 对象调用时程序就会发生错误。
```ruby
str1 = "Ruby"
str2 = "Ruby"
class  "Hello, Ruby!"
p str2.hello    #=> 错误（NoMethodError）
```
Ruby 中所有的类都是 `Class` 类的实例，对 `Class` 类添加实例方法，就等于给所有的类都添加了该类方法。因此，只希望对某个实例添加方法时，就需要利用单例方法。
# 模块
模块是 Ruby 的特色功能之一。如果说类表现的是事物的实体（数据）及其行为（处理），那么模块表现的就只是事物的行为部分。模块与类有以下两点不同：
- 模块不能拥有实例
- 模块不能被继承
**提供命名空间**
所谓命名空间（namespace），就是对方法、常量、类等名称进行区分及管理的单位。由于模块提供各自独立的命名空间，因此 `A` 模块中的 `foo` 方法与 `B` 模块中的 `foo` 方法，就会被程序认为是两个不同的方法。同样，`A` 模块中的 `FOO` 常量与 `B` 模块的 `FOO` 常量，也是两个不同的常量。
无论是方法名还是类名，当然都是越简洁越好，但是像 `size`、`start` 等这种普通的名称，可能在很多地方都会使用到。因此，通过在模块内定义名称，就可以解决命名冲突的问题。
例如，在 `FileTest` 模块中存在与获取文件信息相关的方法。我们使用 `“模块名 . 方法名”` 的形式来调用在模块中定义的方法，这样的方法称为模块函数。
```ruby
# 检查文件是否存在
p FileTest.exist?("/usr/bin/ruby")  #=> true
# 文件大小
p FileTest.size("/usr/bin/ruby")    #=> 1374684
```
如果没有定义与模块内的方法、常量等同名的名称，那么引用时就可以省略模块名。通过 `include` 可以把模块内的方法名、常量名合并到当前的命名空间。下面是与数学运算有关的 `Math` 模块的例子。
```ruby
# 圆周率（常量）
p Math::PI      #=> 3.141592653589793
# 2 的平方根
p Math.sqrt(2)  #=> 1.4142135623730951
include Math    # 包含Math 模块
p PI            #=> 3.141592653589793
p sqrt(2)       #=> 1.4142135623730951
```
像这样，通过把一系列相关的功能汇总在一个模块中，就可以集中管理相关的命名。
**利用 Mix-in 扩展功能**
`Mix-in` 就是将模块混合到类中。在定义类时使用 `include`，模块里的方法、常量就都能被类使用。
我们可以把 `MyClass1` 和 `MyClass2` 中两者共通的功能定义在 `MyModule` 中。虽然有点类似于类的继承，但 `Mix-in` 可以更加灵活地解决下面的问题。
- 虽然两个类拥有相似的功能，但是不希望把它们作为相同的种类（Class）来考虑的时候
- Ruby 不支持父类的多重继承，因此无法对已经继承的类添加共通的功能的时候
```ruby
module MyModule
  # 共通的方法等
end
class MyClass1
  include MyModule
  # MyClass1 中独有的方法
end
class MyClass2
  include MyModule
  # MyClass2 中独有的方法
end
```
# 创建模块
我们使用 `module` 关键字来创建模块。
语法与创建类时几乎相同。模块名的首字母必须大写。
```ruby
module 模块名
 模块定义
end
```
```ruby
module HelloModule          # module 关键字
  Version = "1.0"           # 定义常量
  def hello(name)           # 定义方法
    puts "Hello, #{name}."
  end
  module_function :hello    # 指定hello 方法为模块函数
end
p HelloModule::Version      #=> "1.0"
HelloModule.hello("Alice")  #=> Hello, Alice.
include HelloModule         # 包含模块
p Version                   #=> "1.0"
hello("Alice")              #=> Hello, Alice.
```
**常量**
和类一样，在模块中定义的常量可以通过模块名访问。
```ruby
p HelloModule::Version      #=> "1.0"
```
**方法的定义**
和类一样，我们也可以在 `module` 上下文中定义方法。
然而，如果仅仅定义了方法，虽然在模块内部与包含此模块的上文中都可以直接调用，但却不能以“模块名 . 方法名”的形式调用。如果希望把方法作为模块函数公开给外部使用，就需要用到 `module_function` 方法。`module_function` 的参数是表示方法名的符号。
```ruby
def hello(name)
  puts "Hello, #{name}."
end
module_function :hello
```
以 `“模块名 . 方法名”` 的形式调用时，如果在方法中调用 `self`（接收者），就会获得该模块的对象。
```ruby
module FooMoudle
  def foo
    p self
  end
  module_function :foo
end
FooMoudle.foo   #=> FooMoudle
```
此外，如果类 `Mix-in` 了模块，就相当于为该类添加了实例方法。在这种情况下，`self` 代表的就是被 `Mix-in` 的类的对象。
即使是相同的方法，在不同的上下文调用时，其含义也会不一样，因此对于 `Mix-in` 的模块，我们要注意根据实际情况判断是否使用模块函数功能。一般不建议在定义为模块函数的方法中使用 `self`。
# Mix-in
```ruby
module M
  def meth
    "meth"
  end
end
class C
  include M  # 包含M 模块
end
c = C.new
p c.meth     #=> meth
```
类 `C` 包含模块 `M` 后，模块 `M` 中定义的方法就可以作为类 `C` 的实例方法供程序调用。
另外，如果想知道类是否包含某个模块，可以使用 `include?` 方法。
```ruby
C.include?(M)   #=> true
```
类 `C` 的实例在调用方法时，Ruby 会按类 `C`、模块 `M`、类 `C` 的父类 `Object` 这个顺序查找该方法，并执行第一个找到的方法。被包含的模块的作用就类似于虚拟的父类。
我们用 `ancestors` 方法和 `superclass` 方法调查类的继承关系
追加以下代码并执行，我们就可以通过 `ancestors` 取得继承关系的列表。进而也就可以看出，被包含的模块 `M` 也被认为是类 `C` 的一个“祖先”。而 `superclass` 方法则直接返回类 `C` 的父类。
```ruby
p C.ancestors       #=> [C, M, Object, Kernel, BasicObject]
p C.superclass      #=> Object
```
> `ancestors` 方法的返回值中的 `Kernel` 是 Ruby 内部的一个核心模块，Ruby 程序运行时所需的共通函数都封装在此模块中。例如 `p` 方法、`raise` 方法等都是由 `Kernel` 模块提供的模块函数。
虽然 Ruby 采用的是不允许多个父类的单一继承模型，但是通过利用 Mix-in，我们就既可以保持单一继承的关系，又可以同时让多个类共享其他功能。
在 Ruby 标准类库中，`Enumerable` 模块就是利用 `Mix-in` 扩展功能的一个典型例子。使用 `each` 方法的类中包含 `Enumerable` 模块后，就可以使用 `each_with_index` 方法、`collect` 方法等对元素进行排序处理的方法。`Array`、`Hash`、`IO` 类等都包含了 `Enumerable` 模块。这些类虽然没有继承这样的血缘关系，但是从“可以使用 `each` 方法遍历元素”这一点来看，可以说它们都拥有了某种相似甚至相同的属性。
单一继承的优点就是简单，不会因为过多的继承而导致类之间的关系变得复杂。但是另一方面，有时我们又会希望更加积极地重用已有的类，或者把多个类的特性合并为更高级的类，在那样的情况下，灵活使用单一继承和 Mix-in，既能使类结构简单易懂，又能灵活地应对各种需求。
**查找方法的规则**
首先，我们来了解一下使用 Mix-in 时方法的查找顺序。
- 同继承关系一样，原类中已经定义了同名的方法时，优先使用该方法。
    ```ruby
    module M
    def meth
        "M#meth"
    end
    end
    class C
    include M     # 包含M
    def meth
        "C#meth"