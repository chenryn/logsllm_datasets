### Android Proguard 混淆对抗之我见

#### 1. Proguard 简介
Proguard 是一个广泛使用的 Java 字节码优化和混淆工具，可以参考 GuardSquare 官网或维基百科获取更多信息。
- **GuardSquare 官网**: [https://www.guardsquare.com/proguard](https://www.guardsquare.com/proguard)
- **Wikipedia**: [https://en.wikipedia.org/wiki/ProGuard](https://en.wikipedia.org/wiki/ProGuard)

#### 2. 局部敏感哈希与 Proguard 混淆对抗
2017 年 6 月，Richard Baumann 发表了题为 "Anti-ProGuard: Towards Automated Deobfuscation of Android Apps" (DOI: 10.1145/3099012.3099020) 的论文。该论文提出了一种利用 SimHash 算法实现对 APK 文件的自动化反混淆方法。

**SimHash 简介**
SimHash 是一种用于计算文本片段相似度的算法。关于 SimHash 的更多细节，可以参考 Google 在 2007 年发表的论文 "Detecting Near-Duplicates for Web Crawling" (DOI: 10.1145/1242572.1242592)。

**论文概述**
- **第二部分**：Baumann 强调 Proguard 对 APK 进行混淆的过程是多个转换（Transformation）的集合。假设未混淆的工程为 P，P 可以看作是一个包含多个对象的对象集合，这些对象与未混淆工程中的类、方法和成员存在一一映射关系。经过 Proguard 混淆后的工程设为 P'，混淆过程可以表示为一个函数 T(x)，即 P' = {T(S1), T(S2), T(S3)...}。整个混淆过程是对未混淆工程中各个元素进行转换的总和。
- **第三部分**：论文详细介绍了自动化反混淆的实现思路。虽然论文中略去了很多细节，但 Richard Baumann 已经将该方案落地，并在 GitHub 上提供了 POC 项目（[https://github.com/ohaz/antiproguard](https://github.com/ohaz/antiproguard)）。

**自动化反混淆实现**
- **工具使用**：项目 README 文件简述了工具的基本使用方法。特别需要注意的是 `--sb -t` 参数和 `-d` 参数。前者用于指定一个未被混淆的 APK，并将其包、类、方法名及其对应的方法实体逐一提取存入数据库；后者用于指定一个欲反混淆的 APK。
- **核心算法**：项目中的 `antiproguard.py` 文件声明了一个关键方法 `compare`，该方法用于将传入的被混淆方法实体与数据库中存储的未混淆方法实体进行相似度对比，并依据相似度结果生成提示（hint）。程序对被混淆方法实体生成三个不同的 SimHash 值，这些值与方法实体的操作码串高度相关。通过比较这些 SimHash 值与数据库中的未混淆方法实体的 SimHash 值，计算出相似程度。如果相似程度大于 90%，则判断该被混淆方法实体与未混淆方法实体高度相似，并生成 hint 以加快后续识别速度。

**局限性**
- **数据来源**：逆向工程的本质是分析和剥离被分析对象的核心代码，而该方案依赖于数据库中的已知代码，主要来源于第三方开源库。这导致该方案仅能对本就开源但被混淆的部分进行还原。
- **实用性**：即使能够还原所有第三方开源库代码，对于实际逆向工程的帮助仍然有限，因为业务代码量庞大且复杂。

#### 3. DataFlow 分析与 Proguard 混淆对抗
无论是尝试“还原”被混淆的方法名还是处理被 Proguard 混淆的 APK 工程，其本质都是帮助逆向工程人员理解被混淆方法实体，减少逆向工程的时间成本。

基于这一思想，我在 2021 年 4 月编写并开源了一个项目，旨在通过分析被混淆的成员与成员、方法、类之间的关系，快速判断被混淆成员是否具有被分析价值。该项目在今年 5 月进行了重构，扩展了功能，目前可以与著名逆向工程工具 JADX 联动，分析对象也从单一成员扩展到了方法。通过分析方法中的参数在标记为污点情况下的向下传播方向（即 DataFlow），进一步辅助逆向工程。

希望以上内容对你有所帮助！