      std::copy_if>>,std::back_insert_iterator>>,main::{lambda(int)#3}>(v17);
      puts("You win!");
      printf("Your flag is:flag{", v16, v20);
      v28 = std::vector>::begin(&v27);
      v29 = std::vector>::end(&v27);
      while ( __gnu_cxx::operator!=>>(&v28, &v29) )
      {
        v18 = __gnu_cxx::__normal_iterator>>::operator*(&v28);
        std::ostream::operator>>::operator++(&v28);
      }
      putchar(125);
      std::vector>::~vector(&v27);
      std::vector>::~vector(&v26);
      std::vector>::~vector(&v25);
      std::vector>::~vector(&v24);
      std::vector>::~vector(&v23);
      return 0;
    }
我的注释部分只写到了获得正确flag的过程部分，也就是前半部分，后面部分其实也不难，你们可以作为练习分析下，  
下面根据这里面的难点和重点进行具体分析，整个过程最难的部分就是Add和accumulate,这两部分是重点，如果不理解这两部分是无法得到正确的flag的
我先对Add附近的进行分析
    v9 = __gnu_cxx::__normal_iterator>>::operator+(&v29, 1LL);// 传v29的地址，在里面在用指针，相当于传了v24.begin(),这个操作过后就是相当于v9 = v24.begin() + 1;
这句我原来以为是将v29+1，后面才发觉这是取容器v29的第一个元素，如果这里看不懂的话，可以跟进去看看，双击这行
    __int64 __fastcall __gnu_cxx::__normal_iterator>>::operator+(_QWORD *v24, __int64 num)
    {
      __int64 v3; // [rsp+18h] [rbp-18h]
      __int64 v4; // [rsp+20h] [rbp-10h]
      unsigned __int64 v5; // [rsp+28h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      v3 = 4 * num + *v24;
      __gnu_cxx::__normal_iterator>>::__normal_iterator(&v4, &v3);// 相当于v4 = v3
      return v4;
    }
  * 进行的是这个，他传入的是num,作为偏移，他取出来的是容器的第1个元素，我以下标为0为第一个元素，以后不在赘述
  * 4 _num +_ 24 这种写法很常见，在ida6.8尤其显著
  * 他将int数组识别为char数组，取值的时候通常也是这样取，假设有个int数组 int num[5] = {1,2,3,4,5}; 在ida6.8里他识别为char num[20]; 取值的时候就num[4*i]，i是循环里的循环变量
###  接下来是Add部分
    __int64 __fastcall Add(__int64 &num[1], __int64 &num[n], __int64 p, __int64 &num[0])
    {
      int *v4; // rax
      __int64 *v5; // rax
      __int64 v7; // [rsp+0h] [rbp-30h]
      __int64 v8; // [rsp+8h] [rbp-28h]
      __int64 v9; // [rsp+10h] [rbp-20h]
      __int64 v10; // [rsp+18h] [rbp-18h]
      int v11; // [rsp+24h] [rbp-Ch]
      unsigned __int64 v12; // [rsp+28h] [rbp-8h]
      v10 = &num[1];                                // 这里说明下，都是地址
      v9 = &num[n];
      v8 = p;
      v7 = &num[0];
      v12 = __readfsqword(0x28u);
      while ( __gnu_cxx::operator!=>>(&v10, &v9) )
      {
        v4 = __gnu_cxx::__normal_iterator>>::operator*(&v10);// v4 = v10
        v11 = main::{lambda(int)#1}::operator() const(&v7, *v4);// 点进去后发现就是num[0] + *v10
        v5 = std::back_insert_iterator>>::operator*(&v8);// v5 = &v8
        std::back_insert_iterator>>::operator=(v5, &v11);// 将结果存到v5里去，v5指向result容器
        __gnu_cxx::__normal_iterator>>::operator++(&v10);// 指针自加，相当于数组下标+1
        std::back_insert_iterator>>::operator++(&v8);// 指针++
      }
      return v8;
    }
具体注释我也写好了，匿名函数你在外部看不出什么，然后你双击进去后就能看出他是干什么了，这里就相当于
    for(int i=1 ; i>>,std::vector>,main::{lambda(std::vector>,int)#2}>(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)
    {
      int v7; // ebx
      __int64 v9; // [rsp+0h] [rbp-70h]
      __int64 v10; // [rsp+8h] [rbp-68h]
      __int64 v11; // [rsp+10h] [rbp-60h]
      __int64 v12; // [rsp+18h] [rbp-58h]
      char v13; // [rsp+20h] [rbp-50h]
      char v14; // [rsp+40h] [rbp-30h]
      unsigned __int64 v15; // [rsp+58h] [rbp-18h]
      v12 = a1;
      v11 = a2;
      v10 = a3;
      v9 = a4;
      v15 = __readfsqword(0x28u);
      while ( __gnu_cxx::operator!=>>(&v11, &v10) )
      {
        v7 = *__gnu_cxx::__normal_iterator>>::operator*(&v11);//v11就是我们输入的元素，这里你可以对照我上面部分的注释，看传入的参数是什么
        std::vector>::vector(&v13, v9);
        main::{lambda(std::vector>,int)#2}::operator() const(&v14, &a7, &v13, v7);//这里是重点，倒置就在这里面
        std::vector>::operator=(v9, &v14);//赋值语句没什么好说的
        std::vector>::~vector(&v14);
        std::vector>::~vector(&v13);
        __gnu_cxx::__normal_iterator>>::operator++(&v11);//自增语句
      }
      std::vector>::vector(v12, v9);
      return v12;
    }
先告诉你们我调试出来的结果吧，这部分让我自己看这ida代码，我看了好久，都没看懂他在干嘛，应该还是太菜了，所以我用gdb调试了一波，发觉他是每次取出一个元素，假设第一个元素，取出，第二个元素取出的时候，将他作为容器，将第一组的元素一个个push入栈达到逆置，然后保存这个容器，在取出一个元素，在创建一个只含这个元素的容器，将其作为主容器，将上次保存的容器的每个元素一个个进行push_back();然后循环一直下去就可以达到逆置的效果
举个例子说明吧： 假设元素为 1 2 3 4 5 6 7 8 9 10  
第一次：创建一个只含1的容器(1)，其余什么都不做  
第二次：创建一个只含2的容器(2)，将第一次创建的容器(1)里的元素，全部push到容器(2)里，保存容器(2)  
第三次：创建一个只含3的容器(3),将容器2里的元素全部push到容器3里面
具体观察过程可以在循环里下断点进行观察，或者直接步过这部分，直接得到结果知道，由于我这里是分析文章，所以就进行了具体的分析
    __int64 __fastcall std::__copy_move::__copy_m>>>(__int64 a1, __int64 a2, __int64 a3)
    {
      _QWORD *v3; // rax
      __int64 v5; // [rsp+8h] [rbp-28h]
      __int64 v6; // [rsp+10h] [rbp-20h]
      __int64 v7; // [rsp+18h] [rbp-18h]
      __int64 i; // [rsp+28h] [rbp-8h]
      v7 = a1;
      v6 = a2;
      v5 = a3;
      for ( i = (a2 - a1) >> 2; i > 0; --i )
      {
        v3 = std::back_insert_iterator>>::operator*(&v5);
        std::back_insert_iterator>>::operator=(v3, v7);// 这里创建新容器，将数据压入栈
        v7 += 4LL;
        std::back_insert_iterator>>::operator++(&v5);
      }
      return v5;
    }
在上一部分我标注的重点里，一直点进去能看到这里的代码，在这里下断，随你用gdb还是ida都可以在这里观察整个过程，
    Num     Type           Disp Enb Address            What
    1       breakpoint     keep y   0x000000000040133f  > std::accumulate > >, std::vector >, main::{lambda(std::vector >, int)#2}>(__gnu_cxx::__normal_iterator > >, std::vector >, main::{lambda(std::vector >, int)#2}, main::{lambda(std::vector >, int)#2})+113>
        breakpoint already hit 8 times
    2       breakpoint     keep y   0x0000000000400fd0 
    3       breakpoint     keep y   0x00000000004020b3  > >::operator=(int const&)+33>
        breakpoint already hit 6 times
我这里用info b让你看下我下的断点，具体也可以自己进行调试，这样会让你更加理解这部分代码
我这里截了部分图，这是第一次循环的时候得到的结果，他只push了8进去，具体调试地址可以从ida里看，在代码界面右键Copy to assembly,在右键
可以得到如下图
这里便可以获得具体地址，然后调试部分就不讲了，有时间在写篇gdb如何调试的吧，在这题目里需要用的指令有
  * x/10wx 显示的如第一张图所显示的一样
  * n 下一步
  * s 步进，也就是步进函数内部
  * c 继续
  * start 在开始处下断点
具体的话:  
这道题就是输入的第2-16个元素依次加上第一个元素，然后倒序排列，等于斐波那契数列就得出flag了，所以，反推之就是斐波那契数列倒序排列，在2-16个元素减去第一个元素就完美了，贴上代码
    #! /usr/bin/python
    # -*- coding: utf-8 -*-    
    def fib(n):
        if(n==1):
            return 1
        elif(n==2):
            return 1
        return fib(n-1) + fib(n-2)
    if __name__ == '__main__':
        array= [fib(i+1) for i in range(16)][::-1]
        first = array[0]
        print first,
        for i in range(len(array)-1):
            print array[i+1] - first,
运行截图
把这段复制到linux上运行即可得到flag，或者直接逆向也得到了
我的这篇文章文字不多，大部分文字都在代码里写注释了，因为这篇文章针对的就是如何分析C++的vector的反汇编代码，具体多余的文字赘述我也就没写了
### **总结下：**
  1. 在ida的f5插件识别出来的不会是你理想的c++代码，比如v24.begin(); 他会变成std::vector>::end(&v24)；
  2. 在ida的f5插件识别出来的代码下，不清楚的部分可以跟进去，看看具体是什么操作
  3. 需要了解常见的vector容器的基本操作，在自己遇到的时候可以快速识别，不需要步进了解具体过程
  4. 在不了解具体过程的情况下，可以进行动态调试，方便自己理解
好了，就说这么多了，我这篇图贴的不多，大部分都是代码，似乎都是代码，希望大佬们不要见怪