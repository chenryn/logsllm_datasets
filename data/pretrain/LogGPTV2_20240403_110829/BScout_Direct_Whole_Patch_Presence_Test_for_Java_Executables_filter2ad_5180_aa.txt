# BScout: Direct Whole Patch Presence Test for Java Executables

## Authors
- Jiarun Dai, Yuan Zhang, Zheyue Jiang, Yingtian Zhou, and Junyan Chen, Fudan University
- Xinyu Xing, Pennsylvania State University
- Xiaohan Zhang, Xin Tan, Min Yang, and Zhemin Yang, Fudan University

## Publication
- [Proceedings of the 29th USENIX Security Symposium](https://www.usenix.org/conference/usenixsecurity20/presentation/dai)
- August 12â€“14, 2020
- ISBN: 978-1-939133-17-5
- Open access sponsored by USENIX

## Abstract
To protect end-users and software from known vulnerabilities, it is crucial to apply security patches to affected executables in a timely manner. To this end, patch presence tests have been proposed, which can independently investigate the patch application status on a target without requiring source code. Existing work on patch presence testing adopts a signature-based approach, but to balance the uniqueness and stability of the signature, they are limited to using small, localized patch snippets, leading to inherent unreliability.

In this paper, we present BSCOUT, a tool that directly checks the presence of a whole patch in Java executables without generating signatures. BSCOUT features several new techniques to bridge the semantic gap between source code and bytecode instructions during testing, accurately checking fine-grained patch semantics in the entire target executable. We evaluate BSCOUT with 194 Common Vulnerabilities and Exposures (CVEs) from the Android framework and third-party libraries. The results show that BSCOUT achieves remarkable accuracy both with and without line number information (i.e., debug information) in the target executable. We further apply BSCOUT to perform a large-scale patch application practice study with 2,506 Android system images from 7 vendors, revealing many findings not previously reported.

## 1. Introduction
Software developers often integrate open-source code into their closed-source products, which can propagate vulnerabilities. To address n-day vulnerabilities in closed-source software, it is crucial to determine whether a vulnerability has been fixed, i.e., whether a security patch has been applied. This capability, known as patch presence testing, enables independent and quantitative evaluation of software security and can encourage vendors to prioritize vulnerability patching.

### Challenges in Patch Presence Testing
- **Granularity and Error Rates**: Previous work on finding vulnerable code uses function-level or image-level similarity, which lacks the granularity needed for patch presence testing, leading to high error rates.
- **Source-to-Binary Testing**: Traditional methods focus on source-to-source or binary-to-binary testing, but patch presence testing requires a source-to-binary approach.
- **Signature-Based Limitations**: Tools like FIBER, designed for C/C++ binaries, use a two-step approach with binary-level patch signatures. However, this method is unreliable as it only considers a small part of the patch and struggles with code customization and signature instability.

### BSCOUT's Approach
BSCOUT addresses these limitations by:
- **Robustness**: Relying on the whole patch rather than a small snippet.
- **High Accuracy**: Accurately reporting whether a patch is applied.
- **Flexibility**: Not depending on building the reference source code, making it more flexible.

BSCOUT leverages the whole patch to directly test its presence in Java bytecode without generating signatures. It targets Java executables due to their ubiquity and the numerous n-day vulnerabilities they contain. To the best of our knowledge, BSCOUT is the first tool to study patch presence testing for Java executables using the entire patch.

## 2. Challenges and Insights
We illustrate the challenges and insights using the security patch for CVE-2016-3832, an Android framework vulnerability. The main challenges include:
- **Small Patch Size**: Security patches often introduce minimal changes, making it difficult to reliably check their presence.
- **Cross-Language Layer Testing**: Java source code and smali instructions (assembly for DEX bytecode) are expressed differently, complicating equivalence testing.
- **Multiple Occurrences**: Patch-changed lines may appear multiple times in the target executable, requiring careful analysis.
- **Different Change Types**: Patches can include additions, deletions, and modifications, each requiring a different testing strategy.

### Example Analysis
Consider the patch snippet for CVE-2016-3832, which includes three addition lines and one deletion line. BSCOUT uses feature-based line-level similarity analysis to link source code lines to bytecode instructions. For example, the method invocation `android.os.Parcel.readInt()` is used as a feature to locate corresponding smali instructions. By considering the entire post-patch method, BSCOUT can accurately determine the patch's presence, even when lines occur multiple times or involve different types of changes.

## 3. BSCOUT Approach
The overall architecture of BSCOUT consists of two main steps:
1. **Cross-layer Line-level Correlative Analysis**:
   - Collects language-independent features from both source code lines and bytecode instructions.
   - Uses feature-based line-level similarity analysis to link source code lines to aggregated bytecode instructions.
   - Leverages line number information if available; otherwise, uses learning-based instruction segmentation to infer bytecode line boundaries.
2. **Patch-Derived Differential Analysis**:
   - Categorizes patch-changed lines into addition, deletion, and modification.
   - Utilizes pre-patch and post-patch source code to accurately test the presence of each type of change in the target executable.

## 4. Evaluation and Results
We evaluated BSCOUT with 194 CVEs related to the Android framework and third-party Java libraries. Experiments were conducted on 15 Android system images, 261 Android apps, and 28 desktop/server apps. BSCOUT achieved remarkable accuracy of 100% and 96.9% with and without line number information. Additionally, we applied BSCOUT to study the patch application practices across 2,506 real-world Android ROMs from 7 vendors, uncovering several important findings, including:
- Google proactively patches its devices before public disclosure, while other vendors are slower.
- Code customization significantly affects the adoption of security patches.
- Vendors sometimes forget to apply patches to affected models.
- Most vendors overclaim the security patch level in their devices.

## 5. Use Cases
Potential users of BSCOUT include:
- Third-party users (e.g., government agents, enterprise users, security companies) interested in the patching status of commercialized products.
- Developers and security testers who want to ensure all n-day vulnerabilities are patched before releasing their products.

## 6. Contributions
- **New Technique**: BSCOUT, a novel method to examine the presence of a patch in Java executables.
- **Thorough Analysis**: Real-world test cases demonstrate BSCOUT's effectiveness and efficiency in patch presence testing.
- **Large-Scale Study**: Using BSCOUT, we conducted a comprehensive study on patch application practices, revealing several important and previously unknown findings.

---

This revised version aims to provide a clear, coherent, and professional presentation of the research, highlighting the key points and contributions of BSCOUT.