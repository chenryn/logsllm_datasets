strategies and study the impact on the user experience; and (2)
apply our approach to monitor other targets and use other detection
methods. For example, our approach could be used to monitor ARM
TrustZone secure world [4], since it offers a similar environment
than SMM (e.g., a non-secure bit to know whether the CPU is in
the secure world or not, like the SMIACT# signal).
A GEM5
Parameter
CPU Type
Clock
Restricted FIFO latency
Cache line size
Size
Associativity
Size
Associativity
Size
Associativity
L1 D
L1 I
L2
DRAM Type
Size
x86
DerivO3Cpu
2 GHz
128 ns
32 B
32 KB
2
64 KB
2
2 MB
8
DDR3_1600
1024 MB
ARM Cortex A5
timingi
500 MHz
128 ns
32 B
16 KBii
2
16 KBii
4
512 KB
8
LPDDR3_1600_x32iii
10 MB
i We use the timing model since the A5 is a single-issue in-order CPU and our
evaluation mainly depends on load/store operations.
options: 4 KB, 8 KB, 16 KB, 32 KB or 64 KB.
ii The cache size has a range of
iii Educated guess, based on the fact that
this is a standard for low power consumption memory.
Table 4: Parameters used with gem5 for the x86 and the ARM
simulation
In Table 4, we show the different parameters used to configure
gem5 for the simulation of the main CPU and the co-processor.
ACKNOWLEDGMENTS
The authors would like to thank and acknowledge the contribution
of the following people (in alphabetical order) for their helpful
comments, technical discussions, feedback and proofing of earlier
versions of this paper: Vali Ali, Boris Balacheff, Pierre Belgarric,
Rick Bramley, Chris Dalton, Carey Huscroft and Jeff Jeansonne. In
addition, we would like to thank the anonymous reviewers for their
feedback.
REFERENCES
[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-flow
integrity. In Proceedings of the 12th ACM conference on Computer and Communi-
cations Security (CCS ’05). ACM, Alexandria, VA, USA, 340–353.
[2] AMD. 2016. BIOS and Kernel Developer’s Guide (BKDG) for AMD Family 16h
Models 30h-3Fh Processors. Advanced Micro Devices, Inc.
[3] AMD TATS BIOS Development Group. 2013. AMD Security and Server innova-
tion. (March 2013). UEFI PlugFest.
[4] ARM. 2009. ARM Security Technology: Building a Secure System using TrustZone
Technology. ARM.
[5] ARM. 2016. ARM Cortex-A5 Technical Reference Manual. ARM.
[6] ARM. 2017. AMBA Specifications. (2017). Retrieved September 10th, 2017 from
https://www.arm.com/products/system-ip/amba-specifications
[7] Ahmed M Azab, Peng Ning, Zhi Wang, Xuxian Jiang, Xiaolan Zhang, and
Nathan C Skalsky. 2010. HyperSentry: enabling stealthy in-context measurement
of hypervisor integrity. In Proceedings of the 17th ACM Conference on Computer
and Communications Security (CCS ’10). ACM, Chicago, IL, USA, 38–49.
[8] Oleksandr Bazhaniuk, Yuriy Bulygin, Andrew Furtak, Mikhail Gorobets, John
Loucaides, Alexander Matrosov, and Mickey Shkatov. 2015. A new class of
vulnerabilities in SMI handlers. (2015). CanSecWest, Vancouver, Canada.
[9] Fabrice Bellard. 2005. QEMU, a Fast and Portable Dynamic Translator. In Pro-
ceedings of the Annual Conference on USENIX Annual Technical Conference (ATEC
’05). USENIX Association, Anaheim, CA, USA, 41–46.
[10] Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K Reinhardt, Ali
Saidi, Arkaprava Basu, Joel Hestness, Derek R Hower, Tushar Krishna, Somayeh
Sardashti, et al. 2011. The gem5 simulator. ACM SIGARCH Computer Architecture
News 39, 2 (2011), 1–7.
[11] Tyler Bletsch, Xuxian Jiang, Vince W Freeh, and Zhenkai Liang. 2011. Jump-
oriented programming: a new class of code-reuse attack. In Proceedings of the
6th ACM Symposium on Information, Computer and Communications Security
(ASIACCS ’11). ACM, Hong Kong, China, 30–40.
[12] Yuriy Bulygin, Oleksandr Bazhaniuk, Andrew Furtak, John Loucaides, and
Mikhail Gorobets. 2017. BARing the System: New vulnerabilities in Coreboot &
UEFI based systems. (2017). REcon Brussels.
[13] Yuriy Bulygin and David Samyde. 2008. Chipset based approach to detect virtu-
alization malware. (2008). Black Hat USA.
[14] Nathan Burow, Scott A Carr, Joseph Nash, Per Larsen, Michael Franz, Stefan
Brunthaler, and Mathias Payer. 2017. Control-flow integrity: Precision, security,
and performance. ACM Computing Surveys (CSUR) 50, 1 (2017), 16.
[15] Anastasiia Butko, Florent Bruguier, Abdoulaye Gamatié, Gilles Sassatelli, David
Novo, Lionel Torres, and Michel Robert. 2016. Full-System Simulation of big.
LITTLE Multicore Architecture for Performance and Energy Exploration. In
Proceedings of the 10th International Symposium on Embedded Multicore/Many-
core Systems-on-Chip (MCSoC). IEEE Computer Society, 201–208.
[16] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R
Gross. 2015. Control-flow bending: On the effectiveness of control-flow integrity.
In Proceedings of the 24th USENIX Security Symposium (SEC’15). USENIX Associa-
tion, Washington, D.C., USA, 161–176.
[17] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi,
Hovav Shacham, and Marcel Winandy. 2010. Return-oriented programming
without returns. In Proceedings of the 17th ACM Conference on Computer and
Communications Security (CCS ’10). ACM, Chicago, IL, USA, 559–572.
[18] Young-kyu Choi, Jason Cong, Zhenman Fang, Yuchen Hao, Glenn Reinman, and
Peng Wei. 2016. A Quantitative Analysis on Microarchitectures of Modern CPU-
FPGA Platforms. In Proceedings of the 53rd Annual Design Automation Conference
(DAC ’16). ACM, Austin, TX, USA, Article 109, 6 pages.
[19] David Cooper, William Polk, Andrew Regenscheid, and Murugiah Souppaya.
2011. BIOS protection guidelines. NIST Special Publication 800 (2011), 147.
409[20] core collapse. 2009. ASUS Eee PC and other series: BIOS SMM privilege es-
(Aug. 2009). Retrieved January 26, 2017 from http:
calation vulnerabilities.
//www.securityfocus.com/archive/1/505590
[21] The coreboot community. 2017. coreboot. (2017). Retrieved February 27, 2017
from https://www.coreboot.org/
[22] CVE-2013-3582 2013. CVE-2013-3582. (May 2013). Retrieved June 1st, 2017 from
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-3582
[23] CVE-2016-8103 2016. CVE-2016-8103. (Sept. 2016). Retrieved June 1st, 2017 from
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-8103
[24] Lucas Davi, Matthias Hanreich, Debayan Paul, Ahmad-Reza Sadeghi, Patrick Koe-
berl, Dean Sullivan, Orlando Arias, and Yier Jin. 2015. HAFIX: Hardware-assisted
flow integrity extension. In Proceedings of the 52nd Annual Design Automation
Conference. ACM, 74.
[25] Lucas Davi and Fabian Monrose. 2014. Stitching the gadgets: On the ineffective-
ness of coarse-grained control-flow integrity protection. In Proceedings of the
23rd USENIX Security Symposium. USENIX Association, San Diego, CA, USA,
401–416.
[26] Brian Delgado and Karen L Karavanic. 2013. Performance implications of System
Management Mode. In IEEE International Symposium on Workload Characteriza-
tion (IISWC). IEEE Computer Society, 163–173.
[27] Loïc Duflot, Olivier Levillain, Benjamin Morin, and Olivier Grumelard. 2009.
Getting into the SMRAM: SMM Reloaded. (2009). CanSecWest, Vancouver,
Canada.
[28] Shawn Embleton, Sherri Sparks, and Cliff C Zou. 2013. SMM rootkit: a new breed
of OS independent malware. Security and Communication Networks 6, 12 (2013),
1590–1605.
[29] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howard Shrobe, Martin Rinard,
Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control jujutsu: On the
weaknesses of fine-grained control flow integrity. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications Security. ACM, Denver,
CO, USA, 901–913.
[30] UEFI Forum. 2016. UEFI Platform Initialization Specification. Version 1.5.
[31] Ivan Fratrić. 2012. ROPGuard: Runtime prevention of return-oriented programming
attacks. Technical Report.
[32] Holger Fröning, Mondrian Nüssle, Heiner Litz, Christian Leber, and Ulrich Brün-
ing. 2013. On achieving high message rates. In Proceedings of the 13th International
Symposium on Cluster, Cloud and Grid Computing (CCGrid). IEEE Computer Soci-
ety, Los Alamitos, CA, USA, 498–505.
[33] Sean Gallagher. 2013.
Your USB cable, the spy: Inside the NSA’s cat-
alog of surveillance magic.
Retrieved
March 1, 2017 from https://arstechnica.com/information-technology/2013/12/
inside-the-nsas-leaked-catalog-of-surveillance-magic/
Ars Technica. (31 Dec. 2013).
[34] Trusted Computing Group. 2011. TPM Main, Part 1 Design Principles. Trusted
Computing Group.
[35] Brian Holden, Don Anderson, Jay Trodden, and Maryanne Daves. 2008. Hyper-
Transport 3.1 Interconnect Technology. MindShare Press.
[36] HP Inc. 2016. HP Sure Start: Automatic Firmware Intrusion Detection and Repair
System. Technical Report. HP Inc. http://h10032.www1.hp.com/ctg/Manual/
c05163901
[37] HP Inc. 2017. HP Sure Start Gen3. Technical Report. HP Inc. http://www8.hp.
com/h20195/v2/GetPDF.aspx/4AA6-9339ENW.pdf
[38] HP Inc. 2017. HP Sure Start with Runtime Intrusion Detection. Technical Report.
HP Inc. http://www8.hp.com/h20195/v2/GetPDF.aspx/4AA6-9340ENW.pdf
[39] Intel Corporation. 2009. Introduction to the Intel Quickpath Interconnect. (June
2009).
2016).
[40] Intel Corporation. 2011. bits-365. (March 2011). Retrieved January 26, 2017 from
https://biosbits.org/news/bits-365/
[41] Intel Corporation. 2015. System Management Mode.
Architectures Software Developer’s Manual. Chapter 34.
In Intel® 64 and IA-32
[42] Intel Corporation. 2016. Control-flow Enforcement Technology Preview. (June
[43] Daehee Jang, Hojoon Lee, Minsu Kim, Daehyeok Kim, Daegyeong Kim, and
Brent Byunghoon Kang. 2014. ATRA: Address Translation Redirection Attack
against Hardware-based External Monitors. In Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security. ACM, Scottsdale,
AZ, USA, 167–178.
[44] Corey Kallenberg, John Butterworth, Xeno Kovah, and C Cornwell. 2013. Defeat-
ing Signed BIOS Enforcement. (2013). EkoParty, Buenos Aires.
[45] Xeno Kovah and Corey Kallenberg. 2015. How Many Million BIOSes Would you
Like to Infect? (2015). CanSecWest.
[46] Chris Lattner and Vikram Adve. 2004. LLVM: A Compilation Framework for
Lifelong Program Analysis & Transformation. In Proceedings of the International
Symposium on Code Generation and Optimization: Feedback-directed and Runtime
Optimization (CGO ’04). IEEE Computer Society, San Jose, CA, USA, 75–88. http:
//llvm.org/
[47] Chris Lattner, Andrew Lenharth, and Vikram Adve. 2007. Making Context-
Sensitive Points-to Analysis with Heap Cloning Practical For The Real World.
In Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI ’07). San Diego, California.
[48] Hojoon Lee, Hyungon Moon, Daehee Jang, Kihwan Kim, Jihoon Lee, Yunheung
Paek, and Brent ByungHoon Kang. 2013. KI-Mon: A Hardware-assisted Event-
triggered Monitoring Platform for Mutable Kernel Object. In Proceedings of the
22th USENIX Security Symposium. USENIX Association, Washington, D.C., USA,
511–526.
[49] Yongje Lee, Ingoo Heo, Dongil Hwang, Kyungmin Kim, and Yunheung Paek.
2015. Towards a Practical Solution to Detect Code Reuse Attacks on ARM Mobile
Devices. In Proceedings of the Fourth Workshop on Hardware and Architectural
Support for Security and Privacy (HASP ’15). ACM, Portland, OR, USA, Article 3,
8 pages.
[50] LEN-4710 2016. Lenovo Security Advisory: LEN-4710. (Sept. 2016). Retrieved
June 1st, 2017 from https://support.lenovo.com/us/en/product_security/len_4710
[51] LEN-8324 2016. Lenovo Security Advisory: LEN-8324. (Nov. 2016). Retrieved
June 1st, 2017 from https://support.lenovo.com/us/en/solutions/len-8324
[52] Philippe Lin. 2013. Hacking Team Uses UEFI BIOS Rootkit to Keep RCS 9 Agent
in Target Systems. TrendLabs Security Intelligence Blog. (13 July 2013). Retrieved
May 5, 2017 from https://blog.trendmicro.com/trendlabs-security-intelligence/
hacking-team-uses-uefi-bios-rootkit-to-keep-rcs-9-agent-in-target-systems/
[53] Heiner Litz, Holger Froening, Mondrian Nuessle, and Ulrich Bruening. 2008.
VELO: A novel communication engine for ultra-low latency message transfers.
In Proceedings of the 37th International Conference on Parallel Processing. IEEE
Computer Society, 238–245.
[54] Heiner Litz, Maximilian Thuermer, and Ulrich Bruening. 2010. TCCluster: A Clus-
ter Architecture Utilizing the Processor Host Interface as a Network Interconnect.
In Proceedings of the International Conference on Cluster Computing (CLUSTER).
IEEE Computer Society, 9–18.
[55] Ziyi Liu, JongHyuk Lee, Junyuan Zeng, Yuanfeng Wen, Zhiqiang Lin, and Wei-
dong Shi. 2013. CPU Transparent Protection of OS Kernel and Hypervisor
Integrity with Programmable DRAM. In Proceedings of the 40th Annual Interna-
tional Symposium on Computer Architecture (ISCA ’13). ACM, Tel-Aviv, Israel,
392–403.
[56] Tarjei Mandt, Mathew Solnik, and David Wang. 2016. Demystifying the Secure
Enclave Processor. In Black Hat Las Vegas.
[57] Nicholas D. Matsakis and Felix S. Klock, II. 2014. The Rust Language. In Proceed-
ings of the 2014 ACM SIGAda Annual Conference on High Integrity Language Tech-
nology (HILT ’14). ACM, Portland, OR, USA, 103–104. https://www.rust-lang.org/
[58] Hyungon Moon, Hojoon Lee, Jihoon Lee, Kihwan Kim, Yunheung Paek, and
Brent Byunghoon Kang. 2012. Vigilare: Toward Snoop-based Kernel Integrity
Monitor. In Proceedings of the ACM Conference on Computer and Communications
Security (CCS ’12). ACM, Vienna, Austria, 28–37.
[59] Ben Niu and Gang Tan. 2014. Modular control-flow integrity. ACM SIGPLAN
Notices 49, 6 (2014), 577–587.
[60] Dmytro Oleksiuk. 2016. Exploiting AMI Aptio firmware on example of Intel
NUC. (October 2016). Retrieved May 19, 2017 from http://blog.cr4.sh/2016/10/
exploiting-ami-aptio-firmware.html
[61] Dmytro Oleksiuk. 2016. Exploring and exploiting Lenovo firmware secrets.
Retrieved January 30, 2017 from http://blog.cr4.sh/2016/06/
(June 2016).
exploring-and-exploiting-lenovo.html
[62] PaX Team. 2015. RAP: RIP ROP. (Oct. 2015). H2HC.
[63] Nick L. Petroni, Jr., Timothy Fraser, Jesus Molina, and William A. Arbaugh. 2004.
Copilot - a Coprocessor-based Kernel Runtime Integrity Monitor. In Proceedings
of the 13th USENIX Security Symposium. USENIX Association, San Diego, CA,
USA, 179–194.
[64] Nick L Petroni Jr, Timothy Fraser, AAron Walters, and William A Arbaugh.
2006. An Architecture for Specification-Based Detection of Semantic Integrity
Violations in Kernel Dynamic Data. In Proceedings of the 15th USENIX Security
Symposium. USENIX Association, Vancouver, B.C., Canada.
[65] Bruno Pujos. 2016.
(May 2016).
Retrieved May 19, 2017 from http://esec-lab.sogeti.com/posts/2016/05/30/
smm-unchecked-pointer-vulnerability.html
SMM unchecked pointer vulnerability.
[66] Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage. 2012. Return-
oriented programming: Systems, languages, and applications. ACM Transactions
on Information and System Security (TISSEC) 15, 1 (2012), 2.
[67] Xiaoyu Ruan. 2014. Boot with Integrity, or Don’t Boot. In Platform Embedded
Security Technology Revealed: Safeguarding the Future of Computing with Intel
Embedded Security and Management Engine. Apress, Berkeley, CA, USA, Chapter 6,
143–163.
[68] Benjamin H Shelton. 2013. Popcorn Linux: enabling efficient inter-core communi-
cation in a Linux-based multikernel operating system. Master’s thesis. Virginia
Polytechnic Institute and State University.
[69] WonJun Song, John Kim, Jae-Wook Lee, and Dennis Abts. 2014. Security vulner-
ability in processor-interconnect router design. In Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security (CCS ’14). ACM,
Scottsdale, AZ, USA, 358–368.
[70] Tianocore. 2017. EDK II. (2017). Retrieved January 26, 2017 from http://www.
tianocore.org/edk2/
410[71] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing forward-edge control-
flow integrity in gcc & llvm. In Proceedings of the 23rd USENIX Security Symposium.
USENIX Association, San Diego, CA, USA, 941–955.
[72] Zhi Wang and Xuxian Jiang. 2010. Hypersafe: A lightweight approach to provide
lifetime hypervisor control-flow integrity. In Proceedings of the 31st IEEE Sympo-
sium on Security and Privacy (SP ’10). IEEE Computer Society, Oakland, CA, USA,
380–395.
[73] Dick Wilkins. 2015. UEFI Firmware – Securing SMM. (May 2015). Retrieved
January 26, 2017 from http://www.uefi.org/sites/default/files/resources/UEFI_
Plugfest_May_2015%20Firmware%20-%20Securing%20SMM.pdf
[74] Rafal Wojtczuk and Joanna Rutkowska. 2009. Attacking SMM memory via Intel
CPU cache poisoning. (March 2009). Invisible Things Lab.
[75] Rafal Wojtczuk and Alexander Tereshkin. 2009. Attacking Intel BIOS. (July 2009).
Black Hat USA.
[76] Yubin Xia, Yutao Liu, Haibo Chen, and Binyu Zang. 2012. CFIMon: Detecting
Violation of Control Flow Integrity Using Performance Counters. In Proceedings
of the 2012 42Nd Annual IEEE/IFIP International Conference on Dependable Systems
and Networks (DSN ’12). IEEE Computer Society, Washington, D.C., USA, 1–12.
[77] Jiewen Yao, Vincent Zimmer, and Star Zeng. 2014. A Tour Beyond BIOS Imple-
menting UEFI Authenticated Variables in SMM with EDKII. Technical Report.
Intel.
[78] Jiewen Yao and Vincent J Zimmer. 2015. A Tour Beyond BIOS Supporting an SMM
Resource Monitor using the EFI Developer Kit II. Technical Report. Intel.
[79] Jiewen Yao, Vincent J Zimmer, and Matt Flemming. 2015. A Tour Beyond BIOS
Memory Practices in UEFI. Technical Report. Intel.
[80] Mingwei Zhang and R Sekar. 2013. Control Flow Integrity for COTS Binaries.
In Proceedings of the 22th USENIX Security Symposium. USENIX Association,
Washington, D.C., USA, 337–352.
[81] Xiaolan Zhang, Leendert van Doorn, Trent Jaeger, Ronald Perez, and Reiner
Sailer. 2002. Secure coprocessor-based intrusion detection. In Proceedings of the
10th workshop on ACM SIGOPS European workshop (EW 10). ACM, Saint-Émilion,
France, 239–242.
411