title:ReCFA: Resilient Control-Flow Attestation
author:Yumei Zhang and
Xinzhi Liu and
Cong Sun and
Dongrui Zeng and
Gang Tan and
Xiao Kan and
Siqi Ma
ReCFA: Resilient Control-Flow Attestation
Yumei Zhang∗
Xinzhi Liu∗
PI:EMAIL
PI:EMAIL
Xidian University
Xi’an, China
Gang Tan
PI:EMAIL
Pennsylvania State University
University Park, PA, USA
Cong Sun†
PI:EMAIL
Xidian University
Xi’an, China
Dongrui Zeng
PI:EMAIL
Pennsylvania State University
University Park, PA, USA
Xiao Kan
PI:EMAIL
Xidian University
Xi’an, China
Siqi Ma
PI:EMAIL
The University of Queensland
Brisbane, Australia
ABSTRACT
Recent IoT applications gradually adapt more complicated end sys-
tems with commodity software. Ensuring the runtime integrity of
these software is a challenging task for the remote controller or
cloud services. Popular enforcement is the runtime remote attesta-
tion which requires the end system (prover) to generate evidence
for its runtime behavior and a remote trusted verifier to attest the
evidence. Control-flow attestation is a kind of runtime attestation
that provides diagnoses towards the remote control-flow hijacking
at the prover. Most of these attestation approaches focus on small
or embedded software. The recent advance to attesting complicated
software depends on the source code and CFG traversing to measure
the checkpoint-separated subpaths, which may be unavailable for
commodity software and cause possible context missing between
consecutive subpaths in the measurements.
In this work, we propose a resilient control-flow attestation
(ReCFA), which does not need the offline measurement of all le-
gitimate control-flow paths, thus scalable to be used on compli-
cated commodity software. Our main contribution is a multi-phase
approach to condensing the runtime control-flow events; as a re-
sult, the vast amount of control-flow events are abstracted into
a deliverable size. The condensing approach consists of filtering
skippable call sites, folding program-structure related control-flow
events, and a greedy compression. Our approach is implemented
with binary-level static analysis and instrumentation. We employ a
shadow stack mechanism at the verifier to enforce context-sensitive
control-flow integrity and diagnose the compromised control-flow
events violating the security policy. The experimental results on
real-world benchmarks show both the efficiency of the control-flow
condensing and the effectiveness of security enforcement.
∗Both authors contributed equally to this research and are co-first authors.
†Corresponding author
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485900
CCS CONCEPTS
• Security and privacy → Software security engineering; Dis-
tributed systems security.
KEYWORDS
remote attestation, control-flow integrity, binary analysis, reference
monitor, binary rewriting
ACM Reference Format:
Yumei Zhang, Xinzhi Liu, Cong Sun, Dongrui Zeng, Gang Tan, Xiao Kan,
and Siqi Ma. 2021. ReCFA: Resilient Control-Flow Attestation. In Annual
Computer Security Applications Conference (ACSAC ’21), December 6–10, 2021,
Virtual Event, USA. ACM, New York, NY, USA, 12 pages. https://doi.org/10.
1145/3485832.3485900
1 INTRODUCTION
The tampering of the software implementation as well as its run-
time state on devices poses a critical challenge for the security of
IoT. To mitigate such vulnerabilities, remote attestation has been
widely deployed as a security service to measure the integrity of
software on resource-constrained end devices. Based on some in-
teractive security protocol, the remote device, i.e. prover, sends an
authentication report about its software status to a trusted party,
i.e. verifier, to prove that it has not been tampered with or hijacked.
The freshness and authenticity of the report are usually ensured by
a trust anchor on the prover. The instances of trust anchors vary
from the heavyweight Trusted Platform Module (TPM) to more
lightweight schemes such as TrustLite[24], Sancus[29], and ARM
TrustZone-M[1].
The static remote attestation schemes verify the integrity of
program code, executables, and the configurations on the prover.
They cannot capture the runtime compromises related to mem-
ory errors, e.g., the control-flow hijacking based on code reuse
[7, 34]. On the other hand, the runtime remote attestations [4, 5, 11–
13, 31, 35, 36, 39] attempt to measure the runtime behaviors of
software at the prover and quote fine-grained runtime status to
the verifier. For example, some approaches [4, 12, 13, 31, 36, 39]
implement fine-grained control-flow measurements delivered to
the verifier to diagnose the concrete execution path under attack.
On receiving the hashed information of the prover’s execution
paths to the verifier, the verifier reports control-flow hijacking or
non-control data attacks by detecting the absence of the received
311ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Yumei Zhang, Xinzhi Liu, Cong Sun, Dongrui Zeng, Gang Tan, Xiao Kan, and Siqi Ma
(2) We propose a novel multi-phase condensing and recovering
approach for the control-flow events to efficiently encode,
deliver, and attest the runtime behavior of the prover.
(3) Our evaluation results show the efficiency and security of
ReCFA. The attestation speed is around 28.2M/s and the ver-
ification speed is around 1.03M/s, which justify the usability
of our approach under various wireless environments.
2 DESIGN OF RECFA
ReCFA is a control-flow attestation framework using static binary
analysis and binary instrumentation to enforce remote CFI and
diagnose control-flow hijacking remotely for complex software. We
first outline its architecture, the threat model, and the requirements
under which ReCFA operates. Then, we present our efficient control-
flow event abstraction and security enforcement.
2.1 System Overview
The architecture of ReCFA is presented in Fig. 1. ReCFA first relies
on an offline static analysis and instrumentation procedure to gen-
erate the prover program and the policies deployed on the verifier.
In this stage, we first derive a binary-level control-flow graph of the
program. Then we filter the skippable direct calls (Section 2.3.1) and
instrument the functionality of runtime control-flow event folding
(Section 2.3.2). We derive the security policy in the form of two
mappings, one for tracking the skipped edges and the other for the
policy enforcement (Section 2.4). The instrumented program run-
ning at the prover generates folded control-flow event sequences,
which are compressed with a greedy algorithm (Section 2.3.3) and
sent to the verifier as the attestation report. The verifier recovers
control-flow event sequences to attest against the CFI policy with
the shadow stack mechanism (Section 2.4). Any event sequence
violating the CFI policy leads to a remote diagnosis of the prover
program’s vulnerable control flows.
hashes in a pre-measured database. Remotely attesting control-
flow integrity (CFI) is more challenging than traditional local CFI
enforcement because the verifier can only rely on the abstract mea-
surements received from the prover, whereas local enforcement
can inline the checking to use all the runtime information.
The advance of mobile edge computing [26] allows for more pow-
erful end-systems with complicated commodity software, whose
runtime integrity is better to be confirmed by remote manage-
ment servers. Although the control-flow attestations have shown
an advantage on remotely detecting control-flow hijacking, most
of them fall short of scalability on complicated software. More
specifically, the control-flow attestations rely on an offline pro-
cedure to measure all the legitimate control-flow paths, which is
potentially exponential to the scale of the program. Such an of-
fline procedure, though feasible on IoT programs, is unrealistic to
large programs or services. ScaRR [36] is the first work that adapts
the runtime attestation to complex systems. The new control-flow
model of ScaRR separates the control-flow path with checkpoints
and represents each subpath between consecutive checkpoints with
a sequence of control-flow events, including procedure calls, re-
turns, and branches. A remote shadow stack at the verifier is used
to preserve the calling context for precision. However, there are
still limitations to this approach. ScaRR still requires the offline
procedure to obtain a mapping from the measurement of each
subpath to a sequence of the critical control-flow events on that
subpath. To make the subpaths and measurements correct, source
code is required, which is unobtainable for commodity software.
Also, measuring the checkpoints-separated subpaths may cause
context missing between consecutive subpaths to bring in potential
false negatives of the online remote verification. Last, the verifica-
tion of ScaRR only provides coarse-grained path diagnoses. ScaRR
can identify subpaths triggering control-flow violations but fails
to locate the exact control-flow events (e.g. indirect branches) that
cause the violations.
To mitigate such limitations, in this work, we propose a new
binary-level resilient control-flow attestation (ReCFA) with no offline
generation of path measurements. The executable of the prover
is statically instrumented to record critical runtime control-flow
events, which are further condensed at runtime for efficient deliv-
ery to the verifier. The verifier recovers the control-flow events
and monitors the control-flow integrity with a shadow stack. To
overcome the runtime explosion of control-flow events, we propose
a multi-phase control-flow event condensing approach, which folds
the loops and recursions at runtime. Our approach is resilient in two
aspects. First, due to the binary-level analysis and the avoidance
of offline exponential paths measuring, our approach can verify
the runtime behaviors of complicated commodity programs. Sec-
ond, our approach can enforce different CFI policies specified by
different binary-level CFGs, e.g. [23, 37, 40]. We summarize our
contributions as follows:
(1) We propose a new control-flow attestation for large binary
programs. The approach avoids offline path measurements
generation and can enforce fine-grained context-sensitive
CFI with remote shadow stack.
Figure 1: Architecture of ReCFA
offline analysis & instrumentProverVerifierbinary program PCFG_gen(P)CFGP1.Call-site filteringskipped call sitesPolicy gen2.Instrument for event foldingInstrumented binary P’Exec(P’(I))user input I3. Greedy compression & cert-report gencert-report verif & Rev greedy compressioncontrol-flow event sequenceshadow stack based enforce & diagnosechallengeresponse312ReCFA: Resilient Control-Flow Attestation
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
2.2 Threat Model and Requirements
As an attestation scheme, our attacker model should include the
network threats (e.g., replay or masquerading attacks) to the tradi-
tional remote attestation schemes. However, ensuring the freshness
and authenticity of our attestation report between the prover and
verifier can rely on the state-of-the-art attestation protocol and a
trust anchor. Though several existing trust anchors, e.g., [10, 29],
are available, we assume the kernel combined with the hardware-
assisted protection keys (MPK) [22] as the trust anchor of the prover,
which is reasonable against user-level attackers and for commodity
hardware. The trust anchor is responsible for the code integrity
through static remote attestation. It is also critical to ensure the
prover-side instrumented code cannot be bypassed and the protec-
tion of memory storing critical data structures.
At the system level of the prover, to follow a similar assumption
as [4, 12, 36], the data execution prevention (DEP) is deployed on
the prover to prevent malicious code injection into the running
processes. We focus on the control-flow hijacking on the prover.
The attacker can run the program with arbitrary input, read/write
the data section of the program, and exploit memory corruption
vulnerabilities (e.g., buffer overflow) to manipulate the in-memory
control-flow information and hijack the program’s control flow.
Though pursuing a similar threat model as CFI, the attestation
scheme requires the verifier to remotely diagnose the control-flow
path leading to the control-flow attack. This requirement is unsat-
isfied by the traditional local CFI protections.
Besides, the attacker model does not include physical attacks or
data-oriented attacks that do not alter the control-flow edges. The
attacker cannot emit self-modifying code, runtime generated code,
or the unanticipated dynamic loading of code [3].
2.3 Multi-Phase Control Flows Condensing
In this section, we propose an approach to reducing the overall
amount of data delivered from the prover to the verifier. For the
context-sensitive control-flow attestation with shadow stack, these
data include all the function calls, indirect jumps, and returns en-
countered at runtime by the prover program, which we define as
the Potential Monitoring Points (PMPs).
2.3.1 Phase-1: Call-Site Filtering. Recording all the function calls
by instrumentation causes remarkable performance overhead. Thus,
our first step is to filter out call sites that are unnecessary for instru-
mentation. We use the causality relation between the consecutive
PMPs to identify Skippable Call Sites (SCSes).
Specifically, we build an abstract graph G = (V , E) for each
program to discover SCSes, where the node set V contains all the
PMPs and function entry addresses for the functions that no call
site targets at. If for any v, v′ ∈ V , we find a control-flow path
from v to v′ without any intermediate v′′ ∈ V , then we add a
directed edge (v, v′) to E. With this abstract graph G, the principle
of skipping certain node (e.g., direct calls) is as follows. A node is
skippable only when none of its predecessors has more than one
successor. Intuitively, we skip a node when the node is guaranteed
to be executed subsequently after each of its predecessor.
(a) Code Sample
(b) Abstract Graph
Figure 2: Example of Filtered Call Site
Taking the program in Fig. 2a for example, the corresponding
abstract graph is presented in Fig. 2b. The abstract graph is dif-
ferent from CFG. Considering the two nodes representing the re-
turn edges of CFG in Fig. 2b, they contain the return target in-
formation, i.e., 40641b and 406416. Even this ret instruction in
showFileNames may return to different targets, there is only one
CFG edge (targeting at 406416) can be the predecessor of the direct-
call node “406416→4062c1”. To explain which direct-call node is
skippable, for the call at 406416, since it has only one predeces-
sor, i.e., the return node of function showFileNames to 406416,
and this return node has only one successor, the call at 406416 to
function cadvise is skippable. For the call at 406420 to function
cleanUpAndFail, it has two predecessors. One is the return node
from function cadvise to 40641b. The other is the entry 4063d1 of
function compressedStreamEOF bridged by the conditional jump
at 4063de. Because the entry 4063d1 has two successors (the call at
406411 and 406420), the call at 406420 cannot be skipped.
The skipped call sites derived by this procedure should also be
held by the verifier to enforce the security policy with the shadow
stack. For the skipped call-site nodes S ⊆ V , we find all the predeces-
sor nodes P ⊆ V in G. We build a mappingM from the predecessors’
target addresses to the skipped call sites, i.e., M = {t (cid:55)→ s′ | (s, t) ∈
P ∧ (s′, t′) ∈ S ∧ ((s, t),(s′, t′)) ∈ E}. For the example in Fig. 2b, we
know (406416, 4062c1) ∈ S and (ret@showFileNames, 406416) ∈ P,
then we add {406416 (cid:55)→ 406416} into M. An exceptional case is
for the direct-call predecessors, we encode their call-site address
as the key in the mapping, i.e. adding {s (cid:55)→ s′} into M instead
of {t (cid:55)→ s′}. We elaborate the reason in the control-flow edge
encoding of Section 3.
2.3.2 Phase-2: Control-Flow Events Folding. The requirement of
diagnosing all critical control-flow events causes runtime explosion
00000000004063d1 :   4063d1: push %rbp   ...   4063de: je  40641b     ...   406411: callq 4062f3    406416: callq 4062c1    40641b: mov $0x2,%edi   406420: callq 40632e    ...   406427: retq 4063d1(fun-entry)406416→4062c1(d-call)406420→40632e(d-call)ret@showFileNames→406416(ret)ret@cadvise→40641b(ret)406411→4062f3(d-call)skippable d‐callunskippable d‐calledge in Eirrelevant control flows313ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Yumei Zhang, Xinzhi Liu, Cong Sun, Dongrui Zeng, Gang Tan, Xiao Kan, and Siqi Ma
of data sent to the verifier. The explosion is mainly caused by the
loops and recursions of programs. To achieve a reasonable commu-
nication overhead, we design a folding mechanism to efficiently
capture the unskipped control-flow events in loops and recursions.
For each loop ℓ in the binary, we identify four kinds of points
for the binary instrumentation, i.e., loop entry (ℓe), loop exit (ℓx ),
loop body start (ℓs), and loop body end (ℓd). An effective static
analysis to identify these points requires the binary program to
have structured control flows, which is common for open source
software and assumed by other work using binary rewriting, e.g.,
[4]. However, this doesn’t hold for arbitrary or obfuscated binaries.
In our case, the control-flow events are directly fed into the greedy
compression procedure presented in Section 2.3.3, which treats
the control-flow events as a stream. Thus, ReCFA’s runtime folding
mechanism supports obfuscated binaries. For the example in Fig. 4a,
we label the critical points in the control-flow graph. We instrument
code at these points to conduct the control-flow event folding.
To fold the loop, we define two runtime data structures: loop
stack and path stack, as presented in Fig. 3. The loop stack stores
the status of the ongoing (unclosed) and maybe nested loops. If
the program counter is out of any loop, the loop stack should be
empty. Each element of the loop stack is an index of the path stack,
except several special tag ⊥ to demarcate the inner and outer loop.
Each index represents an id of a stack frame on the path stack. The
path stack consists of a number of stack frames. Each stack frame
holds the control-flow events (calls, returns, indirect jumps) as
deduplicated event paths captured during the execution of a specific
loop. The stack frames of an inner loop can be nested into a stack
frame of an outer loop.
Considering the program in Fig. 4a, when the program counter
reaches a loop entry, i.e., the last instruction of N0, we instru-
ment to push a tag ⊥ onto the loop stack. At the start of a loop