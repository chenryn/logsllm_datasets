    tag at the top of the HTML page. Anything between
    tags is CSS code used to specify the styling of HTML elements, such as font color, element size, and transparency. We can style HTML elements by assigning them IDs and referencing these in our style sheet.
    你可以看到我们在HTML页面顶部添加了一个标签。在标签之间的任何内容都是CSS代码，用于指定HTML元素的样式，例如字体颜色、元素大小和透明度。我们可以通过为它们分配ID并引用这些ID来设置HTML元素的样式。
    Here, we set the position of our decoy element to
     absolute
    to make the decoy site overlap with the iframe containing the victim site
     3
    . Without the
     absolute
    position directive, HTML would display these elements on separate parts of the screen. The decoy element includes a Subscribe to Newsletter button, and we carefully position the iframe so the Transfer Balance button sits directly on top of this Subscribe button, using new lines created by HTML’s line break tag
     5
     6
    . We then make the iframe invisible by setting its opacity to a very low value
     1
    . Finally, we set the z-index of the iframe to a higher value than the decoys
     2
     4
    . The
     z-index
    sets the stack order of different HTML elements. If two HTML elements overlap, the one with the highest z-index will be on top.
    在这里，我们将我们的幌子元素的位置设置为绝对位置，使得幌子站点与包含受害者站点3的iframe重叠。没有绝对位置指令，HTML会在屏幕的不同部分显示这些元素。幌子元素包括一个“订阅通讯”按钮，我们仔细地定位了iframe，使得“转移余额”按钮直接位于这个“订阅”按钮的上方，使用HTML的换行标签5 6创建新的行。然后，我们通过将iframe的不透明度设置为非常低的值1使其不可见。最后，我们将iframe的z-index设置为比幌子的高2 4。z-index设置不同HTML元素的堆叠顺序。如果两个HTML元素重叠，具有最高z-index的元素将位于顶部。
    By setting these CSS properties for the victim site iframe and decoy form, we get a page that looks like it’s for subscribing to a newsletter, but contains an invisible form that transfers the user’s money into the attacker’s account.
    Let’s turn the opacity of the iframe back to
     opacity
     :1
    to see how the page is actually laid out. You can see that the Transfer Balance button is located directly on top of the Subscribe to Newsletter button (
     Figure 8-4
    ).
    通过为受害者网站的iframe和诱饵表单设置这些CSS属性，我们得到了一个看起来像是订阅新闻的页面，但实际上包含一个将用户的钱转移到攻击者账户的不可见表单。让我们将iframe的不透明度反转为opacity:1，以查看页面的实际布局。您可以看到“转账余额”按钮直接位于“订阅新闻”按钮上方（图8-4）。
       Figure 8-4
      : The Transfer Balance button lies directly on top of the Subscribe button. Victims think they’re subscribing to a newsletter, but they’re actually clicking the button to authorize a balance transfer.
      图8-4：转账按钮直接位于订阅按钮上方。受害者以为自己是在订阅新闻通讯，但实际上点击的是授权转账的按钮。
    Once we reset the opacity of the iframe to
     opacity:0.00001
    to make the sensitive form invisible, the site looks like a normal newsletter page (
     Figure 8-5
    ).
    当我们将Iframe的不透明度重置为opacity:0.00001使敏感表单变得不可见，该网站就像普通的通讯页面（图8-5）。
       Figure 8-5
      : The attacker tricks users into clicking the button by making the sensitive form invisible.
      图8-5：攻击者通过使敏感表单不可见来诱使用户单击按钮。
    If the user is logged into the banking site, they’ll be logged into the iframe too, so the banking site’s server will recognize the requests sent by the iframe as legit. When the user clicks the seemingly harmless button, they’re executing a balance transfer on
     example.com
    ! They’ll have accidentally transferred $5,000 from their bank account balance to the attacker’s account instead of subscribing to a newsletter. This is why we call this attack
     user-interface redressing
    or
     clickjacking
    : the attacker redressed the user interface to hijack user clicks, repurposing the clicks meant for their page and using them on a victim site.
    如果用户已登录银行网站，则他们也将登录iframe，因此银行网站的服务器将识别iframe发送的请求为合法的。 当用户单击看似无害的按钮时，他们正在执行将5000美元从其银行账户余额转移至攻击者账户的余额转移操作，而非订阅通讯。 这就是为什么我们称之为用户界面伪装或点击劫持攻击：攻击者重新设计了用户界面以劫持用户点击，重定向了原本用于其页面的点击并将它们用在受害站点上。
    This is a simplified example. In reality, payment applications will not be implemented this way, because it would violate data security standards. Another thing to remember is that the presence of an easy-to-prevent vulnerability on a critical functionality, like a clickjacking vulnerability on the balance transfer page, is a symptom that the application does not follow the best practices of secure development. This example application is likely to contain other vulnerabilities, and you should test it extensively.
    这只是一个简化的例子。在现实中，支付应用程序不会以这种方式实现，因为这样做将违反数据安全标准。另一件需要记住的事情是，如果在关键功能（例如余额转移页面）上存在易于预防的漏洞，比如点击劫持漏洞，这是应用程序未遵循安全开发最佳实践的症状。这个例子应用程序很可能还存在其他漏洞，你应该进行全面测试。
    Prevention
    Two conditions must be met for a clickjacking vulnerability to happen. First, the vulnerable page has to have functionality that executes a state-changing action on the user’s behalf. A
     state-changing action
    causes changes to the user’s account in some way, such as changing the user’s account settings or personal data. Second, the vulnerable page has to allow itself to be framed by an iframe on another site.
    点击劫持漏洞发生必须满足两个条件。第一，易受攻击的页面必须具有代表用户执行状态更改操作的功能。状态更改操作会以某种方式更改用户账户，例如更改用户的账户设置或个人数据。第二，易受攻击的页面必须允许自己被另一个网站的 iframe 框架化。
    The HTTP response header
     X-Frame-Options
    lets web pages indicate whether the page’s contents can be rendered in an iframe. Browsers will follow the directive of the header provided. Otherwise, pages are frameable by default.
    HTTP响应头X-Frame-Options允许网页指示页面内容是否可以呈现在iframe中。浏览器将遵循提供的头指令。否则，页面默认可呈现在框架中。
    This header offers two options:
     DENY
    and
     SAMEORIGIN
    . If a page is served with the
     DENY
    option, it cannot be framed at all. The
     SAMEORIGIN
    option allows framing from pages of the same origin: pages that share the same protocol, host, and port.
    本标题提供两个选项：DENY和SAMEORIGIN。如果页面使用DENY选项进行服务，它将无法被框架。SAMEORIGIN选项允许来自相同源的页面进行框架：即协议、主机和端口相同的页面。
X-Frame-Options: DENY
X-Frame-Options: SAMEORIGIN
    To prevent clickjacking on sensitive actions, the site should serve one of these options on all pages that contain state-changing actions.
    为了防止在敏感操作时遭受点击劫持攻击，网站应该在所有包含状态变更操作的页面上提供以下选项之一。
    The
     Content-Security-Policy
    response header is another possible defense against clickjacking. This header’s
     frame-ancestors
    directive allows sites to indicate whether a page can be framed. For example, setting the directive to
     'none'
    will prevent any site from framing the page, whereas setting the directive to
     'self'
    will allow the current site to frame the page:
    内容安全策略响应头是对抗点击劫持的另一种可能的防御方式。该响应头的frame-ancestors指令允许网站指示页面是否可以被框架。例如，将指令设置为“none”将阻止任何站点框架该页面，而将指令设置为“self”则允许当前站点框架该页面。
Content-Security-Policy: frame-ancestors 'none';
Content-Security-Policy: frame-ancestors 'self';
    Setting
     frame-ancestors
    to a specific origin will allow that origin to frame the content. This header will allow the current site, as well as any page on the subdomains of
     example.com
    , to frame its contents:
    将框架祖先设置为特定的来源将允许该来源对内容进行框架化。此头文件将允许当前站点以及 example.com 子域上的任何页面对其内容进行框架化：
Content-Security-Policy: frame-ancestors 'self' *.example.com;
    Besides implementing
     X-Frame-Options
    and the
     Content-Security-Policy
    to ensure that sensitive pages cannot be framed, another way of protecting against clickjacking is with
     SameSite
    cookies. A web application instructs
    the user’s browser to set cookies via a
     Set-Cookie
    header. For example, this header will make the client browser set the value of the cookie
     PHPSESSID
    to
     UEhQU0VTU0lE
    :
    除了实现X-Frame-Options和Content-Security-Policy以确保敏感页面不能被嵌套，另一种防止点击劫持的方法是使用SameSite cookies。Web应用程序通过Set-Cookie头指示用户浏览器设置cookie。例如，此头将使客户端浏览器将cookie PHPSESSID的值设置为UEhQU0VTU0lE：。
Set-Cookie: PHPSESSID=UEhQU0VTU0lE 
    In addition to the basic
     cookie_name=cookie_value
    designation, the
     Set-Cookie
    header allows several optional flags you can use to protect your users’ cookies. One of them is the
     SameSite
    flag, which helps prevent clickjacking attacks. When the
     SameSite
    flag on a cookie is set to
     Strict
    or
     Lax
    , that cookie won't be sent in requests made within a third-party iframe:
    除了基本的cookie_name = cookie_value指定之外，Set-Cookie头允许使用几个可选标志，以保护您的用户的cookie。其中之一是SameSite标志，它可以帮助防止点击劫持攻击。当SameSite标志设置为Strict或Lax时，该cookie不会在第三方iframe中发送的请求中发送：
Set-Cookie: PHPSESSID=UEhQU0VTU0lE; Max-Age=86400; Secure; HttpOnly; SameSite=Strict
Set-Cookie: PHPSESSID=UEhQU0VTU0lE; Max-Age=86400; Secure; HttpOnly; SameSite=Lax 
    This means that any clickjacking attack that requires the victim to be authenticated, like the banking example we mentioned earlier, would not work, even if no HTTP response header restricts framing, because the victim won’t be authenticated in the clickjacked request.
    这意味着任何需要受害者进行身份验证的点击劫持攻击，例如我们之前提到的银行示例，即使没有HTTP响应标头限制框架，也不起作用，因为在即被点击劫持的请求中，受害者不会被认证。
    Hunting for Clickjacking
    Find clickjacking vulnerabilities by looking for pages on the target site that contain sensitive state-changing actions and can be framed.
    通过寻找包含敏感状态更改操作并可以被框架的目标网站页面，找到点击劫持漏洞。
    Step 1: Look for State-Changing Actions
    Clickjacking vulnerabilities are valuable only when the target page contains state-changing actions. You should look for pages that allow users to make changes to their accounts, like changing their account details or settings. Otherwise, even if an attacker can hijack user clicks, they can’t cause any damage to the website or the user’s account. That’s why you should start by spotting the state-changing actions on a site.
    点击劫持漏洞只有在目标页面包含状态更改操作时才有价值。您应该寻找允许用户对其帐户进行更改的页面，如更改帐户详细信息或设置。否则，即使攻击者能够劫持用户的点击，也无法对网站或用户的帐户造成任何损害。这就是为什么您应该从网站上识别状态变化的操作开始的原因。
    For example, let’s say you’re testing a subdomain of
     example.com
    that handles banking functionalities at
     bank.example.com
    . Go through all the functionalities of the web application, click all the links, and write down all the state-changing options, along with the URL of the pages they’re hosted on:
    例如，假设您正在测试 example.com 的一个子域名，该子域名在 bank.example.com 上处理银行功能。浏览 Web 应用程序的所有功能，单击所有链接，并记录所有状态更改选项以及它们托管的页面的 URL。
     State-changing requests on
       bank.example.com
    bank.example.com 上的状态更改请求
     Change password:
      bank.example.com/password_change
     Transfer balance:
      bank.example.com/transfer_money
     Unlink external account:
      bank.example.com/unlink
    You should also check that the action can be achieved via clicks alone. Clickjacking allows you to forge only a user’s clicks, not their keyboard actions. Attacks that require users to explicitly type in values are possible, but generally not feasible because they require so much social engineering. For example,
    on this banking page, if the application requires users to explicitly type the recipient account and transfer amount instead of loading them from a URL parameter, attacking it with clickjacking would not be feasible.
    你还应该确认该操作是否仅可通过点击实现。点击劫持仅能伪造用户点击而非键盘操作。攻击需要用户明确输入数值的情况是可能的，但通常并不可行，因为需要大量的社会工程。例如，在这个银行页面上，如果应用程序要求用户明确输入收款人账户和转账金额，而非从URL参数中加载，使用点击劫持攻击将不可行。
    Step 2: Check the Response Headers
    Then go through each of the state-changing functionalities you’ve found and revisit the pages that contain them. Turn on your proxy and intercept the HTTP response that contains that web page. See if the page is being served with the
     X-Frame-Options
    or
     Content-Security-Policy
    header.
    然后，逐个检查您发现的改变状态的功能，并重新访问包含它们的页面。开启代理，并拦截包含该网页的HTTP响应。查看页面是否使用X-Frame-Options或Content-Security-Policy报头提供服务。
    If the page is served without any of these headers, it may be vulnerable to clickjacking. And if the state-changing action requires users to be logged in when it is executed, you should also check if the site uses
     SameSite
    cookies. If it does, you won’t be able to exploit a clickjacking attack on the site’s features that require authentication.
    如果页面没有添加这些头信息，则有可能存在点击劫持漏洞。如果状态改变操作需要在用户登录时执行，请检查站点是否使用 SameSite Cookie。如果是，则无法滥用需要身份验证的站点功能的点击劫持攻击。
    Although setting HTTP response headers is the best way to prevent these attacks, the website might have more obscure safeguards in place. For example, a technique called
     frame-busting
    uses JavaScript code to check if the page is in an iframe, and if it’s framed by a trusted site. Frame-busting is an unreliable way to protect against clickjacking. In fact, frame-busting techniques can often be bypassed, as I will demonstrate later in this chapter.
    虽然设置HTTP响应头是防止这些攻击的最佳方法，但网站可能会有更隐蔽的保护措施。例如，一种名为"frame-busting"的技术使用JavaScript代码检查页面是否处于iframe中，并且是否被受信任的站点框架。"frame-busting"是一种不可靠的防止点击劫持的方式。实际上，"frame-busting"技术经常被绕过，就像我后面在本章将演示的那样。
    You can confirm that a page is frameable by creating an HTML page that frames the target page. If the target page shows up in the frame, the page is frameable. This piece of HTML code is a good template:
    通过创建一个包含目标页面的框架HTML页面，您可以确认该页面是否可嵌入。如果目标页面出现在框架中，则页面是可嵌入的。以下是一个不错的HTML代码模板：
    Clickjack test page
    Web page is vulnerable to clickjacking if the iframe is populated with the target page!
    Step 3: Confirm the Vulnerability
    Confirm the vulnerability by executing a clickjacking attack on your test account. You should try to execute the state-changing action through the framed page you just constructed and see if the action succeeds. If you can trigger the action via clicks alone through the iframe, the action is vulnerable to clickjacking.
    通过在您的测试账户上执行“点击劫持”攻击来确认漏洞。您应该尝试通过刚刚构建的框架页面执行状态更改操作，并查看该操作是否成功。如果您可以仅通过 iframe 上的点击触发该操作，则该操作易受点击劫持攻击。
    Bypassing Protections
    Clickjacking isn’t possible when the site implements the proper protections. If a modern browser displays an
     X-Frame-Options
    protected page, chances are you can’t exploit clickjacking on the page, and you’ll have to find another
    vulnerability, such as XSS or CSRF, to achieve the same results. Sometimes, however, the page won’t show up in your test iframe even though it lacks the headers that prevent clickjacking. If the website itself fails to implement complete clickjacking protections, you might be able to bypass the mitigations.
    如果网站实施了适当的保护措施，则无法进行点击劫持。如果现代浏览器显示与X-Frame-Options受保护的页面，则很有可能无法在该页面上利用点击劫持，并且您将不得不寻找另一个漏洞（例如XSS或CSRF）来实现相同的结果。然而，有时即使缺少防止点击劫持的标头，页面也不会显示在您的测试iframe中。如果网站本身未能实施完整的点击劫持保护，则您可能能够绕开缓解措施。
    Here’s an example of what you can try if the website uses frame-busting techniques instead of HTTP response headers and
     SameSite
    cookies: find a loophole in the frame-busting code. For instance, developers commonly make the mistake of comparing only the top frame to the current frame when trying to detect whether the protected page is framed by a malicious page. If the top frame has the same origin as the framed page, developers may allow it, because they deem the framing site’s domain to be safe. Essentially, the protection’s code has this structure:
    以下是一个示例，您可以尝试此方法，如果网站采用的是框架防护技术而不是HTTP响应头和SameSite cookie：查找框架防护代码中的漏洞。例如，开发人员通常会犯一个错误，只比较当前页面的顶部框架，以检测所保护的页面是否被恶意页面包围。如果顶部框架与被包含页面具有相同的来源，开发人员可能会允许它，因为他们认为框架站点的域是安全的。本质上，保护的代码具有以下结构：“