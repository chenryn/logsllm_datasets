and how an adversary might tamper with its state. Sec-
tion 4 describes an experiment that demonstrates such
tampering and the effectiveness of a prototype monitor
for detecting this tampering.
SELinux [22] is a security module for Linux kernels
that implements a combination of Type Enforcement [3]
and Role-based [11] mandatory access control, now in-
cluded in some popular GNU/Linux distributions. Dur-
ing runtime, SELinux is responsible for enforcing nu-
merous rules governing the behavior of processes. For
example, one rule might state that the DHCP [10] client
daemon can only write to those system conﬁguration
ﬁles needed to conﬁgure the network and the Domain
Name Service [24], but no others. By enforcing this rule,
SELinux can limit the damage that a misbehaving DHCP
client daemon might cause to the system’s conﬁguration
ﬁles should it be compromised by an adversary (perhaps
due to a buffer overﬂow or other ﬂaw).
To enforce its rules, SELinux must make numerous de-
cisions during runtime such as “Does the SELinux con-
ﬁguration permit this process to write this ﬁle?” or “Does
it permit process A to execute program B?” Answering
these questions involves some overhead, so SELinux in-
cludes a component called the access vector cache to
save these answers. Whenever possible, SELinux rapidly
retrieves answers from the AVC, resorting to the slower
method of consulting the policy conﬁguration only on
AVC misses.
On our experimental system, the AVC is conﬁgured to
begin evicting least frequently used entries after reaching
a threshold of 512 entries. Our single-user system never
loaded the AVC much beyond half of this threshold—
although it was occasionally busy performing builds,
these builds tended to pose the same small number of
access control questions again and again. However, one
could imagine a more complex multi-user system that
might cause particular AVC entries to appear and dis-
appear over time. Installations that permit SELinux con-
ﬁguration changes during runtime might also see AVC
entries evicted due to revocation of privileges.
SELinux divides all resources on a system (such as
processes and ﬁles) into distinct classes and gives each
class a numeric Security Identiﬁer or “SID.” It expresses
its mandatory access rules in terms of what processes
with a particular SID may and may not do to resources
with another SID. Consequently, at a somewhat simpli-
ﬁed abstract level, AVC entries take the form of tuples:
The ssid ﬁeld is the SID of the process taking ac-
tion, the tsid ﬁeld is the SID of the resource the pro-
cess wishes to act upon, and the class ﬁeld indicates
the kind of resource (ﬁle, socket, and so on). The
allowed ﬁeld is a bit vector indicating which actions
(read, write, and so on) should be allowed and which
should be denied. Only some of the allowed ﬁeld bits
may be valid—for example, if the questions answered by
SELinux so far have involved only the lowest-order bit,
then that may be the only bit that contains a meaning-
ful 0 or 1. SELinux may or may not ﬁll in the other
allowed ﬁeld bits until a question concerning those
bits comes up. To distinguish a 0 bit indicating “deny”
from a 0 bit indicating “invalid,” the decided ﬁeld
contains a bit vector with 1 bits for all valid posi-
tions in the allowed ﬁeld. The audit-allow and
audit-deny ﬁelds are also bit vectors; they contain
1 bits for operations that should be logged to the system
logger when allowed or denied, respectively.
It is conceivable that adversaries who have already
gained administrative control over a system might wish
to modify the SELinux conﬁguration to give their pro-
cesses elevated privileges. Certainly, they could accom-
plish this most directly by modifying the SELinux con-
ﬁguration ﬁles, but such modiﬁcations would be eas-
ily detected by ﬁlesystem integrity monitors like Trip-
wire [19]. Alternately, they might modify the in-kernel
data structures representing the SELinux conﬁguration—
the same data structures SELinux consults to service an
AVC miss. However, these data structures change in-
292
Security ’06: 15th USENIX Security Symposium
USENIX Association
frequently, when administrators decide to modify their
SELinux conﬁguration during runtime. Consequently,
any tampering might be discovered by a traditional ker-
nel integrity monitor that performs hashing or makes
comparisons with correct, known-good values.
The state of the AVC, on the other hand, is dynamic
and difﬁcult to predict at system conﬁguration time. En-
tries come and go with the changing behavior of pro-
cesses. An adversary might insert a new AVC entry or
modify an old one to effectively add a new rule to the
SELinux conﬁguration. Such an entry might add ex-
tra allowed and decided ﬁeld bits to grant addi-
tional privileges, or remove existing audit-allow and
audit-deny ﬁeld bits to turn off troublesome logging.
Such an entry would override the proper in-memory and
on-disk SELinux conﬁguration for as long as it remained
in the cache. On a single-user installation like our experi-
mental system, it would face little danger of eviction. On
a busier system, frequent use might keep it cached for as
long as needed.
3 The Speciﬁcation Architecture
Our approach for detecting semantic integrity violations
in dynamic kernel data structures is to deﬁne a high-level
security speciﬁcation [20] for kernel data that provides a
simpliﬁed but accurate representation of how kernel ob-
jects in memory relate to one another, as well as a set
of constraints that must hold on those data objects for
the integrity of the kernel to remain intact. The result
is a methodology that allows experts to concentrate on
high-level concepts such as identifying security-relevant
constraints, rather than writing low-level code to parse
kernel data structures. The architecture we propose is
composed of the following ﬁve components:
• A low-level monitor. The monitor is the entity
that provides access to kernel memory at runtime.
While there are a number of possible implemen-
tations, the primary requirement is consistent ac-
cess to all of kernel virtual memory without re-
liance on the correctness of the protected kernel.
Monitors that provide synchronous access to ker-
nel memory, such as virtual machine monitors [13]
or veriﬁable code execution [33], provide consis-
tent views of kernel data, but run on the same host
as the protected system and must contend with lo-
cal applications for processor time. Asynchronous
monitors typically have their own dedicated pro-
cessor [29, 37, 17], but must make sense of snap-
shots of kernel memory that catch data structures
in a temporarily-inconsistent mid-update state. In
addition, monitors with access to system registers
can protect themselves against attempts to bypass
the monitor via malicious register changes [33].
• A model builder. The model builder is responsible
for taking raw data from the low-level monitor and
turning that data into the model abstraction deﬁned
by the speciﬁcation, which is an input to the model
builder. Effectively, the model builder is the bridge
between the “bits” in kernel memory and the ab-
stract objects deﬁned by the user.
• A constraint veriﬁer. As described above, the goal
of the system is to apply high-level constraints to
an abstract model of kernel data. The constraint
veriﬁer operates on objects provided by the model
builder to determine if the constraints identiﬁed by
the speciﬁcation are met.
• Response mechanisms. When a constraint is vio-
lated, there is a security concern within the system.
Depending on the nature of the violated constraint,
an administrator may wish to take actions varying
from logging an error to notifying an administrator
or even shutting down the system. The constraint
veriﬁer is aware of the available response mecha-
nisms and initiates those mechanisms according to
the response determined by the speciﬁcation.
• A speciﬁcation compiler. Speciﬁcations are written
in a high-level speciﬁcation language (or languages)
that describes the model, the constraints, and the re-
sponses to violated constraints. The speciﬁcation
compiler is responsible for turning the high-level
language into a form that can be used by the model
builder and the constraint veriﬁer.
As shown in Figure 2, the ﬁrst four of these are run-
time components that work together to assess the in-
tegrity of a running kernel based on the input speciﬁca-
tion. The speciﬁcation compiler is an ofﬂine component
used only at the time of system setup or when speciﬁ-
cation updates are required. The primary logic of the
monitor is driven by the constraint veriﬁer, which iter-
ates through all constraints to verify each in order. To
facilitate the veriﬁcation of each constraint, the veriﬁer
requests a consistent subset of the model from the model
builder, which either has the information readily avail-
able or uses the low-level monitor to re-build that portion
of the model. If a constraint passes, the veriﬁer simply
continues to the next. Failed constraints cause the veri-
ﬁer to dispatch a response mechanism according to the
speciﬁcation.
We now describe several aspects of the system in more
detail, focusing primarily on the requirements for each
component.
USENIX Association
Security ’06: 15th USENIX Security Symposium
293
Offline
Components
OS Configuration
Policy and Constraints
Specification
Compiler
Model Definition
Specification
Compiled
Constraints
Compiled Model
Runtime 
System
Constraint
Verifier
Model
Data
Model
Builder
Response
Request
Additional
Data
Low−level Data
Alert
Administrator
Response
Mechanisms
Low−level
Monitor
Kernel
Data
Figure 2: The semantic integrity monitor architecture.
3.1 Modeling Kernel Data
The concept of modeling low-level kernel data structures
can be loosely thought of as a form of “inverted software
design.” A software designer’s job is typically to take
a high-level abstraction or set of real-world objects and
represent those objects digitally in the system. One of the
complex tasks for the programmer is efﬁciently and cor-
rectly representing real-world relationships among digi-
tal objects. Object modeling languages like the Uniﬁed
Modeling Language (UML) [1] seek to aid the designer
by providing formal constructs with which to deﬁne ob-
jects. In our system, the goal of the model speciﬁcation
writer is to abstract on the programmer’s choice of data
structures in order to describe the relevant relationships
among digital objects. The resulting model allows an
expert to write constraints at a high enough level of ab-
straction to express relevant object relationships without
getting caught up in low-level details. To this end, the
choice of modeling language directly affects the types
of constraints that can and cannot be expressed on the
model. Modeling languages that fail to capture relevant
details of the underlying system will not allow poten-
tially important constraints to be expressed. Similarly,
modeling languages that provide too much expressive
power on the underlying data will make the job of con-
straint writing overly complex. As a convenience, rather
than inventing our own modeling language, we have cho-
sen to reuse the data structure speciﬁcation language cre-
ated by Demsky and Rinard [7]. After redeﬁning the
language’s semantics for our domain, the syntax proved
effective for our example kernel data speciﬁcations with
only minor modiﬁcations. We discuss these example ker-
nel data speciﬁcations in Section 4.
It should be noted that model speciﬁcations corre-
spond to a particular version (or versions) of the kernel.
Therefore, as updates are made to kernel subsystems,
so must the speciﬁcation be updated. However, once a
speciﬁcation is written for a given kernel version, it can
be shared and used at any deployed location. Further-
more, the speciﬁcation compiler takes into account site-
speciﬁc kernel conﬁguration and symbol information to
allow more widespread use of the speciﬁcation. Finally,
the relationships described in the speciﬁcation will not
change frequently and, even when they do change, will
rarely change signiﬁcantly enough to invalidate the en-
tire speciﬁcation. Tools for automating and improving
the speciﬁcation process are an area for future work.
3.2 Writing Model Constraints
At a high level, constraints are the underlying logic that
determine whether or not the kernel is secure with re-
gard to integrity. Constraints are therefore expressions of
294
Security ’06: 15th USENIX Security Symposium
USENIX Association
predicates reﬂecting invariant relationships among ker-
nel objects represented in the model. Conceptually, con-
straints can be divided into two classes: those that are
inherent to the correct operation of the system and those
that represent site-speciﬁc policy. For example, the hid-
den process example described previously is clearly a vi-
olation of kernel integrity in any running kernel. How-
ever, one can envision a set of external constraints on ker-
nel data objects that do not relate explicitly to the “cor-
rect” operation of the kernel as it was designed by kernel
developers, but rather to conditions that an administrator
has deemed should never occur on that machine. One ex-
ample of such a constraint would be a requirement that
no shell processes have user id zero (root). The require-
ments for a good constraint language include easy ex-
pression of properties of the underlying model, an ability
to specify conditions under which a constraint must hold,
and a mechanism for assigning a response to any violated
constraint. To match our choice of initial modeling lan-
guage, we have adapted Demsky and Rinard’s constraint
language to meet the needs described here [7].
Similar to the model speciﬁcation, the constraints that
must hold for a system may change when kernel devel-
opers make changes. However, like model speciﬁcations,
constraints can be distributed for use at any deployment
where a given model is valid.
3.3 Automating the System
One of the fundamental goals of our architecture is to re-
lieve the engineering difﬁculties related to dynamic ker-
nel data constraint checking and allow the expert to fo-
cus on security-relevant relationships among kernel ob-
jects. To this end, automating the model builder is a crit-
ical step. The primary responsibility of the speciﬁcation
compiler is to provide the model builder with a descrip-
tion of how digital objects should be turned into abstract
objects and how those abstract objects are related. As
in Demsky and Rinard’s work [7], we propose that the
speciﬁcation compiler utilize automatic code generation
to automate the model building and constraint checking
processes. However, unlike the environment in which
Demsky and Rinard’s system functioned, the likely re-
sponse for our system when a constraint fails is not re-
pair. In fact, there may be reasons not to immediately ﬁx
the integrity violation so that more forensic information
can be obtained without the attacker becoming aware that
he or she has been detected. Furthermore, unlike Dem-
sky and Rinard, in our system we do not have the bene-
ﬁt of executing within the running program that we are
checking. Memory accesses are not free and pointer val-
ues are not local. In our system, every pointer derefer-
ence requires read operations by the low-level monitor.
For these reasons, optimizing for repair is not the best
approach for our environment. Rather, optimizing for ef-
ﬁcient object accesses is more appropriate. Finally, per-
forming checks asynchronously with the running kernel
adds some additional challenges.
For a system that is externally analyzing a running ker-
nel, the design of the model builder is non-trivial due to
the complications of constantly changing data within the
kernel. The assumptions that can be made by the model
builder are closely tied to the properties of the low-level
monitor. However, assuming a monitor that is running
asynchronously relative to the protected kernel, the fol-