title:Detecting ICMP Rate Limiting in the Internet
author:Hang Guo and
John S. Heidemann
Detecting ICMP Rate Limiting
in the Internet
Hang Guo(B)
and John Heidemann(B)
Computer Science Department and Information Sciences Institute,
USC, Los Angeles, USA
PI:EMAIL, PI:EMAIL
Abstract. ICMP active probing is the center of many network measure-
ments. Rate limiting to ICMP traﬃc, if undetected, could distort mea-
surements and create false conclusions. To settle this concern, we look
systematically for ICMP rate limiting in the Internet. We create FADER,
a new algorithm that can identify rate limiting from user-side traces with
minimal new measurement traﬃc. We validate the accuracy of FADER
with many diﬀerent network conﬁgurations in testbed experiments and
show that it almost always detects rate limiting. With this conﬁdence,
we apply our algorithm to a random sample of the whole Internet, show-
ing that rate limiting exists but that for slow probing rates, rate-limiting
is very rare. For our random sample of 40,493 /24 blocks (about 2% of
the responsive space), we conﬁrm 6 blocks (0.02%!) see rate limiting at
0.39 packets/s per block. We look at higher rates in public datasets and
suggest that fall-oﬀ in responses as rates approach 1 packet/s per /24
block is consistent with rate limiting. We also show that even very slow
probing (0.0001 packet/s) can encounter rate limiting of NACKs that
are concentrated at a single router near the prober.
1 Introduction
Active probing with pings and traceroutes (both often using ICMP echo requests)
are often the ﬁrst tool network operators turn to assess problems and are widely
used tools in network research. Studies of Internet address usage [4,10], path
performance [13], outages [15,19], carrier-grade NAT deployment [18], DHCP
churn [14] and topology [3,12] all depend on ICMP.
An ongoing concern about active probing is that network administrators rate
limit ICMP. Administrators may do traﬃc policing, limiting inbound ICMP,
and routers often rate-limit generation of ICMP error messages (ICMP types
3 and 11, called here ICMP NACKs). However recent work has emphasized
probing as quickly as possible. For IPv4 scanning, ISI Internet Censuses (2008)
send 1.5k probe/s [10], IRLscanner (2010) sends 22.1k probe/s [11], Trinocular
(2013) sends 20k probes/s [15], ZMap (2013) sends 1.44M probes/s [5], or 14M
probes/s in their latest revision [2], and Yarrp (2016) sends 100k probes/s or
more [3]. Interest in faster probing makes rate limit detection a necessary part
of measurement, since undetected rate limiting can silently distort results.
c(cid:2) Springer International Publishing AG, part of Springer Nature 2018
R. Beverly et al. (Eds.): PAM 2018, LNCS 10771, pp. 3–17, 2018.
https://doi.org/10.1007/978-3-319-76481-8_1
4
H. Guo and J. Heidemann
Although rate limiting is a concern to active probing, we know only two
prior studies that explicitly look for rate limiting in the general Internet [6,17].
Both of their mechanisms are expensive (requiring hundreds of vantage points or
server-side traﬃc of Google’s CDN) and neither of them look at rate limiting to
ICMP echo requests in forward path (Sect. 6). Unlike this prior work, we want to
study forward-path ICMP rate limiting in global scale without intensive traﬃc
probing or extensive sever-side data.
Our ﬁrst contribution is to provide FADER (Frequent Alternation Availabil-
ity Diﬀerence ratE limit detector), a new lightweight algorithm to detect and
estimate forward-path ICMP rate limit across the Internet. Our approach works
from a single vantage point, and requires two scans at diﬀerent rates, detecting
rate limits that take any value between those rates.
Our second contribution is to re-examine two existing public datasets for
signs of ICMP rate limiting in the whole Internet. First, we use random samples
of about 40k /24 blocks to show that ICMP Rate limiting is very rare in the
general Internet for rates up to 0.39 packets/s per /24: only about 1 in 10,000
/24 blocks are rate limited. Second, we look at higher rate scans (up to 0.97
packets/s per /24) and show the response fall-oﬀ in higher rates is consistent
with rate limiting from 0.28 to 0.97 packets/s per /24 in parts of the Internet.
Finally, although low-rate scans do not usually trigger rate limiting, we show
that rate limiting explains results for error replies when Internet censuses cover
non-routed address space.
2 Modeling Rate Limited Blocks
Our detection algorithm uses models of rate limiting in commercial routers.
2.1 Rate Limit Implementations in Commercial Routers
We examined Cisco and Juniper router manuals and two router models (Cisco
ME3600-A and Cisco 7204VXR); most routers implement ICMP rate limiting
with some variation on a token bucket.
With a token bucket, tokens accumulate in a “bucket” of size B tokens at
a rate of L tokens/s. When a packet arrives, it consumes one token and is for-
warded, or the packet is discarded if the token bucket is empty (assuming 1
token per packet). Ideally (assuming smooth traﬃc), for incoming traﬃc of P
packets/s, if P  L, initially all packets will be passed as the bucket drains, then
packet loss and transmission will alternate as packets and tokens arrive and are
consumed. In the long run, when P > L, egress traﬃc exits at rate L packets/s.
We only model steady-state behavior of the token bucket because our active
probing (Sect. 4) lasts long enough (2 weeks, 1800 iterations) to avoid disturbance
from transient conditions.
Detecting ICMP Rate Limiting in the Internet
5
2.2 Modeling Availability
We ﬁrst model availability of a rate limited block—the fraction of IPs that
respond positively to probing. We consider both the true availability (A), ignor-
ing rate limiting, and also the observed availability ( ˆA) aﬀected by rate limiting.
Two observations help model availability. From Sect. 2.1, recall that L
packet/s pass when P packet/s enter token bucket. Therefore L/P is the pro-
portion of probes that pass. Second, if N IPs in target block are responsive,
a non-rate-limited ping hits a responsive IP with probability N/nB (nB repre-
sent number of IP in a /24 block: 256). Combining above two observations gives
us Eq. 1.
(cid:2)
A =
N
nB
and
ˆA =
R =
N
nB
P and
ˆR =
A(L/P ),
A,
(cid:2)
if P > L
otherwise
R(L/P ),
R,
if P > L
otherwise
(1)
(2)
2.3 Modeling Response Rate
Response rate is the positive responses we receive from target block per second.
In our model (Eq. 2), we consider both the true value (R), ignoring rate limit,
and the observed value ( ˆR), aﬀected by rate limit.
2.4 Modeling Alternation Count
Response Alternation is deﬁned as the transition of an address from responsive
to non-responsive or the other way around. Rate limits cause frequent alternation
between periods of packet response and drops as the token bucket ﬁlls and drains.
Frequent alternation helps distinguish rate limiting from other sources of packet
loss such as networks outages (since outages are long-lived). Frequent alternation
is, however, less eﬀective in distinguishing rate limiting from transient network
congestion because congestion losses are randomized and create frequent alter-
nation. An additional round of probing ensures the detection results are robust
against transient network congestion.
We model the count of observed response alternations, ˆC, both accurately and
approximately. The accurate model (in our technical report [9] due to space) ﬁts
measured values precisely but are not computable because our data has r = 1800
iterations and the number of states scales as 2r. The approximate model (Eq. 3)
provides single expression covering all r but ﬁts only when P (cid:2) L (so that
consecutive packets from same sender are never passed by token bucket). We
use it in our evaluation since it is feasible to solve when r = 1800.
ˆC = 2(L/P )N r, when P (cid:2) L
ˆL =
nB ˆAH PH
ˆNL
(3)
(4)
6
H. Guo and J. Heidemann
3 Detecting Rate Limited Blocks
The models (Sect. 2) assist our detection algorithm.
3.1
Input for Detection
Our detection algorithm requires low- and high-rate measurements as input.
Low-rate measurements must be slower than any rate limit that are detected.
Fortunately the routers we study have minimal values for rates, and we believe
our low-rate, at 0.0001 pings/s per block, is below that in most cases (Sect. 4.4
describes one exception). Low-rate captures the true availability (A) of target
blocks.
High-rate measurements must exceed the target rate limit. It sets the upper
bound for FADER’s detection range. In addition, high-rate measurements must
be repeated to use our alternation detection algorithm (Algorithm 3.1). Valida-
tion in Sect. 5.1 shows that 6 repetitions is suﬃcient but our data include 1800
repetitions.
Both low- and high-rate measurements need to last a multiple of 24 h to
account for regular diurnal variations in address usage [16].
Algorithm 1. Frequent Alternation Test
Input:
ˆC: observed response alternation count in fast scan
r: number of probing rounds in fast scan
ˆNL: responsive IP count observed in slow scan
ˆNH : responsive IP count observed in each round of
fast scan (where responsive IPs observed at ith round
is
ˆNHi )
Output:
Of at: results of frequent alternation test
then
1: if ˆC > (2 ˆNLr)/Trej and NotDirTmpDn( ˆNH , ˆNL, r)
2: Of at ← Passed // has freq alternations
3: else
4: Of at ← Failed // no freq alternations
5: end if
if
for i = 1 to r do
≥ ˆNL then
ˆNHi
return f alse
6: function NotDirTmpDn( ˆNH , ˆNL , r)
7:
8:
9:
10:
11:
12:
return true
13: end function
end for
end if
Algorithm 2. FADER
Input:
ˆAL/ ˆAH : measured block availability in slow/fast scan
ˆNL: responsive IP count in slow scan
Trej : lower bound of RL-Rej phase
Of at: result of frequent alternation test
Output:
Of ader : detection result of FADER
else
drop in faster probing
if Of at = Passed then
Of ader ← Can-Not-Tell
if ˆAH / ˆAL  0.1 then// significant ˆA
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: else// no significant ˆA drop in faster probing
14: Of ader ← Not-Rate-Limited
15: end if
Of ader ← Rate-Limited
else // no freq alternations
Of ader ← Can-Not-Tell
end if
end if
3.2 Four Phases of ICMP Rate Limiting
The models from Sect. 2 allow us to classify the eﬀects of ICMP rate limiting
into four phases (Fig. 1). These phases guide our detection algorithm:
1. Non-RL (P  TrejL, Trej = 100): most packets are dropped ( ˆA < 0.01N/nB)
and response alternations are rare.
These phases also identify regions where no algorithm can work: rate lim-
its right at the probing rate (RL-Tran phase, due to not enough change in
response), or far above it (RL-Rej phase, because the block appears completely
non-responsive, giving little information). We use empirical thresholds 1.1L and
100L to deﬁne these two cases.