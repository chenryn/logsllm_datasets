# Title: Detecting ICMP Rate Limiting in the Internet

## Authors:
- Hang Guo
- John S. Heidemann

### Abstract
ICMP active probing is a fundamental tool for many network measurements. If undetected, rate limiting on ICMP traffic can distort these measurements and lead to incorrect conclusions. To address this concern, we systematically investigate ICMP rate limiting across the Internet. We introduce FADER, a novel algorithm that can identify rate limiting from user-side traces with minimal additional measurement traffic. We validate FADER's accuracy through various network configurations in testbed experiments, demonstrating its high detection rate. Applying FADER to a random sample of the entire Internet, we find that rate limiting is rare for slow probing rates. For our sample of 40,493 /24 blocks (approximately 2% of the responsive space), only 6 blocks (0.02%) exhibit rate limiting at 0.39 packets/s per block. We also analyze higher-rate public datasets, suggesting that a drop in responses as rates approach 1 packet/s per /24 block is consistent with rate limiting. Additionally, even very slow probing (0.0001 packet/s) can encounter rate limiting of NACKs concentrated at a single router near the prober.

### 1. Introduction
Active probing using pings and traceroutes (often via ICMP echo requests) is a primary tool for network operators to diagnose issues and is widely used in network research. Studies on Internet address usage [4, 10], path performance [13], outages [15, 19], carrier-grade NAT deployment [18], DHCP churn [14], and topology [3, 12] all rely on ICMP.

A significant concern with active probing is the potential for network administrators to rate limit ICMP. Administrators may implement traffic policing to limit inbound ICMP, and routers often rate-limit the generation of ICMP error messages (ICMP types 3 and 11, referred to here as ICMP NACKs). Recent work has emphasized the importance of rapid probing. For IPv4 scanning, ISI Internet Censuses (2008) send 1.5k probes/s [10], IRLscanner (2010) sends 22.1k probes/s [11], Trinocular (2013) sends 20k probes/s [15], ZMap (2013) sends 1.44M probes/s [5], or 14M probes/s in their latest revision [2], and Yarrp (2016) sends 100k probes/s or more [3]. The increasing interest in faster probing makes it essential to detect rate limiting, as undetected rate limiting can silently distort results.

Despite the concern, only two prior studies have explicitly looked for rate limiting in the general Internet [6, 17]. Both of these mechanisms are resource-intensive, requiring hundreds of vantage points or server-side traffic from Googleâ€™s CDN, and neither examines rate limiting for ICMP echo requests in the forward path (Section 6). Unlike previous work, we aim to study forward-path ICMP rate limiting on a global scale without extensive traffic probing or server-side data.

### 2. Modeling Rate Limited Blocks

#### 2.1 Rate Limit Implementations in Commercial Routers
We examined Cisco and Juniper router manuals and two specific models (Cisco ME3600-A and Cisco 7204VXR). Most commercial routers implement ICMP rate limiting using a token bucket mechanism. In a token bucket, tokens accumulate in a "bucket" of size \( B \) tokens at a rate of \( L \) tokens/s. When a packet arrives, it consumes one token and is forwarded, or discarded if the bucket is empty. For incoming traffic of \( P \) packets/s, if \( P \leq L \), all packets will be passed. If \( P > L \), egress traffic exits at rate \( L \) packets/s. Our model focuses on steady-state behavior, as our active probing lasts long enough (2 weeks, 1800 iterations) to avoid transient conditions.

#### 2.2 Modeling Availability
We model the availability of a rate-limited block, defined as the fraction of IPs that respond positively to probing. We consider both the true availability \( A \) (ignoring rate limiting) and the observed availability \( \hat{A} \) (affected by rate limiting). Two key observations help in modeling availability:
1. From Section 2.1, \( L \) packets/s pass when \( P \) packets/s enter the token bucket, so \( \frac{L}{P} \) is the proportion of probes that pass.
2. If \( N \) IPs in the target block are responsive, a non-rate-limited ping hits a responsive IP with probability \( \frac{N}{nB} \) (where \( nB \) represents the number of IPs in a /24 block: 256).

Combining these, we get:
\[
A = \frac{N}{nB}
\]
\[
\hat{A} = 
\begin{cases} 
A \left( \frac{L}{P} \right) & \text{if } P > L \\
A & \text{otherwise}
\end{cases}
\]

#### 2.3 Modeling Response Rate
The response rate is the number of positive responses received from the target block per second. We consider both the true value \( R \) (ignoring rate limiting) and the observed value \( \hat{R} \) (affected by rate limiting):
\[
R = \frac{N}{nB} \cdot P
\]
\[
\hat{R} = 
\begin{cases} 
R \left( \frac{L}{P} \right) & \text{if } P > L \\
R & \text{otherwise}
\end{cases}
\]

#### 2.4 Modeling Alternation Count
Response alternation is defined as the transition of an address from responsive to non-responsive or vice versa. Rate limits cause frequent alternation between periods of packet response and drops as the token bucket fills and drains. Frequent alternation helps distinguish rate limiting from other sources of packet loss such as network outages. However, it is less effective in distinguishing rate limiting from transient network congestion, which also causes frequent alternation. An additional round of probing ensures robust detection against transient congestion.

We model the count of observed response alternations \( \hat{C} \) both accurately and approximately. The accurate model fits measured values precisely but is computationally infeasible due to the large number of states. The approximate model provides a single expression covering all rounds but is only accurate when \( P \ll L \):
\[
\hat{C} = 2 \left( \frac{L}{P} \right) N r \quad \text{when } P \ll L
\]
\[
\hat{L} = \frac{nB \hat{A} P_H}{\hat{N}_L}
\]

### 3. Detecting Rate Limited Blocks

#### 3.1 Input for Detection
Our detection algorithm requires low- and high-rate measurements as input. Low-rate measurements must be slower than any detected rate limit, while high-rate measurements must exceed the target rate limit. Both sets of measurements need to span multiple 24-hour periods to account for diurnal variations in address usage.

#### 3.2 Four Phases of ICMP Rate Limiting
The models from Section 2 allow us to classify the effects of ICMP rate limiting into four phases:
1. **Non-RL (P < L)**: All packets pass, and there are no response alternations.
2. **RL-Pass (L < P < 1.1L)**: Some packets pass, and there are some response alternations.
3. **RL-Trans (1.1L < P < 100L)**: Most packets are dropped, and response alternations are frequent.
4. **RL-Rej (P > 100L)**: Most packets are dropped, and response alternations are rare.

These phases guide our detection algorithm and help identify regions where no algorithm can work, such as rate limits right at the probing rate (RL-Trans phase) or far above it (RL-Rej phase).

### Algorithms
**Algorithm 1: Frequent Alternation Test**
- **Input**: 
  - \( \hat{C} \): observed response alternation count in fast scan
  - \( r \): number of probing rounds in fast scan
  - \( \hat{N}_L \): responsive IP count observed in slow scan
  - \( \hat{N}_H \): responsive IP count observed in each round of fast scan
- **Output**: 
  - \( O_{fat} \): result of frequent alternation test

```python
def frequent_alternation_test(C_hat, r, N_L_hat, N_H_hat):
    if C_hat > (2 * N_L_hat * r) / T_rej and not_direct_temporary_down(N_H_hat, N_L_hat, r):
        return "Passed"
    else:
        return "Failed"

def not_direct_temporary_down(N_H_hat, N_L_hat, r):
    for i in range(r):
        if N_H_hat[i] >= N_L_hat:
            return False
    return True
```

**Algorithm 2: FADER**
- **Input**: 
  - \( \hat{A}_L / \hat{A}_H \): measured block availability in slow/fast scan
  - \( \hat{N}_L \): responsive IP count in slow scan
  - \( T_{rej} \): lower bound of RL-Rej phase
  - \( O_{fat} \): result of frequent alternation test
- **Output**: 
  - \( O_{fader} \): detection result of FADER

```python
def fader(A_L_hat, A_H_hat, N_L_hat, T_rej, O_fat):
    if O_fat == "Passed":
        if A_H_hat / A_L_hat < 0.1:
            return "Rate-Limited"
        else:
            return "Can-Not-Tell"
    else:
        return "Not-Rate-Limited"
```

### Conclusion
FADER is a lightweight and effective algorithm for detecting ICMP rate limiting in the Internet. By using minimal additional measurement traffic and validating its accuracy through testbed experiments, we demonstrate that FADER can reliably detect rate limiting. Our analysis of a random sample of the Internet shows that rate limiting is rare for slow probing rates, but becomes more common at higher rates. This work highlights the importance of considering rate limiting in network measurements to ensure accurate and reliable results.