either sent or received message – msgs. The purpose of the procedure described
here is to generate a message type candidate from s. Note that concrete values
satisfying the constraints of s on msgs represent valid messages in the protocol.
We assume that these messages are part of the same message type. We ask
the symbolic execution engine to solve msgs and generate NUM SOL2 possible
concrete values for msgs.
Let x be the set of generated concrete messages. We extract Px as described
in Section 5.1. Then, we iteratively reﬁne Px by trying to ﬁnd concrete values
2 In our implementation NUM SOL = 10
PISE: Protocol Inference using Symbolic Execution and Automata Learning
13
m′ of msgs, that contradict Px in a sense that ¬Px(m′) is True. Such m′ are
concrete values that can appear in msgs in a real execution (since they were
solution to the msgs). Nevertheless, they are not represented by Px. In case we
ﬁnd such m′, we add them to x and regenerate Px. We repeat this process until
the solver is unable to ﬁnd additional m′ that contradict Px. This procedure
allows us to ﬁnd Px that represents all messages that belong to the assumed
message type, based only on a small subset of such messages.
6
Optimizations
We develop several optimizations to reduce the running time of the method and
allow it to scale to real-world protocol implementations. These optimizations take
advantage of the characteristics of network protocols and the algorithm itself.
Since symbolic execution is the most time consuming part of the algorithm,
the developed optimizations focus on reducing the number of needed symbolic
executions, as well as reducing the running time of symbolic executions.
Preﬁx Closed Property This optimization leverages the fact that the pro-
tocol’s regular language L is a preﬁx-closed set (See Section 3). It is based on
a similar technique, employed in [13]. The optimization allows to answer some
membership queries immediately by the Learner without having to resort to
symbolic execution. Every membership query w that was answered with False
is stored by the membership oracle in a cache. For every membership query w
sent to the oracle, it is ﬁrst checked whether there exists x, y ∈ Σ∗ such that
xy = w and x is in the cache. In such a case, the query immediately returns
False. In other words, if a preﬁx of w is not in L, then by deﬁnition of preﬁx-
closed set it must hold that w /∈ L. Thus, we avoid unnecessary applications of
symbolic execution.
When, during the discovery of new message types, an alphabet symbol is
removed and L* is restarted, all queries w in the cache that contain a removed
symbol are removed from the cache. These queries are invalid with the new
alphabet and cannot be a preﬁx of a query over the new alphabet.
Fast Equivalence Queries Let w ∈ Σ∗ be a query for which the member-
ship oracle answered True, and let ContA(w) be the returned set of alphabet
candidates. We store w and its associated ContA(w) in a cache called continua-
tions cache. The equivalence oracle answers an equivalence query for DFA M by
utilizing this cache. The oracle checks consistency of M with the continuations
cache: for every w in the cache and for every σ ∈ ContA(w), it checks whether M
accepts w·σ. If M rejects w·σ, the equivalence oracle returns False and returns
w · σ as a counterexample. Thus it alleviates the need to run symbolic execution
to answer the query. Note that, the cache stores alphabet symbols after resolving
collisions, and not message type candidates. This is necessary so that the cache
can return counterexamples over the current alphabet. When alphabet symbol
is removed, all cache entries containing the removed symbol are erased.
14
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
The correctness of this optimization follows from the deﬁnition of ContA(w).
According to the deﬁnition, every state machine M that claims L(M) = L should
satisfy w · σ ∈ L(M).
Execution Cache This optimization uses symbolic states s resulting at the
end of the monitoring phase for w as initial states for query wx for any x ∈ Σ∗.
All queries w for which the teacher returns True are stored in a cache called
”Execution Cache” with all active symbolic states resulting at the end of the
monitoring phase for w. Then, whenever a query w′ is sent, the teacher ﬁnds
decomposition w′ = p.s, p = p1 . . . pk such that p is the longest word in the
cache. Then, the monitoring phase for w′ begins with the states saved for p, in
the i = k + 1 stage of the monitoring. We skip the ﬁrst k stages because the
states saved for p contains exactly all execution paths for sessions p1 . . . pk. The
rest of the query remains the same as described in Section 5.4. We note that,
when alphabet symbols are removed, all entries in the cache that include the
removed symbol should also be removed.
7
Implementation, Results and Evaluation
In this section we present the details of our implementation of the presented
method and explore its performance. We evaluated our method against various
protocol implementations (including SMTP and other non-standard protocols),
however due to space constraints we present here only an evaluation against
Gh0st RAT’s C&C protocol.
7.1
Implementation
The algorithm was implemented3 as two independent modules for the Learner
and the Teacher. The Learner is implemented as a Java program that commu-
nicates with the Teacher using local socket. The Teacher is implemented as a
Python program that serves the Learner’s queries. We base our implementation
on two open source tools: (1) LearnLib [13] – implements the L* algorithm and
its variations (for example, [14]); (2) angr [15] – a library that provides static
analysis and symbolic execution engine for binary codes.
Learning Client (Learner) The Learner begins by initializing a learning pro-
cess with LearnLib’s implementation of L*. Membership queries are ﬁrst checked
with the preﬁx-closed cache (See Section 6). In case of a miss, the query is sent
to the Teacher. If the Teacher answers that w ∈ L, then ContA(w) is analyzed
for new message types which are added to Σ. Intersections between message
types are handled as described in Section 5.2.
Conjecture DFA is ﬁrst checked against the continuations cache as described
in Section 6. If the conjectured DFA is found to accept all continuations in the
3 https://github.com/ron4548/{InferenceClient,InferenceServer}
PISE: Protocol Inference using Symbolic Execution and Automata Learning
15
cache, an equivalence query approximation is triggered. A test suite is generated
using the Wp-Method [11] and is tested as explained in Section 5.3. Missing mes-
sage type are handled as described in Section 5.2. Counterexamples are handled
by the internal implementation of L*.
We use the following features of LearnLib: Classical L* implementation; Sup-
port for growing alphabet in L*; Test suite generation with Wp-Method; Preﬁx-
closed cache (See Section 6). On the other hand, we implemented the following
modiﬁcations: (1) Alphabet symbols as tuples ⟨D, P⟩; (2) Handling of alphabet
changes and collisions (Section 5.2); (3) Continuations cache to support Fast
equivalence queries. (Section 6); (4) Running tests suites to approximate modi-
ﬁed equivalence queries (Section 5.3).
Symbolic Execution Server (Teacher) Our Teacher runs symbolic execution
using angr, and is the only component that interacts with the binary code. The
Teacher initializes symbolic execution for the binary code and setups the hooking
of the send/receive functions the user provides. The Teacher receives membership
queries in a loop, until the Learner ﬁnishes the learning. When a membership
query is received, we ﬁrst check the execution cache optimization (See Section 6),
in case of a miss the monitoring phase executes as described in Section 5.4. If
the query results with True, the probing phase runs and generates message type
candidates. These candidates are collected and sent back to the Learner.
7.2
Gh0st RAT
Gh0st RAT is a well known malware4. Once an instance of Gh0st RAT is run
on the victim’s computer, the attacker has full control over the system. This
includes access to the screen, microphone and camera. The attacker controls the
malware using a C&C protocol. The source code of some variants of Gh0st is
available on the web. We chose to work with one of them5. In this variant, the
RAT runs in a multi-threaded process which connects to the attacker’s server.
When a command is received, a new thread and a new connection are created
to handle the command and its further communications.
Initially, we applied our method on this variant. However, angr [15] is not
well-suited for multi-threaded programs. In addition, angr does not fully support
Windows API. This lead to diﬃculties with applying our method on the Gh0st
RAT binary directly. To validate that the proposed method can infer a state
machine as complex as that of Gh0st RAT, we opted for a diﬀerent approach. We
re-implemented most of the malware’s C&C protocol with a simpler architecture
that does not involve threads. We applied our method on this program.
We provided our method with two functions that the program uses in order
to send and receive messages from the network: get message and send message.
Both get a message buﬀer and its length. The full state machine is complex and
contains 27 states and 52 transitions (without rejecting states). We show the full
state machine and the discovered alphabet symbols in Appendix A.3.
4 https://attack.mitre.org/software/S0032/
5 https://github.com/yuanyuanxiang/SimpleRemoter
16
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
In Figure 4 we show a branch of the state machine, that handles a com-
mand to stream the camera of the victim. In this branch, the attacker sends
a command to open the camera stream ([R] WEBCAM). Then, the client sends
information regarding the stream ([S] BMPINFO) and waits to receive from the
attacker a command to begin streaming ([R] NEXT). From now on, the client
sends periodically a bitmap of the webcam to the attacker’s server ([S] BMP).
By default, this bitmap is not compressed. The attacker can enable compres-
sion of the stream ([R] COMPR ON) and disable it ([R] COMPR OFF). When the
compression is on, the bitmap is sent compressed (COMPR BMP).
q0
start
q1
q2
q3
q4
[R] WEBCAM
[S] BMPINFO
[R] NEXT
[R] COMPR OFF
[S] BMP
[R] COMPR ON
[S] COMPR BMP
[R] COMPR ON
[R] COMPR OFF
Fig. 4. The branch in Gh0st RAT C&C protocol that handles webcam streaming. The
letter in the square brackets indicates whether the message is sent or received.
Statistics of the learning process are shown in Table 1. 45 message types were
discovered. The learner issued about 45,000 membership queries; more than 78%
of them were answered by the preﬁx-closed cache. Only a single equivalence query
was issued. This shows the dramatic eﬀectiveness of the continuations cache to
reduce the number of costly equivalence queries. There are no discrepancies
between the learnt DFA and the protocol’s state machine.
Learning time:
142 seconds
Total Membership queries:
45488
Total Equivalence queries:
1
Preﬁx-Closed cache miss rate:
0.2184
Alphabet size:
45
Table 1. Gh0st RAT learning statistics
8
Conclusions
In this work we present a novel method for inferring the state machine of a
protocol implemented by a binary with no a-priori knowledge of the protocol.
Our method is based on extended symbolic execution and modiﬁed automata
learning. The method assumes access to only the implementation of a single peer
of the protocol.
We implemented and validated our method on several protocols implemen-
tations. As demonstrated by the Gh0st RAT use case, the method can infer
complex protocols with dozens of message types. Nonetheless, this use case also
highlighted that the method will preform as a good as the symbolic execution
engine it relies on.
PISE: Protocol Inference using Symbolic Execution and Automata Learning
17
A
Appendix
A.1
Algorithm to approximate equivalence query using a test suite
Algorithm 2 The procedure to approximate equivalence queries
1: function run test suite(M, T ⊂ Σ∗
M)
2:
for all w ∈ T do
3:
⟨w ∈ L, ContA(w)⟩ ← membership(w)
4:
if w ∈ L then
5:
if ContA(w) \ ΣM ̸= ∅ then
6:
return ⟨False, w, ContA(w)⟩
7:
end if
8:
if w /∈ L(M) then
9:
return ⟨False, w⟩
10:
end if
11:
else if w ∈ L(M) then
12:
return ⟨False, w⟩
13:
end if
14:
end for
15:
return True
16: end function
A.2
Example of probing message type candidates
To illustrate how a conditional branch reveals information on a symbolic value,
consider the pseudo-code in Listing 1.1 of a binary code:
Listing 1.1. Pseudo-code to demonstrate the probing phase
1:
Send ( Connect ) ;
2:
msg = Receive ( ) ;
3:
i f
(msg == ”HelloV1” ) {
4:
Send ( ” InitV1 ” ) ;
5:
. . .
6:
} else
i f
(msg == ”HelloV2” ) {
7:
Send ( ” InitV2 ” ) ;
8:
. . .
9:
} else {
10:
abort ( ) ;
11: }
Assume a query w = ⟨S, P⟩ where P = (B0B1B2B3B4B5B6 = ”Connect”).
The monitoring phase for this query and this binary code is done with a single
satisﬁable state in line 2. The probing phase resumes this state. In line 2 the
binary code receives msg in a state s. msg refers to a symbolic value with no
18
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
constraints, as it is an input from the network. A state s′ = s is resumed with
msgs′ = msg. The execution splits according to the conditional branches: a state
s1 represents execution at line 4 with a constraint that msg = ”HelloV1”, a state
s2 represents execution at line 7 with a constraint that msg = ”HelloV2” and a
state s3 represents execution at line 10 which aborts and is discarded. Both s1
and s2 represent a call to send, which triggers the generation of message type