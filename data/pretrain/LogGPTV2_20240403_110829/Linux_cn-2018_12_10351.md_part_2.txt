### 优化后的文本

#### 每个 CPU 的系统寄存器
由于每个 CPU 都能同时运行不同的用户进程，我们重新定义了符号 `curenv`，使其指向 `cpus[cpunum()].cpu_env`（或 `thiscpu->cpu_env`），即当前正在执行代码的 CPU 上当前运行环境的指针。

所有寄存器，包括系统寄存器，都是每个 CPU 独有的。因此，初始化这些寄存器的指令，如 `lcr3()`、`ltr()`、`lgdt()` 和 `lidt()`，必须为每个 CPU 分别执行一次。为此，定义了函数 `env_init_percpu()` 和 `trap_init_percpu()`。

**练习 3**
- 修改 `mem_init_mp()` 函数（位于 `kern/pmap.c`）以从 `KSTACKTOP` 开始映射每个 CPU 的栈，正如在 `inc/memlayout.h` 中所展示的那样。每个栈大小应为 `KSTKSIZE` 字节加上未映射的保护页 `KSTKGAP`。确保你的代码能够通过 `check_kern_pgdir()` 中的新检查。

**练习 4**
- 在 `trap_init_percpu()`（位于 `kern/trap.c`）中，为 BSP 初始化 TSS 和 TSS 描述符。尽管在实验 3 中这段代码已对 BSP 运行过，但在其他 CPU 上可能会出错。请修改该代码，使之能在所有 CPU 上正常工作。（注意：新代码不应使用全局变量 `ts`）

完成上述练习后，在 QEMU 中使用 4 个 CPU（通过命令 `make qemu CPUS=4` 或 `make qemu-nox CPUS=4`）运行 JOS，预期输出如下：
```
...
Physical memory: 66556K available, base = 640K, extended = 65532K
check_page_alloc() succeeded!
check_page() succeeded!
check_kern_pgdir() succeeded!
check_page_installed_pgdir() succeeded!
SMP: CPU 0 found 4 CPU(s)
enabled interrupts: 1 2
SMP: CPU 1 starting
SMP: CPU 2 starting
SMP: CPU 3 starting
```

#### 锁定
在 `mp_main()` 中初始化 AP 后，我们的代码迅速启动。然而，在进一步增强 AP 之前，需要处理多个 CPU 同时运行内核代码的竞争情况。最简单的方法是使用大内核锁。这是一种单一的全局锁，当一个环境进入内核模式时锁定，离开内核模式时解锁。在此模型下，用户模式中的环境可以在任何可用的 CPU 上并行运行，但只有一个环境可以处于内核模式；试图进入内核模式的其他环境将被迫等待。

`kernel_lock` 大内核锁在 `kern/spinlock.h` 中声明，并提供了 `lock_kernel()` 和 `unlock_kernel()` 快捷函数来获取/释放锁。你应在以下四个位置应用大内核锁：
- 在 `i386_init()` 中，BSP 唤醒其他 CPU 之前。
- 在 `mp_main()` 中，初始化 AP 之后，调用 `sched_yield()` 以开始在该 AP 上运行环境。
- 在 `trap()` 中，当从用户模式捕获到陷阱时。
- 在 `env_run()` 中，切换到用户模式前。

**练习 5**
- 在上述描述的位置通过调用 `lock_kernel()` 和 `unlock_kernel()` 应用大内核锁。

如果你的锁定正确，目前还无法测试它，但在下一个练习中实现调度后，就可以进行测试了。

**问题 2**
- 即使使用了大内核锁，为什么每个 CPU 仍需独立的内核栈？请描述一种即使在大内核锁保护下的共享内核栈可能引发错误的情景。

**小挑战！**
- 尽管大内核锁简单易用，但它消除了内核模式的所有并发性。现代操作系统通常采用细粒度锁定方法来提高性能。如果足够勇敢，请尝试删除 JOS 中的大内核锁，引入更复杂的并发控制机制。你可以考虑使用自旋锁来保护以下组件：
  - 页分配器
  - 控制台驱动
  - 调度器
  - IPC 状态（将在 Part C 实现）

#### 循环调度
接下来的任务是在 JOS 内核中实现循环调度，以便在多个环境间交替执行。具体步骤如下：
- 在 `kern/sched.c` 文件中的 `sched_yield()` 函数负责选择新的环境运行。它按顺序遍历 `envs[]` 数组，从上一个运行的环境之后开始搜索（或从数组起点开始，如果之前没有运行的环境），找到状态为 `ENV_RUNNABLE` 的第一个环境，并调用 `env_run()` 切换至该环境。
- `sched_yield()` 必须确保任何时候不会有两个 CPU 同时运行相同的环境。可以通过检查环境状态是否为 `ENV_RUNNING` 来判断其是否正在某个 CPU 上运行。
- 我们已经为你实现了一个新的系统调用 `sys_yield()`，用户环境可调用此系统调用来让内核执行 `sched_yield()` 并自愿放弃 CPU 控制权给另一个环境。

**练习 6**
- 按照以上说明，在 `sched_yield()` 中实现循环调度。别忘了更新 `syscall()` 以分发 `sys_yield()`。
- 确保在 `mp_main` 中调用了 `sched_yield()`。
- 修改 `kern/init.c` 以创建至少三个运行程序 `user/yield.c` 的环境。
- 运行 `make qemu`。你应该能看到环境之间来回切换五次。
- 也可以使用多个 CPU 测试：`make qemu CPUS=2`。

预期输出示例：
```
...
Hello, I am environment 00001000.
Hello, I am environment 00001001.
Hello, I am environment 00001002.
Back in environment 00001000, iteration 0.
Back in environment 00001001, iteration 0.
Back in environment 00001002, iteration 0.
Back in environment 00001000, iteration 1.
Back in environment 00001001, iteration 1.
Back in environment 00001002, iteration 1.
...
```

**问题 3**
- 在 `env_run()` 中，你需要调用 `lcr3()`。解释为何在加载 `%cr3` 寄存器前后引用参数 `e` 是安全的？

**问题 4**
- 无论何时内核从一个环境切换到另一个环境，都必须保存旧环境的寄存器内容。这是为什么？这种情况发生在什么地方？

**小挑战！**
- 为内核添加一个简单的调度策略，例如固定优先级调度器，它会为每个环境分配优先级并在执行时优先选择高优先级的环境。如果你愿意冒险，可以尝试实现类 Unix 的可调整优先级调度器，甚至彩票调度器或跨步调度器。
- 编写一两个测试程序验证你的调度算法是否按预期工作。如果完成了本实验的 Part B 和 Part C 部分的 `fork()` 和 IPC，编写这些测试程序将更容易。

**小挑战！**
- 目前 JOS 内核还不支持 x87 协处理器、MMX 指令集或流式 SIMD 扩展 (SSE)。扩展 `Env` 结构以提供存储浮点状态的空间，并修改上下文切换代码以在环境切换时保存和恢复正确的状态。`FXSAVE` 和 `FXRSTOR` 指令可能对你有所帮助，但请注意它们仅在较新的处理器上可用。编写一个用户级测试程序来验证浮点功能。