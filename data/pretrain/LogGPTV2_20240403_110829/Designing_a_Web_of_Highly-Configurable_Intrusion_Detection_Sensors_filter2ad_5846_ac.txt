### MetaSTAT: Enhancing Intrusion Detection through Sensor Reconfiguration

MetaSTAT leverages the databases described in the previous section to assist the Intrusion Detection Administrator (IDA) in reconfiguring a web of sensors. To better illustrate the operations involved in reconfiguration and the support provided by MetaSTAT, we will use an example.

#### Example Scenario

Suppose the IDA notices or is notified of suspicious FTP activity in a subnetwork within their organization. Typically, the IDA would contact the responsible network administrator to install and/or activate monitoring software for data collection and analysis. The IDA might also log in remotely to specific hosts for manual analysis. Both activities are labor-intensive and time-consuming.

MetaSTAT streamlines this process by enabling the IDA to interact with a centralized control application (the MetaSTAT console) and request a check for potential FTP-related abuse in the subnetwork. This request triggers a series of actions:

1. **Scenario Plugin Search**:
   - The Module Database is searched for plugins related to the keyword "FTP". The IDA's request is translated into the following SQL query:
     ```sql
     SELECT module_id, name, os_platform, description
     FROM Module_Index
     WHERE (name LIKE '%ftp%' OR description LIKE '%ftp%')
     AND type="plugin";
     ```
   - The query returns a list of relevant plugins, such as `wu-ftp-bovf` and `ftpd-quote-abuse`. The IDA selects these plugins for installation.

2. **Activation Dependency Check**:
   - The Module Database is examined for activation dependencies. For the `wu-ftp-bovf` plugin, the following query is executed:
     ```sql
     SELECT dep_module_id FROM Activation_Dependency
     WHERE module_id="module_1";
     ```
   - The results indicate that the `wu-ftp-bovf` plugin requires the `ftp` language extension. A similar query for the `ftpd-quote-abuse` plugin shows it requires the `syslog` language extension.

3. **Functional Dependency Check**:
   - The Module Database is queried for functional dependencies. For the `wu-ftp-bovf` plugin:
     ```sql
     SELECT input_id FROM Module_Input WHERE module_id="module_1";
     ```
   - The query returns `FTP PROTOCOL`, indicating that the plugin uses FTP protocol events as input. Similarly, the `ftpd-quote-abuse` plugin has a functional dependency on `SYSLOG` events.

4. **Event Provider Search**:
   - The Module Database is searched for modules that can provide the required inputs. For `SYSLOG` events, three providers are found: `syslog1`, `syslog2`, and `win-app-event`. For `FTP PROTOCOL` events, the `ftp-protocol-verify` scenario is identified.

5. **External Component Dependencies**:
   - The `syslog1` and `syslog2` event providers require the syslog facility of a UNIX system. `syslog2` is tailored for the `syslogkd` daemon in Linux systems. The `win-app-event` provider is designed for Windows NT and depends on the NT event log facility.
   - The `ftp-protocol-verify` scenario requires a network event provider that produces `STREAM` events, which are obtained by reassembling TCP streams. It has activation dependencies on the `tcpip` and `ftp` language extensions.

6. **Sensor Identification**:
   - The Sensor Database is queried to identify suitable hosts with active STAT-based sensors. Two hosts, `lucas` and `spielberg`, both running Linux, are identified. `lucas` has a bare sensor, while `spielberg` has a STAT-based sensor with the `netproc` event provider, `tcpip` language extension, and some scenario plugins.

7. **Module Installation**:
   - The `syslog` language extension and `syslog2` event provider are installed on `lucas`, followed by the `ftpd-quote-abuse` scenario plugin.
   - The `ftp` language extension and `ftp-protocol-verify` scenario plugin are installed on `spielberg`, followed by the `wu-ftp-bovf` scenario plugin.

8. **Final Configuration**:
   - After the necessary reconfigurations, the IDA may decide to install specific response functions for the newly activated scenarios. This process follows a similar procedure, where response modules are shipped, installed, and linked into the sensor.

### Conclusions and Future Work

Many research and commercial intrusion detection systems use a distributed set of sensors, but they often lack flexibility in configuration. MetaSTAT addresses these limitations by providing a highly-configurable framework. The STAT-based approach allows for complex reconfigurations and explicit modeling of dependencies, enabling automatic generation of deployment plans from high-level specifications.

The framework is open, allowing easy integration of third-party IDS modules and external components. The STAT framework and core components have been implemented and used in various IDSs, including USTAT, WinSTAT, NetSTAT, and NSTAT. These systems have been evaluated in multiple DARPA-sponsored evaluations.

Future work will focus on enhancing the MetaSTAT component with alert routing functionalities and completing the implementation of control primitives.

### Acknowledgments

We thank Steve Eckmann for his valuable comments on this paper. This research was supported by the Defense Advanced Research Projects Agency (DARPA), Rome Laboratory, Air Force Materiel Command, USAF, the National Security Agency’s University Research Program, and the Army Research Office.

### References

[1] Roesch, M.: Snort - Lightweight Intrusion Detection for Networks. In: Proceedings of the USENIX LISA ’99 Conference. (1999)

[2] Neumann, P., Porras, P.: Experience with EMERALD to Date. In: First USENIX Workshop on Intrusion Detection and Network Monitoring, Santa Clara, California (1999) 73–80

[3] NFR Security: Overview of NFR Network Intrusion Detection System. (2001)

[4] Internet Security Systems: Introduction to RealSecure Version 3.0. (1999)

[5] Ilgun, K.: USTAT: A Real-time Intrusion Detection System for UNIX. Master’s thesis, Computer Science Department, University of California, Santa Barbara (1992)

[6] Ilgun, K.: USTAT: A Real-time Intrusion Detection System for UNIX. In: Proceedings of the IEEE Symposium on Research on Security and Privacy, Oakland, CA (1993)

[7] Porras, P.: STAT – A State Transition Analysis Tool for Intrusion Detection. Master’s thesis, Computer Science Department, University of California, Santa Barbara (1992)

[8] Vigna, G., Eckmann, S., Kemmerer, R.: The STAT Tool Suite. In: Proceedings of DISCEX 2000, Hilton Head, South Carolina, IEEE Computer Society Press (2000)

[9] Ilgun, K., Kemmerer, R., Porras, P.: State Transition Analysis: A Rule-Based Intrusion Detection System. IEEE Transactions on Software Engineering 21 (1995)

[10] Eckmann, S., Vigna, G., Kemmerer, R.: STATL: An Attack Language for State-based Intrusion Detection. In: Proceedings of the ACM Workshop on Intrusion Detection Systems, Athens, Greece (2000)

[11] Apache 2.0 Documentation. (2001) http://www.apache.org/.

[12] Sun Microsystems, Inc.: Installing, Administering, and Using the Basic Security Module, 2550 Garcia Ave., Mountain View, CA 94043. (1991)

[13] Curry, D., Debar, H.: Intrusion Detection Message Exchange Format: Extensible Markup Language (XML) Document Type Definition. draft-ietf-idwg-idmef-xml-03.txt (2001)

[14] Vigna, G., Kemmerer, R.: NetSTAT: A Network-based Intrusion Detection Approach. In: Proceedings of the 14th Annual Computer Security Application Conference, Scottsdale, Arizona (1998)

[15] Vigna, G., Kemmerer, R.: NetSTAT: A Network-based Intrusion Detection System. Journal of Computer Security 7 (1999) 37–71

[16] Kemmerer, R.: NSTAT: A Model-based Real-time Network Intrusion Detection System. Technical Report TRCS-97-18, Department of Computer Science, UC Santa Barbara (1997)

[17] Durst, R., Champion, T., Witten, B., Miller, E., Spagnuolo, L.: Addendum to “Testing and Evaluating Computer Intrusion Detection Systems”. CACM 42 (1999) 15

[18] Durst, R., Champion, T., Witten, B., Miller, E., Spagnuolo, L.: Testing and Evaluating Computer Intrusion Detection Systems. CACM 42 (1999) 53–61