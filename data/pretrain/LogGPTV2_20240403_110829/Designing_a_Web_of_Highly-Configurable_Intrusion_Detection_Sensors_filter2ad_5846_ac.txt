MetaSTAT uses the databases described in the previous section to assist the
Intrusion Detection Administrator (IDA) in reconﬁguring a web of sensors. To
better describe the operations involved in a reconﬁguration and the support
provided by MetaSTAT, an example will be used.
Suppose that the IDA noted or was notiﬁed of some suspicious FTP activity
in a subnetwork inside his1 organization. Usually, the IDA would contact the
responsible network administrator and would ask him2 to install and/or acti-
vate some monitoring software to collect input data for further analysis. The
IDA might even decide to login remotely to particular hosts to perform manual
analysis. Both activities are human-intensive and require a considerable setup
time.
MetaSTAT supports a diﬀerent process in which the IDA interacts with a
centralized control application (i.e., the MetaSTAT console) and expresses his
interest in having the subnetwork checked for possible FTP-related abuse. This
request elicits a number of actions:
1 By “his” we mean “his or her”.
2 By “him” we mean “her”.
80
G. Vigna, R.A. Kemmerer, and P. Blix
1. The scenario plugins contained in the Module Database are searched for
the keyword “FTP”. More precisely the IDA’s request is translated into the
following SQL query:
SELECT module_id, name, os_platform, description
FROM Module_Index
WHERE (name LIKE ’%ftp%’ OR description LIKE ’%ftp%’)
AND type="plugin";
The following information is returned:
module id name
module 1 wu-ftpd-bovf
module 2 ftpd-quote-abuse
. . .
module 9 ftpd-protocol-verify Linux X86
The IDA selects the wu-ftp-bovf and ftpd-quote-abuse scenario plugins
for installation.
BOVF attack against ftpd
QUOTE command abuse
. . .
FTP protocol verifier
os platform description
Linux X86
Linux X86
. . .
. . .
2. The Module Database is examined for possible activation dependencies. The
wu-ftp-bovf activation dependencies are determined by the following query:
SELECT dep_module_id FROM Activation_Dependency
WHERE module_id="module_1";
The query results (not shown here) indicate that the scenario plugin requires
the ftp language extension. This is because events and predicates deﬁned
in the ftp extension are used in states and transitions of the wu-ftp-bovf
scenario. A similar query is performed for the ftpd-quote-abuse scenario
plugin. The query results indicates that the syslog language extension is
required by the plugin.
3. The Module Database is then searched for possible functional dependencies.
For example in the case of the wu-ftp-bovf scenario the following query is
executed:
SELECT input_id FROM Module_Input WHERE module_id="module_1";
The query returns an entry containing the value FTP PROTOCOL. This means
that the wu-ftp-bovf scenario uses this type of event as input. Therefore,
the wu-ftp-bovf scenario plugin has a functional dependency on a module
providing events obtained by parsing the FTP protocol. A similar query
indicates that the ftpd-quote-abuse plugin has a functional dependency
on a provider of SYSLOG events.
4. These new requirements trigger a new search in the Module Database to ﬁnd
which of the available modules can be used to provide the required inputs.
SYSLOG events are produced by three event providers: syslog1, syslog2,
and win-app-event. The FTP protocol events are produced, as synthetic
events, by the ftp-protocol-verify scenario.
Designing a Web of Highly-Conﬁgurable Intrusion Detection Sensors
81
ftpd−quote−abuse
scenario
A
I
syslog
lang ext
SYSLOG
event
O
O
O
syslog1
event provider
A
E
syslog2
event provider
A
E
win−app−event
event provider
A
E
syslog
lang ext
syslog
lang ext
winevent NTlogging
lang ext
external component
syslogd
syslogd
external component
external component
A
ftp
lang ext
wu−ftp−bovf
scenario
I
FTP PROTOCOL
event
O
ftp−protocol−verify
scenario
A
A
I
ftp
lang ext
tcpip
lang ext
STREAM
event
O
netproc
event provider
E
A
tcpip
lang ext
network−driver
external component
Fig. 5. Dependency graph for scenarios wu-ftp-bovf and ftpd-quote-abuse. In the
ﬁgure, arrows marked with the letter “A” are used to represent activation dependencies.
Arrows marked with “I” represent the relationship between a module and the input
events required. Arrows marked with an “O” represent the relationship between an
event type and the module that produce that type of event as output. Arrows marked
with “E” represent a dependency on an external component.
5. Both the syslog1 and syslog2 event providers require an external source,
which is the syslog facility of a UNIX system. In particular, syslog2 is
tailored to the syslogkd daemon provided with Linux systems. Both event
providers have an activation dependency on the syslog language exten-
sion. The win-app-event event provider is tailored to the Windows NT
platform. It depends on the NT event log facility (as an external compo-
nent) and relies on the NT event log language extension (winevent). The
ftp-protocol-verify is a network-based scenario and, as such, requires a
network event provider that produces events of type STREAM, which are events
obtained by reassembling TCP streams. The scenario has two activation de-
pendencies; it needs both the tcpip and the ftp language extensions. The
ﬁrst is needed because STREAM events are used in the scenario’s transition
assertions. The second is needed to be able to generate the FTP protocol
synthetic events.
6. Events of type STREAM are produced by an event provider called netproc.
This event provider is based on the tcpip language extension, and requires,
as an external component, a network driver that is able to eavesdrop traﬃc.
7. At this point, the dependencies between the modules have been determined
(see Figure 5). The tool now identiﬁes the sensors that need to be reconﬁg-
ured. This operation is done by querying the Sensor Database to determine
which hosts of the network under exam have active STAT-based sensors.
82
G. Vigna, R.A. Kemmerer, and P. Blix
The query identiﬁes two suitable hosts. Host lucas, a Linux machine, has a
bare sensor installed. Host spielberg, another Linux machine, runs a STAT-
based sensor equipped with the netproc event provider, the tcpip language
extension, and some scenario plugins. Both hosts provide the network driver
and UNIX syslog external component. The tool decides (possibly with help
from the IDA) to install the ftpd-quote-abuse scenario on lucas and the
wu-ftp-bovf scenario on spielberg.
8. The syslog language extension is sent to lucas, and it is installed in the
ﬁle system. This is done using the following CommSTAT messages:
[... encoded library ...]
The syslog2 event provider is sent, installed, and loaded in the sensor by
means of similar commands. At this point syslog events are being fed to the
core of the sensor on host lucas. The ftpd-quote-abuse scenario plugin is
sent to the host, installed on the ﬁle system, and eventually loaded into the
core.
9. The ftp language extension is sent to host spielberg. The tcpip language
extension is already available, as is the netproc event provider. There-
fore, the ftp-protocol-verify scenario plugin can be shipped to host
spielberg, installed, and loaded into the core. The scenario starts parsing
STREAM events and producing FTP PROTOCOL synthetic events. As the ﬁnal
step, the wu-ftpd-bovf scenario is shipped to host spielberg, installed,
and loaded into the core, where it immediately starts using the synthetic
events generated by the ftp-protocol-verify scenario.
After the necessary reconﬁgurations are carried out the IDA may decide to
install speciﬁc response functions for the newly activated scenarios. A process
similar to the one described above is followed. Response modules, in the form
of shared libraries, may be shipped to a remote host and linked into a sensor.
Additional control commands may then be used to associate states in a scenario
with the execution of speciﬁc functions of the response module.
6 Conclusions and Future Work
Many research and commercial intrusion detection systems implement their in-
trusion detection functionality using a distributed set of sensors. The advantages
Designing a Web of Highly-Conﬁgurable Intrusion Detection Sensors
83
of this approach are obvious, but these systems suﬀer from a number of limita-
tions mainly related to their conﬁgurability.
For example, it is not possible to add new event sources to existing sen-
sors; it is diﬃcult, if not impossible, to create, ship, and load new signatures
at run-time; and responses are usually predeﬁned or chosen from a predeﬁned
set. We have implemented a set of components and a control infrastructure that
overcome these limits. The STAT-based framework has been leveraged to realize
a highly-conﬁgurable “web of sensors” controlled by a meta-sensor component,
called MetaSTAT. The ﬂexibility of the framework allows the Intrusion Detection
Administrator to perform complex reconﬁguration tasks. In addition, by explic-
itly modeling the dependencies between modules it is possible to automatically
generate a valid deployment plan from high-level speciﬁcations.
The “web of sensors” is based on the STAT approach but it has been designed
to be open. Third party IDS modules can easily be integrated through Comm-
STAT proxies. Integration of external components is limited to the exchange of
alerts if primitives for the dynamic conﬁguration of sensors are not available.
The STAT framework and the core component have been designed and imple-
mented. The STAT framework has been used to build a number of IDSs, includ-
ing two systems for host-based intrusion detection in UNIX and Windows NT en-
vironments, called USTAT and WinSTAT, respectively [5,6,7], a network-based
intrusion detection system called NetSTAT [14,15], and a distributed event ana-
lyzer called NSTAT [16]. Two of the systems, namely USTAT and NetSTAT, have
been used in four diﬀerent DARPA-sponsored evaluations [17,18]. The Comm-
STAT communication infrastructure has been completed and distributed to the
intrusion detection community through the IETF idwg mailing list. A ﬁrst pro-
totype of the MetaSTAT component that collects alerts from multiple sensors
concurrently, stores them in a MySQL alert database and provides the IDA with
a graphical viewer has been developed. In addition, database schemas for the
Module Database and the Sensor Database have been implemented. Most of the
control primitives have been deﬁned and partially implemented. The MetaSTAT
component is also lacking the alert routing functionalities. These will be the
focus of future work.
Acknowledgments. Thanks to Steve Eckmann for providing helpful comments
on this paper.
This research was supported by the Defense Advanced Research Projects
Agency (DARPA) and Rome Laboratory, Air Force Materiel Command, USAF,
under agreement number F30602-97-1-0207, by the National Security Agency’s
University Research Program, under agreement number MDA904-98-C-A891,
and by the Army Research Oﬃce, under agreement DAAD19-01-1-0484. The
U.S. Government is authorized to reproduce and distribute reprints for Govern-
mental purposes notwithstanding any copyright annotation thereon.
The views and conclusions contained herein are those of the author and
should not be interpreted as necessarily representing the oﬃcial policies or
endorsements, either expressed or implied, of the Defense Advanced Research
Projects Agency (DARPA), Rome Laboratory, the National Security Agency,
the Army Research Oﬃce, or the U.S. Government.
84
G. Vigna, R.A. Kemmerer, and P. Blix
References
[1] Roesch, M.: Snort - Lightweight Intrusion Detection for Networks. In: Proceedings
of the USENIX LISA ’99 Conference. (1999)
[2] Neumann, P., Porras, P.: Experience with EMERALD to Date. In: First USENIX
Workshop on Intrusion Detection and Network Monitoring, Santa Clara, Califor-
nia (1999) 73–80
[3] NFR Security: Overview of NFR Network Intrusion Detection System. (2001)
[4] Internet Security Systems: Introduction to RealSecure Version 3.0. (1999)
[5] Ilgun, K.: USTAT: A Real-time Intrusion Detection System for UNIX. Master’s
thesis, Computer Science Department, University of California, Santa Barbara
(1992)
[6] Ilgun, K.: USTAT: A Real-time Intrusion Detection System for UNIX. In: Pro-
ceedings of the IEEE Symposium on Research on Security and Privacy, Oakland,
CA (1993)
[7] Porras, P.: STAT – A State Transition Analysis Tool for Intrusion Detection.
Master’s thesis, Computer Science Department, University of California, Santa
Barbara (1992)
[8] Vigna, G., Eckmann, S., Kemmerer, R.: The STAT Tool Suite. In: Proceedings
of DISCEX 2000, Hilton Head, South Carolina, IEEE Computer Society Press
(2000)
[9] Ilgun, K., Kemmerer, R., Porras, P.: State Transition Analysis: A Rule-Based In-
trusion Detection System. IEEE Transactions on Software Engineering 21 (1995)
[10] Eckmann, S., Vigna, G., Kemmerer, R.: STATL: An Attack Language for State-
based Intrusion Detection. In: Proceedings of the ACM Workshop on Intrusion
Detection Systems, Athens, Greece (2000)
[11] Apache 2.0 Documentation. (2001) http://www.apache.org/.
[12] Sun Microsystems, Inc.: Installing, Administering, and Using the Basic Security
Module, 2550 Garcia Ave., Mountain View, CA 94043. (1991)
[13] Curry, D., Debar, H.: Intrusion Detection Message Exchange Format: Extensible
Markup Language (XML) Document Type Deﬁnition.
draft-ietf-idwg-idmef-xml-03.txt (2001)
[14] Vigna, G., Kemmerer, R.: NetSTAT: A Network-based Intrusion Detection Ap-
proach. In: Proceedings of the 14th Annual Computer Security Application Con-
ference, Scottsdale, Arizona (1998)
[15] Vigna, G., Kemmerer, R.: NetSTAT: A Network-based Intrusion Detection Sys-
tem. Journal of Computer Security 7 (1999) 37–71
[16] Kemmerer, R.: NSTAT: A Model-based Real-time Network Intrusion Detection
System. Technical Report TRCS-97-18, Department of Computer Science, UC
Santa Barbara (1997)
[17] Durst, R., Champion, T., Witten, B., Miller, E., Spagnuolo, L.: Addendum to
“Testing and Evaluating Computer Intrusion Detection Systems”. CACM 42
(1999) 15
[18] Durst, R., Champion, T., Witten, B., Miller, E., Spagnuolo, L.: Testing and
Evaluating Computer Intrusion Detection Systems. CACM 42 (1999) 53–61