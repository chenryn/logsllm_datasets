    sscanf(buffer, "%d:%d:%s:%s:%s", &sport, &cport, rtype, 
           user, addinfo); 
    ... 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
406 
The code in this example reads an IDENT response (defined at 
www.ietf.org/rfc/rfc1413.txt) from a client. As you can see, up to 1024 bytes are read 
and then parsed into a series of integers and colon-separated strings. The user, rtype, 
and addinfo variables are only 32 bytes long, so if the client supplies any of those 
fields with a string larger than 32 bytes, a buffer overflow occurs. 
sprintf() 
The sprintf() functions have accounted for many security vulnerabilities in the past. 
If the destination buffer supplied as the first parameter isn't large enough to handle 
the input data elements, a buffer overflow could occur. Buffer overflows happen 
primarily because of printing large strings (using the %s or %[] format specifiers). 
Although less common, other format specifiers (such as %d or %f) can also result in 
buffer overflows. If users can partially or fully control the format argument, another 
type of bug could occur, known as "format string" vulnerabilities. They are discussed 
in more detail later in this chapter in "C Format Strings(? [????.])." The sprintf() 
function is summarized in the following list: 
Function int sprintf(char *str, const char *format, ...); 
API libc (UNIX and Windows) 
Similar functions _stprintf, _sprintf, _vsprintf, vsprintf, swprintf, swprintf, 
vsprintf, vswprintf, _wsprintfA, _wsprintfW 
Purpose The sprintf() functions print a formatted string to a destination 
buffer. 
The following example is taken from the Apache JRUN module: 
static void 
WriteToLog(jrun_request *r, const char *szFormat, ...) 
{ 
        server_rec *s = (server_rec *) r->context; 
    va_list list; 
    char szBuf[2048]; 
        strcpy(szBuf, r->stringRep); 
    va_start (list, szFormat); 
    vsprintf (strchr(szBuf,'\0'), szFormat, list); 
    va_end (list); 
#if MODULE_MAGIC_NUMBER > 19980401 
        /* don't need to add newline - this function 
           does it for us */ 
    ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_NOTICE, s, "%s", szBuf); 
#else 
    log_error(szBuf, s); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
407 
#endif 
#ifdef WIN32 
        strcat(szBuf, "\r\n"); 
        OutputDebugString(szBuf); 
#endif 
} 
This example is a classic misuse of vsprintf(). The destination buffer's size isn't 
accounted for at all, so a buffer overflow occurs if the vsprintf() function can be 
called with any string larger than 2048 bytes. 
Note 
The _wsprintfA() and _wsprintfW() functions copy a maximum of 1024 characters 
into the destination buffer, as opposed to the other sprintf() functions, which copy 
as many as required. 
strcpy() 
The strcpy() family of functions is notorious for causing a large number of security 
vulnerabilities in many applications over the years. If the destination buffer can be 
smaller than the length of the source string, a buffer overflow could occur. The 
wscpy(), wcscpy(), and mbscpy() functions are similar to strcpy() except they deal 
with wide and multibyte characters and are common in Windows applications. The 
following list summarizes the strcpy() functions: 
Function char *strcpy(char *dst, char *src) 
API libc (UNIX and Windows) 
Similar functions _tcscpy, lstrcpyA, wcscpy, _mbscpy 
Purpose strcpy() copies the string located at src to the destination dst. It 
ceases copying when it encounters an end of string character (a NUL byte). 
The following code is an example of misusing strcpy(): 
char *read_command(int sockfd) 
{ 
    char username[32], buffer[1024]; 
    int n; 
    if((n = read(sockfd, buffer, sizeof(buffer)1) = sizeof(username)) 
        return -1; 
    strcpy(username, email); 
    if(strlen(delim) >= sizeof(domain)) 
        return -1; 
    strcpy(domain, delim); 
    if(!strchr(delim, '.')) 
        strcat(domain, default_domain); 
    delim[-1] = '@'; 
    ... process domain ... 
    return 0; 
} 
The code in this example performs several string copies, although each one includes 
a length check to ensure that the supplied buffer doesn't overflow any destination 
buffers. When a hostname is supplied without a trailing domain, however, a default 
string value is concatenated to the buffer in an unsafe manner (as shown in the 
bolded line). This vulnerability occurs because no size check is done to ensure that the 
length of default_domain plus the length of delim is less than the length of the domain 
buffer. 
Bounded String Functions 
The bounded string functions were designed to give programmers a safer alternative 
to the functions discussed in the previous section. These functions include a 
parameter to designate the length (or bounds) of the destination buffer. This length 
parameter makes it easier to use the bounded functions securely, but they are still 
susceptible to misuse in more subtle ways. For instance, it is important to 
double-check that the specified length is in fact the correct size of the resulting buffer. 
Although this check sounds obvious, length miscalculations or erroneous length 
parameters are frequent when using these functions. These are the conditions that 
might cause the length parameter to be incorrect: 
Carelessness 
Erroneous input 
Length miscalculation 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
410 
Arithmetic boundary conditions 
Converted data types 
This shouldn't be considered an exhaustive list of problems. However, it should 
emphasize the point that use of safe functions doesn't necessarily mean the code is 
secure. 
snprintf() 
The snprintf() function is a bounded sprintf() replacement; it accepts a maximum 
number of bytes that can be written to the output buffer. This function is summarized 
in the following list: 
Function int snprintf(char *dst, size_t n, char *fmt, ...) 
API libc (UNIX and Windows) 
Similar functions _sntprintf, _snprintf, _snwprintf, vsnprintf, _vsnprintf, 
_vsnwprintf 
Purpose snprintf() formats data according to format specifiers into a string, 
just like sprintf(), except it has a size parameter. 
An interesting caveat of this function is that it works slightly differently on Windows 
and UNIX. On Windows OSs, if there's not enough room to fit all the data into the 
resulting buffer, a value of -1 is returned and NUL termination is not guaranteed. 
Conversely, UNIX implementations guarantee NUL termination no matter what and 
return the number of characters that would have been written had there been enough 
room. That is, if the resulting buffer isn't big enough to hold all the data, it's 
NUL-terminated, and a positive integer is returned that's larger than the supplied 
buffer size. This difference in behavior can cause bugs to occur in these situations: 
A developer familiar with one OS is writing code for another and isn't aware of 
their differences. 
An application is built to run on both Windows and UNIX, so the application 
works correctly on one OS but not the other. 
Listing 8-1 is an example of a vulnerability resulting from assuming the UNIX 
behavior of vsnprintf() in a Windows application. 
Listing 8-1. Different Behavior of vsnprintf() on Windows and UNIX 
#define BUFSIZ 4096 
int log(int fd, char *fmt, ...) 
{ 
   char buffer[BUFSIZ]; 
   int n; 
   va_list ap; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
411 
   va_start(ap, fmt); 
   n = vsnprintf(buffer, sizeof(buffer), fmt, ap); 
   if(n >= BUFSIZ - 2) 
       buffer[sizeof(buffer)-2] = '\0'; 
   strcat(buffer, "\n"); 
   va_end(ap); 
   write_log(fd, buffer, strlen(buffer)); 
   return 0; 
} 
The code in Listing 8-1 works fine on UNIX. It checks to ensure that at least two bytes 
still remain in the buffer to fit in the trailing newline character or it shortens the buffer 
so that the call to strcat() doesn't overflow. If the same code is run on Windows, 
however, it's a different story. If buffer is filled, n is set to 1, so the length check 
passes and the newline character is written outside the bounds of buffer. 
strncpy() 
The strncpy() function is a "secure" alternative to strcpy(); it accepts a maximum 
number of bytes to be copied into the destination. The following list summarizes the 
strncpy() function: 
Function char *strncpy(char *dst, char *src, size_t n) 
API libc (UNIX and Windows) 
Similar functions _tcsncpy, _csncpy, wcscpyn, _mbsncpy 
Purpose strncpy() copies the string located at src to the destination dst. It 
ceases copying when it encounters an end of string character (a NUL byte) or 
when n characters have been written to the destination buffer. 
The strncpy() function does not guarantee NUL-termination of the destination string. 
If the source string is larger than the destination buffer, strncpy() copies as many 
bytes as indicated by the size parameter, and then ceases copying without 
NUL-terminating the buffer. This means any subsequent operations performed on the 
resulting string could produce unexpected results that can lead to a security 
vulnerability. Listing 8-2 shows an example of misusing strncpy(). 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
412 
Listing 8-2. Dangerous Use of strncpy() 
int is_username_valid(char *username) 
{ 
    char *delim; 
    int c; 
    delim = strchr(name, ':'); 
    if(delim){ 
        c = *delim; 
        *delim = '\0'; 
    } 
    ... do some processing on the username ... 
    *delim = c; 
    return 1; 
} 
int authenticate(int sockfd) 
{ 
    char user[1024], *buffer; 
    size_t size; 
    int n, cmd; 
    cmd = read_integer(sockfd); 
    size = read_integer(sockfd); 
    if(size > MAX_PACKET) 
        return -1; 
    buffer = (char *)calloc(size+1, sizeof(char)); 
    if(!buffer) 
        return -1; 
    read_string(buffer, size); 
    switch(cmd){ 
        case USERNAME: 
            strncpy(user, buffer, sizeof(user)); 
            if(!is_username_valid(user)) 
                goto fail; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
413 
            break; 
        ... 
    } 
} 
The code copies data into a buffer by using strncpy() but fails to explicitly 
NUL-terminate the buffer afterward. The buffer is then passed as an argument to the 
is_username_valid() function, which performs a strchr() on it. The strchr() function 
searches for a specific character in a string (the : in this case). If strchr() finds the 
character it returns a pointer to it, otherwise it returns a NULL if the character is not 
found. Because there's no NUL character in this buffer, strchr() might go past the 
end of the buffer and locate the character it's searching for in another variable or 
possibly in the program's control information (such as a frame pointer, return address 
on the stack, or a chunk header on the heap). This byte is then changed, thus 
potentially affecting the program's state in an unpredictable or unsafe manner. 
The wcscpyn() function is a safe alternative to wcscpy(). This function is susceptible to 
the same misuses as strncpy(). If the source string is larger than the destination 
buffer, no NUL terminator is appended to the resulting string. Additionally, when 
dealing with wide characters, application developers often make the mistake of 
supplying the destination buffer's size in bytes rather than specifying the number of 
wide characters that can fit into the destination buffer. This issue is discussed later in 
this chapter in "Windows Unicode Functions(? [????.])." 
strncat() 
The strncat() function, summarized in the following list, is intended to be a safe 
alternative to the strcat() function: 
Function char *strncat(char *dst, char *src, size_t n) 
API libc (UNIX and Windows) 
Similar functions _tcsncat, wcsncat, _mbsncat 
Purpose strncat() concatenates two strings together. The string src points to 
is appended to the string dst points to. It copies at most n bytes. 
However, strncat() is nearly as dangerous as strcat(), in that it's quite easy to 
misuse. Specifically, the size parameter can be confusingit indicates the amount of 
space left in the buffer. The first common mistake application developers make is 
supplying the size of the entire buffer instead of the size remaining in the buffer. This 
mistake is shown in the following example: 
int copy_data(char *username) 
{ 
    char buf[1024]; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
414 
    strcpy(buf, "username is: "); 
    strncat(buf, username, sizeof(buf)); 
    log("%s\n", buf); 
    return 0; 
} 