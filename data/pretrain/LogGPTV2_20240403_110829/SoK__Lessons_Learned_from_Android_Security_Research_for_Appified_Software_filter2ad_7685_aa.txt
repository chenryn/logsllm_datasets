title:SoK: Lessons Learned from Android Security Research for Appified Software
Platforms
author:Yasemin Acar and
Michael Backes and
Sven Bugiel and
Sascha Fahl and
Patrick D. McDaniel and
Matthew Smith
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
SoK: Lessons Learned From Android Security Research
For Appiﬁed Software Platforms
Yasemin Acar∗, Michael Backes∗†, Sven Bugiel∗, Sascha Fahl∗, Patrick McDaniel‡, Matthew Smith§
∗CISPA, Saarland University, †MPI-SWS, ‡Pennsylvania State University, §University of Bonn
Abstract—Android security and privacy research has boomed
in recent years, far outstripping investigations of other appiﬁed
platforms. However, despite this attention, research efforts are
fragmented and lack any coherent evaluation framework. We
present a systematization of Android security and privacy re-
search with a focus on the appiﬁcation of software systems. To put
Android security and privacy research into context, we compare
the concept of appiﬁcation with conventional operating system
and software ecosystems. While appiﬁcation has improved some
issues (e.g., market access and usability), it has also introduced a
whole range of new problems and aggravated some problems
of the old ecosystems (e.g., coarse and unclear policy, poor
software development practices). Some of our key ﬁndings are
that contemporary research frequently stays on the beaten path
instead of following unconventional and often promising new
routes. Many security and privacy proposals focus entirely on the
Android OS and do not take advantage of the unique features and
actors of an appiﬁed ecosystem, which could be used to roll out
new security mechanisms less disruptively. Our work highlights
areas that have received the larger shares of attention, which
attacker models were addressed, who is the target, and who has
the capabilities and incentives to implement the countermeasures.
We conclude with lessons learned from comparing the appiﬁed
with the old world, shedding light on missed opportunities and
proposing directions for future research.
I. INTRODUCTION
Over the last couple of years, the appiﬁcation of software
has drastically changed the way software is produced and con-
sumed and how users interact with computer devices. With the
rise of web and mobile applications, the number of apps with
a highly specialized, tiny feature set drastically increased. In
appiﬁed ecosystems, there is an app for almost everything, and
the market entrance barrier is low, attracting many (sometimes
unprofessional) developers. Apps are encouraged to share
features through inter-component communication, while risks
are communicated to users via permission dialogs. Based on
the large body of research available for Android as the pioneer
of open source appiﬁed ecosystems, we center this paper’s
scope on Android security and privacy research. This choice
allows us to focus on the dominant appiﬁed ecosystem with a
large real-world deployment: Android.
Motivation for a Systematization of Android/Appiﬁcation
Security. The large body of literature uncovered a myriad of
appiﬁcation-speciﬁc security and privacy challenges as well
as countermeasures to face these new threats. As with all new
ﬁelds of endeavor, there is no uniﬁed approach to research. As
a consequence, efforts over the last half decade necessarily
pioneered ways to examine and harden these systems. A
problem with this approach is that there are lots of fragmented
efforts to improve security and privacy in an appiﬁed platform,
but no uniﬁed framework or understanding of the ecosystem as
a whole. Therefore, we believe that it is time to systematize the
research work on security and privacy in appiﬁed platforms,
to offer a basis for more systematic future research.
Challenges and Methodology of the Systematization. While
the fragmentation of the Android security research is our
main motivation, it is at the same time our biggest challenge.
Contributions to this research ﬁeld have been made in many
different areas, such as static code analysis, access control
frameworks and policies, and usable security for end users as
well as app and platform developers. To objectively evaluate
and compare the different approaches, our ﬁrst step will be to
create a common understanding of the different security and
privacy challenges and a universal attacker model to express
these threats. Security solutions are by default designed with
a very speciﬁc attacker model in mind. We found that in
most Android research, this attacker model has been only
implicitly expressed. However, to understand the role of a
(new) approach within the context of Android’s appiﬁed
ecosystem, it is also important to understand which attacker
capabilities it does not cover and how different approaches
can complement each other. By studying the evaluation details
of many representative approaches from the literature, we
create a uniﬁed understanding of attacker capabilities. This
forms the basis for analyzing the security beneﬁts of different
solutions and lays the groundwork for comparing approaches
with respect to their role in the overall ecosystem.
One insight from our analysis of the challenges in Android’s
appiﬁed ecosystem, is that some security issues are new and
unique to Android, as caused by the appiﬁcation paradigm
or the result of design decisions of its architects. Other well-
known problems are aggravated by appiﬁcation, while many
security issues are lessened or solved by the appiﬁcation
paradigm. Such understanding is key to transcending Android
to develop a broader picture of the future of software systems
and the environments they will be placed in.
In particular, the tight integration of many non-traditional
actors in the appiﬁed ecosystem creates interesting problems
as well as opportunities. Platform developers, device vendors,
app markets, library providers, app developers, app publishers,
toolchain providers and end users all have different capabilities
and incentives to contribute (in)securely to the ecosystem. Our
systematization makes the important contribution of showing
how previous research has interacted with these actors, iden-
tifying contributing factors to our research community’s work
creating a real-world impact.
Based on our systematization of this knowledge, we draw
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Yasemin Acar. Under license to IEEE.
DOI 10.1109/SP.2016.33
DOI 10.1109/SP.2016.33
433
433
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
lessons learned from our community’s security research that
provide important insights into the design and implementation
of current and future appiﬁed software platforms. We also
create an overview of which areas have received focused
attention and point out areas where research went astray.
Finally, we address underrepresented areas that could beneﬁt
from or require further analysis and effort.
Please note that we are not discussing plausible problems
and beneﬁts of research solutions for adoption by Google or
other vendors. Such factors can be manifold, such as technical
reasons (e.g., backwards compatibility), business decisions
(e.g., interference with advertisement networks), protection
of app developers (e.g., intrusion of application sandboxes),
or usability aspects. However, without concrete ﬁrst-hand
knowledge, any such discussion would merely result in spec-
ulation, which we do not consider a tangible contribution of
a systematization of knowledge.
Systematization Methodology
There is a huge body of research work on Android security
with (conservatively) over 100 papers published. Since we
aim to systematize this research as opposed to offering a
complete survey [1], we extracted key aspects and key papers
to create a foundation for our systematization. The focus of
our systematization is on security issues and challenges in
the context of appiﬁcation and the app market ecosystem. We
include both offensive works (i. e. papers that uncovered new
security issues or classes of attacks) as well as defensive ones
(i. e. papers that focus on countermeasures or new security
frameworks). However, we do not focus on malware on appi-
ﬁed platforms, as this has been dealt with in prior work [2].
We also exclude hardware-speciﬁc or other low level problems
on mobile platforms, such as CPU side-channels, differential
power analysis, or base-band attacks, which are independent
from appiﬁcation.
We selected the research based on the following criteria:
• Unique/Pioneering—Security issues which are unique to
the Android ecosystem, i.e. never been seen before.
• Aggravated—Security issues which have greater impact
on an appiﬁed ecosystem than on traditional computing.
• Attention—Research on aspects that received more atten-
tion (i. e. many papers dealt with this speciﬁc aspect or
the papers received high citation counts).
• Impact—Security research that affected a large number
of users (or devices).
• Scope—Security issues which involve a large fraction of
the appiﬁed world’s actors. We include these issues since
they are particularly hard to ﬁx.
• Open Challenges—Research worked on issues or coun-
termeasures that remain “unﬁnished” and highlight inter-
esting and important areas of future work.
In the following, we systematize the research using the
above rubric, extract a uniﬁed attacker model and evaluate the
work both in terms of content and also on its placement within
the Android ecosystem. We identify actors that are responsible
434434
for the problems, would beneﬁt from solutions, and/or have the
capability to implement and deploy them.
II. PROBLEM AND RESEARCH AREAS
To identify important problem and research areas, we com-
pare aspects of traditional software ecosystems with appiﬁed
platforms, mainly focusing on Android.
A. Conventional Software Ecosystem vs. Appiﬁed Platform
(Android)
We start our systematization by categorizing and summariz-
ing key security challenges and issues that have been identiﬁed
in the literature in both conventional software ecosystems and
the appiﬁed world. Our intention for systematizing the key
security challenges is to provide a systematic approach to help
security researchers understand the (old and new) challenges
that have been identiﬁed and to lay the foundation for a
discourse on addressing these challenges.
1) Deﬁning the Access to Resources: Controlling access
to resources on a computer system requires 1) accurate def-
inition of the security principals and protected resources in
the system; 2) a non-bypassable and tamper-proof validation
mechanism for any access (reference monitor); and 3) a sound
security policy that governs, for all requested accesses in any
system state, whether access is allowed or should be denied.
Android deviates from conventional OSes in all three aspects:
a) System Security Principals: Conventional systems are
primarily designed as multi-user systems with human users
that have processes executing on their behalf. A small number
of dedicated user IDs is assigned to system daemons and
services that do not execute on behalf of a human user.
Appiﬁed security models build on the classic multi-user
system: not only is the human user of the system considered a
principal, but in fact all app developers that have their app(s)
installed on the system are considered as security principals.
Developers are represented by their app, which receives a
distinct user ID (UID), exactly like the pre-installed system
apps receive a UID. In recent Android versions with multi-
(human)-user support, the traditional UID scheme is further
extended:
the UID is now a two-dimensional matrix that
identiﬁes the combination of the app UID (i.e., developer) and
human user ID under which the app is currently running.
b) Implementation of the Reference Monitor: Conven-
tionally, reference monitoring is typically managed by the OS,
e.g., the ﬁle system and network stack, so that user processes
can build their access control on top.
Appiﬁed ecosystems also use the OS for low-level access
control. However, the extensive application frameworks on
top of which apps are deployed provide a different interface:
following the paradigm of IPC-based privilege separation
and compartmentalization in classical high assurance systems,
security- and privacy-critical functionality is consolidated into
dedicated user-space processes. Exposed IPC interfaces en-
force access control on calling processes.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
c) Security Policy:
In conventional software systems,
multiple privilege level(s) for a process are deﬁned: Processes
can run as superuser (root), system services, with normal
user privileges, guest privileges, and so on. All processes
running under a certain privilege level share the same set of
permissions and may access the same set of resources.
Modern appiﬁed ecosystems make a clearer distinction
between system and third-party apps: Direct access to security-
and privacy-sensitive resources (e.g., driver
interfaces or
databases) is only permitted to selected applications and
daemons of the application framework. This policy is imple-
mented, as in the conventional platforms, in the OS access con-
trol policies (i.e., discretionary and mandatory access control).
However, system apps may request access to permissions that
are not available to third-party apps. Third-party apps have by
default no permissions set, but may request their permissions
from a set commonly available to all third-party apps.
2) Sharing Functionalities: In conventional operating sys-
tems, third-party apps are usually self-contained and heavily
used to incorporate external functionalities as libraries (e.g.
the OpenSSL library to make TLS available in a program).
In addition to third-party libraries, in the appiﬁed world,
apps also share functionality through inter-component com-
munication (ICC), i.e., by providing a Service that can be
accessed through Intents or persistent IPC connections. ICC is
heavily used to access system apps such as the map, phone, or
Play app, but also popular third-party services, e.g., as offered
by the Facebook and Twitter apps.
3) Software Distribution: Conventionally, software is dis-
tributed in a decentralized way: It can be downloaded from
websites, purchased in online stores or shipped on physical
media such as USB sticks or CDs. Software comes either
in compiled binaries or, in case of open source software, as
source code that needs to be compiled before installation.
Appiﬁed ecosystems often make use of centralized stores
that distribute software/apps. These app stores allow devel-
opers to upload and distribute their software in a highly
organized way. The app markets provide search, feedback and
review interfaces for users and allow for centralized security
mechanisms that can be enforced by the markets directly.
We distinguish between commercial app markets such as
Google Play and central software repositories that are widely
used in different Linux distributions. In addition to simply
distributing software by streamlining the process of searching
and installing apps, commercial app markets have additional
responsibilities such as billing, DRM (e.g., forward locking on
Android) and in-app purchasing.
4) Software Engineering:
a) Development Process: Previously, single developers/-
companies developed software and in many cases distributed
it
themselves. They followed agreed-on rules (e.g., IDE,
libraries, or frameworks to use) and could outsource in a
regulated way to contracted (sub-)companies. In appiﬁed
ecosystems, a chain of actors is responsible for the distribution
of software, which is much more loosely coupled than the
more stringent traditional development chains: The original
435435
developer, (often) a publisher, and increasingly development
frameworks are involved.
b) Programming Environment: In conventional operating
systems, developers can choose what programming language
they want to use (within the design space that the project leaves
them), and a wide range of programming languages and frame-
works are usually available to implement software. Appiﬁed
ecosystems dictate programming languages and frameworks
to enforce compatibility with their application framework and
hence robustness of the deployed applications. Android devel-
opers, for instance, are required to use Java and the Android
SDK/NDK. App creators play a crucial role in modern appiﬁed
ecosystems: They provide easy-to-use clickable interfaces to
produce software that can be run on multiple platforms.
5) Present Classes of Programming Errors: Programming
errors, such as logic errors and run-time errors, are the
dominant sources of software vulnerabilities in conventional
software ecosystems. While recent years have demonstrated
that they are also present in mobile platforms with the same
devastating effects,
the API-dependent design of apps has
introduced a new range of problems into the appiﬁed world
as a direct consequence of misuse of programming APIs of
the surrounding application framework. This differs from the
traditional ecosystem, where this class of errors is limited
mostly to library APIs, since the application framework API
is a necessity to make apps operational.
6) Webiﬁcation: In conventional software ecosystems, soft-
ware is mainly self-contained and its primary functionality
does not depend on the availability of remote resources such
as web services. The appiﬁcation paradigm has seen a shift
towards increasingly web service-oriented architectures that
depend on server backends to provide their promised function-
ality. At the end of the spectrum are apps that consist merely
of a webview component that appears to be local app logic,
but in fact is not much more than a restricted web browser for
the service’s backend web servers.
7) Software Update Mechanisms: Conventional OS updates
are centrally organized, while the updating process for third-
party software takes,
in contrast, a greater effort: Every
program needs to be updated (and hence, often started and
restarted) separately. Only systems with a central software
distribution channel improve on this situation (e.g., Linux
distributions). The situation for updates in appiﬁed ecosystems
is currently the exact opposite. Fragmentation is a huge issue
in appiﬁed ecosystems, such as Android, and impedes the
OS update process. As many different network providers and
device vendors customize parts of the operating system, they
need to manage OS updates on their own, resulting in lengthy
and complicated update procedures. As a result, many Android
devices do not receive OS updates at all. In contrast, app
updates are straightforward and fast, as centralized app stores
push updates immediately to their users.
III. ANDROID/APPIFIED ECOSYSTEM
As an example for appiﬁcation, we provide an overview of
the Android ecosystem, the actors involved and their impact
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
on the ecosystem’s overall security. We use Figure 1 as our
reference to introduce the actors and their interaction patterns.
A. Ecosystem Overview
At the core of appiﬁcation ecosystems are the app develop-
ers, producing the millions of apps available for the end users.
The number of Android app developers is vastly larger than
for the traditional desktop software ecosystem. For instance,
in the current Play market1 roughly 460,000 distinct developer
accounts have published applications, where an account can
also belong to an entire company or team of developers.
These app developers rely on the rich APIs of the platform
SDK, which is provided by the platform developers. These
APIs provide access to core functionalities (e.g., telephony,
connectivity and sensors like accelerometers) as well as to user
data (e.g., contact management, messaging, picture gallery).
Developers can request access to those functionalities by
requesting permissions in their app’s manifest ﬁle (e.g. the
CONTACTS permissions grants access to the user’s address
book). End users are presented permission dialogs at install
time. Those dialogs present all the permissions previously
requested by a developer and inform users about an app’s
resource access. Since version 6 (Marshmallow), Android
also introduced, like iOS has done several iterations before,
the concept of dynamic permissions: a small subset of all
permissions are granted by the user at runtime when an app
requests access to protected interfaces instead of statically
at install time, and those selected permissions can also be
revoked again by the user. It is also possible for developers
to deﬁne custom permissions that can grant access to their
app’s functionality to other apps written by the same developer,
system apps, or all apps installed on the device.
Android apps are composed of Java code (compiled to
bytecode format for the CPUs of mobile platforms) and of
native code in the form of C/C++ shared libraries. Library
providers such as advertisement networks support develop-
ers in creating ad-supported apps by offering dedicated ad
libraries that apps can rely on, thus ﬁrmly integrating the ad
library in the ﬁnal application package. Many apps connect
to web-services (e.g., cloud-based services or other backends)
and use web-technologies such as HTML, CSS and Javascript.
This move to web apps is typical for the appiﬁcation paradigm.
Typically for the shift to appiﬁcation is the way monetiza-
tion works: App developers can sell their apps to end users for
ﬁxed one-time prices (using central app stores such as Google
Play), they can collaborate with advertisement networks by
displaying advertisements in their apps and receiving shares of
the advertisement revenues, or they can offer in-app purchases,
e.g., users can buy additional features of the app. Those
options are not mutually exclusive, but conventionally paid
apps refrain from displaying ads. Together they lower the
economic burden on developers and streamline the process
of purchasing and installing apps for end users [3].
Unlike other current appiﬁed ecosystems, Android allows
(and actually encourages) inter-component communication
1Approximately 1.5 million free apps crawled in February 2016.
436436
ALL ACTORS IN THE ECOSYSTEM AND THE IMPACT OF THEIR SECURITY
DECISIONS ON THE REMAINING ACTORS.
TABLE I
r
o
d
n
e
V
e
r
a
w
d
r
a
H
r
e
d
i
v
o
r
P
y
r
a
r
b
i
L
r
e
p
o
l
e
v
e
D
S
O
r
e