The proof is in the standard model and reduces to the secu-
rity of AKH [35, Deﬁnition 4] and ﬁnally to the elliptic-curve
decisional Diﬃe-Hellman (ECDDH) assumption.
5.2 Security of EunomiaDET
We prove security for EunomiaDET, formalized as an in-
distinguishability game. We ﬁrst deﬁne a notion of log
equivalence that characterizes the conﬁdentiality achieved
by EunomiaDET (and, as we explain later, by EunomiaKH).
This notion is a central contribution of our work. The
security theorem in this section shows that by looking at
the EunomiaDET encryption of a log, an adversary can learn
only that the log belongs to its equivalence class (with non-
negligible probability). Hence, the equivalence class of the
log represents the uncertainty of the adversary about the
log’s contents and, therefore, characterizes what conﬁden-
tiality the scheme provides.
Deﬁnition 1 (Plaintext log equivalence) Given any two
plaintext audit logs L1 and L2, an equality scheme δ, a set
of constants C and a set of displacements D ⊆ C, L1 and
L2 are equivalent, denoted by L1 ≡(δ,C,D) L2, if and only if
all of the followings hold:
1. L1 and L2 have the same schema and tables of the
same name in L1 and L2 have the same number of
records (rows).
2. For each equivalence class of columns deﬁned by δ,
there is a bijection from values of L1 to values of L2.
(By equivalence class of columns deﬁned by δ, we mean
an equivalence class of columns deﬁned by the reﬂexive,
symmetric, transitive closure of δ.) For a table t and a
column a, let Mt,a denote the bijection corresponding
to the equivalence class of δ in which (t, a) lies. Let v
be the value in some row i of the table t, column a in
L1. Then,
(a) The value in the ith row of table t, column a in
L2 is Mt,a(v).
(b) If v ∈ C, then Mt,a(c) = c.
(c) |v| = |Mt,a(v)|.
3. Let timeStamps(L1) be the sequence of timestamps in
L1 obtained by traversing the tables of L1 in any or-
der and the timestamps within each table in row order.
Let timeStamps(L2) be the timestamps in L2 obtained
similarly, traversing tables in the same order. Then,
EDD(timeStamps(L1), timeStamps(L2), D) holds.
Intuitively, each clause of the above deﬁnition speciﬁes
a property of logs that a log’s encryption under either of
our schemes may reveal to an adversary. Everything else
about the encrypted log remains hidden. We list below the
revealed properties to which each clause of the above deﬁni-
tion corresponds:
1. Schema of the log and the number of records in each
of its tables.
2a. If two columns can be joined (according to δ) then for
two values, one from each column, whether the values
are equal.
2b. The encryption(s) of any constant that appears in the
policy.
2c. The length of each value in the log.
3. The relative order of all timestamps in the log, dis-
placed by constants in D and by 0.
No other information about the log can be recovered by
an adversary looking at the log’s encryption. In particular,
a log’s encryption reveals neither the actual values on the
log (other than constants occurring in the policy), nor the
equality between values in non-joinable columns. Note that
all revealed information is either necessary to execute audit
queries or it cannot be hidden even with (cell-granularity)
semantically-secure encryption.
We now deﬁne the IND-CPLADET game, which formalizes
when an adversary Adv breaks the security of EunomiaDET.
IND-CPLADET stands for indistinguishability under the cho-
sen plaintext log attack.
IND-CPLADET game. The IND-CPLADET game is played be-
tween a client or challenger Cl and an adversary Adv for all
large enough security parameters κ.
1. Adv picks a log schema S, the sets C, D and an equality
scheme δ and gives these to Cl.
2. Cl probabilistically generates a set of secret keys K
based on the suﬃciently large security parameter κ,
the log schema S, and the equality scheme δ. K $←
KeyGenDET(1κ, S, δ).
3. Cl randomly selects a bit b. b
4. Adv chooses two plaintext audit logs L0 and L1 such
that both L0, L1 have schema S, L0 ≡(δ,C,D) L1, L0 6=
L1, and sends L0, L1 to Cl.
$← {0, 1}.
5. Following the scheme EunomiaDET, Cl deterministically
encrypts Lb according to the key set K to obtain the
encrypted audit log eDBb.
heDBb, eTbi ← EncryptLogDET(Lb, S, K).
It then constructs the mOPED data structure eTb.
Adv may observe the construction of the mOPED
data-structure eTb passively. Cl then sends heDBb, eTbi
to Adv.
6. For any constant c ∈ C, if c appears in table t, column
a of Lb, then Cl gives Adv the encryption of c with the
encryption key of column a.
7. Adv runs a probabilistic algorithm that may invoke the
encryption oracle on keys from K but never asks for the
encryption of any value in L0 or L1.
8. Adv outputs its guess b′ of b.
1137Adv wins the IND-CPLADET game iﬀ b = b′. Let the ran-
DET be 1 if the Adv wins and 0 otherwise.
dom variable winAdv
Theorem 2 (Security of EunomiaDET) If deterministic en-
cryption is a pseudorandom function, then the encryption
scheme EunomiaDET is IND-CPLADET secure, i.e., for any
ppt adversary Adv and suﬃciently large κ, Pr[winAdv
DET = 1] ≤
1
2 + negl(κ) where the probability is taken over the random
coins used by Adv as well as the random coins used in choos-
ing keys and the random bit b.
Proof. By hybrid argument. We successively replace
If
uses of deterministic encryption with a random oracle.
the Adv can distinguish two consecutive hybrids with non-
negligible probability, it can also distinguish a random oracle
from a pseudorandom function, which is a contradiction.
Intuitively, this theorem says that any adversary cannot
distinguish two equivalent logs if they are encrypted with
EunomiaDET, except with negligible probability. An imme-
diate corollary of this theorem is that a passive cloud that
observes the execution of our audit algorithm ereduce on
a log encrypted with EunomiaDET learns only the ≡(δ,C,D)
class of the log and, hence, only the log properties listed
earlier in this section. This follows because ereduce can be
simulated by the adversary.
5.3 Security of EunomiaKH
We now deﬁne and prove security for the log encryption
scheme EunomiaKH. The security game, IND-CPLAKH, is sim-
ilar IND-CPLADET and uses the same deﬁnition of log equiva-
lence. The proof of security for EunomiaKH is in the standard
model and reduces to the ECDDH assumption.
IND-CPLAKH game. The IND-CPLAKH game is played be-
tween a challenger Cl and a PPT adversary Adv for all
large enough security parameters κ.
It is very similar to
the IND-CPLADET security game but has the following dif-
ferences. All the encryption is done using the EunomiaKH
scheme. Additionally, after step 5, Cl generates the token
list ~∆ according to δ and send its to Adv. Adv wins the
IND-CPLAKH game iﬀ b = b′. Let the random variable winAdv
KH
be 1 if the Adv wins and 0 otherwise.
Theorem 3 (Security of EunomiaKH) If the ECDDH as-
sumption holds and the encryption scheme used in EunomiaKH
is IND-CPA secure, then EunomiaKH is IND-CPLAKH secure,
i.e., for any ppt adversary Adv and suﬃciently large κ, the
following holds: Pr[winAdv
2 + negl(κ), where the
probability is taken over the random coins used by Adv as
well as the random coins used in choosing keys and the ran-
dom bit b.
KH = 1] ≤ 1
Proof. By hybrid argument, we reduce to the IND-CPA
security of encryption and the security of AKH [35, Deﬁni-
tion 4]. The latter relies on the ECDDH assumption.
IND-CPLADET
Generalizing the security deﬁnitions.
and IND-CPLAKH security games cover only a single round
of interaction between the adversary and the challenger. It
is possible to extend the games to a polynomial number of
interactions and maintain the security theorems. However,
we must assume that the adversary chooses more precise
logs in each interaction, i.e., if the adversary chooses logs
Li
in the (i + 1)-th
1 in the ith interaction and Li+1
, Li+1
0, Li
0
1
0 ≥ Li
interaction, then Li+1
1. Recall that,
L1 ≥ L2 means the log L1 extends the log L2 with additional
information, possibly, replacing unknown values in L1 with
either true or false.
0 and Li+1
1 ≥ Li
Attacks using frequency analysis. Similar to prior work
based on deterministic encryption, our security games (i.e.,
IND-CPLADET and IND-CPLAKH) and security theorems (i.e.,
Theorems 2 and 3) implicitly assume that all plaintext logs
within an equivalence class are equally likely a priori. This
is because in both games, the value b is chosen without
bias.
If the plaintexts are not uniformly distributed and
some auxiliary information about this distribution is known
to the adversary, then the security theorems may not apply.
In fact, concurrent work by Naveed et al. [28] shows that
the association between ciphertexts and plaintexts for de-
terministically encrypted databases can be recovered using
frequency analysis, when the adversary knows the distribu-
tion of the frequencies of data values in the columns of the
plaintext database. However, guessing such distributions
for columns containing sensitive information (e.g., SSNs,
names) is usually very diﬃcult for an adversary. Naveed et
al.’s evaluation is based on publicly available plaintext pa-
tient record databases containing only non-personally iden-
tiﬁable columns like race, gender, and duration of stay at a
hospital.
6. AUDITING ALGORITHM
We now present our auditing algorithm ereduce, which
adapts the prior algorithm reduce [19] to run on logs en-
crypted with EunomiaDET and EunomiaKH. Our choice of
reduce as the basis is motivated by the fact that reduce is
general enough to capture rich policies, including most pri-
vacy clauses of HIPAA and GLBA. The algorithm ereduce
has two very similar versions that execute on logs encrypted
with EunomiaDET and EunomiaKH. We call these versions
ereduceDET and ereduceKH, respectively. The principal
diﬀerence between reduce and ereduceKH/DET is that the
ereduceKH/DET uses the special mOPED data structure to
evaluate displaced comparisons. In the following we ﬁrst de-
scribe ereduceKH in detail and then describe how to simplify
it to obtain ereduceDET.
6.1 Auxiliary Deﬁnitions
A substitution σ is a ﬁnite map from variables to value,
provenance pairs. Each element in the range of a substi-
tution is of the form hv, ℓi, where v is the value that the
variable is mapped to and ℓ is called the provenance of v.
The provenance ℓ indicates which table and which column
the value v originated from. ℓ has the form p.a. We often
write a substitution σ as a ﬁnite list of elements, each of the
form hx, vh, ve, ℓi. For any variable x in σ’s domain, we use
σ(x).hash, σ(x).cipher, and σ(x).ℓ to select the hash value
(i.e., vh), the ciphertext value (i.e., ve), and the provenance
(i.e., ℓ), respectively.
We say substitution σ1 extends σ2 (denoted σ1 ≥ σ2) if
σ1’s domain contains σ2’s domain and σ1 agrees with σ2
on all variables in σ2’s domain. Given a substitution σ, we
deﬁne [σ] = {hx, p.ai | ∃v.σ(x) = hv, p.ai}. We use σ ↓ X,
where X ⊆ domain(σ), to denote the substitution σ′ such
that σ ≥ σ′ and the domain of σ′ contains variables from the
set X only. We lift the ↓ operation to a set of substitutions
1138Σ pointwise. We use • to denote the identity substitution.
We say that a substitution σ satisﬁes a formula g on the
(EunomiaKH-)encrypted log eL if replacing each free variable
x in g with the concrete value σ(x).hash results in a formula
that is true on eL.
6.2 Algorithm ereduceKH
KH
KH
and esat
and esat
Like its basis reduce, the algorithm ereduceKH is deﬁned
as a recursive function that operates on the logical represen-
tation of the policy being audited.
It uses two auxiliary
KH. We describe these functions
below. To simplify notation, we drop the superscript KH
KH in the rest of this sec-
functions, desat
from ereduceKH, desat
tion and write ereduce, desat and esat instead.
ereduce(eL, ϕ, ~∆, σ) is the top-level function that takes as
input a EunomiaKH encrypted audit log eL, a constant en-
crypted policy ϕ, a set of tokens ~∆, and an input substitu-
tion σ, and returns a residual policy ψ. ψ represents a part
of the original policy ϕ that cannot be evaluated due to lack
of information in eL. We use • as the input substitution to
the initial call to ereduce.
desat(eL, g, ~∆, σ) is an auxiliary function used by ereduce
while evaluating quantiﬁers to get all ﬁnite substitutions
that satisfy the quantiﬁer’s guard formula. It takes as input
a EunomiaKH encrypted audit log eL, a constant encrypted
formula g, a set of tokens ~∆, and an input substitution σ,
and returns all ﬁnite substitutions for free variables of g that
extend σ and satisfy g with respect to eL.
esat(eL, p(~t), ~∆, σ) is an auxiliary function used by desat for
evaluating all ﬁnite substitutions that satisfy a given pred-
icate (with an input substitution applied). The inputs eL,
~∆, and σ have their usual meaning. p(~t) is a constant en-
crypted predicate. This function returns all ﬁnite substitu-
tions for free variables of p(~t) that extend the input substi-
tution σ and satisfy p(~t) on eL. The implementation of esat
is log-representation dependent. Evaluation of the predicate
timeOrder uses the mOPED data structure.
ereduce eagerly evaluates as much of the input policy
ϕ as it can; in case it cannot evaluate a portion of ϕ due
to eL’s incompleteness, it returns that portion of ϕ as part
of the result. The return value of ereduce is thus a logi-
cal formula ψ (called the residual formula). Auditing with
ereduce is an iterative process. When the current log eL is
extended with additional information (thus removing some
incompleteness) resulting in the new log eL1 (eL1 ≥ eL),