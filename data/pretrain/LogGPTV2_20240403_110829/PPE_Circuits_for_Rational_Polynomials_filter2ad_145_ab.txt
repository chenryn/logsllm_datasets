Rules 3a and 3b are for when F contains one or more variables not
in InTrusted; these are necessary to handle the fresh randomness
used in private keys and signatures, etc.
Rule 1 (Figure 2): This is a simple rule. It moves F ∈ U to T
if (1) all variables in F are in InTrusted, (2) A = e (F , д) for
some A ∈ Space(T ) and (3) h(u) (cid:44) 0. Here F can only be
paired with the generator д. In our example, we can check
e (дa, дb ) = e (F , д) to test if F is дab.
Rule 2 (Figure 4): This is a generalization of Rule 1 that allows F
to be paired with an element F ′ ∈ Space(T ), instead of only the
generator д. It is less efficient than Rule 1, because it requires
both our recursive algorithm and the PPE Circuit it builds to
condition on whether or not F ′ = д
0. (Because the equation
0 = e (F , F ′) is trivially satisfied for all F when F ′ = д
0
e (д, д)
and thus cannot be used to validate F in this case.)
In the first branch, we check if (1) F ′ (cid:44) д
0, (2) all variables in
F are in InTrusted, (3) there exists an A ∈ Space(T ) such that
A = e (F , F ′) and (4) h(u) (cid:44) 0. If all conditions are met, it moves
F to T ′, recurses on that smaller problem and adds this logic to
the PPE Circuit with a validation for F and a check that F ′ (cid:44) д
0.
For instance, e (дac , д) = e (F , дa+b ) can be used to check that
F is дac /(a+b ) when a + b (cid:44) 0.
In the second branch where F ′ = д
0, the algorithm recurses on
the (possibly) reduced sets T ′, U ′ where zero is substituted for
the exponent of F ′. It also adds any subcircuit produced for this
problem to the PPE circuit together with a check that F ′ = д
0. In
our example, where T = {дa, дb} and U = {дab , дac , дac /(a+b ),
1/(d +a)}, if we substitute a + b = 0 into these sets, element
д
3This combination is sometimes as simple as C AND C′, but as the reader can
see from Figure 7, it may also be more complex.
дac /(a+b ) becomes undefined. This branch is thus not allowed
and returns a circuit that always rejects.
The logic from these two branches will be connected with an
OR gate.
Rule 3a (Figure 5): Rule 3a handles F = дf (u)/h (u) in U where
the numerator f (u) contains a variable not in InTrusted, but
all variables of the denominator h(u) are in InTrusted. Here we
+ h′′, where (1) uj is not in
look at numerators f (u) = h′ud
j
InTrusted, 2) h′ and h(u) contain only variables in InTrusted,
(3) h′′ does not contain uj, (4) d is relatively prime to p − 1 and
(5) h(u) (cid:44) 0. This rule has a larger potential branching degree
than Rule 2, because it must additionally branch on whether
h′ (cid:44) 0 since it cannot use F to validate uj if uj is zeroed out by
h′ in F.
In our example, Rule 3a would identify F = дac as a candidate
to move to trusted as c is not in InTrusted. It must condition on
whether a = 0. In the branch where a (cid:44) 0, it would move дac to
trusted and set InTrusted = {a, b, c}. In the branch where a = 0,
it performs this substitution and recurses on the subproblem
T ′ = {д
Rule 3b (Figure 6): Rule 3b is the same as Rule 3a, except now
all variables of the numerator must be in InTrusted and the
denominator contains a variable not in InTrusted. Using our
1/(d +a).
example, we consider the variable d in element F = д
Since there is no coefficient for variable d, it will not need to
branch, and the rule will move F to T , and the main algorithm
will recurse on this smaller problem.
, дb} and U ′ = {д
, дc /b , д
1/d}.
0
0
0
, д
Tracking Zeros. Critically to our support for rational polynomials,
our main algorithm and rules also contain logic to ensure that at
no point is a denominator of any element zero or reduced with a
polynomial that evaluates to zero, because without this check, we
could erroneously lose track of when an element becomes unde-
fined. For instance, suppose the polynomial for an exponent of an
element is a(a + c)/(b (a + c)). We cannot reduce this to a/b unless
we first check that a + c (cid:44) 0.
Putting It All Together. Each time we apply one of the above rules, it
reduces the number of untrusted elements by one. It also adds logic
to our PPE Circuit, sometimes including 2 to 4 conditional branches.
The running time of our algorithm is exponential in the worst case
(see Section 3.4), but as discussed above, our tool is surprisingly effi-
cient in practice. In our tool, we also added optimizations to identify
and reduce redundant logic, where some branches led to checking
the same values repeatedly. In our tests, these optimizations greatly
reduced the size of the output circuits. The example we used here
with T = {дa, дb} and U = {дab , дac , дac /(a+b ), д
1/(d +a)} uses all
four rules and after optimizations results in a PPE Circuit with 6
PPEs and 8 boolean gates. It is a simplified version of the Custom
Test Case 5 in Table 1 and Appendix D.2.
1.2.1 Relationship to Prior Work. On the same inputs, the running
time of our tool and the most comprehensive prior tool called
AutoCircuitPPE [47] are usually within a few seconds of each other.
They also find similar solutions.4 This is good news considering
4Currently, both tools output the first solution they find instead of caching several
solutions and picking the most optimal. We discuss the possibility of adjusting this for
our tool in Section 4.4.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2740that our support for rational polynomials considerably enlarges the
potential branching degree of the search algorithm, which could
have negatively impacted both the search time and PPE Circuit size.
Our tool is even faster in some cases (such as the 100-DDH test
case).
The AutoRationalPPE code uses some elements of the public
source code of AutoCircuitPPE2. Both tools use the Generic Group
Analyzer [19], which has some support for rational polynomials.
However, we chose to write the needed subroutines to handle ra-
tional polynomials from scratch.
The high-level idea behind our Rules 1 and 2 have roots in sim-
ilar rules from [20, 46, 47], but are more complex as they require
”tracking zeros" as discussed above to prevent elements becom-
ing undefined. The high-level idea behind our Rules 3a and 3b
was inspired by [46, 47], although we removed redundancy, added
generalization and expanded it to keep elements from becoming
undefined. We then split it in two depending on whether a vari-
able not in InTrusted appears in the numerator (Rule 3a) or the
denominator (Rule 3b).
2 DEFINITIONS: EXPANDING PPE CIRCUITS
In the section, we formalize the notion of PPE Circuits with sup-
port for rational polynomials. It is an extension of the basic PPE
Circuits proposed in [47], and the basic PPE instance and challenge
notions proposed in [46]. We make a few critical changes needed
to handle undefined elements arising from an evaluation of zero in
the denominator of a rational polynomial. Let д1, д2, дT be group
generators of prime order p for groups G1, G2, GT respectively. Fol-
lowing [46, 47], we first rewrite any cryptographic scheme using a
single group generator for each group. For example, all elements in
G1 are set up to be derived as дx1 for a single generator д1 ∈ G1 and
x ∈ Zp. Thus, we now represent each group element in the scheme
with its group, along with a polynomial representing its exponent.
We represent a pairing-based cryptographic scheme in this form as
a PPE problem instance.
Definition 2.1 (PPE Problem Instance [46, 47]). A pairing
product equation (PPE) problem instance Π consists of 5
• pairing parameters G =(p,д1,д2,дT ,G1, G2,GT ,e),
• positive integers n, m,
• multivariate rational poly. r = ( f1/h1, . . . , fm/hm ) over n
variables in Zp denoted u = (u1, . . . , un ),
• a sequence of pairing group identifiers in I = {1, 2,T} denoted
α = (α1, . . . , αm ),
• a set Trusted ⊆ [1, m].
The pairing parameters above can optionally indicate the type
of pairing group (e.g., Type I, II or III); unless otherwise speci-
fied we assume Type III pairings. Throughout the paper, we use
the notation InTrusted(Π) to denote the set of variables that ap-
pear in the Trusted set of polynomials of Π i.e., InTrusted(Π) =
∪i∈Trusted{variables used in fi} ∪ {variables used in hi} ⊆ u. We
simplify the notation and use InTrusted whenever the problem
instance Π is implicit.
5Unlike the definition of [46], we do not include the set Fixed in the PPE Problem
Instance definition and unlike [47], we allow rational polynomials.
Definition 2.2 (PPE Challenge [46]). Let Π = (G, n, m, r =
( f1/h1, . . . , fm/hm ), u, α , Trusted) be a PPE problem instance as in
Definition 2.1. Let R = (R1, . . . , Rm ) be comprised of pairing group
elements, where each Ri is in group Gαi . R is called a challenge to
PPE instance Π. Challenges are classified as:
• R = (R1, . . . , Rm ) is a YES challenge if there exists an assign-
ment to variables u = (u1, . . . , un ) ∈ Zn
p such that for all i,
Ri = д
• R = (R1, . . . , Rm ) is a NO challenge if it is not a YES challenge
and ∃ an assignment to u = (u1, . . . , un ) ∈ Zn
p such that for
all i ∈ Trusted, Ri = д
fi (u)/hi (u)
αi
• R = (R1, . . . , Rm ) is an INVALID challenge if it is neither a
YES nor NO challenge.
fi (u)/hi (u)
αi
. 6
.6
Following [46, 47], we can view an YES challenge as meaning
that both the trusted and untrusted elements are distributed as they
should be. Whereas in a NO challenge, the trusted elements are
correctly formed, but the untrusted ones are not. In an INVALID
challenge, the “trusted” elements are not drawn from the proper
distribution (e.g., the public parameters are not correct). Thus, we
do not consider this case.
Our goal is to automatically generate circuits that take as input
a PPE challenge (Definition 2.2) and output 1 for all YES challenges
and 0 for all NO challenges. The circuit will input a set of pairing
elements and output a single bit. Each gate of the circuit can be an
AND/OR/NOT/PPE gate.
(G, m, α , N , Gates, out, GateType, A, B), where
The following three definitions do not require alteration from [47].
Definition 2.3 (PPE Circuit [47]). A PPE circuit C is a tuple
• G = (p, д1, д2, дT , G1, G2, GT , e) establishes the algebraic set-
ting,
• integer m specifies the number of group elements in the circuit
input. We will refer to these as Inputs = {1, . . . , m}.
• the vector α = (α1, . . . , αm ) is a sequence of pairing group
identifiers in I = {1, 2,T} for the input elements,
• integer N is the number of gates in the PPE circuit,
• Gates = {m+1, . . . , m+N}. We will refer to Wires = Inputs∪
Gates.
• out is the integer in Gates denoting the output gate. Unless
otherwise stated, out = m + N .
• GateType : Gates → {PPE, AND, OR, NOT} is a function
that identifies the gate functionality, which is one of the fol-
lowing:
– PPE: description includes a circuit with m Inputs wires
whose logic forms that of a PPE over variables R1, . . . , Rm
where each Ri ∈ Gαi as specified by α and the single output
wire of the PPE carries a bit representing whether or not the
input satisfies the PPE,
where m + 1 ≤ a  B(д) > A(д), ignoring
B(д) when undefined. Recall that the input wires for all PPE
gates are the Inputs.
The circuit takes as input m group elements and outputs a single
output on a wire out.
Definition 2.4 (PPE Circuit Evaluation [47]). A PPE cir-
cuit evaluation Eval : C × (x1, . . . , xm ) takes as input a PPE cir-
cuit C = (G, m, α , N , Gates, out, GateType, A, B) together with an
m-element PPE challenge (x1, . . . , xm ) which must be consistent
with (G, α ) (i.e., xi ∈ Gαi ). The algorithm outputs a bit in {0, 1}.
The default evaluation algorithm is as follows. The input group ele-
ments (x1,· · · , xm ) are assigned to the m input wires. For each gate
д ∈ Gates (in the increasing order of д), compute sд as follows ac-
cording to the description of GateType(д):
• if (PPE, β ), then evaluate the PPE β using the assignment to
variables in (R1, . . . , Rk ). If the PPE is satisfied, then set sд = 1.
Otherwise, set sд = 0.
• if AND, then sд = sA(д) ∧ sB (д).
• if OR, then sд = sA(д) ∨ sB (д).
• if NOT, then sд = ¬sA(д).
This algorithm outputs sout. For the AND, OR and NOT gates, by the
rules of the circuit description, sA(д) and sB (д) will be defined before
they are used.
Following [47], we let C (x) denote Eval(C, x) i.e., evaluation of
the circuit C on input x. We let Cд (x) denote the output of gate д
of the circuit C on input x.
Definition 2.5 (PPE Circuit Testable / Testing Circuits [47]).
A PPE problem instance Π = (G, n, m, r, u, α , Trusted) is said to be
PPE circuit testable if and only if there exists a PPE circuit C =
(G, m, α , N , Gates, out, GateType, A, B). such that both of the fol-
lowing hold:
• C (x) = 1 for every YES challenge x,
• C (y) = 0 for every NO challenge y.
There are no conditions on the behavior of C for INVALID challenges.
For any PPE problem instance Π, we call such a PPE circuit C a testing
circuit. A testing circuit for a PPE problem instance need not be unique.
For consistency, we adopt the circuit shorthands from [47], which
we review for the reader in Appendix B.
3 SEARCHING FOR A PPE TESTING CIRCUIT
WITH RATIONAL POLYNOMIAL SUPPORT
In this section, we describe an algorithm that searches for a PPE
testing circuit Q for a given PPE problem. The algorithm takes a PPE