title:BotMiner: Clustering Analysis of Network Traffic for Protocol- and
Structure-Independent Botnet Detection
author:Guofei Gu and
Roberto Perdisci and
Junjie Zhang and
Wenke Lee
BotMiner: Clustering Analysis of Network Trafﬁc for
Protocol- and Structure-Independent Botnet Detection
Guofei Gu†, Roberto Perdisci‡, Junjie Zhang†, and Wenke Lee†
†College of Computing, Georgia Institute of Technology
‡Damballa, Inc. Atlanta, GA 30308, USA
{guofei,jjzhang,wenke}@cc.gatech.edu, PI:EMAIL
Abstract
tion exﬁltration.
Botnets are now the key platform for many Internet
attacks, such as spam, distributed denial-of-service
(DDoS), identity theft, and phishing. Most of the current
botnet detection approaches work only on speciﬁc
botnet command and control (C&C) protocols (e.g.,
IRC) and structures (e.g., centralized), and can become
ineffective as botnets change their C&C techniques. In
this paper, we present a general detection framework that
is independent of botnet C&C protocol and structure,
and requires no a priori knowledge of botnets (such as
captured bot binaries and hence the botnet signatures,
and C&C server names/addresses). We start from the
deﬁnition and essential properties of botnets. We deﬁne
a botnet as a coordinated group of malware instances
that are controlled via C&C communication channels.
The essential properties of a botnet are that the bots
communicate with some C&C servers/peers, perform
malicious activities, and do so in a similar or correlated
way. Accordingly, our detection framework clusters
similar communication trafﬁc and similar malicious
trafﬁc, and performs cross cluster correlation to identify
the hosts that share both similar communication patterns
and similar malicious activity patterns. These hosts
are thus bots in the monitored network. We have
implemented our BotMiner prototype system and
evaluated it using many real network traces. The results
show that it can detect real-world botnets (IRC-based,
HTTP-based, and P2P botnets including Nugache and
Storm worm), and has a very low false positive rate.
1 Introduction
Botnets are becoming one of the most serious threats to
Internet security. A botnet is a network of compromised
machines under the inﬂuence of malware (bot) code. The
botnet is commandeered by a “botmaster” and utilized as
“resource” or “platform” for attacks such as distributed
denial-of-service (DDoS) attacks, and fraudulent activi-
ties such as spam, phishing, identity theft, and informa-
In order for a botmaster to command a botnet, there
needs to be a command and control (C&C) channel
through which bots receive commands and coordinate
attacks and fraudulent activities. The C&C channel is
the means by which individual bots form a botnet. Cen-
tralized C&C structures using the Internet Relay Chat
(IRC) protocol have been utilized by botmasters for a
long time. In this architecture, each bot logs into an IRC
channel, and seeks commands from the botmaster. Even
today, many botnets are still designed this way. Quite a
few botnets, though, have begun to use other protocols
such as HTTP [8, 14, 24, 39], probably because HTTP-
based C&C communications are more stealthy given
that Web trafﬁc is generally allowed in most networks.
Although centralized C&C structures are effective, they
suffer from the single-point-of-failure problem. For ex-
ample, if the IRC channel (or the Web server) is taken
down due to detection and response efforts, the botnet
loses its C&C structure and becomes a collection of
isolated compromised machines. Recently, botmasters
began using peer-to-peer (P2P) communication to avoid
this weakness. For example, Nugache [28] and Storm
worm [18, 23] (a.k.a. Peacomm) are two representative
P2P botnets. Storm, in particular, distinguishes itself
as having infected a large number of computers on the
Internet and effectively becoming one of the “world’s top
super-computers” [27] for the botmasters.
Researchers have proposed a few approaches [7, 17,
19, 20, 26, 29, 35, 40] to detect the existence of botnets
in monitored networks. Almost all of these approaches
are designed for detecting botnets that use IRC or HTTP
based C&C [7, 17, 26, 29, 40]. For example, Rishi [17]
is designed to detect IRC botnets using known IRC bot
nickname patterns as signatures.
In [26, 40], network
ﬂows are clustered and classiﬁed according to IRC-like
trafﬁc patterns. Another more recent system, BotSniffer,
[20] is designed mainly for detecting C&C activities
with centralized servers (with protocols such as IRC
USENIX Association  
17th USENIX Security Symposium 
139
and HTTP1). One exception is perhaps BotHunter [19],
which is capable of detecting bots regardless of the C&C
structure and network protocol as long as the bot be-
havior follows a pre-deﬁned infection life cycle dialog
model.
However, botnets are evolving and can be quite ﬂexi-
ble. We have witnessed that the protocols used for C&C
evolved from IRC to others (e.g., HTTP [8, 14, 24, 39]),
and the structure moved from centralized to distributed
(e.g., using P2P [18, 28]). Furthermore, a botnet dur-
ing its lifetime can also change its C&C server address
frequently, e.g., using fast-ﬂux service networks [22].
Thus, the aforementioned detection approaches designed
for IRC or HTTP based botnets may become ineffective
against the recent/new botnets. Even BotHunter may fail
as soon as botnets change their infection model(s).
Therefore, we need to develop a next generation botnet
detection system, which should be independent of the
C&C protocol, structure, and infection model of botnets,
and be resilient to the change of C&C server addresses.
In addition, it should require no a priori knowledge of
speciﬁc botnets (such as captured bot binaries and hence
the botnet signatures, and C&C server names/addresses).
In order to design such a general detection system that
can resist evolution and changes in botnet C&C tech-
niques, we need to study the intrinsic botnet communi-
cation and activity characteristics that remain detectable
with the proper detection features and algorithms. We
thus start with the deﬁnition and essential properties of a
botnet. We deﬁne a botnet as:
“A coordinated group of malware instances that are
controlled via C&C channels”.
The term “malware” means these bots are used to
perform malicious activities. According to [44], about
53% of botnet activity commands observed in thousands
of real-world IRC-based botnets are related to scan (for
the purpose of spreading or DDoS2), and about 14.4%
are related to binary downloading (for the purpose of
malware updating).
In addition, most of HTTP-based
and P2P-based botnets are used to send spam [18, 39].
The term “controlled” means these bots have to con-
tact their C&C servers to obtain commands to carry out
activities, e.g., to scan.
In other words, there should
be communication between bots and C&C servers/peers
(which can be centralized or distributed). Finally, the
term “coordinated group” means that multiple (at least
two) bots within the same botnet will perform similar or
correlated C&C communications and malicious activi-
1BotSniffer could be extended to support other protocol based
C&C, if the corresponding protocol matchers are added.
2For spreading, the scans usually span many different hosts (within
a subnet) indicated by the botnet command. For DDoS, usually there
are numerous connection attempts to a speciﬁc host. In both cases, the
trafﬁc can be considered as scanning related.
ties. If the botmaster commands each bot individually
with a different command/channel, the bots are nothing
but some isolated/unrelated infections. That is, they do
not function as a botnet according to our deﬁnition and
are out of the scope of this work3.
We propose a general detection framework that is
based on these essential properties of botnets. This
framework monitors both who is talking to whom that
may suggest C&C communication activities and who is
doing what that may suggest malicious activities, and
ﬁnds a coordinated group pattern in both kinds of activi-
ties. More speciﬁcally, our detection framework clusters
similar communication activities in the C-plane (C&C
communication trafﬁc), clusters similar malicious activ-
ities in the A-plane (activity trafﬁc), and performs cross
cluster correlation to identify the hosts that share both
similar communication patterns and similar malicious
activity patterns. These hosts, according to the botnet
deﬁnition and properties discussed above, are bots in the
monitored network.
This paper makes the following main contributions.
• We develop a novel general botnet detection frame-
work that is grounded on the deﬁnition and essential
properties of botnets. Our detection framework
is thus independent of botnet C&C protocol and
structure, and requires no a priori knowledge (e.g.,
C&C addresses/signatures) of speciﬁc botnets.
It
can detect both centralized (e.g., IRC,HTTP) and
current (and possibly future) P2P based botnets.
• We deﬁne a new “aggregated communication ﬂow”
(C-ﬂow) record data structure to store aggregated
trafﬁc statistics, and design a new layered clustering
scheme with a set of trafﬁc features measured on
the C-ﬂow records. Our clustering scheme can
accurately and efﬁciently group similar C&C trafﬁc
patterns.
• We build a BotMiner prototype system based on our
general detection framework, and evaluate it with
multiple real-world network traces including nor-
mal trafﬁc and several real-world botnet traces that
contain IRC, HTTP and P2P-based botnet trafﬁc
(including Nugache and Storm). The results show
that BotMiner has a high detection rate and a low
false positive rate.
The rest of the paper is organized as follows.
In
Section 2, we describe the assumptions, objectives, ar-
chitecture of our BotMiner detection framework, and its
3One can still use our complementary system, BotHunter [19], to
detect individual bots. In this paper, we focus on the detection of a
botnet. We further clarify our assumptions in Section 2.1 and address
limitations in Section 4.
140 
17th USENIX Security Symposium 
USENIX Association
detection algorithms and implementation. In Section 3,
we describe our evaluation on various real-world net-
work traces. In Section 4, we discuss current limitations
and possible solutions. We review the related work in
Section 5 and conclude in Section 6.
2 BotMiner Detection Framework and Im-
plementation
2.1 Problem Statement and Assumptions
According to the deﬁnition given above, a botnet is char-
acterized by both a C&C communication channel (from
which the botmaster’s commands are received) and ma-
licious activities (when commands are executed). Some
other forms of malware (e.g., worms) may perform mali-
cious activities, but they do not connect to a C&C chan-
nel. On the other hand, some normal applications (e.g.,
IRC clients and normal P2P ﬁle sharing software) may
show communication patterns similar to a botnet’s C&C
channel, but they do not perform malicious activities.
Figure 1 illustrates two typical botnet structures,
namely centralized and P2P. The bots receive commands
from the botmaster using a push or pull mechanism [20]
and execute the assigned tasks.
The operation of a centralized botnet is relatively easy
and intuitive [20], whereas this is not necessarily true
for P2P botnets. Therefore, here we brieﬂy illustrate an
example of a typical P2P-based botnet, namely Storm
worm [18, 23]. In order to issue commands to the bots,
the botmaster publishes/shares command ﬁles over the
P2P network, along with speciﬁc search keys that can
be used by the bots to ﬁnd the published command
ﬁles. Storm bots utilize a pull mechanism to receive
the commands. Speciﬁcally, each bot frequently contacts
its neighbor peers searching for speciﬁc keys in order to
locate the related command ﬁles. In addition to search
operations, the bots also frequently communicate with
their peers and send keep-alive messages.
In both centralized and P2P structures, bots within
the same botnet are likely to behave similarly in terms
of communication patterns. This is largely due to the
fact that bots are non-human driven, pre-programmed to
perform the same routine C&C logic/communication as
coordinated by the same botmaster.
In the centralized
structure, even if the address of the C&C server may
change frequently (e.g., by frequently changing the A
record of a Dynamic DNS domain name), the C&C
communication patterns remain unchanged. In the case
of P2P-based botnets, the peer communications (e.g., to
search for commands or to send keep-alive messages)
follow a similar pattern for all the bots in the botnet,
although each bot may have a different set of neighbor
peers and may communicate on different ports.
Regardless of the speciﬁc structure of the botnet (cen-
tralized or P2P), members of the same botnet (i.e., the
bots) are coordinated through the C&C channel. In gen-
eral, a botnet is different from a set of isolated individual
malware instances, in which each different instance is
used for a totally different purpose. Although in an
extreme case a botnet can be conﬁgured to degenerate
into a group of isolated hosts, this is not the common
case.
In this paper, we focus on the most typical and
useful situation in which bots in the same botnet perform
similar/coordinated activities. To the best of our knowl-
edge, this holds true for most of the existing botnets
observed in the wild.
To summarize, we assume that bots within the same
botnet will be characterized by similar malicious activ-
ities, as well as similar C&C communication patterns.
Our assumption holds even in the case when the bot-
master chooses to divide a botnet into sub-botnets, for
example by assigning different tasks to different sets of
bots. In this case, each sub-botnet will be characterized
by similar malicious activities and C&C communications
patterns, and our goal is to detect each sub-botnet. In
Section 4 we provide a detailed discussion on possible
evasive botnets that may violate our assumptions.
2.2 Objectives
The objective of BotMiner is to detect groups of compro-
mised machines within a monitored network that are part
of a botnet. We do so by passively analyzing network
trafﬁc in the monitored network.
Note that we do not aim to detect botnets at the very
moment when victim machines are compromised and
infected with malware (bot) code. In many cases these
events may not be observable by passively monitoring
network trafﬁc. For example, an already infected lap-
top may be carried in and connected to the monitored
network, or a user may click on a malicious email at-
tachment and get infected.
In this paper we are not
concerned with the way internal hosts become infected
(e.g., by malicious email attachments, remote exploiting,
and Web drive-by download). We focus on the detection
of groups of already compromised machines inside the
monitored network that are part of a botnet.
Our detection approach meets several goals:
• it is independent of the protocol and structure used
for communicating with the botmaster (the C&C
channel) or peers, and is resistant to changes in the
location of the C&C server(s).
• it is independent of the content of the C&C com-
munication. That is, we do not inspect the content
of the C&C communication itself, because C&C
could be encrypted or use a customized (obscure)
protocol.
USENIX Association  
17th USENIX Security Symposium 
141
C&C or peer
communication
Malicious
activity
C&C
bot
bot
bot
bot
bot
(a)
bot
bot
bot
bot
(b)
bot
bot
Figure 1: Possible structures of a botnet: (a) centralized; (b) peer-to-peer.
A-Plane Monitor
Scan
Spam
Binary
Downloading
Exploit
...
Activity Log
C-Plane Monitor
Flow Log
A-Plane
Clustering
C-Plane
Clustering
Network
Traffic
Cross-Plane
Correlation
Reports
Figure 2: Architecture overview of our BotMiner detection framework.
• it generates a low number of false positives and false
negatives.
• the analysis of network trafﬁc employs a reasonable
amount of resources and time, making detection
relatively efﬁcient.
2.3 Architecture of BotMiner Detection Framework
Figure 2 shows the architecture of our BotMiner detec-
tion system, which consists of ﬁve main components:
C-plane monitor, A-plane monitor, C-plane clustering
module, A-plane clustering module, and cross-plane cor-
relator.
The two trafﬁc monitors in C-plane and A-plane can
be deployed at the edge of the network examining trafﬁc
between internal and external networks, similar to BotH-
unter [19] and BotSniffer [20]4. They run in parallel
and monitor the network trafﬁc. The C-plane monitor
is responsible for logging network ﬂows in a format
suitable for efﬁcient storage and further analysis, and
4All these tools can also be deployed in LANs.
the A-plane monitor is responsible for detecting suspi-
cious activities (e.g., scanning, spamming, and exploit
attempts). The C-plane clustering and A-plane clustering
components process the logs generated by the C-plane
and A-plane monitors, respectively. Both modules ex-
tract a number of features from the raw logs and apply
clustering algorithms in order to ﬁnd groups of machines
that show very similar communication (in the C-plane)
and activity (in the A-plane) patterns. Finally, the cross-
plane correlator combines the results of the C-plane and
A-plane clustering and makes a ﬁnal decision on which
machines are possibly members of a botnet. In an ideal
situation, the trafﬁc monitors should be distributed on the
Internet, and the monitor logs are reported to a central
repository for clustering and cross-plane analysis.
In our current prototype system, trafﬁc monitors are
implemented in C for the purpose of efﬁciency (working
on real-time network trafﬁc). The clustering and corre-
lation analysis components are implemented mainly in
Java and R (http://www.r-project.org/), and
they work ofﬂine on logs generated from the monitors.
The following sections present the details of the design
142 
17th USENIX Security Symposium 
USENIX Association
and implementation of each component of the detection
framework.
2.4 Trafﬁc Monitors
C-plane Monitor. The C-plane monitor captures net-
work ﬂows and records information on who is talking to
whom. Many network routers support the logging of net-
work ﬂows, e.g., Cisco (www.cisco.com) and Juniper
(www.juniper.net) routers. Open source solutions
like Argus (Audit Record Generation and Utilization
System, http://www.qosient.com/argus) are
also available. We adapted an efﬁcient network ﬂow cap-
ture tool developed at our research lab, i.e., fcapture
5, which is based on the Judy library (http://judy.
sourceforge.net/). Currently, we limit our inter-
est to TCP and UDP ﬂows. Each ﬂow record contains the
following information: time, duration, source IP, source
port, destination IP, destination port, and the number of
packets and bytes transfered in both directions. The main
advantage of our tool is that it works very efﬁciently
on high speed networks (very low packet loss ratio on
a network with 300Mbps trafﬁc), and can generate very
compact ﬂow records that comply with the requirement
for further processing by the C-plain clustering mod-
ule. As a comparison, our ﬂow capturing tool generates
compressed records ranging from 200MB to 1GB per
day from the trafﬁc in our academic network, whereas
Argus generates around 36GB of compressed binary ﬂow
records per day on average (without recording any pay-
load information). Our tool makes the storage of several
weeks or even months of ﬂow data feasible.
A-plane Monitor. The A-plane monitor logs informa-
tion on who is doing what.