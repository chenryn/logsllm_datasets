title:GRECS: Graph Encryption for Approximate Shortest Distance Queries
author:Xianrui Meng and
Seny Kamara and
Kobbi Nissim and
George Kollios
GRECS: Graph Encryption for Approximate
Shortest Distance Queries
Xianrui Meng
Boston University
PI:EMAIL
Seny Kamara
Microsoft Research
PI:EMAIL
George Kollios
Boston University
PI:EMAIL
Kobbi Nissim
Ben-Gurion University
∗
CRCS Harvard University
PI:EMAIL
ABSTRACT
We propose graph encryption schemes that eﬃciently sup-
port approximate shortest distance queries on large-scale en-
crypted graphs. Shortest distance queries are one of the
most fundamental graph operations and have a wide range
of applications. Using such graph encryption schemes, a
client can outsource large-scale privacy-sensitive graphs to
an untrusted server without losing the ability to query it.
Other applications include encrypted graph databases and
controlled disclosure systems. We propose GRECS (stands
for GRaph EnCryption for approximate Shortest distance
queries) which includes three oracle encryption schemes that
are provably secure against any semi-honest server. Our
ﬁrst construction makes use of only symmetric-key opera-
tions, resulting in a computationally-eﬃcient construction.
Our second scheme makes use of somewhat-homomorphic
encryption and is less computationally-eﬃcient but achieves
optimal communication complexity (i.e. uses a minimal
amount of bandwidth). Finally, our third scheme is both
computationally-eﬃcient and achieves optimal communica-
tion complexity at the cost of a small amount of additional
leakage. We implemented and evaluated the eﬃciency of our
constructions experimentally. The experiments demonstrate
that our schemes are eﬃcient and can be applied to graphs
that scale up to 1.6 million nodes and 11 million edges.
Categories and Subject Descriptors
G.2.2 [Discrete Mathematics]: Graph Theory—graph
algorithms; H.2.7 [DATABASE MANAGEMENT]:
Database Administration—Security, integrity, and protec-
tion; D.4.6 [OPERATING SYSTEMS]: Security and
Protections—Cryptographic controls
∗Work partly done when the author was visiting the Hariri
Institute for Computing and Computational Science & En-
gineering at Boston University.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813672.
Keywords
Graph encryption; structured encryption; graph algorithms;
shortest distance queries; searchable encryption
1 Introduction
Graph databases that store, manage, and query large graphs
have received increased interest recently due to many large-
scale database applications that can be modeled as graph
problems. Example applications include storing and query-
ing large Web graphs, online social networks, biological net-
works, RDF datasets, and communication networks. As a
result, a number of systems have been proposed to manage,
query, and analyze massive graphs both in academia (e.g.,
Pregel [35], GraphLab [34], Horton [42], Trinity [44], Tur-
boGraph [23], and GraphChi-DB [29]) and industry (e.g.,
Neo4j, Titan, DEX, and GraphBase). Furthermore, with
the advent of cloud computing, there is a natural desire for
enterprises and startups to outsource the storage and man-
agement of their databases to a cloud provider.
Increas-
ing concerns about data security and privacy in the cloud,
however, have curbed many data owners’ enthusiasm about
storing their databases in the cloud.
To address this, Chase and Kamara [7] introduced the
notion of graph encryption. Roughly speaking, a graph en-
cryption scheme encrypts a graph in such a way that it can
be privately queried. Using such a scheme, an organization
can safely outsource its encrypted graph to an untrusted
cloud provider without losing the ability to query it. Several
constructions were described in [7] including schemes that
support adjacency queries (i.e., given two nodes, do they
have an edge in common?), neighbor queries (i.e., given a
node, return all its neighbors) and focused subgraph queries
on web graphs (a complex query used to do ranked web
searches). Graph encryption is a special case of structured
encryption, which are schemes that encrypt data structures
in such a way that they can be privately queried. The
most well-studied class of structured encryption schemes are
searchable symmetric encryption (SSE) schemes [46, 6, 20,
13, 25, 24, 5, 4, 37, 47] which, roughly speaking, encrypt
search structures (e.g., indexes or search trees) for the pur-
pose of eﬃciently searching on encrypted data.
In this work, we focus on the problem of designing graph
encryption schemes that support one of the most fundamen-
tal and important graph operations: ﬁnding the shortest
distance between two nodes. Shortest distance queries are
504a basic operation in many graph algorithms but also have
applications of their own. For instance, on a social net-
work, shortest distance queries return the shortest number
of introductions necessary for one person to meet another.
In protein-protein interaction networks they can be used to
ﬁnd the functional correlations among proteins [39] and on
a phone call graph (i.e., a graph that consists of phone num-
bers as vertices and calls as edges) they return the shortest
number of calls connecting two nodes.
Our techniques and contributions. Computing short-
est distance queries on massive graphs (e.g., the Web graph,
online social networks or a country’s call graph) can be very
expensive, so in practice one typically pre-computes a data
structure from the graph called a distance oracle that an-
swers shortest distance queries approximately [48, 14, 11];
that is, given two vertices v1 and v2, the structure returns a
distance d that is at most α· dist(v1, v2) + β, where α, β > 1
and dist(v1, v2) is the exact distance between v1 and v2.
In this work, we focus on designing structured encryption
schemes for a certain class of distance oracles referred to
as sketch-based oracles. Below we summarize our contribu-
tions:
• We propose three distance oracle encryption schemes.
Our ﬁrst scheme only makes use of symmetric-key
operations and, as such,
is very computationally-
eﬃcient. Our second scheme makes use of somewhat-
homomorphic encryption and achieves optimal com-
munication complexity.
is
computationally-eﬃcient, achieves optimal communi-
cation complexity and produces compact encrypted or-
acles at the cost of some leakage.
third scheme
Our
• We show that all our constructions are adaptively
semantically-secure with reasonable leakage functions.
• We implement and evaluate our solutions on real large-
scale graphs and show that our constructions are prac-
tical.
1.1 Related Work
Graph privacy. Privacy-preserving graph processing has
been considered in the past. Most of the work in this area,
however, focuses on privacy models that are diﬀerent than
ours. Some of the proposed approaches include structural
anonymization to protect neighborhood information [17, 33,
9], use diﬀerential privacy [15] to query graph statistics pri-
vately [26, 45], or use private information retrieval (PIR)
[36] to privately recover shortest paths. We note that none
of these approaches are appropriate in our context where
the graph itself stores sensitive information (and therefore
must be hidden unlike in the PIR scenario) and is stored
remotely (unlike the diﬀerential privacy and anonymization
scenarios). Structured and graph encryption was introduced
by Chase and Kamara in [7]. Structured encryption is a gen-
eralization of searchable symmetric encryption (SSE) which
was ﬁrst proposed by Song, Wagner and Perrig [46]. The no-
tion of adaptive semantic security was introduced by Curt-
mola, Garay, Kamara and Ostrovsky in [13] and generalized
to the setting of structured encryption in [7]. One could
also encrypt and outsource the graph using fully homomor-
phic encryption [18], which supports arbitrary computations
on encrypted data, but this would be prohibitively slow in
practice. Another approach is to execute graph algorithms
over encrypted and outsourced graphs is to use Oblivious
RAM [21] over the adjacency matrix of the graph. This
approach, however, is ineﬃcient and not practical even for
small graphs since it requires storage that is quadratic in the
number of nodes in the graph and a large number of costly
oblivious operations. Recent work by [49] presents an obliv-
ious data structure for computing shortest paths on planar
graphs using ORAM. For a sparse planar graph with O(n)
√
edges, their approach requires O(n1.5) space complexity at
n log n) online query time. Recent works
the cost of O(
based on ORAM, such as [31, 32], also propose oblivious se-
cure computation frameworks that can be used to compute
single source shortest paths. However, these are general pur-
pose frameworks and are not optimized to answer shortest
distance queries. Other techniques, such as those developed
by Blanton, Steele and Aliasgari [2] and by Aly et al. [1]
do not seem to scale to sparse graphs with millions of nodes
due to the quadratic complexity of the underlying operations
which are instantiated with secure multi-party computation
protocols.
Distance oracles. Computing shortest distances on large
graphs using Dijkstra’s algorithm or breadth ﬁrst search is
very expensive. Alternatively, it is not practical to store all-
pairs-shortest-distances since it requires quadratic space. To
address this, in practice, one pre-computes a data structure
called a distance oracle that supports approximate shortest
distance queries between two nodes with logarithmic query
time. Solutions such as [14, 38, 40, 11, 8, 10, 12] care-
fully select seed nodes (also known as landmarks) and store
the shortest distances from all the nodes to the seeds. The
advantage of using such a data structure is that they are
compact and the query time is very fast. For example, the
distance oracle construction of Das Sarma, Gollapudi, Na-
jork and Panigrahy [14] requires ˜O(n1/c) work to return a
(2c−1)-approximation of the shortest distance for some con-
stant c.
2 Preliminaries and Notations
Given an undirected graph G = (V, E), we denote its to-
tal number of nodes as n = |V | and its number of edges
as m = |E|. A shortest distance query q = (u, v) asks for
the length of the shortest path between u and v which we
denote dist(u, v). The notation [n] represents the set of in-
tegers {1, . . . , n}. We write x ← χ to represent an element
x being sampled from a distribution χ. We write x $←− X to
represent an element x being uniformly sampled at random
from a set X. The output x of a probabilistic algorithm A
is denoted by x ← A and that of a deterministic algorithm
B by x := B. Given a sequence of elements v, we deﬁne
its ith element either as vi or v[i] and its total number of
elements as |v|. If A is a set then |A| refers to its cardinal-
ity. Throughout, k ∈ N will denote the security parameter
and we assume all algorithms take k implicitly as input. A
function ν : N → N is negligible in k if for every positive
polynomial p(·) and all suﬃciently large k, ν(k) < 1/p(k).
We write f (k) = poly(k) to mean that there exists a poly-
nomial p(·) such that f (k) ≤ p(k) for all suﬃciently large
k ∈ N; and we similarly write f (k) = negl(k) to mean that
there exists a negligible function ν(·) such that f (k) ≤ ν(k)
for all suﬃciently large k. A dictionary DX is a data struc-
ture that stores label/value pairs ((cid:96)i, vi)n
i=1. Dictionaries
support insert and lookup operations deﬁned as follows: an
505insert operation takes as input a dictionary DX and a la-
bel/value pair ((cid:96), v) and adds the pair to DX. We denote
this as DX[(cid:96)] := v. A lookup operation takes as input a dic-
tionary DX a label (cid:96)i and returns the associated value vi. We
denote this as vi := DX[(cid:96)i]. Dictionaries can be instantiated
using hash tables and various kinds of search trees.
2.1 Cryptographic Tools
Encryption. In this work, we make use of several kinds of
encryption schemes including standard symmetric-key en-
cryption and homomorphic encryption. A symmetric-key
encryption scheme SKE = (Gen, Enc, Dec) is a set of three
polynomial-time algorithms that work as follows. Gen is a
probabilistic algorithm that takes a security parameter k as
input and returns a secret key K; Enc is a probabilistic al-
gorithm that takes as input a key K and a message m and
returns a ciphertext c; Dec is a deterministic algorithm that
takes as input a key K and a ciphertext c and returns m
if K was the key under which c was produced. A public-
key encryption scheme PKE = (Gen, Enc, Dec) is similarly
deﬁned except that Gen outputs a public/private key pair
(pk, sk) and Enc encrypts messages with the public key pk.
Informally, an encryption scheme is CPA-secure (Chosen-
Plaintext-Attack-secure) if the ciphertexts it outputs do not
reveal any partial information about the messages even to
an adversary that can adaptively query an encryption or-
acle. We refer the reader to [27] for formal deﬁnitions of
symmetric-key encryption and CPA-security.
A public-key encryption scheme is homomorphic if, in ad-
dition to (Gen, Enc, Dec), it also includes an evaluation al-
gorithm Eval that takes as input a function f and a set of
ciphertexts c1 ← Encpk(m1) through cn ← Encpk(mn) and
returns a ciphertext c such that Decsk(c) = f (m1, . . . , mn).
If a homomorphic encryption scheme supports the evalu-
ation of any polynomial-time function, then it is a fully-
homomorphic encryption (FHE) scheme [41, 18] otherwise
it is a somewhat homomorphic encryption (SWHE) scheme.
In this work, we make use of only “low degree” homomor-
phic encryption; namely, we only require the evaluation of
quadratic polynomials. In particular, we need the evaluation
algorithm to support any number of additions: Encpk(m1 +
cation: Encpk(m1m2) = Eval(×, Encpk(m1), Encpk(m2)), that
is, a ciphertext that results from a homomorphic multiplica-
tion cannot be used in another homomorphic multiplication.
Concrete instantiations of such schemes include the scheme
of Boneh, Goh and Nissim (BGN) [3] based on bilinear maps
and the scheme of Gentry, Halevi and Vaikuntanathan [19]
based on lattices.
m2) = Eval(cid:0)+, Encpk(m1), Encpk(m2)(cid:1); and a single multipli-
Pseudo-random functions. A pseudo-random function
(PRF) from domain D to co-domain R is a function fam-
ily that is computationally indistinguishable from a random
function. In other words, no computationally-bounded ad-
versary can distinguish between oracle access to a function
that is chosen uniformly at random in the family and oracle
access to a function chosen uniformly at random from the
space of all functions from D to R. A pseudo-random per-
mutation (PRP) is a pseudo-random family of permutations
over D. We refer the reader to [27] for formal deﬁnitions of
PRFs and PRPs.
3 Distance Oracles
At a high-level, our approach to designing graph encryption
schemes for shortest distance queries consists of encrypting
a distance oracle in such a way that it can be queried pri-
vately. A distance oracle is a data structure that supports
approximate shortest distance queries. A trivial construc-
tion consists of pre-computing and storing all the pairwise
shortest distances between nodes in the graph. The query
complexity of such a solution is O(1) but the storage com-
plexity is O(n2) which is not practical for large graphs.
We consider two practical distance oracle constructions.
Both solutions are sketch-based which means that they as-
sign a sketch Skv to each node v ∈ V in such a way that
the approximate distance between two nodes u and v can be
eﬃciently (sublinear) computed from the sketches Sku and