the attack subsides, the control is switched back to the PID
controller (until another attack is detected or the mission ends).
We use ML to build the secondary controller, and train the
model to emulate the PID controller (in the absence of attacks).
We choose ML based models for the following reasons: First,
the diversity and ﬂexibility of ML techniques allows us to
design an appropriate model of input/output relationships for
non-linear RV systems. Second, we can leverage ML design
principles to build a model
that emulates PID controller
while being resilient
to malicious sensor perturbations. In
particular, our ML model learns the temporal relationships
in input parameters to achieve high accuracy, and we use
feature engineering in the ML model design to eliminate the
parameters that contribute to high collinearity.
Because the PID controller uses multiple, independent input
parameters to derive the corresponding actuator signals, we
formulate the ML model predictions as a regression problem.
The PID controller’s input is a multivariate time-series. There-
fore, we use Long Short Term Memory (LSTM) architecture,
which is well-suited to model temporal patterns and long-term
dependencies respectively [24].
B. Controller Design
that
Recall
the secondary controller can be built either
based on FFC or FBC designs (Section II-D). Prior work
for attack detection and/or recovery in RVs [10], [13], [14]
modeled a physical process i.e., given the current physical
state of the RV, what will be the next state. Because their
goal was to predict physical states of the RV under attack,
they use state space models and/or Kalman ﬁlters, which
predicts the RV’s physical dynamics in a feedback control
loop (i.e., FBC). However, ML techniques can model both the
physical dynamics (i.e., correlate previous state to next state)
as well as the RV’s control operations (i.e., correlate target
state to actuator output). Thus, this ﬂexibility in ML models
allow us to consider both FFC and FBC in our design.
We design FFC and FBC using the same ML technique
i.e., LSTM. The FFC design, learns a model Fθ that predicts
(cid:2)(t) (angular rotation, Euler angles) given
the actuator output y
the current state x(t) (linear and angular position), and the
target state u(t) (target position) as inputs. The FBC design,
on the other hand, learns a model Fψ to predict the current
(cid:2)(t) given the output of the previous state
state of the RV x
y(t − 1) and u(t) as inputs. The FBC predicted x
(cid:2)(t) is used
by the PID controller to derive y(t). Therefore, FFC models
the system to predict the output of the PID controller, while
FBC models the system to predict one of the inputs of the PID
controller. Figure 3 shows difference between the two designs.
The steps involved in building FBC and FFC using ML are:
Fig. 3: FBC and FFC controller design
(1) Data Collection: We collect a diverse set of RV mission
proﬁle data from both simulated and real RVs. We collect
sensor measurements (GPS, gyroscope, accelerometer, barom-
eter), data related to RVs linear and angular state in X, Y,
Z axis (linear position, position variance, angular position,
angular speed, velocity, acceleration etc.), and the outputs of
position and attitude controller (Figure 1). We also collect the
PID speciﬁc coefﬁcients that track the control signals.
target position, position variance,
(2) Feature Selection: In this step, we select a set of
meaningful features for training ML models. Note that FBC
takes y(t−1) and u(t) as inputs, while FFC takes x(t) and u(t)
as inputs. Therefore, the feature sets for both the controller
designs are different. The ML model for FBC contains 12 fea-
tures (e.g., target position, Euler angles, velocity, acceleration,
angular rotation etc.), while the ML model for FFC contains
44 features (e.g.,
linear
position, angular position, angular speed, IMU measurements
etc.). We use a greedy approach for feature subset selection.
We start with having a single feature in the model, and on
every iteration we add a new feature, and measure the model
accuracy. We stop when the accuracy saturates.
(3) Model Training: Finally, we train two LSTM models to
learn Fθ and Fψ with the respective feature sets. Both the
models have 2 layer stacked LSTM design, a Sigmoid neural
net layer followed by 2 fully connected PRelu layers. We save
the inputs of the previous steps in LSTM cells. This helps
the model learn the temporal correlations between the inputs,
which is necessary for accurate modeling of transition states
in the RV (e.g., steady state to landing in drones).
C. Analyzing FBC and FFC Designs
We perform three experiments to analyse the effectiveness
of FBC and FFC design with and without attacks. We use
the same Pixhawk drone as before (Section III) for all three
experiments, navigating via 3 points, A, B and C. In the ﬁrst
experiment, no attacks are considered. The Pixhawk drone
navigates from location A→B in steady state, makes a 150
degree turn, then navigates towards location C.
(MAE) M AE =
We use the Mean Absolute Error
(cid:2)n
t=1 |yP ID − yM L| to compare ML predictions with the
1
n
PID’s predictions. The MAE measures the average magnitude
of the errors between the ML predictions and the PID’s.
Note that FBC does not predict the actuator signals directly
(Figure 3). Therefore, in the case of FBC, yM L refers to PID
output while using ML predicted x
(cid:2)(t).
We compare the roll angle predictions of FFC and FBC
with the roll angle estimation of the PID controller with and
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
30
without attacks. In the absence of attacks, the MAE for both
FBC and FFC is under 1 degree, which is considered as good
accuracy in time series predictions for non-linear systems [13],
[14]. Therefore, in the absence of attacks, both FBC and FFC
are equally effective in predicting the RV’s realtime behaviour.
In the second experiment, we perform attacks similar to
Figure 2a during a drone mission. We use the PID’s roll angle
estimations in the previous mission (without attacks) as the
baseline, and analyse the errors in PID, FBC and FFC outputs
under an attack. For the PID, the MAE under attack was found
to be 8.09, while for FBC and FFC, the MAE values were 6.16
and 5.85 respectively. Thus, the FFC is slightly better than the
FBC in predicting the RV’s trajectory under attacks.
In the third experiment, we use feature engineering in the
ML model design [25] to address high collinearity, and subject
them to attacks. Recall that parameters with high VIF values
experience high ﬂuctuations under attacks even if the variance
inﬂation is small (Section III). To reduce the collinearity
in FBC, we eliminate the parameters in the set y(t − 1)
(e.g., inertial velocity and angular rotation) that have high VIF
values, and learn a model (Equation 2), selecting the minimum
number of y(t − 1) parameters to achieve high accuracy.
x(t) = min
y
Fψ(y(t − 1), u(t))
(2)
(3)
(cid:2)(t), whereas, the noise
ﬂuctuations in x(t) on model output y
in FBC minimizes the inﬂuence of attack induced
model
ﬂuctuations in y(t − 1) on model output x
(cid:2)(t). Note that the
noise model cannot eliminate the error completely, it can only
minimize the error in both FFC and FBC’s output.
Recall that in FBC design, the ML model predicts the RV’s
(cid:2)(t), and ﬁnally the PID controller predicts
current state x
(cid:2)(t) along
the actuator signal y(t) using the ML predicted x
with u(t) (Figure 3). As FBC relies on the PID controller
for deriving the actuator signal, and because FBC cannot
(cid:2)(t) with 0 error under attacks, PID overcompensates
predict x
(cid:2)(t) while deriving y(t) (Section III). On
for the error in x
the other hand, in FFC design, the ML model predicts the
(cid:2)(t) independently based on the given input
actuator signal y
i.e., x(t) and u(t). Thus, even if the FFC and FBC
set
designs have the same LSTM design and a noise model, FBC
still suffers from the overcompensation issue, whereas, FFC
prevents overcompensation.
The steps involved in building the noise model leveraging
memory cells in LSTM are as follows. We model the re-
lationship between past and present input parameters in the
ﬁrst
layer of the LSTM which uses a Sigmoid activation
function (Sigmoid layer). At each instant t, the Sigmoid layer
examines the past inputs X(k) (X(k) = x(t − 1)..x(t − k))
in the memory cell and the present inputs x(t), and outputs a
value between 0 and 1 for each feature (ft). If the variance
between the X(k) and x(t) is high (under an attack), the
Sigmoid layer outputs a value close to 0. If the variance is
low, the Sigmoid layer outputs a value close to 1. By modeling
the relationship between X(k) and x(t), the Sigmoid layer
controls the weight of each feature in deriving the actuator
signals. Thus, it prevents sensor perturbations due to attacks
from propagating to the next layer, and inﬂuencing the output.
In summary, the FFC design with feature engineering in the
ML model, is much more effective in minimizing the output
ﬂuctuations under attacks. Thus, PID-Piper uses a secondary
controller based on FFC design in tandem with PID controller.
V. PID-Piper ARCHITECTURE AND ALGORITHM
Figure 4 shows the architecture of PID-Piper. PID-Piper
consists of 3 main components (labeled in the ﬁgure and
shown in blue): 1 a FFC-based ML model, 2 a monitoring
module, and 3 a recovery module. The ML model runs in
Fig. 4: PID-Piper architecture.
tandem with the PID controller, and predicts actuator signals
(cid:2)(t) based on the target state u(t) and current state x(t). In the
y
absence of attacks, the PID controller’s output is used to derive
(cid:2)(t) − y(t)|
y(t). If the error between the 2 controllers δ = |y
Similarly, to reduce collinearity in FFC, we eliminate parame-
ters in the set x(t) (e.g., GPS values, raw IMU sensor values,
IMU velocity and acceleration in X, Y, Z axis) that have
high VIF values, and learn a model (Equation 3) selecting the
minimum number of x(t) parameters to achieve high accuracy.
(cid:2)(t) = min
x
y
Fθ(x(t), u(t))
The pruned feature set for FBC contains 6 parameters such
as target states, Euler angles, and angular states. On the other
hand, the pruned feature set for FFC contains 24 parameters
that capture the RV’s linear and angular positions such as target
position, position error, position variance, angular position,
angular orientation, angular speed etc.
We again run the above mission under attacks. We observed
that the MAE for both the techniques is lower after feature
engineering. Further, we ﬁnd that the MAE of FFC was 0.86,
while that of FBC was 3.91. Therefore, the FFC with feature
engineering is much more accurate than FBC with feature
engineering in predicting the RV’s trajectory under attacks.
D. Addressing Over-Compensation with FFC Design
The FFC is more accurate in predicting RV’s trajectory
under attacks than FBC because FFC is effective in preventing
sensor perturbations from inﬂuencing its output. Recall that
the LSTM model in both FBC and FFC designs uses memory
cells to remember temporal relationships between inputs. We
leverage the memory cells to build a noise model for both
FFC and FBC which correlates past and present inputs and
minimizes the effects of sensor perturbations. Because FFC
and FBC have different inputs and outputs (Figure 3), the
noise model in FFC minimizes the inﬂuence of attack induced
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
31
exceeds a preset threshold τ, the monitoring module detects
an attack and enters the recovery mode by switching RV’s
autonomous navigation from the PID controller to the ML
model’s output. When the attack stops, the recovery module
switches the navigation back to the PID controller’s output.
(cid:2)t=j
PID-Piper relies on a threshold based monitoring to detect
attacks and trigger recovery. Recall that the ML model at-
tempts to predict the PID’s output. However, because the ML
model is more complex than the PID, the model’s predictions
may incur a small latency, and lag behind the PID controller’s
operation. To account for the delay, we use dynamic time
warping (DTW) [26] to calculate the temporal difference
between the time series PID estimates and ML predictions,
and calculate an optimal match between them [10]. We record
the observed temporal deviations between the two time series
(i.e., PID estimations and ML predictions) in the absence
of attacks over multiple missions. The error accumulated
t=i |yP ID − yM L|) in the highest recorded temporal
(τ =
deviation across the validation sets is chosen as the threshold.
We consider the effect of overt and stealthy attacks below.
1) Overt Attacks: PID-Piper limits the impact of overt
attacks by providing recovery, which minimizes the trajectory
deviations as a result of the attacks (e.g., navigates RVs back
on course) and prevents undesirable outcomes such as crashes.
To trigger recovery, the ﬁrst step is to detect an overt attack
based on the divergence between the PID and ML predictions.
As ML provides approximations of the PID’s output, it is
necessary to differentiate the divergence due to attacks from
natural ones. For this purpose, we use the Cummulative Sum
(CUSUM) technique. Choi et al. [14] used a time-window to
keep track of the anomaly and raise an alert if the residuals
during the time window exceed a given value. However, later
work [13], [27] has shown that CUSUM outperforms the time-
window strategy as it prevents the attacker from hiding her
attack between windows. So we use CUSUM in our work.
Algorithm 1 shows the algorithm used by PID-Piper to
detect and recover from overt attacks. PID-Piper monitors the
PID and ML model’s outputs based on the RV’s current state
throughout the mission (Line 11 to 30). PID-Piper tracks the
difference between both the predictions based on the RV’s
current state (Line 12 to 13) following CUSUM statistics,
which is described as: St+1 = St +|yM L(t)−yP ID(t)|−b(t),
where S(0) = 0 and b(t) > 0 are selected to prevent St from
increasing due to transient difference between yM L and yP ID.
When an overt attack occurs, the St+1 value (Line 15), will
exceed the threshold τ; such deviations will be ﬂagged as
attacks, and PID-Piper will trigger the recovery mode (Line
16). When the recovery mode is triggered, the ML predicted
output (Line 20) will be used to derived motor thrust (Line
29), instead of the PID’s outputs. If the attack stops, the error
between yP ID and yM L will go back to near 0 (Line 21 to
22). In that case, PID-Piper will turn the recovery mode off
(Line 23), and switch back to the PID’s outputs (Line 24).
2) Stealthy Attacks: In a stealthy attack, the attacker’s goal
is to inject controlled false sensor measurements xa to deviate
the RV from its trajectory while maintaining the δ below τ to
Algorithm 1 Algorithm for Recovery
1: u ← target state
2: x ← current state based on sensor measurements
3: y ← actuator signal to calculate motor thrust