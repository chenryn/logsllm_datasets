        if (clazz == null) {
                // Class not found in the cache, see if it's real, and try to add it
                clazz = context.getClassLoader().loadClass(fname);
                sClassMap.put(fname, clazz);
        }
        Fragment f = (Fragment)clazz.newInstance();
        if (args != null) {
                args.setClassLoader(f.getClass().getClassLoader());
                f.mArguments = args;
        }
        return f;
    }
经典的反射调用，将传入的字符串实例化为 Java
类，并设置其参数。这是什么，这就是反序列化啊！而实际的漏洞也正是出自这里，由于传入的参数攻击者可控，那么攻击者可以将其设置为某个内部类，从而触及开发者预期之外的功能。在原始的报告中，作者使用了
Settings 应用中的某个设置 PIN 密码的 Fragment 作为目标传入，这是个私有片段，从而导致了越权修改 PIN
码的功能。在当时的其他用户应用中，还有许多也使用了
PreferenceActivity，因此漏洞影响广泛，而且造成的利用根据应用本身的功能而异（也就是看有没有好用的 Gadget）。
注意上面的代码摘自最新的 Android 13，其中 `switchToHeaderInner` 方法加入了 `isValidFragment`
的判断，这正是 Android 当初的修复方案之一，即强制要求 PreferenceActivity
的子类实现该方法，不然就在运行时抛出异常。不过即便如此，还是有很多开发者为了图方便直接继承然后返回 `true` 的。
Fragment Injection 看似是 PreferenceActivity
的问题，但其核心还是对于不可信输入的校验不完善，在后文的例子中我们会多次看到类似的漏洞模式。
参考文章：
  * [A New Vulnerability in the Android Framework: Fragment Injection](https://securityintelligence.com/new-vulnerability-android-framework-fragment-injection/)
  * [ANDROID COLLAPSES INTO FRAGMENTS.pdf (wp)](https://securityintelligence.com/wp-content/uploads/2013/12/android-collapses-into-fragments.pdf)
  * [Understanding fragment injection](https://www.synopsys.com/blogs/software-security/fragment-injection/)
  * [How to fix Fragment Injection vulnerability](https://support.google.com/faqs/answer/7188427?hl=en)
## 点击劫持
Activity 既然作为 UI 的主要载体，那么与用户的交互也是其中关键的一项功能。在传统 Web
安全中就已经有过点击劫持的方法，即将目标网站想要让受害者点击的案件放在指定位置（如iframe），并在宿主中使用相关组件对目标进行覆盖和引导，令受害者在不知不觉中执行了敏感操作，比如点赞投币收藏一键离职等。
Android 中也出现过类似的攻击手段，比如在系统的敏感弹窗前面覆盖攻击者自定义的
TextView，引导受害者确认某些有害操作。当然这需要攻击者的应用拥有浮窗权限（`SYSTEM_ALERT_WINDOW`），在较新的 Android
系统中，该权限的申请需要用户多次的确认。
近两年中在 AOSP 中也出现过一些点击劫持漏洞，包括但不限于：
  * CVE-2020-0306：蓝牙发现请求确认框覆盖
  * CVE-2020-0394：蓝牙配对对话框覆盖
  * CVE-2020-0015：证书安装对话框覆盖
  * CVE-2021-0314：卸载确认对话框覆盖
  * CVE-2021-0487：日历调试对话框覆盖
  * ...
对于系统应用而言，防御点击劫持的方法一般是通过使用 android.permission.HIDE_NON_SYSTEM_OVERLAY_WINDOWS
权限并在布局参数中指定 `SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS` 来防止 UI 被覆盖。
而对于普通应用，没法申请 HIDE_NON_SYSTEM_OVERLAY_WINDOWS 权限，防御措施一般有两种，一是通过将布局的
`filterTouchesWhenObscured` 设置为 `true` 来禁止窗体被覆盖后的输入事件；二是重载
View.onFilterTouchEventForSecurity 方法，并在其中检测其他应用的覆盖情况。在 Android 12 中系统已经默认开启了
filterTouchesWhenObscured 属性，这也是 security by default 的一种经典实现。
> 关于点击劫持的操作细节和缓解方案，可以参考 OPPO 安全实验室的这篇文章：
> [《不可忽视的威胁：Android中的点击劫持攻击》](https://mp.weixin.qq.com/s?__biz=MzUyNzc4Mzk3MQ==&mid=2247487493&idx=1&sn=c5be070f204b919747a0865156d7caf9&chksm=fa7b1149cd0c985ff69bbbfa4901e026c1db38c32219ba9b777f8a0b163b9b6e3ec9b181bd87&scene=178&cur_album_id=1420861949369303041#rd)
另外一个与点击劫持类似的漏洞称为 StrandHogg，细节可以参考下述的原始文章。其关键点是使用了 Activity 的
`allowTaskReparenting` 和 `taskAffinity` 属性，将其任务栈伪装成目标应用，这样在打开目标应用时由于 TaskStack
后进先出的特性会导致用户看到的是攻击者的应用，从而造成应用的钓鱼场景。
后来还是同一个安全团队有提出了 **StrandHogg 2.0** 版本，主要利用了 `ActivityStarter` 中的 AUTOMERGE
特性。假设有 A、B 两个应用，在 A1 中调用 `startActivites(B1, A2, B2)` 之后，任务栈会从 (A1, B1) 以及
(A2, B2) 合并为 (A1, B1, A2, B2)，也就是在同一个任务栈中覆盖了其他应用的
Activity，从而导致钓鱼场景。不过这个漏洞比较特化，因此谷歌很早就已经修复了，详情可以阅读下面的参考文章：
  * [The StrandHogg vulnerability](https://promon.co/security-news/the-strandhogg-vulnerability/)
  * [StrandHogg 2.0 – New serious Android vulnerability](https://promon.co/resources/downloads/strandhogg-2-0-new-serious-android-vulnerability/)
  * [StrandHogg 2.0 (CVE-2020-0096) 修复方案](https://android.googlesource.com/platform/frameworks/base/+/a952197bd161ac0e03abc6acb5f48e4ec2a56e9d)
## Intent Redirection
Intent Redirection，顾名思义就是将用户传入的不可信输入进行了转发，类似于服务端的 SSRF 漏洞。一个典型漏洞例子如下：
    protected void onCreate (Bundle savedInstanceState) {
       Intent target = (Intent) getIntent().getParcelableExtra("target");
       startActivity(target);
    }
将用户传入的 target `Parcelable` 直接转换成了 `Intent` 对象，并将这个对象作为 `startActivity`
的参数进行调用。就这个例子而言，可能造成的危害就是攻击者可以用任意构造的 Intent 数据去启动目标 APP
中的任意应用，哪怕是未导出的私有应用。而目标未导出的应用中可能进一步解析了攻击者提供的 Intent 中的参数，去造成进一步的危害，比如在内置
Webview 中执行任意 Javascript 代码，或者下载保存文件等。
实际上 Intent Redirection 除了可能用来启动私有 Activity 组件，还可以用于其他的的接口，包括：
  * [startActivity](https://developer.android.com/reference/android/app/Activity#startActivity\(android.content.Intent\))
  * [startService](https://developer.android.com/reference/android/content/Context#startService\(android.content.Intent\))
  * [sendBroadcast](https://developer.android.com/reference/android/content/Context#sendBroadcast\(android.content.Intent\))
  * [setResult](https://developer.android.com/reference/android/app/Activity#setResult\(int,%20android.content.Intent\))
> 注：每种方法可能还有若干衍生方法，比如 startActivityForResult
前面三个可能比较好理解，分别是启动界面、启动服务和发送广播。最后一个 `setResult` 可能会在排查的时候忽略，这主要用来给当前 Activity
的调用者返回额外数据，主要用于 `startActivityForResult` 的场景，这同样也可能将用户的不可信数据污染到调用者处。
从防御的角度上来说，建议不要直接把外部传入的 Intent 作为参数发送到上述四个接口中，如果一定要这么做的话，需要事先进行充分的过滤和安全校验，比如：
  1. 将组件本身的 `android:exported` 设置为 `false`，但这只是防止了用户主动发送的数据，无法拦截通过 `setResult` 返回的数据；
  2. 确保获取到的 `Intent` 来自于可信的应用，比如在组件上下文中调用 `getCallingActivity().getPackageName().equals("trust.app")`，但注意恶意的应用可以通过构造数据令 `getCallingActivity` 返回 `null`；
  3. 确保待转发的 `Intent` 没有有害行为，比如 component 不指向自身的非导出组件，不带有 `FLAG_GRANT_READ_URI_PERMISSION` 等（详见后文 ContentProvider 漏洞）；
  4. ...
但事实证明，即便是 Google 自己，也未必能够确保完善的校验。无恒实验室近期提交的高危漏洞 `CVE-2022-20223` 就是个很典型的例子：
    private void assertSafeToStartCustomActivity(Intent intent) {
        // Activity can be started if it belongs to the same app
        if (intent.getPackage() != null && intent.getPackage().equals(packageName)) {
            return;
        }
        // Activity can be started if intent resolves to multiple activities
        List resolveInfos = AppRestrictionsFragment.this.mPackageManager
                .queryIntentActivities(intent, 0 /* no flags */);
        if (resolveInfos.size() != 1) {
            return;
        }
        // Prevent potential privilege escalation
        ActivityInfo activityInfo = resolveInfos.get(0).activityInfo;
        if (!packageName.equals(activityInfo.packageName)) {
            throw new SecurityException("Application " + packageName
                    + " is not allowed to start activity " + intent);
        }
    }
其中使用了 `ActivityInfo.packageName` 来判断启动目标的包名是否与当前 caller 的包名一致，可事实上显式 Intent
是通过 componentName 去指定启动目标，优先级高于 `Intent.packageName`
且后者可以被伪造，这就造成了检查的绕过。上述短短几行代码中其实还有另外一个漏洞，感兴趣的可以参考下面的参考链接。
因此，遇到潜在的 Intent 重定向问题时，可以多花点时间仔细审查，说不定就能够找到一个可利用的场景。
  * [Remediation for Intent Redirection Vulnerability](https://support.google.com/faqs/answer/9267555?hl=en)
  * [AOSP Bug Hunting with appshark (1): Intent Redirection](https://mp.weixin.qq.com/s/CY2nLUb2VQaBNxAKd7GeUQ)
# Service
[Service](https://developer.android.com/guide/components/services)
的主要功能有两个，一是给 APP 提供一个后台的长时间运行环境，二是对外提供自身的服务。与 Activity 的定义类似，Service 必须要在
manifest 中进行声明才能使用。注意 Service 中的代码也是和 Activity 一样运行在主线程的，并且默认和应用处于进程。
根据 Service 的两大主要功能区分，启动 Service 也有对应的两种形式：
  1. `Context.startService()`：启动后台服务并让系统进行调度；
  2. `Context.bindService()`：让（外部）应用绑定服务，并使用其提供的接口，可以理解为 RPC 的服务端；
两种方式启动服务的生命周期图示如下：
蓝色部分都是在客户端去进行调用，系统收到请求后会启动对应的服务，如果对应的进程没有启动也会通知 zygote
去启动。不管是哪种方法创建服务，系统都会为其调用 `onCreate` 和 `onDestroy` 方法。整体流程和 Activity
的启动流程类似，这里不再赘述。
shell 中同样提供了 `start-activity` 命令来方便启动服务：
    am start-service [--user  | current] 
下面来介绍一些 Service 组件相关的漏洞。
## 生命周期
前面介绍了 Service 启动的生命周期，总体和 Activity 流程差不多，但需要注意有几点不同：
  1. 与 Activity 生命周期回调方法不同， **不需要** 调用 Serivce 回调方法的超类实现，比如 onCreate、onDestory 等；
  2. `Service` 类的直接子类运行在主线程中，同时处理多个阻塞的请求时候一般需要在新建线程中执行；
  3. `IntentService` 是 Service 的子类，被设计用于运行在 Worker 线程中，可以串行处理多个阻塞的 Intent 请求；API-30 以后被标记为废弃接口，建议使用 WorkManager 或者 JobIntentService 去实现；
  4. 客户端通过 `stopSelf` 或者 `stopService` 来停止绑定服务，但服务端并没有对应的 `onStop` 回调，只有在销毁前收到 `onDestory`；
  5. 前台服务必须为状态栏提供通知，让用于意识到服务正在运行；
对于[绑定服务](https://developer.android.com/guide/components/bound-services)而言，Android 系统会根据绑定的客户端引用计数来自动销毁服务，但如果服务实现了 `onStartCommand()`
回调，就必须显式地停止服务，因为系统会将其视为已启动的状态。此外，如果服务允许客户端再次绑定，就需要实现 onUnbind 方法并返回
true，这样客户端在下次绑定时候会接收到同样的 IBinder，示例图如下所示：
服务的声明周期相比于 Activity 更加复杂，因为涉及到进程间的绑定关系，因此也就更可能在不了解的情况下编写出不健壮甚至有问题的代码。
## Implicit Export
和 Activity 一样，Service 也要在 manifest 中使用
[service](https://developer.android.com/guide/topics/manifest/service-element)
去声明，也有 `android:exported` 属性。甚至关于该属性的默认值定义也是一样的，即默认是 `false`，但包含 intent-filter
时，默认就是 `true`。同样，在 Android 12 及以后也强制性要求必须显式指定服务的导出属性。
## 服务劫持
与 Activity 不同的是，Android 不建议使用隐式 Intent 去启动服务。因为服务在后台运行，没有可见的图形界面，因此用户看不到隐式
Intent 启动了哪个服务，且发送者也不知道 Intent 会被谁接收。
服务劫持是一个典型的漏洞，攻击者可以为自己的 Service 声明与目标相同的 intent-filter
并设定更高的优先级，这样可以截获到本应发往目标服务的 Intent，如果带有敏感信息的话还会造成数据泄露。
而在 `bindService` 中这种情况的危害则更加严重，攻击者可以伪装成目标 IPC 服务去返回错误甚至是有害的数据。因此，在 Android 5.0
（API-21）开始，使用隐式 Intent 去调用 bindService 会直接抛出异常。
如果待审计的目标应用在 Service 中提供了 `intent-filter`，那么就需要对其进行重点排查。
## AIDL
绑定服务可以被用来用作 IPC 服务端，如果服务端绑定的时候返回了 AIDL 接口的实例，那么就意味着客户端可以调用该接口的任意方法。一个实际案例是