### 5.1 Pairing of New Nodes

As described in Section 4.2, a new node \( i \) must be paired by the Master Device (MD) to properly join the network. The pairing process is as follows:

- **Master Device (MD)**: The MD has a hard-coded key \( K_{MD} \), which is generated during its fabrication and never leaves the device.
- **Pairwise Key Generation**: Using \( K_{MD} \), the MD can compute a pairwise key with any sensor node at any time. Each node is assumed to have a unique identity \( ID \).
- **Key Calculation**: The MD computes the pairwise key with node \( ID \) using the formula \( K_{MD,ID} = E_{K_{MD}}(ID) \).
- **Initial Pairing**: During the initial pairing with a new node \( ID \), the MD securely transmits \( K_{MD,ID} \) to the node using a secure, location-limited channel, such as physical contact. The MD does not need to store \( K_{MD,ID} \) because it can be recomputed as needed.

**Result**: Every node that has successfully joined the network possesses a pairwise secret key with the MD. This allows the MD to send encrypted messages to the node, which the node can decrypt using \( K_{MD,ID} \). The node can then verify that the message originated from the MD.

**Ticket Distribution**: The MD can also issue tickets to new nodes. These tickets are encrypted specifically for older nodes already in the network and help the new node introduce itself. For example, when node \( i \) joins the network, the MD generates \( K_{MD,i} \) and gives it to \( i \). It then randomly selects two existing nodes, say \( e \) and \( d \), and computes and distributes two tickets \( T_e \) and \( T_d \), along with two keys \( K_{e,i} \) and \( K_{d,i} \).

**Summary**: Node \( i \) receives the following from the MD:
- \( K_{MD,i} \): A secret key between \( i \) and the MD, allowing secure future communication.
- Random node IDs \( e \) and \( d \), along with secret keys \( K_{e,i} \) and \( K_{d,i} \), enabling \( i \) to communicate with these nodes.
- Tickets \( T_e = E_{K_{MD,e}}(i, \text{"is legal player"}, K_{e,i}) \) and \( T_d = E_{K_{MD,d}}(i, \text{"is legal player"}, K_{d,i}) \).

### 5.2 Splitting and Distributing Keys

The concept of key splitting involves dividing a key \( K \) into two shares \( K_1 \) and \( K_2 \) using a random number \( r \) of the same size as \( K \):
- \( K_1 = r \)
- \( K_2 = K \oplus r \)

Knowledge of only one share (\( K_1 \) or \( K_2 \)) does not reveal any information about the original key \( K \).

**Key Generation and Splitting**:
- Node \( i \) generates a symmetric key \( K_{i,f} \) for secure communication with node \( f \).
- \( K_{i,f} \) is split into two shares \( K_1 \) and \( K_2 \).

**Forwarding Shares**:
- Node \( i \) sends tickets \( T_e \) and \( T_d \) to nodes \( e \) and \( d \) using its normal wireless communication facilities. Both nodes can verify that the tickets originate from the MD.
- Node \( i \) sends \( C_1 = (i, E_{K_{e,i}}(i, K_1, f)) \) to node \( e \) and \( C_2 = (i, E_{K_{d,i}}(i, K_2, f)) \) to node \( d \).

**Secure Key Forwarding**:
- If node \( e \) already has a pairwise key with \( f \), say \( K_{e,f} \), it would simply forward \( \gamma_1 = (e, E_{K_{e,f}}(i, K_1)) \) to \( f \).
- If no direct key exists, node \( e \) asks its predecessors (e.g., \( b \), \( a \)) until it finds a predecessor with a key to \( f \). In this case, \( b \) has a key \( K_{b,f} \) with \( f \).
- Node \( e \) splits \( K_1 \) into two shares \( K_1^1 \) and \( K_1^2 \) and sends:
  - \( C_1^1 = (e, E_{K_{e,b}}(f, K_1^1)) \) to \( b \)
  - \( C_1^2 = (e, E_{K_{e,a}}(f, K_1^2)) \) to \( a \)

**Final Key Reconstruction**:
- After decryption, \( b \) and \( a \) send to \( f \):
  - \( b: \gamma_1^1 = (b, E_{K_{b,f}}(i, K_1^1)) \)
  - \( a: \gamma_1^2 = (a, E_{K_{a,f}}(i, K_1^2)) \)

- Node \( d \) performs similar operations to forward \( K_2 \) to \( f \).

**Key Computation**:
- Node \( f \) reconstructs \( K_{i,f} \) by combining the received shares:
  - \( K_{i,f} = K_1^1 \oplus K_1^2 \oplus K_2^1 \oplus K_2^2 \)

### 5.3 Security Discussion

**Resistance to Malicious Nodes**:
- The protocol is designed to be secure against one compromised malicious node. The worst-case scenario is if both initial random nodes are in the same subtree and find the same predecessor with a key to \( f \). Even if the predecessor is malicious, it will not get all key shares.
- If a malicious node intercepts and drops or alters key shares, it results in an incomplete or erroneous set of shares, leading to a Denial-of-Service (DoS) attack. The destination node \( f \) will not be able to correctly assemble the key, preventing secure communication.

**Detection and Mitigation**:
- Detecting a DoS attack is straightforward: nodes \( i \) and \( f \) will not be able to understand each other's encrypted data. Unprotected communication may be the only option in such cases.
- Wireless sensor networks are generally prone to DoS attacks. If an attacker compromises a legal node, they can launch various types of DoS attacks.

### 5.4 Extension to Defend Against Multiple Malicious Nodes

The protocol can be extended to handle up to \( k \) malicious nodes. The security goal is to ensure that even if \( k \) nodes are compromised, the key establishment remains secure. This can be achieved by increasing the number of key shares and distributing them more widely, ensuring that no single node or small group of nodes can fully restore the key.