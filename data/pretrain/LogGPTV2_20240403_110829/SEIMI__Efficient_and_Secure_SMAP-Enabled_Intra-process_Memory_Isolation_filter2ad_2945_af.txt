### 3.93% - 9.32%

- **Overhead**:
  - 3.93%
  - 1.60%
  - 7.63%
  - 9.32%
  - 4.15%
  - 1.84%
  - 7.56%
  - 7.79%

- **Benchmark**:
  - OCFI+namd
  - SS+hmmer
  - OCFI+bzip2
  - AG+sjeng
  - CPI+xalan
  - OCFI+gobmk

- **Type-1: MPX > MPK > SEIMI**
  - 19.11% > 0.12% > 0.04%
  - 100.00% > 3.23% > 1.61%

- **Type-2: MPK > MPX > SEIMI**
  - 31.46% > 20.15% > 15.17%
  - 22.22% > 20.30% > 12.74%

- **Type-3: MPK > SEIMI > MPX**
  - 118.71% > 82.01% > 66.19%
  - 84.48% > 47.42% > 21.94%

- **CFreq. (Bound-checks per millisecond)**:
  - 1,657,879
  - 1,765,116
  - 19,137
  - 49,443
  - 991,377
  - 36,119

- **SFreq. (Permission switches per millisecond)**:
  - 1,058,448
  - 3,302,912
  - 14,979
  - 7,467
  - 1,165
  - 36,119

### C. Real-world Applications Evaluation

#### Web Servers
We used ApacheBench (ab) to simulate 10 concurrent clients sending 10,000 requests, each requesting the server to transfer a file over a 5m long CAT 5e cable. We varied the file size (1K, 5K, 20K, 100K, 200K, 500K) to represent different configurations. Table VII shows the performance overhead (geo_mean) of web servers under the protection of four defenses with IH/MPX/MPK/SEIMI-based schemes. As the requested file size increases, the overheads of all schemes decline. SEIMI is slower than MPX only when protecting Lighttpd with OCFI. For all other cases, SEIMI outperforms MPX and MPK.

#### Databases
We evaluated different databases using their respective benchmarks:
1. **MySQL**: Evaluated latency with sysbench utility [3], configured with 4 tables of 100,000 rows, executing a read-write workload with 4 threads.
2. **Redis**: Evaluated SET and GET throughput with the redis-benchmark tool.
3. **Memcached**: Evaluated with twemperf [4], creating 1,000 connections and 10 calls per second, with item size set to 400 KBytes.
4. **SQLite**: Evaluated latency by inserting 2,000 rows and selecting 2,000 times.

From the table, SEIMI is slower than MPX only when using OCFI and SS. For all other cases, SEIMI outperforms MPX and MPK on average.

#### JavaScript Engines
We evaluated four JS engines with the Kraken benchmark [2] from Mozilla, testing realistic workloads. Each of the 14 test suites was evaluated, and the geo_mean of the overheads was calculated. SEIMI outperforms MPX and MPK in most cases, except for protecting JavaScriptCore with OCFI. Neither address-based nor domain-based schemes are suitable for JavaScriptCore due to significant performance overhead.

### Performance Comparison

- **SEIMI vs. MPX**: Figure 6 shows how CFreq and SFreq affect performance when applying the four defenses with MPX and SEIMI. The green solid line represents the power trendline of MPX overhead divided by SEIMI overhead. Points within the black dotted box use an unequal interval scale due to the large frequency ratio. Points above the dotted red line indicate cases where MPX has a higher overhead than SEIMI. SEIMI outperforms MPX in 56.92% of benchmarks. When CFreq/SFreq is larger than 51.88, 86.21% of benchmarks have a lower overhead with SEIMI compared to MPX.

- **SEIMI vs. MPK**: Figure 7 shows how SFreq affects performance when applying the four defenses with MPK and SEIMI. As the access permission switching frequency increases, the performance gain of SEIMI becomes more apparent. This is expected because switching SMAP using STAC/CLAC is faster than switching MPK using WRPKRU (Table I).

### Case Study
Table VIII presents six representative cases in three categories. When the bound-checking frequency is much larger than the access permission switching frequency, domain-based isolation is better. Since the domain-switching overhead in SEIMI is lower than MPK, SEIMI has a more significant performance advantage over MPX.

### Discussion

- **Overloading the AC flag**: The AC flag in the RFLAGS register is repurposed for controlling SMAP in S-mode. SEIMI cannot rely on the AC flag for alignment checking, but this does not limit its application as alignment checking is disabled by default in most Linux and Windows applications.

- **Nested virtualization**: SEIMI requires VT-x and cannot be used inside a VM unless the hypervisor supports nested VT-x [8]. Experiments show that for SPEC, SEIMI + KVM incurs an overhead of 12.11% on average, while for lmbench, it incurs a 6.07X slowdown. Nested virtualization's high VM exit cost makes improving SEIMI's performance an interesting future topic.

- **Possible incompatibility with future instructions**: Supporting new instructions in SEIMI is possible by destroying execution conditions or configuring control registers to disable support.

- **Transient execution attacks**: SEIMI is vulnerable to Meltdown-type and MDS attacks unless the hardware is patched. Intel's updated microcode to clear CPU-internal buffers with VERW does not affect SEIMI's functionality.

### Related Work

- **Leveraging privileged hardware for user code**: Dune [7] uses Intel VT-x to provide system privileges to user-level programs, running them in ring 0. SEIMI allows untrusted code to run in ring 0, ensuring efficiency but presenting challenges.

- **Address-based memory isolation**: SFI [51] and Isboxing [20] provide intra-process memory isolation, but with limitations. Segmentation is supported only in 32-bit mode.

- **Domain-based memory isolation**: ARM supports memory domains, and recent works use VT-x's VMMFUNC to realize intra-process memory isolation.

- **Hardening information hiding**: ProbeGuard [10] and SafeHidden [54] harden information hiding through detection, runtime monitoring, and continuous randomization.

- **Marking sensitive pages**: CET [27] and IMIX [21] provide isolation for sensitive data, but require hardware modifications.

- **Tagged architectures**: Tagged architectures can be used for intra-process memory isolation by assigning access permissions to each instruction and byte in memory, but they require significant hardware changes.