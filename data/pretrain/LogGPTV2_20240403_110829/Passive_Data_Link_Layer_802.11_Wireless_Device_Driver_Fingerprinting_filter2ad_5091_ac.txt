ter signature database. This process could be automated
by eliminating signatures that are insufﬁciently different
from others with respect to some similarity threshold.
There was only a single case where two of the drivers
from the same manufacturer (Linksys) had indistinguish-
able signatures. For this case, we again left only a single
signature in the master signature database. After pruning
the database of all duplicate signatures, there remained
31 unique signatures. Each signature was tagged with
the corresponding driver(’s) name and conﬁguration(s).
The entire master signature database is included as Ap-
pendix A.
5.2 Collecting Test Data
We used the unused 30 minute trace from each of the
57 raw signature traces collected during master signature
generation as test set 1. This scenario veriﬁes that our
signature generation adequately captures the probing be-
havior of the driver and that signatures can identify their
associated drivers with a limited amount of trafﬁc. To
demonstrate that our technique is repeatable and still ac-
curate in conditions other than where the signature data
was originally collected, we repeated the 57 half hour ex-
periments in two different physical locations. Using mul-
tiple environments helps to validate the consistency and
robustness of our technique and suggests that it works
well outside of lab settings. The arrangement for test set
2, as shown in Figure 3(b), was as follows: we placed
the ﬁngerprinter’s antenna 25 feet from the ﬁngerprint-
ees with one uninsulated drywall placed in between the
Test Set
1
2
3
Successful Total Accuracy
96%
84%
77%
55
48
44
57
57
57
Table 2: Accuracy of ﬁngerprinting technique by sce-
nario.
s
r
e
v
i
r
D
f
o
r
e
b
m
u
N
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
100
99-90
89-80
79-70
69-60
Accuracy of Driver Percentage
Figure 4: Number of individual drivers achieving an in-
terval of accuracy over all test sets.
machines. As in Figure 3(a), no 802.11 wireless trafﬁc
was detected besides that generated by the ﬁngerprint-
ees. For test set 3, depicted in Figure 3(c), the observer’s
antenna was placed ten feet from the ﬁngerprintees with
two desks and other miscellaneous objects physically lo-
cated between the machines. At this location, four to
twelve other wireless devices were communicating dur-
ing our data collection. Test set 2 might represent a wire-
less network in a semi-isolated setting, such as a hotel
room with wireless access. Test set 3, on the other hand,
represents a more congested wireless network, such as a
network located in a coffee shop or airport.
5.3 Fingerprinting Accuracy
The accuracy of our technique in correctly identifying
the wireless driver operating a NIC for the three test sce-
narios is shown in Table 2. These results use the full half
hour of data points. Later in this section, we will ex-
plore the effects of using less data points on the accuracy
of our technique. The results also differed based on lo-
cation. As expected, our technique is the most accurate
for test set 1 (originally taken from the large signature
traces) at 96%. The second most accurate test set was
test set 2 (with only a single wall and no other 802.11
trafﬁc) at 84%, and the last location had a 77% identiﬁca-
tion accuracy. These results indicate that different envi-
ronments affect the accuracy of our technique. However,
our technique remains reliable in all the the environments
in which we tested.
Figure 4 demonstrates that our technique is perfectly
USENIX Association
Security ’06: 15th USENIX Security Symposium
173
)
e
g
a
t
n
e
c
r
e
P
(
y
c
a
r
u
c
c
A
g
n
i
t
n
i
r
p
r
e
g
n
F
i
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
 0  0.5  1  1.5  2  2.5  3  3.5  4  4.5  5
Bin Width (Seconds)
)
e
g
a
t
n
e
c
r
e
P
(
y
c
a
r
u
c
c
A
g
n
i
t
n
i
r
p
r
e
g
n
F
i
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
Test Set 1
Test Set 2
Test Set 3
 10
 5
 25
Amount of Trace Data (Minutes)
 15
 20
 30
Figure 5: Empirical bin width tuning. Shows that 0.8
second wide bins generate the highest accuracy (96%)
for test set 1.
Figure 6: Effects of trace duration on ﬁngerprinting ac-
curacy.
accurate at ﬁngerprinting nine of the wireless drivers
and over 60% successful at identifying the other eight
drivers. The accuracy of our method at identifying a par-
ticular driver is largely dependent on how dissimilar the
driver’s signature(s) are from other signatures in the mas-
ter signature database. If the correct signature is similar
to another in the database, noise such as background traf-
ﬁc may lead to our technique incorrectly ﬁngerprinting a
wireless driver. These results show that the majority of
wireless drivers do have a distinct signature. It is impor-
tant to note that even with drivers that have less unique
ﬁngerprints, we still correctly identify the driver for a
majority of the test cases.
It is also relevant to note that in cases where the tech-
nique cannot uniquely identify a driver, it was able to
narrow the possibilities down to those drivers that have
similar signatures. Though not supported in the current
implementation of our technique, it is conceivable to list
the signatures in the master signature database that are
close to the unidentiﬁed observed signature.
5.4 Empirical Bin Width Tuning
The bin width for signatures was empirically optimized
during our experimentation on test set 1 by varying the
size in testing and selecting an optimal width based
on ﬁngerprinting accuracy. This optimization began by
starting with a bin width of 0.1 seconds and incremen-
tally increasing the bin width by 0.1 seconds up to a bin
width of 5.0 seconds. Figure 5 reveals that a bin width of
0.8 seconds produced the highest accuracy (96%) in test
set 1, and thus, was the bin width used for the rest of our
experiments.
5.5 Time Required to Fingerprint Driver
To address our technique’s efﬁciency, we investigated the
data and time thresholds required to accurately ﬁnger-
print a driver. Ideally, a ﬁngerprinter would be able to
identify a wireless driver in real time after only a small
trafﬁc trace. We measured the ﬁngerprinting accuracy
of our method in each test scenario with one minute of
collected data and increased the amount of data in one
minute increments until the full thirty minute trace from
each setting was used. Figure 6 illustrates the accuracy of
our technique in each of the three test cases correspond-
ing to the amount of trace data used for ﬁngerprinting.
Since the rate of probe request frames is different for
most wireless drivers, it is difﬁcult to estimate how many
probe request frames will be recorded during one minute
of observation, though for statistical interest, the average
number of probes detected during one minute of obser-
vation was 10.79 across all of our testing scenarios. The
accuracy of our technique is at least 60% in each of the
three test cases after only one minute of trafﬁc. These
results show that our method successfully converges rel-
atively fast on the correct wireless driver and needs only
a small amount of communication trafﬁc to do so.
6 Limitations
In the course of our evaluation, we discovered a few lim-
itations of our ﬁngerprinting technique. We discuss these
in detail below.
6.1 Driver Versions
One of the original questions we posed concerned the
resolution of our technique. We have shown that our
technique is capable of distinguishing between different
drivers the vast majority of the time. We are also inter-
ested in whether our method can distinguish between two
different versions of the same wireless driver. A num-
ber of wireless card manufactures have released new ver-
sions of their wireless drivers to support new features.
We tested our ﬁngerprinting technique on six wireless
drivers, with multiple driver versions available to deter-
mine if it was possible to distinguish between different
174
Security ’06: 15th USENIX Security Symposium
USENIX Association
versions of the same wireless driver. Our technique was
unsuccessful in distinguishing between different versions
of the same driver. This is a limitation of our ﬁngerprint-
ing technique since a new version of a driver might patch
previous security vulnerabilities in the driver. However,
even without the ability to distinguish between versions,
our ﬁngerprints greatly reduce the number of potential
wireless drivers that a target system is running.
6.2 Hardware Abstraction Layer
Another unexpected limitation was found when testing
the MadWiﬁ driver for Linux. This driver works with
most wireless cards containing the Atheros chipset be-
cause of the inclusion of a Hardware Abstraction Layer
(HAL). This creates a more homogeneous driver en-
vironment since a majority of wireless cards currently
available use the Atheros chipset. The side effect is that
the lack of driver diversity reduces the appeal of ﬁnger-
printing wireless drivers. However, one drawback of a
single (or relatively small number of) hardware abstrac-
tion layer(s) is that it magniﬁes any security vulnerability
identiﬁed.
7 Preventing Fingerprinting
Several methods can be used to prevent our technique
from successfully ﬁngerprinting drivers. These methods
include conﬁgurable probing, standardization, automatic
generation of noise, driver code modiﬁcation, MAC ad-
dress masquerading, and driver vulnerability patching.
7.1 Conﬁgurable Probing
One solution to prevent our ﬁngerprinting technique is
for device drivers to provide the option to explicitly dis-
able or enable probe request frames. It makes sense for
this to be a conﬁgurable option not only to prevent ﬁn-
gerprinting but also to conserve power and bandwidth.
Probe request frames are used to ﬁnd networks match-
ing the available data rates on the client device [7]. The
SSID of the desired network can be speciﬁed or can be
set to the broadcast SSID when probing for any avail-
able networks. By default, access points transmit bea-
con frames, which announce the access point’s pres-
ence and some conﬁguration information8. Thus, pas-
sively listening for beacons (i.e., turning off probe re-
quest frames) could be an effective method of discover-
ing access points. Another solution would be to conﬁg-
ure wireless device drivers, by default, to passively listen
for beacons and only send probe requests for available
networks when manually triggered by the user.
7.2 Standardization
An effective, but potentially difﬁcult to implement solu-
tion for preventing driver ﬁngerprinting is to specify the
rate at which probe request frames are transmitted in a
future IEEE standard for the 802.11 MAC. Another step
towards standardization could result if a corporate body
or open source consortium was formed to develop a stan-
dard agreed upon by all driver manufactures. If all driver
manufactures adhered to such a standard, the described
ﬁngerprinting method would be rendered useless. Un-
fortunately, there are many obstacles preventing such a
standard, the major factor being that some device manu-
facturers will not want to design devices that expend the
power or bandwidth necessary to transmit probe requests
at a standard rate. Due to this reason alone, it is doubt-
ful that there will be any standardization agreed upon and
followed by every driver manufacture concerning the rate
of probe request frame transmission.
7.3 Automated Noise
Another strategy to prevent wireless driver ﬁngerprint-
ing is to generate noise in the form of cover probe re-
quest frames. Cover trafﬁc disguises a driver by mask-
ing the driver’s true rate of probe request transmission.
Due to the fact that our technique uses statistical meth-
ods to ﬁlter out noise, the cover trafﬁc would need to be
sufﬁciently random and transmit enough cover to con-
fuse our technique. A limitation of this approach is that
the cover probe request frames waste bandwidth the de-
vice would otherwise use for wireless trafﬁc, and for
devices with limited power supplies, transmitting cover
trafﬁc would reduce battery life signiﬁcantly. Also, given
enough observation data, the ﬁngerprinter might be able
to ﬁlter away the noise and successfully ﬁngerprint the
driver. Generating noise is a difﬁcult problem as many
data mining algorithms have been shown to be effec-
tive in ﬁltering out such noise and recovering the original