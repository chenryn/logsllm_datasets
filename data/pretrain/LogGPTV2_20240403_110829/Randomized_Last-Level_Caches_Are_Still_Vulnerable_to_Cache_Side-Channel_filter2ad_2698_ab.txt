software order. Regarding the total number of cache accesses,
our experiments show that the prune process normally ﬁnishes
in less than two rounds. Meanwhile, the size of the prime
set after pruning is slightly less than the cache size, which
means only one round of search is usually enough. The overall
number of cache accesses is estimated around O(SW ), which
is the smallest in the three fast algorithms.
This algorithm can be used to ﬁnd eviction sets in LLCs
using other types of replacement policies. The estimated num-
ber of accesses for permutation-based replacement policies
2The attacker might choose to use a small set to prime a portion of the
LLC but this will signiﬁcantly reduce the success rate.
All
E. Attack Randomized Caches Using the Fast Algorithms
the three search algorithms can easily defeat
the
static version of randomized set-associative caches, such as
CEASE [16]. As a result, a randomized set-associative cache
has to periodically remap its content by updating the hardware
managed key (Fig. 2). This forces an attacker to dynamically
search eviction sets and ﬁnish an attack both in the remap
period. Short remap period increases the hardness to launch
an attack [16]. However, frequent remaps lead to signiﬁcant
performance loss. During the remap process, all cache blocks
in the LLC are sequentially relocated using the updated key.
When there is no available space at the new location, a cache
block is evicted to make space [16]. Our experiments show
that 40% to 50% cache blocks are evicted for this reason.
it
is claimed that
To reduce the performance overhead while thwarting at-
tacks, the remap period is carefully selected. For a 1024-
set 16-way CEASER LLC, it has to remap around every
47K accesses (only three accesses per cache block) [17],
which is an unbearably short period. This is why skewed
caches are currently preferred. For a same sized CEASER-
S LLC with two partitions,
the remap
period can be safely increased to 1.6M accesses (100 accesses
per cache block) [17]. It becomes almost impossible to ﬁnd
fully congruent eviction sets in a randomized skewed cache
remapped at the aforementioned rate [17]. In its current form,
the group elimination algorithm simply fails in skewed cache
due to the huge amount of false negative errors introduced by
the randomly selected partitions. Both the conﬂict testing and
the prime, prune and then test algorithms might still be able
to ﬁnd partially congruent eviction sets [30], which is the root
of concern found in this paper.
III. PROBLEM FORMULATION
As researchers on the defense side, we would like to
thoroughly examine the effectiveness of cache randomization
and provide a strong defense against conﬂict-base side-channel
attacks. To be speciﬁc, we plan to answer the following
questions.
Problem Statement:
• Do the existing cache randomization schemes/techniques
make any ﬂawed hypothesis?
• If there are any ﬂawed hypotheses, do they lead to broken
defenses and discovery of new vulnerabilities?
• Whether the broken defenses, if any, can be ﬁxed?
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:54 UTC from IEEE Xplore.  Restrictions apply. 
958
ABCDEFGHIJKXset 0set 1set 2BDJEXBDJEBDEJAccesses:Evictions:prime+prunetestXBDJEXBDJEDJAccesses:Evictions:prime+prunetestXEXBDJEDJtest againXEBBefore diving into the detailed analysis, let us ﬁrst describe
the threat model and the analysis platform.
A. Threat Model
The main objective of using cache randomization is to
deprive attackers from usable eviction sets. We thus consider
ﬁnding a usable eviction set targeting a speciﬁc address as
a successful attack. Only conﬂict-based cache side-channel
attacks targeting the LLC are considered in this paper.3 In
order to examine the effectiveness of defenses under hostile
scenarios, we give attackers the following set of generous but
still reasonable capabilities:
• She has fully reverse engineered the virtual to physical
address mapping.
• She can access unlimited number of random addresses,
make arbitrary memory accesses to her own data and
accurately infer cache hit/miss status by measuring the
access latency.
• She can ﬂush a cache block from the whole cache
hierarchy as long as it is her own data.
• She can accurately trick the victim into running a single
memory access and there is no other active process during
the attack.
• She has the full design details of the randomized cache,
but the encryption algorithm and the key used for gener-
ating cache set indices are unbreakable.4
Note that we have explicitly allowed the attacker to ﬂush
her own data. This is different from ﬂush-reload attacks [35]
because no data is shared between the attacker and the victim.
Although it is normally not required for conﬂict-based at-
tacks targeting non-randomized caches, attackers do have such
capability, such as a malicious user mode program running
on an x86-64 processor [36] or a malicious kernel running
on an ARM processor [37]. As described in Section IV-A,
this enables attackers to launch fast attacks on the latest
randomized caches using partially congruent eviction sets.
B. Analysis Platform
To quantitatively analyze the effectiveness of the latest
randomized caches, we choose to implement CEASER-S
and ScatterCache in a behavioral cache simulation model
opensourced by [24], further extend the model with the
defense ideas newly proposed in Section V and VI, and
attack the randomized caches using the aforementioned fast
search algorithms. All results revealed in Section IV, V and
VI are obtained from these experimental attacks. To evaluate
the impact of the new defense ideas on normal applications
in Section VII, we run the SPEC CPU 2006 benchmark
cases [38] on the RISC-V [39] instruction level simulator
Spike [40] with its original cache model replaced with the
extended cache model [24]. The use of Spike allows us to run
benchmark cases at a speed around 1.5 million instructions
3Attacks utilizing the cache occupancy channel[31]–[33] are also out of the
4we do not consider attacks targeting weak ciphers [34] or random number
scope of this paper.
generators.
Fig. 5. When all cache blocks of the partially congruent eviction set (dot
with red shadow) are cached in the LLC but failed to evict the target block
(slash line with blue shadow), the eviction set become useless.
per second, which is ten times faster [41] than the Gem5
simulator [42] used in CEASER-S [17] and ScatterCache [18].
IV. DYNAMICALLY RANDOMIZED SKEWED CACHES ARE
STILL VULNERABLE
By quantitatively analyzing the traces left by various attacks
in the LLC, this section reveals the ﬂawed hypotheses found
in the latest randomized caches and uses experimental attacks
to show that their defenses are indeed broken.
A. Flawed Hypothesis
Flawed hypothesis in CEASR-S: It is claimed in [17] that
an attacker must ﬁnd eviction sets composed of fully congruent
cache blocks in order to evict the target address repeatedly.
This is true for certain scenarios but not always true. In order
to illustrate why this is not always true, let us ﬁrst reﬂect on a
“true” scenario, which is depicted in Fig. 5. An attacker wants
to launch a cross-core attack from core zero (C0) to core one
(C1). She has found an eviction set composed of seven fully
congruent and one partially congruent cache blocks (dot with
red shadow), which should have a 50% probability to evict the
target address (slash line with blue shadow) in a skewed cache
with two partitions. Assuming the attacker has successfully
evicted the target address several times, she will fail eventually
as the partially congruent cache block is randomly cached in
the wrong partition (P1) as depicted in Fig. 5. The eviction
set becomes useless afterwards.
From the attacker’s viewpoint, the reason of the failure is
the lack of enough self-conﬂicts to dislodge the misplaced par-
tially congruent cache blocks during the re-accessing. To reuse
an eviction set, attackers must ﬁnd another way to purge the
misplaced blocks from the LLC. Although one research [30]
claims that it is still viable to construct covert channels by
priming the LLC, this would cause signiﬁcant amount of noise
and noticeable performance degradation for normal prime-
probe attacks. We argue that attackers can accurately ﬂush the
eviction set using cache ﬂush instructions (such as clflush
in x86-64), which is much cleaner and faster than priming
the LLC. Our argument indicates that attacks using partially
congruent eviction sets could enjoy big success. Note that
using ﬂush instructions here is fundamentally different with
ﬂush-reload attacks [35] where the target address being ﬂushed
is shared between the attacker and the victim. All blocks in
an eviction set belong to the attacker’s own address space.
We also argue this is a valid threat even for future computers
because the cache ﬂush instructions will be here to stay.
We used to think Intel would eventually retire the clflush
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:54 UTC from IEEE Xplore.  Restrictions apply. 
959
P0P1C0C1L1LLCVictimAttackere
t
a
R
n
o
i
t
c
v
E
i
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
CEASER
Skew-2
Skew-4
Skew-8
Skew-16
 0
 32
 64
 96  128  160  192  224  256  288  320
Size of Eviction Sets
Fig. 6. The probability of evicting a target address (eviction rate) when a
partially congruent eviction set is applied repeatedly. All LLCs are with the
same size (1024-set 16-way). For skewed caches, the ways are divided into
2, 4, 8 and 16 partitions. Each result is averaged from 1000 independent
experiments.
EXTRACTED FROM FIG. 6, THE ESTIMATED SIZES OF EVICTION SETS TO
REACH THE EXPECTED EVICTION RATES (30%, 50% AND 80%).
TABLE I
Cache Type
CEASER
Skew-2
Skew-4
Skew-8
Skew-16
0.30
16
25
45
68
90
0.50
16
30
59
108
172
0.80
16
39
87
190
400
instruction due to the threat of ﬂush-related attacks [35], [43]–
[45]. To our surprise, Intel not only continues to support
clflush in their new architectures but also introduces new
instructions with similar functionality, such as clflushopt
and CLWB. As described in the ISA Reference [36], these
instructions are added to reduce the performance overhead of
accessing persistent memory [46]. Since persistent memory is
a promising memory technology gradually adopted by almost
all major computer architectures, cache ﬂush instructions will
remain in user land in the foreseeable future. Even if their
usage is limited to the privileged software, prime-probe attacks
from malicious kernels against other users/OSes [47], [48] or
SGX enclaves [7] are still practical.
Assuming attackers (can use cache ﬂush instructions to)
ﬂush their eviction sets after each probe, Fig. 6 reveals the
probability of evicting a target address (eviction rate) when
a partially congruent eviction set is applied repeatedly, which
complies with the theoretical analysis done in ScatterCache
(Fig. 5 in [18]): The eviction rate increases with the size of
the partially congruent eviction set. When enough addresses
are collected, a partially congruent eviction set can be used
just like a fully congruent one.
Flawed hypotheses in ScatterCache: It is claimed that at-
tackers must ﬁnd eviction sets with 99% eviction rate and must
use a separate prime set to prime the LLC after each probe
(variant 1: single collision with eviction, Section 4.4 [18]).
Both hypotheses are invalid. An attacker can, and might be
forced to, use eviction sets with low eviction rate. As shown
in Fig. 6, an eviction set with a lower eviction rate is much
smaller than a set with a higher eviction rate. Since the time
consumed in both ﬁnding and applying an eviction set is
almost proportional to its size, reducing the required eviction
rate can proportionally boost the attack frequency, which is
essential for attacks demanding high temporal resolution [4],
 1
 0.8
 0.6
 0.4
i
s
t
e
S
n
o
i
t
c
v
E
g
n
d
n
F
i
i
 0.2
f
o
y
t
i
l
i
b
a
b
o
r
P
 0
 200
Set-25
Set-30
Set-39
 300
 400
 500
 600
Number of LLC Accesses (K)
(a) Conﬂict testing (CT)
 700
 800
Set-25
Set-30
Set-39
 1
 0.8
 0.6
 0.4
 0.2
s
t
e
S
n
o
i
i
t
c
v
E
g
n
d
n
F
i
i
f
o
y
t
i
l
i
b
a
b
o
r
P
 0
 0
 5000
 10000
 20000
Number of LLC Accesses (K)
 15000
 25000
 30000
(b) Prime, prune and then test (PPT)
Fig. 7. The probability of ﬁnding eviction sets with 25, 30 and 39 partially
congruent addresses in a skewed LLC (1024 sets, 16 ways, 2 partitions)
within limited number of LLC accesses. Each result is averaged from 500
independent experiments.
[48]. Although utilizing eviction sets with low eviction rate
does bring in high rate of false negative errors, these errors
could be efﬁciently reduced by observing repeated victim
events. Even worse, an attacker can force repeated replay
of the victim’s execution with microarchitectural replay at-
tacks [49]. Furthermore, if remapping is adopted by Scat-
terCache, acquiring eviction sets with the 99% eviction rate
might become unfeasible. Attackers would unavoidably resort
to smaller eviction sets with lower eviction rates. For the
hypothesis on priming the LLC, ﬂushing the eviction set after
each probe is much cleaner and faster than priming the LLC.
B. Broken Defense
Table I shows the number of partially congruent cache
blocks needed to achieve a certain eviction rate. We con-
sider 80% as a high eviction rate and 30% as a low but
still threatening rate.5 A defense is broken if it cannot stop
attackers from ﬁnding eviction sets with the high eviction rate
(80%), while it is relatively safe if attackers cannot acquire
eviction sets with even the low eviction rate (30%). In the three
fast search algorithms, only CT and PPT potentially work on
randomized skewed caches. Let us consider a CEASER-S LLC
with two partitions [17]. Fig. 7 demonstrates the probability
of ﬁnding eviction sets with 25, 30 and 39 partially congruent
addresses (corresponding to eviction rates of 30%, 50% and
80% respectively) using both CT and PPT. As shown by the
result, although PPT is too long for any practical attacks (5M
to 20M LLC accesses as shown in Fig. 7b), it is possible to
ﬁnd a small eviction set (30% eviction rate) in as low as 350K
LLC accesses using CT (Fig. 7a), which is far less than the
5As researchers on the defense side, our intention is not to argue that 30%
is a usable eviction rate in practical attacks but to use this low rate as a stress
test to evaluate the strength of existing defenses.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:54 UTC from IEEE Xplore.  Restrictions apply. 
960
Access-25
Access-30
Access-39
Eviction-25
Eviction-30
Eviction-39
 1
i
s
t
e
S
n
o
i
t
c
v
E
g
n
d
n
F
i
i
 0.8
 0.6
 0.4
f
o
y
t
i
l
i
 0.2
b
a
b
o
r
P
 0
 200
 300
 400
 500
 600
 700
 800
Number of LLC Accesses/Evictions (K)
b
a
b
o
r
P
 0
 0
CEARER:16
Skew-2:25
Skew-4:45
Skew-8:68
Skew-16:90
 2000
 1500
 2500
 500
 1000
Number of LLC Evictions (K)
 1
 0.8
 0.6
 0.4
 0.2
i
s
t
e
S