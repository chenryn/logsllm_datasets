-rw-rw-r-- 1 zit zit 1802129 8月 15 06:04 2BLSTM_epoch20.h5_diversity1.5.txt
-rw-rw-r-- 1 zit zit 2138562 8月 17 04:30 2BLSTM_epoch20.h5_diversity1.8.txt
-rw-rw-r-- 1 zit zit 693064 8月 15 23:23 2BLSTM_epoch30.h5_diversity0.2.txt
-rw-rw-r-- 1 zit zit 1109692 8月 14 16:43 2BLSTM_epoch30.h5_diversity0.5.txt
-rw-rw-r-- 1 zit zit 1441973 8月 16 08:38 2BLSTM_epoch30.h5_diversity0.8.txt
-rw-rw-r-- 1 zit zit 1484294 8月 15 02:13 2BLSTM_epoch30.h5_diversity1.0.txt
-rw-rw-r-- 1 zit zit 1477235 8月 16 16:46 2BLSTM_epoch30.h5_diversity1.2.txt
-rw-rw-r-- 1 zit zit 1551167 8月 15 08:48 2BLSTM_epoch30.h5_diversity1.5.txt
PDF生成结果分析
单进程生成10,000个PDF       
时长：≈10min
单个大小：≈380KB
1w个文件大小：≈3.7GB
21个模型，共计21w 样本，共77.7G
-rw-rw-r-- 1 zit zit 339179 8月 13 09:43 9476.pdf
-rw-rw-r-- 1 zit zit 338730 8月 13 09:43 9477.pdf
-rw-rw-r-- 1 zit zit 338794 8月 13 09:43 9478.pdf
-rw-rw-r-- 1 zit zit 335113 8月 13 09:43 9479.pdf
-rw-rw-r-- 1 zit zit 339384 8月 13 09:43 9480.pdf
-rw-rw-r-- 1 zit zit 339398 8月 13 09:43 9481.pdf
-rw-rw-r-- 1 zit zit 335495 8月 13 09:43 9482.pdf
-rw-rw-r-- 1 zit zit 343490 8月 13 09:43 9483.pdf
-rw-rw-r-- 1 zit zit 336621 8月 13 09:43 9484.pdf
-rw-rw-r-- 1 zit zit 358054 8月 13 09:43 9485.pdf
-rw-rw-r-- 1 zit zit 345598 8月 13 09:43 9486.pdf
-rw-rw-r-- 1 zit zit 342540 8月 13 09:43 9487.pdf
-rw-rw-r-- 1 zit zit 342989 8月 13 09:43 9488.pdf
-rw-rw-r-- 1 zit zit 345923 8月 13 09:43 9489.pdf
-rw-rw-r-- 1 zit zit 1221730 8月 13 09:43 9490.pdf
-rw-rw-r-- 1 zit zit 355457 8月 13 09:43 9491.pdf
-rw-rw-r-- 1 zit zit 413066 8月 13 09:43 9492.pdf
-rw-rw-r-- 1 zit zit 353369 8月 13 09:43 9493.pdf
-rw-rw-r-- 1 zit zit 337955 8月 13 09:43 9494.pdf
-rw-rw-r-- 1 zit zit 348164 8月 13 09:43 9495.pdf
-rw-rw-r-- 1 zit zit 340569 8月 13 09:43 9496.pdf
-rw-rw-r-- 1 zit zit 340363 8月 13 09:43 9497.pdf
-rw-rw-r-- 1 zit zit 340621 8月 13 09:43 9498.pdf
-rw-rw-r-- 1 zit zit 343950 8月 13 09:43 9499.pdf
-rw-rw-r-- 1 zit zit 336692 8月 13 09:43 9500.pdf
-rw-rw-r-- 1 zit zit 345394 8月 13 09:43 9501.pdf
PDF生成样本示例
HOST
生成样本1
生成样本2
PDF生成样本示例
HOST
生成样本3
生成样本4
PDF样本测试
代码覆盖率测试
漏洞挖掘测试
测试（TESTING）
•
代码覆盖率测试
•
漏洞挖掘测试
New pdf 
files
Effectiveness 
measure
Coverage
Bugs 
4. Testing
Target 
APP
Foxit Reader, Adobe Reader, 
Mupdf, Chrome, Edge et al.
Fuzzing
代码覆盖率测试
代码覆盖率是评估样本质量的较好的量化指标！
代码覆盖率 = SUM（程序执行代码） /  程序总代码
微软还采用了通过率作为评估参数之一，通过
率仅能反映所生成样本是否符合既定的格式规
约，而代码覆盖率则能直接反映样本是否能探索
到更多的路径或代码，对于漏洞挖掘具有较好的
指示作用。
—j00ru，Project Zero，DragonSector
WHY MUPDF?
 静态链接，所有库all in one file
 功能全，支持各种形式stream
 轻量级，易插桩
 几乎无bug，测试数据更准确
 Open source ,易分析
采用MuPDF作
为测试代码覆
盖率的载体
最小集后
的样本数
代码覆盖率
251
37.996%
代码覆盖率测试
PIN
BITMAP文件
分析BITMAP
文件
样本
MuPDF
样本
样本
代码覆盖率
PIN作为商业的轻量级插桩工具，具有
较好的性能和稳定性表现。
优化：
基本块级插桩
CPUKill
1bit 表示1 Byte, Zlib压缩
插桩后：打开1个PDF文件需要5秒
左右。
*NOTES*：对于有些弹框需模拟点击，以使
样本能充分测试。
代码覆盖率测试
PINAFL — 基于PIN实现了AFL的
WINDOWS版本
•
运行了1天3小时
•
20,000多次变异
•
发现了327条新的路径，即产生了
327个新的测试用例。
•
代码覆盖率为：38.077%
覆盖率计算
监控模块
(PIN)
变异模块
样本文件
目标程序
插桩
是否产生新
路径
样本队列模块
是
取top
变异
放弃当前
样本
否
未修改AFL的变异算法和调度算法，因此
能较真实体现AFL的水平
结果分析
2LSTM
3LSTM
2BLSTM
Attention
0.2
38.103
38.108
0.5
38.107 38.133
1.0
38.099
38.125 38.140 38.122
1.5
38.088
38.091 38.099 38.120
采样值对代码覆盖率的影响
轮次：60
测试时长：13.89*16=222.24小时
代码覆盖率最高提升0.3%，约20,000+指令
37.95
38
38.05
38.1
38.15
38.2
38.25
38.3
38.35
0.2
0.5
1
1.5
采样值与代码覆盖率
2LSTM
3LSTM
2BLSTM
Attention
数据集基础覆盖率：37.996%
PinAFL覆盖率： 38.077%，+0.081%
Learn&Fuzz覆盖率：38.113%，+0.117%
结果分析
训练轮次对代码覆盖率的影响
模型：2BLSTM
采样值：0.5
测试时长：13.89*5= 69.45小时
轮次
代码覆盖率
10
38.064
20
38.108
30
38.123
40
38.130
50
60
38.133
38.02
38.04
38.06
38.08
38.1
38.12
38.14
38.16
10
20
30
40
50
60
训练轮次与代码覆盖率
漏洞挖掘测试
采用我们的方案生成的PDF文件，
对Foxit Reader、Power PDF、
Corel PDF、Cool PDF、 Nitro 
PDF等软件进行了测试。
采用集群漏洞分析系统作为测试平
台，分别为每个测试对象分配了20台
虚拟机，测试时间为1天，测试样本
数为：210,000
结果分析
软件名
crash数量
去重后
漏洞类型
powerPDF
4520
28
TaintedDataControlsWriteAddress、StackOverflow、T
aintedDataControlsBranchSelection 、 ReadAVonContr
olFlow、TaintedDataControlsBranchSelection等
corelPDF
23560
78
WriteAV、ReadAV、TaintedDataControlsBranchSelect
ion、DivideByZero等
coolPDF
468
8
TaintedDataReturnedFromFunction、TaintedDataCon
trolsWriteAddress、ReadAVNearNull等
Nitropdf 
Reader
256
5
TaintedDataControlsBranchSelection、TaintedDataPa
ssedToFunction等
Foxit92
10265
27
TaintedDataControlsCodeFlow、ReadAV、DivideByZe
ro、StackOverflow等
Foxit91
2783
18
TaintedDataPassedToFunction、TaintedDataReturned
FromFunction、StackOverflow等
总数
其中某个漏洞已经被判定为可利用!
结论与展望
结论
展望
结论
1. 本方案实现了一种基于AI制导的PDF文件生成技术，方案具有以下特性：
• 支持Char-level的学习
• 支持LSTM、BLSTM、Attention机制网络模型
• 支持基于离线模型、字典和多采样值的obj生成（进程池）
• 支持基于离线obj文件的PDF样本生成（进程池）
2.  对不同模型及不同参数进行了较严谨的测试，在本次测试中，高训练轮次、低采样值生
成的样本具有更高的代码覆盖率，其中2BLSTM模型60轮采样值0.2的表现效果最佳；
3.  本方案可落地实现为一种新的样本变异策略，可单独生成样本用于漏洞挖掘，也可作为
AFL等工具的前端，但还不能完全取代当前主流Fuzzer。
展望
1. 支持更多的结构化样本格式的学习和生成，如XML、XSL、JavaScript、HTML、 AS等
2. 训练二进制格式(PNG、MKV、ZIP等)，看是否能生成较通用的模型。难点：校验和、二进制规律性不强
3. 把生成的样本交给AFL进行Fuzzing，看能否增强AFL本身的性能；
4. 单一模型与多模型组合比对
5. 交互方式训练模型：GAN
参考资源
•
Adobe Systems Incorporated. PDF Reference, 6th edition, Nov.2006. Available at 
http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf reference 1-7.pdf
•
Wang J, Chen B, Wei L, et al. Skyfire: Data-driven seed generation for fuzzing. Security and 
Privacy (SP), 2017 IEEE Symposium on. IEEE, 2017: 579-594.
•
https://patricegodefroid.github.io/
•
https://patricegodefroid.github.io/public_psfiles/SAGE-in-1slide-for-PLDI2013.pdf
•
Godefroid P, Peleg H, Singh R. Learn&fuzz: Machine learning for input fuzzing. Proceedings of 
the 32nd IEEE/ACM International Conference on Automated Software Engineering. IEEE Press, 
2017: 50-59. 
•
https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py
•
https://github.com/philipperemy/keras-attention-mechanism
谢 谢！