### 18.7.4 使用IFS读取文件

在处理文件时，如果需要去除冒号作为域分隔符，可以使用 `IFS`（内部字段分隔符）变量。首先保存当前的 `IFS` 设置，然后在脚本执行完毕后恢复它。通过修改 `IFS`，可以将域分隔符改为冒号，而不是默认的空格或制表符。

假设文件中有三个域：`NAME`、`DEPT` 和 `ID`。为了使输出更清晰，可以在 `echo` 命令中使用制表符来分隔这些域。示例脚本如下：

```bash
#!/bin/bash

# 保存当前 IFS 设置
OLD_IFS=$IFS
# 将 IFS 设置为冒号
IFS=:

while IFS=: read -r NAME DEPT ID; do
    echo -e "$NAME\t$DEPT\t$ID"
done < input_file.txt

# 恢复 IFS 设置
IFS=$OLD_IFS
```

### 18.7.5 带有测试条件的文件处理

大多数 `while` 循环包含一些测试语句，以决定下一步的动作。例如，从人员文件中读取数据并打印所有细节到一个保留文件中，直到遇到特定的名字（如 "James Lenod"），然后退出脚本。确保在找到 "James Lenod" 之前将其加入保留文件。

```bash
#!/bin/bash

# 保存当前 IFS 设置
OLD_IFS=$IFS
# 将 IFS 设置为冒号
IFS=:

while IFS=: read -r NAME DEPT ID; do
    if [[ $NAME == "James Lenod" ]]; then
        break
    fi
    echo "$NAME:$DEPT:$ID" >> output_file.txt
done < input_file.txt

# 恢复 IFS 设置
IFS=$OLD_IFS
```

### 18.7.6 扫描文件行进行数目统计

一个常见的任务是读取文件并统计某些数值列的总和。假设文件包含部门 `STAT` 和 `GIFT` 所销售的商品数量。我们需要统计部门 `GIFT` 的商品数量。

```bash
#!/bin/bash

# 初始化变量
TOTAL=0

# 保存当前 IFS 设置
OLD_IFS=$IFS
# 将 IFS 设置为逗号
IFS=,

while IFS=, read -r DEPT ITEMS; do
    if [[ $DEPT == "GIFT" ]]; then
        TOTAL=$((TOTAL + ITEMS))
    fi
done < input_file.csv

# 输出总数
echo "Total items sold by GIFT: $TOTAL"

# 恢复 IFS 设置
IFS=$OLD_IFS
```

### 18.7.7 每次读一对记录

有时可能需要每次处理两个记录。这可以通过在第一个 `while` 语句之后添加第二个读取语句来实现。需要注意的是，要不断检查是否已经读取了所有记录。

```bash
#!/bin/bash

# 保存当前 IFS 设置
OLD_IFS=$IFS
# 将 IFS 设置为换行符
IFS=$'\n'

while IFS=$'\n' read -r line1 && IFS=$'\n' read -r line2; do
    # 处理 line1 和 line2
    echo "Line 1: $line1"
    echo "Line 2: $line2"
done < input_file.txt

# 恢复 IFS 设置
IFS=$OLD_IFS
```

### 18.7.8 忽略注释行

在读取文本文件时，可能需要忽略以 `#` 开头的注释行。可以使用 `case` 语句来实现这一点。

```bash
#!/bin/bash

# 保存当前 IFS 设置
OLD_IFS=$IFS
# 将 IFS 设置为换行符
IFS=$'\n'

while IFS=$'\n' read -r line; do
    case $line in
        \#*) continue ;;  # 忽略以 # 开头的行
        *) echo "$line" ;;
    esac
done < input_file.txt

# 恢复 IFS 设置
IFS=$OLD_IFS
```

### 18.7.9 处理格式化报表

读取报表文件时，通常需要剔除不需要的行。假设我们有一个库存商品水平列表，并且只关心那些包含商品记录当前水平的列。

```bash
#!/bin/bash

# 保存当前 IFS 设置
OLD_IFS=$IFS
# 将 IFS 设置为换行符
IFS=$'\n'

# 临时工作文件
temp_file=$(mktemp)

# 读取文件并过滤掉注释行和标注行
sed '/^#/d; /^ITEM/d' input_file.txt > $temp_file

# 读取临时文件并处理
while IFS=$'\t' read -r ITEM LEVEL; do
    if ((LEVEL < 10)); then
        REORDER_LEVEL=$((LEVEL * 2))
        echo "Reorder $ITEM: $REORDER_LEVEL"
    fi
done < $temp_file

# 删除临时文件
rm $temp_file

# 恢复 IFS 设置
IFS=$OLD_IFS
```

### 18.7.10 while 循环和文件描述符

使用文件描述符进行文件备份。脚本开始时会检查文件是否存在，如果不存在或没有数据，则脚本立即终止。

```bash
#!/bin/bash

# 检查文件是否存在
if [ ! -f myfile.txt ]; then
    echo "File does not exist."
    exit 1
fi

# 打开文件描述符 3 和 4
exec 3<myfile.txt
exec 4>myfile.bak

# 读取文件并写入备份
while IFS= read -r line <&3; do
    echo "$line" >&4
done

# 关闭文件描述符
exec 3<&-
exec 4>&-
```

### 18.8 使用 break 和 continue 控制循环

`break` 和 `continue` 是用于控制循环的命令。

- `break` 用于跳出循环。
- `continue` 用于跳过当前循环步。

#### 18.8.1 break

`break` 通常用于在处理某些条件后退出循环。

```bash
#!/bin/bash

while true; do
    read -p "Enter a number (or 'q' to quit): " num
    if [[ $num == "q" ]]; then
        break
    fi
    echo "You entered: $num"
done
```

#### 18.8.2 跳出 case 语句

`break` 也可以用于跳出 `case` 语句。

```bash
#!/bin/bash

while true; do
    read -p "Enter a number (or 'q' to quit): " num
    case $num in
        q) break ;;
        *) echo "You entered: $num" ;;
    esac
done
```

#### 18.8.3 continue

`continue` 用于跳过当前循环步。

```bash
#!/bin/bash

for i in {1..10}; do
    if ((i % 2 == 0)); then
        continue
    fi
    echo "Odd number: $i"
done
```

### 18.9 创建菜单

创建一个用户友好的菜单界面，使用 `while` 循环和 `case` 语句捕获用户输入。

```bash
#!/bin/bash

# 获取日期、主机名和用户名
DATE=$(date +%d/%m/%Y)
HOST=$(hostname -s)
USER=$(whoami)

# 显示菜单
show_menu() {
    cat <<EOF
Date: $DATE
Host: $HOST
User: $USER

Menu:
1. Show date
2. Show hostname
3. Show username
q. Quit
EOF
}

# 主循环
while true; do
    show_menu
    read -p "Enter your choice: " choice
    case $choice in
        1) date ;;
        2) hostname ;;
        3) whoami ;;
        q|Q) break ;;
        *) echo "\007Invalid choice!"; sleep 1 ;;
    esac
done
```

### 18.10 小结

在编写脚本时，控制流结构是非常重要的。通过使用 `while` 循环、`break` 和 `continue` 等命令，可以实现复杂的逻辑和功能。理解和掌握这些结构将帮助你编写更加高效和灵活的脚本。

希望这些优化后的示例能够帮助你更好地理解和应用这些概念。