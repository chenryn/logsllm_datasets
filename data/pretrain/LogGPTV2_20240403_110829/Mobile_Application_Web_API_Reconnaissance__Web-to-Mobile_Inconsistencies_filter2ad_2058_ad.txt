We evaluated the efﬁcacy of WARDroid on a set of 10,000
Android apps gathered from the Google Play store using the
AndroZoo app crawler [23]. We identify several thousand apps
that utilize web API functionality, many of which are ﬂagged
as potentially vulnerable to web API hijacking. We provide
general details of speciﬁc case studies where WARDroid
identiﬁed and validated web API hijacking opportunities that
we further manually validated. We refrain from disclosing app
identities because some are either not ﬁxed, in the process of
being ﬁxed after our notiﬁcation, or in one instance we were
asked not to make any public disclosure.
A. Test Apps
To test our framework, we evaluated a total of 10,000
apps chosen from the top 10 categories in the Google Play
market. In total, WARDroid took an average of 8 minutes
to analyze each app and generated a total of 16,451 invalid
requests samples for each template and twice the number of
valid requests for response testing. This resulted in 4,562 apps
ﬂagged as having a potential Web API Hijacking vulnerability.
We tested and validated a smaller set of 1000 apps (using 1000
randomly chosen request samples from distinct apps across our
dataset). Of those, 884 invalid requests were accepted by the
API server, meaning that 884 of those ﬂagged vulnerable apps
were vulnerable, representing about 88.4% of the total tested
invalid request templates in the sample set. Since we only
tested a single generated invalid request for each app, it does
not mean that the rest of the apps were not vulnerable. We
further tested the remaining 116 apps using additional request
samples and found that an additional 42 apps had an API that
accepted an invalid request. In total, we veriﬁed that 926/1000
apps had at least one instance where it used a vulnerable web
API.
Additionally, we found that 1,743 apps in our dataset
generated unencrypted web API communication. While these
do not strictly fall in line with our stated goal of uncovering
validation inconsistencies,
they nevertheless exacerbate the
problem of vulnerable web API implementations. One app that
has both a validation inconsistency and used an unencrypted
channel is a gift card app that stores a monetary value that can
be used to purchase goods from different online and ofﬂine
stores. We worked with this particular developer to perform
additional tests with their permission. We provide details of
764
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:14 UTC from IEEE Xplore.  Restrictions apply. 
some of these case studies below, but cannot disclose the full
details for ethical reasons. Table III provides a summary of
the distribution of apps and web API hijacking opportunities
analyzed. Most vulnerable apps fall under the Tools category,
but this turns out to be just a broad characterization of apps
that perform diverse utilities. A ﬂagged app is one for which
WARDroid detected a possible validation inconsistency. A ver-
iﬁed app is one where we tested and veriﬁed the inconsistency
using a generated request template. In all cases, we performed
tedious inspection and ensured that no harm was done.
web request templates. We then manually ran the app through
a MITM proxy and captured the web request traces while a
user performed typical app tasks for 2 minutes. We counted
the total number of manual templates as the unique URI/path
combinations from the request trace. We found only 6 such
unique pairs, conﬁrming that our analysis can perform better
than manual testing. We leave a more extensive evaluation of
the efﬁcacy in this regard to future work. Our goal was to
ensure that our prototype implementation had decent efﬁcacy
to gather reliable results.
EVALUATION ON 10,000 APPS, AND TESTING ON 1,000 FLAGGED APPS.
TABLE III
Category
Education
Lifestyle
Entertainment
Business
Personalization
Tools
Music
Reference
Travel
Game
Apps
1000
1000
1000
1000
1000
1000
1000
1000
1000
1000
Flagged
201
398
232
405
549
734
434
697
224
688
Tested
46
15
79
90
21
303
22
130
86
208
Veriﬁed
42
12
67
82
18
291
17
124
85
188
B. Victim Population
To estimate the potential victim population of vulnerable
applications, we checked the download statistics of each app
ﬂagged with a web API hijacking opportunity. Using the app
package id’s we checked the estimated download numbers for
the application using a third-party service, AppBrain [24].
Using this information, we are able to get insights into the
estimated potential victim population if web API hijacking
opportunities can lead to actual exploits.
reduce
False Positives: To further
false positives,
WARDroid applies some heuristics to remove responses
ﬂagged as vulnerable. We use a set of negative keyword
instances such as ‘Error’ and ‘Unauthorized’ to ﬁlter responses
that otherwise were very similar to successful responses. We
also used a threshold response data size to ﬁlter responses
where the data was too minimal to evaluate a meaningful
edit distance. After applying these heuristics, we manually in-
spected random responses. There is an important distinction to
make between false positives in the overall app, and the server
validation routine. Here we are evaluating the false positives in
individual server validation based on single requests. Overall,
the app-level false positive is difﬁcult to measure because even
if a tested server request turns out to be a false positive, it does
not guarantee that another server request for the same app will
not be a true positive. For this reason, we merely ﬂag apps as
potentially vulnerable in the ﬁrst instance.
Note that we do not evaluate false negatives because we
do not guarantee complete code coverage, especially since we
utilize program slices to reduce the search space and improve
the usability of our tool. However, WARDroid also generates
reports for apps that include template deﬁnitions that can be
further utilized by a human analyst to further test web API
implementation through a manual process, especially where
user authentication is required. This is noted in our limitations
section. We argue, however, that our approach provides a
lower bound on the total true positive web API hijacking
opportunities that could be present for any given app/server
combination.
Efﬁcacy. We also evaluated WARDroid against a manually
generated list of web requests from an app. To accomplish
this we chose a random app to test manually. We ran the app
through WARDroid and found that it generated a total of 8
Fig. 2. Victim population distribution among veriﬁed apps with web API
hijacking problems.
Figure 2 shows the download number distribution with most
vulnerable applications having a user population between 100
to 1,000. Note this number is merely the lower bound of the
real victim population, especially since these statistics do not
consider other third-party marketplaces. This also suggests that
the problem may be more prominent with less popular apps,
which is an intuitive observation, although it also shows that
popular apps are not excluded from this problem.
This represents a total estimated victim population of over
6.47 million users from only 926 apps that displayed web
API hijacking opportunities. If we consider this to be a
representative sample of the total number of apps, we can
assert that the potential impact is widespread, reaching many
millions of users throughout the world.
C. Impact Analysis
In this work, we focus on validation inconsistencies that
enable a number of attacks to the mobile app server back-
end. Below are some of the speciﬁc attack case studies we
765
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:14 UTC from IEEE Xplore.  Restrictions apply. 
uncovered on apps that we tested. These are merely sample
attacks of a wider array of possible attacks that are possible
due to validation inconsistencies. We note that we also found
apps that communicated over an unencrypted channel, which
makes it easy for attackers to capture the required ﬁeld values
for a request template and replay the requests by leveraging
validation inconsistencies as a means to an end. We refrain
from identifying the apps and SDKs involved because some
of these issues are still not ﬁxed and we are in the process
of properly notifying the app developers. The variation and
potential severity and reach of these attacks illustrate the
importance of this problem. We stress here that we were
careful
in evaluating these case studies in a safe manner
without causing harm. In most cases, we used our own dummy
accounts.
Unauthorized data access. Many apps we analyzed in-
cluded basic to non-existent authentication and authorization
mechanisms to control access to their backend services. Most
apps include an authentication token (key) with each request
that identiﬁes the app to the backend and authorizes access
to data and services on the backend. While backend services
may provide additional layers of security, we found that many
apps choose to bypass these additional authentication steps.
As an example of unauthorized access, we discovered an
app that simply sent the user’s email address as an authen-
tication and authorization token. This app had over 5,000
downloads at the time of our testing. We setup test accounts
with the app owner permission and discovered that the server
did not perform any authorization checks. WARDroid identiﬁed
the email address parameter constraints as imposed by the
app and suggested an invalid email parameter as a test case.
After coordination with the app developer team, we were
given permission to test a non-production web API server that
was an exact copy of their production server, but with fake
test data. It turns out that the app team consisted of a small
number of inexperienced developers, which is not uncommon
in the mobile space. Informed by the web request template
constraints, we were able to launch a SQL injection attack on
the test server and retrieved a full list of all test app user data.
This would allow us to access any user account on the app
The root cause of this was the inconsistent validation of the
email string format at the server side. Since this was a virtual
money transfer app used in actual online and ofﬂine stores, our
discovery had serious potential consequences. Upon further
testing, we veriﬁed that the web API allowed us to freely
transfer funds between two user accounts. Since working with
this app team, they have ﬁxed the validation inconsistency
issue, but they asked us to remain anonymous for fear of bad
publicity. This is an extreme case, but we think it is indicative
of many apps on the market, especially those deployed by less
experienced team.
JSON-based SQL Injection. On yet another app, we
uncovered a different SQL-injection vulnerability facilitated
by inconsistent data validation in a login form that allows
us to login as any user to an app. This is a less popular
app that had only over 1 thousand downloads at the time
of testing. This app sends the username and password as a
JSON array data type in the form {username: $usr, password:
$pwd}. WARDroid further reports that the password ﬁeld is
constrained by the app to only use alphanumeric values. While
WARDroid does not suggest a proper invalid input, we utilize
domain knowledge to test this potential inconsistency. We
found that the server does not implement a similar constraint
on the password and happily accepts any input as long as the
JSON data is properly formatted. Subsequently, we are able to
login by replacing the password parameter with the following
value: ”,”$or:[{},{’1’:’1’}]. We note here that we used our
own sample dummy accounts and notiﬁed the app developers
of the potential problems, which has since been ﬁxed.
Shopping for Free. We discovered a problem with a popu-
lar ecommerce SDK utilized by thousands of apps and online
stores across the world, with millions of users. WARDroid
reported a template where the constraint on the quantity
ﬁeld for shopping cart items disallows numbers less than 1.
Naturally, a quantity zero would have no effect, but WARDroid
also suggested a violating input as a negative quantity. This
is disallowed by the sdk’s constraints in the app, but we
discovered that
it was allowed by the server because the
same functionality is used to process returns and refunds,
where a negative quantity is indeed valid. However, since
this inconsistency exists, we can bypass the app and replay
a checkout action using a negative quantity on a line item
that can be manipulated to cause the checkout total to be zero
dollars. We tested this on a demo store account that we created
and conﬁrmed the problem with the app developer. We note
that this problem has been ﬁxed in a new release of their SDK,
although the old version still exists in production apps.
Cross Platform Content Injection. On a news app with
over 500,000 downloads, we discovered a problem where
the mobile app allows a user to enter comments on a news
article that is not properly sanitized at the server for proper
formatting. We discovered that the accompanying website for
the news station also displays comments entered on the mobile
app, and the mobile app disallows HTML characters in the
comments. WARDroid suggested that HTML characters could
be accepted by the server, which would be inconsistent with
the app constraints. Indeed, we were able to replay a comment
posting request with HTML characters, and the server stored
the values as is. This is not a problem when displaying the
comment on the mobile app, as it does not render HTML.
However, since the company’s website uses the same data
store, and the API design requires only client apps to validate
content, then the website renders the incoming comments as
HTML. This is a serious problem that could cause all kinds
of havoc on the website, including cross-site scripting attacks.
Account DoS. On a particular health app used by millions
of users around the world, WARDroid reported a constraint
on the password change request that restricted the password
length to 10 characters in addition to typical password con-
straints. This is a popular ﬁtness app that had over 10 million
downloads at the time of testing. The server did not apply the
same validation as the app and allowed us to update a password
766
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:14 UTC from IEEE Xplore.  Restrictions apply. 
to a longer string. This caused the account to get locked out
of the app. While this attack may have no effect and may not
be useful, since an attacker wouldn’t ﬁnd much use in locking
himself out of his own account, it does illustrate the pervasive
nature of the types of simple inconsistencies between app input
validation logic and server API validation logic.
Transferring Money. WARDroid analyzed an app by a
major US bank and reported a potential inconsistency in the
money transfer functionality. The app restricts transfers only
to connected accounts displayed in a spinner UI element. The
author used two of his own disconnected accounts to test this
inconsistency opportunity and was able to successfully transfer
funds between his two accounts although it was not possible
directly through the app or through the bank’s website. Again,
this may not be of particular interest to an attacker because
he may not want to transfer money out of his own account
to an unknown account. However, this also shows that the
inconsistency problem exists in some of the most important
and critical apps used in society. This bank app that had
over 10 million downloads at the time of testing. There may
be a wider array of inconsistencies that could potentially be
exploited, but due to ethical reasons, we are unable to test
or validate other potential inconsistencies except where we
can use our own account and not cause any harm. As of this
writing, this problem no longer exists in the updated bank
server’s API.
VIII. DISCUSSION
Mobile applications are a necessity in many facets of
society these days. In addition to traditional service businesses
offering mobile applications, such as banks, and applications
already available on the web, the proliferation of Internet of