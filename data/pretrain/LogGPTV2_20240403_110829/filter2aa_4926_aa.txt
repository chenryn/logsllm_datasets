# 工具
---
## jconsole
jconsole 是 JDK 自带的 GUI 工具。jconsole(Java Monitoring and Management Console) 是一种基于 JMX 的可视化监视与管理工具。
jconsole 的管理功能是针对 JMX MBean 进行管理，由于 MBean 可以使用代码、中间件服务器的管理控制台或所有符合 JMX 规范的软件进行访问。
注意：使用 jconsole 的前提是 Java 应用开启 JMX。
### 开启 JMX
Java 应用开启 JMX 后，可以使用 jconsole 或 jvisualvm 进行监控 Java 程序的基本信息和运行情况。
开启方法是，在 java 指令后，添加以下参数：
```java
-Dcom.sun.management.jmxremote=true
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false
-Djava.rmi.server.hostname=127.0.0.1        //指定 Java 程序运行的服务器
-Dcom.sun.management.jmxremote.port=18888   //指定 JMX 服务监听端口
```
### 连接 jconsole
如果是本地 Java 进程，jconsole 可以直接绑定连接。
如果是远程 Java 进程，需要连接 Java 进程的 JMX 端口。
### jconsole 界面
进入 jconsole 应用后，可以看到以下 tab 页面。
* 概述 - 显示有关 Java VM 和监视值的概述信息。
* 内存 - 显示有关内存使用的信息。内存页相当于可视化的 jstat 命令。
* 线程 - 显示有关线程使用的信息。
* 类 - 显示有关类加载的信息。
* VM 摘要 - 显示有关 Java VM 的信息。
* MBean - 显示有关 MBean 的信息。
---
## jvisualvm
jvisualvm 是 JDK 自带的 GUI 工具。jvisualvm(All-In-One Java Troubleshooting Tool) 是多合一故障处理工具。它支持运行监视、故障处理、性能分析等功能。
### jvisualvm 概述页面
jvisualvm 概述页面可以查看当前 Java 进程的基本信息，如：JDK 版本、Java 进程、JVM 参数等。
### jvisualvm 监控页面
### jvisualvm 线程页面
jvisualvm 线程页面展示了当前的线程状态。
jvisualvm 还可以生成线程 Dump 文件，帮助进一步分析线程栈信息。
### jvisualvm 抽样器页面
jvisualvm 可以对 CPU、内存进行抽样，帮助我们进行性能分析。
---
## MAT
MAT 即 Eclipse Memory Analyzer Tool 的缩写。
MAT 本身也能够获取堆的二进制快照。该功能将借助 `jps` 列出当前正在运行的 Java 进程，以供选择并获取快照。由于 `jps` 会将自己列入其中，因此你会在列表中发现一个已经结束运行的 `jps` 进程。
MAT 可以独立安装，也可以作为 Eclipse IDE 的插件安装。
- http://www.eclipse.org/mat/downloads.php
### MAT 配置
MAT 解压后，安装目录下有个 `MemoryAnalyzer.ini` 文件。
`MemoryAnalyzer.ini` 中有个重要的参数 `Xmx` 表示最大内存，默认为：`-vmargs -Xmx1024m`
如果试图用 MAT 导入的 dump 文件超过 1024 M，会报错：
```
An internal error occurred during: "Parsing heap dump from XXX"
```
此时，可以适当调整 Xmx 大小。如果设置的 Xmx 数值过大，本机内存不足以支撑，启动 MAT 会报错：
```
Failed to create the Java Virtual Machine
```
---
## Arthas
- https://github.com/alibaba/arthas
Arthas 是 Alibaba 开源的 Java 诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪 Java 代码；实时监控 JVM 状态。
Arthas 支持 JDK 6+，支持 Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。
### 安装
* 使用 arthas-boot(推荐)
    下载 arthas-boot.jar，然后用 java -jar 的方式启动：
    ```
    curl -O https://arthas.aliyun.com/arthas-boot.jar
    java -jar arthas-boot.jar
    ```
    打印帮助信息：
    ```
    java -jar arthas-boot.jar -h
    ```
    如果下载速度比较慢，可以使用 aliyun 的镜像：
    ```
    java -jar arthas-boot.jar --repo-mirror aliyun --use-http
    ```
* 使用 as.sh
    Arthas 支持在 Linux/Unix/Mac 等平台上一键安装
    ```
    curl -L https://arthas.aliyun.com/install.sh | sh
    ```
    上述命令会下载启动脚本文件 as.sh 到当前目录，你可以放在任何地方或将其加入到 $PATH 中。
    直接在 shell 下面执行./as.sh，就会进入交互界面。
    也可以执行./as.sh -h 来获取更多参数信息。
### 使用
参考官方文档
- https://github.com/alibaba/arthas/blob/master/README_CN.md
- https://start.aliyun.com/handson-lab?category=arthas
- https://arthas.aliyun.com/doc/quick-start.html
---
## jps
jps 是虚拟机进程状态工具。它可以显示指定系统内所有的 HotSpot 虚拟机进程状态信息。jps 通过 RMI 协议查询开启了 RMI 服务的远程虚拟机进程状态。
### jps 命令用法
```
jps [option] [hostid]
jps [-help]
```
如果不指定 hostid 就默认为当前主机或服务器。
常用参数：
* option - 选项参数
    * -m - 输出 JVM 启动时传递给 `main()` 的参数。
    * -l - 输出主类的全名，如果进程执行的是 jar 包，输出 jar 路径。
    * -v - 显示传递给 JVM 的参数。
    * -q - 仅输出本地 JVM 进程 ID。
    * -V - 仅输出本地 JVM 标识符。
* hostid - RMI 注册表中注册的主机名。如果不指定 hostid 就默认为当前主机或服务器。
其中 option、hostid 参数也可以不写。
### jps 使用示例
列出本地 Java 进程
```
$ jps
18027 Java2Demo.JAR
18032 jps
18005 jstat
```
列出本地 Java 进程 ID
```
$ jps -q
8841
1292
5398
```
列出本地 Java 进程 ID，并输出主类的全名，如果进程执行的是 jar 包，输出 jar 路径
```
$ jps -l
3002 /opt/jdk1.7.0/demo/jfc/Java2D/Java2Demo.JAR
2857 sun.tools.jstatd.jstatd
```
---
## jstat
命令格式：
```
jstat [option] VMID [interval] [count]
```
常用参数：
* option - 选项参数，用于指定用户需要查询的虚拟机信息
    * -class - 监视类装载、卸载数量、总空间以及类装载所耗费的时间
    * -compiler：显示 JIT 编译的相关信息；
    * -gc：监视 Java 堆状况，包括 Eden 区、两个 survivor 区、老年代、永久代等区的容量、已用空间、GC 时间合计等信息。
    * -gccapacity：显示各个代的容量以及使用情况；
    * -gcmetacapacity：显示 Metaspace 的大小；
    * -gcnew：显示新生代信息；
    * -gcnewcapacity：显示新生代大小和使用情况；
    * -gcold：显示老年代和永久代的信息；
    * -gcoldcapacity：显示老年代的大小；
    * -gcutil：显示垃圾回收统计信息；
    * -gccause：显示垃圾回收的相关信息（通 -gcutil），同时显示最后一次或当前正在发生的垃圾回收的诱因；
    * -printcompilation：输出 JIT 编译的方法信息。
* VMID - 如果是本地虚拟机进程，则 VMID 与 LVMID 是一致的；如果是远程虚拟机进程，那 VMID 的格式应当是：`[protocol:][//]lvmid[@hostname[:port]/servername]`
* interval - 查询间隔
* count - 查询次数
更详细说明可以参考
- https://www.cnblogs.com/yjd_hycf_space/p/7755633.html
### jstat 使用示例
**类加载统计**
使用 jstat -class pid 命令可以查看编译统计信息。
* Loaded - 加载 class 的数量
* Bytes - 所占用空间大小
* Unloaded - 未加载数量
* Bytes - 未加载占用空间
* Time - 时间
查看类加载信息
```
$ jstat -class 7129
Loaded  Bytes  Unloaded  Bytes     Time
 26749 50405.3      873  1216.8      19.75
```
**编译统计**
使用 jstat -compiler pid 命令可以查看编译统计信息。
* Compiled - 编译数量
* Failed - 失败数量
* Invalid - 不可用数量
* Time - 时间
* FailedType - 失败类型
* FailedMethod - 失败的方法
```
$ jstat -compiler 7129
Compiled Failed Invalid   Time   FailedType FailedMethod
   42030      2       0   302.53          1 org/apache/felix/framework/BundleWiringImpl$BundleClassLoader findClass
```
**GC 统计**
使用 jstat -gc pid time 命令可以查看 GC 统计信息。
以 250 毫秒的间隔进行 7 个采样，并显示 -gcutil 选项指定的输出。
```
$ jstat -gcutil 21891 250 7
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  0.00  97.02  70.31  66.80  95.52  89.14      7    0.300     0    0.000    0.300
  0.00  97.02  86.23  66.80  95.52  89.14      7    0.300     0    0.000    0.300
  0.00  97.02  96.53  66.80  95.52  89.14      7    0.300     0    0.000    0.300
 91.03   0.00   1.98  68.19  95.89  91.24      8    0.378     0    0.000    0.378
 91.03   0.00  15.82  68.19  95.89  91.24      8    0.378     0    0.000    0.378
 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378
 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378
```
以 1 秒的间隔进行 4 个采样，并显示-gc 选项指定的输出。
```
$ jstat -gc 25196 1s 4
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT
20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550
20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550
20928.0 20928.0  0.0    0.0   167936.0  8880.5   838912.0   80291.2   106668.0 100032.1 12772.0 11602.2    760   14.332  580   656.218  670.550