### 7.1. Replay Attack

In this scenario, adversary A impersonates browser B to destination site D. Due to the lack of authentication in this step and the absence of unique identifiers in the redirect, D cannot differentiate between B and AB. Apart from the IP address of the communication partner, D's view of the interaction with B and AB is identical.

**Possible Solutions:**
1. **IP Address Verification:** Source site S can include the IP address of browser B as a query string parameter in the redirect. Destination site D can then verify that the IP address in the received message matches the IP address of browser B. If the check fails, D should abort the protocol.
   - **Caveat:** This solution may be problematic if B's IP address changes between steps 2 and 3 due to IP rollover by certain ISPs, leading to false positives.
   
2. **Enhanced Integrity Property:** Another approach is to enhance the integrity property claimed for steps 1-3 to include binding to the sending party or the underlying channel. This would prevent the described attack.
   
3. **Secure Channel:** Using a secure channel (B ↔ D) in steps 3 and 6, which provides freshness and replay prevention, can also mitigate the risk.

### 7.2. Man-in-the-Middle Attacks

This section discusses a specific man-in-the-middle (MitM) attack and outlines further techniques and entry points for such attacks.

**General Technique:**
The general technique of MitM attacks is described in [3], and [14] provides a concrete example of such an attack on the Needham-Schroeder Public-Key protocol.

#### 7.2.1. Between B and S by DNS Spoofing

**Attack Scenario:**
Adversary A acts as a proxy between browser B and source site S (B ↔ A ↔ S). The attack exploits the well-known weakness where an adversary who controls the Domain Name Service (DNS) can impersonate one party to another.

**Prerequisites:**
- Adversary A can break DNS and impersonate certain URLs.
- The method of tracking an authenticated user of source site S is not protected against MitM attacks.

**The Attack:**
1. **Impersonation:** Adversary A uses its ability to break DNS to impersonate the inter-site transfer URL of source site S to browser B.
2. **Communication Forwarding:** A forwards all communication until it obtains unused SAML artifacts.
3. **Redirection:** A sends the original redirect to browser B, re-initiating a normal protocol run without user interaction.

**Discussion:**
- The profile does not claim unilateral authentication in steps 1 and 2, making it impossible for browser B to distinguish between the adversary AS and the honest source site S.
- The profile does not specify security assumptions for user tracking, allowing the adversary to forward this communication.

**Possible Solutions:**
- **Unilateral Authentication:** Implementing unilateral authentication in all protocol steps can prevent the adversary from impersonating the source site S to browser B.
- **Strong User Tracking:** Enhancing the user tracking mechanism to be resistant against MitM attacks can also help. However, since the SAML Single Sign-on protocol does not specify these details, it is not safe to rely on them.

#### 7.2.2. Other Man-in-the-Middle Attacks

**Non-Portal Scenario:**
- An adversary can manipulate the target of the step-1 redirect by rewriting the HTTP response and changing the target URL. Since the SAML Single Sign-on protocol does not specify security properties for this step, the connection is assumed to be unsecured.
- An adversary can also act as a man-in-the-middle between browser B and destination site D. As there is no unilateral authentication required in steps 3 and 6, browser B cannot distinguish between the adversary AD and destination site D.

### 7.3. HTTP Referrer Attack

**Attack Overview:**
This attack allows an adversary A to provoke an information leakage of valid SAML artifacts using the HTTP Referrer tag.

**Prerequisites:**
- Adversary A can intercept arbitrary connections.
- Browser B sets the HTTP Referrer Tag by default.
- Error messages produced by D must either contain a link to a URL without confidentiality or integrity, or the adversary must be able to manipulate data transferred through insecure connections.

**The Attack:**
1. **Connection Interruption:** Adversary A intercepts the SAML request from D to S, causing the request to fail.
2. **Error Message:** D sends an error message to B, which contains a link or redirect to a URL P that is not secured.
3. **Information Leakage:** The next request from B to P includes D in the referrer tag, containing the still valid SAML artifacts, which A can read in plain text.

**Discussion:**
- The message in step 6 allows information leakage as it does not claim confidentiality or integrity.
- The referrer tag typically contains the URI of the source page, including the query string with valid SAML artifacts.

**Possible Solutions:**
- **Dereferrer Redirect:** Use a dereferrer redirect before step 6 to prevent the inclusion of the Referrer tag in the request.
- **One-Time Usage:** Enforce the one-time usage property of SAML artifacts at the destination site D. Since D has already seen the artifacts in step 3, it will not accept them a second time.

### 8. Vulnerability of the SSL/TLS Binding

**SOAP over HTTP:**
- One of the most important bindings of the SAML Single Sign-on protocol is SOAP over HTTP, which utilizes SSL 3.0 or TLS 1.0 with unilateral authentication for connections requiring confidentiality and integrity.
- While this binding exceeds the security requirements of the protocol, it makes attacks more difficult. For example, the replay attack described in Section 7.1 no longer works due to replay prevention provided by SSL/TLS.
- For the MitM attack in Section 7.2, a stronger adversary is needed, as they must present a valid certificate.
- The referrer attack in Section 7.3 still works because the SAML Single Sign-on protocol does not require security measures in step 6.

**Recommendations:**
- Use SSL 3.0 or TLS 1.0 as the communication channel to enhance security.
- Explicitly name the protocol type, step, and source/destination in messages to prevent attacks involving multiple services.
- Analyze all possible states of the protocol, especially error states, to identify potential vulnerabilities.

### 9. Conclusion

We have identified several design flaws in the SAML Single Sign-on Browser/Artifact profile and presented three attacks to demonstrate its vulnerability. Even with SSL/TLS channels and unilateral authentication, the protocol remains susceptible to certain attacks, such as the referrer attack and attacks involving multiple services on the same host.

**Recommendations:**
- Always use secure channels like SSL 3.0 or TLS 1.0 with unilateral authentication.
- Include explicit measures in messages to prevent attacks.
- Analyze all possible protocol states, especially error states, to identify and mitigate vulnerabilities.

**Acknowledgment:**
We thank Michael Backes, Charlotte Bolliger, Günter Karjoth, Lilli-Marie Pavka, and Birgit Pfitzmann for their valuable reviews and helpful discussions.

### References

[1] M. Abadi and R. Needham. Prudent engineering practice for cryptographic protocols. IEEE Transactions on Software Engineering, 22(1):6–15, 1996.

[2] R. Anderson and R. Needham. Robustness principles for public key protocols. In CRYPTO: Proceedings of Crypto, pages 236–247, Berlin, 1995. Springer-Verlag.

[3] B. B. Bhansali. Man-in-the-middle attack - a brief, February 2001.

[4] S. Cantor and M. Erdos. Shibboleth-architecture draft v05, May 2002.

[5] P. Dave and N. Moussa. TCP connection hijacking, 2002.

[6] T. Dierks and C. Allen. RFC 2246: The TLS protocol, January 1999. Status: Standards Track.

[7] P. H.-B. et al. Assertions and protocol for the OASIS security assertion markup language (SAML), 2002.

[8] P. M. et al. Bindings and profiles for the OASIS security assertion markup language (SAML), 2002.

[9] R. T. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. RFC 2616: Hypertext transfer protocol – HTTP/1.1, June 1999. Status: Standards Track.

[10] K. Fu, E. Sit, K. Smith, and N. Feamster. Dos and don’ts of client authentication on the web. In Proceedings of the 10th USENIX Security Symposium, 2001.

[11] J. Hodges and T. Wason. Liberty architecture overview, 2003.

[12] D. P. Kormann and A. D. Rubin. Risks of the passport single signon protocol. Computer Networks, 33:51–58, 2000.

[13] G. Lowe. Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In Tools and Algorithms for the Construction and Analysis of Systems (TACAS), volume 1055, pages 147–166. Springer-Verlag, Berlin Germany, 1996.

[14] C. Meadows. Analyzing the needham-schroeder public-key protocol: A comparison of two approaches. In ESORICS: European Symposium on Research in Computer Security. LNCS, Springer-Verlag, 1996.

[15] Microsoft. .net passport review guide, 2002.

[16] R. Needham and M. Schroeder. Using encryption for authentication in large networks of computers. Communications of the ACM, 21(12):393–399, 1978.

[17] B. Pfitzmann and M. Waidner. BBAE – a general protocol for browser-based attribute exchange. Research report RZ 3455 (# 93800), IBM Research Division, Zurich, June 2002.

[18] B. Pfitzmann and M. Waidner. Privacy in browser-based attribute exchange. In Proceeding of the ACM Workshop on Privacy in the Electronic Society, pages 52–62, Washington, DC, 2002. ACM Press.

[19] B. Pfitzmann and M. Waidner. Token-based web single signon with enabled clients. Technical Report IBM Research Report RZ 3458, IBM Research Division, 2002.

[20] J. Rouault and T. Wason. Liberty bindings and profiles specification, 2003.

[21] M. Slemko. Microsoft passport to trouble, 2001.