sary A impersonates browser B to destination site D.
Because of the lack of authentication in this step and
missing identiﬁers in the redirect, D cannot distinguish
between the parties B and AB. Apart from the IP ad-
dress of the communication partner, the view of D is the
same in the communication with B and AB.
Possible solutions: Source site S can input the IP ad-
dress of browser B as query string parameter into the
redirect. The destination site D checks the IP address in
the message received for equality with the IP address of
browser B. If this check fails, D aborts the protocol run.
This measure might interfere with the IP rollover of cer-
tain ISPs, because it produces a false positive if B’s IP
address is changed between steps 2 and 3. A second pos-
sibility to prevent the described attack is to enhance the
integrity property claimed for the steps 1-3 so that it in-
cludes binding to the sending party or the underlying
channel. One can also use a secure channel B ↔ D in
steps 3 and 6, which provides freshness and replay pre-
vention.
7.2. Man-in-the-Middle Attacks
In this section we consider a concrete man-in-the-
middle attack. We describe further techniques and en-
try points for this kind of attack.
The general technique of man-in-the-middle attacks
is described in [3]. [14] provides a concrete example of
such an attack on the Needham-Schroeder Public-Key
protocol.
7.2.1. Between B and S by DNS Spooﬁng This at-
tack uses the well-known weakness that an adversary
who controls the Domain Name Service (DNS) can im-
personate one party to another. We present a man-in-the-
middle attack in which adversary A is a proxy between
browser B and source site S: B ↔ A ↔ S.
Prerequisites: Let A be an adversary that can break
DNS. By doing so, the adversary can act with a host-
name not belonging to him or her and can impersonate
certain URLs to other parties. We additionally assume
that the method of tracking an authenticated user of
source site S is unprotected against man-in-the-middle
attacks.
The Attack: Adversary A uses its ability to break
DNS to impersonate the inter-site transfer URL S of source site S to browser B. A forwards all
communication until it obtains of unused SAML arti-
facts.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:49:07 UTC from IEEE Xplore.  Restrictions apply. 
AS:
S
URL>
S’s
Impersonates
the
browser B. =⇒ A.
to
source
site
1. B → AS: ﬁnish of the redirect
1*. AB → S: ﬁnish of the redirect
2*. S → AB: redirect request to D
Note that the proﬁle does not claim authentication
for this step.
The adversary AB impersonates browser B to S.
A: Acts as man-in-the-middle between B and S.
Because the user-tracking system of S is not resis-
tant against man-in-the-middle attacks, A can for-
ward all communication between B and S during
the user tracking.
This redirect contains the SAML artifacts for B
readable by AB. AB now begins to impersonate B
to destination site D.
The adversary AB impersonates B to D. The redi-
rect contains valid SAML artifacts and allows AB
to act using the permissions of U.
Adversary A sends the original redirect to browser
B. As the proﬁle assumes that the user has already
been authenticated to S, there need not be any user
interaction between protocol steps 1 and 2. There-
fore, the adversary can re-initiate a normal proto-
col run of B with a high probability that the user
will not notice the reset of the protocol run.
2. A → B: redirect request to S
3*. AB → D: ﬁnish of redirect to D
Discussion: The proﬁle does not claim unilateral au-
thentication in steps 1 and 2. Therefore browser B can-
not distinguish between the A of adversary
AS and S that belongs to the honest source
site S. The proﬁle does not state which security assump-
tions can be made about the tracking of an authenticated
user by source site S. Therefore we can assume that the
adversary can forward this communication as well.
Possible solutions: Unilateral authentication in all pro-
tocol steps can prevent the adversary from impersonat-
ing source site S to browser B. Strong user tracking, re-
sistant against man-in-the-middle attacks, can also help.
However, as the user tracking is not speciﬁed in the
SAML Single Sign-on protocol, it is not safe to rely on
it.
7.2.2. Other Man-in-the-Middle Attacks To accom-
plish the described man-in-the-middle attack in a non-
portal scenario, an adversary can also manipulate the tar-
get of the step-1 redirect. It can rewrite the HTTP re-
sponse that initiates the redirect and change the target
URL. As the SAML Single Sign-on protocol speciﬁes
no security properties for this step 0, we can assume that
the connection is unsecured.
An adversary also has the option to act as man-in-the-
middle between browser B and destination site D. As
there is no unilateral authentication required in steps 3
and 6, a browser B cannot distinguish between an adver-
sary AD and destination site D.
7.3. HTTP Referrer Attack
The following attack allows an adversary A to pro-
voke an information leakage of valid SAML artifacts. It
uses the Referrer Tag of HTTP (see [9]) to obtain un-
used SAML artifacts.
Prerequisites: To accomplish this attack we need an ad-
versary A that can tap channels and intercept arbitrary
connections. In addition, let B be a browser that sets the
HTTP Referrer Tag by default.
We require some properties of the error messages
produced by D if a protocol failure occurs: either the
error page contains a link to a URL not providing conﬁ-
dentiality or integrity, or adversary A is able to manip-
ulate data transferred through connections that do not
maintain the integrity property.
The Attack: The attack refers to the protocol schema in
Section 6. The adversary provokes an information leak-
age of valid unused artifacts by interrupting the connec-
tion between destination site D and source site S.
3. B → D: redirect to D
4. D → S: SAML request to S
which contains valid SAML artifacts.
A: Adversary A intercepts this message. Therefore
the SAML request is unsuccessful, and D sends an
error message in the HTTP response of step 6.
6. D → B: error message
According to the proﬁle no conﬁdentiality or in-
tegrity is required in this and subsequent steps. The
adversary A can proceed in two ways:
• If the error message contains a link or redi-
rect to a URL to party P that is not secured,
A can tap the channel the browser possibly
establishes to P.
• If the adversary A is able to manipulate
data transferred through connections, he can
change the message of step 6 to a redirect to
a party P it has chosen.
7. B → P: HTTP request
The next request of the browser B. It contains
D in the referrer tag including the
query string and therefore the still valid SAML ar-
tifacts of step 4. A can read them in plain text.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:49:07 UTC from IEEE Xplore.  Restrictions apply. 
3*. A → D: redirect to D
as read in the referrer tag.
Discussion: The message of step 6 allows information
leakage: It does not claim conﬁdentiality or integrity.
The referrer tag is normally set if the source from which
the user comes, has its own URI. It will contain the
D, including the query string that contains
the still valid SAML artifacts.
Possible solutions: The HTTP speciﬁcation [9] recom-
mends not including the Referer tag in a request if the
referring page was transferred with a secure protocol.
Still, the implementation of this recommendation by
Web browsers is beyond of the sphere of inﬂuence of
SAML implementers. We can also prevent this attack by
using a dereferrer redirect before step 6. This is a com-
mon technique in current e-commerce implementations.
This redirect is only needed if steps 4 or 5 were not suc-
cessful or not all artifacts were consumed by D. A sec-
ond approach is to enforce the one-time usage property
of the SAML artifacts also at the destination site. As des-
tination site D has already seen the artifacts in the reg-
ular step 3, it will not accept them a second time. As
source site S checks whether received artifacts were is-
sued to the sending destination site, the artifacts can-
not be used in the communication with other destina-
tion sites.
8. Vulnerability of the SSL/TLS Binding
SOAP over HTTP is one of the most important
bindings of the SAML Single Sign-on protocol. It uti-
lizes SSL 3.0 or TLS 1.0 with unilateral authentication
as communication channel for connections that require
conﬁdentiality and integrity.
As this binding exceeds the security requirements of
the protocol itself, our attacks will be more difﬁcult to
accomplish. The replay attack described in Section 7.1
no longer works, because the channels provide replay
prevention. For the man-in-the-middle attack of Sec-
tion 7.2 a stronger adversary is needed. This adversary
not only needs to impersonate S but also
present a valid certiﬁcate. As the user tracking itself does
not require user interaction, the user has little chance to
verify the certiﬁcate of source site S. The referrer attack
of Section 7.3 still works, as the SAML Single Sign-
on protocol does not require any security measures in
step 6 and therefore no SSL/TLS channel is used. At-
tacks in which one has several services on the same des-
tination site and one service holder tries to cheat another
are still possible. They do not depend on the insecurity
of the communication channels. The same holds for at-
tacks that are based on race conditions and try to double-
spend artifacts.
In general, it is a good idea to use SSL 3.0 or TLS 1.0
as communication channel. Their use enhances the secu-
rity of the SAML Single Sign-on protocol dramatically,
but does not guarantee complete security.
9. Conclusion
We have described several design ﬂaws of the SAML
Single Sign-on Browser/Artifact proﬁle. In several in-
stances, the protocol description is imprecise. We pre-
sented three attacks on the protocol to demonstrate its
vulnerability. Even a protocol binding with underlying
SSL/TLS channels and unilateral authentication can be
broken. Most implementations will simply use SSL/TLS
channels with unilateral authentication, which compli-
cates or prevents man-in-the-middle and replay attacks.
This leaves the discovered referrer attack and attacks
where the destination site provides multiple services on
the same host.
We have deduced several recommendations for the
design of browser-based protocols from our analysis.
First of all, we strongly recommend that secure channels
such as SSL 3.0 or TLS 1.0 with unilateral authentica-
tion for message transfer always be used. They outmatch
normal transfer of signed and encrypted messages, as
they provide authentication, freshness, and replay pre-
vention. We also recommend including more explicit-
ness measures into the messages. It is important to name
protocol type, protocol step, source and destination of a
message explicitly in the message. Such measures could
for instance prevent attacks where multiple services of
a site are involved. We recommend not only considering
successful protocol runs, but also analyzing all states the
protocol can reach. Especially error states may hide op-
portunities for attacks such as our referrer attack.
We are convinced that the SAML Single Sign-on
Browser/Artifact proﬁle is in general a well-written pro-
tocol. In fact, it is one of the most carefully designed
browser-based protocols in federated identity manage-
ment. Nevertheless, several changes are required to im-
prove its security and prepare for its broad application in
industry.
Acknowledgment
We thank Michael Backes, Charlotte Bolliger, G¨unter
Karjoth, Lilli-Marie Pavka, and Birgit Pﬁtzmann for the
valuable reviews and helpful discussions.
References
[1] M. Abadi and R. Needham. Prudent engineering prac-
tice for cryptographic protocols. IEEE Transactions on
Software Engineering, 22(1):6–15, 1996.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:49:07 UTC from IEEE Xplore.  Restrictions apply. 
[2] R. Anderson and R. Needham. Robustness principles
In CRYPTO: Proceedings of
for public key protocols.
Crypto, pages 236–247, Berlin, 1995. Springer-Verlag.
[3] B. B. Bhansali. Man-in-the-middle attack - a brief,
February 2001.
[4] S. Cantor and M. Erdos. Shibboleth-architecture draft
v05, May 2002.
[5] P. Dave and N. Moussa. TCP connection hijacking, 2002.
[6] T. Dierks and C. Allen. RFC 2246: The TLS protocol,
January 1999. Status: Standards Track.
[7] P. H.-B. et al. Assertions and protocol for the OASIS se-
curity assertion markup language (SAML), 2002.
[8] P. M. et al. Bindings and proﬁles for the OASIS security
assertion markup language (SAML), 2002.
[9] R. T. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, L. Mas-
inter, P. Leach, and T. Berners-Lee. RFC 2616: Hypertext
transfer protocol – HTTP/1.1, June 1999. Status: Stan-
dards Track.
[10] K. Fu, E. Sit, K. Smith, and N. Feamster. Dos and don’ts
of client authentication on the web. In Proceedings of the
10th USENIX Security Symposium, 2001.
[11] J. Hodges and T. Wason. Liberty architecture overview,
2003.
[12] D. P. Kormann and A. D. Rubin. Risks of the passport
single signon protocol. Computer Networks, 33:51–58,
2000.
[13] G. Lowe. Breaking and ﬁxing the Needham-Schroeder
public-key protocol using FDR. In Tools and Algorithms
for the Construction and Analysis of Systems (TACAS),
volume 1055, pages 147–166. Springer-Verlag, Berlin
Germany, 1996.
[14] C. Meadows. Analyzing the needham-schroeder public-
key protocol: A comparison of two approaches. In ES-
ORICS: European Symposium on Research in Computer
Security. LNCS, Springer-Verlag, 1996.
[15] Microsoft. .net passport review guide, 2002.
[16] R. Needham and M. Schroeder. Using encryption for au-
thentication in large networks of computers. Communi-
cations of the ACM, 21(12):393–399, 1978.
[17] B. Pﬁtzmann and M. Waidner. BBAE – a general pro-
tocol for browser-based attribute exchange. Research re-
port RZ 3455 (# 93800), IBM Research Division, Zurich,
June 2002.
[18] B. Pﬁtzmann and M. Waidner. Privacy in browser-based
attribute exchange. In Proceeding of the ACM Workshop
on Privacy in the Electronic Society, pages 52–62, Wash-
ington, DC, 2002. ACM Press.
[19] B. Pﬁtzmann and M. Waidner. Token-based web single
signon with enabled clients. Technical Report IBM Re-
search Report RZ 3458, IBM Research Division, 2002.
[20] J. Rouault and T. Wason. Liberty bindings and proﬁles
speciﬁcation, 2003.
[21] M. Slemko. Microsoft passport to trouble, 2001.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:49:07 UTC from IEEE Xplore.  Restrictions apply.