itself [10] or the insecure use of Flash functionality from
Rich-Internet Application developers.
Cross-site Scripting attacks in Web applications [43] have
received a lot of attention over the last years and there exists
a wide range of research on detecting injected JavaScript and
protecting the user from it [23, 40, 30, 39] as well as many
initiatives that try to educate developers about this issue [31,
11]. The sheer volume of XSS attacks has even caused
mainstream browsers like Microsoft Internet Explorer 8 and
Google Chrome to add XSS-detection mechanisms in an at-
tempt to stop attacks against the browsing user, even if the
visited Web application isn’t actively protecting itself [8, 33].
The problem of performing Cross-site Scripting attacks
through insecure Flash API methods was ﬁrst highlighted by
Jagdale [17] who provided examples of insecure ActionScript
code and reported that out of the ﬁrst 200 SWF ﬁles that
Google gave as a result to the search query “filetype:
swf inurl:clickTag”, 120 were vulnerable. Jagdale also
showed that many tools that automatically generated SWFs
were, at the time, generating applications vulnerable to XSS
attacks, including tools by Adobe itself. Bailey [6] veriﬁed
the earlier ﬁndings of Jagdale and gave examples of high-
proﬁle websites hosting SWFs vulnerable to Remote File
Inclusion attacks (RFI) that could be leveraged to perform,
among others, XSS attacks.
SWFScan [15] is a tool that decompiles a Flash application
and performs static analysis to detect possible vulnerabili-
ties. SWFScan searches a decompiled Flash application for
hardcoded URLs, passwords, insecure cross-domain permis-
sions and coding practices that may lead to XSS. SWFIn-
truder [36] is a user-guided semi-automatic tool which tests
for XSS vulnerabilities in Flash applications.
The important diﬀerence that separates FlashOver from
earlier work is that earlier work depended either on the man-
ual or semi-automatic analysis of SWF ﬁles. Contrastingly,
FlashOver is the ﬁrst system that is able to discover “zero-
day” vulnerabilities in a completely automatic fashion with-
out relying on naming conventions of commonly vulnera-
ble variables or user guidance. While FlashOver, due to
its incomplete static analysis, may miss some vulnerabilities
(false-negatives), it produces no false-positives since any re-
ported vulnerability could only have been reported because
that vulnerability was exploited.
Another problem that has attracted attention from the se-
curity community is the existence of insecure cross-domain
Flash policies. The Flash plugin is able to conduct Cross-
Domain requests in a way that violates the Same-Origin
policy that exists in JavaScript. In order to overcome this
problem, any website that wants to be contacted through
Flash, must opt-in by placing a cross-domain policy ﬁle in
its root directory that speciﬁes which domains can be ac-
cessed and in what ways. Three recent independent studies
[25, 20, 26] all discovered that a great number of websites
deploy insecure cross-domain policies in a way that allows
their users to fall victims to impersonation attacks, simply
by browsing to a malicious website.
An interesting observation is that over the last few years,
many researchers have shifted their focus and have designed
and implemented a number of blackbox and whitebox sys-
tems that, like FlashOver, attempt to automatically detect
vulnerabilities in Web applications. These systems are usu-
ally less precise than human analysts but can process data
much faster and can track dependencies among hundreds of
ﬁles. Balduzzi et al. [7] presented a system that automati-
cally discovers clickjacking attacks through an instrumented
Firefox browser and a series of plugins that detect the over-
lay of many objects at speciﬁcs coordinates within a Web
page. NoTamper, by Bisht et al. [9], detects vulnerabili-
ties that would allow a user to successfully perform HTTP
parameter-tampering. Ford et al. [14] propose OdoSwiﬀ, a
system to detect deliberately malicious Flash ads through a
combination of static and dynamic analysis.
Jovanovic et al. [22], Xie et al. [42] and Wassermann et
al. [41] use static analysis on a Web page’s source code in an
eﬀort to identify potential ﬂaws that could lead to XSS, SQL
injections and command injection attacks. Sun et al. [38] use
static analysis to infer the intended access-control of Web
applications and use their models to detect access control
errors.
8. CONCLUSION
The constant innovation in the World Wide Web has al-
lowed developers to use more and more the browser as the
platform of choice for delivering content-rich applications to
users. In this picture, the Flash platform by Adobe plays a
very important role and is widely used in modern websites.
However, since Adobe is a Web technology, it is also part
of the modern attack surface where the targets are now the
users and their browsers.
In this paper, we analyzed the
implications of making the wrong assumptions in the Flash
platform and we presented FlashOver, the ﬁrst fully auto-
mated discovery system for XSS attacks, speciﬁc to Flash.
FlashOver uses a combination of static and dynamic anal-
ysis to identify vulnerabilities in real-life Flash objects and
using our system, we discovered that a signiﬁcant number
of high-valued websites host Flash applications that are vul-
nerable to Cross-Site Scripting. These results attest towards
the importance of this attack vector and we hope that our
work will help raise awareness of insecure coding practices
in the community of Rich Internet Application developers.
Acknowledgments: We would like to thank our shep-
herd, Dieter Gollmann, and the anonymous reviewers for
their insightful comments that helped to greatly improve
the presentation of this paper. This research is partially
funded by the Interuniversity Attraction Poles Programme
Belgian State, Belgian Science Policy, the IBBT, the Re-
search Fund K.U.Leuven, the B-CCENTRE and the EU-
funded FP7 projects NESSoS and WebSand.
9. REFERENCES
[1] Adobe. About naming variables.
http://help.adobe.com/en_US/AS2LCR/Flash_10.0/
help.html?content=00000047.html.
[2] Adobe. ActionScript 3.0 - Controlling access to scripts
in a host web page.
http://livedocs.adobe.com/flex/3/html/help.
html?content=05B_Security_14.html.
[3] Adobe. Creating more secure SWF web applications.
https://www.adobe.com/devnet/flashplayer/
articles/secure_swf_apps.html.
[4] Flash Player | Adobe Flash Player 11 | Overview.
http://www.adobe.com/products/flashplayer.html.
[5] Alexa - Top Internet Sites.
http://www.alexa.com/topsites.
[6] M. Bailey. Neat, new, and ridiculous ﬂash hacks. In
BlackHat DC, 2010.
[7] M. Balduzzi, M. Egele, E. Kirda, D. Balzarotti, and
C. Kruegel. A solution for the automated detection of
clickjacking attacks. In Proceedings of the 5th ACM
Symposium on Information, Computer and
Communications Security, ASIACCS ’10, pages
135–144, 2010.
[8] A. Barth. Chromium Blog: Security in Depth: New
Security Features.
http://blog.chromium.org/2010/01/
security-in-depth-new-security-features.html.
[9] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and
V. N. Venkatakrishnan. Notamper: automatic
blackbox detection of parameter tampering
opportunities in web applications. In Proceedings of
the 17th ACM conference on Computer and
communications security, CCS ’10, pages 607–618,
New York, NY, USA, 2010. ACM.
[10] D. Blazakis. Interpreter exploitation. In Proceedings of
the 4th Usenix Workshop on Oﬀensive Technologies
(WOOT), 2010.
[11] W. A. S. Consortium. Web Hacking Incident
Database. http://projects.webappsec.org/
Web-Hacking-Incident-Database.
[12] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda.
Defending browsers against drive-by downloads:
Mitigating heap-spraying code injection attacks. In
Proceedings of the 6th International Conference on
Detection of Intrusions and Malware, and
Vulnerability Assessment, DIMVA ’09, pages 88–106,
Berlin, Heidelberg, 2009. Springer-Verlag.
[13] Pc penetration | statistics | adobe ﬂash platform
runtimes. http://www.adobe.com/products/
flashplatformruntimes/statistics.html.
[14] S. Ford, M. Cova, C. Kruegel, and G. Vigna.
Analyzing and detecting malicious ﬂash
advertisements. In Proceedings of the 2009 Annual
Computer Security Applications Conference, ACSAC
’09, pages 363–372, Washington, DC, USA, 2009.
IEEE Computer Society.
[15] Hewlett-Packard Development Company. SWFScan.
http://h30499.www3.hp.com/t5/
Following-the-White-Rabbit/
SWFScan-FREE-Flash-decompiler/bc-p/5442703?
jumpid=reg_r1002_usen.
[16] HTML5.
http://dev.w3.org/html5/spec/Overview.html.
[17] P. Jagdale. Blinded by ﬂash: Widespread security risks
ﬂash developers donˆa ˘A´Zt see. In BlackHat DC, 2009.
[18] M. Jakobsson, P. Finn, and N. Johnson. Why and
How to Perform Fraud Experiments. Security &
Privacy, IEEE, 6(2):66–68, March-April 2008.
[19] M. Jakobsson and J. Ratkiewicz. Designing ethical
phishing experiments: a study of (ROT13) rOnl query
features. In 15th International Conference on World
Wide Web (WWW), 2006.
[20] D. Jang, A. Venkataraman, G. M. Swaka, and
H. Shacham. Analyzing the Cross-domain Policies of
Flash Applications. In Proceedings of the 5th
Workshop on Web 2.0 Security and Privacy (W2SP),
2011.
[21] JoMo-kun. m0j0.j0j0 Guide to IIS Hacking.
http://www.foofus.net/~jmk/iis.html.
[22] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A
static analysis tool for detecting web application
vulnerabilities (short paper). In Proceedings of the
IEEE Symposium on Security and Privacy, pages
258–263, 2006.
[23] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic.
Noxes: A Client-Side Solution for Mitigating Cross
Site Scripting Attacks. In Security Track of the 21st
ACM Symposium on Applied Computing (SAC 2006),
April 2006.
[24] I. Kogan. no|wrap.be - ﬂare.
http://www.nowrap.de/flare.html.
[25] G. Kontaxis, D. Antoniades, I. Polakis, and E. P.
Markatos. An empirical study on the security of
cross-domain policies in rich internet applications. In
Proceedings of the 4th European Workshop on Systems
Security (EUROSEC), 2011.
[26] S. Lekies, M. Johns, and W. Tighzert. The state of the
cross-domain nation. In Proceedings of the 5th
Workshop on Web 2.0 Security and Privacy (W2SP),
2011.
[27] Microsoft Silverlight.
http://www.microsoft.com/silverlight/.
[28] Microsoft. Security in Silverlight.
http://msdn.microsoft.com/en-us/library/
cc972657(v=vs.95).aspx.
[29] N. Nikiforakis, M. Balduzzi, S. Van Acker, W. Joosen,
and D. Balzarotti. Exposing the lack of privacy in ﬁle
hosting services. In Proceedings of the 4th USENIX
conference on Large-scale exploits and emergent
threats, LEET’11, Berkeley, CA, USA, 2011. USENIX
Association.
[30] N. Nikiforakis, W. Meert, Y. Younan, M. Johns, and
W. Joosen. SessionShield: Lightweight Protection
against Session Hijacking. In Proceedings of the 3rd
International Symposium on Engineering Secure
Software and Systems (ESSoS), 2011.
[31] OWASP Top 10 Web Application Security Risks.
http://www.owasp.org/index.php/Category:
OWASP_Top_Ten_Project.
[32] Rich internet application (ria) market share.
http://www.statowl.com/custom_ria_market_
penetration.php.
[33] D. Ross. Ie8 security part iv: The xss ﬁlter.
http://blogs.msdn.com/b/ie/archive/2008/07/02/
ie8-security-part-iv-the-xss-filter.aspx.
[34] C. Shiﬂett. Cross-Site Request Forgeries.
http://shiflett.org/articles/
cross-site-request-forgeries.
[35] Sothink swf decompiler. http:
//www.sothink.com/product/flashdecompiler/.
[36] Stefano Di Paola. SWFIntruder.
http://code.google.com/p/swfintruder/.
[37] C. Stoll. The internet? bah!
http://www.thedailybeast.com/newsweek/1995/02/
26/the-internet-bah.html, 1995.
[38] F. Sun, L. Xu, , and Z. Su. Static detection of access
control vulnerabilities in web applications. In
Proceedings of the 20th Usenix Security Symposium,
2011.
[39] M. Van Gundy and H. Chen. Noncespaces: Using
Randomization to Enforce Information Flow Tracking
and Thwart Cross-Site Scripting Attacks. In
Proceedings of the 16th Network and Distributed
System Security Symposium (NDSS). The Internet
Society, Feb. 2009.
[40] P. Vogt, F. Nentwich, N. Jovanovic, C. Kruegel,
E. Kirda, and G. Vigna. Cross Site Scripting
Prevention with Dynamic Data Tainting and Static
Analysis. In Proceedings of the 14th Annual Network
and Distributed System Security Symposium (NDSS
’07), 2007.
[41] G. Wassermann and Z. Su. Sound and precise analysis
of web applications for injection vulnerabilities. In
Proceedings of the 2007 ACM SIGPLAN conference
on Programming language design and implementation,
PLDI ’07, pages 32–41, New York, NY, USA, 2007.
ACM.
[42] Y. Xie and A. Aiken. Static detection of security
vulnerabilities in scripting languages. In Proceedings of
the 15th conference on USENIX Security Symposium -
Volume 15, Berkeley, CA, USA, 2006. USENIX
Association.
[43] The Cross-site Scripting FAQ.
http://www.cgisecurity.com/xss-faq.html.