12. 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，
Collections.sort 会抛 IllegalArgumentException 异常。 
说明：三个条件如下 
 1） x，y 的比较结果和 y，x 的比较结果相反。 
 2） x>y，y>z，则 x>z。 
 3） x=y，则 x，z 比较结果和 y，z 比较结果相同。 
反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中
 可能会出现异常。 
new Comparator() {           
@Override          
public int compare(Student o1, Student o2) {              
return o1.getId() > o2.getId() ? 1 : -1;          
}      
};  
13. 【推荐】集合泛型定义时，在 JDK7 及以上，使用 diamond 语法或全省略。 
说明：菱形泛型，即 diamond，直接使用<>来指代前边已经指定的类型。 
正例： 
// diamond 方式，即<> 
HashMap userCache = new HashMap<>(16); 
// 全省略方式 
ArrayList users = new ArrayList(10);      
14. 【推荐】集合初始化时，指定集合初始值大小。 
说明：HashMap 使用 HashMap(int initialCapacity) 初始化。 
正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loader factor）默认
为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。 
反例：HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被
迫扩大，resize 需要重建 hash 表，严重影响性能。 
15. 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。 
说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应
的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，
使用 Map.forEach 方法。 
Java 开发手册 
  14/44 
正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合
对象；entrySet()返回的是 K-V 值组合集合。 
16. 【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格： 
集合类 
Key 
Value 
Super 
说明 
Hashtable 
不允许为 null 
不允许为 null 
Dictionary 
线程安全 
ConcurrentHashMap 
不允许为 null 
不允许为 null 
AbstractMap 
锁分段技术（JDK8:CAS） 
TreeMap 
不允许为 null 
允许为 null 
AbstractMap 
线程不安全 
HashMap 
允许为 null 
允许为 null 
AbstractMap 
线程不安全 
反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储
null 值时会抛出 NPE 异常。 
17. 【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳
定性(unorder)带来的负面影响。 
说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定
的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是 order/sort。 
18. 【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的
contains 方法进行遍历、对比、去重操作。 
(六) 并发处理 
1. 【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。 
说明：资源驱动类、工具类、单例工厂类都需要注意。 
2. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。 
正例：自定义线程工厂，并且根据外部特征进行分组，比如机房信息。 
public class UserThreadFactory implements ThreadFactory { 
private final String namePrefix; 
private final AtomicInteger nextId = new AtomicInteger(1); 
// 定义线程组名称，在 jstack 问题排查时，非常有帮助 
UserThreadFactory(String whatFeaturOfGroup) { 
    namePrefix = "From UserThreadFactory's " + whatFeaturOfGroup + "-Worker-"; 
} 
@Override 
public Thread newThread(Runnable task) { 
    String name = namePrefix + nextId.getAndIncrement(); 
    Thread thread = new Thread(null, task, name, 0, false); 
Java 开发手册 
  15/44 
    System.out.println(thread.getName()); 
    return thread; 
} 
} 
3. 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。 
说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问
题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。 
4. 【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这
样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 
说明：Executors 返回的线程池对象的弊端如下： 
1） FixedThreadPool 和 SingleThreadPool： 
  允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 
2） CachedThreadPool： 
  允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。 
5. 【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为
static，必须加锁，或者使用 DateUtils 工具类。 
正例：注意线程安全，使用 DateUtils。亦推荐如下处理： 
private static final ThreadLocal df = new ThreadLocal() {       
 @Override        
protected DateFormat initialValue() {            
return new SimpleDateFormat("yyyy-MM-dd");        
}    
};    
说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，
DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strong immutable 
thread-safe。  
6. 【强制】必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用，
如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。
尽量在代理中使用 try-finally 块进行回收。 
正例： 
objectThreadLocal.set(userInfo); 
try { 
    // ... 
} finally { 
    objectThreadLocal.remove(); 
} 
7. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；
能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。 
说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。 
Java 开发手册 
  16/44 
8. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会
造成死锁。 
说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是
A、B、C，否则可能出现死锁。 
9. 【强制】在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代
码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。 
说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功
获取锁。 
说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，
unlock 对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出
IllegalMonitorStateException 异常。 
说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。 
正例： 
Lock lock = new XxxLock(); 
// ... 
lock.lock(); 
try { 
    doSomething(); 
    doOthers(); 
} finally { 
    lock.unlock(); 
} 
反例： 
Lock lock = new XxxLock(); 
// ... 
try { 
    // 如果此处抛出异常，则直接执行 finally 代码块 
    doSomething(); 
    // 无论加锁是否成功，finally 代码块都会执行 
    lock.lock(); 
    doOthers(); 
} finally { 
    lock.unlock(); 
} 
10. 【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是
否持有锁。锁的释放规则与锁的阻塞等待方式相同。 
说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果
当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。 
正例： 
Lock lock = new XxxLock(); 
// ... 
boolean isLocked = lock.tryLock(); 
if (isLocked) { 
    try { 
        doSomething(); 
Java 开发手册 
  17/44 
        doOthers(); 
    } finally { 
        lock.unlock(); 
    } 
} 
11. 【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存
加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。 
说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于
3 次。 