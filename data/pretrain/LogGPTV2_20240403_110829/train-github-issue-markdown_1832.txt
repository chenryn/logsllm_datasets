Although Deno is "headless," this does not render image or canvas processing irrelevant. Many developers, including myself, frequently use images as data, such as zxy tiles for map data, where elevation data is a common application. Often, the results of these computations are exported by rendering the data onto a canvas and then downloading it as an image.

While there are existing libraries like `deno-canvas` and `skia_canvas` available (links provided below), both have their share of issues:

- [deno-canvas](https://github.com/DjDeveloperr/deno-canvas)
- [skia_canvas](https://github.com/DjDeveloperr/skia_canvas)

Specifically, the following issues have been reported:
- [#18919](...), which continues in [DjDeveloperr/deno-canvas#34](...)
- [#19247](...)

In my experience, I used these libraries to test 23 agent-based models with Deno, replacing a previously fragile Puppeteer solution that ran the models in a browser. The runtime improved significantly, dropping from 3 minutes to just 6 seconds by utilizing 23 Deno workers.

Despite this, the current state of canvas and image libraries in Deno is still limiting. Having the same API for canvas and image processing in both the browser and Deno would greatly enhance the workflow and interoperability. 

I propose that Deno adopt the browser's canvas and image APIs, specifically implementing `createCanvas` and `ImageBitmap`. This alignment would streamline development and improve the robustness of "image as data" workflows.