## pages_per_range的优化  
前面已经讲了，BRIN索引IO方面的成本分为两块，  
1、扫描BRIN索引本身的块。  
2、扫描HEAP表的块。  
两者加起来就是IO方面的成本。其他的就是CPU过滤每一条记录的CPU运算成本。  
### BRIN索引扫描的IO成本估算  
一、单个条件的查询，命中多少个HEAP数据块由两个因素决定：   
1、单个条件值占用了多少个数据块，例如bid=1这个条件，有100万条记录，经过前面提到的数据规整，占用到了5000个数据块。  
2、pages_per_range的精度，例如精度为512。也就是说至少扫描512个HEAP块。  
以上两者取最大值。那么一次查询需要查询5000个HEAP数据块。  
二、单个条件的查询，需要扫描多少个BRIN索引数据块则由索引本身的大小决定。  
pages_per_range=512时，BRIN索引的大小为3MB左右。  
三、单个条件的查询，BRIN索引扫描的IO成本，需要扫描3MB+5000个HEAP BLOCK。  
四、多个条件的估算方法类似。  
例如3个条件，那么需要扫描3倍的（HEAP BLOCK+BRIN IDX BLOCK）成本。  
所以该怎么选择BRIN索引精度参数pages_per_range呢？  
### pages_per_range的计算方法  
给一个衡量标准，10个条件，要求秒级内返回。  
如何计算10个条件的BLOCK成本：  
1、评估一个等值条件占用多少条记录(A)：  
```  
1、pg_stats.n_distinct >= 1 时  
(pg_class.reltuples/pg_stats.n_distinct)  
2、pg_stats.n_distinct < 1 时  
(pg_class.reltuples*pg_stats.n_distinct)/pg_class.reltuples  
3、pg_stats.n_distinct = -1 时  
1  
```  
2、评估相关性(B)：  
```  
B = abs(pg_stats.correlation)  
```  
3、评估一个等值条件占用多少个HEAP块(C)。  
```  
C = A / B  
```  
4、评估pages_per_range=1时，BRIN索引占用多少个数据块（D）。  
```  
D = pg_class.relpages/(pg_class.reltuples/pg_class.relpages)  
```  
5、评估pages_per_range=n时，BRIN索引占用多少个数据块（E）  
```  
E = D / n   
```  
6、评估pages_per_range=n时，10个查询条件需要扫描多少个BRIN索引块(F)。  
```  
F = 10 * E  
```  
7、评估pages_per_range=n时，10个查询条件需要扫描多少个HEAP块(G)。  
```  
G = 10 * C  
```  
8、评估pages_per_range=n时，10个查询条件需要扫描多少个HEAP块(H)。  
```  
H = F + G  
```  
有了这个公式，你就可以计算到底设置多大的pages_per_range，10个查询条件可以秒级以内返回了。  
## 一万亿体量设计    
周统计数据，平时的体量是千亿，搞活动万亿。    
前面我们测试的是单表64亿，查询性能完全没有问题（毫秒级返回）。    
那么万亿级别怎么搞呢？实际上按店铺、商品ID分区，用分区表即可解决。    
例如HASH分区。    
按店铺hash分成64个区，每个区1亿。    
按店铺hash分成640个区，每个区2 - 20亿。    
已测64亿单表性能完全不是问题。你还会担心几亿的小表吗？    
PostgreSQL分区使用方法介绍：    
https://github.com/postgrespro/pg_pathman    
[《PostgreSQL 9.5+ 高效分区表实现 - pg_pathman》](../201610/20161024_01.md)      
[《PostgreSQL 10.0 preview 功能增强 - 内置分区表》](../201612/20161215_01.md)      
## 云端产品    
[阿里云 RDS PostgreSQL](https://www.aliyun.com/product/rds/postgresql)                  
[阿里云 HybridDB for PostgreSQL](https://www.aliyun.com/product/gpdb)             
## 小结    
本文用到的技术点如下：    
1、BRIN，帮助用户0成本，高效过滤数据。    
64亿单表，任意店铺条件圈人毫秒级响应。    
2、数据规整。提高字段线性相关性，一劳永逸。让BRIN的数据边界近乎完美。    
数据规则以及提速的方法：   
2\.1 导入时就按目标顺序写入。  
2\.2 PG 11 并行排序。   
2\.3 分区表并行排序。   
3、分区+数据规整，万亿级别时使用的数据优化方法。    
4、HDB 规整 + metascan ，metascan与BRIN类似，是阿里云在HDB for PostgreSQL这个产品上，加的一个内核特性。原始的Greenplum是没有这个特性的。    
5、并行APPEND SCAN，拆成多个分区表后，PostgreSQL通过append scan并行，可以并行扫描分区表。提升整体的性能。    
6、多字段索引通过bitmapAnd, bitmapOr合并，提高数据过滤精度，降低扫描量，提升查询性能。    
## 参考    
[《视觉挖掘与PostGIS空间数据库的完美邂逅 - 广告营销\圈人》](../201703/20170328_04.md)      
[《PostgreSQL on ECS多云盘的部署、快照备份和恢复》](../201708/20170812_01.md)      
[《PostgreSQL 10.0 preview sharding增强 - 支持Append节点并行》](../201703/20170312_11.md)      
[《恭迎万亿级营销(圈人)潇洒的迈入毫秒时代 - 万亿user_tags级实时推荐系统数据库设计》](../201612/20161225_01.md)      
[《PostgreSQL 9.5+ 高效分区表实现 - pg_pathman》](../201610/20161024_01.md)      
[《PostgreSQL 10.0 preview 功能增强 - 内置分区表》](../201612/20161215_01.md)      
[《PostgreSQL bitmapAnd, bitmapOr, bitmap index scan, bitmap heap scan》](../201702/20170221_02.md)      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")