修改)。
Card
Morito
Add
cad
grid
Asse
MONOOO
PRT0002
ICNDOO
MONOO
Room
000
3101
图2-3CMDBuild操作界面
BukngA-Foor3-Room
0
8243WCyd
AL1715
plon
第2章利用Facter和Django快速构建CMDB23
0x
KR5766
Search
e
Pnt
A1716
场
wliams.bhn
Viso
Barba
Smit
Jame
---
## Page 40
2.3.1什么是 Puppet
以通用。
率高，如果读者使用的是 Ansible 或其他配置管理工具来做管理，本文中所介绍的方法也可
我使用的是Puppet来管理所有的机器，因此使用Facts 最方便、简单、快捷，成本低而且效
们来看看CMDBuild操作界面，如图2-4所示。
24
通常定义：Puppet 是一个跨平台的集中化配置管理系统，它使用自身的描述语言，可管
我在本文中使用配置管理工具 Puppet 的 Facts 来进行信息收集，
（3）通过配置管理工具收集，比Puppet、SaltStack、Ansible 等。
（2）通过监控系统收集，比如 Zabbix、Nagios、IPMI等。
（1）通过一些Agent客户端收集信息，然后注册到中心服务器数据库。
本节所要讲的不是重复造轮子，而是如何有效地利用开源工具构建自己的平台。首先我
口体验：增加联动性，打通各个流程。
运维前线：一线运维专家的运维方法、技巧与实践
从图2-4中可以看出，CMDB的信息收集可以是多种多样、共融共存的：
口提升：提升个人开发水平。
口可控：自行控制。
口需求：满足公司内部的各种需求。
Puppet 及Facter 介绍
slaveDB
Rync
Read
page
django
CMDB
Master
DB
-Write
图2-4CMDBuild操作界面
Write
Server
Write
Write
Write
Write
Write
Cmdb_agent
Puppet agent
最主要的原因是，目前
ZabbixAPI
List file
TPMI
---
## Page 41
小及其他的系统配置选项。这些系统配置选项正是CMDB所需要的基础核心数据。
2.3.4
时候进行收集并传递给Master，同时被自动创建为可以被 Puppet使用的变量。
IP地址、操作系统、内存大小及其他的系统配置选项，这些 fact 信息在Puppet Agent 运行的
代码中是以变量的形式出现的。它返回的是每个Agent 的 fact 信息，这些信息包括主机名、
2.3.3什么是Facter
Yum等。
模块，例如 Mysql、Django、Java、PHP、Nginx、Apche、Openstack、SSH、Tomcat、Jboss、
息和使用方法可以参考https://docs.puppetlabs.com/references/latest/type.html。
Exec、Service、Group、Host、Router、Yumrepo、User、Cron、SSHKey等，更多的相关信
FreeBSD、OpenBSD、Windows，等等。
有的客户端，主流的有RedHat、CentOS、Gentoo、Debian、Ubuntu、Solaris、SuSe、Mac OS X、
2.3.2
计的目标就是简化对这些资源的安装、配置、管理，以及妥善处理资源之间的依赖关系。
理配置文件、用户、Cron、软件包、系统服务等，Puppet把这些统称为“资源”。Puppet设
如下。
我们先来看看Facter收集的系统数据，下面将列举一些常用的系统数据，具体信息
Facter 最大的作用就是收集服务器系统信息，包括主机名、IP地址、操作系统、内存大
Facter 是 Puppet 跨平台的系统性能分析库。它能发现并报告每个节点的信息，在 Puppet
第三方模块众多：目前Puppet 的第三方模块众多，基本包含了我们所能使用的全部软件
（1）Facter 获取fqdn 信息，在Facter 中 fqdn=hostname+ domain:
支持的资源众多：目前Puppet支持的资源有很多，其中常用的包括 File、Package、
Puppet 能够帮助系统管理员方便、快速地管理所有机器，目前 Puppet 已经能够支持所
00:1A:4A:25:E2:10
$factermacaddress
（3）Facter获取MAC地址：
10.20.122.100
$facter ipaddress
（2）Facter获取IP地址：
puppet.domain.com
$facter fqdn
Facter的特点
为什么是Puppet
第2章利用Facter和Django快速构建CMDB25
---
## Page 42
的变量可以按使用频率简单划分为常用类型和不常用类型，具体如图2-5所示。
可以在官方网站http://docs.puppetlabs.com/facter/latest/core_facts.html中查看。Facter 所支持
2.3.5
26运维前线：一线运维专家的运维方法、技巧与实践
常用类型
Facter 目前的最新版本为3.4.1（截至本章写作时)，支持的变量有131个，所支持的变量
$facter uptime
（8）Facter获取机器运行时间：
$ facter processors
（7）Facter获取CPU信息：
Centos
$facter operatingsystem
（6）Facter 获取操作系统：
1.83G
$factermemorysize
（5）Facter获取内存大小：
$facter memoryfree
（4）Facter获取空闲内存大小：
P9xxx（Penryn Class Core2)"],
"models"=>["Intel Core 2 Duo P9xxx（Penryn Class Core 2)"
1.61G
Facter变量
day
memory
ipaddress
puppetversion
operatingsystem
swap
path
ps
kerner
process
uptime
fgdn
图2-5Facter变量分类图
"physicalcount"=>2,
lsvirtual
timezone
hard*
arp
es2*
vlans
board*
ruby*
"count"=>2}
不常用类型
"Intel Core 2 Duo
osfamily
Isbdist*
summary
xendomains
facterversion
domain
interfaces
selinux
augeasversion
type
---
## Page 43
fact 的数据处理)，实例程序 facter_message.py的内容如下：
息，下面的这个程序对结果不会做过多的处理，在后面进行CMDB 项目的时候将详细讲解
来看看如何通过Python 程序来获取Facts 信息（注意：下面的程序是查看当前机器的fact 信
载，并参考https://docs.puppetlabs.com/puppet/latest/reference/install_pre.html进行安装，接下
2.4.2
库信息即可，如图2-6所示。
我们只需要处理 Puppet Server 收集的 Agent Facts 信息、人库，然后通过 Django 来读取数据
2.4.1
2.4
首先要确定系统中已经安装了Puppet，如果没有，可以从http://yum.puppetlabs.com/下
通过2.3节的学习可以知道Facts可以获取主机的系统信息，并以K-V形式进行存储，
show_list=[('fqdn'，u'主机名'），
#定义要打印的列表
command='facter
#定义一个变量
import commands
#导入模块
#!/usr/bin/python
mportre
_licence_
authors
encoding: utf-8
如何利用Python获取Facts
date_
version
利用Python脚本获取Facts
工作原理
(uptime，u运行时间，），
('domain'， u'域名'），
handle
Python
'GPLlicence'
2015-08-1914:34:44'
['LiuYu']
agent
Puppet
1.0
图2-6Facts信息获取流程图
第2章利用Facter和Django快速构建CMDB
agent
Puppet
master
Puppet
DB
agent
Puppet
Django
User
27
---
## Page 44
2.5.1Django 介绍
2.5
28
运维前线：一线运维专家的运维方法、技巧与实践
Django 是一个免费的、开源的 Web 框架，由 Python 语言编写，由于其是在一个快节
通过如上的简单代码就可以将Facts 的信息进行集中处理。
使用Django快速构建CMDB系统
磁盘：sr0,vda,vdb,vdc
CPU
MAC
IP:10.20.122.111
S
下面我们来运行 facter_message.py程序，打印结果：
#通过函数处理名称，然后打印结果
内存
def handle_command_message(command):
核版本：2.6.32-431.1.2.0.1.e16.x86_64
统：CentoS
Sy
定义一个处理命令的函数
:{"count"=>1, "models"=>["QEMU Virtual CPU version 1.1.2"],
MB:996.48
:00:22:E2:5E:4D:10
if result:
result = handle_command_message(command)
result_dict={}
else:
if status ==0:
status,
for f_k, f_s in show_list:
for line in result.strip().split('\n'):
return
return content
if f_k in result_dict:
if re.findall('=>',
content =commands.getstatusoutput(command)
('blockdevices'，u’磁盘'）,
('kernelrelease',
('operatingsystem',
'processors',
'memorysize_mb',
'macaddress',
print f_s,
result_dict[key.strip()]= value.strip()
key,value=line.split('=>'，1)
_main_':
':',result_dict[f_k]
u'CPU')
u'MAC')
u'内存MB'），
u'内核版本')，
line):
---