### Set of Regular Expressions and TruffleHog Analysis

TruffleHog, a tool that employs a set of regular expressions for secret detection, is similar to our work. However, TruffleHog has a more limited set of regular expressions and does not validate the results to avoid false positives. Given that users may rely on tools like TruffleHog, we evaluated its performance by running all detected secrets through its algorithm.

Our results show that TruffleHog is largely ineffective at detecting secrets. Its algorithm only detected 25.236% of the secrets in our Search dataset and 29.39% in the BigQuery dataset. All of these detected secrets were identified using entropy, while only a fraction were double-detected by regular expressions. This discrepancy is concerning, as the TruffleHog developers are deprecating entropy detection in favor of regular expression detection [59]. If this change had been implemented, only 19.263% of secrets from the Search dataset and 22.29% from the BigQuery dataset would have been detected. The problem stems from a set of weak regular expressions, which could be improved by incorporating our techniques. While TruffleHog does detect some secrets, it does not provide strong enough protection. Developers using such tools may believe they are safe but may inadvertently push secrets. Unfortunately, because TruffleHog runs locally, we were unable to measure its usage rate.

### Google Client Secret Files

Google provides developers with a `client_secret_*.json` file, where the asterisk is replaced with a unique identifier. Google recommends downloading this file for using OAuth credentials instead of embedding them directly in code, emphasizing that the file should be stored outside the source tree [30]. To evaluate whether developers adhere to this recommendation, we analyzed files containing Google OAuth IDs that matched the `client_secret_*.json` pattern.

Ideally, these files should not exist on GitHub; however, we identified 2,155 such files in the Search dataset and 388 in the BigQuery dataset. These accounted for 5.027% and 2.246% of all files containing Google OAuth IDs in the respective datasets. The leakage of these files is particularly concerning, as they contain other secret information, such as the OAuth Secret, in an easily parseable format. Although this file mismanagement is not the primary source of leakage, it is a significant factor.

### Case Studies

#### Secrets in .gitignore Files
The `.gitignore` file is intended to allow developers to specify files that should not be committed, including those containing secrets. Despite this, many developers do not use or fully understand this feature. We collected `.gitignore` files over a three-week period using the Search API. Our assumption was that these files would not contain secrets, as they should only list path references. However, we identified 58 additional secrets. While this number is small compared to the full dataset, it indicates that some developers commit secrets due to misunderstandings of features like `.gitignore`.

#### YouTube Copyright Infringement
Our data collection uncovered a case where a GitHub user appeared to be conducting copyright infringement. This user hosted repositories with source code for websites that pull videos from YouTube and rehost them. We found 564 Google API keys in these repositories, along with indications that they were used to bypass rate limits. The high number of keys suggests they may have been obtained fraudulently, though we cannot confirm this. This example highlights the potential misuse of leaked secrets by malicious actors.

#### High-Value Targets
Even experienced developers can leak secrets. For instance, we found AWS credentials for a major website used by millions of college applicants in the United States, possibly leaked by a contractor. We also discovered AWS credentials for a major government agency in a Western European country. We verified the validity of the account and the specific developer who committed the secrets, who claims to have nearly 10 years of development experience. These examples support our findings in Section VII-A that developer inexperience is not a strong predictor of leaks.

#### Rewriting History Does Not Protect Secrets
Adversaries monitoring commits in real time can discover leaked secrets, even if they are naively removed. We found that even if commit histories are rewritten, secrets can still be recovered. In the European case study, we recovered the full contents of deleted commits from GitHub using only the commit’s SHA-1 ID. We experimentally confirmed this for both of GitHub’s recommended methods for removing sensitive information: `git filter-branch` and the BFG tool [50]. The challenge lies in acquiring the commit hash, which is hidden from GitHub’s UI and Commits API. However, we found that these hidden commit hashes could be recovered with minimal effort via the Events API [20]. Historical data from this API is available through the GHTorrent Project [31], indicating that the consequences of even rapidly detected secret disclosure are severe and difficult to mitigate short of deleting a repository or reissuing credentials.

### Mitigations

We have shown that an attacker with minimal resources could compromise many GitHub users by stealing leaked keys. In this section, we discuss how current mitigations fall short and what new mitigations might be successful. Through our results, we addressed three potential mitigations and demonstrated their ineffectiveness.

1. **Pre-Commit Tools**: Secret leakage could be stopped prior to commit using tools like TruffleHog [59]. However, in Section VII-D, we found that TruffleHog is only approximately 25% effective.
2. **Multiple Secret Values**: Many API platforms require multiple secret values, potentially inhibiting attackers. However, Section V-D showed that complementary secrets are often committed in the same file, nullifying this advantage.
3. **Rate Limiting**: GitHub imposes strict rate limits for Search API requests to inhibit large-scale mining. However, Section VI-A demonstrated that this rate limiting can be easily bypassed with a single key.

There is room for improvement in these mitigations. For example, TruffleHog could detect all the secrets we detect if it implements our techniques. Additionally, distinct patterns in many secrets simplify accurate detection, allowing services to monitor and instantly alert developers of compromises. There is evidence that AWS may already do this [3], [9]. While GitHub might consider increasing rate limits, this would still be trivial to bypass with multiple keys and would disproportionately affect legitimate users. Instead, GitHub could extend their security alerts program [34] to scan for secrets and notify developers at commit time. GitHub recently introduced a beta version of Token Scanning [16], [58], which scans repos for tokens and contacts the provider with the token and metadata. The provider can then revoke the token, mitigating the impact of its disclosure. This feature can be improved with our findings, increasing the providers included.

However, these are mitigations that take action late in the secret's lifetime after it has already been exposed. Ultimately, more research is needed on secret and key management for software. Extensive work has been done in this area for users (e.g., passwords and alternative authentication). Two possible approaches to address this earlier in the process are extending Git to handle secrets natively or changing the architecture of libraries to automatically and securely manage secrets for developers.

### Limitations

In this section, we briefly detail the limitations of our experiments. First, we do not have ground truth knowledge that the secrets we discover are exploitable. Though we make every effort to exclude them, some secrets may be non-sensitive, revoked, stale, or invalid. Without actually testing such secrets (which we do not do for reasons discussed in Section IV), it is not possible to have certainty that a secret is exploitable.

Second, we focus only on secrets that we felt could be discovered with a high probability of validity and sensitivity. There are certainly many important services for which we do not detect secrets. Similarly, while GitHub is the largest public code hosting service, there are many other services where secrets may be leaked, including BitBucket or Pastebin. This means that our findings represent a lower bound on the risks of secret leakage through public repositories.

Finally, for some of the APIs we study, we find few leaked keys, as shown in Table II. While we surveyed many public APIs, the relative usage of each API in a project that would be hosted on GitHub will naturally differ. Nevertheless, we discover a large number of keys overall, including keys for every service we chose to investigate.

### Conclusion

GitHub has become the most popular platform for collaborative software editing, yet this collaboration often conflicts with the need for software to use secret information. This conflict creates the potential for public secret leakage. In this paper, we characterize the prevalence of such leakage. By leveraging two complementary detection approaches, we discover hundreds of thousands of API and cryptographic keys leaked at a rate of thousands per day. This work not only demonstrates the scale of this problem but also highlights the potential causes of leakage and discusses the effectiveness of existing mitigations. In doing so, we show that secret leakage via public repositories places developers at risk.

### References

[1] (2018, Mar.) About GitHub. [Online]. Available: https://github.com/about
[2] (2018) Alexa Top Software Sites. [Online]. Available: https://www.alexa.com/topsites/category/Top/Computers/Software
[3] (2018) AWS Labs git-secrets. [Online]. Available: https://github.com/awslabs/git-secrets
[4] (2014, Mar.) AWS Urges Devs To Scrub Secret Keys From GitHub. [Online]. Available: https://developers.slashdot.org/story/14/03/24/0111203/aws-urges-devs-to-scrub-secret-keys-from-github
[5] M. Balduzzi, J. Zaddach, D. Balzarotti, E. Kirda, and S. Loureiro, “A Security Analysis of Amazon’s Elastic Compute Cloud Service,” SAC, 2012.
[6] C. M. Bishop, Pattern Recognition and Machine Learning. Secaucus, NJ, USA: Springer-Verlag New York, Inc., 2006.
[7] T. F. Bissyande, D. Lo, L. Jiang, L. Reveillere, J. Klein, and Y. L. Traon, “Got issues? Who cares about it? A large scale investigation of issue trackers from GitHub,” International Symposium on Software Reliability Engineering, 2013.
[8] (2015, Jan.) Bots Scanning GitHub To Steal Amazon EC2 Keys. [Online]. Available: https://it.slashdot.org/story/15/01/02/2342228/bots-scanning-github-to-steal-amazon-ec2-keys
[9] D. Bourke. (2017, Oct.) Breach Detection at Scale. [Online]. Available: https://developer.atlassian.com/blog/2017/10/project-spacecrab-breach-detection/
[10] J. Cabot, J. L. C. Izquierdo, V. Cosentino, and B. Rolandi, “Exploring the use of labels to categorize issues in Open-Source Software projects,” in 2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER), March 2015, pp. 550–554.
[11] S. Chacon and B. Straub, Pro Git. Apress, 2014.
[12] A. D. Diego, “Automatic extraction of API Keys from Android applications,” Ph.D. dissertation, UNIVERSITÀ DEGLI STUDI DI ROMA ”TOR VERGATA”, 2017.
[13] R. Dyer, H. A. Nguyen, H. Rajan, and T. N. Nguyen, “Boa: A Language and Infrastructure for Analyzing Ultra-Large-Scale Software Repositories,” International Conference on Software Engineering, 2013.
[14] S. Farooqi, F. Zaffar, N. Leontiadis, and Z. Shafiq, “Measuring and Mitigating OAuth Access Token Abuse by Collusion Networks,” in Proceedings of the 2017 Internet Measurement Conference, ser. IMC ’17. New York, NY, USA: ACM, 2017, pp. 355–368.
[15] D. Fett, R. Küsters, and G. Schmitz, “A Comprehensive Formal Security Analysis of OAuth 2.0,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’16. New York, NY, USA: ACM, 2016, pp. 1204–1215. [Online]. Available: http://doi.acm.org/10.1145/2976749.2978385
[16] GitHub. (2018, Oct.) About Token Scanning. [Online]. Available: https://help.github.com/articles/about-token-scanning/
[17] (2018) GitHub API Rate Limiting Documentation. [Online]. Available: https://developer.github.com/v3/#rate-limiting
[18] (2018) GitHub Content API Documentation. [Online]. Available: https://developer.github.com/v3/repos/contents/#get-contents
[19] (2018) GitHub dotfiles. [Online]. Available: https://dotfiles.github.io/
[20] (2018) GitHub Events API Documentation. [Online]. Available: https://developer.github.com/v3/activity/events/
[21] (2013, Jan.) Github Kills Search After Hundreds of Private Keys Exposed. [Online]. Available: https://it.slashdot.org/story/13/01/25/132203/github-kills-search-after-hundreds-of-private-keys-exposed
[22] (2018) GitHub Search API Documentation. [Online]. Available: https://developer.github.com/v3/search/#search-code
[23] (2018) GitHub Search API Rate Limiting Documentation. [Online]. Available: https://developer.github.com/v3/search/#rate-limit
[24] (2018) GitHub Searching Code. [Online]. Available: https://help.github.com/articles/searching-code/
[25] D. Goodin. (2013, Jan.) PSA: Don’t upload your important passwords to GitHub. [Online]. Available: https://arstechnica.com/information-technology/2013/01/psa-dont-upload-your-important-passwords-to-github/
[26] D. Goodin. (2018, Mar.) 750MB worth of passwords and keys found leaking from thousands of servers. [Online]. Available: https://arstechnica.com/information-technology/2018/03/thousands-of-servers-found-leaking-750-mb-worth-of-passwords-and-keys/
[27] (2018, Apr.) Google BigQuery GitHub Data. [Online]. Available: https://console.cloud.google.com/marketplace/details/github/github-repos
[28] (2018) Google BigQuery Public Datasets. [Online]. Available: https://cloud.google.com/bigquery/public-data/
[29] (2018) Google Hacking Database. [Online]. Available: https://www.exploit-db.com/google-hacking-database/
[30] (2018, Jan.) Google Using OAuth 2.0 for Installed Applications. [Online]. Available: https://developers.google.com/api-client-library/python/auth/installed-app
[31] A. Kashcha. (2018) Common Words. [Online]. Available: https://github.com/anvaka/common-words
[32] M. Kumar. (2013, Jan.) Hundreds of SSH Private Keys exposed via GitHub Search. [Online]. Available: https://thehackernews.com/2013/01/hundreds-of-ssh-private-keys-exposed.html
[33] J. Linn, “Privacy Enhancement for Internet Electronic Mail: Part I: Message Encryption and Authentication Procedures,” pp. 1–42, 1993. [Online]. Available: https://tools.ietf.org/html/rfc1421