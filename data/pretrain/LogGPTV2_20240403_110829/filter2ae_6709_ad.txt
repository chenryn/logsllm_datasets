    ffffcc0f`76fed250  00000000 00000000 00000000 00000000
    //flag以及物理页pfn被设置
    kd> p
    srvnet!SrvNetAllocateBufferFromPool+0x1b5:
    fffff806`2280d425 488b4f38        mov     rcx,qword ptr [rdi+38h]
    kd> dt _mdl ffffcc0f`76fed1e0
    nt!_MDL
       +0x000 Next             : (null) 
       +0x008 Size             : 0n88
       +0x00a MdlFlags         : 0n4
       +0x00c AllocationProcessorNumber : 0
       +0x00e Reserved         : 0
       +0x010 Process          : (null) 
       +0x018 MappedSystemVa   : 0xffffcc0f`76fe9050 Void
       +0x020 StartVa          : 0xffffcc0f`76fe9000 Void
       +0x028 ByteCount        : 0x4100
       +0x02c ByteOffset       : 0x50
    kd> dd ffffcc0f`76fed1e0
    ffffcc0f`76fed1e0  00000000 00000000 00040058 00000000
    ffffcc0f`76fed1f0  00000000 00000000 76fe9050 ffffcc0f
    ffffcc0f`76fed200  76fe9000 ffffcc0f 00004100 00000050
    ffffcc0f`76fed210  00041099 00000000 00037d1a 00000000
    ffffcc0f`76fed220  00037d9b 00000000 00039c9c 00000000
    ffffcc0f`76fed230  00037d1d 00000000 00000000 00000000
    ffffcc0f`76fed240  00000000 00000000 00000000 00000000
    ffffcc0f`76fed250  00000000 00000000 00000000 00000000
    //是正确的物理页
    kd> dd ffffcc0f`76fe9000
    ffffcc0f`76fe9000  00000000 00000000 00000000 00000000
    ffffcc0f`76fe9010  76fe9070 ffffcc0f 00000001 00000000
    ffffcc0f`76fe9020  00000001 00000001 76fe9088 ffffcc0f
    ffffcc0f`76fe9030  00000008 00000000 00000000 00000000
    ffffcc0f`76fe9040  00000000 00000000 76fe90f8 ffffcc0f
    ffffcc0f`76fe9050  00000290 00000000 76feb4d8 ffffcc0f
    ffffcc0f`76fe9060  00000238 00000000 0000000c 00000000
    ffffcc0f`76fe9070  00000018 00000001 eb004a11 11d49b1a
    kd> !dd 41099000
    #41099000   00000000 00000000 00000000 00000000
    #41099010   76fe9070 ffffcc0f 00000001 00000000
    #41099020   00000001 00000001 76fe9088 ffffcc0f
    #41099030   00000008 00000000 00000000 00000000
    #41099040   00000000 00000000 76fe90f8 ffffcc0f
    #41099050   00000290 00000000 76feb4d8 ffffcc0f
    #41099060   00000238 00000000 0000000c 00000000
    #41099070   00000018 00000001 eb004a11 11d49b1a
### 物理地址读
根据前面的介绍可知，SRVNET BUFFER HDR结构体中存放了两个MDL结构（Memory Descriptor
List，内存描述符列表）指针，分别位于其0x38和0x50偏移处，MDL维护缓冲区的物理地址信息，以下为某个请求结构的第一个MDL：
    2: kd> dt _mdl poi(rax+38)
    nt!_MDL
       +0x000 Next             : (null) 
       +0x008 Size             : 0n64
       +0x00a MdlFlags         : 0n20484
       +0x00c AllocationProcessorNumber : 0
       +0x00e Reserved         : 0
       +0x010 Process          : (null) 
       +0x018 MappedSystemVa   : 0xffffae8d`0cfe3050 Void
       +0x020 StartVa          : 0xffffae8d`0cfe3000 Void
       +0x028 ByteCount        : 0x1100
       +0x02c ByteOffset       : 0x50
    2: kd> dd poi(rax+38)
    ffffae8d`0cfe41e0  00000000 00000000 50040040 00000000
    ffffae8d`0cfe41f0  00000000 00000000 0cfe3050 ffffae8d
    ffffae8d`0cfe4200  0cfe3000 ffffae8d 00001100 00000050
    ffffae8d`0cfe4210  0004a847 00000000 00006976 00000000
    ffffae8d`0cfe4220  00000000 00000000 00000000 00000000
    ffffae8d`0cfe4230  00040040 00000000 00000000 00000000
    ffffae8d`0cfe4240  00000000 00000000 0cfe3000 ffffae8d
    ffffae8d`0cfe4250  00001100 00000050 00000000 00000000
0xFFFFAE8D0CFE3000映射自物理页4A847 ，0xFFFFAE8D0CFE4000映射自物理页6976。和上面MDL结构可以对应起来。
    3: kd> !pte 0xffffae8d`0cfe3000
                                               VA ffffae8d0cfe3000
    PXE at FFFFF6FB7DBEDAE8    PPE at FFFFF6FB7DB5D1A0    PDE at FFFFF6FB6BA34338    PTE at FFFFF6D746867F18
    contains 0A000000013BE863  contains 0A000000013C1863  contains 0A00000020583863  contains 8A0000004A847B63
    pfn 13be      ---DA--KWEV  pfn 13c1      ---DA--KWEV  pfn 20583     ---DA--KWEV  pfn 4a847     CG-DA--KW-V
    3: kd> !pte 0xffffae8d`0cfe4000
                                               VA ffffae8d0cfe4000
    PXE at FFFFF6FB7DBEDAE8    PPE at FFFFF6FB7DB5D1A0    PDE at FFFFF6FB6BA34338    PTE at FFFFF6D746867F20
    contains 0A000000013BE863  contains 0A000000013C1863  contains 0A00000020583863  contains 8A00000006976B63
    pfn 13be      ---DA--KWEV  pfn 13c1      ---DA--KWEV  pfn 20583     ---DA--KWEV  pfn 6976      CG-DA--KW-V
在Srv2DecompressData函数中，如果解压失败，就会调用SrvNetFreeBuffer，在这个函数中对不需要的缓冲区进行一些处理之后将其放回SrvNetBufferLookasides表，但没有对User
Buffer区域以及MDL相关数据进行处理，后面再用到的时候会直接取出来用（前面分析过），存在数据未初始化的隐患。如下所示，在nt!ExpInterlockedPushEntrySList函数被调用后，伪造了pMDL1指针的SRVNET
BUFFER HDR结构体指针被放入SrvNetBufferLookasides。
    //Srv2DecompressData
        NTSTATUS Status = SmbCompressionDecompress(
            Header->CompressionAlgorithm,
            (PUCHAR)Header + sizeof(COMPRESSION_TRANSFORM_HEADER) + Header->Offset,
            (ULONG)(TotalSize - sizeof(COMPRESSION_TRANSFORM_HEADER) - Header->Offset),
            (PUCHAR)Alloc->UserBuffer + Header->Offset,
            Header->OriginalCompressedSegmentSize,
            &FinalCompressedSize);
        if (Status OriginalCompressedSegmentSize) {
            SrvNetFreeBuffer(Alloc);
            return STATUS_BAD_DATA;
        }
    3: kd> dq poi(poi(SrvNetBufferLookasides)+20)
    ffffae8d`0bbb54c0  ffffae8d`0bbddbc0 ffffae8d`0bbdd980
    ffffae8d`0bbb54d0  ffffae8d`0bbdd7c0 ffffae8d`0bbdd640
    ffffae8d`0bbb54e0  ffffae8d`0bbdd140 0005d2a7`00000014
    ffffae8d`0bbb54f0  0002974b`0003d3e0 00000064`00005000
    ffffae8d`0bbb5500  52777445`0208f200 0006f408`0006f3f3
    ffffae8d`0bbb5510  ffffae8d`0586bb58 ffffae8d`0bbb5f10
    ffffae8d`0bbb5520  ffffae8d`0bbb5520 ffffae8d`0bbb5520
    ffffae8d`0bbb5530  ffffae8d`0586bb20 00000000`00000000
    3: kd> p
    srvnet!SrvNetFreeBuffer+0x18b:
    fffff800`494758ab ebcf            jmp     srvnet!SrvNetFreeBuffer+0x15c (fffff800`4947587c)
    3: kd> dq ffffae8d`0bbdd140
    ffffae8d`0bbdd140  00000000`00130002 ffffae8d`0dbf6150
    ffffae8d`0bbdd150  0000001a`01000004 00000013`0000000d
    ffffae8d`0bbdd160  00000200`00000000 00001100`3030534c
    ffffae8d`0bbdd170  fffff800`4947d600 fffff800`4947d590
    ffffae8d`0bbdd180  ffffae8d`0bbdd9c0 ffffae8d`08302ac0
    ffffae8d`0bbdd190  00000009`00000016 00000000`00000000
    ffffae8d`0bbdd1a0  ffffae8d`0bbddbc0 00000000`00000000
    ffffae8d`0bbdd1b0  00000000`00000001 00000000`00000000
    3: kd> dq ffffae8d`0dbf6150    //假设伪造了pmdl1指针
    ffffae8d`0dbf6150  ffffae8d`0a771150 cdcdcdcd`cdcdcdcd
    ffffae8d`0dbf6160  00000003`00000000 ffffae8d`0dbf5050
    ffffae8d`0dbf6170  00000000`00001100 00000000`00001278
    ffffae8d`0dbf6180  ffffae8d`0dbf5000 fffff780`00000e00
    ffffae8d`0dbf6190  00000000`00000000 00000000`00000000
    ffffae8d`0dbf61a0  ffffae8d`0dbf6228 00000000`00000000
    ffffae8d`0dbf61b0  00000000`00000000 00000000`00000000
    ffffae8d`0dbf61c0  00000000`00000000 00000000`00000000
ricercasecurity文章中提示可通过伪造MDL结构（设置后面的物理页pfn）来泄露物理内存。在后续处理某些请求时，会从SrvNetBufferLookasides表中取出缓冲区来存放数据，因而数据包有概率分配在被破坏的缓冲区上，由于网卡驱动最终会依赖DMA（Direct
Memory
Access，直接内存访问）来传输数据包，因而伪造的MDL结构可控制读取有限的数据。如下所示，Smb2ExecuteNegotiateReal函数在处理SMB协商的过程中又从SrvNetBufferLookasides中获取到了被破坏的缓冲区，其pMDL1指针已经被覆盖为伪造的MDL结构地址0xfffff78000000e00，该结构偏移0x30处的物理页被指定为0x1aa。
    3: kd> dd fffff78000000e00    //伪造的MDL结构
    fffff780`00000e00  00000000 00000000 50040040 0b470280
    fffff780`00000e10  00000000 00000000 00000050 fffff780
    fffff780`00000e20  00000000 fffff780 00001100 00000008
    fffff780`00000e30  000001aa 00000000 00000001 00000000
    3: kd> k
     # Child-SP          RetAddr               Call Site
    00 ffffd700`634cf870 fffff800`494767de     nt!ExpInterlockedPopEntrySListResume+0x7
    01 ffffd700`634cf880 fffff800`44d24de6     srvnet!SrvNetAllocateBuffer+0x9e
    02 ffffd700`634cf8d0 fffff800`44d3d584     srv2!Srv2AllocateResponseBuffer+0x1e
    03 ffffd700`634cf900 fffff800`44d29a9f     srv2!Smb2ExecuteNegotiateReal+0x185f4
    04 ffffd700`634cfad0 fffff800`44d2989a     srv2!RfspThreadPoolNodeWorkerProcessWorkItems+0x13f
    05 ffffd700`634cfb50 fffff800`457d9037     srv2!RfspThreadPoolNodeWorkerRun+0x1ba
    06 ffffd700`634cfbb0 fffff800`45128ce5     nt!IopThreadStart+0x37
    07 ffffd700`634cfc10 fffff800`452869ca     nt!PspSystemThreadStartup+0x55
    08 ffffd700`634cfc60 00000000`00000000     nt!KiStartSystemThread+0x2a
    3: kd> 
    srv2!Smb2ExecuteNegotiateReal+0x592:
    fffff800`44d25522 498b86f8000000  mov     rax,qword ptr [r14+0F8h]
    3: kd> 
    srv2!Smb2ExecuteNegotiateReal+0x599: