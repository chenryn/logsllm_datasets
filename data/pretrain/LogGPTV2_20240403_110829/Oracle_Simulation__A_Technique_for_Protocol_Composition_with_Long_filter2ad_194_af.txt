B[AO
]O
C
Given a protocol P and a context C, for Theorem 2 to be used, we need an oracle such
that:
1. the context C is simulatable with the oracle O,
28
2. the protocol P is secure even for an attacker with access to O (P ∼=O Q).
Our goal is to ﬁnd an oracle that is generic enough to allow for a simple proof of indis-
tinguishability of P and Q under the oracle, but still allows to simulate C. Notably, if we
take as oracle the protocol oracle corresponding to the context itself, we can trivially apply
Theorem 2 but proving P ∼=O Q amounts to proving C[P ] ∼= C[Q].
Application to tagged protocols We consider two versions of SSH, calling them SSH2
and SSH1, assuming that all messages are preﬁxed respectively with the strings “SSHv2.0”
and “SSHv1.0”. Both versions are using the same long term secret key sk for signatures. We
assume that both versions check the string preﬁx.
To prove the security of SSH2 running in the context of SSH1, we can use Theorem 2. If we
∼= I(cid:107)SSH1.
denote by I the idealized version of SSH2, the desired conclusion is SSH2(cid:107)SSH1
Letting C[_
1(cid:107)SSH1, it is then suﬃcient to ﬁnd an oracle O such that:
1] = _
∼=O I
.
1. νsk.SSH1 is O-simulatable (the simulatability of C directly follows),
2. SSH2
If we deﬁne the tagging function TSSH1
that checks the preﬁx, SSH1 is trivially Osign
-
TSSH1 ,sk
simulatable (see Deﬁnition 14) as SSH1 does enforce the tagging checks. We thus let O be
Osign
TSSH1 ,sk
Assuming that sign veriﬁes the classical EUF-CMA axiom, by Proposition 16, it also
veriﬁes the tagged version EUF-CMATSSH1 ,sk. To conclude, it is then suﬃcient to prove that
SSH2
∼=O I with a reduction to EUF-CMATSSH1 ,sk.
Application to encrypt and sign For performances considerations, keys are sometimes
used both for signing and encryption, for instance in the EMV protocol. In [29], an encryption
scheme is proven to be secure even in the presence of a signing oracle using the same key. Our
Theorem formalizes the underlying intuition, i.e.
if a protocol can be proven secure while
using this encryption scheme, it will be secure in any context where signatures with the same
key are also performed.
4.2 Composition with State Passing
In some cases, a context passes a sequence of terms to another protocol. If the sequence of
terms is indistinguishable from another one, we would like the two experiments, with either
sequences of terms, to be indistinguishable.
Example 4.3. Let us consider the protocol P (x1, x2) := in(c, x).out(c, enc(x, x1, x2)). We
assume that we have a function kdf, which, given a random input, generates a suitable key for
the encryption scheme. Let a random name seed and let C[_
.
1] := let sk = kdf(seed) in _
C[(cid:107)iP (ri, sk)] provides an access to an encryption oracle for the key generated in C:
1
C[(cid:107)iP (ri, sk)] :=
let sk = kdf(seed) in
(cid:107)i(in(c, x).out(c, enc(x, ri, sk)))
A classical example is a key exchange, used to establish a secure channel. The situation
is dual with respect to the previous theorem: contexts must be indistinguishable and the
continuation must be simulatable.
29
Theorem 4. Let C, C(cid:48) be n-ary contexts such that each hole is terminal. Let P1(x), . . . , Pn(x)
be parameterized protocols, such that channel sets are pairwise disjoint. Given a cryptographic
library Mf , an oracle O , n ⊇ N (C)∩N (P1, . . . , Pn), t1, . . . , tn, t(cid:48)
n sequences of terms,
n)]. If
(cid:101)C := C[out(c1, t1), . . . , out(cn, tn)] and (cid:101)C(cid:48) := C(cid:48)[out(c1, t(cid:48)
(cid:101)C(cid:107)in(c1, x).P1(x)(cid:107) . . .(cid:107)in(cn, x).Pn(x) is a protocol and:
1. (cid:101)C ∼=O (cid:101)C(cid:48)
1, . . . , t(cid:48)
1), . . . , out(cn, t(cid:48)
2. νn.in(c1, x).P1(x)(cid:107) . . .(cid:107)in(cn, x).Pn(x) is O-simulatable
then C[P1(t1), . . . , Pn(tn)] ∼=O C(cid:48)[P1(t(cid:48)
Speciﬁcally, there exists a polynomial pS (independent of P1, . . . , Pn) such that if pO is the
polynomial bound on the runtime of the simulator for P := in(c1, x).P1(x)(cid:107) . . .(cid:107)in(cn, x).Pn(x),
we have,
1), . . . , Pn(t(cid:48)
n)]
n)](t) ≤ Adv(cid:101)C∼=O(cid:101)C(cid:48)(cid:16)
(cid:0)t, n,|P|, pP (t)(cid:1)(cid:17)
pS
Adv C[P1(t1),...,Pn(tn)]∼=OC[P1(t(cid:48)
1),...,Pn(t(cid:48)
(cid:101)C is the context, in which all the bound values (for instance the key derived by a key
exchange) are outputted on distinct channels. (cid:102)C(cid:48) corresponds to the idealized version. We
can pass those bound values to another protocol P , if this protocol P can be simulated for
any possible value of the bound values.
Proof. The proof is very similar to Theorem 2.
Let us assume that we have an attacker such that
(cid:18)
AO,O
Adv
C[P1(t1),...,Pn(tn)]?C[P1(t(cid:48)
1),...,Pn(t(cid:48)
n)]
(cid:19)
= 0
We denote C1 = C[out(c1, t1), . . . , out(cn, tn)], C2 = C[out(c1, t(cid:48)
in(1, x).P1(x), . . . , P (cid:48)
n = in(n, x).Pn(x). We ﬁrst construct an attacker against:
1), . . . , out(cn, t(cid:48)
n)], P (cid:48)
1 =
1(cid:107) . . .(cid:107)P (cid:48)
Let us consider BO,OD,OP(cid:48)
n)] but, after
setting some variables d1, . . . , dn to 0 and some list x to the empty list, for every call to
OC[P1(t1),...,Pn(tn)]?C[P1(t(cid:48)
∼= C2(cid:107)P (cid:48)
C1(cid:107)P (cid:48)
n which simulates AO,O
of the form (c, m):
• if there exist i such that di = 1 and c ∈ C(P (cid:48)
1(cid:107) . . .(cid:107)P (cid:48)
C[P1(t1),...,Pn(tn)]?C[P1(t(cid:48)
1),...,Pn(t(cid:48)
1),...,Pn(t(cid:48)
,...,OP(cid:48)
n)]
n
n
1
i ) then
with (cσ−1, m)
– query OP (cid:48)
– if OP (cid:48)
C[_
i
i
1, . . . , _
n] = C[_
i; C(cid:48)(cid:48)] it adds to x the channels C(C(cid:48)(cid:48))
– else it forwards the answer (c(cid:48), m(cid:48)) as (c(cid:48)σ, m(cid:48))
terminates set ci = 0 and if it returns ⊥, then, with C and C(cid:48)(cid:48) such that
• else if c ∈ C(C1) and c /∈ x then
– queries OD with (c, m)
– if OD answers with some ti on channel i
30
∗ set di = 1
∗ sends (i, ti) to OP (cid:48)
– else forwards the answer of OD
i
and forwards the answer
With this construction, we do have
Using Lemma 4, we get a distinguisher B(cid:48) such that:
1(cid:107)...(cid:107)P(cid:48)
n
Adv
Adv
1
n
= 0
,...,OP(cid:48)
(cid:17)
(cid:17)
(cid:16)BO,OC1?C2 ,OP(cid:48)
(cid:16)B(cid:48)O,OC1?C2 ,OP(cid:48)
(cid:17)
]O,OD behaves exactly as BO,OP(cid:48)
= 0.
= 0
n
Now, with the fact that νn.P (cid:48)
1(cid:107) . . .(cid:107)P (cid:48)
such that thanks to Proposition 7, B(cid:48)[AO
1(cid:107)...(cid:107)P (cid:48)
P (cid:48)
]O,OC1?C2
(cid:16)B(cid:48)[AO
n
We ﬁnally have Adv
The bound on the advantage is derived similarly to Theorem 2.
1(cid:107)...(cid:107)P (cid:48)
P (cid:48)
n
is O simulatable, we have a simulator AO
1(cid:107)...(cid:107)P (cid:48)
P (cid:48)
,OD.
1(cid:107)...(cid:107)P(cid:48)
n
n
When we do so, we only assume that they are all distinct. The following example shows
how Theorems 2 and 4 can be used to derive the security of one session of a key exchange
composed with a protocol.
Example 4.4. Let us consider a key exchange I(cid:107)R where xI (resp. xR) is the key derived
by the initiator I (resp. the responder R) in case of success. We denote by KE[_
2] :=
I; _
the composition of the key exchange with two continuations; the binding of xI
(resp. xR) is passed to the protocol in sequence. Consider possible continuations P I (xI ), P R(xR)
that use the derived keys and ideal continuations (whatever “ideal” is) QI (xI ), QR(xR). We
sketch here how to prove KE[P I (xI ), P R(xR)] ∼= KE[QI (xI ), QR(xR)] (i.e., the security of
the channel established by the key exchange). This will be generalized to multi-sessions in
Section 6. We use both Theorems 2 and 4.
1(cid:107)R; _
1, _
2
Assume, with a fresh name k, that:
1. Oke is an oracle allowing to simulate the key exchange
2. OP,Q allows to simulate in(cI , x).P I (x)(cid:107)in(cR, x).P R(x) and
in(cI , x).QI (x)(cid:107)in(cR, x).QR(x)
3. P I (k)(cid:107)P R(k) ∼=Oke QI (k)(cid:107)QR(k)
4. KE[out(cI , xI ), out(cR, xR)] ∼=OP,Q KE[out(cI , k), out(cR, k)]
Hypothesis 3 captures the security of the channel when executed with an ideal key, and
Hypothesis 4 captures the security of the key exchange. Both indistinguishability are for an
attacker that can simulate the other part of the protocol.
Using Theorem 2 with Hypothesis 1 and 3 yields
KE[P I (k), P R(k)] ∼= KE[QI (k), QR(k)]
31
Hypothesis 2 and 4 yield, with two applications of Theorem 4, one for P and one for Q, that
KE[P I (xI ), P R(xR)] ∼= KE[P I (k), P R(k)] and KE[QI (xI ), QR(xR)] ∼= KE[QI (k), QR(k)].
Transitivity allows us to conclude that the key exchange followed by the channel using the
produced key is indistinguishable from the key exchange followed by the ideal secure channel:
KE[P I (xI ), P R(xR)] ∼= KE[QI (xI ), QR(xR)]
In Theorem 4, the simulatability of
νn.in(cP , k); P (k)(cid:107)in(cQ, k); Q(k)
may be a requirement too strong in some applications. This issue will be raised when we
consider the forwarding agent of the SSH protocol, as detailed in Section 9.3, but we can
avoid it in this speciﬁc case. For more complex applications, it might be interesting in the
future to consider a weaker version of function applications where the produced key k always
satisﬁes a condition H(k). We could then design an oracle O so that for all names satisfying
condition H(k) we would have that P (k)(cid:107)Q(k) is O-simulatable.
4.3 Unbounded Replication
An important feature of a compositional framework is the ability to derive the security of a
multi session protocol from the analysis of a single session. To refer to multiple sessions of
a protocol, we consider that each session uses some fresh randomness that we see as a local
session identiﬁer.
The main idea behind the Theorem is that the oracle will depend on a sequence of names
of arbitrary length. This sequence of names represents the list of honest randomness sampled
by each party of the protocol, and the oracle enables simulatability of those parties.
We provide bellow the Proposition that allows to put in parallel any number of replications
of simulatable protocols.
Proposition 17. Let Or be an oracle parameterized by a sequence of names s, and O an
oracle. Let p be a sequence of names, P (x), R1
i (x, y) and Q(x) be protocols,
such that Nl(R1
i ) is disjoint of the oracle support. If we have, for sequences of names
1
lsid
i , . . . , Rk
k, with s = {lsid
i (x, y), . . . , Rk
, . . . , lsid
i}1≤j≤k,i∈N :
j
j
i .Rj
1. ∀i, j ∈ N, νp, lsid
2. P (p) ∼=Or Q(p)
3. s is disjoint of the support of O.
j
i (p, lsid
i ) is Or-simulatable.
Then, for any integers N1, . . . , Nk:
P (p)(cid:107)i≤N1(R1
1
i (p, lsid
i )(cid:107) . . .(cid:107)i≤Nk Rk
∼=O,Or Q(p)(cid:107)i≤N1R1
1
i (p, lsid
k
i (p, lsid
i )
i )(cid:107) . . .(cid:107)i≤Nk Rk
k
i (p, lsid
i )
Speciﬁcally, there exists a polynomial pS (independent of all Rj) such that if pRj is the
polynomial bound on the runtime of the simulator for Rj, we have,
AdvP (p)(cid:107)i≤N1 (R1
≤ AdvP (p)∼=O,Or Q(p)(cid:16)
i (p,lsid
(cid:0)t, N1,|R1|, . . . , Nk,|Rk|, pR1(t), . . . , pRk (t)(cid:1)(cid:17)
i )∼=OQ(p)(cid:107)i≤N1 R1
i )(cid:107)...(cid:107)i≤Nk Rk
i (p,lsid
i (p,lsid
i (p,lsid
k
1
pS
1
i )(cid:107)...(cid:107)i≤Nk Rk
k
i )(t)
32
j
j
In the previous proposition and following applications, we talk about sequences of names
of the form s = {lsid
i}1≤j≤k,i∈N. This does not have any practical meaning and is only a
shortcut. In practice, we must have that the previous hypotheses hold for any polynomial p
and any sequence s = {lsid
i}1≤j≤k,1≤i≤p(η). We will precisely deﬁne this in Section 12.
Applying the previous Proposition with P and Q as R1 and R2, we can obtain the Theorem
for the unbounded replication of a protocol, where the number of sessions depends on the
security parameter.
Theorem 5. Let Or, O be oracles both parameterized by a sequence of names s. Let p be
a sequence of names, Pi(x, y) and Qi(x, y) be parameterized protocols, such that Nl(P, Q) is
Q, with s =
disjoint of the oracles support.
{lsid
P
If we have, for sequences of names lsid
, lsid
P
i , lsid
Q