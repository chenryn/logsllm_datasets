    8 规格:
    9 个容器:
    10 名称:web 服务器
    11 图片:engine x:1 . 19 . 6-高山
    这是**网络服务器-b.yaml** 的代码:
    1 堆叠版本:v1
    2 个孩子:Pod
    3 元数据:
    4 名称:网络服务器 b
    5 个标签:
    6 应用:网络服务器
    7 环境:乙
    8 规格:
    9 个容器:
    10 名称:web 服务器
    11 图片:engine x:1 . 19 . 6-高山
    正如你可以在每个 PODS 的代码中看到的，每个 PODS 都有一个标签 app，**网络服务器**，和另一个名为 **env** 的标签，以及每个服务器的值(A 代表**网络服务器-a** 和 B 代表**网络服务器-b** )。在本例的后面，您将使用这些标签来选择性地允许这些 Pod 之间的流量。
    要创建两个 Pod ，请使用以下命令:
    kube CTL create-f web-server-a . YAML
    kubi KL create-f web 服务器-b.yaml
    通过运行以下命令，验证 Pod 是否正在运行，然后继续前进:
    忽必烈得到 pods -w
    这将返回类似于图 11.35 的输出:
    ![Verifying that both the created pods are running](img/B17338_11_35.jpg)
    图 11.35:两个 Pod 都在运行
4.  For this example, we'll use the pod's IP addresses to test the connection. Get the IP address for **web-server-b** using the following command:
    kubectl 的 PODS 很宽
    这将返回类似于图 11.36 的输出，其中您将看到突出显示的 IP 地址:
    ![Fetching the IP address of the web-server-bpod to test the connection](img/B17338_11_36.jpg)
    图 11.36:获取网络服务器 b 的 IP 地址
5.  Now, try to connect from **web-server-a** to **web-server-b**. You can test this connection using the following command:
    kubectl exec -it web-server-a - \
    wget-qo--T2 http://
    这将返回类似于图 11.37 的输出:
    ![Verifying that web-server-a can connect to web-server-b](img/B17338_11_37.jpg)
    图 11.37:验证网络服务器-a 可以连接到网络服务器-b
6.  Let's now create a new **NetworkPolicy** object that will limit all traffic to and from the pods with the label app **web-server**. This policy has been provided in the **deny-all.yaml** file:
    1 种:网络策略
    2 版本:networking.k8s.io/v1
    3 元数据:
    4 名称:全部拒绝
    5 规格:
    6 选择器:
    7 个匹配标签:
    8 应用:网络服务器
    9 入口:[]
    10 出口:[]
    让我们来探索一下这段代码中包含的内容:
    *   **第 1 行**:这里，您定义您正在创建一个**网络策略**对象。
    *   **第 6-8 行**:在这里，您可以定义该网络策略将应用于哪些 PODS。在这种情况下，您将此网络策略应用于所有标签为**应用:网络服务器**的 PODS。
    *   **第 9-10 行**:这里定义允许规则。如您所见，您没有定义任何允许规则，这意味着所有流量都将被阻止。
    在本例的后面，您将添加更具体的入口和出口规则，以选择性地允许流量流动。
7.  Let's now create this network policy. You can do this using the following command:
    kubectl create -f deny-all.yaml
    这将返回类似于图 11.38 的输出:
    ![Creating a network policy](img/B17338_11_38.jpg)
    图 11.38:创建网络策略
8.  Let's now test the connection between **web-server-a** and **web-server-b** again. You can test this using the following command.
    kubectl exec -it web-server-a - \
    wget-qo--T2 http://
    这将返回类似于图 11.39 的输出:
    ![Traffic is no longer flowing between web-server-a and web-server-b](img/B17338_11_39.jpg)
    图 11.39:流量不再在网络服务器 a 和网络服务器 b 之间流动
9.  You will now create another network policy that will selectively allow traffic from **web-server-a** to **web-server-b**. This policy is included in the **allow-a-to-b.yaml** file:
    1 种:网络策略
    2 版本:networking.k8s.io/v1
    3 元数据:
    4 名称:允许从 a 到 b
    5 规格:
    6 选择器:
    7 个匹配标签:
    8 应用:网络服务器
    9 入口:
    10 -从:
    11-PoD 选择器:
    12 个匹配标签:
    13 环境:甲
    14 出口:
    15 - to:
    16-PoD 选择器:
    17 个匹配标签:
    18 环境:乙
    让我们更深入地探讨一下该文件与早期网络策略的区别:
    *   **第 9-13 行**:这里，您正在定义允许哪些入口流量。具体来说，您允许来自标签为 **env: A** 的 PODS 的流量。
    *   **第 14-18 行**:这里，您正在定义允许哪些出口流量。在这种情况下，您允许带有标签 **env: B** 的出口流量通过。
    另外，请注意，您正在用新名称创建此网络策略。这意味着您将有两个网络策略在您的集群上处于活动状态，选择带有标签 **app: web-server** 的 PODS。**拒绝所有**和**允许 a 到 b** 网络策略都将出现在您的集群上，并且都适用于标签为 **app: web 服务器**的 pods。根据设计，网络策略是附加的，这意味着如果任何一个策略允许流量，流量将被允许。
10.  Let's create this policy using the following command:
    kube CTL create-f allow-a to b . YAML
    这将返回类似于图 11.40 的输出:
    ![Creating a new network policy to allow traffic from web-server-a to web-server-b](img/B17338_11_40.jpg)
    图 11.40:创建一个新的网络策略，允许从网络服务器 a 到网络服务器 b 的流量
11.  Let's test the connection between **web-server-a** and **web-server-b** again. You can test this by applying the following command:
    kubectl exec -it web-server-a - \
    wget-qo--T2 http://
    这将返回类似于图 11.41 的输出:
    ![Traffic is flowing again between web-server-a and web-server-b](img/B17338_11_41.jpg)
    图 11.41:流量再次被允许从网络服务器 a 到网络服务器 b
12.  You have now allowed traffic from **web-server-a** to **web-server-b**. You have, however, not allowed the traffic to pass the other way, meaning traffic from **web-server-b** to **web-server-a** is blocked. Let's test this as well. To test this, get the IP address of **web-server-a** using the following command:
    kubectl 的 PODS 很宽
    这将返回类似于图 11.42 的输出，其中**网络服务器-a** 的 IP 地址被突出显示:
    ![Getting the IP address of web-server-a](img/B17338_11_42.jpg)
    图 11.42:获取网络服务器的 IP 地址
    您现在可以测试从**网络服务器-b** 到**网络服务器-a** 的流量路径:
    kubectl exec -it web-server-b -- \
    wget-qo--T2 http://
    这将返回类似于图 11.43 的输出:
    ![Output showing that traffic is not allowed from web-server-b to web-server-a](img/B17338_11_43.jpg)
    图 11.43:不允许从网络服务器 b 到网络服务器 a 的流量，正如预期的那样
    在*图 11.43* 中可以看到， **web-server-b** 到 **web-server-a** 的流量超时，表示流量受阻。
13.  This concludes the example regarding network policies in Azure. In the next chapter, you will create a new cluster again, so to conclude this chapter, it is safe to delete this cluster with network policies enabled, using the following command:
    az aks 删除-n handonaks-g rg-handonaks-y
您现在已经使用网络策略来保护 pods 之间的流量。您看到了默认策略如何拒绝所有流量，以及如何添加新策略来选择性地允许流量。您还看到，如果您允许从一个 pod 到另一个 pod 的流量，则不会自动允许反向流量。
## 总结
本章向您介绍了 AKS 中的多种网络安全选项。您研究了如何保护控制平面和集群中的工作负载。
为了保护控制平面，您首先使用授权的 IP 范围来验证只有允许的公共 IP 地址才能访问集群的控制平面。之后，您创建了一个新的私有集群，该集群只能使用私有连接来访问。您使用 Azure 私有链接连接到该私有集群。
之后，您还探讨了工作负载网络安全。最初，您部署了一个对所有用户都可用的公共服务。然后，您让 AKS 配置 Azure NSGs，以确保该服务只连接到允许的连接。您验证了可以从您的机器连接到服务，但不能像预期的那样从 Azure 中的虚拟机连接。最后，您还在新集群中配置了 Kubernetes 网络策略。您使用这些来保护 pod 到 pod 的流量，并且能够保护集群中不同 pod 之间的流量。
在下一章中，您将学习如何使用 Azure 服务操作器使用 Azure 创建 Azure 资源，例如 MySQL 的 Azure 数据库。**