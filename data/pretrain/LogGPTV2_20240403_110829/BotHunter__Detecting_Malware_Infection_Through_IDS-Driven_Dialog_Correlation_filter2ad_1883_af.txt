IRC USER command 1030->8080 (23:47:01.23 PST)
---------------------------------------
event=1:2002024 tcp E4[rb] BLEEDING-EDGE TROJAN
IRC NICK command 1030->8080 (23:47:01.23 PST)
---------------------------------------
event=1:2002025 tcp E4[rb] BLEEDING-EDGE TROJAN
IRC JOIN command 1030->8080 (23:47:03.79 PST)
OUTBOUND SCAN
event=1:2001579 tcp E5[rb] BLEEDING-EDGE Behavioral Unusual Port
139 traffic, Potential Scan or Infection 1089->139 (01:46:06 EST)
event=555:5555005 tcp E5[sc] scade detected scanning of 21 IPs
(fail ratio=0:0/21): 0->0 (01:46:06 EST)
Figure 7: Honeynet Interaction Summary (left) and corresponding BotHunter Proﬁle (right) for W32/IRCBot-TO
damental paradigm shifts in bot behavior.
7 Related Work
Recently, there has been a signiﬁcant thrust in research
on botnets. To date, the primary focus of much of this
research has been on gaining a basic understanding of
the nature and full potential of the botnet threat. Rajab et
al. provided an in-depth study in understanding the dy-
namics of botnet behavior in the large, employing “lon-
gitudinal tracking” of IRC botnets through IRC and DNS
tracking techniques [33]. Researchers have also studied
the dynamics of botnet C&C protocols [19, 50], includ-
ing global dynamics such as diurnal behavior [14]. Other
studies have investigated the internals of bot instances to
examine the structural similarities, defense mechanisms,
and command and control capabilities of the major bot
families [7] and developed techniques to automatically
harvest malware samples directly from the Internet [6].
There is also some very recent work on the detection of
botnets. Rishi [21] is an IRC botnet detection system
that uses n-gram analysis to identify botnet nickname
patterns. Binkley and Singh [9] proposed an anomaly
based system that combines IRC statistics and TCP work
weight for detecting IRC-based botnets. Livadas et al.
[26] proposed a machine learning based approach for
botnet detection. Karasaridis et al.
[25] presented an
algorithm for detecting IRC botnet controllers from net-
ﬂow records. These efforts are complementary in that
they could provide additional BotHunter evidence-trails
for infection events.
A signiﬁcant amount of related work has investigated
alert correlation techniques for network intrusion detec-
tion. An approach to capturing complex and multistep
attacks is to explicitly specify the stages, relationships,
and ordering among the various constituents of an at-
tack. GriDS [39] aggregates network activity into ac-
tivity graphs that can be used for analyzing causal struc-
tures and identifying policy violations. CARDS is a dis-
tributed system for detecting and mitigating coordinated
attacks [49]. Abad et al. [2] proposed to correlate data
among different sources/logs (e.g., syslog, ﬁrewall, net-
ﬂow) to improve intrusion detection system accuracy. El-
lis et al. and Jiang et al. describe two behavioral-based
systems for detecting network worms [17, 23]. In con-
trast to the above systems, our work focuses on the prob-
lem of bot detection and uses infection dialog correlation
as a means to deﬁne the probable set of events that indi-
cate a bot infection.
Sommer et al. [36] describe contextual Bro signa-
tures as a means for producing expressive signatures
and weeding out false positives. These signatures cap-
ture two dialogs and are capable of precisely deﬁn-
ing multistep attacks. Our work differs from this in
our requirement to simultaneously monitor several ﬂows
across many participants (e.g., infection source, bot vic-
tim, C&C, propagation targets) and our evidence-trail-
based approach to loosely specify bot infections.
JIGSAW is a system that uses notions of concepts
and capabilities for modeling complex attacks [40]
and [29] provides a formal framework for alert correla-
180
16th USENIX Security Symposium
USENIX Association
tion. CAML is a language framework for deﬁning and
detecting multistep attack scenarios [11]. Unlike BotH-
unter, all these systems are based on causal relationships
i.e., pre-conditions and post-conditions of attacks. An
obvious limitation is that these dependencies, need to be
manually speciﬁed a priori for all attacks, and yet such
dependencies are often unknown.
Alert correlation modules such as CRIM [13] provide
the ability to cluster and correlate similar alerts. The sys-
tem has the capability to extract higher-level correlation
rules automatically for the purpose of intention recog-
nition. In [42], Valdes and Skinner propose a two-step
probabilistic alert correlation based on attack threads and
alert fusion. We consider this line of work to be comple-
mentary, i.e., these fusion techniques could be integrated
into the BotHunter framework as a preprocessing step in
a multisensor environment.
USTAT [22] and NetSTAT [44] are two IDSs based on
state transition analysis techniques. They specify com-
puter attacks as sequences of actions that cause transi-
tions in the security state of a system. In [43], multistep
attack correlation is performed on attack scenarios spec-
iﬁed (a priori) using STATL [16], which is a language
for expressing attacks as states and transitions. Our work
differs from these systems in that we do not have a strict
requirement of temporal sequence, and can tolerate miss-
ing events during the infection ﬂow.
8 BotHunter Internet Distribution
We are making BotHunter available as a free Internet dis-
tribution for use in testing and facilitating research with
the hope that this initiative would stimulate community
development of extensions.
A key component of the BotHunter distribution is the
Java-based correlator that by default reads alert streams
from Snort. We have tested our system with Snort 2.6.*
and it can be downloaded from www.cyber-ta.org/botHunter/. A
noteworthy feature of the distribution is integrated sup-
port for “large-scale privacy-preserving data sharing”.
Users can enable an option to deliver secure anonymous
bot proﬁles to the Cyber-TA security repository [32], the
collection of which we will make available to providers
and researchers. The repository is currently operational
and in beta release of its ﬁrst report delivery software.
Our envisioned access model is similar to that of
DShield.org [41] with the following important differ-
ences. First, our repository is blind to who is submit-
ting the bot report and the system will deliver alerts via
TLS over TOR, preventing an association of bot reports
to a site via passive snifﬁng. Second, our anonymiza-
tion strategy obfuscates all local IP addresses and time
intervals in the proﬁle database but preserves C&C, egg
download, and attacker addresses that do not match user
deﬁned address proximity mask. Users can enable fur-
ther ﬁeld anonymizations as they require. We intend to
use contributed bot proﬁles to learn speciﬁc alert signa-
ture patterns for speciﬁc bots, to track attackers, and to
identify C&C sites.
9 Conclusion
We have presented the design and implementation of
BotHunter, a perimeter monitoring system for real-time
detection of Internet malware infections. The corner-
stone of the BotHunter system is a three-sensor dialog
correlation engine that performs alert consolidation and
evidence trail gathering for investigation of putative in-
fections. We evaluate the system’s detection capabili-
ties in an in situ virtual network and a live honeynet
demonstrating that the system is capable of accurately
ﬂagging both well-studied and emergent bots. We also
validate low false positive rates by running the system
live in two operational production networks. Our ex-
perience demonstrates that the system is highly scalable
and reliable (very low false positive rates) even with not-
so-reliable (weak) raw detectors. BotHunter is also the
ﬁrst example of a widely distributed bot infection pro-
ﬁle analysis tool. We hope that our Internet release will
enable the community to extend and maintain this capa-
bility while inspiring new research directions.
10 Acknowledgements
We are thankful to Al Valdes for his help in develop-
ing the regression model for computing weights of dia-
log events. We thank Roberto Perdisci and Junjie Zhang
for helpful discussions on the early version of this work.
This material is based upon work supported through the
U.S. Army Research Ofﬁce (ARO) under the Cyber-
TA Research Grant No.W911NF-06-1-0316 and Grant
W911NF0610042, and by the National Science Foun-
dation under Grants CCR-0133629 and CNS-0627477.
Any opinions, ﬁndings, and conclusions or recommenda-
tions expressed in this material are those of the author(s)
and do not necessarily reﬂect the views of U.S. ARO or
the National Science Foundation.
References
[1] Cyber-TA: BotHunter distribution page.
http://www.cyber-ta.org/releases/botHunter/index.html, 2007.
[2] C. Abad, J. Taylor, C. Sengul, W. Yurcik, Y. Zhou, and K. Rowe. Log
correlation for intrusion detection: A proof of concept. In Proceedings of
the 19th Annual Computer Security Applications Conference (ACSAC’03),
page 255, Washington, DC, USA, 2003. IEEE Computer Society.
[3] L. A. Adamic and B. A. Huberman. Zipf’s law and the Internet. Glottomet-
rics, 3:143–150, 2002.
[4] W32 Agobot IB.
http://www.sophos.com/virusinfo/analyses/trojagobotib.html.
[5] K. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis, E. Markatos, and
In
A. Keromytis. Detecting targeted attacks using shadow honeypots.
Usenix Security Symposium, Baltimore, Maryland, August 2005.
USENIX Association
16th USENIX Security Symposium
181
[6] P. Baecher, M. Koetter, T. Holz, M. Dornseif, and F. Freiling. The nepenthes
platform: An efﬁcient approach to collect malware. In Proceedings of Re-
cent Advances in Intrusion Detection, Hamburg, September 2006.
[7] P. Barford and V. Yegneswaran. An inside look at botnets. Special Work-
shop on Malware Detection, Advances in Information Security, Springer
Verlag, 2006.
[8] S. Biles.
Detecting
the
tistical
http://www.computersecur
packet
anomaly
unknown with
detection
engine
snort
and
sta-
(SPADE).
ityonline.com/spade/SP ADE.pdf.
[9] J. R. Binkley and S. Singh. An algorithm for anomaly-based botnet detec-
tion. In Proceedings of USENIX Steps to Reducing Unwanted Trafﬁc on the
Internet Workshop (SRUTI), pages 43–48, July 2006.
[10] Bleeding Edge Threats.
The Bleeding Edge
of
Snort.
http://www.bleedingsnor t.com/ , 2007.
[11] S. Cheung, M. Fong, and U. Lindqvist. Modeling multistep cyber attacks
for scenario recognition. In Proceedings of DARPA Information Survivabil-
ity Conference and Exposition (DISCEX III), 2003.
[12] E. Cooke, F. Jahanian, and D. McPherson. The zombie roundup: Under-
standing, detecting, and disrupting botnets. In Proceedings of Workshop on
Steps to Reducing Unwanted Trafﬁc on the Internet (SRUTI’05), 2005.
[13] F. Cuppens and A. Miege. Alert correlation in a cooperative intrusion de-
In Proceedings of IEEE Symposium on Security and
tection framework.
Privacy, 2002.
[14] D. Dagon, C. Zou, and W. Lee. Modeling botnet propagation using
In Proceedings of Network and Distributed Security Sympo-
timezones.
sium(NDSS ’06), January 2006.
[15] R. Dingledine, N. Mathewson, and P. Syverson. TOR: The second gen-
In Proceedings of the Usenix Security Symposium,
eration onion router.
2004.
[16] S. T. Eckmann, G. Vigna, and R. A. Kemmerer. Statl: An attack language
for state-based intrusion detection. Journal of Computer Security, 10, 2002.
[17] D. R. Ellis, J. G. Aiken, K. S. Attwood, and S. D. Tenaglia. A Behavioral
Approach to Worm Detection. In Proceedings of WORM, 2004.
[18] P. Fogla, M. Sharif, R. Perdisci, O. M. Kolesnikov, and W. Lee. Poly-
In Proceedings of the 2006 USENIX Security
morphic blending attack.
Symposium, 2006.
[19] F. Freiling, T. Holz, and G. Wicherski. Botnet tracking: Exploring a root-
cause methodology to prevent denial of service attacks. In Proceedings of
ESORICS, 2005.
[20] German Honeynet Project. Tracking botnets. http://www.hone ynet.org/
papers/bots , 2005.
[21] J. Goebel and T. Holz. Rishi: Identify bot contaminated hosts by irc nick-
name evaluation. In USENIX Workshop on Hot Topics in Understanding
Botnets (HotBots’07), 2007.
[22] K. Iglun, R. A. Kemmerer, and P. A. Porras. State transition analysis: A
rule-based intrusion detection system. IEEE Transactions on Software En-
gineering, 21, 1995.
[23] X. Jiang and D. Xu. Proﬁling self-propagating worms via behavioral foot-
printing. In Proceedings of CCS WORM , 2006.
[24] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast portscan detec-
tion using sequential hypothesis testing. In IEEE Symposium on Security
and Privacy 2004, Oakland, CA, May 2004.
[25] A. Karasaridis, B. Rexroad, and D. Hoeﬂin. Wide-scale botnet detection
and characterization. In USENIX Workshop on Hot Topics in Understand-
ing Botnets (HotBots’07), 2007.
[26] C. Livadas, R. Walsh, D. Lapsley, and W. T. Strayer. Using machine learn-
ing techniques to identify botnet trafﬁc. In 2nd IEEE LCN Workshop on
Network Security (WoNS’2006), 2006.
[27] Mitre Corporation. CVE-2006-3439.
http://cv e.mitre.org/cgi-bin/cv enam e.cgi?name=CVE-2006-3439
.
[28] D. Moore, G. Voelker, and S. Savage. Inferring Internet denial-of-service
activity. In Proceedings of the 10th USENIX Security Symposium, 2001.
[29] P. Ning, Y. Cui, and D. Reeves. Constructing attack scenarios through
correlation of intrusion alerts. In Proceedings of Computer and Communi-
cations Security, 2002.
[30] V. Paxson. BRO: A System for Detecting Network Intruders in Real Time.
In Proceedings of the 7th USENIX Security Symposium, 1998.
[31] R. Perdisci, G. Gu, and W. Lee. Using an ensemble of one-class svm clas-
siﬁers to harden payload-based anomaly detection systems. In Proceedings
of the IEEE International Conference on Data Mining (ICDM’06), Decem-
ber 2006.
[32] P. Porras. Privacy-enabled global threat monitoring. In Proceedings of the
IEEE Security and Privacy Magazine, 2006.
[33] M. Rajab, J. Zarfoss, F. Monrose, and A. Terzis. A multi-faceted approach
In Proceedings of ACM SIG-
to understanding the botnet phenomenon.
COMM/USENIX Internet Measurement Conference, Brazil, October 2006.
[34] A. Ramachandran and N. Feamster. Understanding the network-level be-
havior of spammers. In Proceedings of ACM SIGCOMM, 2006.
[35] M. Roesch. Snort - lightweight intrusion detection for networks. In Pro-
ceedings of USENIX LISA’99, 1999.
[36] R. Sommer and V. Paxson. Enhancing byte-level network intrusion detec-
tion signatures with context. In 10th ACM Conference on Computer and
Communication Security (CCS), Washington, DC, October 2003.
[37] Sophos Inc. W32/IRCBot-TO.
http://www.sophos .com/vir usinfo/a nalyses/w32ircbotto .html, 2007.
[38] S. Staniford, J. Hoagland, and J. McAlerney. Practical automated detection
of stealthy portscans. In Journal of Computer Security, 2002.
[39] S. Staniford-Chen, S. Cheung, R. Crawford, M. Dilger, J. Frank,
J. Hoagland, K. Levitt, C. Wee, R. Yip, and D. Zerkle. Grids–a graph based
intrusion detection system for large networks. In 19th National Information
Systems Security Conference, 1996.
[40] S. Templeton and K. Levitt. A requires/provides model for computer at-
tacks. In New Security Paradigms Workshop, 2000.
[41] J. Ullrich. DSHIELD. http://www.dshield.org , 2007.
[42] A. Valdes and K. Skinner. Probabilistic alert correlation. In Proceedings of
Recent Advances in Intrusion Detection (RAID), pages 54–68, 2001.
[43] F. Valeur, G. Vigna, C. Kruegel, and R. Kemmerer. Comprehensive ap-
In Proceedings of IEEE
proach to intrusion detection alert correlation.
Transactions on Dependable and Secure Computing, 2004.
[44] G. Vigna and R. Kemmerer. NetSTAT: A network-based intrusion detection
approach. In Proceedings of the 14th Annual Computer Security Applica-
tions Conference (ACSAC ’98), 1998.
[45] K. Wang, J. J. Parekh, and S. Stolfo. Anagram: A content anomaly detector
resistant to mimicry attack. In Proceedings of the International Symposium
on Recent Advances in Intrusion Detection (RAID), 2006.
[46] K. Wang and S. Stolfo. Anomalous payload-based network intrusion detec-
tion. In Proceedings of the International Symposium on Recent Advances
in Intrusion Detection (RAID), 2004.
[47] K. Wang and S. Stolfo. Anomalous payload-based worm detection and
In Proceedings of the International Symposium on
signature generation.
Recent Advances in Intrusion Detection (RAID), 2005.
[48] D. Whyte, P. van Oorschot, and E. Kranakis. Exposure maps: Removing
reliance on attribution during scan detection. In Proceedings of 1st USENIX
Workshop on Hot Topics in Security (HotSec’06), 2006.
[49] J. Yang, P. Ning, X. S. Wang, and S. Jajodia. Cards: A distributed system
for detecting coordinated attacks. In SEC, 2000.
[50] V. Yegneswaran, P. Barford, and V. Paxson. Using honeynets for Inter-
net situational awareness. In Proceedings of the Fourth Workshop on Hot
Topics in Networks (HotNets IV), College Park, MD, November 2005.
182
16th USENIX Security Symposium
USENIX Association