the graph to one that is, specifying a legal initial processing state for the new
node. The new TT is added to the graph as well as the edge.
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
Safety in Automated Trust Negotiation
•
375
r Add a justiﬁed edge (not already in the graph) from an old node to an old
node.
r Mark a node processed. If the sender is the veriﬁer, this marks the node
veriﬁer-processed; otherwise, it marks it opponent-processed.
These operations construct a connected graph. The legal initial processing
state of a trivial target is fully-processed. An intersection target is initially
opponent-processed and an attribute target is initially either opponent- or
veriﬁer-processed.
Satisfaction states of trust targets are not transmitted in messages; instead,
each negotiation party infers them independently. The satisfaction-state rules
presented in the next section ensure that negotiators using the protocol always
reach the same conclusions regarding node satisfaction.
4.3.4 Trust Target Satisfaction State Propagation. We now describe how
to determine the satisfaction state of targets:
r The initial satisfaction state of an attribute target is unknown. It becomes
satisﬁed when one of its implication children is satisﬁed. It becomes failed
when it is fully processed and either it has no implication child or all of its
implication children are failed.
r The initial satisfaction state of an intersection target is unknown. It becomes
satisﬁed when it is fully processed and all of its children are satisﬁed. It
becomes failed when one of its children is failed.
r A trivial target is always satisﬁed.
The legal update operations do not remove nodes or edges once they have been
added, and once a node is fully processed, it remains so thereafter. Consequently,
once a target becomes satisﬁed or failed, it retains that state for the duration
of the negotiation.
If a principal updates a TTG legally and propagates the
satisfaction state correctly, then in the TTG, when a target (cid:4)K V : K .r ?(cid:2) K S(cid:5) is sat-
isﬁed, the credentials associated with the TTG prove that hasAttr(K .r, K S). Sim-
ilarly, when a target (cid:4)K V : K1.r1 ∩ ··· ∩ Kn.rn
?(cid:2) K S(cid:5) is satisﬁed, the credentials
associated with the TTG prove that hasAttr(K1.r1, K S)∧···∧ hasAttr(Kn.rn, K S).
PROPOSITION 4.1.
The proof is found in Appendix C.
Example 6. Alice is cautious about whom she tells that she is a uni-
versity student. Her ack policy for StateU.student requires recipients of
this information to be members of the Better Business Bureau (BBB):
AckAlice(StateU.student) = BBB.member.EPub can prove this by using the fol-
lowing credential:
BBB.member ←− EPub
(A)
Notice that if an adversary were to ask Alice directly about RegistrarB.student,
Alice must not indicate whether she has the attribute unless and until the
adversary shows he satisﬁes Alice’s ack policy for StateU.student. In the next
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
376
•
W. H. Winsborough and N. Li
Fig. 3. Trust Target Graph created during negotiation between Alice and EPub. The edges labeled
(i) and (ii) represent control edges, corresponding to the dependencies given by Alice’s ack policy
(i) and those added by the auxiliary function init (ii). Implication edge (A) must be added by EPub
and the credential justifying it must be transmitted to Alice before Alice adds implication edges (3)
and (4).
section, we introduce an auxiliary function init that Alice can use to ensure her
ack policy for RegistrarB.student is restrictive enough to ensure this is handled
correctly. The TTG constructed during a negotiation between Alice and EPub
is shown in Figure 3.
4.4 A Family of TTG Strategies
In this section, we describe a family of negotiation strategies that each use
the TTG protocol. In the next section, we prove the safety of this family of
strategies.
4.4.1 An Auxiliary Conﬁguration-Initialization Function. We now deﬁne
an auxiliary function init(G) that is essential for enforcing ack policies in the
context of delegation credentials. It strengthens the ack policies of some at-
tributes so as to ensure that other attributes are adequately protected.
First, we introduce the delegation credential graph, which is a directed graph
representing the attribute implication relationships documented by credentials
in L. The node set of the graph is T (the set of all attributes) and the edge set
is as follows: for each credential K0.r0←− K1.r1 in L, there is an edge pointing
from K1.r1 to K0.r0.
The function init(G) takes G = (cid:4)K G, EG, AckG, ACG(cid:5) and returns an extended
conﬁguration, given by G = (cid:4)K G, EG, AckG, ACG, LG(cid:5). That is, the function
changes the ack policy and collects delegation credentials. We have illustrated
the need to strengthen the ack policy above in Example 6. Delegation creden-
tials are issued in a decentralized manner and stored throughout the system.
To be used by a negotiator, a delegation credential must ﬁrst be retrieved. Part
of init’s job is to retrieve the delegation credentials that may be needed during
negotiation. In practice, it is important to avoid the need to collect credentials
during negotiation because doing so could create a kind of covert channel: if
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
Safety in Automated Trust Negotiation
•
377
the adversary can observe network trafﬁc generated by the negotiator, he may
be able to infer sensitive information, for instance, that the negotiator is un-
familiar with an attribute that the adversary has asked about, and so must
not have the attribute. This must to be avoided if the attribute needs to be
protected.
Speciﬁcally, init does the following:
1. For each attribute K .r ∈ T that is sensitive (i.e., AckG (K .r)
is deﬁned),
collect all delegation credentials in L that can reach K .r in the delegation
credential graph. This enables one to determine all attributes that imply
(directly or indirectly) the sensitive attribute K .r.
2. Propagate the ack policies so that if K1.r1 implies K0.r0, then the ack policy
for K1.r1 is at least as strong as the ack policy for K0.r0 (in the sense that
AckG(K1.r1) |= AckG(K0.r0)). This defeats the forward positive- and negative-
inference attacks described in Section 2 as it ensures that when one reveals
whether one has the attribute K1.r1 or not; the ack policy for K0.r0 has also
be satisﬁed.
The propagation is achieved as follows. For each attribute K .r ∈ T , intro-
duce a new attribute name rK .r to be used for representing the ack policy of
K .r, and deﬁne K G .rK .r to be equivalent to the conjunction of the ack poli-
cies of all attributes implied by K .r. The following are technical details of
this process. We assume that the new attribute name rK .r is uniquely deter-
mined based on K .r. We create one new rule: K G .rK .r ←− K
.r(cid:3)
n in
which {K
} ⊆ TD enumerates the ack policies of every attribute
(cid:3)
.r(cid:3)
1, . . . , K (cid:3)
.r
in T reachable from K .r in the delegation credential graph, including K .r it-
self. If {K
} is empty, deﬁne AckG(K .r) = true; otherwise deﬁne
(cid:3)
.r(cid:3)
1, . . . , K (cid:3)
.r
AckG(K .r) = K G .rK .r.
3. For each attribute K .r ∈ T that is either sensitive or that is possessed by
G directly (i.e., K .r ←− K G ∈ EG), collect all credentials that are reachable
from K .r. LG is now deﬁned to be the set of all credentials collected in steps
1 and 3.
∩···∩ K (cid:3)
(cid:3)
1
(cid:3)
1
(cid:3)
1
(cid:3)
.r
1
n
n
n
n
n
Collecting credentials reachable from all attributes possessed by G enables
the negotiator to know the set of attributes it satisﬁes, as will be needed for suc-
cessful negotiation. Collecting credentials reachable from sensitive attributes
is needed to help defeat the backward negative-inference attack described in
Section 2. If t2 is implied by t1 and t1 is sensitive, but not held by G, the negotia-
tor needs to be aware of t2. When asked if he holds t2, the negotiator must not
provide the answer until the opponent proves satisfaction of the ack policies
for t1.
4.4.2 Operations of TTG Negotiation Strategies. We denote strategies in
the TTG family by TTGstrat = (cid:4)Mttg, Q ttg, rstartttg, startttg, replyttg(cid:5). Mttgis the
set of messages discussed in the previous section. Each state q ∈ Q ttg is given
by a triple consisting of an extended conﬁguration, a TTG, and an opponent
principal. The state is initialized by using one of the following two functions:
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
378
•
W. H. Winsborough and N. Li
Fig. 4. The replyttg function is the core of the TTGstrat family of strategies.
startttg(G, ρ, K S) returns the state given by q1 = (cid:4)init(G), ttg, K S(cid:5) in which ttg
consists of a single trust target, (cid:4)K G : ACG(ρ) ?(cid:2) K S(cid:5). It also
returns a message m1 that encodes this TTG initialization
step.
returns the state (cid:4)init(G), ttg, K S(cid:5) in which ttg is empty.
rstartttg(G, K S)
An important optimization is to precompute init(G) , since it is invariant
across negotiations.
The key idea underlying the function replyttg, presented in Figure 4, is as fol-
lows. When a negotiator N sees a trust target, which asks N to prove possession
of a sensitive attribute K .r, N asks the opponent to prove that it satisﬁes the
ack policy for K .r. After this is done, N reveals whether it has any type-1 cre-
dential proving possession of K .r. If some delegation credential says that K .r
is implied by K1.r1, N adds the trust target for K1.r1 and an implication edge,
and then repeats the process for K1.r1. This way, if N has attribute K1.r1 and
thus has attribute K .r, this information is released only after K1.r1’s ack policy
is also satisﬁed. This defeats the backward positive-inference attack.
The centerpiece of the replyttg function is a collection of rules for correct
processing, which deﬁne candidate updates that can be performed on the
TTG. These updates are legal, and are designed to enforce ack policies. Given
an extended conﬁguration G, an opponent principal K S, and a TTG ttg,
candidates(G, K S, tt g) return a set of candidate updates. This function is de-
ﬁned in the following sections.
replyttg is implicitly parameterized with respect to the deﬁnition of a choice
operation. By deﬁning various choice operations, different strategies in the
family are obtained. choice(outmsg, candidates) selects from among candidate
updates, candidates, one update to be performed. The choice operation signals
the end of a negotiator’s turn by returning the ﬂag value Stop. The values the
choice operation returns are assumed to satisfy the two following requirements:
naturally, choice(outmsg, ∅) = Stop; and, to ensure negotiations do not fail
needlessly, negotiators must not send empty messages if they can avoid it. Thus
when outmsg.size = 0, we assume that choice(outmsg, candidates) is not Stop
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
Safety in Automated Trust Negotiation
•
379
unless candidates is empty. Given a sequence of one or more update operations
ops and a TTG ttg on which they are legal, another primitive operation we use,
apply(ops, ttg) , returns the TTG that results.
In each of its turns, a negotiator iteratively selects an update operation and
performs it locally. These operations are transmitted at the end of the negotia-
tor’s turn, along with any credentials needed to justify them. Correctly execut-
ing negotiators continue taking turns until either the primary target is satisﬁed
(negotiation success), it is failed (negotiation failure), or neither negotiator can
perform a correct update (also negotiation failure). The latter happens if a ne-
gotiator does not have a necessary attribute, or if there is a cyclic dependence
in the policies of the two negotiators with regard to a necessary attribute. (Such
a cyclic dependence manifests itself in the TTG as a cycle involving at least two
control edges.)
The choice operation is arbitrary, provided it makes a deterministic selec-
tion among candidate updates and it satisﬁes the two requirements mentioned
above. This determinism prevents unintended information ﬂow being encoded
by the order in which updates are performed. If desired, choice can be modiﬁed
to take the current TTG as an input parameter. If a choice operation that uses
information about the history of the current negotiation is also desired, an
auxiliary component can be added to the state and maintained by the choice
operation.