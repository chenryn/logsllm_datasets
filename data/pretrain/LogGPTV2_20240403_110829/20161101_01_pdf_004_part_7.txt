 cpu_index_tuple_cost 和 cpu_operator_cost 两个未知数需要两个等式求得,
 除了公式以外, 本文利用cpu_index_tuple_cost和 cpu_operator_cost的比例得到第二个等式.
 首先我们还是要确定公式准确性, 为了方便公式验证, 把所有的常量都设置为1.
 digoal=# set random_page_cost=1;
 SET
 digoal=# set cpu_tuple_cost=1;
 SET
 digoal=# set cpu_index_tuple_cost=1;
 SET
 digoal=# set cpu_operator_cost=1;
 SET
explain代价因子校准
 digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where
id>1998999963;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align (cost=174.00..20181.67 rows=5031 width=45) (actual time=0.029..17.773
rows=5037 loops=1)
 Output: id, info, crt_time
 Index Cond: (tbl_cost_align.id > 1998999963)
 Buffers: shared hit=5054
 Total runtime: 18.477 ms
 (5 rows)
 执行计划表明这是个索引扫描, 至于扫了多少个数据块是未知的, 索引的tuples也是未知的, 已知的是cost和rows.
 20181.67 = blocks*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*?
explain代价因子校准
 求这个问号, 可以通过更改cpu_operator_cost来得到.
 digoal=# set cpu_operator_cost=2;
 SET
 digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where
id>1998999963;
 SET
 SET
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align (cost=348.00..25386.67 rows=5031 width=45) (actual time=0.013..5.785
rows=5037 loops=1)
 Output: id, info, crt_time
 Index Cond: (tbl_cost_align.id > 1998999963)
 Buffers: shared hit=5054
 Total runtime: 6.336 ms
 (5 rows)
 25386.67-20181.67 = 5205 得到本例通过索引扫描的条数. 等式就变成了
 20181.67 = blocks*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205
explain代价因子校准
 接下来要求blocks, 也就是扫描的随机页数.
 通过调整random_page_cost得到.
 digoal=# set random_page_cost = 2;
 SET
 digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where
id>1998999963;
 SET
 SET
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align (cost=348.00..30301.33 rows=5031 width=45) (actual time=0.013..5.778
rows=5037 loops=1)
 Output: id, info, crt_time
 Index Cond: (tbl_cost_align.id > 1998999963)
 Buffers: shared hit=5054
 Total runtime: 6.331 ms
 (5 rows)
 30301.33-25386.67 = 4914.66 --得到blocks = 4914.66.
explain代价因子校准
 更新等式 :
 20181.67 = 4914.66*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205
 接下来要做的是通过stap统计出random_page_cost.
 pg93@db-172-16-3-150-> taskset -c 1 /home/pg93/pgsql9.3.1/bin/postgres >/dev/null 2>&1
 [root@db-172-16-3-150 ~]# sync; echo 3 > /proc/sys/vm/drop_caches
 digoal=# select pg_backend_pid();
 pg_backend_pid
 ----------------
 10009
 (1 row)
explain代价因子校准
 [root@db-172-16-3-150 ~]# taskset -c 2 stap -e '
 global a
 probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__start") {
 delete a
 println("query__start ", user_string($arg1), "pid:", pid())
 }
 probe vfs.read.return {
 t = gettimeofday_ns() - @entry(gettimeofday_ns())
 # if (execname() == "postgres" && devname != "N/A")
 a[pid()] 1998999963;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align (cost=0.43..5003.15 rows=5031 width=45) (actual time=0.609..1844.415
rows=5037 loops=1)
 Output: id, info, crt_time
 Index Cond: (tbl_cost_align.id > 1998999963)
 Buffers: shared hit=152 read=4902
 Total runtime: 1846.683 ms
 (5 rows)
explain代价因子校准
 query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;pid:10009
 10009**4946**368362 -- 得到random_page_cost
 query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;pid:10009
 value |-------------------------------------------------- count
 2048 | 0
 4096 | 0
 8192 | 33
 16384 | 2
 32768 | 6
 65536 | 4
 131072 |@@@@@@@@@@@@@@@@@@@ 1193
 262144 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 2971
 524288 |@@@@@@@@@@@@ 729
 1048576 | 2
 2097152 | 5
 4194304 | 0
 8388608 | 1
 16777216 | 0
 33554432 | 0
explain代价因子校准
 更新等式, 使用时间等式 :
 等式1 :
 1844.415 = 4914.66*0.368362 + 0.00018884145574257426*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205
 cpu_tuple_cost用例子1中计算得到的0.00018884145574257426
 cpu_index_tuple_cost和cpu_operator_cost的比例用系统默认的2 : 1.
 等式2 :
 cpu_index_tuple_cost/cpu_operator_cost = 2
 最终得到 :
 cpu_index_tuple_cost = 0.00433497085216479990
 cpu_operator_cost = 0.00216748542608239995
explain代价因子校准
 结合例子1 得到的两个常量, 所有的5个常量值就调整好了.
 digoal=# set cpu_tuple_cost=0.00018884145574257426;
 SET
 digoal=# set cpu_index_tuple_cost = 0.00433497085216479990;
 SET
 digoal=# set cpu_operator_cost = 0.00216748542608239995;
 SET
 digoal=# set seq_page_cost=0.014329;
 SET
 digoal=# set random_page_cost = 0.368362;
 SET
 校准代价因子练习
auto_explain插件的使用
 http://blog.163.com/digoal@126/blog/static/16387704020115825612145/
 auto_explain的目的是给数据库中执行的SQL语句一个执行时间阈值, 超过阈值的话, 记录下当时这个SQL的执行计划到日
志中, 便于未来查看这个SQL执行计划有没有问题.
 编译安装
 [root@db-172-16-3-150 ~]# export PAHT=/home/pg93/pgsql/bin:$PATH
 [root@db-172-16-3-150 ~]# which pg_config
 /usr/bin/pg_config
 [root@db-172-16-3-150 ~]# cd /opt/soft_bak/postgresql-9.3.1/contrib/auto_explain/
 [root@db-172-16-3-150 auto_explain]# gmake clean
 [root@db-172-16-3-150 auto_explain]# gmake
 [root@db-172-16-3-150 auto_explain]# gmake install
 auto_explain 有两种使用方法
 会话级使用
 数据库级使用
auto_explain插件的使用
 会话级使用举例
 digoal=# load 'auto_explain';
 LOAD
 digoal=# set auto_explain.log_min_duration=0; 设置SQL执行时间阈值
 SET
 digoal=# select * from t limit 1;
 查看日志
 2013-12-10 14:32:15.587 CST,"postgres","digoal",12933,"[local]",52a6b506.3285,11,"SELECT",2013-12-10 14:30:30
CST,2/180059,0,LOG,00000,"duration: 0.043 ms plan:
 Query Text: select * from t limit 1;
 Limit (cost=0.00..0.03 rows=1 width=108)
 -> Seq Scan on t (cost=0.00..1409091.04 rows=50000004 width=108)",,,,,,,,"explain_ExecutorEnd, auto_explain.c:320","psql"
auto_explain插件的使用
 数据库级使用
 vi $PGDATA/postgresql.conf
 shared_preload_libraries = 'pg_stat_statements, auto_explain'
 auto_explain.log_min_duration = 100ms
 修改shared_preload_libraries需要重启数据库
 pg93@db-172-16-3-150-> pg_ctl restart -m fast
练习
 使用auto_explain跟踪慢SQL的执行计划
 explain代价因子的校准
连接池及数据库高速缓存
 连接池及数据库高速缓存
 目标:
 以pgbouncer为例, 理解数据库连接池在短连接环境下的好处, 连接池的几种模式和使用场景
 几种外部高速缓存的介绍, 如os 层缓存pgfincore, K-V缓存pgmemcached的使用.
连接池
 为什么要使用连接池?
 理由一, 由于PostgreSQL是进程模式, 短连接会带来性能问题. 看几个测试结果 :
 pg93@db-172-16-3-150-> vi test.sql
 select 1;
 短连接模式的tps.
 pg93@db-172-16-3-150-> pgbench -M extended -n -r -f ./test.sql -c 16 -j 4 -C -T 30
 transaction type: Custom query
 scaling factor: 1
 query mode: extended
 number of clients: 16
 number of threads: 4
 duration: 30 s
 number of transactions actually processed: 36100
 tps = 1203.128160 (including connections establishing)
 tps = 97264.142873 (excluding connections establishing)
 statement latencies in milliseconds:
 9.993634 select 1;
连接池
 长连接模式的tps
 pg93@db-172-16-3-150-> pgbench -M extended -n -r -f ./test.sql -c 16 -j 4 -T 30
 transaction type: Custom query
 scaling factor: 1
 query mode: extended
 number of clients: 16
 number of threads: 4
 duration: 30 s
 number of transactions actually processed: 2571870
 tps = 85724.228018 (including connections establishing)
 tps = 85767.412365 (excluding connections establishing)
 statement latencies in milliseconds:
 0.185190 select 1;
连接池
 使用prepared模式的tps
 pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 30
 transaction type: Custom query
 scaling factor: 1
 query mode: prepared
 number of clients: 16
 number of threads: 4
 duration: 30 s
 number of transactions actually processed: 3695465