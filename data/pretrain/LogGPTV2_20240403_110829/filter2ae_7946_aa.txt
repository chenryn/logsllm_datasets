**作者：LeadroyaL  
原文链接：[https://www.leadroyal.cn/p=1036&from=groupmessage&isappinstalled=0](https://www.leadroyal.cn/p=1036&from=groupmessage&isappinstalled=0)**
2020年2月12日，Zhiniang Peng 在 github 上公开了对于
[shadowsocks](http://https://github.com/edwardz246003/shadowsocks.git
"shadowsocks") 的攻击理论,在阅读完作者的文档后获益匪浅，但 github
中主要是理论，代码和场景写的描述的非常混乱，本文亲自演示一遍整个流程，把整个攻击演示的更清楚。
感谢 chenyuan 的帮助和交流。
本文的全部代码位于：
## 一、背景
情景假设：
  1. client 的网络是不安全的，攻击者可以监听 client 所有的流量；
  2. server 的网络是安全的
  3. server 长期存活。
漏洞危害（个人观点）：
  1. 对于加密后的 HTTP Response，攻击者可以解密所有的返回包，严谨一点，是 Response 的绝大部分数据
  2. 对于某个加密后的 HTTP Request，如果攻击者猜中了域名，攻击者就可以解密该 Request，严谨一点，是Request的绝大部分数据
  3. 对于某个加密后的 HTTPS Request，如果攻击者猜中了域名，攻击者就可以确认该 Request 确实属于该域名
本文以 python 版的 ss 和 AES-CFB-256为例，讲述一下上面这三种攻击方式。
## 二、整体逻辑
浏览器使用 socks5代理，将数据发给 sslocal服务，sslocal 将数据加密后传递给 ssserver，ssserver
解密数据，访问指定资源，返回加密的数据，sslocal 再解密返回给浏览器。
整个过程比较容易理解，接下来通过阅读代码的方式讲一下整个流程，着重看数据拼接和加密部分。
### sslocal发包流程：
tcpRelay.py 中，类TCPRelayHandler 构造方法里，主动创建 Encryptor结构体。
Encryptor 结构体初始化时，使用 config 里的“PASS”密钥，作为种子，生成真正的 key，将来长期使用，随机产生
rand_iv，在当前数据包中使用。
使用命令 `curl --socks5 127.0.0.1:1080 http://a.baidu.com`，使用socks5 代理，尝试访问
a.baidu.com。
tcpRelay.py中， `_handle_stage_addr` 收到socks5
的协议头，稍加解析和验证，将该数据使用`AES.update(socks5Header)`
tcpRelay.py 中，`_handle_stage_connecting` 收到 HTTP 请求的数据，并将改数据使用
`AES.update(httpRequest)`
最终组合好的明文数据是：
`data = sock5Header + httpRequest`
最终发给服务器最后的数据是：
`rand_iv + AES-cfb(key, rand_iv, data)`
ssserver收包过程省略、ssserver 发包过程省略
### sslocal收包
tcpRelay.py 中， _on_remote_read 收到了 ssserver 返回的数据，前 16 字节是server 生成的
rand_iv2，后面的数据是密文，解密后就是返回包的内容。
相当于：
`httpResponse = AES-cfb(key, rand_iv2, recv_data)`
攻击者只知道 rand_iv、rand_iv2，不知道key，因此无法直接解密整个request 和 response。
## 三、CFB加密模式：
以 AES-256-CFB 为例，它是一种流式加密而不是分组加密，不会直接将明文进行AES 操作，而是
XOR(明文,AES(密文))来计算，因此可以粗略地理解为一个序列无限长的 xor 操作。
CFB 的特性，长话短说，放三个结论：
  1. CFB 的加密和解密函数是一模一样的，因为最后一步是 xor，也就是说连续加密 2 遍就是本身
  2. 密文的某个 byte 被篡改后，解密出来的该 byte 是错的，第 N+1 个block也是错的，其他数据都是正确的
  3. 在给定的 key 和 iv 下，cfb 的每个 block 退化为普通的 xor，已知某段明文和和对应的密文时，可以算出使用的 xor_key，从而可以对该段明文密文进行伪造。【！！！特别注意这条，之后会用到！！！！】
下面的代码（为了便于观看就是0x00 了）可以说明，加密和解密是一样的，最终结果确实是明文和 AES(IV)的异或。请一定要添加
segment_size=128，因为 pycrypto （pycryptodome）的 CFB 默认是1 字节的
    In [13]: cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128); print(cipher.encrypt(b'\x00'*5).hex())
    c4ebba6062
    In [14]: cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128); print(cipher.decrypt(b'\x00'*5).hex())
    c4ebba6062
    In [15]: cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128); print(cipher.encrypt(bytes.fromhex('c4ebba6062')).hex())
    0000000000
    In [16]: cipher = AES.new(key, AES.MODE_ECB); print(cipher.encrypt(iv).hex())
    c4ebba606297fc5984dc75e2e5f70430
## 四、攻击案例一：解密 HTTP返回包
还是熟悉的例子， `sslocal-1080` ， `ssserver-1081`， `curl --socks5 127.0.0.1:1080
http://a.baidu.com`添加适当的日志，在 `ss-local` 中有如下的日志，与抓包结果相符。（pcap 可以在 git 仓库里找到）
（嫌麻烦的可以只看标题，跳过这堆数据）
#### 初始化 key 和 iv
2020-02-15 18:20:40 INFO | AES-key =
7a95bf926a0333f57705aeac07a362a2daea958c0a0cf8e1e2843b62b127f809  
---|---  
2020-02-15 18:20:49 INFO | encrypt set_iv = 597623d791c86c0e69da60d78de8c6e8  
2020-02-15 18:20:49 INFO | connecting 123.125.114.38:80 from 127.0.0.1:63126  
#### IV 拼接 AES.update(socks5Headers)
在使用 IPV4 的情况下，socks5Headers遵循该协议：[0x01 + IP + port]
例如 `017b7d72260050` 表示 `123.125.114.38:80`
2020-02-15 18:20:49 INFO | encrypt input 017b7d72260050  
---|---  
2020-02-15 18:20:49 INFO | encrypt ret
=597623d791c86c0e69da60d78de8c6e85e0639f44d3611  
#### AES.update(httpRequest)
2020-02-15 18:20:49 INFO | encrypt
input474554202f20485454502f312e310d0a486f73743a20612e62616964752e636f6d0d0a557365722d4167656e743a206375726c2f372e36342e310d0a4163636570743a202a2f2a0d0a0d0a  
---|---  
2020-02-15 18:20:49 INFO | encrypt ret