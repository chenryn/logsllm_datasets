tion through encrypted tunnels. Bumpy is built around
encryption-capable input devices sending input events di-
rectly into a Pre-Processor (PreP) protected by the Flicker
system on the user’s computer. Bumpy allows the remote
webserver to control (within certain limits) how users’ sen-
sitive input is processed after it is entered with Bumpy. We
term this Post-Processing, and enable it by allowing the
webserver to provide a post-processor (PoPr) along with
web content. Bumpy tracks and isolates PoPrs from differ-
ent webservers, as well as supports standardized PoPrs that
may be used across many websites. Leveraging the Flicker
system [18], the PreP and PoPrs execute in isolation from
each other and from the legacy OS.
Encryption and password-hashing are two desirable
forms of post-processing of user input. Site-speciﬁc hash-
ing of passwords (as in PwdHash [25]) can provide pass-
word diversity across multiple websites, and prevent the
webserver from ever having to handle the user’s true pass-
word. Dedicated post-processing with server-supplied code
can resolve issues with the PwdHash [25] algorithm pro-
ducing unacceptable passwords (e.g., passwords without
any punctuation characters that violate the site’s password
requirements) or passwords from a reduced namespace,
since the webserver itself provides the algorithm. Encrypt-
ing input directly within the Bumpy environment to the re-
mote webserver dramatically reduces the client-side TCB
for sensitive user input.
4
Identifying and Isolating Sensitive Input
is protected from the legacy OS. Section 5 treats the post-
processing and delivery of this input to approved remote
servers. We identify three requirements for protecting user
input against a potentially malicious legacy OS:
R1 All input must be captured and isolated.
R2 Sensitive input must be distinguishable from non-
sensitive input.
R3 The ﬁnal destination for sensitive input must be iden-
tiﬁable.
Requirement R1 for protecting user input is to acquire
the input without exposing it to the legacy OS. The chal-
lenge here is that we wish to avoid dependence on a VMM
or hypervisor and retain the OS in charge of device I/O.
We propose to use encryption-capable input devices to
send opaque input events through the untrusted OS to a
special-purpose Piece of Application Logic (PAL) that is
protected by the Flicker [18] system (Steps 1–4 in Figure 2).
This PAL is architected in two components. The ﬁrst is
speciﬁcally designed to Pre-Process encrypted input events
from the input devices, and we call it the PreP. The PreP
achieves requirement R2 by monitoring the user’s input
stream for the secure attention sequence “@@” introduced in
Section 3.2, and then taking appropriate action (which af-
fects what input event is released in Step 5 of Figure 2). The
PreP serves as the source of input events for post-processing
by a destination-speciﬁc Post-Processor (PoPr). The pro-
cess of authenticating a PoPr serves to identify the ﬁnal
destination for sensitive input (requirement R3). The PoPr
encrypts or otherwise processes the received input for the
remote server (Steps 6–8 in Figure 2).
These components are separated so that the PreP’s sensi-
tive state information can be kept isolated from the PoPr, as
Bumpy supports multiple, mutually distrusting PoPrs that
accept input events from the same PreP. The PreP’s state in-
formation includes the cryptographic state associated with
the encrypting input devices, the currently active PoPr, and
a queue of buffered input events. The PreP’s state is pro-
tected by encrypting it under a master key that is maintained
on the user’s TPM chip. The properties of Flicker [18] guar-
antee that no code other than the exact PreP can access it.
For the following sections we encourage readers not inti-
mately familiar with trusted computing technology to read
Appendix A before proceeding.
We defer discussion of the one-time setup of the crypto-
graphic state associated with the encrypting input device(s)
until Section 4.2. We proceed assuming that the setup has
already been completed.
4.1 Steady(cid:173)State User Input Protection
In this section, we focus on acquiring input from the
user in the PreP, and storing sensitive input such that it
We describe the actions taken by the PreP in response
to user input events and events from the web browser. The
state machine in Figure 3 summarizes these actions.
5. PreP releases
    input event
    to OS / App
Legacy
Operating
System
Web Browser
Extension
7. PoPr output
    handled by
    web browser
Internet
PreP
PoPr 1
...
PoPr N
Flicker
Web
Server
Encrypting Input Devices
KB &
Mouse
USB Interposer
1. User presses
    key / button
2. Keystroke
    encrypted
3. OS handles
    ciphertext
4. OS invokes
    PreP / Flicker
6. PoPr invoked
    with queue
8. Webserver receives
    PoPr output
Figure 2. Acquiring user input with Bumpy. Steps 1–5 (described in Section 4) occur for every
keystroke or mouse click performed by the user. Steps 6–8 (described in Section 5) occur only in
response to a keystroke or mouse click that the PreP detects will cause a blur event (in the web
browser GUI sense) while the user is entering sensitive data. We revisit this ﬁgure in Section 8.3
while describing the life of a keystroke within our implementation.
Every event e is processed in a distinct Flicker session,
i.e., the PreP only accepts a single event as an input parame-
ter. We design Bumpy this way out of necessity, due to two
conﬂicting desires. The ﬁrst is to avoid trusting the OS, and
the second is to remain responsive to the user as she pro-
vides input to her system. One consequence of this design
is that every Flicker session (i.e., PreP invocation) begins
and ends with the decryption and encryption of the PreP’s
sensitive state information, respectively.
The legacy OS provides arguments for each invocation
of the PreP: the event e to be processed, the SSL certiﬁcate
for the active website, the PoPr associated with the active
website, and the PreP’s encrypted state. Each event e can
be an encrypted keystroke or mouse click, or it can be a fo-
cus event2 from the browser. All other event types from the
browser are ignored. The PreP maintains in its state the nec-
essary cryptographic information to decrypt and integrity-
check input events from the input device(s). The master
keys used to protect the secrecy and integrity of the PreP’s
state are TPM-protected based on the identity of the PreP.
We describe these protocols in greater detail as part of our
implementation in Section 8.
During each run of the PreP (i.e., during each Flicker
session in Step 4 of Figure 2), the state machine (Figure 3)
begins in PreP Initialization and transitions to the state
where the previous PreP invocation ended (maintained as
State.Prev in Figure 3), where the current event then causes
a single transition. Actions listed in a state are performed
2A focus event is an event in the web browser’s graphical user interface
where a new component such as an HTML text input ﬁeld becomes active.
This generally follows a blur event caused by the previously focused com-
ponent becoming inactive. These events ﬁre in response to user actions,
such as clicking the mouse.
when an event causes arrival into that state (as opposed
to returning to a state because of the value of State.Prev).
If there is no action for a particular event in a particular
state, then that event is ignored. For example, browser fo-
cus events are ignored in the Second @, Enqueue Input, and
Invoke PoPr states.
PreP Initialization. Regardless of the previous state of
the PreP, it always performs an initialization step. The
PreP ﬁrst decrypts and integrity-checks its own long-term
state, veriﬁes that the provided SSL certiﬁcate is valid us-
ing its own list of trusted certiﬁcate authorities (which we
deﬁne as being part of the PreP itself), and veriﬁes that the
provided PoPr is signed by the provided SSL certiﬁcate.
(If any of these veriﬁcation steps fail, the current event is
dropped.) Next, the incoming event e is processed. If it is
an encrypted input event from the input device(s), then it is
decrypted, integrity-checked, and veriﬁed to be in-sequence
(using cryptographic keys and a sequence number main-
tained in the PreP’s state). If any of the steps involving syn-
chronization with the input device(s) fail, then input events
can no longer be received. We discuss options for recovery
in Section 8.2.3.
The PreP then transitions to State.Prev where e will
cause one additional state transition. During the very ﬁrst
invocation of a PreP, it transitions to Pass Input Unmodi-
ﬁed. The following paragraphs describe the actions taken
upon entry to a state caused by an event, not by State.Prev.
At the end of each of these states, the PreP’s sensitive long-
term state is sealed3 using the TPM-protected master key,
3Sealed means that the state is encrypted and integrity-protected (by
computing a MAC) for subsequent decryption and integrity-veriﬁcation.
This use of sealed is consistent with the TPM’s sealed storage facility,
Event e, SSL cert, PoPr, SealedState
PreP initialization
Prev = P.I.U.
Pass Input Unmodified
1. Unseal SealedState
2. Verify SSL cert
3. Decrypt e
e ≠ B: Focus
1. State.Prev = P.I.U.
2. Clear State.Queue
3. Output e
focus event, State.Prev is set to remain in the Pass Input
Unmodiﬁed state. The current input event is not considered
sensitive, and it is provided as an output when the PreP ex-
its. The legacy OS then interprets this input event just as it
does today.
S
S
L
C
e
r
t
i
f
i
c
a
t
e
V
e
r
i
f
i
c
a
t
i
o
n
F
a
i
l
e
d
e = B: Focus
Prev =
Focused
Focused
1. State.Tag = e.Field
2. State.Prev = Focused
3. State.PoPrID = 
    hash(SSL cert||PoPr)
e ≠ KP:@
Prev =
@
Prev =
@@
Prev =
EnQ
e = KP: @
First @
1. State.Prev = @
2. Output e
e = KP: @
Second @
1. State.Prev = @@
2. Output e
e ≠ KP:@
e = KP: Blur
e = KP: ¬Blur
Enqueue Input
1. State.Prev = EnQ
2. Filter e
3. Output *
e = KP: Blur
Invoke PoPr
1. Q = State.Queue
2. T = State.Tag
3. PoPr ?= State.PoPrID
4. PoPr(SSL cert, Q, T)
Figure 3. States of the PreP. KP = keypress
or mouse click. B:Focus = browser GUI fo-
cus event. Blur indicates action taken in
response to events on the encrypted input
channel that cause a GUI blur event (e.g., Tab,
Shift+Tab, Enter, or mouse click).
and then cleared (set to zero) before the PreP terminates and
produces output. Untrusted code running on the OS main-
tains the ciphertext that makes up the PreP’s sealed state
and provides it as input to the PreP’s next invocation.
Focused. A browser focus event contains the name of the
ﬁeld that has just received focus (e.Field). The PreP saves
the cryptographic hash of the current PoPr and its SSL cer-
tiﬁcate (which was validated during PreP Initialization) as
the PoPrID . It is necessary to track the PoPrID to ensure
that the PoPr is not maliciously exchanged while the user
is typing sensitive input. When invoked with a keystroke,
a PreP in the Focused state checks whether the keystroke
is the @ character. If so, the PreP transitions to the First @
state. Otherwise, the PreP transitions back to the Pass Input
Unmodiﬁed state. The keystroke is output to the legacy OS
for processing. Note that the @ keystroke is not secret; it
serves only to signify that the user may be about to enter
something she considers sensitive.
First @. We have deﬁned the secure attention sequence
for Bumpy to be @@ in the input stream immediately follow-
ing a browser focus event. This state serves to keep track
of the @ characters that the user enters. It is possible that
the user is in the process of initiating sensitive input. When
invoked with a keystroke that is the @ character, the system