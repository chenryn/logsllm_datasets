I'm trying to design a single query that creates a node including input/output
links with possible linking to existing nodes. Creation stages are separated
by cardinality reduction clauses using `LIMIT 1`. This method prevents
creation of certain nodes in preceding `CREATE` clause, however.
  * Neo4j version: 3.4.6
  * Operating system: macOs 10.13.6
  * API/Driver: Cypher in neo4j browser
### Steps to reproduce
  1. Create a structure that next step is going to build upon:
    CREATE (m:Move {id: "m1"})
    WITH m
    UNWIND [{i: 0}, {i: 1}, {i: 2}] as p
    CREATE (m)-[:OUT]->(:Position {id: p.i})
  2. Tie to output positions from previous step:
    CREATE (m:Move {id: "m2"})
    WITH m
    UNWIND [{pid: 0}, {pid: 1}] as i
    MATCH (p:Position {id: i.pid})
    CREATE (p)-[:IN]->(m)
    WITH m LIMIT 1
    UNWIND [{pid: 2, addr: "street"}] as i
    MATCH (p:Position {id: i.pid})
    MERGE (p)-[:IS_A]->(a:Place {id: i.addr})
    CREATE (p)-[:IN]->(m)
### Expected behavior
All positions are linked to m2 by IN edges.
![correct](https://user-
images.githubusercontent.com/936155/44881933-a0b1dd00-acb1-11e8-88aa-c6a1eb9453f7.png)
### Actual behavior
Position 1 is not linked.
![wrong](https://user-
images.githubusercontent.com/936155/44881939-a4ddfa80-acb1-11e8-8734-b4dfcc8f3c11.png)
The problem seems to be in cardinality reducing `WITH m LIMIT 1` because it
prevents creation of the link according to second map in first unwind (just to
test â€“ link is created when using `WITH m LIMIT 2` but that leads to duplicate
link from second unwind of course). I could use `WITH distinct m` but that is
more expensive construct.
I do not think that WITH clause should have this "backward" effect so I
consider it a bug for now. I would welcome an explanation if I'm wrong :)
Thanks!