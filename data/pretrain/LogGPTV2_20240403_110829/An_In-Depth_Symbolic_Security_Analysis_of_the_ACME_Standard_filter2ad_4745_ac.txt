### Satisfying the Predicate
The `auth_send` function can only be invoked by an honest sender if the message it intends to place on the global trace satisfies a specific predicate (as defined in the `requires` clause of that function). Conversely, when a party receives such a message, it can be confident that either the predicate is satisfied or the sender is corrupted (as specified in the `ensures` clause of the `receive` function). We extend the `valid_trace` predicate to ensure that for every authenticated message, either the (apparent) sender is corrupted, or the `auth_send_pred` holds. This concept significantly generalizes the basic notion of an authenticated channel. It allows us not only to express that a message was sent by a certain sender but also to specify that the message has certain properties and, for example, that the (honest) sender, when sending this message, was in a particular state. The `auth_send_pred` can be customized per application, thus precisely reflecting relevant aspects of the behavior of honest parties in that application.

### Modeling Key Substitution Attacks
Key substitution attacks [46] (also known as duplicate signature key selection [19] or (no) exclusive ownership attacks [48]) are subtle vulnerabilities in signature schemes that are not excluded by standard cryptographic security definitions for signatures. These vulnerabilities can lead to attacks on protocols, with an early draft of ACME being one example [2] (see also Section 5). However, the default model of signatures in DY★ does not account for such attacks.

We extend the algebraic model of signatures in DY★ to allow key substitution attacks. Specifically, following [36], we define (no) destructive exclusive ownership (DEO) and (no) conservative exclusive ownership (CEO), with CEO being a special case of DEO. If a signature scheme fails to provide DEO, an attacker can, given a signature \( s \) on a message \( m \), forge a new verification key for a message \( m' \) (possibly different from \( m \)) such that \( s \) verifies under the new key for \( m' \).

To enable this, we introduce a function:
```ocaml
val deo_gen: m':bytes → sig:bytes → bytes
```
This function generates a new type of DY★ bytes:
```ocaml
type bytes = ... | DEOgen: m':bytes → sig:bytes → bytes | ...
```
We extend the `verify` function for signatures so that if the provided verification key is of this type, the verification succeeds if the (forged) key was generated for the signature and message. We verify this property using the following lemma:
```ocaml
val deo_gen_verify_lemma: m:bytes → m':bytes → sk:bytes →
Lemma (ensures (verify (pk (deo_gen m' (sign sk m))) m' (sign sk m) == true))
```
This lemma is automatically proven by F★’s type checker. DY★ contains similar lemmas to ensure that signatures work as intended. These are unaffected by our change but illustrate that our extension does not break the existing semantics of signatures. However, one lemma fails under this modification:
```ocaml
val sign_verify_lemma: vk:bytes → msg:bytes → tag:bytes →
Lemma (verify vk msg tag =⇒
(∃ sk msg' . tag == sign sk msg' ∧ vk = pk sk ∧ msg = msg'))
```
This lemma states that any signature must have been created with the correct key, which is no longer the case. Therefore, we remove this lemma from the (extended) DY★ framework.

No-CEO is a special case of no-DEO where \( m' = m \) (see, e.g., [48]). We formalize no-CEO similarly to no-DEO.

### Our Approach for Interoperability
As mentioned in Section 2, DY★ allows for symbolic debugging of model code and enables us to execute and test our model as a sanity check. However, there might still be subtle mismatches between the model and the real-world specification. To address this, we test a DY★ model against a real-world implementation by taking the symbolic implementation of one party, connecting it to a real network, and running it with real-world counterparts. This approach checks for interoperability, strengthening confidence in the model and illustrating that the model is as precise as a reference implementation.

To achieve this, we leverage the symbolic debugging feature of DY★ to compile our verified model (including the DY★ framework) to OCaml code. We then implement a wrapper in OCaml that connects the (now) executable model with the real world (see Figure 1). This wrapper primarily translates messages from real bytes to symbolic bytes and vice versa. It maintains a mapping between symbolic nonces and keys to their concrete counterparts. Based on the message received from the real network, the wrapper selects the protocol endpoint to call. Some parts of the wrapper are application-specific, but it does not perform deeper application logic or state management. The code generated from the DY★ model remains unchanged and is called by the wrapper to carry out the protocol. For instance, the code still maintains the trace as a (now local) data structure to keep state. We illustrate our approach in Section 8, using ACME as an example.

Our approach for interoperability does not aim to yield a fully verified real-world executable but rather allows us to perform in-depth functional tests of the entire (verified) model with real-world counterparts.

### The ACME Protocol
The ACME standard defines a protocol between a client and a server. In practice, a web server that wants to obtain a new certificate acts as an ACME client, and a Certificate Authority (CA) acts as an ACME server. To request a certificate, the ACME client creates an order for one or more of its own domains and sends the order to the ACME server. The ACME server responds with an authorization message containing one or more challenges (usually a nonce) for each domain. The client publishes each challenge on the HTTP web server or DNS server of the corresponding domain (along with some other data) to prove that it controls the domains.

The ACME server verifies that the challenges have been published correctly for all requested domains. Finally, the client creates a key pair for the domains and provides the ACME server with the public key (contained in an X.509 certificate signing request (CSR)). The ACME server then issues a certificate containing the public key and all previously requested domains.

In Step 1, the client creates an asymmetric key pair \((pk_{acc}, sk_{acc})\) that will be used to sign and verify protocol messages sent to the ACME server. The client registers \(pk_{acc}\) at the server, which creates an account identified by a URL \(i_{acc}\) for this key and sends it to the client. The client stores the identifier along with the corresponding key pair, and each subsequent request to the server includes \(i_{acc}\) and is signed with \(sk_{acc}\).

To request a new certificate, the client creates an order for a set of domains. For each domain, the server generates an authorization object that tracks the ownership verification. Each authorization is identified by a URL \(a_j\) and includes one or more challenges, one for each verification method supported by the server. Each challenge is identified by a URL \(ck_j\), which is later used to indicate which challenge the client decided to solve. For each challenge, the server also generates a nonce \(tk_j\). The server further generates a finalize URL \(fo\) for the order, which the client uses at the end of the flow to request the actual certificate. After the order is created, the server provides the client with meta-information about the order, including the authorization URLs and the finalize URL, which the client needs to know to perform later steps of the protocol.

To prove ownership of each domain, the client retrieves the respective authorization object (including the challenges) from the server. To make an authorization valid, the client can choose one of the challenges (say challenge \(l\)), as solving one challenge is sufficient for ACME. Typically, a challenge involves publishing the nonce \(tl_j\) (concatenated with \(pk_{acc}\)) in a way that only someone with a high level of control over the domain can do. To trigger verification of the chosen challenge, the client sends a request to the URL \(cl_j\). The ACME server checks whether the client published the nonce correctly by sending an HTTP request to a well-known path of the respective domain. The server verifies that the HTTP response sent by the client's web server contains \((tl_j, pk_{acc})\) and records that the authorization has been successfully verified. The ACME standard assumes that an attacker cannot spoof or manipulate the verification response; otherwise, an attacker could trivially attack ACME and verify ownership of arbitrary domains. In our model, we use an authenticated channel to transfer the message of Step 16 (all other messages are sent over an insecure channel).

After the ACME server successfully verifies each authorization, the server considers the order of the certificate to be valid and allows the client to request a certificate. The client creates a fresh key pair along with a corresponding X.509 CSR and transfers the CSR to the server. The ACME server checks whether the CSR lists the same set of domains as the order and, if the check succeeds, issues the certificate for the CSR and provides the certificate to the client, which stores the certificate for usage.

### Informal Security Goals
Informally, the ACME protocol aims to ensure that clients can obtain certificates only for domains under their control. The security considerations section of the ACME specification divides this goal into two concrete statements: (1) A client should only be able to get authorizations for domains it controls, and (2) authorizations for a domain associated with an account (via the account public key) should not be used by other accounts. Without these properties, an attacker could obtain certificates for someone else’s domains.

### Attacks and Vulnerabilities
The 100-page ACME standard [5] forms a complex, asynchronous protocol with unbounded recursive control flows, complex state management, and messages with unbounded data structures. Potential flaws and problems can occur at various levels, including logical and implementation flaws, as well as ambiguities in the RFC that programmers might interpret incorrectly.

For example, in an early draft of the standard, the value published for domain ownership verification used to be \(\sigma = \text{sign}(t_l, pk_{acc})\), i.e., the client published only the value of a signature on the respective domain challenge \(t_l\). Since ACME allows clients to use signature schemes that do not provide DEO, such as RSA-PSS and certain instantiations of ECDSA, an adversary can easily carry out an attack to obtain a certificate for a domain of some honest client [2]. After the honest client has published \(\sigma\) for her domain \(d\), the adversary uses its own account to start another ACME flow for \(d\). After the ACME server has issued a new challenge \(t'\) to verify ownership of \(d\), the adversary forges a new key pair for its account such that \(\sigma\) is a valid signature for the challenge \(t'\) under the attacker’s new public account key.

One of the most important implementations of an ACME server, Boulder, contained an implementation error in the ownership verification loop for domains, which resulted in Boulder checking only the first domain in the list of an order, allowing an adversary to obtain certificates for domains it does not own [35]. As a result of this error, Let’s Encrypt had to revoke more than 3 million certificates.

### Overview of Lines of Code and Verification Time
| Category          | DY★       | ACME Model | Total    |
|-------------------|-----------|------------|----------|
| # Modules         | 13        | 37         | 50       |
| fLoC              | 5,986     | 5,531      | 10,722   |
| pLoC              | 2,180     | 7,711      | 16,708   |
| Σ LoC             | 8,166     | 13,242     | 26,708   |
| Time              | 6 min     | 61 min     | 67 min   |

Table 1: Overview of lines of code and verification time, including the number of modules, functional lines of code (fLoC), lines of code for proofs and security properties (pLoC), and the verification time using the F★ type checker on an off-the-shelf machine (single-core on Intel Xeon E5-2620 v4 @ 2.1 GHz). Note that verification in DY★ is modular; each module is verified independently.