在命令行中运行它以查看哪些进程处于活动状态：
kali \>ps
PID TTY TIME CMD
39659 pts/0 00:00:01 bash
39665 pts/0 00:00:00 ps
Linux内核是操作系统的核心，在创建进程时按顺序为每个进程分配一个唯一的进程ID（PID）。在Linux中使用这些进程时，通常需要指定它们的PID，因此进程的PID比进程的名称更重要。当没有使用参数的时候，**ps**命令并没有真正为您提供太多信息。
当前登录的用户（在我们的例子中是root）以及该终端上正在运行的进程。在这里，它只是说bash
shell是打开并运行的，我们使用了**ps**命令。我们想要并且需要更多的信息，尤其是关于这些进程由其他用户和后台系统运行。如果没有这些信息，我们对系统实际发生的情况知之甚少。使用选项aux运行ps命令将显示在其上运行的所有进程
系统适用于所有用户，如清单6-1所示。请注意，您不要在这些选项前添加前缀
使用短划线（ -
）并且所有内容都是小写的，因为Linux是大小写敏感的，所以使用大写选项会给你带来截然不同的结果。
kali \>ps aux
USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
Root 1 0.0 0.4 202540 6396 ? Ss Apr24 0:46 /sbin/init
Root 2 0.0 0.0 0 0 ? S Apr24 0:00 [kthreadd]
Root 3 0.0 0.0 0 0 ? S Apr24 0:26 [ksoftirqd/0]
­­snip­­
root 39706 0.0 0.2 36096 3204 pts/0 R+ 15:05 0:00 ps aux
*清单6­1: 使用aux 参数查看进程*
正如您所看到的，此命令现在列出了很多进程，它们可能会在屏幕底部运行。一个进程是init，列在最后一列，最后一个进程是我们运行显示的命令，**ps
aux**。许多细节（PID，％CPU，TIME，COMMAND等）可能在您的系统上有所不同，但应具有相同的格式。出于我们的目的，以下是此输出中最重要的列：
**USER** 进程用户
**PID** 进程id
%**CPU** CPU占用率
**%MEM** 进程CPU占用率
**COMMAND** 进程名
通常，要对进程执行任何操作，我们必须指定其PID。让我们看看如何使用这个标识符对我们更便利。
#### *通过进程名过滤进程*
当我们对进程执行操作时，我们通常不希望屏幕上显示所有进程细节。这是一个信息太多的问题。通常，我们希望查找有关单个进程的信息。为此，我们可以使用过滤命令**grep**，我在第1章中介绍过。
为了演示，我们将使用最广泛使用的开发框架和几乎每个黑客的好朋友Metasploit框架。这将安装在您的Kali系统上，因此请使用以下命令启动Metasploit：
kali \>msfconsole
开始使用Metasploit框架，让我们看看我们是否可以在进程列表中找到它。为此，请使用**ps
aux**命令，然后将其（\|）传递给grep寻找字符串msfconsole，如清单图6-2：
kali \>ps aux \| grep msfconsole
root 39756 0.0 0.0 4304 716 pts/2 Ss+ 15:13 0:00 sh ­c service postgresql start
&& msfdb init & msfconsole
root 39759 35.1 15.2 4304 227888 pts/2 Sl+ 15:13 1:36 ruby /usr/bin/ msfconsole
root 39892 0.0 0.0 4304 940 pts/2 S+ 15:18 0:00 grep msfconsole
*清单 6­2:过滤特定进程*
从此列表中的筛选输出中，您应该看到与术语**msfconsole**匹配的所有进程。首先显示PostgreSQL数据库是Metasploit使用的数据库，然后是来自/usr/bin/msfconsole的msfconsole程序。最后，你应该看到用于查找msfconsole的grep命令。请注意，输出不包含ps的列标题列表。由于关键字msfconsole不在标题中，因此不会显示。即便如此，结果也以相同的格式显示。
从这里，您可以了解一些重要信息。例如，如果您需要知道Metasploit正在使用多少资源，您可以查阅第三列（CPU列），看它是否使用了35.1％的CPU，并参考第四列以查看它是否使用了15.2%的系统内存
#### *通过top命令查找资源占用率过高的进程*
输入ps命令时，进程按其顺序显示启动后，由于内核按照启动顺序分配PID，所以您看到的是按PID编号排序的进程。
在许多情况下，我们想知道哪些进程使用了最多的资源。这就是top命令派上用场的地方，因为它显示按使用的资源排序的进程，从最大的进程开始。与ps命令不同的是，top命令每10秒动态刷新一次列表，而ps命令只提供一次进程快照。您可以监视和监视那些需要资源的进程，如清单6-3所示。
kali \>top
top ­ 15:31:17 up 2 days, \^;50, 4 users, load average: 0.00, 0.04, 0.09
Tasks: 176 total, 1 running, 175 sleeping, 0 stopped, 0 zombie
%Cpu(s): 1.3 us, 0.7 sy, ).) ni, 97.4 id, 0.0 wa, 0.0 hi 0.0 si 0.0
KiB Mem : 1491220 total, 64848 free, 488272 used, 938100 buff/cache
KiB Swap : 1046524 total, 1044356 free, 2168 used. 784476 avail MEM
PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND
39759 root 20 0 893180 247232 11488 S 0.7 16.6 1:47.88 ruby
39859 root 20 0 27308 16796 14272 S 0.3 1.2 1:47.88 postgres
39933 root 20 0 293936 61500 29108 S 0.7 4.1 1:47.88 Xorg
­­snip­­
*清单6­3: 通过 top 查找资源消耗最多的进程*
系统管理员经常让top在终端中运行，以监视进程资源的使用。作为一名黑客，您可能也想这样做，特别是在您的系统上运行多个任务时。当你运行top时，按下H还是?按键将弹出一个交互式命令列表，按下Q键将退出top。不久您将再次使用top来管理您的进程，在下一小节的“*使用nice命令改变进程优先级*”和
“*终止进程*”中。
### 管理进程
黑客经常需要多进程运行多个程序，像Kali
Linux这样的操作系统是理想的。黑客可能在运行漏洞扫描程序和攻击时同时运行端口扫描程序。这要求黑客有效地管理这些程序，以最好地利用系统资源并完成任务。
在本节中，我将向您展示如何管理多个进程。
#### *使用nice命令改变进程优先级*
在黑客的语境中，你不会经常听到nice这个词，但在这里你会听到。nice命令用于影响进程对内核的优先级。正如您在运行ps命令时看到的，系统上同时运行着许多进程，它们都在争夺可用的资源。内核将对进程的优先级拥有最终决定权，但是您可以使用nice建议提高进程的优先级。
使用nice这个术语背后的想法是，当您使用它时，您将决定对其他用户有多“好”：如果您的进程使用了大部分系统资源，那么就会对其他进程产生影响。
nice的值范围从-20到+19，默认值为0(参见图6-1)。高nice值为低优先级，低nice值为高优先级(当您对其他用户和进程不太友好时)。当进程启动时，它继承其父进程的nice值。进程的所有者可以降低进程的优先级，但不能增加其优先级。当然，超级用户或根用户可以随意将nice值设置为他们喜欢的任何值。
![](media/b05f2150e9ba9e4d4442047c552a482d.jpg)
*图6­1: nice优先级数值*
启动进程时，可以使用nice命令设置优先级，然后在使用renice命令开始运行进程后更改优先级。这两个命令的语法略有不同，可能会令人困惑。nice命令要求增加nice值，而renice命令要求niceness的绝对值。让我们看一个例子来证明这一点。
##### 在运行进程时设置优先级
出于演示目的，我们假设我们有一个名为slowprocess的进程位于/ bin /
slowprocess。如果我们希望它加速执行完成，我们可以使用nice命令启动该过程：
kali \>nice -n -10 /bin/slowprocess
此命令会将nice值递增-10，从而增加其优先级并为其分配更多资源。
另一方面，如果我们想要对我们的用户和流程很好，并给予slowprocess一个较低的优先级，我们可以将其好的值正增加10：
kali \>nice -n 10 /bin/slowprocess
尝试一下当前正在运行的进程，然后运行ps以查看它是如何更改的，如果有的话。
#### *使用renice命令改变正在运行的进程优先级*
renice命令采用介于-20和19之间的绝对值，并将优先级设置为该特定级别，而不是从其开始的级别增加或减少。此外，renice需要您所针对的进程的PID而不是名字。因此，如果slowprocess在您的系统上使用过多的资源
，并且你想给它一个较低的优先级，从而允许其他进程具有更高的优先级和更多的资源，你可以重新设置slowprocess（PID为6996）并给出一个更高的值，如下：
kali \>renice 20 6996
与nice一样，只有root用户可以将进程重新设置为负值以赋予其更高的优先级，但任何用户都可以使用renice来降低优先级。
您还可以使用top工具更改nice值。随着top运行，只需按R键，然后提供PID和nice值。如清单6-4中top正在运行，当我按下R键并提供PID和nice值时，我得到以下输出：
![](media/0955fee776d67ad88de93cbc3a3ffee5.jpg)
*清单 6­4: 通过top改变nice值*
当我按下R键时，我被要求带有文本renice PID [value]的PID➊值。
然后应该改变输出以反映新的优先级。
#### *终止进程*
有时，进程会消耗太多的系统资源，表现出异常的行为，或者假死。表现出这种行为的过程通常被称为僵尸过程。对你来说，最有问题的症状可能是僵尸进程使用的浪费资源，可以更好地分配给有用的进程。
当您确定有问题的进程时，您可能希望使用kill命令来阻止它。有许多不同的杀死程序的方法，每个方法都有自己的进程选项（数字）。
kill命令有64种不同的kill标志，每种标志略有不同。在这里，我们专注于您可能会发现最有用的一些参数，kill命令是*kill-signal
PID*，其中标志开关是可选的。如果你不提供信号标志，默认为SIGTERM。能够列出常见的kill标志。
表 6­1: 常用的kill标志信号
| **标志** | **选项参数** | **描述**                                                                                                                                       |
|----------|--------------|------------------------------------------------------------------------------------------------------------------------------------------------|
| SIGHUP   | 1            | 这称为挂起（HUP）标志信号。它会停止指定的进程并使用相同的PID重新启动它。                                                                       |
| SIGINT   | 2            | 这是中断（INT）信号。这是一个弱信号，不能保证工作，但它在大多数情况下都有效。                                                                  |
| SIGQUIT  | 3            | 这称为核心转储。它终止进程并将进程信息保存在内存中，然后将此信息保存在当前工作目录中的一个名为core的文件中。（这样做的原因超出了本书的范围。） |
| SIGTERM  | 15           | 这是终止（TERM）信号。这是kill命令的默认kill信号。                                                                                             |
| SIGKILL  | 9            | 这是强制终止信号。它通过将进程的资源发送到特殊位置/dev/null来强制进程停止。                                                                    |
使用top命令，您可以识别哪些进程使用了太多资源，通常，这些进程是合法的，但可能有恶意进程占用资源，您想要杀死此进程。
如果您只想使用HUP信号重新启动进程，请使用kill输入-1选项，如下所示：
kali \>kill -1 6996
对于僵尸或恶意进程，您可能发送kill -9信号。
kali \>kill -9 6996
如果您不知道进程的PID，则可以使用killall命令终止进程。此命令将进程的名称（而不是PID）作为参数。
例如，您可以终止假设的僵尸进程，如下所示
\>killall -9 zombieprocess
最后，您还可以在top命令中终止进程。只需按K键，然后输入需要终止进程的PID。
#### *在后台运行进程*
在Linux中，无论您是使用命令行还是GUI，您都在shell中工作。所有运行的命令都是从该shell中执行的，即使它们是从图形界面运行的。执行命令时，shell会等待命令完成，然后再提供另一个命令提示符。
有时，您可能希望进程在后台运行，而不必等待它在该终端中完成。例如，假设我们想在文本编辑器中处理脚本，因此通过输入以下内容调用我们的文本编辑器（leafpad）：
kali \>leafpad newscript
当然，我们可以打开另一个终端来运行更多命令，但更好的选择是节省资源和屏幕空间是启动在后台运行的文本编辑器。在后台运行进程只意味着它将继续运行而无需终端
通过这种方式，终端可以免除其他职责。
要在后台启动文本编辑器，只需在命令末尾添加一个与号（＆），如下所示：
kali \>leafpad newscript &
现在，当文本编辑器打开时，终端返回一个新的命令提示符，这样我们就可以在系统上输入其他命令，同时编辑我们的新闻稿。这对于您希望使用终端时可能会运行很长时间的任何进程都有效。
作为黑客，您会发现这对于运行多个具有多个任务的终端非常有用，可以节省资源和屏幕空间。
#### *把后台运行的进程移到前台*
如果要将在后台运行的进程移动到前台，可以使用fg（foreground）命令。
fg命令需要您想要返回到前台的进程的PID，如下所示。
kali \>fg 1234
如果我们不知道具体的pid，我们可以使用ps 命令查看。
### 定时执行程序
Linux系统管理员和黑客通常都需要安排在一天中的特定时间运行的进程。例如，系统管理员可能希望安排系统备份在每个星期六晚上2点运行。黑客可能希望设置一个脚本来运行以定期执行侦察，找到开放端口或漏洞。在Linux中，您可以通过至少两种方式实现此目的：使用at和crond。
**at**命令是守护进程（后台进程）对于将作业安排在将来的某个时刻运行一次非常有用。crond更适合于安排任务每天，每周或每月发生，我们将在第16章详细介绍。我们使用**at**守护进程来安排将来执行命令或命令集。语法只是**at**命令，后跟执行时间处理。时间参数可以各种方式提供。
表 6­2: 命令行可用的时间格式
| **时间格式**         | **含义**                               |
|----------------------|----------------------------------------|
| at 7:20pm            | 计划于当天晚上7:20运行                 |
| at 7:20pm June 25    | 计划于6月25日晚上7点20分开始运行       |