application.
8. In the GraphDemo window, click Plot Graph. When the graph appears
in the GraphDemo window, record the time taken to generate the graph.
Repeat this action several times to get an average value.
You should notice that the application runs as least as quickly as the
previous version that used Task objects and possibly faster, depending
on the number of CPUs you have available. This is because the Parallel.
Download from finelybook PI:EMAIL
796
For construct automatically takes advantage of all the available
processors, so on a dual core machine, it will use two processor cores,
on a quad core it will use four processor cores, and so on. You don’t
have to amend your code in any way to scale between processor
architectures.
9. Close the GraphDemo application and return to Visual Studio.
When not to use the Parallel class
You should be aware that despite appearances and the best efforts of the
.NET Framework development team at Microsoft, the Parallel class is not
magic—you cannot use it without due consideration and just expect your
applications to suddenly run significantly faster and produce the same results.
The purpose of the Parallel class is to parallelize CPU-bound, independent
areas of your code.
If you are not running CPU-bound code, parallelizing it might not
improve performance. In this case, the overhead of creating a task, running
this task on a separate thread, and waiting for the task to complete is likely to
be greater than the cost of running this method directly. The additional
overhead might account for only a few milliseconds each time a method is
called, but you should bear in mind the number of times that a method runs.
If the method call is located in a nested loop and is executed thousands of
times, all of these small overhead costs will add up. The general rule is to use
Parallel.Invoke only when it is worthwhile. You should reserve
Parallel.Invoke for operations that are computationally intensive; otherwise,
the overhead of creating and managing tasks can actually slow down an
application.
The other key consideration for using the Parallel class is that parallel
operations should be independent. For example, if you attempt to use
Parallel.For to parallelize a loop in which iterations have a dependency on
each other, the results will be unpredictable.
To see what I mean, look at the following code (you can find this example
in the ParallelLoop solution, which is located in the \Microsoft
Press\VCSBS\Chapter 23\ParallelLoop folder in your Documents folder):
Click here to view code image
Download from finelybook PI:EMAIL
797
using System;
using System.Threading;
using System.Threading.Tasks;
namespace ParallelLoop
{
    class Program
    {
        private static int accumulator = 0;
        static void Main(string[] args)
        {
            for (int i = 0; i  doWork(cancellationToken));
        ...
        if (...)
        {
            // Cancel the task
            cancellationTokenSource.Cancel();
        }
        ...
   }
   // Method run by the task
   private void doWork(CancellationToken token)
   {
       ...
       // If the application has set the cancellation token, finish
processing
       if (token.IsCancellationRequested)
Download from finelybook PI:EMAIL
801
       {
            // Tidy up and finish
           ...
           return;
       }
       // If the task has not been canceled, continue running as
normal
       ...
   }
}
In addition to providing a high degree of control over the cancellation
processing, this approach is scalable across any number of tasks; you can
start multiple tasks and pass the same CancellationToken object to each of
them. If you call Cancel on the CancellationTokenSource object, each task
will check whether the IsCancellationRequested property has been set and
proceed accordingly.
You can also register a callback method (in the form of an Action
delegate) with the cancellation token by using the Register method. When an
application invokes the Cancel method of the corresponding
CancellationTokenSource object, this callback runs. However, you cannot
guarantee when this method executes; it might be before or after the tasks
have performed their own cancellation processing, or even during that
process.
Click here to view code image
...
cancellationToken,Register(doAdditionalWork);
...
private void doAdditionalWork()
{
    // Perform additional cancellation processing
}
In the next exercise, you will add cancellation functionality to the
GraphDemo application.
Add cancellation functionality to the GraphDemo application
1. Using Visual Studio 2017, open the GraphDemo solution, which is
located in the \Microsoft Press\ VCSBS\Chapter 23\GraphDemo With
Cancellation folder in your Documents folder.
Download from finelybook PI:EMAIL
802
This is a completed copy of the GraphDemo application from the earlier
exercise that uses tasks to improve processing throughput. The user
interface also includes a button named cancelButton that the user can
use to stop the tasks that calculate the data for the graph.
2. In Solution Explorer, in the GraphDemo project, double-click
MainPage.xaml to display the form in the Design View window. Note
the Cancel button that appears in the left pane of the form.
3. Open the MainPage.xaml.cs file in the Code and Text Editor window.
Locate the cancelButton_Click method.
This method runs when the user clicks Cancel. It is currently empty.
4. Add the following using directive to the list at the top of the file:
using System.Threading;
The types used by cooperative cancellation reside in this namespace.
5. Add a CancellationTokenSource field called tokenSource to the
MainPage class, and initialize it to null, as shown in the following code
in bold:
Click here to view code image
public sealed partial class MainPage : Page
{
    ...
    private byte redValue, greenValue, blueValue;
    private CancellationTokenSource tokenSource = null;
    ...
}
6. Find the generateGraphData method and add a CancellationToken
parameter called token to the method definition, as shown here in bold:
Click here to view code image
private void generateGraphData(byte[] data, int partitionStart,
int partitionEnd,
CancellationToken token)
{
    ...
}
7. In the generateGraphData method, at the start of the inner for loop, add
Download from finelybook PI:EMAIL
803
the following code shown in bold to check whether cancellation has
been requested. If so, return from the method; otherwise, continue
calculating values and plotting the graph.
Click here to view code image
private void generateGraphData(byte[] data, int partitionStart,
int partitionEnd,
CancellationToken token)
{
    double a = pixelWidth / 2;
    double b = a * a;
    double c = pixelHeight / 2;
    for (double x = partitionStart; x  generateGraphData(data, 0,
pixelWidth / 4, token));
Task second = Task.Run(() => generateGraphData(data, pixelWidth
/ 4,
pixelWidth / 2, token));
...
10. Edit the definition of the plotButton_Click method and add the async
modifier as shown in bold here:
Click here to view code image
private async void plotButton_Click(object sender,
RoutedEventArgs e)
{
    ...
}
11. In the body of the plotButton_Click method, comment out the
Task.WaitAll statement that waits for the tasks to complete and replace it
with the following statements in bold that use the await operator instead.
Click here to view code image
...
// Task.WaitAll(first, second);
await first;
await second;
duration.Text = …;
...
The changes in these two steps are necessary because of the single-
threaded nature of the Windows user interface. Under normal
circumstances, when an event handler for a user interface component
such as a button starts running, event handlers for other user interface
components are blocked until the first event handler completes (even if
the event handler is using tasks). In this example, using the Task.WaitAll
method to wait for the tasks to complete would render the Cancel button
useless because the event handler for the Cancel button will not run until
the handler for the Plot Graph button completes, in which case there is
Download from finelybook PI:EMAIL
805
no point in attempting to cancel the operation. In fact, as mentioned
earlier, when you click the Plot Graph button, the user interface is
completely unresponsive until the graph appears and the
plotButton_Click method finishes.
The await operator is designed to handle situations such as this. You can
use this operator only inside a method marked as async. Its purpose is to
release the current thread and wait for a task to complete in the
background. When that task finishes, control returns to the method,
which continues with the next statement. In this example, the two await
statements simply allow each of the tasks to complete in the
background. After the second task has finished, the method continues,
displaying the time taken for these tasks to complete in the duration
TextBlock. Note that it is not an error to await for a task that has already
completed; the await operator will simply return immediately and pass
control to the following statement.
More Info
Chapter 24 discusses the async modifier and the await operator in
detail.
12. Find the cancelButton_Click method. Add the code shown here in bold
to this method:
Click here to view code image
private void cancelButton_Click(object sender, RoutedEventArgs
e)
{
    if (tokenSource != null)
    {
        tokenSource.Cancel();
    }
}
This code checks that the tokenSource variable has been instantiated. If
it has, the code invokes the Cancel method on this variable.
13. On the Debug menu, click Start Without Debugging to build and run the
Download from finelybook PI:EMAIL
806
application.
14. In the GraphDemo window, click Plot Graph, and verify that the graph
appears as it did before. However, you should notice that it takes slightly
longer to generate the graph than before. This is because of the
additional check performed by the generateGraphData method.
15. Click Plot Graph again, and then quickly click Cancel.
If you are swift and click Cancel before the data for the graph is
generated, this action causes the methods being run by the tasks to
return. The data is not complete, so the graph appears with “holes,” as
shown in the following figure; the size of the holes depends on how
quickly you clicked Cancel.
16. Close the GraphDemo application and return to Visual Studio.
You can determine whether a task completed or was canceled by
examining the Status property of the Task object. The Status property
Download from finelybook PI:EMAIL
807
contains a value from the System.Threading.Tasks.TaskStatus enumeration.
The following list describes some of the status values that you might
commonly encounter (there are others):
Created This is the initial state of a task. It has been created but has not
yet been scheduled to run.
WaitingToRun The task has been scheduled but has not yet started to
run.
Running The task is currently being executed by a thread.
RanToCompletion The task completed successfully without any
unhandled exceptions.
Canceled The task was canceled before it could start running, or it
acknowledged cancellation and completed without throwing an
exception.