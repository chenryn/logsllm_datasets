# Detecting Inter-App Information Leakage Paths

**Authors:**
- Shweta Bhandari, MNIT Jaipur, Rajasthan, India
- Frédéric Herbreteau, LaBRI - University of Bordeaux, CNRS, France
- Vijay Laxmi, MNIT Jaipur, Rajasthan, India
- Akka Zemmari, LaBRI - University of Bordeaux, CNRS, France
- Partha S. Roop, The University of Auckland, Auckland, New Zealand
- Manoj Singh Gaur, MNIT Jaipur, Rajasthan, India

## Abstract
Sensitive (private) information can be leaked from one app to another using the various communication methods provided by Android for inter-app communication. This leakage can be malicious. In such scenarios, benign apps, in collusion with other conspiring apps, can leak private information. In this work in progress, we present a new model-checking-based approach for detecting inter-app collusion. Our technique simultaneously analyzes multiple apps and identifies any set of conspiring apps involved in the collusion. To evaluate our tool, we developed Android apps that exhibit collusion through inter-app communication. Eight demonstrative sets of apps have been contributed to the widely used test dataset, DroidBench. Our experiments show that the proposed technique can accurately detect the presence or absence of collusion among apps. To the best of our knowledge, our proposal has improved detection capabilities compared to other techniques.

## 1. Motivation
In Android, standard communication channels are based on Intent-based Inter-Component Communication (ICC). A recent study [9] showed that almost 85% of all apps in the marketplace perform inter-app communication via either explicit (11.3%) or implicit (73.1%) Intents. Unfortunately, the ICC model can be exploited by malware writers to deploy successful Privilege Escalation Attacks [8] or Collusion Attacks [7, 13]. Collusion refers to the scenario where two or more conspiring apps with a limited set of permissions communicate with each other to gain indirect privilege escalation and perform unauthorized actions. Specifically, an app with necessary permissions can access sensitive information, send it using intents to another app, which can then send the information out, resulting in an information leak. The risk is that individual apps may appear benign but can create privacy leakage paths in the presence of other apps.

Many techniques have been proposed for analyzing Android apps, including machine learning and behavioral analysis. However, most existing works focus on single-app analysis [6, 10]. Attackers can bypass detection by existing tools by placing the source in one app and the sink in another. Therefore, to detect collusion, a set of apps needs to be analyzed together.

To illustrate, we developed a scenario shown in Figure 1. It involves three colluding apps (DeviceId, DeviceId Service, and Collector) that exfiltrate the device ID. All three apps communicate via Intent objects. In the example, DeviceId invokes DeviceId Service through the `startService()` API call. Upon invocation, DeviceId Service accesses the sensitive information (unique device ID) that requires the `READ_PHONE_STATE` permission by calling the `getDeviceId()` API. This information is encapsulated in an Intent and sent to the Collector app. Note that the Collector app does not have permission to access the device ID on its own, but due to the inserted privacy leakage path, it can get access. The sensitive information is then exfiltrated to an external file without user consent. This leakage path cannot be detected by VirusTotal [4], AndroTotal [1], IccTA [12], FlowDroid [5], and Droidsafe [11]. The problem of collusion is dangerous because both apps require a minimal set of permissions and are treated as benign by most available techniques. The challenge lies in representing the sensitive data flow and identifying the leakage path spread across multiple apps.

## 2. Contributions
Our contributions are as follows:
1. We propose a technique where verification methods are used efficiently to check all possible paths generated due to inter-app communication and verify if the paths are admissible under the requirements of a safe state (no collusion).
2. In this work in progress, only Intents have been explored as a means of inter-app communication. Based on this, our proposed collusion checking property can detect the presence or absence of collusion. To check for privilege escalation during collusion, Intents carrying sensitive information have been augmented with permissions.
3. We propose a multi-app analysis tool for collusion detection.
4. We developed eight new apps that are diverse in the components used for communication and the type of Intent-based communication channels (implicit, explicit, ordered). We also inserted sensitive leakage paths in these apps. These apps are contributed to the dataset, which can be used for comparing techniques to detect privacy leakage through collusion.

## 3. Proposed Approach
In this section, we present the structure of our tool, designed to detect potentially colluding apps. Figure 2 shows the overview of our tool. The description of the figure is as follows:

1. **Step 1:** Android apps are implemented in Java and compiled into Dalvik bytecode. We extract Java bytecodes from `.dex` files.
2. **Step 2:** We extract the main ICC classes like Intents, Intent Filters, and URIs, along with Component Name, Bundle, PendingIntent, and URI Builder classes.
3. **Step 3:** We extract methods corresponding to Sensitive Resource Access (methods that require dangerous permissions).
4. **Step 4.1 and 4.2:** Our tool stores all the collected information into a database for each app. Information is stored in the form of the following tuple: \((\text{intentID}, \text{intentAction}, \text{intentPerm})\).
5. **Step 5:** We model the stored information by constructing an App Promela Model for each app.
6. **Step 6.1:** These models are fed to the SPIN Model Checker [3].
7. **Step 6.2:** We specify a collusion checking property in Linear Temporal Logic (LTL) that states the state of the model should always be SAFE: \(\text{[]}(state == \text{SAFE})\).
8. **Step 7:** SPIN checks all the paths exhaustively against the property. If a path does not satisfy the LTL property, an error is generated, and a counterexample of the path is provided. We report this path in the colluding apps.

## 4. Evaluation
In this section, we evaluate the results from our experiments to judge the efficacy of our proposed tool. DroidBench [2] had three sample apps demonstrating inter-app communication through activity components. We developed eight new apps that exhibit collusion through inter-app communication and open-sourced our experimental dataset of apps.

**Experimental Results:**
To evaluate our approach, we launched our tool on DroidBench samples. We conducted our experiments in parts. Part I consists of a two-apps scenario, where we took two apps at a time and checked for the presence or absence of collusion due to their communication. Out of 8 apps, there are \(\binom{8}{2} = 28\) possible tests. However, we reduced the number of test cases by using prior information about the apps. If there is no Intent communication between the apps, we can leave that test case as they are not transferring any information. This reduces the test cases to 7 instead of 28. Table 1 summarizes the result of our analysis of the first scenario. Part II consists of a three-apps scenario, where we analyze three apps simultaneously for collusion.

## 5. Conclusion
Private information leakage poses a significant risk to the security of Android mobile users. Currently, most techniques target single-app analysis to detect privacy leakage paths. However, malicious app developers generate leakage paths across multiple apps, making it challenging to detect such paths. This paper addresses the major challenges of multi-app analysis leading to information leakage. We presented our work-in-progress technique, a tool based on model checking for collusion detection. The proposal involves preprocessing on Android apps under analysis to extract relevant information. Extracted information can be further utilized to reduce the number of test cases for evaluation, increasing the scalability of the tool. Our method provides a formal representation of the extracted information, helping in a compact representation that can be given to the model-checking tool. Finally, our technique applies model checking to verify if the collusion checking property is satisfied by the model. If not, an alert is raised, confirming the collusion among the apps under analysis.

## 6. Acknowledgments
This work is partially supported by the Security Analysis Framework for Android Platform (Grant 1000109932) by DeitY, Government of India. The work is also partially supported by DST-CNRS project IFC/DST-CNRS/2015-01/332 at MNIT Jaipur.

## 7. References
[1] Andrototal. http://andrototal.org/. [Online; accessed 10-May-2015].

[2] DroidBench 2.0. https://github.com/secure-software-engineering/DroidBench. [Online; accessed 02-June-2015].

[3] SPIN Model Checker. http://www.spinroot.com. [Online; accessed 23-September-2015].

[4] Virustotal. http://virustotal.com/. [Online; accessed 10-May-2015].

[5] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive, and lifecycle-aware taint analysis for Android apps. In ACM SIGPLAN Notices, volume 49, pages 259–269. ACM, 2014.

[6] S. Bhandari, W. B. Jaballah, V. Jain, V. Laxmi, A. Zemmari, M. S. Gaur, and M. Conti. Android app collusion threat and mitigation techniques. arXiv preprint arXiv:1611.10076, 2016.

[7] S. Bhandari, V. Laxmi, A. Zemmari, and M. S. Gaur. Intersection automata-based model for Android application collusion. In 2016 IEEE 30th International Conference on Advanced Information Networking and Applications (AINA), pages 901–908. IEEE, 2016.

[8] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A. Sadeghi, and B. Shastry. Towards taming privilege-escalation attacks on Android. In 19th Annual Network and Distributed System Security Symposium, NDSS 2012, San Diego, California, USA, February 5-8, 2012. The Internet Society, 2012.

[9] K. O. Elish, D. D. Yao, and G. R. Barbara. On the need of precise inter-app ICC classification for detecting Android malware collusions. In Proceedings of the Security and Privacy Workshops, pages 116–127, 2015.

[10] P. Faruki, S. Bhandari, V. Laxmi, M. Gaur, and M. Conti. Droidanalyst: Synergic app framework for static and dynamic app analysis. In Recent Advances in Computational Intelligence in Defense and Security, pages 519–552. Springer, 2016.

[11] M. I. Gordon, D. Kim, J. Perkins, L. Gilham, N. Nguyen, and M. Rinard. Information-flow analysis of Android applications in Droidsafe. In Proc. of the Network and Distributed System Security Symposium (NDSS). The Internet Society, 2015.

[12] L. Li, A. Bartel, T. F. D. A. Bissyande, J. Klein, Y. Le Traon, S. Arzt, S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel. Iccta: detecting inter-component privacy leaks in Android apps. In 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering (ICSE 2015).

[13] C. Marforio, H. Ritzdorf, A. Francillon, and S. Capkun. Analysis of the communication between colluding applications on modern smartphones. In Proceedings of the 28th Annual Computer Security Applications Conference, pages 51–60. ACM, 2012.