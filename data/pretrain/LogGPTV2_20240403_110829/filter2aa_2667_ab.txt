•
挑战
•
在 有限的基础 前提下，在 Intel SGX 环境中重新实现一套软件栈
•
需要 保证内存安全性
MesaTEE SGX
借助 Intel SGX 重新定义人工智能和大数据分析
适用于 隐私保护 计算的 Intel SGX
• Intel SGX 背景
• 基于 Intel SGX 构建隐私保护计算软件栈所面临的挑战
Hybrid Memory Safety
• 经验法则
• Intel SGX 实践
塑造 安全 并且 可信 的人工智能和大数据分析框架
• 可信 (Trustworthy) 到底指什么？
• 使用 Intel SGX 实现可信赖的人工智能和大数据分析
混合内存安全性 Hybrid Memory Safety
由编程语言保证内存安全性
混合内存安全性 Hybrid Memory Safety
软件栈
•
内核
•
系统调用
•
Libc库、系统库
•
运行时库
•
应用程序
混合内存安全性 Hybrid Memory Safety
软件栈
•
内核
•
系统调用
•
Libc库、系统库
•
运行时库
•
应用程序
混合内存安全性 Hybrid Memory Safety
混合内存安全新——经验法则
•
不安全的组件绝对不允许污染安全的组件，对公开的 API 和数据结
构，这一点尤为重要。
•
不安全的组件应当尽可能少，并与安全的组件解耦。
•
部署过程中，不安全的组件应明确标记出来并准备对其升级。
混合内存安全性 Hybrid Memory Safety
混合内存安全性——以 MesaPy 为例
混合内存安全性 Hybrid Memory Safety
混合内存安全性——SGX 中的实践
Linux
Rust-SGX
内核
不适用
系统调用
OCALL（静态控制）
Libc
Intel – SGX tlibc
运行时
Rust-SGX sgx_tstd/…
混合内存安全性 Hybrid Memory Safety
混合内存安全性——SGX 中的实践
Enclave Boundary
sgx_tlibc
sgx_trts
sgx_tcrypto
sgx_tservices
sgx_tstd
sgx_trts
sgx_tcrypto
sgx_tservices
crypto_helper
ring/rustls/webpki
tvm-runtime
Remote attestation
Data storage/trans
Interpreter
Rusty-machine
gbdt-rs
tvm worker
混合内存安全性 Hybrid Memory Safety
混合内存安全性——SGX 中的实践
liballoc
libstd
libcore
libc
libpanic_abort
libunwind
librustc_demangle
compiler_builtins
glibc
#![no_std]
#![no_core]
混合内存安全性 Hybrid Memory Safety
混合内存安全性——SGX 中的实践
liballoc
libstd
libcore
libc
libpanic_abort
sgx_unwind librustc_demangle
compiler_builtins
sgx_tstdc
sgx_trts
…
#![no_std]
#![no_core]
sgx_libc
sgx_alloc
sgx_tprotected_fs
MesaTEE SGX
借助 Intel SGX 重新定义人工智能和大数据分析
适用于 隐私保护 计算的 Intel SGX
• Intel SGX 背景
• 基于 Intel SGX 构建隐私保护计算软件栈所面临的挑战
Hybrid Memory Safety
• 经验法则
• Intel SGX 实践
塑造 安全 并且 可信 的人工智能和大数据分析框架
• 可信 (Trustworthy) 到底指什么？
• 使用 Intel SGX 实现可信赖的人工智能和大数据分析
塑造安全并且可信的人工智能和大数据分析框架
可信 (Trustworthy) 到底指什么？
可信 (Trustworthy) 到底指什么？
塑造安全并且可信的人工智能和大数据分析框架
可信 (Trustworthy) 到底指什么？
塑造安全并且可信的人工智能和大数据分析框架
可信赖计算（Trustworthy Computing）一词代表具备固
有安全性、可用性以及可靠性的计算系统。这一概念尤
其与 微软 曾在 2002 年发起的一项同名举措密切相关。
塑造安全并且可信的人工智能和大数据分析框架
可信到底指什么？
可信任计算 (Trusted Computing) 
该术语源自可信任系统这一领域，但有着特殊含义。对于可信任计算，
计算机将始终如一地按照 预期 方式运作，而具体的运作行为则可由计
算机硬件和软件加以控制。
塑造安全并且可信的人工智能和大数据分析框架
使用 Intel SGX 实现可信的人工智能和大数据分析
Gradient-Boosting 决策树
如何实现可信？
•
所运行的实例是通过我想要运行的静态库启动的
•
该静态库是通过我想要使用的代码生成的
•
我所用的代码“诚实地”实现了算法
•
编译器没有作恶
•
数据以安全的方式传输
塑造安全并且可信的人工智能和大数据分析框架
使用 Intel SGX 实现可信的人工智能和大数据分析
Gradient-Boosting 决策树
gbdt-rs
•
~2000 sloc of Rust – Self explain
•
良好的备注/文档
•
相比 XGBoost on 1thread 速度快 7 倍
•
与 SGX 无缝配合
•
简洁干净的 软件栈！
9.9
1.5
11.5
1.9
0
2
4
6
8
10
12
14
500K
samples with
1000 features
100K
samples with
600 features
GB
内存用量
rust
c++
195.60
9.94
241.42
11.89
0.00
50.00
100.00
150.00
200.00
250.00
300.00
500K
samples with
1000
features
100K
samples with
600 features
Seconds
训练时间
rust
c++
塑造安全并且可信的人工智能和大数据分析框架
使用 Intel SGX 实现可信的人工智能和大数据分析
MesaPy SGX
•
移植具备强边界检查的 PyPy
•
禁用所有系统调用
•
可定制的运行时 – 有限的 ocall
•
消除非决定性
•
形式化验证
•
使用 Rust crate 替代不安全的库
塑造安全并且可信的人工智能和大数据分析框架
使用 Intel SGX 实现可信的人工智能和大数据分析
塑造安全并且可信的人工智能和大数据分析框架
使用 Intel SGX 实现可信的人工智能和大数据分析
我们正与 百度 XuperData 在应用程序方面进行合作
塑造安全并且可信的人工智能和大数据分析框架
Anakin-SGX
0
5
10
15
20
25
30
35
40
SGX
X86-64
NIN_ImageNet (1000 images)
User
Sys
问答
MesaTEE SGX: 借助 Intel SGX 重新定
义人工智能和大数据分析
Yu Ding
百度 X-Lab 安全研究员