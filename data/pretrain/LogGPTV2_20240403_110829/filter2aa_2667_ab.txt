# 挑战

- 在有限的资源条件下，在Intel SGX环境中重新实现一套软件栈。
- 确保内存安全性。

## MesaTEE SGX
MesaTEE SGX利用Intel SGX技术，重新定义了人工智能和大数据分析，特别适用于隐私保护计算。

### Intel SGX背景
Intel SGX（Software Guard Extensions）是一种基于硬件的安全技术，允许应用程序在受保护的执行环境中运行。基于Intel SGX构建隐私保护计算软件栈面临诸多挑战。

### 基于Intel SGX构建隐私保护计算软件栈所面临的挑战
- 有限的基础资源：在Intel SGX环境中重建软件栈需要优化资源使用。
- 内存安全性：确保程序运行时不会出现内存安全问题至关重要。

## 混合内存安全性 (Hybrid Memory Safety)
### 经验法则
1. 不安全的组件绝对不允许污染安全的组件，尤其是在公开的API和数据结构中。
2. 尽可能减少不安全组件的数量，并将其与安全组件解耦。
3. 在部署过程中，应明确标记出不安全组件并准备对其升级。

### Intel SGX实践
通过采用混合内存安全性原则，我们可以在Intel SGX环境中构建更安全、更可信的人工智能和大数据分析框架。

#### 可信 (Trustworthy) 到底指什么？
- **可信赖计算**：代表具备固有安全性、可用性和可靠性的计算系统。这一概念与微软在2002年发起的一项同名举措密切相关。
- **可信任计算**：计算机将始终如一地按照预期方式运作，其行为由硬件和软件控制。

### 使用Intel SGX实现可信的人工智能和大数据分析
为了实现可信的人工智能和大数据分析，我们需要确保以下几点：
- 所运行的实例是通过我想要运行的静态库启动的。
- 该静态库是通过我想要使用的代码生成的。
- 我所用的代码“诚实地”实现了算法。
- 编译器没有作恶。
- 数据以安全的方式传输。

#### Gradient-Boosting决策树
- **gbdt-rs**
  - 约2000行Rust代码，易于理解。
  - 提供良好的文档和注释。
  - 相比XGBoost单线程速度快7倍。
  - 与SGX无缝集成。
  - 简洁干净的软件栈！

#### MesaPy SGX
- 移植具备强边界检查的PyPy。
- 禁用所有系统调用。
- 可定制的运行时，限制ocall数量。
- 消除非决定性因素。
- 形式化验证。
- 使用Rust crate替代不安全的库。

### 合作伙伴
我们正与百度XuperData合作，共同开发应用程序。

### Anakin-SGX性能对比
| Metric | SGX | X86-64 |
|--------|-----|--------|
| NIN_ImageNet (1000 images) User | 0 | 5 |
| Sys | 10 | 15 |

### 结论
MesaTEE SGX通过利用Intel SGX技术，重新定义了人工智能和大数据分析，提供了更高的安全性和隐私保护。

---

**作者**：Yu Ding  
**职位**：百度X-Lab安全研究员