An Unauthenticated Journey to Root :
Pwning Your Company’s Enterprise Software Servers
Yvan Genuer
Onapsis
PI:EMAIL
Pablo Artuso
Onapsis
PI:EMAIL
1.
Abstract
Companies consist of a plethora of software,
hardware, vendors, and solutions working to-
gether to keep the business running and alive.
When it comes to Enterprise Software, because
of its intrinsic criticality and complexity, com-
panies rely on expert vendors in the ﬁeld. SAP,
one of the largest Enterprise Software vendors,
is deﬁnitively part of this list. With huge pres-
ence around the globe, SAP systems could be
found in almost every mid-to-large company
providing one of the most critical actions: Ad-
ministrating the company’s business.
This paper will illustrate an in-depth anal-
ysis performed against one of the most im-
portant assets of every company: its SAP im-
plementation. All phases of the research will
be depicted, starting from the introduction of
each analysed component, continuing with the
techniques that helped us ﬁnd the vulnerabil-
ities, up to discussing all security measures
that could be followed in order to be protected
against them. Furthermore, post exploitation
scenarios will be discussed which will help to
better illustrate the impact that the found ﬂaws
could have, not only in technical but also in
business terms.
2.
Keywords
SAP, Enterprise Software, RCE, root, Solution
Manager, SolMan, Host Agent, CVE-2020-6207,
CVE-2020-6234, CVE-2020-6236
3.
Acknowledgements
To our leader, Nahuel D. Sánchez, who helped
us throughout the research, providing support,
sharing discussions and pushing us in order to
get the best out of ourselves.
4.
Introduction
Enterprise software is one of the most impor-
tant topics when discussing about company’s
assets. They usually manage sensitive and crit-
ical information. It is because of this reason
that companies opt for experts in the ﬁeld to
trust one of their most critical assets. SAP is
one of the largest vendors of Enterprise Soft-
ware. They have been successfully develop-
ing business applications for almost 50 years.
With more than 450k customers and presence
in more than 180 countries, is possible to be-
lieve that almost every mid to large company
today is using SAP systems for keeping its
business up and running.
The list of products that SAP offers is very ex-
tensive. Customers may choose which product
to use based on their particular needs. How-
ever, there is one particular solution that will
be present in every customer network: SAP
Solution Manager (SolMan).
This paper is the outcome of an extensive
security research performed against the SAP
Solution Manager: the core component of every
SAP implementation. A completely practical
attack which leverages not only the power of
SolMan but also the relation with its agents
will be presented.
1
4.1.
Solution Manager
In SAP landscapes, the SAP Solution Manager
(SolMan) could be compared to a domain con-
troller system in the Microsoft world. It is a
technical system that is highly connected with
powerful privileges to all other SAP systems.
Once an SAP system is connected to the solu-
tion manager it receives the name of "managed"
or "satellite" system. As an administration so-
lution, SolMan aims to centralize the manage-
ment of all systems within the landscape by
performing actions such as implementing, sup-
porting, monitoring and maintaining the enter-
prise solutions.
4.2.
SMD Agent
If an SAP customer wants to fully utilize the
capabilities of the Solution Manager, they must
install an application called Solution Manager
Diagnostic Agent (SMDAgent) on each host
where an SAP system is running. This Agent
manages communications, instance monitor-
ing and diagnostic feedback to the Solution
Manager. From the operating system perspec-
tive, the unique user involved in all SMDAgent
activities is daaadm.
4.3.
Host Agent
The SAP Host Agent1 is a component installed
automatically during the installation of a new
SAP system. It is OS and database indepen-
dent, and it can accomplish several life-cycle
tasks such as:
• Monitoring
• Start/Stop instances
• Preparing for upgrade
5.
Architecture
From an architecture point of view the Solution
Manager, as explained before, is connected to
every single system within the landscape. As
1https://help.sap.com/doc/saphelp_nw73ehp1/7.31.19/en-
US/48/c6f9627a004da5e10000000a421937/content.htm
usually every managed/satellite system use
the full capabilities of SolMan, the SMDAgent
could be found in every server where they are
running. Finally, the SAP Host Agent is a solu-
tion that could be used for both SAP and non-
SAP applications.
Nevertheless, every SAP
application will have this agent running within
its server.
To summarize it and visualize it in a more
graphical way, the following image can be used
as an example:
Figure 1: Example architecture including Solution Man-
ager, SMD Agent and Host Agent.
This picture shows an SAP landscape com-
posed by 4 systems (one Solution Manager, 3
managed systems) running different operating
systems and different SAP NetWeaver stacks.
As can be seen in the image, the SolMan is con-
nected to every other system. SMD and Host
agents are present in all servers (including Sol-
Man itself).
6.
Solution Manager Analysis
6.1.
Motivation
There were several reasons why the Solution
Manager was a interesting target for an in-
depth analysis of its security. Among all them,
it is possible to highlight the following two:
• It is an hyper-connected system: It is con-
nected to all other systems in the same
landscape.
• Every SAP implementation must have one.
Finding any issue in such critical asset would
potentially imply an impact on some other sys-
tem of the landscape. The main objective was:
2
First to demonstrate if there was a way for
an attacker to take control on the system and
second, understand how deep they could go.
6.2.
Initial Phase
One of SolMan’s components is the web server
part of the Java stack.
As every other SAP
solution running on top the NetWeaver Java
technology, several applications, services and
functionalities are provided through it. For in-
stance, to perform conﬁgurations on the SMD
Agents, a particular application running on
this web server must be used.
The initial phase of the Solution Manager
analysis involved reviewing the exposed ap-
plications and web services with the goal of
identifying those which did not require authen-
tication. Even though authenticated ones may
also be vulnerable, the impact of an unauthen-
ticated exposed application would be naturally
higher.
Looking for unauthenticated applications
This search focused mainly on application and
web services exposed by default. In order to
ﬁnd them, the following approaches were fol-
lowed
• Log analysis, with the goal of ﬁnding pre-
vious communications.
• Conﬁgurations analysis, with the goal of
ﬁnding apps and their exposure based on
conﬁgurations written either in ﬁles or in
the database.
• Documentation analysis.
After an initial phase of discovery a list
of candidates applications was identiﬁed and
ready to be analysed. Among this list, there
was one that was worth to be analyzed: End-
user Experience Monitoring (EEM).
6.3.
Unauthenticated application dis-
covery: EEM
Once this potential vulnerable endpoint was
identiﬁed an intensive analysis on it began.
Based on online documentation, self testing,
and more, it was possible to understand the
goal and nature of this application.
The End user Experience Monitoring appli-
cation allows to mimic any activity that could
be performed by an end-user using proprietary
SAP protocols such as: RFC, DIAG or HTTP
protocols. From a technical point of view, in
order to achieve such actions, scripts of the
aforementioned protocols can be developed,
uploaded and executed against other systems.
Despite the fact that EEM runs in the Solu-
tion Manager, the actual execution of the up-
loaded/deployed scripts is carried out by an
EEM Robot; A system that is running a tiny
Java application which knows how to interpret
and execute these scripts. By default, every
SMD Agent connected to the Solution Man-
ager could act as an EEM Robot. From now on,
the concept of SMD Agent or EEM robot will
be used indistinguishably.
In summary, these are the steps that are car-
ried out:
1. SAP administrator gets a script (either by
developing it or asking somebody else to
do it).
2. The admin chooses the EEM Robot where
the script will be deployed.
3. Once the script is deployed, the EEM robot
executes.
As it was mentioned before, this application
was not requiring authentication. That was the
reason why the following questions came up:
• Is this application able to be used without
neither authentication nor authorization?
• Is there any critical action that could be
performed through scripts?
6.4.
EEM Technical Analysis
Technically speaking, EEM was a SOAP end-
point.
Once its WSDL was retrieved and
parsed, a set of 19 methods were available to be
called. Among these methods it was possible
to ﬁnd:
3
• getAllAgentInfo
• runScript
• setAgeletProperties
• uploadResource
A quick test to ensure that action could
be performed without authentication was per-
formed.
Using SOAP UI2 the method run-
Script was executed. This method required
two parameters:
the EEM robot host and
script name. As explained before, all SMD
Agents are EEM robots by default. At that
point, a valid script name was unknown, that’s
why the following values were used:
• EEM robot host: A valid SMD Agent host
• Script name: "Foo"
The answer received by the server was not
the one expected:
com.sap.smd.eem.admin.Eem-
Exception: EEM is not enabled on this
agent. Operation only supported when EEM
is enabled.
The returned message was not giving any
kind of information related to the question of
"Is this application able to be used without nei-
ther authentication nor authorization?". More-
over, it added a new one:
If this application comes deactivated by de-
fault, should an administrator explicitly en-
able it?
Remotely enabling EEM without authentica-
tion
The result obtained from the previous test,
forced to continue with the analysis of exposed
methods. "Getter" methods are usually eas-
ier to execute when the application is a bit
unknown as sometimes they do not require pa-
rameters and return back information that may
be valuable. This case was not the exception.
Among all the listed methods, there was one
called getAllAgentInfo. This method did not
require any parameter, therefore was easy to
execute.
2https://www.soapui.org/
Just because of having an answer from the
execution of getAllAgentInfo, conﬁrmed the
idea that neither authorization nor authentica-
tion was needed to use the application. And
therefore, the ﬁrst vulnerability could be con-
ﬁrmed.
Once executed the information returned was
really interesting:
• OS version
• JDK version
• Environmental
information
(variables,
conﬁgs)
• EEM properties
EEM properties held conﬁguration directly
related with the application in a key-value fash-
ion. Among all those properties there was a
really interesting one:
• ...
• eem.enable = False
• ...
The name of this property led to a new
search over the methods in order to try to ﬁnd
a way to change this value. After a quick search
the method setAgeletProperties appeared to
be a candidate. The idea behind it was to try
to activate the EEM through changing its value
to True.
setAgeletProperties required three
parameters:
• EEM robot host.
• Key.
• Value.
The test used a valid SMD Agent host as
EEM Robot host, "eem.enable" as Key and
"True" as Value. Once this execution was ac-
complished, getAllAgentInfo was launched
again. This time the value of eem.enable was
"True".
In order to deﬁnitively conﬁrm that the
change worked, the ﬁrst test was re-executed.
The method runScript was called with the same
parameters as before but this time the message
was different:
com.sap.smd.eem.admin.Eem-
Exception: Script foo_script not found.
4
This message conﬁrmed that EEM was en-
abled and ready to be used by anyone without
ever providing neither authentication nor au-
thorization. However, what was the impact of
having such an application accessible to any-
one? In order to answer this question it was
necessary to make a more in depth analysis of
the features provided by it.
Uploading and running custom scripts
One of the main goals was to ﬁnd the way of
creating custom scripts, upload them and get
them executed. Until this point, thanks to the
previous analysis, it was known how to run a
script that was already present in some SMD
Agent. It was necessary to ﬁnd a way to upload
any arbitrary script.
Among all functions exported by the end-
point, there was one called uploadResource.
This function required several parameters. The
most important ones were: SMD Agent host
and Content. The latter had to be base64 en-
coded. The ﬁrst test was to encode some ran-
dom string and upload it in order to see if the
returned message was giving some informa-
tion. The test was kind of successful as the
returned message was:
FatalError validating
XML document: Content is not allowed