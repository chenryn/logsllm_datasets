### An Unauthenticated Journey to Root: Pwning Your Company’s Enterprise Software Servers

**Authors:**
- Yvan Genuer, Onapsis
- Pablo Artuso, Onapsis

**Contact:**
- Yvan Genuer: [PI:EMAIL]
- Pablo Artuso: [PI:EMAIL]

### 1. Abstract
Companies rely on a complex array of software, hardware, vendors, and solutions to maintain their operations. In the realm of enterprise software, due to its criticality and complexity, companies often turn to expert vendors. SAP, one of the largest enterprise software providers, is a key player in this space. With a significant global presence, SAP systems are integral to the operations of many mid-to-large companies, handling essential business administration tasks.

This paper presents an in-depth analysis of a company's SAP implementation, one of its most crucial assets. The research covers all phases, from the introduction of each analyzed component to the techniques used to identify vulnerabilities, and the security measures necessary to protect against them. Additionally, post-exploitation scenarios are discussed to illustrate the potential impact of these flaws, both technically and in business terms.

### 2. Keywords
SAP, Enterprise Software, RCE, root, Solution Manager, SolMan, Host Agent, CVE-2020-6207, CVE-2020-6234, CVE-2020-6236

### 3. Acknowledgements
We extend our gratitude to Nahuel D. Sánchez for his invaluable support, guidance, and encouragement throughout the research process.

### 4. Introduction
Enterprise software is a critical asset for companies, often managing sensitive and vital information. This is why companies trust expert vendors like SAP, which has been developing business applications for nearly 50 years. With over 450,000 customers in more than 180 countries, it is safe to say that most mid-to-large companies use SAP systems to keep their businesses running.

SAP offers a wide range of products, but one solution is ubiquitous: the SAP Solution Manager (SolMan). This paper details the results of extensive security research conducted on the SAP Solution Manager, a core component of every SAP implementation. We present a practical attack that exploits the power of SolMan and its agents.

#### 4.1. Solution Manager
In SAP landscapes, the SAP Solution Manager (SolMan) functions similarly to a domain controller in the Microsoft ecosystem. It is a highly privileged technical system connected to all other SAP systems. Once an SAP system is linked to SolMan, it becomes a "managed" or "satellite" system. As an administrative solution, SolMan centralizes the management of all systems within the landscape, performing tasks such as implementation, support, monitoring, and maintenance.

#### 4.2. SMD Agent
To fully leverage the capabilities of the Solution Manager, SAP customers must install the Solution Manager Diagnostic Agent (SMDAgent) on each host where an SAP system runs. The SMDAgent manages communications, instance monitoring, and diagnostic feedback to the Solution Manager. From the operating system's perspective, the user involved in all SMDAgent activities is `daaadm`.

#### 4.3. Host Agent
The SAP Host Agent is a component automatically installed during the setup of a new SAP system. It is independent of the operating system and database and can perform various lifecycle tasks, including monitoring, starting/stopping instances, and preparing for upgrades.

### 5. Architecture
From an architectural standpoint, the Solution Manager is connected to every system within the landscape. Typically, managed/satellite systems utilize the full capabilities of SolMan, so the SMDAgent is present on every server. The SAP Host Agent, while useful for both SAP and non-SAP applications, is always running on SAP application servers.

For a visual representation, refer to Figure 1, which illustrates an example architecture with the Solution Manager, SMD Agent, and Host Agent.

**Figure 1: Example architecture including Solution Manager, SMD Agent, and Host Agent.**

This diagram shows an SAP landscape with four systems (one Solution Manager and three managed systems) running different operating systems and SAP NetWeaver stacks. The SolMan is connected to all other systems, and both SMD and Host agents are present on all servers, including the SolMan itself.

### 6. Solution Manager Analysis

#### 6.1. Motivation
Several factors made the Solution Manager an interesting target for a security analysis. Two key reasons are:
- **Hyper-connected System:** It is connected to all other systems in the same landscape.
- **Ubiquitous Presence:** Every SAP implementation requires a Solution Manager. Identifying any issue in this critical asset could potentially affect other systems in the landscape.

The primary objective was to determine if an attacker could gain control of the system and, if so, how far they could go.

#### 6.2. Initial Phase
One of SolMan's components is the web server part of the Java stack. Like other SAP solutions running on the NetWeaver Java technology, it provides various applications, services, and functionalities. For example, configuring SMD Agents requires a specific application running on this web server.

The initial phase of the Solution Manager analysis involved reviewing exposed applications and web services to identify those that did not require authentication. While authenticated applications may also be vulnerable, unauthenticated ones pose a higher risk.

**Finding Unauthenticated Applications:**
- **Log Analysis:** To find previous communications.
- **Configuration Analysis:** To identify apps and their exposure based on configurations in files or the database.
- **Documentation Analysis:** To understand the available applications and their requirements.

After the initial discovery phase, a list of candidate applications was identified, including the End-user Experience Monitoring (EEM).

#### 6.3. Unauthenticated Application Discovery: EEM
Once the EEM application was identified as a potential vulnerability, an intensive analysis was conducted. Based on online documentation, self-testing, and other methods, we understood the purpose and nature of this application.

The End-user Experience Monitoring (EEM) application allows the simulation of end-user activities using proprietary SAP protocols such as RFC, DIAG, or HTTP. Technically, scripts for these protocols can be developed, uploaded, and executed against other systems. The actual execution of these scripts is performed by an EEM Robot, a system running a small Java application that interprets and executes the scripts. By default, every SMD Agent connected to the Solution Manager can act as an EEM Robot. From now on, the terms SMD Agent and EEM Robot will be used interchangeably.

**Summary of Steps:**
1. An SAP administrator obtains a script (either by developing it or having someone else do it).
2. The admin chooses the EEM Robot where the script will be deployed.
3. Once deployed, the EEM Robot executes the script.

Since the EEM application did not require authentication, the following questions arose:
- Can this application be used without authentication or authorization?
- Are there any critical actions that can be performed through scripts?

#### 6.4. EEM Technical Analysis
Technically, EEM is a SOAP endpoint. After retrieving and parsing its WSDL, 19 methods were available. Some of these methods include:
- `getAllAgentInfo`
- `runScript`
- `setAgeletProperties`
- `uploadResource`

A quick test using SOAP UI confirmed that actions could be performed without authentication. The `runScript` method required two parameters: the EEM robot host and the script name. Since all SMD Agents are EEM robots by default, a valid SMD Agent host and a dummy script name "Foo" were used. The server response indicated that EEM was not enabled on the agent, leading to further investigation.

**Enabling EEM Without Authentication:**
- **Testing `getAllAgentInfo`:** This method returned valuable information, confirming that neither authentication nor authorization was needed.
- **Enabling EEM:** The `setAgeletProperties` method was used to change the `eem.enable` property to `True`. Re-running `getAllAgentInfo` confirmed the change.

**Uploading and Running Custom Scripts:**
- **Testing `uploadResource`:** This function allowed the upload of base64-encoded content. A random string was encoded and uploaded, resulting in a validation error message, indicating that the content was not allowed.

This message confirmed that EEM was enabled and ready to be used by anyone without providing authentication or authorization. The next step was to explore the potential impact of this vulnerability.