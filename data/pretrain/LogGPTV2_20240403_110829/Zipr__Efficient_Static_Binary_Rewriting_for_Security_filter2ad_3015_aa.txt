title:Zipr: Efficient Static Binary Rewriting for Security
author:William H. Hawkins and
Jason D. Hiser and
Michele Co and
Anh Nguyen-Tuong and
Jack W. Davidson
Zipr++: Exceptional Binary Rewriting
Jason Hiser, Anh Nguyen-Tuong, William Hawkins, Matthew McGill, Michele Co, Jack Davidson
Department of Computer Science, University of Virginia, Charlottesville, VA 22904
{hiser,an7s,whh8b,mm8bx,mc2zk,jwd}@virginia.edu
ABSTRACT
Current software development methodologies and practices, while
enabling the production of large complex software systems, can
have a serious negative impact on software quality. These negative
impacts include excessive and unnecessary software complexity,
higher probability of software vulnerabilities, diminished execution
performance in both time and space, and the inability to easily and
rapidly deploy even minor updates to deployed software, to name a
few. Consequently, there has been growing interest in the capabil-
ity to do late-stage software (i.e., at the binary level) manipulation
to address these negative impacts. Unfortunately, highly robust,
late-stage manipulation of arbitrary binaries is difficult due to com-
plex implementation techniques and the corresponding software
structures. Indeed, many binary rewriters have limitations that
constrain their use. For example, to the best of our knowledge, no
binary rewriters handle applications that include and use exception
handlers—a feature used in programming languages such as C++,
Ada, Common Lisp, ML, to name a few.
This paper describes how Zipr, an efficient binary rewriter, ma-
nipulates applications with exception handlers and tables which
are required for unwinding the stack. While the technique should
be applicable to other binary rewriters, it is particularly useful for
Zipr because the recovery of the IR exposed in exception handling
tables significantly improves the runtime performance of Zipr’ed
binaries—average performance overhead on the full SPEC CPU2006
benchmark is reduced from 15% to 3%.
1 INTRODUCTION
Software systems are a vital component of critical infrastructure
such as transportation systems, communications systems, finan-
cial systems, power generation and distribution systems, and de-
fense systems. Current software development methodologies and
practices, while enabling the rapid production of these complex
software systems, can have a serious negative impact on software
quality. These negative impacts include excessive and unnecessary
software complexity, higher probability of software vulnerabilities,
diminished execution performance in both time and space, and the
inability to easily and rapidly deploy even minor updates to de-
ployed software, to name a few. Furthermore, the move to network
and mobile computing and constant pressure for new features and
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
FEAST’17, November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5395-3/17/11...$15.00
https://doi.org/10.1145/3141235.3141240
capabilities has made these vulnerable systems easily accessible to
malicious adversaries.
Consequently, there has been growing interest in developing
capabilities enabling late-stage software manipulation to address
these negative impacts. For example, there is high interest is modi-
fying legacy binaries to improve security. Modification techniques
suggested include adding security constructs (i.e., control-flow in-
tegrity, canaries, diversity, etc.), reducing the attack surface by
removing unneeded functionality, and applying patches to fix secu-
rity issues discovered post-deployment. Unfortunately, highly ro-
bust, late-stage manipulation of arbitrary binaries to apply systemic
changes is difficult due to complex implementation techniques and
the corresponding software structures. Indeed, many binary rewrit-
ers have limitations that constrain their use. To the best of our
knowledge, no static binary rewriters handle applications that use
exception handlers or stack unwinding—a feature integral to pro-
gramming languages such as C++, Ada, Common Lisp, ML, to name
a few.
This paper describes how we have extended Zipr [5], an efficient
binary rewriter, to manipulate applications with exception handlers
and tables, which are required for unwinding the stack. Unwind-
ing the stack is necessary for handling exceptions, object-oriented
programs (invoking necessary destructors), multi-threading (when
a thread exits, destructors on the stack must be invoked), and to
support debuggers such as gdb, dbx, and lldb. While the approach
should be applicable to other binary rewriters, it is particularly
useful for Zipr because the recovery of the IR in exception handling
tables significantly improves the runtime performance of Zipr’ed
binaries—average performance overhead on the full SPEC CPU2006
benchmark is reduced from 15% to 3%.
The major contributions of this paper are:
• We highlight the importance and costs of supporting stack
unwinding for exception handling in a static binary rewriter.
• We propose the first technique for constructing and manag-
ing an easy-to-use intermediate representation (IR), as well
as realizing that IR into a rewritten form in an output binary.
• We thoroughly evaluate the proposed technique in a modern,
fully-featured binary rewriter, including evaluation on the
full SPEC CPU2006 benchmark suite, a case study highlight-
ing a security transformation, and a case study demonstrat-
ing stability across programming languages (C++, Ada) and
supporting runtime environments (Ada).
2 EXCEPTIONAL BINARY REWRITING
2.1 Architectural Overview
Zipr++ provides full support for exception handling by extending
the Zipr binary rewriting infrastructure. Zipr is a platform for stati-
cally rewriting programs/libraries without access to their source
code, debugging symbols or other metadata and offers an API and
Session 1: Binary Rewriting and TransformationFEAST'17, November 3, 2017, Dallas, TX, USA92.2 EH Frame IR Construction
In Linux ELF executable files, the exception handling and stack un-
winding information is stored in several sections, namely .eh_frame_hdr,
.eh_frame, and .gcc_except_table, and some is stored as read-
only data and code in the .text section.
The main entry point for stack unwinding and exception han-
dling is the .eh_frame. This section contains a sequence of variable
length table entries. A table entry is either a common information
entry (CIE) or a frame descriptor entry (FDE). An FDE describes how
to unwind and cleanup the stack for a range of instructions. Each
FDE points at a CIE, which contains information common across
many FDEs. CIEs are a way to avoid duplication in the FDEs and
save space in the tables. It is common to have one FDE for each
function in the program, but a function may have multiple FDEs
for different portions of the program. Figure 2 shows an example,
with FDE 3 expanded.
FDEs record a variety of information necessary for stack unwind-
ing, cleanup, and exception handling. In particular, they record a
DWARF program, a pointer to a personality routine, as well as a
pointer to a so-called language specific data area (LSDA) (held in
the .gcc_except_table section).
The DWARF program (split between the CIE and FDE) specifies
how to unwind the stack. To be precise, it is a branch-free sequence
of instructions that describe how to build a table that can be used to
unwind the stack. These instructions are labeled DP# in the figure.
The table contains a row for each address in the FDE’s range, and
a column for each register in the program. An entry in the table,
when defined, is an offset from the canonical frame address (CFA)
where a register is stored during an unwind event. The CFA is
typically represented by the stack pointer, and this fact is typically
specified by the DWARF program in the CIE.
Where the DWARF program specifies how to unwind the stack,
the personality routine and LSDA help the runtime system call
destructors and catch exceptions. The personality routine knows
how to parse the LSDA. Technically, the LSDA is language- and
compiler-specific, but every language and compiler we examined
use the same format. All programs using the same format is a direct
consequence of how GCC implements the exception handling in its
language-agnostic backend and other compilers striving for binary
compatibility with GCC.
Besides additional fields to support denser encoding, the LSDA
has a table with an entry for each call site (CS) in the FDE’s range.
An entry in the call site table encodes the address of the call site,
as well as information about what types of exceptions should be
caught, and if the call site has a pointer to code (called a landing pad
or LP) that performs the necessary cleanup. In the figure, func3
has a string that is allocated on the stack, and if the call to func1
throws an exception, that string must have its destructor called.
Consequently, an entry in the LSDA specifies where the call site is,
that actions needs to be taken on an exception, where the code is
to perform those actions (the LP), and further specifies that the call
site catches exceptions of type int.
The .eh_frame_hdr section is optional and used to help the
runtime locate the proper entries in .eh_frame more quickly by
using a binary search instead of a linear search. The .eh_frame
Figure 1: Overview of the Zipr++ rewriting pipeline. New ex-
tensions to support exception handling are shown in blue.
SDK for third parties to write extensions and customizations to
instantiate arbitrary user-defined transformations [5]. Although it
is a tool for general static binary rewriting, the primary use case
for Zipr to date has been to retrofit legacy binaries with enhanced
security. Zipr was the key defensive technology used in the DARPA
Cyber Grand Challenge to diversify and augment binaries with
point patches and control-flow integrity protections [5, 14]. Other
uses include effecting moving-target defenses against blind ROP
attacks [6] and protecting autonomous drones [4].
Figure 1 illustrates the three major phases of the Zipr/Zipr++
pipeline: Intermediate Representation (IR) Construction, IR Manipu-
lation and IR Instantiation, with the required extensions to support
exception handling (shown in blue).
In the IR Construction phase, Zipr analyzes a program or library
to detect instructions, functions and data objects.
The recovered IR is passed to the IR Manipulation stage where
user-defined transformations programmatically modify the input
program by altering its IR.
Finally, the transformed IR is passed to the IR Instantiation phase
that generates a rewritten version of the program (Section 2.4). The
transformed program is executable on the same platform as the
original program without any additional runtime support.
To generate an efficient statically rewritten program/library, IR
Instantiation relies on the freedom to reassemble most instruction
sequences (basic blocks, functions, etc.) in the output at different
addresses than their addresses in the input. There are certain se-
quences that cannot be moved, however. The IR Construction phase