\ 1 :J
坏视中的W+是匹配优先的，它会匹配尽可能多的字符，也就是整个单词。因为它在环视
结构中，当环视结束之后，备用状态都会放弃（和固化分组一样）。但与固化分组不一样的
是，虽然此时确实捕获了这个单词，但它不是全局匹配的一部分（这就是环视的意义）。这
里的关键就是，后面的1捕获的就是环视结构捕获的单词，而这当然会匹配成功。在这
里使用八1并非多此一举，而是为了把匹配从这个单词结束的位置进行下去。
这个技巧比真正的固化分组要慢一些，因为需要额外的时间来重新匹配1的文本。不过，
因为环视结构可以放弃备用状态，如果冒号无法匹配，它的失败会来得更快一些。
多选结构也是匹配优先的吗
IsAlternationGreedy？
多选分支的工作原理非常重要，因为在不同的正则引擎中它们是迥然不同的。如果遇到的
多个多选分支都能够匹配，究竟会选择哪一个呢？或者说，如果不只一个多选分支能够匹
配，最后究竟应该选择哪一个呢？如果选择的是匹配文本最长的多选分支，有人也许会说
多选结构也是匹配优先的：如果选择的是匹配文本最短的多选分支，有人也许会说它是忽
略优先的？那么（如果只能是一个的话）究竟是哪个？
让我们看看Perl、PHP、Java、.NET以及其他语言使用的传统型NFA引擎。遇到多选结构
时，这种引擎会按照从左到右的顺序检查表达式中的多选分支。拿正则表达式^（Subject
Date）：来说，遇到'subject|Date时，首先尝试的是Subject)。如果能够匹配，就转
而处理接下来的部分（也就是后面的：）。如果无法匹配，而此时又有其他多选分支（就
是例子中的Dates)，正则引擎会回溯来尝试它。这个例子同样说明，正则引肇会回溯到存
在尚未尝试的多选分支的地方。这个过程会不断重复，直到完成全局匹配，或者所有的分
支（也就是本例中的所有多选分支）都尝试穷尽为止。
---
## Page 201
关于匹配优先和回溯的更多内容
175
所以，对于常见的传统型NFA引擎，用tour|toItournament来匹配'three'tournaments*
won’时，会得到什么结果呢？在尝试到‘three"tournaments"won”时，在每个位置进行
的匹配尝试都会失败，而且每次尝试时，都会检查所有的多选分支（并且失败）。而在这个
位置，第个多选分支touri能够匹配。因为这个多选结构是正则表达式中的最后部分，
tour：匹配结束也就意味着整个表达式匹配完成。其他的多选分支就不会尝试了。
因此我们知道，多选结构既不是匹配优先的，也不是忽略优先的，而是按顺序排列的，至
少对传统型NFA来说是如此。这比匹配优先的多选结构更有用，因为这样我们能够对匹配
的过程进行更多的控制一正则表达式的使用者可以用它下令：“先试这个，再试那个，最
后试另一个，直到试出结果为正”。
不过，也不是所有的流派都支持按序排列的多选结构。DFA和POSIXNFA确实有匹配优先
的多选结构，它们总是匹配所有多选分支中能匹配最多文本的那个（也就是本例中的
tournamenti)。但是，如果你使用的是Perl、PHP、.NET、java.util.regex，或者其他
使用传统型NFA的工具，多选结构就是按序排列的。
发掘有序多选结构的价值
TakingAdiantageofOrderedAlternation
回过头来看第167页（\.\d\d[1-9]?)\d*的例子。如果我们明白，\.\d\d[1-9]？其实等
于.\d\d或者.\d\d[1-9]，我们就可以把整个表达式重新写作（\.\d\dl\.\d\d[1-9]）
d*。（这并非必须的改动，只是举例说明）。这个表达式与之前的完全一样吗？如果多选结
构是匹配优先的，那么答案就是肯定的，但如果多选结构是有序的，两者就完全不一样。
我们来看多选结构有序的情形。首先选择和测试的是第一个多选分支，如果能够匹配，控
制权就转移到紧接的a*那里。如果还有其他的数字，\d*能够匹配它们，也就是任何不
为零的数字，它们是原来问题的根源（如果读者还记得，当时的问题就在于，这位数字我
们只希望在括号里匹配，而不通过括号外面的d*）。所以，如果第个多选分支无法匹配，
第二个多选分支同样无法匹配，因为二者的开头是一样的。即使第一个多选结构无法匹配，
正则引擎仍然会对第二个多选分支进行徒劳的尝试。
不过，如果交换多选分支的顺序，变成（\.\d\d[1-9]1\.\d\d）\d*，它就等价于匹配优
先的（\.\d\d[1-9]？）\d*。如果第一个多选分支结尾的[1-9]匹配失败，第二个多选分
支仍然有机会成功。我们使用的仍然是有序排列的多选结构，但是通过变换顺序，实现了
匹配优先的功能。
---
## Page 202
176
第4章：表达式的匹配原理
第一次拆分“[1-9]？成两个多选分支时，我们把较短的分支放在了前面，得到了-个不具
备匹配优先功能的？。在这个具体的例子中，这么做没有意义，因为如果第一个多选分支
不能匹配，第二个肯定也无法匹配。我经常看到这样没有意义的多选结构，对传统型NFA
来说，这肯定不对。我曾看到有一本书以'a（（ab）*Ib*）为例讲解传统型NFA正则表达式
的括号。这个例子显然没有意义，因为第一个多选分支（ab）*永远也不会匹配失败，所以
后面的其他多选分支毫无意义。你可以继续添加：
这个正则表达式的意义都不会有丝毫的改变。要记住的是，如果多选分支是有序的，而能
够匹配同样文本的多选分支又不只一个，就要小心安排多选分支的先后顺序。
有序多选结构的陷阱
有序多选分支容许使用者控制期望的匹配，因此极为便利，但也会给不明就里的人造成麻
烦。如果需要匹配‘Jan31’之类的日期，我们需要的就不是简单的Jan·[0123][0-9]1，
一种办法是把日期部分拆开。用0？[1-9]匹配可能以0开头的前九天的日期。用（12][0-9]
处理十号到二十九号，用3[01]处理最后两天。把上面这些连起来，就是“Jan
(0?[1-9]1[12][0~9]13[01])1。
当然是‘Jan31'，但是有序多选分支只会捕获‘Jan3'。奇怪吗？在匹配第一个多选分
支“0？[1-9]时，前面的'0？无法匹配，但是这个多选分支仍然能够匹配成功，因为[1-9]
能够匹配‘3’。因为此多选分支位于正则表达式的末尾，所以匹配到此完成。
如果我们重新安排多选结构的顺序环视，把能够匹配的数字最短的放到最后，这个问题就
解决了：Jan*([12][0-9]13[01]10?[1-9]）]
另一种办法是使用Jan·（311[123]01[012]?[1-9]）。但这也要求我们仔细地安排多选分
支的顺序避免问题。还有一种办法是Jan·(0[1-9]1[12][0-9]?13[01]?1[4-9]），这样不
论顺序环视如何都能获得正确结果。比较和分析这3个不同的表达式，会有很多发现（我
会给读者一些时间来想这个问题，尽管下一页的补充内容会有所帮助）。
---
## Page 203
NFA、DFA 和 POSIX
177
拆分日期的几种办法
下面几种办法都可以用来解决第176页的日期匹配问题。正则表达式中的元素能
匹配日历中对应元素的部分。
123456789
010203040506070809
10
111213141516171819
212223242526272829
1
3031
010203040506070809
[31|【123]0|[012]？[1-9]]
10111213141516171819
20212223242526272829
123456789
3031
010203040506070809
[12][0-9]|3[01]|0?[1-9]]
10111213141516171819
20212223242526272829
TEOE
NFA、DFA和POSIX
NFA,DFA, and POSIX
最左最长规则
"The Logest-Leftmost “
之前我们说过：如果传动装置在文本的某个特定位置启动DFA引擎，而在此位置又有一个
或多个匹配的可能，DFA就会选择这些可能中最长的。因为在所有同样从最左边开始的可
绝对最长
这里说的“最长”不限于多选结构。看看NFA如何用one（self）?（selfsufficient）？！
来匹配字符串oneselfsufficient。NFA首先匹配one)，然后是匹配优先的（self）？1，
留下（selfsufficient）？来匹配sufficient。它显然无法匹配，但整个表达式并不会因
此匹配失败，因为这个元素不是必须匹配的。所以，传统型NFA返回oneselfsufficient，
放弃没有尝试的状态（POSIXNFA的情况与此不同，我们稍后将会看到）。
---
## Page 204
178
第4章：表达式的匹配原理
与此相反，DFA会返回更长的结果：oneselfsufficient。如果最开始的（self)？因为
某些原因无法匹配，NFA也会返回跟DFA一样的结果，因为（Se1f）？无法匹配，
（selfsufficient）?就能成功匹配。传统型NFA不会这样，但是DFA则会这样，因为会
选择最长的可能匹配。DFA同时记录多个匹配，在任何时候都清楚所有的匹配可能，所以
它能做到这一点。
我选这个简单的例子是因为它很容易理解，但是我希望读者能够明白，这个问题在现实中
很重要。举例来说，如果希望匹配连续多行文本，常见的情况是，-个逻辑行（logicalline）
可以分为许多现实的行，每一行以反斜线结尾，例如：
SRC=array.c builtin.c eval.c field.c gawkmisc.c io.C main.c\
missing.c msg.c node.c re.c version.c
读者可能希望用\w+=.*来匹配这种“var=value”的数据，但是正则表达式无法识别连续
的行（在这里我们假设点号无法匹配换行符）。为了匹配多行，读者可能需要在表达式最后
添加"（\\\n.*)*，得到"\w+=.*(\\\n.*)*1。显然，这意味着任何后继的逻辑行都能匹配，
只要他们以反斜线结尾。这看起来没错，但在传统型NFA中行不通。.*到达行尾的时候，
已经匹配了反斜线，而表达式中后面的部分不会强迫进行回溯（152）。但是，DFA能够
匹配更长的多行文本，因为它确实是最长的。
如果能够使用忽略优先的量词，也许可以考虑用它们来解决问题，例如\w+=.*？（\\\n，
*？）*。这样点号每次实际匹配任何字符之前，都需要测试转义的换行符部分，这样\就
能够匹配换行符之前的反斜线。不过这也行不通。如果忽略优先量词匹配某些可选的部分，
必然是在全局匹配必须的情况下发生。但是在本例中，=后面的所有部分都不是必须匹配
的，所以没有东西会强迫忽略优先量词匹配任何字符。忽略优先的正则表达式只能匹配
SRC=，这显然不是我们期望的结果。
这个问题还有其他的解决办法，我们会在下一章继续这个问题（186）。
POSIX和最左最长规则
POSIXand theLongest-LeftmostRule
POSIX标准规定，如集在字符串的某个位置存在多个可能的匹配，应当返回的是最长的匹
配。
POSIX标准文档中使用了“最左边开始的最长匹配（longestoftheleftmost）”。它并没有规
---
## Page 205
NFA、DFA和POSIX
179
定必须使用DFA，那么，如果希望使用NFA来实践POSIX，程序员应该如何做？如果你希
望执行POSIXNFA，那么必须找到完整的oneselfsufficient和所有的连续行，虽然这
个结果是违反NFA“天性”的。
传统型NFA引擎会在第一次找到匹配时停下来，但是如果让它继续尝试其他分支（状态）
会怎样呢？每次匹配到表达式的末尾时，它都会获得另一个可能的匹配结果。如果所有的
分支都穷尽了，就能从中选择最长的匹配结果。这样，我们就得到了一台POSIXNFA。
在上面的例子中，NFA匹配'（self）?时保存了-个备用状态：one（self）？（selfsuf-
ficient）?i在oneselfsufficienti。传统型NFA在oneselfsufficient之后停止匹配，
而POSIXNFA仍然会继续检查余下的所有状态，最终得到那个更长的结果（其实是最长的）
oneselfsufficient。
第7章有个例子，可以让Perl模拟POSIX的做法，返回最长的匹配字符（225）。
速度和效率
Spel and Eficiency
如果传统型NFA的效率是我们应当关注的问题（对提供回溯的传统型NFA来说，这确实是
-一个问题），那么POSIXNFA的效率就更值得关注，因为它需要进行更多的回溯。POSIX
NFA需要尝试正则表达式的所有变体（译注4)。第6章告诉我们，正则表达式写得糟糕的
话，匹配的效率就会很低。
DFA的效率
文本主导的DFA巧妙地避免了回溯造成的效率问题。DFA同时记录了所有可能的匹配，这
样来提高速度。它是如何做到这-一切的呢？
DFA引擎需要更多的时间和内存，它第一次遇见正则表达式时，在做出任何尝试之前会用
比NFA详细得多的（也是截然不同的）办法来分析这个正则表达式。开始尝试匹配的时候，
它已经内建了一张路线图（map），描述“遇到这个和这个字符，就该选择这个和那个可能
的匹配”。字符串中的每个字符都会按照这张路线图来匹配。
有时候，构造这张路线图可能需要相当的时间和内存，不过只要建立了针对特定正则表达
式的路线图，结果就可以应用到任意长度的文本。这就好像为你的电动车充电一样。首先，
你得把车停到车库里面，插上电源等待一段时间，但只要发动了汽车，清洁的能源就会源
源而来。
译注4：permutation，指一个正则表达式能够匹配的各种形式的文本。
---
## Page 206
180
第4章：表达式的匹配原理
NFA理论与现实
NFA（译注5）真正的数学和计算学意义是不同于通常说的“NFA引擎”的。在理论
上，NFA和DFA引擎应该匹配完全一样的文本，提供完全一样的功能。但是在实际中，
因为人们需要更强的功能，更具表达能力的正则表达式，它的语意发生了变化。反向
引用就是一例。
DFA引擎的设计方案就排除了反向引用，但是对于真正（数学意义上的）的NFA引学
来说，提供反向引用的支持只需要很小的改动。这样我们就得到了一个功能更强大的
工具，但它绝对是非正则（nonregular）的（数学意义上的）。这是什么意思呢？或许，
你不应该继续叫它“NFA”，而是“不正则表达式（nonregularexpressions）”，因为这个
名词才能描述（在数学意义上）新的情形。但是实际没人这么做，所以这个名宇就这
样流传下来，虽然实现方式都不再是（数学意义上的）NFA。
这对用户有什么意义？显然没有什么意义。作为用户，你不需要关心它是正则还是非
正则，而只需要知道它能为你做什么（也就是本章的内容）。
对那些希望了解更多的正则表达式的理论的人，经典的计算机科学教学文本是，Aho，
Sethi、Ullman 的 Compilers—Principles,Techniques,and Tools (Addison-Wesley,1986)
的第3章，通常说的“恐龙书”，因为它的封面。更确切地说，这是一条“红龙”，“绿
龙”指的是它的前任，Aho和Ullman的PrinciplesofCompilerDesign.
小结：NFA与DFA的比较
Summary: NFA and DFA in Comparison
NFA与DFA各有利擎。
DFA与NFA：在预编译阶段（pre-usecompile）的区别
在使用正则表达式搜索之前，两种引擎都会编译表达式，得到一套内化形式，适应各自的
匹配算法。NFA的编译过程通常要快一一些，需要的内存也更少一些。传统型NFA和POSIX
NFA之间并没有实质的差别。
译注5：此处NFA指的是非确定型有穷自动机
---
## Page 207
NFA、DFA和POSIX
181
DFA与NFA：匹配速度的差别
对于“正常”情况下的简单文本匹配测试，两种引擎的速度差不多。一般来说，DFA的速
度与正则表达式无关，而NFA中两者直接相关。
传统的NFA在报告无法匹配以前，必须尝试正则表达式的所有变体。这就是为什么我要用
整章（第6章）来论述提高NFA表达式匹配速度的技巧。我们将会看到，有时候一个NFA
永远无法结束匹配。传统型NFA如果能找到一个匹配，肯定会停止匹配。
相反，POSIXNFA必须尝试正则表达式的所有变体，确保获得最长的匹配文本，所以如果
匹配失败，它所花的时间与传统型NFA-样（有可能很长）。因此，对POSIXNFA来说，
表达式的效率问题更为重要。
在某种意义上，我说得绝对了一点，因为优化措施通常能够减少获得匹配结果的时间。我
们已经着到，优化引擎不会在字符串并头之外的任何地方尝试带锚点的表达式，我们会
在第6章看到更多的优化措施。
DFA不需要做太多的优化，因为它的匹配速度很快，不过最重要的是，DFA在预编译阶段
所作的工作提供的优化效果，要好于大多数NFA引擎复杂的优化措施。
现代DFA引擎经常会尝试在匹配需要时再进行预编译，减少所需的时间和内存。因为应用
的文本各异，通常情况下大部分的预编译都是白费工夫。因此，如果在匹配过程确实需要