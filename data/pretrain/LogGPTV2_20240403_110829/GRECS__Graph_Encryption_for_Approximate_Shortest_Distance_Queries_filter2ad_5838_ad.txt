mal communication complexity, it has two limitations. The
ﬁrst is that it is less computationally-eﬃcient than our ﬁrst
construction GraphEnc1 both with respect to constructing
the encrypted graph and to querying it. The second limita-
tion is that its storage complexity is relatively high; that is,
it produces encrypted graphs that are larger than the ones
produced by GraphEnc1 by a factor of 2 · S · ε−1. These lim-
itations are mainly due to the need to ﬁll the hash tables
with many homomorphic encryptions of 0. This also slows
down the query algorithm since it has to homomorphically
evaluate an inner product on two large tables.
To address
this, we propose a third construction
GraphEnc3 = (Setup, distQuery) which is both space-eﬃcient
and achieves O(1) communication complexity. The only
trade-oﬀ is that it leaks more than the two previous con-
structions.
Algorithm 3: Setup algorithm for GraphEnc3
Input : 1k, ΩG, α, ε
Output: EO
1 begin Setup
$← {0, 1}k;
Sample K1, K2
Initialize a counter ctr = 1;
Let Z =(cid:80)
v∈V |Skv|;
Sample a random permutation π over [Z];
Initialize an array Arr of size Z;
Initialize a dictionary DX of size n;
Generate (pk, sk) ← SWHE.Gen(1k);
Set S := maxv∈V |Skv|;
Set D := maxv∈V
Set N := 2 · D + 1 and t = 2 · S2 · ε−1;
Initialize collision-resistant hash function
h : V → [t];
foreach v ∈ V do
(cid:8) max(w,δ)∈Skv δ(cid:9);
sample Kv ← {0, 1}k;
foreach (wi, δi) ∈ Skv do
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
compute ci ← SWHE.Encpk(2N−δi );
if i (cid:54)= |Skv| then
Set Ni = (cid:104)h(wi)(cid:107)ci(cid:107)π(ctr + 1)(cid:105);
Set Ni = (cid:104)h(wi)(cid:107)ci(cid:107)NULL(cid:105);
else
$← {0, 1}k;
Sample ri
Set Arr[π(ctr)] := (cid:104)Ni ⊕ H(Kv(cid:107)ri), ri(cid:105);
Set ctr = ctr + 1 ;
foreach v ∈ V (in random order) do
Set DX[PK1 (v)] := (cid:104)addrArr(hv)(cid:107)Kv(cid:105) ⊕ FK2 (v)
Output K = (K1, K2, pk, sk) and EO = (DX, Arr);
The details of the scheme are given in Algorithms 3 and 4.
At a high-level, the scheme works similarly to GraphEnc2
with the exception that the encrypted sketches do not store
encryptions of 0’s, i.e., they only store the node/distance
pairs of the sketches constructed by the underlying distance
oracle.
Implementing this high-level idea is not straight-
forward, however, because simply removing the encryptions
of 0’s from the encrypted sketches/hash tables reveals the
size of the underlying sketches to the server which, in turn,
leaks structural information about the graph. We overcome
this technical diﬃculty by adapting a technique from [13]
to our setting. Intuitively, we view the seed/distance pairs
in each sketch Skv as a linked-list where each node stores a
seed/distance pair. We then randomly shuﬄe all the nodes
and place them in an array; that is, we place each node of
each list at a random location in the array while updating
the pointers so that the “logical” integrity of the lists are
preserved (i.e., given a pointer to the head of a list we can
still ﬁnd all its nodes). We then encrypt all the nodes with
a per-list secret key.
The scheme makes use of a SWHE scheme SWHE =
(Gen, Enc, Eval, Dec), a pseudo-random permutation P , a
pseudo-random function F , a random oracle H and a
collision-resistant hash function h modeled as a random
function
v∈V |Skv|.
π over the domain [Z], where Z = (cid:80)
The Setup algorithm takes as input a security parameter
k, an oracle ΩG , an approximation factor α, and an error
parameter ε (cid:1)(cid:1)(cid:1)511Algorithm 4: The protocol distQueryC,S.
Input : Client’s input is K, q = (u, v) and server’s
Output: Client’s output is d and server’s output is ⊥
input is EO
1 begin distQuery
2
C: computes (tk1, tk2, tk3, tk4) =
(PK1 (u), PK1 (v), FK2 (u), FK2 (v));
C ⇒ S: sends tk = (tk1, tk2, tk3, tk4);
S: computes γ1 ← DX[tk1] and γ2 ← DX[tk2];
if γ1 = ⊥ or γ2 = ⊥ then
exit and return ⊥ to the client
S: compute (cid:104)a1||Ku(cid:105) := γ1 ⊕ tk3;
S: parse Arr[a1] as (cid:104)σu, ru(cid:105);
S: compute N1 := σu ⊕ H(Ku(cid:107)ru);
repeat
parse Ni as (cid:104)hi(cid:107)ci(cid:107)ai+1(cid:105);
parse Arr[ai+1] as (cid:104)σi+1, ri+1(cid:105);
compute Ni+1 := σi+1 ⊕ H(Ku(cid:107)ri+1);
set i = i + 1;
until ai+1 = NULL;
S: compute (cid:104)b1||Kv(cid:105) := γ2 ⊕ tk4;
S: parse Arr[b1] as (cid:104)σv, rv(cid:105);
1 := σv ⊕ H(Kv(cid:107)rv);
(cid:48)
S: compute N
repeat
j(cid:107)c(cid:48)
j(cid:107)bj+1(cid:105);
j as (cid:104)h(cid:48)
(cid:48)
parse N
parse Arr[bj+1] as (cid:104)σj+1, rj+1(cid:105);
j+1 := σj+1 ⊕ H(Kv(cid:107)rj+1);
(cid:48)
compute N
set j = j + 1;
until bj+1 = NULL;
S: set s := SWHE.Encpk(0);
(cid:48)
foreach (Ni, N
j) do
if hi = h(cid:48)
j then
compute p := SWHE.Eval(×, ci, c(cid:48)
j);
compute s := SWHE.Eval(+, s, p);
S ⇒ C: send s;
C: compute d := SWHE.Decsk(s)
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
:= DX[tk1] and γ2
(PK1 (u), PK1 (v), FK2 (u), FK2 (v)) to the server which uses
them to retrieve the values γ1
:=
DX[tk2]. The server computes (cid:104)a1||Ku(cid:105) := γ1 ⊕ tk3 and
(cid:104)b1||Kv(cid:105) := γ2 ⊕ tk4. Next, it recovers the lists pointed
to by a1 and b1. More precisely, starting with i = 1, it
parses Arr[a1] as (cid:104)σu, ru(cid:105) and decrypts σu by computing
(cid:104)hi(cid:107)ci(cid:107)ai+1(cid:105) := σu ⊕ H(Ku(cid:107)ru) while ai+1 (cid:54)= NULL. And
starting with j = 1, it does the same to recover (cid:104)h(cid:48)
j(cid:107)bj+1(cid:105)
while bj+1 (cid:54)= NULL.
The server then homomorphically computes an inner
product over the ciphertexts with the same hashes. More
precisely, it computes ans := (cid:80)
j, where (cid:80)
ci · c(cid:48)
j
and · refer to the homomorphic addition and multiplica-
tion operations of the SWHE scheme. Finally, the server
returns only ans to the client which decrypts it and outputs
2N − log2 (SWHE.Decsk(ans)).
Note that the storage complexity at the server is O(m +
|V |) and the communication complexity of distQuery is still
O(1) since the server only returns a single ciphertext.
(i,j):hi=h(cid:48)
j(cid:107)c(cid:48)
5.3.1 Correctness and Security
The correctness of GraphEnc3 follows directly from the cor-
rectness of GraphEnc2. To see why, observe that: (1) the
homomorphic encryptions stored in the encrypted graph of
GraphEnc3 are the same as those in the encrypted graph pro-
duced by GraphEnc2 with the exception of the encryptions of
0; and (2) the output d of the client results from executing
the same homomorphic operations as in GraphEnc2, with the
exception of the homomorphic sums with 0-encryptions.
We note that GraphEnc3 leaks only a little more than the
previous constructions. With respect to setup leakage it re-
veals, in addition to (n, S, D), the total number of seeds
Z.
Intuitively, for a query q = (u, v), the query leakage
consists the query pattern leakage in addition to: (1) which
seed/distance pairs in the sketches Sku and Skv are the same;
and (2) the size of these sketches. This is formalized in Def-
inition 4.4 as the sketch pattern leakage LSP (ΩG, q). In the
following Theorem, we summarize the security of GraphEnc3.
Theorem 5.4. If P and F are pseudo-random, if SWHE
is CPA-secure then GraphEnc3, as described above,
is
adaptively (LSetup,LQuery)-semantically secure in the ran-
dom oracle model, where LSetup(ΩG) = (n, S, D, Z) and
LQuery(ΩG, q) = (LQP (ΩG, q),LSP (ΩG, q)).
Proof Sketch: Consider the simulator S that works as fol-
lows. Given leakage LSetup = (n, S, D, Z), for all 1 ≤ i ≤ Z
$← {0, 1}log t+g(N )+log Z+k, where g(·) is the ci-
it samples Γi
phertext expansion of SWHE, t = 2·S2·ε−1 and N = 2·D+1.
It then stores all the Γi’s in a Z-element array Arr. For
all 1 ≤ i ≤ n, it samples (cid:96)i
$← {0, 1}log n without repe-
tition and sets DX[(cid:96)i] $← {0, 1}log Z+k. Finally, it outputs
EO = (DX, Arr).
Given leakage LQuery(G, q) = (LQP (G, q),LSP (G, q)) such
that LSP (G, q) = (X, Y ), S ﬁrst checks if either of the query
nodes u or v appeared in any previous query. If u appeared
previously, S sets tk1 and tk3 to the values that were pre-
If not, it sets tk1 := (cid:96)i for some previously
viously used.
unused (cid:96)i and tk3 as follows.
It chooses a previously un-
used α ∈ [Z] at random, a key Ku
$← {0, 1}k and sets
tk3 := DX[tk1] ⊕ (cid:104)α(cid:107)Ku(cid:105). It then remembers the associa-
tion between Ku and X and the sketch size |Sku|. It does
the same for the query node v, sets tk2 and tk4 analogously
and associates |Skv| and Y with the key Kv it chooses.
It simulates the random oracle H as follows. Given (K, r)
as input, it checks to see if: (1) K has been queried before
(in the random oracle); and (2) if any entry in Arr has the
form (cid:104)s, r(cid:105) where s is a (log t + g(N ) + log Z)-bit string.
If K has not been queried before, it initializes a counter
ctrK := 0. If an appropriate entry exists in Arr, it returns
s ⊕ (cid:104)γ, c, p(cid:105), where γ is the ctrth element of the multi-set
X or Y associated with K, c is a SWHE encryption of 0
and p is an unused address in Arr chosen at random or ∅ if
ctr = |Sk|, where |Sk| is the sketch size associated with K. If
no appropriate entry exists in Arr, S returns a random value.
The Theorem then follows from the pseudo-randomness of
(cid:4)
P and F and the CPA-security of SWHE.
6 Experimental Evaluation