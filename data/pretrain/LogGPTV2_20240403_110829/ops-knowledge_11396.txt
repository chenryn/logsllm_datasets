When working with `pip` to install Python modules that have dependencies on non-Python libraries, such as `pyodbc`, which relies on `unixodbc-dev`, `unixodbc-bin`, and `unixodbc`, you may encounter challenges if these dependencies are installed in non-standard locations. Hereâ€™s a more detailed and professional approach to address this issue:

### Using Environment Variables
One way to inform `pip` about the location of these dependencies is by setting environment variables. This can be done before running the `pip install` command. For example:

1. **Set the `CFLAGS` and `LDFLAGS` environment variables:**
   - `CFLAGS` for include directories:
     ```sh
     export CFLAGS="-I/path/to/unixodbc/include"
     ```
   - `LDFLAGS` for library directories:
     ```sh
     export LDFLAGS="-L/path/to/unixodbc/lib"
     ```

2. **Set the `LIBRARY_PATH` and `CPATH` environment variables:**
   - `LIBRARY_PATH` for library directories:
     ```sh
     export LIBRARY_PATH="/path/to/unixodbc/lib"
     ```
   - `CPATH` for include directories:
     ```sh
     export CPATH="/path/to/unixodbc/include"
     ```

3. **Install the package using `pip`:**
   ```sh
   pip install pyodbc
   ```

### Using `setup.py` Directly
If the above method does not work, or if you prefer more control over the build process, you can download the package and use its `setup.py` file directly. This allows you to pass additional arguments to the setup script.

1. **Download the package:**
   ```sh
   git clone https://github.com/mkleehammer/pyodbc.git
   cd pyodbc
   ```

2. **Run the `setup.py` script with the necessary flags:**
   ```sh
   python setup.py build_ext --include-dirs=/path/to/unixodbc/include --library-dirs=/path/to/unixodbc/lib
   python setup.py install
   ```

### Alternative: Using `pymssql`
If you find that `pyodbc` is too cumbersome to set up, you might consider using an alternative library like `pymssql`, which is often easier to install and use.

1. **Install `pymssql` using `pip`:**
   ```sh
   pip install pymssql
   ```

### Summary
- **Environment Variables:** Set `CFLAGS`, `LDFLAGS`, `LIBRARY_PATH`, and `CPATH` to point to your non-standard installation directories.
- **Direct `setup.py` Usage:** Download the package and use `setup.py` with the appropriate flags to specify include and library directories.
- **Alternative Library:** Consider using `pymssql` if `pyodbc` proves too difficult to set up.

By following these steps, you should be able to successfully install `pyodbc` or switch to a more manageable alternative.