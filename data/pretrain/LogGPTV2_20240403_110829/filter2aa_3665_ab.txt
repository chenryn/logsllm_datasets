# 字符串的索引
获取字符串中指定位置的字符，例如获取“开头第 3 位的字符”时，与数组一样，我们也需要用到索引。
```ruby
str = "全新的String 类对象"
p str[0]    #=> "全"
p str[3]    #=> "S"
p str[9]    #=> "类"
p str[2, 8] #=> "的String 类"
p str[4]    #=> "t"
```
# 字符串的连接
连接字符串有以下两种方法
- 将两个字符串合并为新的字符串
- 扩展原有的字符串
    用 `+` 创建新的字符串。
    ```ruby
    hello = "Hello, "
    world = "World!"
    str = hello + world
    p str    #=> "Hello, World!"
    ```
    为原有字符串连接其他字符串时，可以使用 ` "Hello, World!"
    hello.concat(world)
    p hello    #=> "Hello, World!World!"
    ```
    使用 `+` 也能连接原有字符串。
    ```ruby
    hello = hello + world
    ```
    用 `+` 连接原有字符串的结果会被再次赋值给变量 `hello`，这与使用 ` false
p "aaa" == "aa"   #=> false
p "aaa" == "aaa"  #=> true
p "aaa" != "baa"  #=> true
p "aaa" != "aaa"  #=> false
```
虽然判断字符串是否相同时使用 `==` 或者 `!=` 会很方便，但判断是否为相似的字符串时，使用正则表达式则会简单得多。
**字符串的大小比较**
字符串也有大小关系，但字符串的大小关系并不是由字符串的长度决定的。
```ruby
p ("aaaaa"  true
```
字符串的大小由字符编码的顺序决定。英文字母按照“ABC”的顺序排列，日语的平假名与片假名按照“あいうえお”的顺序排列，在排列英语或日语的字符串时，就可以使用该顺序。不过，Ruby 中日语的排序规则与字典中的顺序是不同的。例如对“かけ”、“かこ”、“がけ”这 3 个单词排序时，字典中的顺序是“かけ”、“がけ”、“かこ”，而在 Ruby 中，从小到大依次是“かけ”、“かこ”、“がけ”。
中文字符也同样是由字符编码的顺序决定的。例如，在 UTF-8 字符编码表中，“一”的编码为 U+4E00，“丁”的编码为 U+4E01，两个字符的比较结果如下。
```ruby
p (" 一"  true
```
**字符编码**
计算机中的字符都是用数值来管理的，这样的数值也称为编码。
字符与数值的对应关系如下表所示。
字符	| 数值
- | -
A	    | 65
B	    | 66
C	    | 67
我们把上表那样字符与数值一一对应的关系称为字符编码。但字符编码并不是一个正确的专业术语，因此我们需要小心使用。
ASCII 编码是计算机的基础。ASCII 编码是指把英文字母、数值、其他符号、以及换行、制表符这样的特殊字符集合起来，为它们分配 1 到 127 之间的数值，并使之占用 1 个字节空间（1 个字节可以表示 0 到 255）。另外，在欧美，一种名为 ISO-8859-1 的编码曾经被广泛使用，该编码包含了欧洲常用的基本字符（拼写符号、原音变音等），并为它们分配 128 到 255之间的数值。也就是说，大部分的字符都是占用 1 个字节的空间。
使用日语时不可能不使用平假名、片假名或者汉字，但只用一个字节来表示这些字符是不可能的。因此，为了表示这些字符，用两个字节表示一个字符的技术就诞生了。
不过，非常可惜的是日语的字符编码并不只有 1 种，而是大概可以分为以下 4 种编码方式，并且相同编码方式得到的字符也不一定相等。
编码方式	| 主要使用的地方
- | -
Shift_JIS	| Windows 文本
UTF-8	    | Unix 文本、HTML 等
EUC-JP	    | Unix 文本
ISO-2022-JP	| 电子邮件等
为字符分配与之对应的数值，这样的分配方式就称为字符编码方式（character encoding scheme）。在日本，常用的编码方式有 Shift_JIS、EUC-JP、ISO-2022-JP 这 3 种。它们是日语标准字符编码 JIS X0208 的基础。字符编码的名称一般都直接使用编码方式的名称。例如我们会说“这个文本的字符编码是 EUC，在 Windows 中打开的时候要小心”。
编码方式不同的情况下，即使是相同的字符，对其分配的数值也会不一样。编码方式的不同，就是导致俗称为“乱码”的问题的原因之一
字符	| Shift_JIS	| EUC-JP	| ISO-2022-JP	| UTF-8
- | - | - | - | -
あ	    | 82A0	    | A4A2	    | 2422	        | E38182
在上表中，あ字符被分配的数值是用 16 进制表示的。据此可以看出，不同的编码方式所对应的数值是不一样的。像这样表示字符的值，我们称之为码位（code point）。在 Ruby 中可以用 `String.ord` 方法获取字符的码位。
```ruby
#encoding: EUC-JP
p "あ".ord    #=> 42146(16 进制为A4A2)
```
# 字符串的分割
用特定字符分割字符串时可以使用 `split` 方法。例如，用冒号`（:）`分割字符串的程序就可以像下面那样写：
```ruby
column = str.split(/:/)
```
这样一来，分割后的各项字符串就会以数组的形式赋值给 `column`。
```ruby
str = "高桥:gaoqiao:1234567:000-123-4567"
column = str.split(/:/)
p column
#=> ["高桥", "gaoqiao", "1234567", "000-123-4567"]
```
# 换行符的使用方法
用 `each_line` 等方法从标准输入读取字符串时，末尾肯定有换行符。然而，在实际处理字符串时，换行符有时候会很碍事。这种情况下，我们就需要删除多余的换行符
效果 	    | 删除最后一个字符	| 删除换行符
- | - | -
非破坏性的	| chop	            | chomp
破坏性的	| chop!	            | chomp!
`chop` 方法与 `chop!` 方法会删除字符串行末的任何字符，`chomp` 方法与 `chomp!` 方法则只在行末为换行符时才将其删除。
```ruby
str = "abcde"    # 没有换行符的情况
newstr = str.chop
p newstr    #=> "abcd"
newstr = str.chomp
p newstr    #=> "abcde"
str2 = "abcd\n"    # 有换行符的情况
newstr = str2.chop
p newstr    #=> "abcd"
newstr = str2.chomp
p newstr    #=> "abcd"
```
用 `each_line` 方法循环读取新的行时，一般会使用具有破坏性的 `chomp!` 方法直接删除换行符。
```
f.each_line do |line|
line.chomp!
 处理line
end
```
上面是 `chomp!` 的典型用法。另外，不同的运行环境下，换行符也不同.
# 字符串的检索与置换
字符串处理一般都离不开检索与置换。Ruby 可以很轻松地处理字符串。
**字符串的检索**
我们可以用 `index` 方法或者 `rindex` 方法，来检查指定的字符串是否存在在某字符串中。
`index` 方法会从左到右检查字符串中是否存在参数指定的字符串，而 `rindex` 方法则是按照从右到左的顺序来检查（rindex 的“r”表示的就是 right（右）的意思）。
```ruby
str =  "ABBBBBB"
p str.index("BB")     #=> 1
p str.rindex("BB")    #=> 5
```
找到字符串时，`index` 方法和 `rindex` 方法会返回字符串首个字符的索引值，没找到时则返回 `nil`。
另外，如果只是想知道字符串中是否有参数指定的字符串，用 `include?` 方法会更好。
```ruby
str = "ABBBBBB"
p str.include?("BB")    #=> true
```
除了直接检索字符串外，Ruby 还可以使用正则表达式来检索。
# 关于换行符
所谓换行符就是指进行换行的符号。计算机里使用的字符都被分配了 1 个与之对应的数值，同理，换行符也有 1 个与之对应的数值。不过麻烦的是，不同的 OS 对换行符的处理也不同。
下面是常用的 OS 的换行符。这里，LF（LineFeed）的字符为 `\n`，CR（Carriage Return）的字符为 `\r`。
OS 种类	        | 换行符
- | -
Unix 系列	    | LF
Windows 系列	| CR + LF
Mac OS 9 以前	| CR
Ruby 中的标准换行符为 LF，一般在 `IO#each_line` 等方法中使用。也就是说，Ruby 在处理 Max OS 9 以前版本的文本时，可能会出现不能正确换行的情况。
我们可以通过参数指定 `each_line` 方法所使用的换行符，默认为 `each_line("\n")`。
**字符串的置换**
有时我们可能会需要用其他字符串来替换目标字符串中的某一部分。我们把这样的替换过程称为置换。用 `sub` 方法与 `gsub` 方法即可实现字符串的置换。
# 字符串与数组的共同方法
字符串中有很多与数组共同的方法。
当然，继承了 `Object` 类的实例的方法，在字符串（`String` 类的实例）以及数组（`Array` 类的实例）中也都能使用。除此以外，下面的方法也都能使用。
- 与索引操作相关的方法
- 与 `Enumerable` 模块相关的方法
- 与连接、反转（`reverse`）相关的方法
**与索引操作相关的方法**
字符串也能像数组那样操作索引。数组适用的索引操作方法，也同样适用于字符串。
- `s[n] = str`
- `s[n..m] = str`
- `s[n, len] = str`
    用 str 置换字符串 s 的一部分。这里 n、m、len 都是以字符为单位的。
    ```ruby
    str = "abcde"
    str[2, 1] = "C"
    p str    #=> "abCde"
    ```
- `s.slice!(n)`
- `s.slice!(n..m)`
- `s.slice!(n, len)`
    删除字符串 s 的一部分，并返回删除的部分。
    ```ruby
    str = "Hello, Ruby."
    p str.slice!(-1)    #=> "."
    p str.slice!(5..6)  #=> ", "