Chapter 6: Kernel Mechanisms
This chapter discussed various mechanisms the Windows kernel provides. Some of these are directly useful
for driver writers. Others are mechanisms that a driver developer needs to understand as it helps with
debugging and general understanding of activities in the system.
In this chapter:
• Interrupt Request Level
• Deferred Procedure Calls
• Asynchronous Procedure Calls
• Structured Exception Handling
• System Crash
• Thread Synchronization
• High IRQL Synchronization
• Work Items
Interrupt Request Level (IRQL)
In chapter 1, we discussed threads and thread priorities. These priorities are taken into consideration when
more threads want to execute than there are available processors. At the same time, hardware devices
need to notify the system that something requires attention. A simple example is an I/O operation that is
carried out by a disk drive. Once the operation completes, the disk drive notifies completion by requesting
an interrupt. This interrupt is connected to an Interrupt Controller hardware that then sends the request
to a processor for handling. The next question is, which thread should execute the associated Interrupt
Service Routine (ISR)?
Every hardware interrupt is associated with a priority, called Interrupt Request Level (IRQL) (not to be
confused with an interrupt physical line known as IRQ), determined by the HAL. Each processor’s context
has its own IRQL, just like any register. IRQLs may or may not be implemented by the CPU hardware, but
this is essentially unimportant. IRQL should be treated just like any other CPU register.
The basic rule is that a processor executes the code with the highest IRQL. For example, if a CPU’s IRQL is
zero at some point, and an interrupt with an associated IRQL of 5 comes in, it will save its state (context) in
the current thread’s kernel stack, raise its IRQL to 5 and then execute the ISR associated with the interrupt.
Once the ISR completes, the IRQL will drop to its previous level, resuming the previously executed code
as though the interrupt never happened. While the ISR is executing, other interrupts coming in with an
Chapter 6: Kernel Mechanisms
132
IRQL of 5 or less cannot interrupt this processor. If, on the other hand, the IRQL of the new interrupt is
above 5, the CPU will save its state again, raise IRQL to the new level, execute the second ISR associated
with the second interrupt and when completed, will drop back to IRQL 5, restore its state and continue
executing the original ISR. Essentially, raising IRQL blocks code with equal or lower IRQL temporarily.
The basic sequence of events when an interrupt occurs is depicted in figure 6-1. Figure 6-2 shows what
interrupt nesting looks like.
Figure 6-1: Basic interrupt dispatching
Chapter 6: Kernel Mechanisms
133
Figure 6-2: Nested interrupts
An important fact for the depicted scenarios in figures 6-1 and 6-2 is that execution of all ISRs is done
by the same thread - which got interrupted in the first place. Windows does not have a special thread
to handle interrupts; they are handled by whatever thread was running at that time on the interrupted
processor. As we’ll soon discover, context switching is not possible when the IRQL of the processor is 2 or
higher, so there is no way another thread can sneak in while these ISRs execute.
The interrupted thread does not get its quantum reduced because of these “interruptions”. It’s not its
fault, so to speak.
When user-mode code is executing, the IRQL is always zero. This is one reason why the term IRQL is not
mentioned in any user-mode documentation - it’s always zero and cannot be changed. Most kernel-mode
code runs with IRQL zero as well. It’s possible, however, in kernel mode, to raise the IRQL on the current
processor.
The important IRQLs are described below:
• PASSIVE_LEVEL in WDK (0) - this is the “normal” IRQL for a CPU. User-mode code always runs
at this level. Thread scheduling working normally, as described in chapter 1.
• APC_LEVEL (1) - used for special kernel APCs (Asynchronous Procedure Calls will be discussed later
in this chapter). Thread scheduling works normally.
• DISPATCH_LEVEL (2) - this is where things change radically. The scheduler cannot wake up on this
CPU. Paged memory access is not allowed - such access causes a system crash. Since the scheduler
cannot interfere, waiting on kernel objects is not allowed (causes a system crash if used).
• Device IRQL - a range of levels used for hardware interrupts (3 to 11 on x64/ARM/ARM64, 3 to 26
on x86). All rules from IRQL 2 apply here as well.
Chapter 6: Kernel Mechanisms
134
• Highest level (HIGH_LEVEL) - this is the highest IRQL, masking all interrupts. Used by some APIs
dealing with linked list manipulation. The actual values are 15 (x64/ARM/ARM64) and 31 (x86).
When a processor’s IRQL is raised to 2 or higher (for whatever reason), certain restrictions apply on the
executing code:
• Accessing memory not in physical memory is fatal and causes a system crash. This means accessing
data from non-paged pool is always safe, whereas accessing data from paged pool or from user-
supplied buffers is not safe and should be avoided.
• Waiting on any kernel object (e.g. mutex or event) causes a system crash, unless the wait timeout is
zero, which is still allowed. (we’ll discuss dispatcher object and waiting later in this chapter in the
Thread Synchronization”* section.)
These restrictions are due to the fact that the scheduler “runs” at IRQL 2; so if a processor’s IRQL is already
2 or higher, the scheduler cannot wake up on that processor, so context switches (replacing the running
thread with another on this CPU) cannot occur. Only higher level interrupts can temporarily divert code
into an associated ISR, but it’s still the same thread - no context switch can occur; the thread’s context is
saved, the ISR executes and the thread’s state resumes.
The current IRQL of a processor can be viewed while debugging with the !irql command.
An optional CPU number can be specified, which shows the IRQL of that CPU.
You can view the registered interrupts on a system using the !idt debugger command.
Raising and Lowering IRQL
As previously discussed, in user mode the concept of IRQL is not mentioned and there is no way to
change it. In kernel mode, the IRQL can be raised with the KeRaiseIrql function and lowered back with
KeLowerIrql. Here is a code snippet that raises the IRQL to DISPATCH_LEVEL (2), and then lowers it
back after executing some instructions at this IRQL.
// assuming current IRQL = 2 is not a good thing; user mode code is not running for sure.
This is just one reason there are severe restrictions on what executing code can do at these levels.
Task Manager shows the amount of CPU time spent in IRQL 2 or higher using a pseudo-process called
System Interrupts; Process Explorer calls it Interrupts. Figure 6-3 shows a screenshot from Task Manager
and figure 6-4 shows the same information in Process Explorer.
Figure 6-3: IRQL 2+ CPU time in Task Manager
Figure 6-4: IRQL 2+ CPU time in Process Explorer
Deferred Procedure Calls
Figure 6-5 shows a typical sequence of events when a client invokes some I/O operation. In this figure,
a user mode thread opens a handle to a file, and issues a read operation using the ReadFile function.
Since the thread can make an asynchronous call, it regains control almost immediately and can do other
work. The driver receiving this request, calls the file system driver (e.g. NTFS), which may call other
drivers below it, until the request reaches the disk driver, which initiates the operation on the actual disk
hardware. At that point, no code needs to execute, since the hardware “does its thing”.
When the hardware is done with the read operation, it issues an interrupt. This causes the Interrupt Service
Routine associated with the interrupt to execute at Device IRQL (note that the thread handling the request
is arbitrary, since the interrupt arrives asynchronously). A typical ISR accesses the device’s hardware to
get the result of the operation. Its final act should be to complete the initial request.
Chapter 6: Kernel Mechanisms
136
Figure 6-5: Typical I/O request processing (part 1)
As we’ve seen in chapter 4, completing a request is done by calling IoCompleteRequest. The problem
is that the documentation states this function can only be called at IRQL  !idt
Dumping IDT: fffff8011d941000
00: fffff8011dd6c100 nt!KiDivideErrorFaultShadow
01: fffff8011dd6c180 nt!KiDebugTrapOrFaultShadow
Stack = 0xFFFFF8011D9459D0
02: fffff8011dd6c200 nt!KiNmiInterruptShadow
Stack = 0xFFFFF8011D9457D0
03: fffff8011dd6c280 nt!KiBreakpointTrapShadow
04: fffff8011dd6c300 nt!KiOverflowTrapShadow
05: fffff8011dd6c380 nt!KiBoundFaultShadow
06: fffff8011dd6c400 nt!KiInvalidOpcodeFaultShadow
07: fffff8011dd6c480 nt!KiNpxNotAvailableFaultShadow
08: fffff8011dd6c500 nt!KiDoubleFaultAbortShadow
Stack = 0xFFFFF8011D9453D0
09: fffff8011dd6c580 nt!KiNpxSegmentOverrunAbortShadow
0a: fffff8011dd6c600 nt!KiInvalidTssFaultShadow
0b: fffff8011dd6c680 nt!KiSegmentNotPresentFaultShadow
0c: fffff8011dd6c700 nt!KiStackFaultShadow
0d: fffff8011dd6c780 nt!KiGeneralProtectionFaultShadow
0e: fffff8011dd6c800 nt!KiPageFaultShadow
10: fffff8011dd6c880 nt!KiFloatingErrorFaultShadow
11: fffff8011dd6c900 nt!KiAlignmentFaultShadow
(truncated)
Note the function names - most are very descriptive. These entries are connected to Intel/AMD (in this
example) faults. Some common examples of exceptions include:
• Division by zero (0)
• Breakpoint (3) - the kernel handles this transparently, passing control to an attached debugger (if
any).
• Invalid opcode (6) - this fault is raised by the CPU if it encounters an unknown instruction.
• Page fault (14) - this fault is raised by the CPU if the page table entry used for translating virtual to
physical addresses has the Valid bit set to zero, indicating (as far as the CPU is concerned) that the
page is not resident in physical memory.
Chapter 6: Kernel Mechanisms
142
Some other exceptions are raised by the kernel as a result of a previous CPU fault. For example, if a page
fault is raised, the Memory Manager’s page fault handler will try to locate the page that is not resident in
RAM. If the page happens not to exist at all, the Memory Manager will raise an Access Violation exception.
Once an exception is raised, the kernel searches the function where the exception occurred for a handler
(except for some exceptions which it handles transparently, such as Breakpoint (3)). If not found, it will
search up the call stack, until such handler is found. If the call stack is exhausted, the system will crash.
How can a driver handle these types of exceptions? Microsoft added four keywords to the C language to
allow developers to handle such exceptions, as well as have code execute no matter what. Table 6-1 shows
the added keywords with a brief description.
Table 6-1: Keywords for working with SEH
Keyword
Description
__try
Starts a block of code where exceptions may occur.
__except
Indicates if an exception is handled, and provides the handling code if it is.
__finally
Unrelated to exceptions directly. Provides code that is guaranteed to execute no matter what -
whether the __try block is exited normally, with a return statement, or because of an
exception.
__leave
Provides an optimized mechanism to jump to the __finally block from somewhere within a
__try block.
The valid combination of keywords is __try/__except and __try/__finally. However, these can be
combined by using nesting to any level.
These same keywords work in user mode as well, in much the same way.
Using __try/__except
In chapter 4, we implemented a driver that accesses a user-mode buffer to get data needed for the driver’s
operation. We used a direct pointer to the user’s buffer. However, this is not guaranteed to be safe. For
example, the user-mode code (say from another thread) could free the buffer, just before the driver accesses
it. In such a case, the driver would cause a system crash, essentially because of a user’s error (or malicious
intent). Since user data should never be trusted, such access should be wrapped in a __try/__except
block to make sure a bad buffer does not crash the driver.