title:Pancake: Frequency Smoothing for Encrypted Data Stores
author:Paul Grubbs and
Anurag Khandelwal and
Marie-Sarah Lacharit&apos;e and
Lloyd Brown and
Lucy Li and
Rachit Agarwal and
Thomas Ristenpart
Pancake: Frequency Smoothing for 
Encrypted Data Stores
Paul Grubbs, Cornell Tech; Anurag Khandelwal, Yale University; Marie-Sarah 
Lacharité, Royal Holloway, University of London; Lloyd Brown, University of 
California, Berkeley; Lucy Li, Cornell Tech; Rachit Agarwal, Cornell University; 
Thomas Ristenpart, Cornell Tech
https://www.usenix.org/conference/usenixsecurity20/presentation/grubbs
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.PANCAKE: Frequency Smoothing for Encrypted Data Stores
Paul Grubbs∗
Cornell Tech
Anurag Khandelwal∗
Yale University
Lucy Li
Cornell Tech
Marie-Sarah Lacharité∗ †
Royal Holloway, University of London
Thomas Ristenpart
Rachit Agarwal
Cornell University
Cornell Tech
Lloyd Brown
UC Berkeley
Abstract
We present PANCAKE, the ﬁrst system to protect key-value
stores from access pattern leakage attacks with small constant
factor bandwidth overhead. PANCAKE uses a new approach,
that we call frequency smoothing, to transform plaintext ac-
cesses into uniformly distributed encrypted accesses to an
encrypted data store. We show that frequency smoothing
prevents access pattern leakage attacks by passive persis-
tent adversaries in a new formal security model. We inte-
grate PANCAKE into three key-value stores used in produc-
tion clusters, and demonstrate its practicality: on standard
benchmarks, PANCAKE achieves 229× better throughput than
non-recursive Path ORAM — within 3–6× of insecure base-
lines for these key-value stores.
1 Introduction
High-performance data stores, such as key-value stores [1,
19, 32], document stores [43], and graph stores [33, 47], are a
building block for many applications. For ease of management
and scalability, many organizations have recently transitioned
from on-premise to cloud-hosted data stores (e.g., [19]), and
from server-attached to disaggregated storage [21, 28, 35, 65].
While beneﬁcial, these deployment settings lead to signiﬁcant
security concerns: data accesses that used to be contained
within a trusted domain (an organization’s premises or within
a server) are now visible to potentially untrusted entities.
A now-long line of work has shown that, even if the data is
encrypted, the observed data access patterns can be exploited
to learn damaging information about the data, through access
pattern attacks such as frequency analysis (e.g., [12,26,29,31,
37]). These attacks require only a passive persistent adversary,
that is, one that observes access patterns but does not actively
performs accesses. Existing techniques that are secure against
access pattern attacks, such as oblivious RAMs [23], target
stronger security models where the adversary can actively
perform data accesses; as we discuss in detail in §2, these
techniques have fundamental performance overheads [10, 39,
40, 49, 50, 66] making them impractical for most settings.
Thus, the problem of building high-performance data stores
that are secure against access pattern attacks by persistent
passive adversaries remains open.
We make three core contributions towards resolving this
open problem. First, we introduce a formal security model that
captures (just) passive persistent adversaries in encrypted data
∗The ﬁrst three authors contributed equally to the work.
†Portions of this work were done while visiting Cornell University.
store settings. Speciﬁcally, we model honest users’ queries
to the data store as a sequence of data access requests sam-
pled from a time-varying distribution. The encryption mecha-
nism can obtain an estimate of the distribution; the adversary
both knows the distribution and obtains the transcript of (en-
crypted) queries and responses. Informally, we say that a
mechanism is secure if the adversary is unable to distinguish
the transcript from a sequence of uniformly distributed ac-
cesses to random bit strings. We capture this security goal in
what we call real-or-random indistinguishability under chosen
dynamic-distribution attack (ROR-CDDA).
Our second contribution is frequency smoothing, a mech-
anism that is ROR-CDDA secure, that is, provides security
against access pattern attacks by passive persistent adversaries.
The key insight underlying frequency smoothing is that, for
passive persistent adversaries, data access requests being cho-
sen from a distribution provides a source of “uncertainty”
that can be leveraged in a principled manner. For instance,
if requests were sampled from a uniform distribution, it is
easy to see that the adversary gains no additional informa-
tion from observing accesses patterns. However, most real
world distributions are not uniform. Frequency smoothing
uses the estimate of the data access distribution to transform
a sequence of requests into uniform accesses over encrypted
objects (hereafter, key-value pairs) in the data store.
Frequency smoothing carefully combines four techniques:
selective replication, fake accesses, batching of queries, and
dynamic adaptation. Selective replication creates “replicas”
of key-value pairs that have high access probability relative
to others in the data store. This serves to partially smooth the
distribution over (replicated) key-value pairs. For the remain-
ing non-uniformity, we combine selective replication with the
idea of “fake” queries [42]. These are sampled from a care-
fully crafted fake access distribution to boost the likelihood
of accessing replicated key-value pairs until the resulting dis-
tribution is entirely uniform. Security requires ensuring that
fake and real queries be indistinguishable; to achieve this, we
issue small batches of encrypted queries, where each query
is either real or fake with equal probability. Finally, we show
how one can dynamically adapt to changes in the underly-
ing data access distribution by opportunistically adapting the
replica creation as well as the fake access distribution.
Our third contribution is the design, implementation, and
evaluation of an end-to-end system — PANCAKE— that re-
alizes frequency smoothing, and can be used with existing
data stores. PANCAKE builds upon the encryption proxy sys-
tem model used in many deployment settings, where a proxy
USENIX Association
29th USENIX Security Symposium    2451
acts as an intermediary between clients and the data store.
PANCAKE uses this proxy to maintain an estimate of the time-
varying access distribution (based on incoming requests from
the clients), as well as securely execute read/write queries
by using pseudorandom functions for keys and authenticated
encryption for values. Assuming the distribution estimates
are sufﬁciently good (we make this precise in §4), PANCAKE
achieves ROR-CDDA security.
We analyze PANCAKE’s performance both analytically and
empirically. Speciﬁcally, we show that PANCAKE’s server-
side storage and bandwidth overheads are within a constant
factor of insecure data stores; while the proxy storage can
be large in the worst-case (depending on the underlying data
access distributions), our empirical evaluation demonstrates
minimal overheads for heavy-tailed, real-world distributions.
We integrate PANCAKE with two key-value stores used in
production clusters — a main-memory based key-value store
Redis [54] and an SSD-based key-value store RocksDB [55].
Evaluation over a variety of workloads demonstrates that PAN-
CAKE consistently achieves throughput within 3− 6× of the
respective key-value store that does not protect against access
pattern leakage attacks. Sensitivity analysis against various
workloads, deployment scenarios (within a cloud and across
wide-area networks), query loads, and more, demonstrates
that PANCAKE maintains its performance across a diversity
of evaluated contexts. We also compare PANCAKE perfor-
mance against Path ORAM [63], a representative system from
the ORAM literature. Across various workloads, PANCAKE
achieves signiﬁcantly better throughput (sometimes by as
much as 229×) than PathORAM. Of course, ORAMs are
designed to prevent a broader range of attacks (e.g., active
injection attacks); our comparison should be interpreted as
highlighting the huge efﬁciency gap between countermea-
sures in the two threat models. An end-to-end implementation
of PANCAKE along with all the details to reproduce our results
is available at https://github.com/pancake-security.
PANCAKE is a ﬁrst step toward designing high-performance
data stores that are secure against access pattern attacks by
passive persistent adversaries. We outline limitations, open
research questions, and future research avenues in §7.
2 The PANCAKE Security Model
We introduce a new security model for capturing passive per-
sistent attacks against encrypted data stores. We also discuss
prior approaches for resisting access pattern attacks.
System model. We focus on key-value (KV) stores that
support (single-key) get, put, and delete operations on KV
pairs (k,v) submitted by one or more clients. Our results
can, however, be applied to any data store that supports
read/write/delete operations.
We consider outsourced storage settings where one or more
clients want to utilize a KV store securely. PANCAKE em-
ploys a proxy architecture commonly used by encrypted data
stores in practice [15, 45, 51, 60] and in the academic liter-
ature [53, 57, 62]. This deployment setting assumes multi-
ple client applications route query requests through a single
trusted proxy. The proxy manages the execution of these
queries on behalf of the clients, sending queries to some stor-
age service. Our security model and results apply equally well
to a setting with a single client and no proxy.
We assume all communication channels are encrypted, e.g.,
using TLS. This does not prevent the storage service from
seeing requests. The proxy therefore encrypts each KV pair
(k,v) by applying a pseudorandom function (PRF) to the
key, denoted F(k), and symmetrically encrypting the value,
denoted E(v). We assume that the values are all the same
size, perhaps via padding —i.e., there is no length leakage.
The secret keys needed for F and E are stored at the proxy.
Because F is deterministic, the proxy can perform operations
for key k by instead requesting F(k). This standard approach
is used in a variety of commercial products [5, 15, 45, 51, 60].
Security model. Our security model captures passive persis-
tent adversaries in such encrypted data store settings. The
adversary observes all (encrypted) accesses but does not ac-
tively perform its own (e.g., via a compromised client).
We model honest client requests as queries sampled from
a distribution π over keys: for each key k, the probability of
a query (get, put, or delete) on that key is denoted π(k). The
distribution may change over time. While we primarily focus
on the case where queries are independent draws from π,
we discuss correlated queries and how this relates to ORAM
security in the full version [25].
In our model, the adversary does not have access to cryp-
tographic keys, but can observe all encrypted queries to, and
corresponding responses from, the storage server. The adver-
sary does not change the client queries, the responses, or the
stored data. The adversary knows π, but the random draws
from π that constitute individual accesses are (initially) hid-
den. The adversary wins if it can infer any information about
the resulting sequence of accessed plaintext KV pairs; we for-
malize this further in §4.3. We do not target hiding the time
at which a query is made; fully obfuscating timing requires
a constant stream of accesses to the data store, which is pro-
hibitively expensive in many contexts. (Our approaches can
nevertheless be extended to hide timing in this way.) See §7
for more discussion on the limitations of our security model.
Access pattern attacks. Without further mechanisms, the ba-
sic PRF and encryption approach leaks the pattern of accesses
to the adversary. In various contexts an attacker can com-
bine this leakage with knowledge about π [8, 12, 29, 46] to
mount damaging attacks like frequency analysis: order the
KV pairs by decreasing likelihood of being accessed k1,k2, . . .,
and guess that the most frequently accessed encrypted value
is k1, the second most frequently accessed is k2, etc. In gen-
eral, in our security model the adversary can use knowledge
of the distribution π to:
2452    29th USENIX Security Symposium
USENIX Association
• infer key identities,
• identify when speciﬁc keys are accessed, and,
• detect and identify changes in key popularities over time.
Our goal is to protect against such access pattern attacks.
Prior approaches. Access pattern and related attacks have
been treated in the literature before; we brieﬂy overview three
lines of work related to our results.
Oblivious RAMs (ORAMs): Existing ORAM designs pro-
vide security against access pattern attacks even in settings
where the adversary can actively inject its own queries. The
core challenge with ORAM based approaches is their over-
heads — several recent results [10, 39, 40, 49, 50, 66] have
established strong lower bounds on ORAM overheads: for a
data store with n key-value pairs, any ORAM design must
either: (1) use constant proxy storage but incur Ω(logn) band-
width overheads; or, (2) must use Θ(n) storage at the proxy
and incur constant bandwidth overheads. Unfortunately, both
of these design points are inefﬁcient for data stores that store
billions of key-value pairs [4, 11, 20, 24, 64]. At such a scale,
Ω(logn) bandwidth overheads result in orders-of-magnitude
throughput reduction [14]. On the other hand, state-of-the-art
ORAM designs that achieve constant bandwidth overheads
in theory [3] have large constants hidden within the asymp-
totic result (as much as 2100 [3]), resulting in high concrete
overheads. For many applications, ORAM overheads may be
unacceptable.
Snapshot attacks: Another recent line of work has targeted
what’s called a snapshot threat model, where the adversary
does not persistently observe queries and only obtains a one-
time copy (snapshot) of the encrypted data store [38, 48, 52].
One of these [38] propose frequency-smoothed encryption, a
technique similar to our selective replication mechanism. Un-
fortunately, the snapshot threat model is currently unrealistic
for existing storage systems [27]. More generally schemes
designed for it do not resist access pattern attacks by passive
persistent adversaries.
Fake queries: Mavroforakis et al. [42] explore the idea
of injecting fake queries to obfuscate access patterns in the
context of range queries and (modular) order-preserving en-
cryption. In a security model where boundaries between the
queries are not known to the adversary, this can provide secu-
rity albeit with high bandwidth overheads. However, if query
boundaries are known to the adversary (as in our model and
in practice), the adversary can trivially distinguish between
real and fake queries because the last query sent is always
the real one. That said, our work uses the idea of fake queries
from [42], adapting it to our KV store setting (see §4.2) and
combining it with further techniques to ensure security.
3
PANCAKE Overview
We now provide a brief overview of PANCAKE’s core tech-