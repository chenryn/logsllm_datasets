# Pancake: Frequency Smoothing for Encrypted Data Stores

**Authors:**
- Paul Grubbs, Cornell Tech
- Anurag Khandelwal, Yale University
- Marie-Sarah Lacharité, Royal Holloway, University of London
- Lloyd Brown, University of California, Berkeley
- Lucy Li, Cornell Tech
- Rachit Agarwal, Cornell University
- Thomas Ristenpart, Cornell Tech

**Link:**
[https://www.usenix.org/conference/usenixsecurity20/presentation/grubbs](https://www.usenix.org/conference/usenixsecurity20/presentation/grubbs)

This paper is included in the Proceedings of the 29th USENIX Security Symposium, August 12–14, 2020. Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.

## Abstract
We present PANCAKE, the first system to protect key-value stores from access pattern leakage attacks with a small, constant factor bandwidth overhead. PANCAKE uses a new approach called frequency smoothing to transform plaintext accesses into uniformly distributed encrypted accesses in an encrypted data store. We demonstrate that frequency smoothing prevents access pattern leakage attacks by passive, persistent adversaries in a new formal security model. We integrate PANCAKE into three key-value stores used in production clusters and show its practicality: on standard benchmarks, PANCAKE achieves 229 times better throughput than non-recursive Path ORAM, within 3–6 times the throughput of insecure baselines for these key-value stores.

## 1. Introduction
High-performance data stores, such as key-value stores, document stores, and graph stores, are fundamental components of many applications. For ease of management and scalability, many organizations have transitioned from on-premise to cloud-hosted data stores and from server-attached to disaggregated storage. While beneficial, these deployment settings raise significant security concerns: data accesses that were previously contained within a trusted domain (an organization's premises or within a server) are now visible to potentially untrusted entities.

A long line of research has shown that even if the data is encrypted, the observed data access patterns can be exploited to learn sensitive information through access pattern attacks, such as frequency analysis. These attacks require only a passive, persistent adversary, one that observes access patterns but does not actively perform data accesses. Existing techniques that are secure against access pattern attacks, such as oblivious RAMs (ORAMs), target stronger security models where the adversary can actively perform data accesses. However, these techniques have fundamental performance overheads, making them impractical for most settings. Thus, the problem of building high-performance data stores that are secure against access pattern attacks by passive, persistent adversaries remains open.

We make three core contributions towards resolving this open problem:

1. **Formal Security Model**: We introduce a formal security model that captures passive, persistent adversaries in encrypted data store settings. Specifically, we model honest users' queries to the data store as a sequence of data access requests sampled from a time-varying distribution. The encryption mechanism can estimate the distribution; the adversary knows the distribution and obtains the transcript of (encrypted) queries and responses. Informally, we say a mechanism is secure if the adversary cannot distinguish the transcript from a sequence of uniformly distributed accesses to random bit strings. We capture this security goal in what we call real-or-random indistinguishability under chosen dynamic-distribution attack (ROR-CDDA).

2. **Frequency Smoothing Mechanism**: Our second contribution is frequency smoothing, a mechanism that is ROR-CDDA secure. The key insight underlying frequency smoothing is that, for passive, persistent adversaries, data access requests being chosen from a distribution provides a source of "uncertainty" that can be leveraged in a principled manner. If requests were sampled from a uniform distribution, the adversary would gain no additional information from observing access patterns. However, most real-world distributions are not uniform. Frequency smoothing uses the estimated data access distribution to transform a sequence of requests into uniform accesses over encrypted objects (key-value pairs) in the data store. Frequency smoothing combines four techniques: selective replication, fake accesses, batching of queries, and dynamic adaptation. Selective replication creates "replicas" of key-value pairs with high access probability, partially smoothing the distribution. For remaining non-uniformity, we combine selective replication with "fake" queries, which are sampled from a carefully crafted fake access distribution to boost the likelihood of accessing replicated key-value pairs until the resulting distribution is entirely uniform. To ensure that fake and real queries are indistinguishable, we issue small batches of encrypted queries, where each query is either real or fake with equal probability. Finally, we show how to dynamically adapt to changes in the underlying data access distribution by opportunistically adapting replica creation and the fake access distribution.

3. **System Design and Evaluation**: Our third contribution is the design, implementation, and evaluation of an end-to-end system—PANCAKE—that realizes frequency smoothing and can be used with existing data stores. PANCAKE builds upon the encryption proxy system model used in many deployment settings, where a proxy acts as an intermediary between clients and the data store. The proxy maintains an estimate of the time-varying access distribution (based on incoming requests from clients) and securely executes read/write queries using pseudorandom functions for keys and authenticated encryption for values. Assuming the distribution estimates are sufficiently good, PANCAKE achieves ROR-CDDA security. We analyze PANCAKE’s performance both analytically and empirically, showing that its server-side storage and bandwidth overheads are within a constant factor of insecure data stores. While the proxy storage can be large in the worst case, our empirical evaluation demonstrates minimal overheads for heavy-tailed, real-world distributions. We integrate PANCAKE with two key-value stores used in production clusters—Redis and RocksDB. Evaluation over various workloads shows that PANCAKE consistently achieves throughput within 3–6 times that of the respective key-value store without protection against access pattern leakage attacks. Sensitivity analysis across different workloads, deployment scenarios, and query loads demonstrates that PANCAKE maintains its performance across diverse contexts. We also compare PANCAKE’s performance against Path ORAM, a representative system from the ORAM literature. Across various workloads, PANCAKE achieves significantly better throughput (sometimes up to 229 times) than Path ORAM. An end-to-end implementation of PANCAKE, along with all details to reproduce our results, is available at [https://github.com/pancake-security](https://github.com/pancake-security).

PANCAKE is a first step toward designing high-performance data stores that are secure against access pattern attacks by passive, persistent adversaries. We outline limitations, open research questions, and future research avenues in Section 7.

## 2. The PANCAKE Security Model
We introduce a new security model for capturing passive, persistent attacks against encrypted data stores. We also discuss prior approaches for resisting access pattern attacks.

### System Model
We focus on key-value (KV) stores that support get, put, and delete operations on KV pairs (k, v) submitted by one or more clients. Our results can be applied to any data store that supports read/write/delete operations. We consider outsourced storage settings where one or more clients want to utilize a KV store securely. PANCAKE employs a proxy architecture commonly used by encrypted data stores in practice and in the academic literature. This deployment setting assumes multiple client applications route query requests through a single trusted proxy. The proxy manages the execution of these queries on behalf of the clients, sending queries to some storage service. Our security model and results apply equally well to a setting with a single client and no proxy.

We assume all communication channels are encrypted, e.g., using TLS. This does not prevent the storage service from seeing requests. The proxy encrypts each KV pair (k, v) by applying a pseudorandom function (PRF) to the key, denoted F(k), and symmetrically encrypting the value, denoted E(v). We assume that the values are all the same size, perhaps via padding—i.e., there is no length leakage. The secret keys needed for F and E are stored at the proxy. Because F is deterministic, the proxy can perform operations for key k by instead requesting F(k). This standard approach is used in a variety of commercial products.

### Security Model
Our security model captures passive, persistent adversaries in such encrypted data store settings. The adversary observes all (encrypted) accesses but does not actively perform its own (e.g., via a compromised client). We model honest client requests as queries sampled from a distribution π over keys: for each key k, the probability of a query (get, put, or delete) on that key is denoted π(k). The distribution may change over time. While we primarily focus on the case where queries are independent draws from π, we discuss correlated queries and how this relates to ORAM security in the full version [25].

In our model, the adversary does not have access to cryptographic keys but can observe all encrypted queries to, and corresponding responses from, the storage server. The adversary does not change the client queries, the responses, or the stored data. The adversary knows π, but the random draws from π that constitute individual accesses are (initially) hidden. The adversary wins if it can infer any information about the resulting sequence of accessed plaintext KV pairs; we formalize this further in Section 4.3. We do not target hiding the time at which a query is made; fully obfuscating timing requires a constant stream of accesses to the data store, which is prohibitively expensive in many contexts. (Our approaches can nevertheless be extended to hide timing in this way.) See Section 7 for more discussion on the limitations of our security model.

### Access Pattern Attacks
Without further mechanisms, the basic PRF and encryption approach leaks the pattern of accesses to the adversary. In various contexts, an attacker can combine this leakage with knowledge about π to mount damaging attacks like frequency analysis: order the KV pairs by decreasing likelihood of being accessed k1, k2, ..., and guess that the most frequently accessed encrypted value is k1, the second most frequently accessed is k2, etc. In general, in our security model, the adversary can use knowledge of the distribution π to:
- Infer key identities,
- Identify when specific keys are accessed, and
- Detect and identify changes in key popularities over time.

Our goal is to protect against such access pattern attacks.

### Prior Approaches
Access pattern and related attacks have been treated in the literature before; we briefly overview three lines of work related to our results.

#### Oblivious RAMs (ORAMs)
Existing ORAM designs provide security against access pattern attacks even in settings where the adversary can actively inject its own queries. The core challenge with ORAM-based approaches is their overheads—several recent results have established strong lower bounds on ORAM overheads: for a data store with n key-value pairs, any ORAM design must either:
1. Use constant proxy storage but incur Ω(log n) bandwidth overheads, or
2. Use Θ(n) storage at the proxy and incur constant bandwidth overheads.

Unfortunately, both of these design points are inefficient for data stores that store billions of key-value pairs. At such a scale, Ω(log n) bandwidth overheads result in orders-of-magnitude throughput reduction. On the other hand, state-of-the-art ORAM designs that achieve constant bandwidth overheads in theory have large constants hidden within the asymptotic result (as much as 2^100), resulting in high concrete overheads. For many applications, ORAM overheads may be unacceptable.

#### Snapshot Attacks
Another recent line of work has targeted what’s called a snapshot threat model, where the adversary does not persistently observe queries and only obtains a one-time copy (snapshot) of the encrypted data store. One of these [38] proposes frequency-smoothed encryption, a technique similar to our selective replication mechanism. Unfortunately, the snapshot threat model is currently unrealistic for existing storage systems. More generally, schemes designed for it do not resist access pattern attacks by passive, persistent adversaries.

#### Fake Queries
Mavroforakis et al. [42] explore the idea of injecting fake queries to obfuscate access patterns in the context of range queries and (modular) order-preserving encryption. In a security model where boundaries between the queries are not known to the adversary, this can provide security, albeit with high bandwidth overheads. However, if query boundaries are known to the adversary (as in our model and in practice), the adversary can trivially distinguish between real and fake queries because the last query sent is always the real one. That said, our work uses the idea of fake queries from [42], adapting it to our KV store setting (see Section 4.2) and combining it with further techniques to ensure security.

## 3. PANCAKE Overview
We now provide a brief overview of PANCAKE’s core techniques.