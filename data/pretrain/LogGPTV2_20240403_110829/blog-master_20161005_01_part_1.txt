## PostgreSQL 9.6 sharding + 单元化 (based on postgres_fdw) 最佳实践 - 通用水平分库场景设计与实践
##### [TAG 24](../class/24.md)
### 作者           
digoal            
### 日期          
2016-10-05           
### 标签          
PostgreSQL , 9.6 , 水平分库 , sharding , 单元化      
----          
## 背景    
[20161004_01.md](20161004_01.md)这篇文档讲解了PostgreSQL postgres_fdw的用法以及9.6的增强。  
本文将以实践为主，定一个小目标，讲解一下如何使用postgres_fdw实现sharding。  
单元化则可以结合bdr插件来实现。  
## 一、通用场景设计    
我以一个最简单易懂的场景来举例，例如所有的业务表都包含了用户ID这个字段，并且业务访问数据时，一定会带上用户ID进行访问。  
同时用户没有跨用户ID的访问需求。  
以上设计是大多数公司使用数据库sharding的最佳实践设计。   
### 目标场景
以典型的关系系统为例，构建一个测试场景，每个表都带有用户ID，以用户ID哈希取模为分片规则。  
1\. 用户信息表  
```
create table userinfo(uid int8 primary key, info text, crt_time timestamp);
```
2\. 日志表  
```
create table user_log(uid int8, logintime timestamp, logouttime timestamp, client_addr inet, client_port int);
```
3\. 用户正向关系表（user like who）  
```
create table user_membership(uid1 int8, uid2 int8, unique (uid1,uid2) );
```
聚合物化视图  
```
create materialized view mv_user_membership as select uid1,array_agg(uid2) uid2s from user_membership group by uid1;
create unique index idx_mv_user_membership_1 on mv_user_membership (uid1);
refresh materialized view CONCURRENTLY mv_user_membership with data;
```
4\. 用户反向关系表（who like user）  
```
create table user_membership_rev(uid2 int8, uid1 int8, unique (uid2,uid1) );
```
聚合物化视图  
```
create materialized view mv_user_membership_rev as select uid2,array_agg(uid1) uid1s from user_membership_rev group by uid2;
create unique index idx_mv_user_membership_rev_1 on mv_user_membership_rev (uid2);
refresh materialized view CONCURRENTLY mv_user_membership_rev with data;
```
ddl-1.sql如下    
```
create table userinfo(uid int8 primary key, info text, crt_time timestamp);
create table user_log(uid int8, logintime timestamp, logouttime timestamp, client_addr inet, client_port int);
create table user_membership(uid1 int8, uid2 int8, unique (uid1,uid2) );
create materialized view mv_user_membership as select uid1,array_agg(uid2) uid2s from user_membership group by uid1;
create unique index idx_mv_user_membership_1 on mv_user_membership (uid1);
refresh materialized view CONCURRENTLY mv_user_membership with data;
create table user_membership_rev(uid2 int8, uid1 int8, unique (uid2,uid1) );
create materialized view mv_user_membership_rev as select uid2,array_agg(uid1) uid1s from user_membership_rev group by uid2;
create unique index idx_mv_user_membership_rev_1 on mv_user_membership_rev (uid2);
refresh materialized view CONCURRENTLY mv_user_membership_rev with data;
```
业务需求  
```
userinfo 增删改查
新增用户、销毁用户、修改用户资料、查询用户资料
user_log 增查
新增用户登陆日志、查询用户日志
user_membership 增删查
新增用户关系，删除用户关系，查询用户关系
user_membership_rev 增删查
新增反向用户关系，删除反向用户关系，查询反向用户关系
mv_user_membership 刷新、查询
mv_user_membership_rev 刷新、查询
聚合物化视图主要是提高关系查询效率用的，刷新物化视图，查询物化视图
```
### 构建测试环境
初设256个分片，4个datanode，每个datanode存放64个分片。    
测试时使用本地环境模拟，真实环境修改为对应的IP地址和端口即可。  
segment 1 :  127.0.0.1:5281:db0:role0:pwd , schema_name role0  
segment 2 :  127.0.0.1:5281:db1:role1:pwd , schema_name role1  
segment 3 :  127.0.0.1:5281:db2:role2:pwd , schema_name role2  
segment 4 :  127.0.0.1:5281:db3:role3:pwd , schema_name role3  
master 1 :  127.0.0.1:5281:mas1:digoal:pwd , schema_name digoal  
master 2 :  127.0.0.1:5281:mas2:digoal:pwd , schema_name digoal  
修改pg_hba.conf，确保127.0.0.1使用md5认证    
0\. 初始化测试环境  
```
create role role0 nosuperuser login encrypted password 'pwd';
create role role1 nosuperuser login encrypted password 'pwd';
create role role2 nosuperuser login encrypted password 'pwd';
create role role3 nosuperuser login encrypted password 'pwd';
create role digoal nosuperuser login encrypted password 'pwd';
create database db0 with template template0 encoding 'UTF8';
create database db1 with template template0 encoding 'UTF8';
create database db2 with template template0 encoding 'UTF8';
create database db3 with template template0 encoding 'UTF8';
create database mas1 with template template0 encoding 'UTF8';
create database mas2 with template template0 encoding 'UTF8';
grant all on database db0 to role0;
grant all on database db1 to role1;
grant all on database db2 to role2;
grant all on database db3 to role3;
grant all on database mas1 to digoal;
grant all on database mas2 to digoal;
\c db0 role0
create schema role0;
\c db1 role1
create schema role1;
\c db2 role2
create schema role2;
\c db3 role3
create schema role3;
\c mas1 digoal
create schema digoal;
\c mas2 digoal
create schema digoal;
\c mas1 postgres
create extension postgres_fdw;
grant usage on foreign data wrapper postgres_fdw to digoal;
\c mas2 postgres
create extension postgres_fdw;
grant usage on foreign data wrapper postgres_fdw to digoal;
```
1\. 初始化segments (datanodes)   
初始化segment1  
```
\c db0 role0
执行 ddl-1.sql  
然后执行 :   
do language plpgsql $$
declare
  i int;
  mod int := 64;
  nod int := 0;
  sql text;
begin
  for i in (mod*nod)..(mod*(nod+1)-1) loop
      sql := 'create table userinfo_'||i||'(like userinfo including all, check(mod(abs(uid), 256) = '||i||' ))';
      execute sql;
      sql := 'create table user_log_'||i||'(like user_log including all, check(mod(abs(uid), 256) = '||i||' ))';
      execute sql;
      sql := 'create table user_membership_'||i||'(like user_membership including all, check(mod(abs(uid1), 256) = '||i||' ))';
      execute sql;
      sql := 'create table user_membership_rev_'||i||'(like user_membership_rev including all, check(mod(abs(uid2), 256) = '||i||' ))';
      execute sql;
      sql := 'create materialized view mv_user_membership_'||i||' as select uid1,array_agg(uid2) uid2s from user_membership_'||i||' group by uid1';
      execute sql;
      sql := 'create unique index idx_mv_user_membership_'||i||'_1 on mv_user_membership_'||i||' (uid1)';
      execute sql;
      sql := 'create materialized view mv_user_membership_rev_'||i||' as select uid2,array_agg(uid1) uid1s from user_membership_rev_'||i||' group by uid2';
      execute sql;
      sql := 'create unique index idx_mv_user_membership_rev_'||i||'_1 on mv_user_membership_rev_'||i||' (uid2)';
      execute sql;
  end loop;
end;
$$;
create or replace function refresh_mv(nsp name, mvname name) returns void as $$
declare
begin
  execute 'refresh materialized view CONCURRENTLY '||quote_ident($1)||'.'||quote_ident($2)||' with data';
end;
$$ language plpgsql strict;
create view v_refresh_mv0 as 
select refresh_mv('role0'::name, mvname::name)::text from 
( 
select id, 'mv_user_membership_'||id mvname from generate_series(0,255) t(id) 
union all 
select id, 'mv_user_membership_rev_'||id mvname from generate_series(0,255) t(id) 
) t 
where mod(abs(id), 256) >= 0 and mod(abs(id), 256) = 64 and mod(abs(id), 256) = 128 and mod(abs(id), 256) <= 191;
```
初始化segment4  
```
\c db3 role3
执行 ddl-1.sql  
修改为
  nod int := 3;
修改为
create view v_refresh_mv3 as 
select refresh_mv('role3'::name, mvname::name)::text from 
( 