Hello,

I recently installed Visual Studio Community 2013 and TypeScript 1.4. After converting all my enums to `const enum` (which, by the way, is a very useful featureâ€”thank you!), I noticed that the "compile-on-save" feature does not handle this change effectively.

Specifically, when I use `const enum` in a file other than the one where it was defined, the compile-on-save process fails to resolve the enum values to their corresponding constant numbers. Here's an example to illustrate the issue:

### `firstFile.ts`
```typescript
const enum TestEnum {
    Foo, Bar
}

var testFirstFile = TestEnum.Bar;
```

When I save `firstFile.ts` (by pressing `Ctrl+S`), the generated `firstFile.js` looks like this:
```javascript
var testFirstFile = 1 /* Bar */;
//# sourceMappingURL=firstFile.js.map
```

This is as expected; the `const enum` is correctly inlined.

### `secondFile.ts`
```typescript
/// 
var testInOtherFile = TestEnum.Bar;
```

However, when I save `secondFile.ts`, the generated `secondFile.js` is:
```javascript
/// 
var testInOtherFile = TestEnum.Bar;
//# sourceMappingURL=secondFile.js.map
```

The `const enum` is not inlined in this case. The correct behavior only occurs when I build the entire project in Visual Studio, which then generates the following `secondFile.js`:
```javascript
/// 
var testInOtherFile = 1 /* Bar */;
//# sourceMappingURL=secondFile.js.map
```

Could you please provide some guidance on how to resolve this issue with the compile-on-save feature?

Thank you,
[Your Name]