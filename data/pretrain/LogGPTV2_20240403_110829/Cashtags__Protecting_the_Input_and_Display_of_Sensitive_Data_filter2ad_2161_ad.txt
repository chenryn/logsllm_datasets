layout view hierarchies and screenshots.  The contents 
of  the  actual  and  cashtag  fields  are  compared  for 
conversion  correctness.  The  device  screenshot 
is 
processed using Tessseract OCR [21] to confirm if the 
actual PII term has been properly masked on the screen.
For  each  combination,  we  also  demonstrate  that  both 
text input as a sensitive term and cashtag are correctly 
converted  to  the  sensitive  term  when  accessed  by  the 
app.  Since the access of sensitive data within the app 
normally involves remote actions, we also emulated this 
scenario  and  performed  remote  verification.  Once 
screen  processing  is  completed,  the  app  accesses  the 
text  fields  and  uploads them to  Google  Sheets/Form. 
The  uploaded  sensitive  items  and  cashtag  submissions 
are compared for accuracy based on expected values.
Our results show that Cashtags behaves correctly for all 
test cases. For each test case, Cashtags identified input 
containing sensitive data in both the actual and cashtag 
form,  prevented  the  display  on  the  screen  of  the 
sensitive  term,  and  determined  correctly  when  to 
convert back to the sensitive data.
USENIX Association  
24th USENIX Security Symposium  969
Input phrase type (4):
Alphabetic  phrase,  numeric  phrase,  alphanumeric 
phrase, Alphanumeric with symbols.
Phrase case (2):
Case Sensitive Text, Case In-sensitive Text
Widget type (9): 
TextView (android.widget.TextView),
CheckedTextView
(android.widget.CheckedTextView), 
Button (android.widget.Button), 
CheckBox (android.widget.CheckBox),
RadioButton
(android.widget.RadioButton), 
Switch (android.widget.Switch), 
EditText (android.widget.EditText),
AutoCompleteTextView (android.
widget.AutoCompleteTextView), 
MultiAutoCompleteTextView (android.
widget.MultiAutoCompleteTextView)
Layout type (2):
LinearLayout
(android.widget.LinearLayout), 
RelativeLayout
(android.widget. RelativeLayout)
Theme type (3):
Default theme, System theme, User-defined theme.
Generation method (2):
Static XML, Dynamic Java
Lifecycle type (2):
Activity-based lifecycle, Fragment-based lifecycle
Table 5.1: Android API test combinations.
devices
hardware 
[70],  making 
5.2 App coverage evaluation
The Google Play market has more than one million of 
thousands  of 
published  applications  accessible  by 
different 
the 
enumeration  of  all  possible  users,  devices,  and 
application  scenarios  infeasible.    Thus,  we  chose  a 
representative  subset  of  popular  apps  to  demonstrate 
coverage of Cashtags.  Categorically, these application 
types  are  email,  messaging,  social media,  cloud  and 
local storage, office, and finance.  Table 5.2 shows the 
selected  apps,  arranged  according  to  these  categories. 
These apps were selected using download metrics from 
the  Google  Play  marketplace,  excluding  games  and 
utility apps for lack of relevance in terms of displaying 
sensitive  data  on  screen.  The  presence  of  a  form  of 
external  verification  was  also  used  in  the  application 
selection.  Apps  typically  bundled  with  mobile  devices 
were also tested for correct operation.
Email: AOSP Email, Gmail, K9 Mail:
User reads an email containing a sensitive term in its
cashtag form.  A  Cashtags-enabled  system  should 
display the email with two instances of the cashtag.
User composes an email with a sensitive term and its 
cashtag.  Remote  system  not  running  Cashtags 
should  display  email  with  two  sensitive  term 
instances.
Messaging: Messaging, Hangouts, Snapchat:
User reads a message containing a sensitive term and 
cashtag.  A Cashtags-enabled system should display 
the message containing two instances of the cashtag.
User composes a message with a sensitive term and its
cashtag.  A  remote  system  not  running  Cashtags 
should receive the message with two sensitive term 
instances.
Social: Facebook, Twitter, Google+:
User  reads  text  with a sensitive  term  and  its  cashtag 
from  a
tweet/post/update.  A  Cashtags-enabled 
system  should  display  the  tweet/post/update  with 
two instances of the cashtag.
User  composes  a  new  tweet/post/update  with  a
sensitive term and its cashtag.  A remote system not 
running  Cashtags 
tweet/
the 
post/update with two sensitive term instances.
receive 
should 
Storage: Dropbox, MS OneDrive, File Manager:
User opens an existing file containing a sensitive term 
and its cashtag.  A Cashtags-enabled system should 
display  the  file  containing  two  instances  of  the 
cashtag.
User  creates  a  file  with a sensitive  term  and  its 
cashtag.  A  remote  system  not  running  Cashtags 
should  display file  with 
term 
instances.
two  sensitive 
Office: GoogleDocs, MS Office, QuickOffice:
User reads a document containing a sensitive term and 
its  cashtag.    A  Cashtags-enabled  system  should 
display the file with two instances of the cashtag.
User  creates  a  document containing  a  sensitive  term 
and  its  cashtag.    Remote  system  not  running 
Cashtags should see two sensitive term instances.
Finance: Google Wallet, Paypal, Square:
User reads a document containing a sensitive term and 
its cashtag.  Cashtag-enabled system should display 
the document with two instances of cashtag.
User  creates  a  document  containing  a  sensitive  term 
and  its  cashtag.    A  remote  system  not  running 
Cashtag should see two sensitive term instances.
Table 5.2: Per-category app test tasks.
The  operation  performed  on  each  is  based  on  a 
commonly performed use case or task for each category. 
Table  5.2  shows  the  operation  performed  for  each 
category and respective app. 
970  24th USENIX Security Symposium 
USENIX Association
Our  results show  that  Cashtags  behaves  correctly for 
97%  of  task  and  app  combinations,  except  the  MS 
Office  Mobile  tests.    The  reason  is  because  of the 
custom  View  (docRECanvasHost) used  for  the 
primary user interaction, which is not a descendant of an 
EditText.  Thus, our system does not intercept it. All 
of  the  other  apps  tested  have  user  input  through  an 
EditText,  or  a  custom  class  inheriting  from  an 
EditText. This  exception,  as  well  as  other  custom 
views could be made to work with Cashtags using case-
specific handling for  internal  functions  and  parameters 
that map to the equivalent EditText functions.
5.3 Overhead 
Regarding overhead,  we  measured  the  incremental  lag 
Cashtags  added  to the  system.  We  ran a  modified 
version of the Android API coverage test (Section 5.1)
with  and  without  Cashtags  enabled.  The  screenshots, 
layout  hierarchy  dumping,  and  all  other  non-essential 
automation  elements  were  removed  prior  to  the  test 
execution.  The  test  execution  durations  are  compared, 
and  the  additional  lag  introduced  by  the  system  was
Hardware User Input
Software User Input
System Input
0
5
10
15
Execution time (s)
Cashtags Enabled
Cashtags Disabled
(a)
Hardware User Input
Software User Input
System Input
0
5
10
15
Execution time (s)
Cashtags Enabled
Cashtags Disabled
(b)
Fig.  5.1.  Comparison of mean app task execution time 
with  and  without  Cashtags  enabled,  using  system, 
software  and  hardware  text  input  (a)  with  and  (b) 
without web request for tests. Hardware refers to input 
from  physically  or  wirelessly  connected  hardware 
keyboard  and  software  refers  to  input  via  on-screen 
software keyboard.
User Input
System Input
0
5
10
15
Execution time (s)
100 terms
50 terms
10 terms
(a)
User Input
System Input
0
5
10
15
Execution time (s)
100 terms
50 terms
10 terms
(b)
Fig.  5.2. Comparison of mean app task execution time 
with  an  increasing  number  of  cashtag  entries,  using 
system  and  user  inputs (a)  with  and  (b)  without  web 
request for tests.
calculated.    This  test  was  run  with  and  without  the 
remote  data  verification  to  determine  the  effects  of 
network lags on our system overhead. 
Fig. 5.1(a) shows the Cashtags system incurs an average 
1.9%  increase  in  application  runtime. 
  For  tests 
including  remote  verification,  Cashtags  incurred  an 
average  of  1.1%  increase  over  the  baseline  tests.    For 
tests excluding the time consuming remote verification, 
Fig. 5.1(b) shows that Cashtags incurred an average of 
2.6% over baseline. Therefore, the additional overhead 
of Cashtags would not be perceivable to the user. 
Testing was repeated using 50 and 100 items, which is
significantly more than the list of terms specified by PII.  
Fig. 5.2 show that the performance degrades linearly as 
the number of cashtags entries increases.  However, we 
can  easily  replace  the  data  structure  to  make  the 
increase sublinear.
Cashtags 
for  boot-time 
overhead. Changes to the Cashtags repository currently 
require a reboot to take full effect. While this operation 
is not in the critical path, the overhead is relevant.  The 
results of the boot lag are shown in Fig. 5.3.
is  additionally  evaluated 
USENIX Association  
24th USENIX Security Symposium  971
100 terms
50 terms
10 terms
Disabled
0
20
40
Duration (s)
60
Fig.    5.3. Comparison  of  device  startup  times  with  
varying  number  of  cashtag  entries  and  with  system 
disabled.
5.4 Usability overhead 
To demonstrate the usability of Cashtags, we calculated 
the configuration and usage overhead seen by a typical 
user working  on  typical  data.  We  used  common 
sensitive data  elements  with  known  character  lengths
(such as credit card numbers) as well as those for which 
published  data  on  average  term  length  was  available
(such as common names) [63, 64]. 
For  other  elements  without  known  average  length 
availability, we substituted a typical minimum accepted 
value.  Table  5.3 shows  the  comparison  of  these  fields 
against the suggested cashtag alias length. 
In  nearly  every  case,  the  cashtag  alias  is  significantly 
shorter  than  the  average  length  of  the  sensitive  data 
element.  On  a keystroke  count  basis,  the  amortized 
effort of the initial configuration can be overcome with 
only  two  or  three  uses  of  the  Cashtag  alias. Longer 
names and emails  require  additional  keystrokes  for 
initial configuration but yield greater keystroke savings 
for  each  time  the  data  element  is  entered.  In  addition, 
the aliases in the table are based on the suggested terms 
for  ease  of  user  recall;  even  shorter  terms  could  be
substituted to reduce additional data entry overhead.
5.5 Quantification of the time savings for an end user 
The real efficiency savings for Cashtags is the ability to 
represent  hard-to-recall  terms  (e.g.,  account  numbers) 
with easy-to-recall aliases. The user simply assigns the 
sensitive data a memorable alias and can refer to them.
This  also  adds  convenience  when  sensitive data 
changes.  For  example,  consider  the  case  of  a stolen 
credit  card.  Once  the  replacement  is  issued,  the  user 
need  only to update  the  underlying  data  element, 
continuing to use the alias without the need to memorize 
a  new  number.  In  some  cases  of  personal  information 
change,  the  defunct  data  could  still  be  considered 
sensitive and be prevented from being displayed on the 
screen. In such cases, the defunct data element could be 
Type
First Name
Last Name
Email
Username
Password
Phone number
Birthday
SSN
Credit Card
Acct. number
Actual 
6
6
20
9
9
10
10
9
16
12
Alias
$fname
$lname
$email
$user
$pass
$cell
$bday
$ssn
$visa
$acct
Alias  Diff
0
0
14
4
4
5
5
5
11
7