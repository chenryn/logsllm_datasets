### Memory Dumping Process

1. **Page Directory Entry (PDE) Modification:**
   - Modify the PDE at virtual address `0x00000008` to map a 2MB physical page that needs to be dumped. Since this PDE is the second one in the Page Directory under our control, the physical page will be mapped at virtual address `0x00200000` (lines 6-8).

2. **Memory Chunk Reading and Transmission:**
   - Read a chunk of memory from the virtual page starting at `0x00200000`, create a packet with a checksum, and send it over the network (lines 12-15).
   - Alternatively, to avoid code duplication, store memory chunks at an address readable from SMM (e.g., any area tagged as Available in Figure 5) and trigger a System Management Interrupt (SMI). The code executed in SMM will handle signing and sending operations, similar to the first 4GB.

3. **Loop Through Memory:**
   - Loop through the inner loop (lines 11-17) until a full 2MB page has been dumped.
   - Repeat the procedure (lines 4-18) until the entire memory above 4GB has been dumped.

### Ensuring Execution Flow and Privileges

Before returning to protected mode, ensure:
- **Execution Flow Control:** Clear the Interrupt Flag (IF) in the EFLAGS register stored in the Save System Map to prevent interrupts from causing execution flow transfer to system interrupt handlers. Non-Maskable Interrupts (NMIs) can still occur even if IF is 0, so disable them by interacting directly with the Advanced Programmable Interrupt Controller (APIC). Disabling NMIs is not a problem since the code in protected mode does not rely on them.
- **Privilege Level Management:** From SMM, we cannot modify the Current Privilege Level (CPL) upon resume. However, the only operations requiring custom privileges are I/O operations (for interacting with the NIC or triggering an SMI). These privileges can be granted by altering the Input Output Privilege Level (IOPL) bits in the EFLAGS register, similar to how we handle IF.

### Portability

The approach adopted by SMMDumper is OS-independent and can be easily applied as a patch to existing BIOS or installed in new ones. The main hardware requirements are:
1. A port (USB, serial) for interaction with smartcard hardware.
2. A network interface card (NIC) to send packets.

Developing drivers for various NICs can be challenging due to their unique specifications and peculiarities. However, most BIOS already include primitives to interact with on-board NICs (e.g., PXE functionality for network interaction). BIOS manufacturers can easily modify SMMDumper to include additional drivers for well-known on-board NICs.

### Experimental Evaluation

To verify the proposed approach, we implemented a prototype based on coreboot, making it easy to install on many production systems as a BIOS update. The collector module of SMMDumper is entirely coded in Assembly and consists of approximately 500 lines of code, with about 47% dedicated to MD5 implementation. We used QEMU 1.0.1, equipped with a single Intel 3GHz processor, 6GB of RAM, and a Realtek RTL8139 100Mbps network card.

#### NIC Interaction

We implemented a small driver to run in SMM for sending and receiving UDP packets. The driver writes the physical address and size of the packet to the appropriate control registers of the device and polls the status register until transmission is complete. We use polling instead of interrupts because interrupts are disabled in SMM. Packet reception, needed for the retransmission protocol, is implemented similarly.

#### Memory Allocation and Backup

We allocate the packet transmission buffer in a region of memory outside the SMM RAM (SMRAM) because devices cannot access SMRAM due to hardware restrictions. Before using this region, we back up its contents into SMRAM and restore it later to send the data.

#### Checksum and Signature

We use MD5 for both packet and overall memory integrity. This allows us to incrementally calculate the overall checksum as we read memory to create packets. For unique signing, SMMDumper uses an external hardware device that reads a private key from a smart card and encrypts data. For experiments, we created a simulated smart card reader that can be hotplugged via a Serial Port (RS232). According to our threat model, the communication channel is established after SMMDumper starts, preventing interference.

#### Performance Evaluation

We performed transmission tests to evaluate SMMDumper's performance and the average time to transfer 6GB of volatile data over the local network. With a chunk size of 1024B, each UDP packet carries a total payload of 1024B (chunk) + 16B (MD5) + 8B (physical address). Using this reference payload, we measured the time to transfer 6GB of memory to be approximately 820 seconds, with 10% overhead due to MD5 checksum calculation. The overall metadata overhead is 144MB.

Choosing a larger chunk size would introduce implementation complexities with minimal performance gain. By maximizing the chunk size to the Maximum Transmission Unit (MTU), we would incur cross-page readings, which can be tricky, especially with Physical Address Extension (PAE). Assuming a chunk size of (MTU - TCP header - 16 - 8) = 1436B, the time to dump 6GB and the metadata overhead would be approximately 814 seconds and 103MB, respectively. This corresponds to a 29% reduction in metadata overhead but only a 0.66% improvement in overall traffic. Therefore, our current implementation uses a 1024B chunk size, trading a negligible performance boost for a more linear algorithm.

### Atomicity and Reliability

To verify atomicity, we took a snapshot of the system memory before executing our SMM ISR handler and compared it with the dump produced by SMMDumper. Results showed that our technique gathers an accurate and consistent memory dump. Changes in memory-mapped I/O regions reserved for devices do not affect the consistency of the dump. Additionally, we verified reliability by performing a man-in-the-middle attack, which detected modifications using the overall encrypted checksum.

### Future Work

The current implementation does not address Multi-Processor (MP) systems, but SMMDumper can be extended to handle them. In MP systems, SMI is propagated to all processors, and the SMM ISR handler waits for all processors to enter SMM. Only one processor executes the memory dump while others wait for completion.

Our threat model does not include malicious hardware-assisted hypervisors. For dumping more than 4GB of RAM, our solution is resilient to such attacks. However, the fallback solution to dump higher memory must exit SMM with an `rsm` instruction, which could be intercepted by a hypervisor, disabling the acquisition of memory above 4GB.

We are also working on a solution to dump more than 64GB of RAM (on CPUs supporting IA-32e mode). Preliminary results show that it is possible, and we believe our future solution will be resilient to malicious hardware-based hypervisor attacks.

### Conclusion

SMMDumper is an SMM-based volatile memory acquisition technique that overcomes many limitations of current solutions. It performs live memory acquisition atomically and ensures on-system and in-transit integrity. While the firmware-based implementation may be vulnerable to sophisticated kernel-level malware, introducing a simple and inexpensive hardware modification, such as an interrupt line directly connected to the processor SMI pin, would make SMMDumper completely secure and resilient to any form of attacks. Our experimental evaluation shows that SMMDumper is effective and efficient, suitable for real-world deployment in digital forensic analyses and incident responses.

### References

[References listed here as provided in the original text]