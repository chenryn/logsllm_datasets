protocols, the conditions that must be satisﬁed to purge a link have
been ordered from the most reactive to the most conservative as
follows: olsrd and babeld require (i) the expiration of the Twindow
or (ii) achieving the MQT. Conversely, batmand only requires the
expiration of Twindow before removing the link. Surprisingly, the
notion of MQT is never taken into consideration in batmand. Unlike
babeld and olsrd, the link quality is only updated in batmand when
getting new information thought incoming routing packets, and as it
cannot be 0, batmand must consider the MQT is not necessary. Let
us now focus on T. If we additionally normalise T in the different
conﬁgurations shown in Table II with respect to 1 sec. to compare
their relative Twindow, we observe that olsrd only can send 6 packets
to update the validity time of the link, whereas babeld admits up to
15 packets, and batmand has 200 new opportunities.
E. Comparing the Protocols Using the Same Conﬁguration
Essentially, as one can deduce, the success of batmand in our
results is likely not so due its conservative policy, but due to the
parameters conﬁguration used, which provides batmand a major
CRITICAL PARAMETERS FOR THE ROUTE AVAILABILITY IN WMNS
Table II
Protocol implementation Twindow (s) T (s) MQT (%)
olsrd v.0.6.0
batmand v.0.3.2
babeld v.1.1.1
0.1
none
0
30
200
60
5
1
4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:20:46 UTC from IEEE Xplore.  Restrictions apply. 
Figure 3. Experimental results obtained
frequency to send packets and consequently more opportunities to
update the quality of their links than the rest of routing protocols
considered. To make the comparison between the routing protocols
considered fairer, let us apply the parameters conﬁguration used in
batmand to the rest of protocols. Additional experimentation was
required to carry out this goal. The results ﬁnally obtained are shown
in Figure 3e and Figure 3f respectively for the ﬁrst and the second
type of experiments already deﬁned in Section III-B.
If focusing on Figure 3e, it is worth mentioning how olsrd
(above all) and babeld improve the robustness of the route. With
the batmand-like conﬁguration, the route degradation in olsrd starts
around 80% of ambient noise rate, enhancing 50 percentage points
(pp) with respect to its default conﬁguration. In the case of babeld,
the improvement is around 20 pp. batmand keeps on being the best
protocol in this scenario, but the differences with the other protocols
have been strongly slowed down.
If considering now a node crashing in route S-D, an interesting
result can be observed from Figure 3f. In this case, the result is
striking not so much because olsrd and babeld increase their route
availability (as expected if reducing the period T between packets
sent), but because they behave better than batmand. Evidently, some-
thing else apart from the parameterisation must be inﬂuencing these
results. The conservative policy of batmand (already commented
in Section III-D) seems to be its drawback when facing dynamic
changes of routes caused by node crashes. As the network topology
in Figure 2 states, when x3 crashes, the route S-D through xi nodes
is no longer available. However, node S has no indication that the
route through nodes yi is better than the offered through xi until
the next routing packets from D to S arrive through yi and enhance
the route quality of xi. Obviously, the time for the convergence is
intimately related to the ambient noise in the network. The harder
the ambient noise conditions, the longer the time convergence.
Conversely to batmand, olsrd and babeld implement instruments
like the MQT which promote the protocol reaction to minimise the
convergence time, which, as shown in Figure 3f, have been proven of
usefulness. In this sense, the protocol in node S is able to react earlier
not only because of receiving packets from yi, but because packets
from xi announce a broken link with x3 once the MQT exceeded.
F. Analysing the Overhead Introduced
As seen the selection of a suitable parameterisation can improve
the robustness of routing protocols against ambient noise. However,
it is necessary to analyse the cost to pay in terms of the overhead
introduced in the network before taking any decision.
Figure 4a and Figure 4b, study the average routing overhead intro-
duced by each node when applying the default and the batmand-like
parameterisation respectively.
If analysing Figure 4a, batmand is the protocol with the highest
overhead in terms of both packets sent and received when applying
the default conﬁguration (50% more than olsrd and babeld in the
case of routing packets sent, and 127% and 78% in the case of olsrd
and babeld respectively for the routing packets received. However,
the trend changes when applying the batmand-like parameterisation.
In this case, olsrd obtains the highest overhead in terms of packets
sent (400% more than batmand and 58% more with respect to
babeld) while olsrd and babeld increase the received overhead
161%. Since the considered routing protocols send packets with the
same period T, these differences can be explained due to the average
size of the routing packets sent by each routing protocol (380B in
olsrd, 220B in babeld and 78B in batmand). In this case, the higher
size of olsrd packets penalises its overhead. However, it is worth
noting the lack of mechanisms to prevent the ﬂooding of routing
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:20:46 UTC from IEEE Xplore.  Restrictions apply. 
	
	
	
	
	
 !∀#∀∃%&
∋(∋∀∀( !∀#∀∃%&
∋(∋∀∀(	
	
	
	
 !∀#∀∃%&
∋(∋∀∀( !∀#∀∃%&
∋(∋∀∀(	
	
%∗∗

+∀ !∀#∀∃%&
∋(∋∀∀(	
	
 !∀#∀∃%&
∋(∋∀∀(%∗∗

+∀
∃∗+∗
(∗∀(
(∗∀(	
Analysis of one route without node crashesAnalysis of one route when an intermediate node crashesAmbient noise rate (%)Ambient noise rate (%)Ambient noise rate (%)Ambient noise rate (%)Ambient noise rate (%)Ambient  noise rate (%)Figure 4. Network overhead induced by routing packets sent and received
packets in babeld and batmand. This means that the cost of such
protocol in terms of packets sent is quadratic and depends on the
number of nodes O(n2). This fact could beneﬁt olsrd if performing
more experiments in a network including a wider amount of nodes,
given the optimisation mechanism based on multi-point relay which
provides olsrd a cost O(n).
As graphics show, regardless the conﬁguration used, the routing
information rate sent is always constant because routing protocols
periodically send the same (or quasi the same) amount of infor-
mation. This overhead is characterised for being ambient-noise
independent. Conversely, the routing information received highly
depends on the presence of ambient noise and its reception is directly
proportional to the amount of packet loss induced by the ambient
noise. This fact makes that the ratio between the routing packets sent
and received is quite disproportional as the ambient noise increases.
Indeed, there are situations where the routing protocol could afford
sending less routing packets to keep on maintaining the routes alive
in presence of few ambient noise. However, in situations with a
severe presence of ambient noise, the amount of routing packets
received, decreases to the extent of provoking the mentioned prob-
lems of network partitioning and long convergence times. One could
think on parameterising the routing protocol according to the level
of ambient noise in the network, however the off-line conﬁguration
of these protocols stops being valid when the conditions of the
environment, and specially of the ambient noise, vary over time.
Given these situations, the provision of adaptive strategies to balance
the routing overhead could result very useful to introduce, neither
more nor less, but the necessary routing overhead in the network to
keep the links alive.
IV. LINK-QUALITY BASED ADAPTIVE REPLICATION OF
PACKETS
This section faces the problem of ambient noise in proactive
routing protocols proposing a generic adaptive strategy which en-
ables the routing protocol to replicate the routing packets only when
required. So, this approach can be of usefulness in environments
affected by ambient noise when links run the risk of disappearing or
it is necessary to speed up the convergence time.
This technique is based on the principles of T, Twindow and MQT
previously identiﬁed in Section III-D. Nevertheless, far from tuning
their value, the algorithm proposed in this section is applied from
the default conﬁguration of the routing protocol. Regarding their
regular behaviour, routing protocols send packets every T seconds
and passively wait the time deﬁned by Twindow to remove a link in
case it is necessary. Our technique consists not in waiting passively
the expiration of Twindow, but in analysing the trend for such link
quality, and predicting its value in Twindow in order to react (in
time) against a possible link removal.
A. Analytical Overview of the Technique
In essence, the point of our proposal can be easily understood
through the graphic in Figure 5. If applying basic algebraic notions,
given two points A (x2, y2) and B (x1, y1) in cartesian axis, it is
possible to determine the equation of the linear function as Formula
2 shows.
y − y1 = m(x − x1)
| m =
y2 − y1
x2 − x1
(2)
If replacing points A and B by (ti, lqi) and (ti−1, lqi−1) where ti
represents the current time (T) and lqi is its respective link quality
and ti−1, lqi−1 represent the last information but in last T, we would
obtain Formula 3.
lq(ti+T window) = m(T window) + lqi
| m =
lqi − lqi−1
ti − ti−1
(3)
According to Formula 3, it is possible to predict the link quality
lqi+T window for a given time ti+T window according to the trend
pointed by lqi and lqi−1. In case this estimation is underneath the
MQT, the link-quality-based packet replication is triggered.
Figure 5. Link-quality-based adaptive packet replication technique
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:20:46 UTC from IEEE Xplore.  Restrictions apply. 
	
(∋
∀ ∃)∋(∋
∀ ∃)∋ !∀#∀∃%&
∋(∋∀∀(∗∗∗	
			
		
(∋
∀ ∃)∋(∋
∀ ∃)∋ !∀#∀∃%&
∋(∋∀∀(Ambient noise rate (%)Ambient noise rate (%)Default configurationbatmand-like configuration(a)(b)Link qualitytiti-1ti+TwindowTMinimumQualityThreshold(MQT)TimeTwindowcase 1: lq(ti+Twindow)>MQT (do nothing)case 4: lq(ti+Twindow)≤MQT activateadaptivereplicationcase 2: lq(ti+Twindow)>MQT (do nothing)case 3: lq(ti+Twindow)>MQT (do nothing)B. Implementation of the Algorithm
Our technique is included within the routing manager module of
the routing protocol (see Figure 1). Table III shows the pseudo-code
that has been implemented in C language for each routing protocol
considered in this paper. The real conditions of the network in prac-
tice impose limiting the amount of replicas to Nmax. If considering
a very severe ambient noise, the fact of sending more and more
replicas will only contribute to increase, even more the effect of
ambient noise. The value of Nmax has been empirically computed
for our deployment in order not to exceed the overhead obtained
when applying the batmand-like conﬁguration beyond 150%.
As previously stated, batmand presented certain limitation like