presented schemes. The SetupAuthority(1k) algorithm
outputs a private/public key pair (KAs, KAp). KAp deﬁnes
a group G, an element g and three integers A, B and S. In
G, the DLSE(S) problem and the DDH problem have to be
hard in basis g. The order G is possibly unknown.
201The SetupCLDSecretKAp (SN) algorithm randomly chooses
The SetupVerifierKAp algorithm randomly chooses v ≤
2k − 1 and outputs (v, gv). This pair of keys is not used in
the original GPS scheme but rather in our modiﬁcations.
s ≤ S−1 and outputs (s, gs) for the CLD associated to (SN).
The SetupCLDStateKVp (SN,s, I) algorithm outputs the
At the end, a list L of the form {..., (I, SN ), ...} is given
to the veriﬁer. More details about the parameters size are
given in Section 5.6.
initial state of CLD linked to SN: (KAp, gv, s).
P
secret key
s ∈ [0, S − 1]
public key
I = gs
pick r1 , r2
∈ [0, A − 1]
y = r1 + r2 + sc
parameters :
g, gv , A, B, S
V
secret key
v
public key
gv
A1=gr1 ,A2=(gv )r2
−−−−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−−−−− pick c ∈ [0, B − 1]
−−−−−−−−−−−−−−−−−−→ Compute
y
c
−v
1 A
−1
2 )1/cv
I = (gvy A
Check whether I ∈ L
and whether 0 ≤ y,
y ≤ 2A − 2 + (B − 1)(S − 1)
In all the following schemes, a prover possessing a CLD of
state (KAp, gv, s) wants to prove his knowledge of s while
his identity I = gs is in the list L.
As described in the SetupCLDState algorithm, we con-
sider that each CLD possesses gv. In practical applications,
this value could also be sent at the beginning of the iden-
tiﬁcation process.
In this case, in order to guarantee its
legitimacy, it should be sent signed by the authority.
5.3 The Original GPS Scheme
In a ﬁrst step, the prover randomly chooses r1 in [0, A − 1].
Then he computes x = gr1 and he sends this value to the
veriﬁer. The veriﬁer sends a challenge c randomly chosen
in [0, B − 1]. The prover responds with y = r1 + sc. This
computation is made without any modular reduction, this
is one of the main diﬀerences with the Schnorr scheme. The
veriﬁer checks whether there exists I ∈ L such that gyx−1 =
I c and whether 0 ≤ y ≤ A− 1 + (B − 1)(S − 1). If these two
conditions are veriﬁed, the prover is identiﬁed.
P
secret key
s ∈ [0, S − 1]
public key
I = gs
pick r1 ∈ [0, A − 1]
y = r1 + sc
parameters :
g, A, B, S
V
x=gr1
c
y
−−−−−−−−−−→
←−−−−−−−−−− pick c ∈ [0, B − 1]
−−−−−−−−−−→ Compute
I = (gy x−1)1/c
Check whether I ∈ L
and whether
0 ≤ y ≤ A − 1 + (B − 1)(S − 1)
Figure 6: GPS
See [25] for an implementation of GPS scheme in CLDs.
Its security is based on the hardness of the DLSE problem.
This scheme is statistically ZK. Nevertheless, we have ex-
plained in Section 2 how private information leak on the
identity of the prover involved in such schemes.
5.4 Randomized GPS
The Randomized GPS scheme is described in Figure 7.
This scheme is an eﬃcient implementation of the modi-
ﬁcation 2 (cf Section 4.2.2). The modiﬁcation 2 used with
the El Gamal encryption scheme would have led to a ﬁrst
message equals to gr2 , gvr2 .gr1 . To compute these values,
3 exponentiations are necessary. Equivalently, the message
gvr2 , gr2 .gr1 could have been used. A tricky change of vari-
1 = r1 + r2 and r(cid:48)
able leads to r(cid:48)
2 = r2. In this case, the ﬁrst
1 , A2 = (gv)r(cid:48)
message is A1 = gr(cid:48)
2 .
We have the following security results:
Theorem 4. Assume the hardness of the DLSE(S) prob-
A is
lem, the hardness of the DDH problem and assume BS
Figure 7: Randomized GPS
negligible then Randomized GPS is a statistical ZK protocol
and is narrow-strong private.
The diﬀerence with the original GPS scheme is that the
computation of Av
2 ensures that only the veriﬁer can make
the veriﬁcation. The scheme stays ZK because r1 + r2 hides
the secret the same way as in the original GPS scheme. This
scheme is also as secure as the original GPS scheme, but
cannot be proved resistant against impersonation attacks
because an adversary can modify on the ﬂy a protocol tran-
script. This is due to homomorphic properties of El Gamal
and GPS. Given a device and a veriﬁer, the adversary can
modify online the output of the device using the Randomized
2 in [0, A − 1],
GPS scheme: he chooses randomly r(cid:48)
1 and A(cid:48)
he then modiﬁes A(cid:48)
2 and out-
puts A(cid:48)
2, y + r1 + r2. This ‘attack’ is not a threat on
the scheme. Nevertheless, the Vaudenay’s lemma (Lemma
1) cannot be applied to scheme with such properties, that’s
why we do not consider a model where this kind of scheme
is secure.
1 and r(cid:48)
2 = A2.(gv)r(cid:48)
1 = A1.gr(cid:48)
1, A(cid:48)
Remark 6. In [2] is described a low-cost CLD which im-
plements the Schnorr scheme. The same device architecture
can be used to implement the Randomized GPS scheme, with
our additional privacy properties with only a total amount
of computations doubled.
5.5 Randomized Hashed GPS
After the modiﬁcation 2, we apply the modiﬁcation 3 to
the GPS scheme to enhance privacy and security. The diﬀer-
ence between the two schemes is the application of the hash
function to the ﬁrst message. The details of this scheme is
given in Figure 8.
P
secret key
s ∈ [0, S − 1]
public key
I = gs
pick r1 , r2
in [0, A − 1]
y = r1 + r2 + sc
parameters :
g, gv , A, B, S
z=H(cid:0)gr1 ,(gv )r2(cid:1)
V
secret key
v
public key
gv
−−−−−−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−−−−−− pick c ∈ [0, B − 1]
A1=gr1 ,A2=(gv )r2 ,y
−−−−−−−−−−−−−−−−−−−→ Compute
c
−v
1 A
−1
2 )1/cv
I = (gvy A
Check whether I ∈ L
and z = H(A1, A2)
and whether 0 ≤ y,
y ≤ 2A − 2 + (B − 1)(S − 1)
Figure 8: Randomized Hashed GPS
202An important element is that all the computations can
be made oﬄine and do not reveal information on the secret
of the prover. As already claimed, this scheme is perfectly
scalable as a veriﬁer has only to compute a constant number
of operations to identify a device.
We have the following security results:
Theorem 5. Assume the hardness of the SEDDH prob-
lem, assume H is preimage and collision resistant, assume
BS
A is negligible then Randomized Hashed GPS is PI for-
ward private, public-identity secure against impersonation
attacks, narrow-strong private and statistically ZK.
As the scheme is now public-identity forward private, it
could be used in common applications where identities are
public. Moreover if they are sent by the provers on a covert
channel (think at the Machine Readable Zone on identity
documents [23, 24]) which cannot be eavesdropped, then
the veriﬁcation is simpliﬁed.
Indeed, in that case, no list
L has to be stored on the veriﬁer side since it suﬃces to
check that the identity that the veriﬁer computes from the
protocol transcript is the same as the identity read on the
document.
5.6 Implementation Issues
5.6.1 Parameters Description
We describe two typical sets of parameters.
First set.
G is a subgroup of Zp where p is a prime integer of 1536
bits. There must exist a prime integer q of at least 160-bit
long that divides p − 1. Let g be an element of order q
and G is the group generated by g. In this implementation,
S is 2160. Computing a discrete logarithm in basis g of
exponent smaller than S is assumed to require more than
280 multiplications over G. The probability of success for
. Finally, A must be greater than
a replay attack is
B × S × 280 to ensure the zero-knowledgeness. For instance,
B = 2160 gives A = 2400.
1√
B
Second set.
G is the group of points of an elliptic curve E over Fp
where p is a 160-bit long prime. This group has a prime
order q. The values of A = 2400, B = 2160 and S = 2160 can
still be used.
5.6.2 Precomputations for the Randomized Hashed
GPS Scheme
It is possible to precompute multiple coupons of the form
r1 + r2, H(A1, A2), A1, A2. These coupons are suﬃcient
to execute the whole randomized GPS scheme. As in [9],
the random values r1 and r2 do not need to be stored. In
fact, one can compute them thanks to a Pseudo Random
Function (PRF) and a seed. The coupons are precomputed
such that the update of the seed enables to compute r1 and
r2 of the next coupons. For instance, for each use of the
CLD, the PRF outputs r1 and r2. The CLD then computes
r1 + r2, retrieves the ﬁrst available coupon and uses these
values to execute the protocol. The seed is ﬁnally updated.
Depending on the underlying group structure, storing many
A1 and A2 is possible. For instance, with elliptic curves
over a group of order of 160 bits, a group element can be
represented with 161 bits. Therefore, a coupon with a hash
output of 50-bit long requires 372 bits of memory. It is no-
ticeable that in this case no elliptic curve computation is
needed on the CLD, but only two additions and one multi-
plication over the integer and one update of the seed. If the
underlying group is Fp with p a 1536-bit long prime num-
ber, it does not seem realistic to store many A1 and A2. In
this case, the CLD needs to be able to compute A1 and A2.
Nevertheless, in this case with A = 2400, the computations
needed are only an exponentiation of 800 bits.
5.6.3 Comparisons
Table 1 gives the cost of the presented schemes with or
without precomputations. It also sums up their privacy and
the computational assumptions required. A and p are pa-
rameters deﬁned in Section 5.6.1. l stands for the length of
the output of the hash function. The fourth column rep-
resents the number of bits of exponentiation needed by the
prover.
Scheme
Prob
Privacy
GPS
Randomized
GPS
Randomized
Hashed GPS
DLSE(S)
SEDDH
not private
narrow-strong
Bits of
Exp
log2(A)
2 log2(A)
Size of
coupons
log2(p)
2 log2(p)
SEDDH