lR0
h1
0,2
H
h1
0,3
H
h1
H
0x0
O1
h1
1,0
H
lR1
h1
1,1
H
h2
H
0x0
O2
h1
2,0
H
lR2
h1
2,1
H
c0,0
C
c0,1
C
c0,2
C
c0,3
C
c0,4
C
c0,5
C
c0,6
C
c0,7
C
c1,0
C
c1,1
C
c1,2
C
c1,3
C
c2,0
C
c2,1
C
c2,2
C
c2,3
C
Ordered TLS Conversation Records
Record 0
Record 0
S2
1,0
S2
1,2
S2
S2
1,1
1,3
Record 1
Record 1
S2
2,0
S2
2,2
S2
S2
2,1
2,3
Record 2
Record 2
(a) Evidence Generation with chunk-level granularity. The left side shows the salt tree for record 0. Commitments are generated for each
chunk using a salt tree leaf (i.e. a salt). To reduce the proof size, a Merkle tree is computed over the commitments. The other salt trees are
omitted due to space constraints.
Hash Chain
0x1
0x0
O0
TLS Tra(cid:28)c Secret
Nonce
E
Salt Secret0
H
h0
H
c0,0
C
lR0
hc0
0x1
0x0
O1
Salt Secret1
H
h1
H
c1,0
C
hc1
0x1
0x0
O2
lR1
Salt Secret2
hcn−1
lR2
H
h2
H
c2,0
C
Record 0
Record 1
Record 2
Ordered TLS Conversation Records
Based on TLS Handshake
Start Timestamp
TLS Cipher Suite
Salt Size
Chunk Size
Stop Timestamp
hcn−1
Based on Evidence Generation
Generator’s
Private Key
H
Sign
Evidence
(b) Evidence Generation with record-level granularity. No salt tree or merkle tree
computaiton is required. For non-sensitive records, the complete plaintext and
the salt secret is included in the proof.
(c) Final step of the evidence generation. Timestamps
from the TLS handshake and the evidence generation
are included along with the negotiated parameters.
Figure 3: Evidence Generation based on the ordered TLS records using expansion function E(), commitment scheme C() and
hash function H(). Oi gives the originator information and lRi is the record length. The record-based hashes hi are input to a
hash chain, whose result is the (cid:27)nal hash value hcn−1 that will be signed by the generator. Sensitive content is marked red and
is hidden in the proof while all blue elements are included in the proof.
R ∨ ic (cid:44) i(cid:48)
if iR (cid:44) i(cid:48)
c. Additionally, to reduce proof sizes we need
e(cid:28)cient disclosure of salts for non-sensitive chunks. Therefore, we
use a salt tree based on the function E() to derive the salt values.
By using a salt tree, to censor a single chunk, only a logarithmic
number of salts need to be revealed in the proof.
The salt tree is computed as follows (cf. Figure 3a): Initially, for
each record Ri composed of c chunks, a unique the salt secret is
derived from the TLS tra(cid:28)c secret using a record-based nonce. This
ensures the generation of a pseudo-random, independent and salt
secret as explained in Section 4.3. The derived salt secret is further
expanded using E() to generate the salt tree. In the salt tree, each
output of E() is truncated to length 2ls and split into two bitstrings
2
of length ls, e.g., S
0,1 in Figure 3a. Until the salt tree has c
leaves and thus is large enough to supply a unique salt for every
2
0,0 and S
chunk of the record, this process is repeated, i.e. each intermediate
secret Sd
at depth d is used as an input to E() and the output
i, j
is split again to produce the values Sd−1
i,2j+1. The leaves
i,2j
of this tree are then used as salts. E() is a variable-length output
pseudorandom function that takes a pseudorandom key, (possibly
empty) context information and the output length as inputs. E()
leaks no information about its key. In TLS 1.3, HKDF-Expand-Label
is used as E() [23, 38].
and Sd−1
Chunk-level granularity vs. Record-level granularity
In Figures 3a and 3b we show the overall evidence generation based
on the content for chunk-level and record-level granularity. For
5
chunk-level granularity we combine the salt tree with the com-
mitments, the Merkle tree and the hash chain. On the other hand
for record-level commitments, we only generate a single commit-
ment per record and therefore do not need a salt or Merkle tree. In
short, for record-level granularity, each record is handled as a sin-
gle chunk. In both cases we generate the overall hash chain result
hcn−1 that is subsequently signed.
Providing Trustworthy Timing Information
To provide trustworthy timing information and protect against the
Time Shifting attack (cf. Section 6.2.1), our design employs two
generator-produced timestamps: one timestamp taken during the
TLS handshake and one timestamp taken during evidence gener-
ation, i.e. at the beginning and the end of the evidence window.
As both timestamps are included in the evidence, the veri(cid:27)er can
detect proofs resulting from long TLS sessions and Time Shifting
attacks.
As seen in Figure 3c, the evidence consists of the (cid:27)nal hash
hcn−1, the two timestamps, the chunk size lc, the salt size ls and
the TLS cipher suite negotiated for this session. When the evidence
is requested, it is hashed and signed with the generator’s private
key. Our design limits the generator’s computational overhead as
it mostly computes hashes and only provides one signature. The
evidence is sent to the requester together with the ordering vector.
The requester can use the evidence to construct a variety of di(cid:29)erent
proofs as we will show in the following section.
3.3 Proof Generation And Veri(cid:27)cation
A central bene(cid:27)t of performing non-repudation over TLS is that we
can reuse the already deployed public-key infrastructure (PKI). The
signed evidence and its authentication can therefore be veri(cid:27)ed by
third parties. However, third parties only possess the trusted root
certi(cid:27)cates and miss intermediate certi(cid:27)cates required to verify the
certi(cid:27)cate chain. To allow third-party veri(cid:27)cation, the requester
saves the certi(cid:27)cate chain of the TLS connection and includes it in
the proof.
For proof generation, the requester uses the n records, the salt
secrets, the evidence provided by the generator, the ordering vector,
and the certi(cid:27)cate chain. Based on these, the requester can gen-
erate di(cid:29)erent kinds of proofs. Here, we give some representative
examples.
Proving NRO or NRR: As explained in Section 2, NRC implies
non-repudiation of origin (NRO) and non-repudiation of receipt (NRR).
Therefore, we can also prove these for one or multiple messages of
the conversation. A NRO-proof or NRR-proof for a record i, con-
tains the following: plain text of record i, salt secret i, Oi, hci−1,
hi +1, . . . , hn, the evidence and the certi(cid:27)cate chain.
During proof veri(cid:27)cation the veri(cid:27)er uses the plain text of record
i, its salt secret, the cipher suite and Oi to build the Merkle tree
and salt tree, and compute hi as in Figure 3a. Using the hash chain
value hci−1 and the computed hi the veri(cid:27)er can compute hci and
using the hi +1, . . . , hn the veri(cid:27)er can complete the hash chain and
compute hcn−1. Then, the veri(cid:27)er checks the evidence, by verifying
the signature using the certi(cid:27)cate chain and comparing its hcn−1
to the provided hcn−1. Finally, the veri(cid:27)er checks the timestamps
6
based on the application-speci(cid:27)c requirements, e.g., testing whether
they are too far apart or from a wrong date.
Privacy-preserving, browser-based NRC proof: In this scenario,
the browser acts as the requester and a web server as generator.
The browser is con(cid:27)gured to consider all passwords and cookies
sensitive and remove them from the proof, while the web server is
unaware of these privacy settings. To hide only the passwords the
browser requests evidence with chunk-level granularity. The web
server generates the evidence as shown in Figure 3a.
For the proof generation the browser proceeds as follows: For ev-
ery record i without sensitive information, the browser includes its
plaintext, its salt secret and Oi. For every record i with sensitive in-
formation, the browser proceeds as in Figure 3a. All plaintext of all
non-sensitive chunks are included with their salts Si, j. For chunks
with sensitive content the browser includes their commitment. If
subsequent chunks are sensitive or non-sensitive the browser in-
cludes higher level-nodes from the Merkle tree and the salt tree
respectively. Therefore, only O(log(c)) nodes have to be included
and the proof size is reduced. Additionally, the proof contains the
evidence, and the certi(cid:27)cate chain.
During proof veri(cid:27)cation the veri(cid:27)er uses the proof to re-generate
the same evidence as in Figure 3a. For records without sensitive
content it constructs the Merkle Tree and salt tree, for records with
sensitive content it constructs the partial Merkle Tree based on the
provided plaintext, commitments and hashes. Thereby, the veri(cid:27)er
obtains all root hashes hi, constructs the hash chain and hcn−1. As
before the veri(cid:27)er also checks the evidence based on the certi(cid:27)cate
chain and validates the timestamps.
4 SECURITY ANALYSIS
In this section we present the security analysis of TLS-N. We start
by introducing our system and attacker model.
Trust assumptions For the purpose of this paper, we make the
following trust assumptions. First, we assume that the used cryp-
tographic primitives such as digital signatures and cryptographic
hash functions are secure. We need H() to produce a binding and
hiding commitment. Note, that the hiding property of hash func-
tions has neither been proven nor rejected. Second, we assume
the existence of a Public Key Infrastructure (PKI) that correctly
binds entities to the public keys used in TLS, i.e. we inherit the
trust assumptions of TLS. Hence, both requester and veri(cid:27)er trust
the generator’s identity. Third, we assume that private keys used
by the generator are not leaked to the adversary and that the gen-
erator will not sign arbitrary statements. In any non-repudiation
solution relying on digital signatures, incorrect use of the private
key compromises the security of the scheme. We consider concrete
solutions to the problem of revoked or leaked private keys to be
out of the scope of this work (a non-repudiable statement could be
included in a blockchain together with a recent Online Certi(cid:27)cate
Status Protocol (OCSP) response). Finally, the veri(cid:27)er trusts the
generator to produce accurate content and timestamps.
4.1 Security Properties
For the security analysis, we adopt the security de(cid:27)nition of Con-
tent Extraction Signature [39] and match them to our design in
Appendix A. We formally de(cid:27)ne a record, a conversation and sub-
relations for each of them. Then, given the design of TLS-N above,
we aim to achieve the following security property, some of which
are by Steinfeld et al.
Property P0, is the adapted CES-Unforgeability stating that a valid
proof can only be produced for a conversation that is a subconver-
sation of a conversation signed in a proof. Here, we substitute the
documents in the de(cid:27)nition of CES-Unforgeability with the conver-
sations de(cid:27)ned in Appendix A.1.
Property P1 is the adapted CES-Privacy, stating that a proof leaks
no information about hidden parts.
Property P2: The proof reveals the structure of hidden data. Records
with hidden chunks are distinguishable from records without hid-
den chunks and conversations with missing records are distinguish-
able from complete conversations.
Property P3: For every non-hidden record, the originator is known.
Property P4: The timestamps inside the proof provide tight upper
and lower bounds on the generator’s time during the conversation.
4.2 Adversarial Model
We assume a computationally-bounded adversary that can take
one of two roles. Either the adversary acts as requester trying to
generate proofs that lead the veri(cid:27)er to wrong conclusions about
the conversation (violating P0, P2, P3 or P4). Or the adversary acts
as a veri(cid:27)er trying to learn hidden data (violating P1).
Either way, the adversary is allowed to interact with the genera-
tor, request evidence for di(cid:29)erent conversations and inspect proofs
published by other users. Furthermore, in accordance to the TLS
threat model, on the network the adversary acts as described in the
Dolev-Yao Model [12]. In section 6.2.1, we detail attacks on existing
solutions under this adversarial model.
4.3 Security Sketch for TLS-N
In this section we provide a brief security analysis of TLS-N. For
the full analysis and the proofs, please refer to Appendix A. We go