3.3±0.5
1.7±0.2
2.1±0.5
JS W [%]
83.5±1.6
8.0±0.4
3.3±0.5
4.3±1.3
FA R [%]
96.6±1.0
2.9±0.9
0.5±0.1
0.0
FA W [%]
93.1±0.8
6.1±0.8
0.8±0.2
0.0
Total R [%]
90.3±1.8
3.2±0.4
1.4±0.2
1.8±0.3
Total W [%]
86.2±0.9
7.5±0.3
2.5±0.4
3.1±0.6
Table 2: Windows 7, XP, Vista percentage of all Windows connections for raw (R) and re-weighted (W) data (mean±std. deviation)
Windows 7
Windows XP
Windows Vista
Reference [%]
44.3±4.3
40.3±5.2
13.2±3.0
JS R [%]
41.5±2.9
51.8±1.5
6.4±1.8
JS W [%]
48.6±3.5
41.3±2.6
9.3±1.1
FA R [%]
38.0±6.8
52.7±7.7
9.2±2.0
FA W [%]
42.7±4.2
42.8±3.2
14.4±1.2
Total R [%]
40.9±3.3
51.9±2.2
6.9±1.4
Total W [%]
45.6±3.1
42.8±2.4
11.0±0.8
Table 3: Browser percentage of connections for raw (R) and re-weighted (W) data (mean±standard deviation)
MS IE
Firefox
Chrome
Safari
Opera
Reference
39.9±8.4
24.5±2.3
21.9±4.9
7.0±1.6
2.3±1.0
JS R [%]
18.4±4.1
47.7±1.5
22.9±2.5
6.0±1.3
3.8±1.1
JS W [%]
35.8±2.3
27.5±1.9
22.6±2.3
9.6±1.4
2.9±0.2
FA R [%]
49.9±10.3
20.8±3.9
24.4±5.8
2.2±0.5
2.7±1.0
FA W [%]
52.4±2.2
20.8±1.6
21.0±2.1
4.2±0.5
1.4±0.2
Total R [%]
23.5±4.6
43.2±2.9
23.3±3.1
5.3±1.1
3.7±1.0
Total W [%]
42.3±1.6
24.7±2.3
21.3±1.8
8.1±0.7
2.4±0.2
Table 1 compares the percentages of OSs for JS-test, FA-test,
and both tests combined for both the raw and re-weighted data with
the reference data (unweighted average of AT Internet, Clicky, Net
Market Share, StatCounter, StatOwl, W3Counter, WebmasterPro,
Wikimedia from [28]). The FA test is biased towards Windows, as
iOS could not run Flash and possibly Flash on Linux also did not
work for some distributions/browsers. For both tests the MacOS X
percentage is surprisingly low compared to the reference, but it may
be that our observed web sites are less frequently used by MacOS X
clients. The re-weighted statistics are much closer to the reference
data, except that the JS-test appears to have a bias towards Linux
(possibly due to the participating sites attracting a higher than av-
erage Linux user fraction).
According to the t-tests, for the combined raw data the null hy-
pothesis must be rejected for all OSs (at 99% conﬁdence level). In
contrast for the re-weighted data we cannot reject the null hypothe-
sis for Windows, MacOS X and iOS, but must reject it for Linux (at
99% conﬁdence level). The re-weighted means are similar, except
for Linux, which is over-represented.
Table 2 shows the percentages of Windows XP, Vista and 7 as
percentages of all Windows connections for our data and the ref-
erence (as above from [28]). The raw data is biased towards more
Windows XP and fewer Windows Vista and Windows 7 connec-
tions (e.g. for the JS-test a large Indonesian blog site had a high
Windows XP fraction). But the re-weighted data is close to the
reference data.
According to the t-test for the combined raw data the null hy-
pothesis is rejected for Windows XP and Windows Vista, but not
for Windows 7 (at 99% signiﬁcance level). However, for the com-
bined re-weighted data the null hypothesis cannot be rejected for
any of the three Windows versions.
Table 3 shows the browser percentages of all connections and
the reference data (based on unweighted averages of June 2011,
December 2011 and March 2012 data from StatCounter, Net Ap-
plications, W3Counter, Wikimedia, Clicky from [29]). The raw JS-
tests have a much higher percentage of Firefox and a much lower
percentage of MS IE than the reference data. But the re-weighted
numbers are much closer to the reference. As said above, the FA-
test is biased towards Windows hence MS IE has a larger share and
the other browsers have a smaller share (in particular Safari, which
is not popular on Windows). Most of the re-weighted data is closer
to the reference data, except the percentage of MS IE.
According to the t-tests for the combined raw data the null hy-
pothesis is rejected for all browsers except Chrome (at 99% signiﬁ-
cance level). In contrast for the re-weighted data the null hypothesis
cannot be rejected for any browser (at 99% signiﬁcance level).
In conclusion, most of the OS and browser statistics from the
raw data appear to have bias, while all statistics based on the re-
weighted data are relatively similar to the reference, with the excep-
tion of Linux being over-represented. The results indicate that the
re-weighting is very eﬀective. Nevertheless, we cannot determine
whether it is similarly eﬀective for the IPv6 capability statistics.
4.3 Discussion and limitations
The per-country re-weighting mitigates the bias introduced be-
cause the proportions of tests observed from diﬀerent countries dif-
fer signiﬁcantly from the countries’ traﬃc proportions. However,
there is still a bias towards the clients visiting the particular set of
web sites observed. Nevertheless, our set of web sites is relatively
large and diverse, consisting of 55–75 diﬀerent domains (univer-
sities, ISPs, gaming sites, blog sites) that refer at least 100 tested
clients per day. Furthermore, we will show that a number of the
statistics (but not all) from re-weighted JS-tests and FA-tests match
well despite the totally diﬀerent set of web sites.
Using per connection statistics instead of per client/IP statistics
means we avoid additional observation bias. We showed in Figure
3 that in general our statistics are not dominated by some IPs that
generated a huge number of connections. However, we encoun-
tered two daily statistics with overall low numbers (e.g. clients that
preferred IPv6) that were largely dominated by a single IP address.
We corrected these outliers manually (by ignoring the IPs).
5.
IPV6 CAPABILITY ANALYSIS
First we analyse the overall and OS IPv6 capabilities. Then we
compare statistics for JS-test and FA-test. Finally, we analyse per-
92Figure 8: Percentage of all connections with IPv6-capable re-
solving DNS server
Figure 9: Percentage of all connections from hosts that were
IPv6-capable, preferred IPv6 in dual-stack, or could be forced
to use IPv6 with a literal URL
country IPv6 capabilities, dual stack failures and happy eyeballs
usage.
5.1 Overall IPv6 capabilities
First we analyse the proportions of the connections where the
client’s resolving DNS server was IPv6-capable (DNSv6-capable),
the client was IPv6-capable (IPv6-capable), the client preferred
IPv6 over IPv4 in dual-stack (IPv6-preferred), or could be forced to
use IPv6 with a literal URL (IPv6-forced). We plot the proportions
for weekdays/workdays (WD) and weekends (WE).
Figure 8 shows the percentage of DNSv6-capable connections.
The graph shows a clear uptrend from 40% to nearly 60% during
our measurement period, meaning the percentage of connections
from clients with resolving dual-stack DNS servers has increased.
A slightly smaller weekend percentage suggests that fewer home
user connections are DNSv6-capable.
Figure 9 shows the percentages of IPv6-capable, IPv6-preferred,
and IPv6-forced.
The percentage of IPv6-capable decreased
slightly from 6–7% around World IPv6 day 2011 (Wednesday
8th of June), during which major Internet network and service
providers enabled IPv6 as a test, to 6% with not much diﬀerence be-
tween weekdays and weekends. The percentage of IPv6-preferred
connections decreased from its peak of 2.5% around IPv6 day to
1–2% in July 2011 and has remained relatively constant since then.
The percentage of IPv6-preferred is higher during weekdays sug-
gesting that home users were less likely to prefer IPv6 (probably
because they were less likely to use native IPv6).
The percentage of IPv6-forced is basically the percentage of
IPv6-capable plus 15–20% of connections originating from Win-
dows Vista and Windows 7 hosts that support IPv6 via Teredo, but
by default do not query for DNS AAAA records (see Section 2.1).
The percentage of Teredo is almost 5% higher on weekends sug-
gesting that Teredo is more likely used by home users. We think
this is because Teredo is less likely to work in company networks
due to being disabled or ﬁltered by ﬁrewalls.
Only 6% of connections were from IPv6-capable clients, but for
11–12% of connections we observed DNS AAAA requests. We
think the diﬀerence is mainly due to hosts that request AAAA
records even if they have no IPv6 interfaces. For example, some
older Firefox browsers cause this and it is a common default on
Linux [30]. However, IPv6 failures may also contribute to the dif-
ference. A detailed analysis is future work.
Figure 10 shows a breakdown of the IPv6-capable connections
into those using “native” IPv6 (including point-to-point tunnels and
Figure 10: Percentage of all connections from IPv6-capable
hosts by IPv6 type (native, 6to4, Teredo)
6rd [31]), 6to4, or Teredo based on the IPv6 address preﬁxes.4 Over
70% of the connections from IPv6-capable hosts used 6to4 tun-
nelling (4–5% of all connections), 20–30% of IPv6-capable con-
nections came from hosts with native addresses (1–2% of all con-
nections), and only 2–3% of IPv6-capable connections used Teredo