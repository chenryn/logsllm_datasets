### Time-Based Username Brute-Force Tool
```
[*] Trying username TESTING 0.0 seconds..
[*] Trying username HAH 0.0 seconds..
[*] Trying username HO 0.0 seconds..
```
**Figure 18: Time-based username brute-force tool**

### Example Scenario: LinkedIn Profile Loading
When Bob, who is logged in, visits Alice's page, an invisible iframe loads his LinkedIn start page. This page includes notifications about new connections, updates from friends, and other social networking information, resulting in a relatively long load time of approximately 300ms.

Carol also visits Alice’s page, and her LinkedIn profile is loaded in an invisible iframe. However, since Carol is not logged into LinkedIn, the iframe is redirected to a small page that reads "Please Login," which completes loading in about 50ms.

Both scripts measure the time taken for the page to load and report back to Alice, allowing her to deduce that Bob is logged in while Carol is not.

### Challenges and Solutions
In such scenarios, the attacker faces the challenge of uncertain line latency, which can affect the reported load times. For example, if Alice simply assumes that any user with a load time greater than 200ms is logged in, she might receive a false positive when Dean, who has a high-latency connection, logs in from a bandwidth-challenged country like South Africa. Dean’s login page would take 400ms to load, leading to a false positive.

To overcome this, a second request is used, referred to as a reference site by Bortz [13]. The attack is modified as follows:

- **Bob's Visit**: When Bob visits Alice’s site, two iframes are loaded invisibly in his browser. One iframe requests a static page on LinkedIn that is accessible to both members and non-members (the base page). The second iframe attempts to access a page only available to members (the login page).
- **Timing Both Page Loads**: By timing both page loads, a relative load time is obtained. If Bob is logged into LinkedIn, the login page will always take 1.5 times longer to load than the base page, regardless of his connection speed.
- **Determining Login Status**: Based on this ratio, Alice can determine with high certainty whether a visitor is logged into LinkedIn.

### Demonstration Using a Local Freemail Service
This method is demonstrated using a local South African freemail service. The victim visits a site controlled by the attacker (https://secure.sensepost.com/mH/time-mailbox.html), which loads four iframes:
- **Iframe1**: Used for demo feedback.
- **Iframe2**: A tiny iframe used to communicate with the attacker.
- **Iframe3**: The base page (default webmail login screen).
- **Iframe4**: The login page (inbox page available to members).

The code on the attacker’s page performs the following actions:
1. Fetch the base page (default webmail login screen).
2. Fetch the login page (inbox page available to members).
3. Refresh the page if it is the first load to ensure cached pages do not affect load times.
4. Fetch the base page again.
5. Fetch the login page again.

- **If the user is not logged in**, the login page (inbox) will load in almost the same amount of time as the base page.
- **If the user is logged in**, the inbox takes much longer to load relative to the base page, allowing the script to deduce that the user is logged in.

During the attack, the second (tiny) iframe passes timing information back to the attacker’s web server, revealing the following log entry indicating the user is logged in:
```
box.victim.com - - [30/Jun/2007:01:04:05 +0200] "GET /mH/timing/User is LoggedIn=1.283093960892888 HTTP/1.1"
```

### Combining Cross-Site Timing and Traditional Web Application Timing Attacks
We have shown that an attacker can easily determine the load time of a page from the client’s perspective. Since we can time the loading of a web page, an attacker can use a victim to launch brute-force attacks against a site that leaks information via timing.

**Experiment Setup**:
- **Bank Site**: http://bank.sensepost.com was created with a login page that allows an attacker to enumerate valid logins through timing. A failed login attempt on a valid user account took 1ms longer than a failed login attempt on a non-existent account.
- **Malicious Site**: http://alice.sensepost.com hosted the JavaScript code (see Figure 22).

When Bob visits Alice’s page, the JavaScript loads the iframes. Bob’s browser continues to try all usernames in the list until it determines, through timing, that a valid username is found. The script then reports back to Alice that a valid username has been found.

### Figures
- **Figure 19**: Cross-site timing iframes setup
- **Figure 20**: Cross-site timing iframes: user is logged out
- **Figure 21**: Cross-site timing iframes: user is logged in
- **Figure 22**: Browser-based brute-force timing synopsis
- **Figure 23**: Visible iframes showing browser-based brute-force timing attack

### Implications
By simply browsing to Alice’s site, Bob’s browser becomes a bot capable of brute-forcing http://bank.sensepost.com and reporting back to Alice with the results. Due to the reflected nature of the attack, the bank cannot identify Alice without examining the malicious script or Bob’s machine.

### Additional Considerations
- **JavaScript Timer Resolution**: The `Date()` function in JavaScript returns time in milliseconds, which may not be granular enough. To address this, the `nanoTime()` method within the `java.lang.System` class can be used to provide timing to the nearest nanosecond.
- **Cross-Site Request Attacks**: We tested these attacks using GET requests, but they can be extended to POST requests by populating the form using JavaScript and calling `document.form.submit()`.

### Distributed Cross-Site Request Timing
In a distributed scenario, Alice can clone the attack through many victims, each trying a different part of the username list. This creates a distributed brute-force tool focused on a single site. If the session ID is passed as a request parameter, it becomes a target for distributed brute-forcing.

### Conclusion
Timing attacks have been a part of the hacker's toolkit for many years. Recently, targets for timing attacks have expanded beyond cryptanalysis to include privacy invasion. This paper explored various timing attacks in web applications, including Perl regular expression insertion, SQL Server timing channels, and cross-site timing. We also discussed the possibility of building distributed attacks using cross-site timing.

### References
[1] Dhem, J.-F., Koeune, F., Leroux, P.-A., Mestré, P., Quisquater, J.-J., & Willems, J.-L. (2000). A practical implementation of the timing attack. In CARDIS '98: Proceedings of the International Conference on Smart Card Research and Applications, pp. 167–182. Springer-Verlag.

[2] Kocher, P. C. (1996). Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems. In CRYPTO '96: Proceedings of the 16th Annual International Cryptology Conference on Advances in Cryptology, pp. 104–113. Springer-Verlag.

[3] Brumley, D., & Boneh, D. (2003). Remote timing attacks are practical. In Proceedings of the 12th USENIX Security Symposium.

[4] Diffie, W., & Hellman, M. E. (1976). New directions in cryptography. IEEE Transactions on Information Theory, IT-22(6), 644–654.

[5] Rivest, R. L., Shamir, A., & Adleman, L. (1983). A method for obtaining digital signatures and public-key cryptosystems. Communications of the ACM, 26(1), 96–99.

[6] Percival, C. (2005). Cache missing for fun and profit.

[7] OpenSSL: The Open Source toolkit for SSL/TLS.

[8] Bernstein, D. J. (2004). Cache-timing attacks on AES.

[9] Felten, E. W., & Schneider, M. A. (2000). Timing attacks on web privacy. In CCS '00: Proceedings of the 7th ACM conference on Computer and communications security, pp. 25–32. ACM Press.

[10] Grossman, J., & Niedzialkowski, T. (2006). Hacking intranets from the outside: JavaScript malware just got a lot more dangerous.

[11] SPI Labs. (2006). Detecting, analyzing, and exploiting intranet applications using JavaScript.

[12] Mozilla Project. (n.d.). The same origin policy. Retrieved from http://www.mozilla.org/projects/security/components/same-origin.html.

[13] Bortz, A., Boneh, D., & Nandy, P. (2007). Exposing private information by timing web applications. In WWW '07: Proceedings of the 16th international conference on World Wide Web, pp. 621–628. ACM Press.

[14] Anley, C. (n.d.). Advanced SQL injection in SQL Server applications. Retrieved from http://www.ngssoftware.com/papers/advanced sql injection.pdf.

[15] Cerrudo, C. (n.d.). Datathief. Retrieved from http://www.argeniss.com/research/HackingDatabases.zip.

[16] Sec-1. (n.d.). Automagic SQL injector. Retrieved from http://scoobygang.org/automagic.zip.

[17] nummish & Xeron. (n.d.). Absinthe. Retrieved from http://www.0x90.org/releases/absinthe/.

[18] icesurfer. (n.d.). sqlninja. Retrieved from http://sqlninja.sourceforge.net/.

[19] Kindermann, L. (n.d.). Myaddress Java applet. Retrieved from http://reglos.de/myaddress/MyAddress.html.

[20] Grossman, J. (2007). Goodbye applet, hello NAT'ed IP address. Retrieved from http://jeremiahgrossman.blogspot.com/2007/01/goodbye-applet-hello-nated-ip-address.html.

[21] pdp Architect. (n.d.). getnetinfo. Retrieved from http://www.gnucitizen.org/projects/atom#comment-2571.