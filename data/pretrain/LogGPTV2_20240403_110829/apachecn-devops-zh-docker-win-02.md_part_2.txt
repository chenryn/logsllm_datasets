Sending build context to Docker daemon  4.608kB
Step 1/3 : FROM mcr.microsoft.com/windows/servercore:ltsc2019
 ---> 8b79386f6e3b
Step 2/3 : COPY scripts/print-env-details.ps1 C:\\print-env.ps1
 ---> 5e9ed4527b3f
Step 3/3 : CMD ["powershell.exe", "C:\\print-env.ps1"]
 ---> Running in c14c8aef5dc5
Removing intermediate container c14c8aef5dc5
 ---> 5f272fb2c190
Successfully built 5f272fb2c190
Successfully tagged dockeronwindows/ch02-powershell-env:2e
```
这就是 Docker 构建映像时发生的情况:
1.  `FROM`镜像已经存在于我的本地缓存中，所以 Docker 不需要下载。输出是微软 Windows Server 核心镜像的 ID(从`8b79`开始)。
2.  Docker 将脚本文件从构建上下文复制到新的映像层(ID `5e9e`)。
3.  Docker 将命令配置为在从映像运行容器时执行。它从*步骤 2* 映像创建一个临时容器，配置启动命令，将容器保存为一个新的映像层(标识`5f27`)，并删除中间容器(标识`c14c`)。
最后一层用映像名标记，但是所有中间层也被添加到本地缓存中。这种分层方法意味着 Docker 在构建映像和运行容器时非常高效。最新的 Windows Server Core 映像未压缩超过 4 GB，但是当您运行基于 Windows Server Core 的多个容器时，它们都将使用相同的基础映像层，因此您最终不会得到 4 GB 映像的多个副本。
在本章的后面，您将会了解更多关于映像层和存储的内容，但是首先我会看一些更复杂的 Dockerfiles.NET 和.NET 核心应用。
# 打包您自己的应用
构建映像的目标是将应用打包到一个可移植的、独立的单元中。映像应该尽可能小，以便在您想要运行应用时可以轻松移动，并且应该具有尽可能少的操作系统功能，因此启动时间快，攻击向量小。
Docker 对映像大小没有限制。您的长期目标可能是构建轻量级运行的最小映像.NET 核心应用。但是你可以从将你现有的 ASP.NET 应用打包成 Docker 映像在 Windows Server Core 上运行开始。Docker 也没有对如何打包你的应用进行限制，所以你可以从不同的方法中进行选择。
# 在构建期间编译应用
在 Docker 映像中打包自己的应用有两种常见方法。首先是使用包含应用平台和构建工具的基础映像。因此，在 Dockerfile 中，您将源代码复制到映像中，并在映像构建过程中编译应用。
这是一种流行的公共映像方法，因为这意味着任何人都可以构建映像，而无需在本地安装应用平台。这也意味着应用的工具与映像捆绑在一起，因此可以对容器中运行的应用进行调试和故障排除。
这里有一个简单的例子.NET 核心应用。该 Dockerfile 用于`dockeronwindows/ch02-dotnet-helloworld:2e`映像:
```
FROM microsoft/dotnet:2.2-sdk-nanoserver-1809
WORKDIR /src
COPY src/ .
USER ContainerAdministrator
RUN dotnet restore && dotnet build
CMD ["dotnet", "run"]
```
Dockerfile 使用微软的。来自 Docker Hub 的. NET 核心映像作为基础映像。这是该映像的一个特定变体，它基于 Nano Server 版本，并且具有。安装了. NET Core 2.2 SDK。构建从上下文复制应用源代码，并作为容器构建过程的一部分编译应用。
这个 Dockerfile 中有三个您以前没有见过的新指令:
1.  `WORKDIR`指定当前工作目录。Docker 在中间容器中创建目录(如果它还不存在)，并将其设置为当前目录。它仍然是 Dockerfile 中后续指令的工作目录，当容器从映像运行时，它也是容器的工作目录。
2.  `USER`在构建中更改当前用户。默认情况下，纳米服务器使用最低权限用户。这将切换到容器映像中具有管理权限的内置帐户。
3.  `RUN`在中间容器内执行命令，命令完成后保存容器的状态，创建新的映像层。
当我构建这个映像时，您将看到`dotnet`命令输出，它是根据映像构建中的`RUN`指令编译的应用:
```
> docker image build --tag dockeronwindows/ch02-dotnet-helloworld:2e . 
Sending build context to Docker daemon  192.5kB
Step 1/6 : FROM microsoft/dotnet:2.2-sdk-nanoserver-1809
 ---> 90724d8d2438
Step 2/6 : WORKDIR /src
 ---> Running in f911e313b262
Removing intermediate container f911e313b262
 ---> 2e2f7deb64ac
Step 3/6 : COPY src/ .
 ---> 391c7d8f4bcc
Step 4/6 : USER ContainerAdministrator
 ---> Running in f08f860dd299
Removing intermediate container f08f860dd299
 ---> 6840a2a2f23b
Step 5/6 : RUN dotnet restore && dotnet build
 ---> Running in d7d61372a57b
Welcome to .NET Core!
...
```
在 Docker Hub 上，您会经常看到这种方法，用于使用类似.NET Core、Go 和 Node.js，其中工具很容易添加到基础映像中。这意味着您可以在 Docker Hub 上设置自动构建，这样当您将代码更改推送到 GitHub 时，Docker 的服务器就会从 Docker 文件构建您的映像。服务器可以做到这一点.NET Core、Go 或 Node.js，因为所有的构建依赖都在基本映像中。
此选项意味着最终映像将比生产应用所需的大得多。语言 SDK 和工具可能会比应用本身占用更多的磁盘空间，但是您的最终结果应该是应用；当容器在生产环境中运行时，所有占用映像空间的构建工具都不会被使用。另一种方法是先构建应用，然后将编译后的二进制文件打包到容器映像中。
# 在构建前编译应用
构建应用首先要与现有的构建管道协调一致。您的构建服务器需要安装所有的应用平台和构建工具来编译应用，但是您完成的容器映像只具有运行应用所需的最低限度。通过这种方法，我的.NET Core 应用变得更加简单:
```
FROM microsoft/dotnet:2.2-runtime-nanoserver-1809
WORKDIR /dotnetapp
COPY ./src/bin/Debug/netcoreapp2.2/publish .
CMD ["dotnet", "HelloWorld.NetCore.dll"]
```
这个 Dockerfile 使用了一个不同的`FROM`映像，它只包含.NET Core 2.2 运行时，而不是工具(因此它可以运行编译后的应用，但不能从源代码编译)。如果不首先构建应用，就无法构建这个映像，因此您需要将`docker image build`命令包装在构建脚本中，该脚本还运行`dotnet publish`命令来编译二进制文件。
编译应用并构建 Docker 映像的简单构建脚本如下所示:
```
dotnet restore src; dotnet publish src
docker image build --file Dockerfile.slim --tag dockeronwindows/ch02-dotnet-helloworld:2e-slim .
```
If you put your Dockerfile instructions in a file called something other than **Dockerfile**, you need to specify the filename with the `--file` option: `docker image build --file Dockerfile.slim`.
我已经将平台工具的需求从映像转移到构建服务器，这导致了一个小得多的最终映像:这个版本为 410 MB，而前一个版本为 1.75 GB。您可以通过列出映像并过滤映像存储库名称来查看大小差异:
```
> docker image ls --filter reference=dockeronwindows/ch02-dotnet-helloworld
REPOSITORY                               TAG     IMAGE ID       CREATED              SIZE
dockeronwindows/ch02-dotnet-helloworld   2e-slim b6e7dca114a4   About a minute ago   410MB
dockeronwindows/ch02-dotnet-helloworld   2e      bf895a7452a2   7 minutes ago        1.75GB
```
这个新版本也是一个比较受限制的形象。源代码和.NET Core SDK 没有打包在映像中，因此您不能连接到正在运行的容器并检查应用代码，或者对代码进行更改并重新编译应用。
对于企业环境或商业应用，您可能已经拥有了一台设备完善的构建服务器，打包构建的应用可以成为更全面的工作流程的一部分:
![](img/d09a1ae3-e97a-4318-8118-f2d2a39c5828.png)
在这个管道中，开发人员将他们的更改推送到中央源代码存储库( **1** )。构建服务器编译应用并运行单元测试；如果它们通过了，那么容器映像将被构建并部署在一个登台环境中(2)。集成测试和端到端测试是针对登台环境运行的，如果它们通过了，那么您的容器映像版本是测试人员验证的一个很好的发布候选(3)。
您通过在生产环境中运行映像中的容器来部署新版本，并且您知道您的整个应用栈是通过所有测试的同一套二进制文件。
这种方法的缺点是，您需要在所有构建代理上安装应用 SDK，并且 SDK 的版本及其所有依赖项都需要与开发人员使用的相匹配。通常在 Windows 项目中，您会发现安装了 Visual Studio 的 CI 服务器，以确保服务器拥有与开发人员相同的工具。这使得构建非常繁重的服务器，这需要大量的调试和维护工作。
It also means that you can't build this Docker image from the source code for this chapter yourself unless you have the .NET Core 2.2 SDK installed on your machine.
您可以通过使用多阶段构建来获得这两个选项的最佳效果，在多阶段构建中，您的 Dockerfile 定义了编译应用的一个步骤，以及将其打包到最终映像中的另一个步骤。多阶段 Dockerfiles 是可移植的，因此任何人都可以在没有先决条件的情况下构建映像，但是最终的映像只包含应用所需的最低限度。
# 使用多阶段构建进行编译
在多阶段构建中，您的 Dockerfile 中有多个`FROM`指令，其中每个`FROM`指令开始构建中的一个新阶段。Docker 会在您构建映像时执行所有指令，后期阶段可以访问早期阶段的输出，但只有最后一个阶段用于完成的映像。
我可以为.NET Core 控制台应用，将前面的两个 Dockerfiles 合并为一个:
```
# build stage
FROM microsoft/dotnet:2.2-sdk-nanoserver-1809 AS builder
WORKDIR /src
COPY src/ .
USER ContainerAdministrator
RUN dotnet restore && dotnet publish
# final image stage
FROM microsoft/dotnet:2.2-runtime-nanoserver-1809
WORKDIR /dotnetapp
COPY --from=builder /src/bin/Debug/netcoreapp2.2/publish .
CMD ["dotnet", "HelloWorld.NetCore.dll"]
```
这里有一些新东西。第一个阶段使用一个大的基本映像。已安装. NET Core SDK。我已经使用`FROM`指令中的`AS`选项将这个阶段命名为`builder`。阶段的剩余部分继续复制源代码并发布应用。当构建器阶段完成时，发布的应用将存储在一个中间容器中。
第二阶段使用运行时.NET Core 镜像，没有安装 SDK。在这个阶段，我复制前一阶段发布的输出，在`COPY`指令中指定`--from=builder`。任何人都可以使用 Docker 从源代码编译这个应用，而不需要.NET 核心安装在他们的机器上。
Windows 应用的多阶段 Dockerfiles 是完全可移植的。要编译应用并构建映像，唯一的先决条件是安装一台带有 Docker 的 Windows 机器，以及一份代码副本。构建器阶段包含 SDK 和所有的编译器工具，但是最终的映像只有运行应用所需的最低限度。
这种方法不仅仅是为了.NET 核心。您可以为. NET Framework 应用编写一个多阶段 Dockerfile，其中第一阶段使用安装了 MSBuild 的映像，您可以使用它来编译应用。本书后面有很多这样的例子。
无论您采取哪种方法，为了构建更复杂的应用映像，对于与其他系统集成的软件，您只需要了解更多的 Dockerfile 指令。
# 使用主 Dockerfile 指令