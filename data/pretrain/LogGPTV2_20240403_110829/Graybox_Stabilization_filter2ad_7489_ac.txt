gram  Spec)  captures  the  internal  consistency  require- 
ments  for  TME.  Mutual  exclusion  requirement  is  ob- 
served locally at each  process since  CS Entry  Spec  re- 
quires that a total-ordering of requests is respected while 
accessing CS. CS Entry Spec further requires that the or- 
393 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:03 UTC from IEEE Xplore.  Restrictions apply. 
dering be based on timestamp values of requests, hence, 
that  first-come  first-serve  requirement  is  respected  lo- 
cally. Finally, Request Spec, Reply Spec, and CS Release 
Spec address starvation freedom: Request Spec requires 
the  request  to  be sent to every  process;  Reply Spec re- 
quires a reply to be sent for earlier requests; CS Release 
Spec in conjunction with Reply Spec states that a process 
not requesting  for CS should not prevent  the  interested 
processes from entering CS. So, for any system M  that 
everywhere implements Lspec, the  internal  consistency 
requirement of each process (in M )  is satisfied at every 
state. 
However internal consistency  of process states does 
not imply mutual consistency. For example, due to tran- 
sient faults there might be more than one process access- 
ing CS at the same time. Or, there may be deadlocks, as 
illustrated by the following scenario: Suppose processes 
j  and  k  have  both  requested  for CS. Due  to  transient 
faults  (e.g.,  REQj  and REQk  are both  dropped  from 
the channels) j  and k may have mutually  inconsistent in- 
formation: j.REQk  & REQj  and k.REQj  & REQk. 
Process j  cannot enter CS because j.REQk  It REQj. 
Likewise, k  cannot enter CS. As far as the  satisfaction 
of Lspec is concerned, j  (respectively  k )  does not  have 
to do anything more; j  (resp.  k )  waits for k  (resp. j )  to 
respond to  its request  message.  Therefore,  the  state of 
M  has a deadlock. 
In order to reestablish  mutual consistency among the 
processes, we design a dependability wrapper W which 
consists  of  a  wrapper  at  each  process  j  (i.e.,  W = 
n j  ::  W j ) .  In Lspec mutual  inconsistencies  between 
two processes j  and k  may  arise only due to j.REQk 
and k.REQj  variables; the only  information that j  and 
k  have  about each other's  state  are stored  in  j.REQk 
and k.REQj. These mutual inconsistencies constitute a 
problem only when j  or k  is requesting CS (i.e., h.j or 
h.k). Therefore,  in  order to reestablish  mutual consis- 
tency between j  and k it is sufficient to correct j.REQk 
and k.REQj  when  h.j or h.k  holds.  Thus,  Wj is  as 
follows. 
Wj ::  h.j  --+  (Vk : k  # j  : send(REQj, j ,  k ) )  
j.R.EQk (and in turn k.REQj) will be corrected by W k .  
Note that for any k such that k  $ X  and ~ h . k ,  
there is no 
need to correct j.REQk  or k.REQj. Thus, our refined 
wrapper Wj is as follows. 
Mij  ::  h.j  + (Vk :k # j  A j.REQk & REQj  : 
L 
send(REQj, j ,  IC)) 
IVj is a graybox wrapper since it uses only the speci- 
fication Lspec and does not depend on how Lspec is im- 
plemented. Next, we prove in Theorem  11 that any sys- 
tem  IvI that  everywhere-eventually  implements  Lspec 
can be made stabilizing to Lspec by  using  W .  Towards 
this end, we first prove in Lemma 9 that bV  does not in- 
terf'ere with Lspec, and subsequently in Lemma  I O  that 
Lspec composed with W is stabilizing to Lspec. 
Lemma 9 (Interference freedom).  Lspec  0 W imple- 
0 
ments Lspec. 
Lemma 10 (Stabilization).  Lspec  0 W is stabilizing to 
Lspec. 
Theorem  11  (Graybox  stabilization). 
For  any  sys- 
tem  M  that  everywhere-eventually implements  Lspec, 
(Ad 0 Mi) is  stabilizing  to  Lspec  (and,  hence,  to 
TMESpec). 
( V M  ::[A4 C E'  Lspec]  + 
( M  0 W )  is stabilizing to  Lspec ) 
Proof.  W satisfies the condition in Corollary 3 since W' 
does not depend on any history  information.  The proof 
then follows from Corollary 3 and Lemma  IO. 
Imlplementation of W .  It follows from Theorem 7 that 
any  LV,l  such that  [W,l E  W j ]  is  also  a dependability 
wrapper for all  M  that  everywhere  implements Lspec. 
Thus, we can relax Wj by sending the request messages 
periodically  instead  of  sending them  successively.  To 
this end, we employ a timeout mechanism at j ;  request 
messages are repeated only when timeouts occur. 
0 
~ 
~ 
W, corrects k.REQ,, for all k ,  by successively send- 
j.REQk  is 
ing  REQ,  to  k  as  long  as  h.j  holds. 
also  corrected  by  W, after  k.REQ,  is  corrected:  If 
REQ,  REQk holds then from Reply Spec it follows 
that j.REQk  is eventually set to REQk. 
We can refine  W, as follows.  Let X  denote the  set 
of processes k such that j.REQk & REQ,.  We require 
j  to correct k.REQ, (and this in turn corrects j.REQk 
as shown above) only for k  E  X .  For any  k  such that 
k  X  and h.k holds, from Request Spec it follows that 
~~ 
~ 
~ 
~ 
~ 
The  domain  of  timer.j  I S   from  0  to  some  natural 
number A. Note that the timeout mechanism  is just  an 
optimization  and  does not  affect  the correctness  of  the 
solution.  In fact, Wi is equivalent to W, when  A  = 0 
(i.e ., when timeout period is 0). The timeout mechanism 
can be employed to tune the wrapper to decrease the un- 
necessary  repetitions of the request messages when  the 
sys,tem is in the consistent states. 
394 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:03 UTC from IEEE Xplore.  Restrictions apply. 
5  Reusability of the Wrapper for TME 
RAME 
In 
this 
section,  we  present 
two  well-known 
implementations  of  Lspec, 
everywhere-eventually 
the  mutual  exclusion  programs  of  Ricart- 
namely 
Agrawala  [14]  and  Lamport  [13]. 
It  follows  that  the 
wrapper  W  renders  both  to  be  stabilizing  tolerant  to 
Lspec. 
5.1  Ricart-Agrawala’s Program, RA-ME 
The  idea of  R A M E  is  as  follows.  Whenever  pro- 
cess j  wants to enter the critical section, CS, it sends a 
timestamped  request  message to all  the  processes.  k, 
upon receiving a request message from j ,  sends back a 
reply message if k is not requesting or j ’ s  request has a 
lower timestamp  than  k’s request.  Otherwise, k defers 
the reply message.  j  enters CS only after it has received 
reply messages  from all  other processes.  When j  exits 
CS, it sends all the deferred reply messages. 
We  now  describe  R A M E   formally. 
In  R A M E ,  
j  maintains  a  variable  called  deferredsetj  in  addi- 
tion  to  the  variables  in  Lspec  (i.e.,  REQ,,  j.REQk, 
Receiued(j.REQk), h.j,  e.j,  and  t.j).  The  com- 
putations  of  R A M E  that  start  from  the  initial  states 
I  Received(j.REQk) 
satisfy  deferred2et.j  =  {IC 
A  REQ,  & j.REQk).  Since this  condition  does  not 
necessarily hold at every state, R A M E  is not an every- 
where implementation of Lspec. However R A M E  is an 
everywhere-eventually implementation since the last ac- 
tion periodically  corrects the value of deferred2et.j and 
once deferred2et.j  is corrected R A M E  correctly tracks 
Lspec. 
In  order  to  everywhere  implement  Structural  Spec, 
we employ a variable called state.j over a domain of h, 
e, t.  We  assert  (structurally) that  h.j 
(stare.j=  h), 
e.j E (stare.j=  e), and t.j E (state.j=  t). 
Initially, for all j, REQ,  = 0, (Vk :: j.REQk  = 0 ) ,  
t.j = true, (Vk :: Receaued(j.REQk) =false) and de- 
ferred5et.j  is empty.  RA-ME  assumes FIFO channels, 
and that initially  all the channels are empty. The result- 
ing process actions for j  are given in Figure 2. 
Observe from R A M E  that send-request corresponds 
to  the  “send”  in  Request  Spec,  and  send-reply  corre- 
sponds to the “send’ in Reply Spec. Receive-request cor- 
responds to the “receive”  in  Reply Spec.  Receive-reply 
also corresponds to the “receive” in Reply Spec (but this 
time no messages need to be sent since REQ, is always 
less-than the reply from IC). 
Theorem  12.  R A M E  everywhere-eventually  imple- 
ments Lspec. 
0 
t . j   A  { Request CS } -+ 
REQj  := 1c.j;  h.j := true; 
(Vk : k  # j  : send-request(j , REQ, , k  ) ) 
1e.j  A  { receive-request for “REQk” } -+ 
j.REQk  := REQk; Receiued(j.REQk) := true; 
i f ( t . j )  then REQj  := 1c.j; 
if(j.RE&k &  REQj) 
then send-reply(j , REQj  , k  ); 
Received(j.REQk) := faise; 
else deferred-ser.j:= deferred-set.j  U  { k }  
h.j  A 
(Vk : k  # j  : REQj & j.REQk) -+ 
e.j := true 
e . j   A  {Release CS } -+ 
(Vk : k  E deferred-set.j: send-reply(j , 1c.j , k  )); 
REQ,  := 1c.j;  t.j := true;  deferredset.j:=O; 
(Vk :: Received(j.REQk) :=false) 
true -+ deferrer1set.j := { k 
A  REQj & j.REQk) 
I  Receiued(j.REQk) 
Figure 2. RA-ME 
5.2  Lamport’s Program 
In  Lamport’s  program,  every  process j  maintains  a 
queue, request-queue.j, to  store  the  existing  CS  re- 
quests  ordered  according  to  their  timestamps.  When- 
ever j  wants to enter CS, it places its request timestamp 
into request-queue.j and sends a timestamped  request 
IC,  upon  receiving  a  re- 
message  to all  the  processes. 
quest message from j ,  returns a timestamped reply mes- 
sage to j  and places j’s  request  into request-queuek. 
j  enters  CS  only  after  it  has  received  reply  messages 
from  all  other processes  and j’s request  is at  the  head 
of request-9ueue.j . When j  exits CS, it sends a times- 
tamped  release  message  to  all  processes.  When  k re- 
ceives a release message from j ,  it removes j ’ s  request 
from request-queue. k. 
We  now  describe  Lamport’s  M E   program  (Lam- 
portME) formally.  In  LamportrvlE, j  maintains  two 
variables,  namely  requestqueue.j and grunt.j.k,  in  ad- 
dition to the variables in  Lspec  (i.e.,  REQ,,  j.REQk, 
received(j.REQk), h.j, e.j, and t.j). request-queue.j 
is a queue that  stores the existing CS requests that j  is 
aware of.  That  is,  REQk  E  request-queue.j  iff  j  has 
received IC’s  request message and since then has not re- 
ceived a release message from k. gran1.j.k  is a boolean 
395 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:03 UTC from IEEE Xplore.  Restrictions apply. 
that denotes whether j  has received a reply to its request 
message from IC.  The computations of LamportNE that 
start from the  initial  states satisfy  the consistency con- 
ditions  for  request-queue.j and  grunt.j.k.  Since  these 
conditions do not  necessarily  hold at every state, Lam- 
portME is not an everywhere implementation of Lspec. 
However LamportNE is an everywhere-eventually im- 
plementation since  the  last  action  periodically  corrects 
the  values  of  requestqueue.j  and  grunt.j.k,  and  once 
they are corrected LamportNE correctly tracks Lspec. 
In LamportNE, a process,  upon receiving  a request 
message, sends back a reply  immediately (cf.  receive- 
request action).  Thus, received(j.REQk) is set to true 
at the  beginning  of  receive-request action  and set back 
tofalse at the end of that action. 
into 
request-queue.j, 
We  use  “Insert  (  request-queue.j,  R E Q k   )” 
to  place  R E Q k  
“Head 
(request-queue.j)”  to  access  the  item  at  the  head 
of request-queue.j, and “Dequeue ( request-9ueue.j 
)” to  remove the  item  at the  head  of request-queue.j. 
Initially,  for  all j,  R E Q j   = 0, t . j ,  (Vk  :: grant.j.k = 
false), and request-9ueue.j  is empty. LamportNE as- 
sumes FIFO channels, and that initially all the channels 
are empty.  The resulting process actions for j  are given 
in Figure 3. 
Observe from LamportNE that send-request corre- 
sponds to  the  “send”  in  Request Spec, and send-reply, 
send-release  correspond  to  the  “send”  in  Reply  Spec. 
Receive-request corresponds to  the  “receive”  in  Reply 
Spec. Receive-reply and receive-release also correspond 
to the “receive” in Reply Spec (but this time no messages 
need  to be sent since REQ,  is always less-than  the re- 
plyhelease from k ) .  
Theorem 13.  LamportNE everywhere-eventually im- 
plements Lspec. 
0 
Corollary 14.  From Theorems  11,  12, and  13, it fol- 
lows that bV  renders R A N E  and LamportNE stabiliz- 
ing tolerant to Lspec (and, hence, to TMESpec). 
0 
6  Concluding Remarks 
In this  paper,  we investigated  the  graybox design of 
system stabilization, which uses only the system specifi- 
cation, towards overcoming drawbacks of the traditional 
whitebox  approach, which uses the system implementa- 
tion as well.  The graybox approach offers the potential 
of adding stabilization in a scalable manner, since spec- 