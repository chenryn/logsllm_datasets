title:Taint-Enhanced Policy Enforcement: A Practical Approach to Defeat
a Wide Range of Attacks
author:Wei Xu and
Sandeep Bhatkar and
R. Sekar
Taint-Enhanced Policy Enforcement:
A Practical Approach to Defeat a Wide Range of Attacks
Wei Xu
Sandeep Bhatkar
R. Sekar
Department of Computer Science
Stony Brook University, Stony Brook, NY 11794-4400
{weixu,sbhatkar,sekar}@cs.sunysb.edu
Abstract
Policy-based conﬁnement, employed in SELinux and
speciﬁcation-based intrusion detection systems, is a pop-
ular approach for defending against exploitation of vul-
nerabilities in benign software. Conventional access con-
trol policies employed in these approaches are effective
in detecting privilege escalation attacks. However, they
are unable to detect attacks that “hijack” legitimate ac-
cess privileges granted to a program, e.g., an attack that
subverts an FTP server to download the password ﬁle.
(Note that an FTP server would normally need to ac-
cess the password ﬁle for performing user authentica-
tion.) Some of the common attack types reported today,
such as SQL injection and cross-site scripting, involve
such subversion of legitimate access privileges. In this
paper, we present a new approach to strengthen policy
enforcement by augmenting security policies with infor-
mation about the trustworthiness of data used in security-
sensitive operations. We evaluated this technique using
9 available exploits involving several popular software
packages containing the above types of vulnerabilities.
Our technique sucessfully defeated these exploits.
1 Introduction
taint analysis) has
Information ﬂow analysis (a.k.a.
played a central role in computer security for over three
decades [1, 10, 8, 30, 25]. The recent works of [22,
28, 5] demonstrated a new application of this technique,
namely, detection of exploits on contemporary software.
Speciﬁcally, these techniques track the source of each
byte of data that is manipulated by a program during its
execution, and detect attacks that overwrite pointers with
untrusted (i.e., attacker-provided) data. Since this is an
essential step in most buffer overﬂow and related attacks,
and since benign uses of programs should never involve
outsiders supplying pointer values, such attacks can be
detected accurately by these new techniques.
In this paper, we build on the basic idea of using ﬁne-
grained taint analysis for attack detection, but expand its
scope by showing that the technique can be applied to
detect a much wider range of attacks prevalent today.
Speciﬁcally, we ﬁrst develop a source-to-source trans-
formation of C programs that can efﬁciently track infor-
mation ﬂows at runtime. We combine this information
with security policies that can reason about the source of
data used in security-critical operations. This combina-
tion turns out to be powerful for attack detection, and of-
fers the following advantages over previous techniques:
• Practicality. The techniques of [28] and [5] rely on
hardware-level support for taint-tracking, and hence
cannot be applied to today’s systems. TaintCheck [22]
addresses this drawback, and is applicable to arbitrary
COTS binaries. However, due to difﬁculties associ-
ated with static analysis (or transformation) of bina-
ries, their implementation uses techniques based on
a form of runtime instruction emulation [21], which
causes a signiﬁcant slowdown, e.g., Apache server re-
sponse time increases by a factor of 10 while fetching
10KB pages. In contrast, our technique is much faster,
increasing the response time by a factor of 1.1.
• Broad applicability. Our technique is directly applica-
ble to programs written in C, and several other script-
ing languages (e.g., PHP, Bash) whose interpreters are
implemented in C. Security-critical servers are most
frequently implemented in C. In addition, PHP and
similar scripting languages are common choices for
implementing web applications, and more generally,
server-side scripts.
• Ability to detect a wide range of common attacks.
By combining expressive security policies with ﬁne-
grained taint information, our technique can address
a broader range of attacks than previous techniques.
Figure 1 shows the distribution of the 139 COTS
software vulnerabilities reported in 2003 and 2004 in
the most recent ofﬁcial CVE dataset (Ver. 20040901).
Our technique is applicable for detecting exploita-
tions of about 2/3rds of these vulnerabilities, includ-
ing buffer overﬂows, format-string attacks, SQL injec-
tion, cross-site scripting, command and shell-code in-
jection, and directory traversal. In contrast, previous
approaches typically handled smaller attack classes,
USENIX Association
Security ’06: 15th USENIX Security Symposium
121
Config
errors
3%
Tempfile
4%
Memory
errors
27%
Format
string
4%
SQL
injection
2%
Command
injection
15%
Other logic
errors
22%
Input
validation/
DoS
9%
Directory
traversal
10%
Cross-site
scripting
4%
Figure 1: Breakdown of CVE software security vulnera-
bilities (2003 and 2004)
e.g., [7, 9, 2, 22, 28, 5] handle buffer overﬂows, [6]
handles format string attacks, and [24, 23] handle in-
jection attacks involving strings.
The focus of this paper is on the development of prac-
tical ﬁne-grained dynamic taint-tracking techniques, and
on illustrating how this information can be used to signif-
icantly strengthen conventional access control policies.
For this purpose, we use simple taint-enhanced security
policies. Our experimental evaluation, involving read-
ily available exploits that target vulnerabilities in several
popular applications, shows that the technique is effec-
tive against these exploits. Nevertheless, many of these
policies need further reﬁnement before they can be ex-
pected to stand up to skilled attackers. Section 7.2 dis-
cusses some of the issues in policy reﬁnement, but the
actual development of such reﬁned policies is not a fo-
cus area of this paper.
We have successfully applied our technique to several
medium to large programs, such as the PHP interpreter
(300KLOC+) and glibc, the GNU standard C library
(about 1MLOC). By leveraging the low-level nature of
the C language, our implementation works correctly even
in the face of memory errors, type casts, aliasing, and so
on. At the same time, by exploiting the high-level nature
of C (as compared to binary code), we have developed
optimizations that signiﬁcantly reduce the runtime over-
heads of ﬁne-grained dynamic taint-tracking.
Approach Overview. Our approach consists of the fol-
lowing steps:
• Fine-grained taint analysis: The ﬁrst step in our ap-
proach is a source-to-source transformation of C pro-
grams to perform runtime taint-tracking. Taint origi-
nates at input functions, e.g., a read or recv function
used by a server to read network inputs.
Input op-
erations that return untrusted inputs are speciﬁed us-
ing marking speciﬁcations described in Section 4. In
the transformed program, each byte of memory is as-
sociated with one bit (or more) of taint information.
Logically, we can view the taint information as a bit-
array tagmap, with tagmap[a] representing the taint
information associated with the data at memory loca-
tion a. As data propagates through memory, the asso-
ciated taint information is propagated as well. Since
taint information is associated with memory locations
(rather than variables), our technique can ensure cor-
rect propagation of taint in the presence of memory
errors, aliasing, type casts, and so on.
• Policy enforcement: This step is driven by security
policies that are associated with security-critical func-
tions. There are typically a small number of such func-
tions, e.g., system calls such as open and execve, li-
brary functions such as vfprintf, functions to access
external modules such as an SQL database, and so on.
The security policy associated with each such function
checks its arguments for “unsafe” content.
Organization of the Paper. We begin with motivat-
ing attack examples in Section 2. Section 3 describes
our source-code transformation for ﬁne-grained taint-
tracking. Our policy language and sample policies are
described in Section 4. The implementation of our ap-
proach is described in Section 5, followed by the exper-
imental evaluation in Section 6. Section 7 discusses im-
plicit information ﬂows and security policy reﬁnement.
Section 8 presents related work. Finally, concluding re-
marks appear in Section 9.
2 Motivation for Taint-Enhanced Policies
In this section, we present several motivating attack ex-
amples. We conclude by pointing out the integral role
played by taint analysis as well as security policies in
detecting these attacks.
2.1 SQL and Command Injection. SQL injection is
a common vulnerability in web applications. These
server-side applications communicate with a web
browser client to collect data, which is subsequently used
to construct an SQL query that is sent to a back-end
database. Consider the statement (written in PHP) for
constructing an SQL query used to look up the price of
an item speciﬁed by the variable name.
$cmd = "SELECT price FROM products WHERE
name = ’" . $name . "’"
If the value of name is assigned from an HTML form
ﬁeld that is provided by an untrusted user, then an SQL
injection is possible. In particular, an attacker can pro-
vide the following value for name:
xyz’; UPDATE products SET price = 0 WHERE
name = ’OneCaratDiamondRing
With this value for name, cmd will take the value:
SELECT ... WHERE name =
’ xyz’; UPDATE products SET price = 0 WHERE
122
Security ’06: 15th USENIX Security Symposium
USENIX Association
name = ’OneCaratDiamondRing ’
Thus,
Note that semicolons are used to separate SQL com-
mands.
the query constructed by the pro-
gram will ﬁrst retrieve the price of some item called
xyz, and then set
the price of another item called
OneCaratDiamondRing to zero. This attack enables
the attacker to purchase this item later for no cost.
Fine-grained taint analysis will mark every character
in the query that is within the box as tainted. Now, a
policy that precludes tainted control-characters (such as
semicolons and quotes) or commands (such as UPDATE)
in the SQL query will defeat the above attack. A more
reﬁned policy is described in Section 7.2.
Command injection attacks are similar to SQL in-
jection: they involve untrusted inputs being used as to
construct commands executed by command interpreters
(e.g., bash) or the argument to execve system call.
2.2 Cross-Site Scripting (XSS). Consider an exam-
ple of a bank that provides a “ATM locator” web page
that customers can use to ﬁnd the nearest ATM machine,
based on their ZIP code. Typically, the web page con-
tains a form that submits a query to the web site, which
looks as follows:
http://www.xyzbank.com/findATM?zip=90100
If the ZIP code is invalid, the web site typically returns
an error message such as:
 ZIP code not found: 90100 
Note in the above output from the web server, the user-
supplied string 90100 is reproduced. This can be used
by an attacker to construct an XSS attack as follows. To
do this, the attacker may send an HTML email to an un-
suspecting user, which contains text such as:
To claim your reward, please click here
When the user clicks on this link, the request goes to the
bank, which returns the following page:
 ZIP code not found:
Since the above page was sent
The victim’s browser, on receiving this page, will
download and run Javascript code from the attacker’s
web site.
from
http://www.xyzbank.com, this script will have ac-
cess to sensitive information stored on the victim com-
puter that pertains to the bank, such as cookies. Thus, the
above attack will allow cookie information to be stolen.
Since cookies are often used to store authentication data,
stealing them can allow attackers to perform ﬁnancial
transactions using victim’s identity.
Fine-grained taint analysis will mark every character
in the zip code value as tainted. Now the above cross-site
scripting attack can be prevented by disallowing tainted
script tags in the web application output.
2.3 Memory Error Exploits.
There are many dif-
ferent types of memory error exploits, such as stack-
smashing, heap-overﬂows and integer overﬂows. All
of them share the same basic characteristics:
they
exploit bounds-checking errors to overwrite security-
critical data, almost always a code pointer or a data
pointer, with attacker-provided data. When ﬁne-grained
taint analysis is used, it will mark the overwritten pointer
as tainted. Now, this attack can be stopped by a policy
that prohibits dereferencing of tainted pointers.
2.4 Format String Vulnerabilities.
The printf
family of functions (which provide formatted printing in
C) take a format string as a parameter, followed by zero
or more parameters. A common misuse of these func-
tions occurs when untrusted data is provided as the for-
mat string, as in the statement “printf(s).” If s con-
tains an alphanumeric string, then this will not cause a
problem, but if an attacker inserts format directives in s,
then she can control the behavior of printf. In the worst
case, an attacker can use the “%n” format directive, which
can be used to overwrite a return address with attacker-
provided data, and execute injected binary code.
When ﬁne-grained taint analysis is used, the format
directives (such as “%n”) will be marked as tainted. The
above attack can be then prevented by a taint-enhanced