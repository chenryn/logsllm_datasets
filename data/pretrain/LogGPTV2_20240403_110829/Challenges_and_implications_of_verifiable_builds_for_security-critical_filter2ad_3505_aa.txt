title:Challenges and implications of verifiable builds for security-critical
open-source software
author:Xavier de Carn&apos;e de Carnavalet and
Mohammad Mannan
Challenges and Implications of Veriﬁable Builds for
Security-Critical Open-Source Software
Xavier de Carné de Carnavalet and Mohammad Mannan
Concordia Institute for Information Systems Engineering
Concordia University, Montreal, Canada
{x_decarn, mmannan}@ciise.concordia.ca
ABSTRACT
The majority of computer users download compiled soft-
ware and run it directly on their machine. Apparently, this
is also true for open-sourced software – most users would
not compile the available source, and implicitly trust that
the available binaries have been compiled from the pub-
lished source code (i.e., no backdoor has been inserted in
the binary). To verify that the oﬃcial binaries indeed corre-
spond to the released source, one can compile the source of
a given application, and then compare the locally generated
binaries with the developer-provided oﬃcial ones. However,
such simple veriﬁcation is non-trivial to achieve in practice,
as modern compilers, and more generally, toolchains used in
software packaging, have not been designed with veriﬁability
in mind. Rather, the output of compilers is often dependent
on parameters that can be strongly tied to the building en-
vironment. In this paper, we analyze a widely-used encryp-
tion tool, TrueCrypt, to verify its oﬃcial binary with the
corresponding source. We ﬁrst manually replicate a close
match to the oﬃcial binaries of sixteen most recent versions
of TrueCrypt for Windows up to v7.1a, and then explain
the remaining diﬀerences that can solely be attributed to
non-determinism in the build process. Our analysis provides
the missing guarantee on oﬃcial binaries that they are in-
deed backdoor-free, and makes audits on TrueCrypt’s source
code more meaningful. Also, we uncover several sources of
non-determinism in TrueCrypt’s compilation process; these
ﬁndings may help create future veriﬁable build processes.
Categories and Subject Descriptors
D.2.4 [Software Engineering]: Software/Program Veriﬁ-
cation; K.6.5 [Management of Computing and Infor-
mation Systems]: Security and Protection
Keywords
Deterministic build, Reproducible build, TrueCrypt, Tor,
Bitcoin, Debian
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from Permissions@acm.org.
ACSAC ’14 December 08 - 12 2014, New Orleans, LA, USA
Copyright 2014 ACM 978-1-4503-3005-3/14/12. . . $15.00
http://dx.doi.org/10.1145/2664243.2664288
1.
INTRODUCTION
When building a software package, the compilation pro-
cess generally results in diﬀerent binary outputs from one
compilation instance to another, especially in diﬀerent en-
vironments. This leads to various problems from deduplica-
tion to trust issues. In this paper, we are mostly concerned
about the security implications of such a build process, more
speciﬁcally for security-critical software systems, e.g., True-
Crypt, Tor, Bitcoin Core [3], and Debian. The idea of repro-
ducing strictly identical builds, i.e., being able to indepen-
dently reconstruct the same binaries as advertised by the de-
velopers using the same source ﬁles, has been suggested only
a few years ago; the oldest reference we can ﬁnd is a discus-
sion from 2007 on the Debian mailing list [46]. Several blog
articles and tickets in bug tracking systems refer to this idea
as machine-independent builds [7], deterministic builds [6,
35], bit-by-bit identical builds [28], idempotent builds [26],
veriﬁable builds [43, 11], bit-perfect [12], or byte-by-byte re-
producible builds [4, 5]. Some ad-hoc solutions have been
discussed in these references. However, we could not locate
any reference on the veriﬁability of open-sourced application
binaries in academic literature, which we believe is a crit-
ical, but mostly overlooked aspect of current open-sourced
software distribution infrastructure.
Making a build process deterministic is evidently non-
trivial, as compilers and other tools in the toolchain have not
been designed with this goal in mind. One of the most com-
mon sources of diﬀerence comes from embedded timestamps
that reﬂect the time of compilation. Two compilation in-
stances run at one second apart on the same environment
may generate slightly diﬀerent outputs. More diﬃcult ex-
amples that we have found include variations linked to the
type of the processor used for compilation. File checksums
and cryptographic hashes diﬀer as a result of such changes.
As such hashes are used when comparing ﬁles or verifying
their integrity, it then becomes irrelevant to compare hashes
of diﬀerent builds of the same source.
On the other hand, several existing security mechanisms
rely on randomized build processes to achieve automated
software diversity to restrict large-scale exploitations of soft-
ware vulnerabilities. Possibly the best example of secu-
rity through diversity is address space layout randomization
(e.g., PaX ASLR [41]), which has been implemented in most
widely-used operating systems. Software diversity has a rich
history; see e.g., Forrest et al. [14], and Franz [15] (also the
recent survey on diversity [27]). By deﬁnition, software di-
versity mechanisms are mostly adverse towards determinis-
tic builds. Other sources of diversity in binary code may in-
clude compiler optimization techniques, especially the ones
independent of source code, e.g., proﬁle-guided optimization
(PGO [31], recently adopted by Mozilla Firefox [33]).
The importance of deterministic builds has gained gen-
eral awareness after classiﬁed documents from the U.S. Na-
tional Security Agency (NSA) have been leaked by Edward
Snowden starting in June 2013. The magnitude and depth
of the intelligence programs explained in these documents
suggest, among other things, the ability of the NSA to per-
form surreptitious man-in-the-middle attacks to infect tar-
geted systems, or more generally make those systems down-
load malicious software (cf. NSA TURBINE [16] and the
Dual EC DRBG case [29]). It then becomes easy to insert
malicious behavior such as backdoors in binary ﬁles that
are downloaded by a majority of users, particularly on the
Windows platform. Man-in-the-middle attacks can be pre-
vented by the use of TLS-encrypted communications. How-
ever, such protection does not prevent a malicious or co-
erced software author from distributing malicious binaries
that do not match the available source code. Moreover, an
author can digitally sign her software package, e.g., via an
embedded X.509 certiﬁcate on Windows executables; how-
ever, this may constitute a single point of failure (cf. Flame
malware [20]). The ability to verify both the source code
and the corresponding executable against a consensus could
prevent such attacks on downloaded software.
Security-sensitive applications such as Bitcoin Core and
Tor have started using a deterministic build approach, to
enable decentralized trust through multiple independent sig-
natures from users who compiled the application and sub-
mitted signed hashes of the output. Both Bitcoin Core and
Tor are based on Gitian [17], a Ruby and bash wrapper
for Ubuntu’s python-vm-builder that was created in 2009 to
ensure the build security and integrity of Bitcoin. In 2013,
the Tor Browser Bundle [35] adapted Gitian for its purpose,
which involves the cross-compilation of the bundle for Mac
OS X and Windows from a Linux environment. However,
several aspects for a deterministic build remain unaddressed.
As a case study, we focus on TrueCrypt [44], an open-
source tool capable of on-the-ﬂy encryption.1
It creates
encrypted containers at diﬀerent levels (ﬁle, partition and
entire disk), provides a full disk encryption (FDE) feature
under Windows with pre-boot authentication, and even of-
fers plausible deniability of hidden partitions. TrueCrypt is
available as compiled binaries for Windows, Linux and Mac
OS X, along with its source code. However, as we men-
tioned, simply compiling the source code is not enough to
replicate a match with the given binaries. Hence, reviews
and audits of its source code usually discard this diﬃcult
veriﬁcation step, and may qualify TrueCrypt as secure, re-
gardless of whether the audited source corresponds to the
targeted compiled application that is distributed and used
by the majority of users. Our analysis brings this missing
connection and makes the conclusions of those audits more
meaningful. Similar to other security software, such as Tor,
TrueCrypt also appears to be a perfect target for government
surveillance (see [16]). A legitimate question then arises:
Are the binaries provided on the website diﬀerent than the
1Even though recently the TrueCrypt developers announced
the discontinuation of their work, other groups are join-
ing eﬀort to keep such an essential tool alive; see, e.g.,
http://truecrypt.ch. The TrueCrypt audit project (http://
istruecryptauditedyet.com) also remains active.
available source code and do they include hidden features
such as a backdoor? In this paper, we provide the answer
to this question and make the following contributions:
1. We recompiled sixteen versions of TrueCrypt from v5.0 to
v7.1a and analyzed the diﬀerences between our builds and
the oﬃcial ones. These versions date back from February
2008 up to the latest fully-functional version released in
February 2012.
2. We detail the major challenges we faced to replicate a
close match, and successfully explain the remaining dif-
ferences, if any. We then conclude that all of TrueCrypt’s
signed binaries directly come from their respective sources
and no backdoor has been inserted in the binaries.
3. We identify several key sources of non-determinism to be
taken into account to realize deterministic builds. Our
methodology can also help verify other applications that
do not provide a deterministic build.
4. Finally, we summarize the lessons learned from other on-
going projects that aim at achieving deterministic or re-
producible builds, and their limitations.
2. DEFINITION, THREATS AND
CHALLENGES
2.1 Deﬁnition
The general idea behind a deterministic build is to record
the environment when building the oﬃcial release of a project,
then replay the behavior of this environment in later builds
to achieve the same results. This process removes sources of
non-determinism that are out of control in a regular build-
ing process. A broader term has been coined by Debian
as reproducible build [10], which emphasizes more on repli-
cating the oﬃcial build, regardless of the process involved.
To reconcile existing terminologies, we suggest the following
deﬁnition:
A build is veriﬁable if any two instances of the build
process produce identical results. This can be achieved
through a deterministic process, in which case both builds
are byte-by-byte identical (and hence the process is machine-
independent); or by matching the builds at a higher semantic
level (e.g., by ignoring unimportant diﬀerences).
2.2 Assumptions
We assume that the compiler is trusted; cf. Thompson [42]
(see also [49] for a proposal addressing the untrusted com-
piler problem). We also trust the operating system (OS),
as it would make no sense to trust a regular program (e.g.,
a compiler in this case) running on an untrusted OS. The
hardware platform including the CPU of the build system is
also trusted (but see e.g., [25]).
We also make the following assumption regarding the mul-
tiple independently signed hashes of recompiled binaries. If
the veriﬁcation process succeeds by consensus (i.e., the ma-
jority of the signed hashes match the hash computed by the
user), we assume that malicious signatures cannot repre-
sent a majority in the list of signatures. This assumption
does not hold in situations where a powerful attacker can
compromise a signiﬁcant number of signatures (i.e., beyond
the majority threshold) with ones that correspond to mali-
cious binaries. Other veriﬁcation schemes could be consid-
ered (e.g., see Perspectives [48]). Finally, note that deter-
ministic builds are only interested in matching sources with
binaries; hence, we do not make any assumption regarding
the trustworthiness of the source, which remains under the
scope of source-code audits.
2.3 Threats considered
Our primary consideration is that users do not recompile
software packages from the source. Based on it, we consider
the following threats and explain how a deterministic build
prevents against them.
Targeted attacks on binaries. We assume that an at-
tacker can alter the binaries received by a targeted user
(e.g., a coercive government against a Tor user). Such mod-
iﬁcations will remain undetected if the integrity of the de-
livery channel or an author’s signing key is compromised.
This attack is applicable to TrueCrypt, as it could only be
downloaded through an insecure channel without a TLS-
encrypted connection. A deterministic build provides a
match between the source of an application and its com-
piled version distributed to users. The match operates at
the ﬁle level on the output side, enabling hash comparison