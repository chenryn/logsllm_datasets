checks and their intermediate states is preserved.
• Performance guarantee: the security check framework
does not cause significant performance degradation for mo-
bile graphics.
Milkomeda’s design. In Milkomeda, we present a design that
provides these guarantees. Milkomeda achieves security guaran-
tee I by restricting the communications between the app and the
GPU driver through a vetting layer, which can then perform secu-
rity checks on the OpenGL ES API calls before passing them to the
underlying GPU device driver. It does so using a novel shield space
in the app’s address space for executing the security checks. The
operating system kernel only allows the threads in the shield space
to interact with the GPU device driver. In Milkomeda, we reuse
WebGL’s security checks as the vetting layer for mobile graph-
ics. Milkomeda achieves security guarantee II by enforcing the
app’s normal threads to enter the shield at a single designated
entry point in order to issue an OpenGL ES API call. The call is
then vetted by the aforementioned security checks and, if safe, is
passed to the OpenGL ES library in the shield space. Therefore,
the app cannot jump to arbitrary code locations in the graphics li-
braries. Milkomeda achieves security guarantee III by protecting
the memory pages of the shield space from the rest of the app, even
though the shield space is within the app process address space.
All the graphics libraries and their dependencies are loaded in the
shield space and their code and data are protected from tampering
by the app. Finally, Milkomeda achieves the performance guaran-
tee since the graphics libraries execute in the same address space
as the app, hence eliminating the need for IPC, shared memory
data copy, and serialization/deserialization of API arguments. We
will show in §8.2 that Milkomeda achieves high graphics perfor-
mance for various mobile apps, although at the cost of moderately
increased CPU utilization. Figure 1c illustrates Milkomeda’s design.
5 SHIELD SPACE
Milkomeda’s shield space regulates an app’s access to the GPU
device driver and enforces the app to interact with the OpenGL
ES library at a designated entry point. Figure 4 shows a simpli-
fied view of shield’s design. We create a shield space within the
normal operating system process. A thread executing normally
(i.e., outside the shield space) cannot access the memory addresses
reserved for the shield space. It cannot execute syscalls targeted
at the GPU device driver either. To execute an OpenGL ES API, a
Figure 4: A simplified view of shield’s design highlighting
how a thread can use a shield-call to enter the shield space
to interact with the GPU device driver.
thread needs to issue a shield-call, which transfers the execution
to a single designated call gate within the shield space (allocated in
the shield memory). This thread is now trusted and can access the
shield memory and interact with the GPU device driver. It executes
the API call (after vetting it) and then returns from the shield-call.
The shield space can be thought of as a more privileged execution
mode for the process, similar to existing privilege modes such as
kernel or hypervisor.
Shield’s design has two components: protected shield space mem-
ory and effective syscall filtering. The former enables the protection
of the shield’s code and data. The latter limits the GPU driver ac-
cess permission to threads executing within the shield. We next
elaborate on these two components. We then finish the section
by providing details on the execution flow of an OpenGL ES API
call in Milkomeda and by explaining how Milkomeda satisfies the
guarantees of §4.
5.1 Protected Shield Space Memory
We isolate the shield space memory within the process address
space. This space is a range of virtual addresses in the process
address space that can only be accessed if the thread of execution
has entered the shield space through a shield-call. Other threads
within the process are not allowed to access the shield’s memory.
We implement this protected memory space in the operating
system kernel and by leveraging page table translations. That is,
we allocate two sets of page tables for the process, one to be used
for threads executing outside the shield space (i.e., untrusted page
tables) and one for threads executing within it (i.e., trusted page
tables). The address space mapped by these two sets of page tables
are mostly identical. They only differ in a fixed range of addresses,
which is mapped by a single entry (or, if needed, a few entries) in the
first-level page table. These addresses are marked as inaccessible
in the untrusted page tables. They are however accessible in the
trusted page tables. We choose to use the first-level page table entry
to map the shield memory for performance: this design minimizes
the operations needed to synchronize the trusted and untrusted
Shield spaceOperating system processThread executing outside the shieldThread executing outside the shieldshield-call Thread executingin theshieldreturnAccess to the GPU device driver & shield memoryAccess to the GPU device driver & shield memorycall gate (e.g., one for hardware-accelerated UI compositing and one for 3D
acceleration).
When in the shield, a thread can access all the process address
space since the trusted page tables map all the address space. This
allows the graphics libraries to access the memory allocated by
the app directly, e.g., for data passed to the OpenGL ES API calls,
avoiding the performance overhead of additional copies.
5.2 Effective Syscall Filtering
Milkomeda limits access to the GPU driver to only the shield space.
More specifically, it allows only the threads in the shield space to
interact with the GPU device driver. It achieves this using a set of
checks at the entry points of the device driver in the kernel. These
checks look at the state of the thread that issues the syscall for
the GPU device driver. More specifically, in the kernel, Milkomeda
marks the application’s thread as either trusted (i.e., executing in-
side the shield) or untrusted (i.e., executing outside the shield) in
the thread’s Thread Control Block (e.g., Linux’s task_struct). It
only allows a syscall targeted at the GPU device driver if the thread
issuing the syscall is marked as trusted. This requires adding only
a handful of light-weight checks as the number of these syscall
handlers in device drivers are limited (e.g., 6 handlers for the Qual-
comm Adreno GPU driver including the handlers for ioctl, mmap,
and open syscalls).
Note that we considered and even implemented another syscall
filtering mechanism as our initial prototype. In this solution, we
leveraged the Linux Seccomp syscall filtering mechanism, which
allows us to configure the filter fully from user space [53]. We
eventually settled for the aforementioned solution for two reasons:
(i) our Seccomp filter required several comparisons to be evalu-
ated for every syscall. While this overhead might not be noticeable
for graphics operations, the filter needs to be evaluated for every
syscall and hence can negatively affect the performance of apps that
make many (even non-graphics) syscalls, such as apps stressing
network or file I/O. (ii) Due to the limited functionality of the filter
(e.g., inability to parse strings, access file systems, and dereference
pointers), we had to implement a scheme that forwards all the open
and close syscalls to the shield space for evaluation. While we
managed to successfully build such a scheme, we noticed that it
adds noticeable complexity to our system. Therefore, in light of
better efficiency and lower complexity, we opted for the aforemen-
tioned solution, which only requires a few simple kernel checks
that are executed only for GPU syscalls and hence do not affect
other syscalls. Also, note that while we add the checks in the driver
entry points, they can also be added outside the driver right where
the kernel calls into the driver entry points.
5.3 OpenGL ES API Call Execution Flow
In this subsection, we describe, the execution flow of an OpenGL ES
API call in Milkomeda. Figure 6 shows this flow using pseudocode.
First, the untrusted app code makes an OpenGL ES call. Second,
this call is handled by a simple stub function in the untrusted part
of the process. This stub function simply calls the syscall to enter
the shield. Before doing so, it stores the arguments of the OpenGL
ES call as well as the API number on the CPU registers. In our
prototype based on ARMv8, up to 5 arguments are passed in CPU
Figure 5: Implementation of shield space memory using
page tables. The untrusted and trusted address spaces
(mapped by the untrusted and trusted page tables and used,
respectively, for the threads outside and within the shield
space) are almost identical except for a contiguous range of
addresses reserved for the shield space and accessible only
through the trusted page tables.
page tables as synchronization is only needed when the first-level
table is updated, which is rare. Figure 5 illustrates this concept.
All threads within the process use the untrusted page tables
by default. They can, however, request to enter the shield and
use the trusted page tables. To do this, a thread needs to make
a shield-call. We implement the shield-call with a syscall. Upon
handling this syscall, the kernel programs the CPU core executing
the thread to use the trusted page tables and resumes the execution
at a designated call gate for the shield space. The code in the shield
then handles the request and exits the shield space using another
syscall. This exit syscall programs the CPU core to use the untrusted
page tables, flushes the TLB, and returns. The thread can then
resume its execution outside the shield. Note that the shield entry
syscall does not need a TLB flush since the addresses used for
the shield space are inaccessible in the untrusted page tables. Also,
cache flush is not needed for the shield entry and exit syscalls for the
same reason (i.e., the protected address range is inaccessible outside
the shield and hence accesses to these addresses from outside the
shield always fail).
While executing in the shield, a thread uses secure stack and heap
memory. The secure stack is deployed by the kernel at shield entry
syscall and removed upon exit. Heap allocation requests by threads
within the shield are served from the reserved shield address range.
This is guaranteed by the kernel, which simply checks the state
of the requesting thread (i.e., whether it is executing in the shield
or not) before allocating the virtual addresses. Our shield’s design
can support concurrent threads executing within the shield space.
This is important as Android apps use multiple threads for graphics
Trusted virtual address spaceIdenticalIdenticalUntrusted virtual address spaceentry 1entry 2entry 3entry 4entry 5entry 6entry 7entry N-2 (Invalid)entry N-1entry NUntrusted page tables (first-level table)entry 1entry 2entry 3entry 4entry 5entry 6entry 7entry N-1entry NTrusted pagetables (first-level table)Shield mem.Inacc-essibleentry N-2 (shield)registers and the rest in memory. The OpenGL ES API numbers
are known both in the stub function and in the shield space. In
fact, existing OpenGL ES libraries already number the APIs. In case
of an API number update by future OpenGL ES libraries, only the
relevant libraries need to be updated.
Third, the shield entry syscall handler in the kernel securely
transfers the execution to the designated call gate function in the
shield space. To do so, the syscall handler saves the current state
of CPU registers (to be restored on exit from the shield), sets up a
secure stack for the thread, sets the program counter to the address
of the call gate function, marks the thread as secure (§5.2), switches
to use the secure page tables on the CPU core executing the thread,
and finally exits, which then resumes the execution in user space
in the designated call gate function.
Fourth, the call gate function identifies the called OpenGL ES
API using the API number passed on a CPU register. It performs the
security checks needed for the specific API call. If rejected, it returns
an error. If passed, it calls the actual API handler in the OpenGL ES
library. This handler then executes the API call, interacting with
the GPU device driver when needed, and gives back a return value.
The call gate function then exits the shield using another syscall,
passing the return value along.
Finally, the shield exit syscall handler in the kernel securely
transfers the execution to the original caller of the shield entry
syscall. To do so, it switches to use the untrusted page tables on the
CPU core executing the thread, flushes the TLB (§5.1), marks the
thread as untrusted, restores the previously saved CPU registers,
gives the aforementioned return value to the caller by putting it on a
CPU register, and exits. The app code then resumes its execution. To
the app, it looks as if the shield entry syscall executed the graphics
API, returning the result.
5.4 Satisfying the Required Guarantees
In this subsection, we discuss how Milkomeda achieves the four
required guarantees discussed in §4.
Security guarantee I. The first guarantee states that only the
threads within the shield be allowed to invoke the GPU device
driver. We achieve this by using our syscall filtering mechanism
(§5.2). The filter rejects syscalls targeted at the GPU device driver
when issued by threads executing from outside the shield.
Security guarantee II. The second guarantee states that the
control-flow integrity of the checks be preserved by forcing the
app code to enter the shield space only at a designated call gate.
We achieve this using our protected shield memory (§5.1). A thread
cannot normally access the memory of the shield space as this
region of memory is marked as inaccessible in the untrusted page
tables. As a result, if it does attempt to jump to any location within
the shield, it will result in a page translation fault. The only way
to access the shield is to issue a shield-call, which resumes the
execution at a predetermined call gate in the shield.
Security guarantee III. The third guarantee states that the
code and data within the shield are protected from tampering by
untrusted code. This prevents untrusted code from compromising
the integrity of the security checks in the shield since these checks
rely not only on correct code for the checks but also on several
global variables, e.g., to maintain state information about prior calls
/* Untrusted application code */
long foo(void)
{
...
/* Calls an OpenGL ES API */
return some_opengles_api(arg1, arg2, ...);
}
/* Stub function for the OpenGL ES API in an untrusted user space library */
long some_opengles_api(long arg1, long arg2, ...)
{
/* Store as many arguments on the CPU registers as possible.
* If any, store the rest of the arguments in a memory buffer
* Enter the shield with a syscall */
return syscall(NR_SHIELD_ENTER, API_NUM, arg1, arg2, ...);
}
/* Kernel implementation of shield entry syscall */
SYSCALL_DEFINE(shield_enter, long, api_num, long, arg1, long, arg2, ...)
{
/* 1. Save current CPU registers
* 2. Prepare secure stack for the thread
* 3. Update the stack pointer and the program counter
* 4. Mark the thread as secure
* 5. Switch to the secure page tables
* 6. Exit (which transfers the execution to the predefined userspace
*
location for the call gate function) */
}
/* The call gate function in the shield space */
void call_gate_func(long api_num, long arg1, long arg2, ...)
{
/* 1. Determine the requested OpenGL ES API based on api_num
* 2. Execute security checks for this API, return error if not safe */