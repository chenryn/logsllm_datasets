# 三、构建基础和分层映像
在本章中，我们将学习为生产就绪容器构建基础和分层映像。正如我们所看到的，Docker 容器为我们提供了理想的环境，我们可以在其中构建、测试、自动化和部署。这些精确环境的可复制性提供了当前可用的基于脚本的部署系统无法轻易复制的更高程度的效率和信心。然后，开发人员在本地构建、测试和调试的映像可以直接推送到登台和生产环境中，因为测试环境几乎是应用代码运行的镜像。
映像是容器的字面基础组件，定义了要部署什么样的 Linux，以及要包含什么样的默认工具并使容器内运行的代码可用。因此，映像构建是应用容器化生命周期中最关键的任务之一；正确构建您的映像对于容器化应用的有效、可重复和安全的功能至关重要。
容器映像由应用容器的一组运行时变量组成。理想情况下，容器映像应该尽可能少，只提供所需的功能，因为这有助于高效处理容器映像，显著减少从注册表上传和下载映像的时间，并且在主机上占用的空间最小。
我们的重点、意图和方向是为您的 Docker 容器构建、调试和自动化映像。
我们将在本章中讨论以下主题:
*   构建容器映像
*   从头开始构建基础映像
*   Docker 注册表中的官方基本映像
*   从 Dockerfiles 构建分层映像
*   通过测试调试映像
*   通过测试自动构建映像
# 构建容器映像
当这本书试图对 Docker 进行故障排除时，减少我们必须首先进行故障排除的错误的机会难道不是有益的吗？对我们来说幸运的是，Docker 社区(以及整个开源社区)提供了一个健康的基础(或*根*)映像注册表，这大大减少了错误并提供了更多可重复的过程。搜索 **Docker 注册表**，我们可以找到大量不断增长的容器映像的官方和自动构建状态。Docker 官方存储库([https://docs.docker.com/docker-hub/official_repos/)](https://docs.docker.com/docker-hub/official_repos/)是由 Docker Inc .支持的精心组织的映像集合-允许您验证特定映像的来源和内容的自动化存储库也存在。
本章的主要主旨和主题是基本的 Docker 基础知识；虽然对于有经验的容器用户来说，它们可能看起来微不足道，但是遵循一些最佳实践和标准化水平，除了增强我们的故障排除能力之外，还能很好地帮助我们避免故障点。
## Docker 登记处的官方图片
标准化是可重复过程的主要组成部分。因此，无论何时何地，对于不同的 Linux 发行版(例如，CentOS、Debian、Fedora、RHEL、Ubuntu 和其他发行版)或特定的用例(例如，WordPress 应用)，都应该选择在 **Docker Hub** 中提供的标准基础映像。这样的基础映像源自它们各自的 Linux 平台映像，并且是专门为在容器中使用而构建的。此外，标准化的基础映像得到了良好的维护和频繁更新，以解决安全咨询和关键的错误修复。
这些基本映像由 Docker Inc .构建、验证和支持，并且很容易通过它们的单个单词名称(例如，`centos`)来识别。此外，Docker 社区的用户成员还提供和维护预构建的映像来解决某些用例。这样的用户映像用创建它们的 Docker Hub 用户名的前缀表示，并以映像名称作为后缀(例如，`tutum/centos`)。
![Official images from the Docker Registry](img/image_03_001.jpg)
对我们非常有利的是，这些标准的基本映像仍然是现成的，并且可以在 Docker 注册表上公开获得；只需使用`docker search`和`docker pull`终端命令即可搜索和检索映像。这些将下载任何尚未位于 Docker 主机上的映像。Docker Registry 在提供官方基础映像方面变得越来越强大，人们可以直接使用这些映像，或者至少作为一个现成的起点来满足您的容器建造需求。
### 注
虽然本书假设您熟悉 Docker Hub/Registry 和 GitHub/Bitbucket，但我们将把这些内容的初步介绍作为您高效构建容器映像的第一条参考线。您可以在[https://registry.hub.docker.com/](https://registry.hub.docker.com/)访问 Docker images 的官方注册表。
![Official images from the Docker Registry](img/image_03_002.jpg)
可以从您的 Docker Hub 帐户或直接从终端搜索 Docker 注册表，如下所示:
```
$ sudo docker search centos
```
标志可以应用于您的搜索标准，以过滤星级、自动构建等映像。要从终端使用注册表中的官方`centos`映像:
*   `$ sudo docker pull centos`:这将把`centos`映像下载到你的主机上。
*   `$ sudo docker run centos`:这将首先在您的主机上查找这个本地化的映像，如果没有找到，它将把映像下载到主机上。映像的运行参数将在其 Dockerfile 中定义。
### 用户存储库
此外，正如我们已经看到的，我们不仅仅局限于官方 Docker 映像的存储库。事实上，大量的社区用户(无论是个人还是企业)已经准备好了为满足特定需求而构建的映像。例如，创建一个`ubuntu`映像，在运行于 Apache、MySql 和 PHP 上的容器内运行`joomla`内容管理系统。
这里，我们有一个用户存储库，只有这样一个映像(`namespace/repository name`):
![User repositories](img/image_03_004.jpg)
### 注
**试试看:**从 Docker 的 Docker 登记处练习一个映像`pull`和`run`。
`$ sudo docker pull cloudconsulted/joomla`
为一个容器提取我们的基础映像，`$ sudo docker run -d -p 80:80 cloudconsulted/joomla`运行我们的容器映像，并将主机的端口`80`映射到容器的端口`80`。
将您的浏览器指向`http://localhost`，您将拥有新 Joomla 网站的构建页面！
## 建立我们自己的基础映像
然而，有时我们需要创建自定义映像来适应我们自己的开发和部署环境。如果您的用例要求使用非标准的基本映像，您将需要滚动自己的映像。与任何方法一样，事先进行适当的规划是必要的。在构建一个映像之前，您应该花足够的时间来充分理解容器要处理的用例。不太需要一个不能运行预期应用的容器。其他考虑因素可能包括您在映像中包含的库或二进制文件是否可重用，等等。一旦你觉得你完成了，再次回顾你的需求和要求，过滤掉不必要的部分；我们不想无缘无故地让我们的容器膨胀。
使用 Docker 注册表，您可能会发现自动构建。这些构建是从 GitHub/Bitbucket 的存储库中提取的，因此可以分叉并根据您自己的规范进行修改。然后，您新分叉的存储库可以与您的新映像同步到 Docker 注册表，然后可以根据您的容器的需要进行提取和运行。
### 注
**试一试**:从下面的库中取出 ubuntu 最小映像，放到 Dockerfile 目录中，创建自己的映像:
`$ sudo docker pull cloudconsulted/ubuntu-dockerbase` `$ mkdir dockerbuilder` `$ cd dockerbuilder`
打开编辑器(vi/vim 或 nano)并创建新的 Dockerfile:
`$ sudo nano Dockerfile`
我们将在稍后讨论分层和自动化映像构建时深入研究如何创建好的 Dockerfiles。现在，我们只想创建我们自己的新基础映像，只是象征性地完成创建 Dockerfile 的过程和位置。为了简单起见，我们在这里只调用我们要从中构建新映像的基础映像:
```
FROM cloudconsulted/ubuntu-dockerbase:latest 
```
保存并关闭此 Dockerfile。我们现在在本地建立我们的新形象:
```
$ sudo docker build -t mynew-ubuntu
```
让我们检查以确保我们的新映像已列出:
```
$ sudo docker images
```
请注意我们的 **mynew-ubuntu** 的**映像标识**，因为我们很快就会需要它:
在 Docker Hub 用户名下创建一个新的公共/私有存储库。我在``下添加新的仓库为`cloudconsulted/mynew-ubuntu`:
![Building our own base images](img/image_03_006.jpg)
接下来，返回终端，这样我们就可以标记我们的新映像，并将其推送到我们的``下的新 Docker Hub 存储库:
```
$ sudo docker tag 1d4bf9f2c9c0 cloudconsulted/mynew-ubuntu:latest
```
确保我们的新映像在映像列表中正确标记为``:
```
$ sudo docker images
```
此外，我们会发现我们新创建的映像被标记为将其推送到我们的 Docker Hub 存储库。
现在，让我们将映像推送到我们的 Docker Hub 存储库中:
```
$ sudo docker push cloudconsulted/mynew-ubuntu
```
然后，检查集线器中的新映像:
![Building our own base images](img/image_03_008.jpg)
基本上有两种方法来构建您自己的 Docker 映像:
*   通过 bash shell 手动交互式构建层，以安装必要的应用
*   通过 Dockerfile 实现自动化，该文件使用所有必要的应用构建映像
### 使用暂存库构建映像
为 Docker 构建自己的容器映像高度依赖于您打算打包哪个 Linux 发行版。有了这样的差异，以及通过 Docker Registry 已经提供给我们的映像的流行和不断增长的注册，我们不会花太多时间在这样的手动方法上。
在这里，我们可以再次查看 Docker 注册表，为我们提供最少的映像来使用。从一个空的 TAR 文件创建了一个`scratch`存储库，只需通过`docker pull`即可使用。像以前一样，根据你的参数制作你的 Dockerfile，你就有了你的新映像，从头开始。
通过使用可用的工具，例如 **supermin** (Fedora 系统)或**Debian 系统** (Debian 系统)，可以进一步简化这个过程。例如，使用这样的工具，Ubuntu 基础映像的构建过程可以简单如下:
```
$ sudo debootstrap raring raring > /dev/null 
$ sudo tar -c raring -c . |  docker import - raring a29c15f1bf7a 
$ sudo docker run raring cat /etc/lsb-release 
DISTRIB_ID=Ubuntu 
DISTRIB_RELEASE=14.04 
DISTRIB_CODENAME=raring 
DISTRIB_DESCRIPTION="Ubuntu 14.04" 
```
## 构建分层映像
Docker 的一个核心概念和特征是分层映像。Docker 最重要的特性之一是**映像分层**和映像内容的管理。容器映像的分层方法非常有效，因为您可以引用映像中的内容，识别分层映像中的层。这在构建多个映像时非常强大，使用 Docker 注册表来推和拉映像。
![Building layered images](img/image_03_009.jpg)
[Image Copyright Docker，Inc.]
### 使用 Dockerfiles 构建分层映像
分层映像主要使用 **Dockerfile** 构建。本质上，Dockerfile 是一个脚本，它按照 Docker 守护程序执行容器的顺序，从源( *base* 或 *root* 映像中自动构建容器，一步一步，层层推进。这些是在文件中登记的连续命令(指令)和参数，它们在基础映像上执行一组被禁止的操作，每个命令组成一个新的层，以便构建一个新的层。这不仅有助于组织我们的映像构建，而且通过简化从始至终大大增强了部署。Docker 文件中的脚本可以通过多种方式呈现给 Docker 守护程序，以便为我们的容器构建新的映像。
#### Docker 文件施工
Dockerfile 的第一个命令通常是`FROM`命令。`FROM`指定要拉伸的基础映像。该基础映像可以位于私有注册表中的公共 Docker 注册表([https://www.docker.com/](https://www.docker.com/))中，甚至可以是来自主机的本地化 Docker 映像。
Docker 映像中的附加层根据 Dockerfile 中定义的指令进行填充。Dockerfiles 有非常方便的指令。Dockerfile 中定义的每个新指令在分层映像中构成一个**层**。通过`RUN`指令，我们可以指定要运行的命令，命令的结果作为映像中的附加层。
### 类型
强烈建议对映像中执行的操作进行逻辑分组，并将层数保持在最低。例如，当试图安装应用的依赖项时，可以在一个`RUN`指令中安装所有的依赖项，而不是每个依赖项使用 *N* 个指令。
我们将在后面的部分*自动化映像构建*中更仔细地检查 Dockerfiles 的自动化方面。现在，我们需要确保我们掌握了 Dockerfile 本身的概念和构造。让我们具体看一下可以使用的命令的简单列表。正如我们之前看到的，我们的 Dockerfile 应该创建在包含我们现有代码(和/或其他依赖项、脚本等)的工作目录中。
### 类型
**注意:**避免使用根[ `/` ]目录作为源存储库的根目录。`docker build`命令使用包含您的 Dockerfile 的目录作为构建上下文(包括其所有子目录)。在构建映像之前，构建上下文将被发送到 Docker 守护程序，这意味着如果您使用`/`作为源存储库，硬盘的全部内容将被发送到守护程序(并因此发送到运行守护程序的机器)。在大多数情况下，最好将每个 Dockerfile 放在一个空目录中。然后，只将构建 Dockerfile 所需的文件添加到目录中。为了提高构建的性能，可以将`.dockerignore`文件添加到上下文目录中，以正确排除文件和目录。
#### Dockerfile 命令和语法
虽然过于简单，但 Dockerfile 命令的顺序和语法非常重要。适当关注这里的细节和最佳实践不仅有助于确保成功的自动化部署，而且有助于任何故障排除工作。
让我们描述一些基本命令，并用一个工作的 Dockerfile 直接说明它们；我们之前的`joomla`映像是从 Dockerfile 构建基本分层映像的一个很好的例子。
### 注
我们的示例 joomla 基础映像位于公共 Docker 索引中，通过
`cloudconsulted/joomla`.
**出发地**
一个合适的 Dockerfile 从定义一个映像`FROM`开始，构建过程从这个映像开始。该指令指定要使用的基本映像。它应该是 Dockerfile 中的第一条指令，也是通过 Dockerfile 构建映像的必备指令。您可以指定本地映像、Docker 公共注册表中的映像或私有注册表中的映像。
**通用构造**
```
FROM  
FROM : 
FROM @ 
```
``和``可选；如果不指定，默认为`latest`。
**来自我们的 Joomla 映像的示例文档文件**
这里，我们定义了用于容器的基本映像:
```
# Image for container base 
FROM ubuntu 
```
**MAINTAINER**
该行指定所建映像的*作者*。这是 Dockerfile 中的可选指令；但是，应该用作者的姓名和/或电子邮件地址来指定该说明。`MAINTAINER`细节可以放在 Dockerfile 中您喜欢的任何地方，只要它总是发布您的`FROM`命令，因为它们不构成任何执行，而是一个定义的值(也就是说，只是一些附加信息)。
**通用构造**
```
MAINTAINER  
```
**来自我们的 Joomla 映像的示例文档文件**
在这里，我们定义这个容器和映像的作者:
```
# Add name of image author 
MAINTAINER John Wooten  
```
**ENV**
该指令在 Dockerfile 中设置环境变量。环境变量集可以在后续指令中使用。
**通用构造**
```
ENV   
```
前面的代码用``设置了一个环境变量``。
```