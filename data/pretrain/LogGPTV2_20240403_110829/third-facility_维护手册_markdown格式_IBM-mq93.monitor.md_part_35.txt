### Ensuring Retry Attributes for Channels

Ensure that the channel has specified values for the retry attributes: `SHORTRTY` and `LONGRTY`. These attributes help the channel to automatically restart in the event of transient failures, such as network errors.

### Manually Restarting a Channel

To manually start the channel again, issue the following command:
```sh
START CHANNEL(QM1.TO.QM2)
```

### Detecting User-Initiated Channel Stops

On IBM MQ for z/OS, you can detect when a user stops a channel by using command event messages. For more information, refer to the "Monitoring and Performance for IBM MQ" section (page 306).

### Handling the RETRY Status

**Optional:**
If the value of the `STATUS` field is `RETRY`, follow these steps:

1. **Identify and Correct the Error:**
   - Check the error logs to identify the specific error.
   - Take corrective action to resolve the issue.

2. **Manually Restart the Channel:**
   - Issue the following command to start the channel again:
     ```sh
     START CHANNEL(QM1.TO.QM2)
     ```
   - Alternatively, wait for the channel to connect successfully on its next retry.

### Handling the BINDING or REQUESTING Status

**Optional:**
If the value of the `STATUS` field is `BINDING` or `REQUESTING`, indicating that the channel has not yet successfully connected to the partner, follow these steps:

1. **Determine the Substate:**
   - Issue the following command at both ends of the channel to determine the substate:
     ```sh
     DIS CHSTATUS(QM1.TO.QM2) ALL
     ```
   - Note: In some cases, there might be a substate at one end of the channel only. Many substates are transitory, so issue the command multiple times to detect if the channel is stuck in a particular substate.

2. **Refer to Table 31:**
   - Use Table 31 (page 307) to determine the appropriate action based on the substate. Here are some common substates and their meanings:
     - **NAMESERVER:** The initiating MCA is waiting for a name server request to complete. Ensure the correct host name is specified in the `CONNAME` attribute and that your name servers are set up correctly.
     - **SCYEXIT SCYEXIT:** The MCAs are currently in conversation through a security exit. For more information, see "Determining whether the channel can process messages fast enough" (page 310).
     - **CHADEXIT:** The channel autodefinition exit is currently executing. For more information, see "Determining whether the channel can process messages fast enough" (page 310).
     - **RCVEXIT RCVEXIT:** Exits are called at channel startup for `MQXR_INIT`. Review the processing in this part of your exit if it takes a long time.
     - **MSGEXIT MSGEXIT:** For more information, see "Determining whether the channel can process messages fast enough" (page 310).
     - **SERIALIZE SERIALIZE:** This substate only applies to channels with a disposition of `SHARED`.
     - **NETCONNECT:** This substate is shown if there is a delay in connecting due to incorrect network configuration.
     - **SSLHANDSHAKE SSLHANDSHAKE:** A TLS handshake consists of several sends and receives. If network times are slow or CRL lookups are slow, this affects the handshake time. On IBM MQ for z/OS, this substate can also indicate a lack of `SSLTASKS`.

### Checking Channel Message Movement

**Before You Begin:**
- Issue the command `DIS CHSTATUS(QM1.TO.QM2) ALL` to check the `STATUS` field. If the value is `RUNNING`, the channel has successfully connected to the partner system.
- Ensure there are no uncommitted messages on the transmission queue, as described in "Checking that messages on the queue are available" (page 304).

**Procedure:**
1. **Review the Output Fields:**
   - `MSGS`: Number of messages sent or received during this session.
   - `BUFSSENT`: Number of transmission buffers sent.
   - `BYTSSENT`: Number of bytes sent during this session.
   - `LSTMSGDA` and `LSTMSGTI`: Date and time when the last message was sent or handled.
   - `CURMSGS`: Number of messages in the current batch.
   - `STATUS`: Current status of the channel.
   - `SUBSTATE`: Current action being performed by the channel.
   - `INDOUBT`: Whether the channel is currently in doubt.

2. **Determine Message Activity:**
   - Check if the channel has sent any messages since it started.
   - Determine when the last message was sent.

3. **Check for Incomplete Batches:**
   - If `CURMSGS` is non-zero, the channel may have an incomplete batch.
   - If `INDOUBT` is `YES`, the channel is waiting for acknowledgment from the other end.
   - Refer to Table 32 (page 309) for sender and receiver MCA substates.

### Determining Batch Completion Time

**Reasons for Slow Batch Completion:**
- **Slow Network:** Check the `NETTIME` value to determine if the network is slow.
- **Message Retry Processing:** If the receiver channel fails to put a message to a target queue, it might use message retry processing, causing the batch to slow down.

**Procedure:**
1. **Check Network Speed:**
   - Review the `NETTIME` field in the output of `DIS CHSTATUS(QM1.TO.QM2) ALL`.
   - If round trips are taking longer than expected, use network monitoring tools to investigate.

2. **Check for Exit Processing:**
   - Review the `EXITTIME` and `SUBSTATE` fields to identify if exits are adding to the processing time.
   - Common substates to review include `SCYEXIT`, `RCVEXIT`, `SENDEXIT`, `MSGEXIT`, and `MREXIT`.

3. **Check for Compression:**
   - If the channel is using compression, check the `COMPTIME` field.
   - Adjust the compression algorithm if necessary.

### Solving Cluster Channel Problems

**Procedure:**
1. **Identify Problematic Channels:**
   - Issue the command `DIS CHSTATUS(*) WHERE(XQMSGSA GT 1)` to find channels with large numbers of messages.
   - Consider issuing this command with a higher number to eliminate channels with only a few messages.

2. **Diagnose and Resolve:**
   - Use the tasks outlined in "Monitoring channels" (page 305) to diagnose and resolve issues with the identified channels.

### Monitoring Clusters

**Application Messages:**
- Monitor the `SYSTEM.CLUSTER.TRANSMIT.QUEUE` for a growing build-up of messages, which can indicate problems with one or more channels.
- Use the `DISPLAY CLUSQMGR (qmgrName) XMITQ` command to display all cluster transmit queues associated with cluster-sender channels.

**Control Messages:**
- Monitor the `SYSTEM.CLUSTER.COMMAND.QUEUE` for a backlog of messages, which can indicate churn in the cluster state.
- Allow the queue to settle between significant changes.

**Logs:**
- Actively monitor the IBM MQ error logs (and CHINIT logs on z/OS) for messages related to clustering.
- Address any warnings or errors, such as `AMQ9465` or `CSQX465I` on z/OS systems, which indicate potential issues.

### Special Considerations for Load Balancing

**Procedure:**
- Ensure consuming applications are processing messages on each instance of a load-balanced queue.
- Monitor the applications and take action to reroute messages if an application terminates or stops processing.

### Monitoring Transmission Queue Switching

**Procedure:**
1. **Switching Process:**
   - The channel opens the new transmission queue and starts getting messages.
   - A background process moves messages from the old to the new transmission queue.
   - The switch is completed when no messages remain on the old transmission queue.

2. **Monitor Switch Operations:**
   - Check the queue manager error log (or job log on z/OS) for messages indicating the progress of the switch operation.
   - Use the `DISPLAY CLUSQMGR` command to query the current transmission queue for each cluster-sender channel.
   - Run the `runswchl` command (or `CSQUTIL` on z/OS) in query mode to ascertain the switching status of one or more channels.

### Potential Issues and Solutions

- Refer to the "Potential issues when switching transmission queues" section for a list of common issues, their causes, and solutions.

### Related Concepts

- **Tuning Distributed Publish/Subscribe Networks:** Use tuning tips to improve the performance of IBM MQ distributed publish/subscribe clusters and hierarchies (page 373).
- **Balancing Producers and Consumers:** Ensure balance between message producers and consumers to prevent backlogs (page 379).