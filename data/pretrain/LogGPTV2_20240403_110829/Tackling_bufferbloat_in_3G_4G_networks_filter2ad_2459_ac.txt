gorithm. Other major operating systems also implemented
customized TCP buﬀer auto-tuning (Windows since Vista,
Mac OS since 10.5, FreeBSD since 7.0). This implies a sig-
niﬁcant role change for the TCP receive window. Although
the functionality of ﬂow control is still preserved, most of
the time the receive window as well as the receive buﬀer size
is undergoing dynamic adjustments. However, this dynamic
adjustment is unidirectional: DRS increases the receive win-
dow size only when it might potentially limit the congestion
window growth but never decreases it.
5.2 Dynamic Receive Window Adjustment
As discussed earlier, setting a static limit on the receive
window size is inadequate to adapt to the diverse network
scenarios in the mobile environment. We need to adjust
the receive window dynamically. DRS is already doing this,
but its adjustment is unidirectional. It does not solve the
buﬀerbloat problem. In fact, it makes it worse by incessantly
increasing the receive window size as the congestion window
size grows. What we need is a bidirectional adjustment al-
gorithm to rein TCP in the buﬀerbloated cellular networks.
At the same time it needs to ensure full utilization of the
available bandwidth. Hence, we build our DRWA proposal
on top of DRS and Algorithm 1 gives the details.
DRWA uses the same technique as DRS to measure RTT
on the receiver side when the TCP timestamp option [15] is
Algorithm 1 DRWA
1: Initialization:
2: tcp rmem max ← a large value;
3: RT Tmin ← ∞;
4: cwndest ← data rcvd in the ﬁrst RT Test;
5: rwnd ← 0;
6:
7: RTT and minimum RTT estimation:
8: RT Test ← the time between when a byte is ﬁrst acknowl-
edged and the receipt of data that is at least one window
beyond the sequence number that was acknowledged;
9:
10: if TCP timestamp option is available then
11: RT Test ← averaging the RTT samples obtained from
the timestamps within the last RTT;
12: end if
13:
14: if RT Test < RT Tmin then
15: RT Tmin ← RT Test;
16: end if
17:
18: DRWA:
19: if data is copied to user space then
20:
21:
22:
23:
24:
25:
26:
27: end if
if elapsed time < RT Test then
RT Tmin
RT Test
return;
end if
cwndest ← α ∗ cwndest + (1 − α) ∗ data rcvd;
rwnd ← λ ∗
Advertise rwnd as the receive window size;
∗ cwndest;
not available (Line 8). However, if the timestamp option is
available, DRWA uses it to obtain a more accurate estima-
tion of the RTT (Line 10–12). TCP timestamp can provide
multiple RTT samples within an RTT whereas the tradi-
tional DRS way provides only one sample per RTT. With
the assistance of timestamps, DRWA is able to achieve ro-
bust RTT measurement on the receiver side. We also sur-
veyed that both Windows Server and Linux support TCP
timestamp option as long as the client requests it in the
initial SYN segment. DRWA records the minimum RTT
ever seen in this connection and uses it to approximate the
335300
)
B
K
(
250
Without DRWA
With DRWA
9000
8000
7000
6000
5000
4000
3000
2000
1000
)
s
m
(
T
T
R
Without DRWA
With DRWA
3.5
3
2.5
2
1.5
1
0.5
)
s
p
b
M
(
t
u
p
h
g
u
o
r
h
T
Without DRWA
With DRWA
i
e
z
S
w
o
d
n
W
n
o
i
i
t
s
e
g
n
o
C
200
150
100
50
0
0
10
20
30
40
Time (s)
50
60
70
80
0
0
10
20
30
40
Time (s)
50
60
70
80
0
0
10
20
30
40
Time (s)
50
60
70
80
(a) Receive Window Size
(b) Round Trip Time
(c) Throughput
Figure 12: When the smart phone is moved from a good signal area to a weak signal area and then moved
back, DRWA nicely tracks the variation of the channel conditions and dynamically adjusts the receive window
size, leading to a constantly low RTT but no throughput loss.
round-trip propagation delay when no queue is built up in
the intermediate routers (Line 14–16).
After knowing the RTT, DRWA counts the amount of
data received within each RTT and smooths the estimated
congestion window by a moving average with a low-pass ﬁl-
ter (Line 24). α is set to 7/8 in our current implementation.
This smoothed value is used to determine the receive window
we advertise. In contrast to DRS who always sets rwnd to
∗ cwndest where λ is
2 ∗ cwndest, DRWA sets it to λ ∗
a tunable parameter larger than 1 (Line 25). When RT Test
is close to RT Tmin, implying the network is not congested,
rwnd will increase quickly to give the sender enough space
to probe the available bandwidth. As RT Test increases, we
gradually slow down the increment rate of rwnd to stop TCP
from overshooting. Thus, DRWA makes bidirectional ad-
justment of the advertised window and controls the RT Test
to stay around λ ∗ RT Tmin. More detailed discussion on the
impact of λ will be given in Section 5.4.
RT Tmin
RT Test
This algorithm is simple yet eﬀective. Its ideas stem from
delay-based congestion control algorithms but work better
than they do for two reasons. First, since DRWA only guides
the TCP congestion window by advertising an adaptive re-
ceive window, the bandwidth probing responsibility still lies
with the TCP congestion control algorithm at the sender.
Therefore, typical throughput degradation seen in delay-
based TCP will not appear. Second, due to some unique
characteristics of cellular networks, delay-based control can
work more eﬀectively: in wired networks, a router may han-
dle hundreds of TCP ﬂows at the same time and they may
share the same output buﬀer. That makes RTT measure-
ment noisy and delay-based congestion control unreliable.
However, in cellular networks, a base station typically has
separate buﬀer space for each user [20] and a mobile user is
unlikely to have many simultaneous TCP connections. This
makes RTT measurement a more reliable signal for network
congestion.
However, DRWA may indeed suﬀer from one same prob-
lem as delay-based congestion control:
inaccurate RT Tmin
estimation. For instance, when a user move from a location
with small RT Tmin to a location with large RT Tmin, the
ﬂow may still memorize the previous smaller RT Tmin and
incorrectly adjust the receive window, leading to potential
throughput loss. However, we believe that the session time
is typically shorter than the time scale of movement. Hence,
this problem will not occur often in practice. Further, we
may supplement our algorithm with an accelerometer mon-
itoring module so that we can reset RT Tmin in case of fast
movement. We leave this as our future work.
)
x
≤
X
P
(
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
5
Without DRWA
(avg=11.58)
With DRWA
(avg=11.61)
10
Throughput (Mbps)
15
)
x
≤
X
P
(
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
30
Without DRWA(avg=36.64)
With DRWA(avg=37.65)
40
50
RTT (ms)
60
70
Figure 13: DRWA has negligible impact in networks
that are not buﬀerbloated (e.g., WiFi).
5.3 The Adaptive Nature of DRWA
DRWA allows a TCP receiver to dynamically report a
proper receive window size to its sender in every RTT rather
than advertising a static limit. Due to its adaptive nature,
DRWA is able to track the variation of the channel condi-
tions. Figure 12 shows the evolution of the receive window
and the corresponding RTT/throughput performance when
we move an Android phone from a good signal area to a weak
signal area (from 0 second to 40 second) and then return to
the good signal area (from 40 second to 80 second). As
shown in Figure 12(a), the receive window size dynamically
adjusted by DRWA well tracks the signal strength change
incurred by movement. This leads to a steadily low RTT
while the default static setting results in an ever increasing
RTT as the signal strength decreases and the RTT blows
up in the area of the weakest signal strength (Figure 12(b)).
With regard to throughput performance, DRWA does not
cause any throughput loss and the curve naturally follows
the change in signal strength.
In networks that are not buﬀerbloated, DRWA has neg-
ligible impact on TCP behavior. That is because, when
the buﬀer size is set to the BDP of the network (the rule
of thumb for router buﬀer sizing), packet loss will happen
before DRWA starts to rein the receive window. Figure 13
veriﬁes that TCP performs similarly with or without DRWA
in WiFi networks. Hence, we can safely deploy DRWA in
smart phones even if they may connect to non-buﬀerbloated
networks.
5.4 The Impact of λ
λ is a key parameter in DRWA. It tunes the operation
region of the algorithm and reﬂects the trade-oﬀ between
336)
s
p
b
M
(
t
u
p
h
g
u
o
r
h
T
1.2
1
0.8
0.6
0.4
0.2
0
λ = 2
λ = 3
λ = 4
Verizon EVDO Sprint EVDO
6
5
4
3
2
1
0
AT&T HSPA+SKTel. HSPA+
(a) Throughput
λ = 2
λ = 3
λ = 4
600
500
400
300
200
100
)
s
m
(
T
T
R
0
Verizon EVDO Sprint EVDO
600
500
400
300
200
100
0
AT&T HSPA+SKTel. HSPA+
11
10
9
8
7
6
5
4
3
2
1
0
300
250
200
150
100
50
0
1
0.8
0.6
0.4
0.2
)
x
≤
X
P
(
Verizon LTE
0
0
2
Without DRWA (avg=3.56s)
With DRWA (avg=2.16s)
4
Web Object Fetching Time (s)
6
8
10
12
(a) Web Object Fetching Time
1
0.8
0.6
0.4
0.2
)
x
≤
X
P
(
Verizon LTE
0
0
200
400
600
Without DRWA (avg=523.39ms)
With DRWA (avg=305.06ms)
1000
1600
1200
1400
800
RTT (ms)
(b) Round Trip Time
(b) Round Trip Time
Figure 14: The impact of λ on the performance of
TCP: λ = 3 seems to give a good balance between
throughput and RTT.
Figure 15: DRWA improves the Web object fetching
time with background downloading by 39%.
throughput and delay. Note that when RT Test/RT Tmin
equals to λ, the advertised receive window will be equal to
its previous value, leading to a steady state. Therefore, λ
reﬂects the target RTT of DRWA. If we set λ to 1, that
means we want RTT to be exactly RT Tmin and no queue is
allowed to be built up. This ideal case works only if 1) the
traﬃc has constant bit rate, 2) the available bandwidth of
the wireless channel is also constant and 3) the constant bit
rate equals to the constant bandwidth. In practice, Internet
traﬃc is bursty and the channel condition varies over time.
Both necessitate the existence of some buﬀers to absorb the
temporarily excessive traﬃc and drain the queue later on
when the load becomes lighter or the channel condition be-
comes better. λ determines how aggressive we want to be in
keeping the link busy and how much delay penalty we can
tolerate. The larger λ is, the more aggressive the algorithm
is. It will guarantee the throughput of TCP to be maximized
but at the same time introduce extra delays. Figure 14 gives
the performance comparison of diﬀerent values of λ in terms
of throughput and RTT1. This test combines multiple sce-
narios ranging from small to large BDP networks, good to
weak signal, etc. Each has been repeated 400 times over
the span of 24 hours in order to ﬁnd the optimal parameter
setting. As the ﬁgure shows, λ = 3 has some throughput
advantage over λ = 2 under certain scenarios. Further in-
creasing it to 4 does not seems to improve throughput but
only incurs extra delay. Hence, we set λ to 3 in our current
implementation. A potential future work is to make this
parameter adaptive.
1We plot diﬀerent types of cellular networks separately since
they have drastically diﬀerent peak rates. Putting LTE