### System info
  * Playwright Version: v1.31.0
  * Operating System: macOS 13.2.1 Chip Apple M2
  * Browser: Chromium
  * Other info:
### Source code
**Playwright Server:**
    import * as playwright from "playwright";
    export type BrowserTypes = "chromium" | "firefox" | "webkit";
    export const launchOptions: playwright.LaunchOptions = {};
    const chromiumDefaultArgs = [
      "--disable-gpu",
      "--disable-dev-shm-usage",
      "--disable-setuid-sandbox",
      "--no-sandbox",
      "--no-zygote",
      "--single-process",
    ];
    const getLaunchOptions = (browser: BrowserTypes): playwright.LaunchOptions => {
      let newLaunchOptions = {
        ...launchOptions,
      };
      if (browser === "chromium") {
        newLaunchOptions = {
          ...newLaunchOptions,
          args: [
            ...(launchOptions.args ? launchOptions.args : []),
            ...chromiumDefaultArgs,
          ],
        };
      }
      return newLaunchOptions;
    };
    interface BrowserInstance {
      [endPoint: string]: {
        server: playwright.BrowserServer;
        timer?: any;
        browser: string;
        guid: string;
      };
    }
    class BrowserServer {
      instances: BrowserInstance = {};
      async launchServer(
        browser: BrowserTypes,
        socket: net.Socket
      ): Promise {
        const server = await playwright[browser].launchServer(
          getLaunchOptions(browser)
        );
        if (!server) {
          return null;
        }
        const endPoint = server.wsEndpoint();
        const guid = /((\w{4,12}-?)){5}/.exec(endPoint)[0];
        this.instances[endPoint] = {
          server,
          browser,
          guid,
        };
        socket.on("error", (err: any) => {
          console.log(`ERROR: ${browser} - ${endPoint}`);
          console.error(err);
        });
        socket.on("end", () => {
          console.log("Socket ended successfully");
        });
        socket.on("close", async () => {
          await this.kill(server);
        });
        const timeout =
          process.env[BROWSER_SERVER_TIMEOUT] &&
          Number.parseInt(process.env[BROWSER_SERVER_TIMEOUT]);
        if (timeout) {
          console.log(`Browser will close in ${timeout} seconds`);
        }
        return server;
      }
      getWsEndPoint(server: playwright.BrowserServer): string {
        return server.wsEndpoint();
      }
      async killAll(): Promise {
        const { instances } = this;
        for (const key in instances) {
          const info = instances[key];
          await this.kill(info.server);
        }
      }
      async kill(server: playwright.BrowserServer): Promise {
        const endPoint = server.wsEndpoint();
        //   If instance is undefined then its already in the process of terminating.
        if (!this.instances[endPoint]) {
          return;
        }
        const { browser, guid } = this.instances[endPoint];
        clearTimeout(this.instances[endPoint].timer);
        console.log(`Terminating ${browser} (${guid})...`);
        delete this.instances[endPoint];
        await server.close();
        console.log(`${browser} terminiated (${guid}).`);
      }
    }
    export default BrowserServer;
* * *
**Docker Server: some-registry/playwright-server:latest**
    FROM mcr.microsoft.com/playwright:v1.31.0-focal
    ENV NODE_ENV=production
    # Run everything after as non-privileged user.
    USER pwuser
    ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
    ARG NPM_LOGLEVEL=info
    # Create app directory
    WORKDIR /home/pwuser
    COPY package.json .
    RUN npm install --loglevel ${NPM_LOGLEVEL} --force
    COPY . .
    CMD ["node", "build/src/main.js"]
    EXPOSE 3000/tcp
    EXPOSE 5000/tcp
**Config file**
    // playwright.config.ts
    import { Page } from "playwright-core";
    import { expect, PlaywrightTestConfig, devices } from "@playwright/test";
    const config: PlaywrightTestConfig = {
      globalSetup: require.resolve("./playwright.global-setup"),
      forbidOnly: !!process.env.CI,
      timeout: 50000,
      testMatch: /.*\.spec\.ts/,
      testDir: "../../packages",
      outputDir: "./test-results",
      retries: process.env.CI ? 2 : 0,
      reporter: [["html", { open: "never" }], process.env.CI ? ["dot"] : ["list"]],
      webServer: [
        {
          command: "npm run serve",
          port: 5000,
          timeout: 50000,
          reuseExistingServer: !process.env.CI
        },
        {
          command:
            "podman run --rm -p 3000:3000 some-registry/playwright-server:latest",
          port: 3000,
          timeout: 50000,
          reuseExistingServer: !process.env.CI
        }
      ],
      use: {
        baseURL: process.env.IP_ADDRESS || "http://localhost:5000/",
        locale: "en-GB",
        trace: "on-first-retry",
        screenshot: "only-on-failure",
        connectOptions: {
          wsEndpoint: "ws://127.0.0.1:3000/"
        }
      },
      expect: {
        toHaveScreenshot: { maxDiffPixels: 10 }
      },
      projects: [
        {
           name: "chromium",
           use: {
             ...devices["Desktop Chrome"],
             viewport: { width: 1280, height: 1024 }
           }
        }
      ]
    };
    export default config;
**Test file (self-contained)**
    import { test, expect } from "@playwright/test";
    test.describe("@component", () => {
      test("should render my component correctly", async ({ page }) => {
        await page.goto(`/path/my-component/`);
        await page.waitForSelector("#test-container");
        await expect(page).toHaveScreenshot();
      });
    });
**Steps**
  * Run the test `playwright test --update-snapshots --grep @component`
**Expected**  
No error while running chromium
**Actual**
![Screenshot 2023-03-01 at 09 54 21](https://user-
images.githubusercontent.com/7147528/222090709-dcad7d9e-1c3e-4b3b-a01e-07b136f4319b.png)
I've been trying different chromium args but no luck. Before the Macbook M1
device, I was able to run the same setup with the following chromium args.
    const chromiumDefaultArgs = ["--disable-dev-shm-usage", "--no-sandbox"];
After changing to Macbook M1 device, the same setup failed and I've tried
different args (see below). I was able to run tests in Firefox successfully
but not in Chromium.
    const chromiumDefaultArgs = [
      "--disable-gpu",
      "--disable-dev-shm-usage",
      "--disable-setuid-sandbox",
      "--no-sandbox",
      "--no-zygote",
      "--single-process",
    ];