# Unleashing the Walking Dead: Understanding Cross-App Remote Infections on Mobile WebViews

## Authors
Tongxin Li<sup>1,2,∗</sup>, Xueqiang Wang<sup>2</sup>, Mingming Zha<sup>3,4</sup>, Kai Chen<sup>3,4</sup>, XiaoFeng Wang<sup>2</sup>, Luyi Xing<sup>2</sup>, Xiaolong Bai<sup>5</sup>, Nan Zhang<sup>2</sup>, Xinhui Han<sup>1</sup>

### Affiliations
1. Peking University  
2. Indiana University Bloomington  
3. SKLOIS, Institute of Information Engineering, Chinese Academy of Sciences  
4. School of Cyber Security, University of Chinese Academy of Sciences  
5. Tsinghua University

### Contact
- {litongxin, hanxinhui}@pku.edu.cn  
- {xw48, xw7, luyixing, nz3}@indiana.edu  
- {zhamingming, chenkai}@iie.ac.cn  
- {bxl12}@mails.tsinghua.edu.cn

---

## Abstract
Cross-app URL invocation is a critical feature for enhancing user experience but has been reported to cause unauthorized execution of app components. While some protections are in place, little attention has been given to the security risks associated with navigating an app’s WebView through a URL, a common requirement for cross-app interactions. Our research reveals that the current design of cross-WebView navigation opens the door to a new threat, dubbed Cross-App WebView Infection (XAWI). This threat allows a remote adversary to spread malicious web content across different apps’ WebView instances, gaining stealthy and persistent control over these apps. XAWI enables multi-app, colluding attacks, such as remote privilege escalation and highly realistic phishing attacks. We found that about 7.4% of the most popular apps, including Facebook, Twitter, and Amazon, are vulnerable to XAWI. Our study highlights the need for balancing the convenience of cross-WebView communication with the security controls required to protect this channel, and we propose the first steps toward building OS-level protection.

---

## CCS Concepts
- **Security and privacy** → Mobile platform security

*This work was conducted during the first author's visit at Indiana University Bloomington.*

---

## Keywords
- Android
- Cross-app WebView infection
- Remote deep phishing
- Remote privilege escalation
- Fuzzing tool
- OS-level mitigation

---

## 1. Introduction
Clicking on "vnd.youtube://862r3XS2YB0" in your mobile Chrome will launch the YouTube app to play the video. This example illustrates integrated service, where apps with different capabilities (e.g., video playing, social networking, payment) provide a seamless user experience. However, URL-based, web-to-app communication can also expose a mobile system to security hazards. For instance, vulnerabilities in Opera and Chrome allowed a web page to access local resources by sending an Intent scheme to private activities. Similarly, Samsung KNOX’s MDM app exposed critical services to other apps via Intent schemes.

While protections are in place to guard sensitive app components, they do not directly apply to WebView, a key UI component often triggered by URLs from different apps. For example, using a URL in Chrome to launch another app’s UI, which runs in the app’s WebView.

### Cross-App WebView Navigation
When web content inside Chrome WebView triggers a URL like `fb://webview/?url=[web.page.url]`, Chrome sends an Intent containing `web.page.url` to Facebook. Upon receiving the Intent, Facebook redirects its WebView to `web.page.url`, loading the web content. This collaboration, known as cross-app WebView navigation (XAWN), is common in mobile app designs to enable seamless transitions between different apps' UIs. It is built on the URL-based cross-app channel: if the Facebook activity is registered with an Intent filter, the WebView can be invoked directly; otherwise, a deep link (Section 2.3) is used to activate the WebView.

If abused, XAWN can become a significant security risk, allowing malicious content to propagate across apps. For example, a malicious website visited in Chrome can redirect Facebook’s WebView to the same site, and this propagation can continue to affect other apps like Twitter. This spread of malicious web content across different apps’ WebView instances can proceed like an infectious disease, enabling a remote adversary to gain partial control over multiple apps through their WebViews. We call this threat Cross-App WebView Infection (XAWI).

### Cross-App WebView Infection
The fundamental cause of XAWI is the weakness in cross-app WebView navigation, which allows web content loaded in one app’s WebView to issue navigation requests and launch another app’s WebView to visit a malicious website. Our research systematically studied this previously unknown XAWN weakness and its security implications, particularly the complex XAWI attacks that can be constructed to exploit the weakness and their consequences. In a XAWI attack, the adversary can maintain persistent and stealthy control over infected apps by running their WebViews in the background and can further discover other vulnerable apps on the same device. The remote adversary can collect a set of infected apps on a device, turning these “zombies” into the building blocks of a coordinated attack.

For example, an infected Chrome can acquire the privilege of silent app installation by first contaminating a WebView of Amazon Shopping, and then using the Shopping app to spread the infection to Amazon AppStore through its deep linking capability (Section 3.3). High-profile apps like Facebook, Chrome, Twitter, Amazon Shopping, and Amazon Appstore can all serve as building blocks for such complex, multi-step, cross-app attacks, enabling a remote adversary to acquire critical system privileges such as sending unauthorized messages, silently installing apps, and making unauthorized changes to a device (Section 3.3).

Additionally, we show that even apps without JavaScript interfaces can be turned into effective attack weapons. For example, an infected Chrome can stealthily navigate a WebView of Twitter to the attack content and switch the app to the background. When the user clicks on Twitter, they will be greeted with the infected WebView, which can display a fake Twitter login view to steal credentials. An infected app (e.g., Facebook) can also actively invoke the infected WebView of another app (e.g., Twitter) to cover its UI. This trick is useful when some apps’ UIs are less suitable for phishing than others. Through XAWI, the adversary can remotely select the right components from those infected to build a complex and highly realistic phishing attack. The video demo of our attacks can be found online [1]. Our research shows that our remote attack is much stealthier than local phishing and can easily defeat existing defenses, including the most recent UI integrity protection [4, 30].

Most alarming is that such a powerful attack can be systematically constructed. We developed a tool called ViewFinder to automatically analyze popular apps and discover exposed WebView interfaces. After running ViewFinder on 5,000 top-ranked Google Play apps, our study led to the discovery of 372 apps exposed to XAWI. Our findings provide evidence that the threat of XAWI is general, realistic, and significant.

### Mitigation and Understanding
We have reported all the apps involved in confirmed attacks to their vendors, including Facebook, Google, Amazon, Baidu, and others, who acknowledged the novelty and importance of this new type of threat. So far, we have received over $10,000 from Facebook and Twitter for the discovery of remote privilege escalation and remote deep phishing, and Amazon has deployed fixes [1]. Due to the generality of the problem and the pervasiveness of vulnerable apps, we designed and implemented a new OS-level solution to protect Android users. Our solution notifies the user of cross-app web navigation when the request has not been triggered by their activities, effectively mitigating the attacks with low overhead and limited user impact (Section 4.3). Our findings show that eliminating the threat relies on resolving the contention between the demand for smooth web-to-app interactions and the need for security control on such channels, which requires rethinking how they should be designed.

### Contributions
- **New Attacks**: We conducted the first study on the security implications of cross-WebView navigation and discovered a new type of pervasive, high-impact remote attacks on Android. These attacks leverage infected apps’ individual capabilities to acquire unexpected privileges and perform realistic phishing attacks, all beyond existing defenses.
- **New Findings**: Our research demonstrates the pervasiveness of the threat: about 7.4% of leading Android apps (> 16,907,555,000 total downloads) contain exposed WebView instances that can be exploited by a remote adversary to compose coordinated attacks.
- **New Techniques**: We developed a new technique for identifying exposed WebView interfaces in apps, which helps better understand the scope and magnitude of this new threat. We also implemented an OS-level mitigation and demonstrated its preliminary success.

---

## 2. Background

### 2.1 Activity and Task
On Android, a WebView instance is attached to an activity, which provides a UI for users to interact with the app. A typical activity is described by the `<activity>` tag in an app’s Manifest file and served by a Java class that acts as its controller. Activities can be launched in four different modes, affecting the running status of their WebView instances:

- **Standard Mode** and **SingleTop Mode**: Activities can be instantiated multiple times.
- **SingleTask Mode** and **SingleInstance Mode**: Only one instance of the activity can exist at a time.

Most activities belong to the first two modes, which opens an avenue for hiding infected WebViews, as elaborated in Section 3.1.

### Task and Back Stack
It is common for an activity to invoke other activities on the same device. When a new activity is launched, the foreground activity is brought to the background and covered by the newly started activity. The background activities stack up, with the foreground activity always on top. Android associates these activities with a task and puts them in the back stack, allowing the user to navigate back to prior activities. Prior research shows that the stack can be rearranged through special properties in the manifest, making backward navigation different from the user’s expectation. Our work shows that this task hijacking can be done completely remotely through scripts running in apps’ WebViews and through a collusion among multiple infected apps.

### 2.2 WebView Security
Most mobile apps contain WebViews, which utilize web content to enrich their functionalities. To enable seamless use of device resources, Android provides three mechanisms:

- **JavaScript Interfaces**: Exposes an app’s Java objects to the JavaScript code running inside the app’s WebView instance.
- **HTML5**: Provides built-in APIs for web content to access an app’s local resources.
- **Event Handlers**: WebView reports web events, which can be handled through callback functions in the hosting app. A special callback is `shouldOverrideUrlLoading()`, which determines whether the WebView should handle the URL or pass it to the system.

---

This optimized version of the text aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.