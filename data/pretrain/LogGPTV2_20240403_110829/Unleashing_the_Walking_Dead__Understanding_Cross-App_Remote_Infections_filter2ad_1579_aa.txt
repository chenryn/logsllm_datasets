title:Unleashing the Walking Dead: Understanding Cross-App Remote Infections
on Mobile WebViews
author:Tongxin Li and
Xueqiang Wang and
Mingming Zha and
Kai Chen and
XiaoFeng Wang and
Luyi Xing and
Xiaolong Bai and
Nan Zhang and
Xinhui Han
Unleashing the Walking Dead: Understanding Cross-App
Remote Infections on Mobile WebViews
Tongxin Li1,2,∗, Xueqiang Wang2, Mingming Zha3,4, Kai Chen3,4, XiaoFeng Wang2, Luyi Xing2,
Xiaolong Bai5, Nan Zhang2, Xinhui Han1
1Peking University
2 Indiana University Bloomington
3SKLOIS, Institute of Information Engineering, Chinese Academy of Sciences
4School of Cyber Security, University of Chinese Academy of Sciences
5Tsinghua University
{litongxin,hanxinhui}@pku.edu.cn,{xw48,xw7,luyixing,nz3}@indiana.edu
{zhamingming,chenkai}@iie.ac.cn,{bxl12}@mails.tsinghua.edu.cn
ABSTRACT
As a critical feature for enhancing user experience, cross-app URL
invocation has been reported to cause unauthorized execution of
app components. Although protection has already been put in place,
little has been done to understand the security risks of navigating
an app’s WebView through an URL, a legitimate need for displaying
the app’s UI during cross-app interactions. In our research, we found
that the current design of such cross-WebView navigation actually
opens the door to a cross-app remote infection, allowing a remote
adversary to spread malicious web content across different apps’
WebView instances and acquire stealthy and persistent control
of these apps. This new threat, dubbed Cross-App WebView Infec-
tion (XAWI), enables a series of multi-app, colluding attacks never
thought before, with significant real world impacts. Particularly,
we found that the remote adversary can collectively utilize multiple
infected apps’ individual capabilities to escalate his privileges on a
mobile device or orchestrate a highly realistic remote Phishing at-
tack (e.g., running a malicious script in Chrome to stealthily change
Twitter’s WebView to fake Twitter’s own login UI). We show that
the adversary can easily find such attack “building blocks” (popular
apps whose WebViews can be redirected by another app) through
an automatic fuzz, and discovered about 7.4% of the most popu-
lar apps subject to the XAWI attacks, including Facebook, Twitter,
Amazon and others. Our study reveals the contention between the
demand for convenient cross-WebView communication and the
need for security control on the channel, and makes the first step
toward building OS-level protection to safeguard this fast-growing
technology.
CCS CONCEPTS
• Security and privacy → Mobile platform security;
* The work was done during the first author’s visit at Indiana University Bloomington.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134021
KEYWORDS
Android; cross-app WebView infection; remote deep phishing; re-
mote privilege escalation; fuzzing tool; OS-level mitigation
1 INTRODUCTION
Clicking on “vnd.youtube://862r3XS2YB0” in your mobile Chrome,
you will see the YouTube app popping up to play the video. Here
Chrome hands over control to YouTube since the latter is better
suited for the task. This is an example of integrated service, which
leverages apps with different capabilities (video playing, social
networking, payment, etc.) to provide best possible user experiences.
This idea is rooted in the designs of Android and iOS, and can
be seen in the implementations of most apps today. Such URL
based, web-to-app communication, however, could also expose a
mobile system to security hazards: it is reported that vulnerable
implementations within Opera and Chrome allowed a web page to
access browsers’ local resources by sending an Intent scheme to
their private activities [37]; also Samsung KNOX’s MDM app was
found to expose critical services (e.g., app installation) to the Intent
scheme from other apps [27]. In response, protection is now in
place to guard sensitive app components, e.g., through closing the
channel used by the Intent scheme or limiting the access of these
components only to the app with a proper permission. A problem
is that such protection does not directly apply to WebView, a key
user-interface (UI) component that often needs to be triggered by
URLs from a different app: e.g., using the URL in Chrome to launch
another app’s UI, which runs in the app’s WebView.
Cross-app WebView navigation. More specifically, once the web
content (e.g., a script) inside the Chrome WebView triggers a URL
fb://webview/?url=[web.page.url], immediately Chrome sends to
Facebook an Intent containing web.page.url; upon receiving the In-
tent, Facebook automatically redirects its WebView to web.page.url,
loading web content from the link. Such a collaboration, which
we call cross-app WebView navigation (XAWN), is commonplace in
mobile app designs, for the purpose of enabling a seamless transi-
tion between different apps’ UIs, for example, from the YouTube
page opened in Chrome to the YouTube app. It is built on top of
the aforementioned URL-base cross-app channel: in the example, if
the Facebook activity is registered with an Intent filter containing
a scheme, the WebView can be directly invoked through an Intent-
based or custom scheme; otherwise, if the activity is set exported or
registered with a normal Intent filter, the script running in Chrome
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA829needs to trigger a deep link (Section 2.3) to directly activate the
Facebook WebView.
With its pervasive use in today’s mobile apps, once abused,
XAWN can also become a security nightmare, even bigger than
other types of URL-based invocations (e.g., triggering a service)
mentioned above, since this new channel allows malicious content
to propagate across apps. In the above example, once a malicious
website is visited by Chrome, an attack page in the browser can
redirect Facebook’s WebView also to the site, through XAWN; such
propagation can go beyond these two apps on the target device and
continue to affect other apps like Twitter, when the attack content
in the Facebook’s Webview issues a navigation request through
another scheme to redirect the Twitter’s WebView also to the attack
site. This spread of malicious web content across different apps’
WebView instances can proceed like an infectious disease, enabling
a remote adversary to gain partial control on multiple apps through
their WebViews (loading all from a malicious website). We call this
threat Cross-App WebView Infection or simply XAWI.
Cross-app WebView infection. The fundamental cause of XAWI
is the cross-app WebView navigation weakness, which allows the
web content loaded in one app’s WebView to issue navigation re-
quests (e.g, URL scheme) and launch another app’s WebView to visit
a malicious website. In our research, we systematically studied this
previously unknown XAWN weakness and its security implications,
particularly the complicated XAWI attacks that can be constructed
to exploit the weakness and their consequences. Our research shows
that in a XAWI attack, the adversary can maintain persistent and
stealthy control on infected apps by running their WebViews in the
background, and can further discover other vulnerable apps on the
same device: that is, those whose WebViews can also be redirected
through a scheme or a deep link. As a result, the remote adversary
can collect a set of infected apps on a device, and turns these “zom-
bies” into the bolts and nuts of a complicated colluding attack. Such
an attack consolidates the individual capabilities of their infected
WebView instances (e.g., rendering UI of a Phishing page, infecting
other apps through deep link) into a powerful attacking force.
As an example, an infected Chrome can acquire the privilege of
silent app installation by first contaminating a WebView of Ama-
zon Shopping, and later utilizing the Shopping app to spread the
infection to Amazon AppStore through its deep linking capability
(Section 3.3). Note that in the example, Chrome itself cannot directly
infect Amazon AppStore (i.e., invoking its WebView), since App-
Store’s WebView is not receiving any broadcasted Intent (produced
by an Intent URL), but this becomes possible through the stepping
stone (Amazon Shopping) capable of sending Intents to a specific
activity. In our research, we found that high-profile apps like Face-
book, Chrome, Twitter, Amazon Shopping, Amazon Appstore, etc.
can all serve as building blocks for such complicated, multi-step,
cross-app attacks, enabling a remote adversary to acquire critical
system privileges such as sending unauthorized messages, silently
installing apps, making unauthorized changes to a device (Sec-
tion 3.3).
Also importantly, we show that given the pervasiveness of ex-
posed WebViews across popular apps, even those without JS inter-
faces can be turned into effective attack weapons. Particularly, we
found a series of remote deep Phishing never thought before. For
example, an infected Chrome can stealthily navigate a WebView
of Twitter to the attack content and then switch the app to back-
ground; after this, whenever the user clicks on Twitter, she will be
greeted with the Twitter’s infected WebView, which can display a
fake Twitter login view to get the user’s credential. Also we found
that an infected app (e.g., Facebook) can actively invoke the infected
WebView of another app (e.g., Twitter) to cover its UI (Section 3.2).
This trick becomes useful when some apps’ UIs are less suitable
for Phishing than others: e.g., including URL bars. Through XAWI,
however, the adversary can remotely select right components from
those infected to build a complicated and highly realistic Phising
attack. The video demo of our attacks can be found online [1]. Our
research shows that our remote attack is much stealthier than local
Phishing (which requires a malicious apps to be installed on a de-
vice) and can easily defeat all existing defense, including the most
recent UI integrity protection [4, 30].
Most alarming here is that such a powerful attack can be system-
atically constructed. In our research, we developed a tool, called
ViewFinder, to automatically analyze popular apps to discover ex-
posed WebView interfaces. Our approach strategically fuzzes the
apps using the URLs automatically generated from the “clues” recov-
ered from these apps’ code and meta-data. After running ViewFinder
on 5,000 top-ranked Google Play apps, our study leads to the discov-
ery of 372 apps exposed to XAWI. Our findings provide evidence
that the threat of XAWI is general, realistic and significant.
Mitigation and understanding. We have reported all the apps
involved in confirmed attacks to their vendors, including Facebook,
Google, Amazon, Baidu and others, who all acknowledged the
novelty and importance of this new type of threats. So far, we
have received over $10,000 from Facebook and Twitter for the
discovery of remote privilege escalation and remote deep Phishing,
and also Amazon tells us that they have deployed fixes [1]. Due to
the generality of the problem and pervasiveness of vulnerable apps
in the wild, we designed and implemented a new OS-level solution
to protect Android users. Our solution notifies the user of cross-app
web navigation when the request has not been triggered by her
activities, which effectively mitigates the attacks we discovered
with a low overhead and a limited user impact (Section 4.3). On the
other hand, our findings show that the elimination of the threat
relies on resolving the contention between the strong demand for
smooth web-to-app interactions and the need for security control
on such channels, which certainly requires rethinking how they
should be designed.
Contributions The contributions of the paper are summarized as
follows:
• New attacks. We conducted the first study on the security impli-
cations of cross-WebView navigation, and discovered a new type
of pervasive, high-impact remote attacks on Android. Through
propagating malicious content across WebView, a remote adversary
can gain persistent control of multiple apps and use them as build-
ing blocks to construct a complicated, coordinated attack. These
attacks leverage infected apps’ individual capabilities to acquire
unexpected privileges and perform realistic Phishing attacks, which
are all beyond existing defense, with a significant impact on today’s
Android ecosystem.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA830• New findings. Our research further demonstrates the pervasive-
ness of the threat: about 7.4% of leading Android apps (> 16,907,555,000
total downloads) contain exposed WebView instances that can be
picked up by the remote adversary to compose the coordinated at-
tacks. The findings highlight the need for more disciplined security
designs for the web-to-app interaction channels.
• New techniques. We developed a new technique for identifying ex-
posed WebView interfaces in apps, which helps better understand
the scope and magnitude of this new threat. Further, we imple-
mented an OS-level mitigation and demonstrate its preliminary
success.
2 BACKGROUND
2.1 Activity and Task
On Android, a WebView instance is attached to an activity. Activity
is an app component that provides a UI for users to interact with
the app (e.g., phone call, photo taking, email management, etc.).
A typical activity is described by the ⟨activity⟩ tag in an app’s
Manifest file and served by a Java class that acts as its controller.
Following we briefly introduce how activities are triggered and
managed.
Activity launch mode. An activity can be launched in four differ-
ent modes [12], which affects the running status of its WebView
instance. Activities with the “standard” mode or the “singleTop”
mode can be instantiated multiple times. For example, a system
setting activity can be launched by different apps, and each instance
of the activity can have its own status. On the other hand, activities
in the “singleTask” mode or “singleInstance” mode can only have
one instance at a time (only one in a task). Google officially refers to
the first two modes as “normal launches for most activities”, while
calls the other two “specialized launches” and does not recommend
them for general use (“not appropriate for most applications”) [14].
Therefore, most activities belong to the first two modes, which
opens an avenue for hiding infected WebViews, as elaborated in
Section 3.1.
Task and back stack. It is very common for an activity to invoke
other activities on the same device. For example, an app listing
emails in an activity can start a new activity (which could come
from a different app) to show the attachment of a given mail. When
a new activity is launched, the foreground activity will be brought
to the background and covered by the newly started activity. When
more activities have been fired, the background activities begin to
stack up, with the foreground activity always on the top. To link
these activities to a series of related operations (e.g., email listing
and checking), Android associates them to a task and puts them
all in the back stack of the task, which helps the user conveniently
navigate back to the prior activity when an operation is finished
and its activity is closed, or when the Android back button (aka.,
return button) is clicked. When an app is launched, the activity on
the top of its task is displayed, which can be another app’s activity.
Prior research shows that the stack can be rearranged through
setting special properties in the manifest, to make the backward
navigation different from the user’s expectation [31]. Our work,
however, shows that this task hijacking can be done completely
remotely, through scripts running in apps’ WebViews, and through
a collusion among multiple infected apps.
2.2 WebView Security
Resource-access mechanisms. Most mobile apps contains Web-
Views, which utilize web content to enrich their functionalities [25].
To serve this purpose, seamless use of device resources (through
the apps’ privileges on the device) from the web is often desired
(e.g., getting a device’s geo-location for displaying local news). On
Android, three mechanisms are provided to enable such web-device
interactions, including JavaScript interfaces, HTML5 and event
handlers.
• JavaScript interfaces. JS interface is a mechanism that exposes an
app’s Java objects to the JavaScript code running inside the app’s
WebView instance. Through the mechanism, the app developer can
register a Java object using an API addJavascriptInterface(),
which enables the script to invoke all public methods annotated
with @JavascriptInterface of the object.
• HTML5. HTML5 provides a set of built-in APIs as interfaces for
web content to remotely access an app’s local resources, which can
be customized by the developer to control the access.
• Event handlers. WebView reports the web event it observes, which
can be handled through a set of callback functions in its hosting app.
A special callback is shouldOverrideUrlLoading(), a function