  echo "1000000" > /cgroup/cpu/RULE$i/cpu.cfs_period_us
  echo "700000" > /cgroup/cpu/RULE$i/cpu.cfs_quota_us
  echo "1000000" > /cgroup/cpu/RULE$i/cpu.rt_period_us
  echo "1000" > /cgroup/cpu/RULE$i/cpu.rt_runtime_us
  echo "4294967296" > /cgroup/memory/RULE$i/memory.limit_in_bytes
  cgexec -g cpu:RULE$i -g cpuacct:RULE$i -g memory:RULE$i -g blkio:RULE$i su - digoal -c ". ~/env.sh $i ; nohup postgres -B 1GB -c port=$i -c listen_addresses='0.0.0.0' -c synchronous_commit=on -c full_page_writes=on -c wal_buffers=128MB -c wal_writer_flush_after=0 -c bgwriter_delay=10ms -c max_connections=100 -c bgwriter_lru_maxpages=1000 -c bgwriter_lru_multiplier=10.0 -c unix_socket_directories='.' -c max_wal_size=4GB -c checkpoint_timeout=30min -c checkpoint_completion_target=0.5 -c log_checkpoints=on -c log_connections=on -c log_disconnections=on -c log_error_verbosity=verbose -c autovacuum_vacuum_scale_factor=0.002 -c autovacuum_max_workers=4 -c autovacuum_naptime=5s -c random_page_cost=1.0 -c constraint_exclusion=on -c log_destination='csvlog' -c logging_collector=on -c maintenance_work_mem=256MB -c autovacuum_work_mem=256MB -D $PGDATA -k $PGDATA >/dev/null 2>&1 &"
done
```
8\. 启动数据库集群  
因为需要设置CGROUP，需要超级用户执行  
```
$ sudo bash -c "bash"
# . /home/digoal/start.sh 100
```
9\. 停集群脚本  
为了尽快停库(checkpoint可能耗费大量IO)，可以先将资源放大，然后停库。    
```
$ vi ~/stop.sh 
for ((i=1921;i /cgroup/memory/RULE$i/memory.force_empty
  cgdelete memory:RULE$i
done
```
需要超级用户执行  
```
$ sudo bash -c "bash"
# . /home/digoal/stop.sh 100
```
### 测试客户端机器部署
假设已安装postgresql 9.6  
1\. 目录  
```
mkdir /data01/digoal
chown digoal /data01/digoal
```
2\. 环境脚本  
```
$ vi ~/env.sh
export PS1="$USER@`/bin/hostname -s`-> "
export PGPORT=$1
export PGDATA=/data02/digoal/pg_root$PGPORT
export LANG=en_US.utf8
export PGHOME=/home/digoal/pgsql9.6rc1
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH
export DATE=`date +"%Y%m%d%H%M"`
export PATH=$PGHOME/bin:$PATH:.
export MANPATH=$PGHOME/share/man:$MANPATH
export PGHOST=$PGDATA
export PGUSER=postgres
export PGDATABASE=postgres
alias rm='rm -i'
alias ll='ls -lh'
unalias vi
```
3\. 生成压测数据结构以及pgbench调用的测试脚本  
定制内容都在这里。    
```
$ vi ~/pgbench_init.sh 
for ((i=1921;i ~/test$i.sql
  echo "insert into test (id,info,crt_time) values (:id, md5(random()::text), now()) on conflict on constraint test_pkey do update set info=excluded.info, crt_time=excluded.crt_time;" >> ~/test$i.sql
done
```
不需要执行。    
4\. 压测脚本  
```
$ vi ~/pgbench.sh
mkdir -p /data01/digoal/log
for ((i=1921;i>/data01/digoal/log/$2_$i.log 2>&1 &   # 每个实例测试4个连接
done
```
不需要执行，执行样例如下    
```
cd ~
. ~/pgbench.sh 100 目标主机IP
```
5\. 压测脚本  
```
$ vi test.sh
#!/bin/bash
cd ~
. ~/pgbench_init.sh 100 $1
for ((i=1;i>0;i=1))
do
sleep 1
CNT=`ps -ewf|grep pgbench|grep -c -v grep`
if [ $CNT -eq 0 ]; then
  . ~/pgbench.sh 100 $1
  exit
fi
sleep 1
done
$ chmod 500 test.sh
```
6\. 调用压测脚本  
```
nohup ./test.sh 目标IP >/dev/null 2>&1 &
```
7\. 压测结果  
```
$ cat /data01/digoal/log/$2_$i.log
$ head -n 30000 /data01/digoal/log/$2_$i.log |tail -n 7200 > /tmp/1
$ cat /tmp/1|awk '{print $4 "," $7 "," $10}' >/tmp/2
```
输出TPS，RT，标准差。    
TPS表示数据库视角的事务处理能力（也就是单个测试脚本的每秒调用次数）。  
RT表示响应时间。  
标准差可以用来表示抖动，通常应该在1以内（越大，说明抖动越厉害）。  
8\. 主机性能结果   
```
$ sar -f ....
```
## 三、内置的测试模型tpc-b
只有有两处不一样，其他与定制测试一样。  
1\. 生成压测数据结构  
```
$ vi ~/pgbench_init.sh 
for ((i=1921;i/dev/null 2>&1 &   # 2.8 亿数据
done
```
不需要执行。    
2\. 压测脚本  
```
$ vi ~/pgbench.sh
mkdir -p /data01/digoal/log
for ((i=1921;i>/data01/data/log/$2_$i.log 2>&1 &  # 每个实例测试4个连接
done
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")