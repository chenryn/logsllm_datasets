Matcher对象
385
标注部分为新增代码：
//查找imagetag的matcher。变量·html·包含需要处理的HTMl代码
//查找ALT属性的matcher（应用于刚刚找到的IMGtag中）
Matcher mAlt = Pattern.compile(*(?ix)\\b ALT \\s* =").matcher(html);
//壹找换行将的Matcher
Matcher mLine =Pattern.compile("\\n").matcher（html);
//对HTML中的每个imgtag..
while (mImg.find())
//把查找范围局限在刚刚找到的tag中
mAlt.region(mImg.start(1),mImg.end(1));
//如果没有找到，则报错、输出找到的整个imagetag
if (! mAlt.find())(
//计算当前imagetag之前的换行将的数量
mLine.region(0,mImg.start());
int1ineNum=1；//第一行编号为1
while(mLine.find())
lineNum++：//每遇到一个换行将就加1
System.out.println("Missing ALT attribute on line "+ lineNum);
与之前一样，每次设定ALTMatcher的检索范围时，都使用imagematcher的start（1）方法
得到imagetagbody在HTML中的起始位置。相反，在设定换行符匹配的检索范围终点时，
使用start（）方法来判断整个imagetag的开始位置（也就是换行符计算的终点）。
几点提醒
记住，某些检索相关的方法并非不受检索范围的影响，而是它们在内部调用了reset方法，
把检索范围设定为默认的“全部文本”。
受检索范围影响的查找方法：
matches
lookingAt
find（）（不带参数）
会重置matcher及其检索范围的方法：
find（text）（带一个参数）
replaceAl1
replaceFirst
reset（无须多言）
另外请记住，匹配结果数据中的偏移值（也就是start和end方法返回的数值）是不受检
索范围影响的，它们只与整个目标字符串的开始位置有关。
---
## Page 412
386
第8章：Java
设定及查看检索范围的边界
与设定及查看检索范围边界的方法有3个：
Matcher region(int start, int end)
将matcher的检索范围设定在整个目标字符串的start和end之间，数值均从目标字符
事的起始位置开始计算。它同样会重置Matcher，将“匹配指针”指向检索范围的并头，
所以下一次调用find从此处开始。
如果没有重新设定，或是调用reset方法（无论是显式调用还是在其他方法内部调用
392），检索范围都不会变化。
返回值为Matcher对象本身，所以此方法可用于方法键（389）。
如果start或end超出了目标字符串的范围，或者start比end要大，会抛出IndexOutOf-
BoundsException。
int regionStart()
返回当前检索范围的起始位置在目标字符串中的偏移值，默认为0。
int regionEnd()
返回当前检索范围的结束位置在目标字符串中的偏移值，默认为目标字符串的长度。
因为region方法要求同时提供start和end，如果只希望设置其中一个，可能不太方便操作。
表8-4给出了方法。
表8-4：设定检索范围的单个边界
起始边界
结束边界
Java代码
明确设定
不修改
m.region(start, m.regionEnd());
不修改
明确设定
m.region(m.regionStart (), end);
明确设定
不修改
m.reset() .region(start, m.regionEnd());
不修改
明确设定
m.region(0,end);
超越检索范围
如果将检索范围设定为整个自标字符事中的一段，正则引擎会忽略范围之外的文本。也就
是说，检索范围的起始位置可以用匹配，而它可能并不是目标字符串的起始位置。
不过，某些情况下也可以检查检索范围之外的文本。启用transparentbounds能够让“考察
---
## Page 413
Matcher对象
387
(looking）”结构检查范围之外的文本，如果禁用anchoringbounds，则检索范围的边界不
会被视为输入数据的起始/结束位置（除非实际情况如此）。
修改这两个标志位的理由与修改默认检索范围密切相关。之前用到了检索范围的例子都不
如果程序把需要用户编辑的文本存放在CharBuffer中，用户希望执行查找-替换操作，就
应当把操作的范围限定在光标之后的文本中，所以应当把检索范围的起始位置设定为当前
光标所在的位置。如果用户的光标指向下面的位置：
Madagascar is much too large to see on foot， so you'll need a car.
要求把‘\bcar\bi替换为“automobile”。设定了检索范围之后（即将其设定为光标之后的文
本），你可能会很惊奇地发现第一次匹配就是在检索范围的开头：“Madagascar'。这是因为
默认情况下transparentbounds标志位设定为false，因此bi将检索范围起始位置设定为文
本的起始位置，而“看不到”左侧还有字符。如果将transparentbounds设定为true，bi就
能看到‘c’之前还有‘s'，因此‘b;不能匹配。
TransparentBounds
与这个标志位相关的方法有两个：
Matc:e: useTransparentBounds(boolean b)
设定transparentbounds的值。默认为false。
此方法返回Matcher本身，故可用在方法链中。
ixoenhasTransparentBounds()
如果transparent生效，则返回true。
Matcher的transparent-bounds默认为false。也就是说检索范围的边界在顺序环视、逆序环视
6)。
注6：Java1.5Update7中有个bug，我已经报告给Sun。使用Pattern.MULTILINE之后，如果
之前正好有一个行终结符，即使已经取消了anchoringbounds，：（如果修改了检索边界，
它可以看作某种查者结构）也可以匹配检索范围的起始位置。
---
## Page 414
388
第8章：Java
也就是说尽管检索范围的起始位置可能在某个单词内部，八br仍然能够匹配一它看不到之
前的字母。
下面的例子说明了transparentbounds设置为false（默认）的情况：
String regex="\\bcar\\b";//\b car\bj
    s  .= x 
Matcher m = Pattern.compile(regex).matcher(text);
m.region(7, text.1ength());
m.find();
System.out.println(*Matches starting at character "+ m.start());
结果是：也就是说尽管检索范围的起始位置可能在某个单词内部，bi仍然能够匹配-一它
看不到之前的字母。
Matches starting at character 7
单词分界符的确匹配了检索范围的起始位置，即Madagascar，尽管此处根本不是单词的
边界。如果不设定transparentbounds，单词分界符就“受骗（spoofed）”了。
如果在find之前添加这条语句：
m.useTransparentBounds (true) ;
结果就是：
Matches starting at character 27
因为边界现在是透明的，引擎可以感知到起始边界之前有个字母‘s'，所以bi在此处无
法匹配。于是结果就成了“.by"Car'or·bike.”。
同样，transparent-bounds只有在检索范围不等于“整个目标字符串”时才有意义。即使reset
方法也不会重置它。
Anchoringbounds
与anchoringbounds有关的方法有：
Matcher useAnchoringBounds(Boolean b)
设置matcher的anchoring-bounds的值，默认为true。
此方法会返回matcher对象本身，故可用于方法链中。
DooieanihasAnchoringBounds()
如果启用了anchoringbounds，则返回true，否则返回false。
默认状态下，anchoringbounds为true，也就是说行锚点（～\A$\z\z）能匹配检索范围
的边界，即检索范围不等于整个目标字符串。将它们设置为false表示行锚点只能匹配检索
---
## Page 415
Matcher对象
389
范围内，整个目标字符串中符合规定的位置。
禁用anchoringbounds的理由可能与使用transparentbounds一样，当用户的“光标不在整段
文本的起始位置时”保证语意的完备。
与transparent-bounds一样，anchoringbounds也只有在检索范围不等于“整个目标字符串”
时才有意义。即使reset方法也不会重置它。
方法链
Method Chaining
下面的程序初始化一个Matcher，并设定某些选项：
Patternp=Pattern.compile（regex);//编译regex
Matcher m = p.matcher(text);
//将regex与text建立联系，创建Matcher
m.region(5, text.length());
//将检索范围设定为从第5个字符开始
m.useAnchoringBounds (false) ;
//之类不能匹配检索范围的起始位置
m.useTransparentBounds (true) ;
//考察结构能够超越检索范围
在前面的例子中我们看到，如果创建Matcher之后不再需要regex，可以把前面两步合并起
来：
Matcher m = Pattern.compile(regex).matcher(text);
m. region (5, text.length());
：将检索范围设定为从第5个字符开始
m. useAncnoringBounds (false) ;
/：之类不能匹配检索范围的起始位置
n, useTransparent Bounds (true)
/！考察结构能够超越检索范围
不过，因为Matcher的两个方法会返回Matcher本身，可以把它们整合成一行（尽管因为排
版的原因必须列为两行）：
Matcher m = Pattern.compile(regex).matcher(text).region(5, text.length())
.useAnchoringBounds(false).useTransparentBounds(true);
不是个问题。在第399页的程序中，使用方法键可以保证格式紧凑清晰。
构建扫描程序
MethodsforBuildingaScanner
Java1.5的matcher提供了两个新方法，hitEnd和requireEnd，它们主要用来构建扫描程
序（Scanner）。扫描程序将字符流解析为记号（token）流。举例来说，编译器的扫描程序
会把‘var'*567*