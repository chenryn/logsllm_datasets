## 说在前面
平台的漏洞是比较偏基础的，很多内容都是简单傻瓜式的漏洞。但尽管如此，这个平台用来了解go语言的web流程还是可以的。
项目地址：[Vulnerability-goapp](https://github.com/Snow-HardWolf/Vulnerability-goapp)
Ps：项目中的docker环境我搭不起来，总是报错。所以是直接把源码下载到本机windows环境下自己改了源码搭的。
## 熟悉架构
### 文件结构
一些比较重要的文件夹与文件：
  * pkg 平台各功能的源码都在这个目录
  * views html模板目录
  * main.go 主程序
`/login`页面：
### 一个页面的渲染过程
主程序先从pkg中引入各功能模块
在main函数中定义路由，可以从这里通过功能定位函数
以`/login`页面为例，对应的函数是login.Login。跟踪到`pkg/login/login.go`。然后来看下这个函数的整个过程是怎么样的。
    func Login(w http.ResponseWriter, r *http.Request) { // r为请求对象，w为返回对象
        fmt.Println("method ", r.Method) // 通过r.Method获取请求的方式
        if r.Method == "GET" {
            if cookie.CheckSessionID(r) { // 通过CheckSessionID函数检查是否登录
                http.Redirect(w, r, "/top", 302) // 登录了就直接跳转到top
            } else {
                t, _ := template.ParseFiles("./views/public/login.gtpl") // 读入模板文件
                t.Execute(w, nil) // 模板解析并返回
            }
        } else if r.Method == "POST" {
            r.ParseForm() // 解析获取到的数据，GET/POST解析都要有这个语句才能使用r.Form[]
            if isZeroString(r.FormValue("mail")) && isZeroString(r.FormValue("passwd")) {
                fmt.Println("passwd", r.Form["passwd"])
                fmt.Println("mail", r.Form["mail"])
                // r.FormValue和r.Form的区别是前者只获取同名的第一个数据值，后者会返回一个slice(数组形式)
                mail := r.FormValue("mail")
                id := SearchID(mail) // 通过邮箱获取一个用户id
                if id != 0 { 
                    passwd := r.FormValue("passwd")
                    name := CheckPasswd(id, passwd) // 验证密码
                    if name != "" { // 如果登录成功
                        fmt.Println(name) 
                        t, _ := template.ParseFiles("./views/public/logined.gtpl") // 读入logined.gtpl模板
                        encodeMail := base64.StdEncoding.EncodeToString([]byte(mail))
                        fmt.Println(encodeMail)
                        cookieSID := &http.Cookie{
                            Name:  "SessionID",
                            Value: encodeMail,
                        }
                        cookieUserName := &http.Cookie{
                            Name:  "UserName",
                            Value: name,
                        }
                        StoreSID(id, encodeMail)
                        http.SetCookie(w, cookieUserName)
                        http.SetCookie(w, cookieSID)
                        // 以上部分是设置Cookies
                        p := Person{UserName: name} // 这里定义了p，传递到模板中进行解析
                        t.Execute(w, p) // 模板解析
                    } else {
                        fmt.Println(name)
                        t, _ := template.ParseFiles("./views/public/error.gtpl")
                        t.Execute(w, nil)
                    }
                } else {
                    t, _ := template.ParseFiles("./views/public/error.gtpl")
                    t.Execute(w, nil)
                }
            } else {
                fmt.Println("username or passwd are empty")
                outErrorPage(w)
            }
        } else {
            http.NotFound(w, nil)
        }
    }
如果登录成功，`p := Person{UserName: name}`
p传递到了模板中，再来看下`/views/public/logined.gtpl`模板是怎么解析的：
        Login successful!
        Login successful !!!!
        Welcome , {{.UserName}} !!
        Top Page
可以看到，这里使用了`{{.UserName}}`来读取p中的UserName的值并将其替换。最终作为返回数据返回。所以在传递到模板之后只会进行替换，不会进行转义或其他过滤操作。
## XSS
### 首页反射型XSS
漏洞点源码：main.go
    func sayYourName(w http.ResponseWriter, r *http.Request) {
        r.ParseForm()
        fmt.Println(r.Form)
        fmt.Println("path", r.URL.Path)
        fmt.Println("scheme", r.URL.Scheme)
        fmt.Println("r.Form", r.Form)
        fmt.Println("r.Form[name]", r.Form["name"])
        var Name string
        for k, v := range r.Form { // 循环获取GET与POST参数与参数值
            fmt.Println("key:", k)
            Name = strings.Join(v, ",") // 将多个定义的参数进行拼接
        }
        fmt.Println(Name)
        fmt.Fprintf(w, Name)
    }
访问主页就是调用的`sayYourName`，可以看到最后返回的是Name的内容，Name是在for循环当中，将最后一个参数赋值得到的。(如果参数有多个定义，则会使用","连接)
传递期间并没有进行过滤，所以造成xss漏洞。
POC：
### 注册处储存型XSS
注册处源码：pkg/register/register.go
    func RegisterUser(r *http.Request) bool {
        db, err := sql.Open("mysql", "root:root@tcp(127.0.0.1:3306)/vulnapp")
        if err != nil {
            log.Fatal(err)
        }
        age, err := strconv.Atoi(r.FormValue("age"))
        if err != nil {
            fmt.Println(err)
            return false
        }
        _, err = db.Exec("insert into user (name,mail,age,passwd) value(?,?,?,?)", r.FormValue("name"), r.FormValue("mail"), age, r.FormValue("passwd")) // value值都是从FormValue当中获取的
        if err != nil {
            fmt.Println(err)
            return false
        }
        return true
    }
从源码中可以知道，插入到数据库的数据是直接从表单提交的数据中获取的。期间并没有经过过滤。虽然经过了一个换位符的处理，但是对xss的payload起不到过滤的效果。
注册时使用用户名：`test` 登录后即可弹窗
### 后台Profile处多个储存型XSS
后台Profile处可以修改个人信息，Name、Address、Favorite Animal、Word三处内容都可以造成储存型XSS。
pkg/user/usermanager.go：
    func UpdateUserDetails(w http.ResponseWriter, r *http.Request) {
    // 部分源码经过省略
        _, err = db.Exec("insert into vulnapp.userdetails (uid,userimage,address,animal,word) values (?,?,?,?,?)", uid, "noimage.png", address, animal, word)
        if err != nil {
            fmt.Printf("%+v\n", err)
            http.NotFound(w, nil)
            return
        }
    }