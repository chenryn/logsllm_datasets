spin locks are primarily useful in conjunction with real-time
scheduling policies.
see notes.
.pp
the
.br pthread_spin_init ()
function allocates any resources required for the use of
the spin lock referred to by
.i lock
and initializes the lock to be in the unlocked state.
the
.i pshared
argument must have one of the following values:
.tp
.b pthread_process_private
the spin lock is to be operated on only by threads in the same process
as the thread that calls
.br pthread_spin_init ().
(attempting to share the spin lock between processes
results in undefined behavior.)
.tp
.b pthread_process_shared
the spin lock may be operated on by any thread in any process that
has access to the memory containing the lock
(i.e., the lock may be in a shared memory object that is
shared among multiple processes).
.pp
calling
.br pthread_spin_init ()
on a spin lock that has already been initialized results
in undefined behavior.
.pp
the
.br pthread_spin_destroy ()
function destroys a previously initialized spin lock,
freeing any resources that were allocated for that lock.
destroying a spin lock that has not been previously been initialized
or destroying a spin lock while another thread holds the lock
results in undefined behavior.
.pp
once a spin lock has been destroyed,
performing any operation on the lock other than
once more initializing it with
.br pthread_spin_init ()
results in undefined behavior.
.pp
the result of performing operations such as
.br pthread_spin_lock (3),
.br pthread_spin_unlock (3),
and
.br pthread_spin_destroy ()
on
.i copies
of the object referred to by
.i lock
is undefined.
.sh return value
on success, there functions return zero.
on failure, they return an error number.
in the event that
.br pthread_spin_init ()
fails, the lock is not initialized.
.sh errors
.br pthread_spin_init ()
may fail with the following errors:
.\" these errors don't occur on the glibc implementation
.tp
.b eagain
the system has insufficient resources to initialize
a new spin lock.
.tp
.b enomem
insufficient memory to initialize the spin lock.
.sh versions
these functions first appeared in glibc in version 2.2.
.sh conforming to
posix.1-2001.
.pp
support for process-shared spin locks is a posix option.
the option is supported in the glibc implementation.
.sh notes
spin locks should be employed in conjunction with
real-time scheduling policies
.rb ( sched_fifo ,
or possibly
.br sched_rr ).
use of spin locks with nondeterministic scheduling policies such as
.br sched_other
probably indicates a design mistake.
the problem is that if a thread operating under such a policy
is scheduled off the cpu while it holds a spin lock,
then other threads will waste time spinning on the lock
until the lock holder is once more rescheduled and releases the lock.
.pp
if threads create a deadlock situation while employing spin locks,
those threads will spin forever consuming cpu time.
.pp
user-space spin locks are
.i not
applicable as a general locking solution.
they are, by definition,
prone to priority inversion and unbounded spin times.
a programmer using spin locks must be exceptionally careful not
only in the code, but also in terms of system configuration,
thread placement, and priority assignment.
.\" fixme . when pthread_mutex_adaptive_np is one day document
.\" make reference to it here
.sh see also
.ad l
.nh
.br pthread_mutex_init (3),
.br pthread_mutex_lock (3),
.br pthread_spin_lock (3),
.br pthread_spin_unlock (3),
.br pthreads (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/umount.2
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.th mbsinit 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
mbsinit \- test for initial shift state
.sh synopsis
.nf
.b #include 
.pp
.bi "int mbsinit(const mbstate_t *" ps );
.fi
.sh description
character conversion between the multibyte representation and the wide
character representation uses conversion state, of type
.ir mbstate_t .
conversion of a string uses a finite-state machine; when it is interrupted
after the complete conversion of a number of characters, it may need to
save a state for processing the remaining characters.
such a conversion
state is needed for the sake of encodings such as iso-2022 and utf-7.
.pp
the initial state is the state at the beginning of conversion of a string.
there are two kinds of state: the one used by multibyte to wide character
conversion functions, such as
.br mbsrtowcs (3),
and the one used by wide
character to multibyte conversion functions, such as
.br wcsrtombs (3),
but they both fit in a
.ir mbstate_t ,
and they both have the same
representation for an initial state.
.pp
for 8-bit encodings, all states are equivalent to the initial state.
for multibyte encodings like utf-8, euc-*, big5, or sjis, the wide character
to multibyte conversion functions never produce non-initial states, but the
multibyte to wide-character conversion functions like
.br mbrtowc (3)
do
produce non-initial states when interrupted in the middle of a character.
.pp
one possible way to create an
.i mbstate_t
in initial state is to set it to zero:
.pp
.in +4n
.ex
mbstate_t state;
memset(&state, 0, sizeof(state));
.ee
.in
.pp
on linux, the following works as well, but might generate compiler warnings:
.pp
.in +4n
.ex
mbstate_t state = { 0 };
.ee
.in
.pp
the function
.br mbsinit ()
tests whether
.i *ps
corresponds to an
initial state.
.sh return value
.br mbsinit ()
returns nonzero if
.i *ps
is an initial state, or if
.i ps
is null.
otherwise, it returns 0.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br mbsinit ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
the behavior of
.br mbsinit ()
depends on the
.b lc_ctype
category of the
current locale.
.sh see also
.br mbrlen (3),
.br mbrtowc (3),
.br mbsrtowcs (3),
.br wcrtomb (3),
.br wcsrtombs (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/modf.3
.\" copyright (c) 2007 michael kerrisk 
.\" and copyright (c) 1995 michael shields .
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and author of this work.
.\" %%%license_end
.\"
.\" modified 1996-10-22 by eric s. raymond 
.\" modified 1997-05-31 by andries brouwer 
.\" modified 2003-08-24 by andries brouwer 
.\" modified 2004-08-16 by andi kleen 
.\" 2007-06-02, mtk: fairly substantial rewrites and additions, and
.\" a much improved example program.
.\"
.th mprotect 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
mprotect, pkey_mprotect \- set protection on a region of memory
.sh synopsis
.nf
.b #include 
.pp
.bi "int mprotect(void *" addr ", size_t " len ", int " prot );
.pp
.br "#define _gnu_source" "             /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "int pkey_mprotect(void *" addr ", size_t " len ", int " prot ", int " pkey ");"
.fi
.sh description
.br mprotect ()
changes the access protections for the calling process's memory pages
containing any part of the address range in the
interval [\fiaddr\fp,\ \fiaddr\fp+\filen\fp\-1].
.i addr
must be aligned to a page boundary.
.pp
if the calling process tries to access memory in a manner
that violates the protections, then the kernel generates a
.b sigsegv
signal for the process.
.pp
.i prot
is a combination of the following access flags:
.b prot_none
or a bitwise-or of the other values in the following list:
.tp
.b prot_none
the memory cannot be accessed at all.
.tp
.b prot_read
the memory can be read.
.tp
.b prot_write
the memory can be modified.
.tp
.b prot_exec
the memory can be executed.
.tp
.br prot_sem " (since linux 2.5.7)"
the memory can be used for atomic operations.
this flag was introduced as part of the
.br futex (2)
implementation (in order to guarantee the ability to perform atomic
operations required by commands such as
.br futex_wait ),
but is not currently used in on any architecture.
.tp
.br prot_sao " (since linux 2.6.26)"
.\" commit aba46c5027cb59d98052231b36efcbbde9c77a1d
.\" commit ef3d3246a0d06be622867d21af25f997aeeb105f
the memory should have strong access ordering.
this feature is specific to
the powerpc architecture
(version 2.06 of the architecture specification adds the sao cpu feature,
and it is available on power 7 or powerpc a2, for example).
.pp
additionally (since linux 2.6.0),
.i prot
can have one of the following flags set:
.tp
.\" mm/mmap.c:
.\"	vm_flags |= calc_vm_prot_bits(prot, pkey) | calc_vm_flag_bits(flags) |
.\"			mm->def_flags | vm_mayread | vm_maywrite | vm_mayexec;
.\" and calc_vm_flag_bits converts only growsdown/denywrite/locked.
.b prot_growsup
apply the protection mode up to the end of a mapping
that grows upwards.
(such mappings are created for the stack area on
architectures\(emfor example, hp-parisc\(emthat
have an upwardly growing stack.)
.\" the vma is one that was marked with vm_growsup by the kernel
.\" when the stack was created. note that (unlike vm_growsdown),
.\" there is no mmap() flag (analogous to map_growsdown) for
.\" creating a vma that is marked vm_growsup.
.tp
.b prot_growsdown
apply the protection mode down to the beginning of a mapping
that grows downward
(which should be a stack segment or a segment mapped with the
.b map_growsdown
flag set).
.pp
like
.br mprotect (),
.br pkey_mprotect ()
changes the protection on the pages specified by
.ir addr
and
.ir len .
the
.i pkey
argument specifies the protection key (see
.br pkeys (7))
to assign to the memory.
the protection key must be allocated with
.br pkey_alloc (2)
before it is passed to
.br pkey_mprotect ().
for an example of the use of this system call, see
.br pkeys (7).
.sh return value
on success,
.br mprotect ()
and
.br pkey_mprotect ()
return zero.
on error, these system calls return \-1, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eacces
the memory cannot be given the specified access.
this can happen, for example, if you
.br mmap (2)
a file to which you have read-only access, then ask
.br mprotect ()
to mark it
.br prot_write .
.tp
.b einval
\fiaddr\fp is not a valid pointer,
or not a multiple of the system page size.
.tp
.br einval
.rb ( pkey_mprotect ())
\fipkey\fp has not been allocated with
.br pkey_alloc (2)
.tp
.br einval
both
.br prot_growsup
and
.br prot_growsdown
were specified in
.ir prot .
.tp
.br einval
invalid flags specified in
.ir prot .
.tp
.br einval
(powerpc architecture)
.b prot_sao
was specified in
.ir prot ,
but sao hardware feature is not available.
.tp
.b enomem
internal kernel structures could not be allocated.
.tp
.b enomem
addresses in the range
.ri [ addr ,
.ir addr + len \-1]
are invalid for the address space of the process,
or specify one or more pages that are not mapped.
(before kernel 2.4.19, the error
.br efault
was incorrectly produced for these cases.)
.tp
.b enomem
changing the protection of a memory region would result in the total number of
mappings with distinct attributes (e.g., read versus read/write protection)
exceeding the allowed maximum.
.\" i.e., the number of vmas would exceed the 64 kb maximum
(for example, making the protection of a range
.br prot_read
in the middle of a region currently protected as
.br prot_read|prot_write
would result in three mappings:
two read/write mappings at each end and a read-only mapping in the middle.)
.sh versions
.br pkey_mprotect ()
first appeared in linux 4.9;
library support was added in glibc 2.27.
.sh conforming to
.br mprotect ():
posix.1-2001, posix.1-2008, svr4.
.\" svr4 defines an additional error
.\" code eagain. the svr4 error conditions don't map neatly onto linux's.
posix says that the behavior of
.br mprotect ()
is unspecified if it is applied to a region of memory that
was not obtained via
.br mmap (2).
.pp
.br pkey_mprotect ()
is a nonportable linux extension.
.sh notes
on linux, it is always permissible to call
.br mprotect ()
on any address in a process's address space (except for the
kernel vsyscall area).
in particular, it can be used
to change existing code mappings to be writable.
.pp
whether
.b prot_exec
has any effect different from
.b prot_read
depends on processor architecture, kernel version, and process state.
if
.b read_implies_exec
is set in the process's personality flags (see
.br personality (2)),
specifying
.b prot_read
will implicitly add
.br prot_exec .
.pp
on some hardware architectures (e.g., i386),
.b prot_write
implies
.br prot_read .
.pp
posix.1 says that an implementation may permit access
other than that specified in
.ir prot ,
but at a minimum can allow write access only if
.b prot_write
has been set, and must not allow any access if
.b prot_none
has been set.
.pp
applications should be careful when mixing use of
.br mprotect ()
and
.br pkey_mprotect ().
on x86, when
.br mprotect ()
is used with
.ir prot
set to
.b prot_exec
a pkey may be allocated and set on the memory implicitly
by the kernel, but only when the pkey was 0 previously.
.pp
on systems that do not support protection keys in hardware,
.br pkey_mprotect ()
may still be used, but
.ir pkey
must be set to \-1.
when called this way, the operation of
.br pkey_mprotect ()
is equivalent to
.br mprotect ().
.sh examples
.\" sigaction.2 refers to this example
the program below demonstrates the use of
.br mprotect ().
the program allocates four pages of memory, makes the third
of these pages read-only, and then executes a loop that walks upward
through the allocated region modifying bytes.
.pp
an example of what we might see when running the program is the
following:
.pp
.in +4n