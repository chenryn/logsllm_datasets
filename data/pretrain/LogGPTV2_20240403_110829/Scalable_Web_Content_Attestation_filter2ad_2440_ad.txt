4485.5
968.1
1062.0
1510.3
1526.8
0.50
3.1
3.0
2.7
2.7
RPS
7666.3
1131.5
1123.1
1124.2
1117.3
Dynamic
4.9
976.2
1004.2
969.2
1054.2
RPS
4507.8
1130.7
1120.8
1145.8
1147.2
5.4
1058.5
901.0
1020.7
939.8
STATIC AND DYNAMIC SYSTEM MEASUREMENTS. LATENCIES ARE MEASURED IN MILLISECONDS. THE VARIOUS FORMS OF INTEGRITY MEASUREMENT
USED ARE DISCUSSED IN SECTION II. UNCOMPRESSED AND COMPRESSED VERSIONS OF EACH SYSTEM ARE MEASURED.
TABLE I
objects for rendering. This reality presents an opportunity: a
proof for a web page can be computed over the root document
and all embedded objects at once. Thus, we can amortize the
costs of proof generation over all elements of a web page,
signiﬁcantly reducing the number of proofs requested by a
client.
Consider a naive calculation of the expected per-second
web server throughput under this discipline. The expected
throughput of a web server P can be computed in pages as:
P =
(cid:18)10 ∗
1
1
µ(cid:19) +
1

where µ is the service time for a web server serving a 10KB
static object and  is the service time for the web server serving
static (dynamic) 25KB HTML ﬁles. The model assumes that
the unit “cost” per web object on a hypothetical throughout
budget is ﬁxed and independent of other documents.
Table III shows the expected and experimentally-measured
“real” throughput of the amortized proofs. We show the pa-
rameters in terms of throughput (i.e., the inverse of the service
time) for clarity, with the expected throughput computed using
the measurements presented in Table I. Interestingly, the model
underestimates throughput considerably in most cases. This
is because the computation fails to model both bottlenecks
at
the same time, and thus misses the positive effect of
interleaving requests for content (limited by bandwidth) and
content proof acquisition (limited by computation). Practically
speaking, the costs of ﬁnding and delivering proofs from the
Spork daemon to the web server are hidden by bottlenecked
delivery of content. Thus, a web server providing integrity
measured content can achieve web object throughputs within
13% of the maximum web server.
VI. DISCUSSION
Firefox is a commonly used web browser that can be
customized through the use of extensions. Extensions have
access to browser internal state through interfaces like the
Cross Platform Component Object Model (XPCOM). Most
extensions are implemented using a combination of these XP-
COM components6 and JavaScript. Depending on the purpose
of the extension, Firefox invokes the extension in response to
events occurring, such as page loads.
6XPCOM is merely an API. Language bindings exist for a number of
languages including C++, Java, and Python
103
Fig. 11. Dialog notifying user of an invalid content proof
Our Firefox extension validates content proofs acquired
from the modiﬁed web server at page load. The extension
examines the X-Attest-URL header after the page loads. If
this header is correctly formed, the associated content proof
is requested from the web server and validated. First, the
extension validates the system attestation from the web server
and the attestation from the time service. Once the system
and time attestations are validated, the succinct content proof
is checked by reconstructing the hash tree from the provided
nodes and the downloaded content. Once the root of the tree
is computed,
is compared to the value provided in the
signature. Once everything is validated (or invalidated), the
user is notiﬁed by simple icons on the status bar of Firefox,
similar to Privacy Bird [35], or SSL.
it
The Firefox interface is modiﬁed as shown in Figure 11. In
Figure 11, we see a page that is loaded, and the user has been
notiﬁed via a dialog box that the validation of the content proof
has failed. The user is still shown the page, but is aware that
the page is invalid. This is similar to Firefox’s default operation
of allowing a user to view a page even if the server-side SSL
certiﬁcate is invalid. When a page is valid, a green check mark
is shown instead of a red X. No other prompting is used when
the page is valid.
The system requires that web server and the time server
TPMs keys and veriﬁcation measurement lists be loaded at
installation. In real deployments, it is likely that the clients will
be bootstrapped with a separate public measurement signing
key associated with the services they are measuring. This key
would be used to sign measurement lists provided periodically
by administrators and possibly provided through the web server
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:03 UTC from IEEE Xplore.  Restrictions apply. 
µ

Baseline with Static Root Page
Baseline with Dynamic Root Page
Integ. Measured Static Root (Full IMA)
Integ. Measured Static Root (Comp. PRIMA)
Integ. Measured Dynamic Root (Full IMA)
Integ. Measured Dynamic Root (Comp. PRIMA)
10769
10769
10769
10769
10769
10769
4485.5
4507.8
968.1
1526.8
1130.7
1127.2
TABLE III
P
868.4
869.2
509.8
631.5
551.6
550.7
Expected
Web Objects
9552.5
9561.7
5607.8
6946.4
6067.3
6058.1
P
867.4
745.9
494.9
724.3
494.4
650.5
Actual
Web Objects
9541.5
8204.8
5444.4
7967.4
6438.3
7155.1
PROOF AMORTIZATION PERFORMANCE – THE EXPECTED AND MEASURED PERFORMANCE OF THE AMORTIZED PROOF SERVING.
as separate URLs. Administrative systems supporting integrity
services are being actively studied by the integrity measure-
ment community, and we will make use of these systems as
they become available.
VII. CONCLUSIONS
This paper has introduced the Spork system. Spork uses the
Trusted Platform Module (TPM) to tie the web server integrity
state to the web content delivered to browsers. This allows a
client to verify that the origin of the content was functioning
properly when the received content was generated and/or
delivered. We discussed the design and implementation of the
Spork service and its browser-side Firefox validation extension.
In particular, we explored optimizations that enable us to mit-
igate the inherent bottlenecks of delivering integrity-measured
content. An in-depth empirical analysis of Spork conﬁrmed the
scalability of Spork to large bodies of clients. Spork can deliver
almost 8,000 static or 7,000 dynamic integrity-measured web
objects per-second with manageable latencies.
We are just now beginning to understand the use of integrity-
measurement in web systems. In the future we will explore
the extension of Spork to collections of web servers, e.g., web
farms, and as a mechanism to provide integrity guarantees over
services spanning administrative domains, e.g., mash-ups. The
system itself will also evolve, and we plan to apply new cryp-
tographic techniques to further reduce overheads and increase
the ﬂexibility of the system, e.g., partial signatures. Lastly, we
are in the processing of building real web-applications that
make use the Spork services and study their use in deployed
environments.
REFERENCES
[1] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk,
“Internet X.509 Public Key Infrastructure Certiﬁcate and Certiﬁcate
Revocation List (CRL) Proﬁle,” RFC 5280 (Proposed Standard), May
2008. [Online]. Available: http://www.ietf.org/rfc/rfc5280.txt
[2] D. Eastlake 3rd, J. Reagle, and D. Solo, “(Extensible Markup Language)
XML-Signature Syntax and Processing,” RFC 3275 (Draft Standard),
Mar. 2002. [Online]. Available: http://www.ietf.org/rfc/rfc3275.txt
[3] DarkAngel, “Mood-NT,” http://darkangel.antifork.org/codes.htm.
[4] C. Reis, S. D. Gribble, T. Kohno, and N. C. Weaver, “Detecting in-ﬂight
page changes with web tripwires,” Berkeley, CA, USA, pp. 31–44, 2008.
[5] J. Marchesini, S. Smith, O. Wild, and R. MacDonald, “Experimenting
with TCPA/TCG Hardware, Or: How I Learned to Stop Worrying and
Love The Bear,” Dartmouth College, Tech. Rep. Computer Science
Technical Report TR2003-476, 2003.
http://www.trustedcomputinggroup.org/developers/trusted\ platform\
module/speciﬁcations.
[6] Trusted Computing Group, “Trusted Platform Module Speciﬁcations,”
[7] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn, “Design and Implemen-
tation of a TCG-based Integrity Measurement Architecture,” San Diego,
CA, Aug. 2004.
[8] “squid : Optimising Web Delivery,” http://www.squid-cache.org.
[9] C. Lesniewski-Lass and M. F. Kaashoek, “SSL splitting: securely serving
data from untrusted caches,” Washington, DC, Aug. 2003.
[10] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and P. Khosla,
“Pioneer: Verifying Code Integrity and Enforcing Untampered Code
Execution on Legacy Systems,” Brighton, United Kingdom, Oct. 2005.
[11] G. Mohay and J. Zellers, “Kernel and Shell Based Applications Integrity
Assurance,” San Diego, CA, Dec. 1997.
[12] P. Iglio, “TrustedBox: A Kernel-Level Integrity Checker,” Washington,
DC, Dec. 1999.
[13] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh, “Copilot–a
Coprocessor-based Kernel Runtime Integrity Monitor,” San Diego, CA,
Aug. 2004.
[14] P. A. Loscocco, P. W. Wilson, J. A. Pendergrass, and C. D. McDonell,
“Linux Kernel Integrity Measurement Using Contextural Inspection,”
Alexandria, VA, Nov. 2007.
[15] E. Suh, D. Clarke, B. Gassend, M. van Dijk, and S. Devadas, “AEGIS:
Architectures for Tamper-Evident and Tamper-Resistant Processing,”
Proc. of the 17th International Conference on Supercomputing, June
2003.
[16] J. G. Dyer, M. Lindemann, R. Perez, R. Sailer, L. van Doorn, S. W.
Smith, and S. Weingart, “Building the IBM 4758 Secure Coprocessor,”
Computer, vol. 34, no. 10, pp. 57–66, 2001.
[17] T. Jaeger, R. Sailer, and U. Shankar, “PRIMA: Policy-Reduced Integrity
Measurement Architecture,” Jun. 2006.
[18] cPanel, “Components of Random JavaScript Toolkit Identiﬁed,” http://
blog.cpanel.net/?p=31, Jan. 2008.
[19] “NebuAd,” http://www.nebuad.org/.
[20] A. Fox and E. A. Brewer, “Reducing WWW latency and bandwidth
requirements by real-time distillation,” Amsterdam, The Netherlands, The
Netherlands, pp. 1445–1456, 1996.
[21] “Ad Muncher: The Ultimate Popup and Advertising Blocker,” http://
www.admuncher.com/.
[22] “Proxomitron,” http://www.proxomitron.info.
[23] Symantec.com,
“Adware.LinkMaker,”
http://www.symantec.com/
security response/writeup.jsp?docid=2005-030218-4635-99.
[24] ——, “W32.Arpiframe,” http://www.symantec.com/security response/
writeup.jsp?docid=2007-061222-0609-99.
[25] M. Noar and K. Nassim, “Certiﬁcate Revocation and Certiﬁcate Update,”
pp. 217–228, January 1998.
[26] L. St.Clair, J. Schiffman, T. Jaeger, and P. McDaniel, “Establishing and
Sustaining System Integrity via Root of Trust Installation,” Miami, FL,
pp. 19–29, December 2007.
[27] B. C. Neuman and T. Ts’o, “Kerberos: An Authentication Service for
Computer Networks,” IEEE Communications, pp. 33–38, Sep. 1994.
[28] M. T. Goodrich, “Implementation of an authenticated dictionary with
skip lists and commutative hashing,” pp. 68–82, 2001.
[29] R. Merkle, “Protocols for public key cryptosystems,” Oakland, CA, Apr.
1980.
[30] “PHP: Hypertext Preprocessor,” http://www.php.net, September 2008.
[31] M. Corporation, “Active server pages,” http://msdn.microsoft.com/en-us/
[32] A. King, “The Average Web Page,” 2008, http://www.optimizationweek.
library/aa286483.aspx.
com/reviews/average-web-page/.
[33] ——, “Average Web Page Size Triples Since 2003,” 2008, http://www.
websiteoptimization.com/speed/tweak/average-web-page/.
[34] T. Moyer, K. Butler, J. Schiffman, P. McDaniel, and T. Jaeger, “Scalable
Asynchronous Web Content Attestation,” Network and Security Research
Center, Department of Computer Science and Engineering, Pennslyvania
State University, University Park, PA, USA, Tech. Rep. NAS-TR-0095-
2008, Sep. 2008.
[35] L. Cranor, “Privacy bird,” http://www.privacybird.org/.
104
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:03 UTC from IEEE Xplore.  Restrictions apply.