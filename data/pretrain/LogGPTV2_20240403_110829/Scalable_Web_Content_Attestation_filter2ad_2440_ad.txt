### Table I: System Measurements
| Static Root Page | Dynamic Root Page |
|------------------|--------------------|
| 4485.5           | 4507.8             |
| 968.1            | 1526.8             |
| 1062.0           | 1130.7             |
| 1510.3           | 1127.2             |
| 1526.8           | 1124.2             |
| 0.50             | 3.1                |
| 3.1              | 3.0                |
| 3.0              | 2.7                |
| 2.7              | 2.7                |

**RPS (Requests Per Second)**
- **Static Root Page:** 7666.3
- **Dynamic Root Page:** 4507.8

**Dynamic Latencies (in milliseconds)**
- **Static Root Page:** 4.9, 976.2, 1004.2, 969.2, 1054.2
- **Dynamic Root Page:** 5.4, 1058.5, 901.0, 1020.7, 939.8

### Static and Dynamic System Measurements
Latencies are measured in milliseconds. The various forms of integrity measurement used are discussed in Section II. Both uncompressed and compressed versions of each system are measured.

### Throughput Calculation
Consider a naive calculation of the expected per-second web server throughput under this discipline. The expected throughput \( P \) of a web server can be computed in pages as:
\[ P = \left( \frac{10}{\mu} \right) + \frac{1}{\lambda} \]
where:
- \(\mu\) is the service time for a web server serving a 10KB static object.
- \(\lambda\) is the service time for the web server serving static (dynamic) 25KB HTML files.

The model assumes that the unit "cost" per web object on a hypothetical throughput budget is fixed and independent of other documents.

### Table III: Proof Amortization Performance
| Configuration | Expected Throughput (P) | Actual Throughput (P) | Expected Web Objects | Actual Web Objects |
|---------------|-------------------------|-----------------------|----------------------|--------------------|
| Baseline with Static Root Page | 868.4 | 867.4 | 9552.5 | 9541.5 |
| Baseline with Dynamic Root Page | 869.2 | 745.9 | 9561.7 | 8204.8 |
| Integ. Measured Static Root (Full IMA) | 509.8 | 494.9 | 5607.8 | 5444.4 |
| Integ. Measured Static Root (Comp. PRIMA) | 631.5 | 724.3 | 6946.4 | 7967.4 |
| Integ. Measured Dynamic Root (Full IMA) | 551.6 | 494.4 | 6067.3 | 6438.3 |
| Integ. Measured Dynamic Root (Comp. PRIMA) | 550.7 | 650.5 | 6058.1 | 7155.1 |

### Discussion
Firefox is a commonly used web browser that can be customized through extensions. Extensions access browser internal state via interfaces like XPCOM. Most extensions are implemented using a combination of XPCOM components and JavaScript. Firefox invokes extensions in response to events such as page loads.

#### Firefox Extension for Content Validation
Our Firefox extension validates content proofs acquired from the modified web server at page load. It examines the `X-Attest-URL` header after the page loads. If the header is correctly formed, the associated content proof is requested and validated. The extension first validates the system attestation from the web server and the attestation from the time service. Once these are validated, the succinct content proof is checked by reconstructing the hash tree from the provided nodes and the downloaded content. The root of the tree is then compared to the value provided in the signature. The user is notified via simple icons on the status bar, similar to Privacy Bird or SSL.

### Interface Modification
Figure 11 shows a page that has been loaded, and the user has been notified via a dialog box that the validation of the content proof has failed. The user is still shown the page but is aware that it is invalid. When a page is valid, a green check mark is shown instead of a red X. No other prompting is used when the page is valid.

### System Requirements
The system requires that web server and time server TPM keys and verification measurement lists be loaded at installation. In real deployments, clients will likely be bootstrapped with a separate public measurement signing key associated with the services they are measuring. This key would be used to sign measurement lists provided periodically by administrators and possibly through the web server.

### Conclusions
This paper introduces the Spork system, which uses the Trusted Platform Module (TPM) to tie the web server integrity state to the web content delivered to browsers. This allows clients to verify that the origin of the content was functioning properly when the content was generated and/or delivered. We discuss the design and implementation of the Spork service and its Firefox validation extension. Optimizations mitigate the inherent bottlenecks of delivering integrity-measured content. An empirical analysis confirms the scalability of Spork to large bodies of clients, delivering almost 8,000 static or 7,000 dynamic integrity-measured web objects per second with manageable latencies.

Future work includes extending Spork to collections of web servers and providing integrity guarantees over services spanning administrative domains. New cryptographic techniques will be applied to further reduce overheads and increase system flexibility, such as partial signatures. Real web applications using Spork services are being developed and studied in deployed environments.

### References
[References listed as in the original text]