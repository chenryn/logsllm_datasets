### Optimized Text

#### A. Computation and Value Assignment
We begin by summarizing the APIs `getResources` and `getString` (lines 37-38). Next, we compute the value of `v0` (lines 17-21), followed by `v1`, `this.val$conStr`, and finally, the value of `v0` at line 31.

#### B. Vulnerability Identification
After identifying the keys using LeakScope, the next step is to detect data leakage vulnerabilities in the cloud services. The detection process is specific to each cloud service, and we have designed the following algorithms to identify key misuses and permission misconfigurations for Azure, AWS, and Firebase.

**1. Detecting Key Misuses in Azure (Storage and Notification Hub)**
As discussed in §III-A, if root keys or full access keys are present in mobile apps, an attacker can easily use these keys to leak data. Therefore, no further probing of the back-end is required. Identifying root keys or full access keys in a mobile app indicates that the cloud service is vulnerable.

**2. Detecting Key Misuses in AWS**
An AWS root key provides full access to the corresponding AWS account, allowing an adversary to access all resources under that account if a root key is identified in an app. We found that a root key has the permission to retrieve some AWS instance information via the REST API: 
```
https://ec2.amazonaws.com/?Action=DescribeInstances&InstanceId.1=X
```
where `X` is the ID of the target instance. In contrast, an app key does not have this permission. To detect key misuses in AWS, we set `X` to a non-existent ID. When sending a request with the identified key, we receive the error message "InvalidInstanceID" if the key is a root key, or "UnauthorizedOperation" if the key is an app key.

**3. Detecting Permission Misconfigurations in Firebase**
There are two typical permission misconfiguration rules:
- **No Authentication Check**: The database is entirely open to anyone.
- **No Permission Check**: Only checks whether the user is authenticated.

We use the following algorithms to detect these misconfigurations:

- **Detecting "Open" Database**: If a developer mistakenly sets a read policy to `".read": "true"`, anyone can read the database. Firebase provides a REST API to access data from the database in a given "path". By setting the "path" to "root", one can read the entire database. However, we do not need to read the entire database, as Firebase supports queries with the `indexon` field. Setting this field to a non-existent value when attempting to read the "root" path will not leak any data, but we can still confirm the data leak based on the returned error message.

- **Detecting No Permission Check**: When a data record read policy is `".read": "auth != null"`, we must use an authenticated user to perform the `indexon`-based leakage testing. Registering a legitimate user in each corresponding cloud service can be a significant engineering challenge. Fortunately, Firebase provides several cloud APIs for user registration, such as email/password, phone number, Google/Facebook SSO, etc. We can directly invoke these Firebase APIs to register legitimate users if the tested app has used them. After authenticating the registered user, we perform the `indexon`-based test.

**4. Detecting Permission Misconfigurations in AWS**
AWS keys are used to access specified resources under particular access control policies. We focus on detecting permission misconfigurations in S3 Storage, as several recent high-profile data leaks (e.g., [33]) originated from S3. To perform our test, we collect both AWS keys and S3 Storage names. We then use an AWS API `HEAD Bucket` to verify whether a key has permission to access the storage. If so, a data leak is detected.

#### C. Implementation
We have implemented LeakScope atop `dexlib2` [6] and `soot` [16]. Specifically, for Cloud API Identification, we leverage `dexlib2`, a lightweight APK static analysis framework that allows easy parsing of dex files to build function signatures. Our String Value Analysis is built atop `Soot`, a powerful framework for analyzing Java bytecode with useful features like data flow analysis. The Vulnerability Identification component is straightforward; we wrote a Python script to send requests and parse responses. The source code of LeakScope is available at: https://github.com/OSUSecLab/LeakScope.

#### D. Evaluation
In this section, we present our evaluation results. We first describe our experiment setup, including how we collected the mobile apps in §VI-A, detail our results in §VI-B, and provide an analysis of the identified vulnerabilities and false positives in §VI-C.

**1. Experiment Setup**
- **Collecting the Mobile Apps**: We focused on Android apps published in Google Play. Using a Python script built on the `scrapy` [14] framework, we crawled for app package names. After two weeks, we retrieved about 1.9 million app names in May 2017. We then crawled the entire package contents of 1,609,983 free Android apps within two months. These 1.6 million apps consumed 15.42 TB of space on our hard drive.
- **Environment Setup**: Our experiments were conducted on seven workstations, each equipped with an Intel Xeon E5-2640 CPU with 24 cores and 96 GB memory, running Ubuntu 16.04. Since LeakScope is primarily a static analysis tool, only the Vulnerability Identification component requires dynamic analysis to communicate with cloud servers. All experimental data and intermediate results are stored in a Network Attached Storage with 34.90 TB of hard drive space.

**2. Experiment Results**
LeakScope spent 6,894.89 CPU computation hours analyzing 1,609,983 apps, consuming 2.56 TB of storage for intermediate results. It detected 15,098 unique mobile apps with 17,299 vulnerabilities, indicating that their cloud servers are subject to data leakage attacks. We present detailed results based on the performance of each component of LeakScope.

- **Cloud API Identification**: We evaluated our identification with 1,609,983 apps. Our approach is obfuscation-resilient and works for non-obfuscated apps as well. In total, our Cloud API Identification generated 39,617,809,277 function signatures and identified 107,081 mobile apps that used some of the 32 cloud APIs of interest. Among these, 21,724 (20.29%) are obfuscated. We separated our results into non-obfuscated (85,357 apps) and obfuscated apps to understand the protection provided by obfuscation.

- **String Value Analysis**: Among the 107,081 apps, our String Value Analysis statically computed 631,551 strings of the parameters of interest. Detailed performance results are reported in Table V. We report the string parameters of interest, the corresponding APIs, and the number of resolved strings for both non-obfuscated and obfuscated apps. 

Our investigation revealed two reasons for unresolved parameter strings:
1. Many unresolved values were retrieved from the Internet, particularly common for Firebase.
2. Some values were dynamically generated or encrypted, making static resolution impossible.

This comprehensive evaluation demonstrates the effectiveness of LeakScope in detecting and mitigating data leakage vulnerabilities in cloud services.