anceagainatthispoint,itwouldget$(butthedecisiontowithdrawthemoney
isalreadytaken,andthisoperationcausesanoverdraft).
Thestandardallowsnon-repeatablereadsattheReadUncommittedandReadCom-
mittedlevels.
Phantom Reads and Repeatable Read
Thephantomreadanomalyoccurswhenoneandthesametransactionexecutestwo
identicalqueriesreturningasetofrowsthatsatisfyaparticularcondition,while
anothertransactionaddssomeotherrowssatisfyingthisconditionandcommits
thechangesinthetimeintervalbetweenthesequeries.Asaresult,thefirsttrans-
actiongetstwodifferentsetsofrows.
For example, suppose there is a consistency rule that forbids a customer to have
more than three accounts. The first transaction is going to open a new account,
soitcheckshowmanyaccountsarecurrentlyavailable(let’ssaytherearetwoof
them)anddecidesthatthisoperationispossible.Atthisverymoment,thesecond
transactionalsoopensanewaccountforthisclientandcommitsthechanges. If
the first transaction double-checked the number of open accounts, it would get
three (but it is already opening another account, and the client ends up having
fourofthem).
ThestandardallowsphantomreadsattheReadUncommitted,ReadCommitted,and
RepeatableReadisolationlevels.
47
Chapter2 Isolation
NoAnomalies and Serializable
ThestandardalsodefinestheSerializablelevel,whichdoesnotallowanyanoma-
lies. Itisnotthesameasthebanonlostupdatesanddirty,non-repeatable,and
phantomreads. Infact,thereisamuchhighernumberofknownanomaliesthan
thestandardspecifies,andanunknownnumberofstillunknownones.
TheSerializablelevelmustpreventany anomalies. Itmeansthattheapplication
developer does not have to take isolation into account. If transactions execute
correctoperatorsequenceswhenrunontheirown,concurrentexecutioncannot
breakdataconsistencyeither.
Toillustratethisidea,Iwilluseawell-knowntableprovidedinthestandard;the
lastcolumnisaddedhereforclarity:
lost dirty non-repeatable phantom other
update read read read anomalies
ReadUncommitted — yes yes yes yes
ReadCommitted — — yes yes yes
RepeatableRead — — — yes yes
Serializable — — — — —
WhyTheseAnomalies?
Ofallthepossibleanomalies,whydoesthestandardmentionsonlysome,andwhy
exactlytheseones?
Nooneseemstoknowitforsure. Butitisnotunlikelythatotheranomalieswere
simply not considered when the first versions of the standard were adopted, as
theorywasfarbehindpracticeatthattime.
Besides,itwasassumedthatisolationhadtobebasedonlocks. Thewidelyused
two-phaselockingprotocol()requirestransactionstolocktheaffectedrowsdur-
ingexecutionandreleasethelocksuponcompletion.Insimplisticterms,themore
locksatransactionacquires,thebetteritisisolatedfromothertransactions. And
consequently,theworseisthesystemperformance,astransactionsstartqueuing
togetaccesstothesamerowsinsteadofrunningconcurrently.
48
2.3 IsolationLevelsinPostgreSQL
Ibelievethattoagreatextentthedifferencebetweenthestandardisolationlevels
isdefinedbythenumberoflocksrequiredfortheirimplementation.
Iftherowstobeupdatedarelockedforwritesbutnotforreads,wegettheRead
Uncommittedisolationlevel,whichallowsreadingdatabeforeitiscommitted.
If the rows to be updated are locked for both reads and writes, we get the Read
Committedlevel: itisforbiddentoreaduncommitteddata,butaquerycanreturn
differentvaluesifitisrunmorethanonce(non-repeatablereads).
Lockingtherowstobe readand tobeupdated forall operationsgivesusthe Re-
peatableReadlevel: arepeatedquerywillreturnthesameresult.
However,theSerializablelevelposesaproblem: itisimpossibletolockarowthat
doesnotexistyet. Itleavesanopportunityforphantomreadstooccur: atransac-
tioncanaddarowthatsatisfiestheconditionofthepreviousquery,andthisrow
willappearinthenextqueryresult.
Thus,regularlockscannotprovidefullisolation: toachieveit,wehavetolockcon-
ditions(predicates)ratherthanrows.Suchpredicatelockswereintroducedasearly
aswhenSystemRwasbeingdeveloped;however,theirpracticalapplicability
islimitedtosimpleconditionsforwhichitisclearwhethertwodifferentpredicates
mayconflict. AsfarasIknow,predicatelocksintheirintendedformhavenever p.
beenimplementedinanysystem.
2.3 Isolation Levels in PostgreSQL
Overtime,lock-basedprotocolsfortransactionmanagementgotreplacedwiththe
SnapshotIsolation()protocol. Theideabehindthisapproachisthateachtrans-
actionaccessesaconsistentsnapshotofdataasitappearedataparticularpointin
time. The snapshotincludes all the current changes committedbeforethe snap-
shotwastaken.
Snapshotisolationminimizesthenumberofrequiredlocks. Infact,arowwillbe p.
lockedonlybyconcurrentupdateattempts. Inallothercases,operationscanbe
executedconcurrently: writesneverlockreads,andreadsneverlockanything.
49
Chapter2 Isolation
Postgreusesamultiversionflavoroftheprotocol. Multiversionconcurrency
controlimpliesthatatanymomentthedatabasesystemcancontainseveralver-
sionsofoneandthesamerow,soPostgrecanincludeanappropriateversion
intothesnapshotratherthanaborttransactionsthatattempttoreadstaledata.
Basedonsnapshots,Postgreisolationdiffersfromtherequirementsspecified
in the standard—in fact, it is even stricter. Dirty reads are forbidden by design.
Technically,youcanspecifytheReadUncommittedlevel,butitsbehaviorwillbethe
sameasthatofReadCommitted,soIamnotgoingtomentionthislevelanymore.
p. Repeatable Read allows neither non-repeatable nor phantom reads (even though
it does not guarantee full isolation). But in some cases, there is a risk of losing
changesattheReadCommittedlevel.
lost dirty non-repeatable phantom other
updates reads reads reads anomalies
ReadCommitted yes — yes yes yes
RepeatableRead — — — — yes
Serializable — — — — —
p. Before exploring the internal mechanisms of isolation, let’s discuss each of the
threeisolationlevelsfromtheuser’sperspective.
Forthispurpose,wearegoingtocreatetheaccountstable;AliceandBobwillhave
$,each,butBobwillhavetwoaccounts:
=> CREATE TABLE accounts(
id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
client text,
amount numeric
);
=> INSERT INTO accounts VALUES
(1, 'alice', 1000.00), (2, 'bob', 100.00), (3, 'bob', 900.00);
Read Committed
Nodirtyreads. Itiseasytocheckthatreadingdirtydataisnotallowed.Let’sstart
atransaction.Bydefault,itusestheReadCommitted1isolationlevel:
1 postgresql.org/docs/14/transaction-iso.html#XACT-READ-COMMITTED
50
2.3 IsolationLevelsinPostgreSQL
=> BEGIN;
=> SHOW transaction_isolation;
transaction_isolation
−−−−−−−−−−−−−−−−−−−−−−−
read committed
(1 row)
Tobemoreexact,thedefaultlevelissetbythefollowingparameter,whichcanbe
changedasrequired:
=> SHOW default_transaction_isolation;
default_transaction_isolation
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
read committed
(1 row)
Theopenedtransactionwithdrawssomefundsfromthecustomeraccountbutdoes
notcommitthesechangesyet. Itwillseeitsownchangesthough,asitisalways
allowed:
=> UPDATE accounts SET amount = amount - 200 WHERE id = 1;
=> SELECT * FROM accounts WHERE client = 'alice';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
1 | alice | 800.00
(1 row)
Inthesecondsession,westartanothertransactionthatwillalsorunattheRead
Committedlevel:
=> BEGIN;
=> SELECT * FROM accounts WHERE client = 'alice';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−
1 | alice | 1000.00
(1 row)
Predictably,thesecondtransactiondoesnotseeanyuncommittedchanges—dirty
readsareforbidden.
51
Chapter2 Isolation
Non-repeatablereads. Nowletthefirsttransactioncommitthechanges.Thenthe
secondtransactionwillrepeatthesamequery:
=> COMMIT;
=> SELECT * FROM accounts WHERE client = 'alice';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
1 | alice | 800.00
(1 row)
=> COMMIT;
Thequeryreceivesanupdatedversionofthedata—anditisexactlywhatisunder-
stoodbythenon-repeatablereadanomaly,whichisallowedattheReadCommitted
level.
Apracticalinsight: inatransaction,youmustnottakeanydecisionsbasedonthe
datareadbythepreviousoperator,aseverythingcanchangeinbetween. Hereis
anexamplewhosevariationsappearintheapplicationcodesooftenthatitcanbe
consideredaclassicanti-pattern:
IF (SELECT amount FROM accounts WHERE id = 1) >= 1000 THEN
UPDATE accounts SET amount = amount - 1000 WHERE id = 1;
END IF;
Duringthetimethatpassesbetweenthecheckandtheupdate,othertransactions
canfreelychangethestateoftheaccount,sosucha“check”isabsolutelyuseless.
Forbetterunderstanding,youcanimaginethatrandomoperatorsofothertransac-
tionsare“wedged”betweentheoperatorsofthecurrenttransaction.Forexample,
likethis:
IF (SELECT amount FROM accounts WHERE id = 1) >= 1000 THEN
UPDATE accounts SET amount = amount - 200 WHERE id = 1;
COMMIT;
UPDATE accounts SET amount = amount - 1000 WHERE id = 1;
END IF;
52
2.3 IsolationLevelsinPostgreSQL
If everything goes wrong as soon as the operators are rearranged,then the code
isincorrect. Donotdeludeyourselfthatyouwillnevergetintothistrouble: any-
thingthatcangowrongwillgowrong.Sucherrorsareveryhardtoreproduce,and
consequently,fixingthemisarealchallenge.
Howcanyoucorrectthiscode? Thereareseveraloptions:
• Replaceproceduralcodewithdeclarativeone.
For example, in this particular case it is easy to turn an  statement into a
constraint:
ALTER TABLE accounts
ADD CHECK amount >= 0;
Nowyoudonotneedanychecksinthecode: itisenoughtosimplyrunthe
command and handle the exception that will be raised if an integrity con-
straintviolationisattempted.
• Useasingleoperator.
Dataconsistencycanbecompromisedifatransactiongetscommittedwithin
the time gap between operators of another transaction, thus changing data
visibility.Ifthereisonlyoneoperator,therearenosuchgaps.
Postgrehasenoughcapabilitiestosolvecomplextaskswithasingle
statement. In particular, it offers common table expressions () that can
containoperatorslike,,,aswellasthe
operator that implements the following logic: insert the row if it does not
exist,otherwiseperformanupdate.
• Applyexplicitlocks.
The last resort is to manually set an exclusive lock on all the required rows p.
(  ) or even on the whole table ( ). This approach p.
always works, but it nullifies all the advantages of : some operations
thatcouldbeexecutedconcurrentlywillrunsequentially.
53
Chapter2 Isolation
Read skew. However, it is not all that simple. The Postgre implementation
allowsother,lessknownanomalies,whicharenotregulatedbythestandard.
SupposethefirsttransactionhasstartedamoneytransferbetweenBob’saccounts:
=> BEGIN;
=> UPDATE accounts SET amount = amount - 100 WHERE id = 2;
Meanwhile,theothertransactionstartsloopingthroughallBob’saccountstocal-
culatetheirtotalbalance.Itbeginswiththefirstaccount(seeingitspreviousstate,
ofcourse):
=> BEGIN;
=> SELECT amount FROM accounts WHERE id = 2;
amount
−−−−−−−−
100.00
(1 row)
Atthismoment,thefirsttransactioncompletessuccessfully:
=> UPDATE accounts SET amount = amount + 100 WHERE id = 3;
=> COMMIT;
Thesecondtransactionreadsthestateofthesecondaccount(andseesthealready
updatedvalue):
=> SELECT amount FROM accounts WHERE id = 3;
amount
−−−−−−−−−
1000.00
(1 row)
=> COMMIT;
Asaresult,thesecondtransactiongets$,becauseithasreadincorrectdata.
Suchananomalyiscalledreadskew.
HowcanyouavoidthisanomalyattheReadCommittedlevel? Theanswerisobvi-
ous: useasingleoperator.Forexample,likethis:
SELECT sum(amount) FROM accounts WHERE client = 'bob';
54
2.3 IsolationLevelsinPostgreSQL
Ihavebeenstatingsofarthatdatavisibilitycanchangeonlybetweenoperators,
butisitreallyso? Whatifthequeryisrunningforalongtime? Canitseedifferent
partsofdataindifferentstatesinthiscase?
Let’s check it out. A convenient way to do it is to add a delay to an operator by
callingthepg_sleepfunction.Thenthefirstrowwillbereadatonce,butthesecond
rowwillhavetowaitfortwoseconds:
=> SELECT amount, pg_sleep(2) -- two seconds
FROM accounts WHERE client = 'bob';
Whilethisstatementisbeingexecuted,let’sstartanothertransactiontotransfer
themoneyback:
=> BEGIN;
=> UPDATE accounts SET amount = amount + 100 WHERE id = 2;
=> UPDATE accounts SET amount = amount - 100 WHERE id = 3;
=> COMMIT;
The result shows that the operator has seen all the data in the state that corre-
spondstothebeginningofitsexecution,whichiscertainlycorrect:
amount | pg_sleep
−−−−−−−−−+−−−−−−−−−−
0.00 |
1000.00 |
(2 rows)
But it is not all that simple either. If the query contains a function that is de-
clared , and this function executes another query, then the data seen by
thisnestedquerywillnotbeconsistentwiththeresultofthemainquery.
Let’scheckthebalanceinBob’saccountsusingthefollowingfunction:
=> CREATE FUNCTION get_amount(id integer) RETURNS numeric
AS $$
SELECT amount FROM accounts a WHERE a.id = get_amount.id;
$$ VOLATILE LANGUAGE sql;
=> SELECT get_amount(id), pg_sleep(2)
FROM accounts WHERE client = 'bob';
We will transfer the money between the accounts once again while our delayed
queryisbeingexecuted:
55
Chapter2 Isolation
=> BEGIN;
=> UPDATE accounts SET amount = amount + 100 WHERE id = 2;
=> UPDATE accounts SET amount = amount - 100 WHERE id = 3;
=> COMMIT;
Inthiscase,wearegoingtogetinconsistentdata—$hasbeenlost:
get_amount | pg_sleep
−−−−−−−−−−−−+−−−−−−−−−−
100.00 |
800.00 |
(2 rows)
I would like to emphasize that this effect is possible only at the Read Committed
isolationlevel,andonlyifthefunctionis. ThetroubleisthatPostgre
usesexactlythisisolationlevelandthisvolatilitycategorybydefault. Sowehave
toadmitthatthetrapissetinaverycunningway.
Readskewinsteadoflostupdates. Thereadskewanomalycanalsooccurwithina
singleoperatorduringanupdate—eventhoughinasomewhatunexpectedway.
Let’s see what happens if two transactions try to modify one and the same row.
Bobcurrentlyhasatotalof$,intwoaccounts:
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
2 | bob | 200.00
3 | bob | 800.00