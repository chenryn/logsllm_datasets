study through automatic code analysis (Section 4.1). On the other
hand, if the security check is not in place, a Hare becomes vulner-
able to exploits, even though it could still be nontrivial to ﬁnd the
conditions for triggering the code.
In our research, we systematically analyzed 97 Android factory
images from major device manufacturers (Google, Samsung, LG,
HTC, Motorola), and found 21557 hanging attribute references that
are likely to be vulnerable (Section 4.2). To understand the security
risks they may pose, we built end-to-end attacks on a few Hare in-
stances. Except a small set of them that were discovered manually,
which motivated the whole research, most of the Hares, particularly
those within pre-installed apps, were detected automatically using
Harehunter described in Section 4.1. We reported all these security-
critical ﬂaws to the manufacturers, including Samsung, LG, Google
and HTC. Some of them have already been ﬁxed. Following we
elaborate what we learnt about such vulnerabilities and the conse-
quences once exploited. Also, some of the attack apps we built
passed the security check of Google Play, while the rest were ac-
cepted by other leading app markets like Amazon Appstore and
even Samsung’s own app store, which demonstrates that the secu-
rity risks posed by these vulnerabilities are realistic1.
1To avoid causing any damage to those inadvertently downloading our
apps, we either removed them as soon as they were approved by the app
markets or make sure that they do not send out sensitive user data or per-
form other actions that could harm the user.
12503.1 Package, Action and Activity Hijacking
Among all the Hares discovered in our research, the hanging ref-
erences often point to package names and actions. These attributes
play an important role in Hare exploits, even when the main tar-
gets are other attributes. This is because a missing package can be
the owner of absent activities, and actions often need to be speciﬁed
for receiving the Intent caused by vulnerable references. Moreover,
references to nonexisting activities were also found to be pervasive.
By exploiting these vulnerabilities, the malware can let a trusted
source (a system service or app) invoke a malicious activity, mak-
ing it look pretty trustworthy to the user. This enables a variety
of highly realistic phishing attacks that can lead to disclosure of
sensitive data, such as passwords. Following we elaborate a few
examples for such Hare ﬂaws and our end-to-end attacks.
A limitation of the exploits on package names is that once the
owners of the targeted names are already on Google Play, our at-
tack apps can no longer be uploaded there, as the Play Store does
not allow two apps to have the same package names. This restric-
tion, however, is not applied to other attributes. So those not re-
lying on package names can still get into the Store. Also, third-
party app stores like Amazon and Samsung typically do not have
the target apps of our attacks and therefore the code for hijacking
their package names can often be accepted there. Interestingly, we
even managed to publish some of the attack apps on Samsung App
Store, even though they performed days of manual analysis on our
submission.
Stealing voice note. S-Voice is a personal assistant and knowledge
navigator service app pre-installed on certain devices (e.g. Note
8.0). One of its features is voice memo: the user can simply say
“take memo” or “take note” to activate the functionality and fol-
low the instruction (“please say your note”) to record her note.
After the note is taken, the app ﬁrst checks whether another sys-
tem app com.vendor.android.app.memo (memo for short)
exists, and if so, connects itself to the latter’s service by calling
bindService using an action name speciﬁed by its Intent ﬁlter.
This hands over the note to the memo app. In the case that the app
is not there, S-Voice looks for another system service to handle the
voice note.
We found that S-Voice fails to verify the signature of memo when
referring to it. As a result, on the device where the app is miss-
ing, the references to both its package name and action (through
bindService) become hanging. A malicious app can then im-
personate memo using its package/action names to steal the user’s
voice note. In our research, we built an attack app with the package
name of memo that deﬁnes a service with the action Intent ﬁlter
com.vendor.android.intent.action.MEMO_SERVIC
E. The app also includes an interface for receiving service requests
and data from S-Voice. We ran it on top of Note 8.0, a device that
does not have the memo app, and successfully stole the voice note
recorded from the user. Our attack app was successfully uploaded
to Amazon Appstore. A video demo is posted on our private web-
site [6].
Cheating AOSP keyguard. Prior to 5.0 (only around 10% of the
market share [5]), all AOSP versions after 2.3 support face-based
screen unlock, which is done through a system app called Facelock
(com.android.facelock). Once this biometric authentica-
tion option is chosen by the user, the Android Keyguard service will
bind itself to a Facelock service, enabling the user to use her face
and the front camera to unlock her device. More speciﬁcally, when-
ever the security settings fragment within the Settings app is cre-
ated, Settings app will invoke isBiometricWeakInstalled
in LockPatternUtils framework class to check if the Face-
lock app is installed.
If so, it will add Facelock as an available
screen lock option. Later when the user clicks on the option, Set-
tings sends an Intent to Facelock for conﬁguration. After this step
is done (which also includes conﬁguring a back-up PIN or Pattern),
FaceUnlock is set as the lock screen option. Under the option,
whenever the user clicks on a locked phone, Keyguard will bind
itself to the face-unlocking service by sending an Intent specifying
the action com.android.internal.policy.IfaceLock
Interface to the Facelock app. The screen is unlocked once
Facelock informs Keyguard that the user is authenticated.
A problem here is that on all the AOSP versions prior to 5.0
supporting the FaceUnlock option, the Android framework class
LockPatternUtils fails to verify the signature of the Facelock
app. As a result, on the device model where the app is not present,
the reference to its package name becomes hanging and can be ex-
ploited by a malicious app. In our research, we installed on Tab S
8.4 an attack app that impersonated com.android.facelock
along with the required setup activities and unlocking service, and
successfully activated the FaceUnlock option. When the option was
selected, the attacker app was invoked and consequently set as a
phone lock. When the user wished to unlock the screen, the attacker
app utilized the action com.android.internal.policy.
IfaceLockInterface to cheat Keyguard into binding to its
service. As a result, the malware gained full control of the screen
unlock process and was able to expose the device to whoever it
wanted. This attack poses a particularly serious threat to the mul-
tiuser framework provided by Google from Android 4.2, where an
attacker purposely installs the malicious Facelock app as a back-
door to other user’s accounts. In fact, once installed in the mali-
cious user’s account, the app will be immediately enabled on other
users accounts as discussed in the prior research [22]. Note that
though Lollipop and the later versions no longer offer FaceUnlock,
and instead push the support for the functionality to device man-
ufacturers, this security ﬂaw still has a signiﬁcant impact, given
the fact that around 90% of the devices in the market are running
the versions below 5.0. The attack app was uploaded to Amazon
Appstore and its demo is on the website [6].
Faking Dropbox on LG. LG FileManager is a system app on LG
devices that helps the user manage her ﬁle system. It also supports
the use of Dropbox, which can be opened by clicking on a button
with the Dropbox icon.
Interestingly, on LG G3 factory image,
our analyzer (Section 4.1) found that the button actually ﬁrst tries
to launch an activity within com.vcast.manager, a Verizon
cloud app, and only goes to the Dropbox’s web login page once the
attempt fails. This program logic could be designed for the devices
distributed by Verizon but leave the reference to the service hanging
on those with other carriers and development phones.
In our research, we built an attack app to impersonate com.
vcast.manager and hijacked the activity pointed to by the hang-
ing reference. Since LG FileManager does not check the target
app’s signature before starting its activity, it blindly invoked our
app whenever the user clicked on the “Dropbox” button. This gives
the app an opportunity to show up a fake Dropbox login activity to
steal the user’s credentials.
Replacing ofﬁcial recorder. S-Voice performs voice recording us-
ing a default recorder. There are two such recorders, com.sec.
android.app.voicerecorder and com.sec.android.
app.voicenote. What happens is that S-Voice ﬁrst attempts
to use the activity of voicerecorder and only when this fails
(the app does not exist), it switches to voicenote. Again, such a
two-choose-one process does not involve proper authentication of
the target. This allowed us to construct an attack app impersonating
1251voicerecorder app with the activity VoiceRecorderMain
Activity to control the target of the reference. On Note 8.0, our
experiment shows that the attacker’s activity was always invoked,
even in the presence of voicenote, which enabled it to record
sensitive user conversation or perform a phishing attack.
Hulu on watch. WatchON is a popular app that allows its user
to view the TV programs in their TV or select movies from the
Video-on-Demand service that integrates Hulu, Vudu, popcornﬂix,
etc. Once the user clicks on a Hulu movie, WatchON sends an im-
plicit Intent to launch Hulu’s activity. For some movies requiring a
HuluPlus account, the user will be redirected to an upgrade activity
where she can pay to be upgraded to the HuluPlus status.
The problem here is that the references to the Hulu’ activities
were found to be hanging in our research: even though WatchON
indeed checks whether Hulu exists before sending the implicit In-
tent, it fails to verify the app’s signature. Therefore, we were able
to build a malicious app that masqueraded as Hulu and set an Intent
ﬁlter with action hulu.intent.action.LAUNCH_VIDEO_ID
to get the upgrade Intent. Through launching a malicious activity,
we could cheat the user into entering her login credentials for Hulu.
More seriously, when she actually clicked on a paid movie, the
malware displayed an upgrade activity, asking for her credit-card
information. Since all these activities were triggered by WatchON,
the malware is very likely to get what it wants. We successfully
uploaded this attack app to Samsung App Store, which analyzed
our code both statically and dynamically for days.
3.2 Content-Provider Capture
Just like actions and activities, content providers are also exten-
sively used for inter-app and app-framework interactions. Speciﬁ-
cally, an app may query another app’s content provider by directly
referring to its authority, one or more URIs formatted in a Java-
style naming convention: e.g., com.example.provider.ima
geprovider. However, just like what happens to other attributes,
such a reference (to the authority) can also become hanging, when
the related provider is in absence on a device. This opens another
avenue for the Hare exploit, when a malicious app strategically de-
ﬁnes a content provider to misinform the querier.
Note that unlike package name, duplicated authority names are
not forbidden on the Play Store. As a result, all our attack apps
were successfully uploaded to Google Play. Following we describe
a few attacks on the Hares of this type.
Hijacking Intent invocations. A surprising ﬁnding of our research
is that a subtle content-provider Hare within Google Email (ver-
sion 6.3-1218562) allows a malicious app to completely replace
its internal account settings with a malicious activity. Speciﬁcally,
Google Email, the standard email application on every Google phone,
lets the user conﬁgure different email accounts (Gmail, exchange,
etc.) through a Settings interface. To invoke this activity, the app
sends an implicit Intent with action android.intent.action.
EDIT and data content://ui.email.android.com/set
tings?account=x, where x is the email account ID used to
inform the account settings activity which email’s setting to edit.
These two parameters are speciﬁed within the account settings ac-
tivity’s Intent ﬁlter, as illustrated in the following code snippet:
Figure 1: Exploiting a Hare Authority to Hijack Email Account
Settings Activity
8
9
10
android:host="ui.email.android.com"
android:pathPrefix="/settings"/>
This implicit Intent can be received by any app that speciﬁes the
above Intent ﬁlter for its activity. However, when this happens,
Android pops up a window that lists all eligible receivers to let
the user select. What we want to do here is to circumvent this
protection, making a malicious app the only qualiﬁed recipient.
To this end, we analyzed the data part of the Intent ﬁlter in the
code snippet above and checked how the ActivityManagerSer
vice (AMS for short) resolves the Intent sent to this Intent ﬁlter.
Figure 1 depicts the Intent resolution steps in this scenario. If the
data’s scheme is content, AMS will try to infer the MIME (Multi-
Purpose Internet Mail Extension) of the attached data to identify
the recipient that can handle this type: the data type here is sup-
posed to be given by the content provider ui.email.android.
com. However, this provider does not exist and as a result, the
type is typically ignored and the Intent is sent to whoever deﬁne
the action.EDIT and data ﬁlter (with scheme="content")
without a speciﬁed MIME type (as No branch in Figure 1).
The security risk here is that the reference to the content provider
is hanging and can be exploited by a malicious app deﬁning that
provider. What the malware can do is to name the provider’s au-
thority ui.email.android.com to receive the query from the
AMS (the Yes branch in Figure 1), return a MIME type of its
own choice to misinform it, and in the meantime specify this type
within its own activity Intent ﬁlter, making itself the only eligi-
ble app to get the Intent (for invoking the account settings activ-
ity). In our research, our attack app took over the content provider
and responded to the query from AMS with a MIME type vnd.
android.cursor.dir/vnd.example.ABC. Also, the at-
tacker deﬁnes an Intent ﬁlter as illustrated in the next code snippet,
by claiming a mineType with the type it told the AMS.
1
2
3
4
5
6
7
In this way, the Intent from the app went only to the malware,
leading the user to a malicious activity that lets her enter her pass-
word. A demo of the attack is posted on the website [6]. We also
successfully submitted the app to Google Play, before notifying
Google of this security-critical ﬂaw.
Tango in the dark. Tango is a popular cross-platform messag-
ing app, offering audio, video calls over 3G, 4G and Wi-Fi net-
works. The app has been installed over 100 million times from
Google Play. To display SMS messages received, it sets up an In-
tent ﬁlter with the action android.provider.Telephony.
SMS_RECEIVED to get the Intent that carries the message from
the Telephony Manager. When the user sends a message through
Tango, the app saves it to sms, telephony’s content provider.
On a device without Telephony, Tango’s reference to its con-
tent provider becomes hanging. A malicious app, therefore, can
deﬁne a content provider using the authority sms to get the SMS
message the user sends. This can happen when the malware ﬁrst
sends a message, causing the inadvertent user to reply. What can be
leveraged here is another vulnerability in Tango: the app does not
protect its SMS receiver with the system permission android.
permission.broadcast_sms, as it is supposed to do. This
allows any party broadcasts to the action SMS_RECEIVED to inject
a fake short message into the app. In our research, we implemented
the attack on Tab S 8.4, sending a fake message to Tango and re-
ceiving the user’s response using the malicious content provider.
The demo of the attack is online [6].
LG CloudHub scam. LG CloudHub is a system app that allows
managing cloud accounts, uploading data to clouds and access-
ing it from different devices. By default, the app supports Drop-
box and Box, and on various devices can also connect the user
to other services, including LG cloud provider. The information
about these additional services is kept in a content provider com.
lge.lgaccount.provider, which LG CloudHub looks up
each time when it is invoked.
Interestingly, on some phones, this provider does not exist. A
prominent example is LG G3. When this happens, LG CloudHub
just displays the default services, Dropbox and Box. However, this
makes the reference to the content provider a Hare case and ex-
poses it to the manipulation of a malicious app. Speciﬁcally, we
implemented an attack app that deﬁned com.lge.lgaccount.
provider and placed in the content provider an entry for LG
Cloud account. This account was then displayed on the LG Cloud-