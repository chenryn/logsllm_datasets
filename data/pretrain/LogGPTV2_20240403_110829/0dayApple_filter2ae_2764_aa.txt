# 挖掘0day来入侵Apple
### 入门
在Sam等人发布[infamous blog post](https://samcurry.net/hacking-apple/)文章后,我们开始对apple进行黑客攻击。目标是专注于发现关键的漏洞，例如个人身份信息泄露或者访问Apple的服务器或者内网。这些是我们认为Apple会最感兴趣的bug类型。
### 侦查和指纹
在查看我们的侦察数据并确定可能正在运行的服务时，我们发现了三台主机在由[Lucee](https://github.com/lucee/Lucee/)支持的CMS上运行。
由于CMS和Lucee都可以轻松地在本地托管，因此它们是我们入侵的良好目标。
我们选择关注Lucee，因为它公开了管理面板并具有漏洞历史记录。[Orange
Tsai](https://twitter.com/orange_8361)也曾在[Breaking Parser
Logic](https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf)
简短地提到过，Lucee是Railo-context的分支。
可以在三台不同的Apple主机上访问Lucee的管理面板。两个正在运行一个过时的版本，另一个正在运行一个相当新的版本。
  * 
  * 
  * 
### 苹果的WAF行为
为了利用我们将在下面讨论的漏洞，我们需要了解Apple所使用的WAF，更重要的是要了解Facilities.apple.com上的前端服务器如何与之交互。
Apple的waf非常让人头疼，他通过检测URL(查询参数)来阻止几乎所有路径遍历/SQLI的尝试攻击。
Facilities.apple.com上的前端服务器（反向代理）配置为仅显示来自后端服务器的状态码为200和404的响应。如果您在后端得到其他的状态码，那么前端服务器将返回403,这与触发WAF时候相同。
### Lucee配置错误
在本地测试Lucee时，我们发现了配置错误，这将导致攻击者可以直接访问需要身份验证的CFM
(ColdFusion)文件。这使我们即使完全未经认证,也可以执行许多需要认证的操作。
一旦您在CFM文件中点击了 `request.admintype`变量/属性,
由于我们未通过admin身份认证，执行流程就会被终止。但是，在执行该检查之前的代码是可以正常执行的。因此，我们必须先在点击`request.admintype`找到具有某种错误的文件。
我们使用一下这三个文件在安装Lucee的系统获得完整的预认证/未认证RCE：
  * imgProcess.cfm（在较早版本中不可用）
  * admin.search.index.cfm
  * ext.applications.upload.cfm
## 失败的尝试
### imgProcess.cfm上不错且简单的RCE
为了复制Apple上的安装版本，我们获得了运行相同版本的Lucee的本地副本。不携带任何参数打开`imgProcess.cfm`在我们的安装环境下会回显一个错误。在Apple服务器上打开则会返回403，则意味着这个文件是存在的。我们只需要指定正确的参数/值即可;否则，后端服务器将会抛出一个异常，前端服务器将为此返回403.
参数错误时 -
参数正确时 -
这个文件具有路径遍历漏洞，允许使用我们给定的内容在服务器上的任何位置创建文件。
则需要一个查询参数`file`并将其创建为带有以下行的文件:
`{temp-directory}/admin-ext-thumbnails/__{our-input}`
我们的输入可以被POST参数`imgSrc`来定义。
正如你已经看到的一样,`__`目录必须在进行路径遍历之前存在，因为linux要求在进行目录遍历之前必须存在路径。幸运地是,`expandPath`会创建不存在的路径并将路径以字符串返回。因此，通过`file=/../../../context/pwn.cfm`将会创建`__`目录并遍历webroot中的上下文目录，从而在此给我们一个简易的RCE。
然而即使存在这个bug, **由于WAF拦截查询参数中的`../`,我们不能在Apple这个案例上进行利用。**
该端点指定要求`file`作为查询参数(url.file,而不是`form.imgsrc`)。如果两者都是form或post参数,则不会触发WAF,
**我们仍然可以使用该端点来创建我们在确定的目录中控制的名称和内容的文件，而无需触发WAF**
## 现在怎么办？我们如何避免触发WAF？
### 棘手的copy
`admin.search.index.cfm`允许我们指定目录并将其内容复制到所需位置。但是，
**复制功能非常棘手，实际上不会复制文件内容，也不会保留文件扩展名。**
该端点采用两个参数：
  * dataDir
  * luceeArchiveZipPath
`dataDir`是您要将文件复制到`luceeArchiveZipPath`参数指定的路径。如果该路径不存在，他将会被创建，我们可以在这里传递绝对路径。
请求示例:
    GET /lucee/admin/admin.search.index.cfm?dataDir=/copy/to/path/here/&LUCEEARCHIVEZIPPATH=/copy/from/path/here HTTP/1.1
    Host: facilities.apple.com
    User-Agent: Mozilla/5.0 
    Connection: close
既然我们知道复制功能不是标准的，那么让我们更深入地研究负责此功能的代码。
我们注意到了这个有趣的CFML标签：
它列出了 **luceeArchiveZipPath** 目录中的文件。 **filter属性表示仅列出格式为`*.*.cfm`的文件**
该查询的结果最终存储在"qFiles"变量中。
接下来，它遍历每一个文件(文件存储在 **currFile** 变量)，将文件名中出现的'cfm'替换为空白符,并将此更新的文件名存储在
**currAction** 变量中。因此，如果我们有一个文件`test.xyz.cfm`，它将变为`test.xyz`。
然后，它检查 **dataDir** 目录中是否存在诸如“ test.xyz.en.txt”或“ test.xyz.de.txt”之类的文件名。同样，
**dataDir** 变量是用户控制的。如果此文件不存在，它将用空格替换文件名中的点（'.'），并将其保存到
**pageContents.lng.currAction** 变量中。
稍后，将创建文件test.xyz.\ .txt， **pageContents.lng.currAction** 变量的值将成为其内容。
对于我们来说不幸地是,尽管我们可以通过文件名本身来控制文件的内容，他也会创建.txt文件。但是随着进一步的发展，我们将看到如何利用文件名本身来搞事情；）。
之后，将 **currFile** 的内容存储在 **data** 变量中，过滤出 ** _内容与正则表达式不匹配的文件_**
`[''"##]stText\..+?[''"##]`，然后将它们放入 **finds** 数组中。
然后，它遍历 **finds** 数组，并检查每个项是否作为键存在。如果没有，它将创建它作为键并将其存储在 **searchresults** 变量中。
            [..snip..]