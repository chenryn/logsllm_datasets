### 3.5 Identifying Cached Web Sites

Next, we conducted our cross-tab activity inference attacks against web sites that are stored in the browser cache (i.e., warm). When a web browser revisits a cached web site, it only fetches and stores dynamic or updated resources. Consequently, the change log of storage footprint size contains less information. We expected that the inference accuracy of our attack would decrease when a victim visits cached web sites.

We prepared attack databases containing change logs of storage footprint size for visiting cached Alexa Top 100 web sites and compared these with a victim’s visits to infer their activity. Note that we did not test this with Tor, as it typically does not cache web resources. For each platform, we consecutively visited each web site 10 times, clearing the browser cache only before the first visit. Figure 11 shows the inference accuracy of our attack when a victim visits the front pages of cached Alexa Top 100 web sites. As expected, the inference accuracy decreased: 70.5% (Linux), 65.8% (Android), and 60% (Windows).

### 3.6 Summary

As demonstrated in Sections §3.3.3, §3.3.4, §3.4, and §3.5, background noise in disk and network, the use of Tor, and heavy usage of the browser cache (e.g., increasing the browser cache size) can mitigate our cross-tab activity inference attacks. However, there is still a chance to infer a victim’s activity. A robust and effective countermeasure against our attack will be introduced in Section §5.1.

### 4. Browser Status Inference

In this section, we explain how we can use storage footprints to develop two active attacks to infer browser status: browser history stealing and login status identification. Our browser status inference attacks are similar to conventional cache timing attacks [4, 10, 19], but our attacks are more accurate because they use the total size of newly fetched resources, which is not affected by network conditions. In contrast, cache timing attacks are highly vulnerable to network conditions (see §4.5).

#### 4.1 Threat Model

The threat model for the browser status inference attack is similar to that in §3.1, but the attacker's goal is to infer browser history and login status. To obtain this information, the attacker generates additional requests to other web sites under consideration.

#### 4.2 Attack Procedure

Figure 12 illustrates the procedure of our browser status inference attack. The attack procedure is similar to that of our cross-tab activity inference attack, except for the methods used to visit a target web site (Target.com) and to compare storage footprints. First, an attack script directly loads Target.com using Prerendering, which allows a web application to preload a web page in a hidden browser tab. Second, the attacker uses the peak size of storage footprints instead of the change logs of storage footprint size to identify the status of the target web site.

##### 4.2.1 Prefetching and Prerendering

Modern web browsers support prefetching and prerendering to reduce loading and processing time of web pages. Prefetching makes a web browser preemptively download resources of a web page, reducing network delay. A web site can prefetch a resource using `<link rel="prefetch" href="resource_url">`. Prerendering, on the other hand, preloads a web page in a hidden browser tab and displays it when a user attempts to visit the web page, reducing both network and rendering delay. A web site can preload a web page using `<link rel="prerender" href="page_url">`.

Figure 13 shows JavaScript pseudocode to prerender target web sites. At Line 2, an array `URL` contains a list of web pages to be inspected. At Line 5, the script defines `PrerenderTimer` to periodically call `prerenderURL()` (at Line 7). At Lines 7–10, the script prerenders a new web page every 10 seconds by dynamically inserting a link tag into an attack web page (at Lines 12–21).

Instead of prerendering, an attacker can use an `iframe` tag to load a web page. However, a web page can prevent an `iframe` tag from including itself using either an HTTP header field `X-Frame-Options` [35] or frame busting code [37]. Therefore, we do not use an `iframe` tag in our browser status inference attacks.

##### 4.2.2 Peak Size of Storage Footprints

We use the peak size of storage footprints to determine whether a victim's web browser has visited a web site. When a victim visits a previously visited web site, many resources are already in the browser cache, so the browser only downloads changed or dynamic resources. The peak size of storage footprints in this case is smaller than when the web site is first visited. Using the peak size avoids the computation overhead of OSB and provides sufficient accuracy, as explained in the following sections.

#### 4.3 History Stealing in a Normal Network

We first consider how our browser status inference attack successfully identifies browser history in a normal network.

##### 4.3.1 Data Collection

We collected the peak size of storage footprints for the non-cached front pages of Alexa Top 500 web sites on three different platforms (Linux, Windows, and Android) and treated them as attack databases. The data collection procedure for each front page of Alexa Top 500 web sites is as follows:
1. Using a Chrome web browser, we visit our attack page that uses Prerendering to visit the front page.
2. We monitor temporal changes in the size of storage footprints for 10 seconds.
3. We inform an attack server of the peak size of storage footprints.
4. We clear the browser cache.

We repeated this procedure five times for each front page on each platform, resulting in 2,500 peak size values of storage footprints per platform as attack databases.

##### 4.3.2 Evaluation

To evaluate the inference accuracy of our history stealing attack, we visited each front page of Alexa Top 500 web sites five times on each platform and compared the peak size of storage footprints for each front page with that for each non-cached front page stored in the attack databases. Let \( \mu_p \) and \( \sigma_p \) be the mean and standard deviation of the peak size values of a web page \( p \) stored in the attack databases. Let \( s_p \) be the peak size of storage footprints when a victim web browser visits \( p \). If \( s_p < \mu_p - \sigma_p \), we treat that the victim web browser has visited \( p \) before. Otherwise, we treat that the victim web browser has not visited \( p \). This treatment resembles the distinguishability defined in [20].

Our results show that the inference accuracy of our history stealing attack is considerably high. As shown in Figure 14, the inference accuracy of our attack against the front web pages of Alexa Top 500 web sites on the three platforms is 98.5% (Android), 97.7% (Linux), and 97.3% (Windows).

#### 4.4 History Stealing in a Tor Network

Next, we consider browser history stealing in a Tor network. Figure 15 shows the results of browser history stealing for the front pages of Alexa Top 500 web sites on Windows and Linux. The inference accuracy of our attack on Windows and Linux is 96.3% and 91.2%, respectively.

We analyzed why the inference accuracy of our attack in a Tor network decreases and identified that it is due to changes in the geographical location of the victim web browser by Tor, as explained in §3.4. When a web site provides different content based on the country information of the web browser, the resources cached in the browser become invalid if the browser moves to a different geographical location.

### 4.5 Comparison with Timing Attacks

Figure 17 compares the inference accuracy of browser history stealing using storage footprints and using timing attacks on Linux (Alexa Top 200 sites). Our attack was more accurate than the timing attacks, with an inference accuracy of 98.0% (our method) compared to 78.5% (timing attack) on LAN and 99.3% (our method) compared to 70.2% (timing attack) on Wi-Fi.