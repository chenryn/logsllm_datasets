    -   `device 选项将`{.literal} 主机设备添加到容器中。
    :::
3.  使用 `registry.access.redhat.com/ubi8`{.literal} 镜像创建新容器：
    ``` literallayout
    # buildah from registry.access.redhat.com/ubi8
    ...
    ubi8-working-container
    ```
4.  在 `ubi8-working-container`{.literal} 容器内运行 `ls /`{.literal}
    命令：
    ``` literallayout
    # buildah run  --isolation=chroot ubi8-working-container ls /
    bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv
    ```
5.  可选：列出本地存储中的所有镜像：
    ``` literallayout
    # buildah images
    REPOSITORY                        TAG      IMAGE ID       CREATED       SIZE
    registry.access.redhat.com/ubi8   latest   ecbc6f53bba0   5 weeks ago   211 MB
    ```
6.  可选：列出工作容器及其基础镜像：
    ``` literallayout
    # buildah containers
    CONTAINER ID  BUILDER  IMAGE ID     IMAGE NAME                       CONTAINER NAME
    0aaba7192762     *     ecbc6f53bba0 registry.access.redhat.com/ub... ubi8-working-container
    ```
7.  可选：将 `registry.access.redhat.com/ubi8`{.literal} 镜像推送到
    registry `.example.com 上的本地 registry`{.literal} ：
    ``` literallayout
    # buildah push ecbc6f53bba0 registry.example.com:5000/ubi8/ubi
    ```
:::
::: itemizedlist
**其它资源**
-   [在容器中运行 Buildah
    的最佳实践](https://developers.redhat.com/blog/2019/08/14/best-practices-for-running-buildah-in-a-container){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#con_privileged-and-unprivileged-podman-containers_assembly_running-skopeo-buildah-and-podman-in-a-container}特权和非特权 Podman 容器 {.title}
:::
默认情况下，Podman
容器是非特权的，如无法修改主机上的部分操作系统。这是因为默认情况下，仅允许容器对设备进行有限访问。
下表重点介绍了特权容器的重要属性：您可以使用
`podman run --privileged 命令运行特权`{.literal} 容器。
::: itemizedlist
-   特权容器授予与启动容器的用户相同的设备访问权限。
-   特权容器禁用将容器与主机隔离的安全功能。丢弃的功能、有限的设备、只读挂载点、Apparmor/SELinux
    隔离和 Seccomp 过滤器都被禁用。
-   特权容器不能比启动它们的帐户具有更多的特权。
:::
::: itemizedlist
**其它资源**
-   [如何将 \--privileged
    标志用于容器引擎](https://www.redhat.com/sysadmin/privileged-flag-container-engines){.link}
-   `podman-run`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#proc_running-podman-with-extended-privileges_assembly_running-skopeo-buildah-and-podman-in-a-container}使用扩展权限运行 Podman {.title}
:::
如果您无法在无根环境中运行工作负载，则需要以 root
用户身份运行这些工作负载。应谨慎执行运行具有扩展特权的容器，因为它禁用了所有安全功能。
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
:::
::: itemizedlist
**流程**
-   在 Podman 容器中运行 Podman 容器：
    ``` literallayout
    $ podman run --privileged --name=privileged_podman registry.access.redhat.com/rhel8/podman podman run ubi8 echo hello
    Resolved "ubi8" as an alias (/etc/containers/registries.conf.d/001-rhel-shortnames.conf)
    Trying to pull registry.access.redhat.com/ubi8:latest...
    ...
    Storing signatures
    hello
    ```
-   根据
    `registry.access.redhat.com/rhel8/ podman 镜像运行名为 privileged_`{.literal}
    podman``{=html} 的外部容器。
-   `privilegedd`{.literal} 选项禁用将容器与主机隔离的安全功能。
-   运行 `podman run ubi8 echo hello`{.literal} 命令，以基于
    `ubi8`{.literal} 镜像创建内部容器。
-   请注意，`ubi8`{.literal} 短镜像名称已解析为别名。因此，会拉取
    `registry.access.redhat.com/ubi8:latest`{.literal} 镜像。
:::
::: itemizedlist
**验证**
-   列出所有容器：
    ``` literallayout
    $ podman ps -a
    CONTAINER ID  IMAGE                            COMMAND               CREATED            STATUS                          PORTS   NAMES
    52537876caf4  registry.access.redhat.com/rhel8/podman               podman run ubi8 e...  30 seconds ago     Exited (0) 13 seconds ago               privileged_podman
    ```
:::
::: itemizedlist
**其它资源**
-   [如何在容器内使用
    Podman](https://www.redhat.com/sysadmin/podman-inside-container){.link}
-   `podman-run`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#proc_running-podman-with-less-privileges_assembly_running-skopeo-buildah-and-podman-in-a-container}使用较少的权限运行 Podman {.title}
:::
您可以运行两个嵌套的 Podman 容器，而无需使用 `--privileged`{.literal}
选项。在不使用 `--privileged 选项的情况下`{.literal}
运行容器是一个更安全的选项。
如果您要以尽可能安全的方式尝试不同版本的 Podman，这非常有用。
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
:::
::: itemizedlist
**流程**
-   运行两个嵌套容器：
    ``` literallayout
    $ podman run --name=unprivileged_podman --security-opt label=disable --user podman --device /dev/fuse registry.access.redhat.com/rhel8/podman podman run ubi8 echo hello
    ```
-   根据
    `registry.access.redhat.com/rhel8/ podman 镜像，运行名为 unprivileged_`{.literal}
    podman``{=html} 的外部容器。
-   security `-opt label=disable`{.literal} 选项禁用主机 Podman 上的
    SELinux 隔离。SELinux
    不允许容器化进程挂载在容器内运行所需的所有文件系统。
-   user `podman`{.literal} 选项会自动使外部容器内的 Podman
    在用户命名空间内运行。
-   device `/dev/fuse`{.literal} 选项使用容器内的
    `fuse-overlayfs`{.literal} 软件包。此选项将 `/dev/fuse`{.literal}
    添加到外部容器中，以便容器内的 Podman 使用它。
-   运行 `podman run ubi8 echo hello`{.literal} 命令，以基于
    `ubi8`{.literal} 镜像创建内部容器。
-   请注意，ubi8 短镜像名称已解析为别名。因此，会拉取
    `registry.access.redhat.com/ubi8:latest`{.literal} 镜像。
:::
::: itemizedlist
**验证**
-   列出所有容器：
    ``` literallayout
    $ podman ps -a
    CONTAINER ID  IMAGE                            COMMAND               CREATED            STATUS                          PORTS   NAMES
    a47b26290f43               podman run ubi8 e...  30 seconds ago     Exited (0) 13 seconds ago               unprivileged_podman
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#proc_building-a-container-inside-a-podman-container_assembly_running-skopeo-buildah-and-podman-in-a-container}在 Podman 容器内构建容器 {.title}
:::
此流程演示了如何使用 Podman 在容器中运行容器。本例演示了如何使用 Podman
在此容器内构建并运行另一个容器。容器将运行\"Moon-buggy\"，这是一种基于文本的简单游戏。
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
-   登陆到 registry.redhat.io registry:
    ``` screen
    # podman login registry.redhat.io
    ```
:::
::: orderedlist
**流程**
1.  根据 `registry.redhat.io/rhel8/podman`{.literal} 镜像运行容器：
    ``` literallayout
    # podman run --privileged --name podman_container -it registry.redhat.io/rhel8/podman /bin/bash
    ```
    ::: itemizedlist
    -   根据 `registry.redhat.io/rhel8/podman`{.literal} 镜像运行名为
        `podman_container`{.literal} 的外部容器。
    -   `it 选项指定`{.literal} 您要在容器内运行交互式 bash shell。
    -   `privilegedd`{.literal} 选项禁用将容器与主机隔离的安全功能。
    :::
2.  在 `podman_container 容器内`{.literal} 创建一个容器``{=html}
    文件：
    ``` literallayout
    # vi Containerfile
    FROM registry.access.redhat.com/ubi8/ubi
    RUN yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    RUN yum -y install moon-buggy && yum clean all
    CMD ["/usr/bin/moon-buggy"]
    ```
    `Containerfile`{.literal} 中的命令会导致以下构建命令：
    ::: itemizedlist
    -   从 `registry.access.redhat.com/ubi8/ubi`{.literal}
        镜像构建容器。
    -   安装 `epel-release-latest-8.noarch.rpm`{.literal} 软件包。
    -   安装 `moon-buggy`{.literal} 软件包。
    -   设置容器命令。
    :::
3.  使用 `Containerfile`{.literal} 构建名为 `moon-buggy`{.literal}
    的新容器镜像：
    ``` literallayout
    # podman build -t moon-buggy .
    ```
4.  可选：列出所有镜像：
    ``` literallayout
    # podman images
    REPOSITORY                  TAG      IMAGE ID      CREATED        SIZE
    localhost/moon-buggy  latest  c97c58abb564  13 seconds ago  1.67 GB
    registry.access.redhat.com/ubi8/ubi latest 4199acc83c6a  132seconds ago 213 MB
    ```
5.  基于 `moon-buggy`{.literal} 容器运行一个新容器：
    ``` literallayout
    # podman run -it --name moon moon-buggy
    ```
6.  可选：标记 `moon-buggy`{.literal} 镜像：
    ``` literallayout
    # podman tag moon-buggy registry.example.com/moon-buggy
    ```
7.  可选： `将 moon-buggy`{.literal} 镜像推送到 registry：
    ``` literallayout
    # podman push registry.example.com/moon-buggy
    ```
:::
::: itemizedlist
**其它资源**
-   [技术预览：在容器内运行容器](https://www.redhat.com/sysadmin/container-inside-container){.link}
:::
:::
:::
[]{#assembly_running-special-container-images_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_running-special-container-images_building-running-and-managing-containers.html#assembly_running-special-container-images_building-running-and-managing-containers}第 10 章 运行特殊容器镜像 {.title}
:::
本章提供有关某些特殊类型的容器镜像的信息。些容器镜像内置了名为
[*runlabels*]{.emphasis}
的标签，允许您使用预设置选项和参数运行这些容器。`podman container runlabel `{.literal}
命令允许您为容器镜像执行在 ``{.literal}
中定义的命令。支持的标签包括 `安装`{.literal}、`运行`{.literal} 和
`卸载`{.literal}。
::: section
::: titlepage
# []{#assembly_running-special-container-images_building-running-and-managing-containers.html#con_opening-privileges-to-the-host_assembly_running-special-container-images}打开到主机的权限 {.title}
:::
特权容器和无特权容器之间存在一些区别：例如，toolbox
容器是一个特权容器。以下是可以从容器对主机打开或可能不会打开的特权示例：
::: itemizedlist
-   [**权限**]{.strong}
    ：特权容器禁用将容器与主机隔离的安全功能。您可以使用
    `podman run --privileged 命令运行特权`{.literal}
    容器。例如，您可以删除从主机挂载的 root 用户拥有的文件和目录。
-   [**进程表**]{.strong} ：您可以使用
    `podman run --privileged --pid=host `{.literal}
    命令为容器使用主机 PID 命名空间。然后，您可以使用特权容器中的
    `ps -e`{.literal} 命令列出主机上运行的所有进程。您可以将进程 ID
    从主机传递给特权容器中运行的命令（例如： `kill `{.literal}）。
-   [**网络接口**]{.strong}：默认情况下，容器只有一个外部网络接口和一个回送网络接口。您可以使用
    `podman run --net=host `{.literal}
    命令直接从容器内部访问主机网络接口。
-   [**进程间的通信**]{.strong}: 主机上的 IPC
    工具可以从特权容器内访问。您可以运行 `ipcs`{.literal}
    等命令，以查看主机上活动消息队列、共享内存片段和 semaphore
    设置的信息。
:::
:::
::: section
::: titlepage
# []{#assembly_running-special-container-images_building-running-and-managing-containers.html#con_container-images-with-runlabels_assembly_running-special-container-images}带有 runlabels 的容器镜像 {.title}
:::
有些红帽镜像包括为使用这些镜像提供预设置命令行的标签。使用
`podman container runlabel  命令`{.literal}，您可以使用
`podman`{.literal} 命令执行镜像的 ``{.literal} 中定义的命令。
现有 runlabels 包括：
::: itemizedlist
-   [**install**]{.strong}：在执行镜像前设置主机系统。通常情况下，这会在主机上创建文件和目录，容器可在稍后运行时访问。
-   [**run**]{.strong}：标识在运行容器时要使用的 podman
    命令行选项。通常，这些选项将在主机上打开特权，并挂载容器永久保留在主机上所需的主机内容。
-   [**卸载**]{.strong} ：在运行容器后清除主机系统。
:::
:::