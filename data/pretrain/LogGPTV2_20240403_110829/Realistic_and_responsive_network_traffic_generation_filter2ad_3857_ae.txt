20
0
Figure 17: Energy plot responsiveness to doubling response size
and link latency (Mawi).
effects of doubling request and response sizes for the same trace.
Once again, the energy plot shows the expected effect: the relative
shape of the curve remains the same, but with signiﬁcantly more
energy at all time scales. The average bandwidth increases from
9mbps to 19mbps.
Finally, we explore Swing’s ability to project to alternate
application mixes during trafﬁc generation. For the Auck trace
(Table 2), we increase the number of SQUID sessions by a factor of
20 while leaving all other model parameters (for different applica-
tions and network conditions) identical. The average bandwidth of
the trace increased to 15mbps. Earlier ﬁgures 8 and 9 highlighted
the difference in burstiness characteristics of the two applications.
SQUID has a much more pronounced dip at time scale 9 and the
curve in smaller time scales is more convex in shape. The energy
plot of the overall trace is a function of the burstiness of individual
applications and hence increasing the percentage of SQUID should
make the overall energy plot resemble SQUID. Figure 18 shows the
curves that verify this hypothesis. For comparison we also show the
energy plot corresponding to SQUID in the original trace.
6. LIMITATIONS AND FUTURE WORK
In addition to the discussion in the body of the paper, we
identify a number of additional limitations with methodology
in this section. First, we model application behavior based on
the information we can glean from the available packet traces
containing only packet headers. A number of efforts have studied
application behavior by tracing full application-level information
for peer-to-peer [14], multimedia [38], and HTTP [3] workloads.
In ongoing work, we aim to show that our model can be populated
from such application-level traces and workload generators. Our
initial results are encouraging.
Swing’s accuracy will be limited by the accuracy of the
models it extracts for user, application, and network behavior.
)
)
j
(
y
g
r
e
n
E
(
g
o
l
2
Smallest time scale = 1 msec 
SwingWithSQUID*20
AuckBaseline
SwingBaseline
AuckOnlySQUID
5
10
Time Scale j
15
28
26
24
22
20
18
16
0
Figure 18: Energy plot responsiveness to varying application
mix (Auck).
The quality of our traces also impacts our results. For instance,
we have found inter-packet timings in pcap traces that should
not be possible based on the measured link’s capacity. Pervasive
routing asymmetry also means that bi-directional model extraction
can introduce errors in some cases. Finally, using homogeneous
protocol stacks on end hosts limit our ability to reproduce the mix
of network stacks (e.g., TCP ﬂavors) seen across an original trace.
Because we are generating trafﬁc for a dumbbell topology
and we focus on producing accurate packet traces in terms of
bandwidth and burstiness we only focus on a subset of our initial
parameters. In particular we do not currently model the distribution
of requests and responses among particular clients and servers and
we do not model server think time. We split the total number of
hosts in the emulation topology weighed by the number of bytes
transmitted per-application in the original trace. One problem with
this approach is that we lose the spatial locality of the same host
simultaneously engaging in, e.g., HTTP, P2P and SMTP sessions.
Finally, in this paper we only consider TCP applications. Our
implementation does support UDP but we leave a detailed analysis
of our techniques and accuracy to future work.
In this work, we focus on generating realistic traces for a
single network link. For a variety of studies, it may be valuable
to simultaneously generate accurate communication characteristics
across multiple links in a large topology. We consider this to be
an interesting and challenging avenue for future research though it
will likely require access to simultaneous packet traces at multiple
vantage points to accurately populate some extended version of our
proposed model.
7. RELATED WORK
Our work beneﬁts from related efforts in a variety of disci-
plines. We discuss a number of these areas below.
Application-speciﬁc workload generation: There have been
many attempts to design application-speciﬁc workload generators.
Examples include Surge [3], which follows empirically-derived
models for web trafﬁc [25] and models of TELNET, SMTP, NNTP
and FTP [31]. Cao et.al [7] perform source-level modeling of
HTTP. However, they attempt to parameterize the round-trip times
seen by the client rather than capture it empirically. Relative to
these efforts, Swing attempts to capture the packet communication
patterns of a variety of applications (rather than individual appli-
cations) communicating across wide-area networks. Application-
speciﬁc workload generators are agnostic to particular network
bandwidths and latencies, TCP particularities, etc. Although recent
efforts characterize P2P workloads at the packet [14] and ﬂow
level [34] we are not aware of any real workload generator for such
systems.
Synthetic trafﬁc trace generation: One way to study statistical
properties of applications and users is through packet traces from
existing wide-area links, such as those available from CAIDA [6]
and NLANR [29]. However, these traces are based on past mea-
surements, making it difﬁcult to extrapolate to other workload and
topology scenarios. RAMP [8] generates high bandwidth traces
using a simulation environment involving source-level models for
HTTP and FTP only. We, on the other hand advocate a single
parameterization model with different parameters (distributions)
for different applications. Rupp et. al [33] introduce a packet trace
manipulation framework for testbeds. They present a set of rules to
manipulate a given network trace, for instance, stretch the duration
of existing ﬂows, add new ﬂows, change packet size distributions,
etc. Our approach is complementary as we focus on generating the
traces using a ﬁrst-principles approach by constructing real packet-
exchanging sources and sinks.
Structural model: The importance of structural models is
well documented [13, 41], but a generic structural model for
Internet applications does not exist to date. Netspec [24] builds
source models to generate trafﬁc for Telnet, FTP, voice, video and
WWW but the authors do not show whether the generated trafﬁc
is representative of real trafﬁc. There is also a source model for
HTTP [7]. However, it consists of both application-dependent and
network-dependent parameters (like RTT), making it difﬁcult to
interpret the results and apply them to different scenarios. There
are a number of other available trafﬁc generators [10], however,
none attempt to capture realistic Internet communication patterns,
leaving parameterization of the generator to users. To the best of
our knowledge, we present the ﬁrst uniﬁed framework for structural
modeling of a mix of applications.
Capturing communication characteristics: There have been
attempts to classify applications based on their communication
patterns [22, 28, 35, 42]. Generating trafﬁc based on clusters of
applications grouped according to an underlying model is part of
our ongoing effort.
Harpoon [36] is perhaps most closely related to our effort.
However, there are key differences in the goals of the two projects,
with corresponding differences in design choices and system capa-
bilities. Harpoon models background trafﬁc starting with measured
distributions of ﬂow behavior on a target link. Relative to their
effort, we consider the characteristics of individual applications
enabling us to vary the mix of, for instance, HTTP versus P2P
trafﬁc in projected future settings. More importantly, Harpoon
is designed to match distributions from the underlying trace at
a coarse granularity (minutes) and thus does not either extract
or playback network characteristics. Swing, on the other hand,
extracts distributions for the wide-area characteristics of ﬂows that
cross a particular link, enabling us to reproduce burstiness of the
packet-arrival process at sub-RTT time scales. This further allows
us to predict the effects, at least roughly, on a packet trace of
changing network conditions.
Relative to recent work investigating the causes for sub-RTT
burstiness [21], we focus on extracting the necessary characteristics
from existing traces to reproduce such burstiness in live packet
traces. As part of future work, we hope to corroborate their ﬁndings
regarding the causes of sub-RTT burstiness.
Felix et. al [16] generate realistic TCP workloads using a
one-to-one mapping of connections from the original trace to the
test environment. Our effort differs from theirs in a number of
ways. We develop a session model on top of their connection
model and this is crucial since the termination time of previous
connections determine the start duration of future connections for
a user/session, thereby making any static connection replay model
essentially unresponsive to changes in the underlying model. As
described earlier, we also advocate a common parameterization
model for various application classes instead of grouping them all
under one class.
Passive estimation of wide-area characteristics: Our effort
builds upon existing work on estimating wide-area network char-
acteristics without active probing. Jaiswal et. al [20] use passive
measurement to infer round trip times by looking at trafﬁc ﬂowing
across a single link. Our methodology for estimating RTTs is
closely related to this effort, though we extend it to build distinct
distributions for the sender- versus receiver-side.
Our approach to measuring RTT distributions is more general
than the popular approach of measuring a single RTT distribution
and dividing it by two to set latencies on each side of the target
link [9]. Such techniques assume that the target link is close to
the border router of an organization, an assumption that is clearly
not general to arbitrary traces (including Mawi). Our techniques
for estimating link capacity measure the mean dispersion of packet
pairs sent from the sender to the target link, as in [11, 19]. Finally,
we resolve ambiguities in loss rate estimates using techniques
similar to [5]. Our approach to measuring RTT and loss rates is
also similar to T-RAT [44]. However, our goals are different: while
T-RAT focuses on analyzing the cause for slowdowns on a per-ﬂow
basis, we are interested in determining the distribution of network
characteristics across time for individual hosts.
In [4] the authors proﬁle various delay components in Web
transactions by tracing TCP packets exchanged between clients and
servers. This work assumes the presence of traces at both the client
and server side and focuses on a single application. For our work,
we utilize a single trace at an arbitrary point in the network and
extract information on a variety of applications. Further, while we
focus on generating realistic and responsive packet traces based on
the measured application, network, and user behavior at a single
point in the network, their effort focuses on root-cause analysis—
determining the largest bottleneck to end-to-end performance in a
particular system deployment.
8. CONCLUSIONS
In this paper, we develop a comprehensive framework for
generating realistic packet traces. We argue that capturing and
reproducing essential characteristics of a packet trace requires a
model for user, application, and network behavior. We then present
one such model and demonstrate how it can be populated using
existing packet header traces. Our tool, Swing, uses these models
to generate live packet traces by matching user and application
characteristics on commodity operating systems subject to the com-
munication characteristics of an appropriately conﬁgured emulated
network. We show that our generated traces match both aggregate
characteristics and burstiness in the byte and packet arrival process
across a variety of timescales when compared to the original trace.
Further, we show initial results suggesting that users can modify
subsets of our semantically meaningful model to extrapolate to
alternate user, application, and network conditions.
Overall, we hope that Swing will enable quantifying the
impact on trafﬁc characteristics of: i) changing network conditions,
such as increasing capacities or decreasing round trip times, ii)
changing application mix, for instance, determining the effects of
increased peer-to-peer application activity, and iii) changing user
behavior, for example, determining the effects of users retrieving
video rather than audio content. Similarly, Swingwill enable the
evaluation of a variety of higher-level application studies, such as
bandwidth/capacity estimation tools and dynamically reconﬁgur-
ing overlays, subject to realistic levels of background trafﬁc and
network variability.
ACKNOWLEDGEMENTS
We would like to thank Vern Paxson for his insightful and detailed
comments in the early days of this work, and Daryl Veitch for
making available the code for creating wavelet scaling plots.
Credits are due to the anonymous reviewers who made valuable
suggestions to improve the work, and ﬁnally to thank NLANR,
WIDE, and CAIDA, who have made this research possible by
allowing access to a large repository of network traces.
9. REFERENCES
[1] ABRY, P., AND VEITCH, D. Wavelet analysis of
long-range-dependent trafﬁc. IEEE Transactions on Information
Theory 44, 1 (1998), 2–15.
[2] Auckland-VI trace archive, University of Auckland, New Zealand.
http://pma.nlanr.net/Traces/long/auck6.html.
[3] BARFORD, P., AND CROVELLA, M. Generating representative web
workloads for network and server performance evaluation. In MMCS
(1998), pp. 151–160.
[4] BARFORD, P., AND CROVELLA, M. Critical path analysis of TCP
transactions. In ACM SIGCOMM (2000).
[5] BENKO, P., AND VERES, A. A passive method for estimating
end-to-end tcp packet loss. In IEEE Globecom (2002).
[6] CAIDA. http://www.caida.org.
[7] CAO, J., CLEVELAND, W., GAO, Y., JEFFAY, K., SMITH, F. D.,
AND WEIGLE, M. Stochastic models for generating synthetic http
source trafﬁc. In IEEE INFOCOMM (2004).
[8] CHAN LAN, K., AND HEIDEMANN, J. A tool for rapid model
parameterization and its applications. In MoMeTools Workshop
(2003).
[9] CHENG, Y.-C., HOELZLE, U., CARDWELL, N., SAVAGE, S., AND
VOELKER, G. M. Monkey see, monkey do: A tool for tcp tracing
and replaying. In USENIX Technical Conference (2004).
[10] DANZIG, P. B., AND JAMIN, S. tcplib: A library of TCP/IP trafﬁc
characteristics. USC Networking and Distributed Systems Laboratory
TR CS-SYS-91-01 (October, 1991).
[11] DOVROLIS, C., RAMANATHAN, P., AND MOORE, D. Packet
dispersion techniques and capacity estimation. In IEEE/ACM
Transactions in Networking, Dec (2004).
[12] FELDMANN, A., GILBERT, A. C., HUANG, P., AND WILLINGER,
W. Dynamics of IP trafﬁc: A study of the role of variability and the
impact of control. In ACM SIGCOMM (1999).
[22] KARAGIANNIS, T., PAPAGIANNAKI, K., AND FALOUTSOS, M.
Blinc: Multilevel trafﬁc classiﬁcation in the dark. In
ACM SIGCOMM (2005).
[23] LE, L., AIKAT, J., JEFFAY, K., AND SMITH, F. D. The Effects of
Active Queue Management on Web Performance. In
ACM SIGCOMM (2003).
[24] LEE, B. O., FROST, V. S., AND JONKMAN, R. Netspec 3.0 source
models for telnet, ftp , voice, video and WWW trafﬁc. In Technical
Report ITTC-TR-10980-19, University of Kansas (1997).
[25] MAH, B. A. An empirical model of HTTP network trafﬁc. In IEEE
INFOCOM (2) (1997).
[26] Mawi working group trafﬁc archive.
http://tracer.csl.sony.co.jp/mawi/.
[27] MEDINA, A., TAFT, N., SALAMATIAN, K., BHATTACHARYYA, S.,
AND DIOT, C. Trafﬁc Matrix Estimation: Existing Techniques and
New Directions. In ACM SIGCOMM (2002).
[28] MOORE, A., AND ZUEV, D. Internet trafﬁc classiﬁcation using
bayesian analysis techniques. In ACM SIGMETRICS (2005).
[29] The national laboratory for applied network research (nlanr )
http://www.nlanr.net.
[30] The network simulator ns-2.
http://www.isi.edu/nsnam/ns.
[31] PAXSON, V. Empirically derived analytic models of wide-area TCP
coections. IEEE/ACM Transactions on Networking 2, 4 (1994),
316–336.
[32] PAXSON, V. End-to-end internet packet dynamics. In IEEE/ACM
Transactions on Networking, Vol.7, No. 3 (June, 1999), pp. 277–292.
[33] RUPP, A., DREGER, H., FELDMANN, A., AND SOMMER, R. Packet
trace manipulation framework for test labs. In Internet Measurement
Conference (2004).
[34] SEN, S., AND WANG, J. Analyzing peer-to-peer trafﬁc across large
networks. In ACM SIGCOMM Internet measurement workshop
(2002).
[35] SMITH, F. D., HERNANDEZ-CAMPOS, F., JEFFAY, K., AND OTT,
D. What TCP/IP protocol headers can tell us about the web. In
SIGMETRICS/Performance (2001), pp. 245–256.
[36] SOMMERS, J., AND BARFORD, P. Self-conﬁguring network trafﬁc
generation. In Internet Measurement Conference (2004).
[37] STANIFORD, S., PAXSON, V., AND WEAVER, N. How to 0wn the
Internet in Your Spare Time. In USENIX Security Symposium (2002).
[38] TANG, W., FU, Y., CHERKASOVA, L., AND VAHDAT, A. Medisyn:
a synthetic streaming media service workload generator. In 13th
International workshop on NOSSDAV (2003).
[39] VAHDAT, A., YOCUM, K., WALSH, K., MAHADEVAN, P., KOSTIC,
D., CHASE, J., AND BECKER, D. Scalability and accuracy in a
large-scale network emulator. In Operating Systems Design and
Implementation (OSDI) (2002).
[13] FLOYD, S., AND PAXSON, V. Difﬁculties in simulating the internet.
[40] WHITE, B., LEPREAU, J., STOLLER, L., RICCI, R.,
In IEEE/ACM Transactions on Networking (2001).
[14] GUMMADI, K. P., DUNN, R. J., SAROIU, S., GRIBBLE, S. D.,
LEVY, H. M., AND ZAHORJAN, J. Measurement, modeling, and
analysis of a peer-to-peer ﬁle-sharing workload. In Symposium on
Operating Sytems Principles (SOSP) (2003).
[15] HARFOUSH, K., BESTAVROS, A., AND BYERS, J. Measuring
bottleneck bandwidth of targeted path. In IEEE INFOCOM (2003).
[16] HERNANDEZ-CAMPOS, F., SMITH, F. D., AND JEFFAY, K.
Generating realistic tcp workloads. In CMG2004 Conference (2004).
[17] HUANG, P., FELDMANN, A., AND WILLINGER, W. A
non-intrusive, wavelet-based approach to detecting network
performance problems. In Internet Measurement Workshop (2001).
[18] JAIN, M., AND DOVROLIS, C. End-to-end available bandwidth:
Measurement methodology, dynamics, and relation with tcp
throughput. In ACM SIGCOMM (2002).
[19] JAIN, M., AND DOVROLIS, C. Ten fallacies and pitfalls in
end-to-end available bandwidth estimation. In Internet Measurement
Conference (2004).
[20] JAISWAL, S., IANNACONE, G., DIOT, C., KUROSE, J., AND
TOWSLEY, D. Inferring tcp connection characteristics through
passive measurements. In IEEE INFOCOM (2004).
[21] JIANG, H., AND DOVROLIS, C. Why is the internet trafﬁc bursty in
short (sub-rtt) time scales? In SIGMETRICS (2005).
GURUPRASAD, S., NEWBOLD, M., HIBLER, M., BARB, C., AND
JOGLEKAR, A. An Integrated Experimental Environment for
Distributed Systems and Networks. In Operating Sytems Design and
Implementation (OSDI) (2002).
[41] WILLINGER, W., PAXSON, V., AND TAQQU, M. S. Self-similarity
and Heavy Tails: Structural Modeling of Network Trafﬁc. In A
Practical Guide to Heavy Tails: Statistical Techniques and
Applications (1998).
[42] XU, K., ZHANG, Z.-L., AND BHATTACHARYA, S. Proﬁling internet
backbone trafﬁc: Behavior models and applications. In
ACM SIGCOMM (2005).
[43] YOCUM, K., EADE, E., DEGESYS, J., BECKER, D., CHASE, J.,
AND VAHDAT, A. Toward scaling network emulation using topology
partitioning. In Eleventh IEEE/ACM International Symposium on
Modeling, Analysis, and Simulation of Computer and
Telecounication Systems (MASCOTS) (2003).
[44] ZHANG, Y., BRESLAU, L., PAXSON, V., AND SHENKER, S. On the
characteristics and origins of internet ﬂow rates. In ACM SIGCOMM
(2002).
[45] ZHANG, Y., PAXSON, V., AND SHENKER, S. The stationarity of
internet path properties: Routing, loss, and throughput. ACIRI
Technical Report (2000).