Sign, the task of the
adversary is essentially to produce σ under a speciﬁc
uniformly chosen R (of unknown discrete logarithm). We
show that this amounts to solving the discrete logarithm
problem in the curve G.
• Do not update rpool of ofﬂine parties: All honest parties
have the same rpool anyway, and there is no point of
concern.
Therefore instead of using complicated mechanisms (eg.
forcing everyone to come online, extra messages on the
blockchain, etc.) to ensure that every honest party agrees on the
same rpool, we design our protocol so that any inconsistencies
in rpool are inconsequential.
We present the protocol below, which includes some opti-
mizations and notation omitted from the above explanation.
Protocol 3: π(2,n)
ρ-sign
Parameters: Elliptic Curve Group (G, G, q)
Parties: Pb for b ∈ [n]
Ideal Oracles: F RDL
Inputs:
Com-ZK, GLedger, random oracle RO
b
• Common: Message to be signed m ∈ {0, 1}∗, public
key pk ∈ G, each party’s share in the exponent pkb =
(0)·F (b) where F is the polynomial over G passing
λ1−b
through (0, pk) and (b, f (b) · G), epoch index epoch ∈
Z+
(0)·
f (b) ∈ Zq
• Private: Each party Pb has private input skb = λ1−b
b
1) Tag R from Threshold Signature: (identical to π(2,2)
ρ-sign)
2) Sample New Polynomial: (identical to π(2,2)
ρ-sign)
3) Store Tagged Refresh:
b, epoch) to rpool
i. Append (R, sk(cid:48)
ii. Establish common nonce K ∈ G along with an
additive sharing of its discrete logarithm:
a. Sample kb ← Zq, set Kb = kb · G and send
b. Upon receiving (committed, 1−b, idcom-zk
1−b ) from
c. Wait to receive (decommitted, 1 − b, idcom-zk
1−b
(com-proof, idcom-zk
F RDL
Com-ZK, send (open, idcom-zk
K1−b ∈ G) from F RDL
d. Set K = Kb + K1−b
, kb, Kb) to F RDL
) to F RDL
Com-ZK
Com-ZK
Com-ZK
,
b
b
iii. Compute
e = RO(R||K||δ||epoch)
zb = e · skb + kb
iv. Send zb to P1−b and wait for z1−b, upon receipt
verifying that
z1−b · G = e · pk1−b + K1−b
and compute z = zb + z1−b
v. Set msg = (R, epoch, δ, K, z)
vi. For each i ∈ [n] \ {b, 1 − b}, send msg to Pi
σ ← πσ
tx) to GLedger
4) Complete the threshold signature protocol by running
5) If σ (cid:54)= ⊥ then set tx = (m, R, σ) and send (Submit, sid,
Sign
We now specify the refresh procedure for a party Pi to
process its received messages, reconstruct rpool, and shift to
the latest shared polynomial. This refresh procedure is general
so that parties who were ofﬂine for a number of epochs can
catch up.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:17:03 UTC from IEEE Xplore.  Restrictions apply. 
617
Protocol 4: π(2,n)
ρ-update
counter
epoch,
=
i, R)}, public key pk, private key share ski
Parameters: Elliptic Curve Group (G, G, q)
Parties: Pi (local refresh protocol)
Ideal Oracles: GLedger
Inputs: Epoch
{(epoch, sk(cid:48)
(deﬁne pki = ski · G).
1) For each unique msg received when ofﬂine do the fol-
lowing:
i. Parse (R, epoch(cid:48), δ, K, z) ← msg and if epoch(cid:48)  epoch so append (epoch(cid:48), δi, R)
2) Send (Read) to GLedger and receive (Read, b) in response.
Set BLK to be the latest blocks occurring in b since last
awake, and in sequence from the earliest block, for each
(σ, R) under pk encountered do the following:
i, epoch) ∈ rpool (match by R), ignore σ
i. Find (R, sk(cid:48)
if not found
ii. Overwrite ski = sk(cid:48)
i, set epoch = epoch + 1, and set
rpool = ∅
iii. For each (epoch, δi, R) ∈ fpool (i.e. matching current
epoch) do:
(i) Set sk(cid:48)
(ii) Append (R, sk(cid:48)
(iii) Remove this entry from fpool
i = ski + δi
i, epoch) to rpool
In the above refresh protocol π(2,n)
ρ-update, the set rpool will
always be consistent across honest parties (except for incon-
sequential differences) and fpool will be empty by the end.
This is due to the fact that fpool contains candidate refresh
values intended for epoch values further than the one “caught
up with” so far; no honest party will approve a candidate with
a higher epoch counter than its own, and every honest party
reaches the same epoch value upon refresh. Further details
can be found in the section addressing non-degeneracy of the
protocol in the proof that follows. We defer the formal theorem
and its proof to Appendix B.
An Optimization: We note that one can save a query
to FCoin and a Zq element from being having to be sent
by deﬁning δ = RO(R||K||epoch) instead of computing it
separately from the internal threshold signature z. As (R, K)
guarantee κ bits of entropy, the resulting δ will be distributed
uniformly.
VIII. PROACTIVE (2, n) ECDSA
Computing (2, n) ECDSA signatures is signiﬁcantly more
difﬁcult than Schnorr, due to the non-linear nature of the
ECDSA signing equation. As a result, all such recent threshold
ECDSA protocols [5], [6], [47], [7] make use of a secure
multiplication functionality (or equivalent protocol) FMUL in
their signing phases. If FMUL were to be instantiated inde-
pendently for each threshold ECDSA signature produced, we
could just use the same strategy as in the previous section,
since the πR
Sign protocol would take only key shares as argu-
ments. However FMUL is expensive to realize for individual
invocations, and given that threshold signature protocols al-
ready need a “preprocessing” phase for key generation (ie.
Setup), all the cited works make use of this phase to also run
πDKG
some preprocessing for FMUL to make its invocation during
signing cheaper. Therefore, we also need to change how we
deal with proactively refreshing the shares. In a nutshell, the
main technical challenge we address in this section is that
now the parties, on top of their key shares, also include in
their persistent storage some state information for the FMUL
protocol and that
this state is a new target for a mobile
adversary. Therefore, the state needs to be refreshed as well.
We start by abstracting the two-party multiplication protocol
(πSetup
) used within ECDSA threshold protocols. The
MUL ,πOnline
MUL
protocols are run by party Pi with Pj as the counterparty as
follows,
• (statei,j
• (ti ∈ Zq) ← πOnline
MUL ∈ {0, 1}∗) ← πSetup
statei,j
MUL (j)
MUL, xj
MUL
(cid:16)
(cid:17)
MUL ,πOnline
MUL
) must realize FMUL. As
The pair of protocols (πSetup
per the functionality speciﬁcation, ti + tj = xi · xj after
is run, and this can be done arbitrarily many times for
πOnline
MUL
different inputs. Every pair of parties in the system shares an
instantiation of FMUL, and so Pi maintains statei,j
MUL for each
j ∈ [n] \ i. Therefore in our abstraction for threshold ECDSA
protocols (πDKG
ECDSA) we include the state
required by Pi for multiplication with Pj as an argument for
online signing. We avoid rewriting the formal abstraction for
readability, as it is essentially a reproduction of Section V with
the inclusion of statei,j
MUL as an argument/output in the correct
places.
Setup, πSetup
ECDSA, πσ
MUL , πR
The same restrictions on the simulators for these protocols
hold, see Section V for details. It
is not hard to show
that the recent protocols of Lindell et al. [6], Gennaro and
Goldfeder [5], and Doerner et al. [7] ﬁt these characterizations.
The inclusion of {statei,j
MUL}j∈[n] as persistent state that parties
must maintain across signatures creates an additional target
that must be defended from a mobile adversary. We show how
here to refresh {statei,j
MUL}j∈[n] required by the OT-based in-
stantiation of FMUL (as in Doerner et al. [7]) and consequently
upgrade compatible threshold ECDSA protocols [7], [5], [6]
to proactive security.
Approach: The setup used by the multiplier of Doerner
et al. consists of a number of base OTs which are “extended”
for use online [48]. These base OTs are the only component
of their multiplier which requires each party to keep private
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:17:03 UTC from IEEE Xplore.  Restrictions apply. 
618
state. Therefore re-randomizing these OTs in the interval
between an adversary’s jump from one party to the other is
sufﬁcient to maintain security. The central idea to implement
this re-randomization is to apply the approach introduced by
Beaver [15] of “adjusting” preprocessed OTs once inputs are
known online.
A. Proactive Secure Multiplication
We begin by describing how two parties can re-randomize
OT itself, and then describe how to apply this technique to
re-randomize OT Extensions.
1
0, r(cid:48)
0 = rb(cid:48) ⊕ r(cid:48)
1 = r1−b(cid:48) ⊕ r(cid:48)
r(cid:48)(cid:48)
b(cid:48)(cid:48) = rb ⊕ r(cid:48)
r(cid:48)(cid:48)
b(cid:48)(cid:48)
a) Re-randomizing Oblivious Transfer: Assume that Al-
ice has two uniform κ-bit strings r0, r1, and Bob has a bit b
and correspondingly the string rb. Let rand ← {0, 1}2κ+1 be a
1 ∈ {0,
uniformly chosen string that is parsed into chunks r(cid:48)
1}κ and b(cid:48) ∈ {0, 1} by both parties. The re-randomization
process for Alice (Refresh OTA) and Bob (Refresh OTB) is
non-interactive (given rand) and proceeds as follows:
1) Refresh OTA ((r0, r1), rand): output r(cid:48)(cid:48)
0 and
2) Refresh OTB ((b, rb), rand): output b(cid:48)(cid:48) = b ⊕ b(cid:48) and
3) Alice now holds (r(cid:48)(cid:48)
It is clear to see that Alice and Bob learn nothing of each
other’s private values, only the offsets r(cid:48)
1, b(cid:48) between the
new and old ones. Consider the view of a mobile adversary
that jumps from one party to the other.
• Alice → Bob: (r0, r1) before the refresh, and (b(cid:48)(cid:48), r(cid:48)(cid:48)
b(cid:48)(cid:48) )
after the refresh.
• Bob → Alice: (b, rb) before the refresh, and (r(cid:48)(cid:48)
1 ) after
the refresh.
Assuming that r(cid:48)
1, b(cid:48) are hidden and that these values are
uniformly chosen, in both the above cases the adversary’s view
before and after the refresh are completely independent.
1 ) and Bob holds b(cid:48)(cid:48), r(cid:48)(cid:48)
b(cid:48)(cid:48)
0 , r(cid:48)(cid:48)
0 , r(cid:48)(cid:48)
0, r(cid:48)
0, r(cid:48)
b) Re-randomizing OT Extensions: The persistent state
maintained by OT Extension protocols based on that of Ishai
et al. [49] consists of the result of a number of OTs performed
during a preprocessing phase. Re-randomizing this state can
be done by simply repeating the above protocol for each
preprocessed OT instance. Indeed, the instantiation of OT
Extension implemented by Doerner et al. is the protocol of
Keller et al. [48] which is captured by this framework.
c) Re-randomizing multipliers: There is no further per-
sistent state maintained across FMUL invocations by the pro-
tocol of Doerner et al. [7], and so we leave implicit the
(cid:48) ← Refresh MUL(stateMUL, rand).
construction of stateMUL
The only missing piece is how rand is chosen; in the context
of the multipliers in isolation, this value can be thought of
coming from a coin-tossing protocol that is invisible to the
adversary (when neither party is corrupt).
B. Multiplier Refresh in (2, n) ECDSA
The previous subsection describes how to realize FMUL with
proactive security when a mechanism to agree on when/which
rand to use is available. Fortunately the protocol described
in Section VII provides exactly such a mechanism for the
(2, n) threshold signature setting. We brieﬂy describe how
to augment Protocol VII to produce the randomness rand
required to proactivize multipliers in addition to the distributed
key shares.
(2, n) Ofﬂine Refresh: The two online parties Pb, P1−b
engage in a coin-tossing protocol in the Sample New Polyno-
mial phase to produce a uniform κ-bit value seed. In the Store
Tagged Refresh phase they include seed to be stored in rpool
(cid:48)
b, R (and communicate