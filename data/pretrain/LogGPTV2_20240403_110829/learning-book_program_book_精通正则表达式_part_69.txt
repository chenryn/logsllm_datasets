&S&"*"is Num #”&
R.GroupNumberFromName(S))
Next
Console.WriteLine("-
Dim I as Integer
For Each I in R.GetGroupNumbers()
Console.WriteLine("Num #*&I&"is Name
R.GroupNameFromNumber（I）&"")
Next
再执行一次，用下面的方法创建Regex对象：
（（S\/) (+[/])// :(+m\））xabaMN
New Regex(*^{?\w+)://(?[~/]+)(?/\S*),
RegexOptions.Compiled)
得到下面的结果（为适应排版，有个正则表达式省略了后半段）
Regex is:^(\w+)://([/]+)(/\S*)
Regex is: ~(?\w+) ://(? .
Option are:0
Option are:8
Is Right-To-Left: False
Is Right-To-Left: False
Name *0*is Num #0
Name"0"is Num #0
Name "1* is Num #1
Name
"proto"is Num #1
Name "2"is Num
#2
Name
"host" is Num #2
Name
"3 "
is Num #3
Name
#wnN STabed
Num #0
is Name
"0 *
Num#0
is Name
“0”
Num #1
is Name
"1 "
Num#1
is Name
"proto"
Num #2
is Name
“2"
Num #2
is Name
"host"
Num #3 is Name
“3 *
Num #3 is Name
"page"
---
## Page 455
核心对象详解
429
MatchObj.Length
返回实际匹配文本的长度。
MatchObj.Index
返回一个整数，显示匹配文本在目标中的起始位置。编号从0开始，所以这个数字表示从
目标字符串的开头（最左边）到匹配文本的开头（最左边）的长度。即使在创建Match对
象时设置了RegexOptions.RightToLeft，回值也不会变化。
MatchObj.Groups
此属性是一个GroupCollection对象，其中封装了多个Group对象。它是一个普通的集合
类（collection），包含了Count和Item属性，但是最常用的办法还是按照索引l值访问，取
出对应的Group对象。例如，M.Groups（3）对应第3组捕获型括号，M.Groups（HostName”）
）
在C#中，使用M.Groups[3]和M.Groups["HostName"]。
编号为0的分组表示整个正则表达式匹配的所有文本。MatchObj.Groups（0）.Value等价于
MatchObj.value。
MatchObj.NextMatch()
NextMatch（）方法将正则表达式应用于目标字符事，寻找下-个匹配，返回新的Match对
象。
MatchObj.Result(string)
string是一个特殊的序列，按照第424页补充内容的介绍来处理，返回结果文本。这里有个
简单例子：
Dim M as Match = Regex.Match(SomeString,"\w+")
Console.WriteLine(M.Result("The first word is'S&'"))
下面的程序可以依次匹配内容左侧和右侧文本的副本
M.Result（"S""）‘这是匹配内容左侧的文本
M.Result（"$'"）'这是匹配内容右侧的文本
调试时可能需要显示某些和行有关的信息：
M.Result("[$'S']*))
如果把'\d+i应用到‘May16，1998’得到的Match对象，返回的是‘May，1998”，
这清楚地体现了匹配文本。
---
## Page 456
430
第9章：.NET
MatchObj.Synchronized()
它返回一个新的，与当前Match完全一样的Match对象，只是它适合于多线程使用。
MatchObj.Captures
Captures属性并不常用，参见第437页的介绍。
使用Group对象
Llsing Group Ohjects
Group对象包含一组捕获型括号（如果编号是0，就表示整个匹配）的信息。其属性和方法
如下：
GroupObj.Succe88
它返回一个Boolean值，表明此分组是否参与了匹配。并不是所有的分组都必须“参与”成
功的全局匹配。如果（this）1（that）能够成功匹配，肯定有一个分组能参与匹配，另一个
不能。第139页的脚注中有另一个例子。
GroupObj.Value
GroupObj.Tostring()
它们都返回本分组捕获文本的副本。如果匹配不成功，则返回空字符串。
GroupObj.Length
返回本分组捕获文本的长度。如果匹配不成功，则返回0。
GroupObj.Index
返回一个整数，表示本分组捕获的文本在目标字符串中的位置。编号从0开始，所以它就
是从自标字符串的开头（最左边）到捕获文本的开头（最左边）的长度（即使在创建Match
对象时设置了RegexOptions.RightToLeft，结果仍然不变）。
GroupObj.Captures
请参考第437页Group对象的Capture属性。
---
## Page 457
静态“便捷”函数
431
静态“便捷”函数
Static“Convenience"Functious
对象。我们可以通过下面的静态函数直接使用正则表达式：
Regex.IsMatch(target, pattern)
Regex.IsMatch(target, pattern, options)
Regex.Match(target,pattern)
Regex.Match(target, pattern,options)
Regex.Matches(target, pattern)
Regex.Matches(target,pattern, options)
Regex.Replace(target, pattern,replacement)
Regex.Replace(target,pattern,replacement，options)
Regex.Split(target, pattern)
Regex.Split(target, pattern, options)
其实它们不过是包装了已经介绍的主要的Regex构造函数和方法而已。它们会临时创建一
个Regex对象，用它来调用请求的方法，然后弃用这个对象（其实并没有弃用，稍后介绍）
这里有个例子：
If Regex.IsMatch(Line,*^\s*$")
它等价于：
Dim TemporaryRegex = New Regex("^\s*$*)
If TemporaryRegex.IsMatch(Line)
或者，更确切地说是：
If New Regex(*^\s*$*).IsMatch(Line)
使用这些便捷函数的好处在于，代码因此更清晰易懂。面向对象式处理看起来像函数式处
理（95），坏处在于每次调用都必须重新检查pattem字符串。
如果在整个程序的执行过程中，正则表达式只用到1次，就不需要考虑便捷函数的效率问
题。但是，如果需要应用多次（例如在循环中，或者是频繁调用的函数中），每次准备正则
表达式都需要代价（241）。创建Regex对象，然后重复使用的主要原因之一就是，使用
便捷函数的效率太低。不过，下一节将告诉我们，.NET提供了一种很好的解决办法：兼具
面向对象的效率和函数式处理的便捷。
---
## Page 458
432
第9章：.NET
正则表达式缓存
Regex Caching
为简单的正则表达式构建并管理Regex对象很不方便，所以.NET的正则包提供了各种静态
方法。但这些静态方法存在效率缺陷，即每次调用都需要创建临时的Regex对象，应用它，
然后弃用。如果在循环中需要多次应用同样的正则表达式，就需要进行许多不必要的工作。
为了避免重复的工作，.NETFramework能够缓存静态方法创建的临时变量。第6章已经大
使用过的正则表达式，此方法就会重用之前创建的正则对象，而不是重新创建一个新对象。
“最近”的默认意义是缓存15个正则表达式。如果循环中使用的正则表达式超过15个，
则第16个正则表达式会取代第1个，所以进人下一轮循环时，第一个正则表达式已经不在
缓存中，必须重新生成。
如果默认值15太小，可以这样调整：
Regex.CacheSize = 123
如果希望禁用缓存，可以将其设置为0。
支持函数
SupportFunctions
除了之前讨论过的便捷函数，还有一些静态的支持函数：
Regex.Bscape(string)
Regex.Escape(….)返回此字符串的副本，其中的元字符会进行转义。这样处理的字符串就
能够作为文字字符串供正则表达式使用。
例如，如果用户的输人保存在字符串SearchTerm中，我们可以这样构建正则表达式：
RegexOptions.IgnoreCase)
这样，用户输入的元字符就不会被特殊处理了。如果不转义，假设用户输人了‘：-）”，就
会抛出ArgumentException异常（419)。
---
## Page 459
支持函数
433
Regex.Unescape(string)
这个函数有点奇怪，它接收一个字符事，返回此字符事的副本，不过要处理其中的元字符，
去掉其他的反斜线。如果输人的是‘\：\-\）”，返回值就是：-）
替换为对应的Unicode字符。第407页列出的所有字符缩略表示法都会被处理。
作生成VB字符串的通用工具。
Match.Empty
此函数返回代表匹配失败的Match对象。它的用处可能在于，如果初始化的某个Match对
象将来不一定会被用到，但又必须能够查询。这里有个简单的例子：
Dim Line as String
For Each Line in EmailHeaderLines
如果这是标题，保存匹配的信息··
RegexOptions.IgnoreCase)
If ThisMatch.Success
SubMatch = ThisMatch
End If
Next
***
If SubMatch.Success
Console.WriteLine(SubMatch.Result("The subject is: S1"))
Else
Console.WriteLine("No subject!")
End If
如果字符串数组EmailHeaderLines没有任何行（或者没有Subject行），程序中的循环就
不会设置SubMatch，如果SubMatch没有初始化，循环之后检查SubMatch会得到一个空
引用异常。这种情况下用Match.Empty来初始化就很方便。
Regex.CompileToAsBembly(.)
它容许用户创造一个装配件（assembly），封装正则表达式一一参见下一节。
---
## Page 460
434
第9章：.NET
.NET高级话题
Adoanced.NET
下面的内容涉及某些尚未介绍过的特性：通过正则装配件（regexassemblies）构建正则表达
式库，使用.NET专属的特性匹配嵌套结构，以及对Capture对象的讲解。
正则表达式装配件
Regex Assemblies
.NET能够把Regex对象封装到装配件（assembly）中，在构建正则表达式库时这很有用。
下一页的补充内容提供了示例。
运行补充内容中的例子，能够在当前工程的bin代码目录下创建JfriedlsRegexLibrary.DLL。
然后我们可以通过VisualStudio.NET的Project>AddReference将其加入，在其他工程中使
用这个装配件。
要使用装配件中的类，首先必须导入：
Imports jfriedl
然后就可以像其他任何类一样引用它们，例如：
DimFieldMatchasMatch=FieldRegex.Match（Line）'应用到字林串..
While FieldMatch.Success
Dim Field as String
If FieldMatch.Groups (1).Success
Field=FieldMatch.Groups("QuotedField*).Value
Field=Regex.Replace（Field，"*""""，""""）·把连在一起的引号替换为单个引号
Else
Field = FieldMatch.Groups(*UnquotedField").Value
End If
Console.WriteLine(["&Field &"])
现在可以处理·Field'...