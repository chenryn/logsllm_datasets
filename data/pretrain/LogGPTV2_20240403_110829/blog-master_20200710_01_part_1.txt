## PostgreSQL 优化case - where A字段范围 order by B字段排序 limit x  
### 作者    
digoal    
### 日期    
2020-07-10  
### 标签    
PostgreSQL , 排序 , 范围过滤 , 分页    
----    
## 背景    
优化的目标是尽量减少计算, IO, filter, recheck等.  
比如以下查询, 乍看一下难以优化  
```  
select * from tbl where ts between x and y   
order by z limit x;  
```  
1、查询条件ts字段是范围, 跨度大, 满足的结果很多, 按z排序需要显示的sort大量记录.  
2、排序按z字段, z顺序返回时, 满足ts条件的记录都很靠后, 需要大量filter.  
因为ts和z是两个字段, 没法使用index(ts,z)或者index(z,ts)来做到完全走索引就可以.  
### 优化  
首先了解背景  
z为pk,   
z和ts具有线性相关性(正相关或负相关), 并且都有方向性, 例如递增, 或者递减. 因此这个查询可以进行修改.  
```  
select * from tbl where ts between x and y   
and z ?   
order by z limit x;  
```  
每次查询n条, 逐次推进, 将所有满足ts between x and y条件的记录分批查出来并处理.  
优化思路:   
1、补充z的条件作为初始条件, 这样不需要过多的过滤.  
```  
select min(z), max(z) into id1,id2 from tbl where ts between x and y;  
select * from tbl where ts between x and y   
and z>=id1 and z  Index Scan using tbl_pkey on public.tbl  (cost=0.57..3208769.85 rows=37078282 width=45) (actual time=4003.045..4003.062 rows=100 loops=1)  
         Output: id, info, crt_time  
         Filter: ((tbl.crt_time >= '2020-07-10 14:05:45'::timestamp without time zone) AND (tbl.crt_time =29130420 and id=29130420 and id  Index Scan Backward using tbl_pkey on public.tbl  (cost=0.57..1374883.82 rows=13745329 width=45) (actual time=0.021..0.043 rows=100 loops=1)  
         Output: id, info, crt_time  
         Index Cond: ((tbl.id >= 29130420) AND (tbl.id = '2020-07-10 14:05:45'::timestamp without time zone) AND (tbl.crt_time   Index Scan Backward using tbl_pkey on public.tbl  (cost=0.57..2298576.97 rows=24640916 width=45) (actual time=0.041..0.065 rows=100 loops=1)  
         Output: id, info, crt_time  
         Index Cond: (tbl.id = '2020-07-10 14:05:45'::timestamp without time zone) AND (tbl.crt_time <= '2020-07-10 14:07:00'::timestamp without time zone))  
         Buffers: shared hit=8  
 Planning Time: 0.107 ms  
 Execution Time: 0.097 ms  
(10 rows)  
```  
性能提升40000倍.  
### case2:  
按event_time范围过滤, 按crt_time排序输出, 由于排序范围较大, 建议使用索引顺序返回; 但是由于还需要过滤event_time范围, 如果按索引顺序扫描时大量不符合条件的event_time, 造成扫描浪费.   
假设以下查询都是event_time按天的, 那么可以把event_time从范围匹配变成分散匹配.  从而用上联合索引+索引排序. (注意跨天的查询, 需要union all + merge append sort 的方法优化)   
优化前:  
```  
create unlogged table a (id int, event_time timestamp, crt_time timestamp, info text) ;  
insert into a select id, clock_timestamp()+((id+random()*100)||' second')::interval, clock_timestamp()+((id+random()*100)||' second')::interval, (random()*100)::int::text  
from generate_series(1,10000000) id;  
select min(event_time), max(event_time), min(crt_time), max(crt_time) from a;    
            min             |            max             |            min             |            max               
----------------------------+----------------------------+----------------------------+----------------------------  
 2022-08-22 17:11:47.322564 | 2022-12-16 11:00:04.718084 | 2022-08-22 17:11:43.500185 | 2022-12-16 11:00:04.851408  
(1 row)  