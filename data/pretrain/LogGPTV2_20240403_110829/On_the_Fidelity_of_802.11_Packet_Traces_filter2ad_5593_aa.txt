# On the Fidelity of 802.11 Packet Traces

## Authors
Aaron Schulman, Dave Levin, and Neil Spring  
Department of Computer Science  
University of Maryland, College Park  
{schulman, dml, nspring}@cs.umd.edu

## Abstract
Packet traces from 802.11 wireless networks are inherently incomplete due to both fundamental limitations, such as antennas not capturing every transmission, and practical constraints, such as under-provisioned hardware and software. Deploying multiple monitors can improve trace completeness, but merging these traces into a coherent view introduces errors. This paper presents methods to evaluate the fidelity of merged and independent wireless network traces. We demonstrate that wireless traces contain sufficient information to measure their completeness and clock accuracy. Specifically, packet sequence numbers indicate dropped packets, and access point (AP) beacon intervals help determine the accuracy of packet timestamps. We also show that trace completeness and clock accuracy vary with network load. We apply these metrics to visualize the completeness of different 802.11 traces and estimate the uncertainty in time measurements made by individual monitors.

## 1. Introduction
Studying real-world wireless networks provides researchers with a more accurate understanding of 802.11 behavior than simulations alone. Researchers deploy monitors at hotspots like cafes or conferences, or measure other deployed networks, to obtain traces of MAC and user behaviors. These traces provide realistic models of mobility and interference, and many are available through repositories like CRAWDAD.

However, real wireless network traces have their own set of errors and assumptions. Capturing high-quality traces requires careful deployment of monitors. Using too few monitors, placing them poorly, or using inadequate hardware can lead to missed or reordered packets and incorrect timestamps. If multiple monitors are used, a merging algorithm combines the independent traces into a single view, but this process may introduce ordering errors. Publicly available wireless traces vary greatly in quality, and researchers must carefully select the most suitable trace for their needs.

We address the problem of measuring the fidelity of wireless traces, focusing on their completeness (the fraction of packets captured) and the accuracy of their timestamps. Our work is motivated by the need to ensure that experimental data closely reflects reality. We discuss how to measure trace fidelity using information within the trace itself, as external validation data is rarely available. We analyze a scoring method for wireless traces and propose a visualization technique to incorporate load. We present several case studies from the CRAWDAD repository and study the accuracy of monitor and beacon timestamps. Our findings and code are available at http://www.cs.umd.edu/projects/wiﬁdelity.

## 2. Related Work
Many researchers have sought to improve the fidelity of wireless traces. Yeo et al. [17, 16] and Rodrig et al. [14] discuss steps to obtain high-fidelity traces and use missing packets as a measure of fidelity. We focus on the relationship between trace quality and monitor load, and compare existing traces using our metrics.

Wit [10] attempts to refine existing traces by inferring and inserting missing packets. While we believe that capturing as complete a trace as possible is preferable, more complete traces will aid in missing packet inference. Our tools aim to guide researchers in capturing better traces and choosing the most suitable one for their needs.

Wireless traces are used for various purposes, such as validating models of wireless behavior and studying usage characteristics. Jigsaw [5, 4] uses wireless traces to measure and troubleshoot wireless networks. We emphasize that these projects evaluate the network, not the trace. Our work complements these efforts by addressing potential pathologies in the input trace data.

## 3. Self-Evident Truths of Wireless Traces
Ideally, one could determine a trace's fidelity by comparing it to a perfect, complete trace. In practice, only the trace itself is available. We show how the information within a wireless trace can be used to measure its fidelity by detecting missed packets and measuring clock skew, and discuss the limitations of our methods.

### 3.1 Core Data in Wireless Traces
Traces vary in the information they include. Some have nanosecond-precise timestamps, while others only have millisecond precision. Not all traces record 802.11 acknowledgments, and full payloads are rarely released to maintain user anonymity. The following core data are available in all 802.11 CRAWDAD traces:
1. All types of data packets.
2. All types of management packets, including beacons, probe requests, and probe responses.
3. Full 802.11 header in all captured packets, including source and destination addresses (possibly anonymized), sequence number, retransmission bit, type, and subtype. Beacon packets also have timestamps applied by the AP.
4. Monitor’s timestamp (set by the kernel or possibly the device).

### 3.2 Detecting Missed Packets
Monitors can fail to capture packets due to overload, interference, weak signals, and other factors. Placing monitors near APs can reduce packet loss. Most packet loss can be inferred from 802.11 sequence numbers and the retransmission bit. Each host (AP and client) assigns a monotonically increasing sequence number to each packet, and sets the retransmission bit to zero. Gaps in sequence numbers and retransmitted packets without corresponding initial transmissions indicate missed packets. Missed retransmissions are harder to infer, as the sequence number remains unchanged and the retransmission bit is set to one. Without 802.11 acknowledgments, some retransmissions cannot be inferred.

### 3.3 Detecting Incorrect Timestamps
Monitors apply a timestamp to each packet, which can be subject to delay at the AP and clock skew or drift at the monitor. Beacon packets serve as a reference for synchronizing the monitor’s clock, but their timestamps can be delayed under high load. When it is time to send a beacon, the AP creates the payload, including the timestamp, and attempts to send it. Under high load, the packet may be delayed, increasing the difference between the packet’s timestamp and when it was actually sent.

## 4. Scoring a Wireless Trace’s Completeness
We propose a method to score the completeness of wireless traces. We value completeness, defined as the fraction of packets captured, and expect more complete traces to be more useful. We use our score along with traffic load to visualize completeness.

### 4.1 Estimating the Number of Missed Packets
Our scoring method is based on the number of missing packets. We define \( P_t \) as the number of packets that should have appeared over time \( t \):

\[ P_t = \sum_{\text{nodes}} (\Delta \text{SeqNum}_t + \text{Retransmissions}_t) \]

The number of missing packets during time \( t \), \( M_t \), is the number of packets that should have been captured minus the number of packets that were captured:

\[ M_t = P_t - \sum_{\text{nodes}} \text{NumPacketsCaptured}_t \]

To validate this expression, we apply it to intentionally degraded traces. Starting with a high-quality trace (the Portland State University ug trace [13]), we created progressively lower-quality traces by removing non-beacon packets uniformly at random. Figure 2 shows the error of our missing packets estimation. Even with a drastically degraded trace missing 95% of non-beacon packets, our score underestimates actual packet loss by only 10%. For more reasonable packet loss, our score has less than 5% error.

### 4.2 Score Definition
We define the score of a wireless trace’s completeness during time \( t \), \( S_t \), as the fraction of packets captured during time \( t \):

\[ S_t = 1 - \frac{M_t}{P_t} \]

Both APs and clients increment an independent sequence number for each unique packet transmitted. The technique used to reveal missing packets sent by an AP can do the same for clients. Unlike APs, clients do not transmit beacon packets at regular intervals, so we must track the time since the last received packet from a given client to distinguish loss from mobility. Our scoring method is subject to the same limitations as the missing packet estimation; it cannot identify missing retransmissions.

## 5. Visualizing Wireless Trace Completeness
Trace completeness is a crucial component of fidelity. A single percentage can be misleading, as trace quality depends on load. For example, the Sigcomm 2004 trace “chi” contains 81% of AP data and management transmissions on channel 11, but 37% of the packets collected were beacon packets sent when the AP was idle. Excluding these, the monitor only saw 70% of the AP’s transmissions.

### 5.1 T-Fi Plots
To overcome this, we visualize the score with a colormap, referred to as T-Fi or Trace Fidelity plots. The x-axis denotes the load from an epoch (beacon interval) in terms of the sequence number change during that epoch, and the y-axis denotes the score for that load. Color intensity denotes the frequency of that (x, y)-pair throughout the trace.

- The location on the y-axis shows completeness.
- The width of the shaded region on the x-axis shows the range of load.
- The intensity of the shaded region shows the frequency of load.

An ideal trace would have no missing packets and a score of 1, visualized as a dark bar at the top of the graph. Figure 3 (left) shows how a T-Fi plot can overcome the single number problem. The darkest point represents idle time beacon packets, and the plot shows a negative correlation between fidelity and load.

## Figures
- **Figure 1**: Example sources of packet loss or timing errors in capturing wireless traces.
- **Figure 2**: Validation of our missing packets estimation.
- **Figure 3**: Example T-Fi plots from the Sigcomm 2004 “chi” dataset, with scoring for only the AP (left), and scoring for APs and clients in a BSS (right).
- **Figure 4**: T-Fi plots for various Portland traces.

## Acknowledgments
This work was supported by NSF-0643443 (CAREER). Dave Levin was supported in part by NSF Award CNS-0626964 and NSF ITR Award CNS-0426683.

## References
- [1] Reference 1
- [2] Reference 2
- [3] Reference 3
- [4] Reference 4
- [5] Reference 5
- [6] Reference 6
- [7] Reference 7
- [8] Reference 8
- [9] Reference 9
- [10] Reference 10
- [11] Reference 11
- [12] Reference 12
- [13] Reference 13
- [14] Reference 14
- [15] Reference 15
- [16] Reference 16
- [17] Reference 17