title:On the Fidelity of 802.11 Packet Traces
author:Aaron Schulman and
Dave Levin and
Neil Spring
On the Fidelity of 802.11 Packet Traces(cid:2)
Aaron Schulman, Dave Levin, and Neil Spring
Department of Computer Science
University of Maryland, College Park
{schulman,dml,nspring}@cs.umd.edu
Abstract. Packet traces from 802.11 wireless networks are incomplete
both fundamentally, because antennas do not pick up every transmission,
and practically, because the hardware and software of collection may be
under provisioned. One strategy toward improving the completeness of
a trace of wireless network traﬃc is to deploy several monitors; these are
likely to capture (and miss) diﬀerent packets. Merging these traces into
a single, coherent view requires inferring access point (AP) and client
behavior; these inferences introduce errors.
In this paper, we present methods to evaluate the ﬁdelity of merged
and independent wireless network traces. We show that wireless traces
contain suﬃcient information to measure their completeness and clock
accuracy. Speciﬁcally, packet sequence numbers indicate when packets
have been dropped, and AP beacon intervals help determine the accuracy
of packet timestamps. We also show that trace completeness and clock
accuracy can vary based on load. We apply these metrics to evaluate
ﬁdelity in two ways: (1) to visualize the completeness of diﬀerent 802.11
traces, which we show with several traces available on CRAWDAD and
(2) to estimate the uncertainty in the time measurements made by the
individual monitors.
1 Introduction
Studying wireless networks “in the wild” gives researchers a more accurate
view of 802.11 behavior than simulations alone. Researchers deploy monitors
at hotspots such as cafes or conferences [10], or measure other deployed net-
works [1], to obtain traces of MAC and user behaviors. These traces provide
realistic models of mobility [18, 11] and interference [1, 3] and many traces are
readily available through sites such as CRAWDAD [7].
However, traces of real wireless networks have their own errors or assump-
tions. Indeed, capturing a high-quality wireless trace requires great care. Us-
ing too few monitors, placing them poorly, or using inadequate hardware can
introduce missed or reordered packets and incorrect timestamps [16, 17, 10].
If multiple monitors are used, a merging algorithm combines the independent
traces into a single view of the wireless network [10], but this process may order
(cid:2) This work was supported by NSF-0643443 (CAREER). Dave Levin was supported
in part by NSF Award CNS-0626964 and NSF ITR Award CNS-0426683.
M. Claypool and S. Uhlig (Eds.): PAM 2008, LNCS 4979, pp. 132–141, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
On the Fidelity of 802.11 Packet Traces
133
packets incorrectly. These potential errors mean that publicly available wireless
traces vary greatly in quality (§5). Researchers must decide for themselves which
wireless trace will provide them the most accurate, reproducible results.
We consider the problem of measuring the ﬁdelity of wireless traces, which we
decompose to their completeness—what fraction of the packets that could have
been captured in fact were—and the accuracy of their timestamps. Our work
is motivated by others’ observations on how to use and improve the data that
drives the networking community. As Paxson [12] notes, it is beneﬁcial to identify
how closely a measurement compares to reality before using it as experiment
data. Haeberlen et al. also observe that researchers may fall into the trap of
inappropriately generalizing their results if based on very speciﬁc or perhaps
error-ridden data [8]. The diﬃcult nature of capturing wireless traces further
motivates a set of metrics and systematic means of measuring their quality.
We discuss how wireless trace ﬁdelity can be measured by exploiting infor-
mation in the trace (§3); external validation data is rarely available. We ana-
lyze a scoring method for wireless traces (§4). The percent of packets captured
has been thought to be suﬃcient for quantifying a trace’s ﬁdelity, but we show
that a richer description of ﬁdelity is important and propose a way to visualize
trace completeness that incorporates load (§5). We present several case studies
from the CRAWDAD repository. We then study the accuracy of monitor and
beacon timestamps, showing that clock accuracy is largely inversely proportion-
ate to load and that clocks may need to be synchronized more frequently than
at beacon intervals (§6). We conclude with lessons learned and directions for
future work (§7). http://www.cs.umd.edu/projects/wiﬁdelity holds our code and
results.
2 Related Work
Because wireless traces are imperfect, many researchers have sought to improve
trace ﬁdelity. Yeo et al. [17, 16] and Rodrig et al. [14] discuss the steps they
took to obtain high-ﬁdelity traces, and use missing packets (§4) as a measure
of ﬁdelity. We focus on the relationship between trace quality and load on the
monitor, and compare existing traces using our metrics.
Wit [10] attempts to reﬁne existing traces by inferring and inserting missing
packets. We believe traces that are as complete as possible at the time of capture
are preferable, but that more complete traces will help the missing packet infer-
ence. Our tools are intended to help guide researchers toward capturing better
traces and choosing the trace that best suits their needs.
Wireless traces are used for many reasons: to validate models of wireless be-
havior, study usage characteristics, and so on. Jigsaw [5, 4] uses wireless traces
to measure and troubleshoot wireless networks. We emphasize that these pieces
of work evaluate the network, and not the trace. We expect our work to com-
plement these and other similar projects as pathologies in the input trace data
could easily lead to false diagnosis by troubleshooting tools.
134
A. Schulman, D. Levin, and N. Spring
3 Self-evident Truths of Wireless Traces
Ideally, one could determine a trace’s ﬁdelity by comparing it to “truth”: a
perfect, complete trace of what was sent and when. In practice, only the trace
itself is available. We show how the information in a wireless trace itself can be
used to measure the trace’s ﬁdelity by detecting missed packets and measuring
clock skew, and discuss the limitations of our methods.
3.1 Core Data in Wireless Traces
Traces vary in the information they include. Some traces have timestamps precise
to nanoseconds, others only to milliseconds; not all traces record 802.11 acknowl-
edgments; to maintain users’ anonymity, few researchers release full payloads,
and so on [15, 13]. The following data are available in all 802.11 CRAWDAD
traces; we assume them as the core data that are likely to be available in future
wireless traces:
1. All types of data packets.
2. All types of management packets including beacons, probe requests, and
probe responses.
3. Full 802.11 header in all captured packets, including source and destination
addresses (possibly anonymized), sequence number, retransmission bit, type,
and subtype. Beacon packets also have timestamps applied by the AP.
4. Monitor’s timestamp (set by the kernel or possibly the device).
3.2 Detecting Missed Packets
Monitors can fail to capture a packet because the monitor is overloaded, because
there is interference and perhaps no stations receive the packet, because the
signal is too weak at the monitor, and so on (Fig. 1). A common practice to
reduce the number of missed packets is to place each monitor near an AP.
Most packet loss at the monitor can be inferred from 802.11 sequence numbers
and the retransmission bit. When initially transmitted, each host (AP and client)
assigns a packet a monotonically increasing sequence number from 0 to 4095 (or
2047 in some Cisco APs), and sets the retransmission bit to zero. One sign of
missed packets is a gap in captured sequence numbers from a given host. Another
sign of missed packets is a retransmitted packet without the corresponding ﬁrst
(non-re)transmission.
Missed retransmissions are more diﬃcult to infer. Upon retransmission, the
packet’s sequence number remains unchanged, but the retransmission bit is set
to one; future retransmissions of this packet are identical, which means that
not all retransmissions can be inferred. If 802.11 acks and accurate timestamps
are available, some of these retransmissions could be inferred. For instance, if a
monitor captures an ack that is too late to correspond to any captured retrans-
mission, we could infer that there must have been another retransmission. We do
not consider this approach further, since not all traces contain acknowledgments.
On the Fidelity of 802.11 Packet Traces
135
Packet
preemption
...
device
driver
wireless
card
Ignored
interrupt
Socket
buffer full
wireless
card
device
driver
kernel
app
Access Point
Interference
Out−of−range
Redundant
packets dropped
Monitor
Causes timing delays
Causes missed packets
Fig. 1. Example sources of packet loss or timing errors in capturing wireless traces
3.3 Detecting Incorrect Timestamps
Monitors apply a timestamp to every packet in the kernel or possibly in the
wireless device itself. The accuracy of these timestamps is vulnerable to delay
at the AP and clock skew or clock drift at the monitor. Delay at monitors can
come for many reasons, some of which we show in Fig. 1.
Beacon packets serve as a source of “truth” in that they allow us to syn-
chronize the monitor’s clock [10, 5]. However, this introduces its own sources of
inaccuracy; timestamps in the beacon packets are subject to delay errors at the
AP. Delay at the AP comes predominately in times of high load. When it is time
to send a beacon packet, the AP creates the payload (including the timestamp),
and attempts to send it. The timestamp in the beacon packets denotes when
the packet was created, not necessarily when it was sent. Under high load, the
packet may be stalled until the medium becomes free [2], increasing the diﬀerence
between the packet’s timestamp and when it was actually sent.
4 Scoring a Wireless Trace’s Completeness
We propose a method to score wireless trace completeness. We value complete-
ness—the fraction of packets captured—with the expectation that the more
complete a trace is, the more useful it is. In the following section, we use our
score along with traﬃc load to visualize completeness.
4.1 Estimating the Number of Missed Packets
Our scoring method is based on the number of missing packets from the wireless
trace. This is an extension of what was introduced by Yeo et al. [16]. We deﬁne
Pt to be the number of packets that should have appeared over time t.
Pt
def=
(cid:2)
nodes
(cid:2)
nodes
SeqNumChanget +
Retransmissionst
The number of missing packets during time t, Mt, is the number of packets that
should have been captured minus the number of packets that were captured:
Mt
def= Pt − (cid:2)
nodes
NumPacketsCapturedt
136
A. Schulman, D. Levin, and N. Spring
t
e
a
m
i
t
s
e
t
e
k
c
a
p
.
s
s
m
i
f
o
r
o
r
r
e
.
l
e
R
 0.1
 0.08
 0.06
 0.04
 0.02
 0
-0.02
-0.04
 0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1
Frac. non-beacon packets removed
Fig. 2. Validation of our missing packets estimation. Starting with a high-quality trace
(the Portland State University ug trace [13]), we remove non-beacon packets uniformly
at random. Error bars represent 95% conﬁdence intervals.
To evaluate the accuracy of this expression, we apply it to traces that we inten-
tionally degrade. Starting with a high-quality trace (the Portland ug trace), we
created progressively lower-quality traces by removing non-beacon packets uni-
formly at random and computed our score on these degraded traces (we expect
monitors to capture most beacon packets: §5). We present the error of our miss-
ing packets estimation in Figure 2. Ideally, our method would detect all of these
removed packets, but it is impossible to detect missing retransmission packets
without 802.11 acknowledgments (§3). Even with a drastically degraded trace
missing 95% of non-beacon packets, our score underestimates actual packet loss
by only 10%. For more reasonable packet loss, our score has less than 5% error.
These results indicate that this method of detecting missing packets is accurate
for both high- and low-quality traces.
4.2 Score Deﬁnition
We deﬁne the score of a wireless trace’s completeness during time t, St, as the
fraction of packets captured during time t: St
. Both APs and clients
increment an independent sequence number for each unique packet transmitted.
The technique used to reveal missing packets sent by an AP can do the same for
clients. Unlike APs, clients do not transmit beacon packets at a regular interval.
We must therefore be careful to keep track of how long it has been since the
monitor last received a packet from a given client, so as to distinguish loss
from, say, mobility. Our scoring method is subject to the same limitations as the
missing packet estimation; the score cannot identify missing retransmissions.
def= 1 − MtPt
5 Visualizing Wireless Trace Completeness
Trace completeness is an important component of ﬁdelity. Rodrig et al. [14], for
example, have used the percent of packets captured, similar to the score from
§4, but we ﬁnd a single number to be insuﬃcient. This is in part because trace
On the Fidelity of 802.11 Packet Traces
137
e
r
o
c
S
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 10
 20
 30
 40
 50
 1e+07
 1e+06
 100000
 10000
 1000
 100
 10
 1
e
r
o
c
S
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 10
 20
 30
 40
 50
 1e+07
 1e+06
 100000
 10000
 1000
 100
 10
Load (change in sequence number)
Load (change in sequence number)
Fig. 3. Example T-Fi plots from the Sigcomm 2004 “chi” dataset, with scoring for only
the AP (left), and scoring for APs and clients in a BSS (right)
quality can depend on load. A monitor may appear to capture a high percentage
of packets, and one may be inclined to use that percentage to quantify the quality
of a trace, but this number is misleading. For example, the Sigcomm 2004 trace
“chi” contains 81% of AP data and management transmissions on channel 11.
This percentage does not reveal that 37% of the packets collected were beacon
packets sent when the AP was idle; not sending any other data or management
packets. Excluding beacon packets sent during otherwise idle times, the monitor
only saw 70% of the AP’s transmissions.
5.1 T-Fi Plots
To overcome this problem, we visualize the score with a colormap, as shown
in Figure 3. We refer to the colormaps as T-Fi or Trace Fidelity plots. The x-
axis denotes the load from an epoch (beacon interval) in terms of the sequence
number change during that epoch, and the y-axis denotes the score for that load.
Color intensity denotes how often that (x, y)-pair occurred throughout the trace.
The T-Fi plot displays these trace features:
1. The location on the y-axis shows completeness.
2. The width of the shaded region on the x-axis shows the range of load.
3. The intensity of the shaded region shows the frequency of load.
An ideal trace would have no missing packets and therefore a score of 1; in our
visualization, this corresponds to a dark bar only at the top of the graph (the
closest example of this is the Portland UG trace in Fig. 4).
Fig. 3 (left) shows how the single number problem can be overcome with a
T-Fi plot. The darkest point on the plot is in the upper left hand corner. The
upper left hand corner (sequence number change 1 and score 1) represents idle
time beacon packets sent from an AP. The number of beacon intervals in this
trace that fell in this region is 100 times larger than any other region in the
plot. This would dominate a simple percentage, but is relegated to a small, clear
region of the T-Fi plot. For load between 30 and 50, the trace scores no greater
than 0.1, indicating low ﬁdelity under high load. Indeed, Fig. 3 (left) shows a
negative correlation of ﬁdelity to load.
138
A. Schulman, D. Levin, and N. Spring
Portland ug
Portland pioneer
Portland psu cs
e
r
o
c