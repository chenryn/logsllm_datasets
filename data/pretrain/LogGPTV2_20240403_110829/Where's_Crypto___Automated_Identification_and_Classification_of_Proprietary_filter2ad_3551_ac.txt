Such behavior is typical for a loop-guard statement. If this
is indeed the case, the execution path taken at i = 0 made us
revisit e. In light of our goal of constructing a DFG comprising
of n iterations of a primitive, we replicate this path choice
n− 1 times, and subsequently take the opposite path, causing
the execution ﬂow to exit the loop. Finally, the construction
phase yields two DFGs: one representing 0 iterations, and
another representing n iterations. A description of the strategy
being applied to a concrete example is given in Appendix A.
The strategy does not produce exactly n iterations in every
situation. Section 2 highlights typical exceptions.
7 Purging process
Once the construction is complete, graph G represents the
input/output relation of f , under predicate P. However, it
contains other information as well, such as nodes created
from temporary loads/stores to the stack, and expressions
rewritten by the broker, leaving the source nodes unused. For
e.g., suppose that v represents ADD(x,y). Then, a request to the
broker for ADD(v,z) yields node w, representing ADD(x,y,z). w
does not depend on v and, unless v is referenced independently
elsewhere, v is not part of f ’s input/output relation.
Leaf nodes are, by deﬁnition, graph nodes that are not used
as an input to any arithmetic/logical operation. Our approach
becomes the following: for each leaf node v, we check whether
The strategy of when to apply forking only loosely relates
to the symbolic execution itself. Therefore, we introduce the
Path Oracle, a separate entity that is queried during the graph
construction phase, for every occurrence of an underdeter-
mined condition c. It decides whether c should evaluate to
true or false, or that the construction should fork and follow
both execution paths.
Algorithm 1 Conditional Instruction
Require: S = (G,P,B), ExecutionAddress e, Condition c, PathOracle po
if P∧ c = true then
else if P∧ c = false then
Evaluate instruction at e
else
Skip over instruction at e
d ← po.query(e, B)
if d = TAKE_TRUE then
P ← P∧ c
Be ← Be ∪{true}
Evaluate instruction at e
else if d = TAKE_FALSE then
P ← P∧¬c
Be ← Be ∪{false}
Skip over instruction at e
else if d = TAKE_BOTH then
S(cid:48) ← S.fork()
P ← P∧ c
Be ← Be ∪{true}
P(cid:48) ← P(cid:48) ∧¬c
e ← B(cid:48)
e ∪{false}
B(cid:48)
e is evaluated for S, skipped for S(cid:48)
(cid:46) expand P with c
(cid:46) append decision to backlog
(cid:46) S(cid:48) = (G(cid:48),P(cid:48),B(cid:48))
For every decision made by the path oracle, P and B in S are
updated accordingly. The pseudocode given in Algorithm 1
depicts how this is done. In short, predicate P is updated to
include condition c (or the negation thereof), thereby main-
taining satisfaction of its deﬁning property, i.e. satisfaction of
P guarantees G represents the input/output relation of f . An
entry is added to backlog B, reﬂecting the decision made by
the path oracle. B has no purpose beyond weighing into the
decisions made by the path oracle.
USENIX Association
30th USENIX Security Symposium    561
it is part of f ’s semantics. We consider leaf node v to be part
of f ’s semantics, if v is either:
(i) the return value of f ,
(ii) a STORE operation, and the target address is not relative
to the SP register. Thus, information is stored outside of
the stack, or
(iii) a CALL operation, i.e. a function call not subject to inlin-
ing.
In case none of the above applies, v and its incoming edges
can be removed from G, without affecting its semantics. The
removal of leaf nodes continues repeatedly until no more
nodes can be removed. Finally, by construction, all nodes
in G are either leaf nodes that are part of f ’s semantics, or
intermediate results contributing to some leaf.
8 Signature Expression
IDENTIFIER
string
VARIANT
string
TRANSIENT
label
:
expression
;
VARIANT
string
(a) High-level state machine
expression
+
expression
+
expression
>
(
expression
)
,
expression
OPAQUE
STORE
LOAD
XOR
OR
AND
MULT
ROTATE
label
literal
(b) The ‘expression’ type
Figure 4: Diagram representation of the DSL parser
In order to detect subgraph isomorphism, we need a means of
expressing the signature graph. Figure 4a depicts a diagram of
the signature domain-speciﬁc language (DSL). Appendix C
provides a concrete example. The round boxes denote a key-
word, whereas the square boxes denote a data type. New
graph nodes are generated through the expression data type
(Figure 4b). The IDENTIFIER keyword allows one to specify
a friendly name for the signature. The VARIANT keyword
enforces the creation of a new empty DFG. Subsequent ex-
pressions are added to this graph, thus, allowing one to specify
multiple variants of a signature. Subgraph isomorphism de-
tection is ultimately performed with all variants. The label
data type is an optional ﬁeld. It allows the node to be refer-
enced by another expression, enabling node sharing between
expressions. Analogous to DFGs generated from assembly
instructions, a DFG declared in the DSL is also subject to nor-
malization by the broker (Section 5), and purging (Section 7).
In case the TRANSIENT keyword is speciﬁed, the node gen-
erated from the expression is considered to be non-essential,
and may be removed during the purging process (i.e. in case
it was translated by the broker).
Figure 4b depicts the expression data type. It is recursively
deﬁned, and hence allows for nested subexpressions. The ‘+’
keyword denotes the addition of two or more subexpressions.
‘>’ denote a left and right shift, respectively. The
label data type is a reference to a previously deﬁned graph
node. The literal data type denotes a constant value. The
STORE, LOAD, XOR, OR, AND, MULT and ROTATE keywords
followed by subexpressions contained in parentheses provoke
creation of a new graph node. The subexpressions serve as
input nodes. Finally, the OPAQUE keyword signiﬁes a special
wildcard node. A comparison with a node of any other type
by the subgraph-isomorphism algorithm always yields true.
The opaque node type can have any number of input nodes,
including zero. The optional clamp-label data type allows one
to assign a name to the node type. Consequently, a comparison
with a node of any other type yields true, with the added
restriction that all opaque nodes carrying the same type label
must map to nodes of the same type. We refer to this practice
as type clamping.
Within the realm of identifying unknown primitives, a
special wildcard applicable to a group of nodes would be
useful. However, to our knowledge, the nature of subgraph-
isomorphism does not allow for the augmentation of any such
algorithm to support one-to-many mappings. Alternatively,
one may declare several variants of a signature, where for each
variant, the wildcard group is denoted by a different number
of nested opaque operations, i.e. OPAQUE, OPAQUE(OPAQUE),
etc. This way, any group consisting of a ﬁnite number of oper-
ations can be expressed. Introducing a notation triggering the
translation to multiple variants automatically has been con-
sidered. However, as the number of signature variants grows
exponentially in the usage count of this hypothetical notation,
we prefer to discourage its use. Hence, we omit the notation
altogether, enforcing explicit declaration of multiple variants.
9 Subgraph isomorphism
Subgraph isomorphism is a well-documented problem, and
is known to be NP complete. The solution proposed by Ull-
mann [66] is a recursive backtracking algorithm with pruning.
Our framework implements this algorithm, with added sup-
port for type clamping (see Section 8). For further details
about Ullmann’s algorithm and the optimizations we applied
to it, we refer the reader to the documentation included with
our framework’s source code.
10 Signatures
Before diving into the practical performance evaluation, we
highlight the signatures used throughout the analysis, along
with relevant details and a motivation as to why they are
included. All signature deﬁnition ﬁles are included in our im-
plementation of the framework. The list given below should
562    30th USENIX Security Symposium
USENIX Association
not be interpreted as an attempt to cover the entirety of cryp-
tographic primitives in existence. Rather, they showcase the
applicability of our framework. The selection of signatures
was made with a strong focus on proprietary algorithms in
embedded environments. As such, they consist of symmetric
and unkeyed primitives only, although there is no fundamental
incompatibility with asymmetric primitives. To our knowl-
edge, no proprietary primitive exists to date that is studied
in the scientiﬁc literature and does not fall within any of the
classes covered in this section.
However, should an additional signature be desired, then it
can be crafted. In broad terms, the approach is to formulate the
primitive’s deﬁning properties, translate those to an abstract
DFG, and ﬁnally into a signature deﬁnition expressed in the
DSL. The process is somewhat ad-hoc in nature. However,
the examples presented this section should provide sufﬁcient
guidance.
10.1 AES, MD5, XTEA, SHA1
Despite this paper’s strong focus on unknown primitives, and
hence generic signatures, algorithm-speciﬁc signatures, such
as AES, MD5, XTEA and SHA1, can be deﬁned and used.
Doing so allows us to directly compare results with [43], and
demonstrate that our approach effectively solves the code
fragment selection problem without resorting to heuristics.
10.2 Feistel cipher
A Feistel cipher is a symmetric
structure used in many block ci-
phers, including DES. In a Feistel
cipher, a plaintext block P is split
in two pieces L0 and R0. Then, for
each round i ∈ [0,1, . . . ,n],
Li+1 = Ri
Ri+1 = Li ⊕ F(Ri,Ki),
is computed, where ⊕ denotes bit-
wise exclusive-or, F the round
function, and Ki the sub-key for
round i. Translating this deﬁni-
tion into a DFG yields the graph
shown in Figure 5.
R0
L0
XOR
XOR
K0
F
K1
F
...
Figure 5: DFG of a
Feistel structure
The next step is to construct a signature that represents the
DFG from Figure 5. However, F is an algorithm-speciﬁc set
of operations, of which thus no properties are known. The
OPAQUE operator (see Section 8), only covers a single opera-
tion, whereas F consists of an unknown number of operations.
F is known to take Ri and Ki as an input, where i ∈ [0,1, . . . ,n].
No properties are known for Ki. Hence, we represent F by
introducing multiple variants of the signature. In the ﬁrst
variant, we substitute F with OPAQUE(Ri), in the second with
OPAQUE(OPAQUE(Ri)), etc., until we reach 8 levels of nested
operations. Thus, the signature identiﬁes Feistel ciphers with
an F whose input/output relation contains between 1 and 8
successive operations.
(Non-)Linear feedback shift register
10.3
(Non-)Linear feedback shift registers ((N)LFSRs) are often
used in pseudo-random number generators, and key-stream
generators for stream ciphers. When designed carefully, an
(N)LFSR offers relatively strong randomness, whilst requiring
very few logic gates, often making it an attractive choice for
algorithms used in embedded devices. Both hardware and
software implementations of (N)LFSRs are common.
Let R be an (N)LFSR. For each round, a new bit is
generated using feedback function L from (a subset of) the
bits in R. If L is linear, for e.g. an exclusive-or over the input
bits, we refer to R as an LFSR. Conversely, R is an NLFSR if
L is non-linear. All bits in register R are shifted one position
to the left, discarding the most signiﬁcant bit, and the newly
generated bit is placed at position 0. Furthermore, an output
bit is generated by feeding R to some function F. Hence, we
have, for each round i ∈ [0,1, . . . ,n],
<<
<<
F
1
F
1
F
L
L
R0
OR
OR
...
Figure 6: DFG of an
(N)LFSR
Ri+1 = (Ri << 1) | L(Ri)
outputi = F(Ri),
where << x denotes a left
shift by x bits and | denotes
bitwise or.
Figure 6 depicts a trans-
lation of the above into a
DFG. In order to express
this graph in a signature,
we replace L and F with
OPAQUE operators. The prop-
erty that Ri+1 depends on Ri
via L is lost. However, the
signature remains distinctive
enough in order to warrant
very few false positives (see
Section 11).
10.4 Sequential Block Permutation
Variable-length primitives constructed from ﬁxed-length ones
are a common phenomenon. For e.g., all hash functions built
on the Merkle-Damgård construction, such as MD5, SHA1
and SHA2, have this characteristic. Other examples include
block ciphers in a chaining mode of operation. We refer to
this concept as a sequential block permutation.
Let Hi be the ith output block of a sequential block per-
mutation function, Bi be the ith input block, c be the ﬁxed-
length compression function, for i ∈ [0,1, . . . ,n]. I denotes
the initialization vector. Then, we deﬁne the sequential block
permutation as:
H0 = c(I,B0)
Hi = c(Hi−1,Bi)
∀i ∈ [1,n]
USENIX Association
30th USENIX Security Symposium    563
A DFG representation is given in Figure 7. On inspection, we
ﬁnd that it only provides structural guidance, and does not
prescribe any arithmetic or logic operations. The deﬁnition of
H prescribes that compression function c takes two inputs:
(i) The output of its preceding instance, except for the ﬁrst
instance, which depends on the IV.
Bn
least 16 bytes. As such, a DFG generated from a sequen-
tial block permutation function yields at least one tuple
such that vi maps to Bi, for all i ∈ [0,1,2].
(ii) For all tuples, we determine the shortest path between v0
and v1. This can be done by means of a simple breadth-
ﬁrst search. If v0 maps to B0 and v1 to B1, then this path
should take us through two instances of c (see Figure 7).
(iii) Suppose that such a path exists, then we would like to
conﬁrm that a similar path exists between v1 and v2. We
take v1 as a starting point, and traverse paths with edge
directions and node types resembling those on the path
between v0 and v1. Once such a path has been found, it
should reach v2. Satisfaction of this property is a strong
positive indicator.
(iv) To gain more certainty, we also verify that the node types
of all inputs and outputs for all the nodes on both paths
match. However, in case v0 maps to B0, some inputs
may originate from the IV, whereas they originate from
computed values during the second round. Therefore,
we treat constants and inputs of type LOAD as wildcards
in this step.
11 Experimental evaluation
We evaluate our solution’s performance with regards to ac-
curacy and running time on the following four test sets: (a)
the sample set used in [43], (b) a collection of shared libraries
and executables part of the OpenWRT2 network equipment
ﬁrmware, (c) a collection of proprietary cipher implementa-
tions built from public sources, and (d) a collection of real-
world embedded ﬁrmwares (PLCs, ECUs). The evaluation is
conducted on an AMD Ryzen 3600 machine with 16 GB of
RAM, which is considered mid-range hardware nowadays.
While not containing proprietary cryptography, the Open-
WRT project is publicly available without legal issues around