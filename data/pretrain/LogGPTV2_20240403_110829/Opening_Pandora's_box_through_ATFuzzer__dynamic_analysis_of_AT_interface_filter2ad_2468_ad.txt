05.34R
.2.6.1.c4-
00004-M899
4FAAAAN
AZM-1
G955US
QU5CRG3
None
None
None
mo-
sys.usb.config
mtp,adb,diag,
modem,
dem_mdm,
diag_mdm
sys.usb.config
diag,adb
fastboot oem bp-
tools-on
fastboot
oem
enable-bp-tools
Linux
Linux
Linux
Bluetooth
and
USB
Bluetooth
and
USB
Bluetooth
and
USB
Windows Bluetooth
and
USB
Linux
Bluetooth
and
USB
Windows Bluetooth
and
USB
Windows Bluetooth
and
USB
None
Linux
Bluetooth
and
USB
22.126.12.00.00
None
None
Bluetooth
g8998-00122-
1708231715
None
None
Bluetooth
6.0.1
MOB30M
Huawei
Nexus 6P
6.0
MDA89D
Samsung
Galaxy
S8+
Huawei
P8
Lite
ALE-L21
Pixel 2
8.0.0
5.0.1
8.0.0
R16NW.G95
5USQU5CRG3
ALE-
L21CO2B140
OPD3.1708
16.012
Table 1: List of the devices we tested, with software information,
USB configuration required and the operating system we used to
fuzz each device.
5.2 Evaluation Criteria
ATFuzzer has three major components— grammar crossover, mu-
tation, and feedback loop— to effectively test a target device. We,
therefore, aim to answer the following research questions to evalu-
ate ATFuzzer:
commands over USB?
commands over Bluetooth?
• RQ1: How proficient is ATFuzzer in finding errorneous AT
• RQ2: How proficient is ATFuzzer in finding errorneous AT
• RQ3: How effective is our grammar-aware crossover strat-
• RQ4: How effective are our grammar-aware mutation strate-
• RQ5: When using grammars, how much does the use of
• RQ6: Is ATFuzzer more efficient than other state-of-the-art
timing feedback improve fuzzing performance?
gies?
egy?
fuzzers for testing AT interface?
To tackle RQ1-RQ2, we let our ATFuzzer run over USB and Blue-
tooth each for one month to test 10 different smartphones listed
in Table 1. ATFuzzer has been able to uncover a total of 4 erro-
neous AT grammars inducing a crash, downgrade, and information
leakage over Bluetooth and 13 erroneous AT grammars over USB.
Based on the type of actions and responses to the problematic AT
command instances, we initially categorize our results as syntactic
and semantic problematic AT grammars, and further categorize the
syntactically problematic grammars into three separate classes— (i)
responds ok with composite actions; (ii) responds ok with an action;
(iii) responds error with an action. Here, an action can either signify
a crash (i.e., any disruption event defined in Section 4), leakage of
any sensitive information, or executing a command (e.g., hanging
up a phone call).
We summarize ATFuzzer’s findings for Bluetooth in Table 2 and
for USB in Table 3. To answer the research questions RQ3-RQ5,
we evaluate ATFuzzer by disabling one of its components at a time.
We create three new instances of ATFuzzer— ATFuzzer without
crossover, ATFuzzer without mutation, and ATFuzzer without fit-
ness evaluation. To what follows we evaluate these three variants
with the AT grammar (in Figure 3) and compare their efficacy of
discovering bugs against original ATFuzzer with all capabilities
switched on. Moreover, to answer the research question RQ6, we
create our variation of AFL (American Fuzzy Lop). To perform a
fair comparison, we run all our experiments on Nexus 5 for each
variations of ATFuzzer and our version of AFL each for 3 days.
5.3 Findings Over Bluetooth (RQ1)
Unlike USB, Bluetooth does not require any pre-processing or con-
figuration to the phone to execute AT commands. Besides this,
over-the-air Bluetooth communications are inherently vulnerable
to MitM attacks [7, 39, 51]. All these enable the adversary to read-
ily exploit the vulnerabilities over Bluetooth with sophisticated
attacks.
5.3.1 Results. We first discuss the results that relate to invalid AT
commands and then we discuss the attacks and impacts of both
invalid and valid AT commands.
537of
Class
Bugs
Syntatctic –
returns OK
with action
Correctly
formatted
command
Grammar and Command Instance
cmd →D.Dnum.Darg1.Darg2
Dnum →[A − Z 0 − 9 + #]∗
Darg1 →I |G |ϵ
Darg2 →;. Darg3
Darg3 →[A, B, C]+
E.g. ATD + 4642048034I; AB; C
cmd →D.Dnum.Darg1.Darg2
Dnum →[A − Z 0 − 9 + #]∗
Darg1 →I |G |ϵ
Darg2 →;. Darg3
Darg3 →[A, B, C]+
E.g. ATD + 4642048034I; AB; C
cmd →+CIMI.Arg1
Arg1 →[a − zA − Z 0 − 9 + #]∗
E.g. AT + CIMI; ; ; ; abc
cmd →+CGSN.Arg1
Arg1 →[a − zA − Z 0 − 9 + #]∗
E.g. AT + CGSN; ; ; ; abc##
cmd →+CIND?
cmd →+CHUP
cmd →Arg.D.Dnum.Darg;
Arg →[a − zA − Z]
Dnum →[a − zA − Z 0 − 9 + ∗#]∗
Darg →I |G |ϵ
E.g. ATD ∗ ∗61 ∗ +1812555673 ∗ 11 ∗ 25#;
action/implication
Nexus5
LG G3
Nexus6
Nexus6P HTC
S8plus
S3
Note2 Huawei P8lite
Pixel 2
crash/internet connectiv-
ity disruption
✓
crash/downgrade
✓
✓
read/IMSI leak
read/IMEI leak
call
status,
status,
read/leaks
call setup stage, internet
service
signal
strength, current roam-
ing status, battery level,
call held status
execution (cutting phone
calls)/ DoS
execution/ call forward-
ing, activating do not dis-
turb mode, activating se-
lective call blocking
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Table 2: Summary of ATFuzzer’s Bluetooth parser findings.
(1) Syntactic errors – responds ok with actions. ATFuzzer un-
covered four problematic grammars in these categories in seven
different Android smartphones. We observer that the target device
responds to the invalid AT command and also performs an action.
For instance, ATFuzzer found a specific variant of ATD grammar
ATDA; A; B in Nexus 5 which is syntactically incorrect, but returns
OK and make the cellular Internet connectivity temporarily un-
available. Beside this, the concrete instances of the same grammar
also downgrade the cellular connectivity from 4G to the 3G/2G in
Nexus 6 and Nexus 6P smartphones thus entails severe security
and privacy impacts.
5.3.2 Attacks with invalid AT commands. We now present three
practical attacks that can be carried out using the invalid grammars
uncovered through ATFuzzer.
Denial of service. The adversary using a malicious Bluetooth
peripheral device (e.g., Bluetooth headphone with only call audio
and media permissions) or a MitM instance may exploit the invalid
AT command, e.g., ATDB; A; B and temporarily disrupt the Internet
connectivity of the Pixel 2 and Nexus 5 phones. To cause long term
disruptions in Internet connectivity, the adversary may inject this
command intermittently and thus prevent the user from accessing
the Internet. Note that, there is no valid AT command that controls
the Internet connectivity over Bluetooth and thus it is not possible
to achieve this impact using a valid AT command.
Downgrade. The same invalid grammar (shown in table 2) ex-
ploited in the previous DoS attack in Nexus 5 phone can also be
exploited to downgrade the cellular connectivity on Nexus 6 and
Nexus 6P phones. Similar to the previous DoS attack, such down-
grade of cellular connectivity is not possible with any valid AT
commands running over Bluetooth. Downgrade (also known as
bidding-down) attacks have catastrophic implications as they open
the avenue to perform over-the-air man-in-the-middle attacks in
cellular networks [25, 40].
IMSI & IMEI catching. ATFuzzer uncovered the invalid varia-
tions (AT + CIMI; ; ; ; ; abc and AT + CGSN123df) of two valid AT
commands (+CIMI and +CGSN) which enable the adversary to
illegitimately capture the IMSI and IMEI of a victim device over
Bluetooth. Exploiting this, any Bluetooth peripheral connected to
the smartphone can surreptitiously steal such important personal
information of the device and the network. We have successfully
validated this attack in Samsung Galaxy S3, Samsung Note 2, and
Samsung Galaxy S8+. One thing to be noted here is that after manual
testing we found out that the valid versions of these two commands
also leak IMSI and IMEI. We argue that even if there is a black-
list/firewall policy put into place to stop the leakage through valid
AT commands, yet it will not be sufficient because it will leave the
scope to use the invalid versions of the command (that ATFuzzer
uncovered) to expose this sensitive information.
The impact of this attack is particularly more fatal than that
of the previous two attacks. This is because the illegitimate ex-
posure of IMSI and IMEI through Bluetooth provides an edge to
the adversary to further track the location of the user or intercept
phone calls and SMS using fake base stations [32, 33] or MitM re-
lays [50]. Samsung has already acknowledged the vulnerabilities
and is working on issuing patches to the affected devices. We also
summarize the findings of ATFuzzer in Table 2. CVE-2019-16401 [6]
has been assigned to this vulnerability along with other sensitive
information leakage for the affected Samsung devices.
5.3.3 Attacks with valid AT commands. We summarize ATFuzzer’s
other findings in which we demonstrate that the exposed AT inter-
face over Bluetooth allows the adversary to run valid AT commands
to attain malicious goals that may negatively affect a device’s ex-
pected operations. The results are particularly interesting as Blue-
tooth interface has not yet been systematically examined.
Information leak. The adversary can use a valid AT command to
learn the whole set of private information about the phone. The
malicious Bluetooth peripheral device can get the call status, call
538setup state, Internet service status, the signal strength of the cellular
network, current roaming status, battery level, and call hold status
for the phone using this valid AT commands.
DoS attacks. A malicious peripheral can exploit the AT + CHUP
command to prevent the victim device from receiving any incoming
phone call. From the previous information leakage (e.g., call status)
attack, an attacker can probe periodically to detect whether there