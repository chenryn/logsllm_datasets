> VirtualAllocEx(), WriteProcess---Memory() and CreateRemoteThread().
> Once migration is complete, Meterpreter shuts down the previous thread
> that had the initial Meterpreter running. Although it sounds
> complicated, Meterpreter can do all of this with the following simple
> command: **migrate \**
>
> ![](media/image139.jpeg)
Meterpreter also introduced transport control with the transport
command, which allows us to change the transport mechanism of a payload
without killing the existing session.
![](media/image140.jpeg)Let\'s look at how to set up and change the
transport of an existing Meterpreter. To view the options, we can simply
type the transport or transport -h command:
> We add transport by using the following command:
>
> ![](media/image141.jpeg)
To list the available transports, we can use the following command:
> ![](media/image142.jpeg)**transport list:**
Then we start our exploit handler to whichever transport we want to
switch to:
> ![](media/image143.jpeg)
>
> Now we simply use the transport next command:
>
> ![](media/image144.jpeg)
>
> And we will see we received a connection on our handler:
>
> ![](media/image145.jpeg)
For more information, visit the following link:
> 
# Armitage and team server
> We are all used to the console of msfconsole, which is extremely
> powerful as it is. However, let\'s make this even more efficient by
> using Armitage. This is a Java- based GUI built around Metasploit,
> which first came out in 2013. Being built on Java makes it
> cross-platform.
>
> Armitage comes pre-installed in Kali and can easily be downloaded and
> installed. Before we jump into setting up and using these tools,
> let\'s get an understanding of team server and its purpose.
>
> Team server allows us to manage our red-team activity in a single
> workspace. It acts as a server that connects and communicates with
> Metasploit and multiple Armitage clients can connect to it. This is
> handy when a team is doing a red- team activity, as all of the members
> can have the Armitage client running on their system and can connect
> to a single workspace in order to perform the activity. By default,
> team server is not supported on Windows unless you have bash
> installed. It also does not come with the default macOS DMG file. To
> run a
>
> team server on a macOS, we can download and install the archived file
> for Linux instead of DMG. Since team server is only a bash script and
> the archived file for Linux already has it, we can download and run it
> from there.
>
> After this, we need to set the path of our Metasploit\'s database.yml
> using the following command: **export MSF_DATABASE_CONFIG=\
> We can now run team server by browsing to the directory containing
> team server and running the following command: **Sudo -E ./teamserver
> \**
## \
> ![](media/image146.jpeg)
>
> ![](media/image147.jpeg)Once team server is up and running, we can run
> the Armitage client and connect to our team server using the
> credentials we set:
>
> It will also ask us to set a nickname that will help Armitage users to
> identify each other when they connect.
An Armitage window will now open up, giving us the beautiful GUI:
> ![](media/image148.jpeg)
>
> On the left menu, we can view the module browser, which shows a list
> of all the exploits, post modules, auxiliaries, and so on. We can
> either browse each folder by clicking on it or we can search the
> desired module in the search bar:
>
> ![](media/image149.jpeg)
To run a module, we double-click on the module we wish to run. A new
window will open up where we fill in the required details, such as
RHOSTS, RPORT, and so on. This is the same as the show options command
in msfconsole:
> ![](media/image150.jpeg)
>
> Next, we click Launch and we will see that Armitage automatically
> calls the Metasploit API, executes the commands, and runs the exploit
> for us:
>
> ![](media/image151.jpeg)
The top menu has different options. Let\'s go through some of them:
> ![](media/image152.jpeg)
>
> New Connection: This allows us to connect to different team servers in
> parallel.
>
> Preferences: We can set display preferences, color, and so on.
>
> Set Target View: This has two options: Table View or Graph View. These
> allow us to view our added hosts in the desired manner.
>
> ![](media/image153.jpeg)The Table View looks like this:
The Graph View looks something like this:
> ![](media/image154.jpeg)
>
> Socks Proxy: This allows us to configure a SOCKS4 proxy to use our
> external tools, such as Nmap on the local network of a compromised
> server:
>
> ![](media/image155.jpeg)
>
> Listeners: This is used to quickly start a listener on a port, which
> can either be Bind or Reverse:
>
> ![](media/image156.jpeg)
>
> Coming to the View tab, we see this: ![](media/image157.jpeg)
>
> Console: This allows us to access msfconsole and run everything from
> the
>
> command line.
>
> Event Log: This shows the logs of all the events happening on team
> server. Credentials: This shows us the credentials we extracted during
> the activity in one place.
>
> Downloads: This option allows us to view all the files that were
> downloaded from the target machines.
>
> Jobs: This shows the list of active jobs being performed on team
> server. Loot: This shows us whatever we looted from the target
> machines, including domain hashes, SQL hashes, and so on.
>
> Script Console: This is used to run custom Cortana scripts that can be
> downloaded from . Cortana
> is a scripting language for both Armitage and Cobalt Strike. The
> prebuilt scripts of Cortana can be loaded using this console and can
> be run to perform various tasks, such as automatically running
> automatic MSF Scans, logging out a user, auto discovery of new
> networks, and so on.
>
> Reporting: This will open up the folders where the logs of Meterpreter
> sessions are saved, and we can use it for further reporting processes.
Coming to the Hosts tab, we see this: ![](media/image158.jpeg)
> Import Hosts: This allows us to import hosts from a previous Nmap
> scan, TXT, and so on.
>
> Add Hosts: Through this, we can manually enter the IP/subnet and add
> hosts to our target list.
>
> Nmap Scan: This is used to perform an Nmap scan on the added hosts.
> Multiple types of Nmap scans can be performed, such as Ping Scan,
> Intense Scan, all TCP Ports, Intense Scan UDP, and so on:
>
> ![](media/image159.jpeg)
>
> MSF Scans: This will use Metasploit modules, such as port scan and
> other auxiliaries based on the output of the port scan. By default,
> MSF Scans use the auxiliary/scanner/portscan/tcp module with a default
> list of ports to scan. Furthermore, the number of threads is 24 by
> default, which is a lot when it comes to scanning a compromised host
> network. Keep this number between 5-10; otherwise, there\'s a huge
> possibility that your session will die.
>
> DNS Enumerate: This module is used to get information about a domain
> from the DNS server by performing various DNS queries, such as zone
> transfers, reverse lookups, SRV record brute forcing, and other
> techniques. Clear Database: This clears the existing database of the
> current workspace being used, thereby deleting all the hosts in the
> target view and the data related to it.
>
> Armitage allows a user to perform a lot of actions through the simple
> click of a button. This saves time and is more convenient. Once we
> have a Meterpreter connection on our hosts we can simply right-click
> on the compromised host and we will then see options such as
> interaction with the Meterpreter, listing processes, migrating to a
> different process, browsing a file, and so on, just by selecting and
> clicking on the desired option:
>
> ![](media/image160.jpeg)
>
> ![](media/image161.jpeg)For example, if we want to log keystrokes, we
> can simply right-click on the host and go to Access \| Explore \| Log
> Keystrokes. This will directly open a new window where we will
> configure the module options. By clicking launch, we are then able to
> log keystrokes:
>
> Upon clicking the options, a new window opens, as shown in the
> following
>
> ![](media/image162.jpeg)screenshot:
![](media/image163.jpeg)We will now go a step further and explore
another exploit usage through Armitage. To do this, we choose a host
that has SMB running (Windows). We then right-click on the host, at
which point we should see a Login menu option. From here, we choose
psexec (psh). This module uses a valid login and password to execute a
payload based on PowerShell. This payload is never written to disk:
Once we the module, we will see that we have a reverse connection on the
machine just by logging in.
# Metasploit with slack
> In this section, we will learn about a module called ShellHerder. This
> plugin is used to monitor all Metasploit/Meterpreter sessions. It was
> created with a basic idea in mind: to easily monitor new incoming
> sessions. In a red-team activity, this is useful as it can be used to
> monitor live phishing campaigns or a Rubber Ducky attack.
>
> This plugin uses session subscriptions to monitor activity and send
> alerts to slack. Let\'s take a look at how to set it up.
>
> We clone ShellHerder and copy it to our Metasploit plugins directory
> using the following commands. In our case, we saved the file as
> notify.rb in the destination folder:
>
> **git clone https://github.com/chrismaddalena/ShellHerder.git**
>
> **cp ShellHerder/ShellHerder.rb
> /opt/metasploit-framework/embedded/framework/plugins/noti**
>
> We will then register an account on
> [https://slack.com](https://slack.com/).
>
> At this point, we choose Create a new workspace and follow the
> instructions:
>
> ![](media/image164.jpeg)
Once the account is ready and we are logged in, we should be taken to a
web
page which will look something like this:
> ![](media/image165.jpeg)
From the left-side menu in the Channels tab, we add a channel, as shown
in the following screenshot:
> ![](media/image166.jpeg)
ShellHerder relies on slack\'s incoming Webhooks to send real-time
alerts from Metasploit. So, as shown in the following screenshot, we now
choose Add an application in the channel we created.
> ![](media/image167.jpeg)
>
> At this point, we search for an incoming Webhook app and add it. We
> will be redirected to the next page to configure the app. Here, we
> choose the channel name where we want the alerts to be posted:
>
> ![](media/image168.jpeg)
>
> Once we click on Add Incoming WebHooks integration, we will be taken
> to the next page where we will see the generated URL of our Webhook.
> We will copy this for later use and save the settings:
>
> ![](media/image169.jpeg)
Now we connect to our team server and load the plugin from the console,
as follows:
> ![](media/image170.jpeg)
>
> To configure the plugin, we run the help command:
>
> ![](media/image171.jpeg)
We set the options and save the configuration using notify_save:
> ![](media/image172.jpeg)
>
> Running the notify_test command will show us a message on slack, as
> shown in the following screenshot:
>
> ![](media/image173.jpeg)
>
> Every time a new session pops up, we will get a notification on slack:
>
> ![](media/image174.jpeg)
The preceding screenshot shows the connection on our Armitage. We can
see a new notification message on our slack, as shown in the following
screenshot:
> ![](media/image175.jpeg)
# Armitage and Cortana scripts
> Cortana is a scripting language that is built into Armitage and Cobalt
> Strike. This is based on Sleep Scripting Language
> ( ). We can find a lot of Cortana scripts
> built by different people on the internet. These scripts can be used
> to automate different tasks in Armitage. Running Cortana scripts is
> extremely easy. We will use the scripts hosted on GitHub by rsmudge,
> found here
>
> at .
We then download the scripts on our computer and go to Armitage \|
Scripts\... to run them: ![](media/image176.jpeg)
In the window which opens, we choose Load and select the script we
downloaded:
> ![](media/image177.jpeg)
We will then try to run the icon script. This script identifies the
services running and displays icons according to them:
> ![](media/image178.jpeg)
>
> ![](media/image179.jpeg)Once the script is loaded, we then do the
> exploitation. When a new Meterpreter connection comes, this script
> will automatically run:
>
> The script can sometimes take a while to run depending on the number
> of Meterpreter connections we have on our Armitage.
>
> Within Armitage, the Cortana console is also provided. This allows us
> to interact with the scripts we run.
To view the console, we go to View \| Script Console, as follows:
> ![](media/image180.jpeg)
>
> We can type help into the script console to see the list of all the
> commands:
>
> ![](media/image181.jpeg)
Cortana\'s official manual has described the functions for all the
commands:
> ![](media/image182.jpeg)
>
> Source:
> 
# Summary
> At the beginning of this chapter, we did a quick tour of the
> Metasploit framework, its features, and its usage. We then learned
> about team server and the Armitage client, including the setup and
> usage of Armitage. We also looked at integrating Metasploit/Armitage
> with slack so that it keeps us up to date about every new connection
> via slack notifications.
>
> Finally, we covered the basics of Cortana scripting and its usage.
# Questions
1.  What version of Metasploit is best to use?
2.  Is slack integration really necessary?
3.  Can we make our own Cortana scripts?
4.  Can we set up team server on Windows?
5.  Is Metasploit free?
# Further reading
> For more information on the topics discussed in this chapter, please
> visit the following links:
>
> **Cortana Tutorial**:
> [http://www.fastandeasyhacking.com/download/cortana/cortana_tuto
> rial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf)
>
> **HarmJ0y/cortana**: 
>
> **Armitage**:
> 
> **Metasploit Unleashed**:
> 
> **ShellHerder**: 
>
> **Armitage - Cyber Attack Management for Metasploit**:
> [http://www.fastande
> asyhacking.com/manual](http://www.fastandeasyhacking.com/manual)
# Getting Started with Cobalt Strike
> In the previous chapters, we have covered some great new tools and
> some lesser known techniques which could be very helpful in a
> Penetration Test. In general, a Penetration Tester is expected to find
> the vulnerabilities and exploit those vulnerabilities to achieve the
> highest level of access but in reality, very few can
>
> fulfil of whats expected of them. Many Penetration Testers won\'t be
> able to reach the final goal due to lack of knowledge and practical