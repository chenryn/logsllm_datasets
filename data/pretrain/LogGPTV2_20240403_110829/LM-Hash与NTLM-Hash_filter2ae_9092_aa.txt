## LM-Hash与NTLM-Hash
在windows下通过SAMInside提取到的密码Hash时，可以看到有两条，分别是LM-Hash和NTLM-HASH  
这是对同一个密码的两种不同的加密方式，下面对其生成原理做个实验。
## Windows下LM-Hash生成原理（IBM设计的LM Hash算法）
实验环境:windows server 2003  
使用工具:`SAMinside`
### LM HASH生成规则如下：
  * 用户的密码被限制为最多14个字符。
  * 用户的密码转换为大写。
  * 密码转换为16进制字符串，不足14字节将会用0来再后面补全。
  * 密码的16进制字符串被分成两个7byte部分。每部分转换成比特流，并且长度位56bit，长度不足使用0在左边补齐长度，再分7bit为一组末尾加0，组成新的编码（str_to_key()函数处理）
  * 上步骤得到的8byte二组，分别作为DES key为"KGS!@#$%"进行加密。
  * 将二组DES加密后的编码拼接，得到最终LM HASH值。
**测试服务器密码为`123456`**
  * 用户的密码被限制为最多14个字符
  * 用户的密码转换为大写，大写转换后仍为它本身
  * 转换为16进制字符串后，结果为313233343536，不足14字节采用0进行补全，补全结果为3132333435360000000000000000
  * 固定长度的密码被分成两个7byte部分，也就是分为31323334353600和00000000000000，  
先把31323334353600转换为比特流，比特流为110001001100100011001100110100001101010011011000000000，长度不足56bit使用0在左边补齐长度，补齐后为00110001001100100011001100110100001101010011011000000000。  
再分7bit为一组末尾加0，组成新的编码，如下：
        0011000 0
    1001100 0
    1000110 0
    0110011 0
    0100001 0
    1010100 0
    1101100 0
    0000000 0
此时的密码字符串为0011000010011000100011000110011001000010101010001101100000000000  
对应的8字节16进制编码（str_to_key()函数处理）：30988C6692C8D000
，同理知00000000000000对应的8字节16进制编码： 0000000000000000
  * 将以上步骤得到的两组16进制字符串，分别作为DES加密key为魔术字符串`KGS!@#$%`进行加密  
  * 将两组DES加密后的编码拼接得到LM-HASH,计算结果与SAMinside提取结果相同  
44EFCE164AB921CAAAD3B435B51404EE  
python实现LM-HASH脚本
    # coding=utf-8
    import base64
    import binascii
    from pyDes import *
    def DesEncrypt(str, Des_Key):
        k = des(Des_Key, ECB, pad=None)
        EncryptStr = k.encrypt(str)
        return binascii.b2a_hex(EncryptStr)
    def Zero_padding(str):
        b = []
        l = len(str)
        num = 0
        for n in range(l):
            if (num  Client A  
Server B向Client A发送了一个8字节挑战"0001020304050607"
  * Client A会根据自己的访问Server B的密码明文计算并缓存密码的LM-HASH（Client A缓存输入密码的哈希值，原始密码会被丢弃，“原始密码在任何情况下都不能被缓存”，这是一条基本的安全准则）  
然后在LM-HASH后5个0x00变成 "c23413a8a1e7665faad3b435b51404ee0000000000"
，变为21字节，然后划分成三组，每组7字节
        | C23413A8A1E766 | 5FAAD3B435B514 | 04EE0000000000 |
  * 每组7字节做为参数传递给str_to_key()函数，最终得到三组DESKEY，每组8字节 
        | C21A04748A0E9CCC | 5ED4B47642ACD428 | 0476800000000000 |
  * 分别用三组DESKEY对8字节挑战 "0001020304050607" 进行标准DES加密后得到 
        C21A04748A0E9CCC ---- 对0001020304050607进行标准DES加密 --> CA1200723C41D577
    ​