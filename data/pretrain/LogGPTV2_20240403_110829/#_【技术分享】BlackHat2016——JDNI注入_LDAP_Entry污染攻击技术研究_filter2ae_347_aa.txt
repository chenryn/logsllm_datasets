# 技术分享：BlackHat 2016 - JNDI注入与LDAP Entry污染攻击技术研究

## 译文声明
本文为翻译文章，具体内容表达及含义请以原文为准。
原文链接：[此处插入原文链接]

---

### （一）基本概念

#### 1.1 JNDI简介
JNDI（Java Naming and Directory Interface）即命名与目录接口，是一组允许客户端通过名称查找和发现数据及对象的API。JNDI主要分为两类系统：

- **命名系统**：将实体通过名称与值的方式关联起来，例如DNS服务将网络地址映射到域名；文件系统将文件名映射到磁盘上的数据。
- **目录系统**：是一种特殊的命名系统，支持“目录对象”的存储和查询。如LDAP，它以树状结构存储目录对象并提供索引功能。

对象可以是本地或远程部署的。熟悉RMI的同学应该对远程对象不陌生，其实RMI就是JNDI的一种实现方式，其他类似的服务还包括CORBA、LDAP以及DNS。

#### 1.2 JNDI代码示例
以下代码展示了如何使用JNDI接口创建RMI服务。与sun.rmi.*包提供的方法不同，这里的关键在于`env`和`ctx`两个对象，它们用于标识相关信息。

```java
// 创建环境属性集
Properties env = new Properties();
env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.rmi.registry.RegistryContextFactory");
env.put(Context.PROVIDER_URL, "rmi://localhost:1099");

// 创建上下文
Context ctx = new InitialContext(env);

// 绑定服务名称与实体
ctx.bind("foo", "Sample String");

// 查找绑定的对象
String result = (String) ctx.lookup("foo");
System.out.println(result); // 输出 "Sample String"
```

注意：此代码直接运行会失败，因为`bind`方法需要接收远程对象作为参数。

#### 1.3 引用与地址
在JNDI中，通常通过引用（Reference）来存储对象。引用是指向内存中对象的一个指针。有趣的是，可以通过`Reference`指定一个工厂类来创建Java对象。如果远程对象工厂地址可控，则可能带来安全问题。

#### 1.4 远程代码与安全管理器

##### 1.4.1 Java中的安全管理器
Java中的对象分为本地对象和远程对象。本地对象默认为可信，而远程对象则不可信。当从远程服务器加载对象时，为了安全起见，JVM会限制该对象的能力，例如禁止访问本地文件系统等，这些都依赖于安全管理器（SecurityManager）实现。

##### 1.4.2 JNDI安全管理架构
对于加载远程对象，JNDI有两种不同的安全控制方式：
- **Naming Manager**：相对宽松的安全管理规则。
- **JNDI SPI层**：按照特定规则进行控制。

黑客可能会利用这两者之间的差异执行恶意代码。

---

### （二）Click-to-play绕过

#### 2.1 点击运行保护
了解了上述基础知识后，我们来看一下CVE-2015-4902漏洞，该漏洞允许绕过“点击播放”保护机制。详细信息请参考趋势科技博客。

#### 2.2 JNLP协议
JNLP（Java Network Launch Protocol）用于通过URL打开远程Java可执行文件。在攻击场景下，攻击者可利用JNLP部署applet应用。

#### 2.3 jndi.properties文件
`jndi.properties`文件用于创建Context上下文对象。正常情况下，可通过代码创建`Properties`对象并设置相关配置。另一种方式是将配置写入`jndi.properties`文件中，提高代码的可配置性。

```java
// 使用jndi.properties文件创建初始上下文
InitialContext ctx = new InitialContext();
```

#### 2.4 攻击思路
攻击者需完成以下三步：
1. 配置恶意网页，包含一个applet应用。
2. 创建RMI服务（公网IP）。
3. 创建托管恶意Java代码的服务器（公网IP）。

具体步骤如下：
- 受害者访问恶意网页后，浏览器启动`jp2launcher.exe`，请求`init.jnlp`文件。
- 恶意服务器返回`jnpl`文件，其中`progress-class`指定为`javax.naming.InitialContext`。
- `InitialContext`构造函数从恶意服务器请求`jndi.properties`文件，创建上下文对象。
- 受害者主机与RMI服务器建立连接，发起查找恶意对象的请求。
- RMI服务器返回恶意类`Go.class`，并在受害者主机上执行。

---

### （三）JNDI注入漏洞

#### 3.1 攻击条件
漏洞利用条件：
1. 上下文对象必须通过`InitialContext`或其子类实例化。
2. `InitialContext`的一些属性可通过传入`lookup`方法的参数进行修改。

#### 3.2 RMI攻击向量

##### 3.2.1 RMI介绍
RMI（Remote Method Invocation）即远程方法调用，通过代理对象（Stub和Skeleton）实现客户端与服务器间的通信。

##### 3.2.2 JNDI Ref Payload
`Reference`用于表示对象引用，可在JNDI中存储对象。如果序列化不可行，可以使用`Reference`存储对象。`Reference`包含被引用对象的类信息和地址。

##### 3.2.3 直接注入lookup
如果`lookup`方法的参数可控，攻击者可填入恶意服务URL，从而达到任意代码执行的效果。

##### 3.2.4 恶意远程对象
通过远程对象进行JNDI注入较难，要求修改`codebase`且`java.rmi.server.useCodebaseOnly`必须为`False`。

希望以上内容对你有所帮助！