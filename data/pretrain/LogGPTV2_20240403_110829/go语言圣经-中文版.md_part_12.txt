fmt.Println(z, -z, 1/z, -1/z, z/z) // "0 -0 +Inf -Inf NaN"
函数math.IsNaN用于测试一个数是否是非数NaN，math.NaN则返回非数对应的值。虽然可以
用math.NaN来表示一个非法的结果，但是测试一个结果是否是非数NaN则是充满风险的，因
为NaN和任何数都是不相等的（译注：在浮点数中，NaN、正无穷大和负无穷大都不是唯一
的，每个都有非常多种的bit模式表示）：
nan := math.NaN()
fmt.Println(nan == nan, nan  nan) // "false false false"
如果一个函数返回的浮点数结果可能失败，最好的做法是用单独的标志报告失败，像这样：
func compute() (value float64, ok bool) {
// ...
if failed {
return 0, false
}
return result, true
}
接下来的程序演示了通过浮点计算生成的图形。它是带有两个参数的z = f(x, y)函数的三维形
式，使用了可缩放矢量图形（SVG）格式输出，SVG是一个用于矢量线绘制的XML标准。图
3.1显示了sin(r)/r函数的输出图形，其中r是 。
sqrt(x*x+y*y)
浮点数 90
gopl
gopl.io/ch3/surface
// Surface computes an SVG rendering of a 3-D surface function.
package main
import (
"fmt"
"math"
)
const (
width, height = 600, 320 // canvas size in pixels
cells = 100 // number of grid cells
xyrange = 30.0 // axis ranges (-xyrange..+xyrange)
xyscale = width / 2 / xyrange // pixels per x or y unit
zscale = height * 0.4 // pixels per z unit
angle = math.Pi / 6 // angle of x, y axes (=30°)
)
var sin30, cos30 = math.Sin(angle), math.Cos(angle) // sin(30°), cos(30°)
func main() {
fmt.Printf("", width, height)
for i := 0; i \n",
ax, ay, bx, by, cx, cy, dx, dy)
}
}
fmt.Println("")
}
func corner(i, j int) (float64, float64) {
// Find point (x,y) at corner of cell (i,j).
x := xyrange * (float64(i)/cells - 0.5)
y := xyrange * (float64(j)/cells - 0.5)
// Compute surface height z.
z := f(x, y)
// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).
sx := width/2 + (x-y)*cos30*xyscale
sy := height/2 + (x+y)*sin30*xyscale - z*zscale
return sx, sy
}
func f(x, y float64) float64 {
r := math.Hypot(x, y) // distance from (0,0)
return math.Sin(r) / r
}
要注意的是corner函数返回了两个结果，分别对应每个网格顶点的坐标参数。
要解释这个程序是如何工作的需要一些基本的几何学知识，但是我们可以跳过几何学原理，
因为程序的重点是演示浮点数运算。程序的本质是三个不同的坐标系中映射关系，如图3.2所
示。第一个是100x100的二维网格，对应整数整数坐标(i,j)，从远处的(0, 0)位置开始。我们从
远处向前面绘制，因此远处先绘制的多边形有可能被前面后绘制的多边形覆盖。
第二个坐标系是一个三维的网格浮点坐标(x,y,z)，其中x和y是i和j的线性函数，通过平移转换
位网格单元的中心，然后用xyrange系数缩放。高度z是函数f(x,y)的值。
第三个坐标系是一个二维的画布，起点(0,0)在左上角。画布中点的坐标用(sx, sy)表示。我们
使用等角投影将三维点
浮点数 92
gopl
(x,y,z)投影到二维的画布中。画布中从远处到右边的点对应较大的x值和较大的y值。并且画布
中x和y值越大，则对应的z值越小。x和y的垂直和水平缩放系数来自30度角的正弦和余弦值。
z的缩放系数0.4，是一个任意选择的参数。
对于二维网格中的每一个网格单元，main函数计算单元的四个顶点在画布中对应多边形
ABCD的顶点，其中B对应(i,j)顶点位置，A、C和D是其它相邻的顶点，然后输出SVG的绘制
指令。
练习 3.1： 如果f函数返回的是无限制的float64值，那么SVG文件可能输出无效的多边形元素
（虽然许多SVG渲染器会妥善处理这类问题）。修改程序跳过无效的多边形。
练习 3.2： 试验math包中其他函数的渲染图形。你是否能输出一个egg box、moguls或a
saddle图案?
练习 3.3： 根据高度给每个多边形上色，那样峰值部将是红色(#ff0000)，谷部将是蓝色
(#0000ff)。
练习 3.4： 参考1.7节Lissajous例子的函数，构造一个web服务器，用于计算函数曲面然后返
回SVG数据给客户端。服务器必须设置Content-Type头部：
w.Header().Set("Content-Type", "image/svg+xml")
（这一步在Lissajous例子中不是必须的，因为服务器使用标准的PNG图像格式，可以根据前
面的512个字节自动输出对应的头部。）允许客户端通过HTTP请求参数设置高度、宽度和颜
色等参数。
浮点数 93
gopl
3.3. 复数
Go语言提供了两种精度的复数类型：complex64和complex128，分别对应float32和float64两
种浮点数精度。内置的complex函数用于构建复数，内建的real和imag函数分别返回复数的实
部和虚部：
var x complex128 = complex(1, 2) // 1+2i
var y complex128 = complex(3, 4) // 3+4i
fmt.Println(x*y) // "(-5+10i)"
fmt.Println(real(x*y)) // "-5"
fmt.Println(imag(x*y)) // "10"
如果一个浮点数面值或一个十进制整数面值后面跟着一个i，例如3.141592i或2i，它将构成一
个复数的虚部，复数的实部是0：
fmt.Println(1i * 1i) // "(-1+0i)", i^2 = -1
在常量算术规则下，一个复数常量可以加到另一个普通数值常量（整数或浮点数、实部或虚
部），我们可以用自然的方式书写复数，就像1+2i或与之等价的写法2i+1。上面x和y的声明语
句还可以简化：
x := 1 + 2i
y := 3 + 4i
复数也可以用==和!=进行相等比较。只有两个复数的实部和虚部都相等的时候它们才是相等
的（译注：浮点数的相等比较是危险的，需要特别小心处理精度问题）。
math/cmplx包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。
fmt.Println(cmplx.Sqrt(-1)) // "(0+1i)"
下面的程序使用complex128复数算法来生成一个Mandelbrot图像。
gopl.io/ch3/mandelbrot
复数 94
gopl
// Mandelbrot emits a PNG image of the Mandelbrot fractal.
package main
import (
"image"
"image/color"
"image/png"
"math/cmplx"
"os"
)
func main() {
const (
xmin, ymin, xmax, ymax = -2, -2, +2, +2
width, height = 1024, 1024
)
img := image.NewRGBA(image.Rect(0, 0, width, height))
for py := 0; py  2 {
return color.Gray{255 - contrast*n}
}
}
return color.Black
}
用于遍历1024x1024图像每个点的两个嵌套的循环对应-2到+2区间的复数平面。程序反复测
试每个点对应复数值平方值加一个增量值对应的点是否超出半径为2的圆。如果超过了，通过
根据预设置的逃逸迭代次数对应的灰度颜色来代替。如果不是，那么该点属于Mandelbrot集
合，使用黑色颜色标记。最终程序将生成的PNG格式分形图像图像输出到标准输出，如图3.3
所示。
复数 95
gopl
练习 3.5： 实现一个彩色的Mandelbrot图像，使用image.NewRGBA创建图像，使用
color.RGBA或color.YCbCr生成颜色。
练习 3.6： 升采样技术可以降低每个像素对计算颜色值和平均值的影响。简单的方法是将每
个像素分成四个子像素，实现它。
练习 3.7： 另一个生成分形图像的方式是使用牛顿法来求解一个复数方程，例如$z^4-1=0$。
每个起点到四个根的迭代次数对应阴影的灰度。方程根对应的点用颜色表示。
练习 3.8： 通过提高精度来生成更多级别的分形。使用四种不同精度类型的数字实现相同的
分形：complex64、complex128、big.Float和big.Rat。（后面两种类型在math/big包声明。
Float是有指定限精度的浮点数；Rat是无限精度的有理数。）它们间的性能和内存使用对比如
何？当渲染图可见时缩放的级别是多少？
练习 3.9： 编写一个web服务器，用于给客户端生成分形的图像。运行客户端用过HTTP参数
参数指定x,y和zoom参数。
复数 96
gopl
3.4. 布尔型
一个布尔类型的值只有两种：true和false。if和for语句的条件部分都是布尔类型的值，并且==
和<等比较操作也会产生布尔型的值。一元操作符 对应逻辑非操作，因此 的值
! !true
为 ，更罗嗦的说法是 ，虽然表达方式不一样，不过我们一般会
false (!true==false)==true
采用简洁的布尔表达式，就像用x来表示 。
x==true
布尔值可以和&&（AND）和||（OR）操作符结合，并且有短路行为：如果运算符左边值已经
可以确定整个布尔表达式的值，那么运算符右边的值将不再被求值，因此下面的表达式总是
安全的：
s != "" && s[0] == 'x'
其中s[0]操作如果应用于空字符串将会导致panic异常。
因为 的优先级比 高（助记： 对应逻辑乘法， 对应逻辑加法，乘法比加法优先
&& || && ||
级要高），下面形式的布尔表达式是不需要加小括弧的：
if 'a' <= c && c <= 'z' ||
'A' <= c && c <= 'Z' ||
'0' <= c && c <= '9' {
// ...ASCII letter or digit...
}
布尔值并不会隐式转换为数字值0或1，反之亦然。必须使用一个显式的if语句辅助转换：
i := 0
if b {
i = 1
}
如果需要经常做类似的转换, 包装成一个函数会更方便:
// btoi returns 1 if b is true and 0 if false.
func btoi(b bool) int {
if b {
return 1
}
return 0
}
数字到布尔型的逆转换则非常简单, 不过为了保持对称, 我们也可以包装一个函数:
布尔型 97
gopl
// itob reports whether i is non-zero.
func itob(i int) bool { return i != 0 }
布尔型 98
gopl
3.5. 字符串
一个字符串是一个不可改变的字节序列。字符串可以包含任意的数据，包括byte值0，但是通
常是用来包含人类可读的文本。文本字符串通常被解释为采用UTF8编码的Unicode码点
（rune）序列，我们稍后会详细讨论这个问题。
内置的len函数可以返回一个字符串中的字节数目（不是rune字符数目），索引操作s[i]返回第i
个字节的字节值，i必须满足0 ≤ i< len(s)条件约束。
s := "hello, world"
fmt.Println(len(s)) // "12"
fmt.Println(s[0], s[7]) // "104 119" ('h' and 'w')