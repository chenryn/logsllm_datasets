mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a051e] 
mov eax,[ebx] 
mov edx,0x0 
mov dx,[eax+eax+0x80c0bba] 
mov [ebx],edx 
mov eax,[0x80a0556] 
mov ebx,[eax+0x80a0438] 
mov edx,[dword 0x80a0516] 
mov eax,0x0 
mov al,[ebx+edx] 
mov al,[eax+0x80a09ba] 
mov edx,[eax+0x80a058e] 
mov eax,[0x80a0451] 
Anti-RE 
 Code doesn’t have to be hard to reverse 
 Just need to make the reverser give up 
Realization 
 Demoralization 
 Break down the reverser 
Psychological Warfare 
 How else can we make a reverser quit? 
Psychological Warfare 
Sending messages… 
..cantor.dust.. 
 Visualize data patterns 
 Default: entropy distribution  
..cantor.dust.. 
..cantor.dust.. 
 Send a message? 
 Run a message through an inverse Hilbert transform 
 Rebuild program to match desired entropy 
..cantor.dust.. 
..cantor.dust.. 
 Strings? 
Sending messages 
 These are horrible… 
 No one will ever see the message 
 And if they do, they won’t care 
 Need something better… 
Sending messages 
IDA 
IDA 
Control flow graphs… 
IDA… 
Hopper… 
BinNavi… 
Radare… 
 We’ll look at IDA 
 But the algorithm will work on anything 
IDA 
 If you stare at these control graphs long enough… 
   … they almost start to look like things 
Idea… 
 Could we send a message through a CFG? 
 Reverse engineer IDA? 
 Yep! 
Drawing with CFGs 
Draw horizontal lines: 
 Switch 
 “Orphan” jumps 
 jmp a 
 jmp a 
 jmp a 
 jmp a 
 jmp a 
 jmp a 
 a: 
Idea 1 
Draw vertical lines: 
 Non-branching code 
 nop 
 nop 
 nop 
 nop 
 nop 
 nop 
Idea 1 
Combining the two 
 Etch-a-sketch, in IDA! 
Idea 1 
top: 
jmp left 
jmp top_end 
… ; repeat 
jmp right_side 
top_end: 
jmp $ 
left_side: 
nop 
… ; repeat 
jmp bottom_left 
right_side: 
nop 
… ; repeat 
jmp bottom_right 
bottom: 
botton_left: 
jmp bottom_end 
… ; repeat 
bottom_right: 
bottom_end: 
ret 
 IDA tries to align blocks in a given row 
Observation 
top: 
jmp left 
jmp top_end 
… ; repeat 
jmp right_side 
top_end: 
jmp $ 
left_side: 
jmp $+2 
… ; repeat 
jmp bottom_left 
right_side: 
jmp $+2 
… ; repeat 
jmp bottom_right 
bottom: 
botton_left: 
jmp bottom_end 
… ; repeat 
bottom_right: 
bottom_end: 
ret 
 IDA tries to keep rows/columns together 
 But minimize branching distance 
Observation 
 Hour of tinkering 
 Couldn’t make it work 
 Try something else 
Separating the columns 
We have some control over how rows are 
arranged 
 Depends on nodes between 
IDA has all the control over columns 
 Can rearrange parent nodes and branches to keep 
columns close together 
R.I.P. Idea 1 
Force IDA to keep things in order 
 Tie nodes together as tightly as possible 
 Prevent rearranging 
Idea 2 
A node 
A tightly woven CFG 
x: 
a0: je b1 
b0: je c1 
c0: je d1 
d0: jmp F 
a1: je b2 
b1: je c2 
c1: je d2 
d1: jmp F 
a2: je b3 
b2: je c3 
c2: je d3 
d2: jmp F 
a3:  
b3:  
c3: 
d3: jmp F 
F: 
%macro column 3-4 "nonempty" 
    %assign r 0 
    %assign c %1 
    %rep %2-1 
        %assign nr r+1  
        %assign nc c+1  
        e_%+r%+_%+c:  
        %ifidn %4, "empty" 
        %else 
            je e_%+nr%+_%+nc 
        %endif 
        %assign r r+1  
    %endrep 
    e_%+r%+_%+c: jmp %3 
%endmacro 
“Weave” the CFG together 
Turn “pixel” off by removing node? 
Idea 2, continued 
A tightly woven CFG 
A tightly woven CFG 
A tightly woven CFG, II 
x: 
e_0_0:  je e_1_1 
        jmp done 
e_0_1:  je e_2_1 
e_1_0:  je e_2_1 
        jmp done 
e_0_2:  je e_1_3 
e_1_1:  je e_2_2 
e_2_0:  je e_3_1 
        jmp done 
e_0_3:  je done 
e_1_2:  je e_2_3 
e_2_1:  je e_3_2 
e_3_0:  jmp done 
e_1_3:  je done 
e_2_2:  je e_3_3 
e_3_1:  jmp done 
e_2_3:  je done 
e_3_2:  jmp done 
e_3_3:  jmp done 
done: 
ret 
; e_0_0 e_0_1 e_0_2 e_0_3 
; e_1_0 e_1_1 e_1_2 e_1_3 
; e_2_0 e_2_1 e_2_2 e_2_3 
; e_3_0 e_3_1 e_3_2 e_3_3 
; row, column, width, height, done 
%macro diag 5 
    %assign r %1 
    %assign c %2 
    %assign width %3 
    %assign height %4 
    %rep 256 ; max size 
        %assign nr r+1 
        %assign nc c+1 
        e_%+r%+_%+c: 
        %if nr >= height 
        %elif nc >= width 
            je e_%+nr%+_%+c 
        %else 
            %if c == 0 
                jmp e_%+nr%+_%+nc 
                %exitrep 
            %else 
                je e_%+nr%+_%+nc 
            %endif 
        %endif 
        %assign r r+1 
        %assign c c-1 
        %if r>=width 
            jmp %5 
            %exitrep 
        %endif 
    %endrep 
%endmacro 
We still can’t remove a node 
R.I.P. Idea 2 
 Leave all nodes 
 Fill with code if “on” 
 Leave empty if “off” 
Idea 3 
 “Empty” pixel still needs 2 lines 
 Increase contrast by reducing impact of those 2 
 Reduce impact by increasing height 
 Increase height by increasing width 
 vfmaddsub132ps xmm0, xmm1, xmmword ptr cs:[edi+esi*4+8068860h] 
Enhance contrast 
 Insert always on column 
Almost there 
 Add a junk code generator 
Almost there 
movzx eax, bh 
movzx ecx, dh 
dec ecx 
xor ebx, ecx 
lea ebx, [ebp+1*4] 
mov eax, 3526025642 
or eax, 188401817 
mov ah, 4 
lea eax, [ecx+4*edx] 
test edx, eax 
mov cl, 2 
add ebx, ecx 
shr eax, 21 
movzx ecx, dl 
add ebx, ecx 
shr eax, 25 
mov ah, 4 
test edx, eax 
shr ecx, 19 
movzx eax, bh 
or eax, 2742937504 
mov ah, 4 
and edx, eax 
 BMP to %assign converter 
Almost there 
%assign pixel_13_5 1 
%assign pixel_14_5 1 
%assign pixel_15_5 0 
%assign pixel_16_5 1 
%assign pixel_17_5 0 
%assign pixel_18_5 1 
%assign pixel_19_5 1 
%assign pixel_20_5 0 
%assign pixel_21_5 1 
%assign pixel_22_5 0 
%assign pixel_23_5 0 
%assign pixel_24_5 0 
%assign pixel_25_5 1 
%assign pixel_0_6 1 
%assign pixel_1_6 1 
%assign pixel_2_6 1 
%assign pixel_3_6 1 
%assign pixel_4_6 1 
%assign pixel_5_6 1 
%assign pixel_6_6 1 
%assign pixel_7_6 1 
 REpsych Toolchain 
 Generates assembly … 
… to form images through CFGs 
 (Demo) 
REpsych 
 Reverser is forced to sit and stare at 
whatever message you embed 
 Use it to your advantage, crush their soul 
Psychological Warfare 
 (Draw an assembly selfie) 
Grayscale 
Stego 
 the_interview.exe 
More ideas 
 QR 
 a.k.a. the ultimate CTF problem 
More ideas 
 Creepiest malware ever 
 Scans your hard disk 
 Rewrites itself to match your personal images 
 (Demo) 
More ideas 
 14 lines of assembly 
 328 lines of preprocessor macros 
github.com/xoreaxeaxeax 
 REpysch  
 M/o/Vfuscator 2.0 
 x86 0-day POC 
 Etc. 
Feedback? 
domas 
 @xoreaxeaxeax 
 PI:EMAIL