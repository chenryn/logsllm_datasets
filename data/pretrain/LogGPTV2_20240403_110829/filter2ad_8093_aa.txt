**作者：知道创宇404区块链安全研究团队  
时间：2018年11月12日  
English Version:   
项目地址：**
在以太坊合约审计checkList中，我将以太坊合约审计中遇到的问题分为5大种，包括编码规范问题、设计缺陷问题、编码安全问题、编码设计问题、编码问题隐患。其中涵盖了超过29种会出现以太坊智能合约审计过程中遇到的问题。帮助智能合约的开发者和安全工作者快速入门智能合约安全。
本CheckList在完成过程中参考并整理兼容了各大区块链安全研究团队的研究成果，CheckList中如有不完善/错误的地方也欢迎大家提issue.
由于本文的目的主要是 **CheckList** ，所以文中不会包含太详细的漏洞/隐患信息，大部分漏洞分析在扫描报告中会有所提及。
# 1、编码规范问题
## (1) 编译器版本
**合约代码中，应指定编译器版本。建议使用最新的编译器版本**
    pragma solidity ^0.4.25;
老版本的编译器可能会导致各种已知的安全问题，例如
v0.4.23更新了一个编译器漏洞，在这个版本中如果同时使用了两种构造函数，即
    contract a {
        function a() public{
            ...
        }
        constructor() public{
            ...
        }
    }
会忽略其中的一个构造函数，该问题只影响v0.4.22
v0.4.25修复了下面提到的未初始化存储指针问题。
## (2) 构造函数书写问题
**对应不同编译器版本应使用正确的构造函数，否则可能导致合约所有者变更**
在小于0.4.22版本的solidify编译器语法要求中，合约构造函数必须和合约名字相等， 名字受到大小写影响。如：
    contract Owned {
        function Owned() public{
        }
在0.4.22版本以后，引入了constructor关键字作为构造函数声明，但不需要function
    contract Owned {
        constructor() public {
        }
如果没有按照对应的写法，构造函数就会被编译成一个普通函数，可以被任意人调用，会导致owner权限被窃取等更严重的后果。
## (3) 返回标准
**遵循ERC20规范，要求transfer、approve函数应返回bool值，需要添加返回值代码**
    function transfer(address _to, uint256 _value) public returns (bool success)
而transferFrom返回结果应该和transfer返回结果一致。
## (4) 事件标准
**遵循ERC20规范，要求transfer、approve函数触发相应的事件**
    function approve(address _spender, uint256 _value) public returns (bool success){
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value)
        return true
## (5) 假充值问题
**转账函数中，对余额以及转账金额的判断，需要使用require函数抛出错误，否则会错误的判断为交易成功**
    function transfer(address _to, uint256 _value) returns (bool success) {
        if (balances[msg.sender] >= _value && _value > 0) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
上述代码可能会导致假充值。
正确代码如下：
    function transfer(address _to, uint256 _amount)  public returns (bool success) {
        require(_to != address(0));
        require(_amount 
Pandemica
  * 
### [2] 循环安全问题
**合约中，应尽量避免循环次数受到用户控制，攻击者可能会使用过大的循环来完成Dos攻击**
当用户需要同时向多个账户转账，我们需要对目标账户列表遍历转账，就有可能导致Dos攻击。
    function Distribute(address[] _addresses, uint256[] _values) payable returns(bool){
        for (uint i = 0; i  uint) balances;
      uint public totalSupply;
      function Token(uint _initialSupply) {
        balances[msg.sender] = totalSupply = _initialSupply;
      }
      function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0); //可以通过下溢来绕过判断
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
      }
      function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
      }
    }
`balances[msg.sender] - _value >= 0`可以通过下溢来绕过判断。
通常的修复方式都是使用openzeppelin-safeMath，但也可以通过对不同变量的判断来限制，但很难对乘法和指数做什么限制。
正确的写法如下：
    function transfer(address _to, uint256 _amount)  public returns (bool success) {
        require(_to != address(0));
        require(_amount = _amount);
        msg.sender.call.value(_amount)();
        balances[msg.sender] -= _amount;
    }
上述代码就是一个简单的重入漏洞的demo。通过重入注入转账，将大量合约代币递归转账而出。
对于可能存在的重入问题，尽可能的使用transfer函数完成转账，或者限制call执行的gas，都可以有效的减少该问题的危害。
    contract EtherStore {
        // initialise the mutex
        bool reEntrancyMutex = false;
        uint256 public withdrawalLimit = 1 ether;
        mapping(address => uint256) public lastWithdrawTime;
        mapping(address => uint256) public balances;
        function depositFunds() public payable {