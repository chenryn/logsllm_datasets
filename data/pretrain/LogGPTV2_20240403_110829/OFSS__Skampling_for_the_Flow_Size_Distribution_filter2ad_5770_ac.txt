### 4. Performance Comparison

We compare the Cramér-Rao Lower Bound (CRLB) performance of OFSS with that of FS, Sk, and enhanced versions of our skampling competitors SGS and ESk. For SGS(β, ), we use the assisted form as described in [8], and also test using β = 0.75 in addition to the β = 1 value. For ESk(L), we not only compare against the L = 2 favored in [9] but also larger values adapted to α, while ignoring the additional memory required to maintain ownership variables. In data estimation comparisons, we use Maximum Likelihood Estimators (MLEs) for all methods. Previously, a sub-optimal estimator was used to test SGS and ESk.

#### 4.1. Methodology

We compare the methods on the basis of equal counter memory. The methods Sk, FSS, OFSS, and ESk are each given an array with A counters, whereas the sampling methods FS and SGS are given flow tables with A entries. This means that if \( N_f > A \), only \( N_f' = \min(N_f, A) \) flows will actually be delivered to the methods (we ignore flow expiry).

With A and \( N_f \) (or equivalently \( \alpha = \frac{N_f}{A} \)) fixed, the methods Sk, ESk(2), and FS(\( p_f = \frac{N_f'}{N_f} = \min(1, \frac{1}{\alpha}) \)) are determined, as is OFSS(k) given the target \( \theta_k \). For SGS, for each of \( \beta = \{0.75, 1\} \), we set  to match the average number of captured packets to that of FS. For ESk, at larger α values, we select two values of L > 2 to bracket OFSS (at the chosen \( k^* \)). Finally, we also compare against FS(1), which represents perfect flow collection.

#### 4.2. Operating Range

We compare over an operating range of \( 1 \leq \alpha \leq 100 \). For small \( \alpha \), ESk(2) outperforms OFSS, but as \( \alpha \) increases, both Sk and ESk(2) have variances orders of magnitude beyond OFSS for all k, making them difficult to calculate. At \( \alpha = 100 \), the field narrows to ESk(L) for well-chosen L versus OFSS. For each of plots (c) and (d), L values are used so that ESk brackets OFSS. In plot(d), we see that OFSS is within a constant factor of, and the same order of magnitude as, the benchmark FS(1/α). To just defeat OFSS requires ESk with L = 64, which means approximately 19% extra memory is needed, more for larger \( \alpha \).

#### 4.3. Distribution Comparisons

Comparing plot(d) with Figure 2(a) shows that similar conclusions hold even after changing the distribution shape from uniform to TG(50, 1000). For TG(W, R) with R = {10, 1000}, W = {50, 1000}, similar results were found. Changing from optimizing for \( \theta_1 \) to other \( \theta_k \) changes variance values somewhat for OFSS(k) and the matching L slightly for ESk(L), but not the conclusions.

Figure 2 provides a bridge from models to data with load fixed at \( \alpha = 100 \). From plots (a) to (b), we increase W from W = 50 to a more realistic W = 1000, and the picture remains remarkably unchanged. From plot(b) to (c), we move from a very rough traffic model, TG(1000, 1000), to data from the Abilene-III dataset (see Table 1), truncated at W = 1000. Again, the same model-comparison conclusions hold. Finally, plot(d) uses θ from the Leipzig-II dataset where \( \theta_k = 0 \) for many k, resulting in zeros manifesting as gaps in the FS and FS(1) curves. Associated 'spiky' far-tail estimates for OFSS and ESk are a sign of the need for truncation, here we used W = 200.

#### 4.4. Estimation Comparisons

We now compare \( \hat{\theta} \) estimates, again for \( \alpha = 100 \), for FS, OFSS, SGS(1, ), and ESk(64) using maximum likelihood estimation (see [13] for MLE derivations).

| Trace | Leipzig-II | Abilene-III |
| --- | --- | --- |
| Link Capacity | 50 Mbps | 10 Gbps |
| \( N_f \) | 2,277,052 | 23,806,285 |
| Duration (hh:mm:ss) | 02:46:01 | 00:59:49 |
| D | 19.76 | 16.12 |

The datasets, summarized in Table 1, are old but adequate for testing the methods. We extract TCP flows according to the standard 5-tuple (with no timeout).

Figure 3 plots \( \hat{\theta} \) for Abilene-III, truncated at W = 2000, which is approximately the largest value for which \( \theta_k > 0 \) for all k. The grey curve, FS(1), corresponds to θ itself. The estimate for SGS: \( \hat{\theta}_1 = 1 \), and \( \hat{\theta}_k = 0 \) for all k > 1, is as expected very poor, in fact degenerate. All other methods appear to perform quite well, however, it is very difficult to assess performance reliably from such plots, especially in the far tail due to high variability inherent in single point estimates as the data 'runs out'. Smoothing is typically used to improve behavior in such cases [3].

For a more objective assessment, we employ the \( \ell_2 \) error \( \| \hat{\theta} - \theta \|_2 = \left( \sum_{k=1}^W (\hat{\theta}_k - \theta_k)^2 \right)^{1/2} \) to summarize performance of each method over all k. Overall, for each trace, the results of Table 2 reflect the variance pecking order FS < OFSS < ESk < SGS. Note that these exceptions are in part due to the limitations of \( \ell_2 \) as a summary metric. Leipzig-II provides an instructive example of difficulties (for all methods) which arise when the assumption of \( \theta_k > 0 \) is violated. Abilene-III avoids this by a suitable, and larger, choice of W.

### 5. Conclusion

We have introduced OFSS, a hybrid 'skampling' method for flow size estimation. Its Fisher information gathering ability is of the same order as Flow Sampling (the optimum), but its sketch data structure allows its use in resource-constrained applications. It is clearly superior to the alternative SGS and ESk in implementation terms, and in information terms, except for ESk for large enough L. However, ESk is more complex and requires supplementary memory, which increases both with L and hence with load. OFSS(\( k^* \)) is tuned to minimize the CRLB of \( \theta_{k^*} \), but for any \( k^* \), it performs well for all \( \theta_k \).

### Acknowledgment

This work was partially supported by the Australian Research Council’s Discovery Projects funding schemes # DP120102834 and # DP110103505.

### 6. References

[1] Cisco NetFlow. http://www.cisco.com/en/US/products/ps6601/products_ios_protocol_group_home.html.

[2] B. H. Bloom. Space-time trade-offs in hash coding with allowable errors. Communications of the ACM, 13(7):422–426, 1970.

[3] N. Duffield, C. Lund, and M. Thorup. Estimating flow distributions from sampled flow statistics. IEEE/ACM Transactions on Networking, 13(5):933–946, 2005.

[4] C. Estan and G. Varghese. New directions in traffic measurement and accounting. ACM Transactions on Computer Systems, 21(3):270–313, August 2003.

[5] J. D. Gorman and A. O. Hero. Lower bounds for parametric estimation with constraints. IEEE Trans. Info. Th., 36(6):1285–1301, Nov. 1990.

[6] N. Hohn and D. Veitch. Inverting Sampled Traffic. In Proc. 2003 ACM SIGCOMM Internet Measurement Conference, pages 222–233, Miami, Oct. 2003.

[7] A. Kumar, M. Sung, J. Xu, and J. Wang. Data streaming algorithms for efficient and accurate estimation of flow size distribution. In Proceedings of ACM SIGMETRICS / IFIP WG 7.3 Performance 2004, New York, June 2004.

[8] A. Kumar and J. Xu. Sketch Guided Sampling: Using online estimates of flow size for adaptive data collection. In Proceedings of IEEE Infocom 2006, Barcelona, Spain, April 2006.

[9] B. Ribeiro, D. Towsley, and T. Ye. A Resource-minimalist Flow Size Histogram Estimator. In Proc. ACM/SIGCOMM Internet Measurement Conf., pages 285–290, Vouliagmeni, Greece, Oct. 20-22 2008.

[10] P. Tune and D. Veitch. Towards Optimal Sampling for Flow Size Estimation. In Proc. ACM SIGCOMM Internet Measurement Conf., pages 243–256, Vouliagmeni, Greece, Oct. 20-22 2008.

[11] P. Tune and D. Veitch. Fisher Information in Flow Size Distribution Estimation. IEEE Transactions on Information Theory, 57(10):7011–7035, Oct. 2011.

[12] P. Tune and D. Veitch. Sampling vs Sketching: An Information Theoretic Comparison. In IEEE Infocom 2011, pages 2105–2113, Shanghai, China, April 10-15 2011.

[13] P. Tune and D. Veitch. OFSS: Skampling for the Flow Size Distribution: Technical Report. Technical report, Dept. E&EE, The University of Melbourne, 2014. Copy available upon request.

[14] H. Zhao, A. Lall, M. Ogihara, O. Spatscheck, J. Wang, and J. Xu. A data streaming algorithm for estimating entropies of OD flows. In Proc. 7th ACM SIGCOMM Internet Measurement Conf., pages 279–290, New York, NY, USA, 2007. ACM.