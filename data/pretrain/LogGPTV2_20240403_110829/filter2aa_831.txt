1
ASP.NET下的内存⻢(⼀)：filter内存⻢
前⾔
过程
总结
@yzddmr6 
asp.net下的内存⻢研究⽂章⽐较少，⽬前提到过的包括虚拟路径内存⻢以及HttpListener内存⻢。周末
研究了⼀下其他类型的内存⻢，发现.net可以利⽤的地⽅要多得多。所以准备写个系列⽂章，讲⼀讲
asp.net下的内存⻢。 
⽂章仅作研究性质，不保证任何实战效果，请勿⽤于⾮法⽤途。 
java下有filter，servlet等拦截器，asp.net mvc也有同样类似的机制。 
在rider中新建⼀个asp.net web项⽬，默认就会起⼀个asp.net mvc的项⽬。 
前⾔ 
过程 
2
根⽬录下有个 Global.asax⽂件，这个⽂件会在web应⽤启动后⾸先执⾏。其中Codebehind指向了
Global.asax.cs，在Global.asax.cs中可以看到，在asp.net mvc启动的时候，会默认去注册三个组件。 
3
看下FilterConfig.RegisterGlobalFilters这个⽅法的作⽤，就是给全局GlobalFilterCollection⾥⾯加⼊
我们⾃定义的filter逻辑。⾄于为什么不去看route，因为filter的优先级在route之前，当然是我们的第⼀
选择。 
内存⻢的本质是在容器中注⼊⼀段恶意代码，并且由于容器的特性，如filter，servlet等机制，使得每次
收到web请求我们的恶意代码都会被执⾏。 
在java中添加filter内存⻢较为麻烦，需要⽤反射从上下⽂中获取到filterMap等信息，然后向⾥⾯注⼊我
们⾃定义的filter。但是在asp.net中，则直接将这个接⼝给⽤户暴露了出来。这就极⼤⽅便了我们注⼊
内存⻢的操作。 
看了下System.Web.Mvc.GlobalFilterCollection，从注释就可以看出来，这⾥存放了全局的filter。 
C++
复制代码
namespace WebApplication2
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();//注册 MVC 应⽤程序中的所有区域
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);//注
册filter
            RouteConfig.RegisterRoutes(RouteTable.Routes);//注册路由
            BundleConfig.RegisterBundles(BundleTable.Bundles);//打包捆绑资
源，对css以及js进⾏压缩
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
C++
复制代码
namespace WebApplication2
{
    public class FilterConfig
    {
        public static void RegisterGlobalFilters(GlobalFilterCollection 
filters)
        {
            filters.Add(new HandleErrorAttribute());
        }
    }
}
1
2
3
4
5
6
7
8
9
10
4
那么应该打⼊什么类型的filter呢？翻了下⽂档，ASP.NET MVC 框架⽀持四种不同类型的筛选器： 
1. 授权筛选器 = 实现IAuthorizationFilter属性。 
2. 操作筛选器 = 实现IActionFilter属性。 
3. 结果筛选器 = 实现IResultFilter属性。 
4. 异常筛选器 = 实现IExceptionFilter属性。 
筛选器按上⾯列出的顺序执⾏。 例如，授权筛选器始终在操作筛选器和异常筛选器始终在每⼀种其他类
型的筛选器之后执⾏。 
授权筛选器⽤于实现控制器操作的身份验证和授权。 例如，"授权"筛选器是授权筛选器的示例。 
操作筛选器包含在控制器操作执⾏之前和之后执⾏的逻辑。 例如，可以使⽤操作筛选器修改控制器操作
返回的视图数据。 
结果筛选器包含在执⾏视图结果之前和之后执⾏的逻辑。 例如，您可能希望在视图呈现给浏览器之前修
改视图结果。 
异常筛选器是要运⾏的最后⼀种筛选器类型。 可以使⽤异常筛选器来处理控制器操作或控制器操作结果
引发的错误。 您还可以使⽤异常筛选器来记录错误。 
每种不同类型的筛选器都按特定顺序执⾏。 如果要控制执⾏相同类型的筛选器的顺序，则可以设置筛选
器的 Order 属性。 
所有操作筛选器的基类是类System.Web.Mvc.FilterAttribute。 如果要实现特定类型的筛选器，则需要
创建从基本筛选器类继承的类，并实现⼀个或多个IAuthorizationFilter、 IActionFilter、或
IResultFilter``IExceptionFilter接⼝。 
5
以上来⾃微软⽂档：https://docs.microsoft.com/zh-cn/aspnet/mvc/overview/older-versions-
1/controllers-and-routing/understanding-action-filters-cs 
作为攻击者来说，我们当然希望我们的内存⻢处于最⾼优先级的位置。所以就选择继承
IAuthorizationFilter接⼝。 
除此以外，类⽐java内存⻢，还要把我们的filter放到第⼀位的位置。 
在默认的System.Web.Mvc.GlobalFilterCollection.Add⽅法中可以看到，Add有两个重载⽅法，⼀个带
order参数⼀个不带。最后调⽤AddInternal⽅法把我们的filter添加到类成员中。 
查看System.Web.Mvc.Filter，发现默认的filter order是-1。那么为了提⾼我们的优先级，我们只需要
把order设为⼀个⼩于-1的值即可。 
6
访问filter.aspx 注⼊内存⻢。⼀⽚空⽩表示注⼊成功 
C++
复制代码
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
7
访问?cmd=calc弹出计算器 
跟java不同的是，aspx必须访问⼀个真实存在的url时才会触发filter，⽽⾮像java⼀样filter可以⽤/*直接
匹配任意路径。 
除此之外，java的filter是责任链模式，必须要显式声明chain.doFilter才会⾛到下⼀个filter。如果jb⼩⼦
⼀时⼿抖忘了写这句代码，打进内存⻢后就会造成⽹站的正常业务⽆法访问。但是.net没有这种机制。
不需要做额外声明即可按顺序调⽤各个filter。 
总结 
8
本⽂提到的filter内存⻢必须依赖于system.web.mvc.dll这个东⻄，也就是只能在.net mvc下使⽤。那么
有没有其他的内存⻢，可以仅依靠.net framework就可以执⾏呢？等我下篇⽂章讲⼀讲。