    0:      from all lookup local
    5:      from 10.0.0.0/24 lookup 5000
    32766:  from all lookup main
    32767:  from all lookup default
    ```
    默认情况下，RHEL 包含表 `local`{.literal}、`main`{.literal} 和
    `default`{.literal} 的规则。
2.  显示表 `5000`{.literal} 中的路由：
    ``` literallayout
    # ip route list table 5000
    default via 192.0.2.2 dev enp1s0
    10.0.0.0/24 via 192.0.2.1 dev enp1s0
    ```
3.  显示接口和防火墙区：
    ``` literallayout
    # firewall-cmd --get-active-zones
    external
      interfaces: enp1s0 enp7s0
    internal
      interfaces: enp8s0 enp9s0
    ```
4.  验证 `external`{.literal} 区是否启用了伪装：
    ``` literallayout
    # firewall-cmd --info-zone=external
    external (active)
      target: default
      icmp-block-inversion: no
      interfaces: enp1s0 enp7s0
      sources:
      services: ssh
      ports:
      protocols:
      masquerade: yes
      ...
    ```
:::
::: itemizedlist
**其它资源**
-   [使用旧网络脚本时，涉及基于策略的路由的配置文件概述](#configuring-policy-based-routing-to-define-alternative-routes_configuring-and-managing-networking.html#overview-of-configuration-files-involved-in-policy-based-routing-when-using-the-legacy-network-scripts_configuring-policy-based-routing-to-define-alternative-routes "使用旧网络脚本时，涉及基于策略的路由的配置文件概述"){.link}
-   `ip-route(8)`{.literal} man page
-   `ip-rule(8)`{.literal} man page
-   有关旧的网络脚本的详情，请查看
    `/usr/share/doc/network-scripts/sysconfig.txt`{.literal} 文件
:::
:::
:::
[]{#creating-a-dummy-interface_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#creating-a-dummy-interface_configuring-and-managing-networking.html#creating-a-dummy-interface_configuring-and-managing-networking}第 23 章 创建 dummy 接口 {.title}
:::
作为 Red Hat Enterprise Linux 用户，您可以创建并使用 dummy
网络接口进行调试和测试。dummy
接口提供了一个设备来路由数据包而无需实际传送数据包。它可让您创建使用网络管理器（NetworkManager）管理的其他回送设备，使不活跃
SLIP（Serial Line Internet Protocol）地址类似本地程序的实际地址。
::: section
::: titlepage
# []{#creating-a-dummy-interface_configuring-and-managing-networking.html#creating-a-dummy-interface-with-both-an-ipv4-and-ipv6-address-using-nmcli_creating-a-dummy-interface}使用 nmcli 使用 IPv4 和 IPv6 地址创建 dummy 接口 {.title}
:::
您可以创建带有各种设置的 dummy 接口。这个步骤描述了如何使用 IPv4 和 IPv6
地址创建 dummy 接口。创建 dummy 接口后，NetworkManager
会自动将其分配给默认的 `public`{.literal} 防火墙区域。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要配置没有 IPv4 或 IPv6 地址的 dummy 接口，请将 `ipv4.method`{.literal}
和 `ipv6.method`{.literal} 参数设置为 `disabled`{.literal}。否则，IP
自动配置失败，NetworkManager 会取消激活连接并删除 dummy 设备。
:::
::: orderedlist
**流程**
1.  要创建一个名为 [*dummy0*]{.emphasis} 的、带有静态 IPv4 和 IPv6
    地址的 dummy 接口，请输入：
    ``` literallayout
    # nmcli connection add type dummy ifname dummy0 ipv4.method manual ipv4.addresses 192.0.2.1/24 ipv6.method manual ipv6.addresses 2001:db8:2::1/64
    ```
2.  可选： 要查看 dummy 接口，请输入：
    ``` literallayout
    # nmcli connection show
    NAME            UUID                                  TYPE      DEVICE
    enp1s0          db1060e9-c164-476f-b2b5-caec62dc1b05  ethernet    ens3
    dummy-dummy0    aaf6eb56-73e5-4746-9037-eed42caa8a65  dummy    dummy0
    ```
:::
::: itemizedlist
**其它资源**
-   nm-settings(5) man page
:::
:::
:::
[]{#using-netconsole-to-log-kernel-messages-over-a-network_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#using-netconsole-to-log-kernel-messages-over-a-network_configuring-and-managing-networking.html#using-netconsole-to-log-kernel-messages-over-a-network_configuring-and-managing-networking}第 24 章 使用 netconsole 通过网络记录内核信息 {.title}
:::
使用 `netconsole`{.literal}
内核模块和同名的服务，您可以在登录到磁盘时或者无法使用串口控制台时，通过网络记录内核信息来调试内核。
::: section
::: titlepage
# []{#using-netconsole-to-log-kernel-messages-over-a-network_configuring-and-managing-networking.html#configuring-the-netconsole-service-to-log-kernel-messages-to-a-remote-host_using-netconsole-to-log-kernel-messages-over-a-network}配置 netconsole 服务为将内核信息记录到远程主机 {.title}
:::
使用 `netconsole`{.literal}
内核模块，您可以将内核信息记录到远程系统日志服务。
::: itemizedlist
**先决条件**
-   在远程主机上安装了系统日志服务，如 `rsyslog`{.literal}。
-   远程系统日志服务被配置为接收来自此主机的日志条目。
:::
::: orderedlist
**流程**
1.  安装 `netconsole-service`{.literal} 软件包：
    ``` literallayout
    # yum install netconsole-service
    ```
2.  编辑 `/etc/sysconfig/netconsole`{.literal} 文件并将
    `SYSLOGADDR`{.literal} 参数设置为远程主机的 IP 地址：
    ``` literallayout
    # SYSLOGADDR=192.0.2.1
    ```
3.  启用并启动 `netconsole`{.literal} 服务：
    ``` literallayout
    # systemctl enable --now netconsole
    ```
:::
::: itemizedlist
**验证步骤**
-   在远程系统日志服务器中显示 `/var/log/messages`{.literal} 文件。
:::
::: itemizedlist
**其它资源**
-   有关启用远程主机接收日志信息的详情，请参考
    `Configuring basic system settings`{.literal}
    文档中的[配置远程日志解决方案](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/configuring-a-remote-logging-solution_configuring-basic-system-settings){.link}部分。
:::
:::
:::
[]{#systemd-network-targets-and-services_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#systemd-network-targets-and-services_configuring-and-managing-networking.html#systemd-network-targets-and-services_configuring-and-managing-networking}第 25 章 systemd 网络目标和服务 {.title}
:::
NetworkManager 在系统引导过程中配置网络。但是，当使用远程
root(/)引导时，比如 root 目录存储在 iSCSI 设备中，网络设置会在 RHEL
启动前应用到初始 RAM
磁盘(`initrd`{.literal})。例如：如果在内核命令行中使用
`rd.neednet=1`{.literal}
指定网络配置，或者指定了用于挂载远程文件系统的配置，那么网络设置就会在
`initrd`{.literal} 中应用。
本节描述了应用网络设置时使用的不同目标，如
`network`{.literal}、`network-online`{.literal}和
`NetworkManager-wait-online`{.literal} 服务，以及如何配置
`systemd`{.literal} 服务在 `network-online`{.literal} 服务启动后启动。
::: section
::: titlepage
# []{#systemd-network-targets-and-services_configuring-and-managing-networking.html#differences-between-the-network-and-network-online-systemd-target_systemd-network-targets-and-services}network 和 network-online systemd target 的不同 {.title}
:::
Systemd 维护 `network`{.literal} 和 `network-online`{.literal}
目标单元。特殊单元，如 `NetworkManager-wait-online.service`{.literal} 有
`WantedBy=network-online.target`{.literal} 和
`Before=network-online.target`{.literal} 参数。如果启用，这些单元以
`network-online.target`{.literal}
开始，并延迟达到目标直到建立了某种类型的网络连接。它们会延迟
`network-online`{.literal} 目标直到网络连接。
`network-online`{.literal}
目标启动一个服务，这会增加更长的延迟来进一步执行。systemd
会自动将这个目标单元的 `Wants`{.literal} 和 `After`{.literal}
参数的依赖关系添加到所有 System V(SysV) `init`{.literal}
脚本服务单元中，它带有一个 Linux Standard Base(LSB)标头引用
`$network`{.literal} 工具。LSB 标头是 `init`{.literal}
脚本的元数据。您可以使用它指定依赖项。这与 `systemd`{.literal}
目标类似。
`network`{.literal} 目标不会显著延迟引导过程的执行。达到
`network`{.literal}
目标意味着，负责设置网络的服务已启动。但并不意味着已经配置了一个网络设备。这个目标在关闭系统的过程中非常重要。例如：如果您在引导过程中有一个在
`network`{.literal}
目标之后排序的服务，则在关闭过程中会取消这个依赖关系。在服务停止后，网络才会断开连接。远程网络文件系统的所有挂载单元都自动启动
`network-online`{.literal} 目标单元和顺序。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`network-online`{.literal}
目标单元只在系统启动时有用。系统完成引导后，这个目标不会跟踪网络的在线状态。因此，您无法使用
`network-online`{.literal}
来监控网络连接。这个目标提供了一个一次性系统启动概念。
:::
:::
::: section
::: titlepage
# []{#systemd-network-targets-and-services_configuring-and-managing-networking.html#overview-of-networkmanager-wait-online_systemd-network-targets-and-services}NetworkManager-wait-online 概述 {.title}
:::
同步传统网络脚本会遍历所有配置文件来设置设备。它们应用所有与网络相关的配置并确保网络在线。
`NetworkManager-wait-online`{.literal}
服务会等待一个超时时间来配置网络。这个网络配置涉及插入以太网设备、扫描
Wi-Fi 设备等。NetworkManager 会自动激活配置为自动启动的适当配置集。因
DHCP
超时或类似事件导致自动激活失败，网络管理器（NetworkManager）可能会在一定时间内处于忙碌状态。根据配置，NetworkManager
会重新尝试激活同一配置集或不同的配置集。
当启动完成后，所有配置集都处于断开连接的状态，或被成功激活。您可以配置配置集来自动连接。以下是一些参数示例，这些参数设定超时或者在连接被视为活跃时定义：
::: itemizedlist
-   `connection.wait-device-timeout`{.literal} -
    为驱动程序设定检测设备的超时时间
-   `ipv4.may-fail`{.literal} 和 `ipv6.may-fail`{.literal} - 使用一个 IP
    地址家族或者一个特定的地址系列是否已完成配置进行激活。
-   `ipv4.gateway-ping-timeout`{.literal} - 延迟激活。
:::
::: itemizedlist
**其它资源**
-   `nm-settings(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#systemd-network-targets-and-services_configuring-and-managing-networking.html#configuring-a-systemd-service-to-start-after-the-network-has-been-started_systemd-network-targets-and-services}将 systemd 服务配置为在网络已启动后再启动 {.title}
:::
Red Hat Enterprise Linux 在 `/usr/lib/systemd/system/`{.literal}
目录中安装 `systemd`{.literal} 服务文件。此流程为
`/etc/systemd/system/service_name.service.d/`{.literal}
中的服务文件创建一个置入片段，它与 `/usr/lib/systemd/system/`{.literal}
[*中的服务文件一起使用，以在网络在线后启动特定服务*]{.emphasis}。如果在
drop-in 片断中的设置与 `/usr/lib/systemd/system/`{.literal}
中的服务文件中的设置重叠，则其具有更高优先级。
::: orderedlist
**流程**
1.  要在编辑器中打开服务文件，请输入：
    \# `systemctl edit service_name`{.literal}
2.  输入以下内容并保存更改：
    ``` screen
    [Unit]
    After=network-online.target
    ```
3.  重新载入 `systemd`{.literal} 服务。
    \# `systemctl daemon-reload`{.literal}
:::
:::
:::
[]{#linux-traffic-control_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#linux-traffic-control_configuring-and-managing-networking}第 26 章 Linux 流量控制 {.title}
:::
Linux 提供管理和操作数据包传输的工具。Linux
流量控制（TC）子系统帮助进行策略、分类、控制以及调度网络流量。TC
还可以通过使用过滤器和动作在分类过程中利用数据包内容分栏。TC
子系统使用排队规则（`qdisc`{.literal}）来达到此目的，这是 TC
构架的一个基本元素。
调度机制在进入或退出不同的队列前确定或者重新安排数据包。最常见的调度程序是先入先出（FIFO）调度程序。您可以使用
`tc`{.literal} 实用程序或永久使用 NetworkManager 进行 `qdiscs`{.literal}
操作。
本节介绍了排队规则，并描述了如何更新 RHEL 中的默认 `qdiscs`{.literal}。
::: section
::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#overview-of-queuing-disciplines_linux-traffic-control}排队规则概述 {.title}