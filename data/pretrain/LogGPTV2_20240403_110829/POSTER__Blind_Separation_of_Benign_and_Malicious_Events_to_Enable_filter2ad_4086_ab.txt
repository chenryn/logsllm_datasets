number 53. Consequently the “word” A0A2A5 in a malware sam-
ple proﬁle indicates an outbound DNS query over UDP. We apply
the same mapping to all packets in the trace. Table 2 summarizes
all network events we consider in our analysis.
3.2 Features
Based on the discussion in §3.1, each malware or background
trafﬁc sample is represented as a sequence of words, where each
word indicates the occurrence of a particular event. Consequently,
the words in a malware sample correspond to the two-way com-
munication of the malware with the remote C&C server. We use
n-gram analysis on that ﬁnal representation to capture relevant net-
work events in both malware and background trafﬁc. We use the
generated n-grams as our feature set, where n ranges from 1 to 5.
We perform the n-grams analysis for constructing the feature
vectors for each malware family, and the background trafﬁc. Then,
we select the top discriminating features for the malware family
with the background trafﬁc using recursive feature elimination [3].
For instance, malware family 1 (MF1) along with the background
trafﬁc are used to select the most discriminant features between
them. After the end of this process, we have the top features that
can differentiate between the malware family and the background
trafﬁc without being mixed.
Next, we build the ICA model for decomposing the malware
from the background trafﬁc. For each malware family, we mix the
selected top n-gram features for the malware and the background
trafﬁc linearly. For instance, feature 1 distribution in MF1 is mixed
with its corresponding distribution in the background trafﬁc. Then,
Network Event
Table 2: Network Events
Description
Connection
Size
DNS
Request type
Response type
Ports
TCP, UDP, RAW
request quartiles, response quartiles
A, NS, MX, CNAME, SOA, PTR
GET, POST, HEAD
200’s, ..., 500’s
80, 8080, 53, and others
Distance FunctionscoreMalware 1 ICAMalware 2 ICAMalware 3 ICAMalware 1 ClassiﬁerMalware 2 ClassiﬁerMalware 3 ClassiﬁerscorescoreMalware Variant(yes/no) labelthe generated distribution is fed as input to ICA to build a model
for MF1. The generated model in used in the ﬁrst stage in Figure 1.
Finally, the two output components from the ICA model, mal-
ware component and background component, are used to train the
classiﬁer, which is the second stage in Figure 1. Consequently, we
have an ICA model and a classiﬁer model for each malware family
in the system. The ICA model removes the background trafﬁc at-
tributes from the features, and then the classiﬁer is used to label the
corresponding malware sample.
3.3 Classiﬁcation Results
In the following, we demonstrate the effectiveness of our system
in separating mixed signals and classifying malware samples based
on the cleaned features.
Figure 3 shows the effectiveness of ICA in recovering the distri-
bution a feature from the mixed trafﬁc, where “Original” is the dis-
tribution of a malware n-gram feature without being mixed, “Mixed”
is the distribution of the feature that we see in the mixed trafﬁc, and
“ICA” is the distribution of the feature recovered by ICA from the
mixed distribution. The ICA distribution closely follows the same
trend of the original malware feature.
We use FastICA [4] for the ICA stage, and Random Forests [2]
for the classiﬁcation stage. We use 10-fold cross validation to eval-
uate the ICA and the classiﬁer. Each dataset is split into 10-folds,
where 9-folds are used for training the ICA and the classiﬁer model,
and the 10th fold is used for testing. For the testing fold, we use
the mixed feature distributions to evaluate the effectiveness of the
ICA model. The classiﬁcation results are shown in Table 3. We use
standard metrics, including the accuracy, precision, recall, and F1
score [8], to evaluate the classiﬁer as illustrated by Table 3. From
the table, it is clear that ICA can achieve high accuracy in label-
ing the malware families, even outperforming the related literature
utilizing the same dataset [8].
Figure 3: ICA Recovered Feature
Malware
Darkness
SRAT
Table 3: Results
Precision Recall
0.932
0.981
0.971
0.983
F1
0.924
0.976
Accuracy
0.943
0.981
4. CHALLENGES & LIMITATIONS
Mixing Challenges Our system mixes the plain malware feature
distributions with their corresponding features in the background
trafﬁc to train the ICA model to split them. In practice, some n-
grams in the mixed trafﬁc may be missing in the plain malware or
background trafﬁc. Therefore, we are considering other techniques
to capture those missing n-grams. For instance, we can use a skip-
ping factor λ to skip over words in the proﬁles e.g., considering
“w1 w2 w3 w4” as a sentence with λ = 1, we generate the follow-
ing bi-grams {(w1 w2), (w1 w3), (w2 w3), (w2 w4), (w3 w4)}.
Feature Interpretation We are exploring the top discriminant fea-
tures in order to gain insight into the main differences in behavior
between the malware trafﬁc and the background trafﬁc. The n-gram
analysis makes it a little bit challenging to interpret the features into
meaningful behavior, however, we are analyzing them to learn the
different malware patterns that enable ICA algorithms to decom-
pose the mixed trafﬁc.
ICA Limitations The two assumptions that ICA relies on are inde-
pendence and non-normality for the malware trafﬁc. We assume
that the background trafﬁc such as web browsing, OS updates, or
peer-to-peer trafﬁc are independent from the malware trafﬁc run-
ning on the same machine. We used normal distribution tests to
conﬁrm that malware feature distributions are not normal. Conse-
quently, ICA can only work on malware families that do not exhibit
any Gaussianity in their features. Our work cannot be applied to
families that have similar properties of the background trafﬁc (e.g.,
both are following normal distribution or dependent). Exploring
the extent to which our system is affected by violation of those
properties is left as a future work.
5. CONCLUSION
In this paper, we proposed using ICA to decompose a machine
network trafﬁc into malware and background trafﬁc to improve the
performance of classiﬁcation based methods. Our preliminary re-
sults improved over previous work in the literature, which shows
the effectiveness of ICA in decomposing the trafﬁc. The system
that we have introduced in this paper is generic in purpose, and
it can meet needs in multiple applications. For example, trafﬁc
analysis and identiﬁcation is a generic problem related to services
proﬁling, and our system can perhaps used for that.
6. ACKNOWLEDGMENTS
We would like to thank Allison Mankin for her involvement in
earlier stages of this work. The work of Hesham Mekky was mainly
done while at VeriSign. This research was supported in part by
US NSF grants CNS-10171647, CNS-1017092, CNS-1117536 and
CRI-1305237.
7. REFERENCES
[1] A. J. Bell and T. J. Sejnowski. An Information-Maximization
Approach to Blind Separation and Blind Deconvolution. Neural
computation, 1995.
[2] L. Breiman. Random Forests. Machine learning, 2001.
[3] I. Guyon, J. Weston, S. Barnhill, and V. Vapnik. Gene Selection for
Cancer Classiﬁcation using Support Vector Machines. Machine
learning, 2002.
[4] A. Hyvarinen. Fast and Robust Fixed-point Algorithms for
Independent Component Analysis. Neural Networks, 1999.
[5] D. Kong and G. Yan. Discriminant Malware Distance Learning on
Structural Information for Automated Malware Classiﬁcation. In ACM
KDD, 2013.
[6] T.-W. Lee. Independent Component Analysis. Springer, 1998.
[7] A. Mohaisen and O. Alrawi. Av-meter: An evaluation of antivirus
scans and labels. In DIMVA, 2014.
[8] A. Mohaisen, A. G. West, A. Mankin, and O. Alrawi. Chatter:
Exploring classiﬁcation of malware based on the order of events. In
CNS, 2014.
[9] K. Rieck, T. Holz, C. Willems, P. Düssel, and P. Laskov. Learning and
Classiﬁcation of Malware Behavior. In DIMVA. 2008.