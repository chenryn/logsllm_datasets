[39] Samee Zahur and David Evans. 2015. Obliv-C: A Language for Extensible Data-
Oblivious Computation. IACR Cryptology ePrint Archive 2015 (2015), 1153.
[40] Jingren Zhou. 2009. Sort-Merge Join.
In Encyclopedia of Database Systems.
Springer US, 2673–2674.
A BASELINE PROTOCOLS FOR SCATTERINIT
A.1 Naive solutions
One direct way to implement the the functionality of Figure 6 is
using generic MPC such as garbled circuits. The approach requires
a circuit of size 𝑂(𝑛𝑙𝜎) that for each 𝑖 ∈ [𝑛] selects the 𝑖th output
among the all possible values (0, r1, . . . , r𝑛−𝑙). Hence a solution
based on generic MPC constructions would require 𝑂(𝑛𝑙𝜎) commu-
nication and computation. Alternatively, one can rely on additive
homomorphic encryption to enable P1 to distribute the encrypted
values of r into the right positions of encrypted r′ and then execute
a protocol with P2 to obtain shares of r′ in the clear. This approach
requires 𝑂(𝑛) computation and 𝑂((𝑛+𝑙)𝐿) communication where 𝐿
is the length of a ciphertext of additively homomorphic encryption,
which adds considerable expansion to the length of the encrypted
value.
A.2 FSS-based ScatterInit
S
S
C
C
, 𝛼) = 𝛽, otherwise.
, 𝛼) ⊕ FSS.Eval(KFSS
Function Secret Sharing (FSS). Our construction below uses as a
building block function secret sharing (FSS) [6]. While this primitive
provides functionality for general functions, we use its instantiation
for point functions, which also implies private information retrieval
(PIR). A point function 𝑓𝛼,𝛽(𝑥) with domain [𝑛] is defined as 𝑓 (𝛼) =
𝛽 and 𝑓 (𝑖) = 0 for all 𝑖 ≠ 𝛼. A function secret sharing scheme
has two algorithms FSS.KeyGen and FSS.Eval. The key generation
produces two keys (KFSS
) ← FSS.KeyGen(𝛼, 𝛽) that when
, KFSS
S
evaluated, satisfy FSS.Eval(KFSS
, 𝑖) if 𝑖 ≠ 𝛼 and
, 𝑖) = FSS.Eval(KFSS
C
FSS.Eval(KFSS
First, we present a solution for the ScatterInit functionality
of Figure 6 in the case 𝑙 = 1, and then discuss how to extend it to
any value of 𝑙. The two parties will generate in a secure computa-
tion a pair of FSS keys (𝑘1, 𝑘2) with the following properties. Let
[[v𝑖]]1 = F𝑘1(𝑖) and [[v𝑖]]2 = F𝑘2(𝑖) for 𝑖 ∈ [𝑛], then we have that
∀𝑗 ≠ 𝑖1 : [[v𝑗]]1 = [[v𝑗]]2, and [[v𝑖1]]1 ⊕ [[v𝑖1]]2 = r1. This compu-
tation can be done several times in parallel to obtain a protocol for
the case 𝑙 > 1, where each party XORs locally its output vectors
from all 𝑙 executions. This protocol has 𝑂(𝑙 log(𝑛)) communication,
𝑂(𝑙 log(𝑛)) computation in MPC, and 𝑂(𝑙𝑛) local computation for
each party. One drawback of this approach is that the result would
be xor-shared, and for our applications we require additive shares
for efficiency, as we will perform arithmetic operations. A naive
conversion from xor to additive shares in a circuit would require
𝑂(𝑛) additions, bumping up the computation and communication
to be linear in 𝑛, which is prohibitive for the values of 𝑛 to be found
in some realistic data analysis (see Section 8). This overhead can
be avoided as follows: starting with the case 𝑙 = 1. Similarly to
above the parties generate FSS keys (𝑘1, 𝑘2) with the difference
that [[v𝑖1]]1 ⊕ [[v𝑖1]]2 = x instead of r1, where x is a random value
[[r1]]1, 𝑐1 =
𝑐2 =
not known to either party, while ∀𝑗 ≠ 𝑖1 : [[v𝑗]]1 = [[v𝑗]]2. Sub-
sequently, the parties run a garbled circuit protocol with inputs
𝑗 ∈[𝑛]([[v𝑗]]1), and [[v𝑖1]]1 from P1, and [[r1]]2 and
𝑗 ∈[𝑛]([[v𝑗]]2) from P2. This secure computation (a) com-
putes [[v𝑖1]]2 as 𝑐1 ⊕ 𝑐2 ⊕ [[r1]]2, (b) reconstructs r1, and (c) reveals
𝑠 = r1 − [[v𝑖1]]2 to P1. Finally, to obtain an additive share of the
intended sparse vector r′, P1 sets [[r′ 𝑗]]1 = −[[v𝑗]]1, for all 𝑗 ≠ 𝑖1,
and [[r′𝑖1]]1 = 𝑠, while P2 sets [[r′ 𝑗]]2 = [[v𝑗]]2, for all 𝑗 ∈ [𝑛].
Running this protocol several times gives a protocol for the
general case (𝑙 > 1) from Figure 6 with 𝑂(𝑙 log(𝑛)) communication,
𝑂(𝑙 log(𝑛)) computation in MPC, and 𝑂(𝑙𝑛) local computation for
each party. The garbled circuit sub-protocol is extremely efficient,
as it requires 𝑙 additions and 2𝑙 XORs, where the latter can be
performed locally with the Free-XOR optimization [23].
B NAIVE BAYES APPLICATION
This section describes our third application that we built using the
functionality from our framework, which was omitted from the
main paper body due to space constraints.
the above expression into score(𝑐) = log(𝑃(𝑐)) +𝑡 ∈𝑑 log(𝑃(𝑡|𝑐)).
B.1 Secure Naive Bayes Classification
A naive Bayes classifier is a non-parametric supervised classifi-
cation algorithm that assigns to an item 𝑑 (for example a doc-
ument) the class 𝑐 in a set of potential classes 𝐶 (for example
{spam, no-spam}) that maximizes the expression score(𝑐) = 𝑃(𝑐)·
Π𝑡 ∈𝑑 𝑃(𝑡|𝑐), where 𝑡 ∈ 𝑑 denotes the database features present in
the feature representation of 𝑑. A common approach to keep under-
flows under control is to use logs of probabilities. This transforms
In Naive Bayes, 𝑃(𝑐) is estimated as 𝑃(𝑐) = 𝑁𝑐/𝑁 , namely the
number of items 𝑁𝑐 of class 𝑐 in the dataset, divided by the dataset
size 𝑁 . 𝑃(𝑡|𝑐) is estimated as 𝑃(𝑡|𝑐) = 𝑇𝑐,𝑡/𝑁𝑐, namely the number
of occurrences (or score) 𝑇𝑐,𝑡 of feature 𝑡 in items of class 𝑐, normal-
ized by the total number of examples of class 𝑐 in the training dataset.
Additionally, Laplace smoothing is often used to correct for terms
not in the dataset, redefining 𝑃(𝑡|𝑐) to be 𝑃(𝑡|𝑐) = (𝑇𝑐,𝑡+1)/(𝑁𝑐+𝑁)
A secure two-party naive Bayes classification functionality is
defined as follows: a server holds the dataset 𝐷 that consists of 𝑛
items with 𝑘 features. Each item in the dataset is labeled with its
class from the set 𝐶 of potential classes. Hence, the server holds the
values 𝑃(𝑡|𝑐), 𝑃(𝑐) defined above. A client wants to obtain a label
for an item 𝑑. This needs to be done in a privacy preserving manner
where only the client learns the output label and the server learns
nothing.
The work of Bost et al. [5] presented a solution to the above
problem using Paillier encryption and an argmax protocol based
on additive homomorphic encryption. Our ROOM functionality
provides a direct solution for this two-party problem, in which
the server reveals an upper bound of its number of features. This
solution works as follows: for each class 𝑙 ∈ 𝐶, the server and the
client invoke the ROOM functionality with input values log(𝑃(𝑡|𝑙))
for all keys 𝑡, as well as default values 1/(𝑁𝑐 +𝑁) for the server, and
query (𝑡)𝑡 ∈𝑑 for the client. This gives the parties additive shares of
the vector (log(𝑃(𝑡|𝑙))𝑡 ∈𝑑. Then, the parties can compute locally
shares of the vector (score(𝑙))𝑙∈𝐶, which contains the scores of
𝑑 with respect to all classes. Finally, the class with highest score,
14
Dataset
Offline Time
Total Time
SecureML
Ours
SecureML
Ours
Movies
Newsgroups
Languages, ngrams=1
Languages, ngrams=2
4d16h34m55.36s
1d5h40m20.66s
1m7.18s
18h15m18.24s
4h18m52.67s
1h5m15.15s
35.65s
4m1.77s
4d18h35m26.99s
1d6h9m32.82s
1m39.36s
18h34m34.36s
9h29m23.53s
2h26m21.82s
3m18.35s
13m36.84s
Ours
Total Communication
Offline Communication
SecureML
SecureML
19.19 GiB 761.73 MiB 19.33 GiB
5.01 GiB 190.38 MiB
5.13 GiB
3.4 MiB
1.9 MiB 4.42 MiB
3.05 GiB
Ours
1.92 GiB
1.31 GiB
111.76 MiB
4.08 GiB 893.73 MiB
11.71 MiB
Table 4: Comparison of our approach with SecureML [29] in the WAN setting. See also Table 3.
C ADDITIONAL EXPERIMENTAL RESULTS
C.1 Experiments in the WAN Setting
Figure 16 and Table 4 show the results of the experiments from
Section 8 in the WAN.
C.2 ROOM Micro-Benchmarks
Table 1 presents the runtimes for Circuit-ROOM and Poly-ROOM
and how they depend on the database size 𝑛 and the query size
𝑚. We first measure the runtimes of each algorithm for a range
of parameters 𝑛 ∈ {500, 5000, 50000} and 𝑚 ∈ {0.1𝑛, 0.2𝑛, . . . , 𝑛}.
The results can be seen in Figure 17. Each plot corresponds to
one choice of 𝑛, while values of 𝑚 are given on the x-axes. The
runtime of both ROOM variants increases as 𝑚 grows, but Circuit-
ROOM is outperformed by Poly-ROOM as 𝑛 increases, as long as
𝑚 95k features, our protocol takes less than 2s. In contrast, the total
classification time for a dataset with only 70 features took over 3
seconds in [5].
15
MoviesNewsgroupsLanguages,ngrams=1Languages,ngrams=2Dataset1s2s5s10s30s1m2m5m10m30m1hRunningTimeNaiveBayes(LAN)Basic-ROOMCircuit-ROOMPoly-ROOMFigure 16: (Left) Running time of a Naive Bayes query in the WAN. See also Figure 15. (Middle) Running time of a 𝑘-NN query
in the WAN. See also Figure 13. (Right) Total running time of an SGD training epoch for logistic regression with varying
document sparsity. Note that unlike in the LAN, we can use SecureML’s homomorphic encryption-based offline phase [29]
here that also benefits from larger batches. See also Figure 14.
Figure 17: Measured running times of each of our ROOM constructions in the LAN setting, for several choices of query size
and database size. We distinguish between local time (for time spent doing local computation) and MPC time, for running
time of MPC sub-protocols. Error bars indicate 95% confidence intervals.
ning times were measured for length 𝑚 queries to a ROOM of size 𝑛, with 𝑚 ∈ (cid:8)2𝑖
{0, . . . , 18}(cid:9). Then, for each of our algorithms, a model of the running time was computed using nonlinear least-squares from
Figure 18: Estimated performance of our two instantiations of sparse ROOM in the LAN (left) and WAN (right) settings. Run-
𝑖 ∈
scipy.optimize.curve_fit, where the function to be fitted was chosen according to the asymptotics in Table 1. Each pixel was
computed by averaging over the colors corresponding to each algorithm, weighted by the inverse of their respective running
times. Thus, the dominant color of a region corresponds to the algorithm that performs the best in that setting.
𝑖 ∈ {0, . . . , 13}(cid:9) and 𝑚 ∈ (cid:8)2𝑖
|
|
16
MoviesNewsgroupsLanguages,ngrams=1Languages,ngrams=2Dataset1s2s5s10s30s1m2m5m10m30m1hRunningTimeNaiveBayes(WAN)Basic-ROOMCircuit-ROOMPoly-ROOMMoviesNewsgroupsLanguages,ngrams=1Languages,ngrams=2Dataset1s2s5s10s30s1m2m5m10m30m1h2h5h10h1d2dRunningTimek-NN(WAN)DenseBasic-ROOMCircuit-ROOMPoly-ROOMO(cid:128)linetimeOnlinetime1282565121024BatchSize30s1m2m5m10m30m1h2h5hRunningtimeLogisticRegression(WAN)Dense10.0%Nonzeros5.0%Nonzeros2.0%Nonzeros1.0%Nonzeros50100150200250300350400450500(cid:131)erysizem0.00.20.40.60.81.01.21.4Time(s)Databasesizen=500(LAN)Circuit-ROOMPoly-ROOMLocaltimeMPCtime500100015002000250030003500400045005000(cid:131)erysizem024681012Time(s)Databasesizen=5000(LAN)Circuit-ROOMPoly-ROOMLocaltimeMPCtime5k10k15k20k25k30k35k40k45k50k(cid:131)erysizem020406080100120Time(s)Databasesizen=50000(LAN)Circuit-ROOMPoly-ROOMLocaltimeMPCtime01000020000300004000050000Databasesize01000020000300004000050000(cid:131)erysizeAlgorithmwiththelowestrunningtime(LAN)Circuit-ROOMPoly-ROOM01000020000300004000050000Databasesize01000020000300004000050000(cid:131)erysizeAlgorithmwiththelowestrunningtime(WAN)Circuit-ROOMPoly-ROOM