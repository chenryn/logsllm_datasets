现在新建的区域性就可以像其他区域性那样使用了：
    var ci = new CultureInfo("de-AT-ST");
    CultureInfo.CurrentCulture = ci;
    CultureInfo.CurrentUICulture = ci;
区域性可以用于格式化和资源。如果再次启动本章前面编写的Cultures In Action应用
程序，就可以看到自定义区域性。
28.8 小结
本章讨论了.NET应用程序的全球化和本地化。对于应用程序的全球化，我们讨论了
System.Globalization名称空间，它用于格式化依赖于区域性的数字和日期。此外，说明了
在默认情况下，字符串的排序取决于区域性。我们使用不变的区域性进行独立于区域性的
排序。并且，本章讨论了如何使用CultureAndRegionInfoBuilder类创建自定义区域性。
应用程序的本地化使用资源来实现。资源可以放在文件、附属程序集或自定义存储器
（如数据库）中。本地化所使用的类位于System.Resources名称空间中。要从其他地方读
取资源，如附属程序集或资源文件，可以创建自定义资源读取器。
我们还学习了如何本地化WPF、ASP.NET Core应用程序和使用UWP的应用程序。
下一章介绍XAML, XAML用于UWP和WPF，所以下一章提供了这两种技术的基础。
第Ⅲ部分
Windows应用程序
  第29章 核心XAML
  第30章 样式化XAML应用程序
  第31章 模式和XAML应用程序
  第32章 Windows应用程序：用户界面
  第33章 高级Windows应用程序
  第34章 带WPF的Windows桌面应用程序
  第35章 用WPF创建文档
  第36章 部署Windows应用程序
第29章
核心XAML
本章要点
● XAML语法
● 依赖属性
● 路由事件
● 附加属性
● 标记扩展
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件，用于WPF和Universal
Windows应用程序：
● 代码简介
● XAML简介
● 依赖对象
● 路由事件
● 附加属性
● 标记扩展
29.1 XAML的作用
编写.NET应用程序时，需要了解的通常不仅仅是C#语法。如果编写Universal
Windows应用程序，使用WPF的Windows桌面应用程序、使用WF的工作流、创建XPS文
档、编写Silverlight，就还需要XAML。XAML（eXtensible Application Markup Language，
可扩展应用程序标记语言）是一种声明性的XML语法，上述这些应用程序通常需要
XAML。本章详细介绍XAML的语法，以及可用于这种标记语言的扩展机制。本章描述了
在WPF应用程序中的XAML和使用Universal Windows Platform （UWP）的Windows应用
程序中的XAML之间的差异。
可以用XAML完成的工作都可以用C#实现，那么，为什么还需要XAML? XAML通常
用于描述对象及其属性，在很深的层次结构中，这是可能的。例如，Window控件包含一
个Grid控件，Grid控件包含一个StackPanel和其他控件，StackPanel包含按钮和文本框控
件。XAML便于描述这种层次结构，并通过XML属性或元素分配对象的属性。
XAML允许以声明式的方式编写代码，而C#主要是一种命令式编程语言。XAML支
持声明式定义。在命令式编程语言中，用C#代码定义一个for循环，编译器就使用中间语
言（IL）代码创建一个for循环。在声明性编程语言中，声明应该做什么，而不是如何完
成。虽然C#不是纯粹的命令式编程语言，但使用LINQ时，也是在以声明方式编写语法。
XAML是一个XML语法，但它定义了XML的几个增强。XAML仍然是有效的XML，
但是一些增强有特殊的意义，例如，在XML属性中使用花括号，子元素的命名方式。
有效使用XAML之前，需要了解这门语言的一些重要特性。本章介绍了如下XAML特
性：
● 依赖属性： 从外部看起来，依赖属性像正常属性。然而，它们需要更少的存储空
间，实现了变更通知。
● 路由事件： 从外面看起来，路由事件像正常的.NET事件。然而，通过添加和删除
访问器来使用自定义事件实现方式，就允许冒泡和隧道。事件从外部控件进入内
部控件称为隧道，从内部控件进入外部控件称为冒泡。
● 附加属性： 通过附加属性，可以给其他控件添加属性。例如，按钮控件没有属性
用于把它自己定位在网格控件的特定行和列上。在XAML中，看起来有这样一个
属性。
● 标记扩展： 编写XML特性需要的编码比XML元素少。然而，XML特性只能是字符
串；使用XML语法可以编写更强大的元素。为了减少需要编写的代码量，标记扩
展允许在特性中编写强大的语法。
  注意： .NET属性参见第3章。事件，包括通过添加和删除访问器编写自定义
事件，详见第9章，XML的功能参见第27章。
29.2 XAML概述
XAML代码使用文本XML来声明。XAML代码可以使用设计器创建，也可以手动编
写。Visual Studio包含的设计器可给WPF、Silverlight、WF或Universal Windows应用程序
编写XAML代码。也可以使用其他工具创建XAML，如Blend for Visual Studio 2015。
Visual 
Studio最适合编写源代码，Blend最适合创建样式、模板和动画。在Visual 
Studio
2013中，Blend和Visual 
Studio开始共享相同的XAML设计器。Blend 
2015年重写为与
Visual Studio共享相同的外壳。Visual Studio用户会立即感觉使用Blend 2015很顺手。
下面讨论XAML。在WPF应用程序中，XAML元素映射到.NET类。对于XAML，这
并不是一个严格的要求。在Silverlight 
1.0中，.NET不能用于插件，只能使用JavaScript解
释和通过编程方法访问XAML代码。这种情况自Silverlight 
2.0以来有了改变，.NET
Framework的一个小型版本是Silverlight插件的一部分。对于Silverlight或WPF，每个
XAML元素都对应一个.NET类。对于Windows应用程序，每个XAML元素都对应一个
Windows Runtime类型。
XAML代码在生成过程中会发生什么？为了编译WPF项目，应在程序集
PresentationBuildTasks中定义MSBuild任务MarkupCompilePass1和MarkupCompilePass2。这
些MSBuild任务会创建标记代码的二进制表示BAML（Binary 
Application 
Markup
Language，二进制应用程序标记语言），并添加到程序集的.NET资源中。在运行期间，
会使用该二进制表示。
29.2.1 使用WPF把元素映射到类上
如上一节所述，XAML元素通常映射到.NET类或Windows Runtime类上。下面利用C#
控制台项目在Window中通过编程方式创建一个Button对象。如下面的代码所示，实例化
一个Button对象，并把其Content属性设置为一个字符串；定义一个Window，设置其Title
和Content属性。要编译这段代码，需要引用程序集PresentationFramework、
PresentationCore、WindowBase和System.Xaml（代码文件CodeIntroWPF/Program.cs）。
    using System;
    using System.Windows;
    using System.Windows.Controls;
    namespace CodeIntroWPF
    {
      class Program
      {
        [STAThread]
        static void Main()
        {
        var b = new Button
        {
          Content = "Click Me! "
        };
        b.Click += (sender, e) =>
        {
          b.Content = "clicked";
        };
        var w = new Window
        {
          Title = "Code Demo",
          Content = b
        };
        var app = new Application();
        app.Run(w);
        }
      }
    }
 注意： 
在.NET 
Framework中，System.Windows名称空间中除了System.
Windows.Forms（包括较早的Windows Forms技术）之外的所有内容都属于WPF。
使用XAML代码可以创建类似的UI。与以前一样，这段代码创建了一个包含Button元
素的Window元素。为Window元素设置了其内容和Title特性（代码文件XAMLIntroWPF
/MainWindow. xaml）。
当然，上面的代码没有定义Application实例，它也可以用XAML定义。在Application
元素中，设置了StartupUri特性，它链接到包含主窗口的XAML文件上（XAML文件
XAMLIntroWPF/App. xaml）。
29.2.2 通过通用Windows应用程序把元素映射
到类上
通过Universal Windows Platform （UWP）应用程序映射类型，类似于使用WPF映射
类型，但使用Windows运行库定义的是完全不同的类型。下面再次不使用XAML。使用用
于Windows Universal应用程序的Blank App模板可以创建一个应用程序，删除XAML文件
（包括MainPage. xaml以及App.xaml，其中包括C#后台编码文件）。为了不自动在设计器
中创建Main方法，必须在项目属性的Build设置中，设置条件编译符号DISABLE_XAML_
GENERATED_MAIN。
在Main方法中，需要启动应用程序。与WPF类似，这里也使用Application类。这次，
它来自Windows.UI.Xaml名称空间。不调用Run实例方法，这个类定义了一个Start静态方
法。Start方法定义了一个ApplicationInitializationCallback委托参数，在应用程序的初始化
过程中调用它。在这个初始化中，创建一个按钮（Windows.UI.Xaml.Controls名称空
间），激活当前窗口：
    using System;
    using Windows.ApplicationModel.Activation;
    using Windows.UI.Xaml;
    using Windows.UI.Xaml.Controls;
    namespace CodeIntroUWP
    {
      partial class Program
      {
        [STAThread]
        public static void Main()
        {
        Application.Start(p =>
        {
          var b = new Button
          {
            Content = "Click Me! "
          };
          b.Click += (sender, e) =>
          {
            b.Content = "clicked";
          };
          Window.Current.Content = b;
          Window.Current.Activate();
        });
        }
      }
    }
用XAML创建相同的用户界面，创建一个新的通用Windows应用程序项目。其XAML
代码和WPF的XAML代码非常相似，但使用了Page，而不是Window。甚至XML名称空间
相同，然而，XAML类型从Windows运行库映射到名称空间（代码文件XamlIntroUWP 
/
MainPage.xaml）：
29.2.3 使用自定义.NET类
要在XAML代码中使用自定义.NET类，只需要在XAML中声明.NET名称空间，并定
义一个XML别名。为了说明这个过程，下面定义了一个简单的Person类及其FirstName和
LastName属性（代码文件DataLib/Person.cs）。
    public class Person
    {
      public string FirstName { get; set; }
      public string LastName { get; set; }
      public override string ToString() => $"{FirstName} {LastName}";
    }
  注意： 要在WPF和UWP应用程序中使用类型，把DataLib库创建为一个可移
植的库。
在XAML中，定义一个XML名称空间别名datalib，它映射到程序集DataLib的.NET名
称空间DataLib上。如果类型与窗口在相同的程序集中，就可以在这个声明中删除程序集
名。有了这个别名，就可以在元素的前面加上别名，使用该名称空间中的所有类了。
在XAML代码中，添加了一个列表框，其中包含Person类型的项。使用XAML特性，
设置FirstName和LastName属性的值。运行该应用程序时，ToString（）方法的输出会显示
在列表框中（代码文件XAMLIntroWPF/MainWindow.xaml）。
对于UWP应用程序，XAML声明是不同的，因为使用using代替clr-namespace，不需
要程序集的名称（代码文件XAMLIntroUWP/MainPage.xaml）：
  注意： UWP应用程序不在别名声明中使用clr-namespace的原因是，UWP中的
XAML既不基于.NET，也不受限于.NET。可以使用本机C++与XAML，因此clr并不合
适。
代替在WPF中使用XML别名定义.NET名称空间和程序集名，这里使用库中的程序集
特性XmlNsDefinition把.NET名称空间映射到XML名称空间上。这个特性的一个参数定义
了XML名称空间，另一个参数定义了.NET名称空间。使用这个特性，也可以把多个.NET
名称空间映射到一个XML名称空间上。
    [assembly: XmlnsDefinition("http://www.wrox.com/Schemas/2015", "Wrox.ProCShar
p.XAML")]
有了这个特性，XAML代码中的名称空间声明就可以改为映射到XML名称空间上。
29.2.4 把属性用作特性
只要属性的类型可以表示为字符串，或者可以把字符串转换为属性类型，就可以把属
性设置为特性。下面的代码片段用特性设置了Button元素的Content和Background属性。
在上面的代码片段中，因为Content属性的类型是object，所以可以接受字符串。
Background属性的类型是Brush, Brush类型把BrushConverter类定义为一个转换器类型，这
个类用TypeConverter特性进行注解。BrushConverter使用一个颜色列表，从
ConvertFromString（）方法中返回一个SolidColorBrush。
 注意： 