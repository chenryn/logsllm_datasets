# 八、使用 Kubernetes 管理 Docker 容器
在前一章中，我们了解了 Docker 网络以及如何解决网络问题。在本章中，我们将介绍 Kubernetes。
Kubernetes 是一个容器集群管理工具。目前，它支持 Docker 和 Rocket。它是谷歌的一个开源项目，于 2014 年 6 月在谷歌输入/输出上推出。它支持在各种云提供商上部署，如 GCE、Azure、AWS、vSphere 和裸机。Kubernetes 管理器是精简的、可移植的、可扩展的和自我修复的。
在本章中，我们将介绍以下内容:
*   《Kubernetes 的概论》
*   在裸机上部署 Kubernetes
*   在 Minikube 上部署 Kubernetes
*   在 AWS 和 vSphere 上部署 Kubernetes
*   部署吊舱
*   在生产环境中部署 Kubernetes
*   调试立方问题
Kubernetes 有以下各种重要成分:
*   **节点**:这是一个物理或虚拟机，是 Kubernetes 集群的一部分，运行 Kubernetes 和 Docker 服务，可以在其上调度 pods。
*   **Master** :这维护了 Kubernetes 的服务器运行时的运行时状态。它是配置和管理 Kubernetes 组件的所有客户端调用的入口点。
*   **Kubectl** :这是用来与 Kubernetes 集群交互的命令行工具，提供对 Kubernetes APIs 的主访问。通过它，用户可以部署、删除和列出 pods。
*   **Pod** :这是 Kubernetes 中最小的调度单元。它是共享卷且没有端口冲突的 Docker 容器的集合。它可以通过定义一个简单的 JSON 文件来创建。
*   **复制控制器**:这管理吊舱的生命周期，并通过根据需要创建或杀死吊舱来确保指定数量的吊舱在任何给定时间运行。
*   **Label**: Labels are used to identify and organize pods and services based on key-value pairs:
    ![Managing Docker Containers with Kubernetes](img/image_08_001.jpg)
    库比涅斯特大师/minion flow
# 在裸机上部署 Kubernetes
Kubernetes 可以部署在裸机 Fedora 或 Ubuntu 机器上。甚至 Fedora 和 Ubuntu 虚拟机也可以部署在 vSphere、工作站或 VirtualBox 中。在接下来的教程中，我们将看到 Kubernetes 在单个 Fedora 24 机器上的部署，该机器将充当主节点，以及部署`k8s`吊舱的节点:
1.  启用 Kubernetes 测试 YUM 存储库:
    ```
     yum -y install --enablerepo=updates-testing kubernetes
    ```
2.  安装`etcd``iptables-services`:
    ```
     yum -y install etcd iptables-services
    ```
3.  在`/etcd/hosts`中，设置 Fedora 主节点和 Fedora 节点:
    ```
     echo "192.168.121.9  fed-master 
            192.168.121.65  fed-node" >> /etc/hosts
    ```
4.  禁用防火墙和`iptables-services` :
    ```
     systemctl disable iptables-services firewalld 
            systemctl stop iptables-services firewalld 
    ```
5.  编辑`/etcd/kubernetes/config`文件:
    ```
     # Comma separated list of nodes in the etcd cluster
            KUBE_MASTER="--master=http://fed-master:8080"
            # logging to stderr means we get it in the systemd journal
            KUBE_LOGTOSTDERR="--logtostderr=true"
            # journal message level, 0 is debug
            KUBE_LOG_LEVEL="--v=0"
            # Should this cluster be allowed to run privileged docker 
            containers
            KUBE_ALLOW_PRIV="--allow-privileged=false"
    ```
6.  编辑`/etc/kubernetes/apiserver`文件的内容:
    ```
     # The address on the local server to listen to. 
            KUBE_API_ADDRESS="--address=0.0.0.0" 
            # Comma separated list of nodes in the etcd cluster 
            KUBE_ETCD_SERVERS="--etcd-servers=http://127.0.0.1:2379" 
            # Address range to use for services         
            KUBE_SERVICE_ADDRESSES="--service-cluster-ip-
            range=10.254.0.0/16" 
            # Add your own! 
            KUBE_API_ARGS=""
    ```
7.  由于 Fedora 24 使用 etcd 2.0，
    ```
     ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379" 
    ```
    ，为了监听端口`2379`，文件`/etc/etcd/etcd.conf`应该有以下未注释的行
8.  **Kubernetes 节点设置可以在不同的主机上完成，但是我们将在当前机器上设置它们，以便在同一台机器上配置 Kubernetes 主节点和节点:**
9.  **编辑文件`/etcd/kubernetes/kubelet`如下:**
    ```
     ### 
            # Kubernetes kubelet (node) config 
            # The address for the info server to serve on (set to 0.0.0.0 
            or "" for 
            all interfaces) 
            KUBELET_ADDRESS="--address=0.0.0.0" 
            # You may leave this blank to use the actual hostname 
            KUBELET_HOSTNAME="--hostname-override=fed-node" 
            # location of the api-server 
            KUBELET_API_SERVER="--api-servers=http://fed-master:8080" 
            # Add your own! 
            #KUBELET_ARGS=""
    ```
10.  创建一个 shell 脚本来启动同一台机器上的所有 Kubernetes 主服务和节点服务:
    ```
     $ nano start-k8s.sh 
            for SERVICES in etcd kube-apiserver kube-controller-manager 
            kube-scheduler 
            kube-proxy kubelet docker; do  
                systemctl restart $SERVICES 
                systemctl enable $SERVICES 
                systemctl status $SERVICES  
            done
    ```
11.  创建一个`node.json`文件，在 Kubernetes 机器上进行配置:
    ```
            { 
                "apiVersion": "v1", 
                "kind": "Node", 
                "metadata": { 
                    "name": "fed-node", 
                    "labels":{ "name": "fed-node-label"} 
                }, 
                "spec": { 
                    "externalID": "fed-node" 
                } 
            } 
    ```
12.  使用以下命令创建节点对象:
    ```
     $ kubectl create -f ./node.json 
            $ kubectl get nodes 
            NAME               LABELS                  STATUS 
            fed-node           name=fed-node-label     Unknown 
    ```
13.  一段时间后，节点应该准备好部署吊舱:
    ```
     kubectl get nodes 
            NAME                LABELS                  STATUS 
            fed-node            name=fed-node-label     Ready
    ```
# 对 Kubernetes Fedora 手动设置进行故障排除
如果 kube-apiserver 无法启动，可能是由于服务帐户准入控制，需要一个服务帐户和一个令牌才能安排 pods。它由控制器自动生成。默认情况下，API 服务器使用 TLS 服务密钥，但是由于我们不是通过 HTTPS 发送，也没有 TLS 服务器密钥，因此我们可以向 API 服务器提供相同的密钥文件，以便 API 服务器验证生成的服务帐户令牌。
使用以下方法生成密钥并将其添加到`k8s`簇:
```
 openssl genrsa -out /tmp/serviceaccount.key 2048
```
要启动应用编程接口服务器，请在`/etc/kubernetes/apiserver`文件的末尾添加以下选项:
```
 KUBE_API_ARGS="--
         service_account_key_file=/tmp/serviceaccount.key"
```
`/etc/kubernetes/kube-controller-manager`在文件末尾添加以下选项:
```
 KUBE_CONTROLLER_MANAGER_ARGS=" -
 service_account_private_key_file
        =/tmp/serviceaccount.key"
```
使用`start_k8s.sh` shell 脚本重新启动集群。
# 使用 Minikube 部署 Kubernetes
Minikube 还在开发中；它是一个工具，可以轻松地在本地运行 Kubernetes，针对底层 OS (MAC/Linux)进行了优化。它在虚拟机中运行单节点 Kubernetes 集群。Minikube 帮助开发人员学习 Kubernetes，轻松进行日常开发和测试。
以下设置将介绍 Mac OS X 上的 Minikube 设置，因为在 Mac 上部署 Kubernetes 的指南很少:
1.  下载 Minikube 二进制文件:
    ```
     $ curl -Lo minikube 
    https://storage.googleapis.com/minikube/releases/v0.12.2/minikube-darwin-amd64
     % Total % Received % Xferd Average Speed Time Time Time Current
     Dload Upload Total Spent Left Speed
     100 79.7M 100 79.7M 0 0 1857k 0 0:00:43 0:00:43 --:--:-- 1863k
    ```
2.  授予二进制文件的执行权限:
    ```
    $ chmod +x minikube 
    ```
3.  将 Minikube 二进制文件移动到`/usr/local/bin`以便将其添加到路径中，并且可以直接在终端上执行:
    ```
     $ sudo mv minikube /usr/local/bin
    ```
4.  After this, we'll require the `kubectl` client binary to run commands against the single-node Kubernetes cluster, for Mac OS X:
    ```
    $ curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/darwin/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            https://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/darwin/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
              % Total % Received % Xferd Average Speed Time Time Time Current
                                         Dload Upload Total Spent Left Speed
            100 53.2M 100 53.2M 0 0 709k 0 0:01:16 0:01:16 --:--:-- 1723k 
    ```
    kubectl 现已配置为与集群一起使用。
5.  设置 Minikube 在本地部署虚拟机并配置 Kubernetes 集群:
    ```
     $ minikube start
            Starting local Kubernetes cluster...