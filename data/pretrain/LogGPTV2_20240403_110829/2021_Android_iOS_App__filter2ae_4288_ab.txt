         @JavascriptInterface public final String getGrabUser() {
            Object v0 = this.mActivity.get();
            String v1 = null;
            if(v0 != null) {
                v1 = d.a(((ZendeskSupportActivity)v0).getMPresenter().getGrabUser());
                a.a("" + Thread.currentThread().getName() + " : " + (">>>JavascriptInterface getGrabUser: " + v1), new Object[0]);
            }
            return v1;
        }
其中 getGrabUser 函数会返回用户诸多个人信息，以下是白帽子给出的完整 PoC，首先构造一个调起目标 App
的网页链接发送给受害者，网页代码如下：
    Zaheck page 1
        Begin Zaheck!
用户使用任意浏览器打开该网页会跳转到目标应用（此处可以通过模拟点击的方式，但在 iOS 需要点击确认），目标应用会自动加载传入的 URL，该 URL
内容如下：
    Zaheck page 2
该 PoC 其实并不完整，因为它仅将获取到的隐私信息显示在了网页而并没有上传到攻击者服务器，要实现也是非常简单，利用 ajax 请求即可，由于加载的 URL
hostname 已经是攻击者可控所以不存在跨域问题。注意该 PoC 是一个兼容 Android 与 iOS
双平台的，而且通常都是如此，因为两平台业务逻辑会保持一致，这也是该类型漏洞更加有趣的一面。
长亭移动安全团队在2017年也发现过类似的的漏洞，如
[CNNVD-201701-883](http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201701-883)，而且该漏洞为
RCE，危害更大。2019 看雪安全开发者大会也针对该类型在 iOS 平台的利用做过分享[《是谁推开我的“窗”：iOS App
接口安全分析》](https://bbs.pediy.com/thread-253366.htm)
除此以外利用 Deep links 实现 CSRF 也有很多经典实例，与之对应的 App Links 也有由于开发者错误配置导致的敏感信息泄漏漏洞
[#855618](https://hackerone.com/reports/855618)。在数量方面逻辑漏洞、本地身份认证绕过等也是重要的攻击面。更多业务上云使得
API 漏洞呈现较大增长，其中不乏由于安装包泄漏后端 API 敏感信息导致的漏洞，篇幅有限不再展开。
## 总结
移动操作系统安全性不断增强以及业务云端迁移使得移动 App 漏洞比过往更难挖掘，但未来仍有许多需要耕耘的方向，这里斗胆列举几个
  * 反序列化漏洞的利用
  * 与 Web 漏洞结合
  * 系统层面影响应用层安全的漏洞
  * 剥离通信保护的服务端漏洞
以最后一个为例，最近几年对于通信安全方面有关部门出台了诸多标准，典型的如《JR/T 0092-2019》和《JR/T 0171-2020》，与此同时
HTTPS 协议，SSL Pinning，数据包完整性校验等多管齐下的保护使得 API
渗透愈发困难，但通信保护不会在根本上缓解漏洞的发生，仍大有可为，望所有人都不负韶华。
参考：
**快快加入我们吧！**
【公司】长亭科技  
【工作地点】北京  
【岗位】移动安全工程师（正式/实习）  
【薪酬】15-40K  
【联系】简历投递邮箱：[PI:EMAIL](mailto:PI:EMAIL)
岗位职责：  
1.挖掘和审计 Android/iOS App 漏洞  
2.参与自动化测试技术研究和实践  
3.移动安全技术对抗持续研究  
任职要求：  
1.认真踏实  
2.熟悉 Android/iOS App 攻击面及常见攻防技术  
3.熟悉 ARM 逆向，常见加密算法及协议  
4.基础扎实，熟练使用逆向、插桩、协议分析等工具  
5.具有一定研究新技术能力  
加分项：  
1.在相关漏洞平台或 SRC 提交过优质漏洞  
2.参与过 CTF 类竞赛  
3.了解当前最新应用加壳与脱壳技术  
4.熟悉 Web 渗透  
5.拥有自动化测试经验