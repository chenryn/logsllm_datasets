title:Improving System Dependability with Functional Alternatives
author:Charles P. Shelton and
Philip Koopman
Improving System Dependability with Functional Alternatives
Charles P. Shelton
Research and Technology Center
Robert Bosch Corporation
Pittsburgh, PA, USA
PI:EMAIL
Abstract
We present the concept of alternative functionality for
improving dependability in distributed embedded systems.
Alternative functionality is a mechanism that complements
traditional performability and graceful degradation
techniques. Rather than providing reduced performance
or functionality when components or subsystems fail,
alternative functionality replaces a lost
feature with
another existing system function that can substitute for the
lost
improved system
dependability when it is not feasible to allocate dedicated
backup systems for fault
tolerance. We show how
alternative functionality can be applied to enhance system
dependability with a case study of an elevator control
system. In simulation, an elevator design that implemented
alternative functionality in some of its subsystems tolerated
many combinations of component failures that caused
system failures in the original design.
This can provide
service.
1. Introduction
Many distributed embedded computer systems have
tight cost constraints that make traditional dependability
techniques infeasible. Typically, an embedded system de-
sign uses its available system resources to provide maxi-
mum features and functionality.
Adding additional
capacity for fault tolerance mechanisms such as dual or tri-
plex modular redundancy often cannot be justified. Prod-
ucts are marketed based on features, and many customers
will not perceive enough value added to the system for the
additional cost of redundancy, even though it may produce
a more dependable product. However, our society has be-
come increasingly dependent on complex, distributed em-
bedded systems. Despite the fact that they are sold based
on their features, these systems must continually provide
dependable service in the face of harsh environmental con-
ditions, partial system failures or loss of resources, or hu-
man error. People will not tolerate products that do not
meet a certain level of dependability, even though they will
usually only pay increased costs for additional features.
Designing low cost, dependable distributed embedded
systems is difficult. Designs must incorporate mechanisms
for dependability, while not sacrificing resources needed
for functional and performance requirements. Specifying
Philip Koopman
ECE Department
Carnegie Mellon University
Pittsburgh, PA, USA
PI:EMAIL
degraded operating modes that the system can provide in
the event of component or subsystem failures is a popular
approach. Often a distributed embedded system, after suf-
fering some partial failures, may have enough resources to
satisfy some or all of its primary requirements, even though
it cannot provide its complete functionality. However,
specifying and designing degraded operating modes for all
possible combinations of failures becomes exponentially
complex with the number of failures that must be handled.
We introduce the concept of alternative functionality as
a mechanism for specifying and achieving degraded modes
and improved dependability with limited system resources.
For example, consider a vehicle navigation system that pro-
vides turn-by-turn directions to the driver. The system will
have a prioritized list of high-level requirements (typically
referred to as marketing requirements) that define the sys-
tem's services and quality requirements, but usually do not
specify system functionality. We call these requirements
system objectives. Objectives for the navigation system
might include (i) giving the driver timely and accurate turn-
ing cues, (ii) providing the driver with accurate situational
awareness in terms of current location and time or distance
to the next turn, and (iii) indicating how close the driver is
to his or her destination. We define primary objectives as a
minimum set of requirements the system must satisfy to be
considered “working.” Objectives that can be set aside in
degraded operating modes due to failures are considered
auxiliary objectives. The system can potentially lose the
ability to satisfy all of its auxiliary objectives and still be a
working system (albeit a degraded one) as long as it contin-
ues to fulfill its primary objectives. In the navigation sys-
tem, objective (i) may be considered primary, and
objectives (ii) and (iii) may be considered auxiliary.
A system objective will be satisfied by reaching some
minimum defined threshold of service for that objective.
This threshold may be defined qualitatively and/or quanti-
tatively. In the navigation system, objective (i) may be sat-
isfied by giving accurate turning cues within a minimum
defined deadline, and objectives (ii) and (iii) may be satis-
fied by providing a minimum level of accuracy in time, lo-
cation and distance measurements. Most systems will be
designed to optimize features and functionality with their
available resources, and thus will exceed their minimum re-
quirements for system objectives when fully working.
System objectives are further refined into more detailed
functional requirements that specify all of the system's fea-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
tures. These requirements determine the system's imple-
mented functionality, where each feature specified should
satisfy a subset of system objectives. In our example navi-
gation system we specify three high level system features:
an LCD visual display that provides a map and location in-
formation, audio output that provides voice directions, and
the ability to provide turning hints by illuminating the turn
signal lights on the dash board. Each of these features can
satisfy the navigation system's objectives to some degree.
The visual display provides high quality service for objec-
tive (ii) with a map and text, can adequately satisfy objec-
tive (iii) by marking the destination on the map, but only
minimally satisfies objective (i) because turns may be diffi-
cult to see on the map. The voice directions provide high
quality service for objective (i), and can adequately satisfy
objectives (ii) and (iii) with periodic update messages, al-
though the audio cannot provide visual location informa-
tion. The ability to blink the turn signals for an upcoming
turn may minimally satisfy objective (i), can somewhat sat-
isfy objective (ii) by blinking the signals faster the closer
the car is to the next turn, but cannot readily satisfy objec-
tive (iii).
The features defined in the navigation system demon-
strate alternative functionality. Alternative functionality
can exploit the system's available features to provide some
system redundancy when failures occur without additional
redundant components. The display, audio, and turn signal
features are not equivalent and are not designed to provide
redundancy, but they satisfy overlapping system objectives.
The components that implement each of the three system
features satisfy separate functional requirements and com-
bine to provide high quality service for all of the system's
objectives. However, the failure of components that imple-
ment one feature can be partially compensated by the re-
maining available features, despite the fact that they were
not originally designed to serve as redundant backups. The
complete system should provide all three features, but the
failure of one or two does not necessarily mean the system
can no longer satisfy its primary objective. Clearly the sys-
tem is in a degraded mode when one or two of the three fea-
tures has failed, but such a mode is better than shutting the
system down, because the system's primary objective can
still be minimally satisfied.
Alternative functionality identifies sets of functions in
the system that can satisfy the same objectives, possibly
with different levels of service, rather than allocating sets of
redundant components that provide identical functionality.
When the system loses a function that satisfied a primary
objective due to a component or subsystem failure, a func-
tion that was originally installed to fulfill a different pri-
mary or an auxiliary objective may be substituted if it can
also satisfy that primary objective, perhaps at a lower level
of service. This may result in a reduction of service for the
substitute function's original main objective, but this is of-
ten preferable to a system failure.
Our view is that alternative functionality is a generaliza-
tion of redundancy mechanisms. Traditional brute force re-
dundancy, where identical components are duplicated, are
simply identical functional alternatives. Analytic or algo-
rithmic redundancy, where multiple algorithms provide
similar functionality, are functional alternatives that have
the same functionality with different implementations. In
general, functional alternatives may be subsystems or com-
ponents designed to provide distinct system features, but
can also be used to compensate for other subsystem or com-
ponent failures when they occur.
We present an initial technique for evaluating a system
architecture to identify where functional alternatives, and
other redundancy mechanisms, may be applied. We take a
bottom-up approach that evaluates the functions imple-
mented in the architecture to identify functional alterna-
tives. We present techniques for evaluating how functional
alternatives affect the utility of a system, identifying com-
ponent or subsystem “dependability bottlenecks” that can
benefit from alternative functionality, and validating that
the implementation of functional alternatives will satisfy
system objectives as predicted by the analysis. We demon-
strate the applicability of our approach with a case study of
an elevator control system design.
This paper is organized as follows. Section 2 identifies
related work. Section 3 describes the system model we
have developed as a basis for our analysis. Section 4 de-
scribes our techniques for analyzing and applying alterna-
tive functionality in a system architecture. Section 5 gives
the results of our elevator control system case study. Fi-
nally, Section 6 concludes the paper.
2. Related work
Our work on alternative functionality is closely related
to survivability, performability and graceful degradation.
Survivability [5, 6] is a property of dependability that has
been proposed to define explicitly how systems degrade
functionality in the presence of failures. Researchers in
survivability have taken a top-down approach that focuses
on specifying all necessary degraded operating modes up
front and designing the system to provide those modes in
the corresponding failure scenarios. Thus, a survivability
specification may provide multiple sets of functional re-
quirements that each satisfy a different subset of system ob-
jectives. Each set of requirements must minimally fulfill all
primary objectives, but differs in which auxiliary objec-
tives it supports, and at what level. Each degraded operat-
ing mode maps to a different set of functional requirements
and can satisfy a different set of objectives. If the system
must tolerate a large number of failure modes, the surviv-
ability specification will become increasingly complex, es-
pecially if all combinations of failure modes must be
considered. Current survivability research has focused on
large-scale information systems rather than embedded sys-
tems, and thus far does not address scalability issues.
Performability [7, 8] combines system performance and
reliability measures into a single metric. Performability
models have focused mainly on hardware performance and
failures rather than software, and have typically not consid-
ered changes in system functionality. Performability tech-
niques have traditionally focused on trading performance
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
If the system cannot include redundant
for reliability.
backup components that provide full functionality for criti-
cal subsystems, redundant components that consume fewer
resources but satisfy a subset of requirements are designed
into the system.
In contrast, alternative functionality fo-
cuses on tolerating failures not with a redundant backup,
but by relying on another component or subsystem that pro-
vides an alternative function. The system is in a degraded
operating mode, but the degradation is a change in func-
tionality rather than a loss of performance.
Researchers in dependable distributed systems define
graceful degradation as a combination of performability
and real-time quality of service [9, 13, 19]. Real-time qual-
ity of service specifications define levels of performance
that the system can maintain given available system re-
sources. As resources are lost, system performance will de-
grade and some system services may be stopped to provide
resources for other services that are mission-critical. How-
ever, this view of graceful degradation primarily deals with
system hardware resources such as network bandwidth or
processor utilization, and focuses on the effects of timing
faults and resource overload faults. Our main focus is on
how changes in system functionality can compensate for
component and subsystem failures.
3. System model
Our system model is not the primary focus of this paper
and is described briefly here. More information on the de-
tails of our model is available in [15] and [16]. The model
is based on the system's software architecture. Since we fo-
cus on real-time distributed embedded systems, we make
several assumptions about the system’s organization and
fault model. Such systems are often composed of autono-
mous periodic tasks (e.g. reading a sensor value, updating a
controller output) that only communicate via state variables
(e.g. sensor data values, control system parameters, actua-
tor command values). Examples of such systems include
automotive and avionics control systems. Therefore our
model of communication among software components is
based on data flow rather than control flow, and assumes a
fault-tolerant, broadcast network. Components in the sys-
tem can be sensors, actuators, or software components.
Functional alternatives may be represented by multiple sets
of software components or subsystems.
Our system fault model uses the traditional assumption
that individual components will be fail-fast and fail-silent,
which is best practice for distributed embedded systems.
All faults in our model thus manifest themselves as the loss
of outputs from failed components. The loss of a failed
component’s outputs enables the other components in the
system to detect the component’s failure, and prevents an
error from propagating through the rest of the system. Soft-
ware components either provide their outputs to the system
or do not. Hardware component failures cause the loss of
all software components hosted on that node. Network fail-
ures can be modeled as a loss of inputs and outputs between
distributed components.
Our system model for specifying functional alternatives
is based on identifying the relative utility of all possible
valid system component configurations. Overall system
utility may be a combination of functionality, performance,
and dependability properties, based on the system's primary
and auxiliary objectives. For a system that is a set of N soft-
ware components, sensors, and actuators, the total possible
system configurations are represented by the system’s
power set. Thus, there are 2N possible system configura-
tions.
If we were to specify the relative utility values of
each of these 2N configurations, then we could evaluate the
effect of redundancy and functional alternatives on system
utility based on the utility differences among different soft-
ware configurations.
The effort required to specify the system utility function
grows exponentially with the number of components in the
system, and is clearly infeasible for more than a handful of
components. Typical distributed embedded systems may
contain hundreds or thousands of software components,
sensors, and actuators. However, our model enables com-
plete definition of the system utility function without hav-
ing to evaluate the relative utility of all 2N possible
configurations. Our model splits the system into orthogo-
nal software and hardware views so that we can specify the
utility of all software configurations without considering
the hardware system, but still see the effects of hardware re-
dundancy on the system's functional alternatives.
We focus our analysis on the software view of the model
because this view identifies all possible software configu-
rations, the system utility function, and the sets of func-
tional alternatives in the system. In the software view, the
software architecture is a data flow graph that shows the de-
pendencies and communication links among software com-
ponents.
In this graph, vertices represent software
components, sensors, and actuators, and edges represent
system variables. System variables are an abstraction of the
input and output interfaces of the system's software compo-
nents. Feature subsets represent logical subsystems of
components that output sets of system variables. Feature
subsets are not necessarily disjoint and can share compo-
nents across multiple subsets. Feature subset definitions
enable the system model's scalable analysis because they
encapsulate subsets of components to reduce the complex-
ity of the system utility function. Feature subsets may also
represent functional alternatives.
We have applied this model to several distributed em-
bedded system software architectures, including the eleva-
tor case study described in this paper, a robot that performs
autonomous navigation, and an example automotive navi-
gation system described in [10]. Each of these systems had
at least 40 components, which means there were at least 240
= 1.1 * 1012 possible system configurations to be consid-
ered for the system utility function. Using our system
model, we were able to completely specify the system util-
ity function by evaluating a total of fewer than 450 feature
subset configurations in each system. This was possible
with two key insights gained from our model. The first in-