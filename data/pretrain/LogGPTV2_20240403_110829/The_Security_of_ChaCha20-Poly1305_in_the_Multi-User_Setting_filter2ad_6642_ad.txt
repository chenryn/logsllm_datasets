· 2𝑛−𝑘,
6.1 Proof Overview
The proof of Theorem 6.1 is based on the H-coefficient technique
(Theorem 2.2) which we apply to the augmented games described in
Figures 4 and 5. These games modify the multi-user AEAD games
shown in Figure 1 to give the adversary more information, thereby
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1986capturing an even stronger notion of security, but which neverthe-
less facilitates our proof. Specifically, the adversary is given access
to an additional oracle Reveal, that it must query exactly once
as its last query, right before returning its output—which in turn
triggers the Finalize procedure.
In the real world, the Reveal oracle returns the outputs 𝑉𝑗
corresponding to all the internal calls made by the encryption or-
acle to the ChaCha20 block function and all the user keys 𝐾𝑖. In
the ideal world, on the other hand, the Reveal oracle returns
randomly distributed strings 𝑉𝑗 and keys 𝐾𝑖. Note that through
{𝑉𝑗} and {𝐾𝑖}, the adversary implicitly also learns the direct out-
puts of the ideal permutation in the real world, as it can easily
reconstruct them. Since the augmented games are strictly stronger
than the original ones, we can bound any adversary’s multi-user
advantage by bounding its distinguishing advantage with respect
to the augmented games.
In the rest of this section we gradually set up all the components
needed to apply the H-coefficient technique. We start in Section 6.2
by specifying the format of transcripts with respect to the aug-
mented games. In Section 6.3 we define six sets of bad transcripts.
In Section 6.4 we bound the H-coefficient over good transcripts,
and in Section 6.5 we bound the probability of each individual set
of bad transcripts. Then plugging the two bounds into Theorem 2.2
yields the desired result.
Finally we note that the bound we obtain here is actually strong-
er than the simplified version we presented in Theorem 6.1 for
better exposition. In particular, the third and fourth terms in the
bound in Theorem 6.1 are more accurately given by
2𝑝 · (𝑛 − 𝑘) 𝜎𝑒
2𝑘
+ 2𝑞𝑣 · ((𝑛 − 𝑘) 𝑝 + 2𝑡 𝑝 + 2𝑡 𝑑)
(cid:109) and 𝑖
(cid:108)
2𝑘
,
with the shorthand notation 𝑖 𝑞
= 0,
for any 𝑖, 𝑞 ∈ N. Note that always 𝑖 𝑞 ≤ 𝑖, yielding the terms in
Theorem 6.1.
max(1,𝑖−log2(2𝑞))
=
𝑖
0
6.2 Transcripts and Multi-Sets
In the H-coefficient technique, we only need to consider attainable
transcripts, i.e., ones that have a probability strictly greater than 0
of occuring in the ideal world. Note that here we define transcripts
slightly differently, as we include additional information beyond
the input-output pairs corresponding to the adversary’s queries.
We define them this way to facilitate the classification of good and
bad transcripts and other aspects in the proof.
Transcripts. A transcript 𝜏 of an adversary interacting with an aug-
mented game consists of the following entries:
• Revealed key entries: (key, 𝑖, 𝐾𝑖).
Keys are returned as part of the output to the Reveal query. In
the real world, these entries correspond to the actual user keys,
whereas in the ideal world they correspond to values sampled
independently of the rest of the transcript. In the real augmented
game these are generated during initialization, whereas in the
ideal augmented game they are not sampled until Reveal is
queried.
• Ideal permutation entries: (prim, 𝑥, 𝑦,+) and (prim, 𝑥, 𝑦,−).
An entry (prim, 𝑥, 𝑦,+) corresponds to a query Prim(𝑥) to the
ideal permutation oracle with answer 𝑦, and an entry (prim, 𝑥, 𝑦,
−) corresponds to a query Prim−1(𝑦) to the inverse of the ideal
permutation oracle with answer 𝑥.
• Encryption entries: (enc, 𝑖, 𝑁 , 𝐴𝐷, 𝑀, 𝐶∥𝑇 , 𝑉 (𝑞)).
These entries contain the values specified in each encryption
query Enc(𝑖, 𝑁 , 𝐴𝐷, 𝑀) together with the corresponding re-
sponse 𝐶∥𝑇 . They additionally include the associated list 𝑉 (𝑞) of
internal ChaCha20 block function calls made by the encryption
algorithm in that encryption query. In particular, the 𝑉 (𝑞) values
contain the key material used in Poly1305_Mac. Note, however,
that while in the transcript, for convenience, we include 𝑉 (𝑞)
in the encryption entries they are not actually returned to the
adversary by the encryption oracle. In the augmented games
these values are only revealed to the adversary at the end in the
Reveal query. In the ideal world, 𝑉 (𝑞) is instead generated at
random, as described in Figure 5, so that all good transcripts
(defined below) have a probability strictly greater than 0 of occur-
ring in the real world. This, in turn, ensures that the H-coefficient
is not zero. Intuitively, including 𝑉 (𝑞) in the transcript allows
us to better define the set of bad transcripts for our proof and
thereby get a better H-coefficient ratio.
• Verification entries: (vf, 𝑖, 𝑁 , 𝐴𝐷, 𝐶∥𝑇 , false).
Entries of this type correspond to verification queries Vf(𝑖, 𝑁 ,
𝐴𝐷, 𝐶∥𝑇) which return false as an answer. In the H-coefficient
technique, we only need to be concerned with attainable tran-
scripts, and in the ideal world, verification queries always return
false as an answer.
Multi-Sets. The H-coefficient technique requires us to bound from
below the ratio of the real-world and ideal-world probabilities, for
any good transcript, to a value close to one. We accomplish this via
a counting argument. In addition to the probability of the user keys
being sampled, the probability of a transcript can be reduced to
counting the number of distinct ideal permutation calls and random
blocks generated (for encryption queries in the ideal world). If
their sum is close in either world, we obtain a good H-coefficient
ratio that is close to one. To facilitate our counting argument we
introduce the following three multi-sets (sets where elements can
repeat) and calculate their cardinality:
𝑆1(𝜏) = {(𝑥, 𝑦) | (prim, 𝑥, 𝑦, ·) ∈ 𝜏}.
This set contains the input-output pairs, associated with the ideal
permutation 𝜋, called during the ideal permutation queries Prim
or Prim−1.
𝑆2(𝜏) = {(𝑍∥𝐾𝑖∥0∥𝑁 , 𝑉0 (32)− (𝑍∥𝐾𝑖∥0∥𝑁)), . . . ,
(32)− (𝑍∥𝐾𝑖∥ℓ∥𝑁)) |
(𝑍∥𝐾𝑖∥ℓ∥𝑁 , 𝑉ℓ
(enc, 𝑖, 𝑁 , 𝐴𝐷, 𝑀, 𝐶∥𝑇 , 𝑉0∥ · · · ∥𝑉ℓ) ∈ 𝜏}.
This set contains the input-output pairs, associated to the ideal
world with the random blocks generated and in the real world with
the ideal permutation 𝜋, that was called during the encryption
queries Enc.
𝑆3(𝜏) = {(𝑍∥𝐾𝑖∥0∥𝑁) | ((vf, 𝑖, 𝑁 , 𝐴𝐷, 𝐶∥𝑇 , false) ∈ 𝜏)
∧ ((𝑍∥𝐾𝑖∥0∥𝑁 , ·) ∉ 𝑆1(𝜏) ∪ 𝑆2(𝜏))}.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1987Game 𝐺
augReal-muAE
𝛱 [𝜋]
augIdeal-muAE
𝛱 [𝜋]
Game 𝐺
procedure Initialize
1 : 𝑞𝑒 ← 0
procedure Enc(𝑖, 𝑁 , 𝐴𝐷, 𝑀)
1 : 𝐶 ∥𝑇 ←$ {0, 1}|𝑀|+𝑡
2 : 𝑞𝑒 ← 𝑞𝑒 + 1
3 : 𝑉 [𝑞𝑒 ] ← (𝑖, 𝑁 , 𝐴𝐷, 𝑀, 𝐶,𝑇)
4 :
procedure Vf(𝑖, 𝑁 , 𝐴𝐷, 𝐶)
1 :
return 𝐶 ∥𝑇
return false
return 𝐶 ∥𝑇
procedure Initialize
1 : 𝐾1, 𝐾2, · · · ←$ {0, 1}𝑘, 𝑞𝑒 ← 0
procedure Enc(𝑖, 𝑁 , 𝐴𝐷, 𝑀)
1 : 𝐶 ∥𝑇 ← E(𝐾𝑖, 𝑁 , 𝐴𝐷, 𝑀)
2 : 𝑞𝑒 ← 𝑞𝑒 + 1
3 : 𝑉 [𝑞𝑒 ] ← (𝑖, 𝑁 , 𝐴𝐷, 𝑀, 𝐶,𝑇)
4 :
procedure Vf(𝑖, 𝑁 , 𝐴𝐷, 𝐶)
1 : 𝑀 ← D(𝐾𝑖, 𝑁 , 𝐴𝐷, 𝐶)
return (𝑀 ≠ ⊥)
2 :
procedure Prim(𝑋)
1 :
procedure Prim−1(𝑌)
1 :
procedure Reveal
1 :
for 𝑞 = 1 to 𝑞𝑒 do
2 :
(𝑖, 𝑁 , 𝐴𝐷, 𝑀, 𝐶,𝑇) ← 𝑉 [𝑞]
return 𝜋−1(𝑌)
return 𝜋 (𝑋)
// last query before Finalize
// last query before Finalize
(𝑖, 𝑁 , 𝐴𝐷, 𝑀, 𝐶,𝑇) ← 𝑉 [𝑞]
𝑟 ←$ {0, 1}𝑡 ,𝑊 ←$ {0, 1}𝑛−2𝑡
𝑉0 ← 𝑟 ∥(𝑇 (𝑡)− 𝐻𝑟 (𝐴𝐷, 𝐶)) ∥𝑊
𝑀1∥ · · · ∥𝑀ℓ ← 𝑀, 𝐶1∥ · · · ∥𝐶ℓ ← 𝐶
for 𝑗 = 1 to ℓ − 1 do
return 𝜋 (𝑋)
return 𝜋−1(𝑌)
procedure Prim(𝑋)
1 :
procedure Prim−1(𝑌)
1 :
procedure Reveal
1 :
for 𝑞 = 1 to 𝑞𝑒 do
2 :
3 :
4 :
5 :
6 :
7 :
𝑊 ′ ←$ {0, 1}𝑛−|𝑀ℓ |
8 :
𝑉ℓ ← (𝑀ℓ ⊕ 𝐶ℓ) ∥𝑊 ′
9 :
𝑉 (𝑞) ← 𝑉0∥ · · · ∥𝑉ℓ
10 :
11 : 𝐾1, 𝐾2, · · · ←$ {0, 1}𝑘
12 :
procedure Finalize(𝑏)
1 :
𝑉𝑗 ← 𝑀𝑗 ⊕ 𝐶 𝑗
return 𝑏
return 𝑉 (1) , . . . , 𝑉 (𝑞𝑒 ) , 𝐾1, 𝐾2, . . .
3 :
4 :
5 :
6 :
𝑀1∥ · · · ∥𝑀ℓ ← 𝑀
for 𝑗 = 0 to ℓ do
𝑉𝑗 ← 𝜋 (𝑍 ∥𝐾𝑖 ∥ 𝑗 ∥𝑁) (32)+ (𝑍 ∥𝐾𝑖 ∥ 𝑗 ∥𝑁)
𝑉 (𝑞) ← 𝑉0∥ · · · ∥𝑉ℓ
return 𝑉 (1) , . . . , 𝑉 (𝑞𝑒 ) , 𝐾1, 𝐾2, . . .
7 :
procedure Finalize(𝑏)
1 :
return 𝑏
Figure 4: Real Augmented Game.
Figure 5: Ideal Augmented Game.
This set contains the inputs to the ideal permutation 𝜋 called during
verification queries Vf in the real world, if they are not also called
(or obtained) during a primitive or encryption query.
6.3 Bad Transcripts
Our overarching methodology for defining bad transcripts (i.e., the
set 𝑇bad) is to rule out transcripts that: 1) have a different multi-set
cardinality in the real world compared to the ideal world or 2) have
zero probability of occurring in the real world. This way we ensure
that the H-coefficient is close to one. Towards the former, we will
ensure that each entry in the first two multi-sets corresponds to a
unique and independent call to the ideal permutation 𝜋, or a unique
and independently generated random block. In the second case,
even if the transcripts do not result in repeated multi-set entries
they may still be impossible in the real world. Thus a transcript is
in 𝑇bad if it satisfies one of the following:
Case 1 (𝑥1, 𝑦1) ∈ 𝑆1(𝜏) and (𝑥2, 𝑦2) ∈ 𝑆2(𝜏) where 𝑥1 = 𝑥2. In
this case, in the real world, two calls are made to the ideal
permutation on the same input, through one ideal permu-
tation query and one encryption query. This case also en-
compasses the case where 𝑥1 = 𝑥2 and 𝑦1 ≠ 𝑦2, which is
impossible in the real world. From this case, we can define
the following simplified bad transcript description (which
is the only possibility of this case happening):
Bad1: There are two entries (prim, 𝑥, 𝑦, ·) and (enc, 𝑖, 𝑁 ,
𝐴𝐷, 𝑀, 𝐶∥𝑇 , 𝑉0∥ · · · ∥𝑉ℓ) such that 𝑥 ∈ {𝑍∥𝐾∥0∥𝑁 , . . . ,
𝑍∥𝐾∥ℓ∥𝑁} and 𝐾𝑖 = 𝐾.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1988Case 2 (𝑥1, 𝑦1) ∈ 𝑆1(𝜏) and (𝑥2, 𝑦2) ∈ 𝑆2(𝜏) where 𝑦1 = 𝑦2. In
this case, in the real world, two calls with the same output
are made to the ideal permutation, through one ideal per-
mutation query and one encryption query. This case also