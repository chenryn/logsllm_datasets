### 6.1 Proof Overview

The proof of Theorem 6.1 relies on the H-coefficient technique (Theorem 2.2), which we apply to the augmented games described in Figures 4 and 5. These games are modifications of the multi-user AEAD games shown in Figure 1, designed to provide the adversary with more information. This enhancement captures a stronger notion of security while simplifying the proof. Specifically, the adversary is granted access to an additional oracle, Reveal, which must be queried exactly once as the final query before the adversary returns its output, triggering the Finalize procedure.

In the real world, the Reveal oracle provides the outputs \( V_j \) corresponding to all internal calls made by the encryption oracle to the ChaCha20 block function and all user keys \( K_i \). In the ideal world, the Reveal oracle returns randomly distributed strings \( V_j \) and keys \( K_i \). Through \( \{V_j\} \) and \( \{K_i\} \), the adversary implicitly learns the direct outputs of the ideal permutation in the real world, as these can be easily reconstructed. Since the augmented games are strictly stronger than the original ones, bounding the adversary's distinguishing advantage in the augmented games also bounds their multi-user advantage.

In the remainder of this section, we will set up the components required to apply the H-coefficient technique. We start in Section 6.2 by specifying the format of transcripts for the augmented games. In Section 6.3, we define six sets of bad transcripts. In Section 6.4, we bound the H-coefficient over good transcripts, and in Section 6.5, we bound the probability of each individual set of bad transcripts. Plugging these two bounds into Theorem 2.2 yields the desired result.

It is worth noting that the bound we obtain here is actually stronger than the simplified version presented in Theorem 6.1 for better exposition. Specifically, the third and fourth terms in the bound in Theorem 6.1 are more accurately given by:
\[ 2p \cdot (n - k) \sigma_e^{2k} + 2q_v \cdot ((n - k)p + 2t_p + 2t_d) \]
with the shorthand notation \( i_q = \max(1, i - \log_2(2q)) \) for any \( i, q \in \mathbb{N} \). Note that \( i_q \leq i \), yielding the terms in Theorem 6.1.

### 6.2 Transcripts and Multi-Sets

In the H-coefficient technique, we only need to consider attainable transcripts, i.e., those that have a non-zero probability of occurring in the ideal world. Here, we define transcripts to include additional information beyond the input-output pairs corresponding to the adversaryâ€™s queries, to facilitate the classification of good and bad transcripts and other aspects of the proof.

**Transcripts:**
A transcript \( \tau \) of an adversary interacting with an augmented game consists of the following entries:

- **Revealed key entries:** \((\text{key}, i, K_i)\)
  - Keys returned as part of the output to the Reveal query. In the real world, these correspond to actual user keys, while in the ideal world, they are values sampled independently of the rest of the transcript.
  - In the real augmented game, these are generated during initialization, whereas in the ideal augmented game, they are not sampled until the Reveal query is made.

- **Ideal permutation entries:** \((\text{prim}, x, y, +)\) and \((\text{prim}, x, y, -)\)
  - An entry \((\text{prim}, x, y, +)\) corresponds to a query \( \text{Prim}(x) \) to the ideal permutation oracle with answer \( y \).
  - An entry \((\text{prim}, x, y, -)\) corresponds to a query \( \text{Prim}^{-1}(y) \) to the inverse of the ideal permutation oracle with answer \( x \).

- **Encryption entries:** \((\text{enc}, i, N, AD, M, C \| T, V(q))\)
  - These entries contain the values specified in each encryption query \( \text{Enc}(i, N, AD, M) \) together with the corresponding response \( C \| T \).
  - They additionally include the associated list \( V(q) \) of internal ChaCha20 block function calls made by the encryption algorithm in that encryption query. In particular, the \( V(q) \) values contain the key material used in Poly1305_Mac.
  - While \( V(q) \) is included in the transcript for convenience, it is not actually returned to the adversary by the encryption oracle. In the augmented games, these values are only revealed to the adversary at the end in the Reveal query.
  - In the ideal world, \( V(q) \) is generated at random, ensuring that all good transcripts (defined below) have a non-zero probability of occurring in the real world, which in turn ensures that the H-coefficient is not zero.

- **Verification entries:** \((\text{vf}, i, N, AD, C \| T, \text{false})\)
  - Entries of this type correspond to verification queries \( \text{Vf}(i, N, AD, C \| T) \) which return false as an answer. In the H-coefficient technique, we only need to be concerned with attainable transcripts, and in the ideal world, verification queries always return false.

**Multi-Sets:**
The H-coefficient technique requires us to bound from below the ratio of the real-world and ideal-world probabilities for any good transcript, close to one. We achieve this via a counting argument. In addition to the probability of the user keys being sampled, the probability of a transcript can be reduced to counting the number of distinct ideal permutation calls and random blocks generated (for encryption queries in the ideal world). If their sum is similar in both worlds, we obtain a good H-coefficient ratio close to one. To facilitate our counting argument, we introduce the following three multi-sets (sets where elements can repeat) and calculate their cardinality:

- \( S1(\tau) = \{(x, y) \mid (\text{prim}, x, y, \cdot) \in \tau\} \)
  - This set contains the input-output pairs associated with the ideal permutation \( \pi \) called during the ideal permutation queries Prim or Prim\(^{-1}\).

- \( S2(\tau) = \{(Z \| K_i \| 0 \| N, V_0^{(32)} - (Z \| K_i \| 0 \| N)), \ldots, (Z \| K_i \| \ell \| N, V_\ell^{(32)} - (Z \| K_i \| \ell \| N)) \mid (\text{enc}, i, N, AD, M, C \| T, V_0 \| \cdots \| V_\ell) \in \tau\} \)
  - This set contains the input-output pairs associated with the ideal world with the random blocks generated and in the real world with the ideal permutation \( \pi \) called during the encryption queries Enc.

- \( S3(\tau) = \{(Z \| K_i \| 0 \| N) \mid ((\text{vf}, i, N, AD, C \| T, \text{false}) \in \tau) \land ((Z \| K_i \| 0 \| N, \cdot) \notin S1(\tau) \cup S2(\tau))\} \)
  - This set contains the inputs to the ideal permutation \( \pi \) called during verification queries Vf in the real world, if they are not also called (or obtained) during a primitive or encryption query.

### 6.3 Bad Transcripts

Our methodology for defining bad transcripts (i.e., the set \( T_{\text{bad}} \)) is to rule out transcripts that: 1) have a different multi-set cardinality in the real world compared to the ideal world, or 2) have zero probability of occurring in the real world. This ensures that the H-coefficient is close to one. 

Towards the former, we ensure that each entry in the first two multi-sets corresponds to a unique and independent call to the ideal permutation \( \pi \), or a unique and independently generated random block. In the second case, even if the transcripts do not result in repeated multi-set entries, they may still be impossible in the real world. Thus, a transcript is in \( T_{\text{bad}} \) if it satisfies one of the following:

- **Case 1:** \((x_1, y_1) \in S1(\tau)\) and \((x_2, y_2) \in S2(\tau)\) where \( x_1 = x_2 \).
  - In this case, in the real world, two calls are made to the ideal permutation on the same input, through one ideal permutation query and one encryption query. This case also encompasses the scenario where \( x_1 = x_2 \) and \( y_1 \neq y_2 \), which is impossible in the real world.
  - From this case, we can define the following simplified bad transcript description:
    - **Bad1:** There are two entries \((\text{prim}, x, y, \cdot)\) and \((\text{enc}, i, N, AD, M, C \| T, V_0 \| \cdots \| V_\ell)\) such that \( x \in \{Z \| K \| 0 \| N, \ldots, Z \| K \| \ell \| N\} \) and \( K_i = K \).

- **Case 2:** \((x_1, y_1) \in S1(\tau)\) and \((x_2, y_2) \in S2(\tau)\) where \( y_1 = y_2 \).
  - In this case, in the real world, two calls with the same output are made to the ideal permutation, through one ideal permutation query and one encryption query.