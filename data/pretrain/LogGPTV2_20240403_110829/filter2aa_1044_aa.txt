**Page 1 of 37**
**Whitepaper: Bypassing Port Security in 2018 â€“ Defeating MACsec and 802.1x-2010**
**DEF CON 26 Pre-Release Version**
**Gabriel Ryan (@s0lst1c3)**
**August 2018**
**Last Modified: 7/20/18 6:44:00 AM**

**Page 2 of 37**
**Disclaimer and Updates**
This whitepaper is an early version designed for pre-release prior to DEF CON 26. All content will be updated by the time of the presentation at DEF CON 26 in August 2018. Final versions of all content will be available at:
- [https://digitalsilence.com/blog/](https://digitalsilence.com/blog/)

**Page 3 of 37**
**Author Contact Information**
- **Author:** Gabriel Ryan, Co-Founder / Senior Security Assessment Manager, Digital Silence
- **Email:** [PI:EMAIL]
- **Twitter:** [@s0lst1c3](https://twitter.com/s0lst1c3)
- **LinkedIn:** [linkedin.com/in/ms08067/](https://www.linkedin.com/in/ms08067/)
- **GitHub:** [github.com/s0lst1c3](https://github.com/s0lst1c3)
- **Phone:** +1-410-920-8101
- **SendSafely Secure Link:** [https://digitalsilence.sendsafely.com/u/gabriel](https://digitalsilence.sendsafely.com/u/gabriel)
- **Public Key Fingerprint:** 5017 5C8B C1A7 31A0 80E4 9110 17C2 6CC7 BA33 3B45

**Page 4 of 37**
**Abstract**
Existing techniques for bypassing wired port security are primarily focused on attacking 802.1x-2004, which lacks encryption and packet-by-packet authentication [3][4][6]. The introduction of 802.1x-2010 addresses these vulnerabilities by incorporating MACsec, providing Layer 2 encryption and packet integrity checks [7]. MACsec encrypts data hop-by-hop, effectively mitigating hub, bridge, and injection-based attacks pioneered by Steve Riley, Abb, and Alva Duckwall [7][8].

Additionally, enhanced 802.1x support in peripheral devices, such as printers, has made it more challenging for attackers to bypass 802.1x by simply spoofing a MAC address. In this paper, we introduce two new attacks: the Rogue Gateway and Bait n Switch, which can bypass 802.1x-2010 and MACsec when weak EAP methods are used. We also present the EAP-MD5 Forced Reauthentication attack, which exploits a weakness in the EAP initiation process.

We discuss how improved 802.1x support in peripheral devices does not necessarily enhance port security due to the widespread use of weak EAP methods. Furthermore, we explore how recent improvements to the Linux kernel facilitate the implementation of bridge-based techniques and provide an alternative to packet injection and manipulation for network interaction.

These techniques and improvements are packaged into an open-source tool called `silentbridge`, which we plan to release alongside this paper.

**Page 5 of 37**
**Table of Contents**
- Disclaimer and Updates .......................................................................................................................................... 2
- Author Contact Information ................................................................................................................................... 3
- Abstract ................................................................................................................................................................. 4
- Table of Contents ................................................................................................................................................... 5
- I. Introduction ........................................................................................................................................................ 7
- II. Background and Prior Work ................................................................................................................................ 7
  - II.1 MAC Filtering and MAC Authorization Bypass (MAB) ..................................................................................... 7
  - II.2 The Current State of Wired Port Security ...................................................................................................... 7
  - II.3 802.1x Overview ........................................................................................................................................... 8
  - II.4 Notable EAP Methods ................................................................................................................................... 9
    - II.4.A EAP-MD5 ............................................................................................................................................... 9
    - II.4.B EAP-PEAP / EAP-TTLS ........................................................................................................................... 11
    - II.4.C EAP-TLS ................................................................................................................................................ 13
- III. Research Environment and Architecture .......................................................................................................... 13
  - III.1 Simulated Network Environment ............................................................................................................... 13
  - III.2 Rogue Device A: Pure Bridge-based Design ................................................................................................ 15
  - III.3 Rogue Device B: Mechanically Assisted Bypass ........................................................................................... 16
  - III.4 Establishing a Side Channel ........................................................................................................................ 17
  - III.5 Putting It All Together ................................................................................................................................ 18
- IV. Improvements to Classical Bridge-based 802.1x Bypass ................................................................................... 20
- V. Bait n Switch Attack: An Alternative To Packet Injection .................................................................................. 23
  - V.1 Bridge-Based Approach .............................................................................................................................. 23
  - V.2 Using Mechanical A/B Splitters ................................................................................................................... 24
- VI. Defeating MACsec Using Rogue Gateway Attacks ............................................................................................ 25
  - VI.1 Defeating MACsec Using Rogue Gateway Attacks....................................................................................... 28
- VII. Dealing with Improvements to Peripheral Device Security .............................................................................. 30
  - VII.1 EAP-MD5 Forced Reauthentication Attack ................................................................................................ 30
    - VII.1.A Passive Attack Against EAP-MD5 ........................................................................................................ 30
    - VII.1.B EAP-MD5 Forced Reauthentication Attack.......................................................................................... 31
    - VII.1.C Proposed Mitigation to EAP Forced Reauthentication Attacks ............................................................ 31
  - VII.2 Leveraging Rogue Gateway Attacks Against Peripheral Devices ................................................................. 32
    - VII.2.A Rogue Gateway Attack Against 802.1x-2004 and EAP-PEAP/EAP-TTLS ................................................ 32
- VIII. Proof of Concept and Source Code Release .................................................................................................... 34
- Conclusion ........................................................................................................................................................... 35
- Acknowledgements .............................................................................................................................................. 36
- References ........................................................................................................................................................... 37

**Page 7 of 37**
**I. Introduction**
In this paper, we provide a brief history of attacks against the 802.1x protocol and describe how the 802.1x and EAP protocols work. We also highlight some of the most commonly used EAP methods, discussing their security issues. We address the historical use of port security exceptions as an attack vector and note that improved 802.1x support in peripheral devices is changing this. Finally, we discuss our improvements to the bridge-based 802.1x bypass technique introduced by Alva Duckwall [4], along with three new attacks that can be used against 802.1x-2004 and 802.1x-2010 when weak EAP methods are employed.

**II. Background and Prior Work**
The original 802.1x standard, created in 2001, was designed to provide a basic authentication mechanism for devices connecting to a local area network (LAN) [1]. In 2004, an extension of 802.1x, named 802.1x-2004, was released to facilitate its use on wireless networks [2].

In 2005, researcher Steve Riley discovered that 802.1x-2004 could be bypassed by inserting a hub between an authorized device and a switch [3]. This allowed an attacker to attach a rogue device to the hub and sniff packets or inject UDP traffic onto the network. Injecting TCP traffic was not feasible due to a race condition that resulted in dropped packets and potential detection [4].

In 2011, a researcher named "Abb" published a tool called Marvin, which could bypass 802.1x by introducing a rogue device configured as a bridge directly between an authorized device and the switch [5]. This allowed an attacker to eavesdrop on network traffic without using a hub. Later that year, Alva Duckwall improved upon Abb's attack by using source NATing to achieve full network interaction without relying on packet injection [4]. In 2017, ValÃ©rian Legrand released a similar tool with a modular design written in Python [6].

**II.1 MAC Filtering and MAC Authorization Bypass (MAB)**
When enterprise organizations using 802.1x need to deploy a device that does not support the protocol, they must either permanently or temporarily disable 802.1x on the port used by the device. Disabling 802.1x and replacing it with a weaker form of access control, such as MAC filtering, introduces a "port-security policy exception."

Historically, these policy exceptions were common due to the lack of 802.1x support in peripheral devices like multifunction printers and IP cameras. Consequently, attackers often targeted these policy exceptions when attempting to bypass port security, as the bridge-based techniques described in Sections II and IV required more effort. To bypass MAC filtering, the attacker would locate a device that did not use 802.1x, spoof its MAC address, and connect to the deviceâ€™s switch port.

**II.2 The Current State of Wired Port Security**
Major enterprise networking hardware manufacturers now offer switches that support 802.1x-2010. This new version of the 802.1x protocol uses MACsec to implement hop-by-hop Layer 2 encryption and packet-by-packet integrity checks. These additional security features defeat the bridge-based attacks described in Sections II and IV [7]. However, adoption rates for 802.1x remain relatively low, and even lower for 802.1x-2010. Nonetheless, attackers should expect increased 802.1x-2010 adoption in the near future, necessitating the development of new methods to cope with it.

In addition to the development of 802.1x-2010 and MACsec, improvements in peripheral device security have reduced the effectiveness of bypassing wired port security by targeting policy exceptions. Most printer manufacturers now offer affordable models that support 802.1x. As enterprises phase out legacy hardware, the deployment of 802.1x-capable peripheral devices increases, reducing the frequency of port security exceptions and making them less attractive targets for attackers.

In the remainder of this paper, we demonstrate our efforts to address both the introduction of MACsec and the increased 802.1x support in peripheral devices. We begin by introducing improvements to Duckwallâ€™s bridge-based attacks against 802.1x-2004. We then present techniques to bypass 802.1x-2010 when implemented with weak EAP methods. Finally, we discuss strategies and techniques to compensate for the improvements in peripheral devices.

**II.3 802.1x Overview**
The 802.1x protocol is an authentication framework used to allow or deny access to devices wishing to connect to a local area network (LAN), whether wired or wireless [1][2][9]. The protocol defines an exchange between the following three parties:

- **Supplicant:** The client device wishing to connect to the LAN [1][2][9].
- **Authenticator:** A network device, such as a switch, providing access to the LAN [1][2][9].
- **Authentication Server:** A host running software implementing RADIUS or another Authorization, Authentication, and Accounting (AAA) protocol. The authentication server is usually a standalone system but can be integrated into the authenticator [1][2][9].

**Figure 1 â€“ The EAP authentication process is encapsulated by EAPOL between the supplicant and authenticator, and by RADIUS between the authenticator and authentication server.**

The authenticator acts as a gatekeeper, guarding access to the LAN. When the supplicant connects to a switch port, it must provide the authenticator with a set of credentials [1][2][9]. The authenticator forwards these credentials to the authentication server, which verifies their validity. If the credentials are valid, the authentication server instructs the authenticator to allow the supplicant to access the network. Otherwise, the supplicant is denied access [1][2][9].

The 802.1x authentication process typically follows a four-step sequence:

1. **Initialization:** The supplicant connects to a port on the switch (authenticator). At this time, the switch port is disabled. The authenticator detects the new connection, enables the port, but only allows 802.1x traffic. In this restricted state, the port is "unauthorized" [1][2][9].
2. **Initiation:** Either the supplicant or the authenticator can initiate the 802.1x authentication process. In some implementations, the authenticator periodically sends EAP-Request-Identity frames, prompting the supplicant to begin authenticating [1][2][9]. Alternatively, the authenticator can wait for the supplicant to send an EAPOL-Start frame, to which it responds with an EAP-Request-Identity frame. The supplicant replies with an EAP-Response-Identity frame containing an identifier (such as a username). The authenticator receives this frame, encapsulates it in a RADIUS Access-Request frame, and forwards it to the authentication server [1][2][9].
3. **EAP Negotiation:** The authentication server responds with an EAP-Request frame encapsulated within a RADIUS Access-Challenge. The authenticator strips the RADIUS Access-Challenge frame from this response and sends the resulting EAP-Request frame to the supplicant [1][2][9]. The EAP-Request frame specifies an EAP method that the supplicant should use to continue the authentication process. The supplicant either begins the EAP authentication process using the recommended EAP method or responds with a Negative Acknowledgement (NAK) that includes a list of acceptable methods [1][2][9].
4. **Authentication:** Once the supplicant and authentication server agree on an EAP method, the authentication process begins. The specific details of the authentication process depend on the EAP method selected [1][2][9]. Regardless of the EAP method, the process will result in an EAP-Success or EAP-Failure message. In the event of a successful authentication, the port is set to an "authorized" state, allowing normal traffic. Otherwise, the port remains in an "unauthorized" state [1][2][9].

**II.4 Notable EAP Methods**