Page 1 of 37 
Whitepaper: Bypassing Port Security In 2018 – Defeating MACsec and 802.1x-2010 
DEF CON 26 Pre-Release Version 
Gabriel Ryan (@s0lst1c3) 
August 2018 
Last Modified: 7/20/18 6:44:00 AM 
Page 2 of 37 
Disclaimer and Updates 
This whitepaper is an early version designed for pre-release prior to DEF CON 26. All content will be updated by the 
time of the presentation at DEF CON 26 in August 2018. Final versions of all content will be available at: 
§ 
https://digitalsilence.com/blog/ 
Page 3 of 37 
Author Contact Information 
Author: 
Gabriel Ryan, Co-Founder / Senior Security Assessment Manager 
Digital Silence 
Email: PI:EMAIL 
Twitter: @s0lst1c3 
LinkedIn: linkedin.com/in/ms08067/ 
Github: github.com/s0lst1c3 
Phone: +1-410-920-8101 
SendSafely Secure Link: https://digitalsilence.sendsafely.com/u/gabriel 
Public Key Fingerprint: 
5017 5C8B C1A7 31A0 80E4  9110 17C2 6CC7 BA33 3B45 
Page 4 of 37 
Abstract 
Existing techniques for bypassing wired port security are limited to attacking 802.1x-2004, which does not provide 
encryption or the ability to perform authentication on a packet-by-packet basis [3][4][6]. The development of 802.1x-
2010 mitigates these issues by using MACsec to provide Layer 2 encryption and packet integrity checks to the 
protocol [7]. Since MACsec encrypts data on a hop-by-hop basis, it successfully protects against the hub, bridge, and 
injection-based attacks pioneered by Steve Riley, Abb, and Alva Duckwall [7][8]. 
In addition to the development of 802.1x-2010, improved 802.1x support by peripheral devices such as printers also 
poses a challenge to attackers. Gone are the days in which bypassing 802.1x was as simple as finding a printer and 
spoofing a MAC address – hardware manufacturers have gotten smarter. 
In this paper, we introduce the Rogue Gateway and Bait n Switch attacks, which together can be used to bypass 
802.1x-2010 and MACsec when weak EAP methods are used. Additionally, we introduce the EAP-MD5 Forced 
Reauthentication attack exploiting a weakness in the initiation of EAP authentication. We discuss how improved 
802.1x support by peripheral devices does not necessarily translate to improved port-security due to the widespread 
use of weak EAP. Finally, we consider how improvements to the Linux kernel ease implementation of bridge-based 
techniques and demonstrate an alternative to using packet injection and manipulation for network interaction.  
We packaged each of these techniques and improvements into an open source tool called silentbridge, which we 
plan on releasing alongside this paper. 
Page 5 of 37 
Table of Contents 
Disclaimer and Updates .......................................................................................................................................... 2 
Author Contact Information ................................................................................................................................... 3 
Abstract ................................................................................................................................................................. 4 
Table of Contents ................................................................................................................................................... 5 
I. Introduction ........................................................................................................................................................ 7 
II. Background and Prior Work ................................................................................................................................ 7 
II.1 MAC Filtering and MAC Authorization Bypass (MAB) ..................................................................................... 7 
II.2 The Current State of Wired Port Security ...................................................................................................... 7 
II.3 802.1x Overview ........................................................................................................................................... 8 
II.4 Notable EAP Methods ................................................................................................................................... 9 
II.4.A EAP-MD5 ............................................................................................................................................... 9 
II.4.B EAP-PEAP / EAP-TTLS ........................................................................................................................... 11 
II.4.C EAP-TLS ................................................................................................................................................ 13 
III. Research Environment and Architecture .......................................................................................................... 13 
III.1 Simulated Network Environment ............................................................................................................... 13 
III.2 Rogue Device A: Pure Bridge-based Design ................................................................................................ 15 
III.3 Rogue Device B: Mechanically Assisted Bypass ........................................................................................... 16 
III.4 Establishing a Side Channel ........................................................................................................................ 17 
III.5 Putting It All Together ................................................................................................................................ 18 
IV. Improvements to Classical Bridge-based 802.1x Bypass ................................................................................... 20 
V. Bate n Switch Attack: An Alternative To Packet Injection .................................................................................. 23 
V.1 Bridge-Based Approach .............................................................................................................................. 23 
V.2 Using Mechanical A/B Splitters ................................................................................................................... 24 
VI. Defeating MACsec Using Rogue Gateway Attacks ............................................................................................ 25 
VI.1 Defeating MACsec Using Rogue Gateway Attacks....................................................................................... 28 
VII. Dealing with Improvements to Peripheral Device Security .............................................................................. 30 
VII.1 EAP-MD5 Forced Reauthentication Attack ................................................................................................ 30 
VII.1.A Passive Attack Against EAP-MD5 ........................................................................................................ 30 
VII.1.B EAP-MD5 Forced Reauthentication Attack.......................................................................................... 31 
VII.1.C Proposed Mitigation to EAP Forced Reauthentication Attacks ............................................................ 31 
VII.2 Leveraging Rogue Gateway Attacks Against Peripheral Devices ................................................................. 32 
VII.2.A Rogue Gateway Attack Against 802.1x-2004 and EAP-PEAP/EAP-TTLS ................................................ 32 
VIII. Proof of Concept and Source Code Release .................................................................................................... 34 
Conclusion ........................................................................................................................................................... 35 
Page 6 of 37 
Acknowledgements .............................................................................................................................................. 36 
References ........................................................................................................................................................... 37 
Page 7 of 37 
I. Introduction 
In this paper, we provide a brief history of attacks against the 802.1x protocol, as well as descriptions of how the 
802.1x and EAP protocols work. We also describe some of the most commonly used EAP methods, highlighting any 
security issues. We also discuss the historical use of port security exceptions as an attack vector, noting that 
improved 802.1x support by peripheral devices is changing this. Finally, we discuss our improvements to the bridge-
based 802.1x bypass technique introduced by Alva Duckwall [4], along with three attacks that can be used against 
802.1x-2004 and 802.1x-2010 using weak forms of EAP. 
 II. Background and Prior Work 
Created in 2001, the original version of the 802.1x standard was designed to provide a rudimentary authentication 
mechanism for devices connecting to a local area network (LAN) [1]. Three years later, an extension of 802.1x named 
802.1x-2004 was released to facilitate the use of 802.1x on wireless networks [2]. 
In 2005, researcher Steve Riley discovered that 802.1x-2004 could be bypassed by inserting a hub between an 
authorized device and a switch [3]. The attacker could then attach a rogue device to the hub and sniff packets and 
inject UDP traffic onto the network. Injecting TCP traffic was not possible due to a race condition that resulted in 
dropped packets and possible detection [4]. 
In 2011, a researcher named "Abb" published a tool called Marvin that could be used to bypass 802.1x by introducing 
a rogue device configured as a bridge directly between an authorized device and the switch [5]. This allowed an 
attacker to eavesdrop on network traffic without the use of a hub. Later that year, researcher Alva Duckwall 
improved upon Abb's attack, using source NATing to achieve full network interaction without relying on packet 
injection [4]. In 2017, Valérian Legrand released a similar tool that featured a modular design written in Python [6]. 
II.1 MAC Filtering and MAC Authorization Bypass (MAB) 
When enterprise organizations using 802.1x need to deploy a device that does not support the protocol, they must 
either permanently or temporarily disable 802.1x on the port used by the device. Disabling 802.1x on a port and 
replacing it with a weaker form of access control, such as MAC filtering, introduces a “port-security policy exception.”  
Historically, these policy exceptions were prevalent due to widespread lack of 802.1x support by peripheral devices 
such multifunction printers and IP cameras. Consequently, attackers typically first looked for policy exceptions when 
attempting to bypass port security, particularly since the bridge-based techniques described in II. Background and 
Prior Work and IV. Improvements to Classical Bridge-based 802.1x Bypass required considerably more effort. To 
bypass MAC filtering, the attacker merely located a device that does not use 802.1x, spoofed its MAC address, and 
connected to the device’s switch port. 
II.2 The Current State of Wired Port Security 
The largest enterprise networking hardware manufacturers now offer switches that supports 802.1x-2010. This new 
version of the 802.1x protocol uses MACsec to implement hop-by-hop Layer 2 encryption along with packet-by-
packet integrity checks. These additional security features defeat the bridge-based attacks we described in II. 
Background and Prior Work and IV. Improvements to Classical Bridge-based 802.1x Bypass [7]. However, adoption 
rates for 802.1x itself remain relatively low, and adoption rates for newer additions to the standard such as 802.1x-
2010 are even lower. Regardless, attackers should expect to see increased 802.1x-2010 adoption in the near future, 
giving rise to a need to develop a method to cope with it.  
Page 8 of 37 
In addition to the development of 802.1x-2010 and MACsec, improvements in peripheral device security increase 
the challenges in bypassing wired port security by looking for policy exceptions. At this point, most printer 
manufacturers offer at least one affordable model supporting 802.1x. As enterprise organizations continue to phase 
out legacy hardware, they continue to deploy more 802.1x capable peripheral devices into their network 
environments. This, in turn, decreases the frequency of port security exceptions, reducing the existence of what was 
once considered low-hanging-fruit for attackers. 
In the remainder of this paper, we demonstrate our efforts to address both the introduction of MACsec and 
increased 802.1x support by peripheral devices. We begin by introducing improvements to Duckwall’s bridge-based 
attacks against 802.1x-2004. We then introduce techniques to bypass 802.1x-2010 when implemented using weak 
forms of EAP. Finally, we discuss strategies and techniques to compensate for improvements in peripheral devices. 
II.3 802.1x Overview 
The 802.1x protocol is an authentication framework used to allow or deny access to devices wishing to connect to 
a local area network (LAN) (either wired or wireless) [1][2][9]. The protocol defines an exchange between the 
following three parties: 
§ 
supplicant – the client device wishing to connect the LAN [1][2][9]. 
§ 
authenticator – a network device such as a switch providing access to the LAN [1][2][9]. 
§ 
authentication server – a host that runs software implementing RADIUS or some other Authorization, 
Authentication, and Accounting (AAA) protocol. Usually the authentication server is a standalone system, 
although it can be built into the same hardware as the authenticator [1][2][9]. 
Figure 1 – The EAP authentication process is encapsulated by EAPOL between the supplicant and authenticator, and by RADIUS 
between the authenticator and authentication server. 
The authenticator can be thought of as a gatekeeper that guards access to the LAN. When the supplicant connects 
to a switch port, it must provide the authenticator with a set of credentials [1][2][9]. The authenticator forwards 
these credentials to the authentication server, which verifies that the credentials are valid. If the credentials are 
valid, the authentication server instructs the authenticator to allow the supplicant to access the network. Otherwise, 
the supplicant is denied access to the network [1][2][9]. 
The 802.1x authentication process typically follows a four-step sequence: 
1. Initialization – the supplicant connects to a port on the switch (authenticator). At this time, the switch port 
is currently disabled. The authenticator detects this new connection and enables the port, but only allows 
802.1x traffic to be transmitted. When in this restricted state, the port is “unauthorized” 
 [1][2][9]. 
Page 9 of 37 
2. Initiation – either the supplicant or the authenticator can initiate the 802.1x authentication process. In 
some implementations of 802.1x, the authenticator periodically sends out EAP-Request-Identity frames 
that prompt the supplicant to begin authenticating [1][2][9]. Alternatively, the authenticator can wait for 
the supplicant to send an EAPOL-Start frame, to which it will respond with an EAP-Request-Identity frame. 
In either case, the supplicant replies with an EAP-Response-Identity frame containing an identifier (such as 
a username). The supplicant receives this frame, encapsulates it in a RADIUS Access-Request frame, and 
forwards the frame to the authentication server [1][2][9]. 
3. EAP Negotiation – The authentication server responds with an EAP-Request frame encapsulated within a 
RADIUS Access-Challenge. The authenticator strips the RADIUS Access-Challenge frame from this response, 
and sends the resulting EAP-Request frame to the supplicant [1][2][9]. The EAP-Request frame specifies an 
EAP method that the supplicant should use to continue the authentication process. The supplicant either 
begins the EAP authentication process using the recommended EAP method, or responds with a Negative 
Acknowledgement (NAK) that includes a list of acceptable methods. [1][2][9] 
4. Authentication – Once the supplicant and authentication server agree on an EAP method, the 
authentication process begins. The specific details of how the authentication process should proceed 
depends on the EAP method selected [1][2][9]. No matter what EAP method is used, the authentication 
process will result in an EAP-Success or EAP-Failure message. In the event of a successful authentication, 
the port is set to an “authorized state”, in which normal traffic is allowed. Otherwise, the port remains in 
an “unauthorized” state [1][2][9]. 
II.4 Notable EAP Methods 