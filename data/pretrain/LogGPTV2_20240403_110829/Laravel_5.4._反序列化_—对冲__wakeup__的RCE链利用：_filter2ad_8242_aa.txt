# Laravel 5.4.*反序列化 —对冲__wakeup()的RCE链利用：
本次主要是对Laravel5.4.*的框架进行的代码审计，尝试挖掘其中可利用的POP链。
## 环境搭建：
对于Laravel
5.4.*的环境搭建，这里我主要用到的是`Composer`，因为Laravel这个框架其实和Composer联系比较深，对于框架都可以用Composer直接一个命令拉出来。
    composer create-project --prefer-dist laravel/laravel laravel5.4 "5.4.*"
或者是在github上面下载Releases也可以：
    https://github.com/laravel/laravel
这里的laravel5.4是生成文件名，后面的5.4.*则是版本号。
然后进行一系列操作，参考如下博客：
> 
接下来还是常规操作，对于路由进行配置：
    routes/web.php
添加：
    Route::get("/","\App\Http\Controllers\POPController@test");
然后在Controller，控制器里添加用来反序列化的函数。
    app/Http/Controllers/POPController.php
不过用处不大，可以直接跳过，这里直接看一下`$this->event`和`$this->events`
这里两个变量都只有一个写入值，而且是`__construct()`方法中的，我们可以控制并调用`$events`来决定调用哪个类中的`dispatch()`，同时这里很显然`$event`的值是我们可以控制的，可以作为跳板，跳转到别的文件中。
这边可以找一下有没有好用的类里有`dispatch()`作为突破点，一番寻找下来没有看见，那就考虑一下`$event`。
dispath()这个函数不会进行字符串的输出，所以不能以`__toString()`作为跳板，这里优先考虑一下，找一个没有`dispatch()`方法的类，通过这个方式去调用`__call()`，将`$event`作为参数，使用Seay进行全局搜索。
稍微有点多，87处。
这里我上网找了一下别的师傅的博客，这里大部分师傅都是调用的Generation里的`__call()`方法。我直接跟进一下。
这里看一下`$method` 和`$attributes`
可以发现只有一个赋值点，可以控制参数。
这里跟进一下函数  
`$method`和`$attributes`在这里作为`call_user_func_array()`函数的参数，进行使用。
`call_user_func_array()`这个函数是一个回调函数，格式是
    call_user_func_array($function,$param[])
其中`$function`是用于指定调用函数的参数，而`$param`是作为参数的数组，返回值是布尔值，由回调的函数是否执行成功决定返回true或是false。
在当前函数中，`$argument`被控制的，而具体函数则是调用`getFormatter`函数的返回值，跟进一下`getFormatter()`。
这里直接看第一个if就可以了，这个函数没有对输入做更多处理，只要存在输入，就会直接返还。因此可以知道这里是可以直接调用我们想要的函数。
这里就已经构成rce了，通过回调函数`call_user_func_array()`会造成任意代码执行。
这里总结一下利用逻辑：  
### 编写不成功的POC：
不成功的POC。
    events = $events;
                $this->event = $event;
            }
        }
    }
    namespace Faker{
        class Generator{
            protected $formatters;
            function __construct()
            {
                $formatters = ['dispatch'=>'system'];
            }
        }
    }
    namespace {
        $a = new Faker\Generator();
        $b = new Illuminate\Broadcasting\PendingBroadcast($a,'ls');
        echo(urlencode(serialize($b)));
    }
    ?>
理论上来说，当执行了这个POC之后，就会执行ls命令。
#### 问题：
不过这里会有一个问题，应该是Laravel官方在后续的更新里对这个版本进行了更新，然后通过一个`__wakeup()`将`$formatters`置空了。
也就是说这条链子这里是死了，不能继续调用。
### inHann师傅给出的解决思路：
但是这里应该还是存在一些解决方案的，当我看见这个 **__wakeup()** 的时候，首先考虑到的就是能不能改变对象的数量，然后通过
**CVE-2016-7124(__wakeup绕过)** ，来进行绕过。
但是这里存在一个问题，对于Laravel 5.4.*，需要的PHP版本需要大于等于5.6.4
而这个CVE的影响范围却是，PHP5 原文如下：
>
> 
这里我还是写一下个人理解以及需要的前置知识。
参考了：
> 
>
> 
#### 前置知识：
PHP序列化与反序列化中的数据类型与引用方式（reference)
首先，我们知道在PHP中，使用`serialize()`函数对对象进行序列化的时候，会使用不同的字母将其中的变量的类型表示出来，例如：
    a = "String";
            $this->b = 1;
        }
    }
    $demo = new Demo();
    echo serialize($demo);
其中`O`代表的对象，`s`代表字符串，`i`代表整形。
全部类型：
比较常见的类型都是数组之类的，但是其中有两个比较特殊的变量类型，r，R。这两个表示的是引用。
其中r表示的是对象引用，个人理解也可以说是对于标识符的引用。
而R表示的是指针引用，也就是直接引用指向对应内存地址的指针。
或者说：
**当两个对象本来就是同一个对象时后出现的对象将会以小写r表示。**
**而当PHP中的一个对象如果是对另一对象显式的引用，那么在同时对它们进行序列化时将通过大写R表示**
两者之间的区别就是，R等于是两个不同的变量名指向了同一块内存（或者说两个不同的变量名里面存了两个不一样的标识符，但是两个标识符都是同时指向同一个内存），因此任何一个变量被改变了，都会影响到所有变量的值。
而r是相当于直接重新开辟了一个内存，只是将值复制过来，然后保存。
第一个是浅拷贝，也就是相当于是PHP序列化中的R。
（如果变量a将[1,2,3]进行了更改，那么b的值自然也会进行更改）
第二个是深拷贝，也就是对应的r。
（变量a,b相互不影响）
这里我用程序演示一下：
    a = 'first';
            $this->b = 'second';
            $this->c = 'third';
        }
    }
    $d = new Demo();
    echo (serialize($d)."\n");
    $d->c = $d;
    echo (serialize($d)."\n");
    $d->c = $d->a;
    echo (serialize($d)."\n");
    $d->c = &$d->a;
    echo (serialize($d));
运行结果如下：
这里需要注意的是，`Demo`这个类，应当被编号为1，所以第二个输出的结果是`r:1`。然后`$a`被标志为2，依次类推。
`r:1`表示的就是引用第一个值，也就是`Demo`。类似的，`r:2`就是`a`的值。
    value = $a;
    //O:11:"SampleClass":1:{s:5:"value";r:1;}
    $b = new SampleClass();
    $b->value = &$b;
    //O:11:"SampleClass":1:{s:5:"value";R:1;}
    $a->value = 1;
    $b->value = 1;
    var_dump($a);
    var_dump($b);
可以看见在运行了之后，$a只是改变了$value的值，而$b是直接将本身的值改变了。
这个就是两者之间的差别。
同时，这种方式有一个特点，即使你不是通过`serialize()`函数或是`Serializable`接口进行的正规序列化，而是直接手写一个`R:2`上去，也同样可以完成对于对象的引用。
#### 利用思想：
这里就出现了一个利用方式的思考，因为`R`方式的引用，可以使得两个不同的变量的值保持相同。
如果可以满足这个步骤：