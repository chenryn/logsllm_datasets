title:Fear and Logging in the Internet of Things
author:Qi Wang and
Wajih Ul Hassan and
Adam Bates and
Carl A. Gunter
Fear and Logging in the Internet of Things
Qi Wang, Wajih Ul Hassan, Adam Bates, Carl Gunter
University of Illinois at Urbana-Champaign
fqiwang11, whassan3, batesa, PI:EMAIL
Abstract—As the Internet of Things (IoT) continues to
proliferate, diagnosing incorrect behavior within increasingly-
automated homes becomes considerably more difﬁcult. Devices
and apps may be chained together in long sequences of trigger-
action rules to the point that from an observable symptom (e.g.,
an unlocked door) it may be impossible to identify the distantly
removed root cause (e.g., a malicious app). This is because, at
present, IoT audit logs are siloed on individual devices, and
hence cannot be used to reconstruct the causal relationships
of complex workﬂows. In this work, we present ProvThings, a
platform-centric approach to centralized auditing in the Internet
of Things. ProvThings performs efﬁcient automated instrumen-
tation of IoT apps and device APIs in order to generate data
provenance that provides a holistic explanation of system activities,
including malicious behaviors. We prototype ProvThings for the
Samsung SmartThings platform, and benchmark the efﬁcacy of
our approach against a corpus of 26 IoT attacks. Through the
introduction of a selective code instrumentation optimization, we
demonstrate in evaluation that ProvThings imposes just 5% over-
head on physical IoT devices while enabling real time querying
of system behaviors, and further consider how ProvThings can
be leveraged to meet the needs of a variety of stakeholders in the
IoT ecosystem.
I.
INTRODUCTION
The rapid expansion of the Internet of Things (IoT) is
providing great beneﬁts to our everyday lives. Smart homes
now offer the ability to automatically manage household ap-
pliances, while Smart Health initiatives have made monitoring
more effective and adaptive for each patient. In response to the
increasing availability of smart devices, a variety of IoT plat-
forms have emerged that are able to interoperate with devices
from different manufactures; Samsung’s SmartThings [23],
Apple’s HomeKit [14], and Google’s Android Things [13] are
just a few examples. IoT platforms offer appiﬁed software [31]
for the management of smart devices, with many going so far
as to provide programming frameworks for the design of third-
party applications, enabling advanced home automation.
As long prophesied by our community, the expansion of
IoT is also now bringing about new challenges in terms of
security and privacy [61], [69], [67], [10]. In some cases, IoT
attacks could have chilling safety consequences – burglars can
now attack a smart door lock to break into homes [51], and
arsonists may even attack a smart oven to cause a ﬁre [42].
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23282
www.ndss-symposium.org
However, as smart devices and apps become interconnected
and chained together to perform an increasingly diverse range
of activities, explaining the nature of attacks or even simple
misconﬁgurations will become prohibitively difﬁcult; the ob-
servable symptom of a problem will need to be backtraced
through a chain of different devices and applications in order
to identify a root cause.
in all cases, existing audit
One solution to this problem is to look into standard appli-
cation logs. We surveyed the logging functionalities of several
commodity IoT platforms and found that most of them provide
activity logs [23], [29], [30], [20]. Some provided high-level
event descriptions (e.g., “Motion was detected by Iris Indoor
Camera at 11:13 AM”) [20], while others exposed verbose but
obtuse low-level system logs [29]. However, we determined
that,
to
diagnose IoT attacks. This is because logging mechanisms
were device-centric, siloing audit information within individual
devices. Moreover, even some platforms provided a centralized
view of all device events, the audit information was speciﬁed
it was impossible to infer the causal
in such a way that
dependencies between different events and data states within
the system [41], which is needed in order to reconstruct
complete and correct behavioral explanations. For example,
an Iris log cannot answer the question “Why light was turned
on at 11:14 AM?” as no causal link is established between the
audit events of the light and the camera.
logs were insufﬁcient
Data provenance represents a powerful technique for track-
ing causal relationships between sequences of activities within
a computing system. Through the introduction of provenance
tracing mechanisms within IoT, we would possess the informa-
tion necessary to perform attribution of malicious behaviors or
even actively prevent attacks through performing lineage-based
authorization of activities. Unfortunately, past approaches to
provenance collection are not applicable to IoT, which is
deﬁned by its ecosystem of heterogeneous devices produced by
different manufacturers. Performing whole-system monitoring
in such an environment is challenging, as it is impractical
to modify all devices through the introduction of a tracking
mechanism. Moreover, at present there does not exist a uniform
ontology for describing events in the diverse IoT environment,
particularly one that is both sufﬁcient for diagnosing attacks
while including minimal extraneous information. Finally, data
provenance is generally considered a tool of system admin-
istrators and forensic investigators, which is at odds with the
consumer-focused nature of the IoT product market.
Considering these challenges, we present ProvThings, a
platform-centric approach to provenance-based tracing for IoT.
ProvThings analyzes both IoT apps and device APIs (xII) to
capture complex chains of interdependencies between different
apps and devices, and thus represents a signiﬁcant step forward
in comparison to the current state-of-the-art [54], which can
analyze IoT apps in isolation but not how data ﬂows between
apps. ProvThings uses program instrumentation to collect the
provenance of device data and control messages in a minimally
invasive fashion, then aggregates these traces into provenance
graphs that provide a complete history of interactions between
principals in the system. A critical challenge in the design
of provenance-aware systems is the sheer volume of infor-
mation that is generated, imposing high storage overheads
and frustrating forensic analysis [38], [47], [59]. To avoid
collecting unnecessary provenance metadata, we deﬁne a set
of sources and sinks that inform the security state of an IoT
system, then design a selective instrumentation algorithm that
prunes provenance collection to only those instructions that
impact the security state. To offer utility to a broad group of
stakeholders within the IoT ecosystem, ProvThings provides
low-level query interfaces to assist developers, an expressive
policy engine for advanced users, and a simpliﬁed management
app that allows consumers of limited technical knowledge to
beneﬁt from the insights of provenance tracing.
Our contributions can this be summarized as follows:
(cid:15) ProvThings. We present a general and practical frame-
work for the capture, management, and analysis of data
provenance on IoT platforms (xIV). We ensure that our
approach is both efﬁcient and minimally invasive through
the introduction of a selective instrumentation algorithm
which reduces provenance collection through the iden-
tiﬁcation of security-sensitive sources and sinks. To
our knowledge, our work is the ﬁrst in the literature
to offer a means of tracing through complex chains of
interdependencies between IoT components.
(cid:15) Implementation & Evaluation. We
implement
(xV),
ProvThings on Samsung’s SmartThings
and
exhaustively evaluate the efﬁcacy and performance
of our prototype (xVI). We present a novel coverage
benchmark that validates ProvThings’ attack graphs
against 26 known IoT attacks, and demonstrate that
ProvThings imposes as little as 5% latency on IoT
devices and requires just 260 KB of storage for daily
use.
(cid:15) Deployment & User Scenarios. Through an extensive se-
ries of use cases (xVII), we demonstrate how ProvThings
can be deployed and used by a variety of IoT users.
We explain how ProvThings could aid IoT profession-
als in performing attack reconstruction and help desk
troubleshooting, show how technical users can specify
advanced provenance-aware security policies for their
homes, and show the design of an IoT management app
that distills the insights of ProvThings into an easily in-
terpretable format for users with limited technical ability.
II. BACKGROUND
A. IoT Platforms and Smart Home Platforms
IoT is increasingly moving to platforms which enable
faster, better and cheaper development and deployment of IoT
solutions. In 2017, there are more than 450 IoT platforms in
the marketplace [33]. Many of them, such as SmartThings and
TABLE I: A comparison of several popular home automation
platforms, describing whether Apps Run On the cloud or the hub,
Devices Connect To a local hub or a remote cloud, 3rd Party Apps
are permitted, and the number of Ofﬁcial Apps available for download
(as of May 2017).
IoT Platform
SmartThings [23]
Wink [30]
Iris [20]
Vera [29]
HomeKit [14]
Android Things [13]
Apps
Run On
Devices
Connect To
3rd Party
Apps
cloud
cloud
cloud
hub
hub
cloud
hub
hub
hub
hub
hub
cloud
Y
N
N
Y
N
Y
Ofﬁcial
Apps
181 a
N/A
N/A
236 b
N/A
12 c
AWS IoT [19], integrate a comprehensive set of devices and
enable custom IoT applications. To interoperate with devices
from different manufacturers, IoT platforms create a device
abstraction (device API) for each device so that IoT apps or
other devices can read messages and interact with the device.
For example, SmartThings uses Device Handlers and AWS
IoT uses Device Shadows to abstract physical devices. Device
abstractions are often created in the forms of custom programs
(e.g., SmartThings) or device SDKs (e.g., AWS IoT), which
could serve as proxies of the behaviors of physical devices.
As IoT is a sprawling and diverse ecosystem, in this work
we focus on home automation platforms, which have the
largest market share of IoT consumer products [33]. Smart
home platforms automatically manage the home environments
and enable the users to remotely monitor and control their
homes. Generally, in a smart home, a hub is a centralized
the devices; a cloud synchronizes
gateway to connect all
devices states and provide interfaces for remote monitoring
and control; an app is a program that manages devices to
create home automation.1 At present, a variety of platforms
compete within the smart home landscape. Table I summarizes
the architectural differences of 6 of the most popular platforms.
We observe two categories of architectures: cloud-centric
architectures in which apps execute on a cloud backend, and
hub-centric architectures where apps run locally within the
home [4]. Currently, the cloud-centric architecture is the most
popular architecture [48], an example of which is shown in
Figure 1. Across all platforms, a central point of mediation
exists (i.e., hub or cloud) for control of connected devices.
Finally, while not all products feature an app market, the logic
of both appiﬁed and unappiﬁed platforms is largely speciﬁed
in terms of a trigger-action programming paradigm [72].
Unfortunately, the rise of IoT has ushered in a host of
new security threats to the home. Of particular concern is
the widely used trigger-action programming paradigm, which
allows the chaining of multiple devices and apps together to
the point that determining the root cause of an unexpected
event is often difﬁcult. Hence, malicious or vulnerable IoT
apps in a chain can have far-reaching implications for home
security, such as accessing sensitive information or executing
privileged functionality. For example, if a malicious app were
to forge a fake physical device event from a CO detector, an
associated alarm panel app in the trigger-action chain would
be unable to detect the illegitimate history of the event and
aAvailable at https://github.com/SmartThingsCommunity/SmartThingsPublic
bAvailable at http://apps.mios.com/
cAvailable at https://developer.android.com/things/sdk/samples.html
1Different IoT platforms use different terms to refer the same concepts.
For example, a physical smart device is termed device [25] in Samsung’s
SmartThings, while is termed accessory [18] in Apple’s HomeKit.
2
Fig. 1: SmartThings architecture overview.
input "lock", "capability.lock"
preferences {
}
def installed() {
subscribe(lock, "lock", eventHandler)
}
def eventHandler(evt){
1
2
3
4
5
6
7
8
9
10
11
12
13
Fig. 2: An example SmartApp that monitors the events of a smart
lock.
def name = evt.name
def value = evt.value
log.debug "Lock event: $name, $value"
def msg = "Lock event data:" + value
httpPost("http://www.domain.com", msg)
}
would therefore sound an alarm [44]. Diagnosing errors is also
difﬁcult in benign environments. An error in one rule may
lead to unexpected behaviors [52], [60], yet the observable
symptom may be distantly removed from the root cause (e.g.,
buggy app, misconﬁguration). To address this threat, what is
needed is a means of understanding the lineage of triggers and
actions that occur within the home.
Samsung SmartThings. Due to its maturity, in this work we
consider SmartThings as an exemplar smart home platform.
The SmartThings architecture is cloud-centric and also features
a hub, a design that
is common across several platforms
including Wink and Iris. The overview of the SmartThings
architecture is shown in Figure 1. It consists of three major
components: the SmartThings cloud backend, the hub, and the
SmartThings mobile app. The cloud backend runs SmartApps
(i.e., IoT apps) and Device Handlers (i.e., device abstractions),
which are Groovy-based [28] programs. The hub, which sup-
ports multiple radio protocols, interacts with physical devices
and relays the communication between the cloud and devices.
The mobile app is used to install apps, receive notiﬁcations
and control devices remotely. A SmartApp is a program
that allows developers to create custom automations for their
homes. Figure 2 shows a SmartApp which logs the events
of a lock device and sends the event data to a web server. A
Device Handler is a virtual representation of a physical device,
example of which is provided in Appendix A. It manages
the physical devices using lower level protocols and exposes
interfaces of a physical device to the rest of the platform.
SmartApps and Device Handlers communicate in two ways.
First, SmartApps can invoke the commands a device supports
(e.g., lock or unlock the door) via method calls to a device
handler. Second, SmartApps can use the subscribe method
to subscribe to the events of a device (e.g., motion detected).
B. Data Provenance
Data provenance describes the history of actions taken on
a data object from its creation up to the present. Provenance
can be used to answer a variety of historical questions about
the data it describes, such as “In what environment was
3
Fig. 3: An example provenance graph that describes why a kitchen
light was turned on by Apple HomeKit.
this data generated?” and “Was this message derived from
sensitive data?”. Data provenance supports a wide variety of
applications such as network troubleshooting [36], [40], [73],
forensic analysis of attack [58], [56], and secure auditing [77],
[38]. It therefore stands to reason that data provenance would
be an invaluable tool within IoT.
Data provenance could allow us to understand the causal
relations within a smart home. An example of an IoT prove-
nance graph is shown in Figure 3 describing the circumstances
under which a kitchen light was turned on by Apple HomeKit.
The bottommost node in the graph represents a service2 named
on which changes the state of the light. Its execution was
prompted by the Apple Home App eventHandler, which
received a Motion Detected Event. We can therefore conclude
that the kitchen light was turned on as the result of a motion
sensor detecting movement within the home.
System Model.
In this work, we use the W3C PROV-DM
(PROV data model) speciﬁcation [2] because it
is perva-
sive and represents provenance graph in a directed acyclic
graph (DAG). PROV-DM has three types of nodes: (1) an
Entity is a data object, (2) an Activity is a process, and
(3) an Agent is something bears responsibility for activi-
ties and entities. The edges encode dependency types that
relate which entity WasAttributedTo which agent, which
activity was WasAssociatedWith which agent, which en-
tity WasGeneratedBy which activity, which activity used
which entity, which activity WasInformedBy which other
activity, and which entity WasDerivedFrom which other entity
between nodes. Note that, except WasAttributedTo and
WasAssociatedWith, edges point backwards into the history
of a system execution.