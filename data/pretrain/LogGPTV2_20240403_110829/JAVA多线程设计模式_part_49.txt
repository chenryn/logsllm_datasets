器前，没有办法解说什么是内存的同步，因此下面才要针对它们来进行解说。
的操作。此为线程的同步。
程必须在critical section 的入口处等待。由l Synchronized 所规定的范围，来控制线程
section）时，该区间仪能提供一个线程进行操作。在一个线程作业期间，其他的线
“内存的同步”两种。
以最佳化，
的执行处理系统，会在[JLS]所规定的范围内，将这些 action 费心加以排序，以便予
位（atomic）。在[JLS]的第17章中，有规定这6个action 应以哪种顺序来执行。Java
线程的同步在本书中曾数次出现。使用 synchronized 来制作临界区间（critical
synchronized的两项功能
当线程要进入synchronized时，该线程所拥有的工作存储器的内容会被“清除”。
至于内存的同步，在本书中很少提到，这是因为在未了解上存储器与“作存储
欲进入 synchronized时，如果1.作存储器在有未映像到主存储器的工作拷贝，
因此便不－一-写出“ syuchronized 方法与 synchronized block"，而仅写成
在了解主存储器与工作存储器所扮演的角色后，我们再针对 synchromized 来思
●lock/unlock对于伴随着实例而来的锁定，进行atomic action。
● read/write
一unlock意指线程解除锁定
－lock表示线程取得锁定
-assign意指线程将值指定给工作存储器
一use表示线程引用T作存储器的值
一read负责从主存储器拷贝到工作存储器
write与上述相反，负责从工作存储器拷贝到主存储器
负责主存储器与工作存储器间的 atomic action.
Java 的内存模型
---
## Page 480
便会将自己工作存储器的内容完全映像到主存储器。
保证的。有可能立刻映像，也有可能暂时不作映像（至少在程序语言规格上是
行处理系统或许会根据这个来进行最佳化。
synchronized外”时，便不保证一定会进行I作存储器与主存储器之间的同步。执
466
欲退出 synchronized时
如此）。
果
补充一点：强制写入可以吗？
总归句话，工作存储器的内容与主存储器的内容会予以同步。
用主存储器上的值的线程，必定会从主存储器将值拷贝到工作拷贝（read→load）。
但是如果有 synchronized 的话，情况就不同了。
(B)“土作存储器的释数"
写入主存储器内，成为其他线程可以看得见（visible）的状态。
该内容就会被强制写入主存储器（store→write）。因此，之前的计算结果会被全部
说，已经退出 synchronized的线程可能会继续使用自已的工作存储器）。
之前所担心的状况。这个相当于我们在第1章所谈过的race condition。
有字段的值根本不可能被写入主存储器。
他线程所写入的内容岂不是就被覆盖掉了？”。有这一层考虑是无可厚非，但
在Java 的内存模型上，已被写入上作存储器的内容何时会映像到主存储
都会映像在主存储器上。
当然，如果对于共有字段的指定让 synchronized 保护得忘了，那么就会出现
数个线程所共有的字段，都会进入到 synchronized 里面。此时，指定字段的
情况还不到需要担心的程度，
何时会进行内存的同步，相信也是大家关注的问题。内存的同步，会在线程“欲
或许有些读者会担心：“如果工作拷贝的内容会强制写入主存储器，那么其
当线程欲退出 synchronized时，会执行相同于进入 synchronized时，（A）“强制
欲进入 synchronized 时，I作存储器上的工作拷贝会被全部丢弃。之后，欲引
。当线程欲进出 synchronized 时，
---
## Page 481
补充一点：atomic与内存的同步不同
用 atomic 的方式来进行指定工作。
的方式来进行。但如果是 long 型或 double 型的字段，只要有写着 volatile，就可以
volatile会以atomic的方式来进行 long、double 的指定
便会映像到主存储器。
拷贝操作。而相反地，将值指定给写着volatile 的字段后，工作存储器的内容通常
步，而不会做线程的同步。
经说明过的两种同步当中，会自动执行内存的同步上作。不过进行的只有内存的同
volatile仅进行内存的同步
具有以下两种功能。
补充一点：单线程，可不必担心内存的同步问题
的方式来进行。
举例来说：
volatile的二项功能
若欲指定至long 型、double 型“以外”的字段，不会以 atomic 的方式来进行。
经映像到主存储器了没有？”。
储器上的工作拷贝之问题。单线程运行期间，完全没有必要使用synchronized
程运行期间，线程所盯住的目标，不会发生要区别它是主存储器，还是工作存
假设有上述这样一个 int型的字段存在，当要指定至此字段时，便会以 atomic
当线程欲引用volatile 字段的值时，通常都会发生从主存储器到工作存储器的
在了解主存储器与工作存储器所扮演的角色后，接下来要谈是volatile。volatile
线程会经常性地通过工作存储器上的工作拷贝来操作主存储器，
这里请勿将 atomic 与内存的同步混淆。int 型的指定字段虽然是采用 atomic
内存的同步操作会经常性地对于写着 volatile 的字段来进行。volatile 在前面曾
●进行内存的同步
int field;
以 atomic 的方式来进行 long、double 的指定
Java的内存模型
，因此在单线
---
## Page 482
468
performance上便不为人所喜爱。
就会以new来产生MySystem 的实例。
类。
范例程序
存的模型。
的问题，本节将解说 Double Checked Locking 这种模式的危险性，同时确认 Java 内
E[lea])。
章）操作（performance）的方法之·“，也可以称为 test-and-test-and-set（参照附录
(1）利用 Single Threaded Execution Patterm 来安装
Double Checked Locking pattern 的危险性
注1：这个会变成 Singleton Pattem（参照附录 E[GoF}IYuki01]。
List B-1 如默认般来操作，但因 getlnstance 已经成为 synchronized 方法，在
或volatile来保护。
volatile 或指定的线程并未进出 synchronized．就不会进行内存的同步。
方式，但是所指定的值并不保证会立刻映像到主存储器。如果字段中没有写着
考虑到同时被数个线程调用的状况，getInstance方法会成为 synchronized。因此，
在类方法 getInstance 中，会检查类字段 instance 的值是否为 mull。如果是的话，
不过，如果要在Jave 中使用Double Checked Locking Pattern，必须注意安全性
因此，被数个线程进行变更/引用的字段，即使是 int 型，也必须以 synchronized
List B-1是使用 Single Threaded Execution Pattern（第 1章）来安装 MySystem
以下提出 3 种方法来安装名为 MySystem 的类。此类具有以下属性:
 Double Checked Locking Pattern 是改善 Single Threaded Execution Pattern （第
MySystem类的实例可通过类方法 getInstance 来取得
MySystem类的实例是惟一的"：1
字段 date 的值可通过 MySystem 类的实例方法 getDate 来取得
为实例被制作出来的时间
MySystem 类的实例，会将 java.util.Date 类的实例保存在字段（date）。该值
---
## Page 483
(2) Double Checked Locking Pattern 
我们在前面已经谈过，Double Checked Locking Pattrm 可以用来改善
MySystem.getInstance( l.getDate( jl;
public class Main extends Thread
public class MySystemf
import java.util.Date;
List B-2
List B-1
public void run( ){
 public static void mainiString[ ] args) 1
1 ( ) aoueasuiaeh waishs peztuonuouas otieis siiand
public Date getDate （)↑
 private static Mysystem instance
private MySystem （ ) {
new Main( ).start( };
new Main( ).start( );
return instance;
if (instance = = null ）{
return date;
Main 类 (Main.java)
instance  new Mysystem( );
使用 Single Threaded Execution Pattern 的 MySystem 类
(MySystem.java )
程序收录在下载文件夹 AppendixB/Others/SingleThreadedExecution 内
程序收录在下载文件夹 AppendixB/Others/SingleThreadedExecution 内
null;
Java 的内存模型
469
---
## Page 484
法时，date 宇段有可能不会被初始化"
错误。可是在 Java 的规格上，List B-3 的程序有可能无法正确地操作。
须拟心performance 不佳的问题。
块。因此，getlInstance 第二次以后的调用，儿乎都不会进入 synchronized 块。故无
实例。
（d）的实例是在（b）～（e）的临界区间中产生，因此不会产生两个以上的MySystem
MySysterm.class.亦即 MySystem calss 的类对象。
等于null时，便会进入（b）的synchronized块。取得锁定（lock）的对象为
synchronized 块：
表List B-3。
performance 的问题。在 Double Checked Locking Pattern 下安装 MySystem 类的情况
二次 test）。当 instance 确实相等于null 时，便会指定（d）中 MySystem 的实例（set)。
问题的所在：言以蔽之，就是“当使用 getlmnstance 的返回值来调用 getData 方
以上是Double Checked Locking Patterm 的梗概。在目前所语句的范围内并没有
getlinstance 方法并未成为 synchronized 方法，取而代之的是，在if语句中含有
我们来读一下程序代码。在（a)之if语句的条件检查下（第--次test)，当 instance
只有在（a）的条件测试下instance 等于null时，才会进入（b）的 synchronized
public class Mysystemf
import java.util.Date;
//不保证操作正确
（a）的条件检查是位于临界区间之外，因此会在（c）重新执行条件检查（第
List B-3
private MySystem( ) 1
private Date date = new Date[ }:
private static Mysystem instance  null;
publi Date getDate( } {
 return date;
if (instance = = null} { 
synchronized (MySystem.class) (// (b)进入synchronized块
类(MySystem.java)
虽使用 Double Checked Locking Pattern，但不保证操作正确的 MySystem
if (instance = = null) {
instance = new MySystem( };
//(a)第-次test
//(d)set
//(c)第二次test
---
## Page 485
实例。
可能并未映像到主存储器。也就是说，线程B会使用末完成初始化它 MySystem 的
用（rean→load→use)。
存储器的值。如果工作拷贝不存在，便会从主存储器将值拷贝到工作存储器后再引
字段的值。线程B会引用date 字段的值。这是因为线程B会引用（use）自已工作
synchronized block，而会立刻将 instance的值当作返回值予以返回（return）。然后，
的值不保证会映像到主存储器（有可能会映像、也可能不会）。
block，date 字段的值便会映像到主存储器（store→write）。但在退出前，date 字段
线
Date()的值会指定给实例字段date。字段内会有值代入。这是因为线程A 实例上会
instance字段"，即
进行解说（图B-2）。
不过读者可能已经察觉到，线程A 欲指定至 date 字段的 new Date(）的值，有
我们先设置线程B在（B-1）为instance！=mull。如此，线程B便不会进入
所以知道就是在此处制作 MySystermn 的实例。在制作 MySystem 的实例时，new
instance = new Mysystem( );的部分。
仔细看图 B-2 中的（A-4)。这里写着“在(d)制作 MySystem 的实例，指定给
我们以两个线程欲同时执行 getlnstance 的情况为例，针对无法顺利操作的案例
[A-4}
(A-3)
[A-2)
(A-1） 在（a)判断 instance = = null
线程A
return instance;
在
在
(d）制作 MySystem 的实例，指定给 instance 字段
(c）判蜥 instance = = null
(b)进入 synchronized block
(B-3)调用 get Instance 适回值之 getDate 方法
>>>>
{B-2},
程序收录在下载文件夹AppendixB/OthersDoubleCheckedLocking 内
图B-2ListB-3无法正确操作的案例
在（f）将instance 的值设为 getInstance 的返回值
线程B
//(f)
//（e)退出 synchronized块
Java的内存模型
9
---
## Page 486
a：多线程设计模式
补充一点：真的会发生吗？
补充一点：为何看得见instance 字段？
Procedure').
Checked Locking Pattern会造成危险的方法，表示于List B-4。
正确的解决方法
472
这在’ava规格上，就算发生也不是什么新鲜事。
们的顺序．也可能采用映像到主存储器（store→write）的顺序。
由执行处理系统来决定。当存在两个字段时，可能会根据指定（assign）给它
怪。在没有 synchronized、volatile 时，何时从工作存储器映像到主存储器，是
还会映像至主存储器，这不是太奇怪了吗？然而这在Java的规格上一点也不奇
持着这样的怀疑：date字段的值明明没有映像到主存储器，instance字段的值却
此处系将new MySystem（）当作类字段instance的初期值来予以指定。这在Java
解决 Single Threaded Execution Patten（第1章）performance 不佳、以及 Double
这里所语句的状况是否会真的发生，是由Java的执行处理系统来决定。总之
细心的读者，对于在（B-1）线程B正确引用instance字段一事，内心可能抱
类方法 getInstance 变成不是 synchronized，而一直简化了。
public class MySystem {
import java.util.Date;
4-8 1511
private Mysysten( ) (
private Date date = new Datel };
private static Mystem instance = new MySystem( ):
public static MySystem getInstanceI ) {
public Date getDate( )
 return instancei
return date;
正确操作的MySysten 类（MySystem.java)
---
## Page 487
●Warning! Threading in a multiprocessor world
O Double-checked locking: Clever, but broken
有关 Double Checked Locking Pattem 的危险性，请参考以下说明。
http://www.javaworld.com/jw-02-02001/jw-0209-double.html
http://www.javaworld.com/jw-02-2001/jw-0209-toolbox.html
Java的内存模型
防 B
---
## Page 488
Java 线程的优先级
附录
---
## Page 489
有以下3项：
呢？这些在规格中都没有规定，虽然有提到“以有高优先级的线程为优先”，但是对
定JavaVM的安装与版本以及OS），优先级就没有任何效用。
录E[JLS])。因此，只要没有特别指定特定Java 的执行处理系统（只要没有特别指
Java的优先级必须在特定的执行处理系统上才会有效。
表示优先级的类字段
理系统上也会执行一样的处理。
该处理系统对优先级如何定义与处理。但是不要期待这个程序在其他的Java 执行处
似单线程（Single Thread）的状态。
不过，这样想可就错了。因为有的执行处理系统中，只要有某个线程的优先级稍微
程的执行。线程的 scheduling的算法也没有规范于其中。
部的CPU 时间。这个时候，只要优先度高的线程没有被block 起来，优先度低的线
的CPU时间。但是就其他的执行处理系统而言，可能是优先度最高的线程使用掉全
“优先”的意思没有明确定义，所以还是没有实质的意义。
一点，这个线程就很有可能会一直执行下去。这个情况下，若将一个线程的优先
Java线程的优先级
提高，只有这个线程会开始执行，其他的线程都会停下来。也就是说，会变成近
各位当中一定有人想说“把想要优先执行的线程设置为高优先度，一定没错。
就没有办法执行，还有另·些执行处理系统是不管优先度如何，都不会影响到线
就某些执行处理系统而言，有高优先级的线程会比低优先级的线程分配到更长
如果无论如何都要使用优先级的话，先特别指定Java的执行处理系统，并确认
Java 的线程的优先级是整数（int）。被声明为表示优先级的类字段（classfield）
优先级的值真的会对线程的功能有所影响吗？会有影响的话又是怎么样的影响
● Thread.MIN_PRIORITY
以下介绍与优先级有关的Java 的字段与方法。
Java 线程有优先级（priority）。这个附录C就要来谈谈优先级。
这3 项的值都是固定的，不过并不表示OS中的优先级。
● Thread.MAX _PRIORITY
● Thread.NORM_PRIORITY
表示优先级最高
表示默认的优先级
表示优先级最低
---
## Page 490
获取优先级的方法
方法(instance method)。
设置优先级的方法
(instance method)。
Java 线程的优先级
---
## Page 492
线程相关的主要
附录
---
## Page 493
补充一点：“这个线程”与“现在的线程”
Reference.
都详述于此，请读者仪作为参考之用。
 Java.lang.Object 类
应于his的线程）的意思。
线程相关的主要API
在实际设计或写程序时，请务必参照所使用的Java 处理系统的 API
● public final void notify()
在这里，“这个线程”与“现在的线程”所指的线程是不一样的。
这里介绍的 API 并非所有线程的 API，关于各 API，并未将规格书的所有内容
“现在的线程”的意思是调用其他线程的线程。
附录D中要介绍的是线程相关的主要API的概要。
让现在的线程（调旧出wait 方法的线程）全部wait。milis 是到终止体息
关于终止休息（Time-Out）请参照第4章。
现在的线程如果没有这个对象的锁定时（没有监视器monitor时），执行时异
 public final void wait() throws InterruptedException
时会被抛出异常java.lang.IllegalMonitorStateException。
现在的线程如果没有等待这个对象的锁定时（没有监视器monitor时），执行
启动在这个对象上所有等待的线称。
 public final void notify()
常java.lang.lllegalMonitorStateException 会被抛出 。
不同于 sleep方法，现在的线程的所有的锁定会被释放。