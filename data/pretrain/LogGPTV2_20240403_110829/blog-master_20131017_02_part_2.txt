/* TRACE_POSTGRESQL_SORT_DONE ( char, long) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_SORT_DONE_ENABLED() __builtin_expect (sort__done_semaphore, 0)  
#define postgresql_sort__done_semaphore sort__done_semaphore  
#else  
#define TRACE_POSTGRESQL_SORT_DONE_ENABLED() __builtin_expect (postgresql_sort__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_sort__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_SORT_DONE(arg1,arg2) \  
DTRACE_PROBE2(postgresql,sort__done,arg1,arg2)  
```  
4\. 探针在源码中的信息 :   
语句状态改变探针:   
src/backend/postmaster/pgstat.c  
```  
/* ----------  
 * pgstat_report_activity() -  
 *  
 *      Called from tcop/postgres.c to report what the backend is actually doing  
 *      (but note cmd_str can be NULL for certain cases).  
 *  
 * All updates of the status entry follow the protocol of bumping  
 * st_changecount before and after.  We use a volatile pointer here to  
 * ensure the compiler doesn't try to get cute.  
 * ----------  
 */  
void  
pgstat_report_activity(BackendState state, const char *cmd_str)  
{  
        volatile PgBackendStatus *beentry = MyBEEntry;  
        TimestampTz start_timestamp;  
        TimestampTz current_timestamp;  
        int                     len = 0;  
        TRACE_POSTGRESQL_STATEMENT_STATUS(cmd_str);  
xlog插入和切换探针:   
src/backend/access/transam/xlog.c  
/*  
 * Insert an XLOG record having the specified RMID and info bytes,  
 * with the body of the record being the data chunk(s) described by  
 * the rdata chain (see xlog.h for notes about rdata).  
 *  
 * Returns XLOG pointer to end of record (beginning of next record).  
 * This can be used as LSN for data pages affected by the logged action.  
 * (LSN is the XLOG point up to which the XLOG must be flushed to disk  
 * before the data page can be written out.  This implements the basic  
 * WAL rule "write the log before the data".)  
 *  
 * NB: this routine feels free to scribble on the XLogRecData structs,  
 * though not on the data they reference.  This is OK since the XLogRecData  
 * structs are always just temporaries in the calling code.  
 */  
XLogRecPtr  
XLogInsert(RmgrId rmid, uint8 info, XLogRecData *rdata)  
{  
...  
        /* info's high bits are reserved for use by me */  
        if (info & XLR_INFO_MASK)  
                elog(PANIC, "invalid xlog info mask %02X", info);  
        TRACE_POSTGRESQL_XLOG_INSERT(rmid, info);  
...  
        /*  
         * If the record is an XLOG_SWITCH, we must now write and flush all the  
         * existing data, and then forcibly advance to the start of the next  
         * segment.  It's not good to do this I/O while holding the insert lock,  
         * but there seems too much risk of confusion if we try to release the  
         * lock sooner.  Fortunately xlog switch needn't be a high-performance  
         * operation anyway...  
         */  
        if (isLogSwitch)  
        {  
                XLogwrtRqst FlushRqst;  
                XLogRecPtr      OldSegEnd;  
                TRACE_POSTGRESQL_XLOG_SWITCH();  
...  
src/include/access/rmgr.h  
typedef uint8 RmgrId;  
...  
src/include/access/rmgrlist.h  
/* symbol name, textual name, redo, desc, startup, cleanup, restartpoint */  
PG_RMGR(RM_XLOG_ID, "XLOG", xlog_redo, xlog_desc, NULL, NULL, NULL)  
PG_RMGR(RM_XACT_ID, "Transaction", xact_redo, xact_desc, NULL, NULL, NULL)  
PG_RMGR(RM_SMGR_ID, "Storage", smgr_redo, smgr_desc, NULL, NULL, NULL)  
PG_RMGR(RM_CLOG_ID, "CLOG", clog_redo, clog_desc, NULL, NULL, NULL)  
PG_RMGR(RM_DBASE_ID, "Database", dbase_redo, dbase_desc, NULL, NULL, NULL)  
PG_RMGR(RM_TBLSPC_ID, "Tablespace", tblspc_redo, tblspc_desc, NULL, NULL, NULL)  
PG_RMGR(RM_MULTIXACT_ID, "MultiXact", multixact_redo, multixact_desc, NULL, NULL, NULL)  
PG_RMGR(RM_RELMAP_ID, "RelMap", relmap_redo, relmap_desc, NULL, NULL, NULL)  
PG_RMGR(RM_STANDBY_ID, "Standby", standby_redo, standby_desc, NULL, NULL, NULL)  
PG_RMGR(RM_HEAP2_ID, "Heap2", heap2_redo, heap2_desc, NULL, NULL, NULL)  
PG_RMGR(RM_HEAP_ID, "Heap", heap_redo, heap_desc, NULL, NULL, NULL)  
PG_RMGR(RM_BTREE_ID, "Btree", btree_redo, btree_desc, btree_xlog_startup, btree_xlog_cleanup, btree_safe_restartpoint)  
PG_RMGR(RM_HASH_ID, "Hash", hash_redo, hash_desc, NULL, NULL, NULL)  
PG_RMGR(RM_GIN_ID, "Gin", gin_redo, gin_desc, gin_xlog_startup, gin_xlog_cleanup, gin_safe_restartpoint)  
PG_RMGR(RM_GIST_ID, "Gist", gist_redo, gist_desc, gist_xlog_startup, gist_xlog_cleanup, NULL)  
PG_RMGR(RM_SEQ_ID, "Sequence", seq_redo, seq_desc, NULL, NULL, NULL)  
PG_RMGR(RM_SPGIST_ID, "SPGist", spg_redo, spg_desc, spg_xlog_startup, spg_xlog_cleanup, NULL)  
不同的rmid, info有不同的含义, 例如heap insert  
src/include/access/heapam_xlog.h  
/*  
 * WAL record definitions for heapam.c's WAL operations  
 *  
 * XLOG allows to store some information in high 4 bits of log  
 * record xl_info field.  We use 3 for opcode and one for init bit.  
 */  
#define XLOG_HEAP_INSERT                0x00  
#define XLOG_HEAP_DELETE                0x10  
#define XLOG_HEAP_UPDATE                0x20  
/* 0x030 is free, was XLOG_HEAP_MOVE */  
#define XLOG_HEAP_HOT_UPDATE    0x40  
#define XLOG_HEAP_NEWPAGE               0x50  
#define XLOG_HEAP_LOCK                  0x60  
#define XLOG_HEAP_INPLACE               0x70  
排序探针:   
src/backend/utils/sort/tuplesort.c  
/*  
 *              tuplesort_begin_xxx  
 *  
 * Initialize for a tuple sort operation.  
 *  
 * After calling tuplesort_begin, the caller should call tuplesort_putXXX  
 * zero or more times, then call tuplesort_performsort when all the tuples  
 * have been supplied.  After performsort, retrieve the tuples in sorted  
 * order by calling tuplesort_getXXX until it returns false/NULL.  (If random  
 * access was requested, rescan, markpos, and restorepos can also be called.)  
 * Call tuplesort_end to terminate the operation and release memory/disk space.  
 *  
 * Each variant of tuplesort_begin has a workMem parameter specifying the  
 * maximum number of kilobytes of RAM to use before spilling data to disk.  
 * (The normal value of this parameter is work_mem, but some callers use  
 * other values.)  Each variant also has a randomAccess parameter specifying  
 * whether the caller needs non-sequential access to the sort result.  
 */  
...  
Tuplesortstate *  
tuplesort_begin_heap(TupleDesc tupDesc,  
                                         int nkeys, AttrNumber *attNums,  
                                         Oid *sortOperators, Oid *sortCollations,  
                                         bool *nullsFirstFlags,  
                                         int workMem, bool randomAccess)  
{  
...  
        state->nKeys = nkeys;  
        TRACE_POSTGRESQL_SORT_START(HEAP_SORT,  
                                                                false,  /* no unique check */  
                                                                nkeys,  
                                                                workMem,  
                                                                randomAccess);  
...  
Tuplesortstate *  
tuplesort_begin_cluster(TupleDesc tupDesc,  
                                                Relation indexRel,  
                                                int workMem, bool randomAccess)  
{  
...  
        state->nKeys = RelationGetNumberOfAttributes(indexRel);  
        TRACE_POSTGRESQL_SORT_START(CLUSTER_SORT,  
                                                                false,  /* no unique check */  
                                                                state->nKeys,  
                                                                workMem,  
                                                                randomAccess);  
...  
Tuplesortstate *  
tuplesort_begin_index_btree(Relation heapRel,  
                                                        Relation indexRel,  
                                                        bool enforceUnique,  
                                                        int workMem, bool randomAccess)  
{  
...  
        state->nKeys = RelationGetNumberOfAttributes(indexRel);  
        TRACE_POSTGRESQL_SORT_START(INDEX_SORT,  
                                                                enforceUnique,  
                                                                state->nKeys,  
                                                                workMem,  
                                                                randomAccess);  
...  
Tuplesortstate *  
tuplesort_begin_datum(Oid datumType, Oid sortOperator, Oid sortCollation,  
                                          bool nullsFirstFlag,  
                                          int workMem, bool randomAccess)  
{  
...  
        state->nKeys = 1;                       /* always a one-column sort */  
        TRACE_POSTGRESQL_SORT_START(DATUM_SORT,  
                                                                false,  /* no unique check */  
                                                                1,  
                                                                workMem,  
                                                                randomAccess);  
...  
/*  
 * tuplesort_end  
 *  
 *      Release resources and clean up.  
 *  
 * NOTE: after calling this, any pointers returned by tuplesort_getXXX are  
 * pointing to garbage.  Be careful not to attempt to use or free such  
 * pointers afterwards!  
 */  
void  
tuplesort_end(Tuplesortstate *state)  
{  
...  
#ifdef TRACE_SORT  
        if (trace_sort)  
        {  
                if (state->tapeset)  
                        elog(LOG, "external sort ended, %ld disk blocks used: %s",  
                                 spaceUsed, pg_rusage_show(&state->ru_start));  
                else  
                        elog(LOG, "internal sort ended, %ld KB used: %s",  
                                 spaceUsed, pg_rusage_show(&state->ru_start));  
        }  
        TRACE_POSTGRESQL_SORT_DONE(state->tapeset != NULL, spaceUsed);  
#else  
        /*  
         * If you disabled TRACE_SORT, you can still probe sort__done, but you  
         * ain't getting space-used stats.  
         */  
        TRACE_POSTGRESQL_SORT_DONE(state->tapeset != NULL, 0L);  
排序类型定义  
src/backend/utils/sort/tuplesort.c  
/* sort-type codes for sort__start probes */  
#define HEAP_SORT               0  
#define INDEX_SORT              1  
#define DATUM_SORT              2  
#define CLUSTER_SORT    3  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")