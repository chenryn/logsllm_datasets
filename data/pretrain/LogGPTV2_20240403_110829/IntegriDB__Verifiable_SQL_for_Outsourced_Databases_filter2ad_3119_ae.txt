dimensional range queries.
Setup time. Figure 7a shows the setup time of INTEGRIDB on
databases of different sizes. As shown in the ﬁgure, the setup time
grows linearly with the total number of rows in all the tables in the
database. In particular, setup takes about 4s for two tables with 100
rows and 5 columns each, and 3,000s for two tables with 100,000
rows and 5 columns each. The setup time also grows quadratically
with the number of columns in a table; in practice (as observed
with the TPC-H dataset), however, the number of columns tends to
be small and the setup time is acceptable in this case. We remark
further that setup is only done once, after which arbitrarily many
queries can be supported.
Update time. As shown in Figure 7b, updates in INTEGRIDB are
very efﬁcient, e.g., it takes only 0.9s to insert a row into a table with
100,000 rows and 9 columns. As indicated in the ﬁgure, the update
time grows logarithmically with the number of rows in the table.
Join queries. We run a JOIN query on two tables and report the
performance in Table 3. Both tables are of the same size, with
the number of columns set to 10 and the number of rows n vary-
ing from 100 to 100,000. There are duplicates in the columns to
join. We choose the query such that result always has precisely 100
rows. As shown in Table 3, although the prover time grows linearly
with the sizes of the tables to join, the veriﬁcation time remains
unchanged. (Although the asymptotic complexity of veriﬁcation
grows logarithmically with n, in our experiments the running time
is dominated by the costs of verifying the set intersection, which
has complexity independent of n.) In particular, it only takes 45ms
to verify a join query on two tables with 100,000 rows each.
As shown in Table 3, proofs are only a few KBs, and their size
grows logarithmically with n as expected. For example, the proof
is only 27.97KB for a JOIN query on two tables of 100,000 rows
by 10 columns, which is 4MB each if elements are 4 byte inte-
gers. This is a big improvement compared to prior tree-based and
signature-based approaches, where the proof size could be even
larger than the original database.
102103104105n(numberofrows)101102103104Time(s)m=3m=5m=7m=9102103104105n(numberofrows)02004006008001000Time(ms)m=3m=5m=7m=9102103104105n(numberofrows)10−1100101102103104Time(s)Multiranged=10Multiranged=8Multiranged=6Sumonmultirange102103104105n(numberofrows)050100150200250300350400Time(ms)Multiranged=10Multiranged=8Multiranged=6SumonmultirangeTable 3: A JOIN query on two tables, each with the same number
of rows and 10 columns. The result always has 100 rows.
number
of rows
100
1,000
10,000
100,000
prover
time
0.041s
1.38s
15.7s
168s
proof
size
11.97KB
16.77KB
23.17KB
27.97KB
veriﬁcation
time
40.7ms
45.2ms
45.3ms
45.4ms
Multidimensional range queries. Figure 8 shows the prover time
and the veriﬁcation time for range queries of different dimensions
on tables of different sizes, where the size of the result is also ﬁxed
to 100 matches. As shown in Figure 8a, the prover time grows
linearly with the number of rows in the table and the number of
dimensions. It takes around 5000s to generate the proof of a 10-
dimensional range query on a table of 100,000 rows.
Figure 8b shows that the veriﬁcation time grows logarithmically
with the number of rows in the table and linearly with the number
of dimensions in the query. It takes less than 200ms to verify the
result of a 6-dimensional range query on a table of 100,000 rows,
and around 400ms to verify a 10-dimensional range query on the
same table. The corresponding proof sizes are 135KB and 251KB,
both signiﬁcantly smaller than the size of the table.
Our veriﬁcation times for range queries are worse than those
in [33], as we introduce a logarithmic overhead. However, our ver-
iﬁcation times are still good in practice, while we improve on the
time for updates by orders of magnitude.
(Nested) sum queries. We run a sum query on the result of a 3-
dimensional range query. There is no duplicate in the column to
sum. We ﬁx the size of the table to 100,000 rows and 10 columns,
but vary the size of the result of the range query (i.e., the size of
the column to sum) from 10 to 100,000. As shown in Figure 8a,
the prover time grows slightly with the size of the intermediate re-
sult. This is because the prover time is dominated by the multi-
dimensional range query, which does not change as the szie of the
table is the same. In particular, it only takes 760ms to generate the
proof for the sum on a column with 100,000 elements. Moreover,
Figure 8b shows that the veriﬁcation time does not change with the
size of the intermediate result, and it only takes around 60ms to ver-
ify the sum on a column with 100,000 elements and the proof size
is only 45KB. In prior work, the entire intermediate result would
be sent to the client, who would then compute the sum by itself.
7.3 Comparison with Generic Schemes
We compare INTEGRIDB to two generic systems for veriﬁable
computation (VC): libsnark11, an efﬁcient circuit-based VC sys-
tem used in [4], and SNARKs for C [2], an efﬁcient RAM-based
VC system. For libsnark, we wrote SQL queries in C, compiled
them to a circuit, and ran the VC system on the resulting circuits.
Since there is no publicly available code for SNARKs for C, we
estimate the performance on a query by ﬁrst expressing the query
in TinyRAM and then using this to determine the three parameters
that affect performance: the number of instructions (L), the num-
ber of cycles (T), and the size of the input and output (N). We then
used those parameters along with [4, Fig.˜9] to estimate the running
time. Note that libsnark (and circuit-based VC generally) does not
support updates; we were unable to estimate the update time for
SNARKs for C.
11See https://github.com/scipr-lab/libsnark.
For generic VC systems, the database would be hardcoded in a
program that takes SQL queries as input and outputs the result. To
support different types of SQL queries, there must be a compiler
built in the program to interpret the query. Circuit-based VC can-
not support such a compiler efﬁciently, and it is unclear how to
implement it using RAM-based VC. Therefore, in our experiments
we use a dedicated program for each type of query. This means the
performance of generic VC systems reported here is likely better
than what they would achieve in practice.
As a representative example, we consider a sum query applied to
the result of a 10-dimensional range query, executed on a table with
10 columns and 1,000 rows. As shown in Table 4, the setup time
and prover time of INTEGRIDB are 10× faster than that of libsnark
and 100× faster than that of SNARKs for C. The proof sizes of the
generic VC systems are always of constant size, while the proof
size of INTEGRIDB in this case is 200× larger. However, proofs in
INTEGRIDB are still only a few KB, which is acceptable in prac-
tice. The veriﬁcation time of INTEGRIDB is 10× slower that in the
generic systems; however, even the result of a multidimensional
range query can be veriﬁed in under 1s in INTEGRIDB.
Table 4: Comparing with generic schemes. Table T has 10 columns
and 1,000 rows. Query is “SELECT SUM(c1) FROM T WHERE (c1
BETWEEN a1 AND b1) AND ··· AND (c10 BETWEEN a10 AND b10).”
[4, libsnark]
setup time
prover time
veriﬁcation time
proof size
update time
157.163s
328.830s
288Bytes
7ms
N/A
SNARKs
for C [2]
2000s∗
1000s∗
10ms∗
288Bytes
??
INTEGRIDB
13.878s
10.4201s
112ms
84,296Bytes
0.7s
Acknowledgments
This research was sponsored in part by NSF award #1514261 and
by the U.S. Army Research Laboratory and the U.K. Ministry of
Defence under Agreement Number W911NF-06-3-0001. The views
and conclusions in this document are those of the author(s) and
should not be interpreted as representing the ofﬁcial policies, ei-
ther expressed or implied, of the U.S. Army Research Laboratory,
the U.S. Government, the U.K. Ministry of Defence, or the U.K.
Government. The U.S. and U.K. Governments are authorized to re-
produce and distribute reprints for Government purposes notwith-
standing any copyright notation hereon.
8. REFERENCES
[1] S. Bajaj and R. Sion. CorrectDB: SQL engine with practical
query authentication. Proceedings of the VLDB Endowment,
6(7):529–540, 2013.
[2] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and
M. Virza. SNARKs for C: Verifying program executions
succinctly and in zero knowledge. In Crypto, pages 90–108,
2013.
[3] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Scalable
zero knowledge via cycles of elliptic curves. In Crypto,
pages 276–294. Springer, 2014.
[4] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Succinct
non-interactive zero knowledge for a Von Neumann
architecture. In USENIX Security, 2014.
[5] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. From
extractable collision resistance to succinct non-interactive
arguments of knowledge, and back again. In ITCS, pages
326–349, 2012.
[6] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. From
extractable collision resistance to succinct non-interactive
arguments of knowledge, and back again. In ITCS, pages
326–349, 2012.
[7] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. Recursive
composition and bootstrapping for SNARKs and
proof-carrying data. In STOC, pages 111–120, 2013.
[8] N. Bitansky, A. Chiesa, Y. Ishai, R. Ostrovsky, and
O. Paneth. Succinct non-interactive arguments via linear
interactive proofs. In TCC, pages 315–333, 2013.
[9] D. Boneh and X. Boyen. Short signatures without random
oracles and the SDH assumption in bilinear groups. Journal
of Cryptology, 21(2):149–177, 2008.
[10] B. Braun, A. J. Feldman, Z. Ren, S. T. V. Setty, A. J.
Blumberg, and M. Walﬁsh. Verifying computations with
state. In SOSP, pages 341–357, 2013.
[11] R. Canetti, O. Paneth, D. Papadopoulos, and
N. Triandopoulos. Veriﬁable set operations over outsourced
databases. In PKC, pages 113–130, 2014.
[12] W. Cheng, H. Pang, and K.-L. Tan. Authenticating
multi-dimensional query results in data publishing. In DAS,
pages 60–73, 2006.
[13] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.
Introduction to Algorithms, 3rd edition). MIT Press, 2009.
[14] C. Costello, C. Fournet, J. Howell, M. Kohlweiss, B. Kreuter,
M. Naehrig, B. Parno, and S. Zahur. Geppetto: Versatile
veriﬁable computation. ePrint 2014.
[15] P. Devanbu, M. Gertz, C. Martel, and S. Stubblebine.
Authentic data publication over the internet. J. Computer
Security, 11(3):291–314, 2003.
[16] R. Gennaro, C. Gentry, and B. Parno. Non-interactive
veriﬁable computing: Outsourcing computation to untrusted
workers. In Crypto, pages 465–482, 2010.
[17] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic
span programs and succinct NIZKs without PCPs. In
Eurocrypt, pages 626–645, 2013.
[18] M. T. Goodrich, C. Papamanthou, and R. Tamassia. On the
cost of persistence and authentication in skip lists. In
Experimental Algorithms, pages 94–107, 2007.
[19] L. Hu, W.-S. Ku, S. Bakiras, and C. Shahabi. Verifying
spatial queries using Voronoi neighbors. In SIGSPATIAL
GIS, pages 350–359, 2010.
[20] F. Li, M. Hadjieleftheriou, G. Kollios, and L. Reyzin.
Dynamic authenticated index structures for outsourced
databases. In SIGMOD, pages 121–132, 2006.
[21] F. Li, M. Hadjieleftheriou, G. Kollios, and L. Reyzin.
Authenticated index structures for aggregation queries. ACM
TISSEC, 13(4):32, 2010.
[22] X. Lin, J. Xu, and H. Hu. Authentication of location-based
skyline queries. In CIKM, pages 1583–1588, 2011.
[23] C. Martel, G. Nuckolls, P. Devanbu, M. Gertz, A. Kwong,
and S. G. Stubblebine. A general model for authenticated
data structures. Algorithmica, 39(1):21–41, 2004.
[24] R. C. Merkle. A certiﬁed digital signature. In Crypto, pages
218–238, 1990.
[25] A. Miller, M. Hicks, J. Katz, and E. Shi. Authenticated data
structures, generically. In POPL, pages 411–424, 2014.
[26] E. Mykletun, M. Narasimha, and G. Tsudik. Signature
bouquets: Immutability for aggregated/condensed signatures.
In ESORICS, pages 160–176, 2004.
[27] E. Mykletun, M. Narasimha, and G. Tsudik. Authentication
and integrity in outsourced databases. ACM Trans. on
Storage, 2(2):107–138, 2006.
[28] M. Narasimha and G. Tsudik. Dsac: integrity for outsourced
databases with signature aggregation and chaining. In CIKM,
pages 235–236, 2005.
[29] L. Nguyen. Accumulators from bilinear pairings and
applications. In CT-RSA, pages 275–292. Springer, 2005.
[30] H. Pang, A. Jain, K. Ramamritham, and K.-L. Tan. Verifying
completeness of relational query results in data publishing.
In SIGMOD, pages 407–418, 2005.
[31] H. Pang and K.-L. Tan. Authenticating query results in edge
computing. In ICDE, pages 560–571, 2004.
[32] H. Pang, J. Zhang, and K. Mouratidis. Scalable veriﬁcation
for outsourced dynamic databases. Proceedings of the VLDB
Endowment, 2(1):802–813, 2009.
[33] D. Papadopoulos, S. Papadopoulos, and N. Triandopoulos.
Taking authenticated range queries to arbitrary dimensions.
In CCS, pages 819–830, 2014.
[34] D. Papadopoulos, C. Papamanthou, R. Tamassia, and
N. Triandopoulos. Practical authenticated pattern matching
with optimal proof size. Proceedings of the VLDB
Endowment, 8(7):750–761, 2015.
[35] S. Papadopoulos, D. Papadias, W. Cheng, and K.-L. Tan.
Separating authentication from query execution in
outsourced databases. In ICDE, pages 1148–1151, 2009.
[36] C. Papamanthou, E. Shi, R. Tamassia, and K. Yi. Streaming
authenticated data structures. In Eurocrypt, pages 353–370,
2013.
[37] C. Papamanthou, R. Tamassia, and N. Triandopoulos.
Optimal veriﬁcation of operations on dynamic sets. In
Crypto, pages 91–110, 2011.
[38] B. Parno, J. Howell, C. Gentry, and M. Raykova. Pinocchio:
Nearly practical veriﬁable computation. In IEEE S & P,
pages 238–252, 2013.
[39] S. T. V. Setty, B. Braun, V. Vu, A. J. Blumberg, B. Parno, and
M. Walﬁsh. Resolving the conﬂict between generality and
plausibility in veriﬁed computation. In EuroSys, pages
71–84, 2013.
[40] S. T. V. Setty, R. McPherson, A. J. Blumberg, and
M. Walﬁsh. Making argument systems for outsourced
computation practical (sometimes). In NDSS, 2012.
[41] S. Singh and S. Prabhakar. Ensuring correctness over
untrusted private database. In EDBT, 2008.
[42] R. Tamassia. Authenticated data structures. In ESA, pages
2–5, 2003.
[43] V. Vu, S. T. V. Setty, A. J. Blumberg, and M. Walﬁsh. A
hybrid architecture for interactive veriﬁable computation. In
IEEE S & P, pages 223–237, 2013.
[44] Y. Yang, D. Papadias, S. Papadopoulos, and P. Kalnis.
Authenticated join processing in outsourced databases. In
SIGMOD, pages 5–18, 2009.
[45] Y. Yang, S. Papadopoulos, D. Papadias, and G. Kollios.
Authenticated indexing for outsourced spatial databases. The
VLDB Journal, 18(3):631–648, 2009.
[46] Z. Yang, S. Gao, J. Xu, and B. Choi. Authentication of range
query results in MapReduce environments. In CloudDB,
2011.