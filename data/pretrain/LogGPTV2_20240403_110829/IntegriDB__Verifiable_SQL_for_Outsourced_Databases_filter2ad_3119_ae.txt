### Dimensional Range Queries

#### Setup Time
Figure 7a illustrates the setup time for INTEGRIDB on databases of varying sizes. The setup time increases linearly with the total number of rows across all tables in the database. Specifically, for two tables each containing 100 rows and 5 columns, the setup time is approximately 4 seconds. For two tables each with 100,000 rows and 5 columns, the setup time is around 3,000 seconds. Additionally, the setup time grows quadratically with the number of columns in a table. However, in practical scenarios (e.g., with the TPC-H dataset), the number of columns is typically small, making the setup time acceptable. It is important to note that the setup process is a one-time operation, after which the system can support an unlimited number of queries.

#### Update Time
As shown in Figure 7b, updates in INTEGRIDB are highly efficient. For instance, inserting a row into a table with 100,000 rows and 9 columns takes only 0.9 seconds. The update time increases logarithmically with the number of rows in the table.

#### Join Queries
We conducted a JOIN query on two tables and reported the performance in Table 3. Both tables have the same size, with 10 columns and the number of rows (n) ranging from 100 to 100,000. Duplicates were present in the columns used for the join. The query was designed to always return exactly 100 rows. As indicated in Table 3, while the prover time grows linearly with the table sizes, the verification time remains constant. Although the asymptotic complexity of verification grows logarithmically with n, in our experiments, the running time is dominated by the cost of verifying the set intersection, which is independent of n. For example, it takes only 45 milliseconds to verify a join query on two tables, each with 100,000 rows.

Table 3 also shows that the proof sizes are relatively small, growing logarithmically with n. For a JOIN query on two tables, each with 100,000 rows and 10 columns, the proof size is only 27.97 KB. This is a significant improvement over previous tree-based and signature-based approaches, where the proof size could be larger than the original database.

| Number of Rows | Prover Time | Proof Size | Verification Time |
|-----------------|-------------|------------|-------------------|
| 100             | 0.041s      | 11.97KB    | 40.7ms            |
| 1,000           | 1.38s       | 16.77KB    | 45.2ms            |
| 10,000          | 15.7s       | 23.17KB    | 45.3ms            |
| 100,000         | 168s        | 27.97KB    | 45.4ms            |

#### Multidimensional Range Queries
Figure 8 depicts the prover and verification times for range queries of different dimensions on tables of various sizes, with the result size fixed at 100 matches. As shown in Figure 8a, the prover time increases linearly with the number of rows and the number of dimensions. Generating the proof for a 10-dimensional range query on a table with 100,000 rows takes around 5,000 seconds.

Figure 8b indicates that the verification time grows logarithmically with the number of rows and linearly with the number of dimensions. Verifying the result of a 6-dimensional range query on a table with 100,000 rows takes less than 200 milliseconds, while verifying a 10-dimensional range query on the same table takes around 400 milliseconds. The corresponding proof sizes are 135 KB and 251 KB, both significantly smaller than the table size.

While our verification times for range queries are worse than those in [33] due to a logarithmic overhead, they remain practical. Additionally, we achieve orders of magnitude better update times.

#### (Nested) Sum Queries
We executed a sum query on the result of a 3-dimensional range query, ensuring no duplicates in the column to be summed. The table size was fixed at 100,000 rows and 10 columns, but the size of the range query result (i.e., the column to be summed) varied from 10 to 100,000. As shown in Figure 8a, the prover time increases slightly with the size of the intermediate result, as the prover time is dominated by the multidimensional range query, which does not change with the table size. Specifically, generating the proof for the sum on a column with 100,000 elements takes only 760 milliseconds. Furthermore, Figure 8b shows that the verification time remains constant, taking around 60 milliseconds to verify the sum on a column with 100,000 elements, with a proof size of only 45 KB. In prior work, the entire intermediate result would be sent to the client for computation.

### Comparison with Generic Schemes
We compared INTEGRIDB with two generic systems for verifiable computation (VC): libsnark, an efficient circuit-based VC system used in [4], and SNARKs for C [2], an efficient RAM-based VC system. For libsnark, we wrote SQL queries in C, compiled them to circuits, and ran the VC system on the resulting circuits. Since there is no publicly available code for SNARKs for C, we estimated the performance by expressing the query in TinyRAM and using this to determine the parameters affecting performance: the number of instructions (L), the number of cycles (T), and the size of the input and output (N). We then used these parameters along with [4, Fig. 9] to estimate the running time. Note that libsnark (and circuit-based VC generally) does not support updates; we were unable to estimate the update time for SNARKs for C.

For generic VC systems, the database is hardcoded in a program that takes SQL queries as input and outputs the result. To support different types of SQL queries, a compiler must be built into the program to interpret the query. Circuit-based VC cannot efficiently support such a compiler, and it is unclear how to implement it using RAM-based VC. Therefore, in our experiments, we used a dedicated program for each type of query. This means the performance of generic VC systems reported here is likely better than what they would achieve in practice.

As a representative example, we considered a sum query applied to the result of a 10-dimensional range query, executed on a table with 10 columns and 1,000 rows. As shown in Table 4, the setup and prover times of INTEGRIDB are 10 times faster than libsnark and 100 times faster than SNARKs for C. The proof sizes of the generic VC systems are constant, while the proof size of INTEGRIDB in this case is 200 times larger. However, proofs in INTEGRIDB are still only a few KB, which is acceptable in practice. The verification time of INTEGRIDB is 10 times slower than in the generic systems; however, even the result of a multidimensional range query can be verified in under 1 second in INTEGRIDB.

| System | Setup Time | Prover Time | Verification Time | Proof Size | Update Time |
|--------|------------|-------------|-------------------|------------|-------------|
| [4, libsnark] | 157.163s | 328.830s | 288Bytes | 7ms | N/A |
| SNARKs for C [2] | 2000s* | 1000s* | 10ms* | 288Bytes | ?? |
| INTEGRIDB | 13.878s | 10.4201s | 112ms | 84,296Bytes | 0.7s |

### Acknowledgments
This research was partially supported by NSF award #1514261 and by the U.S. Army Research Laboratory and the U.K. Ministry of Defence under Agreement Number W911NF-06-3-0001. The views and conclusions in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. Army Research Laboratory, the U.S. Government, the U.K. Ministry of Defence, or the U.K. Government. The U.S. and U.K. Governments are authorized to reproduce and distribute reprints for government purposes, notwithstanding any copyright notation hereon.

### References
[References listed as provided]

This optimized version aims to improve clarity, coherence, and professionalism by reorganizing and refining the text, providing more context, and ensuring consistent formatting.