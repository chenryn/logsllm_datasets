I'm using pandas 0.5.0 with python 2.7 on archlinux.  
This example file seems pretty standard and it opens well in Libreoffice:
http://dl.dropbox.com/u/40028/countrycode.csv
    import pandas
    cc = pandas.read_csv('countrycode.csv', index_col=1)
    cc
    ERROR: An unexpected error occurred while tokenizing input
    The following traceback may be corrupted or invalid
    The error message is: ('EOF in multi-line statement', (1224, 0))
    Out[31]: ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    /[path/to/file/anonymized/manually/by/me]/ in ()
    ----> 1 cc
    /usr/lib/python2.7/site-packages/IPython/core/displayhook.py in __call__(self, result)
        300             self.start_displayhook()
        301             self.write_output_prompt()
    --> 302             format_dict = self.compute_format_data(result)
        303             self.write_format_data(format_dict)
        304             self.update_user_ns(result)
    /usr/lib/python2.7/site-packages/IPython/core/displayhook.py in compute_format_data(self, result)
        213             MIME type representation of the object.
        214         """
    --> 215         return self.shell.display_formatter.format(result)
        216 
        217     def write_format_data(self, format_dict):
    /usr/lib/python2.7/site-packages/IPython/core/formatters.py in format(self, obj, include, exclude)
        120                     continue
        121             try:
    --> 122                 data = formatter(obj)
        123             except:
        124                 # FIXME: log the exception
    /usr/lib/python2.7/site-packages/IPython/core/formatters.py in __call__(self, obj)
        441                 type_pprinters=self.type_printers,
        442                 deferred_pprinters=self.deferred_printers)
    --> 443             printer.pretty(obj)
        444             printer.flush()
        445             return stream.getvalue()
    /usr/lib/python2.7/site-packages/IPython/lib/pretty.py in pretty(self, obj)
        349             if hasattr(obj_class, '_repr_pretty_'):
        350                 return obj_class._repr_pretty_(obj, self, cycle)
    --> 351             return _default_pprint(obj, self, cycle)
        352         finally:
        353             self.end_group()
    /usr/lib/python2.7/site-packages/IPython/lib/pretty.py in _default_pprint(obj, p, cycle)
        467     if getattr(klass, '__repr__', None) not in _baseclass_reprs:
        468         # A user-provided repr.
    --> 469         p.text(repr(obj))
        470         return
        471     p.begin_group(1, ' 265             self.to_string(buf=buf)
        266         else:
        267             self.info(buf=buf, verbose=self._verbose_info)
    /usr/lib/python2.7/site-packages/pandas/core/frame.pyc in to_string(self, buf, columns, colSpace, na_rep, formatters, float_format, sparsify, nanRep, index_names)
        569                                         float_format=float_format,
        570                                         sparsify=sparsify,
    --> 571                                         index_names=index_names)
        572 
        573         if buf is None:
    /usr/lib/python2.7/site-packages/pandas/core/frame.pyc in __init__(self, frame, buf, columns, col_space, na_rep, formatters, float_format, sparsify, index_names)
       2943         self.column_filter = frame.columns if columns is None else set(columns)
       2944 
    -> 2945         self._write_to_buffer()
       2946 
       2947     def _write_to_buffer(self):
    /usr/lib/python2.7/site-packages/pandas/core/frame.pyc in _write_to_buffer(self)
       2956         else:
       2957             # may include levels names also
    -> 2958             str_index = self._get_formatted_index()
       2959             str_columns = self._get_formatted_column_labels()
       2960 
    /usr/lib/python2.7/site-packages/pandas/core/frame.pyc in _get_formatted_index(self)
       3035                                      names=show_index_names)
       3036         else:
    -> 3037             fmt_index = [index.format(name=show_index_names)]
       3038 
       3039         adjoined = adjoin(1, *fmt_index).split('\n')
    TypeError: format() got an unexpected keyword argument 'name'