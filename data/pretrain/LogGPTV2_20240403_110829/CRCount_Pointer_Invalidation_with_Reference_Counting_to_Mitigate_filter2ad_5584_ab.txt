robust against UAF errors through an automatic mechanism
that frees an object after conﬁrming that there is no reference
to the object. Unlike the case of JAVA and C# in which garbage
collection is built into, no hint to distinguish pointers from
ordinary objects is provided by compilers in C/C++. Therefore,
Boehm-Demers-Weiser garbage collector (BDW GC) [5], a
representative garbage collector for C/C++, uses a conservative
approach that regards any pointer-size word as a potential
pointer value. Such a conservative approach may result in
memory leaks in the case of an erroneous recognition of
pointer values, although it has been reported that the problem
rarely occurs in 64-bit architectures [14]. Garbage collection
is also known to cause a non-negligible memory overhead as
it trades space for performance [13]. BDW GC works based
on dedicated APIs. Although it provides a way to automati-
cally redirect traditional C memory allocation routines to the
corresponding APIs, some porting efforts may be required for
large real-world programs, especially for C++ programs.
Smart Pointer.
To enforce safe and automatic memory
management in C++, an extended data type is provided, called
the smart pointer [2], which encapsulates a raw pointer with a
reference counter. Conceptually, a smart pointer owns one raw
pointer, meaning that it is responsible for deleting the object
referred to by its raw pointer. During program execution, it
keeps track of the reference counter through the language’s
scoping rules and deletes the referred object from the heap
when the reference counter becomes zero. The smart pointer is
similar to CRCount in that it is based on the reference counting
mechanism. However, there is a critical downside of using
smart pointers to enhance memory safety: programmers must
take full responsibility of smart pointers. In order for a legacy
C++ program to be free from UAF issues, all the raw pointers
in the program must be converted manually to smart pointers.
Unfortunately, such a complete conversion of every raw pointer
is a very time-consuming task to achieve. In fact, this is almost
impossible for legacy code unless the entire code is completely
re-written by hand from scratch. Furthermore, a smart pointer
is basically an extended data type consisting of a raw pointer
and the inline metadata, i.e., a reference counter. Unlike other
work using extended data types with disjoint metadata [23], a
UAF defense solution based on smart pointers cannot maintain
the data structure layout compatibility with the existing legacy
code.
3
Taint Tracking. Undangle [6] utilizes taint tracking [26] to
detect dangling pointers. It assigns labels to the heap pointers
created from memory allocation routines and keeps track of
how the pointer is copied through the registers and memory by
taint tracking. Later, at memory deallocation time, it checks the
labels for the pointers in the program and determine whether
the pointer is unsafe based on how much time has passed
since the pointer is created. Since it is based on dynamic
taint tracking, it can be more precise in determining pointer
locations, compared to CRCount, which relies on static type
information. However, dynamic taint tracking causes signiﬁ-
cant performance overhead. It also determines unsafe dangling
pointers based on the ad-hoc deﬁnition of a lifetime, which can
result in an undetected UAF vulnerability.
Hardware-based Approaches. There have been several at-
tempts to extend hardware architectures to handle UAFs efﬁ-
ciently. Watchdog [21] keeps disjoint metadata associated with
every pointer, propagates them through the pointer operations,
and checks the validity of the pointer upon every access.
WatchdogLite [22] provides a ﬁxed set of additional instruc-
tions coupled with compiler support to catch UAFs without
signiﬁcant hardware modiﬁcations. CHERI architecture [19]
models pointers as capabilities that include information such
as base and bound of the accessible memory region and
distinguishes them at the hardware level so that there is no
need to separately track pointers in memory as CRCount does
by the means of pointer footprinting. CHERI itself does not
have native support for preventing UAFs, but it does provide
a foundation for accurate garbage collection.
III. THREAT MODEL
We assume that the target C/C++ programs have UAF
errors. The attacker can trigger a UAF exploit by letting a
dangling pointer read/write a value from/to an object that is
allocated into the same region that the previous object referred
to by the dangling pointer was once allocated to. We do not
consider other types of memory errors such as buffer overﬂow
and type confusion. We assume that the integrity of the data
structure and algorithm of CRCount is enforced through the
security techniques that are orthogonal to CRCount [16], [15].
This assumption is consistent with previous UAF defenses
relying on additional metadata [36], [17], [40], [24].
IV.
IMPLICIT POINTER INVALIDATION
As stated in §I, the implicit pointer invalidation scheme
enables a safe, efﬁcient defense against UAF errors, but the
complications involved in reference counting hinder a wide
adoption of this scheme in legacy C/C++. In this section,
ﬁrst, we will provide an overview of how the implicit scheme
works with reference counting and then present the challenging
problems to be addressed for a successful application of the
scheme to real C/C++ code.
A. Invalidation with Reference Counting
In Listing 1, we present an example code to explain how
UAF errors are tackled by the implicit pointer invalidation
scheme coupled with the reference counters. Here, RCobj
denotes the reference count of a memory object obj. In lines
4 and 5, two heap objects, objA and objB, are created
1 struct node { struct node *next; int data; };
2 struct node *ptrA, *ptrB;
3
4 ptrA = malloc(sizeof(struct node)); // objA
5 ptrB = malloc(sizeof(struct node)); // objB
6
7 ptrB->next = ptrA;
8
9 /* code execution */
10
11 free(ptrA);
12
13 /* code execution */
14
15 ptrA = malloc(sizeof(struct node));
16 free(ptrB);
Listing 1: Code example showing the defense against UAF errors via
reference counting
and pointed to by two pointer variables, ptrA and ptrB,
respectively. At this moment, the reference count of each heap
object is set to one. Next, ptrA is assigned to ptrB->next,
and RCobjA is increased from one to two. Then,
in line
11, the free function is invoked to deallocate objA. Now,
note that RCobjA > 0 as it is still referred to by ptrA and
ptrB->next. In the explicit invalidation scheme [17], [40],
[36], both the pointers are delinked with objA by explicitly
invalidating them right after the object is deleted. However,
in the implicit invalidation scheme, the further actions inside
the free function are interrupted to leave objA undeleted,
and the pointers remain intact, linking with the object. In line
15, ptrA is reassigned to point to a newly allocated object.
In this case, without any explicit effort, ptrA is in effect
invalidated with respect to objA because of the delinking of
their reference relationship. To reﬂect this change, RCobjA is
decreased from two to one. Finally, in line 16 where objB is
freed, ptrB->next can also be considered to be implicitly
invalidated because it is no longer legitimately accessible,1 thus
being effectively delinked with objA. Now, RCobjA = 0, and
thus, the object is released and can be reused safely by the
memory allocator.
B. Reference Counting in C/C++
In the above example, we demonstrated how the implicit
invalidation scheme with reference counting can preemptively
prevent UAF errors by delaying object deletions until
the
reference counts are decreased to zero. Clearly, the prerequisite
for this scheme is ﬂawless reference counting, for which we
developed a special mechanism to keep an accurate track of
the reference relationships between the pointers and the objects
along the execution ﬂow. The reference relationship relevant
to an object is expressed by the object’s reference count which
is dynamically increased or decreased as a pointer is linked or
delinked with the object, respectively. Therefore, to accurately
monitor such incessant changes in the reference count of an
object, we need to pinpoint the moments at runtime when the
object is linked or delinked with the pointers. We say that the
referring pointers are generated or killed if the pointers are
linked or delinked with their referred objects, respectively. In
1The pointers enclosed inside a freed object can still be accessed through a
UAF vulnerability. For full security protection, these pointers must be nulliﬁed
upon freeing their enclosing object.
4
the code, a referring pointer is generated when its value is
stored in the memory, and the pointer is killed when another
value overwrites the pointer (see line 15 of Listing 1) or
the pointer goes out of scope (see line 16 of Listing 1).
In reality, however, perfect reference counting in C/C++ is
quite problematic mainly because these languages have weak
typing that places no restrictions on the type conversion of
objects. For instance, with weak typing, a subﬁeld of an
object can be interpreted as either a pointer or a non-pointer
alternatively at the time of execution, which makes it extremely
challenging to accurately capture all the generations and kills
of the pointers, and accordingly update the reference counter
of every corresponding referred object.
1 struct node { struct node *next; int data; };
2 union unode { struct node *next; int data; };
3
4 char *chunk = malloc(CHUNK_SIZE);
5 struct node *ptrA=malloc(sizeof(struct node)); //objA
6 struct node *ptrB=
(struct node *)&chunk[n*sizeof(struct node)]; //objB
7
8 union unode *ptrC=malloc(sizeof(union unode)); //objC
9
10 ptrB->next = ptrC->next = ptrA;
11
12 /* code execution */
13
14 free(ptrA);
15 ptrA = NULL;
16
17 /* code execution */
18
19 free(chunk);
20 ptrC->data = 1;
Listing 2: Code example showing the challenges in reference count-
ing in a legacy C/C++ program
Listing 2 shows the practical hurdles in precise reference
counting. For simplicity, we only consider RCobjA in the code.
There are several heap objects created in the code: objA
and objC are newly allocated by malloc while objB is
created by a type conversion of a subregion in the existing
array chunk. In line 5, by linking the pointer ptrA with
objA, RCobjA is set to one. The pointers ptrB and ptrC
are initialized to refer to objB and objC, respectively. In line
10, ptrA is assigned to ptrB->next and ptrC->next,
which results in RCobjA = 3. In line 14, the programmer wants
to delete objA when RCobjA > 0, but as mentioned earlier,
this deletion will be denied. In the next line, where ptrA
is assigned NULL, RCobjA is decremented by one. The last
two lines of the code exhibit two challenging problems per-
taining to reference counting. Firstly, when the array chunk
is deleted, RCobjA has to be decreased as objA is referred
to by a pointer, ptrB->next, which is inside the deleted
object. Unfortunately, as chunk is declared as an ordinary
array, the compiler cannot provide any information with regard
to the existence of a pointer inside at runtime. Therefore,
for correct reference counting, we need some mechanism to
separately track the location of the pointers inside chunk.
The code in line 20 presents another practical problem. Here,
when ptrC->data is set to 1, the previously stored pointer,
ptrC->next,
is simultaneously overwritten by the same
value. Therefore, according to the implicit invalidation scheme,
RCobjA should be reduced as the pointer referring to the
object has been technically killed. Here, for correct reference
5
Fig. 1: Overview of CRCount
counting, we need to analyze the code and mark the point so
that we can decrease the reference count at runtime, and we
also need to track whether the pointer is currently stored at
the location of ptrC->data at that moment.
From all these examples, we can conclude that without
a detailed tracking down of all the operations affecting the
generations and the kills of the referring pointers, the accuracy
of reference counting would be severely limited. This would in
turn damage the overall feasibility of the implicit invalidation
scheme for mitigation against UAF errors. To summarize, as
hinted by the examples, the identiﬁcation of all the pointer
generations and kills in the legacy code is prohibitively com-
plex. The failure to ﬁnd some pointer generations will result
in underestimated reference counts, inducing loopholes in the
mitigation of UAF errors. The opposite (i.e., failure to ﬁnd the
kills) will lead to overestimated counts, which, in turn, will
result in memory leaks. In the subsequent sections, we will
show how CRCount addresses this challenge.
V. DESIGN
In this section, we elaborate on the design of CRCount,
our UAF error prevention system based on implicit pointer
invalidation. First, we present a brief overview of the entire
system, and then we provide a more detailed explanation of
each component.
A. Overview
Figure 1 shows an overview of CRCount. At the core,
CRCount uses a technique called pointer footprinting (§V-B)
to overcome the challenge described in §IV. The pointer
footprinting technique tracks exactly when and where in mem-
ory the pointers to heap objects are generated and killed.
This technique is centered around a special data structure,
the pointer bitmap, that represents the exact locations of the
heap pointers scattered throughout the program memory. The
bitmap is managed by the runtime library, which keeps track
of the generations and the kills of the pointers at runtime,
and reﬂects the changes into the bitmap by setting or clearing
the corresponding bits, respectively. Invocations to the runtime
library are instrumented into the target program by CRCount’s
LLVM plugin, which utilizes a static analysis to minimize
the number of instrumentation points while preserving the
precision in tracking pointers. The idea of using the bitmap to
indicate pointer locations has been proposed in previous work
on garbage collection [27], [34]. However, unlike previous
work, with the help of the compiler instrumentation and
Instrumented binaryRuntime libraryReference countermanagementPointer bitmapmanagementPointer bitmapPointer-to-object metadata mapPointer footprintingStatic analysis &instrumentationLLVMObject metadataReference CounterSource codethe runtime library, we automatically and accurately track
down the heap pointers in the entire memory space to enable
successful mitigation of UAF errors.
CRCount depends heavily on the pointer
footprinting
technique for precise reference counting. It associates each
heap object with per-object metadata (§V-C1) that include
the reference counter for the object. Every generation or
kill of a pointer is detected and handled by the runtime
library. CRCount
takes the stored/killed pointer value and
consults with the pointer-to-object metadata map to ﬁnd and
increase/decrease the reference count of the object referred to
by the pointers (§V-C2). When the free function is called
to deallocate an object, CRCount ﬁrst checks the object’s
reference counter. If the count is zero, then CRCount lets
the function deallocate the object. Otherwise,
it halts the
function and leaves the object intact. Later, when there is
a change (either increment or decrement) in the reference
count, CRCount kicks in and checks whether the count is
zero. Finally, when the count decreases to zero, implying that
the pointers having referred to the object are all implicitly
invalidated, CRCount hands the object over to the memory
allocator, which will free and reuse the object.
B. Pointer Footprinting
To enable the precise tracking of heap pointers, CRCount
uses the pointer footprinting technique, which is centered
around the pointer bitmap data structure that enables us to
efﬁciently locate all the pointers in the memory that refers to
the heap objects. The pointer bitmap is basically a shadow
memory for the entire virtual memory space, which marks
the locations where the heap pointers are stored. We assume
that pointers are aligned to an 8-byte boundary, which would
be true in most cases as pointer-type variables are typically