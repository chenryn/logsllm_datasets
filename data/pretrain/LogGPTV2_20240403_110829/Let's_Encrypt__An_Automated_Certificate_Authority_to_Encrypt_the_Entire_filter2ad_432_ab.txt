had to figure out how to configure their server with the certificate
and the appropriate trust chain. All these steps typically involved
esoteric commands, and in practice many users blindly followed a
tutorial. Even when a CA issued a certificate immediately, usability
studies show that it would often take administrators over an hour
to install the certificate on their servers [57]. These tasks had to be
repeated every year or so when the certificate expired.
OV and EV were intended to provide greater protection for
site visitors [29]. However, research has found that users do not
notice or understand the distinction between validation levels [96],
negating the potential security benefit. Consequently, Chrome [73],
Besides being difficult, manual HTTPS server setup carries the
risk of introducing security vulnerabilities through misconfigura-
tion. A study in 2013 found that only 45% of certificates on HTTPS
servers were correctly configured, while about 13% were config-
ured so poorly that their corresponding Web sites were completely
inaccessible for some clients [36].
Certificate renewals present additional challenges. Expired cer-
tificates can cause browser warnings for site visitors, so adminis-
trators run the risk of driving away customer traffic if they fail to
replace old certificates before they expire. Prior to Let’s Encrypt,
renewal lapse occurred for about 20% of trusted certificates [36].
Let’s Encrypt seeks to overcome all these problems through
automation. We designed the ACME protocol (Section 4) to allow
software agents on HTTPS servers to obtain, provision, and renew
certificates automatically, with no user interaction. Third-party
contributors have created a rich ecosystem of ACME clients that
automate HTTPS deployment on systems ranging from IoT devices
to traditional Web servers to large hosting platforms (see Section 6).
To further promote automation, Let’s Encrypt limits certificate
lifetimes to 90 days, rather than one or multiple years as CAs have
traditionally offered. This is short enough to strongly encourage
operators to automate things (few people will want to manually re-
new certificates every quarter) but long enough to allow for manual
renewal if necessary in a particular deployment. Shorter certificate
lifetimes potentially enhance security, since they lessen reliance
on certificate revocation in the event of key compromise [97], and
some clients do not check revocation status [61].
2.3 CA Validation Practices
Validating the identity of certificate subjects is one of the main jobs
of any CA. The CA/Browser Forum—a voluntary consortium of CAs
and browser and platform vendors that works to standardize Web
PKI ecosystem rules—defines several categories of validation [28].
For “Domain Validation” (DV), CAs confirm that the requester
has control over the domain name to be listed in the certificate.
For “Organization Validation” (OV), CAs verify public business
registration documents for the requesting organization. “Extended
Validation” (EV) takes this process even further, with more intensive
checks of proper ownership of identifiers.
OV and EV require manual submission and verification of iden-
tity documents, which significantly slows the issuance process [29].
Some CAs limit useful certificate features (such as wildcard names)
to these stricter and more expensive validation levels [43].
Firefox [94], and Safari [53] have or will soon drop UI distinctions
between validation levels. Moreover, Web clients treat all valid
certificates for a given domain, whatever the validation level, as
the same security context [21], further undermining the security
benefit of OV and EV certificates.
Let’s Encrypt offers only domain validation, since only DV can
be completely automated and the security benefits of OV and EV are
unclear. The CA provides both regular and wildcard DV certificates,
and supports several methods of verifying control of a domain (see
Section 4) to cover a wide spectrum of use cases.
3 ISRG: THE HOME OF LET’S ENCRYPT
Creating an automated CA that could scale to the size of the Web re-
quired more than building software and protocols. We also needed
to establish an organization to operate the CA, develop processes
that would provide high security and high availability, find a sus-
tainable funding model, and become a trusted issuer so that our
certificates would be accepted by major browsers and platforms. In
this section, we discuss how ISRG, the organization that runs Let’s
Encrypt, came to be, and how it accomplished these goals.
3.1 History and Organizational Structure
Let’s Encrypt was created through the merging of two simultaneous
efforts to build a fully automated certificate authority. In 2012, a
group led by Alex Halderman at the University of Michigan and
Peter Eckersley at EFF was developing a protocol for automatically
issuing and renewing certificates. Simultaneously, a team at Mozilla
led by Josh Aas and Eric Rescorla was working on creating a free
and automated certificate authority. The groups learned of each
other’s efforts and joined forces in May 2013.
That month, they formed the Internet Security Research Group
(ISRG), a nonprofit corporation, to be the legal entity operating
Let’s Encrypt. It was decided that ISRG should be a nonprofit be-
cause nonprofit governance requirements—such as no profit motive,
no ownership, relatively high transparency, and a public service
mission—would help ensure that the organization served the public
in a stable and trustworthy manner over the long term. Josh Aas
has served as ISRG’s Executive Director since its founding.
Initially, ISRG had no full-time staff. Richard Barnes of Mozilla,
Jacob Hoffman-Andrews of EFF, and Jeff Hodges (under contract
with ISRG) began developing Let’s Encrypt’s CA software stack.
Josh Aas and J.C. Jones, both with Mozilla at the time, led infras-
tructure development with assistance from Cisco and IdenTrust
engineers. ISRG’s first full-time employee, Dan Jeffery, joined in
April 2015 to help prepare the CA’s infrastructure for launch. Simul-
taneously, James Kasten, Peter Eckersley, and Seth Schoen worked
on the initial ACME client (which would eventually become Cert-
bot) while at the University of Michigan and EFF. Kevin Dick of
Right Side Capital Management, John Hou of Hou & Villery, and
Josh Aas constituted the team responsible for completing a trusted
root partnership deal and signing initial sponsors.
Let’s Encrypt was publicly announced on November 18, 2014 [1],
issued its first browser-trusted certificate on September 14, 2015 [4],
and began providing service to the public on December 3, 2015 [2].
As of May 2019, ISRG had 13 full-time staff: six site reliability
engineers, three software developers, and four administrative staff.
Session 10E: CertificatesCCS ’19, November 11–15, 2019, London, United Kingdom2475For a new CAs to be widely trusted at launch, it either needs to
purchase an established, already trusted root, or get cross-signed
by a trusted authority. A “cross-signed” intermediate CA certificate
is signed by another CA. If the other CA is already widely trusted
by root programs, this makes the cross-signed intermediate, and
any certificates it issues, immediately widely trusted as well.
ISRG initially investigated purchasing an existing root, as this
would provide the greatest flexibility. The estimated price for a root
at the time was $1–8M, depending on remaining lifetime, extent
of trust, cryptographic algorithm type, and attached liabilities. We
made a small number of offers, but never completed an acquisition.
In October 2014, ISRG executed a long-term cross-signing agree-
ment with IdenTrust [3], a root authority trusted by Mozilla, Apple,
and Microsoft [63]. IdenTrust was attractive as a partner because it
had a sufficiently trusted root, offered cross-signing, and supported
Let’s Encrypt’s mission. IdenTrust also offered WebTrust-compliant
datacenter environments, which Let’s Encrypt needed to host its
servers and gained access to as part of the agreement.
ISRG has since established a root trust anchor, which was ac-
cepted into all major browser and platform root programs as of
August 2018 [6] and is gradually becoming widely deployed. Start-
ing in July 2020, Let’s Encrypt will default to issuing certificates
with a trust chain leading to the ISRG root instead of IdenTrust [7].
3.4 Legal Environment
As a U.S.-based entity, ISRG endeavors to craft policies that comply
with U.S. law, including applicable sanctions. Although service is
not provided to people or entities on the U.S. Treasury Department’s
Specially Designated Nationals (SDN) list [98], and service to a num-
ber of governments is limited as a result of sanctions, Let’s Encrypt
serves the vast majority of people and entities in every country.
ISRG occasionally receives requests from law enforcement and
relies on legal counsel to determine whether or not the requests are
legitimate, in whole or in part. It publishes a Legal Transparency
Report every six months in order to provide information about
the numbers of requests received [66]. Let’s Encrypt has never
been compelled by law enforcement, or any other entity, to issue a
certificate (e.g., to facilitate HTTPS interception attacks). The Web
security community generally recognizes this threat, along with
the risk of CA compromise, as important motivations [88] for the
adoption of Certificate Transparency (CT) [62]. Let’s Encrypt has
always fully participated in CT.
4 THE ACME PROTOCOL
A central element in the creation of Let’s Encrypt was the Au-
tomated Certificate Management Environment (ACME) protocol.
Unlike prior certificate management protocols (e.g., CMP, CMC,
and EST [10, 77, 82]), ACME is tailored to the needs of the Web PKI
and was designed with scalable, automated issuance as a core goal.
Let’s Encrypt launched with an initial version of the protocol
that our team designed internally [55]. This initial version became
the basis for the IETF ACME working group, which published a
final version as RFC 8555 [20]. The initial and final versions are
sometimes referred to as “ACMEv1” and “ACMEv2”, respectively.
In this section we will use “ACME” to refer to the final protocol
version (v2) unless otherwise specified.
Figure 1: ISRG operating budget and effective cost per certificate.
Automation has allowed Let’s Encrypt to keep operating costs stable even
in the face of tremendous growth in certificate issuance since its launch.
Site reliability engineers are responsible for the CA’s infrastructure
and are the only staff with access to systems that issue certificates.
Administrative staff work on fundraising, finance, communication,
management, legal, and other organizational administration tasks.
Software developers work primarily on the CA’s Boulder software,
while also contributing back to various open source projects. Since
launch, the CA has regularly introduced new features, including
IPv6 support (July 2016), internationalized domain name support
(October 2016), ACMEv2 support (March 2018), and wildcard cer-
tificate support (March 2018).
ISRG is governed by a board of directors, which meets quarterly.
As of September 2019, there are ten directors, including representa-
tives from public benefit entities, educational institutions, and major
financial contributors, as well as the ISRG Executive Director [54].
3.2 Budget and Fundraising
ISRG spent approximately $3.0M in 2018 and is projected to spend
approximately $3.3M in 2019. (These figures exclude money set
aside as cash reserves and do not reflect in-kind contributions,
which significantly reduce costs for third-party services and host-
ing.) Staffing is ISRG’s largest category of expense, accounting for
about two-thirds of the budget. Daily CA operations are heavily
automated, so most staffing costs go towards software engineer-
ing and systems administration of the automated infrastructure.
This has allowed ISRG to maintain stable operating costs despite
enormous growth in certificate issuance, as shown in Figure 1.
Initially, ISRG was funded almost entirely through large dona-
tions from technology companies. In late 2014, it secured financial
commitments from Akamai, Cisco, EFF, and Mozilla, allowing the
organization to purchase equipment, secure hosting contracts, and
pay initial staff. Today, ISRG has more diverse funding sources; in
2018 it received 83% of its funding from corporate sponsors, 14%
from grants and major gifts, and 3% from individual giving.
3.3 Becoming a Trusted Issuer
One of the greatest hurdles to establishing Let’s Encrypt was acquir-
ing the ability to issue certificates that would be trusted by existing
clients. New CAs can apply for inclusion in browser and OS root
programs, but the time from acceptance of new roots to broad client
deployment is prohibitively long. For example, years may elapse
between when new roots are added to Google’s root program and
when they are available on the majority of Android devices [100].
2016201720182019 (est.)0.010.020.030.040.05Cost per Certificate (USD)2.02.53.0Budget (Millions USD)Session 10E: CertificatesCCS ’19, November 11–15, 2019, London, United Kingdom24764.1 Protocol Overview
Earlier certificate management protocols presume pre-existing re-
lationships between the certificate applicant and the CA, such as
pre-shared secrets. In contrast, ACME provides tools to automate
the entire relationship between a CA and a certificate applicant.
A typical interaction is illustrated in Figure 2 and includes the
following tasks:
Account management. CAs need to track applicants’ identities
in order to know which applicants are allowed to request issuance
for which identifiers. ACME provides a minimal notion of an ac-
count, which is essentially a key-pair that the applicant registers
with the CA, together with some optional metadata. The focus of
ACME on automation enables the use of digital signatures to authen-
ticate applicants, as opposed to less secure means like pre-shared
keys or passwords. In addition to basic functions like account regis-
tration and account key rotation, ACME also provides an external
account binding feature, by which CAs can associate a bare-bones
ACME account with a richer account in some other system.
Authorization and identifier validation. Before a CA can issue
a certificate containing a given identifier to a given applicant, it
must verify that applicant’s authority to represent that identifier. In
the Web PKI, this is typically done by the CA requiring the applicant
to demonstrates control of the identifier. ACME has a notion of an
authorization being bound to an account, by virtue of the account
holder completing challenges that validate control of the identifier.
It supports challenges that implement the most commonly used and
easily automated validation methods, as discussed in Section 4.2.
Certificate request and issuance. Once an ACME client has reg-
istered an account with a CA’s ACME server, it can request that a
certificate be issued by sending the CA a description of the desired
certificate: what identifiers, what lifetime, etc. Although a PKCS#10
Certificate Signing Request (CSR) [72] must still be sent by the
client, the request description is encoded in a JSON object, since the
CSR format is unable to express, for example, a request for specific
notBefore and notAfter values. This request creates an order that
is used to track the process of authorizing and issuing the certificate.
The CA populates the order with the authorizations that the CA
requires the client to complete before it will issue the certificate.
In most cases, authorizations will correspond to identifiers—
issuing for example.com will require demonstrating control over
example.com. However, this model also allows for more exotic
cases such as wildcard certificates, where validation cannot be done
directly on the identifier in the certificate. Let’s Encrypt’s policy,
for example, is that a wildcard certificate (e.g., for *.example.com)
requires proving control over the base domain name (example.com)
using a specific challenge type.
ACME has no notion of renewal. Instead, a client “renews” a
certificate by simply requesting a new certificate.