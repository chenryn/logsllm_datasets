# 3.Hackergame 2020
## **1.签到**
url：
打开签到题页面，拖动滑杆，如果将滑杆滑动到最左边，提交 0，那么我们会得到成功的返回，但是没有 flag
尝试手动提交一些非整数的值，发现得到返回信息：
我可以给你 1 个 flag、2 个 flag、3 个 flag…… 但我没法给你 0.34101个 flag。
返回信息提示我们要提交正整数的值，比如 1，而不是一个小数的值。
第一种方法
通过分析发现，这个滑杆的数值其实是通过浏览器地址栏中的一个参数来控制的，所以直接修改地址栏中的参数 number 的值为 1 即可，修改后回车即可得到
flag。
第二种方法
有的同学一定要把滑杆拖动到 1 才肯罢休，但即使是用键盘方向键操纵，最后数值也不会停留在 1。
分析前端页面，我们可以看到这么一段 JavaScript 代码：
    var prevVal = 0;
    $(document).ready(function() {
            $("#show").text($('#number')[0].value);
            $('#number').on('input', function() {
                if ($('#number')[0].value.toString() === "1") {
                    console.log('没想到吧!');
                    $('#number')[0].value = 1.00001;
                    if (prevVal == 1.00001)  $('#number')[0].value = 0.99999;
                    if (prevVal == 0.99999)  $('#number')[0].value = 1.00001;
                }
                $("#show").text($('#number')[0].value.toString());
                prevVal = $('#number')[0].value;
        });
    });
其中 console.log('没想到吧!'); 所在的代码块就是判断在滑杆数值变动时是否为 1，如果为 1
就跳过的代码，所以我们无法手动拖动或键盘控制滑杆的值到 1。
但是我们可以直接参考这段代码，直接把滑杆的值设置为 1，具体来说，打开 Chrome 的开发者工具（F12），在 Console
标签下输入以下代码执行，即可将滑杆的值设置为 1，然后点击提交就可以得到 flag：
$('#number')[0].value = 1;
点击提取
第三种方法
直接修改value的值为1
可以看到滑杆已停在1的位置，点击提取
第四种方法
将step设置为1
向右拖动滑杆即可到1的位置
## **2.2048**
url：
第一种方法
查看网页源代码，发现提示：
进而打开 static/js/html_actuator.js 这个文件，找到和游戏胜利有关的逻辑：
    var url;
      if (won) {
        url = "/getflxg?my_favorite_fruit=" + ('b'+'a'+ +'a'+'a').toLowerCase();
      } else {
        url = "/getflxg?my_favorite_fruit=";
      }
      let request = new XMLHttpRequest();
      request.open('GET', url);
如果访问 /getflxg?my_favorite_fruit= 可以得到返回信息：
还没有大成功，不能给你 flxg。
这正是游戏失败时的提示信息。
我们打开 Chrome 浏览器的开发者工具，切换到 Console 标签页，执行一下 ('b'+'a'+
+'a'+'a').toLowerCase()，得到正确的应该填入的值为 banana
访问 /getflxg?my_favorite_fruit=banana，则可以得到正确的 flag。
有的同学可能会好奇为什么 ('b'+'a'+ +'a'+'a').toLowerCase() 的计算结果是
banana，这个问题可以参考： 。
## **3.一闪而过的flag**
首先下载题目中所给出的exe文件
打开cmd命令行窗口
将下载下来的exe文件拖到命令行窗口，点击回车运行即可得到flag
也可以在文件下载后的位置打开命令行窗口，直接运行exe文件
## **4.从零开始的记账工具人**
这道题考察选手基本的编程处理数据的能力，常见的编程语言都可以编写出解题代码。
解法 1
手工计算
解法 2
使用任意文本编辑器（或者 Excel 本身）做字符串替换，替换规则如下：
    '零' -> ''
    '壹' -> '1'
    '贰' -> '2'
    '叁' -> '3'
    '肆' -> '4'
    '伍' -> '5'
    '陆' -> '6'
    '柒' -> '7'
    '捌' -> '8'
    '玖' -> '9'
    '拾' -> '*10+'
    '佰' -> '*100+'
    '仟' -> '*1000+'
    '元' -> '+'
    '角' -> '/10+'
    '分' -> '/100'
    '++' -> '+'
    '整' -> ''
然后如果开头有乘号或者结尾有加号，去掉即可，这样的数学表达式求值即可得到正确的结果。
解法 3
编程求解，这里使用 Python 语言。
我们首先使用 Excel（或者其他商业的、开源的、在线的电子表格工具）将下载的文件转换为 .csv 格式，即逗号分隔的文本。（当然，你也可以使用解析
Excel 文件格式的库来处理）
然后在 Python 中安装 cn2an 这个中文数字转换的库：
python3 -m pip install cn2an
然后使用 Python 程序处理这个文件：
    import cn2an
    lines = open('bills.csv').readlines()[1:]
    s = 0
    for line in lines:
        a, b = line.strip().split(',')
        n = 0
        if '元' in a:
            y, a = a.split('元')
            n += cn2an.cn2an(y, "smart")
        if '角' in a:
            y, a = a.split('角')
            n += cn2an.cn2an(y, "smart") / 10
        if '分' in a:
            y, a = a.split('分')
            n += cn2an.cn2an(y, "smart") / 100
        s += n * int(b)
    print(s)
## **5.超简单的世界模拟器**
url：
这道题手工构造与写代码暴力搜索都可以解决。
使用搜索引擎搜索“生命游戏”或“Game of Life”都可以找到很多相关的资料，其中会提到生命游戏的演化规则和一些有趣的构造。
**手工构造解法**
为了消除右上角的方块，我们只要放置一个水平移动的“太空船”即可：
    000000000000000
    001111000000000
    010001000000000
    000001000000000
    010010000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000