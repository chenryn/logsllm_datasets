title:Protecting Browsers from Extension Vulnerabilities
author:Adam Barth and
Adrienne Porter Felt and
Prateek Saxena and
Aaron Boodman
Protecting Browsers from Extension Vulnerabilities
Adam Barth, Adrienne Porter Felt, Prateek Saxena
University of California, Berkeley
{abarth, afelt, prateeks}@eecs.berkeley.edu
Aaron Boodman
Google, Inc.
PI:EMAIL
Abstract
Browser extensions are remarkably popular, with one in
three Firefox users running at least one extension. Although
well-intentioned, extension developers are often not security
experts and write buggy code that can be exploited by ma-
licious web site operators. In the Firefox extension system,
these exploits are dangerous because extensions run with
the user’s full privileges and can read and write arbitrary
ﬁles and launch new processes. In this paper, we analyze
25 popular Firefox extensions and ﬁnd that 88% of these
extensions need less than the full set of available privileges.
Additionally, we ﬁnd that 76% of these extensions use un-
necessarily powerful APIs, making it difﬁcult to reduce their
privileges. We propose a new browser extension system that
improves security by using least privilege, privilege separa-
tion, and strong isolation. Our system limits the misdeeds
an attacker can perform through an extension vulnerabil-
ity. Our design has been adopted as the Google Chrome
extension system.
1
Introduction
Web browser extensions are phenomenally popular:
least one
roughly one third of Firefox users have at
browser extension [23]. Browser extensions modify the
core browser user experience by changing the browser’s
user interface and interacting with web sites. For exam-
ple, the Skype browser extension rewrites phone numbers
found in web pages into hyperlinks that launch the epony-
mous IP-telephony application [5]. Although there have
been several recent proposals for new web browser archi-
tectures [19, 11, 33], little attention has been paid to the
architecture of browser extension systems.
Many extensions interact extensively with arbitrary web
pages, creating a large attack surface that attackers can
scour for vulnerabilities. In this paper, we focus on benign-
but-buggy extensions. Most extensions are not written by
security experts, and vulnerabilities in benign extensions
are worrisome because Firefox extensions run with the
browser’s full privileges. If an attacker can exploit an ex-
tension vulnerability, the attacker can usurp the extension’s
broad privileges and install malware on the user’s machine.
At this year’s DEFCON, Liverani and Freeman presented
attacks against a number of popular Firefox extensions [24].
In one example, if the user dragged an image from a mali-
cious web page into the extension, the web site operator
could install a remote desktop server on the user’s machine
and take control of the user’s mouse and keyboard.
These attacks raise the question of whether browser ex-
tensions require such a high level of privilege. To investi-
gate this question, we examine 25 popular Firefox exten-
sions to determine how much privilege each one requires.
We ﬁnd that only 3 of the 25 extensions require full sys-
tem access. The remainder are over-privileged, needlessly
increasing the severity of extension vulnerabilities. An ex-
tension system that narrows this privilege gap would reduce
the severity of extension exploits, but the Firefox extension
platform does not provide sufﬁciently ﬁne-grained privi-
leges. For example, many extensions store settings with an
interface that can read and write arbitrary ﬁles.
We propose a new extension system, built with security
in mind. In particular, we aim to protect users from benign-
but-buggy extensions by designing least privilege, privilege
separation, and strong isolation into our extension system.
Instead of running with the user’s full privileges, extensions
in our system are limited to a set of privileges chosen at
install time. If an extension later becomes compromised,
the extension will be unable to increase this set of privi-
leges. In particular, our case studies of Firefox extensions
suggest that most extensions do not require the privilege to
execute arbitrary code; consequently, the privilege to exe-
cute arbitrary code will often be unavailable to an attacker
who compromises an extension in our system.
In addition to limiting the overall privileges of each ex-
tension, our system further reduces the attack surface of
extensions by forcing developers to divide their extensions
into three components: content scripts, an extension core,
and a native binary (see Figure 1):
• Each content script has direct access to the DOM of
a single web page and is thereby exposed to poten-
Figure 1. Extensions are divided into three components, each with progressively more privileges and
less exposure to malicious web content.
tially malicious input. However, content scripts have
no other privileges except for the ability to send mes-
sages to the extension core.
• The extension core contains the bulk of the extension
privileges, but the extension core can only interact
with web content via XMLHttpRequest and content
scripts. Even the extension core does not have direct
access to the host machine.
• An extension can optionally include a native binary
that can access the host machine with the user’s full
privileges. The native binary interacts with the ex-
tension core via the standard NPAPI interface used by
Flash and other browser plug-ins.
To gain the user’s full privileges, an attacker would need
to convince the extension to forward malicious input from
the content script to the extension core and from the exten-
sion core to the native binary, where the input would need
to exploit a vulnerability. We argue that exploiting such a
multi-layer vulnerability is more difﬁcult than exploiting a
simple cross-site scripting hole in a Firefox extension.
Finally, the different components of an extension are iso-
lated from each other by strong protection boundaries: each
component runs in a separate operating system process. The
content script and the extension core run in sandboxed pro-
cesses that cannot use most operating system services. As
a ﬁrst layer of defense, the content script is isolated from
its associated web page by running in a separate JavaScript
heap. Although both the content script and the web page
have access to the same underlying DOM, the two never ex-
change JavaScript pointers, helping prevent JavaScript ca-
pability leaks [12].
Our extension system design has been adopted by
Google Chrome and is available in Google Chrome 4. Al-
though it is difﬁcult to predict how developers will use the
extension system, we believe that this architecture will pro-
vide a solid foundation for building more secure extensions.
2 Attacks on Extensions
A browser extension is a third-party software module
that extends the functionality of a web browser, letting users
customize their browsing experience. Because extensions
interact directly with untrusted web content, extensions are
at risk of attack from malicious web site operators and ac-
tive network attackers. In this section, we present a generic
threat model for extension security that applies to both the
Firefox extension system and the new extension system we
introduce in this paper. We then focus our attention on the
Firefox extension system, providing background material
and examples of real attacks.
2.1 Threat Model
We focus on benign-but-buggy extensions: we assume
the extension developer is well-intentioned but not a secu-
rity expert. The attacker attempts to corrupt the extension
and usurp its privileges. For example, the attacker might
be able to install malware on the user’s machine if the ex-
tension has arbitrary ﬁle access. We assume the attacker is
unable to entice the user into downloading or running na-
tive executables. We further assume the browser itself is
vulnerability-free, letting us focus on the additional attack
surface provided by extensions.
AttackerWe consider two related threat models: a web attacker
and an active network attacker. The web attacker controls a
web site, canonically https://attacker.com/, that
the user visits. (Note that we do not assume that the user
confuses the attacker’s web site with another web site.) Typ-
ically, the attacker attempts to corrupt an extension when the
extension interacts with the attacker’s web site. In addition
to the abilities of a web attacker, an active network attacker
can intercept, modify, and inject network trafﬁc (e.g., HTTP
responses). The active network attacker threat model is ap-
propriate, e.g., for a wireless network in a coffee shop.
Plug-ins.
In this paper, we focus on browser extensions,
which differ from browser plug-ins. Plug-ins render speciﬁc
media types (such as PDF and Flash) or expose additional
APIs to web content (such as the Gears APIs). Plug-ins are
requested explicitly by web sites, usually by loading con-
tent with a speciﬁc MIME type. By way of contrast, ex-
tensions interact with web pages without their explicit con-
sent. Although plug-in security is an important area of re-
search [19, 18], securing browser extensions requires differ-
ent techniques.
2.2 Exploiting Firefox Extensions
In Firefox, browser extensions run with the same privi-
leges as the browser itself. Firefox extensions have full ac-
cess to browser internals and the user’s operating system.
Extensions can change the functionality of the browser,
modify the behavior of web sites, run arbitrary code, and
access the ﬁle system. Firefox extensions combine two dan-
gerous qualities: high privilege and rich interaction with un-
trusted web content. Taken together, these qualities risk ex-
posing powerful privileges to attackers. We describe four
classes of attacks against browser extensions and the rele-
vant mitigations provided by the Firefox extension system:
• Cross-Site Scripting. Extension cross-site script-
ing (XSS) vulnerabilities result from interacting di-
rectly with untrusted web content. For example, if an
extension uses eval or document.write without
sanitizing the input, the attacker might be able to in-
ject a script into the extension. In one recent exam-
ple [24], a popular RSS aggregation extension evalu-
ated data from the  element of an
arbitrary web site without proper sanitization. To help
mitigate XSS attacks, Firefox provides a sandbox API,
evalInSandbox. When evaluating a script using
evalInSandbox, the script runs without the exten-
sion’s privileges, thereby preventing the script from
causing much harm. However, use of this sandbox
evaluation is discretionary and does not cover every
kind of interaction with untrusted content.
• Replacing Native APIs. A malicious web page can
confuse (and ultimately exploit) a browser extension
by replacing native DOM APIs with methods of its
own deﬁnition. These fake methods might superﬁ-
cially behave like the native methods [9] and trick
an extension into performing some misdeed.
To
help mitigate this class of attack, Firefox automati-
cally wraps references to untrusted objects with an
XPCNativeWrapper. An XPCNativeWrapper
is analogous to X-ray goggles: viewing a JavaScript
object through an XPCNativeWrapper shows the
underlying native object, ignoring any modiﬁcations
made by the page’s JavaScript. However, this security
mechanism has had a long history of implementation
bugs [4, 3, 1]. Recent work has demonstrated that these
bugs are exploitable in some extensions [24].
• JavaScript Capability Leaks. JavaScript capability
leaks [12] are another avenue for exploiting exten-
sions. If an extension leaks one of its own objects to
a malicious web page, the attacker can often access
other JavaScript objects, including powerful extension
APIs. For example, an early version of Greasemonkey
exposed a privileged version of XMLHttpRequest
to every web page [34], letting attackers circumvent
the browser’s same-origin policy by issuing HTTP re-
quests with the user’s cookies to arbitrary web sites
and reading back the responses.
• Mixed Content. An active network attacker can con-
trol content loaded via HTTP. The most severe form
of this attack occurs when a browser extension loads
a script over HTTP and runs it. The attacker can re-
place this script and hijack the extension’s privileges
to install malware. A similar, but less powerful, attack
occurs when an extension injects an HTTP script into
an HTTPS page. For example, we discovered that an
extension [6] injects an HTTP script into the HTTPS
version of Gmail.
(We reported this vulnerability to
the developers of the extension on August 12, 2009,
and the developers released a ﬁxed version thereafter.)
Even though we might be able to design defenses for each
of these attack classes, we argue that the underlying issue is
that Firefox extensions interact directly with untrusted con-
tent while possessing a high level of privilege.
3 Limiting Firefox Extension Privileges
A natural approach to mitigating extension vulnerabil-
ities is to reduce the privileges granted to extensions. To
evaluate the feasibility of this approach, we studied 25 pop-
ular Firefox extensions to determine how much privilege
(a) Most powerful behavior.
(b) Most powerful interface.
Figure 2. The chart on the left shows the severity ratings of the most dangerous behaviors exhibited
by each extension. The chart on the right shows the security ratings of the extension interfaces used
to implement these behaviors.
each needs to implement its features.
In addition to pre-
senting our case studies, we also present an algorithm for
ﬁnding methods in the Firefox extension API that lead from
a less-privileged interface to a more-privileged interface.
3.1 Case Studies
We review 25 extensions manually to determine their
privilege requirements:
1. We analyze the behavior of an extension to determine
how much privilege an extension needs to realize its
functionality, letting us compare its required privileges
to its actual privileges.
2. We analyze the implementation of an extension to de-
termine how much power the extension receives, given
the set of interfaces it uses to realize its functionality.
This lets us evaluate how much we could reduce its
privileges if we limited access to interfaces.
We ﬁnd that most extensions do not require arbitrary ﬁle
system access (the most powerful privilege), meaning that
most extensions are over-privileged. We also ﬁnd that ex-
tensions commonly use powerful interfaces to accomplish
simple tasks because the Firefox APIs are coarse-grained.
Methodology. We randomly selected two extensions
from each of the 13 categories in the “recommended” sec-
tion of the Firefox Add-on directory. (See Appendix A for
a list.) We excluded one of the selected extensions because
it was distributed only as a binary. We veriﬁed that the 25
subject extensions were also highly ranked in the “popu-
lar” directory. To determine the extensions’ functionality,
we ran each extension and manually exercised its user in-
terface. We also located usage of the extension system API
by searching for explicit interface names in the extensions’
source code. (This methodology under-approximates the set
of interfaces.) We then manually correlated the interfaces
with the extensions’ functionality. This process could not
be automated because understanding high-level functional-
ity requires human judgement.
To compare the set of interfaces with extension function-
ality, we assigned one of ﬁve ratings (critical, high, medium,
low, and none) to each interface and functionality based on
the Firefox Security Severity Ratings [8]:
• Critical: Can run arbitrary code on the user’s system