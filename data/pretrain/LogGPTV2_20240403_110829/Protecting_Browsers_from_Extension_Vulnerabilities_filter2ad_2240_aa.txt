# Title: Protecting Browsers from Extension Vulnerabilities

**Authors:**
- Adam Barth, University of California, Berkeley (abarth@eecs.berkeley.edu)
- Adrienne Porter Felt, University Angeles, University of California, Berkeley (afelt@eecs.berkeley.edu)
- Prateek Saxena, University of California, Berkeley (prateeks@eecs.berkeley.edu)
- Aaron Boodman, Google, Inc. (aaron.boodman@gmail.com)

## Abstract
Browser extensions are widely used, with approximately one in three Firefox users running at least one extension. However, extension developers often lack security expertise, leading to vulnerabilities that can be exploited by malicious website operators. In the Firefox extension system, these exploits are particularly dangerous because extensions run with the user’s full privileges, allowing them to read and write arbitrary files and launch new processes. This paper analyzes 25 popular Firefox extensions and finds that 88% of these extensions require fewer than the full set of available privileges. Additionally, 76% of these extensions use unnecessarily powerful APIs, complicating efforts to reduce their privileges. We propose a new browser extension system that enhances security through the principles of least privilege, privilege separation, and strong isolation. Our system limits the potential damage an attacker can cause through an extension vulnerability. This design has been adopted as the Google Chrome extension system.

## 1. Introduction
Web browser extensions are extremely popular, with roughly one-third of Firefox users having at least one installed [23]. These extensions modify the core browser experience by altering the user interface and interacting with web pages. For example, the Skype browser extension converts phone numbers on web pages into clickable links that initiate the Skype application [5]. Despite recent proposals for new web browser architectures [19, 11, 33], little attention has been paid to the architecture of browser extension systems.

Many extensions interact extensively with arbitrary web pages, creating a large attack surface. This paper focuses on benign but buggy extensions. Most extensions are not developed by security experts, and vulnerabilities in these extensions are concerning because they run with the browser's full privileges. If an attacker exploits an extension vulnerability, they can gain broad privileges and install malware on the user’s machine. At DEFCON, Liverani and Freeman demonstrated attacks on several popular Firefox extensions [24]. For instance, dragging an image from a malicious web page into an extension could allow a website operator to install a remote desktop server and take control of the user’s mouse and keyboard.

These attacks raise the question of whether browser extensions need such high levels of privilege. To investigate this, we examined 25 popular Firefox extensions to determine their required privileges. We found that only 3 out of 25 extensions needed full system access, while the rest were over-privileged, increasing the severity of extension vulnerabilities. The Firefox extension platform does not provide sufficiently fine-grained privileges. For example, many extensions store settings using an interface that can read and write arbitrary files.

We propose a new extension system designed with security in mind. Our goal is to protect users from benign-but-buggy extensions by incorporating least privilege, privilege separation, and strong isolation. Instead of running with the user’s full privileges, extensions in our system are limited to a set of privileges chosen at install time. If an extension is compromised, it cannot increase its set of privileges. Our case studies suggest that most extensions do not need the ability to execute arbitrary code, thus limiting the attacker's capabilities.

In addition to limiting overall privileges, our system further reduces the attack surface by dividing extensions into three components: content scripts, an extension core, and a native binary (Figure 1):

- **Content Scripts:** These have direct access to the DOM of a single web page and are exposed to potentially malicious input. They can only send messages to the extension core.
- **Extension Core:** This contains the bulk of the extension's privileges but can only interact with web content via XMLHttpRequest and content scripts. It does not have direct access to the host machine.
- **Native Binary (Optional):** This can access the host machine with the user’s full privileges and interacts with the extension core via the standard NPAPI interface used by Flash and other browser plugins.

To gain the user’s full privileges, an attacker would need to exploit multiple layers, which is more difficult than exploiting a simple cross-site scripting (XSS) vulnerability in a Firefox extension. Finally, different components of an extension are isolated by running in separate operating system processes. Content scripts and the extension core run in sandboxed processes, and the content script is isolated from its associated web page by running in a separate JavaScript heap.

Our extension system design has been adopted by Google Chrome and is available in Google Chrome 4. While it is challenging to predict how developers will use the extension system, we believe this architecture will provide a solid foundation for building more secure extensions.

## 2. Attacks on Extensions
A browser extension is a third-party software module that extends the functionality of a web browser, allowing users to customize their browsing experience. Because extensions interact directly with untrusted web content, they are at risk of attack from malicious website operators and active network attackers. This section presents a generic threat model for extension security and provides examples of real attacks on the Firefox extension system.

### 2.1 Threat Model
We focus on benign-but-buggy extensions, assuming the developer is well-intentioned but not a security expert. The attacker aims to corrupt the extension and usurp its privileges. For example, if the extension has arbitrary file access, the attacker might be able to install malware on the user’s machine. We assume the attacker cannot entice the user to download or run native executables and that the browser itself is free of vulnerabilities, allowing us to focus on the additional attack surface provided by extensions.

We consider two related threat models: a web attacker and an active network attacker. The web attacker controls a website (e.g., https://attacker.com/) that the user visits. An active network attacker can intercept, modify, and inject network traffic, such as HTTP responses. This threat model is relevant, for example, in a public Wi-Fi network.

### 2.2 Exploiting Firefox Extensions
In Firefox, browser extensions run with the same privileges as the browser itself, including full access to browser internals and the user’s operating system. Extensions can change browser functionality, modify web behavior, run arbitrary code, and access the file system. Firefox extensions combine high privilege and rich interaction with untrusted web content, exposing powerful privileges to attackers. We describe four classes of attacks against browser extensions and the relevant mitigations provided by the Firefox extension system:

- **Cross-Site Scripting (XSS):** XSS vulnerabilities result from interacting directly with untrusted web content. For example, if an extension uses `eval` or `document.write` without sanitizing input, an attacker might inject a script. Firefox provides a sandbox API, `evalInSandbox`, to mitigate XSS attacks, but its use is discretionary and does not cover all interactions with untrusted content.
- **Replacing Native APIs:** A malicious web page can exploit an extension by replacing native DOM APIs with fake methods. Firefox uses XPCNativeWrappers to mitigate this, but these have had implementation bugs.
- **JavaScript Capability Leaks:** If an extension leaks one of its objects to a malicious web page, the attacker can access other JavaScript objects, including powerful extension APIs. For example, an early version of Greasemonkey exposed a privileged `XMLHttpRequest` to every web page, allowing attackers to bypass the same-origin policy.
- **Mixed Content:** An active network attacker can control content loaded via HTTP. If an extension loads a script over HTTP and runs it, the attacker can replace the script and hijack the extension’s privileges to install malware. A similar, but less powerful, attack occurs when an extension injects an HTTP script into an HTTPS page.

While defenses can be designed for each attack class, the underlying issue is that Firefox extensions interact directly with untrusted content while possessing high privileges.

## 3. Limiting Firefox Extension Privileges
A natural approach to mitigating extension vulnerabilities is to reduce the privileges granted to extensions. To evaluate this, we studied 25 popular Firefox extensions to determine their required privileges. We also present an algorithm for identifying methods in the Firefox extension API that lead from a less-privileged interface to a more-privileged interface.

### 3.1 Case Studies
We manually reviewed 25 extensions to determine their privilege requirements:

1. **Behavior Analysis:** We analyzed the behavior of each extension to determine the required privileges and compared them to the actual privileges.
2. **Implementation Analysis:** We analyzed the implementation to determine the power received by the extension based on the interfaces used, evaluating the potential reduction in privileges if access to certain interfaces was limited.

We found that most extensions do not require arbitrary file system access, indicating they are over-privileged. We also found that extensions commonly use powerful interfaces for simple tasks due to the coarse-grained nature of Firefox APIs.

**Methodology:**
- We randomly selected two extensions from each of the 13 categories in the “recommended” section of the Firefox Add-on directory (see Appendix A for the list).
- We excluded one extension distributed only as a binary.
- We verified that the 25 subject extensions were highly ranked in the “popular” directory.
- We ran each extension and manually exercised its user interface.
- We located usage of the extension system API by searching for explicit interface names in the source code.
- We manually correlated the interfaces with the extensions’ functionality, which could not be automated due to the need for human judgment.

To compare the set of interfaces with extension functionality, we assigned one of five ratings (critical, high, medium, low, and none) based on the Firefox Security Severity Ratings [8]:

- **Critical:** Can run arbitrary code on the user’s system.
- **High:** Can access sensitive data or perform significant actions.
- **Medium:** Can perform moderate actions.
- **Low:** Can perform minor actions.
- **None:** No significant actions or data access.

By reducing the privileges of extensions, we can significantly enhance the security of the browser and protect users from potential attacks.