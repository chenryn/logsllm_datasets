⽣生就回滚，否则部署下⼀一个环境
要最⼩小化并⾏行行的版本
使⽤用数据库的扩张/收缩模式
Case：Facebook发布模式
A1组：服务内部员⼯工的⽣生产环境服务器器
A2组：服务很⼩小⽐比例例客户的⽣生产环境服务器器，
特定验收标准达到时（⾃自动化或⼿手⼯工测试）
A3组：剩余⽣生产环境服务器器，在A2
机器器达到验收标准
集群免疫系统
在⾦金金丝雀发布模式上扩展连接发布流程的⽣生产
监控系统，当⾯面向⽤用户性能降低则⾃自动化回滚
⽐比如新⽤用户转化率低于
历史基准15%~20%
两个好处
找到在⾃自动化测试很难发现的缺陷（如web⻚页⾯面
变更更影响了了⻚页⾯面元素的可⻅见性，如CSS变更更等）
降低探测到变更更引发的性能降级的时间
IMVU，Etsy，Netﬂix
基于应⽤用的安全发布模式
拥有更更⾼高的灵活性，安全发布新功能
给客户，通常是以每个功能为基础
因为在应⽤用层⾯面，所以要引⼊入开发
功能开关
有选择性的启⽤用或关闭功能开关，不不需要⽣生产环境代码部署
可以选择⽤用户群体，如内部员⼯工，分段的客户等
通常的实现：使⽤用条件语句句包装应⽤用逻辑或UI元
素，通过存储在某处的配置启⽤用或关闭功能
例例⼦子
Facebook Gatekeeper
根据⼈人⼝口学信息选择功能可⻅见或不不可⻅见
地点，浏览器器类型，年年龄，性别等
Etsy Feature API ， Netﬂix Archaius library
容易易回滚
出现问题时，关闭开关，⽐比整个回滚更更容易易
优雅降级性能
通过减少功能性交付增加可⽀支持的⽤用户数
关闭CPU密集型功能，如推荐等
在SOA架构增加还原能⼒力力
依赖的服务不不可⽤用，功能仍可以
正常部署到⽣生产环境但关闭开关
服务准备好再开启开关
当服务失败，也可以关闭调⽤用它
的开关，让应⽤用剩余部分可⽤用
确保发现错误，⾃自动化测试时应打开所有开关
功能开关让代码部署与功能发布解耦，⽀支持了了假设驱动的AB测试
Dark Launches
部署所有功能到⽣生产环境并执⾏行行测试，但对客户不不可⻅见
⼤大型或有⻛风险的变更更，通常提前数周进
⾏行行⽣生产发布，在类⽣生产压⼒力力下安全测试
快速反馈环，⽴立即验证业务假设和结果
Case：Dark Launch of Facebook Chat (2008)
持续交付与持续部署
持续交付
开发以⼩小批量量⼯工作在主⼲干上，或者每个⼈人
在短Feature分⽀支上，有规律律的合并主⼲干
主⼲干⼀一直保持可部署状态
可以使⽤用点击按钮的⽅方式在正常业务时段按需发布
开发可以得到快速反馈，包括缺陷，
性能问题，安全问题，易易⽤用性问题
当问题被发现，他们快速修复，主⼲干
⼀一直保持可部署状态
持续部署
在以上基础上，以规律律的、⾃自服务的
⽅方式部署成功的构建到⽣生产环境
每⼈人每天⾄至少⼀一次部署到⽣生产环境
甚⾄至⾃自动化部署每个变更更
持续交付是持续部署的先决条件，就
像持续集成是持续交付的先决条件
持续部署可能适⽤用于web服务的线上交付
持续交付适⽤用于⼤大多数需要⾼高质量量部署和
发布，快速和⾼高度可预测，低⻛风险的场景
包括嵌⼊入式系统，COTS
产品，移动app等
13. 低⻛风险发布架构
架构不不断演进，Google和ebay已经
有五次从头到尾的架构重写
紧耦合架构，过多的沟通和协调，‘开发花
费15%时间写代码，其余时间⽤用于开会’
单体应⽤用的问题
每次提交代码到主⼲干或发布，有导致全局失
败的⻛风险（阻塞了了其他⼈人的测试或功能）
为避免这样的问题，每个⼩小的变更更都需
要⼤大量量沟通和协调
部署变得有问题，很多变更更批量量发布，
让集成和测试更更复杂，增加出错⻛风险
绞杀者模式
让现有功能放置在API后⾯面，避免进⼀一步变动
所有新功能由新服务执⾏行行，使⽤用新架构
必要时再调⽤用⽼老老系统
可以⽤用来移植部分单体应⽤用或紧
耦合服务到⼀一个解耦的架构
实现⽣生产率，可测
试和安全的架构
解耦的架构，良好定义的接⼝口
可以让⼩小的、有⽣生产率的、2PT团队
将⼩小的变更更安全和独⽴立的部署
每个服务有良好定义的API，服务测
试更更容易易，建⽴立团队间的契约和
SLAs更更容易易
世界最⼤大的NoSQL服务
只有8⼈人⽀支持
基于很多层之上构建
SOA架构
让⼩小团队可以⼯工作在⼩小的和简单的单元
每个团队独⽴立部署，快速并安全
Google和Amazon展示了了这种架构影
响了了组织架构，灵活性和可扩展性
虽然数万开发⼈人员，⼩小团队们可以有
难以置信的⽣生产率
架构原型，单体 VS 微服务
历史上很多DevOps组织都经历了了紧耦合单体架构，帮助他
们达到产品与市场匹配，但规模化时让组织⾄至于⻛风险中
eBay’s monolithic C++ application in 2001, 
Amazon’s monolithic OBIDOS application in 2001, 
Twitter’s monolithic Rails front-end in 2009, and 
LinkedIn’s monolithic Leo application in 2011
但是他们可以重新架构，不不仅⽣生存，⽽而且取得市场成功
单体架构并不不是不不好，在产品早期
是最好选择，但架构需要不不断演进
Case：Evolutionary Architecture 
at Amazon (2002)
使⽤用绞杀者模式，安全演进企业架构
通过版本化的APIs访问所有服务，
或者称为版本化服务或不不可变服务
修改服务⽽而不不影响调⽤用者，让各系统更更解耦
如果修改参数，创建⼀一个新的API版
本，让依赖这个服务团队移植到新版本
注意新绞杀者应⽤用不不要与其他服务紧耦
合（⽐比如不不能直接访问另外⼀一个服务的
数据库），否则⽆无法达到重构的⽬目标
如果我们调⽤用的服务没有清晰定义的
API，需要构建它们或者⾄至少提供⼀一
个客户端lib库
重复从紧耦合架构解耦功能，⼯工作在安
全灵活的⽣生态系统，让开发更更有⽣生产率
创建绞杀者应⽤用不不仅是⽤用新技术重做
已存在的功能，有时业务流程也需要
重新设计的更更简单
Case：Strangler Pattern at Blackboard Learn (2011)
Part II：Where to start
5. 选择开始的价值流
Case：Nordstrom的DevOps转型
背景
始于1901年年，时装零售商领导者，2015年年收⼊入$13.5 billion
2011年年的战略略是要提升在线收⼊入
2011年年，技术组织主要是优化成本
⼤大量量技术⼯工作外包
按年年度做计划
⼤大批量量的瀑布模式软件发布
即使有97%成功率，达到时
间、预算和范围⽬目标
仍然⽆无法满⾜足五年年业务战略略⽬目标
开始优化速度⽽而不不仅仅是优化成本
转型之路路
不不想让变⾰革引起整个系统的⼤大动荡
聚焦在特定业务领域，可以实验和学习
示范早期成功，给每个⼈人改进信⼼心
专注在⽆无法达成业务⽬目标的领域中
移动应⽤用
客户不不满意，在App Store中充满负⾯面评价
现有系统的结构和流程导致每年年只能发布两次
⽬目标：快速、按需的发布，快速迭代满⾜足⽤用户需求
改进⽅方案
不不⽤用依赖很多其他公司内的团队
从每年年⼀一次计划，调整到持续计划
创建专注的产品团队，只负责App应⽤用
单⼀一优先级的，按客户需求的Backlog
避免了了团队⽀支持不不同产品时优先级冲突
独⽴立开发、测试、交付价值给客户
排除测试作为单独阶段，⽽而是集成
到每个⼈人的⽇日常⼯工作中
改进成果
每个⽉月两倍的功能交付
⼀一半的缺陷数量量
服务内部餐厅的系统
不不像App的⽬目标是优化速度和增加吞吐
量量，这⾥里里的⽬目标是降低成本和提升质量量
2013年年有11个⼤大的变更更，导致很多影响客户的事故
2014年年计划了了44个变更更
有⼈人建议将团队数量量提升三倍⽤用来满
⾜足需求
更更好的建议：停⽌止投⼊入更更多⼈人解决问
题，⽽而是应该改进⼯工作⽅方式
改进⽅方案
改进服务⼊入⼝口、部署流程
改进成果
降低部署前置时间60%
降低产品事故60%到90%
2015年年，管理理⽬目标是让技术组织降
低服务交付时间20%
可以⽤用的技术
价值流图
减⼩小批量量
微服务
单件流
持续交付
有信⼼心，在正确的⽅方向上
让每个⼈人知道努⼒力力会达到更更⾼高的管理理⽬目标
GREENFIELD VS. BROWNFIELD 
SERVICES
城市规划和建筑项⽬目
Greenﬁeld
未开发的⼟土地
Brownﬁeld