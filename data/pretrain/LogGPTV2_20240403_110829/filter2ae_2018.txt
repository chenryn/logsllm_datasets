### 版权声明
本文由先知技术社区独家发表。如需转载，请事先联系先知技术社区获取授权；未经授权，严禁转载。
投稿邮箱：[PI:EMAIL]

## 1. 分析环境
- 操作系统：Windows XP SP3
- 软件：Microsoft Office 2003

## 2. 基本信息
- **漏洞类型**：栈溢出
- **影响范围**：
  - Microsoft Office 2003 SP3, 2007 SP2, 2007 SP3, 2010 Gold, 2010 SP1
  - Microsoft Office 2003 Web Components SP3
  - SQL Server 2000 SP4, 2005 SP4, 2008 SP2, 2008 SP3, 2008 R2
  - BizTalk Server 2002 SP1
  - Commerce Server 2002 SP4, 2007 SP2, 2009 Gold, 2009 R2
  - Visual FoxPro 8.0 SP1, 9.0 SP2
  - Visual Basic 6.0 Runtime

## 3. 漏洞分析
- **样本MD5**：6734638ae4183aa634da2026a11e95ba
- **样本类型**：RTF

该样本通过经典的弹出计算器来验证漏洞利用的成功性。一旦计算器窗口出现，表明我们已经成功控制了EIP寄存器，并能够执行任意指令。

#### 分析过程
1. **初始断点设置**：在看到计算器窗口后，我们在`WinExec`函数处设置断点。观察到返回地址指向栈地址，这进一步确认了此次为栈溢出。

2. **内存写断点**：为了追踪导致内存覆盖的具体操作，我们在`0x00127bed`处设置了内存写断点。由于数据点必须对齐，我们将地址减一以满足要求。此时，我们还设置了另一个执行断点以便更方便地进行调试。

3. **加载断点与拷贝断点**：注意到`MSCOMCTL.OCX`模块并未加载至内存中，因此我们添加了一个加载断点。加载完成后，在拷贝代码的位置设置新的断点，从而确定拷贝的是否为shellcode。

4. **函数分析**：通过多次F5运行，最终发现确实存在两次拷贝操作，第一次拷贝12个字节，第二次拷贝超过剩余的8个字节空间，导致溢出。

5. **RTF文档解析**：提取RTF文档中的`objdata`对象，将其作为OLE对象导入`offVIS`工具中进行详细分析，明确其中包含的shellcode位置及其功能。

6. **复制大小控制**：结合IDA伪代码分析，在首次复制12字节后，程序会检查是否为Cobjd对象并判断复制长度（动态调试显示比较值为`0x008282`）。当构造的数据长度大于剩余空间时，即引发溢出。

### 总结
此漏洞的根本原因在于对复制数据大小的错误处理，具体表现为当待复制数据超出可用栈空间时未能正确处理，进而触发栈溢出攻击。