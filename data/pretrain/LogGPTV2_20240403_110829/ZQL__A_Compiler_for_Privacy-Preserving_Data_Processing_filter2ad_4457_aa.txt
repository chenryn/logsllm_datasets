title:ZQL: A Compiler for Privacy-Preserving Data Processing
author:C&apos;edric Fournet and
Markulf Kohlweiss and
George Danezis and
Zhengqin Luo
ZQL: A Compiler for Privacy-Preserving 
Data Processing
Cédric Fournet, Markuld Kohlweiss, and George Danezis, Microsoft Research; 
Zhengqin Luo, MSR-INRIA Joint Centre
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4ZQL: A Compiler for Privacy-Preserving Data Processing
C´edric Fournet
Microsoft Research
Markulf Kohlweiss
Microsoft Research
George Danezis
Microsoft Research
Zhengqin Luo
MSR-INRIA Joint Centre
Abstract
ZQL is a query language for expressing simple compu-
tations on private data.
Its compiler produces code to
certify data, perform client-side computations, and verify
the correctness of their results. Under the hood, it synthe-
sizes zero-knowledge protocols that guarantee both in-
tegrity of the query results and privacy for all other data.
We present the ZQL language, its compilation scheme
down to concrete cryptography, and the security guaran-
tees it provides. We report on a prototype compiler that
produces F# and C++. We evaluate its performance on
queries for smart-meter billing, for pay-as-you-drive in-
surance policies, and for location-based services.
Introduction
1
A variety of private user data is used to tailor modern ser-
vices, and some go as far as billing based on ﬁne grained
customer readings. For example, smart meters are used
to charge a different tariff depending on the time of elec-
tricity usage; pay-as-you-drive insurance premiums de-
pend on detailed driving pattern of drivers. Such schemes
are currently implemented by collecting ﬁne-grained in-
formation, and processing it on the service side—an ar-
chitecture that has led to serious privacy concerns.
This paper supports an alternative approach: clients
could perform sensitive computations on their own data
certiﬁed by meters or car on-board units [55, 60], and
upload only the results, together with a proof of correct-
ness to ensure their integrity. We propose ZQL, a simple
query language to express at a high level such compu-
tations, without any cryptographic details. Queries are
compiled to code for the data sources, the clients, and
the veriﬁers by synthesizing zero-knowledge protocols.
The most popular language for querying and perform-
ing computations on user data is SQL [29] based on re-
lational algebra. The ZQL feature set was chosen to sup-
port a subset of SQL. Data is organized into tables of
rows, with private and public columns. Queries accept
tables as inputs, and can iterate over them to produce
other tables, or aggregate values. Simple arithmetic oper-
ations on rows are supported natively, and so is a limited
form of SQL joins through table lookups.
ZQL offers advantages over hand-crafted protocols, in
that computations are ﬂexible and can be expressed at a
high level by application programmers. The computa-
tions can also be modiﬁed and recompiled, without the
need to involve cryptography experts.
The ZQL compiler is free to synthesize custom zero-
knowledge protocols behind the scene, and we currently
support two main branches, for RSA and Elliptic Curve
primitives. We also support a symbolic execution back-
end to derive estimates of the cost of evaluating and ver-
ifying queries. Synthesized protocols themselves are in-
ternally represented and optimized as fragments of an
extended ZQL language until the ﬁnal code is emitted.
Intermediate ZQL is strongly typed, and precise reﬁne-
ment types can be used to verify security properties on
the ﬁnal compiled code, using F7 [16] or F* [58].
Informally, for a given source query, the desired secu-
rity properties on the resulting ZQL-compiled code are:
• Correctness. For any given source inputs, the se-
quential composition of the cryptographic queries
for the data sources, the user, and the veriﬁer yields
the same result as the source query.
• Integrity. An adversary given the capabilities of
the user cannot get the veriﬁer to accept any other
result—except with a negligible probability.
• Privacy. An adversary given the capabilities of the
veriﬁer, able to choose any two collections of in-
puts such that the source query yields the same re-
sult, and given the result of the user’s cryptographic
query, cannot tell which of the two inputs was used.
This corresponds to the source query being executed by
a ﬁctional trusted third party sitting between the data
sources, the user, and the veriﬁer.
USENIX Association  
22nd USENIX Security Symposium  163
1
164  22nd USENIX Security Symposium 
USENIX Association
ContentsTherestofthepaperisorganizedasfol-lows.§2introducesourquerylanguageusingaseriesofprivacy-preservingdataprocessingexamples.§3speci-ﬁesourtargetprivacyandintegritygoals.§4reviewsthemaincryptographicmechanismsusedbyourcompiler.§5describesthecompilationprocess.§6givesourmainsecuritytheorems.§7discussesapplicationsand§8pro-videsexperimentalresultsanddiscussesfuturework.Thisshortversionofthepaperomitsmanydetailsanddiscussions;anextendedversionwithauxiliarydef-initions,proofs,andexamplesisavailableathttp://research.microsoft.com/zql.RelatedworkTheZQLlanguageprovidesprivatedataprocessing.Thezero-knowledgeprotocolssynthesizedarestandardΣ-protocols[32,30,33],butinZQLtheyareusedforprovingthecorrectnessofgeneralcomputationsratherthanforcryptographicprotocoldesign.Arguably,previousworksonzero-knowledgecompil-ersfocusedonthelatterastheprimaryuse-case[19,51,2,1].Theuseofzero-knowledgeforauthenticationandauthorizationasincredentialande-cashtechnolo-gies[23,51,4]receivedparticularattention,but,toourknowledge,no-oneconsideredtheuseofΣ-protocolstoprovetheexecutionofgeneralprograms.Morespeciﬁcally,alonglineofwork[19,7,2]culminatingintheCACEcompilertacklestheprob-lemofautomaticallytranslatingproofgoalsspeciﬁedintheCamenisch-Stadlernotation[22]intoefﬁcientΣ-protocols.IntermediatetranslationsstepsofZQL(thesharedtranslation)areatasimilarlevelofabstractiontotheCamenisch-StadlernotationbutZQLalsosyn-thesizesthoserepresentationsfromsourcecode,andthenproceedstocompilethemtolowleveloperations.ZKPDL[51],analternativecompilerforΣ-protocols,usesanaturallanguageinspiredspeciﬁcationofzero-knowledgeproofgoals.Thisspeciﬁcationlanguagemaybeevencloserinspirittoourintermediarynotation,asitallowsforthepossibilitytospecifythegenerationoftheprotocolinputs.TheauthorsoftheCACEcompilerdiscussthedifferenceandsimilaritybetweenthesetwoapproachesinaUsenixposter[9].ThecryptographicprototypinglanguageCharm[1]alsoincludesazero-knowledgeproofcompilerforCamenisch-Stadlerstate-mentswhichiscurrentlyprimarilyaproofofconceptandthuslesssophisticatedthanCACEandZKPDL.Wearealsoawareofanembeddingofazero-knowledgelan-guageinC++[45].ZQLdiffersfromstandardmulti-partycomputationcompilers[49],inthatitassumestheclientknowsallprivatedata.Thisassumptionallowsforsingleroundprotocols,andtheefﬁcientnon-interactiveimplementa-tionofnon-linearoperationsincludingjoins.ZQL SourceQueryVerifierCodeProver CodeData SourcecodeData SourcesClientServiceCertified DataCertified Query ResultsFigure1:ZQLinaprivacyfriendlycomputationsystem.2ALanguageforPrivateDataProcessingWhyZQL?WedesignZQLtosupportprivacyproto-colsthatrelyonclient-sidecomputationwhilerequiringhighintegrity[35].Inthissetting,anumberof(possiblyindependent)datasourcesprovidesignedpersonaldataitemstoauser.Thesigneddataisthenusedasaninputtosomecomputationperformedonauserdeviceonwhichtheoperationofaservicerelies(forexamplebillingforautility,determiningtheproximityoftoaspeciﬁcpath,orproﬁlingtheshoppinghabitsofauser).Theresultsofthecomputationarethensenttotherelyingservice,whileprivateinputdataiskeptsecret.TheZQLcompilertakesahighleveldescriptionofthecomputationandisresponsibleforproducingthecodeexecutedbythedatasourcestosignpersonaldata,thecomputationproverandthecomputationveriﬁer,asillustratedinFigure1.Itisassumedthatcommunicationstakeplaceoverpri-vateauthenticatedchannels;thedatasourcesaretrustedbyalltomaintaintheprivacyoftherawpersonaldatatheyproduce,andtosecurelysignthem.Giventhis,ourprotocolsguaranteeintegritythroughcryptographicproofsthatestablishtheauthenticityofthepersonaldatainputsandthecorrectnessofaparticularcomputation.Thus,amaliciousclientcannotmanipulatetheresultofthecomputation.Ontheotherhand,theprivateinputstothecomputationsarekeptsecretbytheuser,andtheproofsdonotleakanythingaboutthem.Thus,privacyispreserved,andonlytheresultofthecomputations(andanyinferencesthatcanbedrawnfromthem)becomeknowntotherelyingservice.Compilingallowsustostaticallyverifythesecurityoftheresultingprotocolsus-ingreﬁnementtypes(seethefullpaper).Hence,boththeproverandtheveriﬁer,oranyonetheytrust,cansepa-ratelyreviewthesourcequery,compiletheprotocol,andverifyitssecuritybytyping.Thereareadvantagesinde-couplingdatasourcesfromspeciﬁccomputations.Itallowsformeters,orservicesprovidingpersonaldata,toremainsimple,cheap,andgeneric.Inturn,thecomputations,suchasbilling,canbe2e
op
τ
::=
x
|
op ˜e
|
let ρ = e in e
|
↓ e
|
::=
|
( , ) | ( , , ) | . . .
|
+ | − | ∗
|
= | ∧
| map (ρ → e)
fold (ρ → e)
|
lookup ρ
|
::=
|
|
|
int [pub]
ρ table
ρ lookuptable
ρ,θ ,Γ ::= ε | x : τ,ρ
Expressions
variable
application
let binding
declassiﬁcation
Operators
tuples
arithmetic
boolean
map iterator
fold iterator
table lookup
Types
security type
table
lookup table
Tuple types
Figure 2: ZQL Syntax
updated without changing the devices that certify read-
ings. Finally, private computations can aggregate dis-
parate data sources that are not aware of one another, or
may not trust one another with the privacy or integrity of
the computations.
We ﬁrst provide a brief description of our source lan-
guage and then illustrate its primitives through simple
examples. §7 provides larger examples of protocols that
have been proposed in the literature.
The ZQL language At its core, ZQL is a pure expres-
sion language, with built-in operators that act on integers
and tables. Figure 2 gives its abstract syntax. A query
θ → e consists of the declaration of input variables (θ)
that can be either public or private, and of an expression
body (e).
Expressions consist of variables, operators applied to
sub-expressions ˜e (including constants as a special case
when ˜e is empty), and let bindings for sequential com-
position. Expressions evaluate to tuples of values: for
example, the expression let x : int,y : int = e in e0 ﬁrst
evaluates the sub-expression e to a pair of integers vx,vy,
then evaluates e0 after substituting vx and vy for x and y.
A variety of operators support arithmetic (0, 1, +, ∗),
booleans (=, ∧), and operations on tables (map, fold,
lookup). The iterators map and fold are parametrized
by a ZQL expression, conceptually acting as the body of
the corresponding loop. (We write these expressions as
functions, but they can only specialize the iterator; they
cannot be assigned to variables.)
Query inputs and expression results are speciﬁed us-
ing tuples of typed variables (θ for query inputs and ρ
for sub-expressions). Each base type can be marked as
public, and is otherwise treated as private. Types also in-
clude tables, where ρ indicates the type of each row in
the table. Tables can contain mixtures of public and pri-
vate columns; for example, (time:int pub, reading: int)table
is the type of tables of private readings indexed by pub-
lic times. On the other hand, the current ZQL compiler
does not attempt to hide the query deﬁnition itself, or the
number of rows in tables.
Intermediate expressions are automatically classiﬁed
as public or private, depending on the types of their vari-
ables, following a standard information ﬂow discipline:
public inputs can ﬂow to private results, but not the con-
verse. Alternatively, a ZQL expression can be explicitly
declassiﬁed, using the special operator ↓ e which speci-
ﬁes that the result of e can be released to the veriﬁer, and
marks it as public.
A ZQL query itself deﬁnes the privacy goals of the
synthesized zero-knowledge protocols. For example, a
query θ →↓ e, where e does not contain any declassi-
ﬁcation, states that only the ﬁnal result of the query is
released, and that the protocol should not leak any side
information on inputs marked as private in θ. A key fea-
ture of the language is that the underlying cryptographic
mechanisms are totally hidden in the deﬁnition of the
ZQL query. Since the ZQL query deﬁnes what results
are declassiﬁed, it is important that users, or their prox-
ies, review it to ensure no more than the necessary in-
formation leaks from it. Additional privacy mechanisms,
such as differential privacy [37], could be used to mea-
sure or minimize any leakage resulting from the query
declassiﬁcation.
The ZQL language is strongly typed, with a type sys-
tem simple enough to allow for automated type checking
and type inference, which means that the programmer
only has to write the input types of the query. We write
Γ (cid:24) e : ρ to state that expression e has type ρ in environ-
ment Γ. The type system ensures both runtime safety: e
returns only to values of types ρ, and non-interference:
in the absence of declassiﬁcation, e does not leak inputs
typed as private in Γ to results typed as public in ρ. The
type system can also be used to track the maximal length
of private variables to statically prevent arithmetic over-
ﬂows. We omit the formal deﬁnition of the language
semantics and type system, which are standard.
Inter-
nally, ZQL relies on a richer type system with reﬁne-
ments types [14, 42] to keep track of various properties
and to structure our security proofs—see the full paper.
ZQL by example We present the ZQL language and
semantics through simple concrete examples, building to
fuller queries that address problems in the literature in §7.
The ﬁrst example query computes the discriminant of the
polynomial xk2 + zk + y, for public x and private y and z.
let discriminant (x:int pub) (y:int) (z:int) = ↓ (z∗z − 4∗x∗y)
USENIX Association  
22nd USENIX Security Symposium  165
3
Anticipating on its compilation, the part of the expres-
sion that is linear in the secrets, namely −4∗ x ∗ y, can
be proved efﬁciently through homomorphisms of Peder-
sen commitments, while the non-linear z ∗ z requires a
Σ-protocol to prove the correctness of the private multi-
plication. The ZQL compiler will choose to synthesize
the right proof mechanisms for each case.
The query declassiﬁes its result, which leaks some in-
formation about y and z. For instance, given x = 30 and
discriminant x y z = 1000, if the veriﬁer knows a priori that
0 ≤ y < 200 and 0 ≤ z < 200, then it can infer that (y,z) is
one of the pairs (5,40), (45,80), (75,100) or (155,140),
but our privacy theorem ensures that its does not learn
which pair was actually used.
Our next examples illustrate the use of tables and it-
erators map and fold. The ﬁrst query computes the sum
of all integers in table X, while the second returns the
sum of their squares. The third query takes a table with a
public column and two secret columns and returns a table
with the same public column, and the element-wise sum
of the secret columns. By design, the size of the tables
is not hidden by ZQL. (Hiding table sizes naively would
involve padding the computation to the maximum size of
allowed tables, which would be very expensive.)
let sum of x (X : int table) =
↓ (fold ((s, x) →s + x) 0X)
let sum of square (X : int table) =
↓ (fold ((s, x) →s + x∗x) 0X)
↓ (map ((a,x,y) →a, x+y) T)
let linear (T: (int pub ∗ int ∗ int) table) =
In these queries, the iterators are parametrized by a sub-
query, which is applied to every row of the table, accu-
mulating the sums in s, or building another table of re-
sults. The equivalent SQL statements would be written
select SUM(x) from X, select SUM(x*x) from X, and se-
lect a, x+y from T. The ﬁrst and third queries compute
linear combinations of secrets; we compile them without
the use of any expensive Σ-protocols.
We found sum queries to be frequent enough to jus-
tify some derived syntax: we write sum (ρ → e) T as
syntactic sugar for fold (s,ρ → s + e) 0 T .
A key feature of the ZQL language is the ability to
perform lookups on input tables. This provides a lim-
ited form of join and enable the computation of arbitrary
functions with small domains. The expression lookup x T
ﬁnds a row x,v1, . . .v n in T that matches x, and returns
v1, . . . ,v n. From an information-ﬂow viewpoint, the re-
sult of a lookup on a private variable is also private (even
if the lookup table is public); in that case, ZQL leaks
no information about which row is returned.
If multi-
ple rows match x, the veriﬁer is only able to assert that