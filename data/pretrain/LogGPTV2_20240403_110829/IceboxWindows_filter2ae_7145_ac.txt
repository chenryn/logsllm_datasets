### 优化后的文本

#### PTE 分析
通过使用 `kd> !pte 7ff743655000` 命令，我们得到了以下信息：
- PTE 位于 `FFFFE93FFBA1B2A8`
- 内容为 `000020000891F860`
- 状态为无效
- 过渡状态：`891F`
- 保护级别：`3 - ExecuteRead`

从这些数据可以看出，相应的PTE是无效的（`000020000891F860`）。我们可以验证其内容是否代表了 `PageFrameNumber` 为 `0x20000891F` 的过渡PTE。然而，在 `kd` 中显示的过渡 `PFN` 值却是 `0x891F`。这种差异的原因是什么呢？

#### L1 终端故障缓解措施
微软安全响应中心（MSRC）对此给出了详细的解释：这里引入了一种新的缓解措施，以解决名为L1终端故障（L1TF）的推测执行侧信道漏洞。

简单来说，英特尔手册中描述的MMU行为与实际的推测行为不同。当 `_MMPTE_HARDWARE.Valid` 标志未设置时，CPU会推测性地尝试访问L1高速缓存中的页面，如果存在指令，则会预取指令，这可能导致敏感信息（如内核地址）泄露。

为了缓解这一CPU漏洞，Windows现在确保每个无效的PTE都有一个超出可用物理内存限制的 `PageFrameNumber`。这是通过 `MiSwizzleInvalidPte` 函数实现的：

```c
_MMPTE __fastcall MiSwizzleInvalidPte(_MMPTE pte)
{
    if (gKiSwizzleBit)
    {
        if (!(gKiSwizzleBit & pte.u.Long))
            return (_MMPTE)(pte.u.Long | gKiSwizzleBit);
        pte.u.Long |= MMPTE_SWIZZLE_BIT;
    }
    return pte;
}
```

`gKiSwizzleBit` 全局值在系统初始化期间由 `MiInitializeSystemDefaults` 函数定义。

#### 可弹出设备处理
对于可弹出设备对象，会在新创建的控制区域中设置 `ImageControlAreaOnRemovableMedia` 标志。该标志在 `MiCreateNewSection` 中被检查。如果设置了该标志，将调用 `MiSetPagesModified` 函数来更新每个PTE的状态。由于禁用了页面文件，这些PTE将始终处于过渡状态，由 IceBox 处理。

为了实现这一点，`IoIsDeviceEjectable` 函数需要返回 `true`：

```c
bool __fastcall IoIsDeviceEjectable(PDEVICE_OBJECT pDeviceObject)
{
    return (((pDeviceObject->Characteristics & FILE_FLOPPY_DISKETTE) == 0) & !_bittest(&InitWinPEModeType, 31u)) == 0;
}
```

因此，我们有两种选择：
1. 在卷设备的属性中强制添加 `FILE_FLOPPY_DISKETTE` 标志。
2. 修改 `InitWinPEModeType` 值。

第一种选择需要检测设备的创建时间并更新其属性，而第二种选择更为简便。实际上，`InitWinPEModeType` 在 `Phase1InitializationDiscard` 函数中初始化：

```c
if (Options && strstr(Options, "MININT"))
{
    InitIsWinPEMode = 1;
    if (strstr(Options, "INRAM"))
        InitWinPEModeType |= 0x80000000;
    else
        InitWinPEModeType |= 1u;
}
```

这个选项对应于 Windows PE 功能，适用于部署、安装和修复 Windows 桌面和服务器安装的小型操作系统。由于该系统是从 ISO 文件启动的，Subsection PTE 限制不影响此选项。此外，此选项自 Windows XP 以来一直存在。

IceBox 当前通过在操作系统启动期间强制将 `InitWinPEModeType` 全局设置为 `0x80000000` 来启动 WinPE 模式。

#### 内存压缩
内存压缩是 Windows 10 中引入的功能，并已向后移植到 Windows 8 和 Windows 7。该机制可以压缩客户端 Windows 版本上的私有页面，以增加可用内存大小。内存压缩涉及内核和用户空间两个部分：
1. 对于内核，核心功能是在名为“存储管理器”（SM）的专用组件中实现的；
2. 对于用户空间，`Superfetch` 服务（托管在 `svchost.exe` 实例中的 `sysmail.dll`）通过 `NtSetSystemInformation` 调用存储管理器来管理存储。

有关内存压缩的详细说明，请参考《Windows Internals 第七版》第五章：内存管理。由于压缩只是一种内存优化方式，我们希望禁用该功能。

内核使用 `SmFirstTimeInit` 函数中的 `PsCreateMinimalProcess` 创建 `MemoryCompression` 进程。在创建该进程之前，`MmStoreCheckPagefiles` 函数确保至少存在一个页面文件，否则返回状态 `STATUS_NOT_SUPPORTED`。

通过禁用页面文件的方式，可以隐蔽地禁用内存压缩功能。

### 局限性
上述对页面文件和 WinPE 模式的修改会对系统产生一定影响：
1. **页面文件**：页面文件是第二种内存存储方式，实际上可以增加物理内存的大小。因此，禁用页面文件直接限制了可用物理内存的总量。可以通过增加虚拟机的物理内存来规避此类影响。
2. **崩溃转储**：如果系统发生崩溃，会使用页面文件来临时存储生成的崩溃转储。禁用页面文件将不会创建故障转储。
3. **内存压缩**：如前所述，内存压缩需要页面文件的支持。因此，禁用页面文件将影响内存压缩的功能。
4. **隐蔽性**：从隐蔽性的角度来看，WinPE 模式很容易被检测到。目前，在我们的 IceBox 方案中，没有考虑到这一点。

### 总结
本文从虚拟机监控的角度分析了虚拟机的内存访问原理，特别是 Windows 虚拟地址转换的内部机制和针对 L1 终端故障漏洞的缓解措施。通过对内存内部结构的深入了解，我们可以访问任意存在于内存中的物理页面，并解决页面未映射到物理内存的问题。

随后，我们描述了 VMI 如何在其初始化阶段自动配置 Windows 虚拟机，以强制将任何页面持久性地映射到内存中。所有这些都在 IceBox 中实现，可以实现以下自动功能：
1. 禁用页面文件，以避免分页机制；
2. 启用 WinPE 模式，避免 Subsection PTE 直接引用磁盘上的页面。

综合评估对系统的影响以及内存自省带来的优势，我们认为进行以上调整的好处大于其缺点。