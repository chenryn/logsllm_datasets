80%的问题
CPU高 IO高 SQL慢
解决问题 - CPU相关命令
• top
• mpstat
• pidstat
• perf
解决问题 - IO相关命令
• iostat
• iotop
• pidstat
解决问题 - 数据库相关视图
解决问题 - 执⾏计划
EXPLAIN SELECT *
执行计划代价
FROM users AS u1, messages AS m, users AS u2
WHERE u1.id = m.sender_id AND m.receiver_id = u2.id;
QUERY PLAN
-----------------------------------------------------------------------------------
Hash Join (cost=540.00..439429.44 rows=10003825 width=27)
Hash Cond: (m.receiver_id = u2.id)
-> Hash Join (cost=270.00..301606.84 rows=10003825 width=23)
Hash Cond: (m.sender_id = u1.id) 行数评估
-> Seq Scan on messages m (cost=0.00..163784.25 rows=10003825 width=19)
-> Hash (cost=145.00..145.00 rows=10000 width=4)
-> Seq Scan on users u1 (cost=0.00..145.00 rows=10000 width=4)
-> Hash (cost=145.00..145.00 rows=10000 width=4)
-> Seq Scan on users u2 (cost=0.00..145.00 rows=10000 width=4)
10%的问题
1.了解TCP原理
如何分析和定位
网络类问题 2.抓包、wireshark分析
3.了解PG的前端协议
【案例】⽹络延迟不同插⼊性能差异很⼤
Ping延迟1ms，1000条插入耗时4s
【案例】⽹络延迟不同插⼊性能差异很⼤
Ping延迟0.1ms，1000条插入耗时500ms
【案例】⽹络延迟不同插⼊性能差异很⼤
tcpdump -i eth0 port 3433 -s 0 -w t.cap
【案例】⽹络延迟不同插⼊性能差异很⼤
B代表bind，d代表Describe，e代表execute
【案例】⽹络延迟不同插⼊性能差异很⼤
C代表command complete
【案例】⽹络延迟不同插⼊性能差异很⼤
结论 解法
单⾏插⼊1条⽹络消耗时间就达到 使⽤insert into values(),(),()的⽅
2ms，1000条insert语句，消耗在 式批量进⾏发送，避免⽹络的多次
⽹络的rt时间就达到2s。 交互。
10%的问题
需要的技能
1.能够阅读内核代码
数据库内核
相关问题 2.gdb,pstack,systemtap,
perf等
【案例】vacuum为何造成TPS抖动
ClogControlLock的争抢是产⽣TPS抖动的原因
【案例】vacuum为何造成TPS抖动
调整clog buffer大小后，ClogControlLock的争抢明显降低
【案例】内存异常增⻓
1条insert语句，⽤了30多GB内存?
【案例】内存异常增⻓
gdb -p pid
(gdb) p MemoryContextStats(TopMemoryContext)
可以看出在ExecutorState
过程下ExprContext占⽤了
⼤量的内存
【案例】内存异常增⻓
查看执⾏计划，发现
是hashagg
【案例】内存异常增⻓
- 关闭HashAggregate后，查看执行计划
【案例】内存异常增⻓
- 内存使用明显降低