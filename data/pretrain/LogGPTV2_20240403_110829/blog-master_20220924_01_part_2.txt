再次安装插件成功  
```  
digoaldeAir:~ digoal$ psql  
psql (14.5)  
Type "help" for help.  
postgres=# create extension duckdb_fdw ;  
CREATE EXTENSION  
```  
10、启动duckdb并生成测试数据  
```  
cd ~/Downloads/duckdb/build/release  
./duckdb ./tmp  
create table t1 (gid int primary key, info text, crt_time timestamp);  
create table t2 (cid int primary key, info text, crt_time timestamp);  
create table t3 (gid int, cid int, c1 int, c2 int, c3 int, c4 int, c5 int);  
insert into t1 select generate_series, md5(random()::text), now()+(generate_series||' second')::interval from generate_series(1,100);  
insert into t2 select generate_series, md5(random()::text), now()+(generate_series||' second')::interval from generate_series(1,100);  
insert into t3 select floor(random()*100)+1, floor(random()*100)+1, random()*10, random()*100, random()*1000, random()*10000, random()*100000 from generate_series(1,10000000);  
```  
11、导出测试数据到parquet文件, 然后删除duckdb数据文件  
```  
COPY t1 TO 't1.parquet' (FORMAT 'PARQUET');  
COPY t2 TO 't2.parquet' (FORMAT 'PARQUET');  
COPY t3 TO 't3.parquet' (FORMAT 'PARQUET');  
.quit  
```  
```  
rm -f ./tmp  
```  
12、启动duckdb, 创建parquet文件的视图, 并持久化schema.  
```  
./duckdb ./db  
create view t1 as select * from read_parquet('/Users/digoal/Downloads/duckdb/build/release/t1.parquet');  
create view t2 as select * from read_parquet('/Users/digoal/Downloads/duckdb/build/release/t2.parquet');  
create view t3 as select * from read_parquet('/Users/digoal/Downloads/duckdb/build/release/t3.parquet');  
checkpoint;  
```  
13、在PG中使用duckdb_fdw查询parquet文件.  
速度杠杠的.  
pushdown非常完美.   
- Support update to foreign table  
- WHERE clauses are pushdowned  
- Aggregate function are pushdowned  
- Order By is pushdowned  
- Joins (left/right/inner) are pushdowned  
- Limit and Offset are pushdowned (`*when all tables queried are fdw`)  
psql  
```  
CREATE SERVER DuckDB_server FOREIGN DATA WRAPPER duckdb_fdw OPTIONS (database '/Users/digoal/Downloads/duckdb/build/release/db');  
IMPORT FOREIGN SCHEMA public FROM SERVER DuckDB_server INTO public;  
postgres=# CREATE SERVER DuckDB_server FOREIGN DATA WRAPPER duckdb_fdw OPTIONS (database '/Users/digoal/Downloads/duckdb/build/release/db');  
CREATE SERVER  
postgres=#   
postgres=# IMPORT FOREIGN SCHEMA public FROM SERVER DuckDB_server INTO public;  
IMPORT FOREIGN SCHEMA  
postgres=# \dt  
Did not find any relations.  
postgres=# \det  
     List of foreign tables  
 Schema | Table |    Server       
--------+-------+---------------  
 public | t1    | duckdb_server  
 public | t2    | duckdb_server  
 public | t3    | duckdb_server  
(3 rows)  
postgres=# explain verbose select count(distinct gid) from t3;  
                         QUERY PLAN                            
-------------------------------------------------------------  
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)  
   Output: (count(DISTINCT gid))  
   SQLite query: SELECT count(DISTINCT "gid") FROM main."t3"  
(3 rows)  
postgres=# \timing  
Timing is on.  
postgres=# select count(distinct gid) from t3;  
 count   
-------  
   100  
(1 row)  
Time: 392.874 ms  
postgres=# select count(distinct gid),count(*) from t3;  
 count |  count     
-------+----------  
   100 | 10000000  
(1 row)  
Time: 334.183 ms  
postgres=# explain verbose select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.gid;  
                                                             QUERY PLAN                                                               
------------------------------------------------------------------------------------------------------------------------------------  
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)  
   Output: (count(DISTINCT t3.gid)), (count(*))  
   SQLite query: SELECT count(DISTINCT r1."gid"), count(*) FROM (main."t3" r1 INNER JOIN main."t1" r2 ON (((r1."gid" = r2."gid"))))  
(3 rows)  
Time: 5.628 ms  
postgres=# select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.gid;  
 count |  count     
-------+----------  
   100 | 10000000  
(1 row)  
Time: 374.945 ms  
postgres=# select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.gid join t2 on t3.cid=t2.cid;  
 count |  count     
-------+----------  
   100 | 10000000  
(1 row)  
Time: 644.500 ms  
postgres=# explain verbose select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.gid join t2 on t3.cid=t2.cid;  
                                                                                        QUERY PLAN                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)  
   Output: (count(DISTINCT t3.gid)), (count(*))  
   SQLite query: SELECT count(DISTINCT r1."gid"), count(*) FROM ((main."t3" r1 INNER JOIN main."t1" r2 ON (((r1."gid" = r2."gid")))) INNER JOIN main."t2" r4 ON (((r1."cid" = r4."cid"))))  
(3 rows)  
Time: 1.477 ms  
```  
14、将数据导入Pg本地, 做同样的查询看一下时间.  
postgresql 本地计算  
```  
postgres=# create unlogged table lt1 as select * from t1;  
SELECT 100  
postgres=# create unlogged table lt2 as select * from t2;  
SELECT 100  
postgres=# create unlogged table lt3 as select * from t3;  
SELECT 10000000  
postgres=# \timing  
Timing is on.  
postgres=# select count(distinct gid) from lt3;  
 count   
-------  
   100  
(1 row)  
Time: 14891.356 ms (00:14.891)  
```  
强制开启并行, 并不能提速, 笔记本实在太差.  
```  
alter table lt3 set (parallel_workers =4);  
set max_parallel_workers_per_gather =2;  
set max_parallel_workers=4;  
set parallel_leader_participation =off;  
set parallel_tuple_cost =0;  
set parallel_setup_cost =0;  
set min_parallel_table_scan_size =0;  
set min_parallel_index_scan_size =0;  
postgres=# explain select count(distinct gid) from lt3;  
                                    QUERY PLAN                                       
-----------------------------------------------------------------------------------  
 Aggregate  (cost=178092.62..178092.63 rows=1 width=8)  
   ->  Gather  (cost=0.00..153092.74 rows=9999949 width=8)  
         Workers Planned: 2  
         ->  Parallel Seq Scan on lt3  (cost=0.00..153092.74 rows=4999974 width=8)  
(4 rows)  
postgres=# select count(distinct gid) from lt3;  
 count   
-------  
   100  
(1 row)  
Time: 24974.928 ms (00:24.975)  
```  
还是关闭并行吧, 把其他sql都查完.  
```  
postgres=# select count(distinct gid),count(*) from lt3;  
 count |  count     
-------+----------  
   100 | 10000000  
(1 row)  
Time: 17942.474 ms (00:17.942)  
postgres=# select count(distinct t3.gid),count(*) from lt3 t3 join lt1 t1 on t3.gid=t1.gid;  
 count |  count     
-------+----------  
   100 | 10000000  
(1 row)  
Time: 19777.162 ms (00:19.777)  
postgres=# select count(distinct t3.gid),count(*) from lt3 t3 join lt1 t1 on t3.gid=t1.gid join lt2 t2 on t3.cid=t2.cid;  
 count |  count     
-------+----------  
   100 | 10000000  
(1 row)  
Time: 22716.788 ms (00:22.717)  
```  
2011年的mac book air 11, 机器确实差, 但是duckdb也是同台竞技哈.  
## tpch with duckdb_fdw+parquet 测试  
```  
cd /Users/digoal/Downloads  
$ ./duckdb /Users/digoal/Downloads/digoal.db.new    
D install tpch;    
D load tpch;    
D copy (select query from tpch_queries()) to '/Users/digoal/duckdb/build/release/tpch.sql' with (quote '');      
D call dbgen(sf='10');    
D EXPORT DATABASE '/Users/digoal/duckdb/build/release/tpch_20220901' (FORMAT PARQUET);      
D .quit  
rm -f /Users/digoal/Downloads/digoal.db.new    
./duckdb /Users/digoal/Downloads/digoal.db.parquet    