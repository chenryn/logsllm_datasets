l
i
t
y
x is unique
t
n
Integrity
e
r
A g
t
n
e
n
r m a
P e
possible(x)
Permanent Validity
valid(x)
Figure 4. OTC properties graphically
choose its proposal with care. To this end, it monitors the
ﬁrst-round OTC predicates possible(x) and valid(x) for all
x (Figure 3). It waits until either (i) possible(x) is false for
all x, and proposes its original proposal, or (ii) possible(x)
holds for exactly one x and valid(x) holds, then it proposes
x. In a sense, valid(x) and possible(x) ensure recoverabil-
ity of the decision in case of failures. Subsequent rounds
proceed in a similar way; digital signatures are needed only
if the ﬁrst round does not decide [30].
2.4. OTC properties
As summarized in Figure 3, OTC equips each process
with two actions: propose(x) and stop, as well as three
predicates: valid(x), possible(x), and decision(x). These
primitives satisfy the following properties [30]:
Integrity. If valid(x) holds at an honest process, then an
honest process executed propose(x).
Possibility. If decision(x) holds at an honest process, then
possible(x) holds at all honest processes, at all times.
Permanent Validity. Statement possible(x) ⇒ valid(x)
holds at any complete process (see below).
Permanent Agreement. Predicate possible(x) holds for
at most one x at any complete process.
Optimistic Termination (X, C, k). If all processes in the
set X propose x, and all processes in the set C are cor-
rect, and none of them execute stop, then decision(x)
will hold at all correct processes in k communication
steps. The sets satisfy X ⊆ C ⊆ P = {p1, . . . , pn}.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20071
2
3
4
5
6
when a process executes propose(x) do
broadcast (cid:6)x : 1(cid:7)
when a process received (cid:6)x : i(cid:7) from all p ∈ XCi do
broadcast (cid:6)x : i + 1(cid:7)
predicate decision(x) holds iff
received (cid:6)x : i(cid:7) from all p ∈ XCi and i = 1, . . . , k
Figure 5. Pred. decision(x) for OT (X, C, k)
Properties Integrity and Possibility just formalize the
deﬁnitions of valid(x) and possible(x) from Figure 3.
In Permanent Validity and Permanent Agreement,
an honest process p is complete if all correct processes ex-
ecuted stop, and p received all messages sent by those pro-
cesses before or during executing stop1. These properties
ensure that the second and later coordinators will not block
waiting to establish a safe proposal. Permanent Validity and
Permanent Agreement are stronger than standard (Uniform)
Validity and Agreement required by Consensus (Figure 4)
[30].
Because of a more general failure model, our Optimistic
Termination (OT) property is more general than that in [30].
It ensures that, under some favourable conditions described
by sets X and C, OTC will decide in k steps. In favourable
runs, in which decision is taken in the ﬁrst round, the latency
of Consensus is k+1: the latency k of OTC plus one step for
the coordinator’s proposal to reach the processes (Figure 2).
Example. Consider a system P = {p1, p2, p3, p4}, with
at most one pi (maliciously) faulty, and an OTC algorithm,
similar to that in Figure 2, which decides in one step if all
processes are correct, and in two otherwise. Such an algo-
rithm satisﬁes ﬁve OT conditions: (P \ {pi}, P \ {pi}, 2)
for i = 1, 2, 3, 4, and (P, P, 1).
Although each OT condition (X, C, k) is a requirement,
it easily translates into an implementation of the predicate
decision(x). For example, for the ﬁve above OT condi-
tions, decision(x) must hold if (i) there is a three-process
set C such that all processes in C report that all pro-
cesses in C report proposing x, or (ii) all processes report
proposing x. Figure 5 shows a simple algorithm deﬁning
decision(x) that satisﬁes a given OT (X, C, k) but not nec-
essarily other OTC properties. There, XCi means X for
i = 1, and C otherwise. The above OT conditions result in
the following ﬁve message patterns:
1Note that process p does not know which processes are correct, so it
does not know whether it is complete or not.
Manual veriﬁcation. This section shows an example of
a manual veriﬁcation of an OTC protocol satisfying a sin-
gle OT condition (P, P, 1). This condition requires an OTC
to decide if all processes are correct and propose the same
value. General OTC constructions and proofs are in [30].
Predicate valid(x) ensures that at least one honest pro-
cess proposed x. Since we assume at most one malicious
process (and OTC properties must hold even if no decision
is made), we can deﬁne valid(x) to hold when two or more
processes report proposing x (Figure 3).
Condition OT (P, P, 1) implies that decision(x) holds if
x was received from all four processes. At most one process
is malicious, so if more than one process reports proposing a
non-x or executing stop, value x will never become a deci-
sion. Thus, possible(x) holds if at most one process reports
proposing a non-x or executing stop.
Having constructed all three predicates, we can now
check Permanent Validity and Permanent Agreement.
A complete process has received all messages from at least
three processes. If possible(x) holds, then at most one is a
non-x, so at least two are x, which implies valid(x) (Per-
manent Validity). Those two x messages are non-y for any
y (cid:9)= x, so possible(y) cannot hold (Permanent Agreement).
3. Automated veriﬁcation
For any two predicates p(x) and q(x), let “p(x) ≤ q(x)”
be deﬁned as “p(x) =⇒ q(x)”, that is, as the standard
arithmetic “≤” with TRUE=1 and FALSE=0. For example,
predicate decision(x) is increasing in time (a decision can-
not be unmade), whereas possible(x) is decreasing in time
(a once impossible decision cannot become possible again).
With this formalism, the manual veriﬁcation process can
be described as follows. First, use the Validity condition to
deﬁne the maximum possible predicate valid(x). Then, use
OT to deﬁne the minimum decision(x), and use it together
with Possibility to get the minimum possible(x):
Validity =⇒ max valid(x)
Optimistic Termination =⇒ min decision(x)
Possibility + min decision(x) =⇒ min possible(x)
Having deﬁned the predicates, we can check whether Per-
manent Validity and Permanent Agreement hold. Note that
these two properties, viewed as Boolean formulae, are in-
creasing wrt. valid(x) and decreasing wrt. possible(x).
Therefore, if they do not hold for the maximum valid(x)
and the minimum possible(x), they cannot hold at all.
To save space, the rest of this paper is devoted to verify-
ing Permanent Agreement, which generally implies Perma-
nent Validity [30]. For testing Permanent Validity see [29].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007{ theemptyset}
{ ε: emptyseq.}
state ← ∅
when a process executes propose(x) do
incorporate (cid:6)x : ε(cid:7) into the state
when a process receives (cid:6)x : q1 . . . qi−1(cid:7) from qi do
incorporate (cid:6)x : q1 . . . qi(cid:7) into the state
function incorporate (cid:6)x : q1 . . . qi(cid:7) into the state is
if (cid:6)y : q1 . . . qi(cid:7) /∈ state for any y then
insert (cid:6)x : q1 . . . qi(cid:7) into state
broadcast (cid:6)x : q1 . . . qi(cid:7)
1
2
3
4
5
6
7
8
9
10 when a process executes stop do
11
12
for all sequences q1 . . . qi do
incorporate (cid:6)⊥ : q1 . . . qi(cid:7) into the state
{ including ε }
Figure 6. Evolution of states
3.1. Events and states
I employ a full-information approach, in which each pro-
cess’ state represents its full knowledge about the system.
When a process executes an action (propose(x) or stop) or
receives a message, this event is added to the process’ state
and broadcast to others. At any given time, the state of a
process is a sequence of events experienced so far.
Consider runs in which no stop is performed. I assume
that, in such runs, the order of events does not matter, and
the state of a process is actually a set of events, not a se-
quence. If the order of events at some process p mattered
and p failed, then other processes could never learn about it,
rendering OTC properties impossible to satisfy.
If the order of events does not matter, then the only
effect of experiencing them is adding them to the state
set and informing other processes about them. For exam-
ple, executing propose(x) broadcasts (cid:6)x : ε(cid:7), where ε is
the empty sequence (Figure 6). When a process receives
(cid:6)x : ε(cid:7) from some process q1, it adds (cid:6)x : q1(cid:7) to its state and
broadcasts (cid:6)x : q1(cid:7)2. In general, receiving (cid:6)x : q1 . . . qi−1(cid:7)
requires broadcasting (cid:6)x : q1 . . . qi(cid:7). Event (cid:6)x : q1 . . . qi(cid:7)
means “qi claims that qi−1 claims that . . . q1 claims to have
proposed x”. I say “claims” because some of the processes
are malicious and can lie. This algorithm (Figure 6) can be
viewed as a more reﬁned version of that in Figure 5.
The test in line 7 deserves an explanation. No honest pro-
cess proposes two different values, so if we receive (cid:6)x : ε(cid:7)
and (cid:6)y : ε(cid:7) from the same process q1, then we can ignore
the latter. This means that honest processes will never send
(cid:6)x : q1(cid:7) with two different x’s; if we receive such, then the
sender is malicious and its messages can be ignored. By in-
duction, we need to pay attention only to the ﬁrst message
2In this paper, pi is the name of i-th process in P = {p1, . . . , pn},
and qi is the i-th process in a given sequence of processes.
of the form (cid:6)x : q1 . . . qi(cid:7) for any given sequence q1 . . . qi.
The purpose of the stop action is to put the process into a
ﬁnal, unchangeable state [30]. Lines 10–12 accomplish this
by ﬁlling all the “unused” sequences in the state with the
special symbol “⊥”. After this operation, the test in line 7
will never succeed again.
3.2. State formalism
A state is an arbitrary set of events, not necessarily
received by the same process, and possibly conﬂicting
(eg. {(cid:6)1 : p1p2(cid:7),(cid:6)2 : p1p2(cid:7)}). Each event is of the form
(cid:6)x : α(cid:7) where α = q1 . . . qi is a sequence of processes. By
analogy, for any set A of sequences, (cid:6)x : A(cid:7) denotes the
state consisting of all events (cid:6)x : α(cid:7) with α ∈ A:
(cid:6)x : A(cid:7) def= {(cid:6)x : α(cid:7) | α ∈ A}.
For example, (cid:6)2 : {p1p2, p2}(cid:7) = {(cid:6)2 : p1p2(cid:7),(cid:6)2 : p2(cid:7)}
(1)
The opposite operation, extracting the set of sequences
corresponding to a given proposal x, can be accomplished
using the following operator:
S(x) def= { α | (cid:6)x : α(cid:7) ∈ S }.
(2)
For example, if S = {(cid:6)1 : p1(cid:7),(cid:6)2 : p2(cid:7),(cid:6)1 : p1p2(cid:7)}, then
S(1) = {p1, p1p2} and S(2) = {p2}.
3.3. Minimum decision(x) and possible(x)
Figure 5 deﬁned a predicate decision(x) for a single OT
condition (X, C, k). Using the model from this section, the
minimum decision(x) predicate holds at a process iff it ex-
perienced all the events (cid:6)x : D(cid:7) (see (1)), where
D = { q1 . . . qi | q1 ∈ X, q2, . . . , qi ∈ C, 1 ≤ i ≤ k }.
(3)
For example, for OT (cid:6){p1},{p1p2}, 3(cid:7), we have
D = {p1, p1p1, p1p2, p1p1p1, p1p1p2, p1p2p1, p1p2p2}.
Denoting the set of D’s corresponding all required OTs
by D, the minimum predicate decision(x) in state S is
def⇔ S(x) ⊇ D for some D ∈ D.
decision(x)
(4)
The minimum possible(x) holds if the possibility of
having decision(x) somewhere in the system is consistent
with the process’ knowledge. In other words, possible(x)
means that we can add (cid:6)x : D(cid:7) to the process state, and still
get a state that is consistent. I will now present a formalism
that allows us to express this requirement in a formal way.
3.4. State consistency
The notion of state consistency is based on two concepts:
event conﬂict and event inference.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Conﬂict. Events (cid:6)x : α(cid:7) and (cid:6)y : β(cid:7) conﬂict if they have
different proposal values and the same sequence of pro-
cesses (x (cid:9)= y and α = β). For example, (cid:6)1 : p1p3(cid:7) and
(cid:6)2 : p1p3(cid:7) conﬂict, whereas (cid:6)1 : p1p3(cid:7) and (cid:6)2 : p1p2(cid:7) do
not. Only malicious processes produce conﬂicting events.
α, for which some events (cid:6)z : α(cid:7) ∈ S conﬂict:
conﬂict(S) def= { α | ∃ x(cid:9)= y : (cid:6)x : α(cid:7) ∈ S ∧ (cid:6)y : α(cid:7) ∈ S }.
For example,
For any state S, let conﬂict(S) to be the set of sequences