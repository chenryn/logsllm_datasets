# Playing with Web Application Firewalls

**DEFCON 16, August 8-10, 2008, Las Vegas, NV, USA**
**http://ws.hackaholic.org**

## Speaker: Wendel Guglielmetti Henrique

- **Penetration Test Analyst** at SecurityLabs - Intruders Tiger Team Security division (http://www.intruders.com.br)
  - One of the leading companies in the segment in Brazil, serving government and credit card industry clients.
- **Affiliated with Hackaholic Team** (http://hackaholic.org/)
- **IT Experience**: Since 1997, with a focus on computer security for the past 7 years.
- **Vulnerability Discoveries**: Identified vulnerabilities in various software programs such as webmails, access points, Citrix Metaframe, etc.
- **Published Tools**: Wrote tools featured in national magazines like PCWorld Brazil and international ones like Hakin9 Magazine.
- **Speaker at Conferences**: Presented at renowned Brazilian conferences such as H2HC, Code Breakers, and international events like IT Underground 2006 in Italy and IT1TK1 2007 in Mexico.

---

## Agenda:
- **What is WAF?**
- **Types of Operation Modes**
- **Common Topology**
- **Passive or Reactive?**
- **Tricks to Detect WAF Systems**
- **Tricks to Fingerprint WAF Systems**
- **Generic Evasion Techniques**
- **Specific Techniques to Evasion WAF Systems**
- **What Does It Fail to Protect?**

---

### What is WAF?

**Web Application Firewall (WAF)**: An intermediary device positioned between a web client and a web server. It analyzes OSI Layer-7 messages for violations of programmed security policies, protecting the web server from attacks.

**Source**: Web Application Security Consortium Glossary (http://www.webappsec.org/projects/glossary/#WebApplicationFirewall)

- **Deep Packet Inspection**: WAFs inspect every request and response within HTTP/HTTPS/SOAP/XML-RPC/Web Service layers.
- **Attack Signatures and Abnormal Behavior**: Some WAFs detect specific attack signatures, while others identify abnormal behavior that deviates from normal traffic patterns.
- **Deployment Options**: WAFs can be either software or hardware-based and are typically installed in front of a web server to shield it from incoming attacks.

**Additional Notes**:
- Modern WAFs often use both attack signatures and abnormal behavior detection.
- WAFs can be installed directly into the web server machine.
- Many WAFs detect both inbound and outbound attacks.

---

### Types of Operation Modes

1. **Negative Model (Blacklist Based)**
   - **Functionality**: Relies on a database of expected attack signatures.
   - **Example**: Blocks user input matching potential XSS strings like `<script>`, `String.fromCharCode`, etc.
   - **Pros**:
     - Quick to implement.
   - **Cons**:
     - Higher false positives.
     - Increased processing time.
     - Lower protection level.

2. **Positive Model (Whitelist Based)**
   - **Functionality**: Enforces positive behavior by learning the application logic and building a security policy of valid known requests.
   - **Example**: Only allows numeric characters [0-9] in the `id` field of `news.jsp`.
   - **Pros**:
     - Better performance (fewer rules).
     - Fewer false positives.
   - **Cons**:
     - Longer implementation time.
     - Requires skilled human review even with "automatic learning mode."

3. **Mixed Model**
   - **Functionality**: Combines both negative and positive models, with one being predominant.

---

### Common Topology

- **Between the Web Server and Web Client**: Most common.
- **Integrated into the Web Server**: Used in small environments.
- **Connected via Port Mirror (SPAN/RAP)**: Provides better performance.

---

### Passive or Reactive?

- **Most WAFs operate in both modes**.
- **Passive Mode**: Used initially to prevent blocking real users due to false positives.
- **Reactive Mode**: Typically used in production environments.

---

### Tricks to Detect WAF Systems

- **Cookies**: Some WAFs add their own cookies in HTTP communication.
- **Header Rewrite**: WAFs may rewrite HTTP headers, especially the `Server` field.
- **HTTP Response Codes**: Different error codes for the same URL with hostile parameters.
- **Connection Close**: Some WAFs close the connection upon detecting hostile packets.

**Example**:
- **Valid and Non-Hostile Request**:
  ```http
  HTTP/1.1 200 OK
  Date: Fri, 27 Jun 2008 23:14:50 GMT
  Server: Apache/2.2.9 (Unix)
  X-Powered-By: PHP/4.4.7
  Content-Type: text/html
  Content-Length: 71746
  ```
- **Hostile Request**:
  ```http
  HTTP/1.1 404 Not Found
  Date: Fri, 27 Jun 2008 23:20:26 GMT
  Server: Netscape-Enterprise/4.0
  Content-Length: 213
  Content-Type: text/html; charset=iso-8859-1
  ```

---

### Tricks to Fingerprint WAF Systems

- **Built-in Rules**: Each WAF has unique built-in rules for specific vulnerabilities.
- **Set of Attacks**: Create a set of attacks to test for a range of vulnerabilities and identify the WAF product.
- **Mutations**: Use different evasion methods to identify the WAF system and its version more precisely.

**Example**:
- **WAF “A”**:
  - HTTP method different from 1.0 and 1.1 (detected and action taken).
  - Content-Length with non-POST method (not detected).
  - URI with recursive path (detected and action taken).
  - Cookie name matching “cmd=” (detected and action taken).
  - URI matching “/usr/X11R6/bin/xterm” (not detected).

---

### Generic Evasion Techniques

- **Bad Normalization and Canonicalization**: Exploit weak implementations.
- **Weak Rules**: Bypass poorly defined rules.
- **Network and Transport Layer Evasion**: Affect some IPS and WAF systems.

**Common Examples**:
- SQL comments in parameters.
- Random case words in SQL injections.
- SQL query encoding (e.g., hex encoding).
- URI encoding (e.g., Unicode forward slash).
- IP packet fragmentation.

---

### Specific Techniques to Evasion WAF Systems

- **Identify Restrictions**: Use trial and error to identify which combinations of strings and characters are allowed or denied.
- **Reconstruct Queries**: Modify queries to match non-hostile request requirements.

**Real-Life Example**:
- **Citrix Netscaler Bypass**:
  - Remove all “NULL” words.
  - Use query encoding in parts.
  - Remove single quote character “'”.
  - Apply advanced evasion techniques.

---

### What Does It Fail to Protect?

- **XSS (Cross-Site Scripting)**: Highly mutable and difficult to protect against.
- **File Uploads**: Hard to prevent hostile file uploads, especially webshells.
- **Remote Command Execution**: Difficult to detect due to various evasion methods.

---

**Note**: Hackaholic - We have a private forum and are looking for skilled members.
**Questions?**  
wendel (at) security.org.br  
http://ws.hackaholic.org