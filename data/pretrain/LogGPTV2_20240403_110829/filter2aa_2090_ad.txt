babystream
RC4 FMS attack
但是秘钥有点⻓，使⽤了两个脚本都没能⼀次性恢复成功，然后对照两个脚本恢复出来的秘钥，看了下哪些是不⼀
样的，发现只有两个byte不⼀样，然后从拿⼀组明密⽂对，爆破即可
脚本1:
from collections import Counter
import os
from arc4 import ARC4
from pwn import *
from tqdm import *
from Crypto.Util.number import *
from itertools import product
from hashlib import *
key_length = 64
# r = remote('39.106.156.96', '34686')
# # KEY = os.urandom(64)
# # print(KEY)
# ALPHABET = string.ascii_letters + string.digits
# r.recvuntil(b'sha256')
# rec = r.recvline().decode().replace(' ', '')
# print(rec)
# rec = rec[rec.find('+')+1::]
# suffix = rec[rec.find('+')+1:rec.find(')')]
# digest = rec[rec.find('==')+2:-1]
# print(f"suffix: {suffix} \ndigest: {digest}")
# for i in product(ALPHABET, repeat=4):
#     prefix = ''.join(i)
#     guess = prefix + suffix
#     if sha256(guess.encode()).hexdigest() == digest:
#         log.info(f"Find XXXX: {prefix}")
#         break
# r.sendline(prefix.encode())
# # r.interactive()
# r.recvline()
def swapValueByIndex(box, i, j):
    temp = box[i]
    box[i] = box[j]
    box[j] = temp
# Initialize S-box.
def initSBox(box):
    if len(box) == 0:
        for i in range(256):
            box.append(i)
    else:
        for i in range(256):
            box[i] = i
# 收集数据
# iv = [0,255,0]
# rows = []
# for A in tqdm(range(key_length)[:32]):
#     iv[0] = A + 3
#     for thirdByte in range(256):
#         iv[2] = thirdByte
#         iv_ = bytearray(iv)
#         iv_ = bytes(iv_).hex()
#         p = b"\x00".hex()
#         payload = iv_ + "||" + p
#         r.sendline(payload)
#         cipherByte = bytes.fromhex(r.recvline().decode().strip())
#         # cipherByte = ARC4(bytes(bytearray(iv) + KEY)).encrypt(b'\x00')
#         rows.append([iv[0],iv[1],iv[2],cipherByte])
# print(rows)
# 为了加快速度，前32的rows信息存在了1.txt, 后32的rows存在了2.txt
with open('1.txt', 'r') as f:
    data = eval(f.read().strip())
with open('2.txt', 'r') as f:
    data += eval(f.read().strip())
rows = data
box = []
plainKnown = b"\x00"
key = [None] * 3
for A in range(key_length):
    prob = [0] * 256
    for row in rows:
        key[0] = int(row[0])
        key[1] = int(row[1])
        key[2] = int(row[2])
        j = 0
        initSBox(box)
        for i in range(A + 3):
            j = (j + box[i] + key[i]) % 256
            swapValueByIndex(box, i, j)
            if i == 1:
脚本2 & 对⽐秘钥并且爆破:
                original0 = box[0]
                original1 = box[1]
        i = A + 3
        z = box[1]
        if z + box[z] == A + 3:
            if (original0 != box[0] or original1 != box[1]):
                continue
            keyStreamByte = int(bytes_to_long(row[3])) ^ int(plainKnown.hex(), 16)
            keyByte = (keyStreamByte - j - box[i]) % 256
            prob[keyByte] += 1
        higherPossibility = prob.index(max(prob))
    key.append(higherPossibility)
    print(key)
userInput = key[3:]
res = b''
for x in userInput:
    res += long_to_bytes(x)
print(res)
# flag = b"flag{" + md5(res).hexdigest().encode() + b"}"
# print(flag)
from collections import Counter
from arc4 import ARC4
from pwn import *
import string
from tqdm import *
from hashlib import *
from itertools import product
# r = remote('39.106.156.96', '34686')
# context(log_level='debug')
ALPHABET = string.ascii_letters + string.digits
# r.recvuntil(b'sha256')
# rec = r.recvline().decode().replace(' ', '')
# print(rec)
# rec = rec[rec.find('+')+1::]
# suffix = rec[rec.find('+')+1:rec.find(')')]
# digest = rec[rec.find('==')+2:-1]
# print(f"suffix: {suffix} \ndigest: {digest}")
# for i in product(ALPHABET, repeat=4):
#     prefix = ''.join(i)
#     guess = prefix + suffix
#     if sha256(guess.encode()).hexdigest() == digest:
#         log.info(f"Find XXXX: {prefix}")
#         break
# r.sendline(prefix.encode())
# # r.interactive()
# r.recvline()
# r.interactive()
# def possible_key_bit(key, c):
#     s = [i for i in range(256)]
#     j = 0
#     for i in range(len(key)):
#         j = (j + s[i] + key[i]) % 256
#         tmp = s[i]
#         s[i] = s[j]
#         s[j] = tmp
#     return (c[0] - j - s[len(key)]) % 256
# def attack(encrypt_oracle, key_len):
#     """
#     Recovers the hidden part of an RC4 key using the Fluhrer-Mantin-Shamir attack.
#     :param encrypt_oracle: the padding oracle, returns the encryption of a plaintext 
under a hidden key concatenated with the iv
#     :param key_len: the length of the hidden part of the key
#     :return: the hidden part of the key
#     """
#     key = bytearray([3, 255, 0])
#     known_key = 
bytearray(b"\xb8\xab\xed\xc4\xebe\x1a\x83*\x19\xd6\'\xac\xdf0(\xa3\x8e\xab\xefFvBT\x8c\
x03\xa4(uF\x85\xd6\xc1eb\x1d\xcf\xa0\xd9\x0f\x7fDY\xaaa\xd8\x0c\xf0c\xc6O\xf7\xaaa")
#     key += known_key
#     for a in tqdm(range(key_len)[len(known_key):]):
#         key[0] = a + 3
#         possible = Counter()
#         for x in range(256):
#             key[2] = x
#             # c = encrypt_oracle(key[:3], b"\x00")
#             iv = bytes(key[:3]).hex()
#             p = b"\x00".hex()
#             payload = iv + "||" + p
#             r.sendline(payload)
#             c = bytes.fromhex(r.recvline().decode().strip())
#             possible[possible_key_bit(key, c)] += 1
#         key.append(possible.most_common(1)[0][0])
#         print(key[3:])
创新⽅向
Love
本质上就是个最短路+路径输出
n⽐较⼩只有100，直接floyd了
#     return key[3:]
# key = attack(None, 64)
# print(key)
from Crypto.Util.number import *
key = 
b"\xb8\xab\xed\xc4\xebe\x1a\x83*\x19\xd6'\xac\xdf0(\xa3\x8e\xab\xefFvBT\x8c\x03\xa4(uF\
x85\xd6\xc1eb\x1d\xcf\xa0\xd9\x0f\x7fDY\xaaa\xd8\x0c\xf0c\xc6O\xf7\xaa$\x0e\x1dt\xac3\x
85787j"
key1 = 
b"\xb8\xab\xed\xc4\xebe\x1a\x83*\x19\xd6\'\xac\xdf0(\xa3\x8e\xab\xefFvBT\x8c\x03\xa4(uF
\x85\xd6\xc1eb\x1d\xcf\xa0\xd9\x0f\x7fDY\xaaa\xd8\x0c\xf0c\xc6O\xf7\xaaa\xd1\x1dt\xac3\
x85787j"
for yy in range(256):
    for zz in range(256):
        y = long_to_bytes(yy)
        z = long_to_bytes(zz)
        key2 = 
b"\xb8\xab\xed\xc4\xebe\x1a\x83*\x19\xd6'\xac\xdf0(\xa3\x8e\xab\xefFvBT\x8c\x03\xa4(uF\
x85\xd6\xc1eb\x1d\xcf\xa0\xd9\x0f\x7fDY\xaaa\xd8\x0c\xf0c\xc6O\xf7\xaa" + z + y + 
b"\x1dt\xac3\x85787j"
        a = ARC4(b'\xff\xff' + key2)
        rr = a.encrypt(b'\xff\xff').hex()
        if rr == '735a':
            print(key2)
            flag = b"flag{" + md5(key2).hexdigest().encode() + b"}"
            print(flag)
import torch.nn as nn
import torch.nn.functional as func
import torch
from PIL import Image
from torchvision import transforms
class LeNet(nn.Module):
    def __init__(self):
        super(LeNet,self).__init__()
        self.conv1=nn.Conv2d(3,6,5)
        self.conv2=nn.Conv2d(6,16,5)
        self.linear1=nn.Linear(256,120)
        self.linear2=nn.Linear(120,84)
    def get_vector(self,x):
        x = func.relu(self.conv1(x))
        x = func.max_pool2d(x, 2)
        x = func.relu(self.conv2(x))
        x = func.max_pool2d(x, 2)
        x = x.view(x.size(0), -1)
        x = func.relu(self.linear1(x))
        x = func.relu(self.linear2(x))
        x = x.view(x.size(0), -1)
        return x
net=torch.load('./pretrain.pt',map_location='cpu')
ts=transforms.Compose([transforms.ToTensor()])
vec = []
for i in range(100):
    pic_path = "./pictures/{}.jpg".format(i)
    img = Image.open(pic_path).convert('RGB')
    img = ts(img).reshape([1, 3, 28, 28])
    v = net.get_vector(img).cpu().detach().numpy()[0]
    vec.append(v)
import numpy
numpy.save('./vector.npy',vec)
print('finish')
import numpy as np
n = 100
ks = np.load("./matrix_mask.npy")
dist = np.load("./vector.npy")
simple = np.zeros((100,100))
distance = np.zeros((100,100))
path = np.zeros((100,100))
for i in range(n):
    for j in range(n):
        simple[i][j] = np.linalg.norm(dist[i]-dist[j])
for i in range(n):
    for j in range(n):
        if(i == j):
            pass
trinewbee
打开流量包发现时间很久远，是2018年的。简单分析后发现是triton攻击
NozomiNetworks/tricotools: Triconex TriStation utilities and tools (github.com)
翻到⼀个流量包，拉下来打开发现近乎⼀致。
010editor进⾏diff⼀下
        elif ks[i][j] == 0:
            distance[i][j] = 0x3f3f3f3f
        else:
            distance[i][j] = ks[i][j]/simple[i][j]
path = np.zeros((100,100))
def printPath(i,j):
    i = int(i)
    j = int(j)
    if(i == j):
        return
    if(path[i][j] == 0):
        print(i,j)
    else:
        printPath(i,path[i][j])
        printPath(path[i][j],j)
def floyd(dist):
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    if (i == 76 and j == 86):
                        print(dist[i][j],dist[i][k] + dist[k][j])
                    dist[i][j] = dist[i][k] + dist[k][j]
                    path[i][j] = k
    return dist
print(distance[76][86])
map = floyd(distance)
printPath(76,86)
# 76 23 74 97 79 51 68 40 8 69 32 87 47 86
结合⽂章中提到的
猜测改为了 008003b0