# 一、Docker 概述
欢迎来到*掌握 Docker* *，第三版*！第一章将介绍 Docker 的基础知识，你应该已经掌握了。但是如果你在这一点上还没有所需的知识，这一章将帮助你掌握基础知识，这样后续章节就不会觉得那么沉重。到本书结束时，您应该是一名 Docker 大师，并且能够在您的环境中实现 Docker，在它们之上构建和支持应用。
在本章中，我们将回顾以下高级主题:
*   理解 Docker
*   专用主机、虚拟机和 Docker 之间的区别
*   Docker 安装程序/安装
*   Docker 命令
*   Docker 和容器生态系统
# 技术要求
在本章中，我们将讨论如何在本地安装 Docker。为此，您需要一台运行以下三种操作系统之一的主机:
*   麦考高中及以上
*   Windows 10 专业版
*   Ubuntu 18.04
查看以下视频，了解《行为准则》:
[http://bit.ly/2NXf3rd](http://bit.ly/2NXf3rd)
# 理解 Docker
在我们考虑安装 Docker 之前，让我们先了解一下 Docker 技术旨在解决的问题。
# 开发商
Docker 背后的公司一直将该程序描述为修复了“*它在我的机器上工作”*的问题。这个问题最好用一个基于灾难女孩迷因的图片来总结，这个图片有一个标语*在开发中运行良好，现在是运营问题*，几年前开始出现在演示、论坛和 Slack 频道。虽然这很有趣，但不幸的是，这是一个太真实的问题，也是我个人最关心的问题——让我们看一个例子，说明这是什么意思。
# 问题是
即使在遵循 DevOps 最佳实践的世界中，开发人员的工作环境仍然很容易与最终的生产环境不匹配。
例如，使用例如 PHP 的 macOS 版本的开发人员可能不会运行与托管生产代码的 Linux 服务器相同的版本。即使版本匹配，您也必须处理运行 PHP 版本的配置和整体环境中的差异，例如不同操作系统版本之间处理文件权限的方式差异，这只是一个潜在的问题。
当开发人员需要将他们的代码部署到宿主时，所有这些都变得不可思议，并且不起作用。那么，应该将生产环境配置为与开发人员的机器相匹配，还是开发人员应该只在与生产中使用的环境相匹配的环境中工作？
在理想的世界中，一切都应该是一致的，从开发人员的笔记本电脑一直到您的生产服务器；然而，这个乌托邦传统上很难实现。每个人都有自己的工作方式和个人偏好——当只有一个工程师在系统上工作时，在多个平台上实现一致性就足够困难了，更不用说一个工程师团队与一个可能有数百名开发人员的团队合作了。
# Docker 解决方案
使用 Docker for Mac 或 Docker for Windows，开发人员可以在与系统管理员或运营团队一起工作时，轻松地将他们的代码包装在他们自己定义的容器中，或者创建为 Dockerfile。我们将在[第 2 章](02.html)、*构建容器映像*以及 Docker Compose 文件中对此进行介绍，我们将在[第 5 章](05.html)、 *Docker Compose* 中对此进行更详细的介绍。
他们可以继续使用他们选择的集成开发环境，并在使用代码时维护他们的工作流。正如我们将在本章接下来的章节中看到的，安装和使用 Docker 并不难；事实上，考虑到在过去保持一致的环境是一件多么繁重的家务，即使有自动化，Docker 也觉得有点太容易了——几乎就像作弊一样。
# 经营者
我从事运营工作的时间比我想承认的要长，下面这个问题经常出现。
# 问题是
假设您正在管理五个服务器:三个负载平衡的 web 服务器，以及两个数据库服务器，它们处于专门运行应用 1 的主或从配置中。您正在使用一个工具，如木偶或厨师，来自动管理您的五个服务器的软件栈和配置。
一切都很顺利，直到你被告知*我们需要在运行应用 1* 的相同服务器上部署应用 2。从表面上看，这没有问题——您可以调整您的 Puppet 或 Chef 配置来添加新用户、vhosts、拉下新代码等等。但是，您注意到应用 2 需要您为应用 1 运行的软件的更高版本。
更糟糕的是，您已经知道应用 1 完全拒绝使用新的软件栈，并且应用 2 不是向后兼容的。
传统上，这给你留下了一些选择，所有这些都以这样或那样的方式增加了问题:
1.  要求更多服务器？虽然这在传统上可能是最安全的技术解决方案，但它并不自动意味着会有额外资源的预算。
2.  重新设计解决方案？从技术角度来看，从负载平衡器或复制中取出一个 web 和数据库服务器，并用应用 2 的软件栈重新部署它们，似乎是下一个最简单的选择。但是，您为应用 2 引入了单点故障，也减少了应用 1 的冗余:最初运行三个 web 服务器和两个数据库服务器可能是有原因的。
3.  尝试在您的服务器上并排安装新的软件栈？嗯，这当然是可能的，看起来是一个很好的短期计划，可以让项目走出大门，但它可能会给你留下一堆卡片，当任何一个软件栈都需要第一个关键的安全补丁时，这些卡片可能会倒塌。
# Docker 解决方案
这就是 Docker 开始独辟蹊径的地方。如果您让应用 1 在容器中跨三个 web 服务器运行，那么您实际上可能运行了三个以上的容器；事实上，您可能已经运行了六个，在容器上加倍，允许您运行应用的滚动部署，而不会降低应用 1 的可用性。
在这种环境中部署应用 2 很简单，只需跨三个主机启动更多容器，然后使用负载平衡器路由到新部署的应用。因为您只是在部署容器，所以不需要担心在同一台服务器上部署、配置和管理同一个软件栈的两个版本的后勤工作。
我们将在 [第 5 章](05.html)*Docker Compose*中研究这个确切场景的示例。
# 企业
企业面临着与前面描述的相同的问题，因为它们既有开发人员，也有运营商；然而，他们同时拥有这两个实体，规模要大得多，而且涉及的风险也要大得多。
# 问题是
由于前面提到的风险，以及任何宕机都可能导致销售损失或影响声誉的事实，企业需要在发布之前测试每个部署。这意味着，当发生以下情况时，新特性和修复会停留在保持模式中:
*   测试环境被加速和配置
*   应用部署在新启动的环境中
*   执行测试计划，调整应用和配置，直到测试通过
*   编写、提交和讨论变更请求，以便将更新的应用部署到生产中
这个过程可能需要几天到几周，甚至几个月，这取决于应用的复杂性和变更带来的风险。虽然该流程是确保企业在技术层面的连续性和可用性所必需的，但它确实有可能在业务层面引入风险。如果你有一个新的特性卡在这个保持模式中，而竞争对手在你前面发布了一个类似的——或者更糟的——相同的特性，会怎么样？
这种情况对销售和声誉的损害可能与最初为保护您而实现的流程的停机时间一样大。
# Docker 解决方案
我首先要说的是，Docker 并没有消除像刚才描述的那样的流程存在或被遵循的需要。然而，正如我们已经谈到的，这确实让事情变得容易得多，因为你已经在持续地工作。这意味着您的开发人员一直在使用生产环境中运行的相同容器配置。这意味着这并不是将方法应用于测试的重要步骤。
例如，当开发人员检查他们的代码时，他们知道这些代码可以在他们的本地开发环境中工作(因为这是他们一直在做的工作)，您的测试工具可以启动相同的容器来运行您的自动化测试。一旦容器被使用，它们就可以被移除，为下一批测试释放资源。这意味着，突然间，您的测试过程和步骤变得更加灵活，您可以继续重用同一个环境，而不是为下一组测试重新部署或重新映像服务器。
这种流程的简化可以延伸到让您的新应用容器一直推进到生产。
这个过程完成得越快，你就能越快自信地推出新功能或修复，并保持领先。
# 专用主机、虚拟机和 Docker 之间的区别
所以，我们知道 Docker 是为了解决什么问题而开发的。我们现在需要讨论 Docker 到底是什么，它是做什么的。
Docker 是一个容器管理系统，帮助我们以更简单和通用的方式轻松管理 **Linux 容器(LXC)** 。这使您可以在笔记本电脑上的虚拟环境中创建映像，并对其运行命令。当容器在您的生产环境中运行时，您对容器执行的操作(在这些环境中本地运行于您的机器上)将与您对它们运行的命令或操作相同。
这有助于我们，因为当您从开发环境(如本地计算机上的开发环境)进入服务器上的生产环境时，您不必做不同的事情。现在，让我们看看 Docker 容器和典型虚拟机环境之间的区别。
下图展示了专用裸机服务器和运行虚拟机的服务器之间的区别:
![](img/fc274237-51d9-4aa0-a6f0-25c3f3c46f70.png)
如您所见，对于一台专用机器，我们有三个应用，它们共享同一个橙色软件栈。运行虚拟机允许我们运行三个应用，运行两个完全不同的软件栈。下图显示了使用 Docker 在容器中运行的相同橙色和绿色应用:
![](img/358c4fdb-3334-4301-8fd9-da6571f08edd.png)
这个图让我们对 Docker 最大的关键好处有了很大的了解，那就是每次我们需要调出一个新的容器时，都不需要一个完整的操作系统，这就减少了容器的整体大小。由于几乎所有版本的 Linux 都使用标准内核模型，Docker 依赖于将主机操作系统的 Linux 内核用于其所基于的操作系统，如红帽、CentOS 和 Ubuntu。
由于这个原因，您几乎可以将任何 Linux 操作系统作为您的主机操作系统，并且能够在主机之上分层其他基于 Linux 的操作系统。嗯，也就是说，您的应用被引导相信实际上已经安装了完整的操作系统，但实际上，我们只安装二进制文件，例如包管理器，以及 Apache/PHP 和所需的库，以便获得足够的操作系统来运行您的应用。
例如，在前面的图表中，我们可以让 Red Hat 运行橙色应用，Debian 运行绿色应用，但是永远不需要在主机上实际安装 Red Hat 或 Debian。因此，Docker 的另一个好处是创建映像时的大小。它们的构建没有最大的部分:内核或操作系统。这使得它们非常小，紧凑，易于运输。
# Docker 安装
安装程序是您首先需要在本地计算机和服务器环境中使用 Docker 启动和运行的部分之一。让我们先来看看可以在哪些环境中安装 Docker:
*   Linux(各种 Linux 风格)
*   苹果电脑
*   Windows 10 专业版
此外，您可以在公共云上运行它们，例如亚马逊网络服务、微软 Azure 和数字海洋等。对于前面列出的各种类型的安装程序，Docker 实际上在操作系统上以不同的方式运行。例如，Docker 在 Linux 上本地运行，所以如果您正在使用 Linux，那么 Docker 如何在您的系统上运行是非常简单的。但是，如果您使用的是 macOS 或 Windows 10，那么它的操作方式会有些不同，因为它依赖于使用 Linux。
让我们看看如何在运行 Ubuntu 18.04 的 Linux 桌面上快速安装 Docker，然后在 macOS 和 Windows 10 上安装。
# 在 Linux 上安装 Docker(Ubuntu 18.04)
如前所述，这是我们将看到的三个系统中最简单的安装。要安装 Docker，只需从终端会话运行以下命令:
```
$ curl -sSL https://get.docker.com/ | sh
$ sudo systemctl start docker
```
还会要求您将当前用户添加到 Docker 组。为此，请运行以下命令，确保将用户名替换为您自己的用户名:
```
$ sudo usermod -aG docker username
```
这些命令将从 Docker 自己下载、安装和配置 Docker 的最新版本。在撰写本文时，官方安装脚本安装的 Linux 操作系统版本是 18.06。