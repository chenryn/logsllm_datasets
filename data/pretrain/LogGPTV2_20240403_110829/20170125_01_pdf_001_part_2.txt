### TPC-H 标准测试

#### RF2 操作
- **RF2** 从 `Order` 表和 `Lineitem` 表中删除与 **RF1** 增加的等量数据，以模拟旧销售数据的淘汰。
- **RF1** 和 **RF2** 的执行必须保证数据库的 ACID 约束，并保持测试前后的数据库中的数据量不变。
- 更新操作仅输出成功或失败信息，不产生其他输出信息。

#### TPC-H 测试概述
TPC-H 测试分为三个子测试：数据装载测试、Power 测试和 Throughput 测试。

##### 数据装载测试
- **目的**：测试 DBMS 装载数据的能力。
- **过程**：建立测试数据库，记录装载数据的时间，这是一个耗时的操作。

##### Power 测试
- **前提**：在数据装载测试完成后，数据库处于初始状态，缓冲区未被测试数据填充。
- **要求**：顺序执行 22 个查询，并同时执行一对 **RF1** 和 **RF2** 操作。

##### Throughput 测试
- **特点**：最核心且复杂的测试，更接近实际应用环境。
- **压力**：与 Power 测试相比，系统压力显著增加，涉及多个查询语句组和一对 **RF1** 和 **RF2** 更新流。

#### TPC-H 工具
- **DBGEN**：生成测试数据，用户通过命令行参数控制执行结果。
- **QGEN**：生成 22 个 SELECT 查询及两个更新操作（**RF1** 和 **RD2**）。

#### 数据量规定
- **SF (Scale Factor)**：描述数据量大小，1SF 对应 1GB 单位。SF 取值范围为 1, 10, 30, 100, 300, 1000, 3000, 10000。
- **存储需求**：基本表、索引、临时表、数据文件和备份文件的总存储空间约为 8x（x 为基本表的数据量）。例如，SF=1 时，需要 8GB 存储空间。

### TPC-C 标准测试

#### 支持工具
- **BenchmarkSQL**：支持 Oracle 和 PostgreSQL。
- **sysbench**：支持 MySQL、Oracle 和 PostgreSQL。

#### 安装与配置
1. **下载 BenchmarkSQL**
   - URL: <http://sourceforge.net/projects/benchmarksql/>
2. **安装 JDK7**
   - 下载: <http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk7-downloads-1880260.html>
   - 安装: `wget http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.rpm`
   - 执行: `rpm -ivh jdk-7u79-linux-x64.rpm`
   - 配置环境变量:
     ```bash
     export JAVA_HOME=/usr/java/jdk1.7.0_79
     export PATH=$JAVA_HOME/bin:$PATH
     export CLASSPATH=.:$CLASSPATH
     ```
3. **下载 PostgreSQL JDBC 驱动**
   - `wget https://jdbc.postgresql.org/download/postgresql-9.4.1207.jre7.jar`
   - 移动驱动到 `benchmarksql-4.1.0/lib/`

#### 配置 BenchmarkSQL
- **编辑脚本**：
  - `runBenchmark.sh`
  - `runLoader.sh`
  - `runSQL.sh`
- **修改 log4j 配置**：减少日志打印量，将优先级改为 `info`。
- **连接配置和压测配置**：
  - 仓库数量：1000
  - 数据量：约 5 亿
  - 编辑 `props.pg` 文件，配置相关参数。

#### 创建表结构
1. **创建表结构**：
   ```bash
   cd benchmarksql-4.1.0/run
   ./runSQL.sh props.pg sqlTableCreates
   ```
2. **生成 CSV 文件**：
   ```bash
   ./runLoader.sh props.pg numWarehouses 1000 fileLocation /u02/digoal/soft_bak/benchcsv/
   ```
3. **导入数据库**：
   ```bash
   ./runSQL.sh props.pg sqlTableCopies
   ```
4. **创建约束和索引**：
   ```bash
   ./runSQL.sh props.pg sqlIndexCreates
   ```

#### 备份与压测
- **备份**：
  ```bash
  pg_dump -f /u02/digoal/soft_bak/benchmarksql.dmp -F c -n benchmarksql postgres
  ```
- **压测**：
  ```bash
  nohup ./runBenchmark.sh props.pg >/dev/null 2>./errrun.log &
  ```
- **监控工具**：
  - `perf top`：CPU 时间占比
  - `iostat -x`：块设备使用率、平均 IO 响应时间、队列大小、平均 IO 大小
  - `top`：系统资源使用情况
  - `dstat`：CPU 比例、IO 等
  - `pg_stat_statements`：SQL 请求耗时、IO 调用、CPU 耗时

#### 最佳实践
- **存储层**：
  - 条带大小、条带宽度
  - 对齐：pg_xlog、$PGDATA、user data tablespace、user idx tablespace
- **操作系统优化**：
  - 关闭 NUMA：`vm.zone_reclaim_mode=0`
  - 关闭交换分区：`vm.swappiness = 0`
  - 调整网络参数：`net.core.rmem_max`, `net.core.wmem_max`, `net.core.rmem_default`, `net.core.wmem_default`
  - 脏页管理：`vm.dirty_background_bytes`, `vm.dirty_expire_centisecs`, `vm.dirty_writeback_centisecs`, `vm.dirty_ratio`
  - 大页支持：`vm.nr_hugepages`
  - 内存分配策略：`vm.overcommit_memory`, `vm.overcommit_ratio`
  - GRUB 参数：`numa=off elevator=deadline`

通过以上步骤和配置，可以有效地进行 TPC-H 和 TPC-C 标准测试，并确保系统的性能和稳定性。