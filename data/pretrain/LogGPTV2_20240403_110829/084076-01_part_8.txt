注 意
/etc/config/会被覆盖。
（5）将ConfigMap添加到卷并指定文件名
使用 path 字段可以指定 ConfigMap 挂载的文件名，比如将 special.level 挂载到/etc/config，并
指定名称为keys：
apiVersion: v1
kind: Pod
第2章 Docker及Kubernetes基础 | 99
metadata:
name: dapi-test-pod
spec:
containers:
- name: test-container
image: busybox
command: [ "/bin/sh","-c","cat /etc/config/keys" ]
volumeMounts:
- name: config-volume
mountPath: /etc/config
volumes:
- name: config-volume
configMap:
name: special-config
items:
- key: special.level
path: keys
restartPolicy: Never
此时启动Pod时会打印：very
（6）指定特定路径和文件权限
方式和Secret类似，可参考2.2.10.4节的内容。
4. ConfigMap限制
（1）必须先创建ConfigMap才能在Pod中引用它，如果Pod引用的ConfigMap不存在，
Pod将无法启动。
（2）Pod引用的键必须存在于ConfigMap中，否则Pod无法启动。
（3）使用 envFrom 配置容器环境变量时，默认会跳过被视为无效的键，但是不影响 Pod
启动，无效的变量会记录在事件日志中，如下：
kubectl get events
LASTSEEN FIRSTSEEN COUNT NAME KIND SUBOBJECT TYPE
REASON SOURCE MESSAGE
0s 0s 1 dapi-test-pod Pod Warning
InvalidEnvironmentVariableNames {kubelet, 127.0.0.1} Keys [1badkey,
2alsobad] from the EnvFrom configMap default/myconfig were skipped since they
are considered invalid environment variable names.
（4）ConfigMap和引用它的Pod需要在同一个命名空间。
2.2.10 Secret
Secret对象类型用来保存敏感信息，例如密码、令牌和SSH Key，将这些信息放在Secret中比
较安全和灵活。用户可以创建 Secret 并且引用到 Pod 中，比如使用 Secret 初始化 Redis、MySQL
等密码。
1. 创建Secret
创建Secret的方式有很多，比如使用命令行Kubelet或者使用Yaml/Json文件创建等。
100 | 再也不踩坑的Kubernetes实战指南
（1）使用Kubectl创建Secret
假设有些Pod需要访问数据库，可以将账户密码存储在username.txt和password.txt文件里，
然后以文件的形式创建Secret供Pod使用。
创建账户信息文件：
[root@K8S-master01 ~]# echo -n "admin" > ./username.txt
[root@K8S-master01 ~]# echo -n "1f2d1e2e67df" > ./password.txt
以文件username.txt和password.txt创建Secret：
[root@K8S-master01 ~]# kubectl create secret generic db-user-pass
--from-file=./username.txt --from-file=./password.txt
secret/db-user-pass created
查看Secret：
[root@K8S-master01 ~]# kubectl get secrets db-user-pass
NAME TYPE DATA AGE
db-user-pass Opaque 2 33s
[root@K8S-master01 ~]# kubectl describe secrets/db-user-pass
Name: db-user-pass
Namespace: default
Labels: 
Annotations: 
Type: Opaque
Data
====
password.txt: 12 bytes
username.txt: 0 bytes
默认情况下，get和describe命令都不会显示文件的内容，这是为了防止Secret中的内容被意
外暴露。可以参考2.2.10.2一节的方式解码Secret。
（2）手动创建Secret
手动创建Secret，因为每一项内容必须是base64编码，所以要先对其进行编码：
[root@K8S-master01 ~]# echo -n "admin" | base64
YWRtaW4=
[root@K8S-master01 ~]# echo -n "1f2d1e2e67df" | base64
MWYyZDFlMmU2N2Rm
然后，创建一个文件，内容如下：
[root@K8S-master01 ~]# cat db-user-secret.yaml
apiVersion: v1
kind: Secret
metadata:
name: mysecret
type: Opaque
data:
username: YWRtaW4=
password: MWYyZDFlMmU2N2Rm
第2章 Docker及Kubernetes基础 | 101
最后，使用该文件创建一个Secret：
[root@K8S-master01 ~]# kubectl create -f db-user-secret.yaml
secret/mysecret created
2. 解码Secret
Secret被创建后，会以加密的方式存储于Kubernetes集群中，可以对其进行解码获取内容。
首先以yaml的形式获取刚才创建的Secret：
[root@K8S-master01 ~]# kubectl get secret mysecret -o yaml
apiVersion: v1
data:
password: MWYyZDFlMmU2N2Rm
username: YWRtaW4=
kind: Secret
metadata:
creationTimestamp: 2019-02-09T03:16:19Z
name: mysecret
namespace: default
resourceVersion: "3811354"
selfLink: /api/v1/namespaces/default/secrets/mysecret
uid: 11e49e9f-2c19-11e9-8f6f-000c298bf023
type: Opaque
然后通过--decode解码Secret：
[root@K8S-master01 ~]# echo "MWYyZDFlMmU2N2Rm" | base64 --decode
1f2d1e2e67df
3. 使用Secret
Secret可以作为数据卷被挂载，或作为环境变量以供Pod的容器使用。
（1）在Pod中使用Secret
在Pod中的volume里使用Secret：
①首先创建一个Secret或者使用已有的Secret，多个Pod可以引用同一个Secret。
②在spec.volumes下增加一个volume，命名随意，spec.volumes.secret.secretName必须和Secret
对象的名字相同，并且在同一个Namespace中。
③将 spec.containers.volumeMounts 加到需要用到该 Secret 的容器中，并且设置
spec.containers.volumeMounts.readOnly = true。
④使用spec.containers.volumeMounts.mountPath指定Secret挂载目录。
例如，将名字为mysecret的Secret挂载到Pod中的/etc/foo：
apiVersion: v1
kind: Pod
metadata:
name: mypod
spec:
containers:
- name: mypod
image: redis
102 | 再也不踩坑的Kubernetes实战指南
volumeMounts:
- name: foo
mountPath: "/etc/foo"
readOnly: true
volumes:
- name: foo
secret:
secretName: mysecret
用到的每个 Secret 都需要在 spec.volumes 中指明，如果 Pod 中有多个容器，每个容器都需要
自己的 volumeMounts 配置块，但是每个 Secret 只需要一个 spec.volumes，可以根据自己的应用场
景将多个文件打包到一个Secret中，或者使用多个Secret。
（2）自定义文件名挂载
挂载Secret时，可以使用spec.volumes.secret.items字段修改每个key的目标路径，即控制Secret
Key在容器中的映射路径。
比如：
apiVersion: v1
kind: Pod
metadata:
name: mypod
spec:
containers:
- name: mypod
image: redis
volumeMounts:
- name: foo
mountPath: "/etc/foo"
readOnly: true
volumes:
- name: foo
secret:
secretName: mysecret
items:
- key: username
path: my-group/my-username
上述挂载方式，将mysecret中的username存储到了/etc/foo/my-group/my-username文件中，而
不是/etc/foo/username（不指定items），由于items没有指定password，因此password不会被挂载。
如果使用了spec.volumes.secret.items，只有在items中指定的key才会被挂载。
挂载的Secret在容器中作为文件，我们可以在Pod中查看挂载的文件内容：
$ ls /etc/foo/
username
password
$ cat /etc/foo/username
admin
$ cat /etc/foo/password
1f2d1e2e67df
第2章 Docker及Kubernetes基础 | 103
（3）Secret作为环境变量
Secret可以作为环境变量使用，步骤如下：
①创建一个Secret或者使用一个已存在的Secret，多个Pod可以引用同一个Secret。
②为每个容器添加对应的Secret Key环境变量env.valueFrom.secretKeyRef。
比如，定义SECRET_USERNAME和SECRET_PASSWORD两个环境变量，其值来自于名字
为mysecret的Secret：
apiVersion: v1
kind: Pod
metadata:
name: secret-env-pod
spec:
containers:
- name: mycontainer
image: redis
env:
- name: SECRET_USERNAME
valueFrom:
secretKeyRef:
name: mysecret
key: username
- name: SECRET_PASSWORD
valueFrom:
secretKeyRef:
name: mysecret
key: password
restartPolicy: Never
挂载成功后，可以在容器中使用此变量：
$ echo $SECRET_USERNAME
admin
$ echo $SECRET_PASSWORD
1f2d1e2e67df
4. Secret文件权限
Secret默认挂载的文件的权限为0644，可以通过defaultMode方式更改权限：
apiVersion: v1
kind: Pod
metadata:
name: mypod
spec:
containers:
- name: mypod
image: redis
volumeMounts:
- name: foo
mountPath: "/etc/foo"
volumes:
- name: foo
secret:
104 | 再也不踩坑的Kubernetes实战指南
secretName: mysecret
defaultMode: 256
更改的Secret挂载到/etc/foo目录的文件权限为0400。新版本可以直接指定400。
5. imagePullSecret
在拉取私有镜像库中的镜像时，可能需要认证后才可拉取，此时可以使用 imagePullSecret 将
包含Docker镜像注册表密码的Secret传递给Kubelet，然后即可拉取私有镜像。
Kubernetes支持在Pod中指定Registry Key，用于拉取私有镜像仓库中的镜像。
首先创建一个镜像仓库账户信息的Secret：
$kubectl create secret docker-registry myregistrykey
--docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER
--docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL
如果需要访问多个Registry，则可以为每个注册表创建一个Secret，在Pods 拉取镜像时，Kubelet
会合并imagePullSecrets到.docker/config.json。注意Secret需要和Pod在同一个命名空间中。
创建完imagePullSecrets后，可以使用imagePullSecrets的方式引用该Secret：
apiVersion: v1
kind: Pod
metadata:
name: foo
namespace: awesomeapps
spec:
containers:
- name: foo
image: janedoe/awesomeapp:v1
imagePullSecrets:
- name: myregistrykey
6. 使用案例
本节演示的是Secret的一些常用配置，比如配置SSH密钥、创建隐藏文件等。
（1）定义包含SSH密钥的Pod
首先，创建一个包含SSH Key的Secret：
$kubectl create secret generic ssh-key-secret
--from-file=ssh-privatekey=/path/to/.ssh/id_rsa
--from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub
然后将其挂载使用：
kind: Pod
apiVersion: v1
metadata:
name: secret-test-pod
labels:
name: secret-test
spec:
volumes:
- name: secret-volume
secret:
第2章 Docker及Kubernetes基础 | 105
secretName: ssh-key-secret
containers:
- name: ssh-test-container
image: mySshImage
volumeMounts:
- name: secret-volume
readOnly: true
mountPath: "/etc/secret-volume"
上述密钥会被挂载到/etc/secret-volume。注意，挂载SSH Key需要考虑安全性的问题。
（2）创建隐藏文件
为了将数据“隐藏”起来（即文件名以句点符号开头的文件），可以让 Key 以一个句点符号
开始，比如定义一个以句点符号开头的Secret：
kind: Secret
apiVersion: v1
metadata:
name: dotfile-secret
data:
.secret-file: dmFsdWUtMg0KDQo=
挂载使用：
kind: Pod
apiVersion: v1
metadata:
name: secret-dotfiles-pod
spec:
volumes:
- name: secret-volume