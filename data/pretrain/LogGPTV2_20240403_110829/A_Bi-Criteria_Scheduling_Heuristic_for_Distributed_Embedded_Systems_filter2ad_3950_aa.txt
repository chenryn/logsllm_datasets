title:A Bi-Criteria Scheduling Heuristic for Distributed Embedded Systems
under Reliability and Real-Time Constraints
author:Ismail Assayad and
Alain Girault and
Hamoudi Kalla
A Bi-Criteria Scheduling Heuristic for Distributed Embedded Systems under
Reliability and Real-Time Constraints
Ismail Assayad
VERIMAG, 2 av. de Vignate,
38610 Gières, France.
PI:EMAIL
Alain Girault
INRIA, 655 av. de l’Europe
3833 Saint-Ismier, Cedex - France
PI:EMAIL
Hamoudi Kalla
INRIA, 655 av. de l’Europe
3833 Saint-Ismier, Cedex - France
PI:EMAIL
Abstract
Multi-criteria scheduling problems, involving optimiza-
tion of more than one criterion, are subject to a growing
interest. In this paper, we present a new bi-criteria schedul-
ing heuristic for scheduling data-ﬂow graphs of operations
onto parallel heterogeneous architectures according to two
criteria: ﬁrst the minimization of the schedule length, and
second the maximization of the system reliability. Reliabil-
ity is deﬁned as the probability that none of the system com-
ponents will fail while processing. The proposed algorithm
is a list scheduling heuristics, based on a bi-criteria com-
promise function that introduces priority between the op-
erations to be scheduled, and that chooses on what subset
of processors they should be scheduled. It uses the active
replication of operations to improve the reliability. If the
system reliability or the schedule length requirements are
not met, then a parameter of the compromise function can
be changed and the algorithm re-executed. This process is
iterated until both requirements are met.
Keywords: Distributed real-time systems, safety-critical
systems, reliability, multi-criteria scheduling, heteroge-
neous systems, active software replication.
1 Introduction
Distributed systems are being increasingly used in criti-
cal real-time applications, such as avionics, air trafﬁc con-
trol, autopilot systems, and nuclear plant control, in which
the consequences of missing a tasks deadline may cause
catastrophic loss of money, time, or even human life. This is
why such systems require a high reliability. Here, reliability
is deﬁned as the probability that none of the system compo-
nents will fail while processing. For example, a commercial
ﬂight-control system requires the probability of a system
failure to be approximately 10−10/hour, that is, the system
reliability should be approximately 0.999999999 [21].
Our goal is to produce automatically a reliable dis-
tributed static schedule of a given algorithm onto a given
distributed architecture, which satisﬁes two criteria: max-
imize the system’s reliability and minimize the system’s
run-time. Concretely, we are given as input a speciﬁca-
tion of the algorithm to be distributed (Alg), a speciﬁ-
cation of the target distributed architecture (Arc), some
distribution constraints (Dis), some information about the
execution times of the algorithm blocks on the architec-
ture processors and the communication times of the algo-
rithm data-dependencies on the architecture communication
links (Exe), some information about the reliability charac-
teristics of each component of the architecture (Rel), a reli-
ability objective (Rel obj), and a run-time objective (Rtobj).
The goal is to build a static schedule of Alg on Arc, satis-
fying both objectives Rel obj and Rtobj, with respect to Exe,
Dis, and Rel (see Figure1).
This problem is difﬁcult to solve because the two criteria
are antagonistic: indeed, the reliability is usually improved
by replicating the operations, which has a negative impact
on the schedule length, and hence on the system’s run-time.
The majority of hard real-time distributed systems in the
literature do not attempt to introduce reliability; rather, they
concentrate on the problems that arise from tasks deadline
assuming a reliable hardware. For example, the heuristics
proposed in [2, 15, 8, 17] are based on static or dynamic
allocation and scheduling of tasks to minimize the schedule
length. But none of these scheduling heuristics attempt to
improve the system’s reliability.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:08 UTC from IEEE Xplore.  Restrictions apply. 
architecture speciﬁcation Arc
algorithm speciﬁcation Alg
reliability characteristics Rel
distribution constraints Dis
execution / transmission times Exe
reliability objective Rel obj
real-time objective Rtobj
reexecute RBSA
Reliable Bi−Criteria
Scheduling Algorithm
(RBSA)
change θ
(θ is a parameter
of RBSA)
check
objectives
satisﬁed
not satisﬁed
reliable distributed static schedule
code generator
fails to satisfy
objectives
reliable distributed embedded code
Figure 1. Our methodology to generate reli-
able distributed code.
To maximize the system’s reliability in the task alloca-
tion problem, the authors of [21, 14, 22, 13] give an explicit
reliability expression in terms of system parameters. This
expression is used to drive theirs algorithms in search for
an allocation that maximizes the reliability. In [21], Shatz
et al. present a task allocation model for reliability; failures
from processors and communication links are considered
to measure the system’s reliability of the proposed algo-
rithm.
In [14], Kartik et al. present an improved version
of Shatz et al. algorithm, which improves the system’s re-
liability. In [22], Srinivasan et al. present a cluster-based
allocation technique to maximize the reliability in heteroge-
neous systems. However, none of these heuristics attempts
to minimize the length of the generated schedule.
In the literature on bi-criteria scheduling problems, only
a few articles consider the reliability property [6, 5, 19, 18].
Taking both reliability and tasks deadline into account, Xiao
et al. [19] propose a scheduling algorithm, called eFRCD
(efﬁcient Fault-tolerant Reliability Cost Driven Algorithm),
based on the reliability model of Shatz et al. [21]. Their
algorithm uses a primary-backup copy scheme that enables
the system to tolerate the permanent failure of any single
processor. However, the tasks deadline criterion has ad-
vantage over the reliability criterion. Dogan et al. have
proposed a bi-criteria list scheduling heuristics with two
objectives, minimizing the schedule length and maximiz-
ing the reliability of the obtained schedule [6]. Their
cost function considers the reliability of different system-
components when making decisions to schedule tasks.
The algorithm that we propose to generate a reliable dis-
tributed static schedule, called Reliable Bi-Criteria Schedul-
ing Algorithm (RBSA), is different than the ones proposed
in [6] and [19] in the sense that we use the active replication
of operations [10] to improve both the system’s reliability
and the schedule length (and hence the system’s run-time).
Indeed, even though these two objectives are antagonistic,
there are situations where replicating some operations actu-
ally reduces the schedule length, by improving the locality
of computations [3].
The paper is organized as follows. Section 2 gives the
system models and assumptions. The bi-criteria scheduling
problem is presented in Section 3. Section 4 presents the
proposed bi-criteria algorithm RBSA. Section 6 details the
performances of RBSA. Finally, Section 7 concludes the
paper and proposes future research directions.
2 System models and assumptions
2.1 Architecture model
The architecture is modeled by a graph, where each ver-
tex is a processor, and each edge is a communication link.
Classically, a processor is made of one computation unit,
one local memory, and one or more communication units,
each connected to one communication link. Communica-
tion units execute data transfers, called comms. The chosen
communication mechanism is the send/receive [11], where
the send operation is non-blocking and the receive opera-
tion blocks in the absence of data. Figure 2(b) is an exam-
ple of architecture graph, with four processors P1, P2, P3,
and P4, and four point-to-point communications links L12,
L23, L24 and L34.
I
I’
A
B
C
(a)
D
O
O’
P1
L12
P2
L14
P4
L23
P3
L34
(b)
Figure 2. Example of (a) an algorithm graph
Alg and (b) an architecture graph Arc.
2.2 Algorithm model
The algorithm to be distributed is modeled by a data-
ﬂow graph. Each vertex is an operation and each edge is
a data-dependency. The algorithm is executed repeatedly
for each input event from the sensors (operations without
predecessors) in order to compute the output events for ac-
tuators (operations without successors). This periodic sam-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:08 UTC from IEEE Xplore.  Restrictions apply. 
pled model is commonly used for embedded systems and
automatic control systems.
Figure 2(a) is an example of algorithm graph, with eight
operations: (I,I’) are sensor operations, (O,O’) are actu-
ator operations, while (A,B,C,D) are computation opera-
tions. The data-dependencies between operations are de-
picted by arrows. For instance, the data-dependency A (cid:1) D
corresponds to the sending of some arithmetic result com-
puted by A and needed by D.
2.3 Execution characteristics and distribution
constraints
To each operation o of Alg, we associate in a table Exe
its execution time on each processor: each pair (cid:1)o, p(cid:2) of Exe
is the worst case execution time (WCET) of the operation
o on the processor p, expressed in time units. Since the
target architecture is heterogeneous, the WCET for a given
operation can be distinct on each processor. Similarly, to
each data-dependency of Alg, we associate in a table of ex-
ecution times Exe, its communication times on each com-
munication links: each pair (cid:1)d, l(cid:2) of Exe is the worst case
transmission time (WCTT) of the data dependency d on the
communication link l, again expressed in time units. Since
the target architecture is heterogeneous, the WCTT for a
given data-dependency can be distinct on each communica-
tion link.
For instance, Exe for Alg and Arc of Figure 2 is given in
Table 1. The point-to-point links L12, L23, L24 and L34 are
heterogeneous. The table only gives the WCTT for inter-
processor communications. For an intra-processor commu-
nication, the WCTT is always 0 time unit.
time
P1
P2
P3
P4
.
c
o
r
p
I’
I
A
2.5 ∞ 2.5
1.5
1.5
2.5 ∞ 2.5
1.5
1.5
1.5
1.5
operation
C
B
2.0
3.0
1.0
2.0
3.0
2.0
1.0
2.0
D
1.5
0.5
1.5
0.5
O
O’
3.0
3.0
2.0 ∞
3.0
3.0
2.0 ∞
data-dependency
k
n
i
l
I (cid:1) B
time
L12
L23
L14
L34
I (cid:1) A
B (cid:1) O’ B (cid:1) D I’ (cid:1) B
1.5
1.0
3.0
2.0
1.5
1.0
2.0
3.0
C (cid:1) O’
D (cid:1) O
1.5
3.0
1.5
3.0
Table 1. Distributed constraints Dis and exe-
cution/transmission times Exe for operations
and data-dependencies.
I’ (cid:1) C A (cid:1) D
1.5
2.0
4.0
3.0
1.5
2.0
3.0
4.0
2.0
4.0
2.0
4.0
Finally,
specifying the distribution constraints Dis
amounts to associating the value “∞” to some pairs (cid:1)o, p(cid:2) of
Exe, meaning that o cannot be executed on p (see Table 1).
2.4 Reliability model
We consider only hardware components (processors and
communication links) failures and we assume that the al-
gorithm is correct w.r.t. its speciﬁcation, i.e., it has been
formally validated, for instance with model checking and/or
theorem proving tools. We assume that the failure of a com-
ponent has an exponential distribution [21], i.e., it follows
a Poisson law with a constant failure rate λ. Furthermore,
components failures are assumed to be independent. For in-
stance, Table 2 gives the failure rates of the processors and
communication links of the architecture of Figure 2(b).
processors
P1, P4
2 ∗ 10−6
P2
10−6
P3
3 ∗ 10−6
λ
communication links
L12, L34
L23, L24
4 ∗ 10−5
2 ∗ 10−5
Table 2. Failure rates for system components
Finally, none of the ﬁgures from Tables 1 and 2 derive
from an existing real-life example. They are just meant for
the sake of the example, but are nontheless realistic w.r.t.
current real-time systems.
3 The bi-criteria problem
As said in the introduction, our goal is to ﬁnd a static
schedule of Alg on Arc, satisfying two criteria: the run-
time objective Rtobj and the reliability objective Rel obj. In
this section, we present in details these two criteria.
3.1 Real-time criterion
As we are targeting distributed real-time systems, we
want to obtain a schedule Rtsched that satisﬁes the run-time
objective Rtobj, which means that the obtained static dis-
tributed schedule Rtsched must complete in less than Rtobj
time units. The schedule length Rtsched is computed as fol-
lows:
(cid:1)
(cid:2)
E(oi, pj)
Rtsched = max
pj
max
oi on pj
where E(oi, pj) is the time at which operation oi terminates
its execution on processor pj.
For instance, the length of the temporary schedule dia-
gram of Figure 3(b) is 9 time units. In this diagram, each
replica oj
i of an operation oi is represented by a white box,
whose height is proportional to its WCET. Each communi-
cation operation oj
ol
k is represented by a gray box, whose
i