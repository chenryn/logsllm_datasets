prints and heuristics
track-
Plugins
for API
ing, instruction tracing, and
taint tracking
Detect malware
known
signatures
Detect privacy leakage
using
vulnerability
Malware detection via per-
mission use behavior
System calls
Low-level device fea-
tures (e.g. battery us-
age, CPU load)
System calls
System calls
Sink API methods
of
API
invocations
Sequence
method
and parameters
API
source/sink
methods
Sequence
method invocations
of
methods;
API
API
Source/sink API meth-
ods
Permission
requests
(can be mapped to
API methods)
information leaves the application (i.e., sinks). By referring to
the documentation or searching through the source code, these
methods can be found and used as target methods. Sandboxing
tools such as DroidBox [18] track locations where data leaves
the application and target methods can be determined by
ﬁnding the instrumented API methods. Other tools such as
DroidScope [44] allow the user to trace speciﬁc API method
invocations; these API methods would serve as target methods.
Some dynamic tools, such as VetDroid [47], detect malware
by dynamically analyzing an application’s permission usage.
Although the tool does not trace API methods, the mapping
between permission use and API methods has been well-
studied and can be obtained from PScout [5] or Stowaway [22].
IntelliDroid can therefore be conﬁgured with target methods
that map to the permissions of interest. Since the majority of
dynamic analysis tools analyze API calls, using API calls as
our abstraction would enables IntelliDroid to generate inputs
for most of the dynamic analysis tools.
2) Analyzing System Calls: The next most common method
used by dynamic analysis tools is to analyze system calls. In
this case, the user must determine a mapping between the
system call method and API methods that use the system
call. Such tools include CopperDroid [39], AASandbox [10]
and Crowdroid [12]. If only speciﬁc system calls are traced
(e.g. ﬁle access), the user can use Android’s documentation
to ﬁnd API methods that use the system call’s functionality
and generate the mapping manually. In general, however, it
can be difﬁcult to map every system call to API methods in
this manner; therefore, the user may need to perform a one-
time static analysis of the Android framework. A backward
traversal of the framework’s call graph from the invocations
of system calls to public API methods should provide the
necessary mapping, which can then be used to obtain the target
methods. As a result, we believe IntelliDroid would be able to
4
generate inputs for dynamic analysis tools that analyze system
calls, albeit with more effort required on the part of the user.
3) Analyzing Low-Level Events: A few tools focus on
analyzing low-level events on the device. Andromaly [36] is
one such dynamic tool that tries to infer malicious activity
by detecting anomalies in CPU load and battery usage during
the application’s execution. The ability to attach IntelliDroid
to such analysis tools depends on how the features are being
traced. If the tool merely detects single instances of usage, it
may be possible to use IntelliDroid to trigger API methods that
correspond to those resources, such as those that invoke the
camera or GPS. However, IntelliDroid is not an appropriate
input generator for analysis tools that proﬁle anomalies in
resource usage over time, as the IntelliDroid does not seek to
mimic realistic usage. In such cases, it would be more effective
to use a tool that aims to replicate normal use or have a user
manually execute the application.
While the speciﬁcation of the targeted APIs for a dynamic
analysis is manual, it is not overly onerous. We demonstrate
this by extracting the APIs and having IntelliDroid generate
inputs for TaintDroid, for which we further discuss the asso-
ciated effort and effectiveness in Section V.
Although the IntelliDroid currently uses Android APIs
to represent behaviors that the dynamic analysis targets, the
design allows other forms of targets to be speciﬁed. In general,
if the user can determine a point in the code to which execution
is desired, this information can be given to IntelliDroid, which
will extract the call paths and path constraints to the speciﬁed
code location. This location can be as simple as a method
invocation, or can be derived from some other analysis. For
instance, to direct execution for a dynamic tool that focuses
on native code usage, IntelliDroid can be conﬁgured to extract
paths and constraints for invocations to native methods.
B. Identifying Paths to Targeted APIs
For a given application and set of targeted APIs, Intelli-
Droid ﬁrst performs static analysis to identify the invocations
of targeted APIs and the paths leading to them. Because
Android is event-driven, an application may contain several
entry-point methods where the Android framework can transfer
execution to the application. These methods are normally event
handlers that receive various system events, such as callbacks
to control a component’s lifecycle, process sensor inputs, or
respond to UI events. Using an entry-point discovery mecha-
nism similar to FlowDroid’s [4], the application’s components
are read from its manifest and their lifecycle methods are
extracted. A partial call graph created from these entry-points
is used to search for instantiations of Android callback listeners
and to add overridden listener methods to the list of entry-
points. A new partial call graph is generated and the process
is repeated iteratively until no more entry-points are found.
The call graphs are generated using the event handler
entry-points as starting points for the code traversal. However,
Android mechanisms such as Intents and asynchronous calls
can cause execution to ﬂow between methods in an application
even when there is no explicit function call. For instance,
Android allows execution to be transferred between different
components of an application using the Intent interface, so
the points at which Android intents are sent and received are
} else if (i.getAction()=="BOOT_COMPLETED"){
String sNum;
handleSms(i);
if (i.getAction()=="SMS_RECEIVED") {
void onReceive(Context c, Intent i) {
1 class SmsReceiver extends BroadcastReceiver {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
Bundle b = i.getExtras();
Object[] pdus = (Object[])b.get("pdus");
}
void handleSms(Intent i) {
for (int x = 0; x < pdus.length; x++) {
this.sNum = "99765";
SmsMessage msg =
}
SmsMessage.createFromPdu(pdus[x]);
String addr = msg.getOriginatingAddress();
String body = msg.getMessageBody();
// Constraint depends on local function
if (needsReply(addr, body)) {
SmsManager sm = SmsManager.getDefault();
sm.sendTextMessage(addr, null, "YES", null,
null);
}
// Constraint depends on heap variable
if (addr.equals(this.sNum)) {
abortBroadcast();
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39 }
}
}
}
boolean needsReply(String addr, String body) {
if ((addr.startsWith("10658") &&
body.contains("RESPOND")) ||
(addr.startsWith("10086") &&
body.contains("REPLY"))) {
return true;
}
return false;
}
Listing 1. Code Example
identiﬁed and the execution ﬂow between them are represented
by additional edges in the call graph. Details regarding other
Android-speciﬁc call edges can be found in Section IV-A.
A traversal for each event handler is then performed
to identify the event handlers that may lead to a targeted
API invocation. For each targeted API, a target call path is
extracted, which contains the sequence of method invocations
from the event handler entry-point to the invocation of the
targeted API.
and is
applications,
an example
To illustrate the design of
IntelliDroid, we use the
through-
code provided in Listing 1 as
this section. This code is derived from several ma-
out
representative of malware
licious
intercepts and automatically responds to SMS mes-
that
sages
received from a malicious party using the An-
droid APIs BroadcastReceiver.abortBroadcast
and SmsManager.sendTextMessage, respectively. We
will assume that the malware will be analyzed with a dynamic
analysis tool
is capable of detecting malicious SMS
usage and thus, we specify all SMS-related Android APIs
(including sendTextMessage and abortBroadcast) as
targeted APIs to IntelliDroid. IntelliDroid will begin analyz-
ing the example by identifying SmsReceiver.onReceive
at line 4 as an event handler entry-point and the calls to
sendTextMessage and abortBroadcast at lines 22 and
26 as targeted APIs. IntelliDroid then identiﬁes the target call
paths from the event handler to each of the targeted APIs,
that
which are the paths through the method invocations on lines
4→11→22 and 4→11→26.
C. Extracting Call Path Constraints
To actually trigger a target call path, the appropriate inputs
must be injected into the application. For each method in
the target call path, the invocation of the next method in
the path may be control-dependent on conditional branches
in the method body. To extract these control dependencies,
a forward control- and data-ﬂow analysis is performed on
the control ﬂow graph (CFG) of each method. The control-
ﬂow analysis determines whether a conditional branch affects
execution of the next method’s invocation, and if so, it extracts
constraints based on the variables used in the predicate of the
branch statement. IntelliDroid also extracts symbolic data-ﬂow
information about variables to identify other variables they
may depend on, or that may depend on it. Similar to traditional
data-ﬂow analyses, loop support is implemented by performing
the analysis iteratively until the constraint and data-ﬂow output
converges.
The forward control-ﬂow and data-ﬂow analysis is obtained
by propagating variable information along the method’s CFG,
both locally within each basic block and across different basic
blocks. Constraints are generated by translating the operator
and variables used by each instruction encountered. If multiple
CFG paths are found to lead to the next method invocation, the
analysis combines the extracted constraints of each path with a
logical OR (∨), indicating that as long as one path is satisﬁed,
the targeted API is executable. The extracted constraints for
each path method are combined using full context-sensitivity,
which is achievable since the call site of each method along
the path is known.
As an example, consider the execution path in Listing 1
ending in the abortBroadcast invocation at line 26. The
target call path generated by IntelliDroid includes an invoca-
tion of handleSms in the onReceive method, which is
dependent on the intent action string; therefore, the constraint
(i.getAction() = "SMS_RECEIVED") would be ex-
tracted. IntelliDroid’s context-sensitive inter-procedural analy-
sis would indicate that when handleSms is called, the invo-
cation parameter originated from the event handler’s input pa-
rameter (Intent i). Analysis through handleSms shows
that the execution of the target API invocation is dependent
on the length of the PDU array and the originating address
of the SMS message received. The conditional statement in
line 20 is on the execution path, but since the targeted API can
be reached regardless of the branch outcome, it has no effect
— when processing the control ﬂow, the constraints extracted
from both sides of this branch would be combined with the
OR operator.
In some cases, the variables extracted for the constraints are
return values from other method invocations. Although these
methods are not part of the target call path, their return values
affect the execution of the path and the constraints they impose
must be extracted. An example of such an auxiliary method is
needsReply in Listing 1. To handle such cases, IntelliDroid
extracts constraints for the return values and the paths leading
to the return sites within the auxiliary method. These auxiliary
constraints are combined with the main path constraints with a
5
logical AND (∧) to enforce a speciﬁc return value and return
path through the auxiliary method.
For some situations, IntelliDroid also inserts library con-
straints manually extracted from Android API calls to pure
functions — i.e., functions whose result depends only on
their arguments, with no side-effects. For example, addr.
equals() on line 25 is an invocation to a pure function
and IntelliDroid will convert this to the constraint (addr
= this.sNum). In some cases, the API method invoked
would generate constraints that are too large or complex for
the constraint solver; this is the case for createFromPdu on
line 16, which performs bytewise operations on the bytecode
of the SMS message. In these cases, rather than rely on the
constraint solver, we provide IntelliDroid with a manually
implemented function that
thus
allowing IntelliDroid to generate an appropriate input. This is
conceptually equivalent to “stitching”, which is used to solve
constraints that contain similarly complex functions, such as
SHA1 and MD5, in BitFuzz [13]. Android API methods that
are not pure functions must be handled dynamically at run-
time by either monitoring or controlling them, as described
below in Section III-E.
inverts createFromPdu,
D. Extracting Event-Chains
At this point, the extracted constraints consist of a boolean
expression of concrete values and variables. Ideally, all of the
constraint variables should be dependent on the event handler’s
input parameters. In such a case, solving the constraints for
these variables and injecting the solved values will execute the
desired target call path. However, there may be cases where
the path constraints depend on heap variables that cannot be
set to the correct values using only the arguments to the entry-
point method of the target path. In this case, IntelliDroid must