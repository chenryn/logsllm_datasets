Cat.
Date
Cat.
CVE
CVEPub
ExplVen
ExplVenReg
Pack
PubDate
PackType
PackPrice
PackActiv
PackDeath
ExplPrice
SwVen
Sw
CVSS
Dataset
RuMarket,
NVD, SYM
NVD
RuMarket
RuMarket
RuMarket
RuMarket
RuMarket
RuMarket
RuMarket
RuMarket
RuMarket
NVD
NVD
NVD
SYM
SYM
Cat.
(1) RuMarket. We query RuMarket and analyze results by read-
ing discussion topics and extrapolating relevant informa-
tion. Unfortunately the nature of the data limits the ap-
plicability of fully-automated data extraction procedures
(e.g. product updates and multiple products per advert, see
also [58]). We therefore employ semi-automated pattern
matching and manual analysis to extract the information.
We identify traded CVEs by querying RuMarket for matches
to the case-insensitive regular expression cve(-id)?(?i)
in the Virus, attacks, and malware commercial section of
the forum. This procedure returned 194 discussion threads
and approximately 3000 posts to examine in April 2017. To
minimize the chances of reporting ‘fake’ exploit products,
we consider only vendors that have not been reported as
‘rippers’ or banned from the community. This leaves us with
a sample of 89 traded exploits over 57 unique vulnerabili-
ties embedded in 38 packages for STANDALONE, MALWARE and
ExploitKit products, and attacking Microsoft, Oracle,3
and Adobe software. This is quantitatively in line with pre-
vious studies on marketed exploits [3, 4, 9, 48].
(2) NVD. The National Vulnerability Database [2], is the NIST-
maintained vulnerability database reporting vulnerability
characteristics, affected software, and severity.
(3) SYM. Vulnerabilities for which Symantec’s threat explorer
and attack signature databases report an exploit in the wild [26].
3All vulnerabilities labeled as Oracle are relative to the Java platform. Some of those
were disclosed while Java was Sun’s.
Vulnerabilities outside of SYM may still be actively exploited,
but are unlikely to be exploited at scale [9, 26]. This allows
us to correlate technical and market characteristics of vul-
nerabilities to the actual (mass) realization of an observed
exploit in the wild.
We join the three datasets on the CVE-ID of the vulnerability.
3.4 Analysis procedure
3.4.1 Estimation of exploit prices. When a package contains
more than one exploit, the cost of a single exploit can only be
estimated. From the literature on exploit development and deploy-
ment [9, 24, 29, 30, 48, 76] two aspects of vulnerabilities emerge
as drivers of exploitation effort: 1) vulnerability type (e.g. mem-
ory corruption vs cross-site-scripting) [29, 48, 76]; 2) exploitation
complexity (e.g. to evade attack mitigation techniques) [20, 24, 29].
Vulnerability type. The MITRE corporation maintains a community-
developed standard (Common Weakness Enumeration, CWE in
short) for the enumeration of software weaknesses [2]. This has the
purpose of identifying the type of technical issue that generates the
vulnerability. Table 12 in the Appendix provides a detailed break-
down of vulnerability CWE types by exploit package in RuMarket.
We find that packages typically embed vulnerabilities of the same
type (e.g. either remote code execution vulnerabilities or privilege
escalation vulnerabilities), which suggests that significantly skewed
distributions of exploitation efforts by vulnerability type within a
package are unlikely.
Exploit complexity. The Common Vulnerability Scoring System
(CVSS) [31] defines Access Complexity as a measure of whether
a reliable exploit can be ‘easily’ obtained or additional measures
or attacks are required to, for example, avoid attack mitigation
techniques (memory randomization, canaries, etc.), or address spe-
cific software/system architectures [29, 31]. CVSSv2 assesses attack
complexity in three categories: High, Medium, Low [65]. AC:High
conditions have been shown to represent a threshold for exploit
adoption [9], whereas Medium and Low vulnerabilities require
only limited exploitation efforts [65] and are commonly detected
in the wild [9, 20]. Acknowledging this, the newer version of CVSS
(v3) considers only High (existence of conditions outside of the
attacker’s control) or Low (absence of conditions) values [31]. Out
of 57 unique CVEs in our sample, we find 2 vulnerabilities character-
ized by a High CVSS attack complexity, whereas the remaining 55
include only limited or no exploitation complexities for the attacker.
A further breakdown of attack complexity by package (Table 11
in the Appendix) shows that most packages prevalently include
vulnerabilities with the same AC assessment. This once again sug-
gests that exploit development efforts are not significantly skewed
among vulnerabilities bundled in a package.
In light of these considerations, in this study we estimate unitary
cost of exploit by assuming a uniform distribution of costs among
exploits in a package.4
3.4.2 Bootstrapped analysis of exploit prices. In an effort to pro-
vide a more precise estimate of exploit costs, we employ a block
bootstrap analysis (N = 10000) of exploit prices. The bootstrap pro-
cedure randomly re-samples (N times), with replacement, exploit
packages (i.e. our ‘blocks’, or sampling units) from RuMarket, and
approximates the true unknown distribution of the population of
traded exploits (of which we observe a sample) [27]. This allows us
to infer the parameters of the true distribution and to build robust
confidence intervals of price estimates.
3.4.3 Regression analysis. The nature of the sample requires
a few additional precautions to be taken for a formal analysis. In
particular, our exploit observations depend not only on the exploit,
but also on the specific vendor who publishes the package where
the exploit is bundled in. For example, qualified vendors may pub-
lish more reliable exploits that are more likely to generate attacks
in the wild. Hence, the measure of an exploit implicitly depends
on the vendor who publishes it (i.e. our data has an hierarchical
structure [5]).5 This ‘mixed effect’ should be captured to assure an
unbiased quantitative analysis. We denote µa as the (univariate)
random effect for the vendor a such that the expected value of the
observation for the ith measurement is E(Yai|µa) = µai, i.e. the
expected value for the ith observation is conditional on µa. The
general regression form of our analysis is derived from [5] and is:
f (µai) = zai µa + βxai
(1)
where f is the link function, zai µa quantifies the random effect
at the intercept, and βxai is the vector of fixed effects and respective
coefficients. Standard model diagnostics are run for all regressions.
4Sec. 4.2 gives a detailed account of how this relates to different software packages.
5ExplVen and Package are both meaningful levels in the hierarchy of our sample.
As it is the vendor of the exploit that publishes the exploits, fixes exploit cost, and
determines exploit quality, we here consider the vendor as the main source of variance.
We report model Log-likelihoods for model comparison. The cal-
culation of p-values and model power are not straightforward for
mixed effects models. We report pseudo − R2 and p − values as
approximations provided by the R packages lmerTest and MuMIn,
alongside the standard deviation of coefficient estimation.
3.5 Limitations
The adopted CVE sampling mechanism may exclude some poten-
tially relevant vulnerability that we cannot measure precisely. Re-
sults in Tab 1 indicate that this sampling bias is likely minimal. It
is however worth noting that this is, unfortunately, an inherent
limitation of all studies on this type of markets: without engaging
in the trading activity, it is impossible to reliably measure what lies
behind a market post. For example the excellent work in [69] con-
servatively estimates market size by assuming that user feedback
relates to separate, single trade lots, as it is not possible to mea-
sure multiple trades in a single transaction. Similarly, as we cannot
measure unidentified exploits, our analysis should be considered a
conservative estimate of traded exploits in RuMarket.
The data collection in SYM reports exploits deployed en-mass
against consumer (typically Windows) systems, and does not di-
rectly extend to targeted attacks and 0-day vulnerabilities.
3.6 Ethical aspects and data sharing
The market infiltration was performed while the author was as
the University of Trento, Italy. All data collection happened at the
Eindhoven University of Technology, the Netherlands. No activity
involved the deception of market participants other than for our
‘identity’. We only engaged in discussion on non-hacking topics
not to facilitate illegal activities. We use the anonymous network
TOR to conceal our identities. To preserve our anonymity in the
market we do not disclose the real name of the community. The
collected data is available for sharing.6
4 DATA ANALYSIS
This analysis is structured in three parts. In the first (Sec. 4.1) we
describe the market by analyzing the activity of market participants
and the characteristics of the traded exploit packages. In the second
part (Sec. 4.2) we analyze market factors driving exploit prices, and
in the third (Sec. 4.3) the adoption of exploits in the wild.
4.1 Overview of RuMarket
4.1.1 Exploit vendors. It is first important to provide an overview
of the exploit vendors that participate in RuMarket activities. Our
RuMarket sample contains 22 uniquely identified vendors that trade
CVEs in MALWARE, STANDALONE, and EKIT packages. The market
mechanism generates strong disincentives for the creation of multi-
ple accounts [8]. Following the approach adopted for similar appli-
cations in related work [69], in the following we consider vendor
aliases as unique seller identifiers. Figure 1 shows the appearance
of vendors trading exploits in RuMarket. The solid line reports the
count of new vendors appearing in the market (i.e. vendors that did
not publish a CVE exploit in the preceding years in RuMarket un-
der the same alias); the dotted line reports the cumulative count of
6Access procedure available at http://security1.win.tue.nl.
Figure 1: Count of vendors trading CVEs in RuMarket
Figure 3: Distribution of exploit vendor age
Figure 2: Distribution of packages and exploits by vendor
Figure 4: Release of exploit packages by type per year
vendors. The number of vendors increases at a steady linear rate of
approximately three new vendors per year during the observation
period. This suggests that exploit trading in RuMarket is growing.
Figure 2 offers a breakdown of vendor activity by product type by
plotting the CDF of number of exploit packages introduced by each
vendor and the number of exploits they embed in their products.
EKIT vendors typically publish only one product, whereas MALWARE
and particularly STANDALONE vendors appear to trade significantly
more packages. This is interesting to observe as EKIT products
(and to a lesser degree MALWARE products [60]) are traded under the
‘exploit-as-a-service’ model, whereby the seller maintains a service
for a period of time during which customers rent the kit to deliver
their own attacks. The maintenance operations include delivering
vulnerable traffic to the customers, updating the exploit portfolio,
and packing existing exploits to minimize detection in the wild
(to generate the so-called FUD, ‘Fully UnDetectable’ exploits) [48].
The implied prolonged contractual form explains the prevalence of
vendors with only one exploit package in their portfolio for EKIT
and MALWARE vendors. On the other hand, EKIT vendors are by far
the more ‘productive’ in terms of number of exploited vulnerabili-
ties, with 50% of EKIT vendors contributing more than 10 exploits.
STANDALONE vendors typically focus on a few exploits only, trading
on average below three exploits, and only a small fraction of ven-
dors trades overall more than 5 exploits. MALWARE vendors are the
least productive in terms of exploited CVEs: whereas historically In-
ternet worms and malware such as Slammer or Conficker exploited
software vulnerabilities to replicate, in recent years infections hap-
pen mostly through Malware Distribution Networks [34, 35, 59]
that implement the target exploitation by other means (e.g. exploit
kits or ‘malvertising’), and allow for the malware to be ‘dropped’
on the attacked system, with only a few exceptions.
Foundational studies in economics [67] as well as more recent
research on online marketplaces [21] put the emphasis on the re-
lation between (expectation of) product quality and placement of
the vendor in the market. Due to the unreliability of user feedback
on online forums, criminal online markets often employ as a proxy
for trustworthiness criteria such as time-on-market or number of
messages/specialty [8, 39]. These are costlier for malicious ven-
dors to replicate than simply posting positive feedback on their
own products. We use as a proxy measure of seller presence in
the market the number of days the vendor have been registered
on RuMarket at the time of package publication, and calculate it
as ExplVenAge = PubDate − ExplVenReg. Figure 3 reports this
distribution by package type. Exploit vendor age varies consider-
ably by type of package. STANDALONE vendors are those with the
highest average time on market at time of product publication. 50%
of STANDALONE vendors have been registered on the market for at
least six months, whereas only the top 30% of EKIT and MALWARE
vendors are above this threshold. Overall, we find that only 18% of
vendors publish their first package on the day of registration. 55%
of vendors have been registered for at least a month, and 32% for at
least a year. This indicates that RuMarket mechanisms encourage
prolonged market activity, which may determine higher levels of
trust among market participants [39].
4.1.2 Exploit packages. Our RuMarket sample reports data on
38 unique exploit packages; the breakdown is as follows: six EKIT,
six MALWARE, and twenty-six STANDALONE packages. We consider
the addition of new exploits in a pack as an update to an existing
package. Figure 4 reports the number of updates to the exploit
package portfolio by year in the market. In general, we can ob-
serve that the number of released products steadily increases every
year. This trend appears to be mainly driven by STANDALONE packs,
whereas EKIT and MALWARE packages are essentially stable in time,
llllllllllllll0510152020102011201220132014201520162010201120122013201420152016Count of new authorsNew authorsCumulative0.000.250.500.751.0012345No. of packagesPerc. of authorsEKITMALWARESTANDALONE0.000.250.500.751.001357911No. of exploitsPerc. of authorsEKITMALWARESTANDALONE0.000.250.500.751.000100020003000Age of vendor (days)Perc. of packagesEKITMALWARESTANDALONEllllllllllllllllllllllll024681020102011201220132014201520162017OccurrenceslllEKITMALWARESTANDALONEFigure 5: Market activity by exploit package
Figure 6: Log package price by year by product type
with the latter being the lowest on average. This is in line with
the exploit authors’ activity described above, and suggests that
these packages may enjoy a longer activity in the market. To eval-
uate this, we consider the days and volume of active discussion
since publication in the market as a proxy measure of RuMarket’s
interest in the product. We compute days of active discussion as
DaysActive=PackDeath-PubDate, and report PackActivity for
volume of active discussion. Figure 5 plots the two distributions.
The left plot reports longevity of RuMarket activity around an
exploit package. Inspection of the market message board reveals
that the length of activity around a package is not artificially in-
flated by the package vendor by continuously adding comments to
the advert. As expected, we observe that longevity of discussion
around EKIT packages is significantly higher than for STANDALONE
and MALWARE packages (p = 0.015 and p < 0.01 respectively for a
Wilcoxon rank sum test). RuMarket discussion around EKIT pack-
ages remains active for more than 500 days (approximately a year
and a half) for 50% of packages, with the top 10% products remain-
ing active in the market board for more than 3 years. Differently,
50% of STANDALONE and MALWARE packages remain active for up
to approximately 220 days, and only less than 25% remain active
for more than 500 days. Overall, we find that the average pack-
age remains active for a year since time of publication. The right
plot in Figure 5 plots the distribution of replies by package type.
EKIT packages receive on average significantly more replies than
other pack types, which is in line with previous figures. Conversely,
RuMarket interest around STANDALONE and MALWARE packages is
significantly lower, with only a handful of packages receiving a
comparable volume of discussion as the average EKIT. The lower
interest of the RuMarket community may be driven by the higher
difficulty of use of STANDALONE and MALWARE products, that require
additional effort to deploy and deliver the attack compared to EKIT
products [35]. Further, different price-tags, investigated below, may
explain the overall market interest.
Exploit pack prices. Table 3 reports descriptive statistics of ex-
ploit pack prices and number of bundled exploits by package type.
STANDALONE packages are traded at a mean price around 3000 USD
up to 8000 USD, and bundle in between 1 and 4 exploits. The small
standard deviation indicates that most STANDALONE packages bun-
dle 1 exploit only. MALWARE packages are traded at a price range
between 400 USD and 4000 USD, with most package prices set at
around the 1000-2000 USD mark. Similarly to STANDALONE pack-
ages, MALWARE bundles typically include only one exploit, and up
to three exploits. Finally, the lower 50% of EKITs are priced (ac-
counting for an average rent of 2-3 weeks [41]) in the range 150-400
dollars, whereas the upper 50% are in the range 400-2000 USD. EKIT
packages embed significantly more exploits than other package
types. This is in line with previous findings in the literature [48]
and, following Grier et al. [35], this allows for a greater flexibility
in terms of the range of selectable targets [10]. We give an account
of the specific exploits in the next section.
Following [63], we further investigate possible outliers in our
data to mitigate pricing noise. We find that the only four STANDALONE
packages that received no trade reply from the RuMarket commu-
nity were also traded at below average prices (in between 100/300
dollars each in year 2016). Similarly, we find only one EKIT that,
despite embedding twelve exploits, is priced at 150 dollars, signifi-
cantly below the EKIT mean of 560 USD. Figure 6 plots the results
in terms of trend in price per product type by year with these
outliers removed. MALWARE and STANDALONE packages show an in-
creasing trend whereas EKIT product prices are steadily decreasing.
Regression coefficients for the linear model displayed in Figure 6
are significant at the 5% level for MALWARE (β = 0.43, p = 0.05) and
EKIT (β = −0.28, p = 0.02) but not significant for STANDALONE pack-
ages (β = 0.23, p = 0.14). We find that ‘consumer’ services such as
EKIT products are becoming more easily available to the users, a fig-
ure compatible with the increasing trend of ‘commodified’ attacks
delivered in the wild [7, 35, 42, 56], whereas the remaining more
‘specialized’ sector of the market seems to be inflating. We do not
find any significant association between number of exploits in the
package and package price. This lack of correlation may indicate
that the business model behind exploit trading, as well as other
contextual considerations on market status, presence of similar
exploit, and affected software should be considered in the analysis,
as previously suggested by several authors [10, 14, 16, 35, 63, 72].
We give an extended account of this in the next section.
4.2 Analysis of exploits
4.2.1 Exploit demographics. Embedded in the packages we find
89 exploits targeting 57 unique CVEs in Microsoft, Adobe, and
Oracle products. Table 4 reports the counts of exploited software
for each product type. Microsoft vulnerabilities alone make up
for more than half the exploits traded as STANDALONE products
(56%); unsurprisingly, vulnerabilities in Oracle and Adobe prod-
ucts, as well as Internet Explorer vulnerabilities, are prevalent in
EKIT bundles, as these products are by design exposed to Internet
requests [35, 48]. Exploits bundled in MALWARE are for Windows and
0.000.250.500.751.0005001000Days of active discussion on a packagePerc. of packagesEKITMALWARESTANDALONE0.000.250.500.751.000100200300Number of repliesPerc. of packagesEKITMALWARESTANDALONEllllllllllllllllllllllllllllllllllllllllEKITMALWARESTANDALONE20122014201620122014201620122014201656789Year of package publicationLog price of packageTable 3: Descriptive statistics of package prices and bundled exploits
Type
EKIT
MALWARE
STANDALONE
All
n Min
150
6
420
6
100
26
38
100
Package price (USD)
Mean Median
400
693.89
1250
1735
3000
2972.69
2417.46
1500
0.025p
157.92
428.75
100
100
0.975p Max
2000
4000
8000
8000
1875
3875
8000
8000
sd Min
2
1
1
1
708.94
1456.38
2629.39
2408.28
no. bundled exploits
0.025p Mean Median
7
1
1
1
2.12
1
1
1
6.83
1.5
1.5
2.34
0.975p Max
11
3
4
11
11
2.88
4
11
sd
4.26
0.84
0.86
2.63
Table 4: Breakdown of traded vulnerabilities
SwVendor
Adobe
Microsoft
Oracle
Sum
Software
flash
acrobat
office
int. expl.
windows
silverlight
java
MALWARE
2
0
2
7
0
0
7
0
0
0
9
STANDALONE
12
8
4
22
11
4
6
1
5
5
39
EKIT
17
10
7
14
2
7
5
0
10
10