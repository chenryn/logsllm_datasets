platforms is not present in the literature. To make things
more complicated, although Google provides a comprehen-
sive list of application permissions for Android [9], there
is no ofﬁcial documentation specifying what privileges are
allowed for third-party applications on iOS – this is one of
the iOS mysteries to be revealed in our work.
Not supported on iOS
CHANGE
Either iOS does not have such device e.g.,
NETWORK STATE
removable storage; or iOS does not allow
MODIFY AUDIO
third-party apps to have such privilege.
SETTINGS
Both supported by iOS and Android
BLUETOOTH
Third-party apps have these privileges on
READ CONTACTS
iOS as default.
RECORD AUDIO
* This column lists the number of SS-API types [9] in each privilege group.
20
51
Although the term “permission” used on Android platform
is concise, it also implies that there is access control in the
architecture, which iOS barely has3. Thus, in the rest of the
paper, we use SS-API type to refer to a group of SS-APIs
that require the same privilege to access certain private data
or sensitive service. The name and scope for most of the SS-
API types follow the ofﬁcial Android permission list [9] with
three exceptions which will be explained in Section IV-C.
As shown in Table II, among all the Android SS-API type-
s, three of them (PERSISTENT ACTIVITY, RESTART PACKAGES
and SET PREFERRED APPLICATIONS) have deprecated, and
four of them (such as BRICK) do not really exist in Android,
as there are no API calls, content providers or intents in
1The mapping provided by [5] focuses on Android 2.2. We extend the
mapping by adding the 10 additional permissions supported on Android
4.0 with a similar method introduced in [5].
2Xcode is a suite of tools from Apple for developing software for Mac OS
X and iOS. It provides iOS API documentations for registered developers.
See http://developer.apple.com/xcode/.
3Security entitlements are introduced for iOS applications from iOS 5,
which are semantically similar to permissions. However, according to the
latest ofﬁcial document [10], the accessible entitlements for third-party iOS
developers only control iCloud storage and push notiﬁcation. Though ﬁne-
grained entitlements are available on OS X to control access of private data
such as address book and pictures, a third-party iOS application does not
need such entitlements to access these data.
Books&ReferenceBusinessEducationEntertainmentFinanceShopping&FoodGamesHealth&FitnessLifestyleMedicalMusicTravel&NavigationNewsPhoto&VideoProductivitySocialSportsUtilitiesWeatherOthers0%4%8%12%16%20%Cross-platformappsAllappsoniOSAllappsonAndroidAndroid related to these SS-API types [5]. The rest of the
SS-API types are then divided into three groups according
to our ﬁndings4.
A. Privileges reserved for Android system applications
The openness concept of Android and its online documen-
tations may have given a misleading understanding to users
and developers that a third-party Android application can
obtain any privilege. However, this is not true – many SS-
APIs are only provided for original equipment manufacturers
(OEMs), and are not granted to third-party applications.
Examples of these API types include DELETE CACHE FILES,
INSTALL LOCATION PROVIDER, FACTORY TEST, etc.
Since there are no ofﬁcial documentations specifying
which privileges are reserved for OEMs on Android, we
identify this list of SS-API types by analyzing the protection
level
tags in the frameworks/base/core/res/AndroidManifest.xml
ﬁle, as API types reserved for system applications are
labeled as android:protectionLevel=“signatureOrSystem” or an-
droid:protectionLevel=“signature” in this ﬁrmware conﬁguration
ﬁle. In order to validate this list, a testing application is
developed which tries to access all SS-APIs on Android, then
those SS-API types that are denied to this application are
recorded. Finally, 42 SS-API types are found to be reserved
for system applications on Android, which are not granted
to third-party applications unless users explicitly give them
the root privilege.
B. Privileges not supported on iOS
Among the rest of SS-API types which can be used
by Android third-party applications, we are interested in
ﬁnding out how many of them are also supported by iOS.
Surprisingly, our analysis result shows that more than 2/3
of these SS-API types are not supported on iOS. The
reasons are either because iOS does not have corresponding
functionality/device, or iOS just does not allow third-party
applications to have such privileges. Examples of SS-API
types which are not supported on iOS are given in Table III.
It is interesting to notice that iOS does not allow some
SS-API types to applications due to non-security reasons.
Although it is not ofﬁcially documented, APIs for changing
global settings that would affect the user experience (UX)
are usually disallowed by Apple, and that is one of the
reasons why there are still many people who jailbreak
their iPhones. Examples of such SS-API types include
MODIFY AUDIO SETTINGS, SET TIME ZONE, SET WALLPAPER,
WRITE SETTINGS, etc. Although this would limit the capabil-
ity of third-party applications, it is still reasonable from the
4The four groups of privileges listed in Table III are exclusive with
each other. There could be more reﬁned categorization in each group.
E.g., privileges that are reserved by Android system can be further divided
according to whether these privileges are supported on iOS. However, we
do not further divide each group in Table III, as the focus of this paper is
the privileges that are allowed to third-party applications and supported on
both Android and iOS, which is the last row in the table.
EXAMPLES OF UNSUPPORTED SS-API TYPES ON IOS
Table III
Reason (1) iOS does not have corresponding functionality/device:
SS-API type
MOUNT FORMAT
FILESYSTEMS
NFC
systems
Description
formatting
Allows
for
ﬁle
removable storage.
Allows applications
to perform I/O oper-
ations over NFC.
iOS Explanation
There is no removable
storage for iPhone,
i-
Pad, or iPod Touch.
Current iOS devices in-
cluding iPhone 5 still
do not have NFC chip.
Reason (2) iOS does not allow it to third-party applications:
SS-API type
KILL BACKGROUND
PROCESSES
Description
Allows an application to kill background
processes.
Allows an application to monitor, modify,
or abort outgoing calls.
Allows an application to monitor, record or
process incoming SMS messages.
PROCESS OUTGOING
CALLS
RECEIVE SMS
UX perspective. For example, it could be a disaster if you are
waiting for an important call, but a third-party application
mutes the sound globally without your awareness.
C. Privileges supported by both Android and iOS
The last group of privileges in Table II contains the SS-
API types supported on both Android and iOS. A compre-
hensive list of these SS-API types is given in Table IV.
Note that although there are only 20 SS-API types both
supported on Android and iOS, these SS-APIs cover the
access rights to the most common resources/services, includ-
ing user calendar, contacts, Bluetooth, Wi-Fi state, camera,
vibrator, etc. As shown in Table IV, due to the API difference
on Android and iOS, the name and scope of three SS-
API types have been changed compared to corresponding
Android permissions [9].
The ﬁrst reﬁned SS-API type is ACCESS LOCATION. On
Android, there are two permissions correspond to the priv-
ilege of accessing the location information, which are AC-
CESS COARSE LOCATION and ACCESS FINE LOCATION. There
are 20+ API calls related to these two permissions on
Android, but all of them only require either of the two
permissions. Similar as Android,
iOS devices employ a
number of different techniques for obtaining information
about the current geographical location, including GPS, cell
tower triangulation and most inaccurate Wi-Fi connections.
However, which mechanism is actually used by iOS to detect
the location information is transparent to the application
and the system will automatically use the most accurate
solution that
is available. Thus, for an iOS application
which invokes the location-related API calls (e.g., CLLoca-
tionManager.startUpdatingLocation), it actually requires both AC-
CESS COARSE LOCATION and ACCESS FINE LOCATION privi-
leges. Therefore, we create the ACCESS LOCATION SS-API
type as a common privilege between Android and iOS, in
order to perform a fair comparison.
SS-API TYPES SUPPORTED ON BOTH ANDROID AND IOS
Table IV
SS-API Type
Abbr. Description & Explanation
static analysis on both platforms in this section, and more
technical details are given in Appendix B.
type
to access
the
corresponds
location info.
Allows
This
to both AC-
CESS COARSE LOCATION and AC-
CESS FINE LOCATION in [9].
Allows to access information about net-
works. This SS-API type corresponds to
both ACCESS NETWORK STATE and
ACCESS WIFI STATE in [9].
Allows to collect battery statistics.
Allows to connect to bluetooth devices.
To discover and pair bluetooth devices.
Allows to initiate a phone call.
ACCESS LOCATION
LOC
ACCESS NETWORK
INFO
ANI
CWS
BATTERY STATS
BAT
BLUETOOTH
BLU
BLUETOOTH ADMIN BTA
PHO
CALL PHONE
CAMERA
CAM Allows to access the camera device.
CHANGE WIFI
MULTICAST STATE
FLASHLIGHT
INTERNET
READ CALENDAR
READ CONTACTS
READ DEVICE ID
RECORD AUDIO
SEND SMS
USE SIP
VIBRATE
WAKE LOCK
WRITE CALENDAR
WRITE CONTACTS
Allows applications to enter Wi-Fi Multi-
cast mode.
Allows access to the ﬂashlight.
Allows to open network sockets.
Allows to read the user’s calendar data.
Allows to read the user’s contacts data.
Allows to read the device ID.
Allows an application to record audio.
Allows to send SMS messages.
Allows an application to use SIP service.
Allows the access to the vibrator.
To disable auto-lock or screen-dimming.
Allows to write the user’s calendar data.
Allows to write the user’s contacts data.
FLA
INT
CAL
CON
RDI
RAU
SMS
SIP
VIB
WAK
CAL
CON
Similarly, Android provides APIs for checking the status
(e.g., availability or connectivity) of different network types
(e.g., WiFi or 3G). However, iOS APIs do not distinguish
the different network types when checking the reachability
of a given host or IP address. Thus, ACCESS NETWORK STATE
and ACCESS WIFI STATE are combined into a single SS-API
type – ACCESS NETWORK INFO to mitigate the bias when
comparing the SS-API usage on these two platforms.
The last reﬁned SS-API type is READ DEVICE ID. On
Android, the scope of READ PHONE STATE permission corre-
sponds to at least 18 Android API calls, which can be used
to read the device ID, phone number, SIM serial number
and some other information. However, on iOS, only device
ID is allowed to read since iOS 4.0. Other information is
forbidden to be accessed by third-party applications due to
security reasons. Thus, we create the READ DEVICE ID type
which only includes the SS-APIs on both platforms that
access the device ID. By obtaining the list of SS-API types
both supported on Android and iOS, we are now able to
analyze the usage differences of these SS-APIs in cross-
platform applications.
V. STATIC ANALYSIS TOOLS
To compare the SS-API usage for third-party applications
on Android and iOS, we build static analysis tools for both
Android applications (Dalvik bytecode) and iOS applications
(Objective-C executables). We explain the work ﬂow of the
A. Android Static Analysis Tool
list of SS-API types that
As introduced in Section II, each Android application
provides a list of privileges that is shown to the user during
installation, which is recorded in the AndroidManifest.xml in
each application package ﬁle. However,
the
this application actually
exact
accesses – many third-party applications are overprivileged
by requesting a superset of privileges [5]. Thus, the ultimate
goal of our Android static analysis tool
is to output a
minimum set of SS-API types that are accessed by the given
application. The work ﬂow of our Android tool is shown in
Figure 3.
this is not
Figure 3. The work ﬂow of our Android static analysis tool.
tool
As shown in Figure 3, for each Android application,
we ﬁrst obtain the corresponding Dalvik executable
(DEX), which is then disassembled into a set of .ddx
ﬁles using the Dedexer
[11]. With the extended
Android API call
to permission mapping [5], our tool
then performs multiple iterations on parsing and analyzing
the disassembled ﬁles to produce a candidate list of
SS-API types that this application accesses. However, this
candidate list is not a minimum set due to the ambiguity
in the Android API-to-permission mapping, which is
caused by Android’s permission validation mechanism. For
example,
android.app.ActivityManager.killBackgroundProcesses
API
or
KILL BACKGROUND PROCESSES – i.e., either permission
is sufﬁcient for the application to invoke this API call. In
order to further determine the exact privilege needed and
output a minimum set of SS-API types, our tool then takes
the intersection of the candidate list and the claimed list of
SS-API types (parsed from AndroidManifest.xml). The output
set of SS-API types is then used to compare with the set of
SS-API types used by the replica application on iOS.
RESTART PACKAGES
requires
either
call
There are several technical challenges in analyzing the
disassembled applications. On Android, SS-API calls may
be invoked with different class names due to inheritance.
By analyzing class information in the disassembled ﬁles,
our tool rebuilds the class hierarchy so that it can recognize
the API calls invoked from the applications’ own classes,
which are inherited from API classes. API calls may also be
invoked through Java reﬂection. Our tool performs backward
slicing [12] to resolve the method name and class name
actually invoked in each reﬂection instance – it traverses the
code backwards, resolving all instructions that inﬂuence the
method variable and class variable used in corresponding
reﬂection. We also apply speciﬁc heuristics to resolve inter-
procedural or inter-classes reﬂections. Although it is not
possible to completely resolve all reﬂections statically [13],
fortunately Android applications rarely use reﬂections ac-
cording to our observations, as reported in Appendix B.
Finally, SS-APIs may be accessed through content providers
and intents on Android. Our tool adopts the same mecha-
nisms as Stowaway [5] to recognize the invocation of content
providers and intents in the applications.
B. iOS Static Analysis Tool
Compared to Android, static analysis on iOS platform is
more challenging, as iOS is a closed-source architecture.
Apple tries to control all software executed on iOS devices
(iPhone, iPad and iPod Touch), which has several effects.
First of all, the only way for a non-jailbroken iOS device to
install third-party applications is through iTunes App Store.
When an application is downloaded via iTunes Store, it will
be encrypted and digitally signed by Apple. The decryption
key for the application is added to the device’s secure key
chain, so that each time this application is launched, it can
be decrypted and then start to run on the iOS device.
It is not possible to directly perform static analysis on
encrypted application binaries. Thus, before analyzing each
application downloaded from iTunes Store, we need to
obtain the decrypted application binary, which can only
be achieved on a jailbroken iOS device. Jailbreaking gives
us the capability to install the GNU Debugger, the Mach-
O disassembler oTool and also the OpenSSH server on
the device. These development tools enable us to crack
any installed application on the device. After obtaining the
decrypted iOS application binary, we utilize IDA Pro. [14]
to disassemble the binary to obtain assembly instructions.
However, IDA itself is only able to mark a very small por-
tion of Objective-C methods, especially when the symbols
are stripped in the binary. The underlying reason is that iOS
binaries are allowed to interchangeably use two instruction
sets, ARM and THUMB, which have different instruction