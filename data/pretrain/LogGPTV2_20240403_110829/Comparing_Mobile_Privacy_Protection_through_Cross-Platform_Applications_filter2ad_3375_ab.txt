### Platforms and Documentation in Literature

The term "platforms" is not present in the literature, which adds to the complexity. Although Google provides a comprehensive list of application permissions for Android [9], there is no official documentation specifying the privileges allowed for third-party applications on iOS. This lack of transparency is one of the mysteries we aim to uncover in our work.

### Privileges Not Supported on iOS

**Not supported on iOS:**
- **NETWORK STATE**: iOS does not have this feature.
- **MODIFY AUDIO SETTINGS**: iOS does not allow third-party apps to modify audio settings.
- **REMOVABLE STORAGE**: iOS does not support removable storage.

**Both supported by iOS and Android:**
- **BLUETOOTH**
- **READ CONTACTS**
- **RECORD AUDIO**

*Note: This column lists the number of SS-API types [9] in each privilege group.*

| Category | Number of SS-API Types |
|----------|------------------------|
| Both Supported | 20 |
| Not Supported on iOS | 51 |

### Permissions and Access Control

Although the term "permission" used on the Android platform is concise, it implies that there is access control in the architecture, which iOS lacks. In this paper, we use the term "SS-API type" to refer to a group of SS-APIs that require the same privilege to access certain private data or sensitive services. The names and scopes for most SS-API types follow the official Android permission list [9], with three exceptions explained in Section IV-C.

As shown in Table II, among all the Android SS-API types, three (PERSISTENT ACTIVITY, RESTART PACKAGES, and SET PREFERRED APPLICATIONS) are deprecated, and four (such as BRICK) do not exist in Android, as there are no API calls, content providers, or intents related to these SS-API types [5]. The remaining SS-API types are divided into three groups based on our findings.

### A. Privileges Reserved for Android System Applications

Android's openness and online documentation may mislead users and developers into thinking that third-party applications can obtain any privilege. However, many SS-APIs are reserved for original equipment manufacturers (OEMs) and are not granted to third-party applications. Examples include DELETE CACHE FILES, INSTALL LOCATION PROVIDER, and FACTORY TEST.

Since there is no official documentation specifying which privileges are reserved for OEMs on Android, we identified this list by analyzing the `protectionLevel` tags in the `frameworks/base/core/res/AndroidManifest.xml` file. These API types are labeled as `android:protectionLevel="signatureOrSystem"` or `android:protectionLevel="signature"`. To validate this list, we developed a testing application that attempts to access all SS-APIs on Android and records those denied to the application. We found 42 SS-API types reserved for system applications on Android, which are not granted to third-party applications unless they have root privileges.

### B. Privileges Not Supported on iOS

Among the SS-API types available to Android third-party applications, more than two-thirds are not supported on iOS. The reasons are either because iOS lacks the corresponding functionality or device, or because iOS does not allow third-party applications to have such privileges. Examples of unsupported SS-API types on iOS are provided in Table III.

Interestingly, some SS-API types are disallowed on iOS due to non-security reasons. APIs that change global settings affecting user experience (UX) are typically disallowed by Apple, leading some users to jailbreak their iPhones. Examples include MODIFY AUDIO SETTINGS, SET TIME ZONE, SET WALLPAPER, and WRITE SETTINGS.

### C. Privileges Supported by Both Android and iOS

The last group of privileges in Table II includes SS-API types supported on both Android and iOS. A comprehensive list is provided in Table IV. Although only 20 SS-API types are supported on both platforms, they cover common resources and services, including user calendar, contacts, Bluetooth, Wi-Fi state, camera, and vibrator. Due to API differences, the names and scopes of three SS-API types have been adjusted compared to their Android counterparts [9].

#### Refined SS-API Types

1. **ACCESS LOCATION**: On Android, there are two permissions (ACCESS COARSE LOCATION and ACCESS FINE LOCATION). iOS uses various techniques to determine location, but the mechanism is transparent to the application. For an iOS application, invoking location-related API calls requires both permissions. Thus, we created the ACCESS LOCATION SS-API type for a fair comparison.

2. **ACCESS NETWORK INFO**: Android provides APIs to check the status of different network types, while iOS does not distinguish between them. Therefore, ACCESS NETWORK STATE and ACCESS WIFI STATE are combined into a single SS-API type, ACCESS NETWORK INFO, to mitigate bias in comparing SS-API usage.

3. **READ DEVICE ID**: On Android, the READ PHONE STATE permission covers multiple pieces of information, including the device ID, phone number, and SIM serial number. On iOS, only the device ID is accessible since iOS 4.0. We created the READ DEVICE ID SS-API type to include only the device ID access.

### Static Analysis Tools

To compare SS-API usage for third-party applications on Android and iOS, we built static analysis tools for both platforms.

#### A. Android Static Analysis Tool

Each Android application provides a list of privileges in the `AndroidManifest.xml` file. However, many applications request a superset of privileges, leading to overprivileged applications [5]. Our tool aims to output a minimum set of SS-API types accessed by the application. The workflow is shown in Figure 3.

1. **Obtain Dalvik Executable (DEX)**: Disassemble the DEX file into .ddx files using Dedexer [11].
2. **Parse and Analyze Disassembled Files**: Use the extended Android API-to-permission mapping [5] to produce a candidate list of SS-API types.
3. **Resolve Ambiguity**: Take the intersection of the candidate list and the claimed list of SS-API types from `AndroidManifest.xml` to output a minimum set.

#### B. iOS Static Analysis Tool

Static analysis on iOS is more challenging due to its closed-source nature. Third-party applications must be installed through the iTunes App Store, and downloaded applications are encrypted and signed by Apple. To analyze these applications, we need to decrypt the binary on a jailbroken iOS device using development tools like GNU Debugger, Mach-O disassembler oTool, and OpenSSH server. After obtaining the decrypted binary, we use IDA Pro [14] to disassemble it. However, IDA Pro can only mark a small portion of Objective-C methods, especially when symbols are stripped. iOS binaries can use ARM and THUMB instruction sets, which further complicates the disassembly process.

By addressing these technical challenges, we can effectively compare the SS-API usage in cross-platform applications.