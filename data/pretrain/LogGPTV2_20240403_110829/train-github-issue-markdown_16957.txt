**Glide Version** :  
3.7.0
**Device/Android Version** :  
Reproduced on Android 7.0 emulator and various 6.0 devices (Nexus 5, Galaxy
Note 5, others)
**Issue details / Repro steps / Use case background** :
Suppose you have two images you want to toggle between in a single, static
`ImageView`. They're both memory-cached and so can theoretically display
immediately upon toggle, but to create a nicer user experience, you'd like to
fade out the previous image at the same time that you fade in the new image.
The resulting animation - composed of two fade animations at the same time -
is what most designers refer to as a "crossfade". It looks something like
this:
https://gfycat.com/WillingInsignificantHypacrosaurus
Unfortunately, this is not the default behavior of Glide, although it does
appear to be the intention. Consider the following Glide load call, where the
`RequestListener` is used to enforce Glide's `.crossfade()` functionality is
used every time (default functionality skips the `.crossfade()` animation once
the image has been memory-cached) :
        public static void loadWithCrossfadeAlways(@NonNull String path, @NonNull ImageView target) {
            Glide.with(target.getContext())
                    .load(path)
                    .listener(new RequestListener() {
                        @Override
                        public boolean onException(Exception e, String model, Target target, boolean isFirstResource) {
                            return false;
                        }
                        @Override
                        public boolean onResourceReady(GlideDrawable resource, String model, Target target, boolean isFromMemoryCache, boolean isFirstResource) {
                            ImageViewTarget imTarget = (ImageViewTarget) target;
                            return new DrawableCrossFadeFactory<>()
                                    .build(false, isFirstResource)
                                    .animate(resource, imTarget);
                        }
                    })
                    .into(target);
    }
The result does not produce a true crossfade, but instead immediately removes
the original image, and fades the new image in over the background of the
View:
https://gfycat.com/UnfoldedVastAmurstarfish
The reason for this appears to be in `ImageViewTarget.onLoadStarted(Drawable
placeholder)` and `ImageViewTarget.onLoadCleared(Drawable placeholder)`, both
of which contain a single call to `ImageView.setImageDrawable(placeholder)`.
The reasoning for this call's presence is self evident - it's how the
specified placeholder image gets rendered - but it prevents a smooth crossfade
from occurring, and worse yet, does so **even if`placeholder` is not specified
- i.e, its value is `null`**.
Ideally, the placeholder would be crossfaded in (as the previous image fades
out) and then crossfaded out (as the new image fades in), or in the case of a
missing placeholder or memory-cached image, omitted altogether.
In the meantime, it is possible to work around this by creating an
`ImageViewTarget` subclass that suppresses the above-described
`setImageDrawable()`:
    public class CrossfadeImageViewTarget extends GlideDrawableImageViewTarget {
        public CrossfadeImageViewTarget(ImageView view) {
            super(view);
        }
        @Override public void onLoadStarted(Drawable placeholder) {
            if (placeholder != null) {
                super.onLoadStarted(placeholder);
            }
        }
        @Override public void onLoadCleared(Drawable placeholder) {
            if (placeholder != null) {
                super.onLoadCleared(placeholder);
            }
        }
    }
Using this subclass as the target in the above loader method produces the
intended result.