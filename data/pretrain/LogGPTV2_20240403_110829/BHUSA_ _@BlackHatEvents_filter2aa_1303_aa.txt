#BHUSA   @BlackHatEvents
Google Reimagined a Phone. It’s Our Job to 
Red Team & Secure it
Xuan 
Xing
Eugene 
Rodionov
Christopher 
Cole
Farzan 
Karimi
#BHUSA   @BlackHatEvents
Information Classification: General
●
Who We Are
●
What’s Our Scope
●
How We Help Secure Android & Pixel 
●
Pixel 6 Attack Surface
●
Proof of Concept Deep Dives
○
Titan M2
○
Android Bootloader
●
Concluding Thoughts
Agenda
Agenda 
[Everything in this presentation has been fixed]
#BHUSA   @BlackHatEvents 
Who We Are
#BHUSA   @BlackHatEvents
Information Classification: General
 Mission
We are the eyes of Android Security: Increase Pixel and Android security by attacking key 
components and features, identifying critical vulnerabilities before adversaries
Offensive Security Reviews to verify (break) security assumptions
Scale through tool development (e.g. continuous fuzzing)
Android Red Team 
Develop PoCs to demonstrate real-world impact
We hack ourselves to make it harder for others!
Assess the efficacy of security mitigations
#BHUSA   @BlackHatEvents
Information Classification: General
What’s Our Scope?
#BHUSA   @BlackHatEvents
Information Classification: General
Robust 
Development 
Practices
Compiler 
Mitigations
New Platform 
Mitigations
Vulnerability 
Reward Programs
Hardware 
Architecture 
Reviews
Threat Modeling
Red Team
How Do We Secure Android & Pixel?
External Security 
Reviews
You!
#BHUSA   @BlackHatEvents 
Information Classification: General
Fuzzing
Host-based Fuzzing
On-device Fuzzing
Static 
Analysis
Dynamic 
Analysis
(Services)
Variant Analysis
Formal Verification
Manual Code Review
Web/Mobile 
Network 
TitanM
Red Team Attack Approaches
#BHUSA   @BlackHatEvents 
Pixel Hardware 
Journey
#BHUSA   @BlackHatEvents 
Information Classification: General
Pixel 1
Pixel as a reference 
device  
Pixel 2
Building our own 
Camera chip
Pixel 4
Custom Dedicated 
Hardware
Pixel 6
Security Re-imagined 
Google Tensor & Titan M2
Pixel 5
Pixel Hardware Journey
Pixel 3
Custom Titan 
Security Chip
External Certification 
(CC MDF)
#BHUSA   @BlackHatEvents
Information Classification: General
GSA
Apps
Boot
Loader
Tensor 
Security 
Core
Titan 
M2
Vulnerability trends are moving down the stack*
Kernel
User
Mobile Phone Vulnerability Trends
* Pyramid represents vulnerability trend direction, not attack surface size
#BHUSA   @BlackHatEvents 
Information Classification: General
$2.5m
Android FCP 
Zero Click
Vulnerability Payouts
#BHUSA   @BlackHatEvents 
Pixel Attack Surface
#BHUSA   @BlackHatEvents
Information Classification: General
Google Tensor SoC
Modem
Titan M2
AP
Google Tensor 
Security Core
TSC Secure 
Kernel
Baseband 
firmware
Normal World
Secure World
EL1:
Android Bootloader
EL1: Android GKI
EL0: Android Apps & 
services
S-EL0: Trusty TAs
Titan M2 
firmware
S-EL3: EL3 Monitor
S-EL1: Trusty 
Kernel, LDFW
Updated features in Pixel 6
New features in Pixel 6
Attack surface tested and 
mitigated
LEGEND
Attack surface covered in this 
presentation
EL0: Trusty TAs
EL1: Trusty Kernel
EL3: Secure Monitor
EL1:
Android Bootloader
EL1: Android GKI
EL0: Android Apps & 
Services
Baseband 
firmware
TSC Secure 
Kernel
Titan M2 
firmware
Baseband 
firmware
Titan M2 
firmware
EL1:
Android Bootloader
Red Teaming Pixel 6
#BHUSA   @BlackHatEvents 
Titan M2 Code 
Execution
#BHUSA   @BlackHatEvents 
Information Classification: General
Titan M2 Overview
Titan M1 vs Titan M2
Discrete security component - element of Pixel 6 with 
the highest level of security assurances on the device 
(including resistance to physical attacks)
Provides critical security services: hardware-based 
key storage, Android Verified Boot, Attestation 
services
Based on custom RISC-V architecture
Redesigned operating system on Titan M2
 Titan M2 Overview
Results: 21 security issues has been identiﬁed: 
1 Critical, 14 Highs, 1 Moderate, 5 NSIs
1) 2021: A Titan M Odyssey, Maxime Rossi Bellom, Damiano Melotti, and Philippe Teuwen
#BHUSA   @BlackHatEvents 
Information Classification: General
Titan M2 Attack Surface
Directly exposed to 
the attacker
Not directly 
exposed to the 
attacker
LEGEND
#BHUSA   @BlackHatEvents 
Information Classification: General
What makes Titan M2 More Secure?
Code section is Read-Only, data and stack Not Executable
- Enforced by PMP registers and custom Titan M2 extensions
R^X policy
Every task is isolated from each other
- Each task can read/write only its own stack and globals
- Code section is readable to all the tasks
- Enforced by PMP registers
Isolation
ACL implementation for syscalls
- Restrict syscall usage on a task-based level enforced by the Titan M2 kernel
ACL
Every task has an isolated file system on the secure flash
- Enforced by the Titan M2 kernel
Isolated Filesystem
#BHUSA   @BlackHatEvents 
Information Classification: General
Fuzzing Approaches 
keymaster
weaver
runtime service
avb
user mode
machine mode
Kernel (task & memory management)
identity
crypto
Pros
Cons
Host-based Fuzzing
Emulator-based fuzzing
- Takes advantage of existing fuzzing tools for 
x86 architecture (ASan, libFuzzer, gdb)
- Good fuzzing performance
- False-positives
- Missing coverage
Port subset of Titan firmware to x86 32-bit arch
Use a full-system emulator to fuzz the target
- Comprehensive coverage of the target
- Support of all the peripherals
- No false-positives
- Missing fuzzing code instrumentation (ASan, 
fuzzing code coverage)
- Slow fuzzing performance
Covered by the 
host fuzzer
Not covered by 
the host fuzzer
LEGEND
Architecture-specific 
drivers
#BHUSA   @BlackHatEvents 
Information Classification: General
Fuzzing Outcomes
Fuzzing 
performance & 
coverage:
 - Emulator-based 
fuzzer: on average 5 
test cases per second
- Host-based fuzzers: on 
average ~200 times 
faster than 
emulator-based 
approach
 - Host-based and 
emulator-based fuzzers 
discovered relatively 
disjoint set of issues
In total 3 fuzzers 
were developed to 
cover Titan M2 
firmware:
- libprotobuf-mutator  
host-based fuzzer
- ASN-parsing 
host-based fuzzer
- libprotobuf-mutator 
emulator-based fuzzer
Fuzzing challenges:
- Most of the tasks 
(especially Keymaster and 
Identity) implement 
stateful code
- Difficult to reach for the 
fuzzers
- Hard to reproduce 
issues when fuzzing in 
persistent mode
- Obstacles for fuzzing 
Keymaster due to the 
crypto code
#BHUSA   @BlackHatEvents 
Information Classification: General
OOB Write in Identity Task: Write-What-Where Primitive
●
OOB write in globals in eicPresentationPushReaderCert
Global variables of Identity task:
...
/* Starting address of the overflow */
/*0x0000*/ readerPublicKey;
/*0x0044*/ readerPublicKeySize;
…
/*0x00a0*/ cbor.size;
/*0x00a4*/ cbor.bufferSize; readerPublicKeySize = publickey_length;
    // sizeof(ctx->readerPublicKey) == 65
    // publickey_length readerPublicKey, publickey, publickey_length);
    return true;
}
●
Exploitation:
○
Use the vulnerability to load cbor.buffer and 
cbor.bufferSize with attacker-controlled values
○
Invoke eicCborAppendString to write at  
cbor.buffer number of cbor.bufferSize 
attacker-controlled bytes
●
This enables code execution in Identity task only
○
Titan implements task isolation
■
cannot access other tasks’ memory
#BHUSA   @BlackHatEvents 
Information Classification: General
Achieving Code Execution in Identity task
Attacker
Set Identity state #1
Set Identity state #2
ICinitializeRequest
Set Identity state #3
Identity task
Advance Identity to the state 
for step #2