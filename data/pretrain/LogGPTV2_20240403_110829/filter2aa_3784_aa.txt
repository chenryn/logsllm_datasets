# Shoes
Category: Networking, 80 Points
## Description
> Hi Ash! We have found Team Rocket's secret server. 
> 
> We have a good feeling that there is a hidden message inside it, and you have to find it. In order to help you, we have managed to get a PCAP from someone who had access to the server in the past, we hope you find it useful.
> 
> In addition, we have discovered an email that may be connected. All of the files are safe for download, don't worry.
> 
> Good luck!
A network capture and an email were attached.
## Solution
The attached email describes a conversation between two members of Team Rocket:
```
To:                                               PI:EMAIL
Subject:                                     RE: My protocolll
Hi sis! Make it double haha ;)
I reviewed your work, love how you didn't reinvent the wheel in your implementation, smart!
Regarding the checksum, Meowth suggested for using a standard error detection mechanism, you can use a similar algorithm of Ethernet's checksum, but keep it simple...
I hope it will keep Ash outside of our servers!
James,
Team Rocket inc.
From: Jessie 
Sent: Wednesday, January 8, 2020 11:35 AM
To: PI:EMAIL
Subject: My protocolll
Sup Jessie! Prepare for trouble... just kidding.
I'm trying to implement our server communication protocol, do ya think we need some kind of checksum?
Jessie,
Team Rocket inc.
```
The attached network capture includes the following protocols:
```console
root@kali:/media/sf_CTFs/checkpoint/Shoes# tshark -nr capture.pcapng -qz io,phs
Running as user "root" and group "root". This could be dangerous.
===================================================================
Protocol Hierarchy Statistics
Filter:
eth                                      frames:111 bytes:11496
  ip                                     frames:108 bytes:11324
    tcp                                  frames:78 bytes:7682
      http                               frames:8 bytes:2072
      socks                              frames:14 bytes:2242
    icmp                                 frames:14 bytes:1372
    udp                                  frames:16 bytes:2270
      dns                                frames:16 bytes:2270
  arp                                    frames:2 bytes:102
  ipv6                                   frames:1 bytes:70
    icmpv6                               frames:1 bytes:70
===================================================================
```
The "socks" messages seems to contain an interesting payload, and seem related to the challenge name.
Let's take a look at the payload:
```console
root@kali:/media/sf_CTFs/checkpoint/Shoes# tshark -nr capture.pcapng -Y 'socks' -T fields -e frame.number -e ip.src -e ip.dst -e tcp.payload
Running as user "root" and group "root". This could be dangerous.
67      10.0.2.15       52.28.255.56    5a:01:fe:dd:74:9c:2e
69      52.28.255.56    10.0.2.15       5a:fe:2c:91:60:5e:14:c8:b1:1b
71      10.0.2.15       52.28.255.56    5a:2c:d2:33:1f:a9:0b:b9:6a
73      10.0.2.15       52.28.255.56    5a:01:00:01:c0:a8:ad:0a:00:50:74:f2:be:19
75      52.28.255.56    10.0.2.15       5a:00:00:01:00:00:00:00:00:00:eb:cb:75:43
77      10.0.2.15       52.28.255.56    47:45:54:20:2f:20:48:54:54:50:2f:31:2e:31:0d:0a:55:73:65:72:2d:41:67:65:6e:74:3a:20:4d:6f:7a:69:6c:6c:61:2f:35:2e:30:20:28:57:69:6e:64:6f:77:73:20:4e:54:20:31:30:2e:30:3b:20:57:69:6e:36:34:3b:20:78:36:34:29:20:41:70:70:6c:65:57:65:62:4b:69:74:2f:35:33:37:2e:33:36:20:28:4b:48:54:4d:4c:2c:20:6c:69:6b:65:20:47:65:63:6b:6f:29:20:43:68:72:6f:6d:65:2f:37:34:2e:30:2e:33:37:32:39:2e:31:36:39:20:53:61:66:61:72:69:2f:35:33:37:2e:33:36:0d:0a:48:6f:73:74:3a:20:77:77:77:2e:74:75:74:6f:72:69:61:6c:73:70:6f:69:6e:74:2e:63:6f:6d:0d:0a:41:63:63:65:70:74:2d:4c:61:6e:67:75:61:67:65:3a:20:65:6e:2d:75:73:0d:0a:43:6f:6e:6e:65:63:74:69:6f:6e:3a:20:4b:65:65:70:2d:41:6c:69:76:65:0d:0a:0d:0a
79      52.28.255.56    10.0.2.15       48:54:54:50:2f:31:2e:31:20:32:30:30:20:4f:4b:0d:0a:44:61:74:65:3a:20:57:65:64:2c:20:32:32:20:41:70:72:20:32:30:32:30:20:31:31:3a:32:31:3a:35:30:20:47:4d:54:0d:0a:53:65:72:76:65:72:3a:20:41:70:61:63:68:65:2f:32:2e:34:2e:32:39:20:28:55:62:75:6e:74:75:29:0d:0a:4c:61:73:74:2d:4d:6f:64:69:66:69:65:64:3a:20:57:65:64:2c:20:32:32:20:41:70:72:20:32:30:32:30:20:31:30:3a:34:39:3a:35:36:20:47:4d:54:0d:0a:45:54:61:67:3a:20:22:39:64:2d:35:61:33:64:65:65:34:39:31:64:61:37:32:22:0d:0a:41:63:63:65:70:74:2d:52:61:6e:67:65:73:3a:20:62:79:74:65:73:0d:0a:43:6f:6e:74:65:6e:74:2d:4c:65:6e:67:74:68:3a:20:31:35:37:0d:0a:56:61:72:79:3a:20:41:63:63:65:70:74:2d:45:6e:63:6f:64:69:6e:67:0d:0a:4b:65:65:70:2d:41:6c:69:76:65:3a:20:74:69:6d:65:6f:75:74:3d:35:2c:20:6d:61:78:3d:31:30:30:0d:0a:43:6f:6e:6e:65:63:74:69:6f:6e:3a:20:4b:65:65:70:2d:41:6c:69:76:65:0d:0a:43:6f:6e:74:65:6e:74:2d:54:79:70:65:3a:20:74:65:78:74:2f:68:74:6d:6c:0d:0a:0d:0a:46:69:6c:65:73:20:69:6e:20:73:65:72:76:65:72:3a:0a:0a:69:6e:64:65:78:2e:68:74:6d:6c:0a:41:72:62:6f:6b:2e:6a:70:67:0a:42:6c:61:73:74:6f:69:73:65:2e:6a:70:67:0a:42:75:6c:62:61:73:61:75:72:2e:6a:70:67:0a:42:75:74:74:65:72:66:72:65:65:2e:6a:70:67:0a:43:68:61:72:69:7a:61:72:64:2e:6a:70:67:0a:46:6c:61:67:2e:6a:70:67:0a:4d:65:74:61:70:6f:64:2e:6a:70:67:0a:52:61:74:74:61:74:61:2e:6a:70:67:0a:53:71:75:69:72:74:6c:65:2e:6a:70:67:0a:57:61:72:74:6f:72:74:6c:65:2e:6a:70:67:0a:0a
91      10.0.2.15       52.28.255.56    5a:01:fe:dd:74:9c:2e
93      52.28.255.56    10.0.2.15       5a:fe:67:a6:f1:93:f4:76:98:64
95      10.0.2.15       52.28.255.56    5a:67:e5:a2:d2:49:b5:90:15
97      10.0.2.15       52.28.255.56    5a:01:00:01:c0:a8:ad:0a:00:50:74:f2:be:19
99      52.28.255.56    10.0.2.15       5a:00:00:01:00:00:00:00:00:00:eb:cb:75:43
101     10.0.2.15       52.28.255.56    47:45:54:20:2f:20:48:54:54:50:2f:31:2e:31:0d:0a:55:73:65:72:2d:41:67:65:6e:74:3a:20:4d:6f:7a:69:6c:6c:61:2f:35:2e:30:20:28:57:69:6e:64:6f:77:73:20:4e:54:20:31:30:2e:30:3b:20:57:69:6e:36:34:3b:20:78:36:34:29:20:41:70:70:6c:65:57:65:62:4b:69:74:2f:35:33:37:2e:33:36:20:28:4b:48:54:4d:4c:2c:20:6c:69:6b:65:20:47:65:63:6b:6f:29:20:43:68:72:6f:6d:65:2f:37:34:2e:30:2e:33:37:32:39:2e:31:36:39:20:53:61:66:61:72:69:2f:35:33:37:2e:33:36:0d:0a:48:6f:73:74:3a:20:77:77:77:2e:74:75:74:6f:72:69:61:6c:73:70:6f:69:6e:74:2e:63:6f:6d:0d:0a:41:63:63:65:70:74:2d:4c:61:6e:67:75:61:67:65:3a:20:65:6e:2d:75:73:0d:0a:43:6f:6e:6e:65:63:74:69:6f:6e:3a:20:4b:65:65:70:2d:41:6c:69:76:65:0d:0a:0d:0a
103     52.28.255.56    10.0.2.15       48:54:54:50:2f:31:2e:31:20:32:30:30:20:4f:4b:0d:0a:44:61:74:65:3a:20:57:65:64:2c:20:32:32:20:41:70:72:20:32:30:32:30:20:31:31:3a:32:31:3a:35:37:20:47:4d:54:0d:0a:53:65:72:76:65:72:3a:20:41:70:61:63:68:65:2f:32:2e:34:2e:32:39:20:28:55:62:75:6e:74:75:29:0d:0a:4c:61:73:74:2d:4d:6f:64:69:66:69:65:64:3a:20:57:65:64:2c:20:32:32:20:41:70:72:20:32:30:32:30:20:31:30:3a:34:39:3a:35:36:20:47:4d:54:0d:0a:45:54:61:67:3a:20:22:39:64:2d:35:61:33:64:65:65:34:39:31:64:61:37:32:22:0d:0a:41:63:63:65:70:74:2d:52:61:6e:67:65:73:3a:20:62:79:74:65:73:0d:0a:43:6f:6e:74:65:6e:74:2d:4c:65:6e:67:74:68:3a:20:31:35:37:0d:0a:56:61:72:79:3a:20:41:63:63:65:70:74:2d:45:6e:63:6f:64:69:6e:67:0d:0a:4b:65:65:70:2d:41:6c:69:76:65:3a:20:74:69:6d:65:6f:75:74:3d:35:2c:20:6d:61:78:3d:31:30:30:0d:0a:43:6f:6e:6e:65:63:74:69:6f:6e:3a:20:4b:65:65:70:2d:41:6c:69:76:65:0d:0a:43:6f:6e:74:65:6e:74:2d:54:79:70:65:3a:20:74:65:78:74:2f:68:74:6d:6c:0d:0a:0d:0a:46:69:6c:65:73:20:69:6e:20:73:65:72:76:65:72:3a:0a:0a:69:6e:64:65:78:2e:68:74:6d:6c:0a:41:72:62:6f:6b:2e:6a:70:67:0a:42:6c:61:73:74:6f:69:73:65:2e:6a:70:67:0a:42:75:6c:62:61:73:61:75:72:2e:6a:70:67:0a:42:75:74:74:65:72:66:72:65:65:2e:6a:70:67:0a:43:68:61:72:69:7a:61:72:64:2e:6a:70:67:0a:46:6c:61:67:2e:6a:70:67:0a:4d:65:74:61:70:6f:64:2e:6a:70:67:0a:52:61:74:74:61:74:61:2e:6a:70:67:0a:53:71:75:69:72:74:6c:65:2e:6a:70:67:0a:57:61:72:74:6f:72:74:6c:65:2e:6a:70:67:0a:0a
```
It looks like we have two sessions: 67-79, and 91-103. The payload in both sessions is similar but not identical.
We'll ignore the long packets for now (77, 79, 101, 103) and try to analyze the shorter ones.
The communication is done over the SOCKS port (1080), but the protocol itself doesn't match the SOCKS spec. 
The mail mentioned a checksum, so maybe we should start by locating it. It should be standard according to the mail. The [Ethernet Checksum](https://en.wikipedia.org/wiki/Frame_check_sequence) is CRC32 (4 bytes long), so let's try that:
```console
root@kali:/media/sf_CTFs/checkpoint/Shoes# crc32  ...
```
Now, the mail said: *love how you didn't reinvent the wheel in your implementation*. Maybe this is similar to [SOCKS](https://en.wikipedia.org/wiki/SOCKS)?
> * Client connects and sends a greeting, which includes a list of authentication methods supported.
> * Server chooses one of the methods (or sends a failure response if none of them are acceptable).
> * Several messages may now pass between the client and the server, depending on the authentication method chosen.
> * Client sends a connection request similar to SOCKS4.
> * Server responds similar to SOCKS4.
In SOCKS, the client greeting consists of:
|   |	VER | NAUTH |	AUTH |
|---|---|---|---|
|Byte count |	1 |	1 |	variable |
* SOCKS version
* Number of authentication methods supported
* Authentication methods, 1 byte per method supported (0x80â€“0xFE: methods reserved for private use)
All the messages start with `0x5a`, so that might be a protocol version.
Then we have `0x1` which fits the *number of authentication methods supported*, followed by `0xfe` which can be an authentication method.
So, we have:
|   |	VER | NAUTH |	AUTH |
|---|---|---|---|
|Contents |	0x5a |	1 |	0xfa |
This is good, since the next message generally matches the SOCKS server response:
|   |	VER | CAUTH |
|---|---|---|
|Byte count |	1 |	1 |
* SOCKS version
* Chosen authentication method, or 0xFF if no acceptable methods were offered 
* The subsequent authentication is method-dependent
The message starts with `0x5a`, then the chosen authentication method (`0xfe`) and the subsequent authentication scheme (`2c:91:60:5e`). 
|   |	VER | CAUTH |
|---|---|---|
|Contents |	0x5a |	0xfa |
Let's try to crack the authentication scheme using the information we have from both sessions.
```
Session #1:
Receive from server: 2c:91:60:5e
Send to server:      2c:d2:33:1f
Session #2: 
Receive from server:  67:a6:f1:93
Send to server:       67:e5:a2:d2
```
The most trivial authentication scheme would be using a simple XOR key. Let's try to XOR the challenge and response to see if we can get a key.
```python
>>> def str_to_bytes(s):
...     return bytes.fromhex(s.replace(":", ""))
...
>>> def xor_str(a, b):
...     return bytes((x ^ y for x, y in zip(str_to_bytes(a), str_to_bytes(b))))
...
>>> xor_str("2c:91:60:5e", "2c:d2:33:1f")
b'\x00CSA'
>>> xor_str("67:a6:f1:93", "67:e5:a2:d2")
b'\x00CSA'
```