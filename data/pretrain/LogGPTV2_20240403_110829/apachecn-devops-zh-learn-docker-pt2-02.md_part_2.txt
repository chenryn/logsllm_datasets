*   `CREATED`:这告诉你容器是什么时候创建的。
*   `STATUS`:这告诉你容器的当前状态。
*   `PORTS`:这告诉您是否有任何端口被分配给该容器。
*   `NAMES`:Docker 引擎通过串联一个形容词和一个名词自动生成一个随机的容器名。容器标识或其名称可用于对容器采取进一步的操作。可以使用`docker run`子命令中的`--name`选项手动配置容器名称。
查看了容器状态后，让我们使用`docker attach`子命令连接回我们的容器，如下例所示。我们可以使用容器标识或其名称。在这个例子中，我们使用了容器名。如果没有看到提示，则再次按下*进入*键:
```
$ sudo docker attach jolly_lovelace
root@742718c21816:/#  
```
Docker allows attaching with a container any number of times, which proves to be very handy for screen sharing.
`docker attach`子命令将我们带回到容器提示。让我们对使用以下命令启动并运行的交互式容器进行更多的实验:
```
root@742718c21816:/# pwd
/
root@742718c21816:/# ls
bin dev home lib64 mnt proc run srv tmp var
boot etc lib media opt root sbin sys usr
root@742718c21816:/# cd usr
root@742718c21816:/usr# ls
bin games include lib local sbin share src
root@742718c21816:/usr# exit
exit
$  
```
一旦向交互容器发出 Bash `exit`命令，就会终止 Bash shell 进程，进而停止容器。因此，我们将登陆 Docker 主机的提示`$`。
### 跟踪容器内部的变化
在上一节中，我们演示了如何以`ubuntu`为基础映像制作容器，然后运行一些基本命令，例如分离和连接容器。在这个过程中，我们还向您展示了`docker ps`子命令，它提供了基本的容器管理功能。在本节中，我们将演示如何有效地跟踪我们在容器中引入的更改，并将其与启动容器时的映像进行比较。让我们以交互模式启动一个容器，如前一节所述:
```
$ sudo docker run -i -t ubuntu:16.04 /bin/bash  
```
我们把目录改成`/home`，如下图:
```
root@d5ad60f174d3:/# cd /home  
```
现在，我们可以使用`touch`命令创建三个空文件，如下所示。第一个`ls -l`命令显示目录中没有文件，第二个`ls -l`命令显示有三个空文件:
```
root@d5ad60f174d3:/home# ls -l
total 0
root@d5ad60f174d3:/home# touch {abc,cde,fgh}
root@d5ad60f174d3:/home# ls -l
total 0
-rw-r--r-- 1 root root 0 Sep 29 10:54 abc
-rw-r--r-- 1 root root 0 Sep 29 10:54 cde
-rw-r--r-- 1 root root 0 Sep 29 10:54 fgh
root@d5ad60f174d3:/home#  
```
Docker 引擎优雅地管理它的文件系统，它允许我们使用`docker diff`子命令检查容器文件系统。为了检查容器文件系统，我们可以将其从容器中分离出来，或者使用 Docker 主机的另一个终端，然后发出`docker diff`子命令。由于我们知道任何`ubuntu`容器都有其主机名，这是其提示的一部分，也是容器的 ID，因此我们可以使用从提示中获取的容器 ID 直接运行`docker diff`子命令，如下所示:
```
$ sudo docker diff d5ad60f174d3  
```
在给定的示例中，`docker diff`子命令将生成四行，如下所示:
```
C /home
A /home/abc
A /home/cde
A /home/fgh 
```
前面的输出表示`/home`目录已经修改，用`C`表示，添加了`/home/abc`、`/home/cde`和`/home/fgh`文件，用`A`表示。另外，`D`表示删除。因为我们没有删除任何文件，所以它不在我们的示例输出中。
When we work with an image and if we don't specify that image through an appropriate identity (say, a new name), then the `latest` image (recently generated) will always be identified and used by the Docker Engine.
### 控制 Docker 容器
到目前为止，我们已经讨论了一些实际的例子来清楚地阐明 Docker 容器的本质。在这一节中，我们将介绍一些基本的以及一些高级的命令结构，用于详细说明如何管理 Docker 容器。
Docker 引擎使您能够使用一组子命令`start`、`stop`和`restart`容器。让我们从`docker stop`子命令开始，它停止一个正在运行的容器。当用户发出该命令时，Docker Engine 将 **SIGTERM** (-15)发送给在容器内部运行的主进程。SIGTERM 信号请求进程优雅地自行终止。大多数进程都会处理这个信号，并促进优雅的退出。但是，如果此过程失败，则 Docker 引擎将等待一段宽限期。宽限期过后，如果流程尚未终止，则 Docker 引擎将强制终止流程。强制终止通过发送**信号终止** (-9)来实现。SIGKILL 信号不能被捕获或忽略，因此，如果没有适当的清除，它将导致进程的突然终止。
现在，让我们启动容器并使用`docker stop`子命令进行实验，如下所示:
```
$ sudo docker run -i -t ubuntu:16.04 /bin/bash
root@da1c0f7daa2a:/#  
```
启动容器后，让我们使用从提示中获取的容器标识对此容器运行`docker stop`子命令。当然，我们必须使用第二个屏幕/终端来运行该命令，并且该命令将总是回显到容器 ID，如下所示:
```
$ sudo docker stop da1c0f7daa2a
da1c0f7daa2a  
```
现在，如果我们切换到运行容器的屏幕/终端，我们会注意到容器正在被终止。如果你观察得更敏锐一点，那么你也会注意到容器提示旁边的`exit`文字。这是由于 Bash 外壳的 SIGTERM 处理机制造成的，如下所示:
```
root@da1c0f7daa2a:/# exit
$  
```
如果我们更进一步运行`docker ps`子命令，那么我们在列表中的任何地方都找不到这个容器。事实是`docker ps`子命令默认总是列出处于运行状态的容器。由于我们的容器处于停止状态，它被轻松地排除在列表之外。现在，您可能会问，我们如何看到处于停止状态的容器？嗯，`docker ps`子命令有一个额外的参数`-a`，它将列出 Docker 主机中的所有容器，而不管其状态如何。这可以通过运行以下命令来完成:
```
$ sudo docker ps -a
CONTAINER ID IMAGE COMMAND 
CREATED STATUS PORTS 
NAMES
da1c0f7daa2a ubuntu:16.04 "/bin/bash" 
20 minutes ago Exited (0) 10 minutes ago 
desperate_engelbart
$  
```
接下来，让我们看看`docker start`子命令，它用于启动一个或多个停止的容器。通过`docker stop`子命令或通过正常或异常终止容器中的主进程，容器可以移动到停止状态。在正在运行的容器上，此子命令不起作用。
让我们使用`docker start`子命令，通过指定容器标识作为参数来启动之前停止的容器，如下所示:
```
$ sudo docker start da1c0f7daa2a
da1c0f7daa2a
$  
```
默认情况下，`docker start`子命令不会附加到容器。您可以使用`docker start`子命令中的`-a`选项或者通过显式使用`docker attach`子命令将其附加到容器，如下所示:
```
$ sudo docker attach da1c0f7daa2a
root@da1c0f7daa2a:/#  
```
现在，让我们运行`docker ps`并验证容器的运行状态，如下所示:
```
$ sudo docker ps
CONTAINER ID IMAGE COMMAND 
CREATED STATUS PORTS 
NAMES
da1c0f7daa2a ubuntu:16.04 "/bin/bash" 25 minutes ago Up 3 minutes 
desperate_engelbart
$  
```
`restart`命令是`stop`和`start`功能的组合。换句话说，`restart`命令将按照`docker stop`子命令遵循的相同步骤停止正在运行的容器，然后它将启动`start`过程。默认情况下，该功能将通过`docker restart`子命令执行。
下一组重要的容器控制子命令是`docker pause`和`docker unpause`。`docker pause`子命令实质上将冻结该容器内所有进程的执行。相反，`docker unpause`子命令将解冻该容器内所有进程的执行，并从冻结点恢复执行。
看完`pause` / `unpause`的技术说明，我们来看一个详细的例子来说明这个特性是如何工作的。我们使用了两个屏幕/终端场景。在一个终端上，我们启动了我们的容器，并使用无限 while 循环来显示日期和时间，休眠 5 秒钟，然后继续循环。我们将运行以下命令:
```
$ sudo docker run -i -t ubuntu:16.04 /bin/bash
root@c439077aa80a:/# while true; do date; sleep 5; done
Thu Oct 2 03:11:19 UTC 2016
Thu Oct 2 03:11:24 UTC 2016
Thu Oct 2 03:11:29 UTC 2016
Thu Oct 2 03:11:34 UTC 2016
Thu Oct 2 03:11:59 UTC 2016
Thu Oct 2 03:12:04 UTC 2016
Thu Oct 2 03:12:09 UTC 2016
Thu Oct 2 03:12:14 UTC 2016
Thu Oct 2 03:12:19 UTC 2016
Thu Oct 2 03:12:24 UTC 2016
Thu Oct 2 03:12:29 UTC 2016
Thu Oct 2 03:12:34 UTC 2016    
```
我们的小脚本非常忠实地每 5 秒打印一次日期和时间，以下位置有一个例外:
```
Thu Oct 2 03:11:34 UTC 2016
Thu Oct 2 03:11:59 UTC 2016  
```