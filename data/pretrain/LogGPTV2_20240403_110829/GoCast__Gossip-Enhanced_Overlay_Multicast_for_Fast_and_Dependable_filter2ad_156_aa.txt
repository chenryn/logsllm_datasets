title:GoCast: Gossip-Enhanced Overlay Multicast for Fast and Dependable
Group Communication
author:Chunqiang Tang and
Rong N. Chang and
Christopher Ward
GoCast: Gossip-Enhanced Overlay Multicast for Fast and
Dependable Group Communication
Chunqiang Tang, Rong N. Chang, and Christopher Ward
IBM T.J. Watson Research Center
{ctang,rong,cw1}@us.ibm.com
Abstract
We study dependable group communication for large-
scale and delay-sensitive mission critical applications. The
goal is to design a protocol that imposes low loads on bot-
tleneck network links and provides both stable throughput
and fast delivery of multicast messages even in the presence
of frequent node and link failures. To this end, we propose
our GoCast protocol. GoCast builds a resilient overlay net-
work that is proximity aware and has balanced node de-
grees. Multicast messages propagate rapidly through an
efﬁcient tree embedded in the overlay. In the background,
nodes exchange message summaries (gossips) with their
overlay neighbors and pick up missing messages due to dis-
ruptions in the tree-based multicast. Our simulation based
on real Internet data shows that, compared with a tradi-
tional gossip-based multicast protocol, GoCast can reduce
the delivery delay of multicast messages by a factor of 8.9
when no node fails or a factor of 2.3 when 20% nodes fail.
1.
Introduction
With the rapid growth of the Internet, more and more
applications are being developed for (or ported to) wide-
area networks in order to take advantage of resources avail-
able at geographically disparate locations, e.g., Grids, peer-
to-peer data sharing, and computer-supported collaborative
work. As part of IBM’s Advanced Operating Environ-
ment (AOE) initiative, we are developing an intelligent in-
frastructure to support these large-scale distributed applica-
tions. The design goals for this infrastructure include self-
organizing to minimize manual conﬁgurations, self-healing
to cope with failures, self-tuning to improve service qual-
ity, and self-learning through machine learning techniques
to extract knowledge from past experiences to advise the
self-organizing, self-healing, and self-tuning components.
In this paper, we focus on the dependable group com-
munication protocol in our infrastructure. Group commu-
nication efﬁciently delivers messages to a large number of
receivers. It is a basic utility for writing distributed applica-
tions and can be used for various purposes, for instance, dis-
seminating system monitoring events to facilitate the man-
agement of distributed systems [8], and propagating updates
of shared state to maintain cache consistency. A dependable
group communication protocol for large-scale and delay-
sensitive mission critical applications should meet at least
the following basic requirements.
• Reliable message delivery. The system should sustain
stable throughput even in the face of frequent packet
losses and node failures. Systems that solely optimize
for friendly environments are unacceptable.
• Fast message delivery. Many mission critical appli-
cations have soft real-time constraints, e.g., airline con-
trol and system monitoring. When a deadline is missed,
the message becomes useless. Even within the dead-
line, the value of the message depreciates over time.
• Scalable performance. The system should be self-
adaptive to handle dynamic node joins and leaves. As
the system grows, the degradation in efﬁciency, relia-
bility, and message delay should be graceful.
• Efﬁcient network resource consumption. When
multicasting a message to a large number of receivers
at the application level, the underlying network links
carry different trafﬁc. It is important not to impose an
extremely high load on any physical link.
Two categories of existing protocols—reliable multicast
and gossip multicast—have the potential to meet some but
not all the requirements above. Reliable multicast (e.g.,
SRM [7]) sends messages through a tree and relies on re-
transmissions to handle failures. In a friendly environment,
it propagates messages rapidly. Previous study [14], how-
ever, has shown that a small number of disturbed nodes can
lead to dramatically reduced throughput of the entire sys-
tem. Reliable multicast, therefore, is not a scalable solution
for dependable group communication.
In gossip multicast (e.g., Bimodal Multicast [2]), nodes
periodically choose some random nodes to propagate sum-
maries of message IDs (so-called “gossips”) and pick up
missing messages heard from gossips. The redundancy in
gossip paths addresses both node and link failures. Gos-
sip multicast delivers stable throughput even in an adverse
environment but the propagation of multicast messages can
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
be slower than that in reliable multicast, as the delay is pro-
portional to the gossip period and always exchanging gos-
sips ahead of actual messages incurs extra delay. Moreover,
our evaluation shows that, due to the obliviousness to net-
work topology, random gossips in a large system impose
extremely high loads on some underlying network links.
We propose GoCast (gossip-enhanced overlay multicast)
to address the limitations of existing protocols. It combines
the beneﬁts of reliable multicast (topology awareness and
fast message propagation) and the beneﬁts of gossip mul-
ticast (stable throughput and scalability), while avoiding
their limitations. GoCast builds a resilient, proximity-aware
overlay network that has balanced node degrees. As in re-
liable multicast, messages propagate rapidly through an ef-
ﬁcient tree embedded in the overlay.
In the background,
nodes exchange message summaries (gossips) with their
overlay neighbors (as opposed to random nodes) and pick
up missing messages due to disruptions in the tree-based
multicast. The number of times (i.e., redundancy) that a
node receives the gossip containing the ID of a message is
controlled by the number of the node’s overlay neighbors.
GoCast vs. Gossip Multicast
Gossip multicast protocols such as Bimodal Multicast
have two key elements: redundancy and randomness in gos-
sip paths. These are the fundamental reasons why gossip
multicast can provide stable throughput and reliable mes-
sage delivery. GoCast retains the spirits of redundancy and
randomness—redundancy through multiple disjoint paths in
the overlay and controlled randomness through some ran-
dom overlay links. In addition, GoCast has several advan-
tages over gossip multicast protocols.
Due to the complete randomness in gossip multicast (as
opposed to the controlled randomness in GoCast), the num-
ber of times that nodes receive the gossip containing the
ID of a given message varies dramatically. In a push-based
gossip protocol (e.g., Bimodal Multicast), upon receiving a
new message, a node gossips the ID of the message to F
random nodes. F is called the fanout of gossips. Our sim-
ulation shows that, with fanout 5, about 0.7% of nodes in a
1,024-node system never hear about a given message while
some nodes hear about the message as many as 19 times.
In an n-node system using the push-based gossip proto-
col with fanout F , the probability that all nodes hear about
a given message through gossips is e−elog(n)−F [6]. Hence
the probability that all nodes hear about 1,000 messages
is e−1000·elog(n)−F . Figure 1 plots these probabilities for
a 1,024-node system. Even without any fault in the sys-
tem, the probability that all nodes receive 1,000 messages
is lower than 0.5 when the fanout is smaller than 15.1 Note
1This situation can be improved by combining both push and pull in
gossip disseminations [9]. The challenge, however, is to avoid the over-
heads of unnecessary pulls when there is no multicast message.
y
t
i
l
i
b
a
b
o
r
p
y
t
i
l
i
b
a
i
l
e
R
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
1 msg
1000 msgs
 4  6  8  10  12  14  16  18  20
Fanout F
Figure 1. In a push-based gossip protocol with
fanout F ,
the probability that all nodes in a
n=1024 node system receive 1 or 1,000 multicast
messages. The curves correspond to functions
e−elog(n)−F and e−1000·elog(n)−F , respectively.
that a reliability of 0.5 is not sufﬁciently high for mission
critical applications. Moreover, using fanout 15 introduces
three times more gossip trafﬁc than GoCast (Section 2), and
the propagation of multicast messages in gossip multicast is
several times slower than that in GoCast (Section 3).
By contrast, GoCast does not completely count on ran-
domness. It has total control of the number of times that
a node receives the gossip regarding a message by tuning
the node degree. So long as the overlay remains connected,
nodes receive the gossip regarding a message at least once.
Our evaluation shows that, for a system with thousands of
nodes and six neighbors per node, the overlay in GoCast re-
mains connected even after 25% of nodes fail concurrently.
The remainder of the paper is organized as follows. Sec-
tion 2 presents the GoCast protocol. Section 3 compares
several dependable group communication protocols through
extensive simulations. Related work is discussed in Sec-
tion 4 and Section 5 concludes the paper.
2. The GoCast Protocol
GoCast provides dependable group communication for
large-scale mission critical applications that are delay sen-
sitive. Regardless of the size of the system, it incurs a con-
stant low overhead on each node. A node join or leave af-
fects only a small number of other nodes and those nodes
handle the change locally. GoCast is self-tuning.
Its ef-
ﬁciency and message delay improves quickly as more is
learned about the underlying network.
GoCast organizes nodes into an overlay and disseminates
multicast messages both through an efﬁcient tree embedded
in the overlay and through gossips exchanged between over-
lay neighbors. Below we ﬁrst describe the message dissem-
ination protocol assuming the overlay and the tree are al-
ready in place, and then describe the protocols to build the
overlay and the tree.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
A (root of the tree)
B
C
D
E
F
an overlay link
a tree link, also an overlay link
Figure 2. An example of GoCast.
2.1. Fast and Reliable Message Dissemination
Under normal operations, multicast messages propagate
rapidly through an efﬁcient tree embedded in the overlay
(Figure 2). A tree link is also an overlay link. Both overlay
links and tree links are undirected and can propagate mes-
sages in either direction. We refer to two nodes directly con-
nected by an overlay link or a tree link as overlay neighbors
or tree neighbors, respectively. Two tree neighbors are also
overlay neighbors. Solely for the purpose of maintenance,
the tree conceptually has a root, but any node can start a
multicast without ﬁrst sending the message to the root.
A multicast message propagates away from the message
source along the tree links. We illustrate this through an
example in Figure 2. Suppose node D wants to multicast
a message to all nodes in the system. Node D sends the
message to its tree neighbors C and F . Node D does not
send the message to node B because B and D are not tree
neighbors although they are overlay neighbors. Each node
that receives the message immediately forwards the mes-
sage to its tree neighbors except the node from which the
message arrived. Each node remembers the IDs of the mes-
sages it forwarded lately to avoid forwarding a message re-
peatedly. Without faults, the message propagates rapidly to
all nodes (under half a second for a 1,024-node system) and
each node receives the message exactly once.
Faults, however, are unavoidable.
In the background,
nodes exchange message summaries with their overlay
neighbors and pick up missing messages due to disrup-
tions in the tree-based multicast. Every t seconds, a node
X choose one of its overlay neighbors Y in a round robin
fashion to send a message summary (also called “gossip”).
The gossip period t is dynamically tunable according to the
message rate, t = 0.1 seconds in our current design, which
is suggested by Bimodal Multicast [2]. Each message in-
jected into the system has a unique identiﬁer. The identiﬁer
of a message injected by node P is a concatenation of P ’s
IP address and a monotonically increasing sequence num-
ber locally assigned by P . The gossip that node X sends
to node Y includes the IDs of messages that X received or
started since the last gossip X sent to Y , but excludes the
IDs of messages that X heard from Y . After receiving the
gossip, if node Y ﬁnds out that the gossip contains the IDs
of some messages that Y has not received, Y requests those
messages from node X. In most cases, however, a message
disseminates rapidly through the tree such that nodes re-
ceive the message from the tree before they receive gossips
regarding the message from their overlay neighbors.
If node X has s overlay neighbors, it sends a gossip to its
neighbor Y every s· t seconds, where t is the gossip period.
Because t is short and s is small (typically s=6, see Sec-
tion 2.2), usually a gossip is exchanged between two over-
lay neighbors less than every one second. A gossip can be
saved if there is no multicast message during that period.
The gossips are small, containing only the IDs of messages
received in less than one second. Node X gossips the ID of
a message to each of its neighbors only once. After gossip-
ing the message ID to the last neighbor, node X waits for
a period b and then reclaims the memory for the message if
X receives no further request for the message. The waiting
period b should be at least a multiple of the maximum round
trip time (RTT) between node X and its neighbors to allow
sufﬁcient time for the neighbors to request the message. We
set the waiting period b to two minutes.
During some transient periods, the tree may be broken
into fragments due to node or link failures. Among the tree
fragments, messages propagate through gossips exchanged
between overlay neighbors; inside a tree fragment, mes-
sages propagate without stop through the remaining tree
links that connect the fragment. In Figure 2, suppose node
B starts a multicast. It sends the message to its tree neigh-
bor A. If node A fails before forwarding the message to
its tree neighbor C, the tree-based multicast would not de-
liver the message to nodes C, D, E, and F . At some point,
node B sends a gossip to node D. Node D discovers that it
has not received the message and consequently requests the
message from node B. Upon receiving the message, node
D immediately forwards the message to its tree neighbors
C and F . A receiver of the message further immediately
forwards the message without stop along the remaining tree
links that connect the tree fragment. The broken tree will be
repaired quickly (Sections 2.2 and 2.3), and messages will
again purely propagate along the tree.
Multicast messages propagate both unconditionally
through the tree and conditionally through gossips ex-
changed between overlay neighbors at the same time. There
is a small chance that a node may receive a message through
both channels, redundantly. Suppose a node receives a gos-
sip containing the ID of a message and ﬁnds that it has
not received the message. It obtains the message from the
sender of the gossip but later on the message arrives again
from a tree link. In other words, the message propagates
faster through gossips than through the tree. The chance for
this to happen is very low, because messages typically prop-
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
agate much faster through the efﬁcient tree. Our simulation
shows that, in a 1,024-node system with typical Internet la-
tencies and a gossip period of 0.1 seconds, the probability
for the scenario above to happen is only 0.02, i.e., on aver-
age each node receives a message 1.02 times.
This 2% overhead can be further reduced in several
ways. (1) If node X has already received or is receiving
a multicast message discovered through a gossip while an-
other node Y is trying to send X the same message through
a tree link, X aborts the transmission with Y immediately.
This 2% overhead, therefore, is not in terms of full mul-
ticast messages when the messages are large. (2) When a
node receives a gossip containing the ID of a message, it
delays requesting the message from the sender of the gos-
sip until the message was injected into the system by the
source at least f seconds ago. The threshold f is chosen
to allow sufﬁcient time for the message to ﬁrst propagate
through the tree. We recommend setting f to the 90th per-
centile delay for multicast messages to reach nodes through
the tree. For the 1,024-node system, setting f=0.3 seconds
has almost no impact on the delivery delay of multicast mes-