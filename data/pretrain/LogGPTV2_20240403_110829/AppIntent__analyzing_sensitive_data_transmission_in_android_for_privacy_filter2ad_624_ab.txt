much overhead.
(cid:15) Provide an easy-to-understand tool for human ana-
lysts to ascertain under what circumstance the sen-
sitive data transmission happens. Using the produced
app inputs, we need to conduct the execution of an app
according to each feasible path. We want to exercise
the app’s functionality automatically, which can em-
ulate users’ operations, and by observing the UI ma-
nipulation and prompting, we can then easily judge
whether the data transmission is essential for a user-
intended functionality.
Overall Architecture. Figure 2 depicts the overall ar-
chitecture of AppIntent, which analyzes a target app in two
steps:(cid:15) Event-space Constraint Guided Symbolic Execution. The
(cid:12)rst step is to generate critical inputs incurring sensi-
tive data transmission. We adopt static taint analysis
to preprocess and extract all possible data transmis-
sion paths as well as possible events related to each
path, which helps to construct an event-space con-
CREATEDSTARTEDRUNNINGOnCreate()OnStart()OnResume()PAUSEDOnPause()OnResume()STOPPEDOnStop()OnRestart()OnStart()OnDestroy()DESTORYEDNOT LAUCHEDKILLEDGUI EvenetsSystem EventsFigure 2: Overall Architecture of AppIntent
straint graph. Subsequently the graph is used in the
guided symbolic execution to extract critical inputs.
Meanwhile, code coverage is guaranteed due to the na-
ture of symbolic technique. The detail is introduced
in Section 4.
(cid:15) Dynamic Program Analysis Platform.
Inputs gener-
ated in the (cid:12)rst step is not intuitive enough though
they precisely tell under what conditions transmission
would happen. Using these inputs, we adopt Android
InstrumentationTestRunner [1] to automate the app
execution step by step, which re(cid:13)ects users’ interac-
tions in UI manipulations, and the sensitive data prop-
agation is also tailored to the related UI for a better
understanding. We believe it can eﬀectively visualize
the root cause of the transmission so that we can intu-
itively judge whether the transmission is user intended
or not.
4. EVENT-SPACE CONSTRAINT GUIDED
SYMBOLIC EXECUTION
In this section, we present our event-space constraint guided
symbolic execution technique for Android apps. We show
how to reduce the search space considerably and (cid:12)nish the
symbolic execution in an acceptable amount of time without
sacri(cid:12)cing the code coverage.
We begin with an intuitive example, and then present an
overview of this stage, followed by a detailed description
of how to construct the event-space constraint graph using
static analysis. Finally we describe how the graph facilitates
guided symbolic execution.
4.1 A Concrete Example
Here we use an app, Anzhuoduanxin [3], to demonstrate
how our event-space constraint guided symbolic execution
works. The app has a program path containing the trans-
mission of an SMS message when a user forwards a new in-
coming message. For easy understanding, as depicted in Fig-
ure 3, we simplify the data propagation to a path involving
only one BroadcastReceiver, PushReceiver, and two activi-
ties, MessagePopup and ComposeMessageActivity. The new
message is handled in the onReceive() method of PushRe-
ceiver that starts up the activity MessagePopup, and the
message is displayed in the foreground on which a user can
click the FORWARD button to invoke the forward() method
that starts up the activity ComposeMessageActivity. On the
next user interface, the user can click the SEND button to
invoke the sendMessage() method to have the message for-
warded.
In our symbolic execution, we (cid:12)rst use static taint analy-
sis to identify all possible transmission paths, and then we
extract instructions of sensitive data propagation with the
context information along each path. In our example, we get
the path: fOnReceive, i1g ) fstartNewMessagesQuery, i2g
) fforward, i3g ) fforward, i4g ) fsendMessage, i5g )
fsendMessage, i6g. Then we construct an event-space con-
straint graph according to the information gathered in static
analysis. As Figure 4 shows, those massive irrelevant events
to this path have been (cid:12)ltered out, and only 18 events related
to this path, including lifecycle callbacks, GUI events, and
system events, are kept. We connect these events with edges
according to the lifecycle state transition and the call graph.
This event-space constraint graph is used as a guideline for
symbolic execution to (cid:12)nd sequenced events that possibly
incur the transmission. Since our goal is to (cid:12)nd the root
cause and disclose the context of the user actions, we only
need to (cid:12)nd the shortest paths that cover the sensitive data
transmission instructions respectively. As Figure 5 shows,
for the given transmission, we get only two chains of events
in sequence, which will be veri(cid:12)ed during symbolic execu-
tion, with a very small overhead. On our dynamic program
analysis platform, the feasible chain is used to emulate a
user’s operations step by step automatically, which demon-
strates which functionality is executed when sensitive data
transmission happens. In this case, we can easily determine
that this is indeed user-intended data transmission.
4.2 Overview of Event-space Constraint Guided
Symbolic Execution
As stated earlier, the major challenge symbolic execution
faces is the problem of space explosion, which is dramati-
cally worsened by the Android GUI interaction and execu-
tion model. A complete app-wide symbolic execution is not
scalable due to the large number of possible events. Actu-
ally, to achieve sensitive data transmission, usually only a
small portion of events will be triggered in sequence, along
with sequenced instructions that propagate the data. This
motivates us that if we are provided with a set of instruc-
tions that possibly incur the transmission, we only need to
consider and extract the events that may trigger at least
one instruction of the set, as well as the possible prerequi-
sites of these events. In this way, the event search scope can
be greatly limited to those related events instead of massive
irrelevant events while code coverage is guaranteed. We con-
struct an event-space constraint graph aided by static anal-
ysis, and it facilitates symbolic execution in (cid:12)nding possible
sequences of events that are used to reproduce the transmis-
sion.
In the following, we (cid:12)rst give a de(cid:12)nition of this special
graph, and then explain how to obtain this graph by static
program analysis.
Figure 3: A simpli(cid:12)ed SMS forwarding case.
4.3 Construction of the Event-space Constraint
Graph
As depicted in Figure 4, the event-space constraint graph
is a directed graph, with each node in the graph representing
a lifecycle callback, a GUI event, or a system event. There
are two kinds of nodes:
(cid:15) A thick-line node represents an event of which the
event handler method contains at least one instruc-
tion of a given data propagation path. We call this
kind of events critical events.
(cid:15) A thin-line node represents an event which is a prereq-
uisite for a critical event, and it does not contain any
instructions of the given path. Such an event could
be either a lifecycle callback of the activity that con-
tains this critical event, or an event belonging to any
prerequisite component that eventually starts up the
activity that contains this critical event. We call this
kind of events essential events.
A directed edge in the graph represents the order of prece-
dence for two adjacent nodes. Edges can be calculated ac-
cording to the lifecycle state transition and the call graph
together.
critical event should be included.
Basically, for the graph, we ensure:
(cid:15) All critical events should be included.
(cid:15) All lifecycle callbacks of an activity that contains a
(cid:15) Any event belonging to a prerequisite component that
eventually starts up an activity containing a critical
event should be included, as well as its lifecycle call-
backs.
(cid:15) No edge violates the prede(cid:12)ned order of the lifecycle
state transition or the sequence of the call graph.
4.3.1 Extracting Critical Events
To build the the event-space constraint graph, (cid:12)rst of all,
we need to extract all critical events according to the given
data transmission path. For each instruction in the path, we
backward traverse the call graph to (cid:12)nd all events that might
trigger it. As shown in Figure 3, backward traversing the call
graph from instruction 2 (i2), we can get two critical events,
OnStart() and OnNewIntent(). We may introduce some
false positives due to the limitation of static analysis tech-
niques, but symbolic execution can eliminate these false pos-
itives later. In this phase, we (cid:12)nally obtain sequenced crit-
ical events, , , , and
.
An activity may have diﬀerent views to lay out various
user controls (e.g. buttons), on which a user interacts with
the app, and user interactions of various views are usually
handled by the same handler method. The above critical
events that we have extracted are from only the call graph
and does not have the information about views except the
handler methods. It poses a diﬃculty for the later guided
symbolic execution. To solve this issue, we build a program
dependency graph, extract branch conditions for view pa-
rameters from the graph, and annotate the critical events
with these conditions as the context information. As de-
picted in Figure 3, the extracted branch condition for i3
and i4 is view==v1. After that, if we (cid:12)nd that a critical
event involves diﬀerent views, we divide this event into sev-
eral thick-line nodes, with respect to each view. Other GUI
events are handled in a similar way.
4.3.2 Extracting Essential Events
So far, we get all the critical events that contain the in-
structions of the given transmission path, but they are just
the critical interior nodes to symbolically execute the path.
According to the Android runtime execution model, we also
need to collect the essential events that are the prerequisites
to the critical nodes, in order to behave well during sym-
bolic execution. For example, an execution can not directly
invoke OnResume() before the app is activated by invoking
OnCreate() and OnStart() in sequence. Actually, an app
strictly follows the state transition order of the app lifecy-
cle, as illustrated in Figure 1. For each critical event of a
component, we (cid:12)rst supplement those missing lifecycle call-
backs with directed edges according to the origin order. And
then, aided by the call graph, we supplement all prerequi-
site components that eventually start up the activity which
contains a critical event, as well as edges produced accord-
ing the call graph. Meanwhile, the corresponding lifecycle
callbacks of these prerequisite components are added in. In
Android, inter-component communications are implemented
through Intents. Thus, if a component receives an intent
from another one, we treat the sender of the intent as the
prerequisite of the receiver component, and add a directed
edge to represent their order. Especially, if an intent is used
ComposeMessageActivityMessagePopupOnStart()OnNewIntent()OnClick()OnClick()startNewMessagesQuery()startNewMessagesQuery():I2: b=a.abytes;PushReceiverOnReceive()OnReceive():I1: a=intent.getByteArrayExtra(s);forward()forward(v):switch(view) {case v1:intent1=ComposeMessageActivity.createIntent(this, l);I3: intent1.putExtra("sms_body", b);I4: startActivity(intent1);}sendMessage()sendMessage(v):switch(view){case v2:I5: c = intent.getExtra("sms_body");I6: addMessageToUri(c)}Figure 4: The extracted event-space constraint graph of the given example.
to start a new activity or service, the onCreate() callback of
created component is marked as the receiver of the intent. In
the current version of AppIntent, we only track intents that
eventually start a new activity or service, as well as broad-
cast messages that are properly handled by a BroadcastRe-
ceiver, because they are oﬃcially documented by Google [2]
and most of the apps use these two approaches to send in-
tents. The intents with undocumented usage (which we en-
vision could be handled in a similar way) are left to future
work. The supplemental process will not end until there is
no any prerequisite components found.
Upon (cid:12)nishing the above steps, we (cid:12)nish constructing the
event-space constraint graph. As noted earlier in this sec-
tion, for a given transmission path, all related events, in-
cluding the critical and the essential events, have been ex-
tracted. The subsequent symbolic execution only needs to
traverse this graph for sequenced events that possibly trig-
ger the transmission and veri(cid:12)es whether it is a valid path.
Since massive irrelevant events have been (cid:12)ltered out, the
search scope is greatly reduced while the code coverage is
guaranteed well.
4.4 Guided Symbolic Execution
We now explain how to traverse the above constructed
graph to derive all possible sequenced events as the guide-
line to symbolic execution. The process of guided symbolic
execution is depicted in Algorithm 1, in which P represents
the events that are triggered before the last traversed critical
event, and C represents the data constraints that should be
ful(cid:12)lled to reach the current execution point. If C is empty,
then none of the data inputs can result in the target exe-
cution, i.e., the path can never be covered in any program
execution.
Algorithm 1 works as follows. Our symbolic execution tra-
verses the event-space constraint graph using the thick-line
nodes as step stones. Each time when we proceed from a
G   Event-space Constraint Graph
CEC   Critical Events Chain of G
C   ∅, P   ∅
StartP oint   App Entrance of the Main Activity
Procedure TraverseGraph(ce)
forall the ne :  2 CEC do
mp   FindMinimalPath(ce, ne, G)
C   SymbolicExecute Forward(C, mp)
P   P (cid:8) mp
if 8 e :  =2 CEC then
Output: C as Data Constraint, P as Event
Inputs
exit()
end
else if C != ∅ then
TraverseGraph(ne)
end
C   SymbolicExecute Rollback(C, mp)
P   P (cid:0) mp
end
end
TraverseGraph (StartP oint)
Output: No feasible inputs found
Algorithm 1: Event-space Constraint Guided Symbolic
Execution
Critical Event ChainPushReceiverComposeMessageActivityMessagePopupOnStop()OnPause()OnRestart()OnCreate()OnResume()OnStart()OnNewIntent()OnReceive()OnClick(v1)OnStop()OnPause()OnRestart()OnCreate()OnResume()OnStart()OnClick(v2)OnDestory()OnDestory()MessagePopup:OnStart()MessagePopup:OnNewIntent()PushReceiver:OnReceive()MessagePopup:OnClick(v1)ComposeMessageActivity:OnClick(v2)thick-line node, possible successors of this critical event are
extracted from the event-space constraint graph. Since any
of the successors can be the next critical event, we randomly
pick an event (cid:12)rst and calculate a feasible path from the cur-
rent critical event to the chosen successor. Since only the
essential prerequisites are needed, we extract the minimal
path (using the Dijistra’s algorithm) as a chain of events,
which are sequentially triggered in the symbolic execution.
If the event chain is revealed to be not available to any in-
puts (C == ∅), or all possible successors in critical event
chains are already explored (8 e :  =2 CEC), we
rollback the symbolic execution and try to trigger other fea-
sible critical events.
Using Figure 4 as an example, guided by the event-space
constraint graph, our symbolic execution explores a much
smaller event space, as illustrated in Figure 5, and reports
the following event chain as event inputs: f , , , , , , , , 
g. In addition, by using a modi(cid:12)ed version of choco data
constraint solver [6], we generate corresponding data inputs
according to the data constraints calculated in the symbolic
execution.
5. DYNAMIC ANALYSIS PLATFORM
By using our event-space constraint guided symbolic exe-
cution, we can extract app inputs to trigger a given sensitive
data transmission path. Although these inputs provide all
the preconditions of target data transmission, they might
not be intuitive enough for human to understand. To display
these preconditions in an easy-to-understand manner, we set
up a dynamic analysis platform to present which function-
ality is used when the transmission happens. With the help
of Android InstrumentationTestRunner [1], a driven exe-
cution can be conducted for each sensitive data transmission
path. AppIntent automatically generates a test case based
on the inputs gathered before, and attaches it to the app by
repackaging the original Android apk. Then, by running the
test case though the Android activity manager, a controlled
execution with the following features are presented:
(cid:15) Automatically trigger Event Inputs. Events in the event
chain are automatically triggered by performing corre-
sponding operations. For example, to trigger a clicking
event, a performClick operation is applied to the cor-
responding view, and we call the setTestProvider-
Location method for a location change event. Ap-
pIntent currently does not support runtime events like
phone call events because Android Instrumentation-
TestRunner does not support them. Since in most
cases, view context of each event is already attached
to the event chain, we can use the attached context
directly for GUI events. On the other hand, if there is
no view constraint, we randomly pick a view from the
manifest (cid:12)le as the context of event. In addition, be-
tween each two GUI events, we generate a short delay
so that analysts have time to observe the GUI display
of each step.
(cid:15) Automatically provide Data Inputs. Most of the data
inputs generated by symbolic execution are text in-
puts to GUI elements, and we directly set the cor-