### Class Hierarchy Reconstruction and Analysis in C++ Binaries

#### Data Overview
The following data points represent various metrics and keys used in the analysis of class hierarchies within C++ binaries:

- **FP Keys, FN Keys, TS, CV TS, CV**: These keys likely correspond to false positives, false negatives, true positives, and other classification metrics.
- **Numerical Data**: The numbers provided (e.g., 150, 37, 27, etc.) seem to be counts or identifiers related to these metrics.

#### Marx Analysis
Marx is a tool designed to reconstruct class hierarchies in C++ binaries. It employs several heuristics to identify and group related virtual table pointers (vptrs) and function entries. Key methods include:

1. **Overwrite Analysis**:
   - **Heuristic**: In constructors, the vptr of a base class is overwritten by that of its derived class, and vice versa in destructors.
   - **Inference**: Two vptrs that overwrite each other are considered related.

2. **VTable Function Entries**:
   - **Heuristic**: A derived class may not redefine every virtual function it inherits from its base class.
   - **Inference**: If two VTables contain pointers to the same functions at the same offset, they are considered related.

3. **Inter-Procedural Data Flow Analysis**:
   - **Forward Edge Analysis**: Resolves indirect control flow to improve coverage for overwrite analysis.
   - **Backward Edge Analysis**: Considers return values to enhance the analysis.

4. **Inter-Modular Data Flow**:
   - **Heuristic**: Analyzes libraries used by executables to obtain a more comprehensive result.

Despite these heuristics, Marx only reconstructs class hierarchies as plain sets and does not infer the direction of inheritance. This is due to the inherent difficulty in determining the direction of class relations from binary information alone.

#### Case Study: Xalanc
We analyzed the `xalancbmk` program with Marx. Figure 3 shows a subset of the inheritance graph generated by Marx. While Marx correctly identifies related vptrs, it groups them into sets without inferring the direction of inheritance. Figure 4 maps the ground truth to our analysis, demonstrating that we can infer both class relations and the direction of inheritance. In the figure, base classes are positioned above derived classes, with broken lines indicating nodes in the ground truth and solid lines showing the relationships between classes.

#### Evaluation of Class Hierarchy Information
Table 4 evaluates the amount of class hierarchy information revealed at callsites. The columns include:
- **# types with associated callsites**: Number of classes with at least one corresponding callsite.
- **#overall types recovered + VTable scanning**: Total number of classes recovered using both callsite information and VTable scanning.
- **#leaf node**: Number of classes with no base class.
- **#non-leaf node**: Number of classes with at least one base class.

#### Related Work
##### C++ Attacks and Defenses
C++ programs are vulnerable to attacks due to the use of computed code pointers in dynamic dispatch. Recent attacks, such as COOP, reuse existing virtual functions for malicious computation. Binary-level solutions like VTint, TVIP, vfGuard, and RECALL introduce imprecision, while source-code based solutions (e.g., [4, 11, 15, 17, 27, 29]) embed inheritance information into the binary to improve precision, but this reveals design information.

##### C++ Reverse Engineering
Tools like VCI reconstruct class hierarchies using constructor analysis, which provides useful information about inheritance and its direction. However, due to constructor inlining, there are often inadequate constructors in the binary for comprehensive static analysis.

#### Conclusion
Modern C++ defenses often embed metadata in the binary, making reverse engineering easier. To address this, we suggest:
1. **Transform the metadata**: Encrypt or randomize the layout of metadata to prevent meaningful information recovery.
2. **Avoid embedding metadata**: Use techniques like CFIXX and ÂµCFI, which dynamically decide valid targets of callsites without embedding metadata.

While these defenses offer precision in security, they come at the cost of privacy, which may be unacceptable in commercial software.

#### Acknowledgements
We thank anonymous reviewers for their valuable feedback. This research was supported by the Office of Naval Research, National Science Foundation, and DARPA.

#### References
[References listed here]

---

This revised text aims to provide a clear, coherent, and professional overview of the class hierarchy reconstruction and analysis in C++ binaries, including the methods used by Marx, case studies, and related work.