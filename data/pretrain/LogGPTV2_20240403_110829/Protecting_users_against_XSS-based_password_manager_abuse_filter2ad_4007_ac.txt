### Browser Behavior with Autocomplete Attribute

Even for forms containing only input fields without names, adherence to the `autocomplete` attribute varies among browsers. Internet Explorer (IE) respects the `autocomplete` value and does not save any information if the `autocomplete` attribute is set to "off."

- **Maxthon Cloud Browser**: This browser exhibited insecure behavior by filling in input fields that had no name and, more notably, those with `autocomplete` set to "off." Unlike other browsers, it did not strictly match form criteria, even filling in fields based on the second-level domain.

### Summary of Browser Matching Criteria

Most browsers are lenient in their matching criteria. All browsers except Internet Explorer (IE) would still fill in passwords if only the origins matched. The Maxthon Cloud Browser was particularly permissive, considering only the second-level domain. Form matching was generally performed at a structural level, meaning that two fields would be filled out if one was a password field. According to Mozilla, this is a design feature for user convenience.

**Table 1: Overview of Tested Browsers and Their Matching Criteria**

| Browser          | Password Found | HTTPS Page | Secure Action | Autocomplete Off | X-Frame-Options | JavaScript Access |
|------------------|----------------|------------|---------------|------------------|-----------------|-------------------|
| Chrome 31        | Yes            | Yes        | Yes           | No               | No              | Yes               |
| Internet Expl. 11| Yes            | Yes        | Yes           | Yes              | No              | No                |
| Firefox 25       | Yes            | Yes        | Yes           | No               | No              | Yes               |
| Opera 18         | Yes            | Yes        | Yes           | No               | No              | Yes               |
| Safari 7         | Yes            | Yes        | Yes           | No               | No              | Yes               |
| Maxthon 3        | No             | No         | No            | No               | No              | No                |

### Listing 1: Minimal HTML Form Used in Our Tests
```html
<form action="https://example.com/login" method="post">
    <input type="text" name="username" />
    <input type of="password" name="password" />
    <input type="submit" value="Login" />
</form>
```

### 5.2 Password Fields

To understand how password fields are used in practice and to assess their susceptibility to attacks, we conducted a survey of the top-ranked websites according to the Alexa index [1].

#### 5.2.1 Methodology

We performed a lightweight crawl of the top 4,000 Alexa sites using a Chrome extension. This extension consists of:

- **Background Script**: Monitors network traffic and distributes the crawling process over multiple tabs.
- **Content Scripts**: One for each web document, with direct access to the DOM tree but isolated from the document's scripts.
- **User Scripts**: Injected directly into the document's DOM, running in the same global context as the document's own scripts, allowing us to intercept native JavaScript functions.

The steps followed by the extension include:

1. **Homepage Load**: The homepage URL is loaded into a browser tab.
2. **DOM Traversal**: The DOM tree is traversed to find password fields.
3. **Subpage Navigation**: If no password field is found, hyperlinks on the homepage are examined for keywords like "sign in," "login," or "logon."
4. **Data Recording**: If a password field is found, important characteristics such as the hosting document's URL, form action, and presence of `autocomplete` attributes and `X-Frame-Options` headers are recorded.
5. **JavaScript Instrumentation**: The `get-property` of the password field is instrumented to observe client-side processing after a password is entered.

#### 5.2.2 Results

- **Autocomplete Attribute**: Out of 2,143 domains, 293 explicitly set `autocomplete` to "off."
- **X-Frame-Options Header**: Only 189 domains set the header to "DENY," while 173 set it to "SAMEORIGIN."
- **JavaScript Read Access**: For 325 password fields, read operations via JavaScript were observed.
- **HTTPS Usage**: 821 domains use HTTPS for transmitting password fields, leaving 1,289 susceptible to network-based attacks.
- **Unencrypted Communication**: 1,197 sites use HTTPS to send password data to the server, while 946 do not.

### 5.3 Assessment

- **Browser Vulnerabilities**: Most browsers store only the origin of a password, making it easy to extract credentials from a page with the same origin.
- **XSS Attack Susceptibility**: 86.3% of analyzed pages are vulnerable to password stealing via XSS attacks.
- **Network-Based Attacks**: 48% of applications can be attacked by a network-based attacker.

These findings indicate that current browser password managers are highly vulnerable to both XSS and network-based attacks. Server-side measures, such as the `autocomplete` attribute and `X-Frame-Options` header, are not widely implemented.

### 6. Client-Side Protection

Our analysis shows that popular browsers' password managers are susceptible to XSS attacks. We propose a solution to counter these types of attacks.

#### 6.1 Concept

The core issue is that secret data is inserted into forms when the page loads, making it retrievable by JavaScript. A better approach is to insert placeholding nonces into forms and replace them with the actual password only when the form is submitted. This ensures that an attacker cannot retrieve the real password even if they exploit an XSS vulnerability.

- **Nonce Insertion**: Password managers should insert nonces into forms.
- **Form Submission**: When the form is submitted, the nonce is replaced with the actual password.
- **Strict Matching**: The mechanism requires strict matching of the password field name attribute and the corresponding POST value.

This approach addresses the conceptual flaw in current password manager implementations and enhances security.