### Granting Privileges to Advertisements in Video Players

Granting the privilege of the video player to advertisements is clearly undesirable. We address this issue by instrumenting ActionScript calls for downloading and creating child Flash objects. If a child Flash is detected as originating from an untrusted domain, our mediation code automatically reduces the parent's privileges.

### Flash Analysis and Instrumentation

To embed the Flash wrapper, we need to analyze the binary code and instrument it with mediation mechanisms. Given that Flash content is often submitted by third parties in binary form, manual analysis can be time-consuming and impractical, especially for high-traffic sites like Yahoo. In our research, we developed an automatic Flash analyzer to handle this task. Our analyzer can decompile a binary SWF file, identify functions related to resource access, and wrap them with FIRM (Flash Instrumentation and Mediation) instrumentation.

#### ActionScript

ActionScript, based on ECMAScript, is designed to control Flash behavior. Compared to JavaScript, ActionScript is easier to analyze and instrument due to the following reasons:
1. **Immutable Code**: A Flash program cannot modify its code at runtime, making it impossible for malicious Flash to evade our instrumentations.
2. **No Eval Function**: Flash cannot parse and execute input strings as `eval` does, simplifying static analysis.
3. **Permission-Based Access**: Flash programs cannot access the code and data of another Flash without permission.

These features allow us to perform static analysis and add mediation to the Flash code.

#### Static Analysis of Flash

Our prototype uses SWFScan, a free decompiler, to convert SWF binaries into ActionScript code. It then identifies program locations where instrumentations are needed. Specifically, our implementation looks for four types of ActionScript APIs:
- `getURL` and `navigateToURL`: These allow a Flash to inject scripts into its hosting page.
- `ExternalInterface.call` and `fscommand`: These enable the Flash to call a JavaScript function defined in the page.
- `ExternalInterface.addCallback`: This lets JavaScript call ActionScript functions.
- `LocalConnection`: This shares functions between different Flash programs.

To accurately locate these functions, we parse the Flash code into a grammar tree using ANTLR, a popular parser generator. The grammar tree helps our analyzer identify both direct and indirect uses of script-related APIs.

#### Instrumentation

After identifying relevant program locations, our tool automatically instruments the code with mediation mechanisms. The mediation code allows the caller to supply its capability token for privilege checking and invokes the original function if authorized. The instrumented Flash program is then compiled back into a SWF binary using Adobe Flash CS.

#### Discussion

Although ActionScript is easier to analyze than JavaScript, it includes some features that can obfuscate code. For example, ActionScript 2.0 allows the `_root` object to invoke functions through parsing an input string, such as `_root['getURL']()`. This technique is no longer supported in ActionScript 3.0. Additionally, some API functions like `asFunction` can be exploited to inject scripts. To mitigate these threats, we use the Flash wrapper to mediate their operations. Note that these language features are rarely used in legitimate Flash code, and their misuse by malicious Flash would result in reduced privileges, as uninstrumented calls cannot use any capability tokens.

### Evaluation

We evaluated our FIRM implementation on real web applications and Flash content to understand its effectiveness in mediating Flash activities and its performance impact on web services.

#### Experiment Settings

**Web Applications:**
- **phpBB**: A widely used open-source forum solution that allows users to post Flash content via BBCode.
- **WordPress**: A popular blogging platform that supports Flash content through the Kimili Flash Embed plugin.
- **Drupal**: An open-source content management system that can publish various web content, including Flash.

**Flash Content:**
- 9 real-world Flash applications, including 3 vulnerable Flash advertisements, a malicious Flash game, and a Flash player.

**Computation Platforms:**
- Experiments were conducted on a laptop with 3GB memory and a 2GHz Dual-core CPU running Windows Vista, Apache 2.2.9/PHP 5.2.6, and MySQL 5. Browsers used were Firefox 3.5 and IE 8.

#### Effectiveness

**Installing FIRM:**
- We modified the web applications to install the DOM wrapper and policy manager. For phpBB, we changed the `tpl/prosilver/viewtopic/body.html.php` file to inject the FIRM JavaScript code. Similarly, for WordPress, we modified the `index.php` file under `wp-content/themes/classic`, and for Drupal, we modified the `page.tpl.php` file under `themes/garland`.

**Experiment Outcomes:**
- Without mediation, the malicious Flash game could steal cookies, and the Flash advertisements could launch XSS attacks. With FIRM activated, all these attacks were successfully deflected. The policies enforced by FIRM blocked unauthorized access to document objects, while allowing legitimate Flash operations.

**Call Interface Protection:**
- We tested two Flash applications: one exposed functions to the hosting page, and the other attempted to access these functions. After instrumentation, the second Flash could not use the functions without valid capability tokens.

**Inter-Flash Resource Sharing:**
- We evaluated a scenario where one Flash shared only some of its functions with another Flash. Without FIRM, all functions were accessible. With FIRM, we assigned a capability token that restricted access to specific functions, which was successfully enforced.

#### Performance

**Page Loading:**
- We measured the page loading time of the three web applications with and without FIRM. The overhead was reasonable, ranging from 4.80% to 15.80%.

**Mediation Overheads:**
- We studied the delay caused by mediating interactions between Flash and JavaScript, as well as between different Flash applications. The average delays were within acceptable limits, as shown in Table 5.

In summary, our FIRM implementation effectively mediates Flash activities and imposes minimal performance overhead, making it a practical solution for enhancing web security.