its child. It is evidently undesired to grant the Ad the priv-
ilege of the video player. We solve this problem by instru-
menting the ActionScript calls for downloading and creating
a child Flash: once a child Flash is found to come from an
untrusted domain, our mediation code automatically lowers
down the father’s privilege.
5. FLASH ANALYSIS AND INSTRUMENTA-
TION
To embed the Flash wrapper into a Flash, we need to
analyze its binary code and instrument the code with me-
diation mechanisms. As Flash contents are often submitted
by the third party and in binary forms, manual analysis of
such contents can be time consuming and even unrealistic
for the Flash serving sites like Yahoo that receive a large
number of uploads every day. In our research, we developed
an automatic Flash analyzer to work on Flash code. Our
analyzer can decompile a binary SWF ﬁle, identify the func-
tions related to resource access and wrap them with FIRM
instrumentation.
In this section, we elaborate the design
and implementation of this tool.
ActionScript. ActionScript is a scripting language based
on ECMAScript [7], which is designed to control the behav-
ior of Flash. Compared with JavaScript, ActionScript code
is easier to analyze and instrument: 1) a Flash program is
not allowed to modify its code during the runtime, which
makes a malicious Flash impossible to get rid of our instru-
mentations; (2) Flash cannot parse and execute an input
string as eval does, which avoids the complication in stat-
ically analyzing such a string; (3) a Flash program cannot
access the code and data within another Flash without per-
mission. These features allow us to perform a static analysis
of Flash code to add mediation to the code.
Static analysis of Flash. The prototype we built ﬁrst uti-
lizes SWFScan [13], a free decompiler, to convert SWF bina-
ries into the ActionScript code. Then, it identiﬁes the pro-
gram locations from the code where instrumentations need
to be done. Speciﬁcally, our implementation looks for four
types of ActionScript APIs: getURL and navigateToURL that
186allow a Flash to inject scripts into its hosting page, Exter-
nalInterface.call and fscommand that enable the Flash to
call a JavaScript function deﬁned in the page, ExternalIn-
terface.addcallback that lets Javascript call ActionScript
functions, and LocalConnection that shares the functions
of one Flash program with others.
To accurately locate these functions, we parsed the Flash
code into a grammar tree. The parser implemented in our
prototype was generated by ANTLR (or ANother Tool for
Language Recognition) [3], a popular parser generator. We
manually translated ActionScript grammar into the form
accepted by ANTLR, which then converted it into an LL
parser. From the grammar tree the parser creates, our ana-
lyzer can identify both the direct use of script-related APIs,
for example, a call to getURL(), and the indirect use, for
example, var a = getURL; a();.
Instrumentation. After relevant program locations are
identiﬁed, our tool automatically instruments the code at
these locations with mediation mechanisms. The mediation
code allows the caller to supply its capability token for priv-
ilege checking, and invokes the original function if the caller
is authorized. After instrumentation, the new Flash pro-
gram is compiled into a SWF binary using the compiler of
Adobe Flash CS [1].
Discussion. Though ActionScript is easier to analyze than
JavaScript, it does include some language features that can
be used to obfuscate its code. Particularly, ActionScript 2.0
allows the _root object to invoke a function through pars-
ing an input string. For example, _root[’getURL’]() will
be interpreted as getURL() during an execution. This tech-
nique, however, seems no longer supported by ActionScript
3.0. Moreover, some API functions like asFunction can be
exploited to inject scripts [8]. To mitigate the threat, we
can mediate their operations using the Flash wrapper. Note
that all these language features are not frequently used by
legitimate Flash code. On the other hand, a malicious Flash
that uses them to obfuscate its code could end up decreasing
its privileges, as uninstrumented calls cannot use any capa-
bility tokens. They are ensured by FIRM to have nothing
but the lowest privilege.
6. EVALUATION
We evaluated our implementation of FIRM on real web
applications and Flash contents. Our objective is to under-
stand the eﬀectiveness of our technique in mediating Flash
activities, and the performance impacts it could bring to web
services. In this section, we ﬁrst explain our experiment set-
tings (Section 6.1), and then elaborate on this experimental
study and its outcomes (Section 6.2 and 6.3).
6.1 Experiment Settings
Here we describe the web applications, Flash and compu-
tation platforms used in our study.
Web applications. We utilized three extremely popular
open source web-design systems in our study:
• phpBB is one of the mostly used open source forum solu-
tions, with millions of installations worldwide [11]. It serves
as a template, which one can customize, e.g., adding plug-
ins, to build her own forum. The forums based upon phpBB
allow users to post Flash contents through the tag [Flash]
in BBCode [4].
•WordPress is a blog publishing application known as the
largest self-hosted blogging tool, with millions of users world-
wide [14]. Through the application, a blog author can pub-
lish Flash content, which is handled by a plugin called Kimili
Flash Embed [9].
•Drupal is an open source content management system (CMS
) that supports a variety of websites ranging from personal
weblogs to large community-driven websites [6]. The sys-
tem can be used to publish diﬀerent types of web contents,
including Flash.
Flash. Also used in our experiments were 9 real-world Flash
applications, as illustrated in Table 3. Speciﬁcally, we uti-
lized 3 vulnerable Flash advertisements, a malicious Flash
game and a Flash player to understand whether our tech-
nique can eﬀectively control the scripts they invoke. To
study our protection of the call interfaces Flash exposes to
scripts, an experiment was conducted to let malicious Flash
code spawn scripts that attempted to access the functions
another Flash exported to its hosting page. Inter-Flash ac-
cess control was evaluated with another pair of Flash appli-
cations: one attempted to share only some of its functions,
whereas the other tried to access other functions. All these
Flash applications were instrumented with our analysis tool
and executed within the aforementioned web services.
Computation platforms. All our experiments were con-
ducted on a laptop with 3G memory and 2G Dual-core CPU.
The laptop ran Windows Vista, with Apache 2.2.9/PHP
5.2.6 as web server and MySQL 5 as database server. Our
experiments were conducted in Firefox 3.5 and IE 8.
6.2 Effectiveness
Installing FIRM. We modiﬁed these web applications to
install the DOM wrapper and the policy manager. A phpBB-
based forum could receive posts with Flash contents, for ex-
ample, [flash]a.swf[/flash], which will be activated in
a viewer’s browser4.
In the absence of mediation, such a
Flash can spawn scripts to compromise the integrity and
conﬁdentiality of the viewer’s information assets. To embed
our IRM into the web pages generated by the forum, we
changed a PHP ﬁle tpl/prosilver/viewtopic/body.html
.php, making the program inject the JavaScript code of the
IRM into every web page it created. Similarly, a blog pub-
lishing system built upon WordPress can be used by the
malicious blogger to spread Flash malware. In our experi-
ment, we inserted code to index.php under the folder wp-
content/themes/classic so as to embed our IRM scripts
into the web content produced by the system. A website
developed using Drupal can also inadvertently include ma-
licious Flash contents, for example, an advertisement Flash
that picks a web surfer’s cookie. Like the other two appli-
cations, the system includes a PHP program page.tpl.php
under themes/garland for dynamic page generation. This
program was also modiﬁed in our research to build our IRM
into its pages. We also ran our Flash analyzer to instrument
the aforementioned Flash applications.
Experiment outcomes. To evaluate the eﬀectiveness of
FIRM, we ﬁrst attacked the unprotected web applications
through the Flash contents they hosted, and then made the
same attempts on these applications when they were under
the protection of FIRM. Following we elaborate our ﬁndings.
The mediation on Flash’s access to DOM objects was
studied using the ﬁve Flash applications described in Sec-
tion 6.1 and Table 3. Without mediation, we found that the
malicious Flash game could steal the cookie from the hosting
page and the three Flash advertisements could be exploited
to launch XSS attacks. Once the IRM was activated, all
changed
a
ﬁle
4We
under
styles/prosilver/template of phpBB3 to allow Flash
executing JavaScript code.
bbCode.html
PHP
187Table 3: Eﬀectiveness
Type
No
Flash
Operations
Result
phpBB WordPress Drupal
1
2
3
4
5
6
7
8
9
Puzzle Game
Adobe Demo
CNN Ad
CNET Ad
Flow Player
read cookie
read cookie
change Location
read user account text
O1: read Location
O2: call script function
Reject
Reject
Reject
Reject
Reject
Reject
Reject
Reject
O1 Reject
O2 Allowed
O1 Reject
O2 Allow
Color Widget
expose functions
Invoker
Sender
Receiver
call functions of Color Widget
call functions of Receiver
receive message
-
Reject
Reject
-
-
Reject
Reject
-
Reject
Reject
Reject
Reject
Allow
-
Reject
Reject
-
Flash
to DOM
DOM to
Flash
Flash
to Flash
these attacks were found to be successfully deﬂected. Specif-
ically, the instrumented phpBB and WordPress adopted the
security policies that disallowed Flash contents to access
any document objects. As a result, we observed that the
JavaScript calls for accessing cookies, initiated by the Flash
game and the Flash advertisements, were all blocked. A side
eﬀect was that the legitimate Flash, the Flow player, could
not access the URL of the hosting page either. The poli-
cies speciﬁed for Drupal diﬀerentiated the legitimate Flash,
Flow Player, from the other Flash applications: the player
was allowed to access document objects, except the cookie,
whereas the Flash games and advertisements were denied
the access. We found that these policies were faithfully en-
forced by our implementation, which defeated all our attacks
without interfering with the legitimate Flash’s operations.
We employed two Flash applications to evaluate the pro-
tection of the call interfaces a Flash exposed to JavaScript.
One of these applications share its functions with the host-
ing page, which could be accessed by the other Flash from a
diﬀerent domain through injecting script. After instrument-
ing the exposed functions with mediation code, we observed
that the second Flash was no longer able to use the functions
without legitimate capability tokens.
We also studied the situation when two Flash applications
attempted to share resources between them. One Flash tried
to let the other Flash call some but not all of its functions.
In the absence of FIRM, this could only be done through
establishing a LocalConnection, which unfortunately made
all functions within the ﬁrst Flash available to the other.
After the IRM was installed, we could assign the second
Flash a capability token that only granted it access to some
of these functions. Such security policies were found to be
successfully enforced by our prototype.
6.3 Performance
The performance of FIRM was evaluated in our research
from three perspectives: (1) the performance impact of FIRM
on page loading, (2) runtime overheads for mediating DOM
and Flash operations and (3) the cost for performing static
analysis on SWF ﬁles. We elaborate this study below.
Table 4: Performance of page loading
phpBB3 (s) WordPress (s) Drupal (s)
No FIRM
FIRM
Overhead
3.927
4.117
4.80%
1.66
1.923
15.80%
3.555
3.96
11.40%
Bootstrapping FIRM could add further delay to a page
loading process. To understand such a performance im-
pact, we measured the page loading time of the three web
applications described in Section 6.1 using a plugin (e.g.,
Firebug [35] in Firefox). The experiment was designed to
compare the loading time of unprotected pages with that of
instrumented pages. We collected the data from 10 indepen-
dent tests under the settings when FIRM was installed and
when it was not to compute averages, which are reported
in Table 4. As we can see from the table, the overhead in-
curred by FIRM was reasonable: it was kept below 20% in
the worst case (WordPress), and acceptable for other web
applications.
Table 5: Mediation overheads
Flash to
DOM(ms)
Read cookie
IE
FF
DOM to
Flash(ms)
Call func
IE
FF
Flash to
Flash(ms)
Call func
IE
FF
0.675
0.641
0.995
0.686
55.20% 134.00% 4.40% 1% 1.60%
0.799
1.87
6.52
6.81
4.92
4.96
0.67
0.698
4%
Tasks
Browsers
No FIRM
FIRM
Overhead
We further studied the overheads incurred by instrumented
operations, which include the delay caused by mediating the
interactions between Flash and JavaScript, as well as those
between diﬀerent Flash applications. We collected data from
1000 independent tests of individual operations, with or
without mediation. Averaged delays computed from such
data are displayed in Table 5. From the table, we can ob-