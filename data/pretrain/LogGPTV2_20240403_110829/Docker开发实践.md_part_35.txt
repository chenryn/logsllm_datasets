18
当然，通过Web UI也可以查看集群中发生的事件，如图17-8所示。
224 第17章 shipyard
图17-8 shipyard集群中的事件记录
17.2.7 集群信息
shipyard还提供关于集群状态的信息，例如CPU、内存、容器、镜像、引擎以及尚未使用的
CPU和内存等信息，具体的CLI操作为：
shipyard cli> shipyard info
Cpus: 4.00
Memory: 8192.00 MB
Containers: 2
Images: 5
Engines: 1
Reserved Cpus: 4.00% (0.16)
Reserved Memory: 3.52% (288.00 MB)
如果是Web UI，则在主控制面板中就可以看到集群的相关信息，如图17-9所示。
图17-9 shipyard集群信息
18.1 Machine 225
1
第 18 章 2
Machine+Swarm+Compose
3
4
5
在2014年12月份的DockerCon大会上，Docker给大家带来它的最新编排服务三件套：Machine、
Swarm和Compose。Machine主要解决在各个平台上安装Docker的问题，让用户通过一条指令就可
6
以安装好Docker，而无需知晓各个平台的具体安装方法。Swarm则是将Docker本地集群集中管理，
让管理集群就像管理单个主机一样简单。Compose则用于安排应用部署到哪个容器组中。这三个
7
组件都尚在开发之中，并没有正式的版本发布，所以不推荐大家在实际生产环境中尝试它们。在
这一章中，我们要介绍的内容如下：
9
 Machine。包含Machine简介、安装和操作。
 Swarm简介。包含Swarm简介、原理和流程。 8
 Swarm实操。
 Swarm的发现服务和调度。 10
 Compose简介。
10
18.1 Machine
11
在1.4节中，我们介绍了如何在各个操作系统（如Ubuntu、Red Hat、OS X以及Windows）下
安装Docker，然而在不同操作系统下安装的步骤相差颇大，并且我们还没有考虑另外一种情况，
13
那就是在公共云平台下Docker的安装，此时我们需要先安装操作系统，然后再安装Docker，这个
过程更漫长。程序员并不喜欢处理这种繁杂的事情，他们宁愿专注地写代码，所以急切渴望有一
14
种工具能够让我们通过一条命令就可以安装好Docker，而不管它所在的环境。为了解决这个问题，
Docker官方在2014年的DockerCon大会上提出了Machine。目前，Machine正在快速开发当中，尚
15
未有正式发布的版本，其地址为https://github.com/docker/machine。
Machine是如何让用户无需关心平台的底层细节的呢？相信大家对“驱动”一词并不陌生，我 16
们的操作系统中就有着各种各样的设备驱动。为了跨越各种硬件设备，操作系统向底层设备开放
驱动API，功能的具体实现由硬件厂商来实现。Machine也是如此，其后端对Docker生态圈的各个
17
平台开放API，只要你遵循API接口实现指定功能，那么Docker就可以在你的平台上跑起来。目前，
已有的驱动有VirtualBox、Amazon Web Services、Google Compute Engine、Microsoft Azure以及 18
226 第18章 Machine+Swarm+Compose
VMware vCloud Air等。
下面我们简单说明Machine的安装和操作。需要说明的是，Machine现在尚处在beta版本，我
们不赞成读者将其用到真实的生产环境中。
要安装Machine，可以到https://docs.docker.com/machine/下载对应的二进制文件，然后将其改
名为docker-machine，并将其放置到合适的目录下，接着将该目录加入到环境变量PATH中即可。
通过下面的命令验证一下：
$ docker-machine -v
machine version 0.1.0
发现一切正常。
Machine已经安装好了，接下来我们以VirtualBox环境为例，说明Machine的用法。为了在
VirtualBox中使用Docker，首先要在你的系统上安装好VirtualBox，其版本应该为4.3.20或者更高。
在安装VirtualBox之前，可以通过docker-machine ls命令查看当前已有的主机实例：
$ docker-machine ls
NAME ACTIVE DRIVER STATE URL
可以发现，现在还没有实例。这里我们通过下面的命令安装VirtualBox下的Docker实例：
$ docker-machine create --driver virtualbox dev
INFO[0000] Creating SSH key...
INFO[0000] Creating VirtualBox VM...
INFO[0007] Starting VirtualBox VM...
INFO[0007] Waiting for VM to start...
INFO[0038] "dev" has been created and is now the active machine
INFO[0038] To connect: docker $(docker-machine config dev) ps
参数--driver指定驱动类型，这里是virtualbox，dev为创建的实例名称。当第一次运行该命
令时，Machine会下载一个boot2docker.iso文件，它是一个包含Docker服务的轻量级Linux系统镜
像文件。然后Machine会创建SSH密钥，创建VirtualBox VM并启动它。接着，我们再次查看已有
主机实例：
$ docker-machine ls
NAME ACTIVE DRIVER STATE URL
dev * virtualbox Running tcp:// 192.168.1.85.100:2376
可以发现，已经有一个名为dev的主机实例，其状态为Running，表示它目前是活动状态。URL
则是其Docker守候进程的地址。
接下来，我们可以在该Docker服务上进行各种容器操作，例如：
$ docker $(docker-machine config dev) run busybox echo hello world
Unable to find image 'busybox' locally
Pulling repository busybox
18.2 Swarm 227
e72ac664f4f0: Download complete
1
511136ea3c5a: Download complete
df7546f9f060: Download complete
e433a6c5b276: Download complete
2
hello world
在docker命令后面加入docker-machine config dev，指定命令作用于刚刚建立的dev主机实
3
例。如果觉得每次输入这个config命令太麻烦，可以将dev实例的环境变量导入到当前系统，具
体为：
4
$ $(docker-machine env dev)
5
dev实例的环境变量的内容为：
$ docker-machine env dev
6
export DOCKER_TLS_VERIFY=yes
export DOCKER_CERT_PATH=/home/root/.docker/machines/.client
export DOCKER_HOST=tcp:// 192.168.1.85:2376
7
设置好环境变量后，Docker默认就连接到dev主机实例的Docker后台，所以可以直接使用
Docker命令：
9
$ docker run busybox echo hello world
hello world 8
有了Machine的主机实例后，我们可以通过下面的命令停止和启动该实例：
10
$ docker-machine stop dev
$ docker-machine start dev
10
关于Machine的内容，我们就介绍到这里。在这一节中，我们简单介绍了Machine的设计初衷
以及基本操作，若想更加深入地了解它，可以访问GitHub上它的官网。
11
18.2 Swarm
13
Swarm是Docker公司于2014年12月初推出的一款Docker集群管理工具，其目标是使多台机器
的Docker集群像只有一台机器的Docker一样容易管理。Swarm采用的是标准的Docker API作为其 14
前端访问接口，这就意味着凡是使用Docker API进行通信的Docker客户端都可以透明地使用
Swarm，例如dokku、Fig、krane、flynn、shipyard以及Docker本身的客户端，即二进制文件docker 15
等。Swarm守护进程是使用Go语言编写的，截止到目前仍然处于Alpha阶段，然而其迭代速度却
非常快，我们相信在不久的将来就可以将其投入到生产环境中。 16
作为Docker官方开发的工具，Swarm延续了Docker惯有的“batteries included but removable”设
17
计理念。关于这个设计理念，可以这么理解：一方面，它属于Swarm集群中的一个重要组件，和
Docker后台进程相互协作，使整个集群正常运行；另一方面，Swarm又是可插拔的，至少Docker
18
后台完全不需依赖Swarm。此外，Swarm的内部组件也是可替换的，用户可以很方便地定制特定
228 第18章 Machine+Swarm+Compose
的资源分配策略、调度算法等。
下面我们简要说明Swarm的组成、架构、流程以及原理等。
18.2.1 架构和组件
图18-1描述的是Swarm集群的架构图，主要包含Docker客户端、Swarm服务器（主控节点）、
后端服务器、集群节点。Swarm接受来自Docker客户端的管理请求，它们之间采用Docker API联
系。Docker客户端就像管理一台机器上的容器一样管理Swarm集群内的容器，Swarm接受到来自
Docker客户端的命令之后，根据特定的过滤条件和调度算法，将该命令指派到指定节点运行。
Swarm集群中的节点通过发现服务加入到Swarm集群中。此外，发现服务和响应的后端服务器一
起维护管理着节点的健康状况、加入和退出等。
图18-1 Swarm集群架构图
Swarm和Docker客户端的联系与单节点的Docker命令并无区别。因为Swarm的监听端口通常
也是2375和2376，用户可以通过-H IP:port的形式来连接即可，具体如下：
$ docker -H tcp:// info
需要注意的是，Docker版本需高于1.4.0。这种形式和我们往常访问一台主机上的Docker后台
并无区别，只是将IP和端口指向Swarm后台的IP和端口。然而，需要注意的是，由于Swarm和Docker
18.2 Swarm 229
后台在结构上的差异，以及当下Swarm并不成熟，导致了许多命令在Swarm中不能使用，但我们
1
相信这仅仅是时间问题。目前，可以使用的常见命令有：
 docker run 2
 docker create
 docker inspect 3
 docker kill
 docker logs 4
 docker start
5
在Swarm服务内部，主要包含发现服务和调度两大模块。
 发现服务。发现服务是Swarm用来维护集群状态的一种机制。集群中的节点会将自己的资
6
源使用情况、健康状态等信息发送到Swarm节点或是诸如Consul、etcd等后端服务程序中，
这些后端服务程序维护着节点列表以及每个节点的状态信息，Swarm通过查询后端服务
7
器，得到每个节点的信息并跟踪集群中的节点，利用这些信息为调度模块提供决策支持。
目前，Swarm提供了5种发现机制：节点发现（Node Discovery）、文件发现（File Discovery）、
9
Consul发现（Consul Discovery）、Etcd发现（Etcd Discovery）和ZooKeeper发现（ZooKeeper
Discover）。
8
 调度。调度模块负责命令的调度，通过标签过滤和调度算法，将客户端的命令指派给特
定节点运行。在节点的Docker后台启动时，可以设定自己的一系列标签，这些标签可以
10
是CPU数量、内存大小、端口等信息。当Swarm的调度模块接收到容器命令时，它首先根
据标签过滤出一组符合条件的节点，然后在这组节点的基础上执行调度算法。目前，调
10
度算法主要有装箱算法和随机算法。
 Swarm节点。Swarm集群中的节点包含Docker后台、Swarm客户端以及发现服务客户端。
11
Docker后台就不多说了，Swarm客户端是负责和Swarm主控节点通信的模块，负责收发信
息。发现服务客户端主要是和Consul、etcd进行通信的客户端。Swarm节点是任务的真正
13
执行主体。
在说完Swarm的各个组件之后，我们现在说明其执行流程，具体如下所示。
14
(1) Swarm发现集群中的节点，收集集群中各个节点的状态、角色等信息并持续跟踪其状态，
这主要通过发现服务模块以及相应的后端服务程序完成。 15
(2) 调度执行。有了第(1)步的发现，Swarm就知道集群中的节点资源、状态、角色等信息，并
16
根据客户端投递过来的命令，通过一定的条件过滤和调度算法，选出目标节点。将命令推送到指
定节点后，节点上的Swarm客户端接收该消息，并进一步将命令传递给节点的Docker后台程序，
等待命令执行完毕后将相关信息返回给Swarm服务器。 17
(3) API监听。Swarm初始化好API监听接口后，就可以像Docker后台一样监听来自Docker客户
18
端的命令，并将命令交给调度模块进行调度。
230 第18章 Machine+Swarm+Compose
18.2.2 实操
由架构部分知道，Swarm集群主要包含一个主控节点和多个Swarm集群节点。创建一个Swarm
集群并不难，你可以直接在现有的Docker集群上建立。特别是采用基于文件和节点的发现机制时，
除了需要部署Swarm主控节点外，并不需要额外的配置。你甚至可以在现有的Docker节点上直接
运行Swarm主控节点，不过我们建议在单独一台机器上运行它，因为它会处理较多的TCP连接，
耗费比较多的文件描述符。接下来，我们说明Swarm的实际操作，其中所有节点的操作系统都为
ubuntu:14.04。
1. 安装
获取Swarm的方式有两种，具体如下所示。
 直接从Docker Hub中拉取Swarm镜像，其操作为：
$sudo docker pull swarm
$ docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
swarm latest 92d78d321ff2 18 hours ago 7.19 MB
验证Swarm的版本：
$ docker run --rm swarm --version
swarm version 0.1.0 (a445ed9)
 通过源码编译的方式。首先，你需要安装golang来构建Go语言编译环境：想要运行Swarm
节点，必须保证Docker后台是1.4.0或者更新版本，并且所有的Docker后台是通过配置TCP
连接的方式启动的。
$ sudo apt-get install –y golang git
然后创建一个目录：
mkdir go
接着将该目录加入到GOPATH环境变量中：
export GOPATH=~/go
再获取Swarm二进制文件，它将会自动下载到GOPATH变量表示的目录下：
go get –u github.com/docker/swarm
然后将Swarm二进制文件所在的目录添加进PATH变量中：
export PATH=$HOME/go/bin:$PATH
现在就可以直接使用Swarm了。下面验证其版本：
$ swarm --version
18.2 Swarm 231
swarm version 0.1.0 (a445ed9)
1
如果已经运行了Docker后台，则需要通过如下命令先停止它：
2
$ sudo service docker stop
然后通过下面命令将其启动：
3
$ sudo docker -H tcp://0.0.0.0:2375 –d &
2015/01/13 11:46:45 docker daemon: 1.0.1 990021a; execdriver: native; graphdriver: