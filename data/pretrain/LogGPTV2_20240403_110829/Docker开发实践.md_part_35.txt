### 17.2.7 集群信息

通过Web UI可以查看集群中发生的事件，如图17-8所示。

**图17-8 shipyard集群中的事件记录**

除了事件记录外，shipyard还提供了关于集群状态的详细信息，包括CPU、内存、容器、镜像、引擎以及未使用的CPU和内存等。具体的CLI操作如下：

```shell
shipyard cli> shipyard info
Cpus: 4.00
Memory: 8192.00 MB
Containers: 2
Images: 5
Engines: 1
Reserved Cpus: 4.00% (0.16)
Reserved Memory: 3.52% (288.00 MB)
```

在Web UI中，这些信息可以在主控制面板上直接查看，如图17-9所示。

**图17-9 shipyard集群信息**

---

### 第18章 Machine+Swarm+Compose

#### 18.1 Machine

在2014年12月的DockerCon大会上，Docker推出了三个新的编排服务：Machine、Swarm和Compose。其中，Machine旨在简化Docker在不同平台上的安装过程，使用户只需一条命令即可完成安装，而无需了解各个平台的具体安装方法。Swarm则用于集中管理Docker本地集群，使其管理方式与单个主机相似。Compose用于定义和运行多容器应用。尽管这三个组件仍在开发中，尚未发布正式版本，但在本章中，我们将介绍它们的基本概念和用法。

##### Machine简介

在之前的章节中，我们介绍了如何在各种操作系统（如Ubuntu、Red Hat、OS X和Windows）上安装Docker。然而，在不同的操作系统下，安装步骤差异较大，且在公共云平台上安装Docker的过程更为复杂。程序员通常不希望处理这些繁琐的任务，而是希望能够通过一个简单的命令来完成Docker的安装。为此，Docker官方推出了Machine。

Machine通过驱动API实现跨平台支持，类似于操作系统中的设备驱动。目前，已有的驱动包括VirtualBox、Amazon Web Services、Google Compute Engine、Microsoft Azure和VMware vCloud Air等。

以下简要说明Machine的安装和基本操作。需要注意的是，Machine目前仍处于beta阶段，不建议在生产环境中使用。

**安装Machine**

1. 访问[https://docs.docker.com/machine/](https://docs.docker.com/machine/)下载对应的二进制文件。
2. 将其重命名为`docker-machine`并放置到合适的目录中。
3. 将该目录添加到环境变量`PATH`中。
4. 验证安装：
   ```shell
   $ docker-machine -v
   machine version 0.1.0
   ```

**使用Machine**

假设你已经安装了VirtualBox（版本4.3.20或更高），可以通过以下命令创建一个新的Docker实例：

```shell
$ docker-machine create --driver virtualbox dev
INFO[0000] Creating SSH key...
INFO[0000] Creating VirtualBox VM...
INFO[0007] Starting VirtualBox VM...
INFO[0007] Waiting for VM to start...
INFO[0038] "dev" has been created and is now the active machine
INFO[0038] To connect: docker $(docker-machine config dev) ps
```

参数`--driver`指定驱动类型，这里是`virtualbox`，`dev`为创建的实例名称。首次运行时，Machine会下载一个包含Docker服务的轻量级Linux系统镜像`boot2docker.iso`。

再次查看已有主机实例：

```shell
$ docker-machine ls
NAME   ACTIVE   DRIVER       STATE     URL
dev    *        virtualbox   Running   tcp://192.168.1.85:2376
```

现在，你可以在该Docker服务上进行各种容器操作。例如：

```shell
$ docker $(docker-machine config dev) run busybox echo hello world
Unable to find image 'busybox' locally
Pulling repository busybox
e72ac664f4f0: Download complete
511136ea3c5a: Download complete
df7546f9f060: Download complete
e433a6c5b276: Download complete
hello world
```

为了简化操作，可以将`dev`实例的环境变量导入到当前系统中：

```shell
$ eval $(docker-machine env dev)
```

设置好环境变量后，可以直接使用Docker命令：

```shell
$ docker run busybox echo hello world
hello world
```

停止和启动实例：

```shell
$ docker-machine stop dev
$ docker-machine start dev
```

更多关于Machine的信息，请访问其GitHub页面。

#### 18.2 Swarm

Swarm是Docker公司在2014年12月初推出的一款Docker集群管理工具，旨在使多台机器的Docker集群像单机一样易于管理。Swarm采用标准的Docker API作为前端访问接口，这意味着所有使用Docker API进行通信的客户端都可以透明地使用Swarm。Swarm守护进程使用Go语言编写，目前仍处于Alpha阶段，但迭代速度很快，预计不久将可用于生产环境。

Swarm的设计理念是“batteries included but removable”，即它是一个重要组件，但又是可插拔的。Docker后台完全不依赖于Swarm，用户也可以定制特定的资源分配策略和调度算法。

##### 架构和组件

**架构**

Swarm集群的架构如图18-1所示，主要包含Docker客户端、Swarm服务器（主控节点）、后端服务器和集群节点。Swarm接受来自Docker客户端的管理请求，并根据特定的过滤条件和调度算法将命令指派到指定节点运行。Swarm集群中的节点通过发现服务加入到集群中，发现服务和后端服务器共同维护节点的健康状况和状态信息。

**图18-1 Swarm集群架构图**

**连接Swarm**

Swarm监听端口通常是2375和2376，用户可以通过`-H IP:port`的形式连接Swarm后台：

```shell
$ docker -H tcp://<IP>:<port> info
```

需要注意的是，Docker版本需高于1.4.0。虽然这种方式与访问单节点Docker后台无异，但由于Swarm和Docker后台在结构上的差异，许多命令在Swarm中可能无法使用。

**内部组件**

Swarm内部主要包含发现服务和调度两大模块。

- **发现服务**：发现服务用于维护集群状态。节点将自己的资源使用情况和健康状态发送到Swarm节点或后端服务程序（如Consul、etcd等）。这些后端服务程序维护着节点列表及其状态信息，Swarm通过查询这些信息来跟踪集群中的节点，并为调度模块提供决策支持。Swarm提供了多种发现机制，包括Node Discovery、File Discovery、Consul Discovery、Etcd Discovery和ZooKeeper Discovery。

- **调度**：调度模块负责命令的调度。通过标签过滤和调度算法，将客户端的命令指派给特定节点运行。节点的Docker后台在启动时可以设定一系列标签（如CPU数量、内存大小、端口等）。当Swarm调度模块接收到容器命令时，首先根据标签过滤出符合条件的节点，然后执行调度算法。目前，调度算法主要有装箱算法和随机算法。

- **Swarm节点**：Swarm集群中的节点包含Docker后台、Swarm客户端和发现服务客户端。Swarm客户端负责与Swarm主控节点通信，发现服务客户端则与Consul、etcd等后端服务通信。Swarm节点是任务的实际执行主体。

##### 执行流程

1. **发现集群节点**：Swarm通过发现服务模块及相应的后端服务程序收集并持续跟踪集群中各个节点的状态、角色等信息。
2. **调度执行**：根据第一步收集的信息，Swarm通过一定的条件过滤和调度算法选出目标节点，并将命令推送到该节点。节点上的Swarm客户端接收消息并传递给Docker后台程序，等待命令执行完毕后返回相关信息给Swarm服务器。
3. **API监听**：Swarm初始化API监听接口后，可以像Docker后台一样监听来自Docker客户端的命令，并将命令交给调度模块进行调度。

##### 实操

创建一个Swarm集群并不难，可以直接在现有的Docker集群上建立。特别是采用基于文件和节点的发现机制时，除了需要部署Swarm主控节点外，并不需要额外的配置。建议在单独一台机器上运行Swarm主控节点，因为它会处理较多的TCP连接，耗费较多的文件描述符。

**安装**

获取Swarm的方式有两种：

1. **从Docker Hub拉取Swarm镜像**：
   ```shell
   $ sudo docker pull swarm
   $ docker images
   REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
   swarm        latest    92d78d321ff2   18 hours ago    7.19 MB
   ```
   验证版本：
   ```shell
   $ docker run --rm swarm --version
   swarm version 0.1.0 (a445ed9)
   ```

2. **通过源码编译**：
   - 安装golang和git：
     ```shell
     $ sudo apt-get install -y golang git
     ```
   - 创建目录并设置环境变量：
     ```shell
     mkdir go
     export GOPATH=~/go
     ```
   - 获取Swarm二进制文件：
     ```shell
     go get -u github.com/docker/swarm
     export PATH=$HOME/go/bin:$PATH
     ```
   - 验证版本：
     ```shell
     $ swarm --version
     swarm version 0.1.0 (a445ed9)
     ```

如果已经运行了Docker后台，则需要先停止再重新启动：

```shell
$ sudo service docker stop
$ sudo docker -H tcp://0.0.0.0:2375 -d &
2015/01/13 11:46:45 docker daemon: 1.0.1 990021a; execdriver: native; graphdriver:
```

通过以上步骤，你可以成功安装和配置Swarm集群。