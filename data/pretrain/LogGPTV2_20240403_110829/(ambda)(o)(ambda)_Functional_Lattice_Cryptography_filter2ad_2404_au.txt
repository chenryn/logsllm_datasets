for her, but does not want Bob to learn anything about the input or output of the computation.
Alice Ô¨Årst generates appropriate symmetric keys and encrypts her data with an HE scheme,
then sends the ciphertext to Bob. In order to compute the function on encrypted data, Alice
must write a homomorphic version of the function that she wants Bob to compute, and send
it to Bob.5 Then Bob runs the computation on Alice‚Äôs input and sends the (encrypted) result
back to her.
5It is also possible for Alice to send the plaintext computation and let Bob turn it into computation on
encrypted inputs. This requires Alice to send some additional information to Bob, but otherwise the procedure
is identical.
138
Using ALCHEMY, many of Alice‚Äôs steps are automated. Alice Ô¨Årst writes an ALCHEMY
DSL expression for the plaintext computation, and then compiles it locally to obtain a
homomorphic computation. The compilation process automatically creates all necessary
cryptographic keys and provides them to Alice for future use. Alice can then serialize this
expression (using a serialization interpreter) and send it to Bob. Bob then uses ALCHEMY
to deserialize the computation, executes it on Alice‚Äôs data, and sends back the encrypted
result. Alice uses they secret keys provided by the compilation process to decrypt the result.
Thus ALCHEMY simpliÔ¨Åes the process of turning Alice‚Äôs plaintext computation into a
computation that Bob can actually use. All keys remain under Alice‚Äôs (and only Alice‚Äôs)
control, and ALCHEMY is used by both Alice and Bob to respectively create and evaluate a
desired homomorphic computation.
5.1.4 Related Work
As far as we are aware, there is no prior compiler for HE; all existing HE implementations
require the programmer to manually call all the needed plaintext and ciphertext-maintenance
operations, generate parameters and keys, etc.
For example, ALCHEMY currently targets the BGV-style SHE scheme as implemented
with the Œõ‚àòùúÜ Haskell framework for lattice-based cryptography introduced in chapter 3.6
This provides ALCHEMY with its underlying HE implementation, which supports advanced
features like ring-switching. However, up until now those who wished to use Œõ‚àòùúÜ for HE
still had to write code directly to its interface, which is somewhat low-level.
Probably the most well-known HE implementation is HElib [HS], an ‚Äúassembly lan-
guage‚Äù for homomorphic encryption, which is implemented in C++ on top of NTL [Sho06].
HElib has been used for many homomorphic computations of interest [GHS12c; HS14;
HS15], but it requires quite a lot of expertise to use, because computations must be written
directly in the ‚Äúassembly language‚Äù itself.
6We emphasize that ALCHEMY contains many generic components which can be reused outside the context
of Œõ‚àòùúÜ or BGV-style homomorphic encryption.
139
FHEW [DM15] is an implementation of a very fast bootstrapping algorithm for ‚Äúthird-
generation‚Äù FHE schemes [GSW13; AP14]. However, it is not intended for general-purpose
homomorphic computations, since the scheme encrypts only one bit per ciphertext.
The SEAL library [CLP17] goes one step farther than these three implementations by
introducing heuristic parameter selection, an important step towards practical HE. However,
users must still write homomorphic computations manually, including the ciphertext mainte-
nance operations like (re)linearlization, and the management of cryptographic keys. These
operations obscure the underlying plaintext computation and require knowledge of HE to
use correctly. By contrast, the ALCHEMY compiler handles both of these components, and
more, automatically.
Systems such as [JZ12] and TASTY [Hen+10] provide tools for describing interac-
tive cryptogrphic protocols. They therefore solve a fundamentally different problem than
ALCHEMY. In particular, they do not address the complexity of writing homomorphic
computations. Instead, they provide tools for writing secure interactive protocols which can
be instantianted with a number of different concrete cryptographic primitives like HE or
MPC.
5.1.5 Chapter Organization
The rest of the chapter is organized as follows.
Section 5.2 gives the relevant background on the (typed) tagless Ô¨Ånal style of DSL design
and implementation, and describes ALCHEMY‚Äôs plaintext DSL.
Section 5.3 describes ALCHEMY‚Äôs ciphertext DSL, which is the target language of the
compiler.
Section 5.4 describes several simple DSL interpreters, including a transformation which
logs the error rates of homomorphic computations at runtime.
Section 5.5 describes the central piece of ALCHEMY, the plaintext-to-ciphertext compiler.
140
We defer the evaluation of ALCHEMY to chapter 6, where we provide full-scale homo-
morphic application written in ALCHEMY.
5.2 ALCHEMY Domain-SpeciÔ¨Åc Languages
In this section we provide the requisite background on the ‚Äútyped tagless Ô¨Ånal‚Äù style of
embedded DSL design and implementation, provide some simple example interpreters, and
describe our plaintext DSL.
5.2.1 Typed Tagless Final Style
The elegant and powerful ‚Äútyped tagless Ô¨Ånal‚Äù approach to DSLs, also called object lan-
guages, was introduced by Carette et al. [CKS09], and further explicated in the lecture notes
of Kiselyov [Kis10]. The more widely known ‚Äúinitial‚Äù approach represents object-language
terms as values of a special data type in a metalanguage, e.g., an abstract syntax tree. By
contrast, the ‚Äútagless Ô¨Ånal‚Äù approach represents object-language terms as combinations
of ordinary polymorphic terms in the metalanguage. The polymorphism allows an object-
language term to be written once and interpreted in many ways, by monomorphizing it in
different ways.
The tagless-Ô¨Ånal approach makes language design and interpretation highly modular,
extensible, and safe: different object-language features can be deÔ¨Åned independently and
combined together arbitrarily, and interpreters can be deÔ¨Åned to handle any subset of the
available components. Interpreters can be extended to support new object-language features
without changes to existing code. An interpreter is able to interpret an object-language term
exactly when it is able to interpret all the language components used by the term; otherwise,
type checking fails at compile time. More generally, the full strength of the metalanguage‚Äôs
type system, including type inference, can directly be inherited by the object language.
Here we give an introduction to the approach by providing a running example of several
general-purpose language components and interpreters from [CKS09; Kis10], which are also
141
part ALCHEMY. In later subsections we describe more specialized language components for
the plaintext and ciphertext languages.
Language components.
In the tagless-Ô¨Ånal approach as realized in the metalanguage
Haskell, an object-language component is deÔ¨Åned by a class. A Haskell class introduces
one or more polymorphic methods, which may be functions or just values. For example, to
introduce pairs as an object-language feature, we deÔ¨Åne
class Pair expr where
pair_ :: expr e (a -> b -> (a,b))
fst_ :: expr e ((a,b) -> a)
snd_ :: expr e ((a,b) -> b)
Here pair_ is a metalanguage value which represents an object-language function. The
function takes (object-language) values of type a and b, and returns an (object-language)
value of the pair type (a,b). Similarly, fst_ and snd_ represent object-language functions
that respectively extract the Ô¨Årst and second components of a pair. (By convention, names
of object-language terms always end in underscore, to distinguish them from metalanguage
terms.)
Notice the common form expr e x of the method types. Here the type expr is the
instance of the Pair class; it serves as the interpreter of object-language terms involving
pairs. In turn, expr is parameterized by an environment type e (discussed below) and a
metalanguage type x, which serves as the type of the object-language term.
Interpreters. An interpreter of a language component is just a data type that is deÔ¨Åned
to be an instance the component‚Äôs class. As running examples, we describe two simple
interpreters: the metacircular evaluator E is deÔ¨Åned as
newtype E e a = E (e -> a)
142
which says that value of type E e a is equivalent (isomorphic) to a function that maps
e-values to a-values. The particular function will (usually) be the one that maps any e-
value to the (metalanguage) value of type a represented by the object-language term. The
pretty-printer P is deÔ¨Åned as
newtype P e a = P String
which says that a value of type P e a is equivalent to a String. The particular string will
be the printed representation of the object-language expression of type a that P interprets.
We make E and P interpreters of the Pair language component by making them instances
of the Pair class. Observe that when expr is specialized to E, the type of pair_ is equivalent
to e -> a -> b -> (a,b). We give a partial instance deÔ¨Ånition below;7 the deÔ¨Ånition of
fst_ and snd_ are similarly trivial:
instance Pair E where
pair_ = E $ \e -> \a -> \b -> (a,b)
When expr is specialized to P, the type of pair_ is equivalent to just String, which leads
us to the easy instance deÔ¨Ånition
instance Pair P where
pair_ = P $ "pair_"
Extending the language and interpreters. We can introduce more language features
simply by deÔ¨Åning more classes, e.g., for addition:
class Add expr a where
add_ :: expr e (a -> a -> a)
neg_ :: expr e (a -> a)
7Since E is an applicative functor, a shorter deÔ¨Ånition is pair_ = E $ pure (,).
143
This says that add_ is an object-language function that takes two values of type a and returns
a value of type a. Similarly, neg_ is an object-language function of one argument. Notice,
however, that the type a here is speciÔ¨Åc, not arbitrary: it is an argument to the Add class.
This means that an interpreter may support add_ and neg_ for certain types a, but not others.
The (partial) instances of Add for E and P are straightforward:
instance Additive a => Add E a where
add_ = E $ \e -> \x -> \y -> x+y
instance Add P a where
add_ = P $ "add_"
Notice that E is an instance of Add only for types a that are themselves instances of the
Additive class. This class deÔ¨Ånes the polymorphic addition function (+) :: Additive a
=> a -> a -> a used in the deÔ¨Ånition of add_ for E.
Functions and environments. The above classes deÔ¨Åne object-language functions, but so
far we have no way of actually applying them to arguments! Nor do we have a way to create
new functions of our own in the object language. Both of these features are introduced by
the Lambda class:
class Lambda expr where
($:) :: expr e (a -> b) -> expr e a -> expr e b
lam
:: expr (e,a) b -> expr e (a -> b)
v0
s
:: expr (e,a) a
:: expr e a -> expr (e,x) a
The ($:) operator applies an object-language function of type a -> b to a object-language
value of type a to yield an object-language value of type b. Before describing the remaining
methods, we show the easy deÔ¨Ånitions of ($:) for the E and P interpreters:
144
(E f) $: (E a) = E $ \e -> (f e) (a e)
(P f) $: (P a) = P $ "(" ++ f ++ " " ++ a ++ ")"
For the Ô¨Årst line, recall that f is a function of type e -> a -> b and a is a function of
type e -> a, and we need to produce a function of type e -> b; the right-hand side of
the deÔ¨Ånition does exactly what it should. For the second line, recall that f and a are just
Strings representing their respective object-language terms, so to pretty-print the function
application we just separate them with a space and wrap in parentheses to avoid ambiguity.
The function lam denotes lambda-abstraction. Notice its use of the environment: it
converts any object-language term that has type b, in any environment whose ‚Äútopmost‚Äù
entry has type a, into an object-language function of type a -> b. Similarly, v0 is an object-
language value of type a in any environment whose topmost entry has type a. Essentially,
the environment can be thought of as a stack of values, and v0 represents the value at the
top. Finally, s ‚Äúshifts‚Äù an object-language expression by pushing a value (of arbitrary type)
onto the environment, so v1 = s v0 represents the next value on the stack, v2 = s v1
represents the next value, etc. Putting these piece together, for example, lam v0 has type
expr e (a -> a) and represents the identity function.
The deÔ¨Ånitions of lam, v0, and s are trivial for the evaluator E, and are almost as
trivial for the pretty-printer P; however, the type just needs to be redeÔ¨Åned to be a function
from the ‚Äúlam depth‚Äù to String, so that the proper variable indices can be pretty-printed.
See subsection 5.4.1 for the actual ALCHEMY deÔ¨Ånition of this interpreter.
5.2.2 Generic Language Components
ALCHEMY includes two loosely deÔ¨Åned and overlapping languages: a plaintext language
for expressing ‚Äúin-the-clear‚Äù computations, and a ciphertext language for computations
on encrypted inputs. Each of these languages is divided into many language components,
some of which are shared between the languages. In addition to the Pair, Add, and Lambda
145
components that we have seen in the previous section, we brieÔ¨Çy describe the remaining
language components which are common to both DSLs.
Multiplication. The Mul class adds multiplication to the object language:
class Mul expr a where
type PreMul expr a
mul_ :: expr e (PreMul expr a -> PreMul expr a -> a)
The type of mul_ is similar to add_, except that the two (object-language) inputs have type
PreMul expr a instaead of just a. The PreMul type family generalizes the input types to
mul_ so that they are a function of the output type and the interpreter. This is necessary in
the compilation step (see section 5.5). In practice, PreMul expr a is always isomorphic to
a, but some interpreters need to augment the input with additional information at the type
level. We give the Mul instance for E below:
instance (Ring a) => Mul E a where
type PreMul E a = a
mul_ = E $ \e -> \x -> \y -> x*y
Similar to the Add instance for E, the Mul instance works for any object language type which
is a Ring. The deÔ¨Ånition of mul_ is deÔ¨Åned directly in terms of Haskell‚Äôs multiplcation
operator (*) :: Ring a => a -> a -> a. This implementation in fact determines the
deÔ¨Ånition of PreMul for E: the type of the object-language function represented by mul_
must have the same type as (*).
Since the P interpreter represents any object language type as a string, we are free to
deÔ¨Åned PreMul P a as we like. However, it turns out to be convenient to also deÔ¨Åne it
simply as a.
146
Lists.
Just as the Pair class introduces pairs into the object language, the List class adds
support for object language lists. We only give the language component deÔ¨Ånition here as
the E and P instances are trivial:
class List expr where
nil_ :: expr e [a]
cons_ :: expr e (a -> [a] -> [a])
The nil_ value represents an empty object language list (of an arbitrary type), while cons_
appends an object language value of type a to an object language list of the same type.
Strings. The String language component adds literal strings to the object language.
string_ embeds any Haskell string as a DSL expression:
class String expr where
string_ :: Prelude.String -> expr e Prelude.String
Category Theoretical Abstractions. Haskell provides several abstractions from category
theory, including functors, applicatives, and monads. These features are important for
advanced interpreters which require effects at the object level. We emphasize that these
features are used in interpreters which produce effects at the object-language runtime
(like the error logger in subsection 5.4.4), rather than ‚Äúmonadic interpreters‚Äù which use
effects at the object-language compile time (like the HE compiler in section 5.5, which uses
randomness to create keys and hints).
We give the class deÔ¨Ånitions of these language features here and defer usage details
to subsection 5.4.4. The following classes introduce functionality identical to the corre-
sponding Haskell classes (without the trailing underscore).
class Lambda expr => Functor_ expr where
fmap_ :: (Functor f) => expr e ((a -> b) -> f a -> f b)