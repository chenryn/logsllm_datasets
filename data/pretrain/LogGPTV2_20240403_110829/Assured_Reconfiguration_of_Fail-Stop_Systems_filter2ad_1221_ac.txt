The formal type system requirements have been satisfied by the model presented, which supports the development of a useful class of systems. Our formal model is specified in PVS, and the proposed theorems have been mechanically verified using the PVS system. We have also formally defined the essential interfaces of an example reconfigurable system (see Section 7) and demonstrated that this example possesses the necessary properties of our architecture. The result is a proof-based assurance argument. In this section, we introduce the model and its properties.

### 6.1 Model Assumptions

Ensuring real-time properties in complex systems is generally challenging, even with a powerful specification and proving system like PVS. To facilitate the specification and proof structure we aim for, we make the following general assumptions about applicable systems:
- Each application operates synchronously and cyclically with a fixed real-time frame length.
- All applications use the same real-time frame length.
- The real-time frames for all applications are synchronized to start together.
- Each application completes one unit of work per real-time frame, which can include normal function, halting and restoring state, preparing for a transition to another specification, or initializing data such as control system gains.
- Each application commits results to stable storage at the end of each computation cycle (real-time frame).
- Dependencies between applications require only that the independent application be halted before the dependent application computes its precondition.

These assumptions impose restrictions on the system to simplify analysis. Despite these constraints, the model remains robust and applicable to a wide range of systems.

### 6.2 Application Model

During normal operation, each application reads data values produced by other applications from stable storage at the start of each computational cycle, performs its computation, and commits the results back to stable storage at the end of the cycle. If reconfiguration becomes necessary, the AFTAs (Application Fault-Tolerant Actions) cannot execute their recovery protocols immediately or independently because they depend on both their own state and the state of other system components. Therefore, each AFTA must wait for the SCRAM (System Configuration and Reconfiguration Manager) to coordinate the actions of all currently executing AFTAs.

The SCRAM communicates with applications through variables in stable storage. When reconfiguration is required, it sets the `configuration_status` variable to a sequence of values over three successive real-time frames: `halt`, `prepare`, and `initialize`. At the beginning of each real-time frame, each application reads its `configuration_status` variable and performs the required action, as shown in Table 1.

### 6.3 System Model

The SCRAM effects a system reconfiguration by reconfiguring all applications in the system using the sequence of actions outlined in Table 1. In the table, application i has failed, and the new system configuration will be \( C_t \). The SCRAM coordinates these sequences to ensure that dependencies among AFTAs are respected.

This approach differs slightly from the method used by Schlichting and Schneider. In their approach, system processing is achieved by executing a sequence of FTAs (Fault-Tolerant Actions), where the recovery for a given FTA is executed after the associated action if it is interrupted. In our approach, the recovery for a system fault-tolerant action that is interrupted consists of three parts:
- **Frame 1:** Each executing AFTA establishes a required postcondition and reaches a halted state.
- **Frame 2:** Each executing AFTA establishes the condition to transition to operation under the new state.
- **Frame 3:** Each executing AFTA establishes its precondition, ensuring all state associated with the AFTA is initialized and the application is functioning normally.

The functional aspects of the SCRAM remain constant unless changes are needed due to specific dependencies. This simplifies subsequent verification, as the SCRAM need only be verified once. However, the SCRAM must be provided with application-specific data that is created and verified separately:
- An interface to one or more applications that monitor environmental characteristics. These applications calculate the effective state of the environment.
- A table of potential configurations.
- A function to choose a new configuration, mapping the current configuration and environment state to a new configuration. This function implicitly includes information on valid transitions.
- An interface to each application, containing the configuration variable for the application.

Our formal system model includes an overarching function in the PVS specification to coordinate and control application execution. This is a mechanism present as part of the PVS structure; in practice, timing analysis and synchronization primitives would be used to achieve frame coordination. Variables in stable storage shared between the SCRAM and the relevant application ensure synchronization during reconfiguration stages, preserving data dependencies.

The SCRAM’s synchronization mechanism can be extended to support richer application interdependencies, as long as the dependencies are acyclic and time permits. Given a specification of dependencies, it could preserve them by checking each cycle to see if the independent application has completed its current configuration phase. Only after that phase is complete would the SCRAM signal the dependent application to begin its next stage. Dependencies could also be relaxed by removing unnecessary intermediate stages or allowing applications to complete multiple sequential stages without signals from the SCRAM.

Since we make no distinction between failures and other environmental changes, the status of a component is modeled as an element of the environment, and a failure is simply a change in the environment. Any environmental factor whose change could necessitate a reconfiguration can have a virtual application to monitor its status and generate a signal if the value changes.

### 6.4 Formal Definition of Reconfiguration

Using the above model, we now outline the high-level properties required for any reconfiguration. Defining these properties in an abstract sense allows us to argue that the general requirements for assured reconfiguration have been met. The model was constructed to enable proof of these properties.

In previous work, we informally defined reconfiguration of a single application as:
- The process through which a system halts operation under its current source specification \( S_i \) and begins operation under a different target specification \( S_j \).

For the multiple application case, we define reconfiguration informally as:
- The process through which a function \( f: \text{Apps} \to S \) of interacting applications \( A \) that operate according to certain specifications in \( S \) transitions to a function \( f': \text{Apps} \to S \) of interacting applications that operate according to different specifications in \( S \).

An SFTA (System Fault-Tolerant Action) is thus comprised of correct execution of all applications \( a_i \) under their respective specifications \( f(a_i) \). System reconfiguration is only necessary if \( a_i \) cannot mask the failure and must transition to an alternative specification to complete its AFTA. If only \( a_i \) must reconfigure, then for all \( a_j \neq a_i \), \( f'(a_j) = f(a_j) \).

For our system model, including application specification and system configuration types, we created properties to define “correct” reconfiguration, as shown in Table 2. To represent these properties, we include:

- **Reconfiguration Type:**
  ```pvs
  reconfiguration: TYPE = [# start_c: cycle, end_c: cycle #]
  ```
  - Execution cycle in which the reconfiguration starts and ends.

- **System Trace Type:**
  ```pvs
  sys_trace: TYPE = [# ...
  sp: reconf_spec,
  tr: [cycle -> s: sys_state] #]
  ```
  - Possible state traces.

**Table 2: Formal Properties of System Reconfiguration**

| Informal Description | Formal Property |
|----------------------|-----------------|
| **SP1:** R begins at the same time any application in the system is no longer operating under \( C_i \) and ends when all applications are operating under \( C_j \). | <pre>FORALL (s: sys_trace, r: (get_reconfigs(s))) : (EXISTS (app: (s`sp`apps)) : s`tr(r`start_c)`reconf_st(app) = interrupted) AND (FORALL (app: (s`sp`apps)) : s`tr(r`start_c-1)`reconf_st(app) = normal) AND (FORALL (app: (s`sp`apps)) : s`tr(r`end_c)`reconf_st(app) = normal) AND (FORALL (c: cycle, app: (s`sp`apps)) : r`start_c <= c AND c < r`end_c IMPLIES s`tr(c)`reconf_st(app) /= normal)</pre> |
| **SP2:** \( C_j \) is the proper choice for the target system specification at some point during R. | <pre>FORALL (s: sys_trace, r: (get_reconfigs(s))) : EXISTS (c: real_time) : r`start_c <= c AND c <= r`end_c AND s`tr(r`end_c)`svclvl = s`sp`choose(s`tr(r`start_c)`svclvl, s`env(c*cycle_time))</pre> |
| **SP3:** R takes less than or equal to \( T_{ij} \) time units. | <pre>FORALL (s: sys_trace, r: (get_reconfigs(s))) : (r`end_c - r`start_c + 1)*cycle_time <= s`sp`T(s`tr(r`start_c)`svclvl, s`tr(r`end_c)`svclvl)</pre> |
| **SP4:** The precondition for \( C_j \) is true at the time R ends. | <pre>FORALL (s: sys_trace, r: (get_reconfigs(s))) : pre?(s, r`end_c)</pre> |

```pvs
env: valid_env_trace(sp`E, sp`R) #]
— given environmental states
get_reconfigs(s: sys_trace) : set[reconfiguration]
```

This formal definition and the associated properties provide a rigorous framework for ensuring that the reconfiguration process meets the necessary criteria for correctness and reliability.