Figure 10.17. The build job you trigger must also be a parameterized build job
This feature actually has much broader applications than simply passing through the current build
parameters. You can also trigger a parameterized build job with an arbitrary set of parameters, or use
a combination of parameters that were passed to the current build, and your own additional ones. Or,
if you have a lot of parameters, you can load them from a properties file. In Figure 10.18, “Passing a
predefined parameter to a parameterized build job”, we are passing both the current build parameters
(the DATABASE variable in this case), and an additional parameter called TARGET_PLATFORM.
267
Figure 10.18. Passing a predefined parameter to a parameterized build job
10.4. Multiconfiguration Build Jobs
Multiconfiguration build jobs are an extremely powerful feature of Jenkins. A multiconfiguration build
job can be thought of as a parameterized build job that can be automatically run with all the possible
combinations of parameters that it can accept. They are particularly useful for tests, where you can test
your application using a single build job, but under a wide variety of conditions (browsers, databases,
and so forth).
10.4.1. Setting Up a Multiconfiguration Build
To create a new multiconfiguration build job, simply choose this option on the New Job page (see
Figure 10.19, “Creating a multiconfiguration build job”).
268
Figure 10.19. Creating a multiconfiguration build job
A multiconfiguration build job is just like any other build job, but with one very important additional
element: the Configuration Matrix (see Figure 10.20, “Adding an axis to a multiconfiguration build”).
This is where you define the different configurations that will be used to run your builds.
Figure 10.20. Adding an axis to a multiconfiguration build
You can define different axes of configuration options, including running the build job on different
slaves or on different JDKs, or providing your own custom properties to the build. For example, in the
build jobs discussed earlier, we might want to test our application for different databases and different
operating systems. We could define one axis defining slave machines with different operating systems
we wanted our build to run on, and another axis defining all the possible database values. Jenkins will
then run the build job for each possible database and each possible operating system.
Let’s look at the types of axis you can define.
10.4.2. Configuring a Slave Axis
The first option is to configure your build to run simultaneously on different slave machines (see
Chapter 11, Distributed Builds). Now of course, the idea of having a set of slave machines is usually that
you can run your build job on any of them. But there are cases where it makes sense to be a little more
choosy. For example, you might want your tests to run on Windows, Mac OS X, and Linux. In this case,
269
you create a new axis for your slave nodes, as shown in Figure 10.21, “Defining an axis of slave nodes”.
You can choose the nodes you want to use in two ways: by label or by individual node. Using labels
lets you identify categories of build nodes (for example, Windows machines), without tying the build
to any one machine. This is a more flexible option, and makes it easier to expand your build capacity as
required. Sometimes, however, you may really want to run a build on a specific machine. In this case,
you can use the “Individual nodes” option, and choose the machine in this list.
Figure 10.21. Defining an axis of slave nodes
If you need more flexibility, you can also use a Label Expression, which lets you define which slave
nodes should be used for builds on a particular axis using boolean expressions and logical operators to
combine labels. For example, suppose you have defined labels for slave machines based on operating
system (“windows”, “linux”) and installed databases (“oracle”, “mysql”, “db2”). To define an axis
running tests only on Windows machines installed with MySQL, you could use an expression like
windows && mysql.
We discuss working with slave nodes and distributed builds in more detail in Chapter 11, Distributed
Builds.
10.4.3. Configuring a JDK Axis
If you are deploying your application to a broad client base where you have limited control over the
target environment, you may need to test your application using different versions of Java. In cases like
this it is useful to be able to set up a JDK axis in a multiconfiguration build. When you add a JDK
axis, Jenkins will automatically propose the list of JDK versions that it knows about (see Figure 10.22,
“Defining an axis of JDK versions”). If you need to use additional JDKs, just add them to your Jenkins
configuration page.
Figure 10.22. Defining an axis of JDK versions
270
10.4.4. Custom Axis
The third type of axis lets you define different ways to run your build job, based on arbitrary variables
that you define. For example, you might provide a list of databases you need to test against, or a list
of browsers to use in your web tests. These are like parameters for a parameterized build job, except
that you provide the complete list of possible values, and rather than prompting for you to enter a value,
Jenkins will run the build with all of the values you provide (Figure 10.23, “Defining a user-defined
axis”).
Figure 10.23. Defining a user-defined axis
10.4.5. Running a Multiconfiguration Build
Once you have set up the axes, you can run your multiconfiguration build just like any other. However,
Jenkins will treat each combination of variables as a separate build job. Jenkins displays the aggregate
results in a table, where all of the combinations are shown (see Figure 10.24, “Multiconfiguration build
results”). If you click on any of the balls, Jenkins will take you to the detailed results for that particular
build.
271
Figure 10.24. Multiconfiguration build results
By default, Jenkins will run the build jobs in parallel. However there are some cases where this is not a
good idea. For example, many Java web applications use Selenium or WebDriver tests running against
a local instance of Jetty that is automatically started by the build job. Build scripts like this need to be
specially configured to be able to run in parallel on the same machine, to avoid port conflicts. Concurrent
database access during tests can be another source of problems if concurrency is not designed into the
tests. If your builds are not designed to run in parallel, you can force Jenkins to run the tests sequentially
by ticking the Run each configuration sequentially checkbox at the bottom of the Configuration Matrix
section.
By default, Jenkins will run all possible combinations of the different axes. So, in the above example, we
have three environments, two JDKs, and four databases. This results in a total of 24 builds. However, in
some cases, it may not make sense (or be possible) to run certain combinations. For example, suppose
you have a build job that runs automated web tests. If one axis contains the web browsers to be tested
(Firefox, Internet Explorer, Chrome, etc.) and another the Operating Systems (Linux, Windows, Mac
OS), it would make little sense to run Internet Explorer with Linux or Mac OS.
The Combination Filter option lets you set up rules about which combinations of variables are valid.
This field is a Groovy boolean expression that uses the names of the variables you defined for each axis.
The expression must evaluate to true for the build to execute. For example, suppose you have a build job
running web tests in different browsers on different operating systems (see Figure 10.25, “Setting up a
272
combination filter”). The tests need to run Firefox, Internet Explorer and Chrome, on Windows, Mac OS
X, and Linux. However Internet Explorer only runs on Windows, and Chrome does not run on Linux.
Figure 10.25. Setting up a combination filter
To set this up with a Combination Filter, we could use an expression like the following:
(browser=="firefox")
|| (browser=="iexplorer" && os=="windows")
|| (browser=="chrome" && os != "linux")
This would result in only the correct browser/operating system combinations being executed (see
Figure 10.26, “Build results using a combination filter”). Executed builds are displayed in the usual
colors, whereas skipped builds are shown in gray.
273
Figure 10.26. Build results using a combination filter
Another reason to use a build filter is that there are simply too many valid combinations to run in a
reasonable time. In this case, the best solution may be to upscale your build server. The second-best
solution, on the other hand, might be to only run a subset of the combinations, possibly running the
full set of combinations on a nightly basis. You can do this by using the special index variable. If you
include the expression (index%2 == 0), for example, will ensure that only one build job in two is
actually executed.
You may also want certain builds to be executed before the others, as a sanity check. For example, you
might want to run the default (and, theoretically, the most reliable) configuration for your application
first, before continuing on to more exotic combinations. To do this, you can use the “Execute touchstone
builds first” option. Here, you enter a filter value (like the one seen above) to define the first build or
builds to be executed. You can also specify if the build should proceed only if these builds are successful,
or even if they are unsuccessful. Once these builds have completed as expected, Jenkins will proceed
with the other combinations.
10.5. Generating Your Maven Build Jobs Automatically
Contributed by Evgeny Goldin
As mentioned in the previous section, the number of build jobs that your Jenkins server will host can
vary. As the number of build jobs grows, it becomes harder not only to view them in Jenkins dashboard,
but to configure them as well. Imagine what would it take to configure 20 to 50 Jenkins jobs one-by-
one! In addition, many of those jobs may have common configuration elements, such as Maven goals
or build memory settings, which results in duplicated configuration and higher maintenance overhead.
274
For example, if you decide to run mvn clean install instead of mvn clean deploy for your release
jobs and switch to alternative deployment methods, such as those provided by Artifactory plugin1, you’ll
have no choice but to visit all relevant jobs and update them manually.
Alternatively, you could take an advantage of the fact that Jenkins is a simple and straightforward tool
that keeps all of its definitions in plain files on the disk. Indeed you can update the config.xml files
of your jobs directly in the .jenkins/jobs directory where they are kept. While this approach will
work, it is still far from ideal as it involves quite a lot of manual picking and fragile replacements in
Jenkins XML files.
There is a third way to achieve the nirvana of massive job updates: generate your configuration files
automatically using some sort of definition file. The Maven Jenkins Plugin2 does exactly that, generating
config.xml files for all jobs using standard Maven definitions kept in a single pom.xml file.
10.5.1. Configuring a Job
When configuring a single job with the Maven Jenkins Plugin, you can define all the usual Jenkins
configuration elements, such as Maven goals, POM location, repository URLs, e-mail addresses, number
of days to keep the logs, and so on. The plugin tries to bring you as close to possible to Jenkins’ usual
way of configuring a job manually.
Let’s take a look on a Google Guice3 build job:
google-guice-trunk
Building Google Guice trunk.
Project Page
code.google.com/p/google-guice
false
false
jdk1.6.0
apache-maven-3
-Xmx256m -XX:MaxPermSize=128m
5
false
-e clean install
timer
1 http://wiki.jenkins-ci.org/display/JENKINS/Artifactory+Plugin
2 http://evgeny-goldin.com/wiki/Maven-jenkins-plugin
3 http://code.google.com/p/google-guice/
275
0 0 * * *
http://google-guice.googlecode.com/svn/trunk/
PI:EMAIL
This job uses a number of standard configurations such as , , and
. The code is checked out from a Subversion repository (defined in the 
element), and a cron  runs the job nightly at 00:00. Email notifications are sent to people
specified with the  element. This configuration also adds a link back to the project’s page in the
description table that is generated automatically for each job.
The generated job is displayed in your Jenkins server as illustrated in Figure 10.27, “A job generated
by the Maven Jenkins plugin”.
Figure 10.27. A job generated by the Maven Jenkins plugin
Here’s another job building the Jenkins master branch at GitHub:
jenkins-master
jdk1.6.0
5
apache-maven-3
timer
0 1 * * *
git
git://github.com/jenkinsci/jenkins.git
276
PI:EMAIL
false
This would generate the job shown in Figure 10.28, “jenkins-master job generated”.
Figure 10.28. jenkins-master job generated
The plugin’s documentation4 provides a detailed reference of all settings that can be configured.
10.5.2. Reusing Job Configuration with Inheritance
Being able to generate Jenkins jobs using centralized configuration, such as Maven POM, solves the
problem of creating and updating many jobs at once. All you has to do now is to modify the job
definitions, re-run the plugin and load definitions updated with Manage Jenkins#“Reload Configuration
from Disk”. This approach also has the advantage of making it easy to store your job configurations in
your version control system, which in turn makes it easier to keep track of changes made to the build
configurations.
But we still didn’t solve the problem of maintaining jobs that share a number of identical properties, such
as Maven goals, email recipients or code repository URL. For that, the Maven Jenkins Plugin provides
jobs inheritance, demonstrated in the following example:
google-guice-inheritance-base
true
jdk1.6.0
apache-maven-3
5
true
-B -e -U clean install
4 http://evgeny-goldin.com/wiki/Maven-jenkins-plugin#.3Cjob.3E
277
PI:EMAIL
google-guice-inheritance-trunk
google-guice-inheritance-base
http://google-guice.googlecode.com/svn/trunk/
google-guice-inheritance-3.0-rc3
google-guice-inheritance-base
http://google-guice.googlecode.com/svn/tags/3.0-rc3/
google-guice-inheritance-2.0-maven
google-guice-inheritance-base
apache-maven-2
http://google-guice.googlecode.com/svn/branches/2.0-maven/
In this configuration, google-guice-inheritance-base is an abstract parent job holding all common
properties: JDK name, Maven name, days to keep the logs, SVN update policy, Maven goals, and mail
recipients. The three following jobs are very short, merely specifying that they extend a  job
and add any missing configurations (repository URLs in this case). When generated, they inherit all of