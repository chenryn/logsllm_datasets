```sql
SELECT * FROM animals WHERE family ='Sharks';
```
命令式语言告诉计算机以特定顺序执行某些操作。可以想象一下，逐行地遍历程式码，评估条件，更新变数，并决定是否再回圈一遍。
在宣告式查询语言（如 SQL 或关系代数）中，你只需指定所需资料的模式 - 结果必须符合哪些条件，以及如何将资料转换（例如，排序，分组和集合） - 但不是如何实现这一目标。资料库系统的查询最佳化器决定使用哪些索引和哪些连线方法，以及以何种顺序执行查询的各个部分。
宣告式查询语言是迷人的，因为它通常比命令式 API 更加简洁和容易。但更重要的是，它还隐藏了资料库引擎的实现细节，这使得资料库系统可以在无需对查询做任何更改的情况下进行效能提升。
例如，在本节开头所示的命令程式码中，动物列表以特定顺序出现。如果资料库想要在后台回收未使用的磁碟空间，则可能需要移动记录，这会改变动物出现的顺序。资料库能否安全地执行，而不会中断查询？
SQL 示例不确保任何特定的顺序，因此不在意顺序是否改变。但是如果查询用命令式的程式码来写的话，那么资料库就永远不可能确定程式码是否依赖于排序。SQL 相当有限的功能性为资料库提供了更多自动最佳化的空间。
最后，宣告式语言往往适合并行执行。现在，CPU 的速度透过核心（core）的增加变得更快，而不是以比以前更高的时钟速度执行【31】。命令程式码很难在多个核心和多个机器之间并行化，因为它指定了指令必须以特定顺序执行。宣告式语言更具有并行执行的潜力，因为它们仅指定结果的模式，而不指定用于确定结果的演算法。在适当情况下，资料库可以自由使用查询语言的并行实现【32】。
### Web 上的宣告式查询
宣告式查询语言的优势不仅限于资料库。为了说明这一点，让我们在一个完全不同的环境中比较宣告式和命令式方法：一个 Web 浏览器。
假设你有一个关于海洋动物的网站。使用者当前正在检视鲨鱼页面，因此你将当前所选的导航专案 “鲨鱼” 标记为当前选中专案。
```html
        Sharks
            Great White Shark
            Tiger Shark
            Hammerhead Shark
    Whales
            Blue Whale
            Humpback Whale
            Fin Whale
```
现在想让当前所选页面的标题具有一个蓝色的背景，以便在视觉上突出显示。使用 CSS 实现起来非常简单：
```css
li.selected > p {
  background-color: blue;
}
```
这里的 CSS 选择器 `li.selected > p` 声明了我们想要应用蓝色样式的元素的模式：即其直接父元素是具有 CSS 类 `selected` 的 `` 元素的所有 `` 元素。示例中的元素 `Sharks` 匹配此模式，但 `Whales` 不匹配，因为其 `` 父元素缺少 `class="selected"`。
如果使用 XSL 而不是 CSS，你可以做类似的事情：
```xml
```
这里的 XPath 表示式 `li[@class='selected']/p` 相当于上例中的 CSS 选择器 `li.selected > p`。CSS 和 XSL 的共同之处在于，它们都是用于指定文件样式的宣告式语言。
想象一下，必须使用命令式方法的情况会是如何。在 Javascript 中，使用 **文件物件模型（DOM）** API，其结果可能如下所示：
```js
var liElements = document.getElementsByTagName("li");
for (var i = 0; i  p` 规则何时不再适用，并在选定的类被移除后立即移除蓝色背景。
* 如果你想要利用新的 API（例如 `document.getElementsByClassName("selected")` 甚至 `document.evaluate()`）来提高效能，则必须重写程式码。另一方面，浏览器供应商可以在不破坏相容性的情况下提高 CSS 和 XPath 的效能。
在 Web 浏览器中，使用宣告式 CSS 样式比使用 JavaScript 命令式地操作样式要好得多。类似地，在资料库中，使用像 SQL 这样的宣告式查询语言比使用命令式查询 API 要好得多 [^vi]。
[^vi]: IMS 和 CODASYL 都使用命令式 API。应用程式通常使用 COBOL 程式码遍历资料库中的记录，一次一条记录【2,16】。
### MapReduce查询
MapReduce 是一个由 Google 推广的程式设计模型，用于在多台机器上批次处理大规模的资料【33】。一些 NoSQL 资料储存（包括 MongoDB 和 CouchDB）支援有限形式的 MapReduce，作为在多个文件中执行只读查询的机制。
关于 MapReduce 更详细的介绍在 [第十章](ch10.md)。现在我们只简要讨论一下 MongoDB 使用的模型。
MapReduce 既不是一个宣告式的查询语言，也不是一个完全命令式的查询 API，而是处于两者之间：查询的逻辑用程式码片段来表示，这些程式码片段会被处理框架重复性呼叫。它基于 `map`（也称为 `collect`）和 `reduce`（也称为 `fold` 或 `inject`）函式，两个函式存在于许多函数语言程式设计语言中。
最好举例来解释 MapReduce 模型。假设你是一名海洋生物学家，每当你看到海洋中的动物时，你都会在资料库中新增一条观察记录。现在你想生成一个报告，说明你每月看到多少鲨鱼。
在 PostgreSQL 中，你可以像这样表述这个查询：
```sql
SELECT
  date_trunc('month', observation_timestamp) AS observation_month,
  sum(num_animals)                           AS total_animals
FROM observations
WHERE family = 'Sharks'