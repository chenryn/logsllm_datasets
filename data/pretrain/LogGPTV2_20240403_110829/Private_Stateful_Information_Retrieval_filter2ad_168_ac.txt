1, u0
l )) and Q1 = ((q0
1, u1
1), . . . , (q0
l , u1
l )) are compatible
1. u0
i = u1
i , for all i = 1, . . . , l;
2. q0
i = q1
i , for all i such that u0
i = u1
i ∈ C.
We are now ready to present our static notion of security.
Deﬁnition 3. A Stateful Information Retrieval is a Private Stateful Information Retrieval (PSIR) if for all
λ, for all n ≤ poly(λ), for all c ≤ poly(λ), for any sets H of honest players and C of corrupted players, for
any database D = (B1, . . . , Bn) of size n, and for any two compatible sequences, Q0 and Q1 with respect to
C of length l = poly(λ) and for all PPT adversary A, we have that
(cid:12)(cid:12)Pr[ExptPSIRA (λ, C, H, D, Q0) = 1] − Pr[ExptPSIRA (λ, C, H, D, Q1) = 1](cid:12)(cid:12) < negl(λ),
where experiment ExptPSIRA
is deﬁned as follows
10
ExptPSIRA (λ, c, H, C, D, Q);
View ←(cid:83)
View ← View ∪(cid:0)(cid:83)
u∈C stu
(cid:1);
u∈H∪C Trans[(stu,⊥) ← PSIR.Init((1λ, 1c), (1λ, D))];
Parse Q as Q = ((q1, u1), . . . , (ql, ul));
For i ← 1, . . . , l:
(stui , Queryi) ← PSIR.Query(qi, stui );
View ← View ∪ {Queryi};
Replyi ← PSIR.Reply(Queryi, D);
Bqi ← PSIR.Extract(Replyi, stui );
View ← View ∪ Trans[(stui ,⊥) ← PSIR.UpdateState((stui ), (D)];
If ui ∈ C then View ← View ∪ {stui};
Output A(View);
If we enforce the restriction that each user’s state is empty and that both Init and UpdateState are empty
functions, we attain a security deﬁnition for PIR where the server may non-adaptively corrupt a set of users.
In the security deﬁnition above, the set of corrupted users C is ﬁxed at the begin-
Adaptive corruption.
ning. We can also present a security deﬁnition against adaptive corruption by means of the following game
between an A and a challenger CH. The games starts with CH executing PSIR.Init for all users u and by
picking a random bit η. Then at each step i, A can decide to corrupt a new player u. The initial state
of stu of u is then given to A along with all the random coin tosses of u, and all the replies received by u
from CH. In addition, A may issue a query on behalf of user ui, in which case A outputs (q0
i , ui) and
CH executes query qη
i for user ui and gives A the view of the server and, if ui ∈ C, the updated state stui
of ui. At the end of the game, A outputs its guess η(cid:48) for η. We say that A wins if η = η(cid:48) and sequences
l , ul)) and Q1 = ((q1
Q0 = ((q0
l , ul)) are compatible with respect the set of corrupted
players C at the end of the game. A PSIR scheme is an adaptively private stateful information retrieval if for
any PPT adversary A the probability that A wins is negligibly in λ close to 1/2.
1, u1), . . . , (q0
1, u1), . . . , (q1
i , q1
It can be shown that our main construction presented in Section 6 is also adaptively private.
3.2 Oblivious Constrained Partitions
In this section, we deﬁne the concept of a Oblivious Constrained Partition OCP. An OCP consists of two
algorithms (OCP.GenerateSeed, OCP.ExtractPartition). Algorithm OCP.GenerateSeed takes integers n, k and
the constraint subset S ⊆ [n] of size k and returns the pair (K, r) such that K is the description of a
partition (P1, . . . , Pm) of [n] into m := n/k ordered parts of size k and r is such that Sr = S. Algorithm
OCP.ExtractPartition takes K and expands it into the partition (P1, . . . , Pm). We require that the construction
hides the constraint subset S used to sample (P1, . . . , Pm), in the sense that an adversary that sees the
description of a partition has no information on which of the parts of the partition was used as constraint
subset in the generation of the partition. In particular, an adversary given the seed K cannot determine
whether an element q belongs to the constraint subset or not.
Deﬁnition 4 (Constrained Partition). A Constrained Partition OCP = (OCP.GenerateSeed, OCP.ExtractPartition)
consists of the following two PPT algorithms:
• (K, r) ← OCP.GenerateSeed(1λ, 1n, S): an algorithm that takes as input security parameter λ, integers
n and constraint subset S ⊆ [n] of size k, such that k divides n, and outputs a seed K and an integer r.
• (P1, . . . , Pm) ← OCP.ExtractPartition(K): an algorithm that takes as input a seed K and outputs
subsets (P1, . . . , Pm), with m = n/k.
that satisfy the following two properties:
• Correctness. For every n, k, λ and for every S ⊆ [n] of size k, if (K, r) ← OCP.GenerateSeed(1λ, 1n, k, S)
and (P1, . . . , Pm) ← OCP.ExtractPartition(K) then (P1, . . . , Pm) is a partition of [n] into m parts each
of size k and Pr = S.
11
• Obliviousness. For all λ, all n = poly(λ) and k such that k divides n, for any two elements q0, q1 ∈ [n]
and for any PPT adversary A,
(cid:12)(cid:12)Pr[ExptOCPA (λ, n, k, q0) = 1] − Pr[ExptOCPA (λ, n, k, q1) = 1](cid:12)(cid:12) < negl(λ),
where ExptOCPA is deﬁned as follows
ExptOCPA (λ, n, k, q);
Randomly choose S(cid:48) ⊆ [n] of size k − 1;
Set S = S(cid:48) ∪ {q};
(K, r) ← OCP.GenerateSeed(1λ, 1n, S);
Output A(K);
3.3 Private Batched Sum Retrieval
A private batched sum retrieval is an algorithm that computes the sums of c subsets S1, . . . , Sc of n elements
from a ﬁeld F stored by a potentially adversarial server. In such a scheme, the server should not learn the
subsets for which the algorithm is computing the partial sums. In Section 5, we present several diﬀerent
batched sum retrieval schemes with various bandwidth and computational overheads. To analyze commu-
nication, we count the number of ﬁeld elements that are transferred by the algorithm. For computational
costs, we count the number of ﬁeld operations performed.
Deﬁnition 5. (Batched Sum Retrieval) A batched sum retrieval scheme PBSR is an algorithm that takes as
input c subsets, S1, . . . , Sc ⊆ [n] and accesses n ﬁeld elements D = (B1 . . . , Bn) ∈ Fn stored on a server and
j∈Si
pair of sequences of subsets (S1, . . . , Sc) and (S(cid:48)
outputs c sums, O1, . . . , Oc, where Oi =(cid:80)
adversary A,(cid:12)(cid:12)Pr[ExptPBSRA (λ, n, S1, . . . , Sc) = 1] − Pr[ExptPBSRA (λ, n, S(cid:48)
Bj for all i = 1, . . . , c.
1, . . . , S(cid:48)
A batched sum retrieval scheme is private if for all λ, for all n = poly(λ), for any c = poly(λ) and for any
i| for all i ∈ [c] and for any PPT
c) such that |Si| = |S(cid:48)
c) = 1](cid:12)(cid:12) < negl(λ),
1, . . . , S(cid:48)
where ExptPBSRA
is deﬁned as follows
ExptPBSRA (λ, n, S1, . . . , Sc);
χ ← Trans[(O1, . . . , Oc) ← PBSR(S1, . . . , Sc, D)];
Output A(χ);
4 Oblivious Constrained Partitions
In this section, we give a construction for OCP. We refer the reader to Section 2, for an informal description
of the algorithm. Our construction uses a family of pseudorandom functions, F = {F(K,·)}K∈{0,1}(cid:63) . For a
λ-bit key K, F(K,·) is a function from {0, 1}λ to {0, 1}λ. We assume F is a random oracle for security.
We start by describing two subroutines that will be useful in our construction. Subroutine ExtractSubset
takes as input integers u and m and seed K and outputs a sequence T consisting of m distinct values in
[u]. The subsets T is obtained by evaluating F(K,·) starting from 0 until m distinct elements are obtained.
Subroutine ExtractSubset is also used in our construction of PSIR of Section 6. Subroutine ExtractCondSubset
instead outputs a succinct description of a sequence T of m distinct elements of [u] subject to the constrain
that the r-th element is equal to a given element x. ExtractSubset and ExtractCondSubset are described
in Figure 2. We also use procedure FisherYates(1m,Kk) that samples a random permutation of [m] using
the Fisher-Yates algorithm and using F(Kk,·) as the source of randomness. We omit a description of this
standard algorithm.
We are now ready for a formal description of our construction OCP.
Construction 6 (OCP). We describe an oblivious constrained partition scheme OCP = (OCP.GenerateSeed, OCP.
ExtractPartition). Our construction OCP uses FisherYates and ExtractCondSubset as subroutines.
12
T ← ExtractSubset(K, u, 1m)
1. Initialize T to be an array of size m.
2. Initialize seen to be an empty set.
3. Initialize next ← 0.
4. While seen.size < m:
(cid:96) ← F (K, next) mod u.
If (cid:96) /∈ seen:
Insert (cid:96) into seen.
Append (cid:96) to T .
Increment next by one.
5. return T .
(T,K, v) ← ExtractCondSubset(1λ, u, 1m, r, x)
1. Generate random seed K ← {0, 1}λ.
2. Execute T ← ExtractSubset(K, u, 1m).
3. Compute v ← T [r] − x mod u.
4. Set T [l] ← T [l] − v mod u.
4. Return (T, (K, v)).
Figure 2: Description of ExtractSubset and ExtractCondSubset.
OCP.GenerateSeed. This algorithm outputs a compact description of a partition P = (P1, . . . , Pm) of [n]
into m := n/k parts of size k such that one of the parts is the constraint subset S received in input. The
algorithm sees the partition as a matrix with m rows, one for each of the m parts of the partition, and k
columns . Columns T1, . . . , Tk are constructed one at a time and the j-th partition Pj will consist of the j-th
element of each column. At the start of the algorithm, all elements of [n] are unused and elements become
used as they are assigned to a part by the algorithm when columns are constructed. As we have explained
in the informal description of the algorithm in Section 2, a column is not directly speciﬁed by its element
but only by an index to a table of sorted unused elements.
((K1, v1) . . . , (Kk, vk)) ← OCP.GenerateSeed(1λ, 1n, S)
1. Set k = |S| and write S as S = (s1, . . . , sk) with s1 < s2 < ··· < sk.
Pick random r ∈ [m] and a random permutation τ of [k].
The algorithm will guarantee that the r-th element of each column will be an element of S. Speciﬁcally,
sτ ((cid:96)) of S will appear as the r-th element of column T(cid:96), for (cid:96) = 1, . . . , k.
2. Allocate array unused of k Boolean values and initialize unused[i] = True, for i = 1, . . . , k.
The algorithm maintains the invariant that unused[i] = True if and only if si, the i-th smallest element
of S, is unused. Clearly, when the algorithm starts no element of S, actually no element of [n], has
been assigned to a part yet. Note that the algorithm only needs to keep track of which elements of S
are unused.
3. Allocate array rank of k integers and initialize rank[(cid:96)] = s(cid:96), for (cid:96) = 1, . . . , k.
The algorithm maintains the invariant that rank[(cid:96)] is equal to the number of unused elements of [n]
that are smaller than or equal to s(cid:96). Since at the beginning all elements of [n] are unused, rank[(cid:96)] is
initialized to be s(cid:96).
4. For each (cid:96) ← 1, . . . , k − 1:
The algorithm constructs the ﬁrst k − 1 columns. For eﬃciency reasons, the last column, Tk, is
constructed using an ad-hoc procedure.
(a) Set (T(cid:96), (K, v)) ← ExtractCondSubset(1λ, u := n − m · ((cid:96) − 1), 1m, r, x := rank[τ ((cid:96))]).
Column T(cid:96) does not contain explicitly speciﬁes the m elements but only their current ranks with
respect to the u := n−m·((cid:96)−1) still unused elements. Procedure ExtractCondSubset also guarantees
13
that the r-th element of the column is equal to sτ ((cid:96)) by enforcing T(cid:96)[r] to be equal to the current
rank x of sτ ((cid:96)).
Next the algorithm updates the ranks of the unused elements of S and checks if T(cid:96) as returned by
ExtractCondSubset contains unused elements of S other than sτ ((cid:96)).
(b) Initialize newRank to store the updated ranks as if T(cid:96) were to be the (cid:96)-th column.
(c) For all elements si ∈ S such that unused[i] = True:
i. Let j be the largest integer such that rank[i] ≥ T(cid:96)[j].
ii. If rank[i] = T(cid:96)[j] and i (cid:54)= (cid:96) then go to Step 4a.
In this case, T(cid:96)[j] is equal to the current rank, rank[i], of si and which means that the column
contains an unused element of S other than (cid:96). The algorithm thus restart by selecting another
candidate column for T(cid:96).
Note that j − 1 elements of T(cid:96) that are smaller than rank[i] will be used and thus the rank of
si is adjusted accordingly.
iii. Set newRank[i] ← rank[i] − (j − 1).
(d) Set K(cid:96) ← K and v(cid:96) ← v, set unused[τ ((cid:96))] = False and update rank ← newRank.
T(cid:96) can be used as the (cid:96)-th column subset.
5. Randomly select Kk ← {0, 1}λ, Tk ← FisherYates(1m,Kk) and set vk ← Tk[r] − rank[τ (k)].
6. Output ((K1, v1) . . . , (Kk, vk)).
OCP.ExtractPartition. This algorithm takes the succinct representation, ((K1, v1), . . . , (Kk, vk)) of a parti-
tion of [n] into m parts of size k and outputs the explicit partition.
(P1, . . . , Pm) ← OCP.ExtractPartition(n, (K1, v1), . . . , (Kk, vk))
1. Initialize P1, . . . , Pm to be empty arrays.
2. Initialize T ← [n] as an ordered set.
3. For i ← 1, . . . , k − 1:
(a) Execute Ti ← ExtractSubset(|T|, m,Ki).
(b) For each j ← 1, . . . , m:
Append the (Ti[j] − vi)-th smallest item in T to Pj.
(c) For each j ← 1, . . . , m:
Remove (Ti[j] − vi)-th smallest item from T .
4. Execute Tk ← FisherYates(n/k,Kk).
5. For each j ← 1, . . . , m:
Retrieve the (Tk[j] − vk)-th smallest item in T and append it to Pj.
6. Output (P1, . . . , Pm).
We now prove the eﬃciency and security of our OCP construction. Our proofs will use the Chernoﬀ
Bounds that are reviewed in Appendix B.
Lemma 7. For m = ω(log n), an invocation of ExtractSubset by OCP.GenerateSeed performs O(m) PRF
evaluations except with probability negligible in n.
14
Proof. At each iteration of the loop for (cid:96) that starts at Step 4, there are exactly u = n − m · ((cid:96) − 1)
unused elements and this value is passed to ExtractCondSubset at Step 4a and, eventually, to ExtractSubset
to generate a subset of size m.
Note that u ≥ 2m in all invocations and therefore each F evaluations has probability at least 1/2 of
being distinct from all previous evaluations. We consider p := 2(1 + 2) · m independent evaluations of F,
X1, . . . , Xp such that Xi = 1 if and only if the i-th evaluation is distinct from all previous evaluations. We
set X = X1 + . . . + Xp as the total number of successes and observe that µ = E[X] ≥ p/2 = (1 + 2)· m. Note
ExtractSubset only requires m successes to terminate and thus the probability that ExtractSubset performs
more than p evaluations is at most Pr[X ≤ m] ≤ Pr [X ≤ (1 − )µ]. Assuming that  is small enough so that
(1 + 2)(1 − ) ≥ 1 and by using Chernoﬀ bounds, we obtain that this probability is negl(n).
Lemma 8. A subset output by ExtractCondSubset intersects the constraint subset at exactly one element
witg probability at least 1/e.
Proof. Fix any (cid:96) ∈ [k − 1] for which we are focusing our analysis. After ﬁxing the r-th element of T(cid:96) in
Step 4a, we can view the remaining m − 1 elements as being randomly drawn from the set of the remaining
u − 1 unused elements. The sampling is considered successful if we avoid the remaining k − (cid:96) elements of
the constraint subset S. As a result, the probability that T(cid:96) intersects only at the r-th element is
(cid:18)
(cid:19)
1 − k − (cid:96)
(cid:18)
·
u − 1
1 − k − (cid:96)
≥
u − m
(cid:18)
(cid:18)
(cid:19)
1 − k − (cid:96)