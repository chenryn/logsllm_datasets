            conn = new TCPConnection(ch, socket, bufIn, bufOut);
            // read input messages
            handleMessages(conn, true);
            break;
        case TransportConstants.MultiplexProtocol:
            ...
        default:
            // protocol not understood, send nack and close socket
            out.writeByte(TransportConstants.ProtocolNack);
            out.flush();
            break;
        }
因为上面抓包中protocal是0x4b(75)，对应的第二个case分支，所以我就把其他代码删了，在这个case里面，可以看到前面先发送了ack,包含host，port和一个ack标志。  
然后下面它又重新封装了一个TCPConnection对象传入handleMessage函数中。
    void handleMessages(Connection conn, boolean persistent) {
        int port = getEndpoint().getPort();
        try {
            DataInputStream in = new DataInputStream(conn.getInputStream());
            do {
                int op = in.read();     // transport op
                ...
                switch (op) {
                case TransportConstants.Call:
                    // service incoming RMI call
                    RemoteCall call = new StreamRemoteCall(conn);
                    if (serviceCall(call) == false)
                        return;
                    break;
                case TransportConstants.Ping:
                    // send ack for ping
                    DataOutputStream out = new DataOutputStream(conn.getOutputStream());
                    out.writeByte(TransportConstants.PingAck);
                    conn.releaseOutputStream();
                    break;
                case TransportConstants.DGCAck:
                    DGCAckHandler.received(UID.read(in));
                    break;
                default:
                    throw new IOException("unknown transport op " + op);
                }
            } while (persistent);
        } 
        ...
    }
这个函数有点类似与一个请求分发器，读取客户端请求的操作码，然后进入对应分支，这里的请求是Call，所以进入第一个分支。先是创建了一个StreamRemoteCall对象，还记得这个对象在前面哪提到过吗，就是在客户端请求的lookup方法里面的调用的newCall函数里面也创建这个对象。然后继续跟进
    public boolean serviceCall(final RemoteCall call) {
        try {
            /* read object id */
            final Remote impl;
            ObjID id;
        ...
            Transport transport = id.equals(dgcID) ? null : this;
            Target target = ObjectTable.getTarget(new ObjectEndpoint(id, transport));
        ...
            final Dispatcher disp = target.getDispatcher();
            target.incrementCallCount();
            try {
                /* call the dispatcher */
                transportLog.log(Log.VERBOSE, "call dispatcher");
                final AccessControlContext acc = target.getAccessControlContext();
                ClassLoader ccl = target.getContextClassLoader();
                ClassLoader savedCcl = Thread.currentThread().getContextClassLoader();
                try {
                    setContextClassLoader(ccl);
                    currentTransport.set(this);
                    try {
                        java.security.AccessController.doPrivileged(
                            new java.security.PrivilegedExceptionAction() {
                            public Void run() throws IOException {
                                checkAcceptPermission(acc);
                                disp.dispatch(impl, call);
                                return null;
                            }
                        }, acc);
                    } catch (java.security.PrivilegedActionException pae) {
                        throw (IOException) pae.getException();
                    }
                } finally {
                    setContextClassLoader(savedCcl);
                    currentTransport.set(null);
                }
            } catch (IOException ex) {
                transportLog.log(Log.BRIEF,"exception thrown by dispatcher: ", ex);
                return false;
            } finally {
                target.decrementCallCount();
            }
        } catch (RemoteException e) {
            ...
        }
        return true;
    }
前面我们在创建代理对象的时候每个stub最后都被封装到了Target对象中最后保存到了静态对象ObjectTable.objTable中。这个函数里面开始根据id，transport获取了RegistryImpl_Stub对应的target，然后下面获取dispatcher，实际上就是UnicastServerRef对象。下面设置了一些值和异常处理，然后调用了disp.dispatch(impl,
call)，impl是从target中获取的，call是前面传递的函数参数。
    public void dispatch(Remote obj, RemoteCall call) throws IOException {
            int num;
            long op;
            try {
                // read remote call header
                ObjectInput in;e
                try {
                    in = call.getInputStream();
                    num = in.readInt();
                    if (num >= 0) {
                        if (skel != null) {
                            oldDispatch(obj, call, num);
                            return;
                        } else {
                            throw new UnmarshalException("skeleton class not found but required " + "for client version");
                        }
                    }
                    op = in.readLong();
                } catch (Exception readEx) {
                    throw new UnmarshalException("error unmarshalling call header",
                                                 readEx);
                }
                ....
首先读取了call数据包中的操作码，判断客户端是查询对象还是绑定远程对象或者解绑等操作。这了显然是skel是不为空的，它是RegistryImpl_Skel对象，所以继续调用oldDispatch()。
    public void oldDispatch(Remote obj, RemoteCall call, int op)
            throws IOException
    {
        long hash;              // hash for matching stub with skeleton
        try {
            // read remote call header
            ObjectInput in;
            try {
                in = call.getInputStream();
                try {
                    Class clazz = Class.forName("sun.rmi.transport.DGCImpl_Skel");
                    if (clazz.isAssignableFrom(skel.getClass())) {
                        ((MarshalInputStream)in).useCodebaseOnly();
                    }
                } catch (ClassNotFoundException ignore) { }
                hash = in.readLong();
            } catch (Exception readEx) {
                throw new UnmarshalException("error unmarshalling call header",
                                              readEx);
            }
            logCall(obj, skel.getOperations()[op]);
            unmarshalCustomCallData(in);
            // dispatch to skeleton for remote object
            skel.dispatch(obj, call, op, hash);
        } catch (Throwable e) {
            ...
        } finally {
            call.releaseInputStream(); // in case skeleton doesn't
            call.releaseOutputStream();
        }
    }
这个函数里面先做了一些判断skel等，然后打印日志等。后面又调用了skel.dispatch(obj, call, op, hash)。
解释一下各个参数值，obj就是前面从target中获取的RegistryImpl_Stub,call是前面创建的客户端连接，op是前面读取的操作数，hash是读取的序列化对象的hash值，用于在反序列化前判断。
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
        if (var4 != 4905912898345647071L) {
            throw new SkeletonMismatchException("interface hash mismatch");
        } else {
            RegistryImpl var6 = (RegistryImpl)var1;
            String var7;
            Remote var8;
            ObjectInput var10;
            ObjectInput var11;
            switch(var3) {
            case 0:
                ...
            case 1:
                ...
            case 2:
                try {
                    var10 = var2.getInputStream();
                    var7 = (String)var10.readObject();
                } catch (IOException var89) {
                    throw new UnmarshalException("error unmarshalling arguments", var89);
                } catch (ClassNotFoundException var90) {
                    throw new UnmarshalException("error unmarshalling arguments", var90);
                } finally {
                    var2.releaseInputStream();
                }
                var8 = var6.lookup(var7);
                try {
                    ObjectOutput var9 = var2.getResultStream(true);
                    var9.writeObject(var8);
                    break;
                } catch (IOException var88) {
                    throw new MarshalException("error marshalling return", var88);
                }
            case 3:
                ...
            case 4:
                ...
            default:
                throw new UnmarshalException("invalid method number");
            }
        }
    }
这里才是真正获取到远程对象的地方，这个类没有源码，只有class文件反编译的代码，也不能调试，所以代码不太好看。因为查询对象主要是第二个case分支，所以我就把其他代码删了。看case2的代码逻辑，它先从输入流中读取了一个对象，其实就是客户端序列化写入的远程对象名字的字符串，var6就是RegistryImpl，然后调用它的lookup从bindings中获取到远程对象。然后下面写入输出流中，最后回到上面的oldDispatch中的finnally语句中将输出流中的数据发送出去。
看到这大家应该就大概明白了客户端是怎么获取到远程对象的了，但有人细心调试后可能会发现一点猫腻，我们服务端绑定到bindings的是一个远程对象，我们这读取的到的也是远程对象，最后客户端获取到的对象怎么变成了它的代理对象。
我们知道我们服务端在创建远程对象的过程中还会调用Util.createProxy()创建了一个代理对象，这个代理对象最后被封装到了target对象中，然后存入ObjectTable.objTable静态变量中。我们继续跟进上面的writeObject方法，看看里面是怎么写入对象的。  
可以看到这里它又调用了readObject0(),我们继续跟进。  
最后我们发现当它执行到这里调用了replaceObject(obj)，然后返回了其对应的代理对象。我们猜测这个方法可能被重写了，我们可以看到下面调试框中显示的当前对象this实际上是ConnectionOutputStream，我们跟进这个对象中找到这个方法。  
最后我们在它的子类中找到了这个重写的方法，发现它这里使用远程对象在ObjectTable中查找了其对应的代理对象，这我们就知道了为什么我们客户端获取到的是代理对象。
#### 客户端执行代理对象
上面说了客户端获取远程对象时客户端和服务端的行为，下面继续说一下客户端在获取到代理对象后执行函数时的代码。  
上面我们所有的交互都是在和注册中心1099端口交互，现在我们获取到了远程对象的ip和端口，如果我们知道远程对象的ip和端口我们也可以不访问注册中心，直接访问远程对象。  
我们前面说了远程对象的创建过程，知道它执行的invoke方法在RemoteObjectInvocationHandler类中，我们可以跟进看一下。
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
    {
        if (! Proxy.isProxyClass(proxy.getClass())) {
            throw new IllegalArgumentException("not a proxy");
        }
        if (Proxy.getInvocationHandler(proxy) != this) {
            throw new IllegalArgumentException("handler mismatch");
        }
        if (method.getDeclaringClass() == Object.class) {
            return invokeObjectMethod(proxy, method, args);
        } else if ("finalize".equals(method.getName()) && method.getParameterCount() == 0 &&
            !allowFinalizeInvocation) {
            return null; // ignore
        } else {
            return invokeRemoteMethod(proxy, method, args);
        }
    }
可以看到前面做了一些判断，然后判断调用的方法是否存在Object对象中(如hashcode，toString等)，这些方法可以就在本地调用。其他的方法就调用invokeRemoteMethod(proxy,
method,
args)实现远程调用。跟进invokeRemoteMethod()方法可以看到它主要调用了UnicastRef.invoke()方法，继续跟进。
    public Object invoke(Remote obj,Method method,Object[] params,long opnum) throws Exception
    {
        ...
        Connection conn = ref.getChannel().newConnection();
        RemoteCall call = null;
        boolean reuse = true;
        boolean alreadyFreed = false;
        try {
          ...
            // create call context
            call = new StreamRemoteCall(conn, ref.getObjID(), -1, opnum);
            // marshal parameters
            try {
                ObjectOutput out = call.getOutputStream();
                marshalCustomCallData(out);
                Class[] types = method.getParameterTypes();
                for (int i = 0; i  rtype = method.getReturnType();
                if (rtype == void.class)
                    return null;
                ObjectInput in = call.getInputStream();
                Object returnValue = unmarshalValue(rtype, in);
                alreadyFreed = true;
                clientRefLog.log(Log.BRIEF, "free connection (reuse = true)");
                ref.getChannel().free(conn, true);
                return returnValue;
            } 
            ...
    }
在这个函数中使用JRMP协议调用远程对象的方法，协议交互过程和lookup类似，先创建一个连接，自定义握手过程，然后将param通过marshalValue()方法序列化写入输出流，然后调用call.executeCall()将参数发送给服务端，然后判断返回值，如果是void就直接返回null，本次调用结束，否则调用unmarshalValue()获取返回值最后释放连接返回结果。
服务端的过程和前面lookup大致相同，只是在UnicastServerRef.dispatch()方法调用的过程中，判断的是否存在skel，如果存在，则调用oldDispatch，这就是上面lookup的逻辑，当方法调用时是远程对象的不存在其对应的以_Skel结尾的对象，所以这里判断结果为假，然后继续向下执行。下面就是方法的调用过程，基本上也就是上面客户端的逆过程，就不再分析代码了。
#### 总结
总的来说，RMI整个过程主要涉及的知识点有Socket和动态代理。在服务端每个远程对象(RemoteObject)都会监听一个端口，同时创建一个代理对象(Stub)。注册中心可以说是一个特殊的远程对象。因为其他远程对象的端口实在创建过程中系统随机分配的，客户端只知道注册中心的端口，然后先请求注册中心，他们通过JRMP协议交互进行交互，获取对应远程对象的代理对象。当客户端获取到代理对象后就不会再和注册中心交互了，因为获取到的代理对象中包括了远程对象的监听端口等属性值，所以后面就可以通过代理对象访问远程对象最后将执行结果返回给客户端。在这个过程中的数据处理主要以玩序列化方式传输，所以可能导致反序列化漏洞。
对于客户端而言反序列化漏洞的利用点主要有下面几个地方
  * StreamRemoteCall.executeCall()中异常读取(line:245)
  * RegistryImpl_Stub.lookup()读取服务端返回的代理对象(line:104)
  * 客户端读取服务端执行结果返回值(UnicastRef.unmarshalValue:302)
对于服务端而言可能产生反序列化漏洞的利用点主要有下面几个地方
  * 服务端读取客户端(查询/绑定/解绑)对象字符串(RegistryImpl_Skel.dispatch)
  * 服务端读取客户端远程方法的参数值(UnicastRef.unmarshalValue:302)
#### 参考链接
[JAVA安全基础（四）-- RMI机制](https://xz.aliyun.com/t/9261)