### 0x00 前言
前段时间在测试某商城系统时,发现使用了某通用CMS，本着学习的态度，于是下载下来对源码进行分析。  
因为自己懒得搭环境，喜欢实战环境，所以直接找官方Demo，因为漏洞提交至今未修复，为了不涉及某商城系统，故对截图进行了打码。
### 0x01 漏洞分析
**远程代码执行**
打开源码包，看到这个，struts2架构，远古时期，包都不用解，一看就知道ST2-16。  
不搭环境，带上工具，直接官网Demo  
**任意文件上传**  
struts2架构，相关页面关联信息都写在了xml里面，找起来方便  
我们看看上传页面的前端文件upload.jsp
文件对appType进行判断，继而进行处理，对于我们来讲，appType在这里没有实质性的作用，只是选择上传的类型目录而已。
来看下处理上传的文件，在文件FileUploadAction.class中
    public void save(){
    String folderPath = Static.APACHE_CONTEXT_PATH + Static.FILE_PATH;
    Date now = new Date();
    String nowStr = DateUtil.date2Str(now, "yyyyMMdd");
    now = DateUtil.str2Date(nowStr, "yyyyMMdd");
    folderPath = folderPath + "/" + this.appType + "/" + nowStr;
    logger.info("relativePath:" + folderPath);
    String idStr = "";
    String imgPath = "";
    String fileName = "";
    boolean isOk = true;
    if ((this.fileupload != null) && (this.fileupload.length > 0))
    {
      logger.info("fileupload.length:" + this.fileupload.length);
      File savedir = new File(folderPath);
      if (!savedir.exists()) {
        savedir.mkdirs();
      }
      for (int i = 0; i  0))
然后取后缀，到这里为止，文件都没有对上传的内容进行任何判断,后缀也是一样，直接读取拼接，不做判断。
加之在文件中也未发现任何的登录权限验证，所以造成了前端无限制任意文件上传。
    String postfix = fileName.substring(fileName.lastIndexOf(".") + 1);
    String fileNewName = id + "." + postfix;
下面就是存储过程了，最后返回上传结果。附上传成功并getshell截图。  
**存储型XSS**  
这个系统好像通篇没有过滤XSS的脚本，不知道有没有过滤文件反正我没有看到.可以在商品收货地址或商品展示处等地方插入XSS。  
因为通篇XSS，所以就挑一个来说  
在jsp文件edit_SysUser.jsp中，这个是用于修改个人信息的，定位源码SysUserAction.class  
下面是两个重要函数  
首先edit()从jsp页面获取到登录用户的信息，对信息进行修改,save()函数接收修改的信息，对用户信息进行存储更新，在文件里面，我们没有看到任何的过滤函数存在。
    省略无关代码......
    public String edit(){
    SysUser loginMan = getSessionUserInfo();
    if (this.sysUser == null) {
      this.sysUser = new SysUser();
    }
    String id = this.sysUser.getId();
    if (StringUtils.isBlank(id))
    {
      super.initModel(true, this.sysUser, loginMan);
    }
    else
    {
      this.sysUser = ((SysUser)this.sysUserService.getModel(id));
      super.initModel(false, this.sysUser, loginMan);
    }
    this.sysRoleList = this.sysRoleService.select(null);
    if (this.sysRoleList == null) {
      this.sysRoleList = new ArrayList();
    } else {
      for (int i = 0; i 点击" + url + "", "text/html;charset=utf-8");
    msg.setRecipient(Message.RecipientType.TO, to);
    Transport.send(msg);
直接构造和修改邮箱，即可修改密码。  
[http://www.xxx.com/sendEmail.do?customer.code=135xxxxxxx6&customer.email=PI:EMAIL](http://www.xxx.com/sendEmail.do?customer.code=135xxxxxxx6&customer.email=PI:EMAIL)
### 0x02 最后
分析出了这几个漏洞和看了官网后，越发觉得这家公司为什么还能活着？  
因为代码通用，影响旗下所有电商系统。  
吐槽：一个软件卖到9000+，3年不升级。还有谁？