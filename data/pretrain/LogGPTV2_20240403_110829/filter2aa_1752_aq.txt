### 6.5.2 延时、抖动和截止期限

实时系统中的操作必须在指定的时间内完成，以确保系统的可靠性和响应性。延时是指从事件发生到系统作出响应之间的时间间隔。抖动是指多次执行同一任务时，响应时间的变化范围。截止期限则是指任务必须完成的最晚时间点。

- **延时**：系统需要在尽可能短的时间内对事件作出反应。
- **抖动**：系统的响应时间应该尽量一致，避免大的波动。
- **截止期限**：每个任务都有一个固定的完成时间，超过这个时间则视为失败。

例如，如果一个实时系统要求在100毫秒内响应某个事件，那么系统必须在此时间内完成所有必要的处理。如果无法满足这一要求，可能会导致系统性能下降或功能失效。

### 6.5.3 Linux 的实时支持

Linux 提供了对 IEEE Std 1003.1b-1993（即 POSIX.1b）标准的支持，该标准定义了实时操作系统的接口。通过这些接口，用户可以创建和管理实时进程，并设置它们的优先级和调度策略。

- **POSIX 接口**：提供了丰富的实时编程接口，如定时器、信号量等。
- **实时调度**：允许用户设置进程的调度策略和优先级，以确保关键任务能够及时得到处理。
- **I/O 操作**：实时进程可以进行高优先级的 I/O 操作，从而减少等待时间。

Linux 内核还提供了一些机制来优化实时性能，如内存锁定和 CPU 亲和度设置。

### 6.5.4 Linux 调度策略和优先级

Linux 支持多种调度策略，包括 SCHED_FIFO、SCHED_RR 和 SCHED_OTHER。这些策略决定了进程如何被调度以及它们的优先级。

- **SCHED_FIFO**：先进先出策略，适用于需要严格时间保证的任务。
- **SCHED_RR**：轮转策略，适用于多个实时任务共享 CPU 时间的情况。
- **SCHED_OTHER**：普通调度策略，适用于非实时任务。

#### 6.5.4.1 “先进先出”策略

SCHED_FIFO 是一种基于优先级的调度策略。高优先级的 FIFO 进程会一直运行，直到它自愿放弃 CPU 或进入阻塞状态。

- **抢占**：只有更高优先级的 FIFO 进程才能抢占当前正在运行的进程。
- **自愿放弃**：FIFO 进程可以通过调用 `sched_yield()` 来自愿放弃 CPU。

#### 6.5.4.2 轮转策略

SCHED_RR 与 SCHED_FIFO 类似，但增加了时间片的概念。每个 RR 进程都有一个固定的时间片，当时间片用完后，进程会被挂起并重新排队。

- **时间片**：RR 进程在用完时间片后会被挂起，等待下一次调度。
- **公平性**：RR 策略确保了多个同优先级的进程可以公平地共享 CPU 时间。

#### 6.5.4.3 普通调度策略

SCHED_OTHER 是 Linux 默认的调度策略，适用于大多数非实时任务。它的优先级范围是 -20 到 19，其中 -20 是最高优先级。

- **nice 值**：通过调整 nice 值，可以改变进程的优先级。

#### 6.5.4.4 批调度策略

SCHED_BATCH 是一种特殊的调度策略，适用于需要大量 CPU 时间的批处理任务。这种策略会降低进程的交互性，但提高了整体吞吐量。

- **低交互性**：批处理任务不会频繁切换上下文，从而减少了系统开销。

#### 6.5.4.5 设置 Linux 调度策略

可以通过 `sched_getscheduler()` 和 `sched_setscheduler()` 函数来获取和设置进程的调度策略。

```c
#include <sched.h>

struct sched_param {
    int sched_priority;
};

int sched_getscheduler(pid_t pid);
int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);

// 示例代码
int main() {
    int policy;
    policy = sched_getscheduler(0);
    switch (policy) {
        case SCHED_OTHER:
            printf("Policy is normal\n");
            break;
        case SCHED_RR:
            printf("Policy is round-robin\n");
            break;
        case SCHED_FIFO:
            printf("Policy is first-in, first-out\n");
            break;
        case -1:
            perror("sched_getscheduler");
            break;
        default:
            fprintf(stderr, "Unknown policy!\n");
    }

    struct sched_param sp = { .sched_priority = 1 };
    int ret;
    ret = sched_setscheduler(0, SCHED_RR, &sp);
    if (ret == -1) {
        perror("sched_setscheduler");
        return 1;
    }

    return 0;
}
```

### 6.5.5 设置调度参数

`sched_getparam()` 和 `sched_setparam()` 函数用于获取和设置进程的调度参数。

```c
#include <sched.h>

struct sched_param {
    int sched_priority;
};

int sched_getparam(pid_t pid, struct sched_param *param);
int sched_setparam(pid_t pid, const struct sched_param *param);

// 示例代码
int main() {
    struct sched_param sp;
    int ret;

    ret = sched_getparam(0, &sp);
    if (ret == -1) {
        perror("sched_getparam");
        return 1;
    }
    printf("Our priority is %d\n", sp.sched_priority);

    sp.sched_priority = 1;
    ret = sched_setparam(0, &sp);
    if (ret == -1) {
        perror("sched_setparam");
        return 1;
    }

    return 0;
}
```

### 6.5.5.1 错误码

在使用上述函数时，可能会遇到以下错误码：

- **EFAULT**：参数指向无效内存。
- **EINVAL**：参数无效。
- **EPERM**：权限不足。
- **ESRCH**：指定的进程不存在。

### 6.5.5.2 确定有效优先级的范围

可以通过 `sched_get_priority_min()` 和 `sched_get_priority_max()` 函数来确定特定调度策略的有效优先级范围。

```c
#include <sched.h>

int sched_get_priority_min(int policy);
int sched_get_priority_max(int policy);

// 示例代码
int main() {
    int min, max;
    min = sched_get_priority_min(SCHED_RR);
    if (min == -1) {
        perror("sched_get_priority_min");
        return 1;
    }
    max = sched_get_priority_max(SCHED_RR);
    if (max == -1) {
        perror("sched_get_priority_max");
        return 1;
    }
    printf("SCHED_RR priority range is %d - %d\n", min, max);

    return 0;
}
```

### 6.5.6 `sched_rr_get_interval()`

`sched_rr_get_interval()` 函数用于获取 SCHED_RR 进程的时间片长度。

```c
#include <sched.h>
#include <time.h>

struct timespec {
    time_t tv_sec;  // 秒
    long tv_nsec;   // 纳秒
};

int sched_rr_get_interval(pid_t pid, struct timespec *interval);

// 示例代码
int main() {
    struct timespec tp;
    int ret;

    ret = sched_rr_get_interval(0, &tp);
    if (ret == -1) {
        perror("sched_rr_get_interval");
        return 1;
    }
    printf("Our time quantum is %.2lf milliseconds\n",
           (tp.tv_sec * 1000.0f) + (tp.tv_nsec / 1000000.0f));

    return 0;
}
```

### 6.5.6.1 错误码

在使用 `sched_rr_get_interval()` 时，可能会遇到以下错误码：

- **EFAULT**：参数指向无效内存。
- **EINVAL**：参数无效。
- **ESRCH**：指定的进程不存在。

### 6.5.7 关于实时进程的一些提醒

- **资源管理**：实时进程需要谨慎管理资源，避免因资源争用导致延迟。
- **优先级设置**：合理设置实时进程的优先级，确保关键任务能够及时处理。
- **CPU 亲和度**：通过设置 CPU 亲和度，可以将实时进程绑定到特定的 CPU 核心，提高性能。
- **内存锁定**：通过锁定内存页，可以防止实时进程因页面置换而产生额外的延迟。

### 6.5.8 确定性

实时系统的一个重要特性是确定性，即系统能够在规定的时间内完成特定任务。为了实现这一点，需要考虑以下几个方面：

- **数据故障预测**：通过预分配和锁定内存，减少由于内存分页引起的延迟。
- **CPU 亲和度**：将实时进程绑定到特定的 CPU 核心，减少上下文切换带来的开销。
- **I/O 优化**：通过高优先级 I/O 操作，减少 I/O 等待时间。

通过这些措施，可以显著提高实时系统的性能和可靠性。