除了`/create`和`/start` API 之外，Docker CLI 还使用了`/attach`和`/wait`等 API 来满足我们的要求。在本食谱中，我们将创建一个`alpine`容器，并运行一个简单的`ls`命令来演示通过 Docker 引擎 API 启动容器所涉及的步骤。
# 怎么做...
1.  首先从`alpine`映像创建一个容器，如下图所示:
![](img/053d6cfd-701d-4591-a880-ff80ba04d059.png)
这里，我们使用`curl`命令的`-d`选项将我们的容器配置作为 JSON 数据传递给 Docker 引擎。显然，映像是`alpine`，我们选择在容器启动时运行的命令是`ls`。此外，我们还请求 Docker 引擎将`STDERR`和`STDOUT`附加到该容器，以便检索`ls`命令的输出。
HTTP 头响应代码`201 Created`表示我们的容器创建成功。显然，来自 Docker 引擎的响应也是一个 JSON 负载。有效载荷的标识字段包含容器标识，即`f9fd4b2e2040d4dea32deb527889bf2fb95b351d8316a4c74bfb6e2e38c9b499`。我们将使用容器标识的简称`f9fd4b2e2040`，对该容器执行进一步的操作。
2.  由于我们想要在屏幕上捕获`ls`命令的输出，让我们使用`/attach`应用编程接口连接到容器:
![](img/6f365776-8d8f-48bd-8cb5-b127f686c012.png)
如果使用`stderr`、`stdout`和`stream`参数调用`/attach`应用编程接口，将会阻塞客户端(即`curl`，所以我们在后台运行`curl`命令。
3.  现在，继续使用`/start` API 启动容器，如下所示:
![](img/c668077d-bab5-40ef-8d41-7b141dae1d41.png)
很酷，不是吗？我们用 Docker 引擎 API 模拟了`docker container run`命令。
# 它是如何工作的...
在这个配方中，我们使用了三个 Docker 引擎 API 来成功启动一个容器。在后端，Docker 引擎接收来自客户端的 API 调用，并代表客户端为`/container/create` API 调用创建容器，然后为`/containers/attach` API 调用阻塞 HTTP 流，最后为`/containers/start` API 调用在容器的名称空间内运行`ls`命令。
# 还有更多...
以下是处理容器生命周期的 API 列表:
![](img/ae7184e5-cdf9-4483-8438-2316ceff02e8.png)
# 请参见
每个应用编程接口端点可以有不同的输入来控制操作。有关更多详细信息，请访问 Docker 网站上的文档，网址为[https://docs.docker.com/engine/api/latest/.](https://docs.docker.com/engine/api/latest/)
# 使用 API 执行容器操作
在前面的配方中，我们启动了一个容器，并使用`/create`、`/attach`和`/start`应用编程接口在容器中执行了一个命令。在这个配方中，我们对容器执行了一些操作。
# 怎么做...
在本食谱中，我们将了解一些容器操作:
1.  要列出容器，请使用以下应用编程接口:
![](img/d4afda8a-0b1c-4fd9-9c26-dbaae860f508.png)
这里有几个例子:
*   以下是如何获得所有运行的容器:
```
        $ curl --unix-socket /var/run/docker.sock \
           http:/containers/json 
```
*   以下是如何获取所有正在运行的容器，包括停止的容器:
```
        $ curl --unix-socket /var/run/docker.sock \
           http:/containers/json?all=1
```
2.  要检查容器，请使用以下应用编程接口:
![](img/8da69c60-64f2-4d5f-9117-43a9a1b34c1a.png)
这里有一个检查容器的例子`591ab8ac2650`:
```
    $ curl --unix-socket /var/run/docker.sock \ 
        http:/containers/591ab8ac2650/json  
```
3.  要获取容器内运行的进程列表，请使用以下应用编程接口:
![](img/2f4b99a6-8a6f-4141-ba04-11d7e5470ae6.png)
下面是一个在`591ab8ac2650`容器中运行的进程的例子:
```
        $ curl --unix-socket /var/run/docker.sock \ 
        http:/containers/591ab8ac2650/top
```
4.  要获取容器的资源使用统计数据，请使用以下应用编程接口:
![](img/4107ee6a-06a4-4480-962d-f3ee125b618e.png)
下面是获取`591ab8ac2650`容器的资源使用统计的一个例子:
```
        $ curl --unix-socket /var/run/docker.sock \ 
        http:/containers/591ab8ac2650/stats  
```
默认情况下，该应用编程接口流式传输资源使用统计数据。但是，您可以使用`stream`参数禁用流，如下所示:
```
        $ curl --unix-socket /var/run/docker.sock \ 
        http:/containers/591ab8ac2650/stats?stream=0  
```
# 它是如何工作的...
当我们使用这个配方中描述的 API 与 Docker 引擎连接时，Docker 引擎会反过来从它的数据源收集相关信息并将其发送回客户端。
# 请参见
每个应用编程接口端点可以有不同的输入来控制操作。有关更多详细信息，请访问 Docker 网站上的文档，网址为[https://docs.docker.com/engine/api/latest/.](https://docs.docker.com/engine/api/latest/)
# 探索 Docker 远程应用编程接口客户端库
在前面的食谱中，我们探索了 Docker 提供的 API，以连接和执行 Docker 守护进程上的操作。Docker 还为`python`和`go`语言提供了软件开发工具包。
在这个食谱中，让我们用几个例子来探索`python` SDK。
# 准备好
*   确保安装`python3`。
*   `ubuntu 16.04`可能没有`pip3`，所以使用以下命令安装`pip3`:
```
        $ sudo apt-get -y install python3-pip  
```
# 怎么做...
1.  让我们首先使用`pip3`为`python`安装 docker 软件包:
```
        $ sudo pip3 install docker  
```
2.  现在，让我们启动`python3`并导入`docker`和`json`包，如下所示:
![](img/08d2c04e-b287-482f-963e-09357b85289a.png)
3.  导入`docker`和`json`包后，让我们使用`docker.DockerClient`通过 Unix 套接字`unix://var/run/docker.sock`连接到 Docker 守护程序，如下所示:
![](img/12d24f62-e64f-47cc-8157-cbfa4cd77203.png)
这里，`base_url`是 Docker 守护进程的连接地址。
4.  继续使用以下代码打印 Docker 守护程序版本:
![](img/9f4e8afc-0d88-43f5-af41-7f64a5cfd15f.png)
这里`client.version()`以`json`格式从 Docker 服务器获取版本详细信息，然后我们使用`json.dump()`以漂亮的格式打印获取的`json`数据。
5.  让我们再编写一点代码，使用`client.containers.list()`列出所有正在运行的容器，如下所示:
![](img/693df16d-9a64-4d9a-b767-ccd4f7914c5f.png)
如您所见，我们有两个运行容器:`458b8add4a`和`62c814650f`。
6.  最后，让我们使用`client.containers.run()`启动一个容器，如下图所示:
![](img/91b848c8-341d-4c18-bb0e-87c27b5e5b71.png)
# 它是如何工作的...
在前面的所有情况下，Docker 模块会将我们的请求翻译到适当的 Docker 引擎 API，将其包装为 RESTful 消息，并将其发送给 Docker 守护程序。
# 请参见
在[https://docker-py.readthedocs.io/en/stable/.](https://docker-py.readthedocs.io/en/stable/)你会发现一个清晰的 Python SDK 文档
# 为远程连接配置 Docker 守护程序
在前面的食谱中，我们使用 Unix 套接字(`/var/run/docker.sock`)与 Docker 引擎进行对话。如前所述，默认情况下`dockerd`监听 Unix 套接字`/var/run/docker.sock`。然而，对 Unix 套接字的访问仅限于本地系统。但是在一些用例中，您必须远程访问 Docker 守护程序。您可以通过配置 Docker 守护程序使用`tcp`套接字监听远程连接来实现这一点。在本食谱中，我们将为远程应用编程接口连接配置我们的 Docker 守护程序。
# 怎么做...
1.  让我们首先使用`systemctl`命令定位 Docker 服务的 Systemd 单元文件，如下所示:
```
         $ sudo systemctl docker status | grep Loaded
    Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)
```
显然，`/lib/systemd/system/docker.service`是 Docker 服务的单元文件。以下是默认 Docker 服务单元文件的内容:
![](img/e1e6ca78-2e5b-4dd7-9a52-d6ccb9102c2b.png)
可以看到，单元文件中的`ExecStart`被配置为以`fd://`为监听套接字启动`dockerd` (Docker 守护进程)。
2.  继续配置`dockerd`以接受来自远程系统的连接，方法是将`-H tcp://0.0.0.0:2375`附加到单元文件中的`ExecStart`行，如下所示:
```
        ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375
```
这里，IP 地址`0.0.0.0`是将服务绑定到 Docker 主机的所有 IPv4 地址的通配符地址。端口`2375`是用于明文(未加密)通信的约定。
3.  修改了 Docker 服务的 Docker 服务单元文件后，我们需要手动重新加载更改，如下所示:
```
        $ sudo systemctl daemon-reload    