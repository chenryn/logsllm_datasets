Finally, RICH [7] is a compiler extension which enables
programs to monitor their execution and detect potential
attacks exploiting integer vulnerabilities. Although RICH is
very lightweight, it does not handle cases of pointer aliasing
and produces false positives in cases where developers inten-
Figure 4: Runtime overhead for the applications of Sec-
tion 5.1.1 (normalized over native execution).
95%. We ran all binaries natively, and measured user time
with the time utility.
For grep, we search for strings that match a complex reg-
ular expression in a 1.2GB ﬁle. For wget, we download a
1GB ﬁle over a 1Gbit/s link from a remote server. For zshx,
we execute a series of shell commands, and for tcpdump
we examine packets from a 5.8GB pcap ﬁle. For the web
servers, Cherokee was conﬁgured for IPv4 only, while for
Nginx all conﬁgurations options were left to their default set-
ting. We measured performance using Apache’s ab bench-
marking utility and static HTML ﬁles.
Figure 4 shows the results of our evaluation. IntFlow in-
curs high overhead in applications that involve a large num-
ber of integer operations, such as grep.4 We also notice
high performance deviation for wget, wwwx, and tcpdump,
as they are I/O bound. Although in such applications the
overhead is rather prohibitive, and cancels out the beneﬁts
of using a static mechanism, in other cases, such as for the
cher and nginx servers, the overhead is within an accept-
able 20%. Thus, it could be the case that IntFlow might be
used as a runtime defense for certain types of applications,
i.e., I/O-bound. As each of IntFlow’s modes of operation
targets diﬀerent ﬂows and can be ﬁne-tuned by developers,
customization can result in diﬀerent overheads, as diﬀerent
ﬂows dominate the execution of diﬀerent applications. This
is the reason we observe diﬀerent slowdowns per mode: de-
pending on whether the dominating ﬂows involve sensitive
calls (e.g., web servers), the sensitive mode will be slower or
faster than the other two modes, and so on.
6. RELATED WORK
During the past years, as the protection mechanisms against
buﬀer overﬂows became more mature, great focus was placed
upon eﬃciently dealing with integer overﬂows. This sec-
tion summarizes the main characteristics of the several ap-
proaches that have been followed so far for addressing integer
overﬂows and outlines the connection between the current
work and existing research on the ﬁeld.
4Based on our experience with the SPEC CPU2000 bench-
marks, the overhead on benchmarks with very frequent in-
teger operations, such as gzip, is in the range of ∼x10,
prohibiting IntFlow from being used as a generic runtime
detection mechanism for such applications.
 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2grepwgetwwwxzshxtcpdumpchernginxSlowdown (normalized)WhitelistingBlacklistingSensitivetionally abuse the undeﬁned behavior of C/C++ standards,
both of which are basic components of IntFlow’s design.
6.2 Dynamic & Symbolic Execution
Dynamic Execution tools use runtime checks to prevent
unwanted program behavior. IOC [10] uses dynamic anal-
ysis to detect the occurrence of overﬂows in C/C++ pro-
grams. The tool performs a compiler-time transformation to
add inline numerical error checks and then relies on a run-
time handler to prevent any unwanted behavior. The instru-
mentation transformations operate on the Abstract Syntax
Tree (AST) in the Clang front-end, after the parsing, type-
checking and implicit type conversion stages.
IOC checks
for overﬂows both in shifting and arithmetic operations and
makes a clear distinction between well-deﬁned and unde-
ﬁned behaviors, that is, it does not consider all overﬂows
malicious. Our tool adopts this perspective and comple-
ments IOC in the sense that it addresses the issue of high
false positives by integrating static instruction ﬂow tracking
to the performed analysis.
Symbolic Execution tools provide low false positives but
can’t easily achieve full coverage. They usually use dynamic
test generation [11] to detect violations. SmartFuzz [17] gen-
erates a set of constraints deﬁning unwanted behavior and
determines whether some input could trigger an unwanted
execution path. This tool does not require source code and
makes use of the Valgrind framework for its symbolic exe-
cution and scoring. Coverage and bug-seeking queries are
explored in a generational search, whilst queries from the
symbolic traces are solved generating a set of new test cases.
Thus, a single symbolic execution feeds the constraint solver
with many queries, which themselves generate new test cases
etc. KLEE [8] uses symbolic execution to automatically gen-
erate tests that achieve high coverage for large-scale pro-
grams but it is not focused on integer errors, thus it does
not achieve as good results against integer overﬂows as other
tools that targeted towards integer operations.
7. DISCUSSION
7.1 Static information ﬂow tracking
A core component of IntFlow is llvm-deps [18], which,
as an implementation of static information ﬂow tracking, is
expected to provide good source code coverage with low run-
time overhead. However, we should note that llvm-deps
suﬀers from inherent inaccuracy issues, largely due to the
limitations of its points-to analysis [15] and due to its data
ﬂow analysis mechanism. These limitations are ampliﬁed
when one wishes to extend the scope of the technique by
performing inter-procedural analysis. Fortunately, as our ex-
perience revealed, sources and sinks typically reside within
a single function. This can be viewed as an instance of
the classic trade-oﬀ between accuracy and performance: for
cases where accuracy has the maximum priority, we may
choose to incorporate dynamic IFT [13] and attempt to re-
duce any increased runtime overhead using techniques that
combine static and dynamic analysis [12, 9].
7.2
IntFlow for Runtime Detection
While the primary use case of IntFlow is to help users ana-
lyze existing code during the development phase by reducing
the amount of false positives reported by previous tools, an-
other use case is to deploy it as a runtime defense against
zero-day vulnerabilities. For this purpose, the two main is-
sues that must be addressed are i) the increased runtime
overhead due to the inserted checks, and ii) any remaining
false positives after IntFlow’s analysis.
The main source of runtime overhead, as shown in Sec-
tion 5.2, can be attributed to IOC’s checks, as it replaces
each arithmetic operation with at least three basic blocks
to perform the checking operation. Given the signiﬁcance
of the problem, there have been many previous proposals
for implementing fast and eﬃcient checking operations [22],
which IntFlow could adopt to improve performance.
As shown in Section 5, IntFlow was able to identify a large
portion of the developer-intended violations in the programs
under examination, but still missed some cases. In order to
provide as broad coverage of false positives as possible, Int-
Flow supports manual labeling of false positives. Developers
can dedicate a separate oﬀ-line phase to apply IntFlow using
a trusted input set over their application, and pinpoint the
locations in which IntFlow falsely ﬂags a benign operation as
malicious. A more suitable solution for this use case would
be the incorporation of dynamic IFT, which though would
impose high runtime overhead, as already discussed.
7.3 Quality of the Produced Reports
Another advantage of IntFlow’s design is the fact that
its three diﬀerent modes of operation oﬀer an estimation
of how critical a particular bug is. Errors reported by the
sensitive mode have the highest risk, as they involve sensitive
operations and are more likely to be exploitable. Likewise, in
black-listing mode, IntFlow examines ﬂows originating from
untrusted locations and thus the produced reports are of
moderate priority. Finally, the whitelisting mode is likely to
generate the largest amount of warnings. Thus, if developers
wish to examine as few locations as possible, e.g., due to
limited available time for performing code auditing, they
can ﬁrst examine the reports generated by IntFlow in the
sensitive mode, and if time permits then use the blacklisting
mode, and so on.
Throughout our evaluation, we noticed that many of the
reports generated by IntFlow follow a particular pattern,
mainly due to code reuse from the side of developers. We
believe that using simple pattern matching and lexical anal-
ysis of the source code, in combination with the reports of
IntFlow, could further increase the accuracy with which Int-
Flow classiﬁes errors as malicious or not—the more the oc-
currences of a particular error, the more likely for this error
to be developer-intended. We will explore this approach as
part of our future work.
8. CONCLUSION
We have presented IntFlow, a tool that identiﬁes a broad
range of arithmetic errors and diﬀerentiates between crit-
ical errors and developer-intended constructs that rely on
undeﬁned behavior, which do not constitute potential vul-
nerabilities.
IntFlow uses static information ﬂow tracking
to associate ﬂows of interest with erroneous statements, and
greatly reduces false positives without removing checks that
would prevent the detection of critical errors. The results
of our evaluation demonstrate the eﬀectiveness of IntFlow
in distinguishing between the two types of errors, allowing
developers and security analysts to detect and ﬁx critical er-
rors in an eﬃcient manner, without the need to sift through
numerous non-critical developer-intended violations. The
signiﬁcant reduction in false positives that IntFlow achieves
over IOC, which has been integrated into Clang since ver-
sion 3.3, demonstrates the need for eﬀective and accurate
automated arithmetic error detection.
Acknowledgments
This work was supported by DARPA and the US Air Force
through contracts DARPA-FA8750-10-2-0253 and AFRL-
FA8650-10-C-7024, respectively, with additional support from
Intel Corp. Any opinions, ﬁndings, conclusions, or recom-
mendations expressed herein are those of the authors, and do
not necessarily reﬂect those of the US Government, DARPA,
the Air Force, or Intel.
9. REFERENCES
[1] Clang C language family frontend for LLVM.
http://clang.llvm.org/.
[2] CVE - CVE-2006-3824. http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2006-3824.
[3] CWE - 2011 CWE/SANS top 25 most dangerous
software errors. http://cwe.mitre.org/top25/.
[4] CWE - Common Weakness Enumeration.
http://cwe.mitre.org/.
[5] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers:
Principles, Techniques, and Tools. Addison-Wesley
Longman Publishing Co., Inc., 1986.
[6] A. Benameur, N. S. Evans, and M. C. Elder.
Minestrone: Testing the soup. In Proceedings of the
6th Workshop on Cyber Security Experimentation and
Test (CSET), 2013.
[7] D. Brumley, T. Chiueh, R. Johnson, H. Lin, and
D. Song. RICH: Automatically Protecting Against
Integer-Based Vulnerabilities. In Proceedings of the
Network and Distributed System Security Symposium
(NDSS), 2007.
[8] C. Cadar, D. Dunbar, and D. Engler. KLEE:
Unassisted and automatic generation of high-coverage
tests for complex systems programs. In Proceedings of
the 8th USENIX Conference on Operating Systems
Design and Implementation (OSDI), 2008.
[9] W. Chang, B. Streiﬀ, and C. Lin. Eﬃcient and
extensible security enforcement using dynamic data
ﬂow analysis. Proceedings of the 15th ACM conference
on Computer and Communications Security (CCS),
2008.
[10] W. Dietz, P. Li, J. Regehr, and V. Adve.
Understanding integer overﬂow in C/C++. In
Proceedings of the 34th International Conference on
Software Engineering (ICSE), 2012.
[11] P. Godefroid, N. Klarlund, and K. Sen. DART:
Directed automated random testing. In Proceedings of
the ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), 2005.
[12] K. Jee, G. Portokalidis, V. P. Kemerlis, S. Ghosh,
D. I. August, and A. D. Keromytis. A general
approach for eﬃciently accelerating software-based
dynamic data ﬂow tracking on commodity hardware.
In Proceedings of the 19th Network and Distributed
System Security Symposium (NDSS), 2012.
[13] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D.
Keromytis. libdft: practical dynamic data ﬂow
tracking for commodity systems. In Proceedings of the
8th ACM SIGPLAN/SIGOPS International
Conference on Virtual Execution Environments
(VEE), 2012.
[14] C. Lattner and V. Adve. LLVM: A Compilation
Framework for Lifelong Program Analysis &
Transformation. In Proceedings of the international
symposium on Code generation and optimization
(CGO), 2004.
[15] C. Lattner, A. Lenharth, and V. Adve. Making
context-sensitive points-to analysis with heap cloning
practical for the real world. In Proceedings of the ACM
SIGPLAN Conference on Programming Language
Design and Implementation (PLDI), 2007.
[16] F. Long, S. Sidiroglou-Douskos, D. Kim, and
M. Rinard. Sound input ﬁlter generation for integer
overﬂow errors. In Proceedings of the 41st ACM
SIGPLAN-SIGACT Symposium on Principles of
Programming Languages (POPL), 2014.
[17] D. Molnar, X. C. Li, and D. A. Wagner. Dynamic test
generation to ﬁnd integer bugs in x86 binary linux
programs. In Proceedings of the 18th USENIX Security
Symposium, 2009.
[18] S. Moore. thinkmoore/llvm-deps.
https://github.com/thinkmoore/llvm-deps.
(Visited on 06/07/2014).
[19] E. Revfy. Inside the size overﬂow plugin.
http://forums.grsecurity.net/viewtopic.
php?f=7&t=3043.
[20] T. Wang, C. Song, and W. Lee. Diagnosis and
emergency patch generation for integer overﬂow
exploits. In Proceedings of the 11th Conference on
Detection of Intrusions and Malware and Vulnerability
Assessment (DIMVA), 2014.
[21] T. Wang, T. Wei, Z. Lin, and W. Zou. Intscope:
Automatically detecting integer overﬂow vulnerability
in x86 binary using symbolic execution. In Proceedings
of the Network and Distributed System Security
Symposium (NDSS), 2009.
[22] X. Wang. Fast integer overﬂow detection.
http://kqueue.org/blog/2012/03/16/
fast-integer-overflow-detection/.
[23] X. Wang, H. Chen, Z. Jia, N. Zeldovich, and M. F.
Kaashoek. Improving integer security for systems with
KINT. In Proceedings of the 10th USENIX Conference
on Operating Systems Design and Implementation
(OSDI), 2012.
[24] X. Wang, N. Zeldovich, M. F. Kaashoek, and
A. Solar-Lezama. Towards optimization-safe systems.
In Proceedings of the 24th ACM Symposium on
Operating Systems Principles (SOSP), 2013.
[25] C. Zhang, T. Wang, T. Wei, Y. Chen, and W. Zou.
Intpatch: Automatically ﬁx
integer-overﬂow-to-buﬀer-overﬂow vulnerability at
compile-time. In Proceedings of the 15th European
Symposium on Research in Computer Security
(ESORICS), 2010.