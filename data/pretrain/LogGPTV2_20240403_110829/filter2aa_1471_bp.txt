_DEBUG_EVENT
DbgCreat
eProcessSt
ateChange
CREATE_PROCES
S_DEBUG_EVENT
lpImageName is always NULL, 
and fUnicode is always TRUE.
DbgExitTh
readState
Change
EXIT_THREAD_D
EBUG_EVENT
DbgExitPr
ocessState
Change
EXIT_PROCESS_D
EBUG_EVENT
DbgExcep
tionStateC
hange
DbgBreak
pointState
Change
DbgSingle
StepStateC
hange
OUTPUT_DEBUG_
STRING_EVENT, 
RIP_EVENT, or
EXCEPTION_DEB
UG_EVENT
Determination is based on the 
Exception Code (which can be 
DBG_PRINTEXCEPTION_C /
DBG_PRINTEXCEPTION_WIDE
_C,
DBG_RIPEXCEPTION, or 
something else).
DbgLoad
DllStateC
hange
LOAD_DLL_DEBU
G_EVENT
fUnicode is always TRUE
DbgUnloa
dDllState
Change
UNLOAD_DLL_D
EBUG_EVENT
EXPERIMENT: Viewing debugger objects
Although you’ve been using WinDbg to do kernel-mode
debugging, you can also use it to debug user-mode programs. Go
ahead and try starting Notepad.exe with the debugger attached
using these steps:
1. 
Run WinDbg, and then click File, Open Executable.
2. 
Navigate to the \Windows\System32\ directory and choose
Notepad.exe.
3. 
You’re not going to do any debugging, so simply ignore
whatever might come up. You can type g in the command
window to instruct WinDbg to continue executing Notepad.
Now run Process Explorer and be sure the lower pane is enabled
and configured to show open handles. (Select View, Lower Pane
View, and then Handles.) You also want to look at unnamed
handles, so select View, Show Unnamed Handles And
Mappings.
Next, click the Windbg.exe (or EngHost.exe, if you’re using the
WinDbg Preview) process and look at its handle table. You should
see an open, unnamed handle to a debug object. (You can organize
the table by Type to find this entry more readily.) You should see
something like the following:
You can try right-clicking the handle and closing it. Notepad
should disappear, and the following message should appear in
WinDbg:
Click here to view code image
ERROR: WaitForEvent failed, NTSTATUS 0xC0000354
This usually indicates that the debuggee has been
killed out from underneath the debugger.
You can use .tlist to see if the debuggee still exists.
In fact, if you look at the description for the NTSTATUS code
given, you will find the text: “An attempt to do an operation on a
debug port failed because the port is in the process of being
deleted,” which is exactly what you’ve done by closing the handle.
As you can see, the native DbgUi interface doesn’t do much work to
support the framework except for this abstraction. The most complicated task
it does is the conversion between native and Win32 debugger structures. This
involves several additional changes to the structures.
Windows subsystem support
The final component responsible for allowing debuggers such as Microsoft
Visual Studio or WinDbg to debug user-mode applications is in
KernelBase.dll. It provides the documented Windows APIs. Apart from this
trivial conversion of one function name to another, there is one important
management job that this side of the debugging infrastructure is responsible
for: managing the duplicated file and thread handles.
Recall that each time a load DLL event is sent, a handle to the image file is
duplicated by the kernel and handed off in the event structure, as is the case
with the handle to the process executable during the create process event.
During each wait call, KernelBase.dll checks whether this is an event that
results in a new duplicated process and/or thread handles from the kernel (the
two create events). If so, it allocates a structure in which it stores the process
ID, thread ID, and the thread and/or process handle associated with the event.
This structure is linked into the first DbgSsReserved array index in the TEB,
where we mentioned the debug object handle is stored. Likewise,
KernelBase.dll also checks for exit events. When it detects such an event, it
“marks” the handles in the data structure.
Once the debugger is finished using the handles and performs the continue
call, KernelBase.dll parses these structures, looks for any handles whose
threads have exited, and closes the handles for the debugger. Otherwise,
those threads and processes would never exit because there would always be
open handles to them if the debugger were running.
Packaged applications
Starting with Windows 8, there was a need for some APIs that run on
different kind of devices, from a mobile phone, up to an Xbox and to a fully-
fledged personal computer. Windows was indeed starting to be designed even
for new device types, which use different platforms and CPU architectures
(ARM is a good example). A new platform-agnostic application architecture,
Windows Runtime (also known as “WinRT”) was first introduced in
Windows 8. WinRT supported development in C++, JavaScript, and
managed languages (C#, VB.Net, and so on), was based on COM, and
supported natively both x86, AMD64, and ARM processors. Universal
Windows Platform (UWP) is the evolution of WinRT. It has been designed to
overcome some limitations of WinRT and it is built on the top of it. UWP
applications no longer need to indicate which OS version has been developed
for in their manifest, but instead they target one or more device families.
UWP provides Universal Device Family APIs, which are guaranteed to be
present in all device families, and Extension APIs, which are device specific.
A developer can target one device type, adding the extension SDK in its
manifest; furthermore, she can conditionally test the presence of an API at
runtime and adapt the app’s behavior accordingly. In this way, a UWP app
running on a smartphone may start behaving the way it would if it were
running on a PC when the phone is connected to a desktop computer or a
suitable docking station.
UWP provides multiple services to its apps:
■    Adaptive controls and input—the graphical elements respond to the
size and DPI of the screen by adjusting their layout and scale.
Furthermore, the input handling is abstracted to the underlying app.
This means that a UWP app works well on different screens and with
different kinds of input devices, like touch, a pen, a mouse, keyboard,
or an Xbox controller
■    One centralized store for every UWP app, which provides a seamless
install, uninstall, and upgrade experience
■    A unified design system, called Fluent (integrated in Visual Studio)
■    A sandbox environment, which is called AppContainer
AppContainers were originally designed for WinRT and are still used for
UWP applications. We already covered the security aspects of
AppContainers in Chapter 7 of Part 1.
To properly execute and manage UWP applications, a new application
model has been built in Windows, which is internally called AppModel and
stands for “Modern Application Model.” The Modern Application Model has
evolved and has been changed multiple times during each release of the OS.
In this book, we analyze the Windows 10 Modern Application Model.
Multiple components are part of the new model and cooperate to correctly
manage the states of the packaged application and its background activities in
an energy-efficient manner.
■    Host Activity Manager (HAM) The Host activity manager is a new
component, introduced in Windows 10, which replaces and integrates
many of the old components that control the life (and the states) of a
UWP application (Process Lifetime Manager, Foreground Manager,
Resource Policy, and Resource Manager). The Host Activity Manager
lives in the Background Task Infrastructure service
(BrokerInfrastructure), not to be confused with the Background
Broker Infrastructure component, and works deeply tied to the
Process State Manager. It is implemented in two different libraries,
which represent the client (Rmclient.dll) and server
(PsmServiceExtHost.dll) interface.
■    Process State Manager (PSM) PSM has been partly replaced by
HAM and is considered part of the latter (actually PSM became a
HAM client). It maintains and stores the state of each host of the
packaged application. It is implemented in the same service of the
HAM (BrokerInfrastructure), but in a different DLL: Psmsrv.dll.
■    Application Activation Manager (AAM) AAM is the component
responsible in the different kinds and types of activation of a
packaged application. It is implemented in the ActivationManager.dll
library, which lives in the User Manager service. Application
Activation Manager is a HAM client.
■    View Manager (VM) VM detects and manages UWP user interface
events and activities and talks with HAM to keep the UI application
in the foreground and in a nonsuspended state. Furthermore, VM
helps HAM in detecting when a UWP application goes into
background state. View Manager is implemented in the
CoreUiComponents.dll .Net managed library, which depends on the
Modern Execution Manager client interface (ExecModelClient.dll) to
properly register with HAM. Both libraries live in the User Manager
service, which runs in a Sihost process (the service needs to proper
manage UI events)
■    Background Broker Infrastructure (BI) BI manages the
applications background tasks, their execution policies, and events.
The core server is implemented mainly in the bisrv.dll library,
manages the events that the brokers generate, and evaluates the
policies used to decide whether to run a background task. The
Background Broker Infrastructure lives in the BrokerInfrastructure
service and, at the time of this writing, is not used for Centennial
applications.
There are some other minor components that compose the new application
model that we have not mentioned here and are beyond the scope of this
book.
With the goal of being able to run even standard Win32 applications on
secure devices like Windows 10 S, and to enable the conversion of old
application to the new model, Microsoft has designed the Desktop Bridge
(internally called Centennial). The bridge is available to developers through
Visual Studio or the Desktop App Converter. Running a Win32 application
in an AppContainer, even if possible, is not recommended, simply because
the standard Win32 applications are designed to access a wider system API
surface, which is much reduced in AppContainers.
UWP applications
We already covered an introduction of UWP applications and described the
security environment in which they run in Chapter 7 of Part 1. To better
understand the concepts expressed in this chapter, it is useful to define some
basic properties of the modern UWP applications. Windows 8 introduced
significant new properties for processes:
■    Package identity
■    Application identity
■    AppContainer
■    Modern UI
We have already extensively analyzed the AppContainer (see Chapter 7 in
Part 1). When the user downloads a modern UWP application, the
application usually came encapsulated in an AppX package. A package can
contain different applications that are published by the same author and are
linked together. A package identity is a logical construct that uniquely
defines a package. It is composed of five parts: name, version, architecture,
resource id, and publisher. The package identity can be represented in two
ways: by using a Package Full Name (formerly known as Package Moniker),
which is a string composed of all the single parts of the package identity,
concatenated by an underscore character; or by using a Package Family
name, which is another string containing the package name and publisher.
The publisher is represented in both cases by using a Base32-encoded string
of the full publisher name. In the UWP world, the terms “Package ID” and
“Package full name” are equivalent. For example, the Adobe Photoshop
package is distributed with the following full name:
AdobeSystemsIncorporated.AdobePhotoshopExpress_2.6.235.0_neutral_s
plit.scale-125_ynb6jyjzte8ga, where
■    AdobeSystemsIncorporated.AdobePhotoshopExpress is the name of
the package.
■    2.6.235.0 is the version.
■    neutral is the targeting architecture.
■    split_scale is the resource id.
■    ynb6jyjzte8ga is the base32 encoding (Crockford’s variant, which
excludes the letters i, l, u, and o to avoid confusion with digits) of the
publisher.
Its package family name is the simpler
“AdobeSystemsIncorporated.AdobePhotoshopExpress_ynb6jyjzte8ga”
string.
Every application that composes the package is represented by an
application identity. An application identity uniquely identifies the collection
of windows, processes, shortcuts, icons, and functionality that form a single
user-facing program, regardless of its actual implementation (so this means
that in the UWP world, a single application can be composed of different
processes that are still part of the same application identity). The application
identity is represented by a simple string (in the UWP world, called Package
Relative Application ID, often abbreviated as PRAID). The latter is always
combined with the package family name to compose the Application User
Model ID (often abbreviated as AUMID). For example, the Windows
modern Start menu application has the following AUMID:
Microsoft.Windows.ShellExperienceHost_cw5n1h2txyewy!App, where the
App part is the PRAID.
Both the package full name and the application identity are located in the
WIN://SYSAPPID Security attribute of the token that describes the modern
application security context. For an extensive description of the security
environment in which the UWP applications run, refer to Chapter 7 in Part 1.
Centennial applications
Starting from Windows 10, the new application model became compatible
with standard Win32 applications. The only procedure that the developer
needs to do is to run the application installer program with a special
Microsoft tool called Desktop App Converter. The Desktop App Converter
launches the installer under a sandboxed server Silo (internally called Argon
Container) and intercepts all the file system and registry I/O that is needed to
create the application package, storing all its files in VFS (virtualized file
system) private folders. Entirely describing the Desktop App Converter
application is outside the scope of this book. You can find more details of
Windows Containers and Silos in Chapter 3 of Part 1.
The Centennial runtime, unlike UWP applications, does not create a
sandbox where Centennial processes are run, but only applies a thin
virtualization layer on the top of them. As result, compared to standard
Win32 programs, Centennial applications don’t have lower security
capabilities, nor do they run with a lower integrity-level token. A Centennial
application can even be launched under an administrative account. This kind
of application runs in application silos (internally called Helium Container),
which, with the goal of providing State separation while maintaining
compatibility, provides two forms of “jails”: Registry Redirection and Virtual
File System (VFS). Figure 8-42 shows an example of a Centennial
application: Kali Linux.
Figure 8-42 Kali Linux distributed on the Windows Store is a typical
example of Centennial application.
At package activation, the system applies registry redirection to the
application and merges the main system hives with the Centennial
Application registry hives. Each Centennial application can include three
different registry hives when installed in the user workstation: registry.dat,
user.dat, and (optionally) userclasses.dat. The registry files generated by the
Desktop Convert represent “immutable” hives, which are written at
installation time and should not change. At application startup, the
Centennial runtime merges the immutable hives with the real system registry
hives (actually, the Centennial runtime executes a “detokenizing” procedure
because each value stored in the hive contains relative values).
The registry merging and virtualization services are provided by the
Virtual Registry Namespace Filter driver (WscVReg), which is integrated in
the NT kernel (Configuration Manager). At package activation time, the user
mode AppInfo service communicates with the VRegDriver device with the
goal of merging and redirecting the registry activity of the Centennial
applications. In this model, if the app tries to read a registry value that is
present in the virtualized hives, the I/O is actually redirected to the package
hives. A write operation to this kind of value is not permitted. If the value
does not already exist in the virtualized hive, it is created in the real hive
without any kind of redirection at all. A different kind of redirection is
instead applied to the entire HKEY_CURRENT_USER root key. In this key,
each new subkey or value is stored only in the package hive that is stored in
the following path: C:\ProgramData\Packages\\
\SystemAppData\Helium\Cache. Table 8-34 shows a summary of
the Registry virtualization applied to Centennial applications:
Table 8-34 Registry virtualization applied to Centennial applications
Operation
Result
Read or 
enumeration 
of 
HKEY_LOC
AL_MACHI
NE\Software
The operation returns a dynamic merge of the package 
hives with the local system counterpart. Registry keys 
and values that exist in the package hives always have 
precedence with respect to keys and values that already 
exist in the local system.
All writes to 
HKEY_CU
RRENT_US
ER
Redirected to the Centennial package virtualized hive.
All writes 
inside the 
package
Writes to HKEY_LOCAL_MACHINE\Software are not 
allowed if a registry value exists in one of the package 
hives.
All writes 
outside the 
package
Writes to HKEY_LOCAL_MACHINE\Software are 
allowed as long as the value does not already exist in 
one of the package hives.
When the Centennial runtime sets up the Silo application container, it
walks all the file and directories located into the VFS folder of the package.
This procedure is part of the Centennial Virtual File System configuration
that the package activation provides. The Centennial runtime includes a list
of mapping for each folder located in the VFS directory, as shown in Table
8-35.
Table 8-35 List of system folders that are virtualized for Centennial apps
Folder Name
Redirection Target
Architectu
re
SystemX86
C:\Windows\SysWOW64
32-bit/64-
bit
System
C:\Windows\System32
32-bit/64-
bit
SystemX64