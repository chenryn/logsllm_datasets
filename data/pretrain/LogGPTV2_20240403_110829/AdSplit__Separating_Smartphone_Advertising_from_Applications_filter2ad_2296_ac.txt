(Alternatively we believe we have a better solution, de-
scribed next in Section 7.)
Our stub library was straightforward to implement.
We manually implemented a handful of public methods
from the AdMob library, whereafter we constructed a
standard Android IPC message to send to the AdSplit
advertising service. It worked.
While it would be tempting to use automated tools to
translate an entire API in one go, any commercial im-
plementation would require signiﬁcant testing and, in-
evitably, there would be corner cases where the auto-
mated tool didn’t quite do the right thing. Instead, since
there are a fairly small number of advertising vendors,
we imagine that each one would best be supported by
hand-written code, perhaps even supplied directly by the
vendor in collaboration with an app store that did the
rewriting.
Unfortunately, there are a number of signiﬁcant prob-
lems that would stand in the way of an automated rewrit-
ing architecture becoming the preferred method of de-
ploying AdSplit.
Figure 5: Layout query time vs view depth of host activ-
ity (average of 10K runs).
tivities, two separate processes, and so forth. The total
memory cost in this conﬁguration, with AdMob running
in AdSplit and no other WebView, is about 20.2 MB,
roughly a 4 MB increase relative to AdMob running lo-
cally. Furthermore, when a separate WebView is running
in the host activity, there is no longer an opportunity to
share the cost of that WebView. The total memory use
in this scenario is 24.4 MB, or roughly an 8 MB increase
relative to hosting AdMob locally. We expect we would
see similar overheads with other advertising libraries.
The CPU overhead is same as the overhead of addi-
tional Dalvik virtual machine on Android. In fact, since
the advertisement activities run in the background, they
run with lower priority and can be safely killed without
any issues.
As discussed in Section 4.4, we allow advertisement
service to query layout information (type, position and
transparency of views) about the host activity to prevent
UI rearrangement attacks. In order to evaluate the over-
head of layout information queries we experimented with
diﬀerent view conﬁgurations for host activities and var-
ied the depth of AdView in the view hierarchy. Fig. 5
shows how the query overhead varies with view depth.
The additional depth adds a small (1 ms) overhead.
These queries will run infrequently—only once per click.
In summary, while AdSplit does introduce a marginal
amount of additional memory and CPU cost, these will
have negligible impact in practice.
6 Separation for legacy apps
The amount of permissions requested by mobile apps and
lack of information about how they are used has been a
1234Depth of AdView in layout.0.51.01.52.02.53.03.54.04.55.05.56.06.57.07.58.08.59.09.5time(ms)4.185.246.517.64Figure 6: Automated separation of advertisement libraries from their host applications.
Ad installation. When advertisements exist as distinct
applications in the Android ecosystem, they will need to
be installed somehow. We’re hesitant to give the host ap-
plication the necessary privileges to install a third-party
advertising application. Perhaps an application could de-
clare that it had a dependency on a third-party app, and
the main installer could hide this complexity from the
user, in much the same way that common Linux package
installers will follow dependencies as part of the instal-
lation process for any given target.
Ad permissions. Even if we can get the ad libraries
installed, we have the challenge of understanding what
permissions to grant them. Particularly when many ad-
vertising libraries know how to make optional use of a
permission, such as measuring the smartphone’s location
if it’s allowed, how should we decide if the advertisement
application has those permissions? Must we install mul-
tiple instances of the advertising application based on the
diﬀerent subsets of permissions that it might be granted
by the host application? Alternatively, should we go with
a one-size-ﬁts-all policy akin to the web’s same-origin-
policy? What’s the proper “origin” for an application that
was installed from an app store? Unfortunately, there
is no good solution here, particularly not without gener-
ating complex user interfaces to manage these security
policies.
Similarly, what should we do about permissions that
many users will ﬁnd to be sensitive, such as learning
their ﬁne-grained location, their phone number, or their
address book? Again, the obvious solutions involve cre-
ating dialog boxes and/or system settings that users must
interact with, which few user will understand, and which
advertisers and application authors will all hate.
Ad unloading. Like any Android application, an ad-
vertisement application must be prepared to be killed at
any time—a consequence of Android’s resource manage-
ment system. This could have some destabilizing conse-
quences if the hosting application is trying to commu-
nicate with its advertisement and the ad is killed. Also,
what happens if a user wants to uninstall an advertising
application? Should that be forbidden unless every host
application which uses it is also uninstalled?
7 Alternative design: HTML ads
While struggling with the shortcomings outlined above
with the installation and permissions of advertising ap-
plications, we hit upon an alternative approach that uses
the same AdSplit architecture. The solution is to expand
on something that advertising libraries are already doing:
embedded web views (see Section 5.2).
If an ad creator want to purchase advertising on smart-
phones, they want to specify their advertisements the
same way they do for the web: as plain text, images, or
perhaps as a “rich” ad using JavaScript. Needless to say,
a wide variety of tools are available to create and man-
age such ads, and mobile advertising providers want to
make it easy for ads to appear on any platform (iPhone,
Android, etc.) without requiring heroic eﬀort from the
ad creator.
Consequently, all of the advertising libraries we exam-
ined simply include a WebView within themselves. All
of the native Android code is really nothing more than a
wrapper around a WebView. Based on this insight, we
suggest that AdSplit will be easiest to deploy by provid-
ing a single advertising application, build into the An-
droid core distribution, that satisﬁes the typical needs of
com.example.appAndroidManifest.xmlcom/example/appcom/admob/androidcom/admob/androidDecompileAdMob stub libraryAndroidManifest.xmlModified manifestcom/example/appcom/admob/androidcom.example.appCompileManifest processorAndroid advertising vendors.
Installation becomes a non-issue, since the only
advertiser-provided content in the system is HTML,
JavaScript, and/or images. We still use the rest of the Ad-
Split architecture, running the WebView with a separate
user-id, in a separate process and activity, ensuring that a
malicious application cannot tamper with the advertise-
ments it hosts. We still have the AdSplit advertisement
service, leveraging Quire, to validate user events before
passing them onto the WebView. We only need to extend
the WebView’s outbound HTTP transactions to include
Quire RPC signatures, allowing the remote advertising
server to have conﬁdence in the provenance of its adver-
tising clicks.
Security permissions are more straightforward. The
same-origin-policy, standard across all the web, applies
perfectly to HTML AdSplit. Since the Android Web-
View is built on the same Webkit browser as the stan-
dalone “Browser” application, it has the same security
machinery to enforce the same-origin-policy.
Keeping all this in mind we introduced a new form of
WebView speciﬁcally targeted for HTML ads: the Ad-
WebView. The AdWebView is a way to host HTML
ads in a constrained manner. We introduced two ad-
vertisement speciﬁc permissions which can be controlled
by the user. These permissions control whether ads can
make internet connections or use geolocation features of
HTML5.
When an ad inside an AdWebView requests to load a
url or performs call to HTML5 geolocation api, the Ad-
WebView performs a permission check to verify if the
associated advertisement origin has the needed advertise-
ment permission. These advertisement permissions can
be managed by the user.
About the only open policy question is whether we
should allow AdSplit HTML advertisements to maintain
long-term tracking cookies or whether we should dis-
able any persistent state. Certainly, persistent cookies
are a standard practice for web advertising, so they seem
like a reasonable feature to support here a well. AdWeb-
View, by default, doesn’t support persistent cookies, but
it would be trivial to add.
Implementation. We built an advertising application
that embeds an AdWebView widget, as discussed above.
The host application in this case speciﬁes the URL of the
advertisement server to be loaded in the AdWebView at
initialization. We were successfully in downloading and
running advertisements from our sample advertisement
server.
Performance. Memory and performance overheads
are indistinguishable from our AdMob experiments.
Both versions host a WebView in a separate process, and
it’s the same HTML/JavaScript content running inside
the WebView.
8 Policy
While AdSplit allows for and incentivizes applications to
run distinct from their advertisements, there are a variety
of policy and user experience issues that we must still
address.
8.1 Advertisement blocking
Once advertisements run as distinct processes, some
fraction of the Android users will see this as an oppor-
tunity to block advertisements for good. Certainly, with
web browsers, extension like AdBlock and AdBlock Plus
are incredibly popular. The Chrome web store lists these
two extensions in its top six1 with “over a million” in-
stalls of each. (Google doesn’t disclose exact numbers.)
The Firefox add-ons page oﬀers more details, claim-
ing that AdBlock Plus is far and away the most popu-
lar Firefox extension, having been installed just over 14
million times, versus 7 million for the next most popular
extension2. The Mozilla Foundation estimates that 85%
of their users have installed an extension [39]. Many will
install an ad blocker.
To pick one example, Ars Technica, a web site popular
with tech-savvy users, estimated that about 40% of its
users ran ad blockers [35]. At one point, it added code to
display blank pages to these users in an attempt to cajole
them into either paying for ad-free “premium” service,
or at least conﬁguring their ad blocker to “white list” the
Ars Technica website.
Strategies such as this are perilous. Some users, faced
with a broken web site, will simply stop visiting it rather
than trying to sort out why it’s broken. Of course, many
web sites instead employ a variety of technical tricks to
get around ad blockers, ensuring their ads will still be
displayed.
Given what’s happening on the web, it’s reasonable to
expect a similar fraction of smartphone users might want
an ad blocker if it was available, with the concomitant
arms race in ad block versus ad display technologies.
So long as users have not “rooted” their phones, a va-
riety of core Android services can be relied upon by host
applications to ensure that the ads they’re trying to host
are being properly displayed with the appropriate adver-
tisement content. Similarly, advertising applications (or
HTML ads) can make SSL connections to their remote
servers, and even embed the proper remote server’s pub-
lic key certiﬁcate, to ensure they are downloading data
1https://chrome.google.com/webstore/category/popular
2https://addons.mozilla.org/en-US/ﬁrefox/extensions/?sort=users
from the proper source, rather than empty images from a
transparent proxy.
Once a user has rooted their phone, of course, all bets
are oﬀ. While it’s hard to measure the total number of
rooted Android phones, the CyanogenMod Android dis-
tribution, which requires a rooted phone for installation,
is installed on roughly 722 thousand phones3—a tiny
fraction of the hundreds of millions of Android phones
reported to be in circulation [43]. Given the relatively
small market share where such hacks might be possible,
advertisers might be willing to cede this fraction of the
market rather than do battle against it.
Consequently, for the bulk of the smartphone market-
place, advertising apps on Android phones oﬀer greater
potential for blocking-detection and blocking-resistance
than advertising on the web, regardless of whether they
are served by in-process libraries or by AdSplit. Given
all the other beneﬁts of AdSplit, we believe advertisers
and application vendors would prefer AdSplit over the
status quo.
8.2 Permissions and privacy
Some advertisers would appear to love their ability to
learn additional data about the user, including their loca-
tion, their contacts, and the other apps running on their
phone, and so forth. This information can help proﬁle a
user, which can help target ads. Targeted ads, in turn, are
worth more money to the advertiser and thus worth more
money to the hosting application. When we oﬀer HTML
style advertisements, with HTML-like security restric-
tions, the elegance of the solution seems to go against
the higher value proﬁling that advertisers desire.
Leaving aside whether it’s legal for advertisers to col-
lect this information, we have suggested that a host ap-
plication could make its own requests that violate the
users’ privacy and pass these into the AdSplit advertis-
ing app. Can we disincentivize such behavior? We hope
that, if we can successfully reduce apps’ default requests
for privileges that they don’t really need, then users will
be less accustomed to seeing such permission requests.
When they do occur, users will push back, refusing to
install the app. (Reading through the user-authored com-
ments in the Android Market, many apps with seem-
ingly excessive permission requirements will often have
scathing comments from users, along with technical jus-
tiﬁcations posted by the app authors to explain why each
permission is necessary.)
Furthermore, if advertisers ultimately prefer the Ad-
Split architecture, perhaps due to its improved resis-
tance to click fraud and so forth,
then they will be
forced to make the trade-oﬀ between whether they pre-
fer improved integrity of their advertising platform,
3http://stats.cyanogenmod.com/
or whether they instead want less integrity but more
privacy-violating user details.
9 Related Work
Android has become quite popular with the security com-
munity, with researchers considering many aspects of the
system.
9.1 Android advertisements
A number of researchers have considered the Android
advertisement problem concurrent with our own work.
AdDroid [45] proposed a separation of advertisements
similar to our HTML ads design (outlined in Section 7)
by introducing a system service for advertisements. Ad-
Droid does not use our process separation or otherwise
defeat a malicious host application.
Leontiadis et al. [33] proposed market mechanisms
which through peer pressure and user reviews incen-
tivizes developers to reduce permission bloat due to ad-
vertisements. They introduced a separate advertisement
service which exposes an intent which apps can sub-
scribe to. Apps display advertisements in a speciﬁc UI
gadget similar to our AdView. To limit privacy leaks,
they monitor the ﬂow of data between advertisement ser-
vice and apps and use the information to reduce revenue
of misbehaving apps and advertisements.
Roesner et al. [49] described user driven access con-
trol gadgets (ACGs). The kernel manages input isolation
and provides a trusted path to ACGs, solving a problem
similar to what we address in AdSplit with Quire signed
statements.
While not directly considering security issues, Pathak
et al. [44] analyzed the energy use in popular mobile apps
and found that 65%-75% of apps energy budget is spent
in third-party advertisement libraries. We note that Ad-
Split’s process separation architecture allows the operat-
ing system to easily distinguish between advertisements
and their hosting applications, allowing for a variety of
energy management policies.
9.2 Web security
AdSplit considers an architecture to allow for controlled
mashups of advertisements and applications on a smart-
phone. The web has been doing this for a while (as dis-
cussed in Section 3.1). Additionally, researchers have
considered a variety of web extensions to further contain
browser components in separate processes [26, 48], in-
cluding constructing browser-based multi-principal op-
erating systems [28, 54].
JavaScript sandboxes
9.3
Caja [37] and ADsafe [1] work as JavaScript sand-
boxes which use static and dynamic checks to safely
host JavaScript code.
They use a safe subset of
JavaScript, eliminating dangerous primitives like eval
or document.write that could allow an advertisement
to take over an entire web page. Instead, advertisements
are given a limited API to accomplish what they need.
AdSplit can trivially host advertisements built against
these systems, and as their APIs evolve, they could be
directly supported by out AdWebView class. Addition-
ally, because we run the AdWebView in a distinct process
with its own user-id and permissions, we provide a strong
barrier against advertisement misbehavior impacting the
rest of the platform.
9.4 Advertisement privacy
Privad [27] and Juels et al. [30] address security issues
related to privacy and targeted advertising for web ads.
They use client side software that prevents behavior pro-
ﬁling of users and allows targeted advertisements with-
out compromising user privacy.
AdSplit does not address privacy problems related to
targeted advertisements but it provides framework for
implementing various policies on advertisements.
9.5 Smart phone platform security
As mobile phone hardware and software increase in com-
plexity the security of the code running on a mobile de-
vices has become a major concern.
The Kirin system [16] and Security-by-Contract [12]
focus on enforcing install time application permissions
within the Android OS and .NET framework respec-
tively. These approaches to mobile phone security allow
a user to protect themselves by enforcing blanket restric-
tions on what applications may be installed or what in-
stalled applications may do, but do little to protect the
user from applications that collaborate to leak data or
protect applications from one another.
Saint [42] extends the functionality of the Kirin sys-
tem to allow for runtime inspection of the full system
permission state before launching a given application.
Apex [41] presents another solution for the same prob-
lem where the user is responsible for deﬁning run-time
constraints on top of the existing Android permission
system. Both of these approaches allow users to specify
static policies to shield themselves from malicious ap-
plications, but don’t allow apps to make dynamic policy
decisions.
CRePE [11] presents a solution that attempts to artiﬁ-
cially restrict an application’s permissions based on envi-
ronmental constraints such as location, noise, and time-
of-day. While CRePE considers contextual information
to apply dynamic policy decisions, it does not attempt to
address privilege escalation attacks.
9.5.1 Privilege escalation
XManDroid [8] presents a solution for privilege es-
calation and collusion by restricting communication at
runtime between applications where the communication
could open a path leading to dangerous information ﬂows
based on Chinese Wall-style policies [7] (e.g., forbidding
communication between an application with GPS privi-
leges and an application with Internet access). While this