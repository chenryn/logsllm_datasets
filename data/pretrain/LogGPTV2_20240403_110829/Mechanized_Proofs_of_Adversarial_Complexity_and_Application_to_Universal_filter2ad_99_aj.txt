procedure m.f to y.д in (E, ρ) is:
2(y.д(cid:74)s(cid:75)E, ρ
y.д,ν(s) = sup(supp(π
#
(#callsE, ρ
y.д,ν(s))
y.д (s) = max
ν ∈M
#callsE, ρ
#callsE, ρ
ν
)))
(in memory ν)
(in any memory)
#callsE, ρ
y.д (m.f ) =
#callsE, ρ
y.д (s)
when f-resE(m.f ) =
(proc f ((cid:174)v : (cid:174)τ) → τr = { _; s; _ })
#callsE, ρ
y.д (ρ(x)((cid:174)p).f )ν when f-resE(m.f ) =
(absx open)((cid:174)p).f
Note that when f-resE(m.f ) = (proc f ((cid:174)v : (cid:174)τ) → τr = { _; s; _ }),
we ignore the return expression, since expression cannot contain
procedure calls (only operator applications).
ν
ν
ν
ν
=
the concrete procedure call case, which is replaced by:
Intrinsic cost. The(E, ρ)-denotational semantics of an instruction
s with intrinsic cost under memory ν and parameters (cid:174)x, written
is the cost of the execution of s under ν in ρ, without
counting the costs of function calls to the parameters (cid:174)x. Formally,
in Figure 20, except for
i(cid:74)s(cid:75)E, ρ,(cid:174)x
i(cid:74)_(cid:75)E, ρ,(cid:174)x
is defined exactly like(cid:74)_(cid:75)E, ρ,(cid:174)x
i(cid:74)x ← call m.f ((cid:174)e )(cid:75)E, ρ,(cid:174)x
E(ν′,c′)∼i(cid:74)x←call ρ(x)((cid:174)p).f ((cid:174)e )(cid:75)E, ρ,(cid:174)x
i(cid:74)x ← call ρ(x)((cid:174)p).f ((cid:174)e )(cid:75)E, ρ,(cid:174)x
where f-resE(m.f ) = (absopen z)((cid:174)p).f .
Indeed, for any E-pre-interpretation ρ:
) = π
#
(_) ∈ N∪{+∞} of an instruction
1((cid:74)s(cid:75)E, ρ
The (E, ρ)-intrinsic cost i-costE, ρ,(cid:174)x
s is:
Remark that both semantics coincide on their first component.
[(ν′, cE((cid:174)e, ν))]
if z ∈ (cid:174)x
if z (cid:60) (cid:174)x
∀ν s. π
#
ν
ν
ν
ν
ν
)
1(i(cid:74)s(cid:75)E, ρ,(cid:174)x
2(i(cid:74)s(cid:75)E, ρ,(cid:174)x
#
ν
)))
i-costE, ρ,(cid:174)x
ν
(s) = sup(supp(π
The intrinsic cost of a procedure m.f , with parameters (cid:174)x, is:
• If f-resE(m.f ) = (proc f ((cid:174)v : (cid:174)τ) → τr = { _; s; return r })
then:
i-costE, ρ,(cid:174)x
ν
(m.f ) = i-costE, ρ,(cid:174)x
ν
(s) + cE(r , ν)
• If f-resE(m.f ) = (absopen x)((cid:174)p).f then:
i-costE, ρ,(cid:174)x
ν
(m.f ) = i-costE, ρ,(cid:174)x
ν
(ρ(x)((cid:174)p).f )
And the intrinsic cost in any memory of an instruction s or a module
procedure m.f is:
i-costE, ρ,(cid:174)z(s)
= max
ν ∈M
i-costE, ρ,(cid:174)z(m.f ) = max
ν ∈M
i-costE, ρ,(cid:174)z
i-costE, ρ,(cid:174)z
ν
ν
(s)
(m.f )
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2561Interpretations. We now define when a pre-interpretation is an
interpretation.
Definition D.2. Let E be an well-typed environment. A E-pre-
interpretation ρ is an E-interpretation if for every module identifier
x such that E = E1; module x = absopen : Ml; E2 where:
Ml = func((cid:174)z : (cid:174)M) sig Sl restr θ end
and for every procedure f ∈ procs(S), for every valuation (cid:174)m of
the functor’s parameters such that, for every 1 ≤ i ≤ |(cid:174)z|, if we let
zi = (cid:174)z[i], mi = (cid:174)m[i] and Mi = (cid:174)M[i] = sig _ restr λic ∧ _ end,13 if:
and
E ⊢ (module zi = mi : erasecompl(Mi))
∀д ∈ procs(Mi), costE
ν (mi .д) ≤ λic
(with the convention that j ≤ ⊤ for any integer j) then the execution
of f in any memory verifies the complexity restriction in θ[f ].
Formally, let E′ = E; module (cid:174)z = absopen : (cid:174)M and ρ′ = ρ,((cid:174)z : (cid:174)m),
and:
θ[f ] = _ ∧ λc = compl[intr : k, y1.f1 : k1, . . . , yl .fl : kl]
Then for every 1 ≤ j ≤ l,
#callsE′, ρ′
yj .fj
(x((cid:174)z).f ) ≤ kj
and i-costE′, ρ′,(cid:174)z(x((cid:174)z).f ) ≤ k
Intrinsic cost of a functor. Finally, the (E, ρ)-intrinsic complexity
of a functor procedure x.f , denoted by complE, ρ
x.f ∈ N∪{+∞}, is the
maximal intrinsic cost of x.f ’s body over all possible memories and
instantiation of x’s functor parameters. Let E(x) = absopen (func((cid:174)z :
(cid:174)M) sig _ end) and E′ = (E; module (cid:174)z = absopen : (cid:174)M). Also, let I be
the set E′-interpretation ρ′ extending ρ. Then:
complE, ρ
x.f
= sup
ρ′∈I
i-costE′, ρ′,(cid:174)z(x((cid:174)z).f )
D.3 Soundness of our Proof System
We now have all the tools to define the semantics of our expression
and program cost judgments.
Definition D.3. the judgment ⊢ {ϕ} e ≤ te stands for:
∀ν ∈ ϕ, cE(e, ν) ≤ te
Definition D.4. The judgment E ⊢ {ϕ} s {ψ | t} means that for
any E-interpretation ρ and ν ∈ ϕ:
supp(π
#
1((cid:74)s(cid:75)E, ρ
(s) ≤ t[conc] + A∈abs(E)
)) ⊆ ψ ∧
ν
costE, ρ
ν
t[A.f ] · complE, ρ
A.f
f ∈procs(E(A))
Basically, the complexity of the instruction s is upper-bounded
by the complexity of the concrete code in s, plus the sum over all
abstract oracles A.f of the number of calls to A.f times the intrinsic
complexity of A.f .
E HOARE LOGIC FOR COST
We present the full set of rules of our Hoare logic for cost and state
their soundness (the proofs can be found in the long version [5]).
13Indeed, since Ml is a low-order signature, Mi must be a module structure signature.
Skip
E ⊢ {ϕ} skip {ϕ | 0}
False
E ⊢ {⊥} s {ψ | t }
Weak
ϕ ⇒ ϕ′
E ⊢ {ϕ′} s {ψ ′ | t′}
ψ ′ ⇒ ψ
t′ ≤ t
Assign
E ⊢ {ϕ} s {ψ | t }
⊢ {ϕ} e ≤ te
Rand
ϕ = (ϕ0 ∧ ∀v ∈ dom(d).ψ[x ← v])
⊢ {ϕ0} d ≤ t
E ⊢ {ϕ ∧ ψ[x ← e]} x ← e {ψ | te }
E ⊢ {ϕ} s1 {ϕ′ | t1}
E ⊢ {ϕ′} s2 {ψ | t2}
Seq
E ⊢ {ϕ} x
$←− d {ψ | t }
E ⊢ {ϕ} s1; s2 {ψ | t1 + t2}
E ⊢ {ϕ ∧ e } s1 {ψ | t }
If
E ⊢ {ϕ ∧ ¬e } s2 {ψ | t }
⊢ {ϕ} e ≤ te
E ⊢ {ϕ} if e then s1 else s2 {ψ | t + te }
While
I ∧ e ⇒ c ≤ N
∀k ≤ N , ⊢ {I ∧ e ∧ c = k } e ≤ te(k)
E ⊢ {I ∧ 0 ≤ c } while e do s {I ∧ ¬e |N
∀k, E ⊢ {I ∧ e ∧ c = k } s {I ∧ k < c | t(k)}
⊢ {I ∧ ¬e } e ≤ te(N + 1)
i =0 te(i)}
i =0 t(i) +N +1
Call
⊢ {ϕ[(cid:174)v ← (cid:174)e ]} (cid:174)e ≤ te
argsE(F) = (cid:174)v
E ⊢ {ϕ[(cid:174)v ← (cid:174)e ]} x ← call F((cid:174)e ) {ψ | te + t }
E ⊢ {ϕ} F {ψ[x ← ret] | t }
Conc
f-resE(F) = (proc f ((cid:174)v : (cid:174)τ) → τr = { _; s; return r })
E ⊢ {ϕ} s {ψ[ret ← r] | t }
⊢ {ψ } r ≤ tret
E ⊢ {ϕ} F {ψ | t + tret}
Convention: ret cannot appear in programs (i.e. ret (cid:60) V).
Figure 22: Basic rules for cost judgment.
Hoare logic rules. Our Hoare logic for cost comprises the ba-
sic rules in Figure 22, the abstract call rule in Figure 6, and the
instantiation rule in Figure 23.
The basic rules in Figure 22 are essentially Hoare logic rules with
some additional components to handle the cost aspects of the logic.
Some examples of basic rules: the If rule handles the conditional
program construct, and has already been presented in Section 4.2;
the assignment rule Assign lets the user provide a dedicated pre-
14; and the
condition ϕ used to upper-bound the cost of evaluating e
weakening rule Weak is the standard Hoare logic weakening rule,
with an additional premise t′ ≤ t.
focus on the instantiation rule.
We already presented the abstract call rule in Figure 6. We now
Instantiation rule. The Instantiation rule, given in Figure 23,
allows to instantiate an abstract module x by a concrete module m.
Assume that we can upper-bound the cost of a statement s by ts,
when x is abstract:
E, module x = absopen : Ml ⊢ {ϕ} s {ψ | ts}
Then we can instantiate x by a concrete module m as long as m
complies with the module signature Ml, which is checked through
two conditions.
14If the rule forced to take ϕ = ψ[x ← e], then it would not be complete, as prior
information on the value on x (e.g. coming from a previous assignment to x) is erased,
which may prevent us from proving a precise upper-bound on ⊢ {ϕ} e ≤ te .
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2562Instantiation
∀f ∈ procs(Sl), (E, module (cid:174)z : absopen (cid:174)M ⊢ {⊤} m((cid:174)z).f {⊤ | tf })
Ml = func((cid:174)y : (cid:174)M) sig Sl restr θ end
(cid:174)z fresh in E
E ⊢x m : erasecompl(Ml)
∀f ∈ procs(Sl), tf ≤compl θ[f ]
E, module x = absopen : Ml ⊢ {ϕ} s {ψ | ts }
E, module x = m : Ml ⊢ {ϕ} s {ψ | Tins}
f ∈procs(Sl) ts[x.f ] · tf [G](cid:9)
= (cid:8)G (cid:55)→ ts[G] +
tf [conc] + A∈abs(E)
where:
Tins
tf ≤compl θ[f ] = ∀z0 ∈ (cid:174)z, ∀д ∈ procs( (cid:174)M[zo]), tf [z0 .д] ≤ θ[f ][z0 .д] ∧
tf [A.h] · intrE(A.h) ≤ θ[f ][intr]
Conventions: intrE(A.h) is the intr field in the complexity restriction of
h∈procsE(A)
the abstract module procedure A.h in E.
Figure 23: Instantiation rule for cost judgment.
First, we check that m has the correct module type, except for
complexity restrictions, through the premise E ⊢x m:erasecompl(Ml)
Then, we check that m satisfies the complexity restriction θ in
Ml, by requiring that for any procedure f of x:
E, module (cid:174)z : absopen (cid:174)M ⊢ {⊤} m((cid:174)z).f {⊤ | tf }
where tf must respect θ[f ], which is guaranteed by tf ≤compl θ[f ],
which does two checks:
• first, it ensures that the number of calls to any functor pa-
rameter z0 of x done by m.f is upper-bounded by θ[f ][z0].
• then, it verifies that the bound of x’s intrinsic cost θ[f ][intr]
upper-bounds the cost of the execution of m.f , excluding
functor parameter calls, through the condition:
tf [conc] + A∈abs(E)
h∈procsE(A)
tf [A.h] · intrE(A.h) ≤ θ[f ][intr]
where intrE(A.h) is the upper-bound on A.h intrinsic cost declared
in E (if A.h declares no intrinsic bound in E, then intrE(A.h) is
undefined (hence A.h execution time can be arbitrarily large), and
the Instantiation rule cannot be applied). In other words, the
concrete execution time tf [conc] of x.f , plus the abstract execution
time of x.f (excluding functor parameters, already accounted for),
must be bounded by θ[f ][intr].
The final cost Tins (in Figure 23) is the sum of the cost ts of s
(which excludes the cost of x’s procedures), plus the sum, for any
procedure f of x, of the number of times s called x.f (which is
ts[x.f ]), times the cost of x.f (which is tf ).
Soundness. We now prove the soundness of our Hoare logic rules.
We recall Theorem 4.1.
Theorem. The proof rules in Figures 6, 22 and 23 are sound.
The proof can be found in the long version [5].
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2563