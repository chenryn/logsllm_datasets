- The number of blocks dirtied per millisecond (ms) is 10003 blocks / 28407.435 ms, which yields 0.35212612 blocks per millisecond.  
- Multiply the result by 1000 to give the number of shared blocks dirtied per second (1 second = 1000 ms), which yields 352.12612 blocks per second.  
- Multiply the result by 8.192 to give the number of kilobytes dirtied per second (1 block = 8.192 kilobytes), which yields approximately 2885 kilobytes per second.  
The actual dirty rate for session 2 is calculated as follows.  
- The number of blocks dirtied per millisecond (ms) is 10003 blocks / 31343.458 ms, which yields 0.31914156 blocks per millisecond.  
- Multiply the result by 1000 to give the number of shared blocks dirtied per second (1 second = 1000 ms), which yields 319.14156 blocks per second.  
- Multiply the result by 8.192 to give the number of kilobytes dirtied per second (1 block = 8.192 kilobytes), which yields approximately 2614 kilobytes per second.  
The combined dirty rate from session 1 (2885 kilobytes per second) and from session 2 (2614 kilobytes per second) yields 5499 kilobytes per second, which is near the set dirty rate limit of the resource group (6144 kilobytes per seconds).  
资源组2的两个进程，分别统计计算，然后相加，不能超过限制。  
The actual dirty rate for session 3 is calculated as follows.  
- The number of blocks dirtied per millisecond (ms) is 10003 blocks / 52727.846 ms, which yields 0.18971001 blocks per millisecond.  
- Multiply the result by 1000 to give the number of shared blocks dirtied per second (1 second = 1000 ms), which yields 189.71001 blocks per second.  
- Multiply the result by 8.192 to give the number of kilobytes dirtied per second (1 block = 8.192 kilobytes), which yields approximately 1554 kilobytes per second.  
The actual dirty rate for session 4 is calculated as follows.  
- The number of blocks dirtied per millisecond (ms) is 10003 blocks / 56063.697 ms, which yields 0.17842205 blocks per millisecond. Multiply the result by 1000 to give the number of shared blocks dirtied per second (1 second = 1000 ms), which yields 178.42205 blocks per second.  
- Multiply the result by 8.192 to give the number of kilobytes dirtied per second (1 block = 8.192 kilobytes), which yields approximately 1462 kilobytes per second.  
The combined dirty rate from session 3 (1554 kilobytes per second) and from session 4 (1462 kilobytes per second) yields 3016 kilobytes per second, which is near the set dirty rate limit of the resource group (3072 kilobytes per seconds).  
Thus, this demonstrates how EDB Resource Manager keeps the aggregate dirty rate of the active processes in its groups close to the dirty rate limit set for each group.   
## 使用top 计算 cpu限制的方法  
略，实际上也是算出resource group中每个进程的平均cpu消耗，相加，不超过resource group配置的cpu (核数)限制。  
```  
edb=# ALTER RESOURCE GROUP resgrp_b SET cpu_rate_limit TO .4;  -- 0.4 核  
ALTER RESOURCE GROUP  
edb=# ALTER RESOURCE GROUP resgrp_c SET cpu_rate_limit TO .3;  -- 0.4 核  
ALTER RESOURCE GROUP  
$ top  
top - 17:45:09 up  5:23,  8 users,  load average: 0.47, 0.17, 0.26  
Tasks: 203 total,   4 running, 199 sleeping,   0 stopped,   0 zombie  
Cpu(s): 70.2%us,  0.0%sy,  0.0%ni, 29.8%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0  
Mem:   1025624k total,   806140k used,   219484k free, 25296k buffers  
Swap:   103420k total,    13404k used,    90016k free, 374092k cached  
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM   TIME+  COMMAND  
29857 enterpri  20   0  195m 4820 3324 S 19.9  0.5   4:25.02 edb-postgres  
28915 enterpri  20   0  195m 5900 4212 R 19.6  0.6   9:07.50 edb-postgres  
29023 enterpri  20   0  195m 4744 3248 R 16.3  0.5   4:01.73 edb-postgres  
11019 enterpri  20   0  195m 4120 2764 R 15.3  0.4   0:04.92 edb-postgres  
2907 user      20   0 98.7m  12m 9112 S  1.3  1.2   0:56.54 vmware-user-lo  
3040 user      20   0  278m  22m  14m S  1.3  2.2   4:38.73 knotify4  
```  
The two resource groups in use have CPU usage limits of 40% and 30%. The sum of the %CPU column for the first two edb-postgres processes is 39.5 (approximately 40%, which is the limit for resgrp_b) and the sum of the %CPU column for the third and fourth edb-postgres processes is 31.6 (approximately 30%, which is the limit for resgrp_c).  
The sum of the CPU usage limits of the two resource groups to which these processes belong is 70%. The following output shows that the sum of the four processes borders around 70%.  
```  
$ while [[ 1 -eq 1 ]]; do  top -d0.5 -b -n2 | grep edb-postgres | awk '{ SUM += $9} END { print SUM / 2 }'; done  
61.8  
76.4  
72.6  
69.55  
64.55  
79.95  
68.55  
71.25  
74.85  
62  
74.85  
76.9  
72.4  
65.9  
74.9  
68.25  
```  
## 动态视图与参数：     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.88.html#     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.92.html#     
查看集群中的用户、数据库级资源控制配置参数。     
```     
postgres=#      
select      
  coalesce(datname,'ALL'),     
  coalesce(rolname,'ALL'),     
  setconfig      
from pg_db_role_setting t1      
left join pg_database t2      
  on (t1.setdatabase=t2.oid)      
left join pg_roles t3      
  on (t1.setrole=t3.oid);     
   dbs    |  roles   |        setconfig           
----------+----------+--------------------------  
 ALL      | postgres | {edb_resource_group=rs1}  
 ALL      | r1       | {edb_resource_group=rs2}  
 edb      | ALL      | {edb_resource_group=rs2}  
 postgres | ALL      | {edb_resource_group=rs1}  
(4 rows)  
```     
查看当前资源组的资源使用情况。     
per_process_cpu_rate_limit 表示这个组内，当前平均每个进程的CPU核数使用限制。     
per_process_dirty_rate_limit 表示这个组内，当前平均每个进程限制的产生dirty page的速度(KB/s)     
随着进程数的加减，平均值会有变化。每个进程的限制并不是平均数，组内的进程可以相互抢资源，如果只有一个活跃进程在组内，则这个活跃进程可以使用这个组的所有资源。     
```     
postgres=# select * from edb_all_resource_groups ;     
 group_name | active_processes | cpu_rate_limit | per_process_cpu_rate_limit | dirty_rate_limit | per_process_dirty_rate_limit      
------------+------------------+----------------+----------------------------+------------------+------------------------------     
 b          |                1 |              0 |                   16777216 |                0 |                     16777216     
 abc        |                0 |             32 |                            |           409600 |                                  
(2 rows)     
postgres=# select * from edb_all_resource_groups ;   
 group_name | active_processes | cpu_rate_limit | per_process_cpu_rate_limit | dirty_rate_limit | per_process_dirty_rate_limit   
------------+------------------+----------------+----------------------------+------------------+------------------------------  
 rs1        |                1 |              4 |                   16777216 |            10000 |                     16777216  
 rs3        |                0 |              0 |                            |                0 |                               
 rs2        |                0 |              2 |                            |             2000 |                               
(3 rows)  
```     
查看当前会话属于哪个资源组。     
```     
postgres=# show edb_resource_group ;     
 edb_resource_group      
--------------------     
 b     
(1 row)     
```     
## 参考     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/toc.html     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.56.html#pID0E0JJC0HA     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.57.html#pID0E0CCC0HA     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.55.html#pID0E0MOC0HA     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.26.html#pID0E0DOF0HA     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.88.html#     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.92.html#     
https://www.enterprisedb.com/docs/en/10.0/EPAS_Guide_v10/EDB_Postgres_Advanced_Server_Guide.1.54.html#     
[阿里云PPAS商用版本(兼容Oracle)](https://www.aliyun.com/product/rds/ppas)       
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")