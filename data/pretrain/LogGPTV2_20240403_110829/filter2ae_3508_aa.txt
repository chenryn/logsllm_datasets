# 简介
2018年4月18日，Oracle官方发布的CPU（Critical Patch Update）修复了编号为`CVE-2018-2628的反序列化漏洞。
受影响的WebLogic的WLS核心组件存在严重的安全漏洞，通过T3协议可以在前台无需账户登录的情况下进行远程任意代码执行，且CVE-2018-2628为CVE-2017-3248黑名单修复的绕过。
影响版本：
  * Weblogic 10.3.6.0
  * Weblogic 12.1.3.0
  * Weblogic 12.2.1.2
  * Weblogic 12.2.1.3
# 漏洞分析
测试环境：
  * docker环境，
  * Weblogic 10.3.6.0
  * JDK1.6
  * IDEA 远程DEBUG
在该测试环境下，CVE-2018-2628存在两种较为常用的利用方式:
  * 通过CVE-2016-1000031 Apache Commons Fileupload进行任意文件写入
  * 通过ysoserial-JRMP模块进行远程代码执行
使用k8脚本进行文件写入，查看Weblogic的错误日志，日志位置为：
    tail -f /Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/logs/AdminServer.log
根据错误信息，得到反序列化漏洞调用栈信息如下：
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:349)
    at weblogic.rjvm.InboundMsgAbbrev.readObject(InboundMsgAbbrev.java:66)
    at weblogic.rjvm.InboundMsgAbbrev.read(InboundMsgAbbrev.java:38)
    at weblogic.rjvm.MsgAbbrevJVMConnection.readMsgAbbrevs(MsgAbbrevJVMConnection.java:283)
    at weblogic.rjvm.MsgAbbrevInputStream.init(MsgAbbrevInputStream.java:213)
    at weblogic.rjvm.MsgAbbrevJVMConnection.dispatch(MsgAbbrevJVMConnection.java:498)
    at weblogic.rjvm.t3.MuxableSocketT3.dispatch(MuxableSocketT3.java:330)
    at weblogic.socket.BaseAbstractMuxableSocket.dispatch(BaseAbstractMuxableSocket.java:387)
    at weblogic.socket.SocketMuxer.readReadySocketOnce(SocketMuxer.java:967)
    at weblogic.socket.SocketMuxer.readReadySocket(SocketMuxer.java:899)
    at weblogic.socket.PosixSocketMuxer.processSockets(PosixSocketMuxer.java:130)
    at weblogic.socket.SocketReaderRequest.run(SocketReaderRequest.java:29)
    at weblogic.socket.SocketReaderRequest.execute(SocketReaderRequest.java:42)
    at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:145)
    at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:117)
根据调用栈信息可以确定断点调试位置并发现`muxer`（多路复用器），WebLogic
Server使用称为`muxer`的软件模块来读取服务器上的传入请求和客户端上的传入响应。这些复用器有两种主要类型： Java muxer或native
muxer。
Java muxer具有以下特征：
  * 使用纯Java从套接字读取数据。
  * 它也是可用于RMI客户端的唯一复用器。
  * 读取时阻塞，直到要从套接字读取数据为止。
weblogic.socket.SocketReaderRequest#run
`SocketReaderRequest::run`开始分析，`SocketMuxer.getMuxer()`得到`PosixSocketMuxer`对象，跟进对应调用的`processSockets`方法。
weblogic/socket/PosixSocketMuxer.class:128
通过`PosixSocketInfo`类的var16的`getMuxableSocket`方法获取`MuxableSocket`对象`var17`，将套接字传入`readReadySocket`
weblogic.socket.SocketMuxer#readReadySocket
套接字传入`readReadySocketOnce`函数
weblogic.jar!/weblogic/socket/SocketMuxer.class:650
套接字调用`dispatch`函数进行调度分发
weblogic.socket.BaseAbstractMuxableSocket#dispatch()
weblogic.socket.BaseAbstractMuxableSocket#makeChunkList
`this.makeChunkList()`返回`Chunk`对象，并作为参数继续传入`dispatch`
weblogic.rjvm.t3.MuxableSocketT3#dispatch
`this.connection`对象为`MuxableSocketT3`类，调用`dispatch`并传入`Chunk`对象
weblogic.rjvm.MsgAbbrevJVMConnection#dispatch
`var2`为`ConnectionManager`对象，调用`var2.getInputStream()`获取`MsgAbbrevInputStream`对象`var3`，继续调用`init`函数。
weblogic.rjvm.MsgAbbrevInputStream#init
继续调用`readMsgAbbrevs`函数
weblogic.rjvm.MsgAbbrevJVMConnection#readMsgAbbrevs
`InboundMsgAbbrev`对象`var3`调用`read`函数
weblogic.rjvm.InboundMsgAbbrev#read
在循环中调用`readObject`函数，并传入`MsgAbbrevInputStream`对象。
weblogic.rjvm.InboundMsgAbbrev#readObject
创建`ServerChannelInputStream`对象，调用`readObject`函数，触发反序列化漏洞。
## Apache Commons Fileupload
Apache Commons
FileUpload在`1.3.3`版本前存在任意文件上传漏洞，在JDK1.6环境下没有空字符保护，可以利用`\u0000`对文件名进行截断，对任意位置写入恶意文件，进行远程代码执行。
### POC
ysoserial中支持对Apache Commons Fileupload的利用，命令如下：
    java -jar ysoserial.jar FileUpload1 "writeOld;test\shell.jsp;rai4over"
在最后一个字符串参数中指定具体的行为，`writeOld`老旧JDK写操作、`test\shell.jsp`写入路径、`rai4over`为写入内容。
ysoserial.payloads.FileUpload1#getObject
`;`分割最后一个字符串参数，判断行为后进入对应分支调用函数，可以看到多个不同行为，选择新老JDK、是否进行`Base64`编码，`writeOld`则是使用老jdk1.6进行任意文件写入。
ysoserial.payloads.FileUpload1#writePre131
路径和截断符号`\0`拼接后传入`makePayload`函数
ysoserial.payloads.FileUpload1#makePayload
根据写入路径`test\shell.jsp`创建`File`对象`repository`，作为参数传入`DiskFileItem`的构造函数
org.apache.commons.fileupload.disk.DiskFileItem#DiskFileItem
依次赋值，然后回到上层`makePayload`函数。
ysoserial.payloads.FileUpload1#makePayload
创建`DeferredFileOutputStream`对象`dfos`，然后通过反射将恶意文件内容`rai4over`写入`dfos`的`memoryOutputStream`成员，最后都添加到`diskFileItem`。
恶意`diskFileItem`构造完成，`ysoserial`对其进行序列化，`writeObject`进行了重写
org.apache.commons.fileupload.disk.DiskFileItem#writeObject
进入`if`分支，调用`get`函数。
org.apache.commons.fileupload.disk.DiskFileItem#get
调用`getData`函数，并赋值`cachedContent`
org.apache.commons.io.output.DeferredFileOutputStream#getData
最后的`diskFileItem`对象为：
### Gadget chain
Weblogic中存在的可进行漏洞利用`commons-fileupload.jar`
org.apache.commons.fileupload.disk.DiskFileItem#readObject
调用`getOutputStream`函数
org.apache.commons.fileupload.disk.DiskFileItem#getOutputStream
判断的`dfos == null`成立，进入`if`分支，并调用`getTempFile()`函数
org.apache.commons.fileupload.disk.DiskFileItem#getTempFile
通过File创建文件流，文件的位置为`tempDir`+`fileName`，此时的变量：
`fileName`为随机生成不可控，被`\u0000`截断后文件流的位置为可控的`servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/wlscmd.jsp`，然后返回到上层`readObject`函数。
org.apache.commons.fileupload.disk.DiskFileItem#readObject
`this.cachedContent`变量不为`null`且为恶意shell内容，进入`if`判断分支，完成文件流写入。
## ysoserial-JRMP
在`InboundMsgAbbrev`的`resolveProxyClass`方法中使用了黑名单对反序列化类进行限制：
    protected Class resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
       String[] arr$ = interfaces;
       int len$ = interfaces.length;
       for(int i$ = 0; i$ < len$; ++i$) {
          String intf = arr$[i$];
          if(intf.equals("java.rmi.registry.Registry")) {
             throw new InvalidObjectException("Unauthorized proxy deserialization");
          }
       }
       return super.resolveProxyClass(interfaces);
    }
对`java.rmi.registry.Registry`进行了过滤，但可以使用`java.rmi.activation.Activator`进行绕过。
### POC
下载包含`java.rmi.activation.Activator`链的ysoserial工具：
    wget https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar
对应文件为：
    ysoserial/src/main/java/ysoserial/payloads/JRMPClient2.java
开启使用`CommonsCollections1`恶意的JRMP Server：