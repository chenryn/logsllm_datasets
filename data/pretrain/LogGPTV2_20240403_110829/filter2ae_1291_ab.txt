    unsigned long length;
    unsigned char data[];
    };
    struct array *arr1 = ...; /* small array */
    struct array *arr2 = ...; /* array of size 0x400 */
    /* >0x400 (OUT OF BOUNDS!) */
    unsigned long untrusted_offset_from_caller = ...;
    if (untrusted_offset_from_caller length) {
    unsigned char value = arr1->data[untrusted_offset_from_caller];
    unsigned long index2 = ((value&1)*0x100)+0x200;
    if (index2 length) {
    unsigned char value2 = arr2->data[index2];
    }
    }
在执行返回到非推测路径后，因为处理器注意到`untrusted_offset_from_caller`大于`arr1-> length`，包含`arr2->
data [index2]`的高速缓存行停留在L1高速缓存中。 通过测量加载`arr2-> data [0x200]`和`arr2-> data
[0x300]`所需的时间，攻击者可以确定推测执行过程中index2的值是0x200还是0x300--它揭示了`arr1-> data
[untrusted_offset_from_caller] ＆1`是0还是1。
为了能够实际将这种行为用于攻击，攻击者需要能够在目标上下文中使用超出边界的索引执行此类易受攻击的代码模式。
为此，易受攻击的代码模式必须存在于现有代码中，或者必须有可用于生成易受攻击代码模式的解释器或JIT引擎。
到目前为止，我们还没有确定任何现有的可利用的易受攻击的代码模式实例; 变体1泄漏内核内存的PoC使用eBPF解释器或eBPF
JIT引擎，这些引擎内置于内核中并可供普通用户访问。
这个小的变体可能可以代替使用一个越界读取函数指针来获取错误推测路径中的执行控制权。我们没有进一步调查这个变种。
## 内核攻击
本节更详细地介绍如何使用eBPF字节码解释器和JIT引擎，使用变体1来泄漏Linux内核内存。尽管变体1攻击有许多有趣的潜在目标，但我们选择攻击Linux内核eBPF
JIT /解释器，因为它比其他大多数JIT提供了更多的对攻击者的控制。
Linux内核自3.18版开始支持eBPF。非特权用户空间代码可以将内核提供的字节码提供给内核，然后：
  * 由内核字节码解释器解释
  * 翻译成本机机器码，该机器码也使用JIT引擎在内核上下文中运行（它翻译单个字节码指令而不执行任何进一步的优化）
字节码的执行可以通过将eBPF字节码作为过滤器附加到套接字上，然后通过套接字的另一端发送数据来触发。
JIT引擎是否启用取决于运行时配置设置 - 但至少在测试过的Intel处理器上，攻击独立于此设置工作。
与传统的BPF不同，eBPF具有数据类型，如数据阵列和函数指针数组，eBPF字节码可以在其中编制索引。因此，可以使用eBPF字节码在内核中创建上述代码模式。
eBPF的数据阵列效率低于它的函数指针数组，所以攻击将在可能的情况下使用后者。
测试过的两台机器都没有SMAP，PoC依赖于此（但它原则上不应该是一个先决条件）。
此外，至少在经过测试的Intel机器上，在内核之间弹跳修改后的缓存行很慢，显然是因为MESI协议用于缓存一致性[8]。
在一个物理CPU内核上更改eBPF阵列的引用计数器会导致包含引用计数器的高速缓存行被跳转到该CPU内核，从而使所有其他CPU内核上的引用计数器的读取速度变慢，直到已更改的引用计数器已被写回到内存。
由于eBPF阵列的长度和引用计数器存储在同一个高速缓存行中，这也意味着更改一个物理CPU内核上的引用计数器会导致eBPF阵列的长度读取在其他物理CPU内核上较慢（故意为false共享）。
该攻击使用两个eBPF程序。 第一个通过页面对齐的eBPF函数指针数组`prog_map`在可配置索引处尾部调用。
简单地说，这个程序用于通过猜测从`prog_map`到用户空间地址的偏移量并在猜测的偏移量处调用`throughprog_map`来确定`prog_map`的地址。
为了使分支预测预测偏移量低于`prog_map`的长度，在两者之间执行对边界索引的尾调用。
为了增加错误猜测窗口，包含`prog_map`长度的高速缓存行被反弹到另一个核心。 要测试偏移猜测是否成功，可以测试用户空间地址是否已加载到高速缓存中。
因为这种直接暴力猜测地址的方法会很慢，所以我们使用下面的优化：  
在用户空间地址`user_mapping_area`处创建2^15个相邻用户空间存储器映射[9] ，每个由2^4个页面组成，覆盖总面积为2^31
字节。每个映射映射相同的物理页面，并且所有映射都存在于页面表中。  
这允许攻击以2^31个字节为单位执行。
对于每一步，在通过`prog_map`导致越界访问之后，只需要测试`user_mapping_area`的前2^4个页面中的每一个缓存行以获取缓存内存。
由于L3高速缓存物理索引，因此对映射物理页面的虚拟地址的任何访问都将导致映射同一物理页面的所有其他虚拟地址也被高速缓存。
当这种攻击发现一个hit（缓存的内存位置时），内核地址的高33位是已知的（因为它们可以根据发生hit的地址猜测得出），并且地址的低16位也是已知的
（来自user_mapping_area内找到命中的偏移量）。 user_mapping_area的地址是剩余的中间部分。
剩余的位可以通过平分剩余的地址空间来确定：  
将两个物理页面映射到相邻的虚拟地址范围，每个虚拟地址范围为剩余搜索空间一半的大小，然后逐位确定剩余地址。
此时，可以使用第二个eBPF程序实际泄漏数据。 在伪代码中，这个程序看起来如下：
    uint64_t bitmask = ;
    uint64_t bitshift_selector = ;
    uint64_t prog_array_base_offset = ;
    uint64_t secret_data_offset = ;
    // index will be bounds-checked by the runtime,
    // but the bounds check will be bypassed speculatively
    uint64_t secret_data = bpf_map_read(array=victim_array, index=secret_data_offset);
    // select a single bit, move it to a specific position, and add the base offset
    uint64_t progmap_index = (((secret_data & bitmask) >> bitshift_selector) << 7) + prog_array_base_offset;
    bpf_tail_call(prog_map, progmap_index);
该程序在运行时可配置的偏移量和位掩码处从eBPF数据阵列“victim_map”中读取8字节对齐的64
bit，并对该值进行位移，使得一个bit映射到相距2^7个字节的两个值中的一个 （当用作数组索引时足以不落入相同或相邻的缓存行）。 最后，它添加一个64
bit的偏移量，然后使用结果值作为`prog_map`的偏移量，以用于尾部调用。
这个程序可以用来通过反复调用eBPF程序来将内存偏移调用到`victim_map`中来泄漏内存，这个偏移量指定了要泄漏的数据，并且在`prog_mapthat`中出现了一个超出边界的偏移量，从而导致`prog_map
+ offset`指向用户空间的一个内存区域。
误导分支预测和弹跳缓存线的方式与第一个eBPF程序的方式相同，不同之处在于现在保存victim_map长度的缓存线也必须退回到另一个内核。
# 变体2：分支目标注入
本节介绍了我们PoC的变体2背后的理论，当在使用Intel Haswell Xeon CPU上的virt-manager创建的KVM
guest虚拟机中使用root权限运行时，可以读取主机上运行的特定版本的Debian发行版内核内核内存的速度大约为1500字节/秒。
## 基础
之前的研究（见最后文献部分）已经表明，不同安全上下文中的代码可能影响彼此的分支预测。到目前为止，这只被用来推断代码所在位置的信息（换句话说，是为了制造受害者对攻击者的干扰）;
然而，这种攻击变体的基本假设是它也可以用来重定向受害者上下文中的代码执行（换句话说，创建攻击者对受害者的干扰;反之亦然）。  