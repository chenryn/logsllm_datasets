---
author: Liam Proven
category: 技术
comments_data:
- date: '2023-11-12 16:46:40'
  message: 为什么要放弃各种Unix，难道去用Windows吗？经典的MacOS（8/9）没有终端，即使软件够用也不想用，还是X有吸引力。
  postip: 113.65.248.32
  username: 来自广东广州的 Chrome Mobile 119.0|Android 10 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 1738
date: '2023-11-12 13:07:00'
editorchoice: false
excerpt: 虽然你可能听到不同的看法，但实际上，它并未像一些批评者所想象的那样完全专有。
fromurl: https://www.theregister.com/2023/11/10/snap_without_ubuntu_tools/
id: 16371
islctt: true
largepic: /data/attachment/album/202311/12/130648uvbvvgvb7q7pv4bq.png
permalink: /article-16371-1.html
pic: /data/attachment/album/202311/12/130648uvbvvgvb7q7pv4bq.png.thumb.jpg
related: []
reviewer: wxy
selector: ''
summary: 虽然你可能听到不同的看法，但实际上，它并未像一些批评者所想象的那样完全专有。
tags:
- Ubuntu
- Snap
thumb: false
title: Canonical 告诉你如何不通过 Snap 商店使用 Snap 包
titlepic: true
translator: ChatGPT
updated: '2023-11-12 13:07:00'
---
![](/data/attachment/album/202311/12/130648uvbvvgvb7q7pv4bq.png)
> 
> 虽然你可能听到不同的看法，但实际上，它并未像一些批评者所想象的那样完全专有。
> 
> 
> 
对 Ubuntu 的 Snap 打包格式最常见的误解之一是它是专有的 —— 但是深入研究其文档后，会发现这个说法并不对。
在上周末拉脱维亚的里加举行的 Ubuntu 峰会上，笔者有幸采访到 Ubuntu 的 开发者大使   developer advocate ，Igor Ljubuncic。期间，他们详细探讨了关于 Snap 的各种误区，包括它被视为完全闭源的、受 Canonical 控制、必须使用 Canonical 的 Snap 商店等众多谬论。
如果说有什么比糟糕的软件更加厌恶的，那一定是谎言。正如我们在 [点评 Fedora 39](https://www.theregister.com/2023/11/09/fedora_39_released/) 时所注意到的，即使在 Linux 诞生之前，各种软件的拥趸们就经常爆发各种 [圣战](http://catb.org/jargon/html/H/holy-wars.html)。但我们至少希望能坚守事实的公道。毫无根据的恶意指责是没有必要的：生活本身已经足够糟糕。
笔者的立场很明确，我们并不特别偏爱任何 Linux 发行版或其打包工具。像许多资深电脑技术人员一样，在长期和各种软件打交道后，笔者已经对所有的软件厌烦至极。一句广为接受的说法就是：[没有一个软件不让人头疼](http://harmful.cat-v.org/software/)。
Linux 就是一个软件，因而它难免让人头疼。承此，所有的 Linux 发行版也都不尽如人意。包管理器也是一个软件，同样也不尽人意。但幸运的是，至少大多数 Linux 发行版都有一个包管理器。这比没有软件包管理器要好，或者更糟糕的是，有不止一个以上的包管理器，这一点 [XKCD 927](https://xkcd.com/927/) 漫画体现的淋漓尽致。
![](/data/attachment/album/202311/12/130719yikvgssyukufz1hk.png)
我们并不特别青睐 Snap，也不特别反对 Flatpak。笔者个人更偏好 [AppImage](https://appimage.org/) 格式，它不需要其他额外的框架。但虽然有个 [AppImageHub](https://www.appimagehub.com/)，但该格式却并没有提供软件更新的工具，这个问题就留给了应用本身来解决。
鉴于所有的软件都不完美，那唯一重要的区别就在于其问题严重的程度。一段时间以后，你最关注的就是它是否可运行，能否满足你的需要，以及它的可靠性。
我在早年的职业生涯中花了很多时间在技术支持上，修复其他人的软件。因此，我学到了一个经验，那就是降低软件让人厌烦程度的一个重要因素就是它工作的方式是否容易理解。
Btrfs 是复杂的，而修复它则更是如此。Git 属于*本质*复杂，其 [名称](https://dictionary.cambridge.org/dictionary/english/git) 就体现出这一点。（没错，“git” 是一个名词，而非缩写或代号，有实际的意思 —— “饭桶”。）OStree 可以说是针对二进制文件的 Git，这使得它比普通 Git 至少复杂两倍。而 Flatpak 则是 OStree 的封装。
这意味着增加了两层额外的复杂度：首先，对复杂事物的封装只能隐藏其复杂性，而不能消除其复杂性。其次，你不能使用 Flatpak 构建一个操作系统，因此你还需要 OStree。
因此，我们将来逐一揭穿关于 Snap 格式和工具的一些误解。这不是一篇入门指南，而是对那些不那么显而易见，并且对 Snap 有所误解的人的一份快速概览。
### 无需商店进行分发
Snap 包其实就是一个 [Squashfs](https://docs.kernel.org/filesystems/squashfs.html)，类似于大多数 Linux 安装介质上的系统镜像。Snap 包以两个文件传递：其中一个是命名为 `_.snap`，该文件包含了软件本身；另一个则是一个伴随的 [声明文件](https://snapcraft.io/docs/assertions)，它为 Snap 提供了数字签名。然后，Canonical 还进一步 [详细阐明](https://snapcraft.io/docs/revisions) 了版本修订的工作原则。
使用 `snap download` 的指令（而非 `snap install`）可以容易获取这些基本文件：
```
# snap download firefox
Fetching snap "firefox"
Fetching assertions for "firefox"
Install the snap with:
  snap ack firefox_3252.assert
  snap install firefox_3252.snap
```
然后，这些文件便可以被复制到另一台设备上进行安装，这种操作不需要访问 Snap 商店，仅需使用输出中的指令即可。
如 Igor 所说：
> 
> “这样，从 Snap 商店中，你可以选择你想要的 Snap 包（如 Firefox），将其放入你的内部仓库中，或是 FTP，或是 NFS 上。接着你可以使用它作为在内部安装 Snap 的来源，而这不需要去访问商店。此外，你还可以将这个操作与你所使用的任何调度或部署机制结合起来，就如配置管理那样。”
> 
> 
> 
### 安装无需声明文件的 Snap 包
通常来说，`snap ack` 命令会首先读取并验证签名，但是你可以选择跳过这个步骤。
```
snap install "downloaded snap" --dangerous
```
上述指令会安装该 Snap 包，并不会验证其签名。请注意，这样做虽然操作简单，但也有一个重要的限制：使用 `--dangerous` 选项安装的 Snap 包不会自动从商店中更新。
所以，实际上，你可以在你的网络内部分发 Snap 包，避免它们试图连接到 Snap 商店，并自主管理更新。
### 管控 snapd 内置的更新机制
另一方面，你可以在不忽略验证机制的前提下，管理和控制操作系统何时以及如何更新 Snap 包。Igor 则曾撰写过关于如何使 Snap [更新暂停](https://snapcraft.io/blog/hold-your-horses-i-mean-snaps-new-feature-lets-you-stop-snap-updates-for-as-long-as-you-need) 的文章。
你可以设置暂停 Snap 的更新一段时间，或永久暂停，甚至只选择暂停特定的 Snap 包，同时也能简单取消此设置。例如：
```
snap refresh --hold
Auto-refresh of all snaps held indefinitely.
```