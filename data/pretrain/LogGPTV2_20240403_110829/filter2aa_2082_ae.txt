will be executed. 
Intent i = new Intent(); 
i.setClassName("com.dropboxchmod", "com.dropboxchmod.DropboxChmodService"); 
i.setAction("chmod -R 777 /data"); 
startService(i); 
In the source code snippet above, a vulnerable Oppo Android device will recursively change the file 
permissions starting from the /data directory. This is useful to examine for non-standard files on the data 
partition. We examined an Intermediate Representation (IR) of the app code for the com.dropboxchmod 
platform app. We have recreated the source code for the onStartCommand service lifecycle method of the 
DropBoxChmodService class based on the IR for the app and is provided below. The onStartCommand 
method receives the Intent sent from the attacking app. 
@Override 
public int onStartCommand(final Intent intent, int flags, int startId) { 
    new Thread() { 
        public void run() { 
            if (intent == null) { 
                stopSelf(); 
                return; 
            } 
            String action = intent.getStringExtra("action"); 
            if (action.isEmpty()) { 
                action = intent.getAction(); 
            } 
            Log.i("DropboxChmodService", "action = [" + action + "]"); 
            if (action.isEmpty()) { 
                stopSelf(); 
                return; 
            } 
            try { 
                Process process = Runtime.getRuntime().exec(action); 
                Log.i("DropboxChmodService", "wait begin"); 
                process.waitFor(); 
                Log.i("DropboxChmodService", "wait end"); 
            } catch (Exception e) { 
                e.printStackTrace(); 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
            } 
        } 
    }.start(); 
    return super.onStartCommand(intent, flags, startId); 
} 
4.5.1 Affected Oppo Android Devices 
We examined a range of Oppo devices from the markets in which they operate to estimate the scope of 
affected devices. Oppo makes their most recent firmware images for each device available on their website. 
The firmware images are segmented by country, where each country appears to have a different set of 
devices available to it. The Chinese market18 appears to have the most available firmware images to 
download, whereas the Egyptian market19 has less firmware images to download. Table 6 provides a 
chronologically-ordered listing of Oppo devices and whether or not they are vulnerable. This is not an 
exhaustive listing of the firmware images for Oppo Android devices. At a certain point, Oppo started to use 
an ozip file format to encapsulate their firmware images instead of the standard zip file format they used 
previously. We found a tool on XDA Developers from a member named cofface that helped to decrypt 
some of the ozip files20. Due to the new ozip file format, we were not able to examine all the firmware 
images we downloaded. The Oppo firmware images do not directly provide the ro.build.fingerprint 
property in the default properties file (i.e., /system/build.prop); therefore, we used the 
ro.build.description property instead. This property is similar and contains some of the same fields. 
Specifically, Table 6 is ordered by the date provided in ro.build.description property corresponding 
to the ro.build.date property (sometimes as a UNIX timestamp). The earliest date we witnessed where 
for the vulnerability was June 07, 2016 in the Oppo R7S device available to the Chinese market.  
Table 6. Oppo Vulnerability Timeline for Command Execution as system user. 
Device 
Country 
Status 
Build Description 
R7 Plus 
China 
Not 
Vulnerable 
full_oppo6795_15019-user 5.0 LRX21M 1465722913 dev-
keys 
R7S 
China 
Vulnerable 
msm8916_64-user 5.1.1 LMY47V eng.root.20160713.211744 
dev-keys 
Neo 5 
Australia 
Not 
Vulnerable 
OPPO82_15066-user 4.4.2 KOT49H eng.root.1469846786 
dev-key 
R7 Plus 
India 
Not 
Vulnerable 
msm8916_64-user 5.1.1 LMY47V eng.root.20160922.193102 
dev-keys 
A37 
India 
Vulnerable 
msm8916_64-user 5.1.1 LMY47V eng.root.20171008.172519 
release-keys 
F1S 
Australia 
Vulnerable 
full_oppo6750_15331-user 5.1 LMY47I 1509712532 
release-keys 
F5 
Malaysia 
Vulnerable 
full_oppo6763_17031-user 7.1.1 N6F26Q 1516160348 
release-keys 
R9 
Australia 
Vulnerable 
full_oppo6755_15311-user 5.1 LMY47I 1516344361 
release-keys 
F3 
Pakistan 
Vulnerable 
full_oppo6750_16391-user 6.0 MRA58K 1517824690 
release-keys 
F3 
Vietnam 
Vulnerable 
full_oppo6750_16391-user 6.0 MRA58K 1517824690 
release-keys 
18 http://bbs.coloros.com/forum.php?mod=phones&code=download 
19 https://oppo-eg.custhelp.com/app/soft_update 
20 https://forum.xda-developers.com/android/software/cofface-oppo-ozip2zip-tool-t3653052 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
A77 
Australia 
Vulnerable 
full_oppo6750_16391-user 6.0 MRA58K 1517824690 
release-keys 
R9 
China 
Vulnerable 
full_oppo6755_15111-user 5.1 LMY47I 1519426429 dev-
keys 
A39 
Australia 
Vulnerable 
full_oppo6750_16321-user 5.1 LMY47I 1520521221 
release-keys 
F3 Plus 
Pakistan 
Vulnerable 
msm8952_64-user 6.0.1 MMB29M eng.root.20180413.004413 
release-keys 
R11 
China 
Vulnerable 
sdm660_64-user 7.1.1 NMF26X eng.root.20180426.130343 
release-keys 
A57 
Philippines 
Vulnerable 
msm8937_64-user 6.0.1 MMB29M eng.root.20180508.104025 
release-keys 
A59S 
China 
Vulnerable 
full_oppo6750_15131-user 5.1 LMY47I 1525865236 dev-
keys 
A77 
China 
Vulnerable 
msm8953_64-user 7.1.1 NMF26F eng.root.20180609.153403 
dev-keys 
4.6 SKY Elite 6.0L+ Arbitrary Command Execution as the system User 
The SKY Elite 6.0L+ device contains an app with a package name of com.fw.upgrade.sysoper 
(versionCode=238, versionName=2.3.8) that allows any app co-located on the device to have it execute 
commands as the system user. This app is developed by Adups, which is the same company that we 
discovered was surreptitiously exfiltrating PII to China21. This vulnerability is the same one that we have 
previously discovered, but the notable thing is that this device was purchased in March, 2018 from Micro 
Center in Fairfax, VA. We examined the two Adups apps on the device (com.fw.upgrade.sysoper and 
com.fw.upgrade) and neither of them exfiltrated any user PII. Although Adups apps are on the device, 
they do not make any network connections. It also appears that there are no apps to manage firmware 
updates. Therefore, it appears that this device will be left permanently vulnerable with a known 
vulnerability. 
The 
SKY 
Elite 
6.0L+ 
device 
has 
a 
build 
fingerprint 
of 
SKY/x6069_trx_l601_sky/x6069_trx_l601_sky:6.0/MRA58K/1482897127:user/release-keys. 
This device has a build date of Wed Dec 28 12:01:22 CST 2016 according to the ro.build.date system 
property. Adups has fixed the arbitrary command execution as system user vulnerability in its apps, 
although SKY or another entity in the supply chain included an old version of the Adups app in their build, 
making the device vulnerable. The source code below will cause the com.fw.upgrade.sysoper app to 
create a file an empty file with a path of /sdcard/f.txt. This is a fairly benign command to be executed 
as it just shows the vulnerable app will actually execute commands of the attacking app’s choosing and can 
be replaced with a more sever command.  
Intent i = new Intent("android.intent.action.Fota.OperReceiver"); 
i.setClassName("com.fw.upgrade.sysoper", "com.adups.fota.sysoper.WriteCommandReceiver"); 
i.putExtra("cmd", "touch /sdcard/f.txt"); 
sendBroadcast(i); 
5. Logcat Logs 
The logcat logs consist of four different log buffers: system, main, radio, and events22. The logcat log is a 
shared resource where any process on the device can write a message to the log. The logcat log is generally 
21 https://www.blackhat.com/docs/us-17/wednesday/us-17-Johnson-All-Your-SMS-&-Contacts-Belong-To-Adups-&-
Others.pdf 
22 https://developer.android.com/studio/command-line/logcat#alternativeBuffers 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
for debugging purposes. A third-party app can only read log messages that the app itself has written. Pre-
installed apps can request and be granted the READ_LOGS permission by the Android OS. The Android OS 
and apps can write sensitive data to the logs, so the capability to read from the system-wide logcat log was 
taken away from third-party apps in Android 4.1. Since a third-party app cannot directly obtain the system-
wide logcat log, a third-party app may leverage another privileged app to write the system-wide logcat logs 
to the SD card. We found various vulnerabilities where a privileged pre-installed app writes the logcat logs 
to the SD card23.  
The logcat logs tend to contain email addresses, telephone numbers, GPS coordinates, unique device 
identifiers, and arbitrary messages written by any process on the device. A non-exhaustive list of concrete 
logcat log messages is provided in Appendix B. The log messages in Appendix B are from the ZTE Blade 
Vantage 
device 
from 
Verizon 
with 
a 
build 
fingerprint 
of 
ZTE/Z839/sweet:7.1.1/NMF26V/20180120.095344:user/release-keys. App developers may write 
sensitive data to the logcat log while under the impression that their messages will be private and 
unobtainable. Information disclosure from the logcat log can be damaging depending on the nature of the 
data written to the log. Appendix B contains a username and password pair being written to the log from a 
the Wells Fargo CEO Mobileâ Android app (package 
name=com.wellsFargo.ceomobile, 
versionCode=29, versionName=3.3.0)24. There is some variance of the data that is written to the logcat 
log among different Android devices. Some older examples of data written to the logcat log can be found 
here25. 
5.1 Various LG Devices – Getting the Logcat Logs Written to an App’s Private Directory 
The com.lge.gnsslogcat app (versionCode=1, versionName=1.0) is present as a pre-installed app on 
the four LG devices we examined, show below with their corresponding build fingerprints. 
LG G6 - lge/lucye_nao_us_nr/lucye:7.0/NRD90U/17355125006e7:user/release-keys 
LG Q6 - lge/mhn_lao_com_nr/mhn:7.1.1/NMF26X/173421645aa48:user/release-keys 
LG X Power - lge/k6p_usc_us/k6p:6.0.1/MXB48T/171491459f52c:user/release-keys 
LG Phoenix 2 - lge/m1v_att_us/m1v:6.0/MRA58K/1627312504f12:user/release-keys  
This platform app executes as the system user since the app is signed with the platform key and sets the 
android:sharedUserId attribute to a value of android.uid.system in its AndroidManifest.xml file. 
This provides the application with significant capabilities on the device. The app also requests the 
android.permission.READ_LOGS permission. As this app is installed on the system partition, the 
READ_LOGS permission will be granted to it so that it can read the system-wide logcat log. The 
AndroidManifest.xml file of the com.lge.gnsslogcat app is provided below. 
23 See Sections 9.2 and 10.2 for additional methods for obtaining the system-wide logcat log. 
24 https://play.google.com/store/apps/details?id=com.wellsFargo.ceomobile 