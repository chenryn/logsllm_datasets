         shl  
edx, 8 
         ; EDX=0000bb00 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
440 
逆向工程权威指南（上册） 
         or   
eax, edx 
         ; EAX=ddccbb00 
         movzx  
ecx, BYTE PTR _ip4$[ebp] 
         ; ECX=000000aa 
         or   
eax, ecx 
         ; EAX=ddccbbaa 
         pop  
ebp 
         ret  
0 
_form_IP ENDP 
这里操作的顺序不同。当然这不会影响最后的运算结果。 
在启用优化选项之后，MSVC 2012 会生成另一种算法的应用程序： 
指令清单 38.3  优化的 MSVC2012 带参数/Ob0 的实现 
; denote ip1 as "dd", ip2 as "cc", ip3 as "bb", ip4 as "aa". 
_ip1$ = 8   
; size = 1 
_ip2$ = 12   
; size = 1 
_ip3$ = 16   
; size = 1 
_ip4$ = 20   
; size = 1 
_form_IP PROC 
         movzx  
eax, BYTE PTR _ip1$[esp-4] 
         ; EAX=000000dd 
         movzx  
ecx, BYTE PTR _ip2$[esp-4] 
         ; ECX=000000cc 
         shl  
eax, 8 
         ; EAX=0000dd00 
         or   
eax, ecx 
         ; EAX=0000ddcc 
         movzx  
ecx, BYTE PTR _ip3$[esp-4] 
         ; ECX=000000bb 
         shl  
eax, 8 
         ; EAX=00ddcc00 
         or   
eax, ecx 
         ; EAX=00ddccbb 
         movzx  
ecx, BYTE PTR _ip4$[esp-4] 
         ; ECX=000000aa 
         shl  
eax, 8 
         ; EAX=ddccbb00 
         or   
eax, ecx 
         ; EAX=ddccbbaa 
         ret  
0 
_form_IP ENDP 
这个实现过程还可以描述为：每个字节都写入到其返回值的最低 8 个比特位，并且每次左移一个字节，
并将其与返回值做或操作。重复四次，就能完成函数功能。 
就这样了。然而遗憾的是，可能没其他的办法来实现以上的逻辑了。据笔者所知，目前的 CPU 及其
ISA 还不能把既定比特位或者字节直接复制到其他类型数据里。所以一般都是通过位移和 OR 或运算才能
把 IP 地址转换为 32 位数据。 
38.3  函数 print_as_IP() 
函数 print_as_IP()实现的功能与上面函数完全相反，它将一个 32 位的数值切分成 4 个字节。切分过程
比较简单：只需要将输入的数值分别位移 24 位、16 位、8 位或者 0 位，取最低字节的 0 到 7 位即可。 
指令清单 38.4  非优化 MSVC 2012 
_a$ = 8  
; size = 4 
_print_as_IP PROC 
         push  
ebp 
         mov  
ebp, esp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 38 章  网络地址计算实例 
441 
         mov  
eax, DWORD PTR _a$[ebp] 
         ; EAX=ddccbbaa 
         and  
eax, 255 
         ; EAX=000000aa 
         push  
eax 
         mov  
ecx, DWORD PTR _a$[ebp] 
         ; ECX=ddccbbaa 
         shr  
ecx, 8 
         ; ECX=00ddccbb 
         and  
ecx, 255 
         ; ECX=000000bb 
         push  
ecx 
         mov  
edx, DWORD PTR _a$[ebp] 
         ; EDX=ddccbbaa 
         shr  
edx, 16 
         ; EDX=0000ddcc 
         and  
edx, 255 
         ; EDX=000000cc 
         push  
edx 
         mov  
eax, DWORD PTR _a$[ebp] 
         ; EAX=ddccbbaa 
         shr  
eax, 24 
         ; EAX=000000dd 
         and  
eax, 255 ; probably redundant instruction 
         ; EAX=000000dd 
         push  
eax 
         push  
OFFSET $SG2973 ; '%d.%d.%d.%d' 
         call  
DWORD PTR __imp__printf 
         add  
esp, 20 
         pop  
ebp 
         ret  
0 
_print_as_IP ENDP 
优化 MSVC 2012 程序做的和上面的一样，但是它不会重新加载输入值。 
指令清单 38.5  优化 MSVC 2012 /Ob0 
_a$ = 8  
; size = 4 
_print_as_IP PROC 
         mov  
ecx, DWORD PTR _a$[esp-4] 
         ; ECX=ddccbbaa 
         movzx  
eax, cl 
         ; EAX=000000aa 
         push  
eax 
         mov  
eax, ecx 
         ; EAX=ddccbbaa 
         shr  
eax, 8 
         ; EAX=00ddccbb 
         and  
eax, 255 
         ; EAX=000000bb 
         push  
eax 
         mov  
eax, ecx 
         ; EAX=ddccbbaa 
         shr  
eax, 16 
         ; EAX=0000ddcc 
         and  
eax, 255 
         ; EAX=000000cc 
         push  
eax 
         ; ECX=ddccbbaa 
         shr  
ecx, 24 
         ; ECX=000000dd 
         push  
ecx 
         push  
OFFSET $SG3020 ; '%d.%d.%d.%d' 
         call  
DWORD PTR __imp__printf 
         add  
esp, 20 
         ret  
0 
_print_as_IP ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
442 
逆向工程权威指南（上册） 
38.4  form_netmask()函数和 set_bit()函数 
form_netmask()函数从网络短地址 CIDR 中获取网络子网掩码。当然，或许事先计算出一个查询表、转
换的时候进行表查询的速度可能会更快。但是为了演示位移运算的特征，本节特意采用了这种现场计算的
转换方法。我们这里还编写了一个函数 set_bit()。虽说格式转换这种底层运算本来不应当调用其他函数了，
但是笔者相信 set_bit()函数可以提高代码的可读性。 
指令清单 38.6  优化 MSVC 2012 /Ob0 
_input$ = 8  
; size = 4 
_bit$ = 12   
; size = 4 
_set_bit PROC 
         mov  
ecx, DWORD PTR _bit$[esp-4] 
         mov  
eax, 1 
         shl  
eax, cl 
         or   
eax, DWORD PTR _input$[esp-4] 
         ret  
0 
_set_bit ENDP 
_netmask_bits$ = 8  
   ; size = 1 
_form_netmask PROC 
         push  
ebx 
         push  
esi 
         movzx  
esi, BYTE PTR _netmask_bits$[esp+4] 
         xor  
ecx, ecx 
         xor  
bl, bl 
         test  
esi, esi 
         jle  
SHORT $LN9@form_netma 
         xor  
edx, edx 
$LL3@form_netma: 
         mov  
eax, 31 
         sub  
eax, edx 
         push  
eax 
         push  
ecx 
         call  
_set_bit 
         inc  
bl 
         movzx  
edx, bl 
         add  
esp, 8 
         mov  
ecx, eax 
         cmp  
edx, esi 
         jl   
SHORT $LL3@form_netma 
$LN9@form_netma: 
         pop  
esi 
         mov  
eax, ecx 
         pop  
ebx 
         ret  
0 
_form_netmask ENDP 
set_bit()函数的功能十分单一。它将输入值左移既定的比特位，接着将位移运算的结果与输入值进行或
OR 运算。而后 form_mask()函数通过循环语句重复调用 set_bit()函数，借助循环控制变量 netmask_bits 设置
子网掩码里数值为 1 的各个比特位。 
38.5  总结 
上述程序的结果如下所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 38 章  网络地址计算实例 
443 
netmask=255.255.255.0 
network address=10.1.2.0 
netmask=255.0.0.0 
network address=10.0.0.0 
netmask=255.255.255.128 
network address=10.1.2.0 
netmask=255.255.255.192 
network address=10.1.2.64 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 3399 章
章    循
循环
环：
：几
几个
个迭
迭代
代  
多数循环语句只有一个迭代器。但是在汇编层面，一个迭代器也可能对应多个数据实体。 
下面所示的是一个简单的例子。 
#include  
void f(int *a1, int *a2, size_t cnt) 
{ 
       size_t i; 
       // copy from one array to another in some weird scheme 
       for (i=0; i<cnt; i++) 
              a1[i*3]=a2[i*7]; 
}; 
我们可以看到，每次迭代都有两次乘法运算，这是很耗费时间的操作。能不能优化一下呢？答案是肯
定的。如果仔细看看程序代码，就会发现这个程序中的矩阵的参数是跳跃的，我们能比较容易地不用乘法
就将它计算出来。 
39.1  三个迭代器 
指令清单 39.1  采用 MSVC 2013 x64 优化的代码 
f         PROC 
; RDX=a1 
; RCX=a2 
; R8=cnt 
         test      r8, r8   
; cnt==0? exit then 
         je        SHORT $LN1@f 
         npad      11 
$LL3@f: 
         mov       eax, DWORD PTR [rdx] 
         lea       rcx, QWORD PTR [rcx+12] 
         lea       rdx, QWORD PTR [rdx+28] 
         mov       DWORD PTR [rcx-12], eax 