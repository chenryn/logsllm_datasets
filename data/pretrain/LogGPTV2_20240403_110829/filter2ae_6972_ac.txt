        unsigned int recursion_depth; /* only for search_binary_handler() */
        struct file * file;
        struct cred *cred;    /* new credentials */
        int unsafe;        /* how unsafe this exec is (mask of LSM_UNSAFE_*) */
        unsigned int per_clear;    /* bits to clear in current->personality */
        int argc, envc;
        const char * filename;    /* Name of binary as seen by procps */
        const char * interp;    /* Name of the binary really executed. Most
                       of the time same as filename, but could be
                       different for binfmt_{misc,script} */
        unsigned interp_flags;
        unsigned interp_data;
        unsigned long loader, exec;
    } __randomize_layout;
`do_execveat_common`函数会填充`bprm`变量中内容，之后做一些权限检查，复制及初始化工作，最后调用`exec_binprm`函数执行可执行文件：
    static int exec_binprm(struct linux_binprm *bprm)
    {
        pid_t old_pid, old_vpid;
        int ret;
        /* Need to fetch pid before load_binary changes it */
        old_pid = current->pid;
        rcu_read_lock();
        old_vpid = task_pid_nr_ns(current, task_active_pid_ns(current->parent));
        rcu_read_unlock();
        ret = search_binary_handler(bprm);
        if (ret >= 0) {
            audit_bprm(bprm);
            trace_sched_process_exec(current, old_pid, bprm);
            ptrace_event(PTRACE_EVENT_EXEC, old_vpid);
            proc_exec_connector(current);
        }
        return ret;
    }
其调用`search_binary_handler`函数对`formats`链表进行扫描，并执行其`load_binary`函数，直到其中一个成功解析了可执行文件格式，否则会返回负值：
    /*
     * cycle the list of binary formats handler, until one recognizes the image
     */
    int search_binary_handler(struct linux_binprm *bprm)
    {
        bool need_retry = IS_ENABLED(CONFIG_MODULES);
        struct linux_binfmt *fmt;
        int retval;
        /* This allows 4 levels of binfmt rewrites before failing hard. */
        if (bprm->recursion_depth > 5)
            return -ELOOP;
        retval = security_bprm_check(bprm);
        if (retval)
            return retval;
        retval = -ENOENT;
     retry:
        read_lock(&binfmt_lock);
        list_for_each_entry(fmt, &formats, lh) {
            if (!try_module_get(fmt->module))
                continue;
            read_unlock(&binfmt_lock);
            bprm->recursion_depth++;
            retval = fmt->load_binary(bprm);
            read_lock(&binfmt_lock);
            put_binfmt(fmt);
            bprm->recursion_depth--;
            if (retval mm) {
                /* we got to flush_old_exec() and failed after it */
                read_unlock(&binfmt_lock);
                force_sigsegv(SIGSEGV, current);
                return retval;
            }
            if (retval != -ENOEXEC || !bprm->file) {
                read_unlock(&binfmt_lock);
                return retval;
            }
        }
        read_unlock(&binfmt_lock);
        if (need_retry) {
            if (printable(bprm->buf[0]) && printable(bprm->buf[1]) &&
                printable(bprm->buf[2]) && printable(bprm->buf[3]))
                return retval;
            if (request_module("binfmt-%04x", *(ushort *)(bprm->buf + 2)) elf_ex.e_phnum; i++, elf_ppnt++)
            switch (elf_ppnt->p_type) {
            case PT_GNU_STACK:
                if (elf_ppnt->p_flags & PF_X)
                    executable_stack = EXSTACK_ENABLE_X;
                else
                    executable_stack = EXSTACK_DISABLE_X;
                break;
            case PT_LOPROC ... PT_HIPROC:
                retval = arch_elf_pt_proc(&loc->elf_ex, elf_ppnt,
                              bprm->file, false,
                              &arch_state);
                if (retval)
                    goto out_free_dentry;
                break;
            }
    ......
        retval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),
                     executable_stack);
        if (retval mm;
        struct vm_area_struct *vma = bprm->vma;
        struct vm_area_struct *prev = NULL;
        unsigned long vm_flags;
        unsigned long stack_base;
        unsigned long stack_size;
        unsigned long stack_expand;
        unsigned long rlim_stack;
    ......
        vm_flags = VM_STACK_FLAGS;
        /*
         * Adjust stack execute permissions; explicitly enable for
         * EXSTACK_ENABLE_X, disable for EXSTACK_DISABLE_X and leave alone
         * (arch default) otherwise.
         */
        if (unlikely(executable_stack == EXSTACK_ENABLE_X))
            vm_flags |= VM_EXEC;
        else if (executable_stack == EXSTACK_DISABLE_X)
            vm_flags &= ~VM_EXEC;
        vm_flags |= mm->def_flags;
        vm_flags |= VM_STACK_INCOMPLETE_SETUP;
        ret = mprotect_fixup(vma, &prev, vma->vm_start, vma->vm_end,vm_flags);
        if (ret)
            goto out_unlock;
    ......
`mprotect_fixup`函数进行检查过后，会执行如下语句将`vm_flags`赋值给`vma->vm_flags`：
    int mprotect_fixup(struct vm_area_struct *vma, struct vm_area_struct **pprev,unsigned long start, unsigned long end, unsigned long newflags)
    {
    ......
    success:
        /*
         * vm_flags and vm_page_prot are protected by the mmap_sem
         * held in write mode.
         */
        vma->vm_flags = newflags;
如此一来，`bprm->vma`中的`vm_flags`值为`newflags`，确定了该虚拟地址空间的访问权限，权限定义位于mm.h文件中：
    /*
     * vm_flags in vm_area_struct, see mm_types.h.
     * When changing, update also include/trace/events/mmflags.h
     */
    #define VM_NONE        0x00000000
    #define VM_READ        0x00000001    /* currently active flags */
    #define VM_WRITE    0x00000002
    #define VM_EXEC        0x00000004
    #define VM_SHARED    0x00000008
上述函数调用关系为：
关于NX在CPU层面的实现，以Intel为例。Intel SDM中描述如下：
只有`CPUID.80000001H:EDX.NX [bit 20] =
1`，`IA32_EFER.NXE`才可以置位为1或是0，其支持PAE，4-level，5-level分页，不支持32位经典分页：
`IA32_EFER.NXE`置位为1，XD位才能被设置，否则保留：
内核可以通过`noexec on|off`来配置是否启用NX：
    static int disable_nx;
    /*
     * noexec = on|off
     *
     * Control non-executable mappings for processes.
     *
     * on      Enable
     * off     Disable
     */
    static int __init noexec_setup(char *str)
    {
        if (!str)
            return -EINVAL;
        if (!strncmp(str, "on", 2)) {
            disable_nx = 0;
        } else if (!strncmp(str, "off", 3)) {
            disable_nx = 1;
        }
        x86_configure_nx();
        return 0;
    }
    early_param("noexec", noexec_setup);
`x86_configure_nx()`函数：
    void x86_configure_nx(void)
    {
        if (boot_cpu_has(X86_FEATURE_NX) && !disable_nx)
            __supported_pte_mask |= _PAGE_NX;
        else
            __supported_pte_mask &= ~_PAGE_NX;
    }
其中`X86_FEATURE_NX`定义如下：
    /* AMD-defined CPU features, CPUID level 0x80000001, word 1 */
    /* Don't duplicate feature flags which are redundant with Intel! */
    #define X86_FEATURE_SYSCALL        ( 1*32+11) /* SYSCALL/SYSRET */
    #define X86_FEATURE_MP            ( 1*32+19) /* MP Capable */
    #define X86_FEATURE_NX            ( 1*32+20) /* Execute Disable */
    #define X86_FEATURE_MMXEXT        ( 1*32+22) /* AMD MMX extensions */
    #define X86_FEATURE_FXSR_OPT        ( 1*32+25) /* FXSAVE/FXRSTOR optimizations */
    #define X86_FEATURE_GBPAGES        ( 1*32+26) /* "pdpe1gb" GB pages */
    #define X86_FEATURE_RDTSCP        ( 1*32+27) /* RDTSCP */
    #define X86_FEATURE_LM            ( 1*32+29) /* Long Mode (x86-64, 64-bit support) */
    #define X86_FEATURE_3DNOWEXT        ( 1*32+30) /* AMD 3DNow extensions */
    #define X86_FEATURE_3DNOW        ( 1*32+31) /* 3DNow */
`_PAGE_NX`定义：
    #if defined(CONFIG_X86_64) || defined(CONFIG_X86_PAE)
    #define _PAGE_NX    (_AT(pteval_t, 1) << _PAGE_BIT_NX)
    #define _PAGE_DEVMAP    (_AT(u64, 1) << _PAGE_BIT_DEVMAP)
    #define __HAVE_ARCH_PTE_DEVMAP
    #else
    #define _PAGE_NX    (_AT(pteval_t, 0))
    #define _PAGE_DEVMAP    (_AT(pteval_t, 0))
    #endif
`_PAGE_BIT_NX`定义语句为`#define _PAGE_BIT_NX 63`，与Intel
SDM中描述一致。`__supported_pte_mask`会在`massage_pgprot`函数中使用：
    static inline pgprotval_t massage_pgprot(pgprot_t pgprot)
    {
        pgprotval_t protval = pgprot_val(pgprot);
        if (protval & _PAGE_PRESENT)
            protval &= __supported_pte_mask;
        return protval;
    }
    static inline pte_t pfn_pte(unsigned long page_nr, pgprot_t pgprot)
    {
        return __pte(((phys_addr_t)page_nr << PAGE_SHIFT) |
                 massage_pgprot(pgprot));
    }
    static inline pmd_t pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
    {
        return __pmd(((phys_addr_t)page_nr << PAGE_SHIFT) |
                 massage_pgprot(pgprot));
    }
    static inline pud_t pfn_pud(unsigned long page_nr, pgprot_t pgprot)
    {
        return __pud(((phys_addr_t)page_nr << PAGE_SHIFT) |
                 massage_pgprot(pgprot));
    }
## 0x03 参阅链接
  * [NX(No-eXecute)的实现分析](https://hardenedlinux.github.io/system-security/2016/06/01/NX-analysis.html)
  * [Overall Options](https://gcc.gnu.org/onlinedocs/gcc-9.3.0/gcc/Overall-Options.html#Overall-Options)
  * [Link-Options](https://gcc.gnu.org/onlinedocs/gcc-9.3.0/gcc/Link-Options.html#Link-Options)
  * [Collect2](https://gcc.gnu.org/onlinedocs/gccint/Collect2.html)
  * [getopt_long_only(3) – Linux man page](https://linux.die.net/man/3/getopt_long_only)