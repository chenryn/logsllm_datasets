:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
放弃不使用的块
:::
批丢弃和在线丢弃操作是根据文件系统的功能，可丢弃那些文件系统没有使用的块。这些操作在固态硬盘和精简配置存储中很有帮助。
:::
::: para
[*批忽略操作*]{.emphasis}由用户明确使用
`fstrim`{.command}命令运行。这个命令忽略文件系统中所有与该用户标准匹配到未使用块。在还没企业版
Linux 6.2 以及之后 OS 到 XFS 和 ext4
文件系统中支持这两种操作类型，条件是文件系统到基础块设备支持物理忽略操作。只要
`/sys/block/device/queue/discard_max_bytes`{.filename}
不为零就支持物理忽略操作。
:::
::: para
[*在线忽略操作*]{.emphasis}是在挂载时使用 `-o discard`{.option}
选项指定（可以是在 `/etc/fstab`{.filename} 中或者使用 `mount`{.command}
命令），并实时运行而无需任何用户互动。在线忽略操作只忽略那些从已使用转换到可用状态的块。红帽企业版
Linux 6.2 以及之后到版本中的 ext4 文件系统以及还没企业版 Linux 6.4
以及之后版本中的 XFS 文件系统支持在线忽略操作。
:::
::: para
红帽建议使用批忽略操作除非系统负载不可使用此类批忽略，或者需要使用在线忽略操作保持其性能。
:::
:::
::: section
::: titlepage
## [⁠]{#main-fs.html#idm140329741844048}7.1.4. 应用程序注意事项 {.title}
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
预分配
:::
ext4、XFS 和 GFS2 文件系统支持使用 `fallocate(2)`{.methodname} glibc
调用有效预分配空间。在由于写入模式造成到大量碎片的文件中可导致读取性能极差。预写入可将磁盘空间标记为已分配给某个文件而无需在那个空间中写入任何数据。最将实际数据写入预写入到块中钱，读取操作将返回
0。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#main-fs.html#idm140329741840336}7.2. 文件系统性能侧写 {.title}
:::
::: para
[**tuned-adm**]{.application}
工具可让用户轻松地在已设计成为具体使用案例提高性的大量侧写间切换。特别用来提高存储性能的侧写为：
:::
::: variablelist
[*`latency-performance`*]{.term}
:   ::: para
    用于典型延迟性能调整的服务器侧写。它可禁用 [**tuned**]{.application}
    和 [**ktune**]{.application} 节能机制。`cpuspeed`{.systemitem}
    模块改为 `performance`{.literal}。每个设备的 I/O 提升程序改为
    `deadline`{.literal}。*`cpu_dma_latency`* 参数使用数值
    `0`{.literal}（最小延迟）注册管理电源服务质量以便尽可能减小延迟。
    :::
[*`throughput-performance`*]{.term}
:   ::: para
    用于典型吞吐性能调整的服务器侧写。如果系统没有企业级存储则建议使用这个侧写。它与
    `latency-performance`{.literal} 相同，只是：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        将
        *`kernel.sched_min_granularity_ns`*（调度程序最小优先占用时间间隔）设定为
        `10`{.literal} 毫秒，
        :::
    -   ::: para
        将*`kernel.sched_wakeup_granularity_ns`*（调度程序唤醒间隔时间）设定为
        `15`{.literal} 毫秒。
        :::
    -   ::: para
        将 *`vm.dirty_ratio`*（虚拟机脏数据比例）设定为 40%，并
        :::
    -   ::: para
        启用够名超大页面。
        :::
    :::
[*`enterprise-storage`*]{.term}
:   ::: para
    建议最企业级服务器配置中使用这个侧写，其中包括电池备份控制程序缓存保护以及管理磁盘缓存。它与
    `吞吐量性能`{.literal}类似，只是：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        将 *`readahead`* 值设定为 `4x`{.literal}，同时
        :::
    -   ::: para
        不使用 `barrier=0`{.code} 重新挂载的 root/boot 文件系统。
        :::
    :::
:::
::: para
有关 [**tuned-adm**]{.application} 的详情请查看其 man
page（`man tuned-adm`{.command}），或者*《电源管理指南》*，网址为
。
:::
:::
::: section
::: titlepage
# [⁠]{#main-fs.html#s-storage-fs}7.3. 文件系统 {.title}
:::
::: section
::: titlepage
## [⁠]{#main-fs.html#s-storage-ext4}7.3.1. Ext4 文件系统 {.title}
:::
::: para
ext4 文件系统是红帽企业版 Linux 5 中默认的 ext3
文件系统的扩展。现在最红帽企业版 Linux 6 中默认黑色用
Ext4，同时支持到最大文件系统为 16TB，单一文件最大值为 16TB。它还去除了
ext3 中最多只能有 32000 个子系统的限制。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
对于超过 16TB 到文件系统，我们建议您使用弹性高容量文件系统，比如
XFS。详情请查看 [第 7.3.2 节 "XFS
文件系统"](#main-fs.html#s-storage-xfs){.xref}。
:::
:::
:::
::: para
ext4
文件系统默认是大多数负载的最佳系统，但如果性能分析显示文件系统行为影响到性能，则可以使用以下几个调节选项：
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
内节点表初始化
:::
对于超大文件系统，`mkfs.ext4`{.command}
进程要花很长时间初始化文件系统中到所有内节点表。可使用
*`-E lazy_itable_init=1`*
选项延迟这个进程。如果使用这个选项，内核进程将在挂载文件系统后继续初始化该文件它。可使用
`mount`{.command} 命令的 *`-o init_itable=n`*
选项控制发生初始化到比例，其中执行这个后台初始化的时间约为
1/n。`n`{.literal} 的默认值为 `10`{.literal}。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
Auto-fsync 行为
:::
因为在重命名、截取或者重新写入某个现有文件后，有些应用程序不总是可以正确执行
`fsync()`{.methodname}，在重命名和截取操作后，ext4
默认自动同步文件。这个行为与原有到 ext3 文件系统行为大致相同。但
`fsync()`{.methodname}
操作可能会很耗时，因此如果不需要这个自动行为，请在 `mount`{.command}
命令后使用 *`-o noauto_da_alloc`* 选项禁用它。这意味着该程序必须明确使用
`fsync()`{.methodname} 以保证数据一致。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
日志 I/O 优先权
:::
默认情况下，日志注释 I/O 比普通 I/O 的优先权稍高。这个优先权可使用
`mount`{.command} 命令的 *`journal_ioprio=n`* 选项控制。默认值为
`3`{.literal}。有效值范围为 0-7，其中 0 时最高优先权 I/O。
:::
::: para
其他 `mkfs`{.command} 和调节选项详情请参考 `mkfs.ext4(8)`{.command} 和
`mount(8)`{.command} man page，同时 [kernel-doc]{.package} 软件包的
`Documentation/filesystems/ext4.txt`{.filename} 文件也有它到信息。
:::
:::
::: section
::: titlepage
## [⁠]{#main-fs.html#s-storage-xfs}7.3.2. XFS 文件系统 {.title}
:::
::: para
XFS 是一个鲁棒、高度弹性单一主机 64
位日志文件系统。它完全基于扩展，因此可支持超大文件和文件系统。XFS
系统可拥有的文件数量只受该文件系统中可用空间的限制。
:::
::: para
XFS 支持元数据日志，这样可从崩溃中迅速恢复。XFS
文件系统还可以最挂载和激活时去除并放大碎片。另外，红帽企业版 Linux 6
支持专门用于 XFS 到备份和恢复工具。
:::
::: para
XFS
使用基于扩展到分配，并有大量分配方案可用，比如延迟分配和直接预分配。基于扩展到分配可提供更多简洁、有效到方法跟踪文件系统中使用到空间，并通过减少碎片化和元数据使用到空间提高大文件性能。延迟分配可提高将文件写入连续块组到机会，减少碎片化，提高性能。预分配可用于在程序事先知道它需要写入的数据量到情况下完全防止碎片化。
:::
::: para
XFS 提供卓越的 I/O 灵活性，方法是使用 b-tree
检索所有用户数据和元数据。检索中所有操作的对象计数增长都继承基础 b-tree
的对数伸缩特性。有些 XFS 调节选项提供 `mkfs`{.command} 时的各种 b-tree
宽度，这样就可以改变不同子系统的伸缩特性。
:::
::: section
::: titlepage
### [⁠]{#main-fs.html#idm140329758301232}7.3.2.1. XFS 到基本调节 {.title}
:::
::: para
通常默认的 XFS
格式和挂载选项对大多数负载都是最佳选择。红帽建议使用默认值除非具体配置更改可以对文件系统负载有帮助。如果使用软件
RAID，`mkfs.xfs`{.command}
命令可自动使用正确到条单位和宽度自行配置以便与硬件对应。如果使用硬件
RAID 就需要手动进行配置。
:::
::: para
在大容量（多 TB）文件系统中建议使用 `inode64`{.option}
挂载选项，除非是使用 NFS 和传统 32 位 NFS
客户端导出到文件系统需要对该文件系统到访问。
:::
::: para
建议在经常修改或者迅速增长的文件系统中使用 `logbsize`{.option}
选项。默认值为 `MAX`{.literal}（32 KB，日志条单位），同时最大值为
256 KB。建议最有大量修改的文件系统中使用 256 KB。
:::
:::
::: section
::: titlepage
### [⁠]{#main-fs.html#idm140329758296432}7.3.2.2. XFS 的高级调节 {.title}
:::
::: para
更改 XFS 参数前，您需要理解为什么默认 XFS
参数会造成性能问题。这包括理解您的程序在做什么，以及该文件系统如何应对那些操作。
:::
::: para
可观察到的性能问题可以通过一般由文件碎片或者文件系统中到资源限制造成的调整修正或者减少。处理这些问题有不同的方法，但在有些情况下修复问题需要修改程序配置，而不是修改文件系统配置。
:::
::: para
如果您以前没有处理过这个进程，建议您咨询您到本地红帽支持工程师。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
优化大量文件
:::
XFS
引入文件系统可以拥有的文件数随机限制。通常这个限制会高到根本无法达到的高度。如果您知道默认限制无法满足未来的需要，您可以使用
`mkfs.xfs`{.command}
命令增加可使用的内节点文件系统空间的百分比。如果您在创建文件系统后达到文件限制（通常在尝试创建文件或者目录时出现
ENOSPC 错误信息，即使有可用空间），您可以使用 `xfs_growfs`{.command}
命令调整该限制。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
最单一目录中优化大量文件
:::
文件系统的目录块是固定的，且无法更改，除非最初使用 `mkfs`{.command}
格式化。最小目录块时文件系统块大小，默认为
`MAX`{.literal}（4 KB，文件系统块大小）。通常没有理由减少目录块大小。
:::
::: para
因为该目录结构是基于 b-tree，更改块大小影响每个物理 I/O
可检索或者修改的命令信息量。目录越大，在给定块大小的每个操作需要的 I/O
就更多。