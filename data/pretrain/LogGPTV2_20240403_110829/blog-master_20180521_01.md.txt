## [转载] 什么是一致性哈希算法  
### 作者                                                                                         
digoal                                                                                         
### 日期                                                                                         
2018-05-20                                                                                       
### 标签                                                                                         
PostgreSQL , 一致性哈希                            
----                                                                                         
## 背景               
## 原文  
https://mp.weixin.qq.com/s/bCH-aU8cKS3uT6PwRYNJtA  
## 正文  
#### 1，对于待存储的海量数据，如何将它们分配到各个机器中去？---数据分片与路由  
当数据量很大时，通过改善单机硬件资源的纵向扩充方式来存储数据变得越来越不适用，而通过增加机器数目来获得水平横向扩展的方式则越来越流行。因此，就有个问题，如何将这些海量的数据分配到各个机器中？数据分布到各个机器存储之后，又如何进行查找？这里主要记录一致性Hash算法如何将数据分配到各个机器中去。  
#### 2，衡量一致性哈希算法好处的四个标准  
- ①平衡性。平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。  
- ②单调性。单调性是指如果已经有一些数据通过哈希分配到了相应的机器上，又有新的机器加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到原有的或者新的机器中去，而不会被映射到旧的机器集合中的其他机器上。这里再解释一下：就是原有的数据要么还是呆在它所在的机器上不动，要么被迁移到新的机器上，而不会迁移到旧的其他机器上。  
- ③分散性。  
- ④负载。  
  参考这里：https://blog.csdn.net/cywosp/article/details/23397179  
#### 3，一致性哈希的原理  
由于一般的哈希函数返回一个int（32bit）型的hashCode。因此，可以将该哈希函数能够返回的hashCode表示成一个范围为0---（2^32）-1 环。  
将机器的标识（如：IP地址）作为哈希函数的Key映射到环上。如：  
hash(Node1) =Key1，hash(Node2) = Key2，借用一张图如下：  
![pic](20180521_01_pic_001.jpg)  
同样，数据也通过相同的哈希函数映射到环上。这样，按照顺时针方向，数据存放在它所在的顺时针方向上的那个机器上。这就是一致性哈希算法分配数据的方式！  
#### 4，JAVA实现一致性哈希算法的代码分析  
1、设计哈希函数  
这里采用了MD5算法，主要是用来保证平衡性，即能够将机器均衡地映射到环上。貌似用Jdk中String类的hashCode并不能很好的保证平衡性。  
```  
import java.security.MessageDigest;  
import java.security.NoSuchAlgorithmException;  
/*  
* 实现一致性哈希算法中使用的哈希函数,使用MD5算法来保证一致性哈希的平衡性  
*/  
public class HashFunction {  
   private MessageDigest md5 = null;  
   public long hash(String key) {  
       if (md5 == null) {  
           try {  
               md5 = MessageDigest.getInstance("MD5");  
           } catch (NoSuchAlgorithmException e) {  
               throw new IllegalStateException("no md5 algrithm found");  
           }  
       }  
       md5.reset();  
       md5.update(key.getBytes());  
       byte[] bKey = md5.digest();  
       //具体的哈希函数实现细节--每个字节 & 0xFF 再移位  
       long result = ((long) (bKey[3] & 0xFF) 用来保存虚拟机器节点到实际的物理机器的映射。机器以字符串形式来标识，故hash函数的参数为String。  
```  
for (int i = 0; i  tailMap = circle.tailMap(hash);  
   hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();  
}  
```  
完整代码：  
```  
import java.util.Collection;  
import java.util.HashSet;  
import java.util.Iterator;  
import java.util.Set;  
import java.util.SortedMap;  
import java.util.SortedSet;  
import java.util.TreeMap;  
import java.util.TreeSet;  
public class ConsistentHash {  
   private final HashFunction hashFunction;  
   private final int numberOfReplicas;  
   // 节点的复制因子,实际节点个数 * numberOfReplicas =虚拟节点个数  
   private final SortedMap circle = new TreeMap();  
   // 存储虚拟节点的hash值到真实节点的映射  
   public ConsistentHash(HashFunction hashFunction, int numberOfReplicas,  
           Collection nodes) {  
       this.hashFunction = hashFunction;  
       this.numberOfReplicas = numberOfReplicas;  
       for (T node : nodes)  
           add(node);  
   }  
   public void add(T node) {  
       for (int i = 0; i  tailMap = circle.tailMap(hash);  
           hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();  
       }  
       return circle.get(hash);  
   }  
   public long getSize() {  
       return circle.size();  
   }  
   /*  
    * 查看MD5算法生成的hashCode值---表示整个哈希环中各个虚拟节点位置  
    */  
   public void testBalance(){  
       Set sets  = circle.keySet();  
       //获得TreeMap中所有的Key  
       SortedSet sortedSets= new TreeSet(sets);  
       //将获得的Key集合排序  
       for(Long hashCode : sortedSets){  
           System.out.println(hashCode);  
       }  
       System.out.println("----each location 's distance are follows: ----");  
       /*  
        * 查看用MD5算法生成的long hashCode 相邻两个hashCode的差值  
        */  
       Iterator it = sortedSets.iterator();  
       Iterator it2 = sortedSets.iterator();  
       if(it2.hasNext())  
           it2.next();  
       long keyPre, keyAfter;  
       while(it.hasNext() && it2.hasNext()){  
           keyPre = it.next();  
           keyAfter = it2.next();  
           System.out.println(keyAfter - keyPre);  
       }  
   }  
   public static void main(String[] args) {  
       Set nodes = new HashSet();  
       nodes.add("A");  
       nodes.add("B");  
       nodes.add("C");  
       ConsistentHash consistentHash = new ConsistentHash(new HashFunction(), 2, nodes);  
       consistentHash.add("D");  
       System.out.println("hash circle size: " + consistentHash.getSize());  
       System.out.println("location of each node are follows: ");  
       consistentHash.testBalance();  
   }  
}  
```  
## 参考  
http://blog.csdn.net/cywosp/article/details/23397179  
http://blog.csdn.net/sparkliang/article/details/5279393  
http://cnblogs.com/hupengcool/p/3659016.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")