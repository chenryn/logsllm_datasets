**Author：Longofo@Knownsec 404 Team**  
**Time: February 20, 2020**  
**Chinese version:**
Not long ago, there was a vulnerability about Apache Dubbo Http
deserialization. It was originally a normal function (it can be verified that
it is indeed a normal function instead of an unexpected Post by calling the
packet capture normally),the serialized data is transmitted via Post for
remote calls,but if Post passes malicious serialized data, it can be used
maliciously. Apache Dubbo also supports many protocols, such as Dubbo (Dubbo
Hessian2), Hessian (including Hessian and Hessian2, where Hessian2 and Dubbo
Hessian2 are not same), Rmi, Http, etc. Apache Dubbo is a remote call
framework. Since the remote call of Http mode transmits serialized data, other
protocols may also have similar problems, such as Rmi, Hessian, etc. I haven't
analyzed a deserialization component processing flow completely before, just
take this opportunity to look at the Hessian serialization, deserialization
process, and [marshalsec](https://github.com/mbechler/marshalsec) Several
gadget chains for Hessian in the tool.
#### About serialization/deserialization mechanism
Serialization/deserialization mechanism(also called marshalling/unmarshalling
mechanism, marshalling/unmarshalling has a wider meaning than
serialization/deserialization), refer to
[marshalsec.pdf](https://www.github.com/ mbechler / marshalsec / blob / master
/ marshalsec.pdf? raw = true), the serialization/deserialization mechanism can
be roughly divided into two categories:
  * Based on Bean attribute access mechanism
  * Based on Field mechanism
##### Based on Bean attribute access mechanism
  * SnakeYAML
  * jYAML
  * YamlBeans
  * Apache Flex BlazeDS
  * Red5 IO AMF 
  * Jackson
  * Castor
  * Java XMLDecoder
  * ...
The most basic difference between them is how to set the property value on the
object. They have common points and also have their own unique processing
methods. Some automatically call `getter (xxx)` and `setter (xxx)` to access
object properties through reflection, and some need to call the default
Constructor, and some processors (referring to those listed above)
deserialized objects If some methods of the class object also meet certain
requirements set by themselves, they will be automatically called. There also
have a XML Decoder processor that can call any method of an object. When some
processors support polymorphism, for example, a certain property of an object
is of type Object, Interface, abstract, etc. In order to be completely
restored during deserialization, specific type information needs to be
written. At this time, you can specify For more classes, certain methods of
concrete class objects are automatically called when deserializing to set the
property values of these objects. The attack surface of this mechanism is
larger than the attack surface based on the Field mechanism because they
automatically call more methods and automatically call methods when they
support polymorphic features than the Field mechanism.
##### Based on Field mechanism
The field-based mechanism is implemented by special native methods (native
methods are not implemented in java code, so it won't call more java methods
such as getter and setter like Bean mechanism.) are invoked like the Bean
mechanism. The mechanism of the assignment operation is not to assign
attributes to the property through getters and setters (some processors below
can also support the Bean mechanism if they are specially specified or
configured). The payload in ysoserial is based on Java Serialization.
Marshalsec supports multiple types, including the ones listed above and the
ones listed below：
  * Java Serialization
  * Kryo
  * Hessian
  * json-io 
  * X Stream
  * ...
As far as method made by objects are concerned, field-based mechanisms often
do not constitute an attack surface. In addition, many collections, Maps, and
other types cannot be transmitted/stored using their runtime
representation(for example, Map, which stores information such as the hashcode
of the object at runtime, but does not save this information when storing),
which means All field-based marshallers bundle custom converters for certain
types (for example, there is a dedicated MapSerializer converter in Hessian).
These converters or their respective target types must usually call methods on
the object provided by the attacker. For example, in Hessian, if the map type
is deserialized, `MapDeserializer` is called to process the map. During this
time, the map `put` method is called, it will calculate the hash of the
recovered object and cause a `hashcode` call (here the call to the `hashcode`
method is to say that the method on the object provided by the attacker must
be called). According to the actual situation, the `hashcode` method may
trigger subsequent other method calls .
#### Hessian Introduction
Hessian is a binary web service protocol. It has officially implemented
multiple languages such as Java, Flash / Flex, Python, C ++, .NET C #, etc.
Hessian, Axis, and XFire can implement remote method invocation of web
services. The difference is that Hessian is a binary protocol and Axis and X
Fire are SOAP protocols. Therefore, Hessian is far superior to the latter two
in terms of performance, and Hessian JAVA is very simple to use. It uses the
Java language interface to define remote objects and integrates
serialization/deserialization and RMI functions. This article mainly explains
serialization/deserialization of Hessian.
Here is a simple test of Hessian Serialization and Java Serialization:
    //Student.java
    import java.io.Serializable;
    public class Student implements Serializable {
        private static final long serialVersionUID = 1L;
        private int id;
        private String name;
        private transient String gender;
        public int getId() {
            System.out.println("Student getId call");
            return id;
        }
        public void setId(int id) {
            System.out.println("Student setId call");
            this.id = id;
        }
        public String getName() {
            System.out.println("Student getName call");
            return name;
        }
        public void setName(String name) {
            System.out.println("Student setName call");
            this.name = name;
        }
        public String getGender() {
            System.out.println("Student getGender call");
            return gender;
        }
        public void setGender(String gender) {
            System.out.println("Student setGender call");
            this.gender = gender;
        }
        public Student() {
            System.out.println("Student default constractor call");
        }
        public Student(int id, String name, String gender) {
            this.id = id;
            this.name = name;
            this.gender = gender;
        }
        @Override
        public String toString() {
            return "Student(id=" + id + ",name=" + name + ",gender=" + gender + ")";
        }
    }
    //HJSerializationTest.java
    import com.caucho.hessian.io.HessianInput;
    import com.caucho.hessian.io.HessianOutput;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    public class HJSerializationTest {
        public static  byte[] hserialize(T t) {
            byte[] data = null;
            try {
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                HessianOutput output = new HessianOutput(os);
                output.writeObject(t);
                data = os.toByteArray();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return data;
        }
        public static  T hdeserialize(byte[] data) {
            if (data == null) {
                return null;
            }
            Object result = null;
            try {
                ByteArrayInputStream is = new ByteArrayInputStream(data);
                HessianInput input = new HessianInput(is);
                result = input.readObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return (T) result;
        }
        public static  byte[] jdkSerialize(T t) {
            byte[] data = null;
            try {
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                ObjectOutputStream output = new ObjectOutputStream(os);
                output.writeObject(t);
                output.flush();
                output.close();
                data = os.toByteArray();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return data;
        }
        public static  T jdkDeserialize(byte[] data) {
            if (data == null) {
                return null;
            }
            Object result = null;
            try {
                ByteArrayInputStream is = new ByteArrayInputStream(data);
                ObjectInputStream input = new ObjectInputStream(is);
                result = input.readObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return (T) result;
        }
        public static void main(String[] args) {
            Student stu = new Student(1, "hessian", "boy");
            long htime1 = System.currentTimeMillis();
            byte[] hdata = hserialize(stu);
            long htime2 = System.currentTimeMillis();
            System.out.println("hessian serialize result length = " + hdata.length + "," + "cost time：" + (htime2 - htime1));
            long htime3 = System.currentTimeMillis();
            Student hstudent = hdeserialize(hdata);
            long htime4 = System.currentTimeMillis();
            System.out.println("hessian deserialize result：" + hstudent + "," + "cost time：" + (htime4 - htime3));
            System.out.println();
            long jtime1 = System.currentTimeMillis();
            byte[] jdata = jdkSerialize(stu);
            long jtime2 = System.currentTimeMillis();
            System.out.println("jdk serialize result length = " + jdata.length + "," + "cost time：" + (jtime2 - jtime1));
            long jtime3 = System.currentTimeMillis();
            Student jstudent = jdkDeserialize(jdata);
            long jtime4 = System.currentTimeMillis();
            System.out.println("jdk deserialize result：" + jstudent + "," + "cost time：" + (jtime4 - jtime3));
        }
    }
The results are as follows:
    hessian serialize result length = 64,cost time：45
    hessian deserialize result：Student(id=1,name=hessian,gender=null),cost time：3
    jdk serialize result length = 100,cost time：5
    jdk deserialize result：Student(id=1,name=hessian,gender=null),cost time：43
Through this test, it can be easily seen that Hessian deserialization takes
less space than JDK deserialization results. Hessian serialization takes
longer than JDK serialization, but Hessian deserialization is fast. And both
are based on the Field mechanism, no getter and setter methods are called, and
the constructor is not called during deserialization.
#### Hessian concept map
The following are the conceptual diagrams commonly used in the analysis of
Hessian on the Internet. In the new version, these are the overall structures,
and I Just use it directly:
  * Serializer: Serialized interface
  * Deserializer: deserializer interface
  * Abstract Hessian Input: Hessian custom input stream, providing corresponding read various types of methods
  * Abstract Hessian Output: Hessian custom output stream, providing corresponding write various types of methods
  * Abstract Serializer Factory
  * Serializer Factory: Standard implementation of Hessian serialization factory
  * ExtSerializer Factory: You can set a custom serialization mechanism, which can be extended through this Factory
  * Bean Serializer Factory: Force the serialization mechanism of the Serializer Factory's default object to be specified, and specify to use the Bean Serializer to process the object
Hessian Serializer/Derializer implements the following
serializers/deserializers by default. Users can also customize
serializers/deserializers through interfaces/abstract classes:
When serializing, it will select the corresponding serialization according to
different types of objects and attributes for serialization; when
deserializing, it will also select different deserializers according to
different types of objects and attributes; each type of serializer also has
specific Field Serializer. Note here that Java Serializer/Java Deserializer
and Bean Serializer/Bean Deserializer are not type serializers/deserializers,
but belong to mechanism serializers/deserializers:
  * Java Serializer: Get all bean properties for serialization by reflection, exclude static and transient properties, and perform recursive serialization on all other properties (such as the property itself is an object)
  * Bean Serializer follows the conventions of pojo beans, scans all the methods of the bean, and finds that the properties of the get and set methods are serialized. It does not directly manipulate all the properties, which is gentle.
#### Hessian deserialization process
Here a demo is used for debugging. The Student property contains String, int,
List, Map, Object type properties, and the property setter and getter methods
are added, as well as the read Resovle, finalize, to String, hash Code
methods, and The output was carried out for easy observation. Although it will
not cover all the logic of Hessian, we can roughly see its appearance:
    //people.java
    public class People {
        int id;
        String name;
        public int getId() {
            System.out.println("Student getId call");
            return id;
        }
        public void setId(int id) {
            System.out.println("Student setId call");
            this.id = id;
        }
        public String getName() {
            System.out.println("Student getName call");
            return name;
        }
        public void setName(String name) {
            System.out.println("Student setName call");
            this.name = name;
        }
    }
    //SerialTest.java
    public class SerialTest {
        public static  byte[] serialize(T t) {
            byte[] data = null;
            try {
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                HessianOutput output = new HessianOutput(os);
                output.writeObject(t);
                data = os.toByteArray();
            } catch (Exception e) {