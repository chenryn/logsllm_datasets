title:COMET: On-die and In-controller Collaborative Memory ECC Technique
for Safer and Stronger Correction of DRAM Errors
author:Irina Alam and
Puneet Gupta
4
2
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
COMET: On-die and In-controller
Collaborative Memory ECC Technique
for Safer and Stronger Correction of DRAM Errors
Irina Alam and Puneet Gupta
Electrical and Computer Engineering
University of California, Los Angeles
USA
PI:EMAIL
Abstract—DRAM manufacturers have started adopting on-
die error correcting coding (ECC) to deal with increasing error
rates. The typical single error correcting (SEC) ECC on the
memory die is coupled with a single-error correcting, double-
error detecting (SECDED) ECC in the memory controller.
Unfortunately, the on-die SEC can miscorrect double-bit errors
(which would have been safely detected but uncorrected errors
in conventional in-controller SECDED) resulting in triple bit
errors more than 45% of the time. These are then miscorrected
in the memory controller >55% of the time resulting in silent
data corruption. We introduce COllaborative Memory ECC
Technique (COMET), a novel method to efﬁciently design either
the on-die or the in-controller ECC code, that, for the ﬁrst time,
will eliminate silent data corruption when a double-bit error
happens within the DRAM. Further, we propose a collaboration
mechanism between the on-die and in-controller ECC decoders
that corrects most of the double-bit errors without adding any
additional redundancy bits to either of the two codes. Overall,
COMET can eliminate all double-bit error induced silent
data corruptions and correct almost all (99.9997%) double-bit
errors with negligible area, power, and performance impact.
Index Terms—DRAM, Error Correction Codes, ECC,
On-die ECC, Reliability, Bit-steering
I. INTRODUCTION
With increasing rate of scaling induced errors in
DRAM [4], [14], [22], [23], [26], [28], [34], [35], the tradi-
tional method of row/column sparing used by DRAM vendors
to tolerate manufacturing faults [17] has started to incur large
overheads. To improve yields and provide protection against
single-bit failures in the DRAM array at advanced technology
nodes, memory manufacturers have started incorporating on-
die error correction coding (on-die ECC) [4], [31], [34]. The
ECC encoding/decoding happens within the DRAM chip. The
parity bits are stored in redundant storage on-chip and are not
sent out of the chip; only the actual data, post correction, is
sent out of the DRAM, making on-die ECC transparent to the
outside world. Though DRAM manufacturers do not usually
reveal their on-die ECC design and implementation, prior
works [28], [31]–[34] and industry whitepapers [4] indicate
the most commonly used scheme is (136,128) Single Error
Correcting (SEC) Hamming code [16]. This code corrects
any single-bit error that occurs in 128 bits of data with the
help of 8 bits of additional parity. On-die ECC is typically
paired with rank-level single error correction, double error
Figure 1: Example showing the difference when a DBE occurs
in DRAMs with and without on-die SEC. Both systems have
in-controller SECDED. Assumption: data and parity bits that
get decoded in the controller in one cycle are sent from the
same DRAM chip across multiple beats.
detection (SECDED) code in the memory controller. Several
server and desktop class processors implement in-controller
SECDED ECC [2], [3], [12]. The main focus of in-controller
ECC is to correct errors that are visible outside the memory
chip, mostly due to failures in pins, sockets, buses, etc.
The on-die SEC code covers for all the single-bit errors
(SBE) [4], [8] within the DRAM chip. However, with
incessant memory density scaling, the rate of double-bit
errors (DBE) within the memory array is growing [23], [28],
[34]; so DBEs are no longer a rarity. However, a double
error correcting (DEC) code would incur large overheads
and negate some of the density scaling beneﬁts. As a result,
it is not practical for DRAM manufacturers to have on-die
DEC mechanism. In today’s high reliability systems, the
rank-level in-controller ECC is expected to detect DBEs and
the system then restarts or rolls back to a checkpoint [11].
With an on-die SEC engine alongside in-controller SECDED
engine, the data pipeline now includes two error correcting
engines. This unfortunately increases the chances of silent
data corruption (SDC) when a DBE occurs in a memory
array. Let us explain this using an example.
As shown in Figure 1, without on-die SEC, the data goes
through a single round of decoding inside the memory con-
troller where the SECDED decoder ﬂags the DBE. Now, with
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00024
124
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
on-die SEC, the data ﬁrst goes through the SEC decoder that
only ensures protection against SBEs. For DBEs, this SEC
decoder has a >45% (on average based on 10 random SEC
constructions) chance of miscorrection resulting in a triple-bit
error. The resulting data with the triple-bit error, when sent
through the in-controller SECDED decoder, has a ∼55% (on
average, based on 10 random SECDED constructions) chance
of being falsely considered as a SBE. The SECDED decoder
would then miscorrect and silently corrupt the data. For a raw
bit error rate of 10−4 that is often seen in recent works and
industrial studies [8], [23], [28], [29], [34], we can expect
SDC once every ∼ 300,000 SECDED decoding cycles in a
system with a single DRAM chip that has on-die (136,128)
SEC and in-controller (72, 64) SECDED. Thus, on-die ECC
actually worsens memory reliability when DBEs occur in the
memory array. So, we ﬁrst ask the question: Can we eliminate
DBE-induced SDCs by careful construction of either of the
two codes? In this work, we, for the ﬁrst time, provide
a framework to efﬁciently design either the on-die SEC
code or the in-controller SECDED code in order to elimi-
nate silent data corruption with no additional parity bits.
Our next observation is, for every 128-bits of data, with
the two ECC schemes combined, we now have 8 more
bits of parity (from on-die ECC) as compared to having
only in-controller ECC. When do these extra 8-bits really
help? They help only in the rare case when a single-bit fault
outside the memory array (e.g. link/pin failure) coincides
with an SBE in the chip. In this case, the in-controller
ECC sees only the single-bit ﬂip introduced by the external
fault and is able to correct it. Other than that, the on-die
SEC is not improving protection on top of what the in-
controller code was already doing. So, we also asked the
question: With extra 8-bits of redundancy, can we enhance
memory reliability? We further enhance the on-die SEC
construction and propose a collaborative mechanism to
now correct majority of the double-bit errors that occur
inside the memory array.
This work, Collaborative Memory ECC Technique
(COMET), makes the following key contributions:
• We provide a detailed on-die SEC code construction
technique (SEC-COMET)
that completely eliminates
DBE-induced SDCs at no additional parity storage
overhead. The design technique exploits the overall
memory system architecture and steers the miscorrected
bit when a DBE occurs in such a way that the in-controller
SECDED,
its implementation, never
encounters all three bits of errors in the same decoding
cycle, thereby guaranteeing no SDC. For SEC-COMET
to be effective against SDCs, no special in-controller
SECDED construction is required. The two codes (on-die
and in-controller) can be constructed independently.
irrespective of
• If the DRAM manufacturer does not guarantee on-die SEC-
COMET, we show how the in-controller SECDED can then
be specially designed to take care of SDCs. We provide a
detailed construction of the SECDED code for a given on-
die SEC implementation and memory system architecture.
• We develop a collaborative DBE correction technique.
The SEC code needs to be designed with an additional
constraint and the memory controller needs to send a
special command with additional
information once a
detectable-but-uncorrectable error (DUE) is ﬂagged. This
collaborative technique can correct almost all (99.9997%)
DBEs while ensuring no miscorrections.
• SEC-COMET implementations require no additional
parity bits, have less than 5% decoder area and latency
overheads and less than 10% decoder power overhead as
compared to the most efﬁcient SEC construction.
II. BACKGROUND
This section provides an overview of DRAM operation,
coding theory background and comparison of ECC codes
seen in today’s DRAM-based memory subsystems.
A. DRAM Operation
Dynamic Random Access Memory (DRAM) chip cell
stores a single bit of data in a capacitor
[9], [10]. These
cells are organized in two dimensional arrays called banks.
A read/write command accesses a small subset of columns
in a row and includes multiple steps. First the entire row
is read into a row buffer using the ACTIVATE command.
Then a READ/WRITE command is sent with the column
address to initiate the data transfer. An xN DRAM chip uses
N data pins (DQs) in parallel during data transfer [25], [39].
Typically, more than one DRAM chip is accessed in parallel
to improve bandwidth and they together form a rank. A
single memory access takes multiple cycles – during each
cycle a beat of data (N bits from every chip in a rank) is
transferred. The number of beats transferred in each access
constitutes the memory burst length. The number of cycles
per access and the width of a data beat accessed in each cycle
depends on the memory device and the data access protocol.
If a rank consists of 8 x8 DRAMs and the burst length is
8 beats, it translates to 64-bits of data transfer per beat and
a total of 64B transfer per READ/WRITE command.
B. Linear Hamming Error Correcting Codes
Error correcting code (ECC) detects and/or corrects by
adding redundant parity bits to the original data. A (n,k)
Hamming code protects a k-bit dataword (original data) by en-
coding the data through linear transformation to form a n-bit
codeword. The number of parity bits is equal to n−k. Increas-
ing the number of parity bits increases the minimum Ham-
ming distance between two legal n-bit codewords. A code of
minimum distance dmin is guaranteed to correct t =(cid:3) 1
(dmin−
1)(cid:4) erroneous symbols. The encoding is done by multiplying
the dataword ((cid:2)m) with the generator matrix G: (cid:2)mG =(cid:2)c and the
resulting codeword (cid:2)c is written to memory. When the system
reads the memory address of interest, the ECC decoder hard-
ware obtains the received codeword (cid:2)x =(cid:2)c+(cid:2)e. Here, (cid:2)e is an
error-vector of length n that represents where memory faults,
if any, have resulted in changed bits/symbols in the codeword.
The decoder multiplies the received codeword (cid:2)x with parity
check matrix H to calculate the error syndrome: (cid:2)s = H(cid:2)xT.
The following conclusions can be drawn from the syndrome:
2