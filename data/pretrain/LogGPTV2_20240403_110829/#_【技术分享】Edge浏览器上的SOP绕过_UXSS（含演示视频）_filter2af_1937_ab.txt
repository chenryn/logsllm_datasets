然而内部的iframe属于bing，即使它是空白iframe，它的domain仍然是bing.com。改变它名字的唯一方法，是先将它的地址设置为我们能够访问的某个地址，之后我们才能修改它的名字。现在，如果我们想要修改about:blank的地址，这就像在搬起石头砸自己的脚，因为我们首先得成为bing.com，然后才能访问domainless空白页。
请记住：我们的目标是从某个domainless空白页访问某个具有domain的页面。如果我们设置该页面的domain，使之与我们的domain相匹配，那么即使能够访问它也是毫无意义的。因此，在这里我们需要这么做：我们要设置页面的地址，改变iframe的名字然后还原页面地址。这样做我们就能保持原始的domain值，听起来是不是比较复杂？
**小贴士：如何设置x-domain-iframe的名字：**
**1\.
将iframe的地址设为about:blank，这样我们就可以将它的domain设置为我们能够控制的某个domain，如cracking.com.ar**
**2\. 修改iframe的名字**
**3\. 再次将iframe的地址设为about:blank，但这次我们使用的是meta
refresh机制，使它的domain与它的创建者一致（本例中即bing.com）**
就是这么简单。现在内部的iframe已经拥有一个名字，并且它的domain已经恢复为bing.com！代码如下所示：
    // Sets the location of Bing's inner iframe to about:blank
    // But now it is in our domain so we can set a name to it.
    window[0][0].location = "about:blank";
    // Set the inner iframe name to "CHARLES" so we can later inject code
    // using a window.open("javascript:[...]","CHARLES");
    window[0][0].name = "CHARLES";
    // Restore Bing's domain to the about:blank that we've just renamed.
    window[0][0].document.write('');
    window[0][0].document.close();
现在有个好消息，那就是我们没必要要求站点包含“about:blank”的iframe，因为我们总是能够使用上面那种方法完成任务。换句话说，不管bing的内部iframe是否是about:blank都不重要，上面那种方法总是能够奏效。现在好好看一下我们的表演。
成功之门已经开启，我们可以在我们的“data-meta-data” iframe中运行window.open方法，如下所示：
    window.open("javascript:alert(document.cookie)", "CHARLES"); // Fireeeeeeeeeee!!!
你可以使用Edge浏览器[在线测试](http://unsafe.cracking.com.ar/demos/edgedatametadata/bing.html)这个漏洞PoC。
关于这个PoC，有一点需要注意。我们在上面的例子中，使用的是一个http（不安全）连接，因为在https（安全）连接中，使用meta
refresh跳转是被禁止的，因此我们无法重定向到最终的data:uri地址。Edge浏览器错误地认为这种重定向是不安全的。然而，我们在第一步中可以不使用data:uri，换而使用document.write方法，就可以成功绕过这种限制。因此，上面的“data-meta-data”三元组需要换成“document.write(meta-data)”。
我们在上面的PoC中并没有使用这种方法，因为访问上面这个交互式演示网站时，Edge浏览器有三分之一的概率会崩溃。因此，我选择了一个向导式的稳定PoC，而不是上面这个自动化http(s)
PoC。但如下文所示，这种处理无关紧要，因为我们的不安全（http）的domainless空白页仍然可以访问安全的页面。接下来我们来看看一个实际的案例。
**七、真实案例：窃取查尔斯的cookie**
现在是时候看看真实案例了。跟我一起乘坐时光机器，回到过去，将计算机和互联网一起带到天才辈出的那个年代。当时查尔斯·达尔文（Charles
Darwin）正在思考物种的进化问题，阿尔弗雷德·华莱士（Alfred
Wallace）也有类似的想法。查尔斯对黑客有防范意识，因此他使用电脑的方式有点偏执：他从来没有使用已经打开gmail、twitter以及个人文档的浏览器窗口来访问其他链接。
比如，他正在通过任务栏启动一个浏览器的隐私窗口，如下所示：
他心情不错，在另一个浏览器标签中打开了他的Twitter页面，调戏阿尔弗雷德·华莱士，告诉华莱士，自己将要发布一条推文，公布自己的发现。
华莱士的回复几个小时后才姗姗来迟，回复中包含某个链接，用来支持他自己的理论。还记得吗，查尔斯不信任任何人，因此他复制这个链接，将其粘贴到一个新窗口中，这个窗口远离他的私人数据（比如gmail、twitter）。
这种情况下会有什么问题呢？问题多多！就如同世界上大多数网站一样，twitter使用了好几个iframe。事实上，twitter拥有两个具备名字的about:blank
iframe，因此搞定它会比搞定Bing更加容易！在回到我们的故事之前，我们先使用DevTools，枚举一下twitter的iframe以找到合适的利用对象。我打开了一个不同的窗口，与查尔斯的会话没有任何关系。
非常棒！dm-post-iframe这个iframe看起来不错，万事俱备，我们马上可以搞定查尔斯的账户。
现在，查尔斯打开了一个新的隐私窗口，加载了华莱士发送给他的URL。他所不知道的是，即使浏览器处于隐私浏览状态下，它们之间也会相互通信。因此，如果我们在自己的domainless
iframe中执行如下代码，情况会怎么样呢？
    window.open("javascript:alert(document.cookie)", "dm-post-iframe");
正如你所看到的，我们现在已经拥有了查尔斯·达尔文的cookie。
你可以使用Edge浏览器[在线测试](http://unsafe.cracking.com.ar/demos/edgedatametadata/cookiesfromcharlie.html)这个漏洞PoC（注意：这个PoC真的会弹出你的Twitter
cookie信息）。
请大家记住，我们并不是真的需要使用隐私模式访问这个网站。我们之所以举上面这个例子，是为了说明在某些特殊场景下我们的漏洞也是可以奏效，但通常情况下我们面临的情况并没有那么复杂，因为人们并没有像查尔斯那样，对链接那么敏感。此外，考虑到攻击者会在流行站点上使用[恶意广告](https://blog.malwarebytes.com/101/2015/02/what-is-malvertising/)等攻击方式来展开攻击，如果攻击者寄生在雅虎广告中，同时用户已经登录到他们的Twitter账户，那么攻击者不需要用户交互就能完成攻击任务。
**八、使用查尔斯·达尔文的身份发布推文**
让我们构造一个更好的PoC。此时我们将以达尔文的身份发布推文，甚至尝试抓取他的密码，而不单单满足于读取他的cookie。请时刻记住，大多数用户（比如查尔斯）会使用密码管理器来自动填写密码。Edge浏览器的密码管理器没有什么特别的地方，因此，如果查尔斯已经保存了他的密码，我们就能抓取到这个密码。这个任务并不是特别难，我们只需要强迫他注销登录，那么登录页面就会自动加载，同时他的信息（用户名和密码）就会通过一个silver播放器发送给我们的服务器。事实上，在这种情况下，除非用户主动与页面交互，否则页面中的表单会处于隐藏状态，然而Edge浏览器使用自动填充方式填写表单，因此我们甚至没有必要设置表单为可见状态。
在运行PoC之前，你要注意到，这个PoC暴露的是你自己的账户信息，而不是查尔斯的。当然没有任何数据会发往服务器，但如果有某人躲在你的背后，他还是可以在常规的alert对话框中看到你的密码，还是小心为好。
**视频一：自动发表推文**
**视频二：手动发表推文**
你可以使用Edge浏览器在线测试这个PoC。
**九、其他的问题**
我也想到了其他问题，比如，我们能够对那些没有about:blank
iframe的页面使用这种技巧吗？当然可以！我们这种方法甚至对那些没有任何iframe的网站都是有效的！请阅读[这篇文章](https://www.brokenbrowser.com/referer-spoofing-patch-bypass/)，其中我们将一个iframe注入到了另一个不同源上。[另一篇文章](https://www.brokenbrowser.com/uxss-ie-htmlfile/)针对的是Internet Explorer浏览器。
对于Facebook而言，这种方法是否也能奏效？我没有facebook账户，因此我没有测试这种情况。但是成功绕过SOP后我们就可以访问地球上的任何一个domain。当然利用情况可能会有些复杂，大家可以努力一下。
这种方法在其他浏览器上是否也能奏效？我没有尝试，但答案显然是否定的。因为UXSS/SOP绕过方法对于不同浏览器来说都是不一样的。
你可以访问这个[网址](https://goo.gl/8UY2y5)下载漏洞利用代码。