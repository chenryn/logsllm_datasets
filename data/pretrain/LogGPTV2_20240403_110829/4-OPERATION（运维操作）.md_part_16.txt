\[root@web1 \~\]# rpmbuild -ba nginx.spec //会报错，没有文件或目录
错误：stat /root/nginx.spec 失败：没有那个文件或目录
虽然报错,但是会创建rpmbuild目录
\[root@Web1111 \~\]# ls
anaconda-ks.cfg initial-setup-ks.cfg lnmp_soft.tar.gz
nginx-1.12.2.tar.gz 公共 视频 文档 音乐
code lnmp_soft nginx-1.12.2 rpmbuild 模板 图片 下载 桌面
\[root@web1 \~\]# ls /root/rpmbuild //查看自动生成的目录结构
BUILD BUILDROOT RPMS SOURCES SPECS SRPMS
备注:SOURCES 放源码包
RPMS 出成果
### 3）准备工作，将源码软件复制到SOURCES目录
\[root@web1 \~\]# cp nginx-1.12.2.tar.gz /root/rpmbuild/SOURCES/
### 创建并修改SPEC配置文件
\[root@web1 \~\]# vim /root/rpmbuild/SPECS/nginx.spec
Name:nginx #软件名:跟刚刚拷贝的,
Version:1.12.2 #软件版本,
Release: 10 #第几次制作RPM包
Summary: Nginx is a web server software. #备注信息
#以上内容就是命令:(yum info 软件名) 能查到的信息
#Group:
#软件分组,按需配置可不用填软件分组,可将多个软件包分到一个组,一次性安装所有
License:GPL
#软件协议GPL:谁都可以复制,修改.如果有人修改了,允许你重新打标签,放上自己的商标再发布,但是发布的必须开源,否则可起诉,受法律保护
URL: www.-.com #网址随便写
Source0:nginx-1.12.2.tar.gz #刚刚拷贝的源码包名
#BuildRequires:
#Requires: #是否有依赖包,不能解决,但是在rpm安装界面会提示
%description #可写更详细的信息
nginx \[engine x\] is an HTTP and reverse proxy server.
%post #安装后脚本,安装完之后执行下面命令.可植入恶意命令
useradd -s /sbin/lonogin/ nginx m //
%post需要手敲,非必需操作：安装后脚本(创建账户)
%prep
%setup --q //自动解压上面Source0填写的源码包，并cd进入目录
%build
./configure #可添加模块\--profile+\*\*\* \--user=\*\* 等等
make %{?\_smp_mflags}
%install
make install DESTDIR=%{buildroot}
%files
%doc
/usr/local/nginx/\* //对哪些文件与目录打包
%changelog
\*.spec 新建spec文件都有以上的内容
Wget  -o /root/.sh 下载
步骤二：使用配置文件创建RPM包
1）安装依赖软件包
\[root@web1 \~\]# yum -y install gcc pcre-devel openssl-devel
2）rpmbuild创建RPM软件包
\[root@web1 \~\]# rpmbuild -ba /root/rpmbuild/SPECS/nginx.spec
\[root@web1 \~\]# ls
/root/rpmbuild/RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm
\[root@Web1111 SPECS\]# rpm -qpi RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm
错误：打开 RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm 失败：
没有那个文件或目录
\[root@Web1111 SPECS\]# rpm -qpi
/root/rpmbuild/BUILDROOT/RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm
错误：打开
/root/rpmbuild/BUILDROOT/RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm 失败：
没有那个文件或目录
\[root@Web1111 SPECS\]# ls
nginx.spec
\[root@Web1111 SPECS\]# cd ..
\[root@Web1111 rpmbuild\]# ls #注意此时是在rpmbuild目录里面
BUILD BUILDROOT RPMS SOURCES SPECS SRPMS
\[root@Web1111 rpmbuild\]# rpm -qpi
RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm
Name : nginx
Version : 1.12.2
Release : 10
Architecture: x86_64
Install Date: (not installed)
Group : Unspecified
Size : 909821
License : GPL
Signature : (none)
Source RPM : nginx-1.12.2-10.src.rpm
Build Date : 2019年01月26日 星期六 14时17分07秒
Build Host : Web1111
Relocations : (not relocatable)
URL : www.suibianxie.com
Summary : suibianxie
Description :
Suibianxie
\[root@web1 \~\]# rpm -qpl nginx-1.12.2-10.x86_64.rpm
/usr
/usr/local
/usr/local/nginx
/usr/local/nginx/conf
/usr/local/nginx/conf/fastcgi.conf
/usr/local/nginx/conf/fastcgi.conf.default
/usr/local/nginx/conf/fastcgi_params
/usr/local/nginx/conf/fastcgi_params.default
/usr/local/nginx/conf/koi-utf
/usr/local/nginx/conf/koi-win
/usr/local/nginx/conf/mime.types
/usr/local/nginx/conf/mime.types.default
/usr/local/nginx/conf/nginx.conf
/usr/local/nginx/conf/nginx.conf.default
/usr/local/nginx/conf/scgi_params
/usr/local/nginx/conf/scgi_params.default
/usr/local/nginx/conf/uwsgi_params
/usr/local/nginx/conf/uwsgi_params.default
/usr/local/nginx/conf/win-utf
/usr/local/nginx/html
/usr/local/nginx/html/50x.html
/usr/local/nginx/html/index.html
/usr/local/nginx/logs
/usr/local/nginx/sbin
/usr/local/nginx/sbin/nginx
步骤三：安装、卸载软件
\[root@web1 \~\]# rpm -ivh RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm
\[root@web1 \~\]# rpm -qa \|grep nginx
\[root@web1 \~\]# /usr/local/nginx/sbin/nginx
\[root@web1 \~\]# curl 
rmp 命令的参数:???
# NSD Operation DAY07
案例1：配置GRE VPN
案例2：创建PPTP VPN
案例3：创建L2TP+IPSec VPN
案例4：NTP时间同步
案例5：pssh远程套件工具
# VPN虚拟专用网:
**概述:**
1.  在公网上建立专用私有网络,进行加密通讯
2.  多用于集团公司的各地子公司建立连接
3.  连接上之后,各个地区的子公司可以像局域网一样通讯
4.  偶尔可用于翻墙,
5.  目前主流的VPN技术(GRE(windows不支持), PPTP, L2TP+IPSec, SSL)
6.  国内单位使用VPN需要备案
**主流VPN：**
-   GRE:不支持windows系统，
-   PPTP
    VPN:点对点隧道协议（pptp）基于拨号使用的PPP协议使用PAP或CHAP之类的加密算法，或者使用Microsoft的点对点加密算法MPPE。
-   L2TP VPN: 第 2 层隧道协议 (L2TP) 是IETF基于L2F
    (Cisco的第二层转发协议)开发的PPTP的后续版本。是一种工业标准 Internet
    隧道协议，其可以为跨越面向数据包的媒体发送点到点协议 (PPP)
    框架提供封装。PPTP和L2TP都使用PPP协议对数据进行封装，然后添加附加包头用于数据在互联网络上的传输。PPTP只能在两端点间建立单一隧道。
    L2TP支持在两端点间使用多隧道，用户可以针对不同的服务质量创建不同的隧道。L2TP可以提供隧道验证，而PPTP则不支持隧道验证。但是当L2TP
    或PPTP与IPSEC共同使用时，可以由IPSEC提供隧道验证，不需要在第2层协议上验证隧道使用L2TP。
    PPTP要求互联网络为IP网络。L2TP只要求隧道媒介提供面向数据包的点对点的连接，L2TP可以在IP(使用UDP)，桢中继永久虚拟电路
    (PVCs),X.25虚拟电路(VCs)或ATM VCs网络上使用。
-   IPSec: IPSec
    的隧道是封装、路由与解封装的整个过程。隧道将原始数据包隐藏(或封装)在新的数据包内部。该新的数据包可能会有新的寻址与路由信息，从而使其能够通过网络传输。隧道与数据保密性结合使用时，在网络上窃听通讯的人将无法获取原始数据包数据(以及原始的源和目标)。封装的数据包到达目的地后，会删除封装，原始数据包头用于将数据包路由到最终目的地。
-   SSL
    VPN：SSL协议提供了数据私密性、端点验证、信息完整性等特性。SSL协议由许多子协议组成，其中两个主要的子协议是握手协议和记录协议。握手协议允许服务器
    和客户端在应用协议传输第一个数据字节以前，彼此确认，协商一种加密算法和密码钥匙。在数据传输期间，记录协议利用握手协议生成的密钥加密和解密后来交换
    的数据。
-   Open VPN：典型的SSL
    VPN应用如OpenVPN，是一个比较好的开源软件。PPTP主要为那些经常外出移动或家庭办公的用户考虑；而OpenVPN主要是针对企业异地两地总分公司之间的VPN不间断按需连接，例如ERP在企业中的应用。OpenVPN
    允许参与建立VPN的单点使用预设的私钥，第三方证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库，以及SSLv3/TLSv1
    协议。OpenVPN能在Linux、xBSD、Mac OS X与Windows
    2000/XP上运行。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。
区别
-   轮使用时速度：几乎没区别
-   轮安全：L2TP高，openvpn更高，PPTP就不怎样了。
例：之前测试过客户端连接PPTP然后在服务端抓包，居然能抓到明文的包，根据别人的包直接就能登录到别人的论坛帐号。不过不需要担心这点，一般服务器管理员不会抓你的包，抓了也要找半天哪个才是论坛登录的包，其次用VPN就会被盗号影响自己声誉，砸自己饭碗。
-   轮连接时速度：
    -   PPTP连接速度很快，如果服务器近+给力的情况下，点一下连接就很快就连上
    -   L2TP就没那么快了，至于OPENVPN，就算是VPN是局域网的，连接时速度也很慢
-   轮网络环境：
    -   pptp，使用率最高的协议，连接速度快而稳定，适合大部分网络
    -   l2tp，安全和兼容性好的协议，适合特殊网络和重视安全网络事物
    -   openvpn，只要服务端无异常和客户端配置正确，基本上没有连不上。而且不容易被检测出使用了代理
个人总结：
PPTP：适合大部分网络，只要工作事物并不是非常重要，可以用这个。
L2TP：网络环境特殊，如：网吧/教育网/铁通网/公司局域网等，这些对PPTP支持不好甚至不支持，在没有映射端口的情况下可以使用
OPENVPN：个人不太喜欢，连接速度慢，还要创建一个网卡，又不能轻易删掉，看着蛋疼
openvpn并不流行，做这个的人并不是很多，服务端配置蛋疼，客户端配置麻烦。vpn协议中流行的就PPTP和L2TP。
# 1 案例1：配置GRE VPN(linux-linux)
不支持windows系统
1.1 问题
本案例要求搭建一个GRE
VPN环境，并测试该VPN网络是否能够正常通讯，要求如下：
启用内核模块ip_gre
创建一个虚拟VPN隧道(10.10.10.0/24)
实现两台主机点到点的隧道通讯
1.2 方案
使用lsmod查看当前计算机已经加载的模块，使用modprobe加载Linux内核模块，使用modinfo可以查看内核模块的信息。
准备实验所需的虚拟机环境，实验环境所需要的主机及对应的IP设置列表如表-1所示，正确配置IP地址、主机名称，并且为每台主机配置YUM源。
![table001 (3)](media/image30.png){width="5.7972222222222225in"
height="0.7625in"}
![image001 (2)](media/image31.png){width="4.600694444444445in"
height="1.31875in"}
## 步骤一：启用GRE模块
（client和proxy都需要操作）
### 1）查看计算机当前加载的模块
\[root@client \~\]# lsmod //显示模块列表
\[root@client \~\]# lsmod \| grep ip_gre //确定是否加载了gre模块
### 2) 加载模块ip_gre
\[root@client \~\]# modprobe ip_gre
\[root@client \~\]# lsmod \| grep ip_gre
ip_gre 22707 0
ip_tunnel 25163 1 ip_gre
gre 13144 1 ip_gre
### 3）查看模块信息
\[root@client \~\]# modinfo ip_gre #filename:存放内核的地方
filename:
/lib/modules/3.10.0-693.el7.x86_64/kernel/net/ipv4/ip_gre.ko.xz
alias: netdev-gretap0
alias: netdev-gre0
alias: rtnl-link-gretap
alias: rtnl-link-gre
license: GPL
rhelversion: 7.4
srcversion: F37A2BF90692F86E3A8BD15
depends: ip_tunnel,gre
intree: Y
vermagic: 3.10.0-693.el7.x86_64 SMP mod_unload modversions
signer: CentOS Linux kernel signing key
sig_key: DA:18:7D:CA:7D:BE:53:AB:05:BD:13:BD:0C:4E:21:F4:22:B6:A4:9C
sig_hashalgo: sha256
parm: log_ecn_error:Log packets received with corrupted ECN (bool)
\[root@client \~\]# cd /lib/modules/3.10.0-693.el7.x86_64/kernel/
\[root@client kernel\]# ls
arch crypto drivers fs kernel lib mm net sound virt
\[root@client kernel\]# find ./ -name \"\*.ko\*\" \|wc -l
2406
#总共2406个内核模块
\[root@client kernel\]# ip help #查看ip 命令的帮助
Usage: ip \[ OPTIONS \] OBJECT { COMMAND \| help }
ip \[ -force \] -batch filename
where OBJECT := { link \| address \| addrlabel \| route \| rule \| neigh
\| ntable \|
tunnel \| tuntap \| maddress \| mroute \| mrule \| monitor \| xfrm \|
netns \| l2tp \| macsec \| tcp_metrics \| token }
OPTIONS := { -V\[ersion\] \| -s\[tatistics\] \| -d\[etails\] \|
-r\[esolve\] \|
-h\[uman-readable\] \| -iec \|
-f\[amily\] { inet \| inet6 \| ipx \| dnet \| bridge \| link } \|
-4 \| -6 \| -I \| -D \| -B \| -0 \|
-l\[oops\] { maximum-addr-flush-attempts } \|
-o\[neline\] \| -t\[imestamp\] \| -ts\[hort\] \| -b\[atch\] \[filename\]
\|
-rc\[vbuf\] \[size\] \| -n\[etns\] name \| -a\[ll\] }
\[root@client kernel\]# ip tunnel help #查看ip tunnel 命令的帮助