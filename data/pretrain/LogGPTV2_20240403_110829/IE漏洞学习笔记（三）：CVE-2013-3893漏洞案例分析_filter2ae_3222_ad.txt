### 代码优化
```javascript
var nop_chunk = nop.substring(0, (0x10000 / 2 - sc.length)); // Unicode编码，所以使用0x10000/2个字节
var sc_nop = sc + nop_chunk;

// 组合成单个大小为0x80000的堆块（heap-feng-shui）
while (sc_nop.length < 0x80000) {
    sc_nop += nop_chunk;
}
```

### EXP执行流分析
直接进入一个gadget，执行栈翻转。`esp`被翻转到`0c0c0c0c`，然后由于栈操作继续提高到`0c0c0c10`，接着通过`ret 4`跳转。在跳转前，`esp`指向`0c0c0c10`，而`ret 4`之后，`esp`变为`0c0c0c18`。

在`0c0c0c18`处埋下`VirtualProtect`的地址，成功进入程序流。`VirtualProtect`实际上是`VirtualProtectEX`的一个外壳，在函数内部，将参数分别入栈再调用`VirtualProtectEX`。检查我们入栈的数据是否正确时，发现`EX`函数比原函数多了一个参数。

执行后，`eax`返回1，说明执行成功，shellcode所在地址已经能够执行。进入shellcode执行，成功弹出窗口。

### 漏洞原因和补丁分析
我们使用IDA逆向分析关键函数`SetMouseCapture`。以下是IDA生成的伪代码：

```c
void __userpurge CDoc::SetMouseCapture(
    int a1,
    CDoc *a2,
    CDoc *lpMem,
    int a4,
    void *a5,
    int a6,
    int a7,
    int a8
) {
    CDoc *v8; // ebx@1
    int v9; // edi@1
    int v10; // eax@6
    int v11; // ecx@7
    void *v12; // eax@11
    CImplPtrAry *v13; // ecx@15
    struct CElementCapture *v14; // esi@15
    int v15; // ecx@17
    int v16; // eax@18
    CMessage *v17; // ST14_4@22
    CMessage *v18; // ecx@22
    CElementCapture *v19; // ecx@23
    CImplPtrAry *v20; // ST14_4@24
    CServer *v21; // ecx@27
    void *v22; // [sp+0h] [bp-A8h]@0
    char v23; // [sp+10h] [bp-98h]@17
    int v24; // [sp+14h] [bp-94h]@17
    int v25; // [sp+A4h] [bp-4h]@6
    void *lpMema; // [sp+B0h] [bp+8h]@12

    v8 = lpMem;
    v9 = a1;

    if (*((_DWORD *)lpMem + 469) & 0x1000) { // 没有对TreeNode对象是否在DOM中进行检查
        v9 = 0;
    }

    if (v9) {
        v25 = (*((_DWORD *)lpMem + 65) >> 2) - 1;
        v10 = v25;
        if (v25 == 0);
        if (v10) {
            // 进一步处理
        }
    }

    // 其他逻辑
}
```

在上述代码中，没有对`TreeNode`对象是否在DOM中进行检查，导致了Use After Free (UAF)漏洞。最终通过`NodeAddRef->GetInterface`触发任意代码执行。

### 参考文献
1. Use After Free Exploits for Humans Part 1 – Exploiting MS13-080 on IE8. winxpsp3[DB/OL].
2. Payload_82. ([https://www.52pojie.cn/home.php?mod=space&uid=817719).暴雷漏洞](https://www.52pojie.cn/home.php?mod=space&uid=817719\).%E6%9A%B4%E9%9B%B7%E6%BC%8F%E6%B4%9E)（CVE-2012-1889）个人漏洞分析报告[DB/OL].
3. 0x9A82. IE浏览器漏洞综合利用技术：堆喷射技术[DB/OL].
4. Geek青松. IE浏览器UAF漏洞分析[DB/OL].
5. luobobo. CVE-2013-3893 详细分析[DB/OL].