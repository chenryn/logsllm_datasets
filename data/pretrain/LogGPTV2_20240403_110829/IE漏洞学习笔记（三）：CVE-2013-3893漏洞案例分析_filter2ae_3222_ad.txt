    ​                var nop_chunk=nop.substring(0,(0x10000/2-sc.length)); //Unicode编码，所以0x10000/2个字节
    ​                var sc_nop=sc+nop_chunk;
    ​    
    ​                //组合成单个大小为0x80000的堆块（heap-feng-shui)
    ​                while(sc_nop.length
####  EXP执行流分析
直接进入一个gadget，执行栈翻转，esp被翻转到0c0c0c0c然后因为栈操作被继续提高到0c0c0c10，然后ret4跳转。
跳转前esp指向0c0c0c10，因为ret 4跳转之后esp变为了0c0c0c18而不是0c0c0c10
在0c0c0c18埋下VirtualProtect的地址，成功进入程序流。
VirtualProtect其实只是VirtualProtectEX的一个外壳，在函数内部，将参数分别入栈再调用VirtualProtectEX。查看我们入栈的数据是否正确，发现EX函数比原函数多了一个参数。
执行之后eax返回1，说明执行成功，shellcode所在地址已经能够执行。
进入shellcode执行，成功弹窗。
###  1.1.5漏洞原因和补丁分析
我们使用IDA逆向分析关键函数SetMouseCapture。
IDA 生成的伪代码
    void __userpurge CDoc::SetMouseCapture(int a1@, CDoc *a2@, CDoc *lpMem, int a4, void *a5, int a6, int a7, int a8)
    {
      CDoc *v8; // ebx@1
      int v9; // edi@1
      int v10; // eax@6
      int v11; // ecx@7
      void *v12; // eax@11
      CImplPtrAry *v13; // ecx@15
      struct CElementCapture *v14; // esi@15
      int v15; // ecx@17
      int v16; // eax@18
      CMessage *v17; // ST14_4@22
      CMessage *v18; // ecx@22
      CElementCapture *v19; // ecx@23
      CImplPtrAry *v20; // ST14_4@24
      CServer *v21; // ecx@27
      void *v22; // [sp+0h] [bp-A8h]@0
      char v23; // [sp+10h] [bp-98h]@17
      int v24; // [sp+14h] [bp-94h]@17
      int v25; // [sp+A4h] [bp-4h]@6
      void *lpMema; // [sp+B0h] [bp+8h]@12
      v8 = lpMem;
      v9 = a1;
      if ( *((_DWORD *)lpMem + 469) & 0x1000 ) //没有对TreeNode对象是否在Dom做检查
    ​    v9 = 0;
      if ( v9 )
      {
    ​    v25 = (*((_DWORD *)lpMem + 65) >> 2) - 1;
    ​    v10 = v25;
    ​    if ( v25 = 0 );
    ​    if ( v10 NodeAddRef->GetInterface，最后导致UAF触发任意代码执行。
## 参考文献
[1].Use After Free Exploits for Humans Part 1 – Exploiting MS13-080 on IE8
winxpsp3[DB/OL].
[2]Payload_82.([https://www.52pojie.cn/home.php?mod=space&uid=817719).暴雷漏洞](https://www.52pojie.cn/home.php?mod=space&uid=817719\).%E6%9A%B4%E9%9B%B7%E6%BC%8F%E6%B4%9E)
（CVE-2012-1889）个人漏洞分析报告[DB/OL].
[3]0x9A82.IE浏览器漏洞综合利用技术：堆喷射技术[DB/OL].
[4]Geek青松.(
IE浏览器UAF漏洞分析[DB/OL]。
[5]luobobo.CVE-2013-3893
详细分析[DB/OL].