I
[^p]
p
d
K
[^\n]
\n
c
\n
[^p]
[^c\n]
m
d
[^\n]
[^\n]
[^\n]
. . .
\n
\n
[^\n]
\n
[^pre]
e
p
a
B
r
F
t
r
D
C
s
G
w
I
s
H
p
E
J
b1 = true
if (b1)
accept(id2)
d
K
A
r
p
[^pr]
[^\n]
X
[\n]
[^c\n]
[\n]
Y
c
200 states
m
Z
d
U
[\n]
V
[^\n]
c1- -
if (c1==0)
accept(id2)
reset c1
c1 = 200
(a) Adding a bit to /retr.*passwd/
(b) Adding a counter to /\ncmd[^\n]{200}/
Figure 2: Auxiliary variables can transform automata so that they do not blow up when combined.
the progress in matching both /cdef/ and the “don’t care”
transitions in the ﬁrst automaton.
In this case, the num-
ber of paths to ambiguous states is ﬁnite, but additional
unambiguous paths in the ﬁrst regular expression would be
partially replicated along these as well, so that in practice a
large number of additional states may need to be created.
Figure 1c depicts the case in which both regular expres-
sions contain a Kleene closure (.*). This introduces ambigu-
ous paths of inﬁnite length since the closure can consume an
inﬁnite number of symbols. When combined with another
automaton A, the closure eﬀectively replicates A in many
cases. When the two automata in the ﬁgure are combined,
the result is similar to a cross-product of states, since the two
automata are heavily interleaved and states must be created
that track each possible position in the ﬁrst automaton with
each possible position in the second. When n expressions of
this form are combined, the number of required states in the
combined automata is exponential in n.
3.3 Eliminating Ambiguity Through Auxiliary
Variables
From a systematic perspective, we can eliminate state-
space explosion by ﬁrst identifying the conditions in which
it cannot occur, and second, specifying transformations that
translate oﬀending automata into automata that satisfy the
conditions without changing semantics. In this context, am-
biguity in automata as deﬁned above provides a suﬃcient set
of conditions, and we relate them to state space explosion
by the following theorems.
Theorem 1. Let D1 and D2 be DFAs with D1 + D2 their
standard product combination. If D1 and D2 are unambigu-
ous, then |D1 + D2|  0 ) do
(cid:2)s,t(cid:3) = WL.pop ()
foreach (β ∈ Σ) do
s(cid:2)
t(cid:2)
if (cid:2)s(cid:2)
= ﬁrst.getNextState(s, β)
= second.getNextState(t, β)
,t(cid:2)(cid:3) /∈ c.states then
c.addState ((cid:2)s(cid:2)
(cid:2)s(cid:2), t(cid:2)(cid:3).instrs.append (s(cid:2)
(cid:2)s(cid:2), t(cid:2)(cid:3).instrs.append (t(cid:2)
WL.push ( (cid:2)s(cid:2)
,t(cid:2)(cid:3))
,t(cid:2)(cid:3))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
.instrs)
.instrs)
c.addTrans ((cid:2)s, t(cid:3),(cid:2)s(cid:2), t(cid:2)(cid:3),β)
17
return c
Algorithm 1. XFA combination.
Instructions
are copied from source states to “paired” states.
[^\npr]
\n
AX
r
p
c
AY
m
AZ
d
AU
AV
reset c1
c1 = 200
BX
e
CX
t
DX
r
EX
c1- -
if (c1==0)
accept(id3)
b1 = true
c1- -
if (c1==0)
accept(sid3)
c1- -
if (c1==0)   accept(id3)
if (b1)  accept(id2)
FX
a
GX
s
HX
s
IX
w
JX
d
KX
Figure 3: Automata produced by combining the
XFAs in Figures 2a and 2b.
Lines 13 and 14 add instructions to combined states from
their original counterparts. For each state q = (cid:8)s, t(cid:9) in a
combined automaton c, we simply copy the instructions from
s and t into q. The correctness of this follows from the fact
that entering combined state q when matching is equivalent
to entering states s and t simultaneously, implying that the
instructions in both s and t need to be executed. Figure 3
shows the results of combining the XFAs in Figures 2a and
2b. For convenience, names of states in the ﬁgure contain
the source states from which they are composed. Note that
this automaton has only 15 states, whereas the combined
DFA requires 2194 states.
Combining many XFAs is an incremental process: new sig-
natures can be combined with an existing automaton as nec-
essary without needing to reconstruct entirely from scratch.
One implicit precondition is that the variable value in the
starting conﬁguration be the same in each automaton. In
practice, the last phase of the construction process ensures
this when mapping to high-level types and instructions.
4.3 Matching to Input
Deep packet inspection performs continuous matching, in
which acceptance is indicated whenever an accepting state
is reached, not just at the end of the input. XFA matching,
given in Algorithm 2, simply extends this model by execut-
ing programs attached to states when they are reached. Note
that since acceptance conditions are implemented as instruc-
tions, no special acceptance tests are needed. A raised alert
is processed identically to any other instruction.
1
2
3
4
5
state curState = M.start
execInstrs ( curState.instrs)
for i ← 0 to len do
curState = curState.nextState(buf [i])
execInstrs ( curState.instrs)
Algorithm 2. Algorithm to match an XFA
against an input buﬀer.
5. OPTIMIZATION
The conditions and model in Sections 3 and 4 allow XFAs
to be independently constructed and easily combined with-
out blowup, but this ﬂexibility comes at a cost: in combined
automata, many auxiliary variables must be maintained (in-
creasing per-ﬂow state size), and states may contain many
instructions to execute (increasing execution time).
In this section, we present a set of optimization techniques
that systematically reduce both program sizes and per-ﬂow
state requirements of combined XFAs. Taking inspiration
from techniques developed for compiler construction [24],
we present three distinct optimizations: exploiting runtime
information and support, combining independent variables,
and moving and merging instructions. The ﬁrst and last
techniques reduce instruction counts, whereas the second
reduces both per-ﬂow state and instruction counts.
5.1 Exposing Runtime Information
Some regular expressions, such as /\ncmd[^\n]{200}/, in-
duce counters that are decremented after every byte once
initialized. For example, when the XFA in Figure 2b is
combined with other automata, the decrement and test in-
structions get replicated to most of the states, as shown
in Figure 3, even though no state explosion occurs. When
many such automata are combined, distinct decrement in-
structions get propagated among all states. Executing these
instructions at every state can signiﬁcantly impact process-
ing times during matching.
Once initialized, the counter in this example will be decre-
mented on all states except those that follow a reset instruc-
tion. Thus, when the counter is initialized at a given payload
oﬀset, the oﬀset at which it would reach 0 is also known. By
maintaining this oﬀset directly, we can eliminate the decre-
ment instruction altogether. This highlights our ﬁrst opti-
mization, which is to provide runtime support for replacing
(and eliminating) common or expensive operations.
Continuing, we extend the runtime environment with a
sorted list holding the payload oﬀsets at which the counter
would reach 0 along with a pointer to the instructions to
be executed when it does. After each symbol is read, the
oﬀset value at the head of this oﬀset list is compared to the
current payload oﬀset, and the consequent instructions are
executed on equality.
In the automata, initialization and
reset instructions are replaced with those that insert into
and remove from the oﬀset list, respectively. This does in-
crease the processing overhead slightly, but the optimization
replaces explicit updates of (potentially) many counter vari-
ables with a single O(1) check after each byte read.
5.2 Combining Independent Variables
Some logically distinct state variables can be reduced to a
single actual variable. For example, if one counter is active
in some set of states and another counter is active in a dis-
joint set, then the two counters can share the same memory
[ctrRST 1]
[^\n]
[ctrSET 1,200,[ALT 3]]
\n
K