inbound traffic that allows traffic to flow in, this rule will allow outbound traffic as well;
there is no need to create a separate rule to allow outbound traffic. These rules are editable
and are applied immediately. You can add, modify, or delete a security group, and these
changes are effective immediately as well. You can perform these actions from the AWS
console or through the command line or an API.
An ENI can be associated with up to five security groups, while a security group can be
associated with multiple instances. However, these instances cannot communicate with
each other unless you configure rules in your security group to allow this. There is one
exception to this behavior: the default security group already has these rules configured.
The following figure shows the security groups set up in my AWS account. This security
group is created for the web server, so it has rules configured in order to allow HTTP and
HTTPS traffic. It also allows SSH access on port 22 for logging into this instance:
Figure 9 - AWS VPC security groups
AWS Virtual Private Cloud
[ 91 ]
Network access control list
The network access control list (NACL), as it is popularly known, is another virtual
firewall provided by AWS VPC to configure inbound and outbound traffic for your subnets
inside a VPC. So, all instances within this subnet are going to use the same configuration for
inbound and outbound traffic. NACLs are used for creating guardrails in an organization
for your network on the cloud as it does not offer granular control. Moreover, NACLs are
usually configured by system administrators in an organization.
Every VPC has a default NACL that allows all inbound and outbound traffic by default.
When you create a custom NACL, it denies all inbound and outbound traffic by default.
Any subnet that is not explicitly associated with an NACL is associated with a default
NACL and allows all traffic, so make sure all subnets in your VPCs are explicitly associated
with an NACL.
NACL uses rules similar to security groups to configure inbound and outbound traffic for a
subnet. Unlike security groups, NACL gives you the option to create allow and deny rules.
NACL is stateless and you will need to create separate rules for inbound and outbound
traffic.
Each subnet in your VPC can be attached to only one NACL. However, one NACL can be
attached to more than one subnet. Rules in NACL are evaluated from the lower to the
higher number, and the highest number you can have is 32776. AWS recommends that you
create rules in multiples of 100, such as 100, 200, 300, and so on, so you have room to add
more rules when required.
The following figure shows network ACL for a public subnet. It allows inbound and
outbound HTTP and HTTPS traffic. This NACL can be used for all public subnets that will
contain all instances that need to access the internet and those that are publicly accessible:
AWS Virtual Private Cloud
[ 92 ]
Figure 10 - AWS VPC NACL
VPC flow logs
VPC facilitates the flow of inbound and outbound traffic for all resources in your VPC. It is
important to monitor the flow of this IP traffic on a continuous basis in order to ensure that
all traffic is going to the desired recipient and is received from expected resources. This
feature is also useful for troubleshooting issues related to traffic not reaching its destination
or vice versa. The VPC flow log is a very important security tool that helps monitor the
security of your network in the AWS cloud.
You can create a flow log for your VPC as well as a subnet and a network interface based on
your requirement. For a VPC flow log, all resources in VPC are monitored. For a subnet
flow log, all resources in a subnet are monitored. This can take up to 15 minutes to collect
data after you have created a flow log.
AWS Virtual Private Cloud
[ 93 ]
Each network interface has a unique log stream that is published to a log group in AWS
CloudWatch logs. You can create multiple flow logs publishing data to one log. These logs
streams consist of flow log records that are essentially log events with fields describing all
the traffic for that resource. Log streams contain flow log records, which are log events
consisting of fields that describe the traffic, such as the accepted traffic or rejected traffic for
that network interface.
You can configure the type of traffic you want to monitor, including accepted, rejected, or
all traffic for the flow log you create. You give this log a name in CloudWatch logs, where it
will be published, and choose a resource you want to monitor. You will also need
the Amazon Resource Name (ARN) of an IAM role that will be used to publish this flow
log to CloudWatch logs group. These flow logs are not real-time log streams.
You can also create flow logs for network interfaces created by other AWS services, such as
AWS RDS, AWS workspaces, and so on. However, these services cannot create flow logs;
instead, you should use AWS EC2 to create flow logs, either from the AWS console or
through the EC2 API. VPC flow logs are offered free of charge; you are charged only for
logs. You can delete a flow log if you no longer need it. It might take several minutes before
this deleted flow log stops collecting data for your network interface.
VPC flow logs have certain limitations. You cannot create VPC flow logs for peered VPCs
that are not in your AWS account. VPC flow logs can't be tagged. A flow log cannot be
modified after it is created; you need to delete this flow log and create another one with the
required configuration. Flow logs do not capture all types of traffic, such as traffic
generated by instances when they contact Amazon DNS servers, traffic to and from
169.254.169.254 for getting instance metadata, and so on.
VPC access control
As discussed in IAM, all AWS services require permission to access their resources. It is
imperative to define access control for VPC as well. You need to grant appropriate
permissions to all users, applications, and AWS services to access all VPC resources. You
can define granular, resource-level permissions for VPC, which allows you to control what
resources could be accessed or modified in your VPC.
You can give permissions such as managing a VPC, a read-only permission for VPC, or
managing a specific resource for VPC, such as a security group or a network ACL.
AWS Virtual Private Cloud
[ 94 ]
Creating VPC
Let's look at steps to create a custom VPC in an AWS account. This VPC will be created
using IPv4 Classless Inter-Domain Routing (CIDR) block. It will have one public subnet
and one public facing instance in this subnet. It will also have one private subnet and one
instance in private subnet. For instance, for a private subnet to access the internet, we will
use a NAT gateway in a public subnet. This VPC will have security groups and network
ACL configured to allow egress and ingress internet traffic along with routes configured to
support this scenario:
Create a VPC with a /16 IPv4 CIDR block such as 10.0.0.0/16.
1.
Create an internet gateway and attach it to this VPC.
2.
Create one subnet with /24 IPv4 CIDR block, such as 10.0.0.0/24, and call it a
3.
public subnet. Note that this CIDR block is a subset of a VPC CIDR block.
Create another subnet with /24 IPv4 CIDR block, such as 10.0.1.0/24 and call
4.
it a private subnet. Note that this CIDR block is a subset of a VPC CIDR block and
it does not overlap the CIDR block of a public subnet.
Create a custom route table and create a route for all traffic going to the internet
5.
to go through the internet gateway. Associate this route table with the public
subnet.
Create a NAT gateway and associate it with the public subnet. Allocate one
6.
Elastic IP address and associate it with the NAT gateway.
Create a custom route in the main route table for all traffic going to the internet to
7.
go through NAT gateway. Associate this route table with the private subnet. This
step will facilitate the routing of all internet traffic for instances in the private
subnet to go through the NAT gateway. This will ensure IP addresses for private
instances are not exposed to the internet.
Create a network ACL for each of these subnets. Configure rules that will define
8.
inbound and outbound traffic access for these subnets. Associate these NACLs
with their respective subnets.
Create security groups for instances to be placed in public and private subnets.
9.
Configure rules for these security groups as per the access required. Assign these
security groups with instances.
Create one instance each in the public and private subnet for this VPC. Assign a
10.
security group to each of them. An instance in a public subnet should have either
a public IP or an EIP address.
Verify that the public instance can access the internet and private instances can
11.
access the internet through the NAT gateway.
AWS Virtual Private Cloud
[ 95 ]
Once all steps are completed, our newly created custom VPC will have the following
architecture. Private instances are referred to as database servers and public instances are
referred to as Web servers in the diagram. Note that the NAT gateway should have the
Elastic IP address to send traffic to the internet gateway as the source IP address. This VPC
has both the public and private subnet in one availability zone; however, in order to have a
highly available and fault-tolerant architecture, you can have a similar configuration of
resources in additional availability zones:
Figure 11 - AWS custom VPC
AWS Virtual Private Cloud
[ 96 ]
VPC connectivity options
One of the major features of AWS VPC is the connectivity options it provides for securely
connecting various networks with their AWS networks. In this section, you will learn about
various connectivity options for AWS VPC, such as connecting remote customer
networks with VPC, connecting multiple VPCs into a shared virtual network, and so on. We
will look at three connectivity options in detail:
Connecting the user network to AWS VPC
Connecting AWS VPC with an other AWS VPC
Connecting the internal user with AWS VPC
Connecting user network to AWS VPC
You can extend and integrate your resources in your remote networks, such as compute
power, security, monitoring, and so on, by leveraging your resources in AWS VPC. By
doing this, your users can access all resources in AWS VPC seamlessly like any other
resource in internal networks. This type of connectivity requires you to have non-
overlapping IP ranges for your networks on the cloud and on-premises, so ensure that you
have a unique CIDR block for your AWS VPC. AWS recommends that you use a unique,
single, non-overlapping, and contiguous CIDR block for every VPC. You can connect your
network with AWS VPC securely in the following ways:
Hardware VPN: You can configure AWS-compatible customer VPN gateways to
access AWS VPC over an industry standard, encrypted IPSec hardware VPN
connection. You are billed for each VPN connection hour, that is, for every hour
your VPC connection is up and running. Along with it, you are charged for data
transfer as well.
This option is easier to configure and install and uses an existing internet
connection. It is also highly available as AWS provides two VPN tunnels in
an active and standby mode by default. AWS provides virtual private
gateway with two endpoints for automatic failover. You need to configure,
customer gateway side of this VPN connection, this customer gateway could
be software or hardware in your remote network.
On the flip side, hardware VPN connections have data transfer speed
limitation. Since they use an internet to establish connectivity, the
performance of this connection, including network latency and availability, is
dependent on the internet condition.
AWS Virtual Private Cloud
[ 97 ]
Direct connect: You can connect your AWS VPC to your remote network using a
dedicated network connection provided by AWS authorized partners over 1-
gigabit or 10-gigabit Ethernet fiber-optic cable. One end of this cable is connected
to your router, the other to an AWS Direct Connect router. You get improved,
predictable network performance with reduced bandwidth cost. With direct
connect, you can bypass the internet and connect directly to your resources in
AWS, including AWS VPC.
You can pair direct connect with a hardware VPN connection for a
redundant, highly available connectivity between your remote networks and
AWS VPC. The following diagram shows the AWS direct connect service
interfacing with your remote network:
Figure 12 - AWS direct connect
AWS Virtual Private Cloud
[ 98 ]
AWS VPN CloudHub: You might have multiple remote networks that need to
connect securely with AWS VPC. For such scenarios, you will create multiple
VPN connections, and you will use AWS VPN CloudHub to provide secure
communication between these sites. This is a hub and spoke model that can be
used either for primary connectivity or as a backup option. It uses existing
internet connections and VPN connections.
You create a virtual private gateway for your VPC with multiple customer
gateways for your remote networks to use AWS VPN CloudHub. These
remote networks should not have overlapping IP networks. The pricing
model for this option is similar to that of a hardware VPN connection.
Software VPN: Instead of a hardware VPN connection, you can also use an EC2
instance in your VPC with a software VPN appliance running in order to connect
your remote network. AWS does not provide any software VPN appliance;
however, you can use software VPN appliances through a range of products
provided by AWS partners and various open source communities present on
AWS marketplace. It also uses the internet for connectivity; hence, reliability,
availability, and network performance are dependent on the internet speed.
This option, however, supports a wide variety of VPN vendors, products,
and protocols. It is completely managed by customers. It is helpful for
scenarios where you are required to manage both ends of a connection, either
for compliance purposes or if you are using connectivity devices that are
currently not supported by AWS.
Connecting AWS VPC with other AWS VPC
If you have multiple VPCs in multiple regions across the globe, you may want to connect
these VPCs to create a larger, secure network. This connectivity option works only if your
VPCs do not have overlapping IP ranges and have a unique CIDR block. Let's look at the
following ways to connect AWS VPC with other AWS VPCs:
VPC peering: You can connect two VPCs in the same region using a VPC peering option in
AWS VPC. Resources in these VPCs can communicate with each other using private IP
addresses as if they are in the same network. You can have a VPC peering connection with a
VPC in your AWS account and VPC in other AWS accounts as long as they are in the same
region.
AWS uses its own existing infrastructure for this connection. It is not a gateway or a VPN
connection that uses any physical device. It is not a single point of failure or a network
performance bottleneck.
AWS Virtual Private Cloud
[ 99 ]
VPC peering is the most preferred method of connecting AWS VPCs. It is suited for many
scenarios for large and small organizations. Let's look at some of the most common
scenarios.
If you need to provide full access to resources across two or more VPCs, you can do that by
peering them. For example, you have multiple branch offices in various regions across the
globe and each branch office has a different VPC. Your headquarter needs to access all
resources for all VPCs for all your branch offices. You can accomplish this by creating a
VPC in each region and peering all other VPCs with your VPC.
You might have a centralized VPC that contains information required by other VPCs in
your organization, such as policies related to human resources. This is a read-only VPC and
you would not want to provide full access to resources in this VPC. You can create VPC
peering connection and restrict access for this centralized VPC.
You can also have a centralized VPC that might be shared with your customers. Each
customer can peer their VPC with your centralized VPC, but they cannot access resources in
other customers' VPC.
Data transfer charges for a VPC peering connection are similar to charges for data transfer
across availability zones. As discussed, VPC peering is limited to VPCs in the same region.
A VPC peering is a one-to-one connection between two VPCs; transitive peering is not
allowed for a peering connection. In the following diagram, VPC A is peered with VPC B
and VPC C; however, VPC B is not peered with VPC C implicitly. It has to be peered
explicitly:
Figure 13 - AWS VPC Transitive Peering
Apart from VPC peering, there are other options for connecting VPCs, such as software
VPN, hardware VPN, and AWS direct connect as well. All of these options have benefits
and limitations similar to the one discussed in the previous section.
AWS Virtual Private Cloud
[ 100 ]
Connecting internal user with AWS VPC
If you want to allow your internal users to access resources in AWS VPC, you can leverage
your existing remote networks to AWS VPC connections using either hardware VPN, direct
connect, or software VPN depending on your requirement. Alternatively, you can combine
these connectivity options to suit your requirements, such as cost, speed, reliability,
availability, and so on.
VPC limits
AWS VPC has limits for various components in a region. Most of these are soft limits and
can be increased by contacting AWS support from the AWS console and submitting a
request by filling the Amazon VPC limits form available in the AWS console.
Let's look at these limits:
Resource
Default limit
VPCs per region
5
Subnets per VPC
200
Elastic IP addresses per region
5
Flow logs per resource in a region
2
Customer gateways per region
50
Internet gateways per region
5
NAT gateways per availability zone
5
Virtual private gateways per region
5
Network ACLs per VPC
200
Rules per network ACL
20
Network interfaces per region
350
Route tables per VPC
200
Routes per route table
50
Security groups per VPC (per region)
500
Rules per security group
50
AWS Virtual Private Cloud
[ 101 ]
Security groups per network interface
5
Active VPC peering connections per VPC
50
VPC endpoints per region
20
VPN connections per region
50
VPN connections per VPC (per virtual private gateway) 10
Table 1 - AWS VPC limit
VPC best practices
In this section, we will go through an exhaustive list of best practices to be followed for 
AWS VPC. Most of these are recommended by AWS as well. Implementing these best
practices will ensure that your resources, including your servers, data, and applications, are
integrated with other AWS services and secured in AWS VPC. Remember that VPC is not a
typical data center and it should not be treated as one.
Plan your VPC before you create it
Always start by planning and designing architecture for your VPC before you create it. A
bad VPC design will have serious implications on the flexibility, scalability, availability, and
security of your infrastructure. So, spend a good amount of time planning out your VPC
before you actually start creating it.
Start with the objective of creating a VPC: is it for one application or for a business unit?
Spec out all subnets you will need and figure out your availability and fault- tolerance
requirements. Find out what all connectivity options you will need for connecting all
internal and external networks. You might need to plan for a number of VPCs if you need to
connect with networks in more than one region.
AWS Virtual Private Cloud
[ 102 ]
Choose the highest CIDR block
Once you create VPC with a CIDR block, you cannot change it. You will have to create
another VPC and migrate your resources to a new VPC if you want to change your CIDR