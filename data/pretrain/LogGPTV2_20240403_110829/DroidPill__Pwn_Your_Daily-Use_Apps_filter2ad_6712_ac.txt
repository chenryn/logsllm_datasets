Broken
Functionality
Intent
Action
 -
“action:name”
UI Integrity
Violation
objects claimed by a guest app in AndroidManifest, and
registers them to the package manager at app installation.
An app object map is generated in this step that records
the mappings between the real object names deﬁned by the
guest app and their virtual names deﬁned by the sandbox
app. (2) The sandbox app’s broker uses the app object map
to conduct the AOT at runtime. Speciﬁcally, for an outgo-
ing public app object, the broker renames it from the real
name to the corresponding virtual name, while for an in-
coming public app object, the broker translates it from the
virtual name to its real name.
We instrument the Binder IPC APIs that interact with the
system services (e.g., activity manager, and account man-
ager). In this way, the broker is able to inspect and modify
the public app objects located in parameters or return values
of the hooked APIs exchanged between the guest app and
the system services. Comparing with NJAS, which performs
AOT over only one of the public app object types, Droid-
Pill’s AOT covers ﬁve types of public app object, which
makes it a more mature system. For example, while the
translation of Intent Action allows DroidPill to support in-
voking an app component via implicit intents within the app,
NJAS does not. In our implementation, we hooked over 100
Android framework APIs to gain a suﬃcient service virtual-
ization.
To achieve storage virtualization, the broker hooks the
low-level I/O functions in native libraries to redirect the ﬁle
accesses from a guest app’s storage to the sandbox app’s
storage. Without this, the access to the guest app’s internal
data storage will be blocked by Android in that the guest
app and the sandbox app have diﬀerent UIDs. Another task
of the broker is to hide the sandbox app in the query results
returned from the package manager to the guest app, which
can be done by hooking the Binder API calls to the package
manager.
3.4.3 An Illustrative Example
Here, we use an example to demonstrate the complex-
ity of the AOT operations. In Android, account manager
is designed to facilitate apps’ authentication with backend
servers, which beneﬁts to app developers. For example,
one copy of authentication code can be shared by multi-
683side VictimWelcomeActivity’s onCreate() function, the bro-
ker of sandbox app ﬁrst intercepts the corresponding Binder
call, IAccountManager$Stub$Proxy.getAuthToken() and its
account parameters containing account type. After then,
DroidPill conducts AOT and changes account type from
the real one (i.e., com.victim.android.account) to the vir-
tual one (i.e., com.droidpill.android.account). While the
account manager uses the virtual account type to retrieve
the virtual authenticator service in cache and invoke its
getAuthToken() via Binder, the broker captures the cor-
responding Binder call (i.e., AbstractAccountAuthentica-
tor$Transport.getAuthToken()) from the app side, and then
reverses the account type. After VictimAccountAuthentica-
tor.getAuthToken() is executed by the victim app, it gener-
ates a bundle object that encapsulates the intent of launch-
ing VictimLogonActivity. Then, the bundle object is passed
to the account manager via another Binder call (i.e., IAc-
countAuthenticatorResponse$Stub$Proxy.onResult()). The
broker intercepts this call and performs AOT over both ac-
count type and activity name from the real ones to vir-
tual ones.
Later, the account manager uses a Binder
call to transfer the modiﬁed bundle object to the frame-
work’s AccountManager$AmsTask object inside the sand-
box app process to launches the logon activity. The bro-
ker captures the corresponding Binder call, AccountMan-
ager$AmsTask$Response.onResult(), from the app side, and
then reverses the account type and the logon activity name.
To sum up, four AOT operations are conducted to get au-
thentication tokens from VictimWelcomeActivity during the
entire app vitualization process, as depicted in Figure 6.
4. ATTACK VECTORS
In this section, we focus on how to use DroidPill to launch
the attack. But, before getting into the details, let’s assume
that a DroidPill malware has been successfully installed on a
device, and the device user treats the malware as a regular
app with the bait’s functionalities.
In order to attack a
benign app, DroidPill needs to hijack the user’s entrance
to a benign app, and force the app to run in the virtual
execution context built by the malware. Two methods (i.e.,
app shortcut manipulation and top activity preemption) are
employed to launch the attack.
4.1 App Shortcut Manipulation
Since Android API level 19 (Kitkat), two new permissions
INSTALL SHORTCUT and UNINSTALL SHORTCUT are
added to AOSP. After acquiring these permissions, an app
is able to create and remove shortcuts from the home screen
for any free app on the same device, even those with diﬀerent
UIDs. With these two permissions, the DroidPill malware
can stealthily substitute the shortcut of a benign app with
its own shortcut that has the same icon and label, which is
not noticed by the user. As a matter of fact, it has been
reported that other Android malware may take advantage
of this weakness to mount phishing attacks [5]. However,
this method may become ineﬀective if the user starts the
app from another entry point (e.g., app manager, and noti-
ﬁcation center).
4.2 Top Activity Preemption
According to [11], a technique that allows an app
to promptly cover a target activity with another one,
when the target activity is brought to the foreground
Figure 5: Code Snippets
ple apps connecting to the same backend server. Therefore,
apps usually create customized authenticator services to
handle related tasks, including storing the credentials (e.g.,
usernames, and passwords), authenticating with backend
servers, and caching authentication tokens. An app registers
the authenticator service in AndroidManifest via the key-
word of android.accounts.AccountAuthenticator within the
“action” and “meta-data” tags, for which Android can locate
in an xml resource ﬁle that deﬁnes account types and other
conﬁguration data. Moreover, account manager maintains
a list of registered authenticator services indexed by their
account types at runtime, and the app can interact with
the account manager to indirectly access these authentica-
tor services via Binder.
Consider a victim app, whose package
is named
com.victim.android, attempts to acquire a valid authenti-
cation token to pull out user data from a backend server
and displays them on the home page when the app starts. If
there is no valid authentication token due to the ﬁrst use or
the token expiration, a logon page is displayed to ask for user
credentials. In particular, the victim app has a home page
activity called VictimWelcomeActivity, and its onCreate()
function contains the code using a hard-coded account type,
com.victim.android.account, to query the account manager
with getAuthentication() for a valid authentication token. In
addition, the victim app implements its authenticator ser-
vice’s core functionalities in the VictimAccountAuthentica-
tor class. As a result, the account manager can redirect
the getAuthentication() call made by VictimWelcomeAc-
tivity to VictimAccountAuthenticator ’s getAuthentication(),
which generates the intent for launching VictimLogonActiv-
ity in that no valid authentication token exists. The relevant
code snippets of VictimWelcomeActivity and VictimAccoun-
tAuthenticator are shown in Figure 5.
In order to virtualize the victim app, DroidPill’s sand-
box app registers a virtual authenticator service with a
virtual account type named com.droidpill.android.account,
and a virtual
logon activity named DroidpillLogonActiv-
ity, via its manifest ﬁle. When the victim app runs on
top of the sandbox app and invokes getAuthToken() in-
684Figure 6: Function Call Flows of the Example (Dotted functions are hooked to perform the AOT operations)
is widely used by app lockers. There
on the screen,
are three ways for the malware to learn what the on-
top activity is:
(1) read the system log, (2) run the
android.app.AcitivityManager.getRunningTasks() API, and
(3) perform side-channel attacks via accessing the proc ﬁle
system [10] [12]. While the ﬁrst two are blocked in Android
4.1 and 5.0, respectively, as far as we know, the last one is
still eﬀective for all Android versions.
In order to attack the on-top activity of a benign app
launched by a user, the DroidPill malware can employ side-
channel attacks to start the same activity in its sandbox to
occupy the top activity position, and block the user’s view
to the original activity running in the native context. Note
that the attack should take place quickly such that the user
would not see the UI anomaly (e.g., one activity UI showing
up twice). However, after this attack, two duplicate activity
icons could be displayed in the overview screen, and it breaks
UI Integrity. To address this, we leverage the task hijacking
attack to remove the duplicated icon [9]. For example, in the
DroidPill prototype, we manipulate the “taskAﬃnity”, “al-
lowTaskReparenting” and “exclueFromeRecents” attributes
of the guest app’s activities in the sandbox app’s Android-
Manifest in the way such that Android places the native
activity and the sandboxed one in the same activity task,
and the former is on top of the later in the activity stack.
Moreover, android.app.Activity.onBackPressed() is hooked
to ensure that the native activity’s UI is skipped when the
“Back” button is clicked. Note that a malware built based on
the inclusive app virtualization cannot overcome the dupli-
cate activity icons in the overview screen, because a sandbox
app cannot programmatically change the “taskAﬃnity” at-
tribute of its dummy activities.
Table 4: Quadrant Test Result
2D
CPU MEM
4.76% 1.54%
12.54% 1.25% 6.01%
6.87% 0.47% 112.32% 0.00% 9.90%
DroidPill
NJAS
I/O
3D
5. EVALUATION
After implementing DroidPill with 3365 lines of C++ code
and 2536 lines of Java code in Android 4.4, we compare its
performance with that of NJAS, and then use the prototype
to launch ﬁve attacks in diﬀerent scenarios.
5.1 Performance
In order to look into the impact of app virtualization to
the performance of apps with DroidPill, we conducted an
experiment on a Samsung Note 2 running Android 4.4.4
with two versions of Quadrant (i.e., v1.1.1, and v2.1.1) sand-
boxed with a DroidPill malware. Quadrant is a benchmark
app tailored for testing the performance of Android devices
in various aspects, including CPU time, memory speed, I/O
operation speed and graphic rendering time. We ran the test
app ten times and took the average with a small variance.
Becuase NJAS and Boxify reported their performance evalu-
ation results over Quandrant v1.1.1 and v2.1.1 respectively,
this allowed us to compare the DroidPill’s performance with
theirs directly.
Table 4 compares the results of DroidPill from the tests we
ran and the publicly available results of NJAS, and demon-
strates that the I/O penalty in DroidPill is much lower
than that in NJAS. For the reason that, the I/O operations
in NJAS trigger the ptrace system calls, and generate the
context switches between the parent and child processes.
Whereas, DroidPill’s performance is not substantially pe-
685Figure 7: Steal Credit Card Information on Chrome
nalized in that guest apps and its broker run in the same
process, and no additional switch occurs for each I/O oper-
ation. For Quadrant v2.1.1, DroidPill’s performance penalty
is 4.5% in contrast to Boxify’s 3.6%. Overall, it can be ob-
served that the results are comparable to NJAS and Boxify,
since most of the framework APIs that DroidPill hook are
related to Binder calls and should not cause signiﬁcant over-
heads for CPU, memory, I/O and display. Throughout the
experiments with real-world apps, our DroidPill malware did
not encounter any noticeable performance hit. Nonetheless,
there is room to improve our current DroidPill implemen-
tation. For example, the current AOT operations are writ-
ten in Java, which incurs execution overhead when switch-
ing between native code and Java bytecode within hooking
functions at runtime. Such an issue can be eliminated by
implementing AOT in C/C++. All in all, we believe that
DroidPill’s performance falls into an acceptable range for a
malware system.
5.2 Case Studies
In order to demonstrate DroidPill’s eﬀectiveness, we
present ﬁve attack examples against real-world apps. Specif-
ically, we implemented the DroidPill malware and tested
them on a non-rooted Google Nexus 7. The malware dis-
plays a simple welcome activity as the bait, and utilizes the
getRunningTasks() API to detect and preempt the guest
apps’ top activities. During each test of the UI Integrity
requirement, the overview screen is opened up to show that
the icons and labels of sandboxed activities are identical to
that of native ones. In the experiments, we didn’t publish
the malware to any app market due to the legal concern,
so we just installed the malware locally. In the future, we
would like to work with app market vendors to evaluate the
market-level defense against the DroidPill attacks.
5.2.1 Browser Spyware
In this attack, a DroidPill malware was created to attack
the Chrome browser app (version 48.0.2564.95) and steal all
a victim user’s searching and browsing history in both nor-
mal and private modes. Moreover, it could steal the login
credentials and ﬁnancial information typed in by the user, as
shown in Figure 7. In this experiment, we hooked a number
Figure 8: Encrypt a User’s File on Dropbox (left)
and Hijack an App Installation from Mi Store (right)
of methods from the Android framework and chrome classes
(e.g., android.view.inputmethod.BaseInputConnection and
org.chromium.chrome.browser.tab.Tap) that handle the key-
board inputs and load URLs. Note these are the application-
level APIs that the malware intercepted. We believe that
further instrumentations at this layer could reveal more
browsing contents (e.g., encrypted web traﬃc). Merely
hooking the low-level APIs will not give us such visibility
to the encryption-protected browsing data.
5.2.2 Cloud Storage Ransonware
We used a DroidPill malware to attack the Dropbox app
(version 2.4.5.10) with the system-level I/O functions (e.g.,
open(), and write()) which monitor what ﬁles are down-
loaded and stored to the local cache. The malware is in-
structed to silently download all ﬁles to the local cache, and
encrypt them all. By taking advantage of Dropbox’s auto-
sync mechanism, ﬁle encryption is automatically propagated
to cloud servers and other client devices. Thus, all ﬁles in
the Dropbox account will be unreadable to the victim user.
If the user pays oﬀ a ransom, the malware could decrypt
the ﬁles. Although Dropbox can automatically back up the
user’s ﬁles and allow the user to revert the ﬁles to previous
versions, a DroidPill ransomware could bypass the recovery
mechanism by encrypting the ﬁles multiple times to over-
write all plaintext versions. Figure 8 (left) depicts that a
Dropbox malware encrypts a text ﬁle.
5.2.3 App Store Client Abuser
We built a DroidPill malware to hack the Xiaomi Market
app (version R.1.4.2), which is the default app store client
for Xiaomi phones. In this experiment, the malware abuses
the Xiaomi Market app’s installing process, and uses a fake
app to replace a genuine app downloaded from the Xiaomai
app market.
In this experiment, we use a Google Nexus
7 to install the market app as a regular app without sys-
tem permissions through the Android package installer. We
hooked the ActivityManagerProxy.startActivity() API to in-
tercept the intents that the market app sent to the installer.
These intents were characterized with the MIME type of
“application/vnd.android.package-archive”. Our malware
modiﬁes the URIs in the intents that pointed to the apk
6866. DISCUSSION
In this section, we mainly answer two questions: (1) What
are the limitations of our DroidPill prototype?
(2) Are
there any possible countermeasures to the App Confusion
Attacks?
6.1 Limitations
Although we have successfully launched the attacks with
DroidPill, we envision six restrictions, either external or in-
ternal, that thwart the current prototype to expand to all
app types.
The external restrictions are more or less related to our
implementation, which include:
Android Versions The current