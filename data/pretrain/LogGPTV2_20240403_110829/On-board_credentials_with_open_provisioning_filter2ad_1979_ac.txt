to. This data is encrypted using CK and integrity-protected
using IK. In our current implementation, we use AES-CBC
109LFK = KDFOP K (RKS|P ID|version)
The provisioning subsystem encrypts LFK for each pro-
gram endorsed for membership in the family by using a
program-speciﬁc key called local endorsement key (LEK)
which is derived from the program identiﬁer:
LEK = KDFOP K (H(program))
The LFK is encrypted using LEK resulting in an endorse-
ment token (ET). A program can only access family secrets
with proper endorsement token.
ET = AELEK (LF K)
When a program is executed and it needs to handle family
speciﬁc secrets, it needs as input an endorsement token. The
interpreter ﬁrst derives LEK, uses it to decrypt ET in order
to get LFK, and then retains it within the secure environ-
ment for subsequent sealing and unsealing family secrets.
If a program is not endorsed for membership of any fam-
ily, then the interpreter uses LEK for sealing and unsealing
(which means that the sealing/unsealing is program speciﬁc
and not family speciﬁc).
Although conﬁdential programs are provisioned through
the family mechanism, the sealing of programs is not family
speciﬁc. Conﬁdential programs are sealed using local pro-
gram key (LPK) that is the same for all programs and fam-
ilies in one device.
LPK = KDFOP K (“SecretCod
(cid:48)(cid:48)
)
Although it is possible to execute any conﬁdential pro-
gram with any family speciﬁc data, it is still not possible
to use sealed data belonging to a certain family without the
program being properly endorsed. In short, when a conﬁ-
dential program handles sealed data belonging to a family
the course of events is as follows:
1. The Credentials Manager invokes the ObC interpreter
with the sealed program, an endorsement token, and
sealed data as input.
2. The interpreter detects a sealed program, derives de-
vice speciﬁc LPK, and decrypts the program.
3. The interpreter calculates a hash of the decrypted pro-
gram, and derives the program speciﬁc LEK from the
hash.
4. The interpreter recovers family speciﬁc LFK by de-
crypting endorsement token ET using LEK.
5. LFK can now be used for sealing/unsealing data.
The local data sealing formats were designed with the as-
sumption that credential programs are executed as a whole.
In related work [5] we are investigating the possibility of
piece-wise execution of credential programs. The scheduling
architecture for piece-wise execution imposes certain changes
to local data sealing formats, as described in [5].
Figure 3: Provisioning messages - an example
4.4 Provisioning version control and naming
ObC secrets are assigned a minimal version identiﬁer indi-
cating the earliest family version that the secret is allowed to
belong to. For ObCP/Endorse messages, the version num-
ber indicates the maximum version, i.e. the latest family
version that a given program can gain access to. In practice
this means that a provisioning operation will be successful
if the version of ObCP/Xfer is not greater than the version
of ObCP/Endorse. Versioning may be extended for creden-
tial life cycle management so that, for example, once an
ObCP/Xfer message is accepted, the provisioning subsys-
tem will refuse to accept older ObCP/Xfer messages for the
same secret. However, this would require that secrets are
named, and that the name and version information of the
secrets are stored along with the secrets in local persistent
storage. Neither of these is true for our current implemen-
tation.
As can be seen from the provisioning messages, there is
no support for naming secrets or even linking messages that
are to be used together. This is an intentional design choice
in the interest of simplicity – credential naming and man-
agement metadata can be part of the provisioning protocol,
or be known to participating parties in some other way.
4.5 Provisioning example
A simple example may help to clarify the provisioning
concepts. Let us assume that a provisioner has a function-
ality that consists of two ObC programs prog1 and prog2
that need to share secret data (e.g, the programs might be
pipelined to achieve a desired end result). Let us also as-
sume that the provisioner wants to keep the algorithm in
prog1 secret and therefore wishes to transmit prog1 in en-
crypted form. The programs operate on two pieces of secret
data, data1 and data2.
The provisioner gets hold of a certiﬁcate containing the
device public key P KD. The provisioner will produce two
ObCP/Init packages: one of these packets contains the root
key for provisioning secrets (RKS) and the other root key
for provisioning conﬁdential programs (RKP ). Both are ran-
domly generated keys that should be kept secret. Figure 3
shows the diﬀerent ObC provisioning messages needed for
this scenario and the relationships between them. For sim-
110plicity, we do now show conﬁdentiality keys (CK) or endorse-
ment integrity keys (IK) explicitly but always refer only to
the corresponding root key.
The conﬁdential program prog1 is transferred by construct-
ing an ObCP/Xfer message based on the root key RKP to
encapsulate the encrypted bytecode for prog1. prog2 is not
conﬁdential and can be transferred directly. Each program
requires an ObCP/Endorse based on the root key RKS.
This will ensure that the secrets for the family deﬁned by
RKS will be accessible by that program. If the provisioner
wants to provision more secrets for the already endorsed
program, the provisioner creates new ObCP/Xfer packages
using the same RKS.
There are two noteworthy issues. First, in this example
there are two families: one for conﬁdential programs (rooted
on RKP ) and the other for credential secrets (rooted on
RKS). Both programs are endorsed to be members of the
latter family so that they have shared access to the secret
data automatically.
Second, only indirectly related to provisioning, the local
sealing function is compatible only between programs that
have been endorsed to the same family and the same family
version number, i.e. in the scenario outlined above, the pro-
grams should always be distributed as sets with the equiva-
lent version numbers if sealed data from one program is to
be read by another.
5.
IMPLEMENTATION
As our main implementation target we selected Nokia N95
mobile phone which runs Symbian OS v9.2 operating system
on 300 MHz OMAP 2420 platform and it is, like many other
Nokia mid-range and high-end phones, based on hardware
security features of M-shield.
We have implemented a complete ObC system based on
the architecture described in Section 3. The interpreter
and the provisioning subsystem were implemented as sep-
arate M-Shield protected applications and written in C (in
compiled format 5 kB in size each). The operating system
level component Credentials Manager was implemented us-
ing C++ for Symbian OS. Credentials Manager uses typical
Symbian client-server model and it has an SQL database
for credential storage. All of these can be distributed to
and installed on oﬀ-the-shelf phones in the form of standard
Symbian OS software packages.
In this section, we describe our provisioning subsystem
implementation, one example application built on top of
the implemented ObC system, and our developer tools. For
more details about implementations for other platforms see
[6].
5.1 Provisioning subsystem implementation
The provisioning subsystem interface provides the follow-
ing services: 1) converting provisioned secrets and conﬁden-
tial programs into locally sealed data, 2) endorsing programs
to families, and 3) transferring conﬁdential data between
programs.
Conﬁdential program: Conﬁdential ObC programs need
to be provisioned encrypted. The provisioning subsystem
converts the provisioned program into a locally sealed data
structure. The needed inputs are: ObCP/Init (containing
RKP ) and ObCP/Xfer (containing the encrypted program).
The provisioning subsystem returns the program encrypted
using local program key (LPK).2
Credential secret: Securely provisioned secrets must be
processed by the provisioning subsystem as well. The needed
input data for provisioning a secret are: ObCP/Init (con-
taining RKS) and ObCP/Xfer (containing the encrypted
secret). The provisioning subsystem returns a secret en-
crypted with LFK.
Endorsing a program: The input for endorsing an ObC
program to access family secrets are: ObCP/Init (containing
RKS) and ObCP/Endorse (containing the encrypted hash
of the program). The provisioning subsystem produces the
endorsement token ET (LFK encrypted using LEK). Each
ObC program needs its own ET in order to be able to access
encrypted family secret, i.e. every program in a family needs
to be separately endorsed.
Transferring conﬁdential data between programs:
Data sealed by an ObC program may need to be transferred
to a (set of) ObC program(s) belonging to the same fam-
ily which constitute(s) a newer version. The required in-
puts for this operation are: ObCP/Init (containing RKS),
ObCP/Endorse containing hash of the previous version ObC
program, ObCP/Endorse containing hash of the new ver-
sion ObC program, and sealed credential secret belonging
to the previous version (encrypted using the previous ver-
sion LFK). The provisioning subsystem produces sealed se-
cret belonging to the new version (encrypted using the new
LFK, since the version changed).
The subsystem checks that the new version number is the
same or higher than the old one. This prevents data trans-
fers to older, possibly vulnerable program versions. Regard-
ing cases where there are several ObC programs belonging
to each version, it is suﬃcient that each sealed data element
is transferred to the next version, and that each ObC pro-
gram authorized to handle the next version sealed data gets
its own ObC program speciﬁc ET.
5.2 One-time token ObC
As an example of an ObC we brieﬂy describe a widely
used one-time password (or “token code”) scheme that has
been implemented using our ObC system. The credential
program, consisting of the actual token generation algorithm
was implemented as a Lua script by a research partner. The
token application was written in C++ for Symbian OS and
it has two components.
The ﬁrst component is a provisioning client. When the
token application is started, the provisioning client checks
if the phone already has an installed token.
If not, the
phone connects to a provisioning server (implemented by
the research partner) and sends the certiﬁed device public
key P KD. The server replies with two sets of provisioning
messages3. The ﬁrst consists of ObCP/Init and ObCP/Xfer
messages containing the encrypted credential program for
token generation. The second set consists of ObCP/Init,
ObCP/Xfer and ObCP/Endorse that contain: 1) an en-
crypted token secret, and 2) an endorsement that grants
2Note that the developer of the ObC program may decide to
use the same RKP for many devices. In this case, the actual
encrypted ObC program in ObCP/Xfer may have been sent
to the device ahead of time, e.g., as part of the system image,
or a separately available installation package common to all
devices.
3Each set could also come from a diﬀerent provisioning
server.
111the token generation program access to the secret. The to-
ken generation algorithm is proprietary. Therefore the token
generation program is a conﬁdential credential program and
is provisioned to the device in encrypted form.
The second component of the application is a simple to-
ken UI that periodically calculates a new token code (short
numeric string) using the provisioned program, provisioned
secret and a PIN code which is requested from the user. The
resulting token code is simply displayed to the user.
5.3 Developer tools
We have created tools to help third-party development of
ObCs. First, we provide a Windows emulator of the secure
environment. Essentially, the tool is a debugger, where cre-
dential program bytecode can be executed in a step-by-step
fashion. Secondly, we have an ObC implementation that en-
ables testing of credential provisioning and execution in both
Symbian phones where M-Shield secure environment is not
available and Symbian emulator on PCs. Both of these tools
are available from the authors on request.
6. ANALYSIS
In this section, we revisit the objectives for the ObC archi-
tecture identiﬁed in Sections 1 and 2, and informally reason
how well the ObC system meets those objectives.
The ﬁrst objective was that the system should be inex-
pensive to deploy. We achieve this by leveraging existing
already available hardware security environments. Our pro-
totype implementation can be distributed as a standard add-
on software package and can be installed and used on already
deployed devices.
The second objective was openness in provisioning.
In
traditional code-signing the target device is pre-conﬁgured
with a ﬁnite number of trust domains. Our concept of fami-
lies allows trust domains to be created dynamically. Hence,
it meets the goal of openness in that any provisioner, be it
hobbyists, small organizations, user groups, or large corpo-
rations, can deﬁne and implement secure services based on
the ObC architecture independently without having to ob-
tain permission or enter into contractual obligations with the
device manufacturer, network operator or any other third
party.
The third objective was security, which we elaborated fur-
ther by identifying three classes of security requirements in
Section 2.4. We now consider those requirements.
6.1 Isolation of credential programs
In our current design, only one credential program can
execute in the secure environment at any given instance. A
program in execution runs until it ﬁnishes execution or is
terminated by the interpreter. No interleaved execution of
credential programs is possible. Thus the primary concern
in isolation is with respect to persistently stored credential
secrets. Secrets are sealed before being stored in the Creden-
tials Manager database. The sealing key is derived from the
program code using OPK as the key. A credential program
cannot access sealed data of another credential program if
the following hold true:
• OPK remains secret,
• the key derivation algorithm KDF used to derive the
program-speciﬁc sealing keys (LEK) is one-way,
• the hash function H() used to calculate statistically
unique program identiﬁers is collision-free,
• the implementation of the interpreter is correct, and
• the authenticated encryption algorithm AE used to
construct seals does not leak information about the
plaintext.
We are currently extending the ObC interpreter to al-
low for on-demand paging and in-line subprogram calls for
credential programs [5]. This is done in order to remove
the constraint on the size of credential programs. However,
piecewise execution mediated by the operating system will
leak some information regarding program state. We intend
to investigate ways of helping developers identify potential
leakage as well as techniques to minimize the leakage.
6.2 Authorized sharing of credential secrets
The family concept allows authorized sharing of creden-
tial secrets. In order to access family secret, a program must
be able to access the local family key LFK. A program can
access LFK if there is a valid endorsement token ET for
that program. The provisioning subsystem produces valid
ET only as a result of correct ObCP/Endorse package and
if there is no ET for a program it cannot access family se-
crets as long as the conditions for the isolation of credential
programs hold.
6.3 Security of provisioned data
The security of provisioned data depends on three factors:
the data is provisioned to the device of the correct user, to
a valid secure environment within that device, and is ac-
cessible to the correct set of programs executing within the
secure environment.
• correct user: the ObC provisioning system does not
address user authentication. However, the use of the
device public key P KD uniquely identiﬁes the target
device. Thus, the provisioning protocol used to provi-
sion the ObC provisioning messages can correctly bind
user authentication to the right P KD.
• correct secure environment: ObCP/Init is encrypted
for P KD. The root key protected by ObCP/Init and
the keys derived from RK to protect provisioned data
will remain within the secure environment if the fol-
lowing hold true:
– the corresponding SKD remains within the secure
environment,
– the process of certifying P KD as a valid public
key is correct,
– the provisioner has securely obtained the neces-
sary keys needed for verifying the certiﬁcates on
P KD (such as a manufacturer’s signature veriﬁ-
cation key),
– the implementation of the provisioning subsystem
is correct, and
– the encryption schemes used in ObCP/Init and
ObCP/Xfer are correct.
112Figure 4: Endorsement using a digital signature
• correct set of programs: ObCP/Endorse enables a pro-
gram to access data provisioned to a family.
If the
conditions listed above for provisioning the data to the
correct secure environment hold, then the endorsement
integrity key IK will remain within the secure environ-
ment.
In this case, a program that is not intended
by the provisioner cannot access family secrets as long
as the message authentication code M AC() used for