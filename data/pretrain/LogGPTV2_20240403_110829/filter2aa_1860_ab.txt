### IPv6 Tunnelling & Transition Methods

#### Teredo
- **Functionality**: Enables IPv6 tunnelling through NAT servers using UDP traffic.
- **Default Port**: Uses port 3544 UDP, but this can be changed (e.g., to ports 53 or 500).
- **Implementations**: Currently, only Microsoft and FreeBSD have implementations. Windows XP SP1 includes a Teredo client, and FreeBSD has kernel modules for both server and relay functionality.
- **Security Concerns**: Can be used as an attack vector. UDP traffic is not commonly monitored and is often not blocked by firewalls.
- **Considerations**: Considered a "last resort" IPv6 tunnelling mechanism. The draft specifies the use of the 3FFE:831F::/32 address range. Does not support tunnelling through restricted NATs.

#### SilkRoad
- **Functionality**: Allows IPv6 tunnelling through NAT servers using UDP traffic.
- **Default Port**: Uses port 5188 UDP.
- **Implementations**: No current implementations exist.
- **Security Concerns**: Can also be used as an attack vector.
- **Address Range**: Supports any address range, not just 3FFE:831F::/32.
- **Status**: Very new draft.
- **NAT Compatibility**: Supports tunnelling through any type of NAT server.

#### NAT/PT (Network Address Translation/Protocol Translation)
- **Specification**: RFC 2766.
- **Functionality**: IPv6 hosts send requests to a dual-stacked gateway. The gateway determines if the remote address is IPv4 or IPv6, routes the packet normally if the destination is IPv6, and converts the packet to IPv4 with special header information if the destination is IPv4. The returning packet is converted back to IPv6 and routed to the originating host.
- **Implementations**: Cisco has the only production-quality implementation.
- **Comparison**: Similar to an IPX/SPX-only network connecting to hosts on the IPv4 internet.

#### BIS/BIA (Bump in the Stack/Bump in the API)
- **Specifications**:
  - Bump in the Stack: RFC 2767.
  - Bump in the API: RFC 3338.
- **Functionality**: Used on dual-stacked hosts to proxy programs that are IPv4-only or IPv6-only to use the other protocol.
- **Security**: Security is questionable.
- **Implementations**: Windows XP and 2003 include a "port proxy."

#### DSTM (Dual Stack Transitioning Mechanism)
- **Functionality**: Based on dynamic IPv4 over IPv6 tunnels, temporarily assigns global IPv4 addresses to IPv6 hosts, allowing IPv4-only applications to run in an IPv6 environment.
- **Requirements**: Requires a DSTM gateway and server.
- **Platform Support**: Multi-platform.
- **Benefits**: Minimizes the need for IPv4 IPs.

#### TRT (Transport Relay Translator)
- **Functionality**: Works as a DNS proxy. The TRT server translates IPv4 addresses to IPv6. For example, `fec0:0:0:0:ffff::/64 + 193.99.144.71` becomes `fec0:0:0:0:ffff:0:0:c163:9047`.
- **Implementations**: BSD and Linux implementations based on TOTD and FAITHD (BSD) or pTRTd (Linux).
- **Specification**: RFC 3142.

### IPv6 Router Advertising
- **Functionality**: Allows an IPv6 border router to broadcast its existence, advertising the IPv6 prefix and default route to clients.
- **Differences from DHCP**: Can only broadcast a default route and address prefixes, cannot assign DNS, WINS, etc.
- **Availability**: RA server is available in most IPv6-capable operating systems.

### DHCPv6
- **Functionality**: Combines the functionality of router advertising and DHCPv4.
- **Current Status**: Currently in alpha stages in most implementations, with Cisco's DHCPv6 stack considered production quality.
- **Features**: Provides prefix delegation and facilitates the distribution of IPs, default routes, DNS, WINS servers, and other options available in DHCPv4.

### IPv6 Security
- **Firewalling IPv6**:
  - *BSD: IPFW, PF.
  - Linux: ip6tables.
  - Windows XP: Built-in firewall controlled by the `netsh` command.
  - Windows 2003: No IPv6 firewall support.
- **Consumer Firewall Applications for Windows**: Most HIDS (Host Intrusion Detection Systems) may pick up 6to4 traffic or IPv4 DNS lookups but do not defend against native IPv6 traffic.
- **Blocking Traffic**: Blocking UDP and IP Protocol Type 41 traffic.
- **Scanning**: Scanning for router advertisements using tools such as Ethereal.
- **Best Practice**: If not using the protocol, do not enable it.

### IPv6 DNS
- **IPv4 – A Record**:
  - Example: `www.hacksonville.org   A   192.168.254.111`
- **IPv6 – AAAA Record**:
  - Example: `www.hacksonville.org   AAAA   FEC0:0010:0083:1211:0000:0000:1287:123F`

### IPv6 Applications
- **Patching and Recompiling**: IPv4-only applications can sometimes be patched and recompiled with IPv6 support.
- **Proxying**: IPv4 applications can be proxied to use IPv6 addresses.
- **Address Handling**: Applications must handle colons in addresses and should support both IPv4 and IPv6 addresses.

### Sample Code
- **IPv4 Only**:
  ```c
  int i, s;
  struct hostent *hp;
  struct servent *sp;
  struct sockaddr_in sin;
  s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
  hp = gethostbyname("www.hacksonville.org");
  sp = getservbyname("http", "tcp");
  for (i = 0; hp->h_addr_list[i]; i++) {
     memset(&sin, 0, sizeof(sin));
     sin.sin_family = AF_INET;
     sin.sin_len = sizeof(sin);
     sin.sin_port = htons(sp->s_port);
     memcpy(&sin.sin_addr, hp->h_addr_list[i], hp->h_length);
     if (connect(s, &sin, sizeof(sin)) < 0) {
        close(s);
        continue;
     }
     break;
  }
  ```

- **IPv6 Capable**:
  ```c
  int s;
  struct addrinfo hints, *res, *res0;
  memset(&hints, 0, sizeof(hints));
  hints.ai_family = AF_UNSPEC;
  hints.ai_socktype = SOCK_STREAM;
  getaddrinfo("www.hacksonville.org", "http", &hints, &res0);
  for (res = res0; res; res = res->ai_next) {
     s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
     if (connect(s, res->ai_addr, res->ai_addrlen) < 0) {
        close(s);
        continue;
     }
     break;
  }
  freeaddrinfo(res0);
  ```

### Running Services
- **Apache 2.xx**:
  - Configuration in `httpd.conf`:
    ```apache
    Listen 0.0.0.0:80
    Listen [::]:80
    ```

- **SSHD**:
  - Configuration in `sshd_config`:
    ```apache
    Port 22
    Protocol 2
    ListenAddress 0.0.0.0
    ListenAddress ::
    ```

### 12 Steps for Overcoming NAT Addiction
1. **Admit Powerlessness**: Admit we are powerless over NAT, and our IP networks have become unmanageable.
2. **Believe in IPv6**: Believe that a power greater than NAT could restore us to security.
3. **Decision to Change**: Decide to turn our will and networks over to the care of IPv6.
4. **Penetration Testing**: Conduct a thorough and fearless penetration test of our networks.
5. **Admit Security Issues**: Admit to the CIO, ourselves, and another systems administrator the exact nature of our network security issues.
6. **Readiness for Change**: Be ready to have IPv6 remove all the defects of our IPv4 NAT-ted networks.
7. **Ask for Help**: Humbly ask router advertisements to remove our NAT shortcomings.
8. **List Affected Networks**: Make a list of all networks harmed and be willing to install IPv6 stacks on them.
9. **Restore Connectivity**: Restore end-to-end connectivity to these networks whenever possible.
10. **Continuous Inventory**: Continue to take a network inventory and promptly admit when using NAT.
11. **Improve Connectivity**: Seek to improve network connectivity with IPv6 through network scans and DHCPv6.
12. **Spread the Message**: Having had a router awakening, try to carry this message to NAT addicts and practice these principles.

### Links
- **North American IPv6 Task Force**: [www.nav6tf.org](http://www.nav6tf.org)
- **Linux IPv6 HowTo**: [www.bieringer.de/Linux/IPv6](http://www.bieringer.de/Linux/IPv6)
- **FreeNet6 Tunnel Broker**: [www.freenet6.net](http://www.freenet6.net)
- **Hurricane Electric Tunnel Broker**: [www.tunnelbroker.net](http://www.tunnelbroker.net)
- **NetBSD Documentation**: [www.netbsd.org/Documentation/network/ipv6](http://www.netbsd.org/Documentation/network/ipv6)
- **FreeBSD**: [www.freebsd.org](http://www.freebsd.org)
- **OpenBSD**: [www.openbsd.org](http://www.openbsd.org)
- **Kame (*BSD IPv6 Project)**: [www.kame.net](http://www.kame.net)
- **USAGI (Linux Port of Kame)**: [www.linux-ipv6.org](http://www.linux-ipv6.org)
- **Japanese IPv6 Info Site**: [www.ipv6style.jp/en/index.shtml](http://www.ipv6style.jp/en/index.shtml)
- **Windows IPv6 Ports**: [win6.jp](http://win6.jp)
- **IPv6 Events and News**: [www.ipv6forum.com](http://www.ipv6forum.com)
- **Moonv6 Project**: [www.moonv6.org](http://www.moonv6.org)

### Questions, Comments, or Concerns?
Feel free to reach out with any questions, comments, or concerns.