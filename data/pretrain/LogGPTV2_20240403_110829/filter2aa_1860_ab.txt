● Allows IPv6 tunnelling though NAT servers using UDP traffic
● Uses port 3544 UDP by default
● Port can be changed (to say, ports 53 or 500?)
● Microsoft and FreeBSD have the only implementations.
● Windows XP SP1 only has a Teredo client
● Kernel modules have been written for FreeBSD to be both a 
server and relay
● Could very easily be used as an attack vector 
● UDP traffic not commonly monitored
● UDP not locked out at firewalls
● Considered a “last ditch” IPv6 tunnelling mechanism
● Draft calls for use of 3FFE:831F::/32 ONLY
● Does not allow tunnelling through restricted NATs 
IPv6 – Tunnelling & Transition Methods 
-- SilkRoad
● Allows for IPv6 tunnelling though NAT servers using UDP 
traffic
● Uses port 5188 UDP currently
● No current implementations
● Could also easily be used as an attack vector 
● Allows for any address range to be used (not just 3ffe:831F::/32)
● VERY new draft
● Allows tunnelling through any type of NAT server
IPv6 – Tunnelling & Transition Methods 
-- NAT/PT
● Network Address Translation/Protocol Translation
● RFC 2766
● IPv6 hosts send requests to a dual-stacked gateway
● Gateway decides if the remote address is IPv4 or IPv6
● Routes the packet as normal if destination is IPv6
● Converts the packet to IPv4 with special header information if 
the destination is IPv4
● Converts the returning packet to IPv6 and routes it back to 
the originating host
● Cisco has the only production quality implementation
● Technology is similar to an IPX/SPX only network connecting 
to hosts on the IPv4 internet
IPv6 – Tunnelling & Transition Methods 
-- BIS/BIA
● Bump in the Stack/Bump in the API
● Bump in the Stack – RFC 2767
● Bump in the API – RFC 3338
● Used on dual stacked hosts to proxy programs that are 
IPv4 only or IPv6 only to use the other protocol
● Security is questionable
● Windows XP and 2003 include “port proxy”
IPv6 – Tunnelling & Transition Methods 
-- DSTM
● Dual Stack Transitioning Mechanism
● Based on dynamic IPv4 over IPv6 tunnels.
● Temporary assignment of global IPv4 addresses to IPv6            
  hosts.
● Allows IPv4 only apps to run in an IPv6 environment
● Requires DSTM gateway and server
● Multi-platform
● Minimizes need for IPv4 IPs
IPv6 – Tunnelling & Transition Methods 
-- TRT
● Transport Relay Translator
● Works as a DNS Proxy
● TRT server translates IPv4 addresses to IPv6
● fec0:0:0:0:ffff::/64 + 193.99.144.71 becomes
● fec0:0:0:0:ffff:0:0:c163:9047
● BSD and Linux implementations
● Based on TOTD and FAITHD (BSD) or pTRTd (Linux)
● RFC 3142
IPv6 – Router Advertising
● Allows your IPv6 border router to broadcast its 
existence
● Advertises to clients their IPv6 prefix and default route 
● Differs from DHCP
● Can only broadcast a default route and address prefixes 
● Cannot assign DNS, WINS, etc.
● RA server is available in most IPv6 capable OSes
IPv6 – DHCPv6
● Combines the functionality of router advertising and 
DHCPv4
● Currently in alpha stages in most implementations
● Cisco's DHCPv6 stack -- considered production quality
● Provides prefix delegation 
● Facilitates distribution of IPs, default routes, DNS and 
WINS servers, and other options available in DHCPv4
IPv6 – Security
● Firewalling IPv6
●IPFW, PF for *BSD
●ip6tables for Linux
●Built-in firewall in Windows XP
●Controlled by the “netsh” command
●No IPv6 firewall in Windows 2003
IPv6 – Security
• Windows 2003
• No IPv6 support
• Windows XP before Advanced 
Networking Pack
• No IPv6 support in firewall
• Consumer Firewall Applications for 
Windows
• Most HIDS to date 
• MIGHT pick up 6to4 traffic or IPv4 DNS lookups
• Do not defend against native IPv6 traffic
IPv6 – Security
• Blocking UDP and IP Protocol Type 41 
traffic
• Scanning for router advertisements using 
tools such as Ethereal
• As always, if not using the protocol, don't 
enable it...
IPv6 – DNS
IPv4 – A Record
www.hacksonville.org   A   192.168.254.111
IPv6 – AAAA Record
www.hacksonville.org   AAAA \
FEC0:0010:0083:1211:0000:0000:1287:123F
IPv6 – Applications
• IPv4 only applications can sometimes be patched and 
recompiled with IPv6 support
• IPv4 applications can be proxied to use IPv6 addresses
• Apps must be able to handle “:” in addresses
• Apps should be able to handle both IPv4 and IPv6 
addresses
IPv6 – Sample Code
IPv4 only
• Uses IPv4 specific libraries and system calls
int i, s;
struct hostent *hp;
struct servent *sp;
struct sockaddr_in sin;
s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
hp = gethostbyname("www.hacksonville.org");
sp = getservbyname("http", "tcp");
for (i = 0; hp->h_addr_list[i]; i++) {
   memset(&sin, 0, sizeof(sin));
   sin.sin_family = AF_INET;
   sin.sin_len = sizeof(sin);
   sin.sin_port = htons(sp->s_port);
   memcpy(&sin.sin_addr, hp->h_addr_list[i], hp-
>h_length);
   if (connect(s, &sin, sizeof(sin)) ai_next) {
   s = socket(res->ai_family, res->ai_socktype, res-
>ai_protocol);
   if (connect(s, res->ai_addr, res->ai_addrlen) < 0) {
      close(s);
      continue;
   }
   break;
}
freeaddrinfo(res0);
IPv6 – Running Services (Apache)
● Requires service be IPv6 capable and listening
● Apache 2.xx, httpd.conf:
● Listen 0.0.0.0:80
● Listen [::]:80
IPv6 – Running Services (SSHD)
● SSHD, sshd_conf:
● Port 22
● Protocol 2
● ListenAddress 0.0.0.0
● ListenAddress ::
IPv6 – 12 Steps for Overcoming 
NAT Addiction
● 1. We admit we are powerless over NAT - that our IP 
networks have become unmanagable.
● 2. We come to believe that a power greater than NAT 
could restore us to security.
● 3. Made a decision to turn our will and our networks over 
to the care of IPv6 as we understand it.
● 4. Made a searching and fearless penetration test of our 
networks.
● 5. Admitted to the CIO, to ourselves, and to another 
systems administrator the exact nature of our network 
security issues.
● 6. Were entirely ready to have IPv6 remove all the 
defects of our IPv4 NAT'ted networks.
IPv6 – 12 Steps for Overcoming 
NAT Addiction
● 7. Humbly asked router advertisements to remove our NAT 
shortcomings.
● 8. Made a list of all networks we had harmed, and became 
willing to install IPv6 stacks on them all.
● 9. Restored end to end connectivity to such networks 
whenever possible.
● 10. Continued to take a network inventory and when we were 
using NAT promptly admitted it.
● 11. Sought through network scans and DHCPv6 to improve 
our network connectivity with IPv6 as we understood it, 
Googling only for knowledge of IPv6 for us and the power to 
carry that out.
● 12. Having had a router awakening as the result of these 
steps, we tried to carry this message to NAT addicts, and to 
practice these principles.
IPv6 – Links
North American IPv6 Task Force -- www.nav6tf.org
Linux IPv6 HowTo -- www.bieringer.de/Linux/IPv6
FreeNet6 Tunnel Broker -- www.freenet6.net
Hurricane Electric Tunnel Broker -- www.tunnelbroker.net
NetBSD -- www.netbsd.org/Documentation/network/ipv6
FreeBSD -- www.freebsd.org
OpenBSD -- www.openbsd.org
Kame (*BSD IPv6 Project) -- www.kame.net
USAGI (Linux Port of Kame) -- www.linux-ipv6.org
Japanese IPv6 Info Site -- www.ipv6style.jp/en/index.shtml
Windows IPv6 Ports -- win6.jp
IPv6 Events and News -- www.ipv6forum.com
Moonv6 Project -- www.moonv6.org
IPv6 – Questions?
 Comments?
 Concerns?