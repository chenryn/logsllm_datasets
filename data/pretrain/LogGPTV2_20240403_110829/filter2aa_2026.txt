# Hack the Hackers: Leaking Data Over SSL/TLS

**Author:** Ionut Cernica  
**Role:** Security Researcher @Future Networks 5G Lab, PhD Student @Department of Computer Science, CTF Player, Penetration Tester, Entrepreneur, Former Bug Bounty Hunter

---

## Table of Contents
1. Introduction
2. Scenarios and Challenges
3. Blind Injection Problem
4. Blind Injection over SSL/TLS
5. Demo Time – sqlmap
6. Conclusion

---

## Introduction

### Who Am I?
- **Security Researcher** at Future Networks 5G Lab
- **PhD Student** in the Department of Computer Science
- **CTF Player**
- **Penetration Tester**
- **Entrepreneur**
- **Former Bug Bounty Hunter**

### Special Thanks
Get free access to the best online penetration testing platform for a limited time!  
Sign up for a free 2-week trial: [https://pentest-tools.com/DEFCON2021](https://pentest-tools.com/DEFCON2021)

---

## Scenarios and Challenges

### Blind Injection - How It Works?
Blind injection techniques query the server for True or False responses by:
- **Boolean-based**: Checking the length of the response.
- **Time-based**: Measuring the delay between responses.
- **SQL Injection (Blind SQL Injection)**: Exploiting vulnerabilities in the database.

### Problem
The main issue is that we can distinguish true and false responses from encrypted traffic by analyzing the length of the responses or the delays between them.

### Real Problem: BILOST
- **BILOST**: Blind Injection Leak Over SSL/TLS
- **Attack Type**: Passive attack; no interaction with the victim.
- **Exploit Pattern**: Written in a predictable way.
  - \( f(n) = x \)
    - \( f \): The method
    - \( x \): Two types of output (True or False)
    - \( n \): The result or the leak

### Known Methods of Exploitation
- **Charset Method**: abcdef-z, 0123-9
- **Binary Search**: Demonstrated using sqlmap
- **Bit Shifting**: Less common

### Challenges with Extraction Methods
- **Charset Method**: The biggest challenge due to its predictability.
- **Optimization Techniques**: No challenges with binary search or bit shifting.

### Exploitation Over SSL/TLS
- **Packet Lengths**: Boolean-based
- **Time Between Packets**: Time-based
- **Padding**: Even with padding, the problem can be exploited if the block size is smaller than the difference between True and False responses.
- **Protocol Issue**: This is not a problem with the SSL/TLS protocol itself.

### Scenarios of Exploitation
- **Penetration Testing Company**
- **ISP (Internet Service Provider)**
- **Strategic Interests**: Large countries may have strategic interests in passing another country's traffic through their infrastructure.
- **Tor Network**: Potential future work, considering exit nodes and cell padding.

### Tools and Exploit Databases
- All analyzed tools exploit blind injections in a predictable manner.
- All public blind injection exploits were found vulnerable to this problem.

### What We Did in the Demo
- A penetration tester from Company A exploits a vulnerable web app using sqlmap.
- A man-in-the-middle (MITM) attacker passively analyzes the encrypted traffic, extracting True and False from packet lengths.
- The MITM feeds the local sqlmap with the extracted data to leak the information.

### Fixing the Problem
- **Charset Method**: Shuffle the charset.
  - Example: `abcdefghijklmnopqrstuvwxyz0123456789` -> `xd0tc7ouysq53lek9inabrzw2j84mh16vgfp`
- **Binary Search**: Add extra steps that the exploit won't take into account.

## Conclusion
- **Predictability**: The way we write blind injection exploits might be predictable.
- **Optimization**: When optimizing blind injection attacks, consider inserting random steps in the optimization algorithm, whether it's binary search, bit shifting, or any other type.
- **Defensive Technique**: Payload-less detection, where the payload complexity doesn’t matter.

---

## Credits
- **Presentation Template**: Created by Slidesgo
- **Icons**: By Flaticon
- **Infographics & Images**: By Freepik

---

## Thank You!
Do you have any questions?  
**Contact**: [PI:EMAIL]