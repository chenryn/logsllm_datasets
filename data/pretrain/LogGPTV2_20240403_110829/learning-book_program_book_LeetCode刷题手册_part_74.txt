·每个测试用例，调用MyCalendar.book函数最多不超过400次。
---
## Page 719
●调用函数MyCalendar.book(start,end）时，start和end 的取值范围为[0,10^9]。
解题思路
·设计一个日程类，每添加一个日程，实时显示出当前排期中累计日程最多的个数，例如在一段时间
内，排了3个日程，其他时间内都只有0，1，2个日程，则输出3。
·拿到这个题目以后会立即想到线段树。由于题目中只有增加日程，所以这一题难度不大。这一题和
第699题也类似，但是有区别，第699题中，俄罗斯方块会依次起来，而这一题中，俄罗斯方
块也就起来，但是方块下面如果是空挡，方块会断掉。举个例子：依次增加区间[10,20]，
得高度为4，但是这一题是日程，日程不一样，[5，15]这个区间内有3个日程，但是其他部分都没
有3个日程，所以第三块砖块[5,15]中的[5,10]会断裂”，掉下去，第四块砖块还是[5,10]，落在
第三块砖块断落下去的位置，它们俩落在一起的高度是2。
·构造一颗线段树，这里用树来构造，如果用数组需要开辟很大的空间。当区间左右边界和查询边界
完全相同的时候再累加技术，否则不加，继续划分区间。以区间的左边界作为划分区间的标准，因
为区间左边界是开区间，右边是闭区间。一个区间的计数值以区间左边界的计数为准。还是上面的
例子，[5,10）计数以5为标准，count=2，[10,15)计数以10为标准，count=3。还需要再动态
维护一个最大值。这个线段树的实现比较简单。
·类似的题目有：第715题，第218题，第699题。第715题是区间更新定值（不是增减），第218
题可以用扫描线，第732题和第699题类似，也是俄罗斯方块的题目，但是第732题的俄罗斯方
块的方块会“断裂”
代码
package leetcode
// SegmentTree732 define
type SegmentTree732 struct {
start, end, count int
1eft,right
*SegmentTree732
// MyCalendarThree define
type MyCalendarThree struct {
st
*SegmentTree732
maxHeight int
// Constructor732 define
func Constructor732() MyCalendarThree {
st := &SegmentTree732{
start: 0,
end:1e9,
return MyCalendarThree{
---
## Page 720
st: st,
// Book define
func (mct *MyCalendarThree) Book(start int, end int) int {
mct.st.book(start, end, &mct.maxHeight)
return mct.maxHeight
}
func (st *SegmentTree732) book(start， end int, maxHeight *int) {
if start == end {
return
if start == st.start && st.end == end {
st.count++
if st.count >*maxHeight{
*maxHeight = St.count
1
if st.left == nil {
return
if st.left == nil {
if start == st.start {
st.left = &SegmentTree732{start: start, end: end, count: st.count}
st.right = &SegmentTree732{start: end, end: st.end, count: st.count}
st.1eft.book(start, end,maxHeight)
return
st.left = &SegmentTree732{start: st.start, end: start, count: st.count}
st.right = &SegmentTree732{start: start, end: st.end, count: st.count}
St.right.book(start, end, maxHeight)
return
if start >= st.right.start {
st.right.book(start, end, maxHeight)
3 else if end = 0 && x+dir[i][o] = 0 &&
y+dir[i][1]  0 && res[len(res)-1]  0 11 res[1en(res)-1] T[i]{
res[i] = j - i
---
## Page 726
break
上
return res
//解法二单调栈
func dailyTemperatures1(T []int)[]int {
res := make([]int, len(T))
var toCheck []int
for i, t ;= range T {
for len(toCheck)>0 && T[toCheck[1en(tocheck)-1]]>1
if letters[mid] > target {
high = mid - 1
}else{
1ow = mid + 1
3
find := letters[1ow%len(letters)]
if find <= target {
return letters [0]
return find
745.PrefixandSuffixSearch
题目
Given many words, words [i] has weight i.
suffix) . It will return the word with given prefix and suffix with maximum weight. If no
word exists, return -1.
Examples:
Input:
wordFilter(["apple"])
wordFilter.f("a", “e") // returns 0
wordrilter.f("b", "") // returns -1
Note:
1. words has length in range [1, 15000] .
2. For each test case, up to words . 1ength queries wordFi1ter.f may be made.
3. words [i] has length in range [1, 10] .
4. prefix, suffix have lengths in range [0, 10]
5. words [i] and prefix, suffix queries consist of lowercase letters only.
题目大意
给定多个 words，words[i] 的权重为i。设计一个类 WordFilter 实现函数WordFilter.f(String prefix,
String suffix)。这个函数将返回具有前缀prefix和后缀suffix的词的最大权重。如果没有这样的词，返
回 -1。
---
## Page 729
解题思路
·要求实现一个wordFilter，它具有字符串匹配的功能，可以匹配出前缀和后缀都满足条件的字
符串下标，如果找得到，返回下标，如果找不到，则返回-1。
·这一题有2种解题思路。第一种是先把这个WordFilter结构里面的字符串全部预处理一遍，将
它的前缀，后缀的所有组合都枚举出来放在map中，之后匹配的时候只需要按照自己定义的规则
查找key就可以了。初始化时间复杂度o（NL^2），查找时间复杂度o（1），空间复杂度o（N
LA2）。其中N是输入的字符串数组的长度，L是输入字符串数组中字符串的最大长度。第二
种思路是直接遍历字符串每个下标，依次用字符串的前缀匹配方法和后缀匹配方法，依次匹配。初
始化时间复杂度0（1），查找时间复杂度o（N*L)，空间复杂度0（1）。其中N是输入的字符
串数组的长度，L是输入字符串数组中字符串的最大长度。
代码
package leetcode
import "strings"
//解法一查找时间复杂度0（1)
type wordFilter struct {
words map[string]int
func Constructor745(words []string) wordFilter {
wordsMap := make(map[string]int, 1en(words)*5)