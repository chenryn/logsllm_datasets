www.vanguard.com, and (5) load Vanguard’s legitimate home page in the iframe. (6) After the user authenticates herself, the mali-
cious Javascript in the trojan document hijacks her session with the legitimate server.
it rejects subsequent requests from user’s machine and updates the
DNS entry for www.vanguard.com to the IP address of the le-
gitimate server. Now, when the user’s browser loads the ,
it will ﬁrst attempt to contact the pharmer, fail, refresh its DNS en-
try, receive the IP address of the legitimate server, and load the le-
gitimate index.html document into the . The attack
continues as before.
3.2 Using round robin DNS
To parallelize dynamic pharming attacks against multiple con-
current users, it is inefﬁcient to repeatedly update the DNS entry
for www.vanguard.com. If the adversary has compromised a
local, root, or authoritative DNS server, or changed the authorita-
tive server of record for www.vanguard.com, the adversary can
selectively respond with the pharmers IP or the legitimate server’s
IP depending on the stage of attack. However, if the adversary only
has the ability to change DNS entries for www.vanguard.com
on a DNS server (e.g., by cache poisoning), this attack is unscalable
because the pharmer must update the DNS entry for each instance
of the attack and reset it after the attack completes.
The pharmer can use round robin DNS entries to make this at-
tack scalable. A round robin DNS entry consists of multiple IP
addresses for a single domain name. The DNS server returns an
ordered list of the IP addresses in response to a query, but rotates
the order for each response. Web sites typically use round robin
DNS to implement load balancing or automatic failover. Browsers
usually connect to the ﬁrst IP address in the list, and this achieves
some degree of load balancing among clients. When the connec-
tion fails, the browser tries the next IP address on the list, until it
successfully makes a connection.
To leverage round robin DNS entries in a dynamic pharming at-
tack, the pharmers creates a round robin DNS entry containing two
IP address: the pharmer’s IP and the legitimate server’s IP. Roughly
half the DNS responses will be in the order: pharmer’s IP, server’s
IP. In this case, the user will connect to the pharmer ﬁrst, and the
pharmer will deliver the trojan document. The pharmer rejects sub-
sequent connections from the user, and the user’s browser will au-
tomatically failover to the legitimate server, after which the attack
proceeds as before. For the other half of responses, the user will
be delivered directly to the legitimate server and the pharming at-
tack will silently fail. This shows how an attacker with the ability
to replace a single record, once, (e.g., by cache poisoning) can still
attack thousands or millions of users.
3.3 Discussion
Dynamic pharming attacks do not leverage vulnerabilities in
any particular authentication mechanism; rather, they exploit how
browsers currently enforce the SOP. Since dynamic pharming hi-
jacks the victim’s session after she authenticates herself to the le-
gitimate server, this attack most likely affects all known authentica-
tion mechanisms for current browsers, and probably all future ones
as well.
In some cases, pharming attacks can also steal users’ authentica-
tion credentials, e.g., passwords and authentication cookies. Since
the users’ URL bar will show the correct domain name, even the
most meticulous user might be fooled into revealing her password.
Also, since browsers enforce the SOP based on domain names,
pharmers can steal user’s authentication cookies for the target site.
Although dynamic pharming attacks against client-side SSL au-
thentication do not enable pharmers to steal users’ authentication
credentials (i.e., their private keys), as we have seen, they can com-
promise users’ sessions in real time.
Some web sites use Javascript to detect and prevent framing, e.g.,
if (parent.frames.length > 0)
top.location.replace(document.location);
However, Javascript anti-framing techniques are not sufﬁcient to
resist dynamic pharming. Our attack does not depend on the use of
iframes to be successful. For instance, the attacker could load the
legitimate index.html in another tab or window. The SOP still
allows malicious Javascript access to the second window, and this
situation is much harder for the legitimate site to detect.
3.4 Proof of concept implementation
We implemented a proof of concept dynamic pharming attack
using a pair of Apache SSL web servers (i.e, a pharmer and a target)
and round robin DNS. We tested the attack against two browsers:
Firefox 2.0 running on Debian GNU/Linux 3.1 and Microsoft Inter-
net Explorer 7.0 running on Windows XP Professional SP2. After
the adversary delivers the trojan document, she refuses further con-
nections from the client. This causes the browser to renew its DNS
entry for the target domain and connect to the legitimate server,
after which the adversary hijacks the session with the malicious
Javascript in the trojan document. We found both browsers to be
vulnerable to this dynamic pharming attack.
4. THE LOCKED SAME-ORIGIN POLICY
Since dynamic pharming hijacks a user’s session after initial au-
thentication completes, this attack is independent of the authen-
tication mechanism and affects all known authentication schemes
for current browsers, including passwords, authentication cookies,
and client-side SSL. It is therefore unlikely that any future web au-
thentication protocol developed for existing browsers will resist dy-
namic pharming either. Although dynamic pharming attacks lever-
age the implementation details of DNS pinning, “ﬁxing” DNS pin-
ning to resist DNS rebinding attacks is challenging. DNS pinning
has a lengthy and controversial history in Firefox and Mozilla [47],
and the current implementation is an explicit compromise to sup-
port dynamic DNS and round robin DNS for failover [46, 48].
From the browser’s point of view, a dynamic pharming attack is
indistinguishable from a failure of a site and DNS round robin re-
covery. Lastly, it is unlikely web sites can resist dynamic pharm-
ing attacks effectively. The adversary has the advantage of loading
her document ﬁrst; she can read and modify all of the legitimate
server’s documents in the victim’s browser, as well as control their
execution environment.
To resist dynamic pharming, we must address the root of the
problem: we must upgrade browsers’ SOP. A SOP based on do-
main names will fail because pharmers control the mapping from
domain name to subject. For web objects retrieved over insecure
HTTP, it is unclear how the browser can distinguish a pharmer from
the legitimate server. However, for objects retrieved over SSL, we
argue browsers should enforce the SOP using cryptographic iden-
tity. We refer to web objects retrieved over SSL as locked web
objects, and we propose two locked same-origin policies to resist
dynamic pharming attacks against them.
We ﬁrst present the weak locked same-origin policy, which iso-
lates a domain’s locked web objects with valid certiﬁcate chains
from objects with invalid chains. We then present the strong
locked same-origin policy, which is based on cryptographic iden-
tity, namely web sites’ SSL public keys.
Both policies only apply new restrictions to locked web objects.
For non-SSL web objects, the legacy SOP (namely, using domain
names) still applies. Like the legacy SOP, both locked SOPs deny
unlocked web objects (that is, objects not retrieved over SSL) ac-
cess to locked web objects. We summarize our policies in compar-
ison to the legacy SOP in Table 1.
4.1 The weak locked same-origin policy
The legacy SOP currently allows access to locked web objects
only from other locked web objects originating from the same do-
main.3 However, the legacy SOP does not distinguish between
locked web objects retrieved from a legitimate server and those
from a pharmer spooﬁng the server’s domain name, and will al-
low access if the user ignores any certiﬁcate warnings. To resist
pharming attacks, the weak locked SOP augments the legacy SOP
by tagging each locked web object with a validity bit indicating
whether the certiﬁcate chain corresponding to the SSL connection
over which the object was retrieved contained any errors (e.g., self-
signed certiﬁcate, CN/domain mismatch), irrespective of how the
user responded to any certiﬁcate warnings. Then, the browser al-
lows a locked web object to access another locked web object if and
only if 1) the legacy SOP would allow access and 2) the validity bits
match.
4.2 The strong locked same-origin policy
With the strong locked SOP, we propose browsers augment the
legacy SOP by tagging each locked web object with the public key
of the other endpoint of the SSL connection (i.e., the web server).
Then, the browser allows a locked web object to access another
locked web object if and only if 1) the legacy SOP would allow
access and 2) the associated public keys match. The strong locked
SOP was inspired by Key Continuity Management [19, 23, 60, 84],
a technique for associating public keys with subjects and taking
defensive action when a subject’s public key unexpectedly changes
in a future interaction.
4.3 Security analysis
Weak locked same-origin policy. If a web server hosting domain
D (i.e., the target domain) uses a valid X.509 certiﬁcate signed by
a trusted root CA, the weak locked SOP resists phishing, pharming,
and active attacks against D’s locked web objects (i.e., illegitimate
access by the adversary’s web objects) as long as the adversary is
unable to obtain a valid certiﬁcate for D. The weak locked SOP
resists phishing attacks because a phisher has a different domain
name. For pharming and active attacks, the adversary can arrange
for her web objects to have the same name as the target domain,
but if she does not have a valid certiﬁcate for the target domain, the
validity bit will be false, while the validity bit of the web server’s
locked objects will be true. Thus, the adversary is denied access.
If the legitimate target site uses an invalid X.509 certiﬁcate (e.g.,
expired, CN/domain mismatch, or self-signed), the weak locked
SOP provides no additional protection over the legacy SOP. It re-
sists phishing attacks, but does not protect against pharmers or ac-
tive attackers.
In contrast to the legacy SOP, the weak locked SOP does not
depend on users correctly answering prompts in response to cer-
tiﬁcate errors (e.g., if an adversary presents a self-signed certiﬁcate
with a spoofed domain name). The browser tags locked web objects
according to the validity of the server’s certiﬁcate and its domain
name, and nothing else. However, the weak locked SOP does as-
3Exception: if a web site sets a non SSL-only cookie (i.e., with-
out the secure attribute) over an SSL connection, then this policy
allows the same domain to access the cookie over non-SSL connec-
tions as well. Essentially, a non SSL-only cookie set over an SSL
connection gets downgraded to an unlocked web object.
sume that the trusted root CAs do not issue valid certiﬁcates for D
to unauthorized parties. Although CAs take measures to prevent
this, mistakes have been made in the past [45].
If a web server hosting do-
Strong locked same-origin policy.
main D uses an X.509 certiﬁcate with public key P K, the strong
locked SOP resists phishing, pharming, and active attacks against
D’s locked web objects as long as the adversary does not know the
corresponding private key for P K. As with the weak locked SOP,
the strong locked SOP resists phishing attacks because a phisher
has a different domain name. In order to access D’s locked web
objects, the adversary must pharm D and also arrange for its own
objects to be tagged with P K. However, the browser will only
do this if 1) the adversary presents a X.509 certiﬁcate with P K,
and 2) the browser and adversary can successfully establish an SSL
connection. If the adversary tries to present a certiﬁcate for P K
and she does not know the private key corresponding to P K, she
will not be able to successfully complete the SSL handshake; the
browser will automatically cancel the connection with no option
of user override. Thus, since the browser will only tag the adver-
sary’s locked web objects with a public key different from P K, the
browser will deny the adversary access to D’s locked web objects.
For the same reason, the strong locked SOP protects D’s locked
web objects against active attackers as well.
As with the weak locked SOP, the strong locked SOP does not
depend on users correctly answering prompts in response to certiﬁ-
cate errors. Furthermore, in contrast to the weak locked SOP, the
strong locked SOP does not require a web site to trust root CAs not
to issue certiﬁcates to unauthorized parties for its domain. Enforce-
ment relies only on servers’ public keys.
4.4 Deployability analysis
If our locked same-origin policies are to be successful, they need
to be easy to deploy and backwards compatible; they should not
“break the web” because of problems with deployment or interop-
erability with existing web servers. Since no browser developer
is likely to embrace a policy that makes her browser incompatible
with existing web sites, legacy web servers had better continue to
work even when visited with locked SOP enabled browsers.
Our policies are more restrictive than the legacy SOP, but we
only want to deny access to an attacker – never the legitimate server.
We will “break” a web site if there is a situation where our policy
would deny a legitimate server access to one of its locked web ob-
jects, but the legacy SOP would allow access.
There are a few situations where our policies could potentially
break a web site. For example, suppose server A for xyz.com
has an valid certiﬁcate, but server B for xyz.com has an invalid
certiﬁcate (or vice versa). Then the weak locked SOP would deny
Javascript from server A from accessing an HTML document from
server B, but the legacy SOP would allow access. This situation
might arise if xyz.com uses round robin DNS for load balancing
and a browser request objects from both servers during a session.
Note that the weak locked SOP will not break a domain which uses
invalid certiﬁcates on all its servers (e.g., it uses self-signed cer-
tiﬁcates) since objects from these servers have equivalent validity:
they are all invalid.
If server A and server B use different public keys, then the strong
locked SOP would also deny access. However, the strong locked
SOP does not necessarily require the domain to use certiﬁcates is-
sued by a root CA trusted by browsers. As long as all servers use
the same public key, the web site can use certiﬁcates issued by a
root CA untrusted by browsers or self-signed certiﬁcates.
Browser
IE
Firefox
Session caching
Persistent caching
of CA certs
of CA certs
Uses AIA
X
X
X
X
Table 2: Summary of browser mechanisms used to address
missing and expired intermediate CA certiﬁcates. AIA refers
to the optional Authority Information Access X.509 extension.
4.4.1 An SSL server survey
To evaluate the deployability of our policies, we must determine
how many sites we could potentially break; in other words, how
often the above conﬁgurations actually arise in practice. To mea-
sure this, we surveyed SSL servers in the real world to determine
how many servers may not currently interoperate with our policies.
We constructed a sample of SSL servers by ﬁrst crawling the web,
starting from a list of major news, portal, and ﬁnancial sites. When-
ever we found an HTTPS link, we added the domain in the link to
our sample. For the sake of simplicity, we restricted our study to
the following top-level domains: com, org, net, gov, edu, biz,
info, and name. We excluded international top-level domains.
We found 14651 fully qualiﬁed SSL domains from 6192 second-
level domains.4 This corresponds to roughly 6.5% of the number
of SSL domains found by the more extensive monthly SSL survey
conducted by E-Soft and securityspace.com [65].
We are primarily interested in ﬁnding domains hosted by multi-
ple servers, since it is these domains that our policies could poten-
tially break. We can discover some servers by looking for use of
round robin DNS; if a server uses round robin DNS, a DNS query
returns a list of IP address. However, Akamai-style load balanc-
ing often considers the physical location of the DNS querier and
may only return the IP address of most appropriate server. To take
Akamai-style load balancing into account, we constructed a list of