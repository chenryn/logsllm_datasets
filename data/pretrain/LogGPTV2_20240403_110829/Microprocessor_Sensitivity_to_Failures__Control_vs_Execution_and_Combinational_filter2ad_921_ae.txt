### 5.4 Fault/Error Propagation Paths Analysis

Analyzing the propagation of faults and errors between the functional units of a processor helps in (i) understanding how the processor fails, and (ii) determining where to deploy detection mechanisms to maximize the chances of detecting a fault before it corrupts the processor's state or propagates outside.

#### Generation of Error Propagation Graph

1. **Static Analysis on VHDL Netlist:**
   - Conduct a static analysis on the VHDL gate-level netlist of the target processor to build a static connectivity diagram. This diagram represents the communication paths between the functional units.
   - Figure 3a shows a sample static connectivity diagram, where nodes labeled Alu, Rb, Dp, and Biu correspond to the functional units, and arcs depict unidirectional wires between these units.

2. **Error Propagation Table:**
   - Generate an error propagation table for an injected fault, which is a time-ordered sequence of functional units affected by the fault until the error surfaces at the processor interface.
   - For example, if a fault is injected in the Alu and spreads to Rb, Dp, and Biu, the time-ordered sequence is shown in Figure 3b.

3. **Comparison with Static Connectivity Diagram:**
   - Compare the constructed error propagation sequences with the static connectivity diagram to eliminate infeasible propagation paths.
   - In the example, comparing the connectivity diagram in Figure 3a with the time-ordered sequence in Figure 3b, two feasible paths are extracted: Alu → Rb → Biu and Alu → Dp.
   - Infeasible paths, such as Biu → Dp and Rb → Dp, are discarded due to the lack of physical paths or unidirectional connections.

4. **Assigning Weights to Arcs:**
   - Assign a weight to each arc of any feasible fault propagation path, representing the probability of occurrence of that fault-path.
   - The weight assigned to each arc originating from a given node is inversely proportional to the number of feasible arcs.
   - In the example, there are two feasible paths, so the weight assigned to each outgoing arc from the Alu node is 1/2.
   - If a particular path has already been traversed by any previous faults, the current weight is summed with the previous weight.

5. **Collecting Feasible Propagation Paths:**
   - Collect all feasible propagation paths for all faults.

6. **Creating a Global List:**
   - Create a global list of unique fault/error propagation paths with weights adjusted according to the frequency of occurrence of each path.
   - Normalize the final weight of each propagation path with respect to the total number of manifested errors to obtain a global list of all propagation paths and their associated probabilities.

7. **Merging into a Global Graph:**
   - Merge the identified paths into a global fault/error propagation graph, resulting in a list of unique paths with their probabilities of occurrence.
   - Figure 3c depicts the global fault/error propagation paths obtained from the analysis of experimental data from the Bubble Sort workload.

#### Discussion

- **Propagation to Biu:**
  - As expected, faults propagate directly to the Biu from the If (10%), Lsu (17%), Wb (24%), and Dp (5%).
  
- **Faults Affecting Program Counter (PC):**
  - The Dp and Rb are sources of faults that can change the PC value. 10% of faults in Dp and 26% of faults in Rb propagate to the If.
  - The Dp forces a change in the PC value in case of misprediction or exceptions during instruction decoding. Exceptions in the Alu (17%), Mdu (32%), Lsu (10%), or Bru (36%) are flagged in the Rb and then propagate to the If.

- **Corruption of Processor State:**
  - One of the main reasons for fault manifestation is the corruption of the processor state, particularly the Rf.
  - The Rf can be corrupted by the Dp (20%), If (19%), or Cu (16%). Among these, the Cu is the primary source of corruption.

- **Most Sensitive Paths:**
  - The most sensitive paths from our analysis are reported in Table 12. The top 20 most frequent paths account for about 50% of all paths traversed.

#### Protection Strategies

- **Effective Detection Mechanisms:**
  - Results from the fault/error propagation path analysis can be used to devise effective protection strategies.
  - For example, the Rf is a complex block occupying about 22% of the total area of the processor. Replication mechanisms for error detection are expensive.
  - From the global error propagation path, it is clear that a fault generated in the Rf corrupts the Dp 30% of the time. The Dp gets the contents of the registers from the Rf and delivers this value to the Alu.
  - A detection mechanism can be deployed between the interfaces of the Rf and the Cu to check for anomalous values of the registers. A possible mechanism would be to use a comparator to check the register values against boundaries computed by profiling the application.

#### Related Work

- **HDL-Level Fault Injectors:**
  - Techniques for implementing HDL-level fault injectors for hardware systems can be classified into two major groups:
    - **Modification-Based Injectors:** These modify the description of the target system to inject faults, such as saboteurs or mutants.
    - **State-Based Injectors:** These rely on changes to the simulation state (e.g., variable or signal values) without modifying the system description.
  - Modification-based injectors enable a broader range of faults but are more complex to implement. State-based injectors are easier to implement and allow faster simulations.

- **Studies on Processor Behavior:**
  - Several studies have analyzed processor behavior using fault injection. For example, [5] studied the effects of transient faults in a superscalar Alpha-like processor, observing that 88% of injected faults do not manifest, with the most error-sensitive units being the register file and speculation logic.
  - [10] introduced the Architectural Vulnerability Factor to quantify error sensitivity, focusing on flip-flops affecting performance.
  - [6] found that the microcode unit (or control logic) is as sensitive as the execution unit in PicoJava II.
  - [7] proposed a technique to estimate the failure rate of digital designs implemented on SRAM-based FPGAs, based on signal probabilities and error propagation probabilities.

#### Conclusions

- **Impact of Soft Errors:**
  - This paper studies the impact of soft errors in a microprocessor for embedded applications, using a gate-level implementation of a DLX-like processor.
  - Transient faults were injected to stress the processor while executing selected applications.
  - The results indicate that the fault sensitivity of control and speculation blocks is comparable to or even larger than that of the execution block.
  - Combinational logic, though less sensitive than flip-flops, could lead to increased error manifestation in future technologies.

#### Acknowledgments

- **Support and Contributions:**
  - This work was supported in part by NSF grant ACI 0121658 ITR/AP, MURI grant N00014-01-1-0576, and the Gigascale Systems Research Center (GSRC/MARCO).
  - We thank Fran Baker for her careful reading of an earlier draft of this paper.

#### References

- [1] T. Karnik, P. Hazucha, J. Patel, “Characterization of soft errors caused by single event upsets in CMOS processes,” IEEE Transactions on Dependable and Secure Computing, 1(2), 2004.
- [2] P. Shivakumar, et al., “Modeling the effect of technology trends on the soft error rate of combinatorial logic,” Proc. of Int’l Conference on Dependable Systems and Networks, 2002.
- [3] T. Juhnke, H. Klar, “Calculation of the soft error rate of submicron CMOS logic circuits,” IEEE Journal of Solid-State Circuits, 30, 1995.
- [4] P. Hazucha, et al., “Measurements and analysis of SER-tolerant latch in a 90-nm dual-V/sub T/ CMOS process,” IEEE Journal of Solid-State Circuits, 39(9), 2004.
- [5] N.J. Wang, et al., “Characterizing the effects of transient faults on a high-performance pipeline,” Proc. of Int’l Conference on Dependable Systems and Networks, 2004.
- [6] S. Kim, A. K. Somani, “Soft error sensitivity characterization for microprocessor dependability enhancement strategy,” Proc. of Int’l Conference on Dependable Systems and Networks, 2002.
- [7] G. Asadi, M.B. Tahoori, “An analytical approach for soft error rate estimation of SRAM-based FPGAs,” Proc. of MAPLD Int’l Conference, 2004.
- [8] Z. Alkhalifa et al., “Design and evaluation of system-level checks for on-line control flow error detection,” IEEE Trans. on Parallel and Distributed Systems, 10(6), 1999.
- [9] R. Karri, B. Iyer, “Introspection: A register transfer level technique for concurrent error detection and diagnosis in data-dominated designs,” ACM Trans. Design Autom. Electr. Syst. 6(4), 2001.
- [10] S.S. Mukherjee, et al.: “A systematic methodology to compute the architectural vulnerability factors for a high-performance microprocessor,” Proc. of MICRO-36, 2003.
- [11] J.L. Hennessy, D.A. Patterson, Computer Architecture: A Quantitative Approach, Morgan Kaufmann, 2002.
- [12] H. Eveking, SuperScalar DLX documentation, http://www.rs.e-technik.tu-darmstadt.de/TUD/res/dlxdocu/DlxPdf.zip.
- [13] L.B. Freeman, “Critical charge calculations for a bipolar SRAM array,” IBM Journal of Research and Development, 40(1), 1996.
- [14] P. Hazucha, “Background radiation and soft errors in CMOS circuits,” Linkping Studies in Science and Technology, Dissertations, 2000.
- [15] http://bwrc.eecs.berkeley.edu/Classes/IcBook/SPICE/.
- [16] G.S. Choi, R.K. Iyer, “FOCUS: An experimental environment for fault sensitivity analysis,” IEEE Trans. on Computers, 41(12), 1992.
- [17] Z. Kalbarczyk, et al., “Hierarchical simulation approach to accurate fault modeling for system dependability evaluation,” IEEE Transactions on Software Engineering, 25(5), 1999.
- [18] N.J. Buchanan et al., “Total ionizing dose effects in a Xilinx FPGA,” ATLAS-LARG internal note ATL-LARG-99-003, 1999.
- [19] K.-T. Cheng, S.-Y. Huang, W.-J. Dai, “Fault emulation: A new methodology for fault trading,” IEEE Transactions on CAD, 18(10), 1999.
- [20] C. Weaver, T. Austin, “A fault-tolerant approach to microprocessor design,” Proc. of Int’l Conference on Dependable Systems and Networks, 2001.
- [21] J. Gracia, et al., “Comparison and application of different VHDL-based fault injection techniques,” Proc. of Int’l Symposium on Defect and Fault Tolerance in VLSI Systems, 2001.
- [22] J. Boue, et al., “MEFISTO-L: A VHDL-based fault injection tool for the experimental assessment of fault tolerance,” Proc. of Int’l Symposium on Fault-Tolerant Computing, 1998.
- [23] V. Sieh, O. Tschache, F. Balbach, “VERIFY: Evaluation of reliability using VHDL-models with embedded fault descriptions,” Proc. of Int’l Symposium on Fault-Tolerant Computing, 1997.
- [24] N. Nakka, Z. Kalbarczyk, R.K. Iyer, J. Xu, “An architectural framework for providing reliability and security support,” Proc. of Int’l Conference on Dependable Systems and Networks, 2004.

---

This version of the text is more structured, coherent, and professional, with clear headings and a logical flow of information.