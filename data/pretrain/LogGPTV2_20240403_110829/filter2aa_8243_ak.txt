from struct import unpack, pack as pk
from io import BytesIO as BIO
import lzwlib
up = lambda *args: unpack(*args)[0]
def F(f):
    assert f.read(3) == 'GIF', ''
    assert f.read(3) == '89a', ''
    w, h = unpack('HH', f.read(4))
    assert 32  bgcoloridx, ''
    return clrs, bgcoloridx, size_count, h, w
class T(object):
    I = 0
    EG = 1
    EA = 2
    EC = 3
    ET = 4
def C(f):
    rb = f.read(1)
    b = up('B', rb)
    while b != 0x3B:
        buf = ''
        buf += rb
        if b == 0x2c:
            nbuf = f.read(2*4)
            eb = f.read(1)
            assert (up('B', eb) & 0x03) == 0, ''
            nbuf += eb
            nbuf += f.read(1)
            nbuf += V(f)
            t = T.I
        elif b == 0x21:
            rb = f.read(1)
            buf += rb
            b = up('B', rb)
            if b == 0xF9:
                nbuf = f.read(1)
                blksize = up('B', nbuf)
                nbuf += f.read(blksize)
                nbuf += f.read(1)
                assert nbuf[-1] == '\x00', ''
                t = T.EG
            elif b in [0xFF, 0x01]:
                nbuf = f.read(1)
                blksize = up('B', nbuf)
                nbuf += f.read(blksize)
                nbuf += V(f)
                t = (b+3) & 0x0F
            elif b == 0xFE:
                nbuf = V(f)
                t = T.EC
            else:
                raise Exception("unsupprted thing @{}".format(f.tell()))
        buf += nbuf
        yield t, buf
        rb = f.read(1)
        b = up('B', rb)
    yield None, '\x3B'
    raise StopIteration
def WB(buf):
    blockcount = len(buf)/0xFF
    blockcount += 1 if len(buf) % 0xFF else 0
    blocks = [
        pk('B', len(subblock))+subblock for subblock in [
            buf[i:0xFF+i] for i in xrange(0, blockcount*0xFF, 0xFF)
        ]
    ]
    return ''.join(blocks) + '\x00'
def k(bf):
    combined_buf = ''
    while True:
        cb = ord(bf.read(1))
        if not cb:
            break
        combined_buf += bf.read(cb)
    return combined_buf
def V(f):
    sbx = ''
    while True:
        rcb = f.read(1)
        sbx += rcb
        if rcb == '\x00':
            break
        cb = up('B', rcb)
        blk = f.read(cb)
        sbx += blk
    return sbx
def Q(delay, w, h, x, y, tidx):
    assert 0 = 6
                buf = buf[:4] + pk(' 2, 'bad input'
    fpath = sys.argv[1]
    flag = sys.argv[2]
    if len(sys.argv) > 3:
        outpath = sys.argv[3]
    else:
        outpath = fpath + '.out.gif'
    f = open(fpath, 'rb')
    o = open(outpath, 'wb')
    rv = E(f, flag, o)
    sys.exit(rv)
```
ניתן לראות שהדגל
מתקבל כפרמטר לפונקציית E, שבתורה
שולחת אותו ל-M:
```python
mp, ks = M(s)
```
&nbsp;