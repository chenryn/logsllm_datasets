These are raw addresses. Using ksym() to convert these to kernel function names:
 bpftrace -e *tracepoint:timer:hrtiner_start ( @[ksym(args->function)] = count () : 1 ′
Attach.ing l probe...
°C
e[sched_rt_perlod_tiner] : 4
[vatchdog_timer_fn] : B
e[timerfd_tnrpxoc]: 15
e[inte]_uncore_fv_release_timer]: 1111
6922 :[ugteex1]6
[hrtiner_sakeup] : 7714
e[tick_sched_tinex] : 27092
usym() relies on symbol tables in the binary for symbol lookup.
5.13.6 kaddr() and uaddr()
kaddr( and uaddr() take a symbol name and return the address, kaddr() is for kernel symbols, and
uaddr() is for user-space symbols. Syntax:
kaddz (char *nane)
uadde (char *nane)
For example, looking up the user-space symbol °ps1_prompt”a when a bash(1) shellfunction is
called, and then dereferencing it and printing it as a string:
printf ("ps1: s\n*, ste (*uaddr ("ps1_pronpt*>)1 : )*
Attaching 1 pzobe...
PS1 : \ [e [34; 1.] \u\h:>[\e [0]
PS1:  Ie [34; In.uh:>\ [e[0α ]
^C
This is printing the contents of the symbolin this case the bash(1) PS1 prompt.
5.13.7 system()
system() executes a command at the shell. Syntax:
syatem (char *fnt [. argunent. ...]1
---
## Page 204
5.14 bpftrace Map Functions
167
Since anything can be run at the shell, system() is deemed an unsafe function and requires the
--unsafe bpftrace option to be used.
For example, calling ps(1) to print details on the PID calling nanosleep0:
',u\ps d- sd,uss/s 1 dooteoueuxeguss:streoss:a, o- ogesun-- soezagdq :
pid) : 1'
Attaching 1 probe...
PID TTY
TIME CMD
05:34 :22 nysql4
PID TTY
TIME CMD
05:34:22 nysq1d
PID TTY
TIME CMD
05:34 :22 nysql4
[. .-]
If the traced event was frequent, using system() could create a storm of new process events that
consume CPU resources, Only use system() when necessary,
5.13.8
exit()
This terminates the bpftrace program. Syntax:
exit ()
This function can be used in an interval probe to instrument for a fixed duration. For example:
+ bpftrace -e 't:syscalls:sys_enter_read ( @reads = count () : 1
interval:s:5 [ exit(): 1*
Attach.ing 2 probes...
preads: 735
uodn no paguud are sdeu y 'seoss Opea ge auam aatqa 'spuoas aag u e smous s
bpftrace termination, as seen in this example.
5.14
bpftraceMapFunctions
Maps are special hash table storage objects from BPF that can be used for dlifferent purposesfor
example, as hash tables to store key/value pairs or for statistical summaries. bpftrace provides
[eopsges Suquoddns so Apsou *uoge[ndrueu pue juauru8isse deu 1og suoμoung u-nq
summary maps. The most important map functions are listed in Table -7
---
## Page 205
168
 Chapter 5 bpftrace
Table 5-7 bpftrace Selected Map Functions
Funetion
Description
count ()
Counts occurrences
sum (int n)
Sums the value
avg (int n)
Averages the value
min (int n)
Records the minimum value
max (int n)
Records the maximum value
(u u) ses
Returns the count, average, and total
hist (int n)
Prints a power-of-two histogram of values
1hist (int n, Lnt min, int  Prints a lIinear histogram of values
max, Lnt step)
delete (@n[key1)
Deletes the map key/value pair
pzint (@m [。 top I, div11) Prints the map, with optional limits and a divisor
clear (@n)
Deletes all keys from the map
zero (@m)
Sets all map values to zero
is processed in user space. The asynchronous actions are print(), clear(), and zero(). Bear in mind
suesfoad Suum aze no uaqm Keap sq
See the online *bpftrace Reference Guide* for the full and updated list of functions [66].
A selection of these functions are discussed in the following sections.
5.14.1 count()
count() counts occurrences. Syntax:
m = count () 
This function can be used with probe wildcards and the probe built-in to count events:
（:(1umoo = [eqoxd]8 1 :xpotq:uodee,-8oezgdg 
Attaching 18 probes...
°C
e[tracepoint:block:block_rq_issue] : 1
[tracepoint:block:block_rq_insert] : 1
e[tracepoint:block:block_dirty_buffex[ : 24
e[tracepoint:block:block_touch_buffer] : 29
e[tracepoint:block:block_rq_conplete] : 52
---
## Page 206
5.14 bpftrace Map Functions
169
[tracepoint:block:block_getrg] : 9]
[tracepoint:block:block_bio_conplete] : 102
[tracepoint:block:block_bio_remap] : 180
e[tracepoint:block:lblock_bio_queue]: 270
With the interval probe, a per-interval rate can be printedl, for example:
interval:s:1 ( print(e) : clear (8) : 1*
Attaching 3 pzobes..
[tracepoint:block:block_rq_issue] : 1
e[tracepoint:block:block_rq_insezt]: 6
[tracepoint:block:block_rq_issue] : 8
e[tracepoint:block:block_rq_issve] : 1
e[tracepoint:block:block_rq_insezt]: 1
[+ - -]
This basic functionality can also be accomplished by using perf(1) and per f stat., as well as
Ftrace. bpftrace enables more customizations: A BEGIN probe could contain a printf() call to
explain the output, and the interval probe could include a time( callto annotate each interval
with timestamps.
5.14.2sum(), avg(), min(), and max()
These functions store basic statisticsthe sum, average, minimum, and maximumas a map.
Syntax:
sun (int n)
avg (int n)
nin (int n)
nax (int n)
For example, using sum() to find the total bytes read via the read(2) syscall;
) /0 ret is positive: A positive return value from read(2) indicates the number of bytes read,
whereas a negative return value is an error code. This is documented in the man page for read(2).
5.14.3 hist()
hist() stores a value in a power-of-two histogram. Syntax:
hiat (int n)
For example, a histogram of successful read(2) sizes:
( : (4a3zet, 0, 1000, 100) : 1*
Attach.ing 1 probe...
?ret:
(.., 0)
1011889
[0, 100)
[100, 200}
5 1
(00ε 00z1
10
[300, 400}
31
[400, 500
D 1
(009005]
0 1
[600,700]
31
(008*001
0 1
(0060081
D 1
[900, 1000
0 1
[1000,
..-)
51
The output shows that most reads were between zero and (less than) 100 bytes. The ranges are
printed using the same interval notation as with hist(). The *(.., O)* line shows the error count:
101 read(2) errors while tracing. Note that error counts are better viewed differently, such as by
using a frequency count of the error codes:
+ bpftrace -e 'tracepoint:syscalls:sys_exit_read /args->ret zet] = count() : 1′
Attach.ing 1 probe...
°C
[11]: 57
Error code 11 is EAGAIN (try again). read(2) returns it as -1.
5.14.5
delete()
delete() deletes a key/value pair from a map. Syntax:
delete (Bmap [key]1
---
## Page 209
172
Chapter 5 bpftrace
There may be more than one key, as needed, to match the map type.
5.14.6clear() and zero()
clear() deletes all key/value pairs from a map, and zero( sets all values to zero. Syntax:
clesr (9map)
zero (8nap)
When bpftrace terminates, all maps are printed out by default. Some maps, such as those used for
pauea aq ueo au1 sndino poo at jo μued aq on papuapu 1uase suogenoeo eaap dueisau
up in an END probe to prevent their automatic printing:
END
 (4xeg) 1e
5.14.7print()
print() prints maps. Syntax:
pzint(@α I, top I, div]11
Two optional arguments can be provided: a top integer, so that only the top number of entries is
printed, and a divisor integer, which divides the value.
To demonstrate the top argument, the following prints the top five kernel function calls that
:sA, ym u3aq
+ bpftrace -e 'kprobe:vfs_* ( 8[probe] = count() : } EMD ( print (8, 5) : clear (@) ; )'
Attach.ing 55 probes...
^C
e[kpzobe:vfs_getattr_nosec] : 510
[kprobe:vfs_getattr] : 511
[kpzobe:vfs_xx1tev] : 1595
[kprobe:vfs_rite] : 2086
[kpzobe:vfs_zead] : 2921
While tracing, vfs_read() was called the most (2921 times).
---
## Page 210
5.15 bpftrace Future Work  173
To demonstrate the div argument, the following records time spent in vfs_read0 by process name
and prints it out in milliseconds:
[:soesu =[pra]areasg 1 peex sga:aqoxdx, a- aoegdq +
)/[pta]axeasa/peexsga:oqoadyexx
(ms[conm] = sum(nsecs - Bstart[tid]) : delete(Bstart[tid]) : }
END [ print(@ns, 0, 1000000): elear(@ms) : elear (@start) : 1*
Attaching 3 prcbes..-
[.- -]
 : [0ox]e
ms [InputThxead] : 3
ms |ch.rone] : 4
Bms [Xeb Content]: 5
Why was it necessary to have the divisor? You could try writing this program like this instead:
(00o00T / ([pTa11xe1s@ - soesu] |uns - [moo|s)
However, sum() operates on integers, and decimal places are rounded down (floored). So any
duration less than one millisecond is summed as zero. This results in an output ruined by
rounding errors. The solution is to sum() nanoseconds, which preserves the sub-millsecond
cdurations, and then do the divisor on the totals as the argument to print().
A future bpftrace change may allow printo to print any type, not just maps, without formatting
5.15bpftraceFutureWork
There are a number of planned additions to bpftrace that may be available by the time you read
https://github.com/iovisor/bpftrace.
this book. See the bpftrace release notes and documentation in the repository for these additions:
saueqo aseo ul ooq stu ut papnpourt apoo aomos aoengdq aq o salueqp pauueld ou are auat
do become necessary, check for upxates on this book's website: http:/www.brendangregg.com/
bpf-performance-tools-book.html.
5.15.1 Explicit Address Modes
go snds arngng e uoddns o ssaooe aoeds ssappe uogdxa aq Imm aoengdq o uoppe isatie au
bpf_probe_read() into bpf_probe_read_kernel() and bpf_probe_read_user( [69]. This split is
necessary to support some processor architectures. 1 It should not affect any of the tools in this
book. It should result in the addition of kptr() and uptr() bpftrace functions to specify the address
mode. Needing to use these should be rare: bpftrace will figure out the address space context
13 *They are rare, but they exist. At least sparc32 and the old 4G:4G split x86.°Linus Tonvalds [70]
---
## Page 211
174
 Chapter 5 bpftrace
whenever possible from the probe type or function used. The following shows how the probe
context should work:
kprobe/kretprobe (kernel context):
 argO...argN, retval: When dereferenced, are kernel acddresses
· *addr: Dereferences a kernel address.
str(addr): Fetches a NULL-terminated kernel string.
'ssappe 1asn e saouauagaua(I :(appe)ndn, *
str(uptr(addr): Fetches a null-terminated user string.
uprobe/uretprobe (user context):
 argO...argN, retval: When dereferenced, are user addresses.
·*addr: Dereferences a user address.
str(addr): Fetches a NULL-terminated user string
·*kptr(addr): Dereferences a kernel address,
str(kptr(addr): Fetches a NULL-terminated kernel string.
So *addr and str() will continue to work, but will refer to the probe-context address space: kernel
memory for kprobes and user memory for uprobes. To cross address spaces, the kptr() and uptr()
functions must be used. Some functions, such as curtask(), will always return a kernel pointer,
regardless of the context (as would be expected).
Other probe types default to kernel context, but there will be some exceptions, documented in
the °bpftrace Reference Guide* [66]. One exception will be syscall tracepoints, which refer to user
address space pointers, and so their probe action will be in user space context.
5.15.2Other Additions
Other planned additions include:
Me1 pue 'suexlond qps pue aqoos ,'squodqprem A1ouau sop sad6 aqoud qeuoppv 
tracepoints
• uprobe and kprobe function offset probes
■for and wh1 1e loops that make use of BPF bounded loops in Linux 5.3
● Raw PMC probes (providing a umask and event select)
uprobes to also support relative names without full paths (e-g., both uprobe:/lib/x86_64-
linux-gnu/libc..so.6... and uprobe:libc:... should work)
sgna1 (1 to raise a signal (including SIGKILL) to processes
1.4 Dan Xu hss alresdy developed a proof of conoept implementation for r
bpftrace [71].
---
## Page 212
5.16 bpftrace Internals
175
·retuxn (1 or overr1de (1 to rewrite the returm of events (using bpf_override_return()
eh1st (1 for exponential histograms. Any tool or one-liner that currently uses the power
of-two hist() could be switched to ehist() for more resolution.
 pconm to return the process name. comm returns the thread name, which is usually the
same, but some applications, such as Java, may set comm to per-thread names; in that case,
,esel, unan [as pnom uuood
■ A helper function for struct file pointers to full pathnames
Once these additions are available, you may want to switch a few tools in this book from hist() to
ehist() for more resolution, and some uprobe tools to use relative library names instead of the full
paths for ease of use.
5.15.3 ply
The ply BPF front end, created by Tobias Waldekranz, provides a high-level language similar to
bpftrace and requires minimal dependencies (no LLVM or Clang). This makes it suited to resource
constrained environments, with the drawback that struct navigation and including header files
(as required by many tools in this book) are not possible.
An example of ply instrumenting the open(2) tracepoint:
printf ("PID: d (es) opening: 3sn", pid, comn, str(data->filenane)): )*
ply: active
PID: 22737 (Chrome_10thread] opening: /dev/shn/ -org,chromiun,Chroniun. dh4ms3
PID: 22737 (Chxone_I0Thread] open1ng: /dev/shn/ -org, chroniun, Chzoniun, dh4msB
PID: 22737 (Chrome_10Thread] opening: /dev/shn/ -org,chromiun,Chconiun. 2n11x4
 - -. 1
The above one-liner is almost identical to the equivalent in bpftrace. A future version of ply
could support the bpftrace language directly, providing a lightweight tool for running bpftrace
one-liners. These one-liners typically do not use struct navigation other than the tracepoint
arguments (as shown by this example), which ply already supports. In the distant future, with
BTF availability, ply could use BTF for struct information, allowing it to run more of the
bpftrace tools.
5.16bpftraceInternals
Figure 5-3 shows the internal operation of bpftrace.
---
## Page 213