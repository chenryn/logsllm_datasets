O0,p and O1,p
O0,p,O1,p,dp
−−−−−−−−−−−−→
Dp ← ExecΣb (Ob,p)
←−−−−−−−−−−−− If dp = 1, sends Dp
The outcome of this game is 1, iff b = b(cid:48), and 0 otherwise.
Ds
A outputs b(cid:48)
Figure 1: Security Game Γgeneric
A,Σ (s)
depending on bit b.
2. Using security parameter s, C chooses (cid:96) passwords and a ran-
dom bit b. C initializes two different hidden volume encryp-
tion schemes: Σ0 (with (cid:96) passwords) and Σ1 (with (cid:96) − 1
passwords). Finally, C sends passwords  and
an initial snapshot D0 of the disk to A.
3. A chooses two accesses and sends them to C, along with a
bit d that speciﬁes whether A would like a snapshot of the
disk after execution. Both the access patterns and bit d will
adhere to speciﬁc restrictions that we detail below.
4. Following scheme Σb, C “executes” one of the two accesses,
5. If d = 1, C sends a snapshot Di of the disk to A.
6. Repeat steps 3 to 5 for p = poly(s) times (rounds i). Oi,j
7. A outputs bit b(cid:48). The outcome of Γgeneric
A,Σ (s) is 1, iff b(cid:48) = b.
From this general game, we develop two axes along which we
can deﬁne varying levels of security: 1) the frequency with which
A can access snapshots of the disk (regulating when and how often
di can be 1 in our game above), and 2) the restriction applied to the
two access patterns O0,O1 that A chooses and submits to C. We de-
note by Γx,yA,Σ(s) a game that follows generic game Γgeneric
A,Σ (s), but
implies restrictions “x” (deﬁned below) on the frequency of snap-
shots and restrictions “y” (deﬁned below) on the access patterns.
denotes access j∈{0,1} in round i, 1≤ i≤ poly(s). E
DEFINITION 3
(HIDDEN VOLUME ENCRYPTION). A hidden
volume encryption scheme Σ is secure regarding restrictions (x,y),
iff for any probabilistic polynomial time adversary A there exists a
function (s) that is negligible in security parameter s, such that
P r[Γx,yA,Σ(s) = 1]≤ 1
2
+(s).
In conclusion, the rationale behind this game-based deﬁnition is
to prevent adversary A from successfully guessing whether there
exist (cid:96) − 1 or (cid:96) volumes in use, even when A is able to choose
(cid:96). We allow A to specify two patterns O0, O1, similar to classic
Restricted
Table 1: Different Notions for Hidden Volume Encryption
Plausible
Hiding
HIVE
HIVE
Hiding
HIVE-B
HIVE-B
Impossible
Reencryption
Opportunistic
Hiding
TrueCrypt, HIVE
TrueCrypt, HIVE
TrueCrypt, HIVE
Arbitrary
On-Event
One-Time
indistinguishability proofs, which allows us to capture a stronger
chosen plaintext adversary. The restrictions we place on these ac-
cess patterns will lead to an intuitive understanding of the security
our scheme provides.
2.2.1
We consider three different adversarial capabilities in terms of
Snapshot Frequency
snapshotting:
1. Arbitrary ΓArbitrary,(·)
A,Σ
: A can obtain snapshots after every
operation to the disk (any number of di can be 1).
A,Σ
2. On-Event ΓOn−Event,(·)
: A can obtain snapshots after U has
run an “unmount” operation. We represent this by having an
additional function Unmount which is called after Execute,
whenever di = 1, to generate the snapshot.
3. One-Time ΓOne−Time,(·)
A,Σ
: A can obtain only a single snap-
shot (di = 1 for only a single value of i).
Our justiﬁcation for also considering an “on-event” adversary is
that, in reality, some adversaries will not have the capability to take
arbitrary snapshots of the disk while it is in use. More likely, the
machine will be conﬁscated or compromised while U does not have
the hidden volume mounted. Therefore, a model where the adver-
sary can only take snapshots after an “unmount” is interesting.
2.2.2 Access Pattern Choice
An important part of our formal security is allowing the adver-
sary to choose some part of the access pattern. This represents the
fact that, in reality, an adversary may have partial knowledge of
U’s access pattern. Informally, allowing adversary A to choose the
access pattern will guarantee that no matter what a priori knowl-
edge A might have, they still cannot learn the secret we are trying
to protect (i.e., whether there is a volume still unrevealed). To for-
malize this, we allow A to choose a value (cid:96), between 1 and max
which represents the number of volumes in use by U. To maintain
some uncertainty about exactly how many volumes are actually be-
ing used, we then allow A to also choose two access patterns, one
which includes accesses to volume (cid:96) and one which does not.
We stress that restrictions on access pattern choices are manda-
tory to prevent “trivial” impossibility. For instance, in our model
A will get the passwords for all volumes up to V(cid:96)−1. If the two
patterns contain different writes to these volumes, then the result-
ing snapshots will allow A to distinguish between them easily (i.e.,
he simply decrypts these volumes and checks which values were
written). This is to be expected, since the point of hidden volume
encryption is to protect accesses to the secret volumes which may
or may not exist, from the adversary’s perspective. Once a pass-
word is given up, we cannot hide the contents any longer.
Therefore, the ﬁrst restriction which must exist for all of our def-
initions is that any access where both patterns write to a volume V1
through V(cid:96)−1 must contain identical writes in both patterns chosen
by adversary A.
We now present three settings, along with a justiﬁcation for why
they are useful analogues for the real world. The restrictions in each
settings are presented as A being able to choose an access pattern
.
O0 and then a second pattern O1 that must constrain to some re-
strictions based on O0. Intuitively, the restrictions on O0 govern
which types of access patterns are protected, and the restrictions on
O1 express the level of security that is achieved.
Restricted Hiding: Γ(·),Restricted
The ﬁrst setting we consider is the most straightforward: in each
round, we allow A to choose any access pattern O0 =. As stated before, if access o0,i is a write in volume Vj,
j ≤ (cid:96)− 1, then access o1,i in pattern O1 must be equal to o0,i. If
o0,i is in V(cid:96), then o1,i must be ⊥ (the null operation, it is simply
ignored by C). The access pattern executed when b = 1 is then the
same as when b = 0, with all accesses to V(cid:96) ignored by C.
A,Σ
Since the difference between O0 and O1 is only the removal of
all accesses to V(cid:96), a Restricted Hiding scheme effectively prevents
an adversary from distinguishing between the case where a user
uses (cid:96) volumes and the case where a user only uses (cid:96)−1 volumes,
with no restriction on the user’s access pattern. This means that a
scheme with Restricted Hiding would be the ideal system, since
it would protect any access pattern and an adversary would not be
able to learn whether there are (cid:96) or (cid:96)−1 volumes in use. Unfortu-
nately, this level of security is difﬁcult to achieve.
A,Σ
LEMMA 1. Let n∗ be the number of blocks of volume V(cid:96). There
-secure and requires less
is no scheme Σ that is ΓArbitrary,Restricted
than n∗ blocks of RAM.
PROOF (COUNTEREXAMPLE). A submits two access patterns
of length n∗, O0 and O1, where O0,i = (write,i,(cid:96),ri), O1,i = ⊥
$←− {0,1}B. In case A observes changes to the disk, A out-
and ri
puts 1. Otherwise, A outputs 0. If C executes O1, nothing on the
disk will change because ⊥ operations are ignored. If C executes
O0, then either the disk must change or C must have at least n∗
blocks or RAM to hold all the writes from O0.
This essentially means that against an adversary with Arbitrary
snapshotting capability you can do no better than storing all the
hidden volumes in RAM, which is quite unrealistic.
A,Σ
Although none of this paper’s solutions are directly targeted at
On-Event security, we include it in our deﬁnitions because it is
a distinctly separate adversarial model from Arbitrary and One-
Time. It has at least one interesting property: even though it is
impossible to achieve ΓArbitrary,Restricted
security, it is quite simple
(albeit inefﬁcient) to obtain ΓOn−Event,Restricted
security. If a True-
Crypt-like approach is taken except, upon unmount, every data
block is reencrypted and every empty block is ﬁlled with a uni-
formly random string, we achieve this security. This is highly in-
efﬁcient, but we point it out as an interesting observation on our
various adversarial models and possible motivation for more efﬁ-
cient solutions in the future.
Opportunistic Hiding: Γ(·),Opportunistic
A,Σ
.
The second setting we consider, opportunistic hiding, is similar
to restricted hiding, but with a slightly more speciﬁc access pat-
tern: again, if o0,i is in volume Vj, j ≤ (cid:96) − 1, then o1,i must be
equal to o0,i. Also, if o0,i is in V(cid:96), then o1,i will be ⊥. The addi-
tional restriction is that between snapshots, every write to a volume
V2 through V(cid:96) in O0 must have a corresponding read to volume V1
which occurs after it. More formally, the additional restriction says
that for O0 = (o1,...,on), there must exist a one-to-one mapping
f : [1...n] → [1...n] such that if O0,i is a write to a volume higher
than V1, then f (i) > i, O0,f (i) is a read from volume V1.
What this effectively means is that the system will hide writes
to volumes higher than V1 by executing them simultaneously with
A,Σ
A,Σ
reads to V1. This reﬂects the idea that, if we make execution of
reads and writes similar, there will be extra capacity during a read
to simultaneously do a write. We believe this that is not a very
onerous constraint, because it is very reasonable that the “secret”
volumes will be accessed much less frequently than the lowest vol-
ume, which is known to exist to the adversary.
This security deﬁnition also provides “complete” security to the
user, in that an adversary should not be able to distinguish whether
there are (cid:96)− 1 or (cid:96) volumes. In that way, it is similar to our ﬁrst
deﬁnition, however, in order for the user to receive this security, it
requires that the access pattern O0 must have fewer accesses to V2
through V(cid:96) than V1. In practice this means that the user must access
volume V1 more often than the other, more secret volumes.
Plausible Hiding: Γ(·),Plausible
.
Finally, we consider an even more restricted setting where writes
to V(cid:96) can be plausibly denied as operations to the other volumes V1,
...,V(cid:96)−1. A may choose any access O0,i. Again, if O0,i is a write
in volume Vj,j≤ (cid:96)−1, then o1,i must be equal to O0,i. Otherwise,
we only require that neither pattern contains ⊥ operations (so their
“true” lengths are equal).
The intuition of this security deﬁnition is that, if an access pat-
tern contains writes to V(cid:96), there is always a plausible access pattern
containing only accesses to V1 through V(cid:96)−1 (with writes to V(cid:96)
replaced by reads to other volumes) which would have produced
the same sequence of disk operations. Therefore an adversary can
never be sure of the existence of V(cid:96). Additionally, all writes to V(cid:96)
will be indistinguishable from each other. In contrast with the pre-
vious two deﬁnitions, we have restrictions on O1 beyond that the
accesses to lower volumes must be equal.
Finally, Table 1 summarizes our two orthogonal axes of hid-
den volume encryption. Our new scheme, HIVE, provides plau-
sible hiding with arbitrary snapshots. A variant of HIVE, HIVE-B,
provides opportunistic hiding with arbitrary snapshots (as well as
weaker notions). TrueCrypt and other related work [1, 4, 8, 13, 17,
21] only provide security against one-time snapshots [3]. Addition-
ally, as noted above, one can achieve on-event, restricted security
with an expensive reencryption technique. Note that Arbitrary ⇒
On-Event⇒ One-Time, and Restricted⇒ Opportunistic.
We would like to stress that any hidden volumes scheme needs
additional requirements to maintain security. For example, the OS
and applications should not keep any trace of previously mounted
hidden volumes, e.g. in a “recently opened documents” list. For a
detailed discussion, we refer to Czeskis et al. [3] and [20].
3. GENERIC HIDDEN
VOLUME ENCRYPTION
Current hidden volume encryption solution only protect against
One−Time adversaries. We now present a ﬁrst “generic” proto-
col, using Oblivious RAM as a building block, that offers stronger,
more robust security against One-Time and Arbitrary adversaries.
3.1 ORAM Preliminaries
An ORAM provides three operations: ORAMSetup(n, B, k, s),
ORAMRead(i), and ORAMWrite(i, d). It is a block-based data
structure storing n blocks of size B bits, each indexed by a log2n
bit integer, using a key κ for encryption, and s is the security param-
eter. This data structure is backed by a simple key-value store. As
shorthand, we write Execute(O) to be the reads and writes induced
on the underlying data store by the ORAM executing an access pat-
tern O. We refer to the large body of related work for more details,
e.g., seminal work by Goldreich and Ostrovsky [6] or recently Shi
et al. [16] or Stefanov et al. [18].