代码清单 15-6 参数自动识别
#include   
static main() {  
  auto addr, op, end, idx;  
  auto func_flags, type, val, search;  
  search = SEARCH_DOWN | SEARCH_NEXT;  
  addr = GetFunctionAttr(ScreenEA(), FUNCATTR_START);  
  func_flags = GetFunctionFlags(addr);  
  if (func_flags & FUNC_FRAME) {  //Is this an ebp-based frame?  
    end = GetFunctionAttr(addr, FUNCATTR_END);  
    for (; addr  end && addr != BADADDR; addr = FindCode(addr, search)) {  
      type = GetOpType(addr, 0);  
      if (type == 3) {  //Is this a register indirect operand?  
        if (GetOperandValue(addr, 0) == 4) {   //Is the register esp?  
          MakeComm(addr, "arg_0");  //[esp] equates to arg_0  
        }  
      }  
      else if (type == 4) {  //Is this a register + displacement operand?  
        idx = strstr(GetOpnd(addr, 0), "[esp"); //Is the register esp?  
        if (idx != -1) {  
          val = GetOperandValue(addr, 0);   //get the displacement  
          MakeComm(addr, form("arg_%d", val));  //add a comment  
        }  
      }  
    }  
  }  
}
这个脚本仅针对基于 EBP 的帧，并依赖于此：在函数被调用之前，当参数被压入栈中时，GCC会生成与 esp
 相应的内存引用。该脚本遍历函数中的所有指令。对于每一条使用esp
 作为基址寄存器向内存位置写入数据的指令，该脚本确定上述内存位置在栈中的深度，并添加一条注释，指出被压入的是哪一个参数。GetFunctionFlags
 函数提供了与函数关联的各种标志，如该函数是否使用一个基于 EBP 的栈帧。运行代码清单 15-6 中的脚本，将得到一个包含注释的反汇编代码清单，如下所示：
.text:080487AD                 mov     [esp+8], 0   ; arg_8  
.text:080487B5                 mov     [esp+4], 1   ; arg_4  
.text:080487BD                 mov     [esp], 2    ; arg_0  
.text:080487C4                 call    _socket
这里的注释并没有提供特别有用的信息。但是，现在，我们可以一眼看出，程序使用了3 个mov
 语句在栈上压入参数，这使我们朝正确的方向又迈进了一步。进一步扩充上述脚本，并利用IDC 的其他一些功能，我们可以得到另一个脚本，它提供的信息几乎和IDA 在正确识别参数时提供的信息一样多。这个新脚本的最终输出如下所示：
.text:080487AD                 mov     [esp+8], 0   ;  int protocol
.text:080487B5                 mov     [esp+4], 1   ;  int type
.text:080487BD                 mov     [esp], 2    ;  int domain
.text:080487C4                 call    _socket
代码清单 15-6 中的脚本的扩充版本请参见与本书有关的网站1
 ，该脚本能够将函数签名中的数据合并到注释中。
1. 参见http://www.idabook.com/ch15_examples
 。
15.5.6 模拟汇编语言行为
出于许多原因，你可能需要编写一段脚本，模拟你所分析的程序的行为。例如，你正在分析的程序可能和许多恶意程序一样，属于自修改程序，该程序也可能包含一些在运行时根据需要解码的编码数据。如果不运行该程序，并从正在运行的进程的内存中提取出被修改的数据，你如何了解这个程序的行为呢？IDC 脚本或许可以帮你解决这个问题。如果解码过程不是特别复杂，你可以迅速编写出一个 IDC 脚本，执行和程序运行时执行的操作。如果你不知道程序的作用，也没有可供该程序运行的平台，使用一个脚本以这种方式解码数据，你不需运行程序即可获得相关信息。如果你正使用 Windows版本的IDA 分析一个MIPS二进制文件，可能会出现上述后一种情况。没有任何 MIPS硬件，你将无法运行这个MIPS二进制文件，观察它执行的任何数据解码任务。但是，你可以编写一个IDC 脚本来模拟这个二进制文件的行为，并对IDA 数据库进行必要的修改，所有这一切根本不需要在 MIPS执行环境中进行。
下面的x86 代码摘自DEFCON2
 的一个“夺旗赛”3
 二进制文件。
2. 参见http://www.defcon.org/
 。
3. 由DEFCON 15 CTF的组织者Kenshoto 提供。“夺旗赛”是DEFCON 每年举办的一项黑客竞赛。
.text:08049EDE                 mov     [ebp+var_4], 0  
.text:08049EE5  
.text:08049EE5 loc_8049EE5:  
.text:08049EE5                 cmp     [ebp+var_4], 3C1h  
.text:08049EEC                 ja      short locret_8049F0D  
.text:08049EEE                 mov     edx, [ebp+var_4]  
.text:08049EF1                 add     edx, 804B880h  
.text:08049EF7                 mov     eax, [ebp+var_4]  
.text:08049EFA                 add     eax, 804B880h  
.text:08049EFF                 mov     al, [eax]  
.text:08049F01                 xor     eax, 4Bh  
.text:08049F04                 mov     [edx], al  
.text:08049F06                 lea     eax, [ebp+var_4]  
.text:08049F09                 inc     dword ptr [eax]  
.text:08049F0B                 jmp     short loc_8049EE5
这段代码用于解码一个植入到程序二进制文件中的私钥。使用如代码清单 15-7 所示的IDC脚本，不必运行程序就可以提取出这个私钥。
代码清单 15-7 使用 IDC 模拟汇编语言
auto var_4, edx, eax, al;  
var_4 = 0;  
while (var_4 = 0x3C1) {  
   edx = var_4;  
   edx = edx + 0x804B880;  
   eax = var_4;  
   eax = eax + 0x804B880;  
   al = Byte(eax);  
   al = al ^ 0x4B;  
   PatchByte(edx, al);  
   var_4++;  
}
代码清单 15-7 只是对前面汇编语言代码（根据以下相当机械化的规则生成）的直接转换。
为汇编代码中的每一个栈变量和寄存器声明一个 IDC 变量。
为每一个汇编语言语句编写一个模拟其行为的 IDC 语句。
通过读取和写入在 IDC 脚本中声明的对应变量，模拟读取和写入栈变量。
根据被读取数据的数量（1 字节、2 字节或4 字节），使用Byte
 、Word
 或Dword
 函数从一个非栈位置读取数据。
根据被写入数据的数量，使用 PatchByte
 、PatchWord
 或PatchDword
 函数向一个非栈位置写入数据。
通常，如果代码中包含一个终止条件不十分明确的循环，那么，模拟程序行为的最简单方法是首先使用一个无限循环（如while(1) {}
 ），然后在遇到使循环终止的语句时插入一个break
 语句。
如果汇编代码调用函数，问题就变得更加复杂。为了正确模拟汇编代码的行为，你必须设法模拟被调用的函数的行为，包括提供一个被模拟的代码的上下文认可的返回值。仅仅这个事实可能就使得你无法使用 IDC 来模拟汇编语言程序的行为。
在编写和上面的脚本类似的脚本时，需要注意的是，有时候，你并不一定非要从整体上完全了解你所模拟的代码的行为。通常，一次理解一两条指令，并将这些指令正确转换成对应的IDC脚本就足够了。如果每一条指令都正确转换成 IDC 脚本，那么，整个脚本将能够正确模拟最初的汇编代码的全部功能。我们可以推迟分析汇编语言算法，直到 IDC 脚本编写完成，到那时，我们就可以利用 IDC 脚本深化对基本汇编代码的理解。了解上面示例中算法的工作机制后，我们可以将那个 IDC 脚本缩短成下面的脚本：
auto var_4, addr;  
for (var_4 = 0; var_4 = 0x3C1; var_4++) {  
   addr = 0x804B880 + var_4;  
   PatchByte(addr, Byte(addr) ^ 0x4B);  
}
另外，如果不希望以任何方式修改数据库，在处理 ASCII 数据时，我们可以用 Message
 函数代替PatchByte
 函数，或者在处理二进制数据时，将数据写入到一个文件中。
15.6 IDAPython
IDAPython 是由 Gergely Erdelyi 开发的一种插件，它在 IDA 中集成了 Python 解释器。除提供Python 的功能外，使用这个插件还可以编写出能够实现IDC 脚本语言所有功能的 Python 脚本。IDAPython 的一个显著优势在于，它可以访问 Python 的数据处理功能以及所有 Python 模块。此外，IDAPython 还具有IDA SDK的大部分功能，与使用 IDC 相比，使用它可以编写出功能更加强大的脚本。在 IDA 社区中，IDAPython 拥有众多支持者。Ilfak 的博客1
 中包括大量使用 Python脚本解决的有趣问题，同时相关问题、答案和许多其他有用的 IDAPython 脚本也经常发布在OpenRCE.org 论坛2
 中。此外，一些第三方工具（如Zynamics 的BinNavi3
 ）也依靠 IDA 和IDAPython执行各种所需的子任务。
1. 参见http://www.hexblog.com
 。
2. 参见http://www.openrce.org/articles/
 。
3. 参见http://www.zynamics.com/binnavi.html
 。
从IDA 5.4 以来，Hex-Rays 一直将IDAPython 作为IDA 的标准插件。该插件的源代码可从IDA-Python 的项目页面下载4
 ，而 API 文档则位于 Hex-Rays 网站5
 上。只有在运行 IDA 的计算机安装了Python 的情况下，IDA 才会启用该插件。Windows 版本的IDA 附带并安装有兼容版本的Python6
 ，而Linux和OS X版本的IDA 需要你自行安装 Python 。在 Linux中，当前版本的 IDA（6.1）使用的是 Python 2.6。IDAPython 与Python 2.7兼容，如果创建由所需的 Python 2.6库指向你现有的 Python 2.7库的符号链接， IDA 将正常运行。如果你拥有 Python 2.7，使用与下面类似的命令可创建 IDA 所需的符号链接：
4. 参见http://code.google.com/p/idapython/
 。
5. 参见http://www.hex-rays.com/idapro/idapython_docs/index.html
 。
6. 参见http://www.python.org/
 。
# ln –s /usr/lib/libpython2.7.so.1.0 /usr/lib/libpython2.6.so.1
OS X用户可能会发现，OS X附带的Python 版本要低于 IDA 所需的版本。如果出现这种情况，则需要从 www.python.org 下载适当的 Python 安装程序7
 。
7. 参见http://www.python.org/download/mac/
 。
使用IDAPython
IDAPython 通过 3 个Python 模块（每个模块服务于特定的用途）将Python 代码注入到 IDA 中。idaapi
 模块负责访问核心 IDA API（如通过 SDK 揭示的那样）。IDAPython 的idc
 模块负责提供 IDC中的所有函数功能。IDAPython 附带的第三个模块为 idautils
 ，它提供大量实用函数，其中许多函数可生成各种数据库相关对象（如函数或交叉引用）的Python 列表。所有 IDAPython 脚本会自动导入 idc
 和idautils