## 使用 PolarDB 开源版 smlar 插件进行高效率相似文本搜索、自助选药、相似人群圈选等业务  
### 作者        
digoal        
### 日期        
2022-12-23        
### 标签        
PostgreSQL , PolarDB , smlar , 文本向量 , 数组向量 , 相似 , cosine , tfidf , overlap    
----        
## 背景  
PolarDB 的云原生存算分离架构, 具备低廉的数据存储、高效扩展弹性、高速多机并行计算能力、高速数据搜索和处理; PolarDB与计算算法结合, 将实现双剑合璧, 推动业务数据的价值产出, 将数据变成生产力.        
本文将介绍使用 PolarDB 开源版 smlar 插件进行高效率相似文本搜索、自助选药、相似人群圈选等业务  
测试环境为macOS+docker, PolarDB部署请参考下文:        
- [《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB简单部署》](../202209/20220908_02.md)        
## 场景  
1、自助匹配药品, 例如用户根据病情描述, 自动匹配相关的药品. 这个属于文本相似范畴. 文本相似性:   
注意有语义的情况:  
- 感冒,不发烧,咳嗽,无痰,流清涕,肌肉酸痛  
- 感冒,发烧,咳嗽,有痰,无鼻涕  
将药品主治症状的文本向量化, 存储为文本数组.  
根据病人描述, 将文本向量化, 在药品库中进行文本向量的相似匹配, 快速找到最匹配的药品.  
2、根据特征进行人群扩选, 例如在数据库中存储了每个用户的特征(使用数组表示)  
根据输入的数组(画像)搜索相似人群, 即人群扩选, 业务上进行精准推送.   
3、文章相似性搜索, 因为文章关键字很多, 每个关键字的权重也不一样, 不能只按命中多少关键字来决定相似性. 可以借助tfidf, 结合总文本数, 关键字在所有文本中出现的次数, 命中关键字等进行计算.  
在所有文本中出现次数越多的关键字, 根据算法其权重可能越低. 具体算法可参考:  
- [《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 1 文本(关键词)分析理论基础 - TF(Term Frequency 词频)/IDF(Inverse Document Frequency 逆向文本频率)》](../201701/20170116_02.md)    
- https://www.pgcon.org/2012/schedule/attachments/252_smlar-2012.pdf  
## 设计与算法  
以上需求实际上都是多值列的相似计算, 使用smlar插件即可实现.    
数据存储: 多值列(例如数组)   
多值列的相似性算法: cosine, overlap, tfidf.   
```  
	switch(getSmlType())  
	{  
		case ST_TFIDF:  
			PG_RETURN_FLOAT4( TFIDFSml(sa, sb) );  
			break;  
		case ST_COSINE:  
			{  
				int				cnt;  
				double			power;  
				power = ((double)(sa->nelems)) * ((double)(sb->nelems));  
				cnt = numOfIntersect(sa, sb);  
				PG_RETURN_FLOAT4(  ((double)cnt) / sqrt( power ) );  
			}  
			break;  
		case ST_OVERLAP:  
			{  
				float4 res = (float4)numOfIntersect(sa, sb);  
				PG_RETURN_FLOAT4(res);  
			}  
			break;  
```  
元素去重后计算.  
```  
postgres=# set smlar.type='cosine';   
SET  
postgres=# SELECT smlar('{1,4,6}'::int[], '{5,4,6}' );    
  smlar     
----------  
 0.666667  
(1 row)  
postgres=# SELECT smlar('{1,4,6}'::int[], '{5,4,4,6}' );    
  smlar     
----------  
 0.666667  
(1 row)  
-- 2/sqrt(3*3)   
postgres=# set smlar.type='overlap';   
SET  
postgres=# SELECT smlar('{1,4,6}'::int[], '{5,4,4,6}' );    
 smlar   
-------  
     2  
(1 row)  
-- 2  
postgres=# set smlar.type='tfidf';   
SET  
-- 设置tfidf表, 这个表可以用采样文档统计得到, 也可以自由定义其内容  
set smlar.stattable = 'documents_body_stats';   
create table documents_body_stats (  -- tfidf权重表.   
  value text unique,  -- value表示的关键字出现在多少篇文档中; value is null的行表示总文档篇数;  
  ndoc int not null    
);   
insert into documents_body_stats values ('0', 1); -- 0 出现在了1篇文章中.   
insert into documents_body_stats values ('1', 100); -- 1 出现在了100篇文章中.  
insert into documents_body_stats values ('4', 101), ('6', 201);   
insert into documents_body_stats values ('5', 1001);   
insert into documents_body_stats values (null, 10000);   -- value is null的行表示总文档篇数;  
postgres=# SELECT smlar('{1,4,6}'::text[], '{5,4,4,6}' );    
  smlar     
----------  
 0.742594  
(1 row)  
postgres=# SELECT smlar('{1,4,6}'::text[], '{5,5,5,6,6}' );    
 smlar    
--------  
 0.4436  
(1 row)  
postgres=# SELECT smlar('{0,1,4,5,6}'::text[], '{0,1,5}' );    
  smlar     
----------  
 0.868165  
(1 row)  
postgres=# SELECT smlar('{0,1,4,5,6}'::text[], '{1,5,6}' );    
  smlar     
----------  
 0.531762  
(1 row)  
```  
## 加速原理    
smlar 对数组支持gin和gist两个索引接口, 以gin为例, 如何快速筛选相似的记录?   
例如, 输入条件的数组长度为6, 使用overlap算法, 要求相似度为4, 那么必须要有4个或4个以上元素命中的记录才符合要求.   
- 在gin索引中搜索元素1, 提取到ctid里的blockid, 每个blockid +1.   
- 在gin索引中搜索元素2, 提取到ctid里的blockid, 每个blockid +1.   
- 在gin索引中搜索元素3, 提取到ctid里的blockid, 每个blockid +1.   
- 在gin索引中搜索元素4, 提取到ctid里的blockid, 每个blockid +1.   
- 在gin索引中搜索元素5, 提取到ctid里的blockid, 每个blockid +1.   
- 在gin索引中搜索元素6, 提取到ctid里的blockid, 每个blockid +1.   
在以上blockid中, 数据库只需要回表搜索大于等于4的blockid, recheck是否满足相似条件.   
gin,gist支持的operator calss?  
GiST/GIN support for % and  && operations for:  
  Array Type   |  GIN operator class  | GiST operator class    
---------------|----------------------|----------------------  
 bit[]         | _bit_sml_ops         |   
 bytea[]       | _bytea_sml_ops       | _bytea_sml_ops  
 char[]        | _char_sml_ops        | _char_sml_ops  
 cidr[]        | _cidr_sml_ops        | _cidr_sml_ops  
 date[]        | _date_sml_ops        | _date_sml_ops  
 float4[]      | _float4_sml_ops      | _float4_sml_ops  
 float8[]      | _float8_sml_ops      | _float8_sml_ops  
 inet[]        | _inet_sml_ops        | _inet_sml_ops  
 int2[]        | _int2_sml_ops        | _int2_sml_ops  
 int4[]        | _int4_sml_ops        | _int4_sml_ops  
 int8[]        | _int8_sml_ops        | _int8_sml_ops  
 interval[]    | _interval_sml_ops    | _interval_sml_ops  
 macaddr[]     | _macaddr_sml_ops     | _macaddr_sml_ops  
 money[]       | _money_sml_ops       |   
 numeric[]     | _numeric_sml_ops     | _numeric_sml_ops  
 oid[]         | _oid_sml_ops         | _oid_sml_ops  
 text[]        | _text_sml_ops        | _text_sml_ops  
 time[]        | _time_sml_ops        | _time_sml_ops  
 timestamp[]   | _timestamp_sml_ops   | _timestamp_sml_ops  
 timestamptz[] | _timestamptz_sml_ops | _timestamptz_sml_ops  
 timetz[]      | _timetz_sml_ops      | _timetz_sml_ops  
 varbit[]      | _varbit_sml_ops      |   
 varchar[]     | _varchar_sml_ops     | _varchar_sml_ops  
## 例子  
1、部署smlar on PolarDB  
```  
git clone --depth 1  git://sigaev.ru/smlar.git  
cd smlar/  
USE_PGXS=1 make  
USE_PGXS=1 make install  
[postgres@aa25c5be9681 smlar]$ USE_PGXS=1 make installcheck  
/home/postgres/tmp_basedir_polardb_pg_1100_bld/lib/pgxs/src/makefiles/../../src/test/regress/pg_regress --inputdir=./ --bindir='/home/postgres/tmp_basedir_polardb_pg_1100_bld/bin'      --dbname=contrib_regression smlar int2 int4 int8 float4 float8 money oid timestamp timestamptz time timetz date interval macaddr	inet cidr text varchar char bytea bit varbit numeric int4g int8g intervalg textg int4i int8i intervali texti composite_int4 composite_text  
(using postmaster on 127.0.0.1, default port)  
============== dropping database "contrib_regression" ==============  
DROP DATABASE  
============== creating database "contrib_regression" ==============  
CREATE DATABASE  
ALTER DATABASE  
============== running regression test queries        ==============  
test smlar                        ... ok  
test int2                         ... ok  
test int4                         ... ok  
test int8                         ... ok  
test float4                       ... ok  
test float8                       ... ok  
test money                        ... ok  
test oid                          ... ok  
test timestamp                    ... ok  