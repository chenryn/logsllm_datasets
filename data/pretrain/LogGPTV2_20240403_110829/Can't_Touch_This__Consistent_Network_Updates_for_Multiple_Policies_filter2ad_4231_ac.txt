### Technical Results

In this paper, we provide a rigorous proof that the problem is already NP-hard in n-node networks with k = 2 policies, which can be consistently updated in R = 2 rounds.

**Authorized Use:**
- **License:** Limited to Tsinghua University.
- **Download Date:** March 19, 2021 at 09:17:41 UTC from IEEE Xplore.
- **Restrictions:** Apply as per the license agreement.

### Example Configuration

**Figure 3:** This figure illustrates a configuration where node \( w \) must be updated after node \( v \) to avoid loops. A valid schedule is a supersequence of the sequence \( vw \).

### Updateable Nodes per Round

**Table I:** This table shows the updateable nodes per round for a 3-round schedule. Nodes labeled \( FFFF \) can be updated either in the first or third round. No \( BB \) nodes are possible in policy updates solvable within 2 rounds, and hence, they do not need to be considered.

| Round | Updateable Nodes |
|-------|------------------|
| 1     | \( FBF, FFF, FFB \) |
| 2     | \( FBBF, BFFB \) |
| 3     | \( BFBF, BFFF, FFBF, FFFF \) |

### Outline of Reduction

We prove the hardness by reducing from Max-2SAT [19]. Recall that in Max-2SAT, the input is a formula in conjunctive normal form with two literals per clause, and the task is to determine the maximum number of clauses that can be simultaneously satisfied by an assignment. Unlike the decision problem 2SAT, which is polynomial-time solvable, Max-2SAT is NP-hard.

#### Problem Consideration

Consider the problem of deciding whether the policies can be updated in 3 rounds using only n touches (each node must be updated only once). An \( FB \) node cannot be the last updated node (as it is symmetric to updating a \( BF \) node in the first round, which violates loop-freedom), so nodes \( FBF, FBF, FFF \) cannot be updated in the third round. They can always be updated in the first round, and there is no benefit in updating them in the second round. Therefore, we assume they will be updated in the first round. Similarly, we assume that nodes \( BFBF, BFFF, FFBF \) are always updated in the third round. Because \( FB \) nodes cannot be updated in the third round and \( BF \) nodes cannot be updated in the first round, \( FBBF \) and \( BFFB \) nodes can only be updated in the second round. Finally, nodes \( FFFF \) can be updated in any round, but since there is no benefit in updating them in the second round, we assume they are updated in the first or third round. Note that we only consider policies solvable within two rounds, and hence, we do not need to classify nodes of type \( BB \). No 2-round solvable policy update problem can include any \( BB \) nodes: such nodes cannot be updated in the first nor the last (second) round.

### Verification

Because we can always update \( FF \) and \( FB \) nodes in the first round, and \( FF \) and \( BF \) nodes in the third round, to verify whether the schedule does not violate loop-freedom, it is enough to check whether \( FBBF \) and \( BFFB \) nodes can be updated in the second round. See Table I for an overview.

### Reduction Construction

For each variable, we create an \( FFFF \) node, and its value in the Max-2SAT formula will be decided based on whether the node is updated in the first or the last round. For each clause, we create two nodes (one for each literal in the clause) and each of them will be a \( BFFB \) node: they will always be updated in the second round. We use \( x_i \) to denote both a variable and the node for this variable, and for a clause \( C_j = l \lor k \), we use \( y_{l,j} \) and \( y_{k,j} \) to denote the nodes created for this variable.

### Gadget for Variables

**Figure 4:** Examples of \( FFFF \) nodes which must be updated in either the first or third round.

We combine these two graphs to create a gadget for each variable. Consider a variable \( x_i \), and two clauses: \( C_j \), which contains the literal \( x_i \), and \( C_k \), which contains the literal \( \neg x_i \). We create a gadget as shown in Figure 5. We make \( x_i \) an \( FFFF \) node, and both \( y_{x_i,j} \) and \( y_{\neg x_i,k} \) \( BFFB \) nodes. If we update the node for \( x_i \) in the first round, then we can update \( y_{x_i,j} \), and if we update \( x_i \) in the third round, then we can update \( y_{\neg x_i,k} \).

### Clause Gadget

Since in the Max-2SAT problem, it is enough that one literal in a clause is satisfied, we need to be able to update one of the clause nodes independently of the variable nodes. To achieve this, we use the gadget presented in Figure 6, which will be part of the variable gadget. We denote vertices created for clause \( C_i \) as \( d_{1,i} \) and \( d_{2,i} \). We make them \( FFFF \) nodes, and hence, they can be updated in either the first or third round. If \( d_{1,i} \) gets updated in the first round, then it enables the clause node in the first policy to be updated, but then, even if \( d_{2,i} \) is updated, in the second policy, the clause node has to be updated using the variable gadget. Similarly, if we update \( d_{2,i} \) in the first round, and \( w \) in the third round, we can then update the clause node in the second policy in the second round.

### Specifying Node Type

There are some nodes in the gadget that we want to make forward nodes when looking from the point of view of the new policy (i.e., we want to guarantee that its second letter in the classification is \( F \)). As an example, in Figure 7, \( v \) is a backward node which we want to make a \( BF \) node. To do this, we add a new node just after \( v \), denoted as \( w \), and create an edge from the end of the gadget to \( w \). Then, we create a new node after the gadget and create an edge from \( w \) to this new node. The construction is depicted in Figure 7. Node \( w \) is visited in the new policy after the whole gadget has been visited (so also after \( v \)), and therefore edge \( (v, w) \) is forward when looking from the point of view of the new policy. Node \( w \) is now an \( FB \) node, so it could possibly allow updating some \( BFFB \) nodes if updated in the first round. Therefore, we make \( w \) a \( BF \) node in the other policy to force it being updated in the second round.

### Nodes of Required Type

For some nodes in one policy, there is a required type in the other policy (e.g., a clause node, which has to serve as an \( FB \) node). To create such nodes, we use the gadget shown in Figure 8. In this gadget, \( v \) is an \( FF \) node, \( w \) is an \( FB \) node, and \( z \) is a \( BF \) node.

### Complete Gadget for Variable

**Figure 9:** The complete gadget for variable \( x_i \), and its two clauses \( C_j \) containing literal \( x_i \), and \( C_k \) containing literal \( \neg x_i \). In this gadget, we included gadgets for both clauses. The essential edges of the gadget (presented in Figure 5) are drawn in loosely dashed black, edges of clause gadgets are drawn in loosely dashed grey, edges added to change the node type (described in Section III-B3) are drawn in densely dashed grey, and the other edges added to connect the graph are drawn in densely dashed black. We set the type of all densely dashed black and grey edges to type \( BF \) in the other policy, so unless 2 touches will be used for them, they will be updated in the second or third round, and therefore any update schedule must assume that they will be updated after clause vertices.

### Transforming a Max-2SAT Formula

In this section, we show how to transform a Max-2SAT formula so that each variable appears in at most three clauses. Let \( \phi \) be a Max-2SAT formula with \( m \) clauses. For each variable \( x \) in \( \phi \), which has \( p_x \) positive occurrences and \( n_x \) negative occurrences, we create variables \( x_1, x_2, \ldots, x_{p_x} \) and \( \neg x_1, \neg x_2, \ldots, \neg x_{n_x} \). We use these variables to substitute occurrences of \( x \) in \( \phi \) (we substitute literal \( \neg x \) with variable \( \neg x_i \), hence, we want \( \neg x_i \) to be true if and only if \( x \) is false). For each \( i \in \{1, \ldots, p_x\} \), we create variables \( t_{i,1}, t_{i,2}, \ldots, t_{i,n_x} \). Similarly, for each \( i \in \{1, \ldots, n_x\} \), we create variables \( t_{i,1}, t_{i,2}, \ldots, t_{i,p_x} \).

Now, for each \( i \in \{1, \ldots, p_x\} \), we create clauses \( x_i \Rightarrow t_{i,1} \Rightarrow \ldots \Rightarrow t_{i,n_x} \) (where \( p \Rightarrow q \) in 2SAT can be written as \( \neg p \lor q \)). We also create similar clauses for each \( \neg x_i \). Then, for each \( i \in \{1, \ldots, p_x\} \) and \( j \in \{1, \ldots, n_x\} \), we create a clause \( \neg t_{i,j} \lor \neg t_{j,i} \). If all these clauses are satisfied, they guarantee that \( x_i \) and \( \neg x_j \) cannot be both true. However, note that these clauses do not guarantee that all variables for \( x \) have the same value, that is, there may be some \( i, j \) such that \( x_i \) is true and \( x_j \) is false.

For each variable in \( \phi \), we create \( p_x(2(p_x - 1) + n_x) + n_x(2(n_x - 1) + p_x) \) variables; clearly, this reduction is polynomial. We denote the resulting formula by \( \phi' \) and the number of clauses of \( \phi' \) by \( m' \). To finish the reduction, we prove the following theorem.

**Lemma 2:** There is an assignment satisfying \( m - k \) clauses of \( \phi \) if and only if there is an assignment satisfying \( m' - k \) clauses of \( \phi' \).

**Proof:**

1. **Forward Direction:** Assume there is an assignment that satisfies \( m - k \) clauses of \( \phi \). Then, we set \( x_i = x \), \( t_{i,j} = x \), \( \neg x_i = 1 - x \), and \( t_{i,j} = 1 - x \). All new clauses added to \( \phi' \) are satisfied, so exactly \( k \) clauses are unsatisfied.

2. **Backward Direction:** Assume there is an assignment that satisfies \( m' - k \) clauses of \( \phi' \). We prove that there is an assignment which satisfies at least \( m - k \) clauses of \( \phi \). For each variable \( x \), let \( P_x = \{i \in \{1, \ldots, p_x\} \mid x_i = 1\} \) and \( N_x = \{i \in \{1, \ldots, n_x\} \mid \neg x_i = 1\} \). We set \( x \) to be 1 if \( |P_x| > |N_x| \), and to 0 otherwise (thus, we choose the value of \( x \) based on the majority voting of variables \( x_i \) and \( \neg x_i \)).

This completes the proof of the lemma.