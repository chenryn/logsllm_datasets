f2, f2 will never take effect. In this case, when trafﬁc matching
v7 arrives at the switch, f1 applies and the trafﬁc is wrongly
sent to VFW2. But v7 is actually on VFW1.
Second, a ﬂow rule in an SDN switch may be used by
more than one applications. Update of ﬂows to account for
ﬁrewall rule migration may undesirably change the routing
intentions of other applications. For example, f3 in Figure 1 (a)
serves both ﬁrewall and IDS. To account for the migration of
ﬁrewall rule v1, f3 needs to be updated. The correct update is
to insert f(cid:48)
3 right before f3 (Figure 1 (b)). Together they express
the correct routing for migrating v1. But this changes routing
intentions of IDS1, because trafﬁc matching “tcp 10.10.2.* any
2For the elucidation purpose, we use stateless ﬁrewalls here. The same
challenges also apply to stateful ﬁrewalls.
Fig. 1: Example of virtual ﬁrewall scaling out. Note that a ﬁrewall
rule r is a 6-tuple of {protocol, source IP, source port, destination
IP, destination port, action}. A ﬂow rule in an SDN switch may
have more than 40 ﬁelds [39]. Here, we only show the ﬁelds that
are pertinent to our illustration.
Both Split/Merge and OpenNF mainly focus on controlling the
state migration of virtualized network functions. Especially,
OpenNF provides APIs that help migrate given internal states
of the source instance to the destination instance when scaling
out an overloaded instance. The state migration mechanism
provided by OpenNF satisﬁes two properties: loss-free and
order-preserving. Loss-free property guarantees that all
in-
ﬂight trafﬁc generated during the state migration are buffered
and processed. Order-preserving property guarantees that in-
ﬂight trafﬁc are processed in the order of their arrival. Even
though state migration is also a necessary operation in enabling
the elastic scaling of virtual ﬁrewalls, more critical challenges
are needed to be addressed in virtual ﬁrewall elasticity control.
When a virtual ﬁrewall
is overloaded, one option for
solving the overload is to copy the whole set of ﬁrewall rules
on the overloaded ﬁrewall to each new instance and distribute
trafﬁc. However, the copy option has a major drawback of
performance degradation. A ﬁrewall processes a packet by
sequentially searching its rule space until the ﬁrst-matching
rule is found. Larger the ﬁrewall rule size is, larger the search
overhead is and hence lower the processing capacity is. Exist-
ing research efforts have been devoted to compressing ﬁrewall
rule set in order to improve ﬁrewall performance [35] [36].
We have also conducted experiments to quantify the effect
of ﬁrewall rule size on virtual ﬁrewall performance (see
§ VIII-B1). Our experimental results show a linear decrease
in virtual ﬁrewall processing capacity as the ﬁrewall rule size
increases (see Figure 7). Therefore, we prefer to split ﬁrewall
rules to deal with the overload, enabling each new instance
to hold only a subset of the ﬁrewall rules and thus achieving
higher processing capacity. Below we articulate new challenges
in virtual ﬁrewall scaling.
1) Semantic Consistency: When splitting a set of ﬁrewall
rules across multiple virtual ﬁrewall instances, care must be
3
f1###tcp#10.10.3.*##any#192.1.2.*###80##send#to#VFW2f2###tcp#10.10.3.*##any#192.1.2.7###80##send#to#VFW1f3’##tcp#10.10.2.*##any#192.1.1.9##80##send#to#VFW2f3###tcp#10.10.2.*##any#192.1.1.*###80##send#to#VFW1,#IDS1f4###tcp#10.10.4.1##any#192.1.1.9###80#send#to#VFW2######################################################################v1###tcp##10.10.2.*###any###192.1.1.9###80##denyv2###tcp##10.10.2.*###any###192.1.1.*###80##allowv3###tcp##10.10.1.*###any###192.1.1.9##any##denyv4###tcp##10.10.1.5###any###192.1.1.*###80##denyv5###tcp##10.10.1.*###any###192.1.1.*###80##deny#v6###any##10.10.1.*###any###192.1.1.9##80##deny#v7###tcp##10.10.3.*###any###192.1.2.7###80##allowv8###tcp##10.10.3.*###any###192.1.2.*###80##deny##v9###tcp##10.10.4.1###any##192.1.1.9###80##allowSDN#Switch10.10.*.*192.1.*.*SDN#SwitchFirewall#Rules#on#VFW1##Flow#Rules#Flow#Rules#(a) Before scaling out.(b) After scaling out.VFW1v2###tcp##10.10.2.*###any###192.1.1.*###80##allowv3###tcp##10.10.1.*###any###192.1.1.9##any##denyv4###tcp##10.10.1.5###any###192.1.1.*###80##denyv5###tcp##10.10.1.*###any###192.1.1.*###80##deny#v6###any##10.10.1.*###any###192.1.1.9##80##deny#v7###tcp##10.10.3.*###any###192.1.2.7###80##allowFirewall#Rules#on#VFW1##Firewall#Rules#on#VFW2##v1###tcp##10.10.2.*###any###192.1.1.9###80##denyv8###tcp##10.10.3.*###any###192.1.2.*###80##deny##v9###tcp##10.10.4.1###any##192.1.1.9###80##allowVFW1VFW210.10.*.*192.1.*.*f1###tcp#10.10.3.*##any#192.1.2.*###80##send#to#VFW1f2###tcp#10.10.3.*##any#192.1.2.7###80##send#to#VFW1f3###tcp#10.10.2.*##any#192.1.1.*###80##send#to#VFW1,#IDS1f4###tcp#10.10.4.1##any#192.1.1.9###80#send#to#VFW1######################################################################Fig. 2: VFW Controller components and workﬂow.
192.1.1.9” is not sent to IDS1, as intended, instead it is sent
to VFW2.
Third, ﬂow rules do not always exactly match ﬁrewall rules.
This requires split of ﬂow rules or insertion of new ﬂow rules
do handle trafﬁc steering. For example, we inserted f(cid:48)
3 for
migrating v1. The split or insertion operation is non-trivial and
also increases the number of ﬂow rules in SDN switches, which
are limited by the number of ﬂow rules they can support 3.
3) Buffer Overﬂow Avoidance: A safe migration must
be loss-free, meaning in-ﬂight trafﬁc must be buffered [28].
Existing systems, such as Split/Merge and OpenNF, buffer
all in-ﬁght trafﬁc at the central controller, which could lead
to serious scalability issue. In particular, they assume inﬁnite
buffer space at the controller and ignore the potential problem
of buffer overﬂow. Therefore, a preferable migration control
method should adopt distributed buffering that buffers in-ﬂight
trafﬁc at each destination instance, as a way to lower the risk
of buffer overﬂow [27]. In addition, we observe that different
ﬁrewall rules incur different amounts of in-ﬂight trafﬁc. For
example, migrating a ﬁrewall rule with hit rate of 0 4 does
not incur any in-ﬂight trafﬁc, while migrating a ﬁrewall rule
with high hit rate requires large buffer space. To avoid buffer
overﬂow, we need a prior calculation of the amount of in-ﬂight
trafﬁc for each ﬁrewall rule, and design a ﬁrewall rule selection
mechanism so that only ﬁrewall rules that do not cause buffer
overﬂow are selected for the migration.
4) Optimal Scaling: Resources for creating virtual ﬁre-
walls are valuable and limited, hence must be optimally used.
When a virtual ﬁrewall is overloaded, solving the overload with
a minimum number of new virtual ﬁrewall instances is prefer-
able. When multiple virtual ﬁrewall instances are underloaded,
a merge operation should kill as many virtual ﬁrewall instances
as possible. Also, updating ﬂow rules may entail insertions of
new ﬂow rules, which consume limited TCAM space in SDN
switches as discussed above. Some ﬁrewall rule is matched by
only one ﬂow rule, migration of such ﬁrewall rule only needs
to update one ﬂow rule and doesn’t need to add new ﬂow rules.
However, since some wildcard ﬁrewall rules can be matched
by multiple ﬂow rules, the migrations of those ﬁrewall rules
involve modifying multiple ﬂow rules and possibly creating
new ﬂow rules. Therefore, the ﬁrewall rules that incur high
update costs should be given low priority to be migrated.
3These rules are in TCAM and an SDN switch can only support a few
thousand rules (e.g., 1.5k TCAM entries in 5406zl switch [23]).
4Hit rate of a ﬁrewall rule is the rate that rule is matched. A 0 hit rate
means there is no ﬂow matching the rule.
III. VFW CONTROLLER OVERVIEW
The components and workﬂow of VFW Controller
are shown in Figure 2. VFW Controller monitors each
virtual ﬁrewall and detects trafﬁc overload and underload
conditions. Once a condition is detected, VFW Controller
ﬁrst performs Dependency Analysis, Flow Update Analysis,
and Buffer Cost Analysis. Those analysis results are utilized
by Optimal Scaling Calculation. Then, Provision Control and
Migration and Update Control interact with the compute and
network resources and execute virtual ﬁrewall scaling.
Dependency Analysis (§IV) in VFW Controller identi-
ﬁes three dependency relations: (1) the dependency relations
of ﬁrewall rules on the virtual ﬁrewalls; (2) the dependency
relations of the ﬂow rules in SDN switches; and (3) the inter-
dependency relations between the ﬁrewall rules and the ﬂow
rules. Understanding the dependency relations of the ﬁrewall
rules is critical to ensure the semantic consistency after scaling.
The dependency relations of the ﬂow rules and the inter-
dependency relations serve to ﬁnd the ﬂow rules to be updated.
Dependency Analysis divides both ﬁrewall rules and ﬂow rules
into groups based on their dependency relations. Flow Update
Analysis (§V) determines the correct update of ﬂow rules
and the update cost for each ﬁrewall rule group. Buffer Cost
Analysis (§VI) predicts the amount of in-ﬂight trafﬁc generated
by the migration of each ﬁrewall rule group. This prediction
is necessary to avoid buffer overﬂow.
Optimal Scaling Calculation (§VII) component considers
previous analyses and uses a three-step heuristic approach to
determine, in the case of overload, (1) the minimum number
of new instances to be created; (2) selective ﬁrewall rule
groups to be migrated to each new instance; and (3) ﬂow
rules to be updated. This approach also achieves minimum
update cost and no buffer overﬂow. In the case of underload,
Optimal Scaling Calculation component uses an ILP approach
to determine (1) which instances are to be killed among all
underloaded instances; (2) how to redistribute ﬁrewall rule
groups; and (3) corresponding ﬂow rule updates. The ILP
approach guarantees that the most resources are released after
the mergence of instances.
Provision Control creates or deletes instances according the
calculation results from Optimal Scaling Calculation compo-
nent. Migration and Update Control coordinates the migration
of ﬁrewall rules and states, and ﬂow rule updates.
IV. DEPENDENCY ANALYSIS AND SEMANTIC
CONSISTENCY
Firewall policies used in enterprise networks are known to
be complex due to their large rule sizes 5 and complicated
rule dependencies [24] [29]. Flow rules in SDN switches are
complex as well [31] [32]. In this section, we ﬁrst analyze
the intra-dependency relations of ﬁrewall rules and ﬂow rules
respectively, and the inter-dependency relations between ﬁre-
wall rules and ﬂow rules. We then discuss our approach for
maintaining semantic consistency in virtual ﬁrewall scaling.
5A recent study uncovered that the average number of ﬁrewall rules in an
enterprise network is 793 [22].
4
Virtualization LayerDependency AnalysisFlow Update AnalysisBuffer Cost Analysis Optimal Scaling CalculationProvision ControlMigration and Update ControlVFW ControllerServersSDN SwtichesVirtual FirwallsCondition DetectionResourceA. Dependency Relation
Algorithm 1: Partitioning of a rule set to disjoint groups.
We start by giving the following deﬁnitions. Note that the
deﬁnitions of direct dependency and indirect dependency apply
to both ﬁrewall rules and ﬂow rules.
Deﬁnition 1 (Packet space). Packet space of a rule r, denoted
as P S(r),
is deﬁned as a 5-dimensional hyperspace with
dimensions being protocol, source IP, source port, destination
IP, destination port.
For a ﬁrewall rule, which is generally represented as a
6-tuple of {protocol, source IP, source port, destination IP,
destination port, action} with either ‘deny’ or ‘allow’ action,
ﬁnding its packet space is straightforward and just needs to
use the ﬁrst 5 ﬁelds of the ﬁrewall rule. For a ﬂow rule,
we must consider various Set-Field actions, which can
rewrite the values of respective header ﬁelds in packets [15].
For example, if a ﬂow rule f has “protocol = tcp, source IP
= 10.10.3.*, source port = any, destination IP = 192.1.2.7,
destination port = any” without a Set-Field action, its
packet space can be represented with these ﬁve ﬁelds as . However, if a ﬂow rule
has Set-Field actions, which rewrite some header ﬁelds, its
packet space must be represented using the rewritten values of
ﬁelds. For instance, if the above f has a Set-Field action,
“Set destination IP = 192.1.2.10”, its packet space should be
represented as .
Deﬁnition 2 (Direct dependency). Two rules ri and rj in a
rule set R are directly dependent iff P S(ri) ∩ P S(rj) (cid:54)= ∅,
where P S(ri) is the packet space deﬁned by ri, and P S(rj)
is the packet space deﬁned by rj.
Deﬁnition 3 (Indirect dependency). Two rules ri and rj in a
rule set R are indirectly dependent iff P S(ri) ∩ P S(rj) = ∅
and there exists a subset R ⊆ R\{ri, rj} such that P S(ri) ∩
P S(R) (cid:54)= ∅ and P S(rj) ∩ P S(R) (cid:54)= ∅.
Note that indirect dependency is associative, that is, if rule
ri and rj are indirectly dependent, and rj and rl are indirectly
dependent, then ri and rl are indirectly independent.
VFW Controller uses Algorithm 1 to partition a rule
set R to disjoint groups. Rules inside a group are in the same
order as they are in R, and are either directly or indirectly
dependent. Across groups, there is no dependency relation.
The inputs of Algorithm 1 are the rule set R to be partitioned
and a set G that is used to store rule groups and initially set to
be empty. Algorithm 1 sequentially examines each rule r ∈ R
against each existing rule group G ∈ G. We use a set Γ to store
all the rules in R that precede r and have dependency relation
with r, and Γ is initially set to be empty. If G is empty (i.e. r
is the ﬁrst rule in R), then we append r to Γ, add Γ as a new
group to G, and move the next rule in R. Otherwise, if there
exists a rule ri ∈ G that has dependency relation with r, then
all the rules in G are appended to Γ, and group G is removed
from G. After all existing groups in G have been checked, all
the rules in R that precede r and have dependency relation with
r are now stored in Γ. We append rule to r to Γ. At last Γ is
added as a new group to G. After R has been iterated through,
all the rule groups are stored in G. Applying Algorithm 1 to
a set of ﬁrewall rules on a virtual ﬁrewall produces a set of
Input: R, a set of ordered rules to be partitioned;
G = ∅, a set, initially set to be empty, to store
rule groups.
Output: G, the set of rule groups;
foreach r ∈ R do
Γ = ∅; /* A set to store preceding rules that has
if G = ∅ then
dependency relation with r . Initially ∅.
else
/* That is to say r is the first rule in R
Γ.Append(r);
P S(r) ←− P acketSpace(r);
foreach G ∈ G do
foreach ri ∈ G do
P S(ri) ←− P acketSpace(ri);
if P S(r) ∩ P S(ri) (cid:54)= ∅ then
Γ.Append(G);/* Sequentially append
each rule in group G to Γ.
G.Remove(G);/* Remove group G from
G.
break;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
*/
*/
*/
*/
*/
*/
/* Now all the rules that precede r and have
dependency relation with r are stored in Γ.
*/
Γ.Append(r); /* Append r to Γ.
G.Add(Γ); /* Add Γ as a new group to G.
15
16 return G;
ﬁrewall rule groups, which we denote as V = {V1, ..., Vm}
throughout this paper.
Applying Algorithm 1 to a set of ﬂow rules on an SDN
switch produces a set of ﬂow rule groups, which we denote
as F = {F1, ..., Fn} throughout this paper. We identify the
relation between a ﬁrewall rule group V and a ﬂow rule group