[7] Ibm node-red. https://nodered.org/.
[8] iot-nodejs.
https://github.com/ibm-watson-iot/
iot-nodejs.
[9] Koa. https://github.com/koajs/koa.
[10] libuv. https://github.com/libuv/libuv.
[11] Lokijs. https://github.com/techfort/LokiJS.
[12] Node-oniguruma regexp library. https://github.com/atom/
node-oniguruma.
[13] Node security platform.
advisories.
https://nodesecurity.io/
[14] Node.js. http://nodejs.org/.
[15] Nodejs async hooks.
hooks.html.
https://nodejs.org/api/async_
[16] Node.js foundation members. https://foundation.nodejs.
org/about/members.
[17] Node.js thread pool documentation.
org/en/v1.x/threadpool.html.
http://docs.libuv.
[18] Node.js usage: Statistics for websites using node.js technologies.
https://trends.builtwith.com/framework/node.js.
[19] Regex.matchtimeout
property.
https://msdn.
microsoft.com/en-us/library/system.text.
regularexpressions.regex.matchtimeout.
[20] restify. https://github.com/restify/node-restify.
[21] sails. https://github.com/balderdashy/sails.
[22] Snyk.io. https://snyk.io/vuln/.
[23] three.js. https://github.com/mrdoob/three.js.
[24] Twisted. https://twistedmatrix.com/trac/.
[25] Vert.x. http://vertx.io/.
[26] webtorrent.
https://github.com/webtorrent/
webtorrent.
[27] ws:
a node.js websocket
library.
https://github.com/
websockets/ws.
[28] The Calendar and Contacts Server. https://github.com/
Apple/Ccs-calendarserver, 2007.
[29] Ubuntu One: Technical Details. https://wiki.ubuntu.com/
UbuntuOne/TechnicalDetails, 2012.
[30] New node.js foundation survey reports new “full stack” in
demand among enterprise developers. https://nodejs.org/
en/blog/announcements/nodejs-foundation-survey/,
2016.
[31] The linux foundation: Case study: Node.js.
https:
//www.linuxfoundation.org/wp-content/uploads/
2017/06/LF_CaseStudy_NodeJS_20170613.pdf, 2017.
[32] Microsoft’s Node.js Guidelines.
https://github.com/
Microsoft/nodejs-guidelines, 2017.
[33] Random(4).
http://man7.org/linux/man-pages/man4/
random.4.html, 2017.
is
used
2017
–
for
in
node.js
is what
results.
[34] This
vey
what-is-node-js-used-for-2017-survey/, 2017.
Node.js
sur-
https://blog.risingstack.com/
Transformation
[35] Digital
with
De-
https://pages.nodesource.com/
the
Stack.
vOps
digital-transformation-devops-stack-tw.html,
2018.
[36] Node.js at IBM. https://developer.ibm.com/node/, 2018.
[37] Node.js v10.1.0: C++ Addons. https://nodejs.org/api/
addons.html, 2018.
[38] Node.js v10.1.0: N-API. https://nodejs.org/api/n-api.
html, 2018.
[39] Node.js
v10.3.0 Documentation:
crypto.randomBytes.
https://nodejs.org/api/crypto.html#crypto_
crypto_randombytes_size_callback, 2018.
[40] ABDALKAREEM, R., NOURRY, O., WEHAIBI, S., MUJAHID,
S., AND SHIHAB, E. Why Do Developers Use Trivial Packages?
An Empirical Case Study on npm. In Foundations of Software
Engineering (FSE) (2017).
[41] ABLIZ, M.
Internet Denial of Service Attacks and Defense
Mechanisms. Tech. rep., 2011.
[42] ALIMADADI, S., MESBAH, A., AND PATTABIRAMAN, K. Un-
derstanding Asynchronous Interactions in Full-Stack JavaScript.
In International Conference on Software Engineering (ICSE)
(2016).
[43] BARRERA, D., KAYACIK, H. G., VAN OORSCHOT, P. C.,
AND SOMAYAJI, A. A methodology for empirical analysis of
permission-based security models and its application to android.
In Computer and Communications Security (CCS) (2010).
[44] BRODU, E., FR ´ENOT, S., AND OBL ´E, F. Toward automatic up-
date from callbacks to Promises. In Workshop on All-Web Real-
Time Systems (AWeS) (2015).
[45] BURNIM, J., JALBERT, N., STERGIOU, C., AND SEN, K.
In
Looper: Lightweight detection of inﬁnite loops at runtime.
International Conference on Automated Software Engineering
(ASE) (2009).
[46] BURNIM, J., JUVEKAR, S., AND SEN, K. WISE: Automated
In International
Test Generation for Worst-Case Complexity.
Conference on Software Engineering (ICSE) (2009).
[47] CASCIARO, M. Node.js Design Patterns, 1 ed. 2014.
[48] CHADHA, G., MAHLKE, S., AND NARAYANASAMY, S. Ac-
celerating Asynchronous Programs Through Event Sneak Peek.
In International Symposium on Computer Architecture (ISCA)
(2015).
[49] CHANG, R., JIANG, G., IVAN ˇCI ´C, F., SANKARANARAYANAN,
Inputs of coma: Static detection of
In IEEE Computer Security
S., AND SHMATIKOV, V.
denial-of-service vulnerabilities.
Foundations Symposium (CSF) (2009).
[50] CROSBY, S. Denial of service through regular expressions.
USENIX Security work in progress report (2003).
[51] CROSBY, S. A., AND WALLACH, D. S. Denial of Service via
Algorithmic Complexity Attacks. In USENIX Security (2003).
[52] DAVIS, J., KILDOW, G., AND LEE, D. The Case of the Poisoned
Event Handler: Weaknesses in the Node.js Event-Driven Archi-
In European Workshop on Systems Security (EuroSec)
tecture.
(2017).
USENIX Association
27th USENIX Security Symposium    357
[53] DAVIS, J. C., COGHLAN, C. A., SERVANT, F., AND LEE, D.
The Impact of Regular Expression Denial of Service (ReDoS)
in Practice: an Empirical Study at the Ecosystem Scale. In The
ACM Joint European Software Engineering Conference and Sym-
posium on the Foundations of Software Engineering (ESEC/FSE)
(2018).
[54] DE GROEF, W., DEVRIESE, D., NIKIFORAKIS, N., AND
PIESSENS, F. Flowfox: A web browser with ﬂexible and pre-
cise information ﬂow control. Computer and Communications
Security (CCS).
[55] DE GROEF, W., MASSACCI, F., AND PIESSENS, F. NodeSen-
try: Least-privilege library integration for server-side JavaScript.
In Annual Computer Security Applications Conference (ACSAC)
(2014).
[56] DEBILL, E. Module counts. http://www.modulecounts.
com/.
[57] DESAI, A., GUPTA, V., JACKSON, E., QADEER, S., RAJA-
MANI, S., AND ZUFFEREY, D. P: Safe asynchronous event-
In ACM SIGPLAN Conference on Pro-
driven programming.
gramming Language Design and Implementation (PLDI) (2013).
[58] ENCK, W., OCTEAU, D., MCDANIEL, P., AND CHAUDHURI,
S. A study of android application security. In USENIX Security
(2011).
[59] ENCK, W., ONGTANG, M., AND MCDANIEL, P. Understanding
android security. IEEE Security and Privacy (2009).
[60] FERG, S. Event-driven programming: introduction, tutorial, his-
tory. 2006.
[61] FOUNDATION, A. S. The Apache web server.
[62] FREES, S. C++ and Node.js Integration. 2016.
[63] GOLDSMITH, S. F., AIKEN, A. S., AND WILKERSON, D. S.
Measuring Empirical Computational Complexity. In Foundations
of Software Engineering (FSE) (2007).
[64] GOOGLE. Chrome v8: Google’s high performance, open source,
javascript engine. https://developers.google.com/v8/.
[65] GUARNIERI, S., AND LIVSHITS, V. B.
GATEKEEPER:
Mostly Static Enforcement of Security and Reliability Policies
for JavaScript Code. USENIX Security (2009).
[66] GULWANI, S., MEHRA, K. K., AND CHILIMBI, T. SPEED:
Precise and Efﬁcient Static Estimation of Program Computational
Complexity. In Principles of Programming Languages (POPL)
(2009).
[67] HARRELL,
J.
Node.js
at
PayPal.
https:
//www.paypal-engineering.com/2013/11/22/
node-js-at-paypal/, 2013.
[68] HEUSER, S., NADKARNI, A., ENCK, W., AND SADEGHI, A.-
R. Asm: A programmable interface for extending android secu-
rity. In USENIX Security (2014).
[69] JIN, X., HU, X., YING, K., DU, W., YIN, H., AND PERI, G. N.
Code injection attacks on html5-based mobile apps: Characteri-
zation, detection and mitigation. In Computer and Communica-
tions Security (CCS) (2014).
[70] KOLLER, R., AND WILLIAMS, D. Will Serverless End the Dom-
inance of Linux in the Cloud? In Hot Topics in Operating Systems
(HotOS) (2017), pp. 169–173.
[73] LISTON, T. Welcome To My Tarpit: The Tactical and Strate-
gic Use of LaBrea. http://www.threenorth.com/LaBrea/
LaBrea.txt, 2001.
[74] LYONS, A., MCLEOD, K., ALMATARY, H., AND HEISER,
G. Scheduling-Context Capabilities: A Principled, Light-Weight
Operating-System Mechanism for Managing Time. In European
Conference on Computer Systems (EuroSys) (2018).
[75] MCILROY, M. D. Killer adversary for quicksort. Software -
Practice and Experience 29, 4 (1999), 341–344.
[76] NIKIFORAKIS, N.,
INVERNIZZI, L., KAPRAVELOS, A.,
VAN ACKER, S., JOOSEN, W., KRUEGEL, C., PIESSENS, F.,
AND VIGNA, G. You are what you include: Large-scale evalua-
tion of remote javascript inclusions. In Computer and Communi-
cations Security (CCS) (2012).
[77] O’DELL, J. Exclusive: How LinkedIn used Node.js and HTML5
to build a better, faster app. http://venturebeat.com/2011/
08/16/linkedin-node/, 2011.
[78] O’DELL, J. Exclusive: How LinkedIn used Node.js and HTML5
to build a better, faster app, 2011.
[79] OJAMAA, A., AND DUUNA, K. Assessing the security of
In 7th International Conference for Internet
Node.js platform.
Technology and Secured Transactions (ICITST) (2012).
[80] OLIVO, O., DILLIG, I., AND LIN, C. Detecting and Exploit-
ing Second Order Denial-of-Service Vulnerabilities in Web Ap-
plications. ACM Conference on Computer and Communications
Security (CCS) (2015).
[81] OLIVO, O., DILLIG, I., AND LIN, C. Static Detection of Asymp-
In Program-
totic Performance Bugs in Collection Traversals.
ming Language Design and Implementation (PLDI) (2015).
[82] PADMANABHAN, S. How We Built eBay’s First Node.js Appli-
cation. https://www.ebayinc.com/stories/blogs/tech/
how-we-built-ebays-first-node-js-application/,
2013.
[83] PAI, V. S., DRUSCHEL, P., AND ZWAENEPOEL, W. Flash: An
Efﬁcient and Portable Web Server. In USENIX Annual Technical
Conference (ATC) (1999).
[84] PARIAG, D., BRECHT, T., HARJI, A., BUHR, P., SHUKLA, A.,
AND CHERITON, D. R. Comparing the performance of web
server architectures. In European Conference on Computer Sys-
tems (EuroSys) (2007), ACM.
[85] PETER, S., BAUMANN, A., ROSCOE, T., BARHAM, P., AND
ISAACS, R. 30 seconds is not enough! In European Conference
on Computer Systems (EuroSys) (2008).
[86] PETSIOS, T., ZHAO, J., KEROMYTIS, A. D., AND JANA, S.
SlowFuzz: Automated Domain-Independent Detection of Algo-
rithmic Complexity Vulnerabilities. In Computer and Communi-
cations Security (CCS) (2017).
[87] PUSCHNER, P. P., AND KOZA, C. Calculating the Maximum
Execution Time of Real-Time Programs. Real-Time Systems 1, 2
(1989), 159–176.
[88] RAYMOND, E. S. The Cathedral and the Bazaar. No. July 1997.
2000.
[89] SILBERSCHATZ, A., GALVIN, P. B., AND GAGNE, G. Operat-
ing System Concepts, 9th ed. Wiley Publishing, 2012.
[71] LEKIES, S., STOCK, B., AND JOHNS, M. 25 million ﬂows later:
Large-scale detection of dom-based xss. In Computer and Com-
munications Security (CCS) (2013).
[90] SMITH, R., ESTAN, C., AND JHA, S. Backtracking Algorith-
mic Complexity Attacks Against a NIDS. In Annual Computer
Security Applications Conference (ACSAC) (2006), pp. 89–98.
[72] LIN, Y., RADOI, C., AND DIG, D. Retroﬁtting Concurrency
for Android Applications through Refactoring. In ACM Interna-
tional Symposium on Foundations of Software Engineering (FSE)
(2014).
[91] SON, S., AND SHMATIKOV, V. SAFERPHP Finding Semantic
Vulnerabilities in PHP Applications. In Workshop on Program-
ming Languages and Analysis for Security (PLAS) (2011), pp. 1–
13.
358    27th USENIX Security Symposium
USENIX Association
[92] STAICU, C.-A., AND PRADEL, M. Freezing the web: A study
of redos vulnerabilities in javascript-based web servers. In 27th
USENIX Security Symposium (USENIX Security 18) (Baltimore,
MD, 2018), USENIX Association.
[93] STAICU, C.-A., PRADEL, M., AND LIVSHITS, B. Synode: Un-
derstanding and Automatically Preventing Injection Attacks on
In Network and Distributed System Security (NDSS)
Node.js.
(2018).
[94] TRIPP, O., PISTOIA, M., COUSOT, P., COUSOT, R., AND
GUARNIERI, S. Andromeda : Accurate and Scalable Secu-
rity Analysis of Web Applications. In International Conference
on Fundamental Approaches to Software Engineering (FASE)
(2013), pp. 210–225.
[95] VASILAKIS, N., KAREL, B., ROESSLER, N., DAUTENHAN,
N., DEHON, A., AND SMITH, J. M. BreakApp: Automated,
Flexible Application Compartmentalization. In Network and Dis-
tributed System Security (NDSS) (2018).
[96] WANDSCHNEIDER, M. Learning Node.js: A Hands-on Guide
to Building Web Applications in JavaScript. Pearson Education,
2013.
[97] WELSH, M., CULLER, D., AND BREWER, E. SEDA : An Ar-
In
chitecture for Well-Conditioned, Scalable Internet Services.
Symposium on Operating Systems Principles (SOSP) (2001).
USENIX Association
27th USENIX Security Symposium    359