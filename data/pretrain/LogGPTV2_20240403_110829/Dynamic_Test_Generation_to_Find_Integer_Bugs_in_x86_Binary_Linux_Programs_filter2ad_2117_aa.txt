# Title: Dynamic Test Generation to Find Integer Bugs in x86 Binary Linux Programs

## Authors:
- David Molnar, UC Berkeley
- Xue Cong Li, UC Berkeley
- David A. Wagner, UC Berkeley

## Abstract
Integer bugs, including integer overflows, width conversion errors, and signed/unsigned conversion errors, have become a common root cause for serious security vulnerabilities. This paper introduces new methods for discovering integer bugs using dynamic test generation on x86 binaries and describes key design choices for efficient symbolic execution of such programs. We implemented these methods in a prototype tool, SmartFuzz, which analyzes Linux x86 binary executables. Additionally, we created a reporting service, Metafuzz.com, to aid in triaging and reporting bugs found by SmartFuzz and the black-box fuzz testing tool zzuf. Our experiments applied these tools to various software applications, including mplayer, exiv2, and ImageMagick convert. We also report on our experience using SmartFuzz, zzuf, and Metafuzz.com to perform large-scale testing with Amazon Elastic Compute Cloud (EC2). To date, Metafuzz.com has recorded over 2,614 test runs, comprising 2,361,595 test cases. Our experiments found approximately 77 distinct bugs in 864 compute hours, costing an average of $2.24 per bug at current EC2 rates. We quantify the overlap in bugs found by the two tools and show that SmartFuzz finds bugs missed by zzuf, including one program where SmartFuzz finds bugs but zzuf does not.

## 1. Introduction
Integer overflow bugs have recently become the second most common type of bug in security advisories from OS vendors. Traditional static and dynamic analysis techniques are poorly suited to detecting integer-related bugs. In this paper, we argue that dynamic test generation is better suited for finding such bugs and develop new methods for identifying a broad class of integer bugs using this approach. We have implemented these methods in a new tool, SmartFuzz, which analyzes traces from commodity Linux x86 programs.

Integer bugs arise from the mismatch between machine arithmetic and mathematical arithmetic. For example, machine arithmetic has bounded precision; if an expression exceeds the maximum representable integer, the value wraps around, leading to unexpected results. This can cause issues like buffer overflows. In Section 2, we describe other classes of integer bugs, such as width conversions and signed/unsigned conversions, which can also lead to serious security vulnerabilities.

While new code can avoid integer bugs with proper construction, it is crucial to find and fix bugs in legacy code. Previous approaches, such as static analysis and runtime checks, often generate many false positives or miss bugs. Dynamic test generation, introduced by Godefroid et al. and Engler et al., uses symbolic execution to generate new test cases that expose specific behaviors of the program. Symbolic execution collects constraints, called the path condition, which model the values computed along a single path through the code. By adding a constraint representing a violated assertion to the path condition and feeding it to a solver, we can synthesize new test cases that trigger assertion violations.

Our main approach is to use symbolic execution to construct test cases that trigger arithmetic overflows, non-value-preserving width conversions, or dangerous signed/unsigned conversions. We then run the program on these test cases and use standard tools to check for buggy behavior. We only report test cases that are verified to trigger incorrect behavior, ensuring that all reported test cases are real bugs and not false positives.

We have implemented our approach in SmartFuzz, a tool for performing symbolic execution and dynamic test generation on Linux x86 applications. SmartFuzz works directly with binary executables and does not require source code. This allows us to generate tests from shipping binaries and perform whole-program analysis, even without source code for libraries. However, working with binary traces introduces challenges, such as the size of traces and the lack of type information. We discuss these challenges and design choices in Section 4.

In Section 5, we describe the techniques used to generate test cases for integer bugs in dynamic test generation. To manage the large number of bug reports, we built Metafuzz, a web service for tracking test cases and bugs. Metafuzz helps minimize human time required to find high-quality bugs and report them to developers. Finally, Section 7 presents an empirical evaluation of our techniques and discusses our experience with these tools.

The contributions of this paper are:
- Novel algorithms for finding signed/unsigned conversion vulnerabilities using symbolic execution.
- Extension of the range of integer bugs that can be found with symbolic execution, including integer overflows, underflows, width conversions, and signed/unsigned conversions.
- Implementation of these methods in SmartFuzz, a tool for symbolic execution and dynamic test generation of x86 binaries on Linux.
- Empirical evaluation of SmartFuzz's performance and comparison with the zzuf black-box fuzz testing tool.
- Techniques for addressing challenges in bug reporting at scale, including a fuzzy stack hash to group test cases and avoid duplicate bug reports.

## 2. Integer Bugs
We describe three main classes of integer bugs: integer overflows/underflows, width conversions, and signed/unsigned conversion errors. All these bugs occur due to the mismatch between machine arithmetic and arithmetic over unbounded integers.

### Overflows/Underflows
Integer overflows (and underflows) occur when an arithmetic expression results in a value larger (or smaller) than can be represented by the machine type. The usual behavior is to wrap around, e.g., for a 32-bit type, reduce the value modulo 2^32. This can lead to unexpected behavior, such as buffer overflows.

### Width Conversions
Converting a value from one integral type to another with a different range of values can introduce width conversion bugs. For example, converting a negative Int16 to a UInt32 can cause sign-extension, leading to a very large value and potential buffer overflows.

### Signed/Unsigned Conversion
Converting a signed integer type to an unsigned integer type (or vice versa) can change a negative number to a large positive number (or vice versa), leading to bugs. For instance, a negative integer passed to memcpy can be promoted to a large unsigned integer, causing a buffer overflow.

## 3. Related Work
An earlier version of SmartFuzz and the Metafuzz web infrastructure were used in previous work comparing dynamic test generation with black-box fuzz testing. That work did not describe the SmartFuzz tool or Metafuzz infrastructure in detail. This paper presents new data on the effectiveness of SmartFuzz.

The most closely related work on integer bugs is Godefroid et al., who describe dynamic test generation for integer overflows, underflows, and some narrowing conversion errors in the SAGE tool. Our work considers a wider range of narrowing conversion errors and signed/unsigned conversion. The EXE and KLEE tools also use integer overflows to prioritize test cases but do not break out results on the number of bugs found. KLEE focuses on scaling dynamic test generation for smaller programs, while we focus on a few large programs.

IntScope is a static binary analysis tool for finding integer overflow bugs. It translates binaries to an intermediate representation and uses symbolic execution to check for potentially harmful overflows. SmartFuzz, in contrast, generates new test cases that cause integer bugs at the point in the program where such behavior could occur. IntScope reports errors directly to programmers, while SmartFuzz filters test cases using tools like memcheck, allowing for more aggressive heuristics.

Other approaches to integer bugs include static analysis and runtime detection. The Microsoft Prefast tool uses static analysis to warn about intraprocedural integer overflows. Both Microsoft Visual C++ and gcc can add runtime checks to catch integer overflows in arguments to malloc. Brumley et al. provide rules for such runtime checks, but both static analysis and runtime checking can flag correct code that relies on overflow semantics.

Blexim provides an introduction to integer bugs, and fuzz testing has been widely used to find bugs. Notable public demonstrations include the Month of Browser Bugs and Month of Kernel Bugs. DeMott surveys recent work on fuzz testing, including the autodafe fuzzer, which uses libgdb to instrument functions and adjust fuzz testing based on their arguments.

Our Metafuzz infrastructure addresses issues not treated in previous work on test generation. We make bug bucketing a first-class problem and introduce a fuzzy stack hash in response to developer feedback. The SAGE paper reports bugs by stack hash, and KLEE reports on using the line of code as a bug bucketing heuristic, but we are not aware of other work that uses a fuzzy stack hash. We also report techniques for reducing the amount of human time required to process test cases generated by fuzzing.