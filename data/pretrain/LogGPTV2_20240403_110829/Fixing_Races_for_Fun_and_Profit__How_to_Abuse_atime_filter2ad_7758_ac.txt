directories in each chain, enabling us to create deeper
chains within the constraints of MAXPATHLEN. Pseu-
docode for constructing this maze is given in Figure 7.
With this structure, the attacker runs the victim with the
ﬁlename argument activedir/sentry/lnk/.../
lnk/lnk.
With C chains, each N directories deep, the victim
will have to traverse CN directories to resolve the given
ﬁlename. Unix systems usually impose a limit on the
total number of symbolic links that a single ﬁlename
lookup can traverse. Table 2 gives the MAXPATHLEN
and link limit for some common versions of Unix. For
example, Linux 2.6 limits ﬁlename lookups to 40 sym-
bolic links to prevent “arbitrarily long lookups.”3 This
limits the attacker to C  /dev/null 2>&14 populates the buffer cache with
new items and will often ﬂush some of the attack direc-
tories from the cache. With large mazes, the recursive
grep is very likely to ﬂush at least one of the directories
in each maze, enabling the attacker to successfully break
the k-Race algorithm.
Summary. To defeat k-Race using k strengthening
rounds, the attacker creates M = 2k + 2 directories,
maze0, . . ., maze2k + 1, builds a maze in each of these
directories, and sets the symlink activemaze to ini-
tially point to maze0, as shown in Figure 8. The exit
links in the even-numbered mazes point to an attacker
accessible ﬁle, and the exit links in the odd-numbered
mazes point to the protected ﬁle under attack. After cre-
ating this directory setup, the attacker uses grep or some
other common Unix tool to ﬂush some of the directories
in the mazes out of cache. She then executes the vic-
tim with the path activemaze/sentry/lnk/.../
lnk and advances activemaze to point to the next
4We have found this method more reliable if the grep command
searches the ﬁles on the same disk as the mazes. This is likely to be a
consequence of on-disk caching.
activemaze
relative link
Maze 0
Maze 1
Maze 2
Maze 3
Maze 4
relative link from exit to public file
relative link from exit to secret file
relative link from exit to public file
relative link from exit to secret file
relative link from exit to public file
Figure 8: Malicious directory structure to attack the k-
Race defense using the maze structure from Figure 6.
This construction is particularly effective when k is large.
maze directory whenever she detects that the access time
of activemaze/sentry has changed.
Experimental results. We implemented the k-Race al-
gorithm,
including randomized delays between every
system call and between each round of strengthening.
We did not implement the extended k-Race defenses,
such as setting the victim scheduling priority to FIFO
or using mlock() to pin its pages in memory. We do
not believe these enhancements would prevent our attack
from succeeding.
We implemented and tested the attack on three Unix
variants: Linux 2.6.8, Solaris 9, and FreeBSD 4.10-PR2.
The Linux machine contains a 1.3GHz AMD Athlon pro-
cessor, 1GB of RAM,and a 160GB, 7200RPM IDE disk
with an 8MB on-disk cache and 9ms average seek time.
The FreeBSD machine contains a 1.4GHz Pentium IV,
512MB of RAM, and a 40GB, 7200RPM IDE disk with
a 2MB on-disk cache and 8.5ms average seek time. The
Solaris machine is a multiprocessor with two 450MHz
UltraSPARC processors, 1GB of RAM, and a RAID-1
mirror built on two 9GB SCSI disks: one 10, 000RPM
drive with a 4MB buffer, and one 7200RPM disk with a
USENIX Association
14th USENIX Security Symposium
309
OS
k-Race Parameters
Attack Parameters Wins / Trials
Linux 2.6.8
Solaris 9
FreeBSD 4.10-PR2
Linux 2.6.8
Solaris 9
FreeBSD 4.10-PR2
Linux 2.6.8
k Randomized M
201
201
201
201
201
201
50
100 No
100 No
100 No
100 Yes
100 Yes
100 Yes
1000 No
C × N
400
400
200
400
1200
200
7000
22/100
83/100
100/100
19/100
77/100
88/100
83/100
Table 3: Attack success rates against the k-Race algorithm. k is the k-Race security parameter, M is the number of
maze directories used for the attack, C × N is the total number of directories in each maze. We used grep to ﬂush
the ﬁlesystem cache before each trial. The ﬁrst three experiments show that our maze attack works on several versions
of Unix and scales to large values of k by using more mazes. The three experiments against the randomized k-Race
algorithm show that our system call distinguishers are effective, and that our attack is insensitive to the ordering of the
victim’s calls to access(2), open(2), and fstat(2). The last experiment with k = 1000 shows that by re-using mazes we
can even attack extremely large values of k.
2MB buffer. The Linux machine used the ext3 ﬁlesys-
tem, while the Solaris and FreeBSD machine each used
ufs. Table 2 summarizes the conﬁguration and capa-
bilities of each machine and its operating system. Our
results are given in Table 3, and show that, even with
k = 100, we can defeat the k-Race algorithm easily on a
variety of systems. For example, we were able to win 83
out of 100 trials on Solaris, and 100 out of 100 trials on
FreeBSD.
We stop short of performing an exhaustive analysis of
how individual factors such as memory size, hard drive
model, and operating system affect the success of our
attack. Our goal is simply to show that the attack is suc-
cessful under a broad sampling of realistic hardware and
software characteristics, which is sufﬁcient evidence that
the k-Race defense must not be used in practice.
Extensions. Our attack avoids the ﬁlesystem cache by
using a separate maze for each of the victim’s system
calls, but we can re-use mazes for extremely large val-
ues of k. As shown in Table 2, large mazes can consume
over 300MB of disk space on some operating systems.
A machine with, say, 1GB of RAM can only cache 3
of these mazes, so after the victim performs 4 system
calls, the operating system will have ﬂushed many of the
cache entries for directories in the ﬁrst maze. The at-
tacker can therefore safely reuse the ﬁrst maze. In gen-
eral, the adversary can break the k-Race defense using
extremely large k by creating as many mazes as neces-
sary to ﬁll the ﬁlesystem cache and then cycling among
these mazes during the attack. We used this technique to
attack k-Race with k = 1000 on Linux 2.6, and found
that with 50 mazes of sizes 28MB each, we can break
the k-Race defense 83 times out of 100. (We used mazes
smaller than the maximal size because, even with this
size of maze, a single trial was taking over 5 minutes.)
If the I/O ampliﬁcation methods described above are
not sufﬁcient to enable the attacker to win races handily,
she can create thousands of dummy ﬁles in each direc-
tory of each chain. This method of slowing down name
resolution was previously suggested by Mazi`eres and
Kaashoek [5]. These dummy entries will force the ker-
nel to read even more data from disk while performing
name resolution for each of the victim’s system calls. As
mentioned above, resolving a ﬁlename through a maze
may require reading hundreds of megabytes of data from
disk. By adding dummy entries in each chain directory,
an attacker can force the kernel to read gigabytes of data
from disk. We did not implement this extension because
the basic mazes were sufﬁcient to attack every system we
tested.
In summary, we have shown a practical attack against
the k-Race defense using extremely high values for the
security parameter k and on a variety of Unix operating
systems.
6 A Randomized k-Race Algorithm
Dean and Hu’s defense performs a deterministic se-
quence of access(2) and open(2) system calls, and the
attack in Section 4 exploits that by deterministically
switching between a publicly accessible ﬁle and the tar-
get ﬁle. This suggests a potential countermeasure to our
attack: in each iteration of strengthening, the victim ran-
domly chooses to perform either an access(2) or open(2)
call. Now our attack will fail unless it can determine
the victim’s sequence of system calls. We next introduce
system call distinguishers to overcome this obstacle.
310
14th USENIX Security Symposium
USENIX Association
activemaze
relative link
Maze 0
relative link from exit
Maze 1
relative link from exit
Maze 2
relative link from exit
Maze 3
relative link from exit
Maze 4
relative link from exit
relative link
target
relative link
public
secret
relative link to public file
relative link to secret file
Figure 9: Malicious directory structure for attacking the
randomized k-Race defense. The exit links in each
maze point to the symbolic link target and the attacker
points target to the public or protected ﬁle depending
on the victim’s current system call.
7 Attack on Randomized k-Race
Recall that our attack program gains access to the CPU
while the victim is in the middle of executing one of its
system calls, so it is impossible for the adversary to pre-
dict the victim’s next system call. Instead, we describe
methods for determining the victim’s current system call
and reacting appropriately.
Distinguishing access(2) and open(2) calls is surpris-
ingly easy on most Unix operating systems. In Solaris 9,
any process can read the current system call number of
any other process from /proc/pid/psinfo. Linux
and FreeBSD do not export the system call numbers of
processes, but we can exploit a side effect of their imple-
mentations of the access(2) system call. Recall that ac-
cess(2) enables a setuid-root process to determine if the
invoking user can access a certain ﬁle. When a setuid-
root process runs, the invoking user’s ID is stored in the
processes real user ID, and its effective user ID is set to
0, giving it root privileges. FreeBSD implements the ac-
cess(2) system call by copying the process’s real user ID
to its effective user ID, resolving the given ﬁlename and