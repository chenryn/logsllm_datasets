### Universal Circuit and zk-SNARK Protocol

#### Public Statement of the Universal Circuit
The public statement of the universal circuit \( C_{\text{univ}} \) includes the specification of the custom circuit, the custom statement, and the random values \( r_1 \) and \( r_2 \). In other words, the statement of the universal circuit will be the following set of wires: \( I_{\text{spec}} \cup I_{\text{Zio}} \cup I_R \). The set \( J \) in Protocol 2 will be equal to \( I_{\text{Zw}} \cup I_{\text{Z}'} \).

#### Protocol 3: A zk-SNARK for \( C_{\text{univ}} \)

**Setup:**
- **Universal Parameters Generation:**
  - \( \text{PARAMETERS} \leftarrow \text{PARAMGEN}(C, 1^\lambda) \)
  - This phase generates a universal circuit \( C_{\text{univ}} \) that can perform the operations of any circuit \( C \in \mathcal{C} \).
  - The key generation phase \( \text{PARAMGEN}(C, 1^\lambda) \) will call the setup algorithm in Protocol 2:
    - \( \{ \text{vrk}_{C_{\text{univ}}}, \text{prk}_{C_{\text{univ}}} \} \leftarrow \text{Setup}(C_{\text{univ}}, 1^\lambda) \)
    - Set \( J = I_{\text{Zw}} \cup I_{\text{Z}'} \) and \( I = I_{\text{aux}} \).

- **Key Construction:**
  - Choose \( \alpha, \beta, \gamma, \delta, \delta', s \leftarrow \mathbb{F}_q \).
  - Construct the public proving key \( \text{prk}_{C_{\text{univ}}} \) as follows:
    - \( g^\alpha_1, g^\beta_2, g^\delta_1, g^{\delta'}_1 \)
    - \( \{ g^{s^i} \}_{i \in \{0, \ldots, d-1\}} \)
    - \( \{ g^{s^i t(s)/\delta} \}_{i \in \{0, \ldots, d-2\}} \)
    - \( \{ g^{(\beta v_k(s) + \alpha w_k(s) + y_k(s))/\delta'} \}_{k \in I_{\text{Zw}} \cup I_{\text{Z}'}} \)
    - \( \{ g^{(\beta v_k(s) + \alpha w_k(s) + y_k(s))/\delta} \}_{k \in I_{\text{aux}}} \)

  - Construct the verification key \( \text{vrk}_{C_{\text{univ}}} \) as follows:
    - \( g^\alpha_1, g^\beta_2, g^\gamma_1, g^\delta_2, g^{\delta'}_2 \)
    - \( \{ g^{(\beta v_k(s) + \alpha w_k(s) + y_k(s))/\gamma} \}_{k \in I_{\text{spec}} \cup I_{\text{Zio}} \cup I_R} \)

  - Set \( \text{PARAMETERS} = \{ \text{vrk}_{C_{\text{univ}}}, \text{prk}_{C_{\text{univ}}} \} \).

- **Derive (Custom Circuit Specification):**
  - \( \{ \text{VRK}_C, \text{PRK}_C \} \leftarrow \text{DERIVE}(C, \text{PARAMETERS}) \)
  - A party sets the values of each \( l_i \) and \( l'_i \) (besides any functionality selectors in the general case) according to the specification of the custom circuit \( C \).
  - The party then computes \( \text{vrk}_C \) based on the items in \( \text{vrk}_{C_{\text{univ}}} \):
    - \( \text{vrk}_C \) will include:
      - \( g^\alpha_1, g^\beta_2, g^\gamma_1, g^\delta_2, g^{\delta'}_2 \)
      - \( \{ g^{(\beta v_k(s) + \alpha w_k(s) + y_k(s))/\gamma} \}_{k \in I_{\text{Zio}} \cup I_R} \) (copied directly from \( \text{vrk}_{C_{\text{univ}}} \))
      - \( v_{\text{kspec}} = \prod_{k \in I_{\text{spec}}} g^{c_k (\beta v_k(s) + \alpha w_k(s) + y_k(s))/\gamma_1} \), where \( c_k \) is the value of the wire \( k \) in the universal circuit.

  - The derivation of \( \text{vrk}_C \) does not need to happen in a trusted manner. It can be verified in linear time.
  - The proving key of the custom circuit \( C \) will be the same as the proving key of the universal circuit, except for \( v_{\text{kspec}} \):
    - \( \text{prk}_C = \text{prk}_{C_{\text{univ}}} \cup \{ v_{\text{kspec}} \} \).

**Prove:**
- \( \pi \leftarrow \text{PROVE}(C, \{ z_i \}_{i \in \{1, \ldots, n_s + 3n^* + 3n+\}}, \text{PRK}_C) \)
  - The prover samples three random values \( \kappa_1, \kappa_2, \kappa_3 \) from \( \mathbb{F}_q \).
  - The prover commits to the values of \( \{ z_i \} \) and its permutation \( \{ z'_i \} \):
    - \( \text{cm}_1 = \prod_{k \in I_{\text{Zw}} \cup I_{\text{Z}'}} g^{c_k (\beta v_k(s) + \alpha w_k(s) + y_k(s))/\delta'} \)
    - \( \text{cm}_2 = \prod_{k \in I_{\text{Zio}}} g^{c_k (\beta v_k(s) + \alpha w_k(s) + y_k(s))/\gamma} \)
    - \( \text{cm} = g^{\delta \kappa_3}_1 \cdot \text{cm}_1 \cdot \text{cm}_2 \)

  - The prover computes the random values \( r_1 \) and \( r_2 \) using the previous commitment:
    - \( r_1 = \text{Hash}(0 \| v_{\text{kspec}} \| \text{cm}) \)
    - \( r_2 = \text{Hash}(1 \| v_{\text{kspec}} \| \text{cm}) \)

  - The prover continues evaluating the circuit and computes:
    - \( h(x) = p(x) / t(x) \)
    - \( \pi_a = g^{\alpha + v(s) + \kappa_1 \delta}_1 \)
    - \( \pi_b = g^{\beta + w(s) + \kappa_2 \delta}_2 \)
    - \( \pi_c = g^{h(s) t(s)/\delta}_1 \)
    - \( \pi_d = g^{\delta \kappa_3}_1 \cdot \prod_{k \in I_{\text{Zw}} \cup I_{\text{Z}'}} g^{c_k (\beta v_k(s) + \alpha w_k(s) + y_k(s))/\delta'} \)
    - \( B_1 = g^{\beta + w(s) + \kappa_2 \delta}_2 \)
    - \( X = \prod_{k \in I_{\text{aux}}} g^{c_k (\beta v_k(s) + \alpha w_k(s) + y_k(s))/\delta} \)

  - The proof \( \pi \) is:
    - \( \pi_a, \pi_b, \pi_c, \pi_d \)

**Verify:**
- \( \{0, 1\} \leftarrow \text{VERIFY}(\{ z_i \}_{i \in \{1, \ldots, n_s\}}, \pi, \text{VRK}_C) \)
  - The verifier computes the IO component of the commitment:
    - \( \psi = \prod_{k \in I_{\text{Zio}}} g^{c_k (\beta v_k(s) + \alpha w_k(s) + y_k(s))/\gamma} \)
  - The verifier computes the commitment:
    - \( \text{cm} = \psi \cdot \pi_d \)
  - The verifier computes the random values \( r_1 \) and \( r_2 \) using the previous commitments:
    - \( r_1 = \text{Hash}(0 \| v_{\text{kspec}} \| \text{cm}) \)
    - \( r_2 = \text{Hash}(1 \| v_{\text{kspec}} \| \text{cm}) \)
  - The verifier computes:
    - \( \nu = \prod_{k \in I_R} g^{c_k (\beta v_k(s) + \alpha w_k(s) + y_k(s))/\gamma} \)
  - The verifier checks:
    - \( e(\pi_a, \pi_b) = e(g^\alpha_1, g^\beta_2) \cdot e(v_{\text{kspec}} \cdot \nu \cdot \psi, g^\gamma_2) \cdot e(\pi_c, g^\delta_2) \cdot e(\pi_d, g^{\delta'}_2) \)
  - Note that \( e(g^\alpha_1, g^\beta_2) \) can be hardcoded in advance. The total number of pairings done by the verifier for each instance is 4 pairings, and the proof size is 3 elements in \( G_1 \) and 1 element in \( G_2 \).

### Multi-Opcodes Circuit (Supplementary)

**Setup Parameters:**
- \( n_s \): Number of entries \( (l_i, z_i) \) representing the public statement.
- \( \{ n_j \} \): Number of times each opcode \( j \) appears in the circuit, \( 1 \leq j \leq 4 \).
- \( \{ u_j \} \): Number of entries used by each opcode \( j \), \( 1 \leq j \leq 4 \).

**Circuit Input:**
- Statement entries: \( (l_i, z_i) \) for all \( i \in \{1, 2, \ldots, n_s\} \).
- Operation entries: \( (l_i, z_i) \) for all \( i \in \{n_s + 1, n_s + 2, \ldots, n_s + \sum_{j \leq 4} n_j u_j\} \).
- Permuted entries: \( (l'_i, z'_i) \) for all \( i \in \{1, 2, \ldots, n_s + \sum_{j \leq 4} n_j u_j\} \).
- Random values: \( r_1, r_2 \)
- Functionality selectors as specified for each instruction (set during computation specification).
- Memory consistency subcircuit witnesses.

**Opcode 1 (Generic Opcode) (repeated \( n_1 \) times, \( u_1 = 3 \))**
- Operates on: \( ((l_i, z_i), (l_{i+1}, z_{i+1}), (l_{i+2}, z_{i+2})) \) for all \( i \in \{n_s + 1, n_s + 4, \ldots, n_s + n_1 u_1 - 2\} \)
- Functionality selectors:
  - Coefficient vector: \( (c_1, c_2, c_3, c_4, c_5, c_6, c_7) \), where \( c_j \in \mathbb{F}_q \) for all \( j \)
  - Operation bit selectors: \( \{ \text{opeq}, \text{op1}, \text{op2}, \text{usePrev} \} \)

- Circuit:
  - Compute \( t_1 = (c_1 + c_2 z_i)(c_3 + c_4 z_{i+1}) + c_5 \)
  - Compute \( t_2 = (c_1 + c_2 z_i) + (c_3 + c_4 z_{i+1}) + c_5 \)
  - Compute \( t_3 = (z_i ==? z_{i+1}) \), \( t_4 = 1 - t_3 \)
  - Compute \( k_1 = t_2 + \text{op1} \cdot (t_1 - t_2) \)
  - Compute \( k_2 = t_4 + \text{op1} \cdot (t_3 - t_4) \)
  - Compute \( \text{result1} = k_1 + \text{opeq} \cdot (k_2 - k_1) \)
  - Compute \( t_5 = \text{result1} \cdot (c_6 + z_{i-1}) + c_7 \)
  - Compute \( t_6 = \text{result1} + (c_6 + z_{i-1}) + c_7 \)
  - Compute \( \text{result2} = t_6 + \text{op2} \cdot (t_5 - t_6) \)
  - Assert \( \text{usePrev} \cdot (\text{result2} - \text{result1}) = (z_{i+2} - \text{result1}) \)

- Usage notes: The coefficient set can be chosen to support various operations, e.g., for multiplication, \( \text{op1} = c_2 = c_4 = 1 \), the rest are zeros; for XOR (assuming that \( z_i \) are bits), \( \text{op1} = c_2 = c_3 = 1, c_4 = -2, c_1 = -2^{-1}, c_5 = 2^{-1} \), the rest are zeros.

**Opcode 2 (Bitwise Operations) (repeated \( n_2 \) times, \( u_2 = 3 \))**
- Operates on: \( ((l_i, z_i), (l_{i+1}, z_{i+1}), (l_{i+2}, z_{i+2})) \) for all \( i \in \{n_s + \sum_{j < 2} n_j u_j + 1, n_s + \sum_{j < 2} n_j u_j + 4, \ldots, n_s + \sum_{j \leq 2} n_j u_j - 2\} \)
- Functionality selectors:
  - Operation selectors: \( \text{op} \) (a vector of 12 bits, only one of them will be active during runtime. See Section 5.2)

- Circuit:
  - Extract bit vectors \( b_1, b_2 \) from \( z_i \) and \( z_{i+1} \) (assuming 32 is the bit length)
  - Compute \( b = b_1 \circ b_2 \) (where \( \circ \) refers to the Hadamard product)
  - (AND-bitwise cases) Compute \( a_1 = \text{pack32}(b), a_2 = \text{pack32}(b_2 - b), a_3 = \text{pack32}(b_1 - b), a_4 = \text{pack32}(1 - b_1 - b_2 + b) \)
  - (XOR-bitwise cases) Compute \( x_1 = \text{pack32}(b_1 + b_2 - 2b), x_2 = \text{pack32}(1 - b_1 - b_2 + 2b), x_3 = x_2, x_4 = x_1 \)
  - (OR-bitwise cases) Compute \( o_1 = \text{pack32}(b_1 + b_2 - b), o_2 = \text{pack32}(1 - b_1 + b), o_3 = \text{pack32}(1 - b_2 + b), o_4 = \text{pack32}(1 - b) \)
  - Assert \( z_{i+2} = \text{op} \cdot (a_1, a_2, a_3, a_4, x_1, x_2, x_3, x_4, o_1, o_2, o_3, o_4) \)

- Other modes: This opcode also behaves similar to opcode 1 supporting native operations when needed (details omitted).

**Opcode 3 (Split/Pack Operations) (repeated \( n_3 \) times, \( u_3 = 38 \))**
- Operates on the following (for all \( i \in \{n_s + \sum_{j < 3} n_j u_j + 1, n_s + \sum_{j < 3} n_j u_j + 39, \ldots, n_s + \sum_{j \leq 3} n_j u_j - 37\} \)):
  - Element (Bit) vector: \( e = ((l_i, z_i), (l_{i+1}, z_{i+1}), \ldots, (l_{i+31}, z_{i+31})) \)
  - Byte vector: \( ((l_{i+32}, z_{i+32}), (l_{i+33}, z_{i+33}), \ldots, (l_{i+35}, z_{i+35})) \)
  - Packed elements: \( ((l_{i+36}, z_{i+36}), (l_{i+37}, z_{i+37})) \)

- Functionality selectors:
  - Force bit assertions: \( \text{checkb} \)
  - Coefficient vector 1: \( s_1 = (c_{1,1}, c_{1,2}, \ldots, c_{1,32}) \)
  - Coefficient vector 2: \( s_2 = (c_{2,1}, c_{2,2}, \ldots, c_{2,32}) \)

- Circuit:
  - Assert \( z_j (1 - z_j) \text{checkb} = 0 \) for all \( i \leq j \leq i + 31 \)
  - Assert \( z_{i+36} = e \cdot s_1 \), Assert \( z_{i+37} = e \cdot s_2 \)
  - Assert \( z_{i+32+j} = \sum_{k \in \{1+8j, \ldots, 8+8j\}} c_{1,k} \cdot z_{i+k-1} \) for all \( j \in \{0, 1, 2, 3\} \)

- Usage notes: Packing or splitting into bits can be done by setting \( s_1 \) to contain powers of two, and setting \( \text{checkb} = 1 \). Shifting and rotation (static parameters) can be done by setting \( s_2 \) to be a permutation of powers of two.
- Other modes: This opcode can be used to compute weighted sums of native field elements.

**Opcode 4 (Runtime Memory Access) (repeated \( n_4 \) times, \( u_4 = 3 \))**
- Operates on: \( ((l_i, z_i), (l_{i+1}, z_{i+1}), (l_{i+2}, z_{i+2})) \) for all \( i \in \{n_s + \sum_{j < 4} n_j u_j + 1, n_s + \sum_{j < 4} n_j u_j + 4, \ldots, n_s + \sum_{j \leq 4} n_j u_j - 2\} \)

- Circuit:
  - Parse \( z_i, z_{i+1}, z_{i+2} \) as \( \text{isWrite}_k, \text{index}_k, \text{value}_k \) for all \( k = (i - (n_s + \sum_{j < 4} n_j u_j + 1)) / 3 \)
  - Add the tuple \( \text{rec}_k = (\text{opCounter}_k = k, \text{isWrite}_k, \text{index}_k, \text{value}_k) \) to the memory consistency check circuit.

**Memory Consistency Check Circuit:**
- The subcircuit operates on the tuples \( \text{rec}_k \) for all \( k = \{0, 1, \ldots, n_4 - 1\} \) defined in Opcode 4.
- The subcircuit accepts additional witness inputs from the prover \( \text{rec}'_k = (\text{opCounter}'_k, \text{isWrite}'_k, \text{index}'_k, \text{value}'_k) \) for all \( k = \{0, 1, \ldots, n_4 - 1\} \) (Note that the prover will commit to this input in the first stage before knowing the randomness).

- Permutation Verification:
  - Compute \( p_1 = \prod_k (r_2 - (1, r_1, r_2, r_3) \cdot \text{rec}_k) \)
  - Compute \( p_2 = \prod_k (r_2 - (1, r_1, r_2, r_3) \cdot \text{rec}'_k) \)
  - Assert \( p_1 = p_2 \)

- Consistency Verification: This applies the memory consistency checks similar to TinyRAM [3].

**Global Consistency Checks Across the Universal Circuit:**
- Permutation Verification:
  - Compute \( p_1 = \prod_i (r_2 - (z_i + l_i r_1)) \) for all \( i \in \{1, 2, \ldots, n_s + \sum_{j \leq 4} n_j u_j\} \)
  - Compute \( p_2 = \prod_i (r_2 - (z'_i + l'_i r_1)) \) for all \( i \in \{1, 2, \ldots, n_s + \sum_{j \leq 4} n_j u_j\} \)
  - Assert \( p_1 = p_2 \)

- Consistency Verification:
  - Assert \( (1 - (l'_i - l'_{i-1}))(z'_i - z'_{i-1}) = 0 \) for all \( i \in \{2, 3, \ldots, n_s + \sum_{j \leq 4} n_j u_j\} \) (Note that since \( l'_i \) are set by the computation specifier, they will be sorted and increasing by steps of 1.)

This detailed description provides an overview of the universal circuit with multiple opcodes, including their functionalities and the corresponding circuit designs.