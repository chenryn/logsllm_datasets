It was no surprise that the system worked. The most in-
teresting observation is that even though the hardware used
is fairly old (a beneﬁt in this case, as it is more easily over-
loaded), there was no noticeable system performance degra-
dation. This also does not come as a surprise, since all
the switching in the kernel is done in software and in the
same address space. In a real router with hardware-assisted
fast switching paths for the common cases, the overhead of
imposing a number of rate limiting sessions may be much
higher.
4. Related Work
Distributed Denial of Service attacks have been a real
problem for less than three years, and not much published
work exists on the subject. Related work falls into two cat-
egories: old work that can also be used in countering DDoS
attacks, and new work speciﬁcally aimed at this task.
Originally, it was suggested that DDoS attacks could be
countered by applying resource allocation techniques on
network bandwidth. Integrated Services [5] and Differen-
tiated Services [2] are two approaches aimed at isolating
ﬂows with speciﬁc quality of service (QoS) requirements
from lower-priority trafﬁc. It is not clear if this approach
would help; Web trafﬁc, which is a signiﬁcant fraction of
network trafﬁc, is likely to remain best-effort, so it will not
be protected by QoS requirements. It is also not clear to
what extent compromised sources could fake trafﬁc to show
it belonged to QoS-protected ﬂows.
There are many congestion-control mechanisms, which,
if only they were globally deployed, might alleviate some
of the effects of congestion due to DDoS attacks. Random
Early Detect (RED)[11] and its variants try to identify ﬂows
that do not obey TCP-friendly end-to-end congestion con-
trol, and preferentially drop them. There is also a large body
of work (e.g., Fair Queuing[7], Class-Based Queuing[12])
aimed at allocating speciﬁc fractions of the available band-
width to each ﬂow so that they all get served. The main
problem with these approaches is that packets belonging to
DDoS attacks do not have readily-identiﬁable ﬂow signa-
tures, and thus cannot be identiﬁed by these mechanisms.
This is the reason why the concept of Aggregate-based Con-
gestion Control was developed[14] and which is where the
work in the present paper is based upon.
A different style of approach to combating DDoS attacks
focuses on trying to detect a DDoS attack in progress and
then respond to the speciﬁc attack. Various forms of packet
tracking have been suggested. Some try to construct a par-
tial map of the paths that the attack is taking; the two main
variants are traceback [1] and packet marking [16, 6]. Oth-
ers, such as [18] require all edge routers to log (a sample of
all) packets, and then analyze the logs in order to identify,
and hopefully block, sources of the attack. An interesting
approach is that of [3] where, starting with a partial map
of the network, they can locate routers where attack traf-
ﬁc is passing through by ﬂooding them and watching the
attack trafﬁc decrease; while intellectually appealing, this
technique is likely to create much controversy if it were to
be applied routinely. In traceback techniques, routers pick
outgoing packets with a small probability (e.g. 1=20000),
and send a traceback packet (a new kind of ICMP packet)
to the same destination as the sampled packet. The trace-
back packet contains the IP address of the router sending it,
and is always sent out with a TTL (or Hop Limit) of 255 (as
a rudimentary form of authentication). During an attack, a
sufﬁcient number of these packets will reach the target for it
to form an approximate map of the path the attack is taking.
Of course, the attacker can inject its own traceback pack-
ets, but unless it has compromised a router fairly close to
the target (to inject packets with a sufﬁciently high TTL),
all it will achieve is create a ﬁctitious subtree from where
part of the attack may be originating. Packet marking does
not send additional packets, but rather modiﬁes the IP ID
ﬁeld in each packet to carry partial information about the
router that marked the packet. Clever techniques are used
to reconstruct the original data. This approach has its own
set of failures (e.g., it is hard to get it to work with IPv6).
The question of what to do even when the paths the attack
is taking are identiﬁed remains largely unanswered, and it
may still involve human operators, especially when admin-
istrative boundaries are crossed.
The common problem that all the tracking techniques are
trying to solve is that source addresses in attack packets can-
not be trusted, because they are very easy to forge. If all
edge routers in the entire Internet were implementing source
address ﬁltering[9], this task would be greatly simpliﬁed.
Of course, most machines where the packets are originating
have been compromised by an attacker, and their owners do
not even know that they are being used for an attack. More-
over, even if the hundreds or thousands of machines that an
attack is coming from were known, it is not clear what could
be done about them. It has also been suggested[17] that in-
trusion detection systems or ﬁrewalls be used to detect an at-
tack in progress, and notify upstream elements accordingly.
Finally, there is an approach that is similar to Pushback that
was described in [19] in an Active-Networks-based defense
against ﬂooding attacks.
5. Discussion
Let us discuss some issues that may affect the way Push-
back could be deployed. First off, it is fairly obvious that
the Pushback approach is most effective when an attack is
non-isotropic; in other words, when there are routers fairly
close to the target where most of the attack trafﬁc is arriving
from a subset of the input links. That is a reasonably safe
assumption; even the largest attacks do not involve more
than a few thousand compromised machines, and there are
many millions of machine on the Internet. It would be par-
ticularly hard for an attacker to ensure that the attack slaves
are evenly distributed with respect to the target.
Another issue to examine is what fraction of the attack
trafﬁc originates from hosts served by the same ISP as the
target. The smaller the ISP, the smaller that fraction will be,
and even the largest of the top-tier ISPs will have a sizeable
fraction of attacks originating from the outside. While an
ISP can unilaterally deploy Pushback in its routers, unless
agreements with its peering ISPs are made on how to honor
pushback requests (an issue fraught with security and policy
issues), said ISP will have to take advantage of Pushback as
best as it can inside its own network. One easy step, which
effectively extends Pushback by one more hop without the
co¨operation of the upstream (belonging to a different ISP)
router, is to perform input rate-limiting on the border routers
(along with the normal output rate-limiting). Of course, this
is only useful if the border router connects to more than one
other border routers. Applying input rate-limiting penalizes
bad trafﬁc coming in on the rate-limited input link without
affecting incoming trafﬁc from other links (which output-
only rate-limiting would). Conceptually, this is the same
as the border router having one additional router between
itself and each peering link, and sending pushback requests
to those conceptual routers.
Now, in general, an ISP’s network can be thought of as a
cloud where clients attach (on edge routers) and which con-
nects to other ISPs at peering points (private or public). An
ISP’s network can thus be viewed as a single virtual router,
with multiple inputs and multiple outputs. If, in addition to
output rate limiting, we were to implement input rate limit-
ing, then the following variation of Pushback could be con-
sidered: when an edge router detects an attack toward one
of its attached customers, it tries to determine what frac-
tions of the attack trafﬁc are coming through the border
routers of the ISP. This could be done with some variation
of ITRACE or packet-marking by the border routers that
would be caught and examined at the edge routers. The
edge routers would then ask (with proper authentication, of
course) the border routers to apply input rate limiting to the
requested aggregate.
The detection algorithms in the Pushback architecture are
not necessarily limited to information they get from just
the drop set. Rather, Pushback should be viewed as com-
plementary to many of the DDoS detection approaches de-
scribed in Section 4. For example, the drop set can be com-
pared with information gathered with ITRACE in an effort
to adjust the congestion signature so as to reduce the amount
of trafﬁc being penalized (‘poor’ and ‘good’ trafﬁc). More-
over, a good map of the network with reliable historical
trafﬁc proﬁles from traces can be used to determine sud-
den changes in trafﬁc proﬁles that could signal an attack, or
help determine how to best allocate rate limits in pushback
messages.
6. Summary and Future Work
We presented the implementation of a mechanism that
treats Distributed Denial of Service attacks as a congestion-
control problem, and acts by identifying and preferentially
dropping trafﬁc aggregates responsible for such congestion.
The purpose of this work is twofold; to show the practical-
ity of such an approach, and to explore ways of deploying
it incrementally in an operational environment. We already
know from simulations[14] that Pushback is a promising
way of combating DDoS attacks and ﬂash crowds. There
are some aspects that are easy to simulate, but real code
running on real machines allows us to explore the details
of a real system. We also needed to see how much memory
and computing power is needed to actually run Pushback, in
the hope of inﬂuencing commercial router designers toward
implementing Pushback in their code. A promising hybrid
solution, which we plan to investigate over the next few
months, is to use features such as the Committed Access
Rate[4] in cisco R(cid:13) routers to implement the rate-limiting,
while snifﬁng trafﬁc on both incoming and outgoing links
of each router to detect congestion and dropped packets,
even if the router itself cannot report those. Such experi-
ments may allow rapid deployment of Pushback even in the
absence of explicit support from router vendors.
Acknowledgments
The original idea for Pushback came from an informal
DDoS research group consisting of Steven M. Bellovin,
Matt Blaze, Bill Cheswick, Cory Cohen, Jon David, Jim
Duncan, Jim Ellis, Paul Ferguson, John Ioannidis, Marcus
Leech, Perry Metzger, Robert Stone, Vern Paxson, Ed Viel-
metti, and Wietse Venema. A recent paper [14] presents the
theoretical basis and detailed simulation results upon which
this work has been based. We also thank the anonymous
reviewers for many valuable and insightful comments.
References
[1] S. M. Bellovin.
ICMP Traceback Messages. Work in
Progress, Internet Draft draft-bellovin-itrace-00.txt, March
2000.
[2] S. Blake, D. L. Black, M. A. Carlson, E. Davies, Z. Wang,
and W. Weiss. An Architecture for Differentiated Services.
RFC 2475, December 1998.
[3] H. Burch and B. Cheswick. Tracing Anonymous Packets
In Usenix LISA, December
to Their Approximate Source.
2000.
[4] Cisco Web
Pages:
Committed Access Rate.
http://www.cisco.com / univercd / cc / td / doc / prod-
uct / software / ios111 / cc111 / car.htm, February 1998.
[5] D. D. Clark, S. Shenker, and L. Zhang. Supporting Real-
Time Applications in an Integrated Services Packet Network
Architecture and Mechanism. In ACM SIGCOMM, 1992.
[6] D. Dean, M. Franklin, and A. Stubbleﬁeld. An Algebraic
In Proceedings of NDSS ’01,
Approach to IP Traceback.
February 2001.
[7] A. Demers, S. Keshav, and S. Shenker. Analysis and Simu-
lation of a Fair Queueing Algorithm. In ACM SIGCOMM,
1989.
[8] The FreeBSD Project. http://www.freebsd.org.
[9] P. Ferguson and D. Senie. Network Ingress Filtering: De-
feating Denial of Service Attacks which employ IP Source
Address Spooﬁng. RFC 2267, January 1998.
[10] S. Floyd, S. Bellovin, J. Ioannidis, K. Kompella, R. Maha-
jan, and V. Paxson. Pushback Messages for Controlling Ag-
gregates in the Network. Internet Draft, work in progress.
[11] S. Floyd and V. Jacobson. Random Early Detection gate-
ways for Congestion Avoidance. IEEE/ACM Transactions
on Networking, Vol. 1(4):pp. 397–413, August 1993.
[12] S. Floyd and V. Jacobson. Link-sharing and Resource Man-
agement Models for Packet Networks. IEEE/ACM Transac-
tions on Networking, Vol. 3(4):pp. 365–386, August 1995.
[13] R. Mahajan, S. M. Bellovin, S. Floyd, J. Ioannidis, V. Pax-
son, and S. Shenker. Controlling High Bandwidth Aggre-
gates in the Network. Submitted to Computer Communica-
tions Review.
[14] R. Mahajan, S. M. Bellovin, S. Floyd,
J. Ioannidis,
Controlling High Band-
V. Paxson, and S. Shenker.
width Aggregates in the Network – Extended Version.
http://www.aciri.org/pushback/.
[15] D. Moore, G. M. Voelker, and S. Savage. Inferring Internet
Denial-of-Service Activity. In 10th Usenix Security Sympo-
sium, August 2001.
[16] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practi-
cal Network Support for IP Traceback. In ACM SIGCOMM,
August 2000.
[17] D. Schnackenberg, K. Djahandari,
for
and D. Sterne.
intrustion detection and response.
the DARPA Information Surviv-
2000, March
and Exposition
ftp://ftp.tislabs.com/pub/IDIP/DISCEX IDR-
Infrastructure
In Proceedings of
ability Conference
2000.
Infrastructure.pdf.
[18] R. Stone. CenterTrack: An IP Overlay Network for Track-
ing DoS Floods. In 9th Usenix Security Symposium, August
2000.
[19] V. C. Van. A Defense Against Address Spooﬁng Using Ac-
tive Networks. Batchelor’s Thesis, MIT, 1997.