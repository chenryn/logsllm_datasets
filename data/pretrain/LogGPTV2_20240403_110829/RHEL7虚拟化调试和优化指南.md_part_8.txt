`-m`{.option}
可将每个节点上系统范围内的内存信息添加到输出。更多信息请参见
`numastat`{.command} 手册页。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-VCPU_Pinning}8.4.1. NUMA 虚拟 CPU 钉选 {.title}
:::
::: para
虚拟 CPU 钉选为裸机系统中的任务钉选提供了相似的优点。由于虚拟 CPU
在主机操作系统中作为用户空间任务运行，钉选将提高缓存效率。例如，当所有虚拟
CPU 线程都在同一个物理 socket 中运行时，将会共享 L3 缓存域。
:::
::: para
合并虚拟 CPU 钉选和 `numatune`{.command} 可以避免 NUMA 缺失。NUMA
缺失会对性能带来显著影响，通常会有至少 10% 或更多的性能损失。虚拟 CPU
钉选和 `numatune`{.command} 应该同时配置。
:::
::: para
当虚拟机在执行存储或网络 I/O 任务时，最好将所有的虚拟 CPU
和内存固定至同一个连接到 I/O 适配器的物理 socket。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
[**lstopo**]{.application} 工具可以被用作使 NUMA
拓扑可视化。同时还可以用作验证虚拟 CPU
在同一个物理插槽中的内核绑定。更多信息请参照知识库文章，链接如下：[**lstopo**]{.application}:
。
:::
:::
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
在虚拟 CPU 的数量远多于物理内核时，钉选将导致复杂性增加。
:::
:::
:::
::: para
以下示例 XML 配置具有固定在物理 CPU 0-7
上的域过程。虚拟线程固定在其自身的 cpuset 上。例如，虚拟 CPU0 被固定在
物理 CPU 0 上，虚拟 CPU1 被固定在物理 CPU 1 上等等：
:::
``` programlisting
8
```
::: para
虚拟 CPU 与 vcpupin 标签之间有直接的联系。如果 vcpupin
选项不是确定的，那么属性值会被自动指定并会从上一级虚拟 CPU
标签选项中继承。以下配置显示了因为 [**vcpu 5**]{.bold .bold} 丢失的
``{.code} 。进而，[**vCPU5**]{.bold .bold} 将会被固定在物理 CPU
0-7 上，正如上一级标签 ``{.code} 中指定的那样：
:::
``` programlisting
8
```
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
``{.code}、``{.code} 以及 ``{.code}
应该被一同配置，从而实现优化、确定的性能。更多关于 ``{.code}
标签的信息，请查看[第 8.4.2 节
"域进程"](#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-NUMA_and_libvirt-Domain_Processes){.xref}。更多关于
``{.code} 标签的信息，请参照[第 8.4.4 节 "使用
emulatorpin"](#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-NUMA_and_libvirt-Using_emulatorpin){.xref}。
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-NUMA_and_libvirt-Domain_Processes}8.4.2. 域进程 {.title}
:::
::: para
如 Red Hat Enterprise Linux 所提供的那样，libvirt 使用 libnuma
来为域进程设定内存绑定政策。这些政策的节点集可以作为
[*static*]{.emphasis}（在域 XML 中指定），或 [*auto*]{.emphasis}
（通过询问 numad 进行配置）进行配置。关于如何配置这些
``{.code} 标签内部的示例，请参考以下 XML 配置：
:::
``` programlisting
```
``` programlisting
```
::: para
libvirt 使用 [**sched_setaffinity(2)**]{.bold .bold} 来为域进程设定 CPU
绑定政策。cpuset 选项既可以是 [*static*]{.emphasis} （静态；在域 XML
中指定），也可以是 [*auto*]{.emphasis} （自动；通过询问 numad
进行配置）。关于如何配置这些 ``{.code} 标签内部的示例，请参考以下
XML 配置：
:::
``` programlisting
8
```
``` programlisting
8
```
::: para
在 ``{.code} 所使用的放置模式和 ``{.code}
之间有隐式的继承规则：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    ``{.code} 的放置模式默认为与 ``{.code}
    相同的放置模式，当 ``{.code} 被指定时，则被默认为
    *static*。
    :::
-   ::: para
    同样，``{.code} 的放置模式默认为与 ``{.code}
    相同的放置模式，当 ``{.code} 被指定时，则被默认为 *static*。
    :::
:::
::: para
这意味着为了域进程而进行的 CPU
调试和内存调试可以被单独指定和定义，但是它们也可以在依赖其他放置模式的情况下进行配置。
:::
::: para
也有一种可能，即通过 numad 来配置您的系统，可以启动选定数量的虚拟
CPU，并且在启动时不需要固定到所有的虚拟 CPU。
:::
::: para
例如，通过 32 个虚拟 CPU 使仅有的 8 个虚拟 CPU 在一个系统中启动，配置
XML 方式与如下方式类似：
:::
``` programlisting
32
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
更多关于虚拟 CPU 和 numatune 的信息请参照以下网址：
 和
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-NUMA_and_libvirt-Domain_vcpu_threads}8.4.3. 域虚拟 CPU 线程 {.title}
:::
::: para
除了调试域进程，libvirt 还允许 XML 配置中每个虚拟 CPU
线程的钉选策略设置。设置 ``{.code} 标签内部每个虚拟 CPU
线程的钉选策略：
:::
``` programlisting
```
::: para
在这个标签中，libvirt 可以使用 cgroup 或
[**sched_setaffinity(2)**]{.bold .bold}，使虚拟 CPU 线程固定在指定的
cpuset 中。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
更多关于 ``{.code} 的信息，请参照以下网址：
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-NUMA_and_libvirt-Using_emulatorpin}8.4.4. 使用 emulatorpin {.title}
:::
::: para
调试域进程钉选策略的另一个方法是使用 ``{.code} 中的
``{.code} 标签。
:::
::: para
``{.code} 标签指定了
[*emulator*]{.emphasis}（一个域的子集，不包括虚拟
CPU）将被固定的主机物理 CPU。``{.code}
标签提供了一个将精确关联设定成仿真线程进程的方法。因此，vhost
线程在同一个物理 CPU 和内存子集中运行，从而可以从缓存位置获益。例如：
:::
``` programlisting
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在 Red Hat Enterprise Linux 7 中，默认启用自动化 NUMA 平衡。随着
vhost-net 仿真线程能够更加可靠地跟随虚拟 CPU 任务，自动化 NUMA
平衡减少了手动调试 ``{.code} 的需要。关于自动化 NUMA
平衡的更多信息，请参照[第 8.3 节 "自动化 NUMA
平衡"](#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-Auto_NUMA_Balancing){.xref}。
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-NUMA_and_libvirt-vcpu_pinning_with_virsh}8.4.5. 用 virsh 调试 vcpu CPU 钉选 {.title}
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
这些只是示例命令。您需要依据环境替换属性值。
:::
:::
:::
::: para
以下示例 `virsh`{.command} 命令会将 ID 为 1 的虚拟 CPU
线程（*rhel7*）固定到物理 CPU 2。
:::
``` screen
% virsh vcpupin rhel7 1 2
```
::: para
您也可以通过 `virsh`{.command} 命令获得当前虚拟 CPU 的钉选配置。例如：
:::
``` screen
% virsh vcpupin rhel7
```
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-NUMA_and_libvirt-domain_cpu_pinning_with_virsh}8.4.6. 用 virsh 调试域进程 CPU 钉选 {.title}
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
这些只是示例命令。您需要依据环境替换属性值。
:::
:::
:::
::: para
`emulatorpin`{.option} 选项将 CPU
关联设置应用到与每个域进程关联的线程。为了完全固定，您必须给每个客机同时使用
`virsh vcpupin`{.command}（如之前所展示的）和
`virsh emulatorpin`{.command}。例如：
:::
``` screen
% virsh emulatorpin rhel7 3-4
```
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-NUMA_and_libvirt-memory_policy_with_virsh}8.4.7. 用 virsh 调试域进程内存策略 {.title}