.rodata:080185AC                     dd  0 
... 
.rodata:08019570                     dd  offset _2__STRING_11378_0 ; "select BANNER from GV$VERSION  
       where in "... 
.rodata:08019574                     dd  offset kqfv133_c_0 
.rodata:08019578                     dd  0 
.rodata:0801957C                     dd  0 
.rodata:08019580                     dd  offset _2__STRING_11379_0 ; "select inst_id,decode(bitand(  
      cfflg,1),0"... 
.rodata:08019584                     dd  offset kqfv403_c_0 
.rodata:08019588                     dd  0 
.rodata:0801958C                     dd  0 
.rodata:08019590                     dd  offset _2__STRING_11380_0 ; "select STATUS , NAME,  
      IS_RECOVERY_DEST"... 
.rodata:08019594                     dd  offset kqfv199_c_0 
这个表的每个元素由 4 个字段构成。而且它同样包含了 1023 个元素。第二个字段指向了另一个表——也就
是与表名称相对应的固定视图。V$VERSION 的表格只有 2 个元素，第一个是 6（后面字符串的长度），第二
个是 BANNER 字符串。此后是终止符—零字节和 C 语言字符 null。 
指令清单 81.3  kqf.o 
.rodata:080BBAC4 kqfv133_c_0       dd  6                            ; DATA XREF: .rodata:08019574 
.rodata:080BBAC8                     dd  offset _2__STRING_5017_0 ; "BANNER" 
.rodata:080BBACC                     dd  0 
.rodata:080BBAD0                     dd  offset _2__STRING_0_0 
因此可见，综合 kqfviw 和 kqfvip 表的各项信息，我们可以获悉某个固定视图都含有哪些可被查询的
字段。 
基于上述分析结果，笔者编写了一个专门导出Linux Oracle数据库系统表的小程序—oracle_tables
①
① http://yurichev.com/oracle_tables.html。 
。
用它导出V$VERSION时，可得到如下所示的各项信息。 
指令清单 81.4  Result of oracle tables 
kqfviw_element.viewname: [V$VERSION] ?: 0x3 0x43 0x1 0xffffc085 0x4 
kqfvip_element.statement: [select  BANNER from GV$VERSION where inst_id = USERENV('Instance')] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
800 
逆向工程权威指南（下册） 
kqfvip_element.params: 
[BANNER] 
指令清单 81.5  Result of oracle tables 
kqfviw_element.viewname: [GV$VERSION] ?: 0x3 0x26 0x2 0xffffc192 0x1 
kqfvip_element.statement: [select inst_id, banner from x$version] 
kqfvip_element.params: 
[INST_ID] [BANNER] 
固定视图 GV$VERSION 比 V$VERSION 多出了一个“instance”字段，除此以外两者相同。因此，我们
只要专心研究数据表 X$VERSION 就可举一反三地理解另一个表。与其他名字以 X$-开头的数据表一样，
这个表也没有资料可查。但是，我们可以直接对其进行检索： 
SQL> select * from x$version; 
ADDR              INDX      INST_ID 
--------  ----------  ---------- 
BANNER 
-------------------------------------------------------------------------------- 
0DBAF574            0            1 
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production 
... 
这个表的字段名里有 ADDR 和 INDX。 
继续使用 IDA 分析 kqf.o 的时候，我们会发现在 kqftab 表里有一个指向 X$VERSION 字符串的指针。 
指令清单 81.6  kqf.o 
.rodata:0803CAC0                    dd  9                        ; element number 0x1f6 
.rodata:0803CAC4                    dd  offset _2__STRING_13113_0 ; "X$VERSION" 
.rodata:0803CAC8                    dd  4 
.rodata:0803CACC                    dd  offset _2__STRING_13114_0 ; "kqvt" 
.rodata:0803CAD0                    dd  4 
.rodata:0803CAD4                    dd  4 
.rodata:0803CAD8                    dd  0 
.rodata:0803CADC                    dd  4 
.rodata:0803CAE0                    dd  0Ch 
.rodata:0803CAE4                    dd  0FFFFC075h 
.rodata:0803CAE8                    dd  3 
.rodata:0803CAEC                    dd  0 
.rodata:0803CAF0                    dd  7 
.rodata:0803CAF4                    dd  offset _2__STRING_13115_0 ; "X$KQFSZ" 
.rodata:0803CAF8                    dd  5 
.rodata:0803CAFC                    dd  offset _2__STRING_13116_0 ; "kqfsz" 
.rodata:0803CB00                    dd  1 
.rodata:0803CB04                    dd  38h 
.rodata:0803CB08                    dd  0 
.rodata:0803CB0C                    dd  7 
.rodata:0803CB10                    dd  0 
.rodata:0803CB14                    dd  0FFFFC09Dh 
.rodata:0803CB18                    dd  2 
.rodata:0803CB1C                    dd  0 
上述指令中有很多处数据都引用了以 X$-开头的数据表名称。很显然，这些名字都是 Oracle 数据库的
数据表名称。鉴于公开资料没有这些信息，笔者还不能理解字符串“kqvt”的实际含义。“kq-”前缀的指
令，多数是与 Kernel（内核）和 query（查询）有关的指令。不过，至于“v 是否是 version 的缩写”、“t 是
否是 type 的缩写”，这些猜测都无法证明。 
另外，kqf.o 文件里还记录了类似的数据表名称。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 81 章 Oracle RDBMS 
801 
指令清单 81.7  kqf.o 
.rodata:0808C360 kqvt_c_0           kqftap_param  
.rodata:0808C360                                                   ; DATA XREF: .rodata:08042680 
.rodata:0808C360                                                   ; "ADDR" 
.rodata:0808C384                      kqftap_param ;"INDX" 
.rodata:0808C3A8                      kqftap_param ;"INST_ID" 
.rodata:0808C3CC                      kqftap_param  ; "BANNER" 
.rodata:0808C3F0   
    kqftap_param  
这些信息可以解释 X$VERSION 表中的所有字段。在 kqftap 表中，唯一一个引用这个表的指令如下所示。 
指令清单 81.8  kqf.o 
.rodata:08042680   
kqftap_element  ;  
       element 0x1f6 
值得关注的是，这个元素是表中第 502 个（0x1f6）元素。它就像 kqftab 表中指向 X$VERSION 字符串
的指针一般。数据表 kqftap 和 kqftab 之间的关系，很可能像 kqfvip 和 kqfviw 之间的关系那样是某种互补
关系。我们还在其中找到了指向 kqvrow() 函数的函数指针。我们最终挖掘到了有价值的信息！ 
笔者把上述各表的有关信息也添加到了自制的oracle系统表查询工具—oracle_tables里
①
① http://yurichev.com/oracle_tables.html。 
。用它检索
X$VERSION后，可得如下所示的各项信息。 
指令清单 81.9  Result of oracle tables 
kqftab_element.name: [X$VERSION] ?: [kqvt] 0x4 0x4 0x4 0xc 0xffffc075 0x3 
kqftap_param.name=[ADDR] ?: 0x917 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[INDX] ?: 0xb02 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[INST_ID] ?: 0xb02 0x0 0x0 0x0 0x4 0x0 0x0 
kqftap_param.name=[BANNER] ?: 0x601 0x0 0x0 0x0 0x50 0x0 0x0 
kqftap_element.fn1=kqvrow 
kqftap_element.fn2=NULL 
借助笔者自创的 tracer 程序，我们不难发现：在查询 X$VERSION 表时，这个函数被连续调用了 6 次
（由 qerfxFetch() 函数）。 
为了查看具体执行了哪些指令，我们以 cc 模式运行 tracer 程序： 
tracer -a:oracle.exe bpf=oracle.exe!_kqvrow,trace:cc 
_kqvrow_   proc near 
var_7C     = byte ptr -7Ch 
var_18     = dword ptr -18h 
var_14     = dword ptr -14h 
Dest        = dword ptr -10h 
var_C       = dword ptr -0Ch 
var_8      = dword ptr -8 
var_4      = dword ptr -4 
arg_8      = dword ptr  10h 
arg_C      = dword ptr  14h 
arg_14     = dword ptr  1Ch 
arg_18     = dword ptr  20h 
; FUNCTION CHUNK AT .text1:056C11A0 SIZE 00000049 BYTES 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
802 
逆向工程权威指南（下册） 
            push    ebp 
            mov 
   ebp, esp 
            sub 
   esp, 7Ch 
            mov 
   eax, [ebp+arg_14] ; [EBP+1Ch]=1 
            mov 
   ecx, TlsIndex    ; [69AEB08h]=0 
            mov 
   edx, large fs:2Ch 
            mov 
   edx, [edx+ecx*4] ; [EDX+ECX*4]=0xc98c938 
            cmp 
   eax, 2            ; EAX=1 
            mov 
   eax, [ebp+arg_8] ; [EBP+10h]=0xcdfe554 
            jz 
   loc_2CE1288 
            mov 
   ecx, [eax]       ; [EAX]=0..5 
            mov 
   [ebp+var_4], edi ; EDI=0xc98c938 
loc_2CE10F6:  ; CODE XREF: _kqvrow_+10A 
                 ; _kqvrow_+1A9 
            cmp       ecx, 5            ; ECX=0..5 
            ja        loc_56C11C7 
            mov       edi, [ebp+arg_18] ; [EBP+20h]=0 
            mov       [ebp+var_14], edx ; EDX=0xc98c938 
            mov       [ebp+var_8], ebx ; EBX=0 
            mov       ebx, eax          ; EAX=0xcdfe554 
            mov       [ebp+var_C], esi ; ESI=0xcdfe248 
loc_2CE110D: ; CODE XREF: _kqvrow_+29E00E6 
            mov      edx, ds:off_628B09C[ecx*4] ; [ECX*4+628B09Ch]= 0x2ce1116, 0x2ce11ac, 0x2ce11db  
      , 0x2ce11f6, 0x2ce1236, 0x2ce127a 
            jmp       edx                ; EDX=0x2ce1116, 0x2ce11ac, 0x2ce11db, 0x2ce11f6, 0x2ce1236,  
      0x2ce127a 
loc_2CE1116: ; DATA XREF: .rdata:off_628B09C 
            push     offset aXKqvvsnBuffer ; "x$kqvvsn buffer" 
            mov       ecx, [ebp+arg_C] ; [EBP+14h]=0x8a172b4 
            xor       edx, edx 
            mov       esi, [ebp+var_14] ; [EBP-14h]=0xc98c938 
            push      edx                ; EDX=0 
            push      edx                ; EDX=0 
            push      50h 
            push      ecx                ; ECX=0x8a172b4 
            push      dword ptr [esi+10494h] ;[ESI+10494h]=0xc98cd58 
            call      _kghalf           ; tracing nested maximum level (1) reached, skipping this  
     CALL 
            mov       esi, ds:__imp__vsnnum ; [59771A8h]=0x61bc49e0 
            mov       [ebp+Dest], eax ; EAX=0xce2ffb0 
            mov       [ebx+8], eax     ; EAX=0xce2ffb0 
            mov       [ebx+4], eax     ; EAX=0xce2ffb0 
            mov       edi, [esi]        ; [ESI]=0xb200100 
            mov       esi, ds:__imp__vsnstr ; [597D6D4h]=0x65852148, "- Production" 
            push      esi                ; ESI=0x65852148, "- Production" 
            mov       ebx, edi          ; EDI=0xb200100 
            shr       ebx, 18h          ; EBX=0xb200100 
            mov       ecx, edi          ; EDI=0xb200100 
            shr       ecx, 14h          ; ECX=0xb200100 
            and       ecx, 0Fh          ; ECX=0xb2 
            mov       edx, edi          ; EDI=0xb200100 
            shr       edx, 0Ch          ; EDX=0xb200100 
            movzx     edx, dl           ; DL=0 
            mov       eax, edi          ; EDI=0xb200100 
            shr       eax, 8             ; EAX=0xb200100 
            and       eax, 0Fh          ; EAX=0xb2001 
            and       edi, 0FFh         ; EDI=0xb200100 
            push      edi                ; EDI=0 
            mov       edi, [ebp+arg_18] ; [EBP+20h]=0 
            push      eax                ; EAX=1 
            mov       eax, ds:__imp__vsnban ; [597D6D8h]=0x65852100, "Oracle Database 11g  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 81 章 Oracle RDBMS 
803 
      Enterprise Edition Release %d.%d.%d.%d.%d %s" 
            push     edx               ;  EDX=0 
            push     ecx               ;  ECX=2 
            push     ebx               ;  EBX=0xb 
            mov       ebx, [ebp+arg_8] ; [EBP+10h]=0xcdfe554 
            push     eax               ; EAX=0x65852100, "Oracle Database 11g Enterprise Edition  
      Release %d.%d.%d.%d.%d %s" 
            mov      eax, [ebp+Dest] ; [EBP-10h]=0xce2ffb0 
            push     eax                ; EAX=0xce2ffb0 
            call     ds:__imp__sprintf ; op1=MSVCR80.dll!sprintf tracing nested maximum level (1)  
      reached, skipping this CALL 
            add      esp, 38h 
            mov      dword ptr [ebx], 1 
loc_2CE1192: ; CODE XREF: _kqvrow_+FB 
                ; _kqvrow_+128 ... 
            test     edi, edi          ; EDI=0 
            jnz      __VInfreq__kqvrow 
            mov      esi, [ebp+var_C] ; [EBP-0Ch]=0xcdfe248 
            mov      edi, [ebp+var_4] ; [EBP-4]=0xc98c938 
            mov      eax, ebx          ; EBX=0xcdfe554 
            mov      ebx, [ebp+var_8] ; [EBP-8]=0 
            lea      eax, [eax+4]     ; [EAX+4]=0xce2ffb0, "NLSRTL Version 11.2.0.1.0 – Production  
      ", "Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production", "PL/SQL  
      Release 11.2.0.1.0 - Production", "TNS for 32-bit Windows: Version 11.2.0.1.0 -  
      Production" 
loc_2CE11A8: ; CODE XREF: _kqvrow_+29E00F6 
            mov      esp, ebp 
            pop      ebp 
            retn                        ; EAX=0xcdfe558 
loc_2CE11AC: ; DATA XREF: .rdata:0628B0A0 
             mov      edx, [ebx+8]     ; [EBX+8]=0xce2ffb0, "Oracle Database 11g Enterprise Edition  
      Release 11.2.0.1.0-  Production" 
             mov      dword ptr [ebx], 2 
             mov      [ebx+4], edx     ; EDX=0xce2ffb0, "Oracle Database 11g Enterprise Edition  
      Release 11.2.0.1.0 - Production" 
             push     edx                ; EDX=0xce2ffb0, "Oracle Database 11g Enterprise Edition  
      Release 11.2.0.1.0 - Production" 
             call     _kkxvsn           ; tracing nested maximum level (1) reached, skipping this  
      CALL 
            pop      ecx 
            mov      edx, [ebx+4]     ; [EBX+4]=0xce2ffb0, "PL/SQL Release 11.2.0.1.0 - Production" 
            movzx    ecx, byte ptr [edx]  ; [EDX]=0x50 
            test     ecx, ecx          ; ECX=0x50 
            jnz      short loc_2CE1192 
            mov      edx, [ebp+var_14] 
            mov      esi, [ebp+var_C] 
            mov      eax, ebx 
            mov      ebx, [ebp+var_8] 
            mov      ecx, [eax] 
            jmp      loc_2CE10F6 
loc_2CE11DB: ; DATA XREF: .rdata:0628B0A4 
            push     0 
            push     50h 
            mov      edx, [ebx+8]     ; [EBX+8]=0xce2ffb0, "PL/SQL Release 11.2.0.1.0 - Production" 
            mov      [ebx+4], edx     ; EDX=0xce2ffb0,"PL/SQL Release 11.2.0.1.0 - Production" 
            push     edx                ; EDX=0xce2ffb0, "PL/SQL Release 11.2.0.1.0 - Production" 
            call     _lmxver           ; tracing nested maximum level (1) reached, skipping this  
      CALL 
            add      esp, 0Ch 
            mov      dword ptr [ebx], 3 
            jmp      short loc_2CE1192 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
804 
逆向工程权威指南（下册） 
loc_2CE11F6: ; DATA XREF: .rdata:0628B0A8 
            mov      edx, [ebx+8]     ; [EBX+8]=0xce2ffb0 
            mov      [ebp+var_18], 50h 
            mov      [ebx+4], edx     ; EDX=0xce2ffb0 
            push     0 
            call     _npinli           ; tracing nested maximum level (1)reached, skipping this  
      CALL 
            pop      ecx 
            test     eax, eax          ; EAX=0 
            jnz      loc_56C11DA 
            mov      ecx, [ebp+var_14] ; [EBP-14h]=0xc98c938 
            lea      edx, [ebp+var_18] ; [EBP-18h]=0x50 
            push     edx                ; EDX=0xd76c93c 
            push     dword ptr [ebx+8] ; [EBX+8]=0xce2ffb0 
            push     dword ptr [ecx+13278h] ; [ECX+13278h]=0xacce190 
            call     _nrtnsvrs         ; tracing nested maximum level (1) reached, skipping this  
      CALL 
            add      esp, 0Ch 
loc_2CE122B: ; CODE XREF: _kqvrow_+29E0118 
            mov      dword ptr [ebx], 4 
            jmp      loc_2CE1192 
loc_2CE1236: ; DATA XREF: .rdata:0628B0AC 
            lea      edx, [ebp+var_7C] ; [EBP-7Ch]=1 
            push     edx                ; EDX=0xd76c8d8 
            push     0 
            mov      esi, [ebx+8]     ; [EBX+8]=0xce2ffb0, "TNS for 32-bit Windows: Version  
      11.2.0.1.0 - Production" 
            mov      [ebx+4], esi     ; ESI=0xce2ffb0, "TNS for 32-bit Windows: Version 11.2.0.1.0  
      - Production" 
            mov      ecx, 50h 
            mov      [ebp+var_18],  ecx ; ECX=0x50 
            push     ecx                ; ECX=0x50 
            push     esi                ; ESI=0xce2ffb0, "TNS for 32-bit Windows: Version 11.2.0.1.0  
      - Production" 
            call     _lxvers             ; tracing nested maximum level (1) reached, skipping this  
      CALL 
            add      esp, 10h 