title:Knock Yourself Out: Secure Authentication with Short Re-Usable Passwords
author:Benjamin G&quot;uldenring and
Volker Roth and
Lars Ries
Knock Yourself Out:
Secure Authentication with Short Re-Usable
Passwords
Benjamin G¨uldenring, Volker Roth and Lars Ries
Computer Science
Freie Universit¨at Berlin
Germany
Abstract—We present Knock Yourself Out (KYO), a pass-
word generator that enables secure authentication against a
computationally unbounded adversary. Master passwords can
be surprisingly short and may be re-used for multiple service
accounts even in the event of client compromises and multiple
server compromises. At the same time, KYO is transparent to
service operators and backwards-compatible. Master passwords
are fully client-manageable while secrets shared with service
operators can be kept constant. Likewise, secrets can be changed
without having to change one’s passwords. KYO does not rely on
collision-resistant hash functions and can be implemented with
fast non-cryptographic hash functions. We detail the design of
KYO and we analyze its security mathematically in a random
hash function model. In our empirical evaluation we ﬁnd that
KYO remains secure even if small sets of hash functions are
used instead, in other words, KYO requires minimal storage and
is highly practical.
I.
INTRODUCTION
Authenticating oneself to another party over a computer
network is a fundamental security goal, and passwords are
a pervasive mechanism to accomplish that goal. Passwords
steadfastly resist being outmoded by other authentication
technologies even though they are associated with bad security
and bad usability. Common wisdom says that users must choose
long passwords randomly for best security. Furthermore, users
must not re-use passwords across different services or else
one breach of a service may leak passwords that adversaries
use to breach additional accounts. This is a realistic threat as
the public press can testify. However, users cannot remember
reliably many different secure passwords because of a variety of
cognitive limitations and hence they tend to engage in insecure
password practices. For example Florenˆcio et al. [9] found
that the average password is used at 4 sites. Bonneau and
Preibusch [5] pointed out that after apparent improvements in
password quality between the 70’s and 90’s, the web appears
to have altered that trend again for worse.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23261
In our paper, we propose means to signiﬁcantly enhance the
security and usability of password security mechanisms against
security breaches. Speciﬁcally, we address the following two
risks associated with password mechanisms simultaneously.
1) An adversary obtains a copy of a user’s personal password
database and uses the information to log into that user’s
accounts. We call this a client breach.
2) An adversary obtains a copy of a server’s password
database and uses the information to log into accounts on
other servers. We call this a server breach.
As this is done in related work (see section VII), we assume that
the integrity of clients and servers has not been compromised,
for example, by installing a key logger that intercepts entry of a
master password. We do not address the risk that an adversary
obtains a copy of a server’s password database and uses the
information to log into accounts on that same server. Instead,
we discuss in Section VII how related work attempts to mitigate
this risk under varying assumptions and how they blend with
our proposals.
Existing work has addressed client breaches and server
breaches largely in isolation, sometimes using similar mech-
anisms. For example, decoy passwords have been proposed
as a means to trigger false login detection at servers in the
case of client [4] and server [14] breaches. Although, no work
we are aware of has addressed the case that passwords are
shared among accounts and multiple password databases are
breached. For example, intersecting two databases with decoy
passwords quickly reveals all shared passwords and ﬁlters
out decoys with high probability. This yields passwords that
adversaries can potentially use to log onto ﬁrst-party servers
(breached) and third-party servers (not breached). Furthermore,
the protection mechanisms proposed thus far have notable
costs associated with them, for example, increased memory
requirements [4], [14], [7], increased interactions and login
latency [16], delayed veriﬁcation [6] and varying amounts of
required server changes [14], [16], [6]. Even key stretching [15]
consumes energy that largely goes to waste, which is a best
practice most password mechanism rely on in order to counter
ofﬂine attacks. Lastly, none of these proposals introduce more
user-friendly password choices.
In this paper, we propose Knock Yourself Out (KYO), a
novel client-side password generator mechanism that mitigates
the risks of simultaneous breaches of clients and multiple
servers. The master password can be as short as four characters,
and 10 characters if security against the breach of the password
client and three servers is desired. Passwords can be re-used,
that is, a client need only remember one master password.
At the same time, KYO is fully client-manageable, that is,
server-speciﬁc secrets can be changed without changing the
master password, and the master password can be changed
without affecting server secrets. KYO incurs no additional costs
over na¨ıve state of the art password mechanisms and it can
be instantiated with fast non-cryptographic hash functions and
without key stretching. We prove KYO secure in an information-
theoretic setting, that is, in a random hash function model
against unbounded adversaries. KYO is backwards-compatible
with existing server implementations. In order to achieve its best
security and usability product, KYO requires that servers are
conﬁgured to lock accounts upon the ﬁrst false login attempt.
KYO veriﬁes passwords locally and prevents false logins.
In what follows, we further detail our assumptions and threat
model, followed by an overview over KYO’s design, properties
and features. Subsequently, we evaluate KYO mathematically
in a random hash function model and we brieﬂy point out
the impact of moving from a random hash function to smaller
sets of functions. In our subsequent empirical exploration, we
ﬁnd that even small sets of functions exhibit the necessary
and sufﬁcient properties we require. Based on our theoretical
analysis, we estimate the salient properties of KYO, for example,
the relationships between password length and the number
of client and server breaches against which passwords shall
be secure. We discuss obvious and less obvious application
areas for KYO, compare KYO to related work and end with
conclusions and an outlook of what kind of future work we
deem most exciting.
II. ASSUMPTIONS AND THREAT MODEL
For ease of description we assume throughout the paper
that Alice communicates with Bob, Carol and David. One may
think of Alice as a user with a client computer, and of Bob,
Carol and Dave as servers. Alice shares a secret with Bob, and
another one with Carol, and another one with David. KYO
allows Alice to generate all of her shared secrets based on a
single password, if she so desires. For the sake of generality,
we consider the scenario that Alice wishes to use one password
for Bob and a different one for Carol and David. More formally,
let ρ1, ρ2 be Alice’s passwords, let γ1 . . . , γ3 be the secrets
that Alice shares with the other parties and let σA→B be a seed
Alice uses to generate the secret she shares with Bob. Let F
be the generator function, then:
γ1 = FσA→B (ρ1)
γ2 = FσA→C (ρ2)
γ3 = FσA→D (ρ2)
This will be our running example. Alice authenticates herself
to Bob by presenting γ1 to Bob in a fashion that assures that
the presentation is fresh and that γ1 is not revealed to outside
parties. In practice, Alice may connect to Bob using a TLS
connection, Bob authenticates itself to Alice based on a valid
X.509v3 certiﬁcate, and Alice transmits her shared secret to
Bob in order to authenticate herself to Bob. All parties store
their seeds and corresponding identities.
A. Power of the adversary
The adversary may compromise any number of the parties,
for example, Alice, Bob and Carol. We assume that none of the
compromised parties store their passwords, and that they do not
enter their passwords following a compromise. This means that,
for example, the adversary learns all secrets Bob shares with
Alice, and all seeds Alice stores, but not the password of Alice.
Furthermore, we assume that the adversary is computationally
unbounded, that is, he can compute as much as he likes.
The risks we outlined encompass a wide variety of actual
risks to which Alice may expose herself. For example: Alice
looses her laptop, someone seizes or steals her laptop, or
someone compromises one or multiple services that Alice uses
and steals any available secret information on the users of the
service.
B. Security and safety objectives
We say that an adversary succeeds if he authenticates
himself as Alice to an uncompromised party. Depending on
which parties the adversary compromises and how many of
them, we seek to make statements of the form the success
probability of
the adversary is , where  is a concrete
probability based on some choice of security parameters. We
will call the probability  insecurity and accordingly 1 − 
security.
In an analoguous fashion, we wish to make statements
about the safety of password entry. Jumping slightly ahead,
KYO veriﬁes correct password entry locally. Therefore, one
might assume that Alice, the user, has an inﬁnite number of
tries and, consequently, Bob will never lock out Alice because
Alice only submits correct secrets to him. However, if Alice
has an inﬁnite number of tries then an adversary who breaches
the client can brute-force the mechanism ofﬂine. Since we
wish to provide security against client breaches, we cannot
allow this to happen. For this reason, KYO takes a different
approach and as a consequence there exists a probability δ with
which KYO accepts a false password as correct. In this case,
KYO will produce a wrong secret and Bob will lock Alice out.
Hence, security determines an upper bound on safety. In our
mathematical analysis, we show how to control  and δ. In our
writing, we refer to δ as insafety and to 1 − δ as safety.
C. Baseline security
Eventually, we must choose concrete parameters and these
parameters determine the actual security and safety of KYO and
the necessary lengths of passwords. We want our passwords
to be as short as possible without sacriﬁcing security and
safety. Hence the question arises what are acceptable levels of
security and safety. Towards guidance we look at the security
of ATM machines. It is probably safe to assume that the risk
of unauthorized access to one’s bank account is an acceptable
baseline. We further assume that the adversary is in possession
of a banking card and hence the remaining security lies in
the PIN. ATMs typically limit the number of invalid PIN
entries to two so that a user has three attempts to enter the
correct PIN. Conservatively, we assume that the PIN number is
chosen uniformly at random from the set {0, . . . , 9}4 and hence
there are N = 104 equally likely PINs. The failure probability
2
of guessing a particular PIN in n tries is then given by the
hypergeometric distribution
(cid:19)(cid:18)N − 1
(cid:18)1
(cid:19)
(cid:18)N
(cid:19)−1
·
,
0
n
n
which simpliﬁes to 1 − n · 10−4. Thus for three allowed PIN
entries the insecurity of this scheme is 3 · 10−4. Since ATM
machines are in widespread use, we believe 3 · 10−4 to be
a reasonable baseline for insecurity. Likewise, it is probably
fair to argue that, most of the time, a security breach in this
scenario is a more serious event than a lockout. From this we
conclude that the security bound is suitable as a bound for
safety as well.
D. Residual risks and attacks
We have mentioned before that KYO performs best if servers
lock an account immediately if the client provides a false secret.
This poses a denial of service risk. Actually, this risk exists
in any password system that tolerates only a low constant
number of false logins. A second risk is that an adversary
succeeds simply by ﬁxing a random password and by trying
this password on a large number of user accounts. If a server
has a large number of users then with a good probability, the
adversary will breach some accounts. Again, this is a risk that
applies to password systems in general. Although, the risk
is somewhat higher in the case of KYO because KYO uses
short secrets in addition to short passwords. Short secrets have
other security beneﬁts, as we discuss in following sections.
Fortunately, there is a general solution that mitigates the two
risks we just mentioned. Randomizing users’ identities forces
the adversary to guess matching user identities and passwords.
Hence, we can augment n bits of password entropy with an
arbitrary entropy m from user identities for a total of n + m
bits. Florenˆcio et al. [10] discuss this approach nicely in a paper
of theirs and therefore we assume henceforth that the problem
is solved adequately. We discuss another similar solution in
Section VI to make KYO backwards compatible with existing
systems.
III. DESIGN
A contemporary password check fulﬁls two goals. First, it
veriﬁes that Alice entered her password correctly, and second,
it veriﬁes that the entered password is authentic. The former
is a safety check (that the password was entered correctly) and
the latter is a security check (it matches the one associated with
the user account). If the server veriﬁes both safety and security,
this distinction seems artiﬁcial since the response is typically
the same in both cases (for example, a prompt to re-enter
one’s password). It does not make sense to distinguish between
them. In the case of our password generator schemes there is
a distinction, however, because Alice checks her password ρ1
locally for correctness, and Bob stops accepting communication
from Alice immediately if Alice presents anything but γA→B
as her secret. In order to prevent this from happening when
she enters a wrong password, Alice uses an error detecting
code in order to check passwords for correctness locally. This
code will however detect only a fraction of all possible false
password entries.
Towards an understanding of the principles that underpin
our KYO password generator, consider a function Fσ that
3
safety
110
101
111
000
100
011
passwords
48D3
0E97
AA98
187F
...
s
e
c
u