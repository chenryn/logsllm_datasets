[4] CVE-2017-0561.
https://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2017-0561. Accessed:
February 2020.
[5] Gartner says 8.4 billion connected "things" will
be in use in 2017, up 31 percent from 2016.
https://www.gartner.com/en/newsroom/
press-releases/2017-02-07-gartner-says-
8-billion-connected-things-will-be-in-use-
in-2017-up-31-percent-from-2016.
Accessed:
February 2020.
[6] Google
Project Zero: Over The Air:
ploiting Broadcoms Wi-Fi Stack.
//googleprojectzero.blogspot.com/2017/04/
over-air-exploiting-broadcoms-wi-fi_4.html.
Accessed: February 2020.
Ex-
https:
[7] Pwntools: CTF framework and exploit develop-
https://github.com/Gallopsled/
ment library.
pwntools/. Accessed: February 2020.
[8] Pyelftools: Parsing ELF and DWARF in Python.
https://github.com/eliben/pyelftools/. Ac-
cessed: February 2020.
[9] Quarkslab Lief project. https://lief.quarkslab.
com/. Accessed: February 2020.
[10] STM32Cube MCU Packages.
https://www.st.
com/en/embedded-software/stm32cube-mcu-
packages.html. Accessed: February 2020.
[11] STM32F401RE MCU.
evaluation-tools/nucleo-f401re.html.
cessed: February 2020.
https://www.st.com/en/
Ac-
[12] STM32F479I MCU.
https://www.st.com/en/
microcontrollers-microprocessors/stm32f469-
479.html. Accessed: February 2020.
[13] STM32F4DISCOVERY MCU.
https://www.st.
com/en/evaluation-tools/stm32f4discovery.
html. Accessed: February 2020.
[14] STM32L152RE MCU.
https://www.st.com/
en/evaluation-tools/nucleo-l152re.html. Ac-
cessed: February 2020.
[15] WYCNINWYC application source code reposi-
https://github.com/avatartwo/ndss18_
tory.
wycinwyc. Accessed: February 2020.
[16] Ali Abbasi, Jos Wetzels, Thorsten Holz, and Sandro
Etalle. Challenges in designing exploit mitigations
for deeply embedded systems. In Proceedings of the
IEEE European Symposium on Security and Privacy
(EuroS&P), pages 31–46. IEEE, 2019.
[17] Anil Altinay, Joseph Nash, Taddeus Kroes, Prabhu Ra-
jasekaran, Dixin Zhou, Adrian Dabrowski, David Gens,
Yeoul Na, Stijn Volckaert, Cristiano Giuffrida, Herbert
Bos, and Michael Franz. BinRec: Dynamic binary lift-
ing and recompilation. In Proceedings of the European
Conference on Computer Systems (EuroSys), 2020.
[18] Dennis Andriesse, Xi Chen, Victor van der Veen, Asia
Slowinska, and Herbert Bos. An in-depth analysis of dis-
assembly on full-scale x86/x64 binaries. In Proceedings
of the 25th USENIX Security Symposium (USENIX Se-
curity 16), pages 583–600. USENIX Association, 2016.
[19] Tiffany Bao, Jonathan Burket, Maverick Woo, Rafael
Turner, and David Brumley. BYTEWEIGHT: Learning
to recognize functions in binary code. In Proceedings
of the 23rd USENIX Security Symposium (USENIX Se-
curity 14), pages 845–860. USENIX Association, 2014.
[20] Erick Bauman, Zhiqiang Lin, and Kevin W. Hamlen.
Superset disassembly: Statically rewriting x86 binaries
without heuristics. In Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2018.
[21] Fabrice Bellard. QEMU, a fast and portable dynamic
translator. In Proceedings of the USENIX Annual Tech-
nical Conference (USENIX ATC). USENIX Association,
2005.
[22] Derek Bruening, Timothy Garnett, and Saman Amaras-
inghe. An infrastructure for adaptive dynamic optimiza-
tion. In Proceedings of the International Symposium
on Code Generation and Optimization (CGO), pages
265–275. IEEE, 2003.
[23] Derek Bruening and Qin Zhao. Practical memory check-
ing with Dr. Memory. In Proceedings of the Interna-
tional Symposium on Code Generation and Optimiza-
tion (CGO), pages 213–223, 2011.
[24] Nathan Burow, Scott A. Carr, Joseph Nash, Per Larsen,
Michael Franz, Stefan Brunthaler, and Mathias Payer.
Control-ﬂow integrity: Precision, security, and perfor-
mance. ACM Computing Surveys (CSUR), 50(1):1–33,
2017.
392    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[25] Vitaly Chipounov, Volodymyr Kuznetsov, , and George
Candea. S2E: a platform for in-vivo multi-path analysis
of software systems. In Proceedings of the International
Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 2011.
[26] Abraham
Clements, Eric
Gustafson, Tobias
Scharnowski, Paul Grosen, David Fritz, Christo-
pher Kruegel, Giovanni Vigna, Saurabh Bagchi, and
Mathias Payer. HALucinator: Firmware re-hosting
through abstraction layer emulation. In Proceedings
of the 29th USENIX Security Symposium (USENIX
Security). USENIX Association, 2020.
[27] Zhui Deng, Xiangyu Zhang, and Dongyan Xu. Bistro:
binary component extraction and embedding for soft-
ware security applications. In Proceedings of the Eu-
ropean Symposium on Research in Computer Security
(ESORICS), 2013.
[28] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Math-
ias Payer. RetroWrite: Statically instrumenting COTS
binaries for fuzzing and sanitization. In Proceedings
of the 41th IEEE Symposium on Security and Privacy
(S&P’), 2020.
[29] Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin, Tim
Leek, and Ryan Whelan. Repeatable reverse engineer-
In Proceedings of the 5th Program
ing with panda.
Protection and Reverse Engineering Workshop, 2015.
[30] Gregory J. Duck, Roland H. C. Yap, and Lorenzo Cav-
allaro. Stack bounds protection with low fat pointers.
In Proceedings of the Network and Distributed System
Security Symposium (NDSS), 2017.
[31] Bo Feng, Alejandro Mera, and Long Lu. P2IM: Scal-
able and hardware-independent ﬁrmware testing via au-
tomatic peripheral interface modeling. In Proceedings
of the 29th USENIX Security Symposium (USENIX Se-
curity 20). USENIX Association, 2020.
[32] Eric Gustafson, Marius Muench, Chad Spensky, Nilo
Redini, Aravind Machiry, Yanick Fratantonio, Da-
vide Balzarotti, Aurélien Francillon, Yung Ryn Choe,
Christophe Kruegel, and Giovanni Vigna. Toward the
analysis of embedded ﬁrmware through automated re-
hosting. In Proceedings of the 22nd International Sym-
posium on Research in Attacks, Intrusions and Defenses
(RAID 2019), pages 135–150. USENIX Association,
2019.
[34] Reed Hastings and Bob Joyce. Purify: Fast detection of
memory leaks and access errors. In Proceedings of the
winter 1992 USENIX conference. USENIX Association,
1991.
[35] Chung Hwan Kim, Taegyu Kim, Hongjun Choi, Zhong-
shu Gu, Byoungyoung Lee, Xiangyu Zhang, and
Dongyan Xu. Securing real-time microcontroller sys-
tems through customized memory view switching. In
Proceedings of the Network and Distributed System Se-
curity Symposium (NDSS), 2018.
[36] Taegyu Kim, Chung Hwan Kim, Hongjun Choi,
Yonghwi Kwon, Brendan Saltaformaggio, Xiangyu
Zhang, and Dongyan Xu. RevARM: A platform-
agnostic ARM binary rewriter for security applications.
In Proceedings of the 33rd Annual Computer Secu-
rity Applications Conference (ACSAC), pages 412–424.
ACM, 2017.
[37] Johannes Kinder and Helmut Veith. Jakstab: A static
analysis platform for binaries. In Proceedings of the
20th International Conference on Computer Aided Veri-
ﬁcation (CAV), pages 423–427. Springer, 2008.
[38] Christopher Kruegel, William Robertson, Fredrik Valeur,
and Giovanni Vigna. Static disassembly of obfuscated
binaries. In Proceedings of the 13th USENIX Security
Symposium (USENIX Security). USENIX Association,
2004.
[39] Evangelos Ladakis, Giorgos Vasiliadis, Michalis Poly-
chronakis, Sotiris Ioannidis, and George Portokalidis.
GPU-Disasm: A gpu-based x86 disassembler. In Pro-
ceedings of the international Information Security Con-
ference, pages 472––489, 2015.
[40] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish
Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vi-
jay Janapa Reddi, and Kim Hazelwood. Pin: building
customized program analysis tools with dynamic instru-
mentation. In Proceedings of the Programming Lan-
guage Design and Implementation (PLDI), 2005.
[41] Kenneth Miller, Yonghwi Kwon, Yi Sun, Zhuo Zhang,
Xiangyu Zhang, and Zhiqiang Lin. Probabilistic disas-
sembly. In Proceedings of the IEEE/ACM 41st Inter-
national Conference on Software Engineering (ICSE),
pages 1187–1198. IEEE, 2019.
[33] Istvan Haller, Yuseok Jeon, Hui Peng, Mathias Payer,
Cristiano Giuffrida, Herbert Bos, and Erik van der
Kouwe. TypeSan: Practical type confusion detection. In
Proceedings of the ACM Conference on Computer and
Communications Security (CCS), 2016.
[42] Marius Muench, Jan Stijohann, Frank Kargl, Aurélien
Francillon, and Davide Balzarotti. What you corrupt is
not what you crash: Challenges in fuzzing embedded
devices. In Proceedings of the Network and Distributed
System Security Symposium (NDSS), 2018.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    393
[43] Nicholas Nethercote and Julian Seward. Valgrind: a
framework for heavyweight dynamic binary instrumen-
tation. In Proceedings of the Programming Language
Design and Implementation (PLDI), 2007.
[53] Erik van der Kouwe, Vinod Nigade, and Cristiano Giuf-
frida. DangSan: Scalable use-after-free detection. In
Proceedings of the European Conference on Computer
Systems (EuroSys), 2017.
[44] Majid Salehi, Danny Hughes, and Bruno Crispo. Mi-
croguard: Securing bare-metal microcontrollers against
code-reuse attacks. In Proceedings of the IEEE Con-
ference on Dependable and Secure Computing (DSC),
2019.
[45] Benjamin Schwarz, Saumya Debray, and Gregory An-
drews. Disassembly of executable code revisited. In
Proceedings of the 9th Working Conference on Reverse
Engineering (WCRE), 2002.
[46] Konstantin Serebryany, Derek Bruening, Alexander
Potapenko, and Dmitry Vyukov. AddressSanitizer: A
In Proceedings of the
fast address sanity checker.
USENIX Annual Technical Conference (USENIX ATC),
pages 309–318, 2012.
[47] Kostya Serebryany. Sanitize, fuzz, and harden your c++
code. In USENIX Enigma. USENIX Association, 2016.
[48] Julian Seward and Nicholas Nethercote. Using Valgrind
to detect undeﬁned value errors with bit-precision. In
Proceedings of the USENIX Annual Technical Confer-
ence (USENIX ATC). USENIX Association, 2005.
[49] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser,
Christopher Kruegel, and Giovanni Vigna. Firmalice –
automatic detection of authentication bypass vulnera-
bilities in binary ﬁrmware. In Proceedings of the 22nd
Annual Network and Distributed System Security Sym.
(NDSS), 2015.
[50] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls,
Nick Stephens, Mario Polino, Andrew Dutcher, John
Grosen, Siji Feng, Christophe Hauser, and Christopher
Kruegel. Sok:(state of) the art of war: Offensive tech-
niques in binary analysis. In Proceedings of the IEEE
Symposium on Security and Privacy (S&P), pages 138–
157. IEEE, 2016.
[51] Dokyung Song, Julian Lettner, Prabhu Rajasekaran,
Yeoul Na, Stijn Volckaert, Per Larsen, and Michael
Franz. SoK: Sanitizing for security. In Proceedings
of the IEEE Symposium on Security and Privacy (S&P),
pages 1275–1295, 2019.
[52] László Szekeres, Mathias Payer, Tao Wei, and Dawn
Song. Sok: Eternal war in memory. In Proceedings of
the IEEE Symposium on Security and Privacy (S&P),
pages 48–62. IEEE, 2013.
[54] Ruoyu Wang, Yan Shoshitaishvili, Antonio Bianchi, Ar-
avind Machiry, John Grosen, Paul Grosen, Christopher
Kruegel, and Giovanni Vigna. Ramblr: Making Re-
assembly Great Again. In Proceedings of the Network
and Distributed System Security Symposium (NDSS),
2017.
[55] Shuai Wang, Pei Wang, and Dinghao Wu. Reassem-
In Proceedings of the 24th
bleable disassembling.
USENIX Security Symposium (USENIX Security 15),
pages 627–642. USENIX Association, 2015.
[56] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen,
and Zhiqiang Lin. Binary stirring: Self-randomizing
instruction addresses of legacy x86 binary code.
In
Proceedings of the ACM Conference on Computer and
Communications Security (CCS). ACM, 2012.
[57] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen,
and Zhiqiang Lin. Securing untrusted code via compiler-
agnostic binary rewriting. In Proceedings of the 28th An-
nual Computer Security Applications Conference (AC-
SAC), pages 299–308. ACM, 2012.
[58] Richard Wartell, Yan Zhou, Kevin W. Hamlen, and Mu-
rat Kantarcioglu. Shingled graph disassembly: Finding
the undecideable path. In Proceedings of the Paciﬁc-
Asia Conference Knowledge Discovery and Data Mining
(PAKDD), pages 273—-285, 2014.
[59] David Williams-King, Hidenori Kobayashi, Kent
Williams-King, G. Elaine Patterson, Frank Spano,
Yu Jian Wu, Junfeng Yang, and Vasileios P. Kemerlis.
Egalito: Layout-agnostic binary recompilation.
In
Proceedings of
the International Conference on
Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2020.
[60] Yves Younan, Pieter Philippaerts, Lorenzo Cavallaro,
R Sekar, Frank Piessens, and Wouter Joosen. PAriCheck:
An efﬁcient pointer arithmetic checker for c programs.
In Proceedings of the ACM Symposium on Information,
Computer and Communications Security (ASIACCS).
ACM, 2010.
[61] Jonas Zaddach, Luca Bruno, Aurélien Francillon, and
Davide Balzarotti. AVATAR: A framework to sup-
port dynamic security analysis of embedded systems’
In Proceedings of the Network and Dis-
ﬁrmwares.
tributed System Security Symposium (NDSS), 2014.
394    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[62] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song,
Hongsong Zhu, and Limin Sun. FIRM-AFL: High-
throughput greybox fuzzing of iot ﬁrmware via aug-
mented process emulation. In Proceedings of the 28th
USENIX Security Symposium (USENIX Security 19),
pages 1099–1114. USENIX Association, 2019.
[63] Sebastian Österlund, Kaveh Razavi, Herbert Bos, and
Cristiano Giuffrida. ParmeSan: Sanitizer-guided Grey-
box Fuzzing. In Proceedings of the 29th USENIX Secu-
rity Symposium (USENIX Security 20). USENIX Asso-
ciation, 2020.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    395