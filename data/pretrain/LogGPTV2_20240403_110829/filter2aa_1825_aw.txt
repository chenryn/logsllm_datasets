buffer, it must call a function that maps the same user buffer to a system address, which by definition
is valid in any process context. So essentially, we get two mappings to the same memory buffer.
One is from the original address (valid only in the context of the requestor process) and the other
in system space, which is always valid. The API to call is MmGetSystemAddressForMdlSafe,
passing the MDL built by the I/O Manager. The return value is the system address.
5. Once the driver completes the request, the I/O Manager removes the second mapping (to system
space), frees the MDL, and unlocks the user’s buffer, so it can be paged normally just like any other
user-mode memory.
The MDL is in actually a list of MDL structures, each one describing a piece of the buffer that is contigous
in physical memory. Remember, that a buffer that is contigous in virtual memory is not necessary
contigous in physical memory (the smallest piece is a page size). In most case, we don’;’t need to care
about this detail. One case where this matters is in Direct Memory Access (DMA) operations. Fortunately,
this is in the realm of hardware-based drivers.
Chapter 7: The I/O Request Packet
205
Figures 7-9a to 7-9f illustrate the steps taken with Direct I/O.
Figure 7-9a: Direct I/O: initial state
Chapter 7: The I/O Request Packet
206
Figure 7-9b: Direct I/O: I/O manager faults buffer’s pages to RAM and locks them
Figure 7-9c: Direct I/O: the MDL describing the buffer is stored in the IRP
Chapter 7: The I/O Request Packet
207
Figure 7-9d: Direct I/O: the driver double-maps the buffer to a system address
Figure 7-9e: Direct I/O: the driver accesses the buffer using the system address
Chapter 7: The I/O Request Packet
208
Figure 7-9f: Direct I/O: when the IRP is completed, the I/O manager frees the mapping, the MDL and unlocks the buffer
Notice there is no copying at all. The driver just reads/writes to the user’s buffer directly, using the system
address.
Locking the user’s buffer is done with the MmProbeAndLockPages API, fully documented
in the WDK. Unlocking is done with MmUnlockPages, also documented. This means a driver
can use these routines outside the narrow context of Direct I/O.
Calling MmGetSystemAddressForMdlSafe can be done multiple times. The MDL stores a
flag indicating whether the system mapping has already been done. If so, it just returns the
existing pointer.
Here is the prototype of MmGetSystemAddressForMdlSafe:
PVOID MmGetSystemAddressForMdlSafe (
_Inout_ PMDL Mdl,
_In_
ULONG Priority);
The function is implemented inline within the wdm.h header by calling the more generic MmMapLocked-
PagesSpecifyCache function:
Chapter 7: The I/O Request Packet
209
PVOID MmGetSystemAddressForMdlSafe(PMDL Mdl, ULONG Priority) {
if (Mdl->MdlFlags & (MDL_MAPPED_TO_SYSTEM_VA|MDL_SOURCE_IS_NONPAGED_POOL)) {
return Mdl->MappedSystemVa;
} else {
return MmMapLockedPagesSpecifyCache(Mdl, KernelMode, MmCached,
NULL, FALSE, Priority);
}
}
MmGetSystemAddressForMdlSafe accepts the MDL and a page priority (MM_PAGE_PRIORITY enu-
meration). Most drivers specify NormalPagePriority, but there is also LowPagePriority and
HighPagePriority. This priority gives a hint to the system of the importance of the mapping in low
memory conditions. Check the WDK documentation for more information.
If MmGetSystemAddressForMdlSafe fails, it returns NULL. This means the system is out of system
page tables or very low on system page tables (depends on the priority argument above). This should be a
rare occurrence, but still can happen in low memory conditions. A driver must check for this; if NULL is
returned, the driver should complete the IRP with the status STATUS_INSUFFICIENT_RESOURCES.
There is a similar function, called MmGetSystemAddressForMdl, which if it fails, crashes
the system. Do not use this function.
You may be wondering why doesn’t the I/O manager call MmGetSystemAddressForMdlSafe auto-
matically, which would be simple enough to do. This is an optimization, where the driver may not need
to call this function at all if there is any error in the request, so that the mapping doesn’t have to occur
at all.
Drivers that don’t set either of the flags DO_BUFFERED_IO nor DO_DIRECT_IO in the device object
flags implicitly use Neither I/O, which simply means the driver doesn’t get any special help from the I/O
manager, and it’s up to the driver to deal with the user’s buffer.
User Buffers for IRP_MJ_DEVICE_CONTROL
The last two sections discussed Buffered I/O and Direct I/O as they pertain to read and write requests. For
IRP_MJ_DEVICE_CONTROL (and IRP_MJ_INTERNAL_DEVICE_CONTROL), the buffering access method
is supplied on a control code basis. Here is the prototype of the user-mode API DeviceIoControl (it’s
similar with the kernel function ZwDeviceIoControlFile):
Chapter 7: The I/O Request Packet
210
BOOL DeviceIoControl(
HANDLE hDevice,
// handle to device or file
DWORD dwIoControlCode,
// IOCTL code (see )
PVOID lpInBuffer,
// input buffer
DWORD nInBufferSize,
// size of input buffer
PVOID lpOutBuffer,
// output buffer
DWORD nOutBufferSize,
// size of output buffer
PDWORD lpdwBytesReturned,
// # of bytes actually returned
LPOVERLAPPED lpOverlapped); // for async. operation
There are three important parameters here: the I/O control code, and optional two buffers designated
“input” and “output”. As it turns out, the way these buffers are accessed depends on the control code,
which is very convenient, because different requests may have different requirements related to accessing
the user’s buffer(s).
The control code defined by a driver must be built with the CTL_CODE macro, defined in the WDK and
user-mode headers, defined like so:
#define CTL_CODE( DeviceType, Function, Method, Access ) ( \
((DeviceType) 
• Add a source file named pch.cpp and put a single #include in it: the precompiled header itself:
#include "pch.h"
• Now comes the tricky part. Letting the compiler know that pch.h is the precompiled header and
pch.cpp is the one creating it. Open project properties, select All Configurations and All Platforms
so you won’t need to configure every configuraion/platform separately, navigate to C/C++ /
Precompiled Headers and set Precompiled Header to Use and the file name to “pch.h” (see figure
7-10). Click OK and to close the dialog box.
Chapter 7: The I/O Request Packet
213
Figure 7-10: Setting precompiled header for the project
• The pch.cpp file should be set as the creator of the precompiled header. Right click this file in Solution
Explorer, and select Properties. Navigate to C/C++ / Precompiled Headers and set Precompiled Header
to Create (see figure 7-11). Click OK to accept the setting.
Chapter 7: The I/O Request Packet
214
Figure 7-10: Setting precompiled header for pch.cpp
From this point on, every C/CPP file in the project must #include "pch.h" as the first thing in the file.
Without this include, the project will not compile.
Make sure there is nothing before this #include "pch.h" in a source file. Anything before
this line does not get compiled at all!
The DriverEntry Routine
The DriveEntry routine for the Zero driver is very similar to the one we created for the driver in chapter
4. However, in chapter 4’s driver the code in DriverEntry had to undo any operation that was already done
in case of a later error. We had just two operations that could be undone: creation of the device object and
creation of the symbolic link. The Zero driver is similar, but we’ll create a more robust and less error-prone
code to handle errors during initialization. Let’s start with the basics of setting up an unload routine and
the dispatch routines:
Chapter 7: The I/O Request Packet
215
#define DRIVER_PREFIX "Zero: "
// DriverEntry
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(RegistryPath);
DriverObject->DriverUnload = ZeroUnload;
DriverObject->MajorFunction[IRP_MJ_CREATE] =
DriverObject->MajorFunction[IRP_MJ_CLOSE] = ZeroCreateClose;
DriverObject->MajorFunction[IRP_MJ_READ] = ZeroRead;
DriverObject->MajorFunction[IRP_MJ_WRITE] = ZeroWrite;
Now we need to create the device object and symbolic link and handle errors in a more general and robust
way. The trick we’ll use is a do / while(false) block, which is not really a loop, but it allows getting
out of the block with a simple break statement in case something goes wrong:
UNICODE_STRING devName = RTL_CONSTANT_STRING(L"\\Device\\Zero");
UNICODE_STRING symLink = RTL_CONSTANT_STRING(L"\\??\\Zero");
PDEVICE_OBJECT DeviceObject = nullptr;
auto status = STATUS_SUCCESS;
do {
status = IoCreateDevice(DriverObject, 0, &devName, FILE_DEVICE_UNKNOWN,
0, FALSE, &DeviceObject);
if (!NT_SUCCESS(status)) {
KdPrint((DRIVER_PREFIX "failed to create device (0x%08X)\n", status));
break;
}
// set up Direct I/O
DeviceObject->Flags |= DO_DIRECT_IO;
status = IoCreateSymbolicLink(&symLink, &devName);
if (!NT_SUCCESS(status)) {
KdPrint((DRIVER_PREFIX "failed to create symbolic link (0x%08X)\n",
status));
break;
}
} while (false);
if (!NT_SUCCESS(status)) {
Chapter 7: The I/O Request Packet
216
if (DeviceObject)
IoDeleteDevice(DeviceObject);
}
return status;
The pattern is simple: if an error occurs in any call, just break out of the “loop”. Outside the loop, check
the status, and if it’s a failure, undo any operations done so far. With this scheme in hand, it’s easy to add
more initializations (which we’ll need in more complex drivers), while keeping the cleanup code localized
and appearing just once.
It’s possible to use goto statements instead of the do / while(false) approach, but as the great
Dijkstra wrote, “goto considered harmful”, so I tend to avoid it if I can.
Notice we’re also initializing the device to use Direct I/O for our read and write operations.
The Create and Close Dispatch Routines
Before we get to the actual implementation of IRP_MJ_CREATE and IRP_MJ_CLOSE (pointing to the
same function), let’s create a helper function that simplifies completing an IRP with a given status and
information:
NTSTATUS CompleteIrp(PIRP Irp,
NTSTATUS status = STATUS_SUCCESS,
ULONG_PTR info = 0) {
Irp->IoStatus.Status = status;
Irp->IoStatus.Information = info;
IoCompleteRequest(Irp, IO_NO_INCREMENT);
return status;
}
Notice the default values for the status and information. The Create/Close dispatch routine implementation
becomes almost trivial:
NTSTATUS ZeroCreateClose(PDEVICE_OBJECT, PIRP Irp) {
return CompleteIrp(Irp);
}
The Read Dispatch Routine
The Read routine is the most interesting. First we need to check the length of the buffer to make sure it’s
not zero. If it is, just complete the IRP with a failure status:
Chapter 7: The I/O Request Packet
217
NTSTATUS ZeroRead(PDEVICE_OBJECT, PIRP Irp) {
auto stack = IoGetCurrentIrpStackLocation(Irp);
auto len = stack->Parameters.Read.Length;
if (len == 0)
return CompleteIrp(Irp, STATUS_INVALID_BUFFER_SIZE);
Note that the length of the user’s buffer is provided through the Parameters.Read member inside the
current I/O stack location.
We have configured Direct I/O, so we need to map the locked buffer to system space using MmGetSys-
temAddressForMdlSafe:
NT_ASSERT(Irp->MdlAddress);
// make sure Direct I/O flag was set
auto buffer = MmGetSystemAddressForMdlSafe(Irp->MdlAddress, NormalPagePriority);
if (!buffer)
return CompleteIrp(Irp, STATUS_INSUFFICIENT_RESOURCES);
The functionality we need to implement is to zero out the given buffer. We can use a simple memset call
to fill the buffer with zeros and then complete the request:
memset(buffer, 0, len);
return CompleteIrp(Irp, STATUS_SUCCESS, len);
}
If you prefer a more “fancy” function to zero out memory, call RtlZeroMemory. It’s a macro, defined
in terms of memset.
It’s important to set the Information field to the length of the buffer. This indicates to the client the
number of bytes transferred in the operation (returned in the second to last parameter to ReadFile). This
is all we need for the read operation.
The Write Dispatch Routine
The write dispatch routine is even simpler. All it needs to do is complete the request with the buffer length
provided by the client (essentially swallowing the buffer):
Chapter 7: The I/O Request Packet
218
NTSTATUS ZeroWrite(PDEVICE_OBJECT, PIRP Irp) {
auto stack = IoGetCurrentIrpStackLocation(Irp);