        return;  
      end;  
    $function$;  
CREATE OR REPLACE FUNCTION digoal.query_smalltbl(IN i_userid int, OUT userid int, OUT info text)  
     RETURNS record  
     LANGUAGE plpgsql  
     STRICT  
    AS $function$  
      declare  
      begin  
        select t.userid,t.info into userid,info from digoal.tbl_small t where t.userid=i_userid;  
        return;  
      end;  
    $function$;  
```  
PL/Proxy节点操作如下：  
配置.pgpass, 新增：  
```  
new.pg.rds.aliyuncs.com:3433:*:digoal:digoal  
```  
使用default_transaction_read_only默认读事务，屏蔽写操作.  
在迁移时间段内，用户可以正常执行读请求，但是如果执行写请求会失败，这样确保数据迁移的一致性，同时降低迁移过程对业务的影响。  
```  
postgres# alter server rds_pg_cluster options (set p23 'host=old.pg.rds.aliyuncs.com dbname=db23 port=3433 user=digoal keepalives_idle=30 keepalives_interval=10 keepalives_count=10 application_name=23 options=''-c default_transaction_read_only=true''');    -- 注意里面是两个单引号  
```  
测试读正常，写失败：  
```  
postgres=# select query_pk(23);  
 query_pk   
----------  
 (23,23,)  
(1 row)  
postgres=# select insert_log(23);  
ERROR:  public.insert_log(1): [db23] REMOTE ERROR: cannot execute INSERT in a read-only transaction  
CONTEXT:  Remote context: SQL statement "insert into digoal.login_log (userid,db_user,client_addr,client_port,server_addr,server_port,login_time)  
    values (i_userid,current_user,inet_client_addr(),inet_client_port(),inet_server_addr(),inet_server_port(),now())"  
PL/pgSQL function insert_log(integer) line 4 at SQL statement  
```  
new RDS执行操作如下，刷新物化视图:  
```  
refresh materialized view CONCURRENTLY digoal.userinfo;  
REFRESH MATERIALIZED VIEW  
Time: 10953.220 ms  
refresh materialized view CONCURRENTLY digoal.session;  
REFRESH MATERIALIZED VIEW  
Time: 11013.860 ms  
refresh materialized view CONCURRENTLY digoal.tbl_small;  
REFRESH MATERIALIZED VIEW  
Time: 5084.118 ms  
```  
这里卡住，因为要修改数据字典需要超级用户。而RDS提供的用户是普通用户，无法修改数据字典（虽然有风险，这里只为演示）。所以这样迁移行不通。  
如果是超级用户，那么操作请参考我前期写的BLOG  
http://blog.163.com/digoal@126/blog/static/163877040201559105235803/  
为了演示下去，我只能选择全量迁移。（其他增量方法也有，本文不演示）  
```  
db23=> drop materialized view digoal.session ;  
DROP MATERIALIZED VIEW  
Time: 16.528 ms  
db23=> drop materialized view digoal.userinfo;  
DROP MATERIALIZED VIEW  
Time: 15.781 ms  
db23=> drop materialized view digoal.tbl_small;  
DROP MATERIALIZED VIEW  
Time: 9.458 ms  
```  
为了提高迁移速度，用了一些手段。  
```  
set synchronous_commit=off;  
set maintenance_work_mem='10GB';  --  超出RDS内存限制，可能会被杀掉  
CREATE TABLE digoal.userinfo (  
        dbid int default 23,  
        userid int,  
    info text  
) with (autovacuum_enabled=off, toast.autovacuum_enabled=off);  
CREATE TABLE digoal.session (  
        dbid int default 23,  
        userid int,  
    last_login timestamp without time zone  
) with (autovacuum_enabled=off, toast.autovacuum_enabled=off);  
CREATE TABLE digoal.tbl_small (  
        userid int,  
    info text  
) with (autovacuum_enabled=off, toast.autovacuum_enabled=off);  
insert into digoal.userinfo select * from digoal.ft_userinfo;  
INSERT 0 1000000  
Time: 45290.701 ms  
insert into digoal.session select * from digoal.ft_session;  
INSERT 0 1000000  
Time: 42212.278 ms  
insert into digoal.tbl_small select * from digoal.ft_tbl_small;  
INSERT 0 500000  
Time: 22885.456 ms  
alter table digoal.userinfo add constraint pk_userinfo primary key (userid);  
ALTER TABLE  
Time: 16962.174 ms  
alter table digoal.session add constraint pk_session primary key (userid);  
ALTER TABLE  
Time: 20809.422 ms  
alter table digoal.tbl_small add constraint pk_tbl_small primary key (userid);  
ALTER TABLE  
Time: 17484.201 ms  
vacuum analyze digoal.userinfo;  
Time: 65.790 ms  
vacuum analyze digoal.session;  
Time: 65.427 ms  
vacuum analyze digoal.tbl_small;  
Time: 45.453 ms  
alter table digoal.userinfo set (autovacuum_enabled=on, toast.autovacuum_enabled=on);  
alter table digoal.session set (autovacuum_enabled=on, toast.autovacuum_enabled=on);  
alter table digoal.tbl_small set (autovacuum_enabled=on, toast.autovacuum_enabled=on);  
```  
PL/Proxy,  修改集群，db23的目标主机为新的RDS，并且开放读写权限：  
```  
postgres# alter server rds_pg_cluster options (set p23 'host=old.pg.rds.aliyuncs.com dbname=db23 port=3433 user=digoal keepalives_idle=30 keepalives_interval=10 keepalives_count=10 application_name=23');  
```  
删除老RDS上的db23.  
```  
psql -h old.pg.rds.aliyuncs.com -p 3433 -U digoal postgres  
postgres=> drop database db23;  
DROP DATABASE  
```  
测试plproxy分发是否正常分发到新的数据库：  
```  
postgres=# select * from query_pk(23);  
 dbid | userid | info   
------+--------+------  
   23 |     23 |   
(1 row)  
vi test.sql  
\setrandom id 1 32000000  
select insert_log(:id);  
pgbench -M prepared -n -r -f ./test.sql -P 1 -c 30 -j 30 -T 30  
progress: 1.0 s, 7853.2 tps, lat 3.340 ms stddev 6.056  
progress: 2.0 s, 10766.4 tps, lat 2.432 ms stddev 5.433  
progress: 3.0 s, 11395.0 tps, lat 2.277 ms stddev 4.590  
progress: 4.0 s, 11622.1 tps, lat 2.216 ms stddev 4.493  
progress: 5.0 s, 10519.9 tps, lat 2.454 ms stddev 5.600  
progress: 6.0 s, 11153.4 tps, lat 2.317 ms stddev 4.795  
progress: 7.0 s, 11474.3 tps, lat 2.312 ms stddev 4.802  
progress: 8.0 s, 11398.5 tps, lat 2.253 ms stddev 4.308  
progress: 9.0 s, 12106.7 tps, lat 2.174 ms stddev 3.302  
progress: 10.0 s, 12567.8 tps, lat 2.068 ms stddev 2.075  
```  
连接到新的db23：  
```  
psql -h new_rds -p 3433 -U digoal  
postgres=> \c db23  
psql (9.4.3, server 9.4.1)  
You are now connected to database "db23" as user "digoal".  
db23=> select count(*) from login_log ;  
 count   
-------  
 10547  
(1 row)  
```  
## 补充  
1\. 如果实际使用内存超出了RDS内存限制，会被杀掉。（阿里云内核小组已解决这个问题。）  
实际上目前的做法是移除到公共池，已经没有这么暴力了，然后在内存使用量下降后再移回用户实例的池子。  
```  
postgres=> set maintenance_work_mem='10GB';  
SET  
postgres=> alter table session add constraint pk_session primary key(userid);  
server closed the connection unexpectedly  
        This probably means the server terminated abnormally  
        before or while processing the request.  
The connection to the server was lost. Attempting reset: Failed.  
!> \q  
```  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201559105235803/  
2\. http://www.postgresql.org/docs/9.4/static/libpq-connect.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")