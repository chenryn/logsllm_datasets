那么在哪里可以看到这些东西呢？在创建或者配置一个监控项的时候。每次创建监控项你都必须选择一个检测类型。
看如下图：
2. item types 注意点
从zabbix 2.0开始一台主机可以定义多个接口，什么是接口？agent、jmx、impi、snmp这些都是接口。假如你需要
检查他的服务器主板温度等，需要使用impi； 如果你还需要检测他的mysql、nginx之类的，你需要agent，snmp
等等。
监控什么类型的item，你需要配置什么类型的接口。如果你配置来多个接口，当需要检查一个item，zabbix会依次
（Agent→SNMP→JMX→IPMI）调用接口，直到找到合适的接口为止。
有些监控项完全由服务器端来完全，根本不需要agent，这个大家可以记一下。接下来的大部分时间都要花费在zabbix
的监控类型。大家要做好心理准备。
zabbix agent 类型所有 key
zabbix 服务器端通过与 zabbix agent 通信来获取客户端服务器的数据，agent 分为两个版本，其中一个是主动一个
是被动，在配置主机我们可以看到一个是agent，另一个是agent（active）。前者为被动检测，后者为主动检测。那
么主动和被动区别在哪里呢？
被动：zabbix server向zabbix agent讨要数据。
主动：zabbix agent提交数据给zabbix server。
监控项 keys 列表
以下表格是zabbix agent所支持的所有.请大家一一过目，认识他们就行，不需要背下来。
Key
功能 返回值 参数 描述
agent.hostname
-
agent.ping
agent.version
zabbix 字符串 - 例如返回： 1.8.2
agent版本
kernel.maxfiles
系 统 支 持 整数
最大的
open
files
kernel.maxproc
系 统 支 持 整数
最 大 的 进
程数量
log[file,,,,,]
监 控 日 志 Log file – 文件详细路径 这个监控项只能设置为 active check（主动模
文件 regexp – 正则 式）.
encoding – 编码 如果文件不存在或者没有相应的权限，那么监
maxlines – zabbix agent 向 控项状态会转变为unsupported.
server 或者 proxy 发送最大的行 示例:
数。这个参数覆盖配置文件 log[/var/log/syslog] log[/var/log/syslog,error]
zabbxi_agentd.conf 中 的 ’ log[/home/zabbix/logs/logfile,,,100]
MaxLinesPerSecond’
mode – 可选值: all (默认), skip
(跳过处理老数据).mode 参数从
2.0版本开始支持
output – 可选项，输出格式模
板. The \0 escape sequence is
replaced with the matched text
while an \N(where N=1…9) escape
sequence is replaced with Nth
matched group (or an empty string
if the N exceeds the number of
captured groups).
If  is left empty
– the whole line containing the
matched text is returned. Note
that all global regular expression
types except ‘Result is TRUE’
always return the whole matched
line and the  parameter is
ignored.
output是2.2中新加入的功能
logrt[file_pattern,,,,,]
监 控 支 持 Log file_pattern – 文件绝对路 The item must be configured as an active
轮 转 的 日 径 check. Log rotation is based on the last
志 regexp – 正则表达式 modification time of files.
encoding – 编码 示例:
maxlines – 客户端每秒发 logrt[“/home/zabbix/logs/^logfile[0-9]{1,3}$”
送给server的最大行数. 这个 ,,,100]
参数会覆盖客户端配置文件 – will match a file like “logfile1″ (will not
zabbix_agentd.conf 中 match “.logfile1″)
MaxLinesPerSecond的值
mode – 可选值: all (默认), logrt[“/home/user/logfile_.*_[0-9]{1,3}”,”
skip (跳过老数据的处理). pattern_to_match”,”UTF-8″,100]
Mode参数从2.0开始支持 – will collect data from files such
output – an optional output “logfile_abc_1” or “logfile__001”.
formatting template. The \0
escape sequence is replaced
with the matched text while an
\N(where N=1…9) escape
sequence is replaced with Nth
matched group (or an empty
string if the N exceeds the
number of captured groups).
If  is left empty – the
whole line containing the
matched text is returned. Note
that all global regular
expression types except
‘Result is TRUE’ always return
the whole matched line and
the  parameter is
ignored. The output parameter
is supported from version 2.2.
net.dns[,zone,,,]
检测 DNS 0 – DNS 挂了 1 ip – DNS 服务器的 ip 地址 示例key:
服 务 是 否 – DNS运行中 (留空表示使用本地 DNS, net.dns[8.8.8.8,zabbix.com,MX,2,1]
开启 ignored on Windows) type可选值: ANY, A, NS, CNAME, MB, MG,
zone – 需要测试的域名 MR, PTR, MD, MF, MX, SOA, NULL, WKS (除了
type – 记录类型 (默认为 windows), HINFO, MINFO, TXT, SRV
SOA) SRV记录从Zabbix agent versions 1.8.6 (Unix)
timeout (ignored on Windows) and 2.0.0 (Windows)开始支持Zabbix 2.0
– 超时时间(默认1秒) 之前的命名方式: net.tcp.dns（目前依旧支持）
count (ignored on Windows)
– 重试次数 (默认值2)
net.dns.record[,zone,,,]
执 行 一 个 获取DNS查询数据 ip – DNS 服务器的 ip 地址 示例key:
DNS查询 (留空表示使用本地 DNS, net.dns.record[8.8.8.8,ttlsa.com,MX,2,1]
ignored on Windows) type 的可选值: ANY, A, NS, CNAME, MB,
zone – 需要测试的域名 MG, MR, PTR, MD, MF, MX, SOA, NULL, WKS
type – 记录类型 (默认为 (except for Windows), HINFO, MINFO, TXT, SRV
SOA) SRV记录从Zabbix agent versions 1.8.6 (Unix)
timeout (ignored on Windows) and 2.0.0 (Windows)开始支持Zabbix 2.0
– 超时时间(默认1秒) 之前的命名方式: net.tcp.dns（目前依旧支持）
count (ignored on Windows)
– 重试次数 (默认值2)
net.if.collisions[if]
Out-of-win Number of collisions 数字 if – 网卡
dow
collision
net.if.discovery
列出网卡. JSON对象 Zabbix agent 2.0 开始支持 但是操作系统
通 常 用 于 FreeBSD, OpenBSD and NetBSD上的 Zabbix
低 级 别 的 agent 2.2开始支持
discovery
net.if.in[if,]
网 卡 入 口 整数 if – 网卡名称 示例
流量 mode – 可用值: keys: net.if.in[eth0,errors] net.if.in[eth0]
bytes – 字节数 (默认) 请使用增量存储方式
packets – 包数量
errors – 错误数量
dropped – 丢包数量
net.if.out[if,]
网 卡 出 口 整数 if – 网卡名称 范例keys:
流量 mode – 可用值: net.if.out[eth0,errors] net.if.out[eth0]请使用增
bytes – 字节数 (默认) 量存储方式
packets – 包数量
errors – 错误数量
dropped – 丢包数量
net.if.total[if,]
网卡进/出 整数 if – 网卡名称 范例keys:
流 量 的 总 mode – 可用值: net.if.total[eth0,errors] net.if.total[eth0]
和 bytes – 字节数 (默认) 请使用增量存储方式
packets – 包数量
errors – 错误数量
dropped – 丢包数量
net.tcp.listen[port]
检 测 端 口 0 – 未监听 port – TCP端口 示例:
是否开启 1 – 监听中 net.tcp.listen[80]
linux下的zabbix agent 1.8.4开始支持
net.tcp.port[,port]
是 否 可 以 0 – 无法连接 ip – IP 地 址 ( 默 认 是 范例:
连 接 到 指 1 – 可以连接 127.0.0.1) net.tcp.port[,80]
定 的 TCP port – 端口 检测web服务器端口是否运行中
端口 老命名方式: check_port[*]
net.tcp.service[service,,]
检 测 服 务 0 – 服务挂了 service – 如下: ssh, ntp, 示例key:
是否开启， 1 – 服务运行中 ldap, smtp, ftp, http, pop, net.tcp.service[ftp,,45] – 检测 45 端口上得
并 且 端 口 nntp,imap, tcp, https, telnet FTP是否运行中
可用 ip – IP地址 (默认127.0.0.1) Zabbix 1.8.3 支持的版本请使用service.ntp 代
port – 端口 (默认情况为标 替ntp.
准端口号) https 和telnet 服务从2.0和2.2开始支持
net.tcp.service.perf[service,,]
检 测 服 务 0 – 服务挂了; service – 如下 :ssh, ntp, 示例key:
器性能 seconds – 链接到服 ldap, smtp, ftp, http, pop, net.tcp.service.perf[ssh] – 检测 SSH 服务器
务器端口消耗的时间 nntp,imap, tcp, https, telnet 响应速度加密协议检测不被支持 (类似 IMAP
ip – IP地址 (默认127.0.0.1) 端口 993 或者POP 端口 995) .但是我们可以
port – 端口 (默认情况为标 使用 net.tcp.service.perf[tcp,,] 来
准端口号) 检测他们.Windows agent 不能检测 LDAP 和
HTTPS. Note that the telnet check looks for a
prompt (‘:’ at the end).
老命名方式: check_service_perf[*]注意：that
before Zabbix 1.8.3 version service.ntp should
be used instead of ntp. Zabbix 2.0支持 https
和telnet服务
net.udp.listen[port]
检测 UDP 0 – 未监听 port – udp端口 范例:
端 口 是 否 1 – 监听中 net.udp.listen[68]
在监听 linux系统的Zabbix agent 1.8.4开始支持
proc.mem[,,,]
用 户 进 程 内存使用量 (字节单 name – 进程名 (默认值 示例keys:
消 耗 的 内 位). “all processes”) proc.mem[,root]
存 user – 用户名 (默认值“all – root的进程消耗了多少内存
users”) proc.mem[zabbix_server,zabbix]
mode – 可选值: avg, max, – zabbix用户运行的zabbix_server使用了多
min, sum (默认) 少内存
cmdline – 命令行过滤(正则 proc.mem[,oracle,max,oracleZABBIX] –
表达时) memory used by the most memory-hungry
process running under oracle having
oracleZABBIX in its command line
proc.num[,,,]
某 用 户 某 进程数量 name – 进程名称 (默认“all 示例
些 状 态 的 processes”) keys: proc.num[,mysql]
进 程 的 数 user – 用户名 (默认 “all – MySQL用户运行的进程数量
量 users”) proc.num[apache2,www-data]
state – 可用值: all (默认), – www-data 运行了多少个 apache2 进程
run,sleep, zomb proc.num[,oracle,sleep,oracleZABBIX] –
cmdline – 命令行过滤(正则 number of processes in sleep state running
表达时) under oracle having oracleZABBIX in its
command line
备注：Windows 系统只支持 name 和 user 两
个参数
sensor[device,sensor,]
读 取 硬 件 device – 设备名称 示例key:
传感器 sensor – 传感器名称 sensor[w83781d-i2c-0-2d,temp1] Prior to
mode – 可选值: avg, Zabbix 1.8.4, the sensor[temp1] format was
max, min (if this parameter is used. On Linux 2.6+, 读取/sys/class/hwmon.
omitted, device and sensor are On OpenBSD, 读取hw.sensors MIB.
treated verbatim). 示例keys:
On Linux 2.4, 读 取 sensor[cpu0,temp0] – CPU0的温度
/proc/sys/dev/sensors. sensor[cpu[0-2]$,temp,avg] – cpu平均温度
Zabbix 1.8.4开始支持OpenBSD
system.boottime
系 统 启 动 整数 unix时间戳
的时间鹾
system.cpu.intr
设备中断
整数
system.cpu.load[,]
CPU负载 浮点数 cpu – 可用值: all (默认), 范例key:
percpu (所有在线cpu的负载) system.cpu.load[,avg5]
mode – 可用值: avg1 (1 分 老命令方式: system.cpu.loadX
钟 默认值), avg5(5分钟平均), 参数percpu is Zabbix 2.0.0开始支持
avg15 (15分钟平均值)
system.cpu.num[]
CPU数量 处理器个数 type – 可用值: online (默认 范例:
值), max system.cpu.num
system.cpu.switches
上 下 文 交 交换次数 老命名方式: system[switches]
换
system.cpu.util[,,]
CPU 利 用 百分比 cpu – cpu 数量 (默认是所 范例key:
率 有cpu) system.cpu.util[0,user,avg5]
type – 可用值: idle, nice, 老命名方式:
user (默认), system (windows system.cpu.idleX, system.cpu.niceX,