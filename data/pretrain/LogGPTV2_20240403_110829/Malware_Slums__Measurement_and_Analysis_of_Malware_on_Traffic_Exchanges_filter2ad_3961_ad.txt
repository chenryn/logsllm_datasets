14
15
16
17
18
19
20
21
22
23
24
579
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:37 UTC from IEEE Xplore.  Restrictions apply. 
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
?id=7b225f223a7b22646d536c6f74223a22312
22c22646d416666223a22313730222c22646d46
6f726d6174223a2233222c22646d496e7374616
c6c223a2235222c22646d5469746c65223a2246
6c617368253230506c61796572222c22646d466
96c65223a226874747025334125324625324677
77772e676f6f676c652e636f6d2e62722532462
22c22646d46696c654e616d65223a226e756c6c
222c22646d486f7374656446696c65223a22302
22c22646d46696c6553697a65223a22312e3122
2c22646d49636f6e223a22227d7d
" data-dm-carregado="true" class="
download_link">
 A p g i n a
necessita do plugin para
continuar.  &nbsp; Instalar
plug-in
 x
48
Code 4. Deceptive executable download. The href tag of
dm topbar contains an embedded JavaScript (window.location) that has
the download link for ﬂashplayer.exe. dm topbar block div element
creates the fake download button.
C. Suspicious Redirection
Another malicious
activity observed on trafﬁc
ex-
changes is URL redirection. The malware detection en-
gines report
it as Trojan:JS/Redirector [15] and
Trojan.Script.Generic. A typical example with a
seemingly benign JavaScript code is as follows.
1
2
3
Code 5. A seemingly benign JavaScript code snippet.
It is noteworthy that the URL referred in the source tag was
marked as malicious by multiple malware detection engines
including the Google Safe Browsing API [10]. As shown in
Figure 9, any request to the URL is redirected to a different
URL every time.
Since the redirection target is determined at the server-
side, we cannot fully uncover the redirection logic. The ﬁles
580
Fig. 9. Suspicious redirections from company.ooo domain
detected as Trojan:JS/Redirector [15] are obfuscated
to hinder further analysis.
D. External Interface Calls
Several
examples of malware on trafﬁc
[14].
BehavesLike.JS.ExploitBlacole.nv
exchanges
aim to exploit client-side functionality,
such as Flash
and JavaScript, using external
interface calls. Such a
malware was
reported by the malware detection tools
as
and
A
BehavesLike.JS.ExploitBlacole.xm
typical example, e.g., 542_mobile3.js, was obfuscated
to Flash ﬁles
multiple times and contained references
and hidden iframe elements. We were successful
in
de-obfuscating the ﬁle in bits and pieces to ﬁnd a reference
to
then
decompiled the ﬁles to get the swift code and found several
external calls made to the obfuscated JavaScript code (see
below). We deployed the script on a local web server to
further analyze it. The script created a Flash object covering
the whole page with transparency set to invisible. Any click
on the page created a new pop up advertisement. Thus,
the goal of the script
is to trick users into clicking on
advertisements.
http://static.yupﬁles.net/swf/AdFlash46.swf. We
1 package {
2
3
4
5
6
7
8
9
10
11
12
import flash.events.*;
import flash.display.*;
import flash.external.*;
import flash.system.*;
public class AdFlash46 extends movieclip
{
public function AdFlash46()
{
super();
Security.allowdomain("*");
stage.scalemode = StageScaleMode.EXACT_FIT;
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:37 UTC from IEEE Xplore.  Restrictions apply. 
13
14
15
16
17
18
stage.addEventListener(MouseEvent.MOUSE_UP,
function(_arg1: MouseEvent): void
{
ExternalInterface.call("AdFlash.onClick");
stage.displayState =
StageDisplayState.FULL_SCREEN;
ExternalInterface.call("window.NqPnfu");
stage.displayState =
StageDisplayState.NORMAL;
11
12
13
14
15
})(window,document,'script','
//www.google-analytics.com/analytics.js','ga')
;
ga('create', 'UA-54970982-1', 'auto');
ga('send', 'pageview');
Code 8. Google analytics false positive
});
}
}
19
20
21
22 } //package
Code 6. Script creates an invisible Flash object over the page
E. False Positives
In our study, we encountered a few false positives where
benign webpages were incorrectly marked as malicious by the
malware scanning engines. The following example shows a
Google account authentication script which is placed outside
the page within an iframe with width and height both set
to one. Recall that this is a typical hidden iframe injection
behavior. It seems suspicious but further analysis reveals that
it is indeed a benign Google authentication behavior.
1
2
3
4
5
6
7
8
9
10
11
12
13
//iframe is dynamically loaded
//width and height are both are set to 1
//top=-100px; puts it outside the page
Code 7. Google authentication false positive
Another false positive was detected as TrojanClicker
:JS/Faceliker.D by the malware scanning engines. The
typical behavior of this malware is to garner “likes” on
Facebook pages without the consent of the user. However,
upon further exploration, we found that the Google Analytics
reference was mislabeled as faceliker by scanning engines.
The following code snippet shows the Google analytics false
positive.
1
2
3
4
5
6
7
8
9
10
//analytics.js is loaded
(function(i,s,o,g,r,a,m)
{i['GoogleAnalyticsObject']=r;i[r]=i[r]
||function(){
(i[r].q=i[r].q||[]).push(arguments)}
,i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0]; a.async=1;
a.src=g;m.parentNode.insertBefore(a,m)
VI. CONCLUSION
We present
the ﬁrst of its kind measurement study of
trafﬁc exchanges as a vector for malware propagation. We
crawled a large number of manual-surf and auto-surf trafﬁc
exchanges and collected a sample of over a million URLs. Our
measurements revealed that trafﬁc exchanges are a prime target
for attackers looking to target a large number of victims in a
short amount of time. The analysis of the URLs using different
malware analysis tools revealed that a signiﬁcant proportion
of URLs on trafﬁc exchanges are malicious. We also identiﬁed
the major categories of malware on trafﬁc exchanges and
presented an in-depth analysis of interesting malware classes
including iframe injection, deceptive downloads, external
interface calls, and redirections to malware hosting websites.
Our study sheds light on the threat of large-scale exploitation
of trafﬁc exchange networks for malware prorogation.
Other than trafﬁc exchanges, there are two stakeholders
in this ecosystem: ad networks and users who surf trafﬁc
exchanges to get views on their websites in return. Ad net-
works should look out for potential fraud in ad impressions,
view counts, and clicks. Most reputable ad networks consider
the use of trafﬁc exchanges fraudulent and have strategies in
place to vet the ad impression ﬁgures. For example, AdSense
and DoubleClick do not allow trafﬁc exchanges. Other ad
networks can similarly block trafﬁc exchange services to
decease monetary incentives for trafﬁc exchange operators.
We believe that most of the users on trafﬁc exchanges are
naive and their only objective is to increase the ﬂow of trafﬁc
on their website, resulting in its increased popularity rank.
They need to understand the ethical considerations as well as
the vulnerabilities that are exposed when surﬁng these trafﬁc
exchanges. Users could also be shown a warning before they
visit a trafﬁc exchange website, incorporated via a plugin or
extension in any modern browser.
ACKNOWLEDGMENTS
The authors would like to acknowledge VirusTotal for
providing unrestricted access to their APIs for this work.
This material is based in part upon work supported by
the National Science Foundation under Grant Number CNS-
1524329. Any opinions, ﬁndings, and conclusions or recom-
mendations expressed in this material are those of the author(s)
and do not necessarily reﬂect the views of the National Science
Foundation.
581
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:37 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] 10KHits Trafﬁc Exchnage. https://www.10khits.com/.
[2] AdHitz Advertisement Network. http://adhitzads.com/.
[3] AVG
Labs.
website-safety-reports/.
Threat
http://www.avgthreatlabs.com/ww-en/
[4] Bright Cloud. http://www.brightcloud.com/.
[5] Cash N Hits Trafﬁc Exchange Network. http://www.cashnhits.com/.
[6] Deﬁniton for trojan script heuristic js iacgm. http://computerviruskiller.
blogspot.com/2015/05/trojanscriptheuristic-jsiacgm-removal.html.
[7] EasyHits4U Trafﬁc Exchange. https://www.easyhits4u.com/.
[8] Firebug. http://getﬁrebug.com/.
[9] Flash support for google chrome. https://support.google.com/chrome/
[10] Google safe browsing api. https://developers.google.com/safe-browsing/
answer/6258784?hl=en.
?hl=en.
[11] Hit2Hit Trafﬁc Exchange. http://hit2hit.com/.
[12] Malware Domain list. malwaredomainlist.com.
[13] ManyHit Trafﬁc Exchange. http://manyhit.com/.
[14] Mcafee deﬁnition for js exploit blacole.
VirusInfo/VirusProﬁle.aspx?key=919064#none.
http://home.mcafee.com/
[15] Microsoft deﬁnition for trojan js redirector. http://www.microsoft.com/
security/portal/threat/encyclopedia/Entry.aspx?Name=Trojan%3AJS%
2FRedirector.NT.
[16] NetExport. https://getﬁrebug.com/wiki/index.php/Firebug Extensions.
[17] Otohits Trafﬁc Exchange. http://www.otohits.net/.
[18] Quttera. http://quttera.com/.
[19] Sender Base (CISCO). https://www.senderbase.org/.
[20] SendSurf Trafﬁc Exchange. http://www.sendsurf.com/.
[21] Shallalist. http://www.shallalist.de/.
[22] Site Check Sucuri. https://sitecheck.sucuri.net/.
[23] SmileyTrafﬁc Exchange. http://www.smileytrafﬁc.com/.
[24] Squid Guard MESD. http://squidguard.mesd.k12.or.us/blacklists.tgz.
[25] Trafﬁc Monsoon Trafﬁc Exchange. https://trafﬁcmonsoon.com/.
[26] URL Blacklist. urlblacklist.com.
[27] URLQuery. http://urlquery.net/.
[28] VirusTotal. https://www.virustotal.com/.
[29] VirusTotal API.
https://www.virustotal.com/en/documentation/
private-api/.
[30] Wepawet. https://wepawet.iseclab.org/.
[31] Zeus Tracker Blacklist. zeustracker.abuse.ch.
[32] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert. Zozzle: Fast and
Precise In-Browser JavaScript Malware Detection. USENIX Security
Symposium, 2011.
[33] A. Dewald, T. Holz, and F. C. Freiling. ADSandbox: Sandboxing
25th ACM Symposium On
JavaScript to Fight Malicious Websites.
Applied Computing (SAC), 2010.
[34] M. Javed, C. Herley, M. Peinado, and V. Paxson. Measurement and
Analysis of Trafﬁc Exchange Services. ACM Internet Measurement
Conference (IMC), 2015.
[35] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert. Rozzle: De-Cloaking
IEEE Symposium on Security and Privacy (S&P),
Internet Malware.
2012.
[36] T. Krueger and K. Rieck.
Intelligent Defense Against Malicious
JavaScript Code. 26th Annual Computer Security Applications Con-
ference (ACSAC), 2010.
[37] M. K¨uhrer and T. Holz. An Empirical Analysis of Malware Blacklists.
Praxis der Informationsverarbeitung und Kommunikation, 35(1):11–16,
2012.
[38] Z. Li, K. Zhang, Y. Xie, F. Yu, and X. Wang. Knowing Your
Enemy: Understanding and Detecting Malicious Web Advertising. ACM
Conference on Computer and Communications Security (CCS), 2012.
[39] N. Nikiforakis, F. Maggi, G. Stringhini, M. Z. Raﬁque, W. Joosen,
C. Kruegel, F. Piessens, G. Vigna, and S. Zanero. Stranger Danger:
Exploring the Ecosystem of Ad-based URL Shortening Services. 23rd
International Conference on World Wide Web (WWW), 2014.
[40] X. Xing, W. Meng, and B. Lee. Understanding Malvertising Through
Ad-Injecting Browser Extensions. 24th International Conference on
World Wide Web (WWW), 2015.
[41] A. Zarras, A. Kapravelos, and G. Stringhini. The Dark Alleys of Madi-
son Avenue: Understanding Malicious Advertisements. ACM Internet
Measurement Conference (IMC), 2014.
582
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:37 UTC from IEEE Xplore.  Restrictions apply.