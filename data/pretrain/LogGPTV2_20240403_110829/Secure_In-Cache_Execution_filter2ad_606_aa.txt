title:Secure In-Cache Execution
author:Yue Chen and
Mustakimur Khandaker and
Zhi Wang
Secure In-Cache Execution
Yue Chen(B), Mustakimur Khandaker, and Zhi Wang
Florida State University, Tallahassee, FL 32306, USA
{ychen,khandake,zwang}@cs.fsu.edu
Abstract. A cold boot attack is a powerful physical attack that can
dump the memory of a computer system and extract sensitive data from
it. Previous defenses focus on storing cryptographic keys oﬀ the memory
in the limited storage “borrowed” from hardware chips. In this paper,
we propose EncExec, a practical and eﬀective defense against cold boot
attacks. EncExec has two key techniques: spatial cache reservation and
secure in-cache execution. The former overcomes the challenge that x86
processors lack a ﬁne-grained cache control by reserving a small block
of the CPU’s level-3 cache exclusively for use by EncExec; the latter
leverages the reserved cache to enable split views of the protected data:
the data stored in the physical memory is always encrypted, and the
plaintext view of the data is strictly conﬁned to the reserved cache. Con-
sequently, a cold boot attack can only obtain the encrypted form of the
data. We have built a prototype of EncExec for the FreeBSD system.
The evaluation demonstrates that EncExec is a practical and eﬀective
defense against cold boot attacks.
1 Introduction
A cold boot attack is a powerful physical attack that can extract sensitive data
from the physical memory1 of a computer system. It exploits the fact that,
contrary to the common belief, memory chips may retain their contents for
seconds after the power is lost and considerably longer at a low temperature
[14,27]. An attacker can dump the memory of a victim computer by freezing and
transplanting its memory units to a computer under his control or rebooting it to
a malicious operating system (OS). Sensitive data can then be extracted from the
dumped memory [14]. Lots of sensitive data sit in the memory for a long time [7].
For example, whole-disk encryption protects the document at rest in case the
computer is lost or stolen. However, the disk encryption key (or its derived sub-
keys) often sits in the memory in plaintext and thus vulnerable to the cold boot
attack. Cold boot attacks have also been demonstrated against mobile devices,
even though their memory units are soldered onto the motherboard [23,28], by
1 For brevity, we refer to the physical memory as the memory and the CPU cache as
the cache.
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 17) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 381–402, 2017.
DOI: 10.1007/978-3-319-66332-6 17
382
Y. Chen et al.
freezing and rebooting them to the recovery mode. The attacker then uses a tool
to extract sensitive data from the phone, including passwords, contacts, photos,
and emails. Cold boot attacks have become a major security and privacy concern.
A few defenses have been proposed to address cold boot attacks on the
x86 [12,21,22,26] and ARM [10] platforms. In principle, they re-purpose exist-
ing hardware features to keep cryptographic keys oﬀ the memory. For example,
AESSE [21], TRESOR [22], LoopAmnesia [26], and ARMORED [10] store a sin-
gle AES key in SSE registers, debug registers, performance counters, and NEON
registers, respectively. By doing so, the key will never leave the CPU and conse-
quently not be contained in the memory dump. However, the amount of storage
provided by these “borrowed” registers is very limited. It is often too small for
cryptographic algorithms that use longer keys (e.g., RSA). They also interfere
with normal operations of these registers. From another perspective, Copker [12]
temporarily disables caching and uses the cache-as-RAM technology [9] to imple-
ment RSA. However, Copker severely degrades the system performance when it
is active because caching has to be completely disabled. On recent Intel proces-
sors with a shared Level-3 (L3) cache, Copker has to disable caching on all the
cores. Moreover, these systems focus solely on securing cryptographic algorithms
while completely ignoring other sensitive data in the process (one reason is that
they do not have large enough secure storage for them). Sensitive data, such as
user accounts and passwords, can be scattered in the process address space as
the memory is allocated, copied, and freed [7]. This calls for a stronger protec-
tion against cold boot attacks that can protect not only cryptographic keys but
also sensitive data.
In this paper, we propose EncExec, a system that can securely execute a
whole program, or a part of it, in the cache. Data protected by EncExec have
split views in the memory and the (reserved) cache: data stored in the memory
are always encrypted; they are decrypted into the cache only when accessed.
EncExec guarantees that the decrypted data will never be evicted to the memory.
As such, the reserved cache is desynchronized from the memory. Even though
the data are encrypted in the memory, the CPU can still access the unencrypted
data from the cache because the cache precedes the memory. Consequently, the
memory dump contains just the encrypted view of the protected data. Their
unencrypted view only exists in the cache and will be lost when the power is
reset or the system is rebooted. To enable split views of the protected data,
EncExec relies on two key techniques, spatial cache reservation and secure in-
cache execution. The former reserves a small block of the cache by carefully
managing the system’s physical memory allocation. A key challenge here is the
lack of direct control of the cache in the x86 architecture – there are instructions
to enable/disable the cache and to invalidate the whole cache or a cache line, but
there is no ﬁne-grained control over how data is cached and evicted by various
levels of caches. Without precise control of cache replacement, the unencrypted
data in the cache could be accidentally leaked to the memory. To address that,
we observe that x86 processors use the n-way set-associative cache organization.
EncExec thus can reserve a small block of the cache by reserving all the physical
Secure In-Cache Execution
383
memory cached by it. Additionally, the CPU will not spontaneously evict a cache
line unless there are cache conﬂicts. EncExec thus can prevent the unencrypted
data from being evicted to the memory by avoiding conﬂicts for the reserved
cache. EncExec’s second technique utilizes the reserved cache to protect sensitive
data by desynchronizing the cache and the memory.
EncExec can be used in two modes. In the ﬁrst mode, a process is given a
block of the secure memory for storing its critical data. The process can decide
which data to protect. From the process’ point of view, this block of memory
can be used just like the regular memory. In the second mode, EncExec uses the
reserved cache to protect the whole data of the process. Speciﬁcally, it uses the
reserved cache as a window over the process’ data, similar to demand paging.
The data in the window are decrypted in the cache and remain in the cache
until they are replaced by EncExec. The data out of the window only exist in
the memory and stay encrypted. Note that window-based encrypted execution
alone is not secure because the (unencrypted) window often contain critical data
due to program locality. For example, a web server’s private key most likely is
in the window because it is constantly being used to encrypt and decrypt web
traﬃc. Without strict cache control provided by EncExec’s ﬁrst technique, the
unencrypted data can be evicted to the memory and obtained by an attacker.
Between these two modes, the ﬁrst one is more practical because a process has
the best knowledge of its data and the reserved cache is still relatively small
for large programs. The ﬁrst mode can support more processes simultaneously.
However, it does require some changes to the program.
We have built a prototype of EncExec for the FreeBSD 10.2 operating sys-
tem. Our prototyping experience shows that EncExec can be easily integrated
into the kernel and provide an eﬀective defense against cold boot attacks. The
performance overhead is very minor for the ﬁrst mode, while the overhead for
the second mode as expected depends mostly on the process’ program locality.
2 System Design
2.1 Design Goals and Assumptions
EncExec aims at protecting a process’ sensitive data against cold-boot attacks.
Speciﬁcally, it reserves a small block of the (L3) cache and uses the reserved
cache to securely execute the whole process or a part of it in the cache. We have
the following design goals for EncExec:
– Data secrecy: the plaintext view of the protected data should only exist in the
cache. It must be encrypted before being evicted to the memory. The key to
encrypt the data must be protected from cold boot attacks as well.
– Data quantity requirement: most early defenses can only secure small cryp-
tographic keys. A practical solution should support cryptographic algorithms
such as RSA that use large keys.
– Performance isolation: the cache is critical to the overall system performance.
EncExec reserves a small portion of the L3 cache for its use. It should not incur
384
Y. Chen et al.
large performance overhead for other processes whether EncExec is active
or not; i.e., the performance impact of EncExec is isolated from concurrent
processes.
– Application transparency: when operating in the whole-data protection mode,
EncExec should be transparent to the protected process. An unmodiﬁed user
program should be able to run under EncExec just like on a normal OS (but
slower).
Threat Model: the attacker is assumed to have physical access to the
victim’s device. He can launch a cold-boot attack either by transplanting the
(frozen) memory units to a computer under his control [14] or by rebooting
it to a tiny malicious OS [23,28]. We assume that the attacker does not have
malware, such as a kernel rootkit, installed on the victim’s device, otherwise he
could simply obtain the memory through the malware without resorting to cold-
boot attacks. This threat model covers the common scenarios where cold-boot
attacks may be attempted. For example, many business laptops lost in public
places have encrypted hard disks and are protected by screen locks.
Since the attacker has physical control over the device, he could launch other
physical attacks. For example, external expansion buses like FireWire may be
exploited to directly access the physical memory via DMA. Some devices have
enabled debug ports (e.g., the JTAG port on a mobile phone). The attacker
can attach a debugger to these ports and fully control the system. More exotic
attacks, such as monitoring or injecting data on the buses, often require sophisti-
cated equipment and aplenty ﬁnancial support. In this paper, we consider these
attacks out of the scope and assume they are prevented by other defenses, such
as using IOMMU to prevent DMA attacks and disabling debug ports.
A process may have close interaction with its external environment. Sensitive
data could leak to the environment. For example, a word processor often stores
parsed documents in temporary ﬁles. This problem has been addressed by a
number of previous systems [24]. In this paper, we assume the data transferred
out of the process maintain their secrecy by, say, encrypting the ﬁle system and
network communications. Of course, the keys for encryption need to be protected
(by EncExec).
2.2 Design Overview
Figure 1 shows the overall architecture of EncExec. The user space of a process
consists of code and data sections. EncExec focuses on protecting the process’
data against cold boot attacks but leaves the code as is. This is based on the
assumption that the data more likely contain sensitive information that needs
protection, while the code is often publicly available and does not carry private
user information. Nevertheless, EncExec can also be applied to protect the code
if needed. In Fig. 1, the protected data remain encrypted in the memory all
the time, the decrypted data are stored in the part of the L3 cache reserved by
EncExec. EncExec uses the L3 cache to minimize its performance impact because
Secure In-Cache Execution
385
Fig. 1. Overall architecture of EncExec. Three pages of the protected data is in the
window.
recent Intel processors have large, uniﬁed, inclusive L3 caches2. Moreover, the L3
cache is physically indexed and physically tagged. Physical addresses thus solely
determine the allocation of this cache. To enable the split views of the data,
EncExec uses the reserved cache as a (discontinuous) window over the protected
data. The data in the window is decrypted and fully contained within the cache.
Since the cache precedes the memory, the CPU directly accesses the decrypted
data in the cache when it tries to access the data in the window. The data out
of the window remains encrypted in the memory and unaccessible to the CPU.
EncExec extends the kernel’s virtual memory management (VMM) to strictly
control the process’ data access so that no plaintext data will be evicted to
the memory due to cache conﬂicts. Speciﬁcally, only the protected data in the
window (as well as the code and unprotected data) are mapped in the process’
address space. If more protected data are used than the window size, EncExec
selects a page in the window for replacement, similar to demand paging in the
OS. Because a page table can only map memory in pages, the reserved cache
must be page-aligned, and its size is a multiple of the page size. We use the
hardware-accelerated AES (AES-NI [16]) in the counter mode for encryption.
Both the key and the initial vector are randomly generated, and the key and
sub-keys are securely stored in the reserved cache to protect them from cold
boot attacks.
This architecture can support both modes of EncExec. In the ﬁrst mode,
EncExec provides the process with a block of secure memory. Any data stored
in this memory is guaranteed to be protected from cold boot attacks. The process
can decide when and how to use this memory. As such, the program needs to
be (slightly) modiﬁed. For example, we can modify a cryptographic library so
that its stack and session data are allocated from the secure memory. In the
second mode, EncExec protects the complete data of a process. This mode is
transparent to the protected process; no changes to the program are necessary.
2 An uniﬁed cache stores both code and data. An inclusive L3 cache includes all the
data cached by the L1 and L2 caches.
386
Y. Chen et al.
Because we use demand-paging to manage the reserved cache, the amount of the
protected data can be larger than the size of the reserved cache for both modes,
similar to how virtual memory can be larger than the physical memory. In the
rest of this section, we describe in detail the design of EncExec. EncExec has
two key techniques: spatial cache reservation reserves a small, continuous block
of the L3 cache for exclusive use by EncExec, secure in-cache execution leverages
the reserved cache to protect the process data.
2.3 Spatial Cache Reservation
EncExec’s ﬁrst technique reserves a small part of the L3 cache for its use. This
is a challenging task on the x86 architecture because x86 transparently manages
cache assignment and replacement. It does not provide explicit and ﬁne-grained
control of the cache. A process has no direct control over how its data are cached,
and the CPU decides transparently which cached line3 to be replaced when there
is a cache conﬂict. To replace a cache line, the CPU ﬁrst evicts the old contents
back to the memory and then loads the new contents from the memory. EncExec
needs to precisely control how the protected data are cached and how the cache is
replaced to avoid conﬂicts in the reserved cache. Without this control, the CPU
can evict some of the reserved cache to the memory, leaking the unencrypted
data to the physical memory. To address that, EncExec enforces the following
two rules: