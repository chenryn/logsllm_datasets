2.8, and 1.2 minutes, respectively. Other charts in this section were
generated using œµ = 0.1 as it offered a good trade-off between
performance, stability, and run time.
5.3.2 Effect of Varying Observation Period Length. When mining
policies with a variable observation period length, a larger observa-
tion window generally results in higher T PR but also higher F PR
because intuitively mining algorithms are given more privileges
in larger observation periods. This trend is also present with our
mining algorithm, albeit not very noticeable. The results of varying
the observation period length between |LOBP | = [7, 15, 30, 45, 60]
days are shown in Figure 6. As |LOBP | increases, TPR generally
increases compared to lower |LOBP | periods of similar F PR values,
0.9940.9950.9960.9970.9980.999100.20.40.60.81TPRFPR|ùïÉuncov|    AUC=0.9993|{ùïÉuncov}|  AUC=0.9983|ùïÉOBP|      AUC=0.9974|{ùïÉOBP}|    AUC=0.9970œâ=1/10œâ=1/100.980.9850.990.995100.020.040.060.080.1TPRFPRŒµ=0.3  AUC=0.9640Œµ=0.2  AUC=0.9940Œµ=0.1  AUC=0.9993Œµ=0.05 AUC=0.9996and the resulting ROC curve becomes smoother. As with œµ, we
observe a trade-off between |LOBP | and run time. At œâ = 1
16, the
average mining times for |LOBP | = [7, 15, 30, 45, 60] were 5.7, 6.5,
7.2, 10.5 and 12.8 minutes, respectively. Shorter observation peri-
ods such as |LOBP | = [7, 15] generally produced more fluctuations
in the resulting trend lines, which is a common and expected oc-
currence when using machine learning or data mining techniques
with insufficient data. Other charts in this section were generated
using |LOBP | = 30 days for a good trade-off between performance,
stability, and run time.
Figure 7: Comparison of ABAC vs. RBAC Performance
more privileges (higher TPR) than the RBAC algorithm with 120
days of data. The ABAC algorithm was also able to correctly restrict
more unnecessary privileges (lower FPR) than the RBAC algorithm
operating on only 3 days of data. This is due to the ability of the
ABAC algorithm to identify patterns and create policies based on
attributes vs. the RBAC algorithm which is restricted to using only
RBAC semantics.
6 CONCLUSION
This paper explored an approach for automatically generating least
privilege ABAC policies that balance between minimizing under-
and over-privilege assignment errors. We formally defined the
ABAC Privilege Error Minimization Problem (ABACP EMP ). We
took an unsupervised rule mining approach to design an algorithm
which automatically performs ABAC policy generation by mining
audit logs with a variable weighting between under- and over-
privilege. We designed a policy scoring algorithm for evaluating
ABAC policies from the least privilege perspective by using out-of-
sample validation. We designed performance optimization methods
including feature selection, partitioning, and parallelization to ad-
dress the challenges of large ABAC privilege spaces. Finally, we
presented the results of applying our approach on a real-world
dataset to demonstrate its effectiveness and its better performance
than an RBAC approach. The algorithms and methods that we
developed in this work do not depend on the system and the organi-
zation from which we obtained the valuable dataset. They could be
adopted by any organization to start their ABAC policy generation
and deployment as we highlighted at the beginning of Section 4.
Overall, we hope our work can help promote a wider and faster de-
ployment of the ABAC model, and can help unleash the advantages
of ABAC to better protect large and complex computing systems.
ACKNOWLEDGMENTS
This research was supported in part by the NSF grant OIA-1936968.
Figure 6: Performance as Observation Period Varies
5.4 ABAC vs. RBAC Performance
We now compare the performance of our ABAC algorithm against
an RBAC approach. For this comparison, we use the naive algo-
rithm presented in [16], which builds an RBAC policy based on
the permissions exercised during an observation period. Although
this RBAC algorithm is fairly simple, it performed quite well in the
scenario that sought an equal balance between minimizing under-
and over-privilege compared to more sophisticated algorithms [16].
The ROC curve of our ABAC algorithm and the RBAC algorithm
from [16] are presented in Figure 7. Our ABAC algorithm used a
fixed observation period size of 30 days, an itemset frequency œµ =
0.1, and the over-privilege weight varied between œâ = [ 1
8192 , ..., 16]
by powers of 2 to generate the data points. For the RBAC algorithm,
there is no variable similar to œâ that can be used to instruct the
algorithm to directly vary the importance between under- and
over-privilege. However, varying the observation period length
effectively serves this purpose by causing more or fewer privileges
to be granted by the algorithm, so the observation period length was
varied between [3, 7, 15, 30, 45, 60, 75, 90, 105, 120] days to generate
the data points for the RBAC algorithm in Figure 7.
Our ABAC algorithm significantly outperformed the RBAC al-
gorithm across the ROC curves in Figure 7. With only 30 days
worth of data, the ABAC algorithm was able to correctly grant
0.990.9920.9940.9960.998100.20.40.60.81TPRFPR 7 Days   AUC=0.996315 Days   AUC=0.998530 Days   AUC=0.999345 Days   AUC=0.999160 Days   AUC=0.99870.60.650.70.750.80.850.90.95100.050.10.150.20.250.3TPRFPRABAC AUC=0.9973RBAC AUC=0.9269REFERENCES
[1] Rakesh Agrawal, Ramakrishnan Srikant, et al. 1994. Fast algorithms for mining
association rules. In Proceedings of the International Conference on Very Large
Data Bases, VLDB, Vol. 1215. 487‚Äì499.
[2] Amazon Web Services. 2019. AWS CloudTrail. https://aws.amazon.com/
cloudtrail/. Accessed: 2019-06-09.
[3] Amazon Web Services. 2019.
AWS CloudTrail Log File Examples.
https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-
log-file-examples.html. Accessed: 2019-06-09.
[4] Amazon Web Services. 2019.
AWS Products and Services.
https://
aws.amazon.com/products/. Accessed: 2019-06-09.
[5] Lujo Bauer, Scott Garriss, and Michael K Reiter. 2011. Detecting and resolv-
ing policy misconfigurations in access-control systems. ACM Transactions on
Information and System Security (TISSEC) 14, 1 (2011), 2.
[6] Jiawei Han, Jian Pei, Yiwen Yin, and Runying Mao. 2004. Mining frequent patterns
without candidate generation: A frequent-pattern tree approach. Data mining
and knowledge discovery 8, 1 (2004), 53‚Äì87.
[7] Trevor Hastie, Jerome Friedman, and Robert Tibshirani. 2001. The elements of
statistical learning. Springer series in statistics New York, NY, USA.
[8] Vincent C Hu et al. 2013. NIST 800-162: Guide to attribute based access control
(ABAC) definition and considerations (Draft).
[9] Carlos Cotrini Jim√©nez, Thilo Weghorn, and David A. Basin. 2018. Mining ABAC
Rules from Sparse Logs. Proceedings of the IEEE European Symposium on Security
and Privacy (EuroS&P) (2018), 31‚Äì46.
[10] John D. Kelleher, Brian Mac Namee, and Aoife D‚ÄôArcy. 2015. Fundamentals of
Machine Learning for Predictive Data Analytics: Algorithms, Worked Examples,
and Case Studies. MIT Press.
[11] Ian Molloy, Hong Chen, Tiancheng Li, Qihua Wang, Ninghui Li, Elisa Bertino,
Seraphin Calo, and Jorge Lobo. 2008. Mining roles with semantic meanings. In
Proceedings of the ACM Symposium on Access Control Models and Technologies.
[12] Ian Molloy, Youngja Park, and Suresh Chari. 2012. Generative Models for Access
Control Policies: Applications to Role Mining over Logs with Attribution. In
Proceedings of the ACM Symposium on Access Control Models and Technologies.
[13] Linux Kernel Organization. 2019. Ext4 Disk Layout. https://www.kernel.org/
doc/html/latest/filesystems/ext4/index.html. Accessed: 2019-09-14.
[14] Carlos E. Rubio-Medrano, Josephine Lamp, Adam Doup√©, Ziming Zhao, and Gail-
Joon Ahn. 2017. Mutated Policies: Towards Proactive Attribute-based Defenses
for Access Control. In Proceedings of the Workshop on Moving Target Defense.
[15] Jerome H Saltzer and Michael D Schroeder. 1975. The protection of information
in computer systems. Proc. IEEE 63, 9 (1975), 1278‚Äì1308.
[16] Matthew W Sanders and Chuan Yue. 2018. Minimizing Privilege Assignment
Errors in Cloud Services. In Proceedings of the ACM Conference on Data and
Application Security and Privacy. 2‚Äì12.
[17] Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and Charles E. Youman. 1996.
Role-Based Access Control Models. IEEE Computer 29, 2 (1996), 38‚Äì47.
[18] SANS Institute. 2019.
A Compliance Primer
for
IT Professionals.
https://www.sans.org/reading-room/whitepapers/compliance/compliance-
primer-professionals-33538. Accessed: 2019-06-09.
[19] Harold F Tipton and Kevin Henry. 2006. Official (ISC) 2 guide to the CISSP CBK.
Auerbach Publications.
[20] Zhongyuan Xu and Scott D Stoller. 2014. Mining attribute-based access control
policies from logs. In Proceedings of the IFIP DBSec. Springer, 276‚Äì291.
[21] Zhongyuan Xu and Scott D Stoller. 2015. Mining attribute-based access control
policies. IEEE Transactions on Dependable and Secure Computing 12, 5 (2015).
A APPENDIX ON AUDIT LOG EXAMPLES
A.1 Amazon EC2 Log Entry Example
Figure 8 is an Amazon EC2 log example [3]. It shows user Alice
started an EC2 virtual machine instance (‚ÄúeventName‚Äù: ‚ÄúStartIn-
stances‚Äù) with the instanceId ‚Äúi-ebeaf9e2‚Äù. No ‚ÄúerrorCode‚Äù field is
present in the log entry, so we can tell that the request succeeded.
From the response elements we can tell that the virtual machine
instance has been moved from the ‚Äústopped‚Äù state into the ‚Äúpend-
ing‚Äù state which indicates it is starting up. The log provides several
other attributes such as eventTime, awsRegion, sourceIPAddress,
and userAgent that may be used by an ABAC algorithm. In this log
entry we see ‚ÄúawsRegion‚Äù:‚Äúus-east-2‚Äù. If, for example, Alice consis-
tently creates instances in ‚Äúus-east-2‚Äù only, a mining algorithm can
use this information to create a policy which only allows Alice to
create instances in that region.
{"Records": [{
"eventVersion": "1.0",
"userIdentity": {
"type": "IAMUser",
"principalId": "EX_PRINCIPAL_ID",
"arn": "arn:aws:iam::123456789012:user/Alice",
"accessKeyId": "EXAMPLE_KEY_ID",
"accountId": "123456789012",
"userName": "Alice"
},
"eventTime": "2014-03-06T21:22:54Z",
"eventSource": "ec2.amazonaws.com",
"eventName": "StartInstances",
"awsRegion": "us-east-2",
"sourceIPAddress": "205.251.233.176",
"userAgent": "ec2-api-tools 1.6.12.2",
"requestParameters": {"instancesSet":
{"items": [{"instanceId": "i-ebeaf9e2"}]}},
"responseElements": {"instancesSet": {"items": [{
"instanceId": "i-ebeaf9e2",
"currentState": {
"code": 0,
"name": "pending"
},
"previousState": {
"code": 80,
"name": "stopped"
}
}]}}
}]}
Figure 8: AWS EC2 Log Entry Example
A.2 AWS IAM Log Entry Example
Figure 9 is an Amazon IAM log example [3]. It shows user Alice
created a user (‚ÄúeventName‚Äù: ‚ÄúCreateUser‚Äù) with the username
‚ÄúBob‚Äù. Again, no ‚ÄúerrorCode‚Äù field is present in the log entry, so we
can tell that the request succeeded. From the userAgent field in this
log entry we see that Alice is using the aws-cli (i.e., AWS Command
Line Interface) to perform this operation. Some operations are more
likely to be run from the CLI or in code from automated tools. Such
information can help an ABAC policy miner create policies which
grant requests based on the user agent being used.
{"Records": [{
"eventVersion": "1.0",
"userIdentity": {
"type": "IAMUser",
"principalId": "EX_PRINCIPAL_ID",
"arn": "arn:aws:iam::123456789012:user/Alice",
"accountId": "123456789012",
"accessKeyId": "EXAMPLE_KEY_ID",
"userName": "Alice"
},
"eventTime": "2014-03-24T21:11:59Z",
"eventSource": "iam.amazonaws.com",
"eventName": "CreateUser",
"awsRegion": "us-east-2",
"sourceIPAddress": "127.0.0.1",
"userAgent": "aws-cli/1.3.2 Python/2.7.5 Windows/7",
"requestParameters": {"userName": "Bob"},
"responseElements": {"user": {
"createDate": "Mar 24, 2014 9:11:59 PM",
"userName": "Bob",
"arn": "arn:aws:iam::123456789012:user/Bob",
"path": "/",
"userId": "EXAMPLEUSERID"
}}
}]}
Figure 9: AWS IAM Log Entry Example
B APPENDIX ON ABAC POLICY EXAMPLE
Figure 10 is an example ABAC rule generated by our Algorithm 1
and written in JSON format. This rule allows three specific users
(actual user names redacted) to run any operation of the AWS
CloudFormation service when those users are MFA authenticated
(i.e., they passed multi-factor authentication). AWS CloudForma-
tion is typically used only by administrators for describing and
provisioning infrastructure resources in a cloud environment. The
facts that the access key is none, the userAgent is the service name,
and the eventType is ‚ÄúAwsApiCall‚Äù all restrict these operations to
be run from the AWS web console and not from any code or CLI
(Command Line Interface).
This generated ABAC rule can be deployed to systems that sup-
port ABAC policy deployment and enforcement. AWS has some
ABAC support by using ‚Äúcondition‚Äù elements. For example, this
ABAC rule can be deployed as an AWS IAM (Identity and Access
Management) policy as shown in Figure 11.
{
"Version": "2017-10-17",
"Statement": [
{
"Effect": "Allow",
"Action": [
"cloudformation:*",
],
"Resource": "*",
"Condition": {
{
}
"sourceIPAddress": ["cloudformation.amazonaws.com"],
"userIdentity.sessionContext.attributes.mfaAuthenticated": ["true"],
"userIdentity.accessKeyId": ["NONE"],
"userIdentity.userName": ["USER1","USER2","USER3"],
"userAgent ": ["cloudformation.amazonaws.com"],
"eventType": ["AwsApiCall"]
}
}
]
}
"StringEquals": {"aws:username": ["USER1","USER2","USER3"]},
"BoolIfExists": {"aws:MultiFactorAuthPresent": true}
Figure 11: IAM Policy Deployment of the Rule in Figure 10
Figure 10: Example ABAC Rule Generated by Algorithm 1