### Nginx 模块列表
- `ngx_http_upstream_keepalive_module` (静态)
- `ngx_http_upstream_check_module` (静态)
- `ngx_http_upstream_consistent_hash_module` (静态)
- `ngx_http_secure_link_module` (静态)
- `ngx_http_browser_module` (静态)
- `ngx_http_memcached_module` (静态)
- `ngx_http_scgi_module` (静态)
- `ngx_http_uwsgi_module` (静态)
- `ngx_http_ssl_module` (静态)
- `ngx_http_split_clients_module` (静态)

### 第二部分：实战案例

- `ngx_http_fastcgi_module` (静态)
- `ngx_http_proxy_module` (静态)
- `ngx_http_rewrite_module` (静态)
- `ngx_http_referer_module` (静态)
- `ngx_http_map_module` (静态)
- `ngx_http_copy_filter_module` (静态)
- `ngx_http_upstream_session_sticky_module` (静态)
- `ngx_http_headers_filter_module` (静态)
- `ngx_http_trim_filter_module` (静态)
- `ngx_http_footer_filter_module` (静态)
- `ngx_http_userid_filter_module` (静态)
- `ngx_http_gunzip_filter_module` (静态)
- `ngx_http_addition_filter_module` (静态)
- `ngx_http_sub_filter_module` (静态)
- `ngx_http_charset_filter_module` (静态)
- `ngx_http_ssi_filter_module` (静态)
- `ngx_http_postpone_filter_module` (静态)
- `ngx_http_spdy_filter_module` (静态)
- `ngx_http_header_filter_module` (静态)
- `ngx_http_reqstat_module` (静态)
- `ngx_http_upstream_least_conn_module` (静态)
- `ngx_http_stub_status_module` (静态)

---

## Page 109: 准备工作

**准备工作**
- JDK 目录
- Tomcat 镜像

**注意事项**
在生产环境中使用这些镜像时，需要注意以下几点：
1. 设计Tomcat的Dockerfile，默认模式。
2. Tomcat的能力不如Apache，但它是一个Servlet和JSP容器，是独立的Servlet容器。
3. Tomcat可以处理HTML页面（但处理静态HTML的能力不如Apache）。
4. Tomcat最初是由Sun的软件架构师詹姆斯·邓肯·戴维森开发的，并由Sun贡献给Apache软件基金会。
5. 在中小型系统和并发访问用户不多的情况下，Tomcat被广泛用于开发和调试JSP程序。

**定制自己的Docker镜像**
1. 使用`sun_jdk1.6`、`tomcat7.0`和`ubuntu14.04`环境。
2. 创建Dockerfile和run.sh文件。
3. 架构师应通过Dockerfile或其他方式构建统一的镜像，以确保项目组所有成员使用一致的环境。

**搜索Tomcat相关镜像**
```bash
$ sudo docker search tomcat | wc -l
```
可以看到，已经有285个相关的镜像。个人开发或测试时，可以随意选择一个镜像并按提示启动应用。

---

## Page 110: Dockerfile 和其他脚本文件

**Dockerfile 内容**
```dockerfile
FROM sshd:dockerfile

# 安装与Tomcat用户认证相关的软件
RUN apt-get install -yq --no-install-recommends wget pwgen ca-certificates && \
    echo "Asia/Shanghai" > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata && \
    apt-get clean

# 设置环境变量
ENV DEBIAN_FRONTEND noninteractive
ENV JAVA_HOME /jdk
ENV CATALINA_HOME /tomcat

# 复制Tomcat和JDK文件到镜像中
ADD jdk/jdk
ADD apache-tomcat-7.0.56.zip /tomcat

# 创建Tomcat管理员用户
ADD create_tomcat_admin_user.sh /create_tomcat_admin_user.sh
RUN /create_tomcat_admin_user.sh

# 暴露端口
EXPOSE 8080

# 启动脚本
ADD run.sh /run.sh
CMD ["/run.sh"]
```

**创建Tomcat用户和密码脚本文件**
```bash
#!/bin/bash
PASS=$(pwgen -s 12)
sed -i 's|<tomcat-users>|<tomcat-users>\n<user username="admin" password="'$PASS'" roles="manager-gui,manager-script,manager-jmx,admin-gui,admin-script"/>' $CATALINA_HOME/conf/tomcat-users.xml
echo "admin:$PASS"
```

**编写run.sh脚本文件**
```bash
#!/bin/bash
if [ ! -f /.tomcat_admin_created ]; then
    /create_tomcat_admin_user.sh
    touch /.tomcat_admin_created
fi

/usr/sbin/sshd -D &
exec $CATALINA_HOME/bin/catalina.sh run
```

---

## Page 112: 创建和测试镜像

**创建镜像**
```bash
$ sudo docker build -t tomcat7.0:jdk1.6 .
```

**启动容器进行测试**
```bash
$ sudo docker run -d -P tomcat7.0:jdk1.6
```

**查看映射的端口信息**
```bash
$ sudo docker ps
```

**获取Tomcat密码**
```bash
$ sudo docker logs <container_id>
```

**登录Tomcat管理界面**
在本地浏览器中访问`http://127.0.0.1:<mapped_port>`，输入从`docker logs`中得到的密码即可登录。

---

希望以上内容能够帮助你更好地理解和使用Nginx模块及Docker镜像。如果有任何问题，请随时联系我。