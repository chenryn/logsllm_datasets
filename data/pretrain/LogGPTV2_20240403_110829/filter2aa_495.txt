# Shellcodes for ARM

**Title: Your Pills Don’t Work on Me, x86**

**Presenters:**
- Svetlana Gaivoronski (@SadieSv)
- Ivan Petrov (@_IvanPetrov_)

## Why is it Important?

- **Increasing Number of ARM-Based Devices**: The proliferation of ARM-based devices in the market.
- **Significant Number of Vulnerable Software**: A large number of software applications are vulnerable to exploitation.
- **Huge Base of Reusable Code**: Extensive libraries and codebases that can be repurposed for malicious use.
- **Memory Corruption Errors Still Exist**: Common vulnerabilities like buffer overflows and other memory corruption issues persist.

## Is it Decidable?

### Components of a Shellcode
- **Activator**
  - NOP (No Operation)
  - GetPC (Get Program Counter)
- **Decryptor**
- **Payload**
- **Return Address Zone**

### Limitations
- **Structure Limitations**: Constraints imposed by the structure of the shellcode.
- **Size Limitations**: Limited space available for the shellcode.

## Maybe It’s Not That Bad?

### Example: Stack Canaries
- **Conditional Execution**:
  ```assembly
  CMP r1, #0
  LDRNE r0, [r2]
  LDREQ r0, [r3]
  BL print
  ```

- **Without Conditional Instructions**:
  ```assembly
  BL print
  ```

- **With Conditional Instructions**:
  ```assembly
  CMP r1, #0
  LDRNE r0, [r2]
  LDREQ r0, [r3]
  BL print
  ```

## Thumb CPU Mode

### Example: `chmod("/etc/passwd", 0777)` in 31 Bytes
```assembly
\x78\x46         // mov r0, pc
\x10\x30         // adds r0, #16
\xff\x21         // movs r1, #255
\xff\x31         // adds r1, #255
\x01\x31         // adds r1, #1
\x0f\x37         // adds r7, #15
\x01\xdf         // svc 1
\x40\x40         // eors r0, r0
\x01\x27         // movs r7, #1
\x01\xdf         // svc 1
\x2f\x65\x74\x63 // "/etc"
\x2f\x70\x61\x73 // "pas"
\x73\x77         // "sw"
\x64             // "d"
```

### Example: `chmod("/etc/passwd", 0777)` in 51 Bytes
```assembly
\x0f\x00\xa0\xe1 // mov r0, pc
\x20\x00\x90\xe2 // adds r0, r0, #32
\xff\x10\xb0\xe3 // movs r1, #255
\xff\x10\x91\xe2 // adds r1, r1, #255
\x01\x10\x91\xe2 // adds r1, r1, #1
\x0f\x70\x97\xe2 // adds r7, r7, #15
\x01\x00\x00\xef // svc 1
\x00\x00\x30\xe0 // eors r0, r0, r0
\x01\x70\xb0\xe3 // movs r7, #1
\x01\x00\x00\xef // svc 1
\x2f\x65\x74\x63 // "/etc"
\x2f\x70\x61\x73 // "pas"
\x73\x77         // "sw"
\x64             // "d"
```

## Local Recap

- **Static Analysis**
- **Dynamic Analysis**

## What Causes Such Problems? (Mostly)

- **New Obfuscation Techniques**:
  1. **Conditional Execution**
  2. **Additional CPU Modes**

## The Next Step?

- **Ongoing Work on x86 Shellcode Detection**:
  - Set of features for detection.
  - Are these features applicable to ARM-based shellcodes?
  - Can we identify new features specific to ARM?

## Static Features

- **Correct Disassembly for a Chain of at Least K Instructions**
- **Command of CPU Mode Switching (BX Rm)**
- **Existence of Get-UsePC Code**
- **Number of Specific Patterns Exceeds Some Threshold**
- **Arguments Initialization Strictly Before System Calls**
- **Write to Memory and Load from Memory Cycles**
- **Return Address in Some Range of Values**
- **Last Instruction in the Chain is (BL, BLX), or System Call (svc)**
- **Operands of Self-Identified Code and Code with Indirect Jumps Must Be Initialized**

## Dynamic Features

- **Number of Payload Reads Exceeds Threshold**
- **Number of Unique Writes into Memory Exceeds Threshold**
- **Control Flow Redirected to “Just Written” Address Location at Least Once**
- **Number of Executed wx-Instructions Exceeds Threshold**
- **Conditional-Based Signatures**

## Hybrid Classifier

- **Future Work**: Develop another module for shellcode detection tool (Demorpheus).

## Experiments

- **Datasets**:
  - Shellcodes
  - Legitimate Binaries
  - Random Data
  - Multimedia

- **Results**:
  - **False Negatives (FN)**: 0
  - **False Positives (FP)**:
    - Legitimate Binaries: 1.1%
    - Multimedia: 0.33%
    - Random Data: 0.27%

- **Throughput**:
  - Shellcodes: 56.5 Mb/s
  - Legitimate Binaries: 64.8 Mb/s
  - Multimedia: 93.8 Mb/s
  - Random Data: 99.5 Mb/s
  - **Hardware**: 2 GHz Intel Core i7

## Questions?

- @SadieSv
- @_IvanPetrov_

---

This optimized version provides a clearer and more structured presentation of the information, making it easier to follow and understand.