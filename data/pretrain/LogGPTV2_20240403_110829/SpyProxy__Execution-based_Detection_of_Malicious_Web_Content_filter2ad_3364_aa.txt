# Title: SpyProxy: Execution-based Detection of Malicious Web Content

## Authors
Alexander Moshchuk, Tanya Bragin, Damien Deville, Steven D. Gribble, and Henry M. Levy

## Affiliation
Department of Computer Science & Engineering, University of Washington  
Email: {anm, tbragin, damien, gribble, levy}@cs.washington.edu

## Abstract
This paper explores the use of execution-based web content analysis to protect users from internet-borne malware. Many anti-malware tools rely on signatures to identify malware infections on a user’s PC. In contrast, our approach involves rendering and observing active web content in a disposable virtual machine (VM) before it reaches the user’s browser, thereby identifying and blocking pages with suspicious behavior. Execution-based analysis can defend against undiscovered threats and zero-day attacks. However, this approach faces challenges, such as achieving good interactive performance and limitations in defending against non-deterministic malicious content.

To evaluate the potential of our execution-based technique, we designed, implemented, and measured a new proxy-based anti-malware tool called SpyProxy. SpyProxy intercepts and evaluates web content in transit from web servers to the browser. We present the architecture and design of our SpyProxy prototype, focusing particularly on the optimizations developed to make on-the-fly execution-based analysis practical. Our evaluation shows that SpyProxy detected every malware threat to which it was exposed, while adding only 600 milliseconds of latency to the start of page rendering for typical content.

## 1. Introduction
Web content has undergone a significant transformation. Early web pages contained simple, passive content, while modern web pages are increasingly active, containing embedded code such as ActiveX components, JavaScript, or Flash that executes in the user’s browser. Active content enables highly interactive applications but also introduces new security threats, such as "drive-by-downloads" that exploit browser flaws to install malware on the user’s PC.

This paper explores a new execution-based approach to combating web-borne malware. In this approach, we render and execute web content in a disposable, isolated execution environment before it reaches the user’s browser. By observing the side-effects of the execution, we can detect malicious behavior in advance in a safe environment. This technique has significant advantages: because it is based on behavior rather than signatures, it can detect previously unseen threats (e.g., zero-day attacks). However, it raises several crucial questions:
1. Can execution-based analysis successfully detect today’s malware threats?
2. Can the analysis be performed without harming browser responsiveness?
3. What are the limitations of this approach, especially in the face of complex, adversarial scripts that contain non-determinism?

Our goal is to demonstrate the potential of execution-based tools that protect users from malicious content while browsing the web. To achieve this, we designed, prototyped, and evaluated a new anti-malware service called SpyProxy. SpyProxy is implemented as an extended web proxy: it intercepts users’ web requests, downloads content on their behalf, and evaluates its safety before returning it to the users. If the content is unsafe, the proxy blocks it, shielding users from the threat. Our intention is not to replace other anti-malware tools but to add a new weapon to the user’s arsenal; SpyProxy is complementary to existing anti-malware solutions.

SpyProxy combines two key techniques:
1. It executes web content on-the-fly in a disposable VM, identifying and blocking malware before it reaches the user’s browser.
2. It monitors executing web content by looking for suspicious “trigger” events (such as registry writes or process creation) that indicate potentially malicious activity. Our analysis is therefore based on behavior rather than signatures.

In principle, SpyProxy can function either as a network service or as a client-side protection tool. While each has its merits, we focus on the network service in this paper because it is more challenging to construct efficiently. We describe a set of performance optimizations necessary to meet our goals.

In experiments with clients fetching malicious web content, SpyProxy detected every threat, some of which were missed by other anti-spyware systems. Our evaluation shows that with careful implementation, the performance impact of an execution-based malware detector can be reduced to the point where it has a negligible effect on the user’s browsing experience. Despite using a “heavyweight” internet proxy and VM techniques for content checking, we introduce an average delay of only 600 milliseconds to the start of rendering in the client browser. This is small considering the amount of work performed and relative to the many seconds required to fully render a page.

The remainder of the paper is organized as follows:
- Section 2 presents the architecture and implementation of SpyProxy.
- Section 3 describes the performance optimizations used to achieve acceptable latency.
- Section 4 evaluates the effectiveness and performance of our SpyProxy prototype.
- Section 5 discusses related work.
- Section 6 concludes the paper.

## 2. Architecture and Implementation
### 2.1 Defending Against Modern Web Threats
Over the past several years, attackers have routinely exploited vulnerabilities in web browsers to infect users with malicious code such as spyware. A study of web content in October 2005 found that a surprisingly large fraction of pages contained drive-by-download attacks. These attacks install spyware when a user simply visits a malicious web page.

Many defenses have been built to address this problem, but none are perfect. For example, many users install commercial anti-spyware or anti-virus tools, which are typically signature-based. These tools look for malware that is already installed, attempting to remove it after the fact. Firewall-based network detectors can filter out some well-known and popular attacks but typically rely on static scanning to detect exploits, limiting their effectiveness. They also require the deployment of hardware devices at organizational boundaries, excluding most household users. Alternatively, users can examine blacklists or public warning services before visiting a web site, but this can be less reliable.

None of these defenses can stop zero-day attacks based on previously unseen threats. Furthermore, signature databases struggle to keep up with the rising number of malware variants. As a result, many of today’s signature-based tools fail to adequately protect users from malicious code on the web.

### 2.2 Design Goals
SpyProxy is a new defense tool designed for today’s web threats. It aims to keep web browsing convenient while providing on-the-fly protection from malicious web content, including zero-day attacks. The SpyProxy architecture has three high-level goals:
1. **Safety**: SpyProxy should protect clients from harm by preventing malicious content from reaching client browsers.
2. **Responsiveness**: The use of SpyProxy should not impair the interactive feel and responsiveness of the user’s browsing experience.
3. **Transparency**: The existence and operation of SpyProxy should be relatively invisible and compatible with existing content-delivery infrastructure (both browsers and servers).

Providing safety while maintaining responsiveness is challenging. To achieve both, SpyProxy uses several content analysis techniques and performance-enhancing optimizations, which we will describe next.

### 2.3 Proxy-based Architecture
Figure 1 shows the architecture of a simplified version of SpyProxy. Key components include the client browser, SpyProxy, and remote web servers. When the client browser issues a new request to a web server, the request first flows through SpyProxy where it is checked for safety.

When a user requests a web page, the browser software generates an HTTP request that SpyProxy must intercept. Proxies typically use one of two methods for this: browser configuration (specifying an HTTP proxy) or network-level forwarding that transparently redirects HTTP requests to a proxy. Our prototype system currently relies on manual browser configuration.

#### 2.3.1 Static Analysis of Web Content
On receiving content from the Internet, the SpyProxy front end first performs a rudimentary form of static analysis. The goal of static analysis is simple: if we can verify that a page is safe, we can pass it directly to the client without a sophisticated and costly VM-based check. If static analysis were our only checking technique, our analysis tool would need to be complex and complete. However, static analysis is just a performance optimization. Content that can be analyzed and determined to be safe is passed directly to the client; content that cannot is passed to a VM worker for additional processing.

Our static analyzer is conservative. If it cannot identify or process an object, it declares it to be potentially unsafe and submits it to a VM worker for examination. For example, our analyzer currently handles normal and chunked content encodings but not compressed content. Future improvements to the analyzer could reduce the number of pages forwarded to the VM worker and therefore increase performance.

When the analyzer examines a web page, it tries to determine whether the page is active or passive. Active pages include executable content, such as ActiveX, JavaScript, and other code; passive pages contain no such interpreted or executable code. Pages that contain active content must be analyzed dynamically.

It is possible for seemingly passive content to compromise the user’s system if the renderer has security holes. Such flaws have occurred in the past in both the JPEG and PNG image libraries. For this reason, we consider any non-HTML content types to be unsafe and send them for dynamic processing. In principle, a browser’s HTML processor could have vulnerabilities as well; it is possible to configure SpyProxy to disable all static checking if this is a concern.

We validated the potential benefits of static checking with a small measurement study, where we collected a 17-hour trace of web requests generated by the user population in our department. We found that 54.8% of HTML pages transferred contain passive content. Thus, there can be significant benefit in identifying these pages and avoiding our VM-based check for them.

## 3. Performance Optimizations
This section describes the performance optimizations that we used to achieve acceptable latency. [Detailed description of optimizations to follow]

## 4. Evaluation
This section evaluates the effectiveness and performance of our SpyProxy prototype. [Detailed evaluation to follow]

## 5. Related Work
This section discusses related work. [Detailed discussion to follow]

## 6. Conclusion
This section concludes the paper. [Detailed conclusion to follow]