title:A Fast Automaton-Based Method for Detecting Anomalous Program Behaviors
author:R. Sekar and
M. Bendre and
D. Dhurjati and
P. Bollineni
A Fast Automaton-Based Method for Detecting Anomalous Program Behaviors 
R. Sekar 
M. Bendre 
D. Dhurjati 
State University of New York 
Stony Brook, NY  11794 
P. Bollineni 
Iowa State Univeristy 
Ames, IA 50014 
pradeep Q cs.iastate.edu 
{sekar,mbendre,dinakar} Q cs.sunysby.edu 
Abstract 
Forrest  et a1  introduced  a  new  intrusion detection  ap- 
proach that ident$es  anomalous sequences of system  calls 
executed  by programs.  Since their work, anomaly detection 
on system call sequences has become perhaps the most suc- 
cessful  approach for detecting  novel intrusions.  A  natural 
way for learning sequences  is to use a jinite-state automa- 
ton (FSA). However; previous  research  seemed  to indicate 
that FSA-learning is coniputationally expensive, that it can- 
not  be  completely automated,  or that the space  usage  of 
the FSA  may be excessive.  We present a new approach in 
this paper that overcomes  these dificulties.  Our approach 
buildsa compact FSA in a fully automaticand eficient man- 
ner; without requiring access to source  code for programs. 
The space requirements for the FSA is low - of the order of 
a few kilobytes for typical programs.  The FSA  uses only a 
constant time per system call during the learning us well as 
detection period.  This factor leads to low overheads for in- 
trusion detection.  Unlike many of  the previous techniques, 
our  FSA-technique can  capture  both short  term and  long 
term temporal relationships  among  system calls, and thus 
perform  more  accurute detection.  For  instance,  the FSA 
can capture common program structures  such as branches, 
joins, loops etc.  This enables our approach to generalize 
and predict future behaviors from past behaviors.  For  in- 
stance, i f a  program executed a loop once in an execution, 
the FSA approach can generalize and predict that the same 
loop may be executed  zero or more times in subsequent ex- 
ecutions.  As a  result,  the training periods needed for our 
FSA based approach are shortel:  Moreover; false positives 
are reduced  without increasing the likelihood of missing at- 
tacks.  This paper describes our FSA  based  technique and 
presents  a  comprehensive  experimental  evaluation  of  the 
technique. 
1. Introduction 
Forrest et al [5] demonstrated that effective intrusion de- 
tection techniques can be developed by learning normal pro- 
gram behaviors, and detecting deviations from this norm. In 
contrast with users,  programs tend to have more narrowly- 
defined  behaviors.  This enables more accurate  learning of 
normal behaviors, and thus improves the accuracy  of intru- 
sion detection. 
Forrest  et  al’s  [SI  approach  characterizes  normal  pro- 
gram behaviors in terms of sequences of system calls made 
by  them.  Anomalous program behavior produces system 
call  sequences that  have  not  been  observed  under normal 
operation. In order to make the learning algorithm compu- 
tationally tractable, they  break  a system call sequence into 
substrings of  a  fixed  length N. These  strings, called  N -  
grams, are learnt by  storing them in a table.  In practice,  N 
must be small  ( [ 5 ]  suggests a value of 6) since the number 
of  iV-grams  grows exponentially with  N .   Figure  1 illus- 
trates the N-grams associated with a simple program, where 
a value of N  = 3 has been used for illustrative purposes. 
A drawback of using small values of N  is that the learn- 
ing algorithm becomes ineffective in capturing correlations 
among system calls that  occur over  longer spans.  For  in- 
stance, the program in Figure  1  will  never produce the se- 
quence S,S,S,S,. However, the trigrams  in this sequence 
(S0S3S4 and  S3SdS7) are produced by  the program,  and 
hence the  N-gram learning algorithm would treat  this se- 
quence as normal.  The second difficulty with the N-gram 
algorithm is that  it can recognize only the set of  N-grams 
encountered during training; similar behaviors that produce 
small variations in the N-grams will be considered anoma- 
lous.  [8] reports that  this lack of  generalization in  the  N -  
gram learning algorithm leads to a relatively high degree of 
false alarms. 
An  alternative approach  for  learning  strings  is  to  use 
finite-state  automata (FSA). Unlike the N-gram algorithm 
which limits both the length and  number of  sequences, an 
FSA can capture an infinite number of  sequences  of arbi- 
trary  length using finite  storage.  Its states can  remember 
short and long-range correlations. Moreover, FSA can cap- 
ture structures such as  loops and branches in programs - 
by traversing these structures in different ways, it is possible 
to produce new behaviors that are similar (but not identical) 
to behaviors encountered in training data.  In spite of these 
advantages, experience with finite-state-based  learning has 
been  mostly negative: 
1081-601 1/01 $10.00 0 2001 IEEE 
144 
1.  so; 
2.  while (..) { 
3. 
4. 
5. 
6. 
7. 
8. 
9.  1 
10. s3; 
11. s4; 
s1; 
if  (...) S2; 
else S3; 
if (S4) ... ; 
else S2; 
s5; 
Figure 1. An example program and associated trigrams. SO, ..., S5 denote system calls. 
Figure 2. Automaton learnt by our algorithm for Example 1 
Several researchers  [25, 141 have shown that the prob- 
lem  of  learning compact FSA  is  hard.  For  instance, 
[ 141 show that learning approximately optimal FSA is 
as hard as integer factorization. 
an overview of the FSA-based learning algorithm and sum- 
marize its benefits. 
1.1. Overview of FSA Algorithm and its Advantages 
0  [ 161 describe a methodology for learning system calls 
using  finite-state  automata.  However,  no  algorithm 
is  provided  for  constructing  FSAs  from  system  call 
traces. 
Instead,  they  rely  on  human  insight  and  in- 
tuition  to  construct  FSA  states  and  edges  from  se- 
quences. 
0  1301  studied  several  learning  algorithms,  including 
those  based  on  the  Hidden  Markov Models  (HMM) 
[26]  that  are  similar  to  FSA.  In  their  experiments, 
HMMs  incurred  large  overheads  for  learning,  while 
improving detection accuracy  over  the  N-gram  algo- 
rithm only slightly. 
Against  this backdrop of  negative results  regarding  FSA- 
based  learning,  we  present  a  new,  positive  result:  Com- 
pact FSAs  characterizing process  behaviors can  be  learnt 
fullj autontatically and efficiently.  Whereas [ 301 concluded 
that  the  N-gram  algorithm  provides  the  best  overall  per- 
formance  among  many  different  algorithms,  our  results 
show  that  the  FSA-algorithm further  improves  detection 
and training performance significantly.  Below we  provide 
The central  difficulty  in  learning  an  FSA  from  strings 
is  that  the  strings  do  not  provide  any  direct  information 
about  internal  states  of  the  automaton.  For  instance,  if 
we observed  an  execution of  the program in Figure  1 and 
witnessed  a  sequence  of  system calls  ,5'oS1S2S~S'2..., we 
would not know whether to treat the two occurrences of Sz 
to be  from the  same automaton state or not.  It is this key 
problem that leads to the difficulties in efficient learning of 
automata from string examples. 
The key  insight behind  our technique  is that we can  in- 
deed  obtain  state-related  information  if  we  knew  the pro- 
gram state at the point of system call; and that the very same 
operating system mechanisms that can be used to trace sys- 
tem calls can also be used to obtain the program state infor- 
mation. When the above system call sequence is augmented 
with point-of-system-call information, we obtain: 
Based on the program state information, the FSA-algorithm 
will learn the automaton shown in Figure 2 from the above 
145 
program.  The example provides the basis  to illustrate  the 
advantages of the FSA-algorithm. 
Faster  learning.  The  following  two  execution  se- 
quences  suffice  for  learning the complete automaton 
shown in Figure 2. In contrast, they contribute only  1 1 
of the 17 trigrams (65%) learnt by iV-gram algorithm. 
the FSA. It is clear that matching using the FSA takes 
constant time  per  system call,  and  this time  is  fairly 
small  (less than  a hundred  instructions).  In  contrast, 
each  system call  execution  typically involves several 
hundreds of instructions, thus the overhead  of match- 
, ing using the automaton is small. 
In our experiments, FSA learning converged an order 
of magnitude faster than the :V-gram  learning. 
Better detection.  Using program counter information, 
it  is  possible  to  detect  some  classes  of  attacks  that 
elude algorithms that  do not utilize such  information. 
(See Section 4.5 for further discussions.) Even without 
the  program  counter  information,  the  state-sensitive 
nature  of  the FSA-algorithm will  enable detection o f  
attacks missed by the N-gram algorithm. For instance, 
the trigrams  in the system call sequence SnS3S4S? all 
occur during normal  execution of the above program, 
and hence the N-gram algorithm cannot detect this se- 
quence  as  anomalous.  However,  the  FSA-algorithm 
will detect  that the program does not produce this se- 
quence. 
Reduction in False Positives.  Reduction of false posi- 
tives depends upon the ability of a technique to gener- 
alize past  behavior to predict  future behavior.  In par- 
ticular, o n  seeing the second of the above execution se- 
quences, the FSA-algorithm is able to learn the branch- 
ing structure of the program, and is able to predict that 
these branches may  be combined in other ways, lead- 
ing to an infinite set of strings such as: 
1.2. Related Work 
Intrusion detection techniques can be classified  into two 
classes:  misuse detection and  anonialy detection.  Misuse 
detection techniques [29, 23,  171 model known  attacks  us- 
ing patterns (also known as signatures), and detect them via 
pattern-matching. Their benefit is a high degree of accuracy, 
and their main drawback is the inability to identify novel at- 
tacks.  Anomaly  detection techniques  [ 1, 5, 20, 24, 4, 81 
address this problem by  flagging any  abnormalities in user 
or system behavior  as a potential attack.  One of  the main 
research  problems in anomaly detection is that  of learning 
normal  user or system behaviors.  We focus our discussion 
below on anomaly detection techniques most closely related 
to our approach. 
.
-
Approaches  Based  on  ~~~~i~~  program Behaviors. 
The use of system call sequences to model program  behav- 
iors was  first suggested by  Forrest  et al  [5]. [ 161 proposes 
to increase the accuracy  of the N-gram learning algorithm 
by  using an FSA representation.  However, no algorithm is 
provided for FSA construction; instead, a manual procedure 
is employed.  [ 181 describes  an  algorithm  for constructing 
finite-state automata from strings, but their algorithm treats 
only strings of a finite length.  Thus, their approach  learns 
tree-structured  automata.  The problem of  learning tree au-- 
tomata is computationally much simpler than a general FSA 
that contains cycles. 
Compact representation.  Finite-state automata provide 
a  very  compact  way  to represent the  large  (typically 
infinite)  set of  execution traces that  can  be  produced 
by a program. For instance, the trigram representation 
needs to represent 51 system calls in the model.  The 
corresponding measure  in the automaton is the  num- 
ber  of  edges in it (with each edge being  labelled  with 
a system call), and this number is only  13. Our exper- 
iments show that a factor of 3 to 4 reduction  in space 
utilization  over  the 6-gram  algorithm.  (We note  that 
in  absolute terms, space requirements are  modest for 
both the N-gram and the FSA-algorithms.) 
Fast  detection. 
Intrusion  detection  using  the  FSA 
model  requires matching system call sequences using 
[30] studies four  different algorithms for learning pro- 
gram behaviors.  Of  particular interest was  a  data-mining 
based algorithm suggested in [20]; and the Hidden Markov 
Model  (HMM), which  is a finite  state model  widely  used 
in speech recognition. They concluded that HMMs provide 
slightly increased  accuracy,  but  the  length  of  training re- 
quired made them unattractive for intrusion detection. Their 
overall  conclusion was the the N-gram  algorithm provides 
the best combination of low training periods, high detection 
rates and  low false  positives.  As compared  to these  algo- 
rithms, the FSA learning algorithm possesses  the following 
advantages : 
e  It  does not  limit the  length or number of  system call 
sequences:  entire sequence produced by each run of a 
program  is  learnt  by  the  FSA. This factor will  likely 
contribute to more accurate intrusion detection. 
146 
It captures the branching and looping structures of the 
program,  thus enabling us to recognize  typical varia- 
tions in behaviors of programs.  This factor will likely 
reduce false positives. 
It  is  capable  of  learning  program  behaviors  while 
“leaving out” behaviors captured by  library functions. 
This can lead to smaller storage requirements.  It can 
also contribute to shorter training periods since we do 
not waste time in learning the behavior of libraries. 
Static Construction of FSA.  We note that the FSA learnt 
by  our approach  captures program structures that are sim- 
ilar to those captured by  control-flow graphs used  in com- 
pilers. Thus it is possible to develop compile-time analysis 
techniques to learn the FSA sratically, without any runtime 
training.  A  disadvantage  is  that  interprocedural  analysis, 
especially in the presence of libraries that are dynamically 
linked (and hence unavailable at compile time) poses non- 
trivial problems. An alternative is to develop link-time anal- 
ysis of object  files  and  libraries  to’construct the FSA. We 
are currently studying this approach.  Even  if this approach 
were to be successful, runtime construction, as proposed in 
this paper, would still have additional information to offer. 
In particular, a learning algorithm that constructs the FSA at 
runtime can incorporate information about frequency of ex- 
ecution.  This information  is unavailable in a compile-time 
or link-time approach. 