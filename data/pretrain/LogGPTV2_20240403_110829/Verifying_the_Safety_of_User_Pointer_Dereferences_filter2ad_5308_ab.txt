ﬁxed point iteration over the program. Section 5.3 ex-
plains how the analysis generates the preliminary sum-
mary of a procedure. Sections 5.4 to 5.6 describe the
328
initial state environment used on entry to procedures.
Section 5.7 gives the abstraction function that the anal-
ysis applies to preliminary summaries to produce ﬁnal
summaries. Sections 5.8 and 5.9 detail the intraprocedu-
ral and interprocedural components of the analysis, re-
spectively. Section 5.10 describes a path-sensitive must-
modify analysis that substantially reduces the number of
false alarms.
Our analysis has many components which are de-
tailed in this section. The most important points, how-
ever, are:
1. Our analysis is intraprocedurally path-sensitive.
We associate with each fact a guard describing the
conditions under which that fact holds.
2. Our analysis is compositional. We compute a sum-
mary of each procedure P that succinctly describes
the behavior of P . The callers of P refer only to
P ’s summary. Summaries are polymorphic in that
they are parametrized by whether particular loca-
tions are user or not.
The combination of (1) and (2) leads to a number of
difﬁculties in scaling a precise user pointer dereference
analysis to a program the size of Linux. First, tracking
all the possibilities for whether a location can be user or
not for every location in a procedure turns out to be very
expensive. As a result, we use an additional analysis
described in Section 5.6 that determines which locations
can never be user, which turns out to be most locations,
greatly improving the scalability of the analysis.
Second, a similar problem arises in deciding how to
make use of the path-sensitive information computed for
a procedure, which is far too expensive to use directly as
the summary of a procedure. We simplify, or abstract,
this information as described in Section 5.7.
Third, having both polymorphic summaries and path
sensitivity introduces subtleties in the mapping between
actual and formal parameters at procedure calls as de-
scribed in Section 5.9.
Finally, it turns out that it is not only important to
know what locations a pointer may point to, but also
which pointers must be updated by a procedure. For ex-
ample, it is important to know if a callee is guaranteed
to overwrite a user pointer with a kernel pointer. Our
solution for this problem is described in Section 5.10.
5.1 State Environments
Let State P be a set of abstract states of a proce-
dure P . A state environment ΓP ∈ StateEnv P =
State P → Guard P associates each state with the guard
329
under which the program is in that state. There is a nat-
ural partial order on state environments: Γ1 (cid:8) Γ2 if
∀q(Γ1(q) ⇒ Γ2(q)). The least upper bound operator is
deﬁned by (Γ1 (cid:11) Γ2)(q) = Γ1(q) ∨ Γ2(q), the greatest
lower bound operator by (Γ1 (cid:13) Γ2)(q) = Γ1(q)∧ Γ2(q),
bottom by ⊥(q) = false, and top by (cid:15)(q) = true. Two
state environments Γ1, Γ2 ∈ StateEnv are ∼=-equivalent
if and only if Γ1 (cid:8) Γ2 and Γ2 (cid:8) Γ1.
∈
PointsToP → (State Q × State P ) → Guard P
gives the guard under which a callee state qQ ∈ State Q
instantiates to caller state qP ∈ State P .
function I P
instantiation
state
The
State
Consider the unchecked user pointer dereference
property. The set of abstract states consists of location-
typestate pairs State P = LocP × Typestate where
Typestate = {user, unchecked, unsafe}. The state
(l, user) ∈ State P signiﬁes that location l ∈ LocP
is a user location. Similarly, the state (l, unchecked)
signiﬁes that l has not been checked, and the state
(l, unsafe) signiﬁes that l is a user location that has
been the target of a dereference while unchecked. Note
that a location may be both user and unchecked—
these states are not mutually exclusive. The state instan-
tiation function for this property is deﬁned by
Loc(ρ)(lQ
I P
State(ρ)((lQ
2 , t)) = I P
1 , t), (lP
1 , lP
2 ).
5.2 Fixed Point Iteration
The ﬁnite-state safety analysis makes several passes
over the program. In the ith pass, the analysis analyzes
each procedure in isolation generating a summary state
environment that encodes the behavior of the procedure
with respect to the ﬁnite-state property and the mem-
ory model. If a procedure P calls a procedure Q, then
the analysis uses the summary state environment of Q
computed in the (i − 1)st pass to compute the summary
state environment of P in the ith pass. Consequently,
the summary of P depends on the summary of Q. In a
program with recursive procedures, cyclic dependencies
arise which requires the analysis to reanalyze procedures
until the summaries for all procedures stabilize, or reach
a ﬁxed point. That is, the analysis terminates after the
nth pass when, for each procedure P , the state environ-
ment computed in the (n − 1)st pass is equivalent to the
state environment computed in the nth pass.
5.3 Summary Generation
This paper refers to the safety analysis by using judg-
ments of the form
φ, ρ, Γ (cid:7)i
safety s : Γ(cid:1)
where φ is the guard under which execution reaches
statement s, ρ is the points-to graph on entry to s, and Γ
(resp. Γ(cid:1)
) is the state environment on entry (resp. exit)
to s. The superscript i on the turnstile signiﬁes that the
judgment holds in the ith pass of the safety analysis over
the program.
The following judgment signiﬁes that the summary
state environment of procedure P in the 0th pass is ini-
tialized to ⊥, which means that the analysis initially as-
sumes none of the locations are in any of the predeﬁned
states on exit from P .
(cid:7)0
safety t1 P (
−−−→
t2 v) { s } : ⊥
The following judgment describes how the summary
state environment, Γsum, of procedure P is computed
in the ith pass, where i > 0.
φinit , ρinit , Γinit (cid:7)i
−−−→
(cid:7)i
t2 v) { s } : Γsum
safety t1 P (
Γsum = α(Γprelim)
safety s : Γprelim
The top antecedent says that the analysis ﬁrst per-
forms an intraprocedural analysis of the procedure body,
s, with respect to an initial state environment, Γinit ,
to compute a preliminary summary state environment,
Γprelim. The bottom antecedent applies an abstraction
function α to the preliminary summary state environ-
ment to compute the ﬁnal summary state environment,
Γsum, of the procedure. The choice for initial state envi-
ronment is discussed in Section 5.4, and the abstraction
function is described in Section 5.7. The intraprocedural
analysis is explained in Section 5.8.
5.4
Initial State Environment
Recall from Section 5.3 that the summary state envi-
ronment of a procedure is generated with respect to an
initial state environment, which represents the contexts
in which the procedure is called. Because a procedure
may be called in many different contexts, the analysis
uses a fresh boolean variable, called a context variable,
to represent the guard of a particular state in any context,
denoting that the guard of the state is unknown and un-
constrained during summary generation. The function
xvar P ∈ State P → XVar P assigns a context variable
in XVar P to each state. The most general initial state
environment does not incorporate any information about
the guards associated with states in contexts, thus allow-
ing the analysis to generate polymorphic summaries that
are applicable in any possible context, even those that do
not appear in the program. The most general state envi-
ronment is deﬁned by Γinit(q) = xvar(q) for any state
q.
EXAMPLE.
In the example in Figure 1, con-
Suppose the
sider the procedure get on line 11.
analysis makes the state-to-context-variable assignment
xvar(ly, user) = v1, xvar(ly, unchecked) = v2,
*y, user) = v4,
xvar(ly, unsafe) = v3, xvar(l
*y, unchecked) = v5, xvar(l
*y, unsafe) = v6,
xvar(l
**y, unchecked) = v8,
**y, user) = v7, xvar(l
xvar(l
**y, unsafe) = v9. Then, the most general ini-
xvar(l
tial state environment would be deﬁned by Γinit(q) =
xvar(q) for any state q. (cid:1)
Section 5.5 describes a special initial state environ-
ment used for system call procedures. Section 5.6 de-
scribes a reﬁnement of the most general initial state en-
vironment crucial to scaling the analysis for unchecked
user pointer dereferences to millions of lines of code.
5.5 System Call Initial State Environ-
ment
System calls are entry points of an operating sys-
tem. Consequently, any system call formal parameter
is a user pointer, and furthermore, any pointer reachable
from a user pointer via a series of dereferences is also a
user pointer. Let Syscall be the set of system call pro-
cedures. The analysis uses a special initial state envi-
ronment when analyzing a procedure P ∈ Syscall that
guards each (l, user) state with true, where l is a lo-
cation reachable from a formal parameter u of P via a
series of dereferences. Formally, the initial state envi-
ronment ΓP
init where P ∈ Syscall is deﬁned by
ΓP
init(l, user) = reachable(ρP
init(l, unchecked) = true
ΓP
init(l, unsafe) = false
ΓP
init)(varlocP (u), l)
where reachable ∈ PointsTo → (Loc × Loc) →
Guard gives the guard under which a location is reach-
able via a series of dereferences from another location.
It is recursively deﬁned by
(cid:2)
reachable(ρ)(l1, l2) =
[reachable(ρ)(l1, l)∧ ρ(l, l2)]
l
when l1 (cid:3)= l2. Any location l is reachable from itself, so
reachable(ρ)(l, l) = true.
EXAMPLE.
In the example in Figure 1, the sys-
tem call procedure syscall uses an initial state en-
vironment that guards every user state for a loca-
tion reachable from the user pointer u with true, and
330
*u, user) = true,
**u, user) = true, and Γinit(l, user) = false
all other states with false: Γinit(l
Γinit(l
for any other l. (cid:1)
5.6 Reﬁning the Initial State Environ-
ment
Recall from Section 5.3 that analyzing a procedure
using the most general initial state environment gener-
ates a summary that may be used in any calling context
including those that do not appear in the program. The
cost of such a pure, compositional bottom-up analysis is
exactly that it must account for the possibility of every
possible calling environment which, depending on the
application, may be prohibitively expensive.
For unchecked user pointer dereferences it turns out
that only a fraction of pointers are actually user point-
ers, and restricting the set of pointers to track during the
analysis of a procedure to only those that could poten-
tially be user in some context substantially improves
scalability. In particular, knowing whether the guard as-
sociated with a state (l, user) is unsatisﬁable in all con-
texts allows the analysis to avoid tracking l as it is never
user in any calling context.
The function statecontext ∈ (Proc × N) → 2State
associates each procedure Q with the set of states that
appear in some calling context with a satisﬁable guard
in pass i.
1 ∈ statecontext(Q, i) if and only if the
Formally, qQ
call (cid:7)i
safety v1 := Q (
−→
v2) : Γ(cid:1)P
judgment
φP , ρP , ΓP
(cid:2)
2 ∈State P
qP
holds in a procedure P and
ΓP
call(qP
2 ) ∧ IState(ρP )(qQ
1 , qP
2 ) ∧ φP
1 instantiates to some qP
call(qP
is satisﬁable. The satisﬁability of this condition implies
that the Q-state qQ
2 state whose
2 ) in the calling context is satis-
associated guard ΓP
ﬁable. Finally, we deﬁne a new satisﬁability initial state
environment ιsat for procedure Q in the ith pass that in-
corporates the satisﬁability of guards in the calling con-
texts:
sat(qQ
ιi
1 ) =
xvar(qQ
1 )
false
1 ∈ statecontext(Q, i − 1)
qQ
otherwise
(cid:3)
EXAMPLE. In the example in Figure 1, let Γsyscall
be the context state environment computed on entry to
the call statement to get on line 7 in some pass i. Us-
ing the system call state environment, the intraprocedu-
ral analysis, described in Section 5.8, determines that
call
331
(l
call
(l
call
call
and l
l
**y) instantiates to l
*y (resp.
(lu, user) = false, Γsyscall
*u, user) =
Γsyscall
**u, user) = true. Thus, the states
true and Γsyscall
*y, user), (l
**y, user) ap-
**y, unchecked), and (l
(l
pear in statecontext(get, i) because (l
*u, user) and
**u, user) are associated with satisﬁable guards in
(l
Γsyscall
*u (resp.
call
l
**u). Recall the example in Section 5.4 where the most
general initial state environment for get was given. For
purposes of scalability, we reﬁne the initial state envi-
ronment for get to incorporate information about the
. Thus, Γget
satisﬁability of the guards in Γsyscall
*y, user) = v4,
init(ly, user) = false, Γget
init(l
has Γget
*y, unchecked) = v5, and Γget
init(l
init(l
**y, user) =
Γget
v7. Note how the analysis can conclude that ly is not
user in any context and thus can avoid tracking this
pointer throughout the procedure. (cid:1)
init
call
5.7 Summary Abstraction Function
Recall from Section 5.3 that the intraprocedural anal-
ysis of a procedure body generates a preliminary sum-
mary state environment, which encodes a very precise
description of the behavior of the procedure. However,
we have found that retaining this level of precision in-
terprocedurally is prohibitively expensive and, thus, in-
hibits scalability. Consequently, the analysis performs
a sound abstraction on the preliminary summary state
environment to compute the ﬁnal summary state envi-
ronment using a summary abstraction function, α ∈
StateEnv → StateEnv. This abstraction step reduces
the size of the summary, allowing the analysis to trade
precision for scalability without sacriﬁcing soundness.
Formally, α is sound if and only if Γ (cid:8) α(Γ) for any
Γ ∈ StateEnv.
Our particular choice for α in the analysis of the
unchecked user pointer dereferences property is the con-
text variable abstraction, αXVar , which abstracts a state
environment by the strongest state environment whose
guards are only over context variables. Formally, Γ(cid:1) =
αXVar (Γ) is characterized by Γ (cid:8) Γ(cid:1)
and (Γ (cid:8) Γ(cid:1)(cid:1) (cid:8)
Γ(cid:1)) ⇒ (Γ(cid:1)(cid:1) ∼= Γ(cid:1)) when atoms(Γ(cid:1)) ⊆ XVar and
atoms(Γ(cid:1)(cid:1)) ⊆ XVar for any Γ(cid:1)(cid:1)
. The function atoms
gives the set of atomic predicates and boolean variables
appearing in the guards used in a given state environ-
ment.
Intuitively, the context variable abstraction re-
moves any atomic predicates in the state environment
guards except for context variables. Let ψ be Γ(q). We
compute αXVar (Γ)(q) in the following manner:
1. Enumerate all disjunctions over the set of context
variables that appear in ψ.
2. For each disjunction φ, check the validity of ψ =⇒
φ.
3. Conjoin all the disjunctions that pass the above va-
lidity check to form αXVar (Γ)(q).
The validity check on boolean constraints in step 2
requires the use a boolean satisﬁability solver. This ap-
proach requires exponentially many calls to the solver,
but because the number of context variables is typically
small, it works well in practice. This choice of abstrac-
tion function makes our analysis interprocedurally path-
insensitive, that is, it cannot reason about branch condi-
tions across procedure boundaries.
EXAMPLE. Let ψ be the guard (va ∧ ψ1) ∨ (vb ∧ ψ2)
where ψ1 and ψ2 are predicates not involving context
variables. Then, the set of context variables in ψ is
{va, vb}. The disjunctions over {va, vb} are (va ∨ vb),
(¬va ∨ vb), (va ∨ ¬vb), and (¬va ∨ ¬vb). The only
disjunction that is implied by ψ is (va ∨ vb). Thus, the
context variable abstraction of ψ is simply (va ∨ vb). (cid:1)
5.8
Intraprocedural Analysis
This section describes how the intraprocedural anal-
ysis handles various program constructs.
5.8.1 Statement Sequences
The rule for statement sequences is:
φ, ρ (cid:7)mem s1 : φ(cid:1), ρ(cid:1), ψ
φ, ρ, Γ (cid:7)i
safety s1 : Γ1
φ(cid:1), ρ(cid:1), Γ1 (cid:7)i
safety s2 : Γ2
φ, ρ, Γ (cid:7)i
safety s1 ; s2 : Γ2
and points-to graph ρ(cid:1)
The ﬁrst antecedent uses the memory model to compute
the statement guard φ(cid:1)
after state-
ment s1. The middle antecedent uses the safety analysis
to compute the resulting state environment Γ1 after ex-
ecuting s1. Similarly, the last antecedent computes the
ﬁnal state environment Γ2.
5.8.2 Checking
Let access ok be a procedure that returns a nonzero
value if and only if access ok’s user pointer argu-
ment points into user space. Consider the statement v1