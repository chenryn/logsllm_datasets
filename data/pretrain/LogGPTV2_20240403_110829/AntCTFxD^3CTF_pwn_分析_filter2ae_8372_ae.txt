    success("heap_base: " + hex(heap_base))
    p.interactive()
## liproll
  1. 首先解包rootfs，查看init： 
        #!/bin/sh
    mount -t proc proc /proc
    mount -t sysfs sysfs /sys
    mount -t devtmpfs none /dev
    mkdir -p /dev/pts
    mount -vt devpts -o gid=4,mode=620 none /dev/pts
    chmod 666 /dev/ptmx
    echo 1 > /proc/sys/kernel/kptr_restrict
    echo 1 > /proc/sys/kernel/dmesg_restrict
    chown -R root:root /bin /usr /root
    echo "flag{this_is_a_test_flag}" > /root/flag
    chmod -R 400 /root
    chmod -R o-r /proc/kallsyms
    chmod -R 755 /bin /usr
    cat /root/banner
    insmod /liproll.ko
    chmod 777 /dev/liproll
    setsid /bin/cttyhack setuidgid 1000 /bin/sh
    echo 'sh end!\n'
    poweroff -d 1800000 -f &
    umount /proc
    umount /sys
    poweroff -d 0  -f
可以看出加载了一个名为liproll的driver，并且dmesg信息和/proc/kallsyms都不可读。
从run.sh：
        #!/bin/sh
    qemu-system-x86_64 \
        -kernel ./bzImage \
        -append "console=ttyS0 root=/dev/ram rw oops=panic panic=1 quiet kaslr" \
        -initrd ./rootfs.cpio \
        -nographic \
        -m 2G \
        -smp cores=2,threads=2,sockets=1 \
        -monitor /dev/null \
可以知道开启了kaslr保护。
  2. 从rootfs中拿出liproll.ko分析，关键函数有： 
    * liproll_unlocked_ioctl： 
                __int64 __fastcall liproll_unlocked_ioctl(__int64 a1, unsigned int a2, __int64 a3)
        {
          __int64 result; // rax
          if ( a2 == 0xD3C7F03 )
          {
            create_a_spell();
            result = 0LL;
          }
          else if ( a2 > 0xD3C7F03 )
          {
            if ( a2 != 0xD3C7F04 )
              return 0LL;
            choose_a_spell(a3);
            result = 0LL;
          }
          else
          {
            if ( a2 != 0xD3C7F01 )
            {
              if ( a2 == 0xD3C7F02 )
              {
                global_buffer = 0LL;
                *(&global_buffer + 1) = 0LL;
              }
              return 0LL;
            }
            cast_a_spell(a3);
            result = 0LL;
          }
          return result;
        }
可以通俗地理解为菜单，提供了create，cast，choose，reset功能，其中：
      * create: 
                        __int64 create_a_spell()
            {
             __int64 v0; // rax
             __int64 v1; // rbx
             __int64 result; // rax
             v0 = 0LL;
             while ( 1 )
             {
               v1 = (int)v0;
               if ( !lists[v0] )
                 break;
               if ( ++v0 == 0x10 )
                 return printk("[-] Full!\n");
             } 
             result = kmem_cache_alloc_trace(kmalloc_caches[8], 0xCC0LL, 0x100LL);
             if ( !result )
               return create_a_spell_cold();
             lists[v1] = result;
             return result;
            }
简单地通过kmalloc申请一个0x100的chunk，存在`list`数组里（这里`kmem_cache_alloc_trace(kmalloc_caches[8],
0xCC0LL, 0x100LL);`个人认为可能是被优化了，行为上应该等价于`kmalloc(0x100)`，不过不是很重要。
      * choose： 
                        void *__fastcall choose_a_spell(unsigned int *a1)
            {
              __int64 v1; // rax
              void *result; // rax
              v1 = *a1;
              if ( (unsigned int)v1 > 0xFF )
                return (void *)choose_a_spell_cold();
              result = (void *)lists[v1];
              if ( !result )
                return (void *)choose_a_spell_cold();
              global_buffer = result;
              *((_DWORD *)&global_buffer + 2) = 0x100;
              return result;
            }
把`list`数组中，给定下标中存在的指针赋值给`global_buffer`，并且把`*((_DWORD *)&global_buffer +
2)`（其实就是size）设置为0x100。
显然这里下标是来源于用户程序可控的，且判断只需要小于0x100，`list` 本身容量就是0x10，显然存在溢出。
      * reset： 
                         global_buffer = 0LL;
             *(&global_buffer + 1) = 0LL;
清空`global_buffer`并且设置`size = 0`。
      * cast： 
                        unsigned __int64 __fastcall cast_a_spell(__int64 *a1)
            {
              unsigned int v1; // eax
              int v2; // edx
              __int64 v3; // rsi
              _BYTE v5[256]; // [rsp+0h] [rbp-120h] BYREF
              void *v6; // [rsp+100h] [rbp-20h]
              int v7; // [rsp+108h] [rbp-18h]
              unsigned __int64 v8; // [rsp+110h] [rbp-10h]
              v8 = __readgsqword(0x28u);
              if ( !global_buffer )
                return cast_a_spell_cold();
              v6 = global_buffer;
              v1 = *((_DWORD *)a1 + 2);
              v2 = 0x100;
              v3 = *a1;
              if ( v1 = vmlinux_base + 0x12EE908
              && (unsigned __int64)global_buffer > 3));
          }
          return v3;
        }
这个函数就是向`global_buffer`里写入数据。
  3. 其次调试的过程中发现，这里的`kaslr`和用户态程序的`aslr`不太一样，不论是liproll模块的相关的函数地址，还是kernel的一些内核函数，都不是简单的相对于base address有一个固定的偏移，而近乎是完全随机的感觉；比如对于liproll模块： 
        / $ cat /sys/module/liproll/sections/.
    ../                            .text.cast_a_spell
    ./                             .text.check_bound
    .bss                           .text.choose_a_spell
    .data                          .text.create_a_spell
    .exit.text                     .text.liproll_open
    .gnu.linkonce.this_module      .text.liproll_read
    .init.text                     .text.liproll_release
    .note.Linux                    .text.liproll_unlocked_ioctl
    .note.gnu.build-id             .text.liproll_write
    .orc_unwind                    .text.reset_the_spell
    .orc_unwind_ip                 .text.unlikely.cast_a_spell
    .rodata.str1.1                 .text.unlikely.choose_a_spell
    .rodata.str1.8                 .text.unlikely.create_a_spell
    .strtab                        .text.unlikely.liproll_read
    .symtab
每个函数都有独立的section，而这些section实际加载的地址都是不可预测的（当然section和section之间的相对偏移可能是有一定的预测性的，比如.bss和.data
section相差0x4c0就是固定的，后面利用会用到这点）。
同样的，从bzImage中提取出vmlinux分析，也可以发现，存在着类似的.text.func_name的section，使得`prepare_kernel_cred`和`commit_creds`偏移不是相对vmlinux_base固定；但是像`liproll_open`中通过`copy_page`函数地址算出vmlinux_base的时候，减去固定偏移，可以看出`copy_page`的偏移是固定的，同时vmlinux文件中不存在`.text.copy_page`的section。
  4. 其次，在`liproll_read`这里，有一个check，即： 
        if ( (unsigned __int64)global_buffer >= vmlinux_base + 0x12EE908
          && (unsigned __int64)global_buffer < vmlinux_base + 0x13419A0 )
    {
      return liproll_read_cold();
    }
那么`vmlinux_base + 0x12EE908 ~ vmlinux_base +
0x13419A0`这部分内存就显得很可疑，调试中发现，这部分内存正好是`__ksymtab`，`__ksmtab_gpl`和`ksymtab_strings`这三个section。