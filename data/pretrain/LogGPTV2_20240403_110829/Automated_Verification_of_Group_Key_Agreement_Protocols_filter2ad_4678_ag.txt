A. On B’s authentic channel, it receives a message stating that
the content Y is an ephemeral public key (shown by EpkOf)
for group gid from participant 2. With this, it can log the
accepting fact Accept for that gid , name A, index 1, noting
the subgroup key is for the ﬁrst two participants, the total
group size is k, and the key is Y ˆ esk. Then it sends on
A’s authentic channel a message that contains the subgroup’s
ephemeral public key (shown by GpkFor) for group gid for
consumption by participant 2 and the key is g ˆ esk. It then
stores in a Leader fact the group identiﬁer gid , the name of
the leader A, the index of the next participant to communicate
with, 3, and the current subgroup key Y ˆ esk. Note that, with
the message sent here, participant B can compute the same
subgroup key, as it also has its own ephemeral secret key used
to generate the ephemeral public key that was received by this
rule.
The Step-Leader rule is queried for a given group identiﬁer
gid and index j. Note that the adversary can only query these
in sequential order as the Leader fact is not persistent and the
index is incremented each time it is called. From the Leader
fact with matching gid and j, it retrieves the leader name A
and the subgroup key key . From the !Group fact it retrieves
the public name B associated with index j. It receives on B’s
authentic channel the message that Y is the ephemeral public
key of B for this group. It logs the action Accept with the
group identiﬁer, name A, index 1, index j to show the key is
for the subgroup A1–Aj , the group size k and the actual new
subgroup key Y ˆ te(cid:0)key(cid:2). It also logs a Less fact to ensure
that j is in bounds, i.e., smaller than k (cid:0) 1. On A’s authentic
channel it sends the subgroup’s ephemeral public key for this
group gid , designated for participant B with index j, which is
g ˆ te(cid:0)key(cid:2). The Leader fact is stored again, with incremented
index j (cid:0) 1 and the new subgroup key Y ˆ te(cid:0)key(cid:2).
The other participants A2–Ak use three rules. In their ﬁrst
rule they pick their ephemeral secret key and send on their
authentic channel the associated ephemeral public key for
the group. In their second rule they receive their subgroup’s
ephemeral public key from the leader and compute the sub-
group key. Their last rule is just like the Step-Leader rule,
but without sending anything. That is, it receives the ephemeral
public key of the participants with higher index in order and
computes successively the next subgroup key until done.
The secrecy claim is given in the form of the lemma shown
in Figure 14. TAMARIN automatically proves this lemma using
induction as described in Section III-E. Without induction,
TAMARIN’s backwards search would not terminate, because it
keeps repeatedly unfolding ‘one more step’ of the loops when
trying to prove the secrecy of STR for an arbitrary number of
participants.
When using induction, TAMARIN ﬁrst checks the empty
trace which trivially satisﬁes the secrecy lemma as no Accept
fact was logged yet. For the induction step, TAMARIN’s
backward search ﬁrst shows that that the adversary cannot
compute the new key without knowing either the previous
subgroup key key or some ephemeral secret key esk. It then
uses the induction hypothesis to show that the secrecy lemma
holds for the subgroup key key and the ﬁrst case is therefore
impossible. Finally,
it shows that the second case is also
impossible because the adversary cannot deduce esk.
For STR, we analyze two different versions: one using
explicitly authentic channels, which we presented, and another
version using insecure channels and signatures. See Table I in
Section V-E for the different veriﬁcation run times.
C. From Joux to group Joux
For the analysis of group Joux, we refer to Section IV-B for
the Joux protocol and to Section V-B for the use of induction.
We have shown in Figure 1 how group Joux extends the Joux
protocol. Note that the extension described in Section IV-A is
needed for both the bilinear pairing, and the representation of
the tree by maps. The TAMARIN tool veriﬁes the secrecy of
the group key automatically, when induction is enabled. See
the table in Section V-E for more details.
D. GDH
Figure 15 depicts the multiset rewriting rules for GDH, as
presented in Section II-B. The Create-Group rule stores the
two parameters, the group identiﬁer gid and the number of
participants k, in the !Group fact. It also logs an action fact
to ensure that each group identiﬁer is only used once and
checks that the group size is not one.
191
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:15 UTC from IEEE Xplore.  Restrictions apply. 
The Start-Participant rule with a given gid , participant
index i, and participant name A, reads the group size k from
the !Group fact and generates a new ephemeral secret key
esk. It logs a number of actions: two uniqueness constraints,
so that each index i and name A are only used once per gid ,
as well as a less-than fact Less ensuring that i (cid:0) 1, . . . , k(cid:2). It
also logs in the Esk fact that esk is the ephemeral secret key
of i. It stores the participant state fact !Pstate with the group
identiﬁer, participant index and name, and the participant’s
secret. Separately, a mapping !Pmap, parametric on the group
identiﬁer, from participant index to name is stored.
In the rule Send-First for a group identiﬁer gid , the state
must contain the participant state fact for that gid with index 1,
name A, and ephemeral secret key esk. It sends two messages
on A’s authentic channel for this group’s participant 2, one
with g as the key for 1, and the other with g ˆ esk as the round
key for 2. In WaitAccept, it stores its information so it can
accept using the last rule.
The rule Recv-Others gets the acting participant A’s index
i and the index j whose assigned partial key is modiﬁed. The
state contains facts ensuring that the received message is from
the predecessor B, with index l, of i, and the key is for j. On
its authentic channel A sends the received key, exponentiated
with its ephemeral secret key esk, for further handling by the
participant with index i (cid:0) 1. It also logs that participant i has
responded to this message in the Exp fact. Note that receiving
g ˆ y (as opposed to a message variable Y ) models that the
recipient performs a group element check. Note too that the
exponent is not directly used by the protocol, and only appears
in the action.
The Recv-Roundkey rule for participant i receives from
A’s predecessor B, with index l, the partial key g ˆ y marked
as RoundKey. We use InEq(cid:3)i, k(cid:4) to ensure that A is not
the last participant. The rule also logs that this message has
been consumed by way of Exp. It sends two messages on its
authentic channel, both to the successor participant. One is its
own partial key, g ˆ y, and the other is the successor’s round
key, (cid:3)g ˆ y(cid:4) ˆ esk. In WaitAccept, it stores its information to
be used when accepting the group key in the last rule.
The last participant can execute the Recv-Roundkey-Last
rule. The index k of A is the group size, and it receives a
message from its predecessor B containing the round key g ˆy
for k. This allows A to accept by logging the Accept fact with
the group identiﬁer, its name, its index, and the group key
(cid:3)g ˆ y(cid:4) ˆ esk. Note that it does not need to send any message as
that has already happened in the Recv-Others rule steps for
k.
All other participants accept using the last rule Accept and
require their WaitAccept fact in the state. They receive the
partial key assigned to them from the last participant B, which
they raise to the power of their ephemeral secret key esk and
log in the Accept their name, their index, and the group key
(cid:3)g ˆ y(cid:4) ˆ esk. Note that the index in the received message is
k (cid:0) 1 for group size k
This concludes our description of the GDH rules and we
now describe the veriﬁcation. We prove the secrecy for the key
Create-Group (gid, k):
 (cid:0)(cid:0)  Uniq(cid:3)gid(cid:4), InEq(cid:3)k, 1(cid:4)   !Group(cid:3)gid , k(cid:4)
Start-Participant (cid:3)gid, i, A(cid:4):
!Group(cid:3)gid , k(cid:4), Fr(cid:3)esk(cid:4)
(cid:0)(cid:0)  Uniq(cid:3)(cid:5)gid , i(cid:6)(cid:4), Uniq(cid:3)(cid:5)gid , A(cid:6)(cid:4), Less(cid:3)i, k (cid:2) 1(cid:4), Esk(cid:3)i, esk(cid:4)  
!Pstate(cid:3)gid , i, A, esk(cid:4), !Pmap(cid:3)gid , i, A(cid:4)
Send-First (cid:3)gid (cid:4):
!Pstate(cid:3)gid , 1, A, esk(cid:4)(cid:0)(cid:0)  
!AO(cid:3)A, (cid:5)gid , 2, KeyFor, 1, g(cid:6)(cid:4),
!AO(cid:3)A, (cid:5)gid , 2, RoundKey, g ˆ esk(cid:6)(cid:4),
WaitAccept(cid:3)gid , 1, A, esk(cid:4)
Recv-Others (cid:3)gid , i, j(cid:4):
!Pstate(cid:3)gid , i, A, esk(cid:4), !Pmap(cid:3)gid , l, B(cid:4),
!AO(cid:3)B, (cid:5)gid , i, KeyFor, j, g ˆ y(cid:6)(cid:4)
(cid:0)(cid:0)  Exp(cid:3)i, y(cid:4), Eq(cid:3)l (cid:2) 1, i(cid:4), Less(cid:3)j, i(cid:4)  
!AO(cid:3)A, (cid:5)gid , i (cid:2) 1, KeyFor, j, (cid:3)g ˆ y(cid:4) ˆ esk(cid:6)(cid:4)
Recv-Roundkey (cid:3)gid , i(cid:4):
!Pstate(cid:3)gid , i, A, esk(cid:4), !Pmap(cid:3)gid , l, B(cid:4), !Group(cid:3)gid, k(cid:4),
!AO(cid:3)B, (cid:5)gid , i, RoundKey, g ˆ y(cid:6)(cid:4)
(cid:0)(cid:0)  Exp(cid:3)i, y(cid:4), Eq(cid:3)l (cid:2) 1, i(cid:4), InEq(cid:3)i, k(cid:4)  
!AO(cid:3)A, (cid:5)gid , i (cid:2) 1, KeyFor, i, g ˆ y(cid:6)(cid:4),
!AO(cid:3)A, (cid:5)gid , i (cid:2) 1, RoundKey, (cid:3)g ˆ y(cid:4) ˆ esk(cid:6)(cid:4),
WaitAccept(cid:3)gid , i, A, esk(cid:4)
Recv-Roundkey-Last (cid:3)gid (cid:4):
!Pstate(cid:3)gid , k, A, esk(cid:4), !Pmap(cid:3)gid , l, B(cid:4), !Group(cid:3)gid, k(cid:4),
!AO(cid:3)B, (cid:5)gid , k, RoundKey, g ˆ y(cid:6)(cid:4)
(cid:0)(cid:0)  Exp(cid:3)k, y(cid:4), Eq(cid:3)l (cid:2) 1, k(cid:4), Accept(cid:3)gid , A, k, (cid:3)g ˆ y(cid:4) ˆ esk(cid:4)    
Accept (cid:3)gid , i(cid:4):
WaitAccept(cid:3)gid , i, A, esk(cid:4), !Group(cid:3)gid , k(cid:4),
!Pmap(cid:3)gid , k, B(cid:4), !AO(cid:3)B, (cid:5)gid , k (cid:2) 1, KeyFor, i, g ˆ y(cid:6)(cid:4)
(cid:0)(cid:0)  Accept(cid:3)gid , A, i, (cid:3)g ˆ y(cid:4) ˆ esk(cid:4)    
Fig. 15. Multiset rewriting rules formalizing GDH. KeyFor, RoundKey (cid:0)
pub.
(cid:3)(cid:3)(cid:4)j1 j2 gid i A key.(cid:3)Accept(cid:3)gid , A, i, key (cid:4)@j1  K(cid:3)key (cid:4)@j2(cid:4)(cid:4)
Fig. 16. GDH security property: adversary does not know accepted keys.
(cid:6)i1 i2 r1 r2 esk x.
// if esk is an ephemeral secret key that appears in an exponent,
(cid:3)Esk(cid:3)r1, esk(cid:4)@i1  Exp(cid:3)r2, x (cid:7) esk(cid:4)@i2
// then it was created in an earlier round
 r1 (cid:0)nat r2(cid:4)
Fig. 17. GDH Lemma 1.
of any group member, which is formalized in Figure 16. To
prove this, we needed to specify some intermediate lemmas,
which we outline next. TAMARIN automatically proves the
lemmas and reuses them to prove the secrecy property.
Lemma presentation: We present three key lemmas here.
Note that there are also nine more auxiliary lemmas. For those,
192
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:15 UTC from IEEE Xplore.  Restrictions apply. 
Protocol
Adversary model
Result
Time [s]
Group protocols:
STR
STR with signatures
Group-Joux
GDH
authentic channels
PFS
authentic channels
authentic channels
Tripartite protocols:
SIGJOUX
SIGJOUX
TAK1
TAK1
Identity-based protocols:
RYY
RYY
Scott
Scott
Chen-Kudla
Chen-Kudla
PFS
PFS, eph-reveal
weakened eCK-like
eCK-like
wPFS
wPFS, eph-reveal
wPFS
wPFS, eph-reveal
eCK-like
eCK
proof
proof
proof
proof
proof
attack
proof
attack
proof
attack
proof
attack
proof
attack
4.8
15.3
102.1
152.7
90.7
99.8
56.8
77.2
8.3