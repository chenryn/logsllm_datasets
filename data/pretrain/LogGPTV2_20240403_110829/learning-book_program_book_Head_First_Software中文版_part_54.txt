程是一种能让你开发高品质软件的框架。
没有万能的流程
没有一种流程，能奇迹般地使软件开发获得成功。一个良好的软件流程是能让
你的开发团队取得成功的流程。然面，各种有效的流程之间还是存在一些共同
特点：
口
反复式开发。许许多多的项目与流程都已经表明：大露需式（Big
Bang）的交付和大瀑布般的开发流程是非常冒险的，面且容易造
伟大的软
成失败。无论你选定何种开发流程，你都要确认它包括了开发循
件开发流
环。
口
不断评估和核定。没有一个流程从一开始就是完美的。就算你的流程
程，就是
真的很好，你的项目也将随着开发工作的继续面发生变化。开发人员
能使你的
可能会提升或者辞职，新的开发人员将会加人开发团队，需求将会发
生变化。确认把某种评估方式整合进来，以便评估你的流程运行的好
开发团队
坏，并且愿意对流程中原本合理的部分进行调整。
成功的流
口
整合最佳实践。不要跟若趋势走，但也不要固执已见，就因为是趋势、
你就回避它。在大多数人们理所当然地认为是良好的软件开发的流程，
程。
其实都是从第点子开始的。对于其他流程处理问题的方式，要具有批
判性——但也要公平，当其他方式有助于你的项目时，就把它们整合
进来。有些人把这种做法称为流程怀疑论（Process skepticism）。
418
第12章
---
## Page 455
真实的世界
良好的流程交付良好的软件
比如说你的团队“过度热衷”于他们的流程，但假设你的团队还需要按时地完成
项目，或者需要交付运行正常的软件。如果情况是那样的话，你可能会碰到一些
流程本身引发的流程问题（Processproblem）。对一个流程的最终评判是由此流
程所开发的软件有多好，因此，你与你的团队成员可能需要适时地调整一些东西。
在你改变事情之前，你必领小心谨慎一改变事情有很多错误的方式。如果你正
在考虑改变流程的某个部分，以下几个规则可供考虑：
除非情况累急，否则不要在开发据环的中期改变事情。
对项目而言，不管事先计划得有多好，改变事情通常会是破坏性的。对于其
他的开发人员，取决于你把破坏性减小到最低程度。开发循环提供一个非常
自然的转折点，而且，一个好的开发循环总是过程较短，因此，如果你必须
改变你的流程，就等到当前开发循环结束吧。
?
建立衡量标准来确定你的改变是否有帮助。
如果你准备进行一些改变，最好有好的理由。同时，你还应该有一种方式
来衡量是否你的改变有效。这就意味着，每次的改变都至少被检查两次：
首先，决定是否要做改变，然后，至少在一轮开发循环之后，再衡量是否
改变是一个好的想法。也要试图去避免对成功微太主观和过于情感化的衡
量。要检查像软件测试覆盖率、错误数量统计、开发速度、碰头会议的持
续时间那样的事情，如果你得到更好的数字和更好的结果，那么你已经做
了一个好的改变。否则，那就等待下一轮开发循环，并且愿意再做改变。
3
重视你团队中的其他成员
决定一个项目成功与否的最大的决定因素是你团队中的成员。没有流程能
战胜糟糕的开发人员，但优秀的开发人员有时能战胜一个槽糕的流程。在评
估你的流程和你想要做的改变时，尊重你的团队成员一—以及他们的观点。
这并不一定表示你做每一件事情都要通过委员会来决定，但这确实表示只
要可能，你应当尝试建立共识。
如果你可以改变你当前软件流程中的某一件事情，它会是什么？为什
么？你是如何衡量你的改变是否有效的？
目前位置，
419
---
## Page 456
评估一切
下面是一些你在前面章节里就已经学会的最佳的实践。对于每一种技术，写下你认为
它提供给软件流程的是什么，然后，写下你如何衡量这些技术是否能对你的项目有帮
助。
这项技术提供的是什么？
你怎么知道它有效？
大白板
这项技术提供的是什么？
你怎么知道它有效？
使用情节
这项技术提供的是什么？
版本控制
你怎么知道它有效？
420
第12章
---
## Page 457
真实的世界
这项技术提供的是什么？
你怎么知道它有效？
连续集成（CI）
这项技术提供的是什么？
你怎么知道它有效？
测试驱动开发（TDD）
这项技术提供的是什么？
你怎么知道它有效？
测试覆盖率
目前位置
421
---
## Page 458
保证改变费效
下面是一些你在前面章节就已经学会的最佳的实践。对于每一种技术，写下你认为它
提供给软件流程的是什么，然后，写下你如何衡量这些技术是否能对你的项目有帮助。
答案
这项技术提供的是什么？
让团队中的备个成员知谨他们现
在进行到哪里了，还有其他哪些是必须要完成的，开运绳
环中发生了什么。你也可以看看项目是否在据进度执行。
你怎么知道它有效？应信有极少的错误来自漏辉的功解，较
大白板
好的计划外任务项的处理，对于在开发继环期阅确实究成了
什么能够充分常握。
这项技术提供的是什么？一种分解此件常求，记录运业需求
的方式，并国能确认客户所想要的系统的功能性是否正确
地得提到了。
你怎么知道它有效？应该只有报少数时子系统动能性的强
理解，丹发项回的迷度得以提高，因为开发人员知遥需构建
使用情节
的是什么。
这项技术提供的是什么？对代码的的改可以分置到团以中
的富个成员，需显没有文伴善美和重写的局险。你也可以
用标记岛分支方洁，户生多个款件服本。
版本控制
你怎么知道它有效？温有代碳图必精慎的立件合科重写和
被毛失。并且，对致件其中一都分的够酸不应该影响其他
代码段并导致嵌件的中新。
422
第12章
---
## Page 459
真实的世界
这项技术提供的是什么？集0录中的致件总是可构建的
图为继译和别试是款件调入的一部分，存储目录中的代码总
是能运行。
你怎么知道它有效？深有人在课来代码时，系感代研展不
可运行的，或是不可编译的，错误报善的数量应信减少，固
连续集成（CI）
为代码只有在经过了测试之局，才被调入。
这项技术提供的是什么？
一种保证代码准款殊开发兴积就一
可测的方法，同时，把具有测试应码（Test-nienily）
的模贰引入到代码中。
你怎么知道它有效？因为测试工开追在款件开道的平期
固站，极少的致伴错误户生。具有较好的测试覆盖率，
测试驱动开发（TDD）
行代码都有用。可能有较码的设计和较少无用的代码。
这项技术提供的是什么？比较码地断量多少代磁测试逐
过和被使用的方法。夏现错误的一种方贰，国为致伴特误
通常存在于温有被测试和覆差的代码之中。
你怎么知道它有效？款件误集中户生在述寒情形，因为
代码的主要都分是经过象好的到试的，相少温有使用或无
测试覆盖率
用的代码存在。
目前位置，
423
---
## Page 460
如果需要，就正规化
要求正式...·.
有一些项目你可能必须采用比索引卡和便利贴更为正式的形式，有些客户和公
司要求更正规一点的文档。这没有关系，你学过的每一项技术仍然可以采用，不
需要丢弃任何东西，也能够让你的软件开发工作更正式一点。
首先，要记住，除非是绝对必要，否则，你一定要等到你当前的开发循环结束
后才对流程进行变更。其次，你要清楚为什么要做流程上的变更并且要清楚如
何衡量你的变更的有效性。“除非我们提供设计文档，否则客户不付报酬”，
这句话是让你的流程更为正式的一个非常合理的出发点。然面，知道如何去衡
量流程变更的有效性仍然很重要。大多数的客户真正关心（正当地）的是他们
自己的业务，并不是想给你更多额外的工作。
如果你打算把更多的文档资料、项目计划、用户案例或者其他的东西组织在一
起，要确认这样是对你的客户是有帮助的——希望也有助于你的团队—能更好
地进行沟通。那才是对你的项目有益的结果。
做你正在做的工作..只是要更规范些
你正在从事的大多数工作都可以被植提并以更为正式的方式报告。通过软件工
具的帮助以及进行额外的修饰，从你的大白板到使用情节的每一件事情都可以
转换成符合你的客户需要的东西。
你的类用可能需要转换到类
银etnlRoe工具中.或
你可能需把使用情节转编成
提到设计文格中
使用象例。翻到剂录5，
壹使用意例例子。
如果你靠复是为正式的项0计划
逐常你可以把大台板上的内容排提
到像激收的项目管理致件中。
424
第12章
---
## Page 461
真实的世界
没有愚蠢的问题
问：
我的客户想要完整的设计
一般来说，你并不恕要多个需求文格来
文档，他就是不接受我的设计只是通
指导你如何进行实施工作。要保持文
我说服客户不使用索引卡就可以了吗？
格和使用情节的网乡是很图难的，并
过“演变”而产生的
且，总是会有人被冲突卡住。
答：
相反，议着从使用情节开始，并在
还是不太正式的问题，问题是关于什
对待这个问题要小心，对于
熟悉其产品有经验的固队来说，代码
开发描环结束时，把使用情节分账
么祥的工作能使款件的脑写正确，对
重构和渐进式设计可以运行得很好，但
为“用户将要”的陈述句，这些陈述
于大多数团队来说，也含有使用情节
旬能将合正式的需求文格，或者，如
和任务的大白板非需有效，因为大白
还是非需客易出错，
，最重要的是，不
采想要的票西与使用情节没有什么关
板简单、直观，而且在沟通需要去做
提供给客户想要的设计文格就是要求
他们凭空对你正在做的工作产生信心。
系，你可以要试另外一个方向：把
什么方面比较有效。但对于有外部团
几个“用户将要”的陈远句放到一个
队参加的项目就没有效，外部团队可
大多数成功的润队在毒轮开发循环之前
使用情罗之中，并从这些使用情节开
能依赖于你的教件，或者市场管销部
都至少做一类预设计。你必须确认客户
始工作。但要注意、都些“用户将
要安排重委的版本发布并且开始派发
要求的设计文格是有价值的，不过，与
要”的需求常常不能以整体的方式给
产品印剧品之时。你不必身正式而正
设计相关的资料通常对你和客户都是
你提供美于应用的大量需景，以及它
式，但是，有时你需要不只是索引卡。
相当有用的。要确认有考虑到估计所涉
及到的工作，不要让测议驱动开发成
在做什名，
问：如果我们必须使用项目计划
者“渐进式的设计”成为
“这是昨天
两种方法都不理想，但有些折表方法
还是可行的。但是，你必短努力地考
管理工具，我还应该用大自板吗？
深夜我输入的随机代码”的借口，
虑两个方向上的变化。
问：
我的客户需要一份需求文档
选择一个对你
劳动，但是小规模的图队用大白板可
但是，使用情节对我的团队工作更有
以运行得报好，算是最有效的了，圈
效，我该怎么办？
的团队和项目
队成员隶自动于移助贴在大白板上的
答：
都能运行起来
任务比看是募截或打印的文件更有网
如累你的客户拥有使用较为
步的感觉。
正式需求文格的经历，那么要让客户
的流程.·.·.
过波到采用使用情节就可能比较图难。
·…·接着，调
整其产出，使
它符合你的客
户的需要。
目前位置
425
---
## Page 462
其他资源
一些额外的资源
就算所有的新工具都能为你所用，还是有更多的知识要学习。这里提供资源，
提供更多关于软件开发的有用信息和你一直在学习的技术与方法方面的资料。
重视大脑的PMP
如果你正在管理你的团队，除了大白板外，还有一个好的
用于项目管理的软件工具。PMP带领你超越一般的项目管
理的基础知识，直接进入已经被证实的项目管理流程，还
帮助你通过项目的实施过程获得相应的证书。
即使你从不认为自己是一个项目
智理经理，但如暴你带语或考负
费管理一个团队，这本书应是有
益的。
雅虎的测试驱动开发团队
空前的测试驱动开发的最佳资源之一就是Yahoo网站上
的“测试驱动开发”社区。这个社区相当活跃，提供最新
的讨论、争论以及一些重要的历史资料供查询。你可以通
过访间网址thttp://tech.groups.yahoo.com/group/
testdrivendevelopment/来获取这个社区的在线资料。
重视大脑的面向对象的分析与设计
Analys
想不想更深入地学习有关代码的一些知识？想不想学习更多
的有关面向对象的设计与实现原理方面的知识？如果你喜爱
绘制类图和实施策略模式，看看这本书。以便对代码有更深入
的了解。
426
第12章
---
## Page 463
真实的世界
Rational统一软件过程站点
反复式开发过程的始祖之一是Rational统一软件过程（RUP），
它是一个相当重量级的即学即用的流程，但它的设计易于调
整以满足你的需求，它也是针对大规模企业软件开发的一个
常用方法。一定要阅读这方面的知识和学习敏捷式（Agile）、
或者极限编程（ExtremeProgramming）网站，这样，你可以
获得全面的知识。相关的知识请查看http://www-306.ibm.
com/software/avdtools/rup/,
敏捷过程联盟
Agile
敏捷过程联显是获得敏捷过程方面的信息的一个很好的起
Alliance
点，如极限编程、Scrum或者Crystal，敏捷式开发流程是非
常轻量级的流程，你将会看到很多你已经学会的知识，这
些内容有时是采用不同的观点的。请查看http：//vwx，
agilealliance.org/。
更多的知识二更好的流程
还有很多的其他资源存在。良好软件开发的一部分正是总是知道现
在进行着什么事情，也就意味着你要持续阅读、利用Google进行搜
索、咨询执行其他项目的同伴—任何你可以弄清楚其他人在做什
么以及什么对它们有效的方法。
另外，不要为尝试新的事情而担心，即使只针对一轮开发循环。你
决不可能事先知道哪些方法会有效，或你所选择的正好适合你的项
目。
目前位置
427
---
## Page 464
软件开发工具箱
软件开发的宗旨是开发和交付伟大的软件，在本章中，你
已经获得了一些额外的资源，这些资源有助于你把知识用于
实践。本书附录i，有一份完整的工具清单。
本章要点
当你计划对流程作变更的