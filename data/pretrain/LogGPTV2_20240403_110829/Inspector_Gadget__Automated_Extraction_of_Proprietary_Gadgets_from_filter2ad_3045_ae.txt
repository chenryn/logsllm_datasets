that can perform the downloading and
decoding steps in a self-contained manner. A good example
for malware with this behavior is Pushdo. This sophisti-
cated malware is capable of downloading additional compo-
nents onto an infected machine, while hiding the attacker’s
traces [26].
After starting the sample in ANUBIS, we can observe
several HTTP packets between the analysis environment and
Get System Timefetch_date_from_url()parse_date_from_url()Check if date is after Nov 25thGenerate a list of 250 domains by calling Generate_domains()rand()get_date_from_url()SetSystemTime()Query_search_engines_set_time()Check if date is after Nov 25th 2008_mbscatabssinlograndstrok_strnicmpatoiInternetOpenUrlAHTTPQueryInfoAInternetOpenAWed, 18 Nov 200923:42:00 GMT JanNov ==        ...   Nov{18 2009xvxpaobp.infomuvuljzkews.bizyuzsxurg.comoybigc.biz...GetSystemTimefetch_date_from_url()parse_date_from_url()generate domains()a remote server. This activity is followed by ﬁle creation,
and then the execution of the created ﬁles. At this point, we
stop the analysis and extract a gadget that implements the
ﬁle decoding and creation. Starting with the content that is
written to a ﬁle, INSPECTOR detects the dependencies to the
input received in the HTTP reply. Thus, the gadget includes
the entire HTTP conversation, together with the code for
building the appropriate request.
During execution, the gadget queries the environment for
various system properties by reading registry values and
performing low-level ﬁle system interactions. For our experi-
ments, we allowed all read accesses to the host environment,
ignoring any changes requested by the gadget code. After
this initialization phase, the gadget starts to contact a remote
server. Once successfully connected, it downloads binary
data using the standard HTTP protocol, then transforms this
data, and writes the result to a ﬁle.
Over a period of 16 days, we used this gadget to actively
monitor binary updates served by three different command
and control servers observed in recent ANUBIS submissions.
While the extracted gadget always tries to contact the same
IP for updates, we used a conﬁguration option in the player
to modify the contacted host. The results show that each
server delivered a different executable (measured by the
MD5 checksum of the decrypted binary). However,
the
served ﬁles per server did not change over the monitoring
period.
C. Binary Update Decryption: Pushdo
In the previous case study, we demonstrated how we are
able to actively download and decode a binary from a live
command and control server. In some situations, however, it
would be convenient for an analyst to have the possibility to
passively decrypt recorded, or live network trafﬁc generated
by a machine infected with Pushdo. An analyst can then
examine (in a forensic setting) the binaries downloaded by
a speciﬁc host.
Unfortunately, the nature of the update protocol used by
Pushdo creates some challenges for the analyst. Instead of
downloading a static URL during the update process, a
Pushdo client ﬁrst generates a random sequence of bytes
to be used as decryption key. This key is then encoded and
appended to the static part of the URL. In turn, the command
and control server splits the URL into static and key parts,
decodes the key, and uses it to encrypt the ﬁle sent to the
requesting client [26].
Within the network dump, we can, thus, only observe
the encoded key. Therefore, we need to invert the Pushdo
gadget from the previous example to obtain the decoded
key. As the target of the brute-forcing process, we specify
the outgoing HTTP request. INSPECTOR then automatically
identiﬁes the sources from the random number generator,
and searches for acceptable input values until the generated
request matches the one found inside the recorded network
trafﬁc. Once the requests match, we have found the key to
use for the decryption. With this information, we can then
analyze the HTTP reply and decrypt its content.
We have tested the decryption on ten different network
dumps and were able to successfully extract the downloaded
binary in all cases. On average, the inversion process ﬁnished
after less than 40 seconds. This demonstrates the effective-
ness and usefulness of the gadget inversion on real malware
behavior.
D. Binary Update Generation: Pushdo
To further evaluate the capabilities of the gadget inversion,
we extended the previous use case as follows: After extract-
ing the decryption key, we speciﬁed the binary the gadget
should write to ﬁle. That is, since the ﬁle content depends on
data received from the update server, we allowed the brute-
forcer to manipulate the bytes received from the network.
The practical use case for this problem is the following:
An administrator can redirect binary update requests from a
machine infected with Pushdo to a local HTTP server. This
HTTP server uses our gadget inversion technique to generate
an encrypted binary that uses, as key,
the encoded key
received within the request. The pushed binary (which could
actually be a disinfection tool in this case) is subsequently
downloaded, decoded, and executed by the requesting host.
In principle, the same concepts as in the pcap decoding
example can be applied to this use case. However, we
have to consider an additional difﬁculty: Even for small
applications, a typical Windows binary is much larger than
several kilobytes in size. Therefore, brute-forcing a complete
binary within a reasonable amount of time is infeasible. Our
solution to this is simple: We encrypt a minimal helper
application that contacts our HTTP server and downloads
an (unencrypted) DLL that contains the actual payload.
For our tests, we used TinyPE [27], a binary of 140 bytes
in size, and a simple HTTP server written in Python. On
a MacBook Pro with a 2.8 GHz Intel Core 2 Duo CPU,
we were able to generate an encrypted binary within 444
seconds on average. However, an interesting property allows
us to signiﬁcant improve these results: Using INSPECTOR,
we can see that, similar to the XOR encryption mentioned
in Section V-C, each of the four key bytes is used inde-
pendently for decrypting one fourth of the network input.
This allows us to split the 232 possible keys/requests into
4 ∗ 256 independent, encrypted inputs. Upon receiving an
HTTP request, these inputs can be combined to form a
single, valid reply. On the same machine, we can, thus, pre-
compute all possible replies in well below 1.5 days.
E. Template-based Spamming: Cutwail
Current spambots typically use template-based spamming,
a speciﬁc technique of sending spam in which the attacker
sends each bot a spam template that describes the structure
of the spam message to be sent [28]. In addition, the bot
also receives additional meta-data (e.g., recipient list or a
list of URLs) that is then used to generate and send new
spam mails.
In this use case, we are interested in extracting a gadget
that performs the proprietary communication between a host
and the command and control server,
together with all
relevant decoding steps. Such a gadget enables us to obtain
the spam template, and we can observe what spam mails
a bot is supposed to send out currently. This allows us to
track the botnet, and we can use the collected information to
signiﬁcantly improve existing systems such as AutoRE [29]
and Botlab [30]. These systems rely on executing a copy
of the bot and collecting spam mails that are sent out.
They reconstruct the actual template from this collected data.
Using our gadget extraction approach, we can immediately
obtain the full template, and do not need to reconstruct it
based on network traces and the running of a (potentially
dangerous) copy of the malware sample.
A bot that is commonly seen in connection with Pushdo is
Cutwail [26]. This malware family is often downloaded by
machines infected with Pushdo via the update mechanism,
and it
is responsible for sending out spam mails. The
downloading of the templates, and the entire communication
between an infected machine and the command and control
server is encoded using a proprietary algorithm. A key of
length n is used that is embedded in the binary [26]. The
algorithm that the malware uses is the following:
1) Cutwail divides the encrypted string into blocks of
length that equal to the length of the current key.
2) Each block is then XORed with the key.
3) The result is reversed (byte 1 and n are swapped, 2
4) Even-numbered blocks (e.g. Block 2, 4, . . . ) are also
and n − 1, etc.).
NOTed.
5) Finally, the remaining bytes which do not ﬁt into a
full sized block are simply NOTed.
The communication is handled in three stages. First,
Cutwail downloads the current conﬁguration settings, which
includes information such as the connection timeout, the
maximum numbers of attempts to send out mails, and the
delays that the malware should respect. Second, a handshake
is performed. Third, the malware downloads the spam tem-
plate together with all meta-information such as target e-
mail addresses. Once this data is decoded using the above
algorithm, Cutwail starts to send out mails.
During the analysis of Cutwail, in order to extract the
gadget, we ﬁrst execute a Cutwail sample in our analysis
environment. Once the bot starts to send out spam mails,
we can terminate the dynamic analysis step since we can
be sure that all relevant communication has already taken
place. We select all calls receiving the encrypted content
as our initial ﬂow positions. INSPECTOR then extracts the
relevant algorithm, and generates a stand-alone gadget that
executes the same operations.
"{_FIRSTNAME} {_LASTNAME}" 
Hello my new friend, I search a good man at other
country...\n For me it to communicate for the first
time with the person from other country, by
Internet.\nAnd it
...
{TAGMAILFROM}
{nReceived}
Message-ID: 
From:
To:
Subject:
Date:
MIME-Version: 1.0
Content-Type: multipart/mixed;
boundary="----=_NextPart_000_0006_{_nOutlook_Boundary}"
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express {_nOutlookExpress_4}
{SUBJECT}
{DATE}
Figure 3.
communication gadget.
Excerpt from spam template extracted by Cutwail C&C
Upon invocation of the extracted gadget, we obtain in-
formation from the same command and control server that
was contacted during the dynamic analysis run. This is
because the IP address to contact is hard-coded inside the
binary. We can, again, use the conﬁguration options of the
gadget player to modify this IP address, enabling us to
monitor multiple command and control servers concurrently.
Figure 3 shows an excerpt of a decoded spam template.
The conﬁguration options are simple key-value pairs such
as knockdelay 60 or maxtryconn 5. Note that the
spam engine never stores any of this decoded information
in a ﬁle, but keeps all information only in memory. Thus,
this information cannot be obtained by simply executing
the spam engine. An analyst needs to manually analyze the
operations with a debugger, or by some other means.
F. Conﬁguration of Keylogger: URLZone
Modern keyloggers enable an attacker to specify which
websites should be monitored on the machine of a vic-
tim [31]. Each time the victim accesses one of these sites, the
keylogger starts to record the information that the attacker
is interested in. For example, the attacker is often interested
in username and password combinations, or similar sensi-
tive data. The dynamic conﬁguration mechanism is usually
implemented by downloading a conﬁguration ﬁle from the
command and control server right after the keylogger has
started. The conﬁguration ﬁle is commonly encoded using
a proprietary algorithm. Thus, the malware ﬁrst decodes the
ﬁle, and then starts to monitor the activities of the victim.
In this case study, we are interested in extracting a gadget
that contains the instructions related to downloading and
decoding the conﬁguration ﬁle. We can then monitor the
current conﬁguration of a keylogger, and learn which web-
sites are interesting for an attacker. Since we can periodically
execute the gadget, we can also continuously observe the
=======================POST=======================
...
[ITBEGINBLOCKHOOK]
ITHOST=|banking.postbank.de|End
ITPAGE=|/app/login.d*|End
ITMETHOD=|2|End
ITIFINIT=|%DISP%|End
ITREQMATH=|jsOn=*&accountNumber=*&pinNumber=*|End
...
---------------------- STATA ---------------------
ITINJHOST=|my.hypovereinsbank.de|End
ITINJPAGE=|/*?view=/*|End
...
ITINJPASTE=|%HYPOBAL%+%AMOUNT%-%TRUEAMOUNT%|End
ITINJPASTEMN=|
%HYPOBAL%+%AMOUNT%-%TRUEAMOUNT%
EUR|End
Figure 4. Conﬁguration options revealed by URLZone download gadget.
activities of an attacker, and detect changes in the attacked
target websites.
URLZone is one of the most advanced keyloggers cur-
rently found in the wild. Besides common functionality
found in modern keyloggers such as the ability to collect
user credentials entered by the victim or the ability to inject
HTML code into web pages, this malware can also perform
man-in-the-middle attacks against banking applications [32].
The malware downloads an encoded conﬁguration ﬁle from
the command and control server that speciﬁes which URLs
should be monitored for credentials.
Similar to the previous case studies, our goal is to extract a
gadget that enables us to obtain the current conﬁguration ﬁle
from the command and control server in a decoded format.
Hence, we start by executing a sample of URLZone in our
analysis environment. Once the malware has downloaded
the current conﬁguration ﬁle, we stop the execution, and
begin with the gadget extraction process. Similar to the
Pushdo gadget above, based on the download activity, we
let INSPECTOR ﬁnd an appropriate target ﬂow in order to
start the gadget extraction.
In experiments, using the gadget, we monitored one active
command and control server over a period of eleven days by
invoking the gadget on an hourly basis (note that this server
is still active at the time of writing this paper). On each
invocation, the gadget successfully extracted a conﬁguration
ﬁle, as well as templates for altering displayed webpages to
conceal its information stealing attack [32]. Extracts from
this data can be seen in Figure 4. Interestingly, all downloads
provided the same decrypted content. This could be because
URLZone has been seen in the wild for quite some time.
Thus, the current templates could have proven to be reliable.
Also, the monitoring time might not have been long enough.
VII. RELATED WORK
Given the importance and the threat that malicious code