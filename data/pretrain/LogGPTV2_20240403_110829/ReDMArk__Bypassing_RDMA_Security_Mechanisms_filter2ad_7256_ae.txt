RoCE packets inside IPsec. However, since IPsec does not
directly support RDMA trafﬁc and encapsulates the RDMA
headers, it authenticates trafﬁc based on IP address and UDP
port. To prevent the injection of RoCE packets into IPsec-
enabled QPs from other end hosts, the NIC stores QP context
information and enforces an association the QP number and
the source IP address. Using an IPsec tunnel between two
end points would be able to prevent A1 and A2 for Ethernet
networks, but cannot be applied to the InﬁniBand protocol.
Application-layer Encryption and Authentication.
Application-level encryption and authentication (e.g.,
based on TLS with client authentication [32]) of RDMA
applications is not possible, because RDMA read and write
operations can operate as purely one-sided communication
routines (without involvement of the other parties CPU).
An approach based on application-layer encryption would
require a temporal buffer for the incoming encrypted
messages. These would then be decrypted by the CPU and
then copied to the destined location completely negating
RDMA’s advantages.
Encryption and Authentication Integrated in IBA. In
contrary to application-layer cryptography, encryption and
authentication of RDMA messages could also be integrated
into the design of IBA. Lee et al. [16,17] suggested to replace
the Invariant CRC ﬁeld with a MAC to achieve packet authen-
tication. Recently, Taranov et al. [36] proposed sRDMA, a
protocol that extends IBA by designing a connection mode
that provides authentication and encryption for RDMA based
on symmetric cryptography.
Encryption and authentication integrated into IBA can pre-
vent information leakage to on-path attackers and also prevent
message tampering as the RDMA message header is authenti-
cated. Thus, it becomes impossible for an attacker to spoof
RDMA header ﬁelds, prevents him conducting all attacks
based on packet injection.
7.4 Other Mitigation Mechanisms
M7 Per-Client Resource Constraints. RDMA-capable de-
vices should limit the number of concurrently open QP con-
nections and allocated resources on a per-client basis. Oth-
erwise, attacks based on resource exhaustion cannot be pre-
vented. With per-client resource constraints in place an at-
tacker would need to collude with a large number of end-
points to successfully execute resource exhaustion attacks.
Allocating resources per-client could be realized based on the
InﬁniBand adapter identiﬁers for native IB connections and
using the IP address for RoCE connections.
M8 In-Network Filtering. Apart from modifying IB-
based architectures, packet injection could also be prevented
using in-network ﬁltering. In datacenter deployments, oper-
ators could deploy a ﬁltering mechanism at the ingress of
the network to effectively prevent an attacker from injecting
spoofed packets (e.g., similar to [9]).
8 Related Work on RDMA attacks
RFC 5042 [30] analyzes the security issues around uses
of RDMA protocols. It deﬁnes an architectural model for
RDMA-based implementations and reviews various basic at-
tacks including spooﬁng, tampering, information disclosure,
and exhaustion of shared resources. The authors suggest the
use of IPsec encryption and authentication to mitigate at-
tacks that target end-to-end security, which unfortunately fails
to solve the problem of endpoint authentication. RFC 5042
USENIX Association
30th USENIX Security Symposium    4289
aims to provide a guideline for designing protocols based
on RDMA, but is completely implementation agnostic and
only mentions potential vulnerabilities speciﬁc to RDMA
protocols. ReDMArk tests the applicability of vulnerabilities
to speciﬁc implementations of RDMA (such as InﬁniBand)
and shows that the security pitfalls of using RDMA remain
misunderstood.
Tsai et al. [39] discuss the threats and opportunities of
one-sided communication. They raise concerns about the pre-
dictability of hardware-managed memory protection key and
the potential misuse of one-sided RDMA communication for
DoS. Compared to previous work, ReDMArk provides an
in-depth security analysis of RDMA networking (e.g., investi-
gates the algorithms behind rkey generation in detail) covering
not only vulnerabilities, but discussing the full chain of vul-
nerabilities, proposes speciﬁc attacks based on the discovered
vulnerabilities, and mitigations for these attacks.
Kornfeld Simpson et al. [33] summarize the security ﬂaws
in RDMA protocols (e.g., missing authentication and encryp-
tion) and discuss security challenges of designing RDMA-
enabled storage systems. In addition to the attacks discussed
by ReDMArk, they suggest to exploit priority ﬂow control
(PFC) pause frames in RoCE [12] to ﬂood buffers on switches.
However, they mention that the most recent version of RoCE
is not subject to this attack as it does not require PFC.
Furthermore, Tsai et al. [38] discovered that RNICs could
be exploited for side-channel attacks. They implemented an
RDMA-based side channel attack that allows an attacker on
one client machine to learn how victims on other client ma-
chines. The attacker uses RDMA access latency and a trained
classiﬁer to statistically predict victim accesses.
Kurth et al. [15] have shown that the Intel DDIO [1] and
RDMA features facilitate a side-channel attack named Net-
CAT. Intel DDIO technology allows RDMA read and write
accesses not only to a pinned memory region, but also parts
of the lowest CPU cache. NetCAT remotely measures cache
activity caused by a victim’s SSH connection to perform a
keystroke timing analysis and recovers words typed in the
SSH session. Using this analysis, an attacker can recover
words typed in the SSH session on another computer. These
works based on side-channel attacks using RDMA are com-
plementary to ReDMArk.
9 Conclusion
RDMA architectures such as RoCE and InﬁniBand were de-
signed for HPC and private networks, and have neglected
security in their design in favor of focusing on high perfor-
mance. As illustrated by ReDMArk, the design of IBA and
the implementation of IB-capable NICs contain multiple vul-
nerabilities and design ﬂaws. These weaknesses allow an ad-
versary to inject packets, gain unauthorized access to memory
regions of other clients connected to an RDMA-based service
with potentially drastic consequences, and effectively disrupt
communication in RDMA networks. Given that InﬁniBand is
deployed in public infrastructure and more providers plan to
adopt RDMA networking, weak RDMA security creates real-
world vulnerabilities in RDMA-enabled systems. This work
shows the security implications of RDMA on cloud systems
and demonstrates the critical importance of security in the
design of upcoming versions of InﬁniBand and RoCE (e.g.,
by fully integrating header authentication and payload encryp-
tion). In addition, developers of RDMA-enabled systems must
be aware of the threats introduced by RDMA networking and
should employ mitigations such as using type 2 memory win-
dows, a separate PD for each connection, and our proposed
algorithms to randomize the QPN and the rkey generation.
Responsible Disclosure
We have notiﬁed and responsibly disclosed the weaknesses to
Mellanox, Broadcom, and Microsoft prior to the submission
of this work.
Acknowledgments
We would like to thank our shepherd, Haya Shulman, and
the anonymous reviewers for their constructive feedback. We
thank Mellanox Technologies and Broadcom Inc. for the hard-
ware donations as well as their feedback during the disclosure
of this work. In addition, we thank Igor Zablotchi for assisting
with the evaluation of this work. We gratefully acknowledge
support from ETH Zurich, and from the Zurich Information
Security and Privacy Center (ZISC). Furthermore, we thank
the Microsoft Swiss Joint Research Centre for their support.
References
[1] Intel® Data Direct
I/O Technology Overview.
https://www.intel.co.jp/content/dam/www/
public/us/en/documents/white-papers/data-
direct-i-o-technology-overview-paper.pdf,
2019. [Online; accessed 19-Sep-2020].
[2] Raw Ethernet Programming: Basic Introduction -
Code Example. https://community.mellanox.com/
s/article/raw-ethernet-programming--basic-
introduction---code-example, 2019.
[Online;
accessed 19-Sep-2020].
[3] InﬁniBand Trade Association. The InﬁniBand archi-
tecture speciﬁcation. https://www.inﬁnibandta.org/ibta-
speciﬁcations-download/, 2000.
[4] Inﬁniband Trade Association. Supplement to Inﬁni-
Band architecture speciﬁcation volume 1, release 1.2. 1:
Annex a16: RDMA over Converged Ethernet (RoCE),
2010.
[5] Christian Cachin. Entropy measures and unconditional
security in cryptography. PhD thesis, ETH Zurich, 1997.
4290    30th USENIX Security Symposium
USENIX Association
[6] Victor Costan and Srinivas Devadas.
Intel SGX ex-
plained. IACR Cryptology ePrint Archive, (086), 2016.
[7] Naganand Doraswamy and Dan Harkins. IPSec: the
new security standard for the Internet, intranets, and
virtual private networks. Prentice Hall Professional,
2003.
[8] Aleksandar Dragojevi´c, Dushyanth Narayanan, Orion
Hodson, and Miguel Castro. Farm: Fast remote memory.
In Proceedings of USENIX Conference on Networked
Systems Design and Implementation (NSDI), pages 401–
414, 2014.
[9] P. Ferguson and D. Senie. Network ingress ﬁltering:
Defeating denial of service attacks which employ IP
source address spooﬁng. BCP 38, 2000.
[10] Vasilis Gavrielatos, Antonios Katsarakis, Arpit Joshi,
Nicolai Oswald, Boris Grot, and Vijay Nagarajan. Scale-
out ccnuma: Exploiting skew with strongly consistent
caching. In Proceedings of the Thirteenth EuroSys Con-
ference, pages 1–15, 2018.
[11] Juncheng Gu, Youngmoon Lee, Yiwen Zhang, Mosharaf
Chowdhury, and Kang G. Shin. Efﬁcient memory dis-
aggregation with INFINISWAP. In Proceedings of the
USENIX Conference on Networked Systems Design and
Implementation (NSDI), pages 649–667, 2017.
[12] Chuanxiong Guo, Haitao Wu, Zhong Deng, Gaurav Soni,
Jianxi Ye, Jitu Padhye, and Marina Lipshteyn. Rdma
over commodity ethernet at scale. In Proceedings of the
ACM SIGCOMM Conference, pages 202–215, 2016.
[13] Anuj Kalia, Michael Kaminsky, and David G. Andersen.
Using RDMA efﬁciently for key-value services.
In
Proceedings of ACM SIGCOMM, pages 295–306, 2014.
[14] Antonios Katsarakis, Vasilis Gavrielatos, MR Siavash
Katebzadeh, Arpit Joshi, Aleksandar Dragojevic, Boris
Grot, and Vijay Nagarajan. Hermes: a fast, fault-tolerant
and linearizable replication protocol. In Proceedings of
the International Conference on Architectural Support
for Programming Languages and Operating Systems,
pages 201–217, 2020.
[15] Michael Kurth, Ben Gras, Dennis Andriesse, Cristiano
Giuffrida, Herbert Bos, and Kaveh Razavi. NetCAT:
Practical cache attacks from the network. In IEEE Sym-
posium on Security and Privacy (S&P), 2020.
[16] Manhee Lee and Eun Jung Kim. A comprehensive
framework for enhancing security in InﬁniBand archi-
tecture. IEEE Transactions on Parallel and Distributed
Systems, 18, 2007.
[17] Manhee Lee, Eun Jung Kim, and Mazin Yousif. Security
enhancement in InﬁniBand architecture. In Proceedings
of the IEEE International Parallel and Distributed Pro-
cessing Symposium, 2005.
[18] Bojie Li, Tianyi Cui, Zibo Wang, Wei Bai, and Lintao
Zhang. Socksdirect: Datacenter sockets can be fast and
compatible. In Proceedings of the ACM Special Interest
Group on Data Communication, pages 90–103. 2019.
[19] Mingzhe Li, Xiaoyi Lu, Hari Subramoni, and Dha-
baleswar K Panda. Designing registration caching free
high-performance MPI library with implicit on-demand
In IEEE International
paging (ODP) of InﬁniBand.
Conference on High Performance Computing (HiPC),
pages 62–71, 2017.
[20] Linux RDMA. RDMA core userspace libraries and
daemons. https://github.com/linux-rdma/rdma-
core/, 2020. [Online; accessed 19-Sept-2020].
[21] Linux RDMA. Software RDMA over Converged Eth-
https://github.com/SoftRoCE/rxe-dev/,
ernet.
2020. [Online; accessed 19-Sept-2020].
[22] Youyou Lu, Jiwu Shu, Youmin Chen, and Tao Li. Octo-
pus: an RDMA-enabled distributed persistent memory
ﬁle system. In USENIX Annual Technical Conference
(ATC), pages 773–785, July 2017.
[23] David JC MacKay. Information theory, inference and
learning algorithms. Cambridge university press, 2003.
[24] James L Massey. Guessing and entropy. In Proceedings
of 1994 IEEE International Symposium on Information
Theory, page 204. IEEE, 1994.
[25] Mellanox.
NVidia Mellanox ConnectX-6 DX.
https://www.mellanox.com/files/doc-2020/
pb-connectx-6-dx-en-card.pdf, 2020.
accessed 19-Sept-2020].
[Online;
[26] Mellanox. Understanding mlx5 Linux Counters and Sta-
tus Parameters. https://community.mellanox.com/
s/article/understanding-mlx5-linux-
counters-and-status-parameters, 2020. [Online;
accessed 19-Sept-2020].
[27] Microsoft.
Cve-2019-1372, azure
code
execution vulnerability.
mote
//portal.msrc.microsoft.com/en-US/security-
guidance/advisory/CVE-2019-1372, 2020.
line; accessed 19-Sept-2020].
stack re-
https:
[On-
[28] John Ousterhout, Arjun Gopalan, Ashish Gupta, Ankita
Kejriwal, Collin Lee, Behnam Montazeri, Diego Ongaro,
Seo Jin Park, Henry Qin, Mendel Rosenblum, Stephen
USENIX Association
30th USENIX Security Symposium    4291
Rumble, Ryan Stutsman, and Stephen Yang. The RAM-
Cloud storage system. ACM Trans. Comput. Syst.,
33(3):7:1–7:55, August 2015.
[29] R Kim Peterson. Position independent code location
system, 1996. US Patent 5,504,901.
[30] J. Pinkerton and E. Deleganes. Direct Data Placement
Protocol (DDP) / Remote Direct Memory Access Proto-
col (RDMAP) Security. RFC 5042, October 2007.
[31] Marius Poke and Torsten Hoeﬂer.
Dare: High-
performance state machine replication on rdma net-
works. In Proceedings of the International Symposium
on High-Performance Parallel and Distributed Comput-
ing (HPDC), pages 107–118, 2015.
[32] Eric Rescorla. The Transport Layer Security (TLS)
Protocol Version 1.3. RFC 8446, 2018.
[33] Anna Kornfeld Simpson, Adriana Szekeres, Jacob Nel-
son, and Irene Zhang.
Securing RDMA for high-
performance datacenter storage systems. In USENIX
Workshop on Hot Topics in Cloud Computing (Hot-
Cloud), 2020.
[34] Patrick Stuedi, Animesh Trivedi, Jonas Pfefferle, Ana
Klimovic, Adrian Schuepbach, and Bernard Metzler.
Uniﬁcation of temporary storage in the nodekernel ar-
In Proceedings of USENIX Conference
chitecture.
on Usenix Annual Technical Conference (ATC), page
767–781, 2019.
}
[40] Fernando Vano-Garcia and Hector Marco-Gisbert.
KASLR-MT: Kernel address space layout randomiza-
tion for multi-tenant cloud systems. Journal of Parallel
and Distributed Computing, 137:77–90, 2020.
[41] Michal Zalewski. Strange attractors and tcp/ip sequence
number analysis. RAZOR/Bindview Corporation, 2001.
A Algorithms of rkey generators
static uint32_t bnxt_get_key(void){
static uint32_t key = 0x100;
key += 0x100
return key;
}
Listing 4: rkey generation of bnxt_re
static uint32_t rxe_get_key(void){
static uint32_t base = 0x100;
static unsigned key = 1;
base +=
0x100;
key = key << 1;
key |= (0 != (key&0x100))^(0 != (key&0x10))
^(0 != (key&0x80))^(0 != (key&0x40));
key &= 0xff;
return base + ((uint8_t)key);
Listing 5: rkey generation of SoftRoCE
[35] Patrick Stuedi, Animesh Trivedi, Jonas Pfefferle, Radu
Stoica, Bernard Metzler, Nikolas Ioannou, and Ioannis
Koltsidas. Crail: A high-performance I/O architecture
for distributed data processing. IEEE Data Eng. Bull.,
40(1):38–49, 2017.
[36] Konstantin Taranov, Benjamin Rothenberger, Adrian
sRDMA: Efﬁcient nic-
Perrig, and Torsten Hoeﬂer.
based authentication and encryption for remote direct
memory access. In USENIX Annual Technical Confer-
ence (ATC), 2020.
[37] Mellanox Technologies. RDMA Aware Networks
Programming User Manual, Rev 1.7.
https://
www.mellanox.com/related-docs/prod_software/
RDMA_Aware_Programming_user_manual.pdf, 2015.
[38] Shin-Yeh Tsai, Mathias Payer, and Yiying Zhang.
In USENIX
Pythia: Remote oracles for the masses.
Security, pages 693–710, 2019.
[39] Shin-Yeh Tsai and Yiying Zhang. A double-edged
sword: Security threats and opportunities in one-sided
network communication. In USENIX Workshop on Hot
Topics in Cloud Computing (HotCloud), 2019.
static Queue key_queue;//queue for deregistered keys
static uint32_t base = 0x100; // is device-specific
static uint32_t MASK = 0xFFFFFFFF; // 24bit mask
static uint32_t mlx4_get_key(void){
static uint32_t key = 0x100;
if(key_queue.is_empty()){
key+= 0x100;
return base + (key & MASK);
}
uint32_t old_key = key_queue.pop();
return base + (old_key & MASK);
}
static void mlx4_dereg_key(uint32_t old_key){
base += 0x8000000;
key_queue.push(old_key);
}
Listing 6: rkey generation of mlx4
4292    30th USENIX Security Symposium
USENIX Association