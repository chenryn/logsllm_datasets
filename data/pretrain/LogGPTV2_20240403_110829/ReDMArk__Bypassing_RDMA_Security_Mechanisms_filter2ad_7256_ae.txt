### RoCE Packets within IPsec

RoCE (RDMA over Converged Ethernet) packets can be encapsulated within IPsec. However, IPsec does not natively support RDMA traffic and encapsulates the RDMA headers. As a result, IPsec authenticates traffic based on IP addresses and UDP ports. To prevent the injection of RoCE packets into IPsec-protected Queue Pairs (QPs) from other end hosts, the Network Interface Card (NIC) stores QP context information and enforces an association between the QP number and the source IP address. Using an IPsec tunnel between two endpoints can mitigate certain attacks (A1 and A2) in Ethernet networks, but this approach is not applicable to the InfiniBand protocol.

### Application-Layer Encryption and Authentication

Application-level encryption and authentication, such as those based on TLS with client authentication, are not feasible for RDMA applications. This is because RDMA read and write operations can function as purely one-sided communication routines without involving the CPU of the other party. An application-layer encryption approach would require a temporary buffer for incoming encrypted messages, which would then be decrypted by the CPU and copied to the destination. This process negates the performance advantages of RDMA.

### Encryption and Authentication Integrated into IBA

In contrast to application-layer cryptography, encryption and authentication of RDMA messages can be integrated into the design of InfiniBand Architecture (IBA). Lee et al. [16, 17] suggested replacing the Invariant CRC field with a Message Authentication Code (MAC) to achieve packet authentication. Recently, Taranov et al. [36] proposed sRDMA, a protocol that extends IBA by designing a connection mode that provides authentication and encryption for RDMA using symmetric cryptography.

Integrating encryption and authentication into IBA can prevent information leakage to on-path attackers and message tampering, as the RDMA message header is authenticated. This makes it impossible for an attacker to spoof RDMA header fields, thereby preventing packet injection-based attacks.

### Other Mitigation Mechanisms

**M7: Per-Client Resource Constraints**

RDMA-capable devices should limit the number of concurrently open QP connections and allocated resources on a per-client basis. Otherwise, resource exhaustion attacks cannot be prevented. With per-client resource constraints in place, an attacker would need to collude with a large number of endpoints to successfully execute resource exhaustion attacks. Resource allocation per client can be implemented based on InfiniBand adapter identifiers for native IB connections and IP addresses for RoCE connections.

**M8: In-Network Filtering**

Packet injection can also be prevented using in-network filtering. In data center deployments, operators can deploy a filtering mechanism at the network ingress to effectively prevent an attacker from injecting spoofed packets, similar to [9].

### Related Work on RDMA Attacks

**RFC 5042 [30]** analyzes the security issues surrounding RDMA protocols. It defines an architectural model for RDMA-based implementations and reviews various basic attacks, including spoofing, tampering, information disclosure, and resource exhaustion. The authors suggest using IPsec encryption and authentication to mitigate end-to-end security attacks, but this fails to solve the problem of endpoint authentication. RFC 5042 aims to provide guidelines for designing RDMA-based protocols, but it is implementation-agnostic and only mentions potential vulnerabilities specific to RDMA protocols. ReDMArk tests the applicability of these vulnerabilities to specific RDMA implementations, such as InfiniBand, and shows that the security pitfalls of using RDMA remain misunderstood.

**Tsai et al. [39]** discuss the threats and opportunities of one-sided communication. They raise concerns about the predictability of hardware-managed memory protection keys and the potential misuse of one-sided RDMA communication for Denial of Service (DoS) attacks. Compared to previous work, ReDMArk provides an in-depth security analysis of RDMA networking, covering not only vulnerabilities but also the full chain of vulnerabilities, proposing specific attacks based on the discovered vulnerabilities, and suggesting mitigations for these attacks.

**Kornfeld Simpson et al. [33]** summarize the security flaws in RDMA protocols, such as missing authentication and encryption, and discuss the security challenges of designing RDMA-enabled storage systems. In addition to the attacks discussed by ReDMArk, they suggest exploiting Priority Flow Control (PFC) pause frames in RoCE [12] to flood buffers on switches. However, they note that the most recent version of RoCE is not subject to this attack as it does not require PFC.

**Tsai et al. [38]** discovered that Remote Network Interface Controllers (RNICs) could be exploited for side-channel attacks. They implemented an RDMA-based side-channel attack that allows an attacker on one client machine to learn about victims on other client machines by using RDMA access latency and a trained classifier to statistically predict victim accesses.

**Kurth et al. [15]** demonstrated that Intel DDIO [1] and RDMA features facilitate a side-channel attack named NetCAT. Intel DDIO technology allows RDMA read and write accesses not only to a pinned memory region but also parts of the lowest CPU cache. NetCAT remotely measures cache activity caused by a victim’s SSH connection to perform a keystroke timing analysis and recover words typed in the SSH session. These works based on side-channel attacks using RDMA are complementary to ReDMArk.

### Conclusion

RDMA architectures like RoCE and InfiniBand were designed for High-Performance Computing (HPC) and private networks, often neglecting security in favor of high performance. As illustrated by ReDMArk, the design of IBA and the implementation of IB-capable NICs contain multiple vulnerabilities and design flaws. These weaknesses allow an adversary to inject packets, gain unauthorized access to memory regions of other clients connected to an RDMA-based service, and effectively disrupt communication in RDMA networks. Given that InfiniBand is deployed in public infrastructure and more providers plan to adopt RDMA networking, weak RDMA security creates real-world vulnerabilities in RDMA-enabled systems. This work highlights the security implications of RDMA on cloud systems and underscores the critical importance of security in the design of upcoming versions of InfiniBand and RoCE, such as fully integrating header authentication and payload encryption. Additionally, developers of RDMA-enabled systems must be aware of the threats introduced by RDMA networking and should employ mitigations such as using type 2 memory windows, a separate Protection Domain (PD) for each connection, and our proposed algorithms to randomize the QPN and rkey generation.

### Responsible Disclosure

We have notified and responsibly disclosed the weaknesses to Mellanox, Broadcom, and Microsoft prior to the submission of this work.

### Acknowledgments

We would like to thank our shepherd, Haya Shulman, and the anonymous reviewers for their constructive feedback. We thank Mellanox Technologies and Broadcom Inc. for the hardware donations and their feedback during the disclosure of this work. Additionally, we thank Igor Zablotchi for assisting with the evaluation of this work. We gratefully acknowledge support from ETH Zurich and the Zurich Information Security and Privacy Center (ZISC). Furthermore, we thank the Microsoft Swiss Joint Research Centre for their support.

### References

[1] Intel® Data Direct I/O Technology Overview. https://www.intel.co.jp/content/dam/www/public/us/en/documents/white-papers/data-direct-i-o-technology-overview-paper.pdf, 2019. [Online; accessed 19-Sep-2020].

[2] Raw Ethernet Programming: Basic Introduction - Code Example. https://community.mellanox.com/s/article/raw-ethernet-programming--basic-introduction---code-example, 2019. [Online; accessed 19-Sep-2020].

[3] InfiniBand Trade Association. The InfiniBand architecture specification. https://www.infinibandta.org/ibta-specifications-download/, 2000.

[4] InfiniBand Trade Association. Supplement to InfiniBand architecture specification volume 1, release 1.2.1: Annex A16: RDMA over Converged Ethernet (RoCE), 2010.

[5] Christian Cachin. Entropy measures and unconditional security in cryptography. PhD thesis, ETH Zurich, 1997.

[6] Victor Costan and Srinivas Devadas. Intel SGX explained. IACR Cryptology ePrint Archive, (086), 2016.

[7] Naganand Doraswamy and Dan Harkins. IPSec: the new security standard for the Internet, intranets, and virtual private networks. Prentice Hall Professional, 2003.

[8] Aleksandar Dragojević, Dushyanth Narayanan, Orion Hodson, and Miguel Castro. Farm: Fast remote memory. In Proceedings of USENIX Conference on Networked Systems Design and Implementation (NSDI), pages 401–414, 2014.

[9] P. Ferguson and D. Senie. Network ingress filtering: Defeating denial of service attacks which employ IP source address spoofing. BCP 38, 2000.

[10] Vasilis Gavrielatos, Antonios Katsarakis, Arpit Joshi, Nicolai Oswald, Boris Grot, and Vijay Nagarajan. Scale-out ccnuma: Exploiting skew with strongly consistent caching. In Proceedings of the Thirteenth EuroSys Conference, pages 1–15, 2018.

[11] Juncheng Gu, Youngmoon Lee, Yiwen Zhang, Mosharaf Chowdhury, and Kang G. Shin. Efficient memory disaggregation with INFINISWAP. In Proceedings of the USENIX Conference on Networked Systems Design and Implementation (NSDI), pages 649–667, 2017.

[12] Chuanxiong Guo, Haitao Wu, Zhong Deng, Gaurav Soni, Jianxi Ye, Jitu Padhye, and Marina Lipshteyn. RDMA over commodity Ethernet at scale. In Proceedings of the ACM SIGCOMM Conference, pages 202–215, 2016.

[13] Anuj Kalia, Michael Kaminsky, and David G. Andersen. Using RDMA efficiently for key-value services. In Proceedings of ACM SIGCOMM, pages 295–306, 2014.

[14] Antonios Katsarakis, Vasilis Gavrielatos, MR Siavash Katebzadeh, Arpit Joshi, Aleksandar Dragojević, Boris Grot, and Vijay Nagarajan. Hermes: a fast, fault-tolerant and linearizable replication protocol. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems, pages 201–217, 2020.

[15] Michael Kurth, Ben Gras, Dennis Andriesse, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. NetCAT: Practical cache attacks from the network. In IEEE Symposium on Security and Privacy (S&P), 2020.

[16] Manhee Lee and Eun Jung Kim. A comprehensive framework for enhancing security in InfiniBand architecture. IEEE Transactions on Parallel and Distributed Systems, 18, 2007.

[17] Manhee Lee, Eun Jung Kim, and Mazin Yousif. Security enhancement in InfiniBand architecture. In Proceedings of the IEEE International Parallel and Distributed Processing Symposium, 2005.

[18] Bojie Li, Tianyi Cui, Zibo Wang, Wei Bai, and Lintao Zhang. Socksdirect: Datacenter sockets can be fast and compatible. In Proceedings of the ACM Special Interest Group on Data Communication, pages 90–103, 2019.

[19] Mingzhe Li, Xiaoyi Lu, Hari Subramoni, and Dhabaleswar K. Panda. Designing registration caching free high-performance MPI library with implicit on-demand paging (ODP) of InfiniBand. In IEEE International Conference on High Performance Computing (HiPC), pages 62–71, 2017.

[20] Linux RDMA. RDMA core userspace libraries and daemons. https://github.com/linux-rdma/rdma-core/, 2020. [Online; accessed 19-Sept-2020].

[21] Linux RDMA. Software RDMA over Converged Ethernet. https://github.com/SoftRoCE/rxe-dev/, 2020. [Online; accessed 19-Sept-2020].

[22] Youyou Lu, Jiwu Shu, Youmin Chen, and Tao Li. Octopus: an RDMA-enabled distributed persistent memory file system. In USENIX Annual Technical Conference (ATC), pages 773–785, July 2017.

[23] David JC MacKay. Information theory, inference and learning algorithms. Cambridge University Press, 2003.

[24] James L. Massey. Guessing and entropy. In Proceedings of 1994 IEEE International Symposium on Information Theory, page 204. IEEE, 1994.

[25] Mellanox. NVidia Mellanox ConnectX-6 DX. https://www.mellanox.com/files/doc-2020/pb-connectx-6-dx-en-card.pdf, 2020. [Online; accessed 19-Sept-2020].

[26] Mellanox. Understanding mlx5 Linux Counters and Status Parameters. https://community.mellanox.com/s/article/understanding-mlx5-linux-counters-and-status-parameters, 2020. [Online; accessed 19-Sept-2020].

[27] Microsoft. CVE-2019-1372, Azure code execution vulnerability. https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1372, 2020. [Online; accessed 19-Sept-2020].

[28] John Ousterhout, Arjun Gopalan, Ashish Gupta, Ankita Kejriwal, Collin Lee, Behnam Montazeri, Diego Ongaro, Seo Jin Park, Henry Qin, Mendel Rosenblum, Stephen Rumble, Ryan Stutsman, and Stephen Yang. The RAMCloud storage system. ACM Trans. Comput. Syst., 33(3):7:1–7:55, August 2015.

[29] R. Kim Peterson. Position independent code location system, 1996. US Patent 5,504,901.

[30] J. Pinkerton and E. Deleganes. Direct Data Placement Protocol (DDP) / Remote Direct Memory Access Protocol (RDMAP) Security. RFC 5042, October 2007.

[31] Marius Poke and Torsten Hoefler. Dare: High-performance state machine replication on RDMA networks. In Proceedings of the International Symposium on High-Performance Parallel and Distributed Computing (HPDC), pages 107–118, 2015.

[32] Eric Rescorla. The Transport Layer Security (TLS) Protocol Version 1.3. RFC 8446, 2018.

[33] Anna Kornfeld Simpson, Adriana Szekeres, Jacob Nelson, and Irene Zhang. Securing RDMA for high-performance datacenter storage systems. In USENIX Workshop on Hot Topics in Cloud Computing (Hot-Cloud), 2020.

[34] Patrick Stuedi, Animesh Trivedi, Jonas Pfefferle, Ana Klimovic, Adrian Schuepbach, and Bernard Metzler. Unification of temporary storage in the NodeKernel architecture. In Proceedings of USENIX Conference on Usenix Annual Technical Conference (ATC), pages 767–781, 2019.

[35] Patrick Stuedi, Animesh Trivedi, Jonas Pfefferle, Radu Stoica, Bernard Metzler, Nikolas Ioannou, and Ioannis Koltsidas. Crail: A high-performance I/O architecture for distributed data processing. IEEE Data Eng. Bull., 40(1):38–49, 2017.

[36] Konstantin Taranov, Benjamin Rothenberger, Adrian Perrig, and Torsten Hoefler. sRDMA: Efficient NIC-based authentication and encryption for remote direct memory access. In USENIX Annual Technical Conference (ATC), 2020.

[37] Mellanox Technologies. RDMA Aware Networks Programming User Manual, Rev 1.7. https://www.mellanox.com/related-docs/prod_software/RDMA_Aware_Programming_user_manual.pdf, 2015.

[38] Shin-Yeh Tsai, Mathias Payer, and Yiying Zhang. Pythia: Remote oracles for the masses. In USENIX Security, pages 693–710, 2019.

[39] Shin-Yeh Tsai and Yiying Zhang. A double-edged sword: Security threats and opportunities in one-sided network communication. In USENIX Workshop on Hot Topics in Cloud Computing (HotCloud), 2019.

[40] Fernando Vano-Garcia and Hector Marco-Gisbert. KASLR-MT: Kernel address space layout randomization for multi-tenant cloud systems. Journal of Parallel and Distributed Computing, 137:77–90, 2020.

[41] Michal Zalewski. Strange attractors and TCP/IP sequence number analysis. RAZOR/Bindview Corporation, 2001.

### Algorithms of rkey Generators

```c
// bnxt_re
static uint32_t bnxt_get_key(void) {
    static uint32_t key = 0x100;
    key += 0x100;
    return key;
}
```

```c
// SoftRoCE
static uint32_t rxe_get_key(void) {
    static uint32_t base = 0x100;
    static unsigned key = 1;
    base += 0x100;
    key = key << 1;
    key |= (0 != (key & 0x100)) ^ (0 != (key & 0x10)) ^ (0 != (key & 0x80)) ^ (0 != (key & 0x40));
    key &= 0xff;
    return base + ((uint8_t)key);
}
```

```c
// mlx4
static Queue key_queue; // queue for deregistered keys
static uint32_t base = 0x100; // device-specific
static uint32_t MASK = 0xFFFFFFFF; // 24-bit mask

static uint32_t mlx4_get_key(void) {
    static uint32_t key = 0x100;
    if (key_queue.is_empty()) {
        key += 0x100;
        return base + (key & MASK);
    }
    uint32_t old_key = key_queue.pop();
    return base + (old_key & MASK);
}

static void mlx4_dereg_key(uint32_t old_key) {
    base += 0x8000000;
    key_queue.push(old_key);
}
```