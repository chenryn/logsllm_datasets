title:Does logic locking work with EDA tools?
author:Zhaokun Han and
Muhammad Yasin and
Jeyavijayan (JV) Rajendran
Does logic locking work with EDA tools?
Zhaokun Han, Muhammad Yasin, and Jeyavijayan (JV) Rajendran, 
Texas A&M University
https://www.usenix.org/conference/usenixsecurity21/presentation/han-zhaokun
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Does logic locking work with EDA tools?
Zhaokun Han
Texas A&M University
PI:EMAIL
Muhammad Yasin
Texas A&M University
PI:EMAIL
Jeyavijayan (JV) Rajendran
Texas A&M University
PI:EMAIL
Abstract
Logic locking is a promising solution against emerging
hardware security threats, which entails protecting a Boolean
circuit using a “keying” mechanism. The latest and hith-
erto unbroken logic-locking techniques are based on the
“corrupt-and-correct (CAC)” principle, offering provable se-
curity against input-output query attacks. However, it remains
unclear whether these techniques are susceptible to structural
attacks. This paper exploits the properties of integrated circuit
(IC) design tools, also termed electronic design automation
(EDA) tools, to undermine the security of the CAC techniques.
Our proposed attack can break all the CAC techniques, in-
cluding the unbroken CACrem technique that 40+ hackers
taking part in a competition for more than three months could
not break. Our attack can break circuits processed with any
EDA tools, which is alarming because, until now, none of the
EDA tools can render a secure locking solution: logic locking
cannot make use of the existing EDA tools. We also provide a
security property to ensure resilience against structural attacks.
The commonly-used circuits can satisfy this property but only
in a few cases where they cannot even defeat brute-force; thus,
questions arise on the use of these circuits as benchmarks to
evaluate logic locking and other security techniques.
1
Introduction
1.1 Security Concerns in the IC Supply Chain
Integrated circuits (ICs) are used in virtually all modern
electronic systems. IC design and fabrication involves sev-
eral stages that are highly automated using electronic design
automation (EDA) tools. Traditionally, a company would per-
form these steps in-house. However, the complexity of ICs has
grown enormously, necessitating the use of highly-specialized
foundries that cost beyond $10 billion [1]. Many companies
such as Apple operate fabless and outsource IC fabrication
and other services to offshore vendors. Apple procures intel-
lectual property (IP) cores from IP vendors including Arm,
delegates IC fabrication to TSMC or Samsung, and deputes
product assembly/test services to Foxconn [2].
In a globalized supply chain, the untrusted entities may
obtain a design netlist1, a chip layout, or a manufactured IC.
This may lead to threats such as IP piracy, counterfeiting,
reverse engineering (REing), overbuilding, and insertion of
hardware Trojans [3]. IP piracy entails malicious entities
illegally using IPs. A foundry can manufacture additional
ICs to sell at lower proﬁt margins. End-users can conduct
piracy by REing an IC to extract the design netlist or other
design/technology secrets. REing of an IC involves peeling off
the package of an IC, etching the IC layer-by-layer, imaging
each layer, and stitching the images together to extract the
design netlist. IP piracy issues alone incur annual losses up to
$4 billion for the semiconductor industry [4].
1.2 Countermeasures against Piracy
The countermeasures developed to foil hardware security
threats include watermarking [5], metering [6],logic lock-
ing [7–11], split manufacturing [12], and camouﬂaging [13].
Logic locking introduces additional protection logic into a
design that “locks” the design’s functionality with a secret
key. The design is unlocked by loading the secret key to the
on-chip tamper-proof memory. The design produces correct
outputs only upon loading the correct key.
In contrast to most other countermeasures, logic locking
can protect against both the untrusted foundries and end-users.
Moreover, logic-locking techniques can be enacted earlier
in the design ﬂow, without any modiﬁcations of most de-
sign/fabrication processes. Consequently, they are currently
being developed in the academic context, as well as in the
semiconductor industry. Logic locking has been incorporated
into the Trust Chain framework of Mentor Graphics [14, 15].
Defense Advanced Research Projects Agency (DARPA) has
included logic locking as a defense technique in its latest
multi-million dollar Automatic Implementation of Secure Sil-
icon (AISS) program. The program aims at building scalable
1A netlist is a Boolean circuit in the form of logic gates and wires.
USENIX Association
30th USENIX Security Symposium    1055
Figure 1: The IC design ﬂow incorporating logic locking. The orange (blue) regions denote untrusted (trusted) entities.
hardware defenses against IC supply chain attacks through
collaboration between universities and leading semiconductor
and defense companies [16].
locked, and only the correct key ﬁne-tunes the tunable ana-
log components, e.g., resistors and capacitors, to meet the
speciﬁcations.
1.3 Applications of Logic Locking
1. Thwarting piracy and overbuilding. Logic locking, as
initially intended, thwarts piracy and overbuilding [7, 17,
18]. Pirated designs overproduced by a malicious foundry
are useless without the secret key held by the designer.
2. Anti-reverse engineering. To prevent REing, commercial
foundries (e.g., TSMC) and companies (e.g., Sypherme-
dia [19] and Mentor Graphics [20]) produce camouﬂaged
designs. The gates in camouﬂaged designs look alike but
implement different Boolean functions [13]. Upon RE-
ing, an attacker cannot infer the functionality of these
gates [21]. Camouﬂaging and logic locking are trans-
formable, i.e., the attacks and defenses developed for logic
locking can apply to camouﬂaging and vice versa [22].
3. Upgradable processors. A decade ago, Intel introduced
the notion of “upgradable processors” for their Sandy
Bridge processors [23]. Once the customer pays an ad-
ditional amount, Intel unlocks certain features. This tech-
nique can be deployed with fuses or software. However,
these methods are not secure; e.g., an attacker could burn
the fuses to unlock those features without paying Intel.
Researchers have shown that logic locking can securely
enable differentiation features such as processor perfor-
mance settings [24], GPU cache conﬁgurations [25], and
instruction sets of hardware accelerators [26].
4. Parametric locking. Logic-locking techniques can hide
both the functionality and the parametric behavior of the
IC [27]. In delay locking, the key determines the output of
a circuit and its timing proﬁle [28]. An incorrect key may
lead to timing violations, forcing attackers to operate the
circuit at a frequency lower than the desired one.
5. Protecting analog circuits. Analog and mixed-signal IPs
(with digital and analog elements) are the most counter-
feited semiconductor product [29]. Recently, logic locking
has been used to protect AMS circuits such as band-pass
ﬁlters, operational transconductance ampliﬁers, and volt-
age regulators [30, 31]. The digital part of the circuit is
All these applications hinge upon the assumption that the
underlying logic-synthesis algorithm is secure. By expos-
ing the vulnerabilities of the state-of-the-art “secure” logic-
locking techniques that rely on the conventional EDA tools,
this paper invalidates the stated assumption.
1.4 State-of-the-art Logic Locking
Logic locking was ﬁrst introduced in 2008 [7]. The ear-
lier techniques focused on protecting designs so that an in-
correct key ensures an incorrect output while incurring min-
imal power, performance, and area (PPA) overhead. How-
ever, [8] showed how an attacker could retrieve the key by
having access to: 1) a locked netlist obtained from a mali-
cious foundry or by REing a chip, and 2) a functional chip
(aka oracle) obtained from the market which acts as an ora-
cle. By using Boolean satisﬁability (SAT) and satisﬁability
modulo theories (SMT) solvers, attackers can improve their
efﬁcacy [9, 11, 41, 42]. We refer to these attacks as input-
output query attacks (I/O attacks), as they analyze the locked
netlist and repeatedly query the oracle to ﬁnd the correct key.
To thwart the I/O attacks, researchers used point functions
as the protection logic [38,39], since point-based functions are
cryptographically obfuscatable and has become attractive for
logic locking [43]. One set of techniques that use point func-
tions are the corrupt and correct (CAC) techniques [10,40,44].
They “strip” the point function(s) from the target Boolean
function [10, 40]. The circuit-to-be-locked is ﬁrst “corrupted”
and then is “corrected” only on applying the correct key, as
shown in Fig. 2. An attacker lacking the correct key will ob-
tain only a “corrupted” design. Multiple CAC techniques have
been invented since 20162, offering 1) trade-offs among the
amount of corruption and overhead, and 2) mathematically-
proven security against I/O attacks [46]. The security reason-
ing is that the probability of ﬁnding a “hidden” point function
in a large Boolean space just by querying the oracle is expo-
nentially small in the input size of the function. Consequently,
an attacker has to query the oracle exponential times in the
key size.
2CAC techniques have also been referred to as stripped functionality logic
locking (SFLL) in the literature [10, 27, 40, 45].
1056    30th USENIX Security Symposium
USENIX Association
Logic synthesisLogic lockingTest & packgingPhysical synthesisFabricationActivationOriginal netlistLocked netlistLayoutWaferLocked ICFunctional ICThird party IPSystemspecs.Design houseTestfacilityFoundryEnd-userDesign houseTable 1: State-of-the-art logic locking attacks and defenses. (cid:2) denotes a successful attack. X denotes a successful defense.
Defense
XOR-based (random, strong,
fault-based, LUT-based [7, 8, 18])
Point-function (AND-tree,
SARLock, Anti-SAT [35, 38, 39])
CAChd, CACﬂex [10]
CACrem [40]
Sensitiza-
tion [8]
(cid:2)
X
X
X
I/O attacks
SAT, SMT
[9, 11]
(cid:2)
X
X
X
AppSAT,
2-DIP [32, 33]
(cid:2)
X
X
X
[34, 35]
[36]
X
SPS, ATR FALL SAIL
[37]
(cid:2)
X
X
X
X
(cid:2)
X
X
(cid:2)
X
X
Structural attacks
SPI
(proposed)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
1.5 Scope and Contributions
All CAC techniques rely on the assumption that the under-
lying logic-synthesis tools used by the semiconductor industry
can effectively “hide” this point function in the target design.
Unfortunately, this is not the case. Traditionally, EDA tools
focus only on the PPA metrics and not on security. Thus, their
optimizations expose the hidden point function, which can be
removed by structural attacks [35, 36, 47]. An attacker in the
foundry or an end-user can RE an IC, analyze the structure of
the netlist, and ﬁnd the hidden point function to break logic-
locking techniques. All the CAC techniques except CACrem
are vulnerable to structural attacks, as listed in Table 1.
Over the past decade, there have been many logic-locking
attacks and defenses— basically a kind of “cat and mouse”
game — without any concrete notion of security against struc-
tural attacks [35, 36, 47–50]. Every technique is considered
secure until someone develops a heuristic that can break it.
This paper raises and addresses the following related ques-
tions: (i) What is the fundamental theory of structural attacks?
(ii) What makes logic-synthesis tools render designs insecure?
(iii) How can we ﬁx the EDA tools to help logic locking?
To this end, we ﬁrst develop a uniﬁed attack called a sparse
prime implicant (SPI) attack, which considers logic-synthesis
principles and breaks thus far unbroken techniques. We also
identify a security property to ensure the resilience against
structural attacks. The most important result of this paper is
to show that none of the commonly-used benchmarks can
simultaneously satisfy this property and achieve a reasonable
key size, calling into question the use of these circuits as
benchmarks to evaluate logic-locking techniques.
A competition on logic locking. Recently, New York Univer-
sity held a competition on logic locking [51]. CACrem circuits
were ﬁelded for participants to develop new attacks and break
them. 18 teams with 40+ hackers from 15 universities from
across the world competed over three months. Most teams
have had prior publications on logic-locking techniques and
thus can be considered to have a reasonable level of expertise.
(Un)Fortunately, over the span of three months, none of the
teams were able to break CACrem even with a key size of 80.
No one has reported breaking these circuits since they were
released about a year ago. The proposed SPI attack can break
this unbroken technique within seconds, and the competition
organizers veriﬁed our attack’s effectiveness on the compe-
tition circuits. Additionally, they also provided our research
team with three harder circuits with larger key sizes (up to
195); our attack can break these circuits as well. Therefore,
the contributions of this paper are as follows:
1. We demonstrate that the state-of-the-art logic-locking tech-
nique is vulnerable to structural attacks. Our proposed SPI
attack circumvents CACrem and other variants of the CAC
techniques within seconds (see Section 3).
2. We demonstrate the effectiveness of the SPI attack on
circuits processed by various EDA tools targeting at both
application-speciﬁc integrated circuit (ASIC) and ﬁeld-
programming gate arrays (FPGA) implementation3. We
deploy ﬁve industrial tools, Cadence Genus [53], Synopsys
Design Compiler [54], Synopsys Synplify [55], Xilinx
Vivado [56], Mentor Graphics Precision RTL [57], and
one academic tool ABC [58], to synthesize the circuits
(see Section 4).
3. We develop a security property for ensuring security
against the SPI attack and other structural attacks. The
property, referred to as Dist2, is based on the notion of
“distant” prime implicants (see Section 5).
4. We examine several industrial and academic circuits to
determine how well they satisfy the Dist2 property. The
benchmarks include several circuits from the ITC’99
benchmark suite, controllers of an ARM Cortex-M3 mi-
croprocessor [59], and a GPS module as part of Common
Evaluation Platform for evaluating hardware security so-
lutions [60]. An alarming ﬁnding in this paper is that all
commonly-used circuits fail to satisfy the Dist2 property
with a reasonable key size, thus making them unsuitable
for any logic-locking technique.
The code of the SPI attack is available at https://seth.
engr.tamu.edu/software-releases.
3Logic locking has also been used to protect FPGA bitstreams [52].
USENIX Association
30th USENIX Security Symposium    1057
Point-function-based locking5. When a point function, such
as a comparator whose one input is the key and the func-
tional input, is XORed with the original circuit, the output
is inverted/corrupted only for one input pattern for any in-
correct key. Thus, point function-based techniques, such as
SARLock [38] and Anti-SAT [39, 63], thwart any I/O attack
because the probability to ﬁnd the input patterns (i.e., the key)
that corrupt the outputs is exponentially small in the input
size. Approximate I/O attacks, such as AppSAT [32] and 2-
DIP [33], focus on retrieving the best set of keys for a given
time limit.
Structural attacks. A drawback of point-function techniques
is that the point-function can be easily identiﬁed and removed
by white-box structural attacks. For example, the signal proba-
bility skew (SPS) attack uses signal probabilities to locate and
remove large AND gates and/or comparators in Anti-SAT and
SARLock [34]. The AND-tree removal (ATR) attack achieves
the same by analyzing the gates in the locked netlist [35]. The
bypass attack restores original functionality by adding a by-
pass circuitry around the locked circuit [48].
CAC locking defends against both I/O and structural at-
tacks [10, 40, 45]. Fig. 2 shows the architecture of CAC tech-
niques. The original circuit is initially corrupted by XORing
it with Scp, the output of the corrupting unit, which can be a
point function. The output of the correcting unit, Scc, restores
the correct output on applying the correct key. The input pat-
terns for which the circuit output is corrupted are known as
protected input patterns (PIPs). The corrupted circuit is cre-
ated by XORing the original circuit with a corrupting unit
that hard-codes the PIP(s). When a single PIP needs to be
protected, the correcting unit is realized as a comparator with
the key as one input and the functional inputs as the other; the
secret key is the same as the PIP in this case. Only when the
correct key is applied at the key inputs of the correcting unit,
the output is corrected. For an incorrect key, the correcting
unit does not correct the corrupted output for precisely one
input pattern. Thus, a high resilience against the SAT attack
can be achieved similar to point-function-based locking.
The CAC techniques differ in the construction of the cor-
rupted circuit. These techniques allow trade-offs among the
security level against different attacks, the number of PIPs,
and the PPA overhead. For example, the higher the number of
PIPs, the higher will be the error-rate observed at circuit out-
put. CACﬂex allows the designer to specify the set of PIPs. The
correcting circuit is implemented as a lookup table. Each PIP
can be considered as a secret key for the circuit. The locked
circuit produces correct output only when all the keys (PIPs)
are loaded into the lookup table. In CAChd, the set of PIPs in-
cludes all input patterns that have a certain Hamming distance
h from the secret key keyc, i.e., 8p 2 PIPs, HD(keyc; p) = h.
5In point-function-based locking, the point-function(s) are simply XORed
with the original circuit. It is different from point-function obfuscation
where several cryptographic primitives such as random permutations are
required [43].
Figure 2: A CAC circuit comprises a corrupted circuit and a
correcting unit. The correction happens only for the correct
key [10, 27, 40, 45].
2 Background and Related Work
2.1 Threat Model
In this paper, we follow the standard locking threat model
adopted in the literature [8–11].
The attacker. The design house and the IC design tools are