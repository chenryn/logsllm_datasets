        v9 = v4;
        // ------------------%s----------------------        v7 = &log_struct_4380937c;
        log_0x418ffa6c(&v7, "IMSPL_XmlParser_ContactLstDecode", -20071784);
        if (IMSPL_XmlGetNextTagName((char *)&v9, v11) != 1) {
        LABEL_8:
            *a1 = (int)v9;
            v8 = 10597;
            // Function END
            v7 = &log_struct_43809448;
            log_0x418ffa6c(&v7, -20071784);
            return 1;
        }
        // omitted code
    }
我们可以很容易地确认变量v11是栈上大小为100的缓冲区。潜在的栈溢出可能发生在这里。
在临近的函数中也能发现类似的问题，例如`IMSPL_XmlParser_RegLstDecode`，`IMSPL_XmlParser_ContElemChildNodeDecode`。根据函数名，我们可以推断触发的标签应该在元素Contact
List内。通过向上交叉引用函数来总结调用栈并不困难。
    IMSPL_XmlParser_RegInfoDecode --> IMSPL_XmlParser_RegInfoElemDecode --> IMSPL_XmlParser_RegLstDecode --> IMSPL_XmlParser_RegistrationElemDecode --> IMSPL_XmlParser_ContactLstDecode
这些函数名称很容易理解。我们可以分辨出变异的payload可以通过SIP协议中的NOTIFY消息传递。
一个能让基带崩溃的简单PoC可以从普通的NOTIFY消息构造。 由于payload是以XML格式发送，因此对payload存在限制。
记得上面提到的find_tag_end函数，它会将标签名中的以下字符列入黑名单：`"\x00\x09\x0a\x0d\x20\x2f\x3e\x3f"`。
因此，在编写ROP链和shellcode时我们不能使用所有可用的字符。除此之外，剩下的是ARM平台上的传统pwnable挑战。
### 4.1 Exploitation Payload
**白皮书内查看详细PoC** 利用点为函数`IMSPL_XmlParser_RegLstDecode`，为了避免在 ROP
执行后修复栈帧，并能让基带仍然正常工作，最好选择一个较深的地方来触发栈溢出。 所以registration中的一个元素标签是个不错的选择。
payload结构：
有效载荷以 100 个字节“A”开头，然后是栈中保存的寄存器 R4-R11，ROP 链从栈中复制 shellcode 并最终跳转到 shellcode
### 4.2 漏洞利用的可视化演示
为了验证我们是否在目标设备上获得了RCE,我们可以检查手机的ADB日志。它将显示有关蜂窝处理器(CP)如何崩溃的信息。然而，这既不是一种方便的方式，也不是一种很好的视觉效果。因此，我们选择通过在基带内执行shellcode来修改设备的IMEI。按照设计,IMEI不应在手机分发后进行修改。当我们报告整个利用链时，这也被视为一个bug。NVRAM是Non
Volatile Memory，用于存储与基带相关的持久化信息。IMEI是存储在基带NVRAM中的一项，但是要修改它的值，首先要知道它的索引。
**白皮书内查看IMSSH_GetImei函数示例**
基带中有多个地方调用函数获取IMEI。可以通过逆向函数GetImei来检索索引。在我们的例子中，IMEI1/2的索引分别是`0x39a4/0x39a5`。有了索引，我们就可以通过在shellcode中调用API
`pal_RegItemWrite_File` 来修改IMEI。
## 5.执行
### 5.1 环境配置
要触发这个 bug，我们需要先搭建一个提供 IMS 服务的网络，然后向基带发送格式错误的短信。 我们的测试环境至少需要一个LTE网络。
虽然它在技术上是一个影响4G和5G的漏洞，但在2020年初，5G的基础设施还没有成熟到足以支持像我们这样的独立研究人员测试其安全性。因此我们决定建立一个支持VoLTE的LTE网络来测试设备。
#### 5.1.1 SDR Choice
作为设置基站的首选硬件，我们选择了Ettus USRP B210，这是一种在研究人员中非常流行的SDR无线电设备。
#### 5.1.2 LTE network setup
我们使用了大量开源组件和硬件来完成我们的测试，以下是一些较为重要的: \- srsENB: 这是srsLTE中的eNodeB实现。
它负责直接无线连接到移动手机(UE)。 \- Open5GS：我们在LTE网络中使用了它的EPC实现。它们是hss、mme、pcrf、pgw、sgw。 \-sysmo-usim-tool&pysim：SIM卡编程工具。 \- CoIMS&CoIMS_Wiki：修改手机IMS设置的工具。 \-docker_open5gs：用于在docker容器中运行具有VoLTE支持的open5gs。
UE能够在适当的LTE网络设置后连接到网络，然后我们可以继续进行IMS服务器设置。在我们的测试中，几乎所有不同厂商的基带对eNodeB的频率都非常敏感。您可以查看设备官方信息以获取其支持的频段，然后为srsENB选择合适的Downlink
EARFCN参数。
### 5.2 IMS server setup & hack
由于该漏洞只能由提供VoIP服务的恶意IMS服务器触发，因此基本的LTE网络不足以触发该漏洞。不幸的是，满足这种需求的基础设施还远未成熟。现有的开源项目Kamailio满足了我们的需求，但还没有在各种设备（包括我们使用的）上进行很好的测试。
需要付出巨大的努力才能使其工作并成功发送有效payload。 VoLTE服务器的基本组件是Rtpengine、FHOSS、P-CSCF、I-CSCF和S-CSCF。 以下是网络拓扑：
    SUBNET=172.18.0.0/24
    HSS_IP=172.18.0.2
    MME_IP=172.18.0.3
    SGW_IP=172.18.0.4
    PGW_IP=172.18.0.5
    PCRF_IP=172.18.0.6
    ENB_IP=172.18.0.7
    DNS_IP=172.18.0.10
    MONGO_IP=172.18.0.11
    PCSCF_IP=172.18.0.12
    ICSCF_IP=172.18.0.13
    SCSCF_IP=172.18.0.14
    FHOSS_IP=172.18.0.15
    MYSQL_IP=172.18.0.17
    RTPENGINE_IP=172.18.0.18
IMS(SIP)消息通过TCP或UDP套接字以IP数据的形式承载。因此,客户端会首先选择IPSec来进行消息传输。XML
payload只能通过NOTIFY消息携带，因此我们的客户端必须成功REGISTER和SUBSCRIBE。
在进行初步的搭建后，一加6（non-IPSec）、Google Pixel
3（IPSec）可以成功注册VoLTE服务，这意味着我们的环境在高通的芯片上能够很好地工作。但是在使用三星芯片的手机上，整个流程会在注册时失败。
但是这些设备能够使用当地运营商的普通SIM卡注册VoLTE，这让我们对修改Kamailio配置和代码充满希望。 首先要做的是在电话上捕获成功的注册流量。
幸运的是，三星的Sysdump Utility中有一个内置的IMS调试工具IMS Logger，它允许我们查看来自应用程序的IMS流量。
下面是一个正常的注册消息及其响应：
REGISTER
message
Server
responses with challenge to the UE
Failed
registration response
Kamailio和本地运营商之间存在一些差异。 我们并不真正知道哪个字段是注册失败的关键。 我们方法是让它们看起来尽可能相似。
在对Kamailio进行了一些更改后，我们取得了一点进展，我们收到了第二条注册消息。 那么问题就到了服务器端，它并没有提供STATUS 200响应。
经过调查，我们发现服务器和客户端之间的IPSec不一致。 我们决定从服务器端强制禁用IPSec。以下是我们打的补丁：
Patch
to remove IPSec related headers
Part
of the cfg patch
#### 5.2.1参考
[VoLTE/IMS Debugging on Samsung Handsets using Sysdump \& Samsung IMS
Logger](https://nickvsnetworking.com/volte-ims-debugging-on-samsung-handsets-using-sysdump-samsung-ims-logger/) [Reverse Engineering Samsung Sysdump Utils
to Unlock IMS Debug \& TCPdump on Samsung
Phones](https://nickvsnetworking.com/reverse-engineering-samsung-sysdump-utils-to-unlock-ims-debug-tcpdump-on-samsung-phones/)
### 5.3. Payload Delivery
一旦UE注册并订阅到SIP服务器，服务器将发送NOTIFY消息以提供网络中的基本信息，比如其他UE的联系方式等。而payload会以XML的格式存在于NOTIFY消息中。该消息的负责模块是S-CSCF。这是要修改以生成任意有效payload的函数：
    str generate_reginfo_full(udomain_t* _t, str* impu_list, int num_impus, str *explit_dereg_contact, int num_explit_dereg_contact, unsigned int reginfo_version);
## 6.结论
在这项研究中，我们展示了下一代Android设备配备的5G基带安全状态。尽管在网络功能方面已经发生了演变，但我们看到在安全性方面仍然没有过多进步。正如我们实际上已经展示的那样，一些基带缺乏最基本的安全措施，例如栈cookie保护，这让攻击者能够使用缓冲区溢出等简单攻击无线攻击它们。我们在三年前进行过安全研究，但是至今情况似乎没有太大改善。
我们希望在三年后我们可以再次展示一些研究，在一个更加严格的环境中。
[点击下载议题白皮书](https://keenlab.tencent.com/zh/whitepapers/us-21-Over-The-Air-Baseband-Exploit-Gaining-Remote-Code-Execution-on-5G-Smartphones-wp.pdf)
* * *