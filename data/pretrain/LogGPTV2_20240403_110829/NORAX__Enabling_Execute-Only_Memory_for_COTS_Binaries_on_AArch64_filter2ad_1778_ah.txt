with maximum compatibility, NORAX does assume to run as
the last pass among other binary hardening techniques. This
ensures NORAX preserves all data references planted by other
passes if any.
B. Current Limitations
Unforeseeable Code: NORAX relies on static binary analysis
and rewriting. The current implementation cannot patch dy-
namically generated code (JIT Compilation) or self-modifying
code. In addition, NORAX cannot patch customized ELF
ﬁles consisting of unrecognizable sections that may contain
code and data. For instance, the .ARM.exidx and .ARM.extab
sections contained in the dex2oat program5 are not recognized
by the current implementation of NORAX. Nevertheless, these
limitations are shared by almost all static binary rewriting
works. It is worth noting that modules converted by NORAX
can run alongside programs of this kind seamlessly without
suffering any functionality lost.
5An optimization tool to convert applications’ byte code to native code.
317
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
Indirect Memory Disclosure: NORAX prevents attackers
from directly reading the code to search for gadgets loaded
in memory. However, code pointers residing in data areas
such as stack and heap are still vulnerable to indirect memory
disclosure attacks, which can lead to whole function reuse or
call-preceded gadget reuse attacks [48], [49]. This limitation,
however, is shared by all related solutions using binary rewrit-
ing [11], [13], [14], [47]. In addition, a recent study [50] shows
even the most advanced source-code based techniques [8],
[9] are subject to attacks of this kind. We argue that defense
against indirect memory disclosure is another research topic
that warrants separate studies and is out of the scope for this
work.
VIII. CONCLUSION
We present NORAX, a comprehensive and practical system
that enables execute-only memory protection for COTS bina-
ries on AArch64 platforms. NORAX shows that identifying
data from code in COTS binaries, albeit generally undecid-
able,
is in practice feasible under the scope of AArch64
platforms. To demonstrate its practicability, we implemented
NORAX on commodity mobile phones including Samsung
Galaxy S6 and LG Nexus 5X, and protect their stock system
binaries from direct memory disclosure attacks. Our evaluation
shows NORAX enforces strong protection, while at the same
time incurs negligible overhead–average 1.18% slowdown and
2.21% memory footprint, suggesting it is suitable for real-
world adoption.
IX. ACKNOWLEDGMENT
We thank the anonymous reviewers for their insightful
comments. We also thank Michalis Polychronakis, Michael
Grace, Jia Ma and Xun Chen for the helpful discussions during
the development of NORAX. This project was supported by
the Ofﬁce of Naval Research (Grant#: N00014-17-1-2227)
and the National Science Foundation (Grant#: CNS-1421824).
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this paper are those of the authors and do not
necessarily reﬂect the views of the funding agencies.
REFERENCES
[1] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R.
Sadeghi, “Just-in-time code reuse: On the effectiveness of ﬁne-grained
address space layout randomization,” in Security and Privacy (SP), 2013
IEEE Symposium on.
IEEE, 2013, pp. 574–588.
[2] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and D. Boneh,
“Hacking blind,” in 2014 IEEE Symposium on Security and Privacy.
IEEE, 2014, pp. 227–242.
[3] L. V. Davi, A. Dmitrienko, S. N¨urnberger, and A.-R. Sadeghi, “Gadge
me if you can: secure and efﬁcient ad-hoc instruction-level random-
ization for x86 and arm,” in Proceedings of the 8th ACM SIGSAC
symposium on Information, computer and communications security.
ACM, 2013, pp. 299–310.
[4] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing the
gadgets: Hindering return-oriented programming using in-place code
randomization,” in 2012 IEEE Symposium on Security and Privacy.
IEEE, 2012, pp. 601–615.
[5] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson, “Ilr:
Where’d my gadgets go?” in 2012 IEEE Symposium on Security and
Privacy.
IEEE, 2012, pp. 571–585.
[6] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address space layout
permutation (aslp): Towards ﬁne-grained randomization of commodity
software.” in ACSAC, vol. 6, 2006, pp. 339–348.
[7] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary stirring:
Self-randomizing instruction addresses of legacy x86 binary code,” in
Proceedings of the 2012 ACM conference on Computer and communi-
cations security. ACM, 2012, pp. 157–168.
[8] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical code randomization
resilient to memory disclosure,” in 2015 IEEE Symposium on Security
and Privacy.
IEEE, 2015, pp. 763–780.
[9] S. J. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi,
A.-R. Sadeghi, T. Holz, B. De Sutter, and M. Franz, “It’s a trap:
Table randomization and protection against function-reuse attacks,” in
Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2015, pp. 243–255.
[10] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, and A.-
R. Sadeghi, “Leakage-resilient layout randomization for mobile devices,”
in Proceedings of the 2016 Network and Distributed System Security
(NDSS) Symposium, 2016.
[11] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and J. Pewny,
“You can run but you can’t read: Preventing disclosure exploits in
executable code,” in Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 2014, pp. 1342–
1353.
[12] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell,
and M. Horowitz, “Architectural support for copy and tamper resistant
software,” ACM SIGPLAN Notices, vol. 35, no. 11, pp. 168–177, 2000.
[13] A. Tang, S. Sethumadhavan, and S. Stolfo, “Heisenbyte: Thwarting
memory disclosure attacks using destructive code reads,” in Proceedings
of the 22nd ACM SIGSAC Conference on Computer and Communica-
tions Security. ACM, 2015, pp. 256–267.
[14] J. Werner, G. Baltas, R. Dallara, N. Otterness, K. Z. Snow, F. Monrose,
and M. Polychronakis, “No-execute-after-read: Preventing code disclo-
sure in commodity software,” in Proceedings of the 11th ACM on Asia
Conference on Computer and Communications Security. ACM, 2016,
pp. 35–46.
[15] K. Snow, R. Rogowski, J. Werner, H. Koo, F. Monrose, and M. Poly-
chronakis, “Return to the zombie gadgets: Undermining destructive code
reads via code inference attacks,” in IEEE Symposium on Security and
Privacy, 2016.
[16] B. Lee, L. Lu, T. Wang, T. Kim, and W. Lee, “From zygote to morula:
Fortifying weakened aslr on android,” in 2014 IEEE Symposium on
Security and Privacy.
IEEE, 2014, pp. 424–439.
conﬁguration,”
[17] “El 0
execute-only memory
https://armv8-ref.
codingbelief.com/en/chapter d4/d44 1 memory access control.html.
[18] “Android executables mandatorily need to be pie,” https://source.android.
com/security/enhancements/enhancements50.html.
[19] R. Wartell, Y. Zhou, K. W. Hamlen, M. Kantarcioglu, and B. Thu-
raisingham, “Differentiating code from data in x86 binaries,” in Joint
European Conference on Machine Learning and Knowledge Discovery
in Databases. Springer, 2011, pp. 522–536.
[20] “Apple warn developers when the binaries are not compiled as position-
indepent,” https://developer.apple.com/library/content/qa/qa1788/ index.
html.
[21] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos, “An
in-depth analysis of disassembly on full-scale x86/x64 binaries.”
[22] C. Cifuentes and M. Van Emmerik, “Recovery of jump table case
statements from binary code,” in IEEE International Workshop on
Program Comprehension, 1999.
318
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
[45] Y. Chen, Z. Wang, D. Whalley, and L. Lu, “Remix: On-demand live
randomization,” in Proceedings of the Sixth ACM Conference on Data
and Application Security and Privacy. ACM, 2016, pp. 50–61.
[46] D. Bigelow, T. Hobson, R. Rudd, W. Streilein, and H. Okhravi, “Timely
rerandomization for mitigating memory disclosures,” in Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2015, pp. 268–279.
[47] J. Gionta, W. Enck, and P. Ning, “Hidem: Protecting the contents
of userspace memory in the face of disclosure vulnerabilities,” in
Proceedings of
the 5th ACM Conference on Data and Application
Security and Privacy. ACM, 2015, pp. 325–336.
[48] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro, C. Liebchen,
M. Qunaibit, and A.-R. Sadeghi, “Losing control: On the effectiveness
of control-ﬂow integrity under stack attacks,” in Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2015, pp. 952–963.
[49] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and
T. Holz, “Counterfeit object-oriented programming: On the difﬁculty
of preventing code reuse attacks in c++ applications,” in 2015 IEEE
Symposium on Security and Privacy.
IEEE, 2015, pp. 745–762.
[50] R. Rudd, R. Skowyra, D. Bigelow, V. Dedhia, T. Hobson, C. L.
Stephen Crane, P. Larsen, L. Davi, M. Franz, A.-R. Sadeghi, and
H. Okhravi, “Address-Oblivious Code Reuse: On the Effectiveness
of Leakage Resilient Diversity,” in Proceedings of the Network and
Distributed System Security Symposium (NDSS’17), Feb 2017.
[23] R. Qiao and R. Sekar, “Function interface analysis: A principled ap-
proach for function recognition in COTS binaries,” in The 47th IEEE/I-
FIP International Conference on Dependable Systems and Networks,
2017.
[24] “Exception syndrome register(esr) interpretation,” http://infocenter.arm.
com/help/topic/com.arm.doc.ddi0500e/CIHFICFI.html.
[25] “Android
compatibility
test
suite,”
https://source.android.com/
compatibility/cts/index.html.
[26] “Dwarf standards,” http://www.dwarfstd.org.
[27] D. Niemi, “Unixbench 4.1. 0.”
[28] L. Szekeres, M. Payer, T. Wei, and D. Song, “Sok: Eternal war in
memory,” in Security and Privacy (SP), 2013 IEEE Symposium on.
IEEE, 2013, pp. 48–62.
[29] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-Flow
Integrity,” in Proceedings of the 12th ACM Conference on Computer
and Communications Security. ACM, 2005, pp. 340–353.
[30] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway,
´U. Erlingsson,
L. Lozano, and G. Pike, “Enforcing forward-edge control-ﬂow integrity
in gcc & llvm,” in 23rd USENIX Security Symposium (USENIX Security
14), 2014, pp. 941–955.
[31] B. Niu and G. Tan, “Rockjit: Securing just-in-time compilation us-
ing modular control-ﬂow integrity,” in Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security. ACM,
2014, pp. 1317–1328.
[32] ——, “Per-input control-ﬂow integrity,” in Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications Security. ACM,
2015, pp. 914–926.
[33] A. J. Mashtizadeh, A. Bittau, D. Boneh, and D. Mazi`eres, “Ccﬁ:
cryptographically enforced control ﬂow integrity,” in Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2015, pp. 941–951.
[34] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz,
“Opaque control-ﬂow integrity.” in NDSS, 2015.
[35] P. Team, “grsecurity: RAP is here,” 2016.
[36] M. Zhang and R. Sekar, “Control ﬂow integrity for cots binaries,” in
Presented as part of the 22nd USENIX Security Symposium (USENIX
Security 13), 2013, pp. 337–352.
[37] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou, “Practical Control Flow Integrity and Ran-
domization for Binary Executables,” in Proceedings of the 2013 IEEE
Symposium on Security and Privacy, ser. SP ’13. Washington, DC,
USA: IEEE Computer Society, 2013, pp. 559–573.
[38] E. G¨oktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of
control: Overcoming control-ﬂow integrity,” in 2014 IEEE Symposium
on Security and Privacy.
IEEE, 2014, pp. 575–589.
[39] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the
gadgets: On the ineffectiveness of coarse-grained control-ﬂow integrity
protection,” in 23rd USENIX Security Symposium (USENIX Security 14),
2014, pp. 401–416.
[40] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross, “Control-
ﬂow bending: On the effectiveness of control-ﬂow integrity,” in 24th
USENIX Security Symposium (USENIX Security 15), 2015, pp. 161–
176.
[41] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi,
and S. Sidiroglou-Douskos, “Control jujutsu: On the weaknesses of ﬁne-
grained control ﬂow integrity,” in Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2015,
pp. 901–913.
[42] P. Team, “PaX address space layout randomization (ASLR),” 2003.
[43] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Efﬁcient techniques for com-
prehensive protection from memory error exploits.” in Usenix Security,
2005.
[44] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose,
“Isomeron: Code randomization resilient to (just-in-time) return-oriented
programming.” in NDSS, 2015.
319
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply.