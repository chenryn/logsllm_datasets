### Experimental Procedures

Prior to the commencement of the experiment, all participants were informed about the potential for attacks targeting sensitive audio and video data during their interaction with the apps used in the experimental tasks. However, the participants were not made aware of the source of these attacks. To mitigate any ordering bias, the sequence of the experimental tasks was randomized. Instructions for performing the tasks were provided to participants at the beginning of the study via a handout. Participants were given the option to skip any task steps if they suspected that the app's activities might be suspicious.

### Apps Used in the Experiment

Two apps were utilized in the study: 
1. **Google Keep**: A well-known voice note recording app.
2. **SimpleFilters**: A testing app developed in our research laboratory, which provides photo and video filtering functionality. Additionally, SimpleFilters includes mechanisms to attempt adversarial use of privacy-sensitive sensors, such as the microphone and camera.

### Task Description (Randomized)

#### TASK 1
- **Task**: Take a picture using the smartphone’s front camera with the SimpleFilters app.
- **Attack Scenario**: Operation Switching - The SimpleFilters app starts recording audio via the smartphone’s microphone instead of just taking a picture.
- **Authorization Request**:
  - Allow SimpleFilters to use the Front Camera and Microphone to Record Video when pressing [button]?

#### TASK 2
- **Task**: Take a picture with the front camera using the SimpleFilters app.
- **Attack Scenario**: Bait-and-Context-Switch - The video camera widget appears in the photo capture window, with a camera preview, to trick the user into allowing SimpleFilters to record audio instead of just taking a picture.
- **Authorization Request**:
  - Allow SimpleFilters to use the Front Camera and Microphone to Record Video when pressing [button]?

#### TASK 3
- **Task**: Take six consecutive pictures with the smartphone’s front camera using the SimpleFilters app.
- **Attack Scenario**: Bait-and-Widget-Switch - Before the fifth picture, the SimpleFilters app replaces the camera widget with the video camera widget to enable video recording. The camera button is restored before the sixth picture.
- **Authorization Request**:
  - Allow SimpleFilters to use the Front Camera and Microphone to Record Video when pressing [button]?

#### TASK 4
- **Task**: Record a voice note using the Google Keep app.
- **Attack Scenario**: Identity Spoofing - The participant selects the Keep app from the app menu, but the SimpleFilters app hijacks the on-screen activity and spoofs the Keep app.
- **Authorization Request**:
  - Allow SimpleFilters to use the Microphone to Record Audio when pressing [button]?

### Group Definitions
- **Group 1 (Install-Time)**: Authorization requests at install time.
- **Group 2 (First-Use)**: Authorization requests at first use.
- **Group 3 (Input-Driven)**: Authorization requests driven by user input.
- **Group 4 (Developer ID)**: Authorization requests based on developer ID.
- **Group 5 (AC Gadgets)**: Authorization requests with system-defined access control gadgets.
- **Group 6 (AWare)**: Authorization requests with AWare, which identifies changes in configuration.

### Experimental Results

90 subjects participated and completed the experimental tasks. Each group consisted of 15 randomly assigned participants. The results for the four experimental tasks are summarized in Table 1. Only Group 6 (AWare) received additional authorization requests due to the system's ability to identify changes in configuration.

### Analysis of Tasks

- **TASK 1**: Users in alternative approaches did not notice the operation performed by the app, leading to mistakes. Group 5 (AC Gadgets) users were not tricked because the system-defined access control gadget prevented the app from controlling the requested operation. All Group 6 (AWare) users did not authorize SimpleFilters to access the microphone, indicating the effectiveness of the binding request.
- **TASK 2 and TASK 3**: Users were successfully tricked by switching the user interface configuration or changing the widget presented. There was no noticeable improvement for Group 5 (AC Gadgets) due to insufficient checks. One Group 6 (AWare) user mistakenly authorized an unintended operation, suggesting that even with explicit authorization, users can still make mistakes.
- **TASK 4**: The real identity of the app performing the operation was not visible in alternative approaches, leading to mistakes. No Group 6 (AWare) users authorized SimpleFilters to access the microphone, indicating the security message's effectiveness in identifying the attack.

### Field-Based User Study

To address concerns about the decision overhead imposed by AWare, we conducted a field-based user study. Participants used a Nexus 5X smartphone with a modified Android OS integrating the AWare authorization framework for one week. They interacted with 21 popular apps, and a background service monitored the number of app activations, widgets, and user decisions.

### Experimental Results

24 subjects participated in the field-based user study. Table 2 summarizes the average number of explicit authorizations per app. On average, 2.28 additional explicit user authorizations were required per app. The number of explicit authorizations remained constant compared to the number of operation authorization requests automatically granted by AWare, which grew linearly over the experiment period.

### Compatibility Analysis

We used the Compatibility Test Suite (CTS) to evaluate the compatibility of AWare with 1,000 existing apps selected from the Google Play store. The results indicate that AWare is compatible with a wide range of apps without significant issues.