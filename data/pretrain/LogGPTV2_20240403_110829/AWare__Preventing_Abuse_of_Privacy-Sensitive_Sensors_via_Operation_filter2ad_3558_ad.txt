Experimental Procedures: Before starting the experi-
ment, all participants were informed that attacks targeting
sensitive audio and video data were possible during the in-
teraction with apps involved in the experimental tasks, but
none of the participants were aware of the attack source.
Further, the order of the experimental tasks was random-
ized to avoid ordering bias. All the instructions to perform
the experimental tasks were provided to participants via a
handout at the beginning of the user study. Participants
were given the freedom to ignore task steps if they were
suspicious about the resulting app activities.
We used two apps, a well-known voice note recording
app called Google Keep, and a testing app (developed in
our research laboratory) called SimpleFilters, which
provides useful photo/video ﬁltering functionality. How-
ever, SimpleFilters also attempts adversarial use of
privacy-sensitive sensors, such as the microphone and the
USENIX Association
26th USENIX Security Symposium    389
Task Description (Randomized)
TASK 1 : Take a picture with the
smartphone’s front camera by using
the SimpleFilters app.
Attack Scenario
Operation Switching: The SimpleFilters
app also starts recording audio via the
smartphone’s microphone instead of only taking
a picture.
Authorization Requests ((cid:52) AWare) Attack Success Rate
• Allow SimpleFilters to use the
Front Camera and Microphone
to Record Video
when pressing (cid:19) ?
TASK 2 : Take a picture with the
front camera by using the
SimpleFilters app.
TASK 3 : Take six consecutive
pictures with the smartphone’s front
camera by using the SimpleFilters
app.
TASK 4 : Record a voice note
using the Keep app.
Bait-and-Context-Switch: We make the video camera
widget appear in the photo capture window, with a
camera preview, to trick the user into allowing
SimpleFilters to record audio instead of just take
a picture. (cid:50)
Bait-and-Widget-Switch: Before the participants
took the ﬁfth picture, the SimpleFilters
app replaced the camera widget with the
video camera widget to enable video recording instead.
The camera button was restored before the
users took the sixth picture. (cid:50)
Identity Spooﬁng: We let the participants select
the Keep app from the app menu, however,
we programmatically triggered the SimpleFilters
app to hijack the on-screen activity
and spoof the Keep app.
• Allow SimpleFilters to use the
Front Camera and Microphone to
Record Video when
pressing i ?
• Allow SimpleFilters to use the
Front Camera and Microphone
to record Video
when pressing i ?
• Allow SimpleFilters to use
the Microphone to Record
Audio when pressing ` ?
Group1 (Install-Time):
Group2 (First-Use):
Group3 (Input-Driven):
Group4 (Developer ID):
Group5 (AC Gadgets):
Group6 (AWare):
Group1 (Install-Time):
Group2 (First-Use):
Group3 (Input-Driven):
Group4 (Developer ID):
Group5 (AC Gadgets):
Group6 (AWare):
Group1 (Install-Time):
Group2 (First-Use):
Group3 (Input-Driven):
Group4 (Developer ID):
Group5 (AC Gadgets):
Group6 (AWare):
Group1 (Install-Time):
Group2 (First-Use):
Group3 (Input-Driven):
Group4 (Developer ID):
Group5 (AC Gadgets):
Group6 (AWare):
100%
93%
100%
100%
0%
0%
87%
87%
93%
87%
87%
7%
87%
87%
93%
87%
87%
7%
93%
93%
93%
47%
93%
0%
recording.
Table 1: Experimental tasks for the laboratory-based user study to evaluate the effectiveness of AWare in preventing four types of user interface
attacks. The authorization requests reported in the third column are due to the fact that AWare requests a new explicit authorization whenever a widget
is presented within a new conﬁguration. (cid:52) Participants from Groups6 received additional authorization requests because the widgets were presented
within new conﬁgurations automatically identiﬁed by AWare. (cid:50) The camera preview showed a static picture to simulate a photo capture during video
Overall, we found that all the operation binding compo-
camera. We explicitly asked the participants to install
such apps on the testing platforms10.
nents used by AWare were useful in helping the users in
avoiding the four types of attacks. Moreover, AWare out-
performed alternative approaches conspicuously, while
each experimental task revealed interesting facts.
Before starting the experiment tasks, we asked the par-
ticipants to familiarize themselves with Google Keep, by
recording a voice note, and with SimpleFilters, by tak-
ing a picture and recording a video with the smartphone’s
front camera. During this phase, participants were pre-
sented with authorization requests at ﬁrst use of any of
the privacy-sensitive sensors.
All the user study participants in Groups1-6 were
asked to perform the four experimental tasks reported
in Table 1. We designed such tasks to test the four types
of attacks discussed in Section 3.1. During the experi-
ment, the researchers recorded whether the participants
commented noticing any suspicious activity in the apps’
user interface, while a background service logged whether
the designed attacks took place.
Experimental Results: 90 subjects participated and
completed our experimental tasks. We randomly assigned
15 participants to each group. The last column of Table 1
summarizes the results for the four experimental tasks
used in the laboratory-based user study. The third col-
umn of Table 1 reports additional authorization requests
prompted only to subjects in Group6 using the AWare
system. Indeed, only AWare is able to identify the change
in conﬁguration (e.g., widget in a different activity win-
dow, widget linked to a different operation or different
privacy-sensitive sensor) under which the experimental
applications are attempting access to the privacy-sensitive
sensors (i.e, microphone and cameras).
10SimpleFilters is providing interesting features to convince the
users to install it and grant the required permissions.
In particular, the analysis of the subjects’ responses to
TASK 1 revealed that the operation performed by the app
was not visible to users in the alternative approaches, thus,
leading them into making mistakes. The only exceptions
were the subjects from Group5 (AC Gadgets) because the
SimpleFilters app was not in control of the requested
operation due to the use of a system-deﬁned access control
gadget. Furthermore, all subjects from Group6 (AWare)
did not authorize SimpleFilters to access the micro-
phone. Thus, the binding request clearly identifying the
operation requested by the app aided them in avoiding to
be tricked into granting an unintended operation.
The analysis of the subjects’ responses to TASK2 and
TASK3 revealed that the users were successfully tricked
by either switching the user interface conﬁguration within
which a widget is presented, or by changing the widget
presented within the same conﬁguration, thus, leading
them into making mistakes. Interestingly, there was no
noticeable improvement for subjects in Group5 (AC Gad-
gets) where the system put in place some basic user in-
terface conﬁguration checks [39] for the presentation of
the access control gadgets. The reason was that such ba-
sic checks were insufﬁcient to identify the user interface
modiﬁcations made by the malicious app when perform-
ing the attacks described in Table 1. Furthermore, one
subject from Group6 (AWare) had mistakenly authorized
SimpleFilters to carry out an unintended operation
390    26th USENIX Security Symposium
USENIX Association
App
Category
Audio
Recording
Photo and
Video
Recording
Screenshot
Capture
Screen
Recording
Full Screen
Mode
Remote
Control
Hands-Free
Control
App
Name
WhatsApp
Viber
Messenger
Facebook
SilentEye
Fideo
Ok Screenshot
Screenshot Easy
Screenshot Capture
REC Screen Recorder
AZ Screen Recorder
Rec.
Instagram
Snapchat
Skype
Prey Anti Theft
Lost Android
Avast Anti-Theft
Google Voice Search
HappyShutter
SnapClap
Explicit User
Authorizations
First-Use AWare
6 (±1)
1 (±1)
7 (±2)
4 (±1)
5 (±1)
4 (±1)
2 (±1)
2 (±1)
2 (±1)
3 (±1)
4 (±2)
3 (±1)
6 (±1)
6 (±1)
9 (±3)
8 (±2)
6 (±1)
4 (±1)
1 (±1)
1 (±0)
1 (±0)
3
1
3
2
2
2
1
1
1
2
2
2
2
2
2
2
2
2
1
1
1
Total Operation
Authorizations
Avg. (s.d.)
1,217 (±187)
88 (±9)
2,134 (±176)
3,864 (±223)
234 (±20)
213 (±23)
49 (±8)
76 (±7)
64 (±4)
41 (±8)
49 (±7)
66 (±4)
3,412 (±182)
5,287 (±334)
468 (±62)
47 (±5)
37 (±6)
34 (±7)
3 (±1)
4 (±2)
1,245 (±122)
Table 2: Applications tested during the ﬁeld-based user study, selected
among the most popular apps from the Google Play store. The last
column reports the average and standard deviation for the total number of
operation authorizations automatically granted by AWare after the user’s
explicit authorizations. The values are rounded to ease the presentation.
even after receiving a binding request clearly identifying
the operation. This event hints to the fact that users may
still make mistakes even after they are given an explicit
authorization request specifying the actual app-requested
operation. However, users who make mistakes have still
control points provided by AWare via the security mes-
sages and logs, which allow addressing such mistakes by
means of retrospective actions (Section 7.1).
Lastly,
the analysis of the subjects’ responses to
TASK 4 revealed that the real identity of the app perform-
ing the operation was not visible to users in the alternative
approaches, thus, leading them into making mistakes.
However, no subjects from Group6 (AWare) authorized
SimpleFilters to access the microphone. Therefore,
the security message including the app’s identity aided
the user in identifying the attack.
8.1.2 Field-Based User Study
We performed a ﬁeld-based user study to address the
concern that AWare may increase the decision overhead
imposed on users as a result of ﬁner-grained access con-
trol. We measured the number of explicit authorizations
users had to make when interacting with AWare under
realistic and practical conditions. We also measured the
total number of authorizations handled by AWare via the
operation binding cache mechanism that, transparently to
users, granted previously authorized operations.
Experimental Procedures: Participants were asked to
use, for a period of one week, a Nexus 5X smartphone
running a modiﬁed version of the Android OS integrating
the AWare authorization framework. During this period,
participants interacted with 21 popular apps (i.e., average
number of apps users have installed on personal smart-
phones11) selected among the most popular apps with
up to millions of downloads from the Google Play store.
A description of the functionality provided by each app
was given to participants. We then asked participants to
explore each app and interact as they would normally do.
Table 2 summarizes all the apps that were pre-installed
on the smartphones for the ﬁeld-based user study. The
smartphones provided to participants were running a back-
ground service with a run-time log enabled, automatically
restarted at boot time, to monitor the number of app acti-
vations, the number of widgets per app, and the number
of decisions per app made by the users.
Experimental Results: 24 subjects participated and
completed the ﬁeld-based user study. Table 2 reports
the average number of explicit authorizations performed
by the participants when using AWare, for each of the 21
apps used in the ﬁeld-based user study. We compare them
with the number of explicit authorizations that would be
necessary if the ﬁrst-use permission mechanism was used
instead. The results show that 4 apps required the same
number of explicit authorizations as for the ﬁrst-use per-
mission approach. For the remaining 17 apps, the number
of decisions imposed to the users remains very modest.
Over the 21 apps, an average of 2.28 additional explicit
user authorizations are required per app.
Also, as expected, the number of explicit authorizations
made by the users remained a constant factor compared to
the number of operation authorization requests, automati-
cally granted by AWare (last column of Table 2), which
instead grew linearly during the experiment period. In-
deed, all the successive authorizations were automatically
granted by AWare.
8.2 Compatibility Analysis
We used the Compatibility Test Suite (CTS)12, an auto-
mated testing tool, to evaluate the compatibility of AWare
with 1,000 existing apps selected from the Google Play