are  located  above.  These  IORs  are  then  used  by  the
client  to  bind  to  the  target.  And  thirdly, 
it  ensures
that  each target  object  has  an  implementation  of  its
interfaces.
Finally,  on  top  of  all  this  (application 
layer),  the
application 
logic  is  coded  into  the  client  stubs  and  the
target  skeleton.  When  the  client  application  wants  to
invoke  a  method  on  the  target, 
it  first  gets  the  tar-
get  IOR,  either  from  a  naming  or  trading  service,  or
by  other  out-of-band  means.  It  then  invokes  the  stub
(giving  the  IOR  as a  parameter),  and  the  request  pa-
rameters  are  marshaled.  Then  CORBA  does the  rest:
the  information 
in  the  IOR  is  used by  the  ORB  to  lo-
cate  the  target  application,  and  a connection  is estab-
lished.  The  request  is  transferred 
to  the  target  side,
where  it  gets unmarshaled  and  presented  to  the  target
application.  After  the  target  has completed  its  task,  a
reply  goes back  to  the  client  on  the  same path.
One of the  central  concepts that  characterize  a layer
is the  description  and granularity  of the  communicating
parties  and  their  associated  (security)  attributes.  The
granularity  of  the  message content  also  plays  a  role.
In  this  paper,  the  term  identifier 
is  used  to  denote  a
representation  of  the  caller  and  target  on  various  lay-
ers.  On  the  middleware  layer,  such a representation  is
needed  to  express  access control  (and  audit)  policies.
The  caller  is the  initiator  of  an invocation,  whereas the
target  is the  entity  that  executes the  method  invoked.
layer  the  communi-
cating  parties  are  often  represented  by  network  sock-
ets  and  messages are  just  opaque  streams  between
these endpoints.  On  the  security  mechanism  layer,  an
For  example,  on  the  network 
Figure  3.  ORB  layer  Access  Control
authentication  process  provides  verified  (mechanism-
specific)  identifiers  for  the  participants.  On  the  appli-
cation  layer,  participants  can be represented  as objects
or  methods,  and  the  message content  is  fully  visible.
The  security  attributes  on the  ORB  layer  are discussed
in  detail  in  section  3 below.  It  is  important 
to  ensure
representations  on  all  layers
that 
the  corresponding 
link  together  vertically 
in  a  semantically  correct  way
-ideally,  one would  like  one authenticated  mechanism-
specific identifier  to  correspond  exactly  to  the  identifier
for  each participant  on the  application  layer,  so that  the
from  the  security  mechanism  layer  could
functionality 
be propagated  to  the  application 
layer.  Of  course this
can only  work  to  some extent,  because the  granularity
of  these  descriptors  tends  to  vary  between  the  differ-
ent  layers.  Figure  2  illustrates 
the  fact  that  the  ORB
layer  does not  provide  any useful  representation  for  the
identifiers  available  on  the  other  layers.
representations  of  the  participants. 
Any  security-system  relies  critically  on  correct  and
In
trustworthy 
CORBASec,  the  target  identifier 
is  used on  the  client
side to  authenticate  the  target  to  the  client,  but  also on
the  target  side to  locate  the  security  policies  associated
with  the  invoked  target  object  when  a  request  comes
in.  The  caller  identifier 
is necessary on  the  target  side
to  authenticate 
the  caller,  and  it  is  also  used  in  the
target's  policies  to  locate  the  policy  that  should  apply
to  a particular  caller .
identifiers 
These  authenticated 
are  ultimately
needed  to  express  security  policies,  in  particular 
for
access control.  Figure  3  shows how  ORB  layer  access
control  and  the  related  ORB  layer  policy  objects  are
defined  in  the  CORBASec  specification.
Whenever  a  request  arrives  at  the  target  ORB,
the  AccessPolicy  ob-
the  security  service  queries 
the  re-
ject 
for  the  granted  rights  associated  with 
quest's  mechanism-specific  security  context 
informa-
tion3.  Note  that  the  implementation  of  AccessPolicy
2This  paper  only  describes  the  case of  static  invocation.
CORBA  also supports  dynamic  invocation,  but  this  feature  is
considered not  to  be important  for  our  discussion.
3 A  security  context  is  normally  established  as part  of  the
authentication  process.  It  represents  (authenticated)  security-
related  information  about  the  remote  participant.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
Application
Layer
Interface
Layer
ORB Layer
Sec.  Mech.
Layer
OS  Layer
?
Figure  2.  Example  of  vertical  connections
Figure  4. Abstract  ORB  layer  components
is mechanism-specific,  although  the  object  logically  re-
sides on the  ORB  layer.  Also  note  that  the  AccessPal-
icy  in  CORBASec  is  the  caller's  capability.  The  secu-
rity  service  also  gets  the  required  rights  for  the  called
target  object  type  (this  paper  will  show  below  why
the  object  type  is unsuitable  for  this  purpose)  and  op-
eration  from  the  RequiredRights  object.  The  Access-
Decision  object  allows  access only  if  the  rights  from
AccessPalicy  are  sufficient  to  meet  the  RequiredRights.
The  AccessDecision object  deals with  access rights  on a
very  coarse granularity: 
"get"  , "set" , "use" , and  "man-
age"  are the  only  specified  rights  that  can  be  used to
describe  access to  particular  operations.
3. ORB  Layer  Security  Attributes
In  this  section  we examine  the  different  parts  of  the
middleware  system  from  the  ORB  layer  perspective.
On  a  very  abstract 
level,  there  is  a  calling  instance
that  wants  to  send a request  (the  "mes-
(the  "caller") 
sage")  to  a target  instance  (the  "target") 
, and a target
that  wants  to  send  a  reply  message to  the  caller  (see
figure  4).
An  appropriate  description  for  these components  is
necessary in  order  to  preserve the  vertical  link  between
the  underlying 
technology  and  the  application  objects
above, and  at  the  same time  provide  a generic abstrac-
tion  of the  lower  level  representations.  Note  that  both
the  object  reference and the  target  interface  do not  ap-
pear  on  the  ORB  layer,  they  are  situated  on  the  layer
above.  Object  location  and  authenticated 
identities  of
the  caller  and  target  are  concepts  of  the  layers  below.
Also  note  that  CORBA  does not  provide  unique  nam-
ing  of  object  instances  as this  is  considered  to  be  not
scaleable.  This  is important 
for  the following  discussion
on  how  these  ORB  layer  entities  are best  described.
3.1. Caller  Identifier
the  vertical 
ORB  layer  caller  identifiers  are  necessary  in  order
to  maintain 
link  between  the  underlying
technology  and  the  application  above, and  at  the  same
time  preserve the  ORB  layer  abstraction 
from  the  lay-
ers below  to  achieve portability,  mechanism  flexibility,
and  interoperability.  We will  now  look  at  several ways
to  describe  the  caller .
There  is  no  explicit  representation  of  the  caller  on
the  ORB  layer  -the 
caller  is  a  stub  implementation
that  inputs  an invocation  ( with  an object  reference that
locates  the  target)  into  the  ORB  layer.  Note  that  from
an object-oriented  programming  perspective,  the  client
is not  even an object  because one of  the  central  defini-
tions  for  an object  is that  it  has an interface.  CORBA
clients  do not  have their  own interface,  they  have a stub
which  contains  the  target  interface.  The  ORB  gener-
ates a message from  the  invocation  and  the  object  ref-
erence and  forwards  it  to  the  target,  and  (by  using  a
unique  number)  makes sure that  the  corresponding  re-
ply  gets  sent  up  into  the  same client  application.  The
caller  as  such  is  therefore  always  anonymous  on  the
ORB  layer.
We  will  now  look  at  other  pieces  of  information,
which  could  be made  available  on  the  ORB  layer:
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
Interface  Type,  Object  Reference
Firstly,  object  references  and  interface  types  are  resi-
dent  on  the  interface  layer  and  not  on  the  ORB  layer.
In  addition, 
type  and  the  information
from  the  object  reference  describe  the  target,  not  the
caller.  Therefore  they  are of no use to  express the  caller
in  the  policy.
the  interface 
Mechanism-Specific 
Identifier
The  authentication 
function  of the  underlying  security
mechanism  normally  refers to  some mechanism-specific
identifier 
for  the  communicating  parties,  for  example
cryptographic  keys and X.509  certificates  in  the  case of
SSL.  From  a  theoretical  perspective,  the  mechanism-
specific  identifier  belongs  on  the  security  mechanism
layer  and  should  not  be  propagated  up  into  the  ORB
layer  as that  would  break  the  abstraction  and  prevent
interoperability  and  flexibility.  Apart  from  that,  there
is also a semantic  problem  -the 
identifier  used by  the
security  mechanism  does not  always correspond  exactly
with  a caller  on  the  ORB  layer.  The  remainder  of this
subsection  will 
this  semantic  mismatch  by
comparing  two  different  authentication  mechanisms.
illustrate 
We  first  need to  introduce  CORBASec  authentica-
tion,  which  (according  to  the  specification)  proceeds in
the  following  steps  (see [9], p.  15-58,  15-103):
I.  The  user normally  logs onto  some caller-side  login
CUI  or uses specialized  hardware  (called the  "User
Sponsor" ) to  authenticate  to  the  PrincipalA  uthen-
ticator,  which  then  generates so-called  Credentials
for  the  user.  Although  Credentials  objects  reside
on the  middleware  layer,  they  contain  ( a reference
to)  mechanism-specific  security  information.
2.  The  target  side  does  normally  not  have  users to
log  on,  therefore  it  generates  its  Credentials  from
another  source,  e.g.  by  loading  a  certificate  from
disk.
3.  As  part  of  security  context  establishment,  COR-
BASec  securely  transfers  the  content  of  both  cre-
dentials  to  the  other  side  where  these  peer  cre-
dentials  are  stored.  The  security  attributes 
from
these peer  credential  objects  can then  be used for
security  enforcement,  e.g. access control.
Figure  5 illustrates 
BASec  authentication 
ORB  layer  perspective.
the  steps  involved  in  the  COR-
from  an  application 
layer  and
Of  course,  successful authentication  on  the  middle-
ware  layer  of  abstraction 
requires  the  involvement  of
the  underlying  security  technology,  which  should  be
In  practice,  many  CORBA  applications  use Secure
layer  protocol,  which
Sockets Layer  (SSL),  a transport 
4 However, in  most implementations  this  multiplexing  feature
of SECIOP  is just  used to improve performance, i.e. there is only
a single security  context  between the two  endpoints  of the  TCP
connection.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
Figure  6.  CORBA  Security  Context  with  Ker-
beros
hidden  from  the  application  as it  resides on  lower  lev-
els of  abstraction.
The  security  attributes 
however,  in  CORBASec 
it 
into  mechanism-independent  ORB 
When  a  secure  CORBA  client  application 
tries  to
the  ORBs
establish  a  security  context  with  a  target, 
on  both  sides  will 
therefore  call  on  the  underlying
security  mechanism  to  carry  out  unilateral  or  mu-
tual  authentication. 
result-
ing  from  this  mechanism-specific  process will  be stored
in  the  Credentials  objects  on  both  sides. 
In  theory,
this  mechanism-specific  data  is  supposed  to  be  invis-
to  the  ORB 
ible  (often  also  called  "opaque") 
layer
and to  the  application  to  facilitate 
interoperability  and
is  not  trans-
flexibility; 
lated 
layer  secu-
rity  attributes  because  this  would  introduce  seman-
tic  uncertainty. 
In  other  words,  CORBASec  uses
mechanism-independent  names  for  security  attributes
(e.g. AccessID  or  AuditID),  while  the  content  remains