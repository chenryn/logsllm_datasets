    /*
    (gdb) x/20wx 0xf7fac780
    0xf7fac780: 0x00000000  0x00000000  0x00000000  0x00000000
    0xf7fac790: 0x00000000  0x0804b050  0x00000000  0x00000000
    0xf7fac7a0: 0x00000000  0x00000000  0x00000000  0x00000000
    0xf7fac7b0: 0x0804b0a0  0x00000000  0xf7fac7b0  0xf7fac7b0
    0xf7fac7c0: 0xf7fac7b8  0xf7fac7b8  0xf7fac7c0  0xf7fac7c0
    (gdb) x/12wx 0x0804b050
    0x804b050:  0x00000000  0x00000029  0x0804b028  0x00000000
    0x804b060:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b070:  0x00000000  0x00000000  0x00000000  0x00000029
    (gdb) x/12wx 0x0804b028
    0x804b028:  0x00000000  0x00000029  0x0804b000  0x00000000
    0x804b038:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b048:  0x00000000  0x00000000  0x00000000  0x00000029
    (gdb) x/12wx 0x0804b000
    0x804b000:  0x00000000  0x00000029  0x00000000  0x00000000
    0x804b010:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b020:  0x00000000  0x00000000  0x00000000  0x00000029
    */
当下一个`malloc(0x20)`被调用时，分配器将会返回`0x804b058`(`chunk2mem`后的结果)给应用使用。
##### unsorted bin
  1. `unsorted bin`中的chunk由双链表维护
  2. `unsorted bin`中的chunk大小必须大于`0x40`。
  3. 在分配时，分配器会迭代`unsorted bin`中的`unsorted`块，在找到合适的块之后，将其从`unsorted`块中取出，并且处理这个块
    #include
    #include
    int main()
    {
        char *p1, *p2, *p3, *p4;
        p1 = malloc(0xa0);
        p2 = malloc(0x30);
        p3 = malloc(0x100);
        p4 = malloc(0x30);
        free(p1);
        free(p3);
        return 0;
    }
    /*
    (gdb) x/20wx 0xf7fac780
    0xf7fac780: 0x00000000  0x00000001  0x00000000  0x00000000
    0xf7fac790: 0x00000000  0x00000000  0x00000000  0x00000000
    0xf7fac7a0: 0x00000000  0x00000000  0x00000000  0x00000000
    0xf7fac7b0: 0x0804b220  0x00000000  0x0804b0e0  0x0804b000
    0xf7fac7c0: 0xf7fac7b8  0xf7fac7b8  0xf7fac7c0  0xf7fac7c0
    (gdb) x/20wx 0x0804b0e0
    0x804b0e0:  0x00000000  0x00000109  0x0804b000  0xf7fac7b0
    0x804b0f0:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b100:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b110:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b120:  0x00000000  0x00000000  0x00000000  0x00000000
    (gdb) x/20wx 0x0804b000
    0x804b000:  0x00000000  0x000000a9  0xf7fac7b0  0x0804b0e0
    0x804b010:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b020:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b030:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b040:  0x00000000  0x00000000  0x00000000  0x00000000
    */
##### small bin
  1. `small bin`中的chunk也由双链表维护
  2. `small bin`中的大小必须小于`0x200`
  3. 与`unsorted bin`不同，释放后的块不会在释放后插入`small bin`，只有`unsorted bin`中的切分块会被插入到`small bin`（更多的细节将在第二部分讨论）
  4. 在从`small bin`中取出时，分配器遵循先进先出原则
    #include
    #include
    int main()
    {
        char *p1, *p2, *p3, *p4, *p5, *p6;
        p1 = malloc(0xa0);
        p2 = malloc(0x30);
        p3 = malloc(0xa0);
        p4 = malloc(0x30);
        p5 = malloc(0xa0);
        p6 = malloc(0x30);
        free(p1);
        free(p3);
        free(p5);
        malloc(0x50);
        malloc(0x50);
        malloc(0x50);
        return 0;
    }
    /*
    (gdb) x/40wx 0xf7fac780
    0xf7fac780: 0x00000000  0x00000001  0x00000000  0x00000000
    0xf7fac790: 0x00000000  0x00000000  0x00000000  0x00000000
    0xf7fac7a0: 0x00000000  0x00000000  0x00000000  0x00000000
    0xf7fac7b0: 0x0804b2a0  0x0804b218  0x0804b218  0x0804b218
    0xf7fac7c0: 0xf7fac7b8  0xf7fac7b8  0xf7fac7c0  0xf7fac7c0
    0xf7fac7d0: 0xf7fac7c8  0xf7fac7c8  0xf7fac7d0  0xf7fac7d0
    0xf7fac7e0: 0xf7fac7d8  0xf7fac7d8  0xf7fac7e0  0xf7fac7e0
    0xf7fac7f0: 0xf7fac7e8  0xf7fac7e8  0xf7fac7f0  0xf7fac7f0
    0xf7fac800: 0x0804b138  0x0804b058  0xf7fac800  0xf7fac800
    0xf7fac810: 0xf7fac808  0xf7fac808  0xf7fac810  0xf7fac810
    (gdb) x/20wx 0x0804b138
    0x804b138:  0x00000000  0x00000051  0x0804b058  0xf7fac7f8
    0x804b148:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b158:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b168:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b178:  0x00000000  0x00000000  0x00000000  0x00000000
    (gdb) x/20wx 0x0804b058
    0x804b058:  0x00000000  0x00000051  0xf7fac7f8  0x0804b138
    0x804b068:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b078:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b088:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804b098:  0x00000000  0x00000000  0x00000000  0x00000000
    */
##### large bin
  1. `large bin`中的块也由双链表维护
  2. `large bin`中的块大小必须大于`0x200`
  3. 除了`fwd`和`bck`指针以外，`large`块中还有`fd_nextsize`和`bck_nextsize`域用来表明`large`块中的不同大小（降序排列）
  4. 与`small`块类似，释放后的`large`块不会被插入到`large bin`当中，只有从`unsorted bin`中气氛的块会被插入到`large bin`中。
  5. 在从`large bin`中取出chunk时，分配器遵循`最佳适配`原则，也就是找到比需求大小大的最小块
    #include
    #include
    int main()
    {
        char *p1, *p2, *p3, *p4, *p5, *p6, *p7, *p8;
        p1 = malloc(0x1000);
        p2 = malloc(0x30);
        p3 = malloc(0x1000);
        p4 = malloc(0x30);
        p5 = malloc(0x1000);
        p6 = malloc(0x30);
        p7 = malloc(0x1000);
        p8 = malloc(0x30);
        free(p1);
        free(p3);
        free(p5);
        free(p7);
        malloc(0x810);
        malloc(0x810);
        malloc(0x840);
        malloc(0x840);
        return 0;
    }
    /*
    (gdb) x/200wx 0xf7fac780
    0xf7fac780: 0x00000000  0x00000001  0x00000000  0x00000000
    0xf7fac790: 0x00000000  0x00000000  0x00000000  0x00000000
    0xf7fac7a0: 0x00000000  0x00000000  0x00000000  0x00000000
    0xf7fac7b0: 0x0804f100  0x00000000  0x0804b848  0x0804b848
    0xf7fac7c0: 0xf7fac7b8  0xf7fac7b8  0xf7fac7c0  0xf7fac7c0
    0xf7fac7d0: 0xf7fac7c8  0xf7fac7c8  0xf7fac7d0  0xf7fac7d0
    0xf7fac7e0: 0xf7fac7d8  0xf7fac7d8  0xf7fac7e0  0xf7fac7e0
    0xf7fac7f0: 0xf7fac7e8  0xf7fac7e8  0xf7fac7f0  0xf7fac7f0
    0xf7fac800: 0xf7fac7f8  0xf7fac7f8  0xf7fac800  0xf7fac800
    0xf7fac810: 0xf7fac808  0xf7fac808  0xf7fac810  0xf7fac810
    0xf7fac820: 0xf7fac818  0xf7fac818  0xf7fac820  0xf7fac820
    0xf7fac830: 0xf7fac828  0xf7fac828  0xf7fac830  0xf7fac830
    0xf7fac840: 0xf7fac838  0xf7fac838  0xf7fac840  0xf7fac840
    0xf7fac850: 0xf7fac848  0xf7fac848  0xf7fac850  0xf7fac850
    0xf7fac860: 0xf7fac858  0xf7fac858  0xf7fac860  0xf7fac860
    0xf7fac870: 0xf7fac868  0xf7fac868  0xf7fac870  0xf7fac870
    0xf7fac880: 0xf7fac878  0xf7fac878  0xf7fac880  0xf7fac880
    0xf7fac890: 0xf7fac888  0xf7fac888  0xf7fac890  0xf7fac890
    0xf7fac8a0: 0xf7fac898  0xf7fac898  0xf7fac8a0  0xf7fac8a0
    0xf7fac8b0: 0xf7fac8a8  0xf7fac8a8  0xf7fac8b0  0xf7fac8b0
    0xf7fac8c0: 0xf7fac8b8  0xf7fac8b8  0xf7fac8c0  0xf7fac8c0
    0xf7fac8d0: 0xf7fac8c8  0xf7fac8c8  0xf7fac8d0  0xf7fac8d0
    0xf7fac8e0: 0xf7fac8d8  0xf7fac8d8  0xf7fac8e0  0xf7fac8e0
    0xf7fac8f0: 0xf7fac8e8  0xf7fac8e8  0xf7fac8f0  0xf7fac8f0
    0xf7fac900: 0xf7fac8f8  0xf7fac8f8  0xf7fac900  0xf7fac900
    0xf7fac910: 0xf7fac908  0xf7fac908  0xf7fac910  0xf7fac910
    0xf7fac920: 0xf7fac918  0xf7fac918  0xf7fac920  0xf7fac920
    0xf7fac930: 0xf7fac928  0xf7fac928  0xf7fac930  0xf7fac930
    0xf7fac940: 0xf7fac938  0xf7fac938  0xf7fac940  0xf7fac940
    0xf7fac950: 0xf7fac948  0xf7fac948  0xf7fac950  0xf7fac950
    0xf7fac960: 0xf7fac958  0xf7fac958  0xf7fac960  0xf7fac960
    0xf7fac970: 0xf7fac968  0xf7fac968  0xf7fac970  0xf7fac970
    0xf7fac980: 0xf7fac978  0xf7fac978  0xf7fac980  0xf7fac980
    0xf7fac990: 0xf7fac988  0xf7fac988  0xf7fac990  0xf7fac990
    0xf7fac9a0: 0xf7fac998  0xf7fac998  0xf7fac9a0  0xf7fac9a0
    0xf7fac9b0: 0xf7fac9a8  0xf7fac9a8  0xf7fac9b0  0xf7fac9b0
    0xf7fac9c0: 0xf7fac9b8  0xf7fac9b8  0xf7fac9c0  0xf7fac9c0
    0xf7fac9d0: 0xf7fac9c8  0xf7fac9c8  0xf7fac9d0  0xf7fac9d0
    0xf7fac9e0: 0xf7fac9d8  0xf7fac9d8  0xf7fac9e0  0xf7fac9e0
    0xf7fac9f0: 0xf7fac9e8  0xf7fac9e8  0xf7fac9f0  0xf7fac9f0
    0xf7faca00: 0xf7fac9f8  0xf7fac9f8  0xf7faca00  0xf7faca00
    0xf7faca10: 0xf7faca08  0xf7faca08  0xf7faca10  0xf7faca10
    0xf7faca20: 0xf7faca18  0xf7faca18  0xf7faca20  0xf7faca20
    0xf7faca30: 0xf7faca28  0xf7faca28  0xf7faca30  0xf7faca30
    0xf7faca40: 0xf7faca38  0xf7faca38  0xf7faca40  0xf7faca40
    0xf7faca50: 0xf7faca48  0xf7faca48  0xf7faca50  0xf7faca50
    0xf7faca60: 0xf7faca58  0xf7faca58     {0x0804c858******0x0804e908}
    0xf7faca70: 0xf7faca68  0xf7faca68  0xf7faca70  0xf7faca70
    0xf7faca80: 0xf7faca78  0xf7faca78  0xf7faca80  0xf7faca80
    0xf7faca90: 0xf7faca88  0xf7faca88  0xf7faca90  0xf7faca90
    (gdb) x/20wx 0x804c858
    0x804c858:  0x00000000  0x000007f1  0x0804d898  0xf7faca60
    0x804c868:  0x0804e908  0x0804e908  0x00000000  0x00000000
    0x804c878:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804c888:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804c898:  0x00000000  0x00000000  0x00000000  0x00000000
    (gdb) x/20wx 0x804d898
    0x804d898:  0x00000000  0x000007f1  0x0804e908  0x0804c858
    0x804d8a8:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804d8b8:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804d8c8:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804d8d8:  0x00000000  0x00000000  0x00000000  0x00000000
    (gdb) x/20wx 0x804e908
    0x804e908:  0x00000000  0x000007c1  0xf7faca60  0x0804d898
    0x804e918:  0x0804c858  0x0804c858  0x00000000  0x00000000
    0x804e928:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804e938:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804e948:  0x00000000  0x00000000  0x00000000  0x00000000
    */
# 注明
原文中多处小错误已经修改。