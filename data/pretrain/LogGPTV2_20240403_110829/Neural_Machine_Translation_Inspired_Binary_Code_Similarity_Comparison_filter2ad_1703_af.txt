# Architecture Code Component Similarity Detection

## 1. Thttpd and sthttpd
This experiment evaluates thttpd (v2.25b) and sthttpd (v2.26.4). sthttpd is a fork of thttpd, maintained for continued support. Consequently, their codebases are similar, with numerous patches and new build systems added to sthttpd. To measure false positives, we tested our tool on four independent programs: thttpd (v2.25b), atphttpd (v0.4b), boa (v0.94.13), and lighttpd (v1.4.30). We used two architectures (x86 and ARM) and the Clang compiler with different optimization levels (O1-O3) to compile each program.

### Query Code Component
We selected a part of the `httpd_parse_request` function from thttpd, along with the functions it invokes, as the query code component. This code segment checks for HTTP/1.1 absolute URLs and is considered critical. We identified the starting blocks in both the query code component and the target program sthttpd, and then proceeded with path exploration to calculate the similarity score. The similarity score was 91%, indicating that sthttpd reuses the query code component. The entire process was completed within 2 seconds. In contrast, CoP [37], which uses symbolic execution and theorem proving to measure block similarity, took nearly an hour to complete. By adopting techniques from Neural Machine Translation (NMT) to speed up block comparison, INNEREYE demonstrates greater efficiency and scalability.

### False Positive Measurement
To measure false positives, we tested INNEREYE against four independently developed programs: atphttpd (v0.4b), boa (v0.94.13), and lighttpd (v1.4.30). The reported similarity scores were very low (below 4%), correctly indicating that these three programs do not reuse the query code component.

## 2. Cryptographic Function Detection
Next, we applied INNEREYE to the detection of cryptographic functions. We chose MD5 and AES as the query functions and searched for implementations in 13 target programs, ranging from small to large real-world software. These programs include cryptlib (v3.4.2), OpenSSL (v1.0.1f), openssh (v6.5p1), git (v1.9.0), libgcrypt (v1.6.1), truecrypt (v7.1a), berkeley DB (v6.0.30), MySQL (v5.6.17), glibc (v2.19), p7zip (v9.20.1), cmake (v2.8.12.2), thttpd (v2.25b), and sthttpd (v2.26.4). We used x86 and ARM, and the Clang compiler with O1â€“O3 optimization levels to compile each program.

### MD5
MD5 is a cryptographic hash function that produces a 128-bit hash value. We extracted the implementation of MD5 from OpenSSL compiled for x86 with -O2. The part of the MD5 code that implements message compression was selected as the query. Our results show that cryptlib, openssh, libgcrypt, MySQL, glibc, and cmake implement MD5 with similarity scores between 88% and 93%. We verified these findings by checking the source code.

### AES
AES is a 16-byte block cipher that processes input via a substitution-permutation network. We extracted the implementation of AES from OpenSSL compiled for ARM with -O2, and selected a part of the AES code that implements transformation iterations as the query code component. Testing the query code component, we found that cryptlib, openssh, libgcrypt, truecrypt, berkeley DB, and MySQL contain AES with similarity scores between 86% and 94%. The other programs did not contain AES. We confirmed these results by examining the source code.

These case studies demonstrate that INNEREYE-CC is an effective and precise tool for cross-architecture binary code component similarity detection.

## VIII. Discussion
We chose to modify LLVM to prepare similar/dissimilar basic blocks because LLVM's well-structured pass system makes it easier to add a basic block boundary annotator compared to GCC. However, our model was trained only on binaries compiled by LLVM. We have not evaluated how well our model can analyze binaries compiled using diverse compilers. Given that word embeddings and LSTM are adept at extracting instruction semantics and dependencies, we believe our approach is compiler-agnostic. We will verify this in future work.

We evaluated our tool's tolerance to syntactic variations introduced by different architectures and compiling settings but have not assessed its performance under code obfuscation. Handling obfuscations at the basic block level without relying on expensive methods like symbolic execution is a challenging and important problem. We plan to explore whether our model can handle obfuscations by properly capturing the semantics of binary basic blocks, given a training dataset with plenty of obfuscated binary basic blocks. At the program path level, our system inherits the powerful capability of handling obfuscations due to, e.g., garbage code insertion and opaque predicate insertion, from CoP [37].

Finally, it is worth noting that many prior systems built on basic block comparison or representation [21], [44], [37], [52], [19] can benefit from our block embedding model, which provides precise and efficient basic block information extraction and comparison.

## IX. Conclusion
Inspired by Neural Machine Translation (NMT), which can compare the meanings of sentences in different languages, we propose a novel neural network-based basic-block similarity comparison tool, INNEREYE-BB, by treating instructions as words and basic blocks as sentences. We borrow techniques from NMT, using word embeddings to represent instructions and LSTM to encode both instruction embeddings and dependencies. INNEREYE-BB is the first tool to achieve both efficiency and accuracy for cross-architecture basic-block comparison without relying on manually selected features. Leveraging INNEREYE-BB, we propose INNEREYE-CC, the first tool to resolve the cross-architecture code containment problem. We have implemented the system and performed a comprehensive evaluation. This research successfully demonstrates the potential of approaching binary analysis from the angle of language processing by adapting methodologies, ideas, and techniques from Natural Language Processing (NLP).

## Acknowledgment
The authors would like to thank the anonymous reviewers for their constructive comments and feedback. This project was supported by NSF CNS-1815144 and NSF CNS-1856380.

## References
[References section remains unchanged]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.