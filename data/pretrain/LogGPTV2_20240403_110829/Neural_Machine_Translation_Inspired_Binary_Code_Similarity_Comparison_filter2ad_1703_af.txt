architecture code component similarity detection.
1) Thttpd: This experiment evaluated thttpd (v2.25b) and
sthttpd (v2.26.4), where sthttpd is forked from thttpd
for maintenance. Thus, their codebases are similar, with many
patches and new building systems added to sthttpd. To
measure false positives, we tested our tool on four independent
programs, including thttpd (v2.25b), atphttpd (v0.4b),
boa (v0.94.13), and lighttpd (v1.4.30). We use two archi-
tectures (x86 and ARM) and clang with different compiler
optimization levels (O1-O3) to compile each program.
We consider a part of the httpd_parse_request
function as well as the functions invoked within this code part
from thttpd as the query code component, and check whether
it is reused in sthttpd. Such code part checks for HTTP/1.1
absolute URL and is considered as critical. We ﬁrst identify
the starting blocks both in the query code component and the
target program sthttpd (Section VI-B), and proceed with the
path exploration to calculate the similarity score, which is 91%,
indicating that sthttpd reuses the query code component. The
whole process is ﬁnished within 2 seconds. However, CoP [37]
(it uses symbolic execution and theorem proving to measure
the block similarity) takes almost one hour to complete. Thus,
by adopting techniques in NMT to speed up block comparison,
INNEREYE is more efﬁcient and scalable.
To measure false positives, we test INNEREYE against
four independently developed programs. We use the query
code component to search for the similar code components in
atphttpd (v0.4b), boa (v0.94.13), and lighttpd (v1.4.30).
Very low similarity scores (below 4%) are reported, correctly
indicating that these three programs do not reuse the query
code component.
2) Cryptographic Function Detection: We next apply
INNEREYE to the cryptographic function detection task.
We choose MD5 and AES as the query functions, and
search for
implementations in 13 target programs
ranging from small to large real-world software, including
their
13
cryptlib (v3.4.2), OpenSSL (v1.0.1f), openssh (v6.5p1),
git (v1.9.0), libgcrypt (v1.6.1), truecrypt (v7.1a),
berkeley DB (v6.0.30), MySQL (v5.6.17), glibc (v2.19),
p7zip (v9.20.1), cmake (v2.8.12.2), thttpd (v2.25b), and
sthttpd (v2.26.4). We use x86 and ARM, and clang with
O1–O3 optimization levels to compile each program.
MD5. MD5 is a cryptographic hash function that produces
a 128-bit hash value. We ﬁrst extract the implementation of
MD5 from OpenSSL compiled targeting x86 with -O2. The
part of the MD5 code that implements message compressing
is selected as the query.
We use the query code component to search for similar code
components from the target programs. The results show that
cryptlib, openssh, libgcrypt, MySQL, glibc, and
cmake implement MD5 with similarity scores between 88%
and 93%. We have checked the source code and conﬁrmed it.
AES. AES is a 16-byte block cipher and processes input via a
substitution-permutation network. We extract the implementa-
tion of AES from OpenSSL compiled for ARM with -O2, and
select a part of the AES code that implements transformation
iterations as the query code component.
We test the query code component to check whether it
is reused in the target programs, and found that cryptlib,
openssh, libgcrypt, truecrypt, berkeley DB, and
MySQL contain AES with the similarity scores between 86%
and 94%, and the others do not. We have checked the source
code and obtained consistent results.
The case studies demonstrate that INNEREYE-CC is an
effective and precise tool for cross-architecture binary code
component similarity detection.
VIII. DISCUSSION
We chose to modify LLVM to prepare similar/dissimilar
basic blocks, as LLVM is well structured as passes and thus it
is easier to add the basic block boundary annotator to LLVM
than GCC. However, the presented model merely learned from
binaries compiled by LLVM. We have not evaluated how well
our model can be used to analyze binaries in the case binaries
are compiled using diverse compilers. As word embeddings
and LSTM are good at extracting instruction semantics and
their dependencies, we believe our approach itself is compiler-
agnostic. We will verify this point in our future work.
We evaluated our tool on its tolerability of the syntactic
variation introduced by different architectures and compiling
settings; but we have not evaluated the impact of code
obfuscation. How to handle obfuscations on the basic block
level without relying on expensive approaches such as symbolic
execution is a challenging and important problem. We plan
to explore, with plenty of obfuscated binary basic blocks in
the training dataset, whether the presented model can handle
obfuscations by properly capturing the semantics of binary basic
blocks. But it is notable that, at the program path level, our
system inherits the powerful capability of handling obfuscations
due to, e.g., garbage code insertion and opaque predicate
insertion, from CoP [37].
Finally, it is worth pointing out that, as many prior systems
are built on basic block comparison or representation [21],
[44], [37], [52], [19], they can beneﬁt from our block embed-
ding model, which provides precise and efﬁcient basic block
information extraction and comparison.
IX. CONCLUSION
Inspired by Neural Machine Translation, which is able to
compare the meanings of sentences of different languages, we
propose a novel neural network-based basic-block similarity
comparison tool INNEREYE-BB by regarding instructions
as words and basic block as sentences. We thus borrow
techniques from NMT: word embeddings are used to represent
instructions and then LSTM is to encode both instruction
embeddings and instruction dependencies. It is the ﬁrst tool
that achieves both efﬁciency and accuracy for cross-architecture
basic-block comparison; plus, it does not rely on any manually
selected features. By leveraging INNEREYE-BB, we propose
the ﬁrst tool INNEREYE-CC that resolves the cross-architecture
code containment problem. We have implemented the system
and performed a comprehensive evaluation. This research
successfully demonstrates that it is promising to approach binary
analysis from the angle of language processing by adapting
methodologies, ideas and techniques in NLP.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
for their constructive comments and feedback. This project was
supported by NSF CNS-1815144 and NSF CNS-1856380.
REFERENCES
[1] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean, M. Devin,
S. Ghemawat, G. Irving, M. Isard et al., “Tensorﬂow: A system for
large-scale machine learning.” in OSDI, 2016.
[2] B. S. Baker, “On ﬁnding duplication and near-duplication in large
software systems,” in WCRE, 1995.
[3] BAP: The Next-Generation Binary Analysis Platform, “http://bap.ece.
cmu.edu/,” 2013.
[4] Y. Bengio, R. Ducharme, P. Vincent, and C. Jauvin, “A neural
probabilistic language model,” Journal of Machine Learning Research,
vol. 3, no. Feb, pp. 1137–1155, 2003.
[5] M. Bilenko and R. J. Mooney, “Adaptive duplicate detection using
learnable string similarity measures,” in KDD, 2003.
J. Bromley, I. Guyon, Y. LeCun, E. Säckinger, and R. Shah, “Signature
veriﬁcation using a "Siamese" time delay neural network,” in NIPS,
1994.
[6]
[7] D.-K. Chae, S.-W. Kim, J. Ha, S.-C. Lee, and G. Woo, “Software
plagiarism detection via the static API call frequency birthmark,” in
Annual ACM Symposium on Applied Computing (SAC), 2013.
[8] M. Chandramohan, Y. Xue, Z. Xu, Y. Liu, C. Y. Cho, and H. B. K. Tan,
“BinGo: Cross-architecture cross-OS binary search,” in FSE, 2016.
[9] F. Chollet et al., “Keras,” https://keras.io, 2015.
[10] S. Chopra, R. Hadsell, and Y. LeCun, “Learning a similarity metric
discriminatively, with application to face veriﬁcation,” in CVPR, 2005.
[11] Z. L. Chua, S. Shen, P. Saxena, and Z. Liang, “Neural nets can learn
[12]
[13]
function type signatures from binaries,” in USENIX Security, 2017.
J. Chung, C. Gulcehre, K. Cho, and Y. Bengio, “Empirical evaluation of
gated recurrent neural networks on sequence modeling,” in NIPS Deep
Learning and Representation Learning Workshop, 2014.
J. Crussell, C. Gibler, and H. Chen, “Attack of the clones: Detecting
cloned applications on android markets,” in ESORICS, 2012.
[14] Y. David, N. Partush, and E. Yahav, “Statistical similarity of binaries,”
in PLDI, 2016.
[15] Y. David, N. Partush, and E. Yahav, “Similarity of binaries through
re-optimization,” in PLDI, 2017.
14
[16] S. Deerwester, S. T. Dumais, G. W. Furnas, T. K. Landauer, and
R. Harshman, “Indexing by latent semantic analysis,” Journal of the
American society for information science, vol. 41, no. 6, pp. 391–407,
1990.
[17] S. H. Ding, B. C. Fung, and P. Charland, “Asm2vec: Boosting
static representation robustness for binary clone search against code
obfuscation and compiler optimization,” in IEEE Symposium on Security
and Privacy (SP), 2019.
[18] S. Eschweiler, K. Yakdan, and E. Gerhards-Padilla, “discovRE: Efﬁcient
cross-architecture identiﬁcation of bugs in binary code.” in NDSS, 2016.
[19] Q. Feng, R. Zhou, C. Xu, Y. Cheng, B. Testa, and H. Yin, “Scalable
graph-based bug search for ﬁrmware images,” in CCS, 2016.
[20] M. Gabel, L. Jiang, and Z. Su, “Scalable detection of semantic clones,”
in ICSE, 2008.
[21] D. Gao, M. Reiter, and D. Song, “Binhunt: Automatically ﬁnding
semantic differences in binary programs,” in ICICS, 2008.
[22] Gartner says 8.4 billion connected "Things" will be in use in 2017,
“http://www.gartner.com/newsroom/id/3598917,” 2017.
[23] Z. Han, X. Li, Z. Xing, H. Liu, and Z. Feng, “Learning to predict
severity of software vulnerability using only vulnerability description,”
in International Conference on Software Maintenance and Evolution
(ICSME), 2017.
[24] S. Hochreiter and J. Schmidhuber, “Long short-term memory,” Neural
computation, vol. 9, no. 8, pp. 1735–1780, 1997.
[25] X. Huo and M. Li, “Enhancing the uniﬁed features to locate buggy ﬁles
by exploiting the sequential nature of source code,” in IJCAI, 2017.
[26] X. Huo, M. Li, and Z.-H. Zhou, “Learning uniﬁed features from natural
and programming languages for locating buggy source code.” in IJCAI,
2016.
[27] Y.-C. Jhi, X. Wang, X. Jia, S. Zhu, P. Liu, and D. Wu, “Value-based
program characterization and its application to software plagiarism
detection,” in ICSE, 2011.
[28] L. Jiang, G. Misherghi, Z. Su, and S. Glondu, “Deckard: Scalable and
accurate tree-based detection of code clones,” in ICSE, 2007.
[29] N. Kalchbrenner and P. Blunsom, “Recurrent continuous translation
models.” in EMNLP, 2013.
[30] N. Kalchbrenner, E. Grefenstette, and P. Blunsom, “A convolutional
neural network for modelling sentences,” in CIKM, 2013.
[31] T. Kamiya, S. Kusumoto, and K. Inoue, “CCFinder: A multilinguistic
token-based code clone detection system for large scale source code,”
IEEE Transactions on Software Engineering, 2002.
[32] R. Koschke, R. Falke, and P. Frenzel, “Clone detection using abstract
syntax sufﬁx trees,” in WCRE, 2006.
[33] Q. Le and T. Mikolov, “Distributed representations of sentences and
documents,” in ICML, 2014.
J. Li and M. D. Ernst, “CBCD: Cloned buggy code detector,” in ICSE,
2012.
[34]
[35] B. Liu, W. Huo, C. Zhang, W. Li, F. Li, A. Piao, and W. Zou, “αDiff:
cross-version binary code similarity detection with DNN,” in ASE, 2018.
[36] C. Liu, C. Chen, J. Han, and P. S. Yu, “GPLAG: detection of software
plagiarism by program dependence graph analysis,” in KDD, 2006.
[37] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, “Semantics-based
obfuscation-resilient binary code similarity comparison with applications
to software plagiarism detection,” in FSE, 2014.
[38] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, “Semantics-based
obfuscation-resilient binary code similarity comparison with applications
to software and algorithm plagiarism detection,” IEEE Transactions on
Software Engineering, no. 12, pp. 1157–1177, 2017.
[39] L. Luo and Q. Zeng, “SolMiner: mining distinct solutions in programs,”
in ICSE-C, 2016.
[40] L. Luo, Q. Zeng, C. Cao, K. Chen, J. Liu, L. Liu, N. Gao, M. Yang,
X. Xing, and P. Liu, “System service call-oriented symbolic execution
of android framework with applications to vulnerability discovery and
exploit generation,” in Proceedings of the 15th Annual International
Conference on Mobile Systems, Applications, and Services. ACM, 2017,
pp. 225–238.
[41] L. v. d. Maaten and G. Hinton, “Visualizing data using t-SNE,” Journal
of Machine Learning Research, vol. 9, no. Nov, pp. 2579–2605, 2008.
15
[42] T. Mikolov, K. Chen, G. Corrado, and J. Dean, “Efﬁcient estimation of
word representations in vector space,” in ICLR Workshop, 2013.
[44]
[43] T. Mikolov, I. Sutskever, K. Chen, G. S. Corrado, and J. Dean, “Dis-
tributed representations of words and phrases and their compositionality,”
in NIPS, 2013.
J. Ming, M. Pan, and D. Gao, “iBinHunt: Binary hunting with
inter-procedural control ﬂow,” in Annual International Conference on
Information Security and Cryptology (ICISC), 2012.
J. Ming, F. Zhang, D. Wu, P. Liu, and S. Zhu, “Deviation-based
obfuscation-resilient program equivalence checking with application
to software plagiarism detection,” IEEE Transactions on Reliability,
2016.
[45]
[46] S. A. Mokhov, J. Paquet, and M. Debbabi, “The use of NLP techniques
in static code analysis to detect weaknesses and vulnerabilities,” in
Canadian Conference on Artiﬁcial Intelligence, 2014.
[47] L. Mou, G. Li, L. Zhang, T. Wang, and Z. Jin, “Convolutional neural
networks over tree structures for programming language processing.” in
AAAI, 2016.
J. Mueller and A. Thyagarajan, “Siamese recurrent architectures for
learning sentence similarity,” in AAAI, 2016.
[48]
[49] T. D. Nguyen, A. T. Nguyen, H. D. Phan, and T. N. Nguyen, “Exploring
API embedding for API usages and applications,” in ICSE, 2017.
[50] H. Palangi, L. Deng, Y. Shen, J. Gao, X. He, J. Chen, X. Song, and
R. Ward, “Deep sentence embedding using long short-term memory
networks: Analysis and application to information retrieval,” IEEE/ACM
Transactions on Audio, Speech and Language Processing (TASLP), 2016.
[51] H. Park, S. Choi, H.-i. Lim, and T. Han, “Detecting code theft via a
static instruction trace birthmark for Java methods,” in International
Conference on Industrial Informatics (INDIN), 2008.
J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz, “Cross-
architecture bug search in binary executables,” in IEEE Symposium on
Security and Privacy (SP), 2015.
J. Pewny, F. Schuster, L. Bernhard, T. Holz, and C. Rossow, “Leveraging
semantic signatures for bug search in binary programs,” in ACSAC, 2014.
[54] L. Prechelt, G. Malpohl, and M. Philippsen, “Finding plagiarisms among
a set of programs with JPlag,” Journal of Universal Computer Science,
vol. 8, no. 11, pp. 1016–1038, 2002.
[52]
[53]
[55] S. Schleimer, D. S. Wilkerson, and A. Aiken, “Winnowing: local
algorithms for document ﬁngerprinting,” in SIGMOD, 2003.
[56] D. Schuler, V. Dallmeier, and C. Lindig, “A dynamic birthmark for Java,”
[57]
in ASE, 2007.
I. Sutskever, O. Vinyals, and Q. V. Le, “Sequence to sequence learning
with neural networks,” in NIPS, 2014.
[58] H. Tamada, K. Okamoto, M. Nakamura, A. Monden, and K.-i.
Matsumoto, “Dynamic software birthmarks to detect
the theft of
windows applications,” in International Symposium on Future Software
Technology, 2004.
[59] Z. Tian, Q. Zheng, T. Liu, and M. Fan, “DKISB: Dynamic key instruction
sequence birthmark for software plagiarism detection,” in HPCC_EUC,
2013.
[60] X. Wang, Y.-C. Jhi, S. Zhu, and P. Liu, “Behavior based software theft
detection,” in CCS, 2009.
[61] X. Wang, Y.-C. Jhi, S. Zhu, and P. Liu, “Detecting software theft via
system call based birthmarks,” in ACSAC, 2009.
[62] A. H. Watson and T. J. McCabe, Structured testing: A testing method-
ology using the cyclomatic complexity metric. US Department of
Commerce, Technology Administration, NIST, 1996, vol. 500, no. 235.
[63] M. White, M. Tufano, M. Martinez, M. Monperrus, and D. Poshyvanyk,
“Sorting and transforming program repair ingredients via deep learning
code similarities,” arXiv preprint: 1707.04742, 2017.
J. Wieting, M. Bansal, K. Gimpel, and K. Livescu, “Towards universal
paraphrastic sentence embeddings,” in ICLR, 2016.
[64]
[65] X. Xu, C. Liu, Q. Feng, H. Yin, L. Song, and D. Song, “Neural
network-based graph embedding for cross-platform binary code similarity
detection,” in CCS, 2017.
[66] F. Zhang, D. Wu, P. Liu, and S. Zhu, “Program logic based software
plagiarism detection,” in International Symposium on Software Reliability
Engineering (ISSRE), 2014.