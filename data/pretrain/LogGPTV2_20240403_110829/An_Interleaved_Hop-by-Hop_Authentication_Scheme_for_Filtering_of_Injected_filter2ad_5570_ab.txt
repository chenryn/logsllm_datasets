ers all its one-hop neighbors and then establishes a pairwise
key with each of its neighbors.
2.5.2. Association Discovery The association discovery
phase is necessary for a node to discover the ids of its as-
sociation nodes. We ﬁrst describe a two-way association
discovery scheme for the initial path setup, which consists
of two steps – base station hello and cluster acknowledg-
ment. We then describe an incremental association discov-
ery scheme in Section 2.6, which is executed if the upper
and/or lower associated nodes of a node change because of
changes in the path from a cluster to the base station. We
also discuss some variants of the scheme in Section 2.7.
Base Station Hello This step enables a node to discover its
upper association node. The base station initiates this pro-
cess by broadcasting a HELLO message, which is recur-
sively forwarded to all nodes so that every node discov-
ers the ids of the t + 1 closest nodes that are on its path
to the base station. On receiving a HELLO message from
the base station, a node attaches its own id to the HELLO
message before re-broadcasting it. Our scheme restricts the
maximum number of node ids that are included in a mes-
sage to t + 1. To achieve this, each node replaces the id of
the node that is t + 1 hops closer to the base station with its
own id. Thus, the communication overhead introduced by a
HELLO message is bounded by t + 1 ids, despite the num-
ber of hops the HELLO message travels. On receiving the
HELLO message, a cluster head assigns each of the t + 1
ids in the message to one of its cluster nodes (including it-
self). In addition, if a cluster head is also an en-route node
for another cluster, it will rebroadcast the HELLO message.
Fig. 3 shows an example where t = 3. BS is the base
station and CH is the cluster head of a cluster Ci that con-
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
u8
u7
u6
u5
u4
u3
u2
u1
BS
v1
CH
v2
v3
Figure 2. An example showing the deﬁnition of associationwhere t = 3. BS is the base station and
CH is a cluster head. Two nodes connected with an arc are associated, the one closer to the base
station is the upperassociated node and the other is the lowerassociated node.
sists of nodes v1, v2, v3, and CH. BS broadcasts a HELLO
message M , which includes its id BS and a sequence num-
ber Sn. Here Sn is used to prevent replay attacks as well
as message loops. M is authenticated by an authentication
scheme such as µTELSA.
After receiving M , node u6 records the id(s) in M , at-
taches its own id to M , and then rebroadcasts M . Nodes
u5 and u4 do the same. When M arrives at node u3, M al-
ready contains t + 1 = 4 node ids. Node u3 records Sn and
the ids in M , removes the ﬁrst id (here BS) in the id list,
adds its own id to the end of the id list, and then rebroadcasts
M . Nodes u2 and u1 also do the same. When node CH, the
cluster head, receives M , it assigns the ids of the preceding
nodes to its cluster nodes. For example, it assigns u3 to v3,
u2 to v2 and u1 to v1, respectively. Thus, u1, u2, and u3 are
associated with v1, v2, and v3, respectively, and CH is as-
sociated with u4. At the end of this step, every node that is
more than t + 1 hops away from BS has an upper associa-
tion node.
Cluster Acknowledgment After the base station hello step,
the cluster head sends back an acknowledgment ACK back
to the base station. The ACK includes the cluster id, and
the ids of the t + 1 lower association nodes. When a node
receives the ACK, it will check if all the node ids in the
ACK are distinct. If not, it will drop the ACK (we will
explain the reason in security analysis in Section 3). Dur-
ing the forwarding of the ACK, the node ids are replaced
in the opposite direction in the base station hello step (i.e.,
a node removes the last id in the id list and adds its own id
in the beginning), thus allowing a receiving node to learn
the id of its lower association node. In the case that a node
has multiple child nodes leading to multiple clusters, it has
multiple lower associations. Therefore, it maintains a table
that includes multiple path information, where each path is
uniquely identiﬁed by the corresponding cluster id. More-
over, because the cluster acknowledgment message is crit-
ical for a node to maintain correct association knowledge,
we can employ a hop-by-hop acknowledgment mechanism
to avoid packet losses due to unreliable link layer transmis-
sions.
Consider Fig. 3. The cluster header CH ﬁrst computes
a MAC over Sn and the cluster id Ci, using its authenti-
cation key K a
CH. CH then generates an acknowledgment,
which includes its id CH, the above MAC, and an ordered
list of ids of the t + 1 cluster nodes that have discovered
their upper associated nodes in the base station hello phase.
CH sends the acknowledgment to u1, the node that previ-
ously forwarded the HELLO message to CH. The id list in
the acknowledgment message is {CH, v3, v2, v1}. As a re-
sult, u1 discovers that its lower association is v1, the last one
in the list. Node u1 then removes v1 from the list and inserts
its own id at the beginning of the list. The id list it sends to
u2 is then {u1, CH, v3, v2}. In this way, every node on the
path discovers its lower association node, while the size of
the acknowledgment message remains bounded.
During this phase, every node stores the id list it re-
ceives. Moreover, the acknowledgment is authenticated in
a hop-by-hop fashion; that is, every node authenticates the
acknowledgment to its up-stream node using their pairwise
key as the MAC key. When the base station receives the ac-
knowledgment, it veriﬁes the acknowledgment and records
the id of the cluster. We will discuss the security of this pro-
cedure in more detail in Section 3.
2.5.3. Report Endorsement Sensor nodes generate a re-
port when triggered by a special event, e.g., an increase in
the temperature being monitored by the nodes, or in re-
sponse to a query from the base station. Our scheme re-
quires that at least t + 1 nodes agree on the report for it
to be considered a valid report. For example, at least t + 1
neighboring nodes should agree that the local temperature is
higher than 150F for a valid report to be sent to the base sta-
tion. Thus, if t > 0, an adversary cannot cause a false ﬁre
alarm by compromising just one sensor node.
When a node v agrees on an event E (E typically con-
tains an event type and a timestamp), it computes a MAC
for E, using its authentication key K a
v as the MAC key. In
addition, node v computes another MAC for E, using the
pairwise key shared with its upper association node u as the
MAC key. Note that both u and v can compute their pair-
wise key Kuv based on an id-based pairwise key establish-
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
(BS)
(BS,u6)
u6
u5
(BS,u6,u5)
(BS,u6,u5,u4)
(u6,u5,u4,u3)
(u5,u4,u3,u2)
(u4,u3,u2,u1)
u4
u3
u2
u1
BS
v1
CH
(u1)
(u2)
(u6,u5,u4,u3) (u5,u4,u3,u2)
(u4,u3,u2,u1)
(u3,u2,u1,CH)
(u2,u1,CH,v3)
(u1,CH,v3,v2)
(CH,v3,v2,v1)
v2
(u3)
v3
Figure 3. An example illustrating the base station hello step where t = 3. BS is the base station, ui
is an en-route node. CH is the cluster head and v1, v2, v3 are cluster nodes. (M) is the content of the
beaconing message. Note that ui may be an en-route node for multiple paths and CH may also be
an en-route node for another cluster, although we only show one path in this ﬁgure.
ment scheme. We refer to these two types of MACs as indi-
vidual MAC and pairwise MAC, respectively. Node v then
sends an endorsement message to the cluster head that in-
cludes these two MACs. The cluster head collects endorse-
ments from t + 1 cluster nodes (including itself). It then
compresses the t + 1 individual MACs by XORing them to
reduce the size of a report. However, the pairwise MACs are
not compressed for transmission, because otherwise a node
relaying the message will not be able to extract the pair-
wise MAC of interest to it. The cluster head ﬁnally gener-
ates a report, which contains the event E, a list of ids of the
endorsing nodes, the compressed MAC and t + 1 pairwise
MACs. We will discuss the use of a short pairwise MAC to
reduce the message overhead in Section 4.
Consider the cluster node v1 in Fig. 4. v1 computes two
MACs over the event E; one MAC key is its authentica-
tion key K a
v1 and the other is the pairwise key Kv1u1 shared
with its upper associated node u1. v1 sends its endorsement
that contains these two MACs to the current cluster head
CH. The endorsement is authenticated with the pairwise
key shared between v1 and CH.
CH collects endorsements from the other two nodes v2
and v3 as well. It then veriﬁes the authenticity of each en-
dorsement based on its pairwise key shared with the corre-
sponding cluster node. If all the endorsements are authenti-
cated, CH computes a compressed MAC over E, denoted
as XM AC(E).
XM AC(E) = M AC(K a
v1
M AC(K a
v3
, E) ⊕ M AC(K a
, E) ⊕ M AC(K a
, E) ⊕
v2
CH , E).
The report R that node CH ﬁnally generates and forwards
towards BS is as follows.
R :
E, Ci,{v1, v2, v3, CH}, XM AC(E),
{M AC(KCHu4 , E), M AC(Kv3u3, E),
M AC(Kv2u2, E), M AC(Kv1u1 , E)}.
includes the ids of
The report
the endorsing nodes
v1, v2, v3, CH, which allows the base station to verify the
compressed MAC later. These ids may be removed in fu-
ture reports to save bandwidth overhead unless the nodes in
the endorsing set have changed, since the base station can
identify the endorsing nodes from the cluster id Ci. The or-
der of the pairwise MACs in R corresponds to that in the
cluster acknowledgment message so that a node receiv-
ing R knows which pairwise MAC is from its lower asso-
ciation node. Moreover, R is authenticated with the pair-
wise key shared between CH and the next node on the
path.
2.5.4. En-route Filtering When a node u receives R from
its downstream node, it ﬁrst veriﬁes the authenticity of R
based on its pairwise key shared with that node. Then it
checks the number of different pairwise MACs in R. If node
u is s(s < t + 1) hops away from BS, it should see s pair-
wise MACs; otherwise, it should see t + 1 pairwise MACs.
It then veriﬁes the last MAC in the pairwise MAC list, based
on the pairwise key shared with its lower association node.
In the case that it has not computed the pairwise key earlier,
it computes the pairwise key and then stores it. Note that
node u will drop the report if any of the above checks fails.
If node u is more than t + 1 hops away from BS, it pro-
ceeds to computes a new pairwise MAC over event E us-
ing the pairwise key shared with its own upper association
node. It then removes the last MAC from the MAC list and
inserts the new MAC into the beginning of the MAC list. Fi-
nally it forwards the report to its upstream node.
Consider node u1 in Fig. 4. When node u1 receives the
report R from node CH, it checks if there are 4 pairwise
MACs. If true, it computes its pairwise key shared with
node v1, Ku1v1, if it has not computed Ku1v1 before. Node
u1 then veriﬁes the last MAC in R, M AC(Kv1u1 , E). If
the veriﬁcation succeeds, node u1 computes a new MAC
over E, using the pairwise key it shares with node u5. The
output is M AC(Ku1u5 , E). Finally, node u1 inserts the
M AC(Ku1u5 , E) into the beginning of the MAC list, and
removes the last MAC on the list, M AC(Kv1u1 , E). The
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
R
u8
R
u7
R
u6
R
u5
u4
R
u3
R
u2
R
u1
R
R
BS
v1
CH
v2
v3
Figure 4. An example of report endorsement and en-route ﬁltering where t = 3.
report R that node u1 forwards to node u2 is as follows (R
is also authenticated with Ku1u2).
tion maintenance in two scenarios, namely base station ini-
tiated repair and local repair.
R :
E, Ci,{v1, v2, v3, CH}, XM AC(E),
{M AC(Ku1u5 , E), M AC(KCHu4 , E)},
M AC(Kv3u3 , E), M AC(Kv2u2 , E).
All the other forwarding nodes perform the same steps.
However, the nodes within t + 1 hops of BS do not insert
a new pairwise MAC. It is very easy to see that every node
on the path from the cluster head to the base station can ver-
ify one pairwise MAC in the report independently in addi-
tion to the MAC computed by its direct downstream node.
Thus the report is authenticated in an interleaved hop-by-
hop fashion.
2.5.5. Base Station Veriﬁcation The base station BS
only needs to verify the compressed MAC. Basically,
it computes t + 1 MACs over E using the authentica-
tion keys of the nodes in the id list, then XORs the MACs
to see if it matches the one in the report. The BS can eas-
ily compute the authentication key of a node based on its
id. If the report is authenticated and BS knows the lo-
cation of every cluster node, it can locate these report-
ing nodes and then react
to the event. On the other
hand, if the veriﬁcation fails, BS will discard the re-
port.
2.6. Association Maintenance
The correctness of our scheme relies on correct associ-
ation knowledge. A node needs to know the id of its lower
association node; otherwise, it will not know which pair-
wise key to use to verify a pairwise MAC. In addition, it
needs to know the id of its upper association node so that it
can add a valid pairwise MAC into a report; otherwise, its
upper association node will drop the report. If the path be-
tween the base station and a cluster head is static, then only
an initial association discovery process is necessary. How-
ever, if the path between the base station and a cluster head
changes due to the failure of an intermediate node or other
reasons, our scheme has to adapt to the change accordingly
to maintain correct associations. We discuss below associa-
2.6.1. Base Station Initiated Repair In this
sce-
nario, once a path is formed, the reports from a cluster
head to the base station always follow the same path, un-
less the path is changed due to the base station. For exam-
ple, in the TinyOS beaconing protocol [10], the base sta-
tion broadcasts a beaconing message periodically forming a
breadth-ﬁrst tree rooted at the base station. Speciﬁcally, ev-
ery node records its parent node as the node from which