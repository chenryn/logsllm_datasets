}(cid:96)1
η=1,{Out(Vi)
as ({In(Vi)
η=1),
and ({In(Ct)
}(cid:96)2
}(cid:96)1
η=1,{Out(Ct)
η=1), respectively. The protocol
is depicted in Fig. 7. It consists of preparation phase, vot-
ing/delegation phase, and tally phase.
Sending/Reading data to/from FLEDGER. Fig. 6 describes the
macro for a party to send and read data to/from the blockchain
FLEDGER. According the blockchain model proposed by [9],
three types of delays need to be considered. First, we have a
bounded network delay, and it is assumed that all messages can
be delivered within ∆1 rounds, which is 2∆1 clock-ticks in
[9]. Subsequently, a desynchronised user can get up-to-date
within 2∆1 rounds (i.e. 4∆1 clock-ticks) after registration.
The second type of delay is the fact that the adversary can
hold a valid transaction up to certain blocks, but she cannot
permanently deny service to (or DoS) such a transaction.
This is modeled by the ExtendPolicy in FLEDGER, where if
a transaction is more than ∆2 rounds (i.e. 2∆2 clock-ticks)
old, and is still valid with respect to the current state, then it
will be included into the state. Finally, we have a so-called
windowsize. Namely, the adversary can set state-slackness of
all the honest parties up to the windowsize, which is consistent
with the common preﬁx property in [20]. Hence, all the honest
parties can have a common state of any blocks that have been
The tally algorithm TallyAlg
Input: a set of the voters V, a set of the experts E, two sets of
ballots φ1, φ2 and the delegation δ.
Output: the tally result τ
Init:
•
•
Create and initiate τyes = 0, τno = 0 and τabstain = 0.
Parse δ as {(Ei, Di)}i∈[m].
For each ballot B ∈ φ2: parse B in form of
(Vj , CAST, vj , αj ); if vj = (Vote, aj ) for some
aj ∈ {yes, no, abstain}, then τaj := τaj + αj.
For each ballot B ∈ φ1: parse B in form of
(Ei, VOTE, bi) for some bi ∈ {yes, no, abstain}, then
τbi := τbi + Di.
Tally Computation:
•
•
Output:
•
Return τ := (τyes, τno, τabstain).
Fig. 5: The tally algorithm TallyAlg
proposed more than windowsize. Denote ∆3 rounds (i.e. 2∆3
clock-ticks) as the windowsize.
To send a message x to FLEDGER, we need to ﬁrst check
if this party has deregistered and desynchronized. If so, the
party needs to ﬁrst send (REGISTER, sid) to FLEDGER. Note
that the registered but desynchronized party can still send
a transaction before it
is fully updated. We simply make
a ‘dummy’ transaction whose input coins and output coins
share the same owner (spending condition), and the message
x is stored in the payload of the transaction. To read a
message (stored in the payload of some transaction) from
FLEDGER, analogously a deregistered party needs to ﬁrst send
(REGISTER, sid) to FLEDGER. After 4δ1 clock-ticks, the party
can get synchronised. In order to receive the latest message,
the party needs to wait a maximum of 2(∆2 + ∆3) clock-
ticks for the transaction that carries the intended message to
be included in the state of the party.
V. A NEW UNIT VECTOR ZK PROOF
Zero-knowledge proofs/arguments. Let L be an NP language
and RL is its corresponding polynomial time decidable binary
relation, i.e., L := {x | ∃w : (x, w) ∈ RL}. We say a
statement x ∈ L if there is a witness w such that (x, w) ∈ RL.
Let the prover P and the veriﬁer V be two PPT interactive
algorithms. Denote τ ← (cid:104)P (x, w), V (x)(cid:105) as the public tran-
script produced by P and V . After the protocol, V accepts the
proof if and only if φ(x, τ ) = 1, where φ is a public predicate
function.
Deﬁnition 2: We say (P, V ) is a perfectly complete
proof/argument for an NP relation RL if for all non-uniform
PPT interactive adversaries A it satisﬁes
•
•
Pr
Perfect completeness:
(cid:20) (x, w) ← A; τ ← (cid:104)P (x, w), V (x)(cid:105) :
(cid:20) x ← A; τ ← (cid:104)A, V (x)(cid:105) :
(x, w) (cid:54)∈ RL ∨ φ(x, τ ) = 1
(cid:21)
x (cid:54)∈ L ∧ φ(x, τ ) = 1
Pr
(Computational) soundness:
= negl(λ)
(cid:21)
= 1
Let V (x; r) denote the veriﬁer V is executed on input
x with random coin r. A proof/argument (P, V ) is called
public coin if the veriﬁer V picks his challenges randomly
and independently of the messages sent by the prover P .
Deﬁnition 3: We say a public coin proof/argument (P, V )
is a perfect special honest veriﬁer zero-knowledge (SHVZK)
for a NP relation RL if there exists a PPT simulator Sim such
that
 (x, w, r) ← A;
τ ← (cid:104)P (x, w), V (x; r)(cid:105) :
(x, w) ∈ RL ∧
∧ A(τ ) = 1
 ≈ Pr
 (x, w, r) ← A;
τ ← Sim(x; r) :
(x, w) ∈ RL ∧
∧ A(τ ) = 1
Pr
Public coin SHVZK proofs/arguments can be transformed
to a non-interactive one (in the random oracle model [10]) by
using Fiat-Shamir heuristic [18] where a cryptographic hash
function is used to compute the challenge instead of having an
online veriﬁer.
Schwartz-Zippel lemma. For completeness, we recap a vari-
ation of the Schwartz-Zippel lemma [38] that will be used in
proving the soundness of the zero-knowledge protocols.
Lemma 1 (Schwartz-Zippel): Let f be a non-zero multi-
variate polynomial of degree d over Zp, then the probability
of f (x1, . . . , xn) = 0 evaluated with random x1, . . . , xn ← Zp
is at most d
p .
Therefore, there are two multi-variate polynomials f1, f2.
If f1(x1, . . . , xn) − f2(x1, . . . , xn) = 0 for
random
x1, . . . , xn ← Zp, then we can assume that f1 = f2. This
is because, if f1 (cid:54)= f2, the probability that the above equation
holds is bounded by max(d1,d2)
, which is negligible in λ.
p
Pedersen commitment. In the unit vector zero-knowledge
proof, we use Pedersen commitment as a building block. It
is perfectly hiding and computationally binding under the
discrete logarithm assumption. More speciﬁcally, it consists
of the following 4 PPT algorithms. Note that those algorithms
(implicitly) take as input the same group parameters, param ←
Gengp(1λ).
•
q and set ck := h = gs,
KeyGenC(param): pick s ← Z∗
and output ck.
Comck(m; r): output c := gmhr and d := (m, r).
•
• Open(c, d): output d := (m, r).
•
Pedersen commitment is also additively homomorphic, i.e.
Comck(m1; r1)· Comck(m2; r2) = Comck(m1 + m2; r1 + r2) .
Verifyck(c, d): return valid if and only if c = gmhr.
The proposed unit vector ZK proof/argument. We denote
a unit vector of length n as e(n)
i = (ei,0, . . . , ei,n−1), where
its i-th coordinate is 1 and the rest coordinates are 0. Conven-
tionally, to show a vector of ElGamal ciphertexts element-wise
encrypt a unit vector, Chaum-Pedersen proofs [14] are used to
show each of the ciphertexts encrypts either 0 or 1 (via Sigma
OR composition) and the product of all the ciphertexts encrypts
1. Such kind of proof is used in many well-known voting
9
•
•
•
•
•
•
•
•
•
•
•
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
Sending and reading messages
Macro Send-Msg(x, {Ini}(cid:96)1
i=1, {Outj}(cid:96)2
j=1):
If the party has deregistered and desynchronized:
Send (REGISTER, sid) to FLEDGER.
Send
Send (DE-REGISTER, sid) to FLEDGER.
SUBMIT, sid, Tx({Ini}(cid:96)1
i=1; {Outj}(cid:96)2
j=1; x)
If the party is already synchronized:
Send
SUBMIT, sid, Tx({Ini}(cid:96)1
i=1; {Outj}(cid:96)2
j=1; x)
◦
◦
◦
◦
(cid:16)
(cid:16)
(cid:17)
(cid:17)
to FLEDGER.
to FLEDGER.
Macro Read-Msg:
If the party has deregistered and desynchronized:
◦
◦ Wait for max{4∆1, 2(∆2 + ∆3)} clock-ticks by keeping sending (TICK, sid) to the GCLOCK.
◦
◦
Send (REGISTER, sid) to FLEDGER.
Send (READ, sid) to FLEDGER and receive (READ, sid, data) from FLEDGER.
Send (DE-REGISTER, sid) to FLEDGER.
If the party is already synchronized:
◦ Wait for max{4∆1, 2(∆2 + ∆3)} clock-ticks by keeping sending (TICK, sid) to the GCLOCK.
◦
Send (READ, sid) to FLEDGER and receive (READ, sid, data) from FLEDGER.
Return data.
Fig. 6: Macro for sending and receiving message via FLEDGER
VOTE
The voting protocol Πt,k,m,n
Denote the corresponding coins owned by a voter Vi ∈ V, an expert Ej ∈ E, and a voting committee member Ct ∈ C as
({In(Vi)
Preparation phase:
}(cid:96)2
η=1), and ({In(Ct)
}(cid:96)2
η=1), respectively.
}(cid:96)1
η=1, {Out(Vi)
}(cid:96)1
η=1, {Out(Ct)
}(cid:96)2
η=1), ({In
}(cid:96)1
η=1, {Out
(Ej )
η
(Ej )
η
η
η
η
η
Voting/Delegation phase:
Upon receiving (INIT, sid) from the environment Z, the committee Cj, j ∈ [k] sends (KEYGEN, sid) to F t,k
Upon receiving (VOTE, sid, vj ) from the environment Z, the expert Ej, j ∈ [m] does the following:
DKG to generate pk.
Send (READPK, sid) to F t,k
Set the unit vector e(3) ← encodeE(vj ). Compute cj
Execute macro Send-Msg
DKG, and receive (PUBLICKEY, sid, pk) from F t,k
(cid:16)
DKG.
(3), πj ), {In
}(cid:96)1
η=1, {Out
(Ej )
η
(Ej )
η
(cid:17)
}(cid:96)2
(cj
η=1
. (Cf. Fig. 6 )
(3) ← Encpk(e(3)) and its NIZK proof πj (Cf. Sec. V).
Upon receiving (CAST, sid, vi, αi) from the environment Z, the voter Vi, i ∈ [n] does the following:
Send (READPK, sid) to F t,k
Set the unit vector e(m+3) ← encodeV(vi). Compute ui
}(cid:96)1
η=1, {Out(Vi)
Execute macro Send-Msg
DKG, and receive (PUBLICKEY, sid, pk) from F t,k
(cid:16)
(cid:17)
DKG.
(m+3), σi, αi), {In(Vi)
}(cid:96)2
(ui
η=1
η
η
. (Cf. Fig. 6 )
(m+3) ← Encpk(e(m+3)) and its NIZK proof σi (Cf. Sec. V).
Tally phase:
Upon receiving (DELCAL, sid) from the environment Z, the committee Ct, t ∈ [k] does:
(m+3), σj , αj )}j∈[n] from data.
(3), πi)}i∈[m] and {(uj
(3), πi) = 1; for j ∈ [n], Verify(uj
(m+3) to (aj
(m+3), σj ) = 1. Remove all the invalid ballots.
(m), bj
(3)).
Execute macro Read-Msg and obtain data.
Fetch the ballots {(ci
For i ∈ [m], check Verify(ci
For j ∈ [n], if a valid uj
For j ∈ [n], (cid:96) ∈ [0, m − 1], compute zi,(cid:96) := a
For i ∈ [0, m − 1], compute si :=(cid:81)n
For (cid:96) ∈ [0, 2], compute x(cid:96) :=(cid:81)m−1
For i ∈ [0, m − 1], (cid:96) ∈ [0, 2], compute di,(cid:96) := cwi
i,(cid:96) .
j=1 b
(m+3) is posted, parse uj
αj
j,(cid:96).
j=0 dj,(cid:96) ·(cid:81)n
(x(cid:96), y(cid:96)), {In(Ct)
η
}(cid:96)1
η=1, {Out(Ct)
η
}(cid:96)2
η=1
Send-Msg
(cid:16)
(cid:17)
Upon receiving (TALLY, sid) from the environment Z, the committee Ct, t ∈ [k] does: