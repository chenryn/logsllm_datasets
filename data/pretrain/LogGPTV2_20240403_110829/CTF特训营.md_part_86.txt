0170
000001A0
0040003002010000
0000000000000000
@0
000001B0
42 6F 6F 74 52 6F 6D 00
0000000000000000BootRom
000001C0
00005A0000002C00
00003000803F0030
000001D0
Z
0170
0040003002010000
0000000000000000
@0
000001E0
2F 79616666733200
0000000000000000
yaffs2
000001F0
00008A0000000000
0000A00000000000
0000000008010000
0144000000000000
1
00000200
D
00000210
2F 79616666733500
0000000000000000
yaffs5
00000220
00002A0100000000
0000F00500000000
0000000012010000
6
00000230
0144000000000000
D
00000240
2F 79616666733000
0000000000000000
yaffs0
00000250
00001A0700000000
0000C00000000000
A
00000260
0000000006010000
0102000000000000
00000270
5678576F 726B7300
0000000000000000
Vxorks
00000280
0000DA070000AA01
DEOOE08TO080000
U
170
00000290
0040003003010000
0000000000000000
@0
000002A0
46617374426F6F740000000000000000FastBoot
---
## Page 1066
CTF特训营：技术详解、解题方法与
28.3固件基地址确定方法1066/1144
图28-1一个固件头部的分区表信息
图28-1中，VxWorks分区，可以看到，0x30003F80就是加载
/xworks分区的基地址（注意字节是4字节对齐的，不要找错位），若
这个位置上的4字节均为0，则说明该分区不会被映射进内存。其
中，前面的0x01b00000是指该分区的最大大小，对于有分区表的固
件来说，确定要分析区域的基地址可以比较方便地在分区表中找到。
3.一些特殊技巧
确定固件基地址并不是一件容易的工作，不过针对特别的架构还
是存在一些特殊技巧的，例如PPC架构，利用其汇编语言的特性，仍
然可以快速确定固件的基地址。这里介绍一下在PowerPC程序下的
特殊技巧。在PowerPC中，虽然寄存器是32位的，但是如果要将数
据装入寄存器中，由于其指令宽度的限制，一条指令只能操作16位
数据，所以指令中会使用@highest:Bit[48-63]、@higher:Bit[32-47]
@h：Bit[16-31]、@l:Bit[0-15]这4种标记来表示取操作数的具体哪一部
分。对于32位的PowerPC，寄存器是32位的。因为每次只能取16
位，所以第16位被看作符号，在操作的时候，操作数会被当作符号
扩展。例如，指令"lir25.0x80008000@l”，在操作时，bit15是1，所
---
## Page 1067
CTF特训营：技术详解、解题方法与
28.3固件基地址确定方法1067/1144
以低16位被符号扩展为0xfff8000，然后装入r25
理解了这一点，我们再来看@ha。@ha是为了在装入地址的时
候防止由于符号扩展而引起错误才引入的一种标记，特点是，@ha
并不直接取高16位，而是将新数的bit16当作符号位并且根据bit15来
进行设置。举个例子，“lisr25.0xc0008000@ha”，在取高16位时，
由于bit15为1，所以相应地，在操作后也将bit16设置为1，即
r25=0xc0010000。这个特性对我们来说有什么作用呢？接下来举一
个实际例子。比如，加载固件后，IDA默认从地址O开始加载。我们
找一条以@ha结尾的指令，如图28-2所示
ROH:000000F年
OH:000009F
RON:000009FC
addi
r11,r9,du0rd_339AB8a
图28-2PowerPC固件中的相对寻址指令
显然，这里我们要加载到r9的寄存器地址为0x339ab8，而如果
imagebase为o的话，那么我们看一下这样操作会发生什么，具体如
下。
由于bit15为1，@ha会将bit16设置为1，而现在的情况是，bit16
已经为1，即r9=0x330000。而下一句，r9加上了地址@l，即
---
## Page 1068
CTF特训营：技术详解、解题方法与
28.3固件基地址确定方法1068/1144
Oxfff9ab8，注意在现在这种情况下，0xfff9ab8+0x330000=0x329ab8
并不等于0x339ab8，加载地址是错误的，也就是说，要加载的该地
址并非0x339ab8，那么应该是多少呢？根据观察可以发现，当加载
的地址为0x349ab8时，这两句的结果是正确的，即
Oxff9ab8+0x350000=0x349ab8，符合地址，因此可以推断，该固件
的基地址为0x10000。在PowerPC的固件分析中，可以巧妙地使用这
个特性，以确定基地址。
而至于ARM/MIPS等结构，目前并没有十分有效的方法可以在信
息完全未知的条件下只通过指令判断基地址，因此此类固件还是需要
经验以及额外的信息来进行辅助判断，这样会更有效一些。
---
## Page 1069
CTF特训营：技术详解、解题方法与
28.4固件分析工员1069/1144
28.4固件分析工具
在某些情况下，我们不仅需要固件中的代码，还需要提取其中的
配置文件，比如Web页面的管理员配置文件以及分析文件系统结构
等。本节将介绍一些解包固件的常用工具
1.FirmwareModKit
FirmwareModKit简称fmk，固件编辑工具，广泛应用于Squashfs
类型的固件编辑，支持多款路由器。经过测试的固件有OpenWir和
DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号
的固件。因此，如果大家拿到的是Squashfs格式文件系统的固件，可
以首先尝试使用此工具来提取分析。此工具最早放在Googlecode上
如今Googlecode已经关闭，大家可以到GitHub的镜像上下载
（https://github.com/mirror/firmware-mod-kit）。使用其中的extract-
firmware.sh脚本就可以提取固件
2.mtd-utils
由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使
用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持
---
## Page 1070
CTF特训营：技术详解、解题方法与
28.4固件分析工具
1070/1144
此节将介绍如何使用mtd-utils直接挂载此类固件。这里以jffs2为例
真体步骤如下。
1）首先安装好mtd-utils，ubuntu可以直接使用apt-get安装
2）想要识别jifs2文件系统，宿主机Linux首先要能识别这个文件
系统。
使用cat/proc/filesystems查看内核是否已经支持jffs2文件系统。
如果不支持，则使用modprobejfs2命令开启内核对jffs2的支持。
3）加载mtdram模块、mtdblock模块。
modprobemtdblock
modprobemtdram total_size=12288
其中，total_size的单位是KB，并且其大小要大于固件的大小，
否则在复制固件时会出现空间不足无法继续的问题。加载完毕后，在
dev目录中会出现/dev/mtdblock0。
4）复制jffs2镜像文件到/dev/mtdblock0：
ddif=jffs2-rootfs.imgof=/dev/mtdblock0
---
## Page 1071
CTF特训营：技术详解、解题方法与
28.4固件分析工具
1071/1144
5）最后一步，挂载mtdblock0即可：
mount-t jffs2/dev/mtdblock0/mnt
这样，我们就成功地将jfs2固件挂载到/mnt中了，接下来就可以
很方便地使用文件浏览器去浏览其中的文件，以及提取固件中的某些
内容了。yaffs2与此同理，也可以挂载，读者可以自行实践。
---
## Page 1072
CTF特训营：技术详解、解题方法与
第29章无线信号分析1072/1144
第29章无线信号分析
近期的CTF比赛中，除了出现了大量综合性loT固件分析类赛题
之外，还出现了不少与通信相关的题目。当然，无线通信安全是一个
非常古老的话题，早在二战时期，军事专家们就对此进行了大量分析
也由此产生了大量的安全方法以及攻防思路。但在线上比赛中，此类
题目的出题方式比较受限制，因此在本书中，针对一些可能出现的题
型，将会介绍一些有用的基础知识以及分析方法。
---
## Page 1073
CTF特训营：技术详解、解题方法与
29.1无线通信基本理论介绍
1073/1144
29.1无线通信基本理论介绍
无线通信是一门很大的专业，其中包含的理论数不胜数、高深莫
测。如果要详尽叙述，那就是通信专业儿干门课程的体量了。但考虑
到CTF比赛中已经涉及了部分简单的无线通信相关问题，因此在本节
中做一些简单介绍，帮助读者掌握此类题目的解题套路和方法。本节
将会提出一些在后面会使用到的概念，具体如下。
射频信号：射频信号就是经过调制的，拥有一定发射频率的电
磁波。其本质就是电磁辐射，用于传递信息。
频谱：表示一个信号包含的频率范围，即信号通过傅立叶分解
后，可以看到其频率的组成。
绝对带宽：一个信号所包含的所有频谱分量的宽度。
有效带宽：对于频谱无限宽的信号，其绝大部分的能量都集中
在相当窄的频带内，这个频带称为有效带宽。
关于频谱的直观解释，图29-1用最直观的角度阐述了频谱的物理
意义和数学意义，读者们可以结合其他资料来理解。可以说，理解了
---
## Page 1074
CTF特训营：技术详解、解题方法与
29.1无线通信基本理论介绍
1074/1144
频谱，对于无线通信相关的知识就已经理解了大半。
频域图像
频率方向一
图29-1无线信号的傅立叶分解
---
## Page 1075
CTF特训营：技术详解、解题方法与
29.2常见调制方式与解调方法1075/1144
29.2常见调制方式与解调方法
由于线上赛的限制，出题者不可能给出设备来分析或抓取空间中
的无线信号，因此，往往都采用向选手提供原始信号采样波形的方式。
我们需要掌握的就是数字信号处理的方法，在没有这些方法之前，相
决问题。但这些方法其实并非问题的本质，若要详细说道，仅凭本书
还远远不够。本节将结合目前比赛中容易出现的类型，专门为大家分
析归类。目前比赛中已出现的无线信号分析类题目还处于比较简单的
阶段，毕竟大家不都是通信专业的学生。在此可将无线信号分析类题
目归类为如下两种。
1.曼彻斯特编码
曼彻斯特编码也称为相位编码（PhaseEncode，PE），是一种
同步时钟编码技术，被物理层使用来编码一个同步位流的时钟和数
据。它在以太网媒介系统中的应用属于数据通信中的两种位同步方法
里的自同步法（另一种是外同步法），即接收方利用包含同步信号的
持殊编码从信号自身提取同步信号来锁定自己的时钟脉冲频率，以达
---
## Page 1076
CTF特训营：技术详解、解题方法与
29.2常见调制方式与解调方法1076/1144
到同步的目的。
曼彻斯特编码常用于局域网传输或无线电信号传输。曼彻斯特编
码将时钟和数据包含在数据流中，在传输代码信息的同时，也将时钟
同步信号一起传输给对方，每位编码中都有一跳变，不存在直流分量
因此真有自同步能力和良好的抗干抚性能。但每一个码元都被调成两
个电平，所以数据传输速率只有调制速率的1/2。
在曼彻斯特编码中，每一位的中间都有一跳变，位中间的跳变既
可作时钟信号，文可作数据信号；从低到高跳变表示“1”，从高到
低跳变表示“0”。还有一种是差分曼彻斯特编码，每位中间的跳变
又提供时钟定时，而用每位升始时有无跳变表示“0”或“个，有跳
变为“0”，无跳变为””。
需要特别注意的是，在每一位的“中间”必有一跳变，根据此规
则，可以得出曼彻斯特编码波形图的画法。例如，传输二进制信息0
若将0看作一位，则我们以0为中心，在两边用虚线界定这一位的范
围，然后在这一位的中间画出一个电平由高到低的跳变。后面的每一
位以此类推即可画出整个波形图。并且，曼彻斯特编码在实际使用时
的规定有歧义，有时候使用从低到高的跳变表示为0，从高到低的跳
---
## Page 1077
CTF特训营：技术详解、解题方法与
29.2常见调制方式与解调方法
1077/1144
变表示为1，有的场合下又会反过来。因此，在实际解题时，还需要
2.ASK
ASK是最常见的二进制调试方式之一，用信号振幅的有和无分别
表示1和0，其时域波形如图29-2所示，很容易区分。
二进制信号
调幅
图29-2ASK调制的时域信号
下面看一个实际捕捉到的波形，如图29-3所示。
---
## Page 1078
CTF特训营：技术详解、解题方法与
29.2常见调制方式与解调方法1078/1144
图29-3实际捕捉到的ASK调制时域波形
示，当然还有一个很明显的特点，就是最宽的信号是最窄信号宽度的
2倍，这也意味看，在此次传输中使用了曼彻斯特编码。那么ASK是
如何解调获得其所包含的内容呢？可以用程序扫描某一段时间内的最
大值，如果最大值大于阈值，就表示为1，否则就表示为0。鉴于ASK
比较简单，这种方法当然可行。不过，本节将向大家介绍一种通用方
法，对于ASK调制，都可以使用通用方法。
ASK的通用解调方法为：
对原型号取绝对值或平方-[低通滤波器][倒决抽样][慢彻斯特
解码]
具体的示例，将在后文中详细介绍，这种解调方式的重点在于
低通滤波器如何设计。
3.FSK
FSK也是最常见的调制方式之一，用两种不同的频率表示0和1
比如用低频波形表示0，用高频波形表示1。在时域上看起来的样子
---
## Page 1079
CTF特训营：技术详解、解题方法与
29.2常见调制方式与解调方法
1079/1144
如图29-4所示。
由图29-4可以看到，如果说ASK使用波形的有和无分别表示1和0
的话，那么FSK就是使用波形的疏和密来分别表示二进制的0和1。与
ASK不同的是，FSK不能再使用计算包络的方法来解调，既然是频率
的区别，那么也可以通过每一段波形的过零点次数来区分频率，由此
即可分析出调制过的信号。
0.8
0.6
0.4
0.2
0
0.2
0.4
0.6
0.8
0
200
400
600
008
1000
1200
图29-4FSK调制的时域波形
---
## Page 1080
CTF特训营：技术详解、解题方法与
29.2常见调制方式与解调方法
1080/1144
FSK的通用解调方法为将该信号同时通过低通和高通滤波器，这
样将得到两路互补的ASK信号，对两路信号分别进行包络判断和国值
检测，即可判断当前位是0还是1。
---
## Page 1081
CTF特训营：技术详解、解题方法与
29.3Matlab在数字信号处理中的应用1081/1144
29.3Matlab在数字信号处理中的应用
Matlab作为工程计算的重要工具，对于信号分析与处理有着重要
应用，其强大的滤波器设计工具箱是我们在本节中最需要关注的内
容。本节就以ASK的例子为大家分析一下Matlab在数字信号处理中的
使用方法。这里使用的功能主要是Matlab的sptool，即信号处理工具
箱在滤波器设计方面的应用。由于Matlab为商业软件，因此大家需要
自行下载安装。
打开Matlab之后，输入sptool，会弹出工具箱界面，如图29-5所
示。
---
## Page 1082