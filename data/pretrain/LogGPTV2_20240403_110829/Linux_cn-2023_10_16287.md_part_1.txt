---
author: Andreas Hartmann
category: 技术
comments_data:
- date: '2023-10-16 10:16:59'
  message: "类似以git\r\n针对文件系统的git"
  postip: 124.248.186.196
  username: 来自柬埔寨的 Chrome 118.0|GNU/Linux 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2404
date: '2023-10-16 09:24:00'
editorchoice: false
excerpt: 本文研究了 Btrfs 快照，它们本质上是 Btrfs 子卷。
fromurl: https://fedoramagazine.org/working-with-btrfs-snapshots/
id: 16287
islctt: true
largepic: /data/attachment/album/202310/16/092244yog42vb0l3v5h33h.jpg
permalink: /article-16287-1.html
pic: /data/attachment/album/202310/16/092244yog42vb0l3v5h33h.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 16250
- displayorder: 0
  raid: 16299
reviewer: wxy
selector: lujun9972
summary: 本文研究了 Btrfs 快照，它们本质上是 Btrfs 子卷。
tags:
- Btrfs
thumb: false
title: Btrfs 详解：快照
titlepic: true
translator: A2ureStone
updated: '2023-10-16 09:24:00'
---
![](/data/attachment/album/202310/16/092244yog42vb0l3v5h33h.jpg)
这篇文章会探讨什么是 Btrfs 快照，它们如何工作的，你在日常生活中进行快照的好处。这篇文章是《Btrfs 详解》系列文章中的一篇。从 Fedora Linux 33 开始，Btrfs 就是 Fedora Workstation 和 Fedora Silverblue 的默认文件系统。
如果你错过了，这里是本系列的上一篇文章：[Btrfs 详解：子卷](/article-16250-1.html)
### 简介
想象一下，你长时间处理一个文件，反复添加和撤销修改。然后，在某个时刻你意识到：两小时前你撤销的部分修改，现在会非常有用。而昨天在你销毁那个设计之前，你也已经修改了这个特殊的部分。当然，由于你会定期保存文件，所以旧的改动会丢失。很多人可能都遇到过这样的情况。如果能恢复旧版本的文件，而无需定期手动复制，岂不美哉？
这是一个 Btrfs 快照可以帮助你的特别场景。当你使用正确的话，快照同时也为你的电脑提供了很好的备份方案。
下面你会找到一些关于快照的例子。如果你想跟着操作，你必须拥有访问某些 Btrfs 文件系统的权限和 root 权限。你可以通过下面命令来验证一个目录的文件系统。
```
$ findmnt -no FSTYPE /home
btrfs
```
这个命令会输出你 `/home/` 目录的文件系统名称。如果它是 `btrfs`，那就可以了。让我们创建一个新的目录去做实验：
```
$ mkdir ~/btrfs-snapshot-test
$ cd ~/btrfs-snapshot-test
```
在下面的文本中，你会看到很多像上面显示的那样的命令输出框。请在阅读/比较命令输出时请记住，**框中的内容在行末会被换行**。这使得识别跨多行的长行变得困难，降低了可读性。如果有疑问，试着调整浏览器窗口的大小，看看文本的变化！
### Btrfs 快照
让我们从一个基本的问题开始：什么是 Btrfs 快照？如果你在文档    [1]  和维基    [2]  中查找，你不会立刻找到这个问题的答案。事实上，从“功能”一节里是找不到的。如果你搜索一下，你会发现快照和 Btrfs 子卷一起被大量地提及    [3] 。所以现在做什么呢？
还记得快照在系列前面的文章里两次被提到吗？是这样说的：
> 
> CoW 的优势在哪里？简单的说：文件被修改和编辑的历史被保存了下来。Btrfs 保存文件旧版本的引用（inode）可以轻易地被访问。这个引用就是快照：文件系统在某个时间点的状态镜像。这将是这系列文章里的单独的一篇，所以暂时留到后面介绍。
> 
> 
> —— [Btrfs 详解：基础概念](/article-16189-1.html)
> 
> 
> 
以及：
> 
> 另外一个分离 `/` 和 `/home` 的优势是我们可以分别进行 *快照* 。子卷是快照的边界，对一个子卷的快照永远不会包含该子卷下面的其他子卷的内容。快照的更多细节会在后续的文章中介绍。
> 
> 
> —— [Btrfs 详解：子卷](/article-16250-1.html)
> 
> 
> 
看起来快照是和 Btrfs 子卷相关的。你可能之前在其他地方听到过快照，比如说 LVM（逻辑卷管理器）。虽然技术角度上它们都是为了同一个目的，但它们在实现方面有所不同。
每个 Btrfs 快照是一个子卷。但是，不是每个子卷都是一份快照。区别在于子卷里面包含的内容。一个快照是子卷加上一些内容：它包含对现在和过去版本的文件的引用（inode）。让我们看看快照是从哪来的！
### 创建 Btrfs 快照
想使用快照功能，你需要一个 Btrfs 子卷来进行快照。让我们在测试目录（`~/btrfs-snapshot-test`）里创建一个：
```
$ cd ~/btrfs-snapshot-test
$ sudo btrfs subvolume create demo
Create subvolume './demo'
$ sudo chown -R $(id -u):$(id -g) demo/
$ cd demo
```
因为 Btrfs 子卷默认是被 root 所有的，你必须用 `chown` 去修改子卷里的文件的所有权到普通用户上。现在我们在里面新加一些文件：
```
$ touch foo bar baz
$ echo "Lorem ipsum dolor sit amet, " > foo
```
你的目录现在看起来像这样：
```
$ ls -l
total 4
-rw-r--r--. 1 hartan hartan  0 Dec 20 08:11 bar
-rw-r--r--. 1 hartan hartan  0 Dec 20 08:11 baz
-rw-r--r--. 1 hartan hartan 29 Dec 20 08:11 foo
```
让我们从这里创建第一次快照：
```
$ cd ..
$ sudo btrfs subvolume snapshot demo demo-1
Create a snapshot of 'demo' in './demo-1'
```
这就好了。让我们看看发生了什么：
```
$ ls -l
total 0
drwxr-xr-x. 1 hartan hartan 18 Dec 20 08:11 demo
drwxr-xr-x. 1 hartan hartan 18 Dec 20 08:11 demo-1
$ tree
.
├── demo
│   ├── bar
│   ├── baz
│   └── foo
└── demo-1
    ├── bar
    ├── baz
    └── foo
2 directories, 6 files
```
这看起来是一份拷贝！为了验证，我们从快照里读取 `foo` 的内容：
```
$ cat demo/foo
Lorem ipsum dolor sit amet,
$ cat demo-1/foo
Lorem ipsum dolor sit amet,
```
当我们修改原始文件时，真正的效果变得明显：
```
$ echo "consectetur adipiscing elit, " >> demo/foo
$ cat demo/foo
Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
$ cat demo-1/foo
Lorem ipsum dolor sit amet,
```
这表明快照仍然持有“旧”版本的数据：`foo` 的内容没有改变。到目前为止，你可以通过一个简单的文件复制来实现完全相同的目标。现在你也可以继续处理旧文件了。
```
$ echo "sed do eiusmod tempor incididunt" >> demo-1/foo
$ cat demo-1/foo
Lorem ipsum dolor sit amet,
sed do eiusmod tempor incididunt
```
但是在底层，我们的快照实际上是一个新的 Btrfs 子卷。你可以通过下面的命令来验证这一点：
```
$ sudo btrfs subvolume list -o .
ID 259 gen 265 top level 256 path home/hartan/btrfs-snapshot-test/demo
ID 260 gen 264 top level 256 path home/hartan/btrfs-snapshot-test/demo-1
```
### Btrfs 子卷 vs. 文件复制
这一切有什么意义呢？到目前为止快照看起来是一个更加复杂的复制文件的方式。事实上，快照不仅仅是表面上看起来那么简单。让我们来创建一个更大的文件：
```
$ dd if=/dev/urandom of=demo/bigfile bs=1M count=512
512+0 records in
512+0 records out
536870912 bytes (537 MB, 512 MiB) copied, 1.3454 s, 399 MB/s
```
现在有一个512 MB 大小的新文件 `demo/bigfile` 。让我们创建另一个快照，这样在你修改数据的时候就不会丢失：
```
$ sudo btrfs subvolume snapshot demo demo-2
Create a snapshot of 'demo' in './demo-2'
```
现在我们通过追加少量字符串到文件来模拟变化：
```
$ echo "small changes" >> demo/bigfile
```
这是生效后的文件结构：
```
$ tree
.
├── demo
│   ├── bar
│   ├── baz
│   ├── bigfile
│   └── foo
├── demo-1
│   ├── bar
│   ├── baz
│   └── foo
└── demo-2
    ├── bar
    ├── baz
    ├── bigfile
    └── foo
3 directories, 11 files
```
但是真正的神奇的发生在其他地方。你已经复制了 `demo/bigfile` ，你现在拥有了两个大约 512 MiB 的文件。但是，因为它们是不同的拷贝，它们应该会占据共 1 GiB 的空间。记住两个文件的差异不超过 10 字节 —— 和原文件大小相比这几乎没什么差别。
Btrfs 快照工作原理与文件复制不同：而是它们保持对当前和过去的 inode 的引用。当你在文件追加更新时，在底层 Btrfs 分配更多的空间去存储更新，同时在原来的 inode 增加对新数据的引用。之前的内容保持不变。为了便于理解，你可以认为这是仅仅“存储”原文件和修改版本的差异。
让我们看看这个效果：
```
$ sudo compsize .
Processed 11 files, 5 regular extents (9 refs), 3 inline.
Type       Perc     Disk Usage   Uncompressed Referenced
TOTAL      100%      512M         512M         1.0G
none       100%      512M         512M         1.0G
```
这个有趣的数字出现在 `TOTAL` 一行：
* `Referenced` 是当前目录下所有文件大小的总和
* `Disk Usage` 是用于在磁盘上存储文件分配空间的大小
你有一共 1 GiB 的文件，但存储它们仅仅占据了 512 MiB。
### Btrfs 快照和备份
目前为止，在这篇文章中，你已经看到如何创建 Btrfs 快照和它们的特别之处。有人可能会想：如果我在我的 PC 本地进行一系列的快照，我就有一个可靠的备份策略。 **其实不是这样的** 。如果 Btrfs 子卷共享的底层数据被偶然破坏了（被 Btrfs 之外的东西影响，比如宇宙射线），所有指向这些数据的子卷都会存在相同的错误。
为了让快照成为真正的备份，你应该将它们存储到一个不同的 Btrfs 系统上，例如在一个外部驱动器上。为了本文的目的，让我们在一个文件里创建一个新的 Btrfs 系统，并挂载它来模拟一个外部驱动。如果你有一个格式为 Btrfs 的外部驱动器，请随意替换以下命令中提到的所有路径来试试！让我们创建一个新的 Btrfs 文件系统：
**注意**：下面的命令会在你的文件系统上创建一个 8 GB 大小的新文件。如果你想跟着下面的步骤，请确保你的磁盘空间至少有 8 GB 剩余。请不要分配小于 8 GB 到这个文件，否则 Btrfs 可能在挂载时会遇到问题。
```
$ truncate -s 8G btrfs_filesystem.img
$ sudo mkfs.btrfs -L "backup-drive" btrfs_filesystem.img
btrfs-progs v5.18
See http://btrfs.wiki.kernel.org for more information.
[ ... ]
Devices:
    ID        SIZE  PATH
    1     8.00GiB  btrfs_filesystem.img
```
这些命令创建了名为 `btrfs_filesystem.img` 的 8 GB 新文件，同时在上面格式化了一个 Btrfs 文件系统。现在你可以像外部驱动器一样挂载它：
```
$ mkdir backup-drive
$ sudo mount btrfs_filesystem.img backup-drive
$ sudo chown -R $(id -u):$(id -g) backup-drive
$ ls -lh
total 4.7M
drwxr-xr-x. 1 hartan hartan    0 Dec 20 08:35 backup-drive
-rw-r--r--. 1 hartan hartan 8.0G Dec 20 08:37 btrfs_filesystem.img
drwxr-xr-x. 1 hartan hartan   32 Dec 20 08:14 demo
drwxr-xr-x. 1 hartan hartan   18 Dec 20 08:11 demo-1