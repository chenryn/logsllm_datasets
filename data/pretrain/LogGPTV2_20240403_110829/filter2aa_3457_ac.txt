### Behavior and Indicators in Malleable C2

To set up an HTTP or HTTPS Beacon listener, follow these steps:

1. Navigate to **Cobalt Strike -> Listeners**.
2. Press **Add**.
3. Choose **Beacon HTTP** as your payload option.

For more information, visit: [Cobalt Strike Documentation](https://www.cobaltstrike.com/)

#### Figure 19: HTTP Beacon Options

- **[+] Add Hosts**: Use this button to add one or more hosts for the HTTP Beacon to call home to.
- **[-] Remove Hosts**: Use this button to remove one or more hosts.
- **[X] Clear Hosts**: Use this button to clear the current list of hosts.
- **Multiple Hosts**: You can also paste a comma-separated list of callback hosts into this dialog.

**HTTP Host (Stager)**: This field controls the host of the HTTP Stager for the HTTP Beacon. It is used only if you pair this payload with an attack that requires an explicit stager.

**Profile**: Select a Malleable C2 profile variant here. Variants allow you to specify multiple profile variations in one file, enabling each HTTP or HTTPS listener to have different network indicators.

**HTTP Port (C2)**: Set the port your HTTP Beacon will phone home to.

**HTTP Port (Bind)**: Specify the port your HTTP Beacon payload web server will bind to. These options are useful for setting up port bending redirectors, such as a redirector that accepts connections on port 80 or 443 but routes them to your team server on another port.

**HTTP Host Header**: If specified, this value is propagated to your HTTP stagers and through your HTTP communication, making it easier to use domain fronting with Cobalt Strike.

**HTTP Proxy**: Click the **...** button to specify an explicit proxy configuration for this payload.

### Manual HTTP Proxy Configuration

The **(Manual) Proxy Settings** dialog offers several options to control the proxy configuration for Beacon’s HTTP and HTTPS requests. By default, Beacon uses the Internet Explorer proxy configuration for the current process/user context.

- **Type**: Configures the type of proxy.
- **Host and Port**: Specifies where the proxy is located.
- **Username and Password**: Optional fields to specify the credentials Beacon uses to authenticate to the proxy.

**Figure 20: Manual Proxy Settings**

- **Ignore proxy settings; use direct connection**: Check this box to force Beacon to attempt its HTTP and HTTPS requests without going through a proxy.
- **Set**: Update the Beacon dialog with the desired proxy settings.
- **Reset**: Revert the proxy configuration to the default behavior.

**Note**: The manual proxy configuration affects only the HTTP and HTTPS Beacon payload stages. It does not propagate to the payload stagers.

### Redirectors

A redirector is a system that sits between your target’s network and your team server. Any connections to the redirector are forwarded to your team server for processing. Redirectors provide multiple hosts for your Beacon payloads to call home to and enhance operational security by making it harder to trace the true location of your team server.

Cobalt Strike’s listener management features support the use of redirectors. Simply specify your redirector hosts when setting up an HTTP or HTTPS Beacon listener. Cobalt Strike does not validate this information. If the host you provide is not affiliated with the current host, Cobalt Strike assumes it’s a redirector.

One simple way to turn a server into a redirector is to use `socat`. For example, to forward all connections on port 80 to the team server at 192.168.12.100 on port 80, use the following `socat` syntax:

```sh
socat TCP4-LISTEN:80,fork TCP4:192.168.12.100:80
```

### 4.6 DNS Beacon

The DNS Beacon is a popular Cobalt Strike feature that uses DNS requests to beacon back to you. These DNS requests are lookups against domains that your Cobalt Strike team server is authoritative for. The DNS response tells the Beacon to go to sleep or to connect to you to download tasks. The DNS response also instructs the Beacon on how to download tasks from your team server.

**Figure 21: DNS Beacon in Action**

In Cobalt Strike 4.0 and later, the DNS Beacon is a DNS-only payload. There is no HTTP communication mode in this payload, which is a change from previous versions.

#### Data Channels

The DNS Beacon can download tasks over DNS TXT records, DNS AAAA records, or DNS A records. You can change the data channel while the Beacon is on the target using the `mode` command:
- `mode dns`: DNS A record data channel.
- `mode dns6`: DNS AAAA record channel.
- `mode dns-txt`: DNS TXT record data channel (default).

**Note**: The DNS Beacon does not check in until there’s a task available. Use the `checkin` command to request that the DNS Beacon check in next time it calls home.

### Listener Setup

To create a DNS Beacon listener:
1. Go to **Cobalt Strike -> Listeners**.
2. Press **Add**.
3. Select **Beacon DNS** as the Payload type.

**Figure 22: DNS Beacon Options**

- **[+] Add Domains**: Use this button to add one or more domains to beacon to. Your Cobalt Strike team server must be authoritative for these domains.
- **DNS Host (Stager)**: Configures the DNS Beacon’s TXT record stager. This stager is used only with Cobalt Strike features that require an explicit stager.

To test your DNS configuration, open a terminal and type:
```sh
nslookup jibberish.beacon domain
```
If you get an A record reply of `0.0.0.0`, your DNS is correctly set up. If you do not get a reply, your DNS configuration is incorrect, and the DNS Beacon will not communicate with you.

Ensure your DNS records reference the primary address on your network interface. Cobalt Strike’s DNS server will always send responses from your network interface’s primary address. DNS resolvers tend to drop replies when they request information from one server but receive a reply from another.

If you are behind a NAT device, use your public IP address for the NS record and set your firewall to forward UDP traffic on port 53 to your system. Cobalt Strike includes a DNS server to control the Beacon.

### 4.7 SMB Beacon

The SMB Beacon uses named pipes to communicate through a parent Beacon. This peer-to-peer communication works with Beacons on the same host and across the network. Windows encapsulates named pipe communication within the SMB protocol, hence the name, SMB Beacon.

To configure an SMB Beacon payload:
1. Go to **Cobalt Strike -> Listeners**.
2. Press **Add**.
3. Choose **Beacon SMB** as your payload option.

**Figure 23: SMB Beacon**

- **Pipename**: You can set an explicit pipename or accept the default option.

The SMB Beacon is compatible with most actions in Cobalt Strike that spawn a payload, except for user-driven attacks (e.g., Attacks -> Packages, Attacks -> Web Drive-by) that require explicit stagers.

Cobalt Strike post-exploitation and lateral movement actions that spawn a payload will attempt to assume control of (link) to the SMB Beacon payload for you. If you run the SMB Beacon manually, you will need to link to it from a parent Beacon.

#### Linking and Unlinking

From the Beacon console, use the `link [host] [pipe]` command to link the current Beacon to an SMB Beacon waiting for a connection. When the current Beacon checks in, its linked peers will check in too.

Linked Beacons use Windows named pipes to communicate, which is encapsulated in the SMB protocol. Here are some caveats:
1. Hosts with an SMB Beacon must accept connections on port 445.
2. You may only link Beacons managed by the same Cobalt Strike instance.

If you get an error 5 (access denied) after trying to link to a Beacon, steal a domain user’s token or use `make_token DOMAIN\user password` to populate your current token with valid credentials for the target. Try to link to the Beacon again.

To destroy a Beacon link, use the `unlink [ip address] [session PID]` command in the parent or child. The `[session PID]` argument is the process ID of the Beacon to unlink. This value specifies a specific Beacon to de-link when there are multiple child Beacons.

When you de-link an SMB Beacon, it does not exit and go away. Instead, it waits for a connection from another Beacon. You may use the `link` command to resume control of the SMB Beacon from another Beacon in the future.

### 4.8 TCP Beacon

The TCP Beacon uses a TCP socket to communicate through a parent Beacon. This peer-to-peer communication works with Beacons on the same host and across the network.

To configure a TCP Beacon payload:
1. Go to **Cobalt Strike -> Listeners**.
2. Press **Add**.
3. Choose **Beacon TCP** as your payload option.

**Figure 24: TCP Beacon**

- **Port (C2)**: Controls the port the TCP Beacon will wait for connections on.
- **Bind to localhost only**: Check this box to have the TCP Beacon bind to `127.0.0.1` when it listens for a connection. This is a good option if you use the TCP Beacon for localhost-only actions.

The TCP Beacon is compatible with most actions in Cobalt Strike that spawn a payload, except for user-driven attacks (e.g., Attacks -> Packages, Attacks -> Web Drive-by) that require explicit stagers.

Cobalt Strike post-exploitation and lateral movement actions that spawn a payload will attempt to assume control of (connect) to the TCP Beacon payload for you. If you run the TCP Beacon manually, you will need to connect to it from a parent Beacon.

#### Connecting and Unlinking

From the Beacon console, use the `connect [ip address] [port]` command to connect the current session to a TCP Beacon waiting for a connection. When the current session checks in, its linked peers will check in too.

To destroy a Beacon link, use the `unlink [ip address] [session PID]` command in the parent or child session console. Later, you may reconnect to the TCP Beacon from the same host (or a different host).

### 4.9 External C2

External C2 is a specification that allows third-party programs to act as a communication layer for Cobalt Strike’s Beacon payload. These third-party programs connect to Cobalt Strike to read frames destined for, and write frames with output from, payloads controlled in this way. The External C2 server is what these third-party programs use to interface with your Cobalt Strike team server.

To set up an External C2 listener:
1. Go to **Cobalt Strike -> Listeners**.
2. Press **Add**.
3. Choose **External C2** as your payload.

**Figure 25: External C2**

- **Port (Bind)**: Specifies the port the External C2 server waits for connections on.
- **Bind to localhost only**: Check this box to make the External C2 server localhost-only.

External C2 listeners are not like other Cobalt Strike listeners. You cannot target these with Cobalt Strike’s post-exploitation actions. This option is just a convenience to set up the interface itself.

For more information about External C2, visit the documentation at: [Cobalt Strike External C2 Documentation](https://www.cobaltstrike.com/help-externalc2)

### 4.10 Foreign Listeners

Cobalt Strike supports the concept of foreign listeners, which are aliases for x86 payload handlers hosted in the Metasploit Framework or other instances of Cobalt Strike. To pass a Windows HTTPS Meterpreter session to a friend with `msfconsole`, set up a Foreign HTTPS payload and point the Host and Port values to their handler. You may use foreign listeners anywhere you would use an x86 Cobalt Strike listener.

### 4.11 Infrastructure Consolidation

Cobalt Strike’s model for distributed operations is to set up a separate team server for each phase of your engagement. For example, it makes sense to separate your post-exploitation and persistence infrastructure. If a post-exploitation action is discovered, you don’t want the remediation of that infrastructure to clear out the callbacks that will let you back into the network.

Some engagement phases require multiple redirector and communication channel options. Cobalt Strike 4.0 is designed to handle this.

**Figure 26: Infrastructure Consolidation Features**

- **Multiple Listeners**: You can bind multiple HTTP, HTTPS, and DNS listeners to a single Cobalt Strike team server. These payloads also support port bending in their configuration, allowing you to use common ports (80, 443, or 53) in your redirector and C2 setups, but bind these listeners to different ports to avoid port conflicts on your team server system.
- **Malleable C2 Profiles**: Cobalt Strike’s Malleable C2 profiles may contain multiple variants, allowing you to specify a Profile variant when you define each HTTP or HTTPS Beacon listener.
- **TCP and SMB Beacons**: You can define multiple TCP and SMB Beacons on one team server, each with different pipe and port configurations. Any egress Beacon from the same team server can control any of these TCP or SMB Beacon payloads once they’re deployed in the target environment.

### 4.12 Payload Security Features

Cobalt Strike takes steps to protect Beacon communication and ensure that a Beacon can only receive tasks from and send output to its team server.

When you set up the Beacon payload for the first time, Cobalt Strike generates a public/private key pair unique to your team server. The team server’s public key is embedded into the Beacon’s payload stage. The Beacon uses the team server’s public key to encrypt session metadata it sends to the team server.

The Beacon must always send session metadata before the team server can issue tasks and receive output from the Beacon session. This metadata contains a random session key generated by the Beacon. The team server uses each Beacon’s session key to encrypt tasks and decrypt output. Each Beacon implementation and data channel uses this same scheme, providing the same security with the A record data channel in the Hybrid HTTP and DNS Beacon as with the HTTPS Beacon.

**Note**: The above applies to the Beacon once it is staged. The payload stagers, due to their size, do not have built-in security features.

### 5. Getting a Foothold

#### 5.1 Client-side System Profiler

The system profiler is a reconnaissance tool for client-side attacks. It starts a local web server and fingerprints anyone who visits it, providing a list of applications and plugins discovered through the user’s browser. The system profiler also attempts to discover the internal IP address of users behind a proxy server.

To start the system profiler:
1. Go to **Attacks -> Web Drive-by -> System Profiler**.
2. Specify a URI to bind to and a port to start the Cobalt Strike web server from.
3. Optionally, specify a Redirect URL to redirect visitors to after their profile is taken.
4. Click **Launch** to start the system profiler.

**Figure 27: System Profiler**

- **Use Java Applet to get information**: Uncheck this box to remove the Java Applet from the System Profiler. With Java’s click-to-run security feature, this could raise suspicion.
- **Enable SSL**: Check this box to serve the System Profiler over SSL. This box is disabled unless you specify a valid SSL certificate with Malleable C2 (discussed in Chapter 11).

To view the results from the system profiler, go to **View -> Applications**. Cobalt Strike will list all the applications it discovered during the system profiling process.

#### 5.2 Cobalt Strike Web Services

Many Cobalt Strike features run from their own web server, including the system profiler, HTTP Beacon, and Cobalt Strike’s web drive-by attacks. It’s okay to host multiple Cobalt Strike features on one web server.

To manage Cobalt Strike’s web services:
1. Go to **View -> Web Drive-by -> Manage**.
2. Copy any Cobalt Strike URL to the clipboard or stop a Cobalt Strike web service.

Use **View -> Web Log** to monitor visits to your Cobalt Strike web services.

If Cobalt Strike’s web server sees a request from the Lynx, Wget, or Curl browser, it will automatically return a 404 page as light protection against blue team snooping.

#### 5.3 User-driven Attack Packages

The best attacks often take advantage of normal features to achieve code execution. Cobalt Strike makes it easy to set up several user-driven attacks. These attacks leverage listeners you’ve already set up. Navigate to **Attacks -> Packages** and choose one of the following options:

- **HTML Application**: Generates an HTML Application that runs a Cobalt Strike payload. You can choose the Executable option to drop an executable to disk and run it, the PowerShell option to use PowerShell to run a payload, or the VBA option to silently spawn a Microsoft Excel instance and run a malicious macro that injects a payload into memory.
- **MS Office Macro**: Generates a Microsoft Office macro and presents instructions to embed the macro in Microsoft Word or Microsoft Excel.
- **Payload Generator**: Allows you to export Cobalt Strike’s stagers in various formats.
- **Windows Executable**: Generates a Windows executable artifact that delivers a payload stager. Output options include:
  - **Windows EXE**: A standard Windows executable.
  - **Windows Service EXE**: A Windows executable that responds to Service Control Manager commands. You can use this to create a Windows service with `sc` or as a custom executable with the Metasploit Framework’s PsExec modules.
  - **Windows DLL (32-bit)**: An x86 Windows DLL.
  - **Windows DLL (64-bit)**: An x64 Windows DLL. This DLL will spawn a 32-bit process and migrate your listener to it. Both DLL options export a `StartW` function compatible with `rundll32.exe`.

**Example**:
```sh
rundll32 foo.dll,StartW
```

- **Sign executable file**: Check this box to sign an EXE or DLL artifact with a code-signing certificate. You must specify a certificate in a Malleable C2 profile.
- **Windows Executable (S)**: Exports Beacon, without a stager, as an executable, service executable, 32-bit DLL, or 64-bit DLL. A payload artifact that does not use a stager is called a stageless artifact. This package also has a PowerShell option to export Beacon as a PowerShell script and a raw option to export Beacon as a blob of position-independent code.

For more information, visit: [Cobalt Strike Documentation](https://www.cobaltstrike.com/)