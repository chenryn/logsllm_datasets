a random address outside the smaller preﬁx. In other words, the traceroute data
itself does not tell us much about the persistence of loops.
To better understand the impact of random address selection and the persis-
tence of loops, we collected traceroutes towards the same addresses that revealed
the loops. We ﬁrst applied the algorithm outlined in Sect. 5.3 to the traceroute
data for August 2016 and found 2,500 unique loops between 703 provider and
1,780 customer ASes. In October 2016, we collected traceroutes towards the
Using Loops Observed in Traceroute to Infer the Ability to Spoof
237
same IP addresses that revealed the loops, using two diﬀerent vantage points.
We were able to reproduce 1,240 of the loops between 461 provider and 1,026
customer ASes. Next, we repeated this procedure for over a year of traceroute
data: August 2015–August 2016. We found 7,784 unique loops between 1,286
provider and 3,993 customer ASes. In October 2016, we were able to reproduce
1,542 unique loops between 505 provider and 1,176 customer ASes. In other
words, the additional data identiﬁed 342 loops that persisted.
A signiﬁcant portion of all loops could not be reproduced and the longer
the time lag, the higher the odds of failure, for four reasons. First, the loop
might have been transient, i.e., it only occurred during routing protocol con-
vergence [12] or temporary misconﬁguration [21]. Second, it might depend on
the vantage point of the probe, e.g., because of multi-homed routers. Third, the
provider might have ﬁxed the routing issue that caused the loop. Fourth, and
most relevant, the provider has implemented ingress ﬁltering.
Future work is needed to untangle these causes. We know from our validation
eﬀort (Sect. 6) that even loops that appeared only once can correctly signal
absence of ingress ﬁltering. Some of the loops that we could not reproduce had
already been validated by the provider as true positives. In the remainder of the
paper, we will work with the full set of loops as identiﬁed by our algorithm.
6 Validation by Network Providers
In order to validate our results and obtain ground truth, we contacted providers
in two rounds: September 2015 and September 2016. We got feedback from one
hosting provider, one data center provider, one ISP, two national research and
education networks, and two Tier 1 networks. We contacted some providers only
in one round, some in both, depending on whether we inferred absence of ingress
ﬁltering for links involving their network at both times, and our ability to reach
the right specialist in the organization. We gave all providers a formal assurance
that their names would not be included in the paper.
Feedback from the providers during the ﬁrst round resulted in improvements
in our methodology. We applied the ﬁnal methodology to both the August 2015
and August 2016 data. We then compared the ﬁnal results to the feedback that
we received from the providers in both rounds. We talked to 6 providers in round
1 and 4 in round 2, and 3 providers participated in both rounds.
We deﬁned a result as a true positive if we identiﬁed a provider-to-customer
link where the provider does not perform ingress ﬁltering and an operator at the
provider conﬁrms this. That is, we correctly inferred the absence of SAV as well as
the boundary between provider and customer. A false positive occured when we
either incorrectly detected the boundary or the provider is actually performing
SAV at the boundary. Our methodology correctly identiﬁed the absence of ingress
ﬁltering on the provider boundary in 94 out of 98 IP links between provider and
customer ASes (45 of 49 links in round 1, and 49 of 49 links in round 2).
The four false positives had diﬀerent causes. Three of them occurred because
of route aggregation. Providers perform route aggregation by consolidating mul-
tiple routes in a single, more general route. This practice can lead to problems
238
Q. Lone et al.
with our border router detection. Imagine this scenario: a provider is assigned a
/16 preﬁx X by the Regional Internet Registry (RIR). The provider allocates a
/24 subnet Y from preﬁx X to a customer, and the customer assigns addresses
from Y to its routers. The customer also has its own preﬁx Z allocated by an
RIR. If the provider aggregates Y into a single /16 advertisement for X, we would
infer that customer routers with addresses in Y belong to the provider AS. Our
methodology would then categorize a loop between provider preﬁx X and cus-
tomer preﬁx Z as signaling the absence of SAV, when the loop was actually
within the customer network.
For the fourth false positive, the provider informed us that the traceroute
data suggested that the loop had occurred inside their network rather than on
the boundary. However, they could not reproduce it anymore and blamed it on
a transient event. Note that in the second round, we found 3 loops for the same
provider and they were all true positives.
One additional piece of feedback that we received was that some of the
providers, while conﬁrming the validity of our inference that they were not doing
ingress ﬁltering on their boundary, objected to the implication that they should
be ﬁltering. They saw their services as oﬀering transit and contracted them
as such, which meant no ﬁltering on the provider’s side. In the view of these
providers, the downstream customer AS should perform SAV at their border
router. The customer ASes were business entities like ISPs, hosting providers or
large enterprises. Evaluating whether this interpretation of BCP 38 [11] is mer-
ited falls outside the scope of this paper and is for the community to address.
For this paper, the key point is that the proposed method performed accurately.
7 Results
We ﬁrst summarize the results in terms of the number of networks that do
not implement SAV. We then compare our method to the two alternatives: the
Spoofer and the Open Resolver projects. Like those methods, our approach only
observes a subset of the networks without SAV. In the absence of loops, we
cannot tell anything about the presence of ingress ﬁltering.
Using one month of CAIDA’s traceroute data from August 2016, our app-
roach identiﬁed 2,500 unique loops involving 703 provider ASes as lacking SAV on
one or more of their customer-facing links and 1,780 customer ASes. These repre-
sent approximately 1.3% and 3.2% of all advertised ASes, respectively. Moreover,
when compared to all advertised stub ASes and their providers [17], we found
9.0% of provider ASes without ingress ﬁltering involving 3.8% of all stub ASes.
As discussed in Sect. 6, some providers argued that customer ASes should be
responsible for SAV within their networks or at their borders. However, we found
that about 63% of the involved customer ASes advertise /20 or smaller preﬁx
lengths. It is unlikely that such small entities have the resources and incentives
to implement SAV in their networks. On the other hand, such small preﬁxes
should allow the providers to implement static ACLs.
We now compare our results to the data from the Spoofer and Open Resolver
projects (see Sect. 3 for details). Our method only detects the lack of ingress
Using Loops Observed in Traceroute to Infer the Ability to Spoof
239
ﬁltering for provider networks, which means that their customer ASes might
be able to spoof. We compared those customer ASes with the Spoofer data
from February to August 2016 [1]. Of 54 overlapping ASes, 38 of the Spoofer
tests were only conducted from behind a Network Address Translation (NAT)
device that likely prevented spooﬁng. Of the systems not behind a NAT, 10
of the 16 stub ASes allowed spooﬁng, i.e., more than half of these ASes had
not deployed SAV, suggesting the provider’s expectation for their customers to
deploy ﬁltering is not being met, and supporting the case for transit providers
to ﬁlter their customers. This means that the connected provider ASes do not
implement ingress ﬁltering, which is consistent with our results. Packets with
spoofed source addresses from Spoofer tests in the 6 remaining customer ASes
were not received, suggesting that ﬁltering took place in the customer AS. The
overlap between both methods contains only a small sample, but it does indicate
that the majority of the overlapping customer networks were not doing SAV – a
ﬁnding that reinforces the point that providers should not expect their customer
ASes to be willing and able do SAV, even if they are not that small.
K¨uhrer et al. used the Open Resolver data in 2014 by to identify 2,692 unique
ASes from within which spooﬁng was possible [14]. Following the same approach,
we analyzed the August 2016 data from the Open Resolver project, generously
provided to us by Jared Mauch, and found a total of 3,015 unique ASes that
were able to spoof. We compared these to the customer ASes that our method
identiﬁed as allowing spooﬁng – i.e., those connected to the providers which lack
ingress ﬁltering. We found only a modest overlap: 244 ASes.
In sum: these ﬁndings show that our method can add unique data points to
both existing methods, and improve visibility of networks lacking SAV. In terms
of the volume of observations, it resides between Spoofer and Open Resolver.
The three methods are complementary and provide views into the problem,
contributing to improved overall visibility of SAV adoption.
8 Conclusion
In this paper we implemented and validated an algorithm that uses traceroute
data to infer a lack of SAV between a stub and provider network. We inferred
703 providers that do not implement ingress ﬁltering on at least one of their
links facing 1,780 customer ASes. We also built a public website showing the
provider-customer edges that we inferred as lacking ingress ﬁltering: https://
spoofer.caida.org/. Providers can use the data to deploy ﬁltering, which would
not only stop attackers from sending packets with spoofed addresses from the
customer’s network, but also block attempts to attack the provider-customer
link by sending packets to addresses that enter the forwarding loop [21].
To improve the reliability of the method, future work is needed on border
detection and on untangling the diﬀerent factors that prevent loops from being
reproduced, to separate the implementation of ingress ﬁltering from the other
causes. A completely diﬀerent direction for future work is to experimentally test
the strength of reputation eﬀects among providers and network operators. The
240
Q. Lone et al.
networks that allow spooﬁng could be made public in varying ways, to see which
mechanism best incentivizes providers into taking action.
For the community of network operators, the results support eﬀorts such as
the Routing Resilience Manifesto [2] and other community initiatives to improve
network security. By complementing the Spoofer and Open Resolver data, our
method increases visibility into the adoption of SAV. Public visibility of spooﬁng-
enabled networks is a critical step in incentivizing providers to deploy ingress
ﬁltering in their networks. The dataset is also useful for the national CERTs
who want to push BCP 38 compliance in their countries. The problems caused
by IP spooﬁng have been recognized for years [6], and the task to reduce its role
in attacks is becoming increasingly urgent.
Acknowledgments. The technique in this paper is based on an idea from Jared
Mauch. Christian Keil (DFN-CERT) provided informative feedback. This work was
partly funded by the EU Advanced Cyber Defence Centre (ACDC) project CIP-ICT-
PSP.2012.5.1 #325188. This material is based on research sponsored by the Department
of Homeland Security (DHS) Science and Technology Directorate, Homeland Security
Advanced Research Projects Agency, Cyber Security Division BAA HSHQDC-14-R-
B0005, and the Government of United Kingdom of Great Britain and Northern Ireland
via contract number D15PC00188.
References
1. CAIDA spoofer project. https://spoofer.caida.org/
2. Mutually Agreed Norms
for Routing Security (MANRS). https://www.
routingmanifesto.org/manrs/
3. Open Resolver Project. http://openresolverproject.org/
4. Augustin, B., Cuvellier, X., Orgogozo, B., Viger, F., Friedman, T., Latapy, M.,
Magnien, C., Teixeira, R.: Avoiding traceroute anomalies with Paris traceroute.
In: IMC, pp. 153–158, October 2006
5. Baker, F., Savola, P.: Ingress ﬁltering for multihomed networks. RFC 3704, IETF
BCP84, March 2004
6. Bellovin, S.: Security problems in the TCP/IP protocol suite. CCR 19(2), 32–48
(1989)
7. Beverly, R., Bauer, S.: The spoofer project: inferring the extent of source address
ﬁltering on the Internet. In: Proceedings of USENIX SRUTI, July 2005
8. Beverly, R., Berger, A., Hyun, Y., claﬀy, k.: Understanding the eﬃcacy of deployed
Internet source address validation. In: IMC, pp. 356–369, November 2009
9. Beverly, R., Koga, R., claﬀy, kc.: Initial longitudinal analysis of IP source spooﬁng
capability on the Internet, July 2013. http://www.internetsociety.org/
10. Bright, P.: Spamhaus DDoS grows to Internet-threatening size, March 2013
11. Ferguson, P., Senie, D.: Network ingress ﬁltering: defeating denial of service attacks
which employ IP source address spooﬁng. RFC 2827, IETF BCP38, May 2000
12. Francois, P., Bonaventure, O.: Avoiding transient loops during IGP convergence
in IP networks. In: INFOCOM, pp. 237–247, March 2005
13. Huﬀaker, B., Keys, K., Koga, R., claﬀy, kc.: CAIDA inferred AS to organization
mapping dataset. https://www.caida.org/data/as-organizations/
Using Loops Observed in Traceroute to Infer the Ability to Spoof
241
14. K¨uhrer, M., Hupperich, T., Rossow, C., Holz, T.: Exit from hell? Reducing the
impact of amplication DDoS attacks. In: USENIX Security, August 2014
15. Luckie, M.: Scamper: a scalable and extensible packet prober for active measure-
ment of the Internet. In: IMC, pp. 239–245, November 2010
16. Luckie, M., Dhamdhere, A., Huﬀaker, B., Clark, D., claﬀy, k.: bdrmap: inference
of borders between IP networks. In: IMC, pp. 381–396, November 2016
17. Luckie, M., Huﬀaker, B., Dhamdhere, A., Giotsas, V., claﬀy, k.: AS relationships,
customer cones, and validation. In: IMC, pp. 243–256, October 2013
18. Marder, A., Smith, J.M.: MAP-IT: multipass accurate passive inferences from
traceroute. In: IMC, November 2016
19. Prince, M.: Technical details behind a 400 Gbps NTP ampliﬁcation DDoS attack.
http://blog.cloudﬂare.com/
20. Vixie, P.: Rate-limiting state: the edge of the Internet is an unruly place. ACM
Queue 12(2), 1–5 (2014)
21. Xia, J., Gao, L., Fei, T.: A measurement study of persistent forwarding loops on
the Internet. Comput. Netw. 51(17), 4780–4796 (2007)