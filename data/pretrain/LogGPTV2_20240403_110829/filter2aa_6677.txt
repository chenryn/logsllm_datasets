package main
import (
	"encoding/binary"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"math/cmplx"
	"math/rand"
	"net"
)
type UserError struct {
	msg string // description of error
}
func (e *UserError) Error() string { return e.msg }
const (
	G_I = 0 // Identity
	G_X = 1 // Pauli X-gate
	G_Y = 2 // Pauli Y-gate
	G_Z = 3 // Pauli Z-gate
	G_H = 4 // Hadamard gate
	G_R = 5 // R2 gate: rotate phase by 90 degrees
	G_P = 6 // Rotate phase by an angle specified in radians
	G_M = 7 // Measure in standard (Z) basis, and if 1, self-destruct
)
var S float64 = math.Sqrt(0.5)
var flag []byte
var MATRICES = [6][2][2]complex128{
	{{complex(1, 0), complex(0, 0)}, {complex(0, 0), complex(1, 0)}},
	{{complex(0, 0), complex(1, 0)}, {complex(1, 0), complex(0, 0)}},
	{{complex(0, 0), complex(0, -1)}, {complex(0, 1), complex(0, 0)}},
	{{complex(1, 0), complex(0, 0)}, {complex(0, 0), complex(-1, 0)}},
	{{complex(S, 0), complex(S, 0)}, {complex(S, 0), complex(-S, 0)}},
	{{complex(1, 0), complex(0, 0)}, {complex(0, 0), complex(0, 1)}},
}
func apply_gate(state [4]complex128, matrix [2][2]complex128, wire bool, controlled bool) [4]complex128 {
	var result [4]complex128
	// I could carefully parameterize this.  Or I could be a lazy bum!
	if wire && controlled {
		result[0] = state[0]
		result[2] = state[2]
		result[1] = matrix[0][0]*state[1] + matrix[1][0]*state[3]
		result[3] = matrix[0][1]*state[1] + matrix[1][1]*state[3]
	} else if wire {
		result[0] = matrix[0][0]*state[0] + matrix[1][0]*state[2]
		result[2] = matrix[0][1]*state[0] + matrix[1][1]*state[2]
		result[1] = matrix[0][0]*state[1] + matrix[1][0]*state[3]
		result[3] = matrix[0][1]*state[1] + matrix[1][1]*state[3]
	} else if controlled {
		result[0] = state[0]
		result[1] = state[1]
		result[2] = matrix[0][0]*state[2] + matrix[1][0]*state[3]
		result[3] = matrix[0][1]*state[2] + matrix[1][1]*state[3]
	} else {
		result[0] = matrix[0][0]*state[0] + matrix[1][0]*state[1]
		result[1] = matrix[0][1]*state[0] + matrix[1][1]*state[1]
		result[2] = matrix[0][0]*state[2] + matrix[1][0]*state[3]
		result[3] = matrix[0][1]*state[2] + matrix[1][1]*state[3]
	}
	return result
}
func measure_wire(state [4]complex128, wire bool) [4]complex128 {
	prob_zero := cmplx.Abs(state[0]) * cmplx.Abs(state[0])
	if wire {
		prob_zero += cmplx.Abs(state[1]) * cmplx.Abs(state[1])
	} else {
		prob_zero += cmplx.Abs(state[2]) * cmplx.Abs(state[2])
	}
	if rand.Float64() = actual {
			return i
		}
	}
	panic(UserError{"Bad probability?"})
}
func handle_connection(conn net.Conn) {
	defer func() {
		e := recover()
		if e != nil {
			if uerr, ok := e.(UserError); ok {
				fmt.Println(uerr.Error())
				conn.Write([]byte(uerr.Error()))
			}
		}
		conn.Close()
	}()
	bombs := make([]bool, 14*8)
	for ix := range bombs {
		bombs[ix] = (ix%2 == 1) // XXX: Odd idx are bombs.
	}
	for {
		command := make([]byte, 2)
		io.ReadFull(conn, command)
		num_gates := uint16(command[1]) + 256*uint16(command[0])
		if num_gates == 0 {
			break
		}
		fmt.Println(num_gates);
		state := [4]complex128{complex(1, 0), complex(0, 0), complex(0, 0), complex(0, 0)}
		for i := uint16(0); i  50 {
		panic(UserError{"this doesn't happen"})
	}
	listener, err := net.Listen("tcp", "0.0.0.0:8001")
	if err != nil {
		panic(err)
	}
	defer listener.Close()
	fmt.Println("Ready to rumble.")
	for {
		conn, err := listener.Accept()
		if err != nil {
			panic(err)
		}
		go handle_connection(conn)
	}
}