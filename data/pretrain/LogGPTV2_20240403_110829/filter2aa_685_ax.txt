Before the procedures for querying and storing data can be created, the database
schema needs to be created and a new database initialized with it.
 For the purposes of Tweeter, this is pretty simple. The User and Message types map
pretty well to User and Message tables. All that you need to do is create those tables in
your database.
ORM
You may be familiar with object-relational mapping libraries, which
mostly automate the creation of tables based on objects. Unfortunately, Nim
doesn’t yet have any mature ORM libraries that could be used. Feel free to
play around with the libraries that have been released on Nimble.
I’ll use SQLite for Tweeter’s database. It’s easy to get started with, as the full database
can be embedded directly in your application’s executable. Other database software
needs to be set up ahead of time and configured to run as a separate server.
 The creation of tables in the database is a one-off task that’s only performed when
a fresh database instance needs to be created. Once the tables are created, the data-
base can be filled with data and then queried. I’ll show you how to write a quick Nim
script that will create the database and all the required tables.
 Create a new file called createDatabase.nim inside Tweeter’s src directory. The
next listing shows the code that you should start off with.
import db_sqlite
var db = open("tweeter.db", "", "", "")
db.close()
The db_sqlite module’s API has been designed so that it’s compatible with the other
database modules, including db_mysql and db_postgres. This way, you can simply
change the imported module to use a different database. That’s also why the open pro-
cedure in the db_sqlite module has three parameters that aren’t used.
 The code in listing 7.10 doesn’t do much except initialize a new SQLite database at
the specified location, or open an existing one, if it exists. The open procedure returns
a DbConn object that can then be used to talk to the database.
 The next step is creating the tables, and that requires some knowledge of SQL. Fig-
ure 7.10 shows what the tables will look like after they’re created.
Listing 7.10
Connecting to a SQLite database
The open procedure creates a new 
database at the location specified. In 
this case, it will create a tweeter.db file 
in createDatabase’s working directory.
Licensed to   
193
Storing data in a database
The following listing shows how to create the tables that store the data contained in
the User and Message objects.
import db_sqlite
var db = open("tweeter.db", "", "", "")
db.exec(sql"""
CREATE TABLE IF NOT EXISTS User(
username text PRIMARY KEY1
);
""")
db.exec(sql"""
CREATE TABLE IF NOT EXISTS Following(
follower text,
followed_user text,
PRIMARY KEY (follower, followed_user)
FOREIGN KEY (follower) REFERENCES User(username),
FOREIGN KEY (followed_user) REFERENCES User(username)
);
""")
Listing 7.11
Creating tables in a SQLite database
1 In some cases, it may be faster to use an integer as the primary key. This isn’t done here for simplicity.
username
PK
follower
PK,FK1
followed_user
PK,FK2
username
FK
time
msg
Message
User
Following
Figure 7.10
The database tables
The sql procedure converts a string literal into a 
SqlQuery string that can then be passed to exec.
Creates a new table, as long as the 
database doesn’t already contain it
Specifies that the User table should 
contain a username field and that it 
should be a primary key1
Creates a new table, as 
long as the database 
doesn’t already contain it
Contains the username of the follower
Contains the username of the user 
that the follower is following
Specifies that the follower and followed_user
fields are, together, the primary key
Creates a foreign-key constraint,
ensuring that the data added to the
database is correct
Licensed to   
194
CHAPTER 7
Building a Twitter clone
db.exec(sql"""
CREATE TABLE IF NOT EXISTS Message(
username text,
time integer,
msg text NOT NULL,
FOREIGN KEY (username) REFERENCES User(username)
);
""")
echo("Database created successfully!")
db.close()
Whew. That’s a lot of SQL. Let me explain it in a bit more detail.
 Each exec line executes a separate piece of SQL, and an error is raised if that SQL
isn’t executed successfully. Otherwise, a new SQL table is successfully created with the
specified fields. After the code in listing 7.11 is finished executing, the resulting data-
base will contain three different tables. The Following table is required because
SQLite doesn’t support arrays.
 The table definitions contains many table constraints, which prevent invalid data
from being stored in the database. For example, the FOREIGN KEY constraints present
in the Following table ensure that the followed_user and follower fields contain
usernames that are already stored in the User table.
 Save the code in listing 7.11 in your createDatabase.nim file, and then compile and
run it by executing nimble c -r src/createDatabase. You should see a “Database cre-
ated successfully!” message and a tweeter.db file in Tweeter’s directory.
 Your database has been created, and you’re now ready to start defining procedures
for storing and retrieving data. 
7.3.3
Storing and retrieving data
The createDatabase.nim file is now finished, so you can switch back to the data-
base.nim file. This section explains how you can begin adding data into the database
and how to then get the data back out.
 Let’s start with storing data in the database. These three actions in Tweeter will
trigger data to be added to the database:
Contains the username of the 
user who posted the message
Creates a new table, as long as the 
database doesn’t already contain it
Contains the actual message text; a
NOT NULL key constraint is also
present to ensure that it’s not null
Contains the time when the
message was posted, stored as
UNIX time, the number of seconds
since 1970-01-01 00:00:00 UTC
The sql procedure converts a string 
literal into a SqlQuery string that 
can then be passed to exec.
Licensed to   
195
Storing data in a database
 Posting a new message
 Following a user
 Creating an account
The database module should define procedures for those three actions, as follows:
proc post(message: Message)
proc follow(follower: User, user: User)
proc create(user: User)
Each procedure corresponds to a single action. Figure 7.11 shows how the follow pro-
cedure will modify the database.
Each of those procedures simply needs to execute the appropriate SQL statements to
store the desired data. And in order to do that, the procedures will need to take a
DbConn object as a parameter. The DbConn object should be saved in a custom Data-
base object so that it can be changed if required in the future. The following listing
shows the definition of the Database type.
import db_sqlite
type
Database* = ref object
db: DbConn
proc newDatabase*(filename = "tweeter.db"): Database =
new result
result.db = open(filename, "", "", "")
Add the import statement, the type definition, and the corresponding constructor to
the top of your database.nim file. After you do so, you’ll be ready to implement the
post, follow, and create procedures.
 The following listing shows how they can be implemented.
Listing 7.12
The Database type
follow("d0m96", "ManningBooks")
The Following table 
INSERT INTO Following VALUES
(
  "d0m96", 
  "ManningBooks" 
);
followed_user
followed_user
follower
follower
Figure 7.11
Storing follow 
data in the database
Licensed to   
196
CHAPTER 7
Building a Twitter clone
proc post*(database: Database, message: Message) =
if message.msg.len > 140:2
raise newException(ValueError, "Message has to be less than 140 characters.")
database.db.exec(sql"INSERT INTO Message VALUES (?, ?, ?);",
message.username, $message.time.toSeconds().int, message.msg)
proc follow*(database: Database, follower: User, user: User) =
database.db.exec(sql"INSERT INTO Following VALUES (?, ?);",
follower.username, user.username)
proc create*(database: Database, user: User) =
database.db.exec(sql"INSERT INTO User VALUES (?);", user.username)
The code in listing 7.13 is fairly straightforward, and the annotations explain the
important parts of the code. These procedures should work perfectly well, but you
should still test them. In order to do so, you’ll need a way to query for data.
 This gives us a good excuse to implement the procedures needed to get informa-
tion from the database. As before, let’s think about the actions that will prompt the
retrieval of data from the database.
 The primary way that the user will interact with Tweeter will be via its front page.
Initially, the front page will ask the user for their username, and Tweeter will need to
check whether that username has already been created. A procedure called findUser
will be defined to check whether a username exists in the database. This procedure
should return a new User object containing both the user’s username and a list of
users being followed. If the username doesn’t exist, an account for it will be created,
and the user will be logged in.
 At that point, the user will be shown a list of messages posted by the users that they
follow. A procedure called findMessages will take a list of users and return the mes-
sages that those users posted, in chronological order.
 Each of the messages shown to the user will contain a link to the profile of the user
who posted it. Once the user clicks that link, they’ll be shown messages posted only by
that user. The findMessages procedure will be flexible enough to be reused for this
purpose.
Listing 7.13
Implementing the post, follow, and create procedures
2 This won’t handle Unicode accurately, as len doesn’t return the number of Unicode characters in the string.
You may wish to look at the unicode module to fix this.
Inserts a row into the specified table. The question 
marks are replaced with the values passed in after 
the SQL statement. The exec procedure ensures that 
the values are escaped to prevent SQL injections.
Verifies that the message length isn’t 
greater than 140 characters. If it is, 
raises an exception.2
The time, which has type Time, is
converted into the number of
seconds since the UNIX epoch by
calling toSeconds. The float result is
then converted into an int.
Licensed to   
197
Storing data in a database
 Let’s define those two procedures. The following listing shows their definitions
and implementations.
import strutils
proc findUser*(database: Database, username: string, user: var User): bool =
let row = database.db.getRow(
sql"SELECT username FROM User WHERE username = ?;", username)
if row[0].len == 0: return false
else: user.username = row[0]
let following = database.db.getAllRows(
sql"SELECT followed_user FROM Following WHERE follower = ?;", username)
user.following = @[]
for row in following:
if row[0].len != 0:
user.following.add(row[0])
return true
proc findMessages*(database: Database, usernames: seq[string],
limit = 10): seq[Message] =
result = @[]
if usernames.len == 0: return
var whereClause = " WHERE "
for i in 0 .. 
198
CHAPTER 7
Building a Twitter clone
Add these procedures to your database.nim file. Make sure you also import the
strutils module, which defines parseInt.
 These procedures are significantly more complicated than those implemented in
listing 7.13. The findUser procedure makes a query to find the specified user, but it
then also makes another query to find who the user is following. The findMessages
procedure requires some string manipulation to build part of the SQL query because
the number of usernames passed into this procedure can vary. Once the WHERE clause
of the SQL query is built, the rest is fairly simple. The SQL query also contains two key-
words: the ORDER BY keyword instructs SQLite to sort the resulting messages based on
the time they were posted, and the LIMIT keyword ensures that only a certain number
of messages are returned. 
7.3.4
Testing the database
The database module is now ready to be tested. Let’s write some simple unit tests to
ensure that all the procedures in it are working correctly.
 You can start by creating a new directory called tests in Tweeter’s root directory.
Then, create a new file called database_test.nim in the tests directory. Type import
database into database_test.nim, and then try to compile it by executing nimble c
tests/database_test.nim.
 The compilation will fail with “Error: cannot open 'database'.” This is due to the
unfortunate fact that neither Nim nor Nimble has any way of finding the database
module. This module is hidden away in your src directory, so it can’t be found.
 To get around this, you’ll need to create a new file called database_test.nim.cfg in
the tests directory. Inside it, write --path:"../src". This will instruct the Nim com-
piler to look for modules in the src directory when compiling the database_test
module. Verify that the database_test.nim file now compiles.
 The test will need to create its own database instance so that it doesn’t overwrite
Tweeter’s database instance. Unfortunately, the code for setting up the database is in
the createDatabase module. You’re going to have to move the bulk of that code into
the database module so that database_test can use it. The new createDatabase.nim
file will be much smaller after you add the procedures shown in listing 7.15 to the
database module. Listing 7.16 shows the new createDatabase.nim implementation.
proc close*(database: Database) =
database.db.close()
proc setup*(database: Database) =
database.db.exec(sql"""
CREATE TABLE IF NOT EXISTS User(
username text PRIMARY KEY
);
""")
database.db.exec(sql"""
Listing 7.15
The setup and close procedures destined for database.nim
The close procedure closes the 
database and returns any allocated 
resources to the OS.
The setup procedure initializes the 
database with the User, Following, 
and Message tables.
Licensed to   
199
Storing data in a database
CREATE TABLE IF NOT EXISTS Following(
follower text,
followed_user text,
PRIMARY KEY (follower, followed_user),
FOREIGN KEY (follower) REFERENCES User(username),
FOREIGN KEY (followed_user) REFERENCES User(username)
);
""")
database.db.exec(sql"""
CREATE TABLE IF NOT EXISTS Message(
username text,
time integer,
msg text NOT NULL,
FOREIGN KEY (username) REFERENCES User(username)
);
""")
import database
var db = newDatabase()
db.setup()
echo("Database created successfully!")
db.close()
Add the code in listing 7.15 to database.nim, and replace the contents of createData-
base.nim with the code in listing 7.16.
 Now that this small reorganization of code is complete, you can start writing test
code in the database_test.nim file. The following listing shows a simple test of the
database module.
import database
import os, times
when isMainModule:
removeFile("tweeter_test.db")
var db = newDatabase("tweeter_test.db")
db.setup()
db.create(User(username: "d0m96"))
db.create(User(username: "nim_lang"))
db.post(Message(username: "nim_lang", time: getTime() - 4.seconds,
msg: "Hello Nim in Action readers"))
db.post(Message(username: "nim_lang", time: getTime(),
msg: "99.9% off Nim in Action for everyone, for the next minute only!"))
Listing 7.16
The new implementation of createDatabase.nim
Listing 7.17
A test of the database module
Removes the old test database
Creates a new 
tweeter_test.db database
Creates the tables in the SQLite database
Tests user creation
Posts two messages 4 seconds apart, 
with the first message posted in the 
past and the second in the present
Licensed to   
200
CHAPTER 7
Building a Twitter clone
var dom: User
doAssert db.findUser("d0m96", dom)
var nim: User
doAssert db.findUser("nim_lang", nim)
db.follow(dom, nim)
doAssert db.findUser("d0m96", dom)
let messages = db.findMessages(dom.following)
echo(messages)
doAssert(messages[0].msg == "99.9% off Nim in Action for everyone,
➥
for the next minute only!")
doAssert(messages[1].msg == "Hello Nim in Action readers")