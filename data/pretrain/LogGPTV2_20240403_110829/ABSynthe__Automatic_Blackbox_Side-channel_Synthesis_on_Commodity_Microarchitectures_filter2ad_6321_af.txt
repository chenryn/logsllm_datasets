increasing amount of noise (concurrent computation) to both
the target and the spy processes.
Platform
Skylake
Skylake
Skylake
Skylake
Skylake
Skylake
Skylake
Skylake
Target
ED25519
ED25519
ED25519
ED25519
ED25519
ED25519
ED25519
ED25519
Instr
DE1+N01
DE1+N02
DE1+N03
DE1+N04
DE1+N05
DE1+N06
DE1+N07
DE1+N08
Trials
7
7
7
7
7
7
7
7
Success
1.00
0.71
0.57
0.14
0.14
0.00
0.00
0.00
Med. BF (2N )
18.1
18.1
25.8
36.1
38.0
-
-
-
the interference process asks for from 0.1% to 30.6% in 7
steps, and execute the measurement, training and key recovery
procedures in each possible combination.
The results are visualized in Figure 15 with numbers in
Table V. In Figure 15 we see that only interfering with the spy
process has any effect, as this interferes with signal acquisition,
but
interfering with the target process does not have any
signiﬁcant effect, as the key recovery procedure is robust to
noisy insertions in the signal. We show the numbers in Table V,
where we interfere in steps with both the target and the spy
process in equal amounts in increasing steps. We see that
even minimal interference in the spy has an effect, and the
success-rate gradually decreases as more interference is added.
In summary, assuming the spy has complete control over its
process, ABSynthe can successfully recover the secret keys
even if the victim’s execution is noisy.
G. Secret-Dependent Data Accesses
To demonstrate that the ABSynthe analysis pipeline is ﬂex-
ible enough to distinguish secrets based on secret-dependent
data accesses, we brieﬂy forego our purely blackbox philos-
ophy (designed to target secret-dependent code accesses) and
integrate in ABSynthe an active component that speciﬁcally
targets different TLB data cache sets on the Skylake microar-
chitecture. We try all these measurement functions on all our
targets with ASLR disabled this time. In this experiment,
we seek to observe data accesses from the proﬁled secret-
dependent branches (hence making the data accesses secret-
dependent as well). This allows ABSynthe’s dynamic taint
analysis logic to ﬁnd explicit secret-dependent data accesses
(memory loads/stores with a tainted address) to extend the
scope of the analysis. Table VI presents our results.
Our results show that, purely by observing cache accesses
and having basic ground truth information, ABSynthe can
distinguish between secrets. ABSynthe’s performance is de-
pendent on the target and its cache set number.
As expected, for the side channel safe implementation of
EdDSA 25519 in libgcrypt 1.8.5, marked ED25519-secure in
the table, the f 1 score of at most 0.53 indicates ABSynthe
cannot distinguish between different secrets.
Fig. 16: DRAM bandwidth available to primary thread at-
tempting to do maximum rate memory reads, as a function
of number of competing physical cores trying to do the same.
Clearly, the DRAM bandwidth is already halved when two
cores are competing, and all bandwidth has to be shared
between cores.
VIII. DISCUSSION
A. Generalization
We designed ABSynthe to automate side-channel analysis,
useful both for software security analysts and CPU designers
in assessing side-channel leakage. The black box approach and
high degree of automation beneﬁt greatly from our focus on
(1) contention-based side channels, and (2) resources that are
shared between logical processors on a physical CPU core. We
see two avenues towards the generalization of ABSynthe.
Eviction-based attacks As explained earlier in this paper,
eviction-based attacks require reverse engineering of the inter-
nal state of the components involved, but this can be amenable
to automation. For example, for resources such as the L1
cache that are set associative, we could incorporate a high-
level model of their behavior in ABSynthe towards supporting
“greybox” synthesis of eviction-based attacks.
Cross-core components ABSynthe can generalize beyond
resources of a single core if we could extend our measurements
beyond the core. We note that such cross-core and even cross-
CPU components actually exist. As an example, Figure 16
shows that it is trivial to observe cross-CPU interference in
DRAM bandwidth. The key challenge is to target a victim
contending on DRAM accesses to ﬁnd exploitable signals.
Victim software with a sufﬁciently large working set (and
normally accessing DRAM) is an obvious (but restrictive)
candidate already at reach of ABSynthe. Using automatic
synthesis of eviction-based attacks to create (otherwise-absent)
contention on DRAM and other resources (at the cost of less
stealthy attacks) is a promising direction for future research.
B. Limitations
Some parts of ABSynthe can be extended in the future
to better support new software targets, architectures and key
recovery.
Software targets We assume that the target software spend a
signiﬁcant amount of its time with secret computation. While
15
0123competing cores010002000300040005000600070008000memory bandwidth available to main thread (MByte/s)TABLE VI: Classiﬁcation performance of ABSynthe when observing 16 different cache sets.
Target
GnuPG 2.2.17/gcrypt 1.6.3 25519
gcrypt 1.6.3 ECDSA P-256
gcrypt 1.6.3 EDDSA 25519
gcrypt 1.6.3 EDDSA 25519-hardened
gcrypt 1.6.3 RSA
gcrypt 1.8.5 ECDSA P-256
gcrypt 1.8.5 EDDSA 25519
gcrypt 1.8.5 EDDSA 25519-hardened
gcrypt 1.8.5 EDDSA 25519-secure
gcrypt 1.8.5 RSA
0
0.87
0.94
0.95
0.65
0.59
0.98
0.95
0.70
0.51
0.60
1
0.98
0.96
0.85
0.69
0.54
0.99
0.83
0.68
0.51
0.56
2
0.90
0.97
0.93
0.73
0.57
0.99
0.96
0.73
0.51
0.60
3
0.92
0.97
0.96
0.80
0.58
0.99
0.98
0.83
0.51
0.60
4
0.98
0.93
0.94
0.75
0.58
0.97
0.95
0.68
0.49
0.60
5
0.96
0.91
0.95
0.73
0.52
0.97
0.96
0.78
0.51
0.52
6
0.90
0.73
0.91
0.66
0.58
0.92
0.95
0.69
0.52
0.60
7
0.97
0.96
0.96
0.84
0.58
0.99
0.98
0.71
0.48
0.60
8
0.96
0.51
0.95
0.71
0.56
0.98
0.97
0.67
0.49
0.59
9
0.99
0.92
0.94
0.69
0.54
0.96
0.96
0.67
0.48
0.53
10
0.97
0.96
0.97
0.82
0.51
0.99
0.96
0.79
0.50
0.53
11
0.92
0.97
0.99
0.72
0.57
0.99
0.99
0.72
0.49
0.59
12
0.66
0.81
0.93
0.71
0.56
0.78
0.79
0.63
0.47
0.56
13
0.96
0.97
0.76
0.73
0.57
0.98
0.98
0.73
0.49
0.71
14
0.91
0.89
0.96
0.78
0.57
0.99
0.98
0.69
0.50
0.60
15
0.97
0.91
0.97
0.74
0.59
0.99
0.99
0.72
0.53
0.61
this is usually the case with cryptographic software as we
showed in this paper, it may not necessarily be the case for
other software targets. In those cases, an analyst may need to
manually annotate the target software. We further assume that
the secret key is loaded from the ﬁle system for our automated
taint analysis. This can easily be extended to other sources
of secret information that should be tainted (e.g., network
sockets).
Architectures ABSynthe requires the ISA deﬁnition in a
convenient format for building leakage maps for different
microarchitectures. While this was readily available for the
x86_64 [21], supporting new architectures in ABSynthe will
require convenient ISA deﬁnitions. Future work can extend
our x86_64 leakage maps to ARM using the ARM Machine
Readable Architecture (MRA) [28].
Key recovery As we showed in our evaluation, our LSTM
model achieves high F1 scores with non-cooperative victims
on different microarchitectures. We presented an example to