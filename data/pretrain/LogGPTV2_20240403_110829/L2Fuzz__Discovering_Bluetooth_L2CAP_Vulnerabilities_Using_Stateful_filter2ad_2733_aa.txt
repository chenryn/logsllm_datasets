title:L2Fuzz: Discovering Bluetooth L2CAP Vulnerabilities Using Stateful
Fuzz Testing
author:Haram Park and
Carlos Nkuba Kayembe and
Seunghoon Woo and
Heejo Lee
3
4
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
L2Fuzz: Discovering Bluetooth L2CAP
Vulnerabilities Using Stateful Fuzz Testing
Haram Park, Carlos Kayembe Nkuba, Seunghoon Woo, Heejo Lee∗
Korea University, {freehr94, carlosnkuba, seunghoonwoo, heejo}@korea.ac.kr
Abstract—Bluetooth
Basic Rate/Enhanced Data Rate
(BR/EDR) is a wireless technology used in billions of devices.
Recently, several Bluetooth fuzzing studies have been conducted
to detect vulnerabilities in Bluetooth devices, but they fall short
of effectively generating malformed packets. In this paper, we
propose L2FUZZ, a stateful
fuzzer to detect vulnerabilities
in Bluetooth BR/EDR Logical Link Control and Adaptation
Protocol (L2CAP) layer. By selecting valid commands for each
state and mutating only the core ﬁelds of packets, L2FUZZ
can generate valid malformed packets that are less likely to
be rejected by the target device. Our experimental results
conﬁrmed that: (1) L2FUZZ generates up to 46 times more
malformed packets with a much less packet rejection ratio
compared to the existing techniques, and (2) L2FUZZ detected
ﬁve zero-day vulnerabilities from eight real-world Bluetooth
devices.
Index Terms—Bluetooth, Fuzz Testing, Wireless Security.
I. INTRODUCTION
Bluetooth is a wireless communication technology that al-
lows users to exchange various data in a short range, including
Bluetooth Basic Rate/Enhanced Data Rate (BR/EDR) and
Bluetooth Low Energy (BLE). Owing to their convenience,
billions of devices have adopted Bluetooth technologies [1].
Because Bluetooth is an open standard, most vendors install
similar Bluetooth host stacks (i.e., software stack) in their
devices for interoperability among different vendors. This also
implies that it is easy for malicious users to craft wireless
attacks on Bluetooth devices, and even a single vulnerability
has the risk of being exploited in billions of devices.
To address such undesirable situations, several studies have
been conducted to detect unknown Bluetooth vulnerabilities.
However, existing studies are limited in their ability to perform
fuzz testing in various Bluetooth devices; they (1) required the
Bluetooth pairing process (e.g., Defensics [2]), (2) failed to
generate valid malicious packets (e.g., BFuzz [3]), (3) did not
consider state information (e.g., Bluetooth stack smasher [4]),
or (4) were inefﬁcient for testing various Bluetooth devices
(e.g., KNOB [5], BIAS [6], BlueMirror [7], BrakTooth [8]),
all of which impair the effectiveness of Bluetooth fuzzing in
terms of detecting critical vulnerabilities (see Section VI).
To overcome these shortcomings, we propose L2FUZZ, a
stateful fuzzer for Bluetooth host stacks, which targets the
Logical Link Control and Adaptation Protocol (L2CAP) layer.
Because all Bluetooth services use the L2CAP that is located
in the lowest layer, L2CAP was chosen for our study in order
to guarantee the root-of-trust of Bluetooth devices.
* Heejo Lee is the corresponding author.
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00043
343
L2FUZZ uses the following two key techniques: state guid-
ing and core ﬁeld mutating. Through state guiding, L2FUZZ
maps valid commands for each L2CAP state based on their
events, functions and actions. Here, the mapped commands
can be used for state transitions or to test valid attacks against
a speciﬁc state. Next, L2FUZZ mutates only the core (i.e.,
critical) ﬁelds of L2CAP packets, which are in charge of the
port and channel setting, through core ﬁeld mutating technique.
By mutating only core ﬁelds while not modifying other parts,
L2FUZZ can generate more valid test packets, resulting in
more efﬁcient detection of potential vulnerabilities.
When we applied L2FUZZ to the selected eight test devices,
L2FUZZ detected ﬁve zero-day vulnerabilities in three smart-
phones, one wireless earphone, and one laptop; we reported
all detected vulnerabilities to the corresponding vendors.
To demonstrate the effectiveness of L2FUZZ, we compared
it with existing Bluetooth fuzzing techniques [2]–[4]. To this
end, we devised two novel metrics suitable for evaluating
Bluetooth fuzzers: mutation efﬁciency and state coverage. The
mutation efﬁciency includes the number of error-prone test
packets that a fuzzer can generate, and the number of test
packets that are rejected by the target. The state coverage
represents the number of protocol states that a fuzzer can test.
From our experiments, we conﬁrmed that L2FUZZ outper-
formed existing Bluetooth fuzzing techniques [2]–[4]. Com-
pared with the existing techniques, L2Fuzz was able to: (1)
cover and test up to 10 (out of 19) more L2CAP states, (2)
generate up to 46 times more valid malformed packets, and
(3) signiﬁcantly reduce the probability that test packets would
be rejected on the target device (up to 60% reduction).
This paper makes the following three main contributions:
• We present L2FUZZ, a stateful fuzzer for the Bluetooth
host stack L2CAP layer. The key technical contributions
is generating valid packets that are not
likely to be
rejected by the target device using state guiding and core
ﬁeld mutating. The source code of L2FUZZ is available
at https://github.com/haramel/L2Fuzz.
• We devised two novel metrics that were suitable for eval-
uating Bluetooth fuzzers: mutation efﬁciency and state
coverage, which can be used even in an environment
where the target device is a black-box.
• When we applied L2FUZZ to eight Bluetooth devices, it
detected ﬁve zero-day vulnerabilities, including a denial-
of-service on Android devices and a crash on Apple
devices.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
II. BACKGROUND AND MOTIVATION
In this section, we ﬁrst introduce an overview of Bluetooth
BR/EDR 5.2, mainly focusing on L2CAP, and then discuss
the motivation behind the development of L2FUZZ.
A. Overview of Bluetooth BR/EDR and L2CAP
CLOSED
WAIT 
CONNECT
WAIT 
CONNECT 
RSP
WAIT 
CREATE
WAIT 
CREATE 
RSP
User
Host
(SW)
Controller
(FW)
Bluetooth Application
Serial Port Profile (SPP) / Application Interface
Object Exchange (OBEX)
Radio Frequency 
Communications (RFCOMM)
Service Discovery 
Protocol (SDP)
OPEN
Logical Link Control and Adaption Protocol (L2CAP)
Host Controller Interface (HCI)
Link Manager Protocol (LMP)
BR/EDR Physical Layer
Fig. 1: Illustration for Bluetooth protocol stack.
WAIT 
CONFIRM 
RSP
WAIT DIS 
CONNECT
WAIT 
CONFIG
WAIT SEND 
CONFIG
WAIT CONFIG 
REQ RSP
WAIT 
CONFIG RSP
WAIT 
CONFIG REQ
WAIT 
FINAL RSP
WAIT 
CONTROL 
IND
WAIT IND 
FINAL RSP
WAIT 
MOVE 
RSP
WAIT 
MOVE
WAIT 
MOVE 
CONFIRM
Fig. 2: Bluetooth 5.2 L2CAP state machine.
Bluetooth BR/EDR is a wireless technology for short-range
communication [9]. A Bluetooth network consists of a master
device (i.e., initiator) and a slave device (i.e., acceptor). Both
devices use a Bluetooth protocol stack, which consists of a
controller stack (i.e., ﬁrmware) and a host stack (i.e., software),
for communication (see Figure 1). Bluetooth BR/EDR is also
referred to as Bluetooth in this paper. To use the service
provided by the Bluetooth application, the master and slave
devices should start the pairing process using their controller
stack. Then, both devices create a connection between the
L2CAP layer, which is the lowest layer of the host stack, en-
abling the connection between the upper layers. Since L2CAP
is the lowest layer of the host stack, secure use of higher-
layer protocols in Bluetooth applications requires a security
assessment of L2CAP to ensure a root of trust.
Introduction to L2CAP. L2CAP is a core and essential
protocol in Bluetooth because all Bluetooth applications re-
quire an L2CAP connection between the master and slave
devices [10], [11]. To use Bluetooth applications, the master
must know the service ports and channels of the slave services,
which are handled by L2CAP. For example, suppose we intend
to use a Bluetooth ﬁle transfer service. During this process,
the master and slave devices ﬁrst exchange an encrypted key
using the controller stack. Thereafter, they share service ports
and channels through the L2CAP layer. Based on these ports
and channels, they create Radio Frequency Communications
(RFCOMM) and Object Exchange (OBEX) connections to use
ﬁle transfer applications.
L2CAP states. L2CAP is based on the concept of channels
and consists of 19 states in Bluetooth 5.2 (see Figure 2). These
states cover various scenarios that can occur during the L2CAP
communication process. Each state has event and action for
the state transition. To transit from the current state to the
next state, a speciﬁc request should be sent to the device (i.e.,
HCI Packet
L2CAP Header
*L2CAP Payload
Data Fields
(8 + n) bytes
L2CAP
(4 + n) bytes
Payload
n bytes