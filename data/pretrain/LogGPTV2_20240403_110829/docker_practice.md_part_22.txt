$ etcdctl set testkey hello
hello
$ etcdctl update testkey world
world
当键不存在时，则会报错。例如
$ etcdctl update testkey2 world
Error: 100: Key not found (/testkey2) [1]
支持的选项为
--ttl '0' 超时时间（单位为秒），不配置（默认为 0）则永不超时
rm
删除某个键值。例如
$ etcdctl rm testkey
当键不存在时，则会报错。例如
$ etcdctl rm testkey2
Error: 100: Key not found (/testkey2) [8]
支持的选项为
--dir 如果键是个空目录或者键值对则删除
--recursive 删除目录和所有子键
--with-value 检查现有的值是否匹配
--with-index '0' 检查现有的 index 是否匹配
mk
如果给定的键不存在，则创建一个新的键值。例如
272
使用 etcdctl
$ etcdctl mk /testdir/testkey "Hello world"
Hello world
当键存在的时候，执行该命令会报错，例如
$ etcdctl set testkey "Hello world"
Hello world
$ ./etcdctl mk testkey "Hello world"
Error: 105: Key already exists (/testkey) [2]
支持的选项为
--ttl '0' 超时时间（单位为秒），不配置（默认为 0）则永不超时
mkdir
如果给定的键目录不存在，则创建一个新的键目录。例如
$ etcdctl mkdir testdir
当键目录存在的时候，执行该命令会报错，例如
$ etcdctl mkdir testdir
$ etcdctl mkdir testdir
Error: 105: Key already exists (/testdir) [7]
支持的选项为
--ttl '0' 超时时间（单位为秒），不配置（默认为 0）则永不超时
setdir
创建一个键目录，无论存在与否。
支持的选项为
273
使用 etcdctl
--ttl '0' 超时时间（单位为秒），不配置（默认为 0）则永不超时
updatedir
更新一个已经存在的目录。 支持的选项为
--ttl '0' 超时时间（单位为秒），不配置（默认为 0）则永不超时
rmdir
删除一个空目录，或者键值对。
若目录不空，会报错
$ etcdctl set /dir/testkey hi
hi
$ etcdctl rmdir /dir
Error: 108: Directory not empty (/dir) [13]
ls
列出目录（默认为根目录）下的键或者子目录，默认不显示子目录中内容。
例如
$ ./etcdctl set testkey 'hi'
hi
$ ./etcdctl set dir/test 'hello'
hello
$ ./etcdctl ls
/testkey
/dir
$ ./etcdctl ls dir
/dir/test
支持的选项包括
274
使用 etcdctl
--sort 将输出结果排序
--recursive 如果目录下有子目录，则递归输出其中的内容
-p 对于输出为目录，在最后添加 `/` 进行区分
非数据库操作
backup
备份 etcd 的数据。
支持的选项包括
--data-dir etcd 的数据目录
--backup-dir 备份到指定路径
watch
监测一个键值的变化，一旦键值发生更新，就会输出最新的值并退出。
例如，用户更新 testkey 键值为 Hello world。
$ etcdctl watch testkey
Hello world
支持的选项包括
--forever 一直监测，直到用户按 `CTRL+C` 退出
--after-index '0' 在指定 index 之前一直监测
--recursive 返回所有的键值和子键值
exec-watch
监测一个键值的变化，一旦键值发生更新，就执行给定命令。
例如，用户更新 testkey 键值。
275
使用 etcdctl
$etcdctl exec-watch testkey -- sh -c 'ls'
default.etcd
Documentation
etcd
etcdctl
etcd-migrate
README-etcdctl.md
README.md
支持的选项包括
--after-index '0' 在指定 index 之前一直监测
--recursive 返回所有的键值和子键值
member
通过 list、add、remove 命令列出、添加、删除 etcd 实例到 etcd 集群中。
例如本地启动一个 etcd 服务实例后，可以用如下命令进行查看。
$ etcdctl member list
ce2a822cea30bfca: name=default peerURLs=http://localhost:2380,ht
tp://localhost:7001 clientURLs=http://localhost:2379,http://loca
lhost:4001
命令选项
--debug 输出 cURL 命令，显示执行命令的时候发起的请求
--no-sync 发出请求之前不同步集群信息
--output, -o 'simple' 输出内容的格式 ( simple 为原始信息， json
为进行json格式解码，易读性好一些)
--peers, -C 指定集群中的同伴信息，用逗号隔开 (默认为:
"127.0.0.1:4001")
--cert-file HTTPS 下客户端使用的 SSL 证书文件
--key-file HTTPS 下客户端使用的 SSL 密钥文件
--ca-file 服务端使用 HTTPS 时，使用 CA 文件进行验证
276
使用 etcdctl
--help, -h 显示帮助命令信息
--version, -v 打印版本信息
277
CoreOS 项目
CoreOS
CoreOS的设计是为你提供能够像谷歌一样的大型互联网公司一样的基础设施管理
能力来动态扩展和管理的计算能力。
CoreOS的安装文件和运行依赖非常小,它提供了精简的Linux系统。它使用Linux容
器在更高的抽象层来管理你的服务，而不是通过常规的YUM和APT来安装包。
同时，CoreOS几乎可以运行在任何平台：Vagrant, Amazon EC2, QEMU/KVM,
VMware 和 OpenStack 等等，甚至你所使用的硬件环境。
278
简介
CoreOS介绍
提起Docker，我们不得不提的就是CoreOS.
CoreOS对Docker甚至容器技术的发展都带来了巨大的推动作用。
CoreOS是一种支持大规模服务部署的Linux系统。
CoreOS使得在基于最小化的现代操作系统上构建规模化的计算仓库成为了可能。
CoreOS是一个新的Linux发行版。通过重构，CoreOS提供了运行现代基础设施的
特性。
CoreOS的这些策略和架构允许其它公司像Google，Facebook和Twitter那样高弹性
的运行自己得服务。
CoreOS遵循Apache 2.0协议并且可以运行在现有的硬件或云提供商之上。
CoreOS特性
一个最小化操作系统
CoreOS被设计成一个来构建你平台的最小化的现代操作系统。
它比现有的Linux安装平均节省40%的RAM（大约114M）并允许从 PXE/iPXE 非常
快速的启动。
无痛更新
利用主动和被动双分区方案来更新OS，使用分区作为一个单元而不是一个包一个
包得更新。
这使得每次更新变得快速，可靠，而且很容易回滚。
Docker容器
279
简介
应用作为Docker容器运行在CoreOS上。容器以包得形式提供最大得灵活性并且可
以在几毫秒启动。
支持集群
CoreOS可以在一个机器上很好地运行，但是它被设计用来搭建集群。
可以通过fleet很容易得使应用容器部署在多台机器上并且通过服务发现把他们连接
在一起。
分布式系统工具
内置诸如分布式锁和主选举等原生工具用来构建大规模分布式系统得构建模块。
服务发现
很容易定位服务在集群的那里运行并当发生变化时进行通知。它是复杂高动态集群
必不可少的。在CoreOS中构建高可用和自动故障负载。
280
工具
CoreOS工具介绍
CoreOS提供了三大工具，它们分别是：服务发现，容器管理和进程管理。
使用etcd服务发现
CoreOS的第一个重要组件就是使用etcd来实现的服务发现。
如果你使用默认的样例cloud-config文件，那么etcd会在启动时自动运行。
例如：
#cloud-config
hostname: coreos0
ssh_authorized_keys:
- ssh-rsa AAAA...
coreos:
units:
- name: etcd.service
command: start
- name: fleet.service
command: start
etcd:
name: coreos0
discovery: https://discovery.etcd.io/
配置文件里有一个token，获取它可以通过如下方式：
访问地址
https://discovery.etcd.io/new
你将会获取一个包含你得teoken得URL。
通过Docker进行容器管理
281
工具
第二个组件就是docker，它用来运行你的代码和应用。
每一个CoreOS的机器上都安装了它，具体使用请参考本书其他章节。
使用fleet进行进程管理
第三个CoreOS组件是fleet。
它是集群的分布式初始化系统。你应该使用fleet来管理你的docker容器的生命周
期。
Fleet通过接受systemd单元文件来工作，同时在你集群的机器上通过单元文件中编
写的偏好来对它们进行调度。
首先，让我们构建一个简单的可以运行docker容器的systemd单元。把这个文件保
存在home目录并命名为hello.service：
hello.service
[Unit]
Description=My Service
After=docker.service
[Service]
TimeoutStartSec=0
ExecStartPre=-/usr/bin/docker kill hello
ExecStartPre=-/usr/bin/docker rm hello
ExecStartPre=/usr/bin/docker pull busybox
ExecStart=/usr/bin/docker run --name hello busybox /bin/sh -c "w
hile true; do echo Hello World; sleep 1; done"
ExecStop=/usr/bin/docker stop hello
然后，读取并启动这个单元：
$ fleetctl load hello.service
=> Unit hello.service loaded on 8145ebb7.../172.17.8.105
$ fleetctl start hello.service
=> Unit hello.service launched on 8145ebb7.../172.17.8.105
282
工具
这样，你的容器将在集群里被启动。
下面我们查看下它的状态：
$ fleetctl status hello.service
● hello.service - My Service
Loaded: loaded (/run/fleet/units/hello.service; linked-runtim
e)
Active: active (running) since Wed 2014-06-04 19:04:13 UTC; 4
4s ago
Main PID: 27503 (bash)
CGroup: /system.slice/hello.service
├─27503 /bin/bash -c /usr/bin/docker start -a hello |
| /usr/bin/docker run --name hello busybox /bin/sh -c "while tru
e; do echo Hello World; sleep 1; done"
└─27509 /usr/bin/docker run --name hello busybox /bin
/sh -c while true; do echo Hello World; sleep 1; done
Jun 04 19:04:57 core-01 bash[27503]: Hello World
..snip...
Jun 04 19:05:06 core-01 bash[27503]: Hello World
我们可以停止容器：
fleetctl destroy hello.service
至此，就是CoreOS提供的三大工具。
283
快速搭建CoreOS集群
快速搭建CoreOS集群
在这里我们要搭建一个集群环境，毕竟单机环境没有什么挑战不是？
然后为了在你的电脑运行一个集群环境，我们使用Vagrant。
Vagrant的使用这里不再阐述，请自行学习
如果你第一次接触CoreOS这样的分布式平台，运行一个集群看起来好像一个很复
杂的任务，这里我们给你展示在本地快速搭建一个CoreOS集群环境是多么的容
易。
准备工作
首先要确认在你本地的机器上已经安装了最新版本的Virtualbox, Vagrant 和 git。
这是我们可以在本地模拟集群环境的前提条件，如果你已经拥有，请继续，否则自
行搜索学习。
配置工作
从CoreOS官方代码库获取基本配置，并进行修改
首先，获取模板配置文件
git clone https://github.com/coreos/coreos-vagrant
cd coreos-vagrant
cp user-data.sample user-data