            }
            else if ( addr > 0x8C )
            {
              if ( addr == 144 )
              {
                if ( !(opaque->dma.cmd & 1) )
                  opaque->dma.cnt = value;          // 144 set cnt
              }
              else if ( addr == 152 && value & 1 && !(opaque->dma.cmd & 1) )
              {
                opaque->dma.cmd = value;            // 152 set cmd
                v7 = qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL_0);
                timer_mod(
                  &opaque->dma_timer,
                  ((signed __int64)((unsigned __int128)(0x431BDE82D7B634DBLL * (signed __int128)v7) >> 64) >> 18)      //trigger timer
                - (v7 >> 63)
                + 100);
              }
            }
            ...
            else if ( addr == 136 && !(opaque->dma.cmd & 1) )
            {
              opaque->dma.dst = value;              // 136 set dst
            }
          }
         ...
    }
关键操作包括：
  1. 当`addr`为`0x80`的时候，将`value`赋值给`dma.src`。
  2. 当`addr`为`144`的时候，将`value`赋值给`dma.cnt`。
  3. 当`addr`为`152`的时候，将`value`赋值给`dma.cmd`，并触发timer。
  4. 当`addr`为`136`的时候，将`value`赋值给`dma.dst`。
可以看到`hitb_mmio_write`函数基本上是通过`addr`将设备结构体中的`dma`字段赋值，`dma`的定义为：
    00000000 dma_state       struc ; (sizeof=0x20, align=0x8, copyof_1491)
    00000000                                         ; XREF: HitbState/r
    00000000 src             dq ?
    00000008 dst             dq ?
    00000010 cnt             dq ?
    00000018 cmd             dq ?
    00000020 dma_state       ends
再去看timer触发之后的操作，即`hitb_dma_timer`函数：
    void __fastcall hitb_dma_timer(HitbState *opaque)
    {
      dma_addr_t cmd; // rax
      __int64 idx; // rdx
      uint8_t *addr; // rsi
      dma_addr_t v4; // rax
      dma_addr_t v5; // rdx
      uint8_t *v6; // rbp
      uint8_t *v7; // rbp
      cmd = opaque->dma.cmd;
      if ( cmd & 1 )
      {
        if ( cmd & 2 )
        {
          idx = (unsigned int)(LODWORD(opaque->dma.src) - 0x40000);
          if ( cmd & 4 )
          {
            v7 = (uint8_t *)&opaque->dma_buf[idx];
            ((void (__fastcall *)(uint8_t *, _QWORD))opaque->enc)(v7, LODWORD(opaque->dma.cnt));
            addr = v7;
          }
          else
          {
            addr = (uint8_t *)&opaque->dma_buf[idx];
          }
          cpu_physical_memory_rw(opaque->dma.dst, addr, opaque->dma.cnt, 1);
          v4 = opaque->dma.cmd;
          v5 = opaque->dma.cmd & 4;
        }
        else
        {
          v6 = (uint8_t *)&opaque[0xFFFFFFDBLL].dma_buf[(unsigned int)opaque->dma.dst + 0x510];
          LODWORD(addr) = (_DWORD)opaque + opaque->dma.dst - 0x40000 + 0xBB8;
          cpu_physical_memory_rw(opaque->dma.src, v6, opaque->dma.cnt, 0);
          v4 = opaque->dma.cmd;
          v5 = opaque->dma.cmd & 4;
         ...
    }
可以看到主要操作包含三部分：
  1. 当dma.cmd为`2|1`时，会将`dma.src`减`0x40000`作为索引`i`，然后将数据从`dma_buf[i]`拷贝利用函数`cpu_physical_memory_rw`拷贝至物理地址`dma.dst`中，拷贝长度为`dma.cnt`。
  2. 当dma.cmd为`4|2|1`时，会将`dma.dst`减`0x40000`作为索引`i`，然后将起始地址为`dma_buf[i]`，长度为`dma.cnt`的数据利用利用`opaque->enc`函数加密后，再调用函数`cpu_physical_memory_rw`拷贝至物理地址`opaque->dma.dst`中。
  3. 当dma.cmd为`0|1`时，调用`cpu_physical_memory_rw`将物理地址中为`dma.dst`，长度为`dma.cnt`，拷贝到`dma.dst`减`0x40000`作为索引`i`，目标地址为`dma_buf[i]`的空间中。
到这里基本上可以看出这个设备的功能，主要是实现了一个`dma`机制。DMA(Direct Memory Access，直接内存存取)
是所有现代电脑的重要特色，它允许不同速度的硬件装置来沟通，而不需要依赖于 CPU 的大量中断负载。DMA
传输将数据从一个地址空间复制到另外一个地址空间。当CPU 初始化这个传输动作，传输动作本身是由 DMA 控制器来实行和完成。
即首先通过访问mmio地址与值（`addr`与`value`），在`hitb_mmio_write`函数中设置好`dma`中的相关值（`src`、`dst`以及`cmd`)。当需要`dma`传输数据时，设置`addr`为152，就会触发时钟中断，由另一个线程去处理时钟中断。
时钟中断调用`hitb_dma_timer`，该函数根据`dma.cmd`的不同调用`cpu_physical_memory_rw`函数将数据从物理地址拷贝到`dma_buf`中或从`dma_buf`拷贝到物理地址中。
功能分析完毕，漏洞在哪儿呢？我们可以看到`hitb_dma_timer`中拷贝数据时`dma_buf`中的索引是可控的，且没有限制。因此我们可以通过设置其相应的值导致越界读写，读写的数据长度也是可控的`dma.cnt`。而`dma_buf`的大小是有限的（`4096`），所以当我们的索引大于4096的时候就会发生越界读写，造成非预期结果。
## 利用
整个利用流程包括：
  1. 首先是越界读的内容，往`dma_buf`往后看到了`enc`指针，可以读取该指针的值以实现地址泄露。泄露地址后根据偏移，可以得到程序基址，然后计算得到`system plt`地址。
  2. 将参数`cat /root/flag`写入到`buf_buf`中。
  3. 其次是越界写的内容，我们可以将`system plt`地址写入到`enc`指针，最后触发`enc`函数实现`system`函数的调用，实现`system("cat /root/flag")`。
需要指出的一点是`cpu_physical_memory_rw`是使用的物理地址作为源地址或目标地址，因此我们需要先申请一段内存空间，并将其转换至其物理地址。虚拟地址转换到物理地址转换在前面[文章](https://ray-cp.github.io/archivers/qemu-pwn-basic-knowledge#qemu概述)也描述过，可以通过读取
`/proc/$pid/pagemap`实现转换。
### 动态调试
我一开始也尝试往启动脚本中加入`-netdev
user,id=net0,hostfwd=tcp::5555-:22`来实现ssh的端口转发，然后将exp通过scp传上去。但是结果失败了，只能想其它办法。
因为这是使用`cpio`作为文件系统的，所以可以先将该文件系统解压，然后将exp放入其中，最后再启动虚拟机。
首先是解压文件：
    1. gunzip  XXX.cpio.gz
    2. cpio -idmv  ../rootfs.cpio
为了方便调试可以先`sudo gdb ./qemu-system-x86_64`调试进程，下好断点后再用下面的命令启动虚拟机：
    pwndbg> r -initrd ./rootfs.cpio -kernel ./vmlinuz-4.8.0-52-generic -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' -enable-kvm -monitor /dev/null -m 64M --nographic  -L ./dependency/usr/local/share/qemu -L pc-bios -device hitb,id=vda
再提一句，直接在gdb里面最后执行system起一个新进程的时候可能会报下面的错误。不要以为exp没写对，要是看到了执行到system并且参数也对了，不用gdb调试，直接起虚拟机，再执行一遍exp，就可以看到成功逃逸了。
    # [New process 4940]
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    process 4940 is executing new program: /bin/dash
    /build/gdb-JPMZNV/gdb-8.1/gdb/breakpoint.c:13230: internal-error: void delete_breakpoint(breakpoint*): Assertion `bpt != NULL' failed.
    A problem internal to GDB has been detected,
    further debugging may prove unreliable.
    This is a bug, please report it.  For instructions, see:
    .
    [1]    4926 abort      sudo gdb ./qemu-system-x86_64
## 小结
其实对于qemu的timer以及dma都还不太清楚，后面也还需要再学习。学习qemu
pci设备也可以看qemu的`edu`设备：[edu.c](https://github.com/qemu/qemu/blob/master/hw/misc/edu.c)
相关文件以及脚本[链接](https://github.com/ray-cp/vm-escape/tree/master/qemu-escape/hitb-gsec-2017-babyqemu)
## 参考链接
  1. [HITB GSEC 2017: babyqemu](https://kitctf.de/writeups/hitb2017/babyqemu)
  2. [DMA（直接存储器访问）](https://baike.baidu.com/item/DMA/2385376?fr=aladdin)
  3. [QEMU timer模块分析](https://rickylss.github.io/qemu/2019/05/20/qemu-timer.html)
  4. [edu.c](https://github.com/qemu/qemu/blob/master/hw/misc/edu.c)