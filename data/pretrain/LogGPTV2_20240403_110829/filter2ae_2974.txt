### 作者：LoRexxar
**原文链接：** [原文链接]

随着互联网技术的不断发展，跨站脚本攻击（XSS）已成为一个不容忽视的安全漏洞。攻防双方的技术不断进化，因此内容安全策略（CSP）作为一种防御机制应运而生。CSP基于白名单机制建立，原本被认为是抵御XSS的有效手段。然而，事实并非如此简单。此前，我曾撰写过一篇关于CSP的文章（[我的CSP科普文章](#)），其中探讨了一些绕过CSP的方法。最近，在阅读了知道创宇的一篇文章后（[链接](https://xianzhi.aliyun.com/forum/read/472.html)），我对这一问题有了新的见解。

在之前的文中，我主要介绍了两种攻击手段：

1. **script-src 'self' 'unsafe-inline'**

   在许多大型网站中，由于存在大量内联脚本，导致CSP难以维护。在这种情况下，我们可以利用`script-src 'self' 'unsafe-inline'`进行攻击。尽管CSP的核心原则之一是同源策略，即禁止向外部域发送请求，但攻击者可以通过站内信等方式将数据发送到同源下的某个可接收信息的地方，从而获取敏感信息。

2. **Firefox与Chrome的不同安全性**

   Firefox在安全性方面一直领先于Chrome，这导致了一种仅适用于Chrome的特殊攻击方式。我在之前的文章中提到，这种攻击可以构成CSRF（跨站请求伪造）。尽管`<link>`标签本质上是一个HTML标签，无法直接用于盗取Cookie，但如果存在一个可以构造`<script>`标签的点，并且无法通过CSP向外网发送请求，我们可以通过结合多种技术来绕过CSP。

### 新的解决办法

知道创宇的文章提出了一种新的方法，结合了上述两种攻击手段，成功绕过了CSP。具体来说，这种方法通过`<link>`标签发送请求，同时利用`<script>`标签执行恶意代码。以下是具体的实例图示：

- 直接请求被CSP拦截：
  ![直接请求被拦截](#)

- 通过`<link>`标签成功发送请求：
  ![通过<link>标签发送请求成功](#)

- 成功接收到了响应：
  ![成功收到响应](#)

通过这种方式，攻击者成功绕过了CSP的限制，实现了对目标网站的攻击。

希望这篇文章能够帮助大家更好地理解CSP及其绕过方法，并提高系统的安全性。