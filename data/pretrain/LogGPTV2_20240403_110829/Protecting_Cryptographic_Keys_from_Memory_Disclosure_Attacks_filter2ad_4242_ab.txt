### Analysis of Memory Disclosure Vulnerabilities in Cryptographic Keys

#### Experimental Results for OpenSSH and Apache HTTP Server

**OpenSSH Server:**
- **Figure 2(a)**: This figure illustrates the average number of private keys found in the disclosed memory, with the number of connections on the x-axis.
- **Figure 2(b)**: This figure shows the success rate of attacks, defined as the ratio of successful attacks to the total number of 20 attacks, with respect to the number of connections. The results indicate that an attack almost always succeeds, and the duration of each attack is less than one minute.

**Apache HTTP Server:**
- **Figure 2(c)**: This figure presents the average (over 20 attacks) number of private keys found in the disclosed memory, with the number of connections on the x-axis.
- **Figure 2(d)**: This figure displays the success rate of attacks, which clearly indicates that an attack always succeeds when 30 or more connections are established. Similarly, the duration of each attack is less than one minute.

**Summary:**
Our experiments demonstrate that cryptographic keys can be easily compromised by attacks exploiting memory disclosure vulnerabilities. Given the high success rate and rapid execution time, we hypothesize that copies of the cryptographic keys may be flooding the memory to a significant extent. This hypothesis motivates a detailed examination in Section 3.

### Understanding the Attacks

**Supporting Tool: Locating Cryptographic Keys in Memory**
To better understand the attacks, we developed a software tool to capture "snapshots" of memory and track information such as which processes have access to memory pages containing copies of private keys. The tool is implemented as a loadable kernel module (LKM) with approximately 260 lines of C code. Detailed code implementation is provided in the full version of this paper [13]. In our experiments, the tool took about 5 seconds to scan 256MB of memory.

**Experimental Setup: OpenSSH Server**
Using the developed tool, we conducted another experiment with the same hardware and software settings as in the previous experiments, but with the operating system replaced by Gentoo Linux with a 2.6.16.1 Linux kernel. The purpose was to validate whether the suspected phenomenon persists in newer operating systems. Notably, these new experiments were run with root privileges, unlike the previous attack experiments.

**Experiment Timeline:**
- **Time t=0**: The simulation starts without the OpenSSH server running.
- **Time t=2**: The OpenSSH server is started using the command `/etc/init.d/sshd start`.
- **Time t=6**: The first client machine begins issuing SSH requests and maintains 8 concurrent scp transfers, each lasting about 4 seconds.
- **Time t=10**: The second client machine initiates an additional 8 concurrent scp transfers, bringing the total number of concurrent connections to 16.
- **Time t=14**: The first client machine stops all file transfers, reducing the total number of concurrent file transfers to 8.
- **Time t=18**: The second client machine stops all file transfers, ceasing all network traffic.
- **Time t=22**: The OpenSSH server is stopped using the command `/etc/init.d/sshd stop`.
- **Time t=29**: The experiment concludes.

**Results:**
The outputs of the LKM are plotted in Figures 3(a) and 3(b), showing two different perspectives with time on the x-axis:
- **Figure 3(a)**: Locations of OpenSSH private RSA keys in memory versus time.
- **Figure 3(b)**: Number of OpenSSH private RSA key matches in memory versus time.

These figures provide insights into the behavior of cryptographic keys in memory over time, helping to understand the nature and extent of the vulnerability.