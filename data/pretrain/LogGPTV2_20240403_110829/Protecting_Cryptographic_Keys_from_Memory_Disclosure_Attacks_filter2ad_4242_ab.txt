found in the disclosed memory with respect to the number
of connections (the x-axis). From a different perspective,
Figure 2(b) shows the success rate of attacks (i.e., the rate
of the number of successful attacks over the total number of
20 attacks) with respect to the number of connections (the
x-axis). It is clear that an attack almost always succeeds.
Moreover, an attack took less than 1 minute.
The case of Apache HTTP server: Figure 2(c) shows
the average (over 20 attacks) number of private keys found
in the disclosed memory with respect to the number of con-
nections (the x-axis). Figure 2(d) shows the success rate of
attacks, which clearly states that an attack always succeeds
when 30 or more connections are established. In this case,
an attack took less than 1 minute.
In summary, our experiments showed that cryptographic
keys can be easily compromised by attacks that exploit
memory disclosure vulnerabilities. Since the attacks are so
powerful, we suspect that copies of the cryptographic keys
were somehow ﬂooding the memory to some extent. This
motivates our thorough examination in Section 3.
3 Understanding the Attacks
Supporting tool: locating cryptographic keys in mem-
ory. In order to understand the attacks, we needed a tool
to capture the “snapshots” of memory, and to bookkeep in-
formation such as “which processes have access to which
memory pages that contain copies of private keys”. We de-
veloped a software tool for this purpose. The C code of our
tool is about 260 lines, and is implemented as a loadable
kernel module (LKM). The detail of the code is deferred to
the full version of this paper [13]. In our experiments, it
took about 5 seconds to scan the 256MB memory.
Understanding the attacks: the case of OpenSSH server.
Equipped with our software tool, we conducted another ex-
periment with the same hardware and software setting as in
our experiments mentioned above, except that the operat-
ing system was replaced by Gentoo Linux with a 2.6.16.1
Linux kernel. The intent of experimenting with a newer
version of operating system, which was not known to be
subject to the afore-mentioned two vulnerabilities, was to
validate whether the suspected phenomenon is still relevant
in newer operating systems. Note that the new experiments
are run with the root privilege, whereas the above attack ex-
periments are not. Speciﬁcally, we let two other machines
act as clients for issuing SSH requests to the server via a
100Mb/s switch network. We wrote a Perl script to auto-
matically trigger events at the following predeﬁned points
in time (unit: 2 minutes).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:07 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Average OpenSSH RSA Private Keys Found Per Run
OpenSSH RSA Private Key Disclosure Rate
Average Apache RSA Private Keys Found Per Run
Apache RSA Private Key Disclosure Rate
l
i
d
e
s
o
c
s
D
s
y
e
K
e
t
a
v
i
r
P
A
S
R
f
o
r
e
b
m
u
N
e
g
a
r
e
v
A
 35
 30
 25
 20
 15
 10
 5
 0
 0
"./data/plotssh-orig-totalexploit.dat"
 20
 40
 60
 80
 100
 120
Total Connections
l
e
t
a
R
e
r
u
s
o
c
s
D
y
e
K
e
t
a
v
i
r
i
P
A
S
R
H
S
S
n
e
p
O
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 20
 40
 60
 80
 100
 120
Total Connections
"./data/plotssh-orig-freqexploit.dat"
s
y
e
K
e
t
a
v
i
r
P
A
S
R
e
h
c
a
p
A
f
o
r
e
b
u
N
e
g
a
r
e
v
A
 70
 60
 50
 40
 30
 20
 10
 0
 0
"./data/plotapache-orig-totalexploit.dat"
"./data/plotapache-orig-freqexploit.dat"
l
e
t
a
R
e
r
u
s
o
c
s
D
y
e
K
e
t
a
v
i
r
i
P
A
S
R
e
h
c
a
p
A
 20
 40
 60
 80
 100
 120
Total Connections
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 20
 40
 60
 80
 100
 120
Total Connections
(a) OpenSSH: # of key copies found
(b) OpenSSH: success rate of attacks
(c) Apache: # of key copies found
(d) Apache: success rate of attacks
Figure 2. OpenSSH vs. Apache with respect to the vulnerability reported in [10]
(cid:127) Time t=0: The simulation is started without OpenSSH
running.
(cid:127) Time t=2: The OpenSSH server is started via the com-
mand /etc/init.d/sshd start.
(cid:127) Time t=6: The ﬁrst client machine begins issuing SSH
requests and maintains 8 concurrent scp transfers.
Each transfer lasts about 4 seconds.
(cid:127) Time t=10: The second client machine initiates an ad-
ditional 8 concurrent scp transfers. This brings the
number of concurrent connections to 16 in total.
(cid:127) Time t=14: The ﬁrst client machine stops all ﬁle trans-
fers. This reduces the total number of concurrent ﬁle
transfers to 8.
(cid:127) Time t=18: The second client machine stops all ﬁle
transfers, and thus all network trafﬁc ceased.
(cid:127) Time t=22: The OpenSSH server is stopped via the
command /etc/init.d/sshd stop.
(cid:127) Time t=29: The experiment is ﬁnished.
Corresponding to the above events, outputs of the LKM
are plotted in Figures 3(a) and 3(b) from two different per-
spectives. Both pictures have the time as the x-axis.
Locations Of OpenSSH Private RSA Keys In Memory Versus Time
Number Of OpenSSH Private RSA Key Matches In Memory Versus Time
256MB
196MB
128MB
64MB
n
o
i
t
a
c
o
L
y
r
o
m
e
M
i
l
a
c
s
y
h
P
 120
 100
 80
 60
 40
 20
s
e
h
c
t
a
M
y
e
K
e
t
a
v
i
r
P
r
e
b
m
u
N
f
O
0
2
6
10
14
18
22
Time Elapsed Since Start Of Simulation
 0
0
2
6
10
14
18
22
Time Elapsed Since Start Of Simulation
(a) Key locations in memory