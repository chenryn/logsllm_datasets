"CAPTURE" : {
"A" : "0.value"
},
"TYPE" : "WEB",
"BIND" : {
"URL" : "www.facebook.com/ajax/ufi/add_comment.php",
"METHOD" : "POST",
"PARAMS" : {
"comment_text" : "A"
}
}
}
9
speciﬁc information to correctly identify whether the input will
be delivering to the speciﬁed application. For correctly ﬁguring
out the details from an input receiving application, we use
the tree-structure information of UI, in addition to a simple
indicator such as the name of the window for stand-alone
apps, or domain name of currently visiting page URL in web-
apps. Example 1 shows how the signature is constructed to
detect a Windows Live Mail application. In the compose view
of the application, its window name is always ATH_Note,
so the WINDOW ﬁeld indicates this information. The sub-
components in the UI tree-structure are – starting from the
event receiving object – a button named “Send this message
now”, text edit boxes for the ‘To’ and ‘Subject’ ﬁelds, and a
content pane for the e-mail message text. Figure 4 illustrates
how this tree-structure is formed in UIAutomation. Note that
under the COND region, all of the conditions are listed. For
internal ﬁelds, the number indicates the relative distance from
an event receiving object as siblings on the tree. So ‘0’ means
the object speciﬁed triggered the event, and ‘+2’ or ‘+3’
indicates the next siblings at the speciﬁed distance (negative
number indicates previous sibling). ‘P’ and ‘C’ refers to
parent and child, respectively.
For the UI Monitor, when an input comes, we iterate
over all signatures that have an EVENT ﬁeld with the current
input, and check the UI tree-structure conditions to determine
whether current input triggers trafﬁc or not. If it does, as
our workﬂow goes, the required data will be sent to Central
Control to generate an authorization vector.
The Network Monitor also uses this signature for deter-
mining whether the current packet is monitored or not. We
use the TYPE ﬁeld to specify the monitored protocol. Its
value can be a protocol name (e.g., SMTP for e-mail client
and WEB for web-apps). Since network monitor only traps
some transactions for each protocol, to bind a signature to
a certain transaction, we use the METHOD ﬁeld under BIND
to specify the desired transaction for non-web protocols9,
and both METHOD and URL10 ﬁelds are used for web-apps
(METHOD is for distinguishing GET and POST messaging in
web-apps).
Specifying User-Intended Text The User Intent Signature
is also responsible for indicating which text boxes correspond
to the user’s intent, for generating authorization vectors. With
the UI Monitor, it uses the CAPTURE ﬁeld to indicate text
boxes that contain user-intended text. In this ﬁeld, the left-side
key value is assigned alphabetically to simplify text matching
in for network packets, and the right-side indicates the location
of the target text box on the UI tree-structure, and any required
properties for it. According to this information, the UI Monitor
transmits a unique identiﬁer of target text boxes to Central
Control, then Central Control extracts veriﬁed text from the
Secure Overlay, and ﬁnally the authorization vector will be
created and saved based on this information. The vector will
be in a form that can be reconstructed within the Network
Monitor.
For the Network Monitor, it refers to the PARAMS ﬁeld
9We assigned natural names for each operation. METHOD = SEND in
Example 1 means that the signature should only monitor sending operations
in the SMTP protocol.
10As a concept of remote procedure calls, URL in an web-app is analogous
to invoking a function on the host, so it can indicate certain transactions.
to extract content from the packet. The left-side key value for
this is a natural name for the stand-alone protocol, or the URL
parameter for web-apps. The right-side value has an alphabet
value that is previously assigned in the CAPTURE ﬁeld, which
is used to link captured text boxes to each parameter within
the current packet. Since an authorization vector is created
with knowledge of the PARAMS ﬁeld, the Network Monitor
can reconstruct the correct vector using only this packet and
signature data. After reconstructing the vector, we query the
authorization DB to check for proof of previously established
user intent.
V. APPLICATION CASE STUDIES
In this section, we will present our experience in using
Gyrus to protect existing applications. Our experiments cover
both traditional, stand-alone applications as well as web appli-
cations. For stand-alone applications, we studied how to apply
Gyrus to Windows Live Mail and Digsby (an instant messaging
client). As for web applications, we picked the following from
the top 25 sites according to Alexa [1]: GMail, Facebook and
Paypal, and for our studies, we assume these web applications
are accessed using Microsoft Internet Explorer 10. We argue
that these applications represent some of the most important
ones in daily life, and we base this argument on the Pew
Internet survey called “What Internet Users Do On A Typical
Day” [28], which lists sending/reading emails, using online
social networking, doing online banking and sending instant
messages among the 20 things most people do on a daily
basis. We also observe that the remaining of the listed popular
activities mostly involve users getting information from the
Internet, and does not involve the transmission of any user
generated content, and thus are not
the target for Gyrus
protection.
The focus of the following discussion is on how we can
specify the per-application logic necessary for Gyrus protec-
tion for each of the target applications using a User Intent
Signature. We believe our experience shows that the User
Intent Signature language makes this task very manageable.
A. Constructing User Intent Signature
Construction of a User Intent Signature is two folded as
Gyrus decouples capturing of the user intent and monitoring
of the network trafﬁc. The UI part of the signature can be done
in very intuitive way. First, we arrange the UI as it would be
used for composing user-generated content. Then we identify
an input event that triggers trafﬁc, and the associated text boxes
that contain user-intended text through a visual inspection of
the UI. Next, with the help of a tool called inspect.exe
from the UI Automation library, we can identify the tree-
structure and other details of the UI. Finally, this information is
used to construct the deﬁnition distinguishing the application
that receives input events.
The second part, on the network side, requires an under-
standing of the underlying protocol that the application uses
for network communication. In particular, we need to identify
which trafﬁc we should intercept for monitoring, and discover
how the user intended text is formatted within the packet.
In this section we provide examples of applications that can
be protected by Gyrus, and we demonstrate how the User
Intent Signature simpliﬁes the process for supporting a new
application.
B. Windows Live Mail
Application Speciﬁcation Windows Live Mail is a stand-
alone email client, and the focus of our experiment is to use
Gyrus to make sure that any outgoing e-mails (i.e., through
SMTP) are intended by the user. The user interacts with a
compose window to write a message. The window has a Send
button that will be clicked when the user decides to send the
message. And there are several text boxes reserved for a list
of recipients (e.g., “To”, “Cc”, etc), and the message Subject.
Finally, the window has a rich text pane at the bottom, to
compose the content of the message.
Event and Intended Text The trafﬁc will be generated
after clicking the Send button. On the event, Gyrus will extract
user-intended texts from the “To”, “Subject”, and message
body text panes.
Network Trafﬁc Speciﬁcation Outgoing trafﬁc will be
sent
through the SMTP protocol, and we are speciﬁcally
interested in the portion of the SMTP exchange responsible
for sending a message on it. All user-generated text will be
directly shown as the same text in the trafﬁc, and Gyrus will
extract each ﬁeld to query to Authorization DB.
Constructing Signature We show the signature for this
application in Example 1. The input event that triggers trafﬁc
creation is pressing the Send button. So we set the EVENT
ﬁeld to LCLICK. To distinguish the application window, we
set WINDOW ﬁeld to the classname of the window, which is
ATH_Note in this case. To improve the event condition that
detects the application, we list all participating UI objects on
user intent on COND part. Starting from the event receiving
object, a Send button, the text box for recipients is the second
sibling, and the text box for the subject is the third sibling. So
we mark them as +2, +3, respectively. Locating the rich text
pane used for the message also requires tree-traversal. In our
scheme, it is located at P-1CCCCCCCCC. Since we need to
capture the contents of all text boxes and panes, the CAPTURE
ﬁeld will assign temporary variables A, B, and C, to each one.
For the network monitor, we set protocol TYPE as SMTP and
METHOD as SEND, and bind each of the variables assigned
during the CAPTURE stage to protocol speciﬁc variables.
C. Digsby: Yahoo! Messenger & Twitter
Application Speciﬁcation Digsby is a stand-alone client
for accessing multiple instant messenger and online social
network services within one application. In our experiments,
we focus on using Gyrus to protect the outgoing communi-
cation to Yahoo Messenger and Twitter. Communications to
other messenger/online social network services can be easily
covered as long as we have the corresponding proxy for
handling the network trafﬁc. We would simply require one user
intent signature for each supported protocol. For both Yahoo
Messenger and Twitter, Digsby provides a simple GUI. The
user interacts with a messaging dialog window, which has a
text box for the message at the bottom. After typing a text
message, the user can send the message by pressing the ENTER
key while still focused in the message text box.
10
Event and Intended Text The trafﬁc will be generated
after pressing the ENTER key. At this time, Gyrus will extract
user-intended text from the message text box at the bottom of
the dialog.
Network Trafﬁc Speciﬁcation For Yahoo Messenger,
outgoing trafﬁc will be sent
through the Yahoo! Messen-
ger (YMSG) protocol. Similar to the e-mail case, we are
only interested in the portion of the protocol that contains
the message. User-intended text will be encapsulated with
HTML tags for formatting, so Gyrus will extract the text and
then query the authorization DB. For Twitter, Digsby will
communicate with its server through an HTTP REST API.
The network monitor needs to watch for POST requests to
https://api.twitter.com/1/statuses/update.json. In this case, the
user-intended text will be encoded with URL encoding, so the
extracted text will be compared with the authorization DB after
decoding.
Constructing Signature Pressing the ENTER key af-
ter
triggers outgoing network traf-
typing a message
ﬁc. Looking up the class name of
the dialog window,
Digsby uses wxWindowClass for Yahoo Messenger and
wxWindowClassNR for Twitter. To improve the event con-
ditions of the UI structure, in addition to checking whether
current input is delivered to the text box for a message, we
also check if it has a pane object as its siblings. Since we
need to capture user-intended text from the message text box,
we assign the variable A to it for the CAPTURE ﬁeld. On
the network side, we set the protocol type as YMSG and WEB
respectively. We set the METHOD ﬁeld as SEND for YMSG,
and POST for Twitter. Variable A for the intended text will be
bound to a variable called message in YMSG, and status
for Twitter.
D. Web Applications
There are some common characteristics among the web
applications. Since we use Microsoft Internet Explorer 10 for
running all web applications, window class name cannot be
used to distinguish the application. Instead, we use the domain
name of currently active page as an identiﬁer. In addition, the
protocol that the trafﬁc is sent through is always HTTP(S)
in web applications. Therefore, monitored transactions can be
identiﬁed by associating a URL with a submit input event.
Variables for matching user-intended text will be bound as
HTTP parameters. In general, user-intended text in the packet
is URL-encoded.
E. Web-App: GMail
Application Speciﬁcation The workﬂow of GMail is very
similar to that of Windows Live Mail. It has a Send button
on top of the compose screen11, along with To, Subject, and
message panes.
Network Trafﬁc Speciﬁcation On clicking the Send
button, an e-mail message will be sent through a POST method
URL https://mail.google.com/mail, only if it is set with URL
parameter act=sm. User-intended text is transmitted on the
to, subject, and body parameters of the POST request.
11We ran Gyrus with the old version of GMail composing UI which was
available until July 2013.
11
Constructing Signature The EVENT ﬁeld is set
to
LCLICK. For the application condition,
the domain name
of mail.google.com will be used as a window identi-
ﬁer, along with the relative positions of text boxes to the
Send button. For network trafﬁc, the trap condition is set
to URL https://mail.google.com/mail with parameter condition
act=sm, and variables in the CAPTURE ﬁeld will be matched
with POST parameters named to, subject and body.
F. Web-App: Facebook
Application Speciﬁcation We focus on three transactions
in the Facebook application: status update, adding comment,
and sending message. For status update, a user types a message
in the text box, and clicks the Post button. This is similar
to the e-mail applications. For adding a comment and sending
message, a user presses the ENTER key after composing her
message, which is analogous to the Digsby example.
to
Network Trafﬁc Speciﬁcation For status updates, trafﬁc
goes
https://www.facebook.com/ajax/updatestatus.php,
and the user’s text
is transmitted in the POST variable
xhpc_message_text. Adding a comment goes through
https://www.facebook.com/ajax/uﬁ/add comment.php,
and
uses
sending a
message hits https://www.facebook.com/ajax/mercury/send
messages.php, and message_batch[0][body] is the
variable for intended text.
the variable comment_text. Finally,
Constructing Signature The event will be LCLICK for
status updates, while it will be ENTER for the others. Identi-
fying the application and expected transaction for each event
is challenging because all three transactions are done in the
same window so we cannot distinguish each transaction using
only the domain name. Therefore we can distinguish each
transaction using additional UI structure checks. We link
camera, location, and emoticon menu icons as siblings for
distinguishing status update, link proﬁle image and the shadow
text “Write a comment” for adding comment, and link an icon
name with “Add more friends to chat” and conversation history
objects as siblings for sending a chat message.
G. Web-App: Paypal
Application Speciﬁcation Using Gyrus with Paypal en-
ables validation of the integrity of the amount of money sent
to someone. On the transferring money page, a user clicks
the button Continue after he types the username or e-mail
address of the recipient, and the amount of money to transfer
in the text boxes. The workﬂow is analogous to our e-mail
examples, with the primary difference being that in this case
the message is the amount of money to be transferred.
Trafﬁc
Network
Continue
Speciﬁcation
clicking
the
to
sent
https://www.paypal.com/us/cgi-bin/webscr with the POST
parameter cmd=_flow. User-intended text will be placed in
the POST parameters, email and amount.
trafﬁc will
After