Not Vulnerable
Overﬂow
Use-after-free
Uninitialized read
Overﬂow &
Use-after-free
Overﬂow &
Uninitialized read
Use-after-free &
Uninitialized read
Overﬂow &
Use-after-free &
Uninitialized read
Not aligned
Structure 1
Structure 2
Structure 1
Structure 1
Structure 2
Aligned
Structure 3
Structure 4
Structure 3
Structure 3
Structure 4
Structure 2
Structure 4
Structure 1
Structure 3
Structure 2
Structure 4
The metadata word contains rich information and is worth
detailed interpretation. (1) In all structures, the least signiﬁcant
four bits is called the buffer type ﬁeld, where three bits
represent the vulnerability type (one bit is used to indicate
each of the three vulnerability types, i.e., Overflow, Use
after Free, and Uninitialized Read) and one bit
indicates whether the buffer is aligned. (2) 36 bits are used
to indicate the location of the guard page. Currently, 64-bit
operations systems only use a 48-bit virtual address space;
plus, a guard page is 4KB=212B aligned. Thus, 48− 12 = 36
bits are sufﬁcient. A guard page is set as inaccessible using
mprotect. The user buffer size information is stored as the
ﬁrst word of the guard page, and it is needed for supporting
realloc. (3) If the buffer is aligned (Structure 3 and
Structure 4), there is a padding ﬁeld whose size depends on
the alignment size. The alignment size information is needed
to determine the buffer address given the address of the User
Buffer upon a free call. As the alignment size is always
a power of two (i.e., 2n), we only need 6 bits to store the
value of n ∈ [0, 64], which then can be used to calculate the
alignment size.
(2) Handling use after free: If an allocation is not aligned, the
buffer takes Structure 1; otherwise, Structure 3. The metadata
word uses 48 bits to store the user buffer size. When a buffer
vulnerable to use after free is to be free-ed, it is put into an
FIFO queue of freed blocks to defer the reuse.
In our system, only buffers vulnerable to use-after-free are
put into the queue, such that given the same quota the time
a freed buffer stays in the queue is much lengthened, which
hence signiﬁcantly increases the difﬁculty of exploitation of
a use-after-free vulnerability for it increases the uncertainty
entropy a freed buffer is reused by attackers.
(3) Handling uninitialized read: Similar to the above, if
the allocation is not aligned, the buffer takes Structure 1;
otherwise, Structure 3. The user buffer region is initialized
with zeros before it is returned to the user program.
Table I summarizes how different buffer structures are
used for handling different cases, including when multiple
vulnerabilities affect the same buffer. If there is a threat of
overﬂow, Structure 2 or Structure 4 is used to accommodate
the guard page depending on whether the allocation call is
536
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:42 UTC from IEEE Xplore.  Restrictions apply. 
(cid:141)(cid:153)(cid:140)(cid:140)(cid:71)call
Turn the guard page 
into a normal page
Yes
Overflow bit is set?
Get alignment
information
Yes
Push the buffer into 
the queue of freed 
blocks
Yes
No
Align bit is set?
No
Get original 
buffer address
Use-after-free
bit is set?
No
Invoke original (cid:141)(cid:153)(cid:140)(cid:140)
End
Fig. 7. Handling free().
memalign. Whenever there is use after free, upon being freed
the buffer is put into the freed-blocks queue to defer the reuse
of these buffers.
How to handle free() calls? A particular advantage of
our system is that it supports the deployment of heap patches
without modifying the underlying allocator. It works solely by
intercepting the memory allocation calls. On the other hand,
it complicates the handling of freeing buffers.
As shown in Figure 7, when free(p) is invoked the
Online Defense Generator intercepts the call and handles it
as follows. (1) If the Overﬂow bit in the metadata word is set,
the location information of the guard page is retrieved and the
guard page is set as accessible using mprotect. (2) Based on
the user buffer address p, the initial address of the buffer pi is
calculated. Speciﬁcally, if the buffer was not allocated using
memalign, pi = p -sizeof(void *); otherwise, the
alignment size A is retrieved and pi = p - A. (3) If the
Use-after-Free bit is set, the block is put into the queue of
the freed blocks; otherwise, the buffer is released using the
original free API of the underlying allocator.
VII. OTHER IMPLEMENTATION DETAILS
Program Instrumentation Tool. We add a pass into LLVM,
which performs the call graph analysis to determine the
set of call sites to be instrumented and then instruments
them. This implementation has the limitation of requiring the
program source code to be available. Given the simplicity of
VULNERABLE PROGRAMS USED IN THE EVALUATION. UR AND RAF STAND
FOR UNINITIALIZED READ AND USE AFTER FREE, RESPECTIVELY.
TABLE II
Program
Heartbleed
bc-1.06
GhostXPS 9.21
optipng-0.6.4
tiff-4.0.8
wavpack-5.1.0
libming-0.4.8
SAMATE Dataset
Vulnerability
UR & Overﬂow
Overﬂow
UR
UaF
UaF
Overﬂow
Overﬂow
Variety
Reference
CVE-2014-0160
Bugbench [57]
CVE-2017-9740
CVE-2015-7801
CVE-2017-9935
CVE-2018-7253
CVE-2018-7877
23 heap bugs [58]
the analysis and instrumentation, we suppose a binary-only
implementation path (e.g., via Dyninst [56]) is viable.
Ofﬂine Patch Generator. This component is built on the basis
of Valgrind [54]. We reuse its shadow memory functionality
and modify the tool to handle allocation and deallocation.
Signiﬁcant effort has been saved by making use of Valgrind,
which in the meanwhile is a mature dynamic analysis tool.
The implementation over Valgrind thus beneﬁts us to analyze
various complex real-world programs successfully.
Online Defense Generator. It is implemented as a shared
library, which reads the patches in the conﬁguration ﬁle to
the hash table. Once the initialization is done, the hash table
memory pages are set as read-only. The library also interposes
the buffer allocation calls (such as malloc and free) to
enforce the runtime protection. Note that malloc and free
are usually implemented in a shared library, typically libc.
Thus, as long as our shared library (which also implements
malloc and free) is loaded before libc, calls to these
functions will be dispatched to our library. In Linux, by spec-
ifying our shared library during compilation using LDLIBS+=
(or loading it using LD_PRELOAD), we can ensure it is loaded
before libc. Our implementation of malloc and free,
in addition to enforcing the protection, invokes libc APIs to
perform the real allocation/deallocation. So it does not change
the underlying heap allocator or rely on its internals.
VIII. EVALUATION
We have evaluated HEAPTHERAPY+ in terms of both
effectiveness and efﬁciency. We not only evaluate it on the
SPEC CPU2006 benchmarks and many vulnerable programs,
but also run the system with real-world service programs. Our
experiments use a machine with a 2.8GHZ CPU, 16G RAM
running 16.04 Ubuntu and Linux Kernel 4.10.
A. Effectiveness
To evaluate the effectiveness of our system HEAPTHER-
APY+, we run it on a series of programs, as shown in Table II,
which contain a variety of heap vulnerabilities. We aim to
evaluate (1) whether the Ofﬂine Patch Generator can correctly
determine the vulnerability type and generate patches; and (2)
537
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:42 UTC from IEEE Xplore.  Restrictions apply. 
whether the generated patches can effectively prevent attacks
from exploiting those heap vulnerabilities.
Heartbleed Attacks. Heartbleed was a notorious vulnerability
of OpenSSL and affected a large number of services [59].
By sending an ill formed heartbeat request and receiving
the response, the attacker can steal data from the vulnerable
services, such as private keys and user account information.
While Heartbleed is widely known as a heap buffer over-read
vulnerability, actually the attacker can exploit two different
vulnerabilities: over-read and uninitialized read. Speciﬁcally,
the vulnerable heap buffer has 34KB, while the size l of the
data stealing from the buffer can be up to 64KB. If l < 34K,
the attack is just an uninitialized read that leaks data previously
stored in the buffer; otherwise, it is a mix of uninitialized read
and over-read [60].
A service was
created using the OpenSSL utility
s_server.5 We then collected different attack inputs from
Internet, and used one of them to generate the patch. Our
Ofﬂine Patch Generator correctly identiﬁed it as a mix of
uninitialized read and overﬂow and output the patch. The patch
was then automatically written into the conﬁguration ﬁle of
the Online Defense Generator, which was able to precisely
recognize and enhance the vulnerable buffers. We then tried
different attack inputs, and no data was leaked except for the
zeros ﬁlled in the buffers.
bc-1.06. bc, for basic calculator,
is an arbitrary-precision
calculator language. Some versions of its implementation
contain a heap buffer overﬂow vulnerability. We obtained a
buggy version of this program from BugBench, a C/C++ bug
benchmark suite [57], and collected a malicious input that
overﬂows buffers and corrupts the adjacent data. By feeding
the input into our Ofﬂine Patch Generator that ran the buggy
program, an overﬂow patch was generated. With the patch
deployed, our system successfully stopped the attack before it
corrupted any data.
GhostXPS 9.21. GhostXPS is an implementation of the Mi-
crosoft XPS document format built on top of Ghostscript,
which is an interpreter/renderer for PostScript and normalizing
PDF ﬁles. It is the leading independent interpreter software
with the most comprehensive set of page description languages
on the market today. Some versions of GhostXPS contain an
uninitialized read vulnerability that can be exploited using a
crafted document. We collected a buggy version of GhostXPS
from their git repository and the malicious document input.
In the ofﬂine patch generation phase, the uninitialized read
attack was detected and a patch was generated. During the
online heap protection phase, the attack was not able to steal
any data, except for zeros, from memory.
optipng-0.6.4. OptiPNG is a PNG image optimizer that
compresses image ﬁles to a smaller size without losing any
information. Speciﬁc versions of this optimizer allow the
attacker to exploit a use-after-free vulnerability and execute
5In order to support the interposition of the allocation operations, we
compiled OpenSSL using the OPENSSL_NO_BUF_FREELIST compilation
ﬂag to disable the use of freelists.
commonly used for
arbitrary code via crafted PNG ﬁles. We collected a vulnerable
version (optipng-0.6.4) and a malicious PNG image.
The Ofﬂine Patch Generator correctly identiﬁed the attack
and generated a patch. The Online Defense Generator made
use of the patch to recognize the vulnerable buffers and
defeated the use-after-free attacks by deferring the deallocation
of vulnerable buffers.
tiff-4.0.8. TIFF provides support
for ”Tag Image File
Format”,
In
LibTIFF 4.0.8, there is a heap buffer overﬂow in the
t2p_write_pdf function in tools/tiff-2pdf.c. We
were able to generate the patch, which could successfully
prevent the overﬂow.
SAMATE Dataset. We evaluated our system on the SAMATE
Dataset, which is maintained by NIST [58] and contains 23
programs with heap buffer overﬂow, uninitialized read, or use
after free vulnerabilities. Our system successfully generated
patches for all of them and prevented the vulnerabilities from
being exploited.
B. Efﬁciency
sorting image data.
We compared the overhead incurred by the different calling
context encoding algorithms, and measured the overall speed
overhead and memory overhead incurred by our system.
We used our LLVM-based implementation to measure the
efﬁciency of different calling context encoding algorithms.
1) Overhead Comparison of Different Calling Context En-
coding Algorithms: To measure the execution time overhead
imposed by different calling context encoding algorithms,
we applied them to the programs in the SPEC CPU2006