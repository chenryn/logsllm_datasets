Table IV shows which root cause is needed to launch the
BIAS attacks evaluated in Section VII. We use × when a root
causes is needed, otherwise we use - (a hyphen). The lack
of integrity protection is needed in any case, as the attacker
has to modify the capabilities of the impersonated victim to
establish secure connections. The lack of mutual authentication
of Legacy Secure Connections is also needed in any case, as the
attacker exploits it for Legacy Secure Connections and when
downgrading Secure Connections. The role switching is needed
for slave impersonations, as the attacker when impersonating
1) Integrity
2) Legacy Mutual Authentication
3) Role Switching
4) Secure Connections Downgrade
LSC
SC
MI
×
×
-
-
SI MI
×
×
×
×
×
-
×
-
SI
×
×
×
×
TABLE IV: Mapping between BIAS root causes and attacks.
× indicates that a root cause is needed, a hyphen (-) indicates
that a root cause is not needed. LSC means Legacy Secure
Connections, SC means Secure Connections, MI is Master
Impersonation and SI is Slave Impersonation.
the slave has to become the master (veriﬁer) before accepting
a connection request. The Secure Connections downgrade is
needed only when Secure Connections is in use.
C. BIAS Attacks Countermeasures
The BIAS attacks exploit vulnerabilities in the Bluetooth
standard and here we propose three countermeasures to address
them. Our countermeasures also address the four attack root
causes (RC) presented in Section VIII-B. We do not propose
countermeasures acting on top of Bluetooth as they are not
ﬁxing the vulnerabilities in the standard.
1) Integrity. To mitigate the lack of integrity protection during
secure connection establishment, the standard should
mandate to use the long term key (KL) to protect the
secure connection establishment. The long term key is
established during pairing and should be always available
before establishing a secure connection. This would
prevent manipulation of the Bluetooth capabilities and
active man-in-the-middle attacks.
2) Legacy Mutual Authentication and Role Switching. To
mitigate the lack of mandatory mutual authentication for
Legacy Secure Connections and the related issues with
role switching, the standard should mandate to always use
the legacy authentication procedure mutually. This would
force the attacker to authenticate the long term key, even
if he switches from slave to master before accepting a
secure connection request.
3) Secure Connections Downgrade. To mitigate the Secure
Connections downgrade attack, the standard should en-
force that two devices who paired with Secure Connections
are always using it for secure connection establishment.
Alternatively, the standard might suggest to notify the user
in case of a Secure Connections downgrade and the user
should decide whether to accept or reject the downgraded
secure connection.
We note that
the Bluetooth standard includes “Secure
Connections Only Mode” to force devices using only Secure
Connections mechanisms, such as secure authentication pro-
cedure and AES CCM. That mode is still vulnerable to the
reﬂection attack presented in Section V, and breaks backward
compatibility with Legacy Secure Connections devices. We
note that none of the devices that we tested is using “Secure
Connections Only Mode”.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
560
IX. RELATED WORK
X. CONCLUSION
A recent survey about Bluetooth security is provided by
NIST [26]. The survey states that for Bluetooth version from
1.0 up to 3.0 “If device A is the authentication initiator to
B, encryption setup will begin after that initial authentication.
If the encryption setup being successful is good enough to
satisfy B, then B may never bother to attempt to authenticate
A”. In our opinion, this claim should be restated saying that
for all Bluetooth versions—if Legacy Secure Connections is
in use—then device A and device B are not mandated to
mutually authenticate before encryption setup. The survey
mentions the possibility of impersonation attacks only in the
context of broadcast encryption, where a single (master) key
is used by all devices to protect the communication, assuming
that the attacker knows the key. Our BIAS attacks are much
more problematic, because they work in any situation without
requiring the knowledge of the long term key.
Secure session establishment is one of two important security
mechanism provided by Bluetooth. The other one is pairing,
which evolved from legacy pairing to Secure Simple Pairing
(SSP). Legacy pairing was broken [16], [33], [29], [20]. SSP
was vulnerable to man-in-the-middle attacks [15], [14], [31].
Regarding Bluetooth impersonation attacks, in [19] the
authors discuss a relay attack on legacy pairing used to
impersonate devices in different Bluetooth networks (piconets).
Our BIAS attacks are not simple relay attacks, are effective
on both legacy pairing and SSP, and allow to impersonate
devices in any piconet. In [22] the authors discuss a replay
attack targeting unprotected information. Our BIAS attacks are
targeting information protected with the long term key and a
simple reply attack is not enough to achieve our goals. In [24]
impersonation is discussed in the context of a MitM attack
on the pairing phase, and reﬂection attacks are considered as
MitM attacks against authentication. Our BIAS attacks do not
require a MitM attacker to be conducted. In [12] the authors
are not considering impersonation attacks at all.
An attacker might target implementation bugs on speciﬁc
Bluetooth devices. For example, the BlueBorne attack vector [5]
exploits several ﬂows on Android, iOS, Windows, and Linux
implementations. As our BIAS attacks are at the architectural
level, they are effective regardless the implementation details.
The Bluetooth cryptographic primitives have been extensively
analyzed for weaknesses. The E0 stream cipher (used for
Legacy Secure Connections encryption) was investigated [13],
and is considered relatively weak in [26]. SAFER+ (used for
authentication) was analyzed in [18]. AES CCM (used for
Secure Connections encryption) was also analyzed [17], [27]
and is FIPS compliant. Nevertheless, our BIAS attacks are
effective even with perfectly secure cryptographic primitives.
Several attempts were made to build a low-cost and open
source Bluetooth sniffer for over the air eavesdropping [30],
[1], [25]. Unfortunately, an affordable and reliable solution is
still not here. On the other hand, HCI packets can be sniffed by
having root access on the sniffed device, and InternalBlue [23]
is providing LMP monitoring for a wide range of chips.
In this work we present the BIAS attacks, our attacks allow
to impersonate Bluetooth devices by exploiting vulnerabilities
in the speciﬁcation of Bluetooth authentication and secure
connection establishment. We found such vulnerabilities by
manual inspection of the Bluetooth standard and leveraging
our prior work related to Bluetooth security [4], [3], [2].
As a result of a BIAS attack, an attacker completes secure
connection establishment while impersonating Bluetooth master
and slave devices, without having to know and authenticate the
long term key shared between the victims. The BIAS attacks
are standard compliant, and are effective against Legacy Secure
Connections (using the legacy authentication procedure) and
Secure Connections (using the secure authentication procedure).
The BIAS attacks are the ﬁrst uncovering issues related
to Bluetooth’s secure connection establishment authentication
procedures, adversarial role switches, and Secure Connections
downgrades. The BIAS attacks are stealthy, as Bluetooth secure
connection establishment does not require user interaction.
The BIAS attacks are at the architectural level of Bluetooth,
thus all standard compliant Bluetooth devices are a potential
target. We support this claim, by successfully attacking 31
Bluetooth devices (28 unique Bluetooth chips). Our evaluation
sample includes 16 Legacy Secure Connections and 15 Secure
Connections devices from several hardware and software
vendors, using all major Bluetooth versions. We suggest that the
Bluetooth speciﬁcation should be updated to address our BIAS
attacks, and we provide a list of root causes with dedicated
mitigations to counter the them.
REFERENCES
[1] Wahhab Albazrqaoe, Jun Huang, and Guoliang Xing. Practical bluetooth
trafﬁc snifﬁng: Systems and privacy implications. In Proceedings of the
Annual International Conference on Mobile Systems, Applications, and
Services, pages 333–345. ACM, 2016.
[2] Daniele Antonioli, Nils Ole Tippenhauer, and Kasper Rasmussen. Low
entropy key negotiation attacks on Bluetooth and Bluetooth low energy.
https://eprint.iacr.org/2019/933.pdf.
[3] Daniele Antonioli, Nils Ole Tippenhauer, and Kasper Rasmussen.
Nearby Threats: Reversing, Analyzing, and Attacking Google’s “Nearby
Connections” on Android. In Proceedings of the Network and Distributed
System Security Symposium (NDSS). IEEE, February 2019.
[4] Daniele Antonioli, Nils Ole Tippenhauer, and Kasper Rasmussen. The
KNOB is Broken: Exploiting Low Entropy in the Encryption Key
Negotiation of Bluetooth BR/EDR.
In Proceedings of the USENIX
Security Symposium. USENIX, August 2019.
[5] Armis Inc. The Attack Vector BlueBorne Exposes Almost Every
Connected Device. https://armis.com/blueborne/, Accessed: 2018-01-
26, 2017.
[6] Bluetooth SIG. Bluetooth Core Speciﬁcation v5.0.
https://www.
bluetooth.org/DocMan/handlers/DownloadDoc.ashx?doc id=421043, Ac-
cessed: 2018-10-28, 2016.
[7] Jiska Classen and Matthias Hollick. Inside job: diagnosing bluetooth
lower layers using off-the-shelf devices. In Proceedings of the Conference
on Security and Privacy in Wireless and Mobile Networks (WiSec), pages
186–191. ACM, 2019.
[8] Cypress. CYW20819 Ultra Low Power, BLE/BR/EDR Bluetooth
5.0 SoC. https://www.cypress.com/documentation/datasheets/cyw20819-
ultra-low-power-blebredr-bluetooth-50-soc, Accessed: 2019-11-16, 2019.
[9] Cypress. CYW920819EVB-02 Evaluation Kit. https://www.cypress.com/
documentation/development-kitsboards/cyw920819evb-02-evaluation-
kit, Accessed: 2019-11-16, 2019.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
561
[10] Cypress. ModusToolboxTM Software Environment. https://www.cypress.
com/products/modustoolbox-software-environment, Accessed: 2019-11-
16, 2019.
[11] Newsroom Cypress. Cypress to acquire broadcom’s wireless internet
of things business.
https://www.cypress.com/news/cypress-acquire-
broadcom-s-wireless-internet-things-business-0, Accessed: 2019-11-27,
2016.
[12] John Dunning. Taming the blue beast: A survey of bluetooth based
threats. IEEE Security & Privacy, 8(2):20–27, 2010.
[13] Scott Fluhrer and Stefan Lucks. Analysis of the E0 encryption system.
In Proceedings of the International Workshop on Selected Areas in
Cryptography, pages 38–48. Springer, 2001.
[14] Keijo Haataja and Pekka Toivanen. Two practical man-in-the-middle
attacks on Bluetooth secure simple pairing and countermeasures. Trans-
actions on Wireless Communications, 9(1):384–392, 2010.
[15] Konstantin Hypponen and Keijo MJ Haataja. “nino” man-in-the-middle
attack on bluetooth secure simple pairing.
In Proceedings of the
International Conference in Central Asia on Internet, pages 1–5. IEEE,
2007.
[16] Markus Jakobsson and Susanne Wetzel. Security weaknesses in Bluetooth.
In Proceedings of the Cryptographers’ Track at the RSA Conference,
pages 176–191. Springer, 2001.
[17] Jakob Jonsson. On the security of CTR+ CBC-MAC. In Proceedings of
the International Workshop on Selected Areas in Cryptography, pages
76–93. Springer, 2002.
[18] John Kelsey, Bruce Schneier, and David Wagner. Key schedule
In Proceeings of the Advanced Encryption
weaknesses in SAFER+.
Standard Candidate Conference, pages 155–167. NIST, 1999.
[19] Albert Levi, Erhan C¸ etintas¸, Murat Aydos, C¸ etin Kaya Koc¸, and M Ufuk
C¸ a˘glayan. Relay attacks on Bluetooth authentication and solutions. In
International Symposium on Computer and Information Sciences, pages
278–288. Springer, 2004.
[20] Andrew Y Lindell. Attacks on the pairing protocol of Bluetooth v2.1.
Black Hat USA, Las Vegas, Nevada, 2008.
[27] Phillip Rogaway. Evaluation of some blockcipher modes of operation.
Cryptography Research and Evaluation Committees (CRYPTREC) for
the Government of Japan, 2011.
[28] SEGGER. J-Link EDU: Low-cost J-Link for educational purpose. https://
www.segger.com/products/debug-probes/j-link/models/j-link-edu/, Ac-
cessed: 2019-11-16, 2019.
[29] Yaniv Shaked and Avishai Wool. Cracking the Bluetooth PIN.
In
Proceedings of the conference on Mobile systems, applications, and
services (MobiSys), pages 39–50. ACM, 2005.
[30] Dominic Spill and Andrea Bittau. BlueSniff: Eve Meets Alice and Blue-
tooth. In Proceedings of USENIX Workshop on Offensive Technologies
(WOOT), volume 7, pages 1–10, 2007.
[31] Da-Zhi Sun, Yi Mu, and Willy Susilo. Man-in-the-middle attacks on
Secure Simple Pairing in Bluetooth standard v5. 0 and its countermeasure.
Personal and Ubiquitous Computing, 22(1):55–67, 2018.
[32] National Security Agency USA. Ghidra: A software reverse engineering
(SRE) suite of tools developed by NSA’s research directorate in support of
the cybersecurity mission. https://ghidra-sre.org/, Accessed: 2019-02-04,
2019.
[33] Ford-Long Wong, Frank Stajano, and Jolyon Clulow. Repairing the
In International Workshop on Security
Bluetooth pairing protocol.
Protocols, pages 31–45. Springer, 2005.
[21] Express Logic. Threadx real-time operating system. https://rtos.com/
solutions/threadx/real-time-operating-system/, Accessed: 2019-11-23,
2019.
[22] Angela M Lonzetta, Peter Cope, Joseph Campbell, Bassam J Mohd, and
Thaier Hayajneh. Security vulnerabilities in Bluetooth technology as
used in IoT. Journal of Sensor and Actuator Networks, 7(3):28, 2018.
[23] Dennis Mantz, Jiska Classen, Matthias Schulz, and Matthias Hollick.
InternalBlue - Bluetooth binary patching and experimentation framework.
In Proceedings of Conference on Mobile Systems, Applications and
Services (MobiSys). ACM, June 2019.
[24] Nateq Be-Nazir Ibn Minar and Mohammed Tarique. Bluetooth security
threats and solutions: a survey. International Journal of Distributed and
Parallel Systems, 3(1):127, 2012.
[25] Michael Ossmann.
Project Ubertooth.
https://github.com/
greatscottgadgets/ubertooth, Accessed: 2019-10-21, 2019.
[26] John Padgette. Guide to bluetooth security. NIST Special Publication,
800:121, 2017.
APPENDIX
Figure 10 presents the (unilateral) legacy authentication.
Figure 11 presents the (mutual) secure authentication.
Alice (slave)
A
Bob (master)
B
Alice shares KL with Bob
Connection request
Accept connection
CM = rand(16)
Auth
RS = HL(KL, CM , BTADDS)
Session key negotiation and secure link activation
Bob authenticates that Alice knows KL
Fig. 10: Legacy authentication procedure. The legacy authen-
tication procedure provides unilateral authentication. Mutual
authentication is achieved when the procedure is completed
twice, with Bob and Alice as veriﬁer, respectively.
Alice (slave)
A
Bob (master)
B
Alice shares KL with Bob
Alice and Bob support Secure Connections
Connection request
Accept connection
CM = rand(16)
CS = rand(16)
RS
RM
Auth
Session key negotiation and secure link activation
Alice and Bob mutually authenticate KL
Fig. 11: Secure authentication procedure. Alice and Bob
exchange CM and CS in no particular order. Both compute
RM and RS using HS. Alice sends RS and Bob sends RM . If
both posses KL, the received value matches the local version.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
562