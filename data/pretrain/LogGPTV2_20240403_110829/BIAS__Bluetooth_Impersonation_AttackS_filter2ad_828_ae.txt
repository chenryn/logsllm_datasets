### Table IV: Mapping Between BIAS Root Causes and Attacks

Table IV illustrates the root causes necessary for launching the BIAS (Bluetooth Impersonation AttackS) evaluated in Section VII. We use "×" to indicate that a root cause is required, and "-" (a hyphen) to indicate it is not needed.

- **Lack of Integrity Protection**: This is always required because the attacker must modify the capabilities of the impersonated victim to establish secure connections.
- **Lack of Mutual Authentication in Legacy Secure Connections (LSC)**: This is also always required, as the attacker exploits this vulnerability for both Legacy Secure Connections and when downgrading Secure Connections.
- **Role Switching**: This is necessary for slave impersonations, as the attacker must switch roles to become the master (verifier) before accepting a connection request.
- **Secure Connections Downgrade**: This is only required when Secure Connections (SC) are in use.

| Root Cause                     | LSC  | SC   | MI  | SI  |
|--------------------------------|------|------|-----|-----|
| Lack of Integrity              | ×    | ×    | -   | -   |
| Legacy Mutual Authentication   | ×    | ×    | -   | -   |
| Role Switching                 | ×    | ×    | ×   | ×   |
| Secure Connections Downgrade  | -    | ×    | -   | -   |

**Legend:**
- ×: Indicates that the root cause is needed.
- -: Indicates that the root cause is not needed.
- LSC: Legacy Secure Connections
- SC: Secure Connections
- MI: Master Impersonation
- SI: Slave Impersonation

### C. BIAS Attacks Countermeasures

BIAS attacks exploit vulnerabilities in the Bluetooth standard. Here, we propose three countermeasures to address these vulnerabilities. These countermeasures also address the four root causes (RC) presented in Section VIII-B. We do not propose countermeasures that act on top of Bluetooth, as they would not fix the underlying vulnerabilities in the standard.

1. **Integrity**:
   - **Mitigation**: To mitigate the lack of integrity protection during secure connection establishment, the standard should mandate the use of the long-term key (KL) to protect the secure connection setup. The long-term key is established during pairing and should always be available before establishing a secure connection. This would prevent the manipulation of Bluetooth capabilities and active man-in-the-middle (MitM) attacks.

2. **Legacy Mutual Authentication and Role Switching**:
   - **Mitigation**: To mitigate the lack of mandatory mutual authentication for Legacy Secure Connections and related issues with role switching, the standard should mandate the use of the legacy authentication procedure mutually. This would force the attacker to authenticate the long-term key, even if they switch from slave to master before accepting a secure connection request.

3. **Secure Connections Downgrade**:
   - **Mitigation**: To mitigate the Secure Connections downgrade attack, the standard should enforce that two devices paired with Secure Connections must always use it for secure connection establishment. Alternatively, the standard could suggest notifying the user in case of a Secure Connections downgrade, allowing the user to decide whether to accept or reject the downgraded secure connection.

**Note**:
- The Bluetooth standard includes a "Secure Connections Only Mode" to force devices to use only Secure Connections mechanisms, such as secure authentication procedures and AES CCM. However, this mode is still vulnerable to the reflection attack presented in Section V and breaks backward compatibility with Legacy Secure Connections devices. None of the tested devices used the "Secure Connections Only Mode."

### IX. Related Work

A recent survey by NIST [26] discusses Bluetooth security. It states that for Bluetooth versions from 1.0 to 3.0, if device A initiates authentication with B, encryption setup will begin after the initial authentication. If the encryption setup is successful, B may not attempt to authenticate A. In our view, this claim should be rephrased to state that for all Bluetooth versions, if Legacy Secure Connections is in use, devices A and B are not mandated to mutually authenticate before encryption setup. The survey mentions the possibility of impersonation attacks only in the context of broadcast encryption, where a single (master) key is used by all devices, assuming the attacker knows the key. Our BIAS attacks are more problematic because they work in any situation without requiring knowledge of the long-term key.

### X. Conclusion

In this work, we present the BIAS attacks, which allow an attacker to impersonate Bluetooth devices by exploiting vulnerabilities in the specification of Bluetooth authentication and secure connection establishment. We identified these vulnerabilities through a manual inspection of the Bluetooth standard and by leveraging our prior work related to Bluetooth security [4], [3], [2].

As a result of a BIAS attack, an attacker can complete secure connection establishment while impersonating Bluetooth master and slave devices, without needing to know or authenticate the long-term key shared between the victims. The BIAS attacks are compliant with the Bluetooth standard and are effective against both Legacy Secure Connections (using the legacy authentication procedure) and Secure Connections (using the secure authentication procedure).

The BIAS attacks are the first to uncover issues related to Bluetooth's secure connection establishment, adversarial role switches, and Secure Connections downgrades. These attacks are stealthy, as Bluetooth secure connection establishment does not require user interaction. The BIAS attacks are at the architectural level of Bluetooth, making all standard-compliant Bluetooth devices potential targets. We support this claim by successfully attacking 31 Bluetooth devices (28 unique Bluetooth chips). Our evaluation sample includes 16 Legacy Secure Connections and 15 Secure Connections devices from various hardware and software vendors, using all major Bluetooth versions.

We recommend updating the Bluetooth specification to address our BIAS attacks and provide a list of root causes with dedicated mitigations.

### References

[References listed as provided in the original text]

### Appendix

#### Figure 10: Legacy Authentication Procedure

**Unilateral Legacy Authentication:**

- **Alice (slave)** shares KL with **Bob (master)**
- **Connection Request** from Alice
- **Accept Connection** by Bob
- **CM = rand(16)**
- **Auth**: RS = HL(KL, CM, BTADDs)
- **Session Key Negotiation and Secure Link Activation**
- **Bob authenticates that Alice knows KL**

**Note**: The legacy authentication procedure provides unilateral authentication. Mutual authentication is achieved when the procedure is completed twice, with Bob and Alice as verifiers, respectively.

#### Figure 11: Secure Authentication Procedure

**Mutual Secure Authentication:**

- **Alice (slave)** and **Bob (master)** support Secure Connections
- **Connection Request** from Alice
- **Accept Connection** by Bob
- **CM = rand(16)**
- **CS = rand(16)**
- **RS and RM** computed using HS
- **Auth**: Alice sends RS and Bob sends RM
- **Session Key Negotiation and Secure Link Activation**
- **Alice and Bob mutually authenticate KL**

**Note**: Alice and Bob exchange CM and CS in no particular order. Both compute RM and RS using HS. If both possess KL, the received value matches the local version.