the URL of a proxy iframe from the domain of the intended
receiver. As the URL can be read only by proxy’s domain,
no man-in-the-middle can read the message.
Message Integrity In OMOS, message integrity is real-
ized by utilizing the browser’s restriction on partial change
Figure 5. Connection establishment (three-
way handshake), Communication, and Dis-
connection are three phases of a typical MDP
communication session.
onError:
timeout:
function(exp)
{ /*handle exception */ },
1000
}
var socket = OpenMashupOS.socket("time.example.com",
1111, sCallback);
3.7 MHTTP Layer
OMOS provides the main functionality of the MHTTP
layer through the versatile asyncRequest method that
abstracts the same-domain and cross-domain HTTP calls to
servers as well as the mashlet-to-mashlet communication.
The latter happens inside the browser on the client’s lo-
cal machine. The implementation of the asyncRequest
method is built on the existing XMLHttpRequest API
in JavaScript. Currently, XMLHttpRequest only han-
dles same domain mashlet-to-server interaction.
Our
asyncRequest realizes cross-domain requests by cou-
pling XMLHttpRequest with our mashlet-to-mashlet com-
munication mechanism (described in previous sections).
Thereby, we are able to provide a nice and clean interface
for all three types of calls, which are shown in Figure 6. The
following code shows how we can use OMOS API to make
361361
of URLs and the shared key between two frames. To mod-
ify any data carried on URL, a mashlet needs to know the
secret key, otherwise the packet is rejected and dropped at
the destination. Thus, an unauthorized mashlet is unable to
tamper with inter-frame messages.
Mutual Authentication Our key establishment protocol
in Figure 4 guarantees that the mutual authentication be-
tween two frames, say frame[1] from a.com and frame[2]
from b.com, is achieved in OMOS. Frame[2]’s origin is
successfully authenticated, if and only if it sends back the
secret key SK1 sent by frame[1] through b.com’s proxy.
Similarly, frame[1] proves its origin by sending SK2 back
to frame[2]. The conﬁdentiality of communication ensures
that frame[1] and frame[2] are the only two mashlets that
know SK2.
Detecting Frame Phishing Frame phishing refers to
where a malicious frame in a mashup can change which
frame is loaded in another part of the mashup [13]. For ex-
ample, an attacker’s frame can change bank.com’s frame
to point to attacker.com, which may mislead the end
user into disclosing sensitive information such as password
or banking data. The mashlet’s parent in OMOS can conve-
niently detect this type of frame phishing. A regular mashlet
has an on-going socket session with its parent for adminis-
trative commands. In a normal scenario, disconnection of
this session is initiated by mashlet or its parent and this ses-
sion should be closed before mashlet gets unloaded. There-
fore, if attacker.com redirects bank.com to a mali-
cious frame, since the administrative session is still alive,
bank.com mashlet, as part of its onunload even handler,
will send a phishing attack notiﬁcation to its parent. There-
fore, parent mashlet can take the appropriate action and no-
tify the end user of the threat by prompting an alert window,
for example.
ments on a machine with the following conﬁgurations. Intel
Core 2 CPU, 980 MHz, 1.99 GB RAM, Microsoft Win-
dows XP 2002 SP2, Firefox v2.0.0.14, Internet Explorer
v7.0.5730.13, Opera v9.27, and Apple Safari v3.1.1. The
values reported are the averaged results over ﬁve runs.
Figure 7. The ﬁgure shows the throughput
between two mashlets with iframe proxies in
FireFox, IE, and Safari. X-axis is the size of
MDP packets.
Figure 8. The ﬁgure shows the throughput
between two mashlets with PostMessage in
Opera. X-axis is the size of MDP packets.
Access Control OMOS framework separates communi-
cation and access control mechanism. Therefore, differ-
ent access control techniques can be used to control com-
munications between mashlets. For example, a policy en-
forcement mashlet can govern communication of different
mashlets similar to central even hub in SMash, or in a dis-
tributed fashion, each mashlet can control access to its ser-
vices using a dynamic whitelisting technique. Due to the
space limit, we do not elaborate on this aspect here in this
paper.
5 Experiments
The goal of the experiments is to test the performance
of OMOS library in various browsers, in particular, on how
fast data can be transferred from one frame to another frame
of a different origin. We are mostly interested in testing the
communication channel between two frames as it is the ba-
sic building block for mashup applications. We ran experi-
Figure 7 shows the throughput as the size of messages in-
creases in FireFox, IE, and Safari. FireFox and Safari have
similar performance in terms of throughput as they both can
achieve around 430 KB/s of transfer rate. Recall that MDP
layer can handle arbitrarily large data objects. The underly-
ing Datalink layer handles the URL limitation by fragmen-
tation and defragmentation. For IE, the throughput is much
362362
lower and can achieve the transfer rate of 50 KB/s. The
slowdown in IE is due to the URL limit (2KB) imposed by
IE, as there is overhead in the Datalink layer to fragment
and defragment large messages into small packets that can
be ﬁt into 2KB URL. The mashlets communicate through
iframe proxies described in our protocol. In general, larger
message sizes give higher throughput for all three types of
browsers. Opera gives high throughput, due to the native
support of inter-frame messaging (i.e., postMessage [3]), it
is shown in a separate graph in Figure 8. Figure 8 shows
that Opera gives throughput as high as 2500 KB/s with mes-
sage sizes around 2MB. However, the performance then
degrades as the message sizes increase. The transfer rate
eventually drops to zero as the message size reaches around
2.6MB. The root cause of this poor performance of Opera
with larger message sizes is currently not clear to us. From
the throughput results, 2 MB seems to be the optimal mes-
sage size.
Even though using the larger message sizes (i.e., frame
URL) for transferring data leads to higher throughput, we
observed that using very large message sizes leads to less
responsive user interface and thus affects the surﬁng expe-
rience of the end user. Based on our experiences, the max-
imum message size should be around 100 KB to ensure re-
sponsive browser interface. Therefore, there is a trade-off
between performance and usability. IE’s URL limit affects
the rate of information transferred and signiﬁcantly slows
down the data transfer.
In comparison, for all the other
three browsers, the frame URL can be very large (> 2MB).
OMOS is able to ﬁnd the suitable size of frame URL auto-
matically.
6 Related Work
The authors of MashupOS recognized that existing
browser has a limited all-or-nothing trust model and pro-
tection abstractions suitable only for a single-domain sys-
tem [19]. They proposed new abstractions for the content
types and trust relationships in the current browser envi-
ronments.
In MashupOS, new native HTML tags are in-
troduced to HTML page. These tags can be added and
removed dynamically using JavaScript, so mashups with
dynamic layout are possible. To demonstrate the feasibil-
ity, the authors have implemented their abstraction using
browser plug-in for IE in such a way that browser at compile
time converts them to standard HTML tags and simulates
their functionality. The main difference between Mashu-
pOS and OMOS is that MashupOS provides a modiﬁed
browser, whereas we create library supports that applica-
tions can use within current browsers.
In Subspace [11],
JavaScript web services are placed into iframes that are
originated from “throw-away” subdomains of mashup in-
tegrator. This approach is not ﬂexible in general, as web
services need to run under the subdomain of the integrator,
and cannot directly perform XMLHtmlRequest calls to their
backends.
Keukelaere et al. developed SMash that is a secure com-
ponent communication model for cross-domain mashups
called SMash [13]. In SMash, all of the communications
are through the mashup integrator, which is also called hub.
The hub mediates and coordinates all the communications
via tunnel frames among the participating frames. The
hub also enforces access policies. It prevents frames from
eavesdropping on or tampering the others’ communication
channels. SMash inter-frame communication is supported
through a tunnel frame pointing to the integrator’s domain
that each frame needs to create in order to communicate
with the integrator.
In comparison to SMash where a tunnel frame exists in
every mashlet, we create an iframe for every round of com-
munication and send the information encoded in the frag-
ment identiﬁer during an onLoad event. Therefore, unlike
SMash, we do not need a polling mechanism and the com-
munication in OMOS is event-driven. Polling creates nega-
tive impacts on the performance of single-threaded browser.
We support mutual authentication in our inter-mashlet com-
munication that prevents an attacker from frame spooﬁng.
In our OMOS, cross-domain frames can communicate di-
rectly without the participation of the mashup integrator.
Therefore, the trust assumption put on the mashup integra-
tor can be relaxed.
Recently, a secure postMessage method is proposed by
Barth, Jackson, and Mitchell [3]. They have proposed
a protocol to ﬁx an authentication vulnerability in sev-
eral (polling-based) inter-frame communication protocols
including SMash, and Windows Live communication proto-
col [15]. The communication protocol used in OMOS dose
not have this issue, as is explained in Section 4.
Cross-site request forgery (XSRF), which is also known
as the confused deputy attack against a Web browser [1],
is a malicious attack again websites by exploiting browser
vulnerabilities. In a XSRF attack, a malicious website can
launch an iframe to make requests on behalf of the user to
another website with which the user’s authenticated session
is still valid. For example, the request may be to transfer
funds from the user’s bank or to change the user’s Gmail
conﬁguration. A secure browser OP browser that prevents
and detects XSRF was presented by [9]. Simple alternatives
are for websites to set a short expiration period on authen-
ticated sessions, and to educate users to close authenticated
sessions upon ﬁnishing.
Singh and Lee presented a browser design inspired by
µ-kernel based OS [14] that allows ﬂexible and ﬁner cus-
tomization. The main design difference between Singh-Lee
browser and OP browser is that OP browser is process-
based whereas Singh-Lee browser is within the same ad-
363363
dress space that makes it possible for the browser to provide
memory isolation for browser components. As with other
mashup solutions (SMash and MashupOS), OMOS depends
on the security of browser to correctly operate. Therefore, a
secure browser such as OP would be complementary to our
techniques in realizing web security.
7 Conclusions and Future Work
We presented our design and implementation of a se-
cure and efﬁcient communication framework OMOS for
mashup applications. OMOS works in unmodiﬁed browsers
and ensures the message authentication, integrity, and con-
ﬁdentiality in cross-domain inter-frame communications.
We gave a detailed security analysis of our communica-
tion mechanism based on iframe proxies. We demonstrated
through experiments that OMOS gives high data transfer
rates in most types of browsers.
We will work on improving and optimizing the efﬁciency
of communication in all browsers and will add more ser-
vices to the framework.
8 Acknowledgements
The ﬁrst author would like to thank the help of professors
at Bahai Institute for Higher Education (BIHE).
References
[1] D. Ahmad. The confused deputy and the domain hijacker.
IEEE Security and Privacy, 6(1):74–77, January/February
2008.
[2] Asynchronous JavaScript and XML Tutorials. http://
developer.mozilla.org/en/docs/AJAX.
[3] A. Barth, C. Jackson, and J. C. Mitchell. Securing browser
frame communication. In Proceedings of the 17th USENIX
Security Symposium, 2008.
[4] T. Close. Web-key: Mashing with permission.
In W2SP
2008: Web 2.0 Security and Privacy. Held in conjunction
with the 2008 IEEE Symposium on Security and Privacy,
2008.
[5] CrossFrame, JavaScript Yahoo API.
[6] S. Crites, F. Hsu, and H. Chen. Omash: Enabling secure web
mashups via object abstractions. In 15 ACM Conference on
Computer and Communicatios Security, 2008.
[7] DOJO Library. Part 5. http://dojotoolkit.org/
book/dojo-book-0-4/.
[8] Facebook API. http://developers.facebook.
com/.
[9] C. Grier, S. Tang, and S. T. King. Secure web browsing with
the OP web browser. In IEEE Symposium on Security and
Privacy, May 2008.
[10] C. Jackson and A. Barth. Beware of ﬁner-grained origins.
In W2SP 2008: Web 2.0 Security and Privacy. Held in con-
junction with the 2008 IEEE Symposium on Security and
Privacy, 2008.
[11] C. Jackson and H. J. Wang. Subspace: secure cross-domain
communication for web mashups. In Proceedings of the 16th
International Conference on World Wide Web, pages 611–
620, 2007.
[12] JSON-RPC 1.1 Speciﬁcation. http://json-rpc.
org/wd/JSON-RPC-1-1-WD-20060807.html.
[13] F. D. Keukelaere, S. Bhola, M. Steiner, S. Chari, and
S. Yoshihama. SMash: Secure component model for cross-
domain mashups on unmodiﬁed browsers. In Proceedings
of the 17th International Conference on World Wide Web,
2008.
[14] K. S. W. Lee. On the design of a web browser: Lessons
learned from operating systems. In W2SP 2008: Web 2.0 Se-
curity and Privacy. Held in conjunction with the 2008 IEEE
Symposium on Security and Privacy, 2008.
[15] Microsoft Windows Live Contacts. htp://dev.live.
com/mashups/trypresencecontrol/.
[16] OpenMashupOS Project, http://OpenMashupOS.
com/.
[17] OpenSocial API. http://code.google.com/apis/
opensocial/.
Origin
[18] Same
Policy.
http://developer.
mozilla.org/En/Same_origin_policy_for_
JavaScript.
[19] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protec-
tion and communication abstractions for web browsers in
In ACM Symposium on Operating Systems
MashupOS.
Principle (SOSP), pages 1–16. ACM Press, 2007.
364364