S-Mimikatz源码调试
前期准备
mimikatz源码：地址
调试环境： vs2019
几点设置：
1. 因为官方项目没有debug方案，所以需要手动添加debug配置 
2. 项目属性配置
程序入口
调试以 privilege::debug 为例。打开调试-> mimikatz 调试属性->配置属性->调试->命令参数 
wmain()是 mimikatz`的入口函数。 
命令分发
从上面的循环中获取到请求参数之后就进入到命令分发的 mimikatz_dispatchCommand() 函数。 
这里首先有一个 kull_m_file_fullPath 方法，然后进行匹配，暂时不知道具体作用是什么，之
后进入 mimikatz_doLocal() 方法。 
命令执行
在对命令进行请求分发之后获取到 module 和 commond 两个参数，之后就进入了命令执行的阶段，
这个地方涉及到结构体的知识。
首先 mimikatz_modules[] 是一个数组，数组里面存放的是每一个模块的结构体的指针。那么第
210行就是将 module 的值和每个模块结构体中定义的 shortName 进行比较，如果相同，返回0。 
结构体的结构在 kuhl_m.h 这个头文件中进行定义。 
之后第213和214两行相同的方式去寻找同一个模块下存在的 command ，每个模块都预先定义一个
数组，存放全部的可执行方法的信息。
最重要的就是第215行， status = mimikatz_modules[indexModule]-
>commands[indexCommand].pCommand(argc - 1, argv + 1); ，执行这个模块和命令。
mimikatz_modules[indexModule]->commands[1] 这一步相当于找到了
kuhl_m_c_privilege[] 这个数组的第一个元素，然后这个 const KUHL_M_C 
kuhl_m_c_privilege[] 数组，是一个结构体数组，这个第一项表示的是一个 指针函数 ，那后面
的 .pCommand(argc - 1, argv + 1) 就是去调用 kuhl_m_privilege_debug 这个函数。 
可以看到的是对于 privilege::debug 这个功能，执行的函数是
kuhl_m_privilege_simple() ，而最后调用的系统API是 RtlAdjustPrivilege() 。
至此，整个简单的流程分析已经结束了，关于 mimikatz 的请求流程，和命令分发已经了解清楚
了。
NTSTATUS kuhl_m_privilege_simple(ULONG privId)
{
   ULONG previousState;
   NTSTATUS status = RtlAdjustPrivilege(privId, TRUE, FALSE, &previousState);
   if(NT_SUCCESS(status))
      kprintf(L"Privilege \'%u\' OK\n", privId);
   else PRINT_ERROR(L"RtlAdjustPrivilege (%u) %08x\n", privId, status);
   return status;
}