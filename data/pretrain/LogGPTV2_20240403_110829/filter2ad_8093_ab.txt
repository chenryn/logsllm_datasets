            balances[msg.sender] += msg.value;
        }
        function withdrawFunds (uint256 _weiToWithdraw) public {
            require(!reEntrancyMutex);
            require(balances[msg.sender] >= _weiToWithdraw);
            // limit the withdrawal
            require(_weiToWithdraw = lastWithdrawTime[msg.sender] + 1 weeks);
            balances[msg.sender] -= _weiToWithdraw;
            lastWithdrawTime[msg.sender] = now;
            // set the reEntrancy mutex before the external call
            reEntrancyMutex = true;
            msg.sender.transfer(_weiToWithdraw);
            // release the mutex after the external call
            reEntrancyMutex = false; 
        }
     }
上述代码是一种用互斥锁来避免递归防护方式。
### 真实世界事件
The Dao
  * [The DAO](https://en.wikipedia.org/wiki/The_DAO_\(organization\))
  * [The DAO address](https://etherscan.io/address/0xbb9bc244d798123fde783fcc1c72d3bb8c189413#code)
## (3) call注入
**call函数调用时，应该做严格的权限控制，或直接写死call调用的函数**
在EVM的设计中，如果call的参数data是0xdeadbeef(假设的一个函数名) + 0x0000000000.....01，这样的话就是调用函数
call注入可能导致代币窃取，权限绕过，通过call注入可以调用私有函数，甚至部分高权限函数。
    addr.call(data);             
    addr.delegatecall(data); 
    addr.callcode(data);     
如delegatecall，在合约内必须调用其它合约时，可以使用关键字library，这样可以确保合约是无状态而且不可自毁的。通过强制设置合约为无状态可以一定程度上缓解储存环境的复杂性，防止攻击者通过修改状态来攻击合约。
### 真实世界事件
call注入
  * [以太坊智能合约call注入攻击](https://paper.seebug.org/624/)
  * [以太坊 Solidity 合约 call 函数簇滥用导致的安全风险](https://paper.seebug.org/633/)
## (4) 权限控制
**合约中不同函数应设置合理的权限**
检查合约中各函数是否正确使用了public、private等关键词进行可见性修饰，检查合约是否正确定义并使用了modifier对关键函数进行访问限制，避免越权导致的问题。
    function initContract() public {
        owner = msg.sender;
    }
上述代码作为初始函数不应该为public。
### 真实世界事件
Parity Multi-sig bug 1
  * [Parity Multi-sig bug 1](http://paritytech.io/the-multi-sig-hack-a-postmortem/)
Parity Multi-sig bug 2
  * [Parity Multi-sig bug 2](http://paritytech.io/a-postmortem-on-the-parity-multi-sig-library-self-destruct/)
Rubixi
  * [Rubixi](https://blog.ethereum.org/2016/06/19/thinking-smart-contract-security/)
## (5) 重放攻击
**合约中如果涉及委托管理的需求，应注意验证的不可复用性，避免重放攻击**
在资产管理体系中，常有委托管理的情况，委托人将资产给受托人管理，委托人支付一定的费用给受托人。这个业务场景在智能合约中也比较普遍。
这里举例子为transferProxy函数，该函数用于当user1转token给user3，但没有eth来支付gasprice，所以委托user2代理支付，通过调用transferProxy来完成。
    function transferProxy(address _from, address _to, uint256 _value, uint256 _fee,
        uint8 _v, bytes32 _r, bytes32 _s) public returns (bool){
        if(balances[_from]  _fee + _value) revert();
        uint256 nonce = nonces[_from];
        bytes32 h = keccak256(_from,_to,_value,_fee,nonce,address(this));
        if(_from != ecrecover(h,_v,_r,_s)) revert();
        if(balances[_to] + _value = _amount);
        balances[msg.sender] -= _amount;
        etherLeft -= _amount;
        msg.sender.send(_amount);  
    }
上面给出的代码中使用 send() 函数进行转账，因为这里没有验证 send() 返回值，如果msg.sender 为合约账户 fallback()
调用失败，则 send() 返回false，最终导致账户余额减少了，钱却没有拿到。
## (5) 代码外部调用设计问题
**对于外部合约优先使用pull而不是push**
在进行外部调用时，总会有意无意的失败，为了避免发生未知的损失，应该经可能的把对外的操作改为用户自己来取。 错误样例:
    contract auction {
        address highestBidder;
        uint highestBid;
        function bid() payable {
            if (msg.value  uint) refunds;
        function bid() payable external {
            if (msg.value = _amount);
        balances[msg.sender] -= _amount;
        etherLeft -= _amount;
        msg.sender.send(_amount);  
    }
上述代码没有校验send的返回值，如果msg.sender是合约账户，fallback调用失败时，send返回false。
所以当使用上述方法时，需要对返回值做检查并做错误处理。
    if(!someAddress.send(55)) {
        // Some failure code
    }
值得注意的一点是，作为[EVM设计](https://solidity.readthedocs.io/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions)的一部分，下面这些函数如果调用的合约不存在，将会返回True
    call、delegatecall、callcode、staticcall
在调用这类函数之前，需要对地址的有效性做检查。
## (7) 弱随机数问题
**智能合约上随机数生成方式需要更多考量**
Fomo3D合约在空投奖励的随机数生成中就引入了block信息作为随机数种子生成的参数，导致随机数种子只受到合约地址影响，无法做到完全随机。
    function airdrop()
        private 
        view 
        returns(bool)
    {
        uint256 seed = uint256(keccak256(abi.encodePacked(
            (block.timestamp).add
            (block.difficulty).add
            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add
            (block.gaslimit).add
            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add
            (block.number)
        )));
        if((seed - ((seed / 1000) * 1000)) < airDropTracker_)
            return(true);
        else
            return(false);
    }