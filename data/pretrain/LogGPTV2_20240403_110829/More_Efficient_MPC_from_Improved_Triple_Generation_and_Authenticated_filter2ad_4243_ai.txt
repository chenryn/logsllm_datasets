k=1
(cid:16)
(cid:16)
⇔ Ei,j =
⇔ Ei,j =
(cid:96)(cid:48)(cid:88)
k=1
χk ·(cid:0)xk + δk,j
(cid:17) · ∆j
yi + ei +
(cid:96)(cid:48)(cid:88)
ei +
χk · δk,j
k=1
For each j /∈ A, a corrupt Pi has the following two possible ways to cheat Pj, but succeeds with negligible
probability in both cases.
k=1 χk · δk,j) (cid:54)= 0, and thus the adversary can learn ∆j. The Pj’s check passes
with probability |S∆j| · 2−κ + 2−κ = 2dj−κ + 2−κ. Therefore, the probability, that honest party Pj does
not abort and the adversary learns ∆j, is (2dj−κ + 2−κ) · 2−dj = 2−κ + 2−(κ+dj ) < 2−κ+1.
1. If Ei,j (cid:54)= 0, then (ei +(cid:80)(cid:96)(cid:48)
2. If Ei,j = 0, then ei =(cid:80)(cid:96)(cid:48)
this implies that ei = 0. Thus, for each j /∈ A\{j0}, we have that(cid:80)(cid:96)(cid:48)
k=1 χk · δk,j unless ∆j = 0 with probability 2−κ. As δk,j0 = 0 for each k ∈ [(cid:96)(cid:48)],
k=1 χk · δk,j = 0. The probability,
that there exists some k ∈ [(cid:96)(cid:48)] such that δk,j (cid:54)= 0, is at most 2−κ, as {δk,j}k∈[(cid:96)(cid:48)] are independent of
{χk}k∈[(cid:96)(cid:48)] and χ1, . . . , χ(cid:96)(cid:48) are uniformly random.
Overall, with probability at least 1 − 4 · 2−κ, this lemma holds.
B.2 Proof of Theorem 1
Theorem 4 (Theorem 1, restated). Protocol ΠaBit shown in Figure 4 securely realizes functionality FaBit
with statistical error max{1/2ρ, 8/2κ} in the (FCOTe,FRand)-hybrid model.
Proof. Let A be a probabilistic polynomial time (PPT) adversary, who corrupts a subset of parties A ⊂ [n].
We construct a PPT simulator S that has access to the functionality FaBit and simulates the adversary’s view.
Simulator S outputs whatever A outputs before it aborts or terminates the simulation. We consider two cases
of honest Pi and malicious Pi separately. In both cases, we prove that the real world is indistinguishable
from the ideal world.
DESCRIPTION OF SIMULATOR. S emulates functionalities FCOTe and FRand, interacts with adversary A
and simulates as follows.
Case 1 (honest party Pi /∈ A):
1. For each j ∈ A, S emulates the functionality FCOTe, and receives ∆j and Kj[x1], . . . , Kj[x(cid:96)(cid:48)] from A.
Then S sends these values to FaBit.
2. For the call of FRand from A, S samples random χ1, . . . , χ(cid:96)(cid:48), and then sends them to A.
3. Acting as honest party Pi, for each j ∈ A, S computes Kj[yi] :=(cid:80)(cid:96)(cid:48)
k=1 χk · Kj[xk], samples yi ← F2κ,
and sends yi and Mj[yi] = Kj[yi]+yi·∆j to A. For each l /∈ A\{i}, S samples a random Ml[yi] ← F2κ
and sends it to dummy party Pl.
Case 2 (corrupt party Pi ∈ A):
32
1. For each corrupt party j ∈ A\{i}, S receives ∆j from A for FCOTe, and then sends ∆j to FaBit. For
j[x(cid:96)(cid:48),j] from A acting as
each j /∈ A, S emulates FCOTe and receives x1,j, . . . , x(cid:96)(cid:48),j and M(cid:48)
corrupt party Pi.
j[x1,j], . . . , M(cid:48)
2. For each j /∈ A, let ˆs and Hˆs be as in Lemma 2, i.e., |Hˆs| ≥ dj and ˆxj,l = ˆxj,l(cid:48) for all l, l(cid:48) ∈ Hˆs. This
implies xk,j[l] = xk,j[l(cid:48)] for all l, l(cid:48) ∈ Hˆs and k ∈ [(cid:96)(cid:48)]. For each k ∈ [(cid:96)(cid:48)], S sets xk,j := xk,j[l] for some
l ∈ Hˆs. For each j /∈ A, S computes ek,j := (xk,j, . . . , xk,j) + xk,j for k ∈ [(cid:96)(cid:48)]. Simulator S deﬁnes a
set Sj = {l ∈ [κ]|∃k ∈ [(cid:96)(cid:48)] s.t. ek,j[l] = 1} and sets cj := |Sj|.
3. Upon receiving (Rand, (cid:96)(cid:48)) from A, S emulates the functionality FRand, samples χk ← F2κ for each
k ∈ [(cid:96)(cid:48)], and sends these random coefﬁcients to A.
4. For each j /∈ A, S computes yi,j :=(cid:80)(cid:96)(cid:48)
Then, S computes ei,j := ˜yi + yi,j. If ei,j (cid:54)= 0, S aborts. Additionally, S receives (cid:98)Mj[yi] from A, and
k=1 χk · xk,j, and receives ˜yi from A over a broadcast channel.
then computes Ej := (cid:98)Mj[yi] +(cid:80)(cid:96)(cid:48)
j[xk,j] ∈ F2κ. If Sj = ∅, S aborts if Ej (cid:54)= 0, and sets
5. For each j /∈ A, if Sj (cid:54)= ∅, S can re-write(cid:80)(cid:96)(cid:48)
ek,j ∗ ∆j = 0 for k ∈ [(cid:96)(cid:48)] otherwise. Otherwise, S continues the simulation.
k=1 χk·(ek,j∗∆j) as Xj·tj, where Xj ∈ Fκ×|Sj|
k=1 χk · M(cid:48)
determined by {ek,j}k∈[(cid:96)(cid:48)] and {χk}k∈[(cid:96)(cid:48)], and tj ∈ F|Sj|
each l ∈ Sj. Then, S establishes the equation Xj · tj = Ej, and does the following:
– If there is no solutions for the equation, S aborts.
– If there is a unique solution for the equation (i.e., Xj has rank cj = |Sj|), S computes the solution tj,
is a matrix
is a column vector such that tj[l] = ∆j[l] for
2
2
and thus obtains a guess {∆(cid:48)
j[l]}l∈Sj from A.
– If there are at least two solutions for the equation, S aborts.
6. For each j /∈ A, if Sj (cid:54)= ∅, S sends (leak, j, Sj,{∆(cid:48)
j[l]}l∈Sj ) to FaBit. If S receives fail from FaBit, S
aborts. Otherwise, S receives success from FaBit and is conﬁrmed ∆j[l] = ∆(cid:48)
j[l] for each l ∈ Sj.
7. For each j /∈ A, if Sj (cid:54)= ∅, S computes ek,j ∗ ∆j for each k ∈ [(cid:96)(cid:48)], where ek,j[l]· ∆j[l] = 0 for all l ∈ Hˆs,
j[xk,j] + ek,j ∗ ∆j for
and S knows ek,j[l] and ∆j[l] for each l ∈ Sj. Then, S computes Mj[xk,j] := M(cid:48)
k ∈ [(cid:96)(cid:48)].
8. If there exists two different j, j(cid:48) /∈ A such that xk,j (cid:54)= xk,j(cid:48) for some k ∈ [(cid:96)], then S aborts. Otherwise,
for each k ∈ [(cid:96)], S sets xk := xk,j for some j /∈ A.
9. S sends x1, . . . , x(cid:96) and Mj[x1] := Mj[x1,j], . . . , Mj[x(cid:96)] := Mj[x(cid:96),j] to FaBit.
This concludes the description of the simulation. Below, we show that the simulation is indistinguishable
from the real protocol execution for two cases.
Analysis for Case 1. It is easy to see that the correlation and consistency checks pass in the case of honest
party Pi. For j /∈ A\{i}, Mj[yi] sampled by S has the same distribution as the one in the real protocol
k=1 χk · Kj[xk] is uniformly random in F2κ. Below, all we need to do is to prove
that yi and Mj[yi] for j ∈ A sent by S are statistically indistinguishable from the values sent by Pi in the
real protocol execution.
execution, as Kj[yi] =(cid:80)(cid:96)(cid:48)
Recall that in the real protocol execution, honest party Pi sends the following value:
yi =
χk · xk =
χk · xk +
k=1
k=1
k=(cid:96)+1
33
(cid:96)(cid:48)(cid:88)
(cid:96)(cid:88)
(cid:96)+κ+ρ(cid:88)
χk · xk.
2
(cid:96)(cid:48)(cid:88)
k=1
k=1 χk·M(cid:48)
k=1
k=1
k=1
χk · (ek,j ∗ ∆j)
=
χk · Kj[xk,j] +
χk · xk,j
χk · (ek,j ∗ ∆j) .
M(cid:48)
j[yi] =
χk · M(cid:48)
j[xk,j] =
(cid:96)(cid:48)(cid:88)
(cid:96)(cid:48)(cid:88)
k=1
k=1
(cid:17) · ∆j +
= Kj[yi] + yi,j · ∆j +
The second summation corresponds to the image of a linear map ψ : Fκ+ρ
that the map ψ has full rank with probability 1 − 2−ρ. In this case,(cid:80)(cid:96)+κ+ρ
(cid:55)→ Fκ
2. From Lemma 3, we know
k=(cid:96)+1 χk · xk is uniformly random
in F2κ, since (x(cid:96)+1, . . . , x(cid:96)+κ+ρ) are sampled uniformly at random by honest Pi. Thus yi in the real world
is statistically indistinguishable from the value simulated by S. Finally, Mj[yi] has the same distribution in
both worlds, since there is only one Mj[yi] satisfying the equation Mj[yi] = Kj[yi] + yi · ∆j.
Analysis for Case 2. Without loss of generality, we ﬁrst ﬁx an honest party Pj /∈ A and analyze the
simulation of S. In the real protocol execution, if Pj does not abort, then (cid:98)Mj[yi] = Kj[yi] + ˜yi · ∆j =
Kj[yi] + yi,j · ∆j + ei,j · ∆j, where Kj[yi] =(cid:80)(cid:96)(cid:48)
k=1 χk · Kj[xk,j]. Besides, we have that
(cid:96)(cid:48)(cid:88)
(cid:16) (cid:96)(cid:48)(cid:88)
(cid:96)(cid:48)(cid:88)
j[xk,j] = (cid:98)Mj[yi]+M(cid:48)
From Ej = (cid:98)Mj[yi]+(cid:80)(cid:96)(cid:48)
χk · (Kj[xk,j] + xk,j · ∆j + ek,j ∗ ∆j)
j[yi], we have Ej =(cid:80)(cid:96)(cid:48)
k=1 χk·(cid:0)ek,j∗∆j
k=1 χk ·(cid:0)ek,j ∗ ∆j
(cid:1) in both worlds with probability
if the protocol does not abort, we have that Ej = (cid:80)(cid:96)(cid:48)
Since A knows ek,j ∗ ∆j for k ∈ [(cid:96)(cid:48)] and Ej, we have that ei,j = 0 unless A learns the global key ∆j.
The probability that the Pj’s check passes is |S∆j| · 2−κ + 2−κ = 2dj−κ + 2−κ. By Lemma 2, we have
that S∆j restricted to the bits corresponding to Hˆs has entropy at least dj. Therefore, with probability at
most 2−dj , A guesses successfully the bits {∆j[l]}l∈Hˆs. Overall, the probability that ei,j (cid:54)= 0 and the Pj’s
check passes is 2−dj · (2dj−κ + 2−κ) = 2−κ + 2−(κ+dj ). Therefore, the probability, that S aborts in Step 4
of the simulation but the real protocol execution does not abort, is 2−κ + 2−(κ+dj ) = negl(κ). As a result,
1 − negl(κ).
If Sj = ∅, i.e., ek,j = 0 for all k ∈ [(cid:96)(cid:48)], then it is easy to see that the simulation of S is indistinguishable
from the real protocol execution. Below, for each j /∈ A, we only consider the case that Sj (cid:54)= ∅. If the
equation Xj · tj = Ej has no solutions, this means that the real protocol execution will abort, which is
the same as the simulation. If this equation has a unique solution (i.e., Xj has rank cj = |Sj|), then S
can extract a guess made by A about global key ∆j, and forwards a decision from FaBit to A. Clearly,
in this case, the simulation of S is indistinguishable from the real protocol execution. If this equation has
at least two different solutions, it means that matrix Xj has rank < cj. By Lemma 3, we know that this
happens with probability at most 2−dj . In the real protocol execution, the probability that Pj does not abort
is |S∆j| · 2−κ + 2−κ = 2dj−κ + 2−κ. In all, the probability, that S aborts in Step 5 of the simulation but
the real protocol execution will not abort, is bounded by 2−dj · (2dj−κ + 2−κ) = 2−κ + 2−(κ+dj ), which is
negligible in κ. From Lemma 4, the probability that S aborts in Step 8 of the simulation is negligible in κ.
Therefore, the simulation of S is indistinguishable from the real protocol execution.
(cid:1)+ei,j·∆j.
In all, we have that the simulation is statistically indistinguishable from the real protocol execution,
except with probability at most 1/2ρ for Case 1 and 8/2κ for Case 2. The outputs of honest parties are either
independent from the adversary’s view or always determined uniquely by their independent inputs and the
outputs of corrupt parties. Therefore, we obtain that the joint distribution of the outputs of honest parties
and adversary A in the real world execution is statistically indistinguishable from the joint distribution the
outputs of honest parties and simulator S in the ideal world execution, which completes the proof.
34
Functionality FaShare
Initialize: Upon receiving (init) from all parties, sample ∆i ← {0, 1}κ for i /∈ A and receive ∆i ∈ {0, 1}κ from
the adversary for i ∈ A. Store ∆i for i ∈ [n] and send ∆i to party Pi.
Authentication: Upon receiving (aShare, (cid:96)) from all parties, sample x1, . . . , x(cid:96) ← {0, 1} and generate authenti-
cated shares {(cid:104)xk(cid:105)}k∈[(cid:96)] by executing AuthShare(xk) deﬁned in Figure 1 for k ∈ [(cid:96)].
Selective failure leakage: Wait for the adversary to input (leak, i, S,{∆(cid:48)[k]}k∈S). If Pi is honest, this function-
ality executes the macro GKleak(i, S,{∆(cid:48)[k]}k∈S) deﬁned in Figure 1.
Figure 12: Functionality for authenticated shares.
C Complexity and Security of Our Authenticated Share Protocol
We have already described the authenticated share protocol ΠaShare in Section 3.2. In the following, we
analyze the rounds and communication complexity for protocol ΠaShare. Then, we prove that protocol
ΠaShare securely realizes functionality FaShare shown in Figure 12 in the (FaBit,FCom)-hybrid model.
C.1 Communication Complexity
Now, we analyze the rounds and communication cost of protocol ΠaShare (Figure 5) involving the cost of our
authenticated bit protocol ΠaBit. Without considering the base OT protocol in the initialization phase, our
protocol ΠaShare needs 4 rounds of communication. When the base OT protocol such as [PVW08, CO15,
CSW20] is used, one extra round is required, as random zero shares can be computed in parallel with the
base OT protocol. Note that all the calls of FaBit (related to the executions of ΠaBit) can be made in parallel.
The communication cost per party is dominated by (n − 1)((cid:96) + 2κ + ρ)κ bits for generating authenticated
shares. The consistency check needs only about 5nκ bits of extra communication, which is negligible for a
moderate large (cid:96).
C.2 Proof of Security
In the following, we provide the detailed security proof of our protocol ΠaShare. First we can see that ΠaShare
is correct when all parties are honest, because
n(cid:88)
j=1
(cid:88)
j(cid:54)=i
i = (yi + y) · ∆i +
zj
i +
zj
i = zi
= (yi + y) · ∆i +
(cid:88)
j(cid:54)=i
(cid:0)Ki[yj] + Mi[yj](cid:1)
(cid:88)
j(cid:54)=i
yj · ∆i = y · ∆i + y · ∆i = 0.
In the (init) command of FaBit, a corrupt party Pi may deviate the protocol by providing inconsistent inputs
∆i with two different honest parties. We deﬁne ∆i,j to be actual inputs used by corrupt Pi, i.e., Pi sends
(init, j, ∆i,j) to FaBit. Without loss of generality, we pick an honest party Pj0 and ﬁx ∆i = ∆i,j0. We deﬁne
Ri,j := ∆i,j + ∆i for j (cid:54)= i, and thus Ri,j0 = 0. Note that Ri,j is ﬁxed in the initialization phase. In the
following lemma, we prove that a corrupt party Pi is impossible to provide inconsistent global keys ∆i,j
with different honest parties Pj /∈ A.
Lemma 5. If all honest parties do not abort in protocol ΠaShare, then for every corrupted party Pi ∈ A, all
the global keys ∆i,j are consistent with probability 1 − 1/2κ, i.e., Ri,j = 0 for each j /∈ A.
Proof. In Step 6 of protocol ΠaShare, if all corrupt parties are semi-honest, then every corrupt party Pi
i=1 ˜yi. However, every malicious party Pi ∈ A may broadcast an
broadcasts ˜yi and computes y := (cid:80)n
35
adversarial value ˆyi, such that ˆy := (cid:80)
(cid:80)
adversary’s choice. We deﬁne zj
The corrupt parties may deviate the protocol by committing the values ˆzk
i /∈A ˜yi = y + e, where e is an additive error of the
i to be the value committed by a party Pj when Pj behaves honestly.
i for k ∈ A, in such a way that
k∈A ˆzk
If a malicious party Pi tries to cheat, then it has to pass the check in Step 8 of protocol ΠaShare. Therefore,
i + Ei, where Ei is an adversarially chosen error.
i =(cid:80)
k∈A zk
i∈A ˆyi +(cid:80)
we have the following: