# Cryptographic Tamper Evidence

**Author:** Gene Itkis  
**Affiliation:** Boston University Computer Science Department  
**Address:** 111 Cummington St., Boston, MA 02215, USA  
**Email:** [PI:EMAIL]

## Abstract
We introduce a new concept of cryptographic tamper evidence. A tamper-evident signature scheme includes an additional procedure, Div, which can detect tampering by comparing two signatures and determining if one was generated by a forger. This detection is possible even after the adversary has inconspicuously learned some or all of the system's secrets. In such cases, it may be impossible to distinguish between a legitimate signature and a forged one, but the fact that tampering occurred will be evident.

We define several variants of tamper-evident schemes, each with different capabilities for detecting tampering. In all variants, we assume an equally powerful adversary who can control all inputs to the legitimate signer, observe all outputs, and expose all secrets at arbitrary times. We provide tamper-evident schemes for each variant, some of which use combinatorial constructions of α-separating sets, which may be of independent interest. Our schemes are optimal, as we prove tight lower bounds that are information-theoretic and cannot be broken by introducing number-theoretic or algebraic complexity assumptions.

Our mechanisms are purely cryptographic: the tamper-detection algorithm Div is stateless and takes only two signatures as input, uses no infrastructure, and relies on no hardware properties except those implied by standard cryptographic assumptions. All constructions in this paper are based on ordinary signature schemes and do not require random oracles.

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

**CCS’03, October 27–31, 2003, Washington, DC, USA. Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.**

**Categories and Subject Descriptors:**
- E.3 [Data]: Data Encryption—Public Key Cryptosystems
- C.2.0 [Computer-Communication Networks]: General—Security and Protection
- K.6.5 [Management of Computing and Information Systems]: Security and Protection

**General Terms:**
- Security

**Keywords:**
- Digital signatures, exposures, tamper evidence, key evolution, evolving cryptosystems

## 1. Introduction

Key exposure is a well-known threat in cryptography. For signatures, the exposure of a secret key compromises the corresponding public key. After detecting the exposure, compromised keys can be revoked. Traditionally, exposure detection has been handled outside the scope of cryptography, often relying on hardware and heuristic forensics. It might seem that if an adversary inconspicuously learns all the secrets within a system, cryptographic tools become ineffective.

This paper challenges this perception by providing a cryptographic mechanism to detect the presence of an adversary within the system, even after the adversary has learned all the secrets. While it may still be impossible to distinguish forger-generated signatures from legitimate ones, our mechanisms can at least make the tampering evident.

### 1.1 Related Work

**Key Exposures: Avoidance and Damage Containment.**
Several mechanisms have been proposed to minimize damage from break-ins, including threshold, proactive, remotely-keyed, all-or-nothing protection, key-insulated, intrusion-resilient, and other models. These methods typically protect secrets by distributing them among multiple modules, so a compromise of some (but not all) modules results in only partial exposure, whose effects are then minimized.

In this paper, we focus on total and inconspicuous exposures of all secrets within the system at the time of compromise. For such exposures, forward-security has been defined and achieved, preserving security prior to exposures. However, none of the above approaches provide help after the exposure, including with exposure detection.

**Fail-Stop Signatures.**
Tamper-evident signatures should be distinguished from fail-stop signatures, which do not address the issue of an adversary learning the signer’s secrets. Instead, they help in the case of a computationally powerful adversary. In the fail-stop model, each public key has many valid private key values. An adversary may compute all or a random subset of these private keys but cannot determine which key the signer knows. The signer can repudiate a forged signature by proving he does not know the specific private key used. This approach does not offer help in the case of an adversary exposing the signer’s secret keys.

**Coercive Exposures.**
Some previous work addresses coercive scenarios where a legitimate signer is forced to produce signatures or expose secret keys. The coerced signer may use subliminal communication to inform authorities of the duress. Another approach is monotone signature schemes, which allow the verification algorithm to be updated after an attack. The signer can reveal some secrets to the adversary, enabling the adversary to generate valid signatures according to the current verification algorithm. However, the verification algorithm can be updated to invalidate the adversary’s signatures while keeping the legitimate signer’s signatures valid. Neither of these approaches applies to total exposures, though exploring the relationship between tamper-evidence and these approaches could be interesting.

### 1.2 Our Contribution: Tamper Evidence

We consider the situation where the adversary inconspicuously learns all secrets of the system at some unknown point in time. Our goal is to provide security after such undetected total exposures.

**Intuition.**
Suppose at time \( t_e \) the adversary learns all the secrets. At \( t_e \), the adversary is indistinguishable from the legitimate signer and can generate valid signatures. However, the system now contains two versions: the legitimate signer and the forger. If the signer evolves in a randomized fashion, the two versions will diverge, and this divergence might be detectable after \( t_e \).

**Approach.**
We capture this divergence in our definitions using key-evolving schemes, originally defined for forward-security. True randomness in key evolution is crucial for tamper-evident schemes, as pseudo-randomness can be exposed. In contrast, forward-secure signatures can use pseudo-randomness. Using true randomness allows us to achieve and detect divergence, which constitutes tamper-evidence.

**Variants and Constructions.**
We define several variants of tamper-evidence, allowing the forger to adaptively determine all messages to be signed and their timing. The strongest variant guarantees divergence detection for any two signatures generated by the signer and forger after the exposure. We present a strong tamper-evident signature scheme with a linear performance penalty and prove that no better scheme is possible. More efficient schemes are possible for weaker notions of tamper-evidence: perfectly-synchronous and α-synchronous tamper-evidence.

- **Perfectly-Synchronous Tamper-Evidence:** Detects divergence when the two given signatures are generated at the same time period after the key exposure.
- **α-Synchronous Tamper-Evidence:** Generalizes the notions, guaranteeing divergence detection as long as the time periods of the two signatures are relatively closer to each other than to the exposure time. The exact relative proximity is characterized by the parameter \( \alpha \) (\( \alpha = 0 \) for strong and \( \alpha = \infty \) for perfectly-synchronous tamper-evidence).

We present both perfectly- and α-synchronous tamper-evident schemes. The cost of the first one is only twice that of an ordinary signature scheme. For any finite constant \( \alpha > 0 \), we construct an α-synchronous tamper-evident scheme with a logarithmic factor overhead. All constructions are generic, based on any ordinary signature schemes and rely on combinatorial methods.

**Using Perfect and α-Synchronous Tamper-Evident Signatures.**
It is desirable to provide maximum security for all applications. However, this may often be impractical due to performance constraints. Therefore, we explore the trade-offs between security and efficiency in our constructions.