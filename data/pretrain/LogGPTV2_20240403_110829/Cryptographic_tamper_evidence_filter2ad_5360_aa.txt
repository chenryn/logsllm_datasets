title:Cryptographic tamper evidence
author:Gene Itkis
Cryptographic Tamper Evidence
Boston University Computer Science Dept.
Gene Itkis
111 Cummington St.
Boston, MA 02215, USA
PI:EMAIL
ABSTRACT
We propose a new notion of cryptographic tamper evidence.
A tamper-evident signature scheme provides an additional
procedure Div which detects tampering: given two signa-
tures, Div can determine whether one of them was gener-
ated by the forger. Surprisingly, this is possible even after
the adversary has inconspicuously learned (exposed1) some
— or even all — the secrets in the system. In this case, it
might be impossible to tell which signature is generated by
the legitimate signer and which by the forger, but at least
the fact of the tampering will be made evident.
We deﬁne several variants of tamper-evidence, diﬀering in
their power to detect tampering. In all of these, we assume
an equally powerful adversary: she adaptively controls all
the inputs to the legitimate signer (i.e., all messages to be
signed and their timing), and observes all his outputs; she
can also adaptively expose all the secrets at arbitrary times.
We provide tamper-evident schemes for all the variants.
Some of our schemes use a combinatorial construction of
α-separating sets, which might be of independent interest.
The schemes are optimal: we prove tight lower-bounds.
These lower bounds are perhaps the most surprising result
of this paper. The lower bounds proofs are information-
theoretic, and thus cannot be broken by introducing number-
theoretic or algebraic complexity assumptions.
Our mechanisms are purely cryptographic: the tamper-
detection algorithm Div is stateless and takes no inputs ex-
cept the two signatures, it uses no infrastructure (or other
ways to conceal additional secrets), and relies on no hard-
ware properties (except those implied by the standard cryp-
tographic assumptions, such as random number generators).
All constructions in this paper are based on arbitrary or-
dinary signature schemes and do not require random oracles.
1We say that a secret is exposed when it becomes known
to the adversary. Exposure does not imply that the secrets
become publicly known. Moreover, nobody — except the
adversary — is aware of the exposure taking place.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption—Public Key Cryptosystems;
C.2.0 [Computer-Communication Networks]: General—
security and protection; K.6.5 [Management of Comput-
ing and Information Systems]: Security and Protection
General Terms
Security
Keywords
digital signatures, exposures, tamper evidence, key evolu-
tion, evolving cryptosystems
1.
INTRODUCTION
Key exposure is a well-known threat for any cryptographic
tool. For signatures, exposure of a secret key compromises
the corresponding public key. After the exposure is detected,
the compromised keys can be revoked. This detection of the
exposure has previously been dealt with outside the scope of
cryptography (e.g., delegated to hardware and/or heuristic
“forensics”). Indeed, it may seem that if an adversary in-
conspicuously learns all the secrets within the system, then
the cryptographic tools are helpless against her.
This paper challenges this perception: it provides a cryp-
tographic mechanism to detect adversary’s presence within
the system even after the adversary has learned all the se-
crets. Thus, while it still might not be possible to distinguish
the forger-generated signatures from the legitimate ones, our
new mechanisms can at least make the tampering evident.
1.1 Related work
Key exposures: avoidance and damage containment.
Some mechanisms to minimize the damage from break-ins
have been proposed in the past. These include threshold [9,
28, 6], pro-active [27, 16, 8], remotely-keyed [4, 24, 5], all-
or-nothing protection [7], key-insulated [10, 11], intrusion-
resilient [19, 17], and other models and approaches. In these
methods, secrets are typically protected by being distributed
(shared among multiple modules). Thus a compromise of
some (but not all) modules results in only a partial exposure,
whose eﬀects are then minimized.
In this paper, however, we focus on total and inconspic-
uous exposures of all the secrets within the system at the
time of the compromise. For such exposures, only forward-
security has being deﬁned [2, 3] and achieved [2, 3, 23, 1,
18, 25, 17, 22]: a forward-secure system preserves its security
355prior to exposures (e.g., forward-secure signatures issued be-
fore an exposure remain secure even after the exposure takes
place). None of the above approaches provided help after the
exposure, including with exposure detection.
Fail-stop signatures. Tamper-evident signatures should
be distinguished from the fail-stop signatures [29]: the fail-
stop signatures do not address the issue of dealing with an
adversary who learned the signer’s secrets.2 Instead, they
help only in the case of a computationally powerful adver-
sary. Namely, in the fail-stop model, each public key has
a large number of valid private key values corresponding to
it. An adversary may be computationally powerful enough
to compute all (or a random subset) of these private keys,
but she still cannot determine which of these keys is known
to the signer. Given a signature forged by such an adver-
sary, the signer can repudiate it by proving that he does not
know the speciﬁc private key that must have been used to
forge the signature (the signer is assumed to be much more
computationally limited than the adversary — without this
assumption, the signer can easily repudiate any of his signa-
tures). Thus, that approach too does not oﬀer any help in
the case of adversary exposing the signer’s secret keys.
Coercive exposures. Some previous work addresses coer-
cive scenarios: when a legitimate signer is forced to produce
either some signatures or even expose his secret keys. Such
a coerced signer may be able to use some kind of subliminal
communication embedded in the signature (or key) to in-
form the authorities that the signatures and/or secret keys
were extracted from the signer under duress (see, e.g., [15]).
Another approach to dealing with coercive exposures pro-
posed monotone signature schemes [26], which allow the ver-
iﬁcation algorithm to be updated after an attack. Namely,
under duress the signer can reveal some (but not all!) of
his secrets to the adversary. These secrets enable the ad-
versary to generate signatures that are valid according to
the current veriﬁcation algorithm. However, this veriﬁca-
tion algorithm can then be updated so that all the signa-
tures generated by the legitimate signer (before or after the
update) remain valid, but all the signatures generated by
the adversary are not valid under the updated veriﬁcation.
(If the updated veriﬁcation algorithm is never made public,
this method gives a variant of the funkspiel of [15].)
Neither of these approaches applies in the case of total
exposures (even if these are not inconspicuous). However, it
may still be interesting to explore the relationship between
tamper-evidence and these approaches — indeed one such
connection served as a starting point for [20].
1.2 Our contribution: Tamper Evidence
In contrast to the previous work, we consider the situation
where the adversary inconspicuously learns all secrets of the
system at some (unknown) points of time. Our goal is to
provide security after such undetected total exposures.
Intuition. Suppose at time te the adversary learns all the
secrets. Then, clearly, at te she is indistinguishable from the
legitimate signer (in particular, she has all his keys), and
thus she can generate valid signatures. However, the system
2In fact, in [29], the authors write “Naturally, this possibility
of distinguishing forged signatures from authentic signatures
only exists as long as forger has not stolen the signer’s key”.
We show that this observation does not fully apply to the
key-evolving signatures (introduced after the above paper).
State
S
F
et
t
1
t
2
Time
Figure 1: Divergence of forger and signer. Signer’s
secrets are exposed at time te. It still may be pos-
sible to tell whether signatures, generated at t1, t2 >
te, originated from the diﬀerent “branches” (one
signer’s, the other – forger’s).
has changed fundamentally: instead of having a single entity
— the legitimate signer — it now contains two “versions”
running at the same time. Now, if the signer evolves in some
randomized fashion, then the two versions will diverge (see
Fig. 1), and this divergence might be detectable after te.
Approach.
Indeed, this divergence is exactly what we
capture in our deﬁnitions. We use key-evolving schemes (de-
ﬁned originally for forward-security [3]) as the basis for our
deﬁnitions. Any direct connection between tamper-evident
and forward-secure signatures stops at that. In particular,
it is crucial for the tamper-evident schemes to use true ran-
domness for the evolution. Even pseudo-randomness is not
suﬃcient, since the seed might be exposed too. In contrast,
for forward-secure signatures, randomness — even if used, as
in [3] — can be replaced with pseudo-randomness (as done
in [23] to achieve some optimizations). Using true random-
ness in key evolution allows us to achieve and then detect
divergence of the signer’s and forger’s versions. Detection of
this divergence is exactly what constitutes tamper-evidence
— thus the name Div for the new procedure, which given
two signatures will test whether they were generated by the
diverged versions (see sec. 2).
Variants and constructions. We deﬁne several variants
of tamper-evidence. In all the variants we allow the forger
F to adaptively determine all the messages to be signed by
the legitimate signer S, and the times when they are to be
signed, before and/or after the exposure and/or the forgery.
The strongest variant guarantees divergence detection
given any two signatures generated by S and F at any two
time periods after the exposure (it is impossible to do any-
thing beyond forward-security for the periods before the ex-
posure3). We present a such a strong tamper-evident signa-
ture scheme. This scheme is relatively simple and imposes
linear performance penalty. However, we prove that no bet-
ter scheme is possible. This lower bound (in the strongest
3We can limit the window of vulnerability to the period of
the exposure by combining tamper-evidence with forward-
security. This window of vulnerability is even narrower if
tamper-evidence is combined with intrusion-resilience.
—information-theoretic— sense) is perhaps the most sur-
prising result of this paper.
Fortunately, much more eﬃcient schemes are possible for
slightly weaker notions of tamper-evidence: perfectly- and
α- synchronous tamper-evidence.
Perfectly-synchronous tamper-evidence works with the
same powerful adversary, but guarantees to detect diver-
gence only when the two given signatures are generated by
the signer S and the forger F at the same time period after
the key exposure.
These notions of
strong and perfectly-synchronous
tamper-evidence are the extreme cases considered here.
α-synchronous tamper-evidence generalizes these notions:
here the divergence detection is guaranteed as long as the
time periods of the two signatures are relatively closer to
each other than to the exposure time. The exact relative
proximity —synchronization— is characterized by the pa-
rameter α (α = 0 yielding the strong and α = ∞ — the
perfectly-synchronous tamper-evidence).
We present both perfectly- and α- synchronous tamper-
evident schemes. The cost of the ﬁrst one is only twice that
of an ordinary signature scheme. For any ﬁnite constant α >
0, we construct an α-synchronous tamper-evident scheme
with a logarithmic factor overhead (with α appearing in the
base of the logarithm).
All constructions are generic: can be based on any ordi-
nary signature schemes, and rely on combinatorial methods.
Using perfect and α-synchronous tamper-evident
signatures.
It is obviously desired to provide the max-
imum security for all applications. However, this may often