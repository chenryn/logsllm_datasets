experiments an average of ﬁve instructions per second were
executed using the GDB stub through a 38400 baud UART
connection.
The reason why memory operations need to be forwarded
in the ﬁrst place is that different embedded systems typically
have different mappings of addresses to memory regions. Some
of these memory regions are used for code (in RAM, ROM or
Flash memories), stack and heap, but one or several regions
will be used to access registers of physical peripherals through
Memory-Mapped I/O (MMIO). In this case, any I/O operation
on those areas is equivalent to sending and receiving data from
an external device. If these address ranges are known, the user
can conﬁgure Avatar to keep every read-only memory (such
as the code segment) on the emulator. Read-write memory
regions can also be marked as local
to the emulator, but
modiﬁcations to them need to be tracked by Avatar to be able
to transfer those changes to the target at a later context switch.
In fact, when an emulator-to-target context switch happens, all
modiﬁed local memory (“dirty memory”) needs to be copied
to the target before the execution can resume on the embedded
device.
However, in most of the cases the user does not know a
priori which area of memory is assigned to I/O. For this reason,
Avatar includes an automated memory optimization plugin
that monitors the execution in the emulator and automatically
identiﬁes the regions that do not require access to the hardware.
This includes the stack (easily identiﬁed by the execution
of stack-related operations) and the code segment (identiﬁed
by the values of the program counter). For any other area,
Avatar starts by forwarding the read and write operations to
the target device. It then keeps track of the values that are
returned and applies a simple heuristic: if the target always
returns the value that was previously written by the ﬁrmware
code (or if it always returns the same value and it is never
written by the ﬁrmware) then it is probably not assigned to a
memory mapped device.
Table I shows an example of how many memory accesses
could be saved by keeping memory regions local to the emu-
lator: transferring the code region to the emulator would save
61,632 memory accesses (88%). Moving the stack and data
region in local memory as well would save 64,073 memory
accesses (92%). Only the I/O accesses cannot be moved to the
emulator’s memory.
B. Selective Code Migration
So far, we assumed that the ﬁrmware is either running
entirely inside the emulator, or entirely on the embedded
device. The user can instruct Avatar to switch from one mode
to the other when certain conditions are met, but such context
switches are time consuming.
In this section we present a ﬁne-grained solution that
allows the user to migrate only parts of the ﬁrmware code
back to the target. This technique allows to overcome two
limitations of the full-separation mode. Some code blocks
need to be executed atomically, for example when there are
timing constraints on the code. We will describe such a case
in Section VI-A, where we encountered a function that read
the timer twice and waited for the difference to be below
a certain limit. Another example is when delays introduced
by Avatar would lead the target
in an invalid state. We
encountered such a case during the DRAM initialization of
the HDD, as shown in Section VI-A).
The second limitation addressed by selective code migra-
tion is related to the analysis performance. In fact, certain
functions (e.g., polling loops and interrupt handlers) can be
executed signiﬁcantly faster when run natively on the target.
In the current Avatar prototype, code migration is sup-
ported at a function level. In this case, the code can be copied
to its location in the target’s memory without modiﬁcation. Its
exit points are then replaced by breakpoints, and the virtual
machine register state is transferred from the emulator to the
target. The execution is resumed on the target until one of
the exit breakpoints is triggered, and at that point the state is
transferred back to the emulator. This transition is much faster
than a complete context switch, since Avatar only needs to
transfer few bytes and not the entire content of the memory.
Even though this simple technique is enough to circumvent
critical code regions in several real world scenarios, it neglects
some difﬁculties that may affect code migration. First, the code
may read or write arbitrary memory locations associated, for
example, with global variables. Avatar keeps track of those
locations, copy their content over to the target before the
execution, and copy written locations back after the execution.
Second, the code may use instructions that change the control
ﬂow in unforeseen ways, like software interrupts, processor
mode changes, and indirect jumps.
Our framework prototype addresses these issues by per-
forming an on-the-ﬂy static analysis. When a function is
selected for code migration, Avatar disassembles its code
using the llvm-mc disassembler. The result is then analyzed
to identify critical instructions. In this way, we can predict
memory accesses outside the function stack, compute the
control ﬂow of the code and verify that no instructions can
escape from this computed control ﬂow. As we describe in
Section VI, this technique is sufﬁcient to migrate small, atomic
functions. However, we plan to extend the capabilities of
the code migration system to apply transformations to the
code. On the one hand, those transformations will allow to
ensure that instructions which are not statically veriﬁable (e.g.,
indirect jumps) will not escape the proxy’s sandbox. On the
other hand,
it can be used to track memory accesses, so
that only the modiﬁed (“dirty”) part of the state needs to be
copied back from the target to the emulator when a context
switch happens. Those critical instructions will be replaced
with instrumentation code that calls functions in proxy, which
will handle them in a safe way.
V. EXTENDING AVATAR
Avatar’s architecture is designed to be modular and its base
framework can be easily customized to ﬁt different analysis
scenarios. We chose S2E as default Avatar emulator back-end
because it offers many hooks and manipulation facilities on
top of QEMU which facilitates the development of custom
dynamic analysis plugins.
In this section, we show an example of an Avatar extension:
we built upon its core capabilities to support selective symbolic
execution. For this we add several features and plugins to
the ARM port of S2E. Moreover, we believe the symbolic
execution engine provides a super-set of the capabilities needed
to implement taint analysis, even though a targeted plugin
could be needed to perform concrete data tracking and taint
analysis in a more lightweight way.
In the rest of this section we describe the technique
Avatar employs to fully exploit the symbolic engine of S2E and
perform selective symbolic execution on unmodiﬁed portions
of ﬁrmware blobs. Moreover, we show how we use our
extended version of S2E in Avatar to dynamically detect
potential control ﬂow corruption vulnerabilities by injecting
and tracking symbolic inputs.
A. Injecting Symbolic Values Into the Firmware’s Execution
Flow
In the ﬁeld of program testing, symbolic execution is
a technique employed to improve code coverage by using
symbols as input data (instead of concrete values) and keeping
track of constraints upon their manipulation or comparison
(c.f. [51]). The result of symbolic evaluation is an execution
tree, where each path is a possible execution state that can
be reached by satisfying the constraints associated to each
symbolic value.
S2E further develops this concept by performing selective
symbolic execution, i.e., by restricting the area of symbolic
execution to speciﬁc code portions and treating only speciﬁc
input data as symbolic [15]. This greatly helps to speedup
the analysis process (as symbolic execution of code results in
signiﬁcant slowdowns) and to drive the exhaustive symbolic
exploration into selected regions of code. This process requires
Avatar to control the introduction of symbolic values into S2E,
in place of existing real values.
The remote memory interface between S2E and Avatar, as
introduced in Section III, ensures that only concrete values
reach the real hardware through Avatar. Symbolic values re-
main therefore conﬁned to the emulation domain. If a symbolic
value is about to be written to the target hardware, the remote
memory interface in S2E performs a forced concretization
before forwarding it. Such symbolic value concretizations
happen in two stages. First, all the constraints associated with
the value are retrieved and evaluated by the integrated SAT-
solver. Second, a single example value which satisﬁes all the
constraints is forwarded to Avatar to be written on the target.
On the one hand, making Avatar handle only concrete
values leaves it as a controller with a simpler external view
of S2E and avoids having to keep track of execution paths
and paths conditions twice. On the other hand, this choice
brings the minor drawback that Avatar has no direct control
7
on symbolic execution, which is instead under the control of
S2E/KLEE.
We designed a simple plugin for detecting arbitrary exe-
cution conditions. It relies on the following heuristics as signs
of possibly exploitable conditions:
•
•
•
a symbolic address being used as the target of a load
or store instruction,
a symbolic address being leaked into the program
counter (e.g., as the target of a branch),
a symbolic address being moved into the stack pointer
register.
In order to selectively mark some input data as symbolic,
two different approaches can be taken: either modify the
binary code (or the source code, if available) to inject cus-
tom instructions into the ﬁrmware, or dynamically instrument
the emulation environment to specify the scope of symbolic
analysis at run-time. The ﬁrst approach requires some high-
level knowledge of the ﬁrmware under analysis (e.g., access
to source code) and the guarantee that injecting custom in-
structions into ﬁrmware code would not affect its behavior.
Examples include the Android Dalvik VM, whose source code
can be modiﬁed and rebuilt to enable transparent analysis of
pristine Java bytecode with S2E [36].
Since we did not want to limit Avatar to this scenario,
we decided to follow the second approach, which requires to
extend the symbolic engine and the Avatar framework. Such
extensions should know when symbolic execution has to be
triggered and where symbolic values should be injected.
This choice leads to two major advantages:
•
Firmware Integrity
The binary code is emulated as-is, without injecting
custom opcodes or performing recompilation. This
guarantees that
the emulated code adheres to the
original ﬁrmware behavior (i.e., no side-effects or bugs
are introduced by the intermediate toolchain)
Programmatic Annotation
The control and data ﬂow of ﬁrmware emulation can
be manipulated and annotated with symbolic meta-
data in an imperative way. A high-level language (Lua)
is used to dynamically script and interact with current
emulation environment, as well as introducing and
tracing symbolic meta-data.
•
For this we ﬁrst completed the port of S2E to the ARM
architecture in order to have complete symbolic execution
capabilities, then we ported the Annotation plugin to the ARM
architecture. The Annotation plugin lets the user specify a
trigger event (e.g., a call/return to a speciﬁc subroutine or the
execution of code at a speciﬁc address), and a Lua function
to be executed upon the event. A simple API is then provided
to allow for manipulation of the S2E emulation environment
directly from the Lua code. Avatar provides direct channels to
dynamically control the emulation ﬂow via QMP command
messages. These channels can also be used to inject Lua
code at run-time, in order to dynamically generate annotations
which depend on the current emulation ﬂow and inject them
8
back into S2E. Once symbolic values are introduced in the ex-
ecution ﬂow, S2E tracks them and propagates the constraints.
Symbolic analysis via Lua annotations is intended to be
used as a tool for late stage analysis, typically to ease the
discovery of ﬂaws in logic-handling code, with hand-made
Lua analysis code directly provided by the user. It can be
employed in both full separation mode and context switching,
as soon as code execution can be safely moved to the emulator
(e.g., outside of raw I/O setup routines, sensors polling). This
normally happens after an initial analysis has been done with
Avatar to detect interesting code and memory mappings.
A similar non-intrusive approach has already been used
in a x86-speciﬁc context,
to test and reverse-engineer the
Windows driver of a network card [14]. To the best of our
knowledge, however, this technique has never been applied
before to embedded devices. In the context of ﬁrmware se-
curity testing, annotations can be used in a broad range of
scenarios. In Section VI, we present how we applied this
technique to different technologies and devices, to perform
dynamic analysis of widespread embedded systems such as
hard drives, GSM phones, and wireless sensors.
B. Symbolically Detecting Arbitrary Execution Conditions
When dealing with modern operating systems, an incorrect
behavior in a user-space program is often detected because
an invalid operation is performed by the program itself. Such
operations can be, for example, an unauthorized access to a
memory page, or the access to a page that is not mapped in
memory. In those cases, the kernel would catch the wrong
behavior and terminate the program, optionally triggering some
analysis tools to register the event and collect further informa-
tion that can later be used to identify and debug the problem.
Moreover,
thanks to the wide range of exploit mitigation
techniques in place today (DEP, canaries, sandboxing and
more), the system is often able to detect the most common
invalid operations performed by userspace processes.
When dealing with embedded systems, however, detecting
misbehavior in ﬁrmware code can be more difﬁcult. The
observable symptoms are not always directly pinpointed to
some speciﬁc portion of code. For example, many ﬁrmware
are designed for devices without a Memory Management Unit
(MMU) or Memory Protection Unit (MPU) or are just not
using them. In such a context, incorrect memory accesses
often result in subtle data corruption which sometimes leads
to erratic behaviors and rare software faults, such as random
events triggering, UI glitches, system lock or slowdown [18].
For this reason, it is common for embedded devices to have a
hardware watchdog in charge of resetting the device execution
in case of any erratic behavior, e.g., a missed reply to timed
watchdog probes.
For these reasons, detecting incorrect execution inside
the emulation is easier when some OS support can be used
for co-operation (e.g., a Blue Screen Of Death interceptor
for Windows kernel bugs is implemented in S2E). On the
other hand, catching such conditions during the emulation
of an embedded device ﬁrmware is bound to many system-
speciﬁc constraints, and require additional knowledge about
the internal details of the ﬁrmware under analysis.
However, Avatar does not rely on the knowledge of any
speciﬁc operating system or the fact that a MMU is used.
Instead,
it aims at detecting a larger range of potentially
critical situations which may result in control ﬂow hijacking
of ﬁrmware code, by using a technique similar to the one
employed by AEG [6].
All three conditions may lead to false positives, when the
variable is symbolic but strongly constrained. Therefore, once
such a condition is detected the constraints imposed on the
symbolic variables must be analyzed: the less constrained is
the result, the higher is the chance of control ﬂow corruption.
Intuitively, if the constraints are very loose (e.g., a symbolic
program counter without an upper bound) then the attacker
may obtain enough control on the code to easily exploit the
behavior. In addition to this, tight constraints are sometimes
encountered in legitimate cases (e.g., access to an array with
a symbolic but constrained index such as with a jump table),