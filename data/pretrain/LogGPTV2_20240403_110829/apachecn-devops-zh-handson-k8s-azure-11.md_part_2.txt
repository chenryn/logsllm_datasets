    kubectl 获取节点
    这将返回一个错误，如图 11.11 所示。这个错误是意料之中的，因为您没有从 Cloud Shell 到私有链接端点的私有连接。
    ![Error showing you cannot access the control plane from Cloud Shell anymore](img/B17338_11_11.jpg)
    图 11.11:错误显示您无法再从 Cloud Shell 访问控制平面
    #### 注意
    在前面的命令中，您注意到您的 Cloud Shell 无法到达 Kubernetes API 服务器。可以将 Azure Cloud Shell 连接到 Azure 中的一个虚拟网络，并以这种方式连接到您的 Kubernetes API 服务器。在本例的后续步骤中，您不会这样做，但是如果您对这种方法感兴趣，请参考文档:[https://docs.microsoft.com/azure/cloud-shell/private-vnet](https://docs.microsoft.com/azure/cloud-shell/private-vnet)。
7.  As mentioned in the introduction, when you create a private AKS cluster, AKS will use a service called Private Link to connect the control plane to your VNet. You can actually see this endpoint in your subscription in the Azure portal. To see the private endpoint, look for Private Link in the Azure search bar, as shown in *Figure 11.12*:
    ![Navigating to the Private Link center through the Azure portal](img/B17338_11_12.jpg)
    图 11.12:在 Azure 搜索栏中搜索私有链接
    在结果窗格中，单击私有端点以查看您当前的私有链接端点。这里应该会看到一个名为 kube-apiserver 的私有端点，如图*图 11.13* 所示。在这里，您可以看到指向群集和创建专用端点的子网的链接。
    ![The private endpoint in your subscription](img/B17338_11_13.jpg)
    图 11.13:订阅中的私有端点
    私有链接利用 Azure DNS 私有区域将群集的 DNS 名称链接到私有端点的私有 IP。要查看 Azure DNS 私有区域，请通过 Azure 搜索栏查找私有 DNS 区域，如图*图 11.14* :
    ![Navigating to Private DNS zones through the Azure search bar](img/B17338_11_14.jpg)
    图 11.14:通过 Azure 门户导航到私有 DNS 区域
    在结果窗格中，您应该会看到一个专用 DNS 区域。如果你点击那个区域，你会从 DNS 区域看到更多的细节，如图*图 11.15* 。您可以在这里看到为您的集群域名创建了一个域名系统记录，指向您的虚拟网络中的一个私有 IP 地址。
    ![Showing the DNS record in the Azure private DNS zone](img/B17338_11_15.jpg)
    图 11.15:由 AKS 创建的 Azure DNS 私有区域中的 DNS 记录
8.  To establish a private connection to the control plane, you will now create a new VM and use it to connect to the control plane. For organization purposes, you'll create this VM in a new resource group. This will make it easier to delete the VM later. Use the following commands to create a new subnet in your VNet and to create a VM in that subnet:
    az 网络 vnet 子网创建\
    -资源-组 rg-hand onaks \
    -vnet-name vnet-hand onaks \
    -名称 vmsubnet \
    -地址-前缀 192.168.1.0/24
    虚拟机 _ 子网 _ 标识='az 网络 vnet 子网显示\
    -资源-组 rg-hand onaks \
    -vnet-name vnet-hand onaks \
    --VM subnet name--查询 id-或 tsv
    az 组创建-l \
    -名称 rg-handsonaks-vm
    az 虚拟机创建-名称虚拟机-handsonaks \
    -资源-组 rg-handsonaks-vm \
    -映像模糊\
    - admin-username azureuser \
    - ssh-key-values ~/。ssh/id_rsa.pub \
    -子网$VM_SUBNET_ID \
    -标准尺寸 _D2_v2
    创建虚拟机大约需要一分钟。一旦创建，您应该会得到类似于*图 11.16* 的输出。在输出中复制公共 IP 地址:
    ![Creating a new VM and fetching its public IP address](img/B17338_11_16.jpg)
    图 11.16:创建新虚拟机并获取其公共 IP 地址
9.  Now that the VM is created, you will move your Kubernetes config file containing the cluster credentials to that VM. This avoids you having to install the Azure CLI on the target machine to get the Kubernetes credentials. Make sure to replace **** with the outcome from the previous step.
    scp ~/。kube/config Azur @:~
    如果您信任此主机，将会提示您。通过输入**是**确认。这将创建类似于*图 11.17* 的输出:
    ![Copying the Kubernetes config file to the VM](img/B17338_11_17.jpg)
    图 11.17:将 Kubernetes 凭证复制到目标机器
10.  You can now access the remote machine using the following command:
    ssh Azur @
11.  Now that you're connected to the remote machine, you'll need to use **kubectl**. Download it, make it executable, and move it into the binaries folder using the following command:
    curl lo[【https://dl . k8s . io/release/v 1 . 20 . 0/bin/Linux/amd64/kubi ctel】](https://dl.k8s.io/release/v1.20.0/bin/linux/amd64/kubectl )
    chmod +x kubectl
    须藤多美。/忽必烈/usr/local/bin/忽必烈
12.  To have **kubectl** recognize the config file you uploaded, you have to move it into the **kube** directory. You can do so using the following command:
    mkdir .kube
    mv config。kube/config(库比/配置)
13.  Now that you have this VM configured to connect to your cluster, you can verify that you can connect to this cluster by applying the following command:
    kubectl 获取节点
    这将产生类似于图 11.18 的输出:
    ![Verifying the connection to the cluster using the kubectl get nodes command](img/B17338_11_18.jpg)
    图 11.18:从同一虚拟网络中的虚拟机访问专用 AKS 集群
14.  You can also verify the DNS record that your VM is using to connect to the cluster. To do this, first get the **fully qualified domain name** (**FQDN**) cluster (refer to the highlighted section in *Figure 11.19* to see which output is the FQDN) and then use the **nslookup** command to get the DNS record. You can use the following commands to do this:
    立方结构丛集资讯
    nslookup〔t0〕
    这将产生类似于图 11.19 的输出:
![Fetching the cluster’s FQDN and looking up its IP address using nslookup ](img/B17338_11_19.jpg)
图 11.19:获取集群的 FQDN，并使用 nslookup 查找其 IP 地址
在*图 11.19* 中可以看到，您从 **nslookup** 命令中得到的地址是一个私有的 IP 地址。这意味着只有连接到该虚拟网络的机器才能连接到 Kubernetes 控制平面。
您现在已经成功创建了一个 AKS 专用集群，并验证了只有连接到 AKS 虚拟网络的机器才能连接到控制平面。您无法从 Azure Cloud Shell 内部连接到控制平面，但您可以从同一虚拟网络中的虚拟机连接到它。因为您现在已经部署了一个私有集群，所以不要删除您正在使用的虚拟机。您将在下一个示例中使用它。在本章的最后一个示例中，您将删除该私有集群和虚拟机。
关于控制平面安全的这一部分也到此结束。您已经了解了授权的 IP 范围和私有集群。在下一节中，您将了解更多关于如何保护工作负载的信息。
## 工作负载网络安全
您现在已经了解了如何保护您的 AKS 集群的控制平面的网络。然而，这并没有影响您工作负载的网络安全性。在本节中，您将探索保护工作负载的三种方法。首先，您将使用 Azure 内部负载平衡器创建一个 Kubernetes 服务。然后，您将使用 NSGs 保护 Kubernetes 服务的流量。最后，您将使用网络策略来保护点对点流量。
### 使用内部负载平衡器保护工作负载网络
Kubernetes 有多种类型的服务，正如您在*第 3 章*、*AKS*上的应用部署中了解到的。您以前多次使用服务类型负载平衡器来让 AKS 创建 Azure 负载平衡器。这些一直是公共负载平衡器。您也可以通过创建内部负载平衡器的方式来配置 AKS。这在您创建只需要从虚拟网络或连接到该虚拟网络的网络中访问的服务的情况下非常有用。
您将在本节中创建这样的服务:
1.  If you are no longer connected to the VM you created in the previous example, reconnect to it. You can get the VM's public IP address using the following command:
    az vm show -n vm-handsonaks \
    -g rg-hand onaks-VM-d-query public IPS
    您可以使用以下命令连接到虚拟机:
    ssh Azur @
2.  Once connected to this VM, you will need to retrieve the git repository linked with this book. You can get this using the following command:
    git 克隆 https://github . com/PacktPublishing/动手-Kubernetes-on-Azure-第三版
    克隆存储库后，使用以下命令导航到本章的示例:
    光盘动手-蓝色天空上的 Kubernetes-第三版/第 11 章
3.  As the example application in this section, you will use the guestbook application you've already used in the first half of this book. However, the all-in-one YAML file you used before has been broken up into two files: **guestbook-without-service.yaml** and **front-end-service-internal.yaml**. The reason for this is to make it easier for you to explore the service-specific configuration.
    **前端服务内部. yaml** 文件包含使用 Azure 内部负载平衡器创建 Kubernetes 服务的配置。以下代码是该示例的一部分:
    1 堆叠版本:v1
    2 种:服务
    3 元数据:
    4 名称:前端
    5 个注释:
    6 service.beta.kubernetes.io/azure-load-balancer-internal:“真”
    7 个标签:
    8 应用:留言簿
    9 层:前端
    10 规格:
    11 类型:负载平衡器
    12 个端口:
    13 端口:80
    14 选择器:
    15 应用:留言簿
    16 层:前端
    您正在使用 YAML 代码中的注释来指示 AKS 创建一个 Azure 内部负载平衡器。您可以在前面代码示例的第 5-6 行看到，您正在将**service.beta.kubernetes.io/azure-load-balancer-internal**注释设置为**真**。
    您可以通过应用以下命令，使用内部负载平衡器创建留言簿应用和服务:
    kubectl create -f 不带服务的留言簿. yaml
    kubectl create -f 前端-service-internal.yaml
    然后，您可以获取服务，并使用以下命令等待它获取外部 IP:
    忽必烈得到服务-w
    这将返回类似于图 11.20 的输出:
    ![Getting the external IP of the frontend service, which is a private IP](img/B17338_11_20.jpg)
    图 11.20:获取服务的外部 IP
4.  As you can see, the service has a private IP as an external IP. You can only access this IP from the VNet that the cluster is deployed into, or from other networks connected to that VNet.
    #### 注意
    您可能会问自己这样一个问题:“每个服务也获得一个集群 IP，这是一个私有 IP。为什么不能用它来代替内部负载平衡器？”这个问题的答案是，集群 IP 只能从集群内部到达，而不能从集群外部到达。但是，您可以创建节点端口类型的服务，使服务暴露给来自集群外部的调用。这将在特定端口的节点 IP 上公开服务。NodePort 服务的缺点是它们在每个节点的同一个端口上公开服务，因此您不能在集群中的同一个端口上公开两个服务。内部私有负载平衡器确实能够在同一群集的多个服务上公开同一个端口。
    您可以尝试使用以下命令访问该服务:
    卷曲
    这将返回类似于图 11.21 的结果: