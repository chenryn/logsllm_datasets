== 指令配置
当用户想要对数据做一些复杂的处理且当前SPL无法满足时，用户可以使用自定义指令功能，实现对数据的复杂处理。
=== 程序管理
新建指令前需要上传程序文件，即.py文件压缩成的.tgz文件，一个tgz文件可以包含多个py文件。
python文件要求：
* 脚本运行依赖的目录是"/opt/rizhiyi/parcels/splserver/bin/custom_commands/lib"，不能修改 
* 自定义类继承于src.cn.yottabyte.process.[generating/streaming/transformed/centralized]_handler
* 默认调用方法initializ()和execute()，不能修改方法名和参数
* 可以引用自定义lib库和脚本，本地测试运行没有问题即可上传到服务器运行
在指令配置页，点击右上角"程序管理"，进入程序管理页面，点击"上传"，如下图所示：
image::images/custom_cmd_script.png[]
* 选择以.tgz结尾的文件。
* 输入程序名称，此名称要求域内唯一。
* 输入脚本名称，脚本名称必须和主脚本文件名一致。
点击"上传"，程序文件上传成功后用户可以在该页面实现文件的下载、编辑和删除，也可以返回"指令配置"页面，创建指令。
=== 新建指令
在指令配置页面，点击"新建"，如下图填写指令配置：
image::images/new_cumtom_cmd.png[]
* 指令名称：在SPL中使用的名称。
* 程序名称：选择已经上传的程序名称。
* 资源标签：选择或新建资源标签。
* 所属应用：选择指令所属应用。
* 程序参数：当创建指令支持参数时，输入py文件中支持的参数名，多个参数使用逗号分割。
* 分批执行：启用后，脚本会分批，每次都启动一次；禁用后脚本只会被启动一次，之后通过线程通信来执行后续数据。
* 指令类型：支持4种类型，分别是：
** 生成数据命令：用于产生数据，通常是命令或者子命令的第一个命令，如makeresults, gentimes等。
** 可分布式处理命令：逐行执行没有前后文依赖的命令，如eval, parse等。
** 集中处理命令：执行依赖输入数据的顺序，需要集中处理的命令，如sort, stats等。
** 格式转化命令：把输入命令作为一个整体来处理， 需要所有数据才能产生结果，如transpose，dedup等。
点击"应用"，成功新建自定义指令。用户可以在指令配置页面实现指令的新建，编辑，授权，删除功能，也可以在SPL中使用创建的自定义指令。
=== 自定义生成数据命令示例
自定义"用于生成10条数据"的指令。
1. 上传程序文件，程序名称为gd，脚本名称为gd，其中py文件的内容如下图：
+
image::images/generating_demo.png[]
2. 新建指令，指令名称为generating_demo，程序名称选择gd，指令类型选择生成数据命令。
3. 在spl中使用自定义指令，spl语句为"| generating_demo"，搜索结果如下图：
+
image::images/generating_demo_result.png[]
=== 自定义可分布式处理命令示例
自定义"用于在当前行加入一个字段名为appname22的值为xxxxx的列"的指令。
1. 上传程序文件，程序名称为sd，脚本名称为sd，其中py文件的内容如下图：
+
image::images/streaming_demo.png[]
2. 新建指令，指令名称为streaming_demo，程序名称选择sd，指令类型选择可分布式处理命令。
3. 在spl中使用自定义指令，spl语句为"| makeresults
| eval ct="1,2,3,4"
| eval ct=split(ct,",")
| mvexpand ct 
| streaming_demo"，搜索结果如下图：
+
image::images/streaming_demo_result.png[]
=== 自定义集中处理命令示例
自定义"用于统计数据中ct字段的累积和"的指令。
1. 上传程序文件，程序名称为cd，脚本名称为cd，其中py文件的内容如下图：
+
image::images/centralized_demo.png[]
2. 新建指令，指令名称为centralized_demo，程序名称选择cd，指令类型选择集中处理命令。
3. 在spl中使用自定义指令，spl语句为"| makeresults
| eval ct="1,2,3,4"
| eval ct=split(ct,",")
| mvexpand ct
| centralized_demo"，搜索结果如下图：
+
image::images/centralized_demo_result.png[]
=== 自定义带参数的的集中处理命令示例
自定义"通过spl命令中的参数来控制脚本调用不同的计算函数"的指令。
1. 上传程序文件，程序名称为cd_args，脚本名称为cd_args，其中py文件的内容如下图：
+
image::images/centralized_demo_with_args.png[]
2. 新建指令，指令名称为caculate2，程序名称选择cd_args，程序参数为"cnt,avg"，指令类型选择集中处理命令。
3. 在spl中使用自定义指令，spl语句为"| makeresults
| eval ct="1,2,3,4"
| eval ct=split(ct,",")
| mvexpand ct
| caculate2 function=cnt"，搜索结果如下图：
+
image::images/centralized_demo_with_args_cnt.png[]
+
spl语句为"| makeresults
| eval ct="1,2,3,4"
| eval ct=split(ct,",")
| mvexpand ct
| caculate2 function=avg"，搜索结果如下图：
+
image::images/centralized_demo_with_args_avg.png[]
=== 自定义格式转化命令示例
自定义"用于统计数据中ct字段的排序"指令。
1. 上传程序文件，程序名称为td，脚本名称为td，其中py文件的内容如下图：
+
image::images/transformed_demo.png[]
2. 新建指令，指令名称为transformed_demo，程序名称选择td，指令类型选择格式转化命令。
3. 在spl中使用自定义指令，spl语句为"| makeresults
| eval ct="1,2,3,4"
| eval ct=split(ct,",")
| mvexpand ct
|transformed_demo"，搜索结果如下图：
+
image::images/transformed_demo_result.png[]
== 动态字段
动态字段是在具体查询数据时，才动态地从原始数据中萃取、转换、查找和别名所需的字段内容。和数据接入时配置字段提取相比，配置动态字段具有存储占用少、配置调整灵活等特点。动态字段仅在其影响的应用范围内生效。
新建动态字段时，首先需要配置影响应用，影响应用可以是已存在自定义应用或default_search，也可以填写不存在的应用名称，安装该名称的应用后可以直接使用已配置动态字段。
动态字段的配置详情请查看"应用内数据和字段配置"章节。配置结束后，用户可以在动态字段列表页编辑，复制，删除已创建的动态字段。