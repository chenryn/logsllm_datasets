# 利用U盘钓鱼的各种姿势
##### 译文声明
本文是翻译文章，文章来源：blog.sevagas.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
我个人在能源行业已经工作了好几年，在这个领域，安全态势与传统的IT有所不同。比如，在这个行业可用性会比保密性更加重要，此外系统通常不会连接到互联网（话虽如此，大家都还记得Wannacry疯狂肆虐的样子吗）。网络信号过滤或者物理隔离是这种场景中攻击者必须绕过的安全防御机制。
针对工业系统的攻击通常由自动化恶意软件载荷来发起，这类载荷并不需要连接到远程系统。此外，载荷并不需要完成数据窃取任务，因为其主要目标就是大肆破坏。Stuxnet（震网）病毒就是此类攻击的一个绝佳案例。
在本文中，我想给大家展示如何利用恶意U盘的一些PoC方法，这些方法可以在模拟攻击环境中进行攻击。这类攻击方法必须遵循如下规则：
1、没有建立互联网连接；
2、除了目标系统的OS信息之外，对其他信息一无所知；
3、U盘上可见的内容应该尽可能少地触发警告信息；
4、载荷的执行应该尽可能少地触发警告信息。
我们的目标是传播并运行二进制载荷。在如下一些样例中，我们的载荷为DLL文件（`payload.dll`）。
## 二、利用LNK文件
**目标系统** ：MS Windows OS
**主要原理：** 我曾介绍过如何利用HTA文件发起攻击，这是具体的操作方法。
###  利用策略
在第一个PoC中，我们的任务是让目标用户认为自己打开的是一个图片文件（`confidential.jpg`），然而实际上他打开的是一个恶意的LNK快捷方式文件（`confidential.jpg.lnk`）。快捷方式中隐藏着一个HTA释放器（dropper）。LNK会执行HTA文件，后者会释放并执行DLL载荷，并将快捷方式替换为一张欺诈图片（`confidential.jpg`）。
###  构造释放DLL的HTA载荷
我们可以利用[macro_pack](https://github.com/sevagas/macro_pack)来构造经过混淆处理的HTA载荷，该载荷可以释放并执行`payload.dll`，具体命令如下：
    echo DllMain | macro_pack.exe --template=EMBED_DLL --embed=payload.dll --obfuscate -G payload.hta
`EMBED_DLL`模板可以创建一段VB代码，释放`-embed`参数所指向的文件，并使用`Rundl32l`来加载这个文件。我们可以指定模板运行DLL文件的`DllMain`函数。
我们可以使用`-G`选项来生成HTA文件，文件中的VB代码经过混淆处理。
大家可以使用mshta来检查HTA文件是否能正常运行，是否会调用我们的DLL文件（DLL文件将被释放到临时目录中）。
###  构造释放图片的HTA载荷
我们也可以使用`EMBED_EXE`这个[macro_pack](https://github.com/sevagas/macro_pack)模板来嵌入、释放并运行我们选定目录中的载荷。在本文案例中，我们使用的是“confidential.jpg”这张图片。我们的目标是将该图片释放到恶意LNK文件所处的同一目录中，这样一旦DLL载荷被成功运行，该图片就可以替换对应的LNK文件。
    echo "confidential.jpg" | macro_pack.exe -t EMBED_EXE --embed=confidential.jpg -o -G pic.hta
如果我们双击`pic.hta`，我们会看到`confidential.jpg`图片被释放到当前目录中，并且被默认的图片查看器打开。
###  封装到自删除的HTA文件中
我并没有开发具体功能来将多个二进制载荷嵌入一个`macro_pack`中，也就是说我们必须生成DLL释放器、图片释放器然后手动执行复制粘贴操作才能构造最终可用的HTA载荷。
具体操作如下：
1、使用文本编辑器打开`payload.hta`以及`pic.hta`文件；
2、将`pic.hta`的`AutoOpen`函数重命名为`AutoOpen2`；
3、将`pic.hta`的所有vb代码拷贝到`payload.hta`中（最后两行的`AutoOpen`以及`Close`代码除外）。
4、编辑`payload.hta`文件最后两行的`AutoOpen`以及`Close`代码。
    AutoOpen2
    AutoOpen
    Set objFSO = CreateObject( "Scripting.FileSystemObject" )
    Set WshShell = CreateObject("WScript.Shell") 
    objFSO.DeleteFile window.document.location.pathname
    Close
现在`payload.hta`文件会释放并运行图片，然后运行DLL并在运行后删除自身文件。
> 注意：如果我们想要多次使用同一个USB介质，我们需要去掉自删除代码，将图片释放到临时目录中，而非当前目录中。
###  构建恶意LNK文件
我们可以利用HTA文件的便捷性，将其嵌入到LNK文件中。由于我们的LNK文件名为`confidential.jpg.lnk`，我们希望它能顺利运行如下命令：
    %windir%system32cmd.exe /c start "" "mshta" "%CD%confidential.jpg.lnk"
>
> 注意：我们在构造USB载荷时，遇到的一个难题是载荷需要知道自己所处的具体路径。这个例子中，我们依赖的是`macro_pack`，它可以配置LNK文件运行在当前目录中，这样一来`%cd%`命令就能给出当前的卷名及路径。在第二个PoC中我们可以看到更为困难的一种场景。
我们可以使用`macro_pack`来生成LNK。我选择直接将快捷方式生成到USB介质中，避免我们拷贝快捷方式时系统对其做出修改。这里USB介质的卷标为“G:”。
    macro_pack.exe -G G:confidential.jpg.lnk
当提示输入“Shortcut_Target”时我们输入如下信息：
    %windir%system32cmd.exe /c start "" "mshta" "%CD%confidential.jpg.lnk"
当提示输入“Shortcut_Icon”时我们输入如下信息：
    %windir%system32imageres.dll,67
> 注意：67这个数字对应的是`imageres.dll`中的JPG图像。
现在LNK快捷方式已创建完毕，我们可以将HTA代码附加到该文件中。
    copy /b G:confidential.jpg.lnk+cmd.hta G:confidential.jpg.lnk
就这么简单，我们的钓鱼载荷已构造完毕。
###  测试
将`confidential.jpg.lnk`拷贝到某个USB介质中，并将该介质插入另一个Windows主机上。访问U盘并双击`confidential.jpg`，系统会向我们显示对应的图片。
DLL已被成功加载，但处于隐藏状态，我们可以使用`taskmgr`或者Sysinternals的`procexp`观察正在运行的DLL。DLL文件被释放到临时目录中的“Document1.asd”，并使用如下VB代码加以运行。
    CreateObject("WScript.Shell").Run "%windir%system32rundll32.exe %temp%Document1.asd,>>", 0
顺利执行后，我们会发现U盘上LNK文件已不复存在，被替换成正确的图片文件。
## 三、利用恶意设置
**目标系统：** MS Windows 10
**主要原理：**[Matt Nelson](https://twitter.com/enigma0x3)之前发表过有关[SettingContent-ms](https://posts.specterops.io/the-tale-of-settingcontent-ms-files-f1ea253e4d39)文件的研究结果，这里用到的就是这个原理。
###  利用策略
在这个场景中，我们的任务是让目标用户认为他打开的是“README.txt”文件，实际上他运行的是一个恶意的settingcontent-ms文件。