Search for Strings:
What is a SmartCode?
●
It’s a random code, used by the camera when it phones home to link up to our cloud profile
–
this.smartCode = getCharAndNumr(6);
–
Definition of getCharAndNumr:
Yes, but what _is_ a smartCode?
Search for Strings:
What Else?
Check another string from log analysis: myList size 
It looks like the magic happens in these 2 methods:
●
run()
●
playVoice()
Extractive Analysis
Extractive Analysis
At this point we’ve learned a lot about the codebase
We can extract the code we need to automate our analysis 
and place it into a clean project
Extractive Analysis
A couple of notes on project setup
●
You may need to manually create your jniLibs folder
–
Inside you’ll need to place all the contents of the 
donor project’s lib/jniLibs directory
●
The package/class name has to match what you pull 
from the donor project, or it won’t load
Once configured, you’ll be able to automate a black-box 
analysis of the compiled library
A Question Answered
VCodeTable holds the key
 to digit/frequency mapping
We found this by extracting 
the class into a test project 
and executing it.
A Question Answered
VCodeTable holds the key
 to digit/frequency mapping
We found this by extracting 
the class into a test project 
and executing it.
0=3000Hz
1=3125Hz
2=3250Hz
3=3375Hz
4=3500Hz
5=3625Hz
6=3750Hz
7=3875Hz
8=4000Hz
9=4125Hz
A=4250Hz
B=4375Hz
C=4500Hz
D=4625Hz
E=4750Hz
F=4875Hz
Findings
Findings
Starting in com.ithink.voice.OutAudio and tracing, we find:
1.
AudioTrack to play the signal
–
Appears to be 3 blocks to a single transmission
2.
strInput == getUserinfo(), which contains:
–
SSID, Password, Random ‘smartcode’
3.
Control tones:
–
AudioRegCommon.FREQ_BEGIN and FREQ_END
4.
Space Tone is used to split up identical tones
–
Ensures the receiver can discern between 2 distinct tones and not one ‘long’ tone
5.
play1Char which points us to:
–
VcodeTable class which maps digits to frequency tones. Looks like Hex encoding! 
6.
The use of CRC values
–
GetCrcVal(String str) uses a shifted CRC32 for error correction
7.
An opaque VoiseStruct class that loads a library by the same name
–
If we need to drill-down into this library we will require a binary decompiler
Findings
Using what we know we can:
● Reconstruct Section 1
● Reconstruct Section 2
Section 1
Section 2
Findings
Section 3 is incomplete
1. We know everything except for 
one signal in section 3
–
This appears to be an error 
correction code of some 
kind(?)
To uncover the remaining 
secrets of section 3, we need 
binary analysis
Unknown
Sgnal blocks 2 and 3 are generated by 
VoiseStruct. Reversing compiled code requires a 
binary analysis tool. Ghidra is the tool I’ll be using
Get Setup with Ghidra
●
Visit https://github.com/NationalSecurityAgency/ghidra/releases 
–
Pull the latest version
●
Follow the installation guidance for your platform:
–
https://github.com/NationalSecurityAgency/ghidra#install
Get Setup with Ghidra
●
Open a new project 
–
File -> New Project -> Fill out wizard
–
Click the 
●
Import the library:
–
File -> Import File
–
jawa-decompiled/resources/lib/x86_64/libvoisestruct.so
–
Import with default options
–
Select Yes to analyze the file
Get Setup with Ghidra
RE With Ghidra
Identify which Library functions are used
●
From within Android Studio we find these functions are used
RE With Ghidra
RE With Ghidra
Investigate the Library
●
Examine the Symbol Tree to find the JNI functions
–
Java_com_ithink_voice_VoiseStruct_getAmplitude
–
Java_com_ithink_voice_VoiseStruct_getAudioSample
–
Java_com_ithink_voice_VoiseStruct_getFreqDuration
–
Java_com_ithink_voice_VoiseStruct_getVoiseStructGoke1
–
Java_com_ithink_voice_VoiseStruct_getVoiseStructGoke2
–
Java_com_ithink_voice_VoiseStruct_getVoiseStructV3s
RE With Ghidra
RE With Ghidra
RE With Ghidra
A Closer Look at what we see in Ghidra
Pick a Function and Dig In
Ghidra: Analyze a Function
Key function: getVoiseStructGoke2
–
Generates Signal sections 2 and 3
–
Here’s what we see in Android Studio:
●
8 arguments passed to getVoiseStructGoke2
Ghidra: getVoiseStructGoke2
–
Appears to be a parameter count 
mis-match. This is related to JNI
●
8 params passed from Java
●
10 params in Ghidra
Ghidra: Analyze a Function
A Note on JNI
Digging Deeper:
A Word on JNI
The argument-count did not line up between Android and the JNI library call
This is due to JNI Calling Conventions
●
There are 2 additional arguments as part of the specification:
–
JNIEnv pointer
–
Jobject
●
These 2 params are front-loaded to the function signature
Digging Deeper:
A Word on JNI
Raw decompiled view
Refactored in Ghidra
* I couldn’t rename param_2 to jobject as it’s not actually used in the library call
Continue the Analysis
Ghidra: Analyze a Function
Function Decompiler View
Continued analysis of 
getVoiseStructGoke2:
●
FUN_00109930 leverages 
our inputs
●
First, let’s cleanup this 
view...
Ghidra: Analyze a Function
Cleaned-up view of 
getVoiseStructGoke2:
●
FUN_00109930 renamed to 
`Section2and3Generator`
●
Time to dig-deeper
●
We want to identify the final 
code that is missing from our 
waveform
Ghidra: Analyze a Function
Raw view of 
Section2and3Generator
●
Kind of terse
●
We need more descriptive 
identifiers
Ghidra: 
Analyze a Function
 Section2and3Generator deciphered
●
Start with what you know
●
Once you find a good starting 
point, the rest of symbol names 
fall into place
●
There can be value even if you 
don’t get the names 100% correct
●
Critical section highlighted, which 
is what I need to reproduce the 
signal
–
To accurately reproduce the 
signal, I need to take the CRC 
value of the SSID and  shift it
Ghidra: 
Analyze a Function
Zero-in on the section: Needs another bitshift!
issidCrcMangled = (undefined)((ushort)ssidCrc >> 8);
Ghidra: 
Analyze a Function
Can We Recreate It?
Hack the Signal
04
Let’s look at what we know
The Waveform:
What we know
1. The waveform is comprised of 3 sections of hexified 
data
2. Each section is prefixed and suffixed by control 
codes and section identifiers
3. When 2 sequential tones are identical, a space tone 
is used between them
4. The duration of each tone is around 50 / 60 
milliseconds
5. We know the structure of each waveform section
1.
FREQ_BEGIN
2.
FREQ_BEGIN
3.
0x01
4.
SSID_BYTES
5.
0x01
6.
PASSPHRASE_BYTES
7.
0x01
8.
SMARTCODE_DIGITS
9.
CRC(0x01+SSID_BYTES+0x01+PASSPHRASE_BY
TES+0x01+SMARTCODE+”1”)
10. FREQ_END
11. FREQ_END
Section 1 
Signal 
Structure
1.
FREQ_BEGIN
2.
FREQ_BEGIN
3.
0x12
4.
SMARTCODE >> SHIFTED8
5.
(SMARTCODE >> SHIFTED) >> SHIFTED8
6.
CRC(0x12+(SMARTCODE>>SHIFTED8)+
(SMARTCODE>>SHIFTED8>>SHIFTED8))
7.
FREQ_END
8.
FREQ_END
Section 2 
Signal 
Structure
1.
FREQ_BEGIN
2.
FREQ_BEGIN
3.
0x02
4.
CRC(SSID_BYTES)
5.
CRC-SHIFTED(SSID_BYTES)
6.
SMARTCODE%16 (x2/4)
7.
PASSPHRASE_BYTES
8.
CRC(0x02+CRC(SSID_BYTES)+CRC-SHIFTED(SSID_BYTES)
+SMARTCODE>>SHIFTED8+PASSPHRASE_BYTES)
9.
FREQ_END
10. FREQ_END
Section 3 
Signal 
Structure
Yes, we can reproduce the signal!
Demo
05
THAMYRIS: Replicate The Audio Protocol
Demo
05
Limitations
1.
Can’t easily discover the camera’s admin password
–
It’s 6 HEX Characters
–
Password changes each time camera is reset, not tied to MAC or Serial#
2.
Unable to decipher camera -> cloud communication
–
Camera has a local RSA keypair, that may change on each reset
–
Encrypted payloads are sent to the server
–
So, even though you can intercept the comm with a self-signed MITM, 
you can’t see or make sense of the payload t
3.
You get what you pay for
–
Even when you know the password, it won’t always connect
(VLC is my ‘go to’)
JANE 
BLOGGS
THANKS
7thzero.com
github.com/7thzero
JANE 
BLOGGS
Technical References
●
JADX: Dex to Java Decompiler - https://github.com/skylot/jadx
●
Efficiency: Reverse Engineering with ghidra - http://wapiflapi.github.io/2019/10/10/efficiency-reverse-
engineering-with-ghidra.html
●
Guide to JNI (Java Native Interface) - https://www.baeldung.com/jni
●
JDSP - Digital Signal Processing in Java - https://psambit9791.github.io/jDSP/transforms.html
●
Understanding FFT output - https://stackoverflow.com/questions/6740545/understanding-fft-output
●
Spectral Selection and Editing - Audacity Manual - 
https://manual.audacityteam.org/man/spectral_selection.html
●
Edit>Labelled Audio>everything greyed out - https://forum.audacityteam.org/viewtopic.php?t=100856
●
Get a spectrum of frequencies from WAV/RIFF using linux command line - 
https://stackoverflow.com/questions/21756237/get-a-spectrum-of-frequencies-from-wav-riff-using-linux-
command-line
●
How to interpret output of FFT and extract frequency information - 
https://stackoverflow.com/questions/21977748/how-to-interpret-output-of-fft-and-extract-frequency-
information?rq=1
●
Calculate Frequency from sound input using FFT - https://stackoverflow.com/questions/16060134/calculate-
frequency-from-sound-input-using-fft?rq=1
●
Intorduction - Window Size - https://support.ircam.fr/docs/AudioSculpt/3.0/co/Window%20Size.html
●
Android: Sine Wave Generation - https://stackoverflow.com/questions/11436472/android-sine-wave-
generation
●
Android Generate tone of a specific frequency - https://riptutorial.com/android/example/28432/generate-
tone-of-a-specific-frequency
●
Android Tone Generator - https://gist.github.com/slightfoot/6330866
●
Android: Audiotrack to play sine wave generates buzzing noise - 
https://stackoverflow.com/questions/23174228/android-audiotrack-to-play-sine-wave-generates-buzzing-
noise
CREDITS: This presentation template was 
created by Slidesgo, including icons by 
Flaticon, and infographics & images by 
Freepik
Credits