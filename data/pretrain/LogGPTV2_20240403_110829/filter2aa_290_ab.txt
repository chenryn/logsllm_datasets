### What is a SmartCode?
- **Definition**: A SmartCode is a randomly generated code used by the camera to link up with the cloud profile when it "phones home."
- **Implementation**:
  - `this.smartCode = getCharAndNumr(6);`
  - **`getCharAndNumr` Function**: Generates a random alphanumeric string of length 6.

### Additional Analysis
- **Log Analysis**: Check the size of `myList`.
- **Key Methods**:
  - `run()`
  - `playVoice()`

### Extractive Analysis
- **Overview**: We have learned a significant amount about the codebase and can now extract the necessary code for automated analysis.
- **Project Setup**:
  - **Manual Creation of `jniLibs` Folder**:
    - Place all contents from the donor project’s `lib/jniLibs` directory into this folder.
  - **Package/Class Name Matching**:
    - Ensure the package/class name matches the one from the donor project, or the library will not load.
- **Automated Black-Box Analysis**:
  - Once configured, you can automate the black-box analysis of the compiled library.

### VCodeTable
- **Functionality**: Maps digits to frequency values.
- **Discovery**:
  - Extracted the class into a test project and executed it.
- **Frequency Mapping**:
  - `0=3000Hz`
  - `1=3125Hz`
  - `2=3250Hz`
  - `3=3375Hz`
  - `4=3500Hz`
  - `5=3625Hz`
  - `6=3750Hz`
  - `7=3875Hz`
  - `8=4000Hz`
  - `9=4125Hz`
  - `A=4250Hz`
  - `B=4375Hz`
  - `C=4500Hz`
  - `D=4625Hz`
  - `E=4750Hz`
  - `F=4875Hz`

### Findings
- **Starting Point**: `com.ithink.voice.OutAudio`
- **Key Observations**:
  1. **AudioTrack**:
     - Used to play the signal.
     - Appears to be 3 blocks per transmission.
  2. **strInput**:
     - Contains SSID, Password, and a random `smartcode`.
  3. **Control Tones**:
     - `AudioRegCommon.FREQ_BEGIN` and `AudioRegCommon.FREQ_END`.
  4. **Space Tone**:
     - Splits identical tones to ensure the receiver can discern between distinct tones.
  5. **play1Char**:
     - Points to the `VcodeTable` class, which maps digits to frequency tones (Hex encoding).
  6. **CRC Values**:
     - `GetCrcVal(String str)` uses a shifted CRC32 for error correction.
  7. **VoiseStruct Class**:
     - Loads a library by the same name.
     - Binary decompilation required for further analysis.

### Reconstructing Sections
- **Section 1 and Section 2**:
  - Can be reconstructed based on the current findings.
- **Section 3**:
  - Incomplete.
  - One signal in Section 3 appears to be an error correction code.
  - Requires binary analysis for full understanding.

### Binary Analysis with Ghidra
- **Setup**:
  - Visit [Ghidra GitHub Releases](https://github.com/NationalSecurityAgency/ghidra/releases) to download the latest version.
  - Follow the installation instructions for your platform: [Ghidra Installation Guide](https://github.com/NationalSecurityAgency/ghidra#install).
- **Project Setup**:
  - Open a new project: `File -> New Project -> Fill out wizard`.
  - Import the library: `File -> Import File -> jawa-decompiled/resources/lib/x86_64/libvoisestruct.so` with default options.
  - Select Yes to analyze the file.
- **Library Functions**:
  - Identify and examine the JNI functions in the Symbol Tree:
    - `Java_com_ithink_voice_VoiseStruct_getAmplitude`
    - `Java_com_ithink_voice_VoiseStruct_getAudioSample`
    - `Java_com_ithink_voice_VoiseStruct_getFreqDuration`
    - `Java_com_ithink_voice_VoiseStruct_getVoiseStructGoke1`
    - `Java_com_ithink_voice_VoiseStruct_getVoiseStructGoke2`
    - `Java_com_ithink_voice_VoiseStruct_getVoiseStructV3s`

### Detailed Analysis
- **Key Function**: `getVoiseStructGoke2`
  - Generates Signal sections 2 and 3.
  - **Arguments**:
    - 8 arguments passed from Java.
    - 10 parameters in Ghidra due to JNI calling conventions.
- **JNI Considerations**:
  - Argument count mismatch due to additional `JNIEnv` and `Jobject` parameters.
- **Decompiled View**:
  - Refactored view of `getVoiseStructGoke2`:
    - Renamed `FUN_00109930` to `Section2and3Generator`.
    - Identified critical section for reproducing the signal.
    - Example: `issidCrcMangled = (undefined)((ushort)ssidCrc >> 8);`

### Waveform Structure
- **Waveform Composition**:
  - Comprised of 3 sections of hexified data.
  - Each section is prefixed and suffixed by control codes and section identifiers.
  - Space tone used between identical sequential tones.
  - Tone duration is around 50-60 milliseconds.
- **Section 1**:
  1. `FREQ_BEGIN`
  2. `FREQ_BEGIN`
  3. `0x01`
  4. `SSID_BYTES`
  5. `0x01`
  6. `PASSPHRASE_BYTES`
  7. `0x01`
  8. `SMARTCODE_DIGITS`
  9. `CRC(0x01+SSID_BYTES+0x01+PASSPHRASE_BYTES+0x01+SMARTCODE+”1”)`
  10. `FREQ_END`
  11. `FREQ_END`
- **Section 2**:
  1. `FREQ_BEGIN`
  2. `FREQ_BEGIN`
  3. `0x12`
  4. `SMARTCODE >> SHIFTED8`
  5. `(SMARTCODE >> SHIFTED) >> SHIFTED8`
  6. `CRC(0x12+(SMARTCODE>>SHIFTED8)+(SMARTCODE>>SHIFTED8>>SHIFTED8))`
  7. `FREQ_END`
  8. `FREQ_END`
- **Section 3**:
  1. `FREQ_BEGIN`
  2. `FREQ_BEGIN`
  3. `0x02`
  4. `CRC(SSID_BYTES)`
  5. `CRC-SHIFTED(SSID_BYTES)`
  6. `SMARTCODE%16 (x2/4)`
  7. `PASSPHRASE_BYTES`
  8. `CRC(0x02+CRC(SSID_BYTES)+CRC-SHIFTED(SSID_BYTES)+SMARTCODE>>SHIFTED8+PASSPHRASE_BYTES)`
  9. `FREQ_END`
  10. `FREQ_END`

### Reproducing the Signal
- **Feasibility**: Yes, we can reproduce the signal.
- **Demo**: THAMYRIS: Replicate The Audio Protocol

### Limitations
- **Camera Admin Password**:
  - 6 HEX characters.
  - Changes each time the camera is reset.
- **Camera to Cloud Communication**:
  - Encrypted payloads using a local RSA keypair.
  - Interception with MITM does not reveal the payload.
- **Connection Issues**:
  - Even with the correct password, connection may not always succeed.

### Technical References
- **JADX**: Dex to Java Decompiler - [GitHub](https://github.com/skylot/jadx)
- **Efficiency: Reverse Engineering with ghidra** - [Blog](http://wapiflapi.github.io/2019/10/10/efficiency-reverse-engineering-with-ghidra.html)
- **Guide to JNI (Java Native Interface)** - [Baeldung](https://www.baeldung.com/jni)
- **JDSP - Digital Signal Processing in Java** - [Documentation](https://psambit9791.github.io/jDSP/transforms.html)
- **Understanding FFT Output** - [Stack Overflow](https://stackoverflow.com/questions/6740545/understanding-fft-output)
- **Spectral Selection and Editing - Audacity Manual** - [Manual](https://manual.audacityteam.org/man/spectral_selection.html)
- **Edit>Labelled Audio>everything greyed out** - [Audacity Forum](https://forum.audacityteam.org/viewtopic.php?t=100856)
- **Get a spectrum of frequencies from WAV/RIFF using linux command line** - [Stack Overflow](https://stackoverflow.com/questions/21756237/get-a-spectrum-of-frequencies-from-wav-riff-using-linux-command-line)
- **How to interpret output of FFT and extract frequency information** - [Stack Overflow](https://stackoverflow.com/questions/21977748/how-to-interpret-output-of-fft-and-extract-frequency-information?rq=1)
- **Calculate Frequency from sound input using FFT** - [Stack Overflow](https://stackoverflow.com/questions/16060134/calculate-frequency-from-sound-input-using-fft?rq=1)
- **Introduction - Window Size** - [IRCAM Support](https://support.ircam.fr/docs/AudioSculpt/3.0/co/Window%20Size.html)
- **Android: Sine Wave Generation** - [Stack Overflow](https://stackoverflow.com/questions/11436472/android-sine-wave-generation)
- **Android Generate tone of a specific frequency** - [Riptutorial](https://riptutorial.com/android/example/28432/generate-tone-of-a-specific-frequency)
- **Android Tone Generator** - [GitHub Gist](https://gist.github.com/slightfoot/6330866)
- **Android: Audiotrack to play sine wave generates buzzing noise** - [Stack Overflow](https://stackoverflow.com/questions/23174228/android-audiotrack-to-play-sine-wave-generates-buzzing-noise)

### Credits
- **Presentation Template**: Created by Slidesgo, including icons by Flaticon, and infographics & images by Freepik.