### 优化后的文本

#### 分页池 (Paged Pools)
- **分页池**（bit 0 设置）
- **会话分页池**（bits 5 和 1 设置）

第五个段堆也被分配，但其具体用途尚未明确。前三个与 `NonPaged`、`NonPagedNx` 和 `Paged` 相关的段堆存储在 `HEAP_POOL_NODES` 中。与 `PagedPoolSession` 相关联的段堆则存储在当前线程中。图3总结了这五个段堆。

![图3. 段后端内部结构](图3)

尽管用户层段堆仅使用一个段分配器上下文进行 128KB 到 508KB 之间的分配，但在内核层段堆中，使用两个段分配器上下文，第二个用于 508KB 到 7GB 之间的分配。

#### 段后端 (Segment Backend)
段后端用于分配大小在 128KB 到 7GB 之间的内存块，并且也在后台为 VS 和 LFH 后端分配内存。段后端上下文存储在一个名为 `_HEAP_SEG_CONTEXT` 的结构体中。

```plaintext
kd > dt nt! _HEAP_SEG_CONTEXT
+0x000 SegmentMask : Uint8B
+0x008 UnitShift : UChar
+0x009 PagesPerUnitShift : UChar
+0x00a FirstDescriptorIndex : UChar
+0x00b CachedCommitSoftShift : UChar
+0x00c CachedCommitHighShift : UChar
+0x00d Flags : 
+0x010 MaxAllocationSize : Uint4B
+0x014 OlpStatsOffset : Int2B
+0x016 MemStatsOffset : Int2B
+0x018 LfhContext : Ptr64 Void
+0x020 VsContext : Ptr64 Void
+0x028 EnvHandle : RTL_HP_ENV_HANDLE
+0x038 Heap : Ptr64 Void
+0x040 SegmentLock : Uint8B
+0x048 SegmentListHead : _LIST_ENTRY
+0x058 SegmentCount : Uint8B
+0x060 FreePageRanges : _RTL_RB_TREE
+0x070 FreeSegmentListLock : Uint8B
+0x078 FreeSegmentList : [2] _SINGLE_LIST_ENTRY
```

![图4. 段后端内部结构图](图4)

段后端通过称为“段”的可变大小块来分配内存。每个段由多个可分配的页组成，这些段存储在 `SegmentListHead` 链表中。每个段以一个 `_HEAP_PAGE_SEGMENT` 开头，后面跟着 256 个 `_HEAP_PAGE_RANGE_DESCRIPTOR` 结构。

```plaintext
kd > dt nt! _HEAP_PAGE_SEGMENT
+0x000 ListEntry : _LIST_ENTRY
+0x010 Signature : Uint8B
+0x018 SegmentCommitState : Ptr64 _HEAP_SEGMENT_MGR_COMMIT_STATE
+0x020 UnusedWatermark : UChar
+0x000 DescArray : [256] _HEAP_PAGE_RANGE_DESCRIPTOR

kd > dt nt! _HEAP_PAGE_RANGE_DESCRIPTOR
+0x000 TreeNode : _RTL_BALANCED_NODE
+0x000 TreeSignature : Uint4B
+0x004 UnusedBytes : Uint4B
+0x008 ExtraPresent : Pos 0, 1 Bit
+0x008 Spare0 : Pos 1, 15 Bits
+0x018 RangeFlags : UChar
+0x019 CommittedPageCount : UChar
+0x01a Spare : Uint2B
+0x01c Key : _HEAP_DESCRIPTOR_KEY
+0x01c Align : [3] UChar
+0x01f UnitOffset : UChar
+0x01f UnitSize : UChar
```

为了提供对空闲页面范围的快速查找，在 `_HEAP_SEG_CONTEXT` 中维护了一个红黑树。每个 `_HEAP_PAGE_SEGMENT` 都有一个签名，计算方法如下：

```plaintext
Signature = Segment ^ SegContext ^ RtlpHpHeapGlobals ^ 0xA2E64EADA2E64EAD;
```

此签名用于从任何已分配的内存块中检索拥有的 `_HEAP_SEG_CONTEXT` 和相应的 `_SEGMENT_HEAP`。

通过使用存储在 `_HEAP_SEG_CONTEXT` 中的 `SegmentMask` 掩码，可以快速从任意地址计算出原始段。`SegmentMask` 的值为 `0xfffffffffff00000`。

```plaintext
Segment = Addr & SegContext->SegmentMask;
```

通过使用 `_HEAP_SEG_CONTEXT` 中的 `UnitShift`，可以轻松从任意地址计算出相应的 `PageRange`。`UnitShift` 设置为 12。

```plaintext
PageRange = Segment + sizeof(_HEAP_PAGE_RANGE_DESCRIPTOR) * (Addr - Segment) >> SegContext->UnitShift;
```

当段后端被另一个后端使用时，`_HEAP_PAGE_RANGE_DESCRIPTOR` 的 `RangeFlags` 字段用于存储请求分配的后端。

#### 可变大小后端 (Variable Size Backend)
可变大小后端分配 512B 到 128KB 大小的块，旨在提供对空闲块的轻松重用。可变大小后端上下文存储在一个名为 `_HEAP_VS_CONTEXT` 的结构体中。

```plaintext
kd > dt nt! _HEAP_VS_CONTEXT
+0x000 Lock : Uint8B
+0x008 LockType : _RTLP_HP_LOCK_TYPE
+0x010 FreeChunkTree : _RTL_RB_TREE
+0x020 SubsegmentList : _LIST_ENTRY
+0x030 TotalCommittedUnits : Uint8B
+0x038 FreeCommittedUnits : Uint8B
+0x040 DelayFreeContext : _HEAP_VS_DELAY_FREE_CONTEXT
+0x080 BackendCtx : Ptr64 Void
+0x088 Callbacks : _HEAP_SUBALLOCATOR_CALLBACKS
+0x0b0 Config : _RTL_HP_VS_CONFIG
+0x0b4 Flags : Uint4B
```

![图5. 可变大小后端内部结构](图5)

空闲块存储在名为 `FreeChunkTree` 的红黑树中。当请求分配时，红黑树用于查找任何大小相同的空闲块或大于请求大小的第一个空闲块。空闲块以一个名为 `_HEAP_VS_CHUNK_FREE_HEADER` 的专用结构体为头部。

```plaintext
kd > dt nt! _HEAP_VS_CHUNK_FREE_HEADER
+0x000 Header : _HEAP_VS_CHUNK_HEADER
+0x000 OverlapsHeader : Uint8B
+0x008 Node : _RTL_BALANCED_NODE
```

一旦找到一个空闲块，就会调用 `RtlpHpVsChunkSplit` 将其分割为大小合适的块。已经被分配的块都以一个名为 `_HEAP_VS_CHUNK_HEADER` 的结构体开头。

```plaintext
kd > dt nt! _HEAP_VS_CHUNK_HEADER
+0x000 Sizes : _HEAP_VS_CHUNK_HEADER_SIZE
+0x008 EncodedSegmentPageOffset : Pos 0, 8 Bits
+0x008 UnusedBytes : Pos 8, 1 Bit
+0x008 SkipDuringWalk : Pos 9, 1 Bit
+0x008 Spare : Pos 10, 22 Bits
+0x008 AllocatedChunkBits : Uint4B

kd > dt nt! _HEAP_VS_CHUNK_HEADER_SIZE
+0x000 MemoryCost : Pos 0, 16 Bits
+0x000 UnsafeSize : Pos 16, 16 Bits
+0x004 UnsafePrevSize : Pos 0, 16 Bits
+0x004 Allocated : Pos 16, 8 Bits
+0x000 KeyUShort : Uint2B
+0x000 KeyULong : Uint4B
+0x000 HeaderBits : Uint8B
```

`header` 结构体中的所有字段都与 `RtlHpHeapGlobals` 和块的地址进行异或。

```plaintext
Chunk->Sizes = Chunk->Sizes ^ Chunk ^ RtlpHpHeapGlobals;
```

在内部，VS 分配器使用段分配器。它通过 `_HEAP_VS_CONTEXT` 中的 `_HEAP_SUBALLOCATOR_CALLBACKS` 字段在 `RtlpHpVsSubsegmentCreate` 中使用。子分配器回调函数都与 VS 上下文和 `RtlpHpHeapGlobals` 地址进行异或。

```plaintext
callbacks.Allocate = RtlpHpSegVsAllocate;
callbacks.Free = RtlpHpSegLfhVsFree;
callbacks.Commit = RtlpHpSegLfhVsCommit;
callbacks.Decommit = RtlpHpSegLfhVsDecommit;
callbacks.ExtendContext = NULL;
```

如果 `FreeChunkTree` 中没有足够大的块，则会在子段列表中分配并插入一个新的子段，其大小范围为 64KiB 到 256KiB。它以 `_HEAP_VS_SUBSEGMENT` 结构体为首。所有剩余的块都用作空闲块被插入到 `FreeChunkTree` 中。

```plaintext
kd > dt nt! _HEAP_VS_SUBSEGMENT
+0x000 ListEntry : _LIST_ENTRY
+0x010 CommitBitmap : Uint8B
+0x018 CommitLock : Uint8B
+0x020 Size : Uint2B
+0x022 Signature : Pos 0, 15 Bits
+0x022 FullCommit : Pos 15, 1 Bit
```

当 VS 块被释放时，如果它小于 1KB 并且 VS 后端是正确配置的（`Config.Flags` 的第四位配置为 1），它将被临时存储在 `DelayFreeContext` 列表中。一旦 `DelayFreeContext` 填充了 32 个块，这些块将一次性全部被释放。`DelayFreeContext` 从不用于直接分配。

当一个 VS 块真正被释放时，如果它与其他两个空闲块相邻，那么这三个空闲块将利用 `RtlpHpVsChunkCoalesce` 函数合并在一起。然后合并后的大块将被插入到 `FreeChunkTree` 中。

#### 低碎片化堆后端 (Low Fragmentation Heap Backend)
低碎片化的堆是一个专门用来分配 1B 到 512B 小块的后端。LFH 后端上下文存储在一个名为 `_HEAP_LFH_CONTEXT` 的结构体中。

```plaintext
kd > dt nt! _HEAP_LFH_CONTEXT
+0x000 BackendCtx : Ptr64 Void
+0x008 Callbacks : _HEAP_SUBALLOCATOR_CALLBACKS
+0x030 AffinityModArray : Ptr64 UChar
+0x038 MaxAffinity : UChar
+0x039 LockType : UChar
+0x03a MemStatsOffset : Int2B
+0x03c Config : _RTL_HP_LFH_CONFIG
+0x040 BucketStats : _HEAP_LFH_SUBSEGMENT_STATS
+0x048 SubsegmentCreationLock : Uint8B
+0x080 Buckets : [129] Ptr64 _HEAP_LFH_BUCKET
```

![图6. 低碎片化堆后端内部结构](图6)

LFH 后端的主要特点是使用不同大小的 bucket 来避免碎片化。每个 bucket 由段分配器分配的子段组成。段分配器通过使用 `_HEAP_LFH_CONTEXT` 结构体的 `_HEAP_SUBALLOCATOR_CALLBACKS` 字段来使用。子分配器回调函数与 LFH 上下文和 `RtlpHpHeapGlobals` 的地址进行异或。

```plaintext
callbacks.Allocate = RtlpHpSegLfhAllocate;
callbacks.Free = RtlpHpSegLfhVsFree;
callbacks.Commit = RtlpHpSegLfhVsCommit;
callbacks.Decommit = RtlpHpSegLfhVsDecommit;
callbacks.ExtendContext = RtlpHpSegLfhExtendContext;
```

LFH 子段以 `_HEAP_LFH_SUBSEGMENT` 结构体为首。

```plaintext
kd > dt nt! _HEAP_LFH_SUBSEGMENT
+0x000 ListEntry : _LIST_ENTRY
+0x010 Owner : Ptr64 _HEAP_LFH_SUBSEGMENT_OWNER
+0x010 DelayFree : _HEAP_LFH_SUBSEGMENT_DELAY_FREE
+0x018 CommitLock : Uint8B
+0x020 FreeCount : Uint2B
+0x022 BlockCount : Uint2B
+0x020 InterlockedShort : Int2B
```