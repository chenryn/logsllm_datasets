---
## Page 324
308第12章漏洞利用缓解技术
次编号、文件的inode编号以及该内存区域的名字。从结果的权限部分可以看到，GalaxyNexus
中的栈和堆是不可执行的，但是在较老的 Motorola Droid中，栈和堆都是可执行的。
在Android1.5发布时，Linux内核就已经有了这个缓解机制，不过Android系统中的二进制
可执行文件在编译时并未启用对这一特性的支持。2010年5月5日，编号为2915cc3的commit
加人了这一支持。两周后发布的Android2.2（冻酸奶）并未使用这个保护措施。直到下一个版本
Android2.3（姜饼）发布时，才最终将这一缓解技术用在用户的终端设备上。不过，有一些姜饼
设备只是部分实现了这一缓解技术，例如运行Android 2.3.4的索尼Xperia Play手机。下面节选
了这一设备上栈和堆的内存映射结果：
$ + on a Sony Xperia Play with Android 2.3.4
S cat /proc/self/maps Igrep -E *(stack [heap) *
0001c000-00023000 rwxp 00000000 00:00 0
7e9af000-7e9b0000 rv-p 00000000 00:00 0
[dea]
[stack]
可以看到，这里的栈是不可执行的，但堆中的数据依然可以执行。查看这个设备的内核代码，
可以发现保持维的可执行是出于遗留的兼容性问题考虑，不过还不清楚是否真正有必要。2010
年6月发布的AndroidNDK4b版启用了这个缓骏解机制。自此以后，所有版本的AOSP和NDK都
默认启用这一编译器选项。有了这个保护技术，攻击者就无法直接执行位于不可执行映射区的本
地代码。
12.6地址空间布局随机化
地址空间布局随机化（ASLR）是一种将煸引人进程内存地址空间的缓解技术，最初由PaX
团队在2001年作为一种临时应对方案发布。在其出现之前，绝大部分漏洞利用代码都依赖于硬
编码的地址。尽管这并不是严格的规定，但当时的漏润利用开发者通常使用这样的地址来简化开
发工作。
整个操作系统内核中的多处地方都已经实现了这个缓解机制。然面，和防止数据执行一样，
内核是否启用ASLR取决于二进制可执行代码模块中的信息，也就是说，还需要编译器工具链的
相应支持。
Linux内核提供了多种内存区域，包括提供brk和mmap系统调用使用的区域、栈内存空间
和其他区域。brk系统调用创建的内存区域用于进程存储堆中的数据。mmap系统调用负责将库
文件、普通文件和其他共享内存映射到进程的虚拟地址空间。栈内存空间则在进程创建时就被
分配好了。
ASLR的原理是将的概念引人这些调用所分配的虚拟地址空间。由于这些区域被创建在多
个地方，将每块内存区域随机化需要进行专门的考量并一一实现。因此，ASLR通常会分阶段实
现。从过去的情况来看，同一个操作系统会在各个版本中支持越来越多的ASLR。只有当所有可
能的内存段都被随机化时，才能称该操作系统实现了“完全的ASLR支持”。
即便系统完全支持ASLR了，特定进程的地址空间也不一定会被完全随机化。如果在编译时
遗漏了开启这类特性所需的编译器标志，生成的可执行文件就不支持ASLR，无法被随机化。例
---
## Page 325
12.6地址空间布局随机化309
如，要生成位置无关可执行文件（Position-Independent Executable，PIE），就需要在编译时传入
-fPIE或者-pie标志。使用readelf工具可以判断二进制文件在编译时是否开启了这些标志，
如下所示：
dev:-/android $ readelf -h cat-g1 ∣ grep Type:
dev:~/android $ + cat binary from Android 1.5
ype:
EXEC (Executable file)
dev:~/android $ readelf -h cat-gn-takju 1 grep Type:
dev:~/android $ + cat binary from Android 4.2.1
Type:
DYN (Shared object fi1e)
当二进制可执行文件支持基地址的随机化时，其类型是DYN；不支持则类型是EXEC。从前
面的输出可以看出，来自G1的cat文件无法被随机化，面来自GalaxyNexus的cat文件可以。要
验证这一点，还可以通过多次查看proc文件系统下的maps文件对基地址进行采样，如下所示：
 + two consecutive sanples on Android 1.5
02500:00000000dx-200081000-00080000
/system/bin/toolbox/cat/proc/self/maps|head -1
/systen/bin/toolbox
00008000-00018000 r-xp 00000000 1f:03 520
/8ystem/bin/toolbox
shel1@android:/ $ /system/bin/cat /proc/self/maps 1 grep toolbox 1 \
shell9android:/ $ + tvo consecutive sanples on Android 4.2.1
9220100100000000dx-100002000-0000000
head -1
shel1eandroid:/ S /system/bin/cat /proc/self/maps 1grep too1box |\
/aystem/bin/toolbox
40078000-40095000 r-xp 00000000 103:02 267 /system/bin/too1box
head -1
上面的结果清楚地显示，Android4.2.1上有相应的二进制基地址随机化。这一点可以从该二
进制文件代码区域中起止地址的第一个数字看出来。在两次连续的执行中，分别对应的基地址是
不同的，分别为0x4000e000和0x40078000。和预期一样，在Android1.5上，二进制文件的基地
址并未被随机化。
注意Android中的cat程序通常只是toolbox二进制文件的一个符号链接。此外，Android提供
的shell经常会内建一条cat命令。在这样的系统上，需要执行/system/bin/cat来获得精
确的（多次执行）采样结果。
另外需要注意的内存区域是vdso区域（x86）或者vectors区城（ARM）。这类内存映射可以
帮助内核更轻松、更快速地进行通信。但是直到2006年，x86Linux才完成vdso区域的随机化。甚
至在内核支持vdso的随机化以后，一些Limux发行版又过了很久才启用其所需的内核配置选项。
12
与其他现代操作系统一样，Android对ASLR的支持也是分阶段完成的。虽然它在4.0中引
人了最初的支持，但是仅仅实现了对栈和mmap系统调用所创建区域（包括动态链接库）的随
机化。Android4.0.3在commitd707fb3中实现了对堆空间的随机化，但是动态链接器（linker）
---
## Page 326
310第12章漏洞利用缓解技术
本身的随机化并未实现。第8章和第9章介绍了Georg Wicherski和JoshuaJ.Drake开发的浏览
器漏洞利用，其中涉及这一点。接下来，Android4.1.1作出了较大的改进，为linker和所有其他
的系统二进制文件加人了嫡。在本书写作时，Android已经儿乎完全支持ASLR了，未被随机化
的内存只剩vectors区域。
注意特多种缓解机制一层层地结合起来是纵深防御的一种形式，可以极大地提高有效漏润利
用的创建难度。最好的例子就是ASLR和XN同时完全启用的情形：如采单独使用，它
们起到的作用则很有限。如果没有完全启用ASLR，攻击者就可以使用第9章介绍的ROP
技术来绕过XN。如果完全启用ASLR而没有XN，也很容易被堆喷射（hcap spraying）
之类的技术攻陷。这些缓解技术相辅相成，最终构成更强的安全防护。
12.7保护栈
1997年，CrispinCowan创造了一种叫作StackGuard的保护技术，用于对抗基于栈的缓冲区
溢出。这种保护技术的工作原理是在当前栈帧保存的返回地址之前存储一个探测值。这个探测值
有时称为cookie值，在函数的起始代码处被动态地创建出来。创建该值的代码则是由编译器在编
译时插人可执行文件的。这个探测值最初由全0构成，后来升级为使用随机的cookie值，以应对
发生memcpy操作时的缓冲区溢出攻击。最后，StackGuard不再有人维护，其他栈保护机制陆续
被创造出来并得以实现。
为填补 StackGuard 的空缺，IBM的 Hiroaki Etoh开创了一个名为 ProPolice 的项目，又叫作
SSP，即Stack-Smashing-Protector（直译为“栈粉碎保护器”）的缩写。ProPolice与StackGuard
有许多不同之处：第一，IBM在编译器的前端而非后端实现了这一保护机制；第二，IBM进一
步扩展了保护范围，面不仅仅是针对被保护函数的返回地址；第三，函数中的变量会被重新排序，
使溢出一个缓冲区或者数组后影响到其他局部变量的可能性变小；第四，ProPolice会复制一份函
数参数，同样保护它们免受溢出的影响。现在，ProPolice已经成为GCC的标准，在包括Android
在内的许多操作系统中都默认启用。
在Android中，使用GCC编译器时传人-fstack-protector标志会启用ProPolice栈保护
机制。Android从第一个公开版本（1.5）开始就一直支持这个特性。除了用于操作系统自身，Android
NDK的这一缓解机制也被作为默认项提供给第三方开发者。这样，所有编译产生的二进制代码都
能默认得到保护。Android很早就开始使用这一缓解机制，让许多栈缓冲区溢出漏洞无法被利用。
12.8保护格式化字符串
格式化字符串漏洞是一类很有趣的问题。第一次发现并公布这种问题时，许多人都惊讶于这
种错误竞然可以被利用。随着越来越多的人开始了解和利用这类问题，对其缓解的研究也开始了。
2001年，多位研究人员共同发表了题为“FormatGuard:AutomaticProtectionFromprintfFormat
---
## Page 327
12.8保护格式化字符串311
StringVulnerabilities"的论文。现在，已经出现了许多应对该问题的缓解技术，不少都在上述论文
中有所介绍。
其中一种策略是在编译代码时传人一些特殊的编译参数，让编译器检查代码中是否存在可能
被利用的格式化字符串。将这种保护方法称为缓解技术也许不太恰当，因为它试图完全防止这些
问题进入运行时系统，而不是防止遇脱检测的问题被利用。要使用这个保护方法，只需在编译代
码时将-wformat-security和-Werror=format-security这两个参数传给编译器即可。下
面的shell会话展示了启用这些参数后编译器的行为：
dev:~/android $ cat fnt-test1.c
include 
int main(int argc, char *argv[1) {
printf (argv[1])
return 0:
dev:~/android $ gcc -wformat-security -Werror=format-security -o test \
fmt-testl,e: In funetion *main′:
fnt-testl.c
fmt-test1.c:3:3: error: fornat not a string 1iteral and no format
ccl: sone warnings being treated as errors
arguments [-Herror=fornat-security]
dev:~/android $ 1s 1 test
ls: cannot access test: No such file or directory
可以看到，编译器打印出了一个错误，并没有生成可执行文件。编译器成功检测到一个非常
量字符串被作为格式化字符申参数传递给了printf函数。这样的非常量字符串可以被攻击者控
制，因此可能会出现安全漏洞。
不过该保护技术并不够全面，许多存在漏洞的程序无法被检测出来。例如，下面这段代码不
会造成任何警告，因此生成了可执行文件：
devi~/android $ cat fmt-test2.c
int main(int arge, char *argv[1) (
#include 
printf (argv[1], arge);
dev:~/android $ 1s -1 test
fnt-test2.c
dev:~/android $ ./test tx
2
这样的情况还有许多。如果一个函数使用了stdarg.h头文件提供的可变参数功能（即该函数
接受的参数数量并不固定），GCC就会通过_format_函数属性来实现这种保护。下面这段代
码来自AOSP源代码树中的bionic/ibc/include/stdio.h文件，说明了printE函数如何使用这一注
2
释符号：
printf(const char *, ...)
238
_attribute_((_format_ (printf, 1, 2)))
---
## Page 328
312第12章漏润利用缓解技术
这个函数属性有三个参数：第一个是函数名；后两个是要传递给printf的参数的位置索引，
从1开始，分别指向格式化字符申本身的索引和格式化字符串后首个要传人参数的索引。有许多
使用这种方式标记的函数，printf只是之一。如果使用了可变参数的函数没有被这样标记，GCC
的-Wformat警告功能将无法检测到这种潜在的漏润情况。
Android从2.3开始对分发的二进制文件采用-Wformat-security标志进行编译。Android
源代码在2010年5月14日加人了这个机制，相关的commitid是d868cad。这个commit让Android
中的所有代码在编译时都能得到该技术的保护。在所有版本的NDK中，编译器都支持这一特性，
但是直到2013年7月发布的r9版，NDK才开始将其设置为默认的端译标志。也就是说，除非开
发者手动指定参数，用较老版本NDK编译的代码更容易受到格式化字符串攻击的影响。
提示在build/core/combo/TARGET_linux-.mk文件中可以找到编译AOSP时使用的双认
编译器参数，其中表示编译目标的架构（通常是arm）。
另一种策略是禁用tn格式化指示符。在格式化字符串漏洞利用中，这个指示符被用于精确地
造成内存破坏。2008年10月，在Android的第一个公开版本发布之前，Android开发人员就从
Bionic库中移除了对en指示符的支持。禁用它虽然能让一些问题变得不可利用，但并不能从整体
上解决这类问题。攻击者还是可以利用其它格式化指示符造成缓冲区溢出或者拒绝服务。
还有一种策略是在编译时将_FORTIFY_SOURCE值赋为2。这个缓解技术可以防止格式化字
符串使用驻留在可写内存中的&n指示符。与-Wformat-security标志不同，这个保护措施中还
包含一个在操作系统C运行时库中实现的runtime组件。在12.11节中，可以看到关于这一策略
以及Android对其支持的更多细节。
12.9只读重定位表
覆盖用于解析外部函数的指针是另一种流行的内存破坏型漏洞利用技术，主要是修改全局偏
移量表（GlobalOffsetTable，GOT）中的地址，使其指向攻击者构造的机器码或者其他对攻击者
有用的函数。因为用readelf或者objdump等工具可以很容易地读出GOT中条目的地址，所
以这项技术在很多漏洞利用中都得到了使用。
Linux的长期贡献者JakubJelinek在binutils邮件列表中提出了一个补丁，用于防止攻击者使