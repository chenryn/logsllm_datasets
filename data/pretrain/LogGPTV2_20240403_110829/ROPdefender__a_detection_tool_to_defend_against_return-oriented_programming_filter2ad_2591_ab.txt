erations, (un)conditional jumps, and system calls.
2.1 High-Level Idea of ROP
Figure 2 illustrates the general ROP attack. It shows a
simpliﬁed version of a program’s memory layout consisting
of a code section, libraries (lib), a data section and a control
structure section (CS). In order to mount a ROP attack, the
adversary exploits a memory-related vulnerability of a spe-
ciﬁc program, e.g., a buﬀer overﬂow. Hence, the adversary is
able to overwrite control-ﬂow information on the CS section
(the stack), e.g., the return address of a vulnerable func-
tion (step 1). The adversary injects several return addresses
each pointing to an instruction sequence in the lib section.
In step 2, the stack pointer (SP) is moved to the ﬁrst return
address. If the adversary uses conventional stack smashing
techniques [4] (i.e., overwriting the return address of a func-
tion), the value of SP will be automatically changed to this
position. This is because return address 1 is injected at the
place where the original return address was located. Upon
function return, execution is not redirected to the original
calling function but instead to an instruction sequence in the
lib section (step 3). This sequence is terminated by another
return instruction which pops return address 2 from the CS
section (step 4) and redirects execution to the next instruc-
tion sequence (step 5). This procedure is repeated until the
adversary terminates the program.
As shown above, instruction sequences are chained to-
gether via return instructions. In general, the ROP attacks
presented so far are all based on this principle [53, 8, 24, 38,
41, 12, 32, 51]. A new ROP attack has been recently pre-
sented in [11] that is solely based on indirect jumps rather
than returns. However, in this paper, we focus on conven-
tional ROP attacks (based on return instructions), but we
discuss in Section 5.3 how this new class of attacks can be
addressed in the future.
Unintended Instruction Sequences.
On Intel x86, ROP attacks are in particular dangerous
due to the presence of the so-called unintended instruction
sequences. These can be issued by jumping in the middle of
a valid instruction resulting in a new instruction sequence
never intended by the programmer nor the compiler. These
sequences can be easily found on the x86 architecture due to
variable-length instructions and unaligned memory access.
46735Return to nextsequence2Stack pointerMove1CodeProgram MemoryReturnReturnLibraries (lib)Instruction SequenceInstruction SequenceDataReturn Address 1Return Address 2Return Address 3Control Structures (CS)return addressPop nextCorrupt CSAdversarystack-pivot sequence allowing to change SP to an arbitrary
value [20]. For instance, on Intel x86 this can be achieved
by pointing IP to the following (unintended) sequences:
xchg %esp ,% eax ;
mov %ecx , %e s p ;
r e t
r e t
Since the ﬁrst sequence exchanges (xchg) the contents of
%eax and %esp (SP), it requires the %eax register to con-
tain the desired value of SP. The second sequence moves the
content of %ecx to %esp. Therefore, the adversay has to
load the desired value of SP into %ecx before. The ﬁnal re-
turn instruction of both sequences has the eﬀect that return
address 1 is popped from the stack and execution is redi-
rected to instruction sequence 1. Note that both sequences
must be unintended to bypass countermeasures that check
(intended) returns in function epilogues. Note that further
attack techniques on how to instantiate a ROP attack with-
out using a return instruction are also discussed in [11].
3. OUR SOLUTION
In this section we present our security architecture to de-
tect and defeat ROP attacks using return instructions.
3.1 Assumptions
In the following we brieﬂy discuss the main assumptions
in our model.
1. Adversary: The adversary is able to launch a ROP
attack which cannot be detected by compiler or instru-
mentation based solutions that only secure returns in
function epilogues (see Section 2.2 for an example).
2. Side information: We assume that we have no ac-
cess to side information (e.g., source code or debugging
information) while defeating ROP. This information is
rarely provided in practice, impeding users to deploy
defenses against ROP attacks.
3. Security measures: We assume that the hardware
and the operating system enforce the W ⊕ X security
model. Modern processors and operating systems al-
ready enable W ⊕ X by default.
4. Trusted Computing Base: The adversary cannot
tamper with our tool itself or the underlying operat-
ing system kernel. If the adversary would be able to
do so, any detection method could be circumvented or
even disabled. Hence, we rely on other means of pro-
tection of the underlying trusted computing base, e.g.,
hardening the kernel, veriﬁcation or extensive testing
as well as load-time integrity checking of the software
components belonging to our tool.
3.2 High-Level Description
Since we assume no access to source code (Assumption 2),
we make use of instrumentation. Basically, it allows to add
extra code to a program to observe and debug the program’s
behavior [45]. We use a shadow stack to store a copy of the
return address once a function is called. We instrument all
return instructions that are issued during program execu-
tion and perform a return address check. Our approach is
similar to existing shadow stack approaches, e.g., [15, 59].
However, in contrast to existing approaches, ROPdefender
(i) checks each return instruction issued to the processor,
Figure 3: Our high-level approach
which detects even unintended instruction sequences, and
(ii) it handles various special cases that are necessary for a
practical defense tool.
Our high-level solution for detecting ROP attacks is de-
picted in Figure 3. Before an instruction is executed by the
processor, our solution intercepts the instruction and exam-
ines the instruction’s type. First, we check if the current
instruction is a call. If this is the case, we store a copy of
the pushed return address in a shadow stack (transition 2a
in Figure 3).
Otherwise, if the instruction is a return instruction, we
check if the top return address on the shadow stack equals
the return address on top of the program stack (transition
2b and 3a in Figure 3). If there is a mismatch, the return
address has been corrupted or a calling exception occurred.
Our solution detects any return address violations: It does
not only prevent ROP attacks. It also provides detection of
all buﬀer overﬂow attacks which overwrite return addresses.
According to the Intel x86 calling convention [33], re-
turn addresses have to be stored on the stack. A function
call is performed through the call instruction, which au-
tomatically pushes the return address onto the top of the
stack (TOS). After the called function has completed its
task, it returns to the caller through a ret instruction, which
pops the return address from the stack and redirects execu-
tion to the code pointed to by the return address. However,
there are a few exceptions that violate the traditional calling
convention and the function returns elsewhere. We discuss
and categorize these exceptions in Section 4. For the mo-
ment, we assume that a function always returns to the ad-
dress originally pushed by the call instruction. Nevertheless,
our prototype implementation of ROPdefender also handles
the exceptions as we detail in Section 4.
3.3 Tools and Techniques
As mentioned above, we use instrumentation to detect
ROP attacks. Generally, instrumentation can be performed
at runtime or at compile-time. For our purpose we focus on
dynamic binary instrumentation at runtime to avoid access
to side information. Generally, there are two classes of dy-
namic binary instrumentation frameworks: (i) probe-based
and (ii) just-in-time (jit) compiler-based.
Probe-based instrumentation used in DynInst [9], Vul-
can [23] or DTrace [10] enforces instrumentation by replacing
instructions with the so-called trampoline instructions in or-
der to branch to instrumentation code. DTrace, for instance,
replaces instrumented instructions with special trap instruc-
tions that, once issued, generate an interrupt. Afterwards
the instrumentation code is executed.
Instruction12b3bProgram StackReturn 2Return 1Return 3Return 4Shadow StackIs Call?Push TOS ontoShadow Stack2aCompare TOS ofboth StacksIs Return?3aFetch nextInstructionSavedReturn 4SavedReturn 3SavedReturn 2SavedReturn 1Jit-based instrumentation frameworks like Valgrind [46],
DynamoRIO [7], and Pin [42] use a just-in-time compiler.
Unlike to probe-based instrumentation no instructions in the
executable are replaced. Before an instruction is executed
by the processor, the instrumentation framework intercepts
the instruction and generates new code that enforces instru-
mentation and assures that the instrumentation framework
regains control after the instruction has been executed by
the processor.
We use jit-based instrumentation since it allows us to de-
tect sophisticated ROP attacks based on unintended instruc-
tion sequences: It allows to intercept each instruction before
it is executed by the processor, whether the instruction was
intended by the programmer or not.
In contrast, probe-
based instrumentation frameworks rewrite instructions ahead
of time with trampoline instructions and consequently in-
strumentation is only performed if the trampoline instruc-
tion is really reached.
3.4 General Architecture
We incorporate ROPdefender directly into the dynamic
binary instrumentation (DBI) framework. The DBI frame-
work as well as the operating system are part of our trusted
computing base (see Assumption 4). Figure 4 depicts our
proposed architecture.
The motivation behind using Pin [42] was that in [42]
Cohn et al. benchmarked well-known jit-based DBI frame-
works and concluded that Pin achieves the best performance
among them. Pin [42] is typically used for program analysis
such as performance evaluation and proﬁling.5
Intel uses
Pin in the Intel Parallel Studio [34] for memory and thread
checking or bottleneck determination. However, we use this
binary instrumentation framework for the purpose of detect-
ing ROP attacks.
4.1 Binary Instrumentation Architecture
Figure 5 shows the instantiation of our architecture con-
sisting of the Pin Framework and the Pintool ROPdefender.
Pin itself has mainly two components: (i) a code cache and
(ii) a Virtual Machine (VM) which contains a JIT compiler
and an emulation unit. A program instrumented by Pin is
loaded into the VM. The JIT compiler enforces instrumenta-
tion on the program at runtime. The resulting instrumented
code is stored in the code cache in order to reduce perfor-
mance overhead if code pieces are invoked multiple times.
Figure 4: General architecture of ROPdefender
The general workﬂow is as follows: The program is loaded
and started under the control of the DBI framework. The
DBI framework ensures that (i) each instruction of the pro-
gram is executed under control of the DBI and (ii) all in-
structions are executed according to the ROPdefender spe-
ciﬁc instrumentation code which then enforces the return
address check.
ROPdefender consists of several shadow stacks and a de-
tection unit. The detection unit pushes/pops return ad-
dresses onto/from the connected shadow stacks. Further,
the detection unit is responsible for enforcing the return ad-
dress check. The reason why ROPdefender maintains mul-
tiple shadow stacks is that a process may launch several
execution threads.
If all threads would share one shadow
stack, false positives would arise, since the threads would
concurrently access the shadow stack.
4.
IMPLEMENTATION DETAILS
For our implementation we used the jit-based binary in-
strumentation framework Pin (version 2.8-33586) and the
Linux Ubuntu OS (version 10.04). We also implemented
our tool on Windows XP, but we describe our implemen-
tation details and exception handling in the following for
the Linux Ubuntu OS. Further, our implementation of the
ROPdefender detection unit is one C++ ﬁle consisting of
165 lines of code.
Figure 5: Implementation of ROPdefender within
the binary instrumentation framework Pin
Pin is conﬁgured by Pintools. Basically, Pintools allow
to specify own instrumentation code. The JIT compiles in-
structions according to the Pintool. Pintools can be written
in the C/C++ programming language. Eﬀectively, here is
the place where we implement our ROPdefender . After Pin
is loaded and initialized, it initializes the ROPdefender de-
tection unit. Then the program which we want to protect
is started under the control of Pin. When a program is
started, Pin intercepts the ﬁrst trace of instructions and the
JIT compiles it into new instructions in order to incorporate
instrumentation code. A trace is a sequence of instructions
terminated by an unconditional branch. Trace instrumen-
tation allows to instrument an executable one trace at a
time. The trace consists of several basic blocks, whereas
each block is a single entry and a single exit (any branch)
sequence of instructions. Instrumenting blocks is more eﬃ-
cient than instrumenting each instruction individually. Af-
terwards, the compiled code is transferred to a code cache
over the interface I5 that ﬁnally forwards the compiled in-
structions to the operating system through interface I2. If
a sequence of instructions is repeated, no recompilation is
necessary and the compiled code can directly be taken from
the code cache. The emulation unit is necessary for those
5Pin has been also used as fuzzing tool [61] and as dynamic
taint analysis system [17].
Dynamic Binary Instrumentation (DBI) FrameworkProcessThread nThread 2Thread 1Stack 2ShadowStack 1ShadowStack nShadowROPdefenderDetection UnitStack 1Stack 2Stack nPintool: ROPdefenderDetection UnitI4I4I4I3ShadowOperating SystemProgramProcessThread 1Thread 2Thread nVirtual MachineUnitJIT−CompilerCodeShadowI2I6I5I1JIT−Based Instrumentation Framework (Pin)BinaryInstrumentation APIEmulationCacheAnalyseRoutinenInstrumentationRoutinenShadowTrusted Computing Base (TCB)instructions that cannot be executed directly (e.g., system
calls). Such instructions are forwarded to the operating sys-
tem over interface I6.
Instrumentation and Analysis Routines.
According to Figure 3 in Section 3.2, we speciﬁed two in-
strumentation routines that check if the current instruction
is a call or a return instruction. Further, we deﬁned two
analysis routines that perform the actions and checks ac-
cording to the steps 2a and 3a in Figure 3. To implement a
shadow stack for each thread we additionally use the C++
stack template container. To avoid that one thread accesses
the shadow stack of another thread, we use the thread lo-
cal storage (TLS) from the Pin API, whereas each thread
must provide a key (created at thread creation) to access
its TLS. Elements can be pushed onto and popped oﬀ the
shadow stack as for the usual stack in program memory.
The instrumentation routines of our ROPdefender use the