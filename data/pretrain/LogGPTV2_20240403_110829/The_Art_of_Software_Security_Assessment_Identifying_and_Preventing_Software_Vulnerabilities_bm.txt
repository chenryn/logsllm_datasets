were attempting to desynchronize. Sometimes multiple variables interrelate to 
represent a more complicated state, as in Listing 7-3, which consists of code from 
Sendmail 8.11.x. 
Listing 7-3. Sendmail crackaddr() Related Variables Vulnerability 
char * 
crackaddr(addr) 
        register char *addr; 
{ 
        register char *p; 
        register char c; 
        int cmtlev; 
        int realcmtlev; 
        int anglelev, realanglelev; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
321 
        int copylev; 
        int bracklev; 
        bool qmode; 
        bool realqmode; 
        bool skipping; 
        bool putgmac = false; 
        bool quoteit = false; 
        bool gotangle = false; 
        bool gotcolon = false; 
        register char *bp; 
        char *buflim; 
        char *bufhead; 
        char *addrhead; 
        static char buf[MAXNAME + 1]; 
    ... 
        bp = bufhead = buf; 
        buflim = &buf[sizeof buf - 7]; 
        p = addrhead = addr; 
        copylev = anglelev = realanglelev = cmtlev = 
            realcmtlev = 0; 
        bracklev = 0; 
        qmode = realqmode = false; 
        while ((c = *p++) != '\0') 
        { 
                /* 
                **  If the buffer is overfull, go into a 
                **  special "skipping" mode that tries to 
                **  keep legal syntax but doesn't actually 
                **  output things 
                */ 
                skipping = bp >= buflim; 
Listing 7-3 shows the initial setup of the crackaddr() function, which is used to check 
the syntax of a supplied e-mail address (as well as output it to the buf character 
array). Here, several variables combine to represent the function's state. (All 
variables ending in lev indicate some level of nested address components.) The 
skipping mode variable is used to indicate that no more output buffer space remains, 
and several other variables represent different aspects of the input string (and its 
validity). The following code shows a little more of the processing in this function. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
322 
     /* check for comments */ 
         if (c == '(') 
         { 
                 cmtlev++; 
                 /* allow space for closing paren */ 
                 if (!skipping) 
                 { 
                         buflim; 
                         realcmtlev++; 
                         if (copylev++  0) 
        { 
                if (c == ')') 
                { 
                        cmtlev; 
                        copylev; 
                        if (!skipping) 
                        { 
                                realcmtlev; 
                                buflim++; 
                        } 
                } 
                continue; 
        } 
      ... 
        if (c == '>') 
        { 
                if (anglelev > 0) 
                { 
                        anglelev; 
                        if (!skipping) 
                        { 
                                realanglelev; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
323 
                                buflim++; 
                        } 
                } 
                else if (!skipping) 
                { 
                        /* syntax error: unmatched > */ 
                        if (copylev > 0) 
                                bp; 
                        quoteit = true; 
                        continue; 
                } 
                if (copylev++ ). After studying the code, you can see recurring patterns that 
users can supply to cause these characters to be written outside the buffer's bounds. 
Specifically, when an angle bracket character is supplied, it can be written to the 
output buffer despite skipping mode being on, as long as copylev is less than or equal 
to zero. When the angle character is written, copylev is incremented, so you need a 
way to decrement it back to zero. It turns out that you can decrement copylev by 
supplying a closed parenthesis character as long as cmtlev is greater than 0, which 
you can ensure by supplying an open parenthesis character first. Therefore, the 
pattern ()>()>()>... causes a number of > characters to be written outside the buffer's 
bounds. This bug has two root causes: There are places when characters can be 
written to an output buffer despite skipping mode being on, and the lev variables 
aren't incremented and decremented equally by characters enclosing an address 
component, such as (and), when skipping mode is on. 
When you begin to examine a new function, it's a good idea to go through the code 
quickly and identify any relationships such as this one in the function. Then make one 
pass to see whether any variables can be desynchronized. A well-designed application 
tends to keep variable relationships to a minimum. Developers often conceal complex 
relationships in separate subsystems so that the internals aren't exposed to callers; 
concealing variables in this manner is known as data hiding and is generally 
considered good programming form. However, data hiding can make your job harder 
by spreading complex relationships across multiple files and functions. Examples of 
data hiding include private variables in a C++ class and the buffer management 
subsystem in OpenSSH. You see an example in the next section of a 
desynchronization vulnerability in this buffer management subsystem. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
324 
Structure and Object Mismanagement 
Applications often use large structures to manage program and session state, and 
group related data elements. Indeed, the essence of object-oriented programming 
encourages this behavior, so code reviewers are often confronted with code that 
makes extensive use of opaque objects or structures, which are often manipulated 
through insufficiently documented interfaces. Code reviewers must familiarize 
themselves with these interfaces to learn the purpose of objects and their constituent 
members. 
As discussed in the previous section, the more related variables there are in a part of 
an application, the higher the likelihood for an inconsistent state error. One goal of 
auditing object-oriented code should be to determine whether it's possible to 
desynchronize related structure members or leave them in an unexpected or 
inconsistent state to cause the application to perform some sort of unanticipated 
operation. For example, OpenSSH makes extensive use of dynamic resizable data 
buffers throughout the application. The routine responsible for initializing the buffer 
structure, buffer_init(), is shown in Listing 7-4. 
Listing 7-4. OpenSSH 3.6.1 Buffer Corruption Vulnerability 
/* Initializes the buffer structure. */ 
void 
buffer_init(Buffer *buffer) 
{ 
   buffer->alloc = 4096; 
   buffer->buf = xmalloc(buffer->alloc); 
   buffer->offset = 0; 
   buffer->end = 0; 
} 
From this, you can deduce that the buf and alloc variable share a relationship: The 
alloc member should always represent the amount of bytes allocated in the buffer. 
By examining the other buffer_* functions, you can deduce several more 
relationshipsnamely, that offset and end are offsets into a buffer, and both must be 
less than alloc, and offset should be less than end. If these relationships are not 
followed, the code might contain integer underflow problems. Therefore, when 
reviewing this application, you must determine whether any of these variable 
relationships can be violated, as the resulting inconsistent state could cause a buffer 
overflow. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
325 
In this code, two variables could become desynchronized in one instance: the buf and 
alloc variables. This problem occurs in buffer_append_space(), which is shown in the 
following code: 
/* 
 * Appends space to the buffer, expanding the buffer if 
 * necessary. This does not actually copy the data into the 
 * buffer, but instead returns a pointer to the allocated 
 * region. 
*/ 
void * 
buffer_append_space(Buffer *buffer, u_int len) 
{ 
    void *p; 
    if (len > 0x100000) 
        fatal("buffer_append_space: len %u not supported", len); 
    /* If the buffer is empty, start using it from the beginning. */ 
    if (buffer->offset == buffer->end) { 
        buffer->offset = 0; 
        buffer->end = 0; 
    } 
restart: 
    /* If there is enough space to store all data, store it 
       now. */ 
    if (buffer->end + len alloc) { 
        p = buffer->buf + buffer->end; 
        buffer->end += len; 
        return p; 
    } 
    /* 
     * If the buffer is quite empty, but all data is at 
     * the end, move the data to the beginning and retry. 
     */ 
    if (buffer->offset > buffer->alloc / 2) { 
        memmove(buffer->buf, buffer->buf + buffer->offset, 
        buffer->end - buffer->offset); 
        buffer->end -= buffer->offset; 
        buffer->offset = 0; 
        goto restart; 
    } 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
326 
    /* Increase the size of the buffer and retry. */ 
    buffer->alloc += len + 32768; 
    if (buffer->alloc > 0xa00000) 
        fatal("buffer_append_space: alloc %u not supported", 
               buffer->alloc); 
    buffer->buf = xrealloc(buffer->buf, buffer->alloc); 
    goto restart; 
    /* NOTREACHED */ 
} 
The alloc variable is incremented by a certain amount, thus making it inconsistent 
with the amount of data that was allocated in buf. Afterward, buf is reallocated so that 
the structure is consistent when it's returned to the calling function, but the developer 
didn't consider the implications of the xrealloc() function failing or the length check 
of alloc against the constant value 0xa00000 failing. Both failures result in the fatal() 
function being called eventually. If the length check fails or xrealloc() fails, fatal() 
is called immediately. The xrealloc() implementation is shown in the following code: 
void * 
xrealloc(void *ptr, size_t new_size) 
{ 
    void *new_ptr; 
    if (new_size == 0) 
        fatal("xrealloc: zero size"); 
    if (ptr == NULL) 
        new_ptr = malloc(new_size); 
    else 
        new_ptr = realloc(ptr, new_size); 
    if (new_ptr == NULL) 
        fatal("xrealloc: out of memory (new_size %lu bytes)", 
              (u_long) new_size); 
    return new_ptr; 
} 
You can see that xrealloc() also calls fatal() upon failure. Further investigation 
reveals that the fatal() function cleans up several global variables, including buffers 
used for handling data input and output with the buffer_free() routine, which is 
shown here: 
/* Frees any memory used for the buffer. */ 
void 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
327 
buffer_free(Buffer *buffer) 
{ 
    memset(buffer->buf, 0, buffer->alloc); 
    xfree(buffer->buf); 
} 
Therefore, if an allocation fails or the inbuilt size threshold is reached, and the buffer 
being resized is one of those global variables, the memset() function in buffer_free() 
writes a large amount of data past the end of the allocated buffer. Several other 
cleanup functions are subsequently called, allowing an opportunity for exploitation. 
This example highlights how structure mismanagement bugs tend to be quite subtle, 
as the code to manage structures is spread out into several small functions that are 
individually quite simple. Therefore, any vulnerabilities tend to be a result of 
aggregate, emergent behavior occurring across multiple functions. One major 
problem area in this structure management code is low-level language issues, such as 
type conversion, negative values, arithmetic boundaries, and pointer arithmetic 
(discussed in Chapter 6(? [????.]), "C Language Issues"). The reason is that 
management code tends to perform a lot of length calculations and comparisons. 
Recall the OpenSSL example of dealing with arithmetic boundaries (see Listing 7-10). 
You were able to pass a negative value to the BUF_MEM_grow() function, which is 
responsible for buffer management in the OpenSSL libraries. Listing 7-5 shows the 
internals of how that function works. 
Listing 7-5. OpenSSL BUF_MEM_grow() Signed Variable Desynchronization 
typedef struct buf_mem_st 
        { 
        int length;     /* current number of bytes */ 
        char *data; 
        int max;        /* size of buffer */ 
        } BUF_MEM; 
... 
int BUF_MEM_grow(BUF_MEM *str, int len) 
        { 
        char *ret; 
        unsigned int n; 
        if (str->length >= len) 
                { 
                str->length=len; 
                return(len); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
328 
                } 
        if (str->max >= len) 
                { 
                memset(&str->data[str->length],0, 
                       len-str->length); 
                str->length=len; 
                return(len); 
                } 
        n=(len+3)/3*4; 
        if (str->data == NULL) 
                ret=OPENSSL_malloc(n); 
        else 
                ret=OPENSSL_realloc(str->data,n); 
        if (ret == NULL) 
                { 
                BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE); 
                len=0; 
                } 
        else 
                { 
                str->data=ret; 
                str->length=len; 
                str->max=n; 
                } 
        return(len); 
        } 
As you can see, this structure represents lengths with signed integers. The code is 
quite dangerous in this context, as all comparisons in the function aren't taking 
negative values into account correctly. You can see that if this function receives a 
negative length value, the first comparison succeeds, and the program erroneously 
determines that enough free space already exists in the currently allocated buffer. 