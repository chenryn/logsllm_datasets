### Solutions and Considerations

Consider a thermometer with a very small display that communicates using a short-range radio. If we have a bowl of disinfectant containing many unused thermometers, it doesn’t matter which one we choose; however, we need to ensure that we communicate with the specific thermometer we pick from the bowl. While we could assign artificial names (such as serial numbers) to the thermometers, this approach is not very user-friendly. Instead, if we have a secure communication channel, such as short-range infrared or physical contact, we can simply transmit the public key over this channel.

### Utility Library for Verifying Human-Readable Properties

To assist application developers in verifying human-readable properties, our utility library provides support for two common cases: names signed by a central authority and ownership of services (e.g., "John’s siesta.pim.Calendar" service). These properties are represented by subclasses of `java.security.Principal`.

### Application Access Control

When designing our system, we envisioned an environment where a PDA uses a single keypair stored on a smart card. This key would be used to access multiple services via different client applications. To restrict what applications can do with the key, we implemented a feature called "application access control."

Since we use SPKI (Simple Public Key Infrastructure) certificate chains for authorizations, we can implement more complex restrictions than simply allowing or denying access to the key. Our implementation stores these restrictions as a subclass of `Permission`. The restrictions are associated with applications using the standard Java 2 policy mechanisms. The only special case is the proxy class. Since the key used for signing the code is different from the service key, the permission must be associated later, after the proxy state and code have been verified.

When the proxy requests permissions to be delegated to its temporary key, the Jini security manager constructs the corresponding `RemotePermission` instance. It then uses the Java 2 stack inspection features (e.g., `AccessController`) to verify that the application is authorized for this action.

### Authorization Checking

Once the server receives a request from the proxy and verifies the proxy’s key, it passes the key and certificates to an SPKI certificate chain verifier module. The verifier checks the certificate signatures and validity, and finds all certificate chains from the service key to the proxy key. These chains are stored in a `PermissionCollection` instance, which is used in the Java 2 security architecture to store a set of related permissions.

The service software can then call the `implies()` method of the collection, providing a parameter corresponding to the client request. The method returns either `true` or `false`.

Storing authorizations in a `PermissionCollection` offers another advantage. The service software can use `AccessController.doPrivileged` to associate the permissions with the Java call stack. Permissions are then checked using the `System.getSecurityManager().checkPermission()` call. This approach is often cleaner than passing a `PermissionCollection` object through a long chain of method calls or storing it in a visible variable. It also allows communicating these permissions to code that doesn't know the original call was remote.

### RMI over TLS

Our architecture allows the proxy to implement any protocol for communicating with the service. In our tests, we used RMI. By default, RMI uses TCP sockets, but it is possible to override this behavior by supplying socket factories for both the server and client sides. This is intended for integrating Transport Layer Security (TLS) sockets.

Using these facilities, we implemented socket factories for TLS client authentication using the Java Security Socket Extension (JSSE) libraries. During implementation, we identified some deficiencies in the current RMI implementation, which we hope will be addressed in future releases.

#### Problems with Client Authentication

Although the socket factories were initially designed for TLS sockets, they only cleanly support server authentication. The socket factories are provided to the constructor of `java.rmi.server.UnicastRemoteObject`, the base class for RMI server objects. The application has no further control over the remote method invocation process. Network connections are formed automatically, and neither the client nor the server has direct access to the underlying socket.

On the client side, it is difficult to verify that the stub is using the secure socket factory. Communicating the correct key to the socket factory is even more challenging, as the socket might be opened before any methods are called (due to distributed garbage collection).

Similar issues arise on the server side. Once a call is received, there is no way to access the socket instance from which it came. For TLS sockets, the socket would contain methods to get the client’s key.

We worked around these problems by communicating the keys using thread-local variables and controlling the deserialization of the stub by wrapping it inside a `MarshalledObject`. We later discovered that Balfanz et al. independently found a similar workaround.

#### Code Bases

We also encountered a limitation in how RMI serializes stubs. When sending a serialized object to a remote system, a codebase URL is included, specifying the location where the bytecode can be downloaded. The current RMI implementation gets this codebase URL from a global system configuration property named `java.rmi.server.codebase`, making it difficult to run multiple services within the same JVM.

Fortunately, if the proxy is loaded with a subclass of `java.net.URLClassLoader`, its `getURLs` method is called to get the codebase URL. If we load the proxy from the URL on the server side and instantiate and initialize it using the reflection API, the codebase is set correctly. We must, of course, verify the signature on the bytecode to ensure we have the right proxy.

### Performance

Table 1 shows our initial performance figures, representing the time required to delegate a permission from the client to the server through the proxy. As the measurements show, the authorization process currently takes a significant amount of time, primarily due to Java cryptographic primitives. However, our current implementation is unoptimized. Pre-generating public key pairs and using them during the protocol run can significantly reduce the time required, as shown in the table.

| Measurement                | Standard Jini/RMI Call | With SPKI and TLS Applied | With Pre-generated Keys |
|----------------------------|------------------------|---------------------------|-------------------------|
| Average (ms)               | 30                     | 6180                      | 983                     |
| Standard Deviation         | 2                      | 80                        | 130                     |

We conducted our measurements using Sun’s JDK 1.2.2 under Red Hat Linux 6.2. Both the client and server were run on the same machine, equipped with a 750 MHz AMD Athlon CPU and 256 MB of RAM. The measurements were repeated ten times, and the average and standard deviation were calculated.

### Related Work

#### Java Security

Most work in Java security has focused on protecting the host from malicious code. The original JDK 1.0 featured a sandbox that limited the operations untrusted code could invoke. The Java 2 security architecture added more flexible and fine-grained access control. Several other solutions have been proposed, and the Java 2 security architecture has been extended with decentralized trust management. The concept of "who is running the code" is implemented in the Java Authentication and Authorization Services (JAAS) and has been extended with roles. Controlling the resources a program can use is also discussed in the literature.

#### Distributed Object Security and Mobile Agents

Much work related to remote object security has focused on CORBA. Although the concepts in CORBA security are similar to those in Jini, the problem of untrusted proxy code requires different solutions. The mobile agent research community has also produced results related to mobile code and security, focusing on protecting sites from malicious agents and agents from malicious hosts.

#### Solutions for Downloaded Proxy Code

Communicating securely through downloaded proxy code presents new security challenges. There are several solutions reported in the literature:

- **Fixed Protocol**: If the communication protocol is fixed, proxies can be generated on the client side, either statically or dynamically.
- **Centrally Signed Proxies**: The proxy code is signed by a central authority, and if the signature is valid, the code is considered fully trusted.
- **Mixed Approach**: Combining dynamically generated proxies (implementing a fixed protocol) with signed hand-written proxies.

Each approach has its own benefits and drawbacks. Fixing the protocol eliminates the need to download proxies but limits the ability to implement part of the proxy functionality on the client side. Requiring centrally signed proxies restricts spontaneous networking. The mixed approach seems most promising but loses some protocol independence.

#### Jini-Specific Security

The security of Jini systems hasn't been extensively studied. Sun presented a demonstration solution at JavaOne 2000, integrating Jini with JAAS, based on a centralized security server and a certificate authority (CA) signing all proxy code. Hasselmeyer et al. developed a Jini security solution based on a centralized secure lookup server. Sun’s future solution for Jini security is the RMI security extension, which provides some support for intelligent proxies but relies on a centralized certificate architecture.

### Evaluation and Future Work

In this project, our goal was to provide a Jini security solution that does not unnecessarily restrict the possibilities for creating secure Jini services. We aimed for protocol independence, reliance on existing Java security mechanisms, transparency to clients, service proxies, and services, and no requirement for centralized servers. We believe we have largely achieved these goals. The implementation allows Jini services to implement any protocol while maintaining security and flexibility.