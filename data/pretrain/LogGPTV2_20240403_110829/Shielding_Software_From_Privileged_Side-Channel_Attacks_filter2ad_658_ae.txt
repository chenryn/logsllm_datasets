Applications: Table 5 lists the average CPU time spent
for OpenSSH client ﬁle transfers on the native FreeBSD
kernel over 20 rounds of execution. We measured the
CPU time by recording the number of unhalted clock
cycles used while executing the ssh client with the
pmcstat utility and then converted this number into mil-
liseconds based on the CPU’s clock speed. We made the
same measurements for the OpenSSH client on Virtual
Ghost with and without optimizations; the VG and Opt-
VG lines in Figure 6 show the results. For ﬁles from
1 KB to 8 MB, the original Virtual Ghost incurs over-
heads of 3% to 12% with a 1% average standard devi-
ation. The optimizations reduce the overhead to 2% to
10%. For ﬁles larger than 8 MB, the overheads of Vir-
tual Ghost with or without the optimizations are negli-
gible. Additionally, the differences between the results
of 128 KB, 256 KB and 512 KB are within the standard
deviation.
Figure 5 shows the average OpenSSH client ﬁle trans-
Size
1
2
4
8
16
32
64
128
256
512
CPU Time
13.7
13.8
13.9
14.5
15.2
16.8
17.1
18.1
19.0
21.5
Std. Dev.
0.3
0.2
0.2
0.3
0.3
0.3
0.4
0.3
0.5
0.4
Size
1,024
2,048
4,096
8,192
16,384
32,768
65,536
131,072
262,144
524,288
CPU Time
26.9
37.1
57.3
97.8
178.4
339.9
662.2
1,306.8
2,596.0
5,171.1
Std. Dev.
0.4
0.4
0.3
0.4
0.4
0.5
0.3
0.6
1.2
2.5
Table 5: OpenSSH Client Average File Transfer CPU
Time. Time in miliseconds. Size in KB.
Figure 5: OpenSSH Client Average File Transfer Rate
on Native FreeBSD
fer bandwidth on the native FreeBSD kernel over 10
rounds. For ﬁles between 1 KB and 2 MB in size, the
original Virtual Ghost incurs negligible overheads rang-
ing from 1% to 3% with up to 1% standard deviations.
With the optimizations, the overheads on bandwidth re-
main similar.
Table 6 shows the overhead of Virtual Ghost with and
without the new optimizations on Bzip2 compression and
GnuPG when signing 2 MB ﬁles. For this experiment,
ghost memory is disabled, so heap objects are allocated
in traditional user-space memory, and physical memory
is mapped on demand. We use a small ﬁle size here as
Figure 6: OpenSSH Client Average File Transfer CPU
Time Normalized to Native FreeBSD
1452    27th USENIX Security Symposium
USENIX Association
0102030405060708090100110120 1 2 4 8 16 32 64 128 256 512 1,024 2,048 4,096 8,192 16,384 32,768 65,536 131,072 262,144 524,288Bandwidth (MB/s)File Size(KB) 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.4012481632641282565121024204840968192163843276865536131072262144524288CPU Time Normalized to NativeFile Size (KB)Apparition-ghostingOpt-VG-LLCPart-ghostingOpt-VG-PG-ghostingOpt-VG-ghostingVGOpt-VGNative (ms)
VG Overhead (×)
Opt-VG Overhead (×)
Bzip2
183.20
1.05
1.04
GnuPG Signing
54.71
1.06
1.03
Table 6: Bzip2 and GnuPG Results for 2 MB Files
Native FreeBSD
std. dev.
Opt-VG Overhead (×)
Opt-VG-PG Overhead (×)
Opt-VG-LLCPart Overhead (×)
Apparition Overhead (×)
RandomAccess
643.23 µs
0.64 µs
1.28
1.32
2.09
2.11
Bzip2
2.89 s
0.00 s
1.04
1.04
1.04
1.05
Clang
28.36 s
0.63 s
1.03
1.03
1.03
1.05
Table 7: RandomAccess, Bzip2 and Clang Results
Virtual Ghost has higher overhead on GnuPG when com-
pressing 2 MB ﬁles than when compressing larger ﬁles.
Virtual Ghost adds 5% overhead to Bzip2, which is re-
duced to 4% with the optimizations. It incurs a 6% over-
head to the overall performance for GnuPG signing; the
optimizations reduce the overhead to 3%. The standard
deviations for both Bzip2 and GnuPG is 0%.
8.3 Page Table Side-Channel Defenses
We now evaluate the performance of our page table side-
channel defenses in Sections 5.1 and 5.2.
Ghosting RandomAccess: The second column of Ta-
ble 7 reports the average latency of each iteration over 20
rounds of execution for the RandomAccess microbench-
mark. The overheads on Virtual Ghost with our new op-
timizations without (Opt-VG) and with our page table
side-channel defenses enabled (Opt-VG-PG) show that
the page table side-channel defenses add no additional
overhead to Opt-VG (when accounting for the standard
deviation of 4%). This is because the only OS kernel
operations incurred during the loop in RandomAccess
are context switches, and our page table defenses add
no overhead to context switching. We believe that Opt-
VG and Opt-VG-PG add overhead to native FreeBSD be-
cause Opt-VG and Opt-VG-PG map ghost memory with
4 KB pages while native FreeBSD maps traditional user-
space memory using super pages whenever possible [57].
Ghosting Bzip2: We enabled ghost memory for Bzip2
for all systems except the native FreeBSD kernel. The
third column of Table 7 reports the average of 10 rounds
of this experiment and shows that our page table defenses
do not affect the overall performance of Bzip2 compres-
sion relative to Opt-VG. The standard deviation is 0%.
Since Bzip2 accesses all the heap memory that it allo-
cates when compressing the 32 MB ﬁle, our page table
defenses do not incur any overhead by disabling demand
paging of ghost memory.
Figure 7: Ghosting OpenSSH Client File Transfer Band-
width Normalized to Native FreeBSD
Ghosting OpenSSH Client: The Opt-VG-PG-
Ghosting line in Figure 6 shows the overhead of our
page table defenses on the unhalted CPU clock cycles
(converted into time using the processor’s clock fre-
quency) of the ssh client transferring ﬁles. Each data
point is the average of 20 rounds of execution. For 1 KB
to 4 MB ﬁles, page table defenses increase the overhead
of Opt-VG (denoted by the Opt-VG-ghosting line in
Figure 6) by 1% to 10% with a 2% standard deviation.
For large ﬁles, page table defenses add no overhead to
the CPU time.
Figure 7 shows the overheads of our page table de-
fenses on the client ﬁle transfer bandwidth. Page table
defenses add no overhead to the optimized Virtual Ghost
across all ﬁle sizes (differences are within the range of
standard deviation).
Ghosting GnuPG: We enabled ghost memory for
GnuPG for all systems except the native FreeBSD ker-
nel. Table 8 shows the performance of signing ﬁles with
GnuPG. The page table defenses incur a constant over-
head of around 14 ms across all ﬁle sizes. This overhead
File
Size
(KB)
1
2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
Native
Std.
Dev.
8.6
8.6
8.6
8.7
8.9
9.2
9.9
11.4
14.3
20.1
31.6
54.8
100.9
193.3
377.8
746.6
0.1
0.1
0.1
0.2
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.0
0.1
0.1
0.2
0.5
Opt-
VG
9.5
9.5
9.5
9.6
9.8
10.1
10.9
12.4
15.4
21.3
33.2
56.8
103.9
198.6
386.2
761.8
Opt-
VG-
PG
23.7
23.8
23.9
23.9
23.9
24.4
25.4
26.8
29.7
35.6
47.7
71.2
118.2
212.9
400.1
776.1
Opt-
VG-
LLCPart
12.1
12.1
12.2
12.1
12.5
12.9
13.6
15.2
18.3
24.4
36.4
60.5