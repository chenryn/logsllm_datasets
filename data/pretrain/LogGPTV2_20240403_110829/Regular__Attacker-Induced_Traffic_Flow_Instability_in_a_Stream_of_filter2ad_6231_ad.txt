value correlated with damage should be apparent.
Based on a Monte-Carlo simulation of one thousand tries, the
normalized value of the collision predictor and the damage itself
is shown in Fig 6. The damage for each try was accumulated
whenever two cars would get close enough to touch. Note that
this damage measure does not take into account the severity
of the collision, since we have not included that measure in
formulating our predictor.
The collision predictor based on the victim’s gain does a
good job of predicting whenever there should be no collisions.
Damage is only seen when the predictor value is positive as
506
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:35 UTC from IEEE Xplore.  Restrictions apply. 
4
3.5
]
s
/
m
[
y
t
i
c
o
l
e
v
f
o
d
t
s
40
20
30
20
]
m
k
/
h
e
v
[
n
o
i
t
a
z
i
l
i
t
U
y
a
w
h
g
i
H
40
20
40
20
0
40
20
0
0
0
IDM vehicles
Attacker vehicles
Figure 7: Standard deviation and highway utilization as a
function of IDM and Attack Vehicles.
Attacker vehicles
IDM vehicles
Both attack scenarios were simulated against Control Algo-
rithms 1–5. The aforementioned collision avoidance system
was also used to more accurately model vehicle behavior,
as vehicle manufacturers are likely to employ an avoidance
system that rapidly decelerates if a collision is imminent. The
percentage of attackers and IDM vehicles was varied from 5%
to 50%, in 5% increments, with the total number of vehicles
simulated being 100. A Monte Carlo simulation of 100 runs
was performed, varying the control values of the attackers’ and
regular vehicles’ algorithms. The velocity standard deviation
and highway utilization are evaluated for each simulation. The
mean of the 100 simulation values is shown in Figure 7. As
can be seen from the ﬁgure, the system is marginally stabilized
by an increase of IDM vehicles, though the highway utilization
decreases in the expected manner (as the percentage of IDM
vehicles increases the utilization approaches 16 per km). The
efﬁcacy of the IDM stabilization is further marginalized due
to the fact that attackers can still induce large deviations in
velocity (average standard deviations were always above 3.2).
Thus, even in mixed-trafﬁc systems the attack is efﬁcacious.
V. EXPERIMENTAL VALIDATION
To perform experimental validation we developed a testing
platform consisting of 1/10 scale autonomous vehicles (Fig-
ure 8). The vehicles were differential steer robots driven by
DC electric motors and capable of top velocities of 10 m s−1
(36 km h−1). Quadrature encoders were used to determine
vehicle velocity. Lidar range ﬁnders were used to measure
relative distance between vehicles. The quadrature encoder and
velocity data were numerically differentiated using the method
of [37]. This platform provides a relatively low cost method
of testing control schemes compared to full scale vehicle
implementation, allowing for a variety of control methods
to be examined. The vehicles were guided along a 100 m path
using a tensioned cable (Figure 8).
The control algorithms were implemented discretely on a
micro-controller aboard each vehicle. To mask non-linearities a
split-level control architecture was employed: algorithms 1 to 5
provided high-level control input (i.e. target acceleration), while
a low-level controller (adapted from [18], [22]) was utilized
to convert this control input to a motor voltage and ensure
that the vehicle maintained the commanded input. Position and
velocity data were collected from each vehicle at 4 Hz. As our
vehicles lack accurate accelerometers, the numerical integration
Figure 6: Normalized damage (number of collisions) compared
with predictor value. Above: data sorted with d(A(1 − Gv)),
false negative rate 2%, false positive 71.7%. Below: data sorted
with d(A(1 − Ga)), false negative 1.6%, false positive 71.7%.
required. Numerating all of the cases, this method had a false
negative rate of (2%, 1.6%) for the two curves shown and a
false positive rate of (71.7%, 71.7%).
Finally, we note that while the preceding relies on the attacker
to select attack parameters so as to avoid collisions, modern
semi-automated vehicles posses innate collision avoidance
capabilities. Under certain conditions (e.g. when a follower
vehicle is traveling at a greater speed than a predecessor and
the spacing between the two falls below a given threshold)
the prevailing car-following control law may be preempted by
a braking maneuver to avoid an imminent collision. Such
a maneuver would introduce non-linearities that could be
exploited by attackers to amplify the impact of individual
vehicles under their control and greatly decrease the number
of vehicles necessary to effect the attack.
To verify this supposition, we simulated a stream of 500
vehicles wherein only two vehicles near the end of the stream
used modiﬁed gains. As per (15), without a collision avoidance
strategy the attack vehicles could not produce global string
instability. However, under the assumption that individual
vehicles would employ emergency braking (−10 m s−2) when
the distance between predecessor and follower decreased to
less than 2 m and their differential velocity was negative (i.e.
the follower velocity was greater than the predecessor), the two
attackers were able to induce stop-and-go behavior for 3/5 of
the vehicles by the end of the simulation; a longer simulation
time would result in all of the vehicles exhibiting this behavior.
In addition, 50% of vehicles experienced deviations from the
nominal velocity of 40%, while the velocity of vehicles at
even the beginning of the stream experienced slowdowns of
over 5 m s−1. Thus, modern safety measures meant to decrease
the incidence of accidents could be exploited by attackers to
induce trafﬁc ﬂow instability in perpetuity.
C. Mixed Trafﬁc
The IDM results presented above indicates that the impact
of the attack is lessened in the presence of human drivers
(i.e. human-controlled vehicles act as a stabilizing force). The
drawback to this method is that the IDM decreases highway
utilization. As ACC and CACC vehicles may operate in mixed
trafﬁc environments, the efﬁcacy of the attack in such systems
is thus open to question.
507
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:35 UTC from IEEE Xplore.  Restrictions apply. 
required for algorithms 4 and 5 introduced instability, so only
algorithms 1–3 were experimented with.
A. String Stability Veriﬁcation
A nine vehicle platoon was tested to determine how ac-
curately the vehicles realized Control Algorithms 1–3. The
vehicles are numbered 9 to 1, with 9 being the lead vehicle.
The test trajectory had the lead vehicle (9) accelerate from
standstill to 2.4 m s−1. This step acceleration provided sufﬁ-
cient frequency information to verify the string stability of
the stream of vehicles. Gains were selected as recommended
by the authors of the respective papers; selected stable gains
are shown in Table IV. The controllers referenced in Table IV
correspond to the algorithms stated in Table I. The vehicle
stream was tested as outlined, and the oscillations induced by
the step input were dampened out upstream.
B. Destabilization Attack Veriﬁcation
The test trajectory to demonstrate the string destabilization
attack had the lead vehicle (9) accelerate from 0 m s−1 to
2.4 m s−1. One victim (8) was placed between the leader and
attacker. The attacker (7) utilized the string unstable gains
from Control Algorithm 1. These string unstable gains were
computed using the method described in Section III, kd ≤
−kph, resulting in the gains given in Table IV. Subsequent
followers maintained stable gains (i.e. victim vehicles (1-6)
utilized string stable gains).
The result of the attack is shown in Figure 9. The passive
attacker ampliﬁed the oscillations from the step input. We
note that the passive attacker induced oscillations in other
vehicles without compromising its own safety. Each control
algorithm was found to be susceptible to the attack. Further
testing was performed by following the prior test trajectory,
modiﬁed by inserting a second passive attacker as the rear
vehicle (1). Due to the high density of attackers, the system
became string unstable, causing collisions. This testing was
sufﬁcient to demonstrate the destabilization of a string stable
system by maliciously selecting controller gains in a percentage
of vehicles.
C. Real-World Implications
From the experimental results in Figure 9, we see that an
attacker can cause signiﬁcant variations in average velocity.
For example, the standard deviation from the nominal velocity
(2.4 m s−1) for a vehicle immediately behind an attacker
using Control Algorithm 2 is approximately 0.5 m s−1. As the
velocity is approximately sinusoidal, we can interpret this value
as the RMS of the oscillation in velocity. In order to connect
these results with the real world vehicles on the highway we
must scale-up the deviation in velocity.
Because we have the high/low level separation in our
controllers, and the high level controller is linear, we simply
scale by a linear factor. A nominal velocity of, say, 100 km h−1
requires a factor of 41.6 (with proper units) scale up in velocity;
scaling the deviation in velocity by the same amount yields
21 km h−1. If this is the RMS value of a sinusoidal, then we
can expect variations between the speeds of 70–130 km h−1.
Table IV: Gains used in experimental validation for Control
Algorithms 1–3.
Control Algorithm
1
2
3
Atk (1)
kp
1
1
1
3
kd
2
1
1
-1
h
0.5
0.55
1
0.5
kh
-
0.1
1.75
-
vd
-
2
2
-
L
0.5
0.5
1
0.5
Figure 8: The testing platform of 1/10 scale vehicle.
Clearly, going back and forth between such a huge spread
in velocity within a period of 10 s will cause massive losses
in fuel efﬁciency and cause great discomfort to passengers,
with peak accelerations reaching 5.23 m s−2 (≈ 0.5 g). If the
attacker is malicious enough to want to cause collisions, while
the full delta might be difﬁcult to achieve, a relative velocity
of 21 km h−1 is enough to cause serious damage to cars and
passengers.
VI. ATTACKER DETECTION
As the attack described above leverages the intrinsic behavior
of control laws, preventing it will require either that vehicle
control systems be operated on a trusted platform that will
not allow user modiﬁcation or the creation of new control
laws meant to mitigate the attack in the case of modiﬁed
control systems. For the latter a two phase approach, wherein
upon detection of the attack vehicles switch to a new law that
decreases the oscillations at the expense of reduced throughput,
would likely need to be used. Here, we focus on the problem
of attribution (i.e. passive and active attacker identiﬁcation)3
and leave the devising of new control laws as future work.
The premise of our detection approach is that deviation
from expected behavior, as prescribed by the control law
governing spacing,
is indicative of changes to the gains
necessary to produce trafﬁc ﬂow instability. The basic approach
is that at some sampling frequency the position, velocity,
and acceleration of each vehicle is obtained. The position
and velocity are then used with (1) to determine the i − th
vehicle’s expected control input (acceleration), ui(t). This is
compared with the observed acceleration, ai(t), by taking
the difference di(t) = ui(t) − ai(t). In short, the detector
determines if a vehicle responds to a perturbation correctly.
Even if a predecessor is an attacker acting erratically, so long
as the follower responds to the erratic motion according to the
3It is hoped that such detection would serve as a deterrent: if local attackers
can be identiﬁed with high probability they will not engage in the attack, and,
if the attack is orchestrated remotely, the detector will allow us to identify the
compromised vehicles and decommission them during or after the attack.
508
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:35 UTC from IEEE Xplore.  Restrictions apply. 
Attacked Controller 1: Velocities (with offset)
Attacked Controller 2: Velocities (with offset)
Attacked Controller 3: Velocities (with offset)
0
−10
]
s
/
m
[
y
t
i
c
o
l
e
V
−20
0
]
s
/
m
[
y
t
i
c
o
l
e
V
3
2.8
2.6
2.4
2.2
9
veh 9
veh 8
veh 7 att
veh 6
veh 5
veh 4
veh 3
veh 2
veh 1
10
20
30
Time (s)
avg vel
avg vel+1std
veh 9
veh 8
veh 7
veh 6 att
veh 5
veh 4 att
veh 3
veh 2