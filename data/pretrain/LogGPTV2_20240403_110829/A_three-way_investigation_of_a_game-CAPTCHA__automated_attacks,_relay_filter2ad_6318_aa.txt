title:A three-way investigation of a game-CAPTCHA: automated attacks, relay
attacks and usability
author:Manar Mohamed and
Niharika Sachdeva and
Michael Georgescu and
Song Gao and
Nitesh Saxena and
Chengcui Zhang and
Ponnurangam Kumaraguru and
Paul C. van Oorschot and
Wei-bang Chen
See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/314284159
A three-way investigation of a game-CAPTCHA: automated attacks, relay
attacks and usability
Conference Paper · June 2014
CITATIONS
24
9 authors, including:
READS
108
Manar Mohamed
University of Alabama at Birmingham
16 PUBLICATIONS   171 CITATIONS   
Niharika Sachdeva
Indraprastha Institute of Information Technology
27 PUBLICATIONS   227 CITATIONS   
SEE PROFILE
SEE PROFILE
Song Gao
University of Alabama at Birmingham
23 PUBLICATIONS   172 CITATIONS   
Chengcui Zhang
University of Alabama at Birmingham
178 PUBLICATIONS   2,713 CITATIONS   
SEE PROFILE
SEE PROFILE
Some of the authors of this publication are also working on these related projects:
Blockchain View project
Twitter Verified User Analysis View project
All content following this page was uploaded by Ponnurangam Kumaraguru on 19 August 2017.
The user has requested enhancement of the downloaded file.
A Three-Way Investigation of a Game-CAPTCHA:
Automated Attacks, Relay Attacks and Usability
Manar Mohamed1
Nitesh Saxena1†
Niharika Sachdeva2∗
Chengcui Zhang1
Michael Georgescu1
Song Gao1
Ponnurangam Kumaraguru2
Paul C. van Oorschot3 Wei-Bang Chen4
1 Computer and Information Sciences, University of Alabama at Birmingham, USA
2 Indraprastha Institute of Information Technology, India
3 Computer Science, Carleton University, Canada
4 Math and Computer Science, Virginia State University, USA
ABSTRACT
Existing captcha solutions on the Internet are a major source of user
frustration. Game captchas are an interesting and, to date, little-
studied approach claiming to make captcha solving a fun activity
for the users. One broad form of such captchas – called Dynamic
Cognitive Game (DCG) captchas – challenge the user to perform a
game-like cognitive task interacting with a series of dynamic images.
We pursue a comprehensive analysis of a representative category of
DCG captchas. We formalize, design and implement such captchas,
and dissect them across: (1) fully automated attacks, (2) human-
solver relay attacks, and (3) usability. Our results suggest that the
studied DCG captchas exhibit high usability and, unlike other known
captchas, offer some resistance to relay attacks, but they are also vul-
nerable to our novel dictionary-based automated attack.
1.
INTRODUCTION
The abuse of the resources of online services using automated
means, such as denial-of-service or password dictionary attacks, is a
common security problem. To prevent such abuse, a primary defense
mechanism is CAPTCHA [2] (denoted “captcha”), a tool aimed to
distinguish a human user from a computer based on a task that is
easier for the former but much harder for the latter.
The most commonly encountered captchas today take the form of
a garbled string of words or characters, but many other variants have
also been proposed (we refer the reader to [31], [7], [17] which pro-
vide excellent review of different captcha categories). Unfortunately,
existing captchas suffer from several problems. First, successful au-
tomated attacks have been developed against many existing schemes.
For example, algorithms have been designed that can achieve char-
acter segmentation with a 90% success rate [18]. Real world attacks
have also been launched against captchas employed by Internet gi-
ants [15, 19, 28].
Second, low-cost attacks have been conceived whereby challenges
∗Part of the work done while visiting UAB
†Contact author: PI:EMAIL
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
Copyright 200X ACM X-XXXXX-XX-X/XX/XX ...$5.00.
1
are relayed to, and solved by, users on different web sites or paid
human-solvers in the crowd [10, 13, 16]. In fact, it has been shown
that [23] such relay attacks are much more viable in practice than
automated attacks due to their simplicity and low economical costs.
Third, the same distortions that are used to hide the underlying
content of a captcha puzzle from computers can also severely de-
grade human usability [9,32]. More alarmingly, such usability degra-
dation can be so severe on many occasions that users get frustrated
and give up using the services that deploy captchas. Consequently,
companies lose customers and suffer economic losses [25].
Given these problems, there is an urgent need to consider alterna-
tives that place the human user at the center of the captcha design.
Game captchas offer a promising approach by attempting to make
captcha solving a fun activity for the users. These are challenges that
are built using games that might be enjoyable and easy to play for
humans, but hard for computers.
In this paper, we focus on a broad form of game captchas, called
Dynamic Cognitive Game (DCG) captchas. This captcha challenges
a user to perform a game-like cognitive task interacting with a se-
ries of dynamic images. Speciﬁcally, we consider a representative
DCG captcha category which involves objects ﬂoating around within
the images, and the user’s task is to match the objects with their re-
spective target(s) and drag/drop them to the target location(s). A
startup called “are you a human” [4, 27] has recently been offering
such DCG captchas.
Besides promising to signiﬁcantly improve user experience, DCG
captchas are an appealing platform for touch screen enabled mobile
devices (such as smartphones). Traditional captchas are known to
be quite difﬁcult on such devices due to their small displays and
key/touch pads, while touch screen games are much easier and al-
ready popular. Motivated by these unique and compelling advantages
of DCG captchas, we set out to investigate their security and usabil-
ity. Speciﬁcally, we pursue a comprehensive study of DCG captchas,
analyzing them from three broad yet intersecting dimensions: (1) us-
ability, (2) fully automated attacks, and (3) human-solver relay at-
tacks. Our main contributions are as follows:
1. We formalize, design and implement four instances of a repre-
sentative category of DCG captchas. (Sections 2 and 3)
2. We conduct a usability study of these instances, evaluating
them in terms of time-to-completion, error rates and perceived
usability. Our results indicate the overall usability to be very
good. (Section 4)
3. We develop a novel, fully automated framework to attack these
DCG captcha instances based on image processing techniques
and principles of unsupervised learning. The attack is compu-
tationally efﬁcient and highly accurate, but requires building a
dictionary to be effective. (Section 5)
4. We explore different variants of human-solver relay attacks
against DCG captchas. Speciﬁcally, we show that the most
simplistic form of relay attack (in line with traditional captcha
relay attack) reduces to a reaction time task for the solver, and
conduct a user study to evaluate the performance of this attack.
In general, our results indicate that DCG captchas with mobile
answer objects offer some level of resistance to relay attacks,
differentiating them from other captchas. Our user study may
also be of independent interest in other human-centered com-
puting domains. (Section 6)
2. BACKGROUND
We use the term Dynamic Cognitive Game (DCG) captcha to de-
ﬁne the broad captcha schemes that form the focus of our work. We
characterize a DCG captcha as having the following features: (1)
dynamic because it involves objects moving around in image frames;
(2) either cognitive because it is a form of a puzzle that relates to
the semantics of the images or image recognition because it involves
visual recognition; and (3) a game because it aims to make captcha
solving task a fun activity for the user. In this section, we discuss the
security model and design choices for DCG captcha, and present the
DCG captcha category and associated instances studied in this paper.
2.1 Security Model and Design Choices
The DCG captcha design objective is the same as that of captcha:
a bot (automated computer program) must only be able to solve captcha
challenges with no better than a negligible probability (but a human
should be able to solve with a sufﬁciently high probability).1
A pre-requisite for the security of a DCG captcha implementation
(or any captcha for that matter) is that the responses to the challenge
must not be provided to the client machine in clear text. For example,
in a character recognition captcha, the characters embedded within
the images should not be leaked out to the client. To avoid such
leakage in the context of DCG captchas, it is important to provide a
suitable underlying game platform for run-time support of the imple-
mented captcha. Web-based games are commonly developed using
Flash and HTML5 in conjunction with JavaScript. However, both
these platforms operate by downloading the game code to the client
machine and executing it locally. Thus, if these game platforms were
directly used to implement DCG captchas, the client machine will
know the correct objects and the positions of their corresponding tar-
get region(s), which can be used by the bot to construct the responses
to the server challenges relatively easily. This will undermine the se-
curity of DCG captchas.
The above problem can be addressed by employing encryption and
obfuscation of the game code which will make it difﬁcult for the
attacker (bot) on the client machine to extract the game code and thus
the correct responses. Commercial tools, such as SWF Encrypt [3],
exist which can be used to achieve this functionality. This approach
works under a security model in which it is assumed that the bot does
not have the capability to learn the keys used to decrypt the code and
to deobfuscate the code. A similar model where the attacker has
only partial control over the client machine has also been employed
in prior work [29].
In our model, we assume that the implementation provides con-
tinuous feedback to the user as to whether the objects dragged and
dropped to speciﬁc target region(s) correspond to correct answers or
not. The server also indicates when the game successfully ﬁnishes,
or times out. This feedback mechanism is essential from the usability
perspective otherwise the users may get confused during the solving
1For example, target thresholds might limit bot success rates below
0.6% [33], and human user success rates above 90% [11].
2
(a) Ships Game
(b) Shapes Game
(c) Parking Game
(d) Animals Game
Figure 1: Static snapshots of 4 game instances of a representative
DCG captcha analyzed in this paper (targets are static; objects are
mobile)
process. The attacker is free to utilize all of this feedback in attempt-
ing to solve the challenges, but within the time-out. We also assume
that it is possible for the server to preclude brute force attacks, such
as when the attacker tries to drag and drop the regions within the
image exhaustively/repeatedly so as to complete the game success-
fully. Such a detection is possible by simply capping the number of
drag/drop attempts per moving object.2
In addition to automated attacks, the security model for DCG captchas
(and any other captcha) must also consider human-solver relay at-
tacks [10, 23]. In fact, it has been shown that such relay attacks are
much more appealing to the attackers than automated attacks cur-
rently due to their simplicity and low cost [23]. In a relay attack,
the bot forwards the captcha challenges to a human user elsewhere
on the Internet (either a payed solver or an unsuspecting user access-
ing a web-site [14]); the user solves the challenges and sends the
responses back to the bot; and the bot simply relays these responses
to the server. Unfortunately, most, if not all, existing captcha so-
lutions are insecure under such a relay attack model. For example,
character recognition captchas are routinely broken via such relay at-
tacks [23]. For DCG captchas to offer better security than existing
captchas, they should provide some resistance to such human-solver
relay attacks (this is indeed the case as we demonstrate in Section 6).
2.2 Game Instances and Parameters
Many forms of DCG captchas are possible. For example, they
may be based on visual matching or semantic matching of objects,
may consist of multiple target objects or none at all, and may involve
static or moving targets. In this paper, we focus on one represen-
tative category, and four associated instances, of DCG captcha with
static target(s) (see Figure 1). Speciﬁcally, our studied DCG captcha
instances involve:
1. single target object, such as place the ship in the sea (the Ships
game).
2. two target objects, such as match the shapes (the Shapes game).
3. three target objects, such as feed the animals (the Animals
game).
4. no target objects, such as park the boat (the Parking game),
where the target area does not consist of any objects.
The Shapes game is based on visual matching whereas the other
games involve semantic matching.
2The “are you a human” DCG captcha implementation claims to
adopt a sophisticated (proprietary) mechanism, based on mouse
events, to differentiate human game playing activity from an auto-
mated activity. We did not implement such a human-vs-bot behav-
ioral analysis component because our paper’s goal is to examine the
underlying captcha scheme only. A behavioral component can be
added to other captchas also and represents a topic orthogonal to our
work. Besides, it is not clear if behavioral analysis would add secu-
rity; it may instead degrade usability by increasing false negatives.
For each of these 4 instances, different parameterizations affect
security and usability. These include: (1) the number of foreground
moving objects, including answer objects and other “noisy” objects;
and (2) the speed with which the objects move. The larger the num-
ber of objects and higher the speed, the more difﬁcult and time con-
suming it might be for the human user to identify the objects and
drag/drop them, which may degrade usability. However, increasing
the number and speed of objects may also make it harder for a com-
puter program to play the games successfully, which may improve
security. Thus, for our analysis of the DCG captcha, we will evalu-
ate the effect of these parameters for captcha usability and captcha
security (against automated as well as relay attacks).
3. DESIGN AND IMPLEMENTATION
Due to legal considerations, we did not resort to directly evalu-
ate an existing DCG captcha implementation (e.g., “are you a hu-
man” DCG captchas). In particular, developing automated attacks
against these captchas directly violates the company’s asserted terms
and conditions [5]. Instead, we designed and implemented our own
equivalent and generalized versions of DCG captchas from scratch,
and analyzed these versions. Developing our own versions also al-
lowed us to freely vary the game parameters, such as the number
and speed of objects, and investigate the DCG captcha security and
usability with respect to these parameters.3
We created four instances of games as speciﬁed in Section 2.2 us-
ing Adobe Flash.
The game image/frame size is 360 x 130 pixels, which can eas-
ily ﬁt onto a web page such as in a web form. Each game starts
by placing the objects in certain pre-speciﬁed locations on the im-
age. Then, each object picks a random direction in which it will
move. A total of 8 directions were used, namely, N, S, E, W, NE,
NW, SE and SW. If the chosen direction is one of E, W, S, or N, the
√
object will move (across X or Y axis) by 1 pixel per frame in that
2 = 1.414 pixels per
direction. Otherwise, the object will move
frame along the hypotenuse, corresponding to 1 pixel across both X
and Y axes. This means that on an average the object moves 1.207
[= (1 ∗ 4 + 1.414 ∗ 4)/8] pixels per frame. The object continues in
the current direction until colliding with another object or the game
border, whereupon it moves in a new random direction.
The game starts when the user presses a “Start” button on the
screen center. Each game brieﬂy explains to users their task, e.g.,
“Place the ships on the sea.” The game ends when the user clicks/drags
all the correct objects onto their corresponding target(s), in which
case a “Game Complete” message is provided. To successfully match
an object with its target, the user clicks inside the bounding box
across the shape of the object, drags the object and drops it by re-
leasing it inside the bounding box across the respective target. The