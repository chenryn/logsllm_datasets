Tail *IntList
}
// Sum returns the sum of the list elements.
func (list *IntList) Sum() int {
if list == nil {
return 0
}
return list.Value + list.Tail.Sum()
}
当你定义一个允许nil作为接收器值的方法的类型时，在类型前面的注释中指出nil变量代表的
意义是很有必要的，就像我们上面例子里做的这样。
下面是net/url包里Values类型定义的一部分。
基于指针对象的方法 214
gopl
net/url
package url
// Values maps a string key to a list of values.
type Values map[string][]string
// Get returns the first value associated with the given key,
// or "" if there are none.
func (v Values) Get(key string) string {
if vs := v[key]; len(vs) > 0 {
return vs[0]
}
return ""
}
// Add adds the value to key.
// It appends to any existing values associated with key.
func (v Values) Add(key, value string) {
v[key] = append(v[key], value)
}
这个定义向外部暴露了一个map的类型的变量，并且提供了一些能够简单操作这个map的方
法。这个map的value字段是一个string的slice，所以这个Values是一个多维map。客户端使用
这个变量的时候可以使用map固有的一些操作(make，切片，m[key]等等)，也可以使用这里
提供的操作方法，或者两者并用，都是可以的：
gopl.io/ch6/urlvalues
m := url.Values{"lang": {"en"}} // direct construction
m.Add("item", "1")
m.Add("item", "2")
fmt.Println(m.Get("lang")) // "en"
fmt.Println(m.Get("q")) // ""
fmt.Println(m.Get("item")) // "1" (first value)
fmt.Println(m["item"]) // "[1 2]" (direct map access)
m = nil
fmt.Println(m.Get("item")) // ""
m.Add("item", "3") // panic: assignment to entry in nil map
对Get的最后一次调用中，nil接收器的行为即是一个空map的行为。我们可以等价地将这个操
作写成Value(nil).Get("item")，但是如果你直接写nil.Get("item")的话是无法通过编译的，因为
nil的字面量编译器无法判断其准备类型。所以相比之下，最后的那行m.Add的调用就会产生一
个panic，因为他尝试更新一个空map。
基于指针对象的方法 215
gopl
由于url.Values是一个map类型，并且间接引用了其key/value对，因此url.Values.Add对这个
map里的元素做任何的更新、删除操作对调用方都是可见的。实际上，就像在普通函数中一
样，虽然可以通过引用来操作内部值，但在方法想要修改引用本身是不会影响原始值的，比
如把他置为nil，或者让这个引用指向了其它的对象，调用方都不会受影响。（译注：因为传
入的是存储了内存地址的变量，你改变这个变量是影响不了原始的变量的，想想C语言，是差
不多的）
基于指针对象的方法 216
gopl
6.3. 通过嵌入结构体来扩展类型
来看看ColoredPoint这个类型：
gopl.io/ch6/coloredpoint
import "image/color"
type Point struct{ X, Y float64 }
type ColoredPoint struct {
Point
Color color.RGBA
}
我们完全可以将ColoredPoint定义为一个有三个字段的struct，但是我们却将Point这个类型嵌
入到ColoredPoint来提供X和Y这两个字段。像我们在4.4节中看到的那样，内嵌可以使我们在
定义ColoredPoint时得到一种句法上的简写形式，并使其包含Point类型所具有的一切字段，
然后再定义一些自己的。如果我们想要的话，我们可以直接认为通过嵌入的字段就是
ColoredPoint自身的字段，而完全不需要在调用时指出Point，比如下面这样。
var cp ColoredPoint
cp.X = 1
fmt.Println(cp.Point.X) // "1"
cp.Point.Y = 2
fmt.Println(cp.Y) // "2"
对于Point中的方法我们也有类似的用法，我们可以把ColoredPoint类型当作接收器来调用
Point里的方法，即使ColoredPoint里没有声明这些方法：
red := color.RGBA{255, 0, 0, 255}
blue := color.RGBA{0, 0, 255, 255}
var p = ColoredPoint{Point{1, 1}, red}
var q = ColoredPoint{Point{5, 4}, blue}
fmt.Println(p.Distance(q.Point)) // "5"
p.ScaleBy(2)
q.ScaleBy(2)
fmt.Println(p.Distance(q.Point)) // "10"
Point类的方法也被引入了ColoredPoint。用这种方式，内嵌可以使我们定义字段特别多的复
杂类型，我们可以将字段先按小类型分组，然后定义小类型的方法，之后再把它们组合起
来。
通过嵌入结构体来扩展类型 217
gopl
读者如果对基于类来实现面向对象的语言比较熟悉的话，可能会倾向于将Point看作一个基
类，而ColoredPoint看作其子类或者继承类，或者将ColoredPoint看作"is a" Point类型。但这
是错误的理解。请注意上面例子中对Distance方法的调用。Distance有一个参数是Point类
型，但q并不是一个Point类，所以尽管q有着Point这个内嵌类型，我们也必须要显式地选择
它。尝试直接传q的话你会看到下面这样的错误：
p.Distance(q) // compile error: cannot use q (ColoredPoint) as Point
一个ColoredPoint并不是一个Point，但他"has a"Point，并且它有从Point类里引入的Distance
和ScaleBy方法。如果你喜欢从实现的角度来考虑问题，内嵌字段会指导编译器去生成额外的
包装方法来委托已经声明好的方法，和下面的形式是等价的：
func (p ColoredPoint) Distance(q Point) float64 {
return p.Point.Distance(q)
}
func (p *ColoredPoint) ScaleBy(factor float64) {
p.Point.ScaleBy(factor)
}
当Point.Distance被第一个包装方法调用时，它的接收器值是p.Point，而不是p，当然了，在
Point类的方法里，你是访问不到ColoredPoint的任何字段的。
在类型中内嵌的匿名字段也可能是一个命名类型的指针，这种情况下字段和方法会被间接地
引入到当前的类型中(译注：访问需要通过该指针指向的对象去取)。添加这一层间接关系让我
们可以共享通用的结构并动态地改变对象之间的关系。下面这个ColoredPoint的声明内嵌了一
个*Point的指针。
type ColoredPoint struct {
*Point
Color color.RGBA
}
p := ColoredPoint{&Point{1, 1}, red}
q := ColoredPoint{&Point{5, 4}, blue}
fmt.Println(p.Distance(*q.Point)) // "5"
q.Point = p.Point // p and q now share the same Point
p.ScaleBy(2)
fmt.Println(*p.Point, *q.Point) // "{2 2} {2 2}"
一个struct类型也可能会有多个匿名字段。我们将ColoredPoint定义为下面这样：
通过嵌入结构体来扩展类型 218
gopl
type ColoredPoint struct {
Point
color.RGBA
}
然后这种类型的值便会拥有Point和RGBA类型的所有方法，以及直接定义在ColoredPoint中的
方法。当编译器解析一个选择器到方法时，比如p.ScaleBy，它会首先去找直接定义在这个类
型里的ScaleBy方法，然后找被ColoredPoint的内嵌字段们引入的方法，然后去找Point和
RGBA的内嵌字段引入的方法，然后一直递归向下找。如果选择器有二义性的话编译器会报
错，比如你在同一级里有两个同名的方法。
方法只能在命名类型(像Point)或者指向类型的指针上定义，但是多亏了内嵌，有些时候我们
给匿名struct类型来定义方法也有了手段。
下面是一个小trick。这个例子展示了简单的cache，其使用两个包级别的变量来实现，一个
mutex互斥量(§9.2)和它所操作的cache：
var (
mu sync.Mutex // guards mapping
mapping = make(map[string]string)
)
func Lookup(key string) string {
mu.Lock()
v := mapping[key]
mu.Unlock()
return v
}
下面这个版本在功能上是一致的，但将两个包级别的变量放在了cache这个struct一组内：
var cache = struct {
sync.Mutex
mapping map[string]string
}{
mapping: make(map[string]string),
}
func Lookup(key string) string {
cache.Lock()
v := cache.mapping[key]
cache.Unlock()
return v
}
通过嵌入结构体来扩展类型 219
gopl
我们给新的变量起了一个更具表达性的名字：cache。因为sync.Mutex字段也被嵌入到了这个
struct里，其Lock和Unlock方法也就都被引入到了这个匿名结构中了，这让我们能够以一个简
单明了的语法来对其进行加锁解锁操作。
通过嵌入结构体来扩展类型 220
gopl
6.4. 方法值和方法表达式
我们经常选择一个方法，并且在同一个表达式里执行，比如常见的p.Distance()形式，实际上
将其分成两步来执行也是可能的。p.Distance叫作“选择器”，选择器会返回一个方法"值"->一
个将方法(Point.Distance)绑定到特定接收器变量的函数。这个函数可以不通过指定其接收器
即可被调用；即调用时不需要指定接收器(译注：因为已经在前文中指定过了)，只要传入函数
的参数即可：
p := Point{1, 2}
q := Point{4, 6}
distanceFromP := p.Distance // method value
fmt.Println(distanceFromP(q)) // "5"
var origin Point // {0, 0}
fmt.Println(distanceFromP(origin)) // "2.23606797749979", sqrt(5)
scaleP := p.ScaleBy // method value
scaleP(2) // p becomes (2, 4)
scaleP(3) // then (6, 12)
scaleP(10) // then (60, 120)
在一个包的API需要一个函数值、且调用方希望操作的是某一个绑定了对象的方法的话，方
法"值"会非常实用( 真是绕)。举例来说，下面例子中的time.AfterFunc这个函数的功能是
`=_=
在指定的延迟时间之后来执行一个(译注：另外的)函数。且这个函数操作的是一个Rocket对象
r
type Rocket struct { /* ... */ }
func (r *Rocket) Launch() { /* ... */ }
r := new(Rocket)
time.AfterFunc(10 * time.Second, func() { r.Launch() })
直接用方法"值"传入AfterFunc的话可以更为简短：
time.AfterFunc(10 * time.Second, r.Launch)
译注：省掉了上面那个例子里的匿名函数。
和方法"值"相关的还有方法表达式。当调用一个方法时，与调用一个普通的函数相比，我们必
须要用选择器(p.Distance)语法来指定方法的接收器。
方法值和方法表达式 221
gopl
当T是一个类型时，方法表达式可能会写作 或者 ，会返回一个函数"值"，这种函
T.f (*T).f
数会将其第一个参数用作接收器，所以可以用通常(译注：不写选择器)的方式来对其进行调
用：
p := Point{1, 2}
q := Point{4, 6}
distance := Point.Distance // method expression
fmt.Println(distance(p, q)) // "5"
fmt.Printf("%T\n", distance) // "func(Point, Point) float64"
scale := (*Point).ScaleBy
scale(&p, 2)
fmt.Println(p) // "{2 4}"
fmt.Printf("%T\n", scale) // "func(*Point, float64)"
// 译注：这个Distance实际上是指定了Point对象为接收器的一个方法func (p Point) Distance()，
// 但通过Point.Distance得到的函数需要比实际的Distance方法多一个参数，
// 即其需要用第一个额外参数指定接收器，后面排列Distance方法的参数。
// 看起来本书中函数和方法的区别是指有没有接收器，而不像其他语言那样是指有没有返回值。
当你根据一个变量来决定调用同一个类型的哪个函数时，方法表达式就显得很有用了。你可
以根据选择来调用接收器各不相同的方法。下面的例子，变量op代表Point类型的addition或者
subtraction方法，Path.TranslateBy方法会为其Path数组中的每一个Point来调用对应的方法：
type Point struct{ X, Y float64 }
func (p Point) Add(q Point) Point { return Point{p.X + q.X, p.Y + q.Y} }
func (p Point) Sub(q Point) Point { return Point{p.X - q.X, p.Y - q.Y} }
type Path []Point
func (path Path) TranslateBy(offset Point, add bool) {
var op func(p, q Point) Point
if add {
op = Point.Add
} else {
op = Point.Sub
}
for i := range path {
// Call either path[i].Add(offset) or path[i].Sub(offset).