˝
˝
˝
˝
˝
˝
˝
+
˝
˝
˝
˝
˝
˝
˝
˝
˝
˝
˝
˝
Ø
˝
˝
˝
˝
˝
˝
˝
˝
+
˝
˝
In order to execute a contract call with subcalls,
state changes for all contracts are committed with a transaction
(or sequence of transactions executed atomically) signed by a
quorum of the executing set of each involved smart contracts.
the
client ﬁrst runs the contract call
locally to determine the
set of involved contracts and then sends the state, the latest
transaction, and the code of all involved contracts to all service
providers, together with the inputs to the contract call. The
service providers then perform the same steps as listed above
in Section IV-C, checking the code and state hashes for every
involved contract and executing the full call chain. Since the
resulting transaction can only be included in the chain if it
fulﬁlls the multisignature condition of all involved contracts,
this ensures that all state changes are only applied if all of the
quorums are reached.
E. Use of Oracles
Because of the way, Bitcontracts is built, service providers
can natively act as oracles for many use cases since the contract
code can directly connect to external websites or data feeds.
For example, if Alice and Bob set up a contract to bet on
whether it will rain on new year’s eve and they both trust
the same feed for weather data, they can write a contract
in which they both lock some funds such that: the contract
directly accesses this feed using https, checks if weather data
is available for new year’s eve, and then pays out to the winner
of the bet. This contract can then be called on new year’s day
by the winner of the bet. Since the result of accessing this feed
and checking whether it rained should be the same independent
on which honest service provider this is executed, no external
oracle is needed.
V. PROPERTY ANALYSIS
In this section we analyze popular blockchain systems
and explain how they provide the properties that Bitcontracts
needs. Table I summarizes our analysis.
A. Storage of Arbitrary Data
Some account based cryptocurrencies, such as Stellar and
Ripple, offer explicit mechanisms to store arbitrary data.
Others, such as Ethereum and EOS, support this through their
smart contract system, as arbitrary data can simply be sent as a
parameter to a contract call. In Ripple, this is supported using
a Memos ﬁeld that adds data to a transaction, while Stellar
allows writing to a key value store of the account using a
Manage Data operation.
Most Bitcoin forks support speciﬁc outputs that only store
data using the OP_RETURN instruction. This allows only
a small amount of data to be stored per transaction since
at most one output using this instruction can be used per
transaction. There exist several workarounds for this that allow
storing more data per transaction with some overhead [42] for
currencies supporting Bitcoin script. We explain one of them
in Section VIII-B. In general, arbitrary data can usually be
stored in transaction ﬁelds reserved for addresses, as addresses
generally resemble a random string and have no constraints
that can be checked. For example, in Monero, to store more
than 32 bytes of data (which can be stored as payment id) in
a transaction, one has to create dummy outputs that store the
data in the ﬁeld for the stealth address. This has quite a large
overhead, however, since it requires a range proof of 2kB [40]
for every 32 bytes of data.
B. Multiparty Authorization
A mechanism for multiparty authorization is often desired,
to enhance security and
e.g. for wallets from companies,
therefore usually supported in cryptocurrencies. Most UTXO-
based cryptocurrencies, such as Litecoin, Zcash, and Dash, are
forks of the Bitcoin protocol and also support Bitcoin script,
which enables multisignatures. Note that “multisignature” in
this context refers to transaction authorization that requires
individual signatures from multiple parties. It does not refer to
multisignature schemes that usually require a protocol between
signers to collectively produce one single signature. Even
though Cardano is not a fork of Bitcoin, it also supports
script and allows for multisignatures. Stellar and Ripple (using
the account model) implement multisignatures differently, but
still support them, while Ethereum and EOS already support
expressive smart contracts that can and have to be used to
implement multiparty authorization.
Monero is a special case since it does not explicitly support
multisignature accounts. Instead, multiparty signatures have
to be created by splitting keys among multiple parties and
running an interactive signing protocol. In addition, they are
not well supported in software which makes them cumbersome
to create [4], [31]. While this is enough to be compatible
with our system, it requires that the service providers interact
between each other, instead of just communicating with clients.
C. State Dependent Transaction Validity
In the UTXO-model, state dependent transaction validity
is an implicit consequence of the model, as inputs to a
transaction must be unspent outputs of a previous transaction,
which makes validity of a transaction directly dependent on
the previous transaction. All UTXO-based cryptocurrencies
therefore support this property.
In account based cryptocurrencies, such policies have to be
supported explicitly. This is the case in Ripple, for example,
that provides a special mechanism that allows specifying
the hash of the previous transaction from an account in the
AccountTxnID ﬁeld of a transaction. The transaction will
then only be accepted by the ledger if this value is the hash
of the latest transaction of that account. Such a mechanism is
missing in Stellar, but could easily be added the same way, to
enable support for Bitcontracts. As another possibility, state
9
dependent transaction validity can be implemented within an
existing smart contract system, as is the case with Ethereum
and EOS, by creating a smart contract that stores the most
recent state hash and only accepts state updates if the previous
state referenced in the update corresponds to the stored value.
D. Atomic Transactions
As with state dependent transaction validity, all UTXO-
based cryptocurrencies support atomic transactions as an im-
plicit consequence of the model: transactions must support
multiple inputs and outputs, since otherwise transactions could
not have variable amounts. In currencies supporting smart
contracts, such as Ethereum and EOS, this is again supported
through the smart contract system.
Stellar allows adding multiple payments to a transaction.
If the payment is from a different source than the sending
account, the respective account also needs to sign the transac-
tion. Ripple does not natively support atomic transactions with
multiple sources and destinations, but native support could
easily be added, similar to Stellar. Even without native support,
a form of atomic payments can be added on top of Ripple using
the PathJoin protocol [35]. However, to use this protocol to
ensure transaction atomicity, service providers would need to
interact with each other and would need to keep track of the
ledger state.
VI.
INCENTIVES
The Bitcontracts speciﬁcation, described in Section IV,
implicitly assumes that service providers will execute client
transactions. In this section, we explain how transaction execu-
tion can be incentivized and how service providers and clients
can be protected from each other. We focus on transaction
fees that have become a common way of incentivizing work
in blockchain systems, but we emphasize that service providers
could also be incentivized through other (off-chain) means
such as subscription fees similar to cloud computing services.
In addition to explicit incentives added through transaction
fees, misbehavior is also disincentivized implicitly through
loss of reputation, since clients will generally choose known,
reputable entities and not anonymous parties. Bitcontracts
provides undeniable evidence of misbehavior, such as signing
false state transitions, which would damage the service’s repu-
tation. However, explicit negative incentives, such as ﬁnancial
penalties for misbehavior require enforcement through some
form of trusted party. In a legacy system without native
smart contracts, such a trusted party is not available. Negative
incentives could be enforced within a Bitcontracts contract
itself, but would not be very useful, since they would then
rely on the trust model not being violated (in which case there
is nothing to gain from misbehavior).
As shown Figure 1, Bitcontracts supports deployments
where the service providers are totally disconnected from the
blockchain. In such deployments incentives must be handled
off-chain (e.g., subscription models). When on-chain incentive
mechanisms like transaction fees are used, service providers
need to be able to check the blockchain.
Introducing fees. A straightforward application of fees to
Bitcontracts system would be as follows. At the time of
calling a Bitcontracts contract (step 2 in Section IV-C), the
client speciﬁes a fee that he is willing to pay to the service
providers. The client includes funds to pay this fee, separately
for each service provider, to the contract call request. If the
service providers ﬁnd the included transaction fees acceptable,
they execute the contract call, include the fee payment from
the clients funds in the same transaction, and return the
signed result to the client (steps 3 and 4 ). By signing
the Bitcontracts transaction and publishing it on the legacy
blockchain (step 5 ), ownership of the fees is effectively
transferred from the client to the service providers.
Such fee mechanism is simple and efﬁcient to deploy,
as it adds no additional latency to contract call processing.
However, it has two minor drawbacks. The ﬁrst drawback is
that a malicious client could simply not sign and publish the
ﬁnal transaction (i.e., skip step 5 ) and thus cause unpaid
contract call execution for the service providers. Clients do
not gain any beneﬁt from such misbehavior and thus rational
clients do not have an incentive to abuse service providers like
this. Similar to other DoS and resource exhaustion attacks,
service providers could defend themselves through known
mechanisms like asking clients to solve cryptographic puzzles
during at times of heavy load [20], [24], [7] or by requiring
slightly higher fees overall to compensate occasional unpaid
execution work.
The second drawback is that some service providers could
choose to “free-ride” and not execute the call, in the hope that
other service providers will complete the work and they get
still paid. This drawback could be addressed by contract cre-
ators who could select reputable entities as service providers.
On fairness. An ideal transaction fee mechanism would pro-
vide fairness between service providers and clients. The service
providers would perform the contract call execution work only
if they are guaranteed to receive the fee. The clients would
only pay if the know that service providers will execute and
sign the contract call. This problem is close to the notion of
fair exchange [38], where a seller releases a product, like an
output of some computation, to a buyer only when he is are
guaranteed to receive a matching payment.
Unfortunately, the existing fair exchange protocols are not
applicable to our setting for two main reasons. First,
the
existing legacy-chain compatible fair exchange protocols like
Zero-Knowledge Contingent Payments (ZKCP) [8], [47], [12]
protect a digital “product” like a computation result, but they
do not protect the task of computation itself. Thus, if we would
adopt one of the existing ZKCP protocols, a malicious client
could still impose unpaid work on service providers. Second,
the existing fair exchange protocols usually consider a 1-to-1
setting with a single buyer, while our execution model has n
sellers (i.e., n service providers).
Because the classical notion of fair exchange is not appli-
cable to our setting, we target a slightly different goal. Our
goal is to provide execution incentives for service providers
and at the same time protect them from malicious clients (as
well as possible). More precisely, service providers should be
incentivized to execute transaction quickly, free-riding should
be discouraged, and clients should not be able to impose
execution work on service providers without a fee payment.
10
Example incentive mechanism. Next, we describe an example
incentive mechanism that achieves these goals. The client pays
the transaction fees to a t-out-of-n multisig account that is
controlled by the service providers collectively. This payment
can be done on-chain (or through a payment channel in the
case where the client interacts often with the smart contract).
The service providers then check before executing the contract
if they received the payment. If this is the case, they proceed
as usual.
After some ﬁxed time interval (e.g., a month), the service
providers collectively create a transaction from their multisig
account that pays out a share to each service provider in
proportion to the number of contract transactions (that appear
on the chain) with a signature from the respective service
provider. Since the service provider check that they received
the payment before they execute the contract call, they are
guaranteed to be paid collectively, and since fewer than t of the
service providers can be malicious, the fees are guaranteed to
be distributed based on the fraction of contract transactions to
which the service providers contributed. This also incentivizes
fast responses from service providers, since they are more
likely to be included on chain and clearly disincentivizes free-
riding.
Such an example incentive mechanism has two minor
drawbacks. First, it increases contract call processing latency
slightly, since service providers need to wait until they have
received the payment before they execute the contract. Second,
a malicious client can still favor some service providers over
others by selectively choosing which signatures are included to
the ﬁnal transaction. We consider the development of incentive
mechanisms that provide perfect fairness for one buyer of
computing work and a quorum of sellers an interesting open
problem that is beyond the scope of this paper (and potentially
of independent interest).
VII. SECURITY ANALYSIS
In this section, we analyze Bitcontracts in terms of its
safety and liveness guarantees.
Safety. The main safety or security condition that a contract ex-
ecution system like Bitcontracts needs to provide is that every
contract is executed correctly. We say that a system provides
execution correctness for a particular contract if all calls to that
contract that appear in the chain are serializable and each call
provides control-ﬂow integrity based on the resulting state of
the call immediately preceding in the serialization of all calls.
Based on this deﬁnition, we make the following claim:
CLAIM 1. Given the speciﬁcation of contract A, which
deﬁnes an executing set EA that consists of nA service
providers and quorum size tA, the following holds: If fewer
than tA service providers from E are compromised, the con-
tract provides execution correctness, i.e. serializability and
control-ﬂow integrity.
PROOF. We consider the following cases:
1. Correct client inputs. Assuming that the contract code
and state provided by the client are correct, all honest service
providers will only sign a transaction if the contained state
transitions are correct, i.e. the new state is the correct result
of the smart contract execution, given the state they received
as input. It follows that if fewer than tA service providers are
compromised, a transaction containing false state transitions
cannot gain a quorum for contract A and thus cannot be
committed to the blockchain, i.e. we have execution integrity
based on the state provided by the client.
2. False previous state or contract provided by the client.
For this case, we assume that the client provides the correct
previous transaction Txprev. Even though we know from above
that the state transitions themselves must be correct, they are
based on a state and contract code provided by the client.
The client could therefore send a forged state as input state.
However, the previous transaction Txprev that led to this state
contains the hashes of the state and the contract. The service
providers check that the provided state and contract correspond
to these hashes and abort if this is not the case, i.e. a state
transition based on a mismatched state or contract code cannot
reach a quorum for A.
3. False or outdated previous transaction provided by the
client. The above does not take into account that the client