title:SymPLFIED: Symbolic program-level fault injection and error detection
framework
author:Karthik Pattabiraman and
Nithin Nakka and
Zbigniew Kalbarczyk and
Ravishankar K. Iyer
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
SymPLFIED: Symbolic Program-Level Fault Injection
and Error Detection Framework
Karthik Pattabiraman, Nithin Nakka, Zbigniew Kalbarczyk, and Ravishanka~ Iyer
Coordinated Science Laboratory, University of Illinois at Urbana-ChampaIgn
{pattabir, nakka, kalbarcz, rkiyer}@uiuc.edu
Abstract
This paper introduces SymPLFIED, a program(cid:173)
level framework that allows specification of arbitrary
error detectors and the verification of their efficacy
SymPLFIED comprehen(cid:173)
against hardware errors.
sively enumerates all
transient hardware errors in
registers, memory, and computation (expressed as
value errors)
that potentially evade detection and
cause program failure. The framework uses symbolic
execution to abstract the state of erroneous values in
the program and model checking to comprehensively
find all errors that evade detection. We demonstrate
the use of SymPLFIED on a widely deployed aircraft
collision avoidance application, tcas. Our results show
that the SymPLFIED framework can be used to un(cid:173)
cover hard-to-detect corner cases caused by transient
errors in programs that may not be exposed by ran(cid:173)
dom fault-injection based validation.
Keywords: Dependability validation, Fault injection,
Symbolic execution, Error detectors, Model checking.
1
Introduction
Error detection mechanisms are vital for building
highly reliable systems. There has been significant
work on efficiently placing and deriving error detec(cid:173)
tors for programs [1]. An important challenge is to
enumerate the set of errors the mechanism fails to
detect, from either a known set or an unknown set.
Typically, verification techniques target the defin~d
set of errors the detector is supposed to detect. WhIle
this is valuable, one cannot predict the kinds of errors
that may occur in the field, and hence it is important to
evaluate detectors under arbitrary conditions.
Fault -injection is a well-established technique to
evaluate the coverage of error detection mechanisms
[2]. However, there is a compelling need to develop a
formal framework to reason about the efficiency of
error detectors as a complement to traditional fault
injection. This can uncover possible "corner cases,"
which may be missed by conventional fault injection
due to its inherent statistical nature.
This paper presents SymPLFIED, a framework
for verifying error detectors in programs using sym(cid:173)
bolic execution and model checking. The goal of the
framework is to expose error cases that would poten(cid:173)
tially escape detection and cause program failure. The
focus is on transient hardware errors. The framework
makes the following unique contributions:
1.
Introduces a formal model to represent programs
expressed in a generic assembly language, and
reasons about the effects of errors originating in
hardware and propagating to the application with(cid:173)
out assuming specific detection mechanisms;
Specifies the semantics of general error detectors
using the same formalism, which allows verifica(cid:173)
tion of their detection capabilities;
2.
3. Represents errors using a single symbol, thereby
coalescing multiple error values into a single
symbolic value in the program. This includes sin(cid:173)
gle- and multi-bit errors in the register file, main
memory, cache, as well as errors in computation.
To the best of our knowledge,
this is the first
framework that models the effect of arbitrary hard(cid:173)
ware errors on software, independent of the underly(cid:173)
ing detection mechanism. It uses model checking to
exhaustively enumerate the consequences of the sym(cid:173)
bolic errors on the program. The analysis is complete(cid:173)
ly automated and does not miss errors that might occ~r
in a real execution. However, as a result of symbolI(cid:173)
cally abstracting erroneous values,
it may discover
errors that may not manifest in the real execution of
the program, i.e., false positives.
To evaluate the framework, the effects of hard(cid:173)
ware transient errors were considered on a commer(cid:173)
cially deployed application, teas. The framework iden(cid:173)
tified errors that lead to a catastrophic outcome in the
application, errors not
fault(cid:173)
injection in a comparable amount of time. The frame-
found by statistical
1-4244-2398-9/08/$20.00 Â©2008 IEEE
472
DSN 2008: Pattabiraman et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:25 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
work was also demonstrated on a larger program, re(cid:173)
place, to demonstrate its scalability.
2 Related Work
Formal techniques have been extensively applied
to hardware verification [3]. Hardware verification
techniques typically focus on unmasking hardware
design defects as opposed to transient errors due to
electrical disturbances or radiation.
Formal techniques have been also used in soft(cid:173)
ware verification, i.e., to prove that a program's code
satisfies a programmer-supplied specification [4].
Typically, program verification techniques are geared
toward finding software defects, and they assume that
the hardware and the program environment are error(cid:173)
free. In other words, they prove that the program satis(cid:173)
fies the specification provided that the hardware plat(cid:173)
form on which the program is executed does not expe(cid:173)
rience errors.
The techniques presented in [5] and [6] consider
the effects of hardware transient errors (soft errors) on
programs implemented in hardware. While these tech(cid:173)
niques are useful
for applications implemented as
hardware circuits, it is not clear how the technique can
be extended for reasoning about the effects of errors
on programs. This is because programs are normally
executed on general-purpose processors in which the
manifestation of a low-level error is different from that
of an error in a circuit implementing the application.
Many error detection mechanisms have been pro(cid:173)
posed in the literature, along with formal proofs of
their correctness. However, the verification methodol(cid:173)
ogy is usually tightly coupled with the mechanism
under study. For example, [7] proposes and verifies a
control-flow checking technique by constructing a
hypothetical program augmented with the technique
and model checking the program for missed detec(cid:173)
tions. The program is carefully constructed to exercise
all possible cases of the control-flow checking tech(cid:173)
nique. It is non-trivial to construct such programs for
each error detection mechanism to be verified.
A recent paper [8] proposes the use of type(cid:173)
checking to verify the fault-tolerance provided by a
specific error detection mechanism, namely, compiler(cid:173)
based instruction duplication. The paper proposes a
detailed machine model for executing programs. The
faults in the fault model (single-event upsets) are
represented as transitions in this machine model. The
advantage of the technique is that it allows reasoning
about the effect of low-level hardware faults on the
whole program rather than on individual instructions
or data. However, the detection mechanism (duplica(cid:173)
tion) is tightly coupled with the machine model, due to
inherent assumptions that limit error propagation in
the program and may not hold in non-duplicated pro(cid:173)
the type-checking technique in [8]
grams. Further,
either accepts or rejects a program based on whether
the program has been duplicated correctly, but it does
not consider the consequences of the error on the pro(cid:173)
gram. As a result, the program may be rejected by the
technique even though the error is benign and has no
effect on the program's output.
Symbolic execution has been used for a wide va(cid:173)
riety of software testing and maintenance purposes [9].
The main idea in these techniques is to execute the
program with symbolic values rather than concrete
values and to abstract the program state as symbolic
expressions. An example of a commercially deployed
symbolic execution technique to find bugs in programs
is Prefix [10]. However, like many symbolic execution
techniques, Prefix assumes that the hardware does not
experience errors during program execution.
Recently, [11] introduced a symbolic approach for
injecting faults into programs. The goals of this ap(cid:173)
proach are similar to ours, namely to verify properties
of fault-tolerance mechanisms in the presence of
hardware errors. The technique reasons on programs
written in Java and considers the effect of bit-flips in
program variables. However, a hardware error can
have wide-ranging consequences on the program, in(cid:173)
cluding changing its control-flow and affecting the
runtime support mechanisms for the language (such as
the program stack and libraries). These errors are not
considered by the technique. Further, the technique
presented in [11] uses theorem proving to verify the
error-resilience of programs. Theorem proving has the
intrinsic advantage that it is naturally symbolic and
can reason about the non-determinism introduced by
errors. However, as it stands today, theorem proving
requires considerable programmer intervention and
expertise, and cannot be completely automated.
Summary: The formal techniques considered in this
section predominantly fall into the category of soft(cid:173)
ware-only techniques which do not consider hardware
errors [4], or into the category of hardware-only tech(cid:173)
niques which do not consider the effects of errors on
software [3]. Further, existing verification techniques
are often coupled with the detection mechanism (e.g.
duplication) being verified [7][8]. Therefore,
there
exists no generic technique that allows reasoning
about the effects of arbitrary hardware faults on soft(cid:173)
ware, and can be combined with an arbitrary fault
model and detection technique(s). This is important
for enumerating all hardware transient errors that
would escape detection and cause programs to fail.
3 Approach
This section introduces the conceptual model of
the SymPLFIED framework and also the technique
used by SymPLFIED to symbolically propagate errors
in the program. The fault-model used by SymPLFIED
is also discussed.
1-4244-2398-9/08/$20.00 Â©2008 IEEE
473
DSN 2008: Pattabiraman et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:25 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
3.1
Framework
The SymPLFIED framework accepts a program
protected with error detectors and enumerates all er(cid:173)
rors (in a particular class) that would not be detected
by the detectors in the program. Figure 1 presents the
conceptual design of the SymPLFIED framework.
Machine Model
(Memory, Registers,
Instructions)
SymPLFIED
Components
Error Model
(Register errors,
memory errors,
control-flow errors
User /System
supplied
Figure 1: Conceptual design flow of SymPLFIED
Assembly Language: The SymPLFIED frame(cid:173)
work considers programs represented at the assembly
language level. The advantage of using assembly l~nÂ­
guage is that many low-level hardware errors that Im(cid:173)
pact the program can be represented at the assembly
language level (as shown in section 3.3). Further, the
entire application, including runtime libraries, is ame(cid:173)
nable to analysis at
the assembly language level.
While it may be argued that we need to go to even
lower levels (e.g.,
register transfer level) to truly
represent low-level errors, the consequent state explo(cid:173)
sion can impact the practicality of the model.
We define a generic assembly language in which
programs are represented for formal analysis by the
framework. Because the language defines a set of arc(cid:173)
hitectural abstractions found in many common Re(cid:173)
duced Instruction Set Computing (RISC) architectures,
it is portable across these architectures, with an archi(cid:173)
tecture-specific front end. The assembly language has
direct support for (1) input/output operations, so that
programs can be analyzed independently of the ope~atÂ­
ing system, and (2) invocation of error detectors USIng
special instructions, called CHECKs, which allow de(cid:173)
tectors to be represented in line with the program.
Inputs: The inputs to the framework are (1) a
program written in the generic assembly lan~age
(discussed above), (2) error detectors embedded In the
program code, and (3) a class of hardware errors to be
considered as part of the fault model (e.g. control-flow
errors, register file errors).
Operation: The program expressed in the generic
assembly language is automatically translated into a
formal mathematical model
(represented using the
Maude system [12]). Since the abstraction is close to
the actual program in assembly language, it is suffi(cid:173)
cient for the user to formulate generic specifications,
such as an incorrect program outcome or an exception
being thrown. Such a low-level abstraction of the pro(cid:173)
gram is useful to reason about hardware errors. The
formal model can then be rigorously analyzed under
error conditions against the above specifications using
techniques such as model checking and theorem prov(cid:173)
ing. In this paper, model checking is used because it is
completely automated and requires no intervention on
the part of the programmer.
Outputs: The framework uses the symbolic fault(cid:173)
propagation technique (section 3.2) and outputs either:
1. A proof that the program with the embedded de(cid:173)
tectors is resilient to the error class considered, or
2. A comprehensive set of all errors belonging to the
error class that may evade detection and lead to
program failure (crash, hang, incorrect output).
Components: The framework consists of the fol-
â¢
lowing formal models:
â¢ Machine Model: Models the formal semantics of
the machine on which the program is to be ex(cid:173)
ecuted (e.g. registers, memory, instructions, etc.).
Error Model: Specifies error classes and error
manifestations in the machine on which the pro(cid:173)
gram is executed, e.g., errors in the class register
errors can manifest in any register in the machine.
â¢ Detector Model: Specifies the format of error
detectors and their execution semantics. It also in(cid:173)
cludes the action taken upon detecting the error,
e.g., halting the program.
By representing all three models in the same formal
framework, it is possible to reason about the effects of
errors
error model) both on programs
(represented in the machine model) and on detectors
(represented in the detector model) in a unified way.
(in the
Correctness: For the results of the formal analy(cid:173)
sis to be trustworthy, the model must be provably cor(cid:173)
rect. There are two aspects to correctness, namely:
1. The model must satisfy certain desirable proper(cid:173)
ties, such as termination, coherence, and sufficient
completeness [12]. We have formally analyzed
the specification using automated checking tools
available in Maude to ensure these properties.
2. The model must be an accurate representation of
the system being modeled. We have also validated
the model by rigorously analyzing the behavior of
errors in the model and comparing it with the be(cid:173)
havior of the real system.
3.2