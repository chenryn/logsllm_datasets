# Exploiting Software: How to Break Code

**Author:** Gary McGraw, Ph.D.  
**Title:** CTO, Cigital  
**Website:** [Cigital](http://www.cigital.com)  
**Copyright:** © 2004 Cigital

---

## Pop Quiz
What do wireless devices, cell phones, PDAs, browsers, operating systems, servers, personal computers, public key infrastructure systems, and firewalls have in common?  
**Answer:** Software

---

## The Problem with Software Security

### Commercial Security is Reactive
- **Perimeter Defense:** Relying on firewalls to keep threats out.
- **Over-reliance on Cryptography:** Assuming SSL usage ensures security.
- **Post-Development Reviews:** Evaluating products only after they are complete.
- **Penetrate and Patch:** Addressing vulnerabilities only after they are exploited.
- **Disallowed Advanced Technologies:** Considering extensible systems like Java and .NET as inherently dangerous.
- **Lack of Developer Understanding:** Operations personnel often lack a deep understanding of software development.

### Builders vs. Operators
- **Most Security Personnel:** Are operations-focused (network administrators, firewall rule managers, and COTS product integrators).
- **Training Needs:** These individuals require specialized training.
- **Builders' Perspective:** Most developers are not security experts, and software development remains complex.
- **Educational Gaps:** There is a need for better academic education on secure coding practices.
- **Emergent Properties:** Security is an emergent property that is challenging for developers to fully grasp.

---

## Challenges in Ensuring Software Security

### Making Software Behave
- **Testing Quality:** Can quality be tested?
- **Finding Bugs:** How do you identify adaptive bugs in code?
- **Malicious Actors:** What about intentional attacks?
- **Security vs. Functional Testing:** Understanding the differences.
- **Teaching Security Design:** How can we effectively teach secure design principles?
- **Codifying Requirements:** How can non-functional, emergent requirements like security be formalized?
- **Measuring Security:** Is it possible to quantify security?

### Attaining Software Security
- **Trinity of Trouble:**
  - **Connectivity:** The ubiquity of the Internet and networked software.
  - **Complexity:** Networked, distributed, and mobile code is inherently difficult to manage.
  - **Extensibility:** Systems evolve unpredictably and are modified on the fly.

### Software Complexity and Vulnerability Growth
- **Windows Complexity:** A graph showing the increasing complexity of Windows over time.
- **Vulnerability Growth:** Data illustrating the rise in software vulnerabilities.

### The Need for Scientific Understanding
- **Basic Understanding:** A fundamental comprehension of how complexity impacts security.
- **Correlation Analysis:** Investigating the relationship between lines of code and vulnerability counts.
- **Categorizing Problems:** Identifying and classifying common security issues.
- **Teaching Strategies:** Developing methods to teach students what currently takes years of field experience to understand.

---

## Threat Actors

- **Hackers, Zealots, Script Kiddies, Criminals, Malicious Insiders, Compiler Wielders, Business Competitors, Police, Press, Terrorists, Intelligence Agencies.**

### Historical Context
- **1995:** Dan Geer fired from Silicon Graphics for releasing SATAN with Wietse Venema.
- **Fall 2004:** John Aycock at the University of Calgary criticized for teaching a malware course.
- **2004:** System administrators face consequences for not using port scanners to check security posture.

### Good News and Bad News
- **Good News:**
  - Interest in how things break.
  - Increased awareness and interest in computer security.
- **Bad News:**
  - Lack of focus on building secure systems.
  - Building secure systems is more challenging than breaking insecure ones.

---

## Understanding Security Issues

### Types of Security Problems
- **Implementation Bugs:**
  - Buffer overflows, string format issues, race conditions, TOCTOU, unsafe environment variables, unsafe system calls, untrusted input, misuse of cryptography.
- **Architectural Flaws:**
  - Compartmentalization problems, privileged block protection failures, catastrophic security failures, type safety confusion, insecure auditing, access control issues, method overriding, signing too much code.

### Attackers' Toolkit
- **Standard Tools:**
  - Disassemblers and decompilers, control flow and coverage tools, APISPY32, breakpoint setters, buffer overflow, shell code, rootkits.
- **Common Payloads:**
  - Small, zero-avoidant, XOR-protected payloads for various platforms.
- **Rootkits:**
  - Complete machine control, kernel-level, and hardware-based attacks.

### Attack Process
- **Scanning and Mapping Networks:**
  - Identify target systems and their components.
- **Choosing Attack Patterns:**
  - Applying relevant attack patterns to find and exploit vulnerabilities.
- **Planting Backdoors:**
  - Establishing persistent access.

### 48 Attack Patterns
- **Examples:**
  - Make the Client Invisible, Target Programs That Write to Privileged OS Resources, User-Supplied Configuration Files, etc.

### Critical Lessons in Software Security
- **More Than Security Functions:**
  - Security is not just about adding security features; it's an emergent property of the entire system.
- **Integration with SDLC:**
  - Deep integration with the software development lifecycle is necessary.

### Ten Guiding Principles for Secure Design
1. Secure the weakest link.
2. Practice defense in depth.
3. Fail securely.
4. Follow the principle of least privilege.
5. Compartmentalize.
6. Keep it simple.
7. Promote privacy.
8. Remember that hiding secrets is hard.
9. Be reluctant to trust.
10. Use your community.

### Best Practices in the SDLC
- **Throughout the Lifecycle:**
  - Security best practices should be applied from the start.
- **Early Integration:**
  - Abuse cases, security requirements analysis, architectural risk analysis, external reviews, and malicious testing.

### Where to Learn More
- **IEEE Security & Privacy Magazine:**
  - Department on Software Security Best Practices.
- **Cigital’s Software Security Group:**
  - Innovates and practices Software Quality Management.
- **Resources:**
  - [Cigital Presentations](http://www.cigital.com/presentations/exploit04)
  - Books: "Exploiting Software" and "Building Secure Software"
  - Contact: [Email](PI:EMAIL)

---

© 2004 Cigital