mysql replcation is failed
说明：本答案还是没有完全满足题意，例如，报警短信和邮件的功能还没有开发。
方法3（此为企业生产的正式检查脚本）：
[rooteoldboy scripts] cat 13_6_3.sh
#!/bin/bash
this script function i8:
check_mysql_slave_replication_status
USER
NOILY-G-K-AAAA
oldboy
2009-02-16-Created
............................................
path=/server/scripts
/dev/nu11<==这个是延选就态佳，用于进行是否为数字的判断。
if [ $? -ne 0 lithen
<==如果不为数字。
赋值300，当数据库出现复制故障时，延迟
这个状态值有可能是NULL，即非数字。
fi
1f[*$（status[0])*=*Yes*-a *$[status[1]}*= *Yes*-a S(status[3]] -1t 120 ]
<==两个线程都为Ye8，井且延退小于120秒，即认为复制状态是正常的。
then
#echo *Mysql slave status is ok*
return o
<近因0。
else
JudgeError S（status[2]}#<==否则，将错误号s（status[2]}传入Judge&rror函数
判断错误号是否可以自动修复。
fi
function MAIL()(
<定义邮件函数，在范例11-13中讲过此函数
1ocal SUBJECT_CONTENT=$1
<=将函数的第一个传参赋值给主题变量。
for MAIL_USERinecho SHAIL_GROUP<==遗历邮件列表。
op
done
functionPAGER（）（<-定义手机函数，在范例11-13中讲过此函数。
for PAGER_USERinecho$PAGER_GROUP<==追历手机列表。
do
TITLE=S1
<将函数的第一个传参赋值给主题变量。
<=将手机号赋值给CONTACT变量。
HTTPGW=http://o1dboy.sn8.cn/smsproxy/sendam8.action
<==发选短信地址，这个地址需要用户付费购买，如果想要免费的，就得用微信替代了。
STITLE[S2]*SHTTPOW
<==发送短信报警的命令。cdkey是购买短信网关时，由售卖老提供的，password是密码
也是由售卖者提供的。
done
function SendMsg(1 (
if[S1-ne0]<=传入S1，如果不为0，则表示复制有问题，这里约s1即为CheckDb里
的退四慎（用检测失致的次数作为延团值），在后文执行主函数main时是通过调用SendiMsg传参传进来的值。
then
---
## Page 295
第13章Shel数细的应用实践2m
RETVAL=1
NOW_TIHE=date +*Y-&m-&d 8H:8M:S*
#<…报警时间。
SUBJECT_CONTENT-*mysql slave is error,errorno is S2,S(NOW_TIME).*
<==报警主题。
echo-e*SSUBJBCT_CONTENT*1tee SLOG_PILE<==输出信息，并记承到目志。
MAIL$SUBJECT_CONTENT+<==发邮件报鲁，SSUBJECT_CONTENT 作为通数参数
传给MAIL函数体的S1。
函数参数传给MAIL函数体的S1，SNOW_TIME作为函数体传给S2。
PAGER SSUBJECT_CONTENT SNOW_TIME<发姐信报警.SSUBJECT_CONTENT作为
echo*Mysql slave status is ok*
RETVAL=0#<=以0作为通因值。
fi
return SRBTVAL
function main()(
while true
op
CheckDb
SencMsgS？<==传入第一个参数“s?，即CheckDb里的返因值（用检测失败的次数作为返因值）
sleep 30
done
main
13.6合格运维人员必会的脚本列表
下面列举的知识点是老男孩要求所有学生必会的内容，这些内容不仅涉及了脚本
知识，还有涉及了系统命令、大量网络服务的知识，这些都需要运维人员了解和掌握，
Shell编程仅仅是其中的一部分内容。
作为一个合格的运维人员，需要掌握的脚本知识列表如下：
1）系统及各类服务的监控脚本，例如：文件、内存、磁盘、端口，URL监控报
警等。
2）监控网站目录下的文件是否被筹改，以及当站点目录被批量纂改后如何批量恢
复它们的脚本
3）各类服务Rsync、Nginx、MySQL等的启动及停止专业脚本（使用chkconfig
管理）。
4）MySQL主从复制监控报警，以及自动处理不复制故障的脚本。
5）一键配置MySQL多实例、一键配置MySQL主从部署的脚本。
6）监控HTTP、MySQL、Rsync、NFS、Memcached等服务是否异常的生产脚本。
7）一键软件安装及优化的脚本，比如LANMP、Linux一键优化，一键数据库安装、
优化等。
---
## Page 296
278跟老男孩学 Linux运维：Shell 编程实战
8）MySQL多实例启动脚本，分库、分表自动备份脚本。
9）根据网络连接数及Web日志PV数封IP的脚本。
10）监控网站的PV及流量，并且对流量信息进行统计的脚本。
11）检查Web服务器多个URL地址是否异常的脚本，要是可以批量处理且通用的
脚本。
12）对系统的基础配置一键优化的脚本。
13）TCP连接状态及IP统计报警的脚本。
14）批量创建用户并设置随机8位密码的脚本。
提示：对于这些脚本，大部分都可以直接从本书中找到相关案例或类似的开发方
法，建议读者在学习完本书后，自行练习，看是否可以搞定这些问题。
特别说明：可访问如下地址或手机扫二维码查看第13章的核心脚本代码。
http://oldboy.blog.51cto.com/2561410/1855316
口
55
国
---
## Page 297
Linux
第14章
Shell脚本开发规范
Shell脚本开发规范及习惯非常重要，有了好的规范和习惯，才能大大提升开发效
率，降低后期的脚本维护成本，特别是在多人协作开发时，有一个互相遵守的规范显得
特别重要。即使是自己一个人独自开发，也要采取一套科学的、固定的规范，这样脚本
才更易读，易于后期维护。总之，就是要让自已养成一个一出手就是专业和规范的习
惯。下面我们就来看看具体都有哪些规范和习惯。
14.1Shell脚本基本规范
在Shell脚本里，第一行通常用于指定脚本解释器，该行内容为：
1/bin/bash
或：
1/bin/sh
说明：此项在Linux系统场景下可能不是必须的，属于优秀规范和习惯。
而在Shell脚本的开头处解释器代码后，最好加上版本版权等信息，如下：
Date:
16:292012-3-30
---
## Page 298
8]跟老男孩学 Linux运维：Shell编程实战
Author:Created by oldboy
#Mai1:
313337419qq.com
#Function: This scripts function is.....
Version:1.1
说明：可在修改~/.vimrc配置文件时自动加上以上信息的功能。此项在Linux系
统场景下不是必须的，属于优秀规范和习惯。
此外，Shell脚本中尽量不要用中文注释，应用英文注释，以防止本机或切换系统
环境后出现中文乱码的困扰。如果非要加中文，请根据自身的客户端对系统进行字符集
调整，如：exportLANG="zh_CN.UTF-8"，并在脚本中重新定义字符集，使其和系统
一致。
Shell脚本命名应以“.sh”为扩展名。例如：script-name.sh。
Shell脚本应存放在固定的路径下，例如：/server/scripts。
以下则是代码书写技巧。
口成对的符号应尽量一次写出来，然后退格在符号里增加内容，以防止遗漏。这些
成对的符号包括：
0、0、
口中括号（口）两端至少要有1个空格，因此，键人中括号时即可留出空格[]
然后再退格键入中间的内容，并确保两端都至少有一个空格。即：先键入一对中
括号，然后退一个格，输人两个空格，再退一个格，双中括号（[）的写法也是
如此。
口对于流程控制语句应一次将格式写完，再添加内容。
比如，if语句的格式一次完成应为：
i条件内客
then
内容
for循环语句的格式一次完成应为：
for
do
内客
done
提示：while和until、case等语句也是一样。
---
## Page 299
第 14章Shell脚本开发规范28
口通过缩进让代码更易读，比如：
if条件内容
then
内容
fi
口字符串赋值给变量时应加双引号，并且等号前后不能有空格。例如：
OLDBOY_FILE=*test.txt*
口脚本中的单引号、双引号及反引号，必须为英文状态下的符号，其实所有的
Linux标准字符及符号都应该是英文状态下的符号，这一点需要特别注意。
14.2Shell脚本变量命名及引l用变量规范
1.全局变量定义
全局变量也称环境变量，它的定义应全部大写，如APACHE_ERR或APACHEERR，
名字对应的语义要尽量清晰，能够正确表达变量内容的含义，对于过长的英文单词可
用前几个字符代替。多个单词间可用“_”号连接，全局变量的定义一般放在系统的全
局路径中，并且最好采用export来定义，全局变量一般可以在任意子Shell中直接使用
（特殊情况除外，例如：定时任务执行Shell时就最好在Shell里重新定义这些全局变量，
否则可能会出现问题）。
范例14-1：全局变量的定义示例。
[rooteoldboy scripts]+tail-1/etc/profile
export APACHEERR=*he11o*
[rooteoldboy scripts]source/etc/profile
[rootBoldboy 8cripts] echo SAPACHEERR
he11o
2.局部变量定义
局部变量也称为普通变量，在常规脚本中，普通变量的命名也要尽可能统一，可
以使用驼峰语法，即第二个单词的首字母大写，如oldboyTraining，或者每个单词首
字母大写，如CheckUrl，当然也有网友喜欢采用全部大写或全部小写的方式，例如：
CHECK、check，选一种适合你的即可，或者跟着本书的规范走。
Shell函数中的变量可以使用local方式进行定义，使之只在本函数作用域内有效，
防止函数中的变量名称与外部程序中的变量相同，从而造成程序异常。下面是在函数中
定义变量的例子。
范例14-2：实现函数内的变量定义。
function TestFunc(）(
---
## Page 300
2R2跟老男孩学Linux运维：Shel 编程实战
local1
for(（1=0;1<n:1++))
do
echo ‘do something
done
3.变量的引用规范
在引用变量时，若变量前后都有字符，则需要使用${APACHE_ERR}（加大括号
的方式）引用变量，以防止产生歧义；当变量内容为字符串时，需要使用"S{APACHE
ERR}”（外面加双引号的方式）引用变量；当变量内容为整数时，则最好直接使用
SAPACHE_ERR来引用变量。全局变量、局部变量、函数变量、数组变量等都是如此。
说明：对于需要环境变量的Java程序脚本等，在写脚本之前，最好通过export
重新声明环境变量，以免在定时任务等场合的使用中出现问题。
14.3Shell函数的命名及函数定义规范
Shell函数的命名可采用单词首字母大写的形式，如CreateFile()，并且语义要清晰，
比如，使用CreateFileO代替CFileO，也可以使用小写形式，如createfileO。
可以加前后缓，如后级为Max则为最大值，为Min则表示最小值，前缓Is为判断
型函数，Get为取值函数，Do则为处理函数，这也有益于对函数功能的理解，使函数名
更直观、更清晰。
范例14-3：对操作系统函数库脚本的函数名进行定义。
#/etc/init.d/functions
is_igmored_ri1e（）（<==这里系统的函数名并烫有大写，除了大小写之外，还是比较规范的。
Check whether file $1 is a backup or rpm
enerated file and should be ignorec
case*$1*in
*-|·.bak1·.orig丨·.rpmnew1·.rpmorig1*.rpmsave)
return 0
esac
return 1
如果需要区别一些常规的字符串，可在函数名前加上function关键字，例如：
function CreateFile（)(
显示函数返回值时，可在函数的结尾内容中包含returm语句，并跟上返回值。即使
---
## Page 301
第14章Shel脚本开发规范283
是不关心返回值的函数，也可能在后续调用时无意识地去判断它的返回值并进行一系列
动作，使用return语句不会带来多少负担，但确实能让函数的逻辑变得更加清晰和严谨。
范例14-4：为操作系统函数库脚本函数定义return返回值。
 Log a warning
warning()(
local rc=$?
if[-2*S(IN_INITLOG:-)*1:then
-.-- 
return Src
）
14.4Shell脚本（模块）高级命名规范
1）常规Shell脚本使用统一的后级：.sh，例如oldboy.sh
2）模块的启动和停止脚本统一命名为start_模块名.sh和stop_模块名.sh。
3）监控脚本通常以*_mon.sh为后缓。
4）控制脚本一般以*_ctl.sh为后级。
14.5Shell脚本的代码风格
14.5.1代码框架
易变的信息（如报警的收件人、机器名、端口、用户名密码、URL等）最好都定义
为变量或使用特殊位置的参数，这会使开发的脚本更具通用性。
把Shell的通用变量以配置文件的形式单独存放，以“功能.cfg”来命名，例如
nginx.conf，并放人conf目录下；引用时通过在脚本开头使用source conf/nginx.conf的
形式来加载
将程序的功能分段、分模块采用函数等来实现，并存放到单独的函数文件里，如
果是通用的公共函数可以存放于/etc/init.d/functions下，调用时采用source文件全路径
即可。