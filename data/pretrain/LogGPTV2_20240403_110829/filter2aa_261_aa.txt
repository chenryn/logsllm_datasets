Caught you
-
reveal and exploit IPC logic 
bugs inside Apple
Zhipeng Huo,,Yuebin Sun,,Chuanda Ding
of,
Tencent,Security,Xuanwu,Lab
Who are We?
• Zhipeng Huo (@R3dF09)
• Senior security researcher
• Member of EcoSec Team at Tencent Security Xuanwu Lab
• macOS, iOS and Windows platform security
• Speaker of Black Hat Europe 2018, DEF CON 28
Who are We?
• Yuebin Sun (@yuebinsun2020)
• Senior security researcher
• Member of EcoSec Team at Tencent Security Xuanwu Lab
• macOS, iOS platform security
Who are We?
• Chuanda Ding (@FlowerCode_)
• Senior security researcher
• Leads EcoSec Team at Tencent Security Xuanwu Lab
• Windows platform security
• Speaker of Black Hat Europe 2018, DEF CON China 2018, DEF CON 28
Agenda
• Introduction
• IPC on Apple Platforms
• IPC Logic Vulnerabilities
• Preferences
• App Store
• Conclusion
Introduction
Inter-Process Communication
• Inter-Process Communication (IPC) is the set of techniques provided 
by the operating system to allow processes to communicate with 
each other
• Roles - Client/Server
• Client requests Server
• Server responds to Client if needed
• IPC Channel
Client
IPC Channel ( Kernel )
send
reply
Server
receive
reply
Why Needs IPC ?
• Modularity
• Divide complex system to separated modules
• Don’t Repeat Yourself
• Stability
• Module crash would not crash entire system
• Privilege separation
• Isolate sensitive operations into separated processes
• Principle of Least Privilege
• Module attacked would not compromise entire system
An IPC Example: Browser Architecture
Render 
Process
Network 
Process
Browser main Process
System 
Service
System 
Service
IPC
IPC
IPC
IPC
IPC
IPC
IPC
IPC Breaks Security Boundary
• Different process, different privilege
• IPC is the “Window” between different privilege
• IPC vulnerability is “Key” to the high privilege
Security
Boundary
low privilege
high privilege
sandboxed
non-sandboxed
IPC
IPC
Logic Vulnerability
• Not memory corruption vulnerabilities
• Boring for us
• Kinds of logic flaws
• Design flaw
• Implementation flaw
• Combine “features” to compromise system
New Challenge - Apple M1
• New Chip, New Security Features
• System Integrity
• Data Protection
• Pointer Authentication Code (PAC)
• Hardware-level security mechanism against memory bug 
• Memory game became harder!
• So, spring of logic vulnerability is coming ?
IPC on Apple Platforms
Apple IPC Methods
• Shared File
• Shared Memory
• Sockets
• Apple Events
• Distributed Notifications
• Pasteboard
• Mach messages
• XPC
• NSXPC
• …
XNU Kernel
Mach Messages
XPC
NSXPC
Mach Messages
XPC
NSXPC
Client
Server
Mach Port
• An endpoint of a unidirectional communication channel
• Messages can be sent to or received from
• Port Rights
• RECEIVE right – Receive message
• SEND right – Send message
RECEIVE
right
SEND
right
SEND
right
message
message
Mach Messages
• Message send and receive through system call
• mach_msg
• mach_msg_overwrite
• Message structure
• Header
• Complex data (optional)
• Port rights or OOL data
• Message Buffer
• Pros and Cons
• Low-level, fundamental, powerful
• Ancient, poorly documented, hard to use directly
XPC
• Latest IPC mechanism on top of Mach messages
• Managed by launchd
• Naming server
• On-demand launch, monitor, terminate server
• Transparent
• XPC Message
• Dictionary object
• Don’t need to play with Mach message structure directly
launchd
Client
Server
Lookup
Register 
XPC 
Message
XPC Message
• xpc_dictionary_set_*
• xpc_dictionary_get_*
• …
{
"CFPreferencesUser": "kCFPreferencesCurrentUser",
"CFPreferencesOperation": 1 ,
"CFPreferencesShouldWriteSynchronously": true ,
"CFPreferencesCurrentApplicationDomain": true ,
"CFPreferencesDomain": "/tmp/xlab.txt" ,
}
XPC Message
Mach Message
XNU
Mach Message
XPC Message
Serialize
Unserialize
XPC API
• xpc_connection_create_mach_service
• Creates a new connection object that represents a Mach service
• A peer connection will be returned
• if XPC_CONNECTION_MACH_SERVICE_LISTENER flag is set, a listener 
connection returned
• xpc_connection_set_event_handler
• Sets the event handler block for the connection
• xpc_connection_send_message
• Sends a message over the connection to the destination service
NSXPC
• Object-oriented IPC mechanism on top of XPC
• High-level remote procedure call interface that allows you to call 
methods on objects in one process from another process
• NSXPCConnection API
• NSXPCListener
• NSXPCListenerDelegate
• NSXPCConnection
NSXPC Interfaces
• Use Objective-C protocols to define programmatic interface between 
the calling application and service
• Supported types of interface parameters
• Arithmetic types, BOOL
• C Strings, Structures, arrays
• Custom Objective-C objects that implement the NSSecureCoding
protocol
@protocol ISDownloadService 
- (void)setStoreClient:(ISStoreClient*)storeClient;
- (void)performDownload:(SSDownload*)download
withOptions:(NSUInteger)options
replyBlock:(void (^)(NSUInteger,NSError*))reply;
@end
NSXPC Architecture
https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html
IPC Logic Vulnerabilities
https://support.apple.com/en-us/HT212317
What are Preferences?
• Preferences are user-defined settings
• Persistent data stored in preferences file
• Property list – “plist”
• Service /usr/sbin/cfprefsd manages preferences
• Reads / writes preferences by user requests
How does App Get/Set Preferences Values?
• Foundation API
• NSUserDefaults
• Core Foundation API
• CFPreferencesSetAppValue
• CFPreferencesCopyAppValue
CFStringRef textColorKey = CFSTR("defaultTextColor");
CFStringRef colorBLUE = CFSTR("BLUE");
// Set up the preference.
CFPreferencesSetAppValue(textColorKey, colorBLUE,
kCFPreferencesCurrentApplication);
// Read the preference.
textColor = (CFStringRef)CFPreferencesCopyAppValue(textColorKey,
kCFPreferencesCurrentApplication);
NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];
[defaults setBool:YES forKey:@"CacheDataAggressively"];
cfprefsd Handle Requests as a XPC Server
service = xpc_connection_create_mach_service(
“com.apple.cfprefsd.daemon”, 
0, 
XPC_CONNECTION_MACH_SERVICE_LISTENER
);
handler[0] = _NSConcreteStackBlock;
handler[1] = 0xC2000000LL;
handler[2] = &__39__CFPrefsDaemon_initWithRole_testMode___block_invoke_2;
handler[3] = &__block_descriptor_40_e8_32o_e33_v16__0__NSObject_OS_xpc_object__8l;
handler[4] = v7;
xpc_connection_set_event_handler(service, handler);
com.apple.cfprefsd.daemon run with root privilege without sandbox
Directly Message cfprefsd
xpc_connection_t conn = xpc_connection_create_mach_service(
"com.apple.cfprefsd.daemon", NULL, 0
);
xpc_object_t msg = xpc_dictionary_create(NULL, NULL, 0);
xpc_dictionary_set_string(msg, "CFPreferencesUser", "kCFPreferencesCurrentUser");
xpc_dictionary_set_int64(msg, "CFPreferencesOperation", 1);
xpc_dictionary_set_string(msg, "Key", "hello");
xpc_dictionary_set_data(msg, "Value", "world", 5);
xpc_dictionary_set_bool(msg, "CFPreferencesCurrentApplicationDomain", true);
xpc_dictionary_set_string(msg, "CFPreferencesDomain", domain);
int fd = open("/tmp/xlab.plist", O_RDWR);
xpc_dictionary_set_fd(msg, "CFPreferencesAccessToken", fd);
xpc_connection_send_message(conn, msg);
Where does cfprefsd
Save Preferences Data?
Preferences File Path Construction
• PreferencesDirectory
• kCFPreferencesAnyUser “/Library/Preferences”
• kCFPreferencesCurrentUser “~/Library/Preferences” 
• PreferencesDomain
• XPC Message - “CFPreferencesDomain”
• ”CFPreferencesIsByHost”: True
• PreferencesDirectory + (PreferencesDomain + “.” +  
HostIdentifier) + “.plist”
• “CFPreferencesIsByHost”: False (Default)
• PreferencesDirectory + PreferencesDomain + “.plist”
Implementation of Preferences File Path
• CFStringCreateWithFormat
• CFURLCreateWithFileSystemPathRelativeToBase
• baseURL - PreferencesDirectory
• filePath
CFURLRef plist_url = CFURLCreateWithFileSystemPathRelativeToBase (
kCFAllocatorDefault,
filePath, // fully controllable
kCFURLPOSIXPathStyle, // pathStyle
true, // isDirectory
baseURL // PreferencesDirectory
);
CFStringRef filePath = CFStringCreateWithFormat(kCFAllocatorDefault,NULL,
CFSTR("%@.plist"), PreferencesDomain
);
Features of 
CFURLCreateWithFileSystemPath-
RelativeToBase
baseURL
filePath
../../tmp/xlab.plist
/Library/Preferences
/tmp/xlab.plist
filePath path traversal with “../”
baseURL
filePath
/tmp/xlab.plist
/Library/Preferences
/tmp/xlab.plist
filePath is absolute path
Preferences file path is absolutely controllable 
What if Preferences File Path does not Exist?
[CFPDSource cacheActualPathCreatingIfNecessary:euid:egid:isWritable:](...)
{
if ( open(plist_path, O_CREATE, v18) >= 0 ){
return;
}
PathComponent = CFURLCreateCopyDeletingLastPathComponent(, v15);
_CFPrefsCreatePreferencesDirectory(PathComponent, a4, a5);
v16 = open(plist_path, O_CREATE, 0x384);
}
1. open preferences file
2. create preferences directory
3. open preferences file again
CFPrefsCreatePreferencesDirectory
int _CFPrefsCreatePreferencesDirectory(path, uid, gid) {
int dirfd = open("/", O_DIRECTORY);
for (slice in path.split("/")) {
int fd = openat(dirfd, slice, O_DIRECTORY);
if (fd == -1 && errno == ENOENT && !mkdirat(dirfd, slice, perm)) {
fd = openat(dirfd, slice, O_DIRECTORY|O_NOFOLLOW);
if ( fd == -1 ) return -1;
fchown(fd, uid, gid);
}
}
}
Ownership of Preferences Directory
• Default, ownership is the caller of request
• xpc_connection_get_euid
• xpc_connection_get_egid
• Other, ownership is controllable
• CFPreferencesUseCorrectOwner == True
• CFPreferencesUser == ‘root’
• getpwnam
• pw_uid
• pw_gid
CVE-2021-1815 Create arbitrary directories with controlled ownership 
Exploit of CVE-2021-1815
• Periodic scripts
• The method mentioned by Csaba Fitzl
• Create directory /usr/local/etc/periodic/daily with current 
user’s privilege
• Write a script file in /usr/local/etc/periodic/daily directory
• Wait a day
• The script would run as root
https://www.offensive-security.com/offsec/macos-preferences-priv-escalation/
Patch of CVE-2021-1815
cacheActualPathCreatingIfNecess
ary:euid:egid:isWritable:
cacheFileInfoForWriting:euid:eg
id:didCreate:
How does cfprefsd Read 
Preferences Data?
Preferences Read Logic
• How does cfprefsd returns preferences file data ?
• Put the preferences data in the reply directly