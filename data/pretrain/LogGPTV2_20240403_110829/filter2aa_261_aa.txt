# Exploiting IPC Logic Bugs in Apple Platforms

## Authors
- **Zhipeng Huo** (@R3dF09)
  - Senior Security Researcher, EcoSec Team, Tencent Security Xuanwu Lab
  - Specializes in macOS, iOS, and Windows platform security
  - Speaker at Black Hat Europe 2018 and DEF CON 28

- **Yuebin Sun** (@yuebinsun2020)
  - Senior Security Researcher, EcoSec Team, Tencent Security Xuanwu Lab
  - Specializes in macOS and iOS platform security

- **Chuanda Ding** (@FlowerCode_)
  - Senior Security Researcher, Leads EcoSec Team, Tencent Security Xuanwu Lab
  - Specializes in Windows platform security
  - Speaker at Black Hat Europe 2018, DEF CON China 2018, and DEF CON 28

## Agenda
- Introduction
- IPC on Apple Platforms
- IPC Logic Vulnerabilities
- Preferences
- App Store
- Conclusion

## Introduction
### Inter-Process Communication (IPC)
- **Definition**: IPC is a set of techniques provided by the operating system to allow processes to communicate with each other.
- **Roles**: 
  - **Client**: Requests services from the server.
  - **Server**: Responds to client requests.
- **IPC Channel**: The communication channel through which messages are sent and received.

### Why Use IPC?
- **Modularity**: Divides complex systems into separate modules.
- **Stability**: A module crash does not affect the entire system.
- **Privilege Separation**: Isolates sensitive operations into separate processes, adhering to the principle of least privilege.

### Example: Browser Architecture
- **Render Process**
- **Network Process**
- **Browser Main Process**
- **System Services**

### IPC and Security Boundaries
- **Different Processes, Different Privileges**: IPC acts as a "window" between different privilege levels.
- **Vulnerabilities**: IPC vulnerabilities can be the "key" to high-privilege access.

### Logic Vulnerabilities
- **Types**: Design flaws and implementation flaws.
- **Combining Features**: Can lead to system compromise.
- **New Challenges**: With Apple M1, new security features like System Integrity, Data Protection, and Pointer Authentication Code (PAC) make memory-based attacks harder, potentially leading to a rise in logic vulnerabilities.

## IPC on Apple Platforms
### IPC Methods
- **Shared File**
- **Shared Memory**
- **Sockets**
- **Apple Events**
- **Distributed Notifications**
- **Pasteboard**
- **Mach Messages**
- **XPC**
- **NSXPC**

### Mach Messages
- **Mach Port**: An endpoint for unidirectional communication.
- **Port Rights**: 
  - **RECEIVE right**: Receive messages.
  - **SEND right**: Send messages.
- **Message Structure**: Header, complex data (optional), port rights or out-of-line (OOL) data.
- **Pros and Cons**: Low-level, powerful, but poorly documented and hard to use directly.

### XPC
- **Latest IPC Mechanism**: Built on top of Mach messages.
- **Managed by launchd**: On-demand launch, monitoring, and termination of servers.
- **XPC Message**: Dictionary object, simplifying message handling.
- **APIs**:
  - `xpc_connection_create_mach_service`
  - `xpc_connection_set_event_handler`
  - `xpc_connection_send_message`

### NSXPC
- **Object-Oriented IPC**: High-level remote procedure call interface.
- **APIs**:
  - `NSXPCConnection`
  - `NSXPCListener`
  - `NSXPCListenerDelegate`
- **Interface Parameters**: Arithmetic types, C strings, structures, arrays, and custom Objective-C objects implementing `NSSecureCoding`.

## IPC Logic Vulnerabilities
### Preferences
- **User-Defined Settings**: Persistent data stored in plist files.
- **Service**: `/usr/sbin/cfprefsd` manages preferences.
- **Foundation API**: `NSUserDefaults`
- **Core Foundation API**: `CFPreferencesSetAppValue`, `CFPreferencesCopyAppValue`

### cfprefsd as an XPC Server
- **Root Privilege**: Runs without sandbox.
- **Direct Messaging**: Using `xpc_connection_create_mach_service` and `xpc_connection_send_message`.

### Preferences File Path Construction
- **Preferences Directory**:
  - `kCFPreferencesAnyUser`: `/Library/Preferences`
  - `kCFPreferencesCurrentUser`: `~/Library/Preferences`
- **Preferences Domain**: Defined in XPC message.
- **File Path**: Constructed using `CFStringCreateWithFormat` and `CFURLCreateWithFileSystemPathRelativeToBase`.

### Path Traversal
- **Controllable Path**: Absolute and relative paths.
- **File Creation**: If the path does not exist, it creates the directory and file.

### CVE-2021-1815
- **Exploit**: Create arbitrary directories with controlled ownership.
- **Method**: Periodic scripts, as described by Csaba Fitzl.
- **Patch**: Fixed in `cacheActualPathCreatingIfNecessary:euid:egid:isWritable:` and `cacheFileInfoForWriting:euid:egid:didCreate:`.

### Reading Preferences Data
- **Logic**: Returns preferences file data directly in the reply.

This document provides a comprehensive overview of IPC mechanisms on Apple platforms, focusing on the exploitation of IPC logic vulnerabilities, particularly in the context of preferences management.