which is based on the original work of Gennaro et al. [14].
Our extension accounts for univariate polynomials on the
wires, instead of just arithmetic values. We therefore need
to deﬁne a quadratic polynomial program:
Deﬁnition 4 (Quadratic Polynomial Program (QPP))
A QPP Q for a polynomial circuit F contains three
sets of polynomials V = {vk(x)},W = {wk(x)},Y =
{yk(x)} for k = 1, . . . , m and a target polynomial τ (x).
We say that Q computes F if: c1(z), c2(z), . . . , cN (z) is
a valid assignment of F’s inputs and outputs iff there
exist polynomials cN +1(z), . . . , cm(z) such that τ (x)
divides p(x, z) where
p(x, z) = (cid:31) m(cid:30)k=1
− (cid:31) m(cid:30)k=1
ck(z)vk(x)(cid:29)(cid:31) m(cid:30)k=1
ck(z)yk(x)(cid:29) .
ck(z)wk(x)(cid:29)
(3.1)
We deﬁne the degree of Q to equal the degree of τ (x).
The main difference of the above quadratic program with
the one presented in [23] is the fact that we introduce
another variable z in the polynomial p(x, z) representing
the program (hence we need to account for bivariate poly-
nomials, instead of univariate), which is going to account
for the polynomials on the wires of the circuit.
Constructing a QPP. We now show how to construct
a QPP Q for a polynomial circuit. The polynomials in
V,W,Y and the polynomial τ (x) are computed as fol-
lows. Let r1, r2, . . . , rd be random elements in F. First,
set τ (x) = (x− r1)(x− r2) . . . (x− rd) and compute the
polynomial vk(x) such that vk(ri) = 1 iff wire k is the
left input of multiplication gate i, otherwise vk(ri) = 0.
Similarly, wk(ri) = 1 iff wire k is the right input of mul-
tiplication gate i, otherwise wk(ri) = 0 and yk(ri) = 1
iff wire k is the output of multiplication gate i, otherwise
yk(ri) = 0. For example, consider the circuit of Figure 2
that has ﬁve inputs and one output and its wires are num-
bered as shown in the ﬁgure (gates take the index of the
their output wire). Then τ (x) = (x− r6)(x− r7). For vk
we require that vk(r6) = 0 except for v2(r6) = 1, since
the second wire is the only left input for the sixth gate,
and vk(r7) = 0 except for v1(r7) and v6(r7) which are 1,
since the ﬁrst and sixth wire contribute as left inputs to
gate 7. Right input polynomials wk are computed simi-
larly and output polynomials yk are computed such that
y6(r6) = y7(r7) = 1; all other cases are set to 0.
To see why the above QPP computes F, let us fo-
cus on a single multiplication gate g, with k1 being its
768  23rd USENIX Security Symposium 
USENIX Association
c1(z)
c2(z) c3(z)
c4(z) c5(z)
3.1
Intuition of Construction
×
+
c6(z)
+
×
c7(z)
Figure 2: A sample polynomial circuit.
output wire and k2 and k3 be its left and right input
wires respectively. Due to the divisibility requirement, it
holds p(ri, z) = 0 for i = 1, . . . , d, hence Equation 3.1
will give ((cid:31)m
k=1 ck(z)wk(rg)) =
((cid:31)m
k=1 ck(z)yk(rg)). Now, from the way the polyno-
mials vk, wk, yk were deﬁned above, most terms are 0
and what remains is ck2 (z)vk2 (rg) · ck3 (z)wk3 (rg) =
ck1 (z)yk1 (rg) or else ck2 (z) · ck3 (z) =c k1 (z), which is
the deﬁnition of a multiplication gate. More formally:
k=1 ck(z)vk(rg))((cid:31)m
Lemma 1 The above QPP Q computes F.
Proof: (⇒) Suppose c1(z), c2(z), . . . , cN (z) are correct
assignments of the input and output wires but there do
not exist polynomials cN +1(z), . . . , cm(z) such that τ (x)
divides p(x, z). Then there is at least one multiplication
gate r with left input x, right input y and output o, such
that p(r, z) (cid:27)= 0. Let p be the path of multiplication gates
that contains r starting from an input polynomial ci(z) to
an output polynomial cj(z), where i, j ≤ N. Since ci(z)
and cj(z) are correct assignments, there must exist poly-
nomials cx(z) and cy(z) such that cx(z)cy(z) =c o(z).
Since r has a single left input, a single right input and
a single output it holds vx(r) = 1 and vi(r) = 0 for all
i (cid:27)= x. Similarly, wy(r) = 1 and wi(r) = 0 for all i (cid:27)= y
and yo(r) = 1 and yi(r) = 0 for all i (cid:27)= o. Therefore
p(r, z) (cid:27)= 0 implies that for all polynomials cx(z), cy(z),
co(z), it is cx(z)cy(z) (cid:27)= co(z), a contradiction.
(⇐) Suppose τ (x) divides p(x, z). Then p(r, z) = 0
for all multiplication gates r. By the deﬁnition of vi(x),
wi(x), yi(x), the c1(z), c2(z), . . . , cm(z) are correct as-
signments on the circuit wires.
We next give an efﬁcient SNARK construction for poly-
nomial circuits based on the above QPP. Recall that a
polynomial circuit F has d multiplication gates and m
wires, the wires 1, . . . , N occupy inputs and outputs and
set Im = {N + 1, . . . , m} represents the internal wires,
where |Im| ≤ 3d. Also, we denote with ni the degree of
polynomial on wire i and we set n to be an upper bound
on the degrees of the polynomials on F’s wires.
The SNARK construction that we present works as fol-
lows. First, the key generation algorithm KeyGen pro-
duces a “commitment” to the polynomial circuit F by
outputting elements that relate to the internal set of wires
Im of the QPP Q = (V,W,Y, τ (x)) as the public key.
These elements encode bivariate polynomials in the ex-
ponent, evaluated at randomly chosen points t and s, to
accommodate for the fact that circuit F encodes opera-
tions over univariate polynomials and not just arithmetic
values (as is the case with [14]).
As was described in the previous section, for the prover
to prove that an assignment c1(z), c2(z), . . . , cN (z) of
polynomials on input/output wires is valid, it sufﬁces
to prove there exist polynomials cN +1(z), . . . , cm(z)
corresponding to assignments on the internal wires,
such that the polynomial p(x, z) from Relation 3.1
has roots r1, r2, . . . , rd.
To prove this, the prover
ﬁrst “solves” the circuit and computes the polynomials
c1(z), c2(z), . . . , cm(z) that correspond to the correct as-
signments on the wires. Then he uses these polynomials
and the public evaluation key (i.e., the circuit “commit-
ment”) to compute the following three types of terms
(which comprise the actual proof). The detailed computa-
tion of these values is described in Section 3.2.
• Extractability terms. These terms declare three
polynomials in the exponent, namely polynomials
(cid:31)m
k=N +1 ck(z)vk(x), (cid:31)m
k=N +1 ck(z)wk(x), and
(cid:31)m
k=N +1 ck(z)yk(x). These polynomials corre-
spond to the internal wires since the veriﬁer can
ﬁll in the parts for the input and output wires.
The above terms are engineered to allow extractabil-
ity using a knowledge assumption.
In particu-
lar, given these terms, there exists a polynomial-
time extractor that can, with overwhelming proba-
bility, recover the assignment cN +1(z), . . . , cm(z)
on internal wires. This proves the existence of
cN +1(z), . . . , cm(z).
• Consistency check terms. Extraction is done sep-
arately for terms related to the three polynomials
(cid:31)m
k=N +1 ck(z)vk(x), (cid:31)m
k=N +1 ck(z)wk(x), and
(cid:31)m
k=N +1 ck(z)yk(x). We therefore require a set of
consistency check terms to ensure that the extracted
cN +1(z), . . . , cm(z) polynomials are consistent for
the above V, W, and Y terms—otherwise, the same
wire can have ambiguous assignments.
• Divisibility check term. Finally, the divisibility
check term is to ensure that the above divisibil-
ity check corresponding to relation p(x, z) =
USENIX Association  
23rd USENIX Security Symposium  769
h(x, z)τ (x), holds for the polynomial
ck(z)wk(x)(cid:29)
(cid:31) m(cid:30)k=1
− (cid:31) m(cid:30)k=1
ck(z)vk(x)(cid:29)(cid:31) m(cid:30)k=1
ck(z)yk(x)(cid:29)
declared earlier by the extractability terms.
3.2 Concrete Construction
We now give the algorithms of our SNARK construction,
(following Deﬁnition 3). In comparison with the QSP
and QAP constructions [14, 23], one difﬁculty arises in
our setting when working with polynomials on wires. In
essence, to express a polynomial ck(z) on a wire in our
construction, we evaluate the polynomial at a committed
point z = t. In existing QSP and QAP constructions,
the prover knows the cleartext value on each wire when
constructing the proof. However, in our setting, the prover
does not know what t is, and hence cannot directly evalu-
ate the polynomials ck(z)’s on each wire. In fact, security
would be broken if the prover knew the value of the poly-
nomials at z = t.
To overcome this problem, we have to include more el-
ements in the evaluation key which will contain exponent
powers of the variable t (see the evaluation key below).
In this way, the prover will be able to evaluate ck(t) in
the exponent, without ever learning the value t. We now
give the algorithms:
(pk, sk) ← KeyGen(F, 1k): Let F be a polynomial cir-
cuit. Build the corresponding QPP Q = (V,W,Y, τ (x))
as above. Let e be a non-trivial bilinear map e : G×G →
GT , and let g be a generator of G. G and GT have prime
order p. Pick s, t, rv, rw, αv, αw, αy, β, γ from Zp and
set ry = rvrw and gv = grv, gw = grw and gy = gry.
The public evaluation key EKF is
1. {gtivk(s)
2. {gtiαvvk(s)
3. {gtiβ·vk(s)
4. {gtisj
The veriﬁcation key VKF consists of the values
}(i,j)∈[2n]×[d].
}(i,k)∈[n]×Im.
}(i,k)∈[n]×Im.
}(i,k)∈[n]×Im.
, gtiαwwk(s)
, gtiαyyk(s)
gtiβ·wk(s)
gtiβ·yk(s)
, gtiwk(s)
, gtiyk(s)
w
w
w
y
y
v
v
v
y
g, gαv , gαw , gαy , gγ, gβγgt(s)
y
and the set {gtivk(s)
}(i,k)∈[n]×[N ].
Note VKF and EKF are the public key pk of the SNARK.
Our SNARK is publicly veriﬁable, hence sk = pk.
, gtiwk(s)
, gtiyk(s)
w
y
v
π ← Prove(pk, x, w): The input x contains input poly-
nomials u and output polynomials y and the witness w
(which contains assignments of polynomials on the inter-
nal wires). Let ck(z) be the polynomials on the circuit’s
wires such that y = F(u, w). Let h(x, z) be the poly-
nomial such that p(x, z) = h(x, z) · τ (x). The proof is
computed as follows:
1. (Extractability terms) gvm(s,t)
v
, gwm(s,t)
, gym(s,t)
y
,
gαvvm(s,t)
v
, gαwwm(s,t)
w
, gαyym(s,t)
y
2. (Consistency check term)
gβ·vm(s,t)
v
gβ·wm(s,t)
w
gβ·ym(s,t)
y
.
w
.
3. (Divisibility check term) gh(s,t), where
(a) vm(x, z) =(cid:28)k∈Im
(b) wm(x, z) =(cid:28)k∈Im
(c) ym(x, z) = (cid:28)k∈Im
gβ·vm(s,t)
v
lic key terms {gtiβ·vk(s)
{0, 1} ← Verify(pk, x, π): Parse the proof π as
1. γv, γw, γy, κv, κw, κy.
ck(z)vk(x);
ck(z)wk(x); and
ck(z)yk(x). Note that the term
can be computed from pub-
}(i,k)∈[n]×Im.
gβ·wm(s,t)
w
gtiβ·yk(s)
gtiβ·vk(s)
gβ·ym(s,t)
y
w
y
v
2. Λ.
3. γh.
First, verify all three α terms: e(γv, gαv ) ?= e(κv, g) ∧
e(γw, gαw ) ?= e(κw, g) ∧ e(γy, gαy ) ?= e(κy, g). Then
verify the divisibility requirement:
e(λv · γv, λw · γw)/e(λy · γy, g) ?= e(γh, gτ (s)),
where λv = g(cid:31)k∈[N ] ck(t)vk(s), λw = g(cid:31)k∈[N ] ck(t)wk(s),
λy = g(cid:31)k∈[N ] ck(t)yk(s). Finally verify the β term:
e(γv · γw · γy, gβγ) ?= e(Λ, gγ).
3.3 Asymptotic Complexity and Security
In this section we analyze the asymptotic complexity of
our SNARK construction for polynomial circuits. We
also state the security of our scheme.
KeyGen: It is easy to see that the computation time of
KeyGen is O(n|Im| + nd + nN ) = O(dn).
Prove: Let T be the time required to compute the poly-
nomials ci(z) for i = 1, . . . , m and let ni be the degree
of the polynomial ci(z) for i = 1, . . . , m. The compu-
tation of each gci(z)vi(x) (similarly for gci(z)wi(x) and
gci(z)yi(x)) for i ∈ Im takes O(ni) time (speciﬁcally,
7 ·(cid:28) ni exponentiations are required to compute all the
770  23rd USENIX Security Symposium 
USENIX Association
proof), since one operation per coefﬁcient of ci(z) is re-
quired. Then multiplication of |Im| terms is required.
Therefore the total time required is
O(cid:31)T + (cid:30)i∈Im
ni + |Im|(cid:29) = O (T + dν) ,
where ν = maxi=1,...,m{ni} is the maximum degree
of the polynomials over the wires and since |Im| ≤
3d. To compute p(x, z), ﬁrst the degree d polynomials
vi(x), wi(x), yi(x) for i = 1, ..., m are parsed in time
O(dm). Then p(x, z) is computed according to Equa-
tion 1; each summation term is computed in time O(dν)
with naive bivariate polynomial multiplication and then
they are summed for total complexity of O(mdν). For
the division, note that p(x, z) has maximum degree in z
equal to 2ν and maximum degree in x equal to 2d. To
do the division, we apply “the change of variable trick”.
We set z = x2×(2d)+1 and therefore turn p(x, z) into
a polynomial of one variable x, namely the polynomial
p(x, x2×(2d)+1). Therefore the dividend now has maxi-
mum degree 2ν(4d + 1) + 2d while the divisor has still
degree d. By using FFT, we can do such division in
O(dν log(dν)) time. Therefore the total time for Prove is
O (T + dν log(dν) +mdν ).
Verify: The computation of each element gci(z)vi(x)
(resp. for gci(z)wi(x) and gci(z)yi(x)) for i = 1, . . . , N
takes O(ni) time, since one operation per coefﬁcient of
ci(z) is required. Then multiplication of N terms is re-
quired. Hence, the total time required is O((cid:28)i∈[N ] ni),
proportional to the size of the input and output.
We now have the following result. The involved as-
sumptions can be found in Appendix 6.1 and we provide
its proof of security in the full version of our paper [20].
Theorem 1 (Security of the SNARK for F) Let F be
a polynomial circuit with d multiplication gates. Let n be
an upper bound on the degrees of the polynomials on the
wires of F and let q = 4d + 4. The construction above is
a SNARK under the 2(n + 1)q-PKE, the (n + 1)q-PDH
and the 2(n + 1)q-SDH assumptions.
4 Efﬁcient SNARKs for Set Circuits
In this section, we show how to use the SNARK construc-
tion for polynomial circuits from the previous section to
build a SNARK for set circuits.
We ﬁrst deﬁne a mapping from sets to polynomials (see
Deﬁnition 5– such representation was also used in prior
work, e.g., the work of Kissner and Song [18]). Then we
express the correctness of the operations between two sets
as constraints between the polynomials produced from
this mapping (e.g., see Lemma 2). For a set operation to
be correct, these constraints must be satisﬁed simultane-
ously. To capture that, we represent all these constraints
with a circuit with loops, where a wire can participate in
more than one constraint (see Figure 3).
4.1 Expressing Sets with Polynomials
We ﬁrst show how to represent sets and set operations
with polynomials and polynomial operations. This repre-
sentation is key for achieving input-speciﬁc time, since
we can represent a set with a polynomial evaluated at a
random point (regardless of its cardinality). Given a set,
we deﬁne its characteristic polynomial.
Deﬁnition 5 (Characteristic polynomial) Let A be a
set of elements {a1, a2, . . . , an} in F. We deﬁne its char-
acteristic polynomial as A(z) = (z + a1) . . . (z + an).
We now show the relations between set operations and
polynomial operations. Note that similar relations were
used by Papamanthou et al. [22] in prior work.
Lemma 2 (Intersection constraints) Let A, B and I be
three sets of elements in F. Then I = A ∩ B iff there exist