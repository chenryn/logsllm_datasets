title:Surakav: Generating Realistic Traces for a Strong Website Fingerprinting
Defense
author:Jiajun Gong and
Wuqi Zhang and
Charles Zhang and
Tao Wang
2
2
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Surakav: Generating Realistic Traces for a Strong
Website Fingerprinting Defense
Jiajun Gong*, Wuqi Zhang*, Charles Zhang*, Tao Wang†
*The Hong Kong University of Science and Technology
{jgongac, wzhangcb, charlesz}@cse.ust.hk, PI:EMAIL
†Simon Fraser University
Abstract—Website Fingerprinting (WF) attacks utilize size and
timing information of encrypted network trafﬁc to infer the user’s
browsing activity, posing a great threat to privacy-enhancing
technologies like Tor; nevertheless, Tor has not adopted any
defense because existing defenses are not convincing enough to
show their effectiveness. Some defenses have been overcome by
newer attacks; other defenses are never implemented and tested
in the real open-world scenario.
In this paper, we propose Surakav, a tunable and practical
defense that is effective against WF attacks with reasonable
overhead. Surakav makes use of a Generative Adversarial Net-
work (GAN) to generate realistic sending patterns and regulates
buffered data according to the sampled patterns. We implement
Surakav and evaluate it on the live Tor network. Experiments
show that Surakav is able to reduce the attacker’s true positive
rate by 57% with 55% data overhead and 16% time overhead,
saving 42% data overhead compared to FRONT. In the heavy-
weight setting, Surakav outperforms the strongest known defense,
Tamaraw, requiring 50% less overhead in data and time to lower
the attacker’s true positive rate to only 8%. We also show that
two existing defenses, Walkie-Talkie and TrafﬁcSliver, can be
fortiﬁed with our GAN-based trace generator.
Index Terms—Tor; privacy; website ﬁngerprinting;
trafﬁc
analysis; generative adversarial network
I. INTRODUCTION
More and more people have been turning to privacy-
enhancing communication tools like Tor to access the internet,
so that they may be protected from an increasing threat of
network surveillance and censorship. Tor protects user privacy
by establishing a three-node path between the user and the
server where ﬁxed-sized packets (also known as cells) are
encrypted and transmitted [1]. Any single node on this path
cannot simultaneously learn the identity of the user and the
server. However, a local eavesdropper can launch a trafﬁc
analysis attack, known as Website Fingerprinting (WF), to
deanonymize the user. They train a classiﬁer that exploits size
and timing information of network traces to guess which page
the user is visiting. WF attacks have shown increasingly high
success rates on attacking Tor [2]–[7].
Designing a usable defense is rather challenging. Defenses
solely relying on adding random noise are not sufﬁciently
strong against
the best WF attacks [8], [9]. The highly-
effective ones, however, either require unreasonable assump-
tions or incur high overhead, signiﬁcantly impeding their
adoption. Speciﬁcally, they use predeﬁned patterns to send
packets that have the following limitations:
• Prior knowledge on webpages. Some defenses require
knowledge of how each page is loaded so that
they
can compute a uniform sending pattern for a group
of pages [2], [10]. This assumption makes their de-
ployability questionable since most websites are up-
dated frequently. Moreover, maintaining and distributing
a database of real sending patterns could greatly burden
the Tor network.
• A ﬁxed pattern for all pages. These defenses force
all pages to use the same pattern, sending packets in a
constant rate [11]–[13]. They ignore the different char-
acteristics of loading different pages, making it hard to
lower their overhead.
To solve these limitations, we propose a novel defense
Surakav that sends packets through various self-generated
sending patterns. 1 Surakav is practical to use in that it does not
require any prior knowledge on the webpages to be loaded. It
makes use of a generator that can output inﬁnite non-repeated
sending patterns. We achieve this by training a well-designed
Generative Adversarial Network (GAN) to mimic realistic
trafﬁc patterns of different webpages. To effectively reduce
the overhead,
instead of using ﬁxed sending patterns, we
dynamically adjust the patterns based on the size of buffered
data during a loading process. Our generated sending patterns
are highly realistic, such that they can be recognized as the
intended class with 90% accuracy. The diversity of sending
patterns and the randomness of real-time modiﬁcations make
each load appear different, even for the same webpage, largely
contributing to the effectiveness of our defense.
To show that our defense is fully deployable, we implement
it and test it on the live Tor network. Our results show that
for the ﬁrst time, we are able to outperform the strongest
known defense, Tamaraw [13], but with much less overhead:
we require 50% less overhead in data and time to reduce
the true positive rate of DF [5] to 8% while Tamaraw only
reduces it to 13%. If we tune down the overhead of our
defense further, we outperform the state-of-the-art lightweight
defense, FRONT [9], with 42% less dummy data and a similar
protection rate.
We summarize the contributions of our paper as follows:
1The Surakav, also known as Anna’s hummingbird, can repeatedly alter its
coloration with small movements.
© 2022, Jiajun Gong. Under license to IEEE.
DOI 10.1109/SP46214.2022.00096
1558
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:20 UTC from IEEE Xplore.  Restrictions apply. 
the client is visiting if any. The attacker’s success rate is
measured in True Positive Rate (TPR) and False Positive Rate
(FPR). TPR is deﬁned as the percentage of correctly classiﬁed
monitored traces over the total number of monitored traces.
FPR is deﬁned as the percentage of the non-monitored traces
that are misclassiﬁed as monitored ones.
Fig. 1: The WF threat model.
B. WF Attacks
• We propose a GAN-based novel WF defense, Surakav,
based on trace generation. Surakav can be easily tuned
for different security levels.
• We conduct a full
implementation evaluation for our
defense as well as the state-of-the-art defenses in the
real world. Results show that our defense outperforms the
other defenses in the open-world scenario. Our defense
also leaks less information than any other defense.
• We ﬁnd that trace generation can also be used to fortify
other defenses, including TrafﬁcSliver [14] and Walkie-
Talkie [10].
We organize the rest of the paper as follows. We introduce
background and related work in Section II and the preliminar-
ies in Section III. We propose our new defense in Section IV.
We evaluate our defense extensively in Section V. We further
explore how our defense could help fortify other defenses in
Section VI. Finally, we discuss relevant issues in Section VII
and conclude our work in Section VIII.
II. BACKGROUND AND RELATED WORK
A. Threat Model
When a client uses Tor to load a webpage, each cell will
traverse three different nodes (Entry, Middle, and Exit) before
reaching the destination. As shown in Figure 1, we consider a
local attacker between the client and the entry node who tries
to infer the user’s browsing history. The attacker eavesdrops
on the wire and observes the trafﬁc pattern. We assume the
attacker does not try to compromise the encryption of Tor
or modify any packets. We further assume that the client
visits one page at a time so that the attacker knows the start
and end of a page load. This creates a harder scenario for a
defense since attacking under a multi-tab browsing scenario is
considered to be difﬁcult [9], [15].
To launch a WF attack, the attacker ﬁrst trains a classiﬁer
based on labeled network traces. Then, the attacker obtains
the user’s traces and queries the classiﬁer. The attacker’s
performance can be evaluated in two different scenarios.
1) Closed-World Scenario: In this scenario, we assume the
client only visits webpages from a monitored list determined
by the attacker. The attacker’s goal is to classify the traces into
the correct webpages. Here, “accuracy” refers to the proportion
of correctly classiﬁed instances.
2) Open-World Scenario: In the open-world scenario, the
client visits not only monitored webpages, but also non-
monitored pages that the attacker may not have seen before.
The attacker tries to ﬁnd out which speciﬁc monitored page
Early WF attacks used machine learning models with hand-
crafted features as input [2]–[4], [16]–[18]. Later, deep learn-