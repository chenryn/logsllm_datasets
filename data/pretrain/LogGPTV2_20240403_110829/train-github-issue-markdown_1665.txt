I want to have 2 parallel VGG models that share an input. I can do this with:
    modelA = vgg16.VGG16(include_top=True,weights='imagenet')
    modelB = vgg16.VGG16(include_top=True,weights='imagenet')
    y = modelB(modelA.input)
    modelC = Model(inputs=modelA.input,outputs=[modelA.output,y])
The top of the plotted model looks like:  
![mergedvgg](https://user-
images.githubusercontent.com/7025717/27660801-7f89bb10-5c1d-11e7-92ec-964f3c73907d.png)  
The layers in the left-hand side behave as normal and can be accessed with
modelC.layers[1] through modelC.layers[22].
The right-hand side treats the entire 2nd VGG model as being compressed into
one layer, accessed in modelC.layers[23]. This seems okay because this layer
23 has its own array of layers, which seem accessible as normal, e.g.
modelC.layers[23].layers[2].name will give 'block1_conv2'.
... eventually, I am using the mean output of a layer to compute a gradient.
This works fine with the left VGG model:
    loss = K.mean(modelC.layers[2].output[:,:,:,:])
but if I try to access a layer in the right VGG model:
    loss = K.mean(modelC.layers[23].layers[2].output[:,:,:,:])
I get a 'Disconnected Input' error:
    File "C:\Users\Sam\Anaconda2\lib\site-packages\theano\gradient.py", line 526, in handle_disconnected
        raise DisconnectedInputError(message)
    DisconnectedInputError:  
I don't know if this is a bug because it seems like it should work. An
alternative solution would be to be able to incorporate the 2nd VGG model
without it being compressed, but I cannot find a way to do that with the
functional API.