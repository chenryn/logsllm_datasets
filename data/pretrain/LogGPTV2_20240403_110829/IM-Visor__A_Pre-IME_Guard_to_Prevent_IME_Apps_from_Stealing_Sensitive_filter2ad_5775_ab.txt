IMEs. A current defense with the post-IME nature intends to
discover sensitive input by analyzing the output of an IME app
and cleans it by a roll-back. However, an IME app can fool the
defense by committing a replaced text (see Preﬁx-substitution
Attack shortly) or leaking out sensitive keystrokes with a
colluding app before the analysis is triggered (see Colluding
Attack shortly). In Section I, we have pointed out that all
the designs with the post-IME nature are subject to the above
Fig. 1: Preﬁx-substitution attack. I-Box uses a policy engine to
search substring in the output of an IME app. Malicious IME
apps can obfuscate sensitive string into non-sensitive string to
fool I-Box and leak it out to a remote server.
Fig. 2: Sandbox bypassing attack. The pink and blue color
represent two different state of an IME app. As shown in blue
color, after the roll-back, an IME app can still access the user
app’s data buffer for sensitive text by some revisit APIs and
leak it out to a remote server at the beginning of next input
transaction.
two attacks. And a key motivation of our work is that we
intend to build a more secure defense to get rid of the above
attacks. Besides, we discover a new data leakage path from a
user app to an IME app by some revisit APIs (see Sandbox
Bypassing Attack shortly). So the “revisit” is another threat
to our security concerns.
It is possible that a malicious user app can collude with an
IME app to steal sensitive keystrokes. However, we consider
this out of the scope of this paper. Because a user app can get
whatever a user types in a soft keyboard, it is unnecessary to
steal sensitive keystrokes through an hacked IME app. Besides,
from an attacker’s point of view, it is much more easier to
attack a single IME app than to attack all kinds of user apps
that often use an IME keyboard. If an IME app is hacked,
all user apps are hacked since an IME app processes all of a
user’s input in modern mobile devices.
Preﬁx-substitution Attack and Colluding Attack. Figure
1 shows how the preﬁx-substitution attack case works. The
policy engine in I-Box is an status machine to detect whether
the output string of an IME app is sensitive. Assuming the
current input is sensitive data, but IME app developers use
obfuscated code to replace the preﬁx of the typed string with
a non-sensitive one, then the policy engine is fooled and the
roll-back will not be triggered. So the sensitive data obtained
by the IME will not be cleaned and can still be sent to a remote
server. To launch a colluding attack, as a post-IME design
won’t do anything until it gets some output from the IMEs, an
IME app just needs to send sensitive text to a colluding app
before it commits any text to a user app. So it is really easy
to launch the above attacks in the real world.
Sandbox Bypassing Attack. The “revisit” threat is discov-
147
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
ered by us and I-Box was not aware of it yet. It is a threat
for both post-IME and pre-IME defense. From the view of
the I-Box, it regards the user input process as a transaction,
which begins when a user starts to enter the input and ends
when the input session ends. When a user is typing sensitive
data by a third party IME, the current transaction will be
marked as sensitive by I-Box. During this sensitive transaction,
I-Box believes that the restriction of network and roll-back
can prevent sensitive keystroke leakage. However, the sensitive
text existed not only in an IME app but also in the buffer of
a user app. The roll-back only cleaned the sensitive text in
the IME app but remains the one in the user app. In light of
the fact that some functions like getTextBeforeCursor
in BaseInputConnection can be used to revisit the buffer of
a user app, an IME app can launch a sandbox bypassing
attack by calling revisit APIs at the beginning of the next
new transaction. If the user app does not ﬂush the buffer
yet, the IME can obtain the sensitive text committed in the
last transaction. As a result, the sandbox of I-Box has been
bypassed. Figure 2 shows how the sandbox bypassing attack
case works. The pre-IME nature helps us focus on the data
path between user apps and IME apps, which guided us to
discover this attack.
B. Assumptions
As third party IME apps may cause sensitive keystroke
leakage, we consider all
third party IMEs (i.e., malicious
and PHAs) as untrusted. The goal of IM-Visor is to prevent
IME apps from accessing data when a user types sensitive
keystrokes, so we assume that the user app which employs an
IME app for keystroke translation is trusted. Although there are
lots of attacks targeted at user apps [30], [35], such threats are
not in the scope of this work. We assume that the Android
System Server and the kernel are not on the target list of
attackers. As IM-Visor is a security scheme based on Trust-
Zone, so we assume the device is equipped with TrustZone
and the function of TrustZone has been correctly implemented
on the device. Considering TrustZone is an isolation solution
with hardware support, we assume the hardware of the device
is trusted. Hardware attacks which may prevent the normal
operation of TrustZone are out of the scope of this work.
Although OS is not on the list of attack target, considering
the following facts, we still use TrustZone to implement
our defense. First, TrustZone is widely deployed. Data from
Samsung shows that millions of modern devices are outﬁtted
with TrustZone [9]. We hypothesize that more and more
devices will use the ARM TrustZone in the future. Second,
the Trusted Execution Enviroment (TEE) is already deployed,
there seems less a need to reinvent wheels. Comparing to
add system or kernel code, it is really more convenient to
put our critical code as a trustlet in secure world and only
put some hooks in Android. Third, it ensures minimum kernel
modiﬁcation. In our design, only a TrustZone driver is needed
to be installed in kernel. No kernel instrumentation is needed.
Forth, no signiﬁcant impact on system overheads by testing
with most popular IMEs. Fifth, TrustZone does reduce our
attack surface. For example, using a gravity sensor to launch
a side channel attack is possible when a user types on a soft
keyboard. TrustZone can conﬁgure related hardware as secure
to thwart such attack.
Fig. 3: IM-Visor consists of the STIE in secure world, a new
service named commit-porxy, a daemon thread named replay
executor in event subsytem and some hooks.
IV. OVERVIEW
Figure 3 shows the system components of IM-Visor, which
includes a Secure Typing Isolation Environment (STIE) in
secure world, a system service named commit-porxy, a daemon
thread named replay executor in the event subsystem and some
hooks. The STIE includes two parts: secure hardware drivers
and a trustlet named pre-IME guard. As mentioned in Section
I, in order to create a defense with the pre-IME nature, there
are three main challenges: “Isolation ahead of IME translation
issue”, “Trusted path issue”, “Beneﬁts retaining issue”. Now
we give a high-level overview of how IM-Visor resolves them.
Isolation ahead of IME Translation Issue. In existing
mobile devices, an IME app is the ﬁrst entity to receive user
touch events, and then translates keystrokes to text. To achieve
a pre-IME design, we must recognize sensitive keystrokes and
isolate them before an IME app could access them.
One possible way is to leverage TrustZone to implement a
trusted IME app with a trusted GUI. When users intend to type
sensitive data, let them switch to the trusted IME. However,
this approach brings two disadvantages. First, it is a burden
for users to constantly keep this switch in mind. Second, a
friendly trusted GUI means a lot of extra coding work, such
as efﬁcient graphics rendering. So we have to look for a new
approach.
In the light of the fact that keystrokes will be preprocessed
by the event subsystem before an IME app could access them,
we put some hooks in event subsystem and leverage TrustZone
to achieve the pre-IME nature. Subsystem hooks make SMC
calls and jump to secure world. In secure world, IM-Visor
provides the STIE in which the touch screen and display
devices are only controlled by secure world. For touch input,
we implement a separate touch driver in secure world. Hence,
whenever a touch input interrupt arrives, IM-Visor would be
the ﬁrst to access keystrokes prior to the execution of any IME
app code. The pre-IME Guard receives keystrokes, translates
them and analyzes whether the char string is sensitive. Con-
cerning about the ﬂexibility and efﬁciency, the STIE will be
created only when a user intends to type in a soft keyboard
(see Section V-B1).
Compared to the development of an trusted IME app, the
148
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
STIE helps IM-Visor avoid the above two disadvantages. First,
as the STIE can be initialized automatically when a user
intends to type in a soft keyboard, a user does not have to
keep the keyboard switch in mind. Second, because the STIE
reuses the UI of a soft keyboard and isolates touch input, no
trusted GUI lib is needed.
Trusted Path Issue. As mentioned in Section I, after the
isolation of sensitive keystrokes, we must build a trusted path
from the pre-IME Guard to a user app [5], [36]. Obviously,
we cannot use untrusted IME apps to commit sensitive text
as this violates our security principle. So we have to ﬁnd
another data path isolated from IME apps. In light of the
fact that TextView of a user app uses a local binder named
IInputContext.Stub to receive text, we put some hooks
in the IMF and create a new connection between a user app and
our newly added service named commit-proxy. In other words,
we create a new inter-process communication (IPC) between
a user app and the commit-proxy to commit sensitive text.
Beneﬁts Retaining Issue. As an IME app does provide
convenience and extra beneﬁts, in a pre-IME design, we must
retain the value added feature for user apps. The key idea of
IM-Visor is to replay a keystroke as soon as the pre-IME Guard
determines it as non-sensitive and let the IMEs work for non-
sensitive keystrokes. To achieve this, we design replay executor
running in System Server process for replay. Speciﬁcally, the
Replay Executor gets touch event coordinates from the pre-
IME Guard and encapsulates them into Android touch event
format, then triggers event subsystem to dispatch events to IME
apps. Another issue related to replay is that we must replay
non-keystroke touch events for the other apps.
V. DESIGN AND IMPLEMENTATION
A. Workﬂow of IM-Visor
As a pre-IME design, IM-Visor always recognizes and
isolates sensitive keystrokes before the IMEs could access
them. To achieve this, whenever a user intends to type in a
soft keyboard, the STIE will be initialized to intercept touch
events and analyze whether it is a sensitive keystroke. From
the perspective of how touch events (i.e., keystrokes or non-
keystrokes) are handled, ﬁgure 4 shows the workﬂow of IM-
Visor after the STIE has been initialized. The red data path
indicates the trusted path from touch screen to a user app. On
the other hand, as shown in green color, when non-sensitive
touch events (i.e., non-sensitive keystrokes or non-keystrokes)
are found, the pre-IME Guard asks the Replay Executor to
replay the corresponding touch event to the targeted apps (e.g.,
IME apps or other apps).
B. Address Challenge 1: Isolation ahead of IME Translation
At ﬁrst, let’s recall some backgrounds about the IMF and
event subsystem in Section II-A. A keystroke would be prepro-
cessed by event subsystem before any IME app could access it.
Speciﬁcally, TouchInputMapper in event subsystem is the
class for touch event processing. InputMethodManagerService
(IMMS) in the IMF is a global system service that manages
the interaction across IME apps and user apps. Anytime a user
app requests a soft keyboard, IMMS would ask an IME app
to show a soft keyboard by calling showSoftInput.
Fig. 4: Workﬂow and data paths under the IM-Visor protection.
For sensitive keystrokes as shown in red color, a trusted path
from the secure touch screen to a user app is created by
the STIE and commit-proxy. For non-sensitive keystrokes, the
Replay Executor dispatches them to the targeted IME app.
1) STIE Initialization: The primary technical challenge of
the STIE initialization is guaranteeing that IM-Visor is always
aware of when a user is typing in a soft keyboard prior to the
execution of any IME app code. If IM-Visor can create the
STIE as soon as a user ﬁrstly puts his or her ﬁnger on a soft
keyboard in normal world, then the pre-IME Guard is able to
intercept user keystrokes from the start of input and the pre-
IME nature can be ensured. To address this challenge, the key
idea is to check whether a soft keyboard has been shown up
each time a touch event arrives in event subsystem. In modern
mobile devices with a touch screen, we assume that a user
intends to type text when he or she taps on touch screen after
a soft keyboard has been shown up. And the keyboard display
information is maintained in secure world.
Figure 5 shows how we initialize the STIE. The ﬁrst user
tap on the edit box of a user app will ask IMMS to start up an
IME app. This process in fact invokes two hooks: sync and
showSoftInput. IM-Visor will ignore the touch but update
keyboard display information in secure world. At this moment,
the STIE has not been initialized yet. Then the user may taps
on a soft keyboard. This behaviour of course invokes sync
again. At this moment, the STIE must be initialized, because
taps on an IME soft keyboard is obviously a keystroke. We
reconﬁgure peripherals like display controller and touch screen
as secure. Then the pre-IME Guard receives touch events
directly through secure touch screen.
2) Touch Event Processing and Keystroke Translation: In
order to intercept user keystrokes in secure world, the touch
screen is reconﬁgured to be only accessed by secure world,
and a separate touch screen driver is implemented in secure
world. As a result, anytime a touch interrupt arrives, the driver
will be the ﬁrst to receive user touch coordinates. In order to
ﬁgure out which keystroke a user types, we need two pieces of
149
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
screen gets the touch point C(x, y). The preloaded keyboard
layout helps the pre-IME Guard determine whether this point
falls in the geo range of “a” key button, which is deﬁned by
the top-left point A(x1, y1) and the bottom-right point B(x2,
y2). If it falls in, the pre-IME Guard translate the keystroke as
a character “a”.
In order
3) Sensitive Keystroke Analysis:
to analyze
whether keystrokes are sensitive, we accept the I-BOX’s policy
engine, which enforces a speciﬁc context-based policy and a
speciﬁc preﬁx-matching policy. In the IMF, text ﬁelds in user
apps have different types, such as dates and passwords. IM-
Visor can leverage these information to decide whether current
input is sensitive or not. Speciﬁcally, the hook startInput
in IMMS can provide information of text ﬁelds. If the current
edit box works for passwords (or something sensitive like
that), the pre-IME Guard will know it from the start of a soft
keyboard display and treat all following keystrokes as sensitive.
This is called the “Context-based Policy”. User activities such
as logging in is a typical case that IM-Visor can enforce
such policy. For general user input stream, after translating
keystrokes to string, IM-Visor leverages preﬁx-matching to
search all possible substrings when a new char is typed [6].
The sensitive data set used for searching is deﬁned by users.
As a user could consider large numbers of data instances as
sensitive, IM-Visor uses a trie-like structure to maintain it in
secure world. This is called the “Preﬁx-matching Policy”.
C. Address Challenge 2: Trusted Path