(400 rows)  
```  
响应速度1.7毫秒。(理由很简单，因为每一个层级都是索引命中，结合PG的cluster特性(按c1排序存储)，可以降低块数，再次提高性能)  
```  
set enable_hashjoin=off;  
set enable_mergejoin=off;  
set max_parallel_workers_per_gather=0;  
                                                                     QUERY PLAN  
-----------------------------------------------------------------------------------------------------------------------------------------------------  
 CTE Scan on search_graph  (cost=611.63..633.63 rows=1100 width=76) (actual time=0.058..1.632 rows=400 loops=1)  
   CTE search_graph  
     ->  Recursive Union  (cost=0.56..611.63 rows=1100 width=76) (actual time=0.055..1.331 rows=400 loops=1)  
           ->  Limit  (cost=0.56..87.76 rows=100 width=76) (actual time=0.052..0.137 rows=100 loops=1)  
                 ->  Index Scan using a_pkey on a g  (cost=0.56..230332.47 rows=264166 width=76) (actual time=0.051..0.104 rows=100 loops=1)  
                       Index Cond: (c1 = 31208)  
           ->  Limit  (cost=0.56..49.09 rows=100 width=76) (actual time=0.071..0.245 rows=75 loops=4)  
                 ->  Nested Loop  (cost=0.56..40596743.28 rows=83666633 width=76) (actual time=0.070..0.231 rows=75 loops=4)  
                       ->  WorkTable Scan on search_graph sg  (cost=0.00..22.50 rows=333 width=40) (actual time=0.005..0.005 rows=1 loops=4)  
                             Filter: (depth   Index Scan using a_pkey on a g_1  (cost=0.56..118143.31 rows=251251 width=40) (actual time=0.079..0.221 rows=100 loops=3)  
                             Index Cond: (c1 = sg.c2)  
                             Filter: (c1 <> ALL (sg.path))  
 Planning Time: 0.319 ms  
 Execution Time: 1.736 ms  
(16 rows)  
```  
##### 图式搜索UDF封装例子  
将冗长的SQL封装成UDF，可以简化应用调用的接口。  
##### 1、UDF1 ，N度搜索, 返回记录  
```  
create or replace function graph_search1(  
  IN i_root int,                       -- 根据哪个节点开始搜  
  IN i_depth int  default 99999,       -- 搜索层级、深度限制  
  IN i_limit int8 default 2000000000,  -- 限制每一层返回的记录数  
  IN i_weight float8 default 0,        -- 限制权重  
  OUT o_path int[],                    -- 输出：路径, ID 组成的数组  
  OUT o_point1 int,                    -- 输出：点1 ID  
  OUT o_point2 int,                    -- 输出：点2 ID  
  OUT o_link_prop jsonb,               -- 输出：当前两点之间的连接属性  
  OUT o_depth int                      -- 输出：当前深度、层级  
) returns setof record as $$  
declare  
  sql text;  
begin  
sql := format($_$  
WITH RECURSIVE search_graph(  
  c1,     -- 点1  
  c2,     -- 点2  
  prop,   -- 当前边的属性  
  depth,  -- 当前深度，从1开始  
  path   -- 路径，数组存储  
) AS (  
        select c1,c2,prop,depth,path from (  
        SELECT                               -- ROOT节点查询  
          g.c1,                              -- 点1  
          g.c2,                              -- 点2  
          g.prop,                            -- 边的属性  
          1 depth,                           -- 初始深度=1  
          ARRAY[g.c1] path                  -- 初始路径  
        FROM a AS g  
        WHERE  
          c1 = %s                                                    -- ROOT节点=?  
          AND coalesce((g.prop->>'weight')::float8,0) >= %s          -- 相关性权重  
          ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit %s                           -- 每个层级限制多少条？  
        ) t  
      UNION ALL  
        select c1,c2,prop,depth,path from (  
        SELECT                               -- 递归子句  
          g.c1,                              -- 点1  
          g.c2,                              -- 点2  
          g.prop,                            -- 边的属性  
          sg.depth + 1 depth,                -- 深度+1  
          path || g.c1 path                 -- 路径中加入新的点  
        FROM a AS g, search_graph AS sg      -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2                       -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))                      -- 防止循环  
          AND sg.depth >'weight')::float8,0) >= %s          -- 相关性权重  
          ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit %s                           -- 每个层级限制多少条？  
        ) t  
)  
SELECT path||c2 as o_path, c1 as o_point1, c2 as o_point2, prop as o_link_prop, depth as o_depth  
FROM search_graph;                           -- 查询递归表，可以加LIMIT输出，也可以使用游标  
$_$, i_root, i_weight, i_limit, i_depth, i_weight, i_limit  
);  
return query execute sql;  
end;  
$$ language plpgsql strict;  
alter function graph_search1 set enable_hashjoin=off ;  
alter function graph_search1 set enable_mergejoin=off ;  
alter function graph_search1 set max_parallel_workers_per_gather=0 ;  
```  
使用举例：  
```  
postgres=# select * from graph_search1(31208, 3, 100, 0);  
             o_path             | o_point1 | o_point2 | o_link_prop | o_depth  
--------------------------------+----------+----------+-------------+---------  
 {31208,48457}                  |    31208 |    48457 |             |       1  
 {31208,13510}                  |    31208 |    13510 |             |       1  
 {31208,40244}                  |    31208 |    40244 |             |       1  
 {31208,35727}                  |    31208 |    35727 |             |       1  
 {31208,27956}                  |    31208 |    27956 |             |       1  
 {31208,5247}                   |    31208 |     5247 |             |       1  
......  
 {31208,48457,2885,33117,6646}  |    33117 |     6646 |             |       4  
 {31208,48457,2885,33117,20697} |    33117 |    20697 |             |       4  
 {31208,48457,2885,33117,37024} |    33117 |    37024 |             |       4  
 {31208,48457,2885,33117,45377} |    33117 |    45377 |             |       4  
 {31208,48457,2885,33117,13240} |    33117 |    13240 |             |       4  
 {31208,48457,2885,33117,22473} |    33117 |    22473 |             |       4  
 {31208,48457,2885,33117,10808} |    33117 |    10808 |             |       4  
 {31208,48457,2885,33117,13325} |    33117 |    13325 |             |       4  
(400 rows)  
postgres=# explain analyze select * from graph_search1(31208, 3, 100, 0);  
                                                      QUERY PLAN  
-----------------------------------------------------------------------------------------------------------------------  
 Function Scan on graph_search1  (cost=0.25..10.25 rows=1000 width=76) (actual time=166.703..166.715 rows=400 loops=1)  
 Planning Time: 0.128 ms  
 Execution Time: 166.760 ms  
(3 rows)  
```  
##### 2、UDF2，N度搜索, 返回游标  
```  
create or replace function graph_search2(  
  IN i_root int,                       -- 根据哪个节点开始搜  
  IN i_res name,                       -- 游标名  
  IN i_depth int  default 99999,       -- 搜索层级、深度限制  
  IN i_limit int8 default 2000000000,  -- 限制每一层返回的记录数  
  IN i_weight float8 default 0         -- 限制权重  
) returns refcursor as $$  
declare  
  sql text;  
  res refcursor := i_res;  
begin  
sql := format($_$  
WITH RECURSIVE search_graph(  
  c1,     -- 点1  
  c2,     -- 点2  
  prop,   -- 当前边的属性  
  depth,  -- 当前深度，从1开始  
  path   -- 路径，数组存储  
) AS (  
        select c1,c2,prop,depth,path from (  
        SELECT                               -- ROOT节点查询  
          g.c1,                              -- 点1  
          g.c2,                              -- 点2  
          g.prop,                            -- 边的属性  
          1 depth,                           -- 初始深度=1  
          ARRAY[g.c1] path                  -- 初始路径  
        FROM a AS g  
        WHERE  
          c1 = %s                                                    -- ROOT节点=?  
          AND coalesce((g.prop->>'weight')::float8,0) >= %s          -- 相关性权重  
          ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit %s                           -- 每个层级限制多少条？  
        ) t  
      UNION ALL  
        select c1,c2,prop,depth,path from (  
        SELECT                               -- 递归子句  
          g.c1,                              -- 点1  
          g.c2,                              -- 点2  
          g.prop,                            -- 边的属性  
          sg.depth + 1 depth,                -- 深度+1  
          path || g.c1 path                 -- 路径中加入新的点  
        FROM a AS g, search_graph AS sg      -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2                       -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))                      -- 防止循环  
          AND sg.depth >'weight')::float8,0) >= %s          -- 相关性权重  
          ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit %s                           -- 每个层级限制多少条？  
        ) t  
)  
SELECT path||c2 as o_path, c1 as o_point1, c2 as o_point2, prop as o_link_prop, depth as o_depth  
FROM search_graph;                           -- 查询递归表，可以加LIMIT输出，也可以使用游标  
$_$, i_root, i_weight, i_limit, i_depth, i_weight, i_limit  
);  
open res for execute sql;  
return res;  
end;  
$$ language plpgsql strict;  
alter function graph_search2 set enable_hashjoin=off ;  
alter function graph_search2 set enable_mergejoin=off ;  
alter function graph_search2 set max_parallel_workers_per_gather=0 ;  
```  
使用举例，  
```  
postgres=# begin;  
BEGIN  
postgres=# select * from graph_search2(31208, 'cur1', 3, 100, 0);  
 graph_search2  
---------------  
 cur1  
(1 row)  
postgres=# fetch 10 from cur1;  
    o_path     | o_point1 | o_point2 | o_link_prop | o_depth  
---------------+----------+----------+-------------+---------  
 {31208,48457} |    31208 |    48457 |             |       1  
 {31208,13510} |    31208 |    13510 |             |       1  
 {31208,40244} |    31208 |    40244 |             |       1  
 {31208,35727} |    31208 |    35727 |             |       1  
 {31208,27956} |    31208 |    27956 |             |       1  
 {31208,5247}  |    31208 |     5247 |             |       1  
 {31208,18618} |    31208 |    18618 |             |       1  
 {31208,2597}  |    31208 |     2597 |             |       1  
 {31208,33921} |    31208 |    33921 |             |       1  
 {31208,4054}  |    31208 |     4054 |             |       1  