display(path+".value", v.Elem())
}
default: // basic types, channels, funcs
fmt.Printf("%s = %s\n", path, formatAtom(v))
}
}
让我们针对不同类型分别讨论。
Slice和数组： 两种的处理逻辑是一样的。Len方法返回slice或数组值中的元素个数，Index(i)
活动索引i对应的元素，返回的也是一个reflect.Value；如果索引i超出范围的话将导致panic异
常，这与数组或slice类型内建的len(a)和a[i]操作类似。display针对序列中的每个元素递归调
用自身处理，我们通过在递归处理时向path附加“[i]”来表示访问路径。
虽然reflect.Value类型带有很多方法，但是只有少数的方法能对任意值都安全调用。例如，
Index方法只能对Slice、数组或字符串类型的值调用，如果对其它类型调用则会导致panic异
常。
Display递归打印 433
gopl
结构体： NumField方法报告结构体中成员的数量，Field(i)以reflect.Value类型返回第i个成员
的值。成员列表也包括通过匿名字段提升上来的成员。为了在path添加“.f”来表示成员路径，
我们必须获得结构体对应的reflect.Type类型信息，然后访问结构体第i个成员的名字。
Maps: MapKeys方法返回一个reflect.Value类型的slice，每一个元素对应map的一个key。和
往常一样，遍历map时顺序是随机的。MapIndex(key)返回map中key对应的value。我们向
path添加“[key]”来表示访问路径。（我们这里有一个未完成的工作。其实map的key的类型并
不局限于formatAtom能完美处理的类型；数组、结构体和接口都可以作为map的key。针对这
种类型，完善key的显示信息是练习12.1的任务。）
指针： Elem方法返回指针指向的变量，依然是reflect.Value类型。即使指针是nil，这个操作
也是安全的，在这种情况下指针是Invalid类型，但是我们可以用IsNil方法来显式地测试一个空
指针，这样我们可以打印更合适的信息。我们在path前面添加“*”，并用括弧包含以避免歧
义。
接口： 再一次，我们使用IsNil方法来测试接口是否是nil，如果不是，我们可以调用v.Elem()来
获取接口对应的动态值，并且打印对应的类型和值。
现在我们的Display函数总算完工了，让我们看看它的表现吧。下面的Movie类型是在4.5节的
电影类型上演变来的：
type Movie struct {
Title, Subtitle string
Year int
Color bool
Actor map[string]string
Oscars []string
Sequel *string
}
让我们声明一个该类型的变量，然后看看Display函数如何显示它：
Display递归打印 434
gopl
strangelove := Movie{
Title: "Dr. Strangelove",
Subtitle: "How I Learned to Stop Worrying and Love the Bomb",
Year: 1964,
Color: false,
Actor: map[string]string{
"Dr. Strangelove": "Peter Sellers",
"Grp. Capt. Lionel Mandrake": "Peter Sellers",
"Pres. Merkin Muffley": "Peter Sellers",
"Gen. Buck Turgidson": "George C. Scott",
"Brig. Gen. Jack D. Ripper": "Sterling Hayden",
`Maj. T.J. "King" Kong`: "Slim Pickens",
},
Oscars: []string{
"Best Actor (Nomin.)",
"Best Adapted Screenplay (Nomin.)",
"Best Director (Nomin.)",
"Best Picture (Nomin.)",
},
}
Display("strangelove", strangelove)调用将显示（strangelove电影对应的中文名是《奇爱博
士》）：
Display strangelove (display.Movie):
strangelove.Title = "Dr. Strangelove"
strangelove.Subtitle = "How I Learned to Stop Worrying and Love the Bomb"
strangelove.Year = 1964
strangelove.Color = false
strangelove.Actor["Gen. Buck Turgidson"] = "George C. Scott"
strangelove.Actor["Brig. Gen. Jack D. Ripper"] = "Sterling Hayden"
strangelove.Actor["Maj. T.J. \"King\" Kong"] = "Slim Pickens"
strangelove.Actor["Dr. Strangelove"] = "Peter Sellers"
strangelove.Actor["Grp. Capt. Lionel Mandrake"] = "Peter Sellers"
strangelove.Actor["Pres. Merkin Muffley"] = "Peter Sellers"
strangelove.Oscars[0] = "Best Actor (Nomin.)"
strangelove.Oscars[1] = "Best Adapted Screenplay (Nomin.)"
strangelove.Oscars[2] = "Best Director (Nomin.)"
strangelove.Oscars[3] = "Best Picture (Nomin.)"
strangelove.Sequel = nil
我们也可以使用Display函数来显示标准库中类型的内部结构，例如 类型：
*os.File
Display递归打印 435
gopl
Display("os.Stderr", os.Stderr)
// Output:
// Display os.Stderr (*os.File):
// (*(*os.Stderr).file).fd = 2
// (*(*os.Stderr).file).name = "/dev/stderr"
// (*(*os.Stderr).file).nepipe = 0
可以看出，反射能够访问到结构体中未导出的成员。需要当心的是这个例子的输出在不同操
作系统上可能是不同的，并且随着标准库的发展也可能导致结果不同。（这也是将这些成员
定义为私有成员的原因之一！）我们甚至可以用Display函数来显示reflect.Value 的内部构造
（在这里设置为 的类型描述体）。 调用
*os.File Display("rV", reflect.ValueOf(os.Stderr))
的输出如下，当然不同环境得到的结果可能有差异：
Display rV (reflect.Value):
(*rV.typ).size = 8
(*rV.typ).hash = 871609668
(*rV.typ).align = 8
(*rV.typ).fieldAlign = 8
(*rV.typ).kind = 22
(*(*rV.typ).string) = "*os.File"
(*(*(*rV.typ).uncommonType).methods[0].name) = "Chdir"
(*(*(*(*rV.typ).uncommonType).methods[0].mtyp).string) = "func() error"
(*(*(*(*rV.typ).uncommonType).methods[0].typ).string) = "func(*os.File) error"
...
观察下面两个例子的区别：
var i interface{} = 3
Display("i", i)
// Output:
// Display i (int):
// i = 3
Display("&i", &i)
// Output:
// Display &i (*interface {}):
// (*&i).type = int
// (*&i).value = 3
在第一个例子中，Display函数调用reflect.ValueOf(i)，它返回一个Int类型的值。正如我们在
12.2节中提到的，reflect.ValueOf总是返回一个具体类型的 Value，因为它是从一个接口值提
取的内容。
Display递归打印 436
gopl
在第二个例子中，Display函数调用的是reflect.ValueOf(&i)，它返回一个指向i的指针，对应Ptr
类型。在switch的Ptr分支中，对这个值调用 Elem 方法，返回一个Value来表示变量 i 本身，
对应Interface类型。像这样一个间接获得的Value，可能代表任意类型的值，包括接口类型。
display函数递归调用自身，这次它分别打印了这个接口的动态类型和值。
对于目前的实现，如果遇到对象图中含有回环，Display将会陷入死循环，例如下面这个首尾
相连的链表：
// a struct that points to itself
type Cycle struct{ Value int; Tail *Cycle }
var c Cycle
c = Cycle{42, &c}
Display("c", c)
Display会永远不停地进行深度递归打印：
Display c (display.Cycle):
c.Value = 42
(*c.Tail).Value = 42
(*(*c.Tail).Tail).Value = 42
(*(*(*c.Tail).Tail).Tail).Value = 42
...ad infinitum...
许多Go语言程序都包含了一些循环的数据。让Display支持这类带环的数据结构需要些技巧，
需要额外记录迄今访问的路径；相应会带来成本。通用的解决方案是采用 unsafe 的语言特
性，我们将在13.3节看到具体的解决方案。
带环的数据结构很少会对fmt.Sprint函数造成问题，因为它很少尝试打印完整的数据结构。例
如，当它遇到一个指针的时候，它只是简单第打印指针的数字值。在打印包含自身的slice或
map时可能卡住，但是这种情况很罕见，不值得付出为了处理回环所需的开销。
练习 12.1： 扩展Displayhans，使它可以显示包含以结构体或数组作为map的key类型的值。
练习 12.2： 增强display函数的稳健性，通过记录边界的步数来确保在超出一定限制前放弃递
归。（在13.3节，我们会看到另一种探测数据结构是否存在环的技术。）
Display递归打印 437
gopl
12.4. 示例: 编码为S表达式
Display是一个用于显示结构化数据的调试工具，但是它并不能将任意的Go语言对象编码为通
用消息然后用于进程间通信。
正如我们在4.5节中中看到的，Go语言的标准库支持了包括JSON、XML和ASN.1等多种编码
格式。还有另一种依然被广泛使用的格式是S表达式格式，采用Lisp语言的语法。但是和其他
编码格式不同的是，Go语言自带的标准库并不支持S表达式，主要是因为它没有一个公认的
标准规范。
在本节中，我们将定义一个包用于将任意的Go语言对象编码为S表达式格式，它支持以下结
构：
42 integer
"hello" string (带有Go风格的引号)
foo symbol (未用引号括起来的名字)
(1 2 3) list (括号包起来的0个或多个元素)
布尔型习惯上使用t符号表示true，空列表或nil符号表示false，但是为了简单起见，我们暂时
忽略布尔类型。同时忽略的还有chan管道和函数，因为通过反射并无法知道它们的确切状
态。我们忽略的还有浮点数、复数和interface。支持它们是练习12.3的任务。
我们将Go语言的类型编码为S表达式的方法如下。整数和字符串以显而易见的方式编码。空
值编码为nil符号。数组和slice被编码为列表。
结构体被编码为成员对象的列表，每个成员对象对应一个有两个元素的子列表，子列表的第
一个元素是成员的名字，第二个元素是成员的值。Map被编码为键值对的列表。传统上，S表
达式使用点状符号列表(key . value)结构来表示key/value对，而不是用一个含双元素的列表，
不过为了简单我们忽略了点状符号列表。
编码是由一个encode递归函数完成，如下所示。它的结构本质上和前面的Display函数类似：
gopl.io/ch12/sexpr
func encode(buf *bytes.Buffer, v reflect.Value) error {
switch v.Kind() {
case reflect.Invalid:
buf.WriteString("nil")
case reflect.Int, reflect.Int8, reflect.Int16,
reflect.Int32, reflect.Int64:
fmt.Fprintf(buf, "%d", v.Int())
case reflect.Uint, reflect.Uint8, reflect.Uint16,
reflect.Uint32, reflect.Uint64, reflect.Uintptr:
示例: 编码S表达式 438
gopl
fmt.Fprintf(buf, "%d", v.Uint())
case reflect.String:
fmt.Fprintf(buf, "%q", v.String())
case reflect.Ptr:
return encode(buf, v.Elem())
case reflect.Array, reflect.Slice: // (value ...)
buf.WriteByte('(')
for i := 0; i  0 {
buf.WriteByte(' ')
}
if err := encode(buf, v.Index(i)); err != nil {
return err
}
}
buf.WriteByte(')')
case reflect.Struct: // ((name value) ...)
buf.WriteByte('(')
for i := 0; i  0 {
buf.WriteByte(' ')
}
fmt.Fprintf(buf, "(%s ", v.Type().Field(i).Name)
if err := encode(buf, v.Field(i)); err != nil {
return err
}
buf.WriteByte(')')
}
buf.WriteByte(')')
case reflect.Map: // ((key value) ...)
buf.WriteByte('(')
for i, key := range v.MapKeys() {
if i > 0 {
buf.WriteByte(' ')
}
buf.WriteByte('(')
if err := encode(buf, key); err != nil {
return err
}
buf.WriteByte(' ')
if err := encode(buf, v.MapIndex(key)); err != nil {
return err
}
buf.WriteByte(')')
}
buf.WriteByte(')')
default: // float, complex, bool, chan, func, interface
示例: 编码S表达式 439
gopl