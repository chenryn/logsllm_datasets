core on which the reference-clock thread runs, accounted for
by the inclusion of fmin and fmax in (1), means that the
untrusted OS has some latitude to manipulate our clock to
its advantage. As we will show on our test platform, how-
ever, for intervals [t0, t1] that are characteristic of how we
use the clock, this latitude is still inadequate for the attacker
to avoid the enclave detecting a page fault incurred by the
application thread during [t0, t1].
One exceptional case in which our clock will not meet
condition (1) is if the untrusted OS interrupts the reference
clock thread in [t0, t1]. Fortunately, it suﬃces for our pur-
poses to ensure condition (1) if the reference-clock thread
is not interrupted during [t0, t1] and, if it is interrupted, to
detect that interruption with high probability and set a ﬂag
indicating the interruption.
5.2 Intel TSX
To detect the interruption of the reference-clock thread by
the untrusted OS, D´ej`a Vu needs to leverage hardware con-
tracts that even system software cannot break. Our choice
for such a hardware contract is hardware transactional mem-
ory, speciﬁcally Intel TSX.
Intel TSX implements extensions to support atomic oper-
ation of critical regions of software. Once a program enters a
critical region enclosed within a hardware transaction, mod-
iﬁcations to data read by the critical region or fetching of
data modiﬁed within the critical region will cause the trans-
action to abort, after which the memory will roll back to
a state before entering the transaction. A feature that is
particularly of interest to the design of D´ej`a Vu is that a
transaction will abort if it is interrupted by the operating
system. This abort is enforced in hardware; even the most
privileged system software cannot avoid it [1]. Therefore, by
enclosing the execution of the reference-clock thread inside
a transaction, D´ej`a Vu can guarantee that interruption of
the thread will not go undetected: If the malicious OS at-
tempts to preempt the reference-clock thread, either by de-
livering hardware interrupts or by generating a system-level
exception, the interrupted transaction will abort immedi-
ately, which will be detected by the reference-clock thread
(by it following a fallback execution path).
5.3 Detailed Design
Our reference-clock thread continuously updates an en-
clave variable timer that represents the current clock time;
the application thread consults this timer to get the current
clock time C(t) when needed. Because timer is protected
by SGX in the enclave, the untrusted OS cannot read or
12alter it, and so its value cannot be directly manipulated by
the untrusted OS.
One subtlety in this design is that because the timer will
be frequently read by the application thread, it cannot be
included in the write-set of a hardware transaction; oth-
erwise the transaction will abort whenever timer is read.
Therefore, timer can be updated only outside transactions,
implying that detecting interruption of the reference-clock
thread will be (only) probabilistic. Moreover, there is a ten-
sion between the frequency with which the reference-clock
thread updates timer and the probability of it detecting
its interruption: On the one hand, updating the counter
frequently implies a lower ability to detect an interruption,
since the update requires executing outside the protection of
hardware transactions. On the other hand, executing within
a hardware transaction longer increases the likelihood of de-
tecting an interruption, but prevents updating timer fre-
quently, meaning its granularity will suﬀer.
To balance this tension, we randomize the number of cy-
cles that the reference-clock thread executes within a trans-
action prior to updating timer; see Fig. 2. More speciﬁcally,
the reference-clock thread runs in an endless loop: it ﬁrst ob-
tains a pseudo-random number from the hardware by issu-
ing rdrand instruction at the beginning of each loop, keeps
its least signiﬁcant bits and adds one (line 10), yielding a
pseudo-random value rand ∈ [1, N ], where N is a power of
2. In the example shown in Fig. 2, N is 8. At the end of each
loop, the reference-clock thread increments timer by rand.
The thread executes an inner loop of v cycles in duration
to make sure the execution of each outer loop is rand × v
cycles. To leverage the desired property of hardware transac-
tional memory, the reference-clock thread encloses the inner
loop inside a transaction (lines 7-14), which guarantees that
the execution of the inner loop cannot be disrupted with-
out being detected. Otherwise, a counter is incremented to
indicate the interruption (line 16).
One consequence of this randomization is that this clock
implementation can lag by up to N ticks; i.e., the left-hand
inequality in (1) must be weakened to
(cid:22) fmin × (t1 −t0)
v
(cid:23) − N ≤ C(t1) − C(t0)
However, the probability of a substantial lag is small, as-
suming rand is uniformly distributed in [1, N ], i.e.,
P(cid:18)C(t1)−C(t0)+ x  x)
= 1 −
x
N
5.4 Side-Channel Inferences on Clock Refer-
ences
Because timer cannot be written inside the transaction of
lines 7–14 of Fig. 2, the untrusted OS could induce a page
fault on the page containing timer to detect whenever timer
is accessed. In this way, the untrusted OS could measure the
real time between accesses to timer and use them to infer
what pathlets the application thread in the enclave executes.
To address this threat, D´ej`a Vu accesses a variable in
the same virtual page as timer within the transaction (in
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
unsigned int timer ; // global variable
unsigned int i n t e r r u p t e d; // global variable
void t i m e r _ t h r e a d()
{
unsigned int rand ;
while (1) {
if ( _xbegin () == _ X B E G I N _ S T A R T E D) {
__asm volatile (" rdrand %0\ n \ t "
:"= r "( rand ) ) ;
rand = ( rand & 0 x7 ) + 1;
for ( int i = 0; i < rand ; i ++) {
// tasks c o m p r i s i n g v cycles
}
_xend () ;
} else {
i n t e r r u p t e d += 1;
continue ;
}
timer += rand
}
}
Figure 2: Code snippet for the reference-clock thread.
Figure 3: System architecture of D´ej`a Vu. Blocks in gray
are untrusted, which include the untrusted components of
the processes and the entire OS kernel.
line 12).2 In this way, if the untrusted OS induces a page
fault when that page is accessed (e.g., in an eﬀort to per-
form the timing attack described above), then it aborts the
transaction with high probability, causing the interruption
to be detected.
6.
IMPLEMENTATION
The runtime architecture of D´ej`a Vu is illustrated in
Fig. 3. The application logic that runs inside the SGX en-
clave is contained inside one or more application threads,
which are accompanied by the reference-clock thread within
the same enclave. The threads are bound to dedicated CPU
cores by the untrusted OS. Failure of the untrusted OS to
do so will cause these threads to suﬀer more interruptions,
which will be detected by D´ej`a Vu and might result in
the shielded execution terminating itself (if its policy is to
do so). If the application itself is multi-threaded, only one
reference-clock per enclave is needed to protect all threads.
We implemented D´ej`a Vu by extending the LLVM frame-
work (v3.5.2). The workﬂow of D´ej`a Vu is illustrated
in Fig. 4. Speciﬁcally, a D´ej`a Vu library implements the
reference-clock thread and the code specifying the security
policy that reacts to AEX detections. The D´ej`a Vu library
code is compiled using the gcc compilerto an object ﬁle. The
2
To conﬁrm that another variable at virtual address vaddr lies
in the same virtual page as timer,
it suﬃces to check that
⌊vaddr /pageSize⌋ = ⌊&timer/pageSize⌋, where pageSize is the
smallest page size allowed by the processor in bytes.
13Figure 4: Workﬂow of D´ej`a Vu.
Figure 5: Integrating D´ej`a Vu with Linux SGX SDK.
application source code is compiled using Clang3, a front-end
to LLVM that compiles C code into LLVM intermediate rep-
resentation (IR). Our static analysis tool is implemented as
an LLVM IR optimization pass that instruments selected
basic blocks according to our criteria. The instrumentation
conducted by our extended Clang is diﬀerent in the training
mode and detection mode, which will be explained further in
Sec. 6.1 and Sec. 6.2. The output of the training mode con-
tains classiﬁer thresholds, which will be used in monitoring
the shielded execution in the detection mode.
6.1 Training Mode
Our extended Clang in the training mode instruments ev-
ery multi-sink by adding instructions to read the reference
clock, so that the execution time of each execution pathlet
will be measured by the training executables. It also instru-
ments every multi-sink predecessor to record the basic-block
identiﬁer, which is used to indicate which pathlet is taken.
The training executables are given a set of input values and
are run for multiple times. During the execution, the in-
strumented code records the time measurement of running
every pathlet in a large array and prints the records into
ﬁles at the very end of the training. The training ﬁle is
post-processed to obtain the mean and standard deviation
of the time measurement of each pathlet.
To measure the time spent in AEXs, we conducted the
following experiments. Recall that the time spent in an AEX
includes the time for an enclave exit and a context switch
into the kernel. So, to conservatively estimate the minimum
time needed by a malicious AEX, we measured only the time
for enclave exits, which can be approximated by the time
spent in empty OCalls. As such, we tried to measure the
time (in the v-cycle time units of our own reference clock,
where v is about 30) taken in an empty OCall by calling it
1000 times. On our test platform, the average time taken
was 78.14 time units and the standard deviation was 3.27
time units.
The threshold of the execution time measurement of each
execution pathlet is determined as the mean of the execution
time of the underlying pathlet minus its standard deviation
plus the mean of the time for one AEX minus its standard
deviation. The resulting conﬁguration ﬁle is then used by
the extended Clang in the detection mode.
6.2 Detection Mode
The instrumented basic blocks in the detection mode work
in the following way. At each multi-sink predecessor, the
basic-block identiﬁer is recorded to keep track of the current
execution pathlet. At each multi-sink, a reference to the
clock is made. If the clock was interrupted in the time since
the last clock reference, a call to the D´ej`a Vu library is
made to indicate a clock-AEX alarm. If not, then the current
clock reading is compared with the previous clock reading to
calculate the diﬀerence, which is the time spent to execute
the just-ﬁnished pathlet. If the execution time is larger than
the instrumented threshold, then a call is made to the D´ej`a
Vu library to indicate an app-AEX alarm. Both clock-AEX
alarms and app-AEX alarms can be used by the security
policy engine to make informed decisions about whether a
privileged side-channel attack is ongoing.
6.3 Integration with SGX Software Develop-
ment Environments
The design of D´ej`a Vu is independent of the software
development environment. For demonstration purposes, we
have integrated D´ej`a Vu with the oﬃcial Linux SGX SDK
released by Intel4. The workﬂow for integrating D´ej`a Vu
with the oﬃcial Linux SGX SDK is shown in Fig. 5. Fol-
lowing the standard use case of Intel SGX described by the
SDK, the source code of the project to be protected by D´ej`a
Vu is separated into two components: an application com-
ponent and an enclave component. The separation is en-
abled by the SGX SDK with an edl ﬁle, which is manually
created by the developer and speciﬁes which ﬁles and func-
tions are to be compiled into which components. With the
help of an SDK-provided tool called edger8r, two header
ﬁles are generated that help the two components to interact
with each other: Enclave_u.h and Enclave_t.h. The stan-
dard SDK compiles the application source code using the
gcc compiler. D´ej`a Vu leaves this part unchanged. To en-
able program analysis and instrumentation, we replace the
compiler for the enclave source code (i.e., gcc) with Clang.
The compiled binary is the SGX library that will be loaded
into the enclave.
7. EVALUATION
7.1 Experiment Setup
Our experiments were conducted on a Dell Latitude E5470
laptop, which is equipped with an Intel CORE i5-6440HQ
Skylake processor that supports both SGX and TSX ex-
tensions. The processor had four cores, whose maximum
frequency is 2.6GHz. The laptop was equipped with 8GB
DRAM. The size of EPC was the default, 128MB. The oper-
ating system was a Ubuntu 14.04 with Linux kernel version
3.19.0. To perform security and performance evaluations,
we ported the nbench performance benchmark [4] to sup-
port SGX and applied D´ej`a Vu to compile them with the
SGX Linux SDK.
7.2 Security Evaluation
We consider three types of attacks against D´ej`a Vu in
our empirical security evaluation: (1) stopping the clock by
3
http://clang.llvm.org/
4
https://github.com/01org/linux-sgx
14y
t
i
l
i
b
a
b
o
r
P
0.15
0.10
0.05
0.00
0.107
0.077
0.044
0.036
0.042
0.021
4
8
16
N
Theoretical
Empirical
0.038
0.012
32
Figure 6: Probability of clock-thread AEX not causing a
TSX abort. Grey bars show theoretical probability esti-
mates and white bars represent the empirical probabilities.
interrupting the execution of the reference-clock thread; (2)
tracing the shielded execution by triggering page faults; and
(3) slowing the reference-clock thread by scaling down the
operating frequency of the underlying CPU core.
7.2.1 Detecting Reference-Clock AEXs
We designed the reference clock so that the probability
for the adversary to preempt the clock without inducing a
TSX abort is only about 5%, by tuning the value of v, the
ﬁxed CPU cycles taken in the inner loop, and N , the upper-
bound of the variable rand. That is, the reference-clock
thread will spend about 5% of the time outside the hardware
transactions, to execute the instruction timer+=rand.
We validate that our theoretical estimates are consistent