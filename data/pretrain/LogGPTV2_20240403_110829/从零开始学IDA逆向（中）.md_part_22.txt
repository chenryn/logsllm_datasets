图 52-13 输出消息“DriverEntry called”
52.4 RtlInitUnicodeString
接下来需要通过 RtlInitUnicodeString 函数将 unicode 字符串转换
为UNICODE_STRING结构体。
图 52-14 RtlInitUnicodeString函数
在源代码中也调用RtlInitUnicodeString函数。
图 52-15 源代码调用
WCHAR deviceNameBuffer[] = L"\\Device\\HelloWorld"
起始变量 deviceNameBuffer 是一个存储 unicode 字符串的缓存区指
针，目标变量是指向UNICODE_STRING结构体的指针。
UNICODE_STRING结构体之前已经介绍过，它一共有3个字段，2个WOR
D字段（Length和MaximumLength），第3个字段就是指向unicode字符串
的指针。
这意味着这个API函数会将这个缓存区的地址复制到结构体的第3个字段，
371
从零开始学IDA逆向 52 驱动与应用交互
然后再对length和MaximumLength字段赋值，这样就将一个普通的unico
de字符串缓存区转换为一个UNICODE_STRING结构体。
图 52-16 UNICODE_STRING结构体定义
图 52-17 调用RtlInitUnicodeString函数
图 52-18 UNICODE_STRING结构体
图 52-18中2个变量都是8字节的UNICODE_STRING结构体，其中2个
372
从零开始学IDA逆向 52 驱动与应用交互
WORD字段用于保存长度，还有一个字段保存字符串缓存区的指针。
52.5 调用 IoCreateDevice
图 52-19 调用IoCreateDevice
图 52-19中程序调用了IoCreateDevice。
图 52-20 interfaceDevice参数
最远的或者说最后一个参数是一个 DWORD 指针，而且作为输出，也就是 A
PI函数会在这个参数中保存一个指针。首先程序将interfaceDevice变量设
置为0，然后使用lea指令读取它的地址。
然后 push 1 指令中的 1 是之前没有介绍的特有参数，它不是很重要。然
后就是PUSH EDI，因为之前执行过XOR EDI, EDI指令，所以EDI的值为
0。当然这个参数也不是很重要。然后是push 8337h，这是作者在源代码中定
义的DeviceType。
#define FILE_DEVICE_HELLOWORLD 0x00008337
373
从零开始学IDA逆向 52 驱动与应用交互
图 52-21 edi
然后传入的是存储deviceName的UNICODE_STRING结构体的指针。
图 52-22 DeviceName
图 52-23 DriverObject
374
从零开始学IDA逆向 52 驱动与应用交互
然后再通过EDI传入DeviceExtensionSize参数，同样它的值为0。最
后通过EBX传入DriverObject。
读者应该记得它是个DRIVER_OBJECT指针。
图 52-24 DRIVER_OBJECT指针
所以调用完成之后会生成DeviceObject对象。
图 52-25 test eax, eax
375
从零开始学IDA逆向 52 驱动与应用交互
如果EAX是负值，说明生成失败，然后JS跳转指令沿着绿色箭头跳转。而
生成成功的话，就会转到调用DbgPrint函数输出“Success”。
而对于另一个unicode字符串，同样调用RtlInitUnicodeString ap
i函数将它从一个unicode字符串缓存区转换为UNICODE_STRING结构体。
所以 deviceLinkUnicodeString 现在变为 UNICODE_STRING 结构体
类型，而且第3个字段是一个指向unicode字符串"\\ DosDevices \\ He
lloWorld"的指针。
图 52-26 IoCreateSymbolicLink
然后将2个UNICODE_STRING结构体指针传给IoCreateSymbolicLin
k API函数能够建立DeviceObject和user mode的符号连接。
而EBX中是DRIVER_OBJECT结构体的指针。
如果该结构体没有出现在结构体选项卡中，那么转到 LOCAL TYPES 选项
卡进行同步，如图 52-27，按T键将这些偏移转换为结构体字段。
52.6 卸载驱动
就像之前的例子一样，在驱动卸载时会调用一个自定义的函数，也就是 eb
x+34h，按T键能够发现它就是DriverUnload字段。
376
从零开始学IDA逆向 52 驱动与应用交互
图 52-27 EBX
图 52-28 转换为字段
377
从零开始学IDA逆向 52 驱动与应用交互
图 52-29 DriverUnload
图 52-29中，卸载驱动时不仅仅调用DbgPrint输出字符串“Driver u
nloading”。
由于之前调用IoCreateSymbolicLink api创建了symbolicLink，
那么卸载驱动时需要调用IoDeleteSymbolicLink删除symbolicLink。同
样之前调用 IoCreateDevice 函数，现在需要调用 IoDeleteDevice 删除，
避免下次加载时出现问题。
52.7 MajorFunction 字段
图 52-30 MajorFunction
图 52-31 MajorFunction 源代码
在 DriverObject 中最后的是 MajorFunction 字段，它是一个各种回
调函数的指针数组。
而 MajorFuncion [IRP_MJ_CREATE]是这个数组的第一个元素，也就
是MajorFuncion [0x0]。
图 52-32是这个数组的展开。
378
从零开始学IDA逆向 52 驱动与应用交互
图 52-32 MajorFuncion数组
[IRP_MJ_CREATE] es 0x0
[IRP_MJ_CLOSE] es 0x02
[IRP_MJ_DEVICE_CONTROL] es 0x0e
图 52-33 DriverDispatch
图 52-33中这三个字段都被赋值为DriverDispatch。
最后一行是在0x0偏移处写入，[IRP_MJ_CREATE]也就是0x0乘以4还
是0x0。
然后[IRP_MJ_CLOSE]就是0x2乘以4也就是0x8。
最后[IRP_MJ_DEVICE_CONTROL]是0x0e乘以4，结果是0x38。
而且这三个元素都写入了同一个函数指针。
而这些回调函数会在与用户模式交互的不同时刻被调用。
379
从零开始学IDA逆向 52 驱动与应用交互
图 52-34 IRP_MJ_CREATE
图 52-35 IRP_MJ_CLOSE
图 52-36 IRP_MJ_DEVICE_CONTROL
所以通过DeviceIoControl使用IOCTL调用用户模式应用时，使用的是
这些回调函数，而在这三种情况下调用的是同一个函数，都是 DriverDispat
ch函数。
52.8 DriverDispatch 函数
380
从零开始学IDA逆向 52 驱动与应用交互
图 52-37 DriverDispatch函数
这个函数接收了2个参数，一个就是著名的DEVICE_OBJECT，第二个是I
RP结构体指针，这个结构体比较复杂，后面会详细讨论。
381
从零开始学IDA逆向 52 驱动与应用交互
图 52-38 IRP结构体
图 52-39 注册、启动、停止服务
和之前的驱动一样，当注册和启动驱动时会输出“DriverEntry calle
d”、“Success”，卸载的时候输出“Driver Unloading”。而现在启动一个
用户模式应用程序时也可以输出，当然首先要启动驱动。
382
从零开始学IDA逆向 52 驱动与应用交互
图 52-40 用户应用
当驱动与用户模式应用交互时，DriverDispatch函数被调用，当然这个
程序只能进行这些操作（这个应用程序也在附件当中）。
#include "stdafx.h"
#include 
#define FILE_DEVICE_HELLOWORLD 0x00008337
#define IOCTL_SAYHELLO (ULONG) CTL_CODE( FILE_DEVICE_HELLOWORLD, 0
x00, METHOD_BUFFERED, FILE_ANY_ACCESS )
int main()
{
HANDLE hDevice;
DWORD nb;
hDevice = CreateFile(TEXT("\\\\.\\HelloWorld"), GENERIC_READ |
GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NUL
L);
DeviceIoControl(hDevice, IOCTL_SAYHELLO, NULL, 0, NULL, 0, &nb,
NULL);
CloseHandle(hDevice);
return 0;
}
383
从零开始学IDA逆向 52 驱动与应用交互
图 52-41 [IRP_MJ_CREATE]
所以当应用程序调用 CreateFile 函数获得一个驱动句柄时，通过回调函
数[IRP_MJ_CREATE]转到DriverDispatch函数，进行输出。
当调用DeviceIoControl api时会将IOCTL传给驱动。
图 52-42 DeviceIoControl
驱动会调用回调函数[IRP_MJ_DEVICE_CONTROL]，然后检查 IOCTL 的
内容，在这里是IOCTL_SAYHELLO。
然后输出"Hello World"。
图 52-43 IRP_MJ_DEVICE_CONTROL
最后应用程序调用CloseHandle时使用回调函数[IRP_MJ_CLOSE]。
在LOCAL TYPES中同步IRP结构体。
384
从零开始学IDA逆向 52 驱动与应用交互
图 52-44 IRP结构体
然后就能在结构体选项卡中看到它。
图 52-45 调试驱动
启动驱动调试，运行到如图 52-45时，在dispatch函数上设置断点。
程序从IRP结构体中读取字段，TAIL部分在MSDN文档中没有说明，但是
在这里读取了EDI + 60处的字段然后传给EBX，然后EBX指向的值又传给E
AX，它的值为 0，相当于[IRP_MJ_CREATE]，然后驱动输出 IRP_MJ_CREAT
E对应的消息。
385
从零开始学IDA逆向 52 驱动与应用交互
然后继续运行，下一次暂停时EAX = 0e，也就是[IRP_MJ_DEVICE_CON
TROL]。
图 52-46 EAX = 0e
图 52-47 EAX不等于0
当EAX不等于0时，如图 52-47。
驱动运行到粉色代码部分，输出消息，再对IOCTL的值进行比较。
#define IOCTL_SAYHELLO (ULONG) CTL_CODE( FILE_DEVICE_HELLO
WORLD, 0x00, METHOD_BUFFERED, FILE_ANY_ACCESS )
在源代码中，通过 FILE_DEVICE 取得值 0x8337，然后再根据 IOCTL 的
386
从零开始学IDA逆向 52 驱动与应用交互
类型进行其它一些操作（在这里是METHOD BUFFERED等等），最终是IOCTL
0x83370000。
图 52-48 IOCTL
驱动中IOCTL的值和0x83370000，由于相等，输出消息"Hello Worl
d!"。
图 52-49 Hello World
而调用 dbgPrint 函数时，在 Windbg 的输出窗口也能看到这些消息。如
果定义了不同的IOCTL以及对应的操作，这边应该是一个switch 语句，然后
根据IOCTL的类型执行不同的操作。
图 52-50 输出窗口
最后，调用CloseHandle时第三次触发断点，此时EAX=2。
387
从零开始学IDA逆向 52 驱动与应用交互
图 52-51 EAX=2
最后输出：
图 52-52 CloseHandle
作者觉得已经对这个主题进行了详细介绍，在下一章中还会进行更深入的分
析。
388
从零开始学IDA逆向 53 IRP结构体
53 IRP 结构体
53.1 dt 命令选项
本章就来研究前一章节没有说明的细节问题，也就是 IRP 结构体的定义是
不完整的，那么如何从该结构体获得IOCTL编码呢。
再次进行调试，暂停的时候使用windbg命令来查看这个结构体，读者应该
记得dt命令可以查看结构体，在这里要查看的是IRP结构体。
图 53-1 dt _IRP
和IDA中的结构体一样，这里同样没有显示0x60偏移处的Tail的类型，
不过这里有一个深入挖掘的小技巧。
图 53-2 0x60
dt命令有一些选项，第一个-v，就是设置成冗余模式，而另一个-r则是选
择显示子结构体的层级。接下来观察使用的效果。
389
从零开始学IDA逆向 53 IRP结构体
图 53-3 dt命令选项
图 53-4 dt -v -r 3 _IRP
390
从零开始学IDA逆向 53 IRP结构体
现在情况好多了，甚至显示出了Tail的内容。
图 53-5 Tail
Tail 的起点是 0x40，再向后 0x20 是 CurrentStackLocation，也就
是IRP结构体0x60处的内容。
如果读者在已经安装的WDK中搜索：
图 53-6 CurrentStackLocation
CurrentStackLocation 实际是_IO_STACK_LOCATION 结构体类型。
通过windbg进行查看。
391
从零开始学IDA逆向 53 IRP结构体
图 53-7 dt _IO_STACK_LOCATION
确实获取了更多信息，但是 0x04 字段也就是 Parameters 的内容仍然没
有显示出来，所以再通过dt命令的选项显示更多的层级。
392
从零开始学IDA逆向 53 IRP结构体
图 53-8 dt -r 4 _IO_STACK_LOCATION