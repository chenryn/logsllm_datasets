Broadwell
Coffeelake
Total
Trials
500
500
500
1500
Success Median BF
21.6
23.0
22.6
0.998
0.982
0.998
0.993
Figure 12: Required number of bruteforcing attempts
for compromising 256-bit EdDSA encryption keys with
TLBleed.
results and then elaborate on the bruteforcing heuristics
that we use.
Table 2 shows the results of our attack on all testbeds.
With a small number of measurements-guided bruteforc-
ing, TLBleed can successfully leak the key in 99.8% of
the cases in the Skylake system, in 98.2% of the cases on
the Broadwell system, and 99.8% on Coffeelake. In the
remaining cases, while the key is signiﬁcantly compro-
mised, bruteforcing was still out of reach with our avail-
able computing resources. The end-to-end attack time is
composed of: 2 ms of capture time; 17 seconds of sig-
nals analysis with the trained classiﬁer; and a variable
amount of brute-force guessing with a negligible median
work factor of 23 at worst, taking a fraction of a second.
Thus, in the most common case, the end-to-end attack
time is dominated by the signals analysis phase of 17
seconds and can be trivially reduced with more comput-
ing resources. Given that TLBleed requires a very small
capture time, existing re-randomization techniques (e.g.,
Shufﬂer [57]) do not provide adequate protection against
TLBleed, even if they re-randomized both code and data.
13:
Sketched
Figure
of SIM-
PLE_EXPONENTIATION variant of modular ex-
ponentiation in libgcrypt, in an older version.
representation
void
_gcry_mpi_powm (gcry_mpi_t res,
gcry_mpi_t base, gcry_mpi_t expo, gcry_mpi_t mod)
{
mpi_ptr_t rp, xp; /* pointers to MPI data */
mpi_ptr_t tp;
...
for(;;) {
...
/* For every exponent bit in expo: */
_gcry_mpih_sqr_n_basecase(xp, rp);
if(secret_exponent || e_bit_is1) {
/* Unconditional multiply if exponent is
* secret to mitigate FLUSH+RELOAD.
*/
_gcry_mpih_mul (xp, rp);
}
if(e_bit_is1) {
/* e bit is 1, use the result */
tp = rp; rp = xp; xp = tp;
rsize = xsize;
}
}
}
Figure 12 provides further information on the fre-
quency of bruteforcing attempts required after classiﬁ-
cation. We rely on two heuristics based on the classiﬁ-
cation results to guide our bruteforcing attempts. Due to
the streaming nature of our classiﬁer, sometimes it does
not properly recognize a 1 or a 0, leaving a blank (i.e.,
skipping), and sometimes it classiﬁes two 1s or two 0s
instead of only one (i.e., duplicating). By looking at the
length of periods in which the classiﬁer makes decision,
we can ﬁnd cases where the period is too long for a sin-
gle classiﬁcation (skipping) and cases where the period
is too short for two classiﬁcations (duplicating). In the
case of skipping, we try to insert a guess bit and in the
case of duplicating, we try to remove the duplicate. As
evidenced by our experimental results, these heuristics
work quite well for dealing with misclassiﬁcations in the
case of the TLBleed attack.
9.3 Compromising RSA
We next show that an RSA implemenetation, written
to mitigate FLUSH+RELOAD [59], nevertheless leaves
a secret-dependent data trace in the TLB that TLBleed
can detect. This ﬁnding is not new to our work and
this version has since been improved. Nevertheless we
show TLBleed can detect secret key bits from such an
RSA implementation, even when protected with cache
isolations deployed, as well as code hardening against
FLUSH+RELOAD.
Listing 13 shows our target RSA implemenatation.
USENIX Association
27th USENIX Security Symposium    965
05101520253035log2 brute force attempts050100150200250FrequencybroadwellkabylakeskylakeFigure 14: TLBleed accuracy in computing RSA 1024-
bit secret exponent bits. Shown is the histogram of the
number of errors the reconstructed RSA exponent con-
tained from a single capture, expressed as the Leven-
shtein edit distance.
The code maintains pointers to the result data (rp) and
working data (xp). This is a schematic representation of
modular exponentiation code as it existed in older ver-
sions of libgcrypt, following a familiar square-and-
multiply algorithm to compute the modular exponenti-
ation. The multiplication should only be done if the cor-
responding exponent bit is 1. Conditionally executing
this code leaks information about the secret exponent, as
shown in [59]. To mitigate this, the code uncondition-
ally executes the multiplication but conditionally uses the
result, by swapping the rp and xp pointers if the bit is
1. Whenever these pointers fall in different TLB sets,
TLBleed can detect whether or not this swapping opera-
tion has happened, by distinguishing the access activity
in the swapped and unswapped cases, directly leaking in-
formation about the secret exponent.
We summarize the accuracy of our key reconstruction
results in Figure 14, a histogram of the edit distance of
the reconstructed RSA keys showing that on average we
recover more than 92% of RSA keys with a single cap-
ture. While we have not upgraded these measurements
to a full key recovery, prior work [61] has shown that it
is trivial to reconstruct the full key from 60% of the re-
covered key by exploiting redundancies in the storage of
RSA public keys [22].
9.4 Compromising Software Defenses
Software-implemented cache defenses all seek to prevent
an attacker to operate cache evictions for the victim’s
cachelines. Since TLBleed only relies on TLB evictions
and is completely oblivious to cache activity, our attack
Figure 15: TLBleed compromising software defenses, as
demonstrated by the substantial number of TLB rather
than cache misses required by our libgcrypt attack.
Table 3: TLBleed compromising Intel CAT.
Microarchitecture
Broadwell (CAT)
Broadwell
Trials
500
500
Success Median BF
22.6
23.0
0.960
0.982
strategy trivially bypasses such defenses. To conﬁrm this
assumption, we repeat our libgcrypt attack for an in-
creasing number of iterations to study the dependency
between victim activity and cache vs. TLB misses.
Figure 15 presents our results. As shown in the ﬁg-
ure, the TLBleed has no impact on the cache behavior
of the victim (LLC shown in ﬁgure, but we observed
similar trends for the other CPU caches). The only
slight increase in the number of cache misses is a by-
product of the fast-growing number of TLB misses re-
quired by TLBleed and hence the MMU’s page table
walker more frequently accessing the cache. Somewhat
counter-intuitively, the increase in the number of cache
misses in Figure 15 is still constant regardless of the
number of TLB misses reported. This is due to high vir-
tual address locality in the victim, which translates to a
small, constant cache working set for the MMU when
handling TLB misses. This experiment conﬁrms our as-
sumption that TLBleed is oblivious to the cache activity
of the victim and can trivially leak information in pres-
ence of state-of-the-art software-implemented cache de-
fenses.
9.5 Compromising Intel CAT
We now want to assess whether TLBleed can compro-
mise strong, hardware-based cache defenses based on
hardware cache partitioning. Our hypothesis is that such
966    27th USENIX Security Symposium
USENIX Association
020406080100edit distance0246810121416frequency0255075100Victim work size (iterations)05001000150020002500LLC missesbaselineTLBleed0255075100Victim work size (iterations)02000004000006000008000001000000120000014000001600000L1dTLB missesbaselineTLBleedFigure 16: TLBleed detects TLB activity of a victim pro-
cess running inside an Intel TSX transaction by stealthily
measuring TLB misses.
Figure 17: TLB covert channel bandwidth without and
with a heavy interference load. The undetected frame
error rate is low in both cases: 2.0· 10−5 and 3.2· 10−4
respectively.
hardware mechanisms do not extend their partitioning
to the TLB. Our Broadwell processor, for example, is
equipped with the Intel CAT extension, which can parti-
tion the shared cache between distrusting processes [37].
To validate our hypothesis, our goal is to show that
TLBleed can still leak information even when Intel CAT
is in effect.
We repeat the same experiment we used to attack
libgcrypt, but this time with Intel CAT enabled. We
isolate the victim libgcrypt process from the TLBleed
process using Intel rdtset tool by perfectly partition-
ing the cache between the two processes (using the 0xf0
mask for the victim, and 0x0f for TLBleed). Table 3
shows that the hardware cache partitioning strategy im-
plemented by Intel CAT does not stop TLBleed, validat-
ing our hypothesis. This demonstrates TLBleed can by-
pass state-of-art defenses that rely on Intel CAT (or sim-
ilar mechanisms) [37].
9.6 Compromising Intel TSX
We now want to assess whether TLBleed can compro-
mise strong, hardware-based cache defenses that pro-
tect the cache activity of the victim with hardware trans-
actional memory features such as Intel TSX. In such
defenses, attacker-induced cache evictions induce Intel
TSX capacity aborts, detecting the attack [21]. Our hy-
pothesis is that such hardware mechanisms do not extend
their abort strategy to TLB evictions. To validate our hy-
pothesis, our goal is to show that TLBleed can still detect
the victim’s activity with successful transactions and leak
information even when Intel TSX is in effect.
Porting libgcrypt’s EdDSA algorithm to run inside
a TSX transaction requires major source changes since
its working set does not ﬁt inside the CPU cache. We
instead experiment with a synthetic but representative
example, where a victim process accesses a number of
memory addresses in a loop for a given number of times
inside a transaction.
Figure 16 shows the number of TLB misses with and
without TLBleed. Increasing the duration of victim’s ex-
ecution allows TLBleed to detect more and more TLB
miss due to the victim’s activity. Each additional miss
provides TLBleed with information about the secret op-
eration of a victim without aborting the transaction, val-
idating our hypothesis. This demonstrates TLBleed can
also bypass recent defenses that rely on Intel TSX (or
similar mechanisms) [21] and, ultimately, all the state-
of-the-art cache defenses.
9.7 TLB Covert Channel
To further prove the correct reverse engineering of TLB
properties, and to do a basic quantiﬁcation of the noise
resistance properties of this channel, we use our new
TLB architecture knowledge to construct a covert chan-
nel. This allows communication between mutually co-
operating parties that are not authorized to communicate,
e.g. to exﬁltrate data. We exclusively use the TLB and no
other micro-architectural state for this channel. For the
purposes of this design, TLB sets and cache sets serve
the same purpose: accessing the set gives the other party
a higher latency in the same set, which we use as a com-
munication primitive. We borrow design ideas from [41].
We implement this covert channel and do two exper-
iments. The ﬁrst we run the protocol with a transmitter
and receiver on two co-resident hyperthreads on an other-
USENIX Association
27th USENIX Security Symposium    967
02004006008001000Victim work size (memory accesses)3200340036003800400042004400L1dTLB missesbaselineTLBleed0246810bandwidth (kBit)0.02.55.07.510.012.515.017.520.0frequencyquiescentheavy interferencewise quiescent machine. The second we do the same, but
generate two heavy sources of interference: one, we run
the libgcrypt signing binary target in a tight loop on the
same core; and two, we run stress -m 5 to generate a
high rate of memory activity throughout the machine.
We ﬁnd the usable bandwidth under intense load is
roughly halved, and the rate of errors that was not caught
by the framing protocol does increase, but remains low.
We see an undetected frame error rate of 2.0· 10−5 for a
quiescent machine, and 3.2· 10−4 for the heavily loaded
machine. These results are summarized in Figure 17 and
show robust behaviour in the presence of heavy interfer-
ence. We believe that, given the raw single TLB set probe
rate of roughly 30· 107, with additional engineering ef-
fort the bandwidth of this channel could be signiﬁcantly
improved.
all applications rely on contiguous virtual addresses for
correct operations, which is no longer possible if certain
TLB sets are not accessible due to partitioning.
It is easier to provide adequate protection against
TLBleed in hardware. Intel CAT, for example, can be
extended to provide partitioning of TLB ways on top
of partitioning cache ways. Existing defenses such as
CATalyst [37] can protect themselves against TLBleed
by partitioning the TLB in hardware. Another option is
to extend hardware transactional memory features such
as Intel TSX to cause capacity aborts if a protected trans-
action observes unexpected TLB misses similar to CPU
caches. Existing defenses such as Cloak [21] can then
protect themselves against TLBleed, since an ongoing
TLBleed attack will cause unexpected aborts.
10 Discussion
11 Related Work
Leaking cryptographic keys and bypassing cache side-
channel defenses are not the only possible targets for
TLBleed. Moreover, mitigating TLBleed without sup-
port from future hardware is challenging. We discuss
these topics in this section.
10.1 Other targets
TLBleed can potentially leak other information when-
ever TLBs are shared with a victim process. We ex-
pect that our TLB set classiﬁcation technique can very
quickly reduce the entropy of ASLR, either that of the
browser [8, 17] or kernel [20, 24, 29]. The L2 TLB in
our Broadwell system has 256 sets, allowing us to re-
duce up to 8 bits of entropy. Note that since the TLB
is shared, separating address spaces [19] will not protect
against TLBleed.
Other situations where TLBleed may leak information
stealthily are from Intel SGX enclaves or ARM Trust-
Zone processes. We intend to pursue this avenue of re-
search in the future.
10.2 Mitigating TLBleed
The simplest way to mitigate TLBleed is by disabling
hyperthreads or by ensuring in the operating system that
sensitive processes execute in isolation on a core. How-
ever, this strategy inevitably wastes resources. Further-
more, in cloud environments, customers cannot trust that
their cloud provider’s hardware or hypervisor has de-
ployed a (wasteful) mitigation. Hence, it is important
to explore other mitigation strategies against TLBleed.
In software, it may be possible to partition the TLB be-
tween distrusting processes by partitioning the virtual ad-
dress space. This is, however, challenging since almost
We focus on closely related work on TLB manipulation
and side-channel exploitation over shared resources.
11.1 TLB manipulation
There is literature on controlling TLB behavior in both
benign and adversarial settings. In benign settings, con-
trolling the impact of the TLB is particularly relevant in
real-time systems [27, 44]. This is to make the execu-
tion time more predictable while keeping the beneﬁts of
a TLB. In adversarial settings, the TLB has been pre-
viously used to facilitate exploitation of SGX enclaves.
In particular, Wang et al. [56] showed that it is possi-
ble to bypass existing defenses [51] against controlled
channel attacks [58] by ﬂushing the TLB to force page
table walks without trapping SGX enclaves. In contrast,
TLBleed leaks information by directly observing activity
in the TLB sets.
11.2 Exploiting shared resources
Aside from the cache attacks and defenses extensively
discussed in Section 2.1,
there is literature on other
microarchitectural attacks exploiting shared resources.
Most recently, Spectre [32] exploits shared Branch Tar-
get Buffers (BTBs) to mount "speculative" control-ﬂow
hijacking attacks and control the speculative execution of
the victim to leak information. Previously, branch pre-
diction has been attacked to leak data or ASLR informa-
tion [2, 3, 14, 35]. In [4], microarchitectural properties
of execution unit sharing between hyperthreads is ana-
lyzed. Finally, DRAMA exploits the DRAM row buffer
to mount (coarse-grained) cross-CPU side-channel at-
tacks [46].
968    27th USENIX Security Symposium
USENIX Association
11.3 Temporal side-channel analysis
References
A number of previous efforts have observed that tempo-
ral information can be used to mount side-channel at-
tacks over shared caches or similar ﬁne-grained chan-
nels [4, 15, 25, 38, 45, 61]. With TLBleed, we intro-
duce a machine learning-based analysis framework that
exploits (only) high-resolution temporal features to leak
information even in (page-level) side-channel coarsen-