.ir stream
associated with the filesystem description file.
.pp
the
.br hasmntopt ()
function scans the
.i mnt_opts
field (see below)
of the
.i mntent
structure
.i mnt
for a substring that matches
.ir opt .
see
.i 
and
.br mount (8)
for valid mount options.
.pp
the reentrant
.br getmntent_r ()
function is similar to
.br getmntent (),
but stores the
.ir "struct mount"
in the provided
.i *mntbuf
and stores the strings pointed to by the entries in that struct
in the provided array
.i buf
of size
.ir buflen .
.pp
the
.i mntent
structure is defined in
.i 
as follows:
.pp
.in +4n
.ex
struct mntent {
    char *mnt_fsname;   /* name of mounted filesystem */
    char *mnt_dir;      /* filesystem path prefix */
    char *mnt_type;     /* mount type (see mntent.h) */
    char *mnt_opts;     /* mount options (see mntent.h) */
    int   mnt_freq;     /* dump frequency in days */
    int   mnt_passno;   /* pass number on parallel fsck */
};
.ee
.in
.pp
since fields in the mtab and fstab files are separated by whitespace,
octal escapes are used to represent the characters space (\e040),
tab (\e011), newline (\e012), and backslash (\e\e) in those files
when they occur in one of the four strings in a
.i mntent
structure.
the routines
.br addmntent ()
and
.br getmntent ()
will convert
from string representation to escaped representation and back.
when converting from escaped representation, the sequence \e134 is
also converted to a backslash.
.sh return value
the
.br getmntent ()
and
.br getmntent_r ()
functions return
a pointer to the
.i mntent
structure or null on failure.
.pp
the
.br addmntent ()
function returns 0 on success and 1 on failure.
.pp
the
.br endmntent ()
function always returns 1.
.pp
the
.br hasmntopt ()
function returns the address of the substring if
a match is found and null otherwise.
.sh files
.tp
.i /etc/fstab
filesystem description file
.tp
.i /etc/mtab
mounted filesystem description file
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br setmntent (),
.br endmntent (),
.br hasmntopt ()
t}	thread safety	mt-safe
t{
.br getmntent ()
t}	thread safety	t{
mt-unsafe race:mntentbuf locale
t}
t{
.br addmntent ()
t}	thread safety	t{
mt-safe race:stream locale
t}
t{
.br getmntent_r ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
the nonreentrant functions are from sunos 4.1.3.
a routine
.br getmntent_r ()
was introduced in hp-ux 10, but it returns an
.ir int .
the prototype shown above is glibc-only.
.sh notes
system v also has a
.br getmntent ()
function but the calling sequence
differs, and the returned structure is different.
under system v
.i /etc/mnttab
is used.
4.4bsd and digital unix have a routine
.br getmntinfo (),
a wrapper around the system call
.br getfsstat ().
.sh see also
.br fopen (3),
.br fstab (5),
.br mount (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/drand48_r.3
.so man3/rpc.3
.so man2/sigaction.2
.so man3/tailq.3
.\" this man page is copyright (c) 1999 andi kleen .
.\"
.\" %%%license_start(verbatim_one_para)
.\" permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%license_end
.\"
.\" based on the original comments from alexey kuznetsov, written with
.\" help from matthew wilcox.
.\" $id: rtnetlink.7,v 1.8 2000/01/22 01:55:04 freitag exp $
.\"
.th rtnetlink  7 2021-03-22 "linux" "linux programmer's manual"
.sh name
rtnetlink \- linux routing socket
.sh synopsis
.nf
.b #include 
.b #include 
.b #include 
.b #include 
.pp
.bi "rtnetlink_socket = socket(af_netlink, int " socket_type ", netlink_route);"
.fi
.sh description
rtnetlink allows the kernel's routing tables to be read and altered.
it is used within the kernel to communicate between
various subsystems, though this usage is not documented here, and for
communication with user-space programs.
network routes, ip addresses, link parameters, neighbor setups, queueing
disciplines, traffic classes and packet classifiers may all be controlled
through
.b netlink_route
sockets.
it is based on netlink messages; see
.br netlink (7)
for more information.
.\" fixme . ? all these macros could be moved to rtnetlink(3)
.ss routing attributes
some rtnetlink messages have optional attributes after the initial header:
.pp
.in +4n
.ex
struct rtattr {
    unsigned short rta_len;    /* length of option */
    unsigned short rta_type;   /* type of option */
    /* data follows */
};
.ee
.in
.pp
these attributes should be manipulated using only the rta_* macros
or libnetlink, see
.br rtnetlink (3).
.ss messages
rtnetlink consists of these message types
(in addition to standard netlink messages):
.tp
.br rtm_newlink ", " rtm_dellink ", " rtm_getlink
create, remove, or get information about a specific network interface.
these messages contain an
.i ifinfomsg
structure followed by a series of
.i rtattr
structures.
.ip
.ex
struct ifinfomsg {
    unsigned char  ifi_family; /* af_unspec */
    unsigned short ifi_type;   /* device type */
    int            ifi_index;  /* interface index */
    unsigned int   ifi_flags;  /* device flags  */
    unsigned int   ifi_change; /* change mask */
};
.ee
.ip
.\" fixme document ifinfomsg.ifi_type
.i ifi_flags
contains the device flags, see
.br netdevice (7);
.i ifi_index
is the unique interface index
(since linux 3.7, it is possible to feed a nonzero value with the
.b rtm_newlink
message, thus creating a link with the given
.ir ifindex );
.i ifi_change
is reserved for future use and should be always set to 0xffffffff.
.ts
tab(:);
c s s
lb l l.
routing attributes
rta_type:value type:description
_
ifla_unspec:-:unspecified
ifla_address:hardware address:interface l2 address
ifla_broadcast:hardware address:l2 broadcast address
ifla_ifname:asciiz string:device name
ifla_mtu:unsigned int:mtu of the device
ifla_link:int:link type
ifla_qdisc:asciiz string:queueing discipline
ifla_stats:t{
see below
t}:interface statistics
.te
.ip
the value type for
.b ifla_stats
is
.ir "struct rtnl_link_stats"
.ri ( "struct net_device_stats"
in linux 2.4 and earlier).
.tp
.br rtm_newaddr ", " rtm_deladdr ", " rtm_getaddr
add, remove, or receive information about an ip address associated with
an interface.
in linux 2.2, an interface can carry multiple ip addresses,
this replaces the alias device concept in 2.0.
in linux 2.2, these messages
support ipv4 and ipv6 addresses.
they contain an
.i ifaddrmsg
structure, optionally followed by
.i rtattr
routing attributes.
.ip
.ex
struct ifaddrmsg {
    unsigned char ifa_family;    /* address type */
    unsigned char ifa_prefixlen; /* prefixlength of address */
    unsigned char ifa_flags;     /* address flags */
    unsigned char ifa_scope;     /* address scope */
    unsigned int  ifa_index;     /* interface index */
};
.ee
.ip
.i ifa_family
is the address family type (currently
.b af_inet
or
.br af_inet6 ),
.i ifa_prefixlen
is the length of the address mask of the address if defined for the
family (like for ipv4),
.i ifa_scope
is the address scope,
.i ifa_index
is the interface index of the interface the address is associated with.
.i ifa_flags
is a flag word of
.b ifa_f_secondary
for secondary address (old alias interface),
.b ifa_f_permanent
for a permanent address set by the user and other undocumented flags.
.ts
tab(:);
c s s
lb l l.
attributes
rta_type:value type:description
_
ifa_unspec:-:unspecified
ifa_address:raw protocol address:interface address
ifa_local:raw protocol address:local address
ifa_label:asciiz string:name of the interface
ifa_broadcast:raw protocol address:broadcast address
ifa_anycast:raw protocol address:anycast address
ifa_cacheinfo:struct ifa_cacheinfo:address information
.te
.\" fixme document struct ifa_cacheinfo
.tp
.br rtm_newroute ", " rtm_delroute ", " rtm_getroute
create, remove, or receive information about a network route.
these messages contain an
.i rtmsg
structure with an optional sequence of
.i rtattr
structures following.
for
.br rtm_getroute ,
setting
.i rtm_dst_len
and
.i rtm_src_len
to 0 means you get all entries for the specified routing table.
for the other fields, except
.i rtm_table
and
.ir rtm_protocol ,
0 is the wildcard.
.ip
.ex
struct rtmsg {
    unsigned char rtm_family;   /* address family of route */
    unsigned char rtm_dst_len;  /* length of destination */
    unsigned char rtm_src_len;  /* length of source */
    unsigned char rtm_tos;      /* tos filter */
    unsigned char rtm_table;    /* routing table id;
                                   see rta_table below */
    unsigned char rtm_protocol; /* routing protocol; see below */
    unsigned char rtm_scope;    /* see below */
    unsigned char rtm_type;     /* see below */
    unsigned int  rtm_flags;
};
.ee
.ts
tab(:);
lb l.
rtm_type:route type
_
rtn_unspec:unknown route
rtn_unicast:a gateway or direct route
rtn_local:a local interface route
rtn_broadcast:t{
a local broadcast route (sent as a broadcast)
t}
rtn_anycast:t{
a local broadcast route (sent as a unicast)
t}
rtn_multicast:a multicast route
rtn_blackhole:a packet dropping route
rtn_unreachable:an unreachable destination
rtn_prohibit:a packet rejection route
rtn_throw:continue routing lookup in another table
rtn_nat:a network address translation rule
rtn_xresolve:t{
refer to an external resolver (not implemented)
t}
.te
.ts
tab(:);
lb l.
rtm_protocol:route origin
_
rtprot_unspec:unknown
rtprot_redirect:t{
by an icmp redirect (currently unused)
t}
rtprot_kernel:by the kernel
rtprot_boot:during boot
rtprot_static:by the administrator
.te
.sp 1
values larger than
.b rtprot_static
are not interpreted by the kernel, they are just for user information.
they may be used to tag the source of a routing information or to
distinguish between multiple routing daemons.
see
.i 
for the routing daemon identifiers which are already assigned.
.ip
.i rtm_scope
is the distance to the destination:
.ts
tab(:);
lb l.
rt_scope_universe:global route
rt_scope_site:t{
interior route in the local autonomous system
t}
rt_scope_link:route on this link
rt_scope_host:route on the local host
rt_scope_nowhere:destination doesn't exist
.te
.sp 1
the values between
.b rt_scope_universe
and
.b rt_scope_site
are available to the user.
.ip
the
.i rtm_flags
have the following meanings:
.ts
tab(:);
lb l.
rtm_f_notify:t{
if the route changes, notify the user via rtnetlink
t}
rtm_f_cloned:route is cloned from another route
rtm_f_equalize:a multipath equalizer (not yet implemented)
.te
.sp 1
.i rtm_table
specifies the routing table
.ts
tab(:);
lb l.
rt_table_unspec:an unspecified routing table
rt_table_default:the default table
rt_table_main:the main table
rt_table_local:the local table
.te
.sp 1
the user may assign arbitrary values between
.b rt_table_unspec
and
.br rt_table_default .
.\" keep table on same page
.bp +1
.ts
tab(:);
c s s
lb2 l2 l.
attributes
rta_type:value type:description
_
rta_unspec:-:ignored
rta_dst:protocol address:route destination address
rta_src:protocol address:route source address
rta_iif:int:input interface index
rta_oif:int:output interface index
rta_gateway:protocol address:the gateway of the route
rta_priority:int:priority of route
rta_prefsrc:protocol address:preferred source address
rta_metrics:int:route metric
rta_multipath::t{
multipath nexthop data
br
(see below).
t}
rta_protoinfo::no longer used
rta_flow:int:route realm
rta_cacheinfo:struct rta_cacheinfo:(see linux/rtnetlink.h)
rta_session::no longer used
rta_mp_algo::no longer used
rta_table:int:t{
routing table id; if set,
.br
rtm_table is ignored
t}
rta_mark:int:
rta_mfc_stats:struct rta_mfc_stats:(see linux/rtnetlink.h)
rta_via:struct rtvia:t{
gateway in different af
(see below)
t}
rta_newdst:protocol address:t{
change packet
destination address
t}
rta_pref:char:t{
rfc4191 ipv6 router
preference (see below)
t}
rta_encap_type:short:t{
encapsulation type for
.br
lwtunnels (see below)
t}
rta_encap::defined by rta_encap_type
rta_expires:int:t{
expire time for ipv6
routes (in seconds)
t}
.te
.ip
.b rta_multipath
contains several packed instances of
.i struct rtnexthop
together with nested rtas
.rb ( rta_gateway ):
.ip
.in +4n
.ex
struct rtnexthop {
    unsigned short rtnh_len;     /* length of struct + length
                                    of rtas */
    unsigned char  rtnh_flags;   /* flags (see
                                    linux/rtnetlink.h) */
    unsigned char  rtnh_hops;    /* nexthop priority */
    int            rtnh_ifindex; /* interface index for this
                                    nexthop */
}
.ee
.in
.ip
there exist a bunch of
.b rtnh_*
macros similar to
.b rta_*