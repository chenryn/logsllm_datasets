# BlackHat USA (@BlackHatEvents)
**Information Classification: General**

## Exploiting CVE-2022-22954

### Key Questions:
- **Do we need to escape the Freemarker sandbox?** No, a new built-in is available.
- **Can we find a thrown Exception containing attacker-controlled data?** Yes, within `AuthContextPopulationInterceptor`.

### Results:
- A single GET request for delivery
- Works on default installation
- Pre-authenticated
- Effective against VMware's cloud

## Hekate: Triple Bug Chain RCE Exploit

### Server-Side Vulnerabilities:
1. **Access Control Service Authentication Bypass (CVE-2022-22956)**
2. **DBConnectionCheckController JDBC Injection (CVE-2022-22957)**
3. **gatherConfig.hzn Privilege Escalation (CVE-2022-22960)**

### Client-Side Vulnerabilities:
1. **BrandingResource getBranding Information Disclosure (CVE-2022-22961)**
2. **DBConnectionCheckController CSRF (CVE-2022-22959)**
3. **gatherConfig.hzn Privilege Escalation (CVE-2022-22960)**

## Access Control Service Authentication Bypass

### Vulnerable Methods:
- **OAuth2TokenResourceController and OAuth2ActivateResource** expose two dangerous methods:
  1. `generateActivationToken`
  2. `activateOauth2Client`

These methods allow a remote attacker to obtain a valid `client_secret` with the permissions of an existing OAuth2 client. The target application must have default OAuth2 clients.

### Exploitation:
- After exploiting this vulnerability, the attacker can use a `client_credentials` grant for complete authentication bypass.

## Java Database Connectivity (JDBC)

### Overview:
- **Java API** for connecting to different database technologies.
- **JSR-221** specifies the API and mandates that drivers implement `java.sql.Driver`.
- Increases the attack surface for attackers.

### DBConnectionCheckController JDBC Injection

- **Class Mapping:** Mapped to `dbCheck`, which removes CSRF protection.
- **Request Method:** Exposed via a POST request, expecting a `jdbcUrl`.
- **Input Handling:** Directly leads to `DriverManager.getConnection` sink.

### Known Attacks Against JDBC:
- **MySQL Driver:**
  - Deserialization of Untrusted Data
  - Load Data Infile File Disclosure
- **PostgreSQL Driver:**
  - Unsafe Reflection in `socketFactory/sslFactory`
  - Arbitrary File Write in `loggerLevel/loggerFile`
- **H2 Driver:**
  - Code Injection via `create alias/trigger`
- **DB2 Driver/JCR Connector:**
  - JNDI Injection
- **Apache Derby Driver:**
  - Deserialization of Untrusted Data
- **MySQL Fabric Driver:**
  - XML External Entity (XXE) Attack

### Exploiting JDBC Injection

- **New Trend:** JDBC Injection is becoming the new JNDI Injection.
- **Examples:**
  - **MySQL Driver:** Deserialization of Untrusted Data
  - **PostgreSQL Driver:** Unsafe Unmarshalling
  - **H2 Driver:** Code Injection
  - **DB2 Driver:** JNDI Injection
  - **Apache Derby Driver:** Deserialization of Untrusted Data
  - **MySQL Fabric Driver:** XXE

### Leveraging Drivers for Exploitation:
- **MySQL Driver:**
  - Deserialization of Untrusted Data
  - Authentication Bypass
  - Outbound request to the attacker
- **PostgreSQL Driver:**
  - Unsafe Unmarshalling
  - Authentication Bypass
  - Not required to be valid
  - Outbound request to the attacker

### Example Exploitation:
- **GET /poc.xml HTTP/1.1**
- **HTTP/1.1 200**

### CommonsBeanUtils1 Gadget:
- Available and requires no outbound network access.
- **Improvement:** We can do better!

### LicenseChecker Constructor:
- Calls `setState` with a controlled string.
- **Chain:**
  - `setState` calls `MyBase64.decode` and `deserialize`
  - `deserialize` calls `deserialize_v2`
  - `deserialize_v2` calls `decrypt` with a fixed key and then `readObject`

### PostgreSQL Driver:
- **Deserialization of Untrusted Data:**
  - Encrypted and Base64 encoded, then URL encoded twice.

### Privilege Escalation

#### Current State:
- RCE as the `horizon` user, but root access is desired.
- **First Step:** Modify `sudoers` file.

#### Techniques:
- **publishCaCert.hzn Script:**
  - Makes an input file readable/writable by the owner.
- **gatherConfig.hzn Script:**
  - Symlink `debugConfig.txt` to a root-owned file.

#### Targeting Sudoers:
- **Execute Permission by `horizon`:**
  - Show a root-owned file.
  - Show `horizon` permissions.
  - Gain root access.
  - Execute `publishCaCert` as root.

## Hekate Demo

### Results:
- No outbound network access required.
- Works on default installation.
- Pre-authenticated against server/client side.
- Achieves root access.
- Effective against VMware's cloud.

## Conclusions & Takeaways

### For Defenders/Developers:
- Avoid single points of failure.
- Adhere strictly to the OAuth2 specification.
- Disable new built-ins when implementing Freemarker.

### For Attackers/Pen-Testers:
- Always check protocol implementations for mistakes.
- Look for ways to chain primitives together.
- Persist in your efforts.

## References
1. [Oracle Access Manager Pre-Auth RCE (CVE-2021-35587)](https://testbnull.medium.com/oracle-access-manager-pre-auth-rce-cve-2021-35587-analysis-1302a4542316)
2. [Pre-Auth RCE in ForgeRock OpenAM (CVE-2021-35464)](https://portswigger.net/research/pre-auth-rce-in-forgerock-openam-cve-2021-35464)
3. [CSA VMware Access U/OO 195076 20](https://media.defense.gov/2020/Dec/07/2002547071/-1/1/0/CSA_VMWARE%20ACCESS_U_OO_195076_20.PDF)
4. [JDBC 4.2 Specification](https://download.oracle.com/otn-pub/jcp/jdbc-4_2-mrel2-spec/jdbc4.2-fr-spec.pdf)
5. [Make JDBC Attacks Brilliant Again](https://pyn3rd.github.io/2022/06/02/Make-JDBC-Attacks-Brilliant-Again/)
6. [Make JDBC Attacks Brilliant Again - Part I](https://pyn3rd.github.io/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/)
7. [How to Test SAML - A Methodology](https://epi052.gitlab.io/notes-to-self/blog/2019-03-07-how-to-test-saml-a-methodology/)
8. [How to Test SAML - A Methodology - Part Two](https://epi052.gitlab.io/notes-to-self/blog/2019-03-13-how-to-test-saml-a-methodology-part-two/)
9. [Duo Finds SAML Vulnerabilities Affecting Multiple Implementations](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations)

**Questions?**
@steventseeley  
PI:EMAIL