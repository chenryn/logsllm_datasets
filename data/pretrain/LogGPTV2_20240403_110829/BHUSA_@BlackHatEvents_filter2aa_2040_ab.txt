#BHUSA @BlackHatEvents
Information Classification: General
Exploiting CVE-2022-22954
Questions:
• Do we need to escape the Freemarker sandbox? No! new built-in available!
• Can we find a thrown Exception containing attacker-controlled data? Yes, 
inside of AuthContextPopulationInterceptor
Results:
✓ A single GET request for delivery
✓ Works on default installation
✓ Pre-authenticated
✓ Worked against VMWare's cloud
#BHUSA @BlackHatEvents
Information Classification: General
#BHUSA @BlackHatEvents
Information Classification: General
Hekate
Hekate is a triple bug chain RCE exploit:
Server-side
1. Access Control Service Authentication Bypass (CVE-2022-22956)
2. DBConnectionCheckController JDBC Injection (CVE-2022-22957)
3. gatherConfig.hzn Privilege Escalation (CVE-2022-22960)
Client-side
1. BrandingResource getBranding Information Disclosure (CVE-2022-22961)
2. DBConnectionCheckController CSRF (CVE-2022-22959)
3. gatherConfig.hzn Privilege Escalation (CVE-2022-22960)
#BHUSA @BlackHatEvents
Information Classification: General
Access Control Service Auth Bypass
The OAuth2TokenResourceController and OAuth2ActivateResource classes 
exposed two dangerous methods:
1. generateActivationToken
2. activateOauth2Client
These two methods allows a remote attacker to obtain a valid client_secret with 
the permissions of an already existing OAuth2 client.
To exploit this the target application needs to have default OAuth2 clients.
#BHUSA @BlackHatEvents
Information Classification: General
#BHUSA @BlackHatEvents
Information Classification: General
Access Control Service Auth Bypass
After exploiting this vulnerability, the attacker just uses a client_credentials grant for a 
complete authentication bypass!
#BHUSA @BlackHatEvents
Information Classification: General
Access Control Service Auth Bypass
After exploiting this vulnerability, the attacker just uses a client_credentials grant for a 
complete authentication bypass!
#BHUSA @BlackHatEvents
Information Classification: General
Access Control Service Auth Bypass
After exploiting this vulnerability, the attacker just uses a client_credentials grant for a 
complete authentication bypass!
#BHUSA @BlackHatEvents
Information Classification: General
Access Control Service Auth Bypass
After exploiting this vulnerability, the attacker just uses a client_credentials grant for a 
complete authentication bypass!
#BHUSA @BlackHatEvents
Information Classification: General
Access Control Service Auth Bypass
client_credentials 
code grant
#BHUSA @BlackHatEvents
Information Classification: General
• The Java API used to connect to different 
database technologies.
• JSR-221 specifies the API and states that
• drivers must implement java.sql.Driver.
• Increases attacker surface for attackers.
Java Database Connectivity (JDBC)
#BHUSA @BlackHatEvents
Information Classification: General
The class is mapped to dbCheck and removes CSRF protection!
DBConnectionCheckController JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
The dbCheck method is exposed via a POST request, expecting a jdbcUrl
DBConnectionCheckController JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
Input leads directly to DriverManager.getConnection sink!
DBConnectionCheckController JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
Several attacks against JDBC have been documented
• MySQL Driver Deserialization of Untrusted Data
• MySQL Driver Load Data Infile File Disclosure
• PostgreSQL Driver socketFactory/sslFactory Unsafe Unmarshalling
• PostgreSQL Driver loggerLevel/loggerFile Arbitrary File Write
• H2 Driver create alias/trigger Code Injection
• DB2 Driver /JCR Connector JNDI Injection
• Apache Derby Driver Deserialization of Untrusted Data
• MySQL Fabric Driver XXE
Exploiting JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
JDBC Injection is the new JNDI Injection
✓ MySQL Driver Deserialization of Untrusted Data
✓ MySQL Driver Load Data Infile File Disclosure
✓ PostgreSQL Driver socketFactory/sslFactory Unsafe Reflection
✓ PostgreSQL Driver loggerLevel/loggerFile Arbitrary File Write
• H2 Driver create alias/trigger Code Injection
• DB2 Driver /JCR Connector JNDI Injection
• Apache Derby Driver Deserialization of Untrusted Data
• MySQL Fabric Driver XXE
Exploiting JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
Exploiting JDBC Injection
Leveraging the MySQL Driver for Deserialization of Untrusted Data
Authentication Bypass
Outbound request to the attacker 
#BHUSA @BlackHatEvents
Information Classification: General
Exploiting JDBC Injection
Leveraging the PostgreSQL Driver for Unsafe Unmarshalling
Authentication Bypass
Not required to be valid
Outbound request 
to the attacker
#BHUSA @BlackHatEvents
Information Classification: General
Exploiting JDBC Injection
GET /poc.xml HTTP/1.1
HTTP/1.1 200
#BHUSA @BlackHatEvents
Information Classification: General
CommonsBeanUtils1 
gadget available
Requires no outbound 
network access
Can we do better?
#BHUSA @BlackHatEvents
Information Classification: General
LicenseChecker constructor calls setState with a controlled string
Exploiting JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
setState calls MyBase64.decode and deserialize
Exploiting JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
deserialize calls deserialize_v2
Exploiting JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
deserialize_v2 calls decrypt with a fixed key and then readObject
Exploiting JDBC Injection
#BHUSA @BlackHatEvents
Information Classification: General
Exploiting JDBC Injection
Leveraging the PostgreSQL Driver for Deserialization of Untrusted Data
Authentication Bypass
Encrypted and Base64 
encoded and then URL 
encoded twice
#BHUSA @BlackHatEvents
Information Classification: General
CommonsBeanUtils1 
gadget available
Requires no outbound 
network access
Yes, we can do 
better!
#BHUSA @BlackHatEvents
Information Classification: General
#BHUSA @BlackHatEvents
Information Classification: General
Privilege Escalation 
We have RCE as the horizon user, but we want root access! First stop, sudoers
#BHUSA @BlackHatEvents
Information Classification: General
This script will make an input file readable/writable by the owner!
Privilege Escalation - publishCaCert.hzn
#BHUSA @BlackHatEvents
Information Classification: General
To take ownership we can 
(ab)use the gatherConfig.hzn 
script.
Just symlink debugConfig.txt 
and point it to a root owned 
file, done!
Privilege Escalation - gatherConfig.hzn
#BHUSA @BlackHatEvents
Information Classification: General
We can target a script inside of the sudoers with execute permission by horizon
Privilege Escalation Exploitation
Showing a root owned file
#BHUSA @BlackHatEvents
Information Classification: General
We can target a script inside of the sudoers with execute permission by horizon
Privilege Escalation Exploitation
Showing horizon permissions
#BHUSA @BlackHatEvents
Information Classification: General
We can target a script inside of the sudoers with execute permission by horizon
Privilege Escalation Exploitation
Gaining root access
#BHUSA @BlackHatEvents
Information Classification: General
We can target a script inside of the sudoers with execute permission by horizon
Privilege Escalation Exploitation
Showing we can execute publishCaCert as root
#BHUSA @BlackHatEvents
Information Classification: General
Hekate Demo
#BHUSA @BlackHatEvents
Information Classification: General
Results:
✓ No outbound network access required
✓ Works on default installation
✓ Pre-authenticated against server/client side
✓ Achieves root access
✓ Worked against VMWare's cloud
Hekate
Conclusions & 
Takeaways
#BHUSA @BlackHatEvents
Information Classification: General
For the defender/developer
• Don't allow for your organization have a single point of failure
• Don't deviate from the OAuth2 spec, you will make a mistake!
• Disable the new built-in when implementing Freemarker
For the attacker/pen-tester
• Always check the implementation of protocols for mistakes
• Look for ways to chain primitives together
• Make giving up harder than giving in
Conclusions
#BHUSA @BlackHatEvents
Information Classification: General
1.
https://testbnull.medium.com/oracle-access-manager-pre-auth-rce-cve-2021-35587-analysis-
1302a4542316
2.
https://portswigger.net/research/pre-auth-rce-in-forgerock-openam-cve-2021-35464
3.
https://media.defense.gov/2020/Dec/07/2002547071/-1/-
1/0/CSA_VMWARE%20ACCESS_U_OO_195076_20.PDF
4.
https://download.oracle.com/otn-pub/jcp/jdbc-4_2-mrel2-spec/jdbc4.2-fr-spec.pdf
5.
https://pyn3rd.github.io/2022/06/02/Make-JDBC-Attacks-Brilliant-Again/
6.
https://pyn3rd.github.io/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/
7.
https://epi052.gitlab.io/notes-to-self/blog/2019-03-07-how-to-test-saml-a-methodology/
8.
https://epi052.gitlab.io/notes-to-self/blog/2019-03-13-how-to-test-saml-a-methodology-part-
two/
9.
https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations
References
Thanks! Questions?
@steventseeley
PI:EMAIL