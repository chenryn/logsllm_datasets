两个寄存器均是AVR的TWI外设所使用的寄存器，这也是本题的名字
为TWI（TwoWireInteface）的原因。本题的输入并非stdin或者UART
使用hapsim辅助调试，创建TM的Terminal，向程序发送数据
分析主函数，可以发现刚开始有一段会不停调用sub_62，这部分应
该是读取数据的部分，在这段内容之后下一个断点分析，如图30-10
和图30-11所示。
---
## Page 1103
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1103/1144
国
sub_62:
nou
r25,r24
ldi
r24，0xA4
TWCR,r24
out
1oc_65:
in
r0,TWCR
sbrs
ro,
7
rjmp
10c_65
国
in
r24,TWSR
1oc_69:
andi
r24,
0xF8
loc_6A:
cpi
r24,
8
loc_6B:
brne
10c_A2
---
## Page 1104
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1104/1144
图30-9
TW函数片段
adc
r3,r1
国
l0c_2F4:
cpi
r16,0x26
'&
cpc
r17,r1
brge
1oc_301
口
ldi
r24，0
ldi
r25，0
rcall
Sub_62
mouu
r30,r2
add
r30,r16
adc
r31,r17
st
2,r24
subi
r16,
-1
sbci
r17，-1
rjmp
10c_2F4
图30-10
下断点位置
---
## Page 1105
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1105/1144
OFEO
01F1
MOVW
R30.R16
R30,R2
without carry
+000002FC
1FF1
R31.R17
+000002FD
8380
Z+0,R24
Store indirect with displacenent
Add with carry
+000002FE
SFOF
SUBI
+000002FF
4F1F
SBCI
R17, 0xFF
R16,0xFF
Subtract innediate vith carry
Subtract imnediate
CFF3
RJMP
0x000C
Relative juap
01C1
NOVW
R24.R2
E660
LDI
R22.0x60
E070
LDI
Load innediate
0304
E045
LDI
R23, 0x00
R20, 0x05
Load innediate
Load
innediate
0305
E050
0084
LDI
RCALI
PC+0x0085
R21, 0x00
Relative call subroutine
Load innediate
9700
SBIW
R24,0x00
F009
BREQ
PC+0x02
PC+0x005A
Branch if equal
00308
C059
A18E
RJM
LDD
88+42
Relative junp
Conpare with innediate
Load indirect
vith displacenent
F009
378D
CPI
BREQ
R24.0x7D
RJIE
PC+0x0056
PC+0x02
Branch if equal
01C1
C055
OVW
R24.R2
Relative junp
RCALI
PC-0x0070
Relative call subroutine
Copy register pair
01E00
DF8F
01C1
BAO
PC-0x0064
R24,R2
Copy register pair
DF9B
2444
RCALL
CLR
8.4
Relative call subroutine
CLR
Clear Register
01F2
2455
IAON
R30,R4
R5
Copy register pair
Clear Register
9TE0
50E4
4FFE
SUBI
SBC1
R31,0xFF
R30, 0x04
Subtract innediate vith carry
Subtract imnediate
8160
LDD
R26,R4
R22,Z+0
01D2
HIOVE
1FBB
OFAA
ROL
TS7
R26
R.27
Rotate Left Through Carry
ETE000
DFALA
IFEE
LSL
ROL
F26
R27
Rotate Left Through Carry
图30-11AVRStudio中对应的断点位置
第1个陷阱：sub_A5实际上是一个TWI通信函数，在本题中与题
目无关，但在实际运行的时候会导致程序卡住，所以直接patch掉这
句！nop的机器码是oooo，Patch完后用AVRStudio重新加载程序，如
图30-12所示。
---
## Page 1106
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1106/1144
sub_103:
；CODE XREF:
94F8
cli
DFDE
rcall
sub E3
BE13
out
TCCRθ,r1
E288
ldi
r24,0x28
BF82
out
TCNT0,r24
E085
ldi
r24,5
BF83
out
TCCR0,r24
DFEE
rcall
Sub_F9
B816
out
ADCSRA,r1
E480
ldi
r24,
0x48
'@'
B987
out
ADMUX,r24
E880
ldi
r24，0x8@
8868
out
ACSR,r24
E88E
ldi
r24,0x8E
B986
out
ADCSRA,r24
BE16
out
TWCR,r1
nop掉这句
E08F
ldi
r24,0xF
0868
out
TWBR,r24
B811
out
TWSR,r1
B812
out
TWAR,r1
E484
ldi
r24，0x
D
BF86
out
TWCR,
DF8B
rcall
sub_A5
EA80
ldi
r24,
0xA0
E09F
ldi
r25,
0xF
E124
ldi
r18，0x14
E031
ldi
r19，1
图30-12nop程序的位置
第2个陷阱：此处有一个很长的二重循环，像是一个软件延时
且对调试并没有什么用，也需要全部nop掉，如图30-13所示。
---
## Page 1107
CTF特训营：技术详解、解题方法与
30.2UCTF2016资格赛：TWI
1107/1144
text:0000011E
10c_11E:
r30,r18
:CODE XREF:.txt:00000122↓j
text:00e8011E
1F9
novu
:Copy Register Word
text:0088811F
text:0000011F
loc_11F:
：CODE XREF:.text:08008120j
9731
sbiu
r30,1
F7F1
text:80080121978
sbiu
24,1
Branch if Hot Equal
Subtract Innediate fron Word
text:00000123
BE15
out
1ec_11E
text:00a0012h
F18
no
ICR,r1
ICUCR.r
Dut
Port
125
08
Patch Bytes
Pileoffset
ddress
Dx11F