level of authentication required at the authorization server. The 
authorization server may or may not respect these values.
Note All OpenID Connect authentication requests must have a scope parameter 
with the value openid.
CHAPTEr 6  OPEnID COnnECT (OIDC)
142
 Requesting User Attributes
OpenID Connect defines two ways to request user attributes. The client application can 
either use the initial OpenID Connect authentication request to request attributes or else 
later talk to a UserInfo endpoint hosted by the authorization server. If it uses the initial 
authentication request, then the client application must include the requested claims in 
the claims parameter as a JSON message. The following authorization grant request asks 
to include the user’s email address and the given name in the ID token: 
https://localhost:9443/oauth2/authorize?
        response_type=code&
        scope=openid&
        client_id=NJ0LXcfdOW20EvD6DU0l0p01u_Ya&
        redirect_uri=https://localhost/callback&
        claims={ "id_token":
                  {
                     "email": {"essential": true},
                     "given_name": {"essential": true},
                  }
        }
Note The OpenID Connect core specification defines 20 standard user claims. 
These identifiers should be understood by all of the authorization servers and client 
applications that support OpenID Connect. The complete set of OpenID Connect 
standard claims is defined in Section 5.1 of the OpenID Connect core specification, 
available at http://openid.net/specs/openid-connect-core-1_0.html.
The other approach to request user attributes is via the UserInfo endpoint. The 
UserInfo endpoint is an OAuth 2.0-protected resource on the authorization server. Any 
request to this endpoint must carry a valid OAuth 2.0 token. Once again, there are two 
ways to get user attributes from the UserInfo endpoint. The first approach is to use the 
OAuth access token. With this approach, the client must specify the corresponding 
attribute scope in the authorization grant request. The OpenID Connect specification 
defines four scope values to request attributes: profile, email, address, and phone. If 
the scope value is set to profile, that implies that the client requests access to a set of 
CHAPTEr 6  OPEnID COnnECT (OIDC)
143
attributes, which includes name, family_name, given_name, middle_name, nickname, 
preferred_username, profile, picture, website, gender, birthdate, zoneinfo, locale, and 
updated_at.
The following authorization grant request asks permission to access a user’s email 
address and phone number:
Note The UserInfo endpoint must support both HTTP GET and POST. All 
communication with the UserInfo endpoint must be over Transport Layer 
Security (TLS).
https://localhost:9443/oauth2/authorize?
        response_type=code
        &scope=openid phone email
        &client_id=NJ0LXcfdOW20EvD6DU0l0p01u_Ya
        &redirect_uri=https://localhost/callback
This results in an authorization code response. Once the client application has 
exchanged the authorization code for an access token, by talking to the token endpoint 
of the authorization server, it can use the access token it received to talk to the UserInfo 
endpoint and get the user attributes corresponding to the access token:
GET /userinfo HTTP/1.1
Host: auth.server.com
Authorization: Bearer SJHkhew870hooi90
The preceding request to the UserInfo endpoint results in the following JSON 
message, which includes the user’s email address and phone number:
HTTP/1.1 200 OK
Content-Type: application/json
  {
   "phone": "94712841302",
   "email": "PI:EMAIL",
  }
CHAPTEr 6  OPEnID COnnECT (OIDC)
144
The other way to retrieve user attributes from the UserInfo endpoint is through the 
claims parameter. The following example shows how to retrieve the email address of the 
user by talking to the OAuth-protected UserInfo endpoint:
POST /userinfo HTTP/1.1
Host: auth.server.com
Authorization: Bearer SJHkhew870hooi90
claims={ "userinfo":
                {
                    "email": {"essential": true}
                }
        }
Note Signing or encrypting the response message from the UserInfo endpoint 
isn’t a requirement. If it’s signed or encrypted, then the response should be 
wrapped in a JWT, and the Content-Type of the response should be set to 
application/jwt.
 OpenID Connect Flows
All the examples in this chapter so far have used an authorization code grant type to 
request an ID token—but it isn’t a requirement. In fact OpenID Connect, independent 
of OAuth 2.0 grant types, defined a set of flows: code flow, implicit flow, and hybrid flow. 
Each of the flows defines the value of the response_type parameter. The response_type 
parameter always goes with the request to the authorize endpoint (in contrast the grant_
type parameter always goes to the token endpoint), and it defines the expected type of 
response from the authorize endpoint. If it is set to code, the authorize endpoint of the 
authorization server must return a code, and this flow is identified as the authorization 
code flow in OpenID Connect.
For implicit flow under the context of OpenID Connect, the value of response_type 
can be either id_token or id_token token (separated by a space). If it’s just id_token, 
then the authorization server returns an ID token from the authorize endpoint; if it 
includes both, then both the ID token and the access token are included in the response.
CHAPTEr 6  OPEnID COnnECT (OIDC)
145
The hybrid flow can use different combinations. If the value of response_type is set 
to code id_token (separated by a space), then the response from the authorize endpoint 
includes the authorization code as well as the id_token. If it’s code token (separated 
by a space), then it returns the authorization code along with an access token (for 
the UserInfo endpoint). If response_type includes all three (code token id_token), 
then the response includes an id_token, an access token, and the authorization code. 
Table 6-1 summarizes this discussion.
Table 6-1. OpenID Connect Flows
Type of Flow
response_type
Tokens Returned
Authorization code
code
Authorization code
Implicit
id_token
ID token
Implicit
id_token token
ID token and access token
Hybrid
code id_token
ID token and authorization code
Hybrid
code id_token token
ID token, authorization code, and access token
Hybrid
code token
Access token and authorization code
Note When id_token is being used as the response_type in an OpenID 
Connect flow, the client application never has access to an access token. In such a 
scenario, the client application can use the scope parameter to request attributes, 
and those are added to the id_token.
 Requesting Custom User Attributes
As discussed before, OpenID Connect defines 20 standard claims. These claims can 
be requested via the scope parameter or through the claims parameter. The only way 
to request custom-defined claims is through the claims parameter. The following is a 
sample OpenID Connect request that asks for custom-defined claims: 
https://localhost:9443/oauth2/authorize?response_type=code
        &scope=openid
        &client_id=NJ0LXcfdOW20EvD6DU0l0p01u_Ya
CHAPTEr 6  OPEnID COnnECT (OIDC)
146
        &redirect_uri=https://localhost/callback
        &claims=
          { "id_token":
           {
            "http://apress.com/claims/email": {"essential": true},
            "http://apress.com/claims/phone": {"essential": true},
           }
         }
 OpenID Connect Discovery
At the beginning of the chapter, we discussed how OpenID relying parties discover 
OpenID providers through the user-provided OpenID (which is a URL). OpenID Connect 
Discovery addresses the same concern, but in a different way (see Figure 6-2). In order to 
authenticate users via OpenID Connect, the OpenID Connect relying party first needs to 
figure out what authorization server is behind the end user. OpenID Connect utilizes the 
WebFinger (RFC 7033) protocol for this discovery. 
Note The OpenID Connect Discovery specification is available at http://
openid.net/specs/openid-connect-discovery-1_0.html. If a given 
OpenID Connect relying party already knows who the authorization server is, it can 
simply ignore the discovery phase.
CHAPTEr 6  OPEnID COnnECT (OIDC)
147
Let’s assume a user called Peter visits an OpenID Connect relying party and wants 
to log in (see Figure 6-2). To authenticate Peter, the OpenID Connect relying party 
should know the authorization server corresponding to Peter. To discover this, Peter 
has to provide to the relying party some unique identifier that relates to him. Using this 
identifier, the relying party should be able to find the WebFinger endpoint corresponding 
to Peter.
Let’s say that the identifier Peter provides is his email address, PI:EMAIL 
(step 1). The relying party should be able to find enough detail about the WebFinger 
endpoint using Peter’s email address. In fact, the relying party should be able to derive 
the WebFinger endpoint from the email address. The relying party can then send a 
query to the WebFinger endpoint to find out which authorization server (or the identity 
provider) corresponds to Peter (steps 2 and 3). This query is made according to the 
WebFinger specification. The following shows a sample WebFinger request for peter@
apress.com:
GET /.well-known/webfinger?resource=acct:PI:EMAIL
&rel=http://openid.net/specs/connect/1.0/issuer HTTP/1.1
Host: apress.com
Figure 6-2. OpenID Connect Discovery
CHAPTEr 6  OPEnID COnnECT (OIDC)
148
The WebFinger request has two key parameters: resource and rel. The resource 
parameter should uniquely identify the end user, whereas the value of rel is fixed for 
OpenID Connect and must be equal to http://openid.net/specs/connect/1.0/
issuer. The rel (relation-type) parameter acts as a filter to determine the OpenID 
Connect issuer corresponding to the given resource. 
A WebFinger endpoint can accept many other discovery requests for different 
services. If it finds a matching entry, the following response is returned to the OpenID 
Connect relying party. The value of the OpenID identity provider or the authorization 
server endpoint is included in the response:
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: application/jrd+json
{
    "subject":"acct:PI:EMAIL",
    "links":[
              {
                 "rel":"http://openid.net/specs/connect/1.0/issuer",
                 "href":"https://auth.apress.com"
              }
            ]
}
Note neither the WebFinger nor the OpenID Connect Discovery specification 
mandates the use of the email address as the resource or the end user identifier. It 
must be a UrI that conforms to the UrI definition in rFC 3986, which can be used 
to derive the WebFinger endpoint. If the resource identifier is an email address, 
then it must be prefixed with acct. 
The acct is a UrI scheme as defined in http://tools.ietf.org/html/
draft-ietf-appsawg-acct-uri- 07. When the acct UrI scheme is being 
used, everything after the @ sign is treated as the hostname. The WebFinger 
hostname is derived from an email address as per the acct UrI scheme, which is 
the part after the @ sign. 
CHAPTEr 6  OPEnID COnnECT (OIDC)
149
If a UrL is being used as the resource identifier, the hostname (and port number) 
of the UrL is treated as the WebFinger hostname. If the resource identifier is 
https://auth.server.com:9443/prabath, then the WebFinger hostname is 
auth.server.com:9443.
Once the endpoint of the identity provider is discovered, that concludes the role of 
WebFinger. Yet you don’t have enough data to initiate an OpenID Connect authentication 
request with the corresponding identity provider. You can find more information about 
the identity provider by talking to its metadata endpoint, which must be a well-known 
endpoint (steps 4 and 5 in Figure 6-2). After that, for the client application to talk to the 
authorization server, it must be a registered client application. The client application 
can talk to the client registration endpoint of the authorization server (steps 6 and 7) to 
register itself—and then can access the authorize and token endpoints (steps 8 and 9).
Note Both the WebFinger and OpenID Connect Discovery specifications use 
the Defining Well-Known UrIs (http://tools.ietf.org/html/rfc5785) 
specification to define endpoint locations. The rFC 5785 specification introduces 
a path prefix called /.well-known/ to identify well-known locations. Most of the 
time, these locations are metadata endpoints or policy endpoints. 
The WebFinger specification has the well-known endpoint /.well-known/
webfinger. The OpenID Connect Discovery specification has the well-known 
endpoint for OpenID provider configuration metadata, /.well-known/openid-
configuration.
 OpenID Connect Identity Provider Metadata
An OpenID Connect identity provider, which supports metadata discovery, should host 
its configuration at the endpoint /.well-known/openid-configuration. In most cases, 
this is a nonsecured endpoint, which can be accessed by anyone. An OpenID Connect 
relying party can send an HTTP GET to the metadata endpoint to retrieve the OpenID 
provider configuration details as follows: 
GET /.well-known/openid-configuration HTTP/1.1
Host: auth.server.com
CHAPTEr 6  OPEnID COnnECT (OIDC)
150
This results in the following JSON response, which includes everything an OpenID 
Connect relying party needs to know to talk to the OpenID provider or the OAuth 
authorization server:
HTTP/1.1 200 OK
Content-Type: application/json
{
  "issuer":"https://auth.server.com",
  "authorization_endpoint":"https://auth.server.com/connect/authorize",
  "token_endpoint":"https://auth.server.com/connect/token",
   "token_endpoint_auth_methods_supported":["client_secret_basic", "private_
key_jwt"],
  "token_endpoint_auth_signing_alg_values_supported":["RS256", "ES256"],
   "userinfo_endpoint":"https://auth.sever.com/connect/userinfo",
  "check_session_iframe":"https://auth.server.com/connect/check_session",
  "end_session_endpoint":"https://auth.server.com/connect/end_session",
  "jwks_uri":"https://auth.server.com/jwks.json",
  "registration_endpoint":"https://auth.server.com/connect/register",
   "scopes_supported":["openid", "profile", "email", "address", "phone", 
"offline_access"],
   "response_types_supported":["code", "code id_token", "id_token", "token 
id_token"],
   "acr_values_supported":["urn:mace:incommon:iap:silver", "urn:mace:incommo
n:iap:bronze"],
  "subject_types_supported":["public", "pairwise"],
  "userinfo_signing_alg_values_supported":["RS256", "ES256", "HS256"],
  "userinfo_encryption_alg_values_supported":["RSA1_5", "A128KW"],
  "userinfo_encryption_enc_values_supported":["A128CBC-HS256", "A128GCM"],
  "id_token_signing_alg_values_supported":["RS256", "ES256", "HS256"],
  "id_token_encryption_alg_values_supported":["RSA1_5", "A128KW"],
  "id_token_encryption_enc_values_supported":["A128CBC-HS256", "A128GCM"],
  "request_object_signing_alg_values_supported":["none", "RS256", "ES256"],
  "display_values_supported":["page", "popup"],
  "claim_types_supported":["normal", "distributed"],
  "claims_supported":["sub", "iss", "auth_time", "acr",
                       "name", "given_name", "family_name", "nickname",
CHAPTEr 6  OPEnID COnnECT (OIDC)
151
                       "profile", "picture", "website","email",
                       "email_verified",
                       "locale", "zoneinfo",
                       "http://example.info/claims/groups"],
   "claims_parameter_supported":true,
   "service_documentation":"http://auth.server.com/connect/service_
documentation.html",
  "ui_locales_supported":["en-US", "fr-CA"]
}
Note If the endpoint of the discovered identity provider is https://auth.
server.com, then the OpenID provider metadata should be available at 
https://auth.server.com/.well-known/openid-configuration. 
If the endpoint is https://auth.server.com/openid, then the metadata 
endpoint is https://auth.server.com/openid/.well-known/openid- 
configuration.
 Dynamic Client Registration
Once the OpenID provider endpoint is discovered via WebFinger (and all the metadata 