    :::
[*`front_merges`*]{.term}
:   ::: para
    如果您找到负载永远不会生成前合并，则您可以将这个可调参数设定为
    `0`{.literal}。除非您已了解这个检查的代价，建议将其设定为默认值，即
    `1`{.literal}。
    :::
[*`read_expire`*]{.term}
:   ::: para
    这个可调参数可让您已毫秒为单位设定读取操作速度。默认将其设定为
    `500`{.literal} 毫秒（即半秒）。
    :::
[*`write_expire`*]{.term}
:   ::: para
    这个可调参数可让您已毫秒为单位设定写入操作速度。默认将其设定为
    `5000`{.literal} 毫秒（即五秒）。
    :::
[*`writes_starved`*]{.term}
:   ::: para
    这个可调参数控制处理单一写入批之前可以处理多少读取批。这个值越高，越倾向于读取操作。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#main-io.html#idm140329770167824}6.4.3. Noop {.title}
:::
::: para
Noop I/O
调度程序采用先入先出（FIFO）调度算法。合并原始块层中的请求，但只是一个最后命中缓存（last-hit
cache）。如果系统与 CPU 捆绑，且使用高速存储，这就是可以使用的最佳 I/O
调度程序。
:::
::: para
以下是块层中可以使用的可调参数。
:::
::: variablelist
**/sys/block/sdX/queue 可调参数**
[add_random]{.term}
:   ::: para
    在某些情况下，熵池中用于 `/dev/random`{.filename} 的 I/O
    事件成本是可以测量的。在某些情况下要求将其设定为 0。
    :::
[*`max_sectors_kb`*]{.term}
:   ::: para
    默认将发送到磁盘的最大请求设定为 `512`{.literal}
    KB。这个可调参数可用来增大或者减小该值。最小值为逻辑块大小；最大值由
    *`max_hw_sectors_kb`* 设定。有些 SSD 会在 I/O
    大小超过内部删除块大小时性能下降。在此类情况下建议将
    *`max_hw_sectors_kb`* 降低到删除块大小。您可以使用类似
    [**iozone**]{.application} 或者 [**aio-stress**]{.application} 的
    I/O 生成程序对此进行测试，记录大小可从 `512`{.literal} 字节到
    `1`{.literal} MB 不等。
    :::
[*`nomerges`*]{.term}
:   ::: para
    这个可调参数主要用于故障排除。大多数负载都可从请求合并中获益（即使类似
    SSD
    的告诉存储也是如此）。但在有些情况下要求禁用合并，比如当您要查看存储后端可处理多少
    IOPS 而无需禁用预读或者执行随机 I/O 时。
    :::
[*`nr_requests`*]{.term}
:   ::: para
    每个请求队列都有可为每个读和写 I/O
    分配的请求描述符总数限制。这个数的默认值为
    `128`{.literal}，即在将某个进程转入睡眠模式时可将 128 个读和 128
    个写放入队列。转入睡眠模式的进程是下一个要分配请求的进程，不一定是已分配所有可用请求的进程。
    :::
    ::: para
    如果您一个对延迟敏感的程序，则应考虑在您的请求队列中降低
    *`nr_requests`*
    值，并将存储中的命令队列深度降低到较低的数值（甚至可以降低为
    `1`{.literal}），这样写回 I/O
    就无法分配所有可用请求描述符，并使用写入 I/O
    设备队列填满该设备。分配 *`nr_requests`* 后，所有其他尝试执行 I/O
    的进程都会转入睡眠模式等待请求可用。这样更为公平，因为这样会以轮循模式分配请求（而不是让一个进程很快消耗完所有资源）。注：只有在使用最后期限或者
    noop 调度程序时才会有此问题，因为默认 CFQ 配置可防止出现此类情况。
    :::
[*`optimal_io_size`*]{.term}
:   ::: para
    在有些情况下，底层存储会报告最佳 I/O 大小。这在硬件和软件 RAID
    中很常见，其中最佳 I/O
    大小是条大小。如果报告该值，则程序应该发出以及最佳 I/O
    大小相当会长成倍数的大小的 I/O。
    :::
[*`read_ahead_kb`*]{.term}
:   ::: para
    操作系统可探测到程序何时从文件或者磁盘中连续读取数据。在这种情况下，它可执行智能预读算法，因此用户可能会要求从磁盘中读取更多数据。因此当用户下一步尝试读取数据块时，它已经在操作系统的页缓存中了。可能的缺点是操作系统可能从磁盘中读取过多数据，这样就会占用页缓存直到高内存压力将其清除。如果有多个进程执行错误预读就会增加这种情况下的内存压力。
    :::
    ::: para
    对于设备映射器设备，一般应该增大 *`read_ahead_kb`* 值，比如
    `8192`{.literal}。理由是设备映射器设备通常有多个基础设备组成。将其设定为默认的值（`128`{.literal}
    KB）然后乘以要映射的设备数是个好的调整起点。
    :::
[*`rotational`*]{.term}
:   ::: para
    传统硬盘一般都采用轮换模式（比如转盘）。但 SSD 不是。大多数 SSD
    会以适当的方式进行宣传。但如果您遇到设备没有说明有此功能，则可能需要手动将轮换模式设定为
    `0`{.literal}；禁用轮换模式后，I/O
    提升程序就不使用要减少查询的逻辑，因为在非轮换介质中会有少量查询操作罚分。
    :::
[*`rq_affinity`*]{.term}
:   ::: para
    可在与发出 I/O 不同的 CPU 中处理 I/O。将 *`rq_affinity`* 设定为
    `1`{.literal} 可让内核向发出 I/O 的 CPU 传递完成信息。这样可以改进
    CPU 数据缓存效果。
    :::
:::
:::
:::
:::
[]{#main-fs.html}
::: chapter
::: titlepage
# [⁠]{#main-fs.html#main-fs}第 7 章 文件系统 {.title}
:::
::: para
阅读本章对支持使用红帽企业版 Linux
的文件系统有一个大致了解，并了解如何优化其性能。
:::
::: section
::: titlepage
# [⁠]{#main-fs.html#idm140329753761888}7.1. 为文件系统调整注意事项 {.title}
:::
::: para
在所有文件系统有一些通用的注意事项：文件系统中选择的格式化和挂载选项，程序可使用的提高其在所在系统中性能的动作。
:::
::: section
::: titlepage
## [⁠]{#main-fs.html#idm140329722031616}7.1.1. 格式化选项 {.title}
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
文件系统块大小
:::
可在执行 `mkfs`{.command}
时选择块大小。不同的系统其有效范围各有不同：上限为主机系统的最大页大小，下限取决于所使用的文件系统。默认块大小适用于大多数情况。
:::
::: para
如果您希望创建大量小于默认块大小的块，您可以设定较小的块大小以尽量减少磁盘空间浪费。注：但设定较小的块大小可能会限制该文件系统中的最大块，并可以造成额外运行费用，特别是对那些比所选块大小更大的块。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
文件系统几何学
:::
如果您的系统使用带状存储，比如 RAID5，您可以通过在执行 `mkfs`{.command}
时将数据和元数据与基础存储几何对其提高其性能。对于软件 RAID（LVM 或者
MD）以及有些企业级存储，可查询并自动设置这些信息，但在很多情况下必须由管理员在命令行中使用
`mkfs`{.command} 手动设定。
:::
::: para
有关创建和维护这些文件系统的信息请参考*《存储管理指南》*。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
外部日志
:::
需要大量使用元数据的负载意味着日志文件系统（比如 ext4 和 XFS）的 log
部分会非常频繁地更新。要尽量减少文件系统查询日志的时间，您可以将日志放在专用存储中。注：如果将日志放在速度比主文件系统慢外部存储中可抵消所有可能的与使用外部存储有关的优势。
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
确定您的外部日志是可靠的。丢失任何外部日志文件都可能造成文件系统死机。
:::
:::
:::
::: para
外部日志在运行 `mkfs`{.command}
时创建，并要在挂载时指定日志设备。有关详情请参考
`mke2fs(8)`{.command}、`mkfs.xfs(8)`{.command} 和 `mount(8)`{.command}
man page。
:::
:::
::: section
::: titlepage
## [⁠]{#main-fs.html#idm140329767128336}7.1.2. 挂载选项 {.title}
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
Barriers
:::
写入 barrier
是保证在永久存储中正确写入并排列文件系统元数据的内核机制，即使在存储设备会经常断电的情况也不例外。启用了写入
barrier 的文件系统还可以保证在断电时保存使用 `fsync()`{.methodname}
进行的所有数据传输。红帽企业版 Linux 默认在所有支持此功能的硬件上启用
barrier。
:::
::: para
但启用写入 barrier 可显著延缓一些程序的速度，特别是使用很多
`fsync()`{.methodname}
的程序，或者延缓创建和删除大量小文件的速度。对于没有不稳定写入缓存的存储，或者罕见的文件系统不一致的情况以及断电后出现可以承受的数据丢失，可使用
*`nobarrier`* 挂载选项禁用 barrier。有关详情请参考*《存储管理指南》*。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
访问时间（noatime）
:::
以前在读取文件时，对那个文件的访问时间（*`atime`*）必须在内节点元数据中更新，这样就造成额外的
I/O 写入操作。如果不需要准确的 *`atime`* 元数据，则请使用 *`noatime`*
选项挂载该文件系统以便消除这些元数据更新。但在大多数情况下，鉴于红帽企业版
Linux 6内核的默认相对 atime（或者 *`relatime`*）行为，*`atime`*
不是一个大的消耗。*`relatime`* 行为只在原有 *`atime`*
比修改时间（*`mtime`*）或者状态更改时间（*`ctime`*）旧时更新
*`atime`*）。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
启用 *`noatime`* 选项还可以启用 *`nodiratime`* 行为。但不需要同时设置
*`noatime`* 和 *`nodiratime`*。
:::
:::
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
增加的预读支持
:::
预读可通过预先附加数据并将其载入页面缓存以便提前在内存中而不是磁盘中可用，籍此提高文件访问速度。有些负载，比如那些涉及连续
I/O 大量流操作的负载可得益于高的预读值。
:::
::: para
[**tuned**]{.application} 工具以及使用 LVM
条带功能可提高预读值，但对有些负载还是不够的。另外，红帽企业版 Linux
不总是可以根据它可以探测到的您的文件系统设定恰当的预读值。例如：如果一个强大的存储阵列在红帽企业版
Linux 中只作为单一强大 LUN 出现，则操作系统会将其视为强大的 LUN
阵列，并因此默认不会充分利用该存储可以使用的预读优势。
:::
::: para
请使用 `blockdev`{.command}
命令查看并编辑预读值。要查看某个块设备的当前预读值，请运行：
:::
``` screen
# blockdev -getra device
```
::: para
要修改那个块设备的预读值，请运行以下命令。*N* 代表 512
字节扇区中的数值。
:::
``` screen
# blockdev -setra N device
```
::: para
注：使用 `blockdev`{.command}
命令选择的值重启后不会保留。我们建议创建一个运行等级 `init.d`{.filename}
脚本在引导时设定这个值。
:::
:::
::: section
::: titlepage
## [⁠]{#main-fs.html#idm140329741852480}7.1.3. 文件系统维护 {.title}