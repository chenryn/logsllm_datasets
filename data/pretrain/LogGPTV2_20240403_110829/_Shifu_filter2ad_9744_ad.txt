    Software\Microsoft\Windows\CurrentVersion\explorer\Browser Helper Objects\{BB62FFF4-41CB-4AFC-BB8C-    2A4D4B42BBDC}
    Software\Microsoft\Internet Explorer\MainEnable Browser Extensions
    httpd.exe
    %s\httpd.exe
    connect
    data\index.php
    logs\error.log
    error.log
    n
    [type=post]n
    [type=screen]n
    [type=knock]n
    74??834E0440B832FFFFFF
    74??834E04405F5EB832FFFFFF
    DEBUG
    memory.dmp
    config.xml
    php5ts.dll
    zend_stream_fixup
    zend_compile_file
    index.php
    config.php
    content.php
    iexplore.exe|firefox.exe|chrome.exe|opera.exe|browser.exe|dragon.exe|epic.exe|sbrender.exe|vivaldi.exe|maxthon.exe|ybr
    owser.exe|microsoftedgecp.exe
    InternetQueryDataAvailable
    InternetReadFileInternetReadFileExA
    InternetReadFileExW
    InternetSetStatusCallbackA
    InternetSetStatusCallbackW
    HttpSendRequestAHttpSendRequestExA
    HttpSendRequestExW
    HttpSendRequestWrn0rnrn
    .rdata
    rnrnHTTP/1.
    Transfer-Encoding
    chunked
    Content-Length
    close
    Proxy-ConnectionHostAccept-Encoding
    x-xss-protectionx-content-security-policy
    x-frame-options
    x-content-type-options
    If-Modified-Since
    If-None-Match
    content-security-policy
    x-webkit-cspConnection
    http://
    https://NSS layer
    Content-TypeBasic 
    PR_ClosePR_Connect
    PR_GetNameForIdentity
    PR_Read
    PR_SetError
    PR_WriteReferer: 
    Accept-Encoding:rn1406SOFTWAREMicrosoftWindowsCurrentVersionInternet SettingsZones3
    data_afterndata_beforen
    data_enddata_injectn
    set_url %BOTID%
    %BOTNET%InternetCloseHandle
    HTMLc:\inject.txt
    Dalvik/1.6.0 (Linux; U; Android 4.1.2; GT-N7000 Build/JZO54K)
    xxx_process_0x%08x
    Common.js
**API混淆**
Main payload用Push-Calc-Ret混淆的技术混淆API。在main
payload注入到svchost进程中后真实API函数的调用被修改。当一个函数被调用时，用一个计算真实函数地址的跳板函数代替。所有的跳板函数被存储在数组中。
例如，main payload想要调用CreateFile()，但是调用已经被修改了。现在将调用跳板函数如下：
    00846110   PUSH 2B464C25
    00846115   PUSHFD
    00846116   XOR DWORD PTR SS:[ESP+4], 5DB5E13F
    0084611E   POPFD
    0084611F   RETN
首先，一个值被压栈。然后把标志寄存器都压栈，因为XOR指令会影响很多标志寄存器。然后之前压栈的值与另一个值异或得到真实的API地址。最后恢复标致寄存器，用RETN执行真实的函数地址。
**持续性的方法**
Main
payload拷贝原始混淆的loader文件到%ProgramData%文件夹中，文件名用GetTickCount()函数获得。然后，它在当前用户的启动目录创建一个“Common.js”的JScript文件。文件包含以下代码，能在系统重启后自动运行原始loader：
    var yqvltidpue = new ActiveXObject("WScript.Shell");
    yqvltidpue.Run("C:\PROGRA~3\930d4a6d.exe")
**main payload与前一个版本的变化**
之前版本的Shifu被FireEye和Fortinet报告过。
在和之前版本的比较中，用计算机名、用户名、安装日期和系统磁盘序列号创建的字符串变多了：
    TREASURE
    BUH
    BANK
    ACCOUNT
    CASH
    FINAN
    MONEY
    MANAGE
    OPER
    DIRECT
    ROSPIL
    CAPO
    BOSS
    TRADE
更新的命令：
    active_sk
    deactive_sk
    deactivebc
    get_keylog
    get_sols
    inject
    kill_os
    load
    mitm_geterr
    mitm_mod
    mitm_script
    wipe_cookies
目标浏览器更新：
    iexplore.exe
    firefox.exe
    chrome.exe
    opera.exe
    browser.exe
    dragon.exe
    epic.exe
    sbrender.exe
    vivaldi.exe
    maxthon.exe
    ybrowser.exe
    microsoftedgecp.exe
main payload将从C&C服务器下载Apache的httpd.exe服务器，存储在磁盘上用来web注入。比较之前的版本，main
payload也包含了暗示Zend PHP框架功能的字符串：
    zend_stream_fixup
    zend_compile_file
**在svchost中挂钩函数**
和之前版本一样，恶意程序挂钩一些API函数来重定向URL，捕捉网络流量和键盘记录。它用5字节inline hook方法挂钩 API。被挂钩的API如下：
    NtDeviceIoControlFile (ntdll.dll)
    ZwDeviceIoControlFile (ntdll.dll)
    GetClipboardData (user32.dll)
    GetMessageA (user32.dll)
    GetMessageW (user32.dll)
    TranslateMessage (user32.dll)
    GetAddrInfoExW (ws2_32.dll)
    gethostbyname (ws2_32.dll)
    getaddrinfo (ws2_32.dll)
**网络功能**
Main payload用顶级域名.bit，它是一个基于Namecoin架构的分散的DNS系统。恶意程序请求的IP地址如下：
    92.222.80.28
    78.138.97.93
    77.66.108.93
C&C服务器域名名字，user-agent字符串和URL参数被修改版RC4算法加密。解密字符串如下：
    klyatiemoskali.bit
    slavaukraine.bit
    Mozilla/5.0 (Windows; U; Windows NT 5.2 x64; en-US; rv:1.9a1) Gecko/20061007 Minefield/3.0a1
    L9mS3THljZylEx46ymJ2eqIdsEguKC15KnyQdfx4RTcVu8gCT
    https://www.bing.com
    /english/imageupload.php
    /english/userlogin.php
    /english/userpanel.php
    1brz
加密的字符串用下面的格式存储在.data节中：
“klyatiemoskali“简单翻译的意思是希望坏事降临莫斯科。第二个字符串“slavaukraine”意思是保佑乌克兰。RC4的密码“L9mS3THljZylEx46ymJ2eqIdsEguKC15KnyQdfx4RTcVu8gCT”被用于加密网络流量。
在分析时，只有下面的DNS服务器还有响应：
    77.66.108.93 (ns1.dk.dns.d0wn.biz)
图5. 77.66.108.93 Namecoin DNS服务器信息
下图是分析Shifu的网络流量的截图：
图6. Wireshark捕获流量的截图
我们能看见访问klyatiemoskali.bit能获得IP地址。在C&C服务器响应后，使用TLS握手协议开启一个加密通道。最后，它发送加密数据并获得加密结果。然而，没有更多的网络流量被捕获到了。klyatiemoskali.bit
and slavaukraine.bit都被解析到103.199.16.106的IP地址。
因为.bit顶级域名依赖的Namecoin系统是基于比特币系统的，每个业务都能被跟踪。因此，我们用一个Namecoin浏览器查看.bit域名和所属的IP地址。例如，如果我们用网络服务namecha.in，我们得到关于klyatiemaskali.bit的信息：
我们同样能看到关于slavaukraine.bit的信息：
所有的域名都是在2016-06-03注册的，只有一个IP地址与他们对应。这个IP地址符合我们捕捉到的网络流量。而且我们能看见这个域名似乎还存活着。
**与C &C服务器的查询字符串**
Main payload包含了一个查询字符串的模版，用来向C&C服务器发送受害者的信息：
    botid=%s&ver=%s.%u&up=%u&os=%u&ltime=%s%d&token=%d&cn=%s&av=%s&dmn=%s&mitm=%u
我们能够看到一些动态获取的信息（bot标识，更新时间，操作系统版本，本地时间戳，令牌，反病毒软件，工作站域名，中间人拦截检测），同时也能看到一些像bot版本和campaign名的静态值，例子如下：
    botid=26C47136!A5A4B18A!F2F924F2&ver=1.759&up=18294&os=6110&ltime=-8&token=0&cn=1brz&av=&dmn=&mitm=0
我们能看到Shifu的内部版本是“1.759”和campaign名为“1brz”。
如果我们将Shifu的查询字符串和2014年2月发现的最新版本的Shiz（内部版本是5.6.25）的比较，我们能看见相似之处：
    botid=%s&ver=5.6.25&up=%u&os=%03u&ltime=%s%d&token=%d&cn=sochi&av=%s
**修改的RC4加密算法**
Shifu使用了一个修改过的RC4加密算法。我们用Python重构了算法并以“klyatiemoskali.bit”域名的加密展示为例：
    import os
    import binascii
    ###initial values##########
    string = "klyatiemoskali.bit"
    seed = 
    "fnbqooqdaixfueangywblgabirdgvkewdyqgfqaioluesyrpryfkjerfsouemaxnavrkguxmcmhckwprunurmhehclermtufwi
    yjbqhwlunbunuumeowfjmerxppxrgaxukyx"
    buffer = [0] * (len(string))
    table_encr = [0] * 0x102
    table_encr[0x100] = 1
    table_encr[0x101] = 0
    ###########################
    ###string2buffer###########
    i = 0
    while (i<len(string)):
        char_1 = string[i]
        int_1 = ord (char_1)
        buffer[i] = int_1
        i += 1
    ###string2buffer###########
    ###encryption table########
    i = 0
    while (i < 0x100):
        table_encr[i] = 0x000000ff&i
        i += 1
    i = 0
    j = 0
    while (i < 0x100):
        char_1 = seed[j]
        int_2 = ord (char_1)
        table_encr[i] ^= int_2
        i += 1
        j += 1
        if (j == len(seed)):
            j = 0
    ###########################
    ###encryption##############
    size_1 = len(string)
    i = 0
    while (size_1 != 0):
        byte_buf = buffer[i]
        ind_1 = table_encr[0x100]
        ind_2 = table_encr[ind_1]
        ind_3 = 0x000000ff&(ind_2 + table_encr[0x101])
        ind_4 = 0x000000ff&(table_encr[ind_3])
        table_encr[ind_1] = ind_4
        table_encr[ind_3] = ind_2
        buffer[i] = 0x000000ff&(table_encr[0x000000ff&(ind_2 + ind_4)] ^ byte_buf)
        table_encr[0x100] = 0x000000ff&(ind_1 + 1)
        table_encr[0x101] = ind_3
        i += 1
        size_1 -= 1
    i = 0
    str_1 = ""
    while (i < len(string)):
        str_1 = str_1 + chr(buffer[i])
        i += 1
    ###########################
    ###output##################
    print ("Cleartext string: %s" % string)
    print ("Encrypted: 0x%s" % binascii.hexlify(str_1)) 
    ###########################