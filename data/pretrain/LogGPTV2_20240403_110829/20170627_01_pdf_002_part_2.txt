If you want to set default values for ‘configure’ scripts to share, you can create a site shell script
called ‘config.site’ that gives default values for variables like ‘CC’, ‘cache_file’, and ‘prefix’.
‘configure’ looks for ‘PREFIX/share/config.site’ if it exists, then ‘PREFIX/etc/config.site’ if it
exists. Or, you can set the ‘CONFIG_SITE’ environment variable to the location of the site script.
A warning: not all ‘configure’ scripts look for a site script.
Operation Controls
==================
‘configure’ recognizes the following options to control how it operates.
Copyright'2005, Purdue University 7
SP-GiSTv1.0 User Manual
‘--cache-file=FILE’
Use and save the results of the tests in FILE instead of ‘./config.cache’. Set FILE to ‘/dev/null’ to
disable caching, for debugging ‘configure’.
‘--help’
Print a summary of the options to ‘configure’, and exit.
‘--quiet’
‘--silent’
‘-q’
Do not print messages saying which checks are being made. To suppress all normal output,
redirect it to ‘/dev/null’ (any error messages will still be shown).
‘--srcdir=DIR’
Look for the package’s source code in directory DIR. Usually ‘configure’ can determine that
directory automatically.
‘--version’
Print the version of Autoconf used to generate the ‘configure’ script, and exit. ‘configure’ also
accepts some other, not widely useful, options.
Copyright'2005, Purdue University 8
SP-GiSTv1.0 User Manual
GETTING STARTED
Loading SP-GiST core and extensions modules
The SP-GiST core module and extension modules are installed by default under $pgdir/lib ,
where $pgdir is the PostgreSQL installation prefix. SP-GiST for PostgreSQL distribution is
shipped with some support scripts to simplify the process of loading and configuring the modules.
To load SP-GiST core module all you need to is to invoke the following command:
psql  ON  USING spgist ( 
 );
Example:
CREATE INDEX example_idx ON example_tbl USING spgist( str spgist_trieword_ops);
Copyright'2005, Purdue University 9
SP-GiSTv1.0 User Manual
WRITING SP-GIST EXTENSIONS
SP-GiST extension is a set of functions that realize certain index structure and define the exact
behavior of the index. We provide four extensions with the release of version 1 which are, spgist-
kd, spgist-pquad, spgist-pmrquad, and spgist-trie which release indexes, kd-tree, point quadtree,
PMR quadtree, and the trie, respectively.
The main functions of an SP-GiST extension are:
• Consistent()
• NN_Consistent()
• Penalty()
• Split()
These four functions are written by the developer to specify how the index works. Each of the
functions has a set of interface parameters through which the SP-GiST internal functions (SP-
GiST core) and the external functions communicate and exchange data. In the next subsection, we
describe in more details the role of each function.
SP-GiST Extension Functions
•
Consistent()
Consistent() function is called from the internal function Search() to guide the searching in the
index tree. The input parameters to Consistent() are:
1. spgist_query *q: q is a pointer to the query information. The query information
contains strategy element which specifies the passed operator type, and key element
which specifies the search key passed through the query.
2. predicate *entry_pred: entry_pred is a pointer to the currently passed node entry
(corresponds to a partition in the node). If the current node is a leaf node, then
entry_pred points to a data key. Otherwise, entry_pred is a predicate for the subtree
descendant from this entry. For example, the predicate in the case of the trie is a
character, while the predicate in the case of kd-tree is a point.
3. int predicate_len: predicate_len is the length of the passed entry_pred. It is useful in
the cases in which the length of the entry predicate is not fixed. For example, in the
case of the trie, the data key is a string of variable length.
4. int depth: depth is the depth of the currently processed node in the index tree. The
depth is important in index structures such as kd-tree. The root node of the index tree
has a depth equals 0.
5. int type: type specifies the type of the currently processed node. If the node is a leaf
node (contains data keys), then type has value 0. Otherwise type has value 1.
6. predicate *node_pred: node_pred is a pointer to the predicate of the currently
processed node. For example, the node predicate of a leaf node in the point quadtree is
the space covered by the node.
Copyright'2005, Purdue University 10
SP-GiSTv1.0 User Manual
Consistent() returns a Boolean value. TRUE means that the passed node entry satisfies the
query, while FLASE means that the passed node entry does not satisfy the query. This
Boolean value guides the search() function while traversing the index tree.
•
NN_Consistent()
NN_Consistent() function is called from the NN_search() internal function to search for the
nearest neighbors of a given query object. The parameters for the NN_Consistent() are the same
as the parameters for Consistent() function plus two more parameters:
1. float * distance: distance is an output parameter in which NN_Consistent() returns the
minimum possible distance between the query object and the passed node entry. If the
node entry contains a data key, then the returned distance is the actual distance between
the query object and the data key.
2. float *parent_dist: parent_dist is an input parameter through which the NN_search()
passes the minimum distance of the parent node. This is important in some index
structures such as the trie in which computing the minimum distance of the current
node needs the minimum distance of the parent node to be available.
•
Penalty()
Penalty() function is called from the insert() internal function to guide the tree(cid:146)s traversal until we
reach a leaf node in which the given key should be inserted. Penalty() returns value 0 for the
entries that need to be traversed further, and returns Max_Penalty otherwise. The parameters to
Penalty() function are:
1. predicate *entry_pred: entry_pred is a predicate of the passed node entry. It specifies
the space covered by the subtree of this entry.
2. int pred_len: pred_len is the length of the node predicate.
3. keyType *key: key is the key to be inserted in the index.
4. int keylen: keylen is the length of the passed key.
5. int depth: depth is the depth of the passed node in the index tree. The root node has
depth 0.
6. int type: type specifies the type of the currently processed node. If the node is a leaf
node (contains data keys), then type has value 0. Otherwise type has value 1.
7. predicate *node_pred: node_pred is a predicate of the passed node.
8. penalty *p: p is an output parameter that is assigned value 0 if the entry needs to be
traversed further, and value Max_Penalty otherwise.
9. void *Entry: Entry is an array of predicates. Entry will contain the predicate that
matches the inserted key. In the index structure allows Node_Shrink, i.e., creating
partitions only if they contain keys, it is possible that Penalty() returns Max_penalty for
Copyright'2005, Purdue University 11
SP-GiSTv1.0 User Manual
all entries of a given node, i.e., no partition is available for the given key. In this case,
Insert() function uses Entry array to create the appropriate entry for this key.
10. int entry_len: entry_len is the length of the predicate created in Entry array.
•
Split()
Split() function is called from the Insert() internal function to split an overflow leaf node. Split()
converts the passed leaf node into a nonleaf node and creates the required leaf nodes. The
parameters to Split() function are:
1. cursor *p_cursor: p_cousor contains all the data keys that will be distrusted over the
new leaf nodes.
2. int **Entries: Entries is a pointer to an array of two dimensions, columns represent the
new child nodes (leaf nodes), while rows represent the id(cid:146)s of the data keys stored in
each child node. Entries is an output parameter.
3. int *num_entries: num_entries is an array that stores the number of keys in each new
leaf node.
4. int *num_of_child: num_of_child stores how many children nodes (leaf nodes) are
created. If the index structure allows Node_Shrink option, i.e., creating partitions only
if they contain keys, then num_of_child can be less than the number of the possible
space partitions.
5. void **old_pred: old_pred is the predicate of the node to be split. old_pred specifies
the space covered by this node.
6. int *old_pred_len: old_pred_len is the length of the old_pred.
7. void **Entries_pred: this is an array that contains a predicate for each newly created
leaf node. Entries_pred is an output parameter.
8. int *Entries_pred_len: Entries_pred_len is an array that contains the length of each
predicate in Entries_pred. Entries_pred_len is an output array.
9. int *depth: depth is the depth of the node to be split.
10. int *type: type is the type of the node to be split. In most cases it has value 0 (leaf
node).
Copyright'2005, Purdue University 12
SP-GiSTv1.0 User Manual
CONTRIBUTION TO THE PROJECT
Please send your patches to PI:EMAIL
Copyright'2005, Purdue University 13