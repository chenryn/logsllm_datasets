title:5Gen: A Framework for Prototyping Applications Using Multilinear
Maps and Matrix Branching Programs
author:Kevin Lewi and
Alex J. Malozemoff and
Daniel Apon and
Brent Carmer and
Adam Foltzer and
Daniel Wagner and
David W. Archer and
Dan Boneh and
Jonathan Katz and
Mariana Raykova
5Gen: A Framework for Prototyping Applications
Using Multilinear Maps and Matrix Branching
Daniel Wagner†
David W. Archer†
Daniel Apon‡
Mariana Raykova¶
Brent Carmer§
Adam Foltzer†
Kevin Lewi∗
Dan Boneh∗
Programs
Alex J. Malozemoﬀ†
Jonathan Katz‡
Abstract
Secure multilinear maps (mmaps) have been shown to have remarkable applications in cryp-
tography, such as multi-input functional encryption (MIFE) and program obfuscation. To date,
there has been little evaluation of the performance of these applications. In this paper we ini-
tiate a systematic study of mmap-based constructions. We build a general framework, called
5Gen, to experiment with these applications. At the top layer we develop a compiler that takes
in a high-level program and produces an optimized matrix branching program needed for the
applications we consider. Next, we optimize and experiment with several MIFE and obfuscation
constructions and evaluate their performance. The 5Gen framework is modular and can easily
accommodate new mmap constructions as well as new MIFE and obfuscation constructions, as
well as being an open-source tool that can be used by other research groups to experiment with
a variety of mmap-based constructions.
Introduction
1
A multilinear map (mmap) [BS02] is an extremely powerful tool for constructing advanced cryp-
tographic systems including program obfuscation [GGH+13b], n-party non-interactive key ex-
change [BS02], multi-input functional encryption [GGG+14, BLR+15], optimal broadcast encryp-
tion [BWZ14a], witness encryption [GGSW13], and many others. The recent emergence of candi-
date mmaps [GGH13a, CLT13, CLT15, GGH15] bring these proposals closer to reality, although
several of the current candidates have been shown to be too weak for some of these applications,
as discussed in §5.
Despite the remarkable power of mmaps, few published works study the eﬃciency of the result-
ing applications, primarily due to the rapid pace of development in the ﬁeld and the high resource
requirements needed for carrying out experiments. In this paper we develop a generic framework
University of Maryland.
∗Stanford University, {klewi,dabo}@cs.stanford.edu
†Galois, {amaloz,acfoltzer,dmwit,dwa}@galois.com. Portion of work of Alex J. Malozemoﬀ done while at
‡University of Maryland, {dapon,jkatz}@cs.umd.edu
§Oregon State University, carmerb@eecs.oregonstate.edu. Portion of work done while at Yale University.
¶Yale University, PI:EMAIL
1
called 5Gen1 (available at https://github.com/5GenCrypto) that lets us experiment with powerful
applications of current and future mmaps. We focus on two applications in particular: multi-input
functional encryption (MIFE) and program obfuscation, both of which can be instantiated with
some of the existing mmap candidates (see §5). Our framework is built as a multi-layer software
stack where diﬀerent layers can be implemented with any of the current candidates or replaced
altogether as new constructions emerge.
The top layer of our framework is a system to compile a high-level program written in the Cryptol
language [Cry] into a matrix branching program (MBP), as needed for the most eﬃcient MIFE and
obfuscation constructions. We introduce several novel optimizations for obtaining eﬃcient MBPs
and show that our optimizations reduce both the dimension and the total number of matrices
needed.
The next layer implements several variants of MIFE and obfuscation using a provided MBP.
This lets us experiment with several constructions and to compare their performance.
The lowest layer is the multilinear map library, libmmap. We demonstrate our framework
by experimenting with two leading candidate mmaps: GGHLite [GGH13a, LSS14, ACLL15] and
CLT [CLT13, CLT15]. Our experiments show that for the same level of security, the CLT mmap
performs considerably better than GGHLite in all the applications we tried, as explained in §8.
(Although the GGH15 multilinear map [GGH15] was not included in our implementation or exper-
iments, we hope that future work might integrate this multilinear map into our framework.)
Our framework makes it possible to quickly plug in new mmaps as new proposals emerge, and
easily measure their performance in applications like MIFE and obfuscation.
MIFE experiments. Recall that functional encryption [BSW11] is an encryption scheme where
the decryption key skf is associated with a function f. If c is the encryption of message m then
decrypting c with the key skf gives the decryptor the value f(m) and nothing else. An n-input
MIFE scheme is the same, except that the function f now takes n inputs. Given independently
created ciphertexts c1, . . . , cn, with each ci an encryption of a message mi and associated with
“slot” i, decrypting these ciphertexts using skf reveals f(m1, . . . , mn) and nothing else.
One important application of 2-input MIFE is order-revealing encryption (ORE) [GGG+14,
BLR+15]. Here the function f(x, y) outputs 1 if x  0, we use [n] to denote the set of integers {1, . . . , n}. We use λ
to represent the security parameter, where “λ-bit security” means that security should hold up
to 2λ clock cycles. We assume that all of our procedures run eﬃciently, or more formally, in
polynomial-time with respect to the size of the input to the procedure, and polynomial in the
security parameter λ.
Multilinear maps. Boneh and Silverberg [BS02] ﬁrst proposed the concept of multilinear maps
(mmaps), but it was only in 2013 that Garg, Gentry, and Halevi [GGH13a] introduced the ﬁrst
plausible construction of an mmap. Since then, mmaps have been shown to be powerful tools in
solving numerous problems in cryptography.
A multilinear map [BS02, GGH13a] (or graded encoding scheme) is a primitive for producing
randomized encodings of plaintexts that may be publicly added, multiplied, and zero-tested but
otherwise “do not reveal any information.” Encodings are associated with a “level” that restricts the
types of operations that may be performed on that encoding. More formally, a degree-κ multilinear
map is a tuple of algorithms (Setup, Encode, Add, Mult, ZeroTest) where:
• Setup takes as input the security parameter, and outputs a private parameter sp and a public
parameter pp that, in particular, speciﬁes a ring R.
• Encode takes sp, an element x ∈ R, and a level S ⊆ [κ], and outputs a level-S encoding of x
denoted(cid:74)x(cid:75)S.
• Add takes pp and two encodings (cid:74)x(cid:75)S, (cid:74)y(cid:75)S at the same level S, and outputs an encod-
ing(cid:74)x + y(cid:75)S.
• Mult takes pp and two encodings(cid:74)x(cid:75)S1,(cid:74)y(cid:75)S2 for disjoint levels S1, S2, and outputs an encoding
(cid:74)x · y(cid:75)S1∪S2.
• ZeroTest takes pp and an encoding(cid:74)x(cid:75)U for U = [κ]. It outputs 1 if and only if x = 0.
Informally, an mmap is secure if the only information that an attacker can ﬁgure out from the en-
codings of random elements is exactly the information that can be obtained from running Add, Mult,
and ZeroTest, and no more. (We omit any formal deﬁnitions since we do not directly rely on them
in this work but instead inherit them from prior work.)
Matrix branching programs. A matrix branching program (MBP) of length n on length-‘, base-d
inputs is a collection of variable-dimension matrices Bi,j for i ∈ [n] and j ∈ {0, . . . , d − 1}, a “ﬁnal
matrix” P, and an “input mapper” function inp : [‘] → [n]. We require that, for each i ∈ [2, n] and
j ∈ {0, . . . , d − 1}, the number of columns of Bi−1,j is equal to the number of rows of Bi,j, so that
the product of these matrices is well-deﬁned. The evaluation of an MBP on input x ∈ {0, . . . , d−1}‘
is deﬁned as
MBP(x) =
(1,
if Qn
0, otherwise.
i=1 Bi,xinp(i) = P,
We note that numerous generalizations and extra properties [BLR+15, SZ14] of MBPs have been
explored in the literature—however, we will only need to use our simpliﬁed deﬁnition of MBPs for
the remainder of this work.
4
Figure 3.1: Framework architecture. We use cryfsm to compile a Cryptol program (here denoted by
prog.cry) to an MBP, which can either be used as input into our MIFE implementation or our obfuscation
implementation. Both these implementations use libmmap as a building block, which supports both the CLT
(libclt) and GGHLite (libgghlite) mmaps.
3 Framework Architecture
Our framework incorporates several software components that together enable the construction of
applications using mmaps and MBPs. In particular, we use our framework to develop implemen-
tations of MIFE and program obfuscation. See Figure 3.1 for the framework architecture.
The top layer of our framework, cryfsm, takes as input a program written in Cryptol [Cry],
a high-level language designed to express manipulations over bitstreams in a concise syntax, and
compiles the program into an MBP. This process, and the various optimizations we introduce, are
described in more detail in §4.
The bottom layer of our framework, libmmap, provides an API for using various mmaps, which
in our case includes the CLT (through the libclt library) and GGHLite (through the libgghlite
library) mmaps. The libmmap library, which we describe in §5, is also designed to allow for a
straightforward integration of future mmap implementations.
We combine the above components to realize various applications of mmaps and MBPs:
in
particular, MIFE and program obfuscation. We demonstrate the applicability of our MIFE im-
plementation (cf. §6) through two examples: order-revealing encryption (ORE) and three-input
DNF (3DNF) encryption. We implement program obfuscation based on two main approaches: the
techniques described by Sahai and Zhandry [SZ14], and also the scheme by Zimmerman [Zim15],
which operates over arithmetic circuits, but only applies to the CLT mmap.
4 From Programs to MBPs
One of our key contributions in this work is a compiler, cryfsm, that takes as input a program
written in Cryptol [Cry], a domain-speciﬁc language for specifying algorithms over generic streams
of bits, and produces an MBP for the given input program. cryfsm does this by translating a
Cryptol speciﬁcation into a layered state machine, which can then be transformed into an optimized
corresponding MBP.
Our toolchain proceeds as follows. The user writes a Cryptol function of type [n] -> Bit
for some n (that is, the function takes n input bits and produces one output bit). This function
is interpreted as deciding membership in a language. The toolchain symbolically evaluates this
function to produce a new version of the function suitable for input to an SMT solver, as explained
in detail below. Queries to the SMT solver take the form of deciding the preﬁx equivalence relation
5
between two initial bitstrings, which is suﬃcient to build the minimal layered state machine, which
we then convert to an MBP.
Our solver-based approach results in a substantial dimension reduction of the corresponding
output MBPs that we tested. In contrast, the traditional approach would be to heuristically opti-
mize the state machine design in an attempt to achieve a best-eﬀort optimization. The dimension
reduction we achieve recovers the most eﬃcient known MBPs for several previously studied bit-
string functions, including MBPs for point functions that are smaller than the MBPs constructed
from boolean formulas using existing techniques (e.g., [SZ14]). In the remainder of this section, we
describe the key steps in this toolchain, along with several optimizations to the MBPs that we use
throughout the remainder of this work.
Specifying functions in Cryptol. Cryptol is an existing language widely used in the intelligence
community for describing cryptographic algorithms. A well-formed Cryptol program looks like
an algorithm speciﬁcation, and is executable. The Cryptol tool suite supports such execution,
along with capabilities to state, verify, and formally prove properties of Cryptol speciﬁcations, and
capabilities to both prove equivalence of implementation in other languages to Cryptol speciﬁcations
and automatically generate such implementations. In our work, a user speciﬁes an MBP in Cryptol,
and then we use cryfsm to transform the high-level speciﬁcation into a minimal layered state
machine, and further transform it into an eﬃcient MBP.
Minimal layered state machines. There is a standard translation from traditional ﬁnite state
machines to MBPs: create a sequence of matrix pairs (or matrix triples for three-symbol alphabets,
etc.) that describe the adjacency relation between states. If state i transitions to state j on input
symbol number b, then the bth MBP matrix will have a 1 in the ith row and jth column and 0
elsewhere. For many languages of interest, this is ineﬃcient: for an automaton with |S| states, each
matrix must be of size |S|2, even though many states may be unreachable.
In the applications of mmaps that we study in this work, we consider functions on inputs of a
ﬁxed length. Hence, for a positive integer n, we can take advantage of this property by restricting
ourselves to layered state machines of depth n, which are simply (deterministic) ﬁnite state machines
that only accept length-n inputs. Here, the ith “layer” of transitions in the machine is only used
when reading the ith digit of the input. As a result, layered state machines are acyclic.
To generate minimal layered state machines, our compiler must introduce machinery to track
which states are reachable at each layer, which allows us to reduce the overall MBP matrix dimen-
sions. To do this, cryfsm computes the quotient automaton of the layered state machine using an
SMT solver to decide the state equivalence relation. The quotient automaton is then used as the
new minimal layered state machine for the speciﬁed function. Then, from a layered state machine
of depth n, we construct the corresponding MBP on base-d inputs of length n in a manner essen-
tially equivalent to the techniques of Ananth et al. [AGIS14] for constructing layered branching
programs. Intuitively, for each i ∈ [n] and j ∈ [d], the ith matrix associated with the jth digit
is simply the adjacency matrix corresponding to the transitions belonging to the ith layer of the
machine, associated with reading the digit j. Then, the “ﬁnal matrix” (that deﬁnes the output of
the MBP being 1) is simply the adjacency matrix linking the initial state to the ﬁnal state of the
layered state machine.
Optimizations for MBP creation. Boneh et al. [BLR+15] describe a simple ﬁve-state ﬁnite state
machine appropriate for ORE applications, and describe the translation to MBPs that produces
5× 5 matrices at each depth. The MBP we build and use for our ORE application diﬀers from this
one via three transformations that can be generalized to other programs: change of base, matrix
6
premultiplication, and dimension reduction. Of these, matrix premultiplication and dimension