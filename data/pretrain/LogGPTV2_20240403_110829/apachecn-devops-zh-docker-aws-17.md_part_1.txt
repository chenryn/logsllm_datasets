# 十七、弹性 Kubernetes 服务
**Kubernetes** 是一个流行的开源容器管理平台，最初由谷歌开发，它基于谷歌自己的内部**博格**([https://Kubernetes . io/blog/2015/04/博格-前身到 kubernetes/](https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/) )容器平台。Kubernetes 利用了谷歌在大规模运行容器方面的丰富经验，现在随着 aws 弹性 Kubernetes 服务(EKS)的发布，所有主要的云平台提供商都支持它。EKS 提供了一个托管的 Kubernetes 集群，您可以将容器应用部署到其中，而不必担心日常运营开销和集群管理的复杂性。AWS 已经完成了建立一个健壮且可扩展的平台的所有繁重工作，使其比以往任何时候都更容易与 Kubernetes 一起启动和运行。
在本章中，您将了解 Kubernetes 的世界，我们将研究如何配置 Kubernetes，以确保我们能够成功部署和操作我们通过本书使用的示例应用，然后在 AWS 中建立一个 EKS 集群，您将使用您在本地开发的配置部署应用。这将为作为应用所有者的您如何将容器工作负载部署到 Kubernetes，以及如何快速启动并运行 EKS 提供实际的见解。
我们将首先了解如何在本地使用该平台，使用 Docker for Mac 和 Docker for Windows 现在为 Kubernetes 提供的本机支持。您可以开箱即用地启动本地单节点群集，从而减少启动和运行本地环境通常需要的大量手动配置。您将学习如何创建在 Kubernetes 中运行示例应用所需的各种类型的资源，解决关键的操作挑战，例如为应用数据库提供持久存储、机密管理，以及运行一次性任务，例如数据库迁移。
一旦您建立了一个工作配置，让示例应用在 Kubernetes 本地启动并运行，我们将把注意力转向从 EKS 开始，创建一个 EKS 集群，并建立一个 EC2 自动扩展组，在该组中管理运行您的容器工作负载的工作节点。您将学习如何从本地环境设置对集群的访问，并继续部署 Kubernetes Dashboard，它提供了丰富的管理用户界面，您可以从中部署和管理应用。最后，您将设置与其他 AWS 服务的集成，包括弹性块存储(EBS)和弹性负载平衡(ELB)，并继续将示例应用部署到您的 EKS 集群。
本章将涵盖以下主题:
*   Kubernetes 的概论
*   不可思议的建筑
*   Kubernetes 入门
*   使用 docker desktop 安装 kubricks
*   创建核心 Kubernetes 资源，包括吊舱、部署和服务
*   创建永久卷
*   创造永恒的机密
*   运行非循环作业
*   创建 EKS 集群
*   建立对 EKS 集群的访问
*   将应用部署到 EKS
# 技术要求
以下是本章的技术要求:
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置的本地 AWS 配置文件
*   AWS CLI 版本 1.15.71 或更高版本
*   Docker 18.06 或更高
*   Docker 写作 1.22 或更高
*   GNU Make 3.82 或更高版本
*   本章假设您已经完成了本书前面的所有章节
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch17](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch17)。
查看以下视频，了解《行动守则》:
[http://bit.ly/2LyGtSY](http://bit.ly/2LyGtSY)
# Kubernetes 的概论
**Kubernetes** 是由 Google 在 2014 年开源的开源容器管理平台，2015 年以其 1.0 版本实现量产准备。在三年的时间里，它已经成为最受欢迎的容器管理平台，并且非常受希望将其应用作为容器工作负载运行的大型组织的欢迎。Kubernetes 是 github 上最受欢迎的开源项目之一([https://GitHub . com/cncf/velocity/blob/master/docs/top30 _ chart _ creation . MD](https://github.com/cncf/velocity/blob/master/docs/top30_chart_creation.md))，根据 [Redmonk](https://redmonk.com/fryan/2017/09/10/cloud-native-technologies-in-the-fortune-100/) 的数据，截至 2017 年末，Kubernetes 在财富 100 强公司中的使用率为 54%。
Kubernetes 的主要功能包括:
*   **平台不可知** : Kubernetes 可以在任何地方运行，从您的本地机器到您的数据中心，以及 AWS、Azure 和 Google Cloud 等云提供商，它们现在都提供集成的托管 Kubernetes 产品。
*   **开源** : Kubernetes 最大的优势在于它的社区性和开源性，这让 Kubernetes 成为了这个星球上领先的开源项目之一。主要组织和供应商正在投入大量时间和资源为平台做贡献，确保整个社区从这些持续的增强中受益。
*   **谱系** : Kubernetes 的根源来自谷歌内部的博格平台，该平台从 2000 年代初就开始大规模运行容器。谷歌是容器技术的先驱之一，毫无疑问是容器的最大采用者之一——早在 2014 年，谷歌就表示，他们每周运行 20 亿个容器，而当时大多数企业只是通过一个名为 Docker 的新项目才听说容器，这个项目正在席卷科技行业。这种血统和传统确保了谷歌多年来大规模运行容器的经验被封装在 Kubernetes 平台中。
*   **生产级容器管理功能** : Kubernetes 提供了所有您期望看到并将在其他竞争平台上遇到的容器管理功能。这包括集群管理、多主机网络、可插拔存储、运行状况检查、服务发现和负载平衡、服务扩展和滚动更新、所需的阶段配置、基于角色的访问控制以及机密管理等。所有这些功能都是以模块化构造块的方式实现的，允许您调整系统以满足组织的特定要求，这也是 Kubernetes 现在被认为是企业级容器管理的黄金标准的原因之一。
# 库伯内斯诉 Docker
在前一章中，我提供了我自己对 Docker Swarm 和 Kubernetes 的想法，在这里我将继续，这一次更多地关注为什么你会选择 Kubernetes 而不是 Docker Swarm。当您完成这一章时，应该很明显，Kubernetes 有一个更复杂的体系结构，这意味着有一个更高的学习曲线，我在这一章中介绍的只是 Kubernetes 可能做到的事情的表面。也就是说，一旦你了解了这些概念，至少从我的角度来看，你应该看到 Kubernetes 最终更强大，具有更大的灵活性，可以说，Kubernetes 肯定比 Docker Swarm 感觉更“企业级”，有更多的旋钮可以根据您的特定需求定制 Kubernetes。
与 Docker Swarm 和其他竞争对手相比，Kubernetes 最大的优势可能是它的社区，这一点非常重要，这意味着在更广泛的 Kubernetes 社区和生态系统中，可以很容易地找到关于您能想到的几乎任何配置场景的信息。Kubernetes 运动的背后一直有很大的动力，而随着领先的供应商和提供商(如 AWS)用自己的产品和解决方案拥抱 Kubernetes，这种动力似乎只会越来越大。
# 不可思议的建筑
在架构上，Kubernetes 以集群的形式组织自己，其中主节点形成集群控制平面，工作节点运行您的实际容器工作负载:
![](img/64ef6b49-8e21-40b1-a9e2-3473309890f6.png)
Kubernetes architecture
在每个主节点中，存在许多组件:
*   **kube-apiserver** :这暴露了 Kubernetes API，是你用来与 Kubernetes 控制平面交互的前端组件。
*   **etcd** :这提供了一个跨集群的分布式高可用性密钥/值存储，用于存储 Kubernetes 配置和操作数据。
*   **kube-scheduler** :这将 pods 调度到工作节点上，同时考虑资源需求、约束、数据局部性和其他因素。稍后您将了解更多关于 pods 的信息，但是现在您可以将它们看作是相关容器和卷的集合，它们需要一起创建、更新和部署。
*   **kube-controller-manager** :负责管理控制器，控制器由多个组件组成，用于检测您的节点何时停止运行，确保您的 pods 有正确数量的实例或副本正在运行，为您的 pods 中运行的应用发布服务端点，并管理集群的服务帐户和 API 访问令牌。
*   **云控制器管理器**:这提供了与底层云提供商交互的控制器，使云提供商能够支持特定于其平台的功能。云控制器的示例包括创建、更新和删除云提供商负载平衡器的服务控制器，以及创建、连接、分离和删除云提供商支持的各种存储卷技术的卷控制器。
*   **附加组件**:有许多附加组件可以扩展集群的功能。这些以提供集群功能的吊舱和服务的形式运行。大多数安装中通常部署的一个附加组件是群集 DNS 附加组件，它为群集上运行的服务和 pod 提供自动 DNS 命名和解析。
在所有节点上，都存在以下组件:
*   **kubelet** :在集群中的每个节点上运行的代理，它确保 pod 中的所有容器都运行正常。kubelet 还可以收集可以发布到监控系统的容器度量。
*   **kube-proxy** :管理网络通信、端口映射和每个节点上所需的路由规则，以支持 Kubernetes 支持的各种服务抽象。
*   **容器运行时**:这提供了运行容器的容器引擎。支持的最流行的容器运行时是 Docker，但是在容器运行时下，如 rkt (Rocket)或任何 OCI 运行时规范的实现都可以得到支持。
*   **pod**:pod 是部署容器应用的核心工作单元。每个容器由一个或多个容器和相关资源以及一个网络接口组成，这意味着给定容器中的每个容器共享相同的网络栈。
请注意，工作节点只运行前面直接列出的组件，而主节点运行我们到目前为止讨论过的所有组件，这允许主节点也为单节点集群等场景运行容器工作负载。
Kubernetes 还提供了一个名为 **kubectl** 的客户端组件，它提供了通过 Kubernetes API 管理集群的能力。 **kubectl** 在 Windows、macOS 和 Linux 上受支持，允许您轻松管理多个集群并在它们之间切换，既可以本地运行，也可以远程运行。
# Kubernetes 入门
现在，您已经简单地了解了 Kubernetes，让我们专注于在您的本地环境中与 Kubernetes 一起启动和运行。
在本书的前面，当您设置本地开发环境时，如果您使用的是 macOS 或 Windows，则安装了 Docker Desktop 的社区版(CE)版本(Docker for Mac 或 Docker for Windows，在本章中我可能统称为 Docker Desktop)，其中包括对 Kubernetes 的本机支持。
If you are using a variant of Docker for Mac/Windows that does not support Kubernetes, or are using Linux, you can install minikube by following the instructions at [https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube). Most of the examples included in this section should work with minikube, although features such as load balancing and dynamic host path provisioning may not be directly supported and require some additional configuration.
要启用 Kubernetes，请在本地 Docker 桌面设置中选择 **Kubernetes** ，并选中**启用 Kubernetes** 选项。单击**应用**后，将安装 Kubernetes，并需要几分钟时间启动和运行:
![](img/9c033101-8ec4-4dba-bfaf-dd99d43ed4e2.png)
Enabling Kubernetes using Docker for Mac
Docker Desktop 还会自动为您安装和配置 Kubernetes 命令行实用程序`kubectl`，可用于验证您的安装:
```
> kubectl get nodes
NAME                STATUS  ROLES   AGE  VERSION
docker-for-desktop  Ready   master  1m   v1.10.3
```
如果您将 Docker for Windows 与 Linux 子系统 for Windows 结合使用，您将需要通过运行以下命令将`kubectl`安装到子系统中(有关更多详细信息，请参见[https://kubernetes . io/docs/tasks/tools/install-kube CTL/# install-kube CTL-binary-via-native-package-management](https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-via-native-package-management)):
```
sudo apt-get update && sudo apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo touch /etc/apt/sources.list.d/kubernetes.list 
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl
```
安装`kubectl`后，如果您之前将您的 Linux 子系统主文件夹更改为您的 Windows 主文件夹，您现在应该能够与本地 Kubernetes 集群交互，而无需进一步配置。
如果您的主文件夹不同于 Windows 主文件夹(默认情况下是这样)，那么您需要设置一个指向 Windows 主文件夹中`kubectl`配置文件的符号链接，之后您应该能够使用`kubectl`与本地 Kubernetes 安装进行交互:
```
# Only required if Linux Subsystem home folder is different from Windows home folder
$ mkdir -p ~/.kube
$ ln -s /mnt/c/Users//.kube/config ~/.kube/config
$ kubectl get nodes
NAME                STATUS  ROLES   AGE  VERSION
docker-for-desktop  Ready   master  1m   v1.10.3
```
The Linux subsytem for Windows also allows you to run Windows command-line programs, so alternatively you can run `kubectl.exe` to invoke the Windows kubectl component.
# 创建一个吊舱
在 Kubernetes 中，您将您的应用部署为 *pods* ，它们指的是一个或多个彼此密切相关的容器和其他资源，并共同表示您的应用。一个**吊舱**是 Kubernetes 的核心工作单元，在概念上类似于一个 ECS 任务定义，尽管在引擎盖下它们以完全不同的方式工作。
A common shorthand code for Kubernetes is k8s, where the "ubernete" portion of the name Kubernetes is replaced with the digit 8, representing the number of characters in "ubernete".
在我们创建第一个 pod 之前，让我们在 todo back and 存储库中建立一个名为`k8s`的文件夹，该文件夹将保存 todo back and 应用的所有 Kubernetes 配置，然后创建一个名为`app`的文件夹，该文件夹将存储与核心 todo back and 应用相关的所有资源定义:
```
todobackend> mkdir -p k8s/app todobackend> touch k8s/app/deployment.yaml
```
下面的代码演示了 todobackend 应用的基本 pod 定义，我们将把它保存到`k8s/app/deployment.yaml`文件中:
```
apiVersion: v1
kind: Pod
metadata:
  name: todobackend
  labels:
    app: todobackend
spec:
  containers:
  - name: todobackend
    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
    imagePullPolicy: IfNotPresent
    command:
    - uwsgi
    - --http=0.0.0.0:8000
    - --module=todobackend.wsgi
    - --master
    - --die-on-term
    - --processes=4
    - --threads=2
    - --check-static=/public
    env:
    - name: DJANGO_SETTINGS_MODULE
      value: todobackend.settings_release
```
pod 配置文件的格式很容易理解，一般来说，如果您习惯于使用 Docker Compose 定义容器，那么您看到的大多数参数都会映射到同名的参数。一个容易引起混淆的重要区别是`command`参数——在 Kubernetes 中，该参数相当于 Docker Compose 服务规范中的`ENTRYPOINT` Dockerfile 指令和`entrypoint`参数，而 Kubernetes 中的`args`参数相当于 CMD 指令(Dockerfile)和`command`服务参数(Docker Compose)。这意味着在前面的配置中，我们的容器中的默认入口点脚本被绕过，取而代之的是 uwsgi web 服务器将直接运行。
`IfNotPresent`的`imagePullPolicy`属性值将 Kubernetes 配置为仅在本地 Docker Engine 注册表中没有映像的情况下拉取一个映像，这意味着在尝试创建 pod 之前，您必须确保已运行现有的 todobackend Docker Compose 工作流来本地构建和标记 todo back and 映像。这是必需的，因为当您在 AWS EC2 实例上运行 Kubernetes 时，Kubernetes 仅包括对 ECR 的本机支持，而当您在 AWS 之外运行 Kubernetes 时，Kubernetes 不支持 ECR。
There are a number of third-party plugins available that allow you to manage AWS credentials and pull ECR images. A popular example can be found at [https://github.com/upmc-enterprises/registry-creds](https://github.com/upmc-enterprises/registry-creds)
要创建我们的 pod 并验证它是否正在运行，您可以运行`kubectl apply`命令，其中`-f`标志引用您刚刚创建的部署文件，后跟`kubectl get pods`命令:
```
> kubectl apply -f k8s/app/deployment.yaml
pod "todobackend" created
> kubectl get pods
NAME          READY   STATUS    RESTARTS   AGE
todobackend   1/1     Running   0          7s
> docker ps --format "{{ .Names }}"
k8s_todobackend_todobackend_default_1b436412-9001-11e8-b7af-025000000001_0