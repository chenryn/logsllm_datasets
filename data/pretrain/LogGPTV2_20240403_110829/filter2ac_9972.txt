title:LoKI: location-based PKI for social networks
author:Randy Baden
LoKI: Location-based PKI for Social Networks
Randy Baden
University of Maryland
PI:EMAIL
http://www.cs.umd.edu/~randofu/loki
Categories and Subject Descriptors
C.2.0 [Computer Communications Networks]: General—Data
communications; C.2.1 [Computer Communications Networks]:
Network Architecture and Design—Wireless communication; C.2.4
[Computer Communications Networks]: Distributed Systems—
Client/server, Distributed applications; C.5.3 [Computer Sys-
tem Implementation]: Microcomputers—Portable devices (e.g.,
laptops, personal digital assistants); E.3 [Data Encryption]:
[Public key cryptosystems]
General Terms
Security, Design, Performance
Keywords
Public Key Infrastructure, Online Social Networks, Location,
Mobility
1.
INTRODUCTION
The existence of a public key infrastructure (PKI) is a linch-
pin of many systems that provide security, privacy, or account-
ability [2, 3]. For many systems, there are adequate solutions
to providing a PKI that, while never perfect, are resilient to at-
tack. Certiﬁcate authorities (CA) are a common solution, but
they have limitations. Obviously, the CA must be trusted, a
reasonable assumption in many systems, especially centralized
ones. Less obviously, the CA must be able to independently ver-
ify the identities of those principals that the CA certiﬁes.
For this reason, a trusted CA is at best an insufﬁcient solu-
tion to the PKI problem for a decentralized online social net-
work (OSN). The problem is not one of trustworthiness; a CA
such as Verisign could be just as scrupulous and well-intentioned
whether they certify web sites or people. The problem is a prac-
tical one: it would require prohibitively many resources for a
central authority to independently verify every social identity in
the system.
This problem is not new, but the changing landscape of how
users interact with social networks — and with each other — of-
fers opportunities for new, complementary solutions. The PGP
web-of-trust is a good starting point, effectively making each
user her own certiﬁcate authority. This matches the notion of
a user being in charge of her own privacy and security within
her domain of the social network, a primary guiding principal in
Copyright is held by the author/owner(s).
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
ACM 978-1-4503-0797-0/11/08.
decentralized OSNs. The out-of-band exchange of keys, how-
ever, has proven too onerous for typical users [7]. We therefore
choose to design techniques that users are able to more readily
employ based on how users interact with each other in modern
settings.
Our main contribution is a system, LoKI, in which we use the
ubiquity of mobile devices to provide users with a new method
for verifying identities that does not require immediate user in-
teraction. Concretely, we propose collecting shared secrets from
nearby mobile devices over the course of typical mobile activ-
ity, then using these shared secrets post-hoc to perform identity
veriﬁcation based on user recollection of when real-world meet-
ings occurred. We estimate the frequency of real-world meet-
ings among social network users with a data set of interactions
recorded by Foursquare, Facebook, and Twitter. We evaluate
the technical constraints of collecting and storing shared secrets
in terms of storage space and power consumption based on the
frequency of mobile device encounters. Finally, we provide a so-
lution to allow peer-to-peer bluetooth communication on mobile
devices when neither device is able to enter discoverable mode,
such as in a background service on an Android phone that has
not been rooted. We believe that this problem of peer-to-peer
rendezvous on typical mobile devices is an important considera-
tion that has heretofore gone unrecognized in research on mobile
peer-to-peer systems.
2. DESIGN OVERVIEW
We design LoKI with one goal in mind:
to transform real-
world social interactions into secure online public key exchanges.
We realize this goal using shared secret data frequently exchanged
between proximal devices, where an exchange of secret data rep-
resents a real-world meeting. This secret data can later be used
to establish a secure channel based on the user’s recollection
of when real-world meetings occurred [1]. This basic design
goal requires proximal devices to be able to communicate pri-
vately without user intervention; though this seems like a simple
requirement, a number of practical constraints make this non-
trivial in practice.
2.1 Assumptions and Constraints
We assume that two users who wish to be friends on an OSN
meet in person while in possession of their mobile devices; though
not every pair of OSN friends will fall under this assumption, we
will show that many do. We also assume that these devices have
wiﬁ and bluetooth capabilities along with some means of ac-
cessing the Internet. We assume that every user runs our key ex-
change application at all times, so we restrict the key exchange
application to only be able to access features available to non-
394Figure 1: Non-rooted androids cannot observe each other, but they can
observe similar nearby wiﬁ access points and discoverable bluetooth de-
vices to detect proximity with the help of a rendezvous service.
rooted devices. Otherwise, a user would have to void the war-
ranty on the device.
Bluetooth’s range of about 10 meters is a physical means of
verifying locality, making bluetooth the intuitive communication
channel for our purposes. If two devices are able to communi-
cate via bluetooth, it most likely means that the device’s users
are near each other; this may indicate social interaction between
the users that is reﬂected in the social graph in an OSN. Blue-
tooth is also an appealing choice because it requires less power
than alternative communication technologies.
We focus on the case of “disengaged” users1, i.e., users who
do not actively establish OSN friendships during a real-world
meeting, but later seek to establish the OSN friendship when
they have left the presence of the other user. In particular, it is
not possible to put an android device into bluetooth discoverable
mode without periodically requesting permission from the user.
However, bluetooth communication is still possible as long as
once of the devices can learn the other device’s bluetooth MAC
address.
2.2 Rendezvous
We considered many strategies for advertising bluetooth MAC
addresses using broadcast or multicast over either bluetooth or
wiﬁ. None of these solutions were viable because there is no
way to access broadcast packets from non-rooted phones. Our
ultimate solution relies on a third-party rendezvous service, anal-
ogous to the role of a STUN server in NAT hole-punching.
Given a request from a client containing spatiotemporal data
and information about the client’s bluetooth MAC address, the
rendezvous service matches that data with other requests and
return the data necessary to construct nearby users’ bluetooth
MAC addresses.
Ideally, another user should only learn the
user’s MAC address if that user is sufﬁciently close, i.e., within
bluetooth range.
Narayanan et al. [5] describe a set of possible location tags
that can be used to conﬁrm device location. Unlike most of their
suggestions, the list of visible wiﬁ access point MAC addresses
and the list of discoverable bluetooth device MAC addresses are
both available to non-rooted phones. Our setting is depicted in
Figure 1. Visible MAC addresses provide a way to match based
on location, though these values do not depend on time, so an
attacker who visits a location once will be able to forever after
check to see which devices are in that location. We believe it
may be possible to extend the android API to report information
1The case of engaged users requires trivial technical solutions,
though it remains part of the complete OSN PKI bootstrapping
solution.
Figure 2: The number of common and distinct MAC addresses (wiﬁ and
bluetooth) visible from two colocated Motorola Droids while walking
through the University of Maryland campus.
about the timestamps from beacon frames during a wiﬁ scan to
incorporate temporal dependence into the rendezvous service.
Complicating matters further, two colocated devices have re-
markably different views of visible MAC addresses, as shown in
Figure 2. We therefore consider two phones to be likely colo-
cated during epoch t if they agree on some threshold k of visible
MAC addresses.
We now describe what the clients communicate to the ren-
dezvous service. First, if the client does not already know the
current (publicly known) epoch t, it requests it from the ren-
dezvous service. Let B be the client’s bluetooth MAC address.
Let H(·) be a one-way hash function, Enc(·,K) be a symmet-
ric encryption function using key K, and let S(·) be a function
that computes a secret share according to Shamir’s secret shar-
ing [6]. For each visible MAC address M, the client computes
and transmits:
• The location tag: H(M(cid:107)t)
• The secret share: Enc(S(B,M(cid:107)t,k),M(cid:107)t)
The location tags can be used by the rendezvous service to
match users who share at least k visible MAC addresses through
set intersection. The secret shares can be decrypted and com-
bined to reconstruct B by anyone who knows at least k matching
visible MAC addresses, i.e., someone present at the location.
Once one of the pair of devices has B, it can establish an in-
secure channel and perform Difﬁe-Hellman key exchange to es-
tablish a secure channel over which a secret can be agreed upon.
These agreed-upon secrets can thereafter be used to perform
SPEKE [4] and exchange public keys with the certainty that the
public key belongs to a user who was present at the times that
the secrets were collected.
Since an attacker cannot selectively block bluetooth transmis-
sions, the Difﬁe-Helman exchange is not vulnerable to a classi-
cal man-in-the-middle attack, though it can be vulnerable to im-
personation; the attacker cannot hide the honest user, but she can
create an indistinguishable duplicate. One defense against this
attack is to require secrets from multiple meeting times, enough
to ensure that no other user could be present at every meeting.
3. REFERENCES
[1] R. Baden, N. Spring, and B. Bhattacharjee. Identifying close
friends on the internet. In HotNets, 2009.
[2] R. Baden, et al. Persona: An online social network with
user-deﬁned privacy. In SIGCOMM, 2009.
[3] A. Haeberlen, P. Kouznetsov, and P. Druschel. Peerreview:
practical accountability for distributed systems. In SOSP, 2007.
[4] D. P. Jablon. Strong password-only authenticated key exchange.
SIGCOMM CCR, 1996.
In NDSS, 2011.
[5] A. Narayanan, et al. Location privacy via private proximity testing.
[6] A. Shamir. How to share a secret. Commun. ACM, 1979.
[7] A. Whitten, J. D. Tygar, A. Whitten, and J. D. Tygar. Usability of
security: A case study. Tech. rep., CMU, 1998.
 0 10 20 30 40 50 60 0 20 40 60 80 100 120# of MAC AddressesTime (min)# Shared# Distinct 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 10 20 30 40 50 60CDF# of MAC Addresses# Shared# Distinct395