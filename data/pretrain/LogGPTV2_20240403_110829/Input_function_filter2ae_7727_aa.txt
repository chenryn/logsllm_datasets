# Input function
在 python2 大量的内置函数中，input() 函数是一个很大的安全隐患，它在标准输入流中获取到的任何内容，都会作为 python 代码执行
    λ python2
    >>> input()
    dir()
    ['__builtins__', '__doc__', '__name__', '__package__']
    >>> input()
    __import__('sys').exit()
    λ
显然，除非脚本在标准输入流获取的数据受到完全信任，否则永远不能使用 input() 函数。在 python2 中建议使用 raw_input()
作为安全的替代方案。在 python3 中的 input() 等同于 raw_input()，从而永久修复了这个隐患。
# Assert statement
不要使用 assert 语句来防止用户不应该访问的代码片段。在将源代码编译为优化的字节码 (例如 python -O) 时，python不会为 assert
语句生成任何指令。这就无声的消除了对代码片段的保护。
    class User:
        def __init__(self, is_admin):
            self.is_admin = is_admin
    user = User(0);
    def foo(user):
        assert user.is_admin, "user does not have access"
        print("# code......")
    foo(user)
在执行 `python -O test.py` 时，输出如下
    # code......
assert 语句是为了测试设计的，在生产环境不要使用。
# Reusable integers
Python 中一切都是对象。 每个对象都有一个唯一的标识，可以通过 id() 函数读取。要确定两个变量或属性是否指向同一对象，可以使用 is 运算符。
在 python2 中存在这样一个问题
    >>> 999+1 is 1000
    False
    >>> 1+1 is 2
    True
is 运算符可用于两个对象的标识，但是它不会比较它们的数值或任何其他值。在 python3 中这个问题得到了解决。在 python2 中从不使用 is
运算符进行值比较。 is 运算符是被设计为专门处理对象标识。
# Floats comparison
由于固有的有限精度以及十进制数与二进制分数表示法之间的差异，使用浮点数可能会变得复杂。一个常见现象是，浮点比较有时可能会产生意外的结果。
    >>> 2.2*3.0 == 3.3*2.0
    False
这是在 python 2 和 3 中都存在的问题，上述现象的原因确实是舍入错误
    >>> (2.2 * 3.0).hex()
    '0x1.a666666666667p+2'
    >>> (3.3 * 2.0).hex()
    '0x1.a666666666666p+2'
还有一个有趣的现象，python 中的 float 支持无限大的概念
    >>> 10**1000000 > float('infinity')
    False
这里最好的解决方法就是使用整数算法。或者是使用
[decimal](https://docs.python.org/3/library/decimal.html)
模块，它使用户免受烦人的细节和危险缺陷的影响。当基于算术运算的结果做出重要决策时，必须注意不要成为[舍入误差](https://docs.python.org/3/tutorial/floatingpoint.html)的受害者。
# Private attributes
Python 不支持对象属性隐藏。但是，python
可以通过[双下划线的方式](https://docs.python.org/3/tutorial/classes.html#tut-private)来实现隐藏。
尽管[对属性名称的更改仅发生在代码](https://docs.python.org/3/reference/expressions.html#atom-identifiers)中，但是硬编码为字符串常量的属性名称保持不变。当双下划线的属性从 getattr()/hasattr() 函数 "隐藏"
时，这可能导致混乱的行为。
    class X(object):
        def __init__(self):
            self.__private = 1
        def get_private(self):
            return self.__private
        def has_private(self):
            return hasattr(self, '__private')
    x = X()
    print(x.has_private())
    print(x.get_private())
    print(dir(x))
输出结果是，可以看到 x 有一个 `_X__private` 属性，其值为 1
    False
    1
    ['_X__private', ......]
再来看这样一段代码
    class X(object):
        def __init__(self):
            self.__private = 1
        def get_private(self):
            return self.__private
        def has_private(self):
            return hasattr(self, '__private')
    x = X()
    print(x.has_private())
    print(x.get_private())
    print(dir(x))
    x.__private = 2
    print(x.has_private())
    print(x.get_private())
    print(dir(x))
输出结果为
    False
    1
    ['_X__private', ......]
    True
    1
    ['_X__private', '__private', ......]
如果程序员依靠双下划线的属性在代码中做出重要决定而又不注意私有属性的不对称行为，则这些怪癖可能会变成安全漏洞。
# Module injection
Python模块导入系统功能强大且复杂。可以通过
[sys.path](https://docs.python.org/3/library/sys.html#sys.path)
列表定义的搜索路径中找到的文件或目录名称导入模块和软件包。搜索路径初始化是一个复杂的过程，也取决于 Python 版本，平台和本地配置。为了对 Python
应用程序发起成功的攻击，攻击者需要找到一种方法，将恶意的 Python
模块走私到目录或可导入的包文件中，Python在尝试导入模块时会考虑该目录或可导入的包文件。
解决方案是对搜索路径中的所有目录和程序包文件保持安全的访问权限，以确保非特权用户对其不具有写访问权限。Python
解释器的初始脚本所在的目录会自动插入搜索路径中。
如下脚本揭示了实际的搜索路径
    >>> import sys
    >>> import pprint
    >>> pprint.pprint(sys.path)
    ['',
     '/usr/lib/python35.zip',
     '/usr/lib/python3.5',
     '/usr/lib/python3.5/plat-x86_64-linux-gnu',
     '/usr/lib/python3.5/lib-dynload',
     '/usr/local/lib/python3.5/dist-packages',
     '/usr/lib/python3/dist-packages']
在 Windows 平台上，会将 Python 进程的当前工作目录注入搜索路径。 在 UNIX 平台上，只要从 stdin 或命令行读取程序代码 (-c 或
-m) ，就会将当前工作目录自动插入 sys.path 中
为了减轻模块从当前工作目录注入的风险，建议在 Windows 上运行 Python
或通过命令行传递代码之前，先将目录显式更改为安全目录。搜索路径的另一个可能来源是 $PYTHONPATH 环境变量的内容。另外一个防止模块注入的措施是
Python 解释器的 -E 选项，它可以忽略 $PYTHONPATH 变量
# Code execution on import
import 语句实际上导致了要导入的模块中代码的执行。这就是为什么即使导入不信任的模块或软件包也有风险的原因。
比如如下的代码
    λ cat code_exec.py
    import os
    import sys
    os.system('whoami')
    del sys.modules['code_exec']
    λ python3
    >>> import code_exec
    desktop-2u803dr\peri0d
    ......
    KeyError: 'code_exec'
结合 sys.path 进行注入攻击，它可能为进一步利用系统铺平道路。