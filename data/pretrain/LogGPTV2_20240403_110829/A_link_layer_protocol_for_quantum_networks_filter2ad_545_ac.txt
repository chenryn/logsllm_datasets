two lower quality pairs are combined into one higher quality
one, and the bright state population α (see Appendix D) used
to generate entanglement.
4.1.2 Response to entanglement requests. If entanglement
has been produced successfully, an OK message should be
returned. In addition, the use cases specified in Section 3.3
desire several other pieces of information, which may also
be tracked at higher layer:
(1) An entanglement identifier EntI D unique in the net-
work during the lifetime of the entanglement. This
6
A Link Layer Protocol for Quantum Networks
allows both nodes to immediately process the entan-
glement without requiring an additional round of com-
munication degrading the entanglement due to limited
memory lifetimes.
(2) A qubit ID for K-type (create and keep) requests which
identifies where the local qubit is in the quantum mem-
ory device.
(3) The “Goodness“ G, which for K requests is an estimate
(Section B) of the fidelity — where G ≥ Fmin should
hold — and for M an estimate of the quantum bit error
rate (QBER, see again Appendix A).
(4) The measurement outcome for M type requests.
(5) The time of entanglement creation.
(6) The time the goodness parameter was established. The
goodness may later be updated given fixed information
about the underlying hardware platform.
Evidently, there are many possibilities of failure resulting
in the return of error messages. This includes:
specific time frame (TIMEOUT).
• Timeout when a request could not be fulfilled in a
• An immediate rejection of the request because the
requested fidelity is not achievable in the given time
frame (UNSUPP).
• The quantum storage is permanently (MEMEXCEEDED)
or temporarily (OUTOFMEM) too small to simultane-
ously store all pairs of an atomic request.
• Refusal by the remote node to participate (DENIED).
Finally, we allow an EXPIRE message to be sent, indicating
that the entanglement is no longer available. This in prin-
ciple can be indicated by a quantum memory manager (see
Appendix, Section 5.2.2) instead of the protocol, but we will
that show that it allows for recovery from unlikely failures.
4.1.3
Fixed hardware parameters. Not included in these
request or response messages are parameters that are fixed
for the specific hardware platform, or change only very in-
frequently. As such, these may be obtained by high-level
software by querying the low level system periodically, simi-
larly to some classical network architectures (e.g. [66]). Such
parameters include:
• The number of available qubits.
• The qubit memory lifetimes.
• Possible quantum operations.
• Attainable fidelities and generation time.
• The class of states that are produced.
The latter refers to the fact that more information than just
the fidelity allows optimization at layers above the link layer.
7
4.2 Performance Metrics
Before designing any protocols that adhere to these require-
ments for entanglement generation, we consider the perfor-
mance metrics that such protocols may wish to optimize.
Standard metrics from networking also apply here, such as
throughput (entangled pairs/s), and the latency. We distin-
guish between:
(1) Latency per request (time between submission of a
CREATE request and its successful completion at a
requesting node).
(2) Latency per pair (time between CREATE and OK at
requesting node).
(3) Latency per request per number of requested pairs
(which we denote as the scaled latency).
Given requests may originate at both A and B, we also de-
mand fairness, i.e., the metrics should be roughly indepen-
dent of the origin of the request. Here, we also care about
genuinely quantum quality metrics, specifically the fidelity
F (at least Fmin).
The non-quantum reader may wonder about the signifi-
cance of F, and why we do not simply maximize throughput
(e.g. [17, 91]) or minimize latency (e.g. [24, 37]). For instance,
QKD (a MD use case as listed in Section 3.3), requires a min-
imum quantum bit error rate (QBER) between measurement
outcomes at A and B (related to F, see Appendix A). A lower
F results in a larger QBER, allowing less key to be produced
per pair. We may thus achieve a higher throughput, but a
lower number of key bits per second, or key generation may
become impossible.
4.3 Error Detection
Link layer protocols for classical communication typically
aim to correct or detect errors, e.g. using a CRC. In principle,
there exists an exact analogy at the quantum level: We could
use a checksum provided by a quantum error correcting code
(QECC) [76, 94] to detect errors. This is technologically chal-
lenging and experimental implementations of QECC are in
very early stages [29, 31, 86]. Yet, apart from technological
limitations, future link layer protocols may not use quantum
checksums due to different use case requirements: We typi-
cally only demand some minimum fidelity Fmin with high
confidence that may also fluctuate slightly for pairs produced
within a time window.
As we focus primarily on fidelity, we instead use a different
mechanism: we intersperse test rounds during entanglement
generation (for details, refer to Appendix B) to verify the
quality of the link. Such test rounds are easy to produce with-
out the need for complex gates or extra qubits. Evidently,
there exists an exact analogy in the classical networking
world, where we would transmit test bits to measure the
current quality of transmission, e.g. a direct analogy to net-
work profiling [66, Section 4.3] to gain confidence that the
non-test bits are also likely to be transmitted with roughly
the same amount of error. Yet, there we typically care about
correctness of a specific data item, rather than an enabling
resources like entanglement.
4.4 Physical Entanglement Generation
Let us now explain how heralded entanglement generation is
actually performed between two controllable nodes A and B
(see Appendix D for details). As an example, we focus on the
hardware platform available to us (NV in diamond, Figure 3),
but analogous implementations have been performed using
remote Ion Traps [70] and Neutral Atoms [50].
Nodes A and B are few-qubit quantum processors, capable
of storing and manipulating qubits. They are connected to
an intermediate station called the heralding station H over
optical fibers. This station is a much simpler automated node,
built only from linear optical elements. Each node can have
two types of qubits: memory qubits as a local memory, and
communication qubits with an optical interface. To produce
entanglement, a time synchronized trigger is used at both A
and B to create entanglement between each communication
qubit, and a corresponding traveling qubit (photon). These
photons are sent from A and B to H over fiber. When both ar-
rive at H, H performs an automatic entanglement swapping
operation which succeeds with some probability. Since H has
no quantum memory, both photons must arrive at H at the
same time to succeed. Success or failure is then transmitted
back from H to the nodes A and B over a standard classical
channel (e.g. 100Base-T). In the case of success, one of sev-
eral entangled states may be produced, which can however
be converted to one other using local quantum gates at A
and B. After a generation attempt, the communication qubit
may be moved to a memory qubit, in order to free the com-
munication qubit to produce the next entangled pair. Many
parameters influence the success and quality of this process,
such as the quality of the qubits themselves, the probability
of emission of a photon given a trigger signal, losses in fiber,
and quality of the optical elements such as detectors used at
H (Figure 3).
For further information on this process see [53]. For an
overview on NV centres in diamond see [25]. Two differ-
ent schemes for producing entanglement have been imple-
mented, that differ in how the qubits are encoded into pho-
tons (time-bin [8], or presence/absence of a photon [22]).
While physically different, both of these schemes fit into the
framework of our physical and link layer protocols.
To evaluate the performance of the protocol (Section 6)
and provide intuition of timings, we compare to data from
the setup [53] which uses presence/absence of a photon as
Dahlberg, Skrzypczyk, et al.
encoding. A microwave pulse prepares the communication
qubit depending on a parameter α, followed by a laser pulse
to trigger photon emission (total duration 5.5µs). A pair (|Ψ+⟩
or |Ψ−⟩) is successfully produced with fidelity F ≈ 1 − α (ig-
noring memory lifetimes and other errors, see Appendix D)
with probability psucc ≈ 2αpdet, where pdet ≪ 1 is the prob-
ability of emitting a photon followed by heralding success.
The parameter α thus allows a trade-off between the rate
of generation (psucc), and the quality metric F. For K type
requests, we may store the pair in the communication qubit,
or move to a memory qubit (duration of 1040µs for the qubit
considered). The quality of this qubit degrades as we wait for
H to reply. For M type requests, we may choose to measure
immediately before receiving a reply (here readout 3.7µs).
Important is the time of an attempt tattempt (time preparing
the communication qubit until receiving a reply from H,
and completion of any post-processing such as moving to
memory), and the maximum attempt rate rattempt (maximum
number of attempts that can be performed per second not
including waiting for a reply from H or post-processing).
The rate rattempt can be larger than 1/tattempt: (1) for M the
communication qubit is measured before receiving the reply
from H and thus allows for multiple attempts to overlap
and (2) for K, if the reply from H is failure, then no move to
memory is done.
For performance evaluation we consider two physical se-
tups as an example (see Appendix D) with additional parame-
ters hereafter referred to as the Lab scenario and the QL2020
scenario. The Lab scenario already realized [53] with dis-
tance to the station 1 m from both A and B (communication
delay to H negligible), psucc ≈ α · 10−3 (F vs. α, Figure 8).
For M requests, we act the same for Lab and QL2020 and
always measure immediately before parsing the response
from H to ease comparison (thus tattempt = 1/rattempt = 10.12
µs which includes electron readout 3.7 µs, photon emission
5.5 µs and a 10 % extra delay to avoid race conditions). For
K requests in Lab, tattempt = 1045 µs but 1/rattempt ≈ 11 µs
as memory qubits need to be periodically initialized (330 µs
every 3500 µs). The QL2020 scenario has not been realized
and is based on a targeted implementation connecting two
European cities by the end of 2020 (≈ 10km from A to H
with a communication delay of 48.4µs in fiber, and ≈ 15km
from B to H with a 72.6µs delay). Frequency conversion
of 637nm to 1588nm is performed on the photons emitted
in our modeled NV centre while fiber losses at 1588nm are
taken to be 0.5 dB/km (values for deployed QL2020 are fibers
0.43-0.47 db/km). We model the use of optical cavities to
enhance photon emission [15, 84] giving a probability of
success psucc ≈ α · 10−3. F is worse due to increased commu-
nication times from H (Figure 9). For QL2020 tattempt = 145
µs for M (trigger, wait for reply from H) and tattempt = 1185
µs for K (trigger, wait for reply from H, swap to carbon).
8
A Link Layer Protocol for Quantum Networks
Maximum attempt rates are 1/rattempt = 10.120 µs (M) and
1/rattempt ≈ 165 µs (K).
4.5 Hardware Considerations
Quantum hardware imposes design considerations for any
link layer protocol based on top of such experiments.
Trigger generation: Entanglement can only be produced if
both photons arrive at the heralding station at the same time.
This means that the low level system requires tight timing
control; such control (ns scale) is also required to keep the
local qubits stable. This imposes hard real time constraints
at the lowest level, with dedicated timing control (AWG) and
software running on a dedicated microcontroller (Adwin
ProII). When considering a functional allocation between
the physical and link layer, this motivates taking all timing
synchronization to happen at the physical layer. At this layer,
we may then also timestamp classical messages traveling to
and from H, to form an association between classical control
information and entangled pairs.
Scheduling and flow control: Consequently, we make the
link layer responsible for all higher level logic, including
scheduling, while keeping the physical layer as simple as
possible. An example of scheduling other than priorities, is
flow control which controls the speed of generation, depend-
ing on the availability of memory on the remote node to
store such entanglement.
Note that depending on the number of communication
qubits, and parallelism of quantum operations that the plat-
forms allows, a node also has a global scheduler for the entire
system and not only the actions of the link layer.
Noise due to generation: One may wonder why one does
not continuously trigger entanglement generation locally
whenever the node wants a pair, or why one does not con-
tinuously produce pairs and then this entanglement is either
discarded or otherwise made directly available. In the NV
system, triggering entanglement generation causes the mem-
ory qubits to degrade faster [58, 82]. As such we would like to
achieve agreement between nodes to avoid triggering unless
entanglement it is indeed desired.
This consideration also yields a security risk: if an attacker
could trick a node into triggering entanglement generation,
without a matching request on the other side, this would
allow a rapid destruction of contents of the nodes’ local
quantum memory. For this reason, we want classical com-
munication to be authenticated which can be achieved using
standard methods.
Memory allocation: Decisions on which qubits to use for
what purpose lies in the domain of higher level logic, where
more information is available. We let such decisions be taken
by a global quantum memory manager (QMM), which can
assist the link layer to make a decision on which qubits to
employ. It can also translate logical qubit IDs into physical
qubit IDs in case multiple qubits are used to redundantly
form one logical storage qubit.
5 PROTOCOLS
We now present our protocols satisfying the requirements
and considerations set forth in Sections 3 and 4. The entan-
glement generation protocol (EGP) at the link layer, uses
the midpoint heralding protocol (MHP) at the physical layer.
Classical communication is authenticated, and made reliable
using standard methods (e.g. 802.1AE [54], authentication
only).
5.1 Physical Layer MHP
Our MHP is a lightweight protocol built directly on top of
physical implementations of the form of Section 4.4, sup-
plementing them with some additional control information.
With minor modifications this MHP can be adapted to other
forms of heralded entanglement generation between control-
lable nodes, even using multiple automated middle nodes [47].
The MHP is meant to be implemented directly at the low-
est level subject to tight timing constraints, which is why
we let the MHP poll higher layer (Figure 4, the link layer
EGP) at each timestep to determine whether entanglement
generation is required, and keep no state. A batched oper-
ation is possible, should the delay incurred by the polling
exceed the minimum time to make one entanglement gen-
eration attempt - the MHP cycle - and hence dominate the
throughput. Upon polling, the higher layer may respond “no“
in which case no attempt will be made or with “yes“, addi-
tionally providing parameters to use in the attempt. These
parameters include the type of request (M, measure) or (K,
store) passed on from the higher layer, for which the MHP
takes the following actions.
5.1.1 Protocol for Create and Keep (K). The parameters
given to the MHP with a “yes“ response contain the follow-
ing:
• An ID for the attempt that is forwarded to H
• Generation parameters (α, Section 4.4)
• The device qubits for storing the entanglement
• A sequence of operations to perform on the device