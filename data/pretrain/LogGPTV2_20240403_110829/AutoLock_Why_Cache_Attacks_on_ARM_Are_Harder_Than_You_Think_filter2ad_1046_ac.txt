1080    26th USENIX Security Symposium
USENIX Association
If after the eviction strategy the reload time is smaller
than what is expected for an external memory access, the
target address is likely fetched from cache, thus indicat-
ing AutoLock. If the reload time is equal to an external
memory access, the eviction strategy was successful and
AutoLock is likely not present.
This test has no further requirements other than run-
ning code on the system from userspace and having
access to a sufﬁciently accurate timing source. Com-
monly used timing sources include hardware based time-
stamp counters (PMCCNTR for ARM), the perf subsys-
tem of Linux [36], the POSIX clock_gettime() func-
tion [45], and a custom thread based timer. If available, a
hardware based time-stamp counter is preferred due to its
high precision. Further discussions about timing sources
can be found in the work by Lipp et al. [37] and Zhang
et al. [56]. Similar to PMU event counts, timing mea-
surements can signiﬁcantly be affected by noise.
It is
therefore advisable to repeat the proposed test multiple
times to get a robust conclusion about whether address
T is fetched from cache or external memory. Due to the
versatility of this test, we recommend its use in situa-
tions where either adequate debugging equipment is not
available or the abilities to conduct the other, more ro-
bust experiments are not given (e.g., when root access on
a device cannot be gained due to vendor restrictions).
4 Finding AutoLock in Existing SoCs
In this work, we evaluate the presence of AutoLock on
four test devices and their corresponding system-on-
chips. They are illustrated in Table 2. The Samsung
Exynos 5422 and the ARM Juno r0 SoCs feature two
processors with multiple cores each. They are so-called
ARM big.LITTLE platforms, on which a powerful pro-
cessor is paired with an energy efﬁcient one. Together
with the Samsung Exynos 5250, these SoCs are part of
dedicated development boards or single-board comput-
ers. In contrast, the Qualcomm Snapdragon 805 is part
of an off-the-shelf mobile phone. In total, the four test
devices comprise ﬁve different processors:
the ARM
Cortex-A7, A15, A53, A57, and the Qualcomm Krait
450. Table 1 provides details about their cache hierar-
chies. It shows the number of ways in L1 and L2 caches,
and the eviction strategy parameters for all of them. The
illustrated processors implement separate L1 instruction
and data caches. The number of L1 ways is given only
for the side which the L2 cache is inclusive to. The
LLCs on the Cortex-A7 and A53 are inclusive to the
L1 instruction caches, while the LLCs on the Cortex-
A15, A57, and the Krait 450 are inclusive to the L1 data
caches. The inclusiveness properties of the A15 and A57
are explicitly stated in their respective reference manu-
als [5, 8] (Section Level 2 Memory System). The A7 and
Table 2: Platforms used for the evaluation of AutoLock.
For each device, the corresponding SoC and processor
cores are given.
Device
Arndale
System-on-Chip
Samsung Exynos 5250
ODROID XU4
Samsung Exynos 5422
ARM Juno
ARM Juno r0
Nexus 6
Qualcomm Snapdragon 805
Core(s)
2x Cortex-A15
4x Cortex-A7
4x Cortex-A15
4x Cortex-A53
2x Cortex-A57
4x Krait 450
A53 manuals imply inclusiveness on the instruction side,
but do not explicitly state it [6, 9] (e.g. in Section Op-
tional integrated L2 cache). For the A53, however, the
lead architect conﬁrmed it in an interview [47]. Pub-
lic documentation of the Krait 450 is scarce and infor-
mation about cache inclusiveness could only be obtained
for earlier Krait generations [34]. We therefore infer its
inclusiveness from successful cross-core eviction exper-
iments that at the same time disprove the existence of
AutoLock.
The tests on the Cortex-A processors are initially done
in a bare-metal setting. The lack of an operating system
eliminates interfering cache activity from system pro-
cesses and signiﬁcantly reduces noise. The experiments
are then repeated on Linux for veriﬁcation. On the Krait
450, the experiments are conducted on Linux only. For
each processor, we verify that the eviction parameters
listed in Table 1 can successfully evict cache lines in a
same-core setting. More precisely, we verify successful
eviction when evicting data cache lines using data ad-
dresses, and when evicting instruction cache lines using
instruction addresses. We then test for AutoLock in the
cross-core case with the experiments proposed in the pre-
vious section.
4.1 Test Results
The subsequent sections present the results for all test
methodologies described in Section 3. Along with the
conclusions about the presence of AutoLock on the test
devices, details about the practical execution of the ex-
periments are discussed.
4.1.1 Hardware Debugger
The SoCs on the ARM Juno and the Arndale develop-
ment boards are the only ones among the test devices
that are supported by DSTREAM2. It is therefore possi-
ble to visually inspect the L1 caches of the Cortex-A15,
A53, and A57 processors, and the L2 caches of the A15
and A57. A hardware limitation of the Cortex-A53 in
the ARM Juno r0 SoC prevents the visual inspection of
its L2 cache. To still test for AutoLock on the A53, we
USENIX Association
26th USENIX Security Symposium    1081
Figure 2: Memory access times with and without cross-
core eviction on the Krait 450 processor. A threshold of
700 clock cycles clearly separates the two timing distri-
butions, which indicates that AutoLock is not present.
Figure 3: Memory access times with and without cross-
core eviction on the ARM Cortex-A57 processor. The
two timing distributions clearly overlap, which indicates
that AutoLock inhibits the eviction.
leverage the inclusiveness property to surmise L2 con-
tents. According to Algorithm 2, AutoLock can still be
concluded, if the target address is contained in the core-
private cache of core 0. This is derived from the inclu-
siveness property of the L2 cache.
To conduct the tests, we connect each supported board,
in turn, to the DSTREAM and use breakpoints to tem-
porarily halt program execution after the eviction algo-
rithm is run. When halted, we use the Cache View of
the DS-5 development studio to visually determine if the
target cache line is present in the respective caches. For
the A53, we infer the contents of the L2 based on the in-
clusive L1. We ran the experiments several times on the
A15, A53, and A57 processors. All trials indicate each
processor’s inclusive cache implements AutoLock.
4.1.2 Performance Monitoring Unit (PMU)
To verify to results of the Cortex-A53, we conduct the
experiment described in Algorithm 3 with it. The PMU
is conﬁgured to count accesses to the L2 cache. We then
execute a target instruction on core 0 and run a 25-2-6
eviction strategy on core 1. Before and after reloading
the target instruction, we insert 10 NOP instructions. This
reduces the effects of pipelining, as the A53 has an 8-
stage pipeline. To ensure we only measure exactly the
reload of the target instruction, we execute a DSB and ISB
instruction before each set of NOPs. These instructions
function as memory barriers, guaranteeing that memory
access instructions will execute sequentially. This is nec-
essary because the ARM architecture allows memory ac-
cesses to be reordered to optimize performance.
As a result, we observe that reloading the target in-
struction after executing the eviction algorithm causes
no additional L2 access. This indicates that the eviction
failed and the reload was served from L1. If the evic-
tion had succeeded, the event counter would have been
incremented by the L2 cache miss. We ran the exper-
iment multiple times and observed consistent results in
each trial. This conﬁrms the presence of AutoLock on
the Cortex-A53.
4.1.3 Cache-timing Measurements
To determine the presence of AutoLock on the Cortex-
A7 and the Krait 450, we execute the cache-timing ex-
periment described in Algorithm 4.
In addition, tim-
ing measurements are used to verify the results obtained
for the Cortex-A15, A53, and A57. In all experiments,
the perf subsystem of the Linux kernel, accessible from
userspace, is used to measure access times with a hard-
ware based clock cycle counter. This was taken from
Lipp et al. [37]3.
Figure 2 shows the timing data collected with two sep-
arate executions of Algorithm 4 on the Krait 450. The
ﬁrst execution performed the eviction step as deﬁned in
the algorithm. The timings measured during the reload
phase are shown in red. The second execution skipped
the eviction step. These timings are shown in blue, for
comparison. When the eviction step is skipped, the tar-
get address remains in the cache, and thus the access time
is signiﬁcantly lower, as pictured. This indicates that the
Krait 450 does not implement AutoLock.
The same timing measurements are performed on the
Cortex-A57. The results are shown in Figure 3. Since
the timings for each execution virtually overlap in the
1082    26th USENIX Security Symposium
USENIX Association
400600800100012001400Clock cycles0.00.20.40.60.81.0Normalized frequencywithout evictionwith eviction050100150200250300350Clock cycles0.00.20.40.60.81.0Normalized frequencywithout evictionwith evictiongraph, it is clear that the target address is never evicted.
This conﬁrms the results for the A57 derived with the
hardware debugger, i.e., that it implements AutoLock.
For both the Krait 450 and the A57, we performed 50,000
measurements to ensure that clear trends can be seen.
Corresponding experiments on the Cortex-A7 indicate
that its instruction cache side implements AutoLock.
The measurements on the Cortex-A15 and A53 proces-
sors conﬁrm the previous results and indicate once more
that they implement AutoLock.
4.2 Discussion of the Test Results
The summary of the test results is shown in Table 3. All
ARM Cortex-A processors on our test devices exhibit
AutoLock in their inclusive last-level caches, whereas
no evidence of AutoLock can be found on the Qual-
comm Krait 450. The practical impact of AutoLock is
that cache lines in the LLC are transparently locked dur-
ing runtime. On a multi-core system, this can be trig-
gered simultaneously in multiple cores. For each core,
AutoLock essentially reduces the number of lines per
LLC set that are available to store new data and instruc-
tions. Depending on the associativity of the core-private
cache levels the LLC is inclusive to, a signiﬁcant fraction
of cache lines can be locked in an LLC set. Referring to
Table 1, it can be seen that the Cortex-A7 features 2-way
L1 instruction caches and an inclusive 8-way L2 cache.
This means that on a quad-core A7 it is possible to lock
all ways of an L2 cache set with instructions held in the
core-private caches. Requests to store lines from L1 data
caches in such a set subsequently fail, but do not vio-
late inclusiveness, as the L2 is non-inclusive to L1 data
caches. On the other Cortex-A processors, L2 cache sets
cannot fully be locked. In quad-core Cortex-A15, A53,
and A57 processors, up to 8 ways can be locked in an
L2 set at once. As the Krait 450 does not implement
AutoLock, the number of ways in the L2 does not need
to match the sum of ways in the L1 caches. Hence, the
L1 data caches contain 4 ways while the L2 contains 8.
5 Related Work
The ﬁeld of cache attacks ﬁnds its origins in the early
anticipation of varying memory access times compro-
mising the security of cryptographic software [32, 35].
Ever since, this ﬁeld has seen signiﬁcant development
in both attack and defense strategies. Tsunoo [48] and
Bernstein [13] ﬁrst introduced practical attacks based
on the varying execution time of block ciphers. As
the targeted implementations performed key-dependent
memory accesses that resulted in key-dependent num-
bers of cache hits and misses, the execution time con-
tained sufﬁcient information to recover (parts of) the se-
Table 3: Evaluation results for the ARM and ARM-
compliant processors of the test devices.
Processor
Cortex-A7
Cortex-A15
Cortex-A53
Cortex-A57
Krait 450
System-on-Chip
Samsung Exynos 5422
Samsung Exynos 5250/5422
ARM Juno r0
ARM Juno r0
Qualcomm Snapdragon 805
AutoLock
Present
Present
Present
Present
Not Present
cret key. The works of Tsunoo and Bernstein belong to
the group of time-driven attacks that exploit the link be-
tween overall processing time and cache activity. Similar
attacks have subsequently been demonstrated by Bon-
neau and Mironov [15], Acıiçmez et al. [3], and Bog-
danov et al. [14]. An alternative attack vector is intro-
duced in the work of Page [43], where the sequence of
cache hits and misses is observed during the execution
of the cipher. Knowing how the key is involved in the
memory accesses, this sequence (or trace) allows to in-
fer bits of the key, which is the basis of so-called trace-
driven attacks that have been studied further by Acıiçmez
and Koç [2], Fournier and Tunstall[19], and Gallais and
Kizhvatov [20]. While AutoLock can in theory affect
both time- and trace-driven attacks, we consider its prac-
tical impact to be limited. First, both attack types typ-
ically do not require active and ﬁne-grained manipula-
tion of the cache. Instead, attacks rely on background
activity on the target system, limited sizes of cache lev-
els, self-evictions, and the fact that unused data will typ-
ically be removed from cache after some time. These
building blocks are hardly affected by AutoLock. Sec-
ond, attacks often employ statistical analyses and thereby
implicitly account for erroneous observations. As such,
AutoLock will most likely act as an additional source
of noise. The situation changes for attacks that exploit
individual accesses to the cache. These so-called access-
driven attacks have proven to be considerable threats in
practice and consequently gained signiﬁcant attention in
literature over the past decade. What access-driven at-
tacks have in common is that data or instructions are se-
lectively removed from the cache hierarchy at some point
during the attack. While a large number of attack papers
have been published, only a few basic attack strategies
exist that can be categorized depending on how this re-
moval is implemented.
Flush-based Attacks. The ﬁrst group of attacks relies
on cache ﬂushing, i.e., the removal of cache contents
with dedicated ﬂush instructions that are part of the pro-
cessor’s instruction set. Gullasch et al. [25] introduced
a ﬂush based attack on x86 processors and used it to
retrieve an AES key from a core co-resident victim by
abusing the ﬂush instruction clflush as well as mem-
ory deduplication and the Completely Fair Scheduler of
USENIX Association
26th USENIX Security Symposium    1083
Linux. Yarom and Falkner [51] extended the work by
and proposed the Flush+Reload at-
Gullasch et al.
tack, with which they recovered RSA keys across pro-
cessor cores and virtual machines. This work was ex-
panded by Irazoqui et al. [29, 30], who demonstrated
the recovery of AES keys and TLS session messages.
The Flush+Reload technique was concurrently used by
Benger et al. [12] to recover ECC secret keys, by Zhang
et al. [58] to launch cross-tenant attacks on PaaS clouds,
and by Gruss et al. [24] to implement template attacks.
Based on the timing variations of clflush, Gruss et
al. [23] also proposed the Flush+Flush attack. We cur-
rently believe that none of the ﬂush based attacks are af-