# Detecting debugging
检测调试器的方法很多, 比如检测进程名之类. 这里我们介绍一种方法, 就是通过检测一些函数的调用情况来分析程序当前是否处于被调试状态
```c 
int main()
{
	if (ptrace(PTRACE_TRACEME, 0, 1, 0) 
```
那要是有启用-s选项, 该怎么处理呢? 这时我们需要使用gdb
```
# gdb test_debug
gdb> bp ptrace
Breakpoint 1 at 0x80482c0
gdb> run
Breakpoint 1 at 0x400e02f0
......
0x400e02f0 : push %ebp
0x400e02f1 : mov %esp,%ebp
0x400e02f3 : sub $0x10,%esp
0x400e02f6 : mov %edi,0xfffffffc(%ebp)
0x400e02f9 : mov 0x8(%ebp),%edi
0x400e02fc : mov 0xc(%ebp),%ecx
------------------------------------------------------------------------------
Breakpoint 1, 0x400e02f0 in ptrace () from /lib/tls/libc.so.6
```
我们简单地断在了ptrace处, 现在输入finish执行到当前函数返回, 回到main函数里
```
# gdb test_debug
gdb> finish
00x80483d9 : 	add $0x10,%esp
0x80483dc   : 	test %eax,%eax
0x80483de   : 	jns 0x80483fa 
0x80483e0   : 	sub $0xc,%esp
0x80483e3   : 	push $0x80484e8
0x80483e8   : 	call 0x80482e0
------------------------------------------------------------------------------
0x080483d9 in main ()
```
将函数返回结果eax修改为正确的返回结果, 就可以了
```
gdb> set $eax=0
gdb> c
everything ok
Program exited with code 016.
_______________________________________________________________________________
No registers.
gdb>
```
## 绕过方法2
方法2就是编写自己的ptrace函数
如前几篇所述, `LD_PRELOAD`环境变量可以将可执行文件指向我们自己的ptrace函数.
我们写一个ptrace函数并生成目标文件
``` c
// -- ptrace.c --
// gcc -shared ptrace.c -o ptrace.so
int ptrace(int i, int j, int k, int l)
{
	printf(" PTRACE CALLED!\n");
}
```
我们接下来就可以通过设置环境变量LD_PRELOAD来使用我们自己的ptrace函数, 当然这里是可以在gdb中进行设置
```
gdb> set environment LD_PRELOAD ./ptrace.so
gdb> run
PTRACE CALLED!
Hello World!
Program exited with code 015.
gdb>
```
可以看到程序无法检测到调试器了. 
> Reference: [Beginners Guide to Basic Linux Anti Anti Debugging Techniques](http://www.stonedcoder.org/~kd/lib/14-61-1-PB.pdf)