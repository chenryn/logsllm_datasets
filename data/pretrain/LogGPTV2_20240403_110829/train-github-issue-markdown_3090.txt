From here:
Hey folks, I think this is a bug. When using ES7 async/await, if I require
`"babel/polyfill"`, it's going to be used before polyfill is required
(`regeneratorRuntime.mark`).
Following code:
    'use strict';
    import {} from 'babel/polyfill';
    import fs from 'fs';
    async function* foo () {
      console.log('foo');
    }
    async function* bar () {
      console.log('bar');
    }
Will be transpiled to
    'use strict';
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    var marked0$0 = [foo, bar].map(regeneratorRuntime.mark);
    require('babel/polyfill');
    var _fs = require('fs');
    var _fs2 = _interopRequireDefault(_fs);
    function foo() {
      return regeneratorRuntime.async(function foo$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            console.log('foo');
          case 1:
          case 'end':
            return context$1$0.stop();
        }
      }, marked0$0[0], this);
    }
    function bar() {
      return regeneratorRuntime.async(function bar$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            console.log('bar');
          case 1:
          case 'end':
            return context$1$0.stop();
        }
      }, marked0$0[1], this);
    }
as you can see, the require statement in line 7 comes too late.