Multiple data streams
I 
Unicode-based names
I 
General indexing facility
I 
Dynamic bad-cluster remapping
I 
Hard links
I 
Symbolic (soft) links and junctions
I 
Compression and sparse files
I 
Change logging
I 
Per-user volume quotas
I 
Link tracking
I 
Encryption
I 
POSIX support
I 
Defragmentation
I 
Read-only support and dynamic partitioning
I 
Tiered volume support
The following sections provide an overview of these features.
CHAPTER 11
Caching and file systems
631
Multiple data streams
In NTFS, each unit of information associated with a file—including its name, its owner, its time stamps, 
its contents, and so on—is implemented as a file attribute (NTFS object attribute). Each attribute con-
sists of a single stream—that is, a simple sequence of bytes. This generic implementation makes it easy 
to add more attributes (and therefore more streams) to a file. Because a file’s data is “just another at-
tribute” of the file and because new attributes can be added, NTFS files (and file directories) can contain 
multiple data streams.
An NTFS file has one default data stream, which has no name. An application can create additional, 
named data streams and access them by referring to their names. To avoid altering the Windows I/O 
APIs, which take a string as a file name argument, the name of the data stream is specified by append-
ing a colon (:) to the file name. Because the colon is a reserved character, it can serve as a separator 
between the file name and the data stream name, as illustrated in this example:
myfile.dat:stream2
Each stream has a separate allocation size (which defines how much disk space has been reserved 
for it), actual size (which is how many bytes the caller has used), and valid data length (which is how 
much of the stream has been initialized). In addition, each stream is given a separate file lock that is 
used to lock byte ranges and to allow concurrent access.
One component in Windows that uses multiple data streams is the Attachment Execution Service, 
which is invoked whenever the standard Windows API for saving internet-based attachments is used by 
applications such as Edge or Outlook. Depending on which zone the file was downloaded from (such as 
the My Computer zone, the Intranet zone, or the Untrusted zone), Windows Explorer might warn the 
user that the file came from a possibly untrusted location or even completely block access to the file. 
For example, Figure 11-24 shows the dialog box that’s displayed when executing Process Explorer after 
it was downloaded from the Sysinternals site. This type of data stream is called the Zone.Identifier and 
is colloquially referred to as the “Mark of the Web.”
Note If you clear the check box for Always Ask Before Opening This File, the zone identifier 
data stream will be removed from the file.
FIGURE 11-24 Security warning for files downloaded from the internet.
632
CHAPTER 11
Caching and file systems
Other applications can use the multiple data stream feature as well. A backup utility, for example, 
might use an extra data stream to store backup-specific time stamps on files. Or an archival utility 
might implement hierarchical storage in which files that are older than a certain date or that haven’t 
been accessed for a specified period of time are moved to offline storage. The utility could copy the file 
to offline storage, set the file’s default data stream to 0, and add a data stream that specifies where the 
file is stored.
EXPERIMENT: Looking at streams
Most Windows applications aren’t designed to work with alternate named streams, but both the 
echo and more commands are. Thus, a simple way to view streams in action is to create a named 
stream using echo and then display it using more. The following command sequence creates a 
file named test with a stream named stream:
c:\Test>echo Hello from a named stream! > test:stream 
c:\Test>more 
If you perform a directory listing, Test’s file size doesn’t reflect the data stored in the alternate 
stream because NTFS returns the size of only the unnamed data stream for file query operations, 
including directory listings.
c:\Test>dir test 
 Volume in drive C is OS. 
 Volume Serial Number is F080-620F 
 Directory of c:\Test 
12/07/2018  05:33 PM
0 test 
1 File(s)
0 bytes 
0 Dir(s)  18,083,577,856 bytes free 
c:\Test>
You can determine what files and directories on your system have alternate data streams 
with the Streams utility from Sysinternals (see the following output) or by using the /r switch 
in the dir command.
c:\Test>streams test 
streams v1.60 - Reveal NTFS alternate streams. 
Copyright (C) 2005-2016 Mark Russinovich 
Sysinternals - www.sysinternals.com 
c:\Test\test:
:stream:$DATA 29
EXPERIMENT: Looking at streams
Most Windows applications aren’t designed to work with alternate named streams, but both the 
echo and more commands are. Thus, a simple way to view streams in action is to create a named 
stream using echo and then display it using more. The following command sequence creates a 
file named test with a stream named stream:
c:\Test>echo Hello from a named stream! > test:stream
c:\Test>more 
If you perform a directory listing, Test’s file size doesn’t reflect the data stored in the alternate 
stream because NTFS returns the size of only the unnamed data stream for file query operations, 
including directory listings.
c:\Test>dir test
 Volume in drive C is OS.
 Volume Serial Number is F080-620F
 Directory of c:\Test
12/07/2018  05:33 PM
0 test
1 File(s)
0 bytes
0 Dir(s)  18,083,577,856 bytes free
c:\Test>
You can determine what files and directories on your system have alternate data streams 
with the Streams utility from Sysinternals (see the following output) or by using the /r switch 
in the dir command.
c:\Test>streams test
streams v1.60 - Reveal NTFS alternate streams.
Copyright (C) 2005-2016 Mark Russinovich
Sysinternals - www.sysinternals.com
c:\Test\test:
:stream:$DATA 29
CHAPTER 11
Caching and file systems
633
Unicode-based names
Like Windows as a whole, NTFS supports 16-bit Unicode 1.0/UTF-16 characters to store names of files, 
directories, and volumes. Unicode allows each character in each of the world’s major languages to be 
uniquely represented (Unicode can even represent emoji, or small drawings), which aids in moving data 
easily from one country to another. Unicode is an improvement over the traditional representation of 
international characters—using a double-byte coding scheme that stores some characters in 8 bits and 
others in 16 bits, a technique that requires loading various code pages to establish the available charac-
ters. Because Unicode has a unique representation for each character, it doesn’t depend on which code 
page is loaded. Each directory and file name in a path can be as many as 255 characters long and can 
contain Unicode characters, embedded spaces, and multiple periods.
General indexing facility
The NTFS architecture is structured to allow indexing of any file attribute on a disk volume using a 
B-tree structure. (Creating indexes on arbitrary attributes is not exported to users.) This structure
enables the file system to efficiently locate files that match certain criteria—for example, all the files in
a particular directory. In contrast, the FAT file system indexes file names but doesn’t sort them, making
lookups in large directories slow.
Several NTFS features take advantage of general indexing, including consolidated security descrip-
tors, in which the security descriptors of a volume’s files and directories are stored in a single internal 
stream, have duplicates removed, and are indexed using an internal security identifier that NTFS 
defines. The use of indexing by these features is described in the section “NTFS on-disk structure” later 
in this chapter.
Dynamic bad-cluster remapping
Ordinarily, if a program tries to read data from a bad disk sector, the read operation fails and the data 
in the allocated cluster becomes inaccessible. If the disk is formatted as a fault-tolerant NTFS volume, 
however, the Windows volume manager—or Storage Spaces, depending on the component that 
provides data redundancy—dynamically retrieves a good copy of the data that was stored on the 
bad sector and then sends NTFS a warning that the sector is bad. NTFS will then allocate a new cluster, 
replacing the cluster in which the bad sector resides, and copies the data to the new cluster. It adds 
the bad cluster to the list of bad clusters on that volume (stored in the hidden metadata file BadClus) 
and no longer uses it. This data recovery and dynamic bad-cluster remapping is an especially useful 
feature for file servers and fault-tolerant systems or for any application that can’t afford to lose data. If 
the volume manager or Storage Spaces is not used when a sector goes bad (such as early in the boot 
sequence), NTFS still replaces the cluster and doesn’t reuse it, but it can’t recover the data that was on 
the bad sector.
634
CHAPTER 11
Caching and file systems
Hard links
A hard link allows multiple paths to refer to the same file. (Hard links are not supported on directories.) 
If you create a hard link named C:\Documents\Spec.doc that refers to the existing file C:\Users 
\Administrator\Documents\Spec.doc, the two paths link to the same on-disk file, and you can make chang-
es to the file using either path. Processes can create hard links with the Windows CreateHardLink function.
NTFS implements hard links by keeping a reference count on the actual data, where each time 
a hard link is created for the file, an additional file name reference is made to the data. This means 
that if you have multiple hard links for a file, you can delete the original file name that referenced 
the data (C:\Users\Administrator\Documents\Spec.doc in our example), and the other hard links 
(C:\Documents\Spec.doc) will remain and point to the data. However, because hard links are on-disk 
local references to data (represented by a file record number), they can exist only within the same vol-
ume and can’t span volumes or computers.
EXPERIMENT: Creating a hard link
There are two ways you can create a hard link: the fsutil hardlink create command or the mklink
utility with the /H option. In this experiment we’ll use mklink because we’ll use this utility later to cre-
ate a symbolic link as well. First, create a file called test.txt and add some text to it, as shown here.
C:\>echo Hello from a Hard Link > test.txt
Now create a hard link called hard.txt as shown here:
C:\>mklink hard.txt test.txt /H 
Hardlink created for hard.txt > test.txt
If you list the directory’s contents, you’ll notice that the two files will be identical in every way, 
with the same creation date, permissions, and file size; only the file names differ.
c:\>dir *.txt 
 Volume in drive C is OS 
 Volume Serial Number is F080-620F 
 Directory of c:\ 
12/07/2018  05:46 PM
26 hard.txt 
12/07/2018  05:46 PM
26 test.txt 
2 File(s)
52 bytes 
0 Dir(s)  15,150,333,952 bytes free 
Symbolic (soft) links and junctions
In addition to hard links, NTFS supports another type of file-name aliasing called symbolic links or soft 
links. Unlike hard links, symbolic links are strings that are interpreted dynamically and can be rela-
tive or absolute paths that refer to locations on any storage device, including ones on a different local 
volume or even a share on a different system. This means that symbolic links don’t actually increase the 
reference count of the original file, so deleting the original file will result in the loss of the data, and a 
symbolic link that points to a nonexisting file will be left behind. Finally, unlike hard links, symbolic links 
can point to directories, not just files, which gives them an added advantage.
EXPERIMENT: Creating a hard link
There are two ways you can create a hard link: the fsutil hardlink create command or the mklink
utility with the /H option. In this experiment we’ll use mklink because we’ll use this utility later to cre-
ate a symbolic link as well. First, create a file called test.txt and add some text to it, as shown here.
C:\>echo Hello from a Hard Link > test.txt
Now create a hard link called hard.txt as shown here:
C:\>mklink hard.txt test.txt /H
Hardlink created for hard.txt > test.txt
If you list the directory’s contents, you’ll notice that the two files will be identical in every way, 
with the same creation date, permissions, and file size; only the file names differ.
c:\>dir *.txt
 Volume in drive C is OS
 Volume Serial Number is F080-620F
 Directory of c:\
12/07/2018  05:46 PM
26 hard.txt
12/07/2018  05:46 PM
26 test.txt
2 File(s)
52 bytes
0 Dir(s)  15,150,333,952 bytes free 
CHAPTER 11
Caching and file systems
635
For example, if the path C:\Drivers is a directory symbolic link that redirects to %SystemRoot%\
System32\Drivers, an application reading C:\Drivers\Ntfs.sys actually reads %SystemRoot%\System\
Drivers\Ntfs.sys. Directory symbolic links are a useful way to lift directories that are deep in a direc-
tory tree to a more convenient depth without disturbing the original tree’s structure or contents. The 
example just cited lifts the Drivers directory to the volume’s root directory, reducing the directory 
depth of Ntfs.sys from three levels to one when Ntfs.sys is accessed through the directory symbolic 
link. File symbolic links work much the same way—you can think of them as shortcuts, except they’re 
actually implemented on the file system instead of being .lnk files managed by Windows Explorer. Just 
like hard links, symbolic links can be created with the mklink utility (without the /H option) or through 
the CreateSymbolicLink API.
Because certain legacy applications might not behave securely in the presence of symbolic links, 
especially across different machines, the creation of symbolic links requires the SeCreateSymbolicLink
privilege, which is typically granted only to administrators. Starting with Windows 10, and only if 
Developer Mode is enabled, callers of CreateSymbolicLink API can additionally specify the SYMBOLIC_
LINK_FLAG _ ALLOW_UNPRIVILEGED_CREATE flag to overcome this limitation (this allows a standard 
user is still able to create symbolic links from the command prompt window). The file system also has a 
behavior option called SymLinkEvaluation that can be configured with the following command:
fsutil behavior set SymLinkEvaluation
By default, the Windows default symbolic link evaluation policy allows only local-to-local and local-
to-remote symbolic links but not the opposite, as shown here:
D:\>fsutil behavior query SymLinkEvaluation 
Local to local symbolic links are enabled 
Local to remote symbolic links are enabled. 
Remote to local symbolic links are disabled. 
Remote to Remote symbolic links are disabled.
Symbolic links are implemented using an NTFS mechanism called reparse points. (Reparse points are 
discussed further in the section “Reparse points” later in this chapter.) A reparse point is a file or direc-
tory that has a block of data called reparse data associated with it. Reparse data is user-defined data 
about the file or directory, such as its state or location that can be read from the reparse point by the 
application that created the data, a file system filter driver, or the I/O manager. When NTFS encounters 
a reparse point during a file or directory lookup, it returns the STATUS_REPARSE status code, which 
signals file system filter drivers that are attached to the volume and the I/O manager to examine the 
reparse data. Each reparse point type has a unique reparse tag. The reparse tag allows the component 
responsible for interpreting the reparse point’s reparse data to recognize the reparse point without 
having to check the reparse data. A reparse tag owner, either a file system filter driver or the I/O man-
ager, can choose one of the following options when it recognizes reparse data:
I 
The reparse tag owner can manipulate the path name specified in the file I/O operation
that crosses the reparse point and let the I/O operation reissue with the altered path name.
Junctions (described shortly) take this approach to redirect a directory lookup, for example.
I 
The reparse tag owner can remove the reparse point from the file, alter the file in some way,
and then reissue the file I/O operation.
636
CHAPTER 11
Caching and file systems
There are no Windows functions for creating reparse points. Instead, processes must use the FSCTL_
SET_REPARSE_POINT file system control code with the Windows DeviceIoControl function. A process 
can query a reparse point’s contents with the FSCTL_GET_REPARSE_POINT file system control code. 
The FILE_ATTRIBUTE_REPARSE_POINT flag is set in a reparse point’s file attributes, so applications can 
check for reparse points by using the Windows GetFileAttributes function.
Another type of reparse point that NTFS supports is the junction (also known as Volume Mount 
point). Junctions are a legacy NTFS concept and work almost identically to directory symbolic links, 
except they can only be local to a volume. There is no advantage to using a junction instead of a direc-
tory symbolic link, except that junctions are compatible with older versions of Windows, while directory 
symbolic links are not.
As seen in the previous section, modern versions of Windows now allow the creation of reparse points 
that can point to non-empty directories. The system behavior (which can be controlled from minifilters 
drivers) depends on the position of the reparse point in the target file’s full path. The filter manager, NTFS, 
and ReFS file system drivers use the exposed FsRtlIsNonEmptyDirectoryReparsePointAllowed API to detect 