后面这两个函数就是调用 key1 加密文件，然后把 加密后的文件 + 加密好的 key1 写到加密好的文件里
所以关键问题就是恢复 key1。因为有 key2 这一坨东西，调试并在本地复现发现 key2 是 rsa 加密，n巨大无法分解，遂放弃
后来终于注意到题目加密的是 bmp 文件，bmp 文件当然有固定的格式，而 key1 又只有一个时间戳不确定，所以爆破时间戳就行了
爆破时间戳
     void decrypt_test(void){
          DWORD32 key[4] = { 0x0EC62FB2,0x4B54D44F,0,0x8EB1E721 };
          FILE* f;
          int mode;
          fopen_s(&f, "I:\\flag.bmp.ctf_crypter", "rb");
          BYTE* cipher=(BYTE*)malloc(0xd6830);
          memset(cipher, 0, 0xd6830);
          fread(cipher, sizeof(char), 0xd6830, f);
          for (int i = 1629097200; i  1:
            p = GCD(n, int(e * dp + i - 1))
            q = n // p
            print(long_to_bytes(pow(c, inverse(e, (p - 1) * (q - 1)), n)))
            break
###  myRSA
先对$n-1$进行加密，拿到$temp = (x + y)(n-1)+k_1+k_2$  
$k_1+k_2$大概有1041bit讲temp整除$n-1$之后可以得到$x+y$的大概值  
然后根据大小关系，直接对$x+y$开三次根 $+1$拿到$p+q$，拿flag同理直接把 enc_flag 整除$x+y$即可拿到正常的c
    # -*- coding: utf-8 -*-    
    from hashlib import sha256
    from Crypto.Util.number import *
    from pwn import *
    from gmpy2 import iroot
    String = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz'
    def proof(known, hashcode):
        for each1 in String:
            for each2 in String:
                for each3 in String:
                    for each4 in String:
                        this = each1 + each2 + each3 + each4 + known
                        if sha256(this.encode()).hexdigest() == hashcode:
                            # print(each1 + each2 + each3 + each4)
                            return each1 + each2 + each3 + each4
    host, port = "47.104.85.225", 49803
    context.log_level = "debug"
    sh = remote(host, port)
    data = sh.recvrepeat(1).decode()
    known, hashcode = re.findall(r'256\(\?\+(.*?)\) == (.*?)\n', data)[0]
    secret = proof(known, hashcode)
    sh.sendline(secret.encode())
    sh.recvuntil('This is my public key:\n')
    n = int(sh.recvuntil('\n').decode().strip().split(' ')[-1])
    e = 0x10001
    sh.recvuntil('exit\n')
    sh.sendline(b'1')
    sh.recvuntil('\n')
    sh.sendline(long_to_bytes(n - 1))
    sh.recvuntil('\n')
    tmp = int(sh.recvuntil('\n').decode().strip())
    sh.recvuntil('exit\n')
    sh.sendline(b'2')
    sh.recvuntil('\n')
    sh.recvuntil('\n')
    c = int(sh.recvuntil('\n').decode().strip())
    sum = (iroot(tmp // (n - 1), 3)[0] + 1)
    p = (sum - iroot(sum ** 2 - 4 * n, 2)[0]) // 2
    q = n // p
    c = c // ((p + q) ** 3 - (p - q) ** 2 + (p + q))
    print(long_to_bytes(pow(c, inverse(e, (p - 1) * (q - 1)), n)))