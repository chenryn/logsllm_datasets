Apk的包体积对下载转化率、分发费直接挂钩，所以Apk一旦度过初
创 时 期 ， 就 要 考 虑 Apk 的 包 体 积 优 化 ， 而 So 文 件 往 往 占 据 1/3-
1/2的包体积，不提供市场占有率极小的Mips以及X86系列的So，可
以瞬间解决Apk臃肿。
2.2.3 形势考虑
形势比人强，ARM如日中天，无奈之下Mips和X86都设计了用于转换
ARM汇编的中间层，即使Apk只提供了ARM的So库文件，这两种CPU
架构的手机也可以以较慢速度运行APK。
2.2.4 ARM兼容性
ARM有armeabi，armv7a，armv8a这三个系列，系列之间是不断发
展和完善的升级关系。目前主流手机的CPU都是armv8a，即64位的A
RM 设 备 ， 而 armeabi 甚 至 只 用 在 Android
4.0以下的手机，但好在Arm是向下兼容的，如果Apk不需要用到一
些高性能的东西，完全可以只提供armeabi的So，这样几乎可以支
持所有架构的手机。
2.3 Hook JNI函数
通过上述的学习我们了解到，JNIEnv提供给了我们两百多个函数，
帮助我们将Java中的对象和数据转换成C/C++的类型，帮助我们调
用Java函数、帮助我们将C中生成的结果转换回Java中的对象和数
据 并 返 回 ， 因 此 ， 如 果 能 Hook
JNI函数，会对我们逆向与分析So产生帮助。
使 用 Frida Hook
Native函数十分简单，只需要我们提供地址即可。
Frida提供了一种非常方便优雅的方式获得JNIEnv的地址，需要注
意的是必须在Java.perform中调用。
var jnienv_addr = 0x0;
Java.perform(function(){
jnienv_addr = Java.vm.getEnv().handle.readPointer();
});
console.log("JNIEnv base adress get by
Java.vm.getEnv().handle.readPointer():" + jnienv_addr);
JNIEnv指针指向JNINativeInterface这个数组，里面包含两百多
个指针，即各种各样的JNI函数。
我们可以查看一下Jni.h头文件
假设JNIEnv地址为0x1000，一个指针长4，那么reversed0地址即
为0x1000，reversed1为0x1004，之后我们读取这个指针，就可
以得到JNI函数的地址，从而实现Hook。
在我们上述的JNINativeInterface数组中，它排在第七个，那么
偏移就是4*(7-1)=24。
function hook_native_findclass() {
var jnienv_addr = Java.vm.getEnv().handle.readPointer();
var FindClassPtr = Memory.readPointer(jnienv_addr.add(24));
// 注意，Frida提供了add(+),sub(-
)等函数供我们做加减乘除，你也可以通过add(0x12)这种形式加一个十六进制数
。
console.log("FindClassPtr addr: " + FindClassPtr);
Interceptor.attach(FindClassPtr, {
onEnter: function (args) {
...
}
});
}
接下来我们以IDA为例，加深理解。在我们使用IDA逆向和分析SO时
，如果单纯导入SO，会有大量“无法识别”的函数。
所以惯例上，我们会导入Jni.h头文件，再设置方法的第一个参数为
JNIEnv类型，这样IDA就能顺利将形如*（a1+xxx）这种指针识别
为JNI函数 ，但可能很多人没有想过为什么这样可以成功。
事实上，导入Jni.h头文件是为了引入JNINativeInterface与JNI
InvokeInterface 结构体信息，而转换参数一为JNIEnv 类型，就
是在提醒IDA，将*(env+704)映射成对应的JNIEnv函数。
而我们现在所做的是一种相反的操作，已知各个JNI函数的名字和他
们在数组中的位置，希望得到其地址。
不知道大家是否发现，由于JNI实现方法的第一个参数总是JNIEnv
，所以我们也可以通过Hook一个JNI实现方法作为跳板，从而获得J
NIEnv的地址。
function hook_jni(){
var so_name = ""; // 请选择目标Apk SO
var function_name = ""; //请选择目标SO中一个JNI实现方法
var open_addr = Module.findExportByName(so_name,
function_name);
Interceptor.attach(open_addr, {
onEnter: function (args) {
var jnienv_addr = 0x0;
console.log("get by args[0].readPointer():" +
args[0].readPointer());
Java.perform(function () {
jnienv_addr =
Java.vm.getEnv().handle.readPointer();
});
console.log("get by
Java.vm.getEnv().handle.readPointer():" + jnienv_addr);
},
onLeave: function (retval) {
}
});
}
hook_jni();
结果完全正确，但这种方法流程明显更加复杂，不够优雅，不建议
使 用 。
好了，我们回归到主线上来，上面我们Hook了FindClass这个函数
，想一下我们Hook一个JNI函数需要做的工作，一是找到这个函数
对应的偏移，二是在onEnter和onLeave中编写具体的逻辑，因为
每个JNI函数的参数和返回值都不一样。
有没有办法简化这两个步骤呢？比如只需要输入JNI函数名，而不需
要手动计算偏移？这个好办，我们看一下代码。
var jni_struct_array = [
"reserved0",
"reserved1",
"reserved2",
"reserved3",
"GetVersion",
"DefineClass",
"FindClass",
*******此处省略两百多个JNI函数**********
"FromReflectedMethod",
"FromReflectedField",
"ExceptionCheck",
"NewDirectByteBuffer",
"GetDirectBufferAddress",
"GetDirectBufferCapacity",
"GetObjectRefType",
]
function getJNIFunctionAdress(jnienv_addr,func_name){
var offset = jni_struct_array.indexOf(func_name) * 4;
return Memory.readPointer(jnienv_addr.add(offset))
}
代码很简单，将JNI函数罗列在数组中，通过Js中indexOf这个数组
处理函数得到目标数组的索引，乘4就是偏移了，除此之外，你可以
选择乘Process.pointerSize，这是Frida提供给我们的Api，返
回当前平台指针所占用的内存大小，这样做可以增加脚本的移植性
（ 其 实 没 啥 区 别 ） 。
我们进一步希望，能不能不用在onEnter和onLeave中编写具体的
逻辑，反正JNI函数的参数和返回值类型都在Jni.h中定义好了，也
不会有什么更多的变化了。
需 要 注 意 的 是 ， 它 在 理 论 上 实 现 了 Hook
所有JNI函数，并提供了人性化的筛选等功能，但在我的测试机上并
没有很顺利或者正确的打印出全部JNI调用，更多精彩需要读者自己
去挖掘喽。
三、Hook动态注册函数
在 第 二 部 分 我 们 将 尝 试 Hook
JNIEnv提供的RegisterNatives函数，在上面我们已经讲过JNI函
数的Hook，为什么要花同样的篇幅去讲解呢？当然是因为这个函数
比较常用，而且可以给分析带来很大帮助。
3.1 反编译so文件
在逆向时，静态注册的函数只需要找到对应的So，函数导出表中搜
索即可定位。而动态注册的函数会复杂一些，下面列一下流程。
1.在导出函数中搜索JNI_OnLoad,点击进入。
2.Tab 或 者 f5 键 反 汇 编 arm 指 令 。
3.之前我们已经知道，凡是*(指针变量+xxx)这种形式都是在使用J
NI函数，所以导入Jni.h头文件，在a1,v5,v2等变量上右键如图。
这个时候JNI函数都正确展示出来，如果大家反编译的是自己的Apk
，对照着看源码和反汇编代码，仍然会感觉“不太舒服”，我们还
有一些额外的工作可以做。
4.IDA由于不确定参数的数目，常常会不显示函数的参数，用如下的
方式强制展示参数（findclass显然不可能无参）。
在几个jni函数上都试一下，结果如下，需要注意的是，自己写的Ap
p可能不会有这些问题。
5. 接 下 来 我 们 隐 藏 掉 类 型 转 换 ， 这 样 代 码 会 更 加 可 读 。
反编译的工作顺利完成了，接下来找动态注册的函数。
3.2 寻找关键函数
看一下RegisterNatives这个函数的原型。
jint RegisterNatives(JNIEnv *env,jclass clazz, const
JNINativeMethod *methods, jnint nMethods);
第一个参数是JNIEnv指针，所有的JNI函数第一个参数都是它。
第二个参数jclasss是类对象，通过 JNI FindClass函数得来。
第三个参数是一个数组，数组中包含了若干个结构体，每个结构体
存储了Java Native方法到JNI实现方法的映射关系。
第四个参数代表了数组中结构体的数量，或者可以说此次动态注册
了多少个native方法。
我们仔细品一下这个结构体，内容为Java层方法名+签名+JNI层对
应的函数指针，Java层方法名并不携带包的路径，包的信息由第二
个参数，也就是jclass类对象提供。签名的写法和Smali语法类似
，想必大家不陌生。JNI层对应的函数指针也似乎没啥问题。
接下来我们阅读一下截图中的RegisterNatives函数，v3即类对象
， “com/m4399/……” 即 Java
native函数所声明的类，第四个参数为16，即off_20044这个数组
中 有 十 六 个 结 构 体 ， 或 者 说 十 六 组 java
native函数与jni实现函数的映射。
我想你应该不会对off_20044这个命名感到恐慌，这是IDA生成的假
名字，详细内容见下表。off_20044即代表了这是一个数据，位于2
0044这个偏移位置，我们双击进去试试。
data:00020044证实了我们的想法，可以发现，IDA反汇编的效果
还不错，我们从上往下划分，每三行代表一个完整的映射。只要两
个 地 方 让 人 不 太 舒 服 。
1.第一个结构体为什么占那么多行？
这是因为作为内容的起始部分，IDA会在右方用注释的方式展示它的
交 叉 引 用 状 况 ， 交 叉 引 用 占 用 了 正 常 的 两 行 ， JNI_Onload+46
以及.textL0ff_14C10这两个位置引用了这份数据，正是交叉引用
的注释导致第一个结构体，或者说第一行下面平白空了两行。我们
可以在off_20044上按快捷键x查看其交叉引用，验证我们的观点。
2.我们之前说过，每个结构体里三块内容，Java层方法名+签名+JN
I层对应的函数指针，而IDA结果正确吗？aGetmd5并不像方法名，a
LjavaLangStrin_0也不像正确的签名，第三个sub_xxx，根据我
们上表，它代表了一个函数的起点，这倒是和“JNI层对应的函数指
针”不谋而合。可是方法名和签名是怎么回事？
这是因为IDA给方法名以及签名二次取了名字。
#原代码
a = 3
#IDA反编译后
a1 = 3 #a
a = a1
IDA用注释的形式给出了真正的值，因此我们可以直接看右边注释，
这结果明显就正确了，除此之外，IDA在命名时会参考原值，因此才
会有aLjavaLangStrin_0这种似是而非的名字。
3.3 应用的场景
至此，我们已经搞懂了动态注册，也称函数注册的定位，那么为什
么 还 需 要 用 Hook
registernative函数呢？直接用IDA查看一下不就得了？
有多方面的考虑，考虑一下这两个情景
·找不到某个Native声明的Java函数是哪个SO加载来的。
·IDA反编译时遇到了防护，JNI_Onload无法顺利反编译（常见）
。