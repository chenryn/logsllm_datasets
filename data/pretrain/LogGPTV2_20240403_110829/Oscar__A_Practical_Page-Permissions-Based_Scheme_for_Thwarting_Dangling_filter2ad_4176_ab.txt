its log-based design.
USENIX Association
26th USENIX Security Symposium    817
05CADA00someFuncPtrcallbacklock: 42key: 42key: 42someFuncPtrcallbacklock: 43key: 42key: 42userNamekey: 4305DEAD00someFuncPtrcallbacklock: 42key: XXkey: XXuserNamekey: 4205DEAD00someFuncPtrcallbackuserNameNULLFigure 6: The virtual page has
been made inaccessible: accesses
to objects A, B or C would cause
a fault.
Figure 7: With one object per page, we can
selectively disable object B.
Figure 8: Each object has its own
shadow virtual page, which all
map to the same physical frame.
Recall that objects (and physical memory) are ac-
cessed via virtual addresses, which are translated (by the
MMU) into physical addresses. By removing the map-
ping or changing the page permissions, we can make a
virtual page inaccessible; the underlying physical mem-
ory can then be mapped to a different virtual address
(changed lock) for reuse. A drawback is that making a
virtual page inaccessible renders all objects on that page
– often a non-trivial number, since pages are 4KB or
larger – inaccessible (Figure 6). Placing one object per
page (Figure 7) is wasteful of memory resources: it uses
more memory and strains the cache and the TLB.
It is not strictly necessary to use page permissions to
enforce page inaccessibility after deallocation. In princi-
ple, we could maintain a hashtable of live pointers, and
instrument all the pointer dereferences to check that the
pointer is still live, trading off instrumentation for system
calls. This would still have less overhead than an explicit
lock-and-key scheme, because we would not need to in-
strument pointer arithmetic.
Example Systems: Electric Fence [9] implements this
scheme, by placing one object per physical frame.
Its
high physical memory usage renders it impractical for
anything other than debugging.
Dhurjati and Adve [23] overcame this shortcoming
through virtual aliasing. Normally, malloc might place
multiple objects on one virtual page, which Dhurjati and
Adve refer to as the canonical virtual page. For each ob-
ject on the canonical virtual page, they create a shadow
virtual page that is aliased onto the same underlying
physical page frame. This allows each object to be dis-
abled independently (by changing the permissions for the
corresponding shadow page), while using physical mem-
ory/cache more efﬁciently than Electric Fence (Figure
8). However, this still requires many syscalls and in-
creases TLB pressure. Furthermore, creating shadows
introduces compatibility issues with fork (Section 5.1).
The physical memory overhead – one page table en-
try, one kernel virtual memory area struct, plus some
user-space allocator metadata, per object – is propor-
tional to the number of live objects. We expect this to
be more efﬁcient than the other classes of lock-and-key
schemes, which have overhead proportional to the num-
ber of pointers (albeit with a smaller constant factor).
Some engineering is required to avoid stateholding of
munmap’ed page table entries (Section 8).
2.5 Summary of Lock and Key Schemes
Table 1 compares the plausible lock-and-key schemes.
Implicit lock-and-key schemes that change the lock (i.e.,
one object per virtual page) are advantageous by having
no overhead for any pointer arithmetic, and no direct cost
(barring TLB and memory pressure) for pointer derefer-
ences. Furthermore, the core technique does not require
application source code: for programs using the stan-
dard allocator, we need only change the glibc malloc
and free functions. However, Dhurjati and Adve’s full
scheme requires application source code to apply their
static analysis optimization, which allows them to reuse
virtual addresses when a pool is destroyed.
3 Baseline Oscar Design
We will develop the shadow virtual pages idea in a di-
rection that does not require source-code analysis, with
less stateholding of kernel metadata for freed objects,
and with better compatibility with fork. We focus on
glibc and Linux.
While we have argued that page-permissions-based
protections should require less instrumentation than
newer schemes, there has been no good data on the over-
head of shadows (without reliance on static analysis),
let alone quantitative comparisons with recent schemes.
In the ﬁrst part of this paper, we quantify and predict
the overhead when using only shadows. These measure-
ments informed our approach for reducing the overhead,
which are described in the second part of this paper.
To help us improve the performance of shadow-page-
based schemes, we ﬁrst measure their costs and break
818    26th USENIX Security Symposium
USENIX Association
      ptr2    C  B A C B A    Virtual page    Physical page frame      A A    B B   C C Virtual page    Physical page frame    C   B  A    B A  C    C B A   Shadow virtual  pages    Canonical virtual page Physical page frame Table 1: Comparison of lock-and-key schemes. Green and a tick indicates an advantageous distinction.
down the source of overhead. Shadow-page schemes
consist of four elements: modifying the memory al-
location method to allow aliased virtual pages, inline
metadata to record the association between shadow and
canonical pages, syscalls to create and disable shadow
pages, and TLB pressure. We measure how much each
contributes to the overhead, so we can separate out the
cost of each.
It
is natural
to hypothesize that syscall overhead
should be proportional to the number of malloc/free
operations, as page-permissions-based schemes add one
or two syscalls per malloc and free. However, the other
costs (TLB pressure, etc.) are less predictable, so mea-
surements are needed.
Our baseline design [23] uses
inline metadata
to let us map from an object’s shadow address
to its canonical address. When the program in-
vokes malloc(numBytes), we allocate instead with
internal_malloc(numBytes + sizeof(void*)) to
allocate an object within a physical page frame and then
immediately perform a syscall to create a shadow page
for the object. The object’s canonical address is stored
as inline metadata within the additional sizeof(void*)
bytes. This use of inline metadata is transparent to the
application, unlike with plus-size pointers. Conceivably,
the canonical addresses could instead be placed in a dis-
joint metadata store (similar to CETS), improving com-
pactness of allocated objects and possibly cache utiliza-
tion, but we have not explored this direction.
3.1 Measurement Methodology
We quantiﬁed the overhead by building and measuring
incrementally more complex schemes that bridge the de-
sign gap from glibc’s malloc to one with shadow vir-
tual pages, one overhead factor at a time.
Our ﬁrst scheme simply changes the memory alloca-
tion method. As background, malloc normally obtains
large blocks of memory with the sbrk syscall (via the
macro MORECORE), and subdivides it into individual ob-
jects.
If sbrk fails, malloc obtains large blocks us-
ing mmap(MAP_PRIVATE). (This fallback use of mmap
should not be confused with malloc’s special case of
placing very large objects on their own pages.) We can-
not create shadows aliased to memory that was allocated
with either sbrk or mmap(MAP_PRIVATE); the Linux
kernel does not support this. Thus, our ﬁrst change was
MAP SHARED arenas: we modiﬁed malloc to always
obtain memory via mmap(MAP SHARED) (which can be
used for shadows) instead of sbrk. This change unfortu-
nately affects the semantics of the program if it fork()s:
the parent and child will share the physical page frames
underlying the objects, hence writes to the object by ei-
ther process will be visible to the other. We address this
issue – which was not discussed in prior work – in Sec-
tion 5.1.
padding further
MAP SHARED with
changes
malloc to enlarge each allocation by sizeof(void*)
bytes for the canonical address. We do not read or write
from the padding space, as the goal is simply to measure
the reduced locality of reference.
Create/disable shadows creates and disables shadow
pages in the malloc and free functions using mremap
and mprotect(PROT_NONE) respectively, but does not
access memory via the shadow addresses; the canoni-
cal address is still returned to the caller. To enable the
free function to disable the shadow page, we stored the
shadow address inside the inline metadata ﬁeld (recall
that in the complete scheme, this stores the canonical).
Use shadows returned shadow addresses to the user.
The canonical address is stored inside the inline meta-
data ﬁeld. This version is a basic reimplementation of a
shadow-page scheme.
All
timings were run on Ubuntu 14.04 (64-bit),
using an Intel Xeon X5680 with 12GB of RAM.
We disabled hyper-threading and TurboBoost,
for
more consistent timings. Our “vanilla” malloc/free
was from glibc 2.21. We compiled the non-
Fortran SPEC CPU2006 benchmarks using gcc/g++
v4.8.4 with -O3. We conﬁgured libstdc++ with
--enable-libstdcxx-allocator=malloc, and con-
ﬁgured the kernel at run-time to allow more virtual mem-
ory mappings.
We counted malloc and free operations using
USENIX Association
26th USENIX Security Symposium    819
  Explicit lock-and-key: changing the lock e.g., Implicit lock-and-key: revoking the keys e.g., Implicit lock-and-key: changing the lock e.g., Instrumentation  CETS DangNull/FreeSentry Electric Fence malloc ()  Allocate lock address; Issue key; Set lock Register pointer Syscall to create virtual page Simple ptr arithmetic:    p+=2  No cost General ptr arithmetic:  p=q+1 Propagate lock address and key Update ptr registration  No cost Pointer dereference:     *p Check key vs. lock value (at lock address)  No cost  free ()  Deallocate lock address Invalidate pointers Syscall to disable virtual page No application source needed Needs source + recompilation  Yes; Req’d by Dhurjati&Adve Physical memory overhead O(# pointers) O(# pointers)  O(# objects)     Figure 9: SPEC CPU2006 C/C++ benchmarks, showing the overhead as we reach the full design.
mtrace. We placed mtrace at the start of main, which
does miss a small number of allocations (e.g., static ini-
tializers and constructors for global C++ objects), but
these are insigniﬁcant.
3.2 Results
The overhead measurements of the four incrementally
more complete schemes are shown in Figure 9 for
15 of the 19 SPEC CPU2006 C/C++ benchmarks.
The remaining four benchmarks (perlbench, dealII,
omnetpp, xalancbmk) exhaust the physical memory on
the machine when creating/disabling shadows, due to
the accumulation of vm area structs corresponding to
mprotect’ed pages of “freed” objects. We therefore de-
fer discussion of them until the following section, which
introduces our improvements to the baseline design.
Even for the complete but unoptimized scheme (Use
shadows), most benchmarks have low overhead. gcc and
sphinx have high overhead due to creating/destroying
shadows, as well as using shadows. astar and povray
have a noticeable cost mainly due to using shadows,
a cost which is not present when merely creating/dis-
abling shadows; we infer that the difference is due to
TLB pressure. Notably, mcf’s overhead is entirely due
to MAP SHARED arenas, as is most of milc’s. Inline
padding is a negligible cost for all benchmarks.
In Figure 10, we plot the run-time of creating/dis-
abling shadows, against the number of shadow-page-
related syscalls2. We calculated the y-values by measur-
ing the runtime of Create/disable shadows (we used the
high watermark optimization from Section 4 to ensure
all benchmarks complete) minus MAP SHARED with
padding:
this discounts runtime that is not associated
with syscalls for shadows. The high correlation matches
our mental model that each syscall has an approxi-
mately ﬁxed cost, though it is clear from omnetpp and
perlbench that it is not perfectly ﬁxed. Also, we can
2A realloc operation involves both creating a shadow and de-
stroying a shadow, hence the number of malloc/free operations is
augmented with (2 * realloc).
Figure 10: Predicting syscall overhead.
see that perlbench, dealII, omnetpp and xalancbmk
each create over 100 million objects, which is why they
could not run to completion using the unoptimized im-
plementation.
4 Lowering Overhead Of Shadows
The previous section shows that the overhead is due
to MAP SHARED, creating/destroying shadows, and using
shadows. The cost of using shadows – via TLB pressure
– can be reduced with hardware improvements, such as
larger TLBs (see Section 6.2). In this section, we pro-
pose, implement, and measure three optimizations for re-
ducing the ﬁrst two costs.
High water mark. The na¨ıve approach creates shad-
ows using mremap without a speciﬁed address and dis-
ables shadows using mprotect(PROT_NONE). Since dis-
abled shadows still occupy virtual address space, new
shadows will not reuse the addresses of old shadows,
thus preventing use-after-free of old shadows. How-
ever, the Linux kernel maintains internal data structures
for these shadows, called vm area structs, consuming
192 bytes of kernel memory per shadow. The accumu-
lation of vm area structs for old shadows prevented
a few benchmarks (and likely many real-world applica-
tions) from running to completion.
We introduce a simple solution. Contrary to conven-
820    26th USENIX Security Symposium
USENIX Association
 -10%0%10%20%30%40%50%60%bzip2gccmcfgobmkhmmersjenglibquantumh264refmilclbmsphinxastarnamdsoplexpovrayOverhead (0% = Vanilla) MAP_SHARED arenasMAP_SHARED with paddingCreate/disable shadowsUse shadows  perlbench gcc omnetpp xalancbmk dealII y = 1.1091x R² = 0.95 -200020040060080010000200400600800Run-time (s) of creating/destroying (but not using) shadows # malloc + free (+ 2 * realloc) (millions) the old object’s size or offset within the page. It also im-
proves the likelihood that the shadow can be used when
objects are coalesced or split by the allocator.
Up to now, we have used mremap to create shadows.
mremap actually can be used to both destroy an old map-
ping and create a new virtual address mapping (at a spec-
iﬁed address) in a single system call. We use this ability
to both destroy the old shadow mapping and create a new
one (i.e., refresh a shadow) with one system call, thereby
collapsing 2 system calls to 1 system call. This opti-
mization depends on the high water mark optimization:
if we called mremap with old_size = new_size with-
out specifying a new_address, mremap would conclude
that there is no need to change the mappings at all, and
would return the old shadow virtual address.
Using MAP PRIVATE when possible. As men-
tioned earlier, MAP SHARED is required for creating shad-
ows, but sometimes has non-trivial costs. However, for
large objects that malloc places on their own physical
page frames, Oscar does not need more than one shadow
per page frame. For these large allocations, Oscar uses
MAP_PRIVATE mappings.
Implementing realloc correctly requires care. Our
ordinary realloc wrapper is, in pseudo-code:
munmap(old_shadow);
new_canonical = internal_realloc(old_canonical);
new_shadow = create_shadow(new_canonical);