a series of optimizations and experiments running the complete
Solidus protocol on a distributed ledger (ZooKeeper), which demon-
strate the ability of Solidus to scale to the throughputs required
for real-world workloads. We believe that Solidus is the first vi-
able approach to building strongly verifiable and fully auditable
bank-intermediated ledger transaction systems.
ACKNOWLEDGEMENTS
This work is funded in part by NSF grants CNS-1314857, CNS-
1330599, CNS-1453634, CNS-1518765, CNS-1514261, CNS-1514163,
and CNS-1564102, ARO grant W911NF-16-1-0145, a Packard Fel-
lowship, a Sloan Fellowship, Google Faculty Research Awards, a
VMWare Research Award, and IC3 sponsorship from Chain, IBM,
and Intel. We would like to thank Matthew Trudeau and Abishek
Kumarasubramanian at TradeWind Markets and Shaul Kfir and
Tamás Blummer at Digital Asset Holdings for patiently explaining
the needs, requirements, and background of the financial industry.
We would also like to thank Eleanor Birrell, Philip Daian, Joshua
Gancher, Andrew Morgan, Isaac Sheff, and the anonymous review-
ers for their insightful comments and help editing.
REFERENCES
[1] 2017. Digital Asset Plaform. www.digitalasset.com. (2017).
[2] 2017. Ripple. www.ripple.com. (2017).
[3] Referenced May 2017. Monero. www.getmonero.org. (Referenced May 2017).
[4]
Ittai Anati, Shay Gueron, Simon P Johnson, and Vincent R Scarlata. 2013. Inno-
vative technology for CPU based attestation and sealing. In Proceedings of the
2nd International Workshop on Hardware and Architectural Support for Security
and Privacy.
[5] Apache Software Foundation. 2016. Apache ZooKeeper (Version 3.4.9). https:
//zookeeper.apache.org/. (2016).
[6] Boaz Barak, Ran Canetti, Jesper Buus Nielsen, and Rafael Pass. 2004. Universally
Composable Protocols with Relaxed Set-up Assumptions. In FOCS.
[7] Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers,
Eran Tromer, and Madars Virza. 2014. Zerocash: Decentralized Anonymous
Payments from Bitcoin. In IEEE Symposium on Security and Privacy.
[8] Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin, Eran Tromer, and Madars
Virza. 2013. SNARKs for C: Verifying Program Executions Succinctly and in
Zero Knowledge. In CRYPTO.
[9] Eli Ben-Sasson, Alessandro Chiesa, Matthew Green, Eran Tromer, and Madars
Virza. 2015. Secure Sampling of Public Parameters for Succinct Zero Knowledge
Proofs. In IEEE Symposium on Security and Privacy. 18.
[10] Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and Madars Virza. 2014. Suc-
cinct Non-Interactive Zero Knowledge for a von Neumann Architecture. In
USENIX Security.
[11] Erik-Oliver Blass, Travis Mayberry, Guevara Noubir, and Kaan Onarlioglu. 2014.
Toward Robust Hidden Volumes Using Write-Only Oblivious RAM. In CCS.
[12] Tamás Blummer. 2016. Personal communication with Tamás Blummer, Chief
Ledger Architect, Digital Asset Holdings. (2016).
[13] Fabrice Boudot. 2000. Efficient proofs that a committed number lies in an interval.
In EUROCRYPT.
[14] BouncyCastle. 2016. Bouncy Castle Crypto APIs (Version 1.55). https://www.
[15]
[16]
[17]
[18]
bouncycastle.org/. (2016).
Jan Camenisch, Susan Hohenberger, and Anna Lysyanskaya. 2005. Compact
e-cash. In EUROCRYPT.
Jan Camenisch, Aggelos Kiayias, and Moti Yung. 2009. On the Portability of
Generalized Schnorr Proofs. In EUROCRYPT.
Jan Camenisch, Anna Lysyanskaya, and Mira Meyerovich. 2007. Endorsed E-
Cash. In IEEE Symposium on Security and Privacy.
Jan Camenisch and Markus Stadler. 1997. Efficient group signature schemes for
large groups. In CRYPTO.
[19] Ran Canetti. 2001. Universally composable security: A new paradigm for crypto-
graphic protocols. In FOCS.
[20] Miguel Castro and Barbara Liskov. 1999. Practical Byzantine Fault Tolerance. In
OSDI.
[21] David Chaum. 1982. Blind signatures for untraceable payments. In CRYPTO.
[22] David Chaum, Amos Fiat, and Moni Naor. 1990. Untraceable electronic cash. In
CRYPTO.
13
[23]
Ivan Damgård. 2002. On Σ-protocols. Lecture Notes, University of Aarhus, De-
partment for Computer Science (2002).
[24] George Danezis, Cedric Fournet, Markulf Kohlweiss, and Bryan Parno. 2013.
Pinocchio Coin: building Zerocoin from a succinct pairing-based proof system.
In PETShop.
[25] George Danezis and Sarah Meiklejohn. 2016. Centrally Banked Cryptocurrencies.
In NDSS.
[26] Michael del Castillo. 16 December 2016. Overstock Just Closed its First Day of
Blockchain Stock Trading. Coindesk (16 December 2016).
[27] Roger Dingledine, Nick Mathewson, and Paul Syverson. 2004. Tor: the second-
generation onion router. In USENIX Security.
[28] Amos Fiat and Adi Shamir. 1986. How to prove yourself: Practical solutions to
identification and signature problems. In EUROCRYPT.
[29] Ethan Heilman, Leen AlShenibr, Foteini Baldimtsi, Alessandra Scafuro, and
Sharon Goldberg. 2017. TumbleBit: An untrusted Bitcoin-compatible anonymous
payment hub. In NDSS.
[30] Gesine Hinterwälder, Christian T. Zenger, Foteini Baldimtsi, Anna Lysyanskaya,
Christof Paar, and Wayne P. Burleson. 2013. Efficient E-Cash in Practice: NFC-
Based Payments for Public Transportation Systems. In PETS.
[31] Patrick Hunt, Mahadev Konar, Flavio Paiva Junqueira, and Benjamin Reed. 2010.
ZooKeeper: Wait-free Coordination for Internet-scale Systems.. In USENIX ATC.
Intel Corporation 2016. Intel® Software Guard Extensions SDK. Intel Corporation.
[Online; accessed 6-February-2017].
[32]
[33] Markus Jakobsson and Ari Juels. 1999. Millimix: Mixing in small batches. Techni-
cal Report. DIMACS Technical report 99-33.
[34] Tom Elvis Jedusor. 19 July 2016. MimbleWimble.
Referenced 2017 at
https://download.wpsoftware.net/bitcoin/wizardry/mimblewimble.txt. (19 July
2016).
[35] Shaul Kfir. 2016. Personal communication with Shaul Kfir, CTO, Digital Asset
Holdings. (2016).
[36] Ahmed Kosba, Andrew Miller, Elaine Shi, Zikai Wen, and Charalampos Papa-
manthou. 2016. Hawk: The Blockchain Model of Cryptography and Privacy-
Preserving Smart Contracts. In IEEE Symposium on Security and Privacy.
[37] Leslie Lamport. 1998. The part-time parliament. In TOCS.
[38] Denis Lukianov. 2015. Compact Confidential Transactions. http://voxelsoft.com/
dev/cct.pdf. (2015).
[39] Matteo Maffei, Giulio Malavolta, Manuel Reinert, and Dominique Schröder. 2015.
Privacy and access control for outsourced personal records. In Security and
Privacy (SP), 2015 IEEE Symposium on. IEEE, 341–358.
[40] Gregory Maxwell. 2013. CoinJoin: Bitcoin privacy for the real world. bitcointalk.
org. (August 2013).
[41] Gregory Maxwell. 2013. Confidential Transactions. https://people.xiph.org/
~greg/confidential_values.txt. (2013).
[42] Gregory Maxwell and Andrew Poelstra. 2015. Borromean Ring Signatures.
https://github.com/Blockstream/borromean_paper. (2015).
[43] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham Shafi,
Vedvyas Shanbhogue, and Uday R Savagaonkar. 2013. Innovative instructions
and software model for isolated execution. In Proceedings of the 2nd International
Workshop on Hardware and Architectural Support for Security and Privacy.
[44] Sarah Meiklejohn, Marjori Pomarole, Grant Jordan, Kirill Levchenko, Damon
McCoy, Geoffrey M Voelker, and Stefan Savage. 2013. A fistful of bitcoins:
characterizing payments among men with no names. In IMC.
Ian Miers, Christina Garman, Matthew Green, and Aviel D Rubin. 2013. Zerocoin:
Anonymous Distributed E-Cash from Bitcoin. In IEEE Symposium on Security
and Privacy.
[45]
[46] Andrew Miller, Malte Möser, Kevin Lee, and Arvind Narayanan. 2017. An
Empirical Analysis of Linkability in the Monero Blockchain. (2017). http://arxiv.
org/abs/1704.04299
[47] Malte Möser. 2013. Anonymity of Bitcoin Transactions: An Analysis of Mixing
Services. In Münster Bitcoin Conference.
[48] Daniel Mulligan. 1998. Know Your Customer Regulations and the International
Banking System: Towards a General Self-Regulatory Regime. Fordham Int’l LJ
22 (1998), 2324.
[49] Satoshi Nakamoto. 2009. Bitcoin: A Peer-to-Peer Electronic Cash System. http:
//bitcoin.org/bitcoin.pdf. (2009).
[50] Diego Ongaro and John Ousterhout. 2014.
Consensus Algorithm. In USENIX ATC.
In Search of an Understandable
[51] Torben Pryds Pedersen. 1991. Non-interactive and information-theoretic secure
verifiable secret sharing. In CRYPTO.
14
[52] Vinay Phegade and Juan Del Cuvillo. 2013. Using innovative instructions to
create trustworthy software solutions. In Proceedings of the 2nd International
Workshop on Hardware and Architectural Support for Security and Privacy. ACM
Press, New York, New York, USA, 1–1.
[53] Tim Ruffing, Pedro Moreno-Sanchez, and Aniket Kate. 2014. CoinShuffle: Practi-
cal Decentralized Coin Mixing for Bitcoin. In ESORICS.
[54] Claus-Peter Schnorr. 1991. Efficient signature generation by smart cards. Journal
of cryptology 4, 3 (1991), 161–174.
[55] Elaine Shi, T.-H. Hubert Chan, Emil Stefanov, and Mingfei Li. 2011. Oblivious
3
RAM with O ((log N )
Jon Southurst. 10 June 2014. Blockchain’s SharedCoin Users Can Be Identified,
Says Security Expert. CoinDesk (10 June 2014).
) Worst-Case Cost. In ASIACRYPT.
[56]
[57] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher Fletcher, Ling Ren,
Xiangyao Yu, and Srinivas Devadas. 2013. Path ORAM – an Extremely Simple
Oblivious RAM Protocol. In CCS.
[58] Florian Tramèr, Fan Zhang, Huang Lin, Jean-Pierre Hubaux, Ari Juels, and Elaine
Shi. 2017. Sealed-Glass Proofs: Using Transparent Enclaves to Prove and Sell
Knowledge. In IEEE European Symposium on Security and Privacy (Euro S&P).
[59] Matthew Trudeau. 2016. Personal communication with Matthew Trudeau, Presi-
dent, TradeWind Markets. (2016).
[60] Luke Valenta and Brendan Rowan. 2015. Blindcoin: Blinded, accountable mixes
for Bitcoin. In Financial Cryptography. 112–126.
[61] Paul Walker and Phil J. Venables. 19 November 2015. Cryptographic Currency
For Securities Settlement. U.S. Patent Application 20150332395. (19 November
2015).
[62] Xiao Shaun Wang, T-H. Hubert Chan, and Elaine Shi. 2015. Circuit ORAM: On
Tightness of the Goldreich-Ostrovsky Lower Bound. In CCS.
[63] Fan Zhang, Ethan Cecchetti, Kyle Croman, Ari Juels, and Elaine Shi. 2016. Town
Crier: An Authenticated Data Feed for Smart Contracts. In ACM CCS.
A CRYPTO PRIMITIVES
We now describe the basic cryptographic primitives used in Solidus.
These primitives operate over a multiplictive cyclic group G =
⟨д⟩ of order p determined by (linear in) security parameter λ. As
we explain, our building blocks require that the Decisional Diffie-
Hellman assumption hold for G. (To prevent sub-group attacks
using the Pohlig-Hellman algorithm, p is typically prime.) In our
implementation of Solidus, G is the secp256k1 elliptic curve group.
A.1 El Gamal Encryption and Account-Balance
Representation
β = дr , output c = (α, β )
$←− Zq, sk ← x, pk ← дx , output (pk, sk)
The El Gamal cryptosystem (Gen, Enc, Dec) is as follows:
• Gen: x
• Enc(pk, m): if ¬(m, pk ∈ G), output ⊥; r
$←− Zq, α ← m · pkr ,
• Dec(sk, (α, β )): if ¬(sk ∈ Zp ∧ α, β ∈ G), output ⊥; output α/βsk
If the Decisional Diffie-Hellman (DDH) problem is hard for
G, then El Gamal encryption is semantically secure. El Gamal ci-
phertexts are malleable, however, a useful feature in our construc-
tions. Specifically, El Gamal has a few useful homomorphisms. Let
(α, β ) (cid:55)→ m mean that (α, β ) decrypts to m, i.e., (α, β ) = (m·pkr , дr )
for r ∈ Zp. Then the following hold:
• Multiplicative homomorphism: (α, β ) (cid:55)→ m, (α′, β′) (cid:55)→ m′ implies
• Additive homomorphism in exponent space: (α, β ) (cid:55)→ дm, (α′, β′) (cid:55)→
• Multiplicative homomorphism in exponent space: (α, β ) (cid:55)→ дm
(αα′, ββ′) (cid:55)→ mm′.
дm′ implies (αα′, ββ′) (cid:55)→ дm+m′.
implies (αk , βk ) (cid:55)→ дmk.
Observe that re-encryption of a ciphertext (α, β ) (cid:55)→ m with-
out knowledge of sk is achievable using the multiplicative homo-
$←− Zp, compute a fresh ciphertext (α′, β′) =
morphism: Let r
(cid:55)→ 1, and then let (A, B) = (αα′, ββ′). Observe that
(pkr , дr )
(A, B) (cid:55)→ (m × 1) = m.
Account-Balance Representation. The cryptographic primitives
in Solidus rely on a representation of account balances in the ex-
ponent space in order to leverage the additive homomorphism in
the exponent space illustrated above. Thus an account balance $v
$v and represented in an El Gamal ciphertext as
is encoded as д
$v pkr , дr ) for some r ∈ Zp. Decrypting a balance thus requires
(д
$v. While in general this is hard in G, if
finding the discrete log of д
$v is known to be small (e.g., 0 ≤ $v < 230), then the balance can
be decrypted using a lookup table of manageable size.
A.2 Generalized Schnorr Proofs (GSPs)
Generalized Schnorr Proofs [16] are a type of Σ-protocol, that is,
3-move honest-verifier zero-knowledge (HVZK) proofs (often more
specifically defined as special 3-move HVZK proofs with special
soundness) [23]. GSP specifically operate over groups for which
the discrete log problem and variants are hard. We note that here
we consider GSPs only in a cyclic group of prime order, avoiding
the caveats of [16] regarding composite-order groups.
$←− Zp and y ← дx , there is a simple Σ-protocol to prove
$←− Zp and sends e = дr to Verifier V
knowledge of x to a verifier that knows only y = дx :
• Prover P selects r
• V selects c
$←− Zp
• P replies with s = cx + e.
Verifier V then checks that дs = eyc. This protocol is specified in
the language of GSPs using notation introduced in [18] as:
Given x
PoK(cid:0)x : y = дx(cid:1) ,
and is a form of the Schnorr identification protocol.
A more general GSP is possible of the form:
PoK (x1, . . . , xk : Pred(y, (x1, . . . , xk ), (y1, . . . , yk ))) ,
x1
1 · · · y
where Pred is a predicate y = y
for a collection of values
xk
y, y1, . . . , yk ∈ G known to the verifier and where the prover aims
k
to prove knowledge of x1, . . . , xk ∈ Zp.
It is possible to construct efficient GSPs on conjunctions and dis-
junctions of such predicates. Additionally, the Fiat-Shamir heuris-
tic [28] can convert GPSs into NIZKs in the Random Oracle Model
(ROM) by hashing the prover’s message to obtain the challenge. It is
also possible to append a supplementary value, which we call a tag,
to the message to be hashed. The NIZK version of PoK(x : y = дx ),
with tag m, for example, is a Schnorr signature on m. In Solidus, all
ZPKs are such NIZKs, a fact we leave implicit in the remainder of
the appendix.
A.3 Hidden-Public-Key Signatures
In order to authenticate transactions without revealing the sending
user, Solidus employs a hidden-public-key (HPK) signature scheme.
This simple scheme allows a signer to sign with respect to a signing
public key pk that is (El Gamal) encrypted under a bank’s public
$←− Enc(ePK, pk). An HPK signature
key ePK, i.e., a ciphertext c
scheme (hGen, hSign, hVer) with public key ePK is as follows:
• hGen: sk
• hSign(sk, ePK, m): r
(cid:16)
a NIZK
$←− Zq, pk ← дsk, output (pk, sk)
$←− Zp, (α, β ) ← (pk · ePKr , дr ). Construct
(cid:17) ∧(cid:0)дr = β(cid:1)(cid:17)
(sk, r ) :(cid:16)
pf = PoK
дsk · ePKr = α
with tag m. Output σ = (c = (α, β ), pf ).
• hVer(ePK, m, σ ): Parse σ = (c, pf ) and verify pf with ePK, m, c.
An HPK of this form is not terribly useful in and of itself, as
the receiver knows only that a valid signature was generated with
respect to some key, but learns nothing about the key.
The fact that c is an El Gamal ciphertext of pk under ePK, how-
ever, makes such signatures useful in two ways. First, when U
requests a transaction, it allows B to decrypt pk and identify U.
Second, it allows B to generate a plaintext equivalence proof on
c and the encryption of the updated account’s key. This second
property verifies that the user whose balance is updated knows sk,
which thus makes this a valid signature.
A.4 El Gamal Swaps
The vast majority of the computation required for proof generation
and verification in Solidus is devoted to what we call El Gamal swaps.
The operation ElGamal-Swap takes as input an ordered pair of El
Gamal ciphertexts (c0, c1) =
public key pk, and a value s ∈ {Swap, NoSwap}. It outputs a fresh
1, β′
1)
(cid:16)
(cid:17), a corresponding
(cid:17), re-encrypted under pk, with the
ordered pair(cid:16)