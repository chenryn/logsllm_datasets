### Optimizations and Experiments

We have conducted a series of optimizations and experiments to run the complete Solidus protocol on a distributed ledger, specifically using ZooKeeper. These experiments demonstrate Solidus's ability to scale to the throughputs required for real-world workloads. We believe that Solidus is the first viable approach to building strongly verifiable and fully auditable bank-intermediated ledger transaction systems.

### Acknowledgements

This work was partially funded by NSF grants CNS-1314857, CNS-1330599, CNS-1453634, CNS-1518765, CNS-1514261, CNS-1514163, and CNS-1564102, ARO grant W911NF-16-1-0145, a Packard Fellowship, a Sloan Fellowship, Google Faculty Research Awards, a VMware Research Award, and IC3 sponsorship from Chain, IBM, and Intel. We would like to thank Matthew Trudeau and Abishek Kumarasubramanian at TradeWind Markets, and Shaul Kfir and Tamás Blummer at Digital Asset Holdings for their patient explanations of the needs, requirements, and background of the financial industry. We also extend our gratitude to Eleanor Birrell, Philip Daian, Joshua Gancher, Andrew Morgan, Isaac Sheff, and the anonymous reviewers for their insightful comments and assistance in editing.

### References

1. **Digital Asset Platform** (2017). [www.digitalasset.com](http://www.digitalasset.com).
2. **Ripple** (2017). [www.ripple.com](http://www.ripple.com).
3. **Monero** (Referenced May 2017). [www.getmonero.org](http://www.getmonero.org).

4. **Ittai Anati, Shay Gueron, Simon P Johnson, and Vincent R Scarlata** (2013). "Innovative Technology for CPU Based Attestation and Sealing." In *Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy*.
5. **Apache Software Foundation** (2016). "Apache ZooKeeper (Version 3.4.9)." [https://zookeeper.apache.org/](https://zookeeper.apache.org/).
6. **Boaz Barak, Ran Canetti, Jesper Buus Nielsen, and Rafael Pass** (2004). "Universally Composable Protocols with Relaxed Set-up Assumptions." In *FOCS*.
7. **Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers, Eran Tromer, and Madars Virza** (2014). "Zerocash: Decentralized Anonymous Payments from Bitcoin." In *IEEE Symposium on Security and Privacy*.
8. **Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin, Eran Tromer, and Madars Virza** (2013). "SNARKs for C: Verifying Program Executions Succinctly and in Zero Knowledge." In *CRYPTO*.
9. **Eli Ben-Sasson, Alessandro Chiesa, Matthew Green, Eran Tromer, and Madars Virza** (2015). "Secure Sampling of Public Parameters for Succinct Zero Knowledge Proofs." In *IEEE Symposium on Security and Privacy*.
10. **Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and Madars Virza** (2014). "Succinct Non-Interactive Zero Knowledge for a von Neumann Architecture." In *USENIX Security*.
11. **Erik-Oliver Blass, Travis Mayberry, Guevara Noubir, and Kaan Onarlioglu** (2014). "Toward Robust Hidden Volumes Using Write-Only Oblivious RAM." In *CCS*.
12. **Tamás Blummer** (2016). Personal communication with Tamás Blummer, Chief Ledger Architect, Digital Asset Holdings.
13. **Fabrice Boudot** (2000). "Efficient Proofs That a Committed Number Lies in an Interval." In *EUROCRYPT*.
14. **BouncyCastle** (2016). "Bouncy Castle Crypto APIs (Version 1.55)." [https://www.bouncycastle.org/](https://www.bouncycastle.org/).
15. **Jan Camenisch, Susan Hohenberger, and Anna Lysyanskaya** (2005). "Compact e-cash." In *EUROCRYPT*.
16. **Jan Camenisch, Aggelos Kiayias, and Moti Yung** (2009). "On the Portability of Generalized Schnorr Proofs." In *EUROCRYPT*.
17. **Jan Camenisch, Anna Lysyanskaya, and Mira Meyerovich** (2007). "Endorsed E-Cash." In *IEEE Symposium on Security and Privacy*.
18. **Jan Camenisch and Markus Stadler** (1997). "Efficient Group Signature Schemes for Large Groups." In *CRYPTO*.
19. **Ran Canetti** (2001). "Universally Composable Security: A New Paradigm for Cryptographic Protocols." In *FOCS*.
20. **Miguel Castro and Barbara Liskov** (1999). "Practical Byzantine Fault Tolerance." In *OSDI*.
21. **David Chaum** (1982). "Blind Signatures for Untraceable Payments." In *CRYPTO*.
22. **David Chaum, Amos Fiat, and Moni Naor** (1990). "Untraceable Electronic Cash." In *CRYPTO*.
23. **Ivan Damgård** (2002). "On Σ-protocols." Lecture Notes, University of Aarhus, Department for Computer Science.
24. **George Danezis, Cedric Fournet, Markulf Kohlweiss, and Bryan Parno** (2013). "Pinocchio Coin: Building Zerocoin from a Succinct Pairing-Based Proof System." In *PETShop*.
25. **George Danezis and Sarah Meiklejohn** (2016). "Centrally Banked Cryptocurrencies." In *NDSS*.
26. **Michael del Castillo** (16 December 2016). "Overstock Just Closed Its First Day of Blockchain Stock Trading." Coindesk.
27. **Roger Dingledine, Nick Mathewson, and Paul Syverson** (2004). "Tor: The Second-Generation Onion Router." In *USENIX Security*.
28. **Amos Fiat and Adi Shamir** (1986). "How to Prove Yourself: Practical Solutions to Identification and Signature Problems." In *EUROCRYPT*.
29. **Ethan Heilman, Leen AlShenibr, Foteini Baldimtsi, Alessandra Scafuro, and Sharon Goldberg** (2017). "TumbleBit: An Untrusted Bitcoin-Compatible Anonymous Payment Hub." In *NDSS*.
30. **Gesine Hinterwälder, Christian T. Zenger, Foteini Baldimtsi, Anna Lysyanskaya, Christof Paar, and Wayne P. Burleson** (2013). "Efficient E-Cash in Practice: NFC-Based Payments for Public Transportation Systems." In *PETS*.
31. **Patrick Hunt, Mahadev Konar, Flavio Paiva Junqueira, and Benjamin Reed** (2010). "ZooKeeper: Wait-Free Coordination for Internet-Scale Systems." In *USENIX ATC*.
32. **Intel Corporation** (2016). "Intel® Software Guard Extensions SDK." [Online; accessed 6-February-2017].
33. **Markus Jakobsson and Ari Juels** (1999). "Millimix: Mixing in Small Batches." Technical Report. DIMACS Technical report 99-33.
34. **Tom Elvis Jedusor** (19 July 2016). "MimbleWimble." [https://download.wpsoftware.net/bitcoin/wizardry/mimblewimble.txt](https://download.wpsoftware.net/bitcoin/wizardry/mimblewimble.txt).
35. **Shaul Kfir** (2016). Personal communication with Shaul Kfir, CTO, Digital Asset Holdings.
36. **Ahmed Kosba, Andrew Miller, Elaine Shi, Zikai Wen, and Charalampos Papamanthou** (2016). "Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts." In *IEEE Symposium on Security and Privacy*.
37. **Leslie Lamport** (1998). "The Part-Time Parliament." In *TOCS*.
38. **Denis Lukianov** (2015). "Compact Confidential Transactions." [http://voxelsoft.com/dev/cct.pdf](http://voxelsoft.com/dev/cct.pdf).
39. **Matteo Maffei, Giulio Malavolta, Manuel Reinert, and Dominique Schröder** (2015). "Privacy and Access Control for Outsourced Personal Records." In *Security and Privacy (SP), 2015 IEEE Symposium on*. IEEE, 341–358.
40. **Gregory Maxwell** (2013). "CoinJoin: Bitcoin Privacy for the Real World." bitcointalk.org.
41. **Gregory Maxwell** (2013). "Confidential Transactions." [https://people.xiph.org/~greg/confidential_values.txt](https://people.xiph.org/~greg/confidential_values.txt).
42. **Gregory Maxwell and Andrew Poelstra** (2015). "Borromean Ring Signatures." [https://github.com/Blockstream/borromean_paper](https://github.com/Blockstream/borromean_paper).
43. **Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham Shafi, Vedvyas Shanbhogue, and Uday R Savagaonkar** (2013). "Innovative Instructions and Software Model for Isolated Execution." In *Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy*.
44. **Sarah Meiklejohn, Marjori Pomarole, Grant Jordan, Kirill Levchenko, Damon McCoy, Geoffrey M Voelker, and Stefan Savage** (2013). "A Fistful of Bitcoins: Characterizing Payments Among Men with No Names." In *IMC*.
45. **Ian Miers, Christina Garman, Matthew Green, and Aviel D Rubin** (2013). "Zerocoin: Anonymous Distributed E-Cash from Bitcoin." In *IEEE Symposium on Security and Privacy*.
46. **Andrew Miller, Malte Möser, Kevin Lee, and Arvind Narayanan** (2017). "An Empirical Analysis of Linkability in the Monero Blockchain." [http://arxiv.org/abs/1704.04299](http://arxiv.org/abs/1704.04299).
47. **Malte Möser** (2013). "Anonymity of Bitcoin Transactions: An Analysis of Mixing Services." In *Münster Bitcoin Conference*.
48. **Daniel Mulligan** (1998). "Know Your Customer Regulations and the International Banking System: Towards a General Self-Regulatory Regime." *Fordham Int’l LJ* 22 (1998), 2324.
49. **Satoshi Nakamoto** (2009). "Bitcoin: A Peer-to-Peer Electronic Cash System." [http://bitcoin.org/bitcoin.pdf](http://bitcoin.org/bitcoin.pdf).
50. **Diego Ongaro and John Ousterhout** (2014). "In Search of an Understandable Consensus Algorithm." In *USENIX ATC*.
51. **Torben Pryds Pedersen** (1991). "Non-Interactive and Information-Theoretic Secure Verifiable Secret Sharing." In *CRYPTO*.
52. **Vinay Phegade and Juan Del Cuvillo** (2013). "Using Innovative Instructions to Create Trustworthy Software Solutions." In *Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy*. ACM Press, New York, New York, USA, 1–1.
53. **Tim Ruffing, Pedro Moreno-Sanchez, and Aniket Kate** (2014). "CoinShuffle: Practical Decentralized Coin Mixing for Bitcoin." In *ESORICS*.
54. **Claus-Peter Schnorr** (1991). "Efficient Signature Generation by Smart Cards." *Journal of Cryptology* 4, 3 (1991), 161–174.
55. **Elaine Shi, T.-H. Hubert Chan, Emil Stefanov, and Mingfei Li** (2011). "Oblivious RAM with O((log N)^3) Worst-Case Cost." In *ASIACRYPT*.
56. **Jon Southurst** (10 June 2014). "Blockchain’s SharedCoin Users Can Be Identified, Says Security Expert." CoinDesk.
57. **Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher Fletcher, Ling Ren, Xiangyao Yu, and Srinivas Devadas** (2013). "Path ORAM – An Extremely Simple Oblivious RAM Protocol." In *CCS*.
58. **Florian Tramèr, Fan Zhang, Huang Lin, Jean-Pierre Hubaux, Ari Juels, and Elaine Shi** (2017). "Sealed-Glass Proofs: Using Transparent Enclaves to Prove and Sell Knowledge." In *IEEE European Symposium on Security and Privacy (Euro S&P)*.
59. **Matthew Trudeau** (2016). Personal communication with Matthew Trudeau, President, TradeWind Markets.
60. **Luke Valenta and Brendan Rowan** (2015). "Blindcoin: Blinded, Accountable Mixes for Bitcoin." In *Financial Cryptography*. 112–126.
61. **Paul Walker and Phil J. Venables** (19 November 2015). "Cryptographic Currency for Securities Settlement." U.S. Patent Application 20150332395.
62. **Xiao Shaun Wang, T-H. Hubert Chan, and Elaine Shi** (2015). "Circuit ORAM: On Tightness of the Goldreich-Ostrovsky Lower Bound." In *CCS*.
63. **Fan Zhang, Ethan Cecchetti, Kyle Croman, Ari Juels, and Elaine Shi** (2016). "Town Crier: An Authenticated Data Feed for Smart Contracts." In *ACM CCS*.

### Cryptographic Primitives

#### El Gamal Encryption and Account-Balance Representation

The El Gamal cryptosystem operates over a multiplicative cyclic group \( G = \langle g \rangle \) of order \( p \), where \( p \) is determined by a security parameter \( \lambda \). The Decisional Diffie-Hellman (DDH) assumption must hold for \( G \). To prevent sub-group attacks using the Pohlig-Hellman algorithm, \( p \) is typically prime. In our implementation, \( G \) is the secp256k1 elliptic curve group.

- **Key Generation (Gen)**: Choose \( x \leftarrow \mathbb{Z}_q \), set \( sk = x \) and \( pk = g^x \). Output \((pk, sk)\).
- **Encryption (Enc)**: Given \( m \in G \) and public key \( pk \), choose \( r \leftarrow \mathbb{Z}_q \), compute \( \alpha = m \cdot pk^r \) and \( \beta = g^r \). Output ciphertext \( c = (\alpha, \beta) \).
- **Decryption (Dec)**: Given secret key \( sk \) and ciphertext \( c = (\alpha, \beta) \), compute \( m = \alpha / \beta^{sk} \).

If the DDH problem is hard for \( G \), then El Gamal encryption is semantically secure. El Gamal ciphertexts are malleable, which is useful in our constructions. Specifically, El Gamal has the following homomorphisms:
- **Multiplicative Homomorphism**: If \( (α, β) \rightarrow m \) and \( (α', β') \rightarrow m' \), then \( (αα', ββ') \rightarrow mm' \).
- **Additive Homomorphism in Exponent Space**: If \( (α, β) \rightarrow g^m \) and \( (α', β') \rightarrow g^{m'} \), then \( (αα', ββ') \rightarrow g^{m+m'} \).
- **Multiplicative Homomorphism in Exponent Space**: If \( (α, β) \rightarrow g^m \), then \( (α^k, β^k) \rightarrow g^{mk} \).

Re-encryption of a ciphertext \( (α, β) \rightarrow m \) without knowledge of \( sk \) can be achieved using the multiplicative homomorphism. Let \( r' \leftarrow \mathbb{Z}_p \), compute a fresh ciphertext \( (α', β') = (pk^{r'}, g^{r'}) \). Then, let \( (A, B) = (αα', ββ') \). Observe that \( (A, B) \rightarrow (m \times 1) = m \).

**Account-Balance Representation**: In Solidus, account balances are represented in the exponent space to leverage the additive homomorphism. An account balance \( v \) is encoded as \( g^v \) and represented in an El Gamal ciphertext as \( (g^v \cdot pk^r, g^r) \) for some \( r \in \mathbb{Z}_p \). Decrypting a balance requires finding the discrete log of \( g^v \), which is hard in \( G \). However, if \( v \) is known to be small (e.g., \( 0 \leq v < 2^{30} \)), the balance can be decrypted using a lookup table of manageable size.

#### Generalized Schnorr Proofs (GSPs)

Generalized Schnorr Proofs (GSPs) are a type of Σ-protocol, which are 3-move honest-verifier zero-knowledge (HVZK) proofs. GSPs operate over groups for which the discrete log problem and its variants are hard. Here, we consider GSPs only in a cyclic group of prime order, avoiding the caveats regarding composite-order groups.

- **Knowledge of Discrete Logarithm**: Given \( x \leftarrow \mathbb{Z}_p \) and \( y = g^x \), there is a simple Σ-protocol to prove knowledge of \( x \) to a verifier that knows only \( y = g^x \):
  - **Prover (P)**: Select \( r \leftarrow \mathbb{Z}_p \) and send \( e = g^r \) to the verifier.
  - **Verifier (V)**: Select \( c \leftarrow \mathbb{Z}_p \) and send \( c \) to the prover.
  - **Prover (P)**: Compute \( s = cx + r \) and send \( s \) to the verifier.
  - **Verifier (V)**: Check that \( g^s = e \cdot y^c \).

This protocol is specified in the language of GSPs as:
\[ \text{PoK}(x : y = g^x) \]

A more general GSP is possible of the form:
\[ \text{PoK}(x_1, \ldots, x_k : \text{Pred}(y, (x_1, \ldots, x_k), (y_1, \ldots, y_k))) \]
where \( \text{Pred} \) is a predicate \( y = y_1^{x_1} \cdots y_k^{x_k} \) for values \( y, y_1, \ldots, y_k \in G \) known to the verifier, and the prover aims to prove knowledge of \( x_1, \ldots, x_k \in \mathbb{Z}_p \).

GSPs can be constructed efficiently on conjunctions and disjunctions of such predicates. The Fiat-Shamir heuristic can convert GSPs into non-interactive zero-knowledge (NIZK) proofs in the Random Oracle Model (ROM) by hashing the prover’s message to obtain the challenge. In Solidus, all zero-knowledge proofs (ZPKs) are such NIZKs.

#### Hidden-Public-Key Signatures

Solidus employs a hidden-public-key (HPK) signature scheme to authenticate transactions without revealing the sending user. This scheme allows a signer to sign with respect to a signing public key \( pk \) that is encrypted under a bank’s public key \( ePK \), i.e., a ciphertext \( c \leftarrow \text{Enc}(ePK, pk) \).

- **Key Generation (hGen)**: Choose \( sk \leftarrow \mathbb{Z}_q \), set \( pk = g^{sk} \). Output \((pk, sk)\).
- **Signature (hSign)**: Given \( sk \), \( ePK \), and message \( m \), choose \( r \leftarrow \mathbb{Z}_p \), compute \( (α, β) = (pk \cdot ePK^r, g^r) \). Construct a NIZK proof \( \text{pf} = \text{PoK}((sk, r) : (g^{sk} \cdot ePK^r = α) \land (g^r = β)) \) with tag \( m \). Output \( σ = (c = (α, β), \text{pf}) \).
- **Verification (hVer)**: Parse \( σ = (c, \text{pf}) \) and verify \( \text{pf} \) with \( ePK \), \( m \), and \( c \).

An HPK of this form is not useful in isolation, as the receiver learns nothing about the key. However, when the user requests a transaction, the bank can decrypt \( pk \) and identify the user. Additionally, the bank can generate a plaintext equivalence proof on \( c \) and the encryption of the updated account’s key, verifying that the user whose balance is updated knows \( sk \), making this a valid signature.

#### El Gamal Swaps

Most of the computation in Solidus for proof generation and verification involves El Gamal swaps. The operation `ElGamal-Swap` takes as input an ordered pair of El Gamal ciphertexts \((c_0, c_1) = ((\alpha_0, \beta_0), (\alpha_1, \beta_1))\), a public key \( pk \), and a value \( s \in \{\text{Swap}, \text{NoSwap}\} \). It outputs a fresh ordered pair \((c'_0, c'_1) = ((\alpha'_0, \beta'_0), (\alpha'_1, \beta'_1))\) re-encrypted under \( pk \), with the following properties:
- If \( s = \text{NoSwap} \), then \( c'_0 = c_0 \) and \( c'_1 = c_1 \).
- If \( s = \text{Swap} \), then \( c'_0 = c_1 \) and \( c'_1 = c_0 \).

This operation ensures that the ciphertexts are re-encrypted and possibly swapped, maintaining the semantic security of the El Gamal encryption.