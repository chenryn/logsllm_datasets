    Received payload of 3379 characters
  注意： 因为HttpClient类使用GetAsync方法调用，且使用了await关键字，所
以返回调用线程，并可以执行其他工作。GetAsync方法的结果可用时，就用该方法继
续线程，响应写入response变量。await关键字参见第15章，任务的创建和使用参见第21
章。
25.2.2 抛出异常
如果调用HttpClient类的GetAsync方法失败，默认情况下不产生异常。调用
EnsureSuccessStatusCode方法和HttpResponseMessage，很容易改变这一点。该方法检查
IsSuccessStatusCode是否是false，否则就抛出一个异常（代码文件HttpClientSample 
/
Program.cs）：
    private async Task GetDataWithExceptionsAsync()
    {
      try
      {
        using (var client = new HttpClient())
        {
        HttpResponseMessage response = await client.GetAsync(IncorrectUrl);
        response.EnsureSuccessStatusCode();
        WriteLine($"Response Status Code: {(int)response.StatusCode} " +
          $"{response.ReasonPhrase}");
        string responseBodyAsText = await response.Content.ReadAsStringAsync();
        WriteLine($"Received payload of {responseBodyAsText.Length} characters");
        WriteLine();
        WriteLine(responseBodyAsText);
        }
      }
      catch (Exception ex)
      {
        WriteLine($"{ex.Message}");
      }
    }
25.2.3 传递标题
发出请求时没有设置或改变任何标题，但HttpClient的DefaultRequestHeaders属性允许
设置或改变标题。使用Add方法可以给集合添加标题。设置标题值后，标题和标题值会与
这个HttpClient实例发送的每个请求一起发送。
例如，响应内容默认为XML格式。要改变它，可以在请求中添加一个Accept标题，
以使用JSON。在调用GetAsync之前添加如下代码，内容就会以JSON格式返回：
    client.DefaultRequestHeaders.Add("Accept", "application/json; odata=verbose")
;
添加和删除标题，运行示例，会以XML和JSON格式显示内容。
从DefaultHeaders属性返回的HttpRequestHeaders对象有许多辅助属性，可用于许多标
准标题。可以从这些属性中读取标题的值，但它们是只读的。要设置其值，需要使用Add
方法。在代码片段中，添加了HTTP Accept标题。根据服务器接收到的Accept标题，服务
器可以基于客户的需求返回不同的数据格式。发送Accept标题application / json时，客户就
通知服务器，它接受JSON格式的数据。标题信息用ShowHeaders方法显示，从服务器接收
响应时，也调用该方法（代码文件HttpClientSample / Program.cs）：
    public static Task GetDataWithHeadersAsync()
    {
      try
      {
        using (var client = new HttpClient())
        {
        client.DefaultRequestHeaders.Add("Accept",
          "application/json; odata=verbose");
        ShowHeaders("Request Headers:", client.DefaultRequestHeaders);
        HttpResponseMessage response = await client.GetAsync(NorthwindUrl);
        client.EnsureSuccessStatusCode();
        ShowHeaders("Response Headers:", response.Headers);
        //etc.
        }
    }
与上一个示例不同，添加了ShowHeaders方法，它把一个HttpHeaders对象作为参数。
HttpHeaders是HttpRequestHeaders和HttpResponseHeaders的基类。这两个特殊化的类都添
加了辅助属性，以直接访问标题。HttpHeader对象定义为keyValuePair>。这表示每个标题在集合中都可以有多个值。因此，如果希望改变
标题中的值，就需要删除原值，添加新值。
ShowHeaders函数很简单，它迭代HttpHeaders中的所有标题。枚举返回
KeyValuePair>元素，为每个键显示值的字符串版本：
    public static void ShowHeaders(string title, HttpHeaders headers)
    {
      WriteLine(title);
      foreach (var header in headers)
      {
        string value = string.Join(" ", header.Value);
        WriteLine($"Header: {header.Key} Value: {value}");
      }
      WriteLine();
    }
运行这段代码，就显示请求的任何标题。
    Request Headers:
    Header: Accept Value: application/json; odata=verbose
    Response Headers:
    Header: Vary Value: ＊
    Header: X-Content-Type-Options Value: nosniff
    Header: DataServiceVersion Value: 2.0;
    Header: Access-Control-Allow-Origin Value: ＊
    Header: Access-Control-Allow-Methods Value: GET
    Header: Access-Control-Allow-Headers Value: Accept, Origin, Content-Type,
    MaxDataServiceVersion
    Header: Access-Control-Expose-Headers Value: DataServiceVersion
    Header: Cache-Control Value: private
    Header: Date Value: Mon, 06 Jul 2015 09:00:48 GMT
    Header: Set-Cookie Value: ARRAffinity=a5ee7717b148daedb0164e6e19088a5a78c4769
3a6
    0e57422887d7e011fb1e5e; Path=/; Domain=services.odata.org
    Header: Server Value: Microsoft-IIS/8.0
    Header: X-AspNet-Version Value: 4.0.30319
    Header: X-Powered-By Value: ASP.NET
因为现在客户端请求JSON数据，服务器返回JSON，也可以看到这些信息：
    Response Status Code: 200 OK
    Received payload of 1551 characters
    {"d":{"results":[{"__metadata":{"id":"http://services.odata.org/Northwind/
    Northwind.svc/Regions(1) ", "uri":
25.2.4 访问内容
先前的代码片段展示了如何访问Content属性，获取一个字符串。
响应中的Content属性返回一个HttpContent对象。为了获得HttpContent对象中的数
据，需要使用所提供的一个方法。在例子中，使用了ReadAsStringAsync方法。它返回内
容的字符串表示。顾名思义，这是一个异步调用。除了使用async关键字之外，也可以使
用Result属性。调用Result属性会阻塞该调用，直到ReadAsStringAsync方法执行完毕，然
后继续执行下面的代码。
其他从HttpContent对象中获得数据的方法有ReadAsByteArrayAsync（返回数据的字节
数组）和ReadAsStreamAsync（返回一个流）。也可以使用LoadIntoBufferAsync把内容加
载到内存缓存中。
Headers属性返回HttpContentHeaders对象。它的工作方式与前面例子中的请求和响应
标题相同。
  注意： 除了使用HttpClient和HttpContent类的GetAsync和ReadAsStringAsync
方法之外，HttpClient类还提供了方法GetStringAsync，来返回一个字符串，而不需要调
用两个方法。然而使用这个方法时，对错误状态和其他信息没有那么多的控制。
  注意： 流参见第23章。
25.2.5 用HttpMessageHandler自定义请求
HttpClient类可以把HttpMessageHandler作为其构造函数的参数，这样就可以定制请
求。可以传递HttpClientHandler的实例。它有许多属性可以设置，例如ClientCertificates、
Pipelining、CachePolity、ImpersonationLevel等。
下一个代码片段实例化SampleMessageHandler，并传递给HttpClient构造函数（代码文
件HttpClientSample / Program.cs）：
    public static async Task GetDataWithMessageHandlerAsync()
    {
      var client = new HttpClient(new SampleMessageHandler("error"));
      HttpResponseMessage response = await client.GetAsync(NorthwindUrl);
      //...
    }
这个处理程序类型SampleMessageHandler的作用是把一个字符串作为参数，在控制台
上显示它，如果消息是“error”，就把响应的状态码设置为Bad Request。如果创建一个派生
于HttpClientHandler的类，就可以重写一些属性和方法SendAsync。SendAsync通常会重
写，因为发送到服务器的请求会受影响。如果_displayMessage设置为“error”，就返回一个
HttpResponseMessage和错误请求。该方法需要返回一个Task。对于错误的情况，不需要
调用异步方法；这就是为什么只是用Task.FromResult返回错误（代码文件
HttpClientSample / SampleMessageHandler FromResult.cs）：
    public class SampleMessageHandler : HttpClientHandler
    {
      private string _message;
      public SampleMessageHandler(string message)
      {
        _message = message;
      }
      protected override Task SendAsync(
        HttpRequestMessage request, CancellationToken cancellationToken)
      {
        WriteLine($"In SampleMessageHandler {_message}");
        if(_message == "error")
        {
        var response = new HttpResponseMessage(HttpStatusCode.BadRequest);
        return Task.FromResult(response);
        }
        return base.SendAsync(request, cancellationToken);
      }
    }
添加定制处理程序有许多理由。设置处理程序管道，是为了添加多个处理程序。除了
默认的处理程序之外，还有DelegatingHandler，它执行一些代码，再把调用委托给内部或
下一个处理程序。HttpClientHandler是最后一个处理程序，它把请求发送到地址。图25-1
显示了管道。每个添加的DelegatingHandler都调用下一个或内部的处理程序，最后一个是
基于HttpClientHandler的处理程序。
25.2.6 使用SendAsync创建
HttpRequestMessage
图25-1
在后台，HttpClient类的GetAsync方法调用SendAsync
方法。除了使用GetAsync方法之外，还可以使用
SendAsync方法发送一个HTTP请求。使用SendAsync，可
以对定义请求有更多的控制。重载HttpRequestMessage类
的构造函数，传递HttpMethod的一个值。GetAsync方法用
HttpMethod.Get创建一个HTTP请求。使用HttpMethod，不
仅可以发送GET、POST、PUT和DELETE请求，也可以发
送HEAD、OPTIONS和TRACE。有了HttpRequestMessage
对象，可以用HttpClient调用SendAsync方法：
    private async Task GetDataAdvancedAsync()
    {
      using (var client = new HttpClient())
      {
      var request = new HttpRequestMessage(HttpMetho
d.Get, NorthwindUrl);
      HttpResponseMessage response = await client.Se
ndAsync(request);
      //etc.
      }
    }
  注意： 本章只使用HttpClient类发出HTTP GET请求。HttpClient类还允许使用
PostAsync、PutAsync和DeleteAsync方法，发送HTTP POST、PUT和DELETE请求。这
些方法在第42章使用，发出这些请求，在Web服务中调用相应的动作方法。
创建HttpRequestMessage对象后，可以使用Headers和Content属性提供标题和内容。使
用Version属性，可以指定HTTP版本。
  注意： HTTP / 1.0在1996年发布，几年后发布了1.1。在1.0版本中，服务器返
回数据后，连接总是关闭；在1.1版本中，增加了keep-alive标题，允许客户端根据需要
保持连接打开，因为客户端可能希望发出更多的请求，不仅接收HTML代码，还接收
CSS、JavaScript文件和图片。1999年定义了HTTP / 1.1后，过了16年，HTTP / 2才在
2015年完成。版本2有什么优点？HTTP / 2允许在相同的连接上发出多个并发请求，压
缩标题信息，客户机可以定义哪个资源更重要，服务器可以通过服务器推操作把资源
发送到客户端。HTTP 
/ 
2支持服务器推送，意味着一旦HTTP 
/ 
2支持无处不在，
WebSockets就会过时。所有浏览器的新版本，以及运行在Windows和Windows 
Server
2016上的IIS，都支持HTTP / 2。
25.2.7 使用HttpClient和Windows Runtime
在撰写本书时，用于控制台应用程序和WPF的HttpClient类不支持HTTP / 2。然而，
用于通用Windows平台的HttpClient类有不同的实现，它基于Windows 10 API的功能。因
此，HttpClient支持HTTP / 2，甚至在默认情况下使用这个版本。
下一个代码示例显示了一个通用Windows应用程序，它向进入在一个文本框的链接发
出一个HTTP请求，并显示结果，给出HTTP版本信息。以下代码片段显示了XAML代码，
图25-2显示了设计视图（代码文件WinAppHttpClient / MainPage.xaml）：
图25-2
  注意： XAML代码和依赖属性参见第29章，编译后的绑定参见第31章。
属性Url、Version和Result实现为依赖属性，以自动更新UI。下面的代码片段显示了
Url属性（代码文件WinAppHttpClient /MainPage.xaml.cs）：
    public string Url
    {
      get { return (string)GetValue(UrlProperty); }
      set { SetValue(UrlProperty, value); }
    }
    public static readonly DependencyProperty UrlProperty =
      DependencyProperty.Register("Url", typeof(string), typeof(MainPage),
        new PropertyMetadata(string.Empty));
HttpClient类用于OnSendRequest方法。单击UI中的Send按钮，就调用该方法。在前面
的示例中，SendAsync方法用于发出HTTP请求。为了看到请求确实是使用HTTP / 2版本发
出的，可以在调试器中检查request.Version属性。服务器给出的版本是来自response.
Version，并写入在UI中绑定的Version属性。如今，大多数服务器都只支持HTTP 
1.1版
本。如前所述，Windows Server 2016支持HTTP / 2：
    private async void OnSendRequest()
    {
      try
      {
        using (var client = new HttpClient())
        {
          var request = new HttpRequestMessage(HttpMethod.Get, Url);
          HttpResponseMessage response = await client.SendAsync(request);
          Version = response.Version.ToString();
          response.EnsureSuccessStatusCode();
          Result = await response.Content.ReadAsStringAsync();
        }
      }
      catch (Exception ex)
      {
        await new MessageDialog(ex.Message).ShowAsync();
      }
    }
运行该应用程序，向https://http2.akamai.com/demo发出请求，就返回HTTP / 2。
25.3 使用WebListener类
使用IIS作为HTTP服务器通常是一个好方法，因为可以访问很多功能，如可伸缩性、
健康监测、用于管理的图形用户界面等。然而，也可以轻松创建自己的简单HTTP服务
器。自.NET 2.0以来，就可以使用HttpListener，但是现在在.NET Core 1.0中有一个新的
WebListener类。
HttpServer的示例代码使用了以下依赖项和名称空间：
依赖项
    NETStandard.Library
    Microsoft.Net.Http.Server
名称空间
    Microsoft.Net.Http.Server
    System
    System.Collections.Generic
    System.Linq
    System.Net
    System.Reflection
    System.Text
    System.Threading.Tasks
    static System.Console
HTTP服务器的示例代码是一个控制台应用程序（包），允许传递一个URL前缀的列
表，来定义服务器侦听的地点。这类前缀的一个例子是http://localhost:8082 / samples，其
中如果路径以samples开头，服务器就只侦听本地主机上的端口8082。不管其后的路径是
什么，服务器都处理请求。为了不仅支持来自本地主机的请求，可以使用+字符，比如
http://+:8082/samples。这样，服务器也可以从所有的主机名中访问。如果不以提升模式启