Although 
randomness of data values, they essentially 
the correctne
those faults change program results, 
ss of the program. 
due to the 
do  not affect 
function. 
•  Floating 
point  benchmarks  from 
SPLASH-2 and 
vulnerabilities  to 
exhibit 
different 
SPECFP2000 
faults. 
Fft and lu have about 20% SOC rates, while art 
and equake have few SOC cases. One reason is  that 
the SPLASH-2 benchmarks 
SPECFP benchmarks 
are more complex programs. 
are compute kemels while 
•  Changing  control 
flow does not necessarily generate 
The Y-branch effect occurs quite often in our 
that change the control 
path 
masking errors 
errors. 
experiments, 
of the programs. 
VI. IMPLICATIONS 
The CriticalFault 
framework 
allows us to intelligently 
our analysis 
effort towards 
faults. Specifically, from our guided 
evade 
poten­
faults and  redirects 
harmful non-derated 
derated 
tially 
biased fault injection results, 
potentially 
help future fault-tolerant 
system designs. 
the following  observations  can 
•  As vulnerability 
analysis 
can deduce derated faults 
not faulty data or faulty control  cases 
as shown in 
cases  but 
Figures 
a  relatively 
short abort latency. 
7 and 10. This indicates 
that fault address 
cases  have 
computation 
have a greater 
values will  not 
values. Those data-only 
SDC: In Figure 1 3 ,  we select fft and  lu for analysis, 
do not have SOCs or have just 
chance to occur 
change 
flow. This is the reason why fft and  lu have low 
rates (2% or lower). Among those divergence 
distances 
because other benchmarks 
a few cases. Fft and lu are both data-centric 
benchmarks. Hence,  faults 
in data-only 
control 
divergence 
cases  in 
less  than 
somewhat surprising 
control 
path so prominently. 
are compute kemels, 
the program 
data is subsequently 
to abort. Thus, SOC  continues  to  occur 
this short 
diverging 
fft and lu, most of them have divergence 
1 00 p'ops. These short  distances 
the diverging 
computed 
as one would expect SDCs not to affect 
since both fft and  lu 
rather than leading 
distance. 
paths  may 
only affect how 
However, 
despite 
in SOC  cases  is 
By analyzing 
fault propagation 
tify several interesting 
behaviors. 
behaviors 
in GFI, we iden­
•  The behavior 
of faulty address 
cases  among 
all bench­
Further, 
all are very likely to trigger 
marks are very similar; 
aborts. 
to cause aborts because of accessing invalid 
regions. 
in higher bits are likely 
program 
corruptions 
•  Injection results 
of faulty data cases resemble 
results 
injection. This is because faulty data  cases 
to other data computations, memory addresses 
and/or control flow 
instructi
ons. We discuss 
overall 
propagate 
computations 
this in Section 
VI. 
of 
can 
faults 
executions, the remaining 
masking. 
in previous 
derated 
derating 
and 
have 
from fault-free 
are likely caused by  instruction-level 
application-level 
been observed 
not well understood.  With  CriticalFault 
identifiable 
more complex error derating 
cross-layer reliability 
ploit these behaviors. 
While  these  phenomena 
studies 
out the 
can focus on the 
in order to derive 
that can aggressively 
faults, researchers 
[ 1 0] ,  [3], they are still 
solutions 
behavior 
carving 
derated 
ex­
•  A related 
impact 
example of application-level 
the most prominent 
in­
masking is the Y­
since all control 
Being able to identify 
instruction 
these branches 
are derated. 
benefits: ( 1 )  A more sophisticated 
can be derived 
branch effect [ 1 4 ] .  This  has 
on mcf in our experiments 
jections 
has  two 
analyzer 
with  a greater 
as dual-modular 
checking 
ignoring 
accuracy. 
these branches. 
can avoid unnecessary 
overheads 
by safely 
to estimate 
(2) Fault-tolerant 
vulnerability 
factors 
solutions  such 
flow signature 
redundancy 
and control 
vulnerability 
•  Injections to registers 
being used as memory addresses 
lead to aborts. 
While  this 
that these registers 
by software-level 
can 
detectors 
from selective 
and likely 
it  shows 
be guarded  only 
is not unexpected, 
are highly intrusive 
result 
potentially 
(e.g., aborts) 
register 
head. Furthermore, CriticalFault 
venue to study how the portion 
result 
and can be safely excluded 
protection 
in SDCs. 
provides 
an effective 
of faulty address cases 
schemes (e.g., [29]) to reduce over­
•  Although 
the  overall 
fewer than 80% of the injections belong to the 
and the faulty data 
because 
and mutate to dif­
results 
faulty data category, 
results 
bear much resemblance. 
faulty data injections can propagate 
ferent categories: faulty control, 
and data corruptions. This approximation 
used to 
reduce the computational 
effect can be 
of future 
faulty memory address, 
requirements 
This  is  likely 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:50:05 UTC from IEEE Xplore.  Restrictions apply. 
researchers 
[8] S. Sahoo et aI., "Using Likely Program 
Invariants 
to Detect Hardware 
inject faults into non-control 
and non­
For example, 
jection experiments. 
fault  in
can selectively 
memory instructions 
while saving 20% of the computation 
believe 
CriticalFault 
propagation. 
this correlation 
and further 
suffering 
without 
can improve the effectiv
eness of 
of soft 
much fidelity 
loss 
We 
bandwidth. 
our understanding 
error 
VII. CONCLUSIONS 
[9] N. Wang and S. Patel, 
Errors," 
Systems and  Networks, 
in Proceedings of International 
Conference on Dependable 
2008. 
"ReStore: 
IEEE Transactions on Dependable and Secure 
Symptom-Based Soft Error 
Detection 
in Microprocessors," 
Computing, vol. 3, no. 3,  July-Sept  20
06. 
[ L O] J. Cook  and 
C. Zilles, 
"A characterization 
of instruction-level 
error 
and its implications 
derating 
and Networks With FTCS and DCC,  2008. DSN 2008. IEEE Interna­
tional Conference on, 2008, pp.  482 
for error detection," 
in Dependable Systems 
-491 .  
[ I I ]  S.  S. Mukherjee e t  aI., " A  Systematic 
Methodology 
to Compute the 
Architectural 
cessor," in MICRO, 2003. 
Vulnerability 
Factors 
for a High-Perfomlance 
Micropro­
Technology 
scaling 
is expected 
to worsen the soft error rate 
trend affects 
mainstream 
market, driving 
recent research 
methods. To evaluate 
essors. This prevalent 
(SER) of future microproc
even  the 
effort 
towards low-cost yet effective hardware-software cross-layer 
reliability 
these methods' effectiveness, 
many resort 
the high error derating 
ously  test 
the underlying 
a need for a evaluation 
stress test and 
fault-tolerant 
framework 
newly proposed 
rate in SFI makes it difficult  to 
features. Thus, there is 
to 
reliability 
analysis 
can be 
In this paper, we observe 
that vulnerability 
to statistical 
validate 
solutions. 
rigor­
[ 1 2] Y. Sridharan 
and D. Kaeli, "Eliminating 
microarchitectural 
dependency 
from architectural 
chitectur
2009, pp. 1 17 -128. 
vulnerability," 
in High Performance Computer Ar­
e, 2009. HPCA 2009. IEEE 15th International 
Symposium on, 
[ 1 3] C. T. Weaver, J. Emer, S. S. Mukherjee, and S. K. Reinhardt, 
"Reducing 
the soft-error rate 
vol. 24,  no. 
6, 2004. 
of a high-perfomlance 
microprocessor," 
IEEE Micro, 
[ 1 4] N.  J. Wang, M. Fertig, 
and S. J. Patel, "Y-branches: When you come 
to  a fork in  the road, take it," in IEEE PACT, 2003, pp. 56-67. 
[15] H. Cha, E. Rudnick, 
tion environment 
IEEE Transactions 
[ 1 6] N.  A. Kanawati, 
J. Patel, 
R. Iyer, and 
G. Choi, "A gate-level 
simula­
Computers, 
on, vol. 45, no. I I ,  pp. 1 248 -1256, Nov. 1 996. 
evaluation 
Performance and Dependability, 
using hybrid fault/error 
and J. A. Abrahanl, "Dependability 
injection," 
1 995. 
in Proc.  IntI. 
Symp. Compo 
G. A. Kanawati, 
that allows  researchers 
for alpha-particle-induced 
transient 
faults," 
fault injection (SFI). Unfortunately, 
wasteful 
derated 
fault simulations. 
CriticalFault, 
the focus of SFI towards 
lly, the framework 
is made up 
likely 
a vulnerability 
Multi­
[ 17] H.-S. Kim, A. K. Somani, and A. Tyagi, "A Reconfigurable 
Symposium 
Cache Architecture," 
in International 
function 
on Field Programmable Gate Arrays, 
Computing 
2000. 
[ 1 8] K. Reick, P. Sanda, S. Swaney, J. Kellington, 
M. Mack, M. Floyd, and 
vulnerability 
jection (GFI). After inspecting 
analysis 
the instruction 
trace, 
VA 
(VA) and guided 
D. Henderson, 
sor," Micro, IEEE, vol. 28, no. 2, pp. 30-38, 2008. 
"Fault-tolerant 
design of the ibm power6 microproces­
[ 1 9] T. K. Tsai and R. K. Iyer, "Measuring 
fault tolerance 
with the  flape 
map that specifies 
likely non-derated 
GFI is conducted 
jection campaign 
this map. 
can be  biased 
scheme-under-test. 
based  on 
towards 
We evaluate 
Critical Fault 
on ten benchmarks. Our results 
fault injection 
space by 
number (59%) of the guided 
data corruptions 
(SDCs). 
To 
how  injected faults behave, we closely examine 
level. 
of Y­
the /-lOp level to the software 
can be high because 
through 
and a significant 
show that VA successfully reduces the 
29%  on average 
injections cause aborts or silent 
understand 
error propagation 
We found that error derating  rate 
branch related 
cases where similar 
dramatically 
that not all SDC  results 
findings all suggest 
orous evaluation 
improving 
different 
effects. 
REFERENCES 
We also discovered 
a few interesting 
but faulty memory operations 
error behaviors.  Furthermore, 
we found 
These 
as we thought 
are invalid 
before. 
exhibit 
that CriticalFault 
can lead to  a more  rig­
of cross-layer reliability 
schemes, potentially 
the design of future fault-tolerant 
systems. 
tool," 
in Proceedings 
fault injection 
Conference 
on Modelling Techniques and Tools for  Computer Performance 
Evaluation: 
Systems. London, UK: Springer-Verlag, 
Available: http://porta
l.acm.org/citation
[20] N. Wang et aI., "Characterizing 
80.746851 
the Effects of Transient 
of the 8th International 
.cfm?id=6480
Quantitative 
of Computing and Communication 
1 995, pp. 26-40. [Online]. 
Evaluation 
Faults on a 
High-Perfomlance 
Conference on Dependable Systems and  Networks, 
Pipeline," 
Processor 
2004. 
in Proceedings of International 
[21] N.  J. Wang, A. Mahesri, 
and S. J. Patel, "Exanlining 
ace analysis 
estimates 
reliability 
annual international 
' 07. New York, NY, USA: ACM, 2007, pp. 460-469. [Online]. 
Available: http://
using fault-in
symposium on Computer architecture, 
in Proceedings of the 34th 
ser. ISCA 
/LO. 1 145/1250662.1 2507 1 9  
doi.acm.org
jection," 
[22] A .  Biswas, 
P. Racunas, 
S. Mukheljee, 
"Computing 
accurate 
avfs using ace analysis 
Architecture 
Letters, vol. 7, no. I, pp. 21 -24,2008. 
[23] S. K. S. Hari, S. Y. Adve, H. Naeimi, and P. 
models: A  rebuttal," 
Computer 
Ramachandran, 
"Relyzer: 
J. Emer,  and 
on performance 
exploiting 
resiliency 
application-level 
to transient 
fault equivalence 
in ASPLOS, 2012, pp. 1 23-1 34. 
faults," 
to analyze application 
[24] N. Neelakantam 
et al., "FeS2: A Full-system 
Execution-driven 
Simula­
tor for x86," Website, 
iuc.edu/. 
[25] W.  River, "Simics Full System Simulator," 
20 LO,  http://f
es2.cs.u
Website, 201 1 ,  
http://www.simics.neti. 
[26] M. T. Yourst, 
"PTLSim: x86-64 Cycle Accurate 
Processor 
Simulation 
Design Infrastructure," 
Website, 
"Detecting 
[27] P. Ramachandran, 
2009, http://www.ptlsim.org/. 
and Recovering 
from In-core 
Ph.D. dissertation, 
Hardware 
University 
of 
components: 
IEEE Micro, 
Faults through software Treatment," 
Illinois, 
2011 ,  none. 
we propose 
that directs 
faults. Specifica
used to help SFI eliminate 
Using this strategy, 
driven framework 
non-derated 
of two components, 
fault in
generates 
faults. Subsequently, 
This way, the fault in
stressing 
the reliability 
an injection 
[II S. Borkar, "Designing 
systems from unreliable 
reliable 
of transistor 
The challenges 
vol. 25, no. 6, pp. 1 0-16,2005. 
variability 
and degradation," 
[2] P. Ramachandran 
[3] G. P. Saggese et aI., "An Experimental 
et aI., "Statistical 
in Proceedings 
of 
2008. 
Conference on Dependable Systems and  Networks, 
Study of Soft Errors in 
Fault Injection," 
International 
Microprocessors," 
IEEE Micro, vol. 25, no. 6, 2005. 
[41 M. Dimitrov 
Protection 
Conference on Parallel 
and H. Zhou, "Unified Architectural 
Support for Soft-Error 
or Software Bug Detection," 
in Proceedings of International 
Archtectures 
and Compilation 
Techniques, 2007. 
[5] S. Feng, S. Gupta, A. Ansari, 
error reliability 
tic  soft 
and S. A. Mahlke, "Shoestring: 
probabilis­
on the cheap," 
in ASPLOS, 2010, pp. 385-396. 
[6] M. Li et aI., "Understanding 
the Propagation 
of Hard Errors to Software 
and Implications 
Systems Design," 
[71 P. Racunas et aI., "Perturbation-based 
for Resilient 
in Proceedings 
Symposium on High Performance Computer Architec­
Fault Screening," 
in ASPLOS, 2008. 
of International 
ture,2007. 
[28] X. Li  and D. Yeung, "Application-level 
correctness 
and its impact on 
in Proceedings 
fault tolerance," 
Symposium on High Performance Computer Architecture, 
' 07. Washington, 
1 92. [Online]. Available: http://dx
1 8 1-
.doi.org/LO. I I09/HPCA.2007.3461 96 
of the 2007 IEEE 13th International 
ser. HPCA 
DC,  USA: IEEE Computer  Society,  2007,  pp. 
[29] P. Montesinos, 
W. Liu, and J. Torrell 
as,  "Using  register 
lifetime 
to protect  register  files  against 
soft errors," 
in Proceedings 
Conference on Dependable 
AnnuallEEEIIFIP International 
predictions 
of the  37th 
Systems and  Networks, 
IEEE Computer Society, 
http://dx.doi.org
lLO. 1 109/DSN.2007.99 
ser. DSN ' 07. Washington,  DC, 
2007, pp. 286-296. [Online]. Available: 
USA: 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:50:05 UTC from IEEE Xplore.  Restrictions apply.