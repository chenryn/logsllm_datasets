allows selecting which sheet and which column in the
sheet that the user wants to import data from. A preview
of the data in the column is also displayed.
5. The user select a sheet and a column, and the add-on
populates the question with the data in the column.
At this point, the readers can probably guess in which
step the add-on is vulnerable: in Step 4, the add-on does
not ﬁlter or escape the data from the selected spreadsheet
document and renders it as HTML. Thus, if the attacker has
access to the document (e.g. the attacker and the victim are
collaborators), it can hide malicious JavaScript code in the
part of the document that will be used as the form inputs and
the code will be executed when the victim uses the add-on.
Since the add-on uses Picker API (Step 3), the attacker can
steal its access token and gain all of its permissions, which
Figure 6: Shopify add-on architecture
include the following: “See, edit, create, and delete all of
your Google Drive ﬁles”, “See, edit, create, and delete your
spreadsheets in Google Drive”, “View and manage your forms
in Google Drive”, and “Send email as you”.
We can see that the add-on has more permissions that it
actually needs. For example, it does not need the ability to
send emails on the user’s behalf. It also does not need access
to all of the Google Drive ﬁles; read access to the spreadsheets
only should be sufﬁcient. Because of these unnecessary per-
missions, the attacker will be able to access all of the victim’s
Google Drive ﬁles and send emails on the victim’s behalf. If
the attacker wants to gain even more access rights (e.g. read
the victim’s emails), it can phish to obtain an OAuth 2.0 token
as we described in the previous section.
4.3 Shopify add-ons
Shopify is an e-commerce platform with which small mer-
chants can create online shops. It offers services such as
payment, marketing, and customer engagement. Each shop is
managed through a web admin interface, on which the owner
can access the built-in services of the platform to, for example,
add new products to the shop, engage with users, or manage
orders. Shopify add-ons integrate third-party services into this
admin interface.
The add-on architecture is illustrated in Figure 6. The add-
on server runs in the cloud and accesses the shop data with
the Shopify REST APIs over HTTPS. Typically, the add-on
server is authorized to access the shop server with an OAuth
2.0 access token, which it obtains as follows. When the user
starts the add-on for the ﬁrst time, the shop’s admin interface
shows an authorization prompt with a list of the data that
the add-on requests to access (e.g. orders, products). If the
user agrees, the Shopify server sends an access token to a pre-
registred endpoint on the add-on server. The add-on server
can then use the token to access the requested data. Later, the
add-on can renew the access tokens without prompting the
user.
7
Add-onserverShopify ServerREST APIsshopX.myshopify.comShopUIAdd-on UIApplication Add-on’s data access Add-on’s logic Attack vectors
MS Ofﬁce
Online
G Suite
Host application only
In frontend
Any applications
In backend
Shopify
Host application only
In backend
Shared workspace
Table 2: Analysis summary
Shared workspace
Outside input
Shared workspace
Outside input
Exploits
- Get the same level of access as the add-on
- Request an OAuth 2.0 token
- Get the same level of access as the add-on
only if the Picker API is used
- Request an OAuth 2.0 token
- Install a malicious add-on
The add-on UI is embedded into a menu in the shop’s admin
interface. Shopify provides a set of local JavaScript APIs [50]
for the add-on UI to perform resource-picking operations.
Speciﬁcally, the add-on UI communicates with the shop’s
admin interface via window.postMessage(), and the admin
interface asks the user to pick resources of the requested type.
The admin interface then returns the result data objects to the
add-on.
A shop on Shopify can have an owner and multiple staff
members. The shop owner has full access to the shop and can
grant the other staff members access to some (or all) admin
features including add-ons [51]. The view through an add-
on’s UI is based on the intersection of the member’s and the
add-on’s permissions.
4.3.1 XSS exploits
With Shopify, the attacker must be a staff member who is able
to inject malicious scripts into the shop resources (i.e. the
“shared workspace” attack vector). We found that Shopify
prevents including HTML or scripts in customer information,
but it is possible to inject scripts into the product and order
descriptions. These scripts will be executed when other staff
members use a vulnerable add-on that renders them in an
unsafe way.
Install a malicious add-on. The Shopify add-on architec-
ture has the good points of both MS Ofﬁce Online and G
Suite. In particular, the access token is sent directly to the
add-on server and, thus, is not accessible to the add-on UI
by default. Also, the local JavaScript APIs allow the add-on
UI to perform resource-picking operations without exposing
the shop data because it is processed in the admin interface.
Nevertheless, it is possible for the attacker to trick the shop
owner or another authorized victim into installing a malicious
add-on. Unlike MS Ofﬁce Online and G Suite applications,
whose add-ons can only be installed from the respective mar-
ketplaces, Shopify users can initiate the installation process
of a new add-on just by visiting a URL. Thus, the attacker
can create a malicious add-on with a name similar to that of
the vulnerable add-on and initiate its installation from the
injected script. The victim might think that the add-on has
been updated and it needs to be authorized again. Depending
on the extent of the permissions granted, the malicious add-on
can then access any shop data.
4.3.2 Case study: Order Printer Pro
Order Printer Pro [15] is one of the most popular add-ons in
the “Orders and shipping” category on the Shopify market-
place. The add-on allows its users to quickly create order-
related documents (e.g. invoices, return forms) as well as
printing or delivering them to the customers. The workﬂow
for printing an order is as follows.
1. The user starts the add-on from the admin interface. The
host application will display the add-on as a part of its
UI.
2. The user selects the “Orders” menu of the add-on UI.
The add-on will show a list of the orders of the shop.
3. The user selects the order that she wants to print. The
add-on will display the order and action buttons that
allow the user to print the order or export the order as a
PDF document. The displayed information includes the
customer’s shipping address, the items in the order, and
the notes that are written by the staff members if any.
4. The user clicks on the “Print” button and the order will
be printed.
The problem with the add-on is that when it displays the
order’s information, it does not render the notes in a safe
way. Consequently, if the notes contain JavaScript snipets, the
snipets will be executed. As we mentioned in the previous
section, Shopify does not prevent including HTML or scripts
in the ﬁeld. Thus, any staff member that have write access
to the orders of the shop can perform XSS on other staff
members, including the shop owner.
5 Empirical analysis
To ﬁnd out how widespread the XSS issue in cloud-
application add-ons is in the wild, we conducted an empirical
analysis by looking for vulnerable add-ons in the market-
places of the three selected cloud application suites. In this
8
section, we ﬁrst present our approach for shortlisting the add-
ons, followed by the methodology that we used for systemati-
cally ﬁnding vulnerabilities in the shortlisted add-ons. Finally,
we show the analysis results.
5.1 Shortlisting add-ons for analysis
We consider only free add-ons from the marketplaces. Table 3
shows the number of such add-ons as of August 2019. Note
that Microsoft and Shopify ofﬁcially use the terms add-in and
app, respectively.
Table 3: Add-on marketplaces (August 2019)
Marketplace
MS Ofﬁce Online
G Suite
Shopify
Terminology Available free
add-in
add-on
app
1150
1180
1265
We selected 100 free add-ons from each of the three mar-
ketplaces — 50 popular ones that are likely to have many
users, and another 50 selected randomly— resulting in a total
of 300 add-ons for the study. The criteria used for shortlisting
the add-ons are as follows.
MS Ofﬁce Online: We focused on add-ons for the following
applications in the suite: Word, Excel, OneNote, Outlook,
and PowerPoint. The remaining applications either have no
add-ons or the add-ons are available only to domain users.
Since the marketplace does not show the number of users for
each add-on, we shortlisted the top 50 add-ons based on the
number of reviews.
G Suite: The applications available to individual users in-
clude Gmail, Docs, Sheets, Slides, Forms, Drive, and Calen-
dar. We excluded Drive or Calendar because their add-ons
only add new menus to the application UI, which means that
they do not have any client-side code, leaving no room for the
XSS attacker. From the remaining applications, we shortlisted
50 add-ons with the highest number of users.
Shopify: We ﬁrst sorted add-ons in the marketplace by the
“Most installed” option, and then we shortlisted the ﬁrst 50
add-ons from the result. Note that the marketplace does not
show the number of installations of each add-on; instead, it
shows only the rating and the number of reviews.
5.2 Analysis methodology
We manually analyze the selected add-ons with black-box test-
ing. There are several challenges with automatically verifying
whether an add-on would cause XSS vulnerability. First, state-
of-the-art automated techniques for detecting XSS vulnerabil-
ities typically work only with client-side XSS [33, 35, 49, 53],
while the nature of the XSS attacks against cloud-application
add-ons vary depending on both the host application and the
implementation of the add-on. Speciﬁcally, the vulnerabilities
of MS Ofﬁce Online add-ons are always on the client side
because the attacker’s malicious input is propagated to the
add-on via local messaging (i.e. window.postMessage())
and processed by the add-on UI. The vulnerabilities of G
Suite and Shopify add-ons, on the other hand, can be either
on the client side or on the server side depending on whether
the add-on server returns the attacker’s raw input to the client
or it renders the data beforehand. Second, unlike traditional
web applications where a signiﬁcant portion of the workﬂows
can be analyzed by loading every available URL in the web-
sites with a browser, most functionality of an add-on can
only be triggered by user actions. In addition, there is no sin-
gle standard method to invoke an add-on. Some start by the
user clicking and selecting the add-on from a host-application
menu, while the others require further user interaction to reach
a point where the XSS code may be executed. Third, most
automated XSS detection approaches in the literature do not
involve user logging in. However, many add-ons act as the
connectors between their host applications and third-party
web services; thus, they require their users to create an ac-
count and log in before they can be used so that they keep
track of the user data. The registration processes vary greatly,
making them difﬁcult to be done without manual user interac-
tion. Because of these reasons, we leave automatic detection
of XSS vulnerabilities in cloud-application add-ons to future
work.
Black-box testing. For each add-on, we ﬁrst installed it and
tried to understand its features. We then created a test item
for each of the target applications as follows.
• For document editing applications in MS Ofﬁce On-
line and G Suite (e.g. Word, Excel, Google Docs,
Google Sheets), the test item was a corresponding doc-
ument. To make sure that every source of data that
the add-on was going to process contained JavaScript
code, we added simple JavaScript snipets to every
part of the document. For instance, if it was a spread-
sheet, we included JavaScript code in the name of
each sheet, the heading of each column, and some
cells in each column. An example of the snippets is
.
• For email applications (i.e. Outlook, Gmail), the test
item was an email that we sent to ourselves. Like with
document editing applications, we inserted scripts to the
subject and every part of the email’s body.
• For Shopify: We ﬁrst created a test shop. As we men-
tioned in Section 4.3.1, it is possible to injects scripts
only into the products and orders. Thus, we created sev-
eral test products and orders in the shop, and we added
scripts into every possible places, such as the name and
the description of the items.
9
Table 4: Vulnerable add-ons found in our empirical analysis
Vulnerable add-ons
Attack vector
Status
Marketplace
MS Ofﬁce Online
Selection
criterion
Popular
Random
G Suite
Popular
Random
Shopify
Popular
Random
Translator for Outlook
GIGRAPH - Network Visualization
Duplicate Remover
Bubbles
Radial Bar Chart
Excel to JSON
WritingAssistant
Excel to SMS
Form Ranger
Flubaroo
autoCrat
formMule - Email Merge Utility
docAppender
Grackle Sheets
Sheetgo
Form Duplicates
Bulk Sheet Manager
rosterSync - Teacher Edition
Notiﬁcations for Forms
Text gBlaster (SMS Texting)
Mail Merge
Response Editor