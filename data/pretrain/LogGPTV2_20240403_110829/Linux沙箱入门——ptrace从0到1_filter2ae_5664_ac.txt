    }
    int main()
    {    
        if (no_hacker()==-1)
        {
            printf("don't trace me！\n");
            return 1;
        }
        printf("no one trace me！\n");
        return 0;
    }
纯汇编代码编译运行：
尝试gdb调试
可以用readelf工具查看符号表
可以看到我们彻底脱离了库的范畴，将不会有库的调用特征！
#####  反转:（攻）
但是牛逼的ida依然能给你标注出来？就问你难受不？
其实这里稍微人为分析一下，也可以的，直接查看EAX寄存器的内容，对照系统调用号表，不难看出这是在系统调用ptrace，也有自动化工具，比如有大佬在Binary
Ninja制作了一个插件，这个插件就是专门来查看二进制文件进行了那些系统调用的。  
github地址：
#####  反转：(防）
引用“Self-Modifying
Code“技术，顾名思义，就是二进制的可执行代码可以在运行时改变自己（代码，数据…….）。意思是说，我们可以让二进制代码在运行时写入系统调用指令，然后再执行它,这样我们就可以隐藏int
0x80的系统调用指令，因为在运行之前，根本就没有此指令,只有执行到特定的指令时，才会显现，起到很好的隐藏效果。
而在ELF文件标志格式中，程序中的代码和数据都是保存在.text
section中的，为了程序的稳定性和安全性，.text在默认编译的时候是可读可执行，但不可以写，所以必须在使用ld工具进行链接的时候得加上-N选项。
纯汇编代码：
    global _start
    section .data
        traced: db "being traced", 0xA
        tracedLen equ $-traced
        normal: db "not being traced", 0xA
        normalLen equ $-normal
    section .text
    _start:
        ;显示ptrace 
        mov edi, systemcall;
        mov ax, 0x80cd;“0x80cd”是与系统调用指令“ int 0x80”相对应的操作码
        stosw;将AX寄存器的内容存储到EDI寄存器指向的内存中
        ;calling ptrace
        mov ebx, 0x0
        mov ecx, 0x0
        mov edx, 0x0
        mov eax, 0x1a
    systemcall:
        xor eax, ebx;这条指令将被int 0x80覆盖
        cmp eax, 0
        jl debugger
        mov edx, normalLen;正常输出
        mov ecx, normal;"not being traced"
        xor ebx, ebx
        mov bl, 0x1
        xor eax, eax
        mov al, 0x4
        int 0x80 ; sys_write
        jmp exit
    debugger:
        mov edx, tracedLen;被调试的时候输出
        mov ecx, traced ;"being traced"
        xor ebx, ebx
        mov bl, 0x1
        xor eax, eax
        mov al, 0x4
        int 0x80 ; sys_write
    exit:
        xor eax, eax
        mov al, 0x1
        xor ebx, ebx
        int 0x80 ; sys_exit
编译运行：
直接用ida打开：
很明显，静态分析工具ida也没有识别出来系统调用！
通过readelf查看.text段的权限：
然后我们用python中的lief库进行重写，把.text section权限重写回来为AX
我们查看新保存的文件new_hacker .text section的权限：
一次很nice的换装就搞定了，当然我这里只是通过纯汇编代码验证可行性，在实际的利用场景众，内联汇编插入代码，可能会有更多的混淆指令什么的，让逆向过程更为艰难！
#####  反转：（攻）
虽然静态分析工具ida已经无法分析出系统调用了，但是这依然挡不住strace动态分析，一些有经验的逆向分析人员一看到0x80cd这样的机器码，可能比工具分析都还要快！
而且发现ptrace并不是只能专注与它本身，就是我一定要找出什么ptrace什么字符串啊，什么的，我们完全可以通过一些共同的特点来，比如ptrace在反调试中，如果遇到调试，就会返回-1，程序退出，我们完全可以跟进exit系统的调用。
###  3.代码注入
ptrace是Unix系列系统的系统调用之一，其主要功能是实现对进程的追踪，对目标进程，进行流程控制，用户寄存器值读取和写入操作，内存进行读取和修改。这样的特性，就非常适合，用于编写实现，远程代码注入到进程。
而大多数病毒也是利用到这个特性，实现自用空间注入，rip位置直接注入，text段与data段之间的空隙注入，而且gdb实现单步调试的原理也是在每条指令后面插入一个int3。
需要知道request几个参数：
> PTRACE_POKETEXT, PTRACE_POKEDATA  
>  往内存地址中写入一个字节。内存地址由addr给出。
>
> PTRACE_PEEKTEXT, PTRACE_PEEKDATA  
>  从内存地址中读取一个字节，内存地址由addr给出
>
> PTRACE_ATTACH  
>  跟踪指定pid 进程
>
> PTRACE_GETREGS  
>  读取所有寄存器的值
>
> PTRACE_CONT
>
> 继续执行示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。
>
> PTRACE_SETREGS  
>  设置寄存器
>
> PTRACE_DETACH  
>  结束跟踪
用ptrace来实现gdb调试原理：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    const int long_size = sizeof(long);
    /*主要通过PTRACE_PEEKDATA获取内存中的内容*/
    void getdata(pid_t child, long addr, char *str, int len)
    {   
        char *backup;
        int i, j;
        union u{
                long val;
                char chars[long_size];
        }data;
        i = 0;
        j = len/long_size;
        backup = str;
        while(i < j) {
            data.val = ptrace(PTRACE_PEEKDATA, child, addr + i * 4, NULL);
            memcpy(backup,data.chars,long_size);
            i++;
            backup += long_size;
        }
        j = len % long_size;
        if(j != 0) {
            data.val = ptrace(PTRACE_PEEKDATA, child, addr + i * 4, NULL);
            memcpy(backup, data.chars, j);
        }
    }
    /*与getdata相反，主要通过PTRACE_POKEDATA向内存写内容*/
    void putdata(pid_t child, long addr, char *str, int len)
    {   
        char *code;
        int i, j;
        union u{
                long val;
                char chars[long_size];
         }data;
        i = 0;
        j = len / long_size;
        code = str;
        while(i < j) {
            memcpy(data.chars, code, long_size);
            ptrace(PTRACE_POKEDATA, child, addr + i * 4, data.val);/*函数写入是以words为单位的，所以我们我们需要转换成word类型，还需要指针每次增加4。*/
            ++i;
            code += long_size;
        }
        j = len % long_size;
        if(j != 0) {
            memcpy(data.chars, code, j);
            ptrace(PTRACE_POKEDATA, child, addr + i * 4, data.val);
        }
    }
    int main(int argc, char *argv[])
    {   
        pid_t traced_process;//实际就是int类型
        struct user_regs_struct regs, newregs;//定义数据寄存器数据结构的两个变量，regs，newregs
        long ins;
        /*
        struct user_regs_struct {