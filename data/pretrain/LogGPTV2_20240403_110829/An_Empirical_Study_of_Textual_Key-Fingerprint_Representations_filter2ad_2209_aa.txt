title:An Empirical Study of Textual Key-Fingerprint Representations
author:Sergej Dechand and
Dominik Sch&quot;urmann and
Karoline Busse and
Yasemin Acar and
Sascha Fahl and
Matthew Smith
An Empirical Study of Textual  
Key-Fingerprint Representations
Sergej Dechand, University of Bonn; Dominik Schürmann, Technische Universität 
Braunschweig; Karoline Busse, University of Bonn; Yasemin Acar and Sascha Fahl,  
Saarland University; Matthew Smith, University of Bonn
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/dechand
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX An Empirical Study of Textual Key-Fingerprint Representations
Sergej Dechand
USECAP, University of Bonn
Yasemin Acar
CISPA, Saarland University
Dominik Sch¨urmann
IBR, TU Braunschweig
Sascha Fahl
CISPA, Saarland University
Karoline Busse
USECAP, University of Bonn
Matthew Smith
USECAP, University of Bonn
Abstract
Many security protocols still rely on manual ﬁngerprint
comparisons for authentication. The most well-known
and widely used key-ﬁngerprint representation are hexa-
decimal strings as used in various security tools. With
the introduction of end-to-end security in WhatsApp and
other messengers, the discussion on how to best repre-
sent key-ﬁngerprints for users is receiving a lot of inter-
est.
We conduct a 1047 participant study evaluating six
different textual key-ﬁngerprint representations with re-
gards to their performance and usability. We focus on
textual ﬁngerprints as the most robust and deployable
representation.
Our ﬁndings show that the currently used hexadeci-
mal representation is more prone to partial preimage at-
tacks in comparison to others. Based on our ﬁndings,
we make the recommendation that two alternative repre-
sentations should be adopted. The highest attack detec-
tion rate and best usability perception is achieved with a
sentence-based encoding. If language-based representa-
tions are not acceptable, a simple numeric approach still
outperforms the hexadecimal representation.
1
Introduction
Public key cryptography is a common method for au-
thentication in secure end-to-end communication and
has been a part of the Internet throughout the last two
decades [7, 11]. While security breaches have shown
that systems based on centralized trusted third parties
such as Certiﬁcate Authorities and Identity Based Private
Key Generators are prone to targeted attacks [42], decen-
tralized approaches such as Web of Trust and Namecoin
struggle with beeing adopted in practice due to usability
issues [7, 13, 30]. Certiﬁcate transparency systems, such
as CONIKS and others [24, 39, 27], aim to solve a subset
of these issues by providing an auditable directory of all
user keys. Still, manual key veriﬁcation, i. e., the link be-
tween public keys and the entities, such as hostnames or
people, remains a challenging subject, especially in de-
centralized systems without pre-deﬁned authorities, such
as SSH, OpenPGP, and secure messaging [12, 41].
Many traditional authentication systems still rely on
manual key-ﬁngerprint comparisons [17]. Here, key-
ﬁngerprints are generated by encoding the (hashed) pub-
lic key material into a human readable format, usually
encoded in hexadecimal representation. A variety of al-
ternatives such as QR Codes, visual ﬁngerprints, Near
Field Communication (NFC), and Short Authentication
Strings (SAS) have been proposed. Most of these sys-
tems offer speciﬁc beneﬁts, e. g., QR codes and NFC do
not require users to compare strings, but they also come
with speciﬁc disadvantages, e. g., they require hardware
and software support on all devices. While advances are
being made in these areas, the text-based representation
is still the dominant form in most applications.
However, due to the recent boom of secure messag-
ing tools, the debate of how to best represent and eval-
uate textual ﬁngerprints has opened up again and there
are many very active discussions among security ex-
perts [28, 33].
In April 2016, WhatsApp serving over
one billion users enabled end-to-end encryption as de-
fault by implementing the Signal protocol. Key veriﬁ-
cation is optional and can be done by using QR codes
or comparing numeric representations, in their case 60-
digit numbers [43]. However, it is not clear whether their
solution is more usable than traditional representations.
In this paper, we present an evaluation of different tex-
tual key-ﬁngerprint representation schemes to aid in the
secure messenger discussion. The requirements posed to
the developers are as follows:
• The ﬁngerprint representation scheme should pro-
vide ofﬂine support and work asynchronously. One
reason for this is that ﬁngerprints are often printed
on business cards or exchanged by third parties.
USENIX Association  
25th USENIX Security Symposium  193
• The ﬁngerprint should be transferable via audio
channels, e. g., it should be possible to compare ﬁn-
gerprint over the phone.
• The representation scheme should be as technically
inclusive as possible. No special hardware or soft-
ware should be required to verify the ﬁngerprints:
both require a concerted and coordinated effort be-
tween many actors to get enough coverage for a
comparison mechanism to be worthwhile for users
to adopt.
• The representation should be as inclusive as possi-
ble, i. e., excluding as few people with sensory im-
pairments (visual, color, audio, etc.) as possible.
The above requirements exclude many proposed rep-
resentation schemes and offer an explanation why they
have not seen any adoption outside of academia. For this
reason, we focus exclusively on textual ﬁngerprint rep-
resentations in our study. Textual key-ﬁngerprints do not
require hardware support and work in synchronous and
asynchronous scenarios, i. e., they can be compared via
voice or printed on business cards. Depending on the
scheme, they even could be recalled from memory and
exchanged over a voice channel.
This paper presents our study testing the usability of
various textual key-ﬁngerprint representation schemes.
Our study consists of two parts: (1) an experiment where
we measured how fast and accurate participants perform
for different schemes, and (2) a survey about their per-
ception and sentiment. These also contained a direct
comparison between the representations.
Our ﬁndings suggest that the most adopted alphanu-
meric approaches such as the Hexadecimal and Base32
scheme perform worse than other alternatives: under a
realistic threat model, more than 10% of the users failed
to detect attacks targeting Hexadecimal representations,
whereas our best system had failure rates of less than 3%.
While the best system for accuracy is not the fastest, it
is the system which received the highest usability rating
and is preferred by users.
In the following sections, we discuss related work fol-
lowed by an analysis of current implementations deploy-
ing in-persona key-ﬁngerprint representation techniques
and discuss our evaluated representation schemes. Then,
we describe our experiment evaluating text-based key-
ﬁngerprint veriﬁcation techniques with regards to their
attack-detection accuracy and speed. Our experiment
was conducted as an online study with 1047 participants
recruited via the Amazon Mechanical Turk (MTurk) plat-
form. We consider the scenario outlined above, where
a user compares two key-ﬁngerprint strings encoded by
the different representation schemes. In addition to the
implicit measurements of accuracy and speed, we also
a l i c e @ l o c a l h o s t :~ $ ssh a l i c e @ e x a m p l e . com
The a u t h e n t i c i t y of host ’ e x a m p l e . com ( 9 3 . 1 8 4 . 2 1 6 . 3 4 ) ’
can ’ t be e s t a b l i s h e d .
RSA key f i n g e r p r i n t is
6 f :85:66: da : e3 :7 a :02: c6 :5 e :62:3 f :36: b7 : d9 : b4 :2 c .
Are you sure you want to c o n t i n u e c o n n e c t i n g ( yes / no )?
(a) OpenSSH: Lowercase Hexadecimal with Colons
a l i c e @ l o c a l h o s t :~ $ gpg -- f i n g e r p r i n t Bob
pub
2048 R / 0 0 0 1 2 2 8 2 2015 -01 -01 [ e x p i r e s : 2020 -01 -01]
Key f i n g e r p r i n t =
73 EE 2314 F65F A92E C239
0 D3A 718 C 0701 0001 2282
uid
Bob 
(b) GnuPG: Uppercase Hexadecimal with Spaces
Figure 1: Alphanumeric Fingerprints Used in Practice
evaluate the self-reported user perception to get feed-
back about which systems are preferred by end users.
Finally, we present our results, discuss their implications
and takeaways, and conclude our work.
2 Related Work
Various key-ﬁngerprint representations have been pro-
posed in academia and industry. Various cryptographic
protocol implementations still rely on manual ﬁngerprint
comparisons, while the hexadecimal representation is
used in most of them. However, previous work suggests
that ﬁngerprint veriﬁcations are seldom done in prac-
tice [17, 37].
2.1 Key-Fingerprint Representations
Previous work has shown that users struggle with com-
paring long and seemingly “meaningless” ﬁngerprints
and it is suspected that they even might perform poorly
in this task [19]. While most previous work has focused
on the family of visual ﬁngerprints [35, 32, 19, 10], to
our knowledge, none of those focused on the differences
between various different textual ﬁngerprint representa-
tions.
Hsiao et al. have conducted a study with some tex-
tual and visual representation methods for hash veriﬁ-
cation [19]. They compared Base32 and simple word
list representations with various algorithms for visual
ﬁngerprints and hash representation with Asian charac-
ter sets (a subset of Chinese, Japanese Hiragana, and
Korean Hangul, respectively). A within-subjects online
study with 436 participants revealed that visual ﬁnger-
prints score very well in both accuracy and speed, to-
gether with the Base32 text representation. Hsiao et al.
conclude that depending on the available computation
power and display size, either Base32 or one of the vi-
sual ﬁngerprinting schemes should be used. They explic-
itly did not evaluate hexadecimal representation or digits
194  25th USENIX Security Symposium 
USENIX Association
2
“because that scheme is similar to Base32 and known to
be error-prone” [19]. However, our work shows that nu-
meric representations actually perform signiﬁcantly bet-
ter than Base32 and is less error prone. In addition, our
results suggest that language-based schemes, e. g., gen-
erated sentences achieve excellent results comparable to
visual schemes. At the same time, textual approaches are
more ﬂexible (can be read out loud) and do not exclude
people with sensory impairments.
Another study by Olembo et al. also focused mainly
on the topic of visual ﬁngerprints [32]. They devel-
oped a new family of visual ﬁngerprints and compared
them against a Base32 representation. The Base32
strings were twelve characters long and displayed with-
out chunking. The participants performed better with
the visual ﬁngerprints than with Base32, regarding both
accuracy and speed. Olembo et al. conclude that the
Base32 representation is far away from optimal when
it comes to manual key-ﬁngerprint veriﬁcation. We
test this claim by comparing Base32 representation with
other textual key-ﬁngerprint representation and eventu-
ally prove it wrong.
Regarding chunking, Miller et al. have published The
magical number seven and succeeding work that shows
that most people can recall 7± 2 items from their mem-
It has been shown that although there
ory span [29].
are slight differences between numbers, letters and words
(numbers perform slightly better than letters, and letters
slightly better than words), they perform similar in stud-
ies. More recent studies have shown that human working
memory easily remembers up to 6 digits, 5.6 letters and
5.2 words [1, 6, 8]. Adjusting chunk sizes to these num-
bers can help users when comparing hashes.
While all of the above studies offer interesting insights
into different (mainly visual) ﬁngerprint representations,
to the best of our knowledge there is not work focusing
on which textual representation performs the best. How-
ever, this knowledge would be extremely important to
help in the current debate in the secure messaging com-
munity. The representations currently being put forward
and implemented are far from optimal and the results of
our study can help improve the accuracy and usability of
ﬁngerprint representations. Unlike the above studies we
conduct our study with a more realistic attacker strenth,
as presented in subsection 4.1).
2.2 Passwords and Passphrases
A passphrase is basically a password consisting of a se-
ries of words rather than characters.
In academic lit-
erature, passphrases are often considered as a poten-
tially more memorable and more secure alternative to
passwords and are often recommended by system ad-
ministrators [23, 40].
In contrast to most passphrase-
Scheme
Example
Hexadecimal
18e2 55fd b51b c808
601b ee5c 2d69
Base32
Numeric
PGP
Peerio
ddrf l7nv dpea
qya3 5zoc 22i
2016 507 6420 1070 394
1136 2973 991 70
locale voyager wafﬂe disable
Belfast performance slingshot Ohio
spearhead coherence hamlet liberty
reform hamburger
bates talking duke rummy slurps
iced farce pound day
Sentences
Your line works for this kind power cruelly.
That lazy snow agrees upon our tall offer.
Table 1: Examples for different textual key-ﬁngerprint repre-
sentations for the same hash value
based systems, key-ﬁngerprints cannot be chosen by
the end-user and thus are more related to the system-
assigned passphrases ﬁeld: Bonneau et al. have shown
that users are able to memorize 56-bit passwords [4].
miniLock1 and its commercial successor Peerio2 use
system-assigned passphrases to generate cryptographic
key pairs easing key backup and synchronization among
multiple devices.
Contrary to widespread expectations, Shay et al. were
not able to ﬁnd any signiﬁcant recall differences between
system-assigned passphrases and system-assigned pass-
words [40]. However, they reported reduced usability
due to longer submission times due to typing.
Similar to passphrases, the usage of language-based
key-ﬁngerprint representations is claimed to provide bet-
ter memorability than just an arbitrary series of charac-
ter strings despite the lack of empirical evidence. In our
study, we measure the performance of the different ap-
proaches and also collect perception and feedback from
end users.
3 Background
In the past years, various textual key-ﬁngerprint repre-
sentations have been proposed. In this section, we ana-
lyze currently practised in-persona key veriﬁcation tech-
niques in well-known applications. For comparison, Ta-
ble 1 lists the approaches we used in our evaluation gen-
erated from the same hash value.
Only applications requiring manual key-ﬁngerprint
1https://minilock.io
2https://peerio.com
3
USENIX Association  
25th USENIX Security Symposium  195
veriﬁcation are considered. In mechanisms like S/MIME
or X.509, ﬁngerprints play only a secondary role because
certiﬁcates are veriﬁed via certiﬁcate chains.
In the following, SHA-1(x)16 deﬁnes the execution of
16 rounds of nested SHA-1 on x, a truncation to the left-
most 16 bits is deﬁned by x[0, . . . ,16], and pk is used as
an abbreviation for the values of a public key (differs for
RSA, DSA, or ECC).
3.1 Numeric
Numeric representation describes the notation of data us-
ing only numeric digits (0-9). The primary advantage of
a such system is that Arabic numerals are universally un-
derstood, and in addition, numeric key-ﬁngerprints show
a similarity to phone numbers. The encoding is achieved
by splitting a binary hash into chunks of equal length
and expressing each chunk as a decimal number, e. g., by
simply switching the representation base from 2 to 10.
The messaging and data exchange application SafeS-
linger3 implements this as a fallback scheme for unsup-
ported languages [14]. A 24 bit SAS in SafeSlinger (cf.
Figure 2a) can be expressed by three decimal encoded
8-bit numbers.
In the messaging platform WhatsApp, a ﬁngerprint
is calculated by SHA-256(pk)5200[0, . . . ,240]. This ﬁn-
gerprint is split up into six chunks, where each chunk
is represented by a ﬁve digits long number modulo
100,000 [43]. Concatenating this ﬁngerprint with the ﬁn-
gerprint of the communication partner results in the dis-
played representation, e. g.,
77658 87428 72099 51303
34908 23247 95615 27317
09725 59699 62543 54320
3.2 Alphanumeric
Alphanumeric approaches use numbers and letters to
represent data. Depending on the representation type
and its parameters, the letters can be presented either
in lower-case or in upper-case. The string can be chun-
ked into groups of characters, which are usually of equal
length. Chunking does not alter the information con-
tained, while changing lower-case letters to upper-case
letters (and vice versa) may does, depending on the cod-
ing scheme. Commonly used representations are Hex-
adecimal, Base32, and Base64.
3.2.1 Hexadecimal
Hexadecimal digits use the letters A-F in addition to nu-
merical digits and are a common representation for key-
ﬁngerprints and primarily used in SSH and OpenPGP.
3https://www.cylab.cmu.edu/safeslinger
Note that the case of the letters do not make any differ-
ence. Regarding chunking, both spaces (cf. Figure 1b)
and colons (cf. Figure 1a) are commonly used as separa-
tion characters.
Key ﬁngerprints in OpenPGP version 4 are deﬁned in
RFC 4880 [7] by
Hex(SHA-1(0x99(cid:31) len(cid:31) 4(cid:31) creation time(cid:31) algo(cid:31) pk))
where len is the length of the packet, creation time is the
time the key has been created and algo is unique iden-
tiﬁer for the public-key algorithm. While the inclusion
of creation time makes sure that even two keys with the
same key material have different ﬁngerprints, it allows an
attacker to iterate through possible past times to generate
similar ﬁngerprints skipping the key generation step [5].
The actual representation of OpenPGP ﬁngerprints is not
deﬁned in RFC 4880, but most implementations chose to
encode them in hexadecimal form, e. g., GnuPG displays
them uppercase in 16 bit blocks separated by whitespaces