command interpreters, thereby closing off this option. (The list of
command interpreters is specified in E∗.)
Another evasion strategy is to use in-memory code. By monitor-
ing the mmap/mprotect operations required for this, our MemExec
policy can detect such attacks (and did so in our evaluation).
Finally, attackers may use stolen credentials to access an
interactive command shell. We rely on additional suspicious
activities to detect such attacks. In our experimental datasets,
attackers downloaded and executed malware, overwrote library
files outside of the normal software update/install mechanisms,
or exfiltrated sensitive information. Our entry point identification
traced these actions to the shell process. This process was assigned a
suspect subject tag, stopping it from abusing our tag optimizations.
Naturally, it is possible for attacks to go undetected. But since we
support additional external detectors, this possibility isn’t specific
to our system. Indeed, an analyst won’t even initiate a forensic
analysis without signs of an attack, so the tag values become moot.
Co-opt benign process. Attackers may try to have their data copied
over many times by benign processes. The tag of the final copy can
then surpass the low integrity (or high confidentiality) threshold
due to tag attenuation. But this isn’t as simple as using a benign
cp program to copy data. In particular, the attacker would have to
control command-line arguments to cp, which is possible only if
the attacker’s process created the cp process. But in that case, cp
process would have susp env rather than a benign subject tag. So,
attackers have to rely on pre-existing file-copying workflows, e.g.,
the backup operation in the ccleaner example. We believe it is hard
enough to find a string of such benign workflows, but if an attacker
manages to do so, the mitigation measures described below will
still provide a way to cope with them.
Control susp env process. Techniques to induce susp env pro-
cesses to execute attacker’s code are the same as those for benign
processes. Thus, the detection/mitigation measures mentioned
above for benign processes will pose challenges for attacking
susp env processes,2 forcing them to look for other avenues, e.g., by
providing malicious arguments, or manipulating their input/output
channels. Reflecting the added opportunities provided by this
richer interface, we use a quiescent value of (cid:104)0.45, 0.45(cid:105) for these
processes, i.e., their data integrity will never rise above 0.5, so they
will always be present in the scenario graph seen by the analyst.
Tag attenuation, however, can cause some outputs of susp env
processes to have data integrity above 0.5. To avoid missing attack
elements due to this, an analyst can disable the use of susp env
tag altogether, replacing it with suspicious tag. We found that this
2Just as command interpreters may use read operations for code loading, they
may accept code arguments on their command-line. To account for this, we suppress
the transition to susp env if a suspect subject executes a command interpreter.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:08 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 7: Firefox Backdoor. Firefox was first compromised by a malicious ad server, resulting in an in-memory payload. This generated multiple MemExec alarms. Next,
an Escalate alarm was triggered, as the attacker escalated privilege using a kernel implant. Installed prior to the engagement, this implant was accessed using the device
/dev/glx alsa 675. Subsequently, DataLeak alarms were raised when Firefox read and exfiltrated /etc/passwd. In the second part of the attack, a cache process displayed
many of the same behaviors (and raised the associated alarms) as the compromised Firefox, but the provenance of this process was missing in the data. As a result, two
distinct entry points were identified, namely, the Firefox and cache processes. A forward analysis from these entry points resulted in the above graph. Note that cache
removes a file (/home/admin/cache) downloaded by Firefox, indicating that the two attacks are related.
change had no effect on the scenario graphs for some attacks, but
affected others significantly. But when we examine the total size
of all scenario graphs in our dataset, it isn’t substantially larger
after this change. (See Fig. 6.) In our experience, we found that
for some attacks such as the ccleaner and kernel malware, use
of susp env led to substantial simplification of the graph that
made it easier to understand the attack initially. Starting with this
understanding, it was much easier to ascertain that the nodes added
by the elimination of susp env tag were unimportant.
Mitigation. In the discussion above, we showed that many of
the obvious approaches for abusing our tag optimization don’t
work. The remaining abuse mechanisms can be mitigated using the
“refinement and rerun” process described in Section VII: analysts
can retry scenario graph construction by varying (a) processes
assigned suspect subject tags, (b) attenuation/decay rates, (c) tag
threshold for inclusion in the scenario graph, etc. As our system
is driven by a small set of rules, the implementation is very fast,
enabling retrials to be completed in a fraction of a second (Table VI).
E. Detection Details and Scenario Graphs
Fig. 8: Malicious HTTP Request. This figure shows one of the more successful
attempts of this attack, which began with an exploit of nginx. A malicious file
/tmp/vUgefal was then downloaded and executed, raising a F ileExec alarm. The
attacker went on to write another file /var/log/devc, which was intended to be injected
into the sshd process, but this attempt failed. Our entry point identification identified
vUgefal process. A forward analysis from this process yielded the above graph.
We also performed a backward analysis to identify the network entry point and the
nginx process that downloaded /tmp/vUgefal, but these nodes are not shown above.
scenario graph for this attack is shown in Fig. 7.
in depth in Section VII.
extension. Its scenario graph is shown in Fig. 12.
For the attacks in our dataset, we discuss below their detection, entry-
point identification, forensic analysis and scenario graph generation.
Two attacks are omitted because the scenario graph was too large
(Dropbear Trojan), or uninteresting (Executable Attachment).
Attacks Within Single Hosts
• Firefox backdoor: This attack uses an in-memory payload. The
• Browser extension: This attack exploited a vulnerable Firefox
• Malicious HTTP request: The attacker tried compromising the
sshd process on the FreeBSD system but failed. The scenario
graph shown in Fig. 8 captures one of the attack attempts that
includes downloading and executing a malicious file.
• CCleaner ransomware: Detection of this attack was described
• Recon with Metasploit: Similar to the ccleaner attack, the
attacker uploaded a malicious file /usr/local/bin/hc to the
system using stolen credentials. The file was later executed and
used for running recon as shown in Fig. 9.
• Kernel malware: This attack uses pre-installed kernel malware
for privilege escalation, and compromising an existing sshd
process, as described in Fig. 10.
Attacks With Lateral Movement
MORSE tracks lateral movement using cross-host tag propagation.
Specifically, if host A reads from host B within the same enterprise,
1150
Fig. 9: Recon with Metasploit. This attack began with a malicious file hc that was
scp’d onto the victim host using previously stolen credentials. When this file was
executed, a F ileExec alarm was triggered. This process, together with another
piece of downloaded malware /tmp/ext96481, probed and exfiltrated sensitive data
to a remote IP address. These actions raised DataLeak alarms. MORSE traced
these alarms back to hc. A forward analysis from this node results in the above
scenario graph. A backward analysis from hc revealed the scp process involved
and the network entrypoint, but these are not shown above.
we propagate the data tags from the sending subject on B to the
receiving subject on A. Subject tags are also propagated in the case
of remote access services. Hence, if a suspicious process on host B
launches an ssh session on A, the sshd process on A will also be
tagged suspicious. With this tracking, MORSE was able to detect
both attacks in our dataset that involved lateral movement:
• User-level rootkit: The attacker utilizes a pre-existing user-level
rootkit to log into a Linux host, and then moves laterally into
a second host. See Fig. 13 for additional details.
• Recon with rootkit: The F-4 attack in Fig. 11 is simpler,
consisting of two instances of the same attack on two machines.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:08 UTC from IEEE Xplore.  Restrictions apply. 
S:firefoxMEMMPRCRTO:/dev/glx_alsa_675WRO:stdoutWRO:IP:3d8245e8:80WRO:stderrWRO:IP:2e92135:80WRO:/home/admin/cacheCRTWRMODRDRDRDO:/etc/passwdRDS:cacheRDO:/etc/hostsRDCRTMPRRMSUO:IP:b49c6b92:80WRO:/var/log/xtmpCRTWRMODO:/etc/ld.so.cacheRDRDO:/proc/sys/vm/overcommit_memoryRD/proc//statRDO:/etc/groupRDO:/tmp/vUgefalS:/tmp/vUgefal BBBBEXEO:IP:8b7b0071:80WRO:/var/log/devcMODWRATRO:IP:3da72780:80WRO:/dev/nullWRO:/dev/randomRDRDO:/etc/pw.vT9LD5.origRDS:./hcSUO:/tmp/ext96481.CRTWRS:/tmp/ext96481.CLNO:PipeWRO:IP:80370cb9:443WRO:/usr/local/bin/hcEXEO:/proc//*O:/etc/hostsO:/proc/net/*O:/usr/bin/*O:/bin/dbus-daemonO:/usr/lib/*RDO:/etc/passwdRDRDO:/etc/groupRDO:/bin/bashRDEXESUWRRDRDRDFig. 10: Kernel Malware. Firefox, compromised by a malicious website, executed an in-memory payload that triggered several MemExec alarms. Next, an Escalate
alarm was triggered, as the attacker escalated privilege using a kernel implant installed prior to the engagement. Firefox then downloaded a malicious file /tmp/libnet.so,
which was meant to be injected into an existing sshd process. However, in the data, there is no injection, but sshd did raise several MemExec alarms, as well as a F ileExec
alarm due to loading /tmp/libnet.so. Next, sshd downloaded /home/admin/file/docs/audiobackup and made it executable, raising a ChP erm alarm. It also performed some
recon and exfiltrated the information, causing several DataLeak alarms. In total, more than 500 secondary alarms were raised, all tracing back to Firefox. A forward
analysis, performed about 10 minutes after the attack, yielded the above scenario graph.
Fig. 11: Recon with Rootkit attack. This attack began with uploads of mt, a rootkit, to two FreeBSD hosts. When mt was executed, a F ileExec alarm was triggered. As
mt gathered and exfiltrated sensitive information to an external IP address, DataLeak alarms were raised. These alarms were clustered independently on the two machines,
tracing back to the mt process. A forward analysis from this process yielded the above graph. Note that the two graphs are disconnected, except for the dotted line showing
the shared attacker site. A backward analysis from mt showed that the attacker logged in using scp, presumably using stolen credentials.
IX. Related Work
Fine-grained Taint-Tracking:
Fine-grained taint tracking [62],
[87], [14], [35], [44], [32], [33] avoids dependence explosion by
accurately tracking the source of each output byte to a single input
operation (or a few). Although these techniques can be evaded
by malware [17], they are very effective in mitigating dependence
explosion that typically involves benign applications such as
browsers. However, they have a high performance cost, slowing
down programs by 2x to 10x or more. BEEP [46], PROTRACER [53]
and MPI [52] developed a novel and efficient mechanism called
execution-partitioning, targeting applications such as servers and
web browsers that are prone to dependence explosion. MCI [45] and
PROPATROL [55] perform fine-grained taint tracking using model-
based inference. Unfortunately, these techniques can require some
manual assistance, and moreover, make optimistic assumptions
about program behavior that may not hold under attacks.
The main drawback of all fine-grained tracking approaches is the
need for extensive instrumentation of applications. Since vendors
don’t ship their application with such instrumentation, fine-grained
taint tracking is not an option for enterprises.
Attack Detection:
A number of research efforts on attack
detection/prevention focus on “inline” techniques that are
incorporated into the protected system, e.g., address space
randomization [54], [16], [48], control-flow integrity [12], [91],
memory safety [81], [88], [61], [28], [43], and so on. Unfortunately,
attackers have repeatedly bypassed these techniques using a
combination of social engineering and advanced exploit techniques.
Enterprises have to rely on intrusion detection systems to piece
together such attacks from system logs.
Intrusion detection techniques fall into three main categories:
(i) misuse detection [69], [42], [83], [39], which relies on patterns
of bad behaviors (“signatures”) associated with known attacks;
(ii) anomaly detection [20], [47], [72], [19], [21], [15], [41], [74],
which relies on learning a model of benign behavior and detecting
deviations from this behavior; and (iii) specification-based
detection [38], [82], which relies on specifications of expected
behaviors of applications.
Misuse-based techniques face challenges in detecting novel
attacks since their signatures, by definition, are not available.
Anomaly detection techniques can detect novel attacks, but they
experience significant false positive rates that have deterred
widespread deployment. Specification-based techniques have the
potential to detect novel attacks while holding down false positives,
but they require application-specific behavior specifications that
are time-consuming to develop.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:08 UTC from IEEE Xplore.  Restrictions apply. 
1151
S:firefoxCLNSUO:IP:56811fc9:80WRO:/tmp/libnet.soWRCRTO:/dev/glx_alsa_675WRMEMMPRATRO:IP:6242293d:80WRO:IP:80370c0a:53WRRDS:/usr/sbin/sshd -DRDRDLDWRRMCLNO:Pipe[23-24]CRTWRO:Pipe[9-10]CRTWRS:/usr/sbin/sshd -D -RCLNMPRCRTO:/home/admin/files/docs/audiobackupMODWRCRTATRS:/home/admin/files/docs/audiobackup 25.7.74.53 80 3CLNRDRDSUCLNO:/proc//oom_score_adjWRO:IP:80370c7a:WRO:IP:80370c75::80370c76:22WRWRO:/proc//loginuidWRO:/usr/sbin/sshdEXEO:/dev/urandomRDO:/etc/hosts.denyRDRDRDO:/etc/localtimeRDRDLDEXESUO:/dev/nullWRO:/home/admin/work/hostsRDO:/home/admin/files/docs/passwdRDO:/home/admin/files/launchmyserver.shRDO:/usr/home/Bill/./mtS:./mtEXEO:/dev/ttyWRO:IP:6cf7f069:80WRS:uname -aCLNO:/usr/home/BillRENO:/usr/home/Bill/passwdRENO:/libexec/ld-elf.so.1LDLDO:/etc/libmap.confRDRDO:/var/run/ld-elf.so.hintsRDRDRDO:IP:6cf7f069:80O:pipe6-7WRRDO:/usr/home/Bill/./passwdRDO:/usr/bin/unameEXEO:/usr/home/admin/./mtS:./mtEXEO:/dev/ttyWRWRS:netstat -naCLNO:IP:80370c0a:53WRO:/libexec/ld-elf.so.1LDLDO:/etc/libmap.confRDRDO:/var/run/ld-elf.so.hintsRDRDO:pipe6-7RDRDRDO:/usr/bin/netstatEXESLEUTH and MORSE policies can be thought of as specifications.
As a result, they can hold down false positives while detecting
unknown attacks, including those carried out during adversarial en-
gagements. At the same time, they avoid the per-application develop-
ment effort associated with previous specification-based techniques.
We accomplish this by developing application-independent policies
that exploit provenance. In particular, an audit event is analyzed to
determine if it advances an attacker’s high-level objectives, thereby
providing a motive for the attack; while the provenance derived
from the entire audit history is used to determine if the attacker
had the means to influence this event. This combination of means
(provenance) and motive (policies) has proved very successful in
other contexts as well, such as the detection of memory corruption
and injection attacks [86], [62], [71], securing untrusted code [50],
[76], and OS-wide integrity protection [77], [49], [79], [80].
Unfortunately, dependence explosion dilutes the value of
provenance in SLEUTH, resulting in numerous false positives on
our dataset. MORSE cuts down these by an order of magnitude
using tag attenuation and decay.
Alert Correlation:
IDSs often produce numerous alerts. Alert
correlation techniques combine related alerts into one, thus helping
users deal with the deluge. The main approaches, often used
together, are clustering of similar alerts, prioritization, and statistical
correlation [18], [65], [70], [40], [34], [66], [84], [67]. Industry
tools also use similar techniques in building SIEMs [7], [5], [10]
for alert correlation and enforcement based on disparate logs.
These techniques exploit structural similarities between alerts
(e.g., common IP addresses, ports, etc.) and temporal proximity
for correlation. In addition, some techniques rely on manually
specified prerequisites and consequences of attack steps [64],
or models that capture typical progression of attacks [27]. For
multi-stage attacks, provenance provides a more principled (and
often, far more accurate) basis to correlate attack steps [36], [90].
For this reason, recent works have come to rely on provenance to
correlate attack steps [78], [30], [57], [51], [29]. We discuss these
techniques in more detail below.
Coarse-Grained Provenance Based Forensic Analysis:
Back-
tracker [36] was the first to perform forensic intrusion investigation
using dependence analysis of system-call logs. Other works on
attack investigation [90], [26], [37] and provenance [60], [68], [24],
[25] capture information flow at the coarse granularity of system
calls. This invariably leads to the dependence explosion problem.
To mitigate dependence explosion, SLEUTH [30] uses split
integrity tags (called trustworthiness tags in their terminology).
Code trustworthiness tag captures the dependency of a subject’s
code (i.e., whether the code has a dependency on untrusted sources),
while data trustworthiness captures the dependency of its data.
By limiting its alarms and forensic analysis to follow subjects
with untrusted code tag, it achieved orders of magnitude reduction
in false alarms as well as scenario graph sizes on the simpler
attack scenarios contained in DARPA TC Engagement 1 dataset.
Unfortunately, the attacks in Engagements 3 and 4 were stealthier,
leading SLEUTH to miss most attacks.
MORSE’s subject tags are related to of SLEUTH’s code trustwor-
thiness tag. However, unlike SLEUTH, which simply forwards code
tags from inputs to outputs, MORSE’s subject tags can be thought
of as tag transformation functions. This more general view enabled
the development of tag attenuation and decay, and their selective
application to benign subjects.
Unlike MORSE, HOLMES [57] aims for a much higher level
summary of an APT campaign. Individual steps are recognized
using a hybrid approach that combines SLEUTH-style detection
policies with signatures based on MITRE’s Adversarial Tactics,
Techniques and Common Knowledge Base (ATT&CK) [58]. It
relies on information flow to link these steps and construct a
high-level scenario graph (HSG) that maps the attacker’s actions
to the APT kill-chain [8]. To mitigate dependence explosion,
HOLMES discards paths with a path factor greater than 3. Path
factor is more sophisticated than MORSE’s attenuation, but shares
the same rationale, i.e., objects serve as imperfect intermediaries
for propagating malicious behavior. At the same time, there is no
equivalent of MORSE’s decay in HOLMES. Since the goals, the
outputs, and datasets used differ across HOLMES and MORSE, a
direct comaprison of their results is not meaningful.
PRIOTRACKER [51] speeds up forward analysis by using a
prioritized graph exploration that assigns higher priority to edges
representing unusual events. NODOZE [29] improves on it by
prioritizing entire paths based on rareness, rather than individual
events. Only such rare paths are presented to the analyst, together
with the alerts raised on those paths. The main drawback of both
approaches is their assumption that processes involved in attacks,
including those that may be running attacker’s own malware, will
exhibit unusual behavior. However, as discussed before, attackers
have a great deal of control over their malware, and can alter
their behavior to blend in with benign background activity, as was
the case with the CCleaner ransomware example. In contrast, we
showed in Section VIII.D how MORSE resists such evasion.
Threat Hunting:
The techniques described above are geared at
automating forensic analysis of APT campaigns without requiring
prior knowledge about them. It is to be expected that fully automated
approaches may fail at times, so organizations have to rely on
human experts as their second line of defense. These experts need
to “hunt down” attacks, based on their past experience, reports on
recent vulnerabilities and exploits, the configuration of the victim’s
network, and most importantly, the alerts emitted by dectectors
deployed in the organization. Researchers have begun to build tools
and frameworks to assist such threat hunting efforts. Gao et al.
[22], [23] present query languages for threat hunters, and a system
for processing their queries. Shu et al. [73] model threat hunting
as a graph computation problem, and present a domain-specific
language that simplifies the development of custom graph searches.
Instead of relying purely on a manual approach, POIROT [56] is
aimed at automating searches for attacks witnessed previously, e.g.,
in threat intelligence reports. These known attacks are described
using query graphs. They develop efficient approximate graph
matching algorithms to match query graphs against the data from