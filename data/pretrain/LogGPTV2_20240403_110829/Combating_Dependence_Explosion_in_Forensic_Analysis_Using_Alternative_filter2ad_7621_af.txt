### Evasion Strategies and Detection Mechanisms

**Command Interpreters:**
By restricting the list of allowed command interpreters (specified in E*), we eliminate one potential evasion vector. This prevents attackers from using unauthorized command interpreters to execute malicious commands.

**In-Memory Code:**
Attackers may attempt to evade detection by using in-memory code. Our MemExec policy can detect such attacks by monitoring `mmap` and `mprotect` operations, which are necessary for executing in-memory code. During our evaluation, this method successfully detected several such attempts.

**Stolen Credentials:**
Another evasion strategy involves using stolen credentials to access an interactive command shell. We detect these attacks by identifying additional suspicious activities. In our experimental datasets, attackers often downloaded and executed malware, overwrote library files outside normal software update mechanisms, or exfiltrated sensitive information. Our entry point identification traced these actions to the shell process, which was then tagged as a suspect subject, preventing it from exploiting our tag optimizations.

**Undetected Attacks:**
While it is possible for some attacks to go undetected, our system supports additional external detectors, which helps mitigate this risk. An analyst typically initiates a forensic analysis only if there are signs of an attack, making the tag values less critical in such scenarios.

### Co-opting Benign Processes

**Data Copying:**
Attackers might try to copy their data multiple times through benign processes, hoping that the final copy's tag will surpass the low integrity (or high confidentiality) threshold due to tag attenuation. However, this is not straightforward. The attacker would need to control the command-line arguments of the `cp` program, which is only possible if the attacker’s process creates the `cp` process. In such cases, the `cp` process would be tagged as suspicious rather than benign. Therefore, attackers must rely on pre-existing file-copying workflows, such as the backup operation in the ccleaner example. Finding a sequence of such benign workflows is challenging, and even if successful, the mitigation measures described below will still provide a way to handle them.

### Controlling Suspicious Environment (susp env) Processes

**Execution of Malicious Code:**
Techniques for inducing susp env processes to execute malicious code are similar to those for benign processes. The detection and mitigation measures mentioned above for benign processes also apply to susp env processes, making it difficult for attackers to exploit them. They might try providing malicious arguments or manipulating input/output channels, but these methods are also subject to detection and mitigation.

**Quiescent Value:**
To reflect the added opportunities provided by the richer interface of susp env processes, we use a quiescent value of (0.45, 0.45). This ensures that the data integrity of these processes never rises above 0.5, keeping them visible in the scenario graph seen by the analyst. However, tag attenuation can cause some outputs of susp env processes to have data integrity above 0.5. To avoid missing attack elements, an analyst can disable the use of the susp env tag, replacing it with a suspicious tag. This change had no significant effect on the total size of all scenario graphs in our dataset but simplified the understanding of certain attacks, such as the ccleaner and kernel malware.

### Mitigation

**Refinement and Rerun:**
We have shown that many obvious approaches for abusing our tag optimization do not work. Remaining abuse mechanisms can be mitigated using the "refinement and rerun" process. Analysts can retry scenario graph construction by varying:
- Processes assigned suspect subject tags
- Attenuation/decay rates
- Tag thresholds for inclusion in the scenario graph

Our system is driven by a small set of rules, allowing retrials to be completed in a fraction of a second (Table VI).

### Detection Details and Scenario Graphs

**Firefox Backdoor:**
This attack uses an in-memory payload, generating multiple MemExec alarms. The attacker escalated privileges using a kernel implant, accessed via the device `/dev/glx_alsa_675`, and exfiltrated `/etc/passwd`. A forward analysis from the Firefox and cache processes resulted in the scenario graph shown in Fig. 7.

**Malicious HTTP Request:**
The attack began with an exploit of nginx, followed by the download and execution of a malicious file `/tmp/vUgefal`, raising a FileExec alarm. The attacker attempted to inject another file into the sshd process but failed. The entry point identification identified the vUgefal process, and a forward analysis yielded the scenario graph in Fig. 8.

**CCleaner Ransomware:**
Detection of this attack was described earlier. The attacker used pre-existing file-copying workflows, and the scenario graph captured the relevant activities.

**Recon with Metasploit:**
The attacker uploaded a malicious file `/usr/local/bin/hc` using stolen credentials. The file was later executed and used for reconnaissance, as shown in Fig. 9.

**Kernel Malware:**
This attack used pre-installed kernel malware for privilege escalation and compromised an existing sshd process, as described in Fig. 10.

**User-level Rootkit:**
The attacker utilized a pre-existing user-level rootkit to log into a Linux host and move laterally into a second host. See Fig. 13 for details.

**Recon with Rootkit:**
The F-4 attack, shown in Fig. 11, involved two instances of the same attack on two machines.

### Related Work

**Fine-grained Taint-Tracking:**
Fine-grained taint tracking techniques [62, 87, 14, 35, 44, 32, 33] accurately track the source of each output byte to a single input operation, avoiding dependence explosion. However, they have a high performance cost and require extensive instrumentation, making them impractical for enterprises.

**Attack Detection:**
Inline techniques like address space randomization, control-flow integrity, and memory safety have been bypassed by advanced exploit techniques. Enterprises rely on intrusion detection systems to piece together attacks from system logs. These systems fall into three categories:
- Misuse detection (relying on known attack signatures)
- Anomaly detection (detecting deviations from learned models of benign behavior)
- Specification-based detection (relying on expected behaviors of applications)

**Alert Correlation:**
IDSs produce numerous alerts, and alert correlation techniques combine related alerts to help users manage the volume. Main approaches include clustering, prioritization, and statistical correlation. Provenance provides a more principled basis for correlating attack steps, as seen in recent works [78, 30, 57, 51, 29].

**Coarse-Grained Provenance Based Forensic Analysis:**
Backtracker [36] and other works [90, 26, 37, 60, 68, 24, 25] use system-call logs for forensic analysis. SLEUTH [30] uses split integrity tags to reduce false alarms, but it missed many stealthy attacks in Engagements 3 and 4. MORSE’s subject tags, combined with tag attenuation and decay, provide a more general and effective approach.

**Threat Hunting:**
Tools and frameworks assist threat hunting efforts, such as query languages [22, 23], graph computation models [73], and automated searches for known attacks [56]. These tools help human experts hunt down attacks based on past experience, recent vulnerabilities, and network configuration.