similarity | 0.75    
```    
压测函数如下    
```      
-- 使用随机字符串进行相似搜索（用于压测）      
create or replace function get_tbl(int) returns setof record as      
$$      
declare      
  str text;      
begin      
  perform set_limit(0.7);    
  -- 从第1位开始，取28位，然后插入4个随机中文，再从29位开始取28位。这个字符串作为相似查询的输入。相似度为0.75。    
  select substring(info,1,28)||gen_hanzi(4)||substring(info,29,28) into str from tbl where id=$1 limit 1;        
  return query execute format($_$select similarity(info, %L) as sml,   -- 计算输入词与存储字符串的相似度    
     * from tbl     
     where info %% %L             -- 相似度超过阈值    
     order by sml desc            -- 按相似度排序(倒排，越相似的排在越前面)    
     limit 10$_$,  str, str);        
end;      
$$ language plpgsql strict;      
```      
查询测试    
```    
postgres=# select * from get_tbl(1) as t(sml float4, id int, info text);    
 sml  | id |                                                               info                                                                   
------+----+----------------------------------------------------------------------------------------------------------------------------------    
 0.75 |  1 | 懛瑌娺罊鹜凳芹绱茙蠡㥪礛唾霹跷憙胣缃犭昉斗蒽曲牵痈嚒巈茑莥钶们鼗楝𫝩眦条弘娸霵镯钻夊涨鮗傞屽嶋莁艳舸鮉蟙材骘媨迁内橰畁蜫征瘭缆竟    
(1 row)    
Time: 92.229 ms    
```    
压测脚本    
```    
vi test.sql    
\set id random(1,15625000)    
select * from get_tbl(1) as t(sml float4, id int, info text);    
```    
压测    
```    
-- 并行度调低    
alter role postgres set max_parallel_workers_per_gather =2;    
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 120    
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 64  
number of threads: 64  
duration: 120 s  
number of transactions actually processed: 51503  
latency average = 149.175 ms  
latency stddev = 20.054 ms  
tps = 428.589421 (including connections establishing)  
tps = 428.699150 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.003  \set id random(1,15625000)  
       149.311  select * from get_tbl(1) as t(sml float4, id int, info text);  
```    
性能瓶颈分析：    
1、CPU跑满，IO也蛮高    
```    
top - 19:32:05 up 217 days,  9:11,  3 users,  load average: 38.04, 21.38, 11.92    
Tasks: 768 total,  57 running, 710 sleeping,   0 stopped,   1 zombie    
%Cpu(s): 82.0 us, 12.8 sy,  0.0 ni,  4.1 id,  1.1 wa,  0.0 hi,  0.0 si,  0.0 st    
KiB Mem : 52807456+total, 11373780 free, 14563392 used, 50213737+buff/cache    
KiB Swap:        0 total,        0 free,        0 used. 35995504+avail Mem     
```    
CPU耗费主要是bitmapscan, cpu进行tuple recheck造成。    
IO耗费，主要是数据+索引已经接近600GB，超过了内存大小，涉及到大量的IO访问。    
## 小结    
### 数据构造性能指标：    
10亿文本数据写入耗时： 18分钟。    
GIN索引生成耗时： 180分钟。    
### 空间占用：    
10亿文本： 223 GB    
索引： 332 GB    
### 性能指标：    
CASE | 单次相似搜索响应速度 | 整机压测相似搜索TPS | 整机压测相似搜索RT    
---|---|---|---    
10亿行，每行64个随机中文 | 40毫秒 | 428 | 149毫秒    
CPU跑满，IO也蛮高    
CPU耗费主要是bitmapscan, cpu进行tuple recheck造成。    
IO耗费，主要是数据+索引已经接近600GB，超过了内存大小，涉及到大量的IO访问。    
### 小结    
1、PostgreSQL 11 , append 并行，使得性能有大幅度提升。    
10亿条随机中文字符串（长度64）的相似搜索，耗时仅XXX秒。    
```    
postgres=# show enable_parallel_append ;    