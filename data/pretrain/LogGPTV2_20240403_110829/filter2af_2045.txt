# 【技术分享】深入剖析：利用Flash漏洞传播的小马样本分析（含样本下载）

##### 译文声明
本文为翻译文章，原文来源于安全客。译文仅供参考，具体内容和含义以原文为准。

作者：[playb0y23333](http://bobao.360.cn/member/contribute?uid=2762195961)  
预估稿费：300RMB  
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 前言
本文主要分析一个利用Flash漏洞 **CVE-2015-8651** 进行传播的病毒程序。尽管关于该Flash漏洞已有详细的分析报告，但本文将重点关注此漏洞在实际攻击中的应用，包括样本行为、通信加密方式等。

## 基本信息
### 样本文件信息
通过对样本进行静态分析，发现其采用了多种混淆技术，如函数间接跳转和字符串混淆。此外，样本还将关键代码进行了内存解析执行，使得静态分析难以定位到核心部分。因此，本文将通过调试来揭示其恶意行为。

## 样本行为分析
### 内存解析执行关键代码
样本首先解密并拷贝自身携带的病毒代码到运行空间中，然后通过内存解析获取所需的导入表函数地址，并修复代码中的函数引用。这一过程类似于常见的外壳程序运行方式。
![最终执行的代码示意图](图片链接)

### 注入msiexec进程
解密后的主功能代码创建了一个 `msiexec.exe` 进程，该进程是Windows Installer的一部分，通常用于安装MSI包。病毒通过注入Shellcode到该进程中，伪装成合法进程，并劫持其执行流程。
![替换后的msiexec.exe入口点代码](图片链接)

### 模糊API调用
注入到 `msiexec.exe` 的Shellcode根据保存的API名称哈希值获取后续调用的API函数地址，并判断是否需要间接调用。这种构造方式增加了调用敏感API时的隐蔽性，从而规避了某些检测机制。
![构造API函数入口代码](图片链接)

### 检测虚拟机进程
样本通过调用 `CreateToolHelp32Snapshot` 系列函数枚举系统进程，并根据进程名称计算CRC值来检测是否运行于虚拟机环境中。若检测到不适宜的环境，则通过持续调用 `Sleep` 函数暂停执行。
![虚拟机中vmtools进程被检测到](图片链接)

### 设置自启动
为了实现持久化，样本复制自身到用户目录下的 `AppData\Roaming` 文件夹，并重命名为 `WindowsSidebarT.exe` 以伪装成Win7小工具进程。随后，通过设置注册表项完成自启动配置。
![设置注册表项完成自启动](图片链接)

### 查询Windows Defender设置
样本查询了Windows Defender反间谍软件的相关服务及注册表配置，并尝试禁用该服务。
![服务被禁用后的状态](图片链接)

### 主机信息搜集
样本收集了系统盘信息、用户登录信息及系统信息等，为进一步操作做准备。
![获取系统信息](图片链接)

### 文件校验
样本读取磁盘上的文件并计算其MD5值，这些信息随后会被发送至木马控制端，可能用于验证回连信息和服务器校验。
![文件校验过程](图片链接)

## 通信流程分析
### 木马回连过程
样本首先解析回连域名 `pationare.bit` 和备用域名 `avaneredge.bit` 所绑定的IP地址，并尝试与之建立连接。成功建立连接后，采用HTTP协议与C&C服务器通信以隐藏流量。
![域名解析结果](图片链接)

### 通信数据加密流程
样本使用简单的异或运算及变异AES算法对通信数据进行加密。向控制端发送的信息主要包括主机名、程序MD5值和进程列表等。
- 数据前0x14字节填充随机值
- 将每个字节与前一个字节进行异或
- 使用ECB模式、128位分组的变异AES算法进行加密
- 填充数据长度至分组长度的整数倍
- 最终加密结果与HTTP头部组装后发送
![加密过程示意图](图片链接)

## 总结
该样本通过大量代码混淆、模糊API调用以及反调试和反虚拟机技术，极大提高了分析难度。其整体功能实现较为完善，包括通信流量隐藏和传输加密等。
**样本下载链接** [此处插入链接]

希望以上优化后的版本能更清晰地传达原文内容。如果有更多细节需要补充，请随时告知！