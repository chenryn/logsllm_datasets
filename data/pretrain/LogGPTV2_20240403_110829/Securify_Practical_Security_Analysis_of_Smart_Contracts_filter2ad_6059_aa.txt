title:Securify: Practical Security Analysis of Smart Contracts
author:Petar Tsankov and
Andrei Marian Dan and
Dana Drachsler-Cohen and
Arthur Gervais and
Florian B&quot;unzli and
Martin T. Vechev
Machine Learning Model for Smart Contracts
Security Analysis
Pouyan Momeni
Yu Wang
Reza Samavi
McMaster University, Canada
McMaster University, Hamilton, Canada
McMaster University, Hamilton, Canada
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—In this paper, we introduce a machine learning
predictive model that detects patterns of security vulnerabilities
in smart contracts. We adapted two static code analyzers to label
more than 1000 smart contracts that were veriﬁed and used
on the Ethereum platform. Our model predicted a number of
major software vulnerabilities with the average accuracy of 95
percent. The model currently supports smart contracts developed
in Solidity, however, the approach described in this paper can be
applied to other languages and blockchain platforms.
Index Terms—blockchain, smart contract, security vulnerabil-
ity, machine learning, code analysis, software testing
I. INTRODUCTION
Blockchain is a new decentralized data structure with a wide
range of applications. A crucial component of blockchain is
the smart contract which is an agreement written in computer
code and stored on the blockchain. It can encode a set of
rules or terms predeﬁned by the parties and execute them
automatically to enforce actions when certain events occur
without any need for a third party [1]. The algorithmic
structure of blockchain and lack of a central authority make
the platform an attractive target for attackers. Smart contracts
have a rapid developing process and this makes smart contracts
a more vulnerable target for adversarial attacks as, in general,
newly released software components are more susceptible to
programming errors and design defects [2]. Smart contracts
control the logic of transactions and the impact of an attack can
change the course of an application entirely (e.g., to redirect
a large amount of money to another account). The software
community response to this challenge has been proposing a
number of methods and tools including software testing, static
code analysis, and formal methods, to mitigate the impact of
potential security vulnerabilities in a smart contract.
Software testing involves checking the behavior of a pro-
gram for speciﬁc inputs. However, a single test only evaluates
one execution path and exhaustively checking every possible
paths within a program is usually impractical. The static anal-
ysis searches for bugs in computer software without executing
the program. However, the process is time consuming and
there is no one single analyzer that is able to ﬁnd all types of
vulnerabilities. Formal methods check the mathematical prop-
erties of intended functions by reasoning about the correctness
of the function with abstractions and lemmas based on function
speciﬁcations [3]. In addition to the general complexity of
applying formal methods, the method can only be applied after
the development of a smart contract is complete [4].
In this paper, we introduce a machine learning based predic-
tive model to detect security vulnerabilities of smart contracts.
We collected more than 1,000 veriﬁed smart contracts that
are currently in operation on Ethereum. From the dataset, we
extracted 17 features that characterize vulnerabilities in the
code. Then we used two static code analyzers, Slither [5] and
Mythril [6], to extract security vulnerabilities. We assigned
binary labels of present or not present for each 46 types of
detected vulnerabilities. For each vulnerability, one machine
learning model was trained with ﬁve-fold cross validation. In
total, 184 machine learning models were built and evaluated.
Our model predicted 16 types of vulnerabilities with an
average accuracy of 95% and the F1 score of 79%.
Existing works on ﬁnding software vulnerabilities based on
machine learning algorithms [7], [8], are limited to a speciﬁc
programming language such as C/C++ and Java. These ap-
proaches cannot be applied to smart contracts as Solidity is the
main programming language. Static code analyzers (without
utilizing machine learning models) are also used to detect
vulnerabilities in smart contracts developed in Solidity [1],
[6]. However, as shown in our experiment, the process of using
static code analyzers can be highly time consuming which is
not desirable for smart contract developers as they are usually
racing against the time to release their codes. The objective
of our research is to address this gap in smart contract testing
and propose an efﬁcient method that is reasonably utilizing
the power of static code analyzers, but delivers the test results
in a much more efﬁcient way.
The paper structure and contributions are as follows. In
Section II, we provide the background information on smart
contracts. In Section III, we describe the machine learning
model that utilizes code analyzers to detect security vulnerabil-
ities in smart contracts. In Section IV, we present the results of
running the array of machine learning models and discuss the
advantages and limitations of our approach. The related work
is reported in Section V. We conclude the paper in Section VII
and provide a number of future research directions.
II. SMART CONTRACTS AND CODE ANALYSIS
In this section, we provide an overview of smart contracts
and their security challenges. Next, we describe the program
structure of smart contracts and how the structure can be used
as the underlying pattern for our machine learning model.
Lastly, we show that the static code analysis is a promising
978-1-7281-3265-5/19/$31.00 ©2019 IEEE
approach for building a machine learning based model to
detect smart contracts’ security vulnerabilities.
A. Overview of Smart Contracts
A smart contract is similar to a protocol that is written in
computer codes to enforce all contract clauses between two or
more parties without the need of a third party. Traditionally,
When multiple parties are working together (e.g., in a supply
chain scenario), enforcement of the contract’s clauses depends
on a third party that all parties involved mutually trust. Pres-
ence of a third party can be itself problematic as private data
may be leaked or there could be a collusion between one of the
contract corespondents and the third party. Alternatively, the
third party can be replaced by a Decentrailized Autonomous
Organization (DAO). DAO is a decentralized control structure
that provides governance by encoding a set of smart contracts’
rules. The purpose of DAO is to eliminate the need for
manual documentation and governance. However, this solution
raises security concerns as attackers may exploit the security
vulnerabilities in the smart contract code. For example, in
2016, 60 million dollars were stolen by attacking the DAO
smart contract implemented on a crowdfunding platform (also
known as The DAO Attack [9]).
In Ethereum, a popular blockchain platform, smart con-
tracts can be created and used directly by users or other
contracts [10]. On this platform, every node has an Ethereum
Virtual Machine (EVM) to run the contracts. EVM creates a
level of abstraction between executing code and the machine.
This assures applications are not interfered by each other [11].
Furthermore, if a node tries to manipulate the computation
results of a smart contract, other nodes will notice it by running
the contract on their EVMs and voting against it.
B. Smart Contracts Security Challenges
Smart contracts are particularly more susceptible to security
vulnerabilities for the following reasons. First, Once a smart
contract is uploaded on the blockchain, any other contracts
or users can invoke the contract. This can generate an unpre-
dictable combination of inputs that executes on untested exe-
cution paths of a contract. Therefore, examining all execution
paths of a smart contract is critical. Second, when a released
software encounters a security problem, the developers often
make a patch to update the software and resolve the issue.
In contrast, patching is not possible for smart contracts as
the binary code of the contract and its states are stored in
immutable ledgers of the blockchain [2]. In rare cases, if the
security problem is severe, the administrator of the platform
can make a fork to alter or remove the ledger. However,
the forking process is complicated and expensive. Third,
due to the nature of blockchain applications (particularly for
cryptocurrencies), smart contract developers are racing against
the time to release their code. Given these characteristics,
there is a need for an efﬁcient tool that help developers detect
security vulnerabilities of smart contracts.
C. Smart contracts static code analysis
There are a number of programming languages for de-
veloping smart contracts such as Vyper [12], Serpent [13],
and Solidity [14]. Among these languages, Solidity is widely
used on various blockchain platforms due to its simplicity
and brevity [15]. Solidity is introduced by Gavin Wood
in 2014. The language is later developed by the Ethereum
project’s Solidity team. Solidity’s popularity also attracts more
attackers to ﬁnd and exploit new vulnerabilities. Therefore, our
research is focused on ﬁnding the security vulnerabilities for
smart contracts that are implemented in Solidity. We extracted
abstract syntax tree (AST) from Solidity source codes, as
an intermediate representation of the program, since AST
provides information about the program code that can be used
as features to ﬁnd vulnerabilities.
Abstract syntax tree (AST) is the data structure widely
used in compilers to represent the structure of program codes.
Each node in AST represents a syntactical element of a
programming language and the tree reveals the usage order of
these elements. Static code analyzers favor AST as it provides
rich details about the characteristics of source codes such as
the number of function deﬁnition or contracts within other
contracts. To produce an AST from Solidity codes, Solc (the
Solidity command-line compiler) is used.
Control ﬂow graph (CFG) represents all the execution paths
a program can take using graph notations [8]. CFG can be
extracted from AST where compilers are using CFG in order
to generate assembly code from a program’s statements. CFG
is also commonly used in static code analysis tools to locate
unreachable codes in the program.
Static code analysis: A static code analyzer searches for bugs
in a computer software without executing the program. There
are two kinds of static code analysis: analyzing the source
code and analyzing the object code [5]. In order to run a static
analyzer, the source code needs to be parsed ﬁrst through lexer
tools. Then an abstract syntax tree (AST) is generated from
the parsed code and a control ﬂow graph (CFG) is extracted
from the AST. With performing these steps, the static code
analyzer is able to check all execution paths through CFG
for potential bugs. Based on different types of vulnerabili-
ties, Static code analyzers perform different analysis such as
symbolic execution and taint analysis [1]. Symbolic execution
involves reasoning about the behavior of a program based on
different inputs while taint analysis tracks data ﬂows between
the source and sinks [16]. Since each analyzer is focusing on
a certain area of vulnerabilities, there is no general static code
analyzer that is able to ﬁnd a wide range of vulnerabilities.
An alternative approach is to run multiple analyzers to extend
the range. However, combining multiple analyzers requires
extensive processing time and computational resources. In
addition, developers will face the challenge of deciding on
which static code analyzers to use.
III. ML BASED SMART CONTRACT CODE ANALYSIS
Our model of machine learning based security vulnerability
analysis takes advantage of using multiple static code analyz-
ers while saving time and resources needed to directly running
each analyzer. We train a set of machine learning classiﬁers
with known vulnerabilities in order to predict existence of the
C. Static
Code Analysis
SECURITY VULNERABILITIES DETECTED BY STATIC CODE ANALYZERS
TABLE II
A. Data
Collection and
Preprocessing
B. Building
AST and Feature
Extraction
D. Labeling
E. Classiﬁcation
Fig. 1. Overview of the machine learning based code analyzer
same security vulnerabilities in a new contract. There are ﬁve
major steps to create our machine learning based code analyzer
which is illustrated in Fig. 1. The detailed description of each
step is provided as follows.
A. Data Collection and Preprocessing
The dataset in our model was collected from Etherscan [17],
a block explorer, search API, and analytic platform for
Ethereum. In total, we collected 13,745 unique active smart
contracts source codes written in Solidity. There were different
versions of smart contracts. Thus, the source codes of the
contracts needed to be compiled with their own or higher
compiler versions [18]. Since the Solidity compiler’s Version 4
is not backward compatible we focused on the smart contracts
of version 0.4.18 in the dataset and the number of qualiﬁed
smart contracts reduced to 1,013. The dataset was split into
80% training and 20% testing sets.
B. Building AST and Feature Extraction
From our dataset, we extracted 17 features from ASTs as
listed in Table I. These features were the common Solidity
code structures with more than 1000 times occurrences in
our dataset. These features represent the complexity of the
code and can be separated into two categories: 1) features
that represented the execution path (e.g., function calls) and
were directly added to the control ﬂow graph, and 2) other
features that represented heuristic guesses of the complexity
of the code such as lines of code (LOC).
TABLE I
Feature Name
EXTRACTED FEATURES FROM AST
Feature Name
#
Lines of code (LOC)
Contract deﬁnitions
Function deﬁnitions
Binary operations
Function calls
Blocks
Expression statements
Event deﬁnitions
Placeholder statements
Bytes
Elementary type addresses
10
11
12 Modiﬁer deﬁnitions
13
14 Modiﬁer invocation
15
16
17
Approve function deﬁnitions
Constant values
Hexadecimal addresses
#
1
2
3
5
6
7
8
9
C. Static Code Analysis
Two smart contract static code analyzers Mythril [6] and
Slither [5] were used in this step. These two analysers were
suggested to be effective by ConsenSys, a blockchain software
technology company with high impacts and reputation in the
blockchain community [19].
Mythril Classic: This analyzer uses several techniques such
as symbolic execution and taint analysis [16] for security vul-
nerabilities detection in Solidity codes [6]. Mythril can detect
19 types of vulnerabilities [20]. Out of these 19 vulnerabilities,
11 were found in our dataset as marked in Table II.
Code
Security Problem
Mythril
Slither
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30