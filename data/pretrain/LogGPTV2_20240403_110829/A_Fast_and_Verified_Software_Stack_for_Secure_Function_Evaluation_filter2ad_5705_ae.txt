332’257
497’014
2’616
5’261
13’196
26’421
3’309
11’429
24’424
42’294
65’039
92’659
28’494
131’900
540’224
90’834
164’179
168’069
42’677
Total
63’005
616’678
1’231’845
1’842’778
10’311
20’801
52’271
104’721
14’052
49’852
107’627
187’377
289’102
412’802
86’898
402’778
1’650’883
387’042
664’871
1’033’945
201’626
Non XOR
12’657
126’709
253’996
381’382
650
1’355
3’470
6’995
2’880
10’560
23’040
40’320
62’400
89’280
27’369
127’225
522’304
6’400
50’800
50’800
25’667
Total
43’361
431’413
863’103
1’294’251
3’086
6’316
16’006
32’156
12’674
46’914
102’754
180’194
279’234
399’874
79’310
369’202
1’516’930
31’338
310’554
490’586
116’181
Hamming distance for strings of different lengths, median compu-
tation via sorting and matrix multiplication (we believe that these
examples were used to collect the results in [34]), Additionally we
include an implementation of the SHA-256 compression function,
taken from the NaCl library,14 and three different implementations
of AES128: aes128-tab32 corresponds to the public-domain opti-
mized table-based implementation put forth by Rijmen, Bosselaers
and Barreto.15 aes128-sbox corresponds to the tabled implementa-
tion of AES included in the Tiny AES in C library,16 which, unlike
the previous implementation, stores tables using 8-bit rather than
32-bit words; this greatly reduces the book-keeping required to ex-
tract values from tables. aes128-opt corresponds to an optimized
version of aes128-sbox which we developed by modifying aes128-
box to make table accesses more Boolean-circuit-friendly, taking
advantage of our knowledge of the Boolean circuits used to instanti-
ate native C operators by the back-end, as well as the global cleanup
optimizations. This allows us to obtain a relatively efficient circuit
implementation from both CBMC-GC and optimized CircGen.
The verified version of CircGen is surprisingly close to the opti-
mized version in all circuits except those corresponding to the Ham-
ming distance and the optimized AES implementation we described
above (aes128-opt), for which global, circuit-wide, optimizations
give the greatest benefit. A comparison of optimized CircGen with
CBMC-GC shows that the two are relatively close for arithmetic
operations, CMBC-GC is better in Hamming distance computations,
and our tool is better in all programs that use arrays heavily, in-
cluding the vanilla versions of tabled AES implementations. The
global optimization passes are the subject of ongoing work. We
do not envision any conceptual difficulty in verifying them, but
they do imply reasonable effort to express cross-gate optimizations
such as memoization and simplification. Indeed, early experiments
reveal that these passes do exacerbate the memory usage of the
compiler. The means that we likely will not be able to rely on the
data structures made available by CompCert’s infrastructure as we
do in other passes (specifically, for Maps).
12http://forsyte.at/software/cbmc-gc/
13All data was collected with a timeout of 600.
14https://nacl.cr.yp.to
15Google “rijndael-alg-fst.c”
16https://github.com/kokke/tiny-AES128-C
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA19994 SFE SOFTWARE STACK EVALUATION
In this section we present a performance evaluation of the entire SFE
software stack based on FRESCO. The FRESCO framework is able
to read circuit descriptions in the format produced by CircGen. We
thus use the Boolean circuits generated in the micro-benchmarks re-
ported in the previous section to feed two protocol suites supported
by this framework.17 The results are given in Table 4.
The first protocol we test is the verified implementation of Yao’s
protocol described in Section 2, which has been integrated into
FRESCO as a new protocol suite (shown in the table as Yao). The
second is the Tiny Tables protocol of [29], which is provided in
the vanilla distribution of FRESCO; this protocol operates in the
preprocessing model, and includes XOR-specific optimizations. An
interesting feature of FRESCO is the ability to run the same circuit
transparently in either protocol, simply by changing the configured
suite. The times shown are the longest execution time for a party
participating in the protocol, using the host-local communications
infrastructure that is used for testing the FRESCO framework. The
linear evaluation time of our verified implementation of Yao’s gar-
bled circuit protocol verified implementation is visible in the data.
The amortized execution time per gate is just under 100 µs (this
ratio is not shown in the table; it is essentially a constant for all
circuits). For the Tiny Tables protocol we present the online compu-
tation time (TT onl) and the amortized execution time per gate (AT
pg). Here variations are caused by the optimizations that make the
evaluation on non-XOR gates less costly. To make this evident, we
also include in the table the ratio between the number of non-XOR
gates and the total number of gates (¬XOR). Indeed, in addition to
faster overall execution times due to the preprocessing trade-offs
allowed by this protocol, one can see that for circuits with a lower
percentage of non-XOR gates the amortized execution time per
gate drops to as little as 40 µs per gate.
We stress that the goal here is not to compare the speed of Yao’s
protocol with Tiny Tables: this would be meaningless not only be-
cause these protocols offer incomparable security guarantees, but
also because the two implementations have significantly different
characteristics. Indeed, the fact that FRESCO operates over Java
has obvious performance costs. These are somewhat mitigated for
our verified implementation of Yao’s protocol, which is running na-
tively. However, this is not the case for the pre-existing Tiny Tables
implementation, and so it is most likely that even faster execution
times could be achieved for the same circuits in other MPC frame-
works. Our true goal by presenting these results is to demonstrate
integration of the software artifacts that we have developed into a
pre-existing open-source framework, and to illustrate the relative
benefits of the verified and optimized Boolean circuits produced by
our compiler.
5 RELATED WORK
There have been significant advances towards the development
of computer-aided tools for cryptography. These tools fall into
two loosely related categories. The first category covers a broad
spectrum of high-assurance tools, which use formal methods to
17For CBMC-GC outputs we implement a circuit translator that preserves gate counts
modulo the introduction of a small number of output gates, which are required by the
FRESCO input format.
deliver strong correctness or security guarantees on models or
(more rarely) on implementations. The second category comprises
many cryptographic engineering tools, whose goal is to facilitate
the development and rapid deployment of high-speed, high-quality
software. We review some of the main tools from both families.
For the sake of focus, we limit our review to prior work that ei-
ther delivers verified security proofs in the computational model,
targets verified implementations, or is directly relevant to secure
multi-party computation. We refer the reader to [20] for a more
extensive account of the use of formal methods in (symbolic and
computational) cryptography, and to [14, 36] for motivations on
computer-aided cryptographic proofs.
5.1 High-assurance cryptography
General-purpose tools. CryptoVerif [19] was among the first
tools to support cryptographic security proofs in the computational
model and it has been used for verifying primitives as well as pro-
tocols. More recently, Cadé and Blanchet [24] have complemented
the work on CryptoVerif with a mechanism to generate functional
code from CryptoVerif models and use it to generate a verified
implementation of SSH.
Swamy et al. [55] build a type-based approach for reasoning
about programs written in the typed functional programming lan-
guage F⋆. Bhargavan et al. [18] subsequently use F⋆ to develop high-
assurance implementations of TLS. Rastogi, Swamy and Hicks [54]
also use F⋆ as a host language for embedding Wysteria, a domain-
specific language for multi-party computation.
Appel [5] uses VST (Verified Software Toolchain) [4] to prove
the functional correctness of a machine-level implementation of
SHA-256. In a companion effort, Beringer et al. [17] connect VST
with FCF (Foundational Cryptographic Framework) of Petcher and
Morrisett [51], in order to provide a machine-checked proof of
reductionist security for a realistic implementation of HMAC.
High-assurance MPC. There have been many works that develop
or apply formal methods for secure multi-party computation.
Backes et al. [6] develop computationally sound methods for
protocols that use secure multi-party computation as a primitive.
However, they do not consider verified implementations. Wyste-
ria [53] is a new programming language for mixed-mode multiparty
computations. Its design is supported by a rigorous pen-and-paper
proof that typable programs do not leak information in unintended
ways. Dahl and Damgård [26] consider the symbolic analysis of
specifications extracted from two-party SFE protocol descriptions,
and show that the symbolic proofs of security are computationally
sound in the sense that they imply security in the standard UC
model for the original protocols. Pettai and Laud [52] develop a
static analysis for proving that Sharemind applications are secure
against active adversaries.
Fournet, Keller and Laporte [32] propose a certified compiler
from C to quadratic arithmetic circuits (QAP) compatible with the
domain of SNARKs. However, the underlying cryptographic system
does not come with a verified implementation.
Carmer and Rosulek [25] introduce LiniCrypt, a core language
for writing programs that perform linear operations on a finite field
and calls to random oracles. They prove that the equivalence of
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA2000Table 4: CBMC-GC vs CircGen vs Optimized CircGen: Timings (ms) for two FRESCO suites.
CBMC-GC
CircGen
Computation
arith100
hamming1600
median21
matrix3x3
aes-opt
sha256
Yao
5590
5533
6204
7689
2836
9943
¬XOR
35%
24%
60%
38%
21%
25%
TT onl
AT pg
3260
1411
6756
5712
1543
5157
0,071
0,062
0,101
0,066
0,050
0,045
Yao
6710
12038
4801
7700
32935
17309
¬XOR
27%
25%
23%
33%
23%
21%
TT onl
AT pg
3390
4997
2367
5297
15997
7642
0,054
0,048
0,047
0,061
0,041
0,038
Yao
5196
6252
4540
7067
2901
9879
TT onl
CircGen Opt.
¬XOR
29%
22%
23%
35%
20%
22%
2549
1649
2057
4882
1182
4772
AT pg
0,059
0,051
0,044
0,062
0,038
0,041
LiniCrypt programs can be decided efficiently, and leverage this
result to build a tool for SMT-based synthesis of garbled circuits.
5.2 Engineering of MPC protocols
FRESCO [27] is a Java framework for efficient secure computa-
tion. In FRESCO, functions to be securely evaluated are described
as circuits; we equip our certified compiler with a back-end that
integrates seamlessly into this framework. Run-time systems in
FRESCO specify how circuits are evaluated, and are thus highly
dependent on the supported protocols for secure computation. In
addition to our formally verified implementation of Yao’s protocol
and the Tiny Tables protocol we use as benchmark, run-time sys-
tems in FRESCO include support for several protocols for secure